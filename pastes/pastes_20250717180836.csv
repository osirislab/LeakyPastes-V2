id,title,username,language,date,content
MXtLqsmZ,Hadez Method Leaked???? TC,Qais2009,JavaScript,Thursday 17th of July 2025 01:07:26 PM CDT," 
>EBOOK<
www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw&dl=0

2orM1H
"
hRLQK0LM,FREE 500$ GIFTCARDS???? VF,KzOcc,JavaScript,Thursday 17th of July 2025 01:07:23 PM CDT," 
>EBOOK<
https://www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw

3NLIxW
"
qG0ExgFc,$200 INSTANTLY [Works Worldwide]? SD,CoolPlayerYT,JavaScript,Thursday 17th of July 2025 01:07:04 PM CDT," 
>EBOOK<
https://www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw

i0PQkz
"
aBncv4uG,1500$ in 1 day [Method]? MA,Qais2009,JavaScript,Thursday 17th of July 2025 01:04:26 PM CDT," 
>EBOOK<
https://www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw&dl=0

QzXmKq
"
VR4Uvyup,?FREE Method Leaked? 1Y,KzOcc,JavaScript,Thursday 17th of July 2025 01:04:21 PM CDT," 
>EBOOK<
https://www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw

FAGR0H
"
HyRwFzyi,Hadez Method Leaked???? TC,CoolPlayerYT,JavaScript,Thursday 17th of July 2025 01:03:53 PM CDT," 
>EBOOK<
www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw&dl=0

7StPKW
"
YxLBsK37,?Make 1500$ in 1 day [Method]? AZ,Qais2009,JavaScript,Thursday 17th of July 2025 01:01:24 PM CDT," 
>EBOOK<
https://www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw

WwSvNK
"
9Y4Unkuv,FREE 500$ GIFTCARDS???? VF,KzOcc,JavaScript,Thursday 17th of July 2025 01:01:10 PM CDT," 
>EBOOK<
https://www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw

uBqkAK
"
rzM50544,?Make 1500$ in 1 day [Method]? AZ,CoolPlayerYT,JavaScript,Thursday 17th of July 2025 01:00:52 PM CDT," 
>EBOOK<
https://www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw

Vh2O4e
"
Ts48YgFN,Untitled,Alexandr0v,C#,Thursday 17th of July 2025 12:59:11 PM CDT,"public async Task<OrderConfirmationViewModel?> GetOrderConfirmationDataAsync(string userId)
{
    if (string.IsNullOrEmpty(userId))
        throw new ArgumentException(UserIdNullOrEmptyMessage);

    ApplicationUser? user = await this._userManager
        .FindByIdAsync(userId);

    if (user == null)
        return null;

    Order? order = await this._orderRepository
        .GetPendingOrderWithItemsAsync(userId);

    if (order == null || !order.OrdersItems.Any())
        return null;

    decimal totalPrice = order.OrdersItems.Sum(item =>
    {
        decimal unitPrice = item.Product?.Price ?? item.Computer?.Price ?? 0;
        return unitPrice * item.Quantity;
    });

    return new OrderConfirmationViewModel
    {
        FullName = user.FullName ?? string.Empty,
        Address = user.Address ?? string.Empty,
        City = user.City ?? string.Empty,
        PostalCode = user.PostalCode ?? string.Empty,
        PhoneNumber = user.PhoneNumber ?? string.Empty,
        TotalProductsPrice = totalPrice,
        DeliveryMethod = DeliveryMethod.None,
        Comment = string.Empty
    };
}"
PX7UjaYH,1500$ in 1 day [Method]? AZ,Qais2009,JavaScript,Thursday 17th of July 2025 12:58:22 PM CDT," 
>EBOOK<
www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw&dl=0

nLoBCB
"
JFJNMiQ4,1500$ in 1 day [Method]? AZ,KzOcc,JavaScript,Thursday 17th of July 2025 12:58:05 PM CDT," 
>EBOOK<
https://www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw&dl=0

iZ8Am2
"
5sgWNpjS,?Make $200 INSTANTLY [Works Worldwide]? 01,CoolPlayerYT,JavaScript,Thursday 17th of July 2025 12:57:50 PM CDT," 
>EBOOK<
https://www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw&dl=0

Td9Af8
"
Bf8pgXBs,Make 3500$ in 1 day [Method]???? XH,Qais2009,JavaScript,Thursday 17th of July 2025 12:55:21 PM CDT," 
>EBOOK<
www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw&dl=0

DV53xv
"
QejMxiLJ,Hadez Method Leaked???? TC,KzOcc,JavaScript,Thursday 17th of July 2025 12:55:04 PM CDT," 
>EBOOK<
www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw&dl=0

WV0aYZ
"
L92V5Kcp,Make 3500$ in 1 day [Method]???? XH,CoolPlayerYT,JavaScript,Thursday 17th of July 2025 12:54:49 PM CDT," 
>EBOOK<
https://www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw

njH9KL
"
sUKzzNqP,Hadez Method Leaked???? TC,Qais2009,JavaScript,Thursday 17th of July 2025 12:52:20 PM CDT," 
>EBOOK<
https://www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw&dl=0

ftq4PY
"
Dfe3DZ2P,300$ GIFTCARDS? QI,KzOcc,JavaScript,Thursday 17th of July 2025 12:52:04 PM CDT," 
>EBOOK<
www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw&dl=0

oy2E5r
"
XkTcCybG,Make $3500 INSTANTLY [Works Worldwide]???? HL,CoolPlayerYT,JavaScript,Thursday 17th of July 2025 12:51:49 PM CDT," 
>EBOOK<
www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw&dl=0

xUILsQ
"
96Emiyx2,Make $3500 INSTANTLY [Works Worldwide]???? HL,KzOcc,JavaScript,Thursday 17th of July 2025 12:47:31 PM CDT," 
>EBOOK<
www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw&dl=0

yMq7f4
"
vKJpTw3r,1500$ in 1 day [Method]? AZ,CoolPlayerYT,JavaScript,Thursday 17th of July 2025 12:47:14 PM CDT," 
>EBOOK<
https://www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw

CWXwJq
"
AA6Q2aZt,1500$ in 1 day [Method]? MA,KzOcc,JavaScript,Thursday 17th of July 2025 12:44:30 PM CDT," 
>EBOOK<
www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw&dl=0

i3MRPs
"
PVU9CeiC,Hadez Method Leaked???? TC,CoolPlayerYT,JavaScript,Thursday 17th of July 2025 12:44:13 PM CDT," 
>EBOOK<
https://www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw&dl=0

IjSdds
"
hLX4xW4L,PlayerMovement,nemszabo,C#,Thursday 17th of July 2025 12:42:01 PM CDT,"using _FDP_;
using System.Security.Cryptography;
using UnityEngine;

/// P: Player
[RequireComponent(typeof(Rigidbody))]
public class P_Movement_Control : FDP_UpdatingControl_Base {
    #region Variables
    private SP_Input_Control input_c;
    private P_Sprint_Control sprint_c;
    private P_Attack_Control attack_c;

    public Rigidbody body;
    public Transform camAnchor_tf;
    public Animator animator;

    [Header(""Freeze beállítások:"")]
    private protected bool keepMomentumOnQuest = false;
    private enum FreezeMode { None, Fall, Quest }
    FreezeMode freezeMode = FreezeMode.None;

    public float moveSmoothTime = 0.25f;
    Vector3 vecVelocity = Vector3.zero;
    float fVelocity = 0f;

    public float rotationSmoothTime = 0.05f;
    Vector3 rotVecVelocity = Vector3.zero;
    float rotFVelocity = 0f;

    public float speed = 5f;
    /// jelenleg a soundEffects_c-ben használjuk
    public bool isMoving;

    /// <summary>
    /// A játékos lehetséges állapotai a mozgás vezérléséhez.
    /// </summary>
    public enum MovementState {
        Normal,    // Normál mozgás input alapján
        Attack,    // Támadás közbeni állapot
        Falling,   // Leesés közbeni korlátozott mozgás
        Interact   // Interakciós (pl. beszélgetés, elemek kezelése)
    }
    [SerializeField] private MovementState movementState  = MovementState.Normal;

    [Header(""Ground Check beállítások"")]
    public Transform groundCheck;       // Az üres GameObject (lábaid magasságában)
    public float groundDistance = 0.2f;  // Raycast félátmérő
    public LayerMask groundMask;        // Talaj réteg
    [SerializeField] private bool isGrounded;            // Változó

    [Space(5)]
    [Header(""DEBUG"")]

    private FDP_DelegateVConnector<float> fdpDlgt_SpeedMultiplierChange;
    private float actualSpeed;
    #endregion

    #region Setup
    protected void PreSetup(P_Master_Control playerMaster_c) {
        input_c = SP_Input_Control.instance;
        sprint_c = GetComponent<P_Sprint_Control>();
        attack_c = playerMaster_c.attack_c;

        body = GetComponent<Rigidbody>();

        camAnchor_tf = playerMaster_c.camera_c.transform;

        actualSpeed = speed;

        fdpDlgt_SpeedMultiplierChange = new FDP_DelegateVConnector<float>(
            this, SpeedMultiplierChanged, $""P_Sprint_Control:OnSpeedMultiplierChange""
        );
    }
    protected override void PreSetup() {
        throw FDP_ErrorHandler.NewError(
            $""QCSERROR: P_Movement_Control:PreSetup: Használd a PreSetup(Transform camAnchorTransform) függvényt!"" +
            ""\nA PreSetup függvényt a P_Master_Control paraméterrel kell meghívni."" +
            ""\nEllenőrizd, hogy a megfelelő master script megfelelően inicializálja ezt a komponenst.""
        );
    }

    public void Setup(
        P_Master_Control playerMaster_c
    ) {
        if (debugLog) Debug.Log($""{this}.Setup..."");

        PreSetup(playerMaster_c);

        CheckPreSetupOk();

        sprint_c.OnSpeedMultiplierChange.Add(fdpDlgt_SpeedMultiplierChange);

        setupDone = true;
        enabled = setupDone;
        if (debugLog) Debug.Log($""{this}:Setup done\n"");
    }

    public override void Setup() {
        throw FDP_ErrorHandler.NewError(
            $""QCSERROR: P_Movement_Control: Setup() nem hívható meg paraméter nélkül!"" +
            ""\nA Setup függvényt a P_Master_Control paraméterrel kell meghívni."" +
            ""\nEllenőrizd, hogy a megfelelő master script megfelelően inicializálja ezt a komponenst.""
        );
    }
    #endregion

    #region Updates
    private Vector3 lastLookDirection = Vector3.zero;
    void FixedUpdate() {

        // 1) Talajdetekció (GroundCheck)
        GroundCheck();

        // 2) Falling státusz ellenőrzése
        CheckFalling();

        // 3) State switch – minden állapotot külön metódusban kezelünk
        switch (movementState) {
            case MovementState.Normal:
                MovementStateNormal_Settings();   // Ha a Játékos állapot nélküli akkor a Freeze ki kapcsolva
                break;

            case MovementState.Attack:
                MovementStateAttack_Settings();   // Ha a Játékos attackol akkor a mozgás Freezelve van!
                break;

            case MovementState.Falling:
                MovementStateFalling_Settings();  // Ha a Játékos valahonnan leseik, az riányitás kikapcsol de a mozgás direction megmarad gravitációval
                break;

            case MovementState.Interact:
                //body.velocity = new Vector3(0f, body.velocity.y, 0f);
                break;
        }
        // Ez felel a teljes forgás/irányításért! [Eredeti változtatások nélkül]
        BaseMovementControll();
    }

    void Update() {
        animator.SetFloat(""velocity"", body.velocity.magnitude);
    }
    #endregion

    //EXTRA SPEEDET A BUFFBOL BEKOTNI
    #region Functions
    private void SpeedMultiplierChanged(float spendMultiplier) {
        if (debugLog) Debug.Log($""SpeedMultiplierChanged {spendMultiplier}"");
        actualSpeed = speed * spendMultiplier;
    }

    public void ChangeMovementState(MovementState newState) {
        this.movementState = newState;
    }

    //================Player Mozgás Logika===========\\
    //Normál Mozgás

    private void BaseMovementControll() 
    {
        if (input_c.horizontalInput != 0 || input_c.verticalInput != 0) {
            isMoving = true;
            Vector3 moveDirection = new Vector3(input_c.horizontalInput, 0, input_c.verticalInput);
            // maximalizáljuk a mozgás irány vektor hosszát 1-re
            moveDirection = Vector3.ClampMagnitude(moveDirection, 1);

            // a camAnchor és a saját transform elforgatása alapján a kamera, talajra vetített irányvektorát használjuk
            float camAngle = camAnchor_tf.eulerAngles.y;
            moveDirection = Quaternion.Euler(0, camAngle, 0) * moveDirection;

            // Preserve the current velocity's y-component (gravity effect)
            Vector3 velocity = body.velocity;
            velocity.x = actualSpeed * moveDirection.x;
            velocity.z = actualSpeed * moveDirection.z;
            body.velocity = velocity;

            if (moveDirection != Vector3.zero) {
                // a moveDirection-ra apply-olunk egy elfordulást, hogy a karakter ne instant forduljon a mozgás irányába
                moveDirection = Vector3.SmoothDamp(
                    transform.forward,
                    moveDirection.normalized,
                    ref rotVecVelocity,
                    rotationSmoothTime
                );
                // a karakter elfordulása a mozgás irányába az y tengely körül
            }

            lastLookDirection = attack_c.attackDirection != Vector3.zero ?
                attack_c.attackDirection.normalized :
                moveDirection;
        } else if (attack_c.attackDirection != Vector3.zero) {
            isMoving = false;
            // a attackDirection-ra apply-olunk egy elfordulást,
            // hogy a karakter ne instant forduljon a támadás irányába
            lastLookDirection = Vector3.SmoothDamp(
                transform.forward,
                attack_c.attackDirection.normalized,
                ref rotVecVelocity,
                rotationSmoothTime
            );
        } else {
            isMoving = false;
        }

        if (lastLookDirection != Vector3.zero) {
            transform.rotation = Quaternion.LookRotation(lastLookDirection);
        }
    }

    private void GroundCheck() {
        // Talajon vagyok-e?
        isGrounded = Physics.CheckSphere(
            groundCheck.position,
            groundDistance,
            groundMask
        );
    }

    private void CheckFalling() 
    {
        //Ha nem Falling & és nem grounded
        if (!isGrounded && movementState != MovementState.Falling) 
        {
            //TODO: Változtassa meg a Movement state-t Falling-ra
            ChangeMovementState(MovementState.Falling);

            //Animáció lejátszása
        } 
        else if (isGrounded && movementState == MovementState.Falling) {
            ChangeMovementState(MovementState.Normal);
        }
    }

    private void MovementStateNormal_Settings() 
    {
        // Vedd le a FreezePositionX és FreezePositionZ zászlókat
        body.constraints &= ~(RigidbodyConstraints.FreezePositionX | RigidbodyConstraints.FreezePositionZ);
    }

    private void MovementStateAttack_Settings() 
    {
        body.velocity = new Vector3(0f, body.velocity.y, 0f);

        // constraints: csak pozíció X/Z és X-Z forgás tiltása
        body.constraints = RigidbodyConstraints.FreezePositionX
                         | RigidbodyConstraints.FreezePositionZ
                         | RigidbodyConstraints.FreezeRotationX
                         | RigidbodyConstraints.FreezeRotationZ;
    }

    private void MovementStateFalling_Settings() 
    {
        // Falling: horizontális velocity megtartása, gravitáció-t a RigidBody Use Gravity kezeli 
        // lastLookDirection már BaseMovementControll beállítódott, amikor Falling-olunk
        Vector3 horizontalVelocity = lastLookDirection.normalized * actualSpeed;

        body.velocity = new Vector3(
                horizontalVelocity.x,
                body.velocity.y,    // gravitáció továbbra is hat
                horizontalVelocity.z
            );
    }

    #endregion

    #region Checks
    protected override void CheckPreSetupOk() {
        if (!input_c) {
            throw FDP_ErrorHandler.NewError(
                $""QCSERROR: input_c HIÁNYZIK! Character_Control:{this}"" +
                ""\nAz Input Control singleton nem található."" +
                ""\nEllenőrizd, hogy az SP_Input_Control megfelelően inicializálva van-e a játékban.""
            );
        }
        if (!body) {
            throw FDP_ErrorHandler.NewError(
                $""QCSERROR: body HIÁNYZIK! Character_Control:{this}"" +
                ""\nA Rigidbody komponens nem található a GameObject-en."" +
                ""\nEllenőrizd, hogy a RequireComponent attribútum megfelelően működik-e.""
            );
        }
        if (!camAnchor_tf) {
            throw FDP_ErrorHandler.NewError(
                $""QCSERROR: camAnchor_tf HIÁNYZIK! Character_Control:{this}"" +
                ""\nA kamera anchor Transform nem található."" +
                ""\nEllenőrizd, hogy a P_Master_Control megfelelően be van állítva és tartalmazza a camera_c referenciát.""
            );
        }
        if (!animator) {
            throw FDP_ErrorHandler.NewError(
                $""QCSERROR: animator HIÁNYZIK! Character_Control:{this}"" +
                ""\nAz Animator komponens nincs beállítva."" +
                ""\nHúzd be a megfelelő Animator komponenst az Inspectorban.""
            );
        }
        if (speed <= 0) {
            throw FDP_ErrorHandler.NewError(
                $""QCSERROR: speed <= 0! Character_Control:{this}"" +
                ""\nA mozgás sebességnek nagyobbnak kell lennie 0-nál."" +
                ""\nÁllítsd be a megfelelő értéket az Inspectorban.""
            );
        }
    }
    #endregion
}
"
34AWW6JX,????Make $3500 INSTANTLY [Works Worldwide]???? HL,KzOcc,JavaScript,Thursday 17th of July 2025 12:41:29 PM CDT," 
>EBOOK<
https://www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw&dl=0

I0eF15
"
52RFz0uS,?Make $200 INSTANTLY [Works Worldwide]? 01,CoolPlayerYT,JavaScript,Thursday 17th of July 2025 12:41:12 PM CDT," 
>EBOOK<
https://www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw&dl=0

4KivCQ
"
qWDWfqWC,Make 3500$ in 1 day [Method]???? XH,KzOcc,JavaScript,Thursday 17th of July 2025 12:37:00 PM CDT," 
>EBOOK<
https://www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw&dl=0

6DbGpF
"
8CKMdUtg,FREE 500$ GIFTCARDS F,CoolPlayerYT,JavaScript,Thursday 17th of July 2025 12:36:49 PM CDT," 
>EBOOK<
www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw&dl=0

uB5gi6
"
MG7JsEsK,200 INSTANTLY [Works Worldwide]? SD,KzOcc,JavaScript,Thursday 17th of July 2025 12:34:00 PM CDT," 
>EBOOK<
https://www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw&dl=0

RPVAxL
"
jmJ5qCLa,300$ GIFTCARDS? QI,KzOcc,JavaScript,Thursday 17th of July 2025 12:30:59 PM CDT," 
>EBOOK<
https://www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw&dl=0

P5CZHt
"
5kMwggr7,?FREE 300$ GIFTCARDS? P8,CoolPlayerYT,JavaScript,Thursday 17th of July 2025 12:30:45 PM CDT," 
>EBOOK<
https://www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw

CcAD6e
"
cxFF5bYy,FREE 500$ GIFTCARDS???? VF,KzOcc,JavaScript,Thursday 17th of July 2025 12:27:57 PM CDT," 
>EBOOK<
www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw&dl=0

LYf2zM
"
7K80YASM,Hadez Method Leaked TC,CoolPlayerYT,JavaScript,Thursday 17th of July 2025 12:27:43 PM CDT," 
>EBOOK<
www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw&dl=0

Kw2ySr
"
8hQy4Vk4,1500$ in 1 day [Method]? MA,KzOcc,JavaScript,Thursday 17th of July 2025 12:24:57 PM CDT," 
>EBOOK<
www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw&dl=0

qgAZNg
"
81edmHCc,Make $3500 INSTANTLY [Works Worldwide]???? HL,CoolPlayerYT,JavaScript,Thursday 17th of July 2025 12:24:42 PM CDT," 
>EBOOK<
www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw&dl=0

r3kCmy
"
zzmeZEzF,Hadez Method Leaked???? TC,KzOcc,JavaScript,Thursday 17th of July 2025 12:21:56 PM CDT," 
>EBOOK<
https://www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw&dl=0

oMybAG
"
UUQuXt86,Method Leaked? 1Y,CoolPlayerYT,JavaScript,Thursday 17th of July 2025 12:21:41 PM CDT," 
>EBOOK<
https://www.dropbox.com/scl/fi/7q8hdsh1gyh7c0buuedes/ebook.pdf?rlkey=pwbb1hvay9s8c4ar9bif7vas7&e=1&st=6uo5s4uw

e1gOzx
"
eHjyTSfD,issued-sql,temaon_lieto,GetText,Thursday 17th of July 2025 12:08:57 PM CDT,"INSERT INTO cascade_lvl02_discharge_encounters(
    id,
    history_number,
    order_via_history_number,
    line_number,
    major,
    minor,
    encounter_id,
    discharge_disposition_code,
    asserted_date,
    period_start_date,
    main_icd10_code,
    birth_date,
    bed_days_counter,
    legal_entity_id,
    patient_id,
    patient_age,
    patient_age_month,
    patient_weight,
    is_plurality_pregnancies
)
WITH patients AS (SELECT id,
                         birth_date,
                         legal_entity_id
                  FROM cascade_lvl01_patients),
    bed_days_encounters AS (
        SELECT
            bde.history_number,
            toDateTime(MIN(bde.period_start), 'Europe/Kyiv') AS period_start,
            toDateTime(MAX(bde.asserted_date), 'Europe/Kyiv') AS asserted_date,
        CASE
            WHEN period_start IS NULL THEN 0
            ELSE
                CASE
                    WHEN asserted_date IS NULL OR asserted_date < period_start THEN 0
                    ELSE
                        CASE dateDiff('day', period_start, asserted_date)
                            WHEN 0 THEN 1
                            ELSE dateDiff('day', period_start, asserted_date)
                            END
                    END
            END as bed_days_counter,
            bde.patient_id,
            argMin(bde.encounter_id, bde.order_via_history_number) AS encounter_id,
            argMin(bde.episode_id, bde.order_via_history_number) AS episode_id,
            argMin(bde.discharge_disposition_code, bde.order_via_history_number) AS discharge_disposition_code,
            MIN(bde.order_via_history_number) AS order_via_history_number,
            any(bde.legal_entity_id) AS legal_entity_id
        FROM cascade_lvl00_bed_days_encounters bde
        WHERE bde.legal_entity_id = 3387
        GROUP BY bde.patient_id, bde.history_number
    )
SELECT
    first_value(e.episode_id)                                                    AS id,
    e.history_number                                                              AS history_number,
    e.order_via_history_number                                                    AS order_via_history_number,
    nullIf(dt3220i10m.line_number, '')                                            AS line_number,
    CAST(splitByString('.', CAST(dt3220i10m.line_number AS String))[1] AS UInt16) AS major,
    CAST(
            splitByString('.', CAST(dt3220i10m.line_number AS String))[2] AS
        Nullable(UInt16))                                                     AS minor,
    e.encounter_id                                                                AS encounter_id,
    e.discharge_disposition_code                                                  as discharge_disposition_code,
    toDate(e.asserted_date)                                                       AS asserted_date,
    e.period_start                                                                AS period_start_date,
    CASE
        WHEN discharge_disposition_code = 'death'
            THEN coalesce(nullIf(fic.icd10_code, ''), nullIf(ic.icd10_code, ''))
        ELSE nullIf(ic.icd10_code, '')
        END                                                                               AS main_icd10_code,
    p.birth_date                                                                  AS birth_date,
    e.bed_days_counter                                                            AS bed_days_counter,
    e.legal_entity_id                                                             AS legal_entity_id,
    e.patient_id                                                                  AS patient_id,
    CASE
        WHEN birth_date IS NULL OR toDate(birth_date) > toDate(now()) THEN 199
        ELSE age('year', toDate(birth_date), toDate(COALESCE(period_start_date, asserted_date)))
        END AS patient_age,
    CASE
        WHEN birth_date IS NULL OR toDate(birth_date) > toDate(now()) THEN 2388
        ELSE age('month', toDate(birth_date), toDate(COALESCE(period_start_date, asserted_date)))
        END AS patient_age_month,
    iwo.value                                                                     AS patient_weight,
    iwo.is_plurality_pregnancies                                                  AS is_plurality_pregnancies
FROM bed_days_encounters e
         LEFT JOIN cascade_lvl00_form066_icd10_codes fic ON fic.episode_id = e.episode_id
         LEFT JOIN cascade_lvl00_primary_icd10_codes ic ON ic.id = e.encounter_id
         LEFT JOIN cascade_lvl00_infant_weight_observations iwo
                   ON iwo.episode_id = e.episode_id
         LEFT JOIN dict_table3220_icd10_mappers dt3220i10m
                   ON ic.icd10_code = dt3220i10m.code OR fic.icd10_code = dt3220i10m.code
         JOIN patients p ON e.patient_id = p.id
WHERE main_icd10_code IS NOT NULL AND line_number IS NOT NULL
GROUP BY
    e.history_number,
    e.order_via_history_number,
    dt3220i10m.line_number,
    major,
    minor,
    e.encounter_id,
    e.discharge_disposition_code,
    asserted_date,
    e.period_start,
    main_icd10_code,
    p.birth_date,
    e.bed_days_counter,
    e.legal_entity_id,
    e.patient_id,
    patient_age,
    patient_age_month,
    iwo.value,
    iwo.is_plurality_pregnancies
"
FTcGgUjg,Pc_obmen4,maz1lovo,Lua,Thursday 17th of July 2025 11:02:18 AM CDT,"local img = [[

                                                       ██╗██╗    ██╗ █████╗ ██████╗ ██████╗     ██╗    ██╗
                                                      ██╔╝██║    ██║██╔══██╗██╔══██╗██╔══██╗    ██║    ██║
                                                     ██╔╝ ██║ █╗ ██║███████║██████╔╝██████╔╝    ██║ █╗ ██║
                                                    ██╔╝  ██║███╗██║██╔══██║██╔══██╗██╔═══╝     ██║███╗██║
                                                   ██╔╝   ╚███╔███╔╝██║  ██║██║  ██║██║         ╚███╔███╔╝
                                                   ╚═╝     ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝          ╚══╝╚══╝ 
                                                       
]]

local ore_dict = {
    {
        ""Железная руда"",
        ""Железный слиток"",
        take = {name = ""minecraft:iron_ore"", damage = 0},
        give = {name = ""minecraft:iron_ingot"", damage = 0},
        rate = {take = 4, give = 9}
    },
    {
        ""Золотая руда"",
        ""Золотой слиток"",
        take = {name = ""minecraft:gold_ore"", damage = 0},
        give = {name = ""minecraft:gold_ingot"", damage = 0},
        rate = {take = 4, give = 9}
    },
    {
        ""Медная руда"",
        ""Медный слиток"",
        take = {name = ""IC2:blockOreCopper"", damage = 0},
        give = {name = ""IC2:itemIngot"", damage = 0},
        rate = {take = 4, give = 9}
    },
    {
        ""Оловянная руда"",
        ""Оловянный слиток"",
        take = {name = ""IC2:blockOreTin"", damage = 0},
        give = {name = ""IC2:itemIngot"", damage = 1},
        rate = {take = 4, give = 9}
    },
    {
        ""Свинцовая руда"",
        ""Свинцовый слиток"",
        take = {name = ""IC2:blockOreLead"", damage = 0},
        give = {name = ""IC2:itemIngot"", damage = 5},
        rate = {take = 4, give = 8}
    },
    {
        ""Никелевая руда"",
        ""Никелевый слиток"",
        take = {name = ""ThermalFoundation:Ore"", damage = 4},
        give = {name = ""ThermalFoundation:material"", damage = 68},
        rate = {take = 1, give = 2}
    },
    {
        ""Серебряная руда"",
        ""Серебряный слиток"",
        take = {name = ""ThermalFoundation:Ore"", damage = 2},
        give = {name = ""IC2:itemIngot"", damage = 6},
        rate = {take = 4, give = 9}
    },
}

local unicode = require(""unicode"")
local computer = require(""computer"")
local com = require(""component"")
local event = require(""event"")
local internet = com.internet -- Добавляем интернет компонент

local gpu = com.gpu
local me = com.me_interface -- Добавляем ME интерфейс
local pim = com.pim -- Добавляем PIM (Player Interface)
local w, h = gpu.maxResolution()
local defBG, defFG = gpu.getBackground(), gpu.getForeground()
gpu.setResolution(w, h)

-- Кэширование данных
local cached = {
    lastUpdate = 0,
    updateInterval = 5,
    oreQuantities = {}
}

-- Статистика обменов
local stats = {
    exchanges = 0,
    totalOre = 0,
    totalIngots = 0
}

-- Буфер экрана
local screenBuffer = {}

-- Цветовые схемы
local colors = {
    info = 0x00ff00,
    warning = 0xffff00,
    error = 0xff0000,
    border = 0x64fff2,
    title = 0x00a400,
    subtitle = 0xFFFFFF,
    powered = 0x64fff2,
    bg = 0x101010
}

-- Анимация появления логотипа
local function animateLogo(img, x, y, fore, delay, fast)
    fore = fore or colors.title
    local i = 0
    local sleepTime = fast and 0.01 or (delay or 0.07)
    for line in img:gmatch(""([^\n]*)\n?"") do
        gpu.setForeground(fore)
        gpu.set(x, y + i, line)
        os.sleep(sleepTime)
        i = i + 1
    end
end

-- Центрирование текста (перемещено выше)
local function center(height, text, color)
    gpu.setForeground(color)
    local textLen = unicode.len(text)
    local x = math.max(1, math.floor(w / 2 - textLen / 2))
    gpu.set(x, height, text)
end

-- Красивое приветствие
local greetings = {
    ""Добро пожаловать в обменник!"",
    ""Удачного обмена!"",
    ""Пусть удача сопутствует вам!"",
    ""Меняю руду на слитки — быстро и честно!"",
    ""Powered by DemonAve""
}
local function showGreeting(player)
    local greet = greetings[math.random(1, #greetings)]
    if player then
        center(h - 14, greet .. "" | "" .. player, colors.subtitle)
    else
        center(h - 14, greet, colors.subtitle)
    end
end
local antiSpam = {
    lastAction = 0,
    cooldown = 1
}

-- Таймер обновления данных
local function shouldUpdate()
    local currentTime = computer.uptime()
    if currentTime - (cached.lastUpdate or 0) > (cached.updateInterval or 5) then
        cached.lastUpdate = currentTime
        return true
    end
    return false
end



    -- Локальный вывод
local function log(message, level, player)
    local levels = {
        info = 0x00ff00,
        warning = 0xffff00,
        error = 0xff0000
    }
    gpu.fill(1, h - 13, w, 1, "" "") -- очищаем строку
    center(h - 13, message, colors[level] or colors.subtitle)
end

local function canProcess()
    local current = computer.uptime()
    if current - antiSpam.lastAction < antiSpam.cooldown then
        return false
    end
    antiSpam.lastAction = current
    return true
end

local function bufferSet(x, y, text, fore, back)
    local key = string.format(""%d:%d"", x, y)
    local current = screenBuffer[key]
    if not current or current.text ~= text or current.fore ~= fore or current.back ~= back then
        screenBuffer[key] = {text = text, fore = fore, back = back}
        gpu.setForeground(fore)
        gpu.setBackground(back)
        gpu.set(x, y, text)
    end
end

local function populateQty()
    local totalOre = 0
    for i, ore in pairs(ore_dict) do
        local fingerprint = {id = ore.give.name, dmg = ore.give.damage}
        local ok, item = pcall(me.getItemDetail, fingerprint)
        if not ok or item == nil then
            ore.qty = 0
            ore.sizeOfStack = 64
        else
            local basicOk, basicItem = pcall(function() return item.basic() end)
            if not basicOk or not basicItem then
                ore.qty = 0
                ore.sizeOfStack = 64
            else
                ore.sizeOfStack = basicItem.max_size
                ore.qty = basicItem.qty
                totalOre = totalOre + basicItem.qty
            end
        end
    end
    return totalOre
end

local function displayOres()
    local line = 3
    local colOre = math.floor(w * 0.04)
    local colIngot = math.floor(w * 0.48)
    local colTake = math.floor(w * 0.32)
    local colGive = colTake + 8
    local colArrow = colTake + 4
    local colQty = math.floor(w * 0.88)
    local colAvail = math.floor(w * 0.75)

    -- Верхняя рамка
    gpu.setForeground(colors.border)
    gpu.set(1, line - 1, ""╔"" .. string.rep(""═"", w - 2) .. ""╗"")
    gpu.set(1, 3,""║"")
    gpu.set(1, 4,""║"")
    gpu.set(gpu.getResolution(), 3,""║"")
    gpu.set(gpu.getResolution(), 4,""║"")
    -- Заголовки таблицы (увеличенный текст)
    gpu.setForeground(colors.title)
    gpu.set(colOre + 2, line, ""РУДА"")
    gpu.set(colTake + 2, line, ""КУРС"")
    gpu.set(colIngot + 4, line, ""СЛИТОК"")
    gpu.set(colAvail + 19, line, ""ДОСТУПНО"")
    -- Вторая строка под заголовком можно использовать для подзаголовков или оставить пустой
    gpu.set(colOre, line + 1, """")
    gpu.set(colTake + 1, line + 1, """")
    gpu.set(colIngot, line + 1, """")
    gpu.set(colAvail, line + 1, """")
    -- Разделитель под заголовком
    gpu.setForeground(colors.border)
    gpu.set(1, line + 2, ""╠"" .. string.rep(""─"", w - 2) .. ""╣"")

    local row = line + 3
    for i, ore in ipairs(ore_dict) do
        gpu.setForeground(colors.info)
        gpu.set(colOre, row, ore[1] or ""?"")
        gpu.set(colIngot, row, ore[2] or ""?"")
        gpu.setForeground(0xFF00FF)
        gpu.set(colTake, row, tostring((ore.rate and ore.rate.take) or ""?""))
        gpu.set(colGive, row, tostring((ore.rate and ore.rate.give) or ""?""))
        gpu.setForeground(colors.warning)
        gpu.set(colArrow, row, ""→"")
        gpu.setForeground(colors.info)
        gpu.set(colQty, row, tostring(ore.qty or 0))
        -- Боковые границы
        gpu.setForeground(colors.border)
        gpu.set(1, row, ""║"")
        gpu.set(w, row, ""║"")
        -- Полоса под каждой строкой, кроме последней
        if i < #ore_dict then
            gpu.setForeground(colors.border)
            gpu.set(1, row + 1, ""╟"" .. string.rep(""─"", w - 2) .. ""╢"")
            row = row + 2
        else
            row = row + 1
        end
    end
    -- Нижняя рамка
    gpu.setForeground(colors.border)
    gpu.set(1, row, ""╚"" .. string.rep(""═"", w - 2) .. ""╝"")
end

local function updateOres()
    local totalOre = populateQty()
    gpu.fill(1, 1, w, h - 16, "" "")
    if totalOre == 0 then
        gpu.fill(1, 1, w, h - 15, "" "")
        center(h - 15, ""Нет соединения с МЭ"", 0xff0000)
    else
        displayOres()
    end
end

local function giveItemFromMe(item, dmg, amount)
    local fingerprint = {id = item, dmg = dmg}
    local ok, res = pcall(me.exportItem, fingerprint, ""UP"", amount)
    if ok and res and res.size then
        return res.size
    else
        return 0
    end
end

local function giveIngot(toGive, ore)
    local totalGive = 0
    local givePreIteration = 0
    while totalGive < toGive do
        if toGive - totalGive > 64 then
            givePreIteration = ore.sizeOfStack
        else
            givePreIteration = toGive - totalGive
        end

        local gived = giveItemFromMe(ore.give.name, ore.give.damage, givePreIteration)

        totalGive = totalGive + gived
        if gived == 0 then
            gpu.fill(1, h - 15, w, 2, "" "")
            center(h - 15, ""Oсвободите место в инвентаре"", 0xff0000)
            center(h - 14, ""Ожидаю выдать "" .. tostring(toGive - totalGive) .. "" "" .. ore[2], 0xFFFFFF)
            os.sleep(1)
        end
        gpu.fill(1, h - 15, 2, h, "" "")
    end
end

local function exchangeOre(slot, ore, player)
    local curSlot = pim.getStackInSlot(slot)
    if curSlot == nil then
        gpu.fill(1, h - 14, w, 1, "" "")
        center(h - 14, ""Вы сошли с PIM, обмен прерван. (Не удалось прочесть слот)"", 0xff0000)
        log(""Вы сошли с PIM, обмен прерван. (Не удалось прочесть слот)"", ""error"", player)
        os.sleep(0.5)
        return
    end
    local userOreQty = curSlot.qty
    local takeQty = userOreQty - (userOreQty % ore.rate.take)
    local giveQty = userOreQty * ore.rate.give
    if ore.qty < giveQty then
        gpu.fill(1, h - 14, w, 1, "" "")
        center(h - 14, ""Недостаточно слитков для обмена <"" .. ore[1] .. "">"", 0xff0000)
        log(""Недостаточно слитков для обмена <"" .. ore[1] .. "">"", ""warning"", player)
        os.sleep(0.5)
        return
    end
    -- Количество могло измениться..
    local takedOre = pim.pushItem(""DOWN"", slot, takeQty)

    if takedOre == nil then
        gpu.fill(1, h - 14, w, 1, "" "")
        center(h - 14, ""Вы сошли с PIM, обмен прерван. (Не удалось извлечь руду)"", 0xff0000)
        log(""Ошибка извлечения руды из PIM"", ""error"", player)
        os.sleep(0.5)
    elseif takedOre == 0 then
        gpu.fill(1, h - 14, w, 1, "" "")
        center(h - 14, ""В выбраном слоте руды нет.. А была.. Хмм..."", 0x505050)
        log(""В выбраном слоте руды нет"", ""warning"", player)
    else
        local giveQty = (takedOre // ore.rate.take) * ore.rate.give
        gpu.fill(1, h - 15, w, 2, "" "")
        -- Анимация движения стрелки
        local baseText = ""Меняю  "" .. takedOre .. ""  "" .. ore[1] .. ""  на  "" .. giveQty .. ""  "" .. ore[2] .. ""  ""
        local arrowFrames = {""→  "", "" → "", ""  →""}
        for frame = 1, 6 do
            local idx = (frame - 1) % #arrowFrames + 1
            gpu.setForeground(frame % 2 == 1 and colors.warning or colors.info)
            center(h - 14, baseText .. arrowFrames[idx], colors.subtitle)
            os.sleep(0.12)
        end
        -- Добавляем статистику
        stats.exchanges = stats.exchanges + 1
        stats.totalOre = stats.totalOre + takedOre
        stats.totalIngots = stats.totalIngots + giveQty
        log(""Обмен: "" .. takedOre .. "" "" .. ore[1] .. "" на "" .. giveQty .. "" "" .. ore[2], ""info"", player)
        giveIngot(giveQty, ore)
        gpu.fill(1, h - 3, w, 1, "" "")
        center(h - 3, string.format(""Всего обменов: %d | Руды: %d | Слитков: %d"", stats.exchanges, stats.totalOre, stats.totalIngots), colors.info)
    end
end

local function checkInventory(player)
    local size = pim.getInventorySize()
    local ok, data = pcall(pim.getAllStacks, 0)
    if not ok or not data then
        gpu.fill(1, h - 14, w, 1, "" "")
        center(h - 14, ""Ошибка получения инвентаря PIM"", 0xff0000)
        log(""Ошибка получения инвентаря PIM"", ""error"", player)
        os.sleep(1)
        return
    end

    for slot = 1, size do
        if data[slot] then
            for i, ore in pairs(ore_dict) do
                if data[slot].id == ore.take.name and data[slot].dmg == ore.take.damage then
                    exchangeOre(slot, ore, player)
                end
            end
        end
    end

    updateOres()

    if pim.getInventoryName() ~= ""pim"" then
        gpu.fill(1, h - 15, w, 2, "" "")
        center(h - 15, ""Обмен окончен! Приходите ещё!"", colors.subtitle)
        log(""Обмен окончен!"", ""info"", player)
        -- checkInventory() -- убираем рекурсию!
    else
        event.push(""player_off"", player)
    end
end

local eventHandlers = {
    interrupted = function()
        gpu.setBackground(defBG)
        gpu.setForeground(defFG)
        gpu.fill(1, 1, w, h, "" "")
        os.exit()
        return true
    end,

    player_on = function(...)
        if not canProcess() then return end
        local args = {...}
        local player = args[1] or ""Игрок""
        gpu.fill(1, h - 15, w, 1, "" "")
        center(h - 15, ""Приветствую, "" .. player .. ""! Начинаю обмен"", colors.subtitle)
        log(""Игрок "" .. player .. "" начал обмен"", ""info"", player)
        updateOres()
        checkInventory(player)
    end,

    player_off = function(...)
        if not canProcess() then return end
        local args = {...}
        local player = args[1] or ""Игрок""
        -- Очищаем экран и показываем только логотип
        gpu.fill(1, 1, w, h, "" "")
        animateLogo(img, 1, h - 13, colors.title, 0.03)
        -- Выводим статистику обменов
        center(h - 3, string.format(""Всего обменов: %d | Руды: %d | Слитков: %d"", stats.exchanges, stats.totalOre, stats.totalIngots), colors.info)
        center(h, ""Powered by DemonAve"", colors.powered)
        log(""Игрок "" .. player .. "" завершил обмен"", ""info"", player)
        -- Не вызываем updateOres, чтобы не перерисовывать таблицу на экране выхода
    end
}

function handleEvent(eventID, ...)
    local handler = eventHandlers[eventID]
    if handler then
        return handler(...)
    end
end

function drawStat()
    gpu.setForeground(0x444444)
    gpu.set(
        2,
        h - 1,
        string.format(
            ""RAM: %.1fkB / %.1fkB"",
            (computer.totalMemory() - computer.freeMemory()) / 1024,
            computer.totalMemory() / 1024
        )
    )
end


local oreTimeFn = function()
    updateOres()
    -- Каджый 10 такт обновляем экран
    for i = 1, 10 do
        coroutine.yield()
    end
end
local oreTimer = coroutine.create(oreTimeFn)

function draw_img(img, x, y, fore, back)
    fore = fore or 0xffffff
    back = back or 0x0
    oldFG = gpu.getForeground()
    gpu.setForeground(fore)
    local i = 0
    for line in img:gmatch(""([^\n]*)\n?"") do
        gpu.set(x, y + i, line)
        i = i + 1
    end
    gpu.setForeground(oldFG)
end
-- ...existing code...

-- Проверяем наличие необходимых компонентов
if not me then
    center(h - 15, ""Ошибка: ME интерфейс не найден!"", 0xff0000)
    os.exit()
end

if not pim then
    center(h - 15, ""Ошибка: PIM (Player Interface) не найден!"", 0xff0000)
    os.exit()
end


-- Стартовый экран с анимацией
gpu.setBackground(colors.bg)
gpu.fill(1, 1, w, h, "" "")
animateLogo(img, 1, h - 13, colors.title, 0.01, true)
center(h - 15, ""Для обмена встаньте на PIM и не сходите до окончания обмена"", colors.subtitle)
showGreeting()
-- Выводим статистику обменов
center(h - 3, string.format(""Всего обменов: %d | Руды: %d | Слитков: %d"", stats.exchanges, stats.totalOre, stats.totalIngots), colors.info)
-- Powered by DemonAve (по центру)
center(h, ""Powered by DemonAve"", colors.powered)


while true do
    drawStat()
    
    -- Очистка памяти при необходимости
    if computer.freeMemory() < 1024 then
        collectGarbage()
    end
    
    -- Обновление данных по таймеру
    if shouldUpdate() then
        updateOres()
    end
    
    local ev = {event.pull(1)}
    
    handleEvent(ev[1], table.unpack(ev, 2))
    
    if coroutine.status(oreTimer) == ""dead"" then
        oreTimer = coroutine.create(oreTimeFn)
    else
        coroutine.resume(oreTimer)
    end
end
"
wYWCKqwc,DoorRemote,minecraft_storm,Lua,Thursday 17th of July 2025 10:26:45 AM CDT,"local modemSide = ""back""
rednet.open(modemSide)

print(""Door Remote Control"")
print(""Type 'open', 'close', 'status' or 'exit'"")

while true do
    io.write(""> "")
    local cmd = read()
    if cmd == ""open"" or cmd == ""close"" or cmd == ""status"" then
        rednet.broadcast(cmd, ""door_control"")
        local id, response = rednet.receive(""door_control"", 15)

        if response then
            print(""Response: "" .. response)
        else
            print(""No response (timeout)."")
        end
    elseif cmd == ""exit"" then
        break
    else
        print(""Unknown command."")
    end
end
"
yBHgiznP,install.lua,MageCoven,Lua,Thursday 17th of July 2025 10:23:15 AM CDT,"local URL = ""https://raw.githubusercontent.com/MageCoven/fishnet/refs/heads/main/src/""

local files = {
    ""lib/fishnet.lua"",
    ""lib/persistent_queue.lua"",
    ""lib/persistent_task.lua"",
    ""receive.lua"",
    ""startup.lua"",
    ""worker.lua""
}

local function downloadFile(path, dest)
    local url = URL .. path
    local response = http.get(url)
    if not response then
        error(""Failed to download "" .. url)
    end
    local content = response.readAll()
    response.close()

    local file = fs.open(dest, ""w"")
    if not file then
        error(""Could not open file for writing: "" .. dest)
    end

    file.write(content)
    file.close()
end

for _, file in ipairs(files) do
    if not fs.exists(file) then
        print(""Downloading "" .. file .. ""..."")
        downloadFile(file, file)
    else
        print(file .. "" already exists, skipping download."")
    end
end"
m7JhHXrw,fishnet.lua,MageCoven,Lua,Thursday 17th of July 2025 10:08:25 AM CDT,"settings.define(""fishnet.download_folder"", {
    type = ""string"",
    default = ""downloads"",
    description = ""Folder where files received via Fishnet will be saved.""
})

local modem = peripheral.find(""modem"")
if not modem then
    error(""No modem found."")
end

rednet.open(modem)

local fishnet = {
    PROTOCOL = ""fishnet"",
    PROTOCOL_STATUS = ""fishnet::status"",
    PROTOCOL_FILE = ""fishnet::file""
}

--- Send a message to a specific receiver.
---@param receiver_id integer
---@param message any
---@param protocol string|nil
function fishnet.send(receiver_id, message, protocol)
    rednet.send(receiver_id, message, protocol or ""fishnet"")
end

--- Receive a message from any sender.
---@param protocol string|nil
---@param timeout number|nil
function fishnet.receive(protocol, timeout)
    return rednet.receive(protocol, timeout)
end

--- Send a status message to a specific receiver.
---@param receiver_id integer
---@param status any
function fishnet.send_status(receiver_id, status)
    fishnet.send(receiver_id, status, fishnet.PROTOCOL_STATUS)
end

--- Handle a received status message.
---@param id integer
---@param message any
---@param protocol string
local function handle_receive_status(id, message, protocol)
    return id, message, protocol
end

--- Receive a status message from any sender.
---@param timeout number|nil
function fishnet.receive_status(timeout)
    local id, message, protocol = fishnet.receive(fishnet.PROTOCOL_STATUS, timeout)
    return handle_receive_status(id, message, protocol)
end

--- Send a file to a specific receiver.
---@param receiver_id integer
---@param file_path string
function fishnet.send_file(receiver_id, file_path)
    local file = fs.open(file_path, ""r"")
    if not file then
        error(""Failed to open file: "" .. file_path, 2)
    end

    local data = file.readAll()
    file.close()

    fishnet.send(receiver_id, {
        file_name = fs.getName(file_path),
        data = data
    }, fishnet.PROTOCOL_FILE)
end

--- Handle a received file message.
--- @param id integer
--- @param message any
--- @param protocol string
--- @return string|nil, string
local function handle_receive_file(id, message, protocol)
    if type(message) ~= ""table"" or not message.file_name or not message.data then
        return nil, ""Invalid file message format""
    end

    local folder = settings.get(""fishnet.download_folder"")
    local file_path = fs.combine(folder, message.file_name)
    local file = fs.open(file_path, ""w"")
    if not file then
        return nil, ""Failed to open file for writing: "" .. file_path
    end

    file.write(message.data)
    file.close()

    return file_path, """"
end

--- Receive a file from any sender.
---@param timeout number|nil
---@return string|nil, string
function fishnet:receive_file(timeout)
    local id, message = fishnet.receive(fishnet.PROTOCOL_FILE, timeout)
    return handle_receive_file(id, message, fishnet.PROTOCOL_FILE)
end

--- Host a service with a specific hostname.
---@param hostname string
function fishnet:host(hostname)
    rednet.host(fishnet.PROTOCOL, hostname)
end

--- Unhost a service with a specific hostname.
---@param hostname string
function fishnet:unhost(hostname)
    rednet.unhost(fishnet.PROTOCOL, hostname)
end

--- Find a service with a specific hostname.
---@param hostname string
---@return integer|nil
function fishnet:lookup(hostname)
    local ids = {rednet.lookup(fishnet.PROTOCOL, hostname)}
    return ids[1]
end

--- Close the modem connection.
function fishnet:close()
    rednet.close()
end

--- Receive any message with a specific protocol.
---@param timeout number|nil
---@return table, string|nil
function fishnet:receive_any(timeout)
    local id, message, protocol = rednet.receive(nil, timeout)
    if not message then
        return {}, ""No message received""
    end

    if protocol == fishnet.PROTOCOL_STATUS then
        return {
            type = ""status"",
            id = id,
            data = {
                handle_receive_status(id, message, protocol)
            }
        }, nil
    elseif protocol == fishnet.PROTOCOL_FILE then
        return {
            type = ""file"",
            id = id,
            data = {
                handle_receive_file(id, message, protocol)
            }
        }, nil
    elseif protocol == fishnet.PROTOCOL then
        return {
            type = ""message"",
            id = id,
            data = {
                message = message,
            }
        }, nil
    else
        return {}, ""Unknown protocol: "" .. protocol
    end
end"
6WnRzRz9,Select all items in filtered list with fzf,metalx1000,Bash,Thursday 17th of July 2025 09:49:27 AM CDT,"cat photo_location.csv
cat photo_location.csv|fzf 

#multi select items in list
cat photo_location.csv|fzf -m

#use tab to select all in filtered list
cat photo_location.csv|fzf -m --bind 'tab:select-all'
"
nNw5eavt,dani4,tibiole,PHP,Thursday 17th of July 2025 09:39:07 AM CDT,"$adatok = [
  ['Cégjegyzékszám' => '0109271881', 'Adószám' => '25381537241', 'Megnevezés' => 'Effektív kamatmódszerrel kalkulált kamatbevétel'],
  ['Cégjegyzékszám' => '0109271999', 'Adószám' => '25383474243', 'Megnevezés' => 'Bevételek'],
  ['Cégjegyzékszám' => '0109280348', 'Adószám' => '25527540241', 'Megnevezés' => 'Egyéb bevétel'],
  ['Cégjegyzékszám' => '0109280349', 'Adószám' => '25527557241', 'Megnevezés' => 'Egyéb bevétel'],
  ['Cégjegyzékszám' => '0109288713', 'Adószám' => '25780840243', 'Megnevezés' => 'Összes működési bevétel'],
  ['Cégjegyzékszám' => '0109291237', 'Adószám' => '25825343243', 'Megnevezés' => 'Pénzügyi műveletek bevételei'],
  ['Cégjegyzékszám' => '0109292830', 'Adószám' => '25856028243', 'Megnevezés' => 'Pénzügyi műveletek bevételei'],
  ['Cégjegyzékszám' => '0109333719', 'Adószám' => '26588696242', 'Megnevezés' => 'Értékesítés bevétele'],
  ['Cégjegyzékszám' => '0109380494', 'Adószám' => '26579289242', 'Megnevezés' => 'Pénzügyi bevételek'],
  ['Cégjegyzékszám' => '0109387074', 'Adószám' => '27174849143', 'Megnevezés' => 'Pénzügyi műveletek bevételei'],
  ['Cégjegyzékszám' => '0109392959', 'Adószám' => '27517176241', 'Megnevezés' => 'Pénzügyi műveletek bevételek'],
  ['Cégjegyzékszám' => '0109396732', 'Adószám' => '27757482143', 'Megnevezés' => 'Összes működési bevétel'],
  ['Cégjegyzékszám' => '0109419183', 'Adószám' => '32343016241', 'Megnevezés' => 'Pénzügyi műveletek bevételei'],
  ['Cégjegyzékszám' => '0109426814', 'Adószám' => '32488234243', 'Megnevezés' => 'Pénzügyi műveletek bevételei'],
  ['Cégjegyzékszám' => '0109665251', 'Adószám' => '10591589241', 'Megnevezés' => 'Kamatbevételek'],
  ['Cégjegyzékszám' => '0109673867', 'Adószám' => '12402502443', 'Megnevezés' => 'Közvetítés jutalékbevétele'],
  ['Cégjegyzékszám' => '0109723660', 'Adószám' => '13206639241', 'Megnevezés' => 'Értékesítési bevételek'],
  ['Cégjegyzékszám' => '0109735465', 'Adószám' => '13443564241', 'Megnevezés' => 'Nettó jutalékbevétel'],
  ['Cégjegyzékszám' => '0109876361', 'Adószám' => '13847315243', 'Megnevezés' => 'Pénzügyi műveletek bevételei'],
  ['Cégjegyzékszám' => '0110040952', 'Adószám' => '10011922444', 'Megnevezés' => 'Kamat- és kamat jellegű bevételek'],
  ['Cégjegyzékszám' => '0110041004', 'Adószám' => '10136915444', 'Megnevezés' => 'Kamatbevételek'],
  ['Cégjegyzékszám' => '0110041042', 'Adószám' => '10198014444', 'Megnevezés' => 'Effektív kamat módszerrel elszámolt kamatbevétel'],
  ['Cégjegyzékszám' => '0110041313', 'Adószám' => '10326556244', 'Megnevezés' => 'Effektív kamatláb módszerrel elszámolt kamatbevételek'],
  ['Cégjegyzékszám' => '0110041465', 'Adószám' => '10433748244', 'Megnevezés' => 'Összes kamatbevétel'],
  ['Cégjegyzékszám' => '0110041505', 'Adószám' => '10446173441', 'Megnevezés' => 'Kamatbevétel'],
  ['Cégjegyzékszám' => '0110041964', 'Adószám' => '10788086242', 'Megnevezés' => 'Kamatbevétel'],
  ['Cégjegyzékszám' => '0110041997', 'Adószám' => '10782028441', 'Megnevezés' => 'Kamatbevétel'],
  ['Cégjegyzékszám' => '0110042085', 'Adószám' => '10803828242', 'Megnevezés' => 'Jutalék- és díjbevétel'],
  ['Cégjegyzékszám' => '0110042494', 'Adószám' => '10920394244', 'Megnevezés' => 'Kamatbevétel'],
  ['Cégjegyzékszám' => '0110042594', 'Adószám' => '10949638244', 'Megnevezés' => 'Effektív kamatláb módszerrel elszámolt kamatbevételek'],
  ['Cégjegyzékszám' => '0110042594', 'Adószám' => '10949638244', 'Megnevezés' => 'Egyéb kamat és kamatjellegű bevételek'],
  ['Cégjegyzékszám' => '0110043269', 'Adószám' => '12201923244', 'Megnevezés' => 'Kamatbevételek - effektív kamat módszerrel megállapított'],
  ['Cégjegyzékszám' => '0110043384', 'Adószám' => '12238972444', 'Megnevezés' => 'Kamatbevétel'],
  ['Cégjegyzékszám' => '0110043407', 'Adószám' => '12248256444', 'Megnevezés' => 'Összes kamatbevétel'],
  ['Cégjegyzékszám' => '0110043434', 'Adószám' => '12257591244', 'Megnevezés' => 'Kamatbevételek'],
  ['Cégjegyzékszám' => '0110043638', 'Adószám' => '12321942444', 'Megnevezés' => 'Kamat és kamatjellegű bevételek'],
  ['Cégjegyzékszám' => '0110043876', 'Adószám' => '12391763444', 'Megnevezés' => 'Összes kamatbevétel'],
  ['Cégjegyzékszám' => '0110043900', 'Adószám' => '12399596444', 'Megnevezés' => 'Effektív kamatmódszerrel kalkulált kamatbevétel'],
  ['Cégjegyzékszám' => '0110044131', 'Adószám' => '11879978441', 'Megnevezés' => 'Kamatbevételek'],
  ['Cégjegyzékszám' => '0110044659', 'Adószám' => '12715574444', 'Megnevezés' => 'Összes kamatbevétel'],
  ['Cégjegyzékszám' => '0110044857', 'Adószám' => '12935181244', 'Megnevezés' => 'Kamat- és kamatjellegű bevételek (+)'],
  ['Cégjegyzékszám' => '0110045229', 'Adószám' => '13491196241', 'Megnevezés' => 'Összes kamatbevétel'],
  ['Cégjegyzékszám' => '0110045394', 'Adószám' => '13667168243', 'Megnevezés' => 'Bevétel'],
  ['Cégjegyzékszám' => '0110045456', 'Adószám' => '13748890244', 'Megnevezés' => 'Bevétel vevői szerződésekből'],
  ['Cégjegyzékszám' => '0110046150', 'Adószám' => '14440306444', 'Megnevezés' => 'Biztosítási bevétel'],
  ['Cégjegyzékszám' => '0110046203', 'Adószám' => '14489765244', 'Megnevezés' => 'Biztosítási bevétel'],
  ['Cégjegyzékszám' => '0110046425', 'Adószám' => '14847136242', 'Megnevezés' => 'Kamatbevételek'],
  ['Cégjegyzékszám' => '0110046880', 'Adószám' => '23067356243', 'Megnevezés' => 'Effektív kamatmódszerrel elszámolt kamatbevétel'],
  ['Cégjegyzékszám' => '0110046985', 'Adószám' => '23183034244', 'Megnevezés' => 'Kamatbevételek összesen'],
  ['Cégjegyzékszám' => '0110047080', 'Adószám' => '23397354444', 'Megnevezés' => 'Nettó kamatbevétel'],
  ['Cégjegyzékszám' => '0110048682', 'Adószám' => '25426346444', 'Megnevezés' => 'Kamatbevétel'],
  ['Cégjegyzékszám' => '0110048846', 'Adószám' => '25559800443', 'Megnevezés' => 'Kamat és kamatjellegű bevételek'],
  ['Cégjegyzékszám' => '0110049352', 'Adószám' => '25978221242', 'Megnevezés' => 'Kamatbevételek'],
  ['Cégjegyzékszám' => '0110142205', 'Adószám' => '12951659144', 'Megnevezés' => 'Kamatbevételek'],
  ['Cégjegyzékszám' => '0117000437', 'Adószám' => '22310981242', 'Megnevezés' => 'Effektív kamat módszerrel számított kamatbevétel'],
  ['Cégjegyzékszám' => '0117000456', 'Adószám' => '22353605242', 'Megnevezés' => 'Kamatok és hasonló bevételek'],
  ['Cégjegyzékszám' => '0117000467', 'Adószám' => '22384407241', 'Megnevezés' => 'Befektetésekből származó bevétel'],
  ['Cégjegyzékszám' => '0117000536', 'Adószám' => '22560234243', 'Megnevezés' => 'Bevétel'],
  ['Cégjegyzékszám' => '0117000707', 'Adószám' => '23514614241', 'Megnevezés' => 'Effektív kamatláb módszerrel számolt kamatok és kamatjellegű bevételek'],
  ['Cégjegyzékszám' => '0117000747', 'Adószám' => '23990847243', 'Megnevezés' => 'Értékesítés nettó árbevétele'],
  ['Cégjegyzékszám' => '0117000755', 'Adószám' => '22158778241', 'Megnevezés' => 'Bevételek'],
  ['Cégjegyzékszám' => '0117000942', 'Adószám' => '25383371241', 'Megnevezés' => 'Megszolgált díjak, viszontbiztosítási díjak nélkül'],
  ['Cégjegyzékszám' => '0117001055', 'Adószám' => '20721691242', 'Megnevezés' => 'Bevételek'],
  ['Cégjegyzékszám' => '0117001134', 'Adószám' => '26200262243', 'Megnevezés' => 'Bevételek'],
  ['Cégjegyzékszám' => '0117001195', 'Adószám' => '26561794241', 'Megnevezés' => 'Kamatbevételek (17. sz. megjegyzés)'],
  ['Cégjegyzékszám' => '0117001310', 'Adószám' => '27898307443', 'Megnevezés' => 'I. Kapott kamatok és kamatjellegű bevételek'],
  ['Cégjegyzékszám' => '0117001348', 'Adószám' => '28804381243', 'Megnevezés' => 'Sales revenue'],
  ['Cégjegyzékszám' => '0117001355', 'Adószám' => '28838478242', 'Megnevezés' => 'Revenues from own products and services'],
  ['Cégjegyzékszám' => '0117001372', 'Adószám' => '28989691241', 'Megnevezés' => 'Nettó működési bevétel'],
  ['Cégjegyzékszám' => '0117001453', 'Adószám' => '26668334241', 'Megnevezés' => 'Forgalom – folyamatos működés'],
  ['Cégjegyzékszám' => '0810001869', 'Adószám' => '24719018244', 'Megnevezés' => 'Kamat és kamatjellegű bevételek'],
  ['Cégjegyzékszám' => '1117000093', 'Adószám' => '26738248211', 'Megnevezés' => 'Forgalom'],
  ['Cégjegyzékszám' => '1309205736', 'Adószám' => '26793601213', 'Megnevezés' => 'Értékesítés bevétele'],
  ['Cégjegyzékszám' => '1309231109', 'Adószám' => '26355142213', 'Megnevezés' => 'Értékesítés bevétele'],
  ['Cégjegyzékszám' => '1317000055', 'Adószám' => '21941641213', 'Megnevezés' => 'Termékek és szolgáltatások értékesítése'],
  ['Cégjegyzékszám' => '1317000110', 'Adószám' => '21990779213', 'Megnevezés' => 'Bevételek'],
  ['Cégjegyzékszám' => '1609012551', 'Adószám' => '12441899216', 'Megnevezés' => 'Értékesítés bevétele'],
  ['Cégjegyzékszám' => '1910500321', 'Adószám' => '25709634119', 'Megnevezés' => 'Kamat és kamatjellegű bevétel'],
  ['Cégjegyzékszám' => '2009079343', 'Adószám' => '27819296220', 'Megnevezés' => 'Bevételek'],
];"
KvJNvfEK,Get address of photo location by gps,metalx1000,Bash,Thursday 17th of July 2025 09:33:01 AM CDT,"# get location data
exiftool -gpslongitude -gpslatitude *
exiftool -location:all *

#covnert GPS Format
exiftool -c ""%.6f"" -location:all *

# just GPS
exiftool -c ""%.6f"" -location:all *|grep ""GPS Position""|cut -d\: -f2

location=""$(exiftool -c ""%.6f"" -location:all IMG_20250704_082217145_HDR.jpg|grep ""GPS Position""|cut -d\: -f2)""
echo $location

# get location Address from open streetmaps 
# limits 1 per second 2500 requests a day
url=""https://nominatim.openstreetmap.org/search?q=${location}&format=json&polygon=1&addressdetails=1""
wget -qO- ""$url""
wget -qO- ""$url""|jq '.[]|.display_name + ""|"" + .lat + "","" + .lon'
wget -qO- ""$url""|jq '.[]|.display_name + ""|"" + .lat + "","" + .lon'|head -n 1
wget -qO- ""$url""|jq -r '.[]|.display_name + ""|"" + .lat + "","" + .lon'|head -n 1

# script
#!/bin/bash
######################################################################
#Copyright (C) 2025  Kris Occhipinti
#https://filmsbykris.com

#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation version 3 of the License.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
######################################################################

for i in *.jpg; do
  gps=""$(exiftool -c ""%.6f"" -location:all ""$i"" | grep ""GPS Position"" | cut -d\: -f2)""
  [[ $gps ]] || continue
  url=""https://nominatim.openstreetmap.org/search?q=${gps}&format=json&polygon=1&addressdetails=1""
  location=""$(wget -qO- ""$url"" | jq -r '.[]|.display_name + ""|"" + .lat + "","" + .lon' | head -n 1)""
  echo ""$i|$location""
  sleep 1
done | tee photo_location.csv
"
8wvyMHwE,Doorcontrol,minecraft_storm,Lua,Thursday 17th of July 2025 09:25:04 AM CDT,"-- Door control with bundled cable (More Red + Create + CC:Tweaked)
local modemSide = ""top""   -- Wireless modem side
local bundledSide = ""back"" -- Bundled cable side
local channel = 42         -- Wireless channel to listen on

-- Define color bits
local RED   = colors.red
local GREEN = colors.lime
local BLUE  = colors.blue
local MAGENTA = colors.magenta
local YELLOW = colors.yellow 

-- Pulse helper
function pulse(color)
    local output = redstone.getBundledOutput(bundledSide)
    redstone.setBundledOutput(bundledSide, bit.bor(output, color))
    sleep(0.2)
    output = redstone.getBundledOutput(bundledSide)
    redstone.setBundledOutput(bundledSide, bit.band(output, bit.bnot(color)))
end

-- Status check
function isDoorClosed()
    local input = redstone.getBundledInput(bundledSide)
    return bit.band(input, MAGENTA) ~= 0
end

function isDoorOpen()
    local input = redstone.getBundledInput(bundledSide)
    return bit.band(input, YELLOW) ~= 0
end

-- Open door sequence
function openDoor()
	if isDoorOpen() then
        print(""Door is already open."")
        return ""already_open""
    end
    print(""Opening door..."")
    -- Set direction to OPEN (Red OFF)
    local output = redstone.getBundledOutput(bundledSide)
    redstone.setBundledOutput(bundledSide, bit.band(output, bit.bnot(RED)))
    sleep(7)

    -- Activate BLUE (start sliding door out)
    pulse(BLUE)
    sleep(1.7) -- wait for door to slide out

    -- Activate GREEN (push door panels out)
    pulse(GREEN)
    sleep(0.5) -- allow for piston extension

    print(""Door opened."")
    return ""opened""
end

-- Close door sequence
function closeDoor()
    if isDoorClosed() then
        print(""Door is already closed."")
        return ""already_closed""
    end
    print(""Closing door..."")
    -- Set direction to CLOSE (Red ON)
    local output = redstone.getBundledOutput(bundledSide)
    redstone.setBundledOutput(bundledSide, bit.bor(output, RED))
    sleep(0.5)

    -- Activate GREEN (pull door panels in)
    pulse(GREEN)
    sleep(1.5) -- wait for pistons to retract

    -- Activate BLUE (slide door closed)
    pulse(BLUE)
    sleep(7) -- allow for door to slide closed

    print(""Door closed."")
    return ""closed""
end

-- Setup modem
rednet.open(modemSide)
rednet.host(""door_control"", ""door_server"")

print(""Door controller listening on wireless channel "" .. channel)

-- Main loop

while true do
    local senderId, message = rednet.receive(""door_control"")

    local response = ""unknown_command""
    if message == ""open"" then
        response = openDoor()
    elseif message == ""close"" then
        response = closeDoor()
    elseif message == ""status"" then
        if isDoorOpen() then
            response = ""door_open""
        elseif isDoorClosed() then
            response = ""door_closed""
        else
            response = ""door_inbetween""
        end
    end

    rednet.send(senderId, response, ""door_control"")
end"
LfacC6Y8,pc_shop2,maz1lovo,Lua,Thursday 17th of July 2025 08:43:58 AM CDT,"local img = [[

                                                       ██╗██╗    ██╗ █████╗ ██████╗ ██████╗     ██╗    ██╗
                                                      ██╔╝██║    ██║██╔══██╗██╔══██╗██╔══██╗    ██║    ██║
                                                     ██╔╝ ██║ █╗ ██║███████║██████╔╝██████╔╝    ██║ █╗ ██║
                                                    ██╔╝  ██║███╗██║██╔══██║██╔══██╗██╔═══╝     ██║███╗██║
                                                   ██╔╝   ╚███╔███╔╝██║  ██║██║  ██║██║         ╚███╔███╔╝
                                                   ╚═╝     ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝          ╚══╝╚══╝ 
                                                       
]]

local ore_dict = {
    {
        ""Железная руда"",
        ""Железный слиток"",
        take = {name = ""minecraft:iron_ore"", damage = 0},
        give = {name = ""minecraft:iron_ingot"", damage = 0},
        rate = {take = 4, give = 9}
    },
    {
        ""Золотая руда"",
        ""Золотой слиток"",
        take = {name = ""minecraft:gold_ore"", damage = 0},
        give = {name = ""minecraft:gold_ingot"", damage = 0},
        rate = {take = 4, give = 9}
    },
    {
        ""Медная руда"",
        ""Медный слиток"",
        take = {name = ""IC2:blockOreCopper"", damage = 0},
        give = {name = ""IC2:itemIngot"", damage = 0},
        rate = {take = 4, give = 9}
    },
    {
        ""Оловянная руда"",
        ""Оловянный слиток"",
        take = {name = ""IC2:blockOreTin"", damage = 0},
        give = {name = ""IC2:itemIngot"", damage = 1},
        rate = {take = 4, give = 9}
    },
    {
        ""Свинцовая руда"",
        ""Свинцовый слиток"",
        take = {name = ""IC2:blockOreLead"", damage = 0},
        give = {name = ""IC2:itemIngot"", damage = 5},
        rate = {take = 4, give = 8}
    },
    {
        ""Никелевая руда"",
        ""Никелевый слиток"",
        take = {name = ""ThermalFoundation:Ore"", damage = 4},
        give = {name = ""ThermalFoundation:material"", damage = 68},
        rate = {take = 1, give = 2}
    },
    {
        ""Серебряная руда"",
        ""Серебряный слиток"",
        take = {name = ""ThermalFoundation:Ore"", damage = 2},
        give = {name = ""IC2:itemIngot"", damage = 6},
        rate = {take = 4, give = 9}
    },
}

local unicode = require(""unicode"")
local computer = require(""computer"")
local com = require(""component"")
local event = require(""event"")
local internet = com.internet -- Добавляем интернет компонент

local gpu = com.gpu
local me = com.me_interface -- Добавляем ME интерфейс
local pim = com.pim -- Добавляем PIM (Player Interface)
local w, h = gpu.maxResolution()
local defBG, defFG = gpu.getBackground(), gpu.getForeground()
gpu.setResolution(w, h)

-- Кэширование данных
local cached = {
    lastUpdate = 0,
    updateInterval = 5,
    oreQuantities = {}
}

-- Статистика обменов
local stats = {
    exchanges = 0,
    totalOre = 0,
    totalIngots = 0
}

-- Буфер экрана
local screenBuffer = {}

-- Цветовые схемы
local colors = {
    info = 0x00ff00,
    warning = 0xffff00,
    error = 0xff0000,
    border = 0x64fff2,
    title = 0x00a400,
    subtitle = 0xFFFFFF,
    powered = 0x64fff2,
    bg = 0x101010
}

-- Анимация появления логотипа
local function animateLogo(img, x, y, fore, delay)
    fore = fore or colors.title
    local i = 0
    for line in img:gmatch(""([^\n]*)\n?"") do
        gpu.setForeground(fore)
        gpu.set(x, y + i, line)
        os.sleep(delay or 0.07)
        i = i + 1
    end
end

-- Центрирование текста (перемещено выше)
local function center(height, text, color)
    gpu.setForeground(color)
    local textLen = unicode.len(text)
    local x = math.max(1, math.floor(w / 2 - textLen / 2))
    gpu.set(x, height, text)
end

-- Красивое приветствие
local greetings = {
    ""Добро пожаловать в обменник!"",
    ""Удачного обмена!"",
    ""Пусть удача сопутствует вам!"",
    ""Меняю руду на слитки — быстро и честно!"",
    ""Powered by DemonAve""
}
local function showGreeting(player)
    local greet = greetings[math.random(1, #greetings)]
    if player then
        center(h - 14, greet .. "" | "" .. player, colors.subtitle)
    else
        center(h - 14, greet, colors.subtitle)
    end
end
local antiSpam = {
    lastAction = 0,
    cooldown = 1
}

-- Таймер обновления данных
local function shouldUpdate()
    local currentTime = computer.uptime()
    if currentTime - (cached.lastUpdate or 0) > (cached.updateInterval or 5) then
        cached.lastUpdate = currentTime
        return true
    end
    return false
end



    -- Локальный вывод
local function log(message, level, player)
    local levels = {
        info = 0x00ff00,
        warning = 0xffff00,
        error = 0xff0000
    }
    gpu.fill(1, h - 13, w, 1, "" "") -- очищаем строку
    center(h - 13, message, colors[level] or colors.subtitle)
end

local function canProcess()
    local current = computer.uptime()
    if current - antiSpam.lastAction < antiSpam.cooldown then
        return false
    end
    antiSpam.lastAction = current
    return true
end

local function bufferSet(x, y, text, fore, back)
    local key = string.format(""%d:%d"", x, y)
    local current = screenBuffer[key]
    if not current or current.text ~= text or current.fore ~= fore or current.back ~= back then
        screenBuffer[key] = {text = text, fore = fore, back = back}
        gpu.setForeground(fore)
        gpu.setBackground(back)
        gpu.set(x, y, text)
    end
end

local function populateQty()
    local totalOre = 0
    for i, ore in pairs(ore_dict) do
        local fingerprint = {id = ore.give.name, dmg = ore.give.damage}
        local ok, item = pcall(me.getItemDetail, fingerprint)
        if not ok or item == nil then
            ore.qty = 0
            ore.sizeOfStack = 64
        else
            local basicOk, basicItem = pcall(function() return item.basic() end)
            if not basicOk or not basicItem then
                ore.qty = 0
                ore.sizeOfStack = 64
            else
                ore.sizeOfStack = basicItem.max_size
                ore.qty = basicItem.qty
                totalOre = totalOre + basicItem.qty
            end
        end
    end
    return totalOre
end

local function displayOres()
    local line = 3
    local colOre = math.floor(w * 0.04)
    local colIngot = math.floor(w * 0.48)
    local colTake = math.floor(w * 0.32)
    local colGive = colTake + 8
    local colArrow = colTake + 4
    local colQty = math.floor(w * 0.88)
    local colAvail = math.floor(w * 0.75)

    -- Верхняя рамка
    gpu.setForeground(colors.border)
    gpu.set(1, line - 1, ""╔"" .. string.rep(""═"", w - 2) .. ""╗"")
    gpu.set(1, 3,""║"")
    gpu.set(1, 4,""║"")
    gpu.set(gpu.getResolution(), 3,""║"")
    gpu.set(gpu.getResolution(), 4,""║"")
    -- Заголовки таблицы (увеличенный текст)
    gpu.setForeground(colors.title)
    gpu.set(colOre + 2, line, ""РУДА"")
    gpu.set(colTake + 2, line, ""КУРС"")
    gpu.set(colIngot + 4, line, ""СЛИТОК"")
    gpu.set(colAvail + 19, line, ""ДОСТУПНО"")
    -- Вторая строка под заголовком можно использовать для подзаголовков или оставить пустой
    gpu.set(colOre, line + 1, """")
    gpu.set(colTake + 1, line + 1, """")
    gpu.set(colIngot, line + 1, """")
    gpu.set(colAvail, line + 1, """")
    -- Разделитель под заголовком
    gpu.setForeground(colors.border)
    gpu.set(1, line + 2, ""╠"" .. string.rep(""─"", w - 2) .. ""╣"")

    local row = line + 3
    for i, ore in ipairs(ore_dict) do
        gpu.setForeground(colors.info)
        gpu.set(colOre, row, ore[1] or ""?"")
        gpu.set(colIngot, row, ore[2] or ""?"")
        gpu.setForeground(0xFF00FF)
        gpu.set(colTake, row, tostring((ore.rate and ore.rate.take) or ""?""))
        gpu.set(colGive, row, tostring((ore.rate and ore.rate.give) or ""?""))
        gpu.setForeground(colors.warning)
        gpu.set(colArrow, row, ""→"")
        gpu.setForeground(colors.info)
        gpu.set(colQty, row, tostring(ore.qty or 0))
        -- Боковые границы
        gpu.setForeground(colors.border)
        gpu.set(1, row, ""║"")
        gpu.set(w, row, ""║"")
        -- Полоса под каждой строкой, кроме последней
        if i < #ore_dict then
            gpu.setForeground(colors.border)
            gpu.set(1, row + 1, ""╟"" .. string.rep(""─"", w - 2) .. ""╢"")
            row = row + 2
        else
            row = row + 1
        end
    end
    -- Нижняя рамка
    gpu.setForeground(colors.border)
    gpu.set(1, row, ""╚"" .. string.rep(""═"", w - 2) .. ""╝"")
end

local function updateOres()
    local totalOre = populateQty()
    gpu.fill(1, 1, w, h - 16, "" "")
    if totalOre == 0 then
        gpu.fill(1, 1, w, h - 15, "" "")
        center(h - 15, ""Нет соединения с МЭ"", 0xff0000)
    else
        displayOres()
    end
end

local function giveItemFromMe(item, dmg, amount)
    local fingerprint = {id = item, dmg = dmg}
    local ok, res = pcall(me.exportItem, fingerprint, ""UP"", amount)
    if ok and res and res.size then
        return res.size
    else
        return 0
    end
end

local function giveIngot(toGive, ore)
    local totalGive = 0
    local givePreIteration = 0
    while totalGive < toGive do
        if toGive - totalGive > 64 then
            givePreIteration = ore.sizeOfStack
        else
            givePreIteration = toGive - totalGive
        end

        local gived = giveItemFromMe(ore.give.name, ore.give.damage, givePreIteration)

        totalGive = totalGive + gived
        if gived == 0 then
            gpu.fill(1, h - 15, w, 2, "" "")
            center(h - 15, ""Oсвободите место в инвентаре"", 0xff0000)
            center(h - 14, ""Ожидаю выдать "" .. tostring(toGive - totalGive) .. "" "" .. ore[2], 0xFFFFFF)
            os.sleep(1)
        end
        gpu.fill(1, h - 15, 2, h, "" "")
    end
end

local function exchangeOre(slot, ore, player)
    local curSlot = pim.getStackInSlot(slot)
    if curSlot == nil then
        gpu.fill(1, h - 14, w, 1, "" "")
        center(h - 14, ""Вы сошли с PIM, обмен прерван. (Не удалось прочесть слот)"", 0xff0000)
        log(""Вы сошли с PIM, обмен прерван. (Не удалось прочесть слот)"", ""error"", player)
        os.sleep(0.5)
        return
    end
    local userOreQty = curSlot.qty
    local takeQty = userOreQty - (userOreQty % ore.rate.take)
    local giveQty = userOreQty * ore.rate.give
    if ore.qty < giveQty then
        gpu.fill(1, h - 14, w, 1, "" "")
        center(h - 14, ""Недостаточно слитков для обмена <"" .. ore[1] .. "">"", 0xff0000)
        log(""Недостаточно слитков для обмена <"" .. ore[1] .. "">"", ""warning"", player)
        os.sleep(0.5)
        return
    end
    -- Количество могло измениться..
    local takedOre = pim.pushItem(""DOWN"", slot, takeQty)

    if takedOre == nil then
        gpu.fill(1, h - 14, w, 1, "" "")
        center(h - 14, ""Вы сошли с PIM, обмен прерван. (Не удалось извлечь руду)"", 0xff0000)
        log(""Ошибка извлечения руды из PIM"", ""error"", player)
        os.sleep(0.5)
    elseif takedOre == 0 then
        gpu.fill(1, h - 14, w, 1, "" "")
        center(h - 14, ""В выбраном слоте руды нет.. А была.. Хмм..."", 0x505050)
        log(""В выбраном слоте руды нет"", ""warning"", player)
    else
        local giveQty = (takedOre // ore.rate.take) * ore.rate.give
        gpu.fill(1, h - 15, w, 2, "" "")
        -- Анимация стрелки
        for blink = 1, 4 do
            gpu.setForeground(blink % 2 == 1 and colors.warning or colors.info)
            center(h - 14, ""Меняю  "" .. takedOre .. ""  "" .. ore[1] .. ""  на  "" .. giveQty .. ""  "" .. ore[2] .. ""  -->"", colors.subtitle)
            os.sleep(0.15)
        end
        -- Добавляем статистику
        stats.exchanges = stats.exchanges + 1
        stats.totalOre = stats.totalOre + takedOre
        stats.totalIngots = stats.totalIngots + giveQty
        log(""Обмен: "" .. takedOre .. "" "" .. ore[1] .. "" на "" .. giveQty .. "" "" .. ore[2], ""info"", player)
        giveIngot(giveQty, ore)
        gpu.fill(1, h - 3, w, 1, "" "")
        center(h - 3, string.format(""Всего обменов: %d | Руды: %d | Слитков: %d"", stats.exchanges, stats.totalOre, stats.totalIngots), colors.info)
    end
end

local function checkInventory(player)
    local size = pim.getInventorySize()
    local ok, data = pcall(pim.getAllStacks, 0)
    if not ok or not data then
        gpu.fill(1, h - 14, w, 1, "" "")
        center(h - 14, ""Ошибка получения инвентаря PIM"", 0xff0000)
        log(""Ошибка получения инвентаря PIM"", ""error"", player)
        os.sleep(1)
        return
    end

    for slot = 1, size do
        if data[slot] then
            for i, ore in pairs(ore_dict) do
                if data[slot].id == ore.take.name and data[slot].dmg == ore.take.damage then
                    exchangeOre(slot, ore, player)
                end
            end
        end
    end

    updateOres()

    if pim.getInventoryName() ~= ""pim"" then
        gpu.fill(1, h - 15, w, 2, "" "")
        center(h - 15, ""Обмен окончен! Приходите ещё!"", colors.subtitle)
        log(""Обмен окончен!"", ""info"", player)
        -- checkInventory() -- убираем рекурсию!
    else
        event.push(""player_off"", player)
    end
end

local eventHandlers = {
    interrupted = function()
        gpu.setBackground(defBG)
        gpu.setForeground(defFG)
        gpu.fill(1, 1, w, h, "" "")
        os.exit()
        return true
    end,

    player_on = function(...)
        if not canProcess() then return end
        local args = {...}
        local player = args[1] or ""Игрок""
        gpu.fill(1, h - 15, w, 1, "" "")
        center(h - 15, ""Приветствую, "" .. player .. ""! Начинаю обмен"", colors.subtitle)
        log(""Игрок "" .. player .. "" начал обмен"", ""info"", player)
        updateOres()
        checkInventory(player)
    end,

    player_off = function(...)
        if not canProcess() then return end
        local args = {...}
        local player = args[1] or ""Игрок""
        -- Очищаем экран и показываем только логотип
        gpu.fill(1, 1, w, h, "" "")
        animateLogo(img, 1, h - 13, colors.title, 0.03)
        -- Выводим статистику обменов
        center(h - 3, string.format(""Всего обменов: %d | Руды: %d | Слитков: %d"", stats.exchanges, stats.totalOre, stats.totalIngots), colors.info)
        center(h, ""Powered by DemonAve"", colors.powered)
        log(""Игрок "" .. player .. "" завершил обмен"", ""info"", player)
        -- Не вызываем updateOres, чтобы не перерисовывать таблицу на экране выхода
    end
}

function handleEvent(eventID, ...)
    local handler = eventHandlers[eventID]
    if handler then
        return handler(...)
    end
end

function drawStat()
    gpu.setForeground(0x444444)
    gpu.set(
        2,
        h - 1,
        string.format(
            ""RAM: %.1fkB / %.1fkB"",
            (computer.totalMemory() - computer.freeMemory()) / 1024,
            computer.totalMemory() / 1024
        )
    )
end


local oreTimeFn = function()
    updateOres()
    -- Каджый 10 такт обновляем экран
    for i = 1, 10 do
        coroutine.yield()
    end
end
local oreTimer = coroutine.create(oreTimeFn)

function draw_img(img, x, y, fore, back)
    fore = fore or 0xffffff
    back = back or 0x0
    oldFG = gpu.getForeground()
    gpu.setForeground(fore)
    local i = 0
    for line in img:gmatch(""([^\n]*)\n?"") do
        gpu.set(x, y + i, line)
        i = i + 1
    end
    gpu.setForeground(oldFG)
end
-- ...existing code...

-- Проверяем наличие необходимых компонентов
if not me then
    center(h - 15, ""Ошибка: ME интерфейс не найден!"", 0xff0000)
    os.exit()
end

if not pim then
    center(h - 15, ""Ошибка: PIM (Player Interface) не найден!"", 0xff0000)
    os.exit()
end


-- Стартовый экран с анимацией
gpu.setBackground(colors.bg)
gpu.fill(1, 1, w, h, "" "")
animateLogo(img, 1, h - 13, colors.title, 0.05)
center(h - 15, ""Для обмена встаньте на PIM и не сходите до окончания обмена"", colors.subtitle)
showGreeting()
-- Выводим статистику обменов
center(h - 3, string.format(""Всего обменов: %d | Руды: %d | Слитков: %d"", stats.exchanges, stats.totalOre, stats.totalIngots), colors.info)
-- Powered by DemonAve (по центру)
center(h, ""Powered by DemonAve"", colors.powered)


while true do
    drawStat()
    
    -- Очистка памяти при необходимости
    if computer.freeMemory() < 1024 then
        collectGarbage()
    end
    
    -- Обновление данных по таймеру
    if shouldUpdate() then
        updateOres()
    end
    
    local ev = {event.pull(1)}
    
    handleEvent(ev[1], table.unpack(ev, 2))
    
    if coroutine.status(oreTimer) == ""dead"" then
        oreTimer = coroutine.create(oreTimeFn)
    else
        coroutine.resume(oreTimer)
    end
end
"
CJrWXhAG,pc_shop,maz1lovo,Lua,Thursday 17th of July 2025 08:33:03 AM CDT,"local ore_dict = {
    {
        ""Железная руда"",
        ""Железный слиток"",
        take = {name = ""minecraft:iron_ore"", damage = 0},
        give = {name = ""minecraft:iron_ingot"", damage = 0},
        rate = {take = 4, give = 9}
    },
    {
        ""Золотая руда"",
        ""Золотой слиток"",
        take = {name = ""minecraft:gold_ore"", damage = 0},
        give = {name = ""minecraft:gold_ingot"", damage = 0},
        rate = {take = 4, give = 9}
    },
    {
        ""Медная руда"",
        ""Медный слиток"",
        take = {name = ""IC2:blockOreCopper"", damage = 0},
        give = {name = ""IC2:itemIngot"", damage = 0},
        rate = {take = 4, give = 9}
    },
    {
        ""Оловянная руда"",
        ""Оловянный слиток"",
        take = {name = ""IC2:blockOreTin"", damage = 0},
        give = {name = ""IC2:itemIngot"", damage = 1},
        rate = {take = 4, give = 9}
    },
    {
        ""Свинцовая руда"",
        ""Свинцовый слиток"",
        take = {name = ""IC2:blockOreLead"", damage = 0},
        give = {name = ""IC2:itemIngot"", damage = 5},
        rate = {take = 4, give = 8}
    },
    {
        ""Никелевая руда"",
        ""Никелевый слиток"",
        take = {name = ""ThermalFoundation:Ore"", damage = 4},
        give = {name = ""ThermalFoundation:material"", damage = 68},
        rate = {take = 1, give = 2}
    },
    {
        ""Серебряная руда"",
        ""Серебряный слиток"",
        take = {name = ""ThermalFoundation:Ore"", damage = 2},
        give = {name = ""IC2:itemIngot"", damage = 6},
        rate = {take = 4, give = 9}
    },
}

local unicode = require(""unicode"")
local computer = require(""computer"")
local com = require(""component"")
local event = require(""event"")
local internet = com.internet -- Добавляем интернет компонент

local gpu = com.gpu
local me = com.me_interface -- Добавляем ME интерфейс
local pim = com.pim -- Добавляем PIM (Player Interface)
local w, h = gpu.maxResolution()
local defBG, defFG = gpu.getBackground(), gpu.getForeground()
gpu.setResolution(w, h)

-- Кэширование данных
local cached = {
    lastUpdate = 0,
    updateInterval = 5,
    oreQuantities = {}
}

-- Статистика обменов
local stats = {
    exchanges = 0,
    totalOre = 0,
    totalIngots = 0
}

-- Буфер экрана
local screenBuffer = {}

local function center(height, text, color)
    gpu.setForeground(color)
    local textLen = unicode.len(text)
    local x = math.max(1, math.floor(w / 2 - textLen / 2))
    gpu.set(x, height, text)
end
local antiSpam = {
    lastAction = 0,
    cooldown = 1
}

-- Таймер обновления данных
local function shouldUpdate()
    local currentTime = computer.uptime()
    if currentTime - (cached.lastUpdate or 0) > (cached.updateInterval or 5) then
        cached.lastUpdate = currentTime
        return true
    end
    return false
end



    -- Локальный вывод
local function log(message, level, player)
    local levels = {
        info = 0x00ff00,
        warning = 0xffff00,
        error = 0xff0000
    }
    gpu.fill(1, h - 13, w, 1, "" "") -- очищаем строку
    center(h - 13, message, levels[level] or 0xffffff)
end

local function canProcess()
    local current = computer.uptime()
    if current - antiSpam.lastAction < antiSpam.cooldown then
        return false
    end
    antiSpam.lastAction = current
    return true
end

local function bufferSet(x, y, text, fore, back)
    local key = string.format(""%d:%d"", x, y)
    local current = screenBuffer[key]
    if not current or current.text ~= text or current.fore ~= fore or current.back ~= back then
        screenBuffer[key] = {text = text, fore = fore, back = back}
        gpu.setForeground(fore)
        gpu.setBackground(back)
        gpu.set(x, y, text)
    end
end

local function populateQty()
    local totalOre = 0
    for i, ore in pairs(ore_dict) do
        local fingerprint = {id = ore.give.name, dmg = ore.give.damage}
        local ok, item = pcall(me.getItemDetail, fingerprint)
        if not ok or item == nil then
            ore.qty = 0
            ore.sizeOfStack = 64
        else
            local basicOk, basicItem = pcall(function() return item.basic() end)
            if not basicOk or not basicItem then
                ore.qty = 0
                ore.sizeOfStack = 64
            else
                ore.sizeOfStack = basicItem.max_size
                ore.qty = basicItem.qty
                totalOre = totalOre + basicItem.qty
            end
        end
    end
    return totalOre
end

local function displayOres()
    local line = 2
    local colOre = math.floor(w * 0.06)
    local colIngot = math.floor(w * 0.52)
    local colTake = math.floor(w * 0.35)
    local colGive = colTake + 6
    local colArrow = colTake + 2
    local colQty = math.floor(w * 0.91)
    local colAvail = math.floor(w * 0.79)
    for i, ore in pairs(ore_dict) do
        local print_row = line + (i)
        gpu.setForeground(0x00ff00)
        gpu.set(colOre, print_row, ore[1] or ""?"")
        gpu.set(colIngot, print_row, ore[2] or ""?"")
        gpu.setForeground(0xFF00FF)
        gpu.set(colTake, print_row, tostring((ore.rate and ore.rate.take) or ""?""))
        gpu.set(colGive, print_row, tostring((ore.rate and ore.rate.give) or ""?""))
        gpu.set(colQty, print_row, tostring(ore.qty or 0))
        gpu.setForeground(0xFFFF00)
        gpu.set(colArrow, print_row, ""-->"")
        gpu.set(colAvail, print_row, ""Доступно:"")
        gpu.setForeground(0x202020)
        gpu.set(2, print_row + 1, string.rep(""═"", w - 2))
        line = line + 1
    end
end

local function updateOres()
    local totalOre = populateQty()
    gpu.fill(1, 1, w, h - 16, "" "")
    if totalOre == 0 then
        gpu.fill(1, 1, w, h - 15, "" "")
        center(h - 15, ""Нет соединения с МЭ"", 0xff0000)
    else
        displayOres()
    end
end

local function giveItemFromMe(item, dmg, amount)
    local fingerprint = {id = item, dmg = dmg}
    local ok, res = pcall(me.exportItem, fingerprint, ""UP"", amount)
    if ok and res and res.size then
        return res.size
    else
        return 0
    end
end

local function giveIngot(toGive, ore)
    local totalGive = 0
    local givePreIteration = 0
    while totalGive < toGive do
        if toGive - totalGive > 64 then
            givePreIteration = ore.sizeOfStack
        else
            givePreIteration = toGive - totalGive
        end

        local gived = giveItemFromMe(ore.give.name, ore.give.damage, givePreIteration)

        totalGive = totalGive + gived
        if gived == 0 then
            gpu.fill(1, h - 15, w, 2, "" "")
            center(h - 15, ""Oсвободите место в инвентаре"", 0xff0000)
            center(h - 14, ""Ожидаю выдать "" .. tostring(toGive - totalGive) .. "" "" .. ore[2], 0xFFFFFF)
            os.sleep(1)
        end
        gpu.fill(1, h - 15, 2, h, "" "")
    end
end

local function exchangeOre(slot, ore, player)
    local curSlot = pim.getStackInSlot(slot)
    if curSlot == nil then
        gpu.fill(1, h - 14, w, 1, "" "")
        center(h - 14, ""Вы сошли с PIM, обмен прерван. (Не удалось прочесть слот)"", 0xff0000)
        log(""Вы сошли с PIM, обмен прерван. (Не удалось прочесть слот)"", ""error"", player)
        os.sleep(0.5)
        return
    end
    local userOreQty = curSlot.qty
    local takeQty = userOreQty - (userOreQty % ore.rate.take)
    local giveQty = userOreQty * ore.rate.give
    if ore.qty < giveQty then
        gpu.fill(1, h - 14, w, 1, "" "")
        center(h - 14, ""Недостаточно слитков для обмена <"" .. ore[1] .. "">"", 0xff0000)
        log(""Недостаточно слитков для обмена <"" .. ore[1] .. "">"", ""warning"", player)
        os.sleep(0.5)
        return
    end
    -- Количество могло измениться..
    local takedOre = pim.pushItem(""DOWN"", slot, takeQty)

    if takedOre == nil then
        gpu.fill(1, h - 14, w, 1, "" "")
        center(h - 14, ""Вы сошли с PIM, обмен прерван. (Не удалось извлечь руду)"", 0xff0000)
        log(""Ошибка извлечения руды из PIM"", ""error"", player)
        os.sleep(0.5)
    elseif takedOre == 0 then
        gpu.fill(1, h - 14, w, 1, "" "")
        center(h - 14, ""В выбраном слоте руды нет.. А была.. Хмм..."", 0x505050)
        log(""В выбраном слоте руды нет"", ""warning"", player)
    else
        local giveQty = (takedOre // ore.rate.take) * ore.rate.give
        gpu.fill(1, h - 15, w, 2, "" "")
        center(h - 14, ""Меняю  "" .. takedOre .. ""  "" .. ore[1] .. ""  на  "" .. giveQty .. ""  "" .. ore[2], 0xffffff)
        -- Добавляем статистику
        stats.exchanges = stats.exchanges + 1
        stats.totalOre = stats.totalOre + takedOre
        stats.totalIngots = stats.totalIngots + giveQty
        log(""Обмен: "" .. takedOre .. "" "" .. ore[1] .. "" на "" .. giveQty .. "" "" .. ore[2], ""info"", player)
        giveIngot(giveQty, ore)
        gpu.fill(1, h - 3, w, 1, "" "")
        center(h - 3, string.format(""Всего обменов: %d | Руды: %d | Слитков: %d"", stats.exchanges, stats.totalOre, stats.totalIngots), 0x00ff00)
    end
end

local function checkInventory(player)
    local size = pim.getInventorySize()
    local ok, data = pcall(pim.getAllStacks, 0)
    if not ok or not data then
        gpu.fill(1, h - 14, w, 1, "" "")
        center(h - 14, ""Ошибка получения инвентаря PIM"", 0xff0000)
        log(""Ошибка получения инвентаря PIM"", ""error"", player)
        os.sleep(1)
        return
    end

    for slot = 1, size do
        if data[slot] then
            for i, ore in pairs(ore_dict) do
                if data[slot].id == ore.take.name and data[slot].dmg == ore.take.damage then
                    exchangeOre(slot, ore, player)
                end
            end
        end
    end

    updateOres()

    if pim.getInventoryName() ~= ""pim"" then
        gpu.fill(1, h - 15, w, 2, "" "")
        center(h - 15, ""Обмен окончен! Приходите ещё!"", 0xffffff)
        log(""Обмен окончен!"", ""info"", player)
        -- checkInventory() -- убираем рекурсию!
    else
        event.push(""player_off"", player)
    end
end

local eventHandlers = {
    interrupted = function()
        gpu.setBackground(defBG)
        gpu.setForeground(defFG)
        gpu.fill(1, 1, w, h, "" "")
        os.exit()
        return true
    end,

    player_on = function(...)
        if not canProcess() then return end
        local args = {...}
        local player = args[1] or ""?""
        gpu.fill(1, h - 15, w, 1, "" "")
        center(h - 15, ""Приветствую, "" .. player .. ""! Начинаю обмен"", 0xffffff)
        log(""Игрок "" .. player .. "" начал обмен"", ""info"", player)
        updateOres()
        checkInventory(player)
    end,

    player_off = function(...)
        if not canProcess() then return end
        local args = {...}
        local player = args[1] or ""?""
        gpu.fill(1, h - 15, w, 1, "" "")
        center(h - 15, ""Для обмена встаньте на PIM и не сходите до окончания обмена"", 0xffffff)
        log(""Игрок "" .. player .. "" завершил обмен"", ""info"", player)
        updateOres()
    end
}

function handleEvent(eventID, ...)
    local handler = eventHandlers[eventID]
    if handler then
        return handler(...)
    end
end

function drawStat()
    gpu.setForeground(0x444444)
    gpu.set(
        2,
        h - 1,
        string.format(
            ""RAM: %.1fkB / %.1fkB"",
            (computer.totalMemory() - computer.freeMemory()) / 1024,
            computer.totalMemory() / 1024
        )
    )
end

local oreTimeFn = function()
    updateOres()
    -- Каджый 10 такт обновляем экран
    for i = 1, 10 do
        coroutine.yield()
    end
end
local oreTimer = coroutine.create(oreTimeFn)

function draw_img(img, x, y, fore, back)
    fore = fore or 0xffffff
    back = back or 0x0
    oldFG = gpu.getForeground()
    gpu.setForeground(fore)
    local i = 0
    for line in img:gmatch(""([^\n]*)\n?"") do
        gpu.set(x, y + i, line)
        i = i + 1
    end
    gpu.setForeground(oldFG)
end
local img =
    [[

                                                       ██╗██╗    ██╗ █████╗ ██████╗ ██████╗     ██╗    ██╗
                                                      ██╔╝██║    ██║██╔══██╗██╔══██╗██╔══██╗    ██║    ██║
                                                     ██╔╝ ██║ █╗ ██║███████║██████╔╝██████╔╝    ██║ █╗ ██║
                                                    ██╔╝  ██║███╗██║██╔══██║██╔══██╗██╔═══╝     ██║███╗██║
                                                   ██╔╝   ╚███╔███╔╝██║  ██║██║  ██║██║         ╚███╔███╔╝
                                                   ╚═╝     ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝          ╚══╝╚══╝ 
                                                       
    ]]

function copyleft()
  local text = {
    {""Авторы: "", 0x444444},
    {""DemonAve"", 0x64fff2}
  }
  local y = h - 1
  -- Считаем общую длину текста
  local totalLen = 0
  for i, str in ipairs(text) do
    totalLen = totalLen + unicode.len(str[1])
  end
  local x = w - totalLen + 1
  for i, str in ipairs(text) do
    gpu.setForeground(str[2])
    gpu.set(x, y, str[1])
    x = x + unicode.len(str[1])
  end

  gpu.setBackground(defBG)
  gpu.setForeground(defFG)
end

gpu.fill(1, 1, w, h, "" "")

-- Проверяем наличие необходимых компонентов
if not me then
    center(h - 15, ""Ошибка: ME интерфейс не найден!"", 0xff0000)
    os.exit()
end

if not pim then
    center(h - 15, ""Ошибка: PIM (Player Interface) не найден!"", 0xff0000)
    os.exit()
end

center(h - 15, ""Для обмена встаньте на PIM и не сходите до окончания обмена"", 0xffffff)
draw_img(img, 1, h - 13, 0x00a400)
copyleft()
-- Выводим статистику обменов
center(h - 3, string.format(""Всего обменов: %d | Руды: %d | Слитков: %d"", stats.exchanges, stats.totalOre, stats.totalIngots), 0x00ff00)

while true do
    drawStat()
    
    -- Очистка памяти при необходимости
    if computer.freeMemory() < 1024 then
        collectGarbage()
    end
    
    -- Обновление данных по таймеру
    if shouldUpdate() then
        updateOres()
    end
    
    handleEvent(event.pull(1))
    
    if coroutine.status(oreTimer) == ""dead"" then
        oreTimer = coroutine.create(oreTimeFn)
    else
        coroutine.resume(oreTimer)
    end
end
"
kPmbNc50,GuneAwakening_Engine.ini,zerox2501,INI file,Thursday 17th of July 2025 08:13:30 AM CDT,"[SystemSettings]
r.FidelityFX.FSR3.UseNativeDX12=1
r.FidelityFX.FI.overrideSwapChainDX12=1
niagara.CreateShadersOnLoad=1
D3D12.TexturePoolOnlyAccountStreamableTexture=1
D3D12.UseUpdateTexture3DComputeShader=1
D3D12.PSO.DriverOptimizedDiskCache=1
D3D12.InsertOuterOcclusionQuery=1
D3D12.AFRSyncTemporalResources=1
D3D12.AsyncDeferredDeletion=1
D3D12.ZeroBufferSizeInMB=128
D3D12.ResidencyManagement=1
D3D12.MaximumFrameLatency=3
D3D12.AFRUseFramePacing=1
D3D12.StablePowerState=0
D3D12.SyncThreshold=999
D3D12.PSO.DiskCache=1
D3D12.ForceThirtyHz=0
D3D12.SyncWithDWM=0
RHI.SyncWithDWM=0
memory.logGenericPlatformMemoryStats=0
FX.MaxGPUParticlesSpawnedPerFrame=2048
fx.ParticlePerfStats.Enabled=false
FX.MaxCPUParticlesPerEmitter=500
fx.EnableCircularAnimTrailDump=0
fx.Niagara.DebugDraw.Enabled=0
FX.FXAllowParticleMeshLODs=1
FX.BatchAsyncBatchSize=8
FX.EarlyScheduleAsync=1
FX.AllowGPUParticles=1
FX.AllowGPUSorting=1
FX.AllowAsyncTick=1
FX.AllowCulling=0
FX.BatchAsync=1
AllowAsyncRenderThreadUpdatesDuringGamethreadUpdates=1
AudioThread.BatchAsyncBatchSize=9999999
AllowAsyncRenderThreadUpdatesEditor=1
AudioThread.UseBackgroundThreadPool=1
AudioThread.EnableBatchProcessing=1
GeometryCache.InterpolateFrames=1
AllowAsyncRenderThreadUpdates=1
GeometryCache.OffloadUpdate=1
RHI.MaximumFrameLatency=3
a.ParallelAnimUpdate=1
GamethreadUpdates=1

[/Script/Engine.RendererSettings]
r.ShaderPipelineCache.LazyLoadShadersWhenPSOCacheIsPresent=1
r.RenderTargetPool.AllowMultipleAliasingDiscardsPerFrame=1
r.FastVRam.DistanceFieldTileIntersectionResources=1
r.Streaming.NumStaticComponentsProcessedPerFrame=2
r.FastVRam.DistanceFieldAODownsampledBentNormal=1
r.Streaming.MaxReferenceChecksBeforeStreamOut=0.5
r.Vulkan.PipelineCacheFromShaderPipelineCache=1
r.FastVRam.DistanceFieldAOScreenGridResources=1
r.SceneRenderTargetResizeMethodForceOverride=1
r.ShaderPipelineCache.PrecompileBatchSize=256
r.ShaderPipelineCache.AlwaysGenerateOSCache=1
r.FastVRam.DistanceFieldCulledObjectBuffers=1
r.ShaderPipelineCache.BackgroundBatchTime=10
r.ShaderPipelineCache.PrecompileBatchTime=52
r.FastVRam.ForwardLightingCullingResources=1
r.Streaming.MaxNumTexturesToStreamPerFrame=1
r.ShaderPipelineCache.GameFileMaskEnabled=1
r.ShaderPipelineCache.BackgroundBatchSize=5
r.Streaming.ScaleTexturesByGlobalMyBias=0.5
r.Streaming.MaxHiddenPrimitiveViewBoost=1.5
r.ShaderPipelineCache.PreOptimizeEnabled=1
r.XGEShaderCompile.Xml.JobTimeout=0.500000
r.AsyncCreateLightPrimitiveInteractions=1
r.XGEShaderCompile.Xml.BatchGroupSize=256
r.Nanite.Streaming.StreamingPoolSize=1024
r.AllowDownsampledStandardTranslucency=1
r.Streaming.PrioritizeMeshLODRetention=1
r.AmbientOcclusion.AsyncComputeBudget=1
r.ShaderPipelineCache.SaveBoundPSOLog=1
r.Streaming.HiddenPrimitiveScale=0.0333
r.D3D.ForceShaderConductorDXCRewrite=1
r.TransientResourceAliasing.Buffers=1
r.Shadow.WholeSceneShadowCacheMb=1024
r.ShaderPipelineCache.SaveUserCache=1
r.Streaming.UseBackgroundThreadPool=1
r.bForceCPUAccessToGPUSkinVerts=True
r.bForceCPUAccessToGPUSkinVerts=1
r.Streaming.UseAsyncRequestsForDDC=1
r.EnableAsyncComputeVolumetricFog=1
r.ShaderPipelineCache.StartupMode=2
r.ShaderPipelineCache.BatchSize=256
r.XGEShaderCompile.Xml.BatchSize=64
r.FastVRam.DistanceFieldAOHistory=1
r.Streaming.MinMipForSplitRequest=3
r.Streaming.FullyLoadUsedTextures=1
r.AccelTargetPrecompileFrameTime=0
r.ShaderPipelineCache.BatchTime=82
r.FastVRam.ScreenSpaceShadowMask=1
r.Streaming.AmortizeCPUToGPUCopy=1
r.SceneRenderTargetResizeMethod=2
r.Cache.DrawInterpolationPoints=1
r.ShaderPipelineCache.ReportPSO=1
r.ShaderComplexity.CacheShaders=1
r.FastVRam.DistanceFieldShadows=1
r.Streaming.FramesForFullUpdate=5
r.Streaming.DefragDynamicBounds=1
r.Streaming.LimitPoolSizeToVRAM=1
r.SupportDepthOnlyIndexBuffers=1
r.MultithreadedShadowmapEncode=1
r.D3D12.ExecuteCommandListTask=1
r.CompileShadersForDevelopment=0
r.UseAsyncShaderPrecompilation=1
r.FastVRam.DistanceFieldNormal=1
r.FastVRam.PostProcessMaterial=1
r.Streaming.PoolSizeForMeshes=-1
r.SupportReversedIndexBuffers=1
r.MultithreadedLightmapEncode=1
r.VirtualTextureReducedMemory=1
r.ShaderPipelineCache.Enabled=1
r.Streaming.UsePerTextureBias=1
r.ShaderPipelineCache.LogPSO=1
r.Streaming.UseFixedPoolSize=0
r.TargetPrecompileFrameTime=0
r.OptimizeForUAVPerformance=1
r.Streaming.UseMaterialData=1
r.AmbientOcclusion.Compute=2
r.FastVRam.HistogramReduce=1
r.FastVRam.ShadowPerObject=1
r.FastVRam.GBufferVelocity=1
r.FastVRam.DistortHistory=1
r.Streaming.UseNewMetrics=1
r.RenderTargetPoolMin=1000
r.Emitter.FastPoolEnable=1
r.Cache.UpdateEveryFrame=1
r.Shaders.ZeroInitialise=1
r.FastVRam.VolumetricFog=1
r.FastVRam.EyeAdaptation=1
r.FastVRam.DOFPostfilter=1
r.Streaming.FlushTimeOut=2
r.Streaming.HLODStrategy=0
r.AccelPredrawBatchTime=0
r.AllowOcclusionQueries=1
r.Shadow.CachePreshadow=1
r.XGEShaderCompile.Mode=1
r.FastVRam.VelocityFlat=1
r.GPUParticle.Simulate=1
r.AsyncPipelineCompile=1
r.ParallelTranslucency=1
r.SkeletalMeshLODBias=-1
r.UseShaderBinaryCache=1
r.FastVRam.VelocityMax=1
r.FastVRam.CombineLUTs=1
r.Streaming.MinBoost=0.5
r.Streaming.UseAllMips=1
r.Streaming.PoolSize=768
r.CreateShadersOnLoad=0
r.UseVolumetricFogLDS=1
r.HZB.BuildUseCompute=1
r.FastVRam.MotionBlur=1
r.FastVRam.SceneColor=1
r.FastVRam.SceneDepth=1
r.FastVRam.Distortion=1
r.FastVRam.Downsample=1
r.FinishCurrentFrame=0
r.FastVRam.Histogram=1
r.FastVRam.DOFReduce=1
r.FastVRam.ShadowCSM=1
r.Streaming.DropMips=0
r.OneFrameThreadLag=1
r.GPUCrashDebugging=0
r.PredrawBatchTime=-1
r.ParallelRendering=1
r.LandscapeLODBias=-1
r.CustomDepth.Order=0
r.FastVRam.DOFSetup=1
r.FastVRam.BokehDOF=1
r.FastVRam.GBufferA=1
r.FastVRam.GBufferB=1
r.FastVRam.GBufferC=1
r.FastVRam.GBufferD=1
r.FastVRam.GBufferE=1
r.Streaming.MipBias=1
r.SceneColorFormat=3
r.RDG.AsyncCompute=1
r.VT.MaxAnisotropy=2
r.ParallelVelocity=1
r.ParticleLODBias=-1
r.Shaders.Optimize=1
r.Shaders.FastMath=1
r.UseShaderCaching=1
r.UseShaderPredraw=1
r.XGEShaderCompile=1
r.FastVRam.Tonemap=1
r.FastVRam.Upscale=1
r.TextureStreaming=1
r.ParallelShadows=1
r.ShaderPipelines=1
r.Streaming.Boost=1
r.StencilLODMode=2
r.VirtualTexture=1
r.MipMapLODBias=0
r.AsyncCompute=1
r.D3D.ForceDXC=1
r.FastVRam.HZB=1
r.FastVRam.LPV=0
r.LODFadeTime=3
r.GTSyncType=1

[/Script/Engine.StreamingSettings]
s.LevelStreamingComponentsUnregistrationGranularity=1
s.LevelStreamingComponentsRegistrationGranularity=1
s.PriorityLevelStreamingActorsUpdateExtraTime=0
s.LevelStreamingActorsUpdateTimeLimit=2
s.MinBulkDataSizeForAsyncLoading=0
s.UnregisterComponentsTimeLimit=2
s.PriorityAsyncLoadingExtraTime=0
s.AsyncLoadingUseFullTimeLimit=0
s.MaxIncomingRequestsToStall=1
s.AsyncLoadingThreadEnabled=True
s.AsyncLoadingThreadEnabled=1
s.IoDispatcherCacheSizeMB=256
s.MaxReadyRequestsToStallMB=0
s.AsyncLoadingTimeLimit=4

[/Script/Engine.GarbageCollectionSettings]
gc.MultithreadedDestructionEnabled=1

[ConsoleVariables]
bOptimizeAnimBlueprintMemberVariableAccess=1
bAllowMultiThreadedAnimationUpdate=1
bAllowMultiThreadedShaderCompile=1
bEnableMultiCoreRendering=1
UseAllCores=1"
AzQjUyK0,Untitled,swte,PHP,Thursday 17th of July 2025 08:02:32 AM CDT,"add_filter('swift3_skip_js_optimization', function($result, $tag){
            if (!empty($tag->attributes['src']) && strpos($tag->attributes['src'], 'faq-schema.min.js') !== false){
                  return true;
            }
            return $result;
      }, 10, 2);"
