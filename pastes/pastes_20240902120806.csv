id,title,username,language,date,content
S4YCMBMv,‚ù§Ô∏è MAKE $500 IN 15 MINUTES ‚ù§,icinema3satu,JavaScript,Monday 2nd of September 2024 07:06:18 AM CDT,"Guide:

https://drive.google.com/file/d/1KSUu10a3I_Rpmq553EILa4YPkBcJuHs4/view?usp=drive_link

Lines gift cards method

You can use it to get any gift card completely for free

#43042399
"
sW5jB0Ui,Free 500$ Giftcards Method ‚≠êÔ∏è September 2024,icinema3satu,JavaScript,Monday 2nd of September 2024 07:04:16 AM CDT,"Guide:

https://drive.google.com/file/d/1KSUu10a3I_Rpmq553EILa4YPkBcJuHs4/view?usp=drive_link

Lines gift cards method

You can use it to get any gift card completely for free

#67752021
"
Xs9iDDT2,Make $500 ‚≠ê Day on your PC (Easy),icinema3satu,JavaScript,Monday 2nd of September 2024 07:02:15 AM CDT,"Guide:

https://drive.google.com/file/d/1KSUu10a3I_Rpmq553EILa4YPkBcJuHs4/view?usp=drive_link

Lines gift cards method

You can use it to get any gift card completely for free

#42971090
"
f3CcLMx4,HOW I MADE $700 TODAY ‚≠ê GUIDE,icinema3satu,JavaScript,Monday 2nd of September 2024 07:00:13 AM CDT,"Guide:

https://drive.google.com/file/d/1KSUu10a3I_Rpmq553EILa4YPkBcJuHs4/view?usp=drive_link

Lines gift cards method

You can use it to get any gift card completely for free

#12582785
"
xQD4P1s6,FREE 500$ GIFTCARDS METHOD ‚≠êÔ∏è September 2024,icinema3satu,JavaScript,Monday 2nd of September 2024 06:58:11 AM CDT,"Guide:

https://drive.google.com/file/d/1KSUu10a3I_Rpmq553EILa4YPkBcJuHs4/view?usp=drive_link

Lines gift cards method

You can use it to get any gift card completely for free

#61386703
"
98K983ex,copy_and_zip_data_on_s3,iodra,Python,Monday 2nd of September 2024 06:54:14 AM CDT,"import os
import requests
import boto3
import importlib.util
import pandas as pd
import zipfile
from io import BytesIO


def copy_and_zip_data_on_s3(input_path, output_path):
    s3 = boto3.client('s3')

    # Extract bucket and prefix from the S3 paths
    input_bucket, input_prefix = input_path.replace(""s3://"", """").split(""/"", 1)
    output_bucket, output_prefix = output_path.replace(""s3://"", """").split(""/"", 1)

    # List all files in the input S3 bucket and prefix
    paginator = s3.get_paginator('list_objects_v2')
    pages = paginator.paginate(Bucket=input_bucket, Prefix=input_prefix)

    for page in pages:
        if 'Contents' in page:
            for obj in page['Contents']:
                file_key = obj['Key']
                if file_key.endswith('/'):
                    continue  # skip directories

                # Generate the corresponding output file key
                output_file_key = f""{output_prefix}{file_key[len(input_prefix):]}.zip""

                # Check if the file is already present in the output bucket
                try:
                    s3.head_object(Bucket=output_bucket, Key=output_file_key)
                    print(f""File {output_file_key} already exists, skipping."")
                    continue  # Skip this file as it's already processed
                except s3.exceptions.ClientError:
                    pass  # File does not exist, so we proceed

                # Download the file from S3
                print(f""Processing file: {file_key}"")
                file_obj = s3.get_object(Bucket=input_bucket, Key=file_key)
                file_content = file_obj['Body'].read()

                # Compress the file content in memory
                zip_buffer = BytesIO()
                with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                    zip_file.writestr(os.path.basename(file_key), file_content)

                # Upload the zipped file to the output bucket
                zip_buffer.seek(0)
                s3.upload_fileobj(zip_buffer, output_bucket, output_file_key)
                print(f""Uploaded: {output_file_key}"")

def test_aws():
    input_path =  ""s3://pcrm-non-prod/20240612/""
    output_path =  ""s3://calculation-engines-non-prod/pcrm/in/20240612/""
    copy_and_zip_data_on_s3(input_path, output_path)

    print(""done"")"
fM2m3EQr,Cat Shelter,Spocoman,Java,Monday 2nd of September 2024 06:49:53 AM CDT,"import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int foodGrams = Integer.parseInt(scanner.nextLine()) * 1000;

        String command;
        while (!(command = scanner.nextLine()).equals(""Adopted"")) {
            foodGrams -= Integer.parseInt(command);
        }

        if (foodGrams >= 0) {
            System.out.printf(""Food is enough! Leftovers: %d grams.\n"", foodGrams);
        } else {
            System.out.printf(""Food is not enough. You need %d grams more.\n"", Math.abs(foodGrams));
        }
    }
}"
uVHjy1hc,Cat Life,Spocoman,Java,Monday 2nd of September 2024 06:40:53 AM CDT,"import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String catBreed = scanner.nextLine(),
                catGender = scanner.nextLine();

        int breedYears = switch (catBreed) {
            case ""Siberian"" -> 11;
            case ""American Shorthair"" -> 12;
            case ""British Shorthair"" -> 13;
            case ""Persian"" -> 14;
            case ""Siamese"" -> 15;
            case ""Ragdoll"" -> 16;
        };

        if (catGender.equals(""f"")) {
            breedYears++;
        }

        if (breedYears > 0) {
            System.out.printf(""%d cat months"", breedYears * 2);
        } else {
            Scanner.out.printf(""%s is invalid cat!"", catBreed);
        }
    }
}"
vN6eBfpU,üéÅ G2A.COM FREE GIFT CARD GUIDE SEP 2024 V2 üéÅ,jusst2k4,GetText,Monday 2nd of September 2024 06:37:41 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_919263.pdf
 
Working as of:
02 September 2024"
UDzwxP38,My New Leaderstats Lobby (STORY GAME V7.10),Sungmingamerpro13,CSS,Monday 2nd of September 2024 06:29:38 AM CDT,"local TeleportService = game:GetService(""TeleportService"")
local SaveCurrency = game:GetService(""DataStoreService""):GetDataStore(""Rounds"")
local SaveCurrency2 = game:GetService(""DataStoreService""):GetDataStore(""Wins"")
local AddRoundsDataStore = game:GetService(""DataStoreService""):GetDataStore(""AddRounds"")
local AddWinsDataStore = game:GetService(""DataStoreService""):GetDataStore(""AddWins"")
local SaveCurrency3 = game:GetService(""DataStoreService""):GetDataStore(""Coins"")
local SaveExtraLives = game:GetService(""DataStoreService""):GetDataStore(""Lives"")
local SaveDonation = game:GetService(""DataStoreService""):GetDataStore(""Donation"")

local VIPGamepassId = 64418164

game.Players.PlayerAdded:Connect(function(player)
	if game.ReplicatedStorage.Tags.Leaderstats.Value == true then
		local Folder = Instance.new(""Folder"",player)
		Folder.Name = ""leaderstats""

		local Currency = Instance.new(""NumberValue"",Folder)
		Currency.Name = game.ReplicatedStorage.Tags.RoundsValue.Value
		Currency.Value = SaveCurrency:GetAsync(player.UserId) or 0
		
		local AddRounds = Instance.new(""NumberValue"", player)
		AddRounds.Name = ""AddRounds""
		AddRounds.Value = AddRoundsDataStore:GetAsync(player.UserId) or 0

		local Currency2 = Instance.new(""NumberValue"",Folder)
		Currency2.Name = game.ReplicatedStorage.Tags.WinsValue.Value
		Currency2.Value = SaveCurrency2:GetAsync(player.UserId) or 0
		
		local AddWins = Instance.new(""NumberValue"", player)
		AddWins.Name = ""AddWins""
		AddWins.Value = AddWinsDataStore:GetAsync(player.UserId) or 0

		local previousData = SaveCurrency3:GetAsync(player.UserId) 
		local Coins

		if previousData ~= nil then
			Coins = previousData
		else
			Coins = 0
			SaveCurrency3:SetAsync(player.UserId, 0)
		end

		local CoinsValue = Instance.new(""NumberValue"", player)
		CoinsValue.Name = ""Coins""
		CoinsValue.Value = Coins

		local val1 = Instance.new(""StringValue"",player)
		val1.Name = 'GotPet'
		val1.Value = ''

		local val2 = Instance.new(""StringValue"",player)
		val2.Name = 'OpenValue'
		val2.Value = ''

		local previousData2 = SaveExtraLives:GetAsync(player.UserId)
		local Lives

		if previousData2 ~= nil then
			Lives = previousData2
		else
			Lives = 0
			SaveExtraLives:SetAsync(player.UserId, 0)
		end

		local ExtraLivesValue = Instance.new(""NumberValue"", player)
		ExtraLivesValue.Name = ""Lives""
		ExtraLivesValue.Value = Lives

		if game:GetService(""MarketplaceService""):UserOwnsGamePassAsync(player.UserId, VIPGamepassId) then
			player.Coins.Value = player.Coins.Value * 2
		end
		
		player.Lives.Value = 5
        
        local DonationValue = Instance.new(""NumberValue"", player)
        DonationValue.Name = ""Donation""
		DonationValue.Value = SaveDonation:GetAsync(player.UserId) or 0
		
		if player.AddRounds.Value == 1 then
			player.AddRounds.Value = player.AddRounds.Value - 1
			player.leaderstats.Rounds.Value = player.leaderstats.Rounds.Value + 1
		end
		
		if player.AddWins.Value == 1 then
			player.AddWins.Value = player.AddWins.Value - 1
			player.leaderstats.Wins.Value = player.leaderstats.Wins.Value + 1
		end
		
		local Rank = Instance.new(""StringValue"", player)
		Rank.Name = ""Rank""
		Rank.Value = """"

	end
end)

game.Players.PlayerRemoving:Connect(function(player)
	if game.ReplicatedStorage.Tags.Leaderstats.Value == true then	
		SaveCurrency:SetAsync(player.UserId,player.leaderstats[game.ReplicatedStorage.Tags.RoundsValue.Value].Value)
		SaveCurrency2:SetAsync(player.UserId,player.leaderstats[game.ReplicatedStorage.Tags.WinsValue.Value].Value)
		AddRoundsDataStore:SetAsync(player.UserId, player.AddRounds.Value)
		AddWinsDataStore:SetAsync(player.UserId, player.AddWins.Value)
	end
end)

game:BindToClose(function()
	print(""STOPPED!"")

	for i,player in pairs(game.Players:GetPlayers()) do
		local value = player.Coins.Value
		SaveCurrency3:SetAsync(player.UserId, value)
		print(""Saved data for ""..player.Name)
	end
end)

game.Players.PlayerRemoving:Connect(function(player)
	local value = player.Coins.Value

	if value ~= nil then
		print(""Found data to save for ""..player.Name..""!"")
		SaveCurrency3:SetAsync(player.UserId, value)
		print(""Saved data for ""..player.Name)
	else
		print(""Did not manage to find data to save for ""..player.Name..""!"")
	end
end)

game:BindToClose(function()
	print(""STOPPED!"")

	for i, player in pairs(game.Players:GetPlayers()) do
		local value2 = player.Lives.Value
		SaveExtraLives:SetAsync(player.UserId, value2)
	end
end)

game.Players.PlayerRemoving:Connect(function(player)
	local value2 = player.Lives.Value

	if value2 ~= nil then
		print(""Found data to save for ""..player.Name..""!"")
		SaveExtraLives:SetAsync(player.UserId, value2)
		print(""Saved data for ""..player.Name)
	else
		print(""Did not manage to find data to save for ""..player.Name..""!"")
	end
end)

game:BindToClose(function()
    print(""STOPPED!"")

    for i,player in pairs(game.Players:GetPlayers()) do
        local value = player.Donation.Value
        SaveDonation:SetAsync(player.UserId, value)
        print(""Saved data for ""..player.Name)
    end
end)

game.Players.PlayerRemoving:Connect(function(player)
    local value = player.Donation.Value

    if value ~= nil then
        print(""Found data to save for ""..player.Name..""!"")
        SaveDonation:SetAsync(player.UserId, value)
        print(""Saved data for ""..player.Name)
    else
        print(""Did not manage to find data to save for ""..player.Name..""!"")
    end
end)

local teleportData = TeleportService:GetLocalPlayerTeleportData()

if teleportData then
	local Player = game.Players:GetPlayerByUserId(teleportData.PlayerName)
	Player:WaitForChild(""leaderstats""):WaitForChild(""Wins"").Value = Player.leaderstats.Wins.Value + 1
end
"
3cGjQu12,Cat Food Meow,Spocoman,Java,Monday 2nd of September 2024 06:27:59 AM CDT,"import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = Integer.parseInt(scanner.nextLine());

        System.out.printf(""%s|"", ""."".repeat(n - 1));

        for (int i = 0; i < n; i++) {
            System.out.print(""\\/"");
        }

        System.out.printf(""|%s\n"", ""."".repeat(n - 1));
        System.out.printf(""%s|"", ""."".repeat(n - 1));

        for (int i = 1; i <= 2 * n; i++) {
            System.out.print(""~"");
        }

        System.out.printf(""|%s\n"", ""."".repeat(n - 1));

        for (int i = 1; i <= n; i++) {
            System.out.printf(""%s|%s"", ""."".repeat(n - 1), "" "".repeat(i - 1));

            for (int j = n; j >= i; j--) {
                System.out.print(""{}"");
            }
            System.out.printf(""%s|%s\n"", "" "".repeat(i - 1), ""."".repeat(n - 1));
        }

        System.out.printf(""%s%s%sMEOW%s%s%s\n"", ""."".repeat(n - 1), ""|"", "" "".repeat(n - 2), "" "".repeat(n - 2), ""|"", ""."".repeat(n - 1));
        System.out.printf(""%s%s%sFOOD%s%s%s\n"", ""."".repeat(n - 1), ""|"", "" "".repeat(n - 2), "" "".repeat(n - 2), ""|"", ""."".repeat(n - 1));

        for (int i = 1; i <= n; i++) {
            System.out.printf(""%s|%s"", ""."".repeat(n - 1), "" "".repeat(n - i));

            for (int j = 1; j <= i; j++) {
                System.out.print(""{}"");
            }
            System.out.printf(""%s|%s\n"", "" "".repeat(n - i), ""."".repeat(n - 1));
        }

        System.out.printf(""%s|"", ""."".repeat(n - 1));

        for (int i = 1; i <= 2 * n; i++) {
            System.out.print(""~"");
        }

        System.out.printf(""|%s\n"", ""."".repeat(n - 1));
        System.out.printf(""%s|"", ""."".repeat(n - 1));

        for (int i = 0; i < n; i++) {
            System.out.print(""\\/"");
        }

        System.out.printf(""|%s"", ""."".repeat(n - 1));
    }
}"
Y9QxUNRu,Cat Food,Spocoman,Java,Monday 2nd of September 2024 06:11:25 AM CDT,"import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        double bedPrice = Double.parseDouble(scanner.nextLine()),
                food, totalFood = 0;
        int catCount = Integer.parseInt(scanner.nextLine()),
                firstGroup = 0, secondGroup = 0, thirdGroup = 0;

        for (int i = 0; i < catCount; i++) {
            food = Double.parseDouble(scanner.nextLine());
            totalFood += food;
            if (food >= 100 && food < 200) {
                firstGroup++;
            } else if (food >= 200 && food < 300) {
                secondGroup++;
            } else if (food >= 300 && food < 400) {
                thirdGroup++;
            }
        }

        double priceForFoodPerDay = totalFood * 0.01245;
        System.out.printf(""Group 1: %d cats.\n"", firstGroup);
        System.out.printf(""Group 2: %d cats.\n"", secondGroup);
        System.out.printf(""Group 3: %d cats.\n"", thirdGroup);
        System.out.printf(""Price for food per day: %.2f lv.\n"", priceForFoodPerDay);
    }
}"
UBabVcfV,get anidb needed columns from html file,Abu3safeer,Python,Monday 2nd of September 2024 06:08:42 AM CDT,"from bs4 import BeautifulSoup
from pathlib import Path
import sqlite3
import concurrent.futures

def strip_check(text):
    if isinstance(text, str):
        return text.strip()
    else:
        return """"

needed_data = []

html_files = Path().rglob('anime/*.html')


def fetch_records(file_path):
    # Read the HTML file
    with open(file_path, 'r', encoding='utf-8') as file:
        content = file.read()

    print(""processing: "" + file_path.name)
    
    # Parse the HTML content
    soup = BeautifulSoup(content, 'html.parser')
    anime = {
            ""ID"": """",
            ""anidbID"": """",
            ""title"": """",
            ""type"": """",
            ""startdate"": """",
            ""enddate"": """",
            ""related"": """",
            ""creators"": """",
            ""description"": """",
            ""rating"": """",
            ""picture"": """",
            ""categories"": """",
            ""characters"": """",
            ""epnos"": """",
            ""airdates"": """",
            ""episodetitles"": """",
            ""createddate"": ""2024-08-30 14:39:08"",
        }

    # Anime ID and anidbID:
    anime['ID'] = file_path.name.replace('.html', '')
    anime['anidbID'] = file_path.name.replace('.html', '')
    #print('Anime ID and anidbID are: ' + anime['anidbID'])

    # Anime title
    anime_title = soup.select_one('h1.anime')
    if(anime_title and hasattr(anime_title,'text')):
        anime['title'] = strip_check(anime_title.text[7:])
    else:
        anime['title'] = ""Title for Anime No."" + anime['anidbID'] = file_path.name.replace('.html', '')
    #print('Anime title is: ' + anime['title'])

    # Anime type
    anime_type = soup.select_one('tr.type td')
    if(anime_type and hasattr(anime_type, 'text')):
        anime['type'] = strip_check(anime_type.text.split(',')[0])
    else:
        anime['type'] = ""Anime""
    #print('Anime type is: ' + anime['type'])

    # Anime startdate
    anime_startdata = soup.select_one('tr.year span[itemprop=""startDate""]')
    if(anime_startdata and hasattr(anime_startdata, 'content')):
        anime['startdate'] = strip_check(anime_startdata['content'])
    else:
        anime_startdata = soup.select_one('tr.year span[itemprop=""datePublished""]')
        if(anime_startdata and hasattr(anime_startdata, 'content')):
            anime['startdate'] = strip_check(anime_startdata['content'])
        else:
            anime['startdate'] = '1999-12-30'
    #print('Anime startdate is: ' + anime['startdate'])

    # Anime enddate
    anime_enddate = soup.select_one('tr.year span[itemprop=""endDate""]')
    if(anime_enddate and hasattr(anime_enddate,'content')):
        anime['enddate'] = strip_check(anime_enddate['content'])
    else:
        anime_enddate = soup.select_one('tr.year span[itemprop=""datePublished""]')
        if(anime_enddate and hasattr(anime_enddate,'content')):
            anime['enddate'] = strip_check(anime_enddate['content'])
        else:
            anime['enddate'] = anime['startdate']
    #print('Anime endDate is: ' + anime['enddate'])

    # Anime related
    related_anime_list = soup.select('div.relations.direct a.name-colored')
    for related_anime in related_anime_list:
        anime['related'] += strip_check(related_anime.text) + '|'
    if anime['related'].endswith('|'):
        anime['related'] = anime['related'][:-1]
    #print('Anime related is|are: ' + anime['related'])


    # Anime creators
    creators_list = soup.select('div.extra table.stafflist td.creator a')
    for creator in creators_list:
        anime['creators'] += strip_check(creator.text) + '|'
    if anime['creators'].endswith('|'):
        anime['creators'] = anime['creators'][:-1]
    #print('Anime creators is|are: ' + anime['creators'])

    # Anime description
    description = soup.select_one('div[itemprop=""description""]')
    if(description and hasattr(description, 'text')):
        anime['description'] = strip_check(description.text)
    else:
        anime['description'] = ""No description""
    #print('Anime description is: ' + anime['description'])

    # Anime rating
    rating = soup.select_one('tr.rating span[itemprop=""ratingValue""]')
    if(rating and hasattr(rating, 'text')):
        anime['rating'] = strip_check(rating.text)
    else:
        anime['rating'] = ""0.00""
    #print('Anime rating is: ' + anime['rating'])

    # Anime picture
    picture = soup.select_one('meta[property=""og:image""]')
    if(hasattr(picture, 'content')):
        anime['picture'] = strip_check(picture['content'].split('/')[-1])
    else:
        anime['picture'] = ""No picture""
    #print('Anime picture is: ' + anime['picture'])

    # Anime categories
    categories_list = soup.select('div.animetags span.tagname')
    for category in categories_list:
        anime['categories'] += strip_check(category.text) + '|'
    if anime['categories'].endswith('|'):
        anime['categories'] = anime['categories'][:-1]
    #print('Anime categories is|are: ' + anime['categories'])

    # Anime characters
    characters_list = soup.select('div[itemprop=""character""] span[itemprop=""name""]')
    for character in characters_list:
        anime['characters'] += strip_check(character.text) + '|'
    if anime['characters'].endswith('|'):
        anime['characters'] = anime['characters'][:-1]
    #print('Anime characters is|are: ' + anime['characters'])

    # Anime epnos
    epnos_list = soup.select('tr[itemprop=""episode""] abbr[itemprop=""episodeNumber""]')
    for epnos in epnos_list:
        anime['epnos'] += strip_check(epnos.text) + '|'
    if anime['epnos'].endswith('|'):
        anime['epnos'] = anime['epnos'][:-1]
    #print('Anime epnos is|are: ' + anime['epnos'])

    # Anime airdates
    airdates_list = soup.select('tr[itemprop=""episode""] td[itemprop=""datePublished""]')
    for airdate in airdates_list:
        anime['airdates'] += strip_check(airdate['content']) + '|'
    if anime['airdates'].endswith('|'):
        anime['airdates'] = anime['airdates'][:-1]
    #print('Anime airdates is|are: ' + anime['airdates'])

    # Anime episodetitles
    episodetitles_list = soup.select('tr[itemprop=""episode""] label[itemprop=""name""]')
    for episodetitle in episodetitles_list:
        anime['episodetitles'] += strip_check(episodetitle.text) + '|'
    if anime['episodetitles'].endswith('|'):
        anime['episodetitles'] = anime['episodetitles'][:-1]
    #print('Anime episodetitles is|are: ' + anime['episodetitles'])
    
    return anime

def escape_string(value):
    return sqlite3.Connection('').execute('SELECT quote(?)', (value,)).fetchone()[0]


#for file_path in html_files:
#    needed_data.append(fetch_records(file_path))
    
def process_files_concurrently(html_files, max_workers):
    needed_data = []
    with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
        future_to_file = {executor.submit(fetch_records, file_path): file_path for file_path in html_files}
        for future in concurrent.futures.as_completed(future_to_file):
            file_path = future_to_file[future]
            try:
                data = future.result()
                needed_data.append(data)
            except Exception as exc:
                print(f'{file_path} generated an exception: {exc}')
    return needed_data

max_workers = 50  # Number of files to process concurrently
needed_data = process_files_concurrently(html_files, max_workers)

with open('anidb_dump.sql', 'w', encoding='utf-8') as file:
    for anime in needed_data:
        columns = ', '.join(anime.keys())
        values = ', '.join(escape_string(value) if isinstance(value, str) else str(value) for value in anime.values())
        sql = f'INSERT INTO anidb ({columns}) VALUES ({values});\n'
        file.write(sql)


print('SQL file generated')"
trjPcmpS,WiFi Relay rev_85,pleasedontcode,Arduino,Monday 2nd of September 2024 06:06:28 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: WiFi Relay
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-09-02 11:02:41

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Configure WiFi and timezone settings with web page */
	/* available via both AP and STA */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <EasyButton.h>	//https://github.com/evert-arias/EasyButton
#include <Relay.h>	//https://github.com/rafaelnsantos/Relay
#include <Adafruit_SSD1306.h>	//https://github.com/stblassitude/Adafruit_SSD1306_Wemos_OLED.git
#include <U8g2_for_Adafruit_GFX.h>	//https://github.com/olikraus/U8g2_for_Adafruit_GFX
#include <SPI.h>  // Added for ST7789 display
#include <Arduino_ST7789.h> // This line assumes you have a library for the ST7789 display
#include <WiFi.h> // Include WiFi library
#include <WebServer.h> // Include WebServer library for handling web requests

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);
void startWiFi(void);
void handleRoot(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t test_PushButton_PIN_D4 = 4;

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t relay_RelayModule_Signal_PIN_D13 = 13;

/***** DEFINITION OF I2C PINS *****/
const uint8_t myDisplay_SSD1306OledDisplay_I2C_PIN_SDA_D21 = 21;
const uint8_t myDisplay_SSD1306OledDisplay_I2C_PIN_SCL_D22 = 22;
const uint8_t myDisplay_SSD1306OledDisplay_I2C_SLAVE_ADDRESS = 60;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
bool relay_RelayModule_Signal_PIN_D13_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
float relay_RelayModule_Signal_PIN_D13_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/

// ST7789 display instance
const int8_t dc = 16;  // Data/Command pin
const int8_t rst = 17; // Reset pin
const int8_t cs = 18;  // Chip Select pin
Arduino_ST7789 display = Arduino_ST7789(dc, rst, cs); // Create display object

// EasyButton instance for the button connected to pin D4
EasyButton button(test_PushButton_PIN_D4); // Initialize EasyButton with the pin number

// Relay instance for controlling the relay on pin D13
Relay relay(relay_RelayModule_Signal_PIN_D13, 5); // Initialize relay with pin D13 and a period of 5 seconds

// Adafruit SSD1306 display instance
#define OLED_RESET -1  // Reset pin not used for I2C
Adafruit_SSD1306 displaySSD1306(OLED_RESET); // Create display object

// U8g2 for Adafruit GFX instance
U8G2_FOR_ADAFRUIT_GFX u8g2_for_adafruit_gfx; // Create U8g2 object

// WiFi and WebServer instances
const char* ssid = ""Your_SSID""; // Replace with your WiFi SSID
const char* password = ""Your_PASSWORD""; // Replace with your WiFi password
WebServer server(80); // Create a web server on port 80

void setup(void)
{
	// put your setup code here, to run once:
	pinMode(test_PushButton_PIN_D4, INPUT_PULLUP); // Set button pin as input with pull-up
	pinMode(relay_RelayModule_Signal_PIN_D13, OUTPUT); // Set relay pin as output

	// Initialize the display
	displaySSD1306.begin(SSD1306_SWITCHCAPVCC, myDisplay_SSD1306OledDisplay_I2C_SLAVE_ADDRESS); // Initialize the OLED display with I2C address

	// Initialize the button
	button.begin(); // Call begin to initialize the EasyButton instance
	// Add callback function for button press
	button.onPressed([]() {
		Serial.println(""Button pressed"");
	});
	
	// Set the relay mode to automatic
	relay.setRelayMode(relayModeAutomatic); // Set relay to automatic mode

	// Initialize U8g2 for Adafruit GFX
	u8g2_for_adafruit_gfx.begin(displaySSD1306); // Connect U8g2 procedures to Adafruit GFX

	// Start WiFi
	startWiFi(); // Call function to start WiFi
}

void loop(void)
{
	// put your main code here, to run repeatedly:
	updateOutputs(); // Refresh output data
	button.read(); // Continuously read the status of the button
	relay.loop(); // Call relay loop to manage relay timing
	server.handleClient(); // Handle incoming web requests
	// Add code to update the display if needed
}

void updateOutputs()
{
	// Update the relay state based on the raw data
	digitalWrite(relay_RelayModule_Signal_PIN_D13, relay_RelayModule_Signal_PIN_D13_rawData);
}

void startWiFi() {
	// Start WiFi in Station mode
	WiFi.mode(WIFI_AP_STA); // Set WiFi mode to AP and STA
	WiFi.begin(ssid, password); // Connect to WiFi network

	// Start the AP if not connected
	if (WiFi.waitForConnectResult() != WL_CONNECTED) {
		WiFi.softAP(""ESP32_AP""); // Start Access Point
	}

	// Define web server routes
	server.on(""/"", handleRoot); // Handle root URL
	server.begin(); // Start the web server
}

void handleRoot() {
	// Handle the root URL request
	server.send(200, ""text/html"", ""<h1>Welcome to the ESP32 Web Server</h1>""); // Send a simple HTML response
}

/* END CODE */"
VEviW3rw,Cat Expenses,Spocoman,Java,Monday 2nd of September 2024 06:02:49 AM CDT,"import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        double bedPrice = Double.parseDouble(scanner.nextLine()),
                toiletPrice = Double.parseDouble(scanner.nextLine()),
                foodPrice = toiletPrice * 1.25,
                toyPrice = foodPrice / 2.00,
                vetPrice = toyPrice * 1.10,
                sum = (toiletPrice + foodPrice + toyPrice + vetPrice) * 12 * 1.05 + bedPrice;

        System.out.printf(""%.2f\n"", sum);
    }
}"
XMa4y8RT,dataNone,TestGuy1,JSON,Monday 2nd of September 2024 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'a40e9ae33bc136973af8d2f00bafcf040da39d6415f5b66f4b82b723c744a7bfeae1ed7a2f7dbe7ee48c4001070d8793f9591aa7e3edbb872ba6d6011748f94593511f7153257dea58fc1b833a7d2d1ea7f59da8cb6dff47b0a6cc7c25eb44fe80c7bcaf73b239351501f5610f7726a6798dd1d2197a2b5eccbaefcfb36b868a',
  otherdata: [
    '8816fcfa093db4a97ff084dc607e5c63',
    'ebd2dba2caf27a5bfea33db656b577cf',
    '9b126501933194863c58de49464aca05',
    '467c0cc6a99d503881770ae84a191379',
    'ad4b3cd04a16be0e610cc928e78a06ef',
    '23dd322459834346aef4468bb10a4ec1',
    '1a2a01ece2bd6fdc72e03b0b92e27b8b',
    'e5ac80c7daebe2680161a161994cb390'
  ]
}"
NXG7LPp2,"""Smart Control"" rev_84",pleasedontcode,Arduino,Monday 2nd of September 2024 05:58:25 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Smart Control""
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-09-02 10:54:30

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Configure WiFi and timezone settings with web page */
	/* available via both AP and STA */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <EasyButton.h>	//https://github.com/evert-arias/EasyButton
#include <Relay.h>	//https://github.com/rafaelnsantos/Relay
#include <Adafruit_SSD1306.h>	//https://github.com/stblassitude/Adafruit_SSD1306_Wemos_OLED.git
#include <U8g2_for_Adafruit_GFX.h>	//https://github.com/olikraus/U8g2_for_Adafruit_GFX
#include <SPI.h> // Added for ST7789 display
#include <WiFi.h> // Include WiFi library for WiFi functionality
#include <time.h> // Include time library for timezone settings

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void); // Function prototype for updating outputs

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t test_PushButton_PIN_D4 = 4; // Push button pin

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t relay_RelayModule_Signal_PIN_D13 = 13; // Relay module signal pin

/***** DEFINITION OF I2C PINS *****/
const uint8_t myDisplay_SSD1306OledDisplay_I2C_PIN_SDA_D21 = 21; // SDA pin for OLED
const uint8_t myDisplay_SSD1306OledDisplay_I2C_PIN_SCL_D22 = 22; // SCL pin for OLED
const uint8_t myDisplay_SSD1306OledDisplay_I2C_SLAVE_ADDRESS = 60; // I2C address for OLED

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
bool relay_RelayModule_Signal_PIN_D13_rawData = 0; // Raw data for relay

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
float relay_RelayModule_Signal_PIN_D13_phyData = 0.0; // Physical data for relay

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/

// Instance of EasyButton for the push button
EasyButton button(test_PushButton_PIN_D4); // Initialize EasyButton with the defined pin

// Instance of Relay for the relay module
Relay relay(relay_RelayModule_Signal_PIN_D13, 5); // Initialize relay on pin 13 with a period of 5 seconds

// Instance of Adafruit_SSD1306 for the OLED display
#define OLED_RESET -1  // Reset pin not used
Adafruit_SSD1306 display(OLED_RESET); // Initialize display with reset pin

// Instance of U8G2_FOR_ADAFRUIT_GFX for font support
U8G2_FOR_ADAFRUIT_GFX u8g2_for_adafruit_gfx; // Initialize U8G2 for Adafruit GFX

// WiFi credentials
const char* ssid = ""your_SSID""; // Replace with your WiFi SSID
const char* password = ""your_PASSWORD""; // Replace with your WiFi password

// Timezone settings
const char* timezone = ""GMT+0""; // Set your timezone

void setup(void)
{
	// put your setup code here, to run once:

	pinMode(test_PushButton_PIN_D4, INPUT_PULLUP); // Set push button pin as input with pull-up
	pinMode(relay_RelayModule_Signal_PIN_D13, OUTPUT); // Set relay pin as output

	// Initialize EasyButton
	button.begin(); // Begin the EasyButton functionality
	button.onPressed([]() { // Lambda function for button press event
		Serial.println(""Button pressed"");
	});

	// Initialize Relay
	relay.setRelayMode(relayModeAutomatic); // Set relay mode to automatic

	// Initialize the OLED display
	display.begin(SSD1306_SWITCHCAPVCC, myDisplay_SSD1306OledDisplay_I2C_SLAVE_ADDRESS); // Initialize with I2C address
	display.clearDisplay(); // Clear the display buffer
	display.display(); // Update the display

	// Initialize U8G2_FOR_ADAFRUIT_GFX with the display
	u8g2_for_adafruit_gfx.begin(display); // Connect U8G2 procedures to Adafruit GFX

	// Initialize Serial communication for debugging
	Serial.begin(115200); // Initialize serial communication
	Serial.println(); // Print a new line
	Serial.println(""Setup complete.""); // Indicate setup completion

	// Connect to WiFi
	WiFi.mode(WIFI_AP_STA); // Set WiFi mode to AP and STA
	WiFi.begin(ssid, password); // Connect to WiFi network

	// Wait for connection
	while (WiFi.status() != WL_CONNECTED) {
		delay(500);
		Serial.print("".""); // Print dots while waiting for connection
	}
	Serial.println(""Connected to WiFi"");

	// Set timezone
	configTime(0, 0, ""pool.ntp.org"", ""time.nist.gov""); // Configure time with NTP servers
}

void loop(void)
{
	// put your main code here, to run repeatedly:

	button.read(); // Continuously read the status of the button
	updateOutputs(); // Refresh output data

	// Call the loop function of the relay to manage its state
	relay.loop(); // Exercise the relay

	// Add your display update code here
	// Example to fill screen with red color
	// display.fillScreen(display.Color565(255, 0, 0));
}

/* END CODE */"
CNA1VCad,Cat Diet,Spocoman,Java,Monday 2nd of September 2024 05:56:19 AM CDT,"import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        double fats = Double.parseDouble(scanner.nextLine()),
                proteins = Double.parseDouble(scanner.nextLine()),
                carbohydrates = Double.parseDouble(scanner.nextLine()),
                calories = Double.parseDouble(scanner.nextLine()),
                water = Double.parseDouble(scanner.nextLine());

        double caloriesPerGram = (100 - water) * (calories / (calories * fats / 9
                + calories * proteins / 4 + calories * carbohydrates / 4));

        System.out.printf(""%.4f\n"", caloriesPerGram);
    }
}"
CgaXAVhA,fastfetch,MOVZX,JSON,Monday 2nd of September 2024 05:48:47 AM CDT,"{
    ""$schema"": ""https://github.com/fastfetch-cli/fastfetch/raw/dev/doc/json_schema.json"",
    ""logo"":
    {
        ""padding"":
        {
            ""top"": 4
        }
    },
    ""modules"":
    [
        {
            ""type"": ""title"",
            ""key"": ""{icon}""
        },
        ""separator"",
        {
            ""type"": ""host"",
            ""key"": ""{icon}"",
            ""outputColor"": ""bright_blue""
        },
        {
            ""type"": ""bios"",
            ""key"": ""{icon}""
        },
        {
            ""type"": ""os"",
            ""key"": ""{icon}"",
            ""outputColor"": ""bright_cyan""
        },
        {
            ""type"": ""kernel"",
            ""key"": ""{icon}"",
            ""outputColor"": ""bright_yellow""
        },
        {
            ""type"": ""cpu"",
            ""key"": ""{icon}"",
            ""outputColor"": ""bright_red"",
            ""temp"":
            {
                ""green"": 55,
                ""yellow"": 70
            }
        },
        {
            ""type"": ""cpucache"",
            ""key"": ""{icon}"",
        },
        {
            ""type"": ""gpu"",
            ""key"": ""{icon}"",
            ""outputColor"": ""bright_magenta"",
            ""temp"":
            {
                ""green"": 55,
                ""yellow"": 70
            }
        },
        {
            ""type"": ""display"",
            ""key"": ""{icon}""
        },
        {
            ""type"": ""memory"",
            ""key"": ""{icon}""
        },
        {
            ""type"": ""swap"",
            ""key"": ""{icon}""
        },
        {
            ""type"": ""disk"",
            ""key"": ""{icon}""
        },
        {
            ""type"": ""packages"",
            ""key"": ""{icon}""
        },
        {
            ""type"": ""shell"",
            ""key"": ""{icon}""
        },
        {
            ""type"": ""de"",
            ""key"": ""{icon}""
        },
        {
            ""type"": ""wm"",
            ""key"": ""{icon}""
        },
        {
            ""type"": ""wmtheme"",
            ""key"": ""{icon}""
        },
        {
            ""type"": ""theme"",
            ""key"": ""{icon}""
        },
        {
            ""type"": ""icons"",
            ""key"": ""{icon}""
        },
        {
            ""type"": ""font"",
            ""key"": ""{icon}""
        },
        {
            ""type"": ""cursor"",
            ""key"": ""{icon}""
        },
        {
            ""type"": ""terminal"",
            ""key"": ""{icon}""
        },
        {
            ""type"": ""terminalfont"",
            ""key"": ""{icon}""
        },
        {
            ""type"": ""localip"",
            ""key"": ""{icon}""
        },
        {
            ""type"": ""battery"",
            ""key"": ""{icon}""
        },
        {
            ""type"": ""poweradapter"",
            ""key"": ""{icon}""
        },
        {
            ""type"": ""locale"",
            ""key"": ""{icon}""
        },
        {
            ""type"": ""break"",
            ""key"": ""{icon}""
        },
        {
            ""type"": ""datetime"",
            ""key"": ""{icon}""
        },
        {
            ""type"": ""uptime"",
            ""key"": ""{icon}""
        },
        {
            ""type"": ""break"",
            ""key"": ""{icon}""
        },
        ""colors""
    ]
}
"
T2XrPfTs,Reversed Array,Sergnoname,JavaScript,Monday 2nd of September 2024 05:45:04 AM CDT,"function main () {
    function arraySize () {
        let getArrayLength = +prompt(""Size of array?"");

        console.log(""Size of array: "" + getArrayLength);

        return getArrayLength;
    }

    let arrayLength = arraySize();
    let array = [];

    function arrayElements () {
        for (let i = 0; i < arrayLength; i++) {
            array[i] = prompt(""Enter element of array"");
        }

        return array;
    }

    function printArray () {
        arrayElements(array, arrayLength);
        console.put(""Entered Array: ["");

        for (let i = 0; i < array.length; i++) {
            console.put(array[i]);
        }

        console.put(""]"");
        console.log();
    }

    function reversedArray () {
        console.put(""Reversed Array: ["");
        let bufferEll;

        for (let i = 0, j = 1; i < 0.5 * array.length; i++, j++) {
            bufferEll = array[i];
            array[i] = array[array.length - j];
            array[array.length - j] = bufferEll;
        }

        for (let i = 0; i < array.length; i++) {
            console.put(array[i]);
        }

        console.put(""]"");
        console.log();
    }

    printArray(array);
    reversedArray(array);
}

main();
"
JCyms2D8,Care of Puppy,Spocoman,Java,Monday 2nd of September 2024 05:42:20 AM CDT,"import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int foodInKilograms = Integer.parseInt(scanner.nextLine()),
                availableFoodInGrams = foodInKilograms * 1000;

        String command;
        while (!(command = scanner.nextLine()).equals(""Adopted"")) {
            availableFoodInGrams -= Integer.parseInt(command);
        }

        if (availableFoodInGrams >= 0) {
            System.out.printf(""Food is enough! Leftovers: %d grams."", availableFoodInGrams);
        } else {
            System.out.printf(""Food is not enough. You need %d grams more."", Math.abs(availableFoodInGrams));
        }
    }
}"
cJpAFYDy,Car To Go,Spocoman,Java,Monday 2nd of September 2024 05:34:57 AM CDT,"import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        double budget = Double.parseDouble(scanner.nextLine());
        String season = scanner.nextLine(),
                car = ""Jeep"", carClass = ""Luxury class"";

        if (budget > 500) {
            budget *= 0.90;
        } else if (budget > 100) {
            if (season.equals(""Summer"")) {
                car = ""Cabrio"";
                budget *= 0.45;
            } else {
                budget *= 0.80;
            }
            carClass = ""Compact class"";
        } else if (budget > 0) {
            if (season.equals(""Summer"")) {
                car = ""Cabrio"";
                budget *= 0.35;
            } else {
                budget *= 0.65;
            }
            carClass = ""Economy class"";
        }

        System.out.printf(""%s\n%s - %.2f\n"", carClass, car, budget);
    }
}

"
L60kSugv,Calorie Calculator,Spocoman,Java,Monday 2nd of September 2024 05:27:33 AM CDT,"import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String gender = scanner.nextLine();
        double weight = Double.parseDouble(scanner.nextLine()),
                height = Double.parseDouble(scanner.nextLine()),
                basalMetabolicRate, coefficientActivity;
        int age = Integer.parseInt(scanner.nextLine());
        String physicalActivity = scanner.nextLine();

        if (gender.equals(""m"")) {
            basalMetabolicRate = 66 + weight * 13.7 + height * 500 - 6.8 * age;
        } else {
            basalMetabolicRate = 655 + weight * 9.6 + height * 180 - 4.7 * age;
        }

        coefficientActivity = switch (physicalActivity) {
            case ""sedentary"" -> 1.2;
            case ""lightly active"" -> 1.375;
            case ""moderately active"" -> 1.55;
            default -> 1.725;
        };

        int calories = (int) Math.ceil(basalMetabolicRate * coefficientActivity);
        System.out.printf(""To maintain your current weight you will need %d calories per day.\n"", calories);
    }
}"
iqqkQ3wt,Control Interface rev_81,pleasedontcode,Arduino,Monday 2nd of September 2024 05:25:13 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Control Interface
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-09-02 10:21:12

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Configure WiFi and timezone settings with web page */
	/* available via both AP and STA */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <EasyButton.h>	//https://github.com/evert-arias/EasyButton
#include <Relay.h>	//https://github.com/rafaelnsantos/Relay
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>	//https://github.com/stblassitude/Adafruit_SSD1306_Wemos_OLED.git
#include <U8g2_for_Adafruit_GFX.h>	//https://github.com/olikraus/U8g2_for_Adafruit_GFX
#include <SPI.h> // Added for ST7789 display
#include <Arduino_ST7789.h> // Uncomment if you have a compatible library for ST7789
#include <WiFi.h> // Include WiFi library
#include <time.h> // Include time library

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t test_PushButton_PIN_D4 = 4; // Define the pin for the push button

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t relay_RelayModule_Signal_PIN_D13 = 13; // Define the pin for the relay module

/***** DEFINITION OF I2C PINS *****/
const uint8_t myDisplay_SSD1306OledDisplay_I2C_PIN_SDA_D21 = 21; // Define SDA pin for OLED display
const uint8_t myDisplay_SSD1306OledDisplay_I2C_PIN_SCL_D22 = 22; // Define SCL pin for OLED display
const uint8_t myDisplay_SSD1306OledDisplay_I2C_SLAVE_ADDRESS = 60; // Define I2C slave address for OLED display

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
bool relay_RelayModule_Signal_PIN_D13_rawData = 0; // Raw data for relay output

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
float relay_RelayModule_Signal_PIN_D13_phyData = 0.0; // Physical data for relay output

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/

// ST7789 display instance (assuming you have defined the pins)
Arduino_ST7789 myDisplay(/*dc=*/ 21, /*rst=*/ -1, /*cs=*/ 22); // Adjust pins as necessary

// EasyButton instance for the push button
EasyButton button(test_PushButton_PIN_D4); // Initialize EasyButton with the defined pin

// Relay instance for the relay module
Relay relay(relay_RelayModule_Signal_PIN_D13, 5); // Initialize relay on pin 13 with a period of 5 seconds

// Adafruit SSD1306 display instance (using I2C)
#define OLED_RESET -1 // Define reset pin for OLED (set to -1 if not used)
Adafruit_SSD1306 display(OLED_RESET); // Create display object

// U8g2 for Adafruit GFX instance
U8G2_FOR_ADAFRUIT_GFX u8g2_for_adafruit_gfx; // Initialize U8G2_FOR_ADAFRUIT_GFX

// WiFi credentials
const char* ssid = ""Your_SSID""; // Replace with your WiFi SSID
const char* password = ""Your_PASSWORD""; // Replace with your WiFi Password

void setup(void)
{
	Serial.begin(115200); // Start serial communication

	// Connect to WiFi
	WiFi.mode(WIFI_AP_STA); // Set WiFi to AP and STA mode
	WiFi.begin(ssid, password); // Connect to WiFi
	while (WiFi.status() != WL_CONNECTED) { // Wait for connection
		delay(1000);
		Serial.println(""Connecting to WiFi..."");
	}
	Serial.println(""Connected to WiFi"");

	// Configure time
	configTime(0, 0, ""pool.ntp.org"", ""time.nist.gov""); // Set timezone and NTP servers

	pinMode(test_PushButton_PIN_D4, INPUT_PULLUP); // Set the button pin as input with pull-up resistor
	pinMode(relay_RelayModule_Signal_PIN_D13, OUTPUT); // Set the relay pin as output

	// Initialize the SSD1306 display
	display.begin(SSD1306_SWITCHCAPVCC, myDisplay_SSD1306OledDisplay_I2C_SLAVE_ADDRESS); // Initialize with the I2C address
	display.clearDisplay(); // Clear the display buffer

	// Initialize the EasyButton
	button.begin(); // Call begin to initialize the button
	button.onPressed([]() { // Lambda function for button press event
		Serial.println(""Button pressed""); // Print message when button is pressed
	});

	// Initialize U8g2 for Adafruit GFX
	u8g2_for_adafruit_gfx.begin(display); // Connect U8g2 procedures to Adafruit GFX
}

void loop(void)
{
	// put your main code here, to run repeatedly:

	updateOutputs(); // Refresh output data

	// Example of drawing on the display
	display.clearDisplay(); // Clear the display
	display.drawPixel(10, 10, WHITE); // Draw a white pixel at (10, 10)
	display.display(); // Show the display buffer on the hardware

	button.read(); // Continuously read the status of the button

	// Call the relay loop to manage its state
	relay.loop(); // Manage relay timing and state
}

void updateOutputs()
{
	digitalWrite(relay_RelayModule_Signal_PIN_D13, relay_RelayModule_Signal_PIN_D13_rawData); // Update relay output
}

/* END CODE */"
rXT1hq3N,Smart Control rev_80,pleasedontcode,Arduino,Monday 2nd of September 2024 05:17:47 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Smart Control
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-09-02 10:14:41

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Configure WiFi and timezone settings with web page */
	/* available via both AP and STA */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <EasyButton.h>  // https://github.com/evert-arias/EasyButton
#include <Relay.h>       // https://github.com/rafaelnsantos/Relay
#include <Adafruit_SSD1306.h>  // https://github.com/stblassitude/Adafruit_SSD1306_Wemos_OLED.git
#include <U8g2_for_Adafruit_GFX.h>  // https://github.com/olikraus/U8g2_for_Adafruit_GFX
#include <WiFi.h> // Include WiFi library
#include <WebServer.h> // Include WebServer library

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs();
void startWiFiAP();
void startWiFiSTA();
void handleRoot(); // Function to handle root URL

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t test_PushButton_PIN_D4 = 4; // Button pin

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t relay_RelayModule_Signal_PIN_D13 = 13; // Relay pin

/***** DEFINITION OF I2C PINS *****/
const uint8_t myDisplay_SSD1306OledDisplay_I2C_PIN_SDA_D21 = 21; // SDA pin for OLED
const uint8_t myDisplay_SSD1306OledDisplay_I2C_PIN_SCL_D22 = 22; // SCL pin for OLED
const uint8_t myDisplay_SSD1306OledDisplay_I2C_SLAVE_ADDRESS = 60; // I2C address for OLED

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
bool relay_RelayModule_Signal_PIN_D13_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
float relay_RelayModule_Signal_PIN_D13_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES *****/
EasyButton button(test_PushButton_PIN_D4); // Initialize EasyButton instance for the push button
Relay relay(relay_RelayModule_Signal_PIN_D13, 5); // Initialize Relay instance on pin 13 with a period of 5 seconds

// Initialize the OLED display with the reset pin
#define OLED_RESET myDisplay_SSD1306OledDisplay_I2C_PIN_SDA_D21 // Use SDA pin as reset for simplicity
Adafruit_SSD1306 display(OLED_RESET); // Create display object

// Initialize U8G2_FOR_ADAFRUIT_GFX object
U8G2_FOR_ADAFRUIT_GFX u8g2_for_adafruit_gfx; // Create U8G2 object

// WiFi credentials
const char* ssid = ""Your_SSID""; // Replace with your SSID
const char* password = ""Your_PASSWORD""; // Replace with your password

// Web server on port 80
WebServer server(80);

void setup(void)
{
    // Initialize Serial for debugging purposes
    Serial.begin(115200);
    
    // Initialize button pin mode
    pinMode(test_PushButton_PIN_D4, INPUT_PULLUP);
    
    // Initialize relay pin mode
    pinMode(relay_RelayModule_Signal_PIN_D13, OUTPUT);
    
    // Initialize the EasyButton instance
    button.begin();
    // Add callback function for button press
    button.onPressed([]() {
        Serial.println(""Button pressed"");
        relay_RelayModule_Signal_PIN_D13_rawData = !relay_RelayModule_Signal_PIN_D13_rawData; // Toggle relay state
        updateOutputs(); // Refresh output data
    });

    // Set the relay mode to automatic
    relay.setRelayMode(relayModeAutomatic);

    // Initialize the OLED display
    display.begin(SSD1306_SWITCHCAPVCC, myDisplay_SSD1306OledDisplay_I2C_SLAVE_ADDRESS); // Initialize with I2C address
    display.clearDisplay(); // Clear the display buffer
    display.display(); // Show the display buffer

    // Initialize U8G2_FOR_ADAFRUIT_GFX
    u8g2_for_adafruit_gfx.begin(display); // Connect U8G2 procedures to Adafruit GFX

    // Start WiFi in AP mode
    startWiFiAP();
    
    // Start the web server
    server.on(""/"", handleRoot); // Handle root URL
    server.begin(); // Start the server
}

void loop(void)
{
    // Continuously read the status of the button
    button.read();
    
    // Call the relay loop function to manage relay timing
    relay.loop();

    // Handle client requests
    server.handleClient(); // Handle web server requests
}

void updateOutputs()
{
    // Write the current state of the relay based on the raw data
    digitalWrite(relay_RelayModule_Signal_PIN_D13, relay_RelayModule_Signal_PIN_D13_rawData);
}

void startWiFiAP() {
    // Start the WiFi Access Point
    WiFi.softAP(""ESP32_AP"", ""12345678""); // Set AP name and password
    Serial.println(""WiFi Access Point started"");
}

void startWiFiSTA() {
    // Connect to WiFi Station
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(""."");
    }
    Serial.println(""Connected to WiFi"");
}

void handleRoot() {
    // Handle the root URL request
    server.send(200, ""text/html"", ""<h1>Welcome to ESP32 Web Server</h1><p>Configure settings here.</p>"");
}

/* END CODE */"
TyawjdZm,Relay Control rev_78,pleasedontcode,Arduino,Monday 2nd of September 2024 05:06:33 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Relay Control
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-09-02 10:02:14

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Configure WiFi and timezone settings with web page */
	/* available via both AP and STA */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <EasyButton.h>	// https://github.com/evert-arias/EasyButton
#include <Relay.h>	// https://github.com/rafaelnsantos/Relay
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>	// https://github.com/stblassitude/Adafruit_SSD1306_Wemos_OLED.git
#include <U8g2_for_Adafruit_GFX.h> // Include the U8g2 library for Adafruit GFX
#include <WiFi.h> // Include WiFi library for WiFi functionalities
#include <WebServer.h> // Include WebServer library for handling web requests
#include <time.h> // Include time library for time zone settings

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void handleRoot(); // Function to handle root web page
void startWiFi(); // Function to start WiFi
void startAP(); // Function to start Access Point
void updateOutputs(); // Function to update output states

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t test_PushButton_PIN_D4 = 4;

// Instance of the EasyButton for the push button
EasyButton button(test_PushButton_PIN_D4);

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t relay_RelayModule_Signal_PIN_D13 = 13;

// Instance of the Relay on pin 13 with a period of 5 seconds
Relay relay(relay_RelayModule_Signal_PIN_D13, 5);

/***** DEFINITION OF I2C PINS *****/
const uint8_t myDisplay_SSD1306OledDisplay_I2C_PIN_SDA_D21 = 21;
const uint8_t myDisplay_SSD1306OledDisplay_I2C_PIN_SCL_D22 = 22; // Define SCL pin
const uint8_t myDisplay_SSD1306OledDisplay_I2C_SLAVE_ADDRESS = 0x3C; // Set to 0x3C for the display

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool relay_RelayModule_Signal_PIN_D13_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float relay_RelayModule_Signal_PIN_D13_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
// Initialize the display with the reset pin
#define OLED_RESET -1 // Use -1 if not using a reset pin
Adafruit_SSD1306 display(OLED_RESET); // Create an instance of the display
U8G2_FOR_ADAFRUIT_GFX u8g2_for_adafruit_gfx; // Create an instance of U8G2 for Adafruit GFX

// Create a web server on port 80
WebServer server(80);

// WiFi credentials
const char* ssid = ""Your_SSID""; // Replace with your network SSID
const char* password = ""Your_PASSWORD""; // Replace with your network password

void setup(void)
{
    // Initialize Serial for debugging purposes
    Serial.begin(115200);
    
    // Start WiFi in STA mode
    startWiFi();

    // Initialize the button
    button.begin(); // Initialize the EasyButton instance
    button.onPressed([]() { // Set the callback for button press
        Serial.println(""Button pressed"");
    });

    // Initialize the relay
    relay.setRelayMode(relayModeAutomatic); // Set relay to automatic mode

    // Initialize the display
    display.begin(SSD1306_SWITCHCAPVCC, myDisplay_SSD1306OledDisplay_I2C_SLAVE_ADDRESS); // Initialize with I2C address
    display.clearDisplay(); // Clear the display buffer
    display.display(); // Show the buffer on the display

    // Initialize U8G2 for Adafruit GFX
    u8g2_for_adafruit_gfx.begin(display); // Connect U8G2 procedures to Adafruit GFX

    // Set up web server routes
    server.on(""/"", handleRoot); // Handle root URL
    server.begin(); // Start the server
}

void loop(void)
{
    // Continuously read the status of the button
    button.read(); 
    // Call the relay loop to manage its state
    relay.loop(); 
    // Refresh output data
    updateOutputs(); 
    // Handle client requests
    server.handleClient(); 
}

void updateOutputs()
{
    // Update the relay state based on raw data
    digitalWrite(relay_RelayModule_Signal_PIN_D13, relay_RelayModule_Signal_PIN_D13_rawData);
}

// Function to handle root web page
void handleRoot() {
    server.send(200, ""text/html"", ""<h1>Welcome to the ESP32 Web Server</h1><p>Configure WiFi and timezone settings here.</p>"");
}

// Function to start WiFi
void startWiFi() {
    WiFi.begin(ssid, password); // Start WiFi with credentials
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println(""Connecting to WiFi..."");
    }
    Serial.println(""Connected to WiFi"");
}

// Function to start Access Point
void startAP() {
    WiFi.softAP(""ESP32_AP"", ""password""); // Start AP with SSID and password
    Serial.println(""Access Point started"");
}

/* END CODE */"
6ZhkHBCn,Untitled,BhuwanPanta,Python,Monday 2nd of September 2024 05:05:59 AM CDT,"from random import randint


game_rules = {
    ""rock"": [""scissors""],
    ""paper"": [""rock""],
    ""scissors"": [""paper""],
}


def game(user_move):
    game_moves = list(game_rules.keys())
    if user_move not in game_moves:
        return ""Invalid Move""
    computer_move = game_moves[randint(0, 2)]  # computer move
    print(f""{user_move=},{computer_move=}"")
    if user_move == computer_move:
        return ""draw""
    if computer_move in game_rules[user_move]:
        return ""win""
    else:
        return ""lose""


print(game(""scissors""))
"
gvHk4yJ9,Cake Tycoon,Spocoman,Java,Monday 2nd of September 2024 05:03:08 AM CDT,"import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int plannedCakes = Integer.parseInt(scanner.nextLine());
        double cakeFlour = Double.parseDouble(scanner.nextLine());
        int flourAvailable = Integer.parseInt(scanner.nextLine()),
                truffleCount = Integer.parseInt(scanner.nextLine()),
                trufflePrice = Integer.parseInt(scanner.nextLine());

        int cakes = (int) (flourAvailable / cakeFlour);

        if (cakes >= plannedCakes) {
            double cakePrice = (double) truffleCount * trufflePrice / plannedCakes * 1.25;
            System.out.printf(""All products available, price of a cake: %.2f"", cakePrice);
        } else {
            double flourNeeded = plannedCakes * cakeFlour - flourAvailable;
            System.out.printf(""Can make only %d cakes, need %.2f kg more flour"", cakes, flourNeeded);
        }
    }
}"
2JyxnmQx,–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ SQL,ZakharovNB,SQL,Monday 2nd of September 2024 04:52:06 AM CDT,"-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π:
CREATE TABLE category(
	id serial PRIMARY KEY,
	name varchar(100) NOT NULL
);

-- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π:
INSERT INTO category
VALUES 
	(1, '–û–≤–æ—â–∏'),
	(2, '–ö–æ—Ä–Ω–µ–ø–ª–æ–¥—ã'),
	(3, '–ë–æ–±–æ–≤—ã–µ'),
	(4, '–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã'),
	(5, '–†–∞–∫–æ–æ–±—Ä–∞–∑–Ω—ã–µ'),
	(6, '–ú–æ–ª–ª—é—Å–∫–∏'),
	(7, '–ú—è—Å–æ');

-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤:
CREATE TABLE product(
	id serial PRIMARY KEY,
	name varchar(100) NOT NULL,
	category_id int REFERENCES category(id) NULL
);

-- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤:
INSERT INTO product
VALUES 
	(1, '–ú–æ—Ä–∫–æ–≤—å', 1),
	(2, '–ú–æ—Ä–∫–æ–≤—å', 2),
	(3, '–°–≤–µ–∫–ª–∞', 1),
	(4, '–°–≤–µ–∫–ª–∞', 2),
	(5, '–†–µ–ø–∞', 1),
	(6, '–†–µ–ø–∞', 2),
	(7, '–ì–æ—Ä–æ—Ö', 1),
	(8, '–ì–æ—Ä–æ—Ö', 3),
	(9, '–ö—Ä–µ–≤–µ—Ç–∫–∏', 4),
	(10, '–ö—Ä–µ–≤–µ—Ç–∫–∏', 5),
	(11, '–ö—Ä–∞–±', 4),
	(12, '–ö—Ä–∞–±', 5),
	(13, '–†–∞–∫–∏', 4),
	(14, '–†–∞–∫–∏', 5),
	(15, '–ö–∞–ª—å–º–∞—Ä', 4),
	(16, '–ö–∞–ª—å–º–∞—Ä', 6),
	(17, '–û—Å—å–º–∏–Ω–æ–≥', 4),
	(18, '–û—Å—å–º–∏–Ω–æ–≥', 6),
	(19, '–£—Å—Ç—Ä–∏—Ü—ã', 4),
	(20, '–£—Å—Ç—Ä–∏—Ü—ã', 6),
	(21, '–•–ª–µ–±', NULL),
	(22, '–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ', NULL);

-- SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –ø–∞—Ä ¬´–ò–º—è –ø—Ä–æ–¥—É–∫—Ç–∞ ‚Äì –ò–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏¬ª. 
-- –ï—Å–ª–∏ —É –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —Ç–æ –µ–≥–æ –∏–º—è –≤—Å–µ —Ä–∞–≤–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è:
SELECT 
	p.name AS ""–ò–º—è –ø—Ä–æ–¥—É–∫—Ç–∞"", 
	c.name AS ""–ò–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"" 
FROM product p
	LEFT JOIN category c ON p.category_id = c.id









"
uKN7NsWz,Untitled,dllbridge,C,Monday 2nd of September 2024 03:32:49 AM CDT,"

#include   <stdio.h>

 
 
///////////////////////////////////////////////////////////////
int main()                                                   //
{
    
    
    if(0) printf(""false or true = %d\n"", 7 < 10);  
    
    
    
    
}



















/*
#include   <stdio.h>
#include  <locale.h>       //  √ß√§√•√±√º ""√¶√®√¢¬∏√≤"" setlocale(LC_ALL, ""rus"");

 
void foo(char *p);
 
 
///////////////////////////////////////////////////////////////
int main()                                                   //
{
	
	
   char sz[99] = ""y1NY Pictures + - TDK"";	


	
   char *p = &sz[0];	
	
   foo(p);	
}



///////////////////////////////////////////////////
void foo(char *p)
{
     
     
     for(int i = 0; p[i] ; i++)
     {
             
         printf(""%c\n"", p[i]);   
     }
}



*/







/*
#include   <stdio.h>
#include  <locale.h>       //  √ß√§√•√±√º ""√¶√®√¢¬∏√≤"" setlocale(LC_ALL, ""rus"");

 
void foo(int *p);
 
 
///////////////////////////////////////////////////////////////
int main()                                                   //
{
	
	
   int nArr[99] = {10, 101, 102, 103, 104, 105};	


	
   int *p = &nArr[-1];	
	
   foo(p);	
}



///////////////////////////////////////////////////
void foo(int *p)
{
     
     
     for(int i = 0; i < 10; i++)
     {
             
         printf(""%d\n"", p[i]);   
     }
}

*/





















/*

#include   <stdio.h>
#include  <locale.h>       //  √ß√§√•√±√º ""√¶√®√¢¬∏√≤"" setlocale(LC_ALL, ""rus"");

 
void foo(int *p);
 
 
///////////////////////////////////////////////////////////////
int main()                                                   //
{
	
	
	const int n = 3;
	
    foo((int*)&n); 
    
    printf(""n = %d"", n); 
  
return 0;
}





///////////////////////////////////////////////////
void foo(int *p)
{
     
     *p = 7;     
}



*/



"
XJSMAqTm,script.js,ankysax,JSON,Monday 2nd of September 2024 03:28:35 AM CDT,"var promoCode = """";
var audio = $('#audio')[0];
var isScratching = false;
function callScratchPad() {
    $(""#card"").wScratchPad({
        size: 30,
        bg: ""#ffffff"",
        realtime: true,
        fg: scratchImgPath,
        scratchStart: function (e) {
            isScratching = true; // Set scratching state to true when scratching starts
            if (!audio.paused) {
                audio.pause(); // Pause audio if it's already playing
            }
            audio.currentTime = 0; // Rewind audio to start
            audio.play(); // Start playing audio
        },
        scratchMove: function (e, percent) {
            isScratching = false;
            // Show the plain-text promo code and call-to-action when the
            /* scratch area is 80% scratched */
            if (percent > 50 && result.win !== ""no"") {
                document.querySelector("".screen-main"").classList.add(""hide"");
                document.querySelector("".winScreen"").classList.add(""show"");
            } else if (percent > 80 && result.win === ""no"") {
                document.querySelector("".screen-main"").classList.add(""hide"");
                document.querySelector("".loseScreen"").classList.add(""show"");
            }
        },
    });
}
var result = weightedRandom(DATA);
// Wieghtage on which you dont want to show winning screen goes to if condition i.e. in our case 40.
if (result.win === ""no"") {
    document.querySelector("".scratchContainer .scratchpad"").style.backgroundImage = ""url('https://d3gfjdwfdb7zi0.cloudfront.net/in-app-scratch/assets/lose.png')"";
    document.querySelector("".scratchContainer .scratchpad"").style.backgroundSize = ""cover"";
    document
        .querySelector("".scratchContainer .scratchpad"")
        .insertAdjacentHTML(""beforeend"", `<p>Better luck next time!</p>`);
    promoCode = """";
    try {
        /*console.log(weNotification.trackEvent(
            ""In-app Template - Card Scratched"",
            JSON.stringify({
                ""Win"": ""No"",
                ""Coupon Code"": result.code,
            }),
            false
        ));*/
        weNotification.trackEvent(
            ""In-app Template - Card Scratched"",
            JSON.stringify({
                ""Win"": ""No"",
                ""Coupon Code"": result.code,
            }),
            false
        );
    } catch (error) {
        console.error(
            ""InApp event tracking is not supported in current WebEngage SDK version. Please update the WebEngage SDK.""
        );
    }
} else {
    document.querySelector("".scratchContainer .scratchpad"").style.backgroundImage = ""url('https://d3gfjdwfdb7zi0.cloudfront.net/in-app-scratch/assets/Won.png')"";
    document.querySelector("".scratchContainer .scratchpad"").style.backgroundSize = ""cover"";
    document
        .querySelector("".scratchContainer .scratchpad"")
        .insertAdjacentHTML(
            ""beforeend"",
            `<code><p>You won</p><p><b>${result.code}<b></p><img src='https://d3gfjdwfdb7zi0.cloudfront.net/in-app-scratch/assets/Icon.svg' alt='copy-code-icon' srcset='' style=""width:20px;""><span id='code'>√¢≈ì‚Äú</span></code>`
        );
    document.querySelector("".winScreen code p"").innerHTML =
        `<p>You won</p><p><b>${result.code}</b></p>`;
    promoCode = result.code;
    var promoCode = """";
    try {
        /*console.log(weNotification.trackEvent(
            ""In-app Template - Card Scratched"",
            JSON.stringify({
                ""Win"": ""Yes"",
                ""Coupon Code"": result.code,
            }),
            false
        ));*/
        weNotification.trackEvent(
            ""In-app Template - Card Scratched"",
            JSON.stringify({
                ""Win"": ""Yes"",
                ""Coupon Code"": result.code,
            }),
            false
        );
    } catch (error) {
        console.error(
            ""InApp event tracking is not supported in current WebEngage SDK version. Please update the WebEngage SDK.""
        );
    }
}

callScratchPad();
document.querySelector("".scratchContainer .scratchpad > img"").remove();
function weightedRandom(items) {
    if (!items.length) {
        throw new Error('Items must not be empty');
    }
    const cumulativeWeights = [];
    for (let i = 0; i < items.length; i += 1) {
        cumulativeWeights[i] = items[i].wieghtage + (cumulativeWeights[i - 1] || 0);
    }

    const maxCumulativeWeight = cumulativeWeights[cumulativeWeights.length - 1];
    const randomNumber = maxCumulativeWeight * Math.random();

    for (let itemIndex = 0; itemIndex < items.length; itemIndex += 1) {
        if (cumulativeWeights[itemIndex] >= randomNumber) {
            return items[itemIndex]
        }
    }
}
async function copyCode() {
    var copyText = document.querySelector(""code p:nth-child(2)"");
    try {
        await navigator.clipboard.writeText(copyText.innerText);
        document.querySelector(""code span"").style.display = ""inline-block"";
        setTimeout(function () {
            document.querySelector(""code span"").style.display = ""none"";
        }, 1000);
        weNotification.trackEvent(
            ""In-app Template - Copy Clicked"",
            JSON.stringify({ ""Coupon Code"": copyText.innerText }),
            false
        );
        //console.log('Content copied to clipboard');
    } catch (err) {
        console.error(
            ""Content not Copied: InApp event tracking is not supported in current WebEngage SDK version. Please update the WebEngage SDK.""
        );
    }
}"
LR5V5zBT,community json,rudradev,JSON,Monday 2nd of September 2024 03:26:17 AM CDT,"[
    {
        ""questionName"": ""What is Python?"",
        ""semester"": ""Fall 2024"",
        ""subject"": ""Programming"",
        ""answers"": [
            {""answerName"": ""Python is a high-level programming language.""},
            {""answerName"": ""It is widely used for web development, automation, and data analysis.""},
            {""answerName"": ""Python has a simple syntax similar to the English language.""},
            {""answerName"": ""It is an interpreted language, meaning that it is executed line by line.""}
        ]
    },
    {
        ""questionName"": ""What is Django?"",
        ""semester"": ""Fall 2024"",
        ""subject"": ""Web Development"",
        ""answers"": [
            {""answerName"": ""Django is a high-level Python web framework.""},
            {""answerName"": ""It enables rapid development of secure and maintainable websites.""},
            {""answerName"": ""Django follows the model-template-view (MTV) architectural pattern.""},
            {""answerName"": ""It is known for its emphasis on reusability and the DRY principle.""}
        ]
    },
    {
        ""questionName"": ""What is a database?"",
        ""semester"": ""Spring 2024"",
        ""subject"": ""Database Management"",
        ""answers"": [
            {""answerName"": ""A database is an organized collection of structured information.""},
            {""answerName"": ""It is typically stored electronically in a computer system.""},
            {""answerName"": ""Databases are managed using a database management system (DBMS).""},
            {""answerName"": ""They allow for efficient storage, retrieval, and manipulation of data.""}
        ]
    },
    {
        ""questionName"": ""What is a REST API?"",
        ""semester"": ""Fall 2024"",
        ""subject"": ""Web Development"",
        ""answers"": [
            {""answerName"": ""REST stands for Representational State Transfer.""},
            {""answerName"": ""It is an architectural style for designing networked applications.""},
            {""answerName"": ""RESTful APIs use HTTP methods such as GET, POST, PUT, and DELETE.""},
            {""answerName"": ""They are stateless and typically return data in JSON or XML format.""}
        ]
    },
    {
        ""questionName"": ""What is machine learning?"",
        ""semester"": ""Spring 2025"",
        ""subject"": ""Artificial Intelligence"",
        ""answers"": [
            {""answerName"": ""Machine learning is a subset of artificial intelligence.""},
            {""answerName"": ""It involves training models to recognize patterns in data.""},
            {""answerName"": ""Machine learning algorithms can improve automatically through experience.""},
            {""answerName"": ""It is used in applications like predictive analytics and recommendation systems.""}
        ]
    },
    {
        ""questionName"": ""What is the purpose of a version control system?"",
        ""semester"": ""Fall 2024"",
        ""subject"": ""Software Engineering"",
        ""answers"": [
            {""answerName"": ""A version control system tracks changes to code over time.""},
            {""answerName"": ""It allows multiple people to work on a project simultaneously.""},
            {""answerName"": ""Popular version control systems include Git and Subversion.""},
            {""answerName"": ""It helps in managing project history and collaboration.""}
        ]
    },
    {
        ""questionName"": ""What is cloud computing?"",
        ""semester"": ""Spring 2025"",
        ""subject"": ""Information Technology"",
        ""answers"": [
            {""answerName"": ""Cloud computing delivers computing services over the internet.""},
            {""answerName"": ""It includes services like storage, databases, and servers.""},
            {""answerName"": ""Cloud computing offers scalability, flexibility, and cost-efficiency.""},
            {""answerName"": ""Examples include AWS, Google Cloud, and Microsoft Azure.""}
        ]
    },
    {
        ""questionName"": ""What is the Agile methodology?"",
        ""semester"": ""Fall 2024"",
        ""subject"": ""Project Management"",
        ""answers"": [
            {""answerName"": ""Agile is a project management methodology for software development.""},
            {""answerName"": ""It focuses on iterative development and customer feedback.""},
            {""answerName"": ""Agile promotes flexibility, collaboration, and quick response to change.""},
            {""answerName"": ""Common Agile frameworks include Scrum and Kanban.""}
        ]
    },
    {
        ""questionName"": ""What is an operating system?"",
        ""semester"": ""Spring 2025"",
        ""subject"": ""Computer Science"",
        ""answers"": [
            {""answerName"": ""An operating system is software that manages computer hardware.""},
            {""answerName"": ""It provides a user interface and controls the execution of programs.""},
            {""answerName"": ""Examples include Windows, macOS, Linux, and Android.""},
            {""answerName"": ""The OS manages resources like CPU, memory, and storage.""}
        ]
    },
    {
        ""questionName"": ""What is cybersecurity?"",
        ""semester"": ""Fall 2024"",
        ""subject"": ""Information Security"",
        ""answers"": [
            {""answerName"": ""Cybersecurity is the practice of protecting systems and networks from attacks.""},
            {""answerName"": ""It involves safeguarding data from unauthorized access and breaches.""},
            {""answerName"": ""Common cybersecurity measures include firewalls and encryption.""},
            {""answerName"": ""It is critical for ensuring the confidentiality, integrity, and availability of data.""}
        ]
    }
]
"
A602aBMx,TeX Shortcuts.js,memset0,JavaScript,Monday 2nd of September 2024 03:12:17 AM CDT,"[
  // Math mode
  // { trigger: 'mk', replacement: '$$0$', options: 'tA' },
  // { trigger: 'dm', replacement: '$$\n$0\n$$', options: 'tAw' },
  { trigger: 'beg', replacement: '\\begin{$0}\n$1\n\\end{$0}', options: 'mA' },

  // Dashes
  // {trigger: ""--"", replacement: ""‚Äì"", options: ""tA""},
  // {trigger: ""‚Äì-"", replacement: ""‚Äî"", options: ""tA""},
  // {trigger: ""‚Äî-"", replacement: ""---"", options: ""tA""},

  // Greek letters
  // { trigger: '@a', replacement: '\\alpha', options: 'mA' },
  // { trigger: '@b', replacement: '\\beta', options: 'mA' },
  // { trigger: '@g', replacement: '\\gamma', options: 'mA' },
  // { trigger: '@G', replacement: '\\Gamma', options: 'mA' },
  // { trigger: '@d', replacement: '\\delta', options: 'mA' },
  // { trigger: '@D', replacement: '\\Delta', options: 'mA' },
  // { trigger: '@e', replacement: '\\epsilon', options: 'mA' },
  // { trigger: ':e', replacement: '\\varepsilon', options: 'mA' },
  // { trigger: '@z', replacement: '\\zeta', options: 'mA' },
  // { trigger: '@t', replacement: '\\theta', options: 'mA' },
  // { trigger: '@T', replacement: '\\Theta', options: 'mA' },
  // { trigger: ':t', replacement: '\\vartheta', options: 'mA' },
  // { trigger: '@i', replacement: '\\iota', options: 'mA' },
  // { trigger: '@k', replacement: '\\kappa', options: 'mA' },
  // { trigger: '@l', replacement: '\\lambda', options: 'mA' },
  // { trigger: '@L', replacement: '\\Lambda', options: 'mA' },
  // { trigger: '@s', replacement: '\\sigma', options: 'mA' },
  // { trigger: '@S', replacement: '\\Sigma', options: 'mA' },
  // { trigger: '@u', replacement: '\\upsilon', options: 'mA' },
  // { trigger: '@U', replacement: '\\Upsilon', options: 'mA' },
  // { trigger: '@o', replacement: '\\omega', options: 'mA' },
  // { trigger: '@O', replacement: '\\Omega', options: 'mA' },
  // { trigger: 'ome', replacement: '\\omega', options: 'mA' },
  // { trigger: 'Ome', replacement: '\\Omega', options: 'mA' },

  // Text environment
  { trigger: 'text', replacement: '\\text{$0}$1', options: 'mA' },
  // { trigger: '""', replacement: '\\text{$0}$1', options: 'mA' },

  // Basic operations
  // { trigger: 'sr', replacement: '^{2}', options: 'mA' },
  // { trigger: 'cb', replacement: '^{3}', options: 'mA' },
  // { trigger: 'rd', replacement: '^{$0}$1', options: 'mA' },
  { trigger: '^', replacement: '^{$0}$1', options: 'mA' },
  { trigger: '_', replacement: '_{$0}$1', options: 'mA' },
  // { trigger: 'sts', replacement: '_\\text{$0}', options: 'mA' },
  // { trigger: 'sq', replacement: '\\sqrt{ $0 }$1', options: 'mA' },
  { trigger: '//', replacement: '\\frac{$0}{$1}$2', options: 'mA' },
  // { trigger: 'ee', replacement: 'e^{ $0 }$1', options: 'mA' },
  // { trigger: 'invs', replacement: '^{-1}', options: 'mA' },
  // { trigger: /([A-Za-z])(\d)/, replacement: '[[0]]_{[[1]]}', options: 'rmA', description: 'Auto letter subscript', priority: -1 },

  { trigger: /([^\\])(exp|log|ln)/, replacement: '[[0]]\\[[1]]', options: 'rmA' },
  { trigger: 'conj', replacement: '^{*}', options: 'mA' },
  // { trigger: 'Re', replacement: '\\mathrm{Re}', options: 'mA' },
  // { trigger: 'Im', replacement: '\\mathrm{Im}', options: 'mA' },
  { trigger: 'bf', replacement: '\\mathbf{$0}$1', options: 'mA' },
  { trigger: 'rm', replacement: '\\mathrm{$0}$1', options: 'mA' },
  { trigger: 'tt', replacement: '\\texttt{$0}$1', options: 'mA' },
  { trigger: 'cal', replacement: '\\mathcal{$0}$1', options: 'mA' },
  { trigger: 'bold', replacement: '\\boldsymbol{$0}$1', options: 'mA' },
  { trigger: 'bb', replacement: '\\boldsymbol{$0}$1', options: 'mA' },
  { trigger: 'oper', replacement: '\\operatorname*{$0}$1', options: 'mA' },

  // Linear algebra
  // { trigger: /([^\\])(det)/, replacement: '[[0]]\\[[1]]', options: 'rmA' },
  // { trigger: 'trace', replacement: '\\mathrm{Tr}', options: 'mA' },

  // More operations
  // { trigger: '([a-zA-Z])hat', replacement: '\\hat{[[0]]}', options: 'rmA' },
  // { trigger: '([a-zA-Z])bar', replacement: '\\bar{[[0]]}', options: 'rmA' },
  // { trigger: '([a-zA-Z])dot', replacement: '\\dot{[[0]]}', options: 'rmA', priority: -1 },
  // { trigger: '([a-zA-Z])ddot', replacement: '\\ddot{[[0]]}', options: 'rmA', priority: 1 },
  // { trigger: '([a-zA-Z])tilde', replacement: '\\tilde{[[0]]}', options: 'rmA' },
  // { trigger: '([a-zA-Z])und', replacement: '\\underline{[[0]]}', options: 'rmA' },
  // { trigger: '([a-zA-Z])vec', replacement: '\\vec{[[0]]}', options: 'rmA' },
  // { trigger: '([a-zA-Z]),\\.', replacement: '\\mathbf{[[0]]}', options: 'rmA' },
  // { trigger: '([a-zA-Z])\\.,', replacement: '\\mathbf{[[0]]}', options: 'rmA' },
  // { trigger: '\\\\(${GREEK}),\\.', replacement: '\\boldsymbol{\\[[0]]}', options: 'rmA' },
  // { trigger: '\\\\(${GREEK})\\.,', replacement: '\\boldsymbol{\\[[0]]}', options: 'rmA' },

  { trigger: 'hat', replacement: '\\hat{$0}$1', options: 'mA' },
  { trigger: 'bar', replacement: '\\bar{$0}$1', options: 'mA' },
  { trigger: 'dot', replacement: '\\dot{$0}$1', options: 'mA', priority: -1 },
  { trigger: 'ddot', replacement: '\\ddot{$0}$1', options: 'mA' },
  { trigger: 'cdot', replacement: '\\cdot', options: 'mA' },
  { trigger: 'odot', replacement: '\\odot', options: 'mA' },
  { trigger: '\\cdot s', replacement: '\\cdots', options: 'mA', priority: 2 },
  { trigger: 'tilde', replacement: '\\tilde{$0}$1', options: 'mA' },
  { trigger: 'und', replacement: '\\underline{$0}$1', options: 'mA' },
  { trigger: 'vec', replacement: '\\vec{$0}$1', options: 'mA' },

  // More auto letter subscript
  { trigger: /([A-Za-z])_(\d\d)/, replacement: '[[0]]_{[[1]]}', options: 'rmA' },
  { trigger: /\\hat{([A-Za-z])}(\d)/, replacement: '\\hat{[[0]]}_{[[1]]}', options: 'rmA' },
  { trigger: /\\vec{([A-Za-z])}(\d)/, replacement: '\\vec{[[0]]}_{[[1]]}', options: 'rmA' },
  { trigger: /\\mathbf{([A-Za-z])}(\d)/, replacement: '\\mathbf{[[0]]}_{[[1]]}', options: 'rmA' },

  // { trigger: 'xnn', replacement: 'x_{n}', options: 'mA' },
  // { trigger: 'xii', replacement: 'x_{i}', options: 'mA' },
  // { trigger: 'xjj', replacement: 'x_{j}', options: 'mA' },
  // { trigger: 'xp1', replacement: 'x_{n+1}', options: 'mA' },
  // { trigger: 'ynn', replacement: 'y_{n}', options: 'mA' },
  // { trigger: 'yii', replacement: 'y_{i}', options: 'mA' },
  // { trigger: 'yjj', replacement: 'y_{j}', options: 'mA' },

  // Symbols
  { trigger: 'oo', replacement: '\\infty', options: 'mA' },
  { trigger: 'sum', replacement: '\\sum', options: 'mA' },
  { trigger: 'prod', replacement: '\\prod', options: 'mA' },
  // { trigger: '\\sum', replacement: '\\sum_{${0:i}=${1:1}}^{${2:N}} $3', options: 'm' },
  // { trigger: '\\prod', replacement: '\\prod_{${0:i}=${1:1}}^{${2:N}} $3', options: 'm' },
  { trigger: 'lim', replacement: '\\lim_{ ${0:n} \\to ${1:\\infty} } $2', options: 'mA' },
  { trigger: '+-', replacement: '\\pm', options: 'mA' },
  { trigger: '-+', replacement: '\\mp', options: 'mA' },
  { trigger: '...', replacement: '\\dots', options: 'mA' },
  { trigger: 'nabla', replacement: '\\nabla', options: 'mA' },
  { trigger: 'del', replacement: '\\nabla', options: 'mA' },
  // { trigger: 'xx', replacement: '\\times', options: 'mA' },
  // { trigger: '**', replacement: '\\cdot', options: 'mA' },
  { trigger: 'para', replacement: '\\parallel', options: 'mA' },

  { trigger: '===', replacement: '\\equiv', options: 'mA' },
  { trigger: '!=', replacement: '\\neq', options: 'mA' },
  { trigger: '>=', replacement: '\\geq', options: 'mA' },
  { trigger: '<=', replacement: '\\leq', options: 'mA' },
  { trigger: '>>', replacement: '\\gg', options: 'mA' },
  { trigger: '<<', replacement: '\\ll', options: 'mA' },
  { trigger: 'sim', replacement: '\\sim', options: 'mA' },
  // { trigger: 'sim=', replacement: '\\simeq', options: 'mA' },
  { trigger: 'prop', replacement: '\\propto', options: 'mA' },

  { trigger: '<->', replacement: '\\leftrightarrow ', options: 'mA' },
  { trigger: '->', replacement: '\\to', options: 'mA' },
  { trigger: '-<', replacement: '\\leftarrow', options: 'mA' },
  { trigger: '!>', replacement: '\\mapsto', options: 'mA' },
  { trigger: '=>', replacement: '\\Rightarrow', options: 'mA' },
  { trigger: '=<', replacement: '\\Leftarrow', options: 'mA' },
  { trigger: '==>', replacement: '\\implies', options: 'mA' },
  { trigger: '==<', replacement: '\\impliedby', options: 'mA' },

  // { trigger: 'and', replacement: '\\cap', options: 'mA' },
  // { trigger: 'orr', replacement: '\\cup', options: 'mA' },
  // { trigger: 'inn', replacement: '\\in', options: 'mA' },
  { trigger: 'notin', replacement: '\\not\\in', options: 'mA' },
  // { trigger: '\\\\\\', replacement: '\\setminus', options: 'mA' },
  { trigger: 'sub=', replacement: '\\subseteq', options: 'mA' },
  { trigger: 'sup=', replacement: '\\supseteq', options: 'mA' },
  { trigger: 'eset', replacement: '\\emptyset', options: 'mA' },
  { trigger: 'set', replacement: '\\{ $0 \\}$1', options: 'mA' },
  { trigger: 'e\\xi sts', replacement: '\\exists', options: 'mA', priority: 1 },

  { trigger: 'LL', replacement: '\\mathcal{L}', options: 'mA' },
  { trigger: 'HH', replacement: '\\mathcal{H}', options: 'mA' },
  { trigger: 'CC', replacement: '\\mathbb{C}', options: 'mA' },
  { trigger: 'RR', replacement: '\\mathbb{R}', options: 'mA' },
  { trigger: 'QQ', replacement: '\\mathbb{Q}', options: 'mA' },
  { trigger: 'ZZ', replacement: '\\mathbb{Z}', options: 'mA' },
  { trigger: 'NN', replacement: '\\mathbb{N}', options: 'mA' },

  // Handle spaces and backslashes

  // Snippet variables can be used as shortcuts when writing snippets.
  // For example, ${GREEK} below is shorthand for ""alpha|beta|gamma|Gamma|delta|...""
  // You can edit snippet variables under the Advanced snippet settings section.

  { trigger: '([^\\\\])(${GREEK})', replacement: '[[0]]\\[[1]]', options: 'rmA', description: 'Add backslash before Greek letters' },
  { trigger: '([^\\\\])(${SYMBOL})', replacement: '[[0]]\\[[1]]', options: 'rmA', description: 'Add backslash before symbols' },

  // Insert space after Greek letters and symbols
  { trigger: '\\\\(${GREEK}|${SYMBOL}|${MORE_SYMBOLS})([A-Za-z])', replacement: '\\[[0]] [[1]]', options: 'rmA' },
  // { trigger: '\\\\(${GREEK}|${SYMBOL}) sr', replacement: '\\[[0]]^{2}', options: 'rmA' },
  // { trigger: '\\\\(${GREEK}|${SYMBOL}) cb', replacement: '\\[[0]]^{3}', options: 'rmA' },
  // { trigger: '\\\\(${GREEK}|${SYMBOL}) rd', replacement: '\\[[0]]^{$0}$1', options: 'rmA' },
  // { trigger: '\\\\(${GREEK}|${SYMBOL}) hat', replacement: '\\hat{\\[[0]]}', options: 'rmA' },
  // { trigger: '\\\\(${GREEK}|${SYMBOL}) dot', replacement: '\\dot{\\[[0]]}', options: 'rmA' },
  // { trigger: '\\\\(${GREEK}|${SYMBOL}) bar', replacement: '\\bar{\\[[0]]}', options: 'rmA' },
  // { trigger: '\\\\(${GREEK}|${SYMBOL}) vec', replacement: '\\vec{\\[[0]]}', options: 'rmA' },
  // { trigger: '\\\\(${GREEK}|${SYMBOL}) tilde', replacement: '\\tilde{\\[[0]]}', options: 'rmA' },
  // { trigger: '\\\\(${GREEK}|${SYMBOL}) und', replacement: '\\underline{\\[[0]]}', options: 'rmA' },

  // Derivatives and integrals
  // { trigger: 'par', replacement: '\\frac{ \\partial ${0:y} }{ \\partial ${1:x} } $2', options: 'm' },
  // { trigger: /pa([A-Za-z])([A-Za-z])/, replacement: '\\frac{ \\partial [[0]] }{ \\partial [[1]] } ', options: 'rm' },
  // { trigger: 'ddt', replacement: '\\frac{d}{dt} ', options: 'mA' },

  { trigger: /([^\\])int/, replacement: '[[0]]\\int', options: 'mA', priority: -1 },
  // { trigger: '\\int', replacement: '\\int $0 \\, d${1:x} $2', options: 'm' },
  // { trigger: 'dint', replacement: '\\int_{${0:0}}^{${1:1}} $2 \\, d${3:x} $4', options: 'mA' },
  // { trigger: 'oint', replacement: '\\oint', options: 'mA' },
  // { trigger: 'iint', replacement: '\\iint', options: 'mA' },
  // { trigger: 'iiint', replacement: '\\iiint', options: 'mA' },
  // { trigger: 'oinf', replacement: '\\int_{0}^{\\infty} $0 \\, d${1:x} $2', options: 'mA' },
  // { trigger: 'infi', replacement: '\\int_{-\\infty}^{\\infty} $0 \\, d${1:x} $2', options: 'mA' },
  { trigger: 'dif', replacement: '\\text{d} $0 $1', options: 'mA' },
  { trigger: 'part', replacement: '\\partial $0 $1', options: 'mA' },

  // Trigonometry
  { trigger: /([^\\])(arcsin|sin|arccos|cos|arctan|tan|csc|sec|cot)/, replacement: '[[0]]\\[[1]]', options: 'rmA', description: 'Add backslash before trig funcs' },

  { trigger: /\\(arcsin|sin|arccos|cos|arctan|tan|csc|sec|cot)([A-Za-gi-z])/, replacement: '\\[[0]] [[1]]', options: 'rmA', description: 'Add space after trig funcs. Skips letter h to allow sinh, cosh, etc.' },

  { trigger: /\\(sinh|cosh|tanh|coth)([A-Za-z])/, replacement: '\\[[0]] [[1]]', options: 'rmA', description: 'Add space after hyperbolic trig funcs' },

  // Visual operations
  // { trigger: 'U', replacement: '\\underbrace{ ${VISUAL} }_{ $0 }', options: 'mA' },
  // { trigger: 'O', replacement: '\\overbrace{ ${VISUAL} }^{ $0 }', options: 'mA' },
  // { trigger: 'B', replacement: '\\underset{ $0 }{ ${VISUAL} }', options: 'mA' },
  // { trigger: 'C', replacement: '\\cancel{ ${VISUAL} }', options: 'mA' },
  // { trigger: 'K', replacement: '\\cancelto{ $0 }{ ${VISUAL} }', options: 'mA' },
  // { trigger: 'S', replacement: '\\sqrt{ ${VISUAL} }', options: 'mA' },

  // Physics
  // { trigger: 'kbt', replacement: 'k_{B}T', options: 'mA' },
  // { trigger: 'msun', replacement: 'M_{\\odot}', options: 'mA' },

  // Quantum mechanics
  // { trigger: 'dag', replacement: '^{\\dagger}', options: 'mA' },
  // { trigger: 'o+', replacement: '\\oplus ', options: 'mA' },
  // { trigger: 'ox', replacement: '\\otimes ', options: 'mA' },
  // { trigger: 'bra', replacement: '\\bra{$0} $1', options: 'mA' },
  // { trigger: 'ket', replacement: '\\ket{$0} $1', options: 'mA' },
  // { trigger: 'brk', replacement: '\\braket{ $0 | $1 } $2', options: 'mA' },
  // { trigger: 'outer', replacement: '\\ket{${0:\\psi}} \\bra{${0:\\psi}} $1', options: 'mA' },

  // Chemistry
  // { trigger: 'pu', replacement: '\\pu{ $0 }', options: 'mA' },
  // { trigger: 'cee', replacement: '\\ce{ $0 }', options: 'mA' },
  // { trigger: 'he4', replacement: '{}^{4}_{2}He ', options: 'mA' },
  // { trigger: 'he3', replacement: '{}^{3}_{2}He ', options: 'mA' },
  // { trigger: 'iso', replacement: '{}^{${0:4}}_{${1:2}}${2:He}', options: 'mA' },

  // Environments
  { trigger: 'pmat', replacement: '\\begin{pmatrix}\n$0\n\\end{pmatrix}', options: 'MA' },
  { trigger: 'bmat', replacement: '\\begin{bmatrix}\n$0\n\\end{bmatrix}', options: 'MA' },
  { trigger: 'Bmat', replacement: '\\begin{Bmatrix}\n$0\n\\end{Bmatrix}', options: 'MA' },
  { trigger: 'vmat', replacement: '\\begin{vmatrix}\n$0\n\\end{vmatrix}', options: 'MA' },
  { trigger: 'Vmat', replacement: '\\begin{Vmatrix}\n$0\n\\end{Vmatrix}', options: 'MA' },
  { trigger: 'matrix', replacement: '\\begin{matrix}\n$0\n\\end{matrix}', options: 'MA' },

  { trigger: 'pmat', replacement: '\\begin{pmatrix}$0\\end{pmatrix}', options: 'nA' },
  { trigger: 'bmat', replacement: '\\begin{bmatrix}$0\\end{bmatrix}', options: 'nA' },
  { trigger: 'Bmat', replacement: '\\begin{Bmatrix}$0\\end{Bmatrix}', options: 'nA' },
  { trigger: 'vmat', replacement: '\\begin{vmatrix}$0\\end{vmatrix}', options: 'nA' },
  { trigger: 'Vmat', replacement: '\\begin{Vmatrix}$0\\end{Vmatrix}', options: 'nA' },
  { trigger: 'matrix', replacement: '\\begin{matrix}$0\\end{matrix}', options: 'nA' },

  { trigger: 'cases', replacement: '\\begin{cases}\n$0\n\\end{cases}', options: 'mA' },
  { trigger: 'align', replacement: '\\begin{aligned}\n$0\n\\end{aligned}', options: 'mA' },
  { trigger: 'array', replacement: '\\begin{array}\n$0\n\\end{array}', options: 'mA' },

  // Brackets
  { trigger: 'avg', replacement: '\\langle $0 \\rangle $1', options: 'mA' },
  { trigger: 'norm', replacement: '\\lvert $0 \\rvert $1', options: 'mA', priority: 1 },
  { trigger: 'Norm', replacement: '\\lVert $0 \\rVert $1', options: 'mA', priority: 1 },
  { trigger: 'ceil', replacement: '\\lceil $0 \\rceil $1', options: 'mA' },
  { trigger: 'floor', replacement: '\\lfloor $0 \\rfloor $1', options: 'mA' },
  { trigger: 'mod', replacement: '|$0|$1', options: 'mA' },
  { trigger: '(', replacement: '(${VISUAL})', options: 'mA' },
  { trigger: '[', replacement: '[${VISUAL}]', options: 'mA' },
  { trigger: '{', replacement: '{${VISUAL}}', options: 'mA' },
  { trigger: '(', replacement: '($0)$1', options: 'mA' },
  { trigger: '{', replacement: '{$0}$1', options: 'mA' },
  { trigger: '[', replacement: '[$0]$1', options: 'mA' },
  { trigger: 'lr(', replacement: '\\left( $0 \\right) $1', options: 'mA' },
  { trigger: 'lr{', replacement: '\\left\\{ $0 \\right\\} $1', options: 'mA' },
  { trigger: 'lr[', replacement: '\\left[ $0 \\right] $1', options: 'mA' },
  { trigger: 'lr|', replacement: '\\left| $0 \\right| $1', options: 'mA' },
  { trigger: 'lr<', replacement: '\\left< $0 \\right> $1', options: 'mA' },

  // Misc

  // Automatically convert standalone letters in text to math (except a, A, I).
  // (Un-comment to enable)
  // {trigger: /([^'])\b([B-HJ-Zb-z])\b([\n\s.,?!:'])/, replacement: ""[[0]]$[[1]]$[[2]]"", options: ""tA""},

  // Automatically convert Greek letters in text to math.
  // {trigger: ""(${GREEK})([\\n\\s.,?!:'])"", replacement: ""$\\[[0]]$[[1]]"", options: ""rtAw""},

  // Automatically convert text of the form ""x=2"" and ""x=n+1"" to math.
  // {trigger: /([A-Za-z]=\d+)([\n\s.,?!:'])/, replacement: ""$[[0]]$[[1]]"", options: ""rtAw""},
  // {trigger: /([A-Za-z]=[A-Za-z][+-]\d+)([\n\s.,?!:'])/, replacement: ""$[[0]]$[[1]]"", options: ""tAw""},

  // Snippet replacements can have placeholders.
  // { trigger: 'tayl', replacement: ""${0:f}(${1:x} + ${2:h}) = ${0:f}(${1:x}) + ${0:f}'(${1:x})${2:h} + ${0:f}''(${1:x}) \\frac{${2:h}^{2}}{2!} + \\dots$3"", options: 'mA', description: 'Taylor expansion' },

  // Snippet replacements can also be JavaScript functions.
  // See the documentation for more information.
  // {
  //   trigger: /iden(\d)/,
  //   replacement: (match) => {
  //     const n = match[1];

  //     let arr = [];
  //     for (let j = 0; j < n; j++) {
  //       arr[j] = [];
  //       for (let i = 0; i < n; i++) {
  //         arr[j][i] = i === j ? 1 : 0;
  //       }
  //     }

  //     let output = arr.map((el) => el.join(' & ')).join(' \\\\\n');
  //     output = `\\begin{pmatrix}\n${output}\n\\end{pmatrix}`;
  //     return output;
  //   },
  //   options: 'mA',
  //   description: 'N x N identity matrix',
  // },
];
"
331HcH7M,hitbox expander with esp,rrixh,Lua,Monday 2nd of September 2024 02:55:16 AM CDT,"loadstring(game:HttpGet(""https://github.com/rrixh/uwuware/raw/main/kustomskript/hitboxexpander-esp"",true))();"
3ktsKDws,How to Get the Banex Capital 20% Deposit Bonus,fxvnpro,PHP,Monday 2nd of September 2024 02:16:13 AM CDT,"https://www.fxvnpro.com/how-to-get-the-banex-capital-20-deposit-bonus/
 Table of Contents

 	Key Details of the Banex Capital 20% Deposit Bonus
 	Banex Capital 20% Bonus Requirements
 	How to Claim Banex Capital Deposit Bonus
 	Banex Capital Bonus Withdrawal Conditions
 	Banex Capital Trading Bonus 2024: What‚Äôs New?
 	Is Banex Capital Bonus Legit?
 	Important Considerations

Key Details of the Banex Capital 20% Deposit Bonus
Banex Capital is currently offering a 20% deposit bonus promotion, designed to enhance your trading experience by providing extra funds to trade with. Here‚Äôs a detailed breakdown of how you can take advantage of this offer and what you need to know.
Banex Capital 20% Bonus Requirements
To fully benefit from the Banex Capital 20% deposit bonus, it‚Äôs crucial to understand the Banex Capital 20% bonus requirements. The minimum deposit required is $100, and the bonus is applicable to all deposit methods. However, the bonus funds and any profits generated from them can only be withdrawn once you meet certain trading volume requirements. These requirements are not always clearly stated, so it‚Äôs advisable to reach out to customer support for detailed information.
How to Claim Banex Capital Deposit Bonus

 	Open a Live Trading Account: Begin by registering a live trading account with Banex Capital if you haven‚Äôt already. Ensure that your account is fully verified to avoid any issues later on.
 	Make a Deposit: Deposit at least $100 using any of the available methods supported by Banex Capital. Whether you prefer bank transfers, credit cards, or e-wallets, the bonus is applicable to all.
 	Receive Your Bonus: Once your deposit is made, the 20% bonus will be automatically credited to your account. There‚Äôs no need for additional steps or promo codes‚ÄîBanex Capital takes care of it instantly.

If you‚Äôre wondering how to claim the Banex Capital deposit bonus, the process is straightforward. Simply follow the steps above, and the bonus will be added to your account automatically after your deposit.
Banex Capital Bonus Withdrawal Conditions
While the bonus enhances your trading power, it‚Äôs important to note the Banex Capital bonus withdrawal conditions. The bonus and any profits generated from it can be withdrawn only after meeting specific trading volume requirements. This is a standard condition for most trading bonuses, ensuring that the bonus is used actively in trading rather than withdrawn immediately.
Banex Capital Trading Bonus 2024: What‚Äôs New?
Looking ahead, the Banex Capital trading bonus for 2024 may include new terms or additional benefits. Keeping an eye on updates to the promotion can help you maximize your trading advantage. Always check the latest promotional details on the Banex Capital website or contact their support for the most current information.
Is Banex Capital Bonus Legit?
Given the various reports and reviews online, you might be asking yourself, ""Is the Banex Capital bonus legit?"" While the bonus offer is attractive, it‚Äôs essential to exercise caution. Thoroughly research Banex Capital‚Äôs reputation, read user reviews, and ensure you understand all terms and conditions before making a deposit. Some users have reported withdrawal issues, so being informed is key.
Important Considerations
While the Banex Capital 20% Deposit Bonus is an attractive offer, it‚Äôs crucial to be aware of a few key points:

 	Terms and Conditions: As with any bonus, it‚Äôs essential to read the full terms and conditions. These often include restrictions or additional requirements that could affect your ability to withdraw profits.
 	Broker Reputation: There have been some reports of withdrawal issues and potential scams related to Banex Capital. It‚Äôs advisable to exercise caution when depositing funds with any broker. Conduct thorough research into Banex Capital‚Äôs reputation, regulatory status, and customer reviews before committing significant funds.
"
x73j931A,ProductModel,Shuva_Dev,C#,Monday 2nd of September 2024 01:53:36 AM CDT,"public class Product
{
    public int Id { get; set; }
    [Required]
    public string Title { get; set; }
    public string Description { get; set; }
    [Required]
    public string ISBN { get; set; }
    [Required]
    public string Author { get; set; }
    
    [Required]
    [DisplayName(""List Price"")]
    [Range(1, 1000)]
    public double ListPrice { get; set; }

    [Required]
    [DisplayName(""Price for 1 - 50"")]
    [Range(1, 1000)]
    public double Price { get; set; }

    [Required]
    [DisplayName(""Price for 50+"")]
    [Range(1, 1000)]
    public double Price50 { get; set; }

    [Required]
    [DisplayName(""Price for 100+"")]
    [Range(1, 1000)]
    public double Price100 { get; set; }
    [DisplayName(""Category"")]
    public int CategoryId { get; set; } 
    [ValidateNever]
    public Category Category { get; set; }
    [ValidateNever]
    public string ImageUrl { get; set; }

}"
pTaWKRch,ShoppingCart,Shuva_Dev,C#,Monday 2nd of September 2024 01:52:24 AM CDT,"public class ShoppingCart
{
    public int Id { get; set; }
    public int ProductId { get; set; }
    [ValidateNever]
    public Product Product { get; set; }
    [Range(1, 1000, ErrorMessage = ""You can order maximum 1000 books."")]
    public int Count { get; set; }
    public string ApplicationUserId { get; set; }
    [ValidateNever]
    public ApplicationUser ApplicationUser { get; set; }
    [NotMapped]
    public double Price { get; set; }
}"
Q0Yh8CCN,OrderDetail,Shuva_Dev,C#,Monday 2nd of September 2024 01:50:50 AM CDT,"public class OrderDetail
{
    public int Id { get; set; }
    [Required]
    public int OrderHeaderId { get; set; }
    [ValidateNever]
    public OrderHeader OrderHeader { get; set; }
    [Required]
    public int ProductId { get; set; }
    [ValidateNever]
    public Product Product { get; set; }

    public int Count { get; set; }
    public double Price { get; set; }
}"
kUHSeaBZ,OrderHeader,Shuva_Dev,C#,Monday 2nd of September 2024 01:49:30 AM CDT,"public class OrderHeader
{
    public int Id { get; set; }
    public string ApplicationUserId { get; set; }
    [ValidateNever]
    public ApplicationUser ApplicationUser { get; set; }

    public DateTime OrderDate { get; set; }
    public DateTime ShippingDate { get; set; }
    public double OrderTotal { get; set; }

    public string? OrderStatus { get; set; }
    public string? PaymentStatus { get; set; }
    public string? TrackingNumber { get; set; }
    public string? Carrier { get; set; }


    public DateTime PaymentDate { get; set; }
    public DateOnly PaymentDueDate { get; set; }

    public string? PaymentIntentId { get; set; }

    [Required]
    public string PhoneNumber { get; set; }
    [Required]
    public string StreetAddress { get; set; }
    [Required]
    public string City { get; set; }
    [Required]
    public string State { get; set; }
    [Required]
    public string PostalCode { get; set; }
    [Required]
    public string Name { get; set; }
}"
kuCRP49y,configuration.yaml,sreejith2904,YAML,Monday 2nd of September 2024 01:44:33 AM CDT,"command_line:
  - sensor:
      name: Recipe Sensor
      unique_id: 575e2cce-206c-4886-9c15-ff89e43b57fd
      command: ""python3 /config/python_scripts/get_recipes.py {{ states('input_text.recipe\
_tag') }}""
      scan_interval: 10800  # Update interval in seconds
      value_template: '{{ value_json[""URL_1""] }}'
      json_attributes:
        - Title_1
        - URL_1
        - Description_1
        - Title_2
        - URL_2
        - Description_2
        - Title_3
        - URL_3
        - Description_3
  - sensor:
      name: Recipe Script Output
      unique_id: df03df65-f84c-48e4-bd2e-6ef469648f35
      command: ""cat /config/www/recipe_script_output.json""
      scan_interval: 10800  # Update interval in seconds
shell_command:
  run_recipe_script: ""python3 /config/python_scripts/get_recipes.py {{ tag }}""
input_text:
  recipe_tag:
    name: Recipe Tag
    initial: ""dessert""
    max: 100
input_boolean:
  recipe_switch:
    name: Recipe Switch State
    initial: off"
zjW0rkfz,scripts.yaml,sreejith2904,YAML,Monday 2nd of September 2024 01:40:58 AM CDT,"run_recipes_script:
  alias: ""Run Recipe Script""
  sequence:
    - service: command_line
      data:
        command: ""python3 /config/python_scripts/get_recipes.py {{ states('input_text.recipe_tag') }}""

update_bookmark_sensor:
    alias: ""Update Recipe Sensor""
    sequence:
      - service: homeassistant.update_entity
        target:
          entity_id: sensor.recipe_sensor_2

send_recipe_notification:
  alias: ""Send Recipe Notification""
  sequence:
    - service: notify.sreejith
      data:
        message: >
          {% set file_path = '/config/www/recipe_script_output.json' %}
          {% set content = (states('sensor.recipe_script_output') or 'No content') %}
          {{ content }}

turn_on_recipe_switch:
  alias: ""Turn On Recipe Switch""
  sequence:
    - service: input_boolean.turn_on
      entity_id: input_boolean.recipe_switch

turn_off_recipe_switch:
  alias: ""Turn Off Recipe Switch""
  sequence:
    - service: input_boolean.turn_off
      entity_id: input_boolean.recipe_switch"
nqqQvazr,Get Recipe Script,sreejith2904,Python,Monday 2nd of September 2024 01:37:57 AM CDT,"import requests
import random
import json
import sys

# Replace these variables with your actual Linkding server URL and API token
LINKDING_SERVER_URL = ""http://10.0.0.101:9090""
API_TOKEN = ""Token""

# Function to retrieve bookmarks by tag
def get_bookmarks_by_tag(tag):
    url = f""{LINKDING_SERVER_URL}/api/bookmarks/?tags={tag}""
    headers = {
        ""Authorization"": f""Token {API_TOKEN}""
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        bookmarks = response.json().get(""results"", [])
        return bookmarks
    else:
        print(f""Failed to retrieve bookmarks by tag. Status code: {response.status_code}"")
        print(response.text)
        return []

def filter_bookmarks_by_tag(bookmarks, tag):
    tag = tag.lower()
    filtered_bookmarks = [
        bookmark for bookmark in bookmarks
        if tag in [t.lower() for t in bookmark.get(""tag_names"", [])]
    ]
    return filtered_bookmarks


# Function to pick 3 random bookmarks and print their fields
def print_random_bookmarks(bookmarks, tag, num=3):

    bookmarks = filter_bookmarks_by_tag(bookmarks, tag)

    if len(bookmarks) < num:
        print(f""Less than {num} bookmarks found. Printing all available bookmarks:"")
        num = len(bookmarks)

    random_bookmarks = random.sample(bookmarks, num)

    response = {}
    for i, bookmark in enumerate(random_bookmarks):
        response[""Title_"" + str(i+1)] = bookmark.get(""title"")
        response[""URL_"" + str(i+1)] = bookmark.get(""url"")
        response[""Description_"" + str(i+1)] = bookmark.get(""description"", ""No description available"")

    with open('/config/www/recipe_script_output.json', 'w') as f:
        json.dump(response, f)

    print(json.dumps(response))


# Main function
if __name__ == ""__main__"":
    # Check if the tag is passed as an argument
    if len(sys.argv) > 1:
        tag = sys.argv[1]
    else:
        print(""Please provide a tag as a parameter."")
        sys.exit(1)

    bookmarks = get_bookmarks_by_tag(tag)

    if bookmarks:
        print_random_bookmarks(bookmarks, tag)
    else:
        print(""No bookmarks found for the specified tag."")"
4yWa89XP,Bus,Spocoman,Java,Monday 2nd of September 2024 01:37:53 AM CDT,"import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int passengers = Integer.parseInt(scanner.nextLine()),
                stations = Integer.parseInt(scanner.nextLine()),
                outputPassengers, inputPassengers;

        for (int i = 1; i <= stations; i++) {
            outputPassengers = Integer.parseInt(scanner.nextLine());
            inputPassengers = Integer.parseInt(scanner.nextLine());
            passengers += inputPassengers - outputPassengers;

            if (i % 2 == 1) {
                passengers += 2;
            } else {
                passengers -= 2;
            }
        }

        System.out.println(""The final number of passengers is : "" + passengers);
    }
}"
X9MDMpdZ,Bracelet Stand,Spocoman,Java,Monday 2nd of September 2024 01:21:06 AM CDT,"import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        double dayCash = Double.parseDouble(scanner.nextLine()),
                dayProfit = Double.parseDouble(scanner.nextLine()),
                cost = Double.parseDouble(scanner.nextLine()),
                giftPrice = Double.parseDouble(scanner.nextLine()),
                total = (dayCash + dayProfit) * 5 - cost;

        if (total >= giftPrice) {
            System.out.printf(""Profit: %.2f BGN, the gift has been purchased."", total);
        } else {
            System.out.printf(""Insufficient money: %.2f BGN."", giftPrice - total);
        }
    }
}"
R8t7hp1F,Bonus Score,Spocoman,Java,Monday 2nd of September 2024 01:10:19 AM CDT,"import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int number = Integer.parseInt(scanner.nextLine());
        double bonus = 0;

        if (number <= 100) {
            bonus = 5;
        } else if (number > 1000) {
            bonus = number * 0.1;
        } else {
            bonus = number * 0.2;
        }

        if (number % 2 == 0) {
            bonus++;
        } else if (number % 10 == 5) {
            bonus += 2;
        }

        System.out.printf(""%f\n%f\n"", bonus, number + bonus);
    }
}"
3KFbikjq,Experience,xcage88,TypeScript,Sunday 1st of September 2024 11:49:13 PM CDT,"import { GetServerSidePropsContext } from 'next';
import { useRouter } from 'next/navigation';
import { useEffect, useState } from 'react';
import { useDispatch } from 'react-redux';

//* store
import { setPageTitle } from '@/store/themeConfigSlice';

//* utils
import { config } from '@/configs';
import { getData, postData, postFile, putData } from '@/utils/fetch';
import { notValidMsg, requiredMsg } from '@/utils/regex';


//* middleware
import WithAuth from '@/middlewares/WithAuth';

//* component
import InputMessage from '@/components/core/Alert/InputMessage';
import { showMessage } from '@/components/core/Alert/ShowMessage';
import Button from '@/components/core/Button';
import TextInput from '@/components/core/TextInput';

//* hook form
import CKEditorComp from '@/components/core/InputTextEditor/CKEditor';
import { yupResolver } from '@hookform/resolvers/yup';
import { useForm } from 'react-hook-form';
import * as yup from 'yup';
import TextArea from '@/components/core/TextArea/TextArea';
import Spinner from '@/components/core/spinner';
import { CloseIcon } from '@/components/icon/close-icon';
import SelectInput from '@/components/core/SelectInput';
import { useTranslation } from 'react-i18next';
import { EyeIcon } from '@/components/icon/eyes';
import { EyeOff } from '@/components/icon/eye-off-icon';
import { yearOption, monthsOptions } from '@/data/fullDate';
import { regexAllCharacter, regexAlphanumeric, regexAlphabetsNumbers } from '@/utils/regex-message';
import InputDropdown3 from '@/components/core/InputDropdown3';
import { FormExperienceType } from '@/types/profile';
import Checkbox from '@/components/core/Checkbox';

interface IInputExperience {
    experience: FormExperienceType
}

const schema = yup.object().shape({
    company: yup.string().required().matches(regexAlphanumeric.regex, regexAlphabetsNumbers.msg),
    company_position: yup.string().required().matches(regexAlphanumeric.regex, regexAlphanumeric.msg),
    address: yup.string().required().matches(regexAllCharacter.regex, regexAllCharacter.msg),
    position: yup.number().required(),
    start_date: yup.string(),
    end_date: yup.string(),
    description: yup.string().required().matches(regexAllCharacter.regex, regexAllCharacter.msg),
    // start_month: yup.string().required(requiredMsg('Bulan Masuk')),
    // start_year: yup.string().required(requiredMsg('Tahun Masuk')),
    // end_month: yup.string().required(requiredMsg('Bulan Keluar')),
    // end_year: yup.string().required(requiredMsg('Tahun Keluar')),
})

function InputExperience({experience}: IInputExperience) {

    const { t } = useTranslation();
    const router = useRouter()
    const dispatch = useDispatch()

    const [form, setForm] = useState({
        company: '' || experience?.company,
        company_position: '' || experience?.company_position,
        address: '' || experience?.address,
        position: '' || experience?.position,
        start_date: '' || experience?.start_date,
        end_date: experience?.end_date || '',
        description: '' || experience?.description,
        currently_working: experience?.currently_working || false
    })

    const [select, setSelect] = useState({
        start_year: '',
        end_year: '',
        start_month: '',
        end_month: '',
    })

    // schema
    const {
        register,
        handleSubmit,
        formState: {errors},
        trigger,
        setValue
    } = useForm({
        resolver: yupResolver(schema)
    })

    const [isLoading, setIsLoading] = useState<boolean>(false)
    const [autoField, setAutoField] = useState<any[]>([])
    const [endYearOptions, setEndYearOptions] = useState(yearOption())

    // const { end_date, ...withoutEndDate } = form

    const handleChangeInput = (e: any) => {
        const {name, value} = e.target
        if(!autoField.includes(name)){
            setForm({...form, [name]: value})
            trigger(name)
        }else{
            setForm({...form, [name]: value})
        }
    }

    const handleAutoField = (e: any) => {
        const {name, value} = e.target
        setAutoField([...autoField, name])
        setValue(name, value)
        if(value != ''){
            trigger(name)
        }
    }

    const handleChangeSelect = (e: any) => {
        const {name, value} = e.target
        setSelect({ ...select ,[name]: value})
        if(name == 'start_year'){
            updateEndYear(value)
        }

        if(name == 'end_year' && parseInt(value) <= parseInt(select.start_year)){
            setSelect({...select, end_year: ''})
        }
    }

    const updateEndYear = (startYear: string) => {
        const updatedEndYearOptions = yearOption().filter(option => parseInt(option.value) >= parseInt(startYear));
        setEndYearOptions(updatedEndYearOptions);

        // Reset end_year if it is before the start_year
        if (select.end_year && parseInt(select.end_year) <= parseInt(startYear)) {
            setSelect(prevSelect => ({ ...prevSelect, end_year: '' }));
            // setValue('end_year', '');
        }  
    }

    const handleCheckbox = (e: any) => {
        const {name, checked} = e.target
        setForm({...form, [name]: checked})
    }

    const convertDate = (date: string) => {
        const month = date?.split(""-"")[1]
        const year = date?.split(""-"")[0]
        return `${month} ${year}`
    }

    useEffect(() => {

        setSelect({
            start_month: convertDate(form.start_date).split("" "")[0],
            start_year: convertDate(form.start_date).split("" "")[1],
            end_month: form.currently_working
              ? """"
              : convertDate(form.end_date).split("" "")[0],
            end_year: form.currently_working
              ? """"
              : convertDate(form.end_date).split("" "")[1],
        })
      
    },[])

    useEffect(() => {
        const startDate = `${select.start_year}-${select.start_month}`
        const endDate = form.currently_working ? null :`${select.end_year}-${select.end_month}`
        setForm((prevForm: any) => ({
            ...prevForm,
            start_date: startDate,
            end_date: endDate,
        }))
    },[select])

    const handleSaveAction = async () => {
        const { company, company_position, position, address, description } = form

        if(company && company_position && position && address && description){
            const postForm = {
                ...form,
                end_date: form.currently_working ? null : form.end_date
            }
            if(experience){
                try {
                    setIsLoading(true);
                    await putData(`/experience/${experience.id}`, postForm);
                    showMessage(`${t(""Successfully updated"")}`);
                    router.push('./');
                    setIsLoading(false);
                } catch (error: any) {
                    showMessage(`${t(""Failed to update"")}`, 'error');
                    setIsLoading(false);
                }
            } else {
                //* ADD ACTION
                try {
                    setIsLoading(true);
                    const data = await postData('/experience', postForm);
                    showMessage(`${t(""Successfully added"")}`);
                    router.push('./');
                    console.log(data)
                    setIsLoading(false);
                } catch (error: any) {
                    showMessage(`${t(""Failed to add"")}`, 'error');
                    setIsLoading(false);
                }
            }
        }
    }

    return (
        <>
            <section className="""">
                <form 
                    onSubmit={handleSubmit(handleSaveAction)}
                >
                    <div className=""mb-5 flex flex-col gap-5 md:flex-row md:items-center"">
                        <h5 className=""sm:pb-2 text-lg font-semibold dark:text-white-light"">{experience ? 'Edit' : t(""Create"")} {t(""Experience"")}</h5>
                    </div>
                    <div className=""w-full border-b border-b-zinc-300 border-dashed""></div>

                    <div className=""w-full flex flex-col"">

                        {/* Basic Input */}
                        <div className=""w-full flex flex-col sm:flex-row justify-between gap-y-6 sm:gap-y-0 gap-x-10 py-6 sm:py-8 border-b border-b-zinc-300 border-dashed box-border"">
                            <div className=""flex flex-col shrink-0 sm:py-6 sm:w-[30%]"">
                                <label htmlFor=""logo"" className='font-semibold text-lg'>{t(""Basic Info"")}</label>
                                <div className=""-mt-1"">{t(""Add some basic info about your Experience from here"")}</div>
                            </div>
                            <div className=""w-full flex flex-col gap-y-3 bg-white rounded-md drop-shadow p-5 sm:p-7"">
                                {/* input company */}
                                <div className=""flex flex-col w-full gap-1"">
                                    <label htmlFor=""company"" className='font-semibold'>{t(""Company"")}</label>
                                    <TextInput
                                        register={register}
                                        errors={errors}
                                        id=""company""
                                        name=""company""
                                        type=""text""
                                        placeholder=""""
                                        value={form.company}
                                        className=""w-full cursor-auto overflow-hidden rounded-md focus:outline-primary bg-white text-black""
                                        onChange={handleChangeInput}
                                        onInput={handleAutoField}
                                    />
                                </div>

                                {/* input company_position */}
                                <div className=""flex flex-col w-full gap-1"">
                                    <label htmlFor=""company_position"" className='font-semibold'>{t(""Company Position"")}</label>
                                    <TextInput
                                        register={register}
                                        errors={errors}
                                        id=""company_position""
                                        name=""company_position""
                                        type=""text""
                                        placeholder=""""
                                        value={form.company_position}
                                        className=""w-full cursor-auto overflow-hidden rounded-md focus:outline-primary bg-white text-black""
                                        onChange={handleChangeInput}
                                        onInput={handleAutoField}
                                    />
                                </div>

                                {/* input company */}
                                <div className=""flex flex-col w-full gap-1"">
                                    <label htmlFor=""position"" className='font-semibold'>{t(""Position"")}</label>
                                    <TextInput
                                        register={register}
                                        errors={errors}
                                        id=""position""
                                        name=""position""
                                        type=""number""
                                        placeholder=""""
                                        value={form.position}
                                        className=""w-full cursor-auto overflow-hidden rounded-md focus:outline-primary bg-white text-black""
                                        onChange={handleChangeInput}
                                        onInput={handleAutoField}
                                    />
                                </div>

                                {/* input company */}
                                <div className=""flex flex-col w-full gap-1"">
                                    <label htmlFor=""address"" className='font-semibold'>{t(""Address"")}</label>
                                    <TextArea
                                        register={register}
                                        errors={errors}
                                        id=""address""
                                        name=""address""
                                        type=""text""
                                        placeholder=""""
                                        value={form.address}
                                        className=""w-full cursor-auto overflow-hidden rounded-md focus:outline-primary bg-white text-black""
                                        onChange={handleChangeInput}
                                        onInput={handleAutoField}
                                    />
                                </div>

                                <div className=""flex flex-col w-full gap-1"">
                                    <label htmlFor=""position"" className='font-semibold'>{t(""Description"")}</label>
                                    <TextArea
                                        register={register}
                                        errors={errors}
                                        id=""description""
                                        name=""description""
                                        type=""text""
                                        placeholder=""""
                                        value={form.description}
                                        className=""w-full cursor-auto overflow-hidden rounded-md focus:outline-primary bg-white text-black""
                                        onChange={handleChangeInput}
                                        onInput={handleAutoField}
                                    />
                                </div>

                                
                            </div>
                        </div>

                        <div className=""w-full flex flex-col sm:flex-row justify-between gap-y-6 sm:gap-y-0 gap-x-10 py-6 sm:py-8 border-b border-b-zinc-300 border-dashed box-border"">
                            <div className=""flex flex-col shrink-0 sm:py-6 sm:w-[30%]"">
                                <label htmlFor=""logo"" className='font-semibold text-lg'>{t(""Date"")}</label>
                                <div className=""-mt-1"">{t(""Add Date from here"")}</div>
                            </div>
                            <div className=""w-full flex flex-col gap-y-3 bg-white rounded-md drop-shadow p-5 sm:p-7"">
                                <div className='flex flex-row items-center w-full gap-2'>
                                    <Checkbox
                                        id='currently_working'
                                        name='currently_working'
                                        checked={form.currently_working}
                                        onChange={handleCheckbox}
                                        disabled={isLoading}
                                    />
                                    <div className='font-semibold'>
                                        {t('Currently Working')}
                                    </div>
                                </div>

                                <div>
                                    <label htmlFor=""Start"">{t('Start date')}</label>
                                    <div className='border border-dashed p-4 rounded-md'>
                                        <div className='flex flex-col w-full gap-1'>
                                            <label htmlFor=""start_month"" className='font-semibold'>{t('Month')}</label>
                                            <InputDropdown3
                                                register={register}
                                                errors={errors}
                                                name='start_month'
                                                placeholder=''
                                                option={monthsOptions}
                                                form={select?.start_month}
                                                onChange={handleChangeSelect}
                                            />
                                        </div>

                                        <div className='flex flex-col w-full gap-1'>
                                            <label htmlFor=""start_year"" className='font-semibold'>{t('Year')}</label>
                                            <InputDropdown3
                                                register={register}
                                                errors={errors}
                                                name='start_year'
                                                placeholder=''
                                                option={yearOption()}
                                                form={select?.start_year}
                                                onChange={handleChangeSelect}
                                            />
                                        </div>
                                    </div>
                                </div>
                                <div className={`mt-4 ${form?.currently_working ? ""opacity-50 cursor-not-allowed "" : """"}`}>
                                    <label htmlFor=""Start"">{t('End date')}</label>
                                    <div className='border border-dashed p-4 rounded-md'>
                                        <div className='flex flex-col w-full gap-1'>
                                            <label htmlFor=""end_month"" className='font-semibold'>{t('Month')}</label>
                                            <InputDropdown3
                                                register={register}
                                                errors={errors}
                                                name='end_month'
                                                placeholder=''
                                                option={monthsOptions}
                                                form={select?.end_month}
                                                onChange={handleChangeSelect}
                                            />
                                        </div>

                                        <div className='flex flex-col w-full gap-1'>
                                            <label htmlFor=""end_year"" className='font-semibold'>{t('Year')}</label>
                                            <InputDropdown3
                                                register={register}
                                                errors={errors}
                                                name='end_year'
                                                placeholder=''
                                                option={endYearOptions}
                                                form={select?.end_year}
                                                onChange={handleChangeSelect}
                                            />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div className=""flex gap-3 w-full justify-end mt-7 font-semibold py-5 sticky bottom-0 backdrop-blur-sm bg-white/30"">
                        <button type=""button"" className=""cursor-pointer border text-primary hover:opacity-70 border-primary px-5 py-4 rounded-md""
                        onClick={() => router.push('./')}>
                        {t(""Back"")}</button>
                        
                        {
                        // !form?.icon || 
                        !form?.company || 
                        !form?.company_position ||
                        !form?.address || 
                        !form?.position ||
                        !form?.description ? (
                            <button type=""button"" className=""border border-zinc-200 cursor-not-allowed text-white bg-[#e2e8f0] px-5 py-4 rounded-md""
                            >{t(""Save"")}</button>
                        ) : (
                            <button type='submit' className={`${!isLoading ? 'bg-primary cursor-pointer' : 'bg-[#e2e8f0] cursor-not-allowed'} cursor-pointer border  hover:saturate-50 text-white px-5 py-4 rounded-md`}
                            disabled={isLoading}>
                            {!isLoading ? t(""Save"") : (
                                <Spinner />
                            )}
                            </button>
                        )}
                    </div>
                </form>
            </section>
        </>
    )
}

export default WithAuth(InputExperience)

export async function getServerSideProps({req, query}: GetServerSidePropsContext) {
    const {id} = query

    if(id){
        try {
            const {data} = await getData(`/experience/${id}`, '', '', req)
            return {
                props: {
                    experience: data.experience
                }
            }
        } catch (error: any) {
            return error
        }
    }

    return {
        props: {}
    }
}"
rFc7dygx,Dehumidifier example,xangin,YAML,Sunday 1st of September 2024 11:45:00 PM CDT,"humidifier:
 - platform: humidifier_template
   name: ""Hiatachi RD-22FC""
   unique_id: rd22fc_dehumidifier
   switch_id: ""fan.rd22fc_fan""
   state_template: ""{{ states('fan.rd22fc_fan') }}""
   mode_template: ""{{ state_attr('fan.rd22fc_fan', 'preset_mode') }}""
   current_humidity_template: ""{{ states('sensor.rd22fc_humidity_indoor') }}""
   target_humidity_template: ""{ states('number.rd22fc_relative_humidity') }}""
   mode_list_template: ""{{ state_attr('fan.rd22fc_fan', 'preset_modes') }}""
   action_template: ""{{ state_attr('fan.rd22fc_fan', 'preset_mode') }}""
   
   max_humidity: 70
   min_humidity: 40
   type: dehumidifier
   
   modes:
     - ""normal""
     - ""home""
     - ""boost""
     - ""sleep""
     - ""eco""
   
   set_mode_action:
     - service: fan.set_preset_mode
       target:
         entity_id: fan.rd22fc_fan
       data:
         preset_mode: ""{{ mode }}""
   
   set_target_humidity_action:
     - service: number.set_value
       target:
         entity_id: number.rd22fc_relative_humidity
       data:
         value: ""{{ humidity }}""
"
F2pqjCRt,Untitled,permanaj,JSON,Sunday 1st of September 2024 11:40:17 PM CDT,
BpD8wQnC,Asymptote (HomeWork 1) Pahomov,houseofmath,Asymptote,Sunday 1st of September 2024 11:24:10 PM CDT,"import geometry; 
defaultpen(fontsize(9pt)); //–≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –±—É–¥—É—Ç —Ä—É—á–∫–æ–π 12 —à—Ä–∏—Ñ—Ç–æ–º
dotfactor=4; //—Ä–∞–∑–º–µ—Ä —Ç–æ—á–µ–∫
size(9cm,0); //—à–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞
transform t=rotate(-40)*scale(0.75);

pair A, B, C, Ep, L, K, O; //–æ–±—ä—è–≤–ª—è—é —Ç–æ—á–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
A=(0,0); B=(3,7); C=(10,0);
Ep=point(B--C,0.5*length(B--C));
L=(4.5,0); K=(3,0);
O=intersectionpoint(line(B,L),line(A,Ep));

draw (B--K);
draw (A--Ep);
draw (B--L);
draw (A--B--C--cycle);

dot(A, UnFill);
dot(B, UnFill);
dot(C, UnFill);
dot(Ep, UnFill);
dot(L, UnFill);
dot(K, UnFill);
dot(O, UnFill);

markrightangle(size=5, A, K, B); //–ø—Ä—è–º–æ–π —É–≥–æ–ª
markangle(n=2, radius=15, space=0.05cm, A, B, L); // —É–≥–æ–ª ABL
markangle(n=2, radius=10, space=0.05cm, L, B, C); // —É–≥–æ–ª LBC
markangle(radius=10, C, A, Ep); // —É–≥–æ–ª EAC
markangle(radius=15, Ep, A, B); // —É–≥–æ–ª BAE


label(""$A$"", A, SW);
label(""$B$"", B, N);
label(""$C$"", C, SE);
label(""$E$"", Ep, NE);
label(""$L$"", L, S);
label(""$K$"", K, NE);
label(""$O$"", O, WNW);

draw(Label(""$6a$"", Relative(0.5), align=W, black), A--B, opacity(0));
draw(Label(""$2b$"", Relative(0.65), align=1.25E, black), B--C, opacity(0));

label(""$3a$"", A--L, S);
label(""$b$"", L--C, S);
label(""$2a$"", O--L, E);
//label(""$2b$"", B--C, E);
label(""$4a$"", B--O, E);"
5ZxRg16J,AttributeError: 'NoneType' object has no attribute 'name',basedcount_bot,Python,Sunday 1st of September 2024 10:07:32 PM CDT,"Traceback (most recent call last):
  File ""/home/gmktec/Programming/Bots/basedcount_bot/basedcount_bot.py"", line 46, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/home/gmktec/Programming/Bots/basedcount_bot/basedcount_bot.py"", line 275, in read_comments
    parent_info = await get_parent_info(comment)
  File ""/home/gmktec/Programming/Bots/basedcount_bot/basedcount_bot.py"", line 237, in get_parent_info
    parent_author = parent_post.author.name
AttributeError: 'NoneType' object has no attribute 'name'
"
