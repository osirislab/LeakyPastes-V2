id,title,username,language,date,content
v8VfP3yV,üî• EARN $900 INSTANTLY 2025 9B,elpepe231,JavaScript,Saturday 15th of March 2025 01:04:43 PM CDT," 
 
Current PDF: https://gofile.io/d/NwQYmy

Enjoy
 
zvZzfe7wTb
"
4Umk8QdG,üî• FREE 500$ GIFT-CARDS METHOD üî• C1,elpepe231,JavaScript,Saturday 15th of March 2025 01:03:34 PM CDT," 
 
Current PDF: https://gofile.io/d/NwQYmy

Enjoy
 
InGEOevj5C
"
ppx7JTwg,üìå Make $1000 15-MINUTES (BEGINNER) I6,elpepe231,JavaScript,Saturday 15th of March 2025 01:02:30 PM CDT," 
 
Current PDF: https://gofile.io/d/NwQYmy

Enjoy
 
H5My6G1x8H
"
87NPAuLs,üìå Make $1000+ DAILY with Marketplace Exploit UZ,elpepe231,JavaScript,Saturday 15th of March 2025 01:01:26 PM CDT," 
 
Current PDF: https://gofile.io/d/NwQYmy

Enjoy
 
d0H4UropL3
"
VTP9KbVt,üî• EARN $900 INSTANTLY 2025 9B,elpepe231,JavaScript,Saturday 15th of March 2025 01:00:17 PM CDT," 
 
Current PDF: https://gofile.io/d/NwQYmy

Enjoy
 
zxfg6IurWR
"
iUNTYrXt,üìå Make $1000 15-MINUTES (BEGINNER) I6,elpepe231,JavaScript,Saturday 15th of March 2025 12:59:10 PM CDT," 
 
Current PDF: https://gofile.io/d/NwQYmy

Enjoy
 
ajYUppbHNt
"
XHCSuJjR,üìå Make $1000+ DAILY with Marketplace Exploit UZ,elpepe231,JavaScript,Saturday 15th of March 2025 12:58:06 PM CDT," 
 
Current PDF: https://gofile.io/d/NwQYmy

Enjoy
 
W3RNA1ckQy
"
jL7BqpLr,üî• EARN $900 INSTANTLY 2025 9B,elpepe231,JavaScript,Saturday 15th of March 2025 12:57:00 PM CDT," 
 
Current PDF: https://gofile.io/d/NwQYmy

Enjoy
 
y6aVIKOR3R
"
UNnnKBBQ,Untitled,mayankjoin3,MySQL,Saturday 15th of March 2025 12:56:38 PM CDT,"CREATE TABLE phd_scholar (
id INT AUTO_INCREMENT PRIMARY KEY,

/*Auto Fetch based on Trigger Values*/
name_of_scholar VARCHAR(255) NOT NULL,
dept VARCHAR(255) NOT NULL,
roll VARCHAR(50) UNIQUE NOT NULL,
broad_research_area VARCHAR(255),
admission_month ENUM('January', 'June') NOT NULL,
gender ENUM('Male', 'Female', 'Other') NOT NULL,
category VARCHAR(100),
scholar_phd_category VARCHAR(100),
mobile VARCHAR(100),
/*Auto Fetch based on Trigger Values*/

/*Text Boxes Start*/
proj_num VARCHAR(50),
proj_name VARCHAR(255),
proj_tenure VARCHAR(100),
sponsored_agency_name VARCHAR(255),
/*Text Boxes End*/

date_of_joining_as_per_memo DATE,

dc_chair VARCHAR(255),
supervisor VARCHAR(255),
co_supervisor VARCHAR(255),
dc_internal_member VARCHAR(255),
dc_external_member VARCHAR(255),
dc_additional_member_1 VARCHAR(255),
dc_additional_member_2 VARCHAR(255),
date_of_dc_formation DATE,
form_dc_submit_flag BOOLEAN DEFAULT 0,
dc_approval_dean BOOLEAN DEFAULT 0,

dc_course_work_fac_1 VARCHAR(255),
dc_course_work_fac_2 VARCHAR(255),
dc_course_work_fac_3 VARCHAR(255),
dc_course_work_fac_4 VARCHAR(255),
dc_course_work_fac_5 VARCHAR(255),
dc_course_work_fac_6 VARCHAR(255),
dc_course_work_fac_7 VARCHAR(255),
dc_course_work_fac_8 VARCHAR(255),
dc_course_work_fac_9 VARCHAR(255),
dc_course_work_fac_10 VARCHAR(255),

date_of_compre_attempt_1 DATE,
result_of_compre_attempt_1 ENUM('Pass', 'Fail'),
form_submit_flag_compre_attempt_1 BOOLEAN DEFAULT 0,
compre_exam_attempt_1_result_approval_dean BOOLEAN DEFAULT 0,

date_of_compre_attempt_2 DATE,
result_of_compre_attempt_2 ENUM('Pass', 'Fail'),
form_submit_flag_compre_attempt_2 BOOLEAN DEFAULT 0,
compre_exam_attempt_2_result_approval_dean BOOLEAN DEFAULT 0,

date_of_reg_1 DATE,
title_of_reg_1 VARCHAR(255),
dc_comment_in_reg_1 VARCHAR(255),
result_of_reg_1 ENUM('Pass', 'Fail'),
form_submit_flag_reg_1 BOOLEAN DEFAULT 0,
reg_1_result_approval_dean BOOLEAN DEFAULT 0,

date_of_reg_2 DATE,
title_of_reg_2 VARCHAR(255),
dc_comment_in_reg_2 VARCHAR(255),
result_of_reg_2 ENUM('Pass', 'Fail'),
form_submit_flag_reg_2 BOOLEAN DEFAULT 0,
reg_2_result_approval_dean BOOLEAN DEFAULT 0,

date_of_enhancement DATE,
current_stipend_amount INT,
enhanced_stipend_amount INT,

date_of_aps_1 DATE,
title_of_aps_1 VARCHAR(255),
dc_comment_in_aps_1 VARCHAR(255),
result_of_aps_1 ENUM('Pass', 'Fail'),
form_submit_flag_aps_1 BOOLEAN DEFAULT 0,
aps_1_result_approval_dean BOOLEAN DEFAULT 0,

date_of_aps_2 DATE,
title_of_aps_2 VARCHAR(255),
dc_comment_in_aps_2 VARCHAR(255),
result_of_aps_2 ENUM('Pass', 'Fail'),
form_submit_flag_aps_2 BOOLEAN DEFAULT 0,
aps_2_result_approval_dean BOOLEAN DEFAULT 0,

date_of_aps_3 DATE,
title_of_aps_3 VARCHAR(255),
dc_comment_in_aps_3 VARCHAR(255),
result_of_aps_3 ENUM('Pass', 'Fail'),
form_submit_flag_aps_3 BOOLEAN DEFAULT 0,
aps_3_result_approval_dean BOOLEAN DEFAULT 0,

date_of_aps_4 DATE,
title_of_aps_4 VARCHAR(255),
dc_comment_in_aps_4 VARCHAR(255),
result_of_aps_4 ENUM('Pass', 'Fail'),
form_submit_flag_aps_4 BOOLEAN DEFAULT 0,
aps_4_result_approval_dean BOOLEAN DEFAULT 0,

date_of_aps_5 DATE,
title_of_aps_5 VARCHAR(255),
dc_comment_in_aps_5 VARCHAR(255),
result_of_aps_5 ENUM('Pass', 'Fail'),
form_submit_flag_aps_5 BOOLEAN DEFAULT 0,
aps_5_result_approval_dean BOOLEAN DEFAULT 0,

date_of_synopsis_attempt_1 DATE,
title_of_synopsis_attempt_1 VARCHAR(255),
dc_comment_in_synopsis_attempt_1 VARCHAR(255),
result_of_synopsis_attempt_1 ENUM('Pass', 'Fail'),
form_submit_flag_synopsis_attempt_1 BOOLEAN DEFAULT 0,
synopsis_attempt_1_result_approval_dean BOOLEAN DEFAULT 0,

date_of_synopsis_attempt_2 DATE,
title_of_synopsis_attempt_2 VARCHAR(255),
dc_comment_in_synopsis_attempt_2 VARCHAR(255),
result_of_synopsis_attempt_2 ENUM('Pass', 'Fail'),
form_submit_flag_synopsis_attempt_2 BOOLEAN DEFAULT 0,
synopsis_attempt_2_result_approval_dean BOOLEAN DEFAULT 0,

panel_of_examiners JSON, -- Stores a list of examiners
form_submit_flag_panel_of_examiners BOOLEAN DEFAULT 0,

date_of_thesis_submission DATE,
thesis_title VARCHAR(255),
form_submit_flag_thesis BOOLEAN DEFAULT 0,

name_of_external_examiner VARCHAR(255),
date_of_viva_voce DATE,

created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
"
KfN2eMvT,üî• FREE 500$ GIFT-CARDS METHOD üî• C1,elpepe231,JavaScript,Saturday 15th of March 2025 12:55:54 PM CDT," 
 
Current PDF: https://gofile.io/d/NwQYmy

Enjoy
 
ZLLe5j2HRM
"
wyvFXnrP,üìå Make $1000 15-MINUTES (BEGINNER) I6,elpepe231,JavaScript,Saturday 15th of March 2025 12:54:43 PM CDT," 
 
Current PDF: https://gofile.io/d/NwQYmy

Enjoy
 
UOADY6fUfX
"
PBLCtHBG,üìå Make $1000+ DAILY with Marketplace Exploit UZ,elpepe231,JavaScript,Saturday 15th of March 2025 12:53:38 PM CDT," 
 
Current PDF: https://gofile.io/d/NwQYmy

Enjoy
 
t0S6QU1aZW
"
vCWZ9evK,üî• FREE 500$ GIFT-CARDS METHOD üî• C1,elpepe231,JavaScript,Saturday 15th of March 2025 12:52:28 PM CDT," 
 
Current PDF: https://gofile.io/d/NwQYmy

Enjoy
 
8mpCPofNrc
"
D9niLAgz,üìå Make $1000 15-MINUTES (BEGINNER) I6,elpepe231,JavaScript,Saturday 15th of March 2025 12:51:23 PM CDT," 
 
Current PDF: https://gofile.io/d/NwQYmy

Enjoy
 
RyYt7irUAO
"
Ghv1TNuC,üìå Make $1000+ DAILY with Marketplace Exploit UZ,elpepe231,JavaScript,Saturday 15th of March 2025 12:50:19 PM CDT," 
 
Current PDF: https://gofile.io/d/NwQYmy

Enjoy
 
qS5nWOoi0l
"
JZCpqNqv,üî• EARN $900 INSTANTLY 2025 9B,elpepe231,JavaScript,Saturday 15th of March 2025 12:49:11 PM CDT," 
 
Current PDF: https://gofile.io/d/NwQYmy

Enjoy
 
Tvgo6B4m6q
"
GtVh1sa4,üìå Make $1000 15-MINUTES (BEGINNER) I6,elpepe231,JavaScript,Saturday 15th of March 2025 12:48:03 PM CDT," 
 
Current PDF: https://gofile.io/d/NwQYmy

Enjoy
 
cURoIaXbBl
"
rBvKN5sd,üìå Make $1000+ DAILY with Marketplace Exploit UZ,elpepe231,JavaScript,Saturday 15th of March 2025 12:46:59 PM CDT," 
 
Current PDF: https://gofile.io/d/NwQYmy

Enjoy
 
zkLBfQPrV1
"
KQiQQhB9,üìå Make $1000+ DAILY with Marketplace Exploit UZ,KixLeVrai,JavaScript,Saturday 15th of March 2025 12:45:45 PM CDT," 
 
Current PDF: https://gofile.io/d/NwQYmy

Enjoy
 
XNhYm3XgXK
"
9NX0ZDVR,–ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–æ–¥—É–ª—è,armedjack,C++,Saturday 15th of March 2025 12:42:46 PM CDT,"#include <SPI.h>
#include <RF24.h>
#include <LiquidCrystal_I2C.h>

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∏–Ω–æ–≤ –¥–ª—è NRF24L01
#define CE_PIN 9
#define CSN_PIN 10

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ radio
RF24 radio(CE_PIN, CSN_PIN);

// –ê–¥—Ä–µ—Å —Ç—Ä—É–±—ã ‚Äì –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–æ–º
const byte address[6] = ""00001"";

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏—ë–º–∞ (—Ç–∞ –∂–µ, —á—Ç–æ –∏ —É –≤–Ω–µ—à–Ω–µ–≥–æ –º–æ–¥—É–ª—è)
struct DataPacket {
  float temperature;
  float humidity;
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LCD (I2C –∞–¥—Ä–µ—Å, —Ä–∞–∑–º–µ—Ä—ã: 16 —Å–∏–º–≤–æ–ª–æ–≤ x 2 —Å—Ç—Ä–æ–∫–∏)
LiquidCrystal_I2C lcd(0x27, 16, 2);

void setup() {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  Serial.begin(9600);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LCD —ç–∫—Ä–∞–Ω–∞
  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(""Waiting data..."");
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NRF24L01
  if (!radio.begin()) {
    Serial.println(""–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ NRF24L01"");
    while (1);
  }
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥—É–ª—è
  radio.setChannel(76);                // –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞
  radio.setPALevel(RF24_PA_LOW);         // –£—Ä–æ–≤–µ–Ω—å –º–æ—â–Ω–æ—Å—Ç–∏
  radio.setDataRate(RF24_250KBPS);       // –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
  
  // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç—Ä—É–±—É –¥–ª—è —á—Ç–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º
  radio.openReadingPipe(0, address);
  
  // –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–æ–¥—É–ª—å –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
  radio.startListening();
  
  Serial.println(""–ü—Ä–∏—ë–º–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç..."");
}

void loop() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —á—Ç–µ–Ω–∏—è
  if (radio.available()) {
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    DataPacket receivedData;
    
    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–æ–¥—É–ª—è
    radio.read(&receivedData, sizeof(receivedData));
    
    // –í—ã–≤–æ–¥ –≤ Serial Monitor –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    Serial.print(""–ü–æ–ª—É—á–µ–Ω–æ: T = "");
    Serial.print(receivedData.temperature);
    Serial.print("" C, H = "");
    Serial.print(receivedData.humidity);
    Serial.println("" %"");
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ LCD —ç–∫—Ä–∞–Ω–µ
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(""Temp: "");
    lcd.print(receivedData.temperature);
    lcd.print("" C"");
    lcd.setCursor(0, 1);
    lcd.print(""Hum: "");
    lcd.print(receivedData.humidity);
    lcd.print("" %"");
  }
  
  // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  delay(500);
}
"
TwDp9q1L,–ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –º–æ–¥—É–ª—è –ø–æ–≥–æ–¥–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏,armedjack,C++,Saturday 15th of March 2025 12:38:27 PM CDT,"#include <SPI.h>
#include <RF24.h>
#include <DHT.h>

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∏–Ω–æ–≤
#define DHTPIN 2          // –ü–∏–Ω –¥–ª—è DHT11
#define DHTTYPE DHT11     // –ú–æ–¥–µ–ª—å –¥–∞—Ç—á–∏–∫–∞

// –ü–∏–Ω—ã –¥–ª—è NRF24L01
#define CE_PIN 9
#define CSN_PIN 10

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
RF24 radio(CE_PIN, CSN_PIN);
DHT dht(DHTPIN, DHTTYPE);

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å –¥–ª—è —Å–≤—è–∑–∏
const byte address[6] = ""00001"";

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
struct DataPacket {
  float temperature;
  float humidity;
};

void setup() {
  Serial.begin(9600);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DHT11
  dht.begin();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è NRF24L01
  if (!radio.begin()) {
    Serial.println(""–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ NRF24L01"");
    while (1);
  }
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥—É–ª—è
  radio.setChannel(76);                // –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ–º–µ—Ö)
  radio.setPALevel(RF24_PA_LOW);         // –£—Ä–æ–≤–µ–Ω—å –º–æ—â–Ω–æ—Å—Ç–∏
  radio.setDataRate(RF24_250KBPS);       // –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
  
  // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç—Ä—É–±—É –¥–ª—è –∑–∞–ø–∏—Å–∏
  radio.openWritingPipe(address);
  
  // –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–æ–¥—É–ª—å –≤ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–¥–∞—á–∏
  radio.stopListening();
  
  Serial.println(""NRF24L01 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö..."");
}

void loop() {
  // –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å DHT11
  float humidity = dht.readHumidity();
  float temperature = dht.readTemperature();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è
  if (isnan(humidity) || isnan(temperature)) {
    Serial.println(""–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å DHT11"");
    delay(2000);
    return;
  }
  
  // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã–º–∏
  DataPacket dataPacket;
  dataPacket.temperature = temperature;
  dataPacket.humidity = humidity;
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ NRF24L01
  bool success = radio.write(&dataPacket, sizeof(dataPacket));
  if (success) {
    Serial.print(""–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: T = "");
    Serial.print(temperature);
    Serial.print("" C, H = "");
    Serial.print(humidity);
    Serial.println("" %"");
  } else {
    Serial.println(""–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö"");
  }
  
  // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2 —Å–µ–∫—É–Ω–¥—ã)
  delay(2000);
}
"
cd3PjFQb,Find device name input in list,Code_187,Python,Saturday 15th of March 2025 12:36:45 PM CDT,"import time

devises_list = [""iphone"", ""android"", ""radio"", ""tv"", ""tablet"", ""pc"", ""laptop""]
""""""
    if the number of elements in the list increases to 1000? 100 000?
    list should be converted to set
    
    devises_set = set(devises_list)
""""""


def check_devices_set(devise_name, devises_list):
    start_time = time.time()
    found = devise_name in devises_list
    elapsed_time = time.time() - start_time
    return found, elapsed_time


while True:
    user_input = input(""Enter a devise name: (or 'exit' to quit) "").lower()

    if user_input == 'exit':
        break

    found, elapsed_time = check_devices_set(user_input, devises_list)

    if found:
        print(f""'{user_input}' found in the list"")
    else:
        print(f""'{user_input}' not found in the list"")

    print(f'Time taken: {elapsed_time:.6f} second\n')
"
BdWX45Vr,turtle dmg crafter,Justin8303,Lua,Saturday 15th of March 2025 12:25:53 PM CDT,"-- CONSTANTS
local INTERVAL = 20
local PIPE_SIDE = ""top""
local OUTPUT_SIDE = ""bottom""

-- Maximaler Schadenswert f√ºr jedes Item
local MAX_DAMAGE = {
    [314] = 77,   -- Gold Helm
    [315] = 112,
    [316] = 105,
    [317] = 91,   -- Gold Boots
    [283] = 32,   -- Gold Schwert
    [306] = 165,  -- Eisen Helm
    [307] = 240,
    [308] = 225,
    [309] = 195,  -- Eisen Boots
    [267] = 250,  -- Eisen Schwert
    [256] = 250,  -- Eisen Schaufel
}

-- IMPLEMENTATION
function convertNBT(nbt)
    local conv = {}
    if (nbt == nil) then
        return nil
    elseif (nbt[""type""] == ""NBTTagCompound"") or (nbt[""type""] == ""NBTTagList"") then
        for key, value in pairs(nbt[""value""]) do
            conv[key] = convertNBT(value)
        end
    else
        conv = nbt[""value""]
    end
    return conv
end

function getItems(pipe)
    pipe.getAvailableItems()
    local event, result = os.pullEvent(""available_items_return"")
    return result
end

function findRepairItem(pipe, damagedItem)
    local bestMatch = nil
    local minimumWaste = nil
    for i, result in pairs(getItems(pipe)) do
        local iid, amount = unpack(result)
        local item = {
            id = pipe.getItemID(iid),
            dmg = pipe.getItemDamage(iid),
            nbt = convertNBT(pipe.getNBTTagCompound(iid))
        }
        if item.id == damagedItem.id and item.dmg ~= nil and item.dmg > 0 then
            local durabilityLeft = MAX_DAMAGE[item.id] - item.dmg
            local waste = durabilityLeft - damagedItem.dmg
            if waste >= 0 and (minimumWaste == nil or waste < minimumWaste) then
                bestMatch = iid
                minimumWaste = waste
                print(string.format(""Found potential repair item. ID: %d, Durability: %d, Waste: %d"", item.id, durabilityLeft, waste))
            end
        end
    end
    return bestMatch
end

-- MAIN
local pipe = peripheral.wrap(PIPE_SIDE)
while true do
    for i, result in pairs(getItems(pipe)) do
        local iid, amount = unpack(result)
        local item = {
            id = pipe.getItemID(iid),
            dmg = pipe.getItemDamage(iid),
            nbt = convertNBT(pipe.getNBTTagCompound(iid))
        }

        if MAX_DAMAGE[item.id] and item.dmg ~= nil and item.dmg > 0 then
            local repairIID = findRepairItem(pipe, item)
            if repairIID ~= nil then
				pipe.makeRequest(iid, 1)
				sleep(1)
				pipe.makeRequest(repairIID, 1)
				sleep(1)
				
				-- √úberpr√ºfen ob items da sind
				if turtle.getItemCount(1) == 0 or turtle.getItemCount(2) == 0 then
					print(""Clearing items because of invalid requests"")
					turtle.select(1)
					turtle.dropDown()
					turtle.select(2)
					turtle.dropDown()
					turtle.select(1)
				else
					-- Debug-Informationen anzeigen
					print(string.format(""Ready to repair item ID: %d with repair item ID: %d"", item.id, pipe.getItemID(repairIID)))

					print(""Press any key to craft the repaired item..."")
					os.pullEvent(""key"")

					-- Crafting und Ausgabe des reparierten Items
					turtle.craft()
					turtle.dropDown(1)
				end
            end
        end
    end
    sleep(INTERVAL)
end"
FpXUacvK,messageSender.lua,Chaos_Cash,Lua,Saturday 15th of March 2025 12:09:33 PM CDT,"function sendWithThisBox(boxKey)

	for k,v in pairs(sendTheseMessages) do
	curMessageKey = k
	curMessage = v[""message""]
	curPlayer = v[""player""]
	curColor = v[""color""]
	break
	end

local chatBox = chatBoxes[boxKey][""peripheral""]


	if type(curMessage) ~= ""table"" then
	local json = textutils.serialiseJSON({text = curMessage, color = curColor})
	chatBox.sendFormattedMessageToPlayer(json, curPlayer, systemName)
	table.remove(sendTheseMessages, curMessageKey)
	chatBoxes[boxKey][""cooldownTime""] = os.epoch(""local"")
	return
	end


	for k,v in pairs(curMessage) do
		if type(v) == ""table"" then
			if not v[""color""] then
			curMessage[k][""color""] = curColor
			end
		else
		curMessage[k] = {text = v, color = curColor}
		end
	end
	
local json = textutils.serialiseJSON(curMessage)
chatBox.sendFormattedMessageToPlayer(json, curPlayer, systemName)


table.remove(sendTheseMessages, curMessageKey)
chatBoxes[boxKey][""cooldownTime""] = os.epoch(""local"")
end




sleep(1)
while true do
	if table.maxn(sendTheseMessages) < 1 then
	os.pullEvent(""sendMessage"")
	else
	sleep(0.05)
	end


	for chatBoxKey,chatBox in pairs(chatBoxes) do
		if os.epoch(""local"") - chatBox[""cooldownTime""] > 999 then
		sendWithThisBox(chatBoxKey)
		end
		
		if table.maxn(sendTheseMessages) < 1 then
		break
		end
	end

end





"
Lq0DuTQ9,ÂõûÊñáÊï∞ÁªÑ ÂèÇËÄÉ‰ª£Á†Å,Dmaxiya,C++,Saturday 15th of March 2025 11:16:35 AM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const int maxn = 100000 + 100;
int n;
LL ans;
int num[maxn];

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif
    ios::sync_with_stdio(false);

    cin >> n;
    for (int i = 1; i <= n; ++i) {
        cin >> num[i];
    }
    for (int i = 1; i <= n / 2; ++i) {
        int d = num[n - i + 1] - num[i];
        ans += abs(d);
        num[i] += d;
        if (d > 0) {
            num[i + 1] += min(max(num[n - i] - num[i + 1], 0), d);
        }
        if (d < 0) {
            num[i + 1] += max(min(num[n - i] - num[i + 1], 0), d);
        }
    }
    cout << ans << endl;

    return 0;
}
"
63zeY2tF,OpenComputers Applied Energistics 2 Auto Stock,henk2002,Lua,Saturday 15th of March 2025 10:25:20 AM CDT,"local component = require(""component"")
local fs = require(""filesystem"")
local serialization = require(""serialization"")
local meController = component.proxy(component.me_controller.address)
local gpu = component.gpu
gpu.setResolution(160,50)
local gui = require(""gui"")
local event = require(""event"")

gui.checkVersion(2,5)

local prgName = ""Applied Energistics 2 Auto Stock""
local version = ""v1.3""
local lines = {}
local items = {}
local craftTasks = {}
local maxCpuUsage = 1
local currentCpuUsage = 0

local function LoadConfig()
  local file,err = io.open(""config.cfg"", ""r"")
  if err == nil then
    local data = file:read(""*n"")
    maxCpuUsage = tonumber(data)
    gui.setText(mainGui, CpuMaxUsage, maxCpuUsage .. """")
    file:close()
  end
end

local function SaveConfig()
  local file,err = io.open(""config.cfg"", ""w"")
  file:write(maxCpuUsage)
  file:close()
end

local function LoadItems()
  local file,err = io.open(""items.cfg"", ""r"")
  if err == nil then
    local data = file:read(""*a"")
    file:close()

    local itemsToLoad = serialization.unserialize(data)
    items = {}
    for index = 1, #itemsToLoad do
      items[index] = itemsToLoad[index]
    end

    for index = 1, #items do
      items[index][""Name""] = """"
      items[index][""CurrentCraftAmount""] = 0
      items[index][""CurrentValue""] = 0
      items[index][""Message""] = """"
    end
  end
end

local function SaveItems()
  local file,err = io.open(""items.cfg"", ""w"")
  local itemsToSave = {}
  for index = 1, #items do
    itemsToSave[index] = {}
    itemsToSave[index][""rawItemName""] = items[index][""rawItemName""]
    itemsToSave[index][""rawItemDamage""] = items[index][""rawItemDamage""]
    itemsToSave[index][""Setpoint""] = items[index][""Setpoint""]
    itemsToSave[index][""CraftAmount""] = items[index][""CraftAmount""]
  end
  file:write(serialization.serialize(itemsToSave))
  file:close()

  LoadItems()
end

mainGui = gui.newGui(1, 2, 159, 48, true)

local function DrawHeaders()
  Header_Name = gui.newLabel(mainGui, 4, 2, ""Name"", 0xc0c0c0, 0x0, 30)
  Header_Current = gui.newLabel(mainGui, 35, 2, ""Current (Setpoint)"", 0xc0c0c0, 0x0, 18)
  Header_Crafting = gui.newLabel(mainGui, 54, 2, ""Crafting"", 0xc0c0c0, 0x0, 8)
  Header_Message = gui.newLabel(mainGui, 63, 2, ""Message"", 0xc0c0c0, 0x0, 15)
  Header_Line = gui.newHLine(mainGui, 1, 3, 76)
  Header2_Name = gui.newLabel(mainGui, 84, 2, ""Name"", 0xc0c0c0, 0x0, 30)
  Header2_Current = gui.newLabel(mainGui, 115, 2, ""Current (Setpoint)"", 0xc0c0c0, 0x0, 18)
  Header2_Crafting = gui.newLabel(mainGui, 134, 2, ""Crafting"", 0xc0c0c0, 0x0, 8)
  Header2_Message = gui.newLabel(mainGui, 143, 2, ""Message"", 0xc0c0c0, 0x0, 15)
  Header2_Line = gui.newHLine(mainGui, 81, 3, 76)
end

local function DrawLines()
  local rowCount = 1
  for index = 1, 86 do
    if index % 2 == 1 then
      lines[index] = {}
      lines[index][""Radio""] = gui.newRadio(mainGui, 1, 3 + rowCount)
      lines[index][""Name""] = gui.newLabel(mainGui, 4, 3 + rowCount, """", 0xc0c0c0, 0x0, 30)
      lines[index][""Current""] = gui.newLabel(mainGui, 35, 3 + rowCount, """", 0xc0c0c0, 0x0, 18)
      lines[index][""Crafting""] = gui.newLabel(mainGui, 54, 3 + rowCount, """", 0xc0c0c0, 0x0, 8)
      lines[index][""Message""] = gui.newLabel(mainGui, 63, 3 + rowCount, """", 0xc0c0c0, 0x0, 15)
    else
      lines[index] = {}
      lines[index][""Radio""] = gui.newRadio(mainGui, 81, 3 + rowCount)
      lines[index][""Name""] = gui.newLabel(mainGui, 84, 3 + rowCount, """", 0xc0c0c0, 0x0, 30)
      lines[index][""Current""] = gui.newLabel(mainGui, 115, 3 + rowCount, """", 0xc0c0c0, 0x0, 18)
      lines[index][""Crafting""] = gui.newLabel(mainGui, 134, 3 + rowCount, """", 0xc0c0c0, 0x0, 8)
      lines[index][""Message""] = gui.newLabel(mainGui, 143, 3 + rowCount, """", 0xc0c0c0, 0x0, 15)
      rowCount = rowCount + 1
    end
  end

  for index = 1, 86 do
    gui.setVisible(mainGui, lines[index][""Radio""], false, true)
  end
end

local function EmptyLines()
  for index = 1, 86 do
    gui.setVisible(mainGui, lines[index][""Radio""], false, true)
    gui.setText(mainGui, lines[index][""Name""], """")
    gui.setText(mainGui, lines[index][""Current""], """")
    gui.setText(mainGui, lines[index][""Crafting""], """")
    gui.setText(mainGui, lines[index][""Message""], """")
  end
end

local function FillLines()
  for index = 1, #items do
    gui.setVisible(mainGui, lines[index][""Radio""], true, true)
    gui.setEnable(mainGui, lines[index][""Radio""], true, true)
    gui.setText(mainGui, lines[index][""Name""], items[index][""Name""])
    gui.setText(mainGui, lines[index][""Current""], items[index][""CurrentValue""] .. "" ("" .. items[index][""Setpoint""] .. "")"")
    if items[index][""CurrentCraftAmount""] > 0 then
      gui.setText(mainGui, lines[index][""Crafting""], items[index][""CurrentCraftAmount""] .. """")
    else
      gui.setText(mainGui, lines[index][""Crafting""], """")
    end
    gui.setText(mainGui, lines[index][""Message""], items[index][""Message""])
  end
end

local addGui_Open
local changeGui_Open
local addItem = {}
local changeItemIndex

local function Item_Name_Callback(guiID, textID, text)
   addItem[""Name""] = text
end

local function Setpoint_Callback(guiID, textID, text)
   addItem[""Setpoint""] = tonumber(text)
end

local function ItemDamage_Callback(guiID, textID, text)
   addItem[""Damage""] = tonumber(text)
end

local function CraftAmount_Callback(guiID, textID, text)
   addItem[""CraftAmount""] = tonumber(text)
end

local function addButtonCallback(guiID, id)
  index = #items + 1
  if index <= 86 then
    items[index] = {}
    items[index][""rawItemName""] = addItem[""Name""]
    items[index][""rawItemDamage""] = addItem[""Damage""]
    items[index][""Setpoint""] = addItem[""Setpoint""]
    items[index][""CraftAmount""] = addItem[""CraftAmount""]

    SaveItems()

    addGui_Open = false
  else
    addGui_Open = false
    gui.showMsg(""Maximum number of items reached (86 items)."")
  end
end

local function changeButtonCallback(guiID, id)
  index = changeItemIndex
  items[index] = {}
  items[index][""rawItemName""] = addItem[""Name""]
  items[index][""rawItemDamage""] = addItem[""Damage""]
  items[index][""Setpoint""] = addItem[""Setpoint""]
  items[index][""CraftAmount""] = addItem[""CraftAmount""]

  SaveItems()

  changeGui_Open = false
end

local function exitButtonCallback(guiID, id)
  addGui_Open = false
  changeGui_Open = false
end

local function AddItem_Callback(guiID, buttonID)
  local addGui = gui.newGui(""center"", ""center"", 62, 10, true, ""Add Item"")
  Item_Name_Label = gui.newLabel(addGui, 1, 1, ""   Item Name: "", 0xc0c0c0, 0x0, 7)
  Item_Name = gui.newText(addGui, 15, 1, 30, """", Item_Name_Callback, 30, false)
  Item_Damage_Label = gui.newLabel(addGui, 1, 3, "" Item Damage: "", 0xc0c0c0, 0x0, 7)
  Item_Damage = gui.newText(addGui, 15, 3, 8, """", ItemDamage_Callback, 8, false)
  Item_Damage_Help = gui.newLabel(addGui, 24, 3, ""(Metadata number of item)"", 0xc0c0c0, 0x0, 7)
  Setpoint_Label = gui.newLabel(addGui, 1, 5, ""    Setpoint: "", 0xc0c0c0, 0x0, 7)
  Setpoint = gui.newText(addGui, 15, 5, 8, """", Setpoint_Callback, 8, false)
  Setpoint_Help = gui.newLabel(addGui, 24, 5, ""(How many items to keep in stock)"", 0xc0c0c0, 0x0, 7)  
  CraftAmount_Label = gui.newLabel(addGui, 1, 7, ""Craft Amount: "", 0xc0c0c0, 0x0, 7)
  CraftAmount = gui.newText(addGui, 15, 7, 8, """", CraftAmount_Callback, 8, false)
  CraftAmount_Help = gui.newLabel(addGui, 24, 7, ""(How many items to craft max at once)"", 0xc0c0c0, 0x0, 7)
  addButton = gui.newButton(addGui, 41, 9, ""Add Item"", addButtonCallback)
  exitButton = gui.newButton(addGui, 52, 9, ""Cancel"", exitButtonCallback)

  addGui_Open = true
  addItem = {}

  gui.displayGui(addGui)
  while addGui_Open do
    gui.runGui(addGui)
  end
  gui.closeGui(addGui)
end

local function RemoveItem_Callback(guiID, buttonID)
   local radioIndex = gui.getRadio(guiID)
   local removeIndex

   for index = 1, #lines do
    if lines[index][""Radio""] == radioIndex then
      removeIndex = index
    end
   end
   
   table.remove(items, removeIndex)
   saveItems()
   EmptyLines()
end

local function ChangeItem_Callback(guiID, buttonID)
  local radioIndex = gui.getRadio(guiID)
  if radioIndex > 0 then
    for index = 1, #lines do
      if lines[index][""Radio""] == radioIndex then
        changeItemIndex = index
      end
    end

    local changeGui = gui.newGui(""center"", ""center"", 62, 10, true, ""Change Item"")
    Item_Name_Label = gui.newLabel(changeGui, 1, 1, ""   Item Name: "", 0xc0c0c0, 0x0, 7)
    Item_Name = gui.newText(changeGui, 15, 1, 30, items[changeItemIndex][""rawItemName""], Item_Name_Callback, 30, false)
    Item_Damage_Label = gui.newLabel(changeGui, 1, 3, "" Item Damage: "", 0xc0c0c0, 0x0, 7)
    Item_Damage = gui.newText(changeGui, 15, 3, 8, items[changeItemIndex][""rawItemDamage""], ItemDamage_Callback, 8, false)
    Item_Damage_Help = gui.newLabel(changeGui, 24, 3, ""(Metadata number of item)"", 0xc0c0c0, 0x0, 7)
    Setpoint_Label = gui.newLabel(changeGui, 1, 5, ""    Setpoint: "", 0xc0c0c0, 0x0, 7)
    Setpoint = gui.newText(changeGui, 15, 5, 8, items[changeItemIndex][""Setpoint""], Setpoint_Callback, 8, false)
    Setpoint_Help = gui.newLabel(changeGui, 24, 5, ""(How many items to keep in stock)"", 0xc0c0c0, 0x0, 7)  
    CraftAmount_Label = gui.newLabel(changeGui, 1, 7, ""Craft Amount: "", 0xc0c0c0, 0x0, 7)
    CraftAmount = gui.newText(changeGui, 15, 7, 8, items[changeItemIndex][""CraftAmount""], CraftAmount_Callback, 8, false)
    CraftAmount_Help = gui.newLabel(changeGui, 24, 7, ""(How many items to craft max at once)"", 0xc0c0c0, 0x0, 7)
    changeButton = gui.newButton(changeGui, 38, 9, ""Change Item"", changeButtonCallback)
    exitButton = gui.newButton(changeGui, 52, 9, ""Cancel"", exitButtonCallback)

    changeGui_Open = true
    addItem = {}
    addItem[""Name""] = items[changeItemIndex][""rawItemName""]
    addItem[""Damage""] = items[changeItemIndex][""rawItemDamage""]
    addItem[""Setpoint""] = items[changeItemIndex][""Setpoint""]
    addItem[""CraftAmount""] = items[changeItemIndex][""CraftAmount""]

    gui.displayGui(changeGui)
    while changeGui_Open do
      gui.runGui(changeGui)
    end
    gui.closeGui(changeGui)
  end
end

local function CpuMaxUsage_Callback(guiID, textID, text)
  maxCpuUsage = tonumber(text)
  SaveConfig()
end

local function DrawButtons()
  AddButton = gui.newButton(mainGui, 1, 1, ""Add Item"", AddItem_Callback)
  RemoveButton = gui.newButton(mainGui, 12, 1, ""Remove Item"", RemoveItem_Callback)
  ChangeButton = gui.newButton(mainGui, 26, 1, ""Change Item"", ChangeItem_Callback)
  CpuUsageLabel = gui.newLabel(mainGui, 118, 1, ""CPU usage: "", 0xc0c0c0, 0x0, 13)
  CpuMaxUsageLabel = gui.newLabel(mainGui, 134, 1, ""Max CPU usage: "", 0xc0c0c0, 0x0, 15)
  CpuMaxUsage = gui.newText(mainGui, 149, 1, 4, maxCpuUsage .. """", CpuMaxUsage_Callback, 4, false)
end

function CheckItemsAndCraft()
  for index = 1, #items do
    items[index][""Message""] = """"
    items[index][""CurrentValue""] = 0
    items[index][""Name""] = """"
    
    local meItem = meController.getItemsInNetwork({ name = items[index][""rawItemName""], damage = items[index][""rawItemDamage""]})
    if meItem.n >= 1 then
      if not meItem[1].isCraftable then
        items[index][""Message""] = ""Not Craftable""
      end

      items[index][""CurrentValue""] = meItem[1].size
      items[index][""Name""] = meItem[1].label

      indexCraftTask = 1
      for indexCraftTasks = 1, #craftTasks do
        if craftTasks[indexCraftTasks].Id == index then indexCraftTask = indexCraftTasks end
      end

      if craftTasks[indexCraftTask].task ~= nil and indexCraftTask > 1 then
        if craftTasks[indexCraftTask].task.isDone() or craftTasks[indexCraftTask].task.isCanceled() then
          currentCpuUsage = currentCpuUsage - 1
          items[index][""CurrentCraftAmount""] = 0
          table.remove(craftTasks, indexCraftTask)
        end
      else
        if items[index][""CurrentCraftAmount""] == 0 and items[index][""CurrentValue""] < items[index][""Setpoint""] then
          if currentCpuUsage < maxCpuUsage then
            local meCpus = meController.getCpus()
            local occupiedCpus = 0
            for cpuIndex = 1, #meCpus do
              if meCpus[cpuIndex].busy then occupiedCpus = occupiedCpus + 1 end
            end
          
            if occupiedCpus < #meCpus then
              local currentCraftAmount = items[index][""Setpoint""] - items[index][""CurrentValue""]
              if currentCraftAmount > items[index][""CraftAmount""] then
                currentCraftAmount = items[index][""CraftAmount""]
              end

              local craftables = meController.getCraftables({ name = items[index][""rawItemName""], damage = items[index][""rawItemDamage""]})
              if craftables.n >= 1 then
                craftTask = craftables[1].request(currentCraftAmount)

                if craftTask.isCanceled() then
                  items[index][""Message""] = ""No ingredients""
                else
                  items[index][""CurrentCraftAmount""] = currentCraftAmount
                  craftTaskWithId = { Id = index, task = craftTask }
                  newIndex = #craftTasks + 1
                  craftTasks[newIndex] = craftTaskWithId
                  currentCpuUsage = currentCpuUsage + 1
                end
              end
            else
              items[index][""Message""] = ""All CPUs busy""
            end
          else
            items[index][""Message""] = ""All CPUs busy""
          end
        end
      end
    end
  end

  gui.setText(mainGui, CpuUsageLabel, ""CPU Usage: "" .. currentCpuUsage)
end

DrawHeaders()
DrawLines()
DrawButtons()
LoadConfig()
LoadItems()

gui.clearScreen()
gui.setTop(""Applied Energistics 2 Auto Stock"")
gui.setBottom("""")

-- Create Empty craftTask
craftTasks[1] = { Id = 0, task = """" }

-- Main loop
while true do
   gui.runGui(mainGui)
   CheckItemsAndCraft()
   FillLines()
end"
f4y8N37C,–ë–∞–∑–∞ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è Russia car driving | Sochi,zoga70122,Lua,Saturday 15th of March 2025 09:14:31 AM CDT,"--–±–∞–∑–∞ –≥—É–∏ 

local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wall%20v3')))()

local w = library:CreateWindow(""Script for | Sochi"") 
local c = w:CreateFolder(""Base Function"") 
local b = w:CreateFolder(""Teleport"") 

--–±–∞–∑–∞ 2

local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")
local TweenService = game:GetService(""TweenService"")
local UserInputService = game:GetService(""UserInputService"")

--—Ñ—É–Ω–∫—Ü–∏–∏ Teleport

b:Button(""Tp AvtoSalon"", function()
    wait(0.7)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1496.90686, 524.141968, 1530.62219, 0.766061246, 0, 0.642767608, 0, 1, 0, -0.642767608, 0, 0.766061246)
end)

b:Button(""Tp Gruchiki"", function()
    wait(0.7)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1234.30786, 518.440063, 2433.15796, -0.0871315002, -0, -0.996196866, 0, -1, 0, -0.996196866, 0, 0.087131381)
end)

--[[

—Ñ—É–Ω–∫—Ü–∏–∏ base function

—Ç—É—Ç –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–ø—Ä–∏–º–µ—Ä —Ç–∞–∫

c:Button(""Esp"", function()
    –∞ —Ç—É—Ç —É–∂–µ —Ñ—É–Ω–∫—Ü–∏—é
end)

]]

"
uenEp90j,Query by name order,edigitman,Java,Saturday 15th of March 2025 09:07:40 AM CDT,"Which one better prioritize the results start with the searched string ?
    
Version 1:
@Query(""Select org from Organisation org "" +
       ""WHERE org.status in ('ACTIVATED', 'SUSPENDED') "" +
         ""AND (UPPER(org.orgName) LIKE UPPER('%' || :name || '%') OR org.identificationCode LIKE %:code% ) "" +
         ""AND (:interest IS NULL OR org.interestRepresented = :interest)"" + 
       ""ORDER BY CASE "" +
          ""WHEN UPPER(org.orgName) LIKE UPPER(CONCAT(:name, '%')) THEN 1 "" +
          ""WHEN org.identificationCode LIKE CONCAT(:code, '%') THEN 2 "" +
          ""ELSE 3 END"")


Version 2:
@Query(""SELECT org from Organisation org "" +
       ""WHERE org.status in ('ACTIVATED', 'SUSPENDED') "" +
         ""AND (LOCATE(UPPER(:name), UPPER(org.orgName)) > 0 OR LOCATE(:code, org.identificationCode) > 0) "" +
         ""AND (:interest IS NULL OR org.interestRepresented = :interest)"" + 
       ""ORDER BY LOCATE(UPPER(:name), UPPER(org.orgName)) + LOCATE(:code, org.identificationCode)"")
"
0cSSTDNz,Untitled,ur001,HTML 5,Saturday 15th of March 2025 08:51:38 AM CDT,"<!DOCTYPE html>
<html lang=""ru"">
<body>
    <h1>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–∑ URL-—Ö—ç—à–∞</h1>
    <div id=""result""></div>

    <script>
        // –°—á–∏—Ç–∞–ª–∫–∞ –∏–∑ —Ö—ç—à–∞
        function calculateFromHash() {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑  —Ö—ç—à–∞
            const hash = window.location.hash.substr(1);

            try {
                const {x, y} = parseHashData(hash);
                displayResults(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${x} + ${y} = ${x + y}`);
            } catch (e) {
                displayResults(e.message);
            }
        }

        // –†–∞–∑–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ö—ç—à–∞
        function parseHashData(hash) {
            if (!hash) throw new Error('–î–æ–±–∞–≤—å—Ç–µ –≤ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ #x;y');

            const values = hash.split(';');
            if (values.length !== 2) throw new Error('–ù—É–∂–Ω–æ —Ä–æ–≤–Ω–æ –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π');

            const x = Number(values[0]);
            const y = Number(values[1]);
            if (isNaN(x) || isNaN(y)) throw new Error('–û–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏');

            return { x, y };
        }

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        function displayResults(text) {
            const resultDiv = document.getElementById('result');
            resultDiv.textContent = text;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        window.addEventListener('DOMContentLoaded', calculateFromHash);
        window.addEventListener('hashchange', calculateFromHash);
    </script>
</body>
</html>"
wPZHUCJN,Seonbi - PaperNoted,Kelly-B9978,HTML,Saturday 15th of March 2025 08:41:14 AM CDT,"<!--
[‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô]

‡∏™‡∏µ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©: --ppnote-bg: #f2f2f2;
‡∏™‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î: --ppnote-line-x: steelblue;
‡∏™‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á: --ppnote-line-y: rgba(255, 0, 0, 0.3);
‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: --ppnote-txt: #000;
‡∏™‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏ô‡πÇ‡∏û‡∏•‡∏≤‡∏£‡∏≠‡∏¢‡∏î‡πå: --ppnote-primary: #000;

‡∏´‡∏°‡∏∏‡∏ô‡∏™‡∏µ‡πÄ‡∏ó‡∏õ: --ppnote-hue: 300deg; (‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ 0 - 360deg ‡∏•‡∏≠‡∏á‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏•‡πà‡∏ô‡∏î‡∏π)

png ‡∏ó‡∏±‡πâ‡∏á 3 ‡∏≠‡∏±‡∏ô ‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î 1:1 (‡∏à‡∏±‡∏ï‡∏∏‡∏£‡∏±‡∏™) ‡∏´‡∏≤‡∏Å‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡∏°‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏ô‡∏†‡∏≤‡∏û‡πÄ‡∏•‡πá‡∏Å ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏¥‡∏° --ppnote-size: ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢

‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏†‡∏≤‡∏û : ‡πÄ‡∏û‡∏¥‡πà‡∏° --ppnote-pos: 50% 50%; ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö
 - ‡πÄ‡∏•‡∏Ç‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏±‡∏ö‡∏ã‡πâ‡∏≤‡∏¢ - ‡∏Ç‡∏ß‡∏≤ ‡πÇ‡∏î‡∏¢ 0% = ‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢ 100% = ‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤
 - ‡πÄ‡∏•‡∏Ç‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏±‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô - ‡∏•‡∏á ‡πÇ‡∏î‡∏¢ 0% = ‡∏ä‡∏¥‡∏î‡∏ö‡∏ô 100% = ‡∏ä‡∏¥‡∏î‡∏•‡πà‡∏≤‡∏á
 
‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û : ‡πÄ‡∏û‡∏¥‡πà‡∏° --ppnote-size: cover; ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö
 - cover ‡∏Ñ‡∏∑‡∏≠ ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
 - 100% ‡∏Ñ‡∏∑‡∏≠ ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ
 - ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 100% ‡∏Ñ‡∏∑‡∏≠ ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô
 - ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 100% ‡∏Ñ‡∏∑‡∏≠ ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏•‡∏á
-->

<link href=""https://dl.dropbox.com/scl/fi/6uuiw6f73mogmgwfq73yr/seonbi-papernoted.css?rlkey=rnx2jkexyaube906iz67ncwuk&st=z4ee2m39"" rel=""stylesheet"">
<div id=""PaperNoted""><a href=""https://discord.com/users/625292873914515456/""></a><div class=""ppnote-paper"" style=""--ppnote-bg: #f2f2f2;--ppnote-line-x: steelblue;--ppnote-line-y: rgba(255, 0, 0, 0.3);--ppnote-txt: #000;--ppnote-primary: #000;"">
<div class=""ppnote-line"">
<div class=""ppnote-content"">
[b]@ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà[/b]

--‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤--</div>
<div class=""ppnote-ps""><b>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ :</b>--‡∏´‡∏°‡∏≤‡∏ô‡πÄ‡∏´‡∏ï‡∏∏--</div>
</div>
<div class=""ppnote-polaroid"" style=""--ppnote-hue: 300deg;"">
<div class=""ppnote-png1"" style=""--ppnote-png: url(--‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ png ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô--);""></div>
<div class=""ppnote-png2"" style=""--ppnote-png: url(--‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ png ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á--);""></div>
<div class=""ppnote-png3"" style=""--ppnote-png: url(--‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ png ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢--);""></div>
<div class=""ppnote-pic"" style=""--ppnote-pic: url(--‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ ‡πÉ‡∏ô‡πÇ‡∏û‡∏•‡∏≤‡∏£‡∏≠‡∏¢‡∏î‡πå--);""></div>
<div class=""ppnote-name"">Joelle F. Escoffier</div>
</div></div></div>"
AGhcFWXk,Untitled,Worgle123,JavaScript,Saturday 15th of March 2025 08:31:56 AM CDT,"/*Be aware that this method could potentially delete your Minecraft license.  I used it on an alt, not my main.  If you want to use this on your main account, be aware of the risks.
Open your browser, and head to minecraft.net - make sure you are logged in.  Then press Ctrl+Shift+I to open Developer tools/inspect.  Click on console and paste the text below then hit enter. You should have the cape!!*/
 
const mcToken = JSON.parse(localStorage.getItem('MCToken')).mcToken;
 
fetch(""https://net.web.minecraft-services.net/api/v1.0/grant/offer?offer=7118a7d5-240e-4f6d-8959-5269ba041938"", {
  ""headers"": {
    ""accept"": ""/"",
    ""accept-language"": ""en-US,en;q=0.9"",
    ""authorization"": mcToken,
    ""content-type"": ""application/json"",
    ""priority"": ""u=1, i"",
    ""sec-ch-ua-mobile"": ""?0"",
    ""sec-ch-ua-platform"":""Windows"",
    ""sec-fetch-dest"": ""empty"",
    ""sec-fetch-mode"": ""cors"",
    ""sec-fetch-site"": ""cross-site""
  },
  ""referrer"": ""https://www.minecraft.net/"",
  ""referrerPolicy"": ""strict-origin-when-cross-origin"",
  ""body"": null,
  ""method"": ""PUT"",
  ""mode"": ""cors"",
  ""credentials"": ""include""
})
.then(response => {
    console.log('Status Code:', response.status);
  })"
JBwqJq7v,advanture.cpp,DrAungWinHtut,C++,Saturday 15th of March 2025 08:23:47 AM CDT,"#include<iostream>
#include<cstdlib>
#include<conio.h>
using namespace std;

int main()
{
	int life = 3;
	int minx = 0;
	int miny = 0;
	int maxx = 25;
	int maxy = 15;

	int treasurex = 10;
	int treasurey = 10;

	int playerx = 0;
	int playery = 0;

	int trap1x = 5;
	int trap1y = 5;

	int trap2x = 15;
	int trap2y = 5;

	int trap3x = 5;
	int trap3y = 10;

	int trap4x = 15;
	int trap4y = 10;

	int lifeaddx = 10;
	int lifeaddy = 5;

	int key = '\0';
	cout << ""Welcome to the game"" << endl;
	cout << ""You are at position (0,0)"" << endl;
	cout << ""Enter 'w' to move up, 's' to move down, 'a' to move left, 'd' to move right"" << endl;
	cout << ""Enter 'q' to quit the game"" << endl;
	system(""pause"");
	system(""cls"");
	while (1) {
		
		key = _getch();
		switch (key) {
		case 'w': 
			if (playery > miny) {
				playery--;
			}
			break;
		case 's': 
			if (playery < maxy) {
				playery++;
			}
			break;
		case 'a': 
			if (playerx > minx) {
				playerx--;
			}
			break;
		case 'd': 
			if (playerx < maxx) {
				playerx++;
			}
			break;
		case 'q':
			cout << ""You quit the game"" << endl;
			exit(0);
		}
		cout << ""You are at position ("" << playerx << "","" << playery << "")"" << endl;
		if (playerx == treasurex && playery == treasurey) {
			cout << ""You found the treasure"" << endl;
			cout << ""You win the game"" << endl;
			exit(0);
		}
		if (playerx == trap1x && playery == trap1y) {
			cout << ""You are caught in trap 1"" << endl;
			life--;			
		}
		if (playerx == trap2x && playery == trap2y) {
			cout << ""You are caught in trap 2"" << endl;
			life--;
		}
		if (playerx == trap3x && playery == trap3y) {
			cout << ""You are caught in trap 3"" << endl;
			life--;
		}
		if (playerx == trap4x && playery == trap4y) {
			cout << ""You are caught in trap 4"" << endl;
			life--;
		}
		if (playerx == lifeaddx && playery == lifeaddy) {
			cout << ""You found a life"" << endl;
			life++;
		}
		cout << ""Your Life is now "" << life << endl;
		if (life == 0) {
			cout << ""You lost the game"" << endl;
			exit(0);
		}
	}
	return 0;
}"
weJE1ALK,—Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è,nq1s788,Python,Saturday 15th of March 2025 08:22:15 AM CDT,"#–∏–∑ –ª—é–±–æ–π –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é -- int('101001', 2)
#–∏–∑ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π –≤ –¥–≤–æ–∏—á–Ω—É—é -- bin(54)[2:]
#–∏–∑ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π –≤ –≤–æ—Å—å–º–∏—Ä–∏—á–Ω–∞—è -- oct(54)[2:]
#–∏–∑ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π –≤ 16—Ä–∏—á–Ω–∞—è -- hex(54)[2:]
#hex bin oct dec -- –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
#16  2   8   10
#–≤–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö -- –º–æ–∂–Ω–æ –≤–∞–π–ª–æ–º
n, x = map(int, input().split()) #–ø–µ—Ä–µ–≤–æ–¥–∏–º n –∏–∑ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π –≤ x-–∏—á–Ω—É—é
ost = ''
while n != 0:
    #–µ—Å–ª–∏ x < 10
    ost += str(n % x)
    n //= x
    #–µ—Å–ª–∏ x > 10 –Ω—É–∂–Ω–æ –µ—â–µ –≤ –±—É–∫–≤—ã –æ—Å—Ç–∞—Ç–∫–∏ >= 10 –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å
    o = n % x
    if o < 10:
        ost += str(o)
    else:
        ost += 'ABCDEFGH'[o - 10]
    n //= x
print(ost[::-1]) #–≤—ã–≤–æ–¥–∏–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Å—Ç–∞—Ç–∫–∏"
vwEAUMEp,NoobAI module,g14ndev,Lua,Saturday 15th of March 2025 08:20:40 AM CDT,"-- this module handles noob ai behaviour in addition to genetics
-- author: Gixnly




local NoobAI = {}
NoobAI.__index = NoobAI

-- üí° SERVICES
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")
local Debris = game:GetService(""Debris"")
local ServerScriptService = game:GetService(""ServerScriptService"")
local DataManager = require(ServerScriptService.DataManager)
local LootManager = require(ServerScriptService.LootManager)

-- Global table to track all NoobAI instances, keyed by Model
local ActiveNoobs = {}

-----------------------------------------------------------
-- Utility function: randomColorVariation
-- Returns a Color3 that is a slight variation of the base color.
-----------------------------------------------------------
local function randomColorVariation(baseColor, variation)
	local r = math.clamp(baseColor.R + (math.random()-0.5)*variation, 0, 1)
	local g = math.clamp(baseColor.G + (math.random()-0.5)*variation, 0, 1)
	local b = math.clamp(baseColor.B + (math.random()-0.5)*variation, 0, 1)
	return Color3.new(r, g, b)
end

-----------------------------------------------------------
-- Utility function: averageValue
-- Returns the average of two numbers plus a small random variation.
-----------------------------------------------------------
local function averageValue(val1, val2, variation)
	return ((val1 + val2) / 2) + (math.random()-0.5)*variation
end

-----------------------------------------------------------
-- Constructor: NoobAI.new
-----------------------------------------------------------
function NoobAI.new(spawnPosition, geneticParents)
	local noobTemplate = ReplicatedStorage:FindFirstChild(""Noobs"") and ReplicatedStorage.Noobs:FindFirstChild(""Noob"")
	assert(noobTemplate, ""‚ö†Ô∏è Noob template missing from ReplicatedStorage.Noobs!"")

	local model = noobTemplate:Clone()
	model:SetPrimaryPartCFrame(CFrame.new(spawnPosition))
	model.Parent = workspace
	model:SetAttribute(""CanDamage"", true)

	local humanoid = model:FindFirstChildOfClass(""Humanoid"")
	local rootPart = model:FindFirstChild(""HumanoidRootPart"")
	local animationsFolder = model:FindFirstChild(""Animations"")
	local lootFolder = model:FindFirstChild(""Loot"")

	assert(humanoid, ""‚ö†Ô∏è Noob template is missing a Humanoid!"")
	assert(rootPart, ""‚ö†Ô∏è Noob template is missing a HumanoidRootPart!"")
	assert(animationsFolder, ""‚ö†Ô∏è Noob template is missing an 'Animations' folder!"")

	humanoid.BreakJointsOnDeath = false

	local self = setmetatable({}, NoobAI)
	self.Model = model
	self.Humanoid = humanoid
	self.RootPart = rootPart
	self.Animations = animationsFolder
	self.LootFolder = lootFolder
	self.Target = nil
	self.IsScared = false
	self.LastAnimation = nil
	self.CurrentAnimationTrack = nil
	self.FleeDestination = nil
	self.Dead = false
	self.AnimationTracks = {}
	self.LastPlayerCheck = tick()
	self.DespawnDelay = 30
	self.DespawnRadius = 100
	self.LastAttacker = nil
	self.LastStateChange = tick() -- Track when state last changed
	self.DespawnChanceMultiplier = 1 -- Starts at 1x chance

	local animator = humanoid:FindFirstChild(""Animator"") or Instance.new(""Animator"", humanoid)
	self.Animator = animator

	local damageEvent = Instance.new(""BindableEvent"")
	damageEvent.Name = ""TakeDamageEvent""
	damageEvent.Parent = model
	damageEvent.Event:Connect(function(damage, attacker)
		self:TakeDamage(damage, attacker)
	end)

	local stats = model:FindFirstChild(""Stats"")
	assert(stats, ""‚ö†Ô∏è Noob template is missing a 'Stats' folder!"")

	self.Genetics = {}
	if geneticParents then
		local parent1 = geneticParents[1]
		local parent2 = geneticParents[2]
		if math.random() < 0.5 then
			self.Genetics.Gender = parent1.Gender
		else
			self.Genetics.Gender = parent2.Gender
		end
		if self.Genetics.Gender == ""Male"" then
			local baseBlue = Color3.new(0.2, 0.2, 0.8)
			self.Genetics.TorsoColor = randomColorVariation(parent1.TorsoColor and Color3.new(
				averageValue(parent1.TorsoColor.R, parent2.TorsoColor.R, 0.1),
				averageValue(parent1.TorsoColor.G, parent2.TorsoColor.G, 0.1),
				averageValue(parent1.TorsoColor.B, parent2.TorsoColor.B, 0.1)
				) or baseBlue, 0.05)
		else
			local basePink = Color3.new(0.9, 0.6, 0.7)
			self.Genetics.TorsoColor = randomColorVariation(parent1.TorsoColor and Color3.new(
				averageValue(parent1.TorsoColor.R, parent2.TorsoColor.R, 0.1),
				averageValue(parent1.TorsoColor.G, parent2.TorsoColor.G, 0.1),
				averageValue(parent1.TorsoColor.B, parent2.TorsoColor.B, 0.1)
				) or basePink, 0.05)
		end
		local baseYellow = Color3.new(1, 0.9, 0.4)
		self.Genetics.HeadColor = randomColorVariation(parent1.HeadColor and Color3.new(
			averageValue(parent1.HeadColor.R, parent2.HeadColor.R, 0.1),
			averageValue(parent1.HeadColor.G, parent2.HeadColor.G, 0.1),
			averageValue(parent1.HeadColor.B, parent2.HeadColor.B, 0.1)
			) or baseYellow, 0.05)
		self.Genetics.ArmColor = self.Genetics.HeadColor
		self.Genetics.HealthModifier = averageValue(parent1.HealthModifier or 100, parent2.HealthModifier or 100, 5)
		self.Genetics.ScaredDamageModifier = averageValue(parent1.ScaredDamageModifier or 15, parent2.ScaredDamageModifier or 15, 2)
		self.Genetics.FieldOfVisionModifier = averageValue(parent1.FieldOfVisionModifier or 20, parent2.FieldOfVisionModifier or 20, 2)
	else
		if math.random() < 0.5 then
			self.Genetics.Gender = ""Male""
		else
			self.Genetics.Gender = ""Female""
		end
		if self.Genetics.Gender == ""Male"" then
			local baseBlue = Color3.new(0.2, 0.2, 0.8)
			self.Genetics.TorsoColor = randomColorVariation(baseBlue, 0.05)
		else
			local basePink = Color3.new(0.9, 0.6, 0.7)
			self.Genetics.TorsoColor = randomColorVariation(basePink, 0.05)
		end
		local baseYellow = Color3.new(1, 0.9, 0.4)
		self.Genetics.HeadColor = randomColorVariation(baseYellow, 0.05)
		self.Genetics.ArmColor = self.Genetics.HeadColor
		self.Genetics.HealthModifier = math.random(90, 110)
		self.Genetics.ScaredDamageModifier = math.random(13, 17)
		self.Genetics.FieldOfVisionModifier = math.random(18, 22)
	end

	local torso = model:FindFirstChild(""Torso"")
	if torso then
		torso.Color = self.Genetics.TorsoColor
	end
	local head = model:FindFirstChild(""Head"")
	if head then
		head.Color = self.Genetics.HeadColor
	end
	local leftArm = model:FindFirstChild(""Left Arm"")
	local rightArm = model:FindFirstChild(""Right Arm"")
	if leftArm then
		leftArm.Color = self.Genetics.ArmColor
	end
	if rightArm then
		rightArm.Color = self.Genetics.ArmColor
	end

	self.Config = {
		WalkSpeed    = (stats:FindFirstChild(""WalkSpeed"")    and stats.WalkSpeed.Value)    or 8,
		RunSpeed     = (stats:FindFirstChild(""RunSpeed"")     and stats.RunSpeed.Value)     or 16,
		Aggressive   = (stats:FindFirstChild(""Aggressive"")   and stats.Aggressive.Value)   or (math.random() < 0.2),
		AttackRadius = (stats:FindFirstChild(""AttackRadius"") and stats.AttackRadius.Value) or 5,
		FieldOfVision= ((stats:FindFirstChild(""FieldOfVision"")and stats.FieldOfVision.Value) or 20) * (self.Genetics.FieldOfVisionModifier/100),
		Health       = ((stats:FindFirstChild(""Health"")       and stats.Health.Value)       or 100) * (self.Genetics.HealthModifier/100),
		AttackDamage = (stats:FindFirstChild(""AttackDamage"") and stats.AttackDamage.Value) or 10,
		ScaredDamage = ((stats:FindFirstChild(""ScaredDamage"") and stats.ScaredDamage.Value) or 15) * (self.Genetics.ScaredDamageModifier/100)
	}

	humanoid.WalkSpeed = self.Config.WalkSpeed
	humanoid:SetAttribute(""CanDamage"", true)

	self.State = ""Idle""
	self.LastUpdate = tick()
	self.BaseReproductionCooldown = 30 -- Base value before doubling
	self.ReproductionCooldown = self.BaseReproductionCooldown
	self.LastReproductionTime = tick()
	self.ReproductionCount = 0 -- Track number of times this noob has reproduced

	local aiInstanceValue = model:FindFirstChild(""AIInstance"")
	if not aiInstanceValue then
		aiInstanceValue = Instance.new(""ObjectValue"")
		aiInstanceValue.Name = ""AIInstance""
		aiInstanceValue.Parent = model
	end
	aiInstanceValue.Value = model

	ActiveNoobs[model] = self

	spawn(function()
		self:BehaviorLoop()
	end)

	print(""Noob Spawned"")
	print(""Genetics:"", self.Genetics)

	return self
end

-----------------------------------------------------------
-- BehaviorLoop
-----------------------------------------------------------
function NoobAI:BehaviorLoop()
	while self.Model and self.Model.Parent and not self.Dead do
		self.LastUpdate = tick()

		if self.Humanoid.Health < (self.Config.Health * 0.2) and self.State ~= ""Fleeing"" then
			self.State = ""Fleeing""
		end

		if self.State == ""Idle"" then
			self:IdleBehavior()
			self:CheckReproduction()
		elseif self.State == ""Chasing"" then
			self:PlayAnimation(""Run"", true)
			self:ChaseBehavior()
		elseif self.State == ""Attacking"" then
			self:PlayAnimation(""Attack"", false)
			self:AttackBehavior()
		elseif self.State == ""Fleeing"" then
			if not self.IsScared then
				self.IsScared = true
				self:PlayAnimation(""Scared"", false)
				wait(1)
			end
			self:PlayAnimation(""Run"", true)
			self:FleeBehavior()
		end

		-- Update despawn logic
		if self:IsPlayerInRange(self.DespawnRadius) then
			self.LastPlayerCheck = tick()
		else
			if tick() - self.LastPlayerCheck >= self.DespawnDelay then
				self:Despawn()
				break
			end
		end

		-- Check continuous idle time for despawn chance
		if self.State == ""Idle"" then
			local idleTime = tick() - self.LastStateChange
			if idleTime >= 60 then -- 1 minute
				local minutesPast = math.floor(idleTime / 60)
				self.DespawnChanceMultiplier = 2 ^ (minutesPast - 1) -- Doubles every minute after 1
				if not self:IsPlayerInRange(self.DespawnRadius) and math.random() < (0.1 * self.DespawnChanceMultiplier) then
					self:Despawn()
					break
				end
			end
		end

		wait(0.1)
	end
end

-----------------------------------------------------------
-- CheckReproduction
-----------------------------------------------------------
function NoobAI:CheckReproduction()
	if tick() - self.LastReproductionTime < self.ReproductionCooldown then
		return
	end

	for model, partner in pairs(ActiveNoobs) do
		if model ~= self.Model and model.Parent then
			if partner.Genetics.Gender ~= self.Genetics.Gender and partner.State == ""Idle"" then
				local distance = (partner.RootPart.Position - self.RootPart.Position).Magnitude
				if distance < 5 then
					self:Reproduce(partner)
					self.LastReproductionTime = tick()
					partner.LastReproductionTime = tick()
					return
				end
			end
		end
	end
end

-----------------------------------------------------------
-- Reproduce
-----------------------------------------------------------
function NoobAI:Reproduce(partner)
	local spawnPos = (self.RootPart.Position + partner.RootPart.Position) / 2 + Vector3.new(math.random(-2,2), 0, math.random(-2,2))
	local newNoob = NoobAI.new(spawnPos, {self.Genetics, partner.Genetics})

	-- Double reproduction cooldown for both parents
	self.ReproductionCount = self.ReproductionCount + 1
	self.ReproductionCooldown = self.BaseReproductionCooldown * (2 ^ self.ReproductionCount)
	partner.ReproductionCount = partner.ReproductionCount + 1
	partner.ReproductionCooldown = partner.BaseReproductionCooldown * (2 ^ partner.ReproductionCount)

	print(""Reproduction successful: new noob spawned at"", spawnPos)
	print(self.Model.Name .. "" new cooldown: "", self.ReproductionCooldown)
	print(partner.Model.Name .. "" new cooldown: "", partner.ReproductionCooldown)
end

-----------------------------------------------------------
-- IsPlayerInRange
-----------------------------------------------------------
function NoobAI:IsPlayerInRange(range)
	for _, player in pairs(Players:GetPlayers()) do
		local char = player.Character
		local hrp = char and char:FindFirstChild(""HumanoidRootPart"")
		if hrp then
			if (hrp.Position - self.RootPart.Position).Magnitude <= range then
				return true
			end
		end
	end
	return false
end

-----------------------------------------------------------
-- PlayAnimation
-----------------------------------------------------------
function NoobAI:PlayAnimation(animationName, shouldLoop)
	if self.LastAnimation == animationName then
		return
	end
	self.LastAnimation = animationName

	if self.CurrentAnimationTrack then
		self.CurrentAnimationTrack:Stop()
	end

	local track = self.AnimationTracks[animationName]
	if not track then
		local anim = self.Animations:FindFirstChild(animationName)
		if anim and anim:IsA(""Animation"") then
			track = self.Animator:LoadAnimation(anim)
			self.AnimationTracks[animationName] = track
		end
	end

	if track then
		track.Looped = shouldLoop
		track:Play()
		self.CurrentAnimationTrack = track
	else
		self.CurrentAnimationTrack = nil
	end
end

-----------------------------------------------------------
-- IdleBehavior
-----------------------------------------------------------
function NoobAI:IdleBehavior()
	if math.random() < 0.3 then
		self:PlayAnimation(""Walk"", true)
		local randomOffset = Vector3.new(math.random(-10, 10), 0, math.random(-10, 10))
		local randomDestination = self.RootPart.Position + randomOffset
		self:MoveTowards(randomDestination, self.Config.WalkSpeed)
	else
		self:PlayAnimation(""Idle"", true)
	end

	local closestTarget = self:FindClosestEnemy()
	local isAggressive = (self.Humanoid.Health >= (self.Config.Health * 0.2)) and self.Config.Aggressive
	if closestTarget and isAggressive then
		local distance = (closestTarget.Character.HumanoidRootPart.Position - self.RootPart.Position).Magnitude
		if distance < self.Config.FieldOfVision then
			self.State = ""Chasing""
			self.Target = closestTarget
		end
	end
end

-----------------------------------------------------------
-- FindClosestEnemy
-----------------------------------------------------------
function NoobAI:FindClosestEnemy()
	local closestPlayer = nil
	local closestDistance = math.huge

	for _, player in pairs(Players:GetPlayers()) do
		if player.Character and player.Character:FindFirstChild(""HumanoidRootPart"") then
			local distance = (player.Character.HumanoidRootPart.Position - self.RootPart.Position).Magnitude
			if distance < closestDistance then
				closestDistance = distance
				closestPlayer = player
			end
		end
	end

	return closestPlayer
end

-----------------------------------------------------------
-- ChaseBehavior
-----------------------------------------------------------
function NoobAI:ChaseBehavior()
	if not self.Target or not self.Target.Character then
		self.State = ""Idle""
		return
	end

	if self.Humanoid.Health < (self.Config.Health * 0.2) then
		self.State = ""Fleeing""
		return
	end

	local targetPos = self.Target.Character.HumanoidRootPart.Position
	self:MoveTowards(targetPos, self.Config.RunSpeed)

	local distance = (targetPos - self.RootPart.Position).Magnitude
	if distance < (self.Config.AttackRadius + 1) then
		self.State = ""Attacking""
	end
end

-----------------------------------------------------------
-- AttackBehavior
-----------------------------------------------------------
function NoobAI:AttackBehavior()
	if self.Target and self.Target.Character then
		local targetHumanoid = self.Target.Character:FindFirstChildOfClass(""Humanoid"")
		if targetHumanoid then
			targetHumanoid:TakeDamage(self.Config.AttackDamage)
		end
	end
	wait(1)
	self.State = ""Idle""
end

-----------------------------------------------------------
-- FleeBehavior
-----------------------------------------------------------
function NoobAI:FleeBehavior()
	if not self.Target or not self.Target.Character or not self.Target.Character:FindFirstChild(""HumanoidRootPart"") then
		self.State = ""Idle""
		self.FleeDestination = nil
		return
	end

	if not self.FleeDestination then
		local directionAway = (self.RootPart.Position - self.Target.Character.HumanoidRootPart.Position).Unit
		self.FleeDestination = self.RootPart.Position + directionAway * math.random(15, 30)
	end

	self:MoveTowards(self.FleeDestination, self.Config.RunSpeed)

	if (self.FleeDestination - self.RootPart.Position).Magnitude < 3 then
		self.State = ""Idle""
		self.FleeDestination = nil
	end
end

-----------------------------------------------------------
-- MoveTowards
-----------------------------------------------------------
function NoobAI:MoveTowards(targetPos, speed)
	self.Humanoid.WalkSpeed = speed
	self.Humanoid:MoveTo(targetPos)
end

-----------------------------------------------------------
-- TakeDamage
-----------------------------------------------------------
function NoobAI:TakeDamage(amount, attacker)
	self.Humanoid:TakeDamage(amount)
	self.LastAttacker = attacker
	self.LastStateChange = tick() -- Reset idle timer on damage

	if self.Humanoid.Health <= 0 then
		self:Die()
	elseif self.Humanoid.Health < (self.Config.Health * 0.2) or (self.State ~= ""Fleeing"" and amount >= self.Config.ScaredDamage) then
		self.State = ""Fleeing""
		self.Target = attacker
		self.FleeDestination = nil
	end
end

-----------------------------------------------------------
-- Die
-----------------------------------------------------------
function NoobAI:Die()
	self.Dead = true
	self.RootPart.Anchored = true
	self.Humanoid.PlatformStand = true
	self:PlayAnimation(""Die"", false)

	if self.LastAttacker then
		DataManager.AddKill(self.LastAttacker)
	elseif self.Target then
		DataManager.AddKill(self.Target)
	else
		print(""No attacker recorded; kill not awarded."")
	end

	LootManager.SpawnLootBag(1, 1, 2, 3, self.Model.PrimaryPart.Position)

	if self.CurrentAnimationTrack and self.CurrentAnimationTrack.Stopped then
		self.CurrentAnimationTrack.Stopped:Wait()
	else
		wait(4)
	end

	self:DestroyNoob()
end

-----------------------------------------------------------
-- Despawn
-----------------------------------------------------------
function NoobAI:Despawn()
	self.Dead = true
	self:DestroyNoob()
end

-----------------------------------------------------------
-- DestroyNoob
-----------------------------------------------------------
function NoobAI:DestroyNoob()
	for name, track in pairs(self.AnimationTracks) do
		track:Stop()
		track:Destroy()
	end
	self.AnimationTracks = {}

	if self.Model then
		self.Model:Destroy()
	end

	ActiveNoobs[self.Model] = nil
end

return NoobAI"
afpQr5BG,F-4E base,Gamenator,C++,Saturday 15th of March 2025 07:03:06 AM CDT,"class PW_VN_F4E_BASE: PW_VN_B_F4C{
    scope = 2;
    displayName = ""F-4E Phantom II"";
    aileronSensitivity = 1.6;  // Slightly improved roll rate
    elevatorSensitivity = 1.1;  // Slightly improved pitch responsiveness
    thrustCoef[] = {1.8,1.85,1.9,2.0,2.06,2.1,2.25,2.35,2.5,2.65,2.85,1.8,0.2,0,0,0};  // Increased engine power
    acceleration = 240;  // Improved acceleration
    flapsFrictionCoef = 0.3;  // Small reduction in flap drag for improved handling
    draconicForceXCoef = 32;  // Slightly more lateral stability
    draconicForceYCoef = 1.3;  // Increased vertical stability
    draconicForceZCoef = 1.1;  // More effective thrust vectoring
    draconicTorqueXCoef[] = {6.5,7.7,8.4,9.2,10,10.3,10.5,10.6,10.6,10.7,10.7};  // Improved roll response
    draconicTorqueYCoef[] = {15,10.5,3.5,1.0,0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  // Slightly stronger pitch authority
    unitInfoType=""RscOptics_CAS_Pilot"";
	driverWeaponsInfoType=""RscOptics_CAS_01_TGP"";
    weapons[]=
		{   ""weapon_Fighter_Gun20mm_AA"",
			""CMFlareLauncher""
		};
    magazines[]={
        ""120Rnd_CMFlare_Chaff_Magazine"",
        ""magazine_Fighter04_Gun20mm_AA_x640""};

    class pilotCamera
    {
        minTurn = -20;
        maxTurn = 60;
        initTurn = 0;
        minElev = -25;
        maxElev = 65;
        initElev = 0;
        maxXRotSpeed = 0.05;
        maxYRotSpeed = 0.05;
        maxMouseXRotSpeed = 0.5;
        maxMouseYRotSpeed = 0.5;
        pilotOpticsShowCursor = 1;
        controllable = 1;
        class OpticsIn
        {
            class Wide
            {
                opticsDisplayName = ""WFOV"";
                initAngleX = 0;
                minAngleX = 0;
                maxAngleX = 0;
                initAngleY = 0;
                minAngleY = 0;
                maxAngleY = 0;
                initFov = 0.2;
                minFov = 0.2;
                maxFov = 0.2;
                directionStabilized = 0;
                stabilizedInAxes=""StabilizedInAxesBoth"";
                visionMode[] = {""Normal"",""NVG""};
                thermalMode[] = {};
                gunnerOpticsModel = ""\A3\Drones_F\Weapons_F_Gamma\Reticle\UAV_Optics_Gunner_wide_F.p3d"";
                opticsPPEffects[] = {""OpticsCHAbera2"",""OpticsBlur2""};
            };

            class Medium : Wide
				{
					opticsDisplayName	= ""MFOV"";
					initFov				= 0.125;
					minFov				= 0.125;
					maxFov				= 0.125;
					gunnerOpticsModel	= ""\A3\Drones_F\Weapons_F_Gamma\Reticle\UAV_Optics_Gunner_medium_F.p3d"";
				};
        };

         class Turrets: Turrets
    {
        class MainTurret: NewTurret
        {
            LODTurnedIn = 1100;
            LODTurnedOut = 1100;
            LODOpticsIn = 1100;
            LODOpticsOut = 1100;
            commanding = -1;
            isCopilot = 1;
            primaryGunner = 0;
            primaryObserver = 1;
            proxyType = ""CPGunner"";
            proxyIndex = 1;
            weapons[] = {};
            magazines[] = {};
            enableManualFire = 1;
            soundServo[] = {"""",0.00316228,1};
            startEngine = 0;
            gunnerCompartments = ""Compartment2"";
            gunnerGetInAction = ""GetInVertical"";
            gunnerGetOutAction = ""GetOutHigh"";
            memoryPointsGetInGunner = ""getin_gunner_pos"";
            memoryPointsGetInGunnerDir = ""getin_gunner_dir"";
            castGunnerShadow = 1;
            viewGunnerShadow = 1;
            gunnerAction = ""vn_f4_copilot"";
            gunnerInAction = ""vn_f4_copilot"";
            gunnerLeftHandAnimName = ""lever_copilot"";
            gunnerRightHandAnimName = ""stick_copilot"";
            gunnerLeftLegAnimName = ""pedal_copilot_left"";
            gunnerRightLegAnimName = ""pedal_copilot_right"";
            hasGunner = 1;
            hideWeaponsGunner = 1;
            inGunnerMayFire = 1;
            lockWhenDriverOut = 0;
            outGunnerMayFire = 1;
            canEject = 0;
            gunnerForceOptics = 0;
            gunnerOpticsColor[] = {0.227,0.769,0.24,1};
            gunnerForceOutOptics = 0;
            gunnerUsesPilotView = 0;
            gunnerOpticsShowCursor = 1;
            showGunnerOptics = 1;
            usePiP = 1;
            body = ""otocvez"";
            gun = ""otochlaven"";
            animationSourceBody = ""otocvez"";
            animationSourceGun = ""otochlaven"";
            memoryPointGun = ""gunnerview_copilot"";
            memoryPointGunnerOptics = ""gunnerview_copilot_dir"";
            gunBeg = ""gunnerview_copilot_dir"";
            gunEnd = ""gunnerview_copilot"";
            stabilizedInAxes = 0;
            maxHorizontalRotSpeed = 10;
            maxVerticalRotSpeed = 10;
            turretInfoType = ""RscOptics_CAS_Pilot"";
            gunnerOpticsModel = ""A3\drones_f\Weapons_F_Gamma\Reticle\UGV_01_Optics_Gunner_F.p3d"";
            minElev = -45;
            maxElev = 45;
            initElev = -15;
            minTurn = -45;
            maxTurn = 45;
            initTurn = 0;
            initFov = 0.95;
            maxXRotSpeed = 1;
            maxYRotSpeed = 1;
            maxMouseXRotSpeed = 0.5;
            maxMouseYRotSpeed = 0.5;
            pilotOpticsShowCursor = 1;
            controllable = 1;
            class OpticsIn
            {
                class Wide
                {
                    opticsDisplayName = ""WFOV"";
                    initAngleX = 0;
                    minAngleX = 0;
                    maxAngleX = 0;
                    initAngleY = 0;
                    minAngleY = 0;
                    maxAngleY = 0;
                    initFov = 0.2;
                    minFov = 0.2;
                    maxFov = 0.2;
                    directionStabilized = 0;
                    stabilizedInAxes=""StabilizedInAxesBoth"";
                    visionMode[] = {""Normal"",""NVG""};
                    thermalMode[] = {};
                    gunnerOpticsModel = ""\A3\Drones_F\Weapons_F_Gamma\Reticle\UAV_Optics_Gunner_wide_F.p3d"";
                    opticsPPEffects[] = {""OpticsCHAbera2"",""OpticsBlur2""};
                };
    
                class Medium : Wide
                    {
                        opticsDisplayName	= ""MFOV"";
                        initFov				= 0.125;
                        minFov				= 0.125;
                        maxFov				= 0.125;
                        gunnerOpticsModel	= ""\A3\Drones_F\Weapons_F_Gamma\Reticle\UAV_Optics_Gunner_medium_F.p3d"";
                    };
            };
            class ViewOptics
            {
                initAngleX = 0;
                minAngleX = -90;
                maxAngleX = 25;
                initAngleY = 0;
                minAngleY = -80;
                maxAngleY = 80;
                initFov = 0.15;
                minFov = 0.025;
                maxFov = 0.3;
                visionMode[] = {""Normal"",""NVG""};
            };
            class ViewGunner
            {
                initAngleX = -18;
                minAngleX = -45;
                maxAngleX = 85;
                initAngleY = 0;
                minAngleY = -165;
                maxAngleY = 165;
                initFov = 0.6;
                minFov = 0.25;
                maxFov = 0.6;
            };
            
        };

        class CopilotTurret: CopilotTurret{
            turretInfoType = ""RscOptics_CAS_Pilot"";
            class OpticsIn
            {
                class Wide
                {
                    opticsDisplayName = ""WFOV"";
                    initAngleX = 0;
                    minAngleX = 0;
                    maxAngleX = 0;
                    initAngleY = 0;
                    minAngleY = 0;
                    maxAngleY = 0;
                    initFov = 0.2;
                    minFov = 0.2;
                    maxFov = 0.2;
                    directionStabilized = 0;
                    stabilizedInAxes=""StabilizedInAxesBoth"";
                    visionMode[] = {""Normal"",""NVG""};
                    thermalMode[] = {};
                    gunnerOpticsModel = ""\A3\Drones_F\Weapons_F_Gamma\Reticle\UAV_Optics_Gunner_wide_F.p3d"";
                    opticsPPEffects[] = {""OpticsCHAbera2"",""OpticsBlur2""};
                };
    
                class Medium : Wide
                    {
                        opticsDisplayName	= ""MFOV"";
                        initFov				= 0.125;
                        minFov				= 0.125;
                        maxFov				= 0.125;
                        gunnerOpticsModel	= ""\A3\Drones_F\Weapons_F_Gamma\Reticle\UAV_Optics_Gunner_medium_F.p3d"";
                    };
            };
        };


    };



    };   
};"
9qsk8p8C,dataNone,TestGuy1,JSON,Saturday 15th of March 2025 07:00:07 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'd3e3d5de4443fd8602a4f8de4f8f2f6e11059efd8c86b36617477ae785c602fdc62c2d29c0b8ac944a2c8e339a89fd53ad657556e79a968482afb8601f601b152d042381488407f7ee156cacb8319f9331b391c0c47ad545fbf92a28c32de6918b87c11d2c80cdc9799f7982feb4e013b6fb0a1aa18700e8fdfb80f1b22c16d1',
  otherdata: [
    '31599098a851ae878e5ab7e588cbdce4',
    'f8e826ee6dd4909cd05d20dd61a9a435',
    '360b121c25760d0709b723eb86d3e0c0',
    '50c06dc92f8dc7b2eb6dce04478b828f',
    'ad270ddf896d20062a5dc1af543aed7f',
    '76f2cc5d771d81c735063aedcd54ef12',
    'df38067d702d380f617c18951aa21982',
    'e3a840e59c517871764a52387ab890ec'
  ]
}"
CTERpYN5,sjekk,Nix71,C++,Saturday 15th of March 2025 06:24:41 AM CDT,"
sjekk denne youtube kanalen eller s√∏k youtube etter ""Skizit Gesture""


https://www.youtube.com/playlist?list=PLirQEwT5SeWL9SEO1tgqDM1qsSNc-2ZTE

"
6dB9Z91K,Untitled,hishlishter,C#,Saturday 15th of March 2025 06:08:58 AM CDT,"using System;
using System.Drawing;
using System.Windows.Forms;
using System.Timers;
 
namespace NeuralNetworkPrediction
{
    public class MainPanel : Panel
    {
        // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        private const int N = 300;
        private const double TAU = 0.01;
        private const double TAU_STEP = 0.01;
        private const double D_H = 0.05;
        private const double ALPHA = 0.01;
        private const int R = 10;
        private const double START_X = -10.0;
        private const double END_X = 5.0;
 
        private const double A0 = 11.25; 
        private const double A1 = -1.5;
        private const double A2 = -58;
        private const double A3 = -271.5;
        private const double A4 = -369.25;
        private const double A5 = -95;
 
        // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        private double c_x;
        private double[] u_t;
        private double[] u;
        private double[] u_n;
        private double[] g;
        private int n_t;
        private int step;
        private int err;
        private double learningPercentage;
 
        // –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        private double graphW, graphH, graphDx, graphBx, graphRx;
 
        private Timer timer;
 
        public MainPanel()
        {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            c_x = START_X;
            u_t = new double[N];
            u = new double[N];
            u_n = new double[N];
            g = new double[R];
 
            for (int i = 0; i < N; i++)
            {
                u[i] = 0.0;
                u_t[i] = 0.0;
                u_n[i] = 0.0;
            }
            for (int i = 0; i < R; i++)
            {
                g[i] = 0.0;
            }
            n_t = N / 2 + 1;
            step = 1;
            err = 0;
            learningPercentage = 0.0;
 
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏
            DoubleBuffered = true;
 
            // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
            timer = new Timer();
            timer.Interval = 1;
            timer.Tick += Timer_Tick;
            timer.Start();
        }
 
        private double Sign(double x)
        {
            if (x > 0) return 1.0;
            else if (x < 0) return -1.0;
            return 0.0;
        }
 
        private double F(double x)
        {
            return A0 * Math.Pow(x, 5) + A1 * Math.Pow(x, 4) + A2 * Math.Pow(x, 3)
                + A3 * Math.Pow(x, 2) + A4 * x + A5;
        }
 
        private void Teach(double[] u, double[] g, int n_t, double delta)
        {
            double[] delta_g = new double[R];
            for (int r = 0; r < R; r++)
            {
                double x_r = u[n_t - 1 - r];
                delta_g[r] = ALPHA * Sign(x_r) * Sign(delta);
            }
            for (int r = 0; r < R; r++)
            {
                g[r] += delta_g[r];
            }
            err++;
        }
 
        private void CalculateLearningPercentage()
        {
            double totalError = 0.0;
            double minVal = u[0], maxVal = u[0];
            for (int i = 0; i < N; i++)
            {
                totalError += Math.Abs(u_n[i] - u_t[i]);
                if (u[i] < minVal) minVal = u[i];
                if (u[i] > maxVal) maxVal = u[i];
            }
            double avgError = totalError / N;
            double range = maxVal - minVal;
            if (range < 1e-9) range = 1.0;
            learningPercentage = 100 * (1 - avgError / range);
            if (learningPercentage < 0) learningPercentage = 0;
            if (learningPercentage > 100) learningPercentage = 100;
        }
 
        private void NewStep()
        {
            for (int i = 0; i < N; i++)
            {
                u_n[i] = F(c_x + i * TAU);
            }
            c_x += TAU_STEP;
 
            if (c_x > END_X)
            {
                c_x = START_X;
            }
 
            for (int i = 0; i < N; i++)
            {
                u_t[i] = 0.0;
            }
            for (int i = R; i < N; i++)
            {
                for (int r = 0; r < R; r++)
                {
                    u_t[i] += g[r] * u[i - 1 - r];
                }
            }
            for (int i = 0; i < R; i++)
            {
                u_t[i] = u[i];
            }
 
            double d_u = u_n[n_t] - u_t[n_t];
            if (d_u < -D_H || d_u > D_H)
            {
                Teach(u, g, n_t, d_u);
            }
            step++;
        }
 
        private void UpdateVars()
        {
            NewStep();
            for (int i = 0; i < N; i++)
            {
                u[i] = u_n[i];
            }
            CalculateLearningPercentage();
        }
 
        protected override void OnPaint(PaintEventArgs e)
        {
            base.OnPaint(e);
            Graphics g2 = e.Graphics;
 
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            graphW = Width;
            graphH = Height;
            graphDx = graphW / N;
            graphBx = (graphW - graphDx * (N - 1)) / 2.0;
            graphRx = graphBx + (N - 1) * graphDx;
 
            // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            double minVal = u[0], maxVal = u[0];
            for (int i = 1; i < N; i++)
            {
                if (u[i] < minVal) minVal = u[i];
                if (u[i] > maxVal) maxVal = u[i];
            }
            double mid = (maxVal + minVal) / 2.0;
            double diff = maxVal - minVal;
            minVal = mid - diff * 1.5;
            maxVal = mid + diff * 1.5;
            if (Math.Abs(maxVal - minVal) < 1e-9)
            {
                minVal -= 1.0;
                maxVal += 1.0;
            }
            double localMtt = graphH / (maxVal - minVal);
            double y_c = localMtt * maxVal;
 
            // –†–∏—Å—É–µ–º –æ—Å–∏
            using (Pen pen = new Pen(Color.Black))
            {
                g2.DrawLine(pen, (float)graphBx, 0, (float)graphBx, (float)graphH);
                g2.DrawLine(pen, (float)graphRx, 0, (float)graphRx, (float)graphH);
                g2.DrawLine(pen, (float)graphBx, 0, (float)graphRx, 0);
                g2.DrawLine(pen, (float)graphBx, (float)graphH, (float)graphRx, (float)graphH);
                g2.DrawLine(pen, (float)graphBx, (float)y_c, (float)graphRx, (float)y_c);
 
                for (int i = 1; i < N - 1; i++)
                {
                    float x = (float)(graphBx + i * graphDx);
                    g2.DrawLine(pen, x, (float)(y_c - 3), x, (float)(y_c + 3));
                }
                float x_nt = (float)(graphBx + (n_t - 1) * graphDx);
                g2.DrawLine(pen, x_nt, 0, x_nt, (float)graphH);
            }
 
            // –†–∏—Å—É–µ–º –∫—Ä–∏–≤—É—é u
            using (Pen greenPen = new Pen(Color.Green))
            {
                float oldX = (float)graphBx;
                float oldY = (float)(y_c - localMtt * u[0]);
                for (int i = 1; i < N; i++)
                {
                    float x = (float)(graphBx + i * graphDx);
                    float y = (float)(y_c - localMtt * u[i]);
                    g2.DrawLine(greenPen, oldX, oldY, x, y);
                    oldX = x;
                    oldY = y;
                }
            }
 
            // –†–∏—Å—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ u_t
            using (Pen redPen = new Pen(Color.Red))
            {
                float oldX = (float)graphBx;
                float oldY = (float)(y_c - localMtt * u_t[0]);
                for (int i = 1; i < N; i++)
                {
                    float x = (float)(graphBx + i * graphDx);
                    float y = (float)(y_c - localMtt * u_t[i]);
                    g2.DrawLine(redPen, oldX, oldY, x, y);
                    oldX = x;
                    oldY = y;
                }
            }
 
            // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
            using (Font font = new Font(""Arial"", 10))
            using (Brush brush = new SolidBrush(Color.Black))
            {
                float textX = 20;
                float textY = 20;
                g2.DrawString($""Step = {step}"", font, brush, textX, textY); textY += 16;
                g2.DrawString($""dH = {D_H:F2}"", font, brush, textX, textY); textY += 16;
                g2.DrawString($""dG = {ALPHA:F3}"", font, brush, textX, textY); textY += 16;
                for (int i = 0; i < R; i++)
                {
                    g2.DrawString($""G[{i}] = {g[i]:F3}"", font, brush, textX, textY);
                    textY += 16;
                }
                g2.DrawString($""Learning: {learningPercentage:F2}%"", font, brush, textX, textY);
                textY += 16;
                g2.DrawString($""c_x = {c_x:F3}"", font, brush, textX, textY);
            }
        }
 
        protected override Size DefaultSize => new Size(800, 600);
 
        private void Timer_Tick(object sender, EventArgs e)
        {
            UpdateVars();
            Invalidate();
        }
 
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Form form = new Form
            {
                Text = ""–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ–π—Ä–æ—Å–µ—Ç—å)"",
                ClientSize = new Size(800, 600)
            };
            MainPanel panel = new MainPanel();
            form.Controls.Add(panel);
            panel.Dock = DockStyle.Fill;
            form.ShowDialog();
        }
    }
}"
kXPKDDuf,HLL_Nivel3,Letal_1988,INI file,Saturday 15th of March 2025 06:08:10 AM CDT,"Techniques=ContrastAdaptiveSharpen@CAS.fx,Curves@Curves.fx,DPX@DPX.fx,Levels@Levels.fx,LumaSharpen@LumaSharpen.fx,Technicolor2@Technicolor2.fx,Tonemap@Tonemap.fx
TechniqueSorting=AdvancedCRT@CRT.fx,Before@Splitscreen.fx,After@Splitscreen.fx,ContrastAdaptiveSharpen@CAS.fx,ASCII@ASCII.fx,Border@Border.fx,CA@ChromaticAberration.fx,Cartoon@Cartoon.fx,ColorMatrix@ColorMatrix.fx,Curves@Curves.fx,Daltonize@Daltonize.fx,Deband@Deband.fx,DisplayDepth@DisplayDepth.fx,DPX@DPX.fx,FilmGrain@FilmGrain.fx,FXAA@FXAA.fx,HDR@FakeHDR.fx,Layer@Layer.fx,Levels@Levels.fx,LiftGammaGain@LiftGammaGain.fx,LumaSharpen@LumaSharpen.fx,LUT@LUT.fx,Monochrome@Monochrome.fx,Nostalgia@Nostalgia.fx,SMAA@SMAA.fx,Technicolor@Technicolor.fx,Technicolor@HLL.fx,Technicolor2@Technicolor2.fx,Tint@Sepia.fx,Tonemap@Tonemap.fx,UIMask_Top@UIMask.fx,UIMask_Bottom@UIMask.fx,Vibrance@Vibrance.fx,Vignette@Vignette.fx

[CAS.fx]
Contrast=0.000000
Sharpening=2.000000

[Curves.fx]
Contrast=-0.270000
Formula=7
Mode=0

[DPX.fx]
Colorfulness=2.345000
Contrast=0.512000
RGB_C=0.360000,0.360000,0.340000
RGB_Curve=8.000000,8.000000,8.000000
Saturation=3.000000
Strength=0.427000

[Levels.fx]
BlackPoint=27
HighlightClipping=0
WhitePoint=144

[LumaSharpen.fx]
offset_bias=0.388000
pattern=1
sharp_clamp=0.163000
sharp_strength=0.867000
show_sharpen=0

[Technicolor2.fx]
Brightness=0.689000
ColorStrength=0.200000,0.200000,0.200000
Saturation=0.987000
Strength=0.621000

[Tonemap.fx]
Bleach=0.000000
Defog=0.000000
Exposure=0.000000
FogColor=0.000000,0.000000,1.000000
Gamma=1.000000
Saturation=1.000000

"
X5E5erCm,HLL_Nivel2,Letal_1988,INI file,Saturday 15th of March 2025 06:07:23 AM CDT,"Techniques=ContrastAdaptiveSharpen@CAS.fx,Curves@Curves.fx,DPX@DPX.fx,Levels@Levels.fx,LumaSharpen@LumaSharpen.fx,Technicolor2@Technicolor2.fx,Tonemap@Tonemap.fx
TechniqueSorting=AdvancedCRT@CRT.fx,Before@Splitscreen.fx,After@Splitscreen.fx,ContrastAdaptiveSharpen@CAS.fx,ASCII@ASCII.fx,Border@Border.fx,CA@ChromaticAberration.fx,Cartoon@Cartoon.fx,ColorMatrix@ColorMatrix.fx,Curves@Curves.fx,Daltonize@Daltonize.fx,Deband@Deband.fx,DisplayDepth@DisplayDepth.fx,DPX@DPX.fx,FilmGrain@FilmGrain.fx,FXAA@FXAA.fx,HDR@FakeHDR.fx,Layer@Layer.fx,Levels@Levels.fx,LiftGammaGain@LiftGammaGain.fx,LumaSharpen@LumaSharpen.fx,LUT@LUT.fx,Monochrome@Monochrome.fx,Nostalgia@Nostalgia.fx,SMAA@SMAA.fx,Technicolor@Technicolor.fx,Technicolor@HLL.fx,Technicolor2@Technicolor2.fx,Tint@Sepia.fx,Tonemap@Tonemap.fx,UIMask_Top@UIMask.fx,UIMask_Bottom@UIMask.fx,Vibrance@Vibrance.fx,Vignette@Vignette.fx

[CAS.fx]
Contrast=0.000000
Sharpening=2.000000

[Curves.fx]
Contrast=-1.000000
Formula=7
Mode=0

[DPX.fx]
Colorfulness=2.345000
Contrast=0.512000
RGB_C=0.360000,0.360000,0.340000
RGB_Curve=8.000000,8.000000,8.000000
Saturation=3.000000
Strength=0.427000

[Levels.fx]
BlackPoint=37
HighlightClipping=0
WhitePoint=194

[LumaSharpen.fx]
offset_bias=0.388000
pattern=1
sharp_clamp=0.163000
sharp_strength=0.867000
show_sharpen=0

[Technicolor2.fx]
Brightness=0.689000
ColorStrength=0.200000,0.200000,0.200000
Saturation=0.987000
Strength=0.621000

[Tonemap.fx]
Bleach=0.000000
Defog=0.000000
Exposure=0.000000
FogColor=0.000000,0.000000,1.000000
Gamma=1.000000
Saturation=1.000000

"
bJJhvQRC,folk sitter p√• et lukket nettverk og juger for de store herrer..,Nix71,C++,Saturday 15th of March 2025 06:03:21 AM CDT,"h√∏rer folk sitter p√• et lukket nettverk og juger for de store herrer..

drittlei √• gjenta meg sj√∏l,, men ikke tro p√• alt dere ser og h√∏rer...

holografiske √∏yer og gud vet hva.

YOU SHOULD GATHER YOURSELF AND BEGIN TO ASK SOME IMPORTANT QUESIONS..

DONT SIT WITH A PHONE/APP AND THINK IT SHOULD BE LIKE THIS..

FOLK BLIR STYRT SKJ√òNN DET DA... AV DET FORBANNA NETTVERKET..

IKKE GLEM DET ER HUNDRE TUSENVIS MOT DEN S√ÖKALTE NYE DRITTEN..

BEGYNN √Ö LES AMERIKANSKE FORUM S√Ö SKJ√òNNER DERE FORBANNELSEN OG GALSKEPEN I VERDEN IDAG.

ALT SER NORMALT UT P√Ö UTSIA,MEN ,MEN,MEN...

OG IKKE TRO AT DET ER BARE DERE P√Ö TVEITA SOM F√ÖR MED SEG ALT DETTE.

HVOR ER PERSONVERNET OG RETTSTATEN BLITT AV I ALL IMPLANTASJON OGS√Ö VIDERE.

SJEKK √òYA DERES,, HINT"
ZTjY2x7H,Untitled,hishlishter,C#,Saturday 15th of March 2025 06:00:38 AM CDT,"using System;


    public class Program
    {
        // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã: —á–∏—Å–ª–æ –Ω–µ–π—Ä–æ–Ω–æ–≤, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–±—É—á–µ–Ω–∏—è, —á–∏—Å–ª–æ –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
        const int INPUT_NEURONS = 4;    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –¥–∞–≤–ª–µ–Ω–∏–µ, —Å–∞—Ö–∞—Ä, –ø—É–ª—å—Å, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        const int HIDDEN_NEURONS = 3;
        const int OUTPUT_NEURONS = 4;   // 4 –∫–ª–∞—Å—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è
        const double LEARN_RATE = 0.2;
        const int MAX_SAMPLES = 16;

        // Jagged-–º–∞—Å—Å–∏–≤—ã –¥–ª—è –≤–µ—Å–æ–≤ (—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è —Å–º–µ—â–µ–Ω–∏—è)
        double[][] wih; // –í–µ—Å–∞ –º–µ–∂–¥—É –≤—Ö–æ–¥–Ω—ã–º –∏ —Å–∫—Ä—ã—Ç—ã–º —Å–ª–æ—è–º–∏ (—Ä–∞–∑–º–µ—Ä: INPUT_NEURONS+1 x HIDDEN_NEURONS)
        double[][] who; // –í–µ—Å–∞ –º–µ–∂–¥—É —Å–∫—Ä—ã—Ç—ã–º –∏ –≤—ã—Ö–æ–¥–Ω—ã–º —Å–ª–æ—è–º–∏ (—Ä–∞–∑–º–µ—Ä: HIDDEN_NEURONS+1 x OUTPUT_NEURONS)

        // –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ–π—Ä–æ–Ω–æ–≤
        double[] inputs;  // –í—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π
        double[] hidden;  // –°–∫—Ä—ã—Ç—ã–π —Å–ª–æ–π
        double[] target;  // –¶–µ–ª–µ–≤–æ–π –≤–µ–∫—Ç–æ—Ä (one-hot –∫–æ–¥–∏—Ä–æ–≤–∫–∞)
        double[] actual;  // –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –≤—ã—Ö–æ–¥ —Å–µ—Ç–∏

        // –ú–∞—Å—Å–∏–≤—ã –¥–ª—è –æ—à–∏–±–æ–∫ –Ω–µ–π—Ä–æ–Ω–æ–≤
        double[] erro;    // –û—à–∏–±–∫–∏ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–º —Å–ª–æ–µ
        double[] errh;    // –û—à–∏–±–∫–∏ –Ω–∞ —Å–∫—Ä—ã—Ç–æ–º —Å–ª–æ–µ

        // –ú–∞—Å—Å–∏–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–ª–∞—Å—Å–æ–≤ –∑–¥–æ—Ä–æ–≤—å—è
        string[] conditions = { ""–ó–¥–æ—Ä–æ–≤"", ""–ü—Ä–µ–¥–±–æ–ª–µ–Ω"", ""–ë–æ–ª–µ–Ω"", ""–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"" };

        // –ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –æ–±—É—á–∞—é—â–∏–π –ø—Ä–∏–º–µ—Ä
        public class Sample
        {
            public double bloodPressure; // –ê—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–º–º —Ä—Ç. —Å—Ç.)
            public double bloodSugar;    // –£—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ (–º–≥/–¥–ª)
            public double heartRate;     // –ü—É–ª—å—Å (—É–¥/–º–∏–Ω)
            public double temperature;   // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ª–∞ (¬∞C)
            public double[] Out;         // One-hot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞

            public Sample(double bloodPressure, double bloodSugar, double heartRate, double temperature, double[] output)
            {
                this.bloodPressure = bloodPressure;
                this.bloodSugar = bloodSugar;
                this.heartRate = heartRate;
                this.temperature = temperature;
                this.Out = output;
            }
        }

        // –û–±—É—á–∞—é—â–∏–π –Ω–∞–±–æ—Ä: 16 –ø—Ä–∏–º–µ—Ä–æ–≤ (–ø–æ 4 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞)
        Sample[] samples = new Sample[]
        {
            // ""–ó–¥–æ—Ä–æ–≤"": –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            new Sample(120, 100, 75, 36.8, new double[]{1.0, 0.0, 0.0, 0.0}),
            new Sample(118, 98, 73, 36.7, new double[]{1.0, 0.0, 0.0, 0.0}),
            new Sample(121, 101, 76, 36.9, new double[]{1.0, 0.0, 0.0, 0.0}),
            new Sample(119, 99, 74, 36.8, new double[]{1.0, 0.0, 0.0, 0.0}),

            // ""–ü—Ä–µ–¥–±–æ–ª–µ–Ω"": –Ω–µ–±–æ–ª—å—à–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            new Sample(130, 110, 80, 37.2, new double[]{0.0, 1.0, 0.0, 0.0}),
            new Sample(128, 108, 79, 37.1, new double[]{0.0, 1.0, 0.0, 0.0}),
            new Sample(131, 112, 81, 37.3, new double[]{0.0, 1.0, 0.0, 0.0}),
            new Sample(129, 109, 80, 37.2, new double[]{0.0, 1.0, 0.0, 0.0}),

            // ""–ë–æ–ª–µ–Ω"": –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            new Sample(150, 140, 90, 38.0, new double[]{0.0, 0.0, 1.0, 0.0}),
            new Sample(148, 138, 89, 37.9, new double[]{0.0, 0.0, 1.0, 0.0}),
            new Sample(151, 142, 91, 38.1, new double[]{0.0, 0.0, 1.0, 0.0}),
            new Sample(149, 139, 90, 38.0, new double[]{0.0, 0.0, 1.0, 0.0}),

            // ""–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"": –æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            new Sample(170, 180, 120, 39.0, new double[]{0.0, 0.0, 0.0, 1.0}),
            new Sample(168, 178, 118, 38.9, new double[]{0.0, 0.0, 0.0, 1.0}),
            new Sample(171, 182, 121, 39.1, new double[]{0.0, 0.0, 0.0, 1.0}),
            new Sample(169, 179, 119, 39.0, new double[]{0.0, 0.0, 0.0, 1.0})
        };

        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const double BP_MIN = 80;       // –º–º —Ä—Ç. —Å—Ç.
        const double BP_MAX = 180;
        const double SUGAR_MIN = 70;    // –º–≥/–¥–ª
        const double SUGAR_MAX = 200;
        const double HR_MIN = 50;       // —É–¥/–º–∏–Ω
        const double HR_MAX = 150;
        const double TEMP_MIN = 35;     // ¬∞C
        const double TEMP_MAX = 41;

        static Random rand = new Random();

        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤ –≤–µ—Å–æ–≤ –∏ –Ω–µ–π—Ä–æ–Ω–æ–≤
        public Program()
        {
            wih = new double[INPUT_NEURONS + 1][];
            for (int i = 0; i < INPUT_NEURONS + 1; i++)
            {
                wih[i] = new double[HIDDEN_NEURONS];
            }
            who = new double[HIDDEN_NEURONS + 1][];
            for (int i = 0; i < HIDDEN_NEURONS + 1; i++)
            {
                who[i] = new double[OUTPUT_NEURONS];
            }

            inputs = new double[INPUT_NEURONS];
            hidden = new double[HIDDEN_NEURONS];
            target = new double[OUTPUT_NEURONS];
            actual = new double[OUTPUT_NEURONS];

            erro = new double[OUTPUT_NEURONS];
            errh = new double[HIDDEN_NEURONS];
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-0.5, 0.5]
        void AssignRandomWeights()
        {
            for (int inp = 0; inp < INPUT_NEURONS + 1; inp++)
            {
                for (int hid = 0; hid < HIDDEN_NEURONS; hid++)
                {
                    wih[inp][hid] = rand.NextDouble() - 0.5;
                }
            }
            for (int hid = 0; hid < HIDDEN_NEURONS + 1; hid++)
            {
                for (int out = 0; out < OUTPUT_NEURONS; out++)
                {
                    who[hid][out] = rand.NextDouble() - 0.5;
                }
            }
        }

        // –§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (—Å–∏–≥–º–æ–∏–¥–∞) –∏ –µ—ë –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è
        double Sigmoid(double val)
        {
            return 1.0 / (1.0 + Math.Exp(-val));
        }

        double SigmoidDerivative(double val)
        {
            return val * (1.0 - val);
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à—É–º–∞)
        void NormalizeInputs()
        {
            inputs[0] = (inputs[0] - BP_MIN) / (BP_MAX - BP_MIN);
            inputs[1] = (inputs[1] - SUGAR_MIN) / (SUGAR_MAX - SUGAR_MIN);
            inputs[2] = (inputs[2] - HR_MIN) / (HR_MAX - HR_MIN);
            inputs[3] = (inputs[3] - TEMP_MIN) / (TEMP_MAX - TEMP_MIN);
        }

        // –ü—Ä—è–º–æ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ —Å–µ—Ç–∏
        void FeedForward()
        {
            // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–ª–æ—è
            for (int hid = 0; hid < HIDDEN_NEURONS; hid++)
            {
                double sum = 0.0;
                for (int inp = 0; inp < INPUT_NEURONS; inp++)
                {
                    sum += inputs[inp] * wih[inp][hid];
                }
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ wih)
                sum += wih[INPUT_NEURONS][hid];
                hidden[hid] = Sigmoid(sum);
            }
            // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ—è
            for (int out = 0; out < OUTPUT_NEURONS; out++)
            {
                double sum = 0.0;
                for (int hid = 0; hid < HIDDEN_NEURONS; hid++)
                {
                    sum += hidden[hid] * who[hid][out];
                }
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ who)
                sum += who[HIDDEN_NEURONS][out];
                actual[out] = Sigmoid(sum);
            }
        }

        // –ê–ª–≥–æ—Ä–∏—Ç–º –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏
        void BackPropagate()
        {
            // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–º —Å–ª–æ–µ
            for (int out = 0; out < OUTPUT_NEURONS; out++)
            {
                erro[out] = (target[out] - actual[out]) * SigmoidDerivative(actual[out]);
            }
            // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –Ω–∞ —Å–∫—Ä—ã—Ç–æ–º —Å–ª–æ–µ
            for (int hid = 0; hid < HIDDEN_NEURONS; hid++)
            {
                errh[hid] = 0.0;
                for (int out = 0; out < OUTPUT_NEURONS; out++)
                {
                    errh[hid] += erro[out] * who[hid][out];
                }
                errh[hid] *= SigmoidDerivative(hidden[hid]);
            }
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –º–µ–∂–¥—É —Å–∫—Ä—ã—Ç—ã–º –∏ –≤—ã—Ö–æ–¥–Ω—ã–º —Å–ª–æ—è–º–∏
            for (int out = 0; out < OUTPUT_NEURONS; out++)
            {
                for (int hid = 0; hid < HIDDEN_NEURONS; hid++)
                {
                    who[hid][out] += LEARN_RATE * erro[out] * hidden[hid];
                }
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–º–µ—â–µ–Ω–∏—è
                who[HIDDEN_NEURONS][out] += LEARN_RATE * erro[out];
            }
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –º–µ–∂–¥—É –≤—Ö–æ–¥–Ω—ã–º –∏ —Å–∫—Ä—ã—Ç—ã–º —Å–ª–æ—è–º–∏
            for (int hid = 0; hid < HIDDEN_NEURONS; hid++)
            {
                for (int inp = 0; inp < INPUT_NEURONS; inp++)
                {
                    wih[inp][hid] += LEARN_RATE * errh[hid] * inputs[inp];
                }
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–º–µ—â–µ–Ω–∏—è
                wih[INPUT_NEURONS][hid] += LEARN_RATE * errh[hid];
            }
        }

        // –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–ª–∞—Å—Å)
        int Action(double[] vector)
        {
            int sel = 0;
            double max = vector[0];
            for (int i = 1; i < OUTPUT_NEURONS; i++)
            {
                if (vector[i] > max)
                {
                    max = vector[i];
                    sel = i;
                }
            }
            return sel;
        }

        public static void Main(string[] args)
        {
            Program eq = new Program();
            eq.AssignRandomWeights();

            int sampleIndex = 0;
            double err;
            // –û–±—É—á–µ–Ω–∏–µ —Å–µ—Ç–∏ (10000 –∏—Ç–µ—Ä–∞—Ü–∏–π)
            for (int step = 0; step < 10000; step++)
            {
                sampleIndex = (sampleIndex + 1) % MAX_SAMPLES;
                Sample s = eq.samples[sampleIndex];
                // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥–Ω–æ–π –≤–µ–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –æ–±—É—á–∞—é—â–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
                // –ü–æ—Ä—è–¥–æ–∫: –¥–∞–≤–ª–µ–Ω–∏–µ, —Å–∞—Ö–∞—Ä, –ø—É–ª—å—Å, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                eq.inputs[0] = s.bloodPressure;
                eq.inputs[1] = s.bloodSugar;
                eq.inputs[2] = s.heartRate;
                eq.inputs[3] = s.temperature;
                // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–±–µ–∑ —à—É–º–∞)
                eq.NormalizeInputs();
                // –ö–æ–ø–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤–æ–π –≤–µ–∫—Ç–æ—Ä
                for (int i = 0; i < OUTPUT_NEURONS; i++)
                {
                    eq.target[i] = s.Out[i];
                }
                eq.FeedForward();
                err = 0.0;
                for (int i = 0; i < OUTPUT_NEURONS; i++)
                {
                    double diff = s.Out[i] - eq.actual[i];
                    err += diff * diff;
                }
                err = 0.5 * err;
                if (step % 1000 == 0)
                {
                    Console.WriteLine(""step = "" + step + "" mse = "" + err);
                }
                eq.BackPropagate();
            }

            Console.WriteLine();
            int correct = 0;
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏ –Ω–∞ –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö
            for (int i = 0; i < MAX_SAMPLES; i++)
            {
                Sample s = eq.samples[i];
                eq.inputs[0] = s.bloodPressure;
                eq.inputs[1] = s.bloodSugar;
                eq.inputs[2] = s.heartRate;
                eq.inputs[3] = s.temperature;
                eq.NormalizeInputs();
                for (int j = 0; j < OUTPUT_NEURONS; j++)
                {
                    eq.target[j] = s.Out[j];
                }
                eq.FeedForward();
                int predicted = eq.Action(eq.actual);
                int expected = eq.Action(eq.target);
                if (predicted != expected)
                {
                    Console.WriteLine(""Input: "" + s.bloodPressure + "" "" + s.bloodSugar + "" "" 
                        + s.heartRate + "" "" + s.temperature +
                        "" predicted: "" + eq.conditions[predicted] +
                        "" expected: "" + eq.conditions[expected]);
                }
                else
                {
                    correct++;
                }
            }
            Console.WriteLine(""Network is "" + ((float)correct / MAX_SAMPLES * 100.0) + ""% correct\n"");

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:
            // –ü–æ—Ä—è–¥–æ–∫ –≤—Ö–æ–¥–æ–≤: –¥–∞–≤–ª–µ–Ω–∏–µ, —Å–∞—Ö–∞—Ä, –ø—É–ª—å—Å, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞.
            double[][] testInputs = new double[][]
            {
                new double[] {120, 100, 75, 36.8},   // –æ–∂–∏–¥–∞–µ—Ç—Å—è ""–ó–¥–æ—Ä–æ–≤""
                new double[] {130, 110, 80, 37.2},   // –æ–∂–∏–¥–∞–µ—Ç—Å—è ""–ü—Ä–µ–¥–±–æ–ª–µ–Ω""
                new double[] {150, 140, 90, 38.0},   // –æ–∂–∏–¥–∞–µ—Ç—Å—è ""–ë–æ–ª–µ–Ω""
                new double[] {170, 180, 120, 39.0}   // –æ–∂–∏–¥–∞–µ—Ç—Å—è ""–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ""
            };
            foreach (double[] test in testInputs)
            {
                eq.inputs[0] = test[0];
                eq.inputs[1] = test[1];
                eq.inputs[2] = test[2];
                eq.inputs[3] = test[3];
                eq.NormalizeInputs();
                eq.FeedForward();
                int index = eq.Action(eq.actual);
                Console.WriteLine(""Input: ["" + test[0] + "", "" + test[1] + "", "" + test[2] + "", "" + test[3]
                    + ""] -> "" + eq.conditions[index]);
            }
        }
    }
"
EdPxUdv3,Event overlap times,Code_187,Python,Saturday 15th of March 2025 05:54:29 AM CDT,"def find_event_overlap(event1, event2):
    def time_to_minutes(time_str):
        hours, minutes = map(int, time_str.split(':'))
        return hours * 60 + minutes

    start1, end1 = time_to_minutes(event1[0]), time_to_minutes(event1[1])
    start2, end2 = time_to_minutes(event2[0]), time_to_minutes(event2[1])

    overlap_start = max(start1, start2)
    overlap_end = min(end1, end2)

    if overlap_start <= overlap_end:
        def minutes_to_time(minutes):
            hours = minutes // 60
            minutes %= 60
            return ""{:02d}:{:02d}"".format(hours, minutes)

        return 'true'""\n""f""The two events overlap from {minutes_to_time(overlap_start)} to {minutes_to_time(overlap_end)}.""
    else:
        return 'false'""\n""""The two events do not overlap.""


event_1 = [""02:15"",""04:00""]
event_2 = [""04:00"",""06:00""]
print(find_event_overlap(event_1, event_2))

event_1 = [""01:00"", ""02:35""]
event_2 = [""01:25"", ""06:00""]
print(find_event_overlap(event_1, event_2))

event_1 = [""10:15"", ""11:15""]
event_2 = [""14:30"", ""16:40""]
print(find_event_overlap(event_1, event_2))"
B4KxbHhd,Untitled,hishlishter,C#,Saturday 15th of March 2025 05:54:28 AM CDT,"using System;

namespace Org.Example
{
    public class Program
    {
        // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã: —á–∏—Å–ª–æ –Ω–µ–π—Ä–æ–Ω–æ–≤, —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –∏ —á–∏—Å–ª–æ –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
        const int INPUT_NEURONS = 4;    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –¥–∞–≤–ª–µ–Ω–∏–µ, —Å–∞—Ö–∞—Ä, –ø—É–ª—å—Å, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        const int HIDDEN_NEURONS = 3;
        const int OUTPUT_NEURONS = 4;   // 4 –∫–ª–∞—Å—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è
        const double LEARN_RATE = 0.2;
        const int MAX_SAMPLES = 16;

        // Jagged-–º–∞—Å—Å–∏–≤—ã –¥–ª—è –≤–µ—Å–æ–≤ (—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è —Å–º–µ—â–µ–Ω–∏—è)
        double[][] wih; // –í–µ—Å–∞ –º–µ–∂–¥—É –≤—Ö–æ–¥–Ω—ã–º –∏ —Å–∫—Ä—ã—Ç—ã–º —Å–ª–æ—è–º–∏ (—Ä–∞–∑–º–µ—Ä: INPUT_NEURONS+1 x HIDDEN_NEURONS)
        double[][] who; // –í–µ—Å–∞ –º–µ–∂–¥—É —Å–∫—Ä—ã—Ç—ã–º –∏ –≤—ã—Ö–æ–¥–Ω—ã–º —Å–ª–æ—è–º–∏ (—Ä–∞–∑–º–µ—Ä: HIDDEN_NEURONS+1 x OUTPUT_NEURONS)

        // –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ–π—Ä–æ–Ω–æ–≤
        double[] inputs;  // –í—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π
        double[] hidden;  // –°–∫—Ä—ã—Ç—ã–π —Å–ª–æ–π
        double[] target;  // –¶–µ–ª–µ–≤–æ–π –≤–µ–∫—Ç–æ—Ä (one-hot –∫–æ–¥–∏—Ä–æ–≤–∫–∞)
        double[] actual;  // –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –≤—ã—Ö–æ–¥ —Å–µ—Ç–∏

        // –ú–∞—Å—Å–∏–≤—ã –¥–ª—è –æ—à–∏–±–æ–∫ –Ω–µ–π—Ä–æ–Ω–æ–≤
        double[] erro;    // –û—à–∏–±–∫–∏ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–º —Å–ª–æ–µ
        double[] errh;    // –û—à–∏–±–∫–∏ –Ω–∞ —Å–∫—Ä—ã—Ç–æ–º —Å–ª–æ–µ

        // –ú–∞—Å—Å–∏–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–ª–∞—Å—Å–æ–≤ –∑–¥–æ—Ä–æ–≤—å—è
        string[] conditions = { ""–ó–¥–æ—Ä–æ–≤"", ""–ü—Ä–µ–¥–±–æ–ª–µ–Ω"", ""–ë–æ–ª–µ–Ω"", ""–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"" };

        // –ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –æ–±—É—á–∞—é—â–∏–π –ø—Ä–∏–º–µ—Ä
        public class Sample
        {
            public double bloodPressure; // –ê—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–º–º —Ä—Ç. —Å—Ç.)
            public double bloodSugar;    // –£—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ (–º–≥/–¥–ª)
            public double heartRate;     // –ü—É–ª—å—Å (—É–¥/–º–∏–Ω)
            public double temperature;   // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ª–∞ (¬∞C)
            public double[] Out;         // One-hot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞

            public Sample(double bloodPressure, double bloodSugar, double heartRate, double temperature, double[] output)
            {
                this.bloodPressure = bloodPressure;
                this.bloodSugar = bloodSugar;
                this.heartRate = heartRate;
                this.temperature = temperature;
                this.Out = output;
            }
        }

        // –û–±—É—á–∞—é—â–∏–π –Ω–∞–±–æ—Ä: 16 –ø—Ä–∏–º–µ—Ä–æ–≤ (–ø–æ 4 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞)
        Sample[] samples = new Sample[]
        {
            // ""–ó–¥–æ—Ä–æ–≤"": –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            new Sample(120, 100, 75, 36.8, new double[] {1.0, 0.0, 0.0, 0.0}),
            new Sample(118, 98, 73, 36.7, new double[] {1.0, 0.0, 0.0, 0.0}),
            new Sample(121, 101, 76, 36.9, new double[] {1.0, 0.0, 0.0, 0.0}),
            new Sample(119, 99, 74, 36.8, new double[] {1.0, 0.0, 0.0, 0.0}),

            // ""–ü—Ä–µ–¥–±–æ–ª–µ–Ω"": –Ω–µ–±–æ–ª—å—à–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            new Sample(130, 110, 80, 37.2, new double[] {0.0, 1.0, 0.0, 0.0}),
            new Sample(128, 108, 79, 37.1, new double[] {0.0, 1.0, 0.0, 0.0}),
            new Sample(131, 112, 81, 37.3, new double[] {0.0, 1.0, 0.0, 0.0}),
            new Sample(129, 109, 80, 37.2, new double[] {0.0, 1.0, 0.0, 0.0}),

            // ""–ë–æ–ª–µ–Ω"": –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            new Sample(150, 140, 90, 38.0, new double[] {0.0, 0.0, 1.0, 0.0}),
            new Sample(148, 138, 89, 37.9, new double[] {0.0, 0.0, 1.0, 0.0}),
            new Sample(151, 142, 91, 38.1, new double[] {0.0, 0.0, 1.0, 0.0}),
            new Sample(149, 139, 90, 38.0, new double[] {0.0, 0.0, 1.0, 0.0}),

            // ""–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"": –æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            new Sample(170, 180, 120, 39.0, new double[] {0.0, 0.0, 0.0, 1.0}),
            new Sample(168, 178, 118, 38.9, new double[] {0.0, 0.0, 0.0, 1.0}),
            new Sample(171, 182, 121, 39.1, new double[] {0.0, 0.0, 0.0, 1.0}),
            new Sample(169, 179, 119, 39.0, new double[] {0.0, 0.0, 0.0, 1.0})
        };

        // –î–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const double BP_MIN = 80;      // –º–º —Ä—Ç. —Å—Ç.
        const double BP_MAX = 180;
        const double SUGAR_MIN = 70;   // –º–≥/–¥–ª
        const double SUGAR_MAX = 200;
        const double HR_MIN = 50;      // —É–¥/–º–∏–Ω
        const double HR_MAX = 150;
        const double TEMP_MIN = 35;    // ¬∞C
        const double TEMP_MAX = 41;

        // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä Random –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
        static Random rand = new Random();

        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–æ–≤
        public Program()
        {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–æ–≤ –¥–ª—è –≤–µ—Å–æ–≤
            wih = new double[INPUT_NEURONS + 1][];
            for (int i = 0; i < INPUT_NEURONS + 1; i++)
            {
                wih[i] = new double[HIDDEN_NEURONS];
            }
            who = new double[HIDDEN_NEURONS + 1][];
            for (int i = 0; i < HIDDEN_NEURONS + 1; i++)
            {
                who[i] = new double[OUTPUT_NEURONS];
            }
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–æ–≤ –¥–ª—è –Ω–µ–π—Ä–æ–Ω–æ–≤ –∏ –æ—à–∏–±–æ–∫
            inputs = new double[INPUT_NEURONS];
            hidden = new double[HIDDEN_NEURONS];
            target = new double[OUTPUT_NEURONS];
            actual = new double[OUTPUT_NEURONS];
            erro = new double[OUTPUT_NEURONS];
            errh = new double[HIDDEN_NEURONS];
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-0.5, 0.5]
        void AssignRandomWeights()
        {
            for (int inp = 0; inp < INPUT_NEURONS + 1; inp++)
            {
                for (int hid = 0; hid < HIDDEN_NEURONS; hid++)
                {
                    wih[inp][hid] = rand.NextDouble() - 0.5;
                }
            }
            for (int hid = 0; hid < HIDDEN_NEURONS + 1; hid++)
            {
                for (int out = 0; out < OUTPUT_NEURONS; out++)
                {
                    who[hid][out] = rand.NextDouble() - 0.5;
                }
            }
        }

        // –§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (—Å–∏–≥–º–æ–∏–¥–∞) –∏ –µ—ë –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è
        double Sigmoid(double val)
        {
            return 1.0 / (1.0 + Math.Exp(-val));
        }

        double SigmoidDerivative(double val)
        {
            return val * (1.0 - val);
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à—É–º–∞)
        void NormalizeInputs()
        {
            // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É [0, 1] –ø–æ —Ñ–æ—Ä–º—É–ª–µ: (value - min) / (max - min)
            inputs[0] = (inputs[0] - BP_MIN) / (BP_MAX - BP_MIN);
            inputs[1] = (inputs[1] - SUGAR_MIN) / (SUGAR_MAX - SUGAR_MIN);
            inputs[2] = (inputs[2] - HR_MIN) / (HR_MAX - HR_MIN);
            inputs[3] = (inputs[3] - TEMP_MIN) / (TEMP_MAX - TEMP_MIN);
        }

        // –ü—Ä—è–º–æ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ —Å–µ—Ç–∏
        void FeedForward()
        {
            // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–ª–æ—è
            for (int hid = 0; hid < HIDDEN_NEURONS; hid++)
            {
                double sum = 0.0;
                for (int inp = 0; inp < INPUT_NEURONS; inp++)
                {
                    sum += inputs[inp] * wih[inp][hid];
                }
                // –°–º–µ—â–µ–Ω–∏–µ: –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ wih –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–∫—Ä—ã—Ç–æ–≥–æ –Ω–µ–π—Ä–æ–Ω–∞
                sum += wih[INPUT_NEURONS][hid];
                hidden[hid] = Sigmoid(sum);
            }
            // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ—è
            for (int out = 0; out < OUTPUT_NEURONS; out++)
            {
                double sum = 0.0;
                for (int hid = 0; hid < HIDDEN_NEURONS; hid++)
                {
                    sum += hidden[hid] * who[hid][out];
                }
                // –°–º–µ—â–µ–Ω–∏–µ: –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ who –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –Ω–µ–π—Ä–æ–Ω–∞
                sum += who[HIDDEN_NEURONS][out];
                actual[out] = Sigmoid(sum);
            }
        }

        // –ê–ª–≥–æ—Ä–∏—Ç–º –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏
        void BackPropagate()
        {
            // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–º —Å–ª–æ–µ
            for (int out = 0; out < OUTPUT_NEURONS; out++)
            {
                erro[out] = (target[out] - actual[out]) * SigmoidDerivative(actual[out]);
            }
            // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –Ω–∞ —Å–∫—Ä—ã—Ç–æ–º —Å–ª–æ–µ
            for (int hid = 0; hid < HIDDEN_NEURONS; hid++)
            {
                errh[hid] = 0.0;
                for (int out = 0; out < OUTPUT_NEURONS; out++)
                {
                    errh[hid] += erro[out] * who[hid][out];
                }
                errh[hid] *= SigmoidDerivative(hidden[hid]);
            }
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –º–µ–∂–¥—É —Å–∫—Ä—ã—Ç—ã–º –∏ –≤—ã—Ö–æ–¥–Ω—ã–º —Å–ª–æ—è–º–∏
            for (int out = 0; out < OUTPUT_NEURONS; out++)
            {
                for (int hid = 0; hid < HIDDEN_NEURONS; hid++)
                {
                    who[hid][out] += LEARN_RATE * erro[out] * hidden[hid];
                }
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–º–µ—â–µ–Ω–∏—è
                who[HIDDEN_NEURONS][out] += LEARN_RATE * erro[out];
            }
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –º–µ–∂–¥—É –≤—Ö–æ–¥–Ω—ã–º –∏ —Å–∫—Ä—ã—Ç—ã–º —Å–ª–æ—è–º–∏
            for (int hid = 0; hid < HIDDEN_NEURONS; hid++)
            {
                for (int inp = 0; inp < INPUT_NEURONS; inp++)
                {
                    wih[inp][hid] += LEARN_RATE * errh[hid] * inputs[inp];
                }
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–º–µ—â–µ–Ω–∏—è
                wih[INPUT_NEURONS][hid] += LEARN_RATE * errh[hid];
            }
        }

        // –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–ª–∞—Å—Å)
        int Action(double[] vector)
        {
            int sel = 0;
            double max = vector[0];
            for (int i = 1; i < OUTPUT_NEURONS; i++)
            {
                if (vector[i] > max)
                {
                    max = vector[i];
                    sel = i;
                }
            }
            return sel;
        }

        public static void Main(string[] args)
        {
            Program wc = new Program();
            wc.AssignRandomWeights();

            int sampleIndex = 0;
            double err;
            // –û–±—É—á–µ–Ω–∏–µ —Å–µ—Ç–∏ (10000 –∏—Ç–µ—Ä–∞—Ü–∏–π)
            for (int step = 0; step < 10000; step++)
            {
                sampleIndex = (sampleIndex + 1) % MAX_SAMPLES;
                Sample s = wc.samples[sampleIndex];
                // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥–Ω–æ–π –≤–µ–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –æ–±—É—á–∞—é—â–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
                // –ü–æ—Ä—è–¥–æ–∫: –¥–∞–≤–ª–µ–Ω–∏–µ, —Å–∞—Ö–∞—Ä, –ø—É–ª—å—Å, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                wc.inputs[0] = s.bloodPressure;
                wc.inputs[1] = s.bloodSugar;
                wc.inputs[2] = s.heartRate;
                wc.inputs[3] = s.temperature;
                // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–±–µ–∑ —à—É–º–∞)
                wc.NormalizeInputs();
                // –ö–æ–ø–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤–æ–π –≤–µ–∫—Ç–æ—Ä
                for (int i = 0; i < OUTPUT_NEURONS; i++)
                {
                    wc.target[i] = s.Out[i];
                }
                wc.FeedForward();
                err = 0.0;
                for (int i = 0; i < OUTPUT_NEURONS; i++)
                {
                    double diff = s.Out[i] - wc.actual[i];
                    err += diff * diff;
                }
                err = 0.5 * err;
                if (step % 1000 == 0)
                {
                    Console.WriteLine(""step = "" + step + "" mse = "" + err);
                }
                wc.BackPropagate();
            }

            Console.WriteLine();
            int correct = 0;
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏ –Ω–∞ –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö
            for (int i = 0; i < MAX_SAMPLES; i++)
            {
                Sample s = wc.samples[i];
                wc.inputs[0] = s.bloodPressure;
                wc.inputs[1] = s.bloodSugar;
                wc.inputs[2] = s.heartRate;
                wc.inputs[3] = s.temperature;
                wc.NormalizeInputs();
                for (int j = 0; j < OUTPUT_NEURONS; j++)
                {
                    wc.target[j] = s.Out[j];
                }
                wc.FeedForward();
                int predicted = wc.Action(wc.actual);
                int expected = wc.Action(wc.target);
                if (predicted != expected)
                {
                    Console.WriteLine(""Input: "" + s.bloodPressure + "" "" + s.bloodSugar + "" "" 
                        + s.heartRate + "" "" + s.temperature +
                        "" predicted: "" + wc.conditions[predicted] +
                        "" expected: "" + wc.conditions[expected]);
                }
                else
                {
                    correct++;
                }
            }
            Console.WriteLine(""Network is "" + ((float)correct / MAX_SAMPLES * 100.0) + ""% correct\n"");

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            // –ó–∞–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –æ–∂–∏–¥–∞–µ–º—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞:
            double[][] testInputs = new double[][]
            {
                new double[] {120, 100, 75, 36.8},   // –æ–∂–∏–¥–∞–µ—Ç—Å—è ""–ó–¥–æ—Ä–æ–≤""
                new double[] {130, 110, 80, 37.2},   // –æ–∂–∏–¥–∞–µ—Ç—Å—è ""–ü—Ä–µ–¥–±–æ–ª–µ–Ω""
                new double[] {150, 140, 90, 38.0},   // –æ–∂–∏–¥–∞–µ—Ç—Å—è ""–ë–æ–ª–µ–Ω""
                new double[] {170, 180, 120, 39.0}   // –æ–∂–∏–¥–∞–µ—Ç—Å—è ""–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ""
            };
            foreach (double[] test in testInputs)
            {
                wc.inputs[0] = test[0];
                wc.inputs[1] = test[1];
                wc.inputs[2] = test[2];
                wc.inputs[3] = test[3];
                wc.NormalizeInputs();
                wc.FeedForward();
                int index = wc.Action(wc.actual);
                Console.WriteLine(""Input: ["" + test[0] + "", "" + test[1] + "", "" + test[2] + "", "" + test[3]
                    + ""] -> "" + wc.conditions[index]);
            }
        }
    }
}
"
AfXjh89Y,Untitled,VeNoM_1,Pawn,Saturday 15th of March 2025 05:48:13 AM CDT,"#include <a_samp>
#include <samp_bcrypt>
#include <sscanf2>
#include <zcmd>
#define SERVER_DATABASE ""server.db""

#define REGISTER_DIALOG 0
#define LOGIN_DIALOG 1
#define MAX_HOUSES 100
#define PLAYER 0
#define HELPER 1
#define ADMIN 2
#define OWNER 3

#define VIP_BRONZE 0
#define VIP_SILVER 1
#define VIP_GOLD 2
#define VIP_DIAMOND 3
#define REWARD_INTERVAL (3600000)
#define REWARD_MONEY 2000
#define REWARD_SCORE 1

#define GAMESTATE_FREEROAM 0
#define GAMESTATE_ROLEPLAY 1
#define VIP_CHAT_COLOR F72585

#define COLOR_YELLOW 0xFFFF00AA
#define COLOR_RED 0xAA3333AA
#define COLOR_MAGENTA 0xFF00FFFF
#define COLOR_GOLD 0xFFD700FF
#define COLOR_GREEN 0x008000FF

new DB:server_database;
new DBResult:database_result;
new rpName[MAX_PLAYERS][24];
new Text:PublicTD[1];

enum player_data
{
	player_kills,
	player_deaths,
	player_admin_level,
	player_vip_level,

	bool:player_logged
};

new PlayerData[MAX_PLAYERS][player_data];
new gamestate=GAMESTATE_FREEROAM;

stock GetName(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	return name;
}

stock DB_Escape(text[])//Credits: Y_Less
{
    new ret[80 * 2], ch, i, j;
    while ((ch = text[i++]) && j < sizeof (ret))
    {
        if (ch == '\'')
        {
            if (j < sizeof (ret) - 2)
            {
                ret[j++] = '\'';
                ret[j++] = '\'';
            }
        }
        else if (j < sizeof (ret))
        {
            ret[j++] = ch;
        }
        else
        {
            j++;
        }
    }
    ret[sizeof (ret) - 1] = '\0';
    return ret;
}

stock SaveAccount(playerid)
{
    new query[256];
	if(PlayerData[playerid][player_logged] == true)
	{
	    format(query, sizeof(query),
		""UPDATE USERS SET SCORE = '%d', KILLS = '%d', DEATHS = '%d',ADMIN_LEVEL = '%d', VIP_LEVEL = '%d' WHERE NAME = '%s' COLLATE NOCASE"",
		GetPlayerScore(playerid), PlayerData[playerid][player_kills], PlayerData[playerid][player_deaths],
		PlayerData[playerid][player_admin_level], PlayerData[playerid][player_vip_level],GetName(playerid));
		database_result = db_query(server_database, query);
		db_free_result(database_result);
	}
	return 1;
}


main() { }

public OnGameModeInit()
{
	SetGameModeText(""Blank Script"");
	SetTimer(""GiveHourlyReward"",REWARD_INTERVAL,true);
	ManualVehicleEngineAndLights();
	AddPlayerClass(0, 1958.3783, 1343.1572, 15.3746, 269.1425, 0, 0, 0, 0, 0, 0);

	server_database = db_open(SERVER_DATABASE);

	db_query(server_database, ""CREATE TABLE IF NOT EXISTS USERS (`NAME`, `PASS`, `SCORE`, `KILLS`, `DEATHS`,`ADMIN_LEVEL`,`VIP_LEVEL`)"");
    PublicTD[0] = TextDrawCreate(480.000000, 316.000000, ""~y~NAME:_~g~INFERNUS~n~~y~SPEED:_~b~0KM/h~n~~y~HEALTH:_~r~100~n~~y~FUEL:_~w~64L"");
    TextDrawFont(PublicTD[0], 1);
    TextDrawLetterSize(PublicTD[0], 0.229166, 1.950000);
    TextDrawTextSize(PublicTD[0], 572.500000, 15.500000);
    TextDrawSetOutline(PublicTD[0], 1);
    TextDrawSetShadow(PublicTD[0], 0);
    TextDrawAlignment(PublicTD[0], 1);
    TextDrawColor(PublicTD[0], -1);
    TextDrawBackgroundColor(PublicTD[0], 255);
    TextDrawBoxColor(PublicTD[0], 100);
    TextDrawUseBox(PublicTD[0], 1);
    TextDrawSetProportional(PublicTD[0], 1);
    TextDrawSetSelectable(PublicTD[0], 0);
	return 1;
}

public OnGameModeExit()
{
    db_close(server_database);
	return 1;
}

public OnPlayerConnect(playerid)
{
	SetPlayerScore(playerid, 0);

	PlayerData[playerid][player_kills] = 0;
	PlayerData[playerid][player_deaths] = 0;
	PlayerData[playerid][player_admin_level] = 0;
	PlayerData[playerid][player_logged] = false;
	GivePlayerMoney(playerid, 500000);

    new query[128];
	format(query, sizeof(query), ""SELECT NAME FROM USERS WHERE NAME = '%s' COLLATE NOCASE"", DB_Escape(GetName(playerid)));
  	database_result = db_query(server_database, query);
  	if(db_num_rows(database_result))
	{
		ShowPlayerDialog(playerid, LOGIN_DIALOG, DIALOG_STYLE_PASSWORD, ""{FFFFFF}Account Login"", ""{FFFFFF}Please enter your password below to login to your account:"", ""Enter"", ""Leave"");
	}
	else
	{
		ShowPlayerDialog(playerid, REGISTER_DIALOG, DIALOG_STYLE_PASSWORD, ""{FFFFFF}Register Account"", ""{FFFFFF}Please enter a password below to register an account:"", ""Enter"", ""Leave"");
	}
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	SaveAccount(playerid);
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if (newstate == PLAYER_STATE_DRIVER) // Player entered a vehicle as a driver
    {
        TextDrawShowForPlayer(playerid, PublicTD[0]);
    }
    else if (oldstate == PLAYER_STATE_DRIVER) // Player exited the vehicle
    {
        TextDrawHideForPlayer(playerid, PublicTD[0]);
    }
    return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
    if(killerid != INVALID_PLAYER_ID)
	{
	    SetPlayerScore(killerid, GetPlayerScore(killerid) + 1);
		PlayerData[killerid][player_kills]++;
	}

	SetPlayerScore(playerid, GetPlayerScore(playerid) - 1);
    PlayerData[playerid][player_deaths]++;
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(dialogid == REGISTER_DIALOG)
	{
	    if(response)
	    {
	        if(strlen(inputtext) < 3 || strlen(inputtext) > 24)
			{
				SendClientMessage(playerid, -1, ""SERVER: Your password must be from 3-24 characters."");
				return ShowPlayerDialog(playerid, REGISTER_DIALOG, DIALOG_STYLE_PASSWORD, ""{FFFFFF}Register Account"", ""{FFFFFF}Please enter a password below to register an account:"", ""Enter"", ""Leave"");
			}

			bcrypt_hash(playerid, ""OnPlayerRegister"", inputtext, 12);
			return 1;
	    }
	    else
	    {
	        Kick(playerid);
	    }
	}
	else if(dialogid == LOGIN_DIALOG)
	{
	    if(response)
	    {
	        new query[256], field[64];
	        format(query, sizeof(query), ""SELECT PASS FROM USERS WHERE NAME = '%s' COLLATE NOCASE"", DB_Escape(GetName(playerid)));
			database_result = db_query(server_database, query);
		  	if(db_num_rows(database_result))
			{
				db_get_field_assoc(database_result, ""PASS"", field, sizeof(field));
			  	bcrypt_verify(playerid, ""OnPlayerLogin"", inputtext, field);
			}
			return 1;
	    }
	    else
	    {
	        Kick(playerid);
	    }
	}
	return 1;
}

forward OnPlayerLogin(playerid, bool:success);
public OnPlayerLogin(playerid, bool:success)
{
 	if(success)
	{
		new query[256], field[24];
	    format(query, sizeof(query), ""SELECT * FROM USERS WHERE NAME = '%s' COLLATE NOCASE"", DB_Escape(GetName(playerid)));
		database_result = db_query(server_database, query);
		if(db_num_rows(database_result))
		{
			db_get_field_assoc(database_result, ""SCORE"", field, sizeof(field));
			SetPlayerScore(playerid, strval(field));

			db_get_field_assoc(database_result, ""KILLS"", field, sizeof(field));
			PlayerData[playerid][player_kills] = strval(field);

			db_get_field_assoc(database_result, ""DEATHS"", field, sizeof(field));
			PlayerData[playerid][player_deaths] = strval(field);

			db_get_field_assoc(database_result, ""ADMIN_LEVEL"", field, sizeof(field));
			PlayerData[playerid][player_admin_level] = strval(field);
			db_get_field_assoc(database_result, ""VIP_LEVEL"", field, sizeof(field));
			PlayerData[playerid][player_vip_level] = strval(field);
		}

		db_free_result(database_result);

		PlayerData[playerid][player_logged] = true;

		SendClientMessage(playerid, -1, ""SERVER: You have successfully logged into your account."");
		return 1;
 	}
	else
 	{
 		Kick(playerid);
 	}
	return 1;
}

forward OnPlayerRegister(playerid);
public OnPlayerRegister(playerid)
{
	new password[64];
	bcrypt_get_hash(password);

	new query[256];
	format(query, sizeof(query), ""INSERT INTO USERS (NAME, PASS, SCORE, KILLS, DEATHS,ADMIN_LEVEL,VIP_LEVEL,last_x,last_y,last_z,last_angle,INT,WORLD) VALUES ('%s', '%s', '%d', '%d', '%d','%d','%d')"", DB_Escape(GetName(playerid)), password, GetPlayerScore(playerid), PlayerData[playerid][player_kills], PlayerData[playerid][player_deaths],PlayerData[playerid][player_admin_level],PlayerData[playerid][player_vip_level]);
	database_result = db_query(server_database, query);
	db_free_result(database_result);

	PlayerData[playerid][player_logged] = true;

	SendClientMessage(playerid, -1, ""SERVER: You have successfully registered an account."");
	return 1;
}
forward GiveHourlyReward();
public GiveHourlyReward()
{
	new i;
	for(i=0;i<MAX_PLAYERS;i++)
	{
	    GivePlayerMoney(i,REWARD_MONEY);
	    SetPlayerScore(i,GetPlayerScore(i)+REWARD_SCORE);
	    SendClientMessage(i, 0x00FF00FF, ""You have received your hourly reward: $2000 and +1 Score!"");
	}
	return 1;
}
public OnPlayerText(playerid,text[])
{
    if(text[0]=='#')
    {
        if (PlayerData[playerid][player_vip_level] < VIP_BRONZE)
        {
            SendClientMessage(playerid, COLOR_RED, ""You are not a VIP!"");
            return 0; // Block message from being sent to normal chat
        }
        new message[128];
        format(message, sizeof(message), ""[VIP Chat] %s: %s"", GetPlayerNameEx(playerid), text[1]); // Remove #

        for (new i = 0; i < MAX_PLAYERS; i++)
        {
            if (IsPlayerConnected(i) && PlayerData[i][player_vip_level] >= VIP_BRONZE)
            {
                SendClientMessage(i, COLOR_GOLD, message);
            }
        }

        return 0; // Block original message from going to normal chat
	}
	
	return 1;
}

public OnPlayerUpdate(playerid)
{
    if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER) // Only update if player is driving
    {
        new vehicleid = GetPlayerVehicleID(playerid);
        new vehicleModel = GetVehicleModel(vehicleid);
        new Float:vehicleHealth;
		GetVehicleHealth(vehicleid, vehicleHealth);

        // Get speed
        new str[64], speed = GetPlayerSpeed(playerid);
        format(str, sizeof(str), ""~y~NAME:_~g~%s~n~~y~SPEED:_~b~%dKM/h~n~~y~HEALTH:_~r~%d~n~~y~FUEL:_~w~64L"",
               GetVehicleName(vehicleModel), speed, vehicleHealth);

        TextDrawSetString(PublicTD[0], str);
    }
    return 1;
}
stock GetPlayerSpeed(playerid)
{
    new Float:x, Float:y, Float:z, Float:speed;
    GetPlayerVelocity(playerid, x, y, z);

    // Approximate square root without floatsqrt
    new Float:sum = (x * x + y * y + z * z);
    new Float:approx = sum / (1.0 + sum / 2.0); // Simple approximation

    speed = floatmul(approx, 180.0); // Convert to km/h
    return floatround(speed);
}
stock GetVehicleName(vehicleid)
{
    new name[32];
    switch (vehicleid)
    {
        case 411: name = ""INFERNUS"";
        case 451: name = ""TURISMO"";
        case 400: name = ""LANDSTALKER"";
        default: name = ""UNKNOWN"";
    }
    return name;
}
stock GetPlayerNameEx(playerid)
{
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, name, sizeof(name));
    return name;
}
CMD:setlevel(playerid, params[])
{
    new targetid, name[MAX_PLAYER_NAME], level[16], string[128], query[256], admin;

    if (!IsPlayerAdmin(playerid))
        return SendClientMessage(playerid, -1, ""You are not authorized to use this command."");

    // Parse the parameters using sscanf
    if (sscanf(params, ""us[16]"", targetid, level))
        return SendClientMessage(playerid, -1, ""Syntax: /setlevel [playerid] [level]"");

    // Check if target player is valid
    if (!IsPlayerConnected(targetid))
        return SendClientMessage(playerid, -1, ""Invalid player ID."");

    // Determine admin level
    if (!strcmp(level, ""player"", true)) admin = PLAYER;
    else if (!strcmp(level, ""helper"", true)) admin = HELPER;
    else if (!strcmp(level, ""admin"", true)) admin = ADMIN;
    else if (!strcmp(level, ""owner"", true)) admin = OWNER;
    else
        return SendClientMessage(playerid, -1, ""Invalid admin level."");

    // Get player's name
    GetPlayerName(targetid, name, sizeof(name));

    // Check if database is connected
    if (!server_database)
        return SendClientMessage(playerid, -1, ""Database connection error."");

    // Query to check if player exists in DB
    format(query, sizeof(query), ""SELECT ADMIN_LEVEL FROM USERS WHERE NAME = '%s' COLLATE NOCASE"", DB_Escape(name));
    new DBResult:result = db_query(server_database, query);

    if (db_num_rows(result))
    {
        db_free_result(result);

        // Update admin level in database
        format(query, sizeof(query), ""UPDATE USERS SET ADMIN_LEVEL = %d WHERE NAME = '%s' COLLATE NOCASE"", admin, DB_Escape(name));
        db_query(server_database, query);

        // Update player's admin level in memory
        PlayerData[targetid][player_admin_level] = admin;

        format(string, sizeof(string), ""SERVER: You have successfully set the admin level of %s to %s."", name, level);
        SendClientMessage(playerid, -1, string);
    }
    else
    {
        SendClientMessage(playerid, -1, ""Player not found in database."");
        db_free_result(result);
    }

    return 1;
}

CMD:setvip(playerid, params[])
{
    new targetid, name[24], vip[16], string[128], query[256], vip_level;

    if (!IsPlayerAdmin(playerid))
        return SendClientMessage(playerid, -1, ""You are not authorized to use this command."");

    // Corrected sscanf format
    if (sscanf(params, ""us[16]"", targetid, name, vip))
        return SendClientMessage(playerid, -1, ""Syntax: /setvip [playerid] [vip level]"");

    if (!IsPlayerConnected(targetid))
        return SendClientMessage(playerid, -1, ""Invalid player ID."");

    if (!strcmp(vip, ""bronze"", true)) vip_level = VIP_BRONZE;
    else if (!strcmp(vip, ""silver"", true)) vip_level = VIP_SILVER;
    else if (!strcmp(vip, ""gold"", true)) vip_level = VIP_GOLD;
    else if (!strcmp(vip, ""diamond"", true)) vip_level = VIP_DIAMOND;
    else
        return SendClientMessage(playerid, -1, ""Invalid VIP level."");

    format(query, sizeof(query), ""UPDATE USERS SET VIP_LEVEL = %d WHERE NAME = '%s' COLLATE NOCASE"", vip_level, DB_Escape(name));
    db_query(server_database, query);

    PlayerData[targetid][player_vip_level] = vip_level;

    format(string, sizeof(string), ""SERVER: You have successfully set the VIP level of %s to %s."", name, vip);
    SendClientMessage(playerid, -1, string);

    return 1;
}

CMD:v(playerid,params[])
{
	if(PlayerData[playerid][player_vip_level]<VIP_BRONZE)
	{
	    return SendClientMessage(playerid, -1, ""You are not a VIP player."");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, -1, ""Usage: /v [message]"");
	}
	new color, msg[128], name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, name, sizeof(name));
    switch(PlayerData[playerid][player_vip_level])
    {
        case VIP_BRONZE: color = 0xCD7F32FF; // Bronze
        case VIP_SILVER: color = 0xC0C0C0FF; // Silver
        case VIP_GOLD: color = 0xFFD700FF; // Gold
        case VIP_DIAMOND: color = 0xFFF72585; // Diamond
        default: color = 0xFFFFFFAA;
    }
    format(msg, sizeof(msg), ""[VIP Chat] %s: %s"", name, params);
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(PlayerData[i][player_vip_level] >= VIP_BRONZE)
        {
            SendClientMessage(i, color, msg);
        }
    }
	return 1;
}
CMD:checkstatus(playerid, params[])
{
    new targetid, name[MAX_PLAYER_NAME], string[128], adminTitle[32], vipTitle[32];

    // If no parameters are provided, check the player's own status
    if (sscanf(params, ""u"", targetid))
        targetid = playerid;

    if (!IsPlayerConnected(targetid))
        return SendClientMessage(playerid, -1, ""Invalid player ID."");

    GetPlayerName(targetid, name, sizeof(name));

    // Assign Admin Titles
    switch (PlayerData[targetid][player_admin_level])
    {
        case 0:  adminTitle = ""None"";
        case 1:  adminTitle = ""Moderator"";
        case 2:  adminTitle = ""Administrator"";
        case 3:  adminTitle = ""Senior Admin"";
        case 4:  adminTitle = ""Head Admin"";
        case 5:  adminTitle = ""Owner"";
        default: adminTitle = ""Unknown"";
    }

    // Assign VIP Titles
    switch (PlayerData[targetid][player_vip_level])
    {
        case 0:  vipTitle = ""None"";
        case 1:  vipTitle = ""Silver VIP"";
        case 2:  vipTitle = ""Gold VIP"";
        case 3:  vipTitle = ""Platinum VIP"";
        case 4:  vipTitle = ""Diamond VIP"";
        default: vipTitle = ""Unknown"";
    }

    format(string, sizeof(string), ""Player: %s | Admin: %s | VIP: %s"", name, adminTitle, vipTitle);
    SendClientMessage(playerid, -1, string);

    return 1;
}
/*CMD:ban(playerid,params[])
{
	new targetid,reason;
	if(PlayerData[playerid][player_admin_level]<5) return SendClientMessage(playerid,-1,""You are not authorized to use this command"");
	if(sscanf(params,""uz"",targetid,reason))return SendClientMessage(playerid,-1,""Usage: /ban [playerid] [reason]"");
	if(!IsPlayerConnected(playerid))return SendClientMessage(playerid,-1,""Player is not connected"");
	
	
}*/
CMD:cca(playerid, params[])
{
    if (!IsPlayerAdmin(playerid) && PlayerData[playerid][player_admin_level]<0) // Check if the player is an admin
    {
        SendClientMessage(playerid, 0xFF0000FF, ""You don't have permission to use this command!"");
        return 1;
    }

    for (new i = 0; i < 50; i++) // Sends 50 empty messages to clear the chat for all players
    {
        SendClientMessageToAll(-1, "" "");
    }

    SendClientMessageToAll(0x00FF00FF, ""The chat has been cleared by an admin!"");
    return 1;
}
CMD:engine(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, ""You are not in a vehicle!"");

    new vehicleid = GetPlayerVehicleID(playerid);
    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

    if(engine == VEHICLE_PARAMS_OFF) {
        SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
        SendClientMessage(playerid, COLOR_YELLOW, ""Engine started!"");
    } else {
        SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
        SendClientMessage(playerid, -1, ""Engine turned off!"");
    }
    return 1;
}

CMD:lights(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, ""You are not in a vehicle!"");

    new vehicleid = GetPlayerVehicleID(playerid);
    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

    if(lights == VEHICLE_PARAMS_OFF) {
        SetVehicleParamsEx(vehicleid, engine, VEHICLE_PARAMS_ON, alarm, doors, bonnet, boot, objective);
        SendClientMessage(playerid, COLOR_YELLOW, ""Lights turned on!"");
    } else {
        SetVehicleParamsEx(vehicleid, engine, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective);
        SendClientMessage(playerid, -1, ""Lights turned off!"");
    }
    return 1;
}

CMD:bonnet(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, ""You are not in a vehicle!"");

    new vehicleid = GetPlayerVehicleID(playerid);
    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

    if(bonnet == VEHICLE_PARAMS_OFF) {
        SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, VEHICLE_PARAMS_ON, boot, objective);
        SendClientMessage(playerid, COLOR_YELLOW, ""Bonnet opened!"");
    } else {
        SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, VEHICLE_PARAMS_OFF, boot, objective);
        SendClientMessage(playerid, -1, ""Bonnet closed!"");
    }
    return 1;
}

CMD:boot(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, ""You are not in a vehicle!"");

    new vehicleid = GetPlayerVehicleID(playerid);
    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

    if(boot == VEHICLE_PARAMS_OFF) {
        SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, VEHICLE_PARAMS_ON, objective);
        SendClientMessage(playerid, COLOR_YELLOW, ""Boot opened!"");
    } else {
        SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, VEHICLE_PARAMS_OFF, objective);
        SendClientMessage(playerid, -1, ""Boot closed!"");
    }
    return 1;
}

CMD:doors(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, ""You are not in a vehicle!"");

    new vehicleid = GetPlayerVehicleID(playerid);
    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

    if(doors == VEHICLE_PARAMS_OFF) {
        SetVehicleParamsEx(vehicleid, engine, lights, alarm, VEHICLE_PARAMS_ON, bonnet, boot, objective);
        SendClientMessage(playerid, COLOR_YELLOW, ""Doors locked!"");
    } else {
        SetVehicleParamsEx(vehicleid, engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
        SendClientMessage(playerid, -1, ""Doors unlocked!"");
    }
    return 1;
}
CMD:viphelp(playerid, params[])
{
    if(PlayerData[playerid][player_vip_level]<VIP_BRONZE) return SendClientMessage(playerid, COLOR_RED, ""You are not a VIP!"");

    SendClientMessage(playerid, COLOR_GOLD, ""[VIP COMMANDS]"");
    SendClientMessage(playerid, COLOR_YELLOW, ""/vipheal - Fully restores your health & armor"");
    SendClientMessage(playerid, COLOR_YELLOW, ""/vipcar - Spawns a luxury VIP vehicle"");
    SendClientMessage(playerid, COLOR_YELLOW, ""/vipskin - Change to exclusive VIP skins"");
    SendClientMessage(playerid, COLOR_YELLOW, ""/vipweapons - Get special weapons"");
    SendClientMessage(playerid, COLOR_YELLOW, ""/vipjetpack - Get a jetpack"");
    SendClientMessage(playerid,COLOR_YELLOW,""/viprepair - Repairs the car"");
    return 1;
}
CMD:vipheal(playerid, params[])
{
    if(PlayerData[playerid][player_vip_level] > 0)
    {
        SetPlayerHealth(playerid, 100.0);
        SendClientMessage(playerid, COLOR_YELLOW, ""VIP: You have been healed!"");
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, ""VIP: This command is only for VIP players!"");
    }
    return 1;
}

CMD:vipweapons(playerid, params[])
{
    if(PlayerData[playerid][player_vip_level] > 0)
    {
        GivePlayerWeapon(playerid, 24, 100); // Deagle with 100 ammo
        GivePlayerWeapon(playerid, 31, 200); // M4 with 200 ammo
        SendClientMessage(playerid, COLOR_YELLOW, ""VIP: You have received your VIP weapons!"");
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, ""VIP: This command is only for VIP players!"");
    }
    return 1;
}

CMD:vipcar(playerid, params[])
{
    if (PlayerData[playerid][player_vip_level] < VIP_BRONZE) // Check if player is VIP
    {
        SendClientMessage(playerid, COLOR_RED, ""You are not a VIP!"");
        return 1;
    }

    new vehicleid;
    if(sscanf(params, ""d"", vehicleid))
    {
        SendClientMessage(playerid, COLOR_YELLOW, ""Usage: /vipcar [vehicle ID]"");
        return 1;
    }

    SpawnVIPCar(playerid, vehicleid);
    return 1;
}

CMD:vipcolor(playerid, params[])
{
    if(PlayerData[playerid][player_vip_level] > 0)
    {
        new color;
        switch (PlayerData[playerid][player_vip_level])
        {
            case VIP_BRONZE: color = 0xCD7F32FF;
            case VIP_SILVER: color = 0xC0C0C0FF;
            case VIP_GOLD: color = 0xFFD700FF;
            case VIP_DIAMOND: color = 0x1E90FFFF;
        }
        SetPlayerColor(playerid, color);
        SendClientMessage(playerid, COLOR_YELLOW, ""VIP: Your player color has been updated!"");
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, ""VIP: This command is only for VIP players!"");
    }
    return 1;
}
CMD:viprepair(playerid, params[])
{
    if (PlayerData[playerid][player_vip_level] < VIP_BRONZE)
    {
        SendClientMessage(playerid, COLOR_RED, ""You are not a VIP!"");
        return 1;
    }

    new vehicleid = GetPlayerVehicleID(playerid);
    if (!vehicleid)
    {
        SendClientMessage(playerid, COLOR_YELLOW, ""You are not in a vehicle!"");
        return 1;
    }

    RepairVehicle(vehicleid);
    SendClientMessage(playerid, COLOR_GREEN, ""Your vehicle has been repaired!"");
    return 1;
}

CMD:vipjetpack(playerid, params[])
{
    if(PlayerData[playerid][player_vip_level] > 0)
    {
        GivePlayerWeapon(playerid, 370, 1); // Jetpack
        SendClientMessage(playerid, COLOR_YELLOW, ""VIP: You have received a Jetpack!"");
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, ""VIP: This command is only for VIP players!"");
    }
    return 1;
}
stock SpawnVIPCar(playerid, vehicleid)
{
    new Float:x, Float:y, Float:z, Float:angle;

    // Get player position and facing angle
    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, angle);

    // Calculate position in front of the player
    x += 3.0 * floatsin(-angle, degrees);
    y += 3.0 * floatcos(-angle, degrees);

    // Spawn the VIP car in front of the player
    new carid = CreateVehicle(vehicleid, x, y, z, angle, -1, -1, 100);

    // Put player in the driver's seat
    PutPlayerInVehicle(playerid, carid, 0);

    SendClientMessage(playerid, 0x00FF00FF, ""VIP car has been spawned in front of you!"");

    return carid;
}
CMD:vipskin(playerid, params[])
{
    if (PlayerData[playerid][player_vip_level] < VIP_BRONZE)
    {
        SendClientMessage(playerid, COLOR_RED, ""You are not a VIP!"");
        return 1;
    }

    new skinid;
    if(sscanf(params, ""d"", skinid))
    {
        SendClientMessage(playerid, COLOR_YELLOW, ""Usage: /vipskin [skin ID]"");
        return 1;
    }

    if (skinid < 0 || skinid > 311) // San Andreas has skins from 0 to 311
    {
        SendClientMessage(playerid, COLOR_RED, ""Invalid skin ID! Choose between 0-311."");
        return 1;
    }

    SetPlayerSkin(playerid, skinid);
    SendClientMessage(playerid, COLOR_GREEN, ""Your VIP skin has been changed!"");

    return 1;
}
CMD:freeroam(playerid, params[])
{
    if (gamestate == GAMESTATE_FREEROAM) return SendClientMessage(playerid, COLOR_RED, ""You are already in Freeroam mode."");
    gamestate = GAMESTATE_FREEROAM;
    SendClientMessageToAll(COLOR_YELLOW, ""Game state changed to Freeroam."");
    return 1;
}

CMD:roleplay(playerid, params[])
{
    if (gamestate == GAMESTATE_ROLEPLAY) return SendClientMessage(playerid, COLOR_RED, ""You are already in Roleplay mode."");
    gamestate = GAMESTATE_ROLEPLAY;
    SendClientMessageToAll(COLOR_YELLOW, ""Game state changed to Roleplay."");
    return 1;
}
CMD:me(playerid, params[])
{
    if (gamestate != GAMESTATE_ROLEPLAY)
        return SendClientMessage(playerid, COLOR_RED, ""Roleplay mode is not enabled!"");
    if (isnull(params))
        return SendClientMessage(playerid, COLOR_YELLOW, ""USAGE: /me [action]"");
    new str[128];
    format(str, sizeof(str), ""* %s %s"", rpName[playerid], params);
    SendClientMessageToAll(COLOR_YELLOW, str);
    return 1;
}

CMD:do(playerid, params[])
{
    if (gamestate != GAMESTATE_ROLEPLAY)
        return SendClientMessage(playerid, COLOR_RED, ""Roleplay mode is not enabled!"");
    if (isnull(params))
        return SendClientMessage(playerid, COLOR_YELLOW, ""USAGE: /do [description]"");
    new str[128];
    format(str, sizeof(str), ""* %s"", params);
    SendClientMessageToAll(COLOR_YELLOW, str);
    return 1;
}

CMD:b(playerid, params[])
{
    if (gamestate != GAMESTATE_ROLEPLAY)
        return SendClientMessage(playerid, COLOR_RED, ""Roleplay mode is not enabled!"");
    if (isnull(params))
        return SendClientMessage(playerid, COLOR_YELLOW, ""USAGE: /b [message]"");
    new str[128];
    format(str, sizeof(str), ""(OOC) %s: %s"", rpName[playerid], params);
    SendClientMessageToAll(COLOR_YELLOW, str);
    return 1;
}
CMD:shout(playerid, params[])
{
    if (gamestate != GAMESTATE_ROLEPLAY)
        return SendClientMessage(playerid, COLOR_RED, ""Roleplay mode is not enabled!"");
    if (isnull(params))
        return SendClientMessage(playerid, COLOR_YELLOW, ""USAGE: /shout [message]"");
    new str[128];
    format(str, sizeof(str), ""%s shouts: %s!"", rpName[playerid], strupr(params));
    SendClientMessageToAll(COLOR_YELLOW, str);
    return 1;
}
stock strupr(string[])
{
    for (new i = 0; i < strlen(string); i++)
    {
        if (string[i] >= 'a' && string[i] <= 'z')
        {
            string[i] -= 32; // Convert to uppercase
        }
    }
    return string;
}
"
ZdAVZC9z,# tk_text_zoom.py,here2share,Python,Saturday 15th of March 2025 05:43:19 AM CDT,"# tk_text_zoom.py

import tkinter as tk
from PIL import Image, ImageDraw, ImageFont, ImageTk

WW, HH = 640, 640
CX, CY = WW // 2, HH // 2

root = tk.Tk()
root.title(""# tk_text_zoom.py"")
root.geometry(""+0+0"")
canvas = tk.Canvas(root, width=WW, height=HH)
canvas.pack()

def get_font(font_size):
    return ImageFont.truetype(""times.ttf"", font_size)

def create_txt():
    font_size = 400
    font = get_font(font_size)
    while True:
        bbox = font.getbbox(""a"")
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]
        if text_width > WW - 8 or text_height > HH - 8:
            break
        font_size += 1
        font = get_font(font_size)
        
    def blank_check():
        for x in range(WW):
            if pixels[x, HH - 1][0]:
                return False
        return True
    
    for y_offset in range(HH):
        img = Image.new(""RGBA"", (WW, HH), (0, 0, 0, 0))
        draw = ImageDraw.Draw(img)
        draw.text((CX, CY - y_offset), ""a"", fill=""red"", font=font, anchor=""mm"")
        pixels = img.load()
        if blank_check():
            break
    return img

img_txt_default = create_txt()
img_txt = img_txt_default.copy()

current_scale = 1
while True:
	t = int(current_scale)
	scaled_img = img_txt.resize((t, t), Image.ANTIALIAS)
	
	current_scale *= 1.05
	if t > WW:
		left = (t - WW) // 2
		top = (t - HH) // 2
		right = left + WW
		bottom = top + HH
		img_txt = scaled_img.crop((left, top, right, bottom))
		if current_scale > 1000:
			img_txt = img_txt_default.copy()
			current_scale = 1

	scaled_tk_img = ImageTk.PhotoImage(scaled_img)

	canvas.delete(""all"")
	canvas.create_image(CX, CY, image=scaled_tk_img, anchor=""center"")

	canvas.update()"
mmMxVYJR,RPS,Chl_Snt,Python,Saturday 15th of March 2025 05:08:47 AM CDT,"import pygame
import random
import sys

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
OBJECT_SIZE = 20
MAX_OBJECTS = 150
SPEED = 2
FPS = 60

# –¶–≤–µ—Ç–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤
COLORS = {
    ""Rock"": (128, 128, 128),  # –°–µ—Ä—ã–π
    ""Paper"": (255, 255, 255),  # –ë–µ–ª—ã–π
    ""Scissors"": (255, 165, 0)  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
}

# –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è
RULES = {
    ""Rock"": ""Scissors"",
    ""Scissors"": ""Paper"",
    ""Paper"": ""Rock""
}

class GameObject:
    def __init__(self, x, y, obj_type):
        self.obj_type = obj_type
        self.rect = pygame.Rect(x, y, OBJECT_SIZE, OBJECT_SIZE)
        self.dx = random.choice([-SPEED, SPEED])
        self.dy = random.choice([-SPEED, SPEED])

    def move(self):
        self.rect.x += self.dx
        self.rect.y += self.dy

        # –û—Ç—Å–∫–æ–∫ –æ—Ç –∫—Ä–∞–µ–≤ —ç–∫—Ä–∞–Ω–∞
        if self.rect.left < 0 or self.rect.right > SCREEN_WIDTH:
            self.dx = -self.dx
        if self.rect.top < 0 or self.rect.bottom > SCREEN_HEIGHT:
            self.dy = -self.dy

    def draw(self, screen):
        pygame.draw.rect(screen, COLORS[self.obj_type], self.rect)

    def check_collision(self, other):
        return self.rect.colliderect(other.rect)

    def transform(self, new_type):
        self.obj_type = new_type

class Game:
    def __init__(self):
        pygame.init()
        self.screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
        pygame.display.set_caption(""Rock Paper Scissors"")
        self.clock = pygame.time.Clock()
        self.objects = []
        self.create_initial_objects()

    def create_initial_objects(self):
        for _ in range(100):  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤
            x = random.randint(0, SCREEN_WIDTH - OBJECT_SIZE)
            y = random.randint(0, SCREEN_HEIGHT - OBJECT_SIZE)
            obj_type = random.choice([""Rock"", ""Paper"", ""Scissors""])
            self.objects.append(GameObject(x, y, obj_type))

    def update(self):
        for obj in self.objects:
            obj.move()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
        for i in range(len(self.objects)):
            for j in range(i + 1, len(self.objects)):
                if self.objects[i].check_collision(self.objects[j]):
                    self.resolve_collision(self.objects[i], self.objects[j])
                    self.objects[i].dx = -self.objects[i].dx
                    self.objects[i].dy = -self.objects[i].dy


        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
        counts = {""Rock"": 0, ""Paper"": 0, ""Scissors"": 0}
        for obj in self.objects:
            counts[obj.obj_type] += 1
        for obj_type, count in counts.items():
            if count >= MAX_OBJECTS:
                self.show_winner(obj_type)
                return True
        return False

    def resolve_collision(self, obj1, obj2):
        if RULES[obj1.obj_type] == obj2.obj_type:
            obj2.transform(obj1.obj_type)
        elif RULES[obj2.obj_type] == obj1.obj_type:
            obj1.transform(obj2.obj_type)

    def show_winner(self, winner_type):
        font = pygame.font.Font(None, 74)
        text = font.render(f""{winner_type} wins!"", True, (255, 0, 0))
        text_rect = text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))
        self.screen.blit(text, text_rect)
        pygame.display.flip()
        pygame.time.wait(3000)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º

    def run(self):
        running = True
        while running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False

            self.screen.fill((0, 0, 0))  # –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞

            for obj in self.objects:
                obj.draw(self.screen)

            if self.update():
                running = False

            pygame.display.flip()
            self.clock.tick(FPS)

        pygame.quit()
        sys.exit()

if __name__ == ""__main__"":
    game = Game()
    game.run()"
H94YvwjS,X-RAY,Nix71,C++,Saturday 15th of March 2025 04:57:54 AM CDT,"hva viser r√∏ntgen bildene...???

har h√∏rt ,,, skal vi vise dem det r√∏ntgen  bildet eller det bildet.. x-ray...

blodpr√∏ver blir mixa til falskt blod... syntetisert blod..



noen juger i helse vesenet...

et eksempel...fra pasient journalen 22.6.23.. v√¶rt innom 7 forskjellige sykehus i l√∏pet av ""ET D√òGN""
n√•r jeg ser i den n√• s√• er alle dokumenter og hele pasient journalen SLETTET.

ID TYVERI
-------------------------------------------------------------------------------------------------------------------
HVEM I HELVETE BRUKER K√ÖRE BULLS NAVN OG PERSON NUMMER... N√Ö F√ÖR POLITIET GJ√òRE NOE MED DEN SAKEN..


DERE HAR SLETTET K√ÖRE BULLS ANMELDELSE MOT ANNE OG JON HOVE FOR DRAPET P√Ö √òIVIND BULL 13.12.2019.
DERE NEKTET MEG OGS√Ö AVH√òR P√Ö GR√òNLAND POLITI KAMMER.

FOR √òVRIG SATT DET ""KJENTFOLK"" I SKRANKEN P√Ö GR√òNLAND DEN DAGEN.
------------------------------------------------------------------------------------------------------------------

var hos tannlegen for litt sia,, satt tre spr√∏yter for √• dra ur en liten hj√∏rnetann.
den ene spr√∏yta virka det som det var litt ""str√∏m"" i,, fikk den mot tunga.. bzz sa det!!



"
nHCDLpyx,PlayerController,leomovskii,C#,Saturday 15th of March 2025 04:51:03 AM CDT,"using UnityEngine;

public class PlayerController : MonoBehaviour {

	private static PlayerController _me;
	public static PlayerController Me {
		get {
			if (_me == null)
				_me = GameObject.FindObjectOfType<PlayerController>();
			return _me;
		}
	}

	public float speed;
	public float jumpHeight;
	public float gravity = 20f;

	[Space]

	public Transform cameraTransform;
	public float horizontalSensitivity = 1f;
	public float verticalSensitivity = 1f;
	public float pitchMin = -70f;
	public float pitchMax = 80f;

	[Space]

	public LayerMask playerLayer;
	public Transform aimPoint;

	private CharacterController _controller;
	private Health _health;
	private Vector3 _input;
	private Vector3 _verticalVelocity;
	private Vector3 _yawVector;
	private Vector3 _currentPitch;

	private void Start() {
		_me = this;

		Cursor.lockState = CursorLockMode.Locked;
		Cursor.visible = false;

		_controller = GetComponent<CharacterController>();
		_currentPitch = cameraTransform.localEulerAngles;

		_health = GetComponent<Health>();
		_health.OnDeathEvent.AddListener(Endgame);
	}

	private void Update() {
		MoveUpdate();
		LookUpdate();
	}

	private void MoveUpdate() {
		bool isGrounded = _controller.isGrounded;

		_input.x = Input.GetAxisRaw(""Horizontal"");
		_input.z = Input.GetAxisRaw(""Vertical"");
		_input.Normalize();

		if (_verticalVelocity.y < -2f && isGrounded)
			_verticalVelocity.y = -1f;

		Vector3 moveVector = transform.forward * _input.z + transform.right * _input.x;
		_controller.Move(speed * Time.deltaTime * moveVector);

		if (Input.GetKeyDown(KeyCode.Space) && isGrounded) {
			_verticalVelocity.y = Mathf.Sqrt(jumpHeight * 2f * gravity);
		}

		_verticalVelocity.y -= gravity * Time.deltaTime;
		_controller.Move(_verticalVelocity * Time.deltaTime);
	}

	private void LookUpdate() {
		_yawVector.y = Input.GetAxis(""Mouse X"") * horizontalSensitivity;
		float pitch = Input.GetAxis(""Mouse Y"") * verticalSensitivity;

		transform.Rotate(_yawVector);

		_currentPitch.x = Mathf.Clamp(_currentPitch.x - pitch, pitchMin, pitchMax);
		cameraTransform.localEulerAngles = _currentPitch;
	}

	private void Endgame() {
		Debug.Log(""Lose"");
	}
}"
KC0ffy7m,EnemyController,leomovskii,C#,Saturday 15th of March 2025 04:50:42 AM CDT,"using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;

[RequireComponent(typeof(NavMeshAgent))]
public class EnemyController : MonoBehaviour {

	enum EnemyState {
		Idle, // –ø—Ä–æ—Å—Ç–æ —Å—Ç–æ—ó—Ç—å
		Pursuit, // –ø–µ—Ä–µ—Å–ª—ñ–¥—É—î —Ü—ñ–ª—å
		Battle // –∞—Ç–∞–∫—É—î
	}

	public Transform aimPoint;
	public Inventory inventory;

	public float aggroDistance;
	public float alertDistance;

	private NavMeshAgent agent;

	private EnemyState state;
	private Vector3 lastPlayerSeenLocation;

	private readonly RaycastHit[] _hits = new RaycastHit[10];

	private void Awake() {
		agent = GetComponent<NavMeshAgent>();
		lastPlayerSeenLocation = transform.position;
	}

	private void Update() {
		var playerLocation = PlayerController.Me.transform.position;

		bool playerSeenAtThisUpdate = false;

		state = EnemyState.Idle;
		// –Ø–∫—â–æ –≥—Ä–∞–≤–µ—Ü—å –≤ –∑–æ–Ω—ñ –±–∞—á–µ–Ω–Ω—è –≤–æ—Ä–æ–≥—É
		if (Vector3.Distance(aimPoint.position, PlayerController.Me.aimPoint.position) <= aggroDistance) {
			Vector3 direction = (PlayerController.Me.aimPoint.position - aimPoint.position).normalized;
			Ray ray = new Ray(aimPoint.position, direction);
			int hits = Physics.RaycastNonAlloc(ray, _hits, aggroDistance);
			Array.Sort(_hits, 0, hits, new RaycastHitComparer(ray.origin));

			// –Ø–∫—â–æ –º—ñ–∂ –≤–æ—Ä–æ–≥–æ–º —ñ –≥—Ä–∞–≤—Ü–µ–º –Ω–µ–º–∞ –ø–µ—Ä–µ—à–∫–æ–¥
			if (_hits[0].transform != null && CompareLayer(_hits[0].transform.gameObject, PlayerController.Me.playerLayer)) {
				playerSeenAtThisUpdate = true;

				// –í–æ—Ä–æ–≥ –¥–∏–≤–∏—Ç—å—Å—è –Ω–∞ –≥—Ä–∞–≤—Ü—è
				Vector3 lookPos = new Vector3(PlayerController.Me.aimPoint.position.x, transform.position.y, PlayerController.Me.aimPoint.position.z);
				transform.LookAt(lookPos);
				lastPlayerSeenLocation = playerLocation;

				state = EnemyState.Battle;
			} else
				state = EnemyState.Pursuit;

		} else if (Vector3.Distance(transform.position, lastPlayerSeenLocation) > 1f) {
			state = EnemyState.Pursuit;
		}

		if (state == EnemyState.Idle) {
			lastPlayerSeenLocation = transform.position; // –∑–∞–≥—É–±–∏–≤ –≥—Ä–∞–≤—Ü—è
			agent.SetDestination(transform.position); // –±–æ—Ç –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è
			if (inventory != null) // –±–æ—Ç –Ω–µ –∞—Ç–∞–∫—É—î
				inventory.SetFiring(false);

		} else if (state == EnemyState.Pursuit) {
			agent.SetDestination(lastPlayerSeenLocation); // –≤–æ—Ä–æ–≥ –π–¥–µ —Ç—É–¥–∏, –¥–µ –≤—ñ–Ω –±–∞—á–∏–≤ –≥—Ä–∞–≤—Ü—è
			if (inventory != null) // –±–æ—Ç –Ω–µ –∞—Ç–∞–∫—É—î
				inventory.SetFiring(false);
			if (playerSeenAtThisUpdate)
				NotifyOthers(playerLocation);

		} else { // battle
			agent.SetDestination(transform.position); // –±–æ—Ç –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è
			if (inventory != null) // –±–æ—Ç –∞—Ç–∞–∫—É—î
				inventory.SetFiring(true);
			if (playerSeenAtThisUpdate)
				NotifyOthers(playerLocation);
		}
	}

	private void NotifyOthers(Vector3 lastPlayerSeenLocation) {
		EnemyController[] allBots = FindObjectsOfType<EnemyController>();
		for (int i = 0; i < allBots.Length; i++) {
			if (allBots[i] != this && Vector3.Distance(transform.position, allBots[i].transform.position) <= alertDistance) {
				allBots[i].SayThatPlayerHasBeenInPosition(lastPlayerSeenLocation);
			}
		}
	}

	public void SayThatPlayerHasBeenInPosition(Vector3 lastPlayerSeenLocation) {
		this.lastPlayerSeenLocation = lastPlayerSeenLocation;
	}

	private void OnDrawGizmosSelected() {
		if (aimPoint != null) {
			Gizmos.color = new Color(0f, 1f, 1f, 0.2f);
			Gizmos.DrawSphere(aimPoint.position, aggroDistance);
		}

		var player = FindObjectOfType<PlayerController>();
		if (Physics.Linecast(aimPoint.position, player.aimPoint.position, out RaycastHit hit)) {
			Gizmos.color = Color.blue;
			Gizmos.DrawLine(aimPoint.position, player.aimPoint.position);
		}
	}

	private static bool CompareLayer(GameObject target, LayerMask layers) {
		return ((1 << target.layer) & layers) != 0;
	}
}

public class RaycastHitComparer : IComparer<RaycastHit> {
	private Vector3 origin;

	public RaycastHitComparer(Vector3 origin) {
		this.origin = origin;
	}

	public int Compare(RaycastHit x, RaycastHit y) {
		bool xIsValid = x.collider != null;
		bool yIsValid = y.collider != null;

		if (!xIsValid && !yIsValid)
			return 0;

		if (!xIsValid)
			return 1;

		if (!yIsValid)
			return -1;

		float distanceX = Vector3.Distance(origin, x.point);
		float distanceY = Vector3.Distance(origin, y.point);

		return distanceX.CompareTo(distanceY);
	}
}"
