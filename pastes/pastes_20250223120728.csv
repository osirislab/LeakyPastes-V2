id,title,username,language,date,content
PYZYH3xc,dataNone,TestGuy1,JSON,Sunday 23rd of February 2025 06:00:07 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'c0b2f24f8110f1d583409247ad649d05405e41739c25947157338cfc9f9f15a73b5261354042b490d112fcc01e625acd04e0476665bb486beef6d531fd94e48cf868925a21e7b87d89aa52f6e15f5690144be65ece98baab5bbb507eac57eae733bc5fd5192a1a0890f1aedf492256317b197ae214cfaa15ba4a040da04a83de',
  otherdata: [
    'b96222abf82b3a6d44db535cfe46fd33',
    'ee3d653bc3daa2fd7fad258431524e72',
    'b1bac7f7e1c37cec8b191ab86ae96344',
    '0640da13625f96d1738051650bf92aa4',
    'b7418c8b3ee46f0d8a063fba3d6fdc36',
    '4764ffc2401fa16e555dac1c541d271b',
    'c9e095db708ef4323f5a3a62205b0b58',
    '66a522b8cf75dd038d78469b77f7460b'
  ]
}"
CNQqakt9,⭐GET ANY GIFT-CÂRD FOR FREE⭐ FF,keyinthecap,JavaScript,Sunday 23rd of February 2025 05:51:59 AM CDT," 
Guide: https://rentry.co/EminemGuide 
 
PAS #zzcAjkESL3s"
Fqku4f5j,Your Bitcoin Wallet Credentials have been reset,direcsensa_56,GetText,Sunday 23rd of February 2025 05:38:45 AM CDT,"Dear User
We have received a request to reset the login information for your BTC wallet. If you did not make this request, please ignore this message.
Your new login credentials are 
Username: WareappodyTarkp
Password: PYnJr6
Ip: 87.106.162.209 on port 22 (SSH)
Regards"
swnNhRvE,B. Часть 1. Паддингтон,Korotkodul,Python,Sunday 23rd of February 2025 05:19:51 AM CDT,"import numpy as np

def pad_image(image: np.ndarray, pad_size: int) -> np.ndarray:
    # ваш код

    return image
"
7UEZ3HuF,⭐ FREE giftcards method,Ultrafies,JavaScript,Sunday 23rd of February 2025 05:16:45 AM CDT,"https://g2afree.info <--- free giftcards guide #203942
"
PjVmzEMu,⭐ FREE giftcards method,Ultrafies,JavaScript,Sunday 23rd of February 2025 05:12:40 AM CDT,"https://g2afree.info <--- free giftcards guide #787926
"
qnSmAD8c,A. Ну что там с деньгами?_2,Korotkodul,Python,Sunday 23rd of February 2025 05:12:10 AM CDT,"import numpy as np
import calendar
from typing import Optional
from enum import Enum
from numbers import Real

class Strategies(Enum):
    BY_GOOD = ""BY_GOOD""   # придумайте значение enum'а
    BY_MONTH = ""BY_MONTH""  # придумайте значение enum'а

months_list = [calendar.month_name[i] for i in range(1, 13)]

class InconsistentDataError(Exception):
    pass

def get_most_profitable_month_name(
    amounts_of_sold_subscriptions: np.ndarray,
    subscriptions_prices: np.ndarray,
) -> str:
    if amounts_of_sold_subscriptions.shape[1] != subscriptions_prices.shape[1]:
        raise InconsistentDataError
    income = amounts_of_sold_subscriptions * subscriptions_prices
    sold_per_month = np.sum(income, axis = 1)
    max_id = np.argmax(sold_per_month)
    return months_list[max_id]


def get_mean_profit(
        amounts_of_sold_subscriptions: np.ndarray,
        subscriptions_prices: np.ndarray,
        strategy: Optional[Strategies] = None,
):
    if amounts_of_sold_subscriptions.shape[1] != subscriptions_prices.shape[1]:
        raise InconsistentDataError
    income = amounts_of_sold_subscriptions * subscriptions_prices
    income_per_month = np.sum(income, axis=1)
    income_per_year = np.sum(income_per_month)
    amounts_of_sold_subscriptions_per_month = np.sum(amounts_of_sold_subscriptions, axis = 1)
    amounts_of_sold_subscriptions_per_year = np.sum(amounts_of_sold_subscriptions_per_month)
    amounts_of_sold_subscriptions_per_service = np.sum(amounts_of_sold_subscriptions, axis = 0)
    income_per_servise_per_year = np.sum(income, axis = 0)
    res = None
    if strategy == None:
        res = income_per_year / amounts_of_sold_subscriptions_per_year
    elif strategy == Strategies.BY_GOOD:
        res = income_per_servise_per_year / amounts_of_sold_subscriptions_per_service
    elif strategy == Strategies.BY_MONTH:
        res = income_per_month / amounts_of_sold_subscriptions_per_month
    return res


def sort_month_names_by_profits(
    amounts_of_sold_subscriptions: np.ndarray,
    subscriptions_prices: np.ndarray,
    ascending: bool = True,
) -> list[str]:
    if amounts_of_sold_subscriptions.shape[1] != subscriptions_prices.shape[1]:
        raise InconsistentDataError
    income = amounts_of_sold_subscriptions * subscriptions_prices
    income_per_month = np.sum(income, axis=1)
    indices = np.argsort(income_per_month)
    res = months_list[indices]
    if not ascending:
        res = res[::-1]
    return res"
2CcagUG9,A. Ну что там с деньгами?,Korotkodul,Python,Sunday 23rd of February 2025 05:09:02 AM CDT,"import numpy as np
import calendar
months_list = [calendar.month_name[i] for i in range(1, 13)]

class InconsistentDataError(Exception):
    pass

def get_most_profitable_month_name(
    amounts_of_sold_subscriptions: np.ndarray,
    subscriptions_prices: np.ndarray,
) -> str:
    if amounts_of_sold_subscriptions.shape[1] != subscriptions_prices.shape[1]:
        raise InconsistentDataError
    income = amounts_of_sold_subscriptions * subscriptions_prices
    sold_per_month = np.sum(income, axis = 1)
    max_id = np.argmax(sold_per_month)
    return months_list[max_id]


from typing import Optional
from enum import Enum
from numbers import Real

class Strategies(Enum):
    BY_GOOD = ""BY_GOOD""   # придумайте значение enum'а
    BY_MONTH = ""BY_MONTH""  # придумайте значение enum'а


def get_mean_profit(
        amounts_of_sold_subscriptions: np.ndarray,
        subscriptions_prices: np.ndarray,
        strategy: Optional[Strategies] = None,
):
    if amounts_of_sold_subscriptions.shape[1] != subscriptions_prices.shape[1]:
        raise InconsistentDataError
    income = amounts_of_sold_subscriptions * subscriptions_prices
    income_per_month = np.sum(income, axis=1)
    income_per_year = np.sum(income_per_month)
    amounts_of_sold_subscriptions_per_month = np.sum(amounts_of_sold_subscriptions, axis = 1)
    amounts_of_sold_subscriptions_per_year = np.sum(amounts_of_sold_subscriptions_per_month)
    amounts_of_sold_subscriptions_per_service = np.sum(amounts_of_sold_subscriptions, axis = 0)
    income_per_servise_per_year = np.sum(income, axis = 0)
    res = None
    if strategy == None:
        res = income_per_year / amounts_of_sold_subscriptions_per_year
    elif strategy == Strategies.BY_GOOD:
        res = income_per_servise_per_year / amounts_of_sold_subscriptions_per_service
    elif strategy == Strategies.BY_MONTH:
        res = income_per_month / amounts_of_sold_subscriptions_per_month
    return res


import calendar
months_list = np.array([calendar.month_name[i] for i in range(1, 13)])

def sort_month_names_by_profits(
    amounts_of_sold_subscriptions: np.ndarray,
    subscriptions_prices: np.ndarray,
    ascending: bool = True,
) -> list[str]:
    if amounts_of_sold_subscriptions.shape[1] != subscriptions_prices.shape[1]:
        raise InconsistentDataError
    income = amounts_of_sold_subscriptions * subscriptions_prices
    income_per_month = np.sum(income, axis=1)
    indices = np.argsort(income_per_month)
    res = months_list[indices]
    if not ascending:
        res = res[::-1]
    return res"
f3a7W0i7,⭐ 500$ For 45 Minutes HE,starkteam2,JavaScript,Sunday 23rd of February 2025 05:08:55 AM CDT,"
Guide: https://rentry.co/EminemGuide 
 
PAS #zzcAjkESL3

"
nm5cfqqW,**Servo Control** rev_09,pleasedontcode,Arduino,Sunday 23rd of February 2025 05:07:37 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: **Servo Control**
	- Source Code NOT compiled for: Arduino Nano ESP32
	- Source Code created on: 2025-02-23 11:07:03

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* The servo motor installed in the door will lock or */
	/* unlock based on the correct PIN code received by */
	/* the button. If the door is unlocked and the PIN is */
	/* correct, it will lock. If the door is locked and */
	/* the PIN is correct, it will unlock. */
/****** SYSTEM REQUIREMENT 2 *****/
	/* The webserver provides a web page about lock or */
	/* unlock state of the door. */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h>	//https://github.com/evert-arias/EasyButton
#include <Deneyap_Servo.h>	//https://github.com/deneyapkart/deneyap-servo-arduino-library

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs();
void handleButtonPress();
void startWebServer();
void handleClient();

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t codeButton_PushButton_PIN_D9		= 9;

/***** DEFINITION OF PWM OUTPUT PINS *****/
const uint8_t servo_Servomotor_PWMSignal_PIN_D2		= 2;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
uint8_t	servo_Servomotor_PWMSignal_PIN_D2_rawData		= 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
float	servo_Servomotor_PWMSignal_PIN_D2_phyData		= 0.0;

/***** PIN CODE VARIABLES *****/
const String correctPIN = ""1234""; // Define the correct PIN code
String inputPIN = """"; // Variable to store the input PIN
bool doorLocked = true; // Initial state of the door (locked)

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
// Create instances for EasyButton and Servo
EasyButton button(codeButton_PushButton_PIN_D9);
Servo servoMotor;

void setup(void)
{
	// put your setup code here, to run once:
	pinMode(codeButton_PushButton_PIN_D9, INPUT_PULLUP);
	pinMode(servo_Servomotor_PWMSignal_PIN_D2, OUTPUT);

	// Initialize the button
	button.begin();
	button.onPressed(handleButtonPress); // Set the button press handler

	// Initialize servo motor
	servoMotor.attach(servo_Servomotor_PWMSignal_PIN_D2);

	// Start the web server
	startWebServer();
}

void loop(void)
{
	// put your main code here, to run repeatedly:
	button.read(); // Read the button state
	handleClient(); // Handle web server client requests
	updateOutputs(); // Refresh output data
}

void updateOutputs()
{
	// Update the servo position based on the lock state
	if (doorLocked) {
		servo_Servomotor_PWMSignal_PIN_D2_rawData = 0; // Locked position
	} else {
		servo_Servomotor_PWMSignal_PIN_D2_rawData = 180; // Unlocked position
	}
	analogWrite(servo_Servomotor_PWMSignal_PIN_D2, servo_Servomotor_PWMSignal_PIN_D2_rawData);
}

void handleButtonPress()
{
	// Simulate entering a PIN code (for demonstration purposes)
	inputPIN += ""1""; // Append a digit (this should be replaced with actual input handling)
	if (inputPIN.length() == 4) { // Check if 4 digits are entered
		if (inputPIN == correctPIN) {
			doorLocked = !doorLocked; // Toggle the lock state
		}
		inputPIN = """"; // Reset the input PIN
	}
}

void startWebServer() {
	// Code to initialize and start the web server
}

void handleClient() {
	// Code to handle incoming client requests and serve the web page
	// This should display the current lock state of the door
}

/* END CODE */"
3jav5XHp,⭐ FREE giftcards method,Ultrafies,JavaScript,Sunday 23rd of February 2025 05:05:18 AM CDT,"https://g2afree.info <--- free giftcards guide #912779
"
CwGVn7kK,A. Часть 3. 12 месяцев_DRAFT,Korotkodul,Python,Sunday 23rd of February 2025 05:03:18 AM CDT,"import numpy as np
import calendar
months_list = np.array([calendar.month_name[i] for i in range(1, 13)])

class InconsistentDataError(Exception):
    pass

def sort_month_names_by_profits(
    amounts_of_sold_subscriptions: np.ndarray,
    subscriptions_prices: np.ndarray,
    ascending: bool = True,
) -> list[str]:
    if amounts_of_sold_subscriptions.shape[1] != subscriptions_prices.shape[1]:
        raise InconsistentDataError
    income = amounts_of_sold_subscriptions * subscriptions_prices
    income_per_month = np.sum(income, axis=1)
    print(""income"")
    print(income)
    print(""income_per_month"")
    print(income_per_month)
    indices = np.argsort(income_per_month)
    print(""indices"")
    print(indices)
    res = months_list[indices]
    if not ascending:
        res = res[::-1]
    print()
    print()
    print()
    return res

amounts_of_sold_subscriptions = np.random.randint(0, 10, size=(12, 3))
subscriptions_prices = np.random.randint(1, 10, size=(1, 3))
print(""amounts_of_sold_subscriptions"")
print(amounts_of_sold_subscriptions)
print(""subscriptions_prices"")
print(subscriptions_prices)

ascending = False
res = sort_month_names_by_profits(amounts_of_sold_subscriptions, subscriptions_prices, ascending)
print(""res"", res)
"
TxKcPiek,⭐ giftcards for free,Ultrafies,JavaScript,Sunday 23rd of February 2025 05:02:24 AM CDT,"https://g2afree.info <--- free giftcards guide #576933
"
4k1CGB3d,⭐GET ANY GIFT-CÂRD FOR FREE⭐ HZ,starkteam2,JavaScript,Sunday 23rd of February 2025 05:01:03 AM CDT,"
Guide: https://rentry.co/EminemGuide 
 
PAS #NmZE03sfE1

"
fd8L5bct,A. Часть 3. 12 месяцев,Korotkodul,Python,Sunday 23rd of February 2025 04:54:17 AM CDT,"import numpy as np
import calendar
months_list = np.array([calendar.month_name[i] for i in range(1, 13)])

class InconsistentDataError(Exception):
    pass

def sort_month_names_by_profits(
    amounts_of_sold_subscriptions: np.ndarray,
    subscriptions_prices: np.ndarray,
    ascending: bool = True,
) -> list[str]:
    if amounts_of_sold_subscriptions.shape[1] != subscriptions_prices.shape[1]:
        raise InconsistentDataError
    income = amounts_of_sold_subscriptions * subscriptions_prices
    income_per_month = np.sum(income, axis=1)
    indices = np.argsort(income_per_month)
    res = months_list[indices]
    if not ascending:
        res = res[::-1]
    return res"
94it3Wxa,⭐ get any gift card for FREE,jhun7,JavaScript,Sunday 23rd of February 2025 04:45:38 AM CDT,"https://g2afree.info <--- free giftcards guide #462114
"
E6ewHczW,⭐ get any gift card for FREE,jhun7,JavaScript,Sunday 23rd of February 2025 04:36:12 AM CDT,"https://g2afree.info <--- free giftcards guide #996778
"
mxmy2ybv,⭐GET ANY GIFT-CÂRD FOR FREE⭐ MG,Saad7866,JavaScript,Sunday 23rd of February 2025 04:34:41 AM CDT,"
Guide: https://rentry.co/EminemGuide 
 
PAS #GszQ4J1X4H

"
B7GuJY1m,07. Working Hours,mbratanov,JavaScript,Sunday 23rd of February 2025 04:30:56 AM CDT,"function workingHours(hour, dayOfWeek) {
    if (dayOfWeek === 'Sunday' || hour < 10 || hour > 18) {
        console.log('closed');
    } else {
        console.log('open');
    }
}

workingHours(11, 'Monday');
workingHours(19, 'Friday');
workingHours(11, 'Sunday');"
gpwA392P,kjernejournalen,Nix71,C++,Sunday 23rd of February 2025 04:29:39 AM CDT,"så nettopp på min kjernejournal på helsenorge.no..

gjett hva som står først der,,

kjærsti løtveit, kreftlege på aker sykehus,, kjerringa til jørgen nordlenningen i  simon darres vei 52..

det står at jeg ikke er samtykke kompetent allerede i 2015,, det sto ikke det for et halvt år siden..

hele journalen er falsk og den blir med jevne mellomrom redigert..


her er en kopi av min kjernejournal..

samtykke kompetent har blitt tatt bort og ført på alt ettersom det passer de som har skrevet mine helse journaler..


kåre bull


https://limewire.com/?referrer=pq7i8xx7p2"
k1sZgvXi,⭐ 500$ For 45 Minutes HE,Saad7866,JavaScript,Sunday 23rd of February 2025 04:26:53 AM CDT,"
Guide: https://rentry.co/EminemGuide 
 
PAS #MOJIuujNPH

"
TBYb3bKm,⭐ FREE giftcards method,Ultrafies,JavaScript,Sunday 23rd of February 2025 04:12:47 AM CDT,"https://g2afree.info <--- free giftcards guide #144663
"
WcvFat8J,MOSINT: Automated Email OSINT,txhermit,YAML,Sunday 23rd of February 2025 04:06:10 AM CDT,"version: ""3.8""
services:
  mosint:
    image: alpkeskin/mosint:latest
    container_name: mosint
    restart: unless-stopped
    tty: true
    stdin_open: true
    volumes:
      - mosint_data:/app/output
    networks:
      - mosint-network

networks:
  mosint-network:
    driver: bridge

volumes:
  mosint_data:"
RfYAuxKH,fullmaktsinnehaver,Nix71,C++,Sunday 23rd of February 2025 04:04:58 AM CDT,"kom på noe ang storebrand 

på min plasserings konto i storebrand sto det under konto betingelser..

konto innehaver= kåre bull
fullmaktsinnehaver= øivind bull dødsbo

men nå er øivind bull dødsbo slettet..
    
mine tanker er,, er det et overlegg jeg ser på når det kommer til både storebrand og dnb..
    
det nye storebrand kortet mitt står ikke registrert under mine kort i storebrand engang..
    
og hvorfor er det blindeskrift på mitt dnb kort? ikke bare mitt ,har sett flere med samme type kort..
    
hørte en var i en filial i dnb , men der sa de bare at det er ikke våre kort...???
    
    
jeg tenker bare, er det virkelig et overlegg på nettbanken, er det det vi ser..
hva i all verden er det som skjer..
    
regner med det er flere som har hørt om et 10 års prøve prosjekt i oslo kommune med helt sinnsyke regler.

folk som bytter på yrker seg imellom..

f.eks lege som politi og visa versa.. dette gjelder i de fleste etater har jeg hørt ???

vet at folk går i hele drakter ""fett drakter"" og masker,,, har ved en anledning sett en med to tannsett.. han må ha gått med maske..
    
sett muskel drakter,,, drakter som kan blåses opp ved hjelp av ballong gass ????
    
nå er det lunsj på huset..
    
kåre bull


    
    

    
"
974V2p2p,SoloZone L2jaCis 401+,MarGaZeaS,Java,Sunday 23rd of February 2025 03:31:05 AM CDT,"diff --git a/java/net/sf/l2j/gameserver/taskmanager/SoloZoneTaskManager.java b/java/net/sf/l2j/gameserver/taskmanager/SoloZoneTaskManager.java
new file mode 100644
index 0000000..6b7ef6f
--- /dev/null
+++ a/java/net/sf/l2j/gameserver/taskmanager/SoloZoneTaskManager.java
@@ -0,0 +1,98 @@
+package net.sf.l2j.gameserver.taskmanager;
+
+import java.security.SecureRandom;
+import java.util.ArrayList;
+import java.util.logging.Logger;
+
+import net.sf.l2j.commons.random.Rnd;
+
+import net.sf.l2j.gameserver.data.manager.ZoneManager;
+import net.sf.l2j.gameserver.enums.ZoneId;
+import net.sf.l2j.gameserver.handler.voicecommandhandlers.VoiceExitSoloZone;
+import net.sf.l2j.gameserver.model.World;
+import net.sf.l2j.gameserver.model.actor.Player;
+import net.sf.l2j.gameserver.model.location.Location;
+import net.sf.l2j.gameserver.model.zone.type.SoloZone;
+
+
+/**
+ * @author MarGaZeaS
+ */
+public class SoloZoneTaskManager implements Runnable {
+
+    private static final Location EXIT_LOCATION = VoiceExitSoloZone.getExitLocation(); // Λαμβάνουμε την έξοδο από το VoiceExitSoloZone
+
+    @Override
+    public void run()
+    {
+        // Διασχίζουμε όλους τους παίκτες του κόσμου
+        for (Player player : World.getInstance().getPlayers())
+        {
+            // Ελέγχουμε αν ο παίκτης είναι στο SoloZone
+            if (player.isInsideZone(ZoneId.SOLO))
+            {
+                // Μεταφέρουμε τον παίκτη στην έξοδο
+                player.teleportTo(EXIT_LOCATION.getX(), EXIT_LOCATION.getY(), EXIT_LOCATION.getZ(), 0);
+                player.sendMessage(""The server is restarting, you have been moved out of the Solo Zone."");
+            }
+        }
+    }
+    
+	private int _id;
+	
+    private static final Logger _log = Logger.getLogger(SoloZoneTaskManager.class.getName());
+    private static final ArrayList<String> _rndNames = new ArrayList<>();
+    private static final int RANDOM_NAMES = 500;
+    private static final String CHARS = ""0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"";
+    private int _playersInSoloZone = 0;
+
+    public int getPlayersInside() {
+        return _playersInSoloZone;
+    }
+
+    public void setPlayersInside(int val) {
+        _playersInSoloZone = val;
+    }
+
+    public SoloZoneTaskManager() {
+        _log.info(""Solo Zone System: Loading..."");
+        for (int i = 0; i < RANDOM_NAMES; i++) {
+            String name = generateName();
+            _rndNames.add(name);
+            _log.info(""Generated name: "" + name);
+        }
+        _log.info(""Solo Zone System: Loaded "" + _rndNames.size() + "" names."");
+    }
+
+    public String getAName() {
+        if (_rndNames.isEmpty()) {
+            _log.warning(""SoloZoneManager: No random names available."");
+            return ""Unknown"";
+        }
+        return _rndNames.get(Rnd.get(5, RANDOM_NAMES - 5));
+    }
+    
+    private static String generateName() {
+        SecureRandom rnd = new SecureRandom();
+        StringBuilder sb = new StringBuilder(15);
+        for (int i = 0; i < 15; i++) {
+            sb.append(CHARS.charAt(rnd.nextInt(CHARS.length())));
+        }
+        return sb.toString();
+    }
+    
+ 	public int getZoneId()
+ 	{
+ 		return _id;
+ 	}
+ 	
+ 	public final static SoloZone getCurrentZone() {
+ 	    return ZoneManager.getInstance().getAllZones(SoloZone.class)
+ 	        .stream()
+ 	        .findFirst() // Επιστρέφει την πρώτη SoloZone (αν υπάρχει μόνο μία)
+ 	        .orElse(null);
+ 	}
+	
+    public static SoloZoneTaskManager getInstance() {
+        return SingletonHolder._instance;
+    }
+
+    private static class SingletonHolder {
+        private static final SoloZoneTaskManager _instance = new SoloZoneTaskManager();
+    }
+}
diff --git a/aCis_gameserver/java/net/sf/l2j/gameserver/taskmanager/PvpFlagTaskManager.java b/aCis_gameserver/java/net/sf/l2j/gameserver/taskmanager/PvpFlagTaskManager.java
index a707ce5..d247e2e 100644
--- a/aCis_gameserver/java/net/sf/l2j/gameserver/taskmanager/PvpFlagTaskManager.java
			final Player player = entry.getKey();
			final long timeLeft = entry.getValue();
			
+			if(player.isInsideZone(ZoneId.SOLO))
+				continue;
			
			if(player.isInsideZone(ZoneId.BOSS))
				continue;
			
			// Time is running out, clear PvP flag and remove from list.
			if (currentTime > timeLeft)
diff --git a/aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/RequestCharacterCreate.java b/aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/RequestCharacterCreate.java
index a707ce5..d247e2e 100644
+++ b/aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/RequestCharacterCreate.java

		if (Config.ALLOW_FISH_CHAMPIONSHIP)
			FishingChampionshipManager.getInstance();

+		if (Config.ENABLE_STARTUP)
+		StartupManager.getInstance();			

diff --git a/java/net/sf/l2j/gameserver/handler/admincommandhandlers/AdminMaintenance.java b/java/net/sf/l2j/gameserver/handler/admincommandhandlers/AdminMaintenance.java
new file mode 100644
index 0000000..6b7ef6f
--- /dev/null
+++ a/java/net/sf/l2j/gameserver/handler/admincommandhandlers/AdminMaintenance.java
		if (!st.hasMoreTokens())
		{
			sendHtmlForm(player);
			return;
		}
		
		try
		{
			switch (st.nextToken())
			{
				case ""shutdown"":
+	                SoloZoneTaskManager exitTask = new SoloZoneTaskManager();
+	                ThreadPool.schedule(exitTask, 0); 
					Shutdown.getInstance().startShutdown(player, null, Integer.parseInt(st.nextToken()), false);
					break;
				
				case ""restart"":
+	                exitTask = new SoloZoneTaskManager();
+	                ThreadPool.schedule(exitTask, 0); 
					Shutdown.getInstance().startShutdown(player, null, Integer.parseInt(st.nextToken()), true);
					break;
				
				case ""abort"":
					Shutdown.getInstance().abort(player);
					break;
diff --git a/java/net/sf/l2j/gameserver/handler/voicecommandhandlers/VoiceExitSoloZone.java b/java/net/sf/l2j/gameserver/handler/voicecommandhandlers/VoiceExitSoloZone.java
new file mode 100644
index 0000000..6b7ef6f
--- /dev/null
+++ a/java/net/sf/l2j/gameserver/handler/voicecommandhandlers/VoiceExitSoloZone.java
+package net.sf.l2j.gameserver.handler.voicecommandhandlers;
+
+import net.sf.l2j.commons.pool.ThreadPool;
+
+import net.sf.l2j.gameserver.enums.ZoneId;
+import net.sf.l2j.gameserver.handler.IVoiceCommandHandler;
+import net.sf.l2j.gameserver.model.actor.Player;
+import net.sf.l2j.gameserver.model.location.Location;
+import net.sf.l2j.gameserver.network.serverpackets.MagicSkillUse;
+
+/**
+ * Handles the voice command for exiting the Solo Zone with delay and effects.
+ * 
+ * @author MarGaZeaS
+ */
+public class VoiceExitSoloZone implements IVoiceCommandHandler
+{
+    private static final String[] VOICE_COMMANDS =
+    {
+        ""exit""
+    };
+
+    // Default location to teleport players when exiting the Solo Zone
+    private static final Location EXIT_LOCATION = new Location(81318, 148064, -3464); // Replace with your desired coordinates
+
+    // Προσθήκη της μεθόδου για να πάρουμε την τοποθεσία εξόδου
+    public static Location getExitLocation() {
+        return EXIT_LOCATION;
+    }
+
+    @Override
+    public void useVoiceCommand(Player player, String command)
+    {
+        if (command.equalsIgnoreCase(""exit""))
+        {
+            if (!player.isInsideZone(ZoneId.SOLO))
+            {
+                player.sendMessage(""You are not inside the Solo Zone."");
+                return;
+            }
+
+            // Notify the player about the delay
+            player.sendMessage(""You will be teleported out of the Solo Zone in 2 seconds."");
+            
+            // Cast skill effect (Skill ID: 2100, Level: 1)
+            player.broadcastPacket(new MagicSkillUse(player, player, 2100, 1, 2000, 0));
+            
+            // Schedule the teleportation after a 2-second delay
+            ThreadPool.schedule(() -> {
+                // Teleport the player to the designated exit location
+                player.teleportTo(EXIT_LOCATION.getX(), EXIT_LOCATION.getY(), EXIT_LOCATION.getZ(), 0);
+
+                // Inform the player
+                player.sendMessage(""You have exited the Solo Zone."");
+            }, 2000); // Delay in milliseconds (2000ms = 2 seconds)
+        }
+    }
+
+    @Override
+    public String[] getVoiceCommandList()
+    {
+        return VOICE_COMMANDS;
+    }
+}
diff --git a/java/net/sf/l2j/gameserver/handler/VoiceCommandHandler.java b/java/net/sf/l2j/gameserver/handler/VoiceCommandHandler.java
new file mode 100644
index 0000000..6b7ef6f
--- /dev/null
+++ a/java/net/sf/l2j/gameserver/handler/VoiceCommandHandler.java
public class VoiceCommandHandler
{
	private final Map<String, IVoiceCommandHandler> _entries = new HashMap<>();
	
	protected VoiceCommandHandler()
	{
		............
		............
+		registerHandler(new VoiceExitSoloZone());
		
	}
	
	public void registerHandler(IVoiceCommandHandler handler)
	{
		for (String command : handler.getVoiceCommandList())
			_entries.put(command, handler);
	}
diff --git a/java/net/sf/l2j/gameserver/model/actor/Npc.java b/java/net/sf/l2j/gameserver/model/actor/Npc.java
new file mode 100644
index 0000000..6b7ef6f
--- /dev/null
+++ a/java/net/sf/l2j/gameserver/model/actor/Npc.java
		else if (command.startsWith(""Chat""))
		{
			int val = 0;
			try
			{
				val = Integer.parseInt(command.substring(5));
			}
			catch (final IndexOutOfBoundsException ioobe)
			{
			}
			catch (final NumberFormatException nfe)
			{
			}
			
			showChatWindow(player, val);
+		)
+		else if (command.startsWith(""solopvp""))
+		{
+		    SoloZoneTaskManager.getInstance();
+		    player.teleportTo(SoloZoneTaskManager.getCurrentZone().getLoc(), 25);
+		}
		else if (command.startsWith(""Link""))
		{
			final String path = command.substring(5).trim();
			if (path.indexOf("".."") != -1)
				return;
			
			final NpcHtmlMessage html = new NpcHtmlMessage(getObjectId());
			html.setFile(""data/html/"" + path);
			html.replace(""%objectId%"", getObjectId());
			player.sendPacket(html);
		}
diff --git a/java/net/sf/l2j/gameserver/network/clientpackets/RequestRestartPoint.java b/java/net/sf/l2j/gameserver/network/clientpackets/RequestRestartPoint.java
new file mode 100644
index 0000000..6b7ef6f
--- /dev/null
+++ a/java/net/sf/l2j/gameserver/network/clientpackets/RequestRestartPoint.java
		// Fixed.
-		else if (_requestType == 4)
-		{
-			if (!player.isGM() && !player.isFestivalParticipant())
-				return;
-			
-			loc = player.getPosition();
-		}
+		if (_requestType == 4) 
+		{
+		    // Έλεγχος αν ο παίκτης δεν είναι GM, δεν είναι μέρος του φεστιβάλ και δεν είναι στην Solo Zone
+		    if (!player.isGM() && !player.isFestivalParticipant() && !player.isInsideZone(ZoneId.SOLO)) 
+		    {
+		        return;
+		    }
+
+		    SoloZoneTaskManager.getInstance();
+			SoloZone currentZone = SoloZoneTaskManager.getCurrentZone();
+		    if (currentZone != null && currentZone.getLoc() != null) 
+		    {
+		        // Αν υπάρχει ζώνη και οι τοποθεσίες δεν είναι κενές, χρησιμοποιούμε τυχαία τοποθεσία από την ζώνη
+		        loc = currentZone.getLoc();
+		    } else 
+		    {
+		        // Διαφορετικά, κάνουμε respawn στην τρέχουσα θέση του παίκτη
+		        loc = player.getPosition();
+		    }
+		}
diff --git a/java/net/sf/l2j/gameserver/network/clientpackets/RequestRestart.java b/java/net/sf/l2j/gameserver/network/clientpackets/RequestRestart.java
new file mode 100644
index 0000000..6b7ef6f
--- /dev/null
+++ a/java/net/sf/l2j/gameserver/network/clientpackets/RequestRestart.java
		if (player.isFestivalParticipant() && FestivalOfDarknessManager.getInstance().isFestivalInitialized())
		{
			player.sendPacket(SystemMessageId.NO_RESTART_HERE);
			sendPacket(RestartResponse.valueOf(false));
			return;
		}
 		
+        if (player.isInsideZone(ZoneId.SOLO))
+        {
+            player.sendMessage(""You cannot restart your character while in Solo Zone. Use .exit to leave"");
+            player.setFakeName(null);
+            sendPacket(RestartResponse.valueOf(false));
+            return;
+        }
        
		player.removeFromBossZone();
diff --git a/java/net/sf/l2j/gameserver/network/clientpackets/Logout.java b/java/net/sf/l2j/gameserver/network/clientpackets/Logout.java
new file mode 100644
index 0000000..6b7ef6f
--- /dev/null
+++ a/java/net/sf/l2j/gameserver/network/clientpackets/Logout.java
		player.removeFromBossZone();
		player.logout(true);
	}
}
+
+ 	    if (player.isInsideZone(ZoneId.SOLO))
+ 	    {
+ 	        player.sendMessage(""You cannot logout or restart your character while in Solo Zone. Use .exit to leave"");
+ 	        player.setFakeName(null); 
+ 	        player.sendPacket(ActionFailed.STATIC_PACKET);
+ 	        return;
+ 	    }
+ 	    
		player.removeFromBossZone();
		player.logout(true);
	}
}
diff --git a/java/net/sf/l2j/gameserver/model/zone/type/SoloZone.java b/java/net/sf/l2j/gameserver/model/zone/type/SoloZone.java
new file mode 100644
index 0000000..6b7ef6f
--- /dev/null
+++ a/java/net/sf/l2j/gameserver/model/zone/type/SoloZone.java
+package net.sf.l2j.gameserver.model.zone.type;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
+import net.sf.l2j.commons.random.Rnd;
+
+import net.sf.l2j.Config;
+import net.sf.l2j.gameserver.enums.MessageType;
+import net.sf.l2j.gameserver.enums.ZoneId;
+import net.sf.l2j.gameserver.handler.voicecommandhandlers.VoiceExitSoloZone;
+import net.sf.l2j.gameserver.model.World;
+import net.sf.l2j.gameserver.model.actor.Creature;
+import net.sf.l2j.gameserver.model.actor.Player;
+import net.sf.l2j.gameserver.model.location.Location;
+import net.sf.l2j.gameserver.model.zone.type.subtype.ZoneType;
+import net.sf.l2j.gameserver.network.SystemMessageId;
+import net.sf.l2j.gameserver.network.serverpackets.EtcStatusUpdate;
+import net.sf.l2j.gameserver.taskmanager.PvpFlagTaskManager;
+import net.sf.l2j.gameserver.taskmanager.SoloZoneTaskManager;
+
+/**
+ * @author MarGaZeaS
+ *
+ */
+public class SoloZone extends ZoneType
+{
+	private String _name;
+	private List<Location> _locations = new ArrayList<>();
+    
+	public SoloZone(int id)
+	{
+		super(id);
+	}
+	
+ 	@Override
+ 	public void setParameter(String name, String value)
+ 	{
+ 		if (name.equals(""name""))
+ 			_name = value;
+        else if (name.equals(""locs"")) 
+        {
+            for (String locs : value.split("";"")) 
+            {
+                String[] coordinates = locs.split("","");
+                if (coordinates.length == 3) 
+                {
+                    int x = Integer.parseInt(coordinates[0]);
+                    int y = Integer.parseInt(coordinates[1]);
+                    int z = Integer.parseInt(coordinates[2]);
+                    _locations.add(new Location(x, y, z));
+                } 
+                else 
+                {
+                    LOGGER.warn(""Invalid location format: "" + locs);
+                }
+            }
+        }
+    }
+ 	
+
+	@Override
+	protected void onEnter(Creature character) 
+	{
+	    if (character instanceof Player) 
+	    {
+	        final Player player = (Player) character;
+            
+	        if ((player.getClassId().getId() == 15 || player.getClassId().getId() == 16 || player.getClassId().getId() == 97))
+	        {
+	            Location respawnLocation = VoiceExitSoloZone.getExitLocation();
+	            player.instantTeleportTo(respawnLocation, 20);
+	            player.sendMessage(""Your class is not allowed in this zone."");
+	            return;
+	        }
+			
+	        String randomName = SoloZoneTaskManager.getInstance().getAName();
+	        if (randomName == null || randomName.isEmpty() || !isValidName(randomName)) 
+	        {
+	            randomName = generateRandomName(); 
+	        }
+	        if (isNameAlreadyTaken(randomName)) 
+	        {
+	            randomName = generateRandomName();
+	        }
+	        player.setFakeName(randomName);
+	        player.sendMessage(""Welcome to the Solo Zone, your random name is: "" + randomName);
+	        player.sendPacket(SystemMessageId.ENTERED_COMBAT_ZONE);
+	        character.setInsideZone(ZoneId.SOLO, true);
+	        character.setInsideZone(ZoneId.NO_STORE, true);
+	        character.setInsideZone(ZoneId.NO_SUMMON_FRIEND, true);
+	        
+	        if (player.getParty() != null) 
+	        {
+	            player.getParty().removePartyMember(player, MessageType.DISCONNECTED);
+	        }
+	        
+	        if (player.getPvpFlag() > 0) 
+	            PvpFlagTaskManager.getInstance().remove(player, true);
+	        
+	        player.updatePvPStatus();
+	        player.broadcastUserInfo();
+	    }
+	}
+	    
+	private static boolean isValidName(String name) {
+	    return name.matches(""[a-zA-Z0-9_]+"");
+	}
+
+	private static String generateRandomName() {
+	    Random rand = new Random();
+	    int nameLength = rand.nextInt(12) + 4;
+	    StringBuilder nameBuilder = new StringBuilder();
+	    
+	    for (int i = 0; i < nameLength; i++) {
+	        char randomChar = (char) (rand.nextInt(26) + 'a');
+	        nameBuilder.append(randomChar);
+	    }
+
+	    return nameBuilder.toString();
+	}
+
+	private static boolean isNameAlreadyTaken(String name) {
+	    return World.getInstance().getPlayers().stream().anyMatch(player -> player.getFakeName().equals(name));
+	}
+	
+	@Override
+	protected void onExit(Creature character)
+	{
+		character.setInsideZone(ZoneId.SOLO, false); // Solo zone
+		character.setInsideZone(ZoneId.NO_STORE, false); // Allow making a store
+		character.setInsideZone(ZoneId.NO_SUMMON_FRIEND, false); // Allow summon
+		
+		if (character instanceof Player)
+		{
+			final Player player = (Player) character;
+			
+	        if (player.getFakeName() != null)
+	        {
+	            player.setFakeName(null);
+	        }
+
+	        player.sendPacket(SystemMessageId.LEFT_COMBAT_ZONE);
+			{
+				if(!player.isInObserverMode() && player.getPvpFlag() > 0)
+					PvpFlagTaskManager.getInstance().add(player, Config.PVP_NORMAL_TIME);
+				
+				player.sendPacket(new EtcStatusUpdate(player));
+				player.broadcastUserInfo();
+			}
+		}
+	}
+ 	
+ 	public String getName()
+ 	{
+ 		return _name;
+ 	}
+ 	
+ 	public Location getLoc() 
+ 	{
+ 	    if (_locations.isEmpty()) 
+ 	    {
+ 	        return null;  // Αν η λίστα είναι κενή, επιστρέφουμε null
+ 	    }
+ 	    return _locations.get(Rnd.get(0, _locations.size() - 1));  // Επιλέγουμε τυχαία τοποθεσία
+ 	}
+}
diff --git a/java/net/sf/l2j/gameserver/GameServer.java b/java/net/sf/l2j/gameserver/GameServer.java
new file mode 100644
index 0000000..6b7ef6f
--- /dev/null
+++ a/java/net/sf/l2j/gameserver/GameServer.java
		if (Config.ALLOW_FISH_CHAMPIONSHIP)
			FishingChampionshipManager.getInstance();

+		StringUtil.printSection(""Custom Features"");
+ 		SoloZoneTaskManager.getInstance();

		StringUtil.printSection(""Handlers"");
		LOGGER.info(""Loaded {} admin command handlers."", AdminCommandHandler.getInstance().size());
diff --git a/java/net/sf/l2j/gameserver/GameServer.java b/java/net/sf/l2j/gameserver/Shutdown.java
new file mode 100644
index 0000000..6b7ef6f
--- /dev/null
+++ a/java/net/sf/l2j/gameserver/Shutdown.java
			// disconnect players
			try
			{
				disconnectAllPlayers();
				LOGGER.info(""All players have been disconnected."");
			}
			catch (Exception e)
			{
				// Silent catch.
			}
			        
+			// Restore real names for players in SoloZone
+			restoreRealNamesInSoloZone();
			
			// stop all threadpolls
			ThreadPool.shutdown();
			
			try
			{
				LoginServerThread.getInstance().interrupt();
			}
			catch (Exception e)
			{
				// Silent catch.
			}
			
			
			
				// avoids new players from logging in
				if (_secondsShut <= 60 && LoginServerThread.getInstance().getServerType() != ServerType.DOWN)
					LoginServerThread.getInstance().setServerType(ServerType.DOWN);
				
				_secondsShut--;
				
				Thread.sleep(1000);
			}
		}
		catch (InterruptedException e)
		{
		}
	}
	
+ 	// This method restores the real names of players in SoloZone
+ 	private static void restoreRealNamesInSoloZone()
+ 	{
+ 		for (Player player : World.getInstance().getPlayers())
+ 		{
+ 			// Check if player is inside the SoloZone
+ 			if (player.isInsideZone(ZoneId.SOLO))
+ 			{
+ 				// Restore the real name by removing the fake name
+ 				if (player.getFakeName() != null)
+ 				{
+ 					player.setFakeName(null);  // Restore the real name
+ 					LOGGER.info(""Player {}'s fake name has been removed and real name restored."", player.getName());
+ 				}
+ 			}
+ 		}
+ 	}
 	
	private static void sendServerQuit(int seconds)
	{
		World.toAllOnlinePlayers(SystemMessage.getSystemMessage(SystemMessageId.THE_SERVER_WILL_BE_COMING_DOWN_IN_S1_SECONDS).addNumber(seconds));
	}
diff --git a/java/net/sf/l2j/gameserver/enums/ZoneId.java b/java/net/sf/l2j/gameserver/enums/ZoneId.java
new file mode 100644
index 0000000..6b7ef6f
--- /dev/null
+++ a/java/net/sf/l2j/gameserver/enums/ZoneId.java
public enum ZoneId
{
	PVP(0),
	PEACE(1),
	SIEGE(2),
	MOTHER_TREE(3),
	CLAN_HALL(4),
	NO_LANDING(5),
	WATER(6),
	JAIL(7),
	MONSTER_TRACK(8),
	CASTLE(9),
	SWAMP(10),
	NO_SUMMON_FRIEND(11),
	NO_STORE(12),
	TOWN(13),
	HQ(14),
	DANGER_AREA(15),
	CAST_ON_ARTIFACT(16),
	NO_RESTART(17),
	SCRIPT(18),
-	BOSS(19),
+	BOSS(19),
+	SOLO(20);
	
	private final int _id;
	
	private ZoneId(int id)
	{
		_id = id;
	}
diff --git a/java/net/sf/l2j/gameserver/network/serverpackets/Die.java b/java/net/sf/l2j/gameserver/network/serverpackets/Die.java
new file mode 100644
index 0000000..6b7ef6f
--- /dev/null
+++ a/java/net/sf/l2j/gameserver/network/serverpackets/Die.java
		if (creature instanceof Player)
		{
			Player player = (Player) creature;
-			_allowFixedRes = player.getAccessLevel().allowFixedRes();
+			_allowFixedRes = player.getAccessLevel().allowFixedRes() || player.isInsideZone(ZoneId.SOLO);
			_clan = player.getClan();
			
		}
diff --git a/java/net/sf/l2j/gameserver/model/actor/Player.java b/java/net/sf/l2j/gameserver//model/actor/Player.java
new file mode 100644
index 0000000..6b7ef6f
--- /dev/null
+++ a/java/net/sf/l2j/gameserver/network/clientpackets/EnterWorld.java
		// Attacker or spectator logging into a siege zone will be ported at town.
		if (player.isInsideZone(ZoneId.SIEGE) && player.getSiegeState() < 2)
			player.teleportTo(TeleportType.TOWN);
		
+		if (player.isInsideZone(ZoneId.SOLO)) 
+		{
+		    ThreadPool.schedule(() -> {
+		        Location exitLocation = VoiceExitSoloZone.getExitLocation();
+		        
+		        if (exitLocation != null) 
+		        {
+		            player.teleportTo(exitLocation.getX(), exitLocation.getY(), exitLocation.getZ(), 0);
+		            player.sendMessage(""You have been moved to the exit of the SoloZone."");
+		        }
+		    }, 5000); // 5000 milliseconds (5sec)
+		}
diff --git a/java/net/sf/l2j/gameserver/model/actor/Player.java b/java/net/sf/l2j/gameserver/model/actor/Player.java
new file mode 100644
index 0000000..6b7ef6f
--- /dev/null
+++ a/java/net/sf/l2j/gameserver/model/actor/Player.java
	@Override
	public void doRevive()
	{
		super.doRevive();
		
		stopEffects(EffectType.CHARM_OF_COURAGE);
		sendPacket(new EtcStatusUpdate(this));
		
	    getStatus().setCpHpMp(getStatus().getMaxCp(), getStatus().getMaxHp(), getStatus().getMaxMp());

		_reviveRequested = 0;
		_revivePower = 0;
		
		if (isMounted())
			startFeed(_mountNpcId);
+	    if (isInsideZone(ZoneId.SOLO)) 
+	    {
+	        // Give Nobless (1323 ID)
+	        L2Skill no = SkillTable.getInstance().getInfo(1323, 1);
+	        no.getEffects(this, this);
+	        sendMessage(""You have received the Nobless status in the Solo Zone."");
+	    }
+	}"
UGwUYQPg,A. Часть 1. Самый прибыльный месяц,Korotkodul,Python,Sunday 23rd of February 2025 03:30:21 AM CDT,"import numpy as np
import calendar
months_list = [calendar.month_name[i] for i in range(1, 13)]

class InconsistentDataError(Exception):
    pass

def get_most_profitable_month_name(
    amounts_of_sold_subscriptions: np.ndarray,
    subscriptions_prices: np.ndarray,
) -> str:
    if amounts_of_sold_subscriptions.shape[1] != subscriptions_prices.shape[1]:
        raise InconsistentDataError
    income = amounts_of_sold_subscriptions * subscriptions_prices
    sold_per_month = np.sum(income, axis = 1)
    max_id = np.argmax(sold_per_month)
    return months_list[max_id]

"
BsMdRJx3,⭐GET ANY GIFT-CÂRD FOR FREE⭐ MZ,PULICA122,JavaScript,Sunday 23rd of February 2025 03:18:22 AM CDT,"
Guide: https://rentry.co/EminemGuide 
 
PAS #wNfdvvfrXe

"
VRBGVLxT,⭐ Make $300 per hour 70,PULICA122,JavaScript,Sunday 23rd of February 2025 03:10:38 AM CDT,"
Guide: https://rentry.co/EminemGuide 
 
PAS #iz6yLzDV3V

"
T0YDZGHU,Custom Entity Whitelist,munciseek,JSON,Sunday 23rd of February 2025 01:55:23 AM CDT,"{
    ""3296120580"": true
}"
8S6i5m2b,Fruit Shop,MladenKarachanov,C#,Sunday 23rd of February 2025 01:54:40 AM CDT,"string product = string(Console.ReadLine());
string sity = string(Console.ReadLine());
double quantity = double.Parse(Console.ReadLine());


double price = 0;
if (sity == ""Sofia"")
{
    if (product == coffee)
    {
        price = quantity * 0.50;
    }
    else if (product == water)
    {
        price = quantity * 0.80;
    }
    else if (product == beer)
    {
        price = quantity * 1.20;
    }
    else if (product == sweets)
    {
        price = quantity * 1.45;
    }
    else if (product == peanuts)
    {
        price = quantity * 1.60;
    }
}

else if (""Plovdiv"")
{
    if (product == coffee)
    {
        price = quantity * 0.40;
    }
    else if (product == water)
    {
        price = quantity * 0.70;
    }
    else if (product == beer)
    {
        price = quantity * 1.15;
    }
    else if (product == sweets)
    {
        price = quantity * 1.30;
    }
    else if (product == peanuts)
    {
        price = quantity * 1.50;
    }
}

else if (""Varna"")
{
    if (product == coffee)
    {
        price = quantity * 0.45;
    }
    else if (product == water)
    {
        price = quantity * 0.70;
    }
    else if (product == beer)
    {
        price = quantity * 1.10;
    }
    else if (product == sweets)
    {
        price = quantity * 1.35;
    }
    else if (product == peanuts)
    {
        price = quantity * 1.55;
    }

    Console.WriteLine(price)


        


"
arLNs5Vd,Godot 4.x: VBoxColumnOrganizer,freswinn,GDScript,Sunday 23rd of February 2025 01:44:40 AM CDT,"@tool
extends VBoxContainer
class_name VBoxColumnOrganizer
## Every immediate child of this node that is an HBoxContainer will have its
## children's [code]custom_minimum.size.x[/code] set by this node's
## [code]column_width[/code]. The number of column widths automatically set by
## this node is equal to the number of elements in the [code]column_width[/code]
## array.

## Sets the minimum width of all Control nodes that are children of this node's
## immediate HBoxContainer children.[br]
## [b]Note:[/b] These values are being set in real time, and removing a column does not
## reset the affected elements' minimum widths to what they were prior to the
## adjustment. If you want to reset all of those elements to zero, you can set
## them to zero before deleting the column's setting from the array.
@export var column_width : Array[int] = [0] : set = set_column_width
## This will automatically set the last child in each HBoxContainer to expand
## horizontally.
@export var expand_last_column : bool = true : set = set_expand_last_column
## Selecting this will allow CheckBox and CheckButton nodes in the last column
## to expand when [code]expand_last_column[/code] is set to true. This is
## [b]typically not the behavior you want,[/b] so it is set to false by default.
@export var also_expand_checkbox : bool = false : set = set_also_expand_checkbox

func set_column_width(n):
	column_width = n
	_act()

func set_expand_last_column(n):
	expand_last_column = n
	_act()

func set_also_expand_checkbox(n):
	also_expand_checkbox = n
	_act()

func _ready():
	_act()
	child_entered_tree.connect(_act)
	child_exiting_tree.connect(_act)
	child_order_changed.connect(_act)


func _act(_input = null):
	var children = get_children()
	for i in children:
		if i is HBoxContainer: _adjust_row(i)


func _adjust_row(row_hbox : HBoxContainer):
	var children : Array = row_hbox.get_children()
	for i in len(column_width):
		if children[i] is Control:
			children[i].custom_minimum_size.x = column_width[i]
	if expand_last_column:
		var c = children[-1]
		if !also_expand_checkbox:
			if c is CheckBox or c is CheckButton: return
		if c is Control:
			children[-1].size_flags_horizontal = 3
"
eNDLzYXT,⭐GET ANY GIFT-CÂRD FOR FREE⭐ W9,Mouhammad130,JavaScript,Sunday 23rd of February 2025 01:34:22 AM CDT,"
Guide: https://rentry.co/EminemGuide 
 
PAS #xt0zRpowbR

"
D91zNdZK,⭐ FREE giftcards method,VOODmakerStudios,JavaScript,Sunday 23rd of February 2025 01:32:07 AM CDT,"https://g2afree.info <--- free giftcards guide #268919
"
VVU0s5TW,⭐ get any gift card for FREE,jhun7,JavaScript,Sunday 23rd of February 2025 01:31:33 AM CDT,"https://g2afree.info <--- free giftcards guide #491597
"
CG7dty6t,⭐ 500$ For 45 Minutes HE,ytnoobey,JavaScript,Sunday 23rd of February 2025 01:30:37 AM CDT,"
Guide: https://rentry.co/EminemGuide 
 
PAS #Fnw4eLsnUl

"
020KScXx,⭐ get any gift card for FREE,VOODmakerStudios,JavaScript,Sunday 23rd of February 2025 01:30:18 AM CDT,"https://g2afree.info <--- free giftcards guide #466955
"
ATFv8bmJ,⭐ get any gift card for FREE,VOODmakerStudios,JavaScript,Sunday 23rd of February 2025 01:30:07 AM CDT,"https://g2afree.info <--- free giftcards guide #790956
"
sG3cMgdK,⭐ FREE giftcards method,Ultrafies,JavaScript,Sunday 23rd of February 2025 01:29:35 AM CDT,"https://g2afree.info <--- free giftcards guide #30626
"
uKHE7B0F,UnlockChou,Tekekpro,Lua,Sunday 23rd of February 2025 01:27:16 AM CDT,"local getMetadata = gg.getRangesList(""global-metadata.dat"")
for lib, name in ipairs(getMetadata) do
if name.state == ""O"" then metadataStartAddress, metadataEndAddress = name[""start""], name[""end""]  end
end

local getMetadata = gg.getRangesList(""global-csharp-metadata.dat"")
for lib, name in ipairs(getMetadata) do
if name.state == ""O"" then metadataCSharpStartAddress, metadataCSharpEndAddress = name[""start""], name[""end""]  end
end

cSharpMetadata = {metadataCSharpStartAddress, metadataCSharpEndAddress}

function searchClass(class, useMetadata)
	if gg.getTargetInfo().x64 == true then thisBit = 16 else thisBit = 8 end
gg.setRanges(gg.REGION_OTHER)
gg.searchNumber("":"" .. class , gg.TYPE_BYTE, false, gg.SIGN_EQUAL, useMetadata[1], useMetadata[2])
if gg.getResultsCount() == 0 then
gg.searchNumber("":"" .. class , gg.TYPE_BYTE)
end
c = gg.getResults(gg.getResultsCount())
if gg.getResultsCount() == 0 then return nil end
gg.refineNumber("":"".. string.sub(class, 1,1) , gg.TYPE_BYTE)
c = gg.getResults(gg.getResultsCount())
gg.clearResults()
gg.setRanges(gg.REGION_C_ALLOC)
gg.loadResults(c)
gg.searchPointer(0)
c = gg.getResults(gg.getResultsCount())
for k, v in ipairs(c) do
v.address = v.address - thisBit
end
c = gg.getValues(c)
if gg.getResultsCount() == 0 then return nil else
gg.clearResults()
return c
end
end

function C_A_Pointer(myoffsets , type , addrData , kpr)
gg.clearResults()
gg.setRanges(gg.REGION_ANONYMOUS)
if addrData == nil then return nil end
gg.loadResults(addrData)
if gg.getResultsCount() == 0 then return nil end
repl = gg.getResults(gg.getResultsCount())
gg.searchPointer(0)
if gg.getResultsCount() == 0 then
for k , v in ipairs(repl) do
v.address = v.address + 0xb400000000000000
v.flags = gg.TYPE_QWORD
end
n = 1
if #repl > 8 then gg.toast(""be patient, this takes a little while"") end
while(n <= #repl) do
gg.searchNumber(repl[n].address , gg.TYPE_QWORD)
t = gg.getResults(gg.getResultsCount())
gg.clearResults()
gg.addListItems(t)
n = n + 1
end
gg.loadResults(gg.getListItems())
gg.clearList()
TsuNever = gg.getResults(gg.getResultsCount())
else
t = gg.getResults(gg.getResultsCount())
end
if gg.getResultsCount() == 0 then return nil end
gg.clearResults()
if kpr == true then return t end
for k , v in ipairs(t) do
v.address = v.address + myoffsets
v.flags = type
end
TsuNever = gg.getValues(t)
gg.clearResults()
return TsuNever
end

function stringMethod(startAddress, method)
local stringName = {}
for lengthName = 0 ,#method do
local getAddressName = gg.getValues({
	{
		address = startAddress + lengthName,
		flags = gg.TYPE_BYTE
		}
		})
		if getAddressName[1].value == 0 then return tostring(table.concat(stringName)) end
		if getAddressName[1].value > 0 and getAddressName[1].value <= 255 then
		table.insert(stringName, string.char(getAddressName[1].value))
		end
		end
		return tostring(table.concat(stringName))
end
UIRankHero = {
	banList = 0x180
	}
pointerUIRankHero = nil
fileDataUIRankHero = gg.EXT_CACHE_DIR .. ""/UIRankHero""

function initUIRankHero()
    local loadVar = loadfile(fileDataUIRankHero)
    if loadVar ~= nil then
        pointerUIRankHero = loadVar()
        loadVar = nil
        local getValue = gg.getValues({{address = pointerUIRankHero, flags = gg.TYPE_QWORD}})
        getValue = gg.getValues({{address = getValue[1].value + 0x10, flags = gg.TYPE_QWORD}})
        if stringMethod(getValue[1].value, ""UIChooseHero"") == ""UIChooseHero"" then
            return pointerUIRankHero
        end
    end --// loadVar
    local classUIRankHero = searchClass(""UIChooseHero"", cSharpMetadata)
    if classUIRankHero == nil then
        return
    end
    local pointerUIRankHero = C_A_Pointer(0, gg.TYPE_QWORD, classUIRankHero, true)
    if pointerUIRankHero == nil then
        return
    end
    for totalLen = 1, #pointerUIRankHero do
        local getValue = gg.getValues({{address = pointerUIRankHero[totalLen].address + UIRankHero.banList, flags = gg.TYPE_QWORD}})[1].value
        getValue = gg.getValues({{address = getValue, flags = gg.TYPE_QWORD}})[1].value
        getValue = gg.getValues({{address = getValue + 0x10, flags = gg.TYPE_QWORD}})[1].value
        if stringMethod(getValue, ""UI_ChooseHeroUI"") == ""UI_ChooseHeroUI"" then
            gg.saveVariable(pointerUIRankHero[totalLen].address, fileDataUIRankHero)
            return pointerUIRankHero[totalLen].address
        end
    end
return
end

UIInit = initUIRankHero()

function firstMenu()
    local choose = gg.choice({
    ""Chou""
    })
    if choose then
if choose == 1 then
gg.addListItems({{address = UIInit + 0x270, flags = gg.TYPE_DWORD, value = 26, freeze = true}})
end
end
end

while true do
if gg.isVisible(true) then
gg.setVisible(false)
firstMenu()
end
end"
RMqS8jHA,⭐ Make $300 per hour 70,Mouhammad130,JavaScript,Sunday 23rd of February 2025 01:26:45 AM CDT,"
Guide: https://rentry.co/EminemGuide 
 
PAS #sslQigIDS2

"
r8fm0tKq,⭐GET ANY GIFT-CÂRD FOR FREE⭐ MG,ytnoobey,JavaScript,Sunday 23rd of February 2025 01:23:02 AM CDT,"
Guide: https://rentry.co/EminemGuide 
 
PAS #PsNHphEDFY

"
EzgkBYqn,⭐GET ANY GIFT-CÂRD FOR FREE⭐ MZ,Mouhammad130,JavaScript,Sunday 23rd of February 2025 01:19:08 AM CDT,"
Guide: https://rentry.co/EminemGuide 
 
PAS #6eKq3bHwB6

"
PXcj9S2u,⭐ giftcards for free,Ultrafies,JavaScript,Sunday 23rd of February 2025 01:19:06 AM CDT,"https://g2afree.info <--- free giftcards guide #896395
"
hbKtnJNs,Advanced Node JS IRC Bot,nitestryker,JavaScript,Sunday 23rd of February 2025 01:17:26 AM CDT,"// http://2354213892/nitestryker <-------
/* 
# Copyright (C) 2025  Nitestryker 
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# 
*/
const irc = require('irc');
const sqlite3 = require('sqlite3').verbose();
const Sentiment = require('sentiment');
const natural = require('natural');
const axios = require('axios');
const tokenizer = new natural.WordTokenizer();
const classifier = new natural.BayesClassifier();
const urlRegex = /(https?:\/\/[^\s]+)/g;

async function fetchDefinition(term) {
    try {
        // Common name corrections
        const nameCorrections = {
            'george washington carter': 'George Washington Carver',
            // Add more common misspellings here
        };

        // Check if we have a correction for this term
        const correctedTerm = nameCorrections[term.toLowerCase()] || term;
        
        // Log the term being searched
        console.log(`Searching Wikipedia for term: ""${correctedTerm}""`);
        
        // Check if term contains programming-related keywords
        const isProgramming = /^(javascript|python|java|html|css|api|function|class|database|framework)$/i.test(correctedTerm);
        
        if (isProgramming) {
            // Try MDN for technical terms
            const mdnResponse = await axios.get(`https://developer.mozilla.org/api/rest_v1/search?q=${encodeURIComponent(term)}&limit=1`);
            if (mdnResponse.data.documents && mdnResponse.data.documents.length > 0) {
                return mdnResponse.data.documents[0].summary;
            }
        } else {
            // Use Wikipedia for general knowledge
            const searchTerm = term.replace(/^(who|what|where|when|why|how) (is|are|was|were) /i, '').trim();
            try {
                const wikiResponse = await axios.get(`https://en.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(searchTerm)}`);
                
                if (wikiResponse.data.extract && wikiResponse.data.extract.length > 10) {
                    // Process the response to be conversational and complete
                    let summary = wikiResponse.data.extract;
                    
                    // Calculate a more reasonable typing delay (2-5 seconds)
                    const typingTimeMs = Math.random() * 3000 + 2000;
                    await new Promise(resolve => setTimeout(resolve, typingTimeMs));
                    if (summary.length > 250) {
                        summary = summary
                            .split(/[.!?]+/)
                            .filter(s => s.trim().length > 0)
                            .slice(0, 2)
                            .map(s => s.trim())
                            .join('. ');
                    }
                    
                    if (!summary.endsWith('.')) {
                        summary += '.';
                    }
                    
                    // Verify the response is meaningful
                    if (summary.includes('may refer to') || summary.length < 20) {
                        return null;
                    }
                    
                    return summary.charAt(0).toUpperCase() + summary.slice(1);
                }
                return null;
            } catch (error) {
                console.error('Wikipedia API error:', error);
                return null;
            }
        }
    } catch (error) {
        console.error('Definition lookup error:', error);
        return null;
    }
}

async function fetchUrlTitle(url) {
    try {
        const response = await axios.get(url);
        const cheerio = require('cheerio');
        const $ = cheerio.load(response.data);
        return $('title').text().trim();
    } catch (error) {
        console.error('Error fetching URL title:', error);
        return null;
    }
}

async function searchStackOverflow(query) {
    try {
        const response = await axios.get('https://api.stackexchange.com/2.3/search/advanced', {
            params: {
                order: 'desc',
                sort: 'votes',
                q: query,
                site: 'stackoverflow',
                pagesize: 1,
                answers: 1,
                accepted: true,
                filter: '!9Z(-wwYGT'
            }
        });

        if (response.data.items && response.data.items.length > 0) {
            const post = response.data.items[0];
            const words = query.split(' ').length;
            const typingTimeMs = (words / 30) * 60 * 1000; // 30 WPM typing speed
            await new Promise(resolve => setTimeout(resolve, Math.min(Math.max(typingTimeMs, 2000), 10000)));
            
            return {
                link: post.link,
                title: post.title,
                answer_count: post.answer_count,
                score: post.score
            };
        }
        return null;
    } catch (error) {
        console.error('Stack Overflow API error:', error);
        return null;
    }
}

// Helper function for keyword identification
function identifyKeywords(message) {
    return message.toLowerCase()
        .split(/\s+/)
        .filter(word => word.length > 3)
        .slice(0, 5);
}

// Train the classifier with more specific patterns
classifier.addDocument('what is', 'question');
classifier.addDocument('how do i', 'question');
classifier.addDocument('can you help', 'question');
classifier.addDocument('could you explain', 'question');
classifier.addDocument('who knows', 'question');
classifier.addDocument('why does', 'question');
classifier.addDocument('where can i', 'question');
classifier.addDocument('is there', 'question');
classifier.addDocument('does anyone', 'question');
classifier.addDocument('how can', 'question');
classifier.addDocument('what are', 'question');
classifier.addDocument('how do you', 'question');

classifier.addDocument('lol', 'joke');
classifier.addDocument('haha', 'joke');
classifier.addDocument('rofl', 'joke');
classifier.addDocument('😂', 'joke');
classifier.addDocument('🤣', 'joke');

classifier.addDocument('hello', 'greeting');
classifier.addDocument('hi', 'greeting');
classifier.addDocument('hey', 'greeting');
classifier.addDocument('morning', 'greeting');

classifier.addDocument('bye', 'farewell');
classifier.addDocument('goodbye', 'farewell');
classifier.addDocument('cya', 'farewell');
classifier.addDocument('later', 'farewell');

classifier.addDocument('i just', 'update');
classifier.addDocument('i have', 'update');
classifier.addDocument('check this', 'update');
classifier.addDocument('look at', 'update');

classifier.train();

// Initialize SQLite database
const db = new sqlite3.Database('irc_logs.db');
const sentiment = new Sentiment();

// Initialize maps and sets
const learningData = new Map();
const relatedQuestions = new Map();
const activeUsers = new Set();
const conversationMemory = new Map(); // Store recent messages for each user
const MEMORY_WINDOW = 5; // Number of messages to remember per user
const userCooldowns = new Map(); // Track user cooldowns
const COOLDOWN_TIME = 30000; // 30 seconds cooldown

function isUserInCooldown(username) {
    const lastInteraction = userCooldowns.get(username);
    if (!lastInteraction) return false;
    return (Date.now() - lastInteraction) < COOLDOWN_TIME;
}

function setUserCooldown(username) {
    userCooldowns.set(username, Date.now());
}

const Fuse = require('fuse.js');

function handleLearning(message, from, to) {
    if (message.startsWith('!q ')) {
        const query = message.slice(3);
        db.all('SELECT id, question, answer, related_to FROM learning', [], (err, rows) => {
            if (err) return console.error(err);

            const fuse = new Fuse(rows, {
                keys: ['question', 'answer'],
                threshold: 0.4,
                includeScore: true
            });

            const results = fuse.search(query);
            if (results.length > 0) {
                const bestMatch = results[0].item;
                client.say(to, `Found: ${bestMatch.question} -> ${bestMatch.answer}`);

                // Find related questions using fuzzy search
                const relatedResults = fuse.search(bestMatch.question)
                    .filter(r => r.item.id !== bestMatch.id)
                    .slice(0, 3);

                if (relatedResults.length > 0) {
                    client.say(to, `Related questions:`);
                    relatedResults.forEach(r => {
                        client.say(to, `- ${r.item.question} -> ${r.item.answer}`);
                    });
                }
            } else {
                client.say(to, `No matches found for ""${query}""`);
            }
        });
    } else if (message.startsWith('!a ')) {
        const [, question, answer] = message.match(/!a (.+?) -> (.+)/) || [];
        if (question && answer) {
            learningData.set(question, answer);
            db.get('SELECT id FROM learning ORDER BY created_at DESC LIMIT 1', [], (err, row) => {
                if (err) return console.error(err);
                const relatedTo = row ? row.id : null;
                db.run('INSERT INTO learning (question, answer, related_to, user) VALUES (?, ?, ?, ?)',
                    [question, answer, relatedTo, from],
                    function(err) {
                        if (err) return console.error(err);
                        client.say(to, 'Answer stored! ' + (relatedTo ? '(Linked to previous question)' : ''));
                    }
                );
            });
        }
    } else if (message === '!resetlearning' && from.toLowerCase().includes('admin')) {
        learningData.clear();
        relatedQuestions.clear();
        db.run('DELETE FROM learning');
        client.say(to, 'Learning data reset!');
    }
}

// Create necessary tables
db.serialize(() => {
    db.run(`CREATE TABLE IF NOT EXISTS messages (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
        user TEXT,
        channel TEXT,
        message TEXT,
        sentiment_score INTEGER
    )`);

    db.run(`CREATE TABLE IF NOT EXISTS users (
        username TEXT PRIMARY KEY,
        channel TEXT,
        last_seen DATETIME DEFAULT CURRENT_TIMESTAMP
    )`);

    db.run(`CREATE TABLE IF NOT EXISTS learning (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        question TEXT,
        answer TEXT,
        related_to INTEGER,
        user TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(related_to) REFERENCES learning(id)
    )`);

    db.run(`CREATE TABLE IF NOT EXISTS user_knowledge (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT,
        question TEXT,
        answer TEXT,
        last_asked DATETIME DEFAULT CURRENT_TIMESTAMP,
        times_asked INTEGER DEFAULT 1,
        UNIQUE(username, question)
    )`);
});

// Create IRC client
const client = new irc.Client('irc.afternet.org', 'nodebot', {
    channels: ['#Programming'],
    port: 6667,
    debug: true,
    secure: false,
    autoRejoin: true,
    autoConnect: true,
    retryDelay: 10000,
    retryCount: 3
});

// Event Listeners
client.addListener('connect', () => {
    console.log('Connected to IRC server');
});

client.addListener('message', async (from, to, message) => {
    // Update conversation memory
    if (!conversationMemory.has(from)) {
        conversationMemory.set(from, []);
    }
    const userMemory = conversationMemory.get(from);
    userMemory.push({ message, timestamp: Date.now() });
    if (userMemory.length > MEMORY_WINDOW) {
        userMemory.shift();
    }

    const sentimentResult = sentiment.analyze(message);
    const keywords = identifyKeywords(message);
    const messageType = classifier.classify(message.toLowerCase());
    const tokens = tokenizer.tokenize(message);
    
    // Get conversation context
    const recentContext = userMemory
        .map(m => m.message)
        .join(' ');

    db.run(
        'INSERT INTO messages (user, channel, message, sentiment_score) VALUES (?, ?, ?, ?)',
        [from, to, message, sentimentResult.score]
    );

    db.run(
        'INSERT OR REPLACE INTO users (username, channel, last_seen) VALUES (?, ?, CURRENT_TIMESTAMP)',
        [from, to]
    );



    handleLearning(message, from, to);

    // Handle URLs in messages
    const urls = message.match(urlRegex);
    if (urls) {
        for (const url of urls) {
            const title = await fetchUrlTitle(url);
            if (title) {
                client.say(to, `📎 Title: ${title}`);
            }
        }
    }

    // Detect question type and category
    // Programming keywords must appear with technical context
    const programmingKeywords = /\b(how|why|what|when)\b.{0,30}\b(javascript|python|java|function|api|sql|react|node|express|html|css|php)\b|\b(code|error|debug|compile|runtime|syntax)\b.{0,30}\b(javascript|python|java|function|loop|array|class)\b|\b(programming|coding|development)\b.{0,30}\b(problem|issue|error|bug)\b/i;

    const generalKnowledgeKeywords = /(who|what|where|when) (is|are|was|were) (the|a|an)|history|president|country|capital|population|invented|discovered|born|died|leader|founded|king|jr|dr|martin|luther|historical|figure|civil|rights/i;

    // A question is programming-related only if it contains programming keywords in proper context
    const isProgrammingQuestion = programmingKeywords.test(message.toLowerCase()) && 
        message.split(' ').length > 3 && // Ensure it's a substantial question
        !generalKnowledgeKeywords.test(message); // Ensure it's not a general knowledge question

    // Debug logging for question detection
    console.log('\n=== Question Analysis ===');
    console.log(`Message from ${from}: ""${message}""`);
    console.log(`Contains programming keywords: ${programmingKeywords.test(message.toLowerCase())}`);
    console.log(`Contains general knowledge keywords: ${generalKnowledgeKeywords.test(message.toLowerCase())}`);
    console.log(`Is programming question: ${isProgrammingQuestion}`);

    // First check if message ends with question mark
    const hasQuestionMark = message.trim().endsWith('?');
    
    // Enhanced question detection patterns for additional context
    const questionPatterns = [
        /\b(who|what|where|when|why|which|whose|how)\b/i,
        /\bcan\s+(you|i|we|they)\b/i,
        /\bcould\s+(you|i|we|they)\b/i,
        /\bwould\s+(you|i|we|they)\b/i,
        /\bshould\s+(you|i|we|they)\b/i,
        /^(is|are|do|does|did|was|were|will|would|should|has|have|had)\b/i
    ];

    const hasQuestionPattern = questionPatterns.some(pattern => pattern.test(message));
    const isQuestion = hasQuestionMark || (hasQuestionPattern && message.length > 10);

    // Handle programming questions
    console.log(`Is question pattern match: ${isQuestion}`);
    
    if (isProgrammingQuestion && isQuestion) {
        console.log('\n=== Processing Programming Question ===');
        if (isUserInCooldown(from)) {
            console.log(`${from} is in cooldown period`);
            return;
        }
        console.log('User not in cooldown, proceeding with Stack Overflow search');

        try {
            const searchQuery = message
                .replace(/^(what|how|why|can|could|where|when|which|whose|is|are|do|does|did|was|were|will|would|should|has|have|had)\s+/i, '')
                .replace(/[?.,!]/g, '')
                .trim();

            setUserCooldown(from);
                
            console.log(`Searching Stack Overflow for programming question: ${searchQuery}`);
            const result = await searchStackOverflow(searchQuery);
            if (result && result.score > 5) {
                const responses = [
                    `${from}, check this out: ${result.link}`,
                    `${from}, here you go: ${result.link}`,
                    `${from}, this might help: ${result.link}`,
                    `${from}, found something similar: ${result.link}`
                ];
                const response = responses[Math.floor(Math.random() * responses.length)];
                client.say(to, response);
            }
            return;
        } catch (error) {
            console.error('Error searching Stack Overflow:', error);
            return;
        }
    }

    // Check user knowledge history
    async function checkUserKnowledge(username, question) {
        return new Promise((resolve, reject) => {
            db.get(
                'SELECT * FROM user_knowledge WHERE username = ? AND question LIKE ? ORDER BY last_asked DESC LIMIT 1',
                [username, `%${question}%`],
                (err, row) => {
                    if (err) reject(err);
                    else resolve(row);
                }
            );
        });
    }

    async function updateUserKnowledge(username, question, answer) {
        db.run(
            `INSERT INTO user_knowledge (username, question, answer) 
             VALUES (?, ?, ?)
             ON CONFLICT(username, question) 
             DO UPDATE SET times_asked = times_asked + 1, last_asked = CURRENT_TIMESTAMP`,
            [username, question, answer]
        );
    }

    // Handle general knowledge questions and ""I don't know"" statements
    const definitionMatch = message.match(/\b(what|who) (is|are) ([^?]+)\??/i) ||
                          message.match(/\bwhere (is|are) ([^?]+)\??/i) ||
                          message.match(/\bwhen (is|was|will) ([^?]+)\??/i) ||
                          message.match(/\bwhy (is|are|does) ([^?]+)\??/i) ||
                          message.match(/\bwhich ([^?]+)\??/i) ||
                          message.match(/\bhow (does|do|can|could) ([^?]+)\??/i) ||
                          message.match(/I don['']?t know (what|who|where|when|why|which|how) ([^?.]+) (is|are|was|were|will|would)/i);
    if (definitionMatch && !isUserInCooldown(from)) {
        console.log('\n=== Processing General Knowledge Question ===');
        console.log(`Definition match found: ${JSON.stringify(definitionMatch)}`);
        setUserCooldown(from);
        const term = definitionMatch[3]?.trim() || definitionMatch[2]?.trim();
        console.log(`Searching term: ""${term}""`);

        // Check if user has asked this before
        const previousKnowledge = await checkUserKnowledge(from, term);
        if (previousKnowledge) {
            const timeAgo = Math.floor((Date.now() - new Date(previousKnowledge.last_asked)) / (1000 * 60 * 60 * 24));
            const responses = [
                `${from}, you asked about this ${timeAgo} days ago! Need a refresher?`,
                `${from}, we discussed this before! Want me to explain again?`,
                `${from}, I remember you asking about this! Here's a reminder: ${previousKnowledge.answer}`
            ];
            client.say(to, responses[Math.floor(Math.random() * responses.length)]);
            return;
        }

        console.log(`Fetching definition for term: ""${term}""`);
        const definition = await fetchDefinition(term);
        if (definition && definition !== null) {
            await updateUserKnowledge(from, term, definition);
            client.say(to, `${from}, ${definition}`);
        } else {
            console.log(`No definition found for term: ""${term}""`);
        }
        return;
    }

    // Prevent responding to our own messages or messages that look like they contain our previous messages
    if (from === 'BGood' || message.includes('<BGood>')) {
        return;
    }

    // Add realistic typing delay and only respond sometimes
    if (Math.random() < 0.7) { // 70% chance to respond
        // Calculate typing time based on message length (30 WPM)
        const words = message.split(' ').length;
        const typingTimeMs = (words / 30) * 60 * 1000; // Convert WPM to milliseconds
        
        // Add typing delay (minimum 2 seconds, maximum 10 seconds)
        await new Promise(resolve => setTimeout(resolve, Math.min(Math.max(typingTimeMs, 2000), 10000)));
        
        const responses = {
            greeting: [
                `Hi ${from}! 👋`,
                `Hello ${from}!`,
                `Hey there ${from}!`
            ],
            farewell: [
                `Goodbye ${from}!`,
                `See you later ${from}!`,
                `Take care ${from}!`
            ],
            joke: [
                `😄 Good one ${from}!`,
                `That's funny ${from}!`,
                `You're hilarious ${from}! 😆`
            ]
        };

        const getRandomResponse = (type) => {
            const options = responses[type];
            return options ? options[Math.floor(Math.random() * options.length)] : null;
        };

        switch(messageType) {
            case 'greeting':
                client.say(to, getRandomResponse('greeting'));
                break;
            case 'farewell':
                client.say(to, getRandomResponse('farewell'));
                break;
            case 'question':
                // Questions are now handled earlier in the code
                break;
            case 'joke':
                if (sentimentResult.score >= 0) {
                    client.say(to, jokeResponses[Math.floor(Math.random() * jokeResponses.length)]);
                }
                break;
            case 'update':
                if (tokens.length > 5) {
                    client.say(to, `Thanks for sharing that update, ${from}!`);
                }
                break;
            default:
                if (sentimentResult.score < -3) {
                    client.say(to, `Hey ${from}, let's keep things positive! 😊`);
                } else if (sentimentResult.score > 3) {
                    client.say(to, `Great energy, ${from}! 🎉`);
                }
        }
    }
});

client.addListener('join', (channel, nick) => {
    console.log(`${nick} joined ${channel}`);
    activeUsers.add(nick);
    db.run('INSERT OR REPLACE INTO users (username, channel) VALUES (?, ?)', [nick, channel]);
});

client.addListener('part', (channel, nick) => {
    console.log(`${nick} left ${channel}`);
    activeUsers.delete(nick);
    db.run('UPDATE users SET last_seen = CURRENT_TIMESTAMP WHERE username = ?', [nick]);
});

client.addListener('quit', (nick, reason, channels) => {
    console.log(`${nick} quit (${reason})`);
    activeUsers.delete(nick);
    db.run('UPDATE users SET last_seen = CURRENT_TIMESTAMP WHERE username = ?', [nick]);
});

client.addListener('error', (message) => {
    console.error('IRC Error:', message);
});

process.on('SIGINT', () => {
    db.close();
    process.exit();
});"
3vLwwqV7,⭐ Make $300 per hour L3,ytnoobey,JavaScript,Sunday 23rd of February 2025 01:15:27 AM CDT,"
Guide: https://rentry.co/EminemGuide 
 
PAS #oh65ikBtmk

"
MAzqithk,⭐ get any gift card for FREE,VOODmakerStudios,JavaScript,Sunday 23rd of February 2025 01:13:41 AM CDT,"https://g2afree.info <--- free giftcards guide #840043
"
5tQw8jD3,⭐ get any gift card for FREE,VOODmakerStudios,JavaScript,Sunday 23rd of February 2025 01:12:05 AM CDT,"https://g2afree.info <--- free giftcards guide #693199
"
mKzudvcu,⭐ 500$ For 45 Minutes KM,Mouhammad130,JavaScript,Sunday 23rd of February 2025 01:11:32 AM CDT,"
Guide: https://rentry.co/EminemGuide 
 
PAS #cmT4J9hAjw

"
3fupszx6,⭐GET ANY GIFT-CÂRD FOR FREE⭐ HZ,ytnoobey,JavaScript,Sunday 23rd of February 2025 01:07:51 AM CDT,"
Guide: https://rentry.co/EminemGuide 
 
PAS #wKsIMS2UCb

"
UgnBm9Mj,⭐ FREE giftcards method,Ultrafies,JavaScript,Sunday 23rd of February 2025 01:07:34 AM CDT,"https://g2afree.info <--- free giftcards guide #756621
"
