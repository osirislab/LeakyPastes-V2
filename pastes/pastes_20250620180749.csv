id,title,username,language,date,content
NsW0nWAp,"Outlook Ad Overlay Btn (discontinued, was meant for Time Saver).ahk",Lorenzo501,Autohotkey,Friday 20th of June 2025 12:52:26 PM CDT,"#Requires AutoHotkey 2.0
/*
[easiest way to have it always look basically fine by hiding the ad entirely unless tooltips are shown in certain areas, but remember that some Outlook tooltips have multiple lines of text
and the search bar needs to hide the overlays and btn entirely, by detecting when the user has clicked inside the input field]
|
[make an algorithm that goes over every Outlook tooltip pixel of the mentioned row until there is no Outlook tooltip pixel found, then I know exactly how big the Outlook tooltip is and then
I can simply have two rectangles resized so that it leaves a gap between them for the Outlook tooltip. but if the Outlook tooltip starts at the first overlay row pixel then I only need to
have one rectangle, at the right side, being resized to leave a gap on the left side for the Outlook tooltip, and vice versa if the tooltip is at the last overlay row pixel, then I only
need to have one rectangle, at the left side, being resized to leave a gap on the right side for the Outlook tooltip. these amounts of rectangles are about only one side of the ad section,
top/bottom, so one/two rectangles above and one/two rectangles below. checking both top and bottom, to change either side or both as needed]
|
I can make rectangle GUIs (perhaps even using programmatically generated gradients) and then when the cursor hovers the bar directly above or below the ad section, which contains buttons.
then I can detect if any pixels one row below the bar that's above the ad section have changed color, and if any pixels one row above the bar that's below the ad section have changed color.
in which case I can temporarily hide the GUIs that are showing Outlook tooltips, until the cursor no longer hovers the bars. using my PointerDeviceHook w/ Move
*/
F1::Reload()
A_WinDelay := -1
A_CoordModePixel := ""Screen"" ; For the LButton hotkey variant feature that skips inbox resize line clicks and for HandleActivatedWindowOutlookEvent
A_CoordModeMouse := ""Screen"" ; For the LButton hotkey variant feature that skips inbox resize line clicks

EVENT_SYSTEM_FOREGROUND := 0x0003
EVENT_SYSTEM_MINIMIZEEND := 0x0017
HookEvent(EVENT_SYSTEM_FOREGROUND, HandleActivatedWindowOutlookEvent)
HookEvent(EVENT_SYSTEM_MINIMIZEEND, HandleActivatedWindowOutlookEvent)
customOutlookRefreshButtonMouseEventHook := PointerDeviceHook(""Move"", HandleCustomOutlookRefreshButtonMouseEvent, true)

    HandleActivatedWindowOutlookEvent(hWinEventHook, event, hWnd, *)
    {
        static isManagingCustomOutlookRefreshButton := false ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; not up-to-date, so how about renaming to isManagingCustomOutlookOverlays

        if (WinActive(""E-mail ahk_class Olk Host""))
        {
            if (!isManagingCustomOutlookRefreshButton)
            {
                isManagingCustomOutlookRefreshButton := true

                ; Loading custom refresh btn for New Outlook or else merely making it always-on-top if it's already loaded
                if (!IsSet(adButtonOverlayedRefreshButtonGui))
                {
                    Sleep(10) ; This is necessary to make WinGetClientPos retrieve the restored position
                    WinGetClientPos(&outlookX, &outlookY,, &outlookHeight)

while (PixelGetColor(outlookX + 619, outlookY + 146) != 0xFFFFFF) ; Random white [Adv] pixel
    continue ; NEEDS TIMEOUT AND GOTTA CHECK TOP LEFT CORNER WHITE PIXEL + BOTTOM RIGHT CORNER WHITE PIXEL (not one random white pixel)

                    global mobileAppButtonOverlayedRemoverGui := Gui(""-Caption"")
                    mobileAppButtonOverlayedRemoverGui.BackColor := ""Black"" ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;""141414""
                    WinSetExStyle(""+0x08000000L"", mobileAppButtonOverlayedRemoverGui) ; Adds WS_EX_NOACTIVATE
                    mobileAppButtonOverlayedRemoverGui.Show(""x"" outlookX + 55 "" y"" outlookY + outlookHeight - 70 "" w295 h65 NoActivate"")
                    GroupAdd(""CustomOutlookNonClickableOverlays"", ""ahk_id "" mobileAppButtonOverlayedRemoverGui.Hwnd) ;;;;;;;;;;;;;;;;;;;; remove from group before closing the wnd

                    global adButtonOverlayedBgGui := Gui(""-Caption"") ;;;;;;;;;;;;;;;;;;;; +AlwaysOnTop -Caption
                    adButtonOverlayedBgGui.BackColor := ""Black""
                    WinSetTransparent(1, adButtonOverlayedBgGui)
                    WinSetExStyle(""+0x08000000L"", adButtonOverlayedBgGui) ; Adds WS_EX_NOACTIVATE
                    adButtonOverlayedBgGui.Show(""x"" outlookX + 358 "" y"" outlookY + 132 "" w375 h81 NoActivate"")
                    GroupAdd(""CustomOutlookNonClickableOverlays"", ""ahk_id "" adButtonOverlayedBgGui.Hwnd) ;;;;;;;;;;;;;;;;;;;; remove from group before closing the wnd

                    global adButtonOverlayedInnerBgGui := Gui(""-Caption"") ;;;;;;;;;;;;;;;;;;;; +AlwaysOnTop -Caption
                    adButtonOverlayedInnerBgGui.BackColor := ""White"" ;292929""
;WinSetTransparent(200, adButtonOverlayedInnerBgGui) ;REMOVE WHEN DONE
                    WinSetExStyle(""+0x08000000L"", adButtonOverlayedInnerBgGui) ; Adds WS_EX_NOACTIVATE
                    WinSetExStyle(""+0x20"", adButtonOverlayedInnerBgGui) ; Adds WS_EX_TRANSPARENT to let clicks pass-through
                    adButtonOverlayedInnerBgGui.Show(""x"" outlookX + 368 "" y"" outlookY + 142 "" w354 h66 NoActivate"")

                    global adButtonOverlayedRefreshButtonBgGui := Gui(""-Caption"") ;;;;;;;;;;;;;;;;;;;; +AlwaysOnTop -Caption
                    adButtonOverlayedRefreshButtonBgGui.BackColor := ""292929""
                    WinSetExStyle(""+0x08000000L"", adButtonOverlayedRefreshButtonBgGui) ; Adds WS_EX_NOACTIVATE
                    WinSetExStyle(""+0x20"", adButtonOverlayedRefreshButtonBgGui) ; Adds WS_EX_TRANSPARENT to let clicks pass-through
                    adButtonOverlayedRefreshButtonBgGui.Show(""x"" outlookX + 395 "" y"" outlookY + 157 "" w300 h37 NoActivate"")

                    global adButtonOverlayedRefreshButtonGui := Gui(""-Caption"") ;;;;;;;;;;;;;;;;;;;; +AlwaysOnTop -Caption
                    adButtonOverlayedRefreshButtonGui.SetFont(""s13"", ""Calibri"")
                    adButtonOverlayedRefreshButtonGui.AddButton(""x0 y0 w300"", ""Refresh e-mails"").OnEvent(""Click"", (*) => FocusHiddenButton())
                    hiddenButton := adButtonOverlayedRefreshButtonGui.AddButton(""-Tabstop y-100"")
;..Gui.AddText(""x0 y0 w50 h50 BackgroundFF00FF"");can hide parts w/ multiple of these with WinSetTransColor for all non-Button GUIs, but it's better to repeat a region algorithm
                    WinSetExStyle(""+0x08000000L"", adButtonOverlayedRefreshButtonGui) ; Adds WS_EX_NOACTIVATE
                    WinSetTransparent(175, adButtonOverlayedRefreshButtonGui)
                    adButtonOverlayedRefreshButtonGui.Show(""x"" outlookX + 395 "" y"" outlookY + 157 "" w300 h37 NoActivate"")
;ToolTip(""LOADED"")
                    customOutlookRefreshButtonMouseEventHook.Start()
                }
                else
                {
;Sleep(10)
                    mobileAppButtonOverlayedRemoverGui.Opt(""+AlwaysOnTop"")
                    mobileAppButtonOverlayedRemoverGui.Opt(""-AlwaysOnTop"")
                    adButtonOverlayedBgGui.Opt(""+AlwaysOnTop"")
                    adButtonOverlayedBgGui.Opt(""-AlwaysOnTop"")
                    adButtonOverlayedInnerBgGui.Opt(""+AlwaysOnTop"")
                    adButtonOverlayedInnerBgGui.Opt(""-AlwaysOnTop"")
                    adButtonOverlayedRefreshButtonBgGui.Opt(""+AlwaysOnTop"")
                    adButtonOverlayedRefreshButtonBgGui.Opt(""-AlwaysOnTop"")
                    adButtonOverlayedRefreshButtonGui.Opt(""+AlwaysOnTop"")
                    adButtonOverlayedRefreshButtonGui.Opt(""-AlwaysOnTop"")
;ToolTip(""NO LONGER OVERLAPPED"")
                }

                isManagingCustomOutlookRefreshButton := false
            }
        }
        else if (IsSet(adButtonOverlayedRefreshButtonGui) && !WinExist(A_ScriptName "" ahk_class AutoHotkeyGUI ahk_id "" hWnd) && !isManagingCustomOutlookRefreshButton)
        {
            isManagingCustomOutlookRefreshButton := true

            if (WinGetMinMax(""E-mail ahk_class Olk Host"") = -1) ; Detects minimized wnd (Outlook is no longer being used)
            {
                customOutlookRefreshButtonMouseEventHook.Stop()
                WinClose(mobileAppButtonOverlayedRemoverGui)
                WinClose(adButtonOverlayedBgGui)
                WinClose(adButtonOverlayedInnerBgGui)
                WinClose(adButtonOverlayedRefreshButtonBgGui)
                WinClose(adButtonOverlayedRefreshButtonGui)
                global adButtonOverlayedRefreshButtonGui := unset
;ToolTip(""CLOSED"")
            }

            isManagingCustomOutlookRefreshButton := false
        }

        FocusHiddenButton() => PostMessage(0x0028, hiddenButton.Hwnd, true) ; 0x0028 = WM_NEXTDLGCTL
    }

HookEvent(event, fnObj, pid := 0) => DllCall(""SetWinEventHook"", ""UInt"", event, ""UInt"", event, ""Ptr"", 0, ""Ptr"", CallbackCreate(fnObj), ""UInt"", pid, ""UInt"", 0, ""UInt"", 0)

HandleCustomOutlookRefreshButtonMouseEvent(eventInfo)
{
    ;THESE SPLIT GUI(S) HAVE NOT BEEN MADE YET, SO IT'S TEMPORARILY USING THE OLD ONE. CAN REPLACE THE TWO UNCOMMENTED LINES WITH THE TWO COMMENTED LINES, ONCE THE GUI HAS BEEN SPLIT
;    topLeftAdButtonOverlayedInnerBgGui.GetClientPos(&topLeftAdButtonOverlayedInnerBgGuiX, &topLeftAdButtonOverlayedInnerBgGuiY)
;    bottomLeftAdButtonOverlayedInnerBgGui.GetClientPos(, &bottomLeftAdButtonOverlayedInnerBgGuiY,, &bottomLeftAdButtonOverlayedInnerBgGuiHeight)
adButtonOverlayedInnerBgGui.GetClientPos(&topLeftAdButtonOverlayedInnerBgGuiX, &topLeftAdButtonOverlayedInnerBgGuiY)
adButtonOverlayedInnerBgGui.GetClientPos(, &bottomLeftAdButtonOverlayedInnerBgGuiY,, &bottomLeftAdButtonOverlayedInnerBgGuiHeight) ;NOT SURE IF THIS IS NECESSARY ANYMORE, SEE IF USED LATER

    if (eventInfo.Pt.Y >= topLeftAdButtonOverlayedInnerBgGuiY - 54 && eventInfo.Pt.Y <= topLeftAdButtonOverlayedInnerBgGuiY - 23) ; Detects cursor on menubar directly above inbox
    {
;hasFoundOutlookToolTipAtBottomLeftOfAd := false
startTime := A_TickCount

        loop
        {
            if (hasFoundOutlookToolTipAtTopLeftOfAd := PixelGetColor(topLeftAdButtonOverlayedInnerBgGuiX, topLeftAdButtonOverlayedInnerBgGuiY - 1) != 0x292929)
            {
                ;[I DON'T THINK I NEED THIS AFTER ALL, MAKES IT TAKE EVEN LONGER AND THEN I'D HAVE TO INCREASE THE TIMEOUT.. IS LIKELY MUCH FASTER TO SIMPLY ALWAYS SET BOTTOM WIDTH AS WELL]
                ;hasFoundOutlookToolTipAtBottomLeftOfAd := PixelGetColor(topLeftAdButtonOverlayedInnerBgGuiX
                ;    , bottomLeftAdButtonOverlayedInnerBgGuiY + bottomLeftAdButtonOverlayedInnerBgGuiHeight) != 0x292929

                break
            }

            ; Timeout for when the tooltip should have faded-in if there was one
            if (A_TickCount - startTime > 300)
            {
ToolTip(""[TIMEOUT] ON TOP BTN BAR!!!! "" eventInfo.Pt.Y ""`nhasFoundOutlookToolTipAtTopLeftOfAd: "" hasFoundOutlookToolTipAtTopLeftOfAd) ;""`nhasFoundOutlookToolTipAtBottomLeftOfAd: ""
    ;hasFoundOutlookToolTipAtBottomLeftOfAd) ; BOTH BOOLS ALWAYS FALSE

                return
            }

            Sleep(10)
        }
; 
ToolTip(""ON TOP BTN BAR!!!! "" eventInfo.Pt.Y ""`nhasFoundOutlookToolTipAtTopLeftOfAd: "" hasFoundOutlookToolTipAtTopLeftOfAd) ;""`nhasFoundOutlookToolTipAtBottomLeftOfAd: ""
    ;hasFoundOutlookToolTipAtBottomLeftOfAd) ; FIRST BOOL ALWAYS TRUE

;[COULD PROBABLY DO IT THE WAY I INITIALLY PLANNED BUT THEN IT ONLY WORKS FOR HOW MY OWN OUTLOOK CURRENTLY IS ORGANIZED, THE BUTTONS AND THEIR TOOLTIPS.. THE NEW SOLUTION THE LINE BELOW
;THIS ONE IS ALSO NOT PERFECT BECAUSE THE TOOLTIP COULD THEN PERHAPS GO PARTIALLY THROUGH THE CUSTOM BTN.. THEN GOTTA MESS WITH WinSetTransColor/WinSetRegion, IT'S JUST A BIG MESS.. AND NEEDS BINARY SEARCH
;TO DO AT MOST 9 PixelGetColor CALLS FOR FULL WIDTH OF AD BTN OVERLAY (TAKES ABOUT 140 MSEC), INSTEAD OF 354 CALLS (TAKES ABOUT 5891 MSEC!!)]
;[I GUESS I'LL HAVE TO DO THIS INSTEAD: FIRST HORIZONTAL ROW OF BLACK PIXELS, THEN AT THE END OF THE ROW OF BLACK PIXELS, TEMPORARILY TURNING THE AD BTN OVERLAYS OFF SO IT CAN CHECK <-\
;VERTICALLY AS WELL, TO SEE WHERE THE BLACK PIXELS STOP GOING DOWNWARDS FROM THE RIGHT EDGE OF THE TOOLTIP.. THAT'S LIKE A SAFE SPOT WITH ONLY BLACK PIXELS TO EXPECT. THEN CHANGING THE \
;AD BTN OVERLAYS AND TURNING THEM BACK ON. AND WHEN THE PIXEL AT THE TOP ISN'T DETECT ANYMORE IN A NEW MOUSEMOVE EVENT, IT RESETS THE AD BTN OVERLAYS]                                    |
;[NO NEED TO LOOP OVER BOTTOM PIXELS OFC]                                                                                                                                                 |
;[REV0, SKIP]IF BOOL_1 = TRUE, THEN { LOOP OVER TOP PIXELS, USING RESULT FOR TOP-RIGHT GUI WIDTH AND IF BOOL_2 = TRUE THEN ALSO FOR BOTTOM-RIGHT GUI WIDTH }                              |
;IF BOOL_1 = TRUE, THEN { LOOP OVER HORIZONTAL TOP PIXELS, USING RESULT FOR TOP-RIGHT GUI WIDTH AND BOTTOM-RIGHT GUI WIDTH, [𝗨𝗦𝗘 𝗫 𝗢𝗥 𝗦𝗢𝗠𝗘𝗧𝗛𝗜𝗡𝗚 𝗘𝗟𝗦𝗘 𝗙𝗢𝗥 𝗔𝗟𝗜𝗚𝗡𝗠𝗘𝗡𝗧?], LOOP OVER VERTICAL TOP  /
;PIXELS FROM TOP TO BOTTOM, USING RESULT FOR TOP-RIGHT GUI HEIGHT AND BOTTOM-RIGHT GUI HEIGHT, [𝗨𝗦𝗘 𝗬 𝗢𝗥 𝗦𝗢𝗠𝗘𝗧𝗛𝗜𝗡𝗚 𝗘𝗟𝗦𝗘 𝗙𝗢𝗥 𝗔𝗟𝗜𝗚𝗡𝗠𝗘𝗡𝗧? IT'S PROBABLY F'D, SEE OTHER SUGGESTION ABOVE PSEUDOCODE]}
    }
else
ToolTip(""OFF TOP BTN BAR "" eventInfo.Pt.Y)
}



















#HotIf (MouseIsOver(""ahk_group CustomOutlookNonClickableOverlays""))
*LButton::WinActivate(""E-mail ahk_class Olk Host"")

; Makes Outlook active when it needs to be while a click is happening on the custom refresh button
#HotIf (MouseIsOverCustomOutlookRefreshButton())
*LButton::
{
    WinActivate(""E-mail ahk_class Olk Host"")
    Send(""{LButton down}"")
    KeyWait(""LButton"")
    Send(""{LButton up}"")
    WinActivate(""E-mail ahk_class Olk Host"")
}

; CURRENTLY ONLY WORKS FOR OUTLOOK DARK MODE
#HotIf (MouseIsOver(""E-mail ahk_class Olk Host""))
*LButton::
{
    WinGetClientPos(&outlookX, &outlookY,,, ""E-mail ahk_class Olk Host"")
    MouseGetPos(&cursorX, &cursorY)

    ; I have retrieved screen pos of pixels while in maximized Outlook wnd. Then made pos relative by incrementing once, since Outlook's x,y client pos was -1,-1 and I've added that to it
    switch (cursorX)
    {
        ; Skips clicks on left side of inbox that otherwise allows you to resize, which interferes with the Outlook overlays feature
        case outlookX + 354, outlookX + 355, outlookX + 356, outlookX + 357:
            resizeLinePixelRowStart := outlookX + 353

            if (cursorY >= outlookY + 136)
                for (iteratedPixel in [0x141414, 0x141414, 0x3D3D3D, 0x3D3D3D])
                    if (PixelGetColor(resizeLinePixelRowStart + A_Index, cursorY) = iteratedPixel)
                        return
        ; Skips clicks on right side of inbox that otherwise allows you to resize, which interferes with the Outlook overlays feature
        case outlookX + 733, outlookX + 734, outlookX + 735, outlookX + 736:
            resizeLinePixelRowStart := outlookX + 732

            switch (cursorY)
            {
                case outlookY + 124:
                    for (iteratedPixel in [0x0F0F0F, 0x0F0F0F, 0x0F0F0F, 0x0F0F0F])
                        if (PixelGetColor(resizeLinePixelRowStart + A_Index, cursorY) = iteratedPixel)
                            return
                case outlookY + 125:
                    for (iteratedPixel in [0x101010, 0x101010, 0x101010, 0x101010])
                        if (PixelGetColor(resizeLinePixelRowStart + A_Index, cursorY) = iteratedPixel)
                            return
                case outlookY + 126:
                    for (iteratedPixel in [0x121212, 0x121212, 0x121212, 0x121212])
                        if (PixelGetColor(resizeLinePixelRowStart + A_Index, cursorY) = iteratedPixel)
                            return
                case outlookY + 127, outlookY + 128:
                    for (iteratedPixel in [0x131313, 0x131313, 0x131313, 0x131313])
                        if (PixelGetColor(resizeLinePixelRowStart + A_Index, cursorY) = iteratedPixel)
                            return
                case outlookY + 129, outlookY + 130, outlookY + 131, outlookY + 132:
                    for (iteratedPixel in [0x141414, 0x141414, 0x141414, 0x141414])
                        if (PixelGetColor(resizeLinePixelRowStart + A_Index, cursorY) = iteratedPixel)
                            return
                case outlookY + 133:
                    for (iteratedPixel in [0x131313, 0x141414, 0x141414, 0x141414])
                        if (PixelGetColor(resizeLinePixelRowStart + A_Index, cursorY) = iteratedPixel)
                            return
                case outlookY + 134:
                    for (iteratedPixel in [0x121212, 0x141414, 0x141414, 0x141414])
                        if (PixelGetColor(resizeLinePixelRowStart + A_Index, cursorY) = iteratedPixel)
                            return
                case outlookY + 135:
                    for (iteratedPixel in [0x121212, 0x131313, 0x141414, 0x141414])
                        if (PixelGetColor(resizeLinePixelRowStart + A_Index, cursorY) = iteratedPixel)
                            return
                default:
                    if (cursorY >= outlookY + 136)
                        for (iteratedPixel in [0x111111, 0x131313, 0x141414, 0x141414])
                            if (PixelGetColor(resizeLinePixelRowStart + A_Index, cursorY) = iteratedPixel)
                                return
            }
    }

    Send(""{LButton down}""), KeyWait(""LButton""), Send(""{LButton up}"")
}

class Point
{
    X: i32, Y: i32
}

/*
Example usage: (pointerDeviceEventHook := PointerDeviceHook(""Move|LButton Down|LButton Up"", HandlePointerDeviceEvent)).Start()

/** @param {PointerDeviceHook.EventInfo} eventInfo Pointer device event info */`
HandlePointerDeviceEvent(eventInfo)
{
    ToolTip(Format(""
    (
        x{1}, y{2}
        EventAction	: {3}
        EventKey	: {4}
        KeyUsageCount	: {5}
        KeyUsageTime	: {6}
        PressDuration	: {7}
        IsPenAction	: {8}
    )"", eventInfo.Pt.X, eventInfo.Pt.Y, eventInfo.Action, eventInfo.Key, eventInfo.KeyUsageCount, eventInfo.KeyUsageTime, eventInfo.KeyPressDuration, eventInfo.IsPenAction))
}
*/
class PointerDeviceHook
{
    class InternalEventInfo
    {
        Pt: Point
        MouseData: i32 ; Necessary cast to `Int`
        Flags: u32
        Time: u32
        ExtraInfo: uptr
    }

    class EventInfo
    {
        Pt => this._IsPtAdaptive ? PointerDeviceHook.EventInfo.LatestPt : this._Pt

        /** @prop {string} Action The event action */
        Action => this._IsActionAdaptive ? (PointerDeviceHook.EventInfo.LatestAction ?? this._Action) : this._Action

        /** @prop {string} Key The event key */
        Key => PointerDeviceHook.EventInfo.IsKeyPressedDown ? PointerDeviceHook.EventInfo.RetainedKey : this._Key

        /** @prop {integer} KeyUsageCount Count how many times a key gets pressed in a short time (KeyUsageCountTimeThreshold) */
        KeyUsageCount => PointerDeviceHook.EventInfo.IsKeyPressedDown ? PointerDeviceHook.EventInfo.RetainedKeyUsageCount : this._KeyUsageCount

        /** @prop {string} KeyUsageTime The time when the event key was pressed, scrolled, or used for a pen action */
        KeyUsageTime => PointerDeviceHook.EventInfo.IsKeyPressedDown ? PointerDeviceHook.EventInfo.RetainedKeyUsageTime : this._KeyUsageTime

        /** @prop {integer} KeyPressDuration The time elapsed since this key was pressed */
        KeyPressDuration => (this.KeyUsageTime ? A_TickCount - this.KeyUsageTime : 0)

        /** @prop {integer} IsPenAction Whether or not the event is caused by a pen pointer device (not detected when using drawing tablet) */
        IsPenAction => PointerDeviceHook.EventInfo.IsKeyPressedDown ? PointerDeviceHook.EventInfo.RetainedIsPenAction : this._IsPenAction

        /** @prop {boolean} IsKeyPressedDown The hook does not repeatedly trigger the down event while a key is pressed down, so those `onEvent` callbacks use timer & keeps relevant info */
        static IsKeyPressedDown := false

        static __New() => this.LatestPt := Point()
        __New() => this._Pt := Point()
    }

    /** @prop {Map} MsgList A list of message codes and actions (the commented wheel actions can also be used in the `PointerDeviceHook` constructor) */
    MsgList := Map(
        512, ""Move"",
        513, ""LButton Down"",
        514, ""LButton Up"",
        516, ""RButton Down"",
        517, ""RButton Up"",
        519, ""MButton Down"",
        520, ""MButton Up"",
        523, ""XButton{:d} Down"",
        524, ""XButton{:d} Up"")
        ;——, ""WheelUp""
        ;——, ""WheelDown""

    /** @prop {integer} ProcHandle SetWindowsHookEx */
    ProcHandle := 0

    /** @prop {Map} PriorKeyObjects The map logs the time of when keys were previously pressed, as well as the count (both saved inside an object which is associated with a key) */
    PriorKeyObjects := Map()

    /** @prop {integer} KeyUsageCountTimeThreshold The time in which the usage of the event key gets counted, or reset when the time threshold is reached (milliseconds) */
    KeyUsageCountTimeThreshold := 500

    /**
     * @param {string} [action=""All""] Move, LButton Down, MButton Up, etc (the `MsgList` property shows all of them)
     * @param {(hookObj) => Integer} onEvent This callback gets called on the event (to block mouse actions the callback must return true w/ default value `shouldMaintainResponsiveness`)
     * @param {integer} [shouldMaintainResponsiveness=false] Default is False, causing it to call `onEvent` in this thread in favor of mouse-action-blocking capability (consider using timer
     * in `onEvent`). Specify True to call it in a different thread if the `onEvent` code causes considerable mouse lag, as a result the Proc becomes incapable of blocking mouse actions
     * @param {integer} [criticalMode=0] Default is Disabled Mode. A (positive) Enabled Mode value is the message check interval. Specifying -1 turns on Critical but disables message checks
     */
    __New(action := ""All"", onEvent := (*) => 0, shouldMaintainResponsiveness := false, criticalMode := 0)
    {
        static WM_LBUTTONDOWN := 0x0201, WM_LBUTTONUP := 0x0202, WM_RBUTTONDOWN := 0x0204, WM_RBUTTONUP := 0x0205, WM_MBUTTONDOWN := 0x0207, WM_MBUTTONUP := 0x0208, WM_MOUSEWHEEL := 0x020A
            , WM_XBUTTONDOWN := 0x020B, WM_XBUTTONUP := 0x020C, LLMHF_INJECTED := 0x00000001, MI_WP_SIGNATURE := 0xFF515700, SIGNATURE_MASK := 0xFFFFFF00

        ; This callback gets executed when a pointer-device hook event occurs. The fast mode should be used only when it is known exactly which thread(s) this callback will be called from
        this.InternalCallback := CallbackCreate(PointerDeviceProc, (criticalMode && criticalMode != ""Off"") ? ""F"" : unset, 3)

        PointerDeviceProc(nCode, wParam, lParam)
        {
            if (criticalMode = -1 || criticalMode)
                Critical(criticalMode)

            internalEventInfo := StructFromPtr(PointerDeviceHook.InternalEventInfo, lParam)
            eventInfo := PointerDeviceHook.EventInfo()

            ; `internalEventInfo.MouseData` contains a reserved low-order word, which we don't need, and the high-order word is the leftmost 16 bits (bitshift removes the rest).
            ; `PointerDeviceHook.EventInfo.IsKeyPressedDown` is mainly set at this point so that the up event will also stop the repeated down event timer when the up action isn't hooked
            switch (wParam)
            {
                case WM_MOUSEWHEEL: eventInfo._Action := (internalEventInfo.MouseData >> 16) > 0 ? ""WheelUp"" : ""WheelDown"", PointerDeviceHook.EventInfo.IsKeyPressedDown := false
                case WM_XBUTTONDOWN: eventInfo._Action := Format(this.MsgList[wParam], internalEventInfo.MouseData >> 16), PointerDeviceHook.EventInfo.IsKeyPressedDown := true
                case WM_XBUTTONUP: eventInfo._Action := Format(this.MsgList[wParam], internalEventInfo.MouseData >> 16), PointerDeviceHook.EventInfo.IsKeyPressedDown := false
                case WM_LBUTTONDOWN, WM_RBUTTONDOWN, WM_MBUTTONDOWN: eventInfo._Action := this.MsgList[wParam], PointerDeviceHook.EventInfo.IsKeyPressedDown := true
                case WM_LBUTTONUP, WM_RBUTTONUP, WM_MBUTTONUP: eventInfo._Action := this.MsgList[wParam], PointerDeviceHook.EventInfo.IsKeyPressedDown := false
                default: eventInfo._Action := this.MsgList.Has(wParam) ? this.MsgList[wParam] : 0
            }

            if (nCode < 0 || (action != ""All"" && !InStr(action, eventInfo._Action)))
                return CallNextHookEx(nCode, wParam, lParam)

            eventInfo._IsPtAdaptive := eventInfo._IsActionAdaptive := false
            eventInfo._KeyUsageTime := eventInfo._KeyUsageCount := eventInfo._Key := 0
            eventInfo._Pt.X := internalEventInfo.Pt.X
            eventInfo._Pt.Y := internalEventInfo.Pt.Y

            if (eventInfo._Action && eventInfo._Action != ""Move"")
            {
                if (!this.PriorKeyObjects.Has(eventInfo._Action))
                    this.PriorKeyObjects[eventInfo._Action] := {Time: internalEventInfo.Time, Count: 0}

                priorKey := this.PriorKeyObjects[eventInfo._Action]
                eventInfo._Key := eventInfo._Action
                eventInfo._KeyUsageCount := priorKey.Count += internalEventInfo.Time - priorKey.Time < this.KeyUsageCountTimeThreshold ? 1 : -priorKey.Count + 1 ; Resets to 1 if false
                eventInfo._KeyUsageTime := priorKey.Time := internalEventInfo.Time
                eventInfo._IsPenAction := DetermineIsPenAction(internalEventInfo.ExtraInfo)
                
                if (PointerDeviceHook.EventInfo.IsKeyPressedDown)
                {
                    keyDownEventInfo := eventInfo.Clone()
                    keyDownEventInfo._IsPtAdaptive := keyDownEventInfo._IsActionAdaptive := true
                    PointerDeviceHook.EventInfo.LatestPt.X := eventInfo._Pt.X
                    PointerDeviceHook.EventInfo.LatestPt.Y := eventInfo._Pt.Y
                    PointerDeviceHook.EventInfo.LatestAction := unset
                    PointerDeviceHook.EventInfo.RetainedKey := eventInfo._Key
                    PointerDeviceHook.EventInfo.RetainedKeyUsageCount := eventInfo._KeyUsageCount
                    PointerDeviceHook.EventInfo.RetainedKeyUsageTime := internalEventInfo.Time
                    PointerDeviceHook.EventInfo.RetainedIsPenAction := eventInfo._IsPenAction
                    SetTimer(() => (this.ProcHandle && PointerDeviceHook.EventInfo.IsKeyPressedDown ? onEvent(keyDownEventInfo) : SetTimer(, 0)), 50)
                }
            }
            else if (PointerDeviceHook.EventInfo.IsKeyPressedDown)
            {
                PointerDeviceHook.EventInfo.LatestPt.X := eventInfo._Pt.X
                PointerDeviceHook.EventInfo.LatestPt.Y := eventInfo._Pt.Y
                PointerDeviceHook.EventInfo.LatestAction := eventInfo._Action
            }
            else
                eventInfo._IsPenAction := DetermineIsPenAction(internalEventInfo.ExtraInfo)

            if (shouldMaintainResponsiveness)
            {
                SetTimer(() => onEvent(eventInfo), -1)

                return CallNextHookEx(nCode, wParam, lParam)
            }
            else
                return onEvent(eventInfo) && !(internalEventInfo.Flags & LLMHF_INJECTED) ? true : CallNextHookEx(nCode, wParam, lParam)
        }

        DetermineIsPenAction(extraInfo) => ((extraInfo & SIGNATURE_MASK) = MI_WP_SIGNATURE)
        CallNextHookEx(nCode, wParam, lParam) => DllCall(""CallNextHookEx"", ""Ptr"", 0, ""Int"", nCode, ""UPtr"", wParam, ""Ptr"", lParam)
    }

    /** Warning: Take caution when blocking mouse actions, you should not call this inside a mouse hotkey prefixed w/ the (~) tilde symbol (to make `Stop` unblock mouse actions properly) */
    Start()
    {
        if (!this.ProcHandle)
            this.ProcHandle := DllCall(""SetWindowsHookEx"", ""Int"", WH_MOUSE_LL := 14, ""Ptr"", this.InternalCallback, ""Ptr"", GetModuleHandle(), ""UInt"", 0)

        GetModuleHandle() => DllCall(""GetModuleHandle"", ""UInt"", 0, ""Ptr"")
    }
    
    Stop()
    {
        if (this.ProcHandle && DllCall(""UnhookWindowsHookEx"", ""Ptr"", this.ProcHandle))
            this.ProcHandle := 0
    }

    __Delete() => (this.InternalCallback && (this.Stop(), CallbackFree(this.InternalCallback), this.InternalCallback := 0))
}

MouseIsOver(winTitle, winText?, excludeTitle?, excludeText?) => (MouseGetPos(,, &winId), WinExist(winTitle "" ahk_id "" winId, winText?, excludeTitle?, excludeText?))

MouseIsOverCustomOutlookRefreshButton()
{
    try return (MouseGetPos(,, &winId, &control), WinExist(A_ScriptName "" ahk_class AutoHotkeyGUI ahk_id "" winId) && control = ""Button1"")
    return false
}
































; ------------------------------------------------------------------------ BELOW ARE SOME OTHER FILES I HAD ------------------------------------------------------------------------

/*
WS_EX_NOACTIVATE is useless? maybe not, the click skip didn't work so that seemed useless but it's also supposed to skip activation through other means
*/

/*
[When it's done, reply / edit reply with Lorenzo501 in issue of the two github repos that tried to fix it but failed, one I have starred with Lorenzo501, and one with Infinity-Surfer that
needs to unstar, also edit the msg in the ExplorerPatcher's newoutlookpatcher channel, and maybe test Tgames' Outlook trick on laptop, could mention it on the issue discussions too]
[When it's done, should probably make the stuff in the WinEvent handler use ""try"" in case Outlook crashes.. go kill the process and see if there's an error]
[On Outlook foreground event, resize and move event, but these events should get hooked in HandleCreatedOutlookEvent when it ends because Outlook is temporarily transparent and active]
[Make sure the other Outlook features still work, because they probably relied on Outlook being active but especially if the new Refresh btn gets clicked, Outlook might be seen as inactive
but maybe I can just make the LButton hotkey use MouseIsOver instead of WinActive.. I doubt there's a better solution]
[make it search for the white pixels in case the layout has been stretched, because then [Adv] moves with it]
These are always there when you check for the position within the wnd instead of the screen (resizing/moving the wnd doesn't matter then apart from keeping it in the top-left corner).
I can check on several points in the wnd ad section to detect if there are white pixels of the [Adv] symbol, and only then mask the ad section.

[I have already removed the Sync button that you have by default in the View tab]
[Mention in Time Saver to multi-line automation comment that the Sync button in the View tab of New Outlook is replaced by a ""Refresh e-mails"" button that overlays the ad section
and that it's recommended to do the following: Go to the View tab > More options > Customize > Uncheck Synchronize > Save]
To put something actually useful in the empty ad section, just add a button that says ""Refresh e-mails"" and when clicked, sends F9
Verzonden en ontvangen e-mail synchroniseren: F9

[Make sure to only use dark colors for the GUI when dark mode is used, otherwise light colors. and only need to check for it in the Outlook foreground event, not the resize and move event]
FFFFFF on [Adv] and 292929 around/inside [Adv] << ON DARK MODE
000000 on [Adv] and FFFFFF around/inside [Adv] << ON LIGHT MODE

--------[x]--[y]

top-left corner of ad
Screen:	356, 131
Window:	364, 139
Client:	357, 132

bottom-left corner of ad
Screen:	356, 210
Window:	364, 218
Client:	357, 211

top-right corner of ad
Screen:	732, 131
Window:	740, 139
Client:	733, 132

bottom-right corner of ad
Screen:	732, 210
Window:	740, 218
Client:	733, 211
*/

/*
#Requires AutoHotkey 2.0
A_CoordModePixel := ""Screen""

loop
{
a := PixelGetColor(615, 145)
b := PixelGetColor(616, 145)
c := PixelGetColor(617, 145)
d := PixelGetColor(618, 145)
e := PixelGetColor(619, 145)
f := PixelGetColor(620, 145)
g := PixelGetColor(621, 145)
h := PixelGetColor(622, 145)
i := PixelGetColor(623, 145)
j := PixelGetColor(624, 145)
k := PixelGetColor(625, 145)
tooltip(""615 = "" a ""`n616 = "" b ""`n617 = "" c ""`n618 = "" d ""`n619 = "" e ""`n620 = "" f ""`n621 = "" g ""`n622 = "" h ""`n623 = "" i ""`n624 = "" j ""`n625 = "" k)
}
*/

/*
#Requires AutoHotkey 2.0
A_CoordModePixel := ""Screen""

; 732, 123
; to
; 735, 260

F8::
{
currentX := 732
currentY := 123
A_Clipboard := """"

loop ; TO FIND OUT ALL COLORS OF THE RESIZE LINE ON THE RIGHT
{
    loop
    {
        if (currentX = 732)
            A_Clipboard .= ""732-735,"" currentY "" = ""

        A_Clipboard .= PixelGetColor(currentX, currentY) "", ""

        if (currentX = 735)
        {
            currentX := 732
            A_Clipboard .= ""`n""

            break
        }
        else
            ++currentX
    }

    if (currentY = 260)
        break
    else
        ++currentY
}
ToolTip(""Done"")
}

these need to skip clicks when the color ̶u̶n̶d̶e̶r near the cursor is found but also the pixel next to it (the other pixel), to make sure that the resize element is being hovered and not
something with the same color

Screen X and color [RESIZE LINE ON THE LEFT]:
353, 141414
354, 141414
355, 3D3D3D
356, 3D3D3D

Screen X, Y and color [RESIZE LINE ON THE RIGHT, MORE COMPLICATED COLORS AT THE TOP]:
732, 123
to
735, 260
RESULTS:	check these two pixels when on any of these four pixels (X axes from top to bottom)
   X     Y	__||__	  __||__		     __1
 732-735,123 = 0x0F0F0F, 0x0F0F0F, 0x0F0F0F, 0x0F0F0F,_1
 732-735,124 = 0x101010, 0x101010, 0x101010, 0x101010,_1
 732-735,125 = 0x121212, 0x121212, 0x121212, 0x121212,__2!
732-735,126 = 0x131313, 0x131313, 0x131313, 0x131313, 
732-735,127~= 0x131313, 0x131313, 0x131313, 0x131313,__4!
/732-735,128 = 0x141414, 0x141414, 0x141414, 0x141414, 
732-735,129 = 0x141414, 0x141414, 0x141414, 0x141414, 
732-735,130 = 0x141414, 0x141414, 0x141414, 0x141414, 
732-735,131 = 0x141414, 0x141414, 0x141414, 0x141414,_1!
/732-735,132~= 0x131313, 0x141414, 0x141414, 0x141414, ..__1!
 732-735,133 = 0x121212, 0x141414, 0x141414, 0x141414,   ___1!
 732-735,134/=_0x121212,/0x131313,/0x141414,_0x141414,   ____126!..
/732-735,135 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,136 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,137 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,138 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,139 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,140 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,141 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,142 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,143 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,144 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,145 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,146 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,147 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,148 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,149 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,150 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,151 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,152 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,153 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,154 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,155 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,156 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,157 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,158 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,159 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,160 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,161 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,162 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,163 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,164 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,165 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,166 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,167 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,168 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,169 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,170 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,171 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,172 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,173 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,174 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,175 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,176 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,177 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,178 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,179 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,180 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,181 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,182 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,183 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,184 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,185 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,186 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,187 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,188 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,189 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,190 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,191 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,192 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,193 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,194 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,195 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,196 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,197 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,198 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,199 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,200 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,201 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,202 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,203 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,204 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,205 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,206 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,207 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,208 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,209 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,210 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,211 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,212 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,213 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,214 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,215 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,216 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,217 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,218 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,219 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,220 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,221 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,222 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,223 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,224 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,225 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,226 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,227 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,228 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,229 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,230 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,231 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,232 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,233 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,234 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,235 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,236 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,237 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,238 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,239 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,240 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,241 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,242 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,243 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,244 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,245 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,246 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,247 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,248 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,249 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,250 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,251 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,252 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,253 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,254 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,255 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,256 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,257 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,258 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,259 = 0x111111, 0x131313, 0x141414, 0x141414, 
732-735,260 = 0x111111, 0x131313, 0x141414, 0x141414, 
*/"
9AZgEK4s,CC Playerdetector Online List,ecco7777,Lua,Friday 20th of June 2025 12:28:36 PM CDT,"p=peripheral.find(""player_detector"")
term.setCursorPos(1,1)
while true do
    term.clear()
    players=p.getOnlinePlayers()
    if players~nil then
        for i=1,#players do
            player=p.getPlayer(players[i])
            term.setCursorPos(1,i)
            term.write(players[i].name)
            term.setCursorPos(30,i)
            term.write(player.dimension)
        end
    end
    sleep(1)
end"
QCGqmt6S,circle,podsolnyxxx,C++,Friday 20th of June 2025 12:00:31 PM CDT,"public class Circle {
    private double radius;

    public Circle(double radius) {
        this.radius = radius;
    }

    public double getArea() {
        return Math.PI * radius * radius;
    }

    public double getCircumference() {
        return 2 * Math.PI * radius;
    }
}






import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print(""Введите радиус круга: "");
        double radius = scanner.nextDouble();

        Circle circle = new Circle(radius);

        System.out.printf(""Площадь круга: %.2f\n"", circle.getArea());
        System.out.printf(""Длина окружности: %.2f\n"", circle.getCircumference());
    }
}
"
zmCCKUwr,pixelart1,RTS_Dmitriy,Lua,Friday 20th of June 2025 11:26:53 AM CDT,"function iff (z)
    if a[z]==1 then
    	turtle.select(1)
    elseif a[z]==2 then
    	turtle.select(2)
    elseif a[z]==3 then
   	 	turtle.select(3)
    elseif a[z]==4 then
    	turtle.select(4)
    elseif a[z]==5 then
    	turtle.select(5)
    elseif a[z]==6 then
    	turtle.select(6)
    end
end

a={1,1,1,1,1,2,1,1,1,1,1 ,
   1,1,1,1,2,2,2,1,1,1,1 ,
   1,1,1,3,3,3,3,3,1,1,1 ,
   1,1,4,4,4,4,4,4,4,1,1}


z=0


turtle.up()
for x=1,2 do
    for y = 1,11 do
        z=z+1
        iff(z)
        turtle.placeDown()
        turtle.forward()
    end
    turtle.turnRight()
    turtle.forward()
    turtle.turnRight()
    turtle.forward()
    for y = 1,11 do
        z=z+1
        iff(z)
        turtle.placeDown()
        turtle.forward()
    end
    turtle.turnLeft()
    turtle.forward()
    turtle.turnLeft()
    turtle.forward()
end"
ZZfFr9Kk,More cursed chess code,shoshta73,C++,Friday 20th of June 2025 11:08:33 AM CDT,"#include ""board.hxx""

#include ""bitboard.hxx""
#include ""color.hxx""

namespace hce {

Board::Board() {
  auto white = Color::eWhite;
  auto black = Color::eBlack;

  pieces[static_cast<std::uint8_t>(white)][static_cast<std::uint8_t>(PieceType::ePawn)] =
      Bitboard{0b0000000'00000000'00000000'00000000'00000000'00000000'11111111'00000000};
  pieces[static_cast<std::uint8_t>(black)][static_cast<std::uint8_t>(PieceType::ePawn)] =
      Bitboard{0b0000000'11111111'00000000'00000000'00000000'00000000'00000000'00000000};

  pieces[static_cast<std::uint8_t>(white)][static_cast<std::uint8_t>(PieceType::eKnight)] =
      Bitboard{0b0000000'00000000'00000000'00000000'000000000'00000000'00000000'01000010};
  pieces[static_cast<std::uint8_t>(black)][static_cast<std::uint8_t>(PieceType::eKnight)] =
      Bitboard{0b01000010'00000000'00000000'00000000'00000000'00000000'00000000'00000000};

  pieces[static_cast<std::uint8_t>(white)][static_cast<std::uint8_t>(PieceType::eBishop)] =
      Bitboard{0b0000000'000000000'00000000'00000000'00000000'00000000'00000000'00100100};
  pieces[static_cast<std::uint8_t>(black)][static_cast<std::uint8_t>(PieceType::eBishop)] =
      Bitboard{0b00100100'00000000'00000000'00000000'00000000'00000000'00000000'00000000};

  pieces[static_cast<std::uint8_t>(white)][static_cast<std::uint8_t>(PieceType::eRook)] =
      Bitboard{0b0000000'000000000'00000000'00000000'00000000'00000000'00000000'10000001};
  pieces[static_cast<std::uint8_t>(black)][static_cast<std::uint8_t>(PieceType::eRook)] =
      Bitboard{0b10000001'00000000'00000000'00000000'00000000'00000000'00000000'00000000};

  pieces[static_cast<std::uint8_t>(white)][static_cast<std::uint8_t>(PieceType::eQueen)] =
      Bitboard{0b0000000'000000000'00000000'00000000'00000000'00000000'00000000'00010000};
  pieces[static_cast<std::uint8_t>(black)][static_cast<std::uint8_t>(PieceType::eQueen)] =
      Bitboard{0b00010000'00000000'00000000'00000000'00000000'00000000'00000000'00000000};

  pieces[static_cast<std::uint8_t>(white)][static_cast<std::uint8_t>(PieceType::eKing)] =
      Bitboard{0b0000000'000000000'00000000'00000000'00000000'00000000'00000000'00001000};
  pieces[static_cast<std::uint8_t>(black)][static_cast<std::uint8_t>(PieceType::eKing)] =
      Bitboard{0b00001000'00000000'00000000'00000000'00000000'00000000'00000000'00000000};
}

Board::~Board() {
}

}  // namespace hce
"
4ZAs1dCw,Credit,massacring,Lua,Friday 20th of June 2025 10:39:25 AM CDT,"local Credit = {}
Credit.SMALL = 1
Credit.MEDIUM = 2
Credit.LARGE = 3
Credit.__index = Credit

function Credit.new(name, values)
    local credit = setmetatable({}, Credit)

    credit.name = name
    credit.values = values or {
        [Credit.LARGE] = { ['id'] = 'minecraft:emerald_block', ['multiplier'] = 9 },
        [Credit.MEDIUM] = { ['id'] = 'minecraft:emerald', ['multiplier'] = 9 },
        [Credit.SMALL] = { ['id'] = 'embercrest:emerald_nugget' },
    }

    return credit
end

local function getRecipyByMultiplier(multiplier)
    if (multiplier == 9) then
        return {
            ""xxx"",
            ""xxx"",
            ""xxx""
        }
    elseif (multiplier == 4) then
        return {
            ""xx"",
            ""xx""
        }
    end
end

function Credit:getRecipe(size, craftDown)
    if (craftDown or size == Credit.SMALL) then return { ""x"" } end
    if (size == Credit.MEDIUM) then
        local multiplier = self.values[Credit.MEDIUM][""multiplier""]
        return getRecipyByMultiplier(multiplier)
    elseif (size == Credit.LARGE) then
        local multiplier = self.values[Credit.LARGE][""multiplier""]
        return getRecipyByMultiplier(multiplier)
    end
end

return Credit"
ttppX0cD,Commons,massacring,Lua,Friday 20th of June 2025 10:38:54 AM CDT,"local Credit = require('Credit')
local Credits = {}
Credits.SMALL = 1
Credits.MEDIUM = 2
Credits.LARGE = 3
Credits.credits = {
    --[""emeralds""] = Credit.new(""emeralds""),
    [""iron""] = Credit.new(""iron"", {
        [Credits.LARGE] = { ['id'] = 'minecraft:iron_block', ['multiplier'] = 9 },
        [Credits.MEDIUM] = { ['id'] = 'minecraft:iron_ingot', ['multiplier'] = 9 },
        [Credits.SMALL] = { ['id'] = 'minecraft:iron_nugget' },
    }),
}
Credits.selectedCredit = nil
Credits.__index = Credits

function Credits:validCurrency(name)
    for _,credit in pairs(Credits.credits) do
        for _,data in pairs(credit) do
            if (name == data[""id""]) then return true end
        end
    end
    return false
end

function Credits:getValueByName(name)
    for _,credit in pairs(Credits.credits) do
        for size,data in pairs(credit.values) do
            if (name == data[""id""]) then
                local multiplier = data[""multiplier""] or 1
                return multiplier ^ (size-1)
            end
        end
    end
end

function Credits:getValueBySize(size)
    if Credits.selectedCredit == nil then return nil end
    if type(size) ~= ""number"" then return nil end
    if size < 1 or size > 3 then return nil end
    local multiplier = Credits.credits[Credits.selectedCredit].values[size][""multiplier""]
    return multiplier ^ (size-1)
end

function Credits:getSizeByName(name)
    for _,credit in pairs(Credits.credits) do
        for size,data in pairs(credit.values) do
            if (name == data[""id""]) then return size end
        end
    end
end

function Credits:getName(itemName)
    for name,credit in pairs(Credits.credits) do
        for _,data in pairs(credit.values) do
            if (itemName == data[""id""]) then return name end
        end
    end
end

function Credits:getCurrentId(size)
    if Credits.selectedCredit == nil then return nil end
    if type(size) ~= ""number"" then return nil end
    if size < 1 or size > 3 then return nil end
    return Credits.credits[Credits.selectedCredit].values[size][""id""]
end

local Score = {}
Score.__index = Score
Score.value = 0
Score.max = 2000
Score.min = 4

function Score:updateScore(num)
    print(""Updating score: "" .. tostring(num))
    Score.value = num
end

function Score:getScore()
    print(""Score is: "" .. tostring(Score.value))
    return Score.value
end

return { Credits = Credits, Score = Score }"
UaEfYSzF,intune-deepinstinct,thekevinkalis,XML,Friday 20th of June 2025 10:25:10 AM CDT,"<?xml version=""1.0"" encoding=""UTF-8""?>
<!DOCTYPE plist PUBLIC ""-//Apple//DTD PLIST 1.0//EN"" ""http://www.apple.com/DTDs/PropertyList-1.0.dtd"">
<plist version=""1.0"">
<dict>
	<key>PayloadContent</key>
	<array>
		<dict>
			<key>FilterDataProviderBundleIdentifier</key>
			<string>com.deepinstinct.DeepInstinctUtility.NetworkExtension</string>
			<key>FilterDataProviderDesignatedRequirement</key>
			<string>identifier ""com.deepinstinct.DeepInstinctUtility.NetworkExtension"" and anchor apple generic and certificate 1[field.1.2.840.113635.100.6.2.6] /* exists */ and certificate leaf[field.1.2.840.113635.100.6.1.13] /* exists */ and certificate leaf[subject.OU] = MV9BR98H24</string>
			<key>FilterGrade</key>
			<string>firewall</string>
			<key>FilterPackets</key>
			<false/>
			<key>FilterSockets</key>
			<true/>
			<key>FilterType</key>
			<string>Plugin</string>
			<key>PayloadDisplayName</key>
			<string>Web Content Filter Payload</string>
			<key>PayloadIdentifier</key>
			<string>283F4BF0-788A-4435-9B62-3E00896358D7</string>
			<key>PayloadOrganization</key>
			<string>JAMF Software</string>
			<key>PayloadType</key>
			<string>com.apple.webcontent-filter</string>
			<key>PayloadUUID</key>
			<string>283F4BF0-788A-4435-9B62-3E00896358D7</string>
			<key>PayloadVersion</key>
			<integer>1</integer>
			<key>PluginBundleID</key>
			<string>com.deepinstinct.DeepInstinctUtility</string>
			<key>UserDefinedName</key>
			<string>Deep Instinct Content Filter</string>
		</dict>
	</array>
	<key>PayloadDescription</key>
	<string></string>
	<key>PayloadDisplayName</key>
	<string>Deep Instinct Content Filter</string>
	<key>PayloadIdentifier</key>
	<string>com.deepinstinct.DeepInstinctUtility</string>
	<key>PayloadScope</key>
	<string>System</string>
	<key>PayloadType</key>
	<string>Configuration</string>
	<key>PayloadUUID</key>
	<string>0cfe157d-2426-447e-827b-bb643211c830</string>
	<key>PayloadVersion</key>
	<integer>1</integer>
</dict>
</plist>"
NrdZKsdb,Rest Stop,tepyotin2,C++,Friday 20th of June 2025 10:20:40 AM CDT,"#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

int l, n, f, b;
ll rest[1000001];
int mx[1000001];
ll ans;

int main(){
	freopen(""reststops.in"", ""r"", stdin);
	freopen(""reststops.out"", ""w"", stdout);
	
	cin >> l >> n >> f >> b;
	int cover = f-b;
	for(int i=0; i<n; i++){
		ll p, t;
		cin >> p >> t;
		rest[p] = t;
	}
	mx[l] = l;
	for(int i=l-1; i>=1; i--){
		if(rest[mx[i+1]]<rest[i]){
			mx[i] = i;
		}else{
			mx[i] = mx[i+1];
		}
	}
	//for(int i=1; i<=l; i++){
		//cout << i << "", "" << mx[i] << "", "" << rest[mx[i]] << '\n';
	//}
	int pos = mx[1];
	int prev = 0;
	while(pos<=l){
		ans+=(cover*rest[pos]*(pos-prev));
		if(pos>=l) break;
		prev = pos;
		pos = mx[pos+1];
	}
	cout << ans << '\n';
	
	return 0;
}
"
0FHiL669,divideandsummarize,tepyotin2,C++,Friday 20th of June 2025 10:18:48 AM CDT,"#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

struct Value{
	ll val;
	int pos;
	bool operator<(const Value &a) const{
		return val<a.val;
	}
};

int t;
set<ll> sum;
int n, q;
vector<ll> pfs;

void Slice(vector<Value> arr){
	//slicing works by dividing the array into left and right based on the mid
	//which is min + max values of the array divided by 2
	Value mid;
	ll add = arr[0].val+arr[arr.size()-1].val;
	if(add%2 == 0){
		mid.val = add/2;
	}else{
		mid.val = (add-1)/2;
	}
	//cout << ""mid value: "" << mid.val << '\n';
	//auto it = upper_bound(arr.begin(), arr.end(), mid, 
	//[](ll v, const Value& check){
		//return v<check.val;
	//});
	auto it = upper_bound(arr.begin(), arr.end(), mid);
	it--;
	//Value res = *it;
	//cout << res.val << "", "" << res.pos << '\n';
	int idx = distance(arr.begin(), it);
	//cout << idx << '\n';
	vector<Value> left;
	left.assign(arr.begin()+0, arr.begin()+idx+1);
	vector<Value> right;
	right.assign(arr.begin()+idx+1, arr.begin()+arr.size());
	if(!left.empty() && left.size()!=arr.size()){
		sum.insert(pfs[left[left.size()-1].pos]-(pfs[left[0].pos-1]));
		Slice(left);
	}
	if(!right.empty() && right.size()!=arr.size()){
		sum.insert(pfs[right[right.size()-1].pos]-(pfs[right[0].pos-1]));
		Slice(right);
	}
	//cout << ""left: "";
	//for(int i=0; i<left.size(); i++){
		//cout << left[i].val << "" "";
	//}
	//cout << '\n';
	//cout << ""right: "";
	//for(int i=0; i<right.size(); i++){
		//cout << right[i].val << "" "";
	//}
	//cout << '\n';
}

int main(){
	//freopen(""divideandsummarize.in"", ""r"", stdin);
	
	cin >> t;
	while(t--){
		//get the array, sort, then send to slicing function and then get sums
		//which can be used to check if each querry is valid and need to use
		//set as the data structure for sums to prevent time limit exceeded
		cin >> n >> q;
		sum.clear();
		vector<Value> arr;
		pfs.resize(n+1, 0);
		ll v;
		ll sum1 = 0;
		for(int i=0; i<n; i++){
			cin >> v;
			sum1+=v;
			arr.push_back({v, 0});
		}
		sum.insert(sum1);
		sort(arr.begin(), arr.end());
		sum1 = 0;
		for(int i=0; i<n; i++){
			sum1+=arr[i].val;
			arr[i].pos = i+1;
			pfs[i+1] = sum1;
			//cout << ""val: "" << arr[i].val << "", pos: "" << arr[i].pos << "", pfs: "" << pfs[i+1] << '\n';
		}
		Slice(arr);
		ll val;
		for(int i=0; i<q; i++){
			cin >> val;
			//auto it = find(sum.begin(), sum.end(), val);
			auto it = sum.find(val);
			if(it!=sum.end()){
				cout << ""Yes"" << '\n';
			}else{
				cout << ""No"" << '\n';
			}
		}
	}
	
	return 0;
}
"
T63aWz2b,Running Miles,tepyotin2,C++,Friday 20th of June 2025 10:09:37 AM CDT,"#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

struct Pos{
	ll val;
	int pos;
};

int t;

int main(){
	freopen(""runningmiles.in"", ""r"", stdin);
	
	cin >> t;
	while(t--){
		int n;
		cin >> n;
		vector<ll> left(n);
		vector<ll> right(n);
		vector<ll> arr(n);
		for(int i=0; i<n; i++){
			cin >> arr[i];
		}
		vector<ll> l(n);
		vector<ll> r(n);
		for(int i=0; i<n; i++){
			l[i] = arr[i]-(n-i-1);
			r[i] = arr[i]-i;
		}
		left[0] = l[0];
		//left[0].pos = 0;
		for(int i=1; i<n; i++){
			left[i] = max(left[i-1], l[i]);
			//if(arr[i]>left[i-1].val){
				//left[i].val = arr[i];
				//left[i].pos = i;
			//}else if(arr[i] == left[i-1].val){
				//left[i].val = arr[i];
				//left[i].pos = i;
			//}else{
				//left[i].val = left[i-1].val;
				//left[i].pos = left[i-1].pos;
			//}
		}
		right[n-1] = r[n-1];
		//right[n-1].pos = n-1;
		for(int i=n-2; i>=0; i--){
			right[i] = max(right[i+1], r[i]);
			//if(arr[i]>right[i+1].val){
				//right[i].val = arr[i];
				//right[i].pos = i;
			//}else if(arr[i] == right[i+1].val){
				//right[i].val = arr[i];
				//right[i].pos = i;
			//}else{
				//right[i].val = right[i+1].val;
				//right[i].pos = right[i+1].pos;
			//}
		}
		ll ans = 0;
		for(int i=1; i<n-1; i++){
			ans = max(ans, left[i-1]+arr[i]+right[i+1]+n-1);
			//cout << ""left[i-1]: "" << left[i-1] << "", arr[i]: "" << arr[i] << "", right[i+1]: "" << right[i+1] << '\n';
			//cout << ""left[i-1].val: "" << left[i-1].val << "", left[i-1].pos: "" << left[i-1].pos << '\n';
			//cout << ""arr[i]: "" << arr[i] << "", i: "" << i << '\n';
			//cout << ""right[i+1].val: "" << right[i+1].val << "", right[i+1].pos: "" << right[i+1].pos << '\n';
			//cout << ""============"" << '\n';
		}
		cout << ans << '\n';
	}
	
	return 0;
}
"
2rkeSQb9,Good Subarray,tepyotin2,C++,Friday 20th of June 2025 10:08:20 AM CDT,"#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

int t;

int main(){
	//freopen(""goodsubarrays.in"", ""r"", stdin);
	
	cin >> t;
	while(t--){
		int n;
		cin >> n;
		string s;
		cin >> s;
		ll sum = 0;
		unordered_map<ll, int> freq;
		freq[0] = 1;
		ll ans = 0;
		for(int i=0; i<n; i++){
			sum+=s[i]-'0';
			ll val = sum-(i+1);
			ans+=freq[val];
			freq[val]++;
		}
		cout << ans << '\n';
	}
	
	return 0;
}
"
vV1DfQCb,Subarray Sum II,tepyotin2,C++,Friday 20th of June 2025 10:06:57 AM CDT,"#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

int n;
ll x;
vector<ll> arr;
ll ans;

int main(){
	//freopen(""subsumsII.in"", ""r"", stdin);
	
	cin >> n >> x;
	arr.resize(n+1);
	for(int i=0; i<n; i++){
		cin >> arr[i];
	}
	ll sum = 0;
	//unordered_map<ll, int> freq;
	map<ll, int> freq;
	//map better performance
	//unordered map result in time limit exceeded
	freq[0] = 1;
	for(int i=0; i<n; i++){
		sum+=arr[i];
		ll val = sum-x;
		ans+=freq[val];
		freq[sum]++;
	}
	cout << ans << '\n';
	
	return 0;
}
"
Lt3F3Jc2,Yet Another Tournament,tepyotin2,C++,Friday 20th of June 2025 10:05:41 AM CDT,"#include <bits/stdc++.h>

using namespace std;

int t;

int main(){
	//freopen(""anothertournament.in"", ""r"", stdin);
	
	cin >> t;
	int n, m;
	while(t--){
		cin >> n >> m;
		vector<int> og(n);
		vector<int> sorted(n);
		for(int i=0; i<n; i++){
			cin >> og[i];
			sorted[i] = og[i];
		}
		sort(sorted.begin(), sorted.end());
		int sum = 0;
		int mxv = 0;
		int wins = 0;
		for(int i=0; i<n; i++){
			sum+=sorted[i];
			if(sum>m){
				sum-=sorted[i];
				break;
			}else{
				mxv = sorted[i];
				wins++;
			}
		}
		if(wins == n){
			cout << 1 << '\n';
			continue;
		}
		//cout << ""wins: "" << wins << "", mxv: "" << mxv << '\n';
		if((sum-mxv)+og[wins]<=m){
			cout << n-wins << '\n';
		}else{
			cout << (n-wins)+1 << '\n';
		}
	}
	
	return 0;
}
"
HvdDEYY7,Rectangular Pasture,tepyotin2,C++,Friday 20th of June 2025 10:04:40 AM CDT,"#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

struct Coor{
	ll x, y;
	ll nx, ny;
	//bool operator<(const Coor &a) const{
		//if(y==a.y){
			//return x<a.x;
		//}
		//return y<a.y;
	//}
};

ll n;
vector<Coor> cd;
vector<vector<ll>> pfs;
ll ans;

bool comp1(Coor a, Coor b){
	if(a.y==b.y){
		return a.x<a.y;
	}
	return a.y<b.y;
}

bool comp2(Coor a, Coor b){
	if(a.x==b.x){
		return a.y<b.y;
	}
	return a.x<b.x;
}

int main(){
	//freopen(""rectangular.in"", ""r"", stdin);
	
	cin >> n;
	cd.resize(n+1);
	pfs.resize(n+1, vector<ll>(n+1, 0));
	for(ll i=1; i<=n; i++){
		cin >> cd[i].x >> cd[i].y;
	}
	sort(cd.begin(), cd.end(), comp2);
	for(ll i=1; i<=n; i++){
		//cout << cd[i].x << "", "" << cd[i].y << '\n';
		cd[i].nx = i;
	}
	sort(cd.begin(), cd.end(), comp1);
	for(ll i=1; i<=n; i++){
		//cout << cd[i].x << "", "" << cd[i].y << '\n';
		cd[i].ny = i;
		//cout << cd[i].nx << "", "" << cd[i].ny << '\n';
		pfs[cd[i].nx][cd[i].ny]++;
	}
	for(ll i=1; i<=n; i++){
		for(ll j=1; j<=n; j++){
			pfs[i][j] = pfs[i][j]+pfs[i-1][j]+pfs[i][j-1]-pfs[i-1][j-1];
			//cout << pfs[i][j] << "" "";
		}
		//cout << '\n';
	}
	for(ll i=1; i<=n; i++){
		for(ll j=i+1; j<=n; j++){
			ll x1 = cd[i].nx;
			ll y1 = cd[i].ny;
			ll x2 = cd[j].nx;
			ll y2 = cd[j].ny;
			ll mnx = min(x1, x2);
			ll mny = min(y1, y2);
			ll mxx = max(x1, x2);
			ll mxy = max(y1, y2);
			ll size_left = pfs[mxx][mny]-pfs[mxx][0]-pfs[mnx-1][mny]+pfs[0][mny-1];
			ll size_right = pfs[mxx][n]-pfs[mxx][mxy-1]-pfs[mnx-1][n]+pfs[mnx-1][mxy-1];
			//cout << ""mn: "" << mnx << "", "" << mny << '\n';
			//cout << ""mx: "" << mxx << "", "" << mxy << '\n';
			//cout << ""size_left: "" << size_left << "", size_right: "" << size_right << '\n';
			//cout << ""size_right: "" << size_right << 
			ans+=(size_left*size_right);
		}
	}
	cout << ans+n+1 << '\n';
	
	return 0;
}
"
WzuTqEzS,Dumps,LVL23HT,CSS,Friday 20th of June 2025 10:04:16 AM CDT,".
├── OSCP ALL IN BUNDLE
│   ├── OSCP 33VM_Machines and Write up
│   │   ├── OSCP Machines and Write up
│   │   │   ├── OSCP write up latest
│   │   │   │   └── OSCP write up latest
│   │   │   │       ├── 101-tomcat_25.pdf
│   │   │   │       ├── 101-tomcat_root.pdf
│   │   │   │       ├── 107-Moosefs_20_root.txt
│   │   │   │       ├── 107-moosefs_20_user.pdf
│   │   │   │       ├── 109-theseus.txt
│   │   │   │       ├── 112-Orchard.txt
│   │   │   │       ├── 113-phplist.txt
│   │   │   │       ├── 192.168.33.55
│   │   │   │       │   ├── 1 nmap.png
│   │   │   │       │   ├── 2 go buster.png
│   │   │   │       │   ├── 3 wed dav pass.png
│   │   │   │       │   ├── 4 crack htpasswd.png
│   │   │   │       │   ├── 5 upload nc exe to webdav.png
│   │   │   │       │   ├── 6 nc exe uploaded.png
│   │   │   │       │   └── EoP and DLL.png
│   │   │   │       ├── 200-Perseus.txt
│   │   │   │       ├── 25point-tomcat.pdf
│   │   │   │       ├── 80-EyesOfNetwork_20_user.txt
│   │   │   │       ├── 80-OSCommerce.txt
│   │   │   │       ├── 85-Winpower.txt
│   │   │   │       ├── 86-pic-a-point.txt
│   │   │   │       ├── 86e-unlocked.pdf
│   │   │   │       ├── 87-DiskSavvy
│   │   │   │       │   ├── [Content_Types].xml
│   │   │   │       │   ├── _rels
│   │   │   │       │   ├── docProps
│   │   │   │       │   │   ├── app.xml
│   │   │   │       │   │   └── core.xml
│   │   │   │       │   └── word
│   │   │   │       │       ├── _rels
│   │   │   │       │       │   └── document.xml.rels
│   │   │   │       │       ├── document.xml
│   │   │   │       │       ├── fontTable.xml
│   │   │   │       │       ├── media
│   │   │   │       │       │   ├── image1.png
│   │   │   │       │       │   ├── image2.png
│   │   │   │       │       │   ├── image3.png
│   │   │   │       │       │   ├── image4.png
│   │   │   │       │       │   ├── image5.png
│   │   │   │       │       │   ├── image6.png
│   │   │   │       │       │   └── image7.png
│   │   │   │       │       ├── settings.xml
│   │   │   │       │       ├── styles.xml
│   │   │   │       │       ├── theme
│   │   │   │       │       │   └── theme1.xml
│   │   │   │       │       └── webSettings.xml
│   │   │   │       ├── 87-DiskSavvy.docx
│   │   │   │       ├── 87-DiskSavvy.xml
│   │   │   │       ├── A1.OSCP_EXAM_MACHINE_202009.pdf
│   │   │   │       ├── A3.Phplist&orchard&tomcat&moosefs
│   │   │   │       │   └── Phplist, orchard, tomcat and moosefs
│   │   │   │       │       ├── 25point-tomcat.pdf
│   │   │   │       │       ├── Orchard.jpg
│   │   │   │       │       ├── Phplist1.jpg
│   │   │   │       │       ├── Phplist2.jpg
│   │   │   │       │       └── moosefs_20_point_.pdf
│   │   │   │       ├── A4.OSCP-OS-Exam-Report-LibSSH&PlaySMS.pdf
│   │   │   │       ├── Devbox.txt
│   │   │   │       ├── Gitstack.txt
│   │   │   │       ├── Moosefs-root.txt
│   │   │   │       ├── Perseus.png
│   │   │   │       ├── Phplist -final.txt
│   │   │   │       ├── Phplist, orchard, tomcat and moosefs
│   │   │   │       │   ├── 25point-tomcat.pdf
│   │   │   │       │   ├── Orchard.jpg
│   │   │   │       │   ├── Phplist1.jpg
│   │   │   │       │   ├── Phplist2.jpg
│   │   │   │       │   ├── moosefs_20_point_.pdf
│   │   │   │       │   └── theasues.jpg
│   │   │   │       ├── Phplist, orchard, tomcat and moosefs 2
│   │   │   │       │   ├── 25point-tomcat.pdf
│   │   │   │       │   ├── Orchard.jpg
│   │   │   │       │   ├── Phplist1.jpg
│   │   │   │       │   ├── Phplist2.jpg
│   │   │   │       │   └── moosefs_20_point_.pdf
│   │   │   │       ├── THESEUS-U-1-unlocked.pdf
│   │   │   │       ├── UnknownIP-FileThingie.txt
│   │   │   │       ├── Updated Moosefs root.txt
│   │   │   │       ├── clorine.txt
│   │   │   │       ├── eyesofnetwork_ updated.txt
│   │   │   │       ├── moosefs_20_point__1.pdf
│   │   │   │       ├── october2.pdf
│   │   │   │       ├── orchard.md
│   │   │   │       ├── tiki tiki
│   │   │   │       │   ├── 1.png
│   │   │   │       │   ├── 2.png
│   │   │   │       │   └── 3.png
│   │   │   │       └── tomcat_root.jpg
│   │   │   └── OSCP_Exam_Leaks-33VMs
│   │   │       ├── OSCP_Exam_Leaks-33VMs
│   │   │       │   ├── Admin-pc 55 - Linux
│   │   │       │   │   ├── 1.png
│   │   │       │   │   └── 2.png
│   │   │       │   ├── Apache Tomcat 101 - Linux
│   │   │       │   │   ├── 25point-tomcat.pdf
│   │   │       │   │   └── tomcat_root.jpg
│   │   │       │   ├── Ashley Brown 161 - Windows
│   │   │       │   │   ├── 2.PNG
│   │   │       │   │   ├── 3.PNG
│   │   │       │   │   └── read.txt
│   │   │       │   ├── Asystole 105 - Windows
│   │   │       │   │   └── Asystole.txt
│   │   │       │   ├── Bengine 85 - Windows
│   │   │       │   │   └── blogengine.txt
│   │   │       │   ├── BobTheBuilder 150 - Linux
│   │   │       │   │   └── bobthebuilder.txt
│   │   │       │   ├── Codiod 55 - Windows
│   │   │       │   │   ├── 1.PNG
│   │   │       │   │   ├── 2.PNG
│   │   │       │   │   ├── 3.PNG
│   │   │       │   │   ├── 4.PNG
│   │   │       │   │   └── 5.PNG
│   │   │       │   ├── DiskSavvy 87 - Windows
│   │   │       │   │   ├── [Content_Types].xml
│   │   │       │   │   ├── _rels
│   │   │       │   │   ├── docProps
│   │   │       │   │   │   ├── app.xml
│   │   │       │   │   │   └── core.xml
│   │   │       │   │   └── word
│   │   │       │   │       ├── _rels
│   │   │       │   │       │   └── document.xml.rels
│   │   │       │   │       ├── document.xml
│   │   │       │   │       ├── fontTable.xml
│   │   │       │   │       ├── media
│   │   │       │   │       │   ├── image1.png
│   │   │       │   │       │   ├── image2.png
│   │   │       │   │       │   ├── image3.png
│   │   │       │   │       │   ├── image4.png
│   │   │       │   │       │   ├── image5.png
│   │   │       │   │       │   ├── image6.png
│   │   │       │   │       │   └── image7.png
│   │   │       │   │       ├── settings.xml
│   │   │       │   │       ├── styles.xml
│   │   │       │   │       ├── theme
│   │   │       │   │       │   └── theme1.xml
│   │   │       │   │       └── webSettings.xml
│   │   │       │   ├── EDBMACHINE 218 - Windows
│   │   │       │   │   └── README.txt
│   │   │       │   ├── Ekzameno 67 - Linux
│   │   │       │   │   ├── 1 nmap scan.png
│   │   │       │   │   ├── 2 limited shell.png
│   │   │       │   │   ├── 4 sudo l.png
│   │   │       │   │   ├── 5 sudo -l.png
│   │   │       │   │   └── 67 write.docx
│   │   │       │   ├── Harakiri 81 - Linux
│   │   │       │   │   └── README.txt
│   │   │       │   ├── HomeStudy 42 - Windows
│   │   │       │   │   └── homestudy.txt.txt
│   │   │       │   ├── LazyB 41 - Linux
│   │   │       │   │   └── lazyb.txt
│   │   │       │   ├── Locutus 161 - Windows
│   │   │       │   │   ├── 1.png
│   │   │       │   │   ├── 2.png
│   │   │       │   │   ├── 3.png
│   │   │       │   │   └── README.txt
│   │   │       │   ├── Moosefs 107 - Linux
│   │   │       │   │   ├── Moosefs-root.txt
│   │   │       │   │   ├── Updated Moosefs root.txt
│   │   │       │   │   └── empusa_20_point_.pdf
│   │   │       │   ├── Nagy 216 - Linux
│   │   │       │   │   ├── aakashack_blogspot_com_2019_01_hacking_nagios_xi_rce_vulnera.pdf
│   │   │       │   │   ├── nagios.txt
│   │   │       │   │   ├── nagiosxi-root-rce-exploit-master
│   │   │       │   │   │   └── nagiosxi-root-rce-exploit-master
│   │   │       │   │   │       ├── README.md
│   │   │       │   │   │       └── exploit.php
│   │   │       │   │   └── nagiosxi-root-rce-exploit-master.zip
│   │   │       │   ├── OSCP_Exam_Leaks-33VMs
│   │   │       │   │   ├── Admin-pc 55 - Linux
│   │   │       │   │   │   ├── 1.png
│   │   │       │   │   │   └── 2.png
│   │   │       │   │   ├── Apache Tomcat 101 - Linux
│   │   │       │   │   │   ├── 25point-tomcat.pdf
│   │   │       │   │   │   └── tomcat_root.jpg
│   │   │       │   │   ├── Ashley Brown 161 - Windows
│   │   │       │   │   │   ├── 2.PNG
│   │   │       │   │   │   ├── 3.PNG
│   │   │       │   │   │   └── read.txt
│   │   │       │   │   ├── Asystole 105 - Windows
│   │   │       │   │   │   └── Asystole.txt
│   │   │       │   │   ├── Bengine 85 - Windows
│   │   │       │   │   │   └── blogengine.txt
│   │   │       │   │   ├── BobTheBuilder 150 - Linux
│   │   │       │   │   │   └── bobthebuilder.txt
│   │   │       │   │   ├── Codiod 55 - Windows
│   │   │       │   │   │   ├── 1.PNG
│   │   │       │   │   │   ├── 2.PNG
│   │   │       │   │   │   ├── 3.PNG
│   │   │       │   │   │   ├── 4.PNG
│   │   │       │   │   │   └── 5.PNG
│   │   │       │   │   ├── DiskSavvy 87 - Windows
│   │   │       │   │   │   ├── [Content_Types].xml
│   │   │       │   │   │   ├── _rels
│   │   │       │   │   │   ├── docProps
│   │   │       │   │   │   │   ├── app.xml
│   │   │       │   │   │   │   └── core.xml
│   │   │       │   │   │   └── word
│   │   │       │   │   │       ├── _rels
│   │   │       │   │   │       │   └── document.xml.rels
│   │   │       │   │   │       ├── document.xml
│   │   │       │   │   │       ├── fontTable.xml
│   │   │       │   │   │       ├── media
│   │   │       │   │   │       │   ├── image1.png
│   │   │       │   │   │       │   ├── image2.png
│   │   │       │   │   │       │   ├── image3.png
│   │   │       │   │   │       │   ├── image4.png
│   │   │       │   │   │       │   ├── image5.png
│   │   │       │   │   │       │   ├── image6.png
│   │   │       │   │   │       │   └── image7.png
│   │   │       │   │   │       ├── settings.xml
│   │   │       │   │   │       ├── styles.xml
│   │   │       │   │   │       ├── theme
│   │   │       │   │   │       │   └── theme1.xml
│   │   │       │   │   │       └── webSettings.xml
│   │   │       │   │   ├── EDBMACHINE 218 - Windows
│   │   │       │   │   │   └── README.txt
│   │   │       │   │   ├── Ekzameno 67 - Linux
│   │   │       │   │   │   ├── 1 nmap scan.png
│   │   │       │   │   │   ├── 2 limited shell.png
│   │   │       │   │   │   ├── 4 sudo l.png
│   │   │       │   │   │   ├── 5 sudo -l.png
│   │   │       │   │   │   └── 67 write.docx
│   │   │       │   │   ├── Harakiri 81 - Linux
│   │   │       │   │   │   └── README.txt
│   │   │       │   │   ├── HomeStudy 42 - Windows
│   │   │       │   │   │   └── homestudy.txt.txt
│   │   │       │   │   ├── LazyB 41 - Linux
│   │   │       │   │   │   └── lazyb.txt
│   │   │       │   │   ├── Locutus 161 - Windows
│   │   │       │   │   │   ├── 1.png
│   │   │       │   │   │   ├── 2.png
│   │   │       │   │   │   ├── 3.png
│   │   │       │   │   │   └── README.txt
│   │   │       │   │   ├── Moosefs 107 - Linux
│   │   │       │   │   │   ├── Moosefs-root.txt
│   │   │       │   │   │   ├── Updated Moosefs root.txt
│   │   │       │   │   │   └── empusa_20_point_.pdf
│   │   │       │   │   ├── Nagy 216 - Linux
│   │   │       │   │   │   ├── aakashack_blogspot_com_2019_01_hacking_nagios_xi_rce_vulnera.pdf
│   │   │       │   │   │   ├── nagios.txt
│   │   │       │   │   │   ├── nagiosxi-root-rce-exploit-master
│   │   │       │   │   │   └── nagiosxi-root-rce-exploit-master.zip
│   │   │       │   │   ├── October 43_55 - Linux
│   │   │       │   │   │   ├── 1.png
│   │   │       │   │   │   ├── 2.png
│   │   │       │   │   │   ├── 3.png
│   │   │       │   │   │   ├── 4.4.png
│   │   │       │   │   │   ├── 4.png
│   │   │       │   │   │   ├── 5.png
│   │   │       │   │   │   ├── october.md
│   │   │       │   │   │   └── october2.pdf
│   │   │       │   │   ├── Orchard 112 - Windows
│   │   │       │   │   │   ├── Orchard.jpg
│   │   │       │   │   │   ├── orchard.txt
│   │   │       │   │   │   └── orchard_1.txt
│   │   │       │   │   ├── PHPlist 113 - Linux
│   │   │       │   │   │   ├── Phplist -final.txt
│   │   │       │   │   │   ├── Phplist1.jpg
│   │   │       │   │   │   └── Phplist2.jpg
│   │   │       │   │   ├── Ph33r 161 - Linux
│   │   │       │   │   │   └── 1.png
│   │   │       │   │   ├── Rocinante 82 - Linux
│   │   │       │   │   │   └── README.txt
│   │   │       │   │   ├── Socket_WP 46 - Windows
│   │   │       │   │   │   └── README.txt
│   │   │       │   │   ├── Textian 44 - Linux
│   │   │       │   │   │   ├── 1.png
│   │   │       │   │   │   ├── 2.png
│   │   │       │   │   │   ├── 3.png
│   │   │       │   │   │   ├── 4.png
│   │   │       │   │   │   ├── 5.png
│   │   │       │   │   │   ├── README.txt
│   │   │       │   │   │   └── playsms.txt
│   │   │       │   │   ├── Thelongnight 95 - Linux
│   │   │       │   │   │   └── thenightlong.md
│   │   │       │   │   ├── Theseus 109 - Windows
│   │   │       │   │   │   ├── THESEUS-U-1-unlocked.pdf
│   │   │       │   │   │   ├── Theseus.png
│   │   │       │   │   │   └── theasues.jpg
│   │   │       │   │   ├── Tiki 67 - Windows
│   │   │       │   │   │   ├── 1.png
│   │   │       │   │   │   ├── 2.png
│   │   │       │   │   │   ├── 3.png
│   │   │       │   │   │   └── README.txt
│   │   │       │   │   ├── V1RUS 84 - Windows
│   │   │       │   │   │   └── Gitstack.txt
│   │   │       │   │   ├── Vulcan 53 - Linux
│   │   │       │   │   │   ├── README.txt
│   │   │       │   │   │   └── vulcano.pdf
│   │   │       │   │   ├── Webpack 96 - Linux
│   │   │       │   │   │   └── FuelCMS.txt
│   │   │       │   │   └── Z-MISC
│   │   │       │   │       ├── 00-A4.OSCP-OS-Exam-Report-LibSSH&PlaySMS-README.txt
│   │   │       │   │       ├── 00-A4.OSCP-OS-Exam-Report-LibSSH&PlaySMS.pdf
│   │   │       │   │       ├── 86e-unlocked.pdf
│   │   │       │   │       ├── A1.OSCP_EXAM_MACHINE_20200708.pdf
│   │   │       │   │       ├── A2.PWKLabs.pdf
│   │   │       │   │       ├── Archive
│   │   │       │   │       │   ├── 85-Winpower.txt
│   │   │       │   │       │   ├── 86-pic-a-point.txt
│   │   │       │   │       │   ├── Devbox.txt
│   │   │       │   │       │   ├── Perseus - Nostromo.png
│   │   │       │   │       │   ├── clorine.txt
│   │   │       │   │       │   └── eyesofnetwork_ updated.txt
│   │   │       │   │       ├── OSCP Zhenti Leaked-Currently Removed _ InfoSec Learning.html.pdf
│   │   │       │   │       ├── OSCP_Aug2020_exam leak
│   │   │       │   │       │   ├── 192.168.1.161
│   │   │       │   │       │   │   ├── 1 nmap and vuln.png
│   │   │       │   │       │   │   ├── 2 eternalbluie not patch.png
│   │   │       │   │       │   │   └── 3 root proof.png
│   │   │       │   │       │   ├── BoF
│   │   │       │   │       │   │   ├── 1.png
│   │   │       │   │       │   │   ├── 2.png
│   │   │       │   │       │   │   ├── image0-1.jpg
│   │   │       │   │       │   │   ├── image0-3.jpg
│   │   │       │   │       │   │   ├── image0-4.jpg
│   │   │       │   │       │   │   ├── image0-5.jpg
│   │   │       │   │       │   │   ├── image0.jpg
│   │   │       │   │       │   │   └── image0.png
│   │   │       │   │       │   ├── Exam Outline.txt
│   │   │       │   │       │   ├── Filethinghie-pick-a-point.pdf
│   │   │       │   │       │   ├── OSCP Report Guide.pdf
│   │   │       │   │       │   ├── OSCP-OS-XXXXX-Exam-Report.pdf
│   │   │       │   │       │   ├── PWKLabs.pdf
│   │   │       │   │       │   ├── Ph33r
│   │   │       │   │       │   │   ├── 2(2).png
│   │   │       │   │       │   │   └── 2.png
│   │   │       │   │       │   ├── Public Network.docx
│   │   │       │   │       │   ├── Solutions
│   │   │       │   │       │   │   ├── 11.PNG
│   │   │       │   │       │   │   ├── 12.PNG
│   │   │       │   │       │   │   ├── 12gfgf.PNG
│   │   │       │   │       │   │   ├── 13.PNG
│   │   │       │   │       │   │   ├── 14.PNG
│   │   │       │   │       │   │   ├── 15.PNG
│   │   │       │   │       │   │   ├── 16.PNG
│   │   │       │   │       │   │   ├── 16fggf.PNG
│   │   │       │   │       │   │   ├── 17.PNG
│   │   │       │   │       │   │   ├── 17gfdgf.PNG
│   │   │       │   │       │   │   ├── 18.PNG
│   │   │       │   │       │   │   ├── 18fggd.PNG
│   │   │       │   │       │   │   ├── 19.PNG
│   │   │       │   │       │   │   ├── 1ffgd.PNG
│   │   │       │   │       │   │   ├── 2.PNG
│   │   │       │   │       │   │   ├── 20.PNG
│   │   │       │   │       │   │   ├── 21.PNG
│   │   │       │   │       │   │   ├── 22.PNG
│   │   │       │   │       │   │   ├── 24.PNG
│   │   │       │   │       │   │   ├── 25.PNG
│   │   │       │   │       │   │   ├── 26.PNG
│   │   │       │   │       │   │   ├── 27.PNG
│   │   │       │   │       │   │   ├── 28.PNG
│   │   │       │   │       │   │   ├── 2fdga.PNG
│   │   │       │   │       │   │   ├── 3.PNG
│   │   │       │   │       │   │   ├── 3fga.PNG
│   │   │       │   │       │   │   ├── 4fga.PNG
│   │   │       │   │       │   │   ├── 5fgga.PNG
│   │   │       │   │       │   │   ├── 6.PNG
│   │   │       │   │       │   │   ├── 6gfag.PNG
│   │   │       │   │       │   │   ├── 7wer.PNG
│   │   │       │   │       │   │   ├── 8.PNG
│   │   │       │   │       │   │   ├── 9.PNG
│   │   │       │   │       │   │   ├── 9r.PNG
│   │   │       │   │       │   │   └── New folder (2)
│   │   │       │   │       │   │       ├── 01.PNG
│   │   │       │   │       │   │       ├── 02.PNG
│   │   │       │   │       │   │       ├── 03.PNG
│   │   │       │   │       │   │       ├── 04.PNG
│   │   │       │   │       │   │       ├── 05.PNG
│   │   │       │   │       │   │       ├── 06.PNG
│   │   │       │   │       │   │       ├── 07.PNG
│   │   │       │   │       │   │       ├── 08.PNG
│   │   │       │   │       │   │       ├── 09.PNG
│   │   │       │   │       │   │       ├── 101.PNG
│   │   │       │   │       │   │       ├── 11.PNG
│   │   │       │   │       │   │       ├── 12.PNG
│   │   │       │   │       │   │       ├── 13.PNG
│   │   │       │   │       │   │       ├── 14.PNG
│   │   │       │   │       │   │       ├── 15.PNG
│   │   │       │   │       │   │       ├── 16.PNG
│   │   │       │   │       │   │       ├── 17.PNG
│   │   │       │   │       │   │       ├── 18.PNG
│   │   │       │   │       │   │       ├── 19.PNG
│   │   │       │   │       │   │       ├── 20.PNG
│   │   │       │   │       │   │       ├── 21.PNG
│   │   │       │   │       │   │       └── 22.PNG
│   │   │       │   │       │   ├── XAMPP
│   │   │       │   │       │   │   ├── 1 nmap.png
│   │   │       │   │       │   │   ├── 2 go buster.png
│   │   │       │   │       │   │   ├── 3 wed dav pass.png
│   │   │       │   │       │   │   ├── 4 crack htpasswd.png
│   │   │       │   │       │   │   ├── 5 upload nc exe to webdav.png
│   │   │       │   │       │   │   ├── 6 nc exe uploaded.png
│   │   │       │   │       │   │   ├── EoP and DLL.png
│   │   │       │   │       │   │   └── os_commerce.pdf
│   │   │       │   │       │   ├── offsecsmtp
│   │   │       │   │       │   │   ├── 3.png
│   │   │       │   │       │   │   └── 4.png
│   │   │       │   │       │   ├── oscp-solutions---16-machines-unlocked.pdf
│   │   │       │   │       │   └── other OSCP Machines res
│   │   │       │   │       │       └── OSCP Alpha.pdf
│   │   │       │   │       ├── OutOfTheBox.zip
│   │   │       │   │       ├── PWK-Example-Report-v1.pdf
│   │   │       │   │       ├── TJ-Pentest-Template-1.0.jex
│   │   │       │   │       ├── UCAL.zip
│   │   │       │   │       ├── lab
│   │   │       │   │       │   ├── 10.1.1.1
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.1.1.246
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.1.1.27
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.10
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.101
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.115
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.116
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.120
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.121
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.122
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.123
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.128
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.13
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.133
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.136
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.14
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.141
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.146
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.20
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.209
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.21
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.217
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.22
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.222
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.223
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.226
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.227
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.229
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.231
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.234
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.237
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.24
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.251
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.252
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.31
│   │   │       │   │       │   │   ├── adodb.txt
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.35
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.39
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.5
│   │   │       │   │       │   │   ├── bank.txt
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.50
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.71
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.72
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.73
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.75
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.11.1.8
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.2.2.150
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.2.2.218
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.2.2.22
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.2.2.23
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.2.2.31
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.2.2.86
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.3.3.14
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.3.3.190
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.3.3.201
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.3.3.34
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.3.3.42
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   ├── 10.3.3.47
│   │   │       │   │       │   │   └── command.txt
│   │   │       │   │       │   └── 10.3.3.88
│   │   │       │   │       │       └── command.txt
│   │   │       │   │       ├── snowscan_io_htb_writeup_redcross.pdf
│   │   │       │   │       └── unreal tournament.pdf
│   │   │       │   ├── October 43_55 - Linux
│   │   │       │   │   ├── 1.png
│   │   │       │   │   ├── 2.png
│   │   │       │   │   ├── 3.png
│   │   │       │   │   ├── 4.4.png
│   │   │       │   │   ├── 4.png
│   │   │       │   │   ├── 5.png
│   │   │       │   │   ├── october.md
│   │   │       │   │   └── october2.pdf
│   │   │       │   ├── Orchard 112 - Windows
│   │   │       │   │   ├── Orchard.jpg
│   │   │       │   │   ├── orchard.txt
│   │   │       │   │   └── orchard_1.txt
│   │   │       │   ├── PHPlist 113 - Linux
│   │   │       │   │   ├── Phplist -final.txt
│   │   │       │   │   ├── Phplist1.jpg
│   │   │       │   │   └── Phplist2.jpg
│   │   │       │   ├── Ph33r 161 - Linux
│   │   │       │   │   └── 1.png
│   │   │       │   ├── Rocinante 82 - Linux
│   │   │       │   │   └── README.txt
│   │   │       │   ├── Socket_WP 46 - Windows
│   │   │       │   │   └── README.txt
│   │   │       │   ├── Textian 44 - Linux
│   │   │       │   │   ├── 1.png
│   │   │       │   │   ├── 2.png
│   │   │       │   │   ├── 3.png
│   │   │       │   │   ├── 4.png
│   │   │       │   │   ├── 5.png
│   │   │       │   │   ├── README.txt
│   │   │       │   │   └── playsms.txt
│   │   │       │   ├── Thelongnight 95 - Linux
│   │   │       │   │   └── thenightlong.md
│   │   │       │   ├── Theseus 109 - Windows
│   │   │       │   │   ├── THESEUS-U-1-unlocked.pdf
│   │   │       │   │   ├── Theseus.png
│   │   │       │   │   └── theasues.jpg
│   │   │       │   ├── Tiki 67 - Windows
│   │   │       │   │   ├── 1.png
│   │   │       │   │   ├── 2.png
│   │   │       │   │   ├── 3.png
│   │   │       │   │   └── README.txt
│   │   │       │   ├── V1RUS 84 - Windows
│   │   │       │   │   └── Gitstack.txt
│   │   │       │   ├── Vulcan 53 - Linux
│   │   │       │   │   ├── README.txt
│   │   │       │   │   └── vulcano.pdf
│   │   │       │   ├── Webpack 96 - Linux
│   │   │       │   │   └── FuelCMS.txt
│   │   │       │   └── Z-MISC
│   │   │       │       ├── 00-A4.OSCP-OS-Exam-Report-LibSSH&PlaySMS-README.txt
│   │   │       │       ├── 00-A4.OSCP-OS-Exam-Report-LibSSH&PlaySMS.pdf
│   │   │       │       ├── 86e-unlocked.pdf
│   │   │       │       ├── A1.OSCP_EXAM_MACHINE_20200708.pdf
│   │   │       │       ├── A2.PWKLabs.pdf
│   │   │       │       ├── Archive
│   │   │       │       │   ├── 85-Winpower.txt
│   │   │       │       │   ├── 86-pic-a-point.txt
│   │   │       │       │   ├── Devbox.txt
│   │   │       │       │   ├── Perseus - Nostromo.png
│   │   │       │       │   ├── clorine.txt
│   │   │       │       │   └── eyesofnetwork_ updated.txt
│   │   │       │       ├── OSCP Zhenti Leaked-Currently Removed _ InfoSec Learning.html.pdf
│   │   │       │       ├── OSCP_Aug2020_exam leak
│   │   │       │       │   ├── 192.168.1.161
│   │   │       │       │   │   ├── 1 nmap and vuln.png
│   │   │       │       │   │   ├── 2 eternalbluie not patch.png
│   │   │       │       │   │   └── 3 root proof.png
│   │   │       │       │   ├── BoF
│   │   │       │       │   │   ├── 1.png
│   │   │       │       │   │   ├── 2.png
│   │   │       │       │   │   ├── image0-1.jpg
│   │   │       │       │   │   ├── image0-3.jpg
│   │   │       │       │   │   ├── image0-4.jpg
│   │   │       │       │   │   ├── image0-5.jpg
│   │   │       │       │   │   ├── image0.jpg
│   │   │       │       │   │   └── image0.png
│   │   │       │       │   ├── Exam Outline.txt
│   │   │       │       │   ├── Filethinghie-pick-a-point.pdf
│   │   │       │       │   ├── OSCP Report Guide.pdf
│   │   │       │       │   ├── OSCP-OS-XXXXX-Exam-Report.pdf
│   │   │       │       │   ├── PWKLabs.pdf
│   │   │       │       │   ├── Ph33r
│   │   │       │       │   │   ├── 2(2).png
│   │   │       │       │   │   └── 2.png
│   │   │       │       │   ├── Public Network.docx
│   │   │       │       │   ├── Solutions
│   │   │       │       │   │   ├── 11.PNG
│   │   │       │       │   │   ├── 12.PNG
│   │   │       │       │   │   ├── 12gfgf.PNG
│   │   │       │       │   │   ├── 13.PNG
│   │   │       │       │   │   ├── 14.PNG
│   │   │       │       │   │   ├── 15.PNG
│   │   │       │       │   │   ├── 16.PNG
│   │   │       │       │   │   ├── 16fggf.PNG
│   │   │       │       │   │   ├── 17.PNG
│   │   │       │       │   │   ├── 17gfdgf.PNG
│   │   │       │       │   │   ├── 18.PNG
│   │   │       │       │   │   ├── 18fggd.PNG
│   │   │       │       │   │   ├── 19.PNG
│   │   │       │       │   │   ├── 1ffgd.PNG
│   │   │       │       │   │   ├── 2.PNG
│   │   │       │       │   │   ├── 20.PNG
│   │   │       │       │   │   ├── 21.PNG
│   │   │       │       │   │   ├── 22.PNG
│   │   │       │       │   │   ├── 24.PNG
│   │   │       │       │   │   ├── 25.PNG
│   │   │       │       │   │   ├── 26.PNG
│   │   │       │       │   │   ├── 27.PNG
│   │   │       │       │   │   ├── 28.PNG
│   │   │       │       │   │   ├── 2fdga.PNG
│   │   │       │       │   │   ├── 3.PNG
│   │   │       │       │   │   ├── 3fga.PNG
│   │   │       │       │   │   ├── 4fga.PNG
│   │   │       │       │   │   ├── 5fgga.PNG
│   │   │       │       │   │   ├── 6.PNG
│   │   │       │       │   │   ├── 6gfag.PNG
│   │   │       │       │   │   ├── 7wer.PNG
│   │   │       │       │   │   ├── 8.PNG
│   │   │       │       │   │   ├── 9.PNG
│   │   │       │       │   │   ├── 9r.PNG
│   │   │       │       │   │   └── New folder (2)
│   │   │       │       │   │       ├── 01.PNG
│   │   │       │       │   │       ├── 02.PNG
│   │   │       │       │   │       ├── 03.PNG
│   │   │       │       │   │       ├── 04.PNG
│   │   │       │       │   │       ├── 05.PNG
│   │   │       │       │   │       ├── 06.PNG
│   │   │       │       │   │       ├── 07.PNG
│   │   │       │       │   │       ├── 08.PNG
│   │   │       │       │   │       ├── 09.PNG
│   │   │       │       │   │       ├── 101.PNG
│   │   │       │       │   │       ├── 11.PNG
│   │   │       │       │   │       ├── 12.PNG
│   │   │       │       │   │       ├── 13.PNG
│   │   │       │       │   │       ├── 14.PNG
│   │   │       │       │   │       ├── 15.PNG
│   │   │       │       │   │       ├── 16.PNG
│   │   │       │       │   │       ├── 17.PNG
│   │   │       │       │   │       ├── 18.PNG
│   │   │       │       │   │       ├── 19.PNG
│   │   │       │       │   │       ├── 20.PNG
│   │   │       │       │   │       ├── 21.PNG
│   │   │       │       │   │       └── 22.PNG
│   │   │       │       │   ├── XAMPP
│   │   │       │       │   │   ├── 1 nmap.png
│   │   │       │       │   │   ├── 2 go buster.png
│   │   │       │       │   │   ├── 3 wed dav pass.png
│   │   │       │       │   │   ├── 4 crack htpasswd.png
│   │   │       │       │   │   ├── 5 upload nc exe to webdav.png
│   │   │       │       │   │   ├── 6 nc exe uploaded.png
│   │   │       │       │   │   ├── EoP and DLL.png
│   │   │       │       │   │   └── os_commerce.pdf
│   │   │       │       │   ├── offsecsmtp
│   │   │       │       │   │   ├── 3.png
│   │   │       │       │   │   └── 4.png
│   │   │       │       │   ├── oscp-solutions---16-machines-unlocked.pdf
│   │   │       │       │   └── other OSCP Machines res
│   │   │       │       │       └── OSCP Alpha.pdf
│   │   │       │       ├── OutOfTheBox.zip
│   │   │       │       ├── PWK-Example-Report-v1.pdf
│   │   │       │       ├── TJ-Pentest-Template-1.0.jex
│   │   │       │       ├── UCAL.zip
│   │   │       │       ├── lab
│   │   │       │       │   ├── 10.1.1.1
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.1.1.246
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.1.1.27
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.10
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.101
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.115
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.116
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.120
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.121
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.122
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.123
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.128
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.13
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.133
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.136
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.14
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.141
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.146
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.20
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.209
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.21
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.217
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.22
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.222
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.223
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.226
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.227
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.229
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.231
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.234
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.237
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.24
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.251
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.252
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.31
│   │   │       │       │   │   ├── adodb.txt
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.35
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.39
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.5
│   │   │       │       │   │   ├── bank.txt
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.50
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.71
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.72
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.73
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.75
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.11.1.8
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.2.2.150
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.2.2.218
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.2.2.22
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.2.2.23
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.2.2.31
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.2.2.86
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.3.3.14
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.3.3.190
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.3.3.201
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.3.3.34
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.3.3.42
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   ├── 10.3.3.47
│   │   │       │       │   │   └── command.txt
│   │   │       │       │   └── 10.3.3.88
│   │   │       │       │       └── command.txt
│   │   │       │       ├── snowscan_io_htb_writeup_redcross.pdf
│   │   │       │       └── unreal tournament.pdf
│   │   │       └── OSCP_Exam_Leaks-33VMs-active
│   │   │           ├── Apache Tomcat 101 - Linux
│   │   │           │   ├── 25point-tomcat.pdf
│   │   │           │   └── tomcat_root.jpg
│   │   │           ├── DiskSavvy 87 - Windows
│   │   │           │   ├── [Content_Types].xml
│   │   │           │   ├── _rels
│   │   │           │   ├── docProps
│   │   │           │   │   ├── app.xml
│   │   │           │   │   └── core.xml
│   │   │           │   └── word
│   │   │           │       ├── _rels
│   │   │           │       │   └── document.xml.rels
│   │   │           │       ├── document.xml
│   │   │           │       ├── fontTable.xml
│   │   │           │       ├── media
│   │   │           │       │   ├── image1.png
│   │   │           │       │   ├── image2.png
│   │   │           │       │   ├── image3.png
│   │   │           │       │   ├── image4.png
│   │   │           │       │   ├── image5.png
│   │   │           │       │   ├── image6.png
│   │   │           │       │   └── image7.png
│   │   │           │       ├── settings.xml
│   │   │           │       ├── styles.xml
│   │   │           │       ├── theme
│   │   │           │       │   └── theme1.xml
│   │   │           │       └── webSettings.xml
│   │   │           ├── Moosefs 107 - Linux
│   │   │           │   ├── Moosefs-root.txt
│   │   │           │   ├── Updated Moosefs root.txt
│   │   │           │   └── empusa_20_point_.pdf
│   │   │           ├── Orchard 112 - Windows
│   │   │           │   ├── Orchard.jpg
│   │   │           │   ├── orchard.txt
│   │   │           │   └── orchard_1.txt
│   │   │           ├── PHPlist 113 - Linux
│   │   │           │   ├── Phplist -final.txt
│   │   │           │   ├── Phplist1.jpg
│   │   │           │   └── Phplist2.jpg
│   │   │           ├── Theseus 109 - Windows
│   │   │           │   ├── THESEUS-U-1-unlocked.pdf
│   │   │           │   ├── Theseus.png
│   │   │           │   └── theasues.jpg
│   │   │           └── Z-MISC
│   │   │               ├── 00-A4.OSCP-OS-Exam-Report-LibSSH&PlaySMS-README.txt
│   │   │               ├── 00-A4.OSCP-OS-Exam-Report-LibSSH&PlaySMS.pdf
│   │   │               ├── 86e-unlocked.pdf
│   │   │               ├── A1.OSCP_EXAM_MACHINE_20200708.pdf
│   │   │               ├── A2.PWKLabs.pdf
│   │   │               ├── Archive
│   │   │               │   ├── 85-Winpower.txt
│   │   │               │   ├── 86-pic-a-point.txt
│   │   │               │   ├── Devbox.txt
│   │   │               │   ├── Perseus - Nostromo.png
│   │   │               │   ├── clorine.txt
│   │   │               │   └── eyesofnetwork_ updated.txt
│   │   │               ├── OSCP Zhenti Leaked-Currently Removed _ InfoSec Learning.html.pdf
│   │   │               ├── OSCP_Aug2020_exam leak
│   │   │               │   ├── 192.168.1.161
│   │   │               │   │   ├── 1 nmap and vuln.png
│   │   │               │   │   ├── 2 eternalbluie not patch.png
│   │   │               │   │   └── 3 root proof.png
│   │   │               │   ├── BoF
│   │   │               │   │   ├── 1.png
│   │   │               │   │   ├── 2.png
│   │   │               │   │   ├── image0-1.jpg
│   │   │               │   │   ├── image0-3.jpg
│   │   │               │   │   ├── image0-4.jpg
│   │   │               │   │   ├── image0-5.jpg
│   │   │               │   │   ├── image0.jpg
│   │   │               │   │   └── image0.png
│   │   │               │   ├── Exam Outline.txt
│   │   │               │   ├── Filethinghie-pick-a-point.pdf
│   │   │               │   ├── OSCP Report Guide.pdf
│   │   │               │   ├── OSCP-OS-XXXXX-Exam-Report.pdf
│   │   │               │   ├── PWKLabs.pdf
│   │   │               │   ├── Ph33r
│   │   │               │   │   ├── 2(2).png
│   │   │               │   │   └── 2.png
│   │   │               │   ├── Public Network.docx
│   │   │               │   ├── Solutions
│   │   │               │   │   ├── 11.PNG
│   │   │               │   │   ├── 12.PNG
│   │   │               │   │   ├── 12gfgf.PNG
│   │   │               │   │   ├── 13.PNG
│   │   │               │   │   ├── 14.PNG
│   │   │               │   │   ├── 15.PNG
│   │   │               │   │   ├── 16.PNG
│   │   │               │   │   ├── 16fggf.PNG
│   │   │               │   │   ├── 17.PNG
│   │   │               │   │   ├── 17gfdgf.PNG
│   │   │               │   │   ├── 18.PNG
│   │   │               │   │   ├── 18fggd.PNG
│   │   │               │   │   ├── 19.PNG
│   │   │               │   │   ├── 1ffgd.PNG
│   │   │               │   │   ├── 2.PNG
│   │   │               │   │   ├── 20.PNG
│   │   │               │   │   ├── 21.PNG
│   │   │               │   │   ├── 22.PNG
│   │   │               │   │   ├── 24.PNG
│   │   │               │   │   ├── 25.PNG
│   │   │               │   │   ├── 26.PNG
│   │   │               │   │   ├── 27.PNG
│   │   │               │   │   ├── 28.PNG
│   │   │               │   │   ├── 2fdga.PNG
│   │   │               │   │   ├── 3.PNG
│   │   │               │   │   ├── 3fga.PNG
│   │   │               │   │   ├── 4fga.PNG
│   │   │               │   │   ├── 5fgga.PNG
│   │   │               │   │   ├── 6.PNG
│   │   │               │   │   ├── 6gfag.PNG
│   │   │               │   │   ├── 7wer.PNG
│   │   │               │   │   ├── 8.PNG
│   │   │               │   │   ├── 9.PNG
│   │   │               │   │   ├── 9r.PNG
│   │   │               │   │   └── New folder (2)
│   │   │               │   │       ├── 01.PNG
│   │   │               │   │       ├── 02.PNG
│   │   │               │   │       ├── 03.PNG
│   │   │               │   │       ├── 04.PNG
│   │   │               │   │       ├── 05.PNG
│   │   │               │   │       ├── 06.PNG
│   │   │               │   │       ├── 07.PNG
│   │   │               │   │       ├── 08.PNG
│   │   │               │   │       ├── 09.PNG
│   │   │               │   │       ├── 101.PNG
│   │   │               │   │       ├── 11.PNG
│   │   │               │   │       ├── 12.PNG
│   │   │               │   │       ├── 13.PNG
│   │   │               │   │       ├── 14.PNG
│   │   │               │   │       ├── 15.PNG
│   │   │               │   │       ├── 16.PNG
│   │   │               │   │       ├── 17.PNG
│   │   │               │   │       ├── 18.PNG
│   │   │               │   │       ├── 19.PNG
│   │   │               │   │       ├── 20.PNG
│   │   │               │   │       ├── 21.PNG
│   │   │               │   │       └── 22.PNG
│   │   │               │   ├── XAMPP
│   │   │               │   │   ├── 1 nmap.png
│   │   │               │   │   ├── 2 go buster.png
│   │   │               │   │   ├── 3 wed dav pass.png
│   │   │               │   │   ├── 4 crack htpasswd.png
│   │   │               │   │   ├── 5 upload nc exe to webdav.png
│   │   │               │   │   ├── 6 nc exe uploaded.png
│   │   │               │   │   ├── EoP and DLL.png
│   │   │               │   │   └── os_commerce.pdf
│   │   │               │   ├── offsecsmtp
│   │   │               │   │   ├── 3.png
│   │   │               │   │   └── 4.png
│   │   │               │   ├── oscp-solutions---16-machines-unlocked.pdf
│   │   │               │   └── other OSCP Machines res
│   │   │               │       └── OSCP Alpha.pdf
│   │   │               ├── OutOfTheBox.zip
│   │   │               ├── PWK-Example-Report-v1.pdf
│   │   │               ├── TJ-Pentest-Template-1.0.jex
│   │   │               ├── UCAL.zip
│   │   │               ├── lab
│   │   │               │   ├── 10.1.1.1
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.1.1.246
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.1.1.27
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.10
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.101
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.115
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.116
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.120
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.121
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.122
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.123
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.128
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.13
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.133
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.136
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.14
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.141
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.146
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.20
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.209
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.21
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.217
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.22
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.222
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.223
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.226
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.227
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.229
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.231
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.234
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.237
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.24
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.251
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.252
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.31
│   │   │               │   │   ├── adodb.txt
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.35
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.39
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.5
│   │   │               │   │   ├── bank.txt
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.50
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.71
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.72
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.73
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.75
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.11.1.8
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.2.2.150
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.2.2.218
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.2.2.22
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.2.2.23
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.2.2.31
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.2.2.86
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.3.3.14
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.3.3.190
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.3.3.201
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.3.3.34
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.3.3.42
│   │   │               │   │   └── command.txt
│   │   │               │   ├── 10.3.3.47
│   │   │               │   │   └── command.txt
│   │   │               │   └── 10.3.3.88
│   │   │               │       └── command.txt
│   │   │               ├── snowscan_io_htb_writeup_redcross.pdf
│   │   │               └── unreal tournament.pdf
│   │   ├── OSCP write up latest
│   │   │   ├── 101-tomcat_25.pdf
│   │   │   ├── 101-tomcat_root.pdf
│   │   │   ├── 107-Moosefs_20_root.txt
│   │   │   ├── 107-moosefs_20_user.pdf
│   │   │   ├── 109-theseus.txt
│   │   │   ├── 112-Orchard.txt
│   │   │   ├── 113-phplist.txt
│   │   │   ├── 192.168.33.55
│   │   │   │   ├── 1 nmap.png
│   │   │   │   ├── 2 go buster.png
│   │   │   │   ├── 3 wed dav pass.png
│   │   │   │   ├── 4 crack htpasswd.png
│   │   │   │   ├── 5 upload nc exe to webdav.png
│   │   │   │   ├── 6 nc exe uploaded.png
│   │   │   │   └── EoP and DLL.png
│   │   │   ├── 200-Perseus.txt
│   │   │   ├── 25point-tomcat.pdf
│   │   │   ├── 80-EyesOfNetwork_20_user.txt
│   │   │   ├── 80-OSCommerce.txt
│   │   │   ├── 85-Winpower.txt
│   │   │   ├── 86-pic-a-point.txt
│   │   │   ├── 86e-unlocked.pdf
│   │   │   ├── 87-DiskSavvy
│   │   │   │   ├── [Content_Types].xml
│   │   │   │   ├── _rels
│   │   │   │   ├── docProps
│   │   │   │   │   ├── app.xml
│   │   │   │   │   └── core.xml
│   │   │   │   └── word
│   │   │   │       ├── _rels
│   │   │   │       │   └── document.xml.rels
│   │   │   │       ├── document.xml
│   │   │   │       ├── fontTable.xml
│   │   │   │       ├── media
│   │   │   │       │   ├── image1.png
│   │   │   │       │   ├── image2.png
│   │   │   │       │   ├── image3.png
│   │   │   │       │   ├── image4.png
│   │   │   │       │   ├── image5.png
│   │   │   │       │   ├── image6.png
│   │   │   │       │   └── image7.png
│   │   │   │       ├── settings.xml
│   │   │   │       ├── styles.xml
│   │   │   │       ├── theme
│   │   │   │       │   └── theme1.xml
│   │   │   │       └── webSettings.xml
│   │   │   ├── 87-DiskSavvy.docx
│   │   │   ├── 87-DiskSavvy.xml
│   │   │   ├── A1.OSCP_EXAM_MACHINE_202009.pdf
│   │   │   ├── A3.Phplist_orchard_tomcat_moosefs
│   │   │   │   ├── Phplist, orchard, tomcat and moosefs
│   │   │   │   │   ├── 25point-tomcat.pdf
│   │   │   │   │   ├── Orchard.jpg
│   │   │   │   │   ├── Phplist1.jpg
│   │   │   │   │   ├── Phplist2.jpg
│   │   │   │   │   └── moosefs_20_point_.pdf
│   │   │   │   └── zerodaylab.txt
│   │   │   ├── A3.Phplist_orchard_tomcat_moosefs.zip
│   │   │   ├── A4.OSCP-OS-Exam-Report-LibSSH_PlaySMS.pdf
│   │   │   ├── Devbox.txt
│   │   │   ├── Gitstack.txt
│   │   │   ├── Moosefs-root.txt
│   │   │   ├── Perseus.png
│   │   │   ├── Phplist -final.txt
│   │   │   ├── Phplist, orchard, tomcat and moosefs
│   │   │   │   ├── 25point-tomcat.pdf
│   │   │   │   ├── Orchard.jpg
│   │   │   │   ├── Phplist1.jpg
│   │   │   │   ├── Phplist2.jpg
│   │   │   │   ├── moosefs_20_point_.pdf
│   │   │   │   └── theasues.jpg
│   │   │   ├── Phplist, orchard, tomcat and moosefs 2
│   │   │   │   ├── 25point-tomcat.pdf
│   │   │   │   ├── Orchard.jpg
│   │   │   │   ├── Phplist1.jpg
│   │   │   │   ├── Phplist2.jpg
│   │   │   │   ├── moosefs_20_point_.pdf
│   │   │   │   └── zerodaylab.txt
│   │   │   ├── THESEUS-U-1-unlocked.pdf
│   │   │   ├── UnknownIP-FileThingie.txt
│   │   │   ├── Updated Moosefs root.txt
│   │   │   ├── clorine.txt
│   │   │   ├── eyesofnetwork_ updated.txt
│   │   │   ├── moosefs_20_point__1.pdf
│   │   │   ├── orchard.md
│   │   │   ├── tiki tiki
│   │   │   │   ├── 1.png
│   │   │   │   ├── 2.png
│   │   │   │   ├── 3.png
│   │   │   │   └── zerodaylab.txt
│   │   │   └── tomcat_root.jpg
│   │   ├── OSCP_Exam_Leaks-33VMs
│   │   │   ├── Admin-pc 55 - Linux
│   │   │   │   ├── 1.png
│   │   │   │   └── 2.png
│   │   │   ├── Apache Tomcat 101 - Linux
│   │   │   │   ├── 25point-tomcat.pdf
│   │   │   │   └── tomcat_root.jpg
│   │   │   ├── Ashley Brown 161 - Windows
│   │   │   │   ├── 2.PNG
│   │   │   │   ├── 3.PNG
│   │   │   │   └── read.txt
│   │   │   ├── Asystole 105 - Windows
│   │   │   │   └── Asystole.txt
│   │   │   ├── Bengine 85 - Windows
│   │   │   │   └── blogengine.txt
│   │   │   ├── BobTheBuilder 150 - Linux
│   │   │   │   └── bobthebuilder.txt
│   │   │   ├── Codiod 55 - Windows
│   │   │   │   ├── 1.PNG
│   │   │   │   ├── 2.PNG
│   │   │   │   ├── 3.PNG
│   │   │   │   ├── 4.PNG
│   │   │   │   └── 5.PNG
│   │   │   ├── DiskSavvy 87 - Windows
│   │   │   │   ├── [Content_Types].xml
│   │   │   │   ├── _rels
│   │   │   │   ├── docProps
│   │   │   │   │   ├── app.xml
│   │   │   │   │   └── core.xml
│   │   │   │   └── word
│   │   │   │       ├── _rels
│   │   │   │       │   └── document.xml.rels
│   │   │   │       ├── document.xml
│   │   │   │       ├── fontTable.xml
│   │   │   │       ├── media
│   │   │   │       │   ├── image1.png
│   │   │   │       │   ├── image2.png
│   │   │   │       │   ├── image3.png
│   │   │   │       │   ├── image4.png
│   │   │   │       │   ├── image5.png
│   │   │   │       │   ├── image6.png
│   │   │   │       │   └── image7.png
│   │   │   │       ├── settings.xml
│   │   │   │       ├── styles.xml
│   │   │   │       ├── theme
│   │   │   │       │   └── theme1.xml
│   │   │   │       └── webSettings.xml
│   │   │   ├── EDBMACHINE 218 - Windows
│   │   │   │   └── README.txt
│   │   │   ├── Ekzameno 67 - Linux
│   │   │   │   ├── 1 nmap scan.png
│   │   │   │   ├── 2 limited shell.png
│   │   │   │   ├── 4 sudo l.png
│   │   │   │   ├── 5 sudo -l.png
│   │   │   │   └── 67 write.docx
│   │   │   ├── Harakiri 81 - Linux
│   │   │   │   └── README.txt
│   │   │   ├── HomeStudy 42 - Windows
│   │   │   │   └── homestudy.txt.txt
│   │   │   ├── LazyB 41 - Linux
│   │   │   │   └── lazyb.txt
│   │   │   ├── Locutus 161 - Windows
│   │   │   │   ├── 1.png
│   │   │   │   ├── 2.png
│   │   │   │   ├── 3.png
│   │   │   │   └── README.txt
│   │   │   ├── Moosefs 107 - Linux
│   │   │   │   ├── Moosefs-root.txt
│   │   │   │   ├── Updated Moosefs root.txt
│   │   │   │   └── empusa_20_point_.pdf
│   │   │   ├── Nagy 216 - Linux
│   │   │   │   ├── aakashack_blogspot_com_2019_01_hacking_nagios_xi_rce_vulnera.pdf
│   │   │   │   ├── nagios.txt
│   │   │   │   ├── nagiosxi-root-rce-exploit-master
│   │   │   │   │   └── nagiosxi-root-rce-exploit-master
│   │   │   │   │       ├── README.md
│   │   │   │   │       └── exploit.php
│   │   │   │   └── nagiosxi-root-rce-exploit-master.zip
│   │   │   ├── October 43_55 - Linux
│   │   │   │   ├── 1.png
│   │   │   │   ├── 2.png
│   │   │   │   ├── 3.png
│   │   │   │   ├── 4.4.png
│   │   │   │   ├── 4.png
│   │   │   │   ├── 5.png
│   │   │   │   ├── october.md
│   │   │   │   └── october2.pdf
│   │   │   ├── Orchard 112 - Windows
│   │   │   │   ├── Orchard.jpg
│   │   │   │   ├── orchard.txt
│   │   │   │   └── orchard_1.txt
│   │   │   ├── PHPlist 113 - Linux
│   │   │   │   ├── Phplist -final.txt
│   │   │   │   ├── Phplist1.jpg
│   │   │   │   └── Phplist2.jpg
│   │   │   ├── Ph33r 161 - Linux
│   │   │   │   └── 1.png
│   │   │   ├── Rocinante 82 - Linux
│   │   │   │   └── README.txt
│   │   │   ├── Socket_WP 46 - Windows
│   │   │   │   └── README.txt
│   │   │   ├── Textian 44 - Linux
│   │   │   │   ├── 1.png
│   │   │   │   ├── 2.png
│   │   │   │   ├── 3.png
│   │   │   │   ├── 4.png
│   │   │   │   ├── 5.png
│   │   │   │   ├── README.txt
│   │   │   │   └── playsms.txt
│   │   │   ├── Thelongnight 95 - Linux
│   │   │   │   └── thenightlong.md
│   │   │   ├── Theseus 109 - Windows
│   │   │   │   ├── THESEUS-U-1-unlocked.pdf
│   │   │   │   ├── Theseus.png
│   │   │   │   └── theasues.jpg
│   │   │   ├── Tiki 67 - Windows
│   │   │   │   ├── 1.png
│   │   │   │   ├── 2.png
│   │   │   │   ├── 3.png
│   │   │   │   └── README.txt
│   │   │   ├── V1RUS 84 - Windows
│   │   │   │   └── Gitstack.txt
│   │   │   ├── Vulcan 53 - Linux
│   │   │   │   ├── README.txt
│   │   │   │   └── vulcano.pdf
│   │   │   ├── Webpack 96 - Linux
│   │   │   │   └── FuelCMS.txt
│   │   │   └── Z-MISC
│   │   │       ├── 00-A4.OSCP-OS-Exam-Report-LibSSH&PlaySMS-README.txt
│   │   │       ├── 00-A4.OSCP-OS-Exam-Report-LibSSH&PlaySMS.pdf
│   │   │       ├── 86e-unlocked.pdf
│   │   │       ├── A1.OSCP_EXAM_MACHINE_20200708.pdf
│   │   │       ├── A2.PWKLabs.pdf
│   │   │       ├── Archive
│   │   │       │   ├── 85-Winpower.txt
│   │   │       │   ├── 86-pic-a-point.txt
│   │   │       │   ├── Devbox.txt
│   │   │       │   ├── Perseus - Nostromo.png
│   │   │       │   ├── clorine.txt
│   │   │       │   └── eyesofnetwork_ updated.txt
│   │   │       ├── OSCP Zhenti Leaked-Currently Removed _ InfoSec Learning.html.pdf
│   │   │       ├── OSCP_Aug2020_exam leak
│   │   │       │   ├── 192.168.1.161
│   │   │       │   │   ├── 1 nmap and vuln.png
│   │   │       │   │   ├── 2 eternalbluie not patch.png
│   │   │       │   │   └── 3 root proof.png
│   │   │       │   ├── BoF
│   │   │       │   │   ├── 1.png
│   │   │       │   │   ├── 2.png
│   │   │       │   │   ├── image0-1.jpg
│   │   │       │   │   ├── image0-3.jpg
│   │   │       │   │   ├── image0-4.jpg
│   │   │       │   │   ├── image0-5.jpg
│   │   │       │   │   ├── image0.jpg
│   │   │       │   │   └── image0.png
│   │   │       │   ├── Exam Outline.txt
│   │   │       │   ├── Filethinghie-pick-a-point.pdf
│   │   │       │   ├── OSCP Report Guide.pdf
│   │   │       │   ├── OSCP-OS-XXXXX-Exam-Report.pdf
│   │   │       │   ├── PWKLabs.pdf
│   │   │       │   ├── Ph33r
│   │   │       │   │   ├── 2(2).png
│   │   │       │   │   └── 2.png
│   │   │       │   ├── Public Network.docx
│   │   │       │   ├── Solutions
│   │   │       │   │   ├── 11.PNG
│   │   │       │   │   ├── 12.PNG
│   │   │       │   │   ├── 12gfgf.PNG
│   │   │       │   │   ├── 13.PNG
│   │   │       │   │   ├── 14.PNG
│   │   │       │   │   ├── 15.PNG
│   │   │       │   │   ├── 16.PNG
│   │   │       │   │   ├── 16fggf.PNG
│   │   │       │   │   ├── 17.PNG
│   │   │       │   │   ├── 17gfdgf.PNG
│   │   │       │   │   ├── 18.PNG
│   │   │       │   │   ├── 18fggd.PNG
│   │   │       │   │   ├── 19.PNG
│   │   │       │   │   ├── 1ffgd.PNG
│   │   │       │   │   ├── 2.PNG
│   │   │       │   │   ├── 20.PNG
│   │   │       │   │   ├── 21.PNG
│   │   │       │   │   ├── 22.PNG
│   │   │       │   │   ├── 24.PNG
│   │   │       │   │   ├── 25.PNG
│   │   │       │   │   ├── 26.PNG
│   │   │       │   │   ├── 27.PNG
│   │   │       │   │   ├── 28.PNG
│   │   │       │   │   ├── 2fdga.PNG
│   │   │       │   │   ├── 3.PNG
│   │   │       │   │   ├── 3fga.PNG
│   │   │       │   │   ├── 4fga.PNG
│   │   │       │   │   ├── 5fgga.PNG
│   │   │       │   │   ├── 6.PNG
│   │   │       │   │   ├── 6gfag.PNG
│   │   │       │   │   ├── 7wer.PNG
│   │   │       │   │   ├── 8.PNG
│   │   │       │   │   ├── 9.PNG
│   │   │       │   │   ├── 9r.PNG
│   │   │       │   │   └── New folder (2)
│   │   │       │   │       ├── 01.PNG
│   │   │       │   │       ├── 02.PNG
│   │   │       │   │       ├── 03.PNG
│   │   │       │   │       ├── 04.PNG
│   │   │       │   │       ├── 05.PNG
│   │   │       │   │       ├── 06.PNG
│   │   │       │   │       ├── 07.PNG
│   │   │       │   │       ├── 08.PNG
│   │   │       │   │       ├── 09.PNG
│   │   │       │   │       ├── 101.PNG
│   │   │       │   │       ├── 11.PNG
│   │   │       │   │       ├── 12.PNG
│   │   │       │   │       ├── 13.PNG
│   │   │       │   │       ├── 14.PNG
│   │   │       │   │       ├── 15.PNG
│   │   │       │   │       ├── 16.PNG
│   │   │       │   │       ├── 17.PNG
│   │   │       │   │       ├── 18.PNG
│   │   │       │   │       ├── 19.PNG
│   │   │       │   │       ├── 20.PNG
│   │   │       │   │       ├── 21.PNG
│   │   │       │   │       └── 22.PNG
│   │   │       │   ├── XAMPP
│   │   │       │   │   ├── 1 nmap.png
│   │   │       │   │   ├── 2 go buster.png
│   │   │       │   │   ├── 3 wed dav pass.png
│   │   │       │   │   ├── 4 crack htpasswd.png
│   │   │       │   │   ├── 5 upload nc exe to webdav.png
│   │   │       │   │   ├── 6 nc exe uploaded.png
│   │   │       │   │   ├── EoP and DLL.png
│   │   │       │   │   └── os_commerce.pdf
│   │   │       │   ├── offsecsmtp
│   │   │       │   │   ├── 3.png
│   │   │       │   │   └── 4.png
│   │   │       │   ├── oscp-solutions---16-machines-unlocked.pdf
│   │   │       │   └── other OSCP Machines res
│   │   │       │       └── OSCP Alpha.pdf
│   │   │       ├── OutOfTheBox.zip
│   │   │       ├── PWK-Example-Report-v1.pdf
│   │   │       ├── TJ-Pentest-Template-1.0.jex
│   │   │       ├── UCAL.zip
│   │   │       ├── lab
│   │   │       │   ├── 10.1.1.1
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.1.1.246
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.1.1.27
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.10
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.101
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.115
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.116
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.120
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.121
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.122
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.123
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.128
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.13
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.133
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.136
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.14
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.141
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.146
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.20
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.209
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.21
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.217
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.22
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.222
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.223
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.226
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.227
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.229
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.231
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.234
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.237
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.24
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.251
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.252
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.31
│   │   │       │   │   ├── adodb.txt
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.35
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.39
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.5
│   │   │       │   │   ├── bank.txt
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.50
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.71
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.72
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.73
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.75
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.11.1.8
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.2.2.150
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.2.2.218
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.2.2.22
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.2.2.23
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.2.2.31
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.2.2.86
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.3.3.14
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.3.3.190
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.3.3.201
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.3.3.34
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.3.3.42
│   │   │       │   │   └── command.txt
│   │   │       │   ├── 10.3.3.47
│   │   │       │   │   └── command.txt
│   │   │       │   └── 10.3.3.88
│   │   │       │       └── command.txt
│   │   │       ├── snowscan_io_htb_writeup_redcross.pdf
│   │   │       └── unreal tournament.pdf
│   │   └── OSCP_Exam_Leaks-33VMs-active
│   │       ├── Apache Tomcat 101 - Linux
│   │       │   ├── 25point-tomcat.pdf
│   │       │   └── tomcat_root.jpg
│   │       ├── DiskSavvy 87 - Windows
│   │       │   ├── [Content_Types].xml
│   │       │   ├── _rels
│   │       │   ├── docProps
│   │       │   │   ├── app.xml
│   │       │   │   └── core.xml
│   │       │   └── word
│   │       │       ├── _rels
│   │       │       │   └── document.xml.rels
│   │       │       ├── document.xml
│   │       │       ├── fontTable.xml
│   │       │       ├── media
│   │       │       │   ├── image1.png
│   │       │       │   ├── image2.png
│   │       │       │   ├── image3.png
│   │       │       │   ├── image4.png
│   │       │       │   ├── image5.png
│   │       │       │   ├── image6.png
│   │       │       │   └── image7.png
│   │       │       ├── settings.xml
│   │       │       ├── styles.xml
│   │       │       ├── theme
│   │       │       │   └── theme1.xml
│   │       │       └── webSettings.xml
│   │       ├── Moosefs 107 - Linux
│   │       │   ├── Moosefs-root.txt
│   │       │   ├── Updated Moosefs root.txt
│   │       │   └── empusa_20_point_.pdf
│   │       ├── Orchard 112 - Windows
│   │       │   ├── Orchard.jpg
│   │       │   ├── orchard.txt
│   │       │   └── orchard_1.txt
│   │       ├── PHPlist 113 - Linux
│   │       │   ├── Phplist -final.txt
│   │       │   ├── Phplist1.jpg
│   │       │   └── Phplist2.jpg
│   │       ├── Theseus 109 - Windows
│   │       │   ├── THESEUS-U-1-unlocked.pdf
│   │       │   ├── Theseus.png
│   │       │   └── theasues.jpg
│   │       └── Z-MISC
│   │           ├── 00-A4.OSCP-OS-Exam-Report-LibSSH&PlaySMS-README.txt
│   │           ├── 00-A4.OSCP-OS-Exam-Report-LibSSH&PlaySMS.pdf
│   │           ├── 86e-unlocked.pdf
│   │           ├── A1.OSCP_EXAM_MACHINE_20200708.pdf
│   │           ├── A2.PWKLabs.pdf
│   │           ├── Archive
│   │           │   ├── 85-Winpower.txt
│   │           │   ├── 86-pic-a-point.txt
│   │           │   ├── Devbox.txt
│   │           │   ├── Perseus - Nostromo.png
│   │           │   ├── clorine.txt
│   │           │   └── eyesofnetwork_ updated.txt
│   │           ├── OSCP Zhenti Leaked-Currently Removed _ InfoSec Learning.html.pdf
│   │           ├── OSCP_Aug2020_exam leak
│   │           │   ├── 192.168.1.161
│   │           │   │   ├── 1 nmap and vuln.png
│   │           │   │   ├── 2 eternalbluie not patch.png
│   │           │   │   └── 3 root proof.png
│   │           │   ├── BoF
│   │           │   │   ├── 1.png
│   │           │   │   ├── 2.png
│   │           │   │   ├── image0-1.jpg
│   │           │   │   ├── image0-3.jpg
│   │           │   │   ├── image0-4.jpg
│   │           │   │   ├── image0-5.jpg
│   │           │   │   ├── image0.jpg
│   │           │   │   └── image0.png
│   │           │   ├── Exam Outline.txt
│   │           │   ├── Filethinghie-pick-a-point.pdf
│   │           │   ├── OSCP Report Guide.pdf
│   │           │   ├── OSCP-OS-XXXXX-Exam-Report.pdf
│   │           │   ├── PWKLabs.pdf
│   │           │   ├── Ph33r
│   │           │   │   ├── 2(2).png
│   │           │   │   └── 2.png
│   │           │   ├── Public Network.docx
│   │           │   ├── Solutions
│   │           │   │   ├── 11.PNG
│   │           │   │   ├── 12.PNG
│   │           │   │   ├── 12gfgf.PNG
│   │           │   │   ├── 13.PNG
│   │           │   │   ├── 14.PNG
│   │           │   │   ├── 15.PNG
│   │           │   │   ├── 16.PNG
│   │           │   │   ├── 16fggf.PNG
│   │           │   │   ├── 17.PNG
│   │           │   │   ├── 17gfdgf.PNG
│   │           │   │   ├── 18.PNG
│   │           │   │   ├── 18fggd.PNG
│   │           │   │   ├── 19.PNG
│   │           │   │   ├── 1ffgd.PNG
│   │           │   │   ├── 2.PNG
│   │           │   │   ├── 20.PNG
│   │           │   │   ├── 21.PNG
│   │           │   │   ├── 22.PNG
│   │           │   │   ├── 24.PNG
│   │           │   │   ├── 25.PNG
│   │           │   │   ├── 26.PNG
│   │           │   │   ├── 27.PNG
│   │           │   │   ├── 28.PNG
│   │           │   │   ├── 2fdga.PNG
│   │           │   │   ├── 3.PNG
│   │           │   │   ├── 3fga.PNG
│   │           │   │   ├── 4fga.PNG
│   │           │   │   ├── 5fgga.PNG
│   │           │   │   ├── 6.PNG
│   │           │   │   ├── 6gfag.PNG
│   │           │   │   ├── 7wer.PNG
│   │           │   │   ├── 8.PNG
│   │           │   │   ├── 9.PNG
│   │           │   │   ├── 9r.PNG
│   │           │   │   └── New folder (2)
│   │           │   │       ├── 01.PNG
│   │           │   │       ├── 02.PNG
│   │           │   │       ├── 03.PNG
│   │           │   │       ├── 04.PNG
│   │           │   │       ├── 05.PNG
│   │           │   │       ├── 06.PNG
│   │           │   │       ├── 07.PNG
│   │           │   │       ├── 08.PNG
│   │           │   │       ├── 09.PNG
│   │           │   │       ├── 101.PNG
│   │           │   │       ├── 11.PNG
│   │           │   │       ├── 12.PNG
│   │           │   │       ├── 13.PNG
│   │           │   │       ├── 14.PNG
│   │           │   │       ├── 15.PNG
│   │           │   │       ├── 16.PNG
│   │           │   │       ├── 17.PNG
│   │           │   │       ├── 18.PNG
│   │           │   │       ├── 19.PNG
│   │           │   │       ├── 20.PNG
│   │           │   │       ├── 21.PNG
│   │           │   │       └── 22.PNG
│   │           │   ├── XAMPP
│   │           │   │   ├── 1 nmap.png
│   │           │   │   ├── 2 go buster.png
│   │           │   │   ├── 3 wed dav pass.png
│   │           │   │   ├── 4 crack htpasswd.png
│   │           │   │   ├── 5 upload nc exe to webdav.png
│   │           │   │   ├── 6 nc exe uploaded.png
│   │           │   │   ├── EoP and DLL.png
│   │           │   │   └── os_commerce.pdf
│   │           │   ├── offsecsmtp
│   │           │   │   ├── 3.png
│   │           │   │   └── 4.png
│   │           │   ├── oscp-solutions---16-machines-unlocked.pdf
│   │           │   └── other OSCP Machines res
│   │           │       └── OSCP Alpha.pdf
│   │           ├── OutOfTheBox.zip
│   │           ├── PWK-Example-Report-v1.pdf
│   │           ├── TJ-Pentest-Template-1.0.jex
│   │           ├── UCAL.zip
│   │           ├── lab
│   │           │   ├── 10.1.1.1
│   │           │   │   └── command.txt
│   │           │   ├── 10.1.1.246
│   │           │   │   └── command.txt
│   │           │   ├── 10.1.1.27
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.10
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.101
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.115
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.116
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.120
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.121
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.122
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.123
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.128
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.13
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.133
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.136
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.14
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.141
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.146
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.20
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.209
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.21
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.217
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.22
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.222
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.223
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.226
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.227
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.229
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.231
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.234
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.237
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.24
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.251
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.252
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.31
│   │           │   │   ├── adodb.txt
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.35
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.39
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.5
│   │           │   │   ├── bank.txt
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.50
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.71
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.72
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.73
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.75
│   │           │   │   └── command.txt
│   │           │   ├── 10.11.1.8
│   │           │   │   └── command.txt
│   │           │   ├── 10.2.2.150
│   │           │   │   └── command.txt
│   │           │   ├── 10.2.2.218
│   │           │   │   └── command.txt
│   │           │   ├── 10.2.2.22
│   │           │   │   └── command.txt
│   │           │   ├── 10.2.2.23
│   │           │   │   └── command.txt
│   │           │   ├── 10.2.2.31
│   │           │   │   └── command.txt
│   │           │   ├── 10.2.2.86
│   │           │   │   └── command.txt
│   │           │   ├── 10.3.3.14
│   │           │   │   └── command.txt
│   │           │   ├── 10.3.3.190
│   │           │   │   └── command.txt
│   │           │   ├── 10.3.3.201
│   │           │   │   └── command.txt
│   │           │   ├── 10.3.3.34
│   │           │   │   └── command.txt
│   │           │   ├── 10.3.3.42
│   │           │   │   └── command.txt
│   │           │   ├── 10.3.3.47
│   │           │   │   └── command.txt
│   │           │   └── 10.3.3.88
│   │           │       └── command.txt
│   │           ├── snowscan_io_htb_writeup_redcross.pdf
│   │           └── unreal tournament.pdf
│   ├── OSCP HTB VIDEOS
│   │   ├── HackTheBox - Chaos.mp4
│   │   ├── HackTheBox - Dab.mp4
│   │   ├── HackTheBox - Hawk.mp4
│   │   ├── HackTheBox - OZ.mp4
│   │   ├── HackTheBox - Secnotes_HIGH.mp4
│   │   ├── HackTheBox Access.mp4
│   │   ├── HackTheBox Carrier.mp4
│   │   ├── HackTheBox Curling.mp4
│   │   ├── HackTheBox Devoops machine - 2018 (real world hacking )_HIGH.mp4
│   │   ├── HackTheBox Frolic.mp4
│   │   ├── HackTheBox Mischief.mp4
│   │   ├── HackTheBox TarTarSaurce machine - 2018.mp4
│   │   ├── HackTheBox Ypuffy.mp4
│   │   ├── HackTheBox Zipper.mp4
│   │   ├── Hackthebox  Bounty Machine- 2018_HIGH.mp4
│   │   ├── Hackthebox - Active.mp4
│   │   ├── Hackthebox - Waldo.mp4
│   │   ├── Hackthebox Giddy.mp4
│   │   ├── Hackthebox Jerry Machine -2018_HIGH.mp4
│   │   ├── Hackthebox Reel Machine -2018_HIGH.mp4
│   │   ├── Hackthebox Smasher - 2018.mp4
│   │   ├── Hackthebox invite code.mp4
│   │   ├── Kuya vulnhub.mp4
│   │   ├── Vulnhub Fourandsix2 Machine - CTF Challenges.mp4
│   │   ├── Vulnhub Node.js machine - 2018(Node js Hacking)_HIGH.mp4
│   │   ├── Vulnhub Raven-1 -2018.mp4
│   │   ├── Vulnhub Wakanda Machine - 2018_HIGH.mp4
│   │   └── Vulnhub cofefeve machine 2018_HIGH.mp4
│   ├── OSCP ROAD
│   │   ├── 10. Network Attacks and Exploitation.pdf
│   │   ├── 1Penetration Testing - A hands-on introduction to Hacking.pdf
│   │   ├── 2The Hacker Playbook 3 Practical Guide To Penetration Testing.pdf
│   │   ├── 3. Web App Hacking (Hackers Handbook).pdf
│   │   ├── 3Hacking- The Art of Exploitation (2nd ed. 2008) - Erickson.pdf
│   │   ├── 3The web application hackers handbook finding and exploiting security flaws -ed2 2011.pdf
│   │   ├── 4. Advanced Penetration Testing Hacking 2017.pdf
│   │   ├── 4. Web App Hacking (Hackers Handbook).pdf
│   │   ├── 4RTFM - Red Team Field Manual v3.pdf
│   │   ├── 6Hacking- The Art of Exploitation (2nd ed. 2008) - Erickson.pdf
│   │   ├── 9781787289352-MASTERING_ACTIVE_DIRECTORY.pdf
│   │   ├── 9Learning Penetration Testing With Python - Christopher Duffy.pdf
│   │   ├── A Bug Hunter's Diary_ A Guided Tour Through the Wilds of Software Security   ( PDFDrive.com ).pdf
│   │   ├── Coding for Penetration Testers_ Building Better Tools - Jason Andress & Ryan Linn.pdf
│   │   ├── Emailing Entire Web Application Pentest Course.pdf
│   │   ├── Hands-On Bug Hunting for Penetration Testers_ A practical guide to help ethical hackers discover web application security flaws ( PDFDrive.com ).pdf
│   │   ├── Learn Ethical Hacking from Scratch.pdf
│   │   ├── OSCP OffSec Penetration Testing with Kali Linux (2014).pdf
│   │   ├── OSCP_Cheat_Sheet_-_Thor-Sec.pdf
│   │   ├── Python
│   │   │   ├── 11Mastering Python Forensics - Dr. Michael Spreitzenbarth & Dr. Johann Uhrmann.pdf
│   │   │   ├── 6. Begin Ethical Hacking with Python.pdf
│   │   │   ├── 7Black Hat Python Python Programming for Hackers and Pentesters.pdf
│   │   │   ├── 7gray hat python.pdf
│   │   │   ├── 8. Python Web Penetration Testing Cookbook.pdf
│   │   │   ├── 9Learning Penetration Testing With Python - Christopher Duffy.pdf
│   │   │   ├── Coding for Penetration Testers_ Building Better Tools - Jason Andress & Ryan Linn.pdf
│   │   │   ├── Python Crash Course, 2nd Edition.pdf
│   │   │   ├── Python-Cracking Cyphers.pdf
│   │   │   └── Violent-Python-Companion-Files-master
│   │   │       ├── CH1
│   │   │       │   ├── 1-vulnScanner.py
│   │   │       │   ├── 2-passwdCrack.py
│   │   │       │   ├── 3-zipCrack.py
│   │   │       │   ├── dictionary.txt
│   │   │       │   ├── evil.zip
│   │   │       │   ├── passwords.txt
│   │   │       │   └── vuln-banners.txt
│   │   │       ├── CH2
│   │   │       │   ├── 1-portScan.py
│   │   │       │   ├── 2-nmapScan.py
│   │   │       │   ├── 3-botNet.py
│   │   │       │   ├── 3-bruteKey.py
│   │   │       │   ├── 3-pxsshCommand.py
│   │   │       │   ├── 3-sshBrute.py
│   │   │       │   ├── 3-sshCommand.py
│   │   │       │   ├── 4-anonLogin.py
│   │   │       │   ├── 4-bruteLogin.py
│   │   │       │   ├── 4-defaultPages.py
│   │   │       │   ├── 4-injectPage.py
│   │   │       │   ├── 4-massCompromise.py
│   │   │       │   ├── 5-conficker.py
│   │   │       │   ├── 6-freeFloat.py
│   │   │       │   ├── pass.txt
│   │   │       │   └── userpass.txt
│   │   │       ├── CH3
│   │   │       │   ├── 1-discoverNetworks.py
│   │   │       │   ├── 2-dumpRecycleBin.py
│   │   │       │   ├── 3-pdfRead.py
│   │   │       │   ├── 4-exifFetch.py
│   │   │       │   ├── 5-skypeParse.py
│   │   │       │   ├── 6-firefoxParse.py
│   │   │       │   ├── 7-iphoneMessages.py
│   │   │       │   ├── firefox_profile.zip
│   │   │       │   └── skype_profile.zip
│   │   │       ├── CH4
│   │   │       │   ├── 1-geoIP.py
│   │   │       │   ├── 10-idsFoil.py
│   │   │       │   ├── 2-printDirection.py
│   │   │       │   ├── 3-geoPrint.py
│   │   │       │   ├── 4-googleEarthPcap.py
│   │   │       │   ├── 5-findDDoS.py
│   │   │       │   ├── 6-spoofDetect.py
│   │   │       │   ├── 7-testFastFlux.py
│   │   │       │   ├── 8-testDomainFlux.py
│   │   │       │   ├── 9-mitnickAttack.py
│   │   │       │   ├── attack.pcap
│   │   │       │   ├── domainFlux.pcap
│   │   │       │   ├── download.pcap
│   │   │       │   ├── fastFlux.pcap
│   │   │       │   ├── geotest.kml
│   │   │       │   ├── geotest.pcap
│   │   │       │   └── hivemind.pcap
│   │   │       ├── CH5
│   │   │       │   ├── 1-testSniff.py
│   │   │       │   ├── 10-iphoneFinder.py
│   │   │       │   ├── 11-rfcommScan.py
│   │   │       │   ├── 12-sdpScan.py
│   │   │       │   ├── 13-ninjaPrint.py
│   │   │       │   ├── 14-blueBug.py
│   │   │       │   ├── 2-creditSniff.py
│   │   │       │   ├── 3-hotelSniff.py
│   │   │       │   ├── 4-googleSniff.py
│   │   │       │   ├── 5-ftpSniff.py
│   │   │       │   ├── 6-sniffHidden.py
│   │   │       │   ├── 6-sniffProbe.py
│   │   │       │   ├── 7-dup.py
│   │   │       │   ├── 7-uavSniff.py
│   │   │       │   ├── 8-fireCatcher.py
│   │   │       │   ├── 9-btFind.py
│   │   │       │   ├── 9-btScan.py
│   │   │       │   └── dup.py
│   │   │       ├── CH6
│   │   │       │   ├── 1-viewPage.py
│   │   │       │   ├── 10-sendMail.py
│   │   │       │   ├── 10-sendSpam.py
│   │   │       │   ├── 2-proxyTest.py
│   │   │       │   ├── 3-userAgentTest.py
│   │   │       │   ├── 4-printCookies.py
│   │   │       │   ├── 5-kittenTest.py
│   │   │       │   ├── 6-linkParser.py
│   │   │       │   ├── 7-imageMirror.py
│   │   │       │   ├── 8-anonGoogle.py
│   │   │       │   ├── 8-googleJson.py
│   │   │       │   ├── 8-googleJumbled.py
│   │   │       │   ├── 9-twitterClass.py
│   │   │       │   ├── 9-twitterGeo.py
│   │   │       │   ├── 9-twitterInterests.py
│   │   │       │   ├── 9-twitterRecon.py
│   │   │       │   ├── anonBrowser.py
│   │   │       │   ├── anonBrowser.pyc
│   │   │       │   ├── mlb-cities.txt
│   │   │       │   └── twitterClass.py
│   │   │       ├── CH7
│   │   │       │   └── 2-virusCheck.py
│   │   │       ├── Python
│   │   │       └── Violent Python - A Cookbook for Hackers, Forensic Analysts, Penetration Testers and Security Engineers.pdf
│   │   ├── Real-World Bug Hunting.pdf
│   │   ├── Resources.pdf
│   │   ├── awae.pdf
│   │   ├── cherry.ctx.pdf
│   │   ├── tulpa-pwk-prep-guide1.pdf
│   │   └── web-hacking-101.pdf
│   ├── OSCP Resources
│   │   ├── 102_OSCP(Chlorine) .txt
│   │   ├── 106.pdf
│   │   ├── 137418089-Penetration-Testing-Sample-Report.pdf
│   │   ├── 376044874-How-to-OSCP.pdf
│   │   ├── 402262195-Passing-OSCP-pdf .pdf
│   │   ├── 441901283-dokumen-site-oscp-survival-guide-pdf .pdf
│   │   ├── 442524889-OSCP-Preparation-Guide-Infosectrain.pdf
│   │   ├── 85-Winpower.txt
│   │   ├── 86-pic-a-point.txt
│   │   ├── 87-DiskSavvy
│   │   ├── A1.OSCP_EXAM_MACHINE_20200708.pdf
│   │   ├── A2.PWKLabs.docx
│   │   ├── A2.PWKLabs.pdf
│   │   ├── A4.OSCP-OS-Exam-Report-LibSSH&PlaySMS.pdf
│   │   ├── ABD-master.zip
│   │   ├── Archive
│   │   │   ├── 102_OSCP(Chlorine).txt
│   │   │   ├── 106.pdf
│   │   │   ├── 85-Winpower.txt
│   │   │   ├── 86-pic-a-point.txt
│   │   │   ├── 87-DiskSavvy
│   │   │   ├── Devbox.txt
│   │   │   ├── Gitstack.txt
│   │   │   ├── Konki .97 WalkThrough.pdf
│   │   │   ├── Moosef_107
│   │   │   │   ├── MFS .107 WalkThrough.pdf
│   │   │   │   ├── Moosefs-root.txt
│   │   │   │   ├── Updated Moosefs root.txt
│   │   │   │   └── moosefs_20_point__1.pdf
│   │   │   ├── Perseus_200.png
│   │   │   ├── Phplist_113.txt
│   │   │   ├── Theasues_Updated(.109).txt
│   │   │   ├── Tomcat_101
│   │   │   │   ├── 25point-tomcat.pdf
│   │   │   │   └── tomcat_root.jpg
│   │   │   ├── eyesofnetwork_90.txt
│   │   │   ├── orchard_112.docx
│   │   │   └── tablemanners(.98).txt
│   │   ├── Ashley Brown _ NagY(.153 _.161).pdf
│   │   ├── Asystole(.105).pdf
│   │   ├── Bengine(.85).pdf
│   │   ├── Bob The Builder _ Loctus (.150 _.160).pdf
│   │   ├── Codiod(.55).pdf
│   │   ├── Devbox .txt
│   │   ├── EBDMACHINE(.218).pdf
│   │   ├── Ekzameno(.67).pdf
│   │   ├── Extra
│   │   │   └── Phplist, orchard, tomcat and moosefs
│   │   │       ├── 25point-tomcat.pdf
│   │   │       ├── Orchard.jpg
│   │   │       ├── Phplist1.jpg
│   │   │       ├── Phplist2.jpg
│   │   │       ├── moosefs_20_point_.pdf
│   │   │       └── theasues.jpg
│   │   ├── Gitstack.txt
│   │   ├── Harakiri(.81).pdf
│   │   ├── HomeStudy(.42).pdf
│   │   ├── Kali-Linux-Revealed-1st-edition.pdf
│   │   ├── Konki .97 WalkThrough.pdf
│   │   ├── LazyB(.41).pdf
│   │   ├── Luke’s_Ultimate_OSCP_Guide__Part (2).pdf
│   │   ├── Luke’s_Ultimate_OSCP_Guide__Part (3).pdf
│   │   ├── Luke’s_Ultimate_OSCP_Guide__Part.pdf
│   │   ├── Moosef_107
│   │   │   ├── MFS .107 WalkThrough.pdf
│   │   │   ├── Moosefs-root.txt
│   │   │   ├── Updated Moosefs root.txt
│   │   │   └── moosefs_20_point__1.pdf
│   │   ├── NetSecFocus Trophy Room.xlsx
│   │   ├── New Text Document.txt
│   │   ├── OSCP Notes
│   │   │   └── OSCP
│   │   │       ├── Algernon
│   │   │       │   └── Exploitation Guide for Algernon.md
│   │   │       ├── ClamAV
│   │   │       │   └── Exploitation Guide for ClamAV.md
│   │   │       ├── HelpDesk
│   │   │       │   └── Exploitation Guide for HelpDesk.md
│   │   │       ├── Hetemit
│   │   │       │   └── Exploitation Guide for Hetemit.md
│   │   │       ├── Interface
│   │   │       │   └── Exploitation Guide for Interface.md
│   │   │       ├── Nappa
│   │   │       │   └── Exploitation Guide for Nappa.md
│   │   │       ├── Pebbles
│   │   │       │   └── Exploitation Guide for Pebbles.md
│   │   │       ├── Reconstruction
│   │   │       │   └── Exploitation Guide for Reconstruction.md
│   │   │       ├── Snookums
│   │   │       │   └── Exploitation Guide for Snookums.md
│   │   │       ├── Twiggy
│   │   │       │   └── Exploitation Guide for Twiggy.md
│   │   │       ├── UC404
│   │   │       │   └── Exploitation Guide for UC404.md
│   │   │       ├── Wombo
│   │   │       │   ├── 48272.rb
│   │   │       │   ├── RedisModules-ExecuteCommand
│   │   │       │   │   ├── LICENSE
│   │   │       │   │   ├── Makefile
│   │   │       │   │   ├── README.md
│   │   │       │   │   ├── module.so
│   │   │       │   │   ├── redismodule.h
│   │   │       │   │   ├── rmutil
│   │   │       │   │   │   ├── Makefile
│   │   │       │   │   │   ├── alloc.c
│   │   │       │   │   │   ├── alloc.h
│   │   │       │   │   │   ├── alloc.o
│   │   │       │   │   │   ├── heap.c
│   │   │       │   │   │   ├── heap.h
│   │   │       │   │   │   ├── librmutil.a
│   │   │       │   │   │   ├── logging.h
│   │   │       │   │   │   ├── periodic.c
│   │   │       │   │   │   ├── periodic.h
│   │   │       │   │   │   ├── periodic.o
│   │   │       │   │   │   ├── priority_queue.c
│   │   │       │   │   │   ├── priority_queue.h
│   │   │       │   │   │   ├── sds.c
│   │   │       │   │   │   ├── sds.h
│   │   │       │   │   │   ├── sds.o
│   │   │       │   │   │   ├── sdsalloc.h
│   │   │       │   │   │   ├── strings.c
│   │   │       │   │   │   ├── strings.h
│   │   │       │   │   │   ├── strings.o
│   │   │       │   │   │   ├── test.h
│   │   │       │   │   │   ├── test_heap.c
│   │   │       │   │   │   ├── test_periodic.c
│   │   │       │   │   │   ├── test_priority_queue.c
│   │   │       │   │   │   ├── test_util.h
│   │   │       │   │   │   ├── test_vector.c
│   │   │       │   │   │   ├── util.c
│   │   │       │   │   │   ├── util.h
│   │   │       │   │   │   ├── util.o
│   │   │       │   │   │   ├── vector.c
│   │   │       │   │   │   ├── vector.h
│   │   │       │   │   │   └── vector.o
│   │   │       │   │   └── src
│   │   │       │   │       ├── Makefile
│   │   │       │   │       ├── module.c
│   │   │       │   │       ├── module.o
│   │   │       │   │       └── module.so
│   │   │       │   ├── exp.so
│   │   │       │   ├── module.so
│   │   │       │   ├── redis-rogue-getshell
│   │   │       │   │   ├── 1.png
│   │   │       │   │   ├── LICENSE
│   │   │       │   │   ├── RedisModulesSDK
│   │   │       │   │   │   ├── Makefile
│   │   │       │   │   │   ├── exp
│   │   │       │   │   │   │   ├── Makefile
│   │   │       │   │   │   │   ├── exp.c
│   │   │       │   │   │   │   ├── exp.o
│   │   │       │   │   │   │   └── exp.so
│   │   │       │   │   │   ├── exp.so
│   │   │       │   │   │   ├── redismodule.h
│   │   │       │   │   │   └── rmutil
│   │   │       │   │   │       ├── alloc.c
│   │   │       │   │   │       ├── alloc.h
│   │   │       │   │   │       ├── alloc.o
│   │   │       │   │   │       ├── heap.c
│   │   │       │   │   │       ├── heap.h
│   │   │       │   │   │       ├── librmutil.a
│   │   │       │   │   │       ├── logging.h
│   │   │       │   │   │       ├── periodic.c
│   │   │       │   │   │       ├── periodic.h
│   │   │       │   │   │       ├── periodic.o
│   │   │       │   │   │       ├── priority_queue.c
│   │   │       │   │   │       ├── priority_queue.h
│   │   │       │   │   │       ├── sds.c
│   │   │       │   │   │       ├── sds.h
│   │   │       │   │   │       ├── sds.o
│   │   │       │   │   │       ├── sdsalloc.h
│   │   │       │   │   │       ├── strings.c
│   │   │       │   │   │       ├── strings.h
│   │   │       │   │   │       ├── strings.o
│   │   │       │   │   │       ├── test.h
│   │   │       │   │   │       ├── test_heap.c
│   │   │       │   │   │       ├── test_periodic.c
│   │   │       │   │   │       ├── test_priority_queue.c
│   │   │       │   │   │       ├── test_util.h
│   │   │       │   │   │       ├── test_vector.c
│   │   │       │   │   │       ├── util.c
│   │   │       │   │   │       ├── util.h
│   │   │       │   │   │       ├── util.o
│   │   │       │   │   │       ├── vector.c
│   │   │       │   │   │       ├── vector.h
│   │   │       │   │   │       └── vector.o
│   │   │       │   │   └── redis-master.py
│   │   │       │   ├── redis-rogue-server
│   │   │       │   │   ├── LICENSE
│   │   │       │   │   ├── README.md
│   │   │       │   │   ├── RedisModulesSDK
│   │   │       │   │   │   ├── Makefile
│   │   │       │   │   │   ├── exp
│   │   │       │   │   │   │   ├── Makefile
│   │   │       │   │   │   │   └── exp.c
│   │   │       │   │   │   ├── redismodule.h
│   │   │       │   │   │   └── rmutil
│   │   │       │   │   │       ├── Makefile
│   │   │       │   │   │       ├── alloc.c
│   │   │       │   │   │       ├── alloc.h
│   │   │       │   │   │       ├── alloc.o
│   │   │       │   │   │       ├── heap.c
│   │   │       │   │   │       ├── heap.h
│   │   │       │   │   │       ├── librmutil.a
│   │   │       │   │   │       ├── logging.h
│   │   │       │   │   │       ├── periodic.c
│   │   │       │   │   │       ├── periodic.h
│   │   │       │   │   │       ├── periodic.o
│   │   │       │   │   │       ├── priority_queue.c
│   │   │       │   │   │       ├── priority_queue.h
│   │   │       │   │   │       ├── sds.c
│   │   │       │   │   │       ├── sds.h
│   │   │       │   │   │       ├── sds.o
│   │   │       │   │   │       ├── sdsalloc.h
│   │   │       │   │   │       ├── strings.c
│   │   │       │   │   │       ├── strings.h
│   │   │       │   │   │       ├── strings.o
│   │   │       │   │   │       ├── test.h
│   │   │       │   │   │       ├── test_heap.c
│   │   │       │   │   │       ├── test_periodic.c
│   │   │       │   │   │       ├── test_priority_queue.c
│   │   │       │   │   │       ├── test_util.h
│   │   │       │   │   │       ├── test_vector.c
│   │   │       │   │   │       ├── util.c
│   │   │       │   │   │       ├── util.h
│   │   │       │   │   │       ├── util.o
│   │   │       │   │   │       ├── vector.c
│   │   │       │   │   │       ├── vector.h
│   │   │       │   │   │       └── vector.o
│   │   │       │   │   ├── exp.so
│   │   │       │   │   └── redis-rogue-server.py
│   │   │       │   ├── redis-rogue-server.py
│   │   │       │   ├── redis_cpe.py
│   │   │       │   ├── redis_cpe_2.py
│   │   │       │   ├── redis_exploit.py
│   │   │       │   └── walk
│   │   │       ├── XposedAPI
│   │   │       │   └── Exploitation Guide for XposedAPI.md
│   │   │       └── bratarina
│   │   │           ├── Bratrarina.md
│   │   │           └── Bratrarina_oficial.md
│   │   ├── OSCP Stuff + Write-Up
│   │   │   └── OSCP Stuff.txt
│   │   ├── OSCP Stuff + Write-Up .rar
│   │   ├── OSCP Writeup Leak 2021.zip
│   │   ├── OSCP Writeup Leak.zip
│   │   ├── OSCP write up latest 2021.zip
│   │   ├── OSCP-EXAM .txt
│   │   ├── OSCP_Cheatsheet_Updated 2021.zip
│   │   ├── OSCP_Cheatsheet_Updated-20200913T201514Z-001
│   │   │   ├── 192.168.33.55
│   │   │   │   ├── 1 nmap.png
│   │   │   │   ├── 2 go buster.png
│   │   │   │   ├── 3 wed dav pass.png
│   │   │   │   ├── 4 crack htpasswd.png
│   │   │   │   ├── 5 upload nc exe to webdav.png
│   │   │   │   ├── 6 nc exe uploaded.png
│   │   │   │   └── EoP and DLL.png
│   │   │   ├── A1.OSCP_EXAM_MACHINE_20200708-pass-cyberport.pdf
│   │   │   ├── A2.PWKLabs.pdf
│   │   │   ├── A3.Phplist_orchard_tomcat_moosefs.zip
│   │   │   ├── A4.OSCP-OS-Exam-Report-LibSSH_PlaySMS.pdf
│   │   │   ├── Phplist, orchard, tomcat and moosefs
│   │   │   │   ├── 25point-tomcat.pdf
│   │   │   │   ├── Orchard.jpg
│   │   │   │   ├── Phplist1.jpg
│   │   │   │   ├── Phplist2.jpg
│   │   │   │   ├── moosefs_20_point_.pdf
│   │   │   │   └── theasues.jpg
│   │   │   ├── Phplist, orchard, tomcat and moosefs 2
│   │   │   │   ├── 25point-tomcat.pdf
│   │   │   │   ├── Orchard.jpg
│   │   │   │   ├── Phplist1.jpg
│   │   │   │   ├── Phplist2.jpg
│   │   │   │   └── moosefs_20_point_.pdf
│   │   │   ├── october2.pdf
│   │   │   └── tiki tiki
│   │   │       ├── 1.png
│   │   │       ├── 2.png
│   │   │       └── 3.png
│   │   ├── OSCP_Exam_Leaks-33VMs 2021.zip
│   │   ├── OSCP_Exam_Leaks-33VMs-active 2021.zip
│   │   ├── October(.43.pdf
│   │   ├── Offensive Security OSCP v2020 .pdf
│   │   ├── PT0-001.pdf
│   │   ├── PWK-Example-Report-v1 .pdf
│   │   ├── Perseus_200 .png
│   │   ├── Phplist, orchard, tomcat and moosefs
│   │   │   ├── 25point-tomcat.pdf
│   │   │   ├── Orchard.jpg
│   │   │   ├── Phplist1.jpg
│   │   │   ├── Phplist2.jpg
│   │   │   ├── moosefs_20_point_.pdf
│   │   │   └── theasues.jpg
│   │   ├── Phplist_113.txt
│   │   ├── Rocinante(.82) .pdf
│   │   ├── Socket_WP(.46) .pdf
│   │   ├── Textian(.44).pdf
│   │   ├── Theasues_Updated(.109).txt
│   │   ├── Tiki(.67) .pdf
│   │   ├── Tomcat_101
│   │   │   ├── 25point-tomcat.pdf
│   │   │   └── tomcat_root.jpg
│   │   ├── Vulcan(.53).pdf
│   │   ├── eyesofnetwork_90 .txt
│   │   ├── gabarito
│   │   │   ├── 102_OSCP(Chlorine).txt
│   │   │   ├── 106.pdf
│   │   │   ├── 85-Winpower.txt
│   │   │   ├── 86-pic-a-point.txt
│   │   │   ├── 87-DiskSavvy
│   │   │   ├── 89_-_ESM.pdf
│   │   │   ├── A1.OSCP_EXAM_MACHINE_20200708.pdf
│   │   │   ├── A2.PWKLabs.pdf
│   │   │   ├── A4.OSCP-OS-Exam-Report-LibSSH&PlaySMS.pdf
│   │   │   ├── Archive
│   │   │   │   ├── 102_OSCP(Chlorine).txt
│   │   │   │   ├── 106.pdf
│   │   │   │   ├── 85-Winpower.txt
│   │   │   │   ├── 86-pic-a-point.txt
│   │   │   │   ├── 87-DiskSavvy
│   │   │   │   ├── Devbox.txt
│   │   │   │   ├── Gitstack.txt
│   │   │   │   ├── Konki .97 WalkThrough.pdf
│   │   │   │   ├── Moosef_107
│   │   │   │   │   ├── MFS .107 WalkThrough.pdf
│   │   │   │   │   ├── Moosefs-root.txt
│   │   │   │   │   ├── Updated Moosefs root.txt
│   │   │   │   │   └── moosefs_20_point__1.pdf
│   │   │   │   ├── Perseus_200.png
│   │   │   │   ├── Phplist_113.txt
│   │   │   │   ├── Theasues_Updated(.109).txt
│   │   │   │   ├── Tomcat_101
│   │   │   │   │   ├── 25point-tomcat.pdf
│   │   │   │   │   └── tomcat_root.jpg
│   │   │   │   ├── eyesofnetwork_90.txt
│   │   │   │   ├── orchard_112.docx
│   │   │   │   └── tablemanners(.98).txt
│   │   │   ├── Ashley Brown _ NagY(.153 _.161).pdf
│   │   │   ├── Asystole(.105).pdf
│   │   │   ├── Bengine(.85).pdf
│   │   │   ├── Bob The Builder _ Loctus (.150 _.160).pdf
│   │   │   ├── Codiod(.55).pdf
│   │   │   ├── Devbox.txt
│   │   │   ├── EBDMACHINE(.218).pdf
│   │   │   ├── Ekzameno(.67).pdf
│   │   │   ├── Extra
│   │   │   │   └── Phplist, orchard, tomcat and moosefs
│   │   │   │       ├── 25point-tomcat.pdf
│   │   │   │       ├── Orchard.jpg
│   │   │   │       ├── Phplist1.jpg
│   │   │   │       ├── Phplist2.jpg
│   │   │   │       ├── moosefs_20_point_.pdf
│   │   │   │       └── theasues.jpg
│   │   │   ├── Gitstack.txt
│   │   │   ├── Harakiri(.81).pdf
│   │   │   ├── HomeStudy(.42).pdf
│   │   │   ├── Konki .97 WalkThrough.pdf
│   │   │   ├── LazyB(.41).pdf
│   │   │   ├── Moosef_107
│   │   │   │   ├── MFS .107 WalkThrough.pdf
│   │   │   │   ├── Moosefs-root.txt
│   │   │   │   ├── Updated Moosefs root.txt
│   │   │   │   └── moosefs_20_point__1.pdf
│   │   │   ├── October(.43).pdf
│   │   │   ├── Perseus_200.png
│   │   │   ├── Phplist, orchard, tomcat and moosefs
│   │   │   │   ├── 25point-tomcat.pdf
│   │   │   │   ├── Orchard.jpg
│   │   │   │   ├── Phplist1.jpg
│   │   │   │   ├── Phplist2.jpg
│   │   │   │   ├── moosefs_20_point_.pdf
│   │   │   │   └── theasues.jpg
│   │   │   ├── Phplist_113.txt
│   │   │   ├── Rocinante(.82).pdf
│   │   │   ├── Socket_WP(.46).pdf
│   │   │   ├── Textian(.44).pdf
│   │   │   ├── Theasues_Updated(.109).txt
│   │   │   ├── Tiki(.67).pdf
│   │   │   ├── Tomcat_101
│   │   │   │   ├── 25point-tomcat.pdf
│   │   │   │   └── tomcat_root.jpg
│   │   │   ├── Vulcan(.53).pdf
│   │   │   ├── eyesofnetwork_90.txt
│   │   │   ├── lab
│   │   │   │   ├── 10.1.1.1
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.1.1.246
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.1.1.27
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.10
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.101
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.115
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.116
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.120
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.121
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.122
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.123
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.128
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.13
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.133
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.136
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.14
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.141
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.146
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.20
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.209
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.21
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.217
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.22
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.222
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.223
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.226
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.227
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.229
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.231
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.234
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.237
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.24
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.251
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.252
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.31
│   │   │   │   │   ├── adodb.txt
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.35
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.5
│   │   │   │   │   ├── bank.txt
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.50
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.71
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.72
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.73
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.75
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.11.1.8
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.2.2.150
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.2.2.218
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.2.2.22
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.2.2.23
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.2.2.31
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.2.2.86
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.3.3.14
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.3.3.190
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.3.3.201
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.3.3.34
│   │   │   │   │   └── command.txt
│   │   │   │   ├── 10.3.3.42
│   │   │   │   │   └── command.txt
│   │   │   │   └── 10.3.3.88
│   │   │   │       └── command.txt
│   │   │   ├── orchard_112.docx
│   │   │   ├── password.file_README.txt
│   │   │   ├── tablemanners(.98).txt
│   │   │   ├── v1RUS(.84).pdf
│   │   │   └── webpack(.96).pdf
│   │   ├── jet.zip
│   │   ├── lab
│   │   │   ├── 10.1.1.1
│   │   │   │   └── command.txt
│   │   │   ├── 10.1.1.246
│   │   │   │   └── command.txt
│   │   │   ├── 10.1.1.27
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.10
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.101
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.115
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.116
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.120
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.121
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.122
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.123
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.128
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.13
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.133
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.136
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.14
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.141
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.146
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.20
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.209
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.21
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.217
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.22
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.222
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.223
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.226
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.227
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.229
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.231
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.234
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.237
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.24
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.251
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.252
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.31
│   │   │   │   ├── adodb.txt
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.35
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.5
│   │   │   │   ├── bank.txt
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.50
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.71
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.72
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.73
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.75
│   │   │   │   └── command.txt
│   │   │   ├── 10.11.1.8
│   │   │   │   └── command.txt
│   │   │   ├── 10.2.2.150
│   │   │   │   └── command.txt
│   │   │   ├── 10.2.2.218
│   │   │   │   └── command.txt
│   │   │   ├── 10.2.2.22
│   │   │   │   └── command.txt
│   │   │   ├── 10.2.2.23
│   │   │   │   └── command.txt
│   │   │   ├── 10.2.2.31
│   │   │   │   └── command.txt
│   │   │   ├── 10.2.2.86
│   │   │   │   └── command.txt
│   │   │   ├── 10.3.3.14
│   │   │   │   └── command.txt
│   │   │   ├── 10.3.3.190
│   │   │   │   └── command.txt
│   │   │   ├── 10.3.3.201
│   │   │   │   └── command.txt
│   │   │   ├── 10.3.3.34
│   │   │   │   └── command.txt
│   │   │   ├── 10.3.3.42
│   │   │   │   └── command.txt
│   │   │   └── 10.3.3.88
│   │   │       └── command.txt
│   │   ├── lpeworkshop-master.zip
│   │   ├── netcat-win32-1.11.zip
│   │   ├── odbg110 .zip
│   │   ├── orchard_112.docx
│   │   ├── osslsigncode-1.7.1-1-x86_64.zip
│   │   ├── password.file_README.txt
│   │   ├── pentest_compilation-master.zip
│   │   ├── pwkvk.pdf
│   │   ├── res.zip
│   │   ├── socat-1.7.3.2-1-x86_64.zip
│   │   ├── tablemanners(.98) .txt
│   │   ├── v1RUS(.84).pdf
│   │   └── webpack(.96).pdf
│   ├── OSCP exam report
│   │   └── res
│   │       ├── OS.zip
│   │       ├── OSCP-EXAM.txt
│   │       ├── OSCP_Cheatsheet_Updated-20200913T201514Z-001.zip
│   │       ├── RASTAS.pdf
│   │       ├── endgame.zip
│   │       ├── jet.zip
│   │       └── rastalabs.zip
│   └── PWK 2022
│       ├── config.codekit3
│       ├── media
│       │   ├── captions
│       │   │   ├── AD_00_00.vtt
│       │   │   ├── AD_01_00.vtt
│       │   │   ├── AD_02_00.vtt
│       │   │   ├── AD_02_01.vtt
│       │   │   ├── AD_02_02.vtt
│       │   │   ├── AD_02_03.vtt
│       │   │   ├── AD_02_04.vtt
│       │   │   ├── AD_02_05.vtt
│       │   │   ├── AD_03_00.vtt
│       │   │   ├── AD_03_01.vtt
│       │   │   ├── AD_03_02.vtt
│       │   │   ├── AD_03_03.vtt
│       │   │   ├── AD_03_04.vtt
│       │   │   ├── AD_03_05.vtt
│       │   │   ├── AD_04_00.vtt
│       │   │   ├── AD_04_01.vtt
│       │   │   ├── AD_04_02.vtt
│       │   │   ├── AD_04_03.vtt
│       │   │   ├── AD_04_04.vtt
│       │   │   ├── AD_05_00.vtt
│       │   │   ├── AD_05_01.vtt
│       │   │   ├── AD_05_02.vtt
│       │   │   ├── AD_06_00.vtt
│       │   │   ├── AE_00_00.vtt
│       │   │   ├── AE_01_00.vtt
│       │   │   ├── AE_02_00.vtt
│       │   │   ├── AE_02_01.vtt
│       │   │   ├── AE_03_00.vtt
│       │   │   ├── AE_03_01.vtt
│       │   │   ├── AE_03_02.vtt
│       │   │   ├── AE_03_03.vtt
│       │   │   ├── AE_04_00.vtt
│       │   │   ├── AIG_00_00.vtt
│       │   │   ├── AIG_01_00.vtt
│       │   │   ├── AIG_01_01.vtt
│       │   │   ├── AIG_01_02.vtt
│       │   │   ├── AIG_01_03.vtt
│       │   │   ├── AIG_01_04.vtt
│       │   │   ├── AIG_01_05.vtt
│       │   │   ├── AIG_01_06.vtt
│       │   │   ├── AIG_02_00.vtt
│       │   │   ├── AIG_02_01.vtt
│       │   │   ├── AIG_02_02.vtt
│       │   │   ├── AIG_02_03.vtt
│       │   │   ├── AIG_03_00.vtt
│       │   │   ├── AIG_03_01.vtt
│       │   │   ├── AIG_03_02.vtt
│       │   │   ├── AIG_04_00.vtt
│       │   │   ├── AIG_04_01.vtt
│       │   │   ├── AIG_04_02.vtt
│       │   │   ├── AIG_05_00.vtt
│       │   │   ├── AIG_06_00.vtt
│       │   │   ├── AIG_06_01.vtt
│       │   │   ├── AIG_06_02.vtt
│       │   │   ├── AIG_06_03.vtt
│       │   │   ├── AIG_07_00.vtt
│       │   │   ├── ATP_00_00.vtt
│       │   │   ├── ATP_01_00.vtt
│       │   │   ├── ATP_02_00.vtt
│       │   │   ├── ATP_02_01.vtt
│       │   │   ├── ATP_02_02.vtt
│       │   │   ├── ATP_02_03.vtt
│       │   │   ├── ATP_02_04.vtt
│       │   │   ├── ATP_02_05.vtt
│       │   │   ├── ATP_02_06.vtt
│       │   │   ├── ATP_02_07.vtt
│       │   │   ├── ATP_03_00.vtt
│       │   │   ├── ATP_03_01.vtt
│       │   │   ├── ATP_03_02.vtt
│       │   │   ├── ATP_04_00.vtt
│       │   │   ├── ATP_04_01.vtt
│       │   │   ├── ATP_04_02.vtt
│       │   │   ├── ATP_04_03.vtt
│       │   │   ├── ATP_05_00.vtt
│       │   │   ├── ATP_05_01.vtt
│       │   │   ├── ATP_05_02.vtt
│       │   │   ├── ATP_05_03.vtt
│       │   │   ├── ATP_06_00.vtt
│       │   │   ├── ATP_06_01.vtt
│       │   │   ├── ATP_06_02.vtt
│       │   │   ├── ATP_06_03.vtt
│       │   │   ├── ATP_06_04.vtt
│       │   │   ├── ATP_06_05.vtt
│       │   │   ├── ATP_07_00.vtt
│       │   │   ├── ATP_07_01.vtt
│       │   │   ├── ATP_08_00.vtt
│       │   │   ├── ATP_08_01.vtt
│       │   │   ├── ATP_08_02.vtt
│       │   │   ├── ATP_08_03.vtt
│       │   │   ├── ATP_08_04.vtt
│       │   │   ├── ATP_08_05.vtt
│       │   │   ├── ATP_09_00.vtt
│       │   │   ├── ATP_09_01.vtt
│       │   │   ├── ATP_10_00.vtt
│       │   │   ├── BO_00_00.vtt
│       │   │   ├── BO_01_00.vtt
│       │   │   ├── BO_01_01.vtt
│       │   │   ├── BO_01_02.vtt
│       │   │   ├── BO_02_00.vtt
│       │   │   ├── BO_02_01.vtt
│       │   │   ├── BO_02_02.vtt
│       │   │   ├── BO_02_03.vtt
│       │   │   ├── BO_02_04.vtt
│       │   │   ├── BS_00_00.vtt
│       │   │   ├── BS_01_00.vtt
│       │   │   ├── BS_02_00.vtt
│       │   │   ├── BS_02_01.vtt
│       │   │   ├── BS_02_02.vtt
│       │   │   ├── BS_03_00.vtt
│       │   │   ├── BS_04_00.vtt
│       │   │   ├── BS_05_00.vtt
│       │   │   ├── BS_05_01.vtt
│       │   │   ├── BS_05_02.vtt
│       │   │   ├── BS_06_00.vtt
│       │   │   ├── BS_07_00.vtt
│       │   │   ├── BS_07_01.vtt
│       │   │   ├── BS_07_02.vtt
│       │   │   ├── BS_07_03.vtt
│       │   │   ├── CLF_00_00.vtt
│       │   │   ├── CLF_01_00.vtt
│       │   │   ├── CLF_01_01.vtt
│       │   │   ├── CLF_01_02.vtt
│       │   │   ├── CLF_01_03.vtt
│       │   │   ├── CLF_02_00.vtt
│       │   │   ├── CLF_02_01.vtt
│       │   │   ├── CLF_02_02.vtt
│       │   │   ├── CLF_02_03.vtt
│       │   │   ├── CLF_02_04.vtt
│       │   │   ├── CLF_02_05.vtt
│       │   │   ├── CLF_03_00.vtt
│       │   │   ├── CLF_03_01.vtt
│       │   │   ├── CLF_03_02.vtt
│       │   │   ├── CLF_03_03.vtt
│       │   │   ├── CLF_03_04.vtt
│       │   │   ├── CLF_03_05.vtt
│       │   │   ├── CLF_04_00.vtt
│       │   │   ├── CLF_04_01.vtt
│       │   │   ├── CLF_04_02.vtt
│       │   │   ├── CLF_05_00.vtt
│       │   │   ├── CLF_05_01.vtt
│       │   │   ├── CLF_05_02.vtt
│       │   │   ├── CLF_05_03.vtt
│       │   │   ├── CLF_06_00.vtt
│       │   │   ├── CLF_06_01.vtt
│       │   │   ├── CLF_06_02.vtt
│       │   │   ├── CLF_06_03.vtt
│       │   │   ├── CLF_07_00.vtt
│       │   │   ├── CLF_07_01.vtt
│       │   │   ├── CLF_07_02.vtt
│       │   │   ├── CLF_08_00.vtt
│       │   │   ├── CLF_08_01.vtt
│       │   │   ├── CLF_08_02.vtt
│       │   │   ├── CLF_08_03.vtt
│       │   │   ├── CLF_09_00.vtt
│       │   │   ├── CLF_09_01.vtt
│       │   │   ├── CLF_09_02.vtt
│       │   │   ├── CLF_09_03.vtt
│       │   │   ├── CLF_10_00.vtt
│       │   │   ├── CSA_00_00.vtt
│       │   │   ├── CSA_01_00.vtt
│       │   │   ├── CSA_01_01.vtt
│       │   │   ├── CSA_01_02.vtt
│       │   │   ├── CSA_01_03.vtt
│       │   │   ├── CSA_01_04.vtt
│       │   │   ├── CSA_02_00.vtt
│       │   │   ├── CSA_02_01.vtt
│       │   │   ├── CSA_02_02.vtt
│       │   │   ├── CSA_03_00.vtt
│       │   │   ├── CSA_03_01.vtt
│       │   │   ├── CSA_03_02.vtt
│       │   │   ├── CSA_03_03.vtt
│       │   │   ├── CSA_04_00.vtt
│       │   │   ├── FE_00_00.vtt
│       │   │   ├── FE_01_00.vtt
│       │   │   ├── FE_01_01.vtt
│       │   │   ├── FE_01_02.vtt
│       │   │   ├── FE_01_03.vtt
│       │   │   ├── FE_01_04.vtt
│       │   │   ├── FE_01_05.vtt
│       │   │   ├── FE_01_06.vtt
│       │   │   ├── FE_02_00.vtt
│       │   │   ├── FE_02_01.vtt
│       │   │   ├── FE_02_02.vtt
│       │   │   ├── FE_02_03.vtt
│       │   │   ├── FE_02_04.vtt
│       │   │   ├── FE_03_00.vtt
│       │   │   ├── FT_00_00.vtt
│       │   │   ├── FT_01_00.vtt
│       │   │   ├── FT_01_01.vtt
│       │   │   ├── FT_01_02.vtt
│       │   │   ├── FT_01_03.vtt
│       │   │   ├── FT_02_00.vtt
│       │   │   ├── FT_02_01.vtt
│       │   │   ├── FT_02_02.vtt
│       │   │   ├── FT_02_03.vtt
│       │   │   ├── FT_02_04.vtt
│       │   │   ├── FT_02_05.vtt
│       │   │   ├── FT_03_00.vtt
│       │   │   ├── GCKL_00_00.vtt
│       │   │   ├── GCKL_01_00.vtt
│       │   │   ├── GCKL_02_00.vtt
│       │   │   ├── GCKL_03_00.vtt
│       │   │   ├── GCKL_04_00.vtt
│       │   │   ├── GCKL_04_01.vtt
│       │   │   ├── GCKL_04_02.vtt
│       │   │   ├── GCKL_04_03.vtt
│       │   │   ├── GCKL_05_00.vtt
│       │   │   ├── GCKL_05_01.vtt
│       │   │   ├── GCKL_05_02.vtt
│       │   │   ├── GCKL_06_00.vtt
│       │   │   ├── GCKL_06_01.vtt
│       │   │   ├── GCKL_06_02.vtt
│       │   │   ├── GCKL_06_03.vtt
│       │   │   ├── GCKL_06_04.vtt
│       │   │   ├── GCKL_06_05.vtt
│       │   │   ├── GCKL_06_06.vtt
│       │   │   ├── GCKL_07_00.vtt
│       │   │   ├── LBO_00_00.vtt
│       │   │   ├── LBO_01_00.vtt
│       │   │   ├── LBO_02_00.vtt
│       │   │   ├── LBO_03_00.vtt
│       │   │   ├── LBO_04_00.vtt
│       │   │   ├── LBO_05_00.vtt
│       │   │   ├── LBO_06_00.vtt
│       │   │   ├── LBO_07_00.vtt
│       │   │   ├── LBO_08_00.vtt
│       │   │   ├── LPE_00_00.vtt
│       │   │   ├── LPE_01_00.vtt
│       │   │   ├── LPE_02_00.vtt
│       │   │   ├── LPE_02_01.vtt
│       │   │   ├── LPE_02_02.vtt
│       │   │   ├── LPE_03_00.vtt
│       │   │   ├── LPE_04_00.vtt
│       │   │   ├── MF_00_00.vtt
│       │   │   ├── MF_01_00.vtt
│       │   │   ├── MF_01_01.vtt
│       │   │   ├── MF_01_02.vtt
│       │   │   ├── MF_01_03.vtt
│       │   │   ├── MF_02_00.vtt
│       │   │   ├── MF_03_00.vtt
│       │   │   ├── MF_03_01.vtt
│       │   │   ├── MF_03_02.vtt
│       │   │   ├── MF_03_03.vtt
│       │   │   ├── MF_03_04.vtt
│       │   │   ├── MF_03_05.vtt
│       │   │   ├── MF_03_06.vtt
│       │   │   ├── MF_03_07.vtt
│       │   │   ├── MF_04_00.vtt
│       │   │   ├── MF_05_00.vtt
│       │   │   ├── MF_05_01.vtt
│       │   │   ├── MF_05_02.vtt
│       │   │   ├── MF_05_03.vtt
│       │   │   ├── MF_05_04.vtt
│       │   │   ├── MF_06_00.vtt
│       │   │   ├── MF_07_00.vtt
│       │   │   ├── PA_00_00.vtt
│       │   │   ├── PA_01_00.vtt
│       │   │   ├── PA_01_01.vtt
│       │   │   ├── PA_02_00.vtt
│       │   │   ├── PA_03_00.vtt
│       │   │   ├── PA_03_01.vtt
│       │   │   ├── PA_03_02.vtt
│       │   │   ├── PA_03_03.vtt
│       │   │   ├── PA_03_04.vtt
│       │   │   ├── PA_04_00.vtt
│       │   │   ├── PA_04_01.vtt
│       │   │   ├── PA_04_02.vtt
│       │   │   ├── PA_04_03.vtt
│       │   │   ├── PA_05_00.vtt
│       │   │   ├── PE_00_00.vtt
│       │   │   ├── PE_01_00.vtt
│       │   │   ├── PE_01_01.vtt
│       │   │   ├── PE_01_02.vtt
│       │   │   ├── PE_01_03.vtt
│       │   │   ├── PE_02_00.vtt
│       │   │   ├── PE_02_01.vtt
│       │   │   ├── PE_02_02.vtt
│       │   │   ├── PE_02_03.vtt
│       │   │   ├── PE_03_00.vtt
│       │   │   ├── PE_04_00.vtt
│       │   │   ├── PIG_00_00.vtt
│       │   │   ├── PIG_01_00.vtt
│       │   │   ├── PIG_02_00.vtt
│       │   │   ├── PIG_03_00.vtt
│       │   │   ├── PIG_04_00.vtt
│       │   │   ├── PIG_05_00.vtt
│       │   │   ├── PIG_06_00.vtt
│       │   │   ├── PIG_07_00.vtt
│       │   │   ├── PIG_08_00.vtt
│       │   │   ├── PIG_09_00.vtt
│       │   │   ├── PIG_10_00.vtt
│       │   │   ├── PIG_11_00.vtt
│       │   │   ├── PIG_11_01.vtt
│       │   │   ├── PIG_11_02.vtt
│       │   │   ├── PIG_12_00.vtt
│       │   │   ├── PIG_12_01.vtt
│       │   │   ├── PIG_13_00.vtt
│       │   │   ├── PIG_14_00.vtt
│       │   │   ├── PIG_14_01.vtt
│       │   │   ├── PIG_14_02.vtt
│       │   │   ├── PIG_15_00.vtt
│       │   │   ├── PRT_00_00.vtt
│       │   │   ├── PRT_01_00.vtt
│       │   │   ├── PRT_01_01.vtt
│       │   │   ├── PRT_02_00.vtt
│       │   │   ├── PRT_02_01.vtt
│       │   │   ├── PRT_02_02.vtt
│       │   │   ├── PRT_02_03.vtt
│       │   │   ├── PRT_03_00.vtt
│       │   │   ├── PRT_04_00.vtt
│       │   │   ├── PRT_05_00.vtt
│       │   │   ├── PRT_06_00.vtt
│       │   │   ├── PT_00_00.vtt
│       │   │   ├── PT_01_00.vtt
│       │   │   ├── PT_01_01.vtt
│       │   │   ├── PT_01_02.vtt
│       │   │   ├── PT_01_03.vtt
│       │   │   ├── PT_01_04.vtt
│       │   │   ├── PT_02_00.vtt
│       │   │   ├── PT_02_01.vtt
│       │   │   ├── PT_02_02.vtt
│       │   │   ├── PT_02_03.vtt
│       │   │   ├── PT_03_00.vtt
│       │   │   ├── PT_03_01.vtt
│       │   │   ├── PT_03_02.vtt
│       │   │   ├── PT_03_03.vtt
│       │   │   ├── PT_03_04.vtt
│       │   │   ├── PT_03_05.vtt
│       │   │   ├── PT_03_06.vtt
│       │   │   ├── PT_03_07.vtt
│       │   │   ├── PT_03_08.vtt
│       │   │   ├── PT_04_00.vtt
│       │   │   ├── PT_04_01.vtt
│       │   │   ├── PT_04_02.vtt
│       │   │   ├── PT_04_03.vtt
│       │   │   ├── PT_04_04.vtt
│       │   │   ├── PT_04_05.vtt
│       │   │   ├── PT_05_00.vtt
│       │   │   ├── PT_05_01.vtt
│       │   │   ├── PT_05_02.vtt
│       │   │   ├── PX_00_00.vtt
│       │   │   ├── PX_01_00.vtt
│       │   │   ├── PX_01_01.vtt
│       │   │   ├── PX_01_02.vtt
│       │   │   ├── PX_02_00.vtt
│       │   │   ├── PX_02_01.vtt
│       │   │   ├── PX_02_02.vtt
│       │   │   ├── PX_02_03.vtt
│       │   │   ├── PX_02_04.vtt
│       │   │   ├── PX_02_05.vtt
│       │   │   ├── PX_02_06.vtt
│       │   │   ├── PX_03_00.vtt
│       │   │   ├── PX_03_01.vtt
│       │   │   ├── PX_03_02.vtt
│       │   │   ├── PX_03_03.vtt
│       │   │   ├── PX_03_04.vtt
│       │   │   ├── PX_04_00.vtt
│       │   │   ├── VS_00_00.vtt
│       │   │   ├── VS_01_00.vtt
│       │   │   ├── VS_01_01.vtt
│       │   │   ├── VS_02_00.vtt
│       │   │   ├── VS_02_01.vtt
│       │   │   ├── VS_02_02.vtt
│       │   │   ├── VS_02_03.vtt
│       │   │   ├── VS_02_04.vtt
│       │   │   ├── VS_02_05.vtt
│       │   │   ├── VS_02_06.vtt
│       │   │   ├── VS_03_00.vtt
│       │   │   ├── VS_04_00.vtt
│       │   │   ├── WAT_00_00.vtt
│       │   │   ├── WAT_01_00.vtt
│       │   │   ├── WAT_02_00.vtt
│       │   │   ├── WAT_02_01.vtt
│       │   │   ├── WAT_02_02.vtt
│       │   │   ├── WAT_02_03.vtt
│       │   │   ├── WAT_02_04.vtt
│       │   │   ├── WAT_02_05.vtt
│       │   │   ├── WAT_03_00.vtt
│       │   │   ├── WAT_03_01.vtt
│       │   │   ├── WAT_03_02.vtt
│       │   │   ├── WAT_03_03.vtt
│       │   │   ├── WAT_04_00.vtt
│       │   │   ├── WAT_05_00.vtt
│       │   │   ├── WAT_05_01.vtt
│       │   │   ├── WAT_06_00.vtt
│       │   │   ├── WAT_06_01.vtt
│       │   │   ├── WAT_06_02.vtt
│       │   │   ├── WAT_06_03.vtt
│       │   │   ├── WAT_06_04.vtt
│       │   │   ├── WAT_07_00.vtt
│       │   │   ├── WAT_07_01.vtt
│       │   │   ├── WAT_08_00.vtt
│       │   │   ├── WAT_08_01.vtt
│       │   │   ├── WAT_08_02.vtt
│       │   │   ├── WAT_08_03.vtt
│       │   │   ├── WAT_08_04.vtt
│       │   │   ├── WAT_08_05.vtt
│       │   │   ├── WAT_08_06.vtt
│       │   │   ├── WAT_08_07.vtt
│       │   │   ├── WAT_09_00.vtt
│       │   │   ├── WAT_09_01.vtt
│       │   │   ├── WAT_09_02.vtt
│       │   │   ├── WAT_09_03.vtt
│       │   │   ├── WAT_09_04.vtt
│       │   │   ├── WAT_09_05.vtt
│       │   │   ├── WAT_09_06.vtt
│       │   │   ├── WAT_09_07.vtt
│       │   │   ├── WAT_09_08.vtt
│       │   │   ├── WAT_09_09.vtt
│       │   │   ├── WAT_10_00.vtt
│       │   │   ├── WBO_00_00.vtt
│       │   │   ├── WBO_01_00.vtt
│       │   │   ├── WBO_01_01.vtt
│       │   │   ├── WBO_02_00.vtt
│       │   │   ├── WBO_02_01.vtt
│       │   │   ├── WBO_02_02.vtt
│       │   │   ├── WBO_02_03.vtt
│       │   │   ├── WBO_02_04.vtt
│       │   │   ├── WBO_02_05.vtt
│       │   │   ├── WBO_02_06.vtt
│       │   │   ├── WBO_02_07.vtt
│       │   │   ├── WBO_02_08.vtt
│       │   │   ├── WBO_02_09.vtt
│       │   │   └── WBO_03_00.vtt
│       │   ├── css
│       │   │   ├── main.css
│       │   │   └── plyr.css
│       │   ├── img
│       │   │   ├── Hide01.png
│       │   │   ├── ReadMe!!.png
│       │   │   ├── ReadMe!.png
│       │   │   ├── ReadMe.png
│       │   │   ├── ReadMe.txt
│       │   │   ├── Website.txt
│       │   │   ├── bars-green.svg
│       │   │   ├── bars-red.svg
│       │   │   ├── caret-down-gray.svg
│       │   │   ├── caret-down-green.svg
│       │   │   ├── caret-up-gray.svg
│       │   │   ├── caret-up-green.svg
│       │   │   ├── forward.svg
│       │   │   ├── hacker-green.png
│       │   │   ├── hacker-red.png
│       │   │   ├── life-ring-green.svg
│       │   │   ├── life-ring-red.svg
│       │   │   ├── offsec-logo-green.svg
│       │   │   ├── offsec-logo.svg
│       │   │   ├── restart.svg
│       │   │   ├── rewind.svg
│       │   │   ├── search-gray.svg
│       │   │   ├── search-green.svg
│       │   │   ├── search-red.svg
│       │   │   ├── sprite
│       │   │   │   ├── Icon_
│       │   │   │   ├── plyr-airplay.svg
│       │   │   │   ├── plyr-captions-off.svg
│       │   │   │   ├── plyr-captions-on.svg
│       │   │   │   ├── plyr-download.svg
│       │   │   │   ├── plyr-enter-fullscreen.svg
│       │   │   │   ├── plyr-exit-fullscreen.svg
│       │   │   │   ├── plyr-fast-forward.svg
│       │   │   │   ├── plyr-logo-vimeo.svg
│       │   │   │   ├── plyr-logo-youtube.svg
│       │   │   │   ├── plyr-muted.svg
│       │   │   │   ├── plyr-pause.svg
│       │   │   │   ├── plyr-pip.svg
│       │   │   │   ├── plyr-play.svg
│       │   │   │   ├── plyr-restart.svg
│       │   │   │   ├── plyr-rewind.svg
│       │   │   │   ├── plyr-settings.svg
│       │   │   │   └── plyr-volume.svg
│       │   │   ├── step-forward.svg
│       │   │   ├── sun-green.svg
│       │   │   ├── sun-red.svg
│       │   │   ├── times-green.svg
│       │   │   └── times-red.svg
│       │   ├── js
│       │   │   ├── course.json-min.js
│       │   │   ├── course.json.js
│       │   │   ├── main-min.js
│       │   │   ├── main.js
│       │   │   └── vendor
│       │   │       ├── foundation.js
│       │   │       ├── handlebars.js
│       │   │       ├── jquery-1.11.13.min.js
│       │   │       ├── jquery.js
│       │   │       ├── modernizr.js
│       │   │       ├── plyr.js
│       │   │       ├── typeahead.bundle.js
│       │   │       └── what-input.js
│       │   ├── scss
│       │   │   ├── _main.scss
│       │   │   ├── _mixins.scss
│       │   │   ├── _settings.scss
│       │   │   ├── config.rb
│       │   │   └── style.scss
│       │   └── video
│       │       ├── AD_00_00.mp4
│       │       ├── AD_01_00.mp4
│       │       ├── AD_02_00.mp4
│       │       ├── AD_02_01.mp4
│       │       ├── AD_02_02.mp4
│       │       ├── AD_02_03.mp4
│       │       ├── AD_02_04.mp4
│       │       ├── AD_02_05.mp4
│       │       ├── AD_03_00.mp4
│       │       ├── AD_03_01.mp4
│       │       ├── AD_03_02.mp4
│       │       ├── AD_03_03.mp4
│       │       ├── AD_03_04.mp4
│       │       ├── AD_03_05.mp4
│       │       ├── AD_04_00.mp4
│       │       ├── AD_04_01.mp4
│       │       ├── AD_04_02.mp4
│       │       ├── AD_04_03.mp4
│       │       ├── AD_04_04.mp4
│       │       ├── AD_05_00.mp4
│       │       ├── AD_05_01.mp4
│       │       ├── AD_05_02.mp4
│       │       ├── AD_06_00.mp4
│       │       ├── AE_00_00.mp4
│       │       ├── AE_01_00.mp4
│       │       ├── AE_02_00.mp4
│       │       ├── AE_02_01.mp4
│       │       ├── AE_03_00.mp4
│       │       ├── AE_03_01.mp4
│       │       ├── AE_03_02.mp4
│       │       ├── AE_03_03.mp4
│       │       ├── AE_04_00.mp4
│       │       ├── AIG_00_00.mp4
│       │       ├── AIG_01_00.mp4
│       │       ├── AIG_01_01.mp4
│       │       ├── AIG_01_02.mp4
│       │       ├── AIG_01_03.mp4
│       │       ├── AIG_01_04.mp4
│       │       ├── AIG_01_05.mp4
│       │       ├── AIG_01_06.mp4
│       │       ├── AIG_02_00.mp4
│       │       ├── AIG_02_01.mp4
│       │       ├── AIG_02_02.mp4
│       │       ├── AIG_02_03.mp4
│       │       ├── AIG_03_00.mp4
│       │       ├── AIG_03_01.mp4
│       │       ├── AIG_03_02.mp4
│       │       ├── AIG_04_00.mp4
│       │       ├── AIG_04_01.mp4
│       │       ├── AIG_04_02.mp4
│       │       ├── AIG_05_00.mp4
│       │       ├── AIG_06_00.mp4
│       │       ├── AIG_06_01.mp4
│       │       ├── AIG_06_02.mp4
│       │       ├── AIG_06_03.mp4
│       │       ├── AIG_07_00.mp4
│       │       ├── ATP_00_00.mp4
│       │       ├── ATP_01_00.mp4
│       │       ├── ATP_02_00.mp4
│       │       ├── ATP_02_01.mp4
│       │       ├── ATP_02_02.mp4
│       │       ├── ATP_02_03.mp4
│       │       ├── ATP_02_04.mp4
│       │       ├── ATP_02_05.mp4
│       │       ├── ATP_02_06.mp4
│       │       ├── ATP_02_07.mp4
│       │       ├── ATP_03_00.mp4
│       │       ├── ATP_03_01.mp4
│       │       ├── ATP_03_02.mp4
│       │       ├── ATP_04_00.mp4
│       │       ├── ATP_04_01.mp4
│       │       ├── ATP_04_02.mp4
│       │       ├── ATP_04_03.mp4
│       │       ├── ATP_05_00.mp4
│       │       ├── ATP_05_01.mp4
│       │       ├── ATP_05_02.mp4
│       │       ├── ATP_05_03.mp4
│       │       ├── ATP_06_00.mp4
│       │       ├── ATP_06_01.mp4
│       │       ├── ATP_06_02.mp4
│       │       ├── ATP_06_03.mp4
│       │       ├── ATP_06_04.mp4
│       │       ├── ATP_06_05.mp4
│       │       ├── ATP_07_00.mp4
│       │       ├── ATP_07_01.mp4
│       │       ├── ATP_08_00.mp4
│       │       ├── ATP_08_01.mp4
│       │       ├── ATP_08_02.mp4
│       │       ├── ATP_08_03.mp4
│       │       ├── ATP_08_04.mp4
│       │       ├── ATP_08_05.mp4
│       │       ├── ATP_09_00.mp4
│       │       ├── ATP_09_01.mp4
│       │       ├── ATP_10_00.mp4
│       │       ├── BO_00_00.mp4
│       │       ├── BO_01_00.mp4
│       │       ├── BO_01_01.mp4
│       │       ├── BO_01_02.mp4
│       │       ├── BO_02_00.mp4
│       │       ├── BO_02_01.mp4
│       │       ├── BO_02_02.mp4
│       │       ├── BO_02_03.mp4
│       │       ├── BO_02_04.mp4
│       │       ├── BS_00_00.mp4
│       │       ├── BS_01_00.mp4
│       │       ├── BS_02_00.mp4
│       │       ├── BS_02_01.mp4
│       │       ├── BS_02_02.mp4
│       │       ├── BS_03_00.mp4
│       │       ├── BS_04_00.mp4
│       │       ├── BS_05_00.mp4
│       │       ├── BS_05_01.mp4
│       │       ├── BS_05_02.mp4
│       │       ├── BS_06_00.mp4
│       │       ├── BS_07_00.mp4
│       │       ├── BS_07_01.mp4
│       │       ├── BS_07_02.mp4
│       │       ├── BS_07_03.mp4
│       │       ├── CLF_00_00.mp4
│       │       ├── CLF_01_00.mp4
│       │       ├── CLF_01_01.mp4
│       │       ├── CLF_01_02.mp4
│       │       ├── CLF_01_03.mp4
│       │       ├── CLF_02_00.mp4
│       │       ├── CLF_02_01.mp4
│       │       ├── CLF_02_02.mp4
│       │       ├── CLF_02_03.mp4
│       │       ├── CLF_02_04.mp4
│       │       ├── CLF_02_05.mp4
│       │       ├── CLF_03_00.mp4
│       │       ├── CLF_03_01.mp4
│       │       ├── CLF_03_02.mp4
│       │       ├── CLF_03_03.mp4
│       │       ├── CLF_03_04.mp4
│       │       ├── CLF_03_05.mp4
│       │       ├── CLF_04_00.mp4
│       │       ├── CLF_04_01.mp4
│       │       ├── CLF_04_02.mp4
│       │       ├── CLF_05_00.mp4
│       │       ├── CLF_05_01.mp4
│       │       ├── CLF_05_02.mp4
│       │       ├── CLF_05_03.mp4
│       │       ├── CLF_06_00.mp4
│       │       ├── CLF_06_01.mp4
│       │       ├── CLF_06_02.mp4
│       │       ├── CLF_06_03.mp4
│       │       ├── CLF_07_00.mp4
│       │       ├── CLF_07_01.mp4
│       │       ├── CLF_07_02.mp4
│       │       ├── CLF_08_00.mp4
│       │       ├── CLF_08_01.mp4
│       │       ├── CLF_08_02.mp4
│       │       ├── CLF_08_03.mp4
│       │       ├── CLF_09_00.mp4
│       │       ├── CLF_09_01.mp4
│       │       ├── CLF_09_02.mp4
│       │       ├── CLF_09_03.mp4
│       │       ├── CLF_10_00.mp4
│       │       ├── COPY_00_00.mp4
│       │       ├── CSA_00_00.mp4
│       │       ├── CSA_01_00.mp4
│       │       ├── CSA_01_01.mp4
│       │       ├── CSA_01_02.mp4
│       │       ├── CSA_01_03.mp4
│       │       ├── CSA_01_04.mp4
│       │       ├── CSA_02_00.mp4
│       │       ├── CSA_02_01.mp4
│       │       ├── CSA_02_02.mp4
│       │       ├── CSA_03_00.mp4
│       │       ├── CSA_03_01.mp4
│       │       ├── CSA_03_02.mp4
│       │       ├── CSA_03_03.mp4
│       │       ├── CSA_04_00.mp4
│       │       ├── FE_00_00.mp4
│       │       ├── FE_01_00.mp4
│       │       ├── FE_01_01.mp4
│       │       ├── FE_01_02.mp4
│       │       ├── FE_01_03.mp4
│       │       ├── FE_01_04.mp4
│       │       ├── FE_01_05.mp4
│       │       ├── FE_01_06.mp4
│       │       ├── FE_02_00.mp4
│       │       ├── FE_02_01.mp4
│       │       ├── FE_02_02.mp4
│       │       ├── FE_02_03.mp4
│       │       ├── FE_02_04.mp4
│       │       ├── FE_03_00.mp4
│       │       ├── FT_00_00.mp4
│       │       ├── FT_01_00.mp4
│       │       ├── FT_01_01.mp4
│       │       ├── FT_01_02.mp4
│       │       ├── FT_01_03.mp4
│       │       ├── FT_02_00.mp4
│       │       ├── FT_02_01.mp4
│       │       ├── FT_02_02.mp4
│       │       ├── FT_02_03.mp4
│       │       ├── FT_02_04.mp4
│       │       ├── FT_02_05.mp4
│       │       ├── FT_03_00.mp4
│       │       ├── GCKL_00_00.mp4
│       │       ├── GCKL_01_00.mp4
│       │       ├── GCKL_02_00.mp4
│       │       ├── GCKL_03_00.mp4
│       │       ├── GCKL_04_00.mp4
│       │       ├── GCKL_04_01.mp4
│       │       ├── GCKL_04_02.mp4
│       │       ├── GCKL_04_03.mp4
│       │       ├── GCKL_05_00.mp4
│       │       ├── GCKL_05_01.mp4
│       │       ├── GCKL_05_02.mp4
│       │       ├── GCKL_06_00.mp4
│       │       ├── GCKL_06_01.mp4
│       │       ├── GCKL_06_02.mp4
│       │       ├── GCKL_06_03.mp4
│       │       ├── GCKL_06_04.mp4
│       │       ├── GCKL_06_05.mp4
│       │       ├── GCKL_06_06.mp4
│       │       ├── GCKL_07_00.mp4
│       │       ├── Hide01.png
│       │       ├── LBO_00_00.mp4
│       │       ├── LBO_01_00.mp4
│       │       ├── LBO_02_00.mp4
│       │       ├── LBO_03_00.mp4
│       │       ├── LBO_04_00.mp4
│       │       ├── LBO_05_00.mp4
│       │       ├── LBO_06_00.mp4
│       │       ├── LBO_07_00.mp4
│       │       ├── LBO_08_00.mp4
│       │       ├── LPE_00_00.mp4
│       │       ├── LPE_01_00.mp4
│       │       ├── LPE_02_00.mp4
│       │       ├── LPE_02_01.mp4
│       │       ├── LPE_02_02.mp4
│       │       ├── LPE_03_00.mp4
│       │       ├── LPE_04_00.mp4
│       │       ├── MF_00_00.mp4
│       │       ├── MF_01_00.mp4
│       │       ├── MF_01_01.mp4
│       │       ├── MF_01_02.mp4
│       │       ├── MF_01_03.mp4
│       │       ├── MF_02_00.mp4
│       │       ├── MF_03_00.mp4
│       │       ├── MF_03_01.mp4
│       │       ├── MF_03_02.mp4
│       │       ├── MF_03_03.mp4
│       │       ├── MF_03_04.mp4
│       │       ├── MF_03_05.mp4
│       │       ├── MF_03_06.mp4
│       │       ├── MF_03_07.mp4
│       │       ├── MF_04_00.mp4
│       │       ├── MF_05_00.mp4
│       │       ├── MF_05_01.mp4
│       │       ├── MF_05_02.mp4
│       │       ├── MF_05_03.mp4
│       │       ├── MF_05_04.mp4
│       │       ├── MF_06_00.mp4
│       │       ├── MF_07_00.mp4
│       │       ├── PA_00_00.mp4
│       │       ├── PA_01_00.mp4
│       │       ├── PA_01_01.mp4
│       │       ├── PA_02_00.mp4
│       │       ├── PA_03_00.mp4
│       │       ├── PA_03_01.mp4
│       │       ├── PA_03_02.mp4
│       │       ├── PA_03_03.mp4
│       │       ├── PA_03_04.mp4
│       │       ├── PA_04_00.mp4
│       │       ├── PA_04_01.mp4
│       │       ├── PA_04_02.mp4
│       │       ├── PA_04_03.mp4
│       │       ├── PA_05_00.mp4
│       │       ├── PE_00_00.mp4
│       │       ├── PE_01_00.mp4
│       │       ├── PE_01_01.mp4
│       │       ├── PE_01_02.mp4
│       │       ├── PE_01_03.mp4
│       │       ├── PE_02_00.mp4
│       │       ├── PE_02_01.mp4
│       │       ├── PE_02_02.mp4
│       │       ├── PE_02_03.mp4
│       │       ├── PE_03_00.mp4
│       │       ├── PE_04_00.mp4
│       │       ├── PIG_00_00.mp4
│       │       ├── PIG_01_00.mp4
│       │       ├── PIG_02_00.mp4
│       │       ├── PIG_03_00.mp4
│       │       ├── PIG_04_00.mp4
│       │       ├── PIG_05_00.mp4
│       │       ├── PIG_06_00.mp4
│       │       ├── PIG_07_00.mp4
│       │       ├── PIG_08_00.mp4
│       │       ├── PIG_09_00.mp4
│       │       ├── PIG_10_00.mp4
│       │       ├── PIG_11_00.mp4
│       │       ├── PIG_11_01.mp4
│       │       ├── PIG_11_02.mp4
│       │       ├── PIG_12_00.mp4
│       │       ├── PIG_12_01.mp4
│       │       ├── PIG_13_00.mp4
│       │       ├── PIG_14_00.mp4
│       │       ├── PIG_14_01.mp4
│       │       ├── PIG_14_02.mp4
│       │       ├── PIG_15_00.mp4
│       │       ├── PRT_00_00.mp4
│       │       ├── PRT_01_00.mp4
│       │       ├── PRT_01_01.mp4
│       │       ├── PRT_02_00.mp4
│       │       ├── PRT_02_01.mp4
│       │       ├── PRT_02_02.mp4
│       │       ├── PRT_02_03.mp4
│       │       ├── PRT_03_00.mp4
│       │       ├── PRT_04_00.mp4
│       │       ├── PRT_05_00.mp4
│       │       ├── PRT_06_00.mp4
│       │       ├── PT_00_00.mp4
│       │       ├── PT_01_00.mp4
│       │       ├── PT_01_01.mp4
│       │       ├── PT_01_02.mp4
│       │       ├── PT_01_03.mp4
│       │       ├── PT_01_04.mp4
│       │       ├── PT_02_00.mp4
│       │       ├── PT_02_01.mp4
│       │       ├── PT_02_02.mp4
│       │       ├── PT_02_03.mp4
│       │       ├── PT_03_00.mp4
│       │       ├── PT_03_01.mp4
│       │       ├── PT_03_02.mp4
│       │       ├── PT_03_03.mp4
│       │       ├── PT_03_04.mp4
│       │       ├── PT_03_05.mp4
│       │       ├── PT_03_06.mp4
│       │       ├── PT_03_07.mp4
│       │       ├── PT_03_08.mp4
│       │       ├── PT_04_00.mp4
│       │       ├── PT_04_01.mp4
│       │       ├── PT_04_02.mp4
│       │       ├── PT_04_03.mp4
│       │       ├── PT_04_04.mp4
│       │       ├── PT_04_05.mp4
│       │       ├── PT_05_00.mp4
│       │       ├── PT_05_01.mp4
│       │       ├── PT_05_02.mp4
│       │       ├── PX_00_00.mp4
│       │       ├── PX_01_00.mp4
│       │       ├── PX_01_01.mp4
│       │       ├── PX_01_02.mp4
│       │       ├── PX_02_00.mp4
│       │       ├── PX_02_01.mp4
│       │       ├── PX_02_02.mp4
│       │       ├── PX_02_03.mp4
│       │       ├── PX_02_04.mp4
│       │       ├── PX_02_05.mp4
│       │       ├── PX_02_06.mp4
│       │       ├── PX_03_00.mp4
│       │       ├── PX_03_01.mp4
│       │       ├── PX_03_02.mp4
│       │       ├── PX_03_03.mp4
│       │       ├── PX_03_04.mp4
│       │       ├── PX_04_00.mp4
│       │       ├── ReadMe!!.png
│       │       ├── ReadMe!.png
│       │       ├── ReadMe.png
│       │       ├── ReadMe.txt
│       │       ├── VS_00_00.mp4
│       │       ├── VS_01_00.mp4
│       │       ├── VS_01_01.mp4
│       │       ├── VS_02_00.mp4
│       │       ├── VS_02_01.mp4
│       │       ├── VS_02_02.mp4
│       │       ├── VS_02_03.mp4
│       │       ├── VS_02_04.mp4
│       │       ├── VS_02_05.mp4
│       │       ├── VS_02_06.mp4
│       │       ├── VS_03_00.mp4
│       │       ├── VS_04_00.mp4
│       │       ├── WAT_00_00.mp4
│       │       ├── WAT_01_00.mp4
│       │       ├── WAT_02_00.mp4
│       │       ├── WAT_02_01.mp4
│       │       ├── WAT_02_02.mp4
│       │       ├── WAT_02_03.mp4
│       │       ├── WAT_02_04.mp4
│       │       ├── WAT_02_05.mp4
│       │       ├── WAT_03_00.mp4
│       │       ├── WAT_03_01.mp4
│       │       ├── WAT_03_02.mp4
│       │       ├── WAT_03_03.mp4
│       │       ├── WAT_04_00.mp4
│       │       ├── WAT_05_00.mp4
│       │       ├── WAT_05_01.mp4
│       │       ├── WAT_06_00.mp4
│       │       ├── WAT_06_01.mp4
│       │       ├── WAT_06_02.mp4
│       │       ├── WAT_06_03.mp4
│       │       ├── WAT_06_04.mp4
│       │       ├── WAT_07_00.mp4
│       │       ├── WAT_07_01.mp4
│       │       ├── WAT_08_00.mp4
│       │       ├── WAT_08_01.mp4
│       │       ├── WAT_08_02.mp4
│       │       ├── WAT_08_03.mp4
│       │       ├── WAT_08_04.mp4
│       │       ├── WAT_08_05.mp4
│       │       ├── WAT_08_06.mp4
│       │       ├── WAT_08_07.mp4
│       │       ├── WAT_09_00.mp4
│       │       ├── WAT_09_01.mp4
│       │       ├── WAT_09_02.mp4
│       │       ├── WAT_09_03.mp4
│       │       ├── WAT_09_04.mp4
│       │       ├── WAT_09_05.mp4
│       │       ├── WAT_09_06.mp4
│       │       ├── WAT_09_07.mp4
│       │       ├── WAT_09_08.mp4
│       │       ├── WAT_09_09.mp4
│       │       ├── WAT_10_00.mp4
│       │       ├── WBO_00_00.mp4
│       │       ├── WBO_01_00.mp4
│       │       ├── WBO_01_01.mp4
│       │       ├── WBO_02_00.mp4
│       │       ├── WBO_02_01.mp4
│       │       ├── WBO_02_02.mp4
│       │       ├── WBO_02_03.mp4
│       │       ├── WBO_02_04.mp4
│       │       ├── WBO_02_05.mp4
│       │       ├── WBO_02_06.mp4
│       │       ├── WBO_02_07.mp4
│       │       ├── WBO_02_08.mp4
│       │       ├── WBO_02_09.mp4
│       │       ├── WBO_03_00.mp4
│       │       └── Website.txt
│       └── node_modules
│           ├── connect
│           │   ├── History.md
│           │   ├── LICENSE
│           │   ├── ReadMe!!.png
│           │   ├── ReadMe!.png
│           │   ├── ReadMe.png
│           │   ├── ReadMe.txt
│           │   ├── Readme.md
│           │   ├── Website.txt
│           │   ├── index.js
│           │   ├── node_modules
│           │   │   ├── 0. All Channell.txt
│           │   │   ├── Hide01.png
│           │   │   ├── ReadMe!!.png
│           │   │   ├── ReadMe!.png
│           │   │   ├── ReadMe.png
│           │   │   ├── ReadMe.txt
│           │   │   ├── Website.txt
│           │   │   ├── debug
│           │   │   │   ├── 0. All Channell.txt
│           │   │   │   ├── Hide01.png
│           │   │   │   ├── History.md
│           │   │   │   ├── Makefile
│           │   │   │   ├── ReadMe!!.png
│           │   │   │   ├── ReadMe!.png
│           │   │   │   ├── ReadMe.png
│           │   │   │   ├── ReadMe.txt
│           │   │   │   ├── Readme.md
│           │   │   │   ├── Website.txt
│           │   │   │   ├── bower.json
│           │   │   │   ├── browser.js
│           │   │   │   ├── component.json
│           │   │   │   ├── debug.js
│           │   │   │   ├── node.js
│           │   │   │   ├── node_modules
│           │   │   │   │   ├── 0. All Channell.txt
│           │   │   │   │   ├── Hide01.png
│           │   │   │   │   ├── ReadMe!!.png
│           │   │   │   │   ├── ReadMe!.png
│           │   │   │   │   ├── ReadMe.png
│           │   │   │   │   ├── ReadMe.txt
│           │   │   │   │   ├── Website.txt
│           │   │   │   │   └── ms
│           │   │   │   │       ├── History.md
│           │   │   │   │       ├── LICENSE
│           │   │   │   │       ├── README.md
│           │   │   │   │       ├── index.js
│           │   │   │   │       └── package.json
│           │   │   │   └── package.json
│           │   │   ├── finalhandler
│           │   │   │   ├── 0. All Channell.txt
│           │   │   │   ├── HISTORY.md
│           │   │   │   ├── Hide01.png
│           │   │   │   ├── LICENSE
│           │   │   │   ├── README.md
│           │   │   │   ├── ReadMe!!.png
│           │   │   │   ├── ReadMe!.png
│           │   │   │   ├── ReadMe.png
│           │   │   │   ├── ReadMe.txt
│           │   │   │   ├── Website.txt
│           │   │   │   ├── index.js
│           │   │   │   ├── node_modules
│           │   │   │   │   ├── escape-html
│           │   │   │   │   │   ├── LICENSE
│           │   │   │   │   │   ├── Readme.md
│           │   │   │   │   │   ├── index.js
│           │   │   │   │   │   └── package.json
│           │   │   │   │   ├── on-finished
│           │   │   │   │   │   ├── HISTORY.md
│           │   │   │   │   │   ├── LICENSE
│           │   │   │   │   │   ├── README.md
│           │   │   │   │   │   ├── index.js
│           │   │   │   │   │   ├── node_modules
│           │   │   │   │   │   │   └── ee-first
│           │   │   │   │   │   │       ├── LICENSE
│           │   │   │   │   │   │       ├── README.md
│           │   │   │   │   │   │       ├── index.js
│           │   │   │   │   │   │       └── package.json
│           │   │   │   │   │   └── package.json
│           │   │   │   │   └── unpipe
│           │   │   │   │       ├── HISTORY.md
│           │   │   │   │       ├── LICENSE
│           │   │   │   │       ├── README.md
│           │   │   │   │       ├── index.js
│           │   │   │   │       └── package.json
│           │   │   │   └── package.json
│           │   │   ├── parseurl
│           │   │   │   ├── 0. All Channell.txt
│           │   │   │   ├── HISTORY.md
│           │   │   │   ├── Hide01.png
│           │   │   │   ├── LICENSE
│           │   │   │   ├── README.md
│           │   │   │   ├── ReadMe!!.png
│           │   │   │   ├── ReadMe!.png
│           │   │   │   ├── ReadMe.png
│           │   │   │   ├── ReadMe.txt
│           │   │   │   ├── Website.txt
│           │   │   │   ├── index.js
│           │   │   │   └── package.json
│           │   │   └── utils-merge
│           │   │       ├── 0. All Channell.txt
│           │   │       ├── Hide01.png
│           │   │       ├── LICENSE
│           │   │       ├── README.md
│           │   │       ├── ReadMe!!.png
│           │   │       ├── ReadMe!.png
│           │   │       ├── ReadMe.png
│           │   │       ├── ReadMe.txt
│           │   │       ├── Website.txt
│           │   │       ├── index.js
│           │   │       └── package.json
│           │   └── package.json
│           ├── core-js
│           │   ├── LICENSE
│           │   ├── README.md
│           │   ├── ReadMe!!.png
│           │   ├── ReadMe!.png
│           │   ├── ReadMe.png
│           │   ├── ReadMe.txt
│           │   ├── Website.txt
│           │   ├── configurator.js
│           │   ├── es
│           │   │   ├── README.md
│           │   │   ├── ReadMe!!.png
│           │   │   ├── ReadMe!.png
│           │   │   ├── ReadMe.png
│           │   │   ├── ReadMe.txt
│           │   │   ├── Website.txt
│           │   │   ├── array
│           │   │   │   ├── concat.js
│           │   │   │   ├── copy-within.js
│           │   │   │   ├── entries.js
│           │   │   │   ├── every.js
│           │   │   │   ├── fill.js
│           │   │   │   ├── filter.js
│           │   │   │   ├── find-index.js
│           │   │   │   ├── find.js
│           │   │   │   ├── flat-map.js
│           │   │   │   ├── flat.js
│           │   │   │   ├── for-each.js
│           │   │   │   ├── from.js
│           │   │   │   ├── includes.js
│           │   │   │   ├── index-of.js
│           │   │   │   ├── index.js
│           │   │   │   ├── is-array.js
│           │   │   │   ├── iterator.js
│           │   │   │   ├── join.js
│           │   │   │   ├── keys.js
│           │   │   │   ├── last-index-of.js
│           │   │   │   ├── map.js
│           │   │   │   ├── of.js
│           │   │   │   ├── reduce-right.js
│           │   │   │   ├── reduce.js
│           │   │   │   ├── reverse.js
│           │   │   │   ├── slice.js
│           │   │   │   ├── some.js
│           │   │   │   ├── sort.js
│           │   │   │   ├── splice.js
│           │   │   │   ├── values.js
│           │   │   │   └── virtual
│           │   │   │       ├── concat.js
│           │   │   │       ├── copy-within.js
│           │   │   │       ├── entries.js
│           │   │   │       ├── every.js
│           │   │   │       ├── fill.js
│           │   │   │       ├── filter.js
│           │   │   │       ├── find-index.js
│           │   │   │       ├── find.js
│           │   │   │       ├── flat-map.js
│           │   │   │       ├── flat.js
│           │   │   │       ├── for-each.js
│           │   │   │       ├── includes.js
│           │   │   │       ├── index-of.js
│           │   │   │       ├── index.js
│           │   │   │       ├── iterator.js
│           │   │   │       ├── join.js
│           │   │   │       ├── keys.js
│           │   │   │       ├── last-index-of.js
│           │   │   │       ├── map.js
│           │   │   │       ├── reduce-right.js
│           │   │   │       ├── reduce.js
│           │   │   │       ├── reverse.js
│           │   │   │       ├── slice.js
│           │   │   │       ├── some.js
│           │   │   │       ├── sort.js
│           │   │   │       ├── splice.js
│           │   │   │       └── values.js
│           │   │   ├── array-buffer
│           │   │   │   ├── constructor.js
│           │   │   │   ├── index.js
│           │   │   │   ├── is-view.js
│           │   │   │   └── slice.js
│           │   │   ├── data-view
│           │   │   │   └── index.js
│           │   │   ├── date
│           │   │   │   ├── index.js
│           │   │   │   ├── now.js
│           │   │   │   ├── to-iso-string.js
│           │   │   │   ├── to-json.js
│           │   │   │   ├── to-primitive.js
│           │   │   │   └── to-string.js
│           │   │   ├── function
│           │   │   │   ├── bind.js
│           │   │   │   ├── has-instance.js
│           │   │   │   ├── index.js
│           │   │   │   ├── name.js
│           │   │   │   └── virtual
│           │   │   │       ├── bind.js
│           │   │   │       └── index.js
│           │   │   ├── global-this.js
│           │   │   ├── index.js
│           │   │   ├── instance
│           │   │   │   ├── bind.js
│           │   │   │   ├── code-point-at.js
│           │   │   │   ├── concat.js
│           │   │   │   ├── copy-within.js
│           │   │   │   ├── ends-with.js
│           │   │   │   ├── entries.js
│           │   │   │   ├── every.js
│           │   │   │   ├── fill.js
│           │   │   │   ├── filter.js
│           │   │   │   ├── find-index.js
│           │   │   │   ├── find.js
│           │   │   │   ├── flags.js
│           │   │   │   ├── flat-map.js
│           │   │   │   ├── flat.js
│           │   │   │   ├── for-each.js
│           │   │   │   ├── includes.js
│           │   │   │   ├── index-of.js
│           │   │   │   ├── keys.js
│           │   │   │   ├── last-index-of.js
│           │   │   │   ├── map.js
│           │   │   │   ├── match-all.js
│           │   │   │   ├── pad-end.js
│           │   │   │   ├── pad-start.js
│           │   │   │   ├── reduce-right.js
│           │   │   │   ├── reduce.js
│           │   │   │   ├── repeat.js
│           │   │   │   ├── reverse.js
│           │   │   │   ├── slice.js
│           │   │   │   ├── some.js
│           │   │   │   ├── sort.js
│           │   │   │   ├── splice.js
│           │   │   │   ├── starts-with.js
│           │   │   │   ├── trim-end.js
│           │   │   │   ├── trim-left.js
│           │   │   │   ├── trim-right.js
│           │   │   │   ├── trim-start.js
│           │   │   │   ├── trim.js
│           │   │   │   └── values.js
│           │   │   ├── json
│           │   │   │   ├── index.js
│           │   │   │   ├── stringify.js
│           │   │   │   └── to-string-tag.js
│           │   │   ├── map
│           │   │   │   └── index.js
│           │   │   ├── math
│           │   │   │   ├── acosh.js
│           │   │   │   ├── asinh.js
│           │   │   │   ├── atanh.js
│           │   │   │   ├── cbrt.js
│           │   │   │   ├── clz32.js
│           │   │   │   ├── cosh.js
│           │   │   │   ├── expm1.js
│           │   │   │   ├── fround.js
│           │   │   │   ├── hypot.js
│           │   │   │   ├── imul.js
│           │   │   │   ├── index.js
│           │   │   │   ├── log10.js
│           │   │   │   ├── log1p.js
│           │   │   │   ├── log2.js
│           │   │   │   ├── sign.js
│           │   │   │   ├── sinh.js
│           │   │   │   ├── tanh.js
│           │   │   │   ├── to-string-tag.js
│           │   │   │   └── trunc.js
│           │   │   ├── number
│           │   │   │   ├── constructor.js
│           │   │   │   ├── epsilon.js
│           │   │   │   ├── index.js
│           │   │   │   ├── is-finite.js
│           │   │   │   ├── is-integer.js
│           │   │   │   ├── is-nan.js
│           │   │   │   ├── is-safe-integer.js
│           │   │   │   ├── max-safe-integer.js
│           │   │   │   ├── min-safe-integer.js
│           │   │   │   ├── parse-float.js
│           │   │   │   ├── parse-int.js
│           │   │   │   ├── to-fixed.js
│           │   │   │   ├── to-precision.js
│           │   │   │   └── virtual
│           │   │   │       ├── index.js
│           │   │   │       ├── to-fixed.js
│           │   │   │       └── to-precision.js
│           │   │   ├── object
│           │   │   │   ├── assign.js
│           │   │   │   ├── create.js
│           │   │   │   ├── define-getter.js
│           │   │   │   ├── define-properties.js
│           │   │   │   ├── define-property.js
│           │   │   │   ├── define-setter.js
│           │   │   │   ├── entries.js
│           │   │   │   ├── freeze.js
│           │   │   │   ├── from-entries.js
│           │   │   │   ├── get-own-property-descriptor.js
│           │   │   │   ├── get-own-property-descriptors.js
│           │   │   │   ├── get-own-property-names.js
│           │   │   │   ├── get-own-property-symbols.js
│           │   │   │   ├── get-prototype-of.js
│           │   │   │   ├── index.js
│           │   │   │   ├── is-extensible.js
│           │   │   │   ├── is-frozen.js
│           │   │   │   ├── is-sealed.js
│           │   │   │   ├── is.js
│           │   │   │   ├── keys.js
│           │   │   │   ├── lookup-getter.js
│           │   │   │   ├── lookup-setter.js
│           │   │   │   ├── prevent-extensions.js
│           │   │   │   ├── seal.js
│           │   │   │   ├── set-prototype-of.js
│           │   │   │   ├── to-string.js
│           │   │   │   └── values.js
│           │   │   ├── parse-float.js
│           │   │   ├── parse-int.js
│           │   │   ├── promise
│           │   │   │   ├── all-settled.js
│           │   │   │   ├── finally.js
│           │   │   │   └── index.js
│           │   │   ├── reflect
│           │   │   │   ├── apply.js
│           │   │   │   ├── construct.js
│           │   │   │   ├── define-property.js
│           │   │   │   ├── delete-property.js
│           │   │   │   ├── get-own-property-descriptor.js
│           │   │   │   ├── get-prototype-of.js
│           │   │   │   ├── get.js
│           │   │   │   ├── has.js
│           │   │   │   ├── index.js
│           │   │   │   ├── is-extensible.js
│           │   │   │   ├── own-keys.js
│           │   │   │   ├── prevent-extensions.js
│           │   │   │   ├── set-prototype-of.js
│           │   │   │   └── set.js
│           │   │   ├── regexp
│           │   │   │   ├── constructor.js
│           │   │   │   ├── flags.js
│           │   │   │   ├── index.js
│           │   │   │   ├── match.js
│           │   │   │   ├── replace.js
│           │   │   │   ├── search.js
│           │   │   │   ├── split.js
│           │   │   │   └── to-string.js
│           │   │   ├── set
│           │   │   │   └── index.js
│           │   │   ├── string
│           │   │   │   ├── anchor.js
│           │   │   │   ├── big.js
│           │   │   │   ├── blink.js
│           │   │   │   ├── bold.js
│           │   │   │   ├── code-point-at.js
│           │   │   │   ├── ends-with.js
│           │   │   │   ├── fixed.js
│           │   │   │   ├── fontcolor.js
│           │   │   │   ├── fontsize.js
│           │   │   │   ├── from-code-point.js
│           │   │   │   ├── includes.js
│           │   │   │   ├── index.js
│           │   │   │   ├── italics.js
│           │   │   │   ├── iterator.js
│           │   │   │   ├── link.js
│           │   │   │   ├── match-all.js
│           │   │   │   ├── match.js
│           │   │   │   ├── pad-end.js
│           │   │   │   ├── pad-start.js
│           │   │   │   ├── raw.js
│           │   │   │   ├── repeat.js
│           │   │   │   ├── replace.js
│           │   │   │   ├── search.js
│           │   │   │   ├── small.js
│           │   │   │   ├── split.js
│           │   │   │   ├── starts-with.js
│           │   │   │   ├── strike.js
│           │   │   │   ├── sub.js
│           │   │   │   ├── sup.js
│           │   │   │   ├── trim-end.js
│           │   │   │   ├── trim-left.js
│           │   │   │   ├── trim-right.js
│           │   │   │   ├── trim-start.js
│           │   │   │   ├── trim.js
│           │   │   │   └── virtual
│           │   │   │       ├── anchor.js
│           │   │   │       ├── big.js
│           │   │   │       ├── blink.js
│           │   │   │       ├── bold.js
│           │   │   │       ├── code-point-at.js
│           │   │   │       ├── ends-with.js
│           │   │   │       ├── fixed.js
│           │   │   │       ├── fontcolor.js
│           │   │   │       ├── fontsize.js
│           │   │   │       ├── includes.js
│           │   │   │       ├── index.js
│           │   │   │       ├── italics.js
│           │   │   │       ├── iterator.js
│           │   │   │       ├── link.js
│           │   │   │       ├── match-all.js
│           │   │   │       ├── pad-end.js
│           │   │   │       ├── pad-start.js
│           │   │   │       ├── repeat.js
│           │   │   │       ├── small.js
│           │   │   │       ├── starts-with.js
│           │   │   │       ├── strike.js
│           │   │   │       ├── sub.js
│           │   │   │       ├── sup.js
│           │   │   │       ├── trim-end.js
│           │   │   │       ├── trim-left.js
│           │   │   │       ├── trim-right.js
│           │   │   │       ├── trim-start.js
│           │   │   │       └── trim.js
│           │   │   ├── symbol
│           │   │   │   ├── async-iterator.js
│           │   │   │   ├── description.js
│           │   │   │   ├── for.js
│           │   │   │   ├── has-instance.js
│           │   │   │   ├── index.js
│           │   │   │   ├── is-concat-spreadable.js
│           │   │   │   ├── iterator.js
│           │   │   │   ├── key-for.js
│           │   │   │   ├── match-all.js
│           │   │   │   ├── match.js
│           │   │   │   ├── replace.js
│           │   │   │   ├── search.js
│           │   │   │   ├── species.js
│           │   │   │   ├── split.js
│           │   │   │   ├── to-primitive.js
│           │   │   │   ├── to-string-tag.js
│           │   │   │   └── unscopables.js
│           │   │   ├── typed-array
│           │   │   │   ├── copy-within.js
│           │   │   │   ├── entries.js
│           │   │   │   ├── every.js
│           │   │   │   ├── fill.js
│           │   │   │   ├── filter.js
│           │   │   │   ├── find-index.js
│           │   │   │   ├── find.js
│           │   │   │   ├── float32-array.js
│           │   │   │   ├── float64-array.js
│           │   │   │   ├── for-each.js
│           │   │   │   ├── from.js
│           │   │   │   ├── includes.js
│           │   │   │   ├── index-of.js
│           │   │   │   ├── index.js
│           │   │   │   ├── int16-array.js
│           │   │   │   ├── int32-array.js
│           │   │   │   ├── int8-array.js
│           │   │   │   ├── iterator.js
│           │   │   │   ├── join.js
│           │   │   │   ├── keys.js
│           │   │   │   ├── last-index-of.js
│           │   │   │   ├── map.js
│           │   │   │   ├── methods.js
│           │   │   │   ├── of.js
│           │   │   │   ├── reduce-right.js
│           │   │   │   ├── reduce.js
│           │   │   │   ├── reverse.js
│           │   │   │   ├── set.js
│           │   │   │   ├── slice.js
│           │   │   │   ├── some.js
│           │   │   │   ├── sort.js
│           │   │   │   ├── subarray.js
│           │   │   │   ├── to-locale-string.js
│           │   │   │   ├── to-string.js
│           │   │   │   ├── uint16-array.js
│           │   │   │   ├── uint32-array.js
│           │   │   │   ├── uint8-array.js
│           │   │   │   ├── uint8-clamped-array.js
│           │   │   │   └── values.js
│           │   │   ├── weak-map
│           │   │   │   └── index.js
│           │   │   └── weak-set
│           │   │       └── index.js
│           │   ├── features
│           │   │   ├── README.md
│           │   │   ├── aggregate-error.js
│           │   │   ├── array
│           │   │   │   ├── concat.js
│           │   │   │   ├── copy-within.js
│           │   │   │   ├── entries.js
│           │   │   │   ├── every.js
│           │   │   │   ├── fill.js
│           │   │   │   ├── filter.js
│           │   │   │   ├── find-index.js
│           │   │   │   ├── find.js
│           │   │   │   ├── flat-map.js
│           │   │   │   ├── flat.js
│           │   │   │   ├── for-each.js
│           │   │   │   ├── from.js
│           │   │   │   ├── includes.js
│           │   │   │   ├── index-of.js
│           │   │   │   ├── index.js
│           │   │   │   ├── is-array.js
│           │   │   │   ├── is-template-object.js
│           │   │   │   ├── iterator.js
│           │   │   │   ├── join.js
│           │   │   │   ├── keys.js
│           │   │   │   ├── last-index-of.js
│           │   │   │   ├── last-index.js
│           │   │   │   ├── last-item.js
│           │   │   │   ├── map.js
│           │   │   │   ├── of.js
│           │   │   │   ├── reduce-right.js
│           │   │   │   ├── reduce.js
│           │   │   │   ├── reverse.js
│           │   │   │   ├── slice.js
│           │   │   │   ├── some.js
│           │   │   │   ├── sort.js
│           │   │   │   ├── splice.js
│           │   │   │   ├── values.js
│           │   │   │   └── virtual
│           │   │   │       ├── concat.js
│           │   │   │       ├── copy-within.js
│           │   │   │       ├── entries.js
│           │   │   │       ├── every.js
│           │   │   │       ├── fill.js
│           │   │   │       ├── filter.js
│           │   │   │       ├── find-index.js
│           │   │   │       ├── find.js
│           │   │   │       ├── flat-map.js
│           │   │   │       ├── flat.js
│           │   │   │       ├── for-each.js
│           │   │   │       ├── includes.js
│           │   │   │       ├── index-of.js
│           │   │   │       ├── index.js
│           │   │   │       ├── iterator.js
│           │   │   │       ├── join.js
│           │   │   │       ├── keys.js
│           │   │   │       ├── last-index-of.js
│           │   │   │       ├── map.js
│           │   │   │       ├── reduce-right.js
│           │   │   │       ├── reduce.js
│           │   │   │       ├── reverse.js
│           │   │   │       ├── slice.js
│           │   │   │       ├── some.js
│           │   │   │       ├── sort.js
│           │   │   │       ├── splice.js
│           │   │   │       └── values.js
│           │   │   ├── array-buffer
│           │   │   │   ├── constructor.js
│           │   │   │   ├── index.js
│           │   │   │   ├── is-view.js
│           │   │   │   └── slice.js
│           │   │   ├── async-iterator
│           │   │   │   ├── as-indexed-pairs.js
│           │   │   │   ├── drop.js
│           │   │   │   ├── every.js
│           │   │   │   ├── filter.js
│           │   │   │   ├── find.js
│           │   │   │   ├── flat-map.js
│           │   │   │   ├── for-each.js
│           │   │   │   ├── from.js
│           │   │   │   ├── index.js
│           │   │   │   ├── map.js
│           │   │   │   ├── reduce.js
│           │   │   │   ├── some.js
│           │   │   │   ├── take.js
│           │   │   │   └── to-array.js
│           │   │   ├── clear-immediate.js
│           │   │   ├── composite-key.js
│           │   │   ├── composite-symbol.js
│           │   │   ├── data-view
│           │   │   │   └── index.js
│           │   │   ├── date
│           │   │   │   ├── index.js
│           │   │   │   ├── now.js
│           │   │   │   ├── to-iso-string.js
│           │   │   │   ├── to-json.js
│           │   │   │   ├── to-primitive.js
│           │   │   │   └── to-string.js
│           │   │   ├── dom-collections
│           │   │   │   ├── for-each.js
│           │   │   │   ├── index.js
│           │   │   │   └── iterator.js
│           │   │   ├── function
│           │   │   │   ├── bind.js
│           │   │   │   ├── has-instance.js
│           │   │   │   ├── index.js
│           │   │   │   ├── name.js
│           │   │   │   └── virtual
│           │   │   │       ├── bind.js
│           │   │   │       └── index.js
│           │   │   ├── get-iterator-method.js
│           │   │   ├── get-iterator.js
│           │   │   ├── global-this.js
│           │   │   ├── index.js
│           │   │   ├── instance
│           │   │   │   ├── at.js
│           │   │   │   ├── bind.js
│           │   │   │   ├── code-point-at.js
│           │   │   │   ├── code-points.js
│           │   │   │   ├── concat.js
│           │   │   │   ├── copy-within.js
│           │   │   │   ├── ends-with.js
│           │   │   │   ├── entries.js
│           │   │   │   ├── every.js
│           │   │   │   ├── fill.js
│           │   │   │   ├── filter.js
│           │   │   │   ├── find-index.js
│           │   │   │   ├── find.js
│           │   │   │   ├── flags.js
│           │   │   │   ├── flat-map.js
│           │   │   │   ├── flat.js
│           │   │   │   ├── for-each.js
│           │   │   │   ├── includes.js
│           │   │   │   ├── index-of.js
│           │   │   │   ├── keys.js
│           │   │   │   ├── last-index-of.js
│           │   │   │   ├── map.js
│           │   │   │   ├── match-all.js
│           │   │   │   ├── pad-end.js
│           │   │   │   ├── pad-start.js
│           │   │   │   ├── reduce-right.js
│           │   │   │   ├── reduce.js
│           │   │   │   ├── repeat.js
│           │   │   │   ├── replace-all.js
│           │   │   │   ├── reverse.js
│           │   │   │   ├── slice.js
│           │   │   │   ├── some.js
│           │   │   │   ├── sort.js
│           │   │   │   ├── splice.js
│           │   │   │   ├── starts-with.js
│           │   │   │   ├── trim-end.js
│           │   │   │   ├── trim-left.js
│           │   │   │   ├── trim-right.js
│           │   │   │   ├── trim-start.js
│           │   │   │   ├── trim.js
│           │   │   │   └── values.js
│           │   │   ├── is-iterable.js
│           │   │   ├── iterator
│           │   │   │   ├── as-indexed-pairs.js
│           │   │   │   ├── drop.js
│           │   │   │   ├── every.js
│           │   │   │   ├── filter.js
│           │   │   │   ├── find.js
│           │   │   │   ├── flat-map.js
│           │   │   │   ├── for-each.js
│           │   │   │   ├── from.js
│           │   │   │   ├── index.js
│           │   │   │   ├── map.js
│           │   │   │   ├── reduce.js
│           │   │   │   ├── some.js
│           │   │   │   ├── take.js
│           │   │   │   └── to-array.js
│           │   │   ├── json
│           │   │   │   ├── index.js
│           │   │   │   ├── stringify.js
│           │   │   │   └── to-string-tag.js
│           │   │   ├── map
│           │   │   │   ├── delete-all.js
│           │   │   │   ├── every.js
│           │   │   │   ├── filter.js
│           │   │   │   ├── find-key.js
│           │   │   │   ├── find.js
│           │   │   │   ├── from.js
│           │   │   │   ├── group-by.js
│           │   │   │   ├── includes.js
│           │   │   │   ├── index.js
│           │   │   │   ├── key-by.js
│           │   │   │   ├── key-of.js
│           │   │   │   ├── map-keys.js
│           │   │   │   ├── map-values.js
│           │   │   │   ├── merge.js
│           │   │   │   ├── of.js
│           │   │   │   ├── reduce.js
│           │   │   │   ├── some.js
│           │   │   │   ├── update-or-insert.js
│           │   │   │   ├── update.js
│           │   │   │   └── upsert.js
│           │   │   ├── math
│           │   │   │   ├── acosh.js
│           │   │   │   ├── asinh.js
│           │   │   │   ├── atanh.js
│           │   │   │   ├── cbrt.js
│           │   │   │   ├── clamp.js
│           │   │   │   ├── clz32.js
│           │   │   │   ├── cosh.js
│           │   │   │   ├── deg-per-rad.js
│           │   │   │   ├── degrees.js
│           │   │   │   ├── expm1.js
│           │   │   │   ├── fround.js
│           │   │   │   ├── fscale.js
│           │   │   │   ├── hypot.js
│           │   │   │   ├── iaddh.js
│           │   │   │   ├── imul.js
│           │   │   │   ├── imulh.js
│           │   │   │   ├── index.js
│           │   │   │   ├── isubh.js
│           │   │   │   ├── log10.js
│           │   │   │   ├── log1p.js
│           │   │   │   ├── log2.js
│           │   │   │   ├── rad-per-deg.js
│           │   │   │   ├── radians.js
│           │   │   │   ├── scale.js
│           │   │   │   ├── seeded-prng.js
│           │   │   │   ├── sign.js
│           │   │   │   ├── signbit.js
│           │   │   │   ├── sinh.js
│           │   │   │   ├── tanh.js
│           │   │   │   ├── to-string-tag.js
│           │   │   │   ├── trunc.js
│           │   │   │   └── umulh.js
│           │   │   ├── number
│           │   │   │   ├── constructor.js
│           │   │   │   ├── epsilon.js
│           │   │   │   ├── from-string.js
│           │   │   │   ├── index.js
│           │   │   │   ├── is-finite.js
│           │   │   │   ├── is-integer.js
│           │   │   │   ├── is-nan.js
│           │   │   │   ├── is-safe-integer.js
│           │   │   │   ├── max-safe-integer.js
│           │   │   │   ├── min-safe-integer.js
│           │   │   │   ├── parse-float.js
│           │   │   │   ├── parse-int.js
│           │   │   │   ├── to-fixed.js
│           │   │   │   ├── to-precision.js
│           │   │   │   └── virtual
│           │   │   │       ├── index.js
│           │   │   │       ├── to-fixed.js
│           │   │   │       └── to-precision.js
│           │   │   ├── object
│           │   │   │   ├── assign.js
│           │   │   │   ├── create.js
│           │   │   │   ├── define-getter.js
│           │   │   │   ├── define-properties.js
│           │   │   │   ├── define-property.js
│           │   │   │   ├── define-setter.js
│           │   │   │   ├── entries.js
│           │   │   │   ├── freeze.js
│           │   │   │   ├── from-entries.js
│           │   │   │   ├── get-own-property-descriptor.js
│           │   │   │   ├── get-own-property-descriptors.js
│           │   │   │   ├── get-own-property-names.js
│           │   │   │   ├── get-own-property-symbols.js
│           │   │   │   ├── get-prototype-of.js
│           │   │   │   ├── index.js
│           │   │   │   ├── is-extensible.js
│           │   │   │   ├── is-frozen.js
│           │   │   │   ├── is-sealed.js
│           │   │   │   ├── is.js
│           │   │   │   ├── keys.js
│           │   │   │   ├── lookup-getter.js
│           │   │   │   ├── lookup-setter.js
│           │   │   │   ├── prevent-extensions.js
│           │   │   │   ├── seal.js
│           │   │   │   ├── set-prototype-of.js
│           │   │   │   ├── to-string.js
│           │   │   │   └── values.js
│           │   │   ├── observable
│           │   │   │   └── index.js
│           │   │   ├── parse-float.js
│           │   │   ├── parse-int.js
│           │   │   ├── promise
│           │   │   │   ├── all-settled.js
│           │   │   │   ├── any.js
│           │   │   │   ├── finally.js
│           │   │   │   ├── index.js
│           │   │   │   └── try.js
│           │   │   ├── queue-microtask.js
│           │   │   ├── reflect
│           │   │   │   ├── apply.js
│           │   │   │   ├── construct.js
│           │   │   │   ├── define-metadata.js
│           │   │   │   ├── define-property.js
│           │   │   │   ├── delete-metadata.js
│           │   │   │   ├── delete-property.js
│           │   │   │   ├── get-metadata-keys.js
│           │   │   │   ├── get-metadata.js
│           │   │   │   ├── get-own-metadata-keys.js
│           │   │   │   ├── get-own-metadata.js
│           │   │   │   ├── get-own-property-descriptor.js
│           │   │   │   ├── get-prototype-of.js
│           │   │   │   ├── get.js
│           │   │   │   ├── has-metadata.js
│           │   │   │   ├── has-own-metadata.js
│           │   │   │   ├── has.js
│           │   │   │   ├── index.js
│           │   │   │   ├── is-extensible.js
│           │   │   │   ├── metadata.js
│           │   │   │   ├── own-keys.js
│           │   │   │   ├── prevent-extensions.js
│           │   │   │   ├── set-prototype-of.js
│           │   │   │   └── set.js
│           │   │   ├── regexp
│           │   │   │   ├── constructor.js
│           │   │   │   ├── flags.js
│           │   │   │   ├── index.js
│           │   │   │   ├── match.js
│           │   │   │   ├── replace.js
│           │   │   │   ├── search.js
│           │   │   │   ├── split.js
│           │   │   │   └── to-string.js
│           │   │   ├── set
│           │   │   │   ├── add-all.js
│           │   │   │   ├── delete-all.js
│           │   │   │   ├── difference.js
│           │   │   │   ├── every.js
│           │   │   │   ├── filter.js
│           │   │   │   ├── find.js
│           │   │   │   ├── from.js
│           │   │   │   ├── index.js
│           │   │   │   ├── intersection.js
│           │   │   │   ├── is-disjoint-from.js
│           │   │   │   ├── is-subset-of.js
│           │   │   │   ├── is-superset-of.js
│           │   │   │   ├── join.js
│           │   │   │   ├── map.js
│           │   │   │   ├── of.js
│           │   │   │   ├── reduce.js
│           │   │   │   ├── some.js
│           │   │   │   ├── symmetric-difference.js
│           │   │   │   └── union.js
│           │   │   ├── set-immediate.js
│           │   │   ├── set-interval.js
│           │   │   ├── set-timeout.js
│           │   │   ├── string
│           │   │   │   ├── anchor.js
│           │   │   │   ├── at.js
│           │   │   │   ├── big.js
│           │   │   │   ├── blink.js
│           │   │   │   ├── bold.js
│           │   │   │   ├── code-point-at.js
│           │   │   │   ├── code-points.js
│           │   │   │   ├── ends-with.js
│           │   │   │   ├── fixed.js
│           │   │   │   ├── fontcolor.js
│           │   │   │   ├── fontsize.js
│           │   │   │   ├── from-code-point.js
│           │   │   │   ├── includes.js
│           │   │   │   ├── index.js
│           │   │   │   ├── italics.js
│           │   │   │   ├── iterator.js
│           │   │   │   ├── link.js
│           │   │   │   ├── match-all.js
│           │   │   │   ├── match.js
│           │   │   │   ├── pad-end.js
│           │   │   │   ├── pad-start.js
│           │   │   │   ├── raw.js
│           │   │   │   ├── repeat.js
│           │   │   │   ├── replace-all.js
│           │   │   │   ├── replace.js
│           │   │   │   ├── search.js
│           │   │   │   ├── small.js
│           │   │   │   ├── split.js
│           │   │   │   ├── starts-with.js
│           │   │   │   ├── strike.js
│           │   │   │   ├── sub.js
│           │   │   │   ├── sup.js
│           │   │   │   ├── trim-end.js
│           │   │   │   ├── trim-left.js
│           │   │   │   ├── trim-right.js
│           │   │   │   ├── trim-start.js
│           │   │   │   ├── trim.js
│           │   │   │   └── virtual
│           │   │   │       ├── anchor.js
│           │   │   │       ├── at.js
│           │   │   │       ├── big.js
│           │   │   │       ├── blink.js
│           │   │   │       ├── bold.js
│           │   │   │       ├── code-point-at.js
│           │   │   │       ├── code-points.js
│           │   │   │       ├── ends-with.js
│           │   │   │       ├── fixed.js
│           │   │   │       ├── fontcolor.js
│           │   │   │       ├── fontsize.js
│           │   │   │       ├── includes.js
│           │   │   │       ├── index.js
│           │   │   │       ├── italics.js
│           │   │   │       ├── iterator.js
│           │   │   │       ├── link.js
│           │   │   │       ├── match-all.js
│           │   │   │       ├── pad-end.js
│           │   │   │       ├── pad-start.js
│           │   │   │       ├── repeat.js
│           │   │   │       ├── replace-all.js
│           │   │   │       ├── small.js
│           │   │   │       ├── starts-with.js
│           │   │   │       ├── strike.js
│           │   │   │       ├── sub.js
│           │   │   │       ├── sup.js
│           │   │   │       ├── trim-end.js
│           │   │   │       ├── trim-left.js
│           │   │   │       ├── trim-right.js
│           │   │   │       ├── trim-start.js
│           │   │   │       └── trim.js
│           │   │   ├── symbol
│           │   │   │   ├── async-dispose.js
│           │   │   │   ├── async-iterator.js
│           │   │   │   ├── description.js
│           │   │   │   ├── dispose.js
│           │   │   │   ├── for.js
│           │   │   │   ├── has-instance.js
│           │   │   │   ├── index.js
│           │   │   │   ├── is-concat-spreadable.js
│           │   │   │   ├── iterator.js
│           │   │   │   ├── key-for.js
│           │   │   │   ├── match-all.js
│           │   │   │   ├── match.js
│           │   │   │   ├── observable.js
│           │   │   │   ├── pattern-match.js
│           │   │   │   ├── replace-all.js
│           │   │   │   ├── replace.js
│           │   │   │   ├── search.js
│           │   │   │   ├── species.js
│           │   │   │   ├── split.js
│           │   │   │   ├── to-primitive.js
│           │   │   │   ├── to-string-tag.js
│           │   │   │   └── unscopables.js
│           │   │   ├── typed-array
│           │   │   │   ├── copy-within.js
│           │   │   │   ├── entries.js
│           │   │   │   ├── every.js
│           │   │   │   ├── fill.js
│           │   │   │   ├── filter.js
│           │   │   │   ├── find-index.js
│           │   │   │   ├── find.js
│           │   │   │   ├── float32-array.js
│           │   │   │   ├── float64-array.js
│           │   │   │   ├── for-each.js
│           │   │   │   ├── from.js
│           │   │   │   ├── includes.js
│           │   │   │   ├── index-of.js
│           │   │   │   ├── index.js
│           │   │   │   ├── int16-array.js
│           │   │   │   ├── int32-array.js
│           │   │   │   ├── int8-array.js
│           │   │   │   ├── iterator.js
│           │   │   │   ├── join.js
│           │   │   │   ├── keys.js
│           │   │   │   ├── last-index-of.js
│           │   │   │   ├── map.js
│           │   │   │   ├── of.js
│           │   │   │   ├── reduce-right.js
│           │   │   │   ├── reduce.js
│           │   │   │   ├── reverse.js
│           │   │   │   ├── set.js
│           │   │   │   ├── slice.js
│           │   │   │   ├── some.js
│           │   │   │   ├── sort.js
│           │   │   │   ├── subarray.js
│           │   │   │   ├── to-locale-string.js
│           │   │   │   ├── to-string.js
│           │   │   │   ├── uint16-array.js
│           │   │   │   ├── uint32-array.js
│           │   │   │   ├── uint8-array.js
│           │   │   │   ├── uint8-clamped-array.js
│           │   │   │   └── values.js
│           │   │   ├── url
│           │   │   │   ├── index.js
│           │   │   │   └── to-json.js
│           │   │   ├── url-search-params
│           │   │   │   └── index.js
│           │   │   ├── weak-map
│           │   │   │   ├── delete-all.js
│           │   │   │   ├── from.js
│           │   │   │   ├── index.js
│           │   │   │   ├── of.js
│           │   │   │   └── upsert.js
│           │   │   └── weak-set
│           │   │       ├── add-all.js
│           │   │       ├── delete-all.js
│           │   │       ├── from.js
│           │   │       ├── index.js
│           │   │       └── of.js
│           │   ├── index.js
│           │   ├── internals
│           │   │   ├── Hide01.png
│           │   │   ├── README.md
│           │   │   ├── ReadMe!!.png
│           │   │   ├── ReadMe!.png
│           │   │   ├── ReadMe.png
│           │   │   ├── ReadMe.txt
│           │   │   ├── Website.txt
│           │   │   ├── a-function.js
│           │   │   ├── a-possible-prototype.js
│           │   │   ├── add-to-unscopables.js
│           │   │   ├── advance-string-index.js
│           │   │   ├── an-instance.js
│           │   │   ├── an-object.js
│           │   │   ├── array-buffer-view-core.js
│           │   │   ├── array-buffer.js
│           │   │   ├── array-copy-within.js
│           │   │   ├── array-fill.js
│           │   │   ├── array-for-each.js
│           │   │   ├── array-from.js
│           │   │   ├── array-includes.js
│           │   │   ├── array-iteration.js
│           │   │   ├── array-last-index-of.js
│           │   │   ├── array-method-has-species-support.js
│           │   │   ├── array-reduce.js
│           │   │   ├── array-species-create.js
│           │   │   ├── async-iterator-iteration.js
│           │   │   ├── async-iterator-prototype.js
│           │   │   ├── bind-context.js
│           │   │   ├── call-with-safe-iteration-closing.js
│           │   │   ├── check-correctness-of-iteration.js
│           │   │   ├── classof-raw.js
│           │   │   ├── classof.js
│           │   │   ├── collection-add-all.js
│           │   │   ├── collection-delete-all.js
│           │   │   ├── collection-from.js
│           │   │   ├── collection-of.js
│           │   │   ├── collection-strong.js
│           │   │   ├── collection-weak.js
│           │   │   ├── collection.js
│           │   │   ├── composite-key.js
│           │   │   ├── copy-constructor-properties.js
│           │   │   ├── correct-is-regexp-logic.js
│           │   │   ├── correct-prototype-getter.js
│           │   │   ├── create-async-iterator-proxy.js
│           │   │   ├── create-html.js
│           │   │   ├── create-iterator-constructor.js
│           │   │   ├── create-iterator-proxy.js
│           │   │   ├── create-non-enumerable-property.js
│           │   │   ├── create-property-descriptor.js
│           │   │   ├── create-property.js
│           │   │   ├── date-to-iso-string.js
│           │   │   ├── date-to-primitive.js
│           │   │   ├── define-iterator.js
│           │   │   ├── define-well-known-symbol.js
│           │   │   ├── descriptors.js
│           │   │   ├── document-create-element.js
│           │   │   ├── dom-iterables.js
│           │   │   ├── entry-unbind.js
│           │   │   ├── entry-virtual.js
│           │   │   ├── enum-bug-keys.js
│           │   │   ├── export.js
│           │   │   ├── fails.js
│           │   │   ├── fix-regexp-well-known-symbol-logic.js
│           │   │   ├── flatten-into-array.js
│           │   │   ├── forced-object-prototype-accessors-methods.js
│           │   │   ├── forced-string-html-method.js
│           │   │   ├── forced-string-trim-method.js
│           │   │   ├── freezing.js
│           │   │   ├── function-bind.js
│           │   │   ├── get-async-iterator-method.js
│           │   │   ├── get-built-in.js
│           │   │   ├── get-iterator-method.js
│           │   │   ├── get-iterator.js
│           │   │   ├── get-map-iterator.js
│           │   │   ├── get-set-iterator.js
│           │   │   ├── global.js
│           │   │   ├── has.js
│           │   │   ├── hidden-keys.js
│           │   │   ├── host-report-errors.js
│           │   │   ├── html.js
│           │   │   ├── ie8-dom-define.js
│           │   │   ├── ieee754.js
│           │   │   ├── indexed-object.js
│           │   │   ├── inherit-if-required.js
│           │   │   ├── inspect-source.js
│           │   │   ├── internal-metadata.js
│           │   │   ├── internal-state.js
│           │   │   ├── is-array-iterator-method.js
│           │   │   ├── is-array.js
│           │   │   ├── is-forced.js
│           │   │   ├── is-integer.js
│           │   │   ├── is-ios.js
│           │   │   ├── is-iterable.js
│           │   │   ├── is-object.js
│           │   │   ├── is-pure.js
│           │   │   ├── is-regexp.js
│           │   │   ├── iterate.js
│           │   │   ├── iterators-core.js
│           │   │   ├── iterators.js
│           │   │   ├── map-upsert.js
│           │   │   ├── math-expm1.js
│           │   │   ├── math-fround.js
│           │   │   ├── math-log1p.js
│           │   │   ├── math-scale.js
│           │   │   ├── math-sign.js
│           │   │   ├── microtask.js
│           │   │   ├── native-promise-constructor.js
│           │   │   ├── native-symbol.js
│           │   │   ├── native-url.js
│           │   │   ├── native-weak-map.js
│           │   │   ├── new-promise-capability.js
│           │   │   ├── not-a-regexp.js
│           │   │   ├── number-is-finite.js
│           │   │   ├── object-assign.js
│           │   │   ├── object-create.js
│           │   │   ├── object-define-properties.js
│           │   │   ├── object-define-property.js
│           │   │   ├── object-get-own-property-descriptor.js
│           │   │   ├── object-get-own-property-names-external.js
│           │   │   ├── object-get-own-property-names.js
│           │   │   ├── object-get-own-property-symbols.js
│           │   │   ├── object-get-prototype-of.js
│           │   │   ├── object-keys-internal.js
│           │   │   ├── object-keys.js
│           │   │   ├── object-property-is-enumerable.js
│           │   │   ├── object-set-prototype-of.js
│           │   │   ├── object-to-array.js
│           │   │   ├── object-to-string.js
│           │   │   ├── own-keys.js
│           │   │   ├── parse-float.js
│           │   │   ├── parse-int.js
│           │   │   ├── path.js
│           │   │   ├── perform.js
│           │   │   ├── promise-resolve.js
│           │   │   ├── punycode-to-ascii.js
│           │   │   ├── redefine-all.js
│           │   │   ├── redefine.js
│           │   │   ├── reflect-metadata.js
│           │   │   ├── regexp-exec-abstract.js
│           │   │   ├── regexp-exec.js
│           │   │   ├── regexp-flags.js
│           │   │   ├── require-object-coercible.js
│           │   │   ├── same-value-zero.js
│           │   │   ├── same-value.js
│           │   │   ├── set-global.js
│           │   │   ├── set-species.js
│           │   │   ├── set-to-string-tag.js
│           │   │   ├── shared-key.js
│           │   │   ├── shared-store.js
│           │   │   ├── shared.js
│           │   │   ├── sloppy-array-method.js
│           │   │   ├── species-constructor.js
│           │   │   ├── string-multibyte.js
│           │   │   ├── string-pad.js
│           │   │   ├── string-repeat.js
│           │   │   ├── string-trim.js
│           │   │   ├── task.js
│           │   │   ├── this-number-value.js
│           │   │   ├── to-absolute-index.js
│           │   │   ├── to-index.js
│           │   │   ├── to-indexed-object.js
│           │   │   ├── to-integer.js
│           │   │   ├── to-length.js
│           │   │   ├── to-object.js
│           │   │   ├── to-offset.js
│           │   │   ├── to-positive-integer.js
│           │   │   ├── to-primitive.js
│           │   │   ├── to-string-tag-support.js
│           │   │   ├── typed-array-constructor.js
│           │   │   ├── typed-array-from.js
│           │   │   ├── typed-arrays-constructors-requires-wrappers.js
│           │   │   ├── uid.js
│           │   │   ├── use-symbol-as-uid.js
│           │   │   ├── user-agent.js
│           │   │   ├── v8-version.js
│           │   │   ├── webkit-string-pad-bug.js
│           │   │   ├── well-known-symbol.js
│           │   │   ├── whitespaces.js
│           │   │   └── wrapped-well-known-symbol.js
│           │   ├── modules
│           │   │   ├── README.md
│           │   │   ├── ReadMe!!.png
│           │   │   ├── ReadMe!.png
│           │   │   ├── ReadMe.png
│           │   │   ├── ReadMe.txt
│           │   │   ├── Website.txt
│           │   │   ├── es.array-buffer.constructor.js
│           │   │   ├── es.array-buffer.is-view.js
│           │   │   ├── es.array-buffer.slice.js
│           │   │   ├── es.array.concat.js
│           │   │   ├── es.array.copy-within.js
│           │   │   ├── es.array.every.js
│           │   │   ├── es.array.fill.js
│           │   │   ├── es.array.filter.js
│           │   │   ├── es.array.find-index.js
│           │   │   ├── es.array.find.js
│           │   │   ├── es.array.flat-map.js
│           │   │   ├── es.array.flat.js
│           │   │   ├── es.array.for-each.js
│           │   │   ├── es.array.from.js
│           │   │   ├── es.array.includes.js
│           │   │   ├── es.array.index-of.js
│           │   │   ├── es.array.is-array.js
│           │   │   ├── es.array.iterator.js
│           │   │   ├── es.array.join.js
│           │   │   ├── es.array.last-index-of.js
│           │   │   ├── es.array.map.js
│           │   │   ├── es.array.of.js
│           │   │   ├── es.array.reduce-right.js
│           │   │   ├── es.array.reduce.js
│           │   │   ├── es.array.reverse.js
│           │   │   ├── es.array.slice.js
│           │   │   ├── es.array.some.js
│           │   │   ├── es.array.sort.js
│           │   │   ├── es.array.species.js
│           │   │   ├── es.array.splice.js
│           │   │   ├── es.array.unscopables.flat-map.js
│           │   │   ├── es.array.unscopables.flat.js
│           │   │   ├── es.data-view.js
│           │   │   ├── es.date.now.js
│           │   │   ├── es.date.to-iso-string.js
│           │   │   ├── es.date.to-json.js
│           │   │   ├── es.date.to-primitive.js
│           │   │   ├── es.date.to-string.js
│           │   │   ├── es.function.bind.js
│           │   │   ├── es.function.has-instance.js
│           │   │   ├── es.function.name.js
│           │   │   ├── es.global-this.js
│           │   │   ├── es.json.stringify.js
│           │   │   ├── es.json.to-string-tag.js
│           │   │   ├── es.map.js
│           │   │   ├── es.math.acosh.js
│           │   │   ├── es.math.asinh.js
│           │   │   ├── es.math.atanh.js
│           │   │   ├── es.math.cbrt.js
│           │   │   ├── es.math.clz32.js
│           │   │   ├── es.math.cosh.js
│           │   │   ├── es.math.expm1.js
│           │   │   ├── es.math.fround.js
│           │   │   ├── es.math.hypot.js
│           │   │   ├── es.math.imul.js
│           │   │   ├── es.math.log10.js
│           │   │   ├── es.math.log1p.js
│           │   │   ├── es.math.log2.js
│           │   │   ├── es.math.sign.js
│           │   │   ├── es.math.sinh.js
│           │   │   ├── es.math.tanh.js
│           │   │   ├── es.math.to-string-tag.js
│           │   │   ├── es.math.trunc.js
│           │   │   ├── es.number.constructor.js
│           │   │   ├── es.number.epsilon.js
│           │   │   ├── es.number.is-finite.js
│           │   │   ├── es.number.is-integer.js
│           │   │   ├── es.number.is-nan.js
│           │   │   ├── es.number.is-safe-integer.js
│           │   │   ├── es.number.max-safe-integer.js
│           │   │   ├── es.number.min-safe-integer.js
│           │   │   ├── es.number.parse-float.js
│           │   │   ├── es.number.parse-int.js
│           │   │   ├── es.number.to-fixed.js
│           │   │   ├── es.number.to-precision.js
│           │   │   ├── es.object.assign.js
│           │   │   ├── es.object.create.js
│           │   │   ├── es.object.define-getter.js
│           │   │   ├── es.object.define-properties.js
│           │   │   ├── es.object.define-property.js
│           │   │   ├── es.object.define-setter.js
│           │   │   ├── es.object.entries.js
│           │   │   ├── es.object.freeze.js
│           │   │   ├── es.object.from-entries.js
│           │   │   ├── es.object.get-own-property-descriptor.js
│           │   │   ├── es.object.get-own-property-descriptors.js
│           │   │   ├── es.object.get-own-property-names.js
│           │   │   ├── es.object.get-prototype-of.js
│           │   │   ├── es.object.is-extensible.js
│           │   │   ├── es.object.is-frozen.js
│           │   │   ├── es.object.is-sealed.js
│           │   │   ├── es.object.is.js
│           │   │   ├── es.object.keys.js
│           │   │   ├── es.object.lookup-getter.js
│           │   │   ├── es.object.lookup-setter.js
│           │   │   ├── es.object.prevent-extensions.js
│           │   │   ├── es.object.seal.js
│           │   │   ├── es.object.set-prototype-of.js
│           │   │   ├── es.object.to-string.js
│           │   │   ├── es.object.values.js
│           │   │   ├── es.parse-float.js
│           │   │   ├── es.parse-int.js
│           │   │   ├── es.promise.all-settled.js
│           │   │   ├── es.promise.finally.js
│           │   │   ├── es.promise.js
│           │   │   ├── es.reflect.apply.js
│           │   │   ├── es.reflect.construct.js
│           │   │   ├── es.reflect.define-property.js
│           │   │   ├── es.reflect.delete-property.js
│           │   │   ├── es.reflect.get-own-property-descriptor.js
│           │   │   ├── es.reflect.get-prototype-of.js
│           │   │   ├── es.reflect.get.js
│           │   │   ├── es.reflect.has.js
│           │   │   ├── es.reflect.is-extensible.js
│           │   │   ├── es.reflect.own-keys.js
│           │   │   ├── es.reflect.prevent-extensions.js
│           │   │   ├── es.reflect.set-prototype-of.js
│           │   │   ├── es.reflect.set.js
│           │   │   ├── es.regexp.constructor.js
│           │   │   ├── es.regexp.exec.js
│           │   │   ├── es.regexp.flags.js
│           │   │   ├── es.regexp.to-string.js
│           │   │   ├── es.set.js
│           │   │   ├── es.string.anchor.js
│           │   │   ├── es.string.big.js
│           │   │   ├── es.string.blink.js
│           │   │   ├── es.string.bold.js
│           │   │   ├── es.string.code-point-at.js
│           │   │   ├── es.string.ends-with.js
│           │   │   ├── es.string.fixed.js
│           │   │   ├── es.string.fontcolor.js
│           │   │   ├── es.string.fontsize.js
│           │   │   ├── es.string.from-code-point.js
│           │   │   ├── es.string.includes.js
│           │   │   ├── es.string.italics.js
│           │   │   ├── es.string.iterator.js
│           │   │   ├── es.string.link.js
│           │   │   ├── es.string.match-all.js
│           │   │   ├── es.string.match.js
│           │   │   ├── es.string.pad-end.js
│           │   │   ├── es.string.pad-start.js
│           │   │   ├── es.string.raw.js
│           │   │   ├── es.string.repeat.js
│           │   │   ├── es.string.replace.js
│           │   │   ├── es.string.search.js
│           │   │   ├── es.string.small.js
│           │   │   ├── es.string.split.js
│           │   │   ├── es.string.starts-with.js
│           │   │   ├── es.string.strike.js
│           │   │   ├── es.string.sub.js
│           │   │   ├── es.string.sup.js
│           │   │   ├── es.string.trim-end.js
│           │   │   ├── es.string.trim-start.js
│           │   │   ├── es.string.trim.js
│           │   │   ├── es.symbol.async-iterator.js
│           │   │   ├── es.symbol.description.js
│           │   │   ├── es.symbol.has-instance.js
│           │   │   ├── es.symbol.is-concat-spreadable.js
│           │   │   ├── es.symbol.iterator.js
│           │   │   ├── es.symbol.js
│           │   │   ├── es.symbol.match-all.js
│           │   │   ├── es.symbol.match.js
│           │   │   ├── es.symbol.replace.js
│           │   │   ├── es.symbol.search.js
│           │   │   ├── es.symbol.species.js
│           │   │   ├── es.symbol.split.js
│           │   │   ├── es.symbol.to-primitive.js
│           │   │   ├── es.symbol.to-string-tag.js
│           │   │   ├── es.symbol.unscopables.js
│           │   │   ├── es.typed-array.copy-within.js
│           │   │   ├── es.typed-array.every.js
│           │   │   ├── es.typed-array.fill.js
│           │   │   ├── es.typed-array.filter.js
│           │   │   ├── es.typed-array.find-index.js
│           │   │   ├── es.typed-array.find.js
│           │   │   ├── es.typed-array.float32-array.js
│           │   │   ├── es.typed-array.float64-array.js
│           │   │   ├── es.typed-array.for-each.js
│           │   │   ├── es.typed-array.from.js
│           │   │   ├── es.typed-array.includes.js
│           │   │   ├── es.typed-array.index-of.js
│           │   │   ├── es.typed-array.int16-array.js
│           │   │   ├── es.typed-array.int32-array.js
│           │   │   ├── es.typed-array.int8-array.js
│           │   │   ├── es.typed-array.iterator.js
│           │   │   ├── es.typed-array.join.js
│           │   │   ├── es.typed-array.last-index-of.js
│           │   │   ├── es.typed-array.map.js
│           │   │   ├── es.typed-array.of.js
│           │   │   ├── es.typed-array.reduce-right.js
│           │   │   ├── es.typed-array.reduce.js
│           │   │   ├── es.typed-array.reverse.js
│           │   │   ├── es.typed-array.set.js
│           │   │   ├── es.typed-array.slice.js
│           │   │   ├── es.typed-array.some.js
│           │   │   ├── es.typed-array.sort.js
│           │   │   ├── es.typed-array.subarray.js
│           │   │   ├── es.typed-array.to-locale-string.js
│           │   │   ├── es.typed-array.to-string.js
│           │   │   ├── es.typed-array.uint16-array.js
│           │   │   ├── es.typed-array.uint32-array.js
│           │   │   ├── es.typed-array.uint8-array.js
│           │   │   ├── es.typed-array.uint8-clamped-array.js
│           │   │   ├── es.weak-map.js
│           │   │   ├── es.weak-set.js
│           │   │   ├── esnext.aggregate-error.js
│           │   │   ├── esnext.array.is-template-object.js
│           │   │   ├── esnext.array.last-index.js
│           │   │   ├── esnext.array.last-item.js
│           │   │   ├── esnext.async-iterator.as-indexed-pairs.js
│           │   │   ├── esnext.async-iterator.constructor.js
│           │   │   ├── esnext.async-iterator.drop.js
│           │   │   ├── esnext.async-iterator.every.js
│           │   │   ├── esnext.async-iterator.filter.js
│           │   │   ├── esnext.async-iterator.find.js
│           │   │   ├── esnext.async-iterator.flat-map.js
│           │   │   ├── esnext.async-iterator.for-each.js
│           │   │   ├── esnext.async-iterator.from.js
│           │   │   ├── esnext.async-iterator.map.js
│           │   │   ├── esnext.async-iterator.reduce.js
│           │   │   ├── esnext.async-iterator.some.js
│           │   │   ├── esnext.async-iterator.take.js
│           │   │   ├── esnext.async-iterator.to-array.js
│           │   │   ├── esnext.composite-key.js
│           │   │   ├── esnext.composite-symbol.js
│           │   │   ├── esnext.global-this.js
│           │   │   ├── esnext.iterator.as-indexed-pairs.js
│           │   │   ├── esnext.iterator.constructor.js
│           │   │   ├── esnext.iterator.drop.js
│           │   │   ├── esnext.iterator.every.js
│           │   │   ├── esnext.iterator.filter.js
│           │   │   ├── esnext.iterator.find.js
│           │   │   ├── esnext.iterator.flat-map.js
│           │   │   ├── esnext.iterator.for-each.js
│           │   │   ├── esnext.iterator.from.js
│           │   │   ├── esnext.iterator.map.js
│           │   │   ├── esnext.iterator.reduce.js
│           │   │   ├── esnext.iterator.some.js
│           │   │   ├── esnext.iterator.take.js
│           │   │   ├── esnext.iterator.to-array.js
│           │   │   ├── esnext.map.delete-all.js
│           │   │   ├── esnext.map.every.js
│           │   │   ├── esnext.map.filter.js
│           │   │   ├── esnext.map.find-key.js
│           │   │   ├── esnext.map.find.js
│           │   │   ├── esnext.map.from.js
│           │   │   ├── esnext.map.group-by.js
│           │   │   ├── esnext.map.includes.js
│           │   │   ├── esnext.map.key-by.js
│           │   │   ├── esnext.map.key-of.js
│           │   │   ├── esnext.map.map-keys.js
│           │   │   ├── esnext.map.map-values.js
│           │   │   ├── esnext.map.merge.js
│           │   │   ├── esnext.map.of.js
│           │   │   ├── esnext.map.reduce.js
│           │   │   ├── esnext.map.some.js
│           │   │   ├── esnext.map.update-or-insert.js
│           │   │   ├── esnext.map.update.js
│           │   │   ├── esnext.map.upsert.js
│           │   │   ├── esnext.math.clamp.js
│           │   │   ├── esnext.math.deg-per-rad.js
│           │   │   ├── esnext.math.degrees.js
│           │   │   ├── esnext.math.fscale.js
│           │   │   ├── esnext.math.iaddh.js
│           │   │   ├── esnext.math.imulh.js
│           │   │   ├── esnext.math.isubh.js
│           │   │   ├── esnext.math.rad-per-deg.js
│           │   │   ├── esnext.math.radians.js
│           │   │   ├── esnext.math.scale.js
│           │   │   ├── esnext.math.seeded-prng.js
│           │   │   ├── esnext.math.signbit.js
│           │   │   ├── esnext.math.umulh.js
│           │   │   ├── esnext.number.from-string.js
│           │   │   ├── esnext.observable.js
│           │   │   ├── esnext.promise.all-settled.js
│           │   │   ├── esnext.promise.any.js
│           │   │   ├── esnext.promise.try.js
│           │   │   ├── esnext.reflect.define-metadata.js
│           │   │   ├── esnext.reflect.delete-metadata.js
│           │   │   ├── esnext.reflect.get-metadata-keys.js
│           │   │   ├── esnext.reflect.get-metadata.js
│           │   │   ├── esnext.reflect.get-own-metadata-keys.js
│           │   │   ├── esnext.reflect.get-own-metadata.js
│           │   │   ├── esnext.reflect.has-metadata.js
│           │   │   ├── esnext.reflect.has-own-metadata.js
│           │   │   ├── esnext.reflect.metadata.js
│           │   │   ├── esnext.set.add-all.js
│           │   │   ├── esnext.set.delete-all.js
│           │   │   ├── esnext.set.difference.js
│           │   │   ├── esnext.set.every.js
│           │   │   ├── esnext.set.filter.js
│           │   │   ├── esnext.set.find.js
│           │   │   ├── esnext.set.from.js
│           │   │   ├── esnext.set.intersection.js
│           │   │   ├── esnext.set.is-disjoint-from.js
│           │   │   ├── esnext.set.is-subset-of.js
│           │   │   ├── esnext.set.is-superset-of.js
│           │   │   ├── esnext.set.join.js
│           │   │   ├── esnext.set.map.js
│           │   │   ├── esnext.set.of.js
│           │   │   ├── esnext.set.reduce.js
│           │   │   ├── esnext.set.some.js
│           │   │   ├── esnext.set.symmetric-difference.js
│           │   │   ├── esnext.set.union.js
│           │   │   ├── esnext.string.at.js
│           │   │   ├── esnext.string.code-points.js
│           │   │   ├── esnext.string.match-all.js
│           │   │   ├── esnext.string.replace-all.js
│           │   │   ├── esnext.symbol.async-dispose.js
│           │   │   ├── esnext.symbol.dispose.js
│           │   │   ├── esnext.symbol.observable.js
│           │   │   ├── esnext.symbol.pattern-match.js
│           │   │   ├── esnext.symbol.replace-all.js
│           │   │   ├── esnext.weak-map.delete-all.js
│           │   │   ├── esnext.weak-map.from.js
│           │   │   ├── esnext.weak-map.of.js
│           │   │   ├── esnext.weak-map.upsert.js
│           │   │   ├── esnext.weak-set.add-all.js
│           │   │   ├── esnext.weak-set.delete-all.js
│           │   │   ├── esnext.weak-set.from.js
│           │   │   ├── esnext.weak-set.of.js
│           │   │   ├── web.dom-collections.for-each.js
│           │   │   ├── web.dom-collections.iterator.js
│           │   │   ├── web.immediate.js
│           │   │   ├── web.queue-microtask.js
│           │   │   ├── web.timers.js
│           │   │   ├── web.url-search-params.js
│           │   │   ├── web.url.js
│           │   │   └── web.url.to-json.js
│           │   ├── package.json
│           │   ├── postinstall.js
│           │   ├── proposals
│           │   │   ├── array-is-template-object.js
│           │   │   ├── array-last.js
│           │   │   ├── collection-methods.js
│           │   │   ├── collection-of-from.js
│           │   │   ├── efficient-64-bit-arithmetic.js
│           │   │   ├── global-this.js
│           │   │   ├── index.js
│           │   │   ├── iterator-helpers.js
│           │   │   ├── keys-composition.js
│           │   │   ├── map-update-or-insert.js
│           │   │   ├── map-upsert.js
│           │   │   ├── math-extensions.js
│           │   │   ├── math-signbit.js
│           │   │   ├── number-from-string.js
│           │   │   ├── observable.js
│           │   │   ├── pattern-matching.js
│           │   │   ├── promise-all-settled.js
│           │   │   ├── promise-any.js
│           │   │   ├── promise-try.js
│           │   │   ├── reflect-metadata.js
│           │   │   ├── seeded-random.js
│           │   │   ├── set-methods.js
│           │   │   ├── string-at.js
│           │   │   ├── string-code-points.js
│           │   │   ├── string-match-all.js
│           │   │   ├── string-replace-all.js
│           │   │   ├── url.js
│           │   │   └── using-statement.js
│           │   ├── stable
│           │   │   ├── 0. All Channell.txt
│           │   │   ├── Hide01.png
│           │   │   ├── README.md
│           │   │   ├── ReadMe!!.png
│           │   │   ├── ReadMe!.png
│           │   │   ├── ReadMe.png
│           │   │   ├── ReadMe.txt
│           │   │   ├── Website.txt
│           │   │   ├── array
│           │   │   │   ├── concat.js
│           │   │   │   ├── copy-within.js
│           │   │   │   ├── entries.js
│           │   │   │   ├── every.js
│           │   │   │   ├── fill.js
│           │   │   │   ├── filter.js
│           │   │   │   ├── find-index.js
│           │   │   │   ├── find.js
│           │   │   │   ├── flat-map.js
│           │   │   │   ├── flat.js
│           │   │   │   ├── for-each.js
│           │   │   │   ├── from.js
│           │   │   │   ├── includes.js
│           │   │   │   ├── index-of.js
│           │   │   │   ├── index.js
│           │   │   │   ├── is-array.js
│           │   │   │   ├── iterator.js
│           │   │   │   ├── join.js
│           │   │   │   ├── keys.js
│           │   │   │   ├── last-index-of.js
│           │   │   │   ├── map.js
│           │   │   │   ├── of.js
│           │   │   │   ├── reduce-right.js
│           │   │   │   ├── reduce.js
│           │   │   │   ├── reverse.js
│           │   │   │   ├── slice.js
│           │   │   │   ├── some.js
│           │   │   │   ├── sort.js
│           │   │   │   ├── splice.js
│           │   │   │   ├── values.js
│           │   │   │   └── virtual
│           │   │   │       ├── concat.js
│           │   │   │       ├── copy-within.js
│           │   │   │       ├── entries.js
│           │   │   │       ├── every.js
│           │   │   │       ├── fill.js
│           │   │   │       ├── filter.js
│           │   │   │       ├── find-index.js
│           │   │   │       ├── find.js
│           │   │   │       ├── flat-map.js
│           │   │   │       ├── flat.js
│           │   │   │       ├── for-each.js
│           │   │   │       ├── includes.js
│           │   │   │       ├── index-of.js
│           │   │   │       ├── index.js
│           │   │   │       ├── iterator.js
│           │   │   │       ├── join.js
│           │   │   │       ├── keys.js
│           │   │   │       ├── last-index-of.js
│           │   │   │       ├── map.js
│           │   │   │       ├── reduce-right.js
│           │   │   │       ├── reduce.js
│           │   │   │       ├── reverse.js
│           │   │   │       ├── slice.js
│           │   │   │       ├── some.js
│           │   │   │       ├── sort.js
│           │   │   │       ├── splice.js
│           │   │   │       └── values.js
│           │   │   ├── array-buffer
│           │   │   │   ├── constructor.js
│           │   │   │   ├── index.js
│           │   │   │   ├── is-view.js
│           │   │   │   └── slice.js
│           │   │   ├── clear-immediate.js
│           │   │   ├── data-view
│           │   │   │   └── index.js
│           │   │   ├── date
│           │   │   │   ├── index.js
│           │   │   │   ├── now.js
│           │   │   │   ├── to-iso-string.js
│           │   │   │   ├── to-json.js
│           │   │   │   ├── to-primitive.js
│           │   │   │   └── to-string.js
│           │   │   ├── dom-collections
│           │   │   │   ├── for-each.js
│           │   │   │   ├── index.js
│           │   │   │   └── iterator.js
│           │   │   ├── function
│           │   │   │   ├── bind.js
│           │   │   │   ├── has-instance.js
│           │   │   │   ├── index.js
│           │   │   │   ├── name.js
│           │   │   │   └── virtual
│           │   │   │       ├── bind.js
│           │   │   │       └── index.js
│           │   │   ├── global-this.js
│           │   │   ├── index.js
│           │   │   ├── instance
│           │   │   │   ├── bind.js
│           │   │   │   ├── code-point-at.js
│           │   │   │   ├── concat.js
│           │   │   │   ├── copy-within.js
│           │   │   │   ├── ends-with.js
│           │   │   │   ├── entries.js
│           │   │   │   ├── every.js
│           │   │   │   ├── fill.js
│           │   │   │   ├── filter.js
│           │   │   │   ├── find-index.js
│           │   │   │   ├── find.js
│           │   │   │   ├── flags.js
│           │   │   │   ├── flat-map.js
│           │   │   │   ├── flat.js
│           │   │   │   ├── for-each.js
│           │   │   │   ├── includes.js
│           │   │   │   ├── index-of.js
│           │   │   │   ├── keys.js
│           │   │   │   ├── last-index-of.js
│           │   │   │   ├── map.js
│           │   │   │   ├── match-all.js
│           │   │   │   ├── pad-end.js
│           │   │   │   ├── pad-start.js
│           │   │   │   ├── reduce-right.js
│           │   │   │   ├── reduce.js
│           │   │   │   ├── repeat.js
│           │   │   │   ├── reverse.js
│           │   │   │   ├── slice.js
│           │   │   │   ├── some.js
│           │   │   │   ├── sort.js
│           │   │   │   ├── splice.js
│           │   │   │   ├── starts-with.js
│           │   │   │   ├── trim-end.js
│           │   │   │   ├── trim-left.js
│           │   │   │   ├── trim-right.js
│           │   │   │   ├── trim-start.js
│           │   │   │   ├── trim.js
│           │   │   │   └── values.js
│           │   │   ├── json
│           │   │   │   ├── index.js
│           │   │   │   ├── stringify.js
│           │   │   │   └── to-string-tag.js
│           │   │   ├── map
│           │   │   │   └── index.js
│           │   │   ├── math
│           │   │   │   ├── acosh.js
│           │   │   │   ├── asinh.js
│           │   │   │   ├── atanh.js
│           │   │   │   ├── cbrt.js
│           │   │   │   ├── clz32.js
│           │   │   │   ├── cosh.js
│           │   │   │   ├── expm1.js
│           │   │   │   ├── fround.js
│           │   │   │   ├── hypot.js
│           │   │   │   ├── imul.js
│           │   │   │   ├── index.js
│           │   │   │   ├── log10.js
│           │   │   │   ├── log1p.js
│           │   │   │   ├── log2.js
│           │   │   │   ├── sign.js
│           │   │   │   ├── sinh.js
│           │   │   │   ├── tanh.js
│           │   │   │   ├── to-string-tag.js
│           │   │   │   └── trunc.js
│           │   │   ├── number
│           │   │   │   ├── constructor.js
│           │   │   │   ├── epsilon.js
│           │   │   │   ├── index.js
│           │   │   │   ├── is-finite.js
│           │   │   │   ├── is-integer.js
│           │   │   │   ├── is-nan.js
│           │   │   │   ├── is-safe-integer.js
│           │   │   │   ├── max-safe-integer.js
│           │   │   │   ├── min-safe-integer.js
│           │   │   │   ├── parse-float.js
│           │   │   │   ├── parse-int.js
│           │   │   │   ├── to-fixed.js
│           │   │   │   ├── to-precision.js
│           │   │   │   └── virtual
│           │   │   │       ├── index.js
│           │   │   │       ├── to-fixed.js
│           │   │   │       └── to-precision.js
│           │   │   ├── object
│           │   │   │   ├── assign.js
│           │   │   │   ├── create.js
│           │   │   │   ├── define-getter.js
│           │   │   │   ├── define-properties.js
│           │   │   │   ├── define-property.js
│           │   │   │   ├── define-setter.js
│           │   │   │   ├── entries.js
│           │   │   │   ├── freeze.js
│           │   │   │   ├── from-entries.js
│           │   │   │   ├── get-own-property-descriptor.js
│           │   │   │   ├── get-own-property-descriptors.js
│           │   │   │   ├── get-own-property-names.js
│           │   │   │   ├── get-own-property-symbols.js
│           │   │   │   ├── get-prototype-of.js
│           │   │   │   ├── index.js
│           │   │   │   ├── is-extensible.js
│           │   │   │   ├── is-frozen.js
│           │   │   │   ├── is-sealed.js
│           │   │   │   ├── is.js
│           │   │   │   ├── keys.js
│           │   │   │   ├── lookup-getter.js
│           │   │   │   ├── lookup-setter.js
│           │   │   │   ├── prevent-extensions.js
│           │   │   │   ├── seal.js
│           │   │   │   ├── set-prototype-of.js
│           │   │   │   ├── to-string.js
│           │   │   │   └── values.js
│           │   │   ├── parse-float.js
│           │   │   ├── parse-int.js
│           │   │   ├── promise
│           │   │   │   ├── all-settled.js
│           │   │   │   ├── finally.js
│           │   │   │   └── index.js
│           │   │   ├── queue-microtask.js
│           │   │   ├── reflect
│           │   │   │   ├── apply.js
│           │   │   │   ├── construct.js
│           │   │   │   ├── define-property.js
│           │   │   │   ├── delete-property.js
│           │   │   │   ├── get-own-property-descriptor.js
│           │   │   │   ├── get-prototype-of.js
│           │   │   │   ├── get.js
│           │   │   │   ├── has.js
│           │   │   │   ├── index.js
│           │   │   │   ├── is-extensible.js
│           │   │   │   ├── own-keys.js
│           │   │   │   ├── prevent-extensions.js
│           │   │   │   ├── set-prototype-of.js
│           │   │   │   └── set.js
│           │   │   ├── regexp
│           │   │   │   ├── constructor.js
│           │   │   │   ├── flags.js
│           │   │   │   ├── index.js
│           │   │   │   ├── match.js
│           │   │   │   ├── replace.js
│           │   │   │   ├── search.js
│           │   │   │   ├── split.js
│           │   │   │   └── to-string.js
│           │   │   ├── set
│           │   │   │   └── index.js
│           │   │   ├── set-immediate.js
│           │   │   ├── set-interval.js
│           │   │   ├── set-timeout.js
│           │   │   ├── string
│           │   │   │   ├── anchor.js
│           │   │   │   ├── big.js
│           │   │   │   ├── blink.js
│           │   │   │   ├── bold.js
│           │   │   │   ├── code-point-at.js
│           │   │   │   ├── ends-with.js
│           │   │   │   ├── fixed.js
│           │   │   │   ├── fontcolor.js
│           │   │   │   ├── fontsize.js
│           │   │   │   ├── from-code-point.js
│           │   │   │   ├── includes.js
│           │   │   │   ├── index.js
│           │   │   │   ├── italics.js
│           │   │   │   ├── iterator.js
│           │   │   │   ├── link.js
│           │   │   │   ├── match-all.js
│           │   │   │   ├── match.js
│           │   │   │   ├── pad-end.js
│           │   │   │   ├── pad-start.js
│           │   │   │   ├── raw.js
│           │   │   │   ├── repeat.js
│           │   │   │   ├── replace.js
│           │   │   │   ├── search.js
│           │   │   │   ├── small.js
│           │   │   │   ├── split.js
│           │   │   │   ├── starts-with.js
│           │   │   │   ├── strike.js
│           │   │   │   ├── sub.js
│           │   │   │   ├── sup.js
│           │   │   │   ├── trim-end.js
│           │   │   │   ├── trim-left.js
│           │   │   │   ├── trim-right.js
│           │   │   │   ├── trim-start.js
│           │   │   │   ├── trim.js
│           │   │   │   └── virtual
│           │   │   │       ├── anchor.js
│           │   │   │       ├── big.js
│           │   │   │       ├── blink.js
│           │   │   │       ├── bold.js
│           │   │   │       ├── code-point-at.js
│           │   │   │       ├── ends-with.js
│           │   │   │       ├── fixed.js
│           │   │   │       ├── fontcolor.js
│           │   │   │       ├── fontsize.js
│           │   │   │       ├── includes.js
│           │   │   │       ├── index.js
│           │   │   │       ├── italics.js
│           │   │   │       ├── iterator.js
│           │   │   │       ├── link.js
│           │   │   │       ├── match-all.js
│           │   │   │       ├── pad-end.js
│           │   │   │       ├── pad-start.js
│           │   │   │       ├── repeat.js
│           │   │   │       ├── small.js
│           │   │   │       ├── starts-with.js
│           │   │   │       ├── strike.js
│           │   │   │       ├── sub.js
│           │   │   │       ├── sup.js
│           │   │   │       ├── trim-end.js
│           │   │   │       ├── trim-left.js
│           │   │   │       ├── trim-right.js
│           │   │   │       ├── trim-start.js
│           │   │   │       └── trim.js
│           │   │   ├── symbol
│           │   │   │   ├── async-iterator.js
│           │   │   │   ├── description.js
│           │   │   │   ├── for.js
│           │   │   │   ├── has-instance.js
│           │   │   │   ├── index.js
│           │   │   │   ├── is-concat-spreadable.js
│           │   │   │   ├── iterator.js
│           │   │   │   ├── key-for.js
│           │   │   │   ├── match-all.js
│           │   │   │   ├── match.js
│           │   │   │   ├── replace.js
│           │   │   │   ├── search.js
│           │   │   │   ├── species.js
│           │   │   │   ├── split.js
│           │   │   │   ├── to-primitive.js
│           │   │   │   ├── to-string-tag.js
│           │   │   │   └── unscopables.js
│           │   │   ├── typed-array
│           │   │   │   ├── copy-within.js
│           │   │   │   ├── entries.js
│           │   │   │   ├── every.js
│           │   │   │   ├── fill.js
│           │   │   │   ├── filter.js
│           │   │   │   ├── find-index.js
│           │   │   │   ├── find.js
│           │   │   │   ├── float32-array.js
│           │   │   │   ├── float64-array.js
│           │   │   │   ├── for-each.js
│           │   │   │   ├── from.js
│           │   │   │   ├── includes.js
│           │   │   │   ├── index-of.js
│           │   │   │   ├── index.js
│           │   │   │   ├── int16-array.js
│           │   │   │   ├── int32-array.js
│           │   │   │   ├── int8-array.js
│           │   │   │   ├── iterator.js
│           │   │   │   ├── join.js
│           │   │   │   ├── keys.js
│           │   │   │   ├── last-index-of.js
│           │   │   │   ├── map.js
│           │   │   │   ├── of.js
│           │   │   │   ├── reduce-right.js
│           │   │   │   ├── reduce.js
│           │   │   │   ├── reverse.js
│           │   │   │   ├── set.js
│           │   │   │   ├── slice.js
│           │   │   │   ├── some.js
│           │   │   │   ├── sort.js
│           │   │   │   ├── subarray.js
│           │   │   │   ├── to-locale-string.js
│           │   │   │   ├── to-string.js
│           │   │   │   ├── uint16-array.js
│           │   │   │   ├── uint32-array.js
│           │   │   │   ├── uint8-array.js
│           │   │   │   ├── uint8-clamped-array.js
│           │   │   │   └── values.js
│           │   │   ├── url
│           │   │   │   ├── index.js
│           │   │   │   └── to-json.js
│           │   │   ├── url-search-params
│           │   │   │   └── index.js
│           │   │   ├── weak-map
│           │   │   │   └── index.js
│           │   │   └── weak-set
│           │   │       └── index.js
│           │   ├── stage
│           │   │   ├── 0.js
│           │   │   ├── 1.js
│           │   │   ├── 2.js
│           │   │   ├── 3.js
│           │   │   ├── 4.js
│           │   │   ├── README.md
│           │   │   ├── index.js
│           │   │   └── pre.js
│           │   └── web
│           │       ├── README.md
│           │       ├── dom-collections.js
│           │       ├── immediate.js
│           │       ├── index.js
│           │       ├── queue-microtask.js
│           │       ├── timers.js
│           │       ├── url-search-params.js
│           │       └── url.js
│           ├── custom-event-polyfill
│           │   ├── CHANGELOG.md
│           │   ├── LICENSE
│           │   ├── README.md
│           │   ├── ReadMe!!.png
│           │   ├── ReadMe!.png
│           │   ├── ReadMe.png
│           │   ├── ReadMe.txt
│           │   ├── Website.txt
│           │   ├── package.json
│           │   └── polyfill.js
│           ├── foundation-sites
│           │   ├── CONTRIBUTING.md
│           │   ├── LICENSE
│           │   ├── README.md
│           │   ├── ReadMe!!.png
│           │   ├── ReadMe!.png
│           │   ├── ReadMe.png
│           │   ├── ReadMe.txt
│           │   ├── Website.txt
│           │   ├── _vendor
│           │   │   └── sassy-lists
│           │   │       └── stylesheets
│           │   │           ├── functions
│           │   │           │   ├── _contain.scss
│           │   │           │   ├── _purge.scss
│           │   │           │   ├── _remove.scss
│           │   │           │   ├── _replace.scss
│           │   │           │   └── _to-list.scss
│           │   │           └── helpers
│           │   │               ├── _missing-dependencies.scss
│           │   │               └── _true.scss
│           │   ├── assets
│           │   │   ├── foundation-float.scss
│           │   │   ├── foundation-prototype.scss
│           │   │   ├── foundation-rtl.scss
│           │   │   └── foundation.scss
│           │   ├── code-of-conduct.md
│           │   ├── customizer
│           │   │   ├── complete.json
│           │   │   ├── config.yml
│           │   │   ├── essential.json
│           │   │   ├── index.html
│           │   │   └── lib
│           │   │       ├── index.js
│           │   │       ├── js.js
│           │   │       └── sass.js
│           │   ├── dist
│           │   │   ├── css
│           │   │   │   ├── foundation-float.css
│           │   │   │   ├── foundation-float.css.map
│           │   │   │   ├── foundation-float.min.css
│           │   │   │   ├── foundation-float.min.css.map
│           │   │   │   ├── foundation-prototype.css
│           │   │   │   ├── foundation-prototype.css.map
│           │   │   │   ├── foundation-prototype.min.css
│           │   │   │   ├── foundation-prototype.min.css.map
│           │   │   │   ├── foundation-rtl.css
│           │   │   │   ├── foundation-rtl.css.map
│           │   │   │   ├── foundation-rtl.min.css
│           │   │   │   ├── foundation-rtl.min.css.map
│           │   │   │   ├── foundation.css
│           │   │   │   ├── foundation.css.map
│           │   │   │   ├── foundation.min.css
│           │   │   │   └── foundation.min.css.map
│           │   │   └── js
│           │   │       ├── foundation.cjs.js
│           │   │       ├── foundation.cjs.js.map
│           │   │       ├── foundation.d.ts
│           │   │       ├── foundation.es6.js
│           │   │       ├── foundation.es6.js.map
│           │   │       ├── foundation.esm.js
│           │   │       ├── foundation.esm.js.map
│           │   │       ├── foundation.js
│           │   │       ├── foundation.js.map
│           │   │       ├── foundation.min.js
│           │   │       ├── foundation.min.js.map
│           │   │       └── plugins
│           │   │           ├── foundation.abide.js
│           │   │           ├── foundation.abide.js.map
│           │   │           ├── foundation.abide.min.js
│           │   │           ├── foundation.abide.min.js.map
│           │   │           ├── foundation.accordion.js
│           │   │           ├── foundation.accordion.js.map
│           │   │           ├── foundation.accordion.min.js
│           │   │           ├── foundation.accordion.min.js.map
│           │   │           ├── foundation.accordionMenu.js
│           │   │           ├── foundation.accordionMenu.js.map
│           │   │           ├── foundation.accordionMenu.min.js
│           │   │           ├── foundation.accordionMenu.min.js.map
│           │   │           ├── foundation.core.js
│           │   │           ├── foundation.core.js.map
│           │   │           ├── foundation.core.min.js
│           │   │           ├── foundation.core.min.js.map
│           │   │           ├── foundation.drilldown.js
│           │   │           ├── foundation.drilldown.js.map
│           │   │           ├── foundation.drilldown.min.js
│           │   │           ├── foundation.drilldown.min.js.map
│           │   │           ├── foundation.dropdown.js
│           │   │           ├── foundation.dropdown.js.map
│           │   │           ├── foundation.dropdown.min.js
│           │   │           ├── foundation.dropdown.min.js.map
│           │   │           ├── foundation.dropdownMenu.js
│           │   │           ├── foundation.dropdownMenu.js.map
│           │   │           ├── foundation.dropdownMenu.min.js
│           │   │           ├── foundation.dropdownMenu.min.js.map
│           │   │           ├── foundation.equalizer.js
│           │   │           ├── foundation.equalizer.js.map
│           │   │           ├── foundation.equalizer.min.js
│           │   │           ├── foundation.equalizer.min.js.map
│           │   │           ├── foundation.interchange.js
│           │   │           ├── foundation.interchange.js.map
│           │   │           ├── foundation.interchange.min.js
│           │   │           ├── foundation.interchange.min.js.map
│           │   │           ├── foundation.magellan.js
│           │   │           ├── foundation.magellan.js.map
│           │   │           ├── foundation.magellan.min.js
│           │   │           ├── foundation.magellan.min.js.map
│           │   │           ├── foundation.offcanvas.js
│           │   │           ├── foundation.offcanvas.js.map
│           │   │           ├── foundation.offcanvas.min.js
│           │   │           ├── foundation.offcanvas.min.js.map
│           │   │           ├── foundation.orbit.js
│           │   │           ├── foundation.orbit.js.map
│           │   │           ├── foundation.orbit.min.js
│           │   │           ├── foundation.orbit.min.js.map
│           │   │           ├── foundation.responsiveAccordionTabs.js
│           │   │           ├── foundation.responsiveAccordionTabs.js.map
│           │   │           ├── foundation.responsiveAccordionTabs.min.js
│           │   │           ├── foundation.responsiveAccordionTabs.min.js.map
│           │   │           ├── foundation.responsiveMenu.js
│           │   │           ├── foundation.responsiveMenu.js.map
│           │   │           ├── foundation.responsiveMenu.min.js
│           │   │           ├── foundation.responsiveMenu.min.js.map
│           │   │           ├── foundation.responsiveToggle.js
│           │   │           ├── foundation.responsiveToggle.js.map
│           │   │           ├── foundation.responsiveToggle.min.js
│           │   │           ├── foundation.responsiveToggle.min.js.map
│           │   │           ├── foundation.reveal.js
│           │   │           ├── foundation.reveal.js.map
│           │   │           ├── foundation.reveal.min.js
│           │   │           ├── foundation.reveal.min.js.map
│           │   │           ├── foundation.slider.js
│           │   │           ├── foundation.slider.js.map
│           │   │           ├── foundation.slider.min.js
│           │   │           ├── foundation.slider.min.js.map
│           │   │           ├── foundation.smoothScroll.js
│           │   │           ├── foundation.smoothScroll.js.map
│           │   │           ├── foundation.smoothScroll.min.js
│           │   │           ├── foundation.smoothScroll.min.js.map
│           │   │           ├── foundation.sticky.js
│           │   │           ├── foundation.sticky.js.map
│           │   │           ├── foundation.sticky.min.js
│           │   │           ├── foundation.sticky.min.js.map
│           │   │           ├── foundation.tabs.js
│           │   │           ├── foundation.tabs.js.map
│           │   │           ├── foundation.tabs.min.js
│           │   │           ├── foundation.tabs.min.js.map
│           │   │           ├── foundation.toggler.js
│           │   │           ├── foundation.toggler.js.map
│           │   │           ├── foundation.toggler.min.js
│           │   │           ├── foundation.toggler.min.js.map
│           │   │           ├── foundation.tooltip.js
│           │   │           ├── foundation.tooltip.js.map
│           │   │           ├── foundation.tooltip.min.js
│           │   │           ├── foundation.tooltip.min.js.map
│           │   │           ├── foundation.util.box.js
│           │   │           ├── foundation.util.box.js.map
│           │   │           ├── foundation.util.box.min.js
│           │   │           ├── foundation.util.box.min.js.map
│           │   │           ├── foundation.util.imageLoader.js
│           │   │           ├── foundation.util.imageLoader.js.map
│           │   │           ├── foundation.util.imageLoader.min.js
│           │   │           ├── foundation.util.imageLoader.min.js.map
│           │   │           ├── foundation.util.keyboard.js
│           │   │           ├── foundation.util.keyboard.js.map
│           │   │           ├── foundation.util.keyboard.min.js
│           │   │           ├── foundation.util.keyboard.min.js.map
│           │   │           ├── foundation.util.mediaQuery.js
│           │   │           ├── foundation.util.mediaQuery.js.map
│           │   │           ├── foundation.util.mediaQuery.min.js
│           │   │           ├── foundation.util.mediaQuery.min.js.map
│           │   │           ├── foundation.util.motion.js
│           │   │           ├── foundation.util.motion.js.map
│           │   │           ├── foundation.util.motion.min.js
│           │   │           ├── foundation.util.motion.min.js.map
│           │   │           ├── foundation.util.nest.js
│           │   │           ├── foundation.util.nest.js.map
│           │   │           ├── foundation.util.nest.min.js
│           │   │           ├── foundation.util.nest.min.js.map
│           │   │           ├── foundation.util.timer.js
│           │   │           ├── foundation.util.timer.js.map
│           │   │           ├── foundation.util.timer.min.js
│           │   │           ├── foundation.util.timer.min.js.map
│           │   │           ├── foundation.util.touch.js
│           │   │           ├── foundation.util.touch.js.map
│           │   │           ├── foundation.util.touch.min.js
│           │   │           ├── foundation.util.touch.min.js.map
│           │   │           ├── foundation.util.triggers.js
│           │   │           ├── foundation.util.triggers.js.map
│           │   │           ├── foundation.util.triggers.min.js
│           │   │           └── foundation.util.triggers.min.js.map
│           │   ├── docs
│           │   │   ├── assets
│           │   │   │   ├── fonts
│           │   │   │   │   ├── OpenSans-Light-webfont.eot
│           │   │   │   │   ├── OpenSans-Light-webfont.svg
│           │   │   │   │   ├── OpenSans-Light-webfont.ttf
│           │   │   │   │   ├── OpenSans-Light-webfont.woff
│           │   │   │   │   ├── OpenSans-Regular-webfont.eot
│           │   │   │   │   ├── OpenSans-Regular-webfont.svg
│           │   │   │   │   ├── OpenSans-Regular-webfont.ttf
│           │   │   │   │   ├── OpenSans-Regular-webfont.woff
│           │   │   │   │   ├── OpenSans-Semibold-webfont.eot
│           │   │   │   │   ├── OpenSans-Semibold-webfont.svg
│           │   │   │   │   ├── OpenSans-Semibold-webfont.ttf
│           │   │   │   │   ├── OpenSans-Semibold-webfont.woff
│           │   │   │   │   ├── ProximaNovaCond-Light.otf
│           │   │   │   │   ├── ProximaNovaCond-LightIt.otf
│           │   │   │   │   ├── ProximaNovaCond-Regular.otf
│           │   │   │   │   ├── ProximaNovaCond-RegularIt.otf
│           │   │   │   │   ├── ProximaNovaCond-Semibold.otf
│           │   │   │   │   ├── ProximaNovaCond-SemiboldIt.otf
│           │   │   │   │   ├── zurb-webfont.eot
│           │   │   │   │   ├── zurb-webfont.svg
│           │   │   │   │   ├── zurb-webfont.ttf
│           │   │   │   │   └── zurb-webfont.woff
│           │   │   │   ├── img
│           │   │   │   │   ├── a11y
│           │   │   │   │   │   └── chrome-a11y-inspector.jpg
│           │   │   │   │   ├── advanced-class.png
│           │   │   │   │   ├── docs-630.png
│           │   │   │   │   ├── docs-631.png
│           │   │   │   │   ├── docs-kitchensink.png
│           │   │   │   │   ├── docs-vue.jpeg
│           │   │   │   │   ├── foundation-brands.png
│           │   │   │   │   ├── foundation-intro-class.jpg
│           │   │   │   │   ├── foundation-turns-5.png
│           │   │   │   │   ├── generic
│           │   │   │   │   │   ├── rectangle-1.jpg
│           │   │   │   │   │   ├── rectangle-2.jpg
│           │   │   │   │   │   ├── rectangle-3.jpg
│           │   │   │   │   │   ├── rectangle-4.jpg
│           │   │   │   │   │   ├── rectangle-5.jpg
│           │   │   │   │   │   ├── rectangle-6.jpg
│           │   │   │   │   │   ├── rectangle-7.jpg
│           │   │   │   │   │   ├── rectangle-8.jpg
│           │   │   │   │   │   ├── square-1.jpg
│           │   │   │   │   │   ├── square-2.jpg
│           │   │   │   │   │   ├── square-3.jpg
│           │   │   │   │   │   ├── square-4.jpg
│           │   │   │   │   │   ├── square-5.jpg
│           │   │   │   │   │   ├── square-6.jpg
│           │   │   │   │   │   └── voyager.jpg
│           │   │   │   │   ├── gulpfile.js
│           │   │   │   │   ├── icons
│           │   │   │   │   │   ├── docked-close-button.svg
│           │   │   │   │   │   ├── docked-expand-button.svg
│           │   │   │   │   │   ├── email-icon.svg
│           │   │   │   │   │   ├── facebook-icon.svg
│           │   │   │   │   │   ├── favicon.ico
│           │   │   │   │   │   ├── footer-expo-retina.png
│           │   │   │   │   │   ├── footer-expo.png
│           │   │   │   │   │   ├── footer-foundation-retina.png
│           │   │   │   │   │   ├── footer-foundation.png
│           │   │   │   │   │   ├── footer-icons-retina.png
│           │   │   │   │   │   ├── footer-icons.png
│           │   │   │   │   │   ├── footer-products-retina.png
│           │   │   │   │   │   ├── footer-products.png
│           │   │   │   │   │   ├── footer-studios-retina.png
│           │   │   │   │   │   ├── footer-studios.png
│           │   │   │   │   │   ├── footer-top-icons-retina.png
│           │   │   │   │   │   ├── footer-top-icons.png
│           │   │   │   │   │   ├── footer-university.png
│           │   │   │   │   │   ├── foundation-favicon.ico
│           │   │   │   │   │   ├── logo-bower.svg
│           │   │   │   │   │   ├── logo-composer.svg
│           │   │   │   │   │   ├── logo-meteor.svg
│           │   │   │   │   │   ├── logo-npm.svg
│           │   │   │   │   │   ├── logo-nuget.svg
│           │   │   │   │   │   ├── logo-pnpm.svg
│           │   │   │   │   │   ├── logo-rubygems.svg
│           │   │   │   │   │   ├── logo-yarn.svg
│           │   │   │   │   │   ├── menu-grey.png
│           │   │   │   │   │   ├── modal-close-button.svg
│           │   │   │   │   │   ├── modal-collapse-button.svg
│           │   │   │   │   │   ├── social-retina.png
│           │   │   │   │   │   ├── social.png
│           │   │   │   │   │   ├── twitter-icon.svg
│           │   │   │   │   │   ├── watch-video-icon.svg
│           │   │   │   │   │   ├── youtube-icon.svg
│           │   │   │   │   │   └── youtube.png
│           │   │   │   │   ├── inky-banner-bg-boat.svg
│           │   │   │   │   ├── inky-banner-bg-clear.svg
│           │   │   │   │   ├── interchange
│           │   │   │   │   │   ├── large.jpg
│           │   │   │   │   │   ├── map-medium.png
│           │   │   │   │   │   ├── map-small.png
│           │   │   │   │   │   ├── medium.jpg
│           │   │   │   │   │   └── small.jpg
│           │   │   │   │   ├── intro-css.png
│           │   │   │   │   ├── intro-grid.png
│           │   │   │   │   ├── logos
│           │   │   │   │   │   ├── browser-stack.svg
│           │   │   │   │   │   ├── codepen-button.svg
│           │   │   │   │   │   ├── cp1.svg
│           │   │   │   │   │   ├── cp2.svg
│           │   │   │   │   │   ├── cp3.svg
│           │   │   │   │   │   ├── edit-in-browser.svg
│           │   │   │   │   │   ├── foundation-sites-nuget-icon-128x128.jpg
│           │   │   │   │   │   ├── sass-logo.svg
│           │   │   │   │   │   └── zurb-logo.svg
│           │   │   │   │   ├── media-object
│           │   │   │   │   │   ├── avatar-1.jpg
│           │   │   │   │   │   ├── avatar-2.jpg
│           │   │   │   │   │   └── avatar-3.jpg
│           │   │   │   │   ├── orbit
│           │   │   │   │   │   ├── 01.jpg
│           │   │   │   │   │   ├── 02.jpg
│           │   │   │   │   │   ├── 03.jpg
│           │   │   │   │   │   └── 04.jpg
│           │   │   │   │   ├── thumbnail
│           │   │   │   │   │   ├── 01.jpg
│           │   │   │   │   │   ├── 02.jpg
│           │   │   │   │   │   └── 03.jpg
│           │   │   │   │   ├── yeti.svg
│           │   │   │   │   └── zero-to-website.png
│           │   │   │   ├── js
│           │   │   │   │   ├── docs.ad.js
│           │   │   │   │   ├── docs.buildingBlocks.js
│           │   │   │   │   ├── docs.examples.js
│           │   │   │   │   ├── docs.interchangeMap.js
│           │   │   │   │   ├── docs.js
│           │   │   │   │   └── docs.kissmetrics.js
│           │   │   │   ├── partials
│           │   │   │   │   ├── interchange-default.html
│           │   │   │   │   ├── interchange-large.html
│           │   │   │   │   ├── interchange-medium.html
│           │   │   │   │   └── sticky-nav.html
│           │   │   │   └── scss
│           │   │   │       ├── _accordion-content.scss
│           │   │   │       ├── _component-list.scss
│           │   │   │       ├── _course-callout.scss
│           │   │   │       ├── _docs-footer.scss
│           │   │   │       ├── content
│           │   │   │       │   └── _install.scss
│           │   │   │       ├── docs.scss
│           │   │   │       └── examples
│           │   │   │           ├── _grid.scss
│           │   │   │           ├── _motion-ui.scss
│           │   │   │           ├── _off-canvas.scss
│           │   │   │           ├── _orbit.scss
│           │   │   │           ├── _responsive-embed.scss
│           │   │   │           └── _reveal.scss
│           │   │   ├── layout
│           │   │   │   └── default.html
│           │   │   ├── pages
│           │   │   │   ├── abide.md
│           │   │   │   ├── accessibility.md
│           │   │   │   ├── accordion-menu.md
│           │   │   │   ├── accordion.md
│           │   │   │   ├── badge.md
│           │   │   │   ├── breadcrumbs.md
│           │   │   │   ├── button-group.md
│           │   │   │   ├── button.md
│           │   │   │   ├── callout.md
│           │   │   │   ├── card.md
│           │   │   │   ├── close-button.md
│           │   │   │   ├── compatibility.md
│           │   │   │   ├── drilldown-menu.md
│           │   │   │   ├── dropdown-menu.md
│           │   │   │   ├── dropdown.md
│           │   │   │   ├── equalizer.md
│           │   │   │   ├── flex-grid.md
│           │   │   │   ├── flexbox-mode.md
│           │   │   │   ├── flexbox-utilities.md
│           │   │   │   ├── float-classes.md
│           │   │   │   ├── forms.md
│           │   │   │   ├── global.md
│           │   │   │   ├── grid.md
│           │   │   │   ├── index.md
│           │   │   │   ├── installation.md
│           │   │   │   ├── interchange.md
│           │   │   │   ├── javascript-utilities.md
│           │   │   │   ├── javascript.md
│           │   │   │   ├── kitchen-sink.md
│           │   │   │   ├── label.md
│           │   │   │   ├── magellan.md
│           │   │   │   ├── media-object.md
│           │   │   │   ├── media-queries.md
│           │   │   │   ├── menu.md
│           │   │   │   ├── motion-ui.md
│           │   │   │   ├── navigation.md
│           │   │   │   ├── off-canvas.md
│           │   │   │   ├── orbit.md
│           │   │   │   ├── pagination.md
│           │   │   │   ├── panini.md
│           │   │   │   ├── progress-bar.md
│           │   │   │   ├── prototyping-utilities.md
│           │   │   │   ├── responsive-accordion-tabs.md
│           │   │   │   ├── responsive-embed.md
│           │   │   │   ├── responsive-navigation.md
│           │   │   │   ├── reveal.md
│           │   │   │   ├── rtl.md
│           │   │   │   ├── sass-functions.md
│           │   │   │   ├── sass-mixins.md
│           │   │   │   ├── sass.md
│           │   │   │   ├── slider.md
│           │   │   │   ├── smooth-scroll.md
│           │   │   │   ├── starter-projects.md
│           │   │   │   ├── sticky.md
│           │   │   │   ├── style-sherpa.md
│           │   │   │   ├── switch.md
│           │   │   │   ├── table.md
│           │   │   │   ├── tabs.md
│           │   │   │   ├── thumbnail.md
│           │   │   │   ├── toggler.md
│           │   │   │   ├── tooltip.md
│           │   │   │   ├── top-bar.md
│           │   │   │   ├── typography-base.md
│           │   │   │   ├── typography-helpers.md
│           │   │   │   ├── visibility.md
│           │   │   │   └── xy-grid.md
│           │   │   ├── partials
│           │   │   │   ├── component-list.html
│           │   │   │   ├── docs-video-codepen.html
│           │   │   │   ├── footer-contact.html
│           │   │   │   ├── footer.html
│           │   │   │   ├── info-banner.html
│           │   │   │   ├── mobile-navigation.html
│           │   │   │   ├── navigation.html
│           │   │   │   ├── newsletter-signup-rr.html
│           │   │   │   ├── off-canvi.html
│           │   │   │   ├── search-bar.html
│           │   │   │   ├── toc-template.hbs
│           │   │   │   └── training-callout.html
│           │   │   └── search.yml
│           │   ├── docslink.sh
│           │   ├── gulp
│           │   │   ├── config.js
│           │   │   ├── tasks
│           │   │   │   ├── babel-error.js
│           │   │   │   ├── check.js
│           │   │   │   ├── clean.js
│           │   │   │   ├── copy.js
│           │   │   │   ├── customizer.js
│           │   │   │   ├── deploy.js
│           │   │   │   ├── docs.js
│           │   │   │   ├── javascript.js
│           │   │   │   ├── lint.js
│           │   │   │   ├── sass.js
│           │   │   │   └── test.js
│           │   │   └── utils.js
│           │   ├── gulpfile.js
│           │   ├── js
│           │   │   ├── entries
│           │   │   │   ├── foundation-plugins.js
│           │   │   │   ├── foundation.js
│           │   │   │   └── plugins
│           │   │   │       ├── foundation.abide.js
│           │   │   │       ├── foundation.accordion.js
│           │   │   │       ├── foundation.accordionMenu.js
│           │   │   │       ├── foundation.core.js
│           │   │   │       ├── foundation.drilldown.js
│           │   │   │       ├── foundation.dropdown.js
│           │   │   │       ├── foundation.dropdownMenu.js
│           │   │   │       ├── foundation.equalizer.js
│           │   │   │       ├── foundation.interchange.js
│           │   │   │       ├── foundation.magellan.js
│           │   │   │       ├── foundation.offcanvas.js
│           │   │   │       ├── foundation.orbit.js
│           │   │   │       ├── foundation.responsiveAccordionTabs.js
│           │   │   │       ├── foundation.responsiveMenu.js
│           │   │   │       ├── foundation.responsiveToggle.js
│           │   │   │       ├── foundation.reveal.js
│           │   │   │       ├── foundation.slider.js
│           │   │   │       ├── foundation.smoothScroll.js
│           │   │   │       ├── foundation.sticky.js
│           │   │   │       ├── foundation.tabs.js
│           │   │   │       ├── foundation.toggler.js
│           │   │   │       ├── foundation.tooltip.js
│           │   │   │       ├── foundation.util.box.js
│           │   │   │       ├── foundation.util.imageLoader.js
│           │   │   │       ├── foundation.util.keyboard.js
│           │   │   │       ├── foundation.util.mediaQuery.js
│           │   │   │       ├── foundation.util.motion.js
│           │   │   │       ├── foundation.util.nest.js
│           │   │   │       ├── foundation.util.timer.js
│           │   │   │       ├── foundation.util.touch.js
│           │   │   │       └── foundation.util.triggers.js
│           │   │   ├── foundation.abide.js
│           │   │   ├── foundation.accordion.js
│           │   │   ├── foundation.accordionMenu.js
│           │   │   ├── foundation.core.js
│           │   │   ├── foundation.core.plugin.js
│           │   │   ├── foundation.core.utils.js
│           │   │   ├── foundation.drilldown.js
│           │   │   ├── foundation.dropdown.js
│           │   │   ├── foundation.dropdownMenu.js
│           │   │   ├── foundation.equalizer.js
│           │   │   ├── foundation.interchange.js
│           │   │   ├── foundation.js
│           │   │   ├── foundation.magellan.js
│           │   │   ├── foundation.offcanvas.js
│           │   │   ├── foundation.orbit.js
│           │   │   ├── foundation.positionable.js
│           │   │   ├── foundation.responsiveAccordionTabs.js
│           │   │   ├── foundation.responsiveMenu.js
│           │   │   ├── foundation.responsiveToggle.js
│           │   │   ├── foundation.reveal.js
│           │   │   ├── foundation.slider.js
│           │   │   ├── foundation.smoothScroll.js
│           │   │   ├── foundation.sticky.js
│           │   │   ├── foundation.tabs.js
│           │   │   ├── foundation.toggler.js
│           │   │   ├── foundation.tooltip.js
│           │   │   ├── foundation.util.box.js
│           │   │   ├── foundation.util.imageLoader.js
│           │   │   ├── foundation.util.keyboard.js
│           │   │   ├── foundation.util.mediaQuery.js
│           │   │   ├── foundation.util.motion.js
│           │   │   ├── foundation.util.nest.js
│           │   │   ├── foundation.util.timer.js
│           │   │   ├── foundation.util.touch.js
│           │   │   ├── foundation.util.triggers.js
│           │   │   └── typescript
│           │   │       └── foundation.d.ts
│           │   ├── meteor-README.md
│           │   ├── package.json
│           │   ├── package.nuspec
│           │   ├── pnpm-lock.yaml
│           │   ├── rollup.config.js
│           │   ├── script
│           │   │   ├── husky-commit-lint.js
│           │   │   ├── husky-commit-test.js
│           │   │   └── husky-push-test.js
│           │   ├── scss
│           │   │   ├── _global.scss
│           │   │   ├── components
│           │   │   │   ├── _accordion-menu.scss
│           │   │   │   ├── _accordion.scss
│           │   │   │   ├── _badge.scss
│           │   │   │   ├── _breadcrumbs.scss
│           │   │   │   ├── _button-group.scss
│           │   │   │   ├── _button.scss
│           │   │   │   ├── _callout.scss
│           │   │   │   ├── _card.scss
│           │   │   │   ├── _close-button.scss
│           │   │   │   ├── _drilldown.scss
│           │   │   │   ├── _dropdown-menu.scss
│           │   │   │   ├── _dropdown.scss
│           │   │   │   ├── _flex-video.scss
│           │   │   │   ├── _flex.scss
│           │   │   │   ├── _float.scss
│           │   │   │   ├── _label.scss
│           │   │   │   ├── _media-object.scss
│           │   │   │   ├── _menu-icon.scss
│           │   │   │   ├── _menu.scss
│           │   │   │   ├── _off-canvas.scss
│           │   │   │   ├── _orbit.scss
│           │   │   │   ├── _pagination.scss
│           │   │   │   ├── _progress-bar.scss
│           │   │   │   ├── _responsive-embed.scss
│           │   │   │   ├── _reveal.scss
│           │   │   │   ├── _slider.scss
│           │   │   │   ├── _sticky.scss
│           │   │   │   ├── _switch.scss
│           │   │   │   ├── _table.scss
│           │   │   │   ├── _tabs.scss
│           │   │   │   ├── _thumbnail.scss
│           │   │   │   ├── _title-bar.scss
│           │   │   │   ├── _tooltip.scss
│           │   │   │   ├── _top-bar.scss
│           │   │   │   └── _visibility.scss
│           │   │   ├── forms
│           │   │   │   ├── _checkbox.scss
│           │   │   │   ├── _error.scss
│           │   │   │   ├── _fieldset.scss
│           │   │   │   ├── _forms.scss
│           │   │   │   ├── _help-text.scss
│           │   │   │   ├── _input-group.scss
│           │   │   │   ├── _label.scss
│           │   │   │   ├── _meter.scss
│           │   │   │   ├── _progress.scss
│           │   │   │   ├── _range.scss
│           │   │   │   ├── _select.scss
│           │   │   │   └── _text.scss
│           │   │   ├── foundation.scss
│           │   │   ├── grid
│           │   │   │   ├── _classes.scss
│           │   │   │   ├── _column.scss
│           │   │   │   ├── _flex-grid.scss
│           │   │   │   ├── _grid.scss
│           │   │   │   ├── _gutter.scss
│           │   │   │   ├── _layout.scss
│           │   │   │   ├── _position.scss
│           │   │   │   ├── _row.scss
│           │   │   │   └── _size.scss
│           │   │   ├── prototype
│           │   │   │   ├── _arrow.scss
│           │   │   │   ├── _border-box.scss
│           │   │   │   ├── _border-none.scss
│           │   │   │   ├── _bordered.scss
│           │   │   │   ├── _box.scss
│           │   │   │   ├── _display.scss
│           │   │   │   ├── _font-styling.scss
│           │   │   │   ├── _list-style-type.scss
│           │   │   │   ├── _overflow.scss
│           │   │   │   ├── _position.scss
│           │   │   │   ├── _prototype.scss
│           │   │   │   ├── _relation.scss
│           │   │   │   ├── _rotate.scss
│           │   │   │   ├── _rounded.scss
│           │   │   │   ├── _separator.scss
│           │   │   │   ├── _shadow.scss
│           │   │   │   ├── _sizing.scss
│           │   │   │   ├── _spacing.scss
│           │   │   │   ├── _text-decoration.scss
│           │   │   │   ├── _text-transformation.scss
│           │   │   │   └── _text-utilities.scss
│           │   │   ├── settings
│           │   │   │   └── _settings.scss
│           │   │   ├── typography
│           │   │   │   ├── _alignment.scss
│           │   │   │   ├── _base.scss
│           │   │   │   ├── _helpers.scss
│           │   │   │   ├── _print.scss
│           │   │   │   └── _typography.scss
│           │   │   ├── util
│           │   │   │   ├── _breakpoint.scss
│           │   │   │   ├── _color.scss
│           │   │   │   ├── _direction.scss
│           │   │   │   ├── _flex.scss
│           │   │   │   ├── _math.scss
│           │   │   │   ├── _mixins.scss
│           │   │   │   ├── _selector.scss
│           │   │   │   ├── _typography.scss
│           │   │   │   ├── _unit.scss
│           │   │   │   ├── _util.scss
│           │   │   │   └── _value.scss
│           │   │   ├── vendor
│           │   │   │   └── normalize.scss
│           │   │   └── xy-grid
│           │   │       ├── _cell.scss
│           │   │       ├── _classes.scss
│           │   │       ├── _collapse.scss
│           │   │       ├── _frame.scss
│           │   │       ├── _grid.scss
│           │   │       ├── _gutters.scss
│           │   │       ├── _layout.scss
│           │   │       ├── _position.scss
│           │   │       └── _xy-grid.scss
│           │   ├── shrinkwrap.yaml
│           │   └── test
│           │       ├── javascript
│           │       │   ├── components
│           │       │   │   ├── abide.js
│           │       │   │   ├── accordion.js
│           │       │   │   ├── accordionMenu.js
│           │       │   │   ├── drilldown.js
│           │       │   │   ├── dropdown.js
│           │       │   │   ├── dropdownMenu.js
│           │       │   │   ├── equalizer.js
│           │       │   │   ├── interchange.js
│           │       │   │   ├── magellan.js
│           │       │   │   ├── offcanvas.js
│           │       │   │   ├── orbit.js
│           │       │   │   ├── responsiveMenu.js
│           │       │   │   ├── responsiveToggle.js
│           │       │   │   ├── reveal.js
│           │       │   │   ├── slider.js
│           │       │   │   ├── sticky.js
│           │       │   │   ├── tabs.js
│           │       │   │   ├── toggler.js
│           │       │   │   └── tooltip.js
│           │       │   ├── core
│           │       │   │   ├── core.js
│           │       │   │   └── utils.js
│           │       │   ├── index.html
│           │       │   ├── lib
│           │       │   │   ├── keyboard-event-mock.js
│           │       │   │   └── utils.js
│           │       │   └── util
│           │       │       ├── box.js
│           │       │       ├── keyboard.js
│           │       │       └── mediaQuery.js
│           │       ├── sass
│           │       │   ├── _breakpoint.scss
│           │       │   ├── _color.scss
│           │       │   ├── _components.scss
│           │       │   ├── _selector.scss
│           │       │   ├── _unit.scss
│           │       │   ├── _value.scss
│           │       │   └── test_sass.js
│           │       └── visual
│           │           ├── _template.html
│           │           ├── abide
│           │           │   ├── abide-checkboxes.html
│           │           │   ├── abide-radio.html
│           │           │   ├── accessibility.html
│           │           │   ├── hidden_and_ignored_fields.html
│           │           │   └── text.html
│           │           ├── accordion
│           │           │   ├── focus.html
│           │           │   └── nested.html
│           │           ├── accordion-menu
│           │           │   ├── accordionmenu.html
│           │           │   ├── keyboard.html
│           │           │   ├── parent-link.html
│           │           │   └── submenu-toggle.html
│           │           ├── breadcrumbs
│           │           │   └── breadcrumbs.html
│           │           ├── button
│           │           │   ├── button-group.html
│           │           │   ├── button.html
│           │           │   └── cursor.html
│           │           ├── card
│           │           │   └── card.html
│           │           ├── controls
│           │           │   └── close-button.html
│           │           ├── drilldown
│           │           │   ├── drilldown-menu-auto-height.html
│           │           │   ├── drilldown-menu-parent-link.html
│           │           │   ├── drilldown-menu-scroll-top.html
│           │           │   ├── drilldown-show-menu.html
│           │           │   └── long-titles.html
│           │           ├── dropdown
│           │           │   ├── basic-dropdown-rtl.html
│           │           │   ├── close-on-click.html
│           │           │   ├── dropdown-on-input.html
│           │           │   ├── explicit-positioning.html
│           │           │   ├── in-top-bar.html
│           │           │   ├── linked-dropdown-toggle.html
│           │           │   ├── long.html
│           │           │   ├── mouse-on-browser-ui.html
│           │           │   ├── offsets.html
│           │           │   ├── open-the-same-dropdown.html
│           │           │   ├── overflow-right-left-allowed.html
│           │           │   ├── overflow-right-left.html
│           │           │   └── overflow.html
│           │           ├── dropdown-menu
│           │           │   ├── basic-dropdown-menu-rtl.html
│           │           │   ├── dropdown-menu-cross-leave.html
│           │           │   ├── left-aligned-dropdown-menu-inside-top-bar-right.html
│           │           │   ├── right-aligned-dropdown-menu.html
│           │           │   └── submenu-mouse-reenter.html
│           │           ├── equalizer
│           │           │   └── equalizer-events.html
│           │           ├── flex-grid
│           │           │   ├── column-row.html
│           │           │   ├── nesting.html
│           │           │   ├── top-bar.html
│           │           │   └── unstack-block-grid.html
│           │           ├── form
│           │           │   ├── input-group-float.html
│           │           │   ├── input-group-xygrid.html
│           │           │   └── select-icon.html
│           │           ├── grid
│           │           │   ├── centered-columns.html
│           │           │   ├── collapse-nesting.html
│           │           │   ├── nesting.html
│           │           │   └── uncentered-columns.html
│           │           ├── keyboard
│           │           │   └── trap-release-focus.html
│           │           ├── magellan
│           │           │   ├── active-item.html
│           │           │   └── unordered-links.html
│           │           ├── media-object
│           │           │   └── media-object-mixins-flex-mode.html
│           │           ├── menu
│           │           │   ├── active-menu-flex.html
│           │           │   ├── active-menu-float.html
│           │           │   ├── advanced-nested-menu-flex.html
│           │           │   ├── advanced-nested-menu-float.html
│           │           │   ├── basic-menu-flex.html
│           │           │   ├── basic-menu-float.html
│           │           │   ├── expanded-menu-flex.html
│           │           │   ├── expanded-menu-float.html
│           │           │   ├── horizontal-dropdownmenu-alignment-flex.html
│           │           │   ├── horizontal-dropdownmenu-alignment-float.html
│           │           │   ├── horizontal-menu-alignment-flex.html
│           │           │   ├── horizontal-menu-alignment-float.html
│           │           │   ├── menu-centered-flex.html
│           │           │   ├── menu-centered-float.html
│           │           │   ├── menu-form-flex.html
│           │           │   ├── menu-form-float.html
│           │           │   ├── menu-icons-flex.html
│           │           │   ├── menu-icons-float.html
│           │           │   ├── menu-text-flex.html
│           │           │   ├── menu-text-float.html
│           │           │   ├── nested-menu-flex.html
│           │           │   ├── nested-menu-float.html
│           │           │   ├── responsive-menu-flex.html
│           │           │   ├── responsive-menu-float.html
│           │           │   ├── simple-menu-flex.html
│           │           │   ├── simple-menu-float.html
│           │           │   ├── vertical-accordionmenu-alignment-flex.html
│           │           │   ├── vertical-accordionmenu-alignment-float.html
│           │           │   ├── vertical-drilldownmenu-alignment-flex.html
│           │           │   ├── vertical-drilldownmenu-alignment-float.html
│           │           │   ├── vertical-dropdownmenu-alignment-flex.html
│           │           │   ├── vertical-dropdownmenu-alignment-float.html
│           │           │   ├── vertical-menu-alignment-flex.html
│           │           │   └── vertical-menu-alignment-float.html
│           │           ├── offcanvas
│           │           │   ├── absolute.html
│           │           │   ├── all-options.html
│           │           │   ├── nested.html
│           │           │   ├── offcanvas-reveal-modal-large.html
│           │           │   ├── offcanvas-reveal-modal.html
│           │           │   ├── reveal-on-option.html
│           │           │   ├── reveal.html
│           │           │   ├── sticky.html
│           │           │   └── transition-time.html
│           │           ├── orbit
│           │           │   ├── orbit.html
│           │           │   └── touch.html
│           │           ├── prototype
│           │           │   ├── _template.html
│           │           │   ├── arrow.html
│           │           │   ├── border-box.html
│           │           │   ├── border-none.html
│           │           │   ├── component-styling.html
│           │           │   ├── display.html
│           │           │   ├── font-styling.html
│           │           │   ├── image-replacement.html
│           │           │   ├── list-styling-ordered.html
│           │           │   ├── list-styling-unordered.html
│           │           │   ├── overflow.html
│           │           │   ├── separator.html
│           │           │   ├── sizing-height.html
│           │           │   ├── sizing-width.html
│           │           │   ├── text-decoration.html
│           │           │   ├── text-transformation.html
│           │           │   ├── text-truncate.html
│           │           │   ├── text-wrapping.html
│           │           │   └── typescale.html
│           │           ├── responsive-accordion-tabs
│           │           │   └── responsive-accordion-tabs.html
│           │           ├── responsive-menu
│           │           │   ├── accordion-dropdown.html
│           │           │   ├── dropdown-on-right-middle.html
│           │           │   ├── re-init.html
│           │           │   ├── responsive-menu-left-dropdown.html
│           │           │   ├── responsive-menu-right-dropdown.html
│           │           │   └── responsive-menu.html
│           │           ├── responsive-toggle
│           │           │   └── responsive-toggle.html
│           │           ├── reveal
│           │           │   ├── basic.html
│           │           │   ├── close-on-click.html
│           │           │   ├── element-outside-dom-click.html
│           │           │   ├── full-reveal.html
│           │           │   ├── long-page-with-add-this.html
│           │           │   ├── long-page.html
│           │           │   ├── multiple-anchors.html
│           │           │   ├── nested-deep-link.html
│           │           │   ├── reveal-callout.html
│           │           │   ├── reveal-test-data-options.html
│           │           │   └── tall.html
│           │           ├── slider
│           │           │   ├── nonzero-start.html
│           │           │   └── parseFloat.html
│           │           ├── sticky
│           │           │   ├── accordions-with-anchors.html
│           │           │   ├── anchors-with-callouts.html
│           │           │   ├── height-transition.html
│           │           │   ├── menus-with-anchors.html
│           │           │   ├── simple-menu.html
│           │           │   └── sticky-menu-dynamic-height.html
│           │           ├── tabs
│           │           │   ├── deep-linking.html
│           │           │   └── tabs-target.html
│           │           ├── tooltip
│           │           │   └── explicit-positioning.html
│           │           ├── top-bar
│           │           │   ├── advanced-layout.html
│           │           │   ├── responsive-toggle-flex.html
│           │           │   └── stacking.html
│           │           ├── triggers
│           │           │   ├── containing-toggle.html
│           │           │   └── programmatic.html
│           │           ├── typography-helpers
│           │           │   └── responsive-text-alignment.html
│           │           ├── vertical-rhythm
│           │           │   └── vertical-rhythm.html
│           │           └── xy-grid
│           │               ├── block-grid.html
│           │               ├── collapse.html
│           │               ├── combo-grids.html
│           │               ├── containers.html
│           │               ├── flex-utilities.html
│           │               ├── frame-grid.html
│           │               ├── kitchen-sink.html
│           │               ├── margin-grid.html
│           │               ├── offset.html
│           │               ├── padding-grid.html
│           │               ├── responsive-gutters.html
│           │               └── vertical-grid.html
│           ├── inherits
│           │   ├── LICENSE
│           │   ├── README.md
│           │   ├── ReadMe!!.png
│           │   ├── ReadMe!.png
│           │   ├── ReadMe.png
│           │   ├── ReadMe.txt
│           │   ├── Website.txt
│           │   ├── inherits.js
│           │   ├── inherits_browser.js
│           │   ├── package.json
│           │   └── test.js
│           ├── loadjs
│           │   ├── AUTHORS.txt
│           │   ├── CHANGELOG.md
│           │   ├── CHANGELOG.md~
│           │   ├── LICENSE.txt
│           │   ├── README.md
│           │   ├── RELEASE.md
│           │   ├── ReadMe!!.png
│           │   ├── ReadMe!.png
│           │   ├── ReadMe.png
│           │   ├── bower.json
│           │   ├── dist
│           │   │   ├── loadjs.js
│           │   │   ├── loadjs.min.js
│           │   │   └── loadjs.umd.js
│           │   ├── examples
│           │   │   ├── after-window-onload.html
│           │   │   ├── assets
│           │   │   │   ├── example-error.js
│           │   │   │   ├── file.css
│           │   │   │   ├── file1.js
│           │   │   │   ├── file2.js
│           │   │   │   ├── file3.js
│           │   │   │   ├── flash.png
│           │   │   │   ├── flash.svg
│           │   │   │   ├── loadjs
│           │   │   │   │   ├── loadjs.js
│           │   │   │   │   └── loadjs.min.js
│           │   │   │   └── log.js
│           │   │   ├── before-domcontentloaded.html
│           │   │   ├── before-window-onload.html
│           │   │   ├── crossdomaincss.html
│           │   │   ├── css-testonerror.html
│           │   │   ├── css-testpreload.html
│           │   │   ├── css-testpreloadperformance.html
│           │   │   ├── examples.html
│           │   │   └── image.html
│           │   ├── gulpfile.js
│           │   ├── package.json
│           │   ├── src
│           │   │   └── loadjs.js
│           │   ├── test
│           │   │   ├── assets
│           │   │   │   ├── asyncfalse1.js
│           │   │   │   ├── asyncfalse2.js
│           │   │   │   ├── cssfile.custom
│           │   │   │   ├── file1.css
│           │   │   │   ├── file1.js
│           │   │   │   ├── file2.css
│           │   │   │   ├── file2.js
│           │   │   │   ├── flash.jpg
│           │   │   │   ├── flash.png
│           │   │   │   ├── flash.svg
│           │   │   │   └── loadjs
│           │   │   │       ├── loadjs.js
│           │   │   │       └── loadjs.min.js
│           │   │   ├── index.html
│           │   │   ├── tests.js
│           │   │   └── vendor
│           │   │       ├── chai-4.1.2.js
│           │   │       └── mocha-4.1.0
│           │   │           ├── mocha.css
│           │   │           └── mocha.js
│           │   └── umd-templates
│           │       ├── UMD.js
│           │       └── web.js
│           └── plyr
│               ├── changelog.md
│               ├── contributing.md
│               ├── controls.md
│               └── dist
│                   ├── blank.mp4
│                   ├── plyr.css
│                   ├── plyr.js
│                   ├── plyr.min.js
│                   ├── plyr.min.js.map
│                   ├── plyr.min.mjs
│                   ├── plyr.min.mjs.map
│                   ├── plyr.mjs
│                   ├── plyr.polyfilled.js
│                   ├── plyr.polyfilled.min.js
│                   └── plyr.polyfilled.min.js.map
└── list.txt

918 directories, 5541 files
"
sJsGF7yP,2025-06-20T17:03:11.632,powerampache,PHP,Friday 20th of June 2025 09:03:12 AM CDT,"1.00-64 (64) - DB: 82
java.lang.NullPointerException
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl.scrobbleEverything(SongsRepositoryImpl.kt:593)
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl.access$scrobbleEverything(SongsRepositoryImpl.kt:77)
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl$scrobbleEverything$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:108)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:793)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:697)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:684)

"
qB2eqVVa,ods_svg.php,eqeqwan21,PHP,Friday 20th of June 2025 08:53:36 AM CDT,"<?php

class ods_svg {
	private $anime1 = '<animate attributeName=""visibility"" from=""visible"" to=""hidden"" dur=""1s"" repeatCount=""indefinite"" />';
	private $anime2 = '<animate attributeName=""visibility"" from=""visible"" to=""hidden"" dur=""2s"" repeatCount=""indefinite"" />';
   private $animeall = '<animate attributeName=""visibility"" from=""visible"" to=""hidden"" dur=""0.5s"" repeatCount=""indefinite"" />';
   private $animeous = '<animate attributeName=""visibility"" values=""visible;hidden;visible;hidden;visible;hidden;visible;visible;visible;visible;visible"" dur=""0.8s"" repeatCount=""indefinite"" />';

	public function run()
	{
		$script = substr(stristr(strtok($_SERVER['REQUEST_URI'],'?'), 'images/'),7);
		$script = str_replace(['/','\\',':','.'],'_',$script);

		$method = strtolower($_SERVER['REQUEST_METHOD'].'_'.$script);

		if( method_exists($this, $method) ) {
			$this->$method();
		}
		else {
			header($_SERVER['SERVER_PROTOCOL'] . ' 404 Not Found');
			echo('Not Found');
		}
	}

	private function get_galbox_svg() {

		$header = !isset($_GET['noxml']);

		$box = new ods_box($_GET['cnf']);
		if($header)
			header ('Content-Type: image/svg+xml');


		header_remove(""Pragma"");
		header_remove(""Expires"");

		header(""Cache-Control: max-age=86400"");

		echo $box->run($header);
	}


private function get_lamp_svg() {
$anm='';
$anm2='';
$foncolor = ""rgb(0,176,80)"";
$incolor=""white"";

if(isset($_GET['auto']))
	$foncolor = ""rgb(0,176,80)"";
if(isset($_GET['manual']))
	$foncolor = ""rgb(0,112,192)"";
if(isset($_GET['unmanaged']))
	$foncolor = ""rgb(166,166,166)"";

$outcolor = $foncolor;
if(isset($_GET['nopower']))
	$outcolor = ""rgb(255,0,0)"";
if(isset($_GET['on']))
	$incolor=""white"";
if(isset($_GET['off']))
	$incolor=""black"";
$circlecolor=$incolor;
if(isset($_GET['trouble']))
	$circlecolor=""red"";
$opa=1;
if(isset($_GET['nocon']))
	$opa=""0.5"";

if (isset($_GET['shape'])) {
	$foncolor=""black"";
	$outcolor=""black"";
	$circklecolor=""white"";
	$incolor=""white"";
}

if(isset($_GET['timeallert']))
	$anm=$this->anime1;
if(isset($_GET['controlallert']))
	$anm=$this->anime2;
if(isset($_GET['timeallert']) && isset($_GET['controlallert']))
   $anm=$this->animeall;

if(isset($_GET['open']))
	$anm=$this->animeall;

if(isset($_GET['ous']))
	$anm2=$this->animeous;

$data = <<<EOT
<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>
<svg
   xmlns:dc=""http://purl.org/dc/elements/1.1/""
   xmlns:cc=""http://creativecommons.org/ns#""
   xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""
   xmlns:svg=""http://www.w3.org/2000/svg""
   xmlns=""http://www.w3.org/2000/svg""
   xmlns:sodipodi=""http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd""
   xmlns:inkscape=""http://www.inkscape.org/namespaces/inkscape""
   version=""1.1""
   id=""Capa_1""
   x=""0px""
   y=""0px""
   width=""333.668""
   height=""491.582""
   viewBox=""0 0 333.668 491.582""
   xml:space=""preserve""
   sodipodi:docname=""location.svg""
   inkscape:version=""0.92.1 r15371""><metadata
     id=""metadata4620""><rdf:RDF><cc:Work
         rdf:about=""""><dc:format>image/svg+xml</dc:format><dc:type
           rdf:resource=""http://purl.org/dc/dcmitype/StillImage"" /></cc:Work></rdf:RDF></metadata><defs
     id=""defs4618"" /><sodipodi:namedview
     pagecolor=""#ffffff""
     bordercolor=""#666666""
     borderopacity=""1""
     objecttolerance=""10""
     gridtolerance=""10""
     guidetolerance=""10""
     inkscape:pageopacity=""0""
     inkscape:pageshadow=""2""
     inkscape:window-width=""1920""
     inkscape:window-height=""1017""
     id=""namedview4616""
     showgrid=""false""
     inkscape:zoom=""1.5480632""
     inkscape:cx=""166.834""
     inkscape:cy=""245.791""
     inkscape:window-x=""1272""
     inkscape:window-y=""-8""
     inkscape:window-maximized=""1""
     inkscape:current-layer=""Capa_1"" />
	 <g>
    $anm
    $anm2
	 <path style=""fill:$outcolor;fill-opacity:$opa;""
     d=""M 166.834,0 C 74.842,0 0,74.841 0,166.833 0,203.8 21.764,260.02 68.493,343.759 c 31.887,57.138 63.627,105.4 64.966,107.433 l 22.941,34.773 c 2.313,3.507 6.232,5.617 10.434,5.617 4.202,0 8.121,-2.11 10.434,-5.617 l 22.94,-34.771 c 1.326,-2.01 32.835,-49.855 64.967,-107.435 46.729,-83.735 68.493,-139.955 68.493,-176.926 C 333.668,74.841 258.826,0 166.834,0 Z m 76.511,331.576 C 211.66,388.351 180.649,435.445 179.342,437.424 L 166.834,456.383 154.33,437.429 C 153.016,435.434 121.767,387.918 90.323,331.576 46.978,253.9 25,198.472 25,166.833 25,88.626 88.626,25 166.834,25 c 78.208,0 141.834,63.626 141.834,141.833 0,31.643 -21.978,87.069 -65.323,164.743 z""
     id=""out""
     inkscape:connector-curvature=""0"" /><path 
     d=""m 166.51102,70.061158 c -52.60786,0 -95.40686,42.800032 -95.40686,95.406862 0,52.60682 42.799,95.40685 95.40686,95.40685 52.60786,0 95.40685,-42.80003 95.40685,-95.40685 0,-52.60683 -42.79899,-95.406862 -95.40685,-95.406862 z m 0,165.028072 c -38.38966,0 -69.62123,-31.23156 -69.62123,-69.62121 0,-38.38966 31.23157,-69.621225 69.62123,-69.621225 38.39069,0 69.62121,31.231565 69.62121,69.621225 0,38.38965 -31.23052,69.62121 -69.62121,69.62121 z""
     id=""path4579""
     inkscape:connector-curvature=""0""
     style=""stroke-width:1.0314256; fill:$circlecolor;fill-opacity:$opa"" /><g
     id=""g4585""
     transform=""translate(-78.957)"" /><g
     id=""g4587""
     transform=""translate(-78.957)"" /><g
     id=""g4589""
     transform=""translate(-78.957)"" /><g
     id=""g4591""
     transform=""translate(-78.957)"" /><g
     id=""g4593""
     transform=""translate(-78.957)"" /><g
     id=""g4595""
     transform=""translate(-78.957)"" /><g
     id=""g4597""
     transform=""translate(-78.957)"" /><g
     id=""g4599""
     transform=""translate(-78.957)"" /><g
     id=""g4601""
     transform=""translate(-78.957)"" /><g
     id=""g4603""
     transform=""translate(-78.957)"" /><g
     id=""g4605""
     transform=""translate(-78.957)"" /><g
     id=""g4607""
     transform=""translate(-78.957)"" /><g
     id=""g4609""
     transform=""translate(-78.957)"" /><g
     id=""g4611""
     transform=""translate(-78.957)"" /><g
     id=""g4613""
     transform=""translate(-78.957)"" /><path
     style=""opacity:1;fill:$incolor;fill-opacity:$opa;fill-rule:evenodd;stroke:none;stroke-width:1.39170384;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1""
     d=""m 139.55478,232.35515 c -16.58989,-6.60707 -28.58213,-18.03317 -37.03437,-35.28599 -6.38482,-13.03281 -7.31297,-17.131 -7.19708,-31.77843 0.10703,-13.52786 1.31773,-19.29209 6.19162,-29.47857 20.24225,-42.306575 76.0645,-53.865996 110.39606,-22.86032 16.49621,14.89816 23.55823,30.9106 23.55823,53.41604 0,15.0389 -0.98737,19.91288 -6.1896,30.55391 -6.8541,14.01987 -18.68856,25.94228 -33.23311,33.48003 -13.78082,7.14194 -41.09228,8.08629 -56.49175,1.95333 z""
     id=""in""
     inkscape:connector-curvature=""0"" /><path
     style=""opacity:1;fill:$foncolor;fill-opacity:$opa;fill-rule:evenodd;stroke:none;stroke-width:1.32080853;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1""
     d=""M 155.30991,441.46651 C 87.7426,335.06388 48.24689,260.59788 30.49318,206.13462 17.902965,167.51149 22.33961,127.83742 43.19548,92.545955 47.13571,85.878452 57.60351,73.120056 66.45725,64.193964 79.6908,50.852276 86.10715,46.269966 102.51958,38.439622 c 25.34418,-12.091664 38.10009,-15.050718 64.51217,-14.965211 39.60128,0.128207 71.08382,13.371175 99.77161,41.968433 33.76712,33.66056 48.87939,78.982346 40.21435,120.602906 -9.96466,47.86278 -55.10745,138.24455 -118.4759,237.20424 -10.9865,17.15712 -20.90722,31.50438 -22.04607,31.8828 -1.13885,0.37843 -6.17246,-5.77141 -11.18583,-13.66628 z m 37.97331,-186.45037 c 7.0625,-2.19116 16.94549,-6.38177 21.96218,-9.31247 11.50031,-6.71836 29.4853,-25.54903 35.35406,-37.01644 C 277.86863,155.40391 249.9923,90.544348 192.68445,73.937085 172.78736,68.171099 145.53005,70.166632 127.17736,78.732914 64.14447,108.15411 51.97082,190.13931 103.86658,235.72282 c 5.57279,4.89497 12.99612,10.39475 16.49629,12.22174 21.51321,11.22941 50.46835,14.03738 72.92035,7.07158 z""
     id=""fon""
     inkscape:connector-curvature=""0"" />
	 </g>
	 <circle cx=""50"" cy=""50"" r=""5"" fill=""green"" />
        <circle cx=""70"" cy=""50"" r=""5"" fill=""green"" />
</svg>
EOT;


		$this->output($data);
}

private function get_box_svg() {
$anm='';
$anm2='';
$foncolor = ""rgb(0,176,80)"";
$incolor=""white"";
    $depth   = 33;
    $bodyX   = 42.333332;
    $bodyW   = 74.083336;
    $bodyH   = 89.958336;

    $canvasW = $bodyW + $depth*2 + 5;
    $canvasH = 100.79864;

    if(isset($_GET['auto']))
	$foncolor = ""rgb(0,176,80)"";
if(isset($_GET['manual']))
	$foncolor = ""rgb(0,112,192)"";
if(isset($_GET['unmanaged']))
	$foncolor = ""rgb(166,166,166)"";

$outcolor = $foncolor;
if(isset($_GET['nopower']))
	$outcolor = ""rgb(255,0,0)"";
if(isset($_GET['on']))
	$incolor=""white"";
if(isset($_GET['off']))
	$incolor=""black"";
$circlecolor=$foncolor;
if(isset($_GET['trouble']))
	$circlecolor=""red"";
$opa=1;
if(isset($_GET['nocon']))
	$opa=""0.5"";


if(isset($_GET['timeallert']))
	$anm=$this->anime1;
if(isset($_GET['controlallert']))
	$anm=$this->anime2;
if(isset($_GET['timeallert']) && isset($_GET['controlallert']))
	$anm=$this->animeall;

if(isset($_GET['open']))
	$anm=$this->animeall;

if(isset($_GET['ous']))
	$anm2=$this->animeous;


if (isset($_GET['shape'])) {
	$foncolor=""black"";
	$outcolor=""black"";
	$circlecolor=""black"";
	$incolor=""white"";
}
    $circlesCount = isset($_GET['multiple']) && $_GET['multiple'] == 'true' ? 2 : 1;
    $state = isset($_GET['state']) ? intval($_GET['state']) : 0;
    if ($state > 15) {
        $state = 15;
    }

    $k1_on = ($state & 0x8) != 0;
    $k2_on = ($state & 0x4) != 0;

    $eyeOn  = $incolor;
    $eyeOff = 'black';

    $centerX = 78.845825;
    $circle1 = '<circle
       style=""fill:'.($k1_on?$eyeOn:$eyeOff). ';fill-opacity:' . $opa . ';stroke:none;stroke-width:0.26458332""
       id=""dyra""
       cx=""' . $centerX . '""
       cy=""136.13333""
       r=""18.520834"" />';

    $circle2 = '';
    if ($circlesCount === 2) {
        $spacing = 30;
        $circle1 = '<circle
       style=""fill:' . ($k1_on?$eyeOn:$eyeOff) . ';fill-opacity:' . $opa . ';stroke:none;stroke-width:0.26458332""
       id=""dyra""
       cx=""' . ($centerX - $spacing / 2) . '""
       cy=""136.13333""
       r=""14"" />';

        $circle2 = '<circle
       style=""fill:' . ($k2_on?$eyeOn:$eyeOff) . ';fill-opacity:' . $opa . ';stroke:none;stroke-width:0.26458332""
       id=""dyra2""
       cx=""' . ($centerX + $spacing / 2) . '""
       cy=""136.13333""
       r=""14"" />';
    }

    $doorSvg = '';
    if (isset($_GET['open']) && $_GET['open']=='1') {

        $bodyY = 106.5;
        $slant = 15;
        $doorClr = '#002b5c';
        $bodyR = $bodyX + $bodyW;
        $leftX  = $bodyX  - $depth;
        $rightX = $bodyR + $depth;

        $DL_p1 = $bodyX  .','.$bodyY;
        $DL_p2 = $bodyX  .','.($bodyY + $bodyH - $slant);
        $DL_p3 = $leftX  .','.($bodyY + $bodyH );
        $DL_p4 = $leftX  .','.($bodyY + $slant);

        $DR_p1 = $bodyR .','.$bodyY;
        $DR_p2 = $bodyR .','.($bodyY + $bodyH - $slant);
        $DR_p3 = $rightX.','.($bodyY + $bodyH );
        $DR_p4 = $rightX.','.($bodyY + $slant);

        $doorSvg = '
<polygon id=""doorLeft""  points=""'.$DL_p1.' '.$DL_p2.' '.$DL_p3.' '.$DL_p4.'"" style=""fill:'.$doorClr.';fill-opacity:'.$opa.';stroke:none""/>
<polygon id=""doorRight"" points=""'.$DR_p1.' '.$DR_p2.' '.$DR_p3.' '.$DR_p4.'"" style=""fill:'.$doorClr.';fill-opacity:'.$opa.';stroke:none""/>';
    }

$data = <<<EOT
<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>

<svg
   xmlns:dc=""http://purl.org/dc/elements/1.1/""
   xmlns:cc=""http://creativecommons.org/ns#""
   xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""
   xmlns:svg=""http://www.w3.org/2000/svg""
   xmlns=""http://www.w3.org/2000/svg""
   xmlns:sodipodi=""http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd""
   xmlns:inkscape=""http://www.inkscape.org/namespaces/inkscape""
   width =""{$canvasW}mm""
      height=""{$canvasH}mm""
      viewBox=""-{$depth} 0 {$canvasW} {$canvasH}""
   version=""1.1""
   id=""svg8""
   inkscape:version=""0.92.1 r15371""
   sodipodi:docname=""box.svg"">
  <defs
     id=""defs2"" />
  <sodipodi:namedview
     id=""base""
     pagecolor=""#ffffff""
     bordercolor=""#666666""
     borderopacity=""1.0""
     inkscape:pageopacity=""0.0""
     inkscape:pageshadow=""2""
     inkscape:zoom=""0.5""
     inkscape:cx=""257.32181""
     inkscape:cy=""180.5""
     inkscape:document-units=""mm""
     inkscape:current-layer=""layer1""
     showgrid=""false""
     inkscape:window-width=""1920""
     inkscape:window-height=""1017""
     inkscape:window-x=""1272""
     inkscape:window-y=""-8""
     inkscape:window-maximized=""1"">
    <inkscape:grid
       type=""xygrid""
       id=""grid4493""
       originx=""-36.916937""
       originy=""-100.40938"" />
  </sodipodi:namedview>
  <metadata
     id=""metadata5"">
    <rdf:RDF>
      <cc:Work
         rdf:about="""">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource=""http://purl.org/dc/dcmitype/StillImage"" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g	
     inkscape:label=""Layer 1""
     inkscape:groupmode=""layer""
     id=""layer1""
     transform=""translate(-36.916938,-95.791984)"">
    $anm
    $anm2
    <rect
       style=""fill:$foncolor;fill-opacity:$opa;stroke:#ffffff;stroke-width:0.24052194""
       id=""rectbox""
       width=""74.083336""
       height=""89.958336""
       x=""42.333332""
       y=""106.5"" />
    <rect
       style=""fill:$outcolor;fill-opacity:$opa;stroke:#ffffff;stroke-width:0.24945155""
       id=""rectup""
       width=""84.666664""
       height=""10.583333""
       x=""37.041664""
       y=""95.91671""
       inkscape:label=""#rrectup"" />
    <rect
       style=""fill:$circlecolor;fill-opacity:$opa;stroke:#ffffff;stroke-width:0.26458332""
       id=""rectdown""
       width=""74.083336""
       height=""26.458332""
       x=""42.333328""
       y=""170"" />
    $circle1
    $circle2
    $doorSvg
  </g>
</svg>
EOT;

		$this->output($data);
}


	private function putsvg($data, $addxml=false) {
	$header = ""<svg>"";
$header = <<<EOT
<svg
   xmlns:dc=""http://purl.org/dc/elements/1.1/""
   xmlns:cc=""http://creativecommons.org/ns#""
   xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""
   xmlns:svg=""http://www.w3.org/2000/svg""
   xmlns=""http://www.w3.org/2000/svg""

   viewBox=""0 0 1000 600""
   version=""1.1""
   id=""svg8""
   >

EOT;
	$tail = '</svg>';
	if($addxml) {
		$header = '<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>'.""\n\n$header"";
	}
	return $header.""\n"".$data.""\n"".$tail;
	}

	private function get_test_svg() {
		//$data = $this->draw_fuze_group();
		$data = $this->draw_box();
		$this->output( $this->putsvg($data, true) );
	}

	private function output($data)	{
		header_remove(""Pragma"");
		header_remove(""Expires"");

		//header(""Cache-Control: max-age=86400"");
		header('Content-type: image/svg+xml');
		header('Content-Length: '.strlen($data));
		echo $data;
	}

	private function err_out()	{
		header($_SERVER['SERVER_PROTOCOL'] . ' 404 Not Found');
		echo $this->num . ' Not Found ';
	}
}
"
jrAwNEiS,mgtt.js,eqeqwan21,JavaScript,Friday 20th of June 2025 08:52:59 AM CDT,"//исправлено Антоном для привязки пользователя к городу,v13
""use strict"";
let hulla = new hullabaloo();
let wb = new wbdialog();

let scrollX=true;
let pagesize=15;
let get = parseQuery(window.location.search);

let address = null;
let commands = null;
let parProfiles = null;
let deviceNames = null;
let parents = {};

let editmode = false;

const filterstoragekey = ""filter""+window.location.pathname; 

moment.locale(environment.language || window.navigator.userLanguage || window.navigator.language);

function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
$(async function() {
  $('#notificationBell').hide();
  $('#loader').show();
  let town;
  if (environment.login_name.indexOf(""_"") !== -1) {
    town = '&town='+capitalizeFirstLetter(environment.login_name.split('_')[0])
  }
  else{
    town = ''
  }
  let previousTotal = localStorage.getItem('previousTotal') ? parseInt(localStorage.getItem('previousTotal') - 1) : 0;
  let soundEnabled = false;
 
  function updateEventData() {
    $.ajax({
      url: environment.base_url+""/""+'?do=api&fn=last_statistic'+town,
      type: 'GET',
      dataType: ""json"",
      success: function(data) {
        let eventData = data.rows[0]
        var eventList = $('#eventList');
        const now = new Date();
        const formattedDateTime = now.toLocaleString();
        const total = eventData.PowerFailureCount + eventData.EquipmentFailureCount + eventData.SipFailureCount + eventData.IpFailureCount + eventData.TimeAlertFailureCount + eventData.ControllerFailureCount + eventData.DoorOpenCount + eventData.SyncFailureCount;
        if (total !== previousTotal) {
          eventList.empty();
          eventList.append('<li class=""datetime"">Time: ' + formattedDateTime + '</li>');
          eventList.append('<li>' + i18next.t(""Power Failure"") + ': ' + eventData.PowerFailureCount + '</li>');
          eventList.append('<li>' + i18next.t(""Object Failure"") + ': ' + eventData.EquipmentFailureCount + '</li>');
          eventList.append('<li>' + i18next.t(""SIP failure"") + ':  ' + eventData.SipFailureCount + '</li>');
          eventList.append('<li>' + i18next.t(""IP failure"") + ': ' + eventData.IpFailureCount + '</li>');
          eventList.append('<li>' + i18next.t(""Clock error"") + ': ' + eventData.TimeAlertFailureCount + '</li>');
          eventList.append('<li>' + i18next.t(""Controller error"") + ': ' + eventData.ControllerFailureCount + '</li>');
          eventList.append('<li>' + i18next.t(""Door open"") + ': ' + eventData.DoorOpenCount + '</li>');
          eventList.append('<li>' + i18next.t(""Out of sync"") + ': ' + eventData.SyncFailureCount + '</li>');
          $('#eventCount').text(total)
        } else {
          eventList.find('li.datetime').text('Time: ' + formattedDateTime + '')
        }
        $('#loader').hide();
        $('#notificationBell').show();
        if(total > 100){
          $('.notification-container').addClass('large')
        }
        if (total > previousTotal && soundEnabled) {
          $('#notificationSound')[0].play();
        }
 
        previousTotal = total;
        localStorage.setItem('previousTotal', previousTotal);
      }
    });
  }
 
  setInterval(updateEventData, 1000);
 
  $('#eventCount').click(function() {
    $('#eventDropdown').toggle();
  });
 
  $('#notificationBell').click(function() {
    soundEnabled = true;
    $('#notificationBell').removeClass('disabled').addClass('active');
  });
 
  $(document).click(function(event) {
    if (!$(event.target).closest('#eventCount, #eventDropdown').length) {
      if ($('#eventDropdown').is("":visible"")) {
        $('#eventDropdown').hide();
      }
    }
  });
});


$(function() {
  $('[data-toggle=""tooltip""]').tooltip();
	
 scrollX  = !($('#descktop-visible').is(':visible'));
 if(scrollX)
	 pagesize=10;

 onload();
});

async function onload() {
    let result;

    try {
        result = await $.ajax({
            url: environment.base_url+""/""+'?do=api&fn=address',
            type: 'GET',
			dataType: ""json""
        });

    } catch (error) {
        console.error(error);
		$(""#content"").html(""<h2>Address info's was not loaded</h2>"");
		return;
    }
	
	address = result;
// привязка к городу
	//$('#Town_id').find('option').remove();
	
	let towns = address.towns.rows;
//Привязка пользователей к городу
//	if (environment.login_name.indexOf(""_"") !== -1) {
	if (environment.login_name.indexOf(""_"") !== -1 || environment.login_name === 'автодор') {
        for (let key in towns) {
//          if (environment.login_name.split('_')[0].toLowerCase() === towns[key].Name.toLowerCase()) {
			if ((environment.login_name.split('_')[0].toLowerCase() === towns[key].Name.toLowerCase()) || (environment.login_name === 'автодор' && towns[key].Name.toLowerCase().includes('орстрой'))) {  
					$(""#Town_id"").append($(""<option></option>"")
                    .attr(""value"", towns[key].id)
                    .prop(""selected"", true)
                    .text(towns[key].Name));
            }
        }
    } else {
        $(""#Town_id"").append($(""<option></option>"")
            .attr(""value"", """")
            .prop(""selected"", true)
            .text(i18next.t(""Any city"")));
 
        for (let key in towns) {
            $(""#Town_id"").append($(""<option></option>"")
                .attr(""value"", towns[key].id)
                .text(towns[key].Name));
        }
    }
	
    try {
        result = await $.ajax({
            url: environment.base_url+""/""+'?do=api&fn=ServerCommand&type=1,3',
            type: 'GET',
			dataType: ""json""
        });

    } catch (error) {
        console.error(error);
		$(""#content"").html(""<h2>Commands was not loaded</h2>"");
		return;
    }
	commands = result.rows;	
    try {
        result = await $.ajax({
            url: environment.base_url+""/""+'?do=api&fn=dimprofiles&filter=true',
            type: 'GET',
			dataType: ""json""
        });

    } catch (error) {
        console.error(error);
		$(""#content"").html(""<h2>Profiles was not loaded</h2>"");
		return;
    }
	parProfiles = result.rows;	
    try {
        result = await $.ajax({
            url: environment.base_url+""/""+'?do=api&fn=devicenames&filter=true',
            type: 'GET',
			dataType: ""json""
        });

    } catch (error) {
        console.error(error);
		$(""#content"").html(""<h2>Names was not loaded</h2>"");
		return;
    }
	deviceNames = result.rows;	

    try {
        result = await $.ajax({
            url: environment.base_url+""/""+'?do=api&fn=parents',
            type: 'GET',
			dataType: ""json""
        });

    } catch (error) {
        console.error(error);
		$(""#content"").html(""<h2>Parents was not loaded</h2>"");
		return;
    }
	parents.stations = result.stations.rows;
	parents.boxes = result.boxes.rows;

	
	
	addNames();
	addProfiles();
	selTypeMenu(""#seltype"",0,""obj"");
	
	add2Address();
	
	modeMenu(""#mode"",0);
	powerMenu(""#power"");
	condMenu(""#cond"");
	comMenu(""#com"");
	onoffMenu(""#onoff"");
//привязка к городу
if($('#map').length > 0) {
  goTown();  
}
	//addParents();
	setTimeout(function () {
	if($('#Town_id').val().length > 0) {
		add2Address()		
    }	
},500);
	if( get['device']==undefined ) {
		loadflt();
	}

	let initflt = {show:false};
	Object.assign(initflt, JSON.parse(localStorage.getItem(filterstoragekey)) || {} );
	
	if( get['device']!==undefined ) {
		initflt = {show:initflt.show};
	}

	if(initflt.show)
		tougleOpt();
	
	setTimeout(renew,100);
	
}
function add2Address() {
	addAddress(""District"", address.districts.rows, i18next.t(""Any district""));
	addAddress(""Location"", address.locations.rows, i18next.t(""Any street""));
	addParents();
	$(""#Location"").selectpicker('refresh');
}

function addAddress(sel, obj, anystr=""Any"") {
	let town = $('#Town_id').val();
	
	$(""#""+sel).find('option').remove();

	$(""#""+sel).append($(""<option></option>"")
		.attr(""value"","""")
		.prop(""selected"",true)
		.text(i18next.t(anystr))); 	
		
	let names = new Set( obj.filter((x)=> town == """" || x.Town_id == town).map((x) => x.Name) );
	
	for (let name of names) {
		$(""#""+sel).append($(""<option></option>"")
			.attr(""value"",name)
			.text(name));
	}
}

function addProfiles() {
	$(""#DimProfile_id"").find('option').remove();

	$(""#DimProfile_id"").append($(""<option></option>"")
		.attr(""value"","""")
		.prop(""selected"",true)
		.text(i18next.t(""Any shedule""))); 	

	for (let pard of parProfiles) {
		$(""#DimProfile_id"").append($(""<option></option>"")
			.attr(""value"",`{""DimProfile_id"":${pard.id}}`)
			.text(pard.Name));
	}

}

function addNames() {
	$(""#Name"").find('option').remove();

	$(""#Name"").append($(""<option></option>"")
		.attr(""value"","""")
		.prop(""selected"",true)
		.text(i18next.t(""Any name""))); 	

	for (let name of deviceNames) {
		$(""#Name"").append($(""<option></option>"")
			.attr(""value"",name.Name)
			.text(name.Name));
	}

}

function addParents() {
	
	let town = $(""#Town_id"").val();
	
	let typeval = $(""#seltype"").val(), type = 0;
	if(typeval)
		type = JSON.parse(typeval).Type;
	
	$(""#Station"").find('option').remove();

	$(""#Station"").append($(""<option></option>"")
		.attr(""value"","""")
		.prop(""selected"",true)
		.text(i18next.t(""Any connection""))); 	

	if(type==0 || type==2) {
		let boxes = parents.boxes.filter(x => town == """" || x.Town_id == town);
		for (let box of boxes) {
			$(""#Station"").append($(""<option></option>"")
				.attr(""value"",`{""box"":${box.id}}`)
				.text(`№${box.CustomNum} ${box.Name}`));
		}
	}
	
	let stations;
	if(type==0 || type==1)
		stations = new Set( parents.stations.filter((x)=> x.Station && (town == """" || x.Town_id == town)).map((x) => x.Station) );
	console.log(stations);
	if(type==0 && stations.size)
		$(""#Station"").append($(""<option></option>"")
			.prop(""disabled"",true)
			.text(""  ""+i18next.t(""Station"")+"":""));	
	
	if(type==0 || type==1) {
		for (let station of stations) {
			$(""#Station"").append($(""<option></option>"")
				.attr(""value"",station)
				.text(station));
		}
	}
	$(""#Name"").find('option').remove();

	$(""#Name"").append($(""<option></option>"")
		.attr(""value"","""")
		.prop(""selected"",true)
		.text(i18next.t(""Any name"")));

	let names = deviceNames.filter(x => town == """" || x.Town_id == town);
	for (let name of names) {
		$(""#Name"").append($(""<option></option>"")
			.attr(""value"",name.Name)
			.text(name.Name));
	}

	$(""#DimProfile_id"").find('option').remove();

	$(""#DimProfile_id"").append($(""<option></option>"")
		.attr(""value"","""")
		.prop(""selected"",true)
		.text(i18next.t(""Any shedule"")));

	let pars = parProfiles.filter(x => town == """" || x.Town_id == town);
	for (let pard of pars) {
		$(""#DimProfile_id"").append($(""<option></option>"")
			.attr(""value"",`{""DimProfile_id"":${pard.id}}`)
			.text(pard.Name));
	}

}



function addcmd(devtype) {
	$(""#cmd"").find('option').remove();

	for (let key in commands) {
		if(commands[key].DeviceType == devtype && commands[key].Letter!=""F"") {
			$(""#cmd"").append($(""<option></option>"")
				.attr(""value"",commands[key].id)
				.text(i18next.t(commands[key].Name))); 
		}
	}		
}

async function runCmd() {
	let ids = seldev.slice(0);
	//cmdclear();
	let srvcmd = {};
	
	srvcmd.cmd = parseInt($(""#cmd"").val());
	let selcmd = commands.find(x => x.id == srvcmd.cmd); 
	let cmdtext=i18next.t(selcmd.Name);
	
	for(let i=0; i<ids.length;i++) ids[i] = parseInt(ids[i]);
	srvcmd.devs = ids;
	
	let result = null;
	try {
        result = await $.ajax({
            url: environment.base_url+""/""+'?do=api&fn=makecalls',
			data: JSON.stringify(srvcmd),
            type: 'PUT',
			contentType: ""application/json; charset=utf-8"",
			dataType: ""json""
        });
	
    } catch (error) {
        console.error(error);
		hulla.send(i18next.t(""Device control error""));
		return false;
    }
	
	if(result.success) {
		switch (result.queued) {
			case 0:
			  hulla.send(i18next.t(""Command not queued""));
			  break;
			case 1:
			  hulla.send(`${i18next.t(""Command"")} ""${cmdtext}"" ${i18next.t(""queued"")}`,""success"");
			  break;
			default:
			  hulla.send(`${cmdtext} - ${i18next.t(""Command queued for multiple devices"")} (${result.queued})`,""success"");
			  break;
		}
	} else {
		hulla.send(i18next.t(""An error occurred while adding commands to the queue""));
		console.log(result);
	}
	
	return false;
}

function tougleOpt() {
	let flt = JSON.parse(localStorage.getItem(filterstoragekey)) || {};
	if($(""#opt-form"").hasClass(""d-none"")) {
		$(""#opt-form"").removeClass(""d-none"");
		$(""#hdcap"").removeClass(""fa-angle-double-down"");
		$(""#hdcap"").addClass(""fa-angle-double-up"");
		$("".address"").removeClass(""d-none"");
		flt.show = true;
	}
	else {
		$(""#hdcap"").removeClass(""fa-angle-double-up"");
		$(""#hdcap"").addClass(""fa-angle-double-down"");
		$(""#opt-form"").addClass(""d-none"");
		$("".address"").addClass(""d-none"");
		flt.show = false;
	}
	localStorage.setItem(filterstoragekey,JSON.stringify(flt));
}

const simplefld = ['Town_id','District','Location','seltype','power','mode','cond','com','onoff', 'DimProfile_id', 'Name', 'Station'];
function changeflt() {
	
	let saveflt = JSON.parse(localStorage.getItem(filterstoragekey)) || {} ;
	for(let sel of simplefld) {
		let val = $(""#""+sel).val();
		if(val==0 || val==null || val=="""") {
			if(saveflt.hasOwnProperty(sel))
				delete saveflt[sel];
			continue;
		}
		
		saveflt[sel]=val;
	}
	if( get['device']==undefined )
		localStorage.setItem( filterstoragekey, JSON.stringify(saveflt) );
}

function loadflt() {
	let saveflt = JSON.parse(localStorage.getItem(filterstoragekey)) || {} ;
	for(let sel of simplefld) {
		if(saveflt.hasOwnProperty(sel) && saveflt[sel]!==null && saveflt[sel]!=="""" && saveflt[sel]!==0) {
			$(""#""+sel).val(saveflt[sel]);
			if(sel==""Location"")
				$(""#Location"").selectpicker('refresh');
		}
	}		
}

function makeflt() {
	let flt = {};
	for(let sel of simplefld) {
		
		let val = $(""#""+sel).val();
		if(val==0 || val==null || val=="""")
			continue;
		
		if( val[0]==""{"" || val[0]==""["" )
			val=JSON.parse(val);
		if( val !== """") {
			if(Array.isArray(val))
				flt[sel] = val.join("","");
			else if(typeof val === ""object"") {
				for(let key in val) {
					let prop = val[key];
					if(Array.isArray(prop))
						flt[key]=prop.join("","");
					else
						flt[key]=prop;
				}
			}
			else {
				flt[sel]=val;
			}
			
		}
	}
	return flt;
}

let saveprocessing = false;
async function seteditmode(mode=false, save=false) {
	if(save) {
		if(saveprocessing)
			return;
		saveprocessing=true;
		
		if(movedObj.size == 0) 
			hulla.send(i18next.t(""Objects have not been moved""), ""info"");
		else {
			
			let url=environment.base_url+""/""+'?do=api&fn=devicebulkupdate';
		
			try {
				await $.ajax({
					url: url,
					type: 'POST',
					contentType: ""application/json; charset=utf-8"",
					data: JSON.stringify( Object.fromEntries(movedObj) ),
					dataType: ""json""
				});
			} catch (error) {
				console.log(error);
				hulla.send(`${i18next.t(""Failed to save data"")} - ${i18next.t(""Error occurred"")}`);
				saveprocessing=false;
				return;
			}		
			hulla.send(i18next.t(""Objects moved"") + "": "" + movedObj.size, ""success"");
		}
		saveprocessing=false;
	}
	editmode = mode;
	if(editmode) {
		$(""#dbtnEdit, #dbtnTougleFilter"").addClass(""d-none"");
		$(""#dbtnSave, #dbtnCancel"").removeClass(""d-none"");
	} else {
		$(""#dbtnEdit, #dbtnTougleFilter"").removeClass(""d-none"");
		$(""#dbtnSave, #dbtnCancel"").addClass(""d-none"");	
	}
	
	setTimeout(markers, 500);
	cmdpanel();
	movedObj.clear();
}


function devicon(dev) {
	let rnd=[];	

	let iconName = 'lamp.svg';
	
	if(dev.Type==1)
		iconName = 'box.svg';

	iconName +=""?ver="" + config.version;
	
	if(dev.Smart == 0)
		rnd.push('unmanaged');
	
	if(dev.Sip==0 || dev.Ip==0)
		rnd.push('nocon');
	if((dev.Power < 7 && dev.Type==1) || dev.Power==0)
		rnd.push('nopower');
	if(dev.Mode == 4)
		rnd.push('manual');
	else
		rnd.push('auto');
	if(dev.Trouble > 0)
		rnd.push('trouble');
	
	if(dev.State)
		rnd.push('on');
	else
		rnd.push('off');	
	if(dev.Timeallert)
		rnd.push('timeallert');
	if(!dev.Controller)
		rnd.push('controlallert');
	
	if(!dev.Door)
		rnd.push('open');
	
	if(config.ous_pulse && dev.Ous)
		rnd.push('ous');
	if (dev.num_contactors >= 2 && dev.State > 0) {
		rnd.push('multiple=true');
	}
	if (dev.Door === 0) rnd.push(""open=1"");
	if (dev.Type == 1)
		rnd.push('state=' + (dev.State ?? 0));
	iconName += ""&""+rnd.join(""&"");
	
	return environment.base_url+""/images/""+iconName;
}

function selection_fire(clear=false) {
	let atxt=[];
	let acls=[];
	let aspn=[];
	if(seldev.length == 0) {
		if(clear)
			cmdclear();
		return;
	}
	
	let id1 = seldev.slice(0, 1)[0];
	let ind1 = ddata.map[id1];
	let dt1 = ddata.rows[ind1].Type;
	let mix = false;
	
	for(let id of seldev) {
		let ind = ddata.map[id];
		let dev = ddata.rows[ind];
		if(dt1 !== dev.Type) {
			mix = true;
			break;
		} 
		acls.push("".""+""cli""+dev.id);
		aspn.push(`<div data-toggle=""tooltip"" data-placement=""right"" data-html=""true"" id=""ctrl_${dev.id}"" class=""devctrl"" onclick=""goDevice(${dev.id},false,true)"">${dev.CustomNum}</div>`)
	}
	
	if(mix) {
		hulla.send(i18next.t(""Mixed types selection are not allowed""));
		cmdclear();
		return;
	}
	
	$(""#devlist"").html(aspn.join("" ""));

	$("".cli"").removeClass(""border border-primary"");
	$(acls.join("","")).addClass(""border border-primary"");
	addcmd(dt1);
	cmdpanel();
}

function removeFilter() {
	$(""#District, #Location, #power, #mode, #cond, #com, #onoff, #DimProfile_id, #Name, #Station"").prop('selectedIndex', 0).trigger(""change"");
	$(""#seltype"").prop('selectedIndex', 2).trigger(""change"");
}
"
0VuD0Nwa,RPN calculator c++,AntonioVillanueva,C++,Friday 20th of June 2025 08:40:29 AM CDT,"/* Antonio Villanueva RPN calculator
*/

#include <iostream>
#include <vector>
#include <cmath> // std::nan
using namespace std;

class CalculadoraRPN{
	
	public :
	CalculadoraRPN (double n1 , double n2, double op) : n1(n1) , n2(n2) ,op(op){};
	
	double calculaOperacion(){
		switch (op){			
			case '*':
			case 'x':return n1*n2;
			case '+':return n1+n2;
			case '-':return n1-n2;
			case '/':return n2!=0 ? n1/n2 :std::nan("""");

		}
		return std::nan("""");
	};
	
	private:
	double n1,n2;
	char op;
	
};

int main(void)
{
	CalculadoraRPN calculo(5.0,0.0,'/');
	cout <<calculo.calculaOperacion()<<endl;

	return 0;
}"
yi39pzy9,vyzva23zlozita,plugin23,Python,Friday 20th of June 2025 08:37:44 AM CDT,"import random

zoznam = []
for i in range(10):
    cislo = random.randint(1, 100)
    zoznam.append(cislo)

sucty = []
for cislo in zoznam:
    sucet = 0
    # str(cislo) ako v jednoduchej ulohe vyuzijeme pre jednoduche rozdelenie na cifry
    for cifra in str(cislo):
        # kazdu cifru prekonvertujeme spat na cislo aby sme ich mohli scitat
        sucet += int(cifra)
    sucty.append(sucet)

print(""Zoznam:"", zoznam)
print(""Ciferne sučty:"", sucty)"
Vs4GG0qU,vyzva23stredna,plugin23,Python,Friday 20th of June 2025 08:36:15 AM CDT,"import random

zoznam = []
for i in range(6):
    cislo = random.randint(1, 20)
    zoznam.append(cislo)

faktorialy = []
for cislo in zoznam:
    # premenna na vysledok faktorialu
    faktorial = 1
    # vypocet faktorialu pomocou for cyklu
    for i in range(1, cislo + 1):
        faktorial *= i
    faktorialy.append(faktorial)

print(""Zoznam:"", zoznam)
print(""Faktorialy:"", faktorialy)"
q3hxxgM7,vyzva23jednoducha,plugin23,Python,Friday 20th of June 2025 08:23:34 AM CDT,"import random

cislo = random.randint(10, 99)
cislo_str = str(cislo)
if cislo_str[0] == cislo_str[1]:
	print(f""Vygenerovane cislo: {cislo}"")
	print(""Je palindrom: Ano"")
else:
	print(f""Vygenerovane cislo: {cislo}"")
	print(""Je palindrom: Nie"")
"
U4fc7Ghz,Image Choice Maker Python Script,nrzmalik,Python,Friday 20th of June 2025 08:20:24 AM CDT,"import os
import random
import json
from PIL import Image, ImageDraw, ImageFont
from typing import Dict, List, Tuple
import argparse

class QuizImageGenerator:
    """"""
    Enhanced Quiz Image Generator for E-Learning Applications
    
    This class generates interactive quiz choice images by combining
    placeholder images (like bugs, characters, etc.) with text options.
    """"""
    
    def __init__(self, config_file: str = None):
        """"""Initialize the generator with default or custom configuration.""""""
        self.config = self.load_config(config_file)
        self.setup_directories()
    
    def load_config(self, config_file: str = None) -> Dict:
        """"""Load configuration from file or use defaults.""""""
        default_config = {
            ""options_dir"": ""./Options"",
            ""output_dir"": ""./GeneratedChoices"",
            ""placeholder_images"": [""bug 1.png"", ""bug 2.png"", ""bug 3.png""],
            ""text_overlay"": {
                ""position"": ""bottom_center"",  # top_center, bottom_center, center
                ""padding"": 10,
                ""background_color"": (255, 255, 255, 200),  # Semi-transparent white
                ""text_color"": (0, 0, 0, 255),  # Black
                ""font_size"": 24
            },
            ""image_settings"": {
                ""text_width_ratio"": 0.8,  # Text width as ratio of placeholder width
                ""text_height_ratio"": 0.25,  # Text height as ratio of placeholder height
                ""output_format"": ""PNG"",
                ""quality"": 95
            }
        }
        
        if config_file and os.path.exists(config_file):
            try:
                with open(config_file, 'r') as f:
                    custom_config = json.load(f)
                    default_config.update(custom_config)
            except Exception as e:
                print(f""Warning: Could not load config file {config_file}: {e}"")
                print(""Using default configuration."")
        
        return default_config
    
    def setup_directories(self):
        """"""Create necessary directories.""""""
        os.makedirs(self.config[""output_dir""], exist_ok=True)
        
        if not os.path.exists(self.config[""options_dir""]):
            raise FileNotFoundError(f""Options directory '{self.config['options_dir']}' not found!"")
    
    def get_placeholder_images(self) -> List[str]:
        """"""Get full paths to placeholder images.""""""
        placeholder_paths = []
        for img in self.config[""placeholder_images""]:
            full_path = os.path.join(self.config[""options_dir""], img)
            if os.path.exists(full_path):
                placeholder_paths.append(full_path)
            else:
                print(f""Warning: Placeholder image '{img}' not found!"")
        
        if not placeholder_paths:
            raise FileNotFoundError(""No placeholder images found!"")
        
        return placeholder_paths
    
    def group_question_files(self) -> Dict[str, List[str]]:
        """"""Group option files by question number.""""""
        option_files = [f for f in os.listdir(self.config[""options_dir""]) 
                       if f.startswith('Q') and f.endswith('.png')]
        
        if not option_files:
            raise FileNotFoundError(""No question option files found!"")
        
        questions = {}
        for f in option_files:
            try:
                q_num = f.split('-')[0]  # e.g., Q01
                questions.setdefault(q_num, []).append(f)
            except IndexError:
                print(f""Warning: Skipping file with unexpected format: {f}"")
        
        return questions
    
    def calculate_text_position(self, placeholder_size: Tuple[int, int], 
                               text_size: Tuple[int, int]) -> Tuple[int, int]:
        """"""Calculate text position based on configuration.""""""
        p_width, p_height = placeholder_size
        t_width, t_height = text_size
        
        position = self.config[""text_overlay""][""position""]
        padding = self.config[""text_overlay""][""padding""]
        
        if position == ""top_center"":
            return ((p_width - t_width) // 2, padding)
        elif position == ""bottom_center"":
            return ((p_width - t_width) // 2, p_height - t_height - padding)
        elif position == ""center"":
            return ((p_width - t_width) // 2, (p_height - t_height) // 2)
        else:
            # Default to bottom center
            return ((p_width - t_width) // 2, p_height - t_height - padding)
    
    def create_text_background(self, text_img: Image.Image) -> Image.Image:
        """"""Add a semi-transparent background to text for better readability.""""""
        bg_color = self.config[""text_overlay""][""background_color""]
        padding = self.config[""text_overlay""][""padding""]
        
        # Create background with padding
        bg_width = text_img.width + (padding * 2)
        bg_height = text_img.height + (padding * 2)
        
        background = Image.new('RGBA', (bg_width, bg_height), bg_color)
        
        # Paste text on background
        background.alpha_composite(text_img, (padding, padding))
        
        return background
    
    def generate_choice_image(self, placeholder_path: str, option_path: str) -> Image.Image:
        """"""Generate a single choice image by combining placeholder and option text.""""""
        try:
            # Load images
            placeholder_img = Image.open(placeholder_path).convert('RGBA')
            option_img = Image.open(option_path).convert('RGBA')
            
            # Calculate new size for option text
            text_width = int(placeholder_img.width * self.config[""image_settings""][""text_width_ratio""])
            text_height = int(placeholder_img.height * self.config[""image_settings""][""text_height_ratio""])
            
            # Resize option image
            option_img = option_img.resize((text_width, text_height), Image.Resampling.LANCZOS)
            
            # Add background to text for better readability
            option_with_bg = self.create_text_background(option_img)
            
            # Calculate position
            position = self.calculate_text_position(
                (placeholder_img.width, placeholder_img.height),
                (option_with_bg.width, option_with_bg.height)
            )
            
            # Combine images
            combined = placeholder_img.copy()
            combined.alpha_composite(option_with_bg, position)
            
            return combined
            
        except Exception as e:
            print(f""Error generating image for {option_path}: {e}"")
            return None
    
    def generate_all_images(self, randomize_placeholders: bool = True) -> Dict[str, int]:
        """"""Generate all quiz choice images.""""""
        placeholder_images = self.get_placeholder_images()
        questions = self.group_question_files()
        
        stats = {""total_questions"": 0, ""total_images"": 0, ""errors"": 0}
        
        print(f""Found {len(questions)} questions to process..."")
        
        for q_num, opts in questions.items():
            print(f""Processing {q_num} with {len(opts)} options..."")
            
            # Sort options to ensure consistent ordering
            opts.sort()
            
            # Create question folder
            q_folder = os.path.join(self.config[""output_dir""], q_num)
            os.makedirs(q_folder, exist_ok=True)
            
            # Randomize or cycle through placeholders
            if randomize_placeholders:
                # Shuffle placeholders for this question
                question_placeholders = random.sample(placeholder_images, len(placeholder_images))
            else:
                question_placeholders = placeholder_images
            
            # Generate images for each option
            for idx, opt_file in enumerate(opts):
                try:
                    # Cycle through placeholders if more options than placeholders
                    placeholder_path = question_placeholders[idx % len(question_placeholders)]
                    option_path = os.path.join(self.config[""options_dir""], opt_file)
                    
                    # Generate combined image
                    combined_img = self.generate_choice_image(placeholder_path, option_path)
                    
                    if combined_img:
                        # Create meaningful filename
                        opt_letter = chr(ord('A') + idx)
                        output_filename = f""{q_num}_Option_{opt_letter}.png""
                        output_path = os.path.join(q_folder, output_filename)
                        
                        # Save image
                        combined_img.save(output_path, 
                                        format=self.config[""image_settings""][""output_format""],
                                        quality=self.config[""image_settings""][""quality""])
                        
                        stats[""total_images""] += 1
                        print(f""  ✓ Generated: {output_filename}"")
                    else:
                        stats[""errors""] += 1
                        
                except Exception as e:
                    print(f""  ✗ Error processing {opt_file}: {e}"")
                    stats[""errors""] += 1
            
            stats[""total_questions""] += 1
        
        return stats
    
    def create_sample_config(self, filename: str = ""quiz_config.json""):
        """"""Create a sample configuration file.""""""
        with open(filename, 'w') as f:
            json.dump(self.config, f, indent=4)
        print(f""Sample configuration created: {filename}"")


def main():
    """"""Main function with command-line interface.""""""
    parser = argparse.ArgumentParser(description=""Generate quiz choice images for e-learning"")
    parser.add_argument(""--config"", type=str, help=""Path to configuration file"")
    parser.add_argument(""--create-config"", action=""store_true"", 
                       help=""Create a sample configuration file"")
    parser.add_argument(""--no-randomize"", action=""store_true"", 
                       help=""Don't randomize placeholder assignments"")
    
    args = parser.parse_args()
    
    try:
        generator = QuizImageGenerator(args.config)
        
        if args.create_config:
            generator.create_sample_config()
            return
        
        print(""🎮 Quiz Image Generator for E-Learning"")
        print(""="" * 40)
        
        # Generate images
        stats = generator.generate_all_images(randomize_placeholders=not args.no_randomize)
        
        # Print summary
        print(""\n📊 Generation Complete!"")
        print(f""Questions processed: {stats['total_questions']}"")
        print(f""Images generated: {stats['total_images']}"")
        print(f""Errors: {stats['errors']}"")
        print(f""Output directory: {generator.config['output_dir']}"")
        
    except Exception as e:
        print(f""❌ Error: {e}"")
        return 1
    
    return 0


if __name__ == ""__main__"":
    exit(main()) "
T4cU7chR,sort vector c++,AntonioVillanueva,C++,Friday 20th of June 2025 07:23:25 AM CDT,"/* Antonio Villanueva 
C++ class uses the bubble method
to sort a vector without using sort
sorts numbers or letters*/

#include <iostream>
#include <vector>
using namespace std;

template <typename T>
class Ordena {
	
	public:
	Ordena (vector <T> &v) : v(v){};
	void ordenaElementos(){//sort vector public
		ordenaE();
	}
	
	void printVector (){//print vector
		for (const T &elem:v){
			cout <<elem<<"" "";
		}
		cout <<endl;
	}

	private:
	vector<T>& v;
	
	void swapElems (int x,int y){//swap elems
		T tmp;
		tmp=v[x];
		v[x]=v[y];
		v[y]=tmp;
	}
	
	void ordenaE(){	//sort a vector	
		for (size_t x=0 ;x < v.size();x++){
			for (size_t y=0 ;y < v.size();y++){
				if ( v[x] < v[y] ){
					swapElems(x,y);					
				}
			}
		}
	}
	
	
};

int main(void)
{
	//Test of a numeric vector 
	//vector <int> v {3,5,1,8,7};
	//Ordena <int> o(v);
	
	//Test of a  char vector	
	vector <char> v {'x','a','y','b','w'};	
	Ordena <char> o(v);	
	
	o.ordenaElementos();
	o.printVector();
	
	//test the local version of the vector
	for (const auto &elem:v){
		cout<<elem<<"" "";
	}
	return 0;
}
"
qbvrf5mA,index.vue,alk0v,JavaScript,Friday 20th of June 2025 07:17:45 AM CDT,"<template>

</template>

<script setup>
  import { createDirectus, authentication,rest, readMe, readItems } from ""@directus/sdk"";

  const directus = createDirectus('http://directus.local:8055').with(rest());
  const user = await directus.request(readMe({fields: ['*'],}));
  console.log(user);

</script>"
WptxTcCZ,login.vue,alk0v,JavaScript,Friday 20th of June 2025 07:12:30 AM CDT,"<template>
    <v-form @submit.prevent=""handleLogin"">
        <v-btn type=""submit"">Login</v-btn>
        <v-alert v-if=""error"" type=""error"">{{ error }}</v-alert>
    </v-form>
</template>

<script setup>
import { ref } from 'vue';
import { useRouter } from 'vue-router';

import { createDirectus, authentication, login } from ""@directus/sdk"";

const directus = createDirectus(""http://directus.local:8055"").with(authentication());

const email = ref('user01@example.com');
const password = ref('pass01');
const error = ref(null);
const router = useRouter();

const handleLogin  = async () => 
{
  error.value = null;
  try 
  {
    const response = await directus.login(email.value, password.value,{mode: ""session""});
    router.push('/');    
  } 
  catch (err) 
  {
    error.value = 'Invalid email or password';
    console.error(err);
  } 
};
</script>"
eLWdsqQ2,vqMod example,daymobrew,XML,Friday 20th of June 2025 07:06:05 AM CDT,"<?xml version=""1.0"" encoding=""UTF-8""?>
	<modification
                xmlns=""https://github.com/vqmod/vqmod""
                xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
                xsi:schemaLocation=""https://github.com/vqmod/vqmod https://raw.githubusercontent.com/vqmod/vqmod/master/vqmod.xsd"">
                >
		<id>Temporarily close shop</id>
		<version>1.0</version>
		<vqmver>2.X</vqmver>
		<author>Damien Carbery</author>
<!-- See: https://github.com/vqmod/vqmod/wiki/Examples -->
		<file name=""catalog/view/theme/luxury/template/common/header.twig"">
			<operation info=""Summer closure notice."">
				<search position=""after""><![CDATA[
<header>
				]]></search>
				<add><![CDATA[
<style>#summer-notice { background-color: var(--background); border: 2px solid var(--main-colour); color: var(--text-colour); margin: 0 auto; padding: 5px; text-align: center; max-width: 200px; }
@media (min-width: 769px) { #summer-notice { font-size: 200%; max-width: 700px; } }
#summer-notice p { margin-bottom: 0; }
</style>
<div id=""summer-notice"" class=""notice""><p>SUMMER CLOSURE: No orders can be taken until the end of August.</p></div>
<!--<div id=""summer-notice"" class=""notice""><p>Until Tuesday 20 August only <a href=""/personalised-chocolate"">40g personalised chocolate bar</a> orders can be taken. For all other orders please contact <a href=""tel:+353860649222"">086-064-9222</a> or email <a href=""mailto:info@bbbonbon.ie"">info@bbbonbon.ie</p></div>-->
				]]></add>
			</operation>
		</file>
	</modification>
"
mVsP58Vj,RechargeFuelFast,Vodka51200,Lua,Friday 20th of June 2025 06:39:33 AM CDT,"function rechargeTurtle()
  local carburants = {
    [""minecraft:coal""] = true,
    [""minecraft:charcoal""] = true,
    [""thermalfoundation:material""] = true -- exemple: coal coke (à adapter selon damage)
  }

  local fuelAvant = turtle.getFuelLevel()
  local carburantTrouve = false

  for slot = 1, 16 do
    turtle.select(slot)
    local item = turtle.getItemDetail()

    if item then
      -- Vérifie si l'item est un carburant utilisable
      if turtle.refuel(0) then
        turtle.refuel()
        print(""Rechargement avec : "" .. item.name)
        carburantTrouve = true
      end
    end
  end

  local fuelApres = turtle.getFuelLevel()
  turtle.select(1) -- revenir au slot 1

  if carburantTrouve then
    print(""Carburant avant : "" .. fuelAvant)
    print(""Carburant après : "" .. fuelApres)
    print(""Quantité rechargée : "" .. (fuelApres - fuelAvant))
  else
    print(""Aucun carburant valide trouvé dans l'inventaire."")
  end
end

-- Exécution
rechargeTurtle()
"
vJMSDxaY,Untitled,Sort6666,C#,Friday 20th of June 2025 06:12:06 AM CDT,"#region Using declarations
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Xml.Serialization;
using NinjaTrader.Cbi;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Gui.SuperDom;
using NinjaTrader.Gui.Tools;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using NinjaTrader.NinjaScript.Indicators;
using NinjaTrader.NinjaScript.DrawingTools;
#endregion

//This namespace holds Strategies in this folder and is required. Do not change it. 
namespace NinjaTrader.NinjaScript.Strategies.TradeSaberStrategies
{
	public class OrderEntryButtons : Strategy
	{	
		#region Position
		
		private double myDbl;
		
		private int positionSizeLong;
		private int positionSizeShort;
		
		private bool autoPositionSize;
		private bool customPositionSize;
		
		private double riskSize; // Got deleted. Shorts only, may need later. may delete later
		private double riskOffset;
		
		//RR Mode
		private double LongValues; 
		private double ShortValues;
			
		private double LongValuesOffset;
		private double ShortValuesOffset;
		
		//Tick Mode
		private double LongValuesOffsetTickMode;
		private double ShortValuesOffsetTickMode;
		
		private double LongValuesTickMode;
		private double ShortValuesTickMode;
		
		
		private int firstTargetPositionLong;
		private int secondTargetPositionLong;
		
		private int firstTargetPositionShort;
		private int secondTargetPositionShort;
		
		
		
		#endregion
		
		#region Custom Entries
		
		private bool activateMarket;
		private bool armMarket;
		private bool armMarketLong;
		private bool armMarketShort;
		
		private int  armMarketCount = 0;
		
		
		private bool enterClosePrice;
		
		//private bool enterBodyLongHL; May use Later
		//private bool enterBodyShortHL; May use Later
		
		#endregion
		
		#region Entry Offset
		
		private double entryAreaLong;
		private double entryAreaShort;
		
		private double entryAreaClose;
		
		private double percentageCalcEntry;
		private double priceCalcEntry;
		private double tickCalcEntry;
		private double candleBarOffsetEntry;
				
		private double enterLong;
		private double enterShort;
		
		private double enterCloseLong;
		private double enterCloseShort;
		
		#endregion
		
		#region Limit Entry Offset
	
		private double percentageCalcLimitLong;
		private double percentageCalcLimitShort;
		private double priceCalcLimit;
		private double tickCalcLimit;
		private double candleBarOffsetLimit;
				
		private double limitOffsetLong;
		private double limitOffsetShort;
		
		private double limitPriceSetLong;
		private double limitPriceSetShort;
		
		#endregion
		
		#region Stop Offset
		
		private double stopAreaLong;
		private double stopAreaShort;
		
		private double percentageCalcStop;
		private double priceCalcStop;
		private double tickCalcStop;
		private double candleBarOffsetStop;
				
		private double stopLong;
		private double stopShort;
		
		private double setStopLong;
		private double setStopShort;
		
		#endregion
		
		#region Initial Profit Targets
		
		private double setFirstTargetLong;
		private double setFinalTargetLong;
		
		private double setFirstTargetShort;
		private double setFinalTargetShort;
		#endregion
		
		#region Breakeven Offset
		
		private double breakevenAreaLong;
		private double breakevenAreaShort;
		
		private double percentageCalcBreakeven;
		private double priceCalcBreakeven;
		private double tickCalcBreakeven;
		private double candleBarOffsetBreakeven;
				
		private double breakevenLong;
		private double breakevenShort;
		
		private double setBreakevenLong;
		private double setBreakevenShort;
		
		#endregion
		
		#region Trail Offset
		
		private double trailAreaLong;
		private double trailAreaShort;
		
		private double percentageCalcTrail;
		private double priceCalcTrail;
		private double tickCalcTrail;
		private double candleBarOffsetTrail;
		
		private bool activeTrail;
		
		#endregion
		
		#region Management
		
		private bool myFreeTrade;//Regular Trade Profit/Sop
		private bool myFreeLimit;//Limit Orders
		
		//BE Area
		private bool breakevenAreaSetButton;
		private bool breakevenAreaSetAuto;
		private bool myFreeBEArea;
		private double breakevenAreaTrigger;
		private double breakevenAreaStopSet;
		
		//BE Actual
		private bool breakevenActualSetButton;
		private bool breakevenActualSetAuto;
		private bool myFreeBEActual;
		private double breakevenActualTrigger;
		private double breakevenActualStopSet;
		
		//Custom Stop
		private bool myFreeCustomStop;
		private double customStopTrigger;
		
		//Trail
		//private bool candleTrailSetButton;
		//private bool candleTrailSetAuto;
		private double candleTrailTrigger;
		
		private double candleTrailStopSetLong;
		private double candleTrailStopSetShort;
		
		private bool myFreeCandleTrail;
		private bool trailTriggeredCandle;
		//private bool myFreeCustomTrail;//Custom Trail
		
		//private bool myFreeCandleTrail;//Candle Trail
		
		#endregion
		
		#region Fib 
		
		private bool isFib;
		private int fibCount = 1;
		
		#endregion
	
		private bool countOnce;
		
		private bool myFillCheck;
		
		private int myPosition;
		
		private OrderManagement	managementType = OrderManagement.RR_Mode;
		
		public enum OrderManagement
		{
			RR_Mode,
			Tick_Mode,
		}
		
		private bool rrMode;
		private bool tickMode;
		
		private bool AddOffset = true;
		
		#region Button Clicked
		
		private bool longButtonHLClicked; 	//1
		private bool shortButtonHLClicked; 	//2 
			
		private bool longButtonMarketClicked;		//3
		private bool shortButtonMarketClicked;		//4
		
		private bool customLongClicked;				//5
		private bool customShortClicked;			//6
		
		
		private bool breakevenButtonClicked;		//8
		private bool trailButtonClicked;			//9
		
		private bool lineButtonClicked;				//10
		private bool longLineButtonClicked;
		private bool shortLineButtonClicked;
		
		private bool unlockButtonClicked;			//11
		
		private bool displayButtonClicked;			//16
		
		private bool fibButtonClicked;				//17
		
		#endregion
		
		#region Chart Trader Buttons
		
		private System.Windows.Controls.RowDefinition	addedRow;
		private Gui.Chart.ChartTab						chartTab;
		private Gui.Chart.Chart							chartWindow;
		private System.Windows.Controls.Grid			chartTraderGrid, chartTraderButtonsGrid, lowerButtonsGrid;
		private System.Windows.Controls.Button			longButtonHL, shortButtonHL, longButtonMarket, shortButtonMarket, customLong, customShort, myButton7, breakevenButton, trailButton, lineButton, unlockButton, myButton12, myButton13, myButton14, myButton15, displayButton, fibButton;
		private bool									panelActive;
		private System.Windows.Controls.TabItem			tabItem;
		
		#endregion
		
		#region TradeSaber Social
		
		private string author 								= ""TradeSaber(Dre)"";
		private string version 								= ""Version 5.0.2 // December 2022"";
		
		private string youtube								= ""https://youtu.be/WvO8Gwx3Fh0""; 
		private string discord								= ""https://discord.gg/2YU9GDme8j"";
		private string tradeSaber							= ""https://tradesaber.com/"";
		
		private bool showSocials;
		
		private bool youtubeButtonClicked;
		private bool discordButtonClicked;
		private bool tradeSaberButtonClicked;
		
		private System.Windows.Controls.Button youtubeButton;
		private System.Windows.Controls.Button discordButton;
		private System.Windows.Controls.Button tradeSaberButton;
		
		
		private System.Windows.Controls.Grid myGrid29;
		
		#endregion
		
		protected override void OnStateChange()
		{
			/// 5.0.2 Bug Fixes
			/// Issue with certain Futures instruments needing more than 2 decimals. Not setting proper targets.
			/// Issue with the Close Position button not closing dual targets
			/// Issue with Breakeven, Trail Not working after hitting first target (On filled Position) ....>Partial fill management has been disabled due to issue with position size
			
			if (State == State.SetDefaults)
			{
				Description									= @""Enter the description for your new custom Strategy here."";
				Name										= ""OrderEntryButtons"";
				Calculate									= Calculate.OnEachTick;
				EntriesPerDirection							= 1;
				EntryHandling								= EntryHandling.UniqueEntries;
				IsExitOnSessionCloseStrategy				= true;
				ExitOnSessionCloseSeconds					= 30;
				IsFillLimitOnTouch							= false;
				MaximumBarsLookBack							= MaximumBarsLookBack.TwoHundredFiftySix;
				OrderFillResolution							= OrderFillResolution.Standard;
				Slippage									= 0;
				StartBehavior								= StartBehavior.WaitUntilFlat;
				TimeInForce									= TimeInForce.Gtc;
				TraceOrders									= false;
				RealtimeErrorHandling						= RealtimeErrorHandling.StopCancelClose;
				StopTargetHandling							= StopTargetHandling.PerEntryExecution;
				BarsRequiredToTrade							= 20;
				// Disable this property for performance gains in Strategy Analyzer optimizations
				// See the Help Guide for additional information
				IsInstantiatedOnEachOptimizationIteration	= true;
				
				#region Default Parameters
				
				//Position Size
				autoPositionSize							= true;
				MaxLossPerTrade								= 1000;
				customPositionSize							= false;
				CustomPositionAmount						= 5;
				
				//Custom Button
				armMarket									= false;
				enterClosePrice		 						= true;
				
				//Entry Offset
				PriceOffsetEntry							= 0;
				PercentageOffsetEntry						= 0;
				TickOffsetEntry								= 0;
				
				//Limit Order Offset (Offsets from Entry)
				PriceOffsetLimit							= 0;
				PercentageOffsetLimit						= 0;
				TickOffsetLimit								= 0;
				myFreeLimit									= true;
				useLimit									= false;
				
				//Dual Target Options
				dualTarget									= false;
				splitPercent								= 0.25;
				
				//Stop Offset
				stopLoss									= true;
				PriceOffsetStop								= 0;
				PercentageOffsetStop						= 0;
				TickOffsetStop								= 0;
				
				//Profit
				profitTarget								= true;
				FirstTargetRR								= 1;
				FinalTargetRR								= 5;
				
				
				//Management
				PriceOffsetBreakeven						= 0;
				PercentageOffsetBreakeven					= 0;
				TickOffsetBreakeven							= 0;
				
				breakevenAreaSetButton						= false;
				breakevenAreaSetAuto						= false;
				breakevenAreaTarget							= 1.0;
				
				breakevenActualSetButton					= true;
				breakevenActualSetAuto						= false;
				breakevenActualTarget						= 1.5;	
				
				///Custom Move - Later Use
				//customMoveStopSet							= false;
				//customMoveStopTarget						= 2.0;
				
				///customTrailSet							= false;
				///customTrailTarget						= 2.5;
				
				//TrailStop
				PriceOffsetTrail							= 0;
				PercentageOffsetTrail						= 0;
				TickOffsetTrail								= 0;
				
				
				candleTrailSetButton						= true;
				candleTrailSetAuto							= false;
				candleTrailTarget							= 1.0;							
							
				
				//Entry And Stop Line look back
				CandleLookBackEntry							= 1;
				CandleLookBackStop							= 1;
				
				CandleRange									= true;
				//AddOffset									= true;
				
		
				countOnce 									= true;
				

				DisplayText									= true; 
				
				showSocials 								= true;
				
				//Prints
				SystemPrint									= true;
				EntryPrints									= false;
				LimitPrints									= false;
				StopPrints									= false;
				PositionSizePrints							= false;
				ProfitTatgetPrints							= false;
				BreakevenPrints								= false;
				TrailPrints									= false;
				
				#endregion
			}
			else if (State == State.Configure)
			{
			}
			
			else if (State == State.DataLoaded)
			{				
				ClearOutputWindow();
				
				myDbl = Instrument.MasterInstrument.PointValue * Instrument.MasterInstrument.TickSize;
				
				
				switch (managementType)
				{
					case OrderManagement.RR_Mode:
					{
						rrMode 		= true;
						tickMode 	= false;
					}
					break;
					
					case OrderManagement.Tick_Mode:
					{
						rrMode 		= false;
						tickMode 	= true;
					}
					break;
				}
				
			}

			else if (State == State.Historical)
			{
				#region Chart Trader Buttons Load
				
				if (ChartControl != null)
				{
					ChartControl.Dispatcher.InvokeAsync(() =>
					{
						CreateWPFControls();
					});
				}
				
				#endregion
				
				#region Range/Unlock Buttons Load
				/* Removed -> Moved to chart trader
				
				if (UserControlCollection.Contains(myGrid))
					return;
				
				Dispatcher.InvokeAsync((() =>
				{
					myGrid = new System.Windows.Controls.Grid
					{
						Name = ""MyCustomGrid"", HorizontalAlignment = HorizontalAlignment.Center, VerticalAlignment = VerticalAlignment.Top
					};
				
					System.Windows.Controls.ColumnDefinition column1 = new System.Windows.Controls.ColumnDefinition();
					System.Windows.Controls.ColumnDefinition column2 = new System.Windows.Controls.ColumnDefinition();
					
					myGrid.ColumnDefinitions.Add(column1);
					myGrid.ColumnDefinitions.Add(column2);
					
					lineButton = new System.Windows.Controls.Button
					{
						Name = ""longLineButton"", Content = ""LongRange"", Foreground = Brushes.Black, Background = Brushes.Green
					};
					
					unlockButton = new System.Windows.Controls.Button
					{
						Name = ""unlockButton"", Content = ""Unlocked"", Foreground = Brushes.Black, Background = Brushes.White
					};
				
					lineButton.Click += OnButtonClick;
					unlockButton.Click += OnButtonClick;
					
					System.Windows.Controls.Grid.SetColumn(lineButton, 0);
					System.Windows.Controls.Grid.SetColumn(unlockButton, 1);
					
					myGrid.Children.Add(lineButton);
					myGrid.Children.Add(unlockButton);
					
					UserControlCollection.Add(myGrid);
					
					longLineButtonClicked 	= true;
					unlockButtonClicked		= true;
					
				}));
				*/
				#endregion
				
				#region TradeSaber Socials
			
			if (showSocials)
			{
				if (UserControlCollection.Contains(myGrid29))
					return;
				
				Dispatcher.InvokeAsync((() =>
				{
					myGrid29 = new System.Windows.Controls.Grid
					{
						Name = ""MyCustomGrid"", HorizontalAlignment = HorizontalAlignment.Center, VerticalAlignment = VerticalAlignment.Bottom
					};
					
					System.Windows.Controls.ColumnDefinition column1 = new System.Windows.Controls.ColumnDefinition();
					System.Windows.Controls.ColumnDefinition column2 = new System.Windows.Controls.ColumnDefinition();
					System.Windows.Controls.ColumnDefinition column3 = new System.Windows.Controls.ColumnDefinition();
					
					myGrid29.ColumnDefinitions.Add(column1);
					myGrid29.ColumnDefinitions.Add(column2);
					myGrid29.ColumnDefinitions.Add(column3);
					
					youtubeButton = new System.Windows.Controls.Button
					{
						Name = ""YoutubeButton"", Content = ""Youtube"", Foreground = Brushes.White, Background = Brushes.Red
					};
					
					discordButton = new System.Windows.Controls.Button
					{
						Name = ""DiscordButton"", Content = ""Discord"", Foreground = Brushes.White, Background = Brushes.RoyalBlue
					};
					
					tradeSaberButton = new System.Windows.Controls.Button
					{
						Name = ""TradeSaberButton"", Content = ""TradeSaber"", Foreground = Brushes.White, Background = Brushes.DarkOrange
					};
					
					youtubeButton.Click += OnButtonClick;
					discordButton.Click += OnButtonClick;
					tradeSaberButton.Click += OnButtonClick;
					
					System.Windows.Controls.Grid.SetColumn(youtubeButton, 0);
					System.Windows.Controls.Grid.SetColumn(discordButton, 1);
					System.Windows.Controls.Grid.SetColumn(tradeSaberButton, 2);
					
					myGrid29.Children.Add(youtubeButton);
					myGrid29.Children.Add(discordButton);
					myGrid29.Children.Add(tradeSaberButton);
					
					UserControlCollection.Add(myGrid29);
				}));
			}
		#endregion
			}
			
			else if (State == State.Terminated)
			{
				#region Chart Trader Termninate
				
				if (ChartControl != null)
				{
					ChartControl.Dispatcher.InvokeAsync(() =>
					{
						DisposeWPFControls();
					});
				}
				
				#endregion
				
				#region Terminate Range/Unlock Buttons
				/* Removed -> Moved to chart trader
				
				Dispatcher.InvokeAsync((() =>
				{
					if (myGrid != null)
					{
						if (lineButton != null)
						{
							myGrid.Children.Remove(lineButton);
							lineButton.Click -= OnButtonClick;
							lineButton = null;
						}
						
						if (unlockButton != null)
						{
							myGrid.Children.Remove(unlockButton);
							unlockButton.Click -= OnButtonClick;
							unlockButton = null;
						}
						
					}
				}));
					*/
				#endregion
				
				#region Terminate TradeSaber Socials
			
			if (showSocials)
			{
				Dispatcher.InvokeAsync((() =>
				{
					if (myGrid29 != null)
					{
						if (youtubeButton != null)
						{
							myGrid29.Children.Remove(youtubeButton);
							youtubeButton.Click -= OnButtonClick;
							youtubeButton = null;
						}
						
						if (discordButton != null)
						{
							myGrid29.Children.Remove(discordButton);
							discordButton.Click -= OnButtonClick;
							discordButton = null;
						}
						
						if (tradeSaberButton != null)
						{
							myGrid29.Children.Remove(tradeSaberButton);
							tradeSaberButton.Click -= OnButtonClick;
							tradeSaberButton = null;
						}		
					}
				}));
			}
		#endregion
			}
				
		}
		
		#region Button Click Events
	
		#region Buy High Button 1
		
		protected void Button1Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			if(longButtonHL.Content == ""BUY HIGH"" && Position.MarketPosition == MarketPosition.Flat && customLongClicked == false)
			{
				if (unlockButtonClicked == false)
				{
					countOnce = true;
				}
				
				longButtonHL.Content = ""Live"";
				
				
				RemoveDrawObject(""EntryLine"");
				RemoveDrawObject(""StopLine"");
				
				Draw.HorizontalLine(this, ""EntryLine"", enterLong, Brushes.Green);
				Draw.HorizontalLine(this, ""StopLine"", stopLong, Brushes.Red);
				
				longButtonHLClicked = true;

				return;
			}
			
			if (longButtonHL.Content == ""Live"")
			{
				ForceRefresh();
				longButtonHL.Content = ""BUY HIGH"";
				longButtonHLClicked = false;
				
				RemoveDrawObject(""EntryLine"");
				RemoveDrawObject(""StopLine"");
				
				return;
			}
		}
		
		#endregion
		
		#region Sell Low Button 2

		protected void Button2Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			if(shortButtonHL.Content == ""SELL LOW"" && Position.MarketPosition == MarketPosition.Flat && customShortClicked == false)
			{
				if (unlockButtonClicked == false)
				{
					countOnce = true;
				}
				
				shortButtonHL.Content = ""Live"";
				
				RemoveDrawObject(""EntryLine"");
				RemoveDrawObject(""StopLine"");
				
				Draw.HorizontalLine(this, ""EntryLine"", enterShort, Brushes.Green);
				Draw.HorizontalLine(this, ""StopLine"", stopShort, Brushes.Red);
				
				shortButtonHLClicked = true;

				return;
			}
			
			if (shortButtonHL.Content == ""Live"")
			{
				ForceRefresh();
				shortButtonHL.Content = ""SELL LOW"";
				shortButtonHLClicked = false;
				
				RemoveDrawObject(""EntryLine"");
				RemoveDrawObject(""StopLine"");
				
				return;
			}
		}
		
		#endregion
		
		#region Buy Market Button 3
		
		protected void Button3Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			if (Position.MarketPosition == MarketPosition.Flat)
			{
				countOnce = true;
				longButtonMarketClicked = true;
			}		
			return;
		}
		
		#endregion
		
		#region Sell Market Button 4
		
		protected void Button4Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			if (Position.MarketPosition == MarketPosition.Flat)
			{
				countOnce = true;
				shortButtonMarketClicked = true;
			}		
			return;
		}		
		
		#endregion
		
		#region Custom Long Button 5
		
		protected void Button5Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			
			#region Arm Market
			
			if (armMarket)
			{
				if (customLong.Content == ""Custom Long"" && Position.MarketPosition == MarketPosition.Flat && longButtonHLClicked == false )
				{
					if (unlockButtonClicked == false)
					{
						countOnce = true;
						Print(""unlockButtfalse "" + activateMarket);
					}
					
					if (unlockButtonClicked == true)
					{
						armMarket = true;
						
						Print(""unlockButtTrue "" + activateMarket);
					}
					customLong.Content = ""MarketArmed"";
					customLong.Background	= Brushes.Orange;
					customLongClicked = true;
					
					Print(customLongClicked);
					return;
				}	
				
				if (customLong.Content == ""MarketArmed"" && Position.MarketPosition == MarketPosition.Flat)
				{
					customLong.Content = ""Custom Long"";
					customLong.Background	= Brushes.MediumSeaGreen; 
					customLongClicked = false;
					armMarketCount = 0;
					Print(customLongClicked);
					
					return;
				}	
			}
			
			
			#endregion
			
			#region Close Price
			
			if (enterClosePrice)
			{
				if (customLong.Content == ""Custom Long"" && Position.MarketPosition == MarketPosition.Flat && longButtonHLClicked == false)
				{
					if (unlockButtonClicked == false)
					{
						countOnce = true;
					}
					
					customLong.Content = ""Previous Close L"";
					customLong.Background	= Brushes.Orange;
					customLongClicked = true;
					
					Print(customLongClicked);
					return;
				}	
				
				if (customLong.Content == ""Previous Close L"" && Position.MarketPosition == MarketPosition.Flat)
				{
					customLong.Content = ""Custom Long"";
					customLong.Background	= Brushes.MediumSeaGreen; 
					customLongClicked = false;
					
					Print(customLongClicked);
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					return;
				}	
			}
			
			
			#endregion
		}
		
		#endregion
		
		#region Custom Short Button 6
		
		protected void Button6Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			
			#region Arm Market
			if (armMarket)
			{
				if (customShort.Content == ""Custom Short"" && Position.MarketPosition == MarketPosition.Flat && shortButtonHLClicked == false)
				{
					if (unlockButtonClicked == false)
					{
						countOnce = true;
						Print(""unlockButtfalse "" + activateMarket);
					}
					
					if (unlockButtonClicked == true)
					{
						armMarket = true;
						
						Print(""unlockButtTrue "" + activateMarket);
					}
					customShort.Content = ""MarketArmed"";
					customShort.Background	= Brushes.Orange;
					customShortClicked = true;
					Print(customShortClicked);
					return;
				}	
				
				if (customShort.Content == ""MarketArmed"" && Position.MarketPosition == MarketPosition.Flat)
				{
					customShort.Content = ""Custom Short"";
					customShort.Background	= Brushes.IndianRed; 
					customShortClicked = false;
					armMarketCount = 0;
					Print(customShortClicked);
					
					return;
				}	
			}
			
			
			#endregion
			
			#region Close Price
			
			if (enterClosePrice)
			{
				if (customShort.Content == ""Custom Short"" && Position.MarketPosition == MarketPosition.Flat && shortButtonHLClicked == false)
				{
					if (unlockButtonClicked == false)
				{
					countOnce = true;
				}
					customShort.Content = ""Previous Close S"";
					customShort.Background	= Brushes.Orange;
					customShortClicked = true;
				
					Print(customShortClicked);
					return;
				}	
				
				if (customShort.Content == ""Previous Close S"" && Position.MarketPosition == MarketPosition.Flat)
				{
					customShort.Content = ""Custom Short"";
					customShort.Background	= Brushes.IndianRed; 
					customShortClicked = false;
					Print(customShortClicked);
					
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					return;
				}	
			}
			#endregion
										
		}		
		
		#endregion
		
		#region Close Position Button 7
		
		protected void Button7Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();

			ExitLong(Position.Quantity);
			ExitShort(Position.Quantity);						
		}		
		
		#endregion //Swapped Position after
		
		#region Breakeven Button 8
		
		protected void Button8Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			if (Position.MarketPosition == MarketPosition.Long && Close[0] > Position.AveragePrice)
			{
				breakevenButtonClicked = true;
				
				if (breakevenAreaSetButton)
				{
					myFreeBEArea = true;
				}
				
				if (breakevenActualSetButton)
				{
					myFreeBEActual = true;
				}	
			}
			
				if (Position.MarketPosition == MarketPosition.Short && Close[0] < Position.AveragePrice)
			{
				breakevenButtonClicked = true;
				
				if (breakevenAreaSetButton)
				{
					myFreeBEArea = true;
				}
				
				if (breakevenActualSetButton)
				{
					myFreeBEActual = true;
				}	
			}
			return;							
		}		
		
		#endregion
		
		#region Trail Button 9 // Needs custom added
		
		protected void Button9Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			
			if (candleTrailSetButton)
			{
				if (trailButton.Content == ""Trail Stop"" && Position.MarketPosition != MarketPosition.Flat)
				{
					trailButton.Content = ""Trail Active!"";
					trailButton.Background	= Brushes.Goldenrod; 
					
					myFreeCandleTrail 	= true;
					trailButtonClicked 	= true;
					activeTrail 		= true;
					
					Print(""trailButtonClicked "" + trailButtonClicked);
					return;
					
				}
				
				if (trailButton.Content == ""Trail Active!"" && Position.MarketPosition != MarketPosition.Flat)
				{
					trailButton.Content = ""Trail Stop"";
					trailButton.Background	= Brushes.LightGray; 
					
					trailButtonClicked = false;
					activeTrail = false;
					
					return;
				}
			}
			
				
				if (candleTrailSetButton)
				{
					myFreeCandleTrail = true;
				}
			
			return;							
		}		
		
		#endregion
		
		#region Range Line Button 10
		
		protected void Button10Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			
			#region Hide -> Long
			
			if (lineButton.Content == ""HideRange"")
			{
				lineButton.Content = ""LongRange"";
				lineButton.Foreground = Brushes.Black; 
				lineButton.Background = Brushes.Green;
				
				longLineButtonClicked = true;
				shortLineButtonClicked = false;
				countOnce = true;
				
				if (AddOffset)
					{
						RemoveDrawObject(""EntryLine"");
						RemoveDrawObject(""StopLine"");
						
						Draw.HorizontalLine(this, ""EntryLine"", enterLong, Brushes.Green);
						Draw.HorizontalLine(this, ""StopLine"", stopLong, Brushes.Red);
					}
					
					else if (AddOffset == false)
					{
						RemoveDrawObject(""EntryLine"");
						RemoveDrawObject(""StopLine"");
						
						Draw.HorizontalLine(this, ""EntryLine"", entryAreaLong, Brushes.Green);
						Draw.HorizontalLine(this, ""StopLine"", stopAreaLong, Brushes.Red);
					}
			
					return;
			}
			
			#endregion
			
			#region Long -> Short
			
			if (lineButton.Content == ""LongRange"") 
			{
				lineButton.Content = ""ShortRange"";
				lineButton.Foreground = Brushes.White; 
				lineButton.Background = Brushes.Red;
				
				longLineButtonClicked = false;
				shortLineButtonClicked = true;
				countOnce = true;
				
				
					if (AddOffset)
					{
						RemoveDrawObject(""EntryLine"");
						RemoveDrawObject(""StopLine"");
						
						Draw.HorizontalLine(this, ""EntryLine"", enterShort, Brushes.Green);
						Draw.HorizontalLine(this, ""StopLine"", stopShort, Brushes.Red);
					}
					
					else if (AddOffset == false)
					{
						RemoveDrawObject(""EntryLine"");
						RemoveDrawObject(""StopLine"");
						
						Draw.HorizontalLine(this, ""EntryLine"", entryAreaShort, Brushes.Green);
						Draw.HorizontalLine(this, ""StopLine"", stopAreaShort, Brushes.Red);
					}
					
				return;
			}
			
			#endregion
			
			#region Short -> Hide
			
			if (lineButton.Content == ""ShortRange"")
			{
				lineButton.Content = ""HideRange"";
				lineButton.Foreground = Brushes.White; 
				lineButton.Background = Brushes.Black;
				
				RemoveDrawObject(""EntryLine"");
				RemoveDrawObject(""StopLine"");
				
				
				longLineButtonClicked = false;
				shortLineButtonClicked = false;
				countOnce = true;
				
				return;
			}
			
			#endregion
			
		}		
		
		#endregion
		
		#region Unlocked Button 11
		
		protected void Button11Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			
			if (unlockButton.Content == ""Unlocked"")
			{
				unlockButton.Content = ""Locked"";
				unlockButton.Foreground = Brushes.White; 
				unlockButton.Background = Brushes.Black;
				
				unlockButtonClicked = true;

				return;
			}
			
			if (unlockButton.Content == ""Locked"")	
			{
				unlockButton.Content = ""Unlocked"";
				unlockButton.Foreground = Brushes.Black; 
				unlockButton.Background = Brushes.White;
				
				unlockButtonClicked = false;
				countOnce = true;

				return;
			}
		}		
		
		#endregion
		
		#region EntryLine ++ Button 12
		
		protected void Button12Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			CandleLookBackEntry ++;
			armMarketCount --;
			
			countOnce = true;
			Print(""CandleLookBackEntry "" + CandleLookBackEntry);
			return;
		}		
		
		#endregion
		
		#region EntryLine -- Button 13
		
		protected void Button13Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			
			if (CandleLookBackEntry > 1)
			{
				CandleLookBackEntry --;
				armMarketCount --;
			
				countOnce = true;
				Print(""CandleLookBackEntry "" + CandleLookBackEntry);
				return;
			}								
		}		
		
		#endregion
		
		#region StopLine ++ Button 14
		
		protected void Button14Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			
			if (rrMode)
			{
				CandleLookBackStop ++;
				armMarketCount --;
			
				countOnce = true;
				Print(""CandleLookBackStop "" + CandleLookBackStop);
				return;
			}
			
			if (tickMode)
			{
				TickOffsetStop ++;
				
				countOnce = true;
				Print(""Stop From Entry (Ticks) "" + TickOffsetStop);
				return;
			}
			
		}		
		
		#endregion
		
		#region StopLine -- Button 15
		
		protected void Button15Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			
			if (rrMode)
			{
				if (CandleLookBackStop > 1)
				{
					CandleLookBackStop --;
					armMarketCount --;
			
					countOnce = true;
					Print(""CandleLookBackStop "" + CandleLookBackStop);
					return;
				}							
			}
			
			if (tickMode)
			{
				if ((TickOffsetStop) > 1)
				{
					TickOffsetStop --;
					
					countOnce = true;
					Print(""Stop From Entry (Ticks) "" + TickOffsetStop);
					return;
				}
			}
							
		}		
		
		#endregion
		
		#region Display Button 16
		
		protected void Button16Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			
			if (displayButton.Content == ""Show Display"" && DisplayText == true)
			{
				displayButton.Content = ""Hide Display"";
				displayButton.Foreground = Brushes.White; 
				displayButton.Background = Brushes.Black;
				
				DisplayText = false;
				Print(DisplayText);
				RemoveDrawObject(""TextBox"");
				
				//countOnce = true;
				return;
			}
			
			if (displayButton.Content == ""Hide Display"" && DisplayText == false)
			{
				displayButton.Content = ""Show Display"";
				displayButton.Foreground = Brushes.Black; 
				displayButton.Background = Brushes.White;
				
				DisplayText = true;
				Print(DisplayText);
				
				if (longButtonHLClicked == true || longButtonMarketClicked == true || longLineButtonClicked == true || customLongClicked == true || Position.MarketPosition == MarketPosition.Long)
				{
					#region Draw Lines / Text Long Offset
		
						#region RR mode
						
					if (rrMode)
					{
						if (DisplayText)
						{
							Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(enterLong, 2) + (""(""+CandleLookBackEntry+"")"")
							+ ""\nStop Line: "" + Math.Round(stopLong, 2) + (""(""+CandleLookBackStop+"")"")
							
							+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
							+ ""\nRange($): "" + LongValuesOffset
							+ ""\nRange(Ticks): "" + LongValuesOffset / TickSize
							+ ""\nPosition Size: "" + positionSizeLong	
						
							,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
						}
					}
						
						#endregion 
					
						#region Tick Mode
					
					if (tickMode)
					{
						if (DisplayText)
						{
							Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(enterLong, 2) + (""(""+CandleLookBackEntry+"")"")
							+ ""\nStop Line: "" + Math.Round(enterLong - candleBarOffsetStop, 2) + (""(""+candleBarOffsetStop / TickSize+"")"")
							
							+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
							+ ""\nRange($): "" + candleBarOffsetStop
							+ ""\nRange(Ticks): "" + candleBarOffsetStop / TickSize
							+ ""\nPosition Size: "" + positionSizeLong	
						
							,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
						}
					}
				
					#endregion
					
					#endregion
				}
				
				if (shortButtonHLClicked == true || shortButtonMarketClicked == true || shortLineButtonClicked == true || customShortClicked == true || Position.MarketPosition == MarketPosition.Short)
				{
					#region Draw Lines / Text Short Offset
				
						#region RR Mode
						
				if (rrMode)
				{
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(enterShort, 2) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round(stopShort, 2) + (""(""+CandleLookBackStop+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + ShortValuesOffset
						+ ""\nRange(Ticks): "" + ShortValuesOffset / TickSize
						+ ""\nPosition Size: "" + positionSizeShort	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
					
				}
						
					#endregion
					
						#region Tick Mode
						
				if (tickMode)
				{					
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(enterShort, 2) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round(enterShort + candleBarOffsetStop, 2) + (""(""+candleBarOffsetStop / TickSize+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + candleBarOffsetStop
						+ ""\nRange(Ticks): "" + candleBarOffsetStop / TickSize
						+ ""\nPosition Size: "" + positionSizeShort	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
					
				}
						
					#endregion
					
				#endregion
				}
				
				//countOnce = true;
				return;
			}
												
		}		
		
		#endregion
		
		#region Fib Button 17
		
		protected void Button17Click(object sender, RoutedEventArgs e)
		{
			ForceRefresh();
			
			if (fibButton.Content == ""HideFib"")
			{
				fibButton.Content = ""ShowFib"";
				fibButton.Foreground = Brushes.Black; 
				fibButton.Background = Brushes.White;
				
				fibButtonClicked = true;
				
				if (fibButtonClicked && Position.MarketPosition == MarketPosition.Long)
				{
					if (rrMode)
					{
						Draw.FibonacciRetracements(this, ""FibLong"", false, fibCount, setStopLong, fibCount, enterLong);
					}
				
					if (tickMode)
					{
						Draw.FibonacciRetracements(this, ""FibLong"", false, fibCount, Position.AveragePrice - candleBarOffsetStop, fibCount, Position.AveragePrice);
					}
				}
			
			if (fibButtonClicked && Position.MarketPosition == MarketPosition.Short)
			{
				if (rrMode)
				{
					Draw.FibonacciRetracements(this, ""FibShort"", false, fibCount, setStopShort, fibCount, enterShort);
				}
				
				if (tickMode)
				{
					Draw.FibonacciRetracements(this, ""FibShort"", false, fibCount, Position.AveragePrice + candleBarOffsetStop, fibCount, Position.AveragePrice);
				}
			}
					
				return;
			}
			
			if (fibButton.Content == ""ShowFib"")
			{
				fibButton.Content = ""HideFib"";
				fibButton.Foreground = Brushes.White; 
				fibButton.Background = Brushes.Black;
				
				fibButtonClicked = false;
				
				if ((!fibButtonClicked) || (Position.MarketPosition == MarketPosition.Flat))
				
				{
					RemoveDrawObject(""FibLong"");
					RemoveDrawObject(""FibShort"");
				}
				
				return;
			}
		}		
		
		#endregion
		
		#endregion
		
		#region Button Controls
		
		protected void CreateWPFControls()
		{
			#region Create WPF Controls
			
				#region Button Grid
			
			chartWindow				= Window.GetWindow(ChartControl.Parent) as Gui.Chart.Chart;

			// if not added to a chart, do nothing
			if (chartWindow == null)
				return;

			// this is the entire chart trader area grid
			chartTraderGrid			= (chartWindow.FindFirst(""ChartWindowChartTraderControl"") as Gui.Chart.ChartTrader).Content as System.Windows.Controls.Grid;

			// this grid contains the existing chart trader buttons
			chartTraderButtonsGrid	= chartTraderGrid.Children[0] as System.Windows.Controls.Grid;

			// this grid is to organize stuff below
			lowerButtonsGrid = new System.Windows.Controls.Grid();

			//Makes 2 Columns
			lowerButtonsGrid.ColumnDefinitions.Add(new System.Windows.Controls.ColumnDefinition());			
			lowerButtonsGrid.ColumnDefinitions.Add(new System.Windows.Controls.ColumnDefinition());		
			
			//Makes Rows
			lowerButtonsGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition()	); //Buy High / Sell Low
			lowerButtonsGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition()	); //Market
			lowerButtonsGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition()	); //Custom
			lowerButtonsGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition()	); //Close Position
			lowerButtonsGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition()	); //Management
			lowerButtonsGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition()	); //EntryLines 
			lowerButtonsGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition()	); //EntryLine +-
			lowerButtonsGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition()	); //StopLine +-
			lowerButtonsGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition()	); //Display / Fib
			
			addedRow	= new System.Windows.Controls.RowDefinition() { Height = new GridLength(240) };
				

			// this style (provided by NinjaTrader_MichaelM) gives the correct default minwidth (and colors) to make buttons appear like chart trader buttons
			Style basicButtonStyle	= Application.Current.FindResource(""BasicEntryButton"") as Style;
			
			#endregion

				#region Button Content
			
				longButtonHL = new System.Windows.Controls.Button()//1
				{		
					Name			= ""longButtonHL"",
					Content			= ""BUY HIGH"",
					Height			= 25,
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
						
				};				

				shortButtonHL = new System.Windows.Controls.Button()//2
				{		
					Name			= ""shortButtonHL"",
					Content			= ""SELL LOW"",
					Height			= 25,
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				
				longButtonMarket = new System.Windows.Controls.Button()//3
				{		
					
					Content			= string.Format(""Buy Market""),
					Height			= 25,
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				
				shortButtonMarket = new System.Windows.Controls.Button()//4
				{		
					
					Content			= string.Format(""Short Market""),
					Height			= 25,
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				
				customLong = new System.Windows.Controls.Button()//5
				{		
					
					Content			= ""Custom Long"",
					Height			= 25,
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				
				customShort = new System.Windows.Controls.Button()//6
				{		
					
					Content			= ""Custom Short"",
					Height			= 25,
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				
				myButton7 = new System.Windows.Controls.Button()//7
				{		
					
					Content			= string.Format(""Close Position""),
					Height			= 25,
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				
				breakevenButton = new System.Windows.Controls.Button()//8
				{		
					
					Content			= string.Format(""BreakEven""),
					Height			= 25, 
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				
				trailButton = new System.Windows.Controls.Button()//9
				{		
					
					Content			= ""Trail Stop"",
					Height			= 25, 
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				
				lineButton = new System.Windows.Controls.Button()//10
				{		
					
					Content			= ""HideRange"",
					Height			= 25, 
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				
				unlockButton = new System.Windows.Controls.Button()//11
				{		
					
					Content			= ""Unlocked"",
					Height			= 25, 
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
			
				myButton12 = new System.Windows.Controls.Button()//12
				{		
					
					Content			= string.Format(""EntryLine ++""),
					Height			= 25, 
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				
				myButton13 = new System.Windows.Controls.Button()//13
				{		
					
					Content			= string.Format(""EntryLine --""),
					Height			= 25, 
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				
				myButton14 = new System.Windows.Controls.Button()//14
				{		
					
					Content			= string.Format(""StopLine ++""),
					Height			= 25, 
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				
				myButton15 = new System.Windows.Controls.Button()//15
				{		
					
					Content			= string.Format(""StopLine --""),
					Height			= 25, 
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				
				
				
				if (DisplayText)
				{
					displayButton = new System.Windows.Controls.Button()//16
					{		
						
						Content			= ""Show Display"",
						Height			= 25, 
						Margin			= new Thickness(5,0,5,0),
						Padding			= new Thickness(0,0,0,0),
						Style			= basicButtonStyle
					};		
				}
				
				if (DisplayText == false)
				{
					displayButton = new System.Windows.Controls.Button()//16 (2)
					{		
						
						Content			= ""Hide Display"",
						Height			= 25, 
						Margin			= new Thickness(5,0,5,0),
						Padding			= new Thickness(0,0,0,0),
						Style			= basicButtonStyle
					};		
				}
				
				
				
				fibButton = new System.Windows.Controls.Button()//17
				{		
					
					Content			= ""HideFib"",
					Height			= 25, 
					Margin			= new Thickness(5,0,5,0),
					Padding			= new Thickness(0,0,0,0),
					Style			= basicButtonStyle
				};		
				#endregion
				
				#region Button Colors
					
				//1. Buy High
					longButtonHL.Background	= Brushes.ForestGreen;
					longButtonHL.BorderBrush	= Brushes.Black;
					longButtonHL.Foreground    = Brushes.Black;	
					longButtonHL.BorderThickness = new Thickness(2.0);
					longButtonHL.IsEnabled = true;

				//2. Sell Low
					shortButtonHL.Background	= Brushes.Firebrick;
					shortButtonHL.BorderBrush	= Brushes.Black;	
					shortButtonHL.Foreground    = Brushes.White;	
					shortButtonHL.BorderThickness = new Thickness(2.0);			
				
				//3. Long Market
					longButtonMarket.Background	= Brushes.MediumSeaGreen;
					longButtonMarket.BorderBrush	= Brushes.Black;	
					longButtonMarket.Foreground    = Brushes.Black;	
					longButtonMarket.BorderThickness = new Thickness(2.0);				
				
				//.4 Short Market
					shortButtonMarket.Background	= Brushes.IndianRed;
					shortButtonMarket.BorderBrush	= Brushes.Black;	
					shortButtonMarket.Foreground    = Brushes.White;	
					shortButtonMarket.BorderThickness = new Thickness(2.0);		
				
				//5. Custom Long
					customLong.Background	= Brushes.MediumSeaGreen;
					customLong.BorderBrush	= Brushes.Black;	
					customLong.Foreground    = Brushes.Black;	
					customLong.BorderThickness = new Thickness(2.0);	
				
				//6. Custom Short
					customShort.Background	= Brushes.IndianRed;
					customShort.BorderBrush	= Brushes.Black;	
					customShort.Foreground    = Brushes.White;	
					customShort.BorderThickness = new Thickness(2.0);	
				
				//7. Close Position - Swithced Position after
					myButton7.Background	= Brushes.DarkOrange;
					myButton7.BorderBrush	= Brushes.Black;	
					myButton7.Foreground    = Brushes.Black;	
					myButton7.BorderThickness = new Thickness(2.0);
				
				//8. Breakeven
					breakevenButton.Background	= Brushes.LightGray;
					breakevenButton.BorderBrush	= Brushes.Black;	
					breakevenButton.Foreground    = Brushes.DarkGreen;	
					breakevenButton.BorderThickness = new Thickness(2.0);
				
				//9. Trail
					trailButton.Background	= Brushes.LightGray;
					trailButton.BorderBrush	= Brushes.Black;	
					trailButton.Foreground    = Brushes.DarkGreen;	
					trailButton.BorderThickness = new Thickness(2.0);
				
				//10. Line
					lineButton.Background	= Brushes.Black;
					lineButton.BorderBrush	= Brushes.Black;	
					lineButton.Foreground    = Brushes.White;	
					lineButton.BorderThickness = new Thickness(2.0);
				
				//11. Unlocked
					unlockButton.Background	= Brushes.White;
					unlockButton.BorderBrush	= Brushes.Black;	
					unlockButton.Foreground    = Brushes.Black;	
					unlockButton.BorderThickness = new Thickness(2.0);
				
				//12. EntryLine ++
					myButton12.Background	= Brushes.PaleGreen;
					myButton12.BorderBrush	= Brushes.Black;	
					myButton12.Foreground    = Brushes.DarkGreen;	
					myButton12.BorderThickness = new Thickness(2.0);
				
				//13. EntryLine --
					myButton13.Background	= Brushes.PaleGreen;
					myButton13.BorderBrush	= Brushes.Black;	
					myButton13.Foreground    = Brushes.Firebrick;	
					myButton13.BorderThickness = new Thickness(2.0);
				
				//14. StopLine ++
					myButton14.Background	= Brushes.LightSalmon;
					myButton14.BorderBrush	= Brushes.Black;	
					myButton14.Foreground    = Brushes.DarkGreen;	
					myButton14.BorderThickness = new Thickness(2.0);
				
				//15. StopLine --
					myButton15.Background	= Brushes.LightSalmon;
					myButton15.BorderBrush	= Brushes.Black;	
					myButton15.Foreground    = Brushes.Firebrick;	
					myButton15.BorderThickness = new Thickness(2.0);
				
				//16.
				if (DisplayText)
				{
					displayButton.Background	= Brushes.White;
					displayButton.BorderBrush	= Brushes.Black;	
					displayButton.Foreground    = Brushes.Black;	
					displayButton.BorderThickness = new Thickness(2.0);
				}
				
				if (DisplayText == false)
				{
					displayButton.Background	= Brushes.Black;
					displayButton.BorderBrush	= Brushes.Black;	
					displayButton.Foreground    = Brushes.White;	
					displayButton.BorderThickness = new Thickness(2.0);
				}
					
				
				//17.
					fibButton.Background	= Brushes.Black;
					fibButton.BorderBrush	= Brushes.Black;	
					fibButton.Foreground    = Brushes.White;	
					fibButton.BorderThickness = new Thickness(2.0);
				
			
			#endregion	
				
				#region Button Click
				
					longButtonHL.Click +=  Button1Click;
					shortButtonHL.Click +=  Button2Click;
					
					longButtonMarket.Click +=  Button3Click;
					shortButtonMarket.Click +=  Button4Click;	
				
			
					customLong.Click +=  Button5Click;
					customShort.Click +=  Button6Click;
				
					myButton7.Click +=  Button7Click;
				
					breakevenButton.Click +=  Button8Click;
					trailButton.Click +=  Button9Click;
				
					lineButton.Click +=  Button10Click;
					unlockButton.Click +=  Button11Click;
				
					myButton12.Click +=  Button12Click;
				
					myButton13.Click +=  Button13Click;
				
					myButton14.Click +=  Button14Click;
					myButton15.Click +=  Button15Click;
				
					displayButton.Click +=  Button16Click;
					fibButton.Click +=  Button17Click;
				
				#endregion
				
				#region Button Location
				
					//High Low				
					System.Windows.Controls.Grid.SetColumn(longButtonHL, 0);				
					System.Windows.Controls.Grid.SetColumn(shortButtonHL, 1);
					
					//Market
					System.Windows.Controls.Grid.SetColumn(longButtonMarket, 0);				
					System.Windows.Controls.Grid.SetRow(longButtonMarket, 1);					
							
					System.Windows.Controls.Grid.SetColumn(shortButtonMarket, 1);				
					System.Windows.Controls.Grid.SetRow(shortButtonMarket, 1);						
				
					//Custom
					System.Windows.Controls.Grid.SetColumn(customLong, 0);				
					System.Windows.Controls.Grid.SetRow(customLong, 2);
				
					System.Windows.Controls.Grid.SetColumn(customShort, 1);				
					System.Windows.Controls.Grid.SetRow(customShort, 2);
				
					//Breakeven
					System.Windows.Controls.Grid.SetColumn(breakevenButton, 0);				
					System.Windows.Controls.Grid.SetRow(breakevenButton, 3);
				
					//Trail
					System.Windows.Controls.Grid.SetColumn(trailButton, 1);				
					System.Windows.Controls.Grid.SetRow(trailButton, 3);
				
					//Close
					System.Windows.Controls.Grid.SetColumn(myButton7, 1);				
					System.Windows.Controls.Grid.SetRow(myButton7, 4);
				
					//Range
					System.Windows.Controls.Grid.SetColumn(lineButton, 0);				
					System.Windows.Controls.Grid.SetRow(lineButton, 5);
				
					//Unlocked
					System.Windows.Controls.Grid.SetColumn(unlockButton, 1);				
					System.Windows.Controls.Grid.SetRow(unlockButton, 5);
				
					//EntryLine ++
					System.Windows.Controls.Grid.SetColumn(myButton12, 0);				
					System.Windows.Controls.Grid.SetRow(myButton12, 6);
					
					//EntryLine --
					System.Windows.Controls.Grid.SetColumn(myButton13, 1);				
					System.Windows.Controls.Grid.SetRow(myButton13, 6);
				
					//StopLine ++
					System.Windows.Controls.Grid.SetColumn(myButton14, 0);				
					System.Windows.Controls.Grid.SetRow(myButton14, 7);
				
					//StopLine --
					System.Windows.Controls.Grid.SetColumn(myButton15, 1);				
					System.Windows.Controls.Grid.SetRow(myButton15, 7);
				
					//Display
					System.Windows.Controls.Grid.SetColumn(displayButton, 0);				
					System.Windows.Controls.Grid.SetRow(displayButton, 8);
				
					//Fib
					System.Windows.Controls.Grid.SetColumn(fibButton, 1);				
					System.Windows.Controls.Grid.SetRow(fibButton, 8);
				
				#endregion
				
				#region Add Buttons
				
					lowerButtonsGrid.Children.Add(longButtonHL);							
					lowerButtonsGrid.Children.Add(shortButtonHL);
				
				
					lowerButtonsGrid.Children.Add(longButtonMarket);
					lowerButtonsGrid.Children.Add(shortButtonMarket);				
				
					lowerButtonsGrid.Children.Add(customLong);
					lowerButtonsGrid.Children.Add(customShort);	
				
					lowerButtonsGrid.Children.Add(myButton7);
				
					lowerButtonsGrid.Children.Add(breakevenButton);
				
					lowerButtonsGrid.Children.Add(trailButton);
				
					lowerButtonsGrid.Children.Add(lineButton);
					lowerButtonsGrid.Children.Add(unlockButton);
				
					lowerButtonsGrid.Children.Add(myButton12);
					lowerButtonsGrid.Children.Add(myButton13);
				
					lowerButtonsGrid.Children.Add(myButton14);
					lowerButtonsGrid.Children.Add(myButton15);
				
					lowerButtonsGrid.Children.Add(displayButton);
					lowerButtonsGrid.Children.Add(fibButton);
				
				#endregion
				
			if (TabSelected())
				InsertWPFControls();

			chartWindow.MainTabControl.SelectionChanged += TabChangedHandler;
			
			#endregion
		}
	
		public void DisposeWPFControls() 
		{
			#region Dispose
			
			if (chartWindow != null)
				chartWindow.MainTabControl.SelectionChanged -= TabChangedHandler;

			if (longButtonHL != null)
				longButtonHL.Click -= Button1Click;

			if (shortButtonHL != null)
				shortButtonHL.Click -= Button2Click;
			
			if (longButtonMarket != null)
				longButtonMarket.Click -= Button3Click;
			
			if (shortButtonMarket != null)
				shortButtonMarket.Click -= Button4Click;
			
			if (customLong != null)
				customLong.Click -= Button5Click;
			
			if (customShort != null)
				customShort.Click -= Button6Click;
			
			if (myButton7 != null)
				myButton7.Click -= Button7Click;
			
			if (breakevenButton != null)
				breakevenButton.Click -= Button8Click;
				
			if (trailButton != null)
				trailButton.Click -= Button9Click;	
			
			if (lineButton != null)
				lineButton.Click -= Button10Click;
			
			if (unlockButton != null)
				unlockButton.Click -= Button11Click;
			
			if (myButton12 != null)
				myButton12.Click -= Button12Click;
			
			if (myButton13 != null)
				myButton13.Click -= Button13Click;
			
			if (myButton14 != null)
				myButton14.Click -= Button14Click;
			
			if (myButton15 != null)
				myButton15.Click -= Button15Click;
			
			if (displayButton != null)
				displayButton.Click -= Button16Click;
			
			if (fibButton != null)
				fibButton.Click -= Button17Click;

			RemoveWPFControls();
			
			#endregion
		}
		
		public void InsertWPFControls()
		{
			#region Insert WPF
			
			if (panelActive)
				return;
			
			// add a new row (addedRow) for our lowerButtonsGrid below the ask and bid prices and pnl display			
			chartTraderGrid.RowDefinitions.Add(addedRow);
			System.Windows.Controls.Grid.SetRow(lowerButtonsGrid, (chartTraderGrid.RowDefinitions.Count - 1));
			chartTraderGrid.Children.Add(lowerButtonsGrid);

			panelActive = true;
			
			#endregion
		}
		
		#endregion
		
	
		protected override void OnBarUpdate()
		{
			if (State != State.Realtime ) 
				return;
			
			if (countOnce && Position.MarketPosition == MarketPosition.Flat && unlockButtonClicked == false)
			{
				
				if (CandleRange == false)
				{
					#region Entry Offset
					
			if (longButtonHLClicked == true || longButtonMarketClicked == true || longLineButtonClicked == true || (customLongClicked == true && enterClosePrice == false)
				|| shortButtonHLClicked == true || shortButtonMarketClicked == true || shortLineButtonClicked == true || (customShortClicked == true && enterClosePrice == false)
				)				
			{
				//HL
				entryAreaLong		= High[CandleLookBackEntry];
				entryAreaShort		= Low[CandleLookBackEntry];	
			}
				
			if ((customLongClicked || customShortClicked) && enterClosePrice == true)
			{
				//Previous Close Price	
				entryAreaLong	= Close[CandleLookBackEntry];
				entryAreaShort	= Close[CandleLookBackEntry];	
			}
				
					
			//Adds offset to your entry area. Gives user customization.
			percentageCalcEntry 	= ((High[CandleLookBackEntry] - Low[CandleLookBackEntry]) * PercentageOffsetEntry);
			priceCalcEntry 			= PriceOffsetEntry;
			tickCalcEntry			= TickOffsetEntry * TickSize;
			
			//Picks the highest of the 3 numbers
			candleBarOffsetEntry = Math.Max(percentageCalcEntry, Math.Max(priceCalcEntry, tickCalcEntry));
			
			//Add both of them together to define final entry point
			enterLong = entryAreaLong + candleBarOffsetEntry;
			enterShort = entryAreaShort - candleBarOffsetEntry;
			
			
			#region Entry Prints
			
			if (SystemPrint)
			{
				if (EntryPrints)
				{
					Print(""percentageCalcEntry "" + percentageCalcEntry + "" "" + Time[CandleLookBackEntry]);
					Print(""priceCalcEntry "" + priceCalcEntry + "" "" + Time[CandleLookBackEntry]);
					Print(""tickCalcEntry "" + tickCalcEntry + "" "" + Time[CandleLookBackEntry]);
					
					Print(""candleBarOffsetEntry "" + candleBarOffsetEntry + "" "" + Time[CandleLookBackEntry]);
					
					Print(""enterLong "" + enterLong + "" "" + Time[CandleLookBackEntry]);
					Print(""enterShort "" + enterShort + "" "" + Time[CandleLookBackEntry]);
				}
			}
			#endregion
			
			#endregion
			
					#region Stop Offset
			
			//Define what area you will set a stop (If it is based on the chart)
			stopAreaLong		= Low[CandleLookBackStop];
			stopAreaShort		= High[CandleLookBackStop];
			
			//Adds offset to your stop area. Gives user customization.
			percentageCalcStop 		= ((High[CandleLookBackStop] - Low[CandleLookBackStop]) * PercentageOffsetStop);
			priceCalcStop 			= PriceOffsetStop;
			tickCalcStop			= TickOffsetStop * TickSize;
			
			//Picks the highest of the 3 numbers
			candleBarOffsetStop = Math.Max(percentageCalcStop, Math.Max(priceCalcStop, tickCalcStop));
			
			//Add both of them together to define final stop point
			stopLong = stopAreaLong - candleBarOffsetStop;
			stopShort = stopAreaShort + candleBarOffsetStop;
			
			#region StopPrints
			
			if (SystemPrint)
			{
				if (StopPrints)
				{
					Print(""percentageCalcStop "" + percentageCalcStop + "" "" + Time[CandleLookBackStop]);
					Print(""priceCalcStop "" + priceCalcStop + "" "" + Time[CandleLookBackStop]);
					Print(""tickCalcStop "" + tickCalcStop + "" "" + Time[CandleLookBackStop]);
				
					Print(""candleBarOffsetStop "" + candleBarOffsetStop + "" "" + Time[CandleLookBackStop]);
					
					Print(""stopLong "" + stopLong + "" "" + Time[CandleLookBackStop]);
					Print(""stopShort "" + stopShort + "" "" + Time[CandleLookBackStop]);
				}
			}
			
			#endregion
			
			#endregion
			
					#region Breakeven Offset
			
			//Define what area you will set a breakeven (If it is based on the chart)
			breakevenAreaLong		= entryAreaLong;
			breakevenAreaShort		= entryAreaShort;
			
			//Adds offset to your breakeven area. Gives user customization.
			percentageCalcBreakeven 	= ((entryAreaLong - stopAreaLong) * PercentageOffsetBreakeven);
			priceCalcBreakeven 			= PriceOffsetBreakeven;
			tickCalcBreakeven			= TickOffsetBreakeven * TickSize;
			
			//Picks the highest of the 3 numbers
			candleBarOffsetBreakeven = Math.Max(percentageCalcBreakeven, Math.Max(priceCalcBreakeven, tickCalcBreakeven));
			
			//Add both of them together to define final breakeven point
			//breakevenLong = breakevenAreaLong - candleBarOffsetBreakeven;
			//breakevenShort = breakevenAreaShort + candleBarOffsetBreakeven;
			
			#region BreakevenPrints
			
			if (SystemPrint)
			{
				if (BreakevenPrints)
				{
					Print(""percentageCalcBreakeven "" + percentageCalcBreakeven + "" "" + Time[1]);
					Print(""priceCalcBreakeven "" + priceCalcBreakeven + "" "" + Time[1]);
					Print(""tickCalcBreakeven "" + tickCalcBreakeven + "" "" + Time[1]);
				
					Print(""candleBarOffsetBreakeven "" + candleBarOffsetBreakeven + "" "" + Time[1]);
					
					Print(""breakevenLong "" + breakevenLong + "" "" + Time[1]);
					Print(""breakevenShort "" + breakevenShort + "" "" + Time[1]);
				}
			}
			
			#endregion
			
			#endregion
			
					#region Range Values
			
			LongValuesOffset 	= Math.Round(enterLong - stopLong, 4);
			ShortValuesOffset	= Math.Round(stopShort - enterShort, 4);
			
			LongValues 			= Math.Round(entryAreaLong - stopAreaLong, 4);
			ShortValues			= Math.Round(stopAreaShort - entryAreaShort, 4);
			
			#endregion
			
					#region Limit Entry Offset
			
			if (useLimit)
			{
				percentageCalcLimitLong		= LongValuesOffset * PercentageOffsetLimit;
				percentageCalcLimitShort	= ShortValuesOffset * PercentageOffsetLimit;
				priceCalcLimit				= PriceOffsetLimit;
				tickCalcLimit				= TickOffsetLimit * TickSize;
				
				limitOffsetLong				= Math.Max(percentageCalcLimitLong, Math.Max(priceCalcLimit, tickCalcLimit));	
				limitOffsetShort			= Math.Max(percentageCalcLimitShort, Math.Max(priceCalcLimit, tickCalcLimit));
				
				if (AddOffset)
				{
					limitPriceSetLong			= enterLong + limitOffsetLong;
					limitPriceSetShort			= enterShort - limitOffsetShort;
				}
				
				else if (AddOffset == false)
				{
					limitPriceSetLong			= entryAreaLong + limitOffsetLong;
					limitPriceSetShort			= entryAreaShort - limitOffsetShort;
				}
				
				#region Limit Prints
			
			if (SystemPrint)
			{
				if (LimitPrints)
				{
					Print(""percentageCalcLimitLong "" + percentageCalcLimitLong + "" "" + Time[0]);
					Print(""percentageCalcLimitShort "" + percentageCalcLimitShort + "" "" + Time[0]);
					Print(""priceCalcLimit "" + priceCalcLimit + "" "" + Time[0]);
					Print(""tickCalcLimit "" + tickCalcLimit + "" "" + Time[0]);
					
					Print(""limitOffsetLong "" + limitOffsetLong + "" "" + Time[0]);
					Print(""limitPriceSetShort "" + limitPriceSetShort + "" "" + Time[0]);
					
					Print(""limitPriceSetLong "" + limitPriceSetLong + "" "" + Time[0]);
					Print(""limitPriceSetShort "" + limitPriceSetShort + "" "" + Time[0]);
				}
			}
			#endregion
			}
			
			
			#endregion
			
			
					#region Offset Added Logic
			
			if (AddOffset) ///Update Prints
			{	
				//Long Trades
				if (longButtonHLClicked == true || longButtonMarketClicked == true || longLineButtonClicked == true || customLongClicked == true)
				{
						
					#region Position Size Long
				
				if (autoPositionSize)
				{
					if (rrMode)
					{
						riskOffset = MaxLossPerTrade / ( ( (LongValuesOffset) / TickSize) * myDbl);
					}
					
					if (tickMode)
					{
						riskOffset = MaxLossPerTrade / ( ( (candleBarOffsetStop) / TickSize) * myDbl);
					}
				}
				
				else if (customPositionSize)
				{
					riskOffset = CustomPositionAmount;
				}
				
				positionSizeLong = (Convert.ToInt32(riskOffset));
				
				
					//Single Target
					if (dualTarget == false)
					{
						positionSizeLong = (Convert.ToInt32(riskOffset));
						
						if (positionSizeLong < 1)
						{
							positionSizeLong = 1;
						}
					}
					
					//Dual Target
					if (dualTarget)
					{
						
					firstTargetPositionLong = (Convert.ToInt32(positionSizeLong * splitPercent));
						
						if (firstTargetPositionLong < 1)
						{
							firstTargetPositionLong = 1;
						}
				
					secondTargetPositionLong = positionSizeLong - firstTargetPositionLong; 
						
						if(secondTargetPositionLong < 1)
						{
							secondTargetPositionLong = 1;
						}	
					}
					
						#region Position Size Prints
						
						if (SystemPrint)
						{
							if (PositionSizePrints)
							{
								Print(""positionSizeLong ""+ positionSizeLong + "" "" + Time[0]);
								Print(""firstTargetPositionLong ""+ firstTargetPositionLong + "" "" + Time[0]);
								Print(""secondTargetPositionLong ""+ secondTargetPositionLong + "" "" + Time[0]);
							}
						}
						
						#endregion
							
					#endregion
			
					#region Set Stop/Profit Long
				
				if (Low[0] > stopLong)
				{
					setStopLong = stopLong;
					
					setFirstTargetLong = enterLong + (LongValuesOffset * FirstTargetRR);
					setFinalTargetLong = enterLong + (LongValuesOffset * FinalTargetRR);
				}
				
				else if (Low[0] <= stopLong)
				{
					setStopLong = Low[0] - candleBarOffsetStop;
					
					setFirstTargetLong = enterLong + ((enterLong - setStopLong) * FirstTargetRR);
					setFinalTargetLong = enterLong + ((enterLong - setStopLong) * FinalTargetRR);
				}
				
				#region Profit Target Long Prints
				
				if (SystemPrint)
				{
					if (ProfitTatgetPrints)
					{
						Print(""setStopLong ""+ setStopLong + "" "" + Time[0]);
						Print(""setFirstTargetLong ""+ setFirstTargetLong + "" "" + Time[0]);
						Print(""setFinalTargetLong ""+ setFinalTargetLong + "" "" + Time[0]);		
					}
				}
				
				#endregion
				
				
				#endregion
				
					#region Draw Lines / Text Long Offset
		
						#region RR mode
						
					if (rrMode)
					{
						RemoveDrawObject(""EntryLine"");
						RemoveDrawObject(""StopLine"");
					
						Draw.HorizontalLine(this, ""EntryLine"", enterLong, Brushes.Green);
						Draw.HorizontalLine(this, ""StopLine"", stopLong, Brushes.Red);
					
						if (DisplayText)
						{
							Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(enterLong, 4) + (""(""+CandleLookBackEntry+"")"")
							+ ""\nStop Line: "" + Math.Round(stopLong, 4) + (""(""+CandleLookBackStop+"")"")
							
							+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
							+ ""\nRange($): "" + LongValuesOffset
							+ ""\nRange(Ticks): "" + LongValuesOffset / TickSize
							+ ""\nPosition Size: "" + positionSizeLong	
						
							,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
						}
					}
						
						#endregion 
					
						#region Tick Mode
					
					if (tickMode)
					{
						RemoveDrawObject(""EntryLine"");
						RemoveDrawObject(""StopLine"");
					
						Draw.HorizontalLine(this, ""EntryLine"", enterLong, Brushes.Green);
						Draw.HorizontalLine(this, ""StopLine"", enterLong - candleBarOffsetStop, Brushes.Red);
					
						if (DisplayText)
						{
							Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(enterLong, 4) + (""(""+CandleLookBackEntry+"")"")
							+ ""\nStop Line: "" + Math.Round(enterLong - candleBarOffsetStop, 4) + (""(""+candleBarOffsetStop / TickSize+"")"")
							
							+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
							+ ""\nRange($): "" + candleBarOffsetStop
							+ ""\nRange(Ticks): "" + candleBarOffsetStop / TickSize
							+ ""\nPosition Size: "" + positionSizeLong	
						
							,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
						}
					}
				
					#endregion
					
					#endregion
										
				}
				
				
				//Short Trades
				if (shortButtonHLClicked == true || shortButtonMarketClicked == true || shortLineButtonClicked == true || customShortClicked == true)
				{
				
					#region Position Size Short
				
				if (autoPositionSize)
				{
					if (rrMode)
					{
						riskOffset = MaxLossPerTrade / ( ( (ShortValuesOffset) / TickSize) * myDbl);
					}
					
					if (tickMode)
					{
						riskOffset = MaxLossPerTrade / ( ( (candleBarOffsetStop) / TickSize) * myDbl);
					}
				}
				
				else if (customPositionSize)
				{
					riskOffset = CustomPositionAmount;
				}
				
				positionSizeShort = (Convert.ToInt32(riskOffset));
				
				
					//Single Target
					if (dualTarget == false)
					{
						positionSizeShort = (Convert.ToInt32(riskOffset));
						
						if (positionSizeShort < 1)
						{
							positionSizeShort = 1;
						}
					}
					
					//Dual Target
					if (dualTarget)
					{
						
					firstTargetPositionShort = (Convert.ToInt32(positionSizeShort * splitPercent));
						
						if (firstTargetPositionShort < 1)
						{
							firstTargetPositionShort = 1;
						}
				
					secondTargetPositionShort = positionSizeShort - firstTargetPositionShort; 
						
						if(secondTargetPositionShort < 1)
						{
							secondTargetPositionShort = 1;
						}	
					}
					
						#region Position Size Prints
						
						if (SystemPrint)
						{
							if (PositionSizePrints)
							{
								Print(""positionSizeShort ""+ positionSizeShort + "" "" + Time[0]);
								Print(""firstTargetPositionShort ""+ firstTargetPositionShort + "" "" + Time[0]);
								Print(""secondTargetPositionShort ""+ secondTargetPositionShort + "" "" + Time[0]);
							}
						}
						
						#endregion
						
					
					#endregion
				
					#region Set Stop/Profit Short
				
				if (High[0] < stopShort)
				{
					setStopShort = stopShort;
					
					setFirstTargetShort = enterShort - (ShortValuesOffset * FirstTargetRR);
					setFinalTargetShort = enterShort - (ShortValuesOffset * FinalTargetRR);
				}
				
				else if (High[0] >= stopShort)
				{
					setStopShort = High[0] + candleBarOffsetStop;
					
					setFirstTargetShort = enterShort - ((setStopShort - enterShort) * FirstTargetRR);
					setFinalTargetShort = enterShort - ((setStopShort - enterShort) * FinalTargetRR);
				}
				
				
				#region Profit Target Prints
						
						if (SystemPrint)
						{
							if (ProfitTatgetPrints)
							{
								Print(""setStopShort ""+ setStopShort + "" "" + Time[0]);
								Print(""setFirstTargetShort ""+ setFirstTargetShort + "" "" + Time[0]);
								Print(""setFinalTargetShort ""+ setFinalTargetShort + "" "" + Time[0]);
							}
						}
						
						#endregion
				
				#endregion
					
					#region Draw Lines / Text Short Offset
				
						#region RR Mode
						
				if (rrMode)
				{
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					
					
					Draw.HorizontalLine(this, ""EntryLine"", enterShort, Brushes.Green);
					Draw.HorizontalLine(this, ""StopLine"", stopShort, Brushes.Red);
					
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(enterShort, 4) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round(stopShort, 4) + (""(""+CandleLookBackStop+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + ShortValuesOffset
						+ ""\nRange(Ticks): "" + ShortValuesOffset / TickSize
						+ ""\nPosition Size: "" + positionSizeShort	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
					
				}
						
					#endregion
					
						#region Tick Mode
						
				if (tickMode)
				{
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					
					
					Draw.HorizontalLine(this, ""EntryLine"", enterShort, Brushes.Green);
					Draw.HorizontalLine(this, ""StopLine"", enterShort + candleBarOffsetStop, Brushes.Red);
					
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(enterShort, 4) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round(enterShort + candleBarOffsetStop, 4) + (""(""+candleBarOffsetStop / TickSize+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + candleBarOffsetStop
						+ ""\nRange(Ticks): "" + candleBarOffsetStop / TickSize
						+ ""\nPosition Size: "" + positionSizeShort	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
					
				}
						
					#endregion
					
				#endregion
				
				}
			}
			
			#endregion	
			
					#region W/O Offset 
			/* Removed for simplicity of use
			
			if (AddOffset == false)
			{	
				//Long Trades
				if (longButtonHLClicked == true || longButtonMarketClicked == true || longLineButtonClicked == true || customLongClicked == true)
				{
				
					#region Position Size Long
				
				if (autoPositionSize)
				{
					riskOffset = MaxLossPerTrade / ( ( (LongValues) / TickSize) * myDbl);
				}
				
				else if (customPositionSize)
				{
					riskOffset = CustomPositionAmount;
				}
				
				positionSize = (Convert.ToInt32(riskOffset));
				
				
					//Single Target
					if (dualTarget == false)
					{
						positionSize = (Convert.ToInt32(riskOffset));
						
						if (positionSize < 1)
						{
							positionSize = 1;
						}
					}
					
					//Dual Target
					if (dualTarget)
					{
						
					firstTargetPosition = (Convert.ToInt32(positionSize * splitPercent));
						
						if (firstTargetPosition < 1)
						{
							firstTargetPosition = 1;
						}
				
					secondTargetPosition = positionSize - firstTargetPosition; 
						
						if(secondTargetPosition < 1)
						{
							secondTargetPosition = 1;
						}	
					}
					
						#region Position Size Prints
						
						if (SystemPrint)
						{
							if (PositionSizePrints)
							{
								Print(""positionSize ""+ positionSize + "" "" + Time[0]);
								Print(""firstTargetPosition ""+ firstTargetPosition + "" "" + Time[0]);
								Print(""secondTargetPosition ""+ secondTargetPosition + "" "" + Time[0]);
							}
						}
						
						#endregion
						
					
					
				
					#endregion
					
					#region Set Stop/Profit Long		
					
				if (Low[0] > stopAreaLong)
				{
					setStopLong = stopAreaLong;
				}
				
				else if (Low[0] <= stopAreaLong)
				{
					setStopLong = Low[0];
				}
				
				setFirstTarget = entryAreaLong + (LongValues * FirstTargetRR);
				setFinalTarget = entryAreaLong + (LongValues * FinalTargetRR);
				
				#endregion
				
					#region Draw Lines / Text Long W/O Offset
				
					#region RR mode
				
				if (rrMode)
				{
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					
					
					Draw.HorizontalLine(this, ""EntryLine"", entryAreaLong, Brushes.Green);
					Draw.HorizontalLine(this, ""StopLine"", stopAreaLong, Brushes.Red);
					
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(entryAreaLong, 2) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round(stopAreaLong, 2) + (""(""+CandleLookBackStop+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + LongValues	
						+ ""\nRange(Ticks): "" + LongValues / TickSize
						+ ""\nPosition Size: "" + positionSize	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
				}
					
					#endregion
				
					#region Tick mode
				
				if (tickMode)
				{
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					
					
					Draw.HorizontalLine(this, ""EntryLine"", entryAreaLong, Brushes.Green);
					Draw.HorizontalLine(this, ""StopLine"", entryAreaLong - candleBarOffsetStop, Brushes.Red);
					
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(entryAreaLong, 2) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round(entryAreaLong - candleBarOffsetStop, 2) + (""(""+candleBarOffsetStop / TickSize+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + candleBarOffsetStop	
						+ ""\nRange(Ticks): "" + candleBarOffsetStop / TickSize
						+ ""\nPosition Size: "" + positionSize	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
				}
					
					#endregion
					
					#endregion
				
				}
				
				//Short Trades
				if (shortButtonHLClicked == true || shortButtonMarketClicked == true || shortLineButtonClicked == true || customShortClicked == true)
				{
				
					#region Position Size Short
				
				if (autoPositionSize)
				{
					riskOffset = MaxLossPerTrade / ( ( (ShortValues) / TickSize) * myDbl);
				}
				
				else if (customPositionSize)
				{
					riskOffset = CustomPositionAmount;
				}
				
				positionSize = (Convert.ToInt32(riskOffset));
				
				
					//Single Target
					if (dualTarget == false)
					{
						positionSize = (Convert.ToInt32(riskOffset));
						
						if (positionSize < 1)
						{
							positionSize = 1;
						}
					}
					
					//Dual Target
					if (dualTarget)
					{
						
					firstTargetPosition = (Convert.ToInt32(positionSize * splitPercent));
						
						if (firstTargetPosition < 1)
						{
							firstTargetPosition = 1;
						}
				
					secondTargetPosition = positionSize - firstTargetPosition; 
						
						if(secondTargetPosition < 1)
						{
							secondTargetPosition = 1;
						}	
					}
					
						#region Position Size Prints
						
						if (SystemPrint)
						{
							if (PositionSizePrints)
							{
								Print(""positionSize ""+ positionSize + "" "" + Time[0]);
								Print(""firstTargetPosition ""+ firstTargetPosition + "" "" + Time[0]);
								Print(""secondTargetPosition ""+ secondTargetPosition + "" "" + Time[0]);
							}
						}
						
						#endregion
						
					
					#endregion
					
					#region Set Stop/Profit Short		
					
				if (High[0] < stopAreaShort)
				{
					setStopShort = stopAreaShort;
				}
				
				else if (High[0] >= stopAreaShort)
				{
					setStopShort = High[0];
				}
				
				setFirstTarget = entryAreaShort - (ShortValues * FirstTargetRR);
				setFinalTarget = entryAreaShort - (ShortValues * FinalTargetRR);
				
				#endregion
				
					#region Draw Lines / Text Short W/O Offset
				
					#region RR mode
				
				if (rrMode)
				{
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					
					
					Draw.HorizontalLine(this, ""EntryLine"", entryAreaShort, Brushes.Green);
					Draw.HorizontalLine(this, ""StopLine"", stopAreaShort, Brushes.Red);
					
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(entryAreaShort, 2) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round(stopAreaShort, 2) + (""(""+CandleLookBackStop+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + ShortValues	
						+ ""\nRange(Ticks): "" + ShortValues / TickSize
						+ ""\nPosition Size: "" + positionSize	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
				}
				
					#endregion
				
					#region Tick mode
				
				if (tickMode)
				{
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					
					
					Draw.HorizontalLine(this, ""EntryLine"", entryAreaShort, Brushes.Green);
					Draw.HorizontalLine(this, ""StopLine"", entryAreaShort + candleBarOffsetStop, Brushes.Red);
					
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(entryAreaShort, 2) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round( entryAreaShort + candleBarOffsetStop, 2) + (""(""+candleBarOffsetStop / TickSize+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + candleBarOffsetStop	
						+ ""\nRange(Ticks): "" + candleBarOffsetStop / TickSize
						+ ""\nPosition Size: "" + positionSize	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
				}
				
					#endregion
				
					#endregion
				
				}
				
			}
			*/
			#endregion //Removed for now
			
				}
			
				if (CandleRange)
				{
					#region Entry Offset
	
			if (longButtonHLClicked == true || longButtonMarketClicked == true || longLineButtonClicked == true || (customLongClicked == true && enterClosePrice == false)
				|| shortButtonHLClicked == true || shortButtonMarketClicked == true || shortLineButtonClicked == true || (customShortClicked == true && enterClosePrice == false)
				)		
			{	
				//HL
				entryAreaLong		= MAX(High, CandleLookBackEntry)[1];
				entryAreaShort		= MIN(Low, CandleLookBackEntry)[1];
			}	
			
			if ((customLongClicked || customShortClicked) && enterClosePrice == true)
			{
				//Previous Close Price	
				entryAreaLong		= MAX(Close, CandleLookBackEntry)[1];
				entryAreaShort		= MAX(Close, CandleLookBackEntry)[1];
			}
			
			//Adds offset to your entry area. Gives user customization.
			percentageCalcEntry 	= ((entryAreaLong - entryAreaShort) * PercentageOffsetEntry);
			priceCalcEntry 			= PriceOffsetEntry;
			tickCalcEntry			= TickOffsetEntry * TickSize;
			
			//Picks the highest of the 3 numbers
			candleBarOffsetEntry = Math.Max(percentageCalcEntry, Math.Max(priceCalcEntry, tickCalcEntry));
			
			//Add both of them together to define final entry point
			enterLong = entryAreaLong + candleBarOffsetEntry;
			enterShort = entryAreaShort - candleBarOffsetEntry;
							
			
			#region Entry Prints
			
			if (SystemPrint)
			{
				if (EntryPrints)
				{
					Print(""entryAreaLong "" + entryAreaLong + "" "" + Time[1]);
					Print(""entryAreaShort "" + entryAreaShort + "" "" + Time[1]);
					
					Print(""percentageCalcEntry Range "" + percentageCalcEntry + "" "" + Time[1]);
					Print(""priceCalcEntry Range  "" + priceCalcEntry + "" "" + Time[1]);
					Print(""tickCalcEntry Range  "" + tickCalcEntry + "" "" + Time[1]);
					
					Print(""candleBarOffsetEntry Range "" + candleBarOffsetEntry + "" "" + Time[1]);
					
					Print(""enterLong  "" + enterLong + "" "" + Time[1]);
					Print(""enterShort ""  + enterShort + "" "" + Time[1]);
				}
			}
			#endregion
			
			#endregion
			
					#region Stop Offset
			
			//Define what area you will set a stop (If it is based on the chart)
			stopAreaLong		= MIN(Low, CandleLookBackStop)[1];
			stopAreaShort		= MAX(High, CandleLookBackStop)[1];
			
			//Adds offset to your stop area. Gives user customization.
			percentageCalcStop 		= ((stopAreaShort - stopAreaLong) * PercentageOffsetStop);
			priceCalcStop 			= PriceOffsetStop;
			tickCalcStop			= TickOffsetStop * TickSize;
			
			//Picks the highest of the 3 numbers
			candleBarOffsetStop = Math.Max(percentageCalcStop, Math.Max(priceCalcStop, tickCalcStop));
			
			//Add both of them together to define final stop point
			stopLong = stopAreaLong - candleBarOffsetStop;
			stopShort = stopAreaShort + candleBarOffsetStop;
			
			#region StopPrints
			
			if (SystemPrint)
			{
				if (StopPrints)
				{
					Print(""percentageCalcStop Range "" + percentageCalcStop + "" "" + Time[1]);
					Print(""priceCalcStop Range "" + priceCalcStop + "" "" + Time[1]);
					Print(""tickCalcStop Range "" + tickCalcStop + "" "" + Time[1]);
				
					Print(""candleBarOffsetStop Range "" + candleBarOffsetStop + "" "" + Time[1]);
					
					Print(""stopLong Range "" + stopLong + "" "" + Time[1]);
					Print(""stopShort Range "" + stopShort + "" "" + Time[1]);
				}
			}
			
			#endregion
			
			#endregion
			
					#region Breakeven Offset
			
			//Define what area you will set a breakeven (If it is based on the chart - Different from 'Actual Breakeven')
			breakevenAreaLong		= entryAreaLong;
			breakevenAreaShort		= entryAreaShort;
			
			//Adds offset to your breakeven area. Gives user customization.
			percentageCalcBreakeven 	= ((entryAreaLong - stopAreaLong) * PercentageOffsetBreakeven);
			priceCalcBreakeven 			= PriceOffsetBreakeven;
			tickCalcBreakeven			= TickOffsetBreakeven * TickSize;
			
			//Picks the highest of the 3 numbers
			candleBarOffsetBreakeven = Math.Max(percentageCalcBreakeven, Math.Max(priceCalcBreakeven, tickCalcBreakeven));
			
			#region BreakevenPrints
			
			if (SystemPrint)
			{
				if (BreakevenPrints)
				{
					Print(""percentageCalcBreakeven Range "" + percentageCalcBreakeven + "" "" + Time[1]);
					Print(""priceCalcBreakeven Range "" + priceCalcBreakeven + "" "" + Time[1]);
					Print(""tickCalcBreakeven Range "" + tickCalcBreakeven + "" "" + Time[1]);
				
					Print(""candleBarOffsetBreakeven Range "" + candleBarOffsetBreakeven + "" "" + Time[1]);
					
					Print(""breakevenLong Range "" + breakevenLong + "" "" + Time[1]);
					Print(""breakevenShort Range "" + breakevenShort + "" "" + Time[1]);
				}
			}
			
			#endregion
			
			#endregion
			
					#region Range Values
			
			LongValuesOffset 	= Math.Round(enterLong - stopLong, 4);
			ShortValuesOffset	= Math.Round(stopShort - enterShort, 4);
			
			LongValues 			= Math.Round(entryAreaLong - stopAreaLong, 4);
			ShortValues			= Math.Round(stopAreaShort - entryAreaShort, 4);
			/*
			LongValuesOffset 	= Math.Round(enterLong - stopLong, 2);
			ShortValuesOffset	= Math.Round(stopShort - enterShort, 2);
			
			LongValues 			= Math.Round(entryAreaLong - stopAreaLong, 2);
			ShortValues			= Math.Round(stopAreaShort - entryAreaShort, 2);
			
			///////////////////////////////////////////////////////
			LongValuesOffsetTickMode	= Math.Round(enterLong - (enterLong - candleBarOffsetStop), 2);
			ShortValuesOffsetTickMode	= Math.Round((enterShort + candleBarOffsetStop) - enterShort, 2);
			
			LongValuesTickMode			= Math.Round(entryAreaLong - (entryAreaLong - candleBarOffsetStop), 2);
			ShortValuesTickMode			= Math.Round((entryAreaShort + candleBarOffsetStop) - entryAreaShort, 2);
			
			
			Print(""LongValuesOffsetTickMode "" + LongValuesOffsetTickMode);		
			Print(""ShortValuesOffsetTickMode "" + ShortValuesOffsetTickMode);
			
			Print(""LongValuesTickMode "" + LongValuesTickMode);
			Print(""ShortValuesTickMode "" + ShortValuesTickMode);
		*/	
			#endregion
					
					#region Limit Entry Offset
			
			if (useLimit)
			{
				percentageCalcLimitLong		= LongValuesOffset * PercentageOffsetLimit;
				percentageCalcLimitShort	= ShortValuesOffset * PercentageOffsetLimit;
				priceCalcLimit				= PriceOffsetLimit;
				tickCalcLimit				= TickOffsetLimit * TickSize;
				
				limitOffsetLong				= Math.Max(percentageCalcLimitLong, Math.Max(priceCalcLimit, tickCalcLimit));	
				limitOffsetShort			= Math.Max(percentageCalcLimitShort, Math.Max(priceCalcLimit, tickCalcLimit));
				
				if (AddOffset)
				{
					limitPriceSetLong			= enterLong + limitOffsetLong;
					limitPriceSetShort			= enterShort - limitOffsetShort;
				}
				
				else if (AddOffset == false)
				{
					limitPriceSetLong			= entryAreaLong + limitOffsetLong;
					limitPriceSetShort			= entryAreaShort - limitOffsetShort;
				}
				
				#region Limit Prints
			
			if (SystemPrint)
			{
				if (LimitPrints)
				{
					Print(""percentageCalcLimitLong "" + percentageCalcLimitLong + "" "" + Time[0]);
					Print(""percentageCalcLimitShort "" + percentageCalcLimitShort + "" "" + Time[0]);
					Print(""priceCalcLimit "" + priceCalcLimit + "" "" + Time[0]);
					Print(""tickCalcLimit "" + tickCalcLimit + "" "" + Time[0]);
					
					Print(""limitOffsetLong "" + limitOffsetLong + "" "" + Time[0]);
					Print(""limitPriceSetShort "" + limitPriceSetShort + "" "" + Time[0]);
					
					Print(""limitPriceSetLong "" + limitPriceSetLong + "" "" + Time[0]);
					Print(""limitPriceSetShort "" + limitPriceSetShort + "" "" + Time[0]);
				}
			}
			#endregion
			}
				#endregion
			
					
					#region Offset Added Logic
			
			if (AddOffset) ///Update Prints
			{	
				//Long Trades
				if (longButtonHLClicked == true || longButtonMarketClicked == true || longLineButtonClicked == true || customLongClicked == true)
				{
						
					#region Position Size Long
				
				if (autoPositionSize)
				{
					if (rrMode)
					{
						riskOffset = MaxLossPerTrade / ( ( (LongValuesOffset) / TickSize) * myDbl);
					}
					
					if (tickMode)
					{
						riskOffset = MaxLossPerTrade / ( ( (candleBarOffsetStop) / TickSize) * myDbl);
					}
				}
				
				else if (customPositionSize)
				{
					riskOffset = CustomPositionAmount;
				}
				
				positionSizeLong = (Convert.ToInt32(riskOffset));
				
				
					//Single Target
					if (dualTarget == false)
					{
						positionSizeLong = (Convert.ToInt32(riskOffset));
						
						if (positionSizeLong < 1)
						{
							positionSizeLong = 1;
						}
					}
					
					//Dual Target
					if (dualTarget)
					{
						
					firstTargetPositionLong = (Convert.ToInt32(positionSizeLong * splitPercent));
						
						if (firstTargetPositionLong < 1)
						{
							firstTargetPositionLong = 1;
						}
				
					secondTargetPositionLong = positionSizeLong - firstTargetPositionLong; 
						
						if(secondTargetPositionLong < 1)
						{
							secondTargetPositionLong = 1;
						}	
					}
					
						#region Position Size Prints
						
						if (SystemPrint)
						{
							if (PositionSizePrints)
							{
								Print(""positionSizeLong ""+ positionSizeLong + "" "" + Time[0]);
								Print(""firstTargetPositionLong ""+ firstTargetPositionLong + "" "" + Time[0]);
								Print(""secondTargetPositionLong ""+ secondTargetPositionLong + "" "" + Time[0]);
							}
						}
						
						#endregion
						
					
					#endregion
				
					#region Set Stop/Profit Long
				
				if (Low[0] > stopLong)
				{
					setStopLong = stopLong;
					
					setFirstTargetLong = enterLong + (LongValuesOffset * FirstTargetRR);
					setFinalTargetLong = enterLong + (LongValuesOffset * FinalTargetRR);
				}
				
				else if (Low[0] <= stopLong)
				{
					setStopLong = Low[0] - candleBarOffsetStop;
					
					setFirstTargetLong = enterLong + ((enterLong - setStopLong) * FirstTargetRR);
					setFinalTargetLong = enterLong + ((enterLong - setStopLong) * FinalTargetRR);
				}
				
	
				#region Profit Target Long Prints
				
				if (SystemPrint)
				{
					if (ProfitTatgetPrints)
					{
						Print(""setStopLong ""+ setStopLong + "" "" + Time[0]);
						Print(""setFirstTargetLong ""+ setFirstTargetLong + "" "" + Time[0]);
						Print(""setFinalTargetLong ""+ setFinalTargetLong + "" "" + Time[0]);		
					}
				}
				
				#endregion
				
				#endregion
				
					#region Draw Lines / Text Long Offset
		
						#region RR mode
						
					if (rrMode)
					{
						RemoveDrawObject(""EntryLine"");
						RemoveDrawObject(""StopLine"");
					
						Draw.HorizontalLine(this, ""EntryLine"", enterLong, Brushes.Green);
						Draw.HorizontalLine(this, ""StopLine"", stopLong, Brushes.Red);
					
						if (DisplayText)
						{
							Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(enterLong, 4) + (""(""+CandleLookBackEntry+"")"")
							+ ""\nStop Line: "" + Math.Round(stopLong, 4) + (""(""+CandleLookBackStop+"")"")
							
							+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
							+ ""\nRange($): "" + LongValuesOffset
							+ ""\nRange(Ticks): "" + LongValuesOffset / TickSize
							+ ""\nPosition Size: "" + positionSizeLong	
						
							,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
						}
					}
						
						#endregion 
					
						#region Tick Mode
					
					if (tickMode)
					{
						RemoveDrawObject(""EntryLine"");
						RemoveDrawObject(""StopLine"");
					
						Draw.HorizontalLine(this, ""EntryLine"", enterLong, Brushes.Green);
						Draw.HorizontalLine(this, ""StopLine"", enterLong - candleBarOffsetStop, Brushes.Red);
					
						if (DisplayText)
						{
							Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(enterLong, 4) + (""(""+CandleLookBackEntry+"")"")
							+ ""\nStop Line: "" + Math.Round(enterLong - candleBarOffsetStop, 4) + (""(""+candleBarOffsetStop / TickSize+"")"")
							
							+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
							+ ""\nRange($): "" + candleBarOffsetStop
							+ ""\nRange(Ticks): "" + candleBarOffsetStop / TickSize
							+ ""\nPosition Size: "" + positionSizeLong	
						
							,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
						}
					}
				
					#endregion
					
					#endregion
										
				}
				
				
				//Short Trades
				if (shortButtonHLClicked == true || shortButtonMarketClicked == true || shortLineButtonClicked == true || customShortClicked == true)
				{
				
					#region Position Size Short
				
				if (autoPositionSize)
				{
					if (rrMode)
					{
						riskOffset = MaxLossPerTrade / ( ( (ShortValuesOffset) / TickSize) * myDbl);
					}
					
					if (tickMode)
					{
						riskOffset = MaxLossPerTrade / ( ( (candleBarOffsetStop) / TickSize) * myDbl);
					}
				}
				
				else if (customPositionSize)
				{
					riskOffset = CustomPositionAmount;
				}
				
				positionSizeShort = (Convert.ToInt32(riskOffset));
				
				
					//Single Target
					if (dualTarget == false)
					{
						positionSizeShort = (Convert.ToInt32(riskOffset));
						
						if (positionSizeShort < 1)
						{
							positionSizeShort = 1;
						}
					}
					
					//Dual Target
					if (dualTarget)
					{
						
					firstTargetPositionShort = (Convert.ToInt32(positionSizeShort * splitPercent));
						
						if (firstTargetPositionShort < 1)
						{
							firstTargetPositionShort = 1;
						}
				
					secondTargetPositionShort = positionSizeShort - firstTargetPositionShort; 
						
						if(secondTargetPositionShort < 1)
						{
							secondTargetPositionShort = 1;
						}	
					}
					
						#region Position Size Prints
						
						if (SystemPrint)
						{
							if (PositionSizePrints)
							{
								Print(""positionSizeShort ""+ positionSizeShort + "" "" + Time[0]);
								Print(""firstTargetPositionShort ""+ firstTargetPositionShort + "" "" + Time[0]);
								Print(""secondTargetPositionShort ""+ secondTargetPositionShort + "" "" + Time[0]);
							}
						}
						
						#endregion
						
					
					#endregion
				
					#region Set Stop/Profit Short
				
				if (High[0] < stopShort)
				{
					setStopShort = stopShort;
				
					setFirstTargetShort = enterShort - (ShortValuesOffset * FirstTargetRR);
					setFinalTargetShort = enterShort - (ShortValuesOffset * FinalTargetRR);
				}
				
				else if (High[0] >= stopShort)
				{
					setStopShort = High[0] + candleBarOffsetStop;
					
					setFirstTargetShort = enterShort - ((setStopShort - enterShort) * FirstTargetRR);
					setFinalTargetShort = enterShort - ((setStopShort - enterShort) * FinalTargetRR);
				}
				
				
				#region Profit Target Prints
						
						if (SystemPrint)
						{
							if (ProfitTatgetPrints)
							{
								Print(""setStopShort ""+ setStopLong + "" "" + Time[0]);
								Print(""setFirstTargetShort ""+ setFirstTargetShort + "" "" + Time[0]);
								Print(""setFinalTargetShort ""+ setFinalTargetShort + "" "" + Time[0]);
							}
						}
						
						#endregion
				
				#endregion
					
					#region Draw Lines / Text Short Offset
				
						#region RR Mode
						
				if (rrMode)
				{
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					
					
					Draw.HorizontalLine(this, ""EntryLine"", enterShort, Brushes.Green);
					Draw.HorizontalLine(this, ""StopLine"", stopShort, Brushes.Red);
					
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(enterShort, 4) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round(stopShort, 4) + (""(""+CandleLookBackStop+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + ShortValuesOffset
						+ ""\nRange(Ticks): "" + ShortValuesOffset / TickSize
						+ ""\nPosition Size: "" + positionSizeShort	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
					
				}
						
					#endregion
					
						#region Tick Mode
						
				if (tickMode)
				{
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					
					
					Draw.HorizontalLine(this, ""EntryLine"", enterShort, Brushes.Green);
					Draw.HorizontalLine(this, ""StopLine"", enterShort + candleBarOffsetStop, Brushes.Red);
					
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(enterShort, 4) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round(enterShort + candleBarOffsetStop, 4) + (""(""+candleBarOffsetStop / TickSize+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + candleBarOffsetStop
						+ ""\nRange(Ticks): "" + candleBarOffsetStop / TickSize
						+ ""\nPosition Size: "" + positionSizeShort	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
					
				}
						
					#endregion
					
				#endregion
				
				}
			}
			
			#endregion	
			
					#region W/O Offset 
			/* Removed for simplicity of use
			if (AddOffset == false)
			{	
				//Long Trades
				if (longButtonHLClicked == true || longButtonMarketClicked == true || longLineButtonClicked == true || customLongClicked == true)
				{
				
					#region Position Size Long
				
				if (autoPositionSize)
				{
					riskOffset = MaxLossPerTrade / ( ( (LongValues) / TickSize) * myDbl);
				}
				
				else if (customPositionSize)
				{
					riskOffset = CustomPositionAmount;
				}
				
				positionSize = (Convert.ToInt32(riskOffset));
				
				
					//Single Target
					if (dualTarget == false)
					{
						positionSize = (Convert.ToInt32(riskOffset));
						
						if (positionSize < 1)
						{
							positionSize = 1;
						}
					}
					
					//Dual Target
					if (dualTarget)
					{
						
					firstTargetPosition = (Convert.ToInt32(positionSize * splitPercent));
						
						if (firstTargetPosition < 1)
						{
							firstTargetPosition = 1;
						}
				
					secondTargetPosition = positionSize - firstTargetPosition; 
						
						if(secondTargetPosition < 1)
						{
							secondTargetPosition = 1;
						}	
					}
					
						#region Position Size Prints
						
						if (SystemPrint)
						{
							if (PositionSizePrints)
							{
								Print(""positionSize ""+ positionSize + "" "" + Time[0]);
								Print(""firstTargetPosition ""+ firstTargetPosition + "" "" + Time[0]);
								Print(""secondTargetPosition ""+ secondTargetPosition + "" "" + Time[0]);
							}
						}
						
						#endregion
						
					
					
				
					#endregion
					
					#region Set Stop/Profit Long		
					
				if (Low[0] > stopAreaLong)
				{
					setStopLong = stopAreaLong;
				}
				
				else if (Low[0] <= stopAreaLong)
				{
					setStopLong = Low[0];
				}
				
				setFirstTarget = entryAreaLong + (LongValues * FirstTargetRR);
				setFinalTarget = entryAreaLong + (LongValues * FinalTargetRR);
				
				#endregion
				
					#region Draw Lines / Text Long W/O Offset
				
					#region RR mode
				
				if (rrMode)
				{
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					
					
					Draw.HorizontalLine(this, ""EntryLine"", entryAreaLong, Brushes.Green);
					Draw.HorizontalLine(this, ""StopLine"", stopAreaLong, Brushes.Red);
					
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(entryAreaLong, 2) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round(stopAreaLong, 2) + (""(""+CandleLookBackStop+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + LongValues	
						+ ""\nRange(Ticks): "" + LongValues / TickSize
						+ ""\nPosition Size: "" + positionSize	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
				}
					
					#endregion
				
					#region Tick mode
				
				if (tickMode)
				{
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					
					
					Draw.HorizontalLine(this, ""EntryLine"", entryAreaLong, Brushes.Green);
					Draw.HorizontalLine(this, ""StopLine"", entryAreaLong - candleBarOffsetStop, Brushes.Red);
					
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(entryAreaLong, 2) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round(entryAreaLong - candleBarOffsetStop, 2) + (""(""+candleBarOffsetStop / TickSize+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + candleBarOffsetStop	
						+ ""\nRange(Ticks): "" + candleBarOffsetStop / TickSize
						+ ""\nPosition Size: "" + positionSize	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
				}
					
					#endregion
					
					#endregion
				
				}
				
				//Short Trades
				if (shortButtonHLClicked == true || shortButtonMarketClicked == true || shortLineButtonClicked == true || customShortClicked == true)
				{
				
					#region Position Size Short
				
				if (autoPositionSize)
				{
					riskOffset = MaxLossPerTrade / ( ( (ShortValues) / TickSize) * myDbl);
				}
				
				else if (customPositionSize)
				{
					riskOffset = CustomPositionAmount;
				}
				
				positionSize = (Convert.ToInt32(riskOffset));
				
				
					//Single Target
					if (dualTarget == false)
					{
						positionSize = (Convert.ToInt32(riskOffset));
						
						if (positionSize < 1)
						{
							positionSize = 1;
						}
					}
					
					//Dual Target
					if (dualTarget)
					{
						
					firstTargetPosition = (Convert.ToInt32(positionSize * splitPercent));
						
						if (firstTargetPosition < 1)
						{
							firstTargetPosition = 1;
						}
				
					secondTargetPosition = positionSize - firstTargetPosition; 
						
						if(secondTargetPosition < 1)
						{
							secondTargetPosition = 1;
						}	
					}
					
						#region Position Size Prints
						
						if (SystemPrint)
						{
							if (PositionSizePrints)
							{
								Print(""positionSize ""+ positionSize + "" "" + Time[0]);
								Print(""firstTargetPosition ""+ firstTargetPosition + "" "" + Time[0]);
								Print(""secondTargetPosition ""+ secondTargetPosition + "" "" + Time[0]);
							}
						}
						
						#endregion
						
					
					#endregion
					
					#region Set Stop/Profit Short		
					
				if (High[0] < stopAreaShort)
				{
					setStopShort = stopAreaShort;
				}
				
				else if (High[0] >= stopAreaShort)
				{
					setStopShort = High[0];
				}
				
				setFirstTarget = entryAreaShort - (ShortValues * FirstTargetRR);
				setFinalTarget = entryAreaShort - (ShortValues * FinalTargetRR);
				
				#endregion
				
					#region Draw Lines / Text Short W/O Offset
				
					#region RR mode
				
				if (rrMode)
				{
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					
					
					Draw.HorizontalLine(this, ""EntryLine"", entryAreaShort, Brushes.Green);
					Draw.HorizontalLine(this, ""StopLine"", stopAreaShort, Brushes.Red);
					
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(entryAreaShort, 2) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round(stopAreaShort, 2) + (""(""+CandleLookBackStop+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + ShortValues	
						+ ""\nRange(Ticks): "" + ShortValues / TickSize
						+ ""\nPosition Size: "" + positionSize	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
				}
				
					#endregion
				
					#region Tick mode
				
				if (tickMode)
				{
					RemoveDrawObject(""EntryLine"");
					RemoveDrawObject(""StopLine"");
					
					
					Draw.HorizontalLine(this, ""EntryLine"", entryAreaShort, Brushes.Green);
					Draw.HorizontalLine(this, ""StopLine"", entryAreaShort + candleBarOffsetStop, Brushes.Red);
					
					if (DisplayText)
					{
						Draw.TextFixed(this, ""TextBox"", ""Entry Line: "" + Math.Round(entryAreaShort, 2) + (""(""+CandleLookBackEntry+"")"")
						+ ""\nStop Line: "" + Math.Round( entryAreaShort + candleBarOffsetStop, 2) + (""(""+candleBarOffsetStop / TickSize+"")"")
							
						+ ""\n\nMax Loss($): "" + MaxLossPerTrade	
						+ ""\nRange($): "" + candleBarOffsetStop	
						+ ""\nRange(Ticks): "" + candleBarOffsetStop / TickSize
						+ ""\nPosition Size: "" + positionSize	
						
						,TextPosition.BottomLeft, Brushes.White, new Gui.Tools.SimpleFont(""Arial"", 25), Brushes.Gold, Brushes.Black, 100);
					}
				}
				
					#endregion
				
					#endregion
				
				}
				
			}
			*/
			#endregion //Removed for now
			
				}
			
				//ChartControl.Dispatcher.InvokeAsync((Action)(() =>
					//{
						//NinjaTrader.Gui.Tools.QuantityUpDown quantitySelector = (Window.GetWindow(ChartControl.Parent).FindFirst(""ChartTraderControlQuantitySelector"") as NinjaTrader.Gui.Tools.QuantityUpDown);

						//quantitySelector.Value = positionSize;
					//}));
				
				#region Arm Market Order (Unlocked Lines) //Ensures Stop and Position size are calculated before triggering
				
				if ((customLongClicked || customShortClicked) && armMarket == true && enterClosePrice == false)
					{
						armMarketCount ++;
						Print(armMarketCount);
					}
					
				if ((customLongClicked || customShortClicked)  && enterClosePrice == false && armMarketCount > 1) //&& armMarket == true)	
					{
						activateMarket = true;
						Print(""activateMarket Calcs "" + activateMarket);
						Print(armMarketCount);
					}
					
				if ((customLongClicked || customShortClicked) && armMarket == true && enterClosePrice == false && armMarketCount < 1) 
				{
					armMarketCount = 1;
				}

				#endregion
						
				countOnce = false;
			}
			
				#region Arm Market Order (Locked Lines) //Stop and Position Size are already calculated
			
			if (IsFirstTickOfBar)
			{	
				if (unlockButtonClicked && (customLongClicked || customShortClicked) && enterClosePrice == false)//armMarket == true && )
				{
					activateMarket = true;
					Print(""activateMarket Calcs Locked "" + activateMarket);
				}
			}
			
			#endregion
			
			if (unlockButtonClicked == false)
			{
				if (IsFirstTickOfBar)
				{
					countOnce = true;
				}
			}
			
			if (IsFirstTickOfBar || (trailButtonClicked && IsFirstTickOfBar))
			{
				#region Trail Stop new bar Update
				
				//If the strategy is in a position. This allows the trail stop to keep making calculations and continue moving every new candle
				if (Position.MarketPosition != MarketPosition.Flat)
				{
					myFreeCandleTrail = true;
					
					if (SystemPrint)
					{
						if (TrailPrints)
						{
							Print(""myFree Trail First Tick "" + myFreeCandleTrail + "" "" + Time[1]);
						}
					}
				}

				#endregion
			}
			
			if ((IsFirstTickOfBar) && (isFib == true))
			{
				fibCount ++;
			}
			
			
			/// Entries
		
			#region H/L Long
			
			if (
				(longButtonHLClicked == true)
					&& (customLongClicked == false)
						&& (Position.MarketPosition == MarketPosition.Flat)
							&& (Close[0] >= enterLong)
								&& (myFreeLimit)
				)
			{
				#region No Limit
				//Enters With a Market Order After Entry Price has been crossed (Essentially a Stop Market Order)
				if (useLimit == false)
				{
					if (dualTarget == false)
					{
						EnterLong(positionSizeLong, ""MyEntryLong"");
					}
					
					else if (dualTarget)
					{
						EnterLong(firstTargetPositionLong, ""MyEntryLong"");	
						
						EnterLong(secondTargetPositionLong, ""MyEntryLong2"");
					}
				}
				
				#endregion
				
				#region Use Limits
				//Enters With Limit Orders After Entry Price has been crossed (Essentially a Stop Limit Order)
				if (useLimit)
				{
					if (dualTarget == false)
					{
						EnterLongLimit(positionSizeLong, limitPriceSetLong, ""MyEntryLong"");
					}
					
					else if (dualTarget)
					{
						EnterLongLimit(firstTargetPositionLong, limitPriceSetLong, ""MyEntryLong"");
						
						EnterLongLimit(secondTargetPositionLong, limitPriceSetLong, ""MyEntryLong2"");
					}
				}
				
				#endregion
				
				isFib 					= true;
				myFreeTrade			 	= true;
				longButtonHLClicked 	= false;
			}
			
			#endregion
			
			#region H/L Short
			
			if (
				(shortButtonHLClicked == true)
					&& (customLongClicked == false)
						&& (Position.MarketPosition == MarketPosition.Flat)
							&& (Close[0] <= enterShort)
								&& (myFreeLimit)
				)
			{
				#region No Limit
				//Enters With a Market Order After Entry Price has been crossed (Essentially a Stop Market Order)
				if (useLimit == false)
				{
					if (dualTarget == false)
					{
						EnterShort(positionSizeShort, ""MyEntryShort"");
					}
					
					else if (dualTarget)
					{
						EnterShort(firstTargetPositionShort, ""MyEntryShort"");	
						
						EnterShort(secondTargetPositionShort, ""MyEntryShort2"");
					}
				}
				
				#endregion
				
				#region Use Limits
				//Enters With Limit Orders After Entry Price has been crossed (Essentially a Stop Limit Order)
				if (useLimit)
				{
					if (dualTarget == false)
					{
						EnterShortLimit(positionSizeShort, limitPriceSetShort, ""MyEntryShort"");
					}
					
					else if (dualTarget)
					{
						EnterShortLimit(firstTargetPositionShort, limitPriceSetShort, ""MyEntryShort"");
						
						EnterShortLimit(secondTargetPositionShort, limitPriceSetShort, ""MyEntryShort2"");
					}
				}
				
				#endregion
				
				isFib 					= true;
				myFreeTrade 			= true;
				shortButtonHLClicked	= false;
			}
			
			#endregion
			
			
			#region Market Long
			
			if (
				(longButtonMarketClicked == true)
					&& (Position.MarketPosition == MarketPosition.Flat)
				)
			{
				#region Market Long Entry
				
					if (dualTarget == false)
					{
						EnterLong(positionSizeLong, ""MyEntryLong"");
					}
					
					else if (dualTarget)
					{
						EnterLong(firstTargetPositionLong, ""MyEntryLong"");	
						
						EnterLong(secondTargetPositionLong, ""MyEntryLong2"");
					}
					
				#endregion
					
				isFib 					= true;	
				myFreeTrade 			= true;
				longButtonMarketClicked = false;
					
			}
			
			#endregion
			
			#region Market Short
			
			if (
				(shortButtonMarketClicked == true)
					&& (Position.MarketPosition == MarketPosition.Flat)
				)
			{
				#region Market Short Entry
				
					if (dualTarget == false)
					{
						EnterShort(positionSizeShort, ""MyEntryShort"");
					}
					
					else if (dualTarget)
					{
						EnterShort(firstTargetPositionShort, ""MyEntryShort"");	
						
						EnterShort(secondTargetPositionShort, ""MyEntryShort2"");
					}
					
				#endregion
				
				isFib 						= true;	
				myFreeTrade 				= true;
				shortButtonMarketClicked	= false;		
			}
			
			#endregion
			
			
			#region Close Long
			
			if (
				(customLongClicked == true)
					&& (armMarket == false)
						&& (Position.MarketPosition == MarketPosition.Flat)
							&& (Close[0] >= enterLong)
								&& (myFreeLimit)
				)
			{
				#region No Limit
				//Enters With a Market Order After Entry Price has been crossed (Essentially a Stop Market Order)
				if (useLimit == false)
				{
					if (dualTarget == false)
					{
						EnterLong(positionSizeLong, ""MyEntryLong"");
					}
					
					else if (dualTarget)
					{
						EnterLong(firstTargetPositionLong, ""MyEntryLong"");	
						
						EnterLong(secondTargetPositionLong, ""MyEntryLong2"");
					}
				}
				
				#endregion
				
				#region Use Limits
				//Enters With Limit Orders After Entry Price has been crossed (Essentially a Stop Limit Order)
				if (useLimit)
				{
					if (dualTarget == false)
					{
						EnterLongLimit(positionSizeLong, limitPriceSetLong, ""MyEntryLong"");
					}
					
					else if (dualTarget)
					{
						EnterLongLimit(firstTargetPositionLong, limitPriceSetLong, ""MyEntryLong"");
						
						EnterLongLimit(secondTargetPositionLong, limitPriceSetLong, ""MyEntryLong2"");
					}
				}
				
				#endregion
				
				isFib 					= true;
				myFreeTrade 			= true;
				customLongClicked 		= false;
			}
			
			#endregion
			
			#region Close Short
			
			if (
				(customShortClicked == true)
					&& (armMarket == false)
						&& (Position.MarketPosition == MarketPosition.Flat)
							&& (Close[0] <= enterShort)
								&& (myFreeLimit)
				)
			{
				#region No Limit
				//Enters With a Market Order After Entry Price has been crossed (Essentially a Stop Market Order)
				if (useLimit == false)
				{
					if (dualTarget == false)
					{
						EnterShort(positionSizeShort, ""MyEntryShort"");
					}
					
					else if (dualTarget)
					{
						EnterShort(firstTargetPositionShort, ""MyEntryShort"");	
						
						EnterShort(secondTargetPositionShort, ""MyEntryShort2"");
					}
				}
				
				#endregion
				
				#region Use Limits
				//Enters With Limit Orders After Entry Price has been crossed (Essentially a Stop Limit Order)
				if (useLimit)
				{
					if (dualTarget == false)
					{
						EnterShortLimit(positionSizeShort, limitPriceSetShort, ""MyEntryShort"");
					}
					
					else if (dualTarget)
					{
						EnterShortLimit(firstTargetPositionShort, limitPriceSetShort, ""MyEntryShort"");
						
						EnterShortLimit(secondTargetPositionShort, limitPriceSetShort, ""MyEntryShort2"");
					}
				}
				
				#endregion
				
				isFib 					= true;
				myFreeTrade 			= true;
				customShortClicked 		= false;
			}
			
			#endregion
			
			
			if (activateMarket == true)
			{
			
			#region Arm Market Long
			
			if (
				(customLongClicked == true)
					&& (armMarket)
				)
			{
				#region Arm Market Long Entry
				
					if (dualTarget == false)
					{
						EnterLong(positionSizeLong, ""MyEntryLong"");
					}
					
					else if (dualTarget)
					{
						EnterLong(firstTargetPositionLong, ""MyEntryLong"");	
						
						EnterLong(secondTargetPositionLong, ""MyEntryLong2"");
					}
					
				#endregion
				
				isFib 					= true;	
				myFreeTrade 			= true;
				customLongClicked 		= false;
						
			}
			
			#endregion
			
			#region Arm Market Short
			
			if (
				(customShortClicked == true)
					&& (armMarket)
				)
			{
				#region Arm Market Short Entry
				
					if (dualTarget == false)
					{
						EnterShort(positionSizeShort, ""MyEntryShort"");
					}
					
					else if (dualTarget)
					{
						EnterShort(firstTargetPositionShort, ""MyEntryShort"");	
						
						EnterShort(secondTargetPositionShort, ""MyEntryShort2"");
					}
				
				#endregion
					
				isFib 					= true;	
				myFreeTrade 			= true;
				customShortClicked 		= false;
	
			}
			
			#endregion
			
			}
			
			
			///Set Stop/Profit/ Management Targets
			if (rrMode)
			{
				//Long
				#region Filled Long Position	
			
				#region Stop/Profits			
			
				if (Position.MarketPosition == MarketPosition.Long && myFreeTrade == true && Position.Quantity == positionSizeLong)
				{
					if (dualTarget == false)
					{
						if (stopLoss)
						{
							ExitLongStopMarket(0, true, Position.Quantity, setStopLong, ""MyStopLong"", ""MyEntryLong"");
						}
						
						if (profitTarget)
						{
							ExitLongLimit(0, true, Position.Quantity, setFinalTargetLong, ""MyTargetLong"", ""MyEntryLong"");
						}
					}
				
				if (dualTarget)
				{
					if(stopLoss)
					{
						ExitLongStopMarket(0, true, Position.Quantity, setStopLong, ""MyStopLong"", ""MyEntryLong"");
						ExitLongStopMarket(0, true, Position.Quantity, setStopLong, ""MyStopLong2"", ""MyEntryLong2"");
					}
					
					if(profitTarget)
					{
						ExitLongLimit(0, true, Position.Quantity, setFirstTargetLong, ""MyTargetLong"", ""MyEntryLong"");
						ExitLongLimit(0, true, Position.Quantity, setFinalTargetLong, ""MyTargetLong2"", ""MyEntryLong2"");
					}	
				}
				
				#endregion
				
				#region Management Targets
				
				//Breakeven Area
				breakevenAreaTrigger = enterLong + (enterLong - stopLong) * breakevenAreaTarget;
				breakevenAreaStopSet = breakevenAreaLong - candleBarOffsetBreakeven;
			
				if (breakevenAreaSetAuto)
				{
					myFreeBEArea = true;
				}
				
				//Breakeven Actual
				breakevenActualTrigger = enterLong + (enterLong - stopLong) * breakevenActualTarget;
				breakevenActualStopSet = Position.AveragePrice - candleBarOffsetBreakeven;
				
				if (breakevenActualSetAuto)
				{
					myFreeBEActual = true;
				}
				
				//Candle Trail Stop
				candleTrailTrigger = enterLong + (enterLong - stopLong) * candleTrailTarget;
				//candleTrailStopSet = Low[1]; We set the stop later for new candle.
				
				if (candleTrailSetAuto)
				{
					myFreeCandleTrail = true;
					activeTrail = true;
				}
				
				#endregion
				
				#region Management Prints
				
				if (SystemPrint)
				{
					#region Breakeven
					
					if (BreakevenPrints)
					{
						Print(""breakeven(Area)Trigger "" + breakevenAreaTrigger + "" "" +  Time[1]);
						Print(""breakeven(Area)StopSet "" + breakevenAreaStopSet + "" "" + Time[1]);
						Print(""myFreeBE(Area) "" + myFreeBEArea + "" "" + Time[1]);
						
						Print(""breakeven(Actual)Trigger "" + breakevenActualTrigger + "" "" +  Time[1]);
						Print(""breakeven(Actual)StopSet "" + breakevenActualStopSet + "" "" + Time[1]);
						Print(""myFreeBE(Actual) "" + myFreeBEActual + "" "" + Time[1]);
					}
					
					#endregion
				}
				
				#endregion
				
				myFreeTrade = false;
				
				myFillCheck = true;
			}
				
			#endregion
				
				#region Partial Fill Long Position
			
				#region Stop/Profits
				
			if (Position.MarketPosition == MarketPosition.Long && myFreeTrade == true && Position.Quantity < positionSizeLong && IsFirstTickOfBar)
			{
				if (dualTarget == false)
					{
						if (stopLoss)
						{
							ExitLongStopMarket(0, true, Position.Quantity, setStopLong, ""MyStopLong"", ""MyEntryLong""); 
						}
						
						if (profitTarget)
						{
							ExitLongLimit(0, true, Position.Quantity, setFinalTargetLong, ""MyTargetLong"", ""MyEntryLong"");
						}
					}
				
				if (dualTarget)
				{
					if(stopLoss)
					{
						ExitLongStopMarket(0, true, Position.Quantity, setStopLong, ""MyStopLong"", ""MyEntryLong"");
						ExitLongStopMarket(0, true, Position.Quantity, setStopLong, ""MyStopLong2"", ""MyEntryLong2"");
					}
					
					if(profitTarget)
					{
						ExitLongLimit(0, true, Position.Quantity, setFirstTargetLong, ""MyTargetLong"", ""MyEntryLong"");
						ExitLongLimit(0, true, Position.Quantity, setFinalTargetLong, ""MyTargetLong2"", ""MyEntryLong2"");
					}	
				}
				
				#endregion
				
				#region Management Targets
				
				//Breakeven Area
				breakevenAreaTrigger = enterLong + (enterLong - stopLong) * breakevenAreaTarget;
				breakevenAreaStopSet = breakevenAreaLong - candleBarOffsetBreakeven;
			
				if (breakevenAreaSetAuto)
				{
					myFreeBEArea = true;
				}
				
				//Breakeven Actual
				breakevenActualTrigger = enterLong + (enterLong - stopLong) * breakevenActualTarget;
				breakevenActualStopSet = Position.AveragePrice - candleBarOffsetBreakeven;
				
				if (breakevenActualSetAuto)
				{
					myFreeBEActual = true;
				}
				
				//Candle Trail Stop
				candleTrailTrigger = enterLong + (enterLong - stopLong) * candleTrailTarget;
				//candleTrailStopSet = Low[1]; We set the stop later for new candle.
				
				if (candleTrailSetAuto)
				{
					myFreeCandleTrail = true;
					activeTrail = true;
				}
				
				#endregion
				
				#region Management Prints
				
				if (SystemPrint)
				{
					#region Breakeven
					
					if (BreakevenPrints)
					{
						Print(""breakevenAreaTrigger "" + breakevenAreaTrigger + "" "" +  Time[1]);
						Print(""breakevenAreaStopSet "" + breakevenAreaStopSet + "" "" + Time[1]);
						Print(""myFreeBEArea "" + myFreeBEArea + "" "" + Time[1]);
					}
					
					#endregion
				}
				
				#endregion
				
				myFreeTrade = false;
			}
			
			#endregion
			

				//Short 
				#region Filled Short Position	
			
				#region Stop/Profits
			
				if (Position.MarketPosition == MarketPosition.Short && myFreeTrade == true && Position.Quantity == positionSizeShort)
				{
					if (dualTarget == false)
					{
						if (stopLoss)
						{
							ExitShortStopMarket(0, true, Position.Quantity, setStopShort, ""MyStopShort"", ""MyEntryShort"");
						}
						
						if (profitTarget)
						{
							ExitShortLimit(0, true, Position.Quantity, setFinalTargetShort, ""MyTargetShort"", ""MyEntryShort"");
						}
					}
				
				if (dualTarget)
				{
					if(stopLoss)
					{
						ExitShortStopMarket(0, true, Position.Quantity, setStopShort, ""MyStopShort"", ""MyEntryShort"");
						ExitShortStopMarket(0, true, Position.Quantity, setStopShort, ""MyStopShort2"", ""MyEntryShort2"");
					}
					
					if(profitTarget)
					{
						ExitShortLimit(0, true, Position.Quantity, setFirstTargetShort, ""MyTargetShort"", ""MyEntryShort"");
						ExitShortLimit(0, true, Position.Quantity, setFinalTargetShort, ""MyTargetShort2"", ""MyEntryShort2"");
					}	
				}
				
				#endregion
				
				#region Management Targets
				
				//Breakeven Area
				breakevenAreaTrigger = enterShort - (stopShort - enterShort) * breakevenAreaTarget;
				breakevenAreaStopSet = breakevenAreaShort + candleBarOffsetBreakeven;
			
				if (breakevenAreaSetAuto)
				{
					myFreeBEArea = true;
				}
				
				//Breakeven Actual
				breakevenActualTrigger = enterShort - (stopShort - enterShort) * breakevenActualTarget;
				breakevenActualStopSet = Position.AveragePrice + candleBarOffsetBreakeven;
				
				if (breakevenActualSetAuto)
				{
					myFreeBEActual = true;
				}
				
				//Candle Trail Stop
				candleTrailTrigger = enterShort - (stopShort - enterShort) * candleTrailTarget;
				
				
				if (candleTrailSetAuto)
				{
					myFreeCandleTrail = true;
					activeTrail = true;
				}
				
				#endregion
				
				#region Management Prints
				
				if (SystemPrint)
				{
					#region Breakeven
					
					if (BreakevenPrints)
					{
						Print(""breakeven(Area)Trigger "" + breakevenAreaTrigger + "" "" +  Time[1]);
						Print(""breakeven(Area)StopSet "" + breakevenAreaStopSet + "" "" + Time[1]);
						Print(""myFreeBE(Area) "" + myFreeBEArea + "" "" + Time[1]);
						
						Print(""breakeven(Actual)Trigger "" + breakevenActualTrigger + "" "" +  Time[1]);
						Print(""breakeven(Actual)StopSet "" + breakevenActualStopSet + "" "" + Time[1]);
						Print(""myFreeBE(Actual) "" + myFreeBEActual + "" "" + Time[1]);
					}
					
					#endregion
				}
				
				#endregion
				
				myFreeTrade = false;
				
				myFillCheck = true;
			}
				
			#endregion
				
				#region Partial Fill Short Position
				
				#region Stop/Profits
				
			if (Position.MarketPosition == MarketPosition.Short && myFreeTrade == true && Position.Quantity < positionSizeShort && IsFirstTickOfBar)
			{
				if (dualTarget == false)
					{
						if (stopLoss)
						{
							ExitShortStopMarket(0, true, Position.Quantity, setStopShort, ""MyStopShort"", ""MyEntryShort""); 
						}
						
						if (profitTarget)
						{
							ExitShortLimit(0, true, Position.Quantity, setFinalTargetShort, ""MyTargetShort"", ""MyEntryShort"");
						}
					}
				
				if (dualTarget)
				{
					//positionSizeShort = myPosition;
					
					if(stopLoss)
					{		
						ExitShortStopMarket(0, true, Position.Quantity, setStopShort, ""MyStopShort"", ""MyEntryShort"");
						ExitShortStopMarket(0, true, Position.Quantity, setStopShort, ""MyStopShort2"", ""MyEntryShort2"");
						
						Print(""after Fill: "" + Position.Quantity);
					}
					
					if(profitTarget)
					{
						ExitShortLimit(0, true, Position.Quantity, setFirstTargetShort, ""MyTargetShort"", ""MyEntryShort"");
						ExitShortLimit(0, true, Position.Quantity, setFinalTargetShort, ""MyTargetShort2"", ""MyEntryShort2"");
					}	
				}
				
				#endregion
				
				#region Management Targets
				
				//Breakeven Area
				breakevenAreaTrigger = enterShort - (stopShort - enterShort) * breakevenAreaTarget;
				breakevenAreaStopSet = breakevenAreaShort + candleBarOffsetBreakeven;
			
				if (breakevenAreaSetAuto)
				{
					myFreeBEArea = true;
				}
				
				//Breakeven Actual
				breakevenActualTrigger = enterShort - (stopShort - enterShort) * breakevenActualTarget;
				breakevenActualStopSet = Position.AveragePrice + candleBarOffsetBreakeven;
				
				if (breakevenActualSetAuto)
				{
					myFreeBEActual = true;
				}
				
				//Candle Trail Stop
				candleTrailTrigger = enterShort - (stopShort - enterShort) * candleTrailTarget;
				//candleTrailStopSet = Low[1]; We set the stop later for new candle.
				
				if (candleTrailSetAuto)
				{
					myFreeCandleTrail = true;
					activeTrail = true;
				}
				
				#endregion
				
				#region Management Prints
				
				if (SystemPrint)
				{
					#region Breakeven
					
					if (BreakevenPrints)
					{
						Print(""breakeven(Area)Trigger "" + breakevenAreaTrigger + "" "" +  Time[1]);
						Print(""breakeven(Area)StopSet "" + breakevenAreaStopSet + "" "" + Time[1]);
						Print(""myFreeBE(Area) "" + myFreeBEArea + "" "" + Time[1]);
						
						Print(""breakeven(Actual)Trigger "" + breakevenActualTrigger + "" "" +  Time[1]);
						Print(""breakeven(Actual)StopSet "" + breakevenActualStopSet + "" "" + Time[1]);
						Print(""myFreeBE(Actual) "" + myFreeBEActual + "" "" + Time[1]);
					}
					
					#endregion
				}
				
				#endregion
				
				myFreeTrade = false;
			}
			
			#endregion
			
			}
			
			if (tickMode)
			{
				//Long
				#region Filled Long Position	
			
				#region Stop/Profits			
			
				if (Position.MarketPosition == MarketPosition.Long && myFreeTrade == true && Position.Quantity == positionSizeLong)
				{
					if (dualTarget == false)
					{
						if (stopLoss)
						{
							ExitLongStopMarket(0, true, Position.Quantity, Position.AveragePrice - candleBarOffsetStop, ""MyStopLong"", ""MyEntryLong"");
						}
						
						if (profitTarget)
						{
							ExitLongLimit(0, true, Position.Quantity, Position.AveragePrice + (FinalTargetRR * TickSize), ""MyTargetLong"", ""MyEntryLong"");
						}
					}
				
				if (dualTarget)
				{
					if(stopLoss)
					{
						ExitLongStopMarket(0, true, Position.Quantity, Position.AveragePrice - candleBarOffsetStop, ""MyStopLong"", ""MyEntryLong"");
						ExitLongStopMarket(0, true, Position.Quantity, Position.AveragePrice - candleBarOffsetStop, ""MyStopLong2"", ""MyEntryLong2"");
					}
					
					if(profitTarget)
					{
						ExitLongLimit(0, true, Position.Quantity, Position.AveragePrice + (FirstTargetRR * TickSize),  ""MyTargetLong"", ""MyEntryLong"");
						ExitLongLimit(0, true, Position.Quantity, Position.AveragePrice + (FinalTargetRR * TickSize), ""MyTargetLong2"", ""MyEntryLong2"");
					}	
				}
				
				#endregion
				
				#region Management Targets
				
				//Breakeven Area
				breakevenAreaTrigger = Position.AveragePrice + (breakevenAreaTarget * TickSize);
				breakevenAreaStopSet = breakevenAreaLong - candleBarOffsetBreakeven;
			
				if (breakevenAreaSetAuto)
				{
					myFreeBEArea = true;
				}
				
				//Breakeven Actual
				breakevenActualTrigger = Position.AveragePrice + (breakevenActualTarget * TickSize);
				breakevenActualStopSet = Position.AveragePrice - candleBarOffsetBreakeven;
				
				if (breakevenActualSetAuto)
				{
					myFreeBEActual = true;
				}
				
				//Candle Trail Stop
				candleTrailTrigger = Position.AveragePrice + (candleTrailTarget * TickSize);
				
				if (candleTrailSetAuto)
				{
					myFreeCandleTrail = true;
					activeTrail = true;
				}
				
				#endregion
				
				#region Management Prints
				
				if (SystemPrint)
				{
					#region Breakeven
					
					if (BreakevenPrints)
					{
						Print(""breakeven(Area)Trigger "" + breakevenAreaTrigger + "" "" +  Time[1]);
						Print(""breakeven(Area)StopSet "" + breakevenAreaStopSet + "" "" + Time[1]);
						Print(""myFreeBE(Area) "" + myFreeBEArea + "" "" + Time[1]);
						
						Print(""breakeven(Actual)Trigger "" + breakevenActualTrigger + "" "" +  Time[1]);
						Print(""breakeven(Actual)StopSet "" + breakevenActualStopSet + "" "" + Time[1]);
						Print(""myFreeBE(Actual) "" + myFreeBEActual + "" "" + Time[1]);
					}
					
					#endregion
				}
				
				#endregion
				
				myFreeTrade = false;
				
				myFillCheck = true;
			}
				
			#endregion
				
				#region Partial Fill Long Position
			
				#region Stop/Profit
				
			if (Position.MarketPosition == MarketPosition.Long && myFreeTrade == true && Position.Quantity < positionSizeLong && IsFirstTickOfBar)
			{
				if (dualTarget == false)
					{
						if (stopLoss)
						{
							ExitLongStopMarket(0, true, Position.Quantity, Position.AveragePrice - candleBarOffsetStop, ""MyStopLong"", ""MyEntryLong""); 
						}
						
						if (profitTarget)
						{
							ExitLongLimit(0, true, Position.Quantity, Position.AveragePrice + (FinalTargetRR * TickSize), ""MyTargetLong"", ""MyEntryLong"");
						}
					}
				
				if (dualTarget)
				{
					if(stopLoss)
					{
						ExitLongStopMarket(0, true, Position.Quantity, Position.AveragePrice - candleBarOffsetStop, ""MyStopLong"", ""MyEntryLong"");
						ExitLongStopMarket(0, true, Position.Quantity, Position.AveragePrice - candleBarOffsetStop, ""MyStopLong2"", ""MyEntryLong2"");
					}
					
					if(profitTarget)
					{
						ExitLongLimit(0, true, Position.Quantity, Position.AveragePrice + (FirstTargetRR * TickSize), ""MyTargetLong"", ""MyEntryLong"");
						ExitLongLimit(0, true, Position.Quantity, Position.AveragePrice + (FinalTargetRR * TickSize), ""MyTargetLong2"", ""MyEntryLong2"");
					}	
				}
				
				#endregion
				
				#region Management Targets
				
				//Breakeven Area
				breakevenAreaTrigger = Position.AveragePrice + (breakevenAreaTarget * TickSize);
				breakevenAreaStopSet = breakevenAreaLong - candleBarOffsetBreakeven;
			
				if (breakevenAreaSetAuto)
				{
					myFreeBEArea = true;
				}
				
				//Breakeven Actual
				breakevenActualTrigger = Position.AveragePrice + (breakevenActualTarget * TickSize);
				breakevenActualStopSet = Position.AveragePrice - candleBarOffsetBreakeven;
				
				if (breakevenActualSetAuto)
				{
					myFreeBEActual = true;
				}
				
				//Candle Trail Stop
				candleTrailTrigger = Position.AveragePrice + (candleTrailTarget * TickSize);
				
				if (candleTrailSetAuto)
				{
					myFreeCandleTrail = true;
					activeTrail = true;
				}
				
				#endregion
				
				#region Management Prints
				
				if (SystemPrint)
				{
					#region Breakeven
					
					if (BreakevenPrints)
					{
						Print(""breakevenAreaTrigger "" + breakevenAreaTrigger + "" "" +  Time[1]);
						Print(""breakevenAreaStopSet "" + breakevenAreaStopSet + "" "" + Time[1]);
						Print(""myFreeBEArea "" + myFreeBEArea + "" "" + Time[1]);
					}
					
					#endregion
				}
				
				#endregion
				
				myFreeTrade = false;
			}
			
			#endregion
			

				//Short 
				#region Filled Short Position	
			
				#region Stop/Profits
			
				if (Position.MarketPosition == MarketPosition.Short && myFreeTrade == true && Position.Quantity == positionSizeShort)
				{
					if (dualTarget == false)
					{
						if (stopLoss)
						{
							ExitShortStopMarket(0, true, Position.Quantity, Position.AveragePrice + candleBarOffsetStop, ""MyStopShort"", ""MyEntryShort"");
						}
						
						if (profitTarget)
						{
							ExitShortLimit(0, true, Position.Quantity, Position.AveragePrice - (FinalTargetRR * TickSize), ""MyTargetShort"", ""MyEntryShort"");
						}
					}
				
				if (dualTarget)
				{				
			
					if(stopLoss)
					{
						ExitShortStopMarket(0, true, Position.Quantity, Position.AveragePrice + candleBarOffsetStop, ""MyStopShort"", ""MyEntryShort"");
						ExitShortStopMarket(0, true, Position.Quantity, Position.AveragePrice + candleBarOffsetStop, ""MyStopShort2"", ""MyEntryShort2"");
					}
					
					if(profitTarget)
					{
						ExitShortLimit(0, true, Position.Quantity, Position.AveragePrice - (FirstTargetRR * TickSize), ""MyTargetShort"", ""MyEntryShort"");
						ExitShortLimit(0, true, Position.Quantity, Position.AveragePrice - (FinalTargetRR * TickSize), ""MyTargetShort2"", ""MyEntryShort2"");
					}	
				}
				
				#endregion
				
				#region Management Targets
				
				//Breakeven Area
				breakevenAreaTrigger = Position.AveragePrice - (breakevenAreaTarget * TickSize);
				breakevenAreaStopSet = breakevenAreaShort + candleBarOffsetBreakeven;
			
				if (breakevenAreaSetAuto)
				{
					myFreeBEArea = true;
				}
				
				//Breakeven Actual
				breakevenActualTrigger = Position.AveragePrice - (breakevenActualTarget * TickSize);
				breakevenActualStopSet = Position.AveragePrice + candleBarOffsetBreakeven;
				
				if (breakevenActualSetAuto)
				{
					myFreeBEActual = true;
				}
				
				//Candle Trail Stop
				candleTrailTrigger = Position.AveragePrice - (candleTrailTarget * TickSize);
				
				if (candleTrailSetAuto)
				{
					myFreeCandleTrail = true;
					activeTrail = true;
				}
				
				#endregion
				
				#region Management Prints
				
				if (SystemPrint)
				{
					#region Breakeven
					
					if (BreakevenPrints)
					{
						Print(""breakeven(Area)Trigger "" + breakevenAreaTrigger + "" "" +  Time[1]);
						Print(""breakeven(Area)StopSet "" + breakevenAreaStopSet + "" "" + Time[1]);
						Print(""myFreeBE(Area) "" + myFreeBEArea + "" "" + Time[1]);
						
						Print(""breakeven(Actual)Trigger "" + breakevenActualTrigger + "" "" +  Time[1]);
						Print(""breakeven(Actual)StopSet "" + breakevenActualStopSet + "" "" + Time[1]);
						Print(""myFreeBE(Actual) "" + myFreeBEActual + "" "" + Time[1]);
					}
					
					#endregion
				}
				
				#endregion
				
				myFreeTrade = false;
				
				myFillCheck = true;
			}
				
			#endregion
				
				#region Partial Fill Short Position
				
				#region Stop/Profits
				
			if (Position.MarketPosition == MarketPosition.Short && myFreeTrade == true && Position.Quantity < positionSizeShort && IsFirstTickOfBar)
			{
				
				
				if (dualTarget == false)
					{
						if (stopLoss)
						{
							ExitShortStopMarket(0, true, Position.Quantity, Position.AveragePrice + candleBarOffsetStop, ""MyStopShort"", ""MyEntryShort"");
						}
						
						if (profitTarget)
						{
							ExitShortLimit(0, true, Position.Quantity, Position.AveragePrice - (FinalTargetRR * TickSize), ""MyTargetShort"", ""MyEntryShort"");
						}
					}
				
				if (dualTarget)
				{

					
					if(stopLoss)
					{
						ExitShortStopMarket(0, true, Position.Quantity, Position.AveragePrice + candleBarOffsetStop, ""MyStopShort"", ""MyEntryShort"");
						ExitShortStopMarket(0, true, Position.Quantity, Position.AveragePrice + candleBarOffsetStop, ""MyStopShort2"", ""MyEntryShort2"");
					}
					
					if(profitTarget)
					{
						ExitShortLimit(0, true, Position.Quantity, Position.AveragePrice - (FirstTargetRR * TickSize), ""MyTargetShort"", ""MyEntryShort"");
						ExitShortLimit(0, true, Position.Quantity, Position.AveragePrice - (FinalTargetRR * TickSize), ""MyTargetShort2"", ""MyEntryShort2"");
					}	
					
					
				}
				
				#endregion
				
				#region Management Targets
				
				//Breakeven Area
				breakevenAreaTrigger = Position.AveragePrice - (breakevenAreaTarget * TickSize);
				breakevenAreaStopSet = breakevenAreaShort + candleBarOffsetBreakeven;
			
				if (breakevenAreaSetAuto)
				{
					myFreeBEArea = true;
				}
				
				//Breakeven Actual
				breakevenActualTrigger = Position.AveragePrice - (breakevenActualTarget * TickSize);
				breakevenActualStopSet = Position.AveragePrice + candleBarOffsetBreakeven;
				
				if (breakevenActualSetAuto)
				{
					myFreeBEActual = true;
				}
				
				//Candle Trail Stop
				candleTrailTrigger = Position.AveragePrice - (candleTrailTarget * TickSize);
				
				if (candleTrailSetAuto)
				{
					myFreeCandleTrail = true;
					activeTrail = true;
				}
				
				#endregion
				
				#region Management Prints
				
				if (SystemPrint)
				{
					#region Breakeven
					
					if (BreakevenPrints)
					{
						Print(""breakeven(Area)Trigger "" + breakevenAreaTrigger + "" "" +  Time[1]);
						Print(""breakeven(Area)StopSet "" + breakevenAreaStopSet + "" "" + Time[1]);
						Print(""myFreeBE(Area) "" + myFreeBEArea + "" "" + Time[1]);
						
						Print(""breakeven(Actual)Trigger "" + breakevenActualTrigger + "" "" +  Time[1]);
						Print(""breakeven(Actual)StopSet "" + breakevenActualStopSet + "" "" + Time[1]);
						Print(""myFreeBE(Actual) "" + myFreeBEActual + "" "" + Time[1]);
					}
					
					#endregion
				}
				
				#endregion
				
				myFreeTrade = false;
			}
			
			#endregion
			
			}
			
			
			///Management Logic - Breakeven/Trail Stop
		
			#region Breakeven Area
			
				#region Long
			
			if (
				(Position.MarketPosition == MarketPosition.Long)
					&& ((Close[0] >= breakevenAreaTrigger) || (breakevenButtonClicked))
						&& (myFreeBEArea == true)
				)
			{
				#region Filled Long Position	
			
				if (Position.MarketPosition == MarketPosition.Long && myFreeBEArea == true && Position.Quantity == positionSizeLong)
				{
					if (dualTarget == false)
					{
						ExitLongStopMarket(0, true, Position.Quantity, breakevenAreaStopSet, ""MyStopLong"", ""MyEntryLong"");
					}
				
					if (dualTarget)
					{
						ExitLongStopMarket(0, true, firstTargetPositionLong, breakevenAreaStopSet, ""MyStopLong"", ""MyEntryLong"");
						ExitLongStopMarket(0, true, secondTargetPositionLong, breakevenAreaStopSet, ""MyStopLong2"", ""MyEntryLong2"");	
					}
				
				breakevenButtonClicked = false;
				myFreeBEArea = false;
			}
				
			#endregion
				
				#region Partial Fill Long Position
				
			if (Position.MarketPosition == MarketPosition.Long && myFreeBEArea == true && Position.Quantity < positionSizeLong)// && IsFirstTickOfBar)
			{
				if (dualTarget == false)
					{
						ExitLongStopMarket(0, true, Position.Quantity, breakevenAreaStopSet, ""MyStopLong"", ""MyEntryLong"");
					}
					
				if (dualTarget == true && myFillCheck == true)
				{
					ExitLongStopMarket(0, true, Position.Quantity, breakevenAreaStopSet, ""MyStopLong"", ""MyEntryLong"");
					ExitLongStopMarket(0, true, Position.Quantity, breakevenAreaStopSet, ""MyStopLong2"", ""MyEntryLong2"");
				}
			
				breakevenButtonClicked = false;
				myFreeBEArea = false;;
			}
			
			#endregion
			}
			
				#endregion
			
				#region Short
			
			if (
				(Position.MarketPosition == MarketPosition.Short)
					&& ((Close[0] <= breakevenAreaTrigger) || (breakevenButtonClicked))
						&& (myFreeBEArea == true)
				)
			{
				#region Filled Short Position	
			
				if (Position.MarketPosition == MarketPosition.Short && myFreeBEArea == true && Position.Quantity == positionSizeShort)
				{
					if (dualTarget == false)
					{
						ExitShortStopMarket(0, true, Position.Quantity, breakevenAreaStopSet, ""MyStopShort"", ""MyEntryShort"");
					}
				
				if (dualTarget)
				{
						ExitShortStopMarket(0, true, firstTargetPositionShort, breakevenAreaStopSet, ""MyStopShort"", ""MyEntryShort"");
						ExitShortStopMarket(0, true, secondTargetPositionShort, breakevenAreaStopSet, ""MyStopShort2"", ""MyEntryShort2"");	
				}
				
				breakevenButtonClicked = false;
				myFreeBEArea = false;
			}
				
			#endregion
				
				#region Partial Fill Short Position
				
			if (Position.MarketPosition == MarketPosition.Short && myFreeBEArea == true && Position.Quantity < positionSizeShort)
			{
				if (dualTarget == false)
				{
					ExitShortStopMarket(0, true, Position.Quantity, breakevenAreaStopSet, ""MyStopShort"", ""MyEntryShort"");
				}
					
				if (dualTarget == true && myFillCheck == true)
				{
					ExitShortStopMarket(0, true, Position.Quantity, breakevenAreaStopSet, ""MyStopShort"", ""MyEntryShort"");
					ExitShortStopMarket(0, true, Position.Quantity, breakevenAreaStopSet, ""MyStopShort2"", ""MyEntryShort2"");
				}
			
				breakevenButtonClicked = false;
				myFreeBEArea = false;;
			}
			
			#endregion
			}
			
				#endregion
			
			#endregion
			
			#region Breakeven Actual
			
				#region Long
			
			if (
				(Position.MarketPosition == MarketPosition.Long)
					&& ((Close[0] >= breakevenActualTrigger) || (breakevenButtonClicked))
						&& (myFreeBEActual == true)
				)
			{
				#region Filled Long Position	
			
				if (Position.MarketPosition == MarketPosition.Long && myFreeBEActual == true && Position.Quantity == positionSizeLong)
				{
					if (dualTarget == false)
					{
						ExitLongStopMarket(0, true, Position.Quantity, breakevenActualStopSet, ""MyStopLong"", ""MyEntryLong"");
					}
				
				if (dualTarget)
				{
						ExitLongStopMarket(0, true, firstTargetPositionLong, breakevenActualStopSet, ""MyStopLong"", ""MyEntryLong"");
						ExitLongStopMarket(0, true, secondTargetPositionLong, breakevenActualStopSet, ""MyStopLong2"", ""MyEntryLong2"");	
				}
				
				breakevenButtonClicked = false;
				myFreeBEActual = false;
			}
				
			#endregion
				
				#region Partial Fill Long Position
				
			if (Position.MarketPosition == MarketPosition.Long && myFreeBEActual == true && Position.Quantity < positionSizeLong)// && IsFirstTickOfBar)
			{
				if (dualTarget == false)
					{
						ExitLongStopMarket(0, true, Position.Quantity, breakevenActualStopSet, ""MyStopLong"", ""MyEntryLong"");
					}
					
				if (dualTarget == true && myFillCheck == true)
				{
					ExitLongStopMarket(0, true, Position.Quantity, breakevenActualStopSet, ""MyStopLong"", ""MyEntryLong"");
					ExitLongStopMarket(0, true, Position.Quantity, breakevenActualStopSet, ""MyStopLong2"", ""MyEntryLong2"");
				}
				
				breakevenButtonClicked = false;
				myFreeBEActual = false;
			}
			
			#endregion
			}
			
				#endregion
			
				#region Short
			
			if (
				(Position.MarketPosition == MarketPosition.Short)
					&& ((Close[0] <= breakevenActualTrigger) || (breakevenButtonClicked))
						&& (myFreeBEActual == true) 
				)
			{
				#region Filled Short Position	
			
				if (Position.MarketPosition == MarketPosition.Short && myFreeBEActual == true && Position.Quantity == positionSizeShort)
				{
					if (dualTarget == false)
					{
						ExitShortStopMarket(0, true, Position.Quantity, breakevenActualStopSet, ""MyStopShort"", ""MyEntryShort"");
					}
				
					if (dualTarget)
					{
						ExitShortStopMarket(0, true, firstTargetPositionShort, breakevenActualStopSet, ""MyStopShort"", ""MyEntryShort"");
						ExitShortStopMarket(0, true, secondTargetPositionShort, breakevenActualStopSet, ""MyStopShort2"", ""MyEntryShort2"");	
					}
				
				breakevenButtonClicked = false;
				myFreeBEActual = false;
			}
				
			#endregion
				
				#region Partial Fill Short Position
				
			if (Position.MarketPosition == MarketPosition.Short && myFreeBEActual == true && Position.Quantity < positionSizeShort) //&& IsFirstTickOfBar)
			{
				if (dualTarget == false)
					{
						ExitShortStopMarket(0, true, Position.Quantity, breakevenActualStopSet, ""MyStopShort"", ""MyEntryShort"");
					}
				
				if (dualTarget == true && myFillCheck == true)
				{
					ExitShortStopMarket(0, true, Position.Quantity, breakevenActualStopSet, ""MyStopShort"", ""MyEntryShort"");
					ExitShortStopMarket(0, true, Position.Quantity, breakevenActualStopSet, ""MyStopShort2"", ""MyEntryShort2"");
					
					Print(""At Breakeven: "" + Position.Quantity);
				}
				
				breakevenButtonClicked = false;
				myFreeBEActual = false;
			}
			
			#endregion
			}
			
				#endregion
				
			#endregion
			
			#region Custom Stop Move
			///Will add this at a later date
			#endregion
			
			#region Trail Stop
			
			if (
				(myFreeCandleTrail == true && activeTrail)
					
				&& ((Position.MarketPosition == MarketPosition.Long && (Close[0] >= candleTrailTrigger || trailButtonClicked))
					
					|| (Position.MarketPosition == MarketPosition.Short && (Close[0] <= candleTrailTrigger || trailButtonClicked)))
				)
			
				{
				
					#region Trail Offset
			
					//Define the area where stop will be set			
					trailAreaLong		= Low[1];
					trailAreaShort		= High[1];
					
					//Adds offset to your trail stop area. Gives user customization.		
					percentageCalcTrail 		= ((High[2] - Low[2]) * PercentageOffsetTrail);
					priceCalcTrail 			= PriceOffsetTrail;
					tickCalcTrail			= TickOffsetTrail * TickSize;
					
					//Picks the highest of the 3 numbers			
					candleBarOffsetTrail = Math.Max(percentageCalcTrail, Math.Max(priceCalcTrail, tickCalcTrail));
					
					//Add both of them together to define final entry point			
					candleTrailStopSetLong = trailAreaLong - candleBarOffsetTrail;
					candleTrailStopSetShort = trailAreaShort + candleBarOffsetTrail;
					
					#region Prints
					
					if (SystemPrint)
					{
						if (TrailPrints)
						{
							Print(""Current Trail Price Offset is :  "" + priceCalcTrail + "" "" + Time[1]);
							Print(""Current Trail Percent Offset is :  "" + percentageCalcTrail + "" "" + Time[1]);
							Print(""Current Trail Tick Offset is :  "" + tickCalcTrail + "" "" + Time[1]);
							
							Print(""Current Trail Highest Offset Selected is :  "" + candleBarOffsetTrail + "" "" + Time[1]);
							
							Print(""candleTrailStopSetLong is :  "" + candleTrailStopSetLong + "" "" + Time[1]);	
							Print(""candleTrailStopSetShort is :  "" + candleTrailStopSetShort + "" "" + Time[1]);	
						
							Print(""myFree Trail Offset "" + myFreeCandleTrail + "" "" + Time[1]);
						}
						
					}
					#endregion
			
			
					#endregion 	
					
					trailTriggeredCandle = true; //Allows condition to move stop freely. 
					myFreeCandleTrail = false; //Sets bool back to false. Needs to wait another candle for calculations to happen again	
				}	
		
				#region Long Trail
				
				#region Filled Long Position	
			
				if (Position.MarketPosition == MarketPosition.Long && trailTriggeredCandle == true && Position.Quantity == positionSizeLong && (Low[1] > Low[2]) && Open[0] > Low[1])
				{
					Print(""Open[0] "" + Open[0]);
					Print(""High[1]"" + High[1]);
					if (dualTarget == false)
					{
						ExitLongStopMarket(0, true, Position.Quantity, candleTrailStopSetLong , ""MyStopLong"", ""MyEntryLong"");
					}
				
					if (dualTarget)
					{
						ExitLongStopMarket(0, true, firstTargetPositionLong, candleTrailStopSetLong, ""MyStopLong"", ""MyEntryLong"");
						ExitLongStopMarket(0, true, secondTargetPositionLong, candleTrailStopSetLong, ""MyStopLong2"", ""MyEntryLong2"");	
					}
				
				//trailButtonClicked 		= false;
				trailTriggeredCandle 	= false;
			}
				
			#endregion
				
				#region Partial Fill Long Position
				
			if (Position.MarketPosition == MarketPosition.Long && trailTriggeredCandle == true && Position.Quantity < positionSizeLong && (Low[1] > Low[2]) && Open[0] > Low[1])
			{
				if (dualTarget == false)
				{
					ExitLongStopMarket(0, true, Position.Quantity, candleTrailStopSetLong, ""MyStopLong"", ""MyEntryLong"");
				}
				
				if (dualTarget == true && myFillCheck == true)
				{
					ExitLongStopMarket(0, true, Position.Quantity, candleTrailStopSetLong, ""MyStopLong"", ""MyEntryLong"");
					ExitLongStopMarket(0, true, Position.Quantity, candleTrailStopSetLong, ""MyStopLong2"", ""MyEntryLong2"");
				}
				
				trailTriggeredCandle 	= false;
			}
			
			#endregion
			
				#endregion
			
				#region Short Trail
				
				#region Filled Short Position	
			
				if (Position.MarketPosition == MarketPosition.Short && trailTriggeredCandle == true && Position.Quantity == positionSizeShort && (High[1] < High[2]) && Open[0] < High[1])
				{
					if (dualTarget == false)
					{
						ExitShortStopMarket(0, true, Position.Quantity, candleTrailStopSetShort , ""MyStopShort"", ""MyEntryShort"");
					}
				
				if (dualTarget)
				{
						ExitShortStopMarket(0, true, firstTargetPositionShort, candleTrailStopSetShort, ""MyStopShort"", ""MyEntryShort"");
						ExitShortStopMarket(0, true, secondTargetPositionShort, candleTrailStopSetShort, ""MyStopShort2"", ""MyEntryShort2"");	
				}
				
				//trailButtonClicked 		= false;
				trailTriggeredCandle 	= false;
			}
				
			#endregion
				
				#region Partial Fill Short Position
				
			if (Position.MarketPosition == MarketPosition.Short && trailTriggeredCandle == true && Position.Quantity < positionSizeShort && (High[1] < High[2]) && Open[0] < High[1])
			{
				if (dualTarget == false)
				{
					ExitShortStopMarket(0, true, Position.Quantity, candleTrailStopSetShort, ""MyStopShort"", ""MyEntryShort"");
				}
					
				if (dualTarget == true && myFillCheck == true)
				{
					ExitShortStopMarket(0, true, Position.Quantity, candleTrailStopSetShort, ""MyStopShort"", ""MyEntryShort"");
					ExitShortStopMarket(0, true, Position.Quantity, candleTrailStopSetShort, ""MyStopShort2"", ""MyEntryShort2"");
				}
				
				trailTriggeredCandle 	= false;

			}
			
			#endregion
			
				#endregion
				
			#endregion
			
		}
		
	
		protected override void OnPositionUpdate(Position position, double averagePrice, int quantity, MarketPosition marketPosition)
		{
			//myPosition = Position.Quantity;
			
			if (Position.MarketPosition == MarketPosition.Flat)
			{
				countOnce 		= true;
				activateMarket 	= false;
				myFillCheck 	= false;
			}
			
			if (Position.MarketPosition != MarketPosition.Flat)
			{
				RemoveDrawObject(""EntryLine"");
				RemoveDrawObject(""StopLine"");
			}
			
			#region Trail Stop Cancel
			
			if (Position.MarketPosition == MarketPosition.Flat) 
			{
				myFreeCandleTrail = false;
				
				if (SystemPrint)
				{
					if (TrailPrints)
					{
						Print(""myFree Trail ON Position "" + myFreeCandleTrail + "" "" + Time[1]);
					}
				}
				
			}
			
			#endregion
			
			#region Fib Levels Updates
			
			if (Position.MarketPosition == MarketPosition.Flat)
			{
				fibCount 	= 1;
				isFib 		= false;;
				
				RemoveDrawObject(""FibLong"");
				RemoveDrawObject(""FibShort"");
			}
			
			if (fibButtonClicked && Position.MarketPosition == MarketPosition.Long)
			{
				if (rrMode)
				{
					Draw.FibonacciRetracements(this, ""FibLong"", false, fibCount, setStopLong, fibCount, enterLong);
				}
				
				if (tickMode)
				{
					Draw.FibonacciRetracements(this, ""FibLong"", false, fibCount, Position.AveragePrice - candleBarOffsetStop, fibCount, Position.AveragePrice);
				}
				
			}
			
			if (fibButtonClicked && Position.MarketPosition == MarketPosition.Short)
			{
				if (rrMode)
				{
					Draw.FibonacciRetracements(this, ""FibShort"", false, fibCount, setStopShort, fibCount, enterShort);
				}
				
				if (tickMode)
				{
					Draw.FibonacciRetracements(this, ""FibShort"", false, fibCount, Position.AveragePrice + candleBarOffsetStop, fibCount, Position.AveragePrice);
				}
			}
			
			#endregion
			
			
		}
		
			
		protected override void OnExecutionUpdate(Execution execution, string executionId, double price, int quantity, MarketPosition marketPosition, string orderId, DateTime time)
		{
			#region Button Event Updates
			
			//Buy High
			if (Position.MarketPosition != MarketPosition.Flat)
				{
					ChartControl.Dispatcher.InvokeAsync(new Action(() => 
			 {
	            longButtonHL.Content = ""BUY HIGH"";
				longButtonHLClicked = false;
	        }));
					
				}
			
			//Sell Low
			if (Position.MarketPosition != MarketPosition.Flat)
				{
					ChartControl.Dispatcher.InvokeAsync(new Action(() => 
			 {
	            shortButtonHL.Content = ""SELL LOW"";
				shortButtonHLClicked = false;
	        }));
					
				}
				
			//Custom Long	
			if (Position.MarketPosition != MarketPosition.Flat)
				{
					ChartControl.Dispatcher.InvokeAsync(new Action(() => 
			 {
	            customLong.Content = ""Custom Long"";
				customLong.Background	= Brushes.MediumSeaGreen; 
				armMarketCount = 0;
				customLongClicked = false;
	        }));
					
				}
				
			//Custom Short	
			if (Position.MarketPosition != MarketPosition.Flat)
				{
					ChartControl.Dispatcher.InvokeAsync(new Action(() => 
			 {
	            customShort.Content = ""Custom Short"";
				customShort.Background	= Brushes.IndianRed; 
				armMarketCount = 0; 
				customShortClicked = false;
	        }));
		
				}	
				
				
			if (Position.MarketPosition == MarketPosition.Flat)
				{
					ChartControl.Dispatcher.InvokeAsync(new Action(() => 
			 {
	            trailButton.Content = ""Trail Stop"";
				trailButton.Background	= Brushes.LightGray; 
				trailButtonClicked = false;
	        }));
		
				}		
				
				#endregion
		}
			
		protected void RemoveWPFControls()
		{
			#region Remove WPF
			
			if (!panelActive)
				return;
			
			if (chartTraderButtonsGrid != null || lowerButtonsGrid != null)
			{
				chartTraderGrid.Children.Remove(lowerButtonsGrid);
				chartTraderGrid.RowDefinitions.Remove(addedRow);
			}

			panelActive = false;
			
			#endregion
		}
		
		private bool TabSelected()
		{
			#region TabSelcected 
			
			bool tabSelected = false;

			// loop through each tab and see if the tab this indicator is added to is the selected item
			foreach (System.Windows.Controls.TabItem tab in chartWindow.MainTabControl.Items)
				if ((tab.Content as Gui.Chart.ChartTab).ChartControl == ChartControl && tab == chartWindow.MainTabControl.SelectedItem)
					tabSelected = true;

			return tabSelected;
				
			#endregion
		}
		
		private void TabChangedHandler(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
		{
			#region TabHandler
			
			if (e.AddedItems.Count <= 0)
				return;

			tabItem = e.AddedItems[0] as System.Windows.Controls.TabItem;
			if (tabItem == null)
				return;

			chartTab = tabItem.Content as Gui.Chart.ChartTab;
			if (chartTab == null)
				return;

			if (TabSelected())
				InsertWPFControls();
			else
				RemoveWPFControls();
			
			#endregion
		}
		
		
		#region Button Click Events
		
		private void OnButtonClick(object sender, RoutedEventArgs rea)
		{
			System.Windows.Controls.Button button = sender as System.Windows.Controls.Button;
			
			#region TradeSaber Socials
			
			if (showSocials)
			{
				if (button == youtubeButton && button.Name == ""YoutubeButton"" && button.Content == ""Youtube"")
				{
					System.Diagnostics.Process.Start(youtube);
					return;
				}
				
				if (button == discordButton && button.Name == ""DiscordButton"" && button.Content == ""Discord"")
				{	
					System.Diagnostics.Process.Start(discord);
					return;
				}
				
				if (button == tradeSaberButton && button.Name == ""TradeSaberButton"" && button.Content == ""TradeSaber"")
				{	
					System.Diagnostics.Process.Start(tradeSaber);
					return;
				}
			}
			
			#endregion
		}
		
		#endregion
		
		
		#region Properties
			
		#region 01. Position Size
		
		[Display(Name = ""Order Management Method"", GroupName = ""01. Position Size"", Description="""", Order = 0)]
		public OrderManagement	ManagementType
		{
			get { return managementType; }
			set { managementType = value; }
		}	
		
		
		
		[RefreshProperties(RefreshProperties.All)]
		[NinjaScriptProperty]
		[Display(Name = ""Auto Position Size"", Order = 1, GroupName = ""01. Position Size"")]
		public bool AutoPositionSize
		{
		    get
		   {
		      return autoPositionSize;
		   }
		   set
		   {
		      if (value == true)
		      {
		         CustomPositionSize = false;
		      }
		      autoPositionSize = value;
		    }
		}

		[NinjaScriptProperty]
		[Range(1, double.MaxValue)]
		[Display(Name=""Risk Size($)"", Order=2, GroupName=""01. Position Size"")]
		public double MaxLossPerTrade
		{ get; set; }
		
		[RefreshProperties(RefreshProperties.All)]
		[NinjaScriptProperty]
		[Display(Name = ""Custom Position Size"", Order = 3, GroupName = ""01. Position Size"")]
		public bool CustomPositionSize
		{
		   get
		   {
		      return customPositionSize;
		   }
		   set
		   {
		      if (value == true)
		      {
		         AutoPositionSize = false;
		      }
		      customPositionSize = value;
		   }
		}
		
		[Range(1, int.MaxValue)]
		[NinjaScriptProperty]
		[Display(Name=""Custom Position Amount"", Order=4, GroupName=""01. Position Size"")]
		public int CustomPositionAmount
		{ get; set; }
		
		
		[NinjaScriptProperty]
		[Display(Name=""Use Candle Range"", Order=5, GroupName=""01. Position Size"")]
		public bool CandleRange
		{ get; set; }
		
		#endregion
	
		#region 02. Entry / Limit
		
		[NinjaScriptProperty]
		[Range(1, int.MaxValue)]
		[Display(Name=""Entry Candle Used"", Order=0, GroupName=""02. Entry"")]
		public int CandleLookBackEntry
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""Price Offset Entry"", Order=1, GroupName=""02. Entry"")]
		public double PriceOffsetEntry
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name=""Percentage Offset Entry"", Order=2, GroupName=""02. Entry"")]
		public double PercentageOffsetEntry
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name=""Tick Offset Entry"", Order=3, GroupName=""02. Entry"")]
		public int TickOffsetEntry
		{ get; set; }

		
		//Limit Orders
		[NinjaScriptProperty]
		[Display(Name=""Limit Order Entry"", Order=4, GroupName=""02A. Limit Order"")]
		public bool useLimit
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""Price Offset Limit"", Order=5, GroupName=""02A. Limit Order"")]
		public double PriceOffsetLimit
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name=""Percentage Offset Limit"", Order=6, GroupName=""02A. Limit Order"")]
		public double PercentageOffsetLimit
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name=""Tick Offset Limit"", Order=7, GroupName=""02A. Limit Order"")]
		public int TickOffsetLimit
		{ get; set; }
		
		#endregion
	
		#region 03. Stop
		
		[NinjaScriptProperty]
		[Display(Name=""Set Stop Loss"", Order=0, GroupName=""03. Stop"")]
		public bool stopLoss
		{ get; set; }
		
		[NinjaScriptProperty]
		[Range(1, int.MaxValue)]
		[Display(Name=""Stop Candle Used"", Order=1, GroupName=""03. Stop"")]
		public int CandleLookBackStop
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""Price Offset Stop"", Order=2, GroupName=""03. Stop"")]
		public double PriceOffsetStop
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name=""Percentage Offset Stop"", Order=3, GroupName=""03. Stop"")]
		public double PercentageOffsetStop
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name=""Tick Offset Stop"", Order=4, GroupName=""03. Stop"")]
		public int TickOffsetStop
		{ get; set; }

		#endregion
	
		#region 04. Profit Targets
		
		[NinjaScriptProperty]
		[Display(Name=""Set Profit Target"", Order=0, GroupName=""04. Target"")]
		public bool profitTarget
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name=""Final Target"", Order=2, GroupName=""04. Target"")]
		public double FinalTargetRR
		{ get; set; }
		
		#endregion
		
		#region 04A. Dual Target
		
		[NinjaScriptProperty]
		[Display(Name=""DualTarget"", Order=1, GroupName=""04A. Dual Target"")]
		public bool dualTarget
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""Dual Entry Split Percent"", Order=2, GroupName=""04A. Dual Target"")]
		public double splitPercent
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""First Target"", Order=3, GroupName=""04A. Dual Target"")]
		public double FirstTargetRR
		{ get; set; }
		
		#endregion
		
		#region 05. Custom Button 
		
		[RefreshProperties(RefreshProperties.All)]
		[NinjaScriptProperty]
		[Display(Name = ""'Close' Price"", Order = 2, GroupName = ""05. Custom Button"")]
		public bool EnterClosePrice
		{
		    get
		   {
		      return enterClosePrice;
		   }
		   set
		   {
		      if (value == true)
		      {
		         ArmMarket = false;
		      }
		      enterClosePrice = value;
		    }
		}

		
		
		[RefreshProperties(RefreshProperties.All)]
		[NinjaScriptProperty]
		[Display(Name = ""Arm Market (New Candle)"", Order = 3, GroupName = ""05. Custom Button"")]
		public bool ArmMarket
		{
		   get
		   {
		      return armMarket;
		   }
		   set
		   {
		      if (value == true)
		      {
		         EnterClosePrice = false;
		      }
		      armMarket = value;
		   }
		}
		
		///
		
		/*
		[NinjaScriptProperty]
		[Display(Name=""Add Offset"", Order=3, GroupName=""01. Risk Parameters"")]
		public bool AddOffset
		{ get; set; }
		*/
		#endregion
		
		#region 06. Breakeven Offset
		
		//Breakeven Offset
		[NinjaScriptProperty]
		[Display(Name=""Price Offset Breakeven"", Order=1, GroupName=""06. Breakeven Offset"")]
		public double PriceOffsetBreakeven
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name=""Percentage Offset Breakeven"", Order=2, GroupName=""06. Breakeven Offset"")]
		public double PercentageOffsetBreakeven
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name=""Tick Offset Breakeven"", Order=3, GroupName=""06. Breakeven Offset"")]
		public int TickOffsetBreakeven
		{ get; set; }
		
		#endregion
		
		#region 06A. Breakeven Area
		
		//Breakeven Area
		[RefreshProperties(RefreshProperties.All)]
		[NinjaScriptProperty]
		[Display(Name=""Breakeven (Area) Button"", Order=4, GroupName=""06A. Breakeven Area"")]
		public bool BreakevenAreaSetButton
		{
		    get
		   {
		      return breakevenAreaSetButton;
		   }
		   set
		   {
		      if (value == true)
		      {
		         BreakevenActualSetButton = false;
		      }
		      breakevenAreaSetButton = value;
		    }
		}
		
		
		[RefreshProperties(RefreshProperties.All)]
		[NinjaScriptProperty]
		[Display(Name=""Breakeven (Area) Set Auto"", Order=5, GroupName=""06A. Breakeven Area"")]
		public bool BreakevenAreaSetAuto
		{
		    get
		   {
		      return breakevenAreaSetAuto;
		   }
		   set
		   {
		      if (value == true)
		      {
		         BreakevenActualSetAuto = false;
		      }
		      breakevenAreaSetAuto = value;
		    }
		}
		
		[NinjaScriptProperty]
		[Display(Name=""Breakeven (Area) Target"", Order=6, GroupName=""06A. Breakeven Area"")]
		public double breakevenAreaTarget	
		{ get; set; }
		
		#endregion
		
		#region 06B. Breakeven Actual
		
		//Breakeven Actual
		[RefreshProperties(RefreshProperties.All)]
		[NinjaScriptProperty]
		[Display(Name="" Breakeven (Actual) Button"", Order=7, GroupName=""06B. Breakeven Actual"")]	
		public bool BreakevenActualSetButton
		{
		   get
		   {
		      return  breakevenActualSetButton;
		   }
		   set
		   {
		      if (value == true)
		      {
		         BreakevenAreaSetButton = false;
		      }
		       breakevenActualSetButton = value;
		   }
		}
		
		
		
		[RefreshProperties(RefreshProperties.All)]
		[NinjaScriptProperty]
		[Display(Name=""Breakeven (Actual) Set Auto"", Order=8, GroupName=""06B. Breakeven Actual"")]	
		public bool BreakevenActualSetAuto
		{
		   get
		   {
		      return breakevenActualSetAuto;
		   }
		   set
		   {
		      if (value == true)
		      {
		         BreakevenAreaSetAuto = false;
		      }
		      breakevenActualSetAuto = value;
		   }
		}
		
		
		[NinjaScriptProperty]
		[Display(Name=""Breakeven (Actual) Target"", Order=9, GroupName=""06B. Breakeven Actual"")]
		public double breakevenActualTarget	
		{ get; set; }
		
		#endregion
		
		#region 07. Trail Stop Offset

		//Trail Offset
		[NinjaScriptProperty]
		[Display(Name=""Price Offset Trail"", Order=1, GroupName=""07. Trail Stop Offset"")]
		public double PriceOffsetTrail
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name=""Percentage Offset Trail"", Order=2, GroupName=""07. Trail Stop Offset"")]
		public double PercentageOffsetTrail
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name=""Tick Offset Trail"", Order=3, GroupName=""07. Trail Stop Offset"")]
		public int TickOffsetTrail
		{ get; set; }
		
		#endregion
		
		#region 07A. Candle Trail
		
		[RefreshProperties(RefreshProperties.All)]
		[NinjaScriptProperty]
		[Display(Name = ""Candle Trail (Button)"", Order = 1, GroupName = ""07A. Trail Stop"")]
		public bool candleTrailSetButton
		{ get; set; }
		
		[RefreshProperties(RefreshProperties.All)]
		[NinjaScriptProperty]
		[Display(Name = ""Candle Trail (Auto)"", Order = 2, GroupName = ""07A. Trail Stop"")]
		public bool candleTrailSetAuto
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""Candle Trail Target"", Order=3, GroupName=""07A. Trail Stop"")]
		public double candleTrailTarget	
		{ get; set; }
		
		#endregion

		#region 9 Display Text Box
		
		[NinjaScriptProperty]
		[Display(Name=""Display Text"", Order=1, GroupName=""9 Display Text Box"")]
		public bool DisplayText
		{ get; set; }
		
		#endregion
		
		#region For Later Use
		/*
		//custom Move Stop
		[NinjaScriptProperty]
		[Display(Name=""customMoveStopSet"", Order=15, GroupName=""10. Management"")]
		public bool customMoveStopSet
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""customeMoveStopTarget"", Order=16, GroupName=""10. Management"")]
		public double customeMoveStopTarget	
		{ get; set; }
		
		//Custom Trail
		[NinjaScriptProperty]
		[Display(Name=""customTrailSet"", Order=7, GroupName=""10. Trail Stop2"")]
		public bool customTrailSet
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""customTrailTarget"", Order=8, GroupName=""10. Trail Stop2"")]
		public double customTrailTarget	
		{ get; set; }
		*/
		#endregion
		
		#region 29. TradeSaber Socials
		
		[NinjaScriptProperty]
		[Display(Name = ""Show Social Media Buttons"", Description = """", Order = 0, GroupName = ""29. TradeSaber Socials"")]
		public bool ShowSocials 
		{
		 	get{return showSocials;} 
			set{showSocials = (value);} 
		}
		
		[NinjaScriptProperty]
		[Display(Name=""Explanation Video"", Order=1, GroupName=""29. TradeSaber Socials"")]
		public  string Youtube
		{
		 	get{return youtube;} 
			set{youtube = (value);} 
		}
		
		[NinjaScriptProperty]
		[Display(Name=""Discord Link"", Order=2, GroupName=""29. TradeSaber Socials"")]
		public  string Discord
		{
		 	get{return discord;} 
			set{discord = (value);} 
		}
		
		[NinjaScriptProperty]
		[Display(Name=""TradeSaber Link"", Order=3, GroupName=""29. TradeSaber Socials"")]
		public  string TradeSaber
		{
		 	get{return tradeSaber;} 
			set{tradeSaber = (value);} 
		}
		
		[NinjaScriptProperty]
		[ReadOnly(true)]
		[Display(Name = ""Author"", GroupName = ""29. TradeSaber Socials"", Order = 4)]
		public string Author
		{
		 	get{return author;} 
			set{author = (value);} 
		}
		
		[NinjaScriptProperty]
		[ReadOnly(true)]
		[Display(Name = ""Version"", GroupName = ""29. TradeSaber Socials"", Order = 5)]
		public string Version
		{
		 	get{return version;} 
			set{version = (value);} 
		}
		
		#endregion
		
		#region 99. Prints
		
		[NinjaScriptProperty]
		[Display(Name=""SystemPrint"", Order=1, GroupName=""99. Prints"")]
		public bool SystemPrint
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""EntryPrints"", Order=3, GroupName=""99. Prints"")]
		public bool EntryPrints
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""LimitPrints"", Order=4, GroupName=""99. Prints"")]
		public bool LimitPrints
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""StopPrints"", Order=5, GroupName=""99. Prints"")]
		public bool StopPrints
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""PositionSizePrints"", Order=5, GroupName=""99. Prints"")]
		public bool PositionSizePrints
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""ProfitTatgetPrintss"", Order=6, GroupName=""99. Prints"")]
		public bool ProfitTatgetPrints
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""BreakevenPrints"", Order=7, GroupName=""99. Prints"")]
		public bool BreakevenPrints
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name=""TrailPrints"", Order=8, GroupName=""99. Prints"")]
		public bool TrailPrints
		{ get; set; }
		//ProfitTatgetPrints
		#endregion
		
		#endregion
		
	}
}

"
aHZ2kEC9,Chat,horozov86,Python,Friday 20th of June 2025 06:10:19 AM CDT,"1. Модел за съобщения
python
Copy
Edit
# models.py
from django.db import models
from django.contrib.auth.models import User

class ChatMessage(models.Model):
    sender = models.ForeignKey(User, on_delete=models.CASCADE)
    message = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-created_at']
🧩 2. URLs
python
Copy
Edit
# urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('chat/send/', views.send_message, name='send_message'),
    path('chat/messages/', views.get_messages, name='get_messages'),
]
🧠 3. Views (обработващи AJAX)
python
Copy
Edit
# views.py
from django.http import JsonResponse
from django.contrib.auth.decorators import login_required
from .models import ChatMessage

@login_required
def send_message(request):
    if request.method == 'POST':
        msg = request.POST.get('message')
        if msg:
            ChatMessage.objects.create(sender=request.user, message=msg)
        return JsonResponse({'status': 'ok'})

@login_required
def get_messages(request):
    messages = ChatMessage.objects.all().order_by('-created_at')[:20]
    data = [
        {'sender': m.sender.username, 'message': m.message, 'time': m.created_at.strftime('%H:%M:%S')}
        for m in reversed(messages)
    ]
    return JsonResponse(data, safe=False)
💬 4. HTML + JavaScript (в base.html или footer.html)
html
Copy
Edit
<div id=""simple-chat"" style=""position:fixed;bottom:0;right:20px;width:300px;background:#eee;padding:10px;border:1px solid #ccc;"">
  <div id=""chat-messages"" style=""height:200px;overflow-y:auto;background:#fff;padding:5px;border:1px solid #aaa;""></div>
  <form id=""chat-form"">
    <input type=""text"" id=""chat-input"" placeholder=""Напиши съобщение..."" style=""width:70%"">
    <button type=""submit"">Изпрати</button>
  </form>
</div>

<script>
function loadMessages() {
  fetch('/chat/messages/')
    .then(res => res.json())
    .then(data => {
      const box = document.getElementById('chat-messages');
      box.innerHTML = '';
      data.forEach(msg => {
        box.innerHTML += `<p><strong>${msg.sender}</strong>: ${msg.message}</p>`;
      });
      box.scrollTop = box.scrollHeight;
    });
}

document.getElementById('chat-form').addEventListener('submit', function(e) {
  e.preventDefault();
  const input = document.getElementById('chat-input');
  const message = input.value;
  if (message.trim() === '') return;

  fetch('/chat/send/', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      'X-CSRFToken': '{{ csrf_token }}'
    },
    body: 'message=' + encodeURIComponent(message)
  }).then(() => {
    input.value = '';
    loadMessages();
  });
});

setInterval(loadMessages, 5000); // Обновява съобщенията на всеки 5 секунди
loadMessages(); // Зарежда при отваряне
</script>
"
8JWwDpBV,Best Time to Buy & Sell Stocks with Cooldown,Fastrail08,C++,Friday 20th of June 2025 06:05:18 AM CDT,"#include <bits/stdc++.h>
using namespace std;

void getMaximumProfitWithCooldown(int level, int transactionState, int currProfit, int &maxProfit, vector<int> &prices){
    if(level >= prices.size()){
        maxProfit = max(maxProfit, currProfit);
        return;
    }
    
    //buy 
    if(transactionState == 0){
        getMaximumProfitWithCooldown(level + 1, 1, currProfit - prices[level], maxProfit, prices);
    }
    //sell
    if(transactionState == 1){
        getMaximumProfitWithCooldown(level + 1, 2, currProfit + prices[level], maxProfit, prices);
    }
    //cooldown
    if(transactionState == 2){
        getMaximumProfitWithCooldown(level + 1, 0, currProfit, maxProfit, prices);
    }
    //don't do anything
    if(transactionState == 0 || transactionState == 1){
        getMaximumProfitWithCooldown(level + 1, transactionState, currProfit, maxProfit, prices);
    }
}

int getMaximumProfitWithCooldownMemo(int level, int transactionState, vector<int> &prices, vector<vector<int> > &memo){
    if(level >= prices.size()){
        return 0;
    }
    
    //level - stock price on each day
    /*
    options - 
    transactionState = 0; transaction closed (buy)
    transactionState = 1; transaction opened (sell)
    transactionState = 2; transaction in cooldown (can't buy or sell)
    don't do anything on that day
    */
    if(memo[level][transactionState] != -1){
        return memo[level][transactionState];
    }
    int bought = 0, sold = 0, cooldown = 0, na = 0;
    //can only buy when transactionState is closed
    if(transactionState == 0){
        bought = getMaximumProfitWithCooldownMemo(level + 1, 1, prices, memo) - prices[level];
    }
    //can only sell when transactionState is opened
    if(transactionState == 1){
        sold = getMaximumProfitWithCooldownMemo(level + 1, 2, prices, memo) + prices[level];
    }
    //can only cooldown if transactionState is in cooldown
    if(transactionState == 2){
        cooldown = getMaximumProfitWithCooldownMemo(level + 1, 0, prices, memo);
    }
    //can only do nothing when transactionState is either opened or closed.
    //As we are already doing nothing during cooldown, so call will just get repeated if called during cooldown
    //If on a level when on cooldown, doing nothing that day, will change the transactionState = 0, as we passed the cooldown period, but in Doing Nothing call to the next level we maintain the transactionState = transactionState, which won't make sense if on cooldown, as cooldown will end no matter what after the day/level has passed.
    // we can't have a call like (index, 2) -> (index + 1, 2)..as the transactionState would automatically change from 2 to 0 as the day passes.
    if(transactionState == 0 || transactionState == 1){
        na = getMaximumProfitWithCooldownMemo(level + 1, transactionState, prices, memo);
    }
    return memo[level][transactionState] = max(na, max(cooldown, max(sold, bought)));
}

int main() {
	// your code goes here
    int n;
    cin >> n;
    vector<int> prices(n);
    for(int i = 0; i < n; i++){
        cin >> prices[i];
    }
    /*
    Recursive call
    */
    int maxProfit = 0;
    getMaximumProfitWithCooldown(0, 0, 0, maxProfit, prices);
    cout << maxProfit << '\n';
    
    /*
    Memo call
    */
    vector<vector<int> > memo(prices.size(), vector<int>(3, -1));
    cout << getMaximumProfitWithCooldownMemo(0, 0, prices, memo) << '\n';
}
"
vrrSz4u9,code for the 2nd music driver prototype as of 2025-06-20,Kitomas,6502 TASM/64TASS,Friday 20th of June 2025 06:02:20 AM CDT,";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;""2nd_music_driver_2025-06-20\main.p8"":
%zeropage basicsafe

%import music





song_data {
  %option ignore_unused

  const ubyte PULSE    = %00000000
  const ubyte SAWTOOTH = %01000000
  const ubyte TRIANGLE = %10000000
  const ubyte NOISE    = %11000000
  
  const ubyte SILENT   = %00000000
  const ubyte LEFT     = %01000000
  const ubyte RIGHT    = %10000000
  const ubyte STEREO   = %11000000
  
  ; 6 bytes per instrument
  const ubyte INSTRUMENTS_LEN = sizeof(instruments)/6
  
  ; +1 for tick speed
  const ubyte ORDERS_LEN = sizeof(orders)/(CHANNELS+1)
  
  ; 2 bytes per pattern pointer
  const ubyte PATTERNS_LEN = sizeof(patterns)/2
  
  ; This is what you pass to music.play()
  ; Note: mkword's first arg is the high byte, not the low byte!
  uword[] @nosplit info = [mkword(INSTRUMENTS_LEN, CHANNELS),
                           mkword(PATTERNS_LEN, ORDERS_LEN),
                           mkword(0, 0), ; (Reserved)
                           &instruments, &orders, &patterns]



  const uword INS_NULL      =  0
  const uword INS_SAWLONG   =  1
  const uword INS_PLSSHRT   =  2
  const uword INS_PLSLONG   =  3
  const uword INS_NOISHRT_L =  4
  const uword INS_NOISHRT_R =  5
  const uword INS_NOILONG_L =  6
  const uword INS_NOILONG_R =  7
  const uword INS_NOISHRT   =  8
  const uword INS_NOILONG   =  9
  const uword INS_CHIRP     = 10

  ; WAVEFORM|WIDTH, EAR_CHANLS|VOL, MAXVOL_6b, ATTACK_8b, SUSTAIN_8b, RELEASE_8b
  ;
  ; From psg.envelope()'s remarks:
  ;   maxvolume = 0-63
  ;   attack, sustain, release = 0-255 that determine the speed of the A/D/R:
  ;   attack  time:   MAXVOL/15/attack sec.   higher value = faster attack.
  ;   sustain time:   sustain/60 sec.         higher value = longer sustain.
  ;   release time:   MAXVOL/15/release sec.  higher vaule = faster release.
  ;
  ; (A max volume of 0 is interpreted as 'no note', which can be used for
  ;  envelopes longer than the row it resides in, as that current envelope
  ;  will continue until the next row with an instrument without a maxvol of 0.)
  ubyte[] instruments = [       0,        0,   0,  255,  0, 255, ;  0 NULL
                         SAWTOOTH, STEREO|0,  30,  208,  0,   5, ;  1 SAWLONG
                         PULSE|48, STEREO|0,  33,  170,  5,  44, ;  2 PLSSHRT
                         PULSE|38, STEREO|0,  33,  170, 13,  44, ;  3 PLSLONG
                         NOISE   ,   LEFT|0,  19,   58,  0,  16, ;  4 NOISHRT_L
                         NOISE   ,  RIGHT|0,  19,   58,  0,  16, ;  5 NOISHRT_R
                         NOISE   ,   LEFT|0,  19,   58,  0,   8, ;  6 NOILONG_L
                         NOISE   ,  RIGHT|0,  19,   58,  0,   8, ;  7 NOILONG_R
                         NOISE   , STEREO|0,  14,   58,  0,  16, ;  8 NOISHRT
                         NOISE   , STEREO|0,  14,   58,  0,   8, ;  9 NOILONG
                         PULSE| 9, STEREO|0,  21,  208,  0,   6] ; 10 CHIRP
                        
  
  
  ; Accepts values 1-6 (ORDERS_LEN = sizeof(orders)/CHANNELS)
  const ubyte CHANNELS = 5
  
  ; Contains indices into the patterns array, where the actual
  ; index equals i-1, and a value of 0 means no pattern at all
  ;
  ; The first byte of an order entry however, is the tick speed (frames per row)
  ubyte[] orders = [
                     8,  1, 2, 3, 4, 5,
                    ]
  
  
  
  ; This is an array of pointers
  ;
  ; In each pattern, the first byte correlates to its length mask.
  ; For example, a pattern with a length of 64 would have a mask of 63
  ; (Pattern length must be a power of 2!)
  ;
  ; If the 2nd byte is nonzero, that pattern's array lacks the @nosplit tag.
  ;
  ; The words after are the pattern's rows:
  ;   Bits 0-6 are: The note index; piano key starting from C0 (0-119)
  ;                 (A note index of 0 indicates a silent note)
  ;   Bits 7-F are: The instrument index (0-511)
  uword[] @nosplit patterns = [pattern_hatLR,
                               pattern_hatST,
                               pattern_saw,
                               pattern_pulse,
                               pattern_chirp]
  
  
  
  ; 1
  uword[] @nosplit pattern_hatLR = [mkword(0,7), ; Mask of 7, for 8 notes total
                                    INS_NOISHRT_L<<7 | piano.KEY_C9,
                                    INS_NOISHRT_R<<7 | piano.KEY_C9,
                                    INS_NOILONG_L<<7 | piano.KEY_D9S,
                                    INS_NULL     <<7 |            0,
                                    INS_NOISHRT_R<<7 | piano.KEY_C9,
                                    INS_NOISHRT_L<<7 | piano.KEY_C9,
                                    INS_NOILONG_R<<7 | piano.KEY_D9S,
                                    INS_NULL     <<7 |            0]
  
  
  
  ; 2
  uword[] @nosplit pattern_hatST = [mkword(0,7), ; Mask of 7, for 8 notes total
                                    INS_NOISHRT<<7 | piano.KEY_C9,
                                    INS_NOISHRT<<7 | piano.KEY_C9,
                                    INS_NOILONG<<7 | piano.KEY_D9S,
                                    INS_NULL   <<7 |            0,
                                    INS_NOISHRT<<7 | piano.KEY_C9,
                                    INS_NOISHRT<<7 | piano.KEY_C9,
                                    INS_NOILONG<<7 | piano.KEY_D9S,
                                    INS_NULL   <<7 |            0]

  

  ; 3
  uword[] @nosplit pattern_saw = [mkword(0,63), ; 64 notes total
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_G2S,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_G2S,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_G2S,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_C3,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_G2,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_G2,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_G2,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_A2S,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_F2,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_F2,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_F2,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_D2S,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_G2,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_G2,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_G2,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_NULL   <<7 | 0,
                                  INS_SAWLONG<<7 | piano.KEY_G2S,
                                  INS_NULL   <<7 | 0]



  uword[] @nosplit pattern_pulse = [mkword(0,63), ; 64 notes total
                           ; 0 -> 7:
                           INS_PLSSHRT<<7 | piano.KEY_F3,
                           INS_PLSSHRT<<7 | piano.KEY_G3S,
                           INS_PLSSHRT<<7 | piano.KEY_C4,
                           INS_PLSLONG<<7 | piano.KEY_G4,
                           INS_NULL   <<7 | 0,
                           INS_PLSSHRT<<7 | piano.KEY_C4,
                           INS_PLSLONG<<7 | piano.KEY_D4S,
                           INS_NULL   <<7 | 0,
                           ; 8 -> 15:
                           INS_PLSSHRT<<7 | piano.KEY_F3,
                           INS_PLSSHRT<<7 | piano.KEY_G3S,
                           INS_PLSSHRT<<7 | piano.KEY_C4,
                           INS_PLSLONG<<7 | piano.KEY_G4,
                           INS_NULL   <<7 | 0,
                           INS_PLSSHRT<<7 | piano.KEY_C4,
                           INS_PLSLONG<<7 | piano.KEY_D4S,
                           INS_NULL   <<7 | 0,
                           ; 16 -> 23:
                           INS_PLSSHRT<<7 | piano.KEY_D3S,
                           INS_PLSSHRT<<7 | piano.KEY_G3,
                           INS_PLSSHRT<<7 | piano.KEY_A3S,
                           INS_PLSLONG<<7 | piano.KEY_G4,
                           INS_NULL   <<7 | 0,
                           INS_PLSSHRT<<7 | piano.KEY_C4,
                           INS_PLSLONG<<7 | piano.KEY_D4S,
                           INS_NULL   <<7 | 0,
                           ; 24 -> 31:
                           INS_PLSSHRT<<7 | piano.KEY_D3S,
                           INS_PLSSHRT<<7 | piano.KEY_G3,
                           INS_PLSSHRT<<7 | piano.KEY_A3S,
                           INS_PLSLONG<<7 | piano.KEY_G4,
                           INS_NULL   <<7 | 0,
                           INS_PLSSHRT<<7 | piano.KEY_C4,
                           INS_PLSSHRT<<7 | piano.KEY_D4S,
                           INS_PLSSHRT<<7 | piano.KEY_C4S,
                           ; 32 -> 39:
                           INS_PLSSHRT<<7 | piano.KEY_C3S,
                           INS_PLSSHRT<<7 | piano.KEY_F3,
                           INS_PLSSHRT<<7 | piano.KEY_G3S,
                           INS_PLSLONG<<7 | piano.KEY_D4S,
                           INS_NULL   <<7 | 0,
                           INS_PLSSHRT<<7 | piano.KEY_G3S,
                           INS_PLSLONG<<7 | piano.KEY_C4,
                           INS_NULL   <<7 | 0,
                           ; 40 -> 47:
                           INS_PLSSHRT<<7 | piano.KEY_C3S,
                           INS_PLSSHRT<<7 | piano.KEY_F3,
                           INS_PLSSHRT<<7 | piano.KEY_G3S,
                           INS_PLSLONG<<7 | piano.KEY_D4S,
                           INS_NULL   <<7 | 0,
                           INS_PLSSHRT<<7 | piano.KEY_G3S,
                           INS_PLSLONG<<7 | piano.KEY_C4,
                           INS_NULL   <<7 | 0,
                           ; 48 -> 55:
                           INS_PLSSHRT<<7 | piano.KEY_D3S,
                           INS_PLSSHRT<<7 | piano.KEY_G3,
                           INS_PLSSHRT<<7 | piano.KEY_A3S,
                           INS_PLSLONG<<7 | piano.KEY_F4,
                           INS_NULL   <<7 | 0,
                           INS_PLSSHRT<<7 | piano.KEY_A3S,
                           INS_PLSLONG<<7 | piano.KEY_C4S,
                           INS_NULL   <<7 | 0,
                           ; 56 -> 63:
                           INS_PLSSHRT<<7 | piano.KEY_D3S,
                           INS_PLSSHRT<<7 | piano.KEY_G3,
                           INS_PLSSHRT<<7 | piano.KEY_A3S,
                           INS_PLSLONG<<7 | piano.KEY_F4,
                           INS_NULL   <<7 | 0,
                           INS_PLSSHRT<<7 | piano.KEY_A3S,
                           INS_PLSSHRT<<7 | piano.KEY_C4S,
                           INS_PLSSHRT<<7 | piano.KEY_C4]



  const byte OCTAVE = 12
  const byte CHIRPMOD = OCTAVE * 0

  uword[] @nosplit pattern_chirp = [mkword(0,15), ; 16 notes total
                                    INS_NULL <<7 | 0,
                                    INS_NULL <<7 | 0,
                                    INS_NULL <<7 | 0,
                                    INS_NULL <<7 | 0,
                                    INS_CHIRP<<7 | (piano.KEY_G4  + CHIRPMOD),
                                    INS_CHIRP<<7 | (piano.KEY_G4S + CHIRPMOD),
                                    INS_CHIRP<<7 | (piano.KEY_A4S + CHIRPMOD),
                                    INS_CHIRP<<7 | (piano.KEY_C5  + CHIRPMOD),
                                    INS_CHIRP<<7 | (piano.KEY_G4  + CHIRPMOD),
                                    INS_CHIRP<<7 | (piano.KEY_G4S + CHIRPMOD),
                                    INS_CHIRP<<7 | (piano.KEY_A4S + CHIRPMOD),
                                    INS_CHIRP<<7 | (piano.KEY_C5  + CHIRPMOD),
                                    INS_CHIRP<<7 | (piano.KEY_G4  + CHIRPMOD),
                                    INS_CHIRP<<7 | (piano.KEY_G4S + CHIRPMOD),
                                    INS_CHIRP<<7 | (piano.KEY_A4S + CHIRPMOD),
                                    INS_CHIRP<<7 | (piano.KEY_C5  + CHIRPMOD)]

}





main {
  sub start() {
    cx16.screen_set_charset(3+2, 0) ; +2 for upper/lower charset's thin variant
    
    txt.clear_screen()
    
    music.init()
    music.play(song_data.info)
    
    music_debug.print_info()
    
    uword frame = 0
    
    repeat {
      if (frame%music.STATE_ticksPerRow) == 0 {
        ;txt.print(""whichOrder = "")
        ;printn.uw_dec(music.STATE_whichOrder)
        ;txt.print("", whichRow = "")
        txt.print(""whichRow = "")
        printn.ub_dec(music.STATE_whichRow)
        txt.nl()
      }
    
      sys.waitvsync()
      frame++
      
    }
    
  }
  
}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;""2nd_music_driver_2025-06-20\music.p8"":
; - PUBLIC ROUTINES -
; music.init() (only needs to be called once!)
; music.play(ptr_info)
; music.stop()
; music.stop_forced()

%import piano





; - EXAMPLE SONG -
; CAN BE PLAYED WITH THESE 2 LINES:
;music.init()
;music.play(song_example.info)

song_example {
  %option ignore_unused

  const ubyte PULSE    = %00000000
  const ubyte SAWTOOTH = %01000000
  const ubyte TRIANGLE = %10000000
  const ubyte NOISE    = %11000000
  
  const ubyte SILENT   = %00000000
  const ubyte LEFT     = %01000000
  const ubyte RIGHT    = %10000000
  const ubyte STEREO   = %11000000
  
  ; 6 bytes per instrument
  const ubyte INSTRUMENTS_LEN = sizeof(instruments)/6
  
  ; +1 for tick speed
  const ubyte ORDERS_LEN = sizeof(orders)/(CHANNELS+1)
  
  const ubyte PATTERNS_LEN = sizeof(patterns)/2
  
  ; This is what you pass to music.play()
  ; Note: mkword's first arg is the high byte, not the low byte!
  uword[] @nosplit info = [mkword(INSTRUMENTS_LEN, CHANNELS),
                           mkword(PATTERNS_LEN, ORDERS_LEN),
                           mkword(0, 0), ; (Reserved)
                           &instruments, &orders, &patterns]



  ; WAVEFORM|WIDTH, EAR_CHANLS|VOL, MAXVOL_6b, ATTACK_8b, SUSTAIN_8b, RELEASE_8b
  ;
  ; From psg.envelope()'s remarks:
  ;   maxvolume = 0-63
  ;   attack, sustain, release = 0-255 that determine the speed of the A/D/R:
  ;   attack  time:   MAXVOL/15/attack sec.   higher value = faster attack.
  ;   sustain time:   sustain/60 sec.         higher value = longer sustain.
  ;   release time:   MAXVOL/15/release sec.  higher vaule = faster release.
  ;
  ; (A max volume of 0 is interpreted as 'no note', which can be used for
  ;  envelopes longer than the row it resides in, as that current envelope
  ;  will continue until the next row with an instrument without a maxvol of 0.)
  ubyte[] instruments = [PULSE|63, STEREO|63,  63,  255, 10, 128,
                         TRIANGLE, STEREO|48,  63,    4, 60,   4]
  
  
  
  ; Accepts values 1-6 (ORDERS_LEN = sizeof(orders)/CHANNELS)
  const ubyte CHANNELS = 6
  
  ; Contains indices into the patterns array, where the actual
  ; index equals i-1, and a value of 0 means no pattern at all
  ;
  ; The first byte of an order entry however, is the tick speed (frames per row)
  ubyte[] orders = [12,  1, 2, 0, 0, 0, 0]
  
  
  
  ; This is an array of pointers
  ;
  ; In each pattern, the first byte correlates to its length mask.
  ; For example, a pattern with a length of 64 would have a mask of 63
  ; (Pattern length must be a power of 2!)
  ;
  ; If the 2nd byte is nonzero, that pattern's array lacks the @nosplit tag.
  ;
  ; The words after are the pattern's rows:
  ;   Bits 0-6 are: The note index; piano key starting from C0# (1-119)
  ;                 (A note index of 0 indicates a silent note)
  ;   Bits 7-F are: The instrument index (0-511)
  uword[] @nosplit patterns = [pattern_1, pattern_2]
  
  
  
  uword[] @nosplit pattern_1 = [mkword(0,3), ; Mask of 3, for a total of 4 notes
                                0<<7 | piano.KEY_C4,
                                0<<7 | piano.KEY_G4,
                                0<<7 | piano.KEY_C5,
                                0<<7 | piano.KEY_G4]
                                
  uword[] @nosplit pattern_2 = [mkword(0,0), ; Mask of 0, for a total of 1 note
                                1<<7 | piano.KEY_C4]

}





; Uses (at most) the upper 12 PSG channels
music {
  %option ignore_unused
  
  const uword NULL = 0 ; To make null pointer comparisons a bit more readable

  ; Byte indexes within song header
  const ubyte INDEX_CHANNELS        =  0 ; LSB of uword 0
  const ubyte INDEX_INSTRUMENTS_LEN =  1 ; MSB of uword 0
  const ubyte INDEX_ORDERS_LEN      =  2 ; LSB of uword 1
  const ubyte INDEX_PATTERNS_LEN    =  3 ; MSB of uword 1
 ;const ubyte INDEX_?               =  4 ; LSB of uword 2
 ;const ubyte INDEX_?               =  5 ; MSB of uword 2
  const ubyte INDEX_INSTRUMENTS     =  6
  const ubyte INDEX_ORDERS          =  8
  const ubyte INDEX_PATTERNS        = 10



  ; - SONG DATA (AKA CONTENTS OF SONG INFO) -
  ubyte SONG_channels
  ubyte SONG_instruments_len
  ubyte SONG_orders_len
  ubyte SONG_patterns_len
  ubyte SONG_order_size ; = channels+1 (used for alignment, mostly)
  
  uword SONG_ptr_info
  uword SONG_ptr_instruments
  uword SONG_ptr_orders
  uword SONG_ptr_patterns



  ; - STATE VARIABLES -
  bool STATE_isInit
  bool STATE_isPlaying
  
  uword STATE_whichOrder ; Remember, this is a uword, not a ubyte!
  ubyte STATE_whichRow
  ubyte STATE_whichTick ; Actually decrements, loading a new row at 0
  ubyte STATE_ticksPerRow
  ubyte STATE_highestMask
  
  ; For every note, switch to an alternate channel
  ; so that envelopes aren't cut off prematurely
  ; (This is never reinitialized on purpose, as it's redundant!)
  ;
  ; (Also, this is of type ubyte[] instead of bool[],
  ;  so I'm able to apply an XOR to easily flip the boolean)
  ubyte[6] STATE_altChannel
  
  ; Determines the length of each pattern
  ubyte[6] STATE_rowMasks
  
  ; Pointers to the currently loaded patterns
  uword[6] STATE_ptrs_curOrder


  
  
  
  sub init() {
    if STATE_isInit return
  
    psg.init()
    
    cx16.enable_irq_handlers(false)
    cx16.set_vsync_irq_handler(&music.irq_routine)
    
    STATE_isInit = true

  }
  
  
  
  
  
  asmsub get_voice_num(ubyte channel @Y) clobbers(A) -> ubyte @Y {
    ; Calculates the raw voice index, based on a channel index of 0 -> 5
    ; returns: (4 + Y<<1 + alt_channel[Y])
    ; (I might've been able to save some bytes by storing the boolean in X,
    ;  but that would clobber another register, which is probably worse)
    %asm {{
      lda p8v_STATE_altChannel, y
      beq _dont_increment ; If boolean is false, don't increment result
;_increment:
      tya
      asl    ; Y<<1
      clc
      adc #4 ; +4
      tay   
      iny    ; +alt_channel[Y]
      rts
_dont_increment:
      tya
      asl    ; Y<<1
      clc
      adc #4 ; +4
      tay
      rts
    }}
    
  }
  
  
  
  
  
  ; Like peekw, but for split arrays
  ; (I don't have time to make this an asmsub right now unfortunately)
  ; TODO: This doesn't work in the context in which it's used; why?
  sub get_split_uword(uword arr, ubyte arr_len, ubyte index) -> uword {
    uword result
    setlsb(result, arr[index])
    arr += (arr_len as uword)
    setmsb(result, arr[index])
    return result
  
  }





  sub apply_key(ubyte whichVoice, ubyte whichKey) { 
    void piano.key(whichVoice, whichKey&%01111111) 
    
  }





  ; Applies both voice and envelope
  sub apply_instrument(ubyte whichVoice, uword whichInstrument) { 
    whichInstrument *= 6 ; Instrument index to byte offset (each are 6 bytes)
    whichInstrument += SONG_ptr_instruments ; Byte offset to pointer
    
    ubyte wf_pw = whichInstrument[0] ; waveform | pulse_width
    ubyte ec_sv = whichInstrument[1] ; ear_channels | start_vol
    
    ubyte maxvol  = whichInstrument[2]
    ubyte attack  = whichInstrument[3]
    ubyte sustain = whichInstrument[4]
    ubyte release = whichInstrument[5]
    
    if maxvol == 0 {  return  }
    
    psg.voice(whichVoice, ec_sv&%11000000, ec_sv&%00111111,
                          wf_pw&%11000000, wf_pw&%00111111)
                         
    psg.envelope(whichVoice, maxvol, attack, sustain, release) 
  
  }




  
  sub load_order(uword whichOrder) {
   ;STATE_whichOrder = whichOrder  ; (This line should be redundant)
    whichOrder *= SONG_order_size ; Order index to byte offset
    whichOrder += SONG_ptr_orders ; Byte offset to pointer
  
    STATE_whichRow    = 0
    STATE_ticksPerRow = whichOrder[0]
    STATE_highestMask = %00000001 ; A mask of 1 bit by default
    
    whichOrder++ ; whichOrder = &whichOrder[1] (skips the order's tick rate)
    
    &ubyte loop_i = &cx16.r4L ; Effectively an alias for cx16.r4L
    ubyte loop_max = SONG_channels-1
    
     
    
    ; For each pattern ptr in current order
    for loop_i in 0 to loop_max {
      ubyte patternID = whichOrder[loop_i]
      
      &uword ptr_pattern = &cx16.r5 ; Alias for r5

      if patternID != 0 {
        ptr_pattern = peekw( SONG_ptr_patterns + (((patternID-1) as uword)<<1) )
      } else { ; A pattern ID of 0 indicates 'no pattern used'
        ptr_pattern = NULL
      }
      
      STATE_ptrs_curOrder[loop_i] = ptr_pattern
      
      
      
      if patternID != 0 {
        ; First byte of pattern is the mask
        ubyte rowMask = ptr_pattern[0]
        
        STATE_rowMasks[loop_i] = rowMask
        
        ; For finding the largest mask in all of the currently loaded patterns,
        ; which is used to determine when an order is supposed to end
        if STATE_highestMask < rowMask {  STATE_highestMask = rowMask  }
        
      }
    
    }
    
  }
  
  
  
  
  
  ; (Assumes order is already loaded)
  sub load_row(ubyte whichRow) {
    STATE_whichTick = STATE_ticksPerRow ; Decrements instead of incrementing
  
    &ubyte loop_i = &cx16.r4L ; Effectively an alias for cx16.r4L
    ubyte loop_max = SONG_channels-1
    
    
    
    ; For each pattern ptr in current order
    for loop_i in 0 to loop_max {
      uword ptr_curPattern = STATE_ptrs_curOrder[loop_i]
      
      if ptr_curPattern == NULL {  continue  }
      ubyte patternIsSplit = ptr_curPattern[1]
      ptr_curPattern += 2 ; Skip the pattern's mask and split value
      
      ubyte patternMask = STATE_rowMasks[loop_i]
      ubyte whichRowMasked  =  whichRow & patternMask
      
      
      
      uword rowValue
      
      if patternIsSplit != 0 {
        ; TODO: Figure out why this doesn't work
        ;rowValue = get_split_uword(ptr_curPattern, patternMask, whichRowMasked)
      } else {
        rowValue = peekw( ptr_curPattern + ((whichRowMasked as uword)<<1) )
      }
      
      
      ubyte whichKey        = lsb(rowValue) ;&%01111111 (this AND is redundant)
      ubyte whichInstrument = (rowValue>>7) as ubyte
      ubyte whichVoice      = get_voice_num(loop_i)
      
      if whichKey == 0 {  continue  }
      
      apply_key(whichVoice, whichKey) ; (Automatically unsets MSb of whichKey)
      apply_instrument(whichVoice, whichInstrument)
      
      STATE_altChannel[loop_i] ^= 1 ; Flip the relevant bit
    
    }
  
  }
  
  
  
  
  
  ; Just 1 instruction (a 65C02-specific instruction :D)
  ; Assuming that STATE_isPlaying is zeropage, 1 byte per call is actually saved
  ; by inlining this lol (otherwise, the byte count is the same; 3 per call)
  inline asmsub stop() clobbers() { %asm {{  stz p8v_STATE_isPlaying  }} }
  
  sub stop_forced() { stop() } ; TODO: Set all of the channels to mute here





  sub play(uword ptr_info) {
    if ptr_info == NULL {  return  }
    
    SONG_channels        = ptr_info[INDEX_CHANNELS]
    SONG_instruments_len = ptr_info[INDEX_INSTRUMENTS_LEN]
    SONG_orders_len      = ptr_info[INDEX_ORDERS_LEN]
    SONG_patterns_len    = ptr_info[INDEX_PATTERNS_LEN]
    SONG_order_size      = SONG_channels+1
    
    SONG_ptr_info        = ptr_info
    SONG_ptr_instruments = peekw(ptr_info + INDEX_INSTRUMENTS)
    SONG_ptr_orders      = peekw(ptr_info + INDEX_ORDERS)
    SONG_ptr_patterns    = peekw(ptr_info + INDEX_PATTERNS)
    
    STATE_whichOrder = 0
    STATE_whichRow = 0 ; So that order 0 is immediately loaded next irq
    STATE_whichTick = 0
    STATE_highestMask = 255 ; Full mask by default, until order 0 is loaded
    
    STATE_isPlaying = true
    
  }
  



  
  sub irq_routine() -> bool {
    
    if not STATE_isPlaying {  goto lbl_songStopped  }
    
    ubyte whichRowMasked  =  STATE_whichRow & STATE_highestMask 
    
    if whichRowMasked == 0 {
      ; TODO: Looping is broken. Fix it.
      load_order(STATE_whichOrder)
      STATE_whichOrder++
      ; Should be faster than a normal modulo
      if STATE_whichOrder >= SONG_orders_len {
        STATE_whichOrder -= SONG_orders_len
      }
    }
    
    if STATE_whichTick == 0 {
      load_row(whichRowMasked)
      STATE_whichRow++
    }
    
    STATE_whichTick--
    
    lbl_songStopped:

    return psg.envelopes_irq()
    
  }

}





;------------------------------------------------------------------------------;





%import textio
%import conv

; txt.clear_screen()
; txt.nl()

printn {
  %option ignore_unused

  sub ub_dec(ubyte v) { txt.print(conv.str_ub(v)) }
  sub  b_dec(byte  v) { txt.print(conv.str_b(v)) }
  sub uw_dec(uword v) { txt.print(conv.str_uw(v)) }
  sub  w_dec(word  v) { txt.print(conv.str_w(v)) }
  
  sub ub_bin(ubyte v) { txt.print(conv.str_ubbin(v)) }
  
  sub ub_hex(ubyte v) { txt.print(conv.str_ubhex(v)) }
  sub uw_hex(uword v) { txt.print(conv.str_uwhex(v)) }

}

music_debug {
  %option ignore_unused

  sub print_info() {
    txt.print(""channels        = "")
    printn.ub_dec(music.SONG_channels)
    txt.print(""\ninstruments_len = "")
    printn.ub_dec(music.SONG_instruments_len)
    txt.print(""\norders_len      = "")
    printn.ub_dec(music.SONG_orders_len)
    txt.print(""\npatterns_len    = "")
    printn.ub_dec(music.SONG_patterns_len)
    txt.print(""\norder_size      = "")
    printn.ub_dec(music.SONG_order_size)
    
    txt.print(""\nptr_instruments = $"")
    printn.uw_hex(music.SONG_ptr_instruments)
    txt.print(""\nptr_orders      = $"")
    printn.uw_hex(music.SONG_ptr_orders)
    txt.print(""\nptr_patterns    = $"")
    printn.uw_hex(music.SONG_ptr_patterns)
    txt.nl()
    
  }
  
  sub print_state() {
    txt.print(""isInit      = "")
    printn.ub_dec(music.STATE_isInit as ubyte)
    txt.print(""\nisPlaying   = "")
    printn.ub_dec(music.STATE_isPlaying as ubyte)
    
    txt.print(""\nwhichOrder  = "")
    printn.uw_dec(music.STATE_whichOrder) ; uword, not ubyte
    txt.print(""\nwhichRow    = "")
    printn.ub_dec(music.STATE_whichRow)
    txt.print(""\nwhichTick   = "")
    printn.ub_dec(music.STATE_whichTick)
    txt.print(""\nticksPerRow = "")
    printn.ub_dec(music.STATE_ticksPerRow)
    txt.print(""\nhighestMask = "")
    printn.ub_dec(music.STATE_highestMask)
    
    &ubyte loop_i = &cx16.r6L
    
    txt.print(""\naltChannel = ["")
    for loop_i in 0 to 5 {
      printn.ub_dec(music.STATE_altChannel[cx16.r4L])
      txt.print("", "")
    }
    txt.print(""]\n"")
    
    txt.print(""rowMasks = ["")
    for loop_i in 0 to 5 {
      printn.ub_dec(music.STATE_rowMasks[cx16.r4L])
      txt.print("", "")
    }
    txt.print(""]\n"")
    
    txt.print(""curOrder = ["")
    for loop_i in 0 to 5 {
      txt.chrout('$')
      printn.uw_hex(music.STATE_ptrs_curOrder[cx16.r4L])
      txt.print("", "")
    }
    txt.print(""]\n"")
  
  }
  
  sub print_arr_ub(str prefix, uword ptr, ubyte index) {
    txt.print(prefix)
    txt.print("" = $"")
    printn.ub_hex(ptr[index])
    txt.nl()
  
  }
  
  sub print_arr_uw(str prefix, uword ptr, ubyte index) {
    txt.print(prefix)
    txt.print("" = $"")
    printn.uw_hex(peekw( ptr + ((index as uword)<<1) ))
    txt.nl()
    
  }

}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;""2nd_music_driver_2025-06-20\piano.p8"":
%import psg

piano {
  ;%option no_symbol_prefixing, ignore_unused
  %option ignore_unused

  ; Referring to the index in the lookup table,
  ; not the actual frequency value, of course.
  const ubyte KEY_C0   =   0  ;   16.35Hz
  const ubyte KEY_C0S  =   1  ;   17.32Hz
  const ubyte KEY_D0   =   2  ;   18.35Hz
  const ubyte KEY_D0S  =   3  ;   19.44Hz
  const ubyte KEY_E0   =   4  ;   20.60Hz
  const ubyte KEY_F0   =   5  ;   21.82Hz
  const ubyte KEY_F0S  =   6  ;   23.12Hz
  const ubyte KEY_G0   =   7  ;   24.49Hz
  const ubyte KEY_G0S  =   8  ;   25.95Hz
  const ubyte KEY_A0   =   9  ;   27.50Hz
  const ubyte KEY_A0S  =  10  ;   29.13Hz
  const ubyte KEY_B0   =  11  ;   30.86Hz
  const ubyte KEY_C1   =  12  ;   32.70Hz
  const ubyte KEY_C1S  =  13  ;   34.64Hz
  const ubyte KEY_D1   =  14  ;   36.70Hz
  const ubyte KEY_D1S  =  15  ;   38.89Hz
  const ubyte KEY_E1   =  16  ;   41.20Hz
  const ubyte KEY_F1   =  17  ;   43.65Hz
  const ubyte KEY_F1S  =  18  ;   46.24Hz
  const ubyte KEY_G1   =  19  ;   48.99Hz
  const ubyte KEY_G1S  =  20  ;   51.91Hz
  const ubyte KEY_A1   =  21  ;   55.00Hz
  const ubyte KEY_A1S  =  22  ;   58.27Hz
  const ubyte KEY_B1   =  23  ;   61.73Hz
  const ubyte KEY_C2   =  24  ;   65.40Hz
  const ubyte KEY_C2S  =  25  ;   69.29Hz
  const ubyte KEY_D2   =  26  ;   73.41Hz
  const ubyte KEY_D2S  =  27  ;   77.78Hz
  const ubyte KEY_E2   =  28  ;   82.40Hz
  const ubyte KEY_F2   =  29  ;   87.30Hz
  const ubyte KEY_F2S  =  30  ;   92.49Hz
  const ubyte KEY_G2   =  31  ;   97.99Hz
  const ubyte KEY_G2S  =  32  ;  103.82Hz
  const ubyte KEY_A2   =  33  ;  110.00Hz
  const ubyte KEY_A2S  =  34  ;  116.54Hz
  const ubyte KEY_B2   =  35  ;  123.47Hz
  const ubyte KEY_C3   =  36  ;  130.81Hz
  const ubyte KEY_C3S  =  37  ;  138.59Hz
  const ubyte KEY_D3   =  38  ;  146.83Hz
  const ubyte KEY_D3S  =  39  ;  155.56Hz
  const ubyte KEY_E3   =  40  ;  164.81Hz
  const ubyte KEY_F3   =  41  ;  174.61Hz
  const ubyte KEY_F3S  =  42  ;  184.99Hz
  const ubyte KEY_G3   =  43  ;  195.99Hz
  const ubyte KEY_G3S  =  44  ;  207.65Hz
  const ubyte KEY_A3   =  45  ;  220.00Hz
  const ubyte KEY_A3S  =  46  ;  233.08Hz
  const ubyte KEY_B3   =  47  ;  246.94Hz
  const ubyte KEY_C4   =  48  ;  261.62Hz
  const ubyte KEY_C4S  =  49  ;  277.18Hz
  const ubyte KEY_D4   =  50  ;  293.66Hz
  const ubyte KEY_D4S  =  51  ;  311.12Hz
  const ubyte KEY_E4   =  52  ;  329.62Hz
  const ubyte KEY_F4   =  53  ;  349.22Hz
  const ubyte KEY_F4S  =  54  ;  369.99Hz
  const ubyte KEY_G4   =  55  ;  391.99Hz
  const ubyte KEY_G4S  =  56  ;  415.30Hz
  const ubyte KEY_A4   =  57  ;  440.00Hz
  const ubyte KEY_A4S  =  58  ;  466.16Hz
  const ubyte KEY_B4   =  59  ;  493.88Hz
  const ubyte KEY_C5   =  60  ;  523.25Hz
  const ubyte KEY_C5S  =  61  ;  554.36Hz
  const ubyte KEY_D5   =  62  ;  587.32Hz
  const ubyte KEY_D5S  =  63  ;  622.25Hz
  const ubyte KEY_E5   =  64  ;  659.25Hz
  const ubyte KEY_F5   =  65  ;  698.45Hz
  const ubyte KEY_F5S  =  66  ;  739.98Hz
  const ubyte KEY_G5   =  67  ;  783.99Hz
  const ubyte KEY_G5S  =  68  ;  830.60Hz
  const ubyte KEY_A5   =  69  ;  880.00Hz
  const ubyte KEY_A5S  =  70  ;  932.32Hz
  const ubyte KEY_B5   =  71  ;  987.76Hz
  const ubyte KEY_C6   =  72  ; 1046.50Hz
  const ubyte KEY_C6S  =  73  ; 1108.73Hz
  const ubyte KEY_D6   =  74  ; 1174.65Hz
  const ubyte KEY_D6S  =  75  ; 1244.50Hz
  const ubyte KEY_E6   =  76  ; 1318.51Hz
  const ubyte KEY_F6   =  77  ; 1396.91Hz
  const ubyte KEY_F6S  =  78  ; 1479.97Hz
  const ubyte KEY_G6   =  79  ; 1567.98Hz
  const ubyte KEY_G6S  =  80  ; 1661.21Hz
  const ubyte KEY_A6   =  81  ; 1760.00Hz
  const ubyte KEY_A6S  =  82  ; 1864.65Hz
  const ubyte KEY_B6   =  83  ; 1975.53Hz
  const ubyte KEY_C7   =  84  ; 2093.00Hz
  const ubyte KEY_C7S  =  85  ; 2217.46Hz
  const ubyte KEY_D7   =  86  ; 2349.31Hz
  const ubyte KEY_D7S  =  87  ; 2489.01Hz
  const ubyte KEY_E7   =  88  ; 2637.02Hz
  const ubyte KEY_F7   =  89  ; 2793.82Hz
  const ubyte KEY_F7S  =  90  ; 2959.95Hz
  const ubyte KEY_G7   =  91  ; 3135.96Hz
  const ubyte KEY_G7S  =  92  ; 3322.43Hz
  const ubyte KEY_A7   =  93  ; 3520.00Hz
  const ubyte KEY_A7S  =  94  ; 3729.31Hz
  const ubyte KEY_B7   =  95  ; 3951.06Hz
  const ubyte KEY_C8   =  96  ; 4186.00Hz
  const ubyte KEY_C8S  =  97  ; 4434.92Hz
  const ubyte KEY_D8   =  98  ; 4698.63Hz
  const ubyte KEY_D8S  =  99  ; 4978.03Hz
  const ubyte KEY_E8   = 100  ; 5274.04Hz
  const ubyte KEY_F8   = 101  ; 5587.65Hz
  const ubyte KEY_F8S  = 102  ; 5919.91Hz
  const ubyte KEY_G8   = 103  ; 6271.92Hz
  const ubyte KEY_G8S  = 104  ; 6644.87Hz
  const ubyte KEY_A8   = 105  ; 7040.00Hz
  const ubyte KEY_A8S  = 106  ; 7458.62Hz
  const ubyte KEY_B8   = 107  ; 7902.13Hz
  const ubyte KEY_C9   = 108  ; 8372.01Hz
  const ubyte KEY_C9S  = 109  ; 8869.84Hz
  const ubyte KEY_D9   = 110  ; 9397.27Hz
  const ubyte KEY_D9S  = 111  ; 9956.06Hz
  const ubyte KEY_E9   = 112  ;10548.08Hz
  const ubyte KEY_F9   = 113  ;11175.30Hz
  const ubyte KEY_F9S  = 114  ;11839.82Hz
  const ubyte KEY_G9   = 115  ;12543.85Hz
  const ubyte KEY_G9S  = 116  ;13289.75Hz
  const ubyte KEY_A9   = 117  ;14080.00Hz
  const ubyte KEY_A9S  = 118  ;14917.24Hz
  const ubyte KEY_B9   = 119  ;15804.26Hz
  
  
  
  ; PSG frequency lookup table (used by key(); private)
  ubyte[120] priv_freqs_lo = [44, 47, 49, 52, 55, 59, 62, 66, 70, 74, 78, 83, 88, 93, 99,104,111,117,124,132,139,148,156,166,176,186,197,209,221,234,248,  7, 23, 39, 57, 75, 95,116,138,162,186,213,241, 14, 45, 79,114,151,190,232, 20, 67,117,169,225, 28, 91,157,227, 46,125,208, 41,134,234, 83,194, 57,182, 58,199, 92,249,160, 81, 13,211,166,133,113,107,116,141,183,242, 64,162, 25,167, 76, 10,226,215,233, 27,110,229,129, 69, 51, 77,151, 19,196,173,210, 54,220,201,  2,138,102,155, 46, 38,136, 90,164,107,184]
  ubyte[120] priv_freqs_hi = [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  8,  8,  9,  9, 10, 10, 11, 12, 13, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 34, 36, 39, 41, 43, 46, 49, 52, 55, 58, 62, 65, 69, 73, 78, 82, 87, 93, 98,104,110,117,124,131,139,147,156,165]
  
  ; voice_num: 0-15, which: 0-119
  ; returns: the resulting raw frequency value
  sub key(ubyte voice_num, ubyte which) -> uword {
    uword freq_full = mkword(priv_freqs_hi[which], priv_freqs_lo[which])
    psg.freq(voice_num, freq_full)
    return freq_full 
    
  }

}"
rxC8PerH,dataNone,TestGuy1,JSON,Friday 20th of June 2025 06:00:07 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '017bf2345077268355225eee9445e14b0f9dfd592749dae75f2a63ca3138f16468ecc47058ccb2a0391b24ec21ce02de4d471b0ab4a0279f6c7deb6ef638977f8ad50a61a3c9ef8c1302f8b8d6f4bcdc89e3c0739bfcc8587654eb2a988589be34710658c8d8059c1e6a9897da6a6e6abdac3a482d2eda9a6da00b23b211863d',
  otherdata: [
    '48b92116fbfc294b2db714d7c40d00e5',
    '30748e0b2313e79e37212589c6af1bb1',
    'c1720d2d2a819813f456ee1f4618f9ba',
    'c9046a4fe87362c001d3e34cec14f863',
    'a59cfc560e71656fc2514653922d9bb9',
    '0fd1c3ca6836f26c766142078a3a39c8',
    '8b0f9b37967553de25c276a620e10ef0',
    '69187230da5d8ece033a36b7e73f9c71'
  ]
}"
n9VYf2iH,obj.js,eqeqwan21,JavaScript,Friday 20th of June 2025 04:39:56 AM CDT,"//v13_14 альтернатиная мнемосхема_маскировка команд
//v11++фото заголовки со ссылками																			  
""use strict"";
let hulla = new hullabaloo();
let box = null;
let circuit = null;
let stlog = null;
let dayly = null;
let lastip = null;
let lastmeter = null;
//Антон: отображение команд с учетом маски
let deviceObj = null;

let dt = null, mdt = null;
let liveMode = true;
let renewTimer = null;
let dtdt = null;
let commands = null;
var gallery_ro = true;
let waitingForAnswer = false;
let cmdSentMark = 0;
let get = parseQuery(window.location.search);
moment.locale(environment.language || window.navigator.userLanguage || window.navigator.language);


$(async function () {
  $(""#btnLive"").prop(""disabled"", true);
  let result;
  let userTown;
  if (environment.login_name.indexOf(""_"") !== -1) {
    userTown = '&town=' + environment.login_name.split('_')[0].toLowerCase()
  } else {
    userTown = ''
  }
  try {
    result = await $.ajax({
      url: environment.base_url + ""/"" + '?do=api&fn=devices&id=' + get['id'] + userTown,
      type: 'GET',
      dataType: ""json""
    });
//Антон: отображение команд с учетом маски
    deviceObj = result;
  } catch (error) {
    console.error(error);
    $(""#content"").html(""<h2>Device was not loaded</h2>"");
    return;
  }


  if (result.rows.length > 0)
    box = result.rows.slice(0)[0];
  else {
    $(""#content"").html(""<h2>Device not found</h2>"");
    return;
  }

  if (box.DimProfile_id !== null) {
    try {
      dayly = await $.ajax({
        url: environment.base_url + ""/"" + '?do=api&fn=dimdetail&now&id=' + box.DimProfile_id,
        type: 'GET',
        dataType: ""json""
      });
    } catch (error) {
      console.error(error);
    }
  }

  if (box.Type == 2)
    $(""#strongState"").text(i18next.t(""Brightness""));

  drawBoxInfo();
  try {
    result = await $.ajax({
      url: environment.base_url + ""/"" + '?do=api&fn=circuit&id=' + get['id'],
      type: 'GET',
      dataType: ""json""
    });

  } catch (error) {
    console.error(error);
    $(""#content"").html(""<h2>Pattern was not loaded</h2>"");
    return;
  }

  if (result.rows.length > 0)
    circuit = result.rows[0];
  else
    console.log(""Pattern not found"");

  let svg = """";
  if (circuit !== null) {
    let qs = circuit.qs;
    if (environment.language !== ""en"") {
      qs = qs.replace(/S/gi, ""K"");
    }

    try {
      svg = await $.ajax({
        url: environment.base_url + `/images/galbox.svg?v=${config.version}&noxml&cnf=` + qs,
        type: 'GET',
        processData: false
      });
      $(""#circuit"").html(`${svg}`);
      if (box.Name?.startsWith(""TL"") || box.Name?.startsWith(""G"")) await attachBackground();
    } catch (error) {
      console.error(error);
    }
  }

  stdatatable();
  meterdatatable();

  setTimeout(renew, 1);
  setTimeout(iprenew, 10);

  $(""#circuit svg"").addClass(""col-12"");
  $(""#circuit svg"").addClass(""p-0"");
  //Ссылки в зоголовках ""статистика"" и ""журнал состояния"" в форме Объект
  $(""#statlink"").attr(""href"", `${environment.base_url}/inlog?device=${get['id']}`);
  $(""#stlink"").attr(""href"", `${environment.base_url}/stlog?device=${get['id']}`);
  if (box.Smart) {
    try {
      result = await $.ajax({
        url: environment.base_url + ""/"" + '?do=api&fn=ServerCommand&type=1,3&DeviceType=' + box.Type,
        type: 'GET',
        dataType: ""json""
      });

    } catch (error) {
      console.error(error);
      return;
    }
    commands = result.rows;
    $(""#cmd"").find('option').remove();

    for (let key in commands) {
      if (commands[key].Letter == ""F"")
        continue;
      $(""#cmd"").append($(""<option></option>"")
          .attr(""value"", commands[key].id)
          .text(i18next.t(commands[key].Name)));
    }
  } else {
    $(""#manualDiv"").hide();
  }
//добавление картинки светильника из галлереи с проверкой её наличия, иначе - по умолчанию
  if (box.Type !== 1) {
    $.ajax({
      url: `${environment.base_url}/?do=api&fn=picture_list&Devices_id=${get['id']}&order=ASC&limit=1`,
      type: 'GET',
      dataType: ""json"",
      success: function (result) {
        if (result['list'].length > 0) {
          $(""#circuit"").html('<img class=""img-fluid"" src=""' + result['list'][0].src + '"">');
        } else {
          $(""#circuit"").html(`<img class=""img-fluid"" src=""${environment.base_url}/images/lamp.png"">`)
        }
      }
    });
    // $(""#circuit"").html(`<img class=""img-fluid"" src=""${environment.base_url}/images/lamp.png"">`);
  }

  $("".picture"").click(() => {
    galleryOpen(get['id'])
  });
  /*
  let pl = await getPictureList(get['id'], 'desc', 100);
  if(pl.length == 0) {
    $("".picture"").click( ()=>{galleryOpen(get['id'])});
  } else {
    let html="""";
    let i=0;
    pl.forEach(el => {
      let title = """";
      let opt = {month: ""long"", day:""numeric"", year:""numeric""};
      let separ="", "";
      let opt2= {hour:""numeric"", minute:""numeric""};
      let disp="""";

      if(el.Exiftime!==null) {
        let dda = el.Exiftime.split("" "");
        if(dda.length==2) {
          let dds = dda[0].replaceAll("":"",""-"") + "" "" + dda[1]+""Z"";
          let dd = new Date(dds);

          if(!(dd===NaN) && !dd!=""Invalid Date"") {
            disp = ""<i class='fa fa-camera'></i>&nbsp;"" + dd.toLocaleDateString(environment.language, opt) + separ +
            dd.toLocaleTimeString(environment.language, opt2);
          }
        }
      }

      let dd = new Date(el.Loaded+""Z"");
      if(!(dd===NaN) && !dd!=""Invalid Date"") {
        if(disp!="""")
          disp+=""<br>"";
        disp += ""<i class='fa fa-upload'></i>&nbsp;"" + dd.toLocaleDateString(environment.language, opt) + separ +
        dd.toLocaleTimeString(environment.language, opt2);
      }

      title = `data-container=""body"" data-html=""true"" data-placement=""top"" data-toggle=""tooltip"" title=""${disp}""`;

      html += `<div ${title}><img onclick=""galleryOpen(${get['id']}, ${i})"" class=""border border-primary rounded imgpic"" width=""60px"" height=""60px"" src=""${el.src}&thumb""></div>`;
      i++;
    });
    $(""#pg"").html(html);
    $('[data-toggle=""tooltip""]').tooltip({
      boundary:""viewport"",
      html: true
    });
  }
  */

});

async function runCmd() {
  $(""#btnCmd"").prop(""disabled"", true);
  setTimeout(() => $(""#btnCmd"").prop(""disabled"", false), 1500);
  let srvcmd = {};
  $(""#circuit"").addClass(""waiting"");
  waitingForAnswer = true;
  cmdSentMark = Date.now();
  srvcmd.cmd = parseInt($(""#cmd"").val());
  let selcmd = commands.find(x => x.id == srvcmd.cmd);
  let cmdtext = i18next.t(selcmd.Name);

  srvcmd.devs = [box.id];

  let result = null;
  try {
    result = await $.ajax({
      url: environment.base_url + ""/"" + '?do=api&fn=makecalls',
      data: JSON.stringify(srvcmd),
      type: 'PUT',
      contentType: ""application/json; charset=utf-8"",
      dataType: ""json""
    });

  } catch (error) {
    console.error(error);
    hulla.send(i18next.t(""Device control error""));
    return false;
  }

  if (result.success) {
    switch (result.queued) {
      case 0:
        hulla.send(i18next.t(""Command not queued""));
        break;
      case 1:
        hulla.send(`${i18next.t(""Command"")} ""${cmdtext}"" ${i18next.t(""queued"")}`, ""success"");
        break;
      default:
        hulla.send(`${cmdtext} - ${i18next.t(""Command queued for multiple devices"")} (${result.queued})`, ""success"");
        break;
    }
  } else {
    hulla.send(i18next.t(""An error occurred while adding commands to the queue""));
    console.log(result);
  }

  return false;
}

let pbox = null, plines = null;

async function drawBoxInfo() {
  $(""#Phone"").html(number10html(box.Phone));
//Добавление строки ""Серийный номер""	
  for (let fld of [""CustomNum"", ""Name"", ""sn"", ""DimProfile_Name"", ""Station"", ""ControlTime""]) {
    let val = box[fld];
    if (val !== null) {
      if (fld == ""ControlTime"")
        $(""#"" + fld).text(val.substr(0, 5));
      else
        $(""#"" + fld).text(val);
    }
  }
  if (box.Station == null && box.Lines_id) {
    //let pbox =null, plines = null;
    try {
      pbox = await $.ajax({
        url: environment.base_url + ""/"" + '?do=api&fn=devices&id=' + box.Box_id,
        type: 'GET',
        dataType: ""json""
      });

    } catch (error) {
      console.error(error);
      return;
    }
    try {
      plines = await $.ajax({
        url: environment.base_url + ""/"" + '?do=api&fn=lines&id=' + box.Box_id,
        type: 'GET',
        dataType: ""json""
      });

    } catch (error) {
      console.error(error);
      return;
    }

    if (pbox && plines) {
      let ln = plines.rows.find(x => x.id == box.Lines_id)
      let txt = ln.Num.toString().padStart(2, ""0"") + "". "" + i18next.t(appdata.LinesType.find(x => x.id == ln.Type).Name);

      if (ln.Switch > 0)
        txt += "" "" + i18next.t(appdata.Switches.find(x => x.id == ln.Switch).Name);
      if (ln.Phase > 0)
        txt += "", "" + i18next.t(""Phase"") + "" "" + appdata.Phases.find(x => x.id == ln.Phase).Name;

      $(""#Station"").html(`<a target=""obj${box.Box_id}"" href=""${environment.base_url}/obj?id=${box.Box_id}"" id=""aStation""></a>, ${txt}`);
      $(""#aStation"").text(`${i18next.t(""Box"")} № ${pbox.rows[0].CustomNum}`);
    }
  }
  $(""#Mode"").text(i18next.t(appdata.AutoModes.find(x => x.id == box.Mode).Name));
  $(""#Location"").text(makeAddress(box));

  $(""#shiftdiv"").hide();

  daylyTable();
}


function daylyTable() {
  if (dayly == null)
    return;

  let drw = dayly.rows;
  let aShift = null;
  if (box.PardShift)
    aShift = box.PardShift.split("","");

  let str1 = ""<tr>"", str2 = ""<tr>"", str3 = ""<tr>"";
  for (let i = 0; i < config.pard_maxvalue; i++) {
    let time = '', val = '';
    if (!(drw[i] === undefined)) {

      time = drw[i].Time.substr(0, 5);
      if (box.Type == 2) //lamp
        val = """" + drw[i].DimValue + ""%"";
      else
        val = SwitchStateForMask(drw[i].DimValue);//Антон: отображение команд с учетом маски
    }
    if (aShift) {
      let tt = '';
      if (aShift[i]) {
        let tti = parseInt(aShift[i]);
        let sign = """";
        if (tti < 0)
          sign = ""-"";
        if (tti > 0)
          sign = ""+"";
        tti = Math.abs(tti);
        let min = tti % 60;
        let hr = (tti - min) / 60;

        tt = `${sign}${new Intl.NumberFormat(environment.language, {minimumIntegerDigits: 2}).format(hr)}:${new Intl.NumberFormat(environment.language, {minimumIntegerDigits: 2}).format(min)}`;
      }
      str3 += `<td class=""text-center"">${tt}</td>`;
    }


    str1 += `<td class=""text-center"">${time}</td>`;
    str2 += `<td class=""text-center"">${val}</td>`;
  }
  str1 += ""</tr>"";
  str2 += ""</tr>"";
  $(""#dimDetail"").append(str1);

  if (aShift) {
    str3 += ""</tr>"";
    $(""#dimDetail"").append(str3);
  }
  $(""#dimDetail"").append(str2);
}

let loadfail = 0;

async function dataload() {
  let url = environment.base_url + ""/"" + ""?do=api&fn=stlog&limit=64&device="" + get['id'];
  let result, ret = false;
  try {
    result = await $.ajax({
      url: url,
      type: 'GET',
      dataType: ""json"",
      cache: false
    });
  } catch (error) {
    console.log(""Error: "", error);

    if (error.status == 401) //unautorized
      window.location = environment.base_url + ""/"" + ""?do=login&b="" + encodeURIComponent(window.location);

    loadfail++;
    if (stlog === null)
      $(""#content"").html(""<h2>Log was not loaded</h2>"");
    else if (loadfail > 1) {
      hulla.send(i18next.t(`No connection to the server (${error.statusText})`));
      loadfail = 0;
    }
    return ret;
  }
  loadfail = 0;
  if (stlog == null || stlog.timestamp != result.timestamp) {
    stlog = result;
    ret = true;
  }

  return ret;
}


async function ipload() {
  let url = environment.base_url + ""/"" + ""?do=api&fn=lastip&device="" + get['id'];
  let result, ret = false;
  try {
    result = await $.ajax({
      url: url,
      type: 'GET',
      dataType: ""json"",
    });
  } catch (error) {
    console.log(""Error: "", error);
    return ret;
  }
  if (lastip == null || lastip.timestamp != result.timestamp) {
    lastip = result;
    ret = true;
  }

  return ret;
}

async function meterload() {
  let url = environment.base_url + ""/"" + ""?do=api&fn=lastmeter&device="" + get['id'];
  let result, ret = false;
  try {
    result = await $.ajax({
      url: url,
      type: 'GET',
      dataType: ""json"",
    });
  } catch (error) {
    console.log(""Error: "", error);
    return ret;
  }
  if (lastmeter == null || result.timestamp != lastmeter.timestamp) {
    lastmeter = result;
    ret = true;
  }

  return ret;
}


async function renew() {
  // let nextt = 1000;
  // let isnew = await dataload();
  // if (isnew) {
  //   onlogchane();
  //   nextt = 2000;
  // }
  // setTimeout(renew, nextt);
  if (!liveMode) return;
  let nextt = 1000;
  const isnew = await dataload();
  if (isnew) {
    onlogchane();
    nextt = 2000;
  }
  renewTimer = setTimeout(renew, nextt);
}

async function iprenew() {

  let nextt = 1000;
  let isnew = await ipload();

  if (isnew) {
    if (lastip !== null && lastip.rowCount > 0) {
      let li = lastip.rows[0];
      let m = moment(li.unixtime * 1000);
      $(""#iptime"").text(m.format(""L LT""));
      $(""#ipdata"").text(li.Msg);
      $(""#divstat"").show();
    } else
      $(""#divstat"").hide();

    let isnewmeter = await meterload();
    if (isnewmeter) {
      if (lastmeter !== null && lastmeter.rowCount > 0) {
        let lm = lastmeter.rows[0];

        let dd = new Date(lm.Timestamp + ""Z"");
        let disp = dd.toLocaleDateString(environment.language) + "" "" +
            dd.toLocaleTimeString(environment.language, {hour: ""numeric"", minute: ""numeric""});
        $(""#metertime"").text(disp);
        $(""#meterlink"").attr(""href"", `${environment.base_url}/meterlog?device=${get['id']}`);
//Открытие новой вкладки для ""Показания учета""
        //$(""#meterlink"").attr(""target"", `meterlog${get['id']}`);
        mdt.ajax.reload();
        $(""#meterstat"").show();
      } else
        $(""#meterstat"").hide();
    }

    nextt = 5000;
  }
  setTimeout(iprenew, nextt);
}


async function onlogchane() {
  if (dt != null) {
    dt.ajax.reload();
    $('[data-toggle=""tooltip""]').tooltip('dispose');
    $("".tooltip"").remove();
    $('[data-toggle=""tooltip""]').tooltip();
  }
  let result = null;

  try {
    result = await $.ajax({
      url: environment.base_url + ""/"" + ""?do=api&fn=states&Devices_id="" + get['id'],
      type: 'GET',
      dataType: ""json""
    });
  } catch (error) {
    console.error(error);
  }

  if (result !== null && result.rows.length > 0) {
    let state = result.rows[0];
    setSvgstate(state);
    setTextstate(state);
    if (waitingForAnswer) {
      const lastEventTime = stlog?.rows?.[0]?.unixtime
          ? stlog.rows[0].unixtime * 1000
          : state.unixtime * 1000;

      if (lastEventTime > cmdSentMark) {
        $(""#circuit"").removeClass(""waiting"");
        waitingForAnswer = false;
      }
    }
  }
}

function setTextstate(state) {
  let m = moment(state.unixtime * 1000);
  $(""#StateTime"").text(m.format(""LT, L""));
  if (box.Type == 2)
    $(""#SwState"").text("""" + state.State + ""%"");
  else
    $(""#SwState"").text(SwitchStateForMask(state.State));//Антон: отображение команд с учетом маски
  let mode = state.Mode == 4 ? ""Manual"" : ""Auto"";
  mode = i18next.t(mode);
  if (state.Mode == 1)
    mode += "", "" + box.DimProfile_Name;
  $(""#CurrentMode"").text(mode);

  let door = i18next.t(""Closed"");
  if (!state.Door)
    door = '<span class=""text-danger"">' + i18next.t(""Open"") + ""</span>"";
  $(""#DoorStatus"").html(door);


  let sync = i18next.t(""Synced"");
  if (state.Ous)
    sync = '<span class=""text-danger"">' + i18next.t(""Out of sync"") + ""</span>"";
  $(""#SyncStatus"").html(sync);

}

function setSvgstate(state) {

  let onoff = SwitchState(state.State);

  const ruge = ""#ecabab"";
  const salat = ""#abecab"";

  const errorColor = state.Trouble == STATE_ERROR_UNKNOWN ? ruge : ""red"";
  const greenColor = state.Trouble == STATE_ERROR_UNKNOWN ? salat : ""green"";

  //const phasecolor = state.Power?""green"":ruge;
  let aphst = [];
  for (let i = 0; i < 3; i++) {
    let plet = String.fromCharCode(""A"".charCodeAt() + i);
    let phst = state.Power & (1 << i);
    aphst[i] = phst;
    let phasecolor = phst ? greenColor : errorColor;
    $(`#phase_${plet}`).css(""stroke"", phasecolor);
//V11
    $(""#Volt"" + i).text(plet);
    if (state.PhaseV) {
      let aVolt = JSON.parse(state.PhaseV);
      if (aVolt[i] !== null && aVolt[i] > 1)
        $(""#Volt"" + i).text(aVolt[i]);
    }
  }
  //$("".phase"").css(""stroke"",phasecolor);


// КОНТАКТОРЫ
  for (let i = 1; i <= 4; i++) {
    let swtrouble = state.Trouble & (1 << (i - 1)); 	//аварийность контактора
    let altsw = state.Trouble & (1 << (i + 27)); 		//альтернативное включение контактора
    let on = (onoff[i - 1] !== '0'); 					// значение управления on/off && aphst[0]; 20.07.21 - remove Phase A falsification
    // Команда на включение ON
    if (on) {
      $(`.S${i}_on`).attr(""visibility"", ""visible"");		//видимость состояния on
      $(`.S${i}_off`).attr(""visibility"", ""hidden"");		//скрыть состояние off
      $(`.S${i}_onoff`).attr(""visibility"", ""hidden"");	//скрыть состояние onoff
      $(`.S${i}_offon`).attr(""visibility"", ""hidden"");	//скрыть состояние offon
      let swc = ""green"";
      $(`#S${i}_rect1`).css(""fill"", ""#AFEEEE"");			// левый прямоугольник (голубой)
      $(`#S${i}_rect2`).css(""fill"", swc);				// правый прямоугольник ""зеленый""
      $(`#S${i}_tilda`).css(""stroke"", swc);				//цвет контура синусоиды ""зеленый""
      $(`#S${i}_tilda`).css(""fill"", swc);				//цвет заполнения синусоиды ""зеленый""
      $(`.fuse_S${i}`).css(""fill"", swc);					//предохранители под напряжением ""зеленые""
      //Отсутствие фазы «А»
      if (!aphst[0]) {
        $(`.S${i}_off`).attr(""visibility"", ""hidden"");		// не видимость контактора, как Off
        $(`.S${i}_on`).attr(""visibility"", ""hidden"");		//не видимость контактора, как ON
        $(`.S${i}_onoff`).attr(""visibility"", ""visible"");	//видимость состояния onoff
        $(`.S${i}_offon`).attr(""visibility"", ""hidden"");	//скрыть состояние offon
        swc = salat;
        $(`#S${i}_rect1`).css(""fill"", ""#AFEEEE"");			// левый прямоугольник ""голубой""
        $(`#S${i}_rect2`).css(""fill"", swc);				// правый прямоугольник ""салатный""
        $(`#S${i}_tilda`).css(""stroke"", ""white"");			//белый синус
        $(`#S${i}_tilda`).css(""fill"", ""white"");			//белый синус
        $(`.fuse_S${i}`).css(""fill"", ""white"");				//предохранители ""белые""
        if (altsw) {											//если альтернативно-включенный контактор
          $(`.S${i}_onoff`).attr(""visibility"", ""hidden"");	//не видимость состояния onoff
          $(`.S${i}_offon`).attr(""visibility"", ""visible"");	//видимость состояния offon
          $(`#S${i}_rect2`).css(""fill"", ""red"");				// правый прямоугольник
          $(`.fuse_S${i}`).css(""fill"", ""green"");				//предохранители под напряжением ""зеленые""_07_09
        }
      }
      //аварийность контактора
      if (swtrouble) {
        $(`.S${i}_onoff`).attr(""visibility"", ""visible"");	// видимость контактора, как onoff
        $(`.S${i}_offon`).attr(""visibility"", ""hidden"");	//скрыть состояние offon
        $(`.S${i}_off`).attr(""visibility"", ""hidden"");		// не видимость контактора, как Off
        $(`.S${i}_on`).attr(""visibility"", ""hidden"");		//не видимость включенного контактора
        $(`#S${i}_rect1`).css(""fill"", errorColor);			// левый прямоугольник ""красный""
        $(`#S${i}_rect2`).css(""fill"", salat);				// правый прямоугольник ""салатный""
        $(`#S${i}_tilda`).css(""stroke"", ""white"");			//белый синус
        $(`#S${i}_tilda`).css(""fill"", ""white"");			//белый синус
        $(`.fuse_S${i}`).css(""fill"", ""white"");				//предохранители ""белые""
      }
    }
    // Команда на выключение OFF
    else {
      $(`.S${i}_on`).attr(""visibility"", ""hidden"");		//скрыть состояние ON
      $(`.S${i}_onoff`).attr(""visibility"", ""hidden"");	//скрыть состояние onoff
      $(`.S${i}_offon`).attr(""visibility"", ""hidden"");	//скрыть состояние offon
      $(`.S${i}_off`).attr(""visibility"", ""visible"");		//показать состояние OFF
      $(`#S${i}_rect2`).css(""fill"", ""white"");			// правый прямоугольник ""белый""
      $(`#S${i}_rect1`).css(""fill"", ""#AFEEEE"");			// левый прямоугольник голубой
      $(`#S${i}_tilda`).css(""stroke"", ""green"");			//цвет контура синусоиды
      $(`#S${i}_tilda`).css(""fill"", ""green"");			//цвет заполнения синусоиды
      $(`.fuse_S${i}`).css(""fill"", ""white"");				//предохранители
      // Отсутствие фазы А
      if (!aphst[0]) {
        $(`#S${i}_tilda`).css(""stroke"", ""white"");	//белый синус
        $(`#S${i}_tilda`).css(""fill"", ""white"");
      }	//белый синус
      // Авария контактора
      if (swtrouble) {
        $(`#S${i}_rect1`).css(""fill"", errorColor);		// левый прямоугольник красный
        $(`#S${i}_tilda`).css(""stroke"", ""white"");		//белый синус
        $(`#S${i}_tilda`).css(""fill"", ""white"");
      }		//белый синус
      // Альтернативное включение
      if (altsw) {										//если есть альтернативно-включенный контактор
        $(`.S${i}_off`).attr(""visibility"", ""hidden"");
        $(`.S${i}_offon`).attr(""visibility"", ""visible"");
        $(`#S${i}_rect2`).css(""fill"", ""red"");			// правый прямоугольник красный
        $(`.fuse_S${i}`).css(""green"");				//предохранители под напряжением ""зеленые""_07_09
      }
    }
  }

//ПРЕДОХРАНИТЕЛИ	
  for (let i = 0; i < 3; i++)
    if (!aphst[i])
      $(`.fuse_P${i}`).css(""fill"", ""none"");

//V10__Отображение значений напряжения на линиях/предохранителях	
  let volt = null;
  try {
    volt = JSON.parse(state.Voltage);
  } catch (e) {

  }
//V11	
  $('[id^=""fuse_""]').find(""title"").remove();
  for (let i = 1; i <= 24; i++) {
    let ftrouble = state.Trouble & (1 << (i + 3));
    $(`.fuse_${i}_rect`).attr(""visibility"", ""hidden""); 	//V14 	Не видимость знака стрелок
    if (volt) {
      let fVolt = volt[i - 1];
      if (fVolt) {
        $(`#fuse_${i}_rect`).css(""fill"", ""green"");
        let titlestr = fVolt > 1 ? fVolt + ""V"" : ""⚡"";
        let title = document.createElementNS(""http://www.w3.org/2000/svg"", ""title"");
        title.textContent = titlestr;
//V11				
        $(`#fuse_${i}`).append(title);
      } else
        $(`#fuse_${i}_rect`).css(""fill"", ""white"");

//V14 окраска встречки градиентом ""зеленого"" и символ ""стрелки"" 
      if (ftrouble && fVolt) {
        $(`#fuse_${i}_rect`).css(""fill"", ""url(#MyGradient)"");
        $(`.fuse_${i}_rect`).attr(""visibility"", ""visible""); 	// видимость знака стрелок
      }

//V14  окраска пониженного напряжения градиентом2 ""зеленого"" 
      if (fVolt < 180 && fVolt > 30) {
        $(`#fuse_${i}_rect`).css(""fill"", ""url(#MyGradient2)"");
        $(`.fuse_${i}_rect`).attr(""visibility"", ""hidden""); 	// не видимость знака стрелок
      }

      if (ftrouble && !fVolt)
        $(`#fuse_${i}_rect`).css(""fill"", errorColor);

    }

    //else {
    //if(ftrouble)
    //$(`#fuse_${ i }_rect`).css(""fill"",errorColor);}

  }
}

function SwitchState(num) {
  if (num === null)
    return ""-"";

  num = Math.min(num, 0b1111);

  return num.toString(2).padStart(""4"", ""0""); //For robot
}

//Антон: отображение команд с учетом маски
function SwitchStateForMask(num) {
  if (num === null)
    return ""-"";
  let maskCommand = box ? box.Mask_Command : ''
  if (!maskCommand) {
    num = Math.min(num, 0b1111);

    return num.toString(2).padStart(""4"", ""0"");
  }
  let len = maskCommand ? maskCommand.length : 4;

  let binStr = num.toString(2).padStart(len, ""0"");

  let result = """";
  for (let i = 0; i < len; i++) {
    if (maskCommand[i] === ""1"") {
      result += binStr[i];
    }
  }
  return result;
}

function meterdatatable() {
  mdt = $('#meterlog').DataTable({
    ""ajax"": function (data, callback, settings) {
      let dt = [];
      if (lastmeter !== null)
        dt = lastmeter.rows;
      callback({data: dt});
    },
    ""info"": false,
    ""rowId"": ""id"",
    ""language"": datatables_locale,
    ""paging"": false,
    ""ordering"": false,
    ""searching"": false,
    ""scrollX"": true,
    ""columns"": [
      {
        ""data"": ""Tag"",
        render: function (data, type, row) {
          return i18next.t(""msg_meter_"" + data);
        }
      },
      {
        ""data"": ""Value"", className: 'text-right',
        render: function (data, type, row) {
          let tag = appdata.Meter[row.Tag];
          if (tag.type == ""decimal"") {
            let num = parseFloat(data);
            if (type == ""export"")
              return num;
            return Intl.NumberFormat(environment.language, {minimumFractionDigits: 3}).format(num);
          }
          return data;
        }
      },
    ],
  });

  mdt.on(""draw"", function () {
    $('[data-toggle=""tooltip""]').tooltip();
  });

  mdt.on(""init"", function () {
    $('[data-toggle=""tooltip""]').tooltip();
  });
}

function stdatatable() {

  dt = $('#stlog').DataTable({
    ""ajax"": function (data, callback, settings) {
      if (stlog !== null)
        callback({data: stlog.rows});
    },
    ""info"": false,
    ""rowId"": ""id"",
    ""language"": datatables_locale,
    ""paging"": false,
    ""ordering"": false,
    ""searching"": false,
    ""scrollX"": true,
    ""scrollY"": ""27rem"",
    ""scrollCollapse"": true,
    ""deferRender"": true,

    ""columns"": [
      {""data"": ""id"", visible: false},
      {
        ""data"": ""Timestamp"",
        render: function (data, type, row) {
          if (type == ""display"") {
            let m = moment(row.unixtime * 1000);
            let td = moment();
            let fs = ""L LT"";
            if (td.isSame(m, 'd'))
              fs = ""LT"";
            let tz = row.tz.charAt(0) == ""-"" ? """" : ""+"" + row.tz;
            let stime = data + "" "" + tz;
            return `<span data-toggle=""tooltip"" title=""${stime}"">${m.format(fs)}</span>`;
          }
          return data;
        }
      },

      {
        ""data"": ""Mode"",
        render: function (data, type, row) {
          let strm = i18next.t(""Unmanaged"");
          if (row.Smart)
            strm = i18next.t(appdata.AutoModes.find(x => x.id == data).Name);

          return strm;
        }
      },

      {
        ""data"": ""State"",
        ""className"": ""text-center"",  //Антон: центровка отображения команд с учетом маски
        render: function (data, type, row) {
          let str = data + ""%"";
          if (row.Type == 1) {//Box
            str = SwitchStateForMask(data);//Антон: отображение команд с учетом маски
          }
          return str;
        }

      },
      {
        ""data"": ""Sip"",
        ""className"": ""text-center text-nowrap"",
        render: function (data, type, row) {
          if (type == ""display"") {
            let ret = """";
            if (row.Power >= 7 || (row.Power && box.Type == 2))
              ret = `<span class=""fa fa-plug text-success"" data-toggle=""tooltip"" title=""${i18next.t('Power Ok')}""></span>&nbsp;`;
            else {
              let title = i18next.t('Power Fail');
              title += "" ("" + reverseString(row.Power.toString(2).padStart(3, ""0"")) + "")"";

              ret = `<span class=""fa fa-plug text-danger"" data-toggle=""tooltip"" title=""${title}""></span>&nbsp;`;
            }

            if (!row.Trouble)
              ret += `<span class=""fa fa-check-circle text-success"" data-toggle=""tooltip"" title=""${i18next.t('Facility is Ok')}""></span>&nbsp;`;
            else
              ret += `<span class=""fa fa-exclamation-triangle text-danger"" data-html=""true"" data-toggle=""tooltip"" title=""${errDecode(row.Trouble, box.Type)}""></span>&nbsp;`;


            if (data)
              ret += `<span class=""fa fa-phone-square text-success"" data-toggle=""tooltip"" title=""${i18next.t('SIP is Ok')}""></span>&nbsp;`;
            else
              ret += `<span class=""fa fa-phone-square text-danger"" data-toggle=""tooltip"" title=""${i18next.t('SIP fault')}""></span>&nbsp;`;

            if (row.Ip)
              ret += `<span class=""fa fa-wifi text-success"" data-toggle=""tooltip"" title=""${i18next.t('IP is Ok')}""></span>&nbsp;`;
            else
              ret += `<span class=""fa fa-wifi text-danger"" data-toggle=""tooltip"" title=""${i18next.t('IP fault')}""></span>&nbsp;`;

            if (!row.Timeallert)
              ret += `<span class=""fa fa-clock-o text-success"" data-toggle=""tooltip"" title=""${i18next.t('Clock is Ok')}""></span>&nbsp;`;
            else
              ret += `<span class=""fa fa-clock-o text-danger"" data-toggle=""tooltip"" title=""${i18next.t('Clock error')}""></span>&nbsp`;

            if (row.Controller)
              ret += `<span class=""fa fa-microchip text-success"" data-toggle=""tooltip"" title=""${i18next.t('Controller is OK')}""></span>&nbsp`;
            else
              ret += `<span class=""fa fa-microchip text-danger"" data-toggle=""tooltip"" title=""${i18next.t('Controller error')}""></span>&nbsp`;

            if (row.Door)
              ret += `<span class=""fa fa-lock text-success"" data-toggle=""tooltip"" title=""${i18next.t('Case closed')}""></span>&nbsp`;
            else
              ret += `<span class=""fa fa-unlock text-danger"" data-toggle=""tooltip"" title=""${i18next.t('Case open')}""></span>&nbsp`;

            if (row.Ous)
              ret += `<span class=""fa fa-refresh text-danger"" data-toggle=""tooltip"" title=""${i18next.t('Out of sync')}""></span>`;
            else
              ret += `<span class=""fa fa-refresh text-success"" data-toggle=""tooltip"" title=""${i18next.t('Synced')}""></span>`;

            return ret;

          }
          return data;
        }
      },


      {
        ""data"": ""DimProfileName"",
        ""className"": ""text-nowrap"",
        render: function (data, type, row) {
          let strd = """";
          let title = """"
          if (row.Smart) {

            if (!(row.IncomingLog_id === null)) {
              title = i18next.t(""Notification"");
              if (!(row.Status_name === null))
                strd = escapeQuote(i18next.t(row.Status_Name)) + "" "";
              if (!(row.RemoteIP === null)) {
                strd = i18next.t(""Statistics"") + "" "";
                title = ""IP: "" + row.RemoteIP;
              }
              strd += ""(&lArr;)"";

              if (type == ""display"")
                strd = `<span data-toggle=""tooltip"" title=""${title}"">${strd}</span>`;
            }
            if (!(row.OutgoingLog_id === null)) {
              strd = ""&rArr;"";
              strd = escapeQuote(i18next.t(row.Command_Name)) + "" ("" + strd + "")"";
              if (row.IP_Name)
                strd = escapeQuote(i18next.t(row.IP_Name)) + "", "" + strd;
              title = i18next.t(""Command"");
              if (type == ""display"")
                strd = `<span data-toggle=""tooltip"" title=""${title}"" class=""text-${row.Hangupcause == 17 ? 'success' : 'danger'}"">${strd}</span>`;

            }
            if (!(row.DimProfile_id === null)) {
              strd = data;
              title = i18next.t(""Shedule"");
              if (type == ""display"")
                strd = `<span data-toggle=""tooltip"" title=""${title}""}"">${strd}</span>`;
            }
          }
          return strd;
        }
      }

    ]

  });

  dt.on(""draw"", function () {
    $('[data-toggle=""tooltip""]').tooltip();

  });

  dt.on(""init"", function () {
    $('[data-toggle=""tooltip""]').tooltip();
  });
  $('#stlog tbody').on('click', 'tr', function () {

    const rowData = dt.row(this).data();
    if (!rowData) return;
    liveMode = false;
    clearTimeout(renewTimer);
    $(""#btnLive"").prop(""disabled"", false);
    setSvgstate(rowData);
    setTextstate(rowData);

    $(this).addClass('table-primary').siblings().removeClass('table-primary');
  });
  $('#btnLive').on('click', () => {
    if (stlog?.rows?.length) {
      if (liveMode) return;
      liveMode = true;
      $(""#btnLive"").prop(""disabled"", true);
      $('#stlog tbody tr').removeClass('table-primary');

      onlogchane();
      renew();
    }
  });

}

async function attachBackground() {
  const $svg = $(""#circuit"").children(""svg"");
  if (!$svg.length || $(""#schemaWrapper"").length) return;

  let typeCode = null;
  if (box.Name?.startsWith(""TL"")) typeCode = ""TL"";
  else if (box.Name?.startsWith(""G"")) typeCode = ""G"";

  let bgSrc = `${environment.base_url}/images/types/${typeCode || ""default""}.png`;

  // картинка ""заказного"" фона мнемосхемы объекта
  $svg.wrap(
      '<div id=""schemaWrapper"" ' +
      '     style=""position:relative; display: flex;\n' +
      '    align-items: flex-end;\n' +
      '    justify-content: center;\n' +
      '    padding-bottom: 75px;margin-top: 5px;"">' +
      ""</div>""
  );
  $(""#schemaWrapper"").prepend(
      `<img id=""schemaBg"" ` +
      `     src=""${bgSrc}"" ` +
      `     style=""position:absolute;top:-10px; bottom: 0;left:-3px;width:100%;` +
      `            height:100%; object-fit: contain;object-position: left;z-index:1;pointer-events:none;"" />`
  );
  $svg.css({position: ""relative"", zIndex: 2, maxWidth: '60%', marginRight: '30%', marginBottom: '-70px'});
}"
9nDgUq1D,Untitled,MastroPino,HTML,Friday 20th of June 2025 04:02:11 AM CDT,"<div class=""fds-alert fds-alert-success"" role=""alert"">
                    <i class=""fa-sharp fa-regular fa-circle-check""></i>
                    <div class=""fds-d-flex fds-flex-column"">
                      <p class=""fds-fwmedium"">Congratulazioni</p>
                      <p>
                        <small
                          >Hai completato l'acquisto del dominio e dei
                          servizi.</small
                        >
                      </p>
                    </div>
                  </div>
                  <div class=""fds-d-flex fds-flex-column fds-gap-3"">
                    <h5>Riepilogo acquisto</h5>
                    <div class=""fds-row"">
                      <div class=""fds-d-flex fds-flex-column fds-col-md-6"">
                        <span
                          class=""fds-text-uppercase fds-text-body-secondary fds-small""
                          >Tipologia</span
                        >
                        <p class=""fds-fs-4"">Flazio Versione Pro</p>
                      </div>
                      <div class=""fds-d-flex fds-flex-column fds-col-md-6"">
                        <span
                          class=""fds-text-uppercase fds-text-body-secondary fds-small""
                          >Dominio</span
                        >
                        <p class=""fds-fs-4"">andreacalabro.it</p>
                      </div>
                    </div>
                    <div class=""fds-d-flex fds-flex-column"">
                      <span
                        class=""fds-text-uppercase fds-text-body-secondary fds-small""
                        >Servizi speciali</span
                      >
                      <p class=""fds-fs-4"">GDPR & Privacy</p>
                    </div>
                    <hr class=""fds"" />
                    <h5>Informazioni di pagamento</h5>
                    <div class=""fds-row"">
                      <div class=""fds-d-flex fds-flex-column fds-col-md-6"">
                        <span
                          class=""fds-text-uppercase fds-text-body-secondary fds-small""
                          >Tipologia</span
                        >
                        <p class=""fds-fs-4"">Abbonamento annuale</p>
                        <span class=""fds-fs-xs fds-text-body-secondary""
                          >12 mesi in un’unica soluzione</span
                        >
                      </div>
                      <div class=""fds-d-flex fds-flex-column fds-col-md-6"">
                        <span
                          class=""fds-text-uppercase fds-text-body-secondary fds-small""
                          >Metodo di pagamento</span
                        >
                        <p class=""fds-fs-4"">Carta di credito</p>
                        <span class=""fds-fs-xs fds-text-body-secondary""
                          >4563*******5698</span
                        >
                      </div>
                    </div>
                    <hr class=""fds"" />
                    <h5>Dettagli di fatturazione</h5>
                    <div class=""fds-row"">
                      <div class=""fds-d-flex fds-flex-column fds-col-md-6"">
                        <span
                          class=""fds-text-uppercase fds-text-body-secondary fds-small""
                          >Nome</span
                        >
                        <p class=""fds-fs-4"">Leonardo</p>
                      </div>
                      <div class=""fds-d-flex fds-flex-column fds-col-md-6"">
                        <span
                          class=""fds-text-uppercase fds-text-body-secondary fds-small""
                          >Cognome</span
                        >
                        <p class=""fds-fs-4"">Da Vinci</p>
                      </div>
                    </div>
                    <div class=""fds-row"">
                      <div class=""fds-d-flex fds-flex-column fds-col-md-6"">
                        <span
                          class=""fds-text-uppercase fds-text-body-secondary fds-small""
                          >Telefono</span
                        >
                        <p class=""fds-fs-4"">+39 000 1234567</p>
                      </div>
                      <div class=""fds-d-flex fds-flex-column fds-col-md-6"">
                        <span
                          class=""fds-text-uppercase fds-text-body-secondary fds-small""
                          >Email</span
                        >
                        <p class=""fds-fs-4"">l.davinci@flazio.it</p>
                      </div>
                    </div>
                    <div class=""fds-d-flex fds-flex-column"">
                      <span
                        class=""fds-text-uppercase fds-text-body-secondary fds-small""
                        >Codice fiscale</span
                      >
                      <p class=""fds-fs-4"">DVNLRD85E05H501G</p>
                    </div>
                    <div id=""summaryDescription"">
                      <div class=""fds-d-flex fds-flex-column fds-gap-3"">
                        <div class=""fds-row"">
                          <div class=""fds-d-flex fds-flex-column fds-col-md-6"">
                            <span
                              class=""fds-text-uppercase fds-text-body-secondary fds-small""
                              >Città</span
                            >
                            <p class=""fds-fs-4"">Roma</p>
                          </div>
                          <div class=""fds-d-flex fds-flex-column fds-col-md-6"">
                            <span
                              class=""fds-text-uppercase fds-text-body-secondary fds-small""
                              >CAP</span
                            >
                            <p class=""fds-fs-4"">00100</p>
                          </div>
                        </div>
                        <div class=""fds-row"">
                          <div class=""fds-d-flex fds-flex-column fds-col-md-6"">
                            <span
                              class=""fds-text-uppercase fds-text-body-secondary fds-small""
                              >Paese</span
                            >
                            <p class=""fds-fs-4"">Italia</p>
                          </div>
                          <div class=""fds-d-flex fds-flex-column fds-col-md-6"">
                            <span
                              class=""fds-text-uppercase fds-text-body-secondary fds-small""
                              >Provincia</span
                            >
                            <p class=""fds-fs-4"">Roma</p>
                          </div>
                        </div>
                      </div>
                    </div>
                    <a class=""fds-link fsd-link-sm"" id=""toggleSummarySection"">
                      Scopri di più
                    </a>
                  </div>"
7vzxeXax,Signal Monitor rev_02,pleasedontcode,Arduino,Friday 20th of June 2025 03:54:00 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Signal Monitor
	- Source Code compiled for: Arduino Nano 33 BLE
	- Source Code created on: 2025-06-20 08:52:10

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Implement a system that reads digital inputs from */
	/* the PCF8575 I/O expander and analog signals from */
	/* the ADS1115 ADC, then processes and displays the */
	/* data on the Arduino Nano 33 BLE. */
/****** END SYSTEM REQUIREMENTS *****/


/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <PCF8575.h>
#include <DFRobot_ADS1115.h>

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF I2C PINS *****/
const uint8_t ioexpander_PCF8575_I2C_PIN_SDA_A4 = A4;
const uint8_t ioexpander_PCF8575_I2C_PIN_SCL_A5 = A5;
const uint8_t ioexpander_PCF8575_I2C_SLAVE_ADDRESS = 32;
const uint8_t adc_ADS1115_I2C_PIN_SDA_A4 = A4;
const uint8_t adc_ADS1115_I2C_PIN_SCL_A5 = A5;
const uint8_t adc_ADS1115_I2C_SLAVE_ADDRESS = 72;

/****** LIBRARY CLASS INSTANCES *****/
PCF8575 pcf8575(ioexpander_PCF8575_I2C_SLAVE_ADDRESS, &Wire);
DFRobot_ADS1115 ads(&Wire);

void setup(void)
{
  // Initialize serial communication for debugging
  Serial.begin(9600);
  while (!Serial);

  // Initialize I2C communication
  Wire.begin();

  // Initialize PCF8575 I/O expander
  if (pcf8575.begin()) {
    Serial.println(""PCF8575 initialized successfully"");
  } else {
    Serial.println(""PCF8575 initialization failed"");
  }

  // Initialize ADS1115 ADC
  ads.setAddr_ADS1115(adc_ADS1115_I2C_SLAVE_ADDRESS);
  ads.init();

  if (ads.checkADS1115()) {
    Serial.println(""ADS1115 initialized successfully"");
  } else {
    Serial.println(""ADS1115 initialization failed"");
  }
}

void loop(void)
{
  // Read digital inputs from PCF8575
  uint16_t digitalInputs = pcf8575.read16();

  // Read analog voltage from ADS1115 channel 0
  uint16_t adcValue = ads.readVoltage(0);
  float voltage = adcValue * 0.1875 / 1000; // Convert to millivolts

  // Display the digital inputs
  Serial.print(""Digital Inputs (PCF8575): 0x"");
  Serial.println(digitalInputs, HEX);

  // Display the analog voltage
  Serial.print(""Analog Voltage (ADS1115 CH0): "");
  Serial.print(voltage, 3);
  Serial.println("" V"");

  delay(1000); // Wait for 1 second before next reading
}

/* END CODE */"
rgisfKST,Two Words rev_01,pleasedontcode,Arduino,Friday 20th of June 2025 03:51:40 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Two Words
	- Source Code NOT compiled for: Arduino Nano 33 BLE
	- Source Code created on: 2025-06-20 08:50:20

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Implement a system that reads digital inputs from */
	/* the PCF8575 I/O expander and analog signals from */
	/* the ADS1115 ADC, then processes and displays the */
	/* data on the Arduino Nano 33 BLE. */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <PCF8575.h>
#include <DFRobot_ADS1115.h>

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF I2C PINS *****/
const uint8_t ioexpander_PCF8575_I2C_PIN_SDA_A4 = A4;
const uint8_t ioexpander_PCF8575_I2C_PIN_SCL_A5 = A5;
const uint8_t ioexpander_PCF8575_I2C_SLAVE_ADDRESS = 32;
const uint8_t adc_ADS1115_I2C_PIN_SDA_A4 = A4;
const uint8_t adc_ADS1115_I2C_PIN_SCL_A5 = A5;
const uint8_t adc_ADS1115_I2C_SLAVE_ADDRESS = 72;

/****** LIBRARY CLASS INSTANCES *****/
PCF8575 pcf8575(ioexpander_PCF8575_I2C_SLAVE_ADDRESS, &Wire);
DFRobot_ADS1115 ads(&Wire);

void setup(void)
{
  // Initialize serial communication for debugging
  Serial.begin(9600);
  while (!Serial);

  // Initialize I2C communication
  Wire.begin();

  // Initialize PCF8575 I/O expander
  if (pcf8575.begin()) {
    Serial.println(""PCF8575 initialized successfully"");
  } else {
    Serial.println(""PCF8575 initialization failed"");
  }

  // Initialize ADS1115 ADC
  ads.setAddr_ADS1115(adc_ADS1115_I2C_SLAVE_ADDRESS);
  ads.init();

  if (ads.checkADS1115()) {
    Serial.println(""ADS1115 initialized successfully"");
  } else {
    Serial.println(""ADS1115 initialization failed"");
  }
}

void loop(void)
{
  // Read digital inputs from PCF8575
  uint16_t digitalInputs = pcf8575.read16();

  // Read analog voltage from ADS1115 channel 0
  uint16_t adcValue = ads.readVoltage(0);
  float voltage = adcValue * 0.1875 / 1000; // Convert to millivolts

  // Display the digital inputs
  Serial.print(""Digital Inputs (PCF8575): 0x"");
  Serial.println(digitalInputs, HEX);

  // Display the analog voltage
  Serial.print(""Analog Voltage (ADS1115 CH0): "");
  Serial.print(voltage, 3);
  Serial.println("" V"");

  delay(1000); // Wait for 1 second before next reading
}

/* END CODE */"
ncNJy5KY,Synthetic Humans,subink,JSON,Friday 20th of June 2025 03:43:13 AM CDT,"{
    ""last_node_id"": 146,
    ""last_link_id"": 240,
    ""nodes"": [
        {
            ""id"": 131,
            ""type"": ""BasicGuider"",
            ""pos"": [
                2178.33447265625,
                -101.94921875
            ],
            ""size"": [
                260,
                60
            ],
            ""flags"": {
                ""collapsed"": false
            },
            ""order"": 0,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""model"",
                    ""label"": ""model"",
                    ""type"": ""MODEL"",
                    ""link"": null,
                    ""slot_index"": 0
                },
                {
                    ""name"": ""conditioning"",
                    ""label"": ""conditioning"",
                    ""type"": ""CONDITIONING"",
                    ""link"": null,
                    ""slot_index"": 1
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""GUIDER"",
                    ""label"": ""GUIDER"",
                    ""type"": ""GUIDER"",
                    ""shape"": 3,
                    ""links"": [
                        202
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""BasicGuider""
            }
        },
        {
            ""id"": 25,
            ""type"": ""RandomNoise"",
            ""pos"": [
                -159,
                429
            ],
            ""size"": [
                260,
                82
            ],
            ""flags"": {},
            ""order"": 1,
            ""mode"": 0,
            ""inputs"": [],
            ""outputs"": [
                {
                    ""name"": ""NOISE"",
                    ""label"": ""NOISE"",
                    ""type"": ""NOISE"",
                    ""shape"": 3,
                    ""links"": [
                        214
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""RandomNoise""
            },
            ""widgets_values"": [
                41861050613349,
                ""randomize""
            ]
        },
        {
            ""id"": 140,
            ""type"": ""Anything Everywhere"",
            ""pos"": [
                -137.78257751464844,
                570.9679565429688
            ],
            ""size"": [
                239.40000915527344,
                26
            ],
            ""flags"": {},
            ""order"": 14,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""VAE"",
                    ""type"": ""*"",
                    ""shape"": 7,
                    ""color_on"": ""#FF6E6E"",
                    ""link"": 215
                }
            ],
            ""outputs"": [],
            ""properties"": {
                ""cnr_id"": ""cg-use-everywhere"",
                ""ver"": ""8017bc6b063f45db6b986d9fc8bb76bd3234b838"",
                ""Node name for S&R"": ""Anything Everywhere"",
                ""group_restricted"": 0,
                ""color_restricted"": 0
            },
            ""widgets_values"": []
        },
        {
            ""id"": 10,
            ""type"": ""VAELoader"",
            ""pos"": [
                -129,
                638
            ],
            ""size"": [
                230,
                60
            ],
            ""flags"": {},
            ""order"": 2,
            ""mode"": 0,
            ""inputs"": [],
            ""outputs"": [
                {
                    ""name"": ""VAE"",
                    ""label"": ""VAE"",
                    ""type"": ""VAE"",
                    ""shape"": 3,
                    ""links"": [
                        215
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""VAELoader""
            },
            ""widgets_values"": [
                ""ae.sft""
            ]
        },
        {
            ""id"": 8,
            ""type"": ""VAEDecode"",
            ""pos"": [
                1710,
                180
            ],
            ""size"": [
                140,
                50
            ],
            ""flags"": {},
            ""order"": 24,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""samples"",
                    ""label"": ""samples"",
                    ""type"": ""LATENT"",
                    ""link"": 24
                },
                {
                    ""name"": ""vae"",
                    ""label"": ""vae"",
                    ""type"": ""VAE"",
                    ""link"": null
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""IMAGE"",
                    ""label"": ""IMAGE"",
                    ""type"": ""IMAGE"",
                    ""links"": [
                        170
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""VAEDecode""
            },
            ""widgets_values"": []
        },
        {
            ""id"": 139,
            ""type"": ""Anything Everywhere"",
            ""pos"": [
                -142.78257751464844,
                360.96795654296875
            ],
            ""size"": [
                239.40000915527344,
                26
            ],
            ""flags"": {},
            ""order"": 13,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""NOISE"",
                    ""type"": ""*"",
                    ""shape"": 7,
                    ""color_on"": ""#B0B0B0"",
                    ""link"": 214
                }
            ],
            ""outputs"": [],
            ""properties"": {
                ""cnr_id"": ""cg-use-everywhere"",
                ""ver"": ""8017bc6b063f45db6b986d9fc8bb76bd3234b838"",
                ""Node name for S&R"": ""Anything Everywhere"",
                ""group_restricted"": 0,
                ""color_restricted"": 0
            },
            ""widgets_values"": []
        },
        {
            ""id"": 90,
            ""type"": ""EmptyLatentImage"",
            ""pos"": [
                1300.4976806640625,
                305.75604248046875
            ],
            ""size"": [
                265.3262939453125,
                107.69342041015625
            ],
            ""flags"": {},
            ""order"": 3,
            ""mode"": 0,
            ""inputs"": [],
            ""outputs"": [
                {
                    ""name"": ""LATENT"",
                    ""type"": ""LATENT"",
                    ""shape"": 3,
                    ""links"": [
                        126
                    ]
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""EmptyLatentImage""
            },
            ""widgets_values"": [
                1024,
                1024,
                1
            ]
        },
        {
            ""id"": 13,
            ""type"": ""SamplerCustomAdvanced"",
            ""pos"": [
                1610,
                270
            ],
            ""size"": [
                240,
                120
            ],
            ""flags"": {},
            ""order"": 22,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""noise"",
                    ""label"": ""noise"",
                    ""type"": ""NOISE"",
                    ""link"": null,
                    ""slot_index"": 0
                },
                {
                    ""name"": ""guider"",
                    ""label"": ""guider"",
                    ""type"": ""GUIDER"",
                    ""link"": 30,
                    ""slot_index"": 1
                },
                {
                    ""name"": ""sampler"",
                    ""label"": ""sampler"",
                    ""type"": ""SAMPLER"",
                    ""link"": 173,
                    ""slot_index"": 2
                },
                {
                    ""name"": ""sigmas"",
                    ""label"": ""sigmas"",
                    ""type"": ""SIGMAS"",
                    ""link"": 20,
                    ""slot_index"": 3
                },
                {
                    ""name"": ""latent_image"",
                    ""label"": ""latent_image"",
                    ""type"": ""LATENT"",
                    ""link"": 126,
                    ""slot_index"": 4
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""output"",
                    ""label"": ""output"",
                    ""type"": ""LATENT"",
                    ""shape"": 3,
                    ""links"": [
                        24,
                        219
                    ],
                    ""slot_index"": 0
                },
                {
                    ""name"": ""denoised_output"",
                    ""label"": ""denoised_output"",
                    ""type"": ""LATENT"",
                    ""shape"": 3,
                    ""links"": null
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""SamplerCustomAdvanced""
            },
            ""widgets_values"": []
        },
        {
            ""id"": 112,
            ""type"": ""PreviewImage"",
            ""pos"": [
                1984.4234619140625,
                357.3873291015625
            ],
            ""size"": [
                592.130126953125,
                687.773193359375
            ],
            ""flags"": {},
            ""order"": 26,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""images"",
                    ""type"": ""IMAGE"",
                    ""link"": 170
                }
            ],
            ""outputs"": [],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""PreviewImage""
            },
            ""widgets_values"": []
        },
        {
            ""id"": 136,
            ""type"": ""PreviewImage"",
            ""pos"": [
                2597.8125,
                364.5653381347656
            ],
            ""size"": [
                592.130126953125,
                687.773193359375
            ],
            ""flags"": {},
            ""order"": 29,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""images"",
                    ""type"": ""IMAGE"",
                    ""link"": 211
                }
            ],
            ""outputs"": [],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""PreviewImage""
            }
        },
        {
            ""id"": 137,
            ""type"": ""Anything Everywhere"",
            ""pos"": [
                249.0714569091797,
                26.00542640686035
            ],
            ""size"": [
                239.40000915527344,
                26
            ],
            ""flags"": {},
            ""order"": 20,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""MODEL"",
                    ""type"": ""*"",
                    ""shape"": 7,
                    ""color_on"": ""#B39DDB"",
                    ""link"": 223
                }
            ],
            ""outputs"": [],
            ""properties"": {
                ""cnr_id"": ""cg-use-everywhere"",
                ""ver"": ""8017bc6b063f45db6b986d9fc8bb76bd3234b838"",
                ""Node name for S&R"": ""Anything Everywhere"",
                ""group_restricted"": 0,
                ""color_restricted"": 0
            },
            ""widgets_values"": []
        },
        {
            ""id"": 138,
            ""type"": ""Anything Everywhere"",
            ""pos"": [
                253.12149047851562,
                -41.9245719909668
            ],
            ""size"": [
                239.40000915527344,
                26
            ],
            ""flags"": {},
            ""order"": 21,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""CLIP"",
                    ""type"": ""*"",
                    ""shape"": 7,
                    ""color_on"": ""#FFD500"",
                    ""link"": 224
                }
            ],
            ""outputs"": [],
            ""properties"": {
                ""cnr_id"": ""cg-use-everywhere"",
                ""ver"": ""8017bc6b063f45db6b986d9fc8bb76bd3234b838"",
                ""Node name for S&R"": ""Anything Everywhere"",
                ""group_restricted"": 0,
                ""color_restricted"": 0
            },
            ""widgets_values"": []
        },
        {
            ""id"": 12,
            ""type"": ""UNETLoader"",
            ""pos"": [
                -222.4615020751953,
                60.45845413208008
            ],
            ""size"": [
                320,
                82
            ],
            ""flags"": {},
            ""order"": 4,
            ""mode"": 0,
            ""inputs"": [],
            ""outputs"": [
                {
                    ""name"": ""MODEL"",
                    ""label"": ""MODEL"",
                    ""type"": ""MODEL"",
                    ""shape"": 3,
                    ""links"": [
                        221
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""UNETLoader""
            },
            ""widgets_values"": [
                ""flux1-dev.sft"",
                ""default""
            ]
        },
        {
            ""id"": 11,
            ""type"": ""DualCLIPLoader"",
            ""pos"": [
                -221.47630310058594,
                186.23361206054688
            ],
            ""size"": [
                320,
                122
            ],
            ""flags"": {},
            ""order"": 5,
            ""mode"": 0,
            ""inputs"": [],
            ""outputs"": [
                {
                    ""name"": ""CLIP"",
                    ""label"": ""CLIP"",
                    ""type"": ""CLIP"",
                    ""shape"": 3,
                    ""links"": [
                        222
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""DualCLIPLoader""
            },
            ""widgets_values"": [
                ""t5xxl_fp8_e4m3fn.safetensors"",
                ""clip_l.safetensors"",
                ""flux"",
                ""default""
            ]
        },
        {
            ""id"": 101,
            ""type"": ""Power Lora Loader (rgthree)"",
            ""pos"": [
                148.77658081054688,
                96.30711364746094
            ],
            ""size"": [
                340.20001220703125,
                262
            ],
            ""flags"": {},
            ""order"": 15,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""model"",
                    ""type"": ""MODEL"",
                    ""dir"": 3,
                    ""link"": 221
                },
                {
                    ""name"": ""clip"",
                    ""type"": ""CLIP"",
                    ""dir"": 3,
                    ""link"": 222
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""MODEL"",
                    ""type"": ""MODEL"",
                    ""dir"": 4,
                    ""shape"": 3,
                    ""links"": [
                        223
                    ],
                    ""slot_index"": 0
                },
                {
                    ""name"": ""CLIP"",
                    ""type"": ""CLIP"",
                    ""dir"": 4,
                    ""shape"": 3,
                    ""links"": [
                        224
                    ],
                    ""slot_index"": 1
                }
            ],
            ""properties"": {
                ""cnr_id"": ""rgthree-comfy"",
                ""ver"": ""32142fe476878a354dda6e2d4b5ea98960de3ced"",
                ""Show Strengths"": ""Single Strength""
            },
            ""widgets_values"": [
                null,
                {
                    ""type"": ""PowerLoraLoaderHeaderWidget""
                },
                {
                    ""on"": true,
                    ""lora"": ""ai-toolkit/R3alism.safetensors"",
                    ""strength"": 0.8,
                    ""strengthTwo"": null
                },
                {
                    ""on"": true,
                    ""lora"": ""ai-toolkit/Bonafida.safetensors"",
                    ""strength"": 0.8,
                    ""strengthTwo"": null
                },
                {
                    ""on"": true,
                    ""lora"": ""ai-toolkit/metal.safetensors"",
                    ""strength"": 0.65,
                    ""strengthTwo"": null
                },
                {
                    ""on"": true,
                    ""lora"": ""ai-toolkit/kodak.safetensors"",
                    ""strength"": 0.7,
                    ""strengthTwo"": null
                },
                null,
                """"
            ]
        },
        {
            ""id"": 17,
            ""type"": ""BasicScheduler"",
            ""pos"": [
                1310.4976806640625,
                612.7559204101562
            ],
            ""size"": [
                260,
                110
            ],
            ""flags"": {},
            ""order"": 6,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""model"",
                    ""label"": ""model"",
                    ""type"": ""MODEL"",
                    ""link"": null,
                    ""slot_index"": 0
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""SIGMAS"",
                    ""label"": ""SIGMAS"",
                    ""type"": ""SIGMAS"",
                    ""shape"": 3,
                    ""links"": [
                        20
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""BasicScheduler""
            },
            ""widgets_values"": [
                ""linear_quadratic"",
                35,
                1
            ]
        },
        {
            ""id"": 16,
            ""type"": ""KSamplerSelect"",
            ""pos"": [
                1303.7501220703125,
                75.37157440185547
            ],
            ""size"": [
                260,
                60
            ],
            ""flags"": {},
            ""order"": 7,
            ""mode"": 0,
            ""inputs"": [],
            ""outputs"": [
                {
                    ""name"": ""SAMPLER"",
                    ""label"": ""SAMPLER"",
                    ""type"": ""SAMPLER"",
                    ""shape"": 3,
                    ""links"": [
                        216
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""KSamplerSelect""
            },
            ""widgets_values"": [
                ""res_multistep""
            ]
        },
        {
            ""id"": 114,
            ""type"": ""DetailDaemonSamplerNode"",
            ""pos"": [
                1616.2132568359375,
                432.0816345214844
            ],
            ""size"": [
                315,
                274
            ],
            ""flags"": {},
            ""order"": 17,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""sampler"",
                    ""type"": ""SAMPLER"",
                    ""link"": 172
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""SAMPLER"",
                    ""type"": ""SAMPLER"",
                    ""links"": [
                        173
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfyui-detail-daemon"",
                ""ver"": ""1.1.2"",
                ""Node name for S&R"": ""DetailDaemonSamplerNode""
            },
            ""widgets_values"": [
                0.04,
                0.25,
                1,
                0.75,
                1,
                0,
                0,
                0,
                true,
                0
            ]
        },
        {
            ""id"": 113,
            ""type"": ""LyingSigmaSampler"",
            ""pos"": [
                1256.05810546875,
                464.379150390625
            ],
            ""size"": [
                315,
                106
            ],
            ""flags"": {},
            ""order"": 8,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""sampler"",
                    ""type"": ""SAMPLER"",
                    ""link"": null
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""SAMPLER"",
                    ""type"": ""SAMPLER"",
                    ""links"": [
                        172
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfyui-detail-daemon"",
                ""ver"": ""1.1.2"",
                ""Node name for S&R"": ""LyingSigmaSampler""
            },
            ""widgets_values"": [
                -0.05,
                0.2,
                0.8
            ]
        },
        {
            ""id"": 144,
            ""type"": ""DetailDaemonSamplerNode"",
            ""pos"": [
                2491.17333984375,
                -208.72837829589844
            ],
            ""size"": [
                315,
                274
            ],
            ""flags"": {},
            ""order"": 19,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""sampler"",
                    ""type"": ""SAMPLER"",
                    ""link"": 225
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""SAMPLER"",
                    ""type"": ""SAMPLER"",
                    ""links"": [
                        226
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfyui-detail-daemon"",
                ""ver"": ""1.1.2"",
                ""Node name for S&R"": ""DetailDaemonSamplerNode""
            },
            ""widgets_values"": [
                0.01,
                0.25,
                0.5,
                0.5,
                1,
                0,
                0,
                0,
                true,
                0
            ]
        },
        {
            ""id"": 6,
            ""type"": ""CLIPTextEncode"",
            ""pos"": [
                582.4439697265625,
                340.8319396972656
            ],
            ""size"": [
                490,
                250
            ],
            ""flags"": {
                ""collapsed"": false
            },
            ""order"": 9,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""clip"",
                    ""label"": ""clip"",
                    ""type"": ""CLIP"",
                    ""link"": null
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""CONDITIONING"",
                    ""label"": ""CONDITIONING"",
                    ""type"": ""CONDITIONING"",
                    ""links"": [
                        86
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""CLIPTextEncode""
            },
            ""widgets_values"": [
                ""studio portrait photograph of a woman, she is wearing a white tech jacket with black detailing and japanese lettering, she is wearing large glasses with translucent white frame and iridescent tinted glasses, she has dark afro hair with golden beads in her hair, around her neck is a chrome metallic snake with shiny scales twisted around her with its head looking into the camera from her side, the snake has emerald eyes, grainy film photography style against a light background, kodak, high quality, intricate details\n""
            ],
            ""color"": ""#232"",
            ""bgcolor"": ""#353""
        },
        {
            ""id"": 141,
            ""type"": ""Anything Everywhere"",
            ""pos"": [
                1320.967529296875,
                4.339563369750977
            ],
            ""size"": [
                239.40000915527344,
                26
            ],
            ""flags"": {},
            ""order"": 16,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""SAMPLER"",
                    ""type"": ""*"",
                    ""shape"": 7,
                    ""color_on"": ""#ECB4B4"",
                    ""link"": 216
                }
            ],
            ""outputs"": [],
            ""properties"": {
                ""cnr_id"": ""cg-use-everywhere"",
                ""ver"": ""8017bc6b063f45db6b986d9fc8bb76bd3234b838"",
                ""Node name for S&R"": ""Anything Everywhere"",
                ""group_restricted"": 0,
                ""color_restricted"": 0
            },
            ""widgets_values"": []
        },
        {
            ""id"": 146,
            ""type"": ""Anything Everywhere"",
            ""pos"": [
                822.7891235351562,
                167.58108520507812
            ],
            ""size"": [
                239.40000915527344,
                26
            ],
            ""flags"": {},
            ""order"": 23,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""CONDITIONING"",
                    ""type"": ""*"",
                    ""shape"": 7,
                    ""color_on"": ""#FFA931"",
                    ""link"": 227
                }
            ],
            ""outputs"": [],
            ""properties"": {
                ""cnr_id"": ""cg-use-everywhere"",
                ""ver"": ""8017bc6b063f45db6b986d9fc8bb76bd3234b838"",
                ""Node name for S&R"": ""Anything Everywhere"",
                ""group_restricted"": 0,
                ""color_restricted"": 0
            },
            ""widgets_values"": []
        },
        {
            ""id"": 60,
            ""type"": ""FluxGuidance"",
            ""pos"": [
                852.4888305664062,
                238.14451599121094
            ],
            ""size"": [
                211.60000610351562,
                60
            ],
            ""flags"": {},
            ""order"": 18,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""conditioning"",
                    ""label"": ""conditioning"",
                    ""type"": ""CONDITIONING"",
                    ""link"": 86
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""CONDITIONING"",
                    ""label"": ""CONDITIONING"",
                    ""type"": ""CONDITIONING"",
                    ""shape"": 3,
                    ""links"": [
                        227
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""FluxGuidance""
            },
            ""widgets_values"": [
                4.5
            ],
            ""color"": ""#323"",
            ""bgcolor"": ""#535""
        },
        {
            ""id"": 22,
            ""type"": ""BasicGuider"",
            ""pos"": [
                1305,
                200
            ],
            ""size"": [
                260,
                60
            ],
            ""flags"": {
                ""collapsed"": false
            },
            ""order"": 10,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""model"",
                    ""label"": ""model"",
                    ""type"": ""MODEL"",
                    ""link"": null,
                    ""slot_index"": 0
                },
                {
                    ""name"": ""conditioning"",
                    ""label"": ""conditioning"",
                    ""type"": ""CONDITIONING"",
                    ""link"": null,
                    ""slot_index"": 1
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""GUIDER"",
                    ""label"": ""GUIDER"",
                    ""type"": ""GUIDER"",
                    ""shape"": 3,
                    ""links"": [
                        30
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""BasicGuider""
            },
            ""widgets_values"": []
        },
        {
            ""id"": 133,
            ""type"": ""BasicScheduler"",
            ""pos"": [
                2181.153564453125,
                2.0044729709625244
            ],
            ""size"": [
                260,
                110
            ],
            ""flags"": {},
            ""order"": 11,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""model"",
                    ""label"": ""model"",
                    ""type"": ""MODEL"",
                    ""link"": null,
                    ""slot_index"": 0
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""SIGMAS"",
                    ""label"": ""SIGMAS"",
                    ""type"": ""SIGMAS"",
                    ""shape"": 3,
                    ""links"": [
                        203
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""BasicScheduler""
            },
            ""widgets_values"": [
                ""linear_quadratic"",
                35,
                1
            ]
        },
        {
            ""id"": 135,
            ""type"": ""VAEDecode"",
            ""pos"": [
                2600.99462890625,
                271.2347106933594
            ],
            ""size"": [
                140,
                50
            ],
            ""flags"": {},
            ""order"": 28,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""samples"",
                    ""label"": ""samples"",
                    ""type"": ""LATENT"",
                    ""link"": 205
                },
                {
                    ""name"": ""vae"",
                    ""label"": ""vae"",
                    ""type"": ""VAE"",
                    ""link"": null
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""IMAGE"",
                    ""label"": ""IMAGE"",
                    ""type"": ""IMAGE"",
                    ""links"": [
                        211
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""VAEDecode""
            }
        },
        {
            ""id"": 129,
            ""type"": ""SamplerCustomAdvanced"",
            ""pos"": [
                2498.668212890625,
                108.24175262451172
            ],
            ""size"": [
                240,
                120
            ],
            ""flags"": {},
            ""order"": 27,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""noise"",
                    ""label"": ""noise"",
                    ""type"": ""NOISE"",
                    ""link"": null,
                    ""slot_index"": 0
                },
                {
                    ""name"": ""guider"",
                    ""label"": ""guider"",
                    ""type"": ""GUIDER"",
                    ""link"": 202,
                    ""slot_index"": 1
                },
                {
                    ""name"": ""sampler"",
                    ""label"": ""sampler"",
                    ""type"": ""SAMPLER"",
                    ""link"": 226,
                    ""slot_index"": 2
                },
                {
                    ""name"": ""sigmas"",
                    ""label"": ""sigmas"",
                    ""type"": ""SIGMAS"",
                    ""link"": 203,
                    ""slot_index"": 3
                },
                {
                    ""name"": ""latent_image"",
                    ""label"": ""latent_image"",
                    ""type"": ""LATENT"",
                    ""link"": 220,
                    ""slot_index"": 4
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""output"",
                    ""label"": ""output"",
                    ""type"": ""LATENT"",
                    ""shape"": 3,
                    ""links"": [
                        205
                    ],
                    ""slot_index"": 0
                },
                {
                    ""name"": ""denoised_output"",
                    ""label"": ""denoised_output"",
                    ""type"": ""LATENT"",
                    ""shape"": 3,
                    ""links"": null
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfy-core"",
                ""ver"": ""0.3.18"",
                ""Node name for S&R"": ""SamplerCustomAdvanced""
            }
        },
        {
            ""id"": 145,
            ""type"": ""LyingSigmaSampler"",
            ""pos"": [
                2121.567626953125,
                -252.78195190429688
            ],
            ""size"": [
                315,
                106
            ],
            ""flags"": {},
            ""order"": 12,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""sampler"",
                    ""type"": ""SAMPLER"",
                    ""link"": null
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""SAMPLER"",
                    ""type"": ""SAMPLER"",
                    ""links"": [
                        225
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfyui-detail-daemon"",
                ""ver"": ""1.1.2"",
                ""Node name for S&R"": ""LyingSigmaSampler""
            },
            ""widgets_values"": [
                -0.05,
                0.2,
                0.8
            ]
        },
        {
            ""id"": 143,
            ""type"": ""InjectLatentNoise+"",
            ""pos"": [
                2129.62255859375,
                157.9127197265625
            ],
            ""size"": [
                315,
                150
            ],
            ""flags"": {},
            ""order"": 25,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""latent"",
                    ""type"": ""LATENT"",
                    ""link"": 219
                },
                {
                    ""name"": ""mask"",
                    ""type"": ""MASK"",
                    ""shape"": 7,
                    ""link"": null
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""LATENT"",
                    ""type"": ""LATENT"",
                    ""links"": [
                        220
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""cnr_id"": ""comfyui_essentials"",
                ""ver"": ""33ff89fd354d8ec3ab6affb605a79a931b445d99"",
                ""Node name for S&R"": ""InjectLatentNoise+""
            },
            ""widgets_values"": [
                789954861134535,
                ""randomize"",
                1.05,
                ""false""
            ]
        }
    ],
    ""links"": [
        [
            20,
            17,
            0,
            13,
            3,
            ""SIGMAS""
        ],
        [
            24,
            13,
            0,
            8,
            0,
            ""LATENT""
        ],
        [
            30,
            22,
            0,
            13,
            1,
            ""GUIDER""
        ],
        [
            86,
            6,
            0,
            60,
            0,
            ""CONDITIONING""
        ],
        [
            126,
            90,
            0,
            13,
            4,
            ""LATENT""
        ],
        [
            170,
            8,
            0,
            112,
            0,
            ""IMAGE""
        ],
        [
            172,
            113,
            0,
            114,
            0,
            ""SAMPLER""
        ],
        [
            173,
            114,
            0,
            13,
            2,
            ""SAMPLER""
        ],
        [
            202,
            131,
            0,
            129,
            1,
            ""GUIDER""
        ],
        [
            203,
            133,
            0,
            129,
            3,
            ""SIGMAS""
        ],
        [
            205,
            129,
            0,
            135,
            0,
            ""LATENT""
        ],
        [
            211,
            135,
            0,
            136,
            0,
            ""IMAGE""
        ],
        [
            214,
            25,
            0,
            139,
            0,
            ""NOISE""
        ],
        [
            215,
            10,
            0,
            140,
            0,
            ""VAE""
        ],
        [
            216,
            16,
            0,
            141,
            0,
            ""SAMPLER""
        ],
        [
            219,
            13,
            0,
            143,
            0,
            ""LATENT""
        ],
        [
            220,
            143,
            0,
            129,
            4,
            ""LATENT""
        ],
        [
            221,
            12,
            0,
            101,
            0,
            ""MODEL""
        ],
        [
            222,
            11,
            0,
            101,
            1,
            ""CLIP""
        ],
        [
            223,
            101,
            0,
            137,
            0,
            ""MODEL""
        ],
        [
            224,
            101,
            1,
            138,
            0,
            ""CLIP""
        ],
        [
            225,
            145,
            0,
            144,
            0,
            ""SAMPLER""
        ],
        [
            226,
            144,
            0,
            129,
            2,
            ""SAMPLER""
        ],
        [
            227,
            60,
            0,
            146,
            0,
            ""CONDITIONING""
        ],
        [
            228,
            101,
            0,
            131,
            0,
            ""MODEL""
        ],
        [
            229,
            60,
            0,
            131,
            1,
            ""CONDITIONING""
        ],
        [
            230,
            10,
            0,
            8,
            1,
            ""VAE""
        ],
        [
            231,
            25,
            0,
            13,
            0,
            ""NOISE""
        ],
        [
            232,
            101,
            0,
            17,
            0,
            ""MODEL""
        ],
        [
            233,
            16,
            0,
            113,
            0,
            ""SAMPLER""
        ],
        [
            234,
            101,
            1,
            6,
            0,
            ""CLIP""
        ],
        [
            235,
            101,
            0,
            22,
            0,
            ""MODEL""
        ],
        [
            236,
            60,
            0,
            22,
            1,
            ""CONDITIONING""
        ],
        [
            237,
            101,
            0,
            133,
            0,
            ""MODEL""
        ],
        [
            238,
            10,
            0,
            135,
            1,
            ""VAE""
        ],
        [
            239,
            25,
            0,
            129,
            0,
            ""NOISE""
        ],
        [
            240,
            16,
            0,
            145,
            0,
            ""SAMPLER""
        ]
    ],
    ""groups"": [],
    ""config"": {},
    ""extra"": {
        ""ds"": {
            ""scale"": 1.1,
            ""offset"": [
                -1215.7113771019087,
                -242.48489677749086
            ]
        },
        ""ue_links"": [
            {
                ""downstream"": 131,
                ""downstream_slot"": 0,
                ""upstream"": ""101"",
                ""upstream_slot"": 0,
                ""controller"": 137,
                ""type"": ""MODEL""
            },
            {
                ""downstream"": 131,
                ""downstream_slot"": 1,
                ""upstream"": ""60"",
                ""upstream_slot"": 0,
                ""controller"": 146,
                ""type"": ""CONDITIONING""
            },
            {
                ""downstream"": 8,
                ""downstream_slot"": 1,
                ""upstream"": ""10"",
                ""upstream_slot"": 0,
                ""controller"": 140,
                ""type"": ""VAE""
            },
            {
                ""downstream"": 13,
                ""downstream_slot"": 0,
                ""upstream"": ""25"",
                ""upstream_slot"": 0,
                ""controller"": 139,
                ""type"": ""NOISE""
            },
            {
                ""downstream"": 17,
                ""downstream_slot"": 0,
                ""upstream"": ""101"",
                ""upstream_slot"": 0,
                ""controller"": 137,
                ""type"": ""MODEL""
            },
            {
                ""downstream"": 113,
                ""downstream_slot"": 0,
                ""upstream"": ""16"",
                ""upstream_slot"": 0,
                ""controller"": 141,
                ""type"": ""SAMPLER""
            },
            {
                ""downstream"": 6,
                ""downstream_slot"": 0,
                ""upstream"": ""101"",
                ""upstream_slot"": 1,
                ""controller"": 138,
                ""type"": ""CLIP""
            },
            {
                ""downstream"": 22,
                ""downstream_slot"": 0,
                ""upstream"": ""101"",
                ""upstream_slot"": 0,
                ""controller"": 137,
                ""type"": ""MODEL""
            },
            {
                ""downstream"": 22,
                ""downstream_slot"": 1,
                ""upstream"": ""60"",
                ""upstream_slot"": 0,
                ""controller"": 146,
                ""type"": ""CONDITIONING""
            },
            {
                ""downstream"": 133,
                ""downstream_slot"": 0,
                ""upstream"": ""101"",
                ""upstream_slot"": 0,
                ""controller"": 137,
                ""type"": ""MODEL""
            },
            {
                ""downstream"": 135,
                ""downstream_slot"": 1,
                ""upstream"": ""10"",
                ""upstream_slot"": 0,
                ""controller"": 140,
                ""type"": ""VAE""
            },
            {
                ""downstream"": 129,
                ""downstream_slot"": 0,
                ""upstream"": ""25"",
                ""upstream_slot"": 0,
                ""controller"": 139,
                ""type"": ""NOISE""
            },
            {
                ""downstream"": 145,
                ""downstream_slot"": 0,
                ""upstream"": ""16"",
                ""upstream_slot"": 0,
                ""controller"": 141,
                ""type"": ""SAMPLER""
            }
        ],
        ""VHS_latentpreview"": false,
        ""VHS_latentpreviewrate"": 0,
        ""VHS_MetadataImage"": true,
        ""VHS_KeepIntermediate"": true
    },
    ""version"": 0.4,
    ""seed_widgets"": {
        ""25"": 0,
        ""143"": 0
    }
}"
WLfzEYna,Periodic Ethernet Initialization and ADC Reading rev_06,pleasedontcode,Arduino,Friday 20th of June 2025 03:10:27 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Periodic Ethernet Initialization and ADC Reading
	- Source Code compiled for: Arduino Nano 33 BLE
	- Source Code created on: 2025-06-20 08:03:43

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Detect and initialize the Ethernet connection */
	/* using the Ethernet2 library and the W5500 module. */
	/* Retrieve and display the assigned IP address to */
	/* confirm successful connection. */
/****** SYSTEM REQUIREMENT 2 *****/
	/* Monitor and read all channels connected via the */
	/* PCF8575 I2C expander periodically, ensuring real- */
	/* time data acquisition from the digital inputs. */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
#include <SPI.h>
#include <Wire.h>
#include <Ethernet2.h>    //https://github.com/adafruit/Ethernet2
#include <PCF8575.h>      //https://github.com/RobTillaart/PCF8575.git
#include <DFRobot_ADS1115.h> //https://github.com/DFRobot/DFRobot_ADS1115

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);
void initializeEthernet();
void readAllChannels();

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t ethernet_W5500_RST_PIN_D2 = 2;

/***** DEFINITION OF I2C PINS *****/
const uint8_t pdf_PCF8575_I2C_PIN_SDA_A4 = A4;
const uint8_t pdf_PCF8575_I2C_PIN_SCL_A5 = A5;
const uint8_t pdf_PCF8575_I2C_SLAVE_ADDRESS = 32;
const uint8_t adc_ADS1115_I2C_PIN_SDA_A4 = A4;
const uint8_t adc_ADS1115_I2C_PIN_SCL_A5 = A5;
const uint8_t adc_ADS1115_I2C_SLAVE_ADDRESS = 72;

/***** DEFINITION OF SPI PINS *****/
const uint8_t ethernet_W5500_SPI_PIN_MOSI_D11 = 11;
const uint8_t ethernet_W5500_SPI_PIN_MISO_D12 = 12;
const uint8_t ethernet_W5500_SPI_PIN_SCLK_D13 = 13;
const uint8_t ethernet_W5500_SPI_PIN_CS_D10 = 10;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool ethernet_W5500_RST_PIN_D2_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float ethernet_W5500_RST_PIN_D2_phyData = 0.0;

/****** LIBRARY CLASS INSTANCES *****/
// Instantiate ADS1115 with Wire reference
DFRobot_ADS1115 ads1115(&Wire); // ADS1115 ADC

// Instantiate Ethernet object
// Note: Do NOT instantiate Ethernet object here, as it is provided by the Ethernet2 library

// Instantiate PCF8575 expander
PCF8575 pcf8575(pdf_PCF8575_I2C_SLAVE_ADDRESS); // PCF8575 expander

unsigned long previousMillis = 0;
const long interval = 1000; // 1 second interval for periodic reading

void setup(void)
{
  // Initialize serial communication for debugging
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }
  
  // Initialize Ethernet
  initializeEthernet();

  // Initialize pins
  pinMode(ethernet_W5500_RST_PIN_D2, OUTPUT);
  pinMode(ethernet_W5500_SPI_PIN_CS_D10, OUTPUT);
  // start the SPI library:
  SPI.begin();

  // Initialize I2C
  Wire.begin();

  // Initialize PCF8575
  pcf8575.begin();

  // Initialize ADS1115
  ads1115.init(); // Initialize ADS1115 with default settings
}

void loop(void)
{
  // Maintain Ethernet connection
  Ethernet.maintain();

  // Periodically read all channels
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    readAllChannels();
  }

  // Update outputs
  updateOutputs();
}

void updateOutputs()
{
  digitalWrite(ethernet_W5500_RST_PIN_D2, ethernet_W5500_RST_PIN_D2_rawData);
}

void initializeEthernet()
{
  // Use MAC address for Ethernet.begin()
  uint8_t mac[6] = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED};
  int result = Ethernet.begin(mac);
  if (result == 0) {
    Serial.println(""Failed to configure Ethernet using DHCP"");
    // fallback or error handling
  } else {
    Serial.print(""Ethernet IP Address: "");
    Serial.println(Ethernet.localIP());
  }
}

void readAllChannels()
{
  // Read all digital inputs from PCF8575
  uint16_t inputStates = pcf8575.read16();
  Serial.print(""PCF8575 Inputs: "");
  Serial.println(inputStates, BIN);
}
"
xV663a7Y,Network Operations rev_05,pleasedontcode,Arduino,Friday 20th of June 2025 03:03:17 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Network Operations
	- Source Code NOT compiled for: Arduino Nano 33 BLE
	- Source Code created on: 2025-06-20 08:02:48

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Detect and initialize the Ethernet connection */
	/* using the Ethernet2 library and the W5500 module. */
	/* Retrieve and display the assigned IP address to */
	/* confirm successful connection. */
/****** SYSTEM REQUIREMENT 2 *****/
	/* Monitor and read all channels connected via the */
	/* PCF8575 I2C expander periodically, ensuring real- */
	/* time data acquisition from the digital inputs. */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
#include <SPI.h>
#include <Wire.h>
#include <Ethernet2.h>    //https://github.com/adafruit/Ethernet2
#include <PCF8575.h>      //https://github.com/RobTillaart/PCF8575.git
#include <DFRobot_ADS1115.h> //https://github.com/DFRobot/DFRobot_ADS1115

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);
void initializeEthernet();
void readAllChannels();

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t ethernet_W5500_RST_PIN_D2 = 2;

/***** DEFINITION OF I2C PINS *****/
const uint8_t pdf_PCF8575_I2C_PIN_SDA_A4 = A4;
const uint8_t pdf_PCF8575_I2C_PIN_SCL_A5 = A5;
const uint8_t pdf_PCF8575_I2C_SLAVE_ADDRESS = 32;
const uint8_t adc_ADS1115_I2C_PIN_SDA_A4 = A4;
const uint8_t adc_ADS1115_I2C_PIN_SCL_A5 = A5;
const uint8_t adc_ADS1115_I2C_SLAVE_ADDRESS = 72;

/***** DEFINITION OF SPI PINS *****/
const uint8_t ethernet_W5500_SPI_PIN_MOSI_D11 = 11;
const uint8_t ethernet_W5500_SPI_PIN_MISO_D12 = 12;
const uint8_t ethernet_W5500_SPI_PIN_SCLK_D13 = 13;
const uint8_t ethernet_W5500_SPI_PIN_CS_D10 = 10;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool ethernet_W5500_RST_PIN_D2_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float ethernet_W5500_RST_PIN_D2_phyData = 0.0;

/****** LIBRARY CLASS INSTANCES *****/
EthernetClass Ethernet; // Ethernet object
PCF8575 pcf8575(pdf_PCF8575_I2C_SLAVE_ADDRESS); // PCF8575 expander
// Add ADS1115 object if needed
DFRobot_ADS1115 ads1115; // ADS1115 ADC

unsigned long previousMillis = 0;
const long interval = 1000; // 1 second interval for periodic reading

void setup(void)
{
  // Initialize serial communication for debugging
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }
  
  // Initialize Ethernet
  initializeEthernet();

  // Initialize pins
  pinMode(ethernet_W5500_RST_PIN_D2, OUTPUT);
  pinMode(ethernet_W5500_SPI_PIN_CS_D10, OUTPUT);
  // start the SPI library:
  SPI.begin();

  // Initialize I2C
  Wire.begin();

  // Initialize PCF8575
  pcf8575.begin();

  // Initialize ADS1115 if needed
  // ads1115.initialize(); // Uncomment if ADS1115 is used

}

void loop(void)
{
  // Maintain Ethernet connection
  Ethernet.maintain();

  // Periodically read all channels
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    readAllChannels();
  }

  // Update outputs
  updateOutputs();
}

void updateOutputs()
{
  digitalWrite(ethernet_W5500_RST_PIN_D2, ethernet_W5500_RST_PIN_D2_rawData);
}

void initializeEthernet()
{
  // Use DHCP to get IP address
  int result = Ethernet.begin();
  if (result == 0) {
    Serial.println(""Failed to configure Ethernet using DHCP"");
    // fallback or error handling
  } else {
    Serial.print(""Ethernet IP Address: "");
    Serial.println(Ethernet.localIP());
  }
}

void readAllChannels()
{
  // Read all digital inputs from PCF8575
  uint16_t inputStates = pcf8575.read16();
  Serial.print(""PCF8575 Inputs: "");
  Serial.println(inputStates, BIN);
}
"
zDMcSVBm,Network Communication rev_04,pleasedontcode,Arduino,Friday 20th of June 2025 03:00:47 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Network Communication
	- Source Code compiled for: Arduino Nano 33 BLE
	- Source Code created on: 2025-06-20 07:57:53

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Detect and initialize the Ethernet connection */
	/* using the Ethernet2 library and the W5500 module. */
	/* Retrieve and display the assigned IP address to */
	/* confirm successful connection. */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
#include <SPI.h>
#include <Ethernet2.h> //https://github.com/adafruit/Ethernet2

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t ethernet_W5500_RST_PIN_D2 = 2;

/***** DEFINITION OF SPI PINS *****/
const uint8_t ethernet_W5500_SPI_PIN_MOSI_D11 = 11;
const uint8_t ethernet_W5500_SPI_PIN_MISO_D12 = 12;
const uint8_t ethernet_W5500_SPI_PIN_SCLK_D13 = 13;
const uint8_t ethernet_W5500_SPI_PIN_CS_D10 = 10;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool ethernet_W5500_RST_PIN_D2_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float ethernet_W5500_RST_PIN_D2_phyData = 0.0;

/****** Ethernet connection variables *****/
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED }; // MAC address
IPAddress ip(192, 168, 0, 177); // Static IP address
const char* server = ""www.google.com""; // Server to connect
EthernetClient client;

void setup(void)
{
  // Initialize serial communication for debugging
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for Leonardo only
  }

  // Initialize the Ethernet reset pin
  pinMode(ethernet_W5500_RST_PIN_D2, OUTPUT);
  digitalWrite(ethernet_W5500_RST_PIN_D2, HIGH); // Keep W5500 out of reset

  // Initialize SPI pins
  pinMode(ethernet_W5500_SPI_PIN_CS_D10, OUTPUT);
  SPI.begin();

  // Detect and initialize Ethernet connection
  Serial.println(""Initializing Ethernet..."");
  if (Ethernet.begin(mac) == 0) {
    Serial.println(""Failed to configure Ethernet using DHCP"");
    Serial.println(""Trying static IP..."");
    Ethernet.begin(mac, ip);
  }
  delay(1000); // Allow Ethernet hardware to initialize

  // Retrieve and display the assigned IP address
  IPAddress localIP = Ethernet.localIP();
  Serial.print(""Ethernet IP Address: "");
  Serial.println(localIP);
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  updateOutputs();

  // Optional: Add code to check connection or send data
  // For demonstration, attempt to connect to server periodically
  static unsigned long lastAttempt = 0;
  if (millis() - lastAttempt > 10000) { // every 10 seconds
    lastAttempt = millis();
    Serial.println(""Connecting to server..."");
    if (client.connect(server, 80)) {
      Serial.println(""Connected to server"");
      client.println(""GET / HTTP/1.1"");
      client.println(""Host: www.google.com"");
      client.println(""Connection: close"");
      client.println();
    } else {
      Serial.println(""Connection to server failed"");
    }
  }

  // Read server response
  if (client.available()) {
    char c = client.read();
    Serial.print(c);
  }

  // Check if server disconnected
  if (!client.connected()) {
    Serial.println();
    Serial.println(""Disconnecting."");
    client.stop();
  }
}

void updateOutputs()
{
  digitalWrite(ethernet_W5500_RST_PIN_D2, ethernet_W5500_RST_PIN_D2_rawData);
}

/* END CODE */"
aS12xZ1p,Network Communication rev_03,pleasedontcode,Arduino,Friday 20th of June 2025 02:50:47 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Network Communication
	- Source Code NOT compiled for: Arduino Nano 33 BLE
	- Source Code created on: 2025-06-20 07:50:07

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Detect and initialize the Ethernet connection */
	/* using the Ethernet2 library and the W5500 module. */
	/* Retrieve and display the assigned IP address to */
	/* confirm successful connection. */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
#include <SPI.h>
#include <Ethernet2.h> //https://github.com/adafruit/Ethernet2

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t ethernet_W5500_RST_PIN_D2 = 2;

/***** DEFINITION OF SPI PINS *****/
const uint8_t ethernet_W5500_SPI_PIN_MOSI_D11 = 11;
const uint8_t ethernet_W5500_SPI_PIN_MISO_D12 = 12;
const uint8_t ethernet_W5500_SPI_PIN_SCLK_D13 = 13;
const uint8_t ethernet_W5500_SPI_PIN_CS_D10 = 10;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool ethernet_W5500_RST_PIN_D2_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float ethernet_W5500_RST_PIN_D2_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
EthernetClass Ethernet;

/****** Ethernet connection variables *****/
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED }; // MAC address
IPAddress ip(192, 168, 0, 177); // Static IP address
const char* server = ""www.google.com""; // Server to connect
EthernetClient client;

void setup(void)
{
  // Initialize serial communication for debugging
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for Leonardo only
  }

  // Initialize the Ethernet reset pin
  pinMode(ethernet_W5500_RST_PIN_D2, OUTPUT);
  digitalWrite(ethernet_W5500_RST_PIN_D2, HIGH); // Keep W5500 out of reset

  // Initialize SPI pins
  pinMode(ethernet_W5500_SPI_PIN_CS_D10, OUTPUT);
  SPI.begin();

  // Detect and initialize Ethernet connection
  Serial.println(""Initializing Ethernet..."");
  if (Ethernet.begin(mac) == 0) {
    Serial.println(""Failed to configure Ethernet using DHCP"");
    Serial.println(""Trying static IP..."");
    Ethernet.begin(mac, ip);
  }
  delay(1000); // Allow Ethernet hardware to initialize

  // Retrieve and display the assigned IP address
  IPAddress localIP = Ethernet.localIP();
  Serial.print(""Ethernet IP Address: "");
  Serial.println(localIP);
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  updateOutputs();

  // Optional: Add code to check connection or send data
  // For demonstration, attempt to connect to server periodically
  static unsigned long lastAttempt = 0;
  if (millis() - lastAttempt > 10000) { // every 10 seconds
    lastAttempt = millis();
    Serial.println(""Connecting to server..."");
    if (client.connect(server, 80)) {
      Serial.println(""Connected to server"");
      client.println(""GET / HTTP/1.1"");
      client.println(""Host: www.google.com"");
      client.println(""Connection: close"");
      client.println();
    } else {
      Serial.println(""Connection to server failed"");
    }
  }

  // Read server response
  if (client.available()) {
    char c = client.read();
    Serial.print(c);
  }

  // Check if server disconnected
  if (!client.connected()) {
    Serial.println();
    Serial.println(""Disconnecting."");
    client.stop();
  }
}

void updateOutputs()
{
  digitalWrite(ethernet_W5500_RST_PIN_D2, ethernet_W5500_RST_PIN_D2_rawData);
}

/* END CODE */"
iWdTfVJB,Network Connection rev_01,pleasedontcode,Arduino,Friday 20th of June 2025 02:02:44 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Network Connection
	- Source Code NOT compiled for: Arduino Nano 33 BLE
	- Source Code created on: 2025-06-20 07:02:05

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Detect and initialize the Ethernet connection */
	/* using the Ethernet2 library and the W5500 module. */
	/* Retrieve and display the assigned IP address to */
	/* confirm successful connection. */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
#include <SPI.h>
#include <Ethernet2.h> //https://github.com/adafruit/Ethernet2

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t ethernet_W5500_RST_PIN_D2 = 2;

/***** DEFINITION OF SPI PINS *****/
const uint8_t ethernet_W5500_SPI_PIN_MOSI_D11 = 11;
const uint8_t ethernet_W5500_SPI_PIN_MISO_D12 = 12;
const uint8_t ethernet_W5500_SPI_PIN_SCLK_D13 = 13;
const uint8_t ethernet_W5500_SPI_PIN_CS_D10 = 10;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool ethernet_W5500_RST_PIN_D2_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float ethernet_W5500_RST_PIN_D2_phyData = 0.0;

/****** LIBRARY OBJECT INSTANCES *****/
// Instantiate Ethernet object
EthernetClass Ethernet;

/****** NETWORK CONFIGURATION *****/
// Define static IP address (modify as needed)
IPAddress localIp(192, 168, 1, 177); // Example IP address
IPAddress dnsServer(8, 8, 8, 8);    // Example DNS server (Google DNS)

/****** SETUP FUNCTION *****/
void setup(void)
{
  // Initialize Ethernet connection
  Ethernet.init(ethernet_W5500_SPI_PIN_CS_D10); // Set CS pin
  int result = Ethernet.begin( /*mac address*/ NULL, localIp, dnsServer);
  if (result == 0)
  {
    Serial.begin(9600);
    Serial.println(""Ethernet initialization failed"");
  }
  else
  {
    Serial.begin(9600);
    Serial.print(""Ethernet IP address: "");
    Serial.println(Ethernet.localIP());
  }

  // put your setup code here, to run once:
  pinMode(ethernet_W5500_RST_PIN_D2, OUTPUT);
  pinMode(ethernet_W5500_SPI_PIN_CS_D10, OUTPUT);
  // start the SPI library:
  SPI.begin();
}

/***** LOOP FUNCTION *****/
void loop(void)
{
  // put your main code here, to run repeatedly:
  updateOutputs(); // Refresh output data
}

/***** UPDATE OUTPUTS FUNCTION *****/
void updateOutputs()
{
  digitalWrite(ethernet_W5500_RST_PIN_D2, ethernet_W5500_RST_PIN_D2_rawData);
}

/* END CODE */"
gv2EvZ27,qz,samiroexpikachu,JavaScript,Friday 20th of June 2025 01:14:20 AM CDT,"const fs = require(""fs-extra"");
const path = require(""path"");

// Path to store the quiz session data
const dbPath = path.join(process.cwd(), ""cache"", ""quiz_sessions.json"");

// Helper function to read the database.
function getQuizData() {
    try {
        if (!fs.existsSync(dbPath)) {
            fs.ensureFileSync(dbPath);
            fs.writeFileSync(dbPath, ""{}"");
            return {};
        }
        return fs.readJsonSync(dbPath);
    } catch (e) {
        console.error(""Error reading quiz session database:"", e);
        return {}; // Return empty object on failure
    }
}

// Helper function to write to the database.
function saveQuizData(data) {
    try {
        fs.writeJsonSync(dbPath, data, { spaces: 2 });
    } catch (e) {
        console.error(""Error writing to quiz session database:"", e);
    }
}

module.exports = {
    config: {
        name: ""quiz"",
        version: ""2.0"",
        author: ""Samuel"", // As requested
        countDown: 5,
        role: 0,
        description: ""An interactive quiz game where a quiz master awards points."",
        category: ""game"",
        guide: {
            en: ""• !quiz start : Start a new quiz session and become the quiz master.\n"" +
                ""• !quiz show : Display the current leaderboard.\n"" +
                ""• !quiz end : End the current quiz session (only by the quiz master).\n\n"" +
                ""How to play:\n1. The quiz master asks a question.\n2. Players answer.\n3. The quiz master replies to a correct answer with '✅' to award 10 points.""
        }
    },

    onLoad: function() {
        global.quizSessions = getQuizData();
        console.log(""Quiz module loaded and sessions initialized."");
    },

    // onStart will handle explicit commands like !quiz start, !quiz show, !quiz end
    onStart: async function({ api, event, args, usersData }) {
        const { threadID, messageID, senderID } = event;
        const command = (args[0] || """").toLowerCase();
        
        // Ensure the thread is initialized in our global session data
        if (!global.quizSessions[threadID]) {
            global.quizSessions[threadID] = { isActive: false, quizMasterID: null, scores: {} };
        }

        switch (command) {
            case 'start': {
                if (global.quizSessions[threadID].isActive) {
                    const masterName = await usersData.getName(global.quizSessions[threadID].quizMasterID);
                    return api.sendMessage(`A quiz is already in progress, managed by ${masterName}.`, threadID, messageID);
                }
                
                global.quizSessions[threadID] = {
                    isActive: true,
                    quizMasterID: senderID,
                    scores: {} // Reset scores for the new session
                };
                saveQuizData(global.quizSessions);

                const masterName = await usersData.getName(senderID);
                api.sendMessage(`✅ | Quiz session started!\n\n👑 Quiz Master: ${masterName}\n\nYou can now ask questions. Reply with '✅' to a correct answer to award 10 points.`, threadID, messageID);
                break;
            }
            
            case 'show': {
                const session = global.quizSessions[threadID];
                if (!session.isActive || Object.keys(session.scores).length === 0) {
                    return api.sendMessage(""There are no scores to show yet. A quiz must be active and points awarded."", threadID, messageID);
                }

                const sortedUsers = Object.entries(session.scores).sort(([, a], [, b]) => b - a);
                let leaderboardMsg = ""🏆 **Quiz Leaderboard** 🏆\n\n"";
                let rank = 1;

                for (const [userID, score] of sortedUsers) {
                    const userName = await usersData.getName(userID);
                    const rankEmoji = rank === 1 ? '🥇' : rank === 2 ? '🥈' : rank === 3 ? '🥉' : `${rank}.`;
                    leaderboardMsg += `${rankEmoji} ${userName}: ${score} points\n`;
                    rank++;
                }

                api.sendMessage(leaderboardMsg, threadID, messageID);
                break;
            }

            case 'end': {
                const session = global.quizSessions[threadID];
                if (!session.isActive) {
                    return api.sendMessage(""There is no active quiz to end."", threadID, messageID);
                }
                if (session.quizMasterID !== senderID) {
                    return api.sendMessage(""⚠️ | Only the quiz master can end the session."", threadID, messageID);
                }
                
                session.isActive = false;
                // We keep quizMasterID and scores for a final review, but the session is inactive
                saveQuizData(global.quizSessions);

                api.sendMessage(""🏁 | The quiz session has been ended by the quiz master."", threadID, messageID);
                break;
            }
            
            default: {
                const { guide, name } = this.config;
                const prefix = (global.config.PREFIX || ""!"");
                api.sendMessage(`Invalid command. Please use:\n\n${guide.en.replace(/• !/g, `• ${prefix}`)}`, threadID, messageID);
                break;
            }
        }
    },

    // onChat will listen for the quiz master's '✅' reply
    onChat: async function({ api, event, usersData }) {
        const { threadID, messageID, senderID, body, messageReply } = event;

        // Ignore messages without content or from the bot itself
        if (!body || senderID === api.getCurrentUserID()) return;

        const session = global.quizSessions[threadID];
        
        // --- Core Quiz Logic ---
        // Check if all conditions for awarding points are met:
        // 1. A quiz is active in the thread.
        // 2. The message is exactly '✅'.
        // 3. The sender is the current quiz master.
        // 4. The message is a reply to someone else.
        if (
            session && session.isActive &&
            body.trim() === '✅' &&
            senderID === session.quizMasterID &&
            messageReply &&
            messageReply.senderID !== senderID
        ) {
            const targetUserID = messageReply.senderID;

            // Initialize score if user is new
            if (!session.scores[targetUserID]) {
                session.scores[targetUserID] = 0;
            }

          
            session.scores[targetUserID] += 10;
            saveQuizData(global.quizSessions); 

            const targetUserName = await usersData.getName(targetUserID);
            
            // Send a confirmation message and react
            api.sendMessage(`🎉 +10 points for ${targetUserName}!\nTotal points: ${session.scores[targetUserID]}`, threadID);
            api.setMessageReaction(""👍"", messageID, (err) => {}, true);
        }
    }
};"
AR9fRfXR,Untitled,Swiftkill,C++,Friday 20th of June 2025 01:02:35 AM CDT,"struct Foo {
    using pzdc = std::__1::unordered_map<z_hash_t, std::__1::shared_ptr<std::__1::vector<double>>>::iterator;

    int    bar1;
    float  bar2;
    double armpit_of_universe_bar {};
    pzdc   bar3_address;

};
"
x36hqtT9,SigilDERG Student Model V6 Proposed,3th1ca14aX0r,Python,Thursday 19th of June 2025 11:43:32 PM CDT,"#!/usr/bin/env python
""""""
unified_sigil_trainer_v6.py

Trains and exports an ONNX student model with enhanced relational reasoning
and teacher–student distillation support. This version is built to handle
rich, multi-dimensional data—such as that gathered by integrating rust-crate-pipeline
with Crawl4AI.

Key features:
  - Dynamic feature selection via a --feature_cols argument.
  - Two architecture variants: a simple “flat” MLP and a relational variant that processes
    feature-by-feature tokens through a lightweight Transformer encoder.
  - Optional teacher–student distillation: if a teacher_logits file is provided, a KD loss is applied.
  - Manifest generation and optional GPG signing for deployment.

Usage examples:
  python unified_sigil_trainer_v6.py --mode trust --csv enriched_data.csv --onnx trust_model.onnx \
       --feature_cols x0,x1,x2,x3,x4,x5,x6,x7
  python unified_sigil_trainer_v6.py --mode classify --csv enriched_classify.csv --onnx classify_model.onnx \
       --feature_cols f1,f2,f3,f4,f5,f6,f7,f8,f9 --relational --teacher_logits teacher_logits.npy --kd_weight 0.5 --sign
""""""

import argparse, csv, hashlib, json, pathlib, subprocess
from datetime import datetime

import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.utils.data as td
from tqdm import tqdm

# ----------------- Global Hyperparameters -----------------
HIDDEN_DIM = 32         # Increase hidden dimensions if richer data permits
NUM_CLASSES = 3         # For classification mode (otherwise regression/trust)
EPOCHS = 25
BATCH = 128
LEARNING_RT = 1e-3
VERSION = ""v6-unified""

# ----------------- Model Definitions -----------------

# Flat MLP architecture that uses dynamic input dimensions.
class UnifiedSigilNet(nn.Module):
    def __init__(self, input_dim, mode=""trust""):
        super().__init__()
        self.mode = mode
        self.input_dim = input_dim
        self.norm = nn.LayerNorm(input_dim)
        self.fc1 = nn.Linear(input_dim, HIDDEN_DIM)
        self.fc2 = nn.Linear(HIDDEN_DIM, HIDDEN_DIM if mode == ""classify"" else 1)
        self.out = nn.Linear(HIDDEN_DIM, NUM_CLASSES) if mode == ""classify"" else nn.Identity()

    def forward(self, x):
        x = self.norm(x)
        x = F.gelu(self.fc1(x))
        x = F.dropout(x, p=0.10, training=self.training)
        x = F.gelu(self.fc2(x))
        if self.mode == ""trust"":
            score = torch.sigmoid(x)
            # A simple proxy for confidence
            confidence = (score - 0.5).abs() * 2
            return score, confidence
        else:
            return self.out(x)

# Relational variant that treats each input feature as a token.
class RelationalSigilNet(nn.Module):
    def __init__(self, input_dim, mode=""trust""):
        super().__init__()
        self.mode = mode
        self.input_dim = input_dim
        # Each feature is projected into a token embedding of size HIDDEN_DIM.
        self.token_embed_dim = HIDDEN_DIM
        self.feature_proj = nn.Linear(1, self.token_embed_dim)
        # Learnable positional embeddings (one per input feature)
        self.positional = nn.Parameter(torch.zeros(input_dim, self.token_embed_dim))
        # Single-layer Transformer encoder with 1 attention head.
        self.transformer = nn.TransformerEncoderLayer(
            d_model=self.token_embed_dim, nhead=1, batch_first=True
        )
        # Pool across tokens and process the aggregated representation.
        self.fc = nn.Sequential(
            nn.LayerNorm(self.token_embed_dim),
            nn.Linear(self.token_embed_dim, HIDDEN_DIM),
            nn.GELU(),
            nn.Dropout(0.10),
            nn.Linear(HIDDEN_DIM, HIDDEN_DIM if mode == ""classify"" else 1)
        )
        self.out = nn.Linear(HIDDEN_DIM, NUM_CLASSES) if mode == ""classify"" else nn.Identity()

    def forward(self, x):
        # x shape: (batch, input_dim)
        x = x.unsqueeze(-1)  # Now shape: (batch, input_dim, 1)
        x = self.feature_proj(x)  # Shape: (batch, input_dim, token_embed_dim)
        x = x + self.positional  # Apply positional bias
        x = self.transformer(x)  # Process relationally across features
        x = x.mean(dim=1)       # Pool features (mean pooling)
        x = self.fc(x)
        if self.mode == ""trust"":
            score = torch.sigmoid(x)
            confidence = (score - 0.5).abs() * 2
            return score, confidence
        else:
            return self.out(x)

# ----------------- Data Loading -----------------

def load_csv(path, feature_cols, mode, teacher_logits_file=None):
    """"""
    Load a CSV file and only use the columns specified in feature_cols.
    The CSV should also have a target column ""y"" for training.
    If teacher_logits_file is provided, it is assumed to be an npy file where the
    i-th row corresponds to the enriched target from the teacher.
    """"""
    xs, ys, teacher_targets = [], [], []
    teacher_all = None
    if teacher_logits_file:
        teacher_all = np.load(teacher_logits_file)
    with open(path, newline='') as fh:
        rdr = csv.DictReader(fh)
        for i, row in enumerate(rdr):
            try:
                # Dynamically gather features from the specified columns.
                vec = [float(row[col]) for col in feature_cols if col in row]
            except Exception as ex:
                continue
            # Skip rows with missing data.
            if any(np.isnan(vec)):
                continue
            xs.append(vec)
            # The target must be in the ""y"" column.
            ys.append(float(row[""y""]) if mode == ""trust"" else int(row[""y""]))
            if teacher_all is not None:
                teacher_targets.append(teacher_all[i])
    xs = np.array(xs, dtype=np.float32)
    # Normalize features columnwise.
    xs_min = xs.min(axis=0)
    xs_max = xs.max(axis=0)
    xs_norm = (xs - xs_min) / (xs_max - xs_min + 1e-8)
    x = torch.tensor(xs_norm, dtype=torch.float32)
    if mode == ""trust"":
        y = torch.tensor(ys, dtype=torch.float32)
    else:
        y = torch.tensor(ys, dtype=torch.long)
    if teacher_all is not None:
        teacher_tensor = torch.tensor(np.array(teacher_targets), dtype=torch.float32)
        return td.TensorDataset(x, y, teacher_tensor)
    else:
        return td.TensorDataset(x, y)

# ----------------- Training Loop -----------------

def train(model, loader, mode, kd_weight=0.0):
    """"""
    Training loop with support for teacher–student distillation.
    If kd_weight > 0, expect the loader to return (x, y, teacher_target).
    """"""
    base_loss_fn = nn.BCELoss() if mode == ""trust"" else nn.CrossEntropyLoss()
    kd_loss_fn = nn.MSELoss() if mode == ""trust"" else nn.KLDivLoss(reduction=""batchmean"")
    
    optimizer = torch.optim.Adam(model.parameters(), lr=LEARNING_RT)
    for epoch in range(EPOCHS):
        model.train()
        running_loss = 0.0
        pbar = tqdm(loader, desc=f""Epoch {epoch+1}/{EPOCHS}"")
        for batch in pbar:
            optimizer.zero_grad()
            if len(batch) == 3:
                xb, yb, teacher_target = batch
            else:
                xb, yb = batch
                teacher_target = None
            out = model(xb)
            if mode == ""trust"":
                # For trust mode, use the predicted score.
                pred = out[0].squeeze(1)
            else:
                pred = out
            loss = base_loss_fn(pred, yb)
            if teacher_target is not None and kd_weight > 0:
                if mode == ""trust"":
                    kd_loss = kd_loss_fn(pred, teacher_target)
                else:
                    kd_loss = kd_loss_fn(F.log_softmax(pred, dim=-1), F.softmax(teacher_target, dim=-1))
                loss = (1 - kd_weight) * loss + kd_weight * kd_loss
            loss.backward()
            optimizer.step()
            running_loss += loss.item()
            pbar.set_postfix({""loss"": running_loss / (pbar.n + 1)})
    return model

# ----------------- ONNX Export -----------------

def export_onnx(model, path, mode):
    model.eval()
    dummy = torch.randn(1, model.input_dim)
    if mode == ""trust"":
        output_names = [""score"", ""confidence""]
    else:
        output_names = [""logits""]
    torch.onnx.export(
        model,
        dummy,
        path,
        input_names=[""x""],
        output_names=output_names,
        dynamic_axes={""x"": {0: ""batch_size""}},
        opset_version=17,
    )

# ----------------- Manifest + Signing -----------------

def hash_file(path):
    with open(path, ""rb"") as f:
        return hashlib.sha256(f.read()).hexdigest()

def write_manifest(path, sha, mode, input_dim, hidden_dim, classes, version):
    manifest = {
        pathlib.Path(path).name: sha,
        ""version"": version,
        ""mode"": mode,
        ""input_dim"": input_dim,
        ""hidden_dim"": hidden_dim,
        ""classes"": classes,
        ""timestamp"": datetime.now().isoformat(),
    }
    manifest_path = pathlib.Path(path).with_name(""model_manifest.json"")
    with open(manifest_path, ""w"") as f:
        json.dump(manifest, f, indent=2)

def sign_model(path):
    try:
        subprocess.run([""gpg"", ""--detach-sign"", ""--armor"", path], check=True)
        print(""GPG signature created."")
    except Exception as e:
        print(""GPG signing failed:"", e)

# ----------------- Main -----------------

if __name__ == ""__main__"":
    ap = argparse.ArgumentParser()
    ap.add_argument(""--mode"", choices=[""trust"", ""classify""], required=True, help=""Operation mode"")
    ap.add_argument(""--csv"", required=True, help=""CSV file with enriched training data"")
    ap.add_argument(""--onnx"", required=True, help=""Output ONNX model file"")
    ap.add_argument(""--feature_cols"", required=False, default="""", help=""Comma-separated feature column names (e.g., x0,x1,x2)"")
    ap.add_argument(""--sign"", action=""store_true"", help=""GPG-sign the exported ONNX model"")
    ap.add_argument(""--relational"", action=""store_true"", help=""Use the relational transformer variant"")
    ap.add_argument(""--teacher_logits"", default=None, help=""Optional teacher logits file (npy)"")
    ap.add_argument(""--kd_weight"", type=float, default=0.0, help=""Weight for KD loss (0 disables distillation)"")
    args = ap.parse_args()

    # Determine features: either use provided list or (as a fallback) default to a small set.
    if args.feature_cols:
        feature_cols = [col.strip() for col in args.feature_cols.split("","")]
    else:
        # Defaults – adjust as needed if enrichment adds more columns.
        feature_cols = [""x0"", ""x1"", ""x2"", ""x3"", ""x4"", ""x5"", ""x6"", ""x7""]
    
    input_dim = len(feature_cols)
    
    # Choose the student model architecture.
    if args.relational:
        model = RelationalSigilNet(input_dim=input_dim, mode=args.mode)
    else:
        model = UnifiedSigilNet(input_dim=input_dim, mode=args.mode)
    
    # Load the dataset (with teacher logits if provided).
    dataset = load_csv(args.csv, feature_cols, args.mode, teacher_logits_file=args.teacher_logits)
    loader = td.DataLoader(dataset, batch_size=BATCH, shuffle=True)
    
    # Train the model.
    model = train(model, loader, args.mode, kd_weight=args.kd_weight)
    
    # Export the trained model to ONNX.
    export_onnx(model, args.onnx, args.mode)
    sha = hash_file(args.onnx)
    classes = NUM_CLASSES if args.mode == ""classify"" else 1
    write_manifest(args.onnx, sha, args.mode, input_dim, HIDDEN_DIM, classes, VERSION)
    if args.sign:
        sign_model(args.onnx)
    print(f""Model and manifest ready for mode: {args.mode}, using features: {feature_cols}"")
"
7ikWnzm9,BFS Algorithm,Nevtr4l,C++,Thursday 19th of June 2025 11:16:53 PM CDT,"#include <bits/stdc++.h>
using namespace std;

int main() {
  // n: núm. de nodos - m: núm. de aristas
  int n, m; cin >> n >> m;
  vector<vector<int>> adj(n+1);
  while (m--) {
    int u, v; cin >> u >> v;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }

  vector<bool> vis(n+1);
  queue<int> q;
  function<void(int)> bfs = [&](int start) {
    vis[start] = true;
    q.push(start);

    while (!q.empty()) {
      int u = q.front();
      q.pop();
      cout << u << ' ';

      for (int& v : adj[u]) {
        if (vis[v]) continue;
        vis[v] = true;
        q.push(v);
      }
    }
  };

  for (int u = 1; u <= n; u++) {
    if (vis[u]) continue;
    bfs(u);
  }

  return 0;
}"
2e7xW9ZQ,DFS Algorithm,Nevtr4l,C++,Thursday 19th of June 2025 10:54:44 PM CDT,"#include <bits/stdc++.h>
using namespace std;

int main() {
  // n: núm. de nodos - m: núm. de aristas
  int n, m; cin >> n >> m;
  vector<vector<int>> adj(n+1);
  while (m--) {
    int u, v; cin >> u >> v;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }

  vector<bool> vis(n+1);
  function<void(int)> dfs = [&](int u) {
    vis[u] = true;
    cout << u << ' ';
    for (int& v : adj[u]) {
      if (vis[v]) continue;
      dfs(v);
    }
  };

  for (int u = 1; u <= n; u++) {
    if (vis[u]) continue;
    dfs(u);
  }

  return 0;
}"
ewaSreEx,3x3improved,CBredlow,Lua,Thursday 19th of June 2025 10:52:46 PM CDT,"if not turtle then
    printError(""Requires a Turtle"")
    return
end

local tArgs = { ... }
if #tArgs ~= 1 then
    local programName = arg[0] or fs.getName(shell.getRunningProgram())
    print(""Usage: "" .. programName .. "" <length>"")
    return
end

local length = tonumber(tArgs[1])
if length < 1 then
    print(""Tunnel length must be positive"")
    return
end

local collected = 0

local function collect()
    collected = collected + 1
    if math.fmod(collected, 25) == 0 then
        print(""Mined "" .. collected .. "" items."")
    end
end

local function tryDig()
    while turtle.detect() do
        if turtle.dig() then
            collect()
            sleep(0.5)
        else
            return false
        end
    end
    return true
end

local function tryDigUp()
    while turtle.detectUp() do
        if turtle.digUp() then
            collect()
            sleep(0.5)
        else
            return false
        end
    end
    return true
end

local function tryDigDown()
    while turtle.detectDown() do
        if turtle.digDown() then
            collect()
            sleep(0.5)
        else
            return false
        end
    end
    return true
end

local function refuel()
    local fuelLevel = turtle.getFuelLevel()
    if fuelLevel == ""unlimited"" or fuelLevel > 0 then
        return
    end

    local function tryRefuel()
        for n = 1, 16 do
            if turtle.getItemCount(n) > 0 then
                turtle.select(n)
                if turtle.refuel(1) then
                    turtle.select(1)
                    return true
                end
            end
        end
        turtle.select(1)
        return false
    end

    if not tryRefuel() then
        print(""Add more fuel to continue."")
        while not tryRefuel() do
            os.pullEvent(""turtle_inventory"")
        end
        print(""Resuming Tunnel."")
    end
end

local function tryMove(moveFunc, digFunc, attackFunc)
    refuel()
    while not moveFunc() do
        if turtle.detect() then
            if not digFunc() then
                return false
            end
        elseif attackFunc and attackFunc() then
            collect()
        else
            sleep(0.5)
        end
    end
    return true
end

local function digLayer()
    -- Dig the 3x3 layer
    tryDigUp() -- Top center
    tryDigDown() -- Bottom center
    turtle.turnLeft()
    tryDig() -- Left center
    tryMove(turtle.up, tryDig, turtle.attack) -- Top left
    tryDig()
    turtle.turnRight()
    turtle.turnRight()
    tryDig() -- Top right
    tryMove(turtle.down, tryDig, turtle.attack)
    tryDig() -- Bottom right
    tryMove(turtle.down, tryDig, turtle.attack)
    tryDig() -- Bottom left
    turtle.turnLeft()
    turtle.turnLeft()
    tryDig() -- Left bottom
    turtle.turnRight()
    tryMove(turtle.up, tryDig, turtle.attack) -- Return to center
end

print(""Tunnelling..."")

for n = 1, length do
    digLayer()
    if n < length then
        if not tryMove(turtle.forward, tryDig, turtle.attack) then
            print(""Aborting Tunnel."")
            break
        end
    else
        print(""Tunnel complete."")
    end
end

-- Return to start
local depth = length
turtle.turnLeft()
turtle.turnLeft()
while depth > 0 do
    if not tryMove(turtle.forward, tryDig, turtle.attack) then
        print(""Unable to return to start."")
        break
    end
    depth = depth - 1
end
turtle.turnRight()
turtle.turnRight()

print(""Tunnel complete."")
print(""Mined "" .. collected .. "" items total."")"
