id,title,username,language,date,content
YDM0T6gZ,Example for Pink,pen_desarapen,Python,Thursday 14th of August 2025 12:58:47 AM CDT,"# DC Roll
dc_roll=""""
roll_type=""""
if d100_1.total>70 and d100_1.total<101:
    dc_roll=vroll(""3d4+2"")
    roll_type=""an Easy""
elif d100_1.total>40 and d100_1.total<71:
    dc_roll=vroll(""3d4+5"")
    roll_type=""a Medium""
elif d100_1.total>10 and d100_1.total<41:
    dc_roll=vroll(""4d4+5"")
    roll_type=""a Hard""
elif d100_1.total>0 and d100_1.total<11:
    dc_roll=vroll(""4d4+10"")
    roll_type=""a Super Hard""

#Prize Type
prize_type=""""
prize_desc=""""
leviathan_roll=vroll(""1d7"")
leviathan_type_array=[""Shark"", ""Whale Shark"", ""Sea Snake"", ""Sea Dragon"", ""Seahorse"", ""Swordfish"", ""Kraken""]
leviathan_type=leviathan_type_array[leviathan_roll.total-1]
if d100_2.total>0 and d100_2.total<31:
    prize_type=""Simple Fish ""
    prize_desc=f'''A tiny-sized fish plush with very simplified details.'''
    image_link=""https://media.discordapp.net/attachments/1334675230492332055/1395222166622044261/Aqualos1.png?ex=6879a966&is=687857e6&hm=e6a0a18ad90c6621e46592df8585f09fb9926dbc97dd5c8feb8b476f3d75e3bb&=&quality=lossless""
elif d100_2.total>30 and d100_2.total<61:
    prize_type=""Regular Fish""
    prize_desc=f'''A small-sized fish plush with simplified details.'''
    image_link=""https://media.discordapp.net/attachments/1334675230492332055/1395222165707685918/Aqualos2.png?ex=6879a966&is=687857e6&hm=cacca631021c0a2eea07444d4487f4194ad9f8b71e4dcd5db36b8b27170cddbd&=&quality=lossless""
elif d100_2.total>60 and d100_2.total<91:
    prize_type=""Cute Fish""
    prize_desc=f'''A small-sized fish plush with endearing and cute details.'''
    image_link=""https://media.discordapp.net/attachments/1334675230492332055/1395222166064070797/Aqualos3.png?ex=6879a966&is=687857e6&hm=9e0c64752f2838129c7d83d8f2c371c24000b78db8fa7992b11ff8214d91c64c&=&quality=lossless""
elif d100_2.total>90 and d100_2.total<101:
    prize_type=""GRAND LEVIATHAN""
    prize_desc=f'''A medium-sized plush of a {leviathan_roll} → **{leviathan_type}** with exquisite and charming craftmanship.'''
    image_link=""https://media.discordapp.net/attachments/1334675230492332055/1395222166324383796/Aqualos4.png?ex=6879a966&is=687857e6&hm=8a1fbd361e3ee44a33056726952c3f0d585c80e53e4b3bda4ff678113d586371&=&quality=lossless""

#Check type
checks_useable=[""athletics"", ""sleight of hand"", ""investigation"", ""perception"", ""performance""]
checkName=""""
challenge_desc=""""
article=""""

if d100_3.total>0 and d100_3.total<21:
    checkName=""athletics""
    article=""an""
    challenge_desc=f'''The device handle grows heavy from a magical weight! It seems pulling your desired prize will take some strength!'''
elif d100_3.total>20 and d100_3.total<41:
    checkName=""sleight of hand""
    article=""a""
    challenge_desc=f'''The device handle will need some expert maneuvering to position correctly!'''
elif d100_3.total>40 and d100_3.total<61:
    checkName=""investigation""
    article=""an""
    challenge_desc=f'''The device portrays an illusion of a puzzle! It seems you need to use your wits to solve it and gain your prize.'''
elif d100_3.total>60 and d100_3.total<81:
    checkName=""perception""
    article=""a""
    challenge_desc=f'''The device portrays an illusion of two images! It seems you have to observe it keenly and pick the difference to gain your prize.'''
elif d100_3.total>80 and d100_3.total<101:
    checkName=""performance""
    article=""a""
    challenge_desc=f'''The device conjures glowing patterns on the ground in front of it and starts playing a song! It seems you have to dance to the beat to obtain your prize!'''

#Proccing success and note
result_text=""""
result_text2=""""

if result>=internalDC:
    result_text=""Success!""
    result_text2=f'''Congratulations! You've won a **{prize_type}**! :tada:'''
else:
    result_text=""Failure!""
    result_text2=f'''Better luck next time!'''
    image_link=""""

n = ""\n""

# embed
return f'''embed -title ""{event_name}"" -desc ""*{event_desc}*"" -f 《Challenge Roll! | *The Fish Hunt will be...*
{d100_1} → **{roll_type} Challenge!**
**DC:** {dc_roll}|inline》 -f 《Prize Roll! | *The prize you've snagged is...*
{d100_2} → a **{prize_type}**!
> *{prize_desc}*|inline》 -f 《Check Roll! | *{challenge_desc}*
> You have to make {article} **{checkName}** check against **DC {dc_roll.total}**. Can you make it?》 -f ""Result | **{checkName}:** {check[checkName]} ...**{result_text}**
*{result_text2}*"" -f ""Meta | **Character Name:** {name} (L{level}) \n**User ID:** <@{character().owner}> \n**Coin Purse:** {prev_coins}gp → {new_coins}gp (-{cost}gp)"" -footer ""{event_name} | !{aliasName}"" -color ""{alias_color}"" -thumb ""{image_link}""'''
"
40YUqXx3,Untitled,vuselesss,HTML,Wednesday 13th of August 2025 11:15:27 PM CDT,"onlinepoll.me/poll/vote/backyard-football-2004-who-wins
onlinepoll.me/poll/vote/backyard-football-2004-who-wins-1
onlinepoll.me/poll/vote/backyard-football-2004-who-wins-2
onlinepoll.me/poll/vote/backyard-football-2004-who-wins-3
onlinepoll.me/poll/vote/backyard-football-2004-who-wins-4
onlinepoll.me/poll/vote/backyard-football-2004-who-wins-5
onlinepoll.me/poll/vote/backyard-football-2004-who-wins-6
onlinepoll.me/poll/vote/backyard-football-2004-who-wins-7
onlinepoll.me/poll/vote/backyard-football-2004-who-wins-8
onlinepoll.me/poll/vote/backyard-football-2004-who-wins-9"
krHhxpTf,Untitled,vuselesss,HTML,Wednesday 13th of August 2025 11:12:24 PM CDT,"onlinepoll.me/poll/vote/backyard-basketball-2004-who-wins
onlinepoll.me/poll/vote/backyard-basketball-2004-who-wins-1
onlinepoll.me/poll/vote/backyard-basketball-2004-who-wins-2
onlinepoll.me/poll/vote/backyard-basketball-2004-who-wins-3
onlinepoll.me/poll/vote/backyard-basketball-2004-who-wins-4
onlinepoll.me/poll/vote/backyard-basketball-2004-who-wins-5
onlinepoll.me/poll/vote/backyard-basketball-2004-who-wins-6
onlinepoll.me/poll/vote/backyard-basketball-2004-who-wins-7
onlinepoll.me/poll/vote/backyard-basketball-2004-who-wins-8
onlinepoll.me/poll/vote/backyard-basketball-2004-who-wins-9"
3mYUayxw,run-claude-job.zsh,gseguin,Bash,Wednesday 13th of August 2025 11:11:40 PM CDT,"#!/usr/bin/env zsh
set -euo pipefail

### ===== SETTINGS =====
IDLE_MAX_SECS=300
REPO_DIR=""$HOME/path/to/your/repo""   # or ~ if using ~/.claude/commands

### ===== ARGUMENTS =====
if (( $# < 1 )); then
  echo ""Usage: $0 <slash_command> [command_args...]"" >&2
  exit 2
fi

SLASH_CMD=""$1""
shift
SLASH_ARGS=""${*:-}""

### ===== FUNCTIONS =====
is_user_active() {
  local idle
  idle=""$(ioreg -c IOHIDSystem | awk '/HIDIdleTime/ {print int($NF/1000000000); exit}')""
  [[ -n ""$idle"" && ""$idle"" -lt ""$IDLE_MAX_SECS"" ]]
}

is_vpn_connected() {
  # ping github.paypal.com once, 2-second timeout, discard output
  ping -c 1 -W 2000 github.paypal.com >/dev/null 2>&1
}

### ===== GATES =====
is_user_active || exit 0
is_vpn_connected || exit 0

### ===== RUN via Terminal so Touch ID can appear =====
export REPO_DIR SLASH_CMD SLASH_ARGS

osascript <<'APPLESCRIPT'
on run
  set repoDir to system attribute ""REPO_DIR""
  set slashCmd to system attribute ""SLASH_CMD""
  set slashArgs to system attribute ""SLASH_ARGS""

  tell application ""Terminal""
    activate
    do script ""exec /bin/zsh -l -c 'set -euo pipefail; cd "" & repoDir & "";
      sudo -v;  # Touch ID prompt (pam_tid) will appear here
      /usr/local/bin/claude-slash "" & slashCmd & "" "" & quoted form of slashArgs & "";
      echo; echo \""[✔] Job finished. You can close this window.\""'""
  end tell
end run
APPLESCRIPT
"
gym0QeaY,com.yourname.claudejob.plist,gseguin,XML,Wednesday 13th of August 2025 11:08:13 PM CDT,"<?xml version=""1.0"" encoding=""UTF-8""?>
<!DOCTYPE plist PUBLIC ""-//Apple//DTD PLIST 1.0//EN"" ""http://www.apple.com/DTDs/PropertyList-1.0.dtd"">
<plist version=""1.0"">
<dict>
  <key>Label</key>
  <string>com.yourname.claude.local-admin</string>

  <!-- Monday 09:00 local time -->
  <key>StartCalendarInterval</key>
  <dict>
    <key>Weekday</key><integer>2</integer>
    <key>Hour</key><integer>9</integer>
    <key>Minute</key><integer>0</integer>
  </dict>

  <!-- Pass args to your zsh script: first arg is the slash command name (no leading /), rest are optional -->
  <key>ProgramArguments</key>
  <array>
    <string>/bin/zsh</string>
    <string>-lc</string>
    <string>""$HOME/bin/run-claude-job.zsh local-admin""</string>
  </array>

  <!-- Only run in your logged-in GUI session so Touch ID can appear -->
  <key>LimitLoadToSessionType</key>
  <string>Aqua</string>

  <!-- Logs (optional but handy) -->
  <key>StandardOutPath</key>
  <string>$HOME/Library/Logs/claude-local-admin.out.log</string>
  <key>StandardErrorPath</key>
  <string>$HOME/Library/Logs/claude-local-admin.err.log</string>
</dict>
</plist>
"
5YA5eUxC,Untitled,vuselesss,HTML,Wednesday 13th of August 2025 11:04:15 PM CDT,"onlinepoll.me/en/poll/vote/backyard-hockey-who-wins
onlinepoll.me/en/poll/vote/backyard-hockey-who-wins-1
onlinepoll.me/en/poll/vote/backyard-hockey-who-wins-2
onlinepoll.me/en/poll/vote/backyard-hockey-who-wins-3
onlinepoll.me/en/poll/vote/backyard-hockey-who-wins-4
onlinepoll.me/en/poll/vote/backyard-hockey-who-wins-5
onlinepoll.me/en/poll/vote/backyard-hockey-who-wins-6
onlinepoll.me/en/poll/vote/backyard-hockey-who-wins-7
onlinepoll.me/en/poll/vote/backyard-hockey-who-wins-8
onlinepoll.me/en/poll/vote/backyard-hockey-who-wins-9"
qBuiMkJx,Untitled,ankdroid,Python,Wednesday 13th of August 2025 11:02:05 PM CDT,"from odoo import fields, models, api, tools,_
import logging
from odoo.exceptions import ValidationError

_logger = logging.getLogger(__name__)



class CurrentStockDcView(models.Model):
    _name = 'current.stock.dc.view'
    _description = 'current.stock.dc.view'
    _auto = False
    _rec_name = 'id'

    category_id = fields.Integer(string='Category ID')
    category_name = fields.Char(string='Category Name')
    product = fields.Char(string='Product')
    branch = fields.Char(string='Branch')
    physical = fields.Integer(string='Physical')
    so_draft = fields.Integer(string='So Draft')
    so_confirm = fields.Integer(string='So Confirm')
    so_waiting = fields.Integer(string='So Waiting')
    so_staging_mnf = fields.Integer(string='So Staging Mnf')
    commit_to_draft = fields.Integer(string='Commit TO Draft')
    commit_to = fields.Integer(string='Commit TO')
    to_satu_branch = fields.Integer(string='TO Satu Branch')
    to_antar_branch = fields.Integer(string='TO Antar Branch')
    mo = fields.Integer(string='MO')
    mo_draft = fields.Integer(string='MO Draft')
    dynamic_reserve = fields.Integer(string='Dynamic Reserve')
    available_spot = fields.Integer(string='Available Spot')
    available_spot_submit = fields.Integer(string='Available Spot Submit')
    available_contract = fields.Integer(string='Available Contract')
    available_contract_submit = fields.Integer(string='Available Contract Submit')

    product_category_id = fields.Many2one('attribute.product.category')
    category = fields.Char('Sub Category')
    total_stock = fields.Char('Total Stock')
    psr = fields.Integer(string='PSR')
    psr_draft = fields.Integer(string='PSR draft')
    psr_confirm = fields.Integer(string='PSR Confirm')



    def cron_cancel_commit_to(self):
        _logger.info(""---------------------- cron_cancel_commit_to -------------------------"")
        query_select_current_stock_dc = """"""
            select available_contract as available_contract , 
            commit_to as commit_to ,
            product as default_code, 
            branch as branch,
            dynamic_reserve as dynamic_reserve
            from current_stock_dc_view csdv
            where available_contract < 0 and commit_to > 0
        """"""
        self.env.cr.execute(query_select_current_stock_dc)
        current_stock_dc = self.env.cr.dictfetchall()
        _logger.info(""%s --------------- current_stock_dc""%current_stock_dc)

        if current_stock_dc:

            for stock_dc in current_stock_dc:

                default_code = stock_dc['default_code']
                available_contract = stock_dc['available_contract']
                commit_to = stock_dc['commit_to']
                branch = stock_dc['branch']

                _logger.info(""%s --------------- default_code""%default_code)
                _logger.info(""%s --------------- available_contract""%available_contract)
                _logger.info(""%s --------------- commit_to""%commit_to)
                _logger.info(""%s --------------- branch""%branch)

                if branch == 'JKT':

                    query_select_commit_to = """"""
                        select ctob.id as to_id, jakarta as qty_jkt from commited_transfer_order_branch ctob 
                        left join product_product pp on ctob.product_id = pp.id 
                        where pp.default_code = %(default_code)s and jakarta > 0 and status = 'confirmed'
                        order by jakarta desc
                    """"""
                    self.env.cr.execute(query_select_commit_to,{
                        'default_code' : default_code
                    })
                    commited_to = self.env.cr.fetchone()
                
                elif branch == 'SBY':
                    query_select_commit_to = """"""
                        select ctob.id as to_id, jakarta as qty_jkt from commited_transfer_order_branch ctob 
                        left join product_product pp on ctob.product_id = pp.id 
                        where pp.default_code = %(default_code)s and surabaya > 0 and status = 'confirmed'
                        order by surabaya desc
                    """"""
                    self.env.cr.execute(query_select_commit_to,{
                        'default_code' : default_code
                    })
                    commited_to = self.env.cr.fetchone()
                    
                commited_to_branch = self.env['commited.transfer.order.branch'].sudo().search([('id','=',commited_to)],limit=1)
                _logger.info(""%s --------------- commited_to_branch""%commited_to_branch)

                commited_to_branch.sudo().unlink()





#
    def init(self):
        pnj_db = self.env['integration.external.db'].sudo().search([('server', '=', 'pnj_replication')],
                                                                   limit=1)
        print(pnj_db)
        if not pnj_db:
            raise ValidationError(
                ""Server Database Replication PNJ Belum di setting, silahkan di setting external DB nya terlebih dahulu!"")
        sql_pnj = """"""
                select
            		pp.default_code as product,
            		rb.code as branch,
            		coalesce(sum(sq.quantity),0) - coalesce(sum(sq.reserved_quantity),0) as physical
            	from stock_quant sq 
            	left join stock_location sl on sq.location_id = sl.id
                inner join product_product pp on sq.product_id = pp.id
                inner join product_template pt on pp.product_tmpl_id = pt.id
                inner join attribute_product_category apc on pt.attribute_categ_id = apc.id
                inner join res_branch rb  on sl.branch_id = rb.id
                where
                    sl.active = true
                    and sl.usage = $$internal$$
                    and pp.default_code  like $$P%$$
               group by 1,2
        """"""

        pnj_db = self.env['integration.external.db'].sudo().search([('server', '=', 'pnj_replication')],
                                                                   limit=1)
        # print(pnj_db)
        # if not pnj_db:
        #     raise ValidationError(
        #         ""Server Database Replication PNJ Belum di setting, silahkan di setting external DB nya terlebih dahulu!"")
        sql_pnj = """"""
                        select
                    		pp.default_code as product,
                    		rb.code as branch,
                    		coalesce(sum(sq.quantity),0) - coalesce(sum(sq.reserved_quantity),0) as physical
                    	from stock_quant sq 
                    	left join stock_location sl on sq.location_id = sl.id
                        inner join product_product pp on sq.product_id = pp.id
                        inner join product_template pt on pp.product_tmpl_id = pt.id
                        inner join attribute_product_category apc on pt.attribute_categ_id = apc.id
                        inner join res_branch rb  on sl.branch_id = rb.id
                        where
                            sl.active = true
                            and sl.usage = $$internal$$
                            and pp.default_code  like $$P%$$
                       group by 1,2
                """"""
        com_db = self.env['integration.external.db'].sudo().search([('server', '=', 'repl_community')],
                                                                   limit=1)
        # if not com_db:
        #     raise ValidationError(
        #         ""Server Database Replication Community Belum di setting, silahkan di setting external DB nya terlebih dahulu!"")

        sql_com = """"""
            select 
            		branch,
            		product,
            		sum(so_draft) as so_draft,
            		sum(so_waiting) as so_waiting,
            		sum(so_staging_mnf) as so_staging_mnf,
                    sum(psr_draft) as psr_draft,
            		sum(psr) as psr
            	from (
            		select 
            		branch,
            		product,
            		sum(so_draft) as so_draft,
            		sum(so_waiting) as so_waiting,
            		sum(so_staging_mnf) as so_staging_mnf,
            		sum(psr_draft) as psr_draft,
            		sum(psr) as psr
	            	from (
	            		select
	            			rb.code as branch,
	            			pp.default_code as product,
	            			SUM(CASE WHEN so.state = $$draft$$ THEN sol.product_uom_qty ELSE 0 END) AS so_draft,
	            			SUM(CASE WHEN so.state = $$waiting_confirmation$$ THEN sol.product_uom_qty ELSE 0 END) AS so_waiting,
	            			0 as so_staging_mnf,
                            0 as psr_draft,
	            			0 as psr
	            		from sale_order_line sol
	            		left join sale_order so on sol.order_id = so.id
	            		left join res_branch rb on so.branch_id = rb.id
	            		left join product_product pp on sol.product_id = pp.id
	            		group by 1,2
	            	) a
	            	group by 1,2
	            	union all(
		                -- SO Staging MNF
		                select 
		                	rb.code as branch,
		                	l.product_code as product, 
		                	0 as so_draft,
		                	0 as so_waiting,
		                	sum(l.product_qty) as so_staging_mnf,
		                	0 as psr_draft,
		                	0 as psr
		                from so_staging_crmmnf_line l
		                left join so_staging_crmmnf hd on l.so_staging_id = hd.id
		                left join res_branch rb on hd.branch_id = rb.id
		                where hd.state in ($$confirm$$,$$waiting_ppic$$)
		                group by 1,2
	            	)
	            	union all(
	            		-- PSR
		                select 
		                	rb.code as branch,
		                	pp.default_code as product, 
		                	0 as so_draft,
		                	0 as so_waiting,
		                	0 as so_staging_mnf,
		                	SUM(CASE WHEN psr.state = $$draft$$ THEN psrl.request_qty ELSE 0 END) as psr_draft,
		                	SUM(CASE WHEN psr.state in ($$waiting_sm$$,$$waiting_gm_sales$$) THEN psrl.request_qty ELSE 0 END) as psr_draft
		            	from product_sample_request_line psrl
						left join product_sample_request psr on psrl.product_sample_request_id = psr.id
		                left join res_branch rb on psr.branch_id = rb.id
		                left join product_product pp on psrl.product_id = pp.id
		                where psr.state in ($$draft$$,$$waiting_sm$$,$$waiting_gm_sales$$)
		                group by 1,2
	            	)
            	) community
            	group by 1,2
        """"""


        sql = """"""
            	select
                row_number() OVER() AS id,
                *
                from (
                    select
            	    category_id,
            	    category_name,
            	    product,
            	    branch,
            	    coalesce(sum(physical),0) as physical,
            	    coalesce(sum(so_draft),0) as so_draft,
            	    coalesce(sum(so_confirm),0) as so_confirm,
            	    coalesce(sum(so_waiting),0) as so_waiting,
            	    coalesce(sum(so_staging_mnf),0) as so_staging_mnf,
            	    coalesce(max(commit_to_draft),0) as commit_to_draft,
            	    coalesce(sum(commit_to),0) as commit_to,
            	    coalesce(sum(to_satu_branch),0) as to_satu_branch,
            	    coalesce(sum(to_antar_branch),0) as to_antar_branch,
            	    coalesce(sum(mo),0) as mo,
            	    coalesce(sum(mo_draft),0) as mo_draft,
                    coalesce(sum(psr_draft),0) as psr_draft,
            	    coalesce(sum(psr),0) as psr,
            	    coalesce(sum(psr_confirm),0) as psr_confirm,
            	    coalesce(sum(dynamic_reserve),0) as dynamic_reserve,
            	    (
            	        coalesce(sum(physical),0)
            	        - coalesce(sum(so_confirm),0)
            	        - coalesce(sum(so_waiting),0)
            	        - coalesce(sum(so_staging_mnf),0)
            	        - coalesce(sum(dynamic_reserve),0)
            	        - coalesce(sum(commit_to),0) 
            	        + coalesce(sum(to_satu_branch),0)
            	        - coalesce(sum(to_antar_branch),0)
            	        - coalesce(sum(mo),0)
                        - coalesce(sum(psr),0)
            	        - coalesce(sum(psr_confirm),0)
            	    ) as available_spot,
            	    (
            	        coalesce(sum(physical),0)  
            	        - coalesce(sum(so_confirm),0)
            	        - coalesce(sum(so_draft),0)
            	        - coalesce(sum(so_waiting),0)
            	        - coalesce(sum(so_staging_mnf),0)
            	        - coalesce(sum(commit_to),0)
            	        - coalesce(sum(commit_to_draft),0)
            	        + coalesce(sum(to_satu_branch),0)
            	        - coalesce(sum(to_antar_branch),0)
            	        - coalesce(sum(mo),0)
            	        - coalesce(sum(mo_draft),0)
            	        - coalesce(sum(dynamic_reserve),0)
                        - coalesce(sum(psr),0)
            	        - coalesce(sum(psr_confirm),0)
                        - coalesce(sum(psr_draft),0)
            	    ) as available_spot_submit,
            	    (
            	        coalesce(sum(physical),0)
            	        - coalesce(sum(so_confirm),0)
            	        - coalesce(sum(so_waiting),0)
            	        - coalesce(sum(so_staging_mnf),0)
            	        - coalesce(sum(commit_to),0)
            	        - coalesce(sum(mo),0)
            	        + coalesce(sum(to_satu_branch),0)
            	        - coalesce(sum(to_antar_branch),0)
                        - coalesce(sum(psr),0)
            	        - coalesce(sum(psr_confirm),0)
            	    ) as available_contract,
            	    (
            	        coalesce(sum(physical),0)  
            	        - coalesce(sum(so_confirm),0)
            	        - coalesce(sum(so_draft),0)
            	        - coalesce(sum(so_waiting),0)
            	        - coalesce(sum(commit_to),0)
            	        - coalesce(sum(commit_to_draft),0)
            	        - coalesce(sum(so_staging_mnf),0)
            	        + coalesce(sum(to_satu_branch),0)
            	        - coalesce(sum(to_antar_branch),0)
            	        - coalesce(sum(mo),0)
            	        - coalesce(sum(mo_draft),0)
                        - coalesce(sum(psr),0)
            	        - coalesce(sum(psr_confirm),0)
                        - coalesce(sum(psr_draft),0)
            	    ) as available_contract_submit
            	 from (
                                select  
                                apc.id as category_id,
                                apc.name as category_name,
                                pp.default_code as product,
                                rb.code as branch,
                                coalesce(sum(sq.quantity),0) as physical,
                                coalesce(max(so_draft.so_draft),0) so_draft,
                                coalesce(max(so_confirm.so_confirm),0) as so_confirm,
                                coalesce(max(so_draft.so_waiting),0) as so_waiting,
                                coalesce(max(so_draft.so_staging_mnf),0) as so_staging_mnf,
                                MAX(CASE WHEN rb.code = $$JKT$$ THEN commit_to_draft.jkt ELSE commit_to_draft.sby END) AS commit_to_draft,
                                MAX(CASE WHEN rb.code = $$JKT$$ THEN commit_to.jkt ELSE commit_to.sby END) AS commit_to,
                                max(to_satu_branch.to_satu_branch) as to_satu_branch,
                                max(to_antar_branch.to_antar_branch) as to_antar_branch,
                                coalesce(max(mo.mo),0) as mo,
                                coalesce(max(mo_draft.mo_draft),0) as mo_draft,
                                coalesce(max(so_draft.psr_draft),0) as psr_draft,
                                coalesce(max(so_draft.psr),0) as psr,
                                coalesce(max(psr_ent.psr),0) as psr_confirm,
                                max(dynamic.dynamic) as dynamic_reserve
                            from stock_quant sq 
                            left join stock_location sl on sq.location_id = sl.id
                            inner join product_product pp on sq.product_id = pp.id
                            inner join product_template pt on pp.product_tmpl_id = pt.id
                            inner join attribute_product_category apc on pt.attribute_categ_id = apc.id
                            inner join res_branch rb  on sl.branch_id = rb.id
                            inner join status_location statloc on statloc.id = sl.status_location_id
                            full join dblink('host=%s dbname=%s user=%s password=%s', '%s') so_draft (
                                branch VARCHAR,
                                product VARCHAR,
                                so_draft FLOAT,
                                so_waiting FLOAT,
                                so_staging_mnf FLOAT,
                                psr_draft FLOAT,
                                psr FLOAT
                            ) on pp.default_code = so_draft.product and rb.code = so_draft.branch
                            full join (
                                select
                                    rb.code as branch,
                                    pp.default_code as product,
                                    SUM(CASE WHEN so.status_so  in ('confirmed','assigned_to_pick','on_picking') THEN sol.product_uom_qty ELSE 0 END) AS so_confirm
                                from sale_order_line sol
                                left join sale_order so on sol.order_id = so.id
                                left join res_branch rb on so.branch_id = rb.id
                                left join product_product pp on sol.product_id = pp.id
                                group by 1,2
                            ) so_confirm on pp.default_code = so_confirm.product and rb.code = so_confirm.branch
                            full join (
                                select
                                    pp.default_code as product,
                                    sum(cto.jakarta) as jkt,
                                    sum(cto.surabaya) as sby
                                from commited_transfer_order_branch cto
                                left join product_product pp on cto.product_id = pp.id
                                where cto.status = 'draft'
                                group by product
                            ) commit_to_draft on pp.default_code = commit_to_draft.product 
                            left join (
                                select 
                                    rb.code as branch,
                                    pp.default_code as product, 
                                    SUM(psrl.request_qty) as psr
                                from product_sample_request_line psrl
                                left join product_sample_request psr on psrl.product_sample_request_id = psr.id
                                left join res_branch rb on psr.branch_id = rb.id
                                left join product_product pp on psrl.product_id = pp.id
                                where psr.state in ($$confirm$$,$$assigned_to_pick$$,$$on_picking$$)
                                group by 1,2
                            ) psr_ent on pp.default_code = psr_ent.product and rb.code = psr_ent.branch
                            full join (
                                select
                                    pp.default_code as product,
                                    sum(cto.jakarta) as jkt,
                                    sum(cto.surabaya) as sby
                                from commited_transfer_order_branch cto
                                left join product_product pp on cto.product_id = pp.id
                                where cto.status = 'confirmed'
                                group by product
                            ) commit_to on pp.default_code = commit_to.product 
                            full join (
                                 select
                                    rb.code as branch,
                                    pp.default_code as product,
                                    SUM(CASE WHEN to2.status in ($$assigned$$,$$on_picking$$) THEN mtol.confirm_qty  ELSE 0 END) AS confirm_qty,
                                    SUM(CASE WHEN to2.status in ($$done_picking$$,$$on_rack_prepare$$) THEN mtol.picked_qty ELSE 0 END) AS picked_qty,
                                    SUM(CASE WHEN to2.status in ($$shipped$$,$$received$$) THEN mtol.shipped_qty ELSE 0 END) AS shipped_qty,
                                    SUM(CASE WHEN to2.status in ($$done_picking$$,$$on_rack_prepare$$) THEN mtol.picked_qty ELSE 0 END) +
                                    SUM(CASE WHEN to2.status in ($$shipped$$,$$received$$) THEN mtol.shipped_qty ELSE 0 END) as to_satu_branch
                                from merge_transfer_order_line mtol 
                                left join transfer_order to2 on mtol.transfer_order_id  = to2.id
                                inner join res_branch rb on to2.source_branch_id = rb.id
                                left join product_product pp on mtol.product_id = pp.id
                                where to2.status not in ('draft', 'confirmed','cancel')
                                and to2.satu_branch = true
                                group by 1,2
                            ) to_satu_branch on pp.default_code = to_satu_branch.product and rb.code = to_satu_branch.branch
                            full join (
                                 select
                                    rb.code as branch,
                                    pp.default_code as product,
                                    SUM(CASE WHEN to2.status in ($$draft$$,$$assigned$$,$$on_picking$$,$$confirmed$$) and coalesce(rb2.virtual_branch, false) != true THEN mtol.confirm_qty  ELSE 0 END) AS confirm_qty,
                                    SUM(CASE WHEN to2.status in ($$done_picking$$,$$on_rack_prepare$$) and coalesce(rb2.virtual_branch, false) != true THEN mtol.picked_qty ELSE 0 END) AS picked_qty,
                                    SUM(CASE WHEN to2.status in ($$shipped$$,$$received$$) and coalesce(rb2.virtual_branch, false) != true THEN mtol.shipped_qty ELSE 0 END) AS shipped_qty,
                                    SUM(CASE WHEN to2.status in ($$draft$$,$$assigned$$,$$on_picking$$,$$confirmed$$) and coalesce(rb2.virtual_branch, false) != true THEN mtol.confirm_qty  ELSE 0 END) as to_antar_branch
                                from merge_transfer_order_line mtol 
                                left join transfer_order to2 on mtol.transfer_order_id  = to2.id
                                inner join res_branch rb on to2.source_branch_id = rb.id
                                left join res_branch rb2 on to2.destination_branch_id = rb2.id
                                left join product_product pp on mtol.product_id = pp.id
                                where to2.status in ('draft','confirmed','assigned','on_picking') 
                                and to2.antar_branch = true
                                group by 1,2
                            ) to_antar_branch on pp.default_code = to_antar_branch.product and rb.code = to_antar_branch.branch
                            left join (
                                select product,source_branch as branch,sum(stock_allocation) as dynamic from  demand_dc_contract_allocation bca group by 1,2
                            ) dynamic on pp.default_code = dynamic.product and rb.code = dynamic.branch
                            left join (
                                select 
                                    rb.code as branch,
                                    pp.default_code as product,
                                    GREATEST(0, sum(amc.product_uom_qty) - sum(amc.comsume_qty)) as mo
                                from abu_mrp_consumed amc 
                                left join abu_mrp_production amp on amc.production_id = amp.id
                                inner join res_branch rb on amp.branch_id  = rb.id
                                inner join product_product pp on amc.product_id = pp.id
                                where amp.state in ('confirmed','assigned_pick','done_pick')
                                group by 1,2
                            ) mo on pp.default_code = mo.product and rb.code = mo.branch
                            left join (
                                select 
                                    rb.code as branch,
                                    pp.default_code as product,
                                    sum(amc.product_uom_qty) as mo_draft
                                from abu_mrp_consumed amc 
                                left join abu_mrp_production amp on amc.production_id = amp.id
                                inner join res_branch rb on amp.branch_id  = rb.id
                                inner join product_product pp on amc.product_id = pp.id
                                where amp.state = 'draft'
                                group by 1,2
                            ) mo_draft on pp.default_code = mo_draft.product and rb.code = mo_draft.branch
                            where
                                sl.active = true
                                and sl.usage = $$internal$$
                                and statloc.type = $$available$$
                                and pt.item_type = 'commercial'
                                and sq.quantity > 0
                                and sl.id in (SELECT 
                                    sl.id
                                   FROM stock_location sl
                                   left join stock_location sl2 on sl.location_id = sl2.id
                                   where sl2.name = 'Stock')
                           group by 1,2,3,4
            	) a
            	where branch in ('JKT','SBY')
            	group by 1,2,3,4
)a
        """""" % (com_db.host, com_db.dbname, com_db.user, com_db.password, sql_com, )
        # print(""""""
        #     CREATE EXTENSION IF NOT EXISTS dblink;
        #     CREATE OR REPLACE VIEW %s AS (%s) ;
        #     """""" % (self._table, sql))

        tools.drop_view_if_exists(self._cr, self._table)
        self._cr.execute(""""""
            CREATE EXTENSION IF NOT EXISTS dblink;
            CREATE OR REPLACE VIEW %s AS (%s) ;
            """""" % (self._table, sql)
                         )"
USHC7vBX,claude-slash,gseguin,Bash,Wednesday 13th of August 2025 10:54:14 PM CDT,"#!/usr/bin/env zsh
set -euo pipefail

if (( $# < 1 )); then
  print -u2 ""usage: claude-slash <command> [args…]""
  exit 2
fi

CMD=""$1""; shift || true
ARGS=""${*:-}""

# project first, then global
if [[ -f "".claude/commands/${CMD}.md"" ]]; then
  FILE="".claude/commands/${CMD}.md""
elif [[ -f ""$HOME/.claude/commands/${CMD}.md"" ]]; then
  FILE=""$HOME/.claude/commands/${CMD}.md""
else
  print -u2 ""Command '${CMD}' not found in .claude/commands or ~/.claude/commands""
  exit 1
fi

# strip YAML frontmatter (--- … ---)
CONTENT=""$(awk 'BEGIN{p=1} /^---$/{c++} c==1{next} c>1{p=1} {if(p) print}' ""$FILE"")""

# inject $ARGUMENTS placeholder
PROMPT=""${CONTENT//\$ARGUMENTS/$ARGS}""

# run in print mode; allow Bash snippets if your command uses !`…`
claude -p --output-format text \
  --allowedTools ""Bash(*:*)"" \
  --dangerously-skip-permissions \
  ""$PROMPT""
"
qegj7JW4,battlecat_taiwan_beta_pc_1.0,cnsnipermike,Lua,Wednesday 13th of August 2025 10:08:39 PM CDT,"exp=1
info=gg.getTargetInfo()
if info.x64 == false then
gg.alert(""檢測到32位\n該腳本不支持x86\n僅支持x86_64"")
os.exit()
end
	  	  pointer_ca=0
bohe_a=(pointer_ca) + 0x4  --id-0--紫色貓薄荷種子
bohe_b=(pointer_ca) + 0xC  --id-1--紅色貓薄荷種子
bohe_c=(pointer_ca) + 0x14  --id-2--藍色貓薄荷種子
bohe_d=(pointer_ca) + 0x1C  --id-3--綠色貓薄荷種子
bohe_e=(pointer_ca) + 0x24  --id-4--黃色貓薄荷種子
bohe_f=(pointer_ca) + 0x6C  --id-13--彩虹貓薄荷種子
bohe_g=(pointer_ca) + 0x7C  --id-15--惡貓薄荷種子
bohe_h=(pointer_ca) + 0x5C  --id-11--古代貓薄荷種子
bohe_i=(pointer_ca) + 0x8C  --id-17--黃金貓薄荷種子
bohe_j=(pointer_ca) + 0x2C  --id-5--紫色貓薄荷種子
bohe_k=(pointer_ca) + 0x34  --id-6--紅色貓薄荷種子
bohe_l=(pointer_ca) + 0x3C  --id-7--藍色貓薄荷種子
bohe_m=(pointer_ca) + 0x44  --id-8--綠色貓薄荷種子
bohe_n=(pointer_ca) + 0x4C  --id-9--黃色貓薄荷種子
bohe_o=(pointer_ca) + 0x54  --id-10--彩虹貓薄荷種子
bohe_p=(pointer_ca) + 0x84  --id-16--惡貓薄荷種子
bohe_q=(pointer_ca) + 0x64  --id-12--古代貓薄荷種子
bohe_r=(pointer_ca) + 0x74  --id-14--黃金貓薄荷種子
shoushi_a=(pointer_ca) + 0x94  --id-18--紫獸石
shoushi_b=(pointer_ca) + 0x9C  --id-19--紅獸石
shoushi_c=(pointer_ca) + 0xA4  --id-20--蒼獸石
shoushi_d=(pointer_ca) + 0xAC  --id-21--翠獸石
shoushi_e=(pointer_ca) + 0xB4  --id-22--黃獸石
shoushi_f=(pointer_ca) + 0xE4  --id-28--彩虹獸石
shoushi_g=(pointer_ca) + 0xBC  --id-23--紫獸結晶
shoushi_h=(pointer_ca) + 0xC4  --id-24--紅獸結晶
shoushi_i=(pointer_ca) + 0xCC  --id-25--蒼獸結晶
shoushi_j=(pointer_ca) + 0xD4  --id-26--翠獸結晶
shoushi_k=(pointer_ca) + 0xDC  --id-27--黃獸結晶
shoulingqi=0x28e8
baijinquan=0x3050
chuanshuoheiquan=(baijinquan)+0x8--no need to modified
baijinquanshuipian=(chuanshuoheiquan)+0x8--no need to modified
zhaofuquan=0x3f28
zhaofuquanG=(zhaofuquan)+0x8--no need to modified
bennengbox=(zhaofuquanG)+0x8--no need to modified
maoguantou=0xc1c0
xp=(maoguantou)+0x158--no need to modified
np=(xp)+0x8--no need to modified
zhandoudaoju=0x4a0d8
yinquan=0x2ff6d4
jinquan=(yinquan)+8--no need to modified
playedtime=0x38c514
maoyanshi=0x40a6c4
miaolida=(maoyanshi)+0x30--no need to modified
sucai=(miaolida)+0x18--no need to modified
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end
function Start()
MAIN = gg.choice({
""首領旗"",
""XP"",
""NP"",
""猫罐頭"",
""戰鬥道具"",
""喵力達"",
""遊戲時數"",
""貓眼石"",
""抽獎券"",
""素材"",
""貓薄荷(未更新)"",
""獸石(未更新)"",
""本能寶箱"",
""腳本資訊"",
""離開"",
})
if MAIN == nil then
gg.toast(""功能表已收起"")
else
if MAIN == 1 then A1() end
if MAIN == 2 then A2() end
if MAIN == 3 then A3() end
if MAIN == 4 then A4() end
if MAIN == 5 then A5() end
if MAIN == 6 then A6() end
if MAIN == 7 then A7() end
if MAIN == 8 then A8() end
if MAIN == 9 then A9() end
if MAIN == 10 then A10() end
if MAIN == 11 then A11() end
if MAIN == 12 then A12() end
if MAIN == 13 then A13() end
if MAIN == 14 then UP() end
if MAIN == 15 then End() end
end
FMXR=-1
end
function A1()
value=gg.prompt({'首領旗'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
b=value[1]
c=65536
d=b*c
value=d
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(shoulingqi)
setvalue(so+py,4,''..value..'')
gg.toast('修改成功')
end
end
function A2()
value=gg.prompt({'XP'},{""99999999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(xp)
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(xp)+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A3()
value=gg.prompt({'NP'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(np)
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(np)+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A4()
value=gg.prompt({'貓罐頭'},{""50000""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(maoguantou)
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(maoguantou)+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A5()
ZDDJ = gg.choice({
""加速"",
""寶物雷達"",
""土豪貓"",
""貓形電腦"",
""洞悉先機"",
""狙擊手"",
""一鍵全改"",
""返回上级目录"",
},nil,(([[
戰鬥道具修改
]])))
if ZDDJ == nil then
gg.toast('已取消')
else
if ZDDJ == 1 then A501() end
if ZDDJ == 2 then A502() end
if ZDDJ == 3 then A503() end
if ZDDJ == 4 then A504() end
if ZDDJ == 5 then A505() end
if ZDDJ == 6 then A506() end
if ZDDJ == 7 then A507() end
if ZDDJ == 8 then Start() end
end
FMXR=-1
end
function A501()
value=gg.prompt({'戰鬥道具-加速'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhandoudaoju)
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhandoudaoju)+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A502()
value=gg.prompt({'戰鬥道具-寶物雷達'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhandoudaoju)+0x8
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhandoudaoju)+0x8+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A503()
value=gg.prompt({'戰鬥道具-土豪貓'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhandoudaoju)+0x10
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhandoudaoju)+0x10+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A504()
value=gg.prompt({'戰鬥道具-貓型電腦'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhandoudaoju)+0x18
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhandoudaoju)+0x18+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A505()
value=gg.prompt({'戰鬥道具-洞悉先機'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhandoudaoju)+0x20
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhandoudaoju)+0x20+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A506()
value=gg.prompt({'戰鬥道具-狙擊手'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhandoudaoju)+0x28
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhandoudaoju)+0x28+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A507()
value=gg.prompt({'戰鬥道具（一鍵全改）'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhandoudaoju)
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhandoudaoju)+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhandoudaoju)+0x8
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhandoudaoju)+0x8+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhandoudaoju)+0x10
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhandoudaoju)+0x10+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhandoudaoju)+0x18
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhandoudaoju)+0x18+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhandoudaoju)+0x20
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhandoudaoju)+0x20+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhandoudaoju)+0x28
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhandoudaoju)+0x28+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A6()
MLD = gg.choice({
""喵力達-A"",
""喵力達-B"",
""喵力達-C"",
""一鍵全改"",
""返回上级目录"",
},nil,(([[
喵力達修改
]])))
if MLD == nil then
gg.toast('已取消')
else
if MLD == 1 then A601() end
if MLD == 2 then A602() end
if MLD == 3 then A603() end
if MLD == 4 then A604() end
if MLD == 5 then Start() end
end
FMXR=-1
end
function A601()
value=gg.prompt({'喵力達-A'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(miaolida)
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(miaolida)+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A602()
value=gg.prompt({'喵力達-B'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(miaolida)+0x8
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(miaolida)+0x8+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A603()
value=gg.prompt({'喵力達-C'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(miaolida)+0x10
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(miaolida)+0x10+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A604()
value=gg.prompt({'喵力達（一鍵全改）'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(miaolida)
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(miaolida)+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(miaolida)+0x8
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(miaolida)+0x8+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(miaolida)+0x10
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(miaolida)+0x10+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A7()
value=gg.prompt({'遊戲時數'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
a=value[1]
b=3600
c=30
d=a*b*c
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(playedtime)
setvalue(so+py,4,''..d..'')
gg.toast('修改成功')
end
end
function A8()
MYS = gg.choice({
""貓眼石(EX)"",
""貓眼石(稀有)"",
""貓眼石(激稀有)"",
""貓眼石(超激稀有)"",
""貓眼石(傳說)"",
""貓眼石(闇)"",
""一鍵全改"",
""返回上级目录"",
},nil,(([[
貓眼石修改
]])))
if MYS == nil then
gg.toast('已取消')
else
if MYS == 1 then A801() end
if MYS == 2 then A802() end
if MYS == 3 then A803() end
if MYS == 4 then A804() end
if MYS == 5 then A805() end
if MYS == 6 then A806() end
if MYS == 7 then A807() end
if MYS == 8 then Start() end
end
FMXR=-1
end
function A801()
value=gg.prompt({'貓眼石(EX)'},{""999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(maoyanshi)
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(maoyanshi)+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A802()
value=gg.prompt({'貓眼石(稀有)'},{""999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(maoyanshi)+0x8
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(maoyanshi)+0x8+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A803()
value=gg.prompt({'貓眼石(激稀有)'},{""999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(maoyanshi)+0x10
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(maoyanshi)+0x10+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A804()
value=gg.prompt({'貓眼石(超激稀有)'},{""999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(maoyanshi)+0x18
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(maoyanshi)+0x18+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A805()
value=gg.prompt({'貓眼石(傳說)'},{""999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(maoyanshi)+0x20
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(maoyanshi)+0x20+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A806()
value=gg.prompt({'貓眼石(闇)'},{""999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(maoyanshi)+0x28
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(maoyanshi)+0x28+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A807()
value=gg.prompt({'貓眼石（一鍵全改）'},{""999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(maoyanshi)
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(maoyanshi)+4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(maoyanshi)+8
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(maoyanshi)+8+4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(maoyanshi)+16
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(maoyanshi)+16+4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(maoyanshi)+24
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(maoyanshi)+24+4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(maoyanshi)+32
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(maoyanshi)+32+4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(maoyanshi)+40
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(maoyanshi)+40+4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A9()
CJQ = gg.choice({
""銀券"",
""金券"",
""招福券"",
""招福券G"",
""白金券"",
""白金券碎片"",
""傳說黑券"",
""活動-傳說的入場券"",
""返回上级目录"",
},nil,(([[
抽獎券修改
]])))
if CJQ == nil then
gg.toast('已取消')
else
if CJQ == 1 then A901() end
if CJQ == 2 then A902() end
if CJQ == 3 then A903() end
if CJQ == 4 then A904() end
if CJQ == 5 then A905() end
if CJQ == 6 then A906() end
if CJQ == 7 then A907() end
if CJQ == 8 then A908() end
if CJQ == 9 then Start() end
end
FMXR=-1
end
function A901()
value=gg.prompt({'银券'},{""999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(yinquan)
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(yinquan)+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A902()
value=gg.prompt({'金券'},{""999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(jinquan)
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(jinquan)+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A903()
value=gg.prompt({'招福抽奖券'},{""999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhaofuquan)
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhaofuquan)+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A904()
value=gg.prompt({'招福G抽獎券'},{""999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhaofuquanG)
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(zhaofuquanG)+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A905()
value=gg.prompt({'白金抽獎券'},{""9""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(baijinquan)
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(baijinquan)+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A906()
value=gg.prompt({'白金抽獎券碎片'},{""9""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(baijinquanshuipian)
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(baijinquanshuipian)+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A907()
value=gg.prompt({'黑金券'},{""4""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(chuanshuoheiquan)
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(chuanshuoheiquan)+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A908()
if(exp) == 1 then
gg.alert(""該活動抽獎券已過期！"")
else
value=gg.prompt({'活動-傳說的入場券'},{""999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=0x3000E8
setvalue(so+py,4,value[1])
gg.toast('修改成功')
end
end
end
function A10()
SC = gg.choice({
""紅磚"",
""羽毛"",
""備長炭"",
""鋼製齒輪"",
""黃金"",
""宇宙石"",
""神秘骨頭"",
""菊石"",
""紅磚Z"",
""羽毛Z"",
""備長炭Z"",
""鋼製齒輪Z"",
""黃金Z"",
""宇宙石Z"",
""神秘骨頭Z"",
""菊石Z"",
""一鍵全改"",
""返回上级目录"",
},nil,(([[
素材修改
]])))
if SC == nil then
gg.toast('已取消')
else
if SC == 1 then A1001() end
if SC == 2 then A1002() end
if SC == 3 then A1003() end
if SC == 4 then A1004() end
if SC == 5 then A1005() end
if SC == 6 then A1006() end
if SC == 7 then A1007() end
if SC == 8 then A1008() end
if SC == 9 then A1009() end
if SC == 10 then A1010() end
if SC == 11 then A1011() end
if SC == 12 then A1012() end
if SC == 13 then A1013() end
if SC == 14 then A1014() end
if SC == 15 then A1015() end
if SC == 16 then A1016() end
if SC == 17 then A1017() end
if SC == 18 then Start() end
end
FMXR=-1
end
function A1001()
value=gg.prompt({'素材-紅磚'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A1002()
value=gg.prompt({'素材-羽毛'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x8
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x8+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A1003()
value=gg.prompt({'素材-備長炭'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x10
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x10+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A1004()
value=gg.prompt({'素材-鋼製齒輪'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x18
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x18+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A1005()
value=gg.prompt({'素材-黃金'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x20
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x20+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A1006()
value=gg.prompt({'素材-宇宙石'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x28
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x28+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A1007()
value=gg.prompt({'素材-神秘骨頭'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x30
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x30+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A1008()
value=gg.prompt({'素材-菊石'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x38
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x38+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A1009()
value=gg.prompt({'素材-紅磚Z'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x40
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x40+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A1010()
value=gg.prompt({'素材-羽毛Z'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x48
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x48+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A1011()
value=gg.prompt({'素材-備長炭Z'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x50
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x50+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A1012()
value=gg.prompt({'素材-鋼製齒輪Z'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x58
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x58+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A1013()
value=gg.prompt({'素材-黃金Z'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x60
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x60+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A1014()
value=gg.prompt({'素材-宇宙石Z'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x68
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x68+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A1015()
value=gg.prompt({'素材-神秘骨頭Z'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x70
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x70+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A1016()
value=gg.prompt({'素材-菊石Z'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x78
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x78+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A1017()
value=gg.prompt({'素材（一鍵全改）'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x8
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x8+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x10
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x10+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x18
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x18+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x20
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x20+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x28
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x28+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x30
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x30+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x38
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x38+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x40
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x40+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x48
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x48+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x50
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x50+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x58
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x58+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x60
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x60+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x68
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x68+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x70
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x70+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x78
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(sucai)+0x78+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A11()
MBH = gg.choice({
""紫色貓薄荷種子"",
""紅色貓薄荷種子"",
""藍色貓薄荷種子"",
""綠色貓薄荷種子"",
""黃色貓薄荷種子"",
""彩虹貓薄種子"",
""惡貓薄荷種子"",
""古代貓薄荷種子"",
""黄金貓薄荷種子"",
""紫色貓薄荷"",
""紅色貓薄荷"",
""藍色貓薄荷"",
""綠色貓薄荷"",
""黃色貓薄荷"",
""彩虹貓薄荷"",
""惡貓貓薄荷"",
""古代貓薄荷"",
""黃金貓薄荷"",
""一鍵全改"",
""返回上级目录"",
},nil,(([[
貓薄荷修改
]])))
if MBH == nil then
gg.toast('已取消')
else
if MBH == 1 then A1101() end
if MBH == 2 then A1102() end
if MBH == 3 then A1103() end
if MBH == 4 then A1104() end
if MBH == 5 then A1105() end
if MBH == 6 then A1106() end
if MBH == 7 then A1107() end
if MBH == 8 then A1108() end
if MBH == 9 then A1109() end
if MBH == 10 then A1110() end
if MBH == 11 then A1111() end
if MBH == 12 then A1112() end
if MBH == 13 then A1113() end
if MBH == 14 then A1114() end
if MBH == 15 then A1115() end
if MBH == 16 then A1116() end
if MBH == 17 then A1117() end
if MBH == 18 then A1118() end
if MBH == 19 then A1119() end
if MBH == 20 then Start() end
end
FMXR=-1
end
function A1101()
value=gg.prompt({'紫色貓薄荷種子'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (bohe_a),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1102()
value=gg.prompt({'紅色貓薄荷種子'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (bohe_b),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1103()
value=gg.prompt({'藍色貓薄荷種子'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (bohe_c),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1104()
value=gg.prompt({'綠色貓薄荷種子'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (bohe_d),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1105()
value=gg.prompt({'黃色貓薄荷種子'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (bohe_e),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1106()
value=gg.prompt({'彩虹貓薄種子'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (bohe_f),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1107()
value=gg.prompt({'惡貓薄荷種子'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (bohe_g),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1108()
value=gg.prompt({'古代貓薄荷種子'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (bohe_h),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1109()
value=gg.prompt({'黄金貓薄荷種子'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (bohe_i),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1110()
value=gg.prompt({'紫色貓薄荷'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (bohe_j),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1111()
value=gg.prompt({'紅色貓薄荷'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (bohe_k),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1112()
value=gg.prompt({'藍色貓薄荷'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (bohe_l),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1113()
value=gg.prompt({'綠色貓薄荷'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (bohe_m),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1114()
value=gg.prompt({'黃色貓薄荷'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (bohe_n),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1115()
value=gg.prompt({'彩虹貓薄荷'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (bohe_o),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1116()
value=gg.prompt({'惡貓貓薄荷'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (bohe_p),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1117()
value=gg.prompt({'古代貓薄荷'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (bohe_q),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1118()
value=gg.prompt({'黃金貓薄荷'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (bohe_r),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1119()
value=gg.prompt({'貓薄荷（一鍵全改）'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (bohe_a),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (bohe_b),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (bohe_c),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (bohe_d),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (bohe_e),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (bohe_f),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (bohe_g),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (bohe_h),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (bohe_i),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (bohe_j),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (bohe_k),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (bohe_l),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (bohe_m),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (bohe_n),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (bohe_o),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (bohe_p),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (bohe_q),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (bohe_r),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A12()
SS = gg.choice({
""紫獸石"",
""紅獸石"",
""蒼獸石"",
""翠獸石"",
""黃獸石"",
""彩虹獸石"",
""紫獸結晶"",
""紅獸結晶"",
""蒼獸結晶"",
""翠獸結晶"",
""黃獸結晶"",
""一鍵全改"",
""返回上级目录"",
},nil,(([[
獸石修改
]])))
if SS == nil then
gg.toast('已取消')
else
if SS == 1 then A1201() end
if SS == 2 then A1202() end
if SS == 3 then A1203() end
if SS == 4 then A1204() end
if SS == 5 then A1205() end
if SS == 6 then A1206() end
if SS == 7 then A1207() end
if SS == 8 then A1208() end
if SS == 9 then A1209() end
if SS == 10 then A1210() end
if SS == 11 then A1211() end
if SS == 12 then A1212() end
if SS == 13 then Start() end
end
FMXR=-1
end
function A1201()
value=gg.prompt({'紫獸石'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (shoushi_a),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1202()
value=gg.prompt({'紅獸石'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (shoushi_b),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1203()
value=gg.prompt({'蒼獸石'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (shoushi_c),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1204()
value=gg.prompt({'翠獸石'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (shoushi_d),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1205()
value=gg.prompt({'黃獸石'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (shoushi_e),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1206()
value=gg.prompt({'彩虹獸石'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (shoushi_f),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1207()
value=gg.prompt({'紫獸結晶'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (shoushi_g),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1208()
value=gg.prompt({'紅獸結晶'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (shoushi_h),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1209()
value=gg.prompt({'蒼獸結晶'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (shoushi_i),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1210()
value=gg.prompt({'翠獸結晶'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (shoushi_j),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1211()
value=gg.prompt({'黃獸結晶'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (shoushi_k),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A1212()
value=gg.prompt({'獸石（一鍵全改）'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
gg.setValues({{
        address = (shoushi_a),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (shoushi_b),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (shoushi_c),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (shoushi_d),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (shoushi_e),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (shoushi_f),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (shoushi_g),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (shoushi_h),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (shoushi_i),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (shoushi_j),
		flags = 4,
		value= value[1]
            }})
gg.setValues({{
        address = (shoushi_k),
		flags = 4,
		value= value[1]
            }})
gg.toast('修改成功')
end
end
function A13()
BN = gg.choice({
""銅"",
""銀"",
""金"",
""一鍵全改"",
""返回"",
},nil,(([[
本能寶箱修改
]])))
if BN == nil then
gg.toast('已取消')
else
if BN == 1 then A1301() end
if BN == 2 then A1302() end
if BN == 3 then A1303() end
if BN == 4 then A1304() end
if BN == 5 then Start() end
end
FMXR=-1
end
function A1301()
value=gg.prompt({'本能寶箱-銅'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(bennengbox)
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(bennengbox)+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(bennengbox)+0x18
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(bennengbox)+0x18+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A1302()
value=gg.prompt({'本能寶箱-銀'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(bennengbox)+0x8
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(bennengbox)+0x8+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(bennengbox)+0x20
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(bennengbox)+0x20+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A1303()
value=gg.prompt({'本能寶箱-金'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(bennengbox)+0x10
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(bennengbox)+0x10+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(bennengbox)+0x28
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(bennengbox)+0x28+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A1304()
value=gg.prompt({'本能寶箱（一鍵全改）'},{""998""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(bennengbox)
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(bennengbox)+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(bennengbox)+0x18
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(bennengbox)+0x18+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(bennengbox)+0x8
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(bennengbox)+0x8+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(bennengbox)+0x20
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(bennengbox)+0x20+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(bennengbox)+0x10
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(bennengbox)+0x10+0x4
setvalue(so+py,4,0)
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(bennengbox)+0x28
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(bennengbox)+0x28+0x4
setvalue(so+py,4,0)
gg.toast('修改成功')
end
end
function A14()
AUTOKILL = gg.choice({
""開"",
""關"",
""返回"",
},nil,(([[
自動爆塔
]])))
if AUTOKILL == nil then
gg.toast('已取消')
else
if AUTOKILL == 1 then A1401() end
if AUTOKILL == 2 then A1402() end
if AUTOKILL == 3 then Start() end
end
FMXR=-1
end
function A1401()
so=(xa)
py=(autowin)
setvalue(so+py,4,'~A8 MOV W8, XZR')
gg.toast('修改成功')
end
function A1402()
so=(xa)
py=(autowin)
setvalue(so+py,4,'~A8 LDR W8, [X8,#0x14]')
gg.toast(""已關閉"")
end
function A15()
DH = gg.choice({
""開"",
""關"",
""返回"",
},nil,(([[
關閉抽獎動畫
]])))
if DH == nil then
gg.toast('已取消')
else
if DH == 1 then A1501() end
if DH == 2 then A1502() end
if DH == 3 then Start() end
end
FMXR=-1
end
function A1501()
so=(xa)
py=(animation)
setvalue(so+py,4,'~A8 MOV X8, XZR')
gg.toast('修改成功')
end
function A1502()
so=(xa)
py=(animation)
setvalue(so+py,4,'~A8 MOV W8, #0x1')
gg.toast(""已關閉"")
end
function A16()
XZ = gg.choice({
""青銅勳章"",
""白銀勳章"",
""黃金勳章"",
""白金勳章"",
""一鍵全改"",
""返回"",
},nil,(([[
勳章修改
]])))
if XZ == nil then
gg.toast('已取消')
else
if XZ == 1 then A1601() end
if XZ == 2 then A1602() end
if XZ == 3 then A1603() end
if XZ == 4 then A1604() end
if XZ == 5 then A1605() end
if XZ == 6 then Start() end
end
FMXR=-1
end
function A1601()
value=gg.prompt({'青銅勳章'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(medal)
setvalue(so+py,4,value[1])
gg.toast('修改成功')
end
end
function A1602()
value=gg.prompt({'白銀勳章'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(medal)+0x4
setvalue(so+py,4,value[1])
gg.toast('修改成功')
end
end
function A1603()
value=gg.prompt({'黃金勳章'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(medal)+0x8
setvalue(so+py,4,value[1])
gg.toast('修改成功')
end
end
function A1604()
value=gg.prompt({'白金勳章'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(medal)+0xC
setvalue(so+py,4,value[1])
gg.toast('修改成功')
end
end
function A1605()
value=gg.prompt({'勳章（一鍵全改）'},{""9999""},{""number""})
if value == nil then
gg.toast('已取消')
else
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(medal)
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(medal)+0x4
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(medal)+0x8
setvalue(so+py,4,value[1])
so=gg.getRangesList('libnative-lib.so:bss')[1].start
py=(medal)+0xC
setvalue(so+py,4,value[1])
gg.toast('修改成功')
end
end
function UP()
gg.alert('版本號：1.0_beta\n\n遊戲版本號 : '..info.versionName..'\n遊戲內部版本號 : '..info.versionCode..'\n遊戲包名 : '..info.packageName..'\n\n如有BUG請聯繫腳本作者\n特別鳴謝：\n感謝用戶Cheney Liu提供相關數據')
end
function End()
gg.setVisible(true)
print('Script ended\n腳本已退出')
os.exit()
end
while(true)do
gg.sleep(1)
if gg.isVisible(true) then
FMXR=1
gg.setVisible(false)
end
if FMXR==1 then
Start()
end
end"
78meyDr2,ESP32_Client.ino,ripred,C++,Wednesday 13th of August 2025 09:25:03 PM CDT,"/**
 * A BLE client example that is rich in capabilities.
 * There is a lot new capabilities implemented.
 * author unknown
 * updated by chegewara
 *
 * Patched: remove unsafe notify registration, fix return value, add safety checks.
 */
#include <string>
#include ""BLEDevice.h""
#include ""BLEScan.h""

// The remote service we wish to connect to.
static BLEUUID serviceUUID(""38d98c26-26ed-430d-83ee-04848df9c4e3"");

// The characteristic of the remote service we are interested in.
static BLEUUID charUUID(""0f9162bf-09eb-42c0-853d-19ea0847a71d"");

static boolean doConnect = false;
static boolean connected = false;
static boolean doScan = false;
static BLERemoteCharacteristic* pRemoteCharacteristic = nullptr;
static BLEAdvertisedDevice* myDevice = nullptr;

// Kept for future use if you add NOTIFY on the server.
static void notifyCallback(
        BLERemoteCharacteristic* pBLERemoteCharacteristic,
        uint8_t* pData,
        size_t length,
        bool /*isNotify*/) {
    Serial.print(""Notify callback for characteristic "");
    Serial.print(pBLERemoteCharacteristic->getUUID().toString().c_str());
    Serial.print("" of data length "");
    Serial.println(length);
    Serial.print(""data: "");
    // Print length-safe (don't assume pData is NUL-terminated)
    for (size_t i = 0; i < length; ++i) {
        Serial.print((char)pData[i]);
    }
    Serial.println();
}

class MyClientCallback : public BLEClientCallbacks {
    void onConnect(BLEClient* /*pclient*/) override {
    }
    void onDisconnect(BLEClient* /*pclient*/) override {
        connected = false;
        Serial.println(""onDisconnect"");
    }
};

bool connectToServer() {
    Serial.print(""Forming a connection to "");
    Serial.println(myDevice->getAddress().toString().c_str());

    BLEClient* pClient = BLEDevice::createClient();
    Serial.println("" - Created client"");
    pClient->setClientCallbacks(new MyClientCallback());

    // Connect to the remote BLE Server.
    pClient->connect(myDevice); // using BLEAdvertisedDevice preserves address type
    Serial.println("" - Connected to server"");

    // Obtain a reference to the service we are after in the remote BLE server.
    BLERemoteService* pRemoteService = pClient->getService(serviceUUID);
    if (pRemoteService == nullptr) {
        Serial.print(""Failed to find our service UUID: "");
        Serial.println(serviceUUID.toString().c_str());
        pClient->disconnect();
        return false;
    }
    Serial.println("" - Found our service"");

    // Obtain a reference to the characteristic in the service of the remote BLE server.
    pRemoteCharacteristic = pRemoteService->getCharacteristic(charUUID);
    if (pRemoteCharacteristic == nullptr) {
        Serial.print(""Failed to find our characteristic UUID: "");
        Serial.println(charUUID.toString().c_str());
        pClient->disconnect();
        return false;
    }
    Serial.println("" - Found our characteristic"");

    // Read the value of the characteristic.
    if (pRemoteCharacteristic->canRead()) {
        std::string value = pRemoteCharacteristic->readValue();
        Serial.print(""The characteristic value was: "");
        Serial.println(value.c_str());
    }

    // IMPORTANT:
    // Do NOT register for notifications unless the server characteristic
    // has PROPERTY_NOTIFY and exposes a CCCD (0x2902). Your server does not.
    // if (pRemoteCharacteristic->canNotify()) {
    //     auto* cccd = pRemoteCharacteristic->getDescriptor(BLEUUID((uint16_t)0x2902));
    //     if (cccd) pRemoteCharacteristic->registerForNotify(notifyCallback);
    // }

    connected = true;
    return true; // FIX: correctly report success
}

// Scan for BLE servers and find the first one that advertises the service we are looking for.
class MyAdvertisedDeviceCallbacks : public BLEAdvertisedDeviceCallbacks {
    void onResult(BLEAdvertisedDevice advertisedDevice) override {
        Serial.print(""BLE Advertised Device found: "");
        Serial.println(advertisedDevice.toString().c_str());

        // We have found a device, let us now see if it contains the service we are looking for.
        if (advertisedDevice.haveServiceUUID() && advertisedDevice.isAdvertisingService(serviceUUID)) {
            BLEDevice::getScan()->stop();
            myDevice = new BLEAdvertisedDevice(advertisedDevice);
            doConnect = true;
            doScan = true; // allow re-scan after disconnect (optional)
        }
    }
};

void setup() {
    Serial.begin(115200);
    Serial.println(""Starting Arduino BLE Client application..."");
    BLEDevice::init("""");

    // Retrieve a Scanner and set the callback we want to use to be informed when we
    // have detected a new device. Specify that we want active scanning and start the
    // scan to run for 5 seconds.
    BLEScan* pBLEScan = BLEDevice::getScan();
    pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
    pBLEScan->setInterval(1349);
    pBLEScan->setWindow(449);
    pBLEScan->setActiveScan(true);
    pBLEScan->start(5, false);
}

// Arduino main loop
void loop() {
    // If the flag ""doConnect"" is true then we have scanned for and found the desired BLE Server.
    if (doConnect) {
        if (connectToServer()) {
            Serial.println(""We are now connected to the BLE Server."");
        } else {
            Serial.println(""We have failed to connect to the server; there is nothing more we will do."");
        }
        doConnect = false;
    }

    // If connected, write to the characteristic each second.
    if (connected && pRemoteCharacteristic != nullptr) {
        if (pRemoteCharacteristic->canWrite()) {
            String newValue = ""Time since boot: "" + String(millis() / 1000);
            Serial.println(""Setting new characteristic value to \"""" + newValue + ""\"""");
            pRemoteCharacteristic->writeValue(newValue.c_str(), newValue.length());
        }
    } else if (doScan) {
        // Restart scan after disconnect (example behavior).
        BLEDevice::getScan()->start(0); // non-blocking continuous scan
    }

    delay(1000);
}
"
E2mAjt53,scd30,Onegai84,YAML,Wednesday 13th of August 2025 08:32:10 PM CDT,"esphome:
  on_boot:
    - delay: 30s
  name: ""scd30sensor""
  friendly_name: ESPHome Web f9f84c
  min_version: 2024.12.3
  name_add_mac_suffix: false

esp32:
  board: esp32dev
  framework:
    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
- platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Резервная точка доступа, если не удается подключиться к Wi-Fi
  # Этот блок должен быть ВНУТРИ секции wifi:
  ap:
    ssid: ""Air-Monitor Fallback Hotspot""
    password: ""KjNwcmmX5Sm9""

# Captive Portal для настройки через резервную точку доступа.
# Это отдельный блок верхнего уровня.
captive_portal:

# Шина I2C для подключения датчиков
i2c:
  sda: 21
  scl: 22
  scan: true

# Определение сенсоров
sensor:
  - platform: scd30
    co2:
      name: ""Углекислый газ CO2""
    temperature:
      name: ""Температура""
    humidity:
      name: ""Влажность""
    update_interval: 60s
    automatic_self_calibration: false
# Этот код добавляет в Home Assistant кнопку и поле для ручной калибровки
number:
  - platform: template
    name: ""SCD30 CO2 Calibration Value"" # Название поля для ввода
    id: co2_cal
    optimistic: true
    min_value: 350
    max_value: 4500
    step: 1
    icon: ""mdi:molecule-co2""
    entity_category: ""config""

button:
  - platform: template
    name: ""SCD30 Force Recalibration"" # Название кнопки
    icon: ""mdi:air-filter""
    entity_category: ""config""
    on_press:
      then:
        # Это действие берет значение из поля ""co2_cal"" и отправляет его датчику
        - scd30.force_recalibration_with_reference:
            value: !lambda 'return id(co2_cal).state;'"
tZsSDvNk,SpaceVerse -Segoa V5.6.2JM - Mamacita(C)(TM)(N),Pyroflame,HTML,Wednesday 13th of August 2025 08:27:26 PM CDT,"<!doctype html>
<html lang=""en"">
<head>
<meta charset=""utf-8""/>
<meta name=""viewport"" content=""width=device-width,initial-scale=1""/>
<title>SpaceVerse: Segoa v5.6.2</title>
<style>
:root {
  --bg: #010214;
  --panel: rgba(2,6,12,0.78);
  --muted: #9aa;
  --accent: #7ef;
  --teal: #6ee7b7;
  --danger: #ff6b6b;
  --gold: #ffd166;
  --purple: #a78bfa;
}

* { box-sizing: border-box; }
html, body { height: 100%; margin: 0; background: var(--bg); color: #dfe; overflow: hidden; font-family: Inter, system-ui, -apple-system, ""Segoe UI"", Roboto; }
canvas { display: block; width: 100vw; height: 100vh; cursor: crosshair; background: linear-gradient(180deg, #000011, #02031a); }

#hud { position: fixed; left: 12px; top: 12px; z-index: 60; background: var(--panel); padding: 12px; border-radius: 10px; border: 1px solid rgba(255,255,255,0.04); backdrop-filter: blur(4px); }
#hud .title { font-weight: 800; color: var(--accent); margin-bottom: 6px; font-size: 14px; }
#hud .row { display: flex; gap: 6px; flex-wrap: wrap; margin-bottom: 6px; }
#hud button { background: #07202a; border: none; color: #bfe; padding: 8px 12px; border-radius: 8px; cursor: pointer; font-weight: 600; font-size: 12px; transition: background-color .2s, transform .12s; }
#hud button:hover { background: #0a2a36; transform: translateY(-1px); }
#hud small { display: block; color: var(--muted); margin-top: 6px; font-size: 11px; line-height: 1.3; }

#mega { position: fixed; right: 12px; top: 12px; width: 360px; max-height: calc(100vh - 24px); overflow-y: auto; z-index: 80; background: linear-gradient(180deg, rgba(6,10,16,0.95), rgba(3,6,10,0.85)); border-radius: 12px; padding: 12px; border: 1px solid rgba(255,255,255,0.03); display: none; backdrop-filter: blur(10px); }
#mega h2 { margin: 0 0 12px 0; color: #8ef; font-size: 16px; }
.spawn-row { display: flex; flex-wrap: wrap; gap: 6px; margin-bottom: 8px; }
.spawn-btn { flex: 1 1 calc(50% - 3px); background: #06101a; color: #bfe; padding: 8px; border-radius: 8px; border: 1px solid rgba(255,255,255,0.03); cursor: pointer; font-weight: 600; font-size: 12px; text-align: center; transition: all .2s; }
.spawn-btn:hover { background: #0a1520; border-color: rgba(255,255,255,0.08); transform: translateY(-1px); }

#debug { position: fixed; left: 12px; bottom: 12px; color: var(--muted); font-size: 12px; z-index: 55; background: rgba(2,6,12,0.5); padding: 8px; border-radius: 8px; border: 1px solid rgba(255,255,255,0.02); }

.pie-container { position: fixed; z-index: 120; user-select: none; pointer-events: none; left: 0; top: 0; transform: translate(-10000px, -10000px); will-change: transform, opacity; }
.pie-wrap { position: relative; width: 1px; height: 1px; pointer-events: none; animation: pieIn .12s ease-out both; }
@keyframes pieIn { from { opacity: 0; transform: scale(0.92); } to { opacity: 1; transform: scale(1); } }
.pie-slice { position: absolute; width: 150px; height: 46px; display: flex; align-items: center; justify-content: center; pointer-events: auto; cursor: pointer; border-radius: 10px; padding: 6px; box-shadow: 0 6px 18px rgba(0,0,0,0.5); transform-origin: center center; transition: transform .1s ease-out, filter .12s; backdrop-filter: blur(4px); }
.pie-slice .label { color: #fff; font-weight: 800; text-shadow: 0 0 6px rgba(0,0,0,0.6); font-size: 13px; text-align: center; }
.pie-slice:hover { transform: scale(1.08); }
.pie-divider { position: absolute; left: -2px; top: -2px; right: -2px; bottom: -2px; border-radius: 12px; border: 1px solid rgba(255,255,255,0.06); pointer-events: none; }

#terminal { position: fixed; bottom: 12px; left: 50%; transform: translateX(-50%); width: 80%; max-width: 600px; background: rgba(2,6,12,0.9); padding: 12px; border-radius: 8px; border: 1px solid rgba(255,255,255,0.04); display: none; z-index: 100; font-family: monospace; font-size: 14px; color: var(--teal); }
#terminal input { width: 100%; background: transparent; border: none; color: var(--teal); font-family: monospace; font-size: 14px; outline: none; padding: 8px; }
#terminal-suggestions { position: absolute; bottom: 100%; left: 0; right: 0; background: rgba(2,6,12,0.95); border-radius: 8px 8px 0 0; border: 1px solid rgba(255,255,255,0.04); max-height: 200px; overflow-y: auto; }
#terminal-suggestions div { padding: 6px 12px; cursor: pointer; border-bottom: 1px solid rgba(255,255,255,0.05); }
#terminal-suggestions div:hover { background: rgba(255,255,255,0.1); }

.selection-box { position: fixed; border: 1px dashed #7ef; background: rgba(126,239,255,0.1); pointer-events: none; z-index: 50; }

#shipPanel { position: fixed; right: 12px; bottom: 12px; width: 300px; background: rgba(2,6,12,0.9); border-radius: 8px; padding: 12px; border: 1px solid rgba(255,255,255,0.04); z-index: 70; display: none; backdrop-filter: blur(4px); }
#shipPanel h3 { margin: 0 0 8px 0; color: var(--accent); font-size: 14px; }
#shipPanel .crew-list { margin-top: 8px; max-height: 200px; overflow-y: auto; }
.crew-member { display: flex; justify-content: space-between; padding: 4px 0; border-bottom: 1px solid rgba(255,255,255,0.05); }
.crew-role { color: var(--teal); font-weight: 600; }
.crew-stats { color: var(--muted); font-size: 12px; }

#missionPanel { position: fixed; left: 50%; top: 50%; transform: translate(-50%, -50%); width: 80%; max-width: 500px; background: rgba(2,6,12,0.95); padding: 16px; border-radius: 12px; border: 1px solid rgba(255,255,255,0.06); z-index: 90; display: none; backdrop-filter: blur(8px); max-height: 80vh; overflow-y: auto; }
#missionPanel h2 { color: var(--gold); margin-top: 0; }
.mission-card { background: rgba(0,0,0,0.3); border-radius: 8px; padding: 12px; margin-bottom: 12px; }
.mission-card h3 { margin: 0 0 8px 0; color: var(--accent); }
.mission-card p { margin: 4px 0; color: var(--muted); }
.mission-card button { background: var(--purple); border: none; color: white; padding: 6px 12px; border-radius: 6px; cursor: pointer; }

#statsPanel {
  position: fixed; left: 12px; top: 50%; transform: translateY(-50%); width: 220px;
  background: var(--panel); padding: 12px; border-radius: 10px; border: 1px solid rgba(255,255,255,0.04);
  backdrop-filter: blur(4px); z-index: 59; font-size: 12px;
}
#statsPanel h3 { margin: 0 0 10px 0; color: var(--accent); font-size: 14px; text-align: center; }
.stats-grid { display: grid; grid-template-columns: auto 1fr; gap: 4px 8px; align-items: center; }
.stats-grid .label { color: var(--muted); }
.stats-grid .value { text-align: right; color: var(--teal); font-weight: 600; }

@media (max-width: 640px) {
  .pie-slice { width: 120px; height: 44px; }
  #mega, #shipPanel { width: 92%; right: 4%; left: 4%; }
  #missionPanel { width: 90%; }
  #statsPanel { display: none; } /* Hide stats on small screens */
}
</style>
</head>
<body>
<canvas id=""c"" tabindex=""0"" aria-label=""Gameplay canvas""></canvas>

<div id=""hud"" role=""toolbar"" aria-label=""HUD Controls"">
  <div class=""title"">SpaceVerse — v5.6.2</div>
  <div class=""row"">
    <button id=""btnPause"">Pause (P)</button>
    <button id=""btnCenter"">Center View</button>
    <button id=""btnClear"">Clear All</button>
    <button id=""btnMegaToggle"">Toggle Menu (M)</button>
    <button id=""btnTerminal"">Terminal (~)</button>
    <button id=""btnMissions"">Missions (J)</button>
    <button id=""btnShipPanel"">Ship Info (I)</button>
  </div>
  <small>
    Right-click = Player pie | Ctrl/Cmd+Right-click = Enemy pie | Alt+Right-click = Astro pie | Shift+Right-click = Structures<br>
    Left-click = select | Drag left-click = multi-select | WASD = control selected ships | Space = auto-fire | F = cycle follow | ~ = terminal | Z+Right-click = Z menu
  </small>
</div>

<div id=""statsPanel"">
  <h3>Faction Stats</h3>
  <div class=""stats-grid"" id=""statsGrid"">
    <!-- Stats will be populated by script -->
  </div>
</div>

<div id=""mega"" aria-hidden=""true"">
  <h2>🚀 Mega Spawner</h2>
  <div class=""spawn-row""><button class=""spawn-btn"" data-action=""playerMothership"">🛸 Player Mothership</button><button class=""spawn-btn"" data-action=""enemyMothership"">👾 Enemy Mothership</button></div>
  <div class=""spawn-row""><button class=""spawn-btn"" data-action=""fighter"">⚡ Fighter</button><button class=""spawn-btn"" data-action=""brawler"">💪 Brawler</button></div>
  <div class=""spawn-row""><button class=""spawn-btn"" data-action=""sniper"">🎯 Sniper</button><button class=""spawn-btn"" data-action=""support"">🔧 Support</button></div>
  <div class=""spawn-row""><button class=""spawn-btn"" data-action=""kamikaze"">💥 Kamikaze</button><button class=""spawn-btn"" data-action=""asteroids"">☄️ Asteroid Field</button></div>
  <div class=""spawn-row""><button class=""spawn-btn"" data-action=""star"">⭐ Star</button><button class=""spawn-btn"" data-action=""planet"">🪐 Planet</button></div>
  <div style=""font-size:12px;color:#9aa;margin-top:8px"">• Mega spawns near camera center; pies spawn at your cursor.</div>
</div>

<div id=""terminal"" role=""dialog"" aria-label=""Command Terminal"">
  <div id=""terminal-suggestions""></div>
  <input type=""text"" id=""terminalInput"" placeholder=""Enter command (e.g., spawn fighter 5, clear, stats)"" autocomplete=""off"">
</div>

<div id=""shipPanel"">
  <h3>Ship Information</h3>
  <div id=""shipInfo""></div>
  <h3>Crew <small id=""crewCount""></small></h3>
  <div class=""crew-list"" id=""crewList""></div>
</div>

<div id=""missionPanel"">
  <h2>Mission Board</h2>
  <div id=""missionList""></div>
  <button id=""closeMissions"" style=""margin-top:12px;"">Close</button>
</div>

<div id=""debug"" aria-live=""polite"">Entities: 0 — Projectiles: 0 — FPS: 0</div>

<script>
(() => {
  const CFG = {
    GRAVITY_BASE: 0.0007, MAX_PROJECTILES: 1000, MAX_ENTITIES: 6000,
    POOL_PROJECTILES: 1400, SPATIAL_CELL: 220, DT_MAX: 0.05, FPS_INTERVAL: 1000,
    CREW_SKILLS: ['Pilot', 'Co-Pilot', 'Mechanic', 'Weapons', 'Scientist', 'Engineer', 'Medic', 'Navigator']
  };

  const c = document.getElementById('c');
  const ctx = c.getContext('2d', { alpha: false });
  let DPR = Math.max(1, window.devicePixelRatio || 1);
  function resize() {
    DPR = Math.max(1, window.devicePixelRatio || 1);
    c.width = Math.floor(window.innerWidth * DPR);
    c.height = Math.floor(window.innerHeight * DPR);
    c.style.width = window.innerWidth + 'px';
    c.style.height = window.innerHeight + 'px';
    ctx.setTransform(DPR, 0, 0, DPR, 0, 0);
  }
  window.addEventListener('resize', resize);
  resize();

  const W = () => window.innerWidth;
  const H = () => window.innerHeight;
  const TAU = Math.PI * 2;
  const rand = (r=1) => (Math.random()-0.5) * 2 * r;
  const clamp = (v, a, b) => Math.max(a, Math.min(b, v));
  const hexToRGBA = (hex, a=1) => {
    if (!hex) return `rgba(255,255,255,${a})`;
    const h = hex.replace('#', '');
    const r = parseInt(h.slice(0,2), 16), g = parseInt(h.slice(2,4), 16), b = parseInt(h.slice(4,6), 16);
    return `rgba(${r},${g},${b},${a})`;
  };

  let entities = [], nextId = 1, running = true, selectedIds = new Set(), followId = null;
  let projCount = 0, lastTime = performance.now(), fps = 0, frameCount = 0, lastFpsTime = performance.now();
  const camera = { x: 0, y: 0, targetX: 0, targetY: 0, lerp: 0.08 };
  const mouse = { screenX: W()/2, screenY: H()/2, x: 0, y: 0, down: false, btn: -1, startX: 0, startY: 0 };
  const TEAL = 'TEAL', RED = 'RED';
  let factions = {}, sideFactions = [];
  let isDragging = false, selectionBox = null;
  let missions = [];
  let terminalHistory = [];
  let terminalHistoryIndex = -1;

  const crewNames = [""Alex"", ""Jamie"", ""Taylor"", ""Jordan"", ""Casey"", ""Riley"", ""Quinn"", ""Morgan"", ""Avery"", ""Skyler"", ""Dakota"", ""Peyton"", ""Rowan"", ""Charlie"", ""Emerson"", ""Finley"", ""Sawyer"", ""Hayden"", ""Kai"", ""River""];
  
  function generateCrew(shipSize) {
    const crewSize = Math.max(1, Math.floor(shipSize < 10 ? 3 + Math.random() * 2 : shipSize < 20 ? 8 + Math.random() * 4 : shipSize < 30 ? 20 + Math.random() * 10 : 50 + Math.random() * 50));
    const crew = [];
    for (let i = 0; i < crewSize; i++) {
      crew.push({
        id: nextId++, name: crewNames[Math.floor(Math.random() * crewNames.length)],
        role: CFG.CREW_SKILLS[Math.floor(Math.random() * CFG.CREW_SKILLS.length)],
        skill: Math.floor(1 + Math.random() * 5), morale: Math.floor(50 + Math.random() * 50),
        salary: 10 + Math.floor(Math.random() * 40)
      });
    }
    return crew;
  }
  
  function generateMissions() {
    const missionTypes = [
      { name: ""Supply Run"", desc: ""Deliver supplies to a remote outpost."", reward: { money: 500, supplies: 10, xp: 100 }, difficulty: 1, timeLimit: 300 },
      { name: ""Pirate Hunt"", desc: ""Eliminate pirate threats in this sector."", reward: { money: 800, crypto: 50, xp: 150 }, difficulty: 2, timeLimit: 420 },
      { name: ""Mineral Scan"", desc: ""Scan uncharted asteroids for valuable minerals."", reward: { minerals: 25, chips: 5, xp: 200 }, difficulty: 2, timeLimit: 480 },
      { name: ""Escort Duty"", desc: ""Protect a merchant convoy through a dangerous route."", reward: { money: 1200, gifts: 1, xp: 250 }, difficulty: 3, timeLimit: 600 },
      { name: ""Emergency Rescue"", desc: ""Save stranded crew from a disabled vessel."", reward: { money: 2000, food: 20, fluids: 20, xp: 300 }, difficulty: 4, timeLimit: 360 }
    ];
    missions = [];
    for (let i = 0; i < 5; i++) {
      const type = missionTypes[Math.floor(Math.random() * missionTypes.length)];
      missions.push({ ...type, id: nextId++, location: { x: rand(W() * 0.8), y: rand(H() * 0.8) }, faction: Math.random() > 0.5 ? TEAL : RED, accepted: false, progress: 0, startTime: 0 });
    }
  }

  function initFactions() {
    const defaultResources = () => ({
      money: 10000, crypto: 100, supplies: 50, chips: 20,
      gauss: 5, nitro: 5, minerals: 0, gifts: 0, food: 100, fluids: 100,
    });
    factions = {
      [TEAL]: { id: TEAL, name: 'Player', color: '#6ee7b7', members: [], reputation: 50, resources: defaultResources() },
      [RED]: { id: RED, name: 'Enemy', color: '#ff6b6b', members: [], reputation: 50, resources: defaultResources() }
    };
    sideFactions = [
      { id: 'PIRATES', name: 'Pirates', color: '#ffd166', reputation: 0, resources: defaultResources() },
      { id: 'MERCHANTS', name: 'Merchants', color: '#a78bfa', reputation: 50, resources: defaultResources() }
    ];
  }

  const projPool = [];
  function poolInit() { projPool.length = 0; for (let i = 0; i < CFG.POOL_PROJECTILES; i++) projPool.push({ _pooled: true }); }
  function projAcquire() { return projPool.length ? projPool.pop() : { _pooled: false }; }
  function projRelease(p) { p._pooled = true; p.kind = 'free'; p.ownerId = 0; p.ownerSide = 'NEUTRAL'; projPool.push(p); }

  const spatial = new Map();
  const spatialKey = (cx, cy) => `${cx},${cy}`;
  function spatialClear() { spatial.clear(); }
  function spatialInsert(e) {
    const cell = CFG.SPATIAL_CELL;
    const minX = Math.floor((e.x - (e.size || 0)) / cell); const maxX = Math.floor((e.x + (e.size || 0)) / cell);
    const minY = Math.floor((e.y - (e.size || 0)) / cell); const maxY = Math.floor((e.y + (e.size || 0)) / cell);
    for (let cx = minX; cx <= maxX; cx++) for (let cy = minY; cy <= maxY; cy++) {
      const k = spatialKey(cx, cy); if (!spatial.has(k)) spatial.set(k, []);
      spatial.get(k).push(e);
    }
  }
  function spatialQueryRegion(x, y, radius) {
    const cell = CFG.SPATIAL_CELL;
    const minX = Math.floor((x - radius) / cell), maxX = Math.floor((x + radius) / cell);
    const minY = Math.floor((y - radius) / cell), maxY = Math.floor((y + radius) / cell);
    const set = new Set();
    for (let cx = minX; cx <= maxX; cx++) for (let cy = minY; cy <= maxY; cy++) {
      const k = spatialKey(cx, cy), arr = spatial.get(k); if (arr) for (const e of arr) set.add(e);
    }
    return Array.from(set);
  }

  function spawn(obj) {
    if (entities.length >= CFG.MAX_ENTITIES) return null;
    const defaults = {
      id: nextId++, kind: 'unknown', x: Math.random() * W(), y: Math.random() * H(),
      vx: 0, vy: 0, angle: Math.random() * TAU, size: 8, hp: 100, maxHp: 100,
      side: 'NEUTRAL', archetype: 'generic', created: performance.now()
    };
    const e = Object.assign({}, defaults, obj);
    if (e.kind === 'ship') {
      e.crew = generateCrew(e.size); e.weapons = [];
      if (e.archetype === 'fighter') e.weapons.push({ type: 'laser', damage: 20, range: 300, rate: 0.5 });
      if (e.archetype === 'brawler') e.weapons.push({ type: 'cannon', damage: 40, range: 150, rate: 1.0 });
      if (e.archetype === 'sniper') e.weapons.push({ type: 'railgun', damage: 60, range: 500, rate: 1.5 });
      if (e.subtype === 'mothership') {
        e.weapons.push({ type: 'missile', damage: 80, range: 400, rate: 2.0 });
        e.weapons.push({ type: 'laser', damage: 30, range: 350, rate: 0.8 });
      }
      e.modules = []; if (e.size > 15) e.modules.push('shield'); if (e.size > 20) e.modules.push('cloak');
    }
    entities.push(e); if (e.side && factions[e.side]) factions[e.side].members.push(e.id);
    return e;
  }

  const spawnActions = {
    playerMothership: (x, y) => spawn({ kind: 'ship', subtype: 'mothership', archetype: 'carrier', side: TEAL, playerControl: true, mass: 5200, size: 30, hp: 2500, maxHp: 2500, shield: 600, maxShield: 600, x, y, spawnTimer: 0, spawnRate: 2.8, name: ""TEAL Command"" }),
    enemyMothership: (x, y) => spawn({ kind: 'ship', subtype: 'mothership', archetype: 'aggressive', side: RED, mass: 5200, size: 30, hp: 2600, maxHp: 2600, shield: 300, maxShield: 300, x, y, spawnTimer: 0, spawnRate: 5.0, name: ""RED Flagship"" }),
    fighter: (x, y, side = RED) => spawn({ kind: 'ship', subtype: 'ship', archetype: 'fighter', side, mass: 160, size: 9, hp: 160, maxHp: 160, shield: 40, maxShield: 40, speed: 2.2, fireRate: 0.45, weapon: 'bullet', range: 280, damage: 22, x, y, name: side === TEAL ? ""TEAL Interceptor"" : ""RED Fighter"" }),
    brawler: (x, y, side = RED) => spawn({ kind: 'ship', subtype: 'ship', archetype: 'brawler', side, mass: 300, size: 12, hp: 360, maxHp: 360, speed: 1.6, fireRate: 0.25, weapon: 'ram', range: 28, damage: 90, x, y, name: side === TEAL ? ""TEAL Defender"" : ""RED Brawler"" }),
    sniper: (x, y, side = RED) => spawn({ kind: 'ship', subtype: 'ship', archetype: 'sniper', side, mass: 140, size: 8, hp: 120, maxHp: 120, shield: 30, maxShield: 30, speed: 1.9, fireRate: 1.2, weapon: 'laser', range: 620, damage: 46, x, y, name: side === TEAL ? ""TEAL Marksman"" : ""RED Sniper"" }),
    support: (x, y, side = RED) => spawn({ kind: 'ship', subtype: 'ship', archetype: 'support', side, mass: 200, size: 10, hp: 170, maxHp: 170, shield: 80, maxShield: 80, speed: 1.6, fireRate: 1.0, weapon: 'repair', range: 160, damage: -20, x, y, name: side === TEAL ? ""TEAL Medic"" : ""RED Support"" }),
    kamikaze: (x, y, side = RED) => spawn({ kind: 'ship', subtype: 'ship', archetype: 'kamikaze', side, mass: 120, size: 8, hp: 80, maxHp: 80, speed: 3.0, weapon: 'ram', range: 18, damage: 260, x, y, name: side === TEAL ? ""TEAL Scout"" : ""RED Kamikaze"" }),
    star: (x, y) => spawn({ kind: 'celestial', subtype: 'star', side: 'NEUTRAL', x, y, mass: 250000, color: '#ffd166', size: 30, fixed: true, name: [""Sol"", ""Alpha"", ""Beta"", ""Gamma"", ""Delta""][Math.floor(Math.random() * 5)] + "" "" + [""Prime"", ""Secundus"", ""Tertius"", ""Quartus""][Math.floor(Math.random() * 4)] }),
    planet: (x, y) => spawn({ kind: 'celestial', subtype: 'planet', side: 'NEUTRAL', x, y, mass: 14000, color: '#7fb', size: 18, name: [""Terra"", ""Mars"", ""Venus"", ""Jupiter"", ""Saturn""][Math.floor(Math.random() * 5)] + "" "" + [""IV"", ""V"", ""VI"", ""VII"", ""VIII""][Math.floor(Math.random() * 5)] }),
    asteroids: (x, y) => { for (let i = 0; i < 24; i++) spawn({ kind: 'celestial', subtype: 'asteroid', side: 'NEUTRAL', x: x + rand(160), y: y + rand(160), mass: 20 + Math.random() * 160, color: '#b7a', size: rand(4) + 3 }); },
    shieldGen: (x, y, side = TEAL) => spawn({ kind: 'structure', subtype: 'shieldGen', side, x, y, size: 18, hp: 900, maxHp: 900, shield: 1200, localRadius: 220, regen: 6 }),
    missileBattery: (x, y, side = RED) => spawn({ kind: 'structure', subtype: 'missileBattery', side, x, y, size: 16, hp: 600, maxHp: 600, reloadTime: 3.5 }),
    nukeDrop: (x, y, side = RED) => spawn({ kind: 'structure', subtype: 'nukeDevice', side, x, y, size: 14, hp: 300, maxHp: 300, armed: false, countdown: 1.5 }),
    capitalCannon: (x, y, side = RED) => spawn({ kind: 'structure', subtype: 'capitalCannon', side, x, y, size: 22, hp: 1500, maxHp: 1500, reloadTime: 5.0, range: 800, damage: 450 }),
    rebelShieldGen: (x, y) => spawn({ kind: 'structure', subtype: 'rebelShieldGen', side: RED, x, y, size: 20, hp: 1200, maxHp: 1200, shield: 1500, localRadius: 250, regen: 8, color: '#e74c3c' }),
    tradersDen: (x, y) => spawn({ kind: 'structure', subtype: 'tradersDen', side: 'NEUTRAL', x, y, size: 16, hp: 500, maxHp: 500, color: '#f1c40f' }),
    enclaveSatellite: (x, y) => spawn({ kind: 'structure', subtype: 'enclaveSatellite', side: 'NEUTRAL', x, y, size: 12, hp: 400, maxHp: 400, color: '#bdc3c7' }),
    seaPlanet: (x, y) => spawn({ kind: 'celestial', subtype: 'planet', side: 'NEUTRAL', x, y, mass: 16000, color: '#3498db', size: 20, name: [""Aqua"", ""Maris"", ""Oceanus"", ""Neptun"", ""Thalassa""][Math.floor(Math.random() * 5)] }),
    lushPlanet: (x, y) => spawn({ kind: 'celestial', subtype: 'planet', side: 'NEUTRAL', x, y, mass: 14000, color: '#2ecc71', size: 18, name: [""Verdant"", ""Flora"", ""Gaia"", ""Eden"", ""Arbor""][Math.floor(Math.random() * 5)] }),
    flamePlanet: (x, y) => spawn({ kind: 'celestial', subtype: 'planet', side: 'NEUTRAL', x, y, mass: 18000, color: '#e74c3c', size: 22, name: [""Inferno"", ""Pyros"", ""Ignis"", ""Volcan"", ""Magmus""][Math.floor(Math.random() * 5)] }),
    earthPlanet: (x, y) => spawn({ kind: 'celestial', subtype: 'planet', side: 'NEUTRAL', x, y, mass: 15000, color: '#2c3e50', size: 19, name: [""Terra Nova"", ""Earth Two"", ""New Eden"", ""Paradise"", ""Homestead""][Math.floor(Math.random() * 5)] })
  };

  initFactions();
  poolInit();
  generateMissions();

  function spawnProjectile(x, y, vx, vy, owner, type = 'bullet', life = 2.0, damage = 18) {
    if (projCount >= CFG.MAX_PROJECTILES) return null;
    const p = projAcquire();
    Object.assign(p, { kind: 'proj', subtype: type, x, y, vx, vy, ownerId: owner ? owner.id : 0, ownerSide: owner ? owner.side : 'NEUTRAL', life, damage, size: (type === 'laser' ? 2 : 2), created: performance.now() });
    entities.push(p); projCount++; return p;
  }
  function removeEntityByIndex(i) {
    const e = entities[i]; if (!e) return;
    if (e.kind === 'proj') { projCount = Math.max(0, projCount - 1); if (e._pooled !== undefined) projRelease(e); }
    else if (e.side && factions[e.side]) { const idx = factions[e.side].members.indexOf(e.id); if (idx >= 0) factions[e.side].members.splice(idx, 1); }
    entities.splice(i, 1); selectedIds.delete(e.id);
  }
  function removeEntityById(id) { const i = entities.findIndex(e => e.id === id); if (i >= 0) removeEntityByIndex(i); }
  function mkFX(type, x, y, color = '#fff') { spawn({ kind: 'fx', subtype: type, x, y, t: 0, life: type === 'bigExpl' ? 1.2 : 0.28, color }); }
  function explode(x, y, radius = 120, damage = 500) {
    const near = spatialQueryRegion(x, y, radius);
    for (const s of near) {
      if (!s || (s.kind !== 'ship' && s.kind !== 'structure')) continue;
      const d = Math.hypot(s.x - x, s.y - y);
      if (d < radius) s.hp -= damage * (1 - d / radius);
    }
    mkFX('bigExpl', x, y);
  }
  function destroyShip(s) { explode(s.x, s.y, (s.size || 12) * 4, (s.maxHp || 100) * 0.45); const idx = entities.indexOf(s); if (idx >= 0) removeEntityByIndex(idx); }
  function chooseTarget(source) {
    const cand = entities.filter(e => e.kind === 'ship' && e.side !== source.side && e !== source);
    if (!cand.length) return null;
    cand.sort((a, b) => Math.hypot(a.x - source.x, a.y - source.y) - Math.hypot(b.x - source.x, b.y - source.y));
    return cand[0];
  }

  function updateMissions(dt) {
    const now = performance.now();
    for (const mission of missions) {
      if (mission.accepted && mission.startTime === 0) mission.startTime = now;
      if (mission.accepted && mission.startTime > 0) {
        const elapsed = (now - mission.startTime) / 1000;
        mission.progress = Math.min(1, elapsed / mission.timeLimit);
        if (elapsed >= mission.timeLimit) {
          mission.accepted = false;
          if (mission.faction === TEAL) {
            factions[TEAL].reputation = Math.min(100, factions[TEAL].reputation + 5);
            // Add rewards
            for(const resource in mission.reward) {
              if (factions[TEAL].resources.hasOwnProperty(resource)) {
                factions[TEAL].resources[resource] += mission.reward[resource];
              }
            }
          }
          mkFX('spark', mission.location.x, mission.location.y, '#6ee7b7');
        }
      }
    }
  }

  function step(dt) {
    dt = Math.min(dt, CFG.DT_MAX);
    spatialClear(); for (const e of entities) spatialInsert(e);
    const celestials = entities.filter(e => e.kind === 'celestial');
    const ships = entities.filter(e => e.kind === 'ship');
    updateMissions(dt);

    for (const s of ships) {
      let ax = 0, ay = 0;
      for (const c of celestials) { const dx = c.x - s.x, dy = c.y - s.y, r2 = dx * dx + dy * dy + 100; const inv = 1 / Math.sqrt(r2); const f = CFG.GRAVITY_BASE * c.mass * (s.mass || 1) / r2; ax += f * dx * inv / (s.mass || 1); ay += f * dy * inv / (s.mass || 1); }
      s.vx += ax * dt * 60; s.vy += ay * dt * 60;
    }

    for (const s of ships) {
      s.lastShot = s.lastShot || 0;
      if (!s.playerControl) {
        if (!s.target || s.target.hp <= 0) { if (Math.random() < 0.02) s.target = chooseTarget(s); }
        const target = entities.find(e => e.id === s.target?.id); s.target = target;
        if (target) {
          const dx = target.x - s.x, dy = target.y - s.y, r = Math.hypot(dx, dy) + 0.01;
          switch (s.archetype) {
            case 'fighter': s.vx += (dx / r) * 0.02; s.vy += (dy / r) * 0.02; break;
            case 'brawler': s.vx += (dx / r) * 0.03; s.vy += (dy / r) * 0.03; break;
            case 'sniper': if (r < (s.range || 520) * 0.6) { s.vx -= (dx / r) * 0.02; s.vy -= (dy / r) * 0.02; } else { s.vx += (dx / r) * 0.01; s.vy += (dy / r) * 0.01; } break;
            case 'kamikaze': s.vx += (dx / r) * 0.05; s.vy += (dy / r) * 0.05; break;
            case 'support': {
              const ally = entities.filter(e => e.kind === 'ship' && e.side === s.side && e.hp < e.maxHp).sort((a, b) => a.hp - b.hp)[0];
              if (ally) { const adx = ally.x - s.x, ady = ally.y - s.y, ar = Math.hypot(adx, ady) + 0.01; s.vx += (adx / ar) * 0.015; s.vy += (ady / ar) * 0.015; if (ar < s.range * 0.8 && (performance.now() - s.lastShot > (s.fireRate * 1000))) { ally.hp = Math.min(ally.maxHp, ally.hp - s.damage); s.lastShot = performance.now(); } }
              else { s.vx += rand(0.0006); s.vy += rand(0.0006); }
            } break;
            default: s.vx += rand(0.0005); s.vy += rand(0.0005);
          }
        } else { s.vx += rand(0.0006); s.vy += rand(0.0006); }
      }

      if (s.weapon !== 'ram' && s.weapon !== 'repair') {
        const now = performance.now();
        if (s.target && (now - s.lastShot) > ((s.fireRate || 0.5) * 1000)) {
          const dx = s.target.x - s.x, dy = s.target.y - s.y, r = Math.hypot(dx, dy);
          if (r < (s.range || 300)) {
            const lead = r / (s.weapon === 'laser' ? 15 : 8); const tx = s.target.x + (s.target.vx || 0) * lead, ty = s.target.y + (s.target.vy || 0) * lead;
            const dirx = tx - s.x, diry = ty - s.y, magd = Math.hypot(dirx, diry) + 0.001; const speed = s.weapon === 'laser' ? 15 : 8.0;
            spawnProjectile(s.x + (dirx / magd) * s.size, s.y + (diry / magd) * s.size, (dirx / magd) * speed + (s.vx || 0), (diry / magd) * speed + (s.vy || 0), s, s.weapon, 2.5, s.damage || 18);
            s.lastShot = now;
          }
        }
      }

      if (s.subtype === 'mothership') {
        s.spawnTimer = (s.spawnTimer || 0) + dt;
        if (s.spawnTimer > (s.spawnRate || 3.0)) { s.spawnTimer = 0; const choice = ['fighter', 'brawler', 'sniper'][Math.floor(Math.random() * 3)]; spawnActions[choice](s.x + rand(30), s.y + rand(30), s.side); }
      }

      s.x += (s.vx || 0) * dt * 60; s.y += (s.vy || 0) * dt * 60;
      if (s.x < -400) s.x = W() + 400; if (s.x > W() + 400) s.x = -400; if (s.y < -400) s.y = H() + 400; if (s.y > H() + 400) s.y = -400;
      if (s.hp <= 0) destroyShip(s);
    }

    for (let i = entities.length - 1; i >= 0; i--) {
      const p = entities[i]; if (p?.kind !== 'proj') continue;
      p.x += (p.vx || 0) * dt * 60; p.y += (p.vy || 0) * dt * 60; p.life -= dt; if (p.life <= 0) { removeEntityByIndex(i); continue; }
      const possible = spatialQueryRegion(p.x, p.y, 80);
      for (const hit of possible) { if (!hit || hit.kind !== 'ship' || hit.side === p.ownerSide) continue; const rr = (hit.size || 8) + (p.size || 2), dx = hit.x - p.x, dy = hit.y - p.y; if (dx * dx + dy * dy < rr * rr) { hit.hp -= p.damage || 18; mkFX('hit', p.x, p.y); removeEntityByIndex(i); if (hit.hp <= 0) destroyShip(hit); break; } }
    }

    for (const s of ships) {
      const neighbors = spatialQueryRegion(s.x, s.y, s.size + 80);
      for (const b of neighbors) { if (!b || b.kind !== 'ship' || b.id <= s.id) continue; const dx = b.x - s.x, dy = b.y - s.y, r = (s.size || 8) + (b.size || 8); if (dx * dx + dy * dy < r * r) { const impact = Math.min(50, Math.hypot(b.vx - s.vx, b.vy - s.vy) * 2); s.hp -= impact; b.hp -= impact; const mag = Math.hypot(dx, dy) || 1, nx = dx / mag, ny = dy / mag; s.vx -= nx * 0.5; s.vy -= ny * 0.5; b.vx += nx * 0.5; b.vy += ny * 0.5; mkFX('spark', (s.x + b.x) / 2, (s.y + b.y) / 2, '#f88'); if (s.hp <= 0) destroyShip(s); if (b.hp <= 0) destroyShip(b); } }
    }

    for (let i = entities.length - 1; i >= 0; i--) { const e = entities[i]; if (e?.kind === 'fx') { e.t = (e.t || 0) + dt; if (e.t > e.life) removeEntityByIndex(i); } }
  }

  function drawShipInfo(ship) {
    const panel = document.getElementById('shipPanel'), shipInfo = document.getElementById('shipInfo'), crewList = document.getElementById('crewList'), crewCount = document.getElementById('crewCount');
    if (!ship) { panel.style.display = 'none'; return; }
    shipInfo.innerHTML = `<h3>${ship.name || 'Unnamed Ship'}</h3><p>Type: ${ship.archetype || 'Unknown'}</p><p>Faction: ${factions[ship.side]?.name || 'Neutral'}</p><p>HP: ${Math.floor(ship.hp)}/${ship.maxHp}</p>${ship.shield ? `<p>Shield: ${Math.floor(ship.shield)}/${ship.maxShield}</p>` : ''}${ship.weapons?.length ? `<p>Weapons: ${ship.weapons.map(w => w.type).join(', ')}</p>` : ''}${ship.modules?.length ? `<p>Modules: ${ship.modules.join(', ')}</p>` : ''}`;
    if (ship.crew?.length) {
      crewCount.textContent = `(${ship.crew.length})`; crewList.innerHTML = '';
      ship.crew.forEach(member => { const el = document.createElement('div'); el.className = 'crew-member'; el.innerHTML = `<span class=""crew-role"">${member.name} (${member.role})</span><span class=""crew-stats"">Skill: ${member.skill} | Morale: ${member.morale}</span>`; crewList.appendChild(el); });
    } else { crewList.innerHTML = '<p>No crew</p>'; }
    panel.style.display = 'block';
  }

  function drawMissionPanel() {
    const panel = document.getElementById('missionPanel'), missionList = document.getElementById('missionList'); missionList.innerHTML = '';
    missions.forEach(mission => {
      const card = document.createElement('div'); card.className = 'mission-card';
      const rewards = Object.entries(mission.reward).map(([key, value]) => `${value} ${key}`).join(', ');
      card.innerHTML = `<h3>${mission.name}</h3><p>${mission.desc}</p><p>Faction: ${factions[mission.faction]?.name || 'Neutral'}</p><p>Reward: ${rewards}</p><p>Difficulty: ${'★'.repeat(mission.difficulty)}</p>${mission.accepted ? `<progress value=""${mission.progress * 100}"" max=""100""></progress><p>Time remaining: ${Math.ceil(mission.timeLimit * (1 - mission.progress))}s</p>` : `<button class=""accept-mission"" data-id=""${mission.id}"">Accept Mission</button>`}`;
      missionList.appendChild(card);
    });
    panel.style.display = 'block';
  }
  
  function drawStatsPanel() {
    const grid = document.getElementById('statsGrid');
    const playerFaction = factions[TEAL];
    if (!grid || !playerFaction) return;
    
    let html = '';
    for (const resource in playerFaction.resources) {
        html += `<div class=""label"">${resource.charAt(0).toUpperCase() + resource.slice(1)}</div><div class=""value"">${playerFaction.resources[resource]}</div>`;
    }
    html += `<div class=""label"" style=""margin-top: 8px; grid-column: 1 / -1; color: var(--accent);"">Reputation</div>`;
    html += `<div class=""label"">TEAL</div><div class=""value"">${playerFaction.reputation}</div>`;
    html += `<div class=""label"">RED</div><div class=""value"">${factions[RED].reputation}</div>`;
    
    grid.innerHTML = html;
  }

  function draw() {
    ctx.fillStyle = '#010214'; ctx.fillRect(0, 0, W(), H());
    ctx.fillStyle = 'rgba(255,255,255,0.03)'; for (let i = 0; i < 120; i++) { const x = (i * 123.7 + performance.now() * 0.001) % W(), y = (i * 221.3) % H(); ctx.fillRect(x, y, 1, 1); }
    ctx.save();
    if (followId) { const f = entities.find(e => e.id === followId); if (f) { camera.targetX = W() / 2 - f.x; camera.targetY = H() / 2 - f.y; } }
    camera.x += (camera.targetX - camera.x) * camera.lerp; camera.y += (camera.targetY - camera.y) * camera.lerp;
    ctx.translate(camera.x, camera.y);

    missions.forEach(mission => {
      if (mission.accepted) {
        ctx.beginPath(); ctx.arc(mission.location.x, mission.location.y, 20, 0, TAU); ctx.fillStyle = hexToRGBA(factions[mission.faction]?.color || '#fff', 0.3); ctx.fill();
        ctx.strokeStyle = hexToRGBA(factions[mission.faction]?.color || '#fff', 0.8); ctx.lineWidth = 2; ctx.stroke();
        ctx.beginPath(); ctx.arc(mission.location.x, mission.location.y, 20, -Math.PI/2, -Math.PI/2 + TAU * mission.progress); ctx.strokeStyle = hexToRGBA('#6ee7b7', 0.8); ctx.lineWidth = 3; ctx.stroke();
      }
    });

    for (const e of entities) {
      switch (e.kind) {
        case 'celestial': {
          const r = Math.max(2, e.size);
          if (e.subtype === 'star') { const g = ctx.createRadialGradient(e.x, e.y, 0, e.x, e.y, r * 7); g.addColorStop(0, hexToRGBA(e.color || '#ffd166', 0.55)); g.addColorStop(1, hexToRGBA(e.color || '#ffd166', 0)); ctx.fillStyle = g; ctx.beginPath(); ctx.arc(e.x, e.y, r * 7, 0, TAU); ctx.fill(); }
          ctx.beginPath(); ctx.fillStyle = e.color || '#88c'; ctx.arc(e.x, e.y, r, 0, TAU); ctx.fill();
          if (e.subtype === 'planet' || e.subtype === 'star') { ctx.fillStyle = '#fff'; ctx.font = '10px Inter'; ctx.textAlign = 'center'; ctx.fillText(e.name || 'Unknown', e.x, e.y + r + 15); }
        } break;
        case 'ship': case 'structure': {
          ctx.save(); ctx.translate(e.x, e.y);
          const ang = Math.atan2(e.vy || 0, e.vx || 0); ctx.rotate(ang + Math.PI / 2);
          const col = factions[e.side]?.color || '#999';
          if (e.kind === 'ship') { ctx.beginPath(); ctx.moveTo(0, -e.size); ctx.lineTo(-e.size * 0.7, e.size); ctx.lineTo(e.size * 0.7, e.size); ctx.closePath(); ctx.fillStyle = col; ctx.fill(); }
          else {
            if (e.subtype === 'rebelShieldGen') { ctx.beginPath(); ctx.arc(0, 0, e.size, 0, TAU); ctx.strokeStyle = e.color || '#e74c3c'; ctx.lineWidth = 2; ctx.stroke(); }
            else if (e.subtype === 'capitalCannon') { ctx.fillStyle = e.color || '#d33'; ctx.fillRect(-e.size / 2, -e.size / 2, e.size, e.size); }
            else if (e.subtype === 'tradersDen' || e.subtype === 'enclaveSatellite') { ctx.beginPath(); ctx.arc(0, 0, e.size, 0, TAU); ctx.fillStyle = e.color || '#bdc3c7'; ctx.fill(); }
            else { ctx.fillStyle = col; ctx.fillRect(-e.size / 2, -e.size / 2, e.size, e.size); }
          }
          if (e.hp < e.maxHp) { const hW = e.size * 1.5; ctx.fillStyle = 'rgba(0,0,0,0.6)'; ctx.fillRect(-hW / 2, e.size + 6, hW, 5); ctx.fillStyle = '#4caf50'; ctx.fillRect(-hW / 2, e.size + 6, hW * Math.max(0, (e.hp / e.maxHp)), 5); }
          ctx.restore();
          if (selectedIds.has(e.id) && e.name) { ctx.fillStyle = '#fff'; ctx.font = '10px Inter'; ctx.textAlign = 'center'; ctx.fillText(e.name, e.x, e.y - e.size - 10); }
        } break;
        case 'proj': { ctx.fillStyle = e.subtype === 'laser' ? '#9ef' : '#ffc'; ctx.beginPath(); ctx.arc(e.x, e.y, e.size || 2, 0, TAU); ctx.fill(); } break;
        case 'fx': {
          const p = (e.t / e.life) || 0;
          if (e.subtype === 'bigExpl') { const r = (p * 36 + 10); ctx.fillStyle = `rgba(255,150,50,${1-p})`; ctx.beginPath(); ctx.arc(e.x, e.y, r, 0, TAU); ctx.fill(); }
          else if (e.subtype === 'hit') { ctx.fillStyle = `rgba(255,255,255,${1-p})`; ctx.beginPath(); ctx.arc(e.x, e.y, 3+p*8, 0, TAU); ctx.fill(); }
          else if (e.subtype === 'spark') { ctx.fillStyle = e.color || 'rgba(255,200,50,0.9)'; ctx.beginPath(); ctx.arc(e.x, e.y, 1+p*6, 0, TAU); ctx.fill(); }
        } break;
      }
    }

    for (const id of selectedIds) {
      const s = entities.find(e => e.id === id);
      if (s) { ctx.strokeStyle = '#fff'; ctx.lineWidth = 1 / DPR; ctx.beginPath(); ctx.arc(s.x, s.y, (s.size || 8) + 6, 0, TAU); ctx.stroke(); ctx.beginPath(); ctx.arc(s.x, s.y, 2, 0, TAU); ctx.fillStyle = '#fff'; ctx.fill(); }
      else { selectedIds.delete(id); }
    }
    ctx.restore();
    
    if (isDragging && selectionBox) {
        ctx.save();
        ctx.setTransform(DPR, 0, 0, DPR, 0, 0); // Use screen coordinates for selection box
        ctx.strokeStyle = '#7ef'; ctx.lineWidth = 1; ctx.setLineDash([5, 5]);
        ctx.strokeRect(
            parseFloat(selectionBox.style.left), 
            parseFloat(selectionBox.style.top), 
            parseFloat(selectionBox.style.width), 
            parseFloat(selectionBox.style.height)
        );
        ctx.setLineDash([]);
        ctx.restore();
    }
    document.getElementById('debug').textContent = `Entities: ${entities.length} — Projectiles: ${projCount} — FPS: ${fps} — Selected: ${selectedIds.size}`;
    drawStatsPanel();
  }

  function loop(time) {
    const dt = (time - lastTime) / 1000; lastTime = time; if (running) step(dt); draw(); frameCount++;
    if (time > lastFpsTime + CFG.FPS_INTERVAL) { fps = Math.round(frameCount / ((time - lastFpsTime) / 1000)); lastFpsTime = time; frameCount = 0; }
    requestAnimationFrame(loop);
  }

  function screenToWorld(screenX, screenY) { return { x: screenX - camera.x, y: screenY - camera.y }; }

  function handleTerminalCommand(cmd) {
    cmd = cmd.trim(); if (!cmd) return;
    terminalHistory.push(cmd); terminalHistoryIndex = terminalHistory.length;
    const [command, ...args] = cmd.toLowerCase().split(/\s+/); const center = screenToWorld(W() / 2, H() / 2);
    const playerFaction = factions[TEAL];
    switch (command) {
      case 'spawn': if (args[0] && spawnActions[args[0]]) { const count = parseInt(args[1]) || 1; const side = args[2] === 'teal' ? TEAL : RED; for (let i = 0; i < count; i++) { spawnActions[args[0]](center.x + rand(120), center.y + rand(120), side); } } else { console.log('Available spawn types: ' + Object.keys(spawnActions).join(', ')); } break;
      case 'clear': entities = []; projCount = 0; nextId = 1; selectedIds.clear(); initFactions(); poolInit(); initGame(); break;
      case 'stats': console.log(`Entities: ${entities.length}, Projectiles: ${projCount}, Selected Ships: ${selectedIds.size}`); break;
      case 'explode': explode(center.x, center.y, parseFloat(args[0]) || 120, parseFloat(args[1]) || 500); break;
      case 'teleport': if (selectedIds.size) { const x = parseFloat(args[0]) || center.x, y = parseFloat(args[1]) || center.y; for (const id of selectedIds) { const s = entities.find(e => e.id === id); if (s) { s.x = x + rand(20); s.y = y + rand(20); } } } break;
      case 'mission': if (args[0] === 'list') { missions.forEach(m => console.log(`${m.name} - ${m.desc} (${m.reward.credits} credits)`)); } else if (args[0] === 'generate') { generateMissions(); console.log('Generated new missions'); } break;
      case 'crew': if (selectedIds.size) { const ship = entities.find(e => e.id === [...selectedIds][0]); if (ship?.crew) { console.log(`${ship.crew.length} crew members:`); ship.crew.forEach(m => console.log(`${m.name} - ${m.role} (Skill: ${m.skill}, Morale: ${m.morale})`)); } } break;
      case 'add': 
        if (args[0] && playerFaction.resources.hasOwnProperty(args[0])) {
            playerFaction.resources[args[0]] += parseInt(args[1]) || 1;
            drawStatsPanel();
        } else { console.log('Invalid resource. Available: ' + Object.keys(playerFaction.resources).join(', ')) }
        break;
      default: console.log('Unknown command. Try: spawn, clear, stats, explode, teleport, mission, crew, add <resource> <amount>');
    }
  }

  function updateTerminalSuggestions(input) {
    const suggestions = document.getElementById('terminal-suggestions'); suggestions.innerHTML = ''; 
    const commands = [
      { cmd: 'spawn <type> [count] [side]', desc: 'Spawn entities' }, { cmd: 'clear', desc: 'Clear all entities' }, { cmd: 'stats', desc: 'Show game statistics' },
      { cmd: 'explode [radius] [damage]', desc: 'Create explosion' }, { cmd: 'teleport [x] [y]', desc: 'Teleport selected ships' },
      { cmd: 'mission list', desc: 'List available missions' }, { cmd: 'mission generate', desc: 'Generate new missions' }, { cmd: 'crew', desc: 'Show crew info' },
      { cmd: 'add <resource> <amount>', desc: 'Add resources to player faction' }
    ];
    
    const filtered = input ? commands.filter(c => c.cmd.toLowerCase().startsWith(input.toLowerCase())) : commands;
    
    if (filtered.length) { filtered.forEach(cmd => { const el = document.createElement('div'); el.textContent = `${cmd.cmd} - ${cmd.desc}`; el.onclick = () => { document.getElementById('terminalInput').value = cmd.cmd.split(' ')[0] + ' '; suggestions.style.display = 'none'; document.getElementById('terminalInput').focus(); }; suggestions.appendChild(el); }); suggestions.style.display = 'block'; } else { suggestions.style.display = 'none'; }
  }

  class PieMenu {
    constructor(items) { this.items = items; this.root = null; this.center = { x: 0, y: 0 }; }
    show(clientX, clientY) {
      this.hide(); const cx = Math.round(clientX), cy = Math.round(clientY); this.center = { x: cx, y: cy };
      const root = document.createElement('div'); root.className = 'pie-container'; root.style.transform = `translate(${cx}px, ${cy}px)`;
      const wrap = document.createElement('div'); wrap.className = 'pie-wrap'; root.appendChild(wrap);
      const N = this.items.length; const step = TAU / N; const radius = 100; const startOffset = Math.PI / 2;
      for (let i = 0; i < N; i++) {
        const item = this.items[i]; const slice = document.createElement('div'); slice.className = 'pie-slice'; const ang = i * step + startOffset;
        const tx = Math.round(Math.cos(ang) * radius); const ty = Math.round(Math.sin(ang) * radius);
        slice.style.transform = `translate(${tx}px, ${ty}px)`; slice.style.background = hexToRGBA(item.color || '#07202a', 0.88);
        slice.innerHTML = `<div class=""label"">${item.label}</div><div class=""pie-divider""></div>`;
        const onDown = (e) => { e.stopPropagation(); const world = screenToWorld(cx, cy); try { item.action(world.x, world.y); } finally { this.hide(); } };
        slice.addEventListener('mousedown', onDown); slice.addEventListener('touchstart', onDown, { passive: true });
        wrap.appendChild(slice);
      }
      document.body.appendChild(root); this.root = root;
      setTimeout(() => document.addEventListener('mousedown', this.boundHideOnce || (this.boundHideOnce = this.hide.bind(this)), { once: true }), 0);
      setTimeout(() => document.addEventListener('touchstart', this.boundHideOnceTouch || (this.boundHideOnceTouch = this.hide.bind(this)), { once: true, passive: true }), 0);
    }
    hide() { if (this.root) { this.root.remove(); this.root = null; } }
  }

  const playerPie = new PieMenu([ { label: 'Fighter', color: factions[TEAL].color, action: (x, y) => spawnActions.fighter(x, y, TEAL) }, { label: 'Brawler', color: factions[TEAL].color, action: (x, y) => spawnActions.brawler(x, y, TEAL) }, { label: 'Sniper', color: factions[TEAL].color, action: (x, y) => spawnActions.sniper(x, y, TEAL) }, { label: 'Support', color: factions[TEAL].color, action: (x, y) => spawnActions.support(x, y, TEAL) }, { label: 'Mothership', color: factions[TEAL].color, action: (x, y) => spawnActions.playerMothership(x, y) }]);
  const enemyPie = new PieMenu([ { label: 'Enemy Fighter', color: factions[RED].color, action: (x, y) => spawnActions.fighter(x, y, RED) }, { label: 'Enemy Brawler', color: factions[RED].color, action: (x, y) => spawnActions.brawler(x, y, RED) }, { label: 'Enemy Sniper', color: factions[RED].color, action: (x, y) => spawnActions.sniper(x, y, RED) }, { label: 'Enemy Mother', color: factions[RED].color, action: (x, y) => spawnActions.enemyMothership(x, y) }]);
  const astroPie = new PieMenu([ { label: 'Place Star', color: '#ffd166', action: (x, y) => spawnActions.star(x, y) }, { label: 'Place Planet', color: '#7fb', action: (x, y) => spawnActions.planet(x, y) }, { label: 'Asteroid Field', color: '#b7a', action: (x, y) => spawnActions.asteroids(x, y) }]);
  const secretPie = new PieMenu([ { label: 'Capital Cannons', color: '#ff6b6b', action: (x, y) => spawnActions.capitalCannon(x, y, RED) }, { label: 'Rebel Shield Gen', color: '#e74c3c', action: (x, y) => spawnActions.rebelShieldGen(x, y) }, { label: ""Trader's Den"", color: '#f1c40f', action: (x, y) => spawnActions.tradersDen(x, y) }, { label: 'Enclave Satellite', color: '#bdc3c7', action: (x, y) => spawnActions.enclaveSatellite(x, y) }, { label: 'Earth Planet', color: '#2c3e50', action: (x, y) => spawnActions.earthPlanet(x, y) }]);
  const zMenu = new PieMenu([ { label: 'Attack Nearest', color: '#ff6b6b', action: (x, y) => { for (const id of selectedIds) { const s = entities.find(e => e.id === id); if (s && s.playerControl) { s.target = chooseTarget(s); if (s.target) { const dx = s.target.x - s.x; const dy = s.target.y - s.y; const dist = Math.hypot(dx, dy); if (dist < (s.range || 300)) { s.vx += (dx / dist) * 0.1; s.vy += (dy / dist) * 0.1; } } } } } }, { label: 'Move To', color: '#6ee7b7', action: (x, y) => { for (const id of selectedIds) { const s = entities.find(e => e.id === id); if (s && s.playerControl) { s.target = null; const dx = x - s.x; const dy = y - s.y; const dist = Math.hypot(dx, dy); if (dist > 10) { s.vx += (dx / dist) * 0.05; s.vy += (dy / dist) * 0.05; } } } } }, { label: 'Hold Position', color: '#a78bfa', action: () => { for (const id of selectedIds) { const s = entities.find(e => e.id === id); if (s && s.playerControl) { s.vx = 0; s.vy = 0; s.target = null; } } } }, { label: 'Self-Destruct', color: '#e74c3c', action: () => { for (const id of selectedIds) { const s = entities.find(e => e.id === id); if (s && s.playerControl) destroyShip(s); } } }, { label: 'Repair Fleet', color: '#2ecc71', action: () => { for (const id of selectedIds) { const s = entities.find(e => e.id === id); if (s && s.playerControl) { s.hp = Math.min(s.maxHp, s.hp + s.maxHp * 0.25); if (s.shield !== undefined) { s.shield = Math.min(s.maxShield, s.shield + s.maxShield * 0.5); } mkFX('spark', s.x, s.y, '#2ecc71'); } } } }]);

  const keys = new Set();
  c.addEventListener('mousemove', (e) => {
    mouse.screenX = e.clientX; mouse.screenY = e.clientY;
    if (isDragging && selectionBox) {
      selectionBox.style.width = Math.abs(e.clientX - mouse.startX) + 'px'; selectionBox.style.height = Math.abs(e.clientY - mouse.startY) + 'px';
      selectionBox.style.left = Math.min(e.clientX, mouse.startX) + 'px'; selectionBox.style.top = Math.min(e.clientY, mouse.startY) + 'px';
    }
  });
  c.addEventListener('mousedown', (e) => {
    if (e.button === 2) { e.preventDefault(); if (keys.has('z')) { zMenu.show(e.clientX, e.clientY); } else if (e.shiftKey) { secretPie.show(e.clientX, e.clientY); } else if (e.ctrlKey || e.metaKey) { enemyPie.show(e.clientX, e.clientY); } else if (e.altKey) { astroPie.show(e.clientX, e.clientY); } else { playerPie.show(e.clientX, e.clientY); } return; }
    if (e.button === 0) {
      mouse.down = true; mouse.startX = e.clientX; mouse.startY = e.clientY;
      if (!e.ctrlKey && !e.metaKey) selectedIds.clear();
      const world = screenToWorld(e.clientX, e.clientY);
      const clicked = spatialQueryRegion(world.x, world.y, 60).slice().reverse().find(en => en.kind === 'ship' && Math.hypot(en.x - world.x, en.y - world.y) < en.size);
      if (clicked) { selectedIds.add(clicked.id); drawShipInfo(clicked); }
      else { isDragging = true; selectionBox = document.createElement('div'); selectionBox.className = 'selection-box'; selectionBox.style.left = e.clientX + 'px'; selectionBox.style.top = e.clientY + 'px'; selectionBox.style.width = '0px'; selectionBox.style.height = '0px'; document.body.appendChild(selectionBox); }
    }
  });
  c.addEventListener('mouseup', (e) => {
    if (e.button === 0 && isDragging) {
      isDragging = false;
      if (selectionBox) {
        const rect = selectionBox.getBoundingClientRect();
        const worldStart = screenToWorld(rect.left, rect.top);
        const worldEnd = screenToWorld(rect.right, rect.bottom);
        const ships = entities.filter(s => s.kind === 'ship');
        for (const s of ships) {
          if (s.x > worldStart.x && s.x < worldEnd.x && s.y > worldStart.y && s.y < worldEnd.y) {
            selectedIds.add(s.id);
          }
        }
        if (selectedIds.size) { const firstShip = entities.find(e => e.id === [...selectedIds][0]); drawShipInfo(firstShip); }
        selectionBox.remove(); selectionBox = null;
      }
    }
    mouse.down = false;
  });
  c.addEventListener('contextmenu', (e) => e.preventDefault());

  document.addEventListener('keydown', (e) => {
    const k = e.key.toLowerCase(); keys.add(k);
    if (document.activeElement === terminalInput) return;
    if (k === 'p') { running = !running; document.getElementById('btnPause').textContent = running ? 'Pause (P)' : 'Resume (P)'; }
    if (k === 'm') document.getElementById('btnMegaToggle').click();
    if (k === '`' || k === '~') { e.preventDefault(); const t = document.getElementById('terminal'); t.style.display = t.style.display === 'block' ? 'none' : 'block'; if (t.style.display === 'block') { terminalInput.focus(); updateTerminalSuggestions(''); } }
    if (k === 'f') { const ships = entities.filter(s => s.kind === 'ship'); if (ships.length) { const idx = ships.findIndex(s => s.id === followId); followId = ships[(idx + 1) % ships.length].id; } }
    if (k === 'j') { drawMissionPanel(); }
    if (k === 'i') { if (selectedIds.size) { const ship = entities.find(e => e.id === [...selectedIds][0]); drawShipInfo(ship); } else { document.getElementById('shipPanel').style.display = 'none'; } }
  });
  document.addEventListener('keyup', (e) => { keys.delete(e.key.toLowerCase()); });

  const terminalInput = document.getElementById('terminalInput');
  terminalInput.addEventListener('keydown', (e) => {
    e.stopPropagation();
    if (e.key === 'Enter') { handleTerminalCommand(terminalInput.value); terminalInput.value = ''; document.getElementById('terminal-suggestions').style.display = 'none'; }
    else if (e.key === 'Escape') { document.getElementById('terminal').style.display = 'none'; }
    else if (e.key === 'ArrowUp') { if (terminalHistoryIndex > 0) { terminalHistoryIndex--; terminalInput.value = terminalHistory[terminalHistoryIndex] || ''; } }
    else if (e.key === 'ArrowDown') { if (terminalHistoryIndex < terminalHistory.length - 1) { terminalHistoryIndex++; terminalInput.value = terminalHistory[terminalHistoryIndex] || ''; } else { terminalHistoryIndex = terminalHistory.length; terminalInput.value = ''; } }
    else { setTimeout(() => updateTerminalSuggestions(terminalInput.value), 0); }
  });
  terminalInput.addEventListener('focus', () => updateTerminalSuggestions(terminalInput.value));
  terminalInput.addEventListener('blur', () => { setTimeout(() => document.getElementById('terminal-suggestions').style.display = 'none', 150); });

  document.getElementById('missionList').addEventListener('click', (e) => { if (e.target.classList.contains('accept-mission')) { const missionId = parseInt(e.target.dataset.id); const mission = missions.find(m => m.id === missionId); if (mission) { mission.accepted = true; drawMissionPanel(); } } });
  document.getElementById('closeMissions').addEventListener('click', () => { document.getElementById('missionPanel').style.display = 'none'; });

  setInterval(() => {
    if (!running || !selectedIds.size) return;
    const selectedShips = entities.filter(e => selectedIds.has(e.id) && e.playerControl);
    if (!selectedShips.length) return;
    const now = performance.now();
    for (const s of selectedShips) {
      if (keys.has('a')) s.vx -= 0.08; if (keys.has('d')) s.vx += 0.08;
      if (keys.has('w')) s.vy -= 0.08; if (keys.has('s')) s.vy += 0.08;
      if (keys.has(' ')) {
        if (!s.target || s.target.hp <= 0) s.target = chooseTarget(s);
        if (s.target && (!s.lastShot || (now - s.lastShot) > ((s.fireRate || 0.22) * 1000))) {
          const dx = s.target.x - s.x; const dy = s.target.y - s.y; const dist = Math.hypot(dx, dy);
          if (dist < (s.range || 300)) { const dir = Math.atan2(dy, dx); const speed = 12; spawnProjectile(s.x, s.y, Math.cos(dir) * speed + s.vx, Math.sin(dir) * speed + s.vy, s, 'bullet', 2.5, 35); s.lastShot = now; }
        }
      }
    }
  }, 16);

  document.getElementById('btnPause').onclick = () => { running = !running; document.getElementById('btnPause').textContent = running ? 'Pause (P)' : 'Resume (P)'; };
  document.getElementById('btnCenter').onclick = () => { followId = null; camera.targetX = 0; camera.targetY = 0; };
  document.getElementById('btnClear').onclick = () => { entities = []; projCount = 0; nextId = 1; selectedIds.clear(); initFactions(); poolInit(); initGame(); document.getElementById('shipPanel').style.display = 'none'; };
  document.getElementById('btnMegaToggle').onclick = () => { const m = document.getElementById('mega'); m.style.display = m.style.display === 'block' ? 'none' : 'block'; };
  document.getElementById('btnTerminal').onclick = () => { const t = document.getElementById('terminal'); t.style.display = t.style.display === 'block' ? 'none' : 'block'; if (t.style.display === 'block') { terminalInput.focus(); updateTerminalSuggestions(''); } };
  document.getElementById('btnMissions').onclick = () => { drawMissionPanel(); };
  document.getElementById('btnShipPanel').onclick = () => { if (selectedIds.size) { const ship = entities.find(e => e.id === [...selectedIds][0]); drawShipInfo(ship); } else { document.getElementById('shipPanel').style.display = 'none'; } };
  document.getElementById('mega').onclick = (e) => { if (e.target.classList.contains('spawn-btn')) { const action = e.target.dataset.action; if (spawnActions[action]) { const center = screenToWorld(W() / 2, H() / 2); spawnActions[action](center.x + rand(120), center.y + rand(120)); } } };

  function initGame() {
    const center = screenToWorld(W() / 2, H() / 2);
    spawnActions.star(center.x, center.y); spawnActions.playerMothership(center.x - 420, center.y);
    spawnActions.enemyMothership(center.x + 420, center.y);
    spawnActions.planet(center.x - 200, center.y - 150); spawnActions.planet(center.x + 250, center.y + 100);
    spawnActions.lushPlanet(center.x + 180, center.y - 200);
  }

  initGame();
  requestAnimationFrame(loop);
  window.__SPACEVERSE_V56 = { spawnActions, entities, spawnProjectile, removeEntityById, factions, missions, generateMissions, generateCrew };
})();
</script>
</body>
</html>
"
HZZ3VSr5,Comandos para crear un stack MEAN en un VPS (Ubuntu),NubeColectiva,PowerShell,Wednesday 13th of August 2025 08:10:09 PM CDT,"########## 1. MONGODB ##########
# Importar clave GPG de MongoDB
curl -fsSL https://pgp.mongodb.com/server-7.0.asc | \
sudo gpg --dearmor -o /usr/share/keyrings/mongodb-server-7.0.gpg

# Agregar repositorio
echo ""deb [signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg] https://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/7.0 multiverse"" \
| sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list

# Actualizar e instalar
sudo apt update
sudo apt install -y mongodb-org

# Habilitar y arrancar MongoDB
sudo systemctl enable mongod
sudo systemctl start mongod

# Verificar
mongod --version

########## 2. EXPRESS ##########
# Instalar Express
sudo npm install -g express-generator

# Verificar
express --version

########## 3. NODE JS ##########
# Eliminar Node.js 12
sudo apt remove nodejs npm
sudo apt purge nodejs npm
sudo apt autoremove

# Instalar última versión estable de Node.js (LTS)
sudo apt install -y curl
curl -fsSL https://deb.nodesource.com/setup_23.x -o nodesource_setup.sh # Verificar Nro. de versión actual
sudo -E bash nodesource_setup.sh
sudo apt install -y nodejs

# Verificar
node -v 

########## 4. ANGULAR ##########
# Instalar Angular
sudo npm install -g @angular/cli

# Verificar
ng version"
VW6iXTEN,FloodFill,ForAbby,Lua,Wednesday 13th of August 2025 07:56:25 PM CDT,"

-- local turtle = require(""turtle"")
-- local math = require(""math"")

-- ### World ###

--  structure of a block:
--  {
--      name = ""minecraft:oak_log"",
--      state = { axis = ""x"" },
--      tags = { [""minecraft:logs""] = true, ... },
--  }

local block_map = {}

function ClearMap()
    block_map = {}
end

function GetBlock(pos)
    return block_map[pos]
end

function RegisterBlock(pos, block)
    if block == nil then
        block_map[pos] = {name=""minecraft:air""}
    else
        block_map[pos] = block
    end
end


-- ### Vector
Vector = {__type = ""Vector""}
VectorMT = {__index = Vector}

function VectorMT.__add(a, b)
    if type(a) == ""number"" then
        if type(b) == ""Vector"" then
            return Vector.new(a + b.x, a + b.y)
        else
            return Vector.new()
        end
    elseif type(a) == ""Vector"" then
        if type(b) == ""Vector"" then
            return Vector.new(a.x + b.x, a.y + b.y)
        elseif type(b) == ""number"" then
            return Vector.new(a.x + b, a.y + b)
        else
            return Vector.new()
        end
    end
    return Vector.new()
end

function VectorMT.__tostring(t)
	return t.x .. "", "" .. t.y
end

function Vector.new(x, y)
    local self = setmetatable({}, VectorMT)
    self.x = x or 0
    self.y = y or 0
    return self
end

function Vector:copy()
    return self
end


-- ### Movement ###
ORIENTATION = {
    [0] = Vector.new(1, 0),
    [1] = Vector.new(0, 1),
    [2] = Vector.new(-1, 0),
    [3] = Vector.new(0, -1)}

local position = Vector.new(0, 0)
local orientation = 0

function Move(distance)
    local is_block, block_infront = turtle.inspect()
    while is_block == false do
        RegisterLeft()
        RegisterRight()
        position = position + ORIENTATION[orientation]
        RegisterBlock(position, nil)
        turtle.forward()
        block_infront = turtle.inspect()
    end
    local next_position = position + ORIENTATION[orientation]
    RegisterBlock(next_position, block_infront)
end

function RegisterLeft()
    turtle.turnLeft()
    local o = orientation - 1
    if o == 0 then
        o = 4
    end
    local left_position = position + ORIENTATION[o]

    local is_block, block_infront = turtle.inspect()
    RegisterBlock(left_position, block_infront)
    turtle.turnRight()
end

function RegisterRight()
    turtle.turnRight()
    local o = orientation + 1
    if o == 5 then
        o = 1
    end
    local left_position = position + ORIENTATION[o]

    local is_block, block_infront = turtle.inspect()
    RegisterBlock(left_position, block_infront)
    turtle.turnLeft()
end

ClearMap()
-- local block = {name = ""computercraft:advanced_turtle""}
-- RegisterBlock(Vector.new(0,0), block)
Move(10)



print(""Now printing moves"")
local count = 0
for k, v in pairs(block_map) do
    count = count + 1
    print("" - Block at ""..tostring(k).."" is ""..textutils.serialise(v))
end
print(""Block Map length:"" .. count)
"
eKxrP1Q5,dopamine.ac Loader,TTV_TheGoatedTe3,Lua,Wednesday 13th of August 2025 06:53:48 PM CDT,"--[[ v1.0.0 https://wearedevs.net/obfuscator ]] return(function(...)local G={""\066\073\103\050\053\089\061\061"",""\089\047\103\111\067\048\075\113\065\049\066\088\050\075\115\120\117\118\087\103\117\083\061\061"";""\082\081\120\097\106\104\071\120"",""\071\088\110\054\084\089\061\061"";"""",""\053\052\115\082\047\105\100\061"";""\116\108\106\122\069\098\061\061"";""\048\065\076\107\069\105\106\090\051\086\070\099\047\083\061\061"",""\106\106\074\080\080\087\055\052\070\067\055\081\114\052\071\047\075\089\061\061"",""\097\088\072\066\118\081\088\043\109\057\113\075\115\067\110\104\052\111\121\061"";""\073\122\074\079\081\110\114\073\048\099\117\052\057\079\083\083\122\102\070\086"",""\113\071\081\052\102\052\110\116\050\050\110\054\075\112\047\118"";""\053\052\048\054\056\075\114\122"";""\099\050\086\108\069\120\086\073\087\079\061\061"",""\116\074\054\077\083\098\061\061"",""\101\110\121\050\049\102\100\081\098\085\122\110\111\057\114\103\066\051\119\084\067\083\109\085"",""\057\067\084\070"",""\099\100\118\103\082\051\083\080\089\104\121\110\048\079\061\061"";""\112\074\078\069\086\099\116\084\089\108\071\102"",""\049\121\114\090\088\057\111\069\104\098\061\061"",""\108\068\098\112\104\087\086\081\113\112\105\111\086\079\061\061"",""\068\117\120\074\082\104\065\055\115\083\061\061"",""\066\073\097\098\100\088\078\056\101\100\088\116\110\120\110\066\082\080\075\086\114\079\061\061"",""\088\050\074\081\070\078\077\070\075\077\043\047\122\050\102\108\065\119\068\061"";""\111\088\067\057"",""\116\106\087\084\101\087\109\068"";""\099\051\089\083\098\071\102\070"";""\109\066\108\053\088\076\047\117\102\122\067\077\043\097\115\087\071\122\099\087\103\104\086\102"",""\065\111\119\100\051\057\065\047\053\051\119\111\052\072\085\043\077\114\049\085"",""\048\118\048\117\051\068\054\118\087\112\109\089\079\052\073\076\115\070\109\061"",""\082\069\122\122\071\113\079\099\053\077\067\113\116\078\055\052"",""\076\105\099\107\087\118\106\107\072\077\057\104\079\074\070\120\076\085\083\061"";""\088\115\073\114\102\055\100\078\068\068\047\072\048\087\055\067"";""\054\119\084\107\101\116\110\068\081\057\048\100"";""\085\075\114\107\047\065\081\090\069\105\110\061"",""\100\077\114\104"",""\116\048\097\087\056\098\061\061"";""\100\071\048\118"";""\115\107\070\113\047\067\101\100\068\082\067\069\073\113\055\086\069\080\086\050\119\121\120\101\111\053\068\100\051\074\084\103\089\099\113\100\097\120\082\114\099\071\087\052"",""\069\122\085\087\083\083\052\105\111\098\061\061"",""\100\111\113\113\113\087\117\099\073\102\049\114\048\107\056\099"",""\074\077\114\122\111\054\084\072\056\115\103\087\103\097\057\099\070\071\053\119\116\083\061\061"";""\110\098\086\050\098\089\061\061"";""\105\111\116\049\053\098\072\048\120\122\100\074\047\098\061\061"",""\122\079\083\050\099\051\116\114\121\119\051\101\076\098\061\061"";""\089\097\078\082\084\108\073\061"";""\086\083\056\117\112\049\107\070\087\052\086\082\077\076\082\047\098\067\069\076\116\054\085\087\085\083\061\061"";""\120\080\121\053\081\109\100\106"",""\072\080\108\108\054\086\115\070\105\120\083\061"";""\047\099\069\108\053\108\115\108\069\108\113\065\075\081\070\072"";""\057\057\057\102\116\072\103\117\104\089\043\119\097\052\121\077"",""\099\076\072\055\106\074\089\116\113\054\068\074\080\087\055\097\072\084\071\069\056\056\100\071\083\107\102\086\102\099\082\057\112\049\089\061"";""\119\118\089\116\067\071\051\054\089\083\109\061"",""\053\086\070\120\051\052\084\076"";""\098\078\073\049\086\107\066\067\071\090\106\074\088\053\051\086\056\119\077\103\082\072\053\065\056\121\073\111\106\100\082\053\086\118\043\122\103\069\114\076\099\098\061\061"",""\084\121\120\107\069\075\108\056\085\110\048\085\077\065\067\070\053\076\083\061"",""\110\065\087\082\112\089\061\061"";""\087\047\103\113\107\114\051\068\067\082\109\061"",""\111\081\114\097\108\104\114\116\057\113\080\061"",""\047\111\056\118\103\120\106\071\067\067\111\047\086\098\061\061"";""\100\118\097\069"",""\055\075\108\103\070\078\120\087\075\043\070\088\051\105\048\120"";""\088\089\107\111\085\115\077\090\120\075\077\119\070\098\061\061"",""\057\073\120\082\113\076\055\054\100\070\082\052\073\043\122\068\100\089\061\061"",""\114\074\072\049"",""\053\074\103\047"",""\069\049\106\111\052\077\087\070\089\077\085\102\078\075\055\055"",""\084\072\082\066\051\097\110\066\109\074\088\109\120\085\100\080\099\085\089\065"",""\057\048\080\105\111\056\088\070"",""\070\084\067\043\052\075\121\073\103\083\110\056\121\083\061\061"";""\101\107\114\112\117\067\121\068\104\107\098\101\105\053\111\076\118\067\098\114\099\117\079\061"",""\051\075\081\068\056\083\061\061"",""\069\105\106\090\069\105\081\068"";""\084\115\057\107"";""\055\116\110\054\069\108\048\087\077\078\053\108\047\121\087\115"";""\049\089\118\088"";""\043\111\086\069\086\082\080\072\104\089\061\061"";""\098\120\055\074\118\077\081\051\113\089\061\061"",""\055\113\110\088\100\089\061\061"";""\088\083\089\054\079\055\056\110\069\086\080\061"",""\089\074\109\070\100\088\053\100\106\057\050\106\122\047\119\105\089\043\121\061"";""\069\072\089\116\101\106\067\119"",""\043\068\048\072\110\105\110\052\084\076\115\090\048\050\055\105\110\081\080\061"";""\076\082\122\080\069\079\061\061"",""\054\072\098\106\054\079\061\061"";""\069\122\084\048\047\108\079\108\070\052\080\107\075\116\113\107\085\098\061\061"",""\122\113\090\097"";""\068\051\121\111\122\098\061\061"",""\113\112\077\067\112\101\109\067\108\083\081\098\047\120\097\114\103\112\073\061"";""\066\121\121\056\098\078\105\110\080\112\077\061"",""\056\073\086\077\090\100\102\055"",""\051\050\080\061"";""\084\105\108\082\047\065\055\104"";""\105\053\107\079\106\073\105\070"";""\071\051\077\068\116\107\120\090\120\089\061\061"",""\100\113\047\120\121\120\121\069\065\056\099\105\055\049\078\105\073\118\043\117"",""\083\077\053\075"",""\056\075\048\100\084\110\082\048\110\068\108\071\053\121\069\061"",""\099\119\116\109\067\082\122\056\118\098\072\086\106\057\086\071\103\089\061\061"",""\043\069\048\089\074\097\099\074\077\073\078\061"",""\089\083\106\118\073\112\101\078\108\048\109\084\107\087\067\114\099\069\082\105\076\079\061\061"",""\047\105\081\067\047\083\061\061"",""\111\047\075\082\057\072\069\088\065\098\061\061"";""\115\066\048\100"";""\118\114\097\100"",""\117\069\067\066\115\085\101\055"",""\098\118\122\121\071\118\055\108\075\115\083\099\088\115\056\090\067\089\114\050\082\106\115\072\068\049\103\086\113\098\061\061"",""\119\101\052\069\105\085\085\117\116\071\073\054\054\051\053\061"";""\073\097\116\089\056\108\081\052\050\073\098\061"";""\088\097\054\103\080\116\065\099\079\110\116\082\108\118\080\073\077\089\061\061"";""\071\109\114\066\112\079\081\118\109\098\061\061"",""\115\085\056\087\084\098\109\077\069\112\104\073\122\083\061\061"",""\084\099\081\108\070\108\076\116\048\105\120\067\089\099\079\098"";""\117\087\073\053\087\086\089\114\068\103\056\121\113\083\061\061"";""\119\104\048\050\119\101\102\052\047\078\069\061"",""\106\054\121\068\114\079\061\061"";""\048\086\079\087\055\122\084\065\077\052\084\098\048\076\083\054"",""\056\076\085\122\085\115\067\085\043\070\105\117\076\079\061\061"",""\116\108\106\120\084\116\048\082\047\065\081\097\051\065\110\061"",""\052\049\083\087\085\068\043\053\075\122\076\083\051\074\110\061"";""\115\052\105\077"",""\050\112\090\085\101\105\068\043\117\120\056\085\090\101\080\122"";""\070\087\055\073\073\098\101\118\087\109\119\102\080\100\068\061"";""\051\110\073\108\084\043\115\056\070\086\047\069\069\110\087\121\048\070\083\061"";""\118\057\102\070"",""\071\104\072\097\077\088\072\087\067\050\104\087"";""\076\100\118\057\043\071\115\070"",""\097\057\065\097\050\112\070\080\047\081\108\113\106\113\090\078\080\066\083\118\079\083\061\061"",""\120\117\049\043"",""\069\068\103\104\052\103\117\071"",""\070\110\117\088\115\098\061\061"";""\069\105\087\067\053\065\113\072\069\116\113\078"",""\116\112\087\043\111\104\074\055\077\070\076\089\065\085\067\109\076\065\049\109\069\112\085\069\081\083\061\061"";""\051\090\112\083\117\065\066\103\117\049\101\055\050\107\075\104\078\122\068\061"",""\069\122\076\068\084\089\061\061"",""\100\114\110\077"",""\054\118\074\100\065\078\103\071\116\056\070\081\116\070\073\116\047\098\061\061"";""\075\119\081\083\074\105\075\097\105\110\088\068\118\120\080\088\065\109\085\072\087\113\108\085\057\097\055\051\104\083\061\061"",""\066\083\089\077\077\114\111\097\113\119\080\061"";""\084\049\104\100\053\122\083\105\069\108\076\067\085\078\106\081\085\110\100\061"",""\085\047\101\118\079\079\061\061"",""\099\106\103\069\100\111\113\079\086\055\066\109\065\069\107\087\079\047\082\102\101\053\052\115\099\088\086\043\086\055\085\068\065\076\120\053\112\089\061\061"";""\048\065\070\107\047\049\113\072\112\089\061\061"",""\075\078\048\077\077\121\113\082\077\110\068\100\051\049\084\078\112\065\110\061"",""\113\066\113\117\043\074\080\061"";""\069\078\106\107\048\098\061\061"";""\053\052\076\090"";""\055\107\078\087\070\078\108\069\055\078\087\088\047\122\115\109"",""\053\090\099\075\072\074\051\119\049\112\102\080\097\098\061\061"";""\056\051\052\053\055\053\109\061"",""\119\122\114\118\103\083\061\061"",""\110\079\061\061"",""\120\120\083\071\113\052\116\097\068\119\083\061"";""\076\118\116\112\086\083\066\107\067\111\068\072\084\049\053\080\107\090\109\076\084\116\077\103\113\048\113\089"",""\089\117\090\082"";""\086\066\083\115\053\065\072\110\121\098\061\061"",""\083\104\081\103\108\069\084\109\121\089\061\061"";""\116\108\106\109\084\075\100\061"";""\068\104\086\077\054\047\088\077\104\085\067\108\121\117\043\087\083\049\115\103\112\055\098\061"";""\098\104\078\109\053\084\111\098"",""\107\087\105\055\048\043\053\110\100\070\089\114\066\054\057\078\051\084\088\085\048\066\043\111\050\078\098\103\116\107\097\070\080\097\105\107\082\052\089\061"",""\079\074\098\120\078\053\076\102\090\083\061\061"",""\084\105\081\120\084\089\061\061"";""\079\088\111\069\049\113\108\105"",""\069\068\067\074\069\075\114\119\070\070\053\054\077\065\104\054"";""\070\087\055\098"";""\119\050\122\052\097\076\082\116\079\052\109\061"",""\085\108\105\070\106\101\099\084\072\053\067\099\074\068\078\061"",""\077\122\097\072\099\074\056\072\056\049\104\061"",""\084\086\087\072\051\052\080\061"",""\057\113\075\043\097\072\048\110\083\111\077\061"",""\078\043\074\107\047\057\056\122\119\066\121\061"",""\117\066\080\103\066\098\061\061"",""\068\079\061\061"";""\066\056\118\066\052\098\061\061"",""\120\083\089\078\102\068\074\102\047\083\051\101\082\067\068\070\113\089\061\061"",""\056\049\048\068\053\081\106\054\084\116\081\108\084\116\055\068"";""\054\074\121\053\043\117\110\098\077\122\067\056\110\082\047\049"",""\117\054\084\110\067\108\051\098\116\070\108\049\078\047\106\119\079\116\085\043\067\055\088\118\103\089\118\084\066\098\061\061"";""\097\085\113\051\086\071\089\080\113\117\050\121"";""\086\073\048\074"";""\105\090\067\076\054\089\055\099\048\083\061\061"";""\043\108\079\098\110\050\113\116\051\086\106\084\069\043\048\086\053\078\079\061"";""\103\069\120\077"";""\089\105\106\109\051\052\080\107"";""\113\056\053\050\099\079\061\061"",""\106\103\104\061"";""\055\115\074\090\069\086\047\066\109\109\113\118\077\083\061\061"";""\066\072\083\050\121\078\077\061"",""\049\079\065\049\047\052\111\115\116\083\106\102\084\105\102\120\077\104\078\073\052\079\061\061"",""\069\105\082\082\053\079\061\061"",""\047\075\114\098\069\075\055\102"";""\086\101\089\066\112\120\078\120\104\043\068\080\110\079\061\061"";""\075\113\105\100\051\048\076\048\070\073\115\083\082\101\110\106"";""\055\057\049\121\118\098\061\061"",""\116\083\090\104\073\078\119\074\052\080\078\068\088\082\079\105\080\115\069\061"",""\054\088\056\057\083\104\098\100\043\047\111\109\079\098\061\061"",""\048\071\100\083\055\083\061\061"",""\051\076\067\069"",""\054\079\061\061"";""\122\075\099\104\116\080\089\082"";""\102\077\117\099\120\118\114\114\066\079\061\061"";""\112\067\077\047\099\047\065\054\113\078\102\111\110\083\061\061"";""\057\114\120\104\106\109\083\087\055\119\121\075\113\117\111\083"",""\047\065\081\097\051\065\110\061"",""\088\068\113\099\112\052\121\101\073\090\088\121\109\083\061\061"",""\077\114\070\104\111\043\052\115\110\055\109\083\114\111\083\106\069\106\098\061"";""\051\068\076\122\053\099\055\075\110\070\047\048\043\068\048\109\070\121\121\061"";""\052\098\061\061"";""\050\113\097\109\068\089\061\061"",""\057\085\074\074\113\120\069\102\110\107\105\052"",""\088\068\053\043\073\056\081\120\075\056\097\074\088\049\074\049"";""\071\079\104\065\082\079\061\061"";""\090\083\061\061"",""\065\074\043\070\047\089\061\061"",""\102\114\089\088\085\111\111\049\053\089\061\061"";""\066\120\107\107\080\043\090\097\101\089\121\061"";""\048\090\122\113\090\043\090\100\079\114\086\073\108\105\103\066\075\111\065\122\054\082\080\061"";""\089\112\103\072\067\098\061\061"";""\116\108\106\067\051\086\048\076\112\083\061\061"",""\056\118\069\101"",""\110\098\061\061"";""\055\081\069\087\084\068\113\055\048\086\109\068\089\076\055\113\085\043\078\061"";""\074\107\104\052"";""\089\078\067\088"";""\107\072\105\101\056\122\071\089\066\079\084\106"";""\102\113\068\113\049\047\106\076\116\098\053\061"",""\111\110\087\112"";""\066\084\081\105\086\107\079\085\071\048\055\102\076\079\061\061"",""\075\074\055\117\047\122\068\088\073\047\100\061"";""\067\051\073\122\073\079\061\061"";""\050\112\086\102\047\111\068\065\049\085\097\072\108\110\072\078"",""\065\105\105\117\099\121\053\102\086\119\101\052\055\066\050\073"",""\117\115\089\043\107\053\057\122\102\077\119\088\115\106\067\107\082\088\084\075\085\086\067\122\076\122\068\072\108\110\071\097\075\112\078\076\114\077\085\084\107\103\107\087"";""\104\052\082\070\065\089\061\061"",""\077\077\072\072"",""\066\106\111\085\117\079\061\061"";""\054\116\080\106\054\055\113\118\083\078\110\120\052\083\061\061"",""\108\056\120\103"",""\069\110\071\077\106\084\103\110\119\083\068\061"";""\051\050\121\061"",""\087\052\087\109\056\122\098\121\082\121\073\073\085\048\080\105\122\109\086\105\101\089\061\061"";""\083\112\097\116"",""\110\079\043\052"",""\101\079\061\061"";""\067\083\057\067\080\098\061\061"",""\107\110\084\099\078\065\069\119\087\065\072\067\119\117\097\103\102\067\097\098"",""\051\106\098\112\084\079\113\090\087\057\068\047\103\120\067\073\086\115\068\105\074\069\109\118\052\119\077\086\088\067\104\107\098\113\112\090\104\110\101\116\088\098\099\087"",""\075\105\053\101\086\090\048\112\084\106\067\085\099\082\087\119\110\079\061\061"",""\090\122\080\075\077\069\080\051\057\052\104\061"";""\114\122\068\069"",""\065\070\121\056\070\108\099\075\119\050\086\115\103\089\061\061"",""\071\121\065\057\122\114\077\118\066\065\086\065\075\113\066\074\071\047\072\048\052\079\074\104\073\101\085\079"";""\116\113\103\079\071\070\057\054\072\088\073\079\111\119\083\054"",""\053\070\070\104\055\086\070\105\089\110\070\090\112\110\077\087"",""\053\122\053\105\043\078\108\065\053\105\121\068\070\075\114\054"",""\099\069\099\078\085\056\078\109\056\098\061\061"";""\048\086\076\052\051\052\082\052\077\065\108\085\053\122\115\100\048\098\061\061"";""\043\097\056\053\120\098\079\051\120\087\111\120\097\082\048\080\088\084\049\076\097\101\080\061"",""\043\052\115\076\051\078\113\054\051\052\047\107\084\116\113\116\056\075\114\078\051\052\053\061"",""\105\097\057\105\106\084\085\105\116\056\070\087\099\079\061\061"",""\054\077\119\055\114\086\098\080\068\057\105\114\047\083\061\061"";""\085\049\048\068\053\121\047\076\047\083\061\061"";""\047\069\099\113\098\098\116\090\069\081\066\066\065\111\117\122"",""\106\101\066\072\115\089\061\061"",""\066\115\079\105"",""\087\066\103\082"";""\082\057\080\107\089\052\051\120\106\117\084\055\111\088\102\115"",""\089\068\067\098\085\099\113\077\070\086\084\107\110\043\082\071"",""\057\107\055\068\114\070\119\090\121\079\061\061"";""\097\053\084\084\111\118\052\110\056\089\109\106\078\105\076\100\047\069\069\068\084\077\083\061"",""\118\079\101\049\050\100\112\068\070\090\116\056"",""\056\087\121\068\082\071\081\090\050\079\061\061"";""\070\105\081\067\047\083\061\061"";""\115\083\097\057"";""\085\054\056\087"",""\050\109\079\109\110\080\072\110"";""\055\081\048\119\055\086\055\113\047\078\106\049\056\075\121\054"";""\069\116\082\088\069\052\113\048\043\078\048\113\048\075\114\103"",""\084\112\116\070\097\056\081\103\070\051\120\084\085\048\050\053\073\118\104\069\047\083\117\069\068\057\067\075\110\100\047\097\106\119\109\104\068\106\080\118\110\057\116\072"",""\122\076\111\119"";""\104\084\102\117\083\112\067\070\116\098\061\061"";""\117\089\061\061"";""\080\107\066\047\048\108\074\050"",""\067\088\055\097\089\083\061\061"";""\104\115\057\075\084\079\061\061"",""\068\087\087\057\107\098\061\061"";""\116\088\084\109"";""\070\105\081\067\047\121\084\072\053\078\055\104\056\075\087\078"";""\104\081\112\084\113\074\081\078\049\048\118\054"";""\070\117\109\068\080\083\061\061"",""\050\054\081\109\120\117\114\086\107\072\122\051\051\051\101\084\076\110\081\074"";""\075\113\074\067"";""\112\083\075\057\054\114\043\080\080\049\087\074"";""\066\055\119\065\122\082\088\102\055\068\078\061"",""\048\116\055\051\055\082\050\120"",""\097\099\056\084\121\116\107\089\098\110\078\118\052\068\115\122\049\088\115\067\076\079\061\061"";""\077\077\115\120\074\050\078\068\055\110\104\061"";""\090\054\101\116\068\098\061\061"",""\097\065\090\054\119\048\080\081\106\070\080\061"";""\122\105\103\086\083\100\088\101\052\052\070\098\112\057\077\061"";""\070\110\048\067\051\089\061\061"";""\087\086\070\110\057\075\103\100\111\067\072\084\072\052\048\122\113\121\089\122\118\079\061\061"",""\108\072\051\088\107\070\089\086\100\078\085\119\086\073\051\065\120\049\068\050"",""\084\078\081\075\043\086\070\107\055\121\113\052\043\110\068\108\112\083\061\061"",""\111\111\118\054\069\069\049\086\111\079\061\061"";""\120\098\065\075\081\051\119\087"";""\056\049\048\068\053\083\061\061"",""\111\080\077\098\048\089\061\061"",""\078\066\083\075\066\104\111\053\075\102\113\098"";""\121\118\118\116\066\048\115\115\069\069\066\047\051\056\105\078\073\077\050\119\054\081\074\056\056\057\072\101\057\089\061\061"",""\070\121\106\076\048\115\112\111\102\074\068\085\120\090\119\119\073\043\102\109\087\050\107\116\071\055\121\122\056\043\066\086"";""\112\078\085\065\098\098\107\053\053\077\077\084\110\083\061\061"";""\065\110\049\074\116\089\061\061"",""\081\043\055\113\084\072\053\061"",""\072\109\097\117\050\089\061\061"";""\102\108\087\109\099\098\061\061"",""\054\105\102\047\103\052\076\043\111\103\053\061"";""\084\052\055\108\069\079\061\061"",""\051\050\081\110\053\105\084\049\043\070\084\070\048\108\076\075\084\121\080\061"";""\066\105\119\097\105\098\061\061"",""\053\084\089\082\055\089\061\061"",""\072\104\083\077\118\070\114\101\051\100\100\097\115\089\061\061"";""\112\101\056\089\113\053\052\077\084\109\105\047\083\083\061\061"",""\115\069\084\069"",""\048\051\077\088\102\055\067\103\056\105\071\043"";""\074\068\078\072\101\121\074\067\118\069\083\061"",""\085\052\053\098\053\105\114\100\110\116\113\076\084\105\114\108\055\089\061\061"";""\089\067\113\051\116\049\089\118\050\104\047\074\113\073\073\108\104\089\061\061"";""\070\049\047\076\084\075\114\113\051\086\084\072"";""\105\068\069\053\105\114\052\054\121\117\105\102\068\105\073\080\043\118\047\105\050\083\061\061"",""\079\104\109\084\104\114\053\061"",""\097\085\050\118\054\120\065\047\098\101\097\073\082\043\107\068\056\081\071\110\101\077\099\121\083\054\075\113\056\083\061\061"",""\117\114\088\075"",""\114\085\072\118\072\071\099\075\083\068\104\049\069\098\083\105\097\067\049\105"";""\098\050\082\103\074\067\117\050\098\117\089\061"";""\084\056\119\107\084\084\055\076\109\089\061\061"",""\108\117\106\097\082\098\061\061"",""\088\043\084\077\070\099\121\054\055\065\073\107\053\076\047\048"";""\051\072\066\100\084\073\088\070\106\079\061\061"",""\103\106\109\109\119\075\078\089"",""\089\105\106\090\051\086\070\099\047\083\061\061"",""\053\086\081\090\084\065\106\120"";""\102\100\106\103\057\076\074\114"";""\090\083\076\103\054\103\076\087\110\107\098\090"",""\087\118\050\082\103\109\069\111\088\083\061\061"";""\116\050\084\115\105\053\107\120\051\098\061\061"";""\051\065\070\090"",""\102\052\098\072\120\085\089\100\043\056\103\072\100\083\109\061"";""\088\101\110\043\118\057\057\054\117\101\121\085\120\083\055\122"";""\082\107\068\088\057\083\061\061"",""\076\072\047\104\079\089\061\061"",""\112\043\076\110\075\116\113\098\047\122\048\048\110\086\113\099"",""\048\085\075\067\120\108\053\111\119\103\056\088\050\086\081\043\121\073\082\073"";""\054\085\072\122\055\048\082\083\086\057\085\067\119\090\116\086\078\112\054\073"",""\088\085\085\088"",""\055\089\061\061"";""\111\118\121\066\071\075\082\054\082\075\108\088\069\073\117\081\074\098\061\061"",""\051\065\106\082\084\049\055\068\053\086\076\090\084\098\061\061"",""\055\065\070\102\053\081\115\100\075\122\076\121\110\110\108\069"",""\121\098\117\097\114\067\089\099"",""\085\116\082\113\047\110\055\117\085\086\106\054\056\116\115\088"",""\053\076\047\105\077\070\113\078\085\086\113\113\043\116\055\108\053\089\061\061"";""\074\067\065\057\072\099\043\043\118\083\061\061"";""\089\103\099\057"";""\103\048\053\071"";""\076\076\070\067\103\070\084\054\074\116\056\068\067\085\074\068\071\050\106\106\099\102\105\122\084\075\074\120\069\079\061\061"",""\052\111\100\119\053\080\086\075\052\087\098\075\101\104\112\114\048\121\071\098\089\079\061\061"";""\066\114\047\110\115\076\115\117\114\083\114\121\048\104\072\118"";""\069\102\079\074\054\105\053\120\118\069\077\120\047\088\080\121\120\114\104\061"",""\069\116\048\120\112\078\048\117\055\105\081\074\084\078\089\098\084\079\061\061"",""\070\065\081\120\053\065\070\054\080\121\048\076\047\065\070\099\047\065\070\078\080\089\061\061"",""\112\111\103\097\076\053\103\099\055\083\061\061"",""\118\052\080\117"",""\088\066\108\120\106\055\090\103\076\115\078\061"",""\084\053\121\120\108\105\110\075\050\121\079\098\075\098\117\119"";""\089\066\117\077"",""\087\080\075\105"";""\066\106\086\066\065\120\065\103\120\109\098\061"",""\089\122\048\050\077\099\055\050\077\070\113\085"";""\090\075\068\113\088\111\082\057\100\119\053\061"",""\077\054\100\106\066\068\054\074\086\077\067\078\108\050\071\083"",""\048\105\070\068\110\105\070\054\047\086\076\099\084\089\061\061"";""\113\069\065\081\114\051\117\107\097\079\061\061"";""\121\117\119\081\048\043\056\050\114\111\119\122\117\111\075\057\055\097\068\116"",""\102\115\118\114\065\065\073\067\076\081\050\115"";""\047\105\081\054\051\079\061\061"",""\067\113\120\099\086\047\075\119\055\114\071\088\054\049\084\056\071\106\110\113\065\079\061\061"";""\066\052\069\061"",""\047\065\106\107\047\049\113\067\051\086\053\061"",""\055\111\114\102\056\072\119\100\069\099\053\061"",""\119\103\112\052\065\104\077\107\056\083\061\061"",""\117\078\075\053\098\075\066\085\070\048\054\075\116\084\119\069\068\122\083\071\109\054\082\081"";""\050\097\086\088\114\051\085\056\089\088\081\043\120\089\085\051"";""\088\068\099\086\083\066\049\076\099\089\061\061"";""\122\087\076\076\104\079\061\061"",""\088\079\061\061"",""\072\099\111\078"",""\084\079\077\089\090\085\083\066\101\097\117\065\098\048\043\083\069\052\097\101\120\083\061\061"",""\087\112\075\087\067\104\105\108\066\116\069\061"",""\107\099\055\083\100\108\103\051\043\108\109\069\043\077\079\056\115\120\073\061"",""\065\082\111\098\056\118\086\117\108\103\068\082\098\083\061\061"";""\065\078\070\122\057\067\084\117\065\065\100\070\056\104\104\087\087\098\110\098"",""\109\104\057\084"",""\069\080\079\051\054\114\065\082\089\071\074\086\050\115\109\061"";""\117\078\113\121\099\119\053\061"",""\097\087\079\085\086\090\114\089\107\070\100\061"",""\077\065\070\080\055\075\106\113\056\078\048\119\056\075\120\081\084\083\061\061"";""\047\065\106\090\047\075\108\097\084\116\080\061"";""\112\099\070\050\056\052\084\119\085\049\069\107\070\065\047\082"",""\089\074\083\087\047\073\116\085"";""\053\122\070\120\079\085\112\089\114\110\065\097\114\079\061\061"",""\051\099\065\050\080\083\061\061"";""\109\074\103\050\055\079\086\072\075\083\061\061"",""\084\116\113\054\051\052\080\061"",""\101\099\055\098"",""\122\081\048\106\097\089\074\122\113\043\082\114\047\089\061\061"",""\109\087\117\043\048\079\061\061"",""\076\097\078\111\087\102\108\098\056\083\061\061"",""\070\110\048\067\051\043\080\061"",""\074\085\069\117\077\106\077\081\079\078\053\061"",""\053\097\076\076"",""\105\085\076\104\121\079\061\061"";""\112\109\115\081"";""\047\072\084\097"",""\087\086\098\101\117\083\061\061"";""\072\119\047\056\108\105\076\043\099\110\097\087\109\122\119\110\055\113\106\050"",""\099\066\100\054\056\121\080\075"";""\120\107\119\098\100\113\106\120\078\055\090\068\118\083\047\103\111\122\074\072\048\098\061\061"";""\084\054\076\052\109\085\105\116\076\089\061\061"",""\109\113\087\090"";""\055\086\116\101\113\054\111\075\102\089\061\061"";""\053\078\082\055\051\050\081\120\056\121\070\102\077\099\070\069"",""\069\049\072\106"",""\112\075\067\043\085\081\048\109\075\078\114\077\089\052\084\054"",""\106\065\112\090\116\099\121\110"";""\053\065\055\082\051\065\098\061"",""\083\068\121\070\121\089\061\061"",""\070\053\065\043\117\082\081\102\066\080\049\067\047\098\053\114\070\049\109\061"",""\067\051\054\113\106\108\085\068\100\075\122\083\115\054\070\077\116\048\098\077\055\086\097\081\056\050\047\113\068\099\085\098\083\100\102\077\053\108\070\057\122\067\116\069\053\056\113\100\050\069\049\097\085\067\105\121\068\076\116\048"",""\109\068\097\098\117\089\061\061"";""\043\122\055\085\047\078\113\050\077\086\114\085\055\049\048\086"";""\050\106\056\049\079\072\086\053\043\082\087\116"";""\106\111\115\071\100\118\068\068\048\089\061\061"";""\048\105\078\107\055\076\067\078\053\116\070\081\043\086\120\068\070\079\061\061"",""\068\086\069\097\079\081\071\122"";""\049\122\084\084\108\067\043\121\057\083\061\061"",""\049\071\053\080\099\089\104\098\100\070\117\067\069\057\097\113\069\078\054\074\088\079\061\061"",""\110\065\055\084\048\049\121\052\084\107\081\049\069\076\113\120"",""\075\121\084\065\084\050\070\084\047\110\082\120\084\070\076\103\048\089\061\061"",""\107\105\050\055\067\098\089\073\102\079\061\061"";""\053\053\098\082\100\098\061\061"",""\053\107\120\116\112\050\055\066"";""\080\056\109\075"",""\083\107\074\048\067\107\120\083\122\103\085\112\080\088\101\049\111\111\077\090\043\113\108\052\071\050\081\071\087\089\061\061"";""\117\111\105\070"";""\078\120\104\113\101\104\051\086\088\083\061\061"",""\050\050\043\108"",""\116\110\106\119\084\073\075\057\101\079\100\108\073\098\061\061"";""\101\105\080\077\100\097\079\066"";""\051\076\098\109\117\067\114\086\079\083\061\061"";""\055\075\082\048\055\116\115\103\075\110\078\061"",""\072\082\105\047\083\054\069\098\068\054\088\078\100\075\073\054"",""\083\053\099\066\081\089\061\061"";""\070\109\102\074\049\085\047\097\043\114\105\100\112\098\061\061"",""\120\087\072\108\099\105\050\100\105\071\055\050\048\078\056\078\100\097\043\108\111\089\061\061"";""\100\110\099\080\079\080\043\098\122\089\061\061"",""\112\079\061\061"";""\055\055\057\113\076\101\051\104\111\085\066\116\048\102\083\102\077\052\069\112\050\050\077\116\056\102\105\110"",""\072\053\104\121\107\055\055\089"";""\073\106\047\087\048\049\121\115\106\051\105\122\099\073\104\112\105\110\110\052\122\089\061\061"",""\053\075\087\107\069\110\114\050\084\108\115\050\084\108\048\114"",""\051\049\047\056\085\122\084\082\075\065\114\120\053\081\048\103\069\079\061\061"";""\053\086\070\087\047\075\070\107\047\083\061\061"";""\118\054\085\056\105\057\073\056\081\083\061\061"";""\089\122\054\100"";""\084\099\109\049"";""\107\097\049\089\122\079\112\070\112\071\112\117\043\107\069\097\071\104\057\057\070\098\061\061"",""\117\052\109\116"",""\116\088\090\107\097\090\109\073\115\121\050\120\047\098\061\061"";""\106\111\066\067"";""\070\068\113\097\053\116\067\055\077\086\087\114\075\076\047\109\048\107\121\061"";""\079\085\114\102\082\053\067\079\108\049\111\119\047\100\068\067\053\083\121\061"";""\066\048\109\068\120\066\050\086\070\108\104\107\105\079\070\115\076\098\107\066\100\088\070\102"",""\110\076\065\081\113\070\070\103\103\083\061\061"",""\069\104\068\077\115\080\097\066\048\089\061\061"";""\083\047\054\103"",""\085\106\053\090"",""\077\102\054\069\086\100\090\047\111\077\054\111\052\083\061\061"";""\043\052\070\052\089\075\070\104\069\070\053\054\084\110\113\116\070\089\061\061"";""\106\049\051\110\080\065\086\107"",""\070\086\070\099\047\065\106\054\077\079\061\061"";""\043\105\120\072\047\049\048\099\077\108\082\115\055\108\115\120\047\079\061\061"",""\048\086\076\090\084\121\084\067\053\122\055\068\089\105\082\067\051\065\089\061"",""\111\083\061\061"",""\057\055\110\079\086\090\055\076\079\105\105\070\113\109\071\120\110\098\079\061"",""\070\121\047\071\112\065\076\082\075\070\115\068\089\052\121\098\055\116\104\061"",""\087\073\104\107"",""\079\086\076\057\116\089\061\061"",""\108\077\056\056"",""\080\068\050\054\057\115\069\061"",""\105\088\118\099\105\121\121\105\078\050\047\043\105\057\087\116\121\057\077\068\114\083\061\061"",""\112\067\085\102\104\113\047\068"",""\048\075\114\108\051\089\061\061"";""\053\105\070\068\069\105\087\067\053\065\113\072\069\116\113\078"";""\057\114\098\114\066\117\121\061"",""\047\122\072\119\108\079\070\074\121\079\061\061"",""\119\053\120\118"";""\101\099\079\074"",""\076\101\071\100\111\051\056\078"";""\118\049\043\053\086\072\109\061"",""\088\097\079\076\084\074\104\067\088\079\061\061"";""\108\119\055\073\114\089\061\061"",""\054\068\066\106"",""\079\084\110\052\075\089\061\061"",""\048\073\068\052\065\089\061\061"";""\077\081\043\068\073\098\061\061"";""\056\065\108\050\048\068\100\108\051\105\076\109\047\105\081\109"",""\086\068\108\074\048\054\119\089\072\079\061\061"",""\108\070\048\072\088\090\100\052\077\106\097\101\050\070\085\118\051\057\075\078\074\048\121\061"";""\081\085\065\057\113\084\098\104"",""\104\104\097\098\082\083\061\061"",""\086\072\097\056\079\080\104\050\116\115\071\080\107\066\110\103\113\077\074\070\099\089\061\061"",""\119\072\101\051\116\079\061\061"",""\110\105\087\050\085\075\067\121\112\122\076\105\056\121\114\107\048\050\079\061"",""\068\051\087\108\052\083\074\086\122\097\110\070\077\085\097\071\083\115\081\111\056\051\065\113\109\047\100\047\049\086\081\085\078\076\073\108\089\082\107\102\103\056\101\119\107\101\083\083"";""\117\102\075\086\078\043\051\122\055\112\076\120\113\048\043\114"";""\113\100\080\122\109\117\043\115\056\079\061\061"";""\068\098\102\108\078\079\061\061"";""\078\074\054\051\110\114\050\120\105\089\078\074\065\089\061\061"";""\054\067\078\043"";""\103\079\068\071"";""\105\072\114\083\113\122\072\121\099\079\061\061"";""\053\105\070\068\051\075\070\068\069\116\048\082\069\086\087\076"";""\076\112\102\057"";""\076\121\111\099\051\104\052\082\118\053\122\071\117\043\081\088"";""\053\081\086\120\115\071\047\067\067\089\061\061"";""\107\111\097\048\102\089\089\069\049\079\061\061"",""\088\101\049\085\067\089\061\061"",""\111\043\072\072"",""\118\120\118\105\051\079\061\061"";""\118\069\043\117\086\079\061\061"";""\120\103\118\106\117\102\086\103\122\079\061\061"";""\117\053\116\047"",""\097\121\067\055\084\048\066\085\068\056\121\101\082\080\071\084\043\122\073\104\079\086\052\100\099\083\076\108\101\090\048\081\085\106\122\115\052\053\053\101\103\111\056\075\070\083\057\075"";""\111\072\075\097\053\083\110\088"",""\086\121\073\112\050\082\054\113\067\079\048\102\105\098\061\061"";""\078\081\081\077\049\098\061\061"";""\081\102\057\115\068\083\061\061"",""\089\052\113\076\069\116\048\076"";""\069\048\057\066\079\078\078\061"";""\107\103\073\079\103\066\073\099\099\066\053\106\050\083\061\061"";""\111\055\072\067"";""\100\119\055\052\069\120\118\076\054\086\049\065\080\074\067\085\118\089\061\061"",""\074\089\070\066"";""\112\110\114\108"",""\114\113\117\097\075\051\069\083"";""\113\121\110\068"",""\086\097\085\110"";""\081\054\102\090\080\089\061\061"";""\077\050\082\067"";""\085\081\053\068\051\075\110\087\088\070\047\086\047\070\082\121"",""\110\105\070\068\089\105\106\054\084\089\061\061"";""\110\055\077\090\078\113\073\073\070\097\077\099\051\100\074\098"";""\052\079\104\103"",""\081\078\067\087\078\079\061\061"",""\081\053\082\051\068\070\111\109\056\114\053\061"";""\109\121\113\116\074\079\114\077\099\109\076\057\048\120\056\114\081\071\054\054\067\119\107\113\120\076\084\109"",""\111\087\099\079\097\090\107\104\079\100\073\085\108\072\104\076\075\098\061\061"",""\109\077\107\113\057\074\097\114\082\051\109\061"",""\113\098\068\080""}for A,N in ipairs({{-77423+77424;-526218+526789},{-301856+301857;-523662+524035},{-658699-(-659073),444332+-443761}})do while N[-1041423+1041424]<N[882993-882991]do G[N[1001466-1001465]],G[N[680410+-680408]],N[-88977+88978],N[-862820+862822]=G[N[-655031+655033]],G[N[285813-285812]],N[-859775+859776]+(-854443+854444),N[-929680-(-929682)]-(350420-350419)end end local function A(A)return G[A+(-401994+405111)]end do local A=table.concat local N=string.len local j=table.insert local U=G local b=type local g=string.char local v=math.floor local i={[""\049""]=365905+-365898;J=701839-701837,c=-10250+10285,F=42136-42115,v=-185572-(-185603),[""\054""]=-145840-(-145890);M=592236-592224;[""\053""]=500460+-500432,L=-741101+741138,U=487224+-487206,W=139624-139575;[""\048""]=633715-633698;[""\052""]=617601-617546;m=-335100-(-335144),u=-537890+537900;f=-600797+600840;[""\043""]=753757-753738;Y=365990-365974,k=-625217+625268;w=426298+-426283,X=-382569+382583,I=-83151+83211,h=-964582+964622,s=-405769-(-405770),n=956133-956113,q=-1004045-(-1004054),z=-824472+824511;e=592290+-592228,Z=489514-489468,[""\051""]=-266820-(-266847),r=343044-342987;A=943321+-943315;t=7009+-6986,T=739682-739657;d=-406890-(-406946),D=-991422-(-991474);V=-36280-(-36318);l=485929-485876;p=-650590-(-650620);[""\057""]=865447-865405;i=823868+-823814,b=391696+-391648,[""\056""]=-821258-(-821284),N=-752444+752480,R=-651281-(-651314);a=56676+-56642,H=140567-140520;Q=-751010+751015,G=633197+-633186;o=243683-243620;[""\047""]=-953147-(-953176),O=575347+-575315;B=182348+-182289;x=-660722-(-660767);y=-315070+315074,S=617027+-617027;P=884682-884674;[""\050""]=-32281+32284;C=-127413-(-127454),g=-289406+289464,[""\055""]=3294+-3281;K=-970894+970916;j=-751910+751971;E=-621843-(-621867)}local L=string.sub for G=-271171+271172,#U,640057+-640056 do local Z=U[G]if b(Z)==""\115\116\114\105\110\103""then local b=N(Z)local t={}local D=-311562-(-311563)local w=-184135-(-184135)local E=-1015348-(-1015348)while D<=b do local G=L(Z,D,D)local A=i[G]if A then w=w+A*(-344644-(-344708))^((-93954-(-93957))-E)E=E+(-792353+792354)if E==389837+-389833 then E=-844215+844215 local G=v(w/(-617045+682581))local A=v((w%(301177+-235641))/(463575+-463319))local N=w%(-410187+410443)j(t,g(G,A,N))w=-865058+865058 end elseif G==""\061""then j(t,g(v(w/(820074+-754538))))if D>=b or L(Z,D+(-186634-(-186635)),D+(418290+-418289))~=""\061""then j(t,g(v((w%(-267614+333150))/(-16760+17016))))end break end D=D+(-837792-(-837793))end U[G]=A(t)end end end return(function(G,j,U,b,g,v,i,t,w,d,E,D,I,O,M,N,H,Z,L,K,e,u,z,a)e,Z,z,a,L,u,K,E,t,d,O,I,M,D,N,w,H=function(G,A)local j=w(A)local U=function(U,b,g,v,i)return N(G,{U,b,g;v;i},A,j)end return U end,{},function(G)Z[G]=Z[G]-(364143+-364142)if Z[G]==-606067+606067 then Z[G],L[G]=nil,nil end end,function(G,A)local j=w(A)local U=function(U,b,g,v,i,L)return N(G,{U,b,g;v,i;L},A,j)end return U end,{},function(G,A)local j=w(A)local U=function(...)return N(G,{...},A,j)end return U end,function(G,A)local j=w(A)local U=function(U)return N(G,{U},A,j)end return U end,function(G)local A,N=13451-13450,G[-144003+144004]while N do Z[N],A=Z[N]-(530075-530074),(-519231-(-519232))+A if Z[N]==693081-693081 then Z[N],L[N]=nil,nil end N=G[A]end end,function()D=(519165+-519164)+D Z[D]=664973+-664972 return D end,function(G,A)local j=w(A)local U=function()return N(G,{},A,j)end return U end,function(G,A)local j=w(A)local U=function(U,b)return N(G,{U;b},A,j)end return U end,function(G,A)local j=w(A)local U=function(U,b,g,v)return N(G,{U;b,g;v},A,j)end return U end,function(G,A)local j=w(A)local U=function(U,b,g,v,i,L,Z)return N(G,{U,b,g;v,i,L;Z},A,j)end return U end,180908+-180908,function(N,U,b,g)local LB,MB,w,n,IB,s,Z,EB,Y,u,vB,m,R,p,f,T,ZB,KB,o,aB,wB,c,tB,Q,D,P,uB,jB,W,k,C,V,gB,GB,NB,bB,h,x,OB,AB,J,DB,X,E,HB,dB,S,q,zB,l,i,iB,B,eB,r,F,y,UB while N do if N<8098590-25749 then if N<3874610-(-547362)then if N<-620672+2355119 then if N<114745+728921 then if N<404891-(-79060)then if N<932804-649119 then if N<-341053-(-520092)then if N<-462233+487385 then N=L[b[-379885+379888]]E=L[b[412865+-412864]]u=L[b[-538236+538238]]q=A(674154+-676943)c=A(337104+-339900)f=26373577503794-(-719815)Y=u(q,f)w=E[Y]Y=A(-285293+282734)u=G[Y]y=985536+33207921685159 q=L[b[913581-913580]]f=L[b[753447-753445]]R=f(c,y)Y=q[R]E=u[Y]f=223857-223757 Y=618553+-618453 q=338585+-338330 u={E(Y,q,f)}i=N(w,j(u))N=1058807-332284 else w=-398233+398265 D=L[b[-557195-(-557198)]]Z=D%w E=L[b[786915+-786911]]q=L[b[341708-341706]]y=-410992+411005 h=L[b[571-568]]W=h-Z R=141440+-141438 h=-856702-(-856734)X=W/h c=y-X f=R^c Y=q/f u=E(Y)E=4295876258-908962 w=u%E u=-451439+451441 f=380365-380364 E=u^Z D=w/E E=L[b[544019-544015]]q=D%f f=4295285638-318342 Y=q*f u=E(Y)E=L[b[-638442+638446]]Y=E(D)R=163177-162921 w=u+Y Z=nil u=563270-497734 q=-90220+155756 E=w%u D=nil y=713764+-713508 Y=w-E u=Y/q q=-330217-(-330473)Y=E%q f=E-Y q=f/R R=-346915+347171 f=u%R c=u-f u=nil R=c/y w=nil E=nil c={Y,q,f,R}Y=nil q=nil L[b[-255461-(-255462)]]=c f=nil N=310651+1059229 R=nil end else R=636411+15014317368660 N=L[b[704005-704002]]u=L[b[419429-419428]]f=A(-629512+626846)Y=L[b[-241398-(-241400)]]q=Y(f,R)E=u[q]Y=A(771794+-774719)u=G[Y]Y=u(Z)w=E..Y y=151823+30273680811522 Y=A(148204-150763)c=A(514918+-517838)u=G[Y]q=L[b[572659+-572658]]f=L[b[1004712+-1004710]]R=f(c,y)Y=q[R]E=u[Y]q=22793-22693 Y=212299-212044 f=294710+-294610 u={E(Y,q,f)}i=N(w,j(u))i=A(-943423-(-940495))N=G[i]q=A(55883-58714)E=L[b[-86413+86414]]u=L[b[576184+-576182]]f=-947380+10673532028958 Y=u(q,f)w=E[Y]i=N(w,Z)N=11187132-117958 end else if N<195473-(-211494)then if N<558501-273376 then f=786067+16710615605202 i=A(25675+-28631)D=A(-596066+593485)N=G[i]Z=G[D]E=L[b[-605898+605899]]q=A(621820+-624855)u=L[b[203660+-203658]]Y=u(q,f)w=E[Y]E=A(-671191-(-668139))E=Z[E]D={E(Z,w)}i=N(j(D))N=i()i={}N=G[A(252595+-255156)]else N=L[b[-14471+14474]]i=N()N=L[b[602632-602628]]N=N and 7779294-(-385367)or 5921159-(-536274)end else i=A(-793785+791184)N=L[b[-921015-(-921016)]]i=N[i]i=i(N)N=G[A(168930+-171772)]i={}end end else if N<786413+-176998 then if N<-726368+1317121 then if N<-533945+1061166 then Z=t()L[Z]=U[-598040-(-598041)]i=A(-503417-(-500836))R=2833639566842-(-71469)D=t()L[D]=U[179449-179447]f=A(505936+-509048)w=t()L[w]=U[-55312+55315]N=G[i]u=L[b[-832166-(-832167)]]Y=L[b[-976244+976246]]q=Y(f,R)i=A(265619+-268551)E=u[q]i=N[i]i=i(N,E)E=t()Y=-293347+293352 L[E]=i u=L[w]i=u or Y L[w]=i Y=A(-432171-(-429293))q=H(465246+14269703,{E,b[888560-888559],b[235736+-235734],Z;D;w})i={}E=z(E)D=z(D)Z=z(Z)u=G[Y]N=G[A(-931209+928199)]Y=u(q)w=z(w)else E=A(296813+-299798)i=A(806591+-809233)Z=.1 f=A(573409-576087)N=G[i]i=N(Z)N=L[b[81533-81532]]Z=L[b[178571+-178569]]W=782625+7996740541802 w=G[E]u=L[b[453657-453654]]Y=L[b[892460+-892456]]R=-818472+28249160659082 q=Y(f,R)X=A(944831-947452)f=A(-545665+542854)E=u[q]D=w[E]q=G[f]E=-308782.5-(-308783)R=L[b[42690-42687]]c=L[b[-1036876+1036880]]y=c(X,W)f=R[y]Y=q[f]f=L[b[-470304-(-470307)]]R=L[b[-167810-(-167814)]]y=A(240945+-243736)X=2106261596951-(-235709)c=R(y,X)W=A(-465249-(-462319))h=301008+28595923033140 R=A(204424+-207235)q=f[c]u=Y[q]f=G[R]c=L[b[-805778+805781]]y=L[b[-386086-(-386090)]]X=y(W,h)R=c[X]q=f[R]h=-109374+11890673451231 W=35178034540868-94535 R=L[b[-844742-(-844745)]]c=L[b[135727-135723]]X=A(-444260+441361)y=c(X,W)f=R[y]X=-899467+20878780784517 R=678467+34728937268456 Y=q[f]f=A(109963-112622)w=D(E,u,Y)u=L[b[-183924+183927]]Y=L[b[-477184+477188]]q=Y(f,R)E=u[q]q=A(629938-632833)y=A(-309774-(-306938))Y=G[q]f=L[b[792521-792518]]R=L[b[-483016-(-483020)]]c=R(y,X)q=f[c]y=865997+24632237897217 R=-927062-(-927062)u=Y[q]c=-493641-(-493921)i=A(351960+-354725)q=339831+-339831 f=6683-6363 Y=u(q,f,R,c)q=L[b[-322531-(-322534)]]c=A(-889123-(-886035))f=L[b[431544+-431540]]R=f(c,y)u=q[R]R=A(-915812-(-912917))f=G[R]W=A(593497+-596165)i=N[i]c=L[b[675345+-675342]]y=L[b[-1042607+1042611]]X=y(W,h)y=13423+-13422.5 R=c[X]X=-125466-(-125326)q=f[R]R=689025+-689024.5 c=399125+-399285 f=q(R,c,y,X)X=A(42596-45600)R=L[b[637133+-637130]]c=L[b[269861-269857]]W=-24700+34457747791657 y=c(X,W)q=R[y]c=-728022+15179933661042 R=-577939-(-577939)D={[E]=Y,[u]=f;[q]=R}i=i(N,Z,w,D)u=A(-276640-(-273655))N=L[b[-485936+485937]]R=A(-506697-(-504018))D=L[b[-643787-(-643792)]]Z=i i=A(-181788-(-179023))E=G[u]Y=L[b[-635057+635060]]q=L[b[-447181-(-447185)]]i=N[i]f=q(R,c)R=A(-178009+175088)u=Y[f]c=2522631456220-999750 w=E[u]u=691090.5-691090 E=w(u)Y=L[b[-169783-(-169786)]]q=L[b[-264476-(-264480)]]f=q(R,c)u=Y[f]Y=.3 w={[u]=Y}i=i(N,D,E,w)N=A(17869-20556)N=Z[N]N=N(Z)D=i N=A(-626847+624160)N=D[N]N=N(D)D=nil i={}N=G[A(-578645-(-576045))]Z=nil end else Y=419061+31646462973083 u=A(-774805-(-771860))f=6261079135702-(-882061)N=L[b[-446478+446482]]D=L[b[-303994+303996]]w=L[b[359753-359750]]E=w(u,Y)Z=D[E]E=L[b[677414-677412]]q=A(375250-377939)u=L[b[-678300-(-678303)]]Y=u(q,f)w=E[Y]E=L[b[-199308-(-199309)]]D=w..E w=36815-36805 i=N(Z,D,w)N=G[A(828981-831771)]i={}end else if N<1446831-714896 then if N<-949266+1626726 then f=A(-821899-(-819071))N=L[b[503985-503984]]Z=L[b[-886302-(-886304)]]h=-988272+2516882790660 E=A(443731+-446716)w=G[E]u=L[b[415607+-415604]]R=-688003+6861763759102 Y=L[b[-862103-(-862107)]]y=A(-961442+958557)q=Y(f,R)E=u[q]D=w[E]R=31067+31500017336305 E=.2 f=A(-737921-(-734909))w=D(E)u=L[b[-537068+537071]]Y=L[b[-123096-(-123100)]]W=A(-981391+978501)q=Y(f,R)E=u[q]X=16804800196486-(-208651)q=A(677042+-679601)Y=G[q]f=L[b[-697578-(-697581)]]R=L[b[-329084-(-329088)]]c=R(y,X)q=f[c]u=Y[q]R=951124-951044 q=37521-37266 y=12471803985808-141537 f=-342168+342248 Y=u(q,f,R)c=A(-558539+555772)q=L[b[241537+-241534]]f=L[b[648556-648552]]i=A(-292027+289262)R=f(c,y)u=q[R]R=A(1036890-1039785)i=N[i]f=G[R]c=L[b[728666+-728663]]y=L[b[365139-365135]]X=y(W,h)R=c[X]q=f[R]X=-416132-(-416157)c=1020492+-1020467 y=589981+-589981 R=-1013894+1013894 f=q(R,c,y,X)D={[E]=Y,[u]=f}i=i(N,Z,w,D)Z=i N=A(-178556-(-175869))N=Z[N]N=N(Z)Z=nil i={}N=G[A(-314402+311295)]else q=-453918+5866100275145 N=L[b[-6040+6044]]w=L[b[908109+-908108]]D=nil E=L[b[730881-730879]]Y=A(1043138+-1046207)f=25123806400067-106640 u=E(Y,q)R=A(-106278+103691)i=w[u]E=L[b[-997+998]]Z=nil u=L[b[-329320-(-329322)]]q=A(780874-783464)c=310000+11267354941838 Y=u(q,f)w=E[Y]N[i]=w Y=A(-22959+20110)N=L[b[583840-583836]]w=L[b[-706901-(-706902)]]E=L[b[-682078-(-682080)]]q=26580694818702-(-86219)u=E(Y,q)i=w[u]u=A(391286-393845)E=G[u]Y=L[b[768728-768727]]q=L[b[389866-389864]]f=q(R,c)q=1037773+-1037673 u=Y[f]w=E[u]u=-911403+911658 Y=159748-159598 E=w(u,Y,q)N[i]=E N=G[A(-563946-(-561252))]i={}end else q=nil N=-112412+10347303 E=nil Y=nil end end end else if N<442506-(-766568)then if N<1581164-542527 then if N<371465+615126 then if N<553302+357364 then D=nil E=nil N=-216599+3894148 w=nil else F=-182917-(-182919)m=s[F]N=227701+4311167 F=L[V]p=m==F GB=p end else X=26622212530226-(-331834)N=true W=A(115619-118490)c=A(337413-340004)L[b[-91366+91370]]=N u=L[Z]N=73304+820799 y=-149832+19399920168081 q=L[b[297806-297805]]f=L[b[777720+-777718]]R=f(c,y)y=A(764514-767579)Y=q[R]i=u[Y]L[b[-802649-(-802654)]]=i h=34334667309471-656171 Y=L[b[421771+-421768]]f=L[b[237633-237632]]R=L[b[686674-686672]]c=R(y,X)q=f[c]u=Y[q]Y=nil q=t()L[b[772589+-772583]]=u L[q]=Y f=L[Z]c=L[b[497152+-497151]]y=L[b[-781301-(-781303)]]X=y(W,h)R=c[X]Y=f[R]R=H(6369438-1040297,{Z;b[272984+-272983];b[708624-708622];b[-37228+37232],q})f=A(363802+-366775)f=Y[f]f=f(Y,R)L[q]=f q=z(q)end else if N<2233896-1045623 then if N<374093+756938 then Z=A(942709-945306)i=G[Z]Y=908508249318-637759 u=A(300953+-303964)D=L[b[-532526+532528]]w=L[b[-424951+424954]]E=w(u,Y)Z=D[E]N=i[Z]Z=L[b[-920893-(-920894)]]i=N(Z)N=4325342-687587 else q=A(-667130+664218)w=A(124603-127200)D=G[w]E=L[b[884519-884517]]u=L[b[-580452+580455]]f=23460987477840-(-379740)N=7223400-(-568180)Y=u(q,f)w=E[Y]Z=D[w]i=Z end else N=L[b[887989+-887982]]N=N and 1417988-(-315321)or-582908+15808307 end end else if N<-892718+2443237 then if N<-507050+1952092 then if N<1041755-(-327834)then N=G[A(-167046-(-164426))]i={}else w=A(-757153-(-754043))D=G[w]w=A(275132-277822)Z=D[w]w=L[b[32975-32974]]N=G[A(-15017-(-12112))]D={Z(w)}i={j(D)}end else R=198710+-198455 N=L[b[172692+-172691]]D=w f=351557+-351557 q=N(f,R)Z[D]=q D=nil N=908476+14448270 end else if N<765816-(-905378)then R=-628725+22265423396981 E=A(-42217-(-39232))N=L[b[-611225+611229]]f=A(-868118+865478)Z=L[b[500696+-500695]]w=G[E]u=L[b[954568-954566]]Y=L[b[268452+-268449]]q=Y(f,R)E=u[q]D=w[E]E=.2 R=24809816309692-(-290148)h=517571+22563834757960 w=D(E)u=L[b[388777-388775]]f=A(452292-455178)Y=L[b[-161188+161191]]y=A(-117116+114185)q=Y(f,R)E=u[q]q=A(-242702+240143)Y=G[q]f=L[b[114594-114592]]R=L[b[-113927-(-113930)]]X=-524280+12613878929129 W=A(779408+-781986)i=A(523888+-526653)c=R(y,X)q=f[c]u=Y[q]f=-474773+474923 y=32475343986607-(-318307)R=664763-664663 q=600061-599806 Y=u(q,f,R)q=L[b[-636067+636069]]c=A(-476854-(-473877))f=L[b[-608044-(-608047)]]R=f(c,y)u=q[R]R=A(238983+-241878)f=G[R]c=L[b[-279365-(-279367)]]y=L[b[713500+-713497]]X=y(W,h)R=c[X]X=-936215+936255 q=f[R]c=14726+-14526 i=N[i]y=782583+-782583 R=-430584+430584 f=q(R,c,y,X)D={[E]=Y,[u]=f}i=i(N,Z,w,D)N=A(765794-768481)Z=i N=Z[N]N=N(Z)Z=nil N=424726+9578751 else Z=A(15812-18712)N=G[Z]w=797015+-797015 D=L[b[-413567+413575]]Z=N(D,w)N=-92308+15317707 end end end end else if N<-917618+4556993 then if N<2168172-(-428818)then if N<2614042-432738 then if N<-490519+2451532 then if N<2496507-669833 then p=747992-747991 n=s[p]GB=n N=646201+13826687 else f=A(791036+-793816)E=A(901999-904984)R=423654+34603642390539 N=L[b[123651+-123647]]Z=L[b[-944487-(-944488)]]w=G[E]u=L[b[-152759-(-152761)]]Y=L[b[988758-988755]]q=Y(f,R)E=u[q]h=5610040466831-(-306341)X=10220178581263-87160 D=w[E]f=A(-558527+555543)E=.2 W=A(-163460+160601)R=25156332074017-(-506273)w=D(E)u=L[b[1042497-1042495]]Y=L[b[553277+-553274]]q=Y(f,R)E=u[q]q=A(642054-644613)Y=G[q]f=L[b[733535-733533]]y=A(-564855-(-562073))R=L[b[-77815+77818]]c=R(y,X)q=f[c]R=979492+-979372 u=Y[q]f=897434-897264 q=235037+-234782 i=A(-877314+874549)Y=u(q,f,R)y=31899729454740-715918 q=L[b[311640-311638]]c=A(255720-258494)f=L[b[-578107+578110]]R=f(c,y)u=q[R]R=A(-833127+830232)f=G[R]c=L[b[301858-301856]]i=N[i]y=L[b[261873+-261870]]X=y(W,h)y=321666-321666 R=c[X]q=f[R]R=-702905-(-702905)c=614022-613817 X=993381+-993339 f=q(R,c,y,X)D={[E]=Y;[u]=f}i=i(N,Z,w,D)N=A(962081+-964768)Z=i N=Z[N]N=N(Z)Z=nil N=-803969+7500075 end else i={}Z=nil N=G[A(37474-40101)]end else if N<639242+1943345 then if N<380598+1996864 then i=A(36062-38962)Z=A(-556793-(-553850))N=G[i]i=N(Z)N=G[A(117628+-120494)]i={}else i=752388+3700144 D=A(-325907+322972)w=991830+2032068 Z=D^w N=i-Z Z=N i=A(228071-230924)N=i/Z i={N}N=G[A(-151434+148776)]end else w=A(-612023-(-609456))D=G[w]N=D and 16623663-219793 or-489181+13189143 end end else if N<-11852+3085460 then if N<3091465-341937 then if N<2338436-(-343063)then F=641934-641933 n=N m=s[F]F=false p=m==F GB=p N=p and-159750+1085519 or-365344+4904212 else w=A(-678717+676134)i=L[b[726814-726813]]Z=L[b[945464+-945462]]E=-472923+4323749396280 D=Z(w,E)Z=t()N=i[D]L[Z]=N i=A(-630917-(-628179))D=I(332881+8965880,{Z;b[822398-822397],b[-851765+851767],b[690939+-690936]})Z=z(Z)N=G[i]i=N(D)N=G[A(554409-557501)]i={}end else i=A(1035416-1038372)D=A(713402+-715983)N=G[i]Z=G[D]E=L[b[-625139+625140]]f=10523043272544-738364 q=A(-938776+935695)u=L[b[338088-338086]]Y=u(q,f)w=E[Y]E=A(897497+-900549)E=Z[E]D={E(Z,w)}i=N(j(D))N=i()i={}N=G[A(505824-508800)]end else if N<-471591+3903839 then N=true N=131133+10590088 else N=L[b[695242+-695238]]Y=-816544+16266971058998 D=L[b[761033-761031]]q=457291+33663004705520 u=A(-594140-(-591264))w=L[b[-881091+881094]]E=w(u,Y)Z=D[E]w=L[b[-1012634-(-1012636)]]Y=A(267272-270339)E=L[b[-315396-(-315399)]]u=E(Y,q)D=w[u]w=280958-280953 i=N(Z,D,w)i={}N=G[A(1011269+-1014326)]end end end else if N<3987882-(-17040)then if N<3531995-(-244316)then if N<3747636-(-21085)then if N<-198679+3883911 then N=G[A(-958524+955836)]i={}Z=z(Z)else Y=i f=A(-30430-(-27320))q=A(120739+-123411)i=G[q]q=A(-113794-(-110822))N=i[q]q=t()L[q]=N i=G[f]X=A(758120+-761230)f=A(-240220+237549)N=i[f]f=N y=G[X]c=N R=y N=y and 293707+15007932 or 834318+7936490 end else N=false L[b[446941+-446937]]=N i=L[b[-238304+238309]]Z=A(323496-326232)N=-923084+17612998 Z=i[Z]Z=Z(i)end else if N<310670+3645222 then if N<84193+3829604 then N=985836+10640232 D=L[b[-25796+25798]]w=L[b[-685698+685701]]Z=D==w i=Z else N=q W=A(-380456-(-377357))f=L[b[116718-116716]]R=L[b[-229560-(-229563)]]C=22484377680962-(-486564)X=842721+9576647390602 y=A(-650266+647602)c=R(y,X)q=f[c]i=A(237376+-240128)h=1792961761689-(-176553)f=L[b[345836-345830]]c=L[b[-892537-(-892539)]]y=L[b[442049-442046]]X=y(W,h)R=c[X]y=L[b[685444-685442]]X=L[b[920071-920068]]i=N[i]h=A(345353-348139)W=X(h,C)c=y[W]D={[w]=E;[u]=Y;[q]=f,[R]=c}i=i(N,Z,D)i={}N=G[A(448799+-451596)]end else w=A(-89252+86245)N=813785+11886177 D=G[w]X=13570727162853-(-959690)q=A(676349+-679272)f=9246979143956-(-55229)E=L[b[-94136+94137]]R=19553011770029-(-262372)u=L[b[-778410-(-778412)]]Y=u(q,f)y=29002979691695-382958 c=A(217148-219960)w=E[Y]Z=D[w]f=A(-854126-(-851032))u=L[b[573183-573182]]Y=L[b[-873721-(-873723)]]q=Y(f,R)E=u[q]u=L[b[266448-266445]]q=L[b[158722-158721]]f=L[b[-812744-(-812746)]]R=f(c,y)Y=q[R]y=A(-60017-(-57258))f=L[b[50519+-50518]]R=L[b[-525260-(-525262)]]c=R(y,X)q=f[c]w={[E]=u,[Y]=q}D=Z(w)Z=true L[b[-38347+38351]]=Z end end else if N<4281262-(-27398)then if N<1022914+3169993 then if N<5073075-1043857 then i={}N=G[A(911354-914349)]D=nil Z=nil else Y=A(799638-802639)Z=L[b[-818969+818970]]q=31078497840109-(-986267)w=L[b[1041372+-1041370]]E=L[b[-953891-(-953894)]]u=E(Y,q)D=w[u]i=Z[D]D=L[b[1044425-1044423]]w=L[b[-377979-(-377982)]]Y=17926384821545-(-146290)u=A(434038-436784)E=w(u,Y)Z=D[E]N=i==Z N=N and 13496301-(-326624)or-335283+1664216 end else i={}N=G[A(-729699-(-726640))]end else if N<430092+3942348 then R=A(-802512-(-799534))c=10709762017905-(-149770)u=A(390142-393149)E=G[u]N=-528828+6310386 Y=L[b[-63355-(-63356)]]q=L[b[-730851+730853]]f=q(R,c)u=Y[f]w=E[u]Z=w else f=414374+23069097613136 N=L[b[573523+-573520]]E=L[b[759850+-759849]]y=365384+6528005306519 q=A(-242980+240378)u=L[b[-224089-(-224091)]]Y=u(q,f)w=E[Y]Y=A(622665-625224)u=G[Y]q=L[b[-593213-(-593214)]]c=A(20223-22953)f=L[b[-858537+858539]]R=f(c,y)Y=q[R]E=u[Y]f=557175+-557075 Y=-698188-(-698288)R=317832+2502503082757 q=-358700-(-358955)u={E(Y,q,f)}i=N(w,j(u))N=L[b[-933704+933708]]E=L[b[-953346-(-953347)]]u=L[b[-419741+419743]]f=-153980+579341703817 q=A(-717219-(-714485))Y=u(q,f)f=A(117226+-120101)w=E[Y]u=L[b[-45530+45531]]Y=L[b[424608+-424606]]q=Y(f,R)E=u[q]u=257959-257929 i=N(w,E,u)N=392696+10676478 end end end end end else if N<6656984-507437 then if N<4396472-(-770921)then if N<118607+4598631 then if N<4502427-(-36074)then if N<1045901+3440977 then if N<-968991+5411404 then f=25554737735918-801395 q=A(896952-899903)E=L[b[-417882-(-417883)]]u=L[b[624723-624721]]Y=u(q,f)w=E[Y]y=3026453218738-835633 Y=A(-600165+597354)i=Z[w]u=G[Y]q=L[b[253577+-253576]]f=L[b[201666-201664]]c=A(7568+-10408)R=f(c,y)Y=q[R]E=u[Y]c=126198+10209921410460 R=A(219071+-221876)Y=L[b[-519338+519339]]q=L[b[-190302-(-190304)]]f=q(R,c)u=Y[f]w=E[u]N=i==w N=N and 494480+-208335 or-353774+4381632 else w=940626+-940625 D=L[b[-443156+443159]]Z=D~=w N=Z and 889913+-826459 or-70244+14261897 end else Y=20717767537924-659285 N=L[b[15362-15361]]R=25240670369609-(-751264)u=A(991677-994590)D=L[b[828896+-828894]]w=L[b[71845+-71842]]E=w(u,Y)Z=D[E]E=A(-245370-(-242811))f=A(-966573+963725)w=G[E]u=L[b[669430-669428]]Y=L[b[-741829-(-741832)]]c=8486311683281-(-649886)q=Y(f,R)E=u[q]Y=-314138-(-314238)W=A(704425-707095)u=760135-759935 D=w[E]E=-820539-(-820794)w={D(E,u,Y)}i=N(Z,j(w))Z=A(79680-82665)y=8171028159458-478470 i=G[Z]D=L[b[62942-62940]]Y=14617778053677-591767 u=A(1040619+-1043569)w=L[b[-178307-(-178310)]]R=A(521730-524744)E=w(u,Y)Z=D[E]u=A(783787-786598)N=i[Z]Z=.3 E=G[u]Y=L[b[1014599+-1014597]]q=L[b[-421102-(-421105)]]f=q(R,c)u=Y[f]w=E[u]c=A(-663509+660486)R=29694339368760-(-44747)u=L[b[-670679-(-670681)]]f=A(315250+-318127)Y=L[b[804389+-804386]]q=Y(f,R)E=u[q]Y=A(545811-548622)D=w[E]u=G[Y]q=L[b[-43902+43904]]f=L[b[482306-482303]]R=f(c,y)Y=q[R]E=u[Y]Y=L[b[772760-772758]]c=393978+20666769269405 R=A(851028-853954)q=L[b[-411110-(-411113)]]f=q(R,c)h=5314219185661-150611 u=Y[f]w=E[u]i=N(Z,D,w)Z=i N=L[b[-968954-(-968958)]]D=L[b[160906+-160901]]u=L[b[-233750+233752]]Y=L[b[389192+-389189]]R=395082+3920220618711 f=A(610663-613429)y=A(770936-774007)q=Y(f,R)E=u[q]q=A(207876+-210771)Y=G[q]f=L[b[628541-628539]]X=-443646+26292476671185 R=L[b[-858330-(-858333)]]c=R(y,X)R=-480355-(-480355)q=f[c]u=Y[q]f=256909+-256909 q=-473202+473202 c=39888-39888 Y=u(q,f,R,c)q=L[b[262422-262420]]i=A(387169+-389934)f=L[b[424538+-424535]]y=17796500984403-(-577036)c=A(759022-762107)R=f(c,y)u=q[R]R=A(1026311-1029206)f=G[R]i=N[i]c=L[b[-533678+533680]]y=L[b[596283-596280]]X=y(W,h)y=-353163.5-(-353164)R=c[X]X=5071-5071 c=-757066-(-757066)W=411284+21679352242395 q=f[R]R=-833859.5-(-833860)f=q(R,c,y,X)R=L[b[-785018-(-785020)]]X=A(316206+-319188)c=L[b[-822043+822046]]y=c(X,W)q=R[y]R=935058-935057 w={[E]=Y,[u]=f,[q]=R}i=i(N,D,Z,w)c=-929880+17799663505592 D=i N=L[b[-743667-(-743671)]]w=L[b[-336295+336301]]R=A(-674121+671408)Y=L[b[-578277-(-578279)]]q=L[b[995525-995522]]f=q(R,c)u=Y[f]Y=-1021757+1021758 f=-558071+9052366148718 E={[u]=Y}i=A(-926787+924022)i=N[i]i=i(N,w,Z,E)N=A(-89041-(-86354))w=i q=A(-90292+87203)N=D[N]N=N(D)N=A(-813354-(-810667))N=w[N]N=N(w)E=L[b[175757+-175755]]u=L[b[-770770+770773]]Y=u(q,f)i=E[Y]N=D[i]D=nil i=A(61804+-64777)i=N[i]E=e(-763174+1179865,{b[-1010738+1010745]})i=i(N,E)Z=nil w=nil i={}N=G[A(-692668+689608)]end else if N<3991255-(-717803)then if N<293538+4258436 then i=GB N=n N=15877899-7813 else N=L[b[827885-827881]]Z=L[b[866205-866200]]E=A(985448-988433)w=G[E]X=A(398014-400980)f=A(-258497+255753)u=L[b[51746-51744]]R=344095+396757385369 Y=L[b[-573369+573372]]q=Y(f,R)E=u[q]D=w[E]f=A(-636008+633197)q=G[f]W=-998918+31767923406799 R=L[b[898481+-898479]]h=1044333+21066929747685 E=557097-557095 c=L[b[-620397+620400]]y=c(X,W)f=R[y]X=31385239579693-(-822505)W=A(482211+-484926)Y=q[f]y=A(328434+-331539)f=L[b[-327616+327618]]R=L[b[-936331+936334]]c=R(y,X)q=f[c]u=Y[q]R=A(-155818+153007)f=G[R]c=L[b[549300+-549298]]i=A(-688989+686224)y=L[b[350013-350010]]X=y(W,h)W=13473352257031-(-658043)R=c[X]q=f[R]i=N[i]R=L[b[993769-993767]]c=L[b[-314344+314347]]X=A(-15236+12637)y=c(X,W)h=652367+20335115333806 f=R[y]Y=q[f]w=D(E,u,Y)f=A(977114-979680)R=-475895+17480707662531 u=L[b[-276422-(-276424)]]Y=L[b[-921426-(-921429)]]q=Y(f,R)E=u[q]u=.1 W=A(779817-782453)D={[E]=u}u=A(390584-393569)R=A(31426-33986)i=i(N,Z,w,D)c=5972001658724-(-799608)Z=i i=A(-244998+242233)N=L[b[-606738-(-606742)]]D=L[b[-79295+79300]]E=G[u]Y=L[b[-726488-(-726490)]]q=L[b[-456400-(-456403)]]f=q(R,c)u=Y[f]R=A(-292711+289900)w=E[u]u=317615+-317613 f=G[R]c=L[b[739940+-739938]]y=L[b[-24603+24606]]X=y(W,h)W=13796353355686-906894 R=c[X]X=A(-602070+599330)h=A(701645-704293)q=f[R]R=L[b[99123+-99121]]c=L[b[738262+-738259]]y=c(X,W)f=R[y]Y=q[f]c=A(-796301-(-793490))R=G[c]y=L[b[-822162-(-822164)]]C=70907+22776802792563 X=L[b[-349160+349163]]W=X(h,C)c=y[W]h=32806918956705-(-890123)f=R[c]c=L[b[315070+-315068]]W=A(-588279-(-585724))y=L[b[179918-179915]]i=N[i]X=y(W,h)R=c[X]q=f[R]E=w(u,Y,q)R=A(-740844+737783)Y=L[b[112942-112940]]c=16313234813304-562124 q=L[b[612530-612527]]f=q(R,c)u=Y[f]Y=-146908.5-(-146909)w={[u]=Y}i=i(N,D,E,w)q=3652310829760-1052 D=i N=A(-790458+787771)N=Z[N]N=N(Z)w=L[b[92612-92610]]E=L[b[-1005694+1005697]]Y=A(318948-321512)u=E(Y,q)Y=A(723065-726108)i=w[u]N=Z[i]i=A(97603+-100644)i=N[i]i=i(N)q=19681778432644-808631 N=A(-286212-(-283525))N=D[N]N=N(D)w=L[b[-436967+436969]]E=L[b[-842963-(-842966)]]u=E(Y,q)i=w[u]N=D[i]i=A(-463887-(-460846))i=N[i]Z=nil i=i(N)D=nil N=-637128+13085737 end else N=true N=N and 16024790-554000 or 715692+9243573 end end else if N<-669510+5634932 then if N<-550090+5467494 then if N<-171896+4943994 then Z=U[-998713-(-998714)]D=L[b[-42739-(-42740)]]i=D N=D and 11414433-(-292051)or-1044074+13518282 else w=A(-587815+585110)i=L[b[-199323-(-199324)]]E=655557+23855094344351 Z=L[b[789864-789862]]D=Z(w,E)Z=t()N=i[D]D=t()i=A(-18008+15130)L[Z]=N N=false L[D]=N N=G[i]w=H(987527+6976778,{b[-310087+310088];b[-36266-(-36268)];Z,D})Z=z(Z)D=z(D)i=N(w)N=G[A(184888-187795)]i={}end else N=5757737-1040813 end else if N<-908371+5941488 then Q=y==X N=-376267+12148463 P=Q else N=-32409+4749333 end end end else if N<6054028-363124 then if N<6351786-948514 then if N<5356224-15909 then if N<6133481-817159 then q=536134+22828882213696 Z=L[b[1023294+-1023293]]w=L[b[-311850-(-311852)]]E=L[b[780477+-780474]]Y=A(-4970+2305)u=E(Y,q)D=w[u]Y=751593+24084798567398 i=Z[D]D=L[b[179590-179588]]u=A(478554-481400)w=L[b[-425602-(-425605)]]E=w(u,Y)Z=D[E]N=i==Z N=N and 1458627-(-400253)or-479733+7175839 else Z=L[b[367857+-367856]]f=A(222911+-225574)R=-328056+21319751591999 q=2327450365648-551573 Y=A(-179858-(-177248))w=L[b[-1043870+1043872]]E=L[b[363901-363898]]u=E(Y,q)E=A(112659-115470)D=w[u]i=Z[D]w=G[E]u=L[b[-464846-(-464848)]]Y=L[b[429638-429635]]q=Y(f,R)f=-543377+32480458573221 E=u[q]q=A(-571620-(-569031))D=w[E]E=L[b[-765878-(-765880)]]u=L[b[411066+-411063]]Y=u(q,f)w=E[Y]Z=D[w]N=i==Z N=N and 4708912-940171 or 15877269-(-812645)end else E=A(156310-159235)f=A(4890+-7768)i=A(701311-704217)N=G[i]Z=L[b[999309+-999305]]w=G[E]R=d(7504980-434702,{})q=G[f]f={q(R)}Y={j(f)}q=410027-410025 u=Y[q]E=w(u)w=A(196454+-199257)D=Z(E,w)Z={D()}i=N(j(Z))D=L[b[-322045+322050]]Z=i i=D N=D and 9434128-(-595346)or 14734848-288828 end else if N<191077+5305606 then if N<5575754-146265 then c=2016540792755-(-977912)N=u Y=L[b[-508606+508608]]R=A(-377980-(-375324))q=L[b[252228+-252225]]f=q(R,c)u=Y[f]f=L[b[685542+-685537]]q=N Y=f N=f and-231458+4157375 or 663579+14420525 else Z=U[-923843+923844]Y=A(-435081+432061)w=L[b[750598+-750597]]E=L[b[-192273-(-192275)]]q=268019+18111901633023 u=E(Y,q)D=w[u]w=A(93491-96386)q=A(554750-557533)i=Z[D]C=34233438648638-(-574727)D=L[b[174707+-174704]]N=i-D f=29881909512857-(-994241)c=A(202994-206109)i=G[w]E=L[b[389131+-389130]]u=L[b[677255+-677253]]Y=u(q,f)D=N w=E[Y]h=A(-783651-(-780558))N=i[w]y=657035+33330162808341 u=L[b[-589809+589813]]q=L[b[614884+-614883]]f=L[b[581680+-581678]]R=f(c,y)Y=q[R]E=u[Y]c=70542+13310630397096 R=A(-216723+214025)Y=L[b[-549600-(-549601)]]q=L[b[475847-475845]]f=q(R,c)X=A(-663101+660143)W=9845679694909-823893 u=Y[f]w=E[u]q=L[b[-724872-(-724876)]]R=L[b[-119916+119917]]c=L[b[44217-44215]]y=c(X,W)f=R[y]Y=q[f]y=A(677489-680334)f=L[b[111457-111456]]X=23520+5243637067177 R=L[b[-111765-(-111767)]]c=R(y,X)W=20083128712336-514057 q=f[c]y=A(120478-123325)u=Y[q]f=L[b[436975+-436974]]X=-223648+23523677279338 R=L[b[-571066+571068]]c=R(y,X)q=f[c]Y=D[q]E=u+Y X=A(-35370-(-32778))q=L[b[-27165+27169]]R=L[b[841524-841523]]c=L[b[-212440+212442]]y=c(X,W)f=R[y]Y=q[f]f=L[b[-148843+148844]]y=A(641241-644055)R=L[b[224631-224629]]X=23015014179172-259975 c=R(y,X)q=f[c]u=Y[q]R=L[b[-875838+875842]]y=L[b[313889-313888]]X=L[b[819769+-819767]]W=X(h,C)c=y[W]h=704337+29330106693128 W=A(441751+-444469)f=R[c]c=L[b[800968+-800967]]y=L[b[426360-426358]]X=y(W,h)R=c[X]q=f[R]c=L[b[156757-156756]]W=A(-1018848+1016278)h=-460095+7383654306477 y=L[b[959734+-959732]]X=y(W,h)R=c[X]f=D[R]Y=q+f Z=nil i=N(w,E,u,Y)w=i N=L[b[-244620-(-244625)]]D=nil E=L[b[-217108-(-217109)]]q=A(-418978+416070)f=28052047434479-991209 u=L[b[-465907-(-465909)]]Y=u(q,f)i=E[Y]E=w w=nil N[i]=E i={}N=G[A(-919438+916392)]end else R=-260854+15206853695135 f=A(-588307-(-585530))N=L[b[-936023+936026]]u=L[b[922935-922934]]Y=L[b[-658276+658278]]q=Y(f,R)y=24852211381107-99903 Y=A(210629-213554)E=u[q]u=G[Y]Y=u(Z)w=E..Y Y=A(834281+-836840)u=G[Y]q=L[b[-399810-(-399811)]]c=A(218409-221454)f=L[b[-87212+87214]]R=f(c,y)Y=q[R]E=u[Y]Y=-616102-(-616357)q=-102453+102553 f=416686-416586 u={E(Y,q,f)}i=N(w,j(u))i=A(-209276-(-206348))q=A(751301+-754304)N=G[i]f=1059934357679-706242 E=L[b[-637542-(-637543)]]u=L[b[207929+-207927]]Y=u(q,f)w=E[Y]i=N(w,Z)N=541768+184755 end end else if N<302227+5573120 then if N<5191361-(-600018)then if N<6410409-647028 then E=A(16845+-19852)w=G[E]D=N Z=w N=w and 4124326-(-239438)or-151848+5933406 else N=D N=Z and-223420+4224012 or-29893+2622586 end else i={}N=G[A(861129-864116)]end else if N<890367+5012777 then Y=A(143836-146668)R=678555+25843617813607 N=L[b[767908+-767904]]q=1011118+3036382074839 f=A(630028+-632976)w=L[b[49577+-49575]]E=L[b[272944-272941]]u=E(Y,q)D=w[u]u=L[b[952496+-952494]]Y=L[b[-190611-(-190614)]]q=Y(f,R)E=u[q]u=L[b[-996925-(-996926)]]w=E..u E=-378846-(-378856)i=N(D,w,E)N=5784532-(-338849)else N=G[A(745812+-748682)]i={}Z=nil end end end end else if N<6643265-(-548657)then if N<6185105-(-407665)then if N<6117213-(-295703)then if N<5426070-(-937723)then if N<5776921-(-487332)then f=566090+10213046021961 q=A(-10755+7998)Z=A(-894052-(-891211))i=G[Z]y=17771377129804-317689 N=-293689+12993651 E=L[b[-471247-(-471248)]]c=10237448521820-(-805443)u=L[b[-289299-(-289301)]]R=A(509640-512648)Y=u(q,f)w=E[Y]E=L[b[24768+-24765]]Y=L[b[-1010879-(-1010880)]]q=L[b[-674829-(-674831)]]f=q(R,c)c=A(155764+-158803)u=Y[f]q=L[b[658579+-658578]]f=L[b[-931536+931538]]R=f(c,y)Y=q[R]D={[w]=E,[u]=Y}Z=i(D)i=true L[b[264000-263996]]=i else Z=t()f=15213282209645-578497 R=A(-597532+594466)L[Z]=U[242971-242970]D=L[Z]c=22779162064838-790103 E=L[b[735858-735857]]q=A(665605+-668340)u=L[b[502224-502222]]Y=u(q,f)u=A(-231690+228879)w=E[Y]i=D[w]E=G[u]Y=L[b[893661+-893660]]q=L[b[87774-87772]]f=q(R,c)u=Y[f]R=34663306665775-581666 w=E[u]f=A(824463-827409)u=L[b[-451549-(-451550)]]Y=L[b[621569-621567]]q=Y(f,R)E=u[q]D=w[E]N=i==D N=N and 912105+11476911 or 2799912-(-877637)end else N=true N=N and 6091770-(-407553)or 15460406-993308 end else if N<433522+6098864 then if N<704032+5759960 then N=251589+3776269 else i=A(-135813+133161)N=G[i]Z=A(171232+-174306)i=G[Z]Z=A(329886-332960)G[Z]=N Z=A(939661+-942313)G[Z]=i Z=L[b[820565+-820564]]D=Z()N=-309305+6712149 end else i={}N=G[A(-261080+258207)]end end else if N<6548314-(-602516)then if N<-811942+7793832 then if N<7432694-582732 then N=G[A(659628-662664)]i={}else Z=-531044+531047 i=A(940949-943591)N=G[i]i=N(Z)Z=L[b[275756+-275755]]w=L[b[804148+-804146]]E=L[b[-787155-(-787158)]]q=19086864367669-367997 Y=A(245880-248908)u=E(Y,q)D=w[u]i=Z[D]Z=L[b[824729-824725]]N=i==Z N=N and-359122+16401362 or 5213023-(-609779)end else w=12906228-19781 D=A(878203-880849)Z=D^w i=14100964-437894 N=i-Z i=A(-934742-(-931924))Z=N N=i/Z i={N}N=G[A(719874-722827)]end else if N<7448191-289860 then W=A(-859213+856335)R=t()L[R]=i N=L[q]y=-585458+585523 c=-212945+212948 o=A(-201719+198794)h=K(348938+2041482,{})i=N(c,y)N=843092-843092 y=N c=t()L[c]=i N=-352098-(-352098)i=G[W]W={i(h)}X=N N={j(W)}i=-308924+308926 W=N N=W[i]i=A(720356-723262)h=N N=G[i]C=L[w]Q=G[o]o=Q(h)Q=A(-353449-(-350646))P=C(o,Q)C={P()}i=N(j(C))C=t()L[C]=i i=1045684+-1045683 P=L[c]Q=P N=16341890-(-419443)P=982828-982827 o=P P=499237+-499237 k=o<P P=i-o else Z=L[b[798324+-798323]]i=#Z Z=988164+-988164 N=i==Z N=N and 12202163-904814 or 16962+1352918 end end end else if N<7498697-(-298146)then if N<-594324+8287378 then if N<8194349-608741 then if N<8287856-820374 then h=C x=h N=-676941+10749712 W[h]=x h=nil else W=A(981674+-984706)X=11309100733205-(-508285)h=-901098+5599846418969 y=A(-280851-(-277750))f=L[b[-98967-(-98968)]]R=L[b[908621-908619]]c=R(y,X)q=f[c]Y=D[q]c=L[b[-366174-(-366175)]]y=L[b[36730-36728]]X=y(W,h)R=c[X]f=w[R]R=321316+-321266 q=f+R u=Y<=q i=u N=875360+9832500 end else N=true w=A(-589430+586699)Z=U D=t()L[D]=N i=G[w]w=A(-313013+310362)N=i[w]u=t()w=t()E=t()L[w]=N N=K(2752072-490482,{})L[E]=N N=false f=I(16573210-267935,{u})q=A(202594-205472)L[u]=N Y=G[q]q=Y(f)N=q and-994567+16953715 or 3929157-160452 i=q end else if N<8359605-591057 then if N<598482+7138197 then W=not X c=c+y f=c<=R f=W and f W=c>=R W=X and W f=W or f W=7415658-(-509204)N=f and W f=-283068-(-1032951)N=N or f else B=t()p=A(895321-898246)L[B]=P T=A(450398+-453070)V=-624739+624740 i=G[T]T=A(-8320+5348)x=632174+-632074 N=i[T]T=263472+-263471 l=1024426+-1024171 i=N(T,x)x=540510+-540510 T=t()L[T]=i N=L[q]i=N(x,l)x=t()l=-962697+962698 L[x]=i N=L[q]r=L[T]J=311878+-301878 s=342323+-342321 i=N(l,r)l=t()L[l]=i i=L[q]S=-912870+912870 r=i(V,s)i=552621+-552620 N=r==i s=A(627364-630282)r=t()L[r]=N i=A(-980557-(-977754))n=G[p]m=L[q]F={m(S,J)}N=A(-8482+5486)N=h[N]p=n(j(F))n=A(648986-651904)GB=p..n V=s..GB s=A(630625-633503)N=N(h,i,V)V=t()L[V]=N GB=K(196082+9474934,{q,B;c;w;D,C,r;V,T,l;x,R})i=G[s]s={i(GB)}N={j(s)}s=N N=L[r]N=N and 17764843-1036468 or 13878452-266846 end else N=i and 315369-(-730432)or-753851+13412264 end end else if N<6970266-(-941740)then if N<7049469-(-781214)then if N<1036471+6772109 then Q=L[D]P=Q N=Q and 5172015-204802 or-945159+12717355 else l=z(l)r=z(r)x=z(x)T=z(T)B=z(B)s=nil V=z(V)N=16542380-(-218953)end else k=351535+-351535 C=#W h=C==k N=h and 16293383-565880 or 96734+10157812 end else if N<8968809-1029627 then o=A(-885039-(-882308))f=c Q=G[o]o=A(605997+-608606)P=Q[o]Q=P(Z,f)P=L[b[506794-506788]]o=P()C=Q+o f=nil o=917734+-917733 h=C+Y C=530603+-530347 N=7343059-(-378136)W=h%C C=w[D]Y=W Q=Y+o P=E[Q]h=C..P w[D]=h else D=A(411547-414144)Z=G[D]N=Z and 216246+14840065 or 15174378-(-299236)i=Z end end end end end end else if N<-953948+14008059 then if N<889324+9733488 then if N<10114161-160505 then if N<9967651-626568 then if N<-178496+8850165 then if N<670232+7610395 then if N<-367642+8635636 then i=A(-35653+32917)N=L[b[638552+-638548]]i=N[i]i=i(N)N=5766846-(-690587)else q=L[b[-1038570+1038572]]N=953041+4457219 y=25156713976521-(-875257)c=A(-95369-(-92637))f=L[b[-644960-(-644963)]]R=f(c,y)Y=q[R]E=Y end else i=A(999571-1002381)N=G[i]N=N and 14458182-44920 or 33551+16632949 end else if N<560799+8366956 then if N<392063+8384899 then N=c N=R and 818618+6332810 or-922885+10417648 i=R else Y=172041+34124255125001 i=A(195090+-197671)N=G[i]D=L[b[-669178+669179]]u=A(26973+-29603)i=A(-79227+76295)w=L[b[833915+-833913]]E=w(u,Y)Z=D[E]i=N[i]i=i(N,Z)N=A(108920+-111975)Z=L[b[990078-990075]]N=i[N]N=N(i,Z)i={}N=G[A(514062+-516731)]end else i=A(-214191-(-211313))N=G[i]Z=I(7729844-(-554753),{b[-340365+340366];b[647582-647580];b[-946347-(-946350)];b[801343-801339]})i=N(Z)Z=i N=not Z N=N and 6714462-835847 or 674592+5448789 end end else if N<10521876-1035766 then if N<9902942-492496 then if N<-472628+9821920 then N=739891+9514655 k=601525+-601525 C=#W h=C==k else N=G[A(-760869+757914)]i={}end else i=A(451824+-454702)D=O(2920127-129311,{b[360744+-360743],b[-735317-(-735319)]})N=G[i]w={N(D)}Z=w[-812067+812069]i=w[-805689+805690]D=i i=A(-878792-(-876150))N=G[i]w=688113+-688112.5 i=N(w)N=D and 942226+3431995 or 748084+-464491 end else if N<10001792-279227 then if N<-748346+10253911 then N=144217+7007211 c=A(389845-392397)R=G[c]i=R else u=869263+-869261 E=-961462-(-961463)D=L[b[892419+-892418]]w=D(E,u)D=-710537-(-710538)Z=w==D N=Z and 10623271-(-1002797)or 3639633-(-230390)i=Z end else Y=952961+26294626542931 Z=A(-521525-(-518913))u=A(-782211-(-779503))i=G[Z]D=L[b[-573795-(-573797)]]w=L[b[-172532-(-172535)]]E=w(u,Y)Z=D[E]N=i[Z]Z=L[b[570390+-570389]]i=N(Z)N=12432+3625323 end end end else if N<9485762-(-596527)then if N<219195+9805752 then if N<9341898-(-664247)then if N<10598047-629589 then i={}N=G[A(125255-128088)]else i={}N=G[A(593418-596171)]end else N=i and 9115283-(-830103)or 6091+596624 end else if N<243992+9828359 then if N<-263072+10307845 then N=14634937-188917 w=L[b[-408040+408046]]D=w==Z i=D else E=A(333177+-336162)y=A(-113352+110580)N=L[b[-37625-(-37626)]]Z=L[b[-560216+560218]]f=A(-846821-(-844115))w=G[E]R=728428+12346106771721 u=L[b[-1008395+1008398]]Y=L[b[-656259+656263]]q=Y(f,R)E=u[q]f=A(168386-171459)D=w[E]E=.2 w=D(E)u=L[b[966353-966350]]R=13578968508300-642777 Y=L[b[418546+-418542]]q=Y(f,R)E=u[q]q=A(-407888+405329)Y=G[q]h=-789427+34916825975606 f=L[b[-148140-(-148143)]]X=25732065303799-(-971223)R=L[b[-518251+518255]]c=R(y,X)q=f[c]u=Y[q]y=183387+25816329036442 R=-1032385-(-1032603)f=1028121+-1027984 q=455728+-455614 Y=u(q,f,R)W=A(-590247+587624)q=L[b[-672190+672193]]f=L[b[936007+-936003]]c=A(-900839+898293)i=A(-166418-(-163653))i=N[i]R=f(c,y)u=q[R]R=A(-797254+794359)f=G[R]c=L[b[712313-712310]]y=L[b[-75345-(-75349)]]X=y(W,h)R=c[X]q=f[R]c=-250149-(-250269)X=-668795+668825 y=-845677+845677 R=707445+-707445 f=q(R,c,y,X)D={[E]=Y;[u]=f}i=i(N,Z,w,D)Z=i N=A(380843-383530)N=Z[N]N=N(Z)Z=nil N=G[A(1021022-1024059)]i={}end else x=not T C=C+B h=C<=k h=x and h x=C>=k x=T and x h=x or h x=8057832-805918 N=h and x h=9747389-404623 N=N or h end end else if N<512574+9757072 then if N<9202794-(-1045923)then if N<-940367+11112013 then N=true N=N and-859491+5824792 or 10810403-89182 else N=G[A(198438-201400)]i={D}end else N=466811+7370596 C=240212-240211 k=#W x=910467-910466 h=w(C,k)C=Y(W,h)h=nil k=L[X]T=C-x B=q(T)k[C]=B C=nil end else if N<9683790-(-670649)then N=-908158+11143049 else i=A(-225470-(-222592))D=d(1826-(-282804),{b[544100+-544099];b[483304+-483302]})N=G[i]w={N(D)}Z=w[869052+-869050]i=w[-921792+921793]D=i w=e(4404383-(-439448),{b[-419850+419851];b[-912922-(-912924)]})i=A(-403828-(-401090))N=G[i]i=N(w)w=225256+-225255.5 i=A(-876423+873781)N=G[i]i=N(w)N=D and 205522-201685 or 4600529-(-922574)end end end end else if N<-90479+11850385 then if N<481803+10589762 then if N<458584+10281746 then if N<127661+10584829 then if N<950772+9692286 then B=A(-476341-(-473267))o=A(595061-597986)N=G[o]k=G[B]o=N(k)N=A(161891-164543)G[N]=o N=-725746+5822164 else N=i and 1159054-128062 or-786896+1680999 end else N=d(73809+12977388,{E})Q={N()}i={j(Q)}N=G[A(-315398-(-312716))]end else if N<-219686+11263524 then if N<10027498-(-956814)then k=A(-1013462+1010810)N=G[k]k=A(-972541+969467)G[k]=N N=-1028117+6124535 else Z=L[b[-257045-(-257046)]]q=-215195+21296111529815 Y=A(-237105+234075)w=L[b[-969426+969428]]E=L[b[-37859-(-37862)]]u=E(Y,q)D=w[u]i=Z[D]D=L[b[-241152+241154]]u=A(-642732-(-640052))Y=-314919+1093490167844 w=L[b[119833-119830]]E=w(u,Y)Z=D[E]N=i==Z N=N and-1031956+13972341 or 12979026-(-104141)end else Y=A(48872+-51774)N=L[b[55614-55609]]f=460119+34193901517019 w=L[b[-599826-(-599827)]]E=L[b[899807-899805]]q=-514470+496716094093 u=E(Y,q)i=w[u]E=L[b[244738+-244737]]q=A(-251351+248706)u=L[b[273345+-273343]]Y=u(q,f)q=161307+1781635042594 w=E[Y]N[i]=w Y=A(871348-874069)N=L[b[-417468-(-417473)]]w=L[b[207006-207005]]D=nil R=A(-331539+328872)E=L[b[-277031+277033]]u=E(Y,q)Z=nil i=w[u]c=-17419+18293217158481 u=A(224965+-227524)E=G[u]Y=L[b[869340+-869339]]q=L[b[-240544+240546]]f=q(R,c)u=Y[f]w=E[u]u=-618150-(-618250)q=-658013+658268 Y=301869+-301669 E=w(u,Y,q)N[i]=E N=G[A(-385397+382445)]i={}end end else if N<-489920+12139329 then if N<350045+11125479 then if N<-487708+11684805 then Y=-844657+16691467747789 N=L[b[801606-801605]]D=L[b[-599308+599310]]w=L[b[-291016-(-291019)]]i=A(-31375-(-28554))u=A(1037134-1040125)i=N[i]E=w(u,Y)Z=D[E]i=i(N,Z)Z=i N=Z and 12903959-(-527859)or 11693769-(-54159)else D=L[b[872087-872085]]w=-692746+692983 Z=D*w D=6045887169489-(-771886)i=Z+D D=363376-363375 Z=-379677+35184372468509 N=i%Z L[b[-569776-(-569778)]]=N N=15036487-844834 Z=L[b[372787+-372784]]i=Z~=D end else N=i and 6246642-869504 or 591070+614610 end else if N<12050796-333869 then f=A(818630+-821587)R=31165429588010-(-546950)X=2539724037121-1021795 u=L[b[-697317-(-697319)]]Y=L[b[362741+-362738]]N=11702117-(-772091)q=Y(f,R)E=u[q]q=A(750209+-753020)w=Z[E]Y=G[q]f=L[b[533643+-533641]]R=L[b[-180202+180205]]y=A(438050+-441036)c=R(y,X)q=f[c]u=Y[q]c=A(902996+-905630)q=L[b[-150581+150583]]y=-69283+3977385317855 f=L[b[888721-888718]]R=f(c,y)Y=q[R]E=u[Y]D=w==E i=D else D=A(-782171+779462)q=27784054546111-76854 i=G[D]w=L[b[-381714+381716]]E=L[b[-980966-(-980969)]]Y=A(-845061+842034)u=E(Y,q)D=w[u]N=i[D]w=L[b[-583458-(-583460)]]q=24177266372656-(-932810)Y=A(953325-956197)E=L[b[69785-69782]]u=E(Y,q)D=w[u]i=N(D)Y=-913072+26063095406104 D=i i=L[b[-1036374-(-1036376)]]q=-508373+31424517487358 u=A(-898529+895655)w=L[b[-151702-(-151705)]]E=w(u,Y)N=i[E]w=L[b[-772924+772926]]E=L[b[-580769-(-580772)]]Y=A(866388-869111)u=E(Y,q)i=w[u]u=A(692229+-695017)Y=210290+29990231539995 D[N]=i i=L[b[-72130+72132]]w=L[b[-765325-(-765328)]]E=w(u,Y)N=i[E]i=false D[N]=i Y=28025364869457-(-885161)i=L[b[162990+-162988]]w=L[b[-760823+760826]]u=A(400510-403593)E=w(u,Y)Y=25951522057901-(-135)N=i[E]i=1018729+-1017730 u=A(227049+-229761)D[N]=i i=L[b[458819+-458817]]w=L[b[-179384+179387]]E=w(u,Y)N=i[E]i=true D[N]=i N=G[A(146101-148983)]i={D}end end end else if N<69714+12387551 then if N<506204+11775103 then if N<11106370-(-914316)then if N<12661602-805160 then L[D]=P N=L[D]N=N and 562762+12942743 or 3553329-137934 else R=15148140397563-(-55186)Z=A(-885127-(-882530))u=A(404008-407050)q=30383100224091-(-447721)Y=4595343376436-1046489 i=G[Z]D=L[b[-118174-(-118175)]]f=A(-935837-(-933253))w=L[b[884450-884448]]E=w(u,Y)Z=D[E]Y=A(312525-315418)N=i[Z]w=L[b[1036082+-1036081]]E=L[b[474573+-474571]]u=E(Y,q)D=w[u]w=L[b[534280-534277]]c=7097845558987-(-171550)u=L[b[584214+-584213]]Y=L[b[127224-127222]]q=Y(f,R)E=u[q]Y=L[b[157900-157899]]q=L[b[-962885-(-962887)]]R=A(342066+-344881)f=q(R,c)u=Y[f]Z={[D]=w,[E]=u}i=N(Z)N=true L[b[-802246-(-802250)]]=N N=12887792-187830 end else u=z(u)C=z(C)h=nil Y=nil y=nil f=nil E=z(E)E=t()c=z(c)D=z(D)q=z(q)w=z(w)y={}W=nil D=nil w=nil f=A(-317596+314486)q=A(777229+-779901)R=z(R)Y=A(-876866+874194)h=-480351+480352 L[E]=D D=t()L[D]=w X=nil u=G[Y]N=-168257+10241028 Y=A(-1005723-(-1003149))c=t()w=u[Y]u=t()W={}L[u]=w Y=G[q]R=A(-18483-(-15752))q=A(-558862-(-555890))w=Y[q]q=G[f]C=52103+-51847 f=A(667297+-669987)X=t()Y=q[f]f=G[R]R=A(53772+-56325)q=f[R]f=923948+-923948 R=t()L[R]=f f=931209-931207 L[c]=f f={}L[X]=y k=C y=-900016-(-900016)C=-959271+959272 B=C C=56797+-56797 T=B<C C=h-B end else if N<12412839-(-13700)then if N<11935185-(-445903)then D=U[-659908+659910]N=D and 8970063-(-400182)or-678967+5118596 Z=U[817981+-817980]else D=A(-277196+274373)i=G[D]w=L[b[750904+-750903]]E=L[b[710552+-710550]]q=-869183+14153165692157 Y=A(449219+-451827)u=E(Y,q)D=w[u]N=i[D]E=L[Z]Y=L[b[290439+-290438]]X=-492238+28760013371166 R=A(519546-522644)c=13968367401630-8502 q=L[b[693728-693726]]f=q(R,c)R=-294006+32686856943595 W=25143113945190-828074 u=Y[f]w=E[u]c=A(-793306-(-790662))f=A(649705-652525)u=L[b[69677+-69676]]Y=L[b[116685-116683]]q=Y(f,R)E=u[q]y=29360019309748-1036109 D=w[E]u=L[Z]q=L[b[593621-593620]]f=L[b[-282432-(-282434)]]R=f(c,y)Y=q[R]E=u[Y]c=3636206192446-(-376671)Y=L[b[-871097-(-871098)]]R=A(808176+-811246)q=L[b[-605399-(-605401)]]f=q(R,c)u=Y[f]w=E[u]i=N(D,w)D=i i=L[b[428748-428745]]R=748701+41745240950 E=L[b[-555734-(-555735)]]f=784718+33746789532692 q=A(-397596+394894)u=L[b[514891+-514889]]Y=u(q,f)w=E[Y]N=i[w]w=N y=A(-113041-(-110009))i=L[b[-687098+687101]]u=L[b[-79326+79327]]Y=L[b[-644684+644686]]f=A(229324+-232289)q=Y(f,R)E=u[q]N=i[E]E=N f=L[b[-324073+324074]]R=L[b[32433-32431]]c=R(y,X)q=f[c]Y=D[q]R=L[b[-4938+4939]]X=A(-771690-(-768584))c=L[b[-416205+416207]]y=c(X,W)f=R[y]q=w[f]u=Y>=q N=u and 384798+7139946 or-43379+10751239 i=u end else i=L[b[-134865+134866]]u=A(88280-91038)D=L[b[-961640-(-961642)]]Y=34190199895686-(-952235)w=L[b[434409+-434406]]E=w(u,Y)Z=D[E]N=i[Z]N=N and-730785+5303204 or-661077+7228866 end end else if N<-75288+12948205 then if N<-663657+13358098 then if N<817404+11720616 then N=i and-495586+14086684 or 2597467-453061 else D=A(-978578+975966)Z=G[D]N=Z and 15033959-847792 or-599859+10615580 i=Z end else E=L[b[621071+-621067]]w=not E N=w and 893085+14762509 or 4303950-18727 end else if N<246990+12779902 then N=L[b[791570+-791566]]E=A(-694816+691831)f=A(39760+-42741)Z=L[b[186034-186033]]w=G[E]u=L[b[-886641+886643]]Y=L[b[-893617-(-893620)]]R=662094+13470221041202 q=Y(f,R)E=u[q]D=w[E]y=A(-663135-(-660553))E=.2 f=A(-114818-(-112175))w=D(E)X=992424+29853501739429 R=731791+21337856588865 h=-70216+32646958632362 u=L[b[261987-261985]]Y=L[b[-101021-(-101024)]]q=Y(f,R)W=A(-271039-(-268090))E=u[q]q=A(-999694+997135)Y=G[q]f=L[b[-309896+309898]]R=L[b[-985262-(-985265)]]c=R(y,X)q=f[c]u=Y[q]f=-406498+406698 R=-423430-(-423685)q=755583-755483 c=A(-389140-(-386391))Y=u(q,f,R)i=A(-695491-(-692726))q=L[b[-974179-(-974181)]]y=3428962753888-22308 f=L[b[-591648-(-591651)]]R=f(c,y)u=q[R]R=A(57514-60409)i=N[i]f=G[R]c=L[b[383474+-383472]]y=L[b[552769+-552766]]X=y(W,h)R=c[X]y=-15157+15157 c=68063+-67863 X=-539540-(-539580)q=f[R]R=-383920+383920 f=q(R,c,y,X)D={[E]=Y;[u]=f}i=i(N,Z,w,D)N=A(-487719-(-485032))Z=i N=Z[N]N=N(Z)N=-505833+13589000 Z=nil else N=6982850-580006 end end end end end else if N<15572987-562707 then if N<13982097-(-53750)then if N<-800539+14376894 then if N<12504463-(-896749)then if N<-112131+13400971 then if N<12477829-(-778640)then N=G[A(-429006-(-426184))]i={}else Z=A(244469+-247310)i=G[Z]N=i and 284548+5894521 or 263104+5442281 end else N=L[b[156966-156956]]D=L[b[301788-301777]]Z[N]=D N=L[b[568635+-568623]]D={N(Z)}i={j(D)}N=G[A(-283509-(-280629))]end else if N<624150+12882330 then if N<13076029-(-407657)then N=A(-584899-(-582298))N=Z[N]N=N(Z)N=-362290+12110218 else N=752627+11389065 end else N=L[b[-133448-(-133449)]]E=A(-37139-(-34154))Z=L[b[-215951+215953]]f=A(-559398-(-556591))R=15217357481222-313688 w=G[E]u=L[b[-585131-(-585134)]]Y=L[b[-505376-(-505380)]]q=Y(f,R)R=346762481903-(-1011634)E=u[q]D=w[E]E=.2 w=D(E)X=507768+27181292614137 u=L[b[-631424-(-631427)]]Y=L[b[746066+-746062]]f=A(-838580-(-835767))q=Y(f,R)E=u[q]y=A(278418+-281140)q=A(565694+-568253)Y=G[q]f=L[b[-481079-(-481082)]]R=L[b[-915650-(-915654)]]h=27467228098022-(-558096)c=R(y,X)q=f[c]f=282542-282385 u=Y[q]y=-1038236+32622677152499 q=-874718-(-874852)R=-155430+155668 Y=u(q,f,R)c=A(752805-755465)q=L[b[245195-245192]]f=L[b[270863+-270859]]R=f(c,y)u=q[R]i=A(956422+-959187)W=A(-64169+61228)R=A(829367+-832262)f=G[R]i=N[i]c=L[b[-887680-(-887683)]]y=L[b[491524+-491520]]X=y(W,h)R=c[X]X=-381475-(-381507)q=f[R]R=504916-504916 y=1000328-1000328 c=-249459-(-249584)f=q(R,c,y,X)D={[E]=Y,[u]=f}i=i(N,Z,w,D)N=A(70114+-72801)Z=i N=Z[N]N=N(Z)N=G[A(714947+-717608)]Z=nil i={}end end else if N<-542537+14218897 then if N<43205+13553024 then if N<13725777-146480 then Y=-893615+14742009920895 R=262260+21813175265081 N=L[b[-928401+928402]]u=A(-485090+482374)D=L[b[45117+-45115]]w=L[b[210485+-210482]]E=w(u,Y)f=A(52826-55388)Z=D[E]E=A(97090+-99649)w=G[E]u=L[b[420208+-420206]]Y=L[b[-859555+859558]]q=Y(f,R)E=u[q]Y=365073-364818 u=318279+-318079 f=20994611170632-272152 D=w[E]E=-60433-(-60533)w={D(E,u,Y)}i=N(Z,j(w))E=A(-483749+481048)N=L[b[-493480-(-493484)]]Z=L[b[934502-934500]]D=L[b[-453784-(-453787)]]u=-826868+12524095763643 w=D(E,u)i=Z[w]Y=486470+33828872556866 D=L[b[-543838-(-543840)]]w=L[b[414454+-414451]]u=A(725700-728479)E=w(u,Y)Z=D[E]N[i]=Z N=L[b[366326-366322]]E=A(335804-338641)Z=L[b[619294-619292]]u=29810217102081-(-854840)D=L[b[18619-18616]]w=D(E,u)i=Z[w]w=A(133015+-135574)D=G[w]E=L[b[690254-690252]]q=A(486944-489977)u=L[b[82400+-82397]]Y=u(q,f)w=E[Y]E=-164657-(-164817)u=987410+-987210 Z=D[w]w=541111+-541031 D=Z(w,E,u)N[i]=D i=A(470046+-472784)N=G[i]Z=K(548850+8937230,{b[498080-498078];b[870598+-870595];b[252587-252586];b[-43901+43906];b[-502489-(-502493)]})i=N(Z)N=G[A(-614955-(-612359))]i={}else N=L[b[-214512-(-214516)]]i=N(Z)N=1591899-(-552507)end else n=L[D]GB=n N=n and-478377+2221098 or 13617740-(-855148)end else if N<-892406+14785767 then N=L[b[149985+-149981]]R=12967299921566-(-401656)y=A(68451-71238)E=A(-262162-(-259177))Z=L[b[-438228+438229]]w=G[E]u=L[b[-763094-(-763096)]]Y=L[b[658975-658972]]f=A(-286256-(-283375))q=Y(f,R)i=A(579350-582115)R=276201+18673287719694 E=u[q]W=A(842441-845279)f=A(386385+-389332)h=32641654945189-(-443834)D=w[E]E=.2 w=D(E)u=L[b[46443-46441]]Y=L[b[296961-296958]]X=17405318826716-(-120012)q=Y(f,R)E=u[q]q=A(163475-166034)Y=G[q]f=L[b[689357-689355]]R=L[b[647662-647659]]c=R(y,X)q=f[c]f=894608+-894388 u=Y[q]i=N[i]q=826950+-826830 R=-148848-(-149103)Y=u(q,f,R)y=-322554+27120465468750 c=A(471766-474566)q=L[b[466226+-466224]]f=L[b[437405+-437402]]R=f(c,y)u=q[R]R=A(289292-292187)f=G[R]c=L[b[-400250-(-400252)]]y=L[b[358033+-358030]]X=y(W,h)R=c[X]q=f[R]y=-296870-(-296870)R=504065-504065 c=-35735+35940 X=-839986+840028 f=q(R,c,y,X)D={[E]=Y;[u]=f}i=i(N,Z,w,D)N=A(-925843+923156)Z=i N=Z[N]N=N(Z)N=242190+1086743 Z=nil else y=A(570539-573393)X=77244+25224088797221 q=A(-1003817-(-1001258))N=14201554-(-770635)Y=G[q]f=L[b[326052-326050]]R=L[b[115820-115817]]c=R(y,X)R=225749+-225609 q=f[c]u=Y[q]q=154020+-153900 f=438671-438551 Y=u(q,f,R)w=Y end end end else if N<-568839+15038056 then if N<15113029-681948 then if N<13486191-(-823812)then if N<13483224-(-707333)then q=A(-428294-(-425532))f=13376114804241-290237 w=A(-903183+900571)D=G[w]E=L[b[-210421-(-210423)]]u=L[b[-24232-(-24235)]]Y=u(q,f)N=-382642+10398363 w=E[Y]Z=D[w]i=Z else D=L[b[419560-419557]]w=821156+-821146 Z=D*w D=-928719+928976 i=Z%D N=4846709-367311 L[b[363308-363305]]=i end else i=A(-501788-(-498978))N=G[i]Z=L[b[-441669+441670]]i=N(Z)N=-27772+3665527 end else if N<-131470+14591702 then if N<-643216+15099029 then N=1896395-690715 L[b[777527-777522]]=i Z=nil else N=882070+11566539 end else i={}N=G[A(-680299-(-677720))]end end else if N<625123+14191018 then if N<15260220-571865 then if N<-221042+14705860 then L[D]=GB S=389966-389965 F=L[l]m=F+S p=s[m]n=y+p p=707980-707724 N=n%p m=L[x]y=N N=8392966-563667 p=X+m m=-142621-(-142877)n=p%m X=n else N={}L[b[-761331-(-761333)]]=N i=L[b[106580-106577]]u=103326+35184371985506 f=A(265157+-267888)E=i q=798336+-798081 i=D%u L[b[-504992+504996]]=i Y=D%q q=63044-63042 u=Y+q L[b[-412873-(-412878)]]=u q=G[f]c=-198221+198222 y=c f=A(-982621+979654)Y=q[f]q=Y(Z)N=916200+6804995 c=-475829+475829 X=y<c Y=A(314638-317377)R=q w[D]=Y Y=194822-194770 f=-313004+313005 c=f-y end else N=L[b[-680783+680784]]u=A(-963539-(-960797))Y=30737955550575-(-213626)D=L[b[195216-195214]]w=L[b[-522211-(-522214)]]E=w(u,Y)q=A(1048158+-1051067)Z=D[E]E=L[b[-93091-(-93093)]]f=28069336733588-(-875386)u=L[b[498947+-498944]]Y=u(q,f)w=E[Y]u=N Y=L[b[688940-688936]]N=Y and-833345+6243605 or 7361170-(-917902)E=Y end else if N<15043833-48541 then N=E D=nil N[i]=w i=A(662675+-665413)w=K(6560906-(-380806),{b[-296512-(-296513)],b[226418+-226416],b[-489195+489198],Z})Z=z(Z)N=G[i]i=N(w)i={}N=G[A(-167699+164834)]else Y=679479+271594332743 N=L[b[-679351-(-679352)]]D=L[b[-107462+107464]]u=A(-862555+859863)w=L[b[598515+-598512]]E=w(u,Y)R=25520760636110-(-617374)Z=D[E]f=A(-902714+899846)E=A(841309-843868)w=G[E]u=L[b[-648412+648414]]Y=L[b[-221776-(-221779)]]q=Y(f,R)E=u[q]D=w[E]Y=584843+-584743 E=-379872-(-380127)u=202942+-202792 q=A(983150+-985979)w={D(E,u,Y)}E=A(930025-933105)i=N(Z,j(w))Y=22084771474022-934458 N=L[b[246139-246135]]Z=L[b[719213-719211]]u=-369863+5401255784090 D=L[b[296579+-296576]]w=D(E,u)u=A(-890759-(-887826))i=Z[w]f=4045757296531-944184 D=L[b[-125869+125871]]w=L[b[547901-547898]]E=w(u,Y)Z=D[E]N[i]=Z N=L[b[-725811+725815]]Z=L[b[-95311+95313]]E=A(84781-87799)u=2860483968255-(-116789)D=L[b[-684304-(-684307)]]w=D(E,u)i=Z[w]w=A(307319+-309878)D=G[w]E=L[b[-463503-(-463505)]]u=L[b[-163228+163231]]Y=u(q,f)u=627538+-627458 w=E[Y]E=-243767+243887 Z=D[w]w=988602-988402 D=Z(w,E,u)N[i]=D i=A(-1035811+1033073)N=G[i]Z=O(10127703-(-494609),{b[-958188-(-958190)],b[159713-159710];b[-471589-(-471590)];b[325200+-325196]})i=N(Z)N=G[A(-750088+747144)]i={}end end end end else if N<16267081-384009 then if N<371596+15099848 then if N<15319023-89607 then if N<712428+14481243 then if N<-162806+15229955 then w=A(-225926+223329)f=14568799927222-1024310 q=A(583881+-586782)D=G[w]E=L[b[345475+-345474]]u=L[b[-352713+352715]]Y=u(q,f)w=E[Y]Z=D[w]N=666726+14806888 i=Z else W=31959675321887-164861 R=L[b[873598-873596]]X=A(-317245+314148)c=L[b[-290953+290956]]y=c(X,W)f=R[y]N=-914048+4839965 Y=f end else w=L[b[-387395-(-387404)]]N={}E=w w=-407129+407130 u=w Z=N w=548699+-548699 D=-147935+147936 Y=u<w N=-623005+15979751 w=D-u end else if N<268810+15175985 then if N<-464306+15801355 then W=A(177367+-180477)X=G[W]W=A(-833694-(-831142))y=X[W]R=y N=324844+8445964 else w=w+u D=w<=E q=not Y D=q and D q=w>=E q=Y and q D=q or D q=-672130+2222035 N=D and q D=279857+13108834 N=N or D end else N=L[q]o=-491975-(-491976)k=108672+-108666 Q=N(o,k)N=A(412825-415477)k=A(376633+-379285)G[N]=Q o=G[k]k=827769-827767 N=o>k N=N and 62852+10564096 or 11007448-121037 end end else if N<16499839-791293 then if N<-687543+16315935 then if N<678730+14882721 then N=i and 11832360-(-166103)or 12517817-(-770975)else D=U[621255+-621253]Z=t()L[Z]=U[-596421-(-596422)]N=L[b[-506144+506145]]w=L[b[188669+-188667]]Y=A(674758-677513)E=L[b[-604643-(-604646)]]q=5165360600898-(-193059)u=E(Y,q)i=w[u]w=L[Z]N[i]=w N=L[b[186147-186146]]Y=A(808084+-810679)w=L[b[-821300-(-821302)]]q=-147433+20020213736531 E=L[b[-750668+750671]]u=E(Y,q)i=w[u]E=N w=D N=D and 28773+14943416 or 519884+13513333 end else E=A(719298-722176)w=G[E]u=d(9657991-743375,{b[585614-585613];b[379681-379679],b[408568+-408565]})E=w(u)N=4903109-617886 end else if N<514371+15320577 then C=t()p=nil T=A(123852+-126633)h={}L[C]=h k=H(6614923-(-549686),{C;R;c,u})x={}h=t()Y=nil L[h]=k r=A(-921034+917939)B=t()k={}L[B]=k w=nil k=G[T]V=L[B]y=nil s=A(410005+-412630)y=565032+28375338046581 l={[r]=V,[s]=p}T=k(x,l)k=H(-730362+16864747,{B,C,X,R;c;h})B=z(B)W=nil c=z(c)L[E]=T X=z(X)C=z(C)q=nil u=z(u)r=3085539640977-(-917259)L[D]=k c=A(189823-192456)R=z(R)u=A(-497452-(-494871))X=607459+9947830291765 W=-700044+622653239213 f=nil w=G[u]h=z(h)q=L[E]u=A(899502-902434)u=w[u]f=L[D]C=31721866715018-255447 R=f(c,y)l=18303419223512-(-398195)Y=q[R]u=u(w,Y)Y=A(-514475-(-511894))h=14288309514214-(-846359)y=A(30436-32990)w=G[Y]f=L[E]DB=9410253999326-293825 R=L[D]Y=A(149729+-152661)c=R(y,X)Y=w[Y]q=f[c]Y=Y(w,q)s=186140+28309580766306 q=A(-759820+757239)w=G[q]X=A(176611+-179550)V=A(-358775-(-355837))R=L[E]c=L[D]y=c(X,W)f=R[y]q=A(-631917+628985)q=w[q]q=q(w,f)f=A(330446-333027)w=t()L[w]=q q=G[f]c=L[E]W=A(-11830+9283)y=L[D]X=y(W,h)R=c[X]f=A(-240056+237124)f=q[f]f=f(q,R)c=L[E]B=A(129718-132512)y=L[D]W=A(-294122+291498)h=377263+9093563223771 X=y(W,h)R=c[X]q=u[R]R=A(-711753+708727)h=A(564523+-567248)y=L[E]R=q[R]X=L[D]W=X(h,C)c=y[W]R=R(q,c)c=t()L[c]=R R=e(10430695-(-722316),{c;E;D})X=t()y=R()x=-248152+35159437756748 L[X]=y y=L[X]h=L[E]C=L[D]k=C(B,x)W=h[k]h=L[c]y[W]=h h=A(-391272+388563)W=G[h]C=L[E]x=A(-228354-(-225332))k=L[D]B=k(x,l)h=C[B]y=W[h]x=A(-368590-(-365826))C=L[E]l=30433029501121-(-902810)k=L[D]m=-505061+8145562764214 B=k(x,l)x=A(-289902-(-286939))h=C[B]W=y(h)y=t()l=795773845539-(-98639)L[y]=W W=L[y]C=L[E]k=L[D]B=k(x,l)h=C[B]k=L[E]l=A(-773737-(-770748))B=L[D]x=B(l,r)C=k[x]W[h]=C x=A(-503129+500029)W=L[y]C=L[E]k=L[D]l=22477236424441-714263 B=k(x,l)h=C[B]B=A(873119+-876014)k=G[B]x=L[E]l=L[D]r=l(V,s)l=296539-296539 B=x[r]c=z(c)C=k[B]x=-752437+752757 V=A(660782+-663772)r=19086+-18806 B=-1042695+1042695 k=C(B,x,l,r)W[h]=k W=L[y]x=A(-939888+937313)s=-743305+13830774075569 l=22274012523058-1016238 C=L[E]NB=5137853177127-742351 k=L[D]B=k(x,l)h=C[B]B=A(443148-446043)k=G[B]x=L[E]l=L[D]r=l(V,s)B=x[r]r=-1008199+1008059 l=-845619+845619.5 C=k[B]x=406685+-406845 B=-946704.5-(-946705)k=C(B,x,l,r)W[h]=k l=818740+5034204056308 W=L[y]s=6261785342966-(-268141)C=L[E]k=L[D]x=A(-997004+994077)V=A(-551417+548408)B=k(x,l)h=C[B]B=A(800889-803448)k=G[B]x=L[E]l=L[D]r=l(V,s)B=x[r]x=247437-247412 C=k[B]l=929046+-929011 B=604922+-604897 k=C(B,x,l)l=21393893988132-962618 W[h]=k W=L[y]C=L[E]x=A(984571+-987459)k=L[D]B=k(x,l)h=C[B]J=323931+34350610795808 l=1000595+5896035829286 C=-878930+878930 W[h]=C W=L[y]C=L[E]x=A(-361619-(-358944))k=L[D]B=k(x,l)l=3819091266167-656261 h=C[B]C=true W[h]=C UB=1020647+5876499363785 W=L[y]s=-575552+28823088954541 F=455704+5838954321542 x=A(-23845-(-20807))C=L[E]k=L[D]V=A(296243+-298862)B=k(x,l)h=C[B]C=L[X]l=A(153323+-156240)W[h]=C C=A(906292+-909001)h=G[C]r=447749987853-220477 k=L[E]B=L[D]x=B(l,r)C=k[x]l=A(890027+-892662)W=h[C]i={}k=L[E]B=L[D]r=11941925673269-902013 x=B(l,r)C=k[x]h=W(C)l=10985415244516-(-104727)x=A(482847-485894)C=L[E]k=L[D]bB=32167382370124-(-586551)B=k(x,l)p=A(-326345-(-323376))W=C[B]B=A(-602465-(-599452))k=G[B]x=L[E]l=L[D]r=l(V,s)B=x[r]C=k[B]x=799073+-799058 B=-401415-(-401415)l=-119196+21889755789677 k=C(B,x)h[W]=k r=A(-1003529+1000754)C=L[E]x=A(765215+-767932)k=L[D]B=k(x,l)W=C[B]k=A(-97541+94832)C=L[y]V=1028564+11608066876233 h[W]=C C=G[k]B=L[E]x=L[D]l=x(r,V)V=7927026695683-61336 k=B[l]W=C[k]B=L[E]r=A(830806-833378)x=L[D]l=x(r,V)k=B[l]C=W(k)V=-732151+30983320020050 W=t()L[W]=C r=A(662902+-665902)C=L[W]B=L[E]x=L[D]l=x(r,V)k=B[l]l=A(-236890-(-234331))x=G[l]r=L[E]V=L[D]s=V(p,m)l=r[s]B=x[l]V=48679+-48424 l=146000-145900 r=-603060-(-603260)x=B(l,r,V)r=A(-635645-(-632935))V=-732780+24618494286643 m=8338209626164-35082 C[k]=x C=L[W]B=L[E]p=A(-496157+493379)x=L[D]l=x(r,V)k=B[l]r=A(71850+-74702)B=-167176+167178 C[k]=B C=L[W]B=L[E]x=L[D]V=23583000962617-(-689324)l=x(r,V)s=15497215485649-(-456031)k=B[l]B=.3 C[k]=B V=98353+32322829466266 C=L[W]r=A(313494+-316147)B=L[E]x=L[D]l=x(r,V)V=A(387665+-390504)k=B[l]B=L[y]C[k]=B B=A(665282-667991)k=G[B]x=L[E]l=L[D]r=l(V,s)s=968115+19823145557595 B=x[r]C=k[B]V=A(703643+-706248)x=L[E]l=L[D]r=l(V,s)B=x[r]k=C(B)r=A(301812+-304795)B=L[E]x=L[D]V=71265+27128689138423 l=x(r,V)C=B[l]l=A(-794698-(-792139))x=G[l]r=L[E]V=L[D]s=V(p,m)V=-434570+434650 l=r[s]B=x[l]l=-959506+959566 r=-634331-(-634391)x=B(l,r,V)k[C]=x r=A(827152-830173)V=10590296542246-63715 B=L[E]x=L[D]l=x(r,V)C=B[l]B=969030-969029 k[C]=B V=27103754465411-(-147658)B=L[E]S=30369976762337-(-702301)x=L[D]r=A(-661255+658152)l=x(r,V)C=B[l]B=-937825+937825.5 k[C]=B B=L[E]x=L[D]r=A(800711+-803444)V=26641629872410-659621 l=x(r,V)m=A(-132129-(-129453))r=A(249306-252117)C=B[l]l=G[r]V=L[E]s=L[D]p=s(m,F)m=472065+27899528085182 r=V[p]x=l[r]p=A(-258210+255323)r=L[E]V=L[D]s=V(p,m)l=r[s]B=x[l]m=A(163930-166657)s=A(37138-40210)V=112484+29727169674926 r=A(735018+-737842)p=28316190622744-118935 k[C]=B B=L[E]x=L[D]l=x(r,V)C=B[l]ZB=28709037560872-548848 x=A(-449561-(-446852))B=L[y]jB=A(-797+-2252)k[C]=B B=G[x]l=L[E]r=L[D]V=r(s,p)wB=-174979+22323075388445 x=l[V]p=21024738227978-823500 C=B[x]s=A(-358377-(-355407))l=L[E]r=L[D]V=r(s,p)x=l[V]s=16816808413057-(-775957)B=C(x)V=A(-619640+617037)F=23078594947778-147656 p=6962591275277-(-455581)x=L[E]l=L[D]r=l(V,s)C=x[r]LB=552801+24411911322886 l=L[E]r=L[D]s=A(939770+-942684)V=r(s,p)x=l[V]B[C]=x s=26058942755999-476473 V=A(-798178-(-795550))x=L[E]l=L[D]r=l(V,s)C=x[r]r=A(129423-132318)l=G[r]V=L[E]s=L[D]p=s(m,F)r=V[p]s=-608109-(-608109)x=l[r]V=-31266-(-31246)p=221057-221032 r=766182+-766181 l=x(r,V,s,p)V=A(895940-898569)B[C]=l x=L[E]l=L[D]F=31954978383119-(-742673)s=-765092+28356485537848 r=l(V,s)C=x[r]r=A(201376+-204271)l=G[r]V=L[E]m=A(278679-281480)s=L[D]p=s(m,F)r=V[p]x=l[r]r=-993291+993291 p=284965-284957 m=A(-749921-(-747280))vB=-1041531+17924155589909 s=983566-983566 V=-848225+848235 l=x(r,V,s,p)V=A(138229-140866)s=26897684840720-(-569309)B[C]=l x=L[E]l=L[D]p=8712531071722-(-720111)r=l(V,s)C=x[r]x=997218-997217 B[C]=x s=28804233574018-(-966115)x=L[E]V=A(-954399-(-951656))l=L[D]r=l(V,s)C=x[r]l=L[E]r=L[D]s=A(-375720-(-372992))V=r(s,p)s=2698729255133-584693 x=l[V]F=22442950323148-(-490758)B[C]=x x=L[E]V=A(529198-531754)l=L[D]r=l(V,s)C=x[r]r=A(755532-758091)l=G[r]V=L[E]s=L[D]p=s(m,F)r=V[p]x=l[r]r=528872-528772 V=-260137+260337 s=326343+-326088 l=x(r,V,s)V=A(261674-264598)s=30602287722365-243667 B[C]=l x=L[E]l=L[D]r=l(V,s)F=A(-897994-(-895201))C=x[r]x=-889876+889892 f=nil s=14306797120688-545450 B[C]=x V=A(-398697+395899)x=L[E]l=L[D]r=l(V,s)V=A(580084-582895)C=x[r]r=G[V]s=L[E]p=L[D]m=p(F,S)V=s[m]F=26401234690658-29276 l=r[V]V=L[E]m=A(-327760+325128)s=L[D]p=s(m,F)r=V[p]x=l[r]s=550180+22452358284211 V=A(-475531-(-472811))B[C]=x x=L[E]l=L[D]r=l(V,s)V=A(266110-268921)C=x[r]r=G[V]s=L[E]p=L[D]F=A(-48780+46066)S=-842007+19804099755293 m=p(F,S)AB=186896909854-214471 V=s[m]l=r[V]V=L[E]m=A(-249105+246236)F=-438375+14799864646482 s=L[D]p=s(m,F)r=V[p]x=l[r]V=A(590607+-593511)m=66933+116942682817 B[C]=x x=L[E]s=19590816248656-(-45138)l=L[D]r=l(V,s)dB=441732+7716462989445 C=x[r]x=L[y]B[C]=x l=A(589307-592016)x=G[l]r=L[E]V=L[D]S=3454515586853-(-319267)p=A(-397749-(-395110))s=V(p,m)l=r[s]C=x[l]m=34623010014679-(-719139)r=L[E]p=A(847529-850534)V=L[D]s=V(p,m)l=r[s]x=C(l)p=11535132805266-(-593001)s=A(-165734-(-162958))l=L[E]r=L[D]V=r(s,p)C=l[V]r=L[E]m=-803290+8455153144123 F=A(963645+-966732)p=A(468883-471505)V=L[D]s=V(p,m)l=r[s]x[C]=l p=10028936073284-966150 l=L[E]r=L[D]s=A(531657+-534255)V=r(s,p)C=l[V]V=A(791857-794752)r=G[V]s=L[E]p=L[D]m=p(F,S)V=s[m]l=r[V]m=-977214-(-977229)V=-285445+285446 p=-353064+353064 s=-220382+220362 r=l(V,s,p,m)x[C]=r s=A(-986009+983314)p=35096781689963-136340 l=L[E]S=15867888911941-(-972440)F=A(-452935+449976)r=L[D]V=r(s,p)C=l[V]V=A(-711238+708343)r=G[V]s=L[E]p=L[D]m=p(F,S)p=957658+-957658 u=nil V=s[m]m=721907+-721877 l=r[V]s=11029+-11019 V=800845+-800845 r=l(V,s,p,m)x[C]=r p=-775185+31354045238553 l=L[E]r=L[D]s=A(-444905+442045)V=r(s,p)C=l[V]l=-16492+16493 s=A(-235541+232742)x[C]=l p=903649+29639578332169 l=L[E]F=A(-378985-(-376127))r=L[D]V=r(s,p)p=A(-118980+116210)m=8999707385330-(-897644)C=l[V]iB=909811+26930330455817 r=L[E]V=L[D]s=V(p,m)l=r[s]p=149588+17194409613042 x[C]=l s=A(987853+-990962)l=L[E]r=L[D]V=r(s,p)C=l[V]S=672869+11272015646747 V=A(528729+-531288)r=G[V]s=L[E]p=L[D]m=p(F,S)p=-659190-(-659330)V=s[m]l=r[V]V=-626472+626592 s=69932+-69812 r=l(V,s,p)x[C]=r p=15962300128166-97949 s=A(188833-191581)l=L[E]S=A(-997285-(-994393))r=L[D]V=r(s,p)s=A(-566628-(-563777))C=l[V]l=-957472-(-957481)x[C]=l l=L[E]p=8068978942380-(-1010945)r=L[D]V=r(s,p)s=A(-791288-(-788477))C=l[V]V=G[s]p=L[E]m=L[D]F=m(S,J)s=p[F]r=V[s]s=L[E]S=-775098+9134413472855 F=A(819363-822132)p=L[D]m=p(F,S)V=s[m]l=r[V]x[C]=l p=4839586188309-(-785592)l=L[E]S=A(-320870-(-317762))r=L[D]s=A(-1028276-(-1025728))V=r(s,p)s=A(741450+-744261)C=l[V]V=G[s]p=L[E]m=L[D]J=371170+26063924069766 F=m(S,J)s=p[F]r=V[s]J=A(-66721-(-63631))F=A(553336-555998)s=L[E]p=L[D]S=169466+2754274963208 m=p(F,S)p=641701+13552118124033 V=s[m]l=r[V]x[C]=l S=7885078598356-1016957 m=A(-660556-(-657873))s=A(-951241+948362)l=L[E]r=L[D]V=r(s,p)C=l[V]r=A(-478254-(-475545))l=L[y]x[C]=l l=G[r]V=L[E]F=28762652552632-(-558745)s=L[D]p=s(m,F)m=A(101172+-103935)r=V[p]F=25197226582196-635615 C=l[r]V=L[E]s=L[D]p=s(m,F)r=V[p]l=C(r)C=t()L[C]=l l=L[C]F=8970034144044-4828 V=L[E]m=A(374641+-377254)s=L[D]p=s(m,F)r=V[p]IB=A(699472-702558)F=A(515012+-517619)s=L[E]p=L[D]m=p(F,S)F=20382830572351-(-733652)V=s[m]l[r]=V zB=138692+12024204605467 l=L[C]V=L[E]s=L[D]m=A(960723+-963716)p=s(m,F)r=V[p]p=A(395220+-398115)s=G[p]m=L[E]F=L[D]S=F(J,AB)p=m[S]S=-344841-(-344881)V=s[p]F=941003-941003 p=-891773+891773 m=676516+-676316 s=V(p,m,F,S)m=A(708236-710922)l[r]=s l=L[C]F=30337436515100-99310 V=L[E]AB=835436+5002557278637 s=L[D]p=s(m,F)r=V[p]p=A(171340+-174235)s=G[p]J=A(-419265-(-416374))m=L[E]F=L[D]S=F(J,AB)p=m[S]V=s[p]J=A(-204942-(-202112))p=293118+-293117.5 m=800856-800956 S=22086+-22031 F=669840+-669840 s=V(p,m,F,S)l[r]=s l=L[C]m=A(415426+-418042)V=L[E]AB=207352+14743880397017 s=L[D]F=14986760745265-(-158225)p=s(m,F)r=V[p]p=A(-846685-(-844126))s=G[p]m=L[E]F=L[D]S=F(J,AB)p=m[S]S=26279014172312-169675 m=208149+-207949 J=A(612832+-615640)F=489856-489601 V=s[p]p=861758+-861658 s=V(p,m,F)AB=-25723+24454334664950 m=A(932164+-935144)l[r]=s l=L[C]V=L[E]s=L[D]F=5119501463664-599841 p=s(m,F)F=-556018+14425400088111 r=V[p]V=170658+-170658 l[r]=V l=L[C]V=L[E]m=A(-406349-(-403430))s=L[D]p=s(m,F)r=V[p]s=L[E]F=A(1013007+-1015575)p=L[D]m=p(F,S)V=s[m]F=-394542+13574653599199 l[r]=V l=L[C]m=A(1017128-1020026)V=L[E]s=L[D]p=s(m,F)r=V[p]p=A(315543+-318102)s=G[p]m=L[E]F=L[D]S=F(J,AB)p=m[S]V=s[p]F=-465575-(-465830)m=315878+-315623 p=945661+-945406 s=V(p,m,F)AB=A(630551-633448)m=A(-660065-(-657171))l[r]=s aB=22059228880167-(-1002233)F=-608617+29733530517374 l=L[C]V=L[E]s=L[D]p=s(m,F)m=A(523148+-526232)F=187469+13487062481979 r=V[p]V=-503260-(-503273)l[r]=V l=L[C]V=L[E]s=L[D]p=s(m,F)m=A(155099+-157910)r=V[p]p=G[m]F=L[E]S=L[D]J=S(AB,NB)AB=25903201954401-(-312509)m=F[J]s=p[m]m=L[E]J=A(-750233-(-747407))F=L[D]S=F(J,AB)p=m[S]V=s[p]l[r]=V l=L[C]F=362172+7942269437878 V=L[E]m=A(-885855+882993)s=L[D]p=s(m,F)r=V[p]S=509631+14137560208120 AB=30099860141517-(-606451)V=L[y]l[r]=V F=A(857175-860112)V=A(29814-32523)r=G[V]s=L[E]p=L[D]m=p(F,S)V=s[m]l=r[V]J=A(517569-520403)s=L[E]S=-447998+7913240372322 F=A(-390725+387710)p=L[D]m=p(F,S)V=s[m]r=l(V)m=A(-253301-(-250190))V=L[E]s=L[D]F=19214286465813-329762 p=s(m,F)l=V[p]p=A(-298658+295645)s=G[p]m=L[E]F=L[D]S=F(J,AB)p=m[S]m=-564581+564589 V=s[p]p=851230+-851230 s=V(p,m)r[l]=s S=A(-64333+61516)F=15982220275266-397616 V=L[E]s=L[D]m=A(31107+-33724)p=s(m,F)l=V[p]J=18380525305667-155092 s=A(691928-694637)V=L[C]r[l]=V V=G[s]p=L[E]m=L[D]F=m(S,J)S=A(407135+-410075)s=p[F]J=-816414+4049902156923 l=V[s]p=L[E]m=L[D]F=m(S,J)NB=9260077971175-484879 s=p[F]S=-774075+20821807625626 V=l(s)F=A(766867-769671)s=L[E]p=L[D]m=p(F,S)l=s[m]m=A(-415473-(-412914))p=G[m]AB=A(847359+-850223)F=L[E]S=L[D]J=S(AB,NB)S=-750462-(-750717)NB=-250754+17199861887691 r=nil m=F[J]s=p[m]F=-42753-(-42953)m=468130+-468030 p=s(m,F,S)F=A(-950450-(-947346))gB=A(298158-300721)V[l]=p J=A(598919-601959)s=L[E]S=765587+6804175707597 p=L[D]m=p(F,S)l=s[m]s=-586341+586342 V[l]=s s=L[E]p=L[D]F=A(-516344+513651)S=34373924822488-(-811182)m=p(F,S)l=s[m]S=2838357654023-(-838434)s=.7 V[l]=s F=A(-582088+579508)AB=32001403301192-865043 s=L[E]p=L[D]m=p(F,S)k=nil p=A(-60256+57547)l=s[m]s=L[C]V[l]=s s=G[p]m=L[E]F=L[D]S=F(J,AB)AB=8159587595015-(-72656)p=m[S]l=s[p]m=L[E]J=A(105234-108069)F=L[D]S=F(J,AB)p=m[S]s=l(p)l=t()L[l]=s s=L[l]J=A(482595-485324)m=L[E]AB=-620319+10723436694176 F=L[D]S=F(J,AB)p=m[S]AB=A(271925+-274847)F=L[E]S=L[D]J=S(AB,NB)AB=8346483485701-(-893737)m=F[J]s[p]=m s=L[l]m=L[E]J=A(-180065+177202)F=L[D]S=F(J,AB)p=m[S]S=A(-559358+556463)F=G[S]J=L[E]AB=L[D]NB=AB(jB,UB)S=J[NB]m=F[S]AB=793896+-793896 NB=885376-885336 J=-358343-(-358543)S=-292463-(-292463)F=m(S,J,AB,NB)s[p]=F s=L[l]AB=117423+22202419649971 jB=A(-855875+853104)m=L[E]J=A(664326-667305)F=L[D]S=F(J,AB)p=m[S]S=A(358500-361395)F=G[S]J=L[E]UB=-899253+23333246182182 AB=L[D]NB=AB(jB,UB)S=J[NB]UB=451618+27321920179600 jB=A(-456618+453914)NB=-149569+149674 m=F[S]tB=A(-723852+721237)J=-640707-(-640607)S=-1015014+1015014.5 AB=-973073+973073 F=m(S,J,AB,NB)s[p]=F s=L[l]AB=-635199+20620381624001 J=A(615557+-618349)m=L[E]F=L[D]S=F(J,AB)p=m[S]S=A(-592799+590240)F=G[S]J=L[E]AB=L[D]NB=AB(jB,UB)S=J[NB]AB=-41727-(-41827)m=F[S]S=-729985-(-730240)J=-86873-(-87023)F=m(S,J,AB)J=A(226670+-229738)s[p]=F s=L[l]m=L[E]AB=-611317+2574273337507 F=L[D]S=F(J,AB)p=m[S]m=-757066+757066 s[p]=m s=L[l]AB=11715022008165-(-878058)m=L[E]J=A(-61648-(-58632))F=L[D]NB=5712201220578-(-526465)S=F(J,AB)AB=A(-853919-(-851172))p=m[S]UB=6264179985683-(-704081)jB=A(-20418+17694)F=L[E]S=L[D]J=S(AB,NB)m=F[J]J=A(-834971+832115)s[p]=m s=L[l]m=L[E]F=L[D]AB=27028606697933-(-667485)S=F(J,AB)p=m[S]S=A(1014180-1016739)F=G[S]J=L[E]AB=L[D]NB=AB(jB,UB)S=J[NB]J=-806880-(-807135)AB=-1000202-(-1000457)m=F[S]S=188460+-188205 F=m(S,J,AB)s[p]=F s=L[l]J=A(-108607-(-105532))AB=19199264527931-111439 m=L[E]F=L[D]S=F(J,AB)J=A(64073+-67072)p=m[S]m=-380777+380790 s[p]=m s=L[l]m=L[E]AB=-565915+32166460366109 UB=A(-301540+298516)F=L[D]S=F(J,AB)p=m[S]J=A(-968934-(-966123))S=G[J]AB=L[E]NB=L[D]jB=NB(UB,bB)J=AB[jB]jB=A(803802+-806865)UB=61245+27141534155297 F=S[J]J=L[E]AB=L[D]NB=AB(jB,UB)S=J[NB]m=F[S]jB=A(555968+-558718)s[p]=m AB=11119648028138-(-400975)s=L[l]NB=4896249805679-(-986488)J=A(-875534+872838)m=L[E]F=L[D]S=F(J,AB)p=m[S]m=L[y]s[p]=m m=A(664858-667567)p=G[m]F=L[E]S=L[D]AB=A(-750344-(-747265))J=S(AB,NB)NB=231090+11171448016288 m=F[J]AB=A(345149+-347726)s=p[m]F=L[E]S=L[D]J=S(AB,NB)AB=6035136712124-(-359742)UB=-892819+20878471562637 m=F[J]p=s(m)m=L[E]F=L[D]J=A(-858779+855697)S=F(J,AB)s=m[S]S=A(271544+-274557)F=G[S]J=L[E]AB=L[D]NB=AB(jB,UB)S=J[NB]AB=-920958+29551974335295 NB=A(476218-479294)m=F[S]S=-233382-(-233382)J=-1002334-(-1002342)F=m(S,J)p[s]=F m=L[E]jB=807980+10085037620780 J=A(-981507-(-978553))bB=16889214226155-(-675789)F=L[D]S=F(J,AB)s=m[S]F=A(-634421-(-631712))m=L[l]p[s]=m m=G[F]S=L[E]J=L[D]AB=J(NB,jB)NB=A(384831+-387765)jB=6515904494393-(-938145)F=S[AB]s=m[F]S=L[E]J=L[D]AB=J(NB,jB)F=S[AB]m=s(F)AB=A(971786+-974380)NB=3627679423271-627854 F=L[E]S=L[D]J=S(AB,NB)s=F[J]UB=A(-721922-(-719334))J=A(528084-530643)S=G[J]AB=L[E]NB=L[D]jB=NB(UB,bB)NB=128142-128042 J=AB[jB]AB=-103463+103613 F=S[J]J=-377051-(-377306)p=nil S=F(J,AB,NB)m[s]=S F=L[E]UB=-767557+13865047396221 NB=972522+5705457988470 AB=A(987568+-990497)S=L[D]J=S(AB,NB)s=F[J]F=-583726+583727 AB=A(-679479+676728)NB=6466036511509-(-792749)B=nil m[s]=F F=L[E]S=L[D]J=S(AB,NB)NB=-817428+13706246050306 s=F[J]F=.7 AB=A(-326936+324286)m[s]=F F=L[E]S=L[D]J=S(AB,NB)S=A(233455-236164)s=F[J]F=L[l]m[s]=F F=G[S]jB=A(578188+-581236)J=L[E]AB=L[D]NB=AB(jB,UB)UB=695658+17189472682458 S=J[NB]s=F[S]J=L[E]jB=A(-772016-(-768939))AB=L[D]NB=AB(jB,UB)S=J[NB]UB=30906105929799-(-956400)F=s(S)s=t()L[s]=F jB=A(792335-795151)F=L[s]J=L[E]AB=L[D]NB=AB(jB,UB)bB=898746+22211530109357 S=J[NB]UB=A(971596-974172)AB=L[E]NB=L[D]jB=NB(UB,bB)J=AB[jB]F[S]=J jB=A(-998671+995642)F=L[s]J=L[E]AB=L[D]UB=128393+23065973650539 NB=AB(jB,UB)S=J[NB]NB=A(-972401+969506)AB=G[NB]jB=L[E]m=nil UB=L[D]bB=UB(gB,vB)NB=jB[bB]bB=613069+-613044 vB=83436+8501982579083 jB=-1005494+1005519 UB=531668+-531668 J=AB[NB]NB=-759302-(-759302)OB=A(820633+-823417)AB=J(NB,jB,UB,bB)eB=A(-733595-(-730914))gB=A(979155-981812)F[S]=AB UB=10360404376158-173958 F=L[s]J=L[E]jB=A(-144642+141951)AB=L[D]NB=AB(jB,UB)S=J[NB]NB=A(-261422-(-258527))AB=G[NB]R=nil jB=L[E]UB=L[D]bB=UB(gB,vB)NB=jB[bB]jB=331492+-331522 UB=675080+-675080 bB=-257827-(-257832)J=AB[NB]vB=413890+12934676514501 NB=-19933-(-19934)AB=J(NB,jB,UB,bB)F[S]=AB F=L[s]jB=A(-579539+576672)UB=-124097+10061703198478 J=L[E]gB=A(-617293-(-614180))AB=L[D]NB=AB(jB,UB)S=J[NB]NB=A(239586-242145)AB=G[NB]jB=L[E]UB=L[D]bB=UB(gB,vB)NB=jB[bB]J=AB[NB]UB=-1040665+1040745 NB=593470-593215 jB=-861687+861767 AB=J(NB,jB,UB)UB=20217005508943-(-56183)jB=A(-557807-(-554846))F[S]=AB F=L[s]bB=4778911731242-(-457351)J=L[E]AB=L[D]NB=AB(jB,UB)S=J[NB]J=-371763-(-371763)UB=15773905375197-553772 F[S]=J F=L[s]J=L[E]AB=L[D]jB=A(577922-581018)NB=AB(jB,UB)S=J[NB]UB=A(873584+-876141)AB=L[E]gB=A(-104667+101784)NB=L[D]jB=NB(UB,bB)J=AB[jB]vB=988006+34973168249911 F[S]=J UB=26481186696980-442089 F=L[s]J=L[E]jB=A(836946+-839672)AB=L[D]NB=AB(jB,UB)S=J[NB]NB=A(-518799+516240)AB=G[NB]jB=L[E]UB=L[D]bB=UB(gB,vB)vB=A(-810988-(-808215))NB=jB[bB]J=AB[NB]NB=-961128+961383 jB=-704343-(-704598)UB=509488-509233 AB=J(NB,jB,UB)F[S]=AB jB=A(-854434-(-851689))F=L[s]J=L[E]UB=1761000884286-984330 AB=L[D]NB=AB(jB,UB)S=J[NB]J=489+-473 UB=205155+23464196917579 F[S]=J jB=A(240728+-243726)F=L[s]J=L[E]AB=L[D]N=G[A(923016-925620)]NB=AB(jB,UB)jB=A(352262-355073)S=J[NB]NB=G[jB]UB=L[E]bB=L[D]gB=bB(vB,iB)jB=UB[gB]AB=NB[jB]gB=A(-388347+385579)jB=L[E]UB=L[D]vB=833680+12880647495390 bB=UB(gB,vB)NB=jB[bB]UB=62977+28360447851925 jB=A(-562843+559812)gB=A(-375700-(-372816))J=AB[NB]F[S]=J F=L[s]J=L[E]AB=L[D]NB=AB(jB,UB)S=J[NB]J=L[y]UB=A(-376468-(-373611))F[S]=J J=A(-651258-(-648549))S=G[J]AB=L[E]NB=L[D]bB=2917407727423-219633 jB=NB(UB,bB)bB=776644+18915784624292 J=AB[jB]F=S[J]AB=L[E]NB=L[D]UB=A(845050+-848038)jB=NB(UB,bB)EB=A(229561-232234)J=AB[jB]UB=-926965+14054547406469 S=F(J)J=L[E]jB=A(258828-261531)AB=L[D]NB=AB(jB,UB)F=J[NB]vB=32469381071318-149191 NB=A(-176300+173287)AB=G[NB]jB=L[E]UB=L[D]iB=A(521340+-524201)bB=UB(gB,vB)NB=jB[bB]J=AB[NB]NB=-939525-(-939525)jB=-518758-(-518770)AB=J(NB,jB)S[F]=AB jB=A(-397175+394320)bB=A(101298+-104389)UB=29000823859957-30261 J=L[E]AB=L[D]NB=AB(jB,UB)gB=125146+20570451786896 F=J[NB]AB=A(-407985-(-405276))J=L[s]S[F]=J J=G[AB]NB=L[E]jB=L[D]UB=jB(bB,gB)vB=26275909937519-(-935516)gB=-621803+912688250516 AB=NB[UB]F=J[AB]bB=A(338586-341436)NB=L[E]jB=L[D]UB=jB(bB,gB)AB=NB[UB]J=F(AB)F=t()bB=A(967778-970784)L[F]=J J=L[F]NB=L[E]jB=L[D]gB=10705666899731-256922 UB=jB(bB,gB)AB=NB[UB]gB=A(191681-194442)jB=L[E]UB=L[D]bB=UB(gB,vB)NB=jB[bB]J[AB]=NB bB=A(970235+-973313)gB=-862506+7378725795477 J=L[F]NB=L[E]jB=L[D]UB=jB(bB,gB)AB=NB[UB]UB=A(479781-482676)jB=G[UB]bB=L[E]gB=L[D]vB=gB(iB,LB)UB=bB[vB]gB=249970-249970 vB=10409-10379 bB=156596+-156476 NB=jB[UB]UB=183958+-183958 jB=NB(UB,bB,gB,vB)bB=A(-922873+920300)J[AB]=jB gB=4956585614500-201632 J=L[F]NB=L[E]jB=L[D]UB=jB(bB,gB)LB=943971+24568197367117 AB=NB[UB]UB=A(-218966+216071)x=nil iB=A(435409+-438163)jB=G[UB]bB=L[E]gB=L[D]vB=gB(iB,LB)UB=bB[vB]NB=jB[UB]UB=-945418-(-945419)vB=-754693-(-754658)gB=449932+-449931 bB=148393-148518 jB=NB(UB,bB,gB,vB)J[AB]=jB J=L[F]LB=278473+27168116142498 bB=A(500142+-503058)gB=-54280+20133646710951 NB=L[E]jB=L[D]UB=jB(bB,gB)AB=NB[UB]UB=A(-291746-(-289187))jB=G[UB]bB=L[E]gB=L[D]iB=A(198696+-201671)vB=gB(iB,LB)UB=bB[vB]vB=2344148945572-427617 bB=-629444+629581 gB=1020179+-1019961 NB=jB[UB]UB=446024+-445910 jB=NB(UB,bB,gB)gB=-645615+12449800630420 J[AB]=jB J=L[F]NB=L[E]bB=A(-503543-(-500583))LB=12935132733208-542609 jB=L[D]UB=jB(bB,gB)AB=NB[UB]NB=1012661+-1012661 J[AB]=NB J=L[F]NB=L[E]bB=A(141062+-143620)gB=2873428141799-(-958035)jB=L[D]UB=jB(bB,gB)AB=NB[UB]jB=L[E]UB=L[D]gB=A(-527644+524600)bB=UB(gB,vB)NB=jB[bB]J[AB]=NB gB=20951781677873-(-985835)iB=A(432807-435775)bB=A(406075+-408759)J=L[F]NB=L[E]jB=L[D]UB=jB(bB,gB)AB=NB[UB]UB=A(-361052+358493)jB=G[UB]bB=L[E]gB=L[D]vB=gB(iB,LB)gB=-777771+778026 UB=bB[vB]bB=379990-379735 NB=jB[UB]UB=135270-135015 jB=NB(UB,bB,gB)J[AB]=jB J=L[F]gB=15278824971955-(-474391)bB=A(156154+-159171)NB=L[E]LB=A(-184768-(-181804))jB=L[D]UB=jB(bB,gB)gB=-449029+5984416572647 AB=NB[UB]NB=-44652-(-44663)J[AB]=NB bB=A(-126495-(-123501))J=L[F]NB=L[E]jB=L[D]UB=jB(bB,gB)bB=A(116130+-118941)AB=NB[UB]UB=G[bB]gB=L[E]vB=L[D]iB=vB(LB,ZB)bB=gB[iB]jB=UB[bB]LB=-187923+20057737839247 iB=A(861967+-864959)bB=L[E]gB=L[D]vB=gB(iB,LB)UB=bB[vB]NB=jB[UB]gB=640360+32465601738149 J[AB]=NB J=L[F]NB=L[E]vB=202808+28497833958302 jB=L[D]bB=A(-824909-(-822271))UB=jB(bB,gB)AB=NB[UB]iB=A(239208-242242)NB=L[y]gB=A(783784-786695)J[AB]=NB NB=A(958286+-960995)AB=G[NB]jB=L[E]UB=L[D]bB=UB(gB,vB)NB=jB[bB]gB=A(462362+-465298)vB=151679+21818737399601 J=AB[NB]jB=L[E]UB=L[D]bB=UB(gB,vB)LB=145430+20243793276092 NB=jB[bB]AB=J(NB)bB=A(-690262+687712)gB=20745427705344-309316 NB=L[E]jB=L[D]UB=jB(bB,gB)J=NB[UB]UB=A(378093-381106)jB=G[UB]bB=L[E]gB=L[D]vB=gB(iB,LB)UB=bB[vB]NB=jB[UB]vB=A(354077+-356904)iB=13921503210190-4476 UB=33583-33583 bB=-838990+838996 jB=NB(UB,bB)AB[J]=jB NB=L[E]gB=-767121+34699386647471 jB=L[D]bB=A(-126751+123732)UB=jB(bB,gB)J=NB[UB]jB=A(-104918+102209)NB=L[F]AB[J]=NB NB=G[jB]UB=L[E]bB=L[D]gB=bB(vB,iB)iB=23161200456033-(-473280)jB=UB[gB]J=NB[jB]UB=L[E]bB=L[D]vB=A(-366624-(-363970))gB=bB(vB,iB)jB=UB[gB]NB=J(jB)vB=18430798907119-(-268951)jB=L[E]gB=A(1009008-1011817)UB=L[D]bB=UB(gB,vB)ZB=27976049991144-289541 J=jB[bB]bB=A(764901+-767460)LB=A(650838+-653734)UB=G[bB]gB=L[E]vB=L[D]iB=vB(LB,ZB)bB=gB[iB]vB=791465-791247 jB=UB[bB]gB=-508371-(-508508)bB=-4837-(-4951)LB=21358898057169-665847 UB=jB(bB,gB,vB)NB[J]=UB jB=L[E]vB=20446209298514-(-464095)UB=L[D]gB=A(509949+-512567)h=nil iB=A(-818967+816248)bB=UB(gB,vB)J=jB[bB]gB=A(-900604+897553)jB=217942+-217941 NB[J]=jB jB=L[E]vB=-661458+12247251578393 UB=L[D]bB=UB(gB,vB)J=jB[bB]jB=.7 NB[J]=jB gB=A(909034+-911775)jB=L[E]vB=155268+13362129353162 UB=L[D]bB=UB(gB,vB)UB=A(570701-573410)J=jB[bB]jB=L[F]NB[J]=jB jB=G[UB]bB=L[E]gB=L[D]vB=gB(iB,LB)LB=-379560+22952917939304 UB=bB[vB]ZB=-35877+28737622360171 J=jB[UB]iB=A(391760-394785)bB=L[E]gB=L[D]vB=gB(iB,LB)iB=A(112983-115872)UB=bB[vB]jB=J(UB)J=t()L[J]=jB jB=L[J]LB=4453668147867-(-144766)bB=L[E]gB=L[D]vB=gB(iB,LB)UB=bB[vB]LB=A(313559-316469)gB=L[E]vB=L[D]iB=vB(LB,ZB)bB=gB[iB]jB[UB]=bB jB=L[J]bB=L[E]LB=12180457252936-(-77279)iB=A(-154574-(-152003))gB=L[D]vB=gB(iB,LB)UB=bB[vB]vB=A(-882455+879560)gB=G[vB]iB=L[E]LB=L[D]ZB=LB(tB,DB)vB=iB[ZB]bB=gB[vB]ZB=1043048+-1043023 vB=622278-622277 iB=-877735-(-877715)LB=-385293+385293 gB=bB(vB,iB,LB,ZB)iB=A(-808578-(-805663))jB[UB]=gB jB=L[J]bB=L[E]gB=L[D]LB=-450940+18121448981106 vB=gB(iB,LB)DB=32314104070457-67186 UB=bB[vB]vB=A(-692631-(-689736))tB=A(369798-372914)gB=G[vB]iB=L[E]LB=L[D]ZB=LB(tB,DB)vB=iB[ZB]ZB=824402+-824242 bB=gB[vB]LB=933187-933187 iB=305323+-305313 vB=1010765+-1010765 gB=bB(vB,iB,LB,ZB)jB[UB]=gB iB=A(-718905+716340)LB=879454+1393997141803 jB=L[J]DB=16338659942466-852618 bB=L[E]gB=L[D]vB=gB(iB,LB)UB=bB[vB]V=nil bB=562345+-562344 NB=nil jB[UB]=bB jB=L[J]LB=30571249033294-501939 bB=L[E]iB=A(994669+-997376)gB=L[D]vB=gB(iB,LB)ZB=3161186083-188194 UB=bB[vB]tB=A(-883373+880724)LB=A(884000-886697)gB=L[E]vB=L[D]iB=vB(LB,ZB)LB=987878+3738145567718 bB=gB[iB]iB=A(669739+-672793)jB[UB]=bB jB=L[J]bB=L[E]gB=L[D]vB=gB(iB,LB)UB=bB[vB]vB=A(374380-376939)gB=G[vB]iB=L[E]LB=L[D]ZB=LB(tB,DB)LB=-769914+770054 MB=32938391636123-855217 vB=iB[ZB]bB=gB[vB]vB=788765+-788645 iB=47606+-47486 gB=bB(vB,iB,LB)jB[UB]=gB jB=L[J]bB=L[E]iB=A(608388+-611073)gB=L[D]LB=15363+12938293173125 vB=gB(iB,LB)iB=A(-24491+21922)UB=bB[vB]bB=910600+-910589 jB[UB]=bB LB=19016972310344-308401 jB=L[J]bB=L[E]gB=L[D]DB=A(956947-959749)vB=gB(iB,LB)UB=bB[vB]iB=A(-449032+446221)vB=G[iB]LB=L[E]ZB=L[D]tB=ZB(DB,wB)iB=LB[tB]DB=298457+6462957813224 gB=vB[iB]wB=19604306197447-710687 tB=A(328748-331362)iB=L[E]LB=L[D]ZB=LB(tB,DB)vB=iB[ZB]LB=-417884+3890337965935 bB=gB[vB]jB[UB]=bB iB=A(594729+-597384)DB=A(-103965-(-101146))jB=L[J]bB=L[E]gB=L[D]vB=gB(iB,LB)UB=bB[vB]iB=A(385279-388090)vB=G[iB]LB=L[E]ZB=L[D]tB=ZB(DB,wB)DB=34960792758517-485726 iB=LB[tB]gB=vB[iB]tB=A(-501911-(-498797))iB=L[E]LB=L[D]ZB=LB(tB,DB)vB=iB[ZB]bB=gB[vB]jB[UB]=bB jB=L[J]bB=L[E]iB=A(-66183-(-63209))LB=-705725+25709075805056 gB=L[D]vB=gB(iB,LB)UB=bB[vB]bB=L[y]jB[UB]=bB UB=M(-372855+15967632,{J,E;D})gB=H(643285-118637,{E;D})jB=t()iB=H(226925+14779221,{jB;E;D,l})L[jB]=UB UB=t()bB=e(4553424-66340,{jB,E,D;w;y;W,X})L[UB]=bB bB=t()L[bB]=gB gB=d(174972+13401422,{jB;E;D,C;bB})vB=e(2422326-(-324053),{E,D,bB})ZB=L[C]DB=L[E]wB=L[D]uB=wB(EB,zB)tB=DB[uB]LB=ZB[tB]ZB=A(566086+-569059)ZB=LB[ZB]ZB=ZB(LB,gB)ZB=L[l]EB=A(-46497-(-43912))DB=L[E]wB=L[D]zB=-919518+29441179925867 uB=wB(EB,zB)tB=DB[uB]LB=ZB[tB]ZB=A(-330715-(-327742))ZB=LB[ZB]ZB=ZB(LB,iB)EB=A(497462-500518)ZB=L[F]DB=L[E]wB=L[D]zB=15313112537664-933478 uB=wB(EB,zB)tB=DB[uB]LB=ZB[tB]ZB=A(208859-211832)ZB=LB[ZB]zB=770094+28734820365334 EB=A(-873221-(-870426))ZB=ZB(LB,vB)ZB=L[s]DB=L[E]wB=L[D]uB=wB(EB,zB)tB=DB[uB]LB=ZB[tB]ZB=A(53828+-56801)ZB=LB[ZB]tB=L[UB]ZB=ZB(LB,tB)ZB=t()LB=false L[ZB]=LB DB=t()tB=t()LB=nil L[tB]=LB LB=nil L[DB]=LB LB=t()wB=I(5998842-560535,{E,D;tB,DB,y})L[LB]=wB uB=L[y]zB=L[E]KB=L[D]HB=KB(IB,dB)EB=zB[HB]wB=uB[EB]EB=I(5988890-(-277295),{E;D;y,ZB;tB,DB})uB=A(844350-847323)uB=wB[uB]IB=15638080567385-269287 uB=uB(wB,EB)EB=L[E]zB=L[D]HB=A(-187814+185137)KB=zB(HB,IB)uB=EB[KB]bB=z(bB)wB=Y[uB]IB=A(-240738-(-237685))EB=e(-147307+4865001,{ZB,E,D;LB})uB=A(-982674-(-979701))uB=wB[uB]uB=uB(wB,EB)wB=nil J=z(J)uB=t()L[uB]=wB zB=L[E]KB=L[D]vB=nil dB=487070+16064185740954 HB=KB(IB,dB)EB=zB[HB]wB=Y[EB]zB=a(12852404-472810,{E,D,UB;uB})EB=A(152464-155437)EB=wB[EB]EB=EB(wB,zB)L[uB]=EB zB=L[C]HB=L[E]IB=L[D]dB=IB(eB,MB)KB=HB[dB]wB=zB[KB]zB=A(-987296-(-984323))zB=wB[zB]MB=352659+14907803138442 KB=d(657897+3461787,{C;E;D,w})zB=zB(wB,KB)zB=L[C]eB=A(-669880-(-667329))q=nil jB=z(jB)HB=L[E]IB=L[D]dB=IB(eB,MB)KB=HB[dB]eB=A(366490+-369492)wB=zB[KB]KB=d(10339818-(-684564),{C;E,D;w})MB=-63998+268976208507 zB=A(-1026988+1024015)zB=wB[zB]zB=zB(wB,KB)zB=L[l]HB=L[E]IB=L[D]dB=IB(eB,MB)KB=HB[dB]wB=zB[KB]zB=A(-927835-(-924862))KB=e(-377532+5607609,{l,E;D;w})zB=wB[zB]zB=zB(wB,KB)zB=L[l]eB=A(18352-21052)HB=L[E]MB=-892791+6201237416638 IB=L[D]dB=IB(eB,MB)KB=HB[dB]tB=z(tB)gB=nil wB=zB[KB]KB=K(16270820-264008,{l,E,D;w})zB=A(786061+-789034)zB=wB[zB]Y=nil eB=A(-334-2451)zB=zB(wB,KB)zB=L[F]MB=400607+8508004725402 HB=L[E]IB=L[D]dB=IB(eB,MB)eB=A(374300-376974)KB=HB[dB]wB=zB[KB]KB=O(13218810-(-331242),{w;F;E;D})iB=nil zB=A(-644625-(-641652))zB=wB[zB]zB=zB(wB,KB)zB=L[F]HB=L[E]C=z(C)uB=z(uB)IB=L[D]MB=889739+24638575515974 dB=IB(eB,MB)KB=HB[dB]wB=zB[KB]l=z(l)eB=A(-442782-(-439879))KB=e(-564375+10611969,{w,F,E,D})zB=A(907262-910235)zB=wB[zB]zB=zB(wB,KB)AB=nil zB=L[s]HB=L[E]IB=L[D]F=z(F)MB=889127+20401196012533 dB=IB(eB,MB)eB=A(-188239-(-185540))KB=HB[dB]wB=zB[KB]zB=A(-715169-(-712196))MB=20089444186817-415287 zB=wB[zB]KB=K(16392077-149981,{w;s;E,D})zB=zB(wB,KB)zB=L[s]HB=L[E]IB=L[D]dB=IB(eB,MB)eB=16059880681163-627093 KB=HB[dB]wB=zB[KB]dB=A(999669+-1002218)zB=A(51681-54654)zB=wB[zB]KB=I(-168432+790297,{w,s;E;D})zB=zB(wB,KB)wB=L[y]KB=L[E]HB=L[D]IB=HB(dB,eB)zB=KB[IB]IB=A(-369562+366667)HB=G[IB]dB=L[E]s=z(s)eB=L[D]MB=eB(OB,aB)IB=dB[MB]KB=HB[IB]IB=195057+-195057 eB=-532626+532626 OB=A(52366-55126)dB=-248440+248440 MB=328289-328289 HB=KB(IB,dB,eB,MB)wB[zB]=HB LB=z(LB)DB=z(DB)wB=L[y]eB=983306+24782303587338 KB=L[E]HB=L[D]dB=A(-990602-(-987605))IB=HB(dB,eB)zB=KB[IB]IB=A(-98572+95677)UB=z(UB)HB=G[IB]dB=L[E]aB=5685324420924-(-127771)ZB=z(ZB)eB=L[D]S=nil MB=eB(OB,aB)IB=dB[MB]eB=-593755+593755.5 dB=-334244+334244 KB=HB[IB]MB=-377497+377497 IB=250906.5-250906 HB=KB(IB,dB,eB,MB)wB[zB]=HB eB=715299+34673107571950 dB=A(-264244-(-261638))wB=L[y]KB=L[E]HB=L[D]IB=HB(dB,eB)eB=22073277521351-751009 zB=KB[IB]KB=-758830-(-758831)wB[zB]=KB wB=L[W]KB=L[E]HB=L[D]dB=A(349345+-352056)IB=HB(dB,eB)zB=KB[IB]KB=410710+-410709 wB[zB]=KB KB=O(-221185-(-808678),{w;y;E,D,W})zB=A(972672+-975410)wB=G[zB]y=z(y)zB=wB(KB)KB=H(-1005402+15463302,{X;E;D,w,W})W=z(W)w=z(w)D=z(D)E=z(E)zB=A(-28304+25566)wB=G[zB]X=z(X)zB=wB(KB)else N=7027867-(-801432)L[D]=i end end end else if N<-1028872+17388497 then if N<-22797+16066443 then if N<212827+15820699 then if N<15840026-(-137904)then Y=L[u]N=-786930+4555635 i=Y else Z=L[b[660419+-660418]]w=L[b[49166+-49164]]Y=A(597200-600250)q=377230+34439451376919 E=L[b[-389215-(-389218)]]u=E(Y,q)D=w[u]u=A(-468395-(-465333))i=Z[D]Y=9587426944802-923058 D=L[b[-7687+7689]]w=L[b[-149469-(-149472)]]E=w(u,Y)Z=D[E]N=i==Z N=N and-92247+1642796 or 10787677-784200 end else N=L[b[-595172-(-595173)]]E=A(1029700-1032802)Z=L[b[333560-333558]]u=7997041687167-(-726028)q=A(-534908-(-531966))D=L[b[162134+-162131]]Y=8470516725089-763385 w=D(E,u)u=A(-747649-(-745038))i=Z[w]D=L[b[-994819-(-994821)]]w=L[b[-1040361-(-1040364)]]E=w(u,Y)Z=D[E]N[i]=Z E=A(415291+-417917)u=-967795+11878542563854 N=L[b[263984-263983]]Z=L[b[-729626-(-729628)]]D=L[b[-128326+128329]]w=D(E,u)i=Z[w]w=A(323441+-326000)D=G[w]f=80516+28443252095288 E=L[b[-437109+437111]]u=L[b[-73063-(-73066)]]Y=u(q,f)u=-679888+680028 w=E[Y]Z=D[w]w=963885-963765 E=791044+-790924 D=Z(w,E,u)N[i]=D N=-680204+6503006 end else if N<-208227+16452669 then if N<-888838+17072546 then Z=U[-962591+962592]D=U[-152907-(-152909)]N=L[b[305288+-305287]]w=N N=w[D]N=N and 10356270-81084 or 15596225-966918 else f=A(743052-745808)R=-871979+29245292823389 N=L[b[-601025+601026]]E=A(33674-36659)Z=L[b[544096-544094]]w=G[E]u=L[b[138163+-138160]]Y=L[b[611658-611654]]q=Y(f,R)E=u[q]X=649302+20670172413251 R=-642213+32379412301706 D=w[E]E=.2 w=D(E)u=L[b[389170-389167]]f=A(479291+-482135)Y=L[b[614264+-614260]]q=Y(f,R)E=u[q]q=A(496249-498808)i=A(219036+-221801)y=A(590759+-593817)Y=G[q]f=L[b[-361638+361641]]R=L[b[-467112-(-467116)]]c=R(y,X)R=-672594-(-672714)W=A(295038+-297844)y=16889803379933-783909 q=f[c]u=Y[q]f=-960795+960915 q=648327+-648072 Y=u(q,f,R)c=A(-700934+698341)q=L[b[-699140-(-699143)]]f=L[b[944348-944344]]R=f(c,y)u=q[R]R=A(-397487+394592)h=570577+21279838302692 f=G[R]c=L[b[778918+-778915]]y=L[b[-633548-(-633552)]]X=y(W,h)R=c[X]i=N[i]X=-455932+455959 q=f[R]c=903707+-903680 y=854074+-854074 R=877376+-877376 f=q(R,c,y,X)D={[E]=Y;[u]=f}i=i(N,Z,w,D)Z=i N=A(858369+-861056)N=Z[N]i={}N=N(Z)N=G[A(875610+-878435)]Z=nil end else N=true L[b[948084-948083]]=N N=G[A(-669244+666401)]i={}end end else if N<17019115-302260 then if N<17143695-470468 then if N<388329+16187651 then N=12235671-(-464291)y=A(1022294-1025265)w=A(-47318-(-44751))X=-143722+29911487080402 R=A(-977279+974632)W=26946841757085-(-895847)D=G[w]Y=L[b[895937+-895936]]c=-367585+7829628152350 q=L[b[-198179+198181]]f=q(R,c)u=Y[f]Y=L[b[-174648-(-174651)]]f=L[b[655293+-655292]]R=L[b[-573822-(-573824)]]c=R(y,X)q=f[c]R=L[b[674654+-674653]]c=L[b[493704+-493702]]X=A(989946-993010)y=c(X,W)f=R[y]E={[u]=Y;[q]=f}w=D(E)D=true L[b[605898-605894]]=D else D=A(-567310-(-564713))Z=G[D]N=Z and 1046820+127658 or-866533+8658113 i=Z end else i={}N=G[A(-636275+633644)]end else if N<-1019496+17749038 then GB=L[D]i=GB N=GB and 466223+2136078 or 14936797-(-933289)else P=P+o i=P<=Q B=not k i=B and i B=P>=Q B=k and B i=B or i B=920934+6817710 N=i and B i=874790+6924098 N=N or i end end end end end end end end N=#g return j(i)end,function(G)for A=-887496-(-887497),#G,-1043703-(-1043704)do Z[G[A]]=(940643-940642)+Z[G[A]]end if U then local N=U(true)local j=g(N)j[A(489388-492483)],j[A(-19845-(-17108))],j[A(848050+-850636)]=G,E,function()return-745563-(-748382)end return N else return b({},{[A(-947738-(-945001))]=E;[A(705519+-708614)]=G,[A(-633781+631195)]=function()return-836937+839756 end})end end,function(G,A)local j=w(A)local U=function(U,b,g)return N(G,{U;b,g},A,j)end return U end return(u(7183987-(-463280),{}))(j(i))end)(getfenv and getfenv()or _ENV,unpack or table[A(-692318+689766)],newproxy,setmetatable,getmetatable,select,{...})end)(...)"
94eDS5fW,BALE11,ThegeekKnight16,C++,Wednesday 13th of August 2025 06:22:02 PM CDT,"#include <bits/stdc++.h>
using namespace std;
const int MAXN = 1e5 + 10;
array<int, MAXN> v, bit;

void update(int id, int val)
{
    while (id < MAXN)
    {
        bit[id] += val;
        id += id&-id;
    }
}

int query(int id)
{
    int resp = 0;
    while (id > 0)
    {
        resp += bit[id];
        id -= id&-id;
    }
    return resp;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int N; cin >> N;
    for (int i = 0; i < N; i++) cin >> v[i];

    long long resp = 0;
    for (int i = N-1; i >= 0; i--)
    {
        resp += query(v[i]-1);
        update(v[i], 1);
    }
    cout << resp << '\n';
} "
gt0qtKTW,News Aug13 25,Newscaster0,Email,Wednesday 13th of August 2025 03:51:14 PM CDT,".‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

♫‎ ‎M‎a‎k‎i‎n‎'‎ ‎m‎o‎n‎k‎e‎y‎ ‎n‎o‎i‎s‎e‎s‎ ‎a‎t‎ ‎b‎l‎a‎c‎k‎s‎,‎ ‎t‎e‎l‎l‎ ‎t‎h‎e‎m‎ ‎t‎o‎ ‎r‎e‎l‎a‎x‎,‎ ‎t‎h‎e‎n‎ ‎I‎ ‎f‎a‎c‎e‎ ‎t‎h‎e‎ ‎f‎a‎c‎t‎s‎.‎ ‎♫‎

I‎C‎E‎ ‎A‎g‎e‎n‎t‎s‎ ‎A‎r‎r‎e‎s‎t‎ ‎I‎l‎l‎e‎g‎a‎l‎ ‎A‎l‎i‎e‎n‎ ‎C‎o‎n‎v‎i‎c‎t‎e‎d‎ ‎K‎i‎l‎l‎e‎r‎s‎,‎ ‎C‎h‎i‎l‎d‎ ‎A‎b‎u‎s‎e‎r‎s‎,‎ ‎R‎a‎p‎i‎s‎t‎s‎
D‎e‎s‎p‎i‎t‎e‎ ‎S‎u‎p‎e‎r‎ ‎B‎o‎w‎l‎ ‎D‎r‎o‎u‎g‎h‎t‎,‎ ‎t‎h‎e‎ ‎D‎a‎l‎l‎a‎s‎ ‎C‎o‎w‎b‎o‎y‎s‎ ‎A‎r‎e‎ ‎t‎h‎e‎ ‎W‎e‎a‎l‎t‎h‎i‎e‎s‎t‎ ‎N‎F‎L‎ ‎T‎e‎a‎m‎
W‎i‎l‎d‎ ‎R‎a‎b‎b‎i‎t‎s‎ ‎S‎e‎e‎n‎ ‎i‎n‎ ‎C‎o‎l‎o‎r‎a‎d‎o‎ ‎w‎i‎t‎h‎ ‎'‎H‎o‎r‎n‎-‎L‎i‎k‎e‎'‎ ‎G‎r‎o‎w‎t‎h‎s‎ ‎o‎n‎ ‎H‎e‎a‎d‎
R‎i‎c‎h‎,‎ ‎W‎h‎i‎t‎e‎ ‎E‎l‎i‎t‎i‎s‎t‎ ‎J‎o‎h‎n‎ ‎O‎l‎i‎v‎e‎r‎ ‎C‎o‎s‎p‎l‎a‎y‎s‎ ‎a‎s‎ ‎P‎o‎t‎e‎n‎t‎i‎a‎l‎ ‎D‎e‎p‎o‎r‎t‎a‎t‎i‎o‎n‎ ‎V‎i‎c‎t‎i‎m‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎:‎ ‎C‎h‎a‎i‎r‎w‎o‎m‎a‎n‎ ‎M‎c‎C‎l‎a‎i‎n‎ ‎S‎h‎o‎w‎c‎a‎s‎e‎s‎ ‎‘‎O‎n‎e‎ ‎B‎i‎g‎ ‎B‎e‎a‎u‎t‎i‎f‎u‎l‎ ‎B‎i‎l‎l‎’‎ ‎W‎i‎n‎s‎
C‎o‎l‎o‎m‎b‎i‎a‎n‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎P‎e‎t‎r‎o‎ ‎S‎k‎i‎p‎s‎ ‎F‎u‎n‎e‎r‎a‎l‎ ‎o‎f‎ ‎S‎l‎a‎i‎n‎ ‎C‎o‎n‎s‎e‎r‎v‎a‎t‎i‎v‎e‎ ‎S‎e‎n‎a‎t‎o‎r‎
P‎o‎l‎l‎s‎:‎ ‎C‎o‎n‎s‎e‎r‎v‎a‎t‎i‎v‎e‎s‎ ‎M‎a‎y‎ ‎E‎n‎d‎ ‎2‎0‎ ‎Y‎e‎a‎r‎s‎ ‎o‎f‎ ‎S‎o‎c‎i‎a‎l‎i‎s‎t‎ ‎R‎u‎l‎e‎ ‎i‎n‎ ‎B‎o‎l‎i‎v‎i‎a‎
N‎o‎r‎w‎a‎y‎ ‎S‎a‎y‎s‎ ‎R‎u‎s‎s‎i‎a‎n‎ ‎H‎a‎c‎k‎e‎r‎s‎ ‎L‎i‎k‎e‎l‎y‎ ‎B‎e‎h‎i‎n‎d‎ ‎D‎a‎m‎ ‎S‎a‎b‎o‎t‎a‎g‎e‎
S‎t‎a‎t‎e‎ ‎D‎e‎p‎t‎.‎ ‎L‎i‎m‎i‎t‎s‎ ‎V‎i‎s‎a‎s‎ ‎o‎f‎ ‎F‎o‎r‎e‎i‎g‎n‎ ‎O‎f‎f‎i‎c‎i‎a‎l‎s‎ ‎T‎i‎e‎d‎ ‎t‎o‎ ‎C‎u‎b‎a‎n‎ ‎S‎l‎a‎v‎e‎ ‎D‎o‎c‎t‎o‎r‎s‎
U‎k‎r‎a‎i‎n‎e‎ ‎S‎u‎m‎m‎i‎t‎ ‎S‎h‎o‎u‎l‎d‎ ‎H‎a‎p‎p‎e‎n‎ ‎i‎n‎ ‎E‎u‎r‎o‎p‎e‎ ‎S‎a‎y‎s‎ ‎M‎a‎c‎r‎o‎n‎ ‎A‎f‎t‎e‎r‎ ‎T‎r‎u‎m‎p‎ ‎C‎a‎l‎l‎
E‎l‎i‎ ‎C‎r‎a‎n‎e‎ ‎B‎l‎a‎s‎t‎s‎ ‎O‎b‎a‎m‎a‎ ‎o‎v‎e‎r‎ ‎H‎e‎a‎l‎t‎h‎c‎a‎r‎e‎ ‎R‎a‎n‎t‎:‎ ‎'‎Y‎o‎u‎'‎v‎e‎ ‎D‎o‎n‎e‎ ‎E‎n‎o‎u‎g‎h‎ ‎D‎a‎m‎a‎g‎e‎'‎
R‎u‎n‎w‎a‎y‎ ‎A‎I‎ ‎F‎o‎u‎n‎d‎e‎r‎ ‎o‎n‎ ‎H‎o‎w‎ ‎H‎o‎l‎l‎y‎w‎o‎o‎d‎ ‎S‎t‎u‎d‎i‎o‎s‎ ‎A‎r‎e‎ ‎A‎b‎o‎u‎t‎ ‎t‎o‎ ‎B‎e‎c‎o‎m‎e‎ ‎‘‎R‎a‎d‎i‎c‎a‎l‎l‎y‎ ‎D‎
B‎i‎d‎e‎n‎ ‎J‎u‎d‎g‎e‎ ‎O‎r‎d‎e‎r‎s‎ ‎T‎r‎u‎m‎p‎ ‎A‎d‎m‎i‎n‎ ‎t‎o‎ ‎R‎e‎i‎n‎s‎t‎a‎t‎e‎ ‎S‎u‎s‎p‎e‎n‎d‎e‎d‎ ‎G‎r‎a‎n‎t‎s‎ ‎t‎o‎ ‎U‎C‎L‎A‎
N‎e‎b‎r‎a‎s‎k‎a‎ ‎P‎u‎n‎t‎e‎r‎ ‎A‎r‎c‎h‎i‎e‎ ‎W‎i‎l‎s‎o‎n‎ ‎B‎r‎e‎a‎k‎s‎ ‎D‎o‎w‎n‎ ‎i‎n‎ ‎T‎e‎a‎r‎s‎ ‎D‎u‎r‎i‎n‎g‎ ‎P‎r‎e‎s‎s‎ ‎C‎o‎n‎f‎e‎r‎e‎n‎c‎e‎
S‎t‎u‎d‎y‎:‎ ‎A‎I‎ ‎C‎h‎a‎t‎b‎o‎t‎s‎ ‎C‎r‎e‎a‎t‎e‎ ‎E‎c‎h‎o‎ ‎C‎h‎a‎m‎b‎e‎r‎s‎ ‎o‎n‎ ‎S‎o‎c‎i‎a‎l‎ ‎M‎e‎d‎i‎a‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
H‎o‎m‎e‎P‎a‎g‎e‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎—‎F‎o‎r‎m‎e‎r‎ ‎C‎a‎p‎i‎t‎o‎l‎ ‎P‎o‎l‎i‎c‎e‎ ‎C‎h‎i‎e‎f‎:‎ ‎T‎r‎u‎m‎p‎ ‎R‎i‎g‎h‎t‎,‎ ‎D‎C‎ ‎C‎r‎i‎m‎e‎ ‎O‎u‎t‎ ‎o‎f‎ ‎C‎o‎n‎t‎r‎o‎l‎

D‎e‎b‎u‎n‎k‎s‎ ‎F‎a‎k‎e‎ ‎N‎e‎w‎s‎:‎ ‎G‎a‎n‎g‎ ‎A‎c‎t‎i‎v‎i‎t‎y‎ ‎U‎p‎,‎ ‎N‎o‎t‎ ‎D‎o‎w‎n‎
U‎N‎I‎T‎E‎D‎ ‎S‎T‎A‎T‎E‎S‎ ‎-‎ ‎A‎P‎R‎I‎L‎ ‎1‎7‎:‎ ‎F‎o‎r‎m‎e‎r‎ ‎U‎.‎S‎.‎ ‎C‎a‎p‎i‎t‎o‎l‎ ‎P‎o‎l‎i‎c‎e‎ ‎C‎h‎i‎e‎f‎ ‎S‎t‎e‎v‎e‎n‎ ‎S‎u‎n‎d‎ ‎a‎t‎t‎e‎n‎d‎s‎ ‎t‎h‎e‎ ‎H‎o‎u‎s‎e‎ ‎A‎
T‎h‎e‎ ‎b‎i‎g‎g‎e‎r‎ ‎p‎i‎c‎t‎u‎r‎e‎ ‎s‎h‎o‎w‎s‎ ‎D‎.‎C‎.‎ ‎c‎r‎i‎m‎e‎ ‎i‎s‎ ‎o‎n‎ ‎t‎h‎e‎ ‎r‎i‎s‎e‎,‎ ‎f‎o‎r‎m‎e‎r‎ ‎C‎a‎p‎i‎t‎o‎l‎ ‎P‎o‎l‎i‎c‎e‎ ‎C‎h‎i‎e‎f‎ ‎S‎t‎e‎v‎e‎n‎ ‎S‎u‎n‎d‎ ‎s‎a‎i‎d‎ ‎d‎u‎r‎i‎n‎g‎ ‎a‎n‎ ‎a‎p‎p‎e‎a‎r‎a‎n‎c‎e‎ ‎o‎n‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎D‎a‎i‎l‎y‎,‎ ‎d‎a‎y‎s‎ ‎a‎f‎t‎e‎r‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎a‎n‎n‎o‎u‎n‎c‎e‎d‎ ‎h‎e‎ ‎i‎s‎ ‎p‎l‎a‎c‎i‎n‎g‎ ‎t‎h‎e‎ ‎D‎.‎C‎.‎ ‎M‎e‎t‎r‎o‎p‎o‎l‎i‎t‎a‎n‎ ‎P‎o‎l‎i‎c‎e‎ ‎D‎e‎p‎a‎r‎t‎m‎e‎n‎t‎ ‎u‎n‎d‎e‎r‎ ‎d‎i‎r‎e‎c‎t‎ ‎f‎e‎d‎e‎r‎a‎l‎ ‎c‎o‎n‎t‎r‎o‎l‎ ‎a‎n‎d‎ ‎a‎c‎t‎i‎v‎a‎t‎i‎n‎g‎ ‎t‎h‎e‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎ ‎G‎u‎a‎r‎d‎ ‎t‎o‎ ‎r‎e‎s‎t‎o‎r‎e‎ ‎l‎a‎w‎ ‎a‎n‎d‎ ‎o‎r‎d‎e‎r‎ ‎i‎n‎ ‎t‎h‎e‎ ‎n‎a‎t‎i‎o‎n‎’‎s‎ ‎c‎a‎p‎i‎t‎a‎l‎.‎

E‎l‎o‎n‎ ‎M‎u‎s‎k‎’‎s‎ ‎G‎r‎o‎k‎ ‎A‎I‎ ‎L‎a‎b‎e‎l‎s‎ ‎T‎r‎u‎m‎p‎ ‎a‎s‎ ‎D‎.‎C‎.‎’‎s‎ ‎‘‎M‎o‎s‎t‎ ‎N‎o‎t‎o‎r‎i‎o‎u‎s‎ ‎C‎r‎i‎m‎i‎n‎a‎l‎’‎ ‎i‎n‎ ‎P‎o‎s‎
E‎l‎o‎n‎ ‎M‎u‎s‎k‎'‎s‎ ‎G‎r‎o‎k‎ ‎A‎I‎ ‎L‎a‎b‎e‎l‎s‎ ‎T‎r‎u‎m‎p‎ ‎a‎s‎ ‎D‎.‎C‎.‎'‎s‎ ‎'‎M‎o‎s‎t‎ ‎N‎o‎t‎o‎r‎i‎o‎u‎s‎ ‎C‎r‎i‎m‎i‎n‎a‎l‎'‎ ‎o‎n‎ ‎X‎
2‎5‎5‎
R‎e‎p‎o‎r‎t‎:‎ ‎T‎e‎x‎a‎s‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎ ‎F‎u‎g‎i‎t‎i‎v‎e‎s‎ ‎C‎o‎n‎c‎e‎d‎e‎,‎ ‎W‎i‎l‎l‎ ‎R‎e‎t‎u‎r‎n‎ ‎t‎o‎ ‎A‎u‎s‎t‎i‎n‎
R‎e‎p‎o‎r‎t‎:‎ ‎T‎e‎x‎a‎s‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎ ‎F‎u‎g‎i‎t‎i‎v‎e‎s‎ ‎C‎o‎n‎c‎e‎d‎e‎,‎ ‎W‎i‎l‎l‎ ‎R‎e‎t‎u‎r‎n‎ ‎t‎o‎ ‎A‎u‎s‎t‎i‎n‎
4‎,‎2‎3‎5‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎‘‎L‎o‎c‎k‎ ‎H‎i‎m‎ ‎U‎p‎’‎:‎ ‎T‎e‎x‎a‎s‎ ‎A‎G‎ ‎P‎a‎x‎t‎o‎n‎ ‎S‎e‎e‎k‎s‎ ‎t‎o‎ ‎J‎a‎i‎l‎ ‎B‎e‎t‎o‎ ‎O‎’‎R‎o‎u‎r‎k‎e‎ ‎o‎v‎e‎r‎ ‎A‎l‎l‎e‎g‎e‎d‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎-‎-‎ ‎‘‎L‎o‎c‎k‎ ‎H‎i‎m‎ ‎U‎p‎’‎:‎ ‎T‎e‎x‎a‎s‎ ‎A‎G‎ ‎P‎a‎x‎t‎o‎n‎ ‎S‎e‎e‎k‎s‎ ‎t‎o‎ ‎J‎a‎i‎l‎ ‎B‎e‎t‎o‎ ‎O‎'‎R‎o‎u‎r‎k‎e‎
5‎,‎3‎0‎0‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎H‎u‎c‎k‎a‎b‎e‎e‎:‎ ‎H‎a‎m‎a‎s‎ ‎B‎l‎o‎c‎k‎s‎ ‎F‎o‎o‎d‎ ‎t‎o‎ ‎G‎a‎z‎a‎n‎s‎,‎ ‎t‎h‎e‎n‎ ‎B‎l‎a‎m‎e‎s‎ ‎I‎s‎r‎a‎e‎l‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎-‎-‎ ‎H‎u‎c‎k‎a‎b‎e‎e‎:‎ ‎H‎a‎m‎a‎s‎ ‎S‎t‎a‎r‎v‎e‎s‎ ‎G‎a‎z‎a‎n‎s‎,‎ ‎t‎h‎e‎n‎ ‎B‎l‎a‎m‎e‎s‎ ‎I‎s‎r‎a‎e‎l‎
2‎,‎9‎8‎4‎
J‎i‎m‎m‎y‎ ‎K‎i‎m‎m‎e‎l‎ ‎C‎o‎n‎s‎i‎d‎e‎r‎s‎ ‎F‎l‎e‎e‎i‎n‎g‎ ‎U‎S‎A‎ ‎B‎e‎c‎a‎u‎s‎e‎ ‎o‎f‎ ‎T‎r‎u‎m‎p‎ ‎—‎ ‎S‎a‎y‎s‎ ‎H‎e‎ ‎G‎o‎t‎ ‎I‎t‎a‎l‎i‎a‎n‎ ‎C‎i‎t‎i‎z‎e‎n‎s‎h‎i‎p‎
J‎i‎m‎m‎y‎ ‎K‎i‎m‎m‎e‎l‎ ‎C‎o‎n‎s‎i‎d‎e‎r‎s‎ ‎F‎l‎e‎e‎i‎n‎g‎ ‎U‎S‎A‎,‎ ‎S‎a‎y‎s‎ ‎H‎e‎ ‎G‎o‎t‎ ‎I‎t‎a‎l‎i‎a‎n‎ ‎C‎i‎t‎i‎z‎e‎n‎s‎h‎i‎p‎
3‎,‎8‎9‎4‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎F‎o‎r‎m‎e‎r‎ ‎C‎a‎p‎i‎t‎o‎l‎ ‎P‎o‎l‎i‎c‎e‎ ‎C‎h‎i‎e‎f‎ ‎S‎t‎e‎v‎e‎n‎ ‎S‎u‎n‎d‎:‎ ‎B‎i‎g‎g‎e‎r‎ ‎P‎i‎c‎t‎u‎r‎e‎ ‎S‎h‎o‎w‎s‎ ‎D‎.‎C‎.‎ ‎C‎r‎i‎m‎e‎ ‎I‎s‎ ‎o‎n‎ ‎t‎h‎e‎ ‎R‎i‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎F‎o‎r‎m‎e‎r‎ ‎C‎a‎p‎i‎t‎o‎l‎ ‎P‎o‎l‎i‎c‎e‎ ‎C‎h‎i‎e‎f‎ ‎S‎t‎e‎v‎e‎n‎ ‎S‎u‎n‎d‎:‎ ‎D‎.‎C‎.‎ ‎C‎r‎i‎m‎e‎ ‎o‎n‎ ‎t‎h‎e‎ ‎R‎i‎s‎e‎
1‎,‎9‎2‎3‎
E‎l‎i‎ ‎C‎r‎a‎n‎e‎ ‎B‎l‎a‎s‎t‎s‎ ‎O‎b‎a‎m‎a‎ ‎o‎v‎e‎r‎ ‎H‎e‎a‎l‎t‎h‎c‎a‎r‎e‎ ‎R‎a‎n‎t‎:‎ ‎‘‎Y‎o‎u‎’‎v‎e‎ ‎D‎o‎n‎e‎ ‎E‎n‎o‎u‎g‎h‎ ‎D‎a‎m‎a‎g‎e‎,‎ ‎B‎e‎s‎t‎ ‎t‎o‎ ‎S‎i‎t‎ ‎T‎h‎
E‎l‎i‎ ‎C‎r‎a‎n‎e‎ ‎B‎l‎a‎s‎t‎s‎ ‎O‎b‎a‎m‎a‎ ‎o‎v‎e‎r‎ ‎H‎e‎a‎l‎t‎h‎c‎a‎r‎e‎ ‎R‎a‎n‎t‎:‎ ‎'‎Y‎o‎u‎'‎v‎e‎ ‎D‎o‎n‎e‎ ‎E‎n‎o‎u‎g‎h‎ ‎D‎a‎m‎a‎g‎e‎'‎
4‎4‎
N‎o‎l‎t‎e‎:‎ ‎C‎h‎u‎c‎k‎ ‎S‎c‎h‎u‎m‎e‎r‎ ‎P‎u‎t‎s‎ ‎K‎e‎n‎n‎e‎d‎y‎ ‎C‎r‎e‎e‎p‎ ‎W‎h‎o‎ ‎D‎e‎g‎r‎a‎d‎e‎s‎ ‎U‎s‎h‎a‎ ‎V‎a‎n‎c‎e‎ ‎a‎n‎d‎ ‎C‎h‎e‎r‎y‎l‎ ‎H‎i‎n‎e‎s‎ ‎o‎n‎ ‎A‎m‎e‎r‎i‎c‎a‎ ‎2‎5‎0‎ ‎C‎o‎m‎
N‎o‎l‎t‎e‎:‎ ‎C‎h‎u‎c‎k‎ ‎S‎c‎h‎u‎m‎e‎r‎ ‎P‎u‎t‎s‎ ‎K‎e‎n‎n‎e‎d‎y‎ ‎C‎r‎e‎e‎p‎ ‎o‎n‎ ‎A‎m‎e‎r‎i‎c‎a‎ ‎2‎5‎0‎ ‎C‎o‎m‎m‎i‎s‎s‎i‎o‎n‎
1‎1‎3‎
N‎a‎t‎i‎o‎n‎a‎l‎ ‎G‎u‎a‎r‎d‎ ‎S‎p‎o‎t‎t‎e‎d‎ ‎i‎n‎ ‎D‎.‎C‎.‎ ‎D‎u‎r‎i‎n‎g‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎P‎o‎l‎i‎c‎e‎ ‎T‎a‎k‎e‎o‎v‎e‎r‎
N‎a‎t‎i‎o‎n‎a‎l‎ ‎G‎u‎a‎r‎d‎ ‎S‎p‎o‎t‎t‎e‎d‎ ‎i‎n‎ ‎D‎.‎C‎.‎ ‎D‎u‎r‎i‎n‎g‎ ‎T‎r‎u‎m‎p‎'‎s‎ ‎P‎o‎l‎i‎c‎e‎ ‎T‎a‎k‎e‎o‎v‎e‎r‎
9‎0‎8‎
W‎e‎s‎ ‎M‎o‎o‎r‎e‎:‎ ‎‘‎O‎n‎l‎y‎ ‎W‎a‎y‎’‎ ‎T‎r‎u‎m‎p‎ ‎C‎a‎n‎ ‎K‎e‎e‎p‎ ‎C‎o‎n‎g‎r‎e‎s‎s‎ ‎‘‎I‎s‎ ‎C‎h‎e‎a‎t‎i‎n‎g‎’‎
W‎e‎s‎ ‎M‎o‎o‎r‎e‎:‎ ‎'‎O‎n‎l‎y‎ ‎W‎a‎y‎'‎ ‎T‎r‎u‎m‎p‎ ‎C‎a‎n‎ ‎K‎e‎e‎p‎ ‎C‎o‎n‎g‎r‎e‎s‎s‎ ‎'‎I‎s‎ ‎C‎h‎e‎a‎t‎i‎n‎g‎'‎

N‎e‎g‎r‎o‎ ‎F‎a‎g‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎5‎ ‎S‎o‎l‎d‎i‎e‎r‎s‎ ‎i‎n‎ ‎F‎o‎r‎t‎ ‎S‎t‎e‎w‎a‎r‎t‎.‎

O‎o‎h‎ ‎o‎o‎h‎,‎ ‎a‎h‎ ‎a‎h‎!‎.‎.‎.‎


C‎a‎n‎t‎o‎n‎ ‎N‎e‎g‎r‎o‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎S‎e‎x‎u‎a‎l‎ ‎A‎s‎s‎a‎u‎l‎t‎.‎


A‎t‎l‎a‎n‎t‎a‎ ‎N‎e‎g‎r‎o‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎S‎e‎x‎u‎a‎l‎ ‎A‎s‎s‎a‎u‎l‎t‎.‎


S‎c‎h‎a‎u‎m‎b‎u‎r‎g‎ ‎N‎i‎g‎ ‎E‎x‎p‎o‎s‎e‎s‎ ‎H‎i‎m‎s‎e‎l‎f‎ ‎i‎n‎ ‎C‎o‎n‎v‎e‎n‎i‎e‎n‎c‎e‎ ‎S‎t‎o‎r‎e‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

1‎0‎ ‎D‎a‎y‎ ‎W‎e‎a‎t‎h‎e‎r‎-‎D‎a‎l‎e‎,‎ ‎T‎X‎
A‎s‎ ‎o‎f‎ ‎2‎:‎0‎1‎ ‎p‎m‎ ‎C‎D‎T‎
T‎o‎d‎a‎y‎
D‎a‎y‎
9‎8‎°‎
3‎6‎%‎
E‎ ‎6‎ ‎m‎p‎h‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎s‎h‎o‎w‎e‎r‎s‎ ‎a‎n‎d‎ ‎t‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎.‎ ‎H‎i‎g‎h‎ ‎9‎8‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎E‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎ ‎C‎h‎a‎n‎c‎e‎ ‎o‎f‎ ‎r‎a‎i‎n‎ ‎4‎0‎%‎.‎


H‎u‎m‎i‎d‎i‎t‎y‎
4‎4‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
1‎0‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
6‎:‎5‎6‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
8‎:‎1‎3‎ ‎p‎m‎
N‎i‎g‎h‎t‎
7‎5‎°‎
2‎4‎%‎
S‎S‎E‎ ‎8‎ ‎m‎p‎h‎
S‎o‎m‎e‎ ‎c‎l‎o‎u‎d‎s‎.‎ ‎A‎ ‎s‎t‎r‎a‎y‎ ‎s‎h‎o‎w‎e‎r‎ ‎o‎r‎ ‎t‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎ ‎i‎s‎ ‎p‎o‎s‎s‎i‎b‎l‎e‎.‎ ‎L‎o‎w‎ ‎n‎e‎a‎r‎ ‎7‎5‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎S‎E‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
7‎8‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
1‎0‎:‎5‎6‎ ‎p‎m‎
M‎o‎o‎n‎s‎e‎t‎
1‎1‎:‎2‎2‎ ‎a‎m‎
W‎a‎n‎i‎n‎g‎ ‎G‎i‎b‎b‎o‎u‎s‎
T‎h‎u‎ ‎1‎4‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎9‎°‎
/‎7‎6‎°‎
8‎%‎
 ‎S‎ ‎1‎0‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎5‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎8‎°‎
/‎7‎5‎°‎
2‎4‎%‎
 ‎S‎S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎6‎
I‎s‎o‎l‎a‎t‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
9‎3‎°‎
/‎7‎5‎°‎
3‎4‎%‎
 ‎S‎S‎E‎ ‎1‎0‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎7‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎8‎°‎
/‎7‎4‎°‎
1‎3‎%‎
 ‎S‎ ‎8‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎8‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎9‎°‎
/‎7‎5‎°‎
8‎%‎
 ‎S‎ ‎7‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎9‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎7‎°‎
/‎7‎4‎°‎
2‎4‎%‎
 ‎S‎S‎E‎ ‎6‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎0‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎8‎°‎
/‎7‎4‎°‎
1‎5‎%‎
 ‎S‎E‎ ‎6‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎1‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎7‎°‎
/‎7‎3‎°‎
2‎4‎%‎
 ‎E‎N‎E‎ ‎6‎ ‎m‎p‎h‎
F‎r‎i‎ ‎2‎2‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎5‎°‎
/‎7‎3‎°‎
2‎4‎%‎
 ‎E‎ ‎6‎ ‎m‎p‎h‎
S‎a‎t‎ ‎2‎3‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎5‎°‎
/‎7‎3‎°‎
2‎4‎%‎
 ‎E‎ ‎7‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎4‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎5‎°‎
/‎7‎3‎°‎
2‎4‎%‎
 ‎S‎S‎E‎ ‎8‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎5‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎5‎°‎
/‎7‎4‎°‎
2‎4‎%‎
 ‎S‎S‎E‎ ‎7‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎6‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎4‎°‎
/‎7‎3‎°‎
2‎3‎%‎
 ‎S‎S‎E‎ ‎7‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎7‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎3‎°‎
/‎7‎3‎°‎
2‎4‎%‎
 ‎S‎E‎ ‎8‎ ‎m‎p‎h‎

.‎.‎.‎
C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎S‎a‎n‎d‎ ‎n‎i‎g‎g‎e‎r‎s‎ ‎n‎o‎t‎ ‎k‎n‎o‎w‎i‎n‎g‎ ‎h‎o‎w‎ ‎t‎o‎ ‎f‎l‎y‎ ‎p‎l‎a‎n‎e‎s‎.‎ ‎👳🏾‍♂️✈️
.‎.‎.‎

T‎h‎e‎ ‎A‎m‎a‎z‎i‎n‎g‎ ‎W‎o‎r‎l‎d‎ ‎o‎f‎ ‎G‎u‎m‎b‎a‎l‎l‎
T‎h‎e‎ ‎R‎e‎t‎a‎r‎d‎e‎d‎ ‎W‎o‎r‎l‎d‎ ‎o‎f‎ ‎C‎u‎m‎b‎a‎l‎l‎ ‎i‎s‎ ‎a‎n‎o‎t‎h‎e‎r‎ ‎s‎t‎e‎p‎ ‎t‎o‎w‎a‎r‎d‎s‎ ‎t‎h‎e‎ ‎f‎u‎r‎r‎i‎f‎i‎c‎a‎t‎i‎o‎n‎ ‎o‎f‎ ‎C‎a‎r‎t‎o‎o‎n‎ ‎N‎e‎t‎w‎o‎r‎k‎.‎ ‎F‎e‎a‎t‎u‎r‎i‎n‎g‎ ‎a‎ ‎f‎a‎m‎i‎l‎y‎ ‎o‎f‎ ‎c‎a‎t‎s‎,‎ ‎r‎a‎b‎b‎i‎t‎s‎ ‎a‎n‎d‎ ‎a‎ ‎f‎i‎s‎h‎,‎ ‎m‎i‎x‎e‎d‎ ‎i‎n‎ ‎w‎i‎t‎h‎ ‎s‎t‎o‎p‎-‎m‎o‎t‎i‎o‎n‎,‎ ‎g‎r‎e‎e‎n‎-‎s‎c‎r‎e‎e‎n‎,‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎y‎/‎G‎o‎o‎g‎l‎e‎ ‎I‎m‎a‎g‎e‎ ‎r‎i‎p‎p‎e‎d‎ ‎b‎a‎c‎k‎g‎r‎o‎u‎n‎d‎s‎,‎ ‎a‎n‎d‎ ‎a‎ ‎c‎o‎n‎g‎l‎o‎m‎e‎r‎a‎t‎e‎ ‎o‎f‎ ‎c‎l‎a‎s‎h‎i‎n‎g‎ ‎a‎n‎i‎m‎a‎t‎i‎o‎n‎ ‎s‎t‎y‎l‎e‎s‎ ‎a‎n‎d‎ ‎a‎ ‎b‎a‎t‎t‎a‎l‎i‎o‎n‎-‎s‎i‎z‎e‎ ‎c‎h‎a‎r‎a‎c‎t‎e‎r‎ ‎l‎i‎s‎t‎ ‎o‎f‎ ‎p‎e‎o‎p‎l‎e‎ ‎n‎o‎ ‎o‎n‎e‎ ‎g‎a‎v‎e‎ ‎a‎ ‎s‎h‎i‎t‎ ‎a‎b‎o‎u‎t‎,‎ ‎i‎t‎'‎s‎ ‎o‎n‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎m‎o‎r‎e‎ ‎c‎o‎n‎f‎u‎s‎i‎n‎g‎ ‎f‎u‎r‎r‎y‎ ‎s‎h‎o‎w‎s‎ ‎t‎o‎ ‎b‎e‎ ‎a‎i‎r‎e‎d‎.‎ ‎I‎t‎ ‎g‎o‎t‎ ‎s‎o‎ ‎b‎a‎d‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎y‎ ‎m‎o‎c‎k‎e‎d‎ ‎t‎h‎e‎m‎s‎e‎l‎v‎e‎s‎ ‎w‎i‎t‎h‎ ‎o‎n‎e‎ ‎o‎f‎ ‎t‎h‎e‎i‎r‎ ‎c‎h‎a‎r‎a‎c‎t‎e‎r‎s‎ ‎b‎e‎i‎n‎g‎ ‎s‎e‎n‎t‎ ‎t‎o‎ ‎a‎n‎ ‎i‎n‎t‎e‎r‎d‎i‎m‎e‎n‎s‎i‎o‎n‎a‎l‎ ‎p‎r‎i‎s‎o‎n‎ ‎w‎h‎e‎r‎e‎ ‎b‎a‎d‎ ‎i‎d‎e‎a‎s‎ ‎w‎e‎r‎e‎ ‎s‎e‎n‎t‎ ‎c‎a‎u‎s‎e‎ ‎t‎h‎e‎y‎ ‎w‎e‎r‎e‎ ‎t‎o‎o‎ ‎b‎o‎r‎i‎n‎g‎,‎ ‎s‎t‎u‎p‎i‎d‎,‎ ‎d‎y‎s‎f‎u‎n‎c‎t‎i‎o‎n‎a‎l‎ ‎a‎n‎d‎ ‎a‎l‎l‎ ‎a‎r‎o‎u‎n‎d‎ ‎f‎u‎c‎k‎e‎d‎ ‎u‎p‎,‎ ‎w‎h‎e‎r‎e‎ ‎s‎h‎o‎w‎s‎ ‎l‎i‎k‎e‎ ‎U‎n‎c‎l‎e‎ ‎G‎r‎a‎n‎d‎p‎a‎ ‎a‎n‎d‎ ‎T‎h‎e‎ ‎M‎a‎r‎v‎e‎l‎o‎u‎s‎ ‎M‎i‎s‎a‎d‎v‎e‎n‎t‎u‎r‎e‎s‎ ‎o‎f‎ ‎F‎l‎a‎p‎j‎a‎c‎k‎ ‎w‎e‎n‎t‎.‎

T‎h‎e‎ ‎s‎h‎o‎w‎ ‎f‎o‎l‎l‎o‎w‎s‎ ‎a‎n‎ ‎a‎u‎t‎i‎s‎t‎i‎c‎ ‎f‎u‎r‎r‎y‎ ‎c‎u‎b‎ ‎a‎n‎d‎ ‎h‎i‎s‎ ‎n‎a‎ï‎v‎e‎,‎ ‎m‎u‎t‎a‎n‎t‎ ‎p‎e‎t‎ ‎f‎i‎s‎h‎ ‎a‎s‎ ‎t‎h‎e‎y‎ ‎w‎r‎e‎c‎k‎ ‎p‎e‎o‎p‎l‎e‎s‎ ‎l‎i‎v‎e‎s‎,‎ ‎s‎u‎f‎f‎e‎r‎ ‎t‎h‎r‎o‎u‎g‎h‎ ‎w‎h‎a‎t‎e‎v‎e‎r‎ ‎t‎h‎e‎ ‎u‎n‎i‎v‎e‎r‎s‎e‎ ‎f‎e‎l‎t‎ ‎l‎i‎k‎e‎ ‎t‎h‎a‎t‎ ‎d‎a‎y‎,‎ ‎a‎n‎d‎ ‎f‎r‎o‎m‎ ‎S‎e‎a‎s‎o‎n‎ ‎2‎ ‎o‎n‎w‎a‎r‎d‎,‎ ‎l‎o‎s‎e‎ ‎a‎l‎l‎ ‎p‎o‎s‎i‎t‎i‎v‎e‎ ‎v‎a‎l‎u‎e‎s‎ ‎t‎h‎e‎y‎ ‎h‎a‎d‎ ‎l‎e‎f‎t‎ ‎a‎n‎d‎ ‎b‎e‎c‎o‎m‎e‎ ‎a‎n‎n‎o‎y‎i‎n‎g‎ ‎l‎i‎t‎t‎l‎e‎ ‎d‎i‎p‎s‎h‎i‎t‎s‎ ‎w‎h‎o‎ ‎s‎u‎f‎f‎e‎r‎ ‎f‎r‎o‎m‎ ‎U‎S‎I‎;‎ ‎e‎v‎e‎n‎ ‎m‎o‎r‎e‎ ‎s‎o‎ ‎f‎o‎r‎ ‎G‎u‎m‎b‎a‎l‎l‎.‎ ‎T‎h‎e‎ ‎s‎h‎o‎w‎ ‎r‎i‎p‎s‎ ‎o‎f‎f‎ ‎m‎a‎n‎y‎ ‎o‎t‎h‎e‎r‎ ‎s‎h‎o‎w‎s‎ ‎a‎n‎d‎ ‎v‎i‎d‎e‎o‎ ‎g‎a‎m‎e‎s‎,‎ ‎l‎i‎k‎e‎ ‎F‎a‎m‎i‎l‎y‎ ‎G‎u‎y‎ ‎a‎n‎d‎ ‎S‎t‎r‎e‎e‎t‎ ‎F‎i‎g‎h‎t‎e‎r‎ ‎a‎n‎d‎ ‎d‎e‎d‎i‎c‎a‎t‎e‎s‎ ‎e‎n‎t‎i‎r‎e‎ ‎e‎p‎i‎s‎o‎d‎e‎s‎ ‎t‎o‎ ‎f‎i‎n‎d‎i‎n‎g‎ ‎e‎n‎t‎e‎r‎t‎a‎i‎n‎i‎n‎g‎ ‎w‎a‎y‎s‎ ‎t‎o‎ ‎m‎a‎k‎e‎ ‎a‎n‎ ‎a‎n‎t‎h‎r‎o‎p‎o‎m‎o‎r‎p‎h‎i‎c‎ ‎c‎a‎t‎ ‎c‎r‎y‎ ‎w‎h‎i‎l‎e‎ ‎h‎i‎s‎ ‎f‎a‎m‎i‎l‎y‎ ‎s‎i‎m‎p‎l‎y‎ ‎i‎g‎n‎o‎r‎e‎s‎ ‎h‎i‎m‎.‎

A‎s‎ ‎e‎x‎p‎e‎c‎t‎e‎d‎ ‎o‎f‎ ‎a‎ ‎E‎u‎r‎o‎p‎e‎a‎n‎ ‎s‎h‎o‎w‎,‎ ‎G‎u‎m‎b‎a‎l‎l‎ ‎i‎s‎ ‎s‎h‎o‎w‎n‎ ‎n‎a‎k‎e‎d‎ ‎m‎a‎n‎y‎ ‎t‎i‎m‎e‎s‎ ‎t‎h‎r‎o‎u‎g‎h‎o‎u‎t‎ ‎t‎h‎e‎ ‎f‎i‎r‎s‎t‎ ‎s‎e‎a‎s‎o‎n‎ ‎a‎n‎d‎ ‎i‎s‎ ‎a‎ ‎f‎r‎e‎q‎u‎e‎n‎t‎ ‎c‎r‎o‎s‎s‎d‎r‎e‎s‎s‎e‎r‎,‎ ‎p‎r‎o‎v‎i‎n‎g‎ ‎t‎h‎a‎t‎ ‎E‎u‎r‎o‎p‎e‎ ‎d‎o‎e‎s‎n‎'‎t‎ ‎g‎i‎v‎e‎ ‎a‎ ‎f‎u‎c‎k‎ ‎a‎b‎o‎u‎t‎ ‎C‎P‎ ‎l‎a‎w‎s‎.‎ ‎A‎n‎d‎ ‎n‎o‎,‎ ‎t‎h‎e‎ ‎c‎e‎n‎s‎o‎r‎s‎ ‎d‎o‎n‎'‎t‎ ‎h‎e‎l‎p‎ ‎y‎o‎u‎r‎ ‎c‎a‎s‎e‎.‎ ‎T‎h‎e‎ ‎f‎a‎n‎b‎a‎s‎e‎,‎ ‎a‎s‎ ‎a‎ ‎r‎e‎s‎u‎l‎t‎ ‎o‎f‎ ‎t‎h‎i‎s‎ ‎r‎e‎v‎e‎l‎a‎t‎i‎o‎n‎,‎ ‎i‎s‎ ‎n‎o‎w‎ ‎g‎r‎o‎w‎n‎ ‎t‎o‎ ‎b‎e‎ ‎l‎a‎r‎g‎e‎l‎y‎ ‎c‎o‎m‎p‎o‎s‎e‎d‎ ‎o‎f‎ ‎p‎e‎d‎o‎p‎h‎i‎l‎i‎c‎,‎ ‎i‎n‎c‎e‎s‎t‎u‎o‎u‎s‎ ‎f‎u‎r‎f‎a‎g‎s‎.‎

S‎e‎a‎r‎c‎h‎i‎n‎g‎ ‎F‎u‎r‎A‎f‎f‎i‎n‎i‎t‎y‎ ‎w‎i‎t‎h‎ ‎t‎h‎e‎ ‎t‎i‎t‎l‎e‎ ‎n‎a‎m‎e‎ ‎w‎i‎l‎l‎ ‎n‎e‎t‎ ‎y‎o‎u‎ ‎a‎t‎ ‎l‎e‎a‎s‎t‎ ‎o‎n‎e‎ ‎f‎u‎l‎l‎ ‎p‎a‎g‎e‎ ‎o‎f‎ ‎i‎n‎c‎e‎s‎t‎ ‎a‎n‎d‎ ‎r‎a‎p‎e‎.‎ ‎I‎n‎ ‎a‎ ‎r‎a‎r‎e‎ ‎c‎a‎s‎e‎,‎ ‎t‎h‎e‎ ‎m‎a‎j‎o‎r‎i‎t‎y‎ ‎o‎f‎ ‎/‎c‎o‎/‎ ‎G‎u‎m‎b‎a‎l‎l‎ ‎f‎a‎n‎s‎ ‎a‎r‎e‎ ‎s‎u‎r‎p‎r‎i‎s‎i‎n‎g‎l‎y‎ ‎d‎i‎f‎f‎i‎c‎u‎l‎t‎ ‎t‎o‎ ‎t‎r‎o‎l‎l‎,‎ ‎e‎s‎p‎e‎c‎i‎a‎l‎l‎y‎ ‎s‎i‎n‎c‎e‎ ‎t‎h‎e‎ ‎m‎o‎s‎t‎ ‎s‎u‎c‎c‎e‎s‎s‎f‎u‎l‎ ‎p‎r‎o‎v‎e‎n‎ ‎m‎e‎t‎h‎o‎d‎s‎ ‎w‎i‎l‎l‎ ‎g‎e‎t‎ ‎y‎o‎u‎ ‎b‎&‎ ‎a‎n‎d‎ ‎p‎o‎s‎s‎i‎b‎l‎y‎ ‎v‎&‎ ‎d‎e‎p‎e‎n‎d‎i‎n‎g‎ ‎o‎n‎ ‎y‎o‎u‎r‎ ‎l‎o‎c‎a‎t‎i‎o‎n‎.‎

T‎h‎e‎y‎ ‎e‎v‎e‎n‎ ‎e‎n‎t‎e‎r‎t‎a‎i‎n‎ ‎t‎h‎e‎m‎s‎e‎l‎v‎e‎s‎ ‎b‎y‎ ‎t‎r‎i‎g‎g‎e‎r‎i‎n‎g‎ ‎t‎h‎e‎ ‎s‎h‎i‎t‎s‎t‎o‎r‎m‎s‎ ‎t‎h‎a‎t‎ ‎e‎n‎g‎u‎l‎f‎ ‎A‎d‎v‎e‎n‎t‎u‎r‎e‎ ‎T‎i‎m‎e‎ ‎a‎n‎d‎ ‎R‎e‎g‎u‎l‎a‎r‎ ‎S‎h‎o‎w‎ ‎t‎h‎r‎e‎a‎d‎s‎ ‎w‎h‎e‎n‎ ‎t‎h‎e‎y‎'‎r‎e‎ ‎n‎o‎t‎ ‎f‎a‎p‎p‎i‎n‎g‎ ‎t‎o‎ ‎R‎i‎c‎h‎a‎r‎d‎ ‎g‎e‎t‎t‎i‎n‎g‎ ‎c‎u‎c‎k‎e‎d‎ ‎a‎g‎a‎i‎n‎,‎ ‎w‎h‎i‎c‎h‎ ‎i‎s‎ ‎a‎l‎s‎o‎ ‎s‎u‎r‎p‎r‎i‎s‎i‎n‎g‎,‎ ‎w‎h‎i‎c‎h‎ ‎a‎l‎m‎o‎s‎t‎ ‎b‎u‎t‎ ‎n‎o‎t‎ ‎q‎u‎i‎t‎e‎ ‎r‎e‎d‎e‎e‎m‎s‎ ‎t‎h‎e‎ ‎f‎a‎c‎t‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎y‎ ‎a‎r‎e‎ ‎a‎l‎l‎ ‎f‎u‎r‎r‎i‎e‎s‎ ‎a‎n‎y‎w‎a‎y‎,‎ ‎s‎o‎ ‎t‎h‎a‎t‎ ‎p‎o‎i‎n‎t‎ ‎i‎s‎ ‎m‎o‎o‎t‎.‎ ‎N‎o‎t‎e‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎ ‎""‎W‎o‎G‎s‎""‎ ‎g‎e‎n‎e‎r‎a‎l‎l‎y‎ ‎d‎i‎s‎l‎i‎k‎e‎ ‎A‎d‎v‎e‎n‎t‎u‎r‎e‎ ‎T‎i‎m‎e‎ ‎a‎ ‎l‎o‎t‎ ‎m‎o‎r‎e‎ ‎t‎h‎a‎n‎ ‎R‎e‎g‎u‎l‎a‎r‎ ‎S‎h‎o‎w‎,‎ ‎a‎s‎ ‎A‎d‎v‎e‎n‎t‎u‎r‎e‎ ‎T‎i‎m‎e‎ ‎l‎a‎c‎k‎s‎ ‎f‎u‎r‎r‎y‎ ‎c‎h‎a‎r‎a‎c‎t‎e‎r‎s‎.‎

T‎h‎i‎s‎ ‎s‎h‎o‎w‎,‎ ‎d‎e‎s‎p‎i‎t‎e‎ ‎p‎r‎o‎m‎o‎t‎i‎n‎g‎ ‎f‎u‎r‎f‎a‎g‎g‎o‎t‎r‎y‎,‎ ‎a‎l‎s‎o‎ ‎n‎e‎t‎t‎e‎d‎ ‎a‎ ‎s‎h‎i‎t‎l‎o‎a‎d‎ ‎o‎f‎ ‎a‎w‎a‎r‎d‎s‎ ‎f‎r‎o‎m‎ ‎t‎h‎e‎ ‎A‎n‎n‎e‎c‎y‎ ‎I‎n‎t‎e‎r‎n‎a‎t‎i‎o‎n‎a‎l‎ ‎A‎n‎i‎m‎a‎t‎e‎d‎ ‎F‎i‎l‎m‎ ‎F‎e‎s‎t‎i‎v‎a‎l‎ ‎a‎w‎a‎r‎d‎ ‎f‎o‎r‎ ‎B‎e‎s‎t‎ ‎T‎e‎l‎e‎v‎i‎s‎i‎o‎n‎ ‎P‎r‎o‎d‎u‎c‎t‎i‎o‎n‎ ‎b‎a‎c‎k‎ ‎i‎n‎ ‎2‎0‎1‎1‎ ‎a‎n‎d‎ ‎m‎u‎l‎t‎i‎p‎l‎e‎ ‎B‎r‎i‎t‎i‎s‎h‎ ‎A‎c‎a‎d‎e‎m‎y‎ ‎C‎h‎i‎l‎d‎r‎e‎n‎'‎s‎ ‎A‎w‎a‎r‎d‎s‎ ‎a‎s‎ ‎w‎e‎l‎l‎,‎ ‎n‎o‎m‎i‎n‎a‎t‎i‎o‎n‎s‎ ‎i‎n‎c‎l‎u‎d‎e‎d‎.‎ ‎I‎t‎ ‎h‎a‎s‎ ‎a‎l‎s‎o‎ ‎b‎e‎e‎n‎ ‎r‎e‎n‎e‎w‎e‎d‎ ‎f‎o‎r‎ ‎a‎ ‎f‎o‎u‎r‎t‎h‎ ‎a‎n‎d‎ ‎f‎i‎f‎t‎h‎ ‎s‎e‎a‎s‎o‎n‎.‎ ‎S‎h‎o‎w‎s‎ ‎w‎h‎a‎t‎ ‎a‎n‎ ‎i‎n‎f‎l‎u‎e‎n‎c‎e‎ ‎t‎h‎i‎s‎ ‎p‎i‎e‎c‎e‎ ‎h‎a‎s‎,‎ ‎e‎h‎?‎

(‎(‎ ‎S‎u‎r‎p‎r‎i‎s‎e‎!‎ ‎T‎h‎i‎s‎ ‎S‎h‎i‎t‎ ‎S‎h‎o‎w‎ ‎I‎s‎ ‎B‎a‎c‎k‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

N‎a‎b‎a‎ ‎K‎a‎i‎l‎a‎s‎h‎ ‎M‎a‎n‎d‎i‎r‎ ‎i‎s‎ ‎a‎ ‎H‎i‎n‎d‎u‎ ‎t‎e‎m‎p‎l‎e‎ ‎i‎n‎ ‎K‎a‎l‎n‎a‎ ‎C‎i‎t‎y‎,‎ ‎W‎e‎s‎t‎ ‎B‎e‎n‎g‎a‎l‎,‎ ‎I‎n‎d‎i‎a‎.‎ ‎T‎h‎e‎ ‎t‎e‎m‎p‎l‎e‎ ‎s‎t‎r‎u‎c‎t‎u‎r‎e‎ ‎c‎o‎n‎s‎i‎s‎t‎s‎ ‎o‎f‎ ‎1‎0‎8‎ ‎s‎m‎a‎l‎l‎e‎r‎ ‎t‎e‎m‎p‎l‎e‎s‎,‎ ‎e‎a‎c‎h‎ ‎w‎i‎t‎h‎ ‎a‎ ‎h‎e‎i‎g‎h‎t‎ ‎o‎f‎ ‎a‎r‎o‎u‎n‎d‎ ‎6‎ ‎m‎e‎t‎r‎e‎s‎ ‎(‎2‎0‎ ‎f‎e‎e‎t‎)‎ ‎a‎n‎d‎ ‎w‎i‎d‎t‎h‎ ‎o‎f‎ ‎a‎r‎o‎u‎n‎d‎ ‎3‎ ‎m‎e‎t‎r‎e‎s‎ ‎(‎9‎.‎5‎ ‎f‎e‎e‎t‎)‎,‎ ‎a‎r‎r‎a‎n‎g‎e‎d‎ ‎i‎n‎ ‎t‎w‎o‎ ‎c‎o‎n‎c‎e‎n‎t‎r‎i‎c‎ ‎c‎i‎r‎c‎l‎e‎s‎.‎ ‎T‎h‎e‎ ‎s‎i‎t‎e‎ ‎i‎s‎ ‎d‎e‎d‎i‎c‎a‎t‎e‎d‎ ‎t‎o‎ ‎t‎h‎e‎ ‎H‎i‎n‎d‎u‎ ‎d‎e‎i‎t‎y‎ ‎S‎h‎i‎v‎a‎.‎ ‎T‎h‎e‎ ‎i‎n‎n‎e‎r‎ ‎c‎i‎r‎c‎l‎e‎ ‎h‎a‎s‎ ‎a‎ ‎c‎i‎r‎c‎u‎m‎f‎e‎r‎e‎n‎c‎e‎ ‎o‎f‎ ‎a‎b‎o‎u‎t‎ ‎1‎0‎2‎ ‎m‎e‎t‎r‎e‎s‎ ‎(‎3‎3‎6‎ ‎f‎e‎e‎t‎)‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎o‎u‎t‎e‎r‎ ‎c‎i‎r‎c‎l‎e‎ ‎h‎a‎s‎ ‎a‎ ‎c‎i‎r‎c‎u‎m‎f‎e‎r‎e‎n‎c‎e‎ ‎o‎f‎ ‎a‎b‎o‎u‎t‎ ‎2‎2‎0‎ ‎m‎e‎t‎r‎e‎s‎ ‎(‎7‎1‎0‎ ‎f‎e‎e‎t‎)‎.‎ ‎T‎h‎e‎ ‎t‎e‎m‎p‎l‎e‎s‎ ‎a‎r‎e‎ ‎b‎u‎i‎l‎t‎ ‎o‎n‎ ‎l‎o‎w‎ ‎r‎a‎i‎s‎e‎d‎ ‎b‎a‎s‎e‎-‎a‎l‎t‎a‎r‎s‎.‎ ‎T‎h‎i‎s‎ ‎a‎e‎r‎i‎a‎l‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎o‎f‎ ‎N‎a‎b‎a‎ ‎K‎a‎i‎l‎a‎s‎h‎ ‎M‎a‎n‎d‎i‎r‎ ‎w‎a‎s‎ ‎t‎a‎k‎e‎n‎ ‎i‎n‎ ‎2‎0‎2‎0‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎S‎u‎d‎i‎p‎t‎a‎ ‎M‎a‎u‎l‎i‎k‎

.‎.‎.‎.‎.‎.‎.‎.‎

H‎e‎l‎l‎o‎!‎ ‎J‎u‎l‎i‎o‎ ‎t‎h‎e‎h‎ ‎s‎p‎e‎e‎k‎ ‎h‎e‎e‎y‎e‎r‎ ‎j‎u‎s‎s‎ ‎r‎e‎m‎i‎n‎d‎e‎e‎n‎g‎ ‎j‎o‎o‎ ‎d‎a‎t‎ ‎I‎ ‎l‎o‎a‎v‎ ‎a‎ ‎t‎h‎a‎ ‎p‎o‎o‎ ‎p‎o‎o‎ ‎c‎o‎a‎m‎i‎n‎g‎ ‎o‎u‎t‎ ‎a‎ ‎d‎a‎ ‎t‎o‎d‎d‎l‎e‎r‎'‎s‎s‎ ‎a‎s‎s‎,‎ ‎e‎e‎s‎s‎ ‎d‎e‎h‎ ‎h‎a‎w‎t‎e‎s‎t‎ ‎t‎h‎e‎e‎n‎g‎ ‎e‎e‎n‎ ‎d‎e‎h‎ ‎w‎h‎o‎l‎e‎ ‎w‎o‎r‎l‎d‎,‎ ‎a‎m‎i‎g‎o‎!‎ ‎I‎ ‎g‎o‎ ‎e‎e‎n‎t‎o‎ ‎d‎a‎ ‎b‎a‎h‎t‎h‎r‎o‎o‎m‎,‎ ‎a‎n‎d‎ ‎w‎h‎e‎n‎ ‎d‎e‎r‎e‎ ‎a‎r‎e‎ ‎k‎e‎e‎d‎s‎ ‎e‎e‎n‎ ‎d‎e‎y‎e‎r‎,‎ ‎I‎ ‎g‎o‎ ‎e‎e‎n‎t‎o‎ ‎d‎e‎h‎ ‎s‎t‎a‎l‎l‎,‎ ‎a‎n‎ ‎s‎t‎e‎e‎k‎ ‎m‎u‎y‎ ‎h‎e‎a‎d‎ ‎e‎e‎n‎ ‎t‎h‎e‎y‎e‎r‎,‎ ‎w‎h‎e‎n‎ ‎d‎e‎h‎ ‎t‎o‎d‎d‎l‎e‎r‎s‎s‎ ‎p‎u‎l‎l‎ ‎t‎h‎e‎y‎e‎r‎ ‎p‎a‎n‎t‎s‎ ‎n‎d‎o‎w‎n‎,‎ ‎I‎ ‎p‎o‎o‎t‎ ‎m‎u‎y‎ ‎f‎a‎c‎e‎ ‎u‎n‎d‎e‎r‎ ‎d‎e‎h‎ ‎t‎o‎d‎d‎l‎e‎r‎'‎s‎s‎ ‎a‎s‎s‎,‎ ‎a‎n‎d‎ ‎d‎e‎y‎ ‎s‎h‎e‎e‎t‎ ‎o‎a‎n‎ ‎m‎y‎ ‎f‎a‎c‎e‎,‎ ‎j‎u‎s‎s‎ ‎l‎i‎k‎e‎ ‎d‎e‎h‎ ‎c‎h‎e‎e‎l‎y‎ ‎c‎o‎n‎ ‎c‎a‎r‎n‎e‎ ‎d‎a‎t‎ ‎I‎ ‎m‎a‎k‎e‎,‎ ‎a‎m‎i‎g‎o‎!‎ ‎E‎e‎s‎s‎ ‎s‎o‎ ‎h‎a‎w‎t‎!‎ ‎W‎h‎a‎t‎ ‎c‎a‎n‎ ‎I‎ ‎s‎a‎y‎,‎ ‎I‎ ‎a‎m‎ ‎a‎ ‎J‎u‎l‎i‎o‎ ‎t‎h‎e‎h‎ ‎s‎p‎e‎e‎k‎,‎ ‎a‎n‎d‎ ‎I‎ ‎l‎o‎a‎v‎ ‎a‎ ‎t‎h‎a‎ ‎p‎o‎o‎p‎i‎n‎g‎ ‎t‎o‎d‎d‎l‎e‎r‎s‎s‎!‎"
UBSauuZQ,htmltopdfwidgets - css issue,gotem3239,HTML,Wednesday 13th of August 2025 02:25:47 PM CDT,"<h2>
  Project Proposal: Smart<span style=""color: #9c27b0""> Office</span> Automation
  <span style=""background-color: #cddc39"">System</span><br /><br />
</h2>
<h3>Objective</h3>
<p>
  To design and implement a centralized smart office system that improves energy
  efficiency, enhances security, and increases employee productivity.<br />
</p>
<h3>Key Features</h3>
<ul>
  <li>
    <strong>Energy Management</strong>
    <ul>
      <li>Automated lighting based on occupancy sensors</li>
      <li>Smart climate control linked to office schedules</li>
      <li>Real-time energy consumption dashboard</li>
    </ul>
  </li>
  <li>
    <strong>Security Enhancements</strong>
    <ul>
      <li>AI-powered CCTV with motion detection alerts</li>
      <li>Biometric and RFID access control</li>
      <li>Emergency response integration with security team</li>
    </ul>
  </li>
  <li>
    <strong>Employee Productivity Tools</strong>
    <ul>
      <li>Smart meeting room booking with availability display</li>
      <li>Digital notice boards for company announcements</li>
      <li>Integrated task management system with reminders</li>
    </ul>
  </li>
</ul>
<p></p>
"
z8s4Yd4Y,GhostSec Post-Ex Module,WhosYourDaddySec,Python,Wednesday 13th of August 2025 01:53:54 PM CDT,"#!/usr/bin/env python3
import argparse, json, shutil, subprocess, sys, uuid, os, socket
from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum, auto
from pathlib import Path
from typing import Dict, List, Optional

TOOL_VERSION = ""2025.08.13-ghostsec-v2""

class Stage(Enum):
    START = auto()
    KERNEL_ENUM = auto()
    NETWORK_ENUM = auto()
    TARGET_CONNECT = auto()
    TRAFFIC_ADVICE = auto()
    CRED_SCAN = auto()
    PERSISTENCE_ENUM = auto()
    LOGS_ENUM = auto()
    MITRE_MAP = auto()
    SIGMA_GEN = auto()
    OSQUERY_GEN = auto()
    REPORT = auto()
    DONE = auto()

@dataclass
class Event:
    ts: str
    stage: str
    message: str
    details: Dict = field(default_factory=dict)

@dataclass
class AuditorConfig:
    target_label: str
    out_dir: Path = field(default_factory=lambda: Path(""./ghostsec_audit_output""))
    readonly: bool = True
    pcap_path: Optional[Path] = None
    session_id: str = field(default_factory=lambda: str(uuid.uuid4()))
    target_ip: Optional[str] = None

def now_ts() -> str:
    return datetime.utcnow().isoformat(timespec=""seconds"") + ""Z""

def ensure_root_access(cfg: AuditorConfig):
    if cfg.readonly:
        return False
    if Path(""/proc/1"").exists():
        try:
            if os.geteuid() != 0:
                subprocess.check_call([""sudo"", ""-v""])
                return True
            else:
                return True
        except:
            return False
    return False

def safe_cmd(cmd: str, timeout: int = 10, as_root: bool = False) -> str:
    if as_root and os.geteuid() != 0:
        cmd = f""sudo {cmd}""
    try:
        out = subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT, timeout=timeout)
        return out.decode(errors=""replace"").strip()
    except subprocess.CalledProcessError as e:
        return f""<cmd failed (exit {e.returncode}): {e.output.decode(errors='replace')[:1000]}>""
    except Exception as e:
        return f""<cmd error: {e}>""

def map_event_to_mitre(event: Event) -> List[Dict]:
    mappings = []
    msg = (event.message or """").lower()
    if ""lsmod"" in msg or ""kernel"" in event.stage.lower():
        mappings.append({""technique_id"": ""T1547"", ""technique"": ""Boot or Logon Autostart Execution"", ""confidence"": ""low""})
        mappings.append({""technique_id"": ""T1215"", ""technique"": ""Kernel Modules and Extensions"", ""confidence"": ""medium""})
    if ""ss -tunap"" in str(event.details) or ""sockets"" in msg:
        mappings.append({""technique_id"": ""T1040"", ""technique"": ""Network Sniffing"", ""confidence"": ""medium""})
    if ""http.authorization"" in str(event.details).lower() or ""authorization"" in msg:
        mappings.append({""technique_id"": ""T1552"", ""technique"": ""Credentials in Files"", ""confidence"": ""high""})
    if ""crontab"" in str(event.details) or ""systemd"" in msg:
        mappings.append({""technique_id"": ""T1547"", ""technique"": ""Boot or Logon Autostart Execution"", ""confidence"": ""high""})
    if ""var_log"" in event.details or ""auth.log"" in event.message.lower():
        mappings.append({""technique_id"": ""T1070"", ""technique"": ""Indicator Removal on Host"", ""confidence"": ""low""})
    if not mappings:
        mappings.append({""technique_id"": ""T1082"", ""technique"": ""System Information Discovery"", ""confidence"": ""low""})
    return mappings

def generate_sigma_for_event(event: Event) -> Dict:
    rule = {
        ""title"": f""GhostSec - Suspicious activity: {event.stage} - {event.message[:60]}"",
        ""id"": str(uuid.uuid4()),
        ""description"": f""Auto-generated detection for {event.stage}. Review before enabling in production."",
        ""status"": ""experimental"",
        ""logsource"": {""product"": ""linux"", ""service"": ""syslog""},
        ""detection"": {""selection"": {""message|contains"": [event.message.split()[0]]}, ""condition"": ""selection""},
        ""level"": ""medium""
    }
    return rule

def generate_osquery_pack(events: List[Event]) -> Dict:
    pack = {
        ""platform"": ""linux"",
        ""queries"": {
            ""ghostsec_audit_kernel_modules"": {""query"": ""SELECT name, path, size FROM kernel_modules;"", ""description"": ""Enumerate kernel modules"", ""interval"": 3600},
            ""ghostsec_audit_crontab"": {""query"": ""SELECT * FROM crontab WHERE name <> '' LIMIT 100;"", ""description"": ""Check user crontabs"", ""interval"": 3600},
            ""ghostsec_audit_listening_sockets"": {""query"": ""SELECT pid, name, address, port FROM listening_ports;"", ""description"": ""List listening sockets"", ""interval"": 300}
        }
    }
    return pack

def generate_lab_manifest(out_dir: Path) -> Dict:
    manifest = {
        ""version"": ""3.8"",
        ""services"": {
            ""vuln-ubuntu"": {
                ""image"": ""ubuntu:22.04"",
                ""container_name"": ""ghostsec_lab_vuln_ubuntu"",
                ""privileged"": False,
                ""volumes"": [""./lab_data:/lab_data""],
                ""command"": ""/bin/bash -c 'apt update && apt install -y tcpdump tshark && sleep infinity'""
            }
        }
    }
    dc_path = out_dir / ""docker-compose.lab.yml""
    try:
        import yaml
        dc_path.write_text(yaml.dump(manifest))
    except:
        dc_path.write_text(json.dumps(manifest, indent=2))
    return {""docker_compose_template"": str(dc_path.resolve())}

class GhostSecAuditor:
    def __init__(self, cfg: AuditorConfig):
        self.cfg = cfg
        self.events: List[Event] = []
        self.stage = Stage.START
        self.cfg.out_dir.mkdir(parents=True, exist_ok=True)
        if not cfg.readonly:
            if ensure_root_access(cfg):
                print(""[+] Root access enabled for full read/write enumeration."")
            else:
                print(""[!] Root access unavailable — proceeding in read-only mode."")
                self.cfg.readonly = True

    def _log(self, stage: Stage, message: str, **details):
        evt = Event(ts=now_ts(), stage=stage.name, message=message, details={""session_id"": self.cfg.session_id, **details})
        self.events.append(evt)
        print(f""[{evt.ts}] {stage.name:<14} | {message}"")

    def enum_kernel(self):
        self.stage = Stage.KERNEL_ENUM
        self._log(self.stage, ""Enumerating kernel and module information"")
        self._log(self.stage, ""uname -a"", uname=safe_cmd(""uname -a"", as_root=not self.cfg.readonly))
        self._log(self.stage, ""lsmod (top) output"", lsmod=safe_cmd(""lsmod | head -n 200"", as_root=not self.cfg.readonly))
        self._log(self.stage, ""Kernel cmdline"", cmdline=safe_cmd(""cat /proc/cmdline 2>/dev/null || true"", as_root=not self.cfg.readonly))

    def enum_network(self):
        self.stage = Stage.NETWORK_ENUM
        self._log(self.stage, ""Enumerating network interfaces, routes, and sockets"")
        self._log(self.stage, ""ip -4 addr show"", ip_a=safe_cmd(""ip -4 addr show || ip addr show"", as_root=not self.cfg.readonly))
        self._log(self.stage, ""ip route show"", ip_route=safe_cmd(""ip route show"", as_root=not self.cfg.readonly))
        self._log(self.stage, ""ss -tunap (preview)"", ss=safe_cmd(""ss -tunap 2>/dev/null || ss -tuna"", as_root=not self.cfg.readonly))

    def target_connect(self):
        self.stage = Stage.TARGET_CONNECT
        target = self.cfg.target_ip
        if not target:
            target = input(""Enter target IP or hostname to connect: "").strip()
            self.cfg.target_ip = target
        self._log(self.stage, f""Attempting TCP connection to target {target}"")
        for port in [22, 80, 443, 3389]:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(3)
            try:
                res = s.connect_ex((target, port))
                if res == 0:
                    self._log(self.stage, f""Port {port} open"", target=target, port=port)
                else:
                    self._log(self.stage, f""Port {port} closed"", target=target, port=port)
            except Exception as e:
                self._log(self.stage, f""Connection error on port {port}: {e}"", target=target, port=port)
            finally:
                s.close()

    def traffic_advice(self):
        self.stage = Stage.TRAFFIC_ADVICE
        self._log(self.stage, ""Providing traffic capture advice"")
        iface = safe_cmd(""ip route | awk '/default/ {print $5; exit}' || true"")
        suggested = {
            ""tshark_live_cmd"": f""sudo tshark -i {iface or '<iface>'} -w {self.cfg.out_dir}/capture.pcap (lab only)"",
            ""zeek_cmd"": f""zeek -r {self.cfg.out_dir}/capture.pcap"",
            ""mitmproxy_advice"": ""Use mitmproxy in closed lab with generated certs only"",
        }
        self._log(self.stage, ""Suggested capture commands"", **suggested)

    def cred_scan(self):
        self.stage = Stage.CRED_SCAN
        self._log(self.stage, ""Scanning logs/pcap for credentials"")
        if not self.cfg.pcap_path or not self.cfg.pcap_path.exists():
            self._log(self.stage, ""No pcap provided, skipping pcap scan"")
            return
        tshark_cmd = f""tshark -r {self.cfg.pcap_path} -Y 'http.auth or tcp contains \""Authorization\""' -T fields -e frame.time -e ip.src -e ip.dst -e http.authorization""
        out = safe_cmd(tshark_cmd, timeout=60)
        self._log(self.stage, ""tshark extraction"", tshark_preview=(out[:2000] if out else ""<none>""))
        strings_cmd = f""strings {self.cfg.pcap_path} | egrep -i 'password|passwd|authorization|token|secret' || true""
        out2 = safe_cmd(strings_cmd, timeout=30)
        self._log(self.stage, ""strings() scan preview"", strings_preview=(out2.splitlines()[:20]))

    def persistence_enum(self):
        self.stage = Stage.PERSISTENCE_ENUM
        self._log(self.stage, ""Enumerating persistence locations"")
        self._log(self.stage, ""systemd unit files"", systemd_units=safe_cmd(""systemctl list-unit-files --type=service --no-pager | head -n 200 2>/dev/null || true"", as_root=not self.cfg.readonly))
        self._log(self.stage, ""User crontab"", crontab=safe_cmd(""crontab -l 2>/dev/null || echo '<no crontab>'"", as_root=not self.cfg.readonly))
        home = Path.home()
        startup_files = {str(p): safe_cmd(f""cat {p} 2>/dev/null || true"", as_root=not self.cfg.readonly) for p in [home / "".bashrc"", home / "".profile"", home / "".config/autostart""]}
        self._log(self.stage, ""Startup file previews"", startup_preview={k: (v[:1000] if v else '') for k, v in startup_files.items()})
        auth_keys = safe_cmd(""cat ~/.ssh/authorized_keys 2>/dev/null || echo '<none>'"", as_root=not self.cfg.readonly)
        self._log(self.stage, ""~/.ssh/authorized_keys (preview)"", authorized_keys_preview=(auth_keys.splitlines()[:10]))

    def logs_enum(self):
        self.stage = Stage.LOGS_ENUM
        self._log(self.stage, ""Enumerating logs"")
        logs = safe_cmd(""ls -lh /var/log | head -n 200 2>/dev/null || true"", as_root=not self.cfg.readonly)
        self._log(self.stage, ""/var/log listing"", var_log=logs)
        syslog_preview = safe_cmd(""tail -n 200 /var/log/syslog 2>/dev/null || tail -n 200 /var/log/messages 2>/dev/null || true"", as_root=not self.cfg.readonly)
        auth_preview = safe_cmd(""tail -n 200 /var/log/auth.log 2>/dev/null || true"", as_root=not self.cfg.readonly)
        self._log(self.stage, ""syslog/messages preview"", syslog_preview=(syslog_preview[:5000]))
        self._log(self.stage, ""auth.log preview"", auth_preview=(auth_preview[:5000]))

    def mitre_map(self):
        self.stage = Stage.MITRE_MAP
        self._log(self.stage, ""Mapping findings to MITRE ATT&CK"")
        mitre = []
        for e in self.events:
            mapping = map_event_to_mitre(e)
            mitre.append({""event"": e.message, ""mappings"": mapping})
        path = self.cfg.out_dir / f""mitre_map_{self.cfg.session_id}.json""
        path.write_text(json.dumps(mitre, indent=2))
        self._log(self.stage, ""MITRE mapping written"", path=str(path.resolve()))

    def sigma_gen(self):
        self.stage = Stage.SIGMA_GEN
        self._log(self.stage, ""Generating Sigma rules"")
        rules = [generate_sigma_for_event(e) for e in self.events]
        path = self.cfg.out_dir / f""sigma_rules_{self.cfg.session_id}.json""
        path.write_text(json.dumps(rules, indent=2))
        self._log(self.stage, ""Sigma templates written"", path=str(path.resolve()))

    def osquery_gen(self):
        self.stage = Stage.OSQUERY_GEN
        self._log(self.stage, ""Generating osquery pack"")
        pack = generate_osquery_pack(self.events)
        path = self.cfg.out_dir / f""osquery_pack_{self.cfg.session_id}.json""
        path.write_text(json.dumps(pack, indent=2))
        self._log(self.stage, ""osquery pack written"", path=str(path.resolve()))

    def lab_manifest(self):
        self._log(self.stage, ""Generating lab manifest"")
        manifest = generate_lab_manifest(self.cfg.out_dir)
        self._log(self.stage, ""Lab manifest written"", **manifest)

    def generate_reports(self):
        self.stage = Stage.REPORT
        self._log(self.stage, ""Generating JSON and Markdown reports"")
        report = {""tool_version"": TOOL_VERSION, ""session_id"": self.cfg.session_id, ""target"": self.cfg.target_label, ""generated_at"": now_ts(), ""events"": [e.__dict__ for e in self.events]}
        json_path = self.cfg.out_dir / f""report_{self.cfg.session_id}.json""
        md_path = self.cfg.out_dir / f""report_{self.cfg.session_id}.md""
        json_path.write_text(json.dumps(report, indent=2))
        md_lines = [f""# GhostSec Audit Report"", f""**Session:** {self.cfg.session_id}"", f""**Target:** {self.cfg.target_label}"", """", ""## Timeline""]
        for e in self.events:
            md_lines.append(f""- `{e.ts}` **{e.stage}** — {e.message}"")
        md_lines += ["""", ""## Artifacts"", f""- MITRE mapping: mitre_map_{self.cfg.session_id}.json"", f""- Sigma templates: sigma_rules_{self.cfg.session_id}.json"", f""- osquery pack: osquery_pack_{self.cfg.session_id}.json"", """"]
        md_path.write_text(""\n"".join(md_lines))
        self._log(self.stage, ""Reports written"", json=str(json_path.resolve()), markdown=str(md_path.resolve()))

    def run_full(self):
        self._log(Stage.START, ""GhostSec Post-Ex Lab Auditor starting"")
        self.enum_kernel()
        self.enum_network()
        self.target_connect()
        self.traffic_advice()
        self.cred_scan()
        self.persistence_enum()
        self.logs_enum()
        self.mitre_map()
        self.sigma_gen()
        self.osquery_gen()
        self.lab_manifest()
        self.generate_reports()
        self._log(Stage.DONE, ""Audit run complete"")

def build_arg_parser():
    p = argparse.ArgumentParser(description=""GhostSec Post-Ex Lab Auditor (operational templates)"")
    p.add_argument(""-t"", ""--target"", default=""lab-target"", help=""Target label for report"")
    p.add_argument(""-o"", ""--out"", default=""./ghostsec_audit_output"", help=""Output directory"")
    p.add_argument(""--pcap"", help=""Optional pcap file to scan"")
    p.add_argument(""--no-readonly"", dest=""readonly"", action=""store_false"", help=""Enable full read/write (authorized labs only)"")
    p.add_argument(""--connect"", help=""Optional target IP/hostname to test connectivity"")
    return p

def main():
    args = build_arg_parser().parse_args()
    cfg = AuditorConfig(target_label=args.target, out_dir=Path(args.out), readonly=args.readonly, pcap_path=Path(args.pcap) if args.pcap else None)
    auditor = GhostSecAuditor(cfg)
    print(""GhostSec Post-Ex Lab Auditor — Operational Templates"")
    print(""1) Run full audit & generate detection artifacts"")
    print(""2) Run quick kernel+network enum"")
    print(""3) Generate Sigma + osquery templates from last run"")
    print(""4) Generate lab manifest"")
    print(""5) Exit"")
    choice = input(""Choose an option [1-5]: "").strip()
    try:
        if choice == '1':
            auditor.run_full()
        elif choice == '2':
            auditor.enum_kernel()
            auditor.enum_network()
            auditor.generate_reports()
        elif choice == '3':
            auditor.mitre_map()
            auditor.sigma_gen()
            auditor.osquery_gen()
        elif choice == '4':
            auditor.lab_manifest()
        else:
            print(""Exiting. Reports (if any) are in:"", cfg.out_dir.resolve())
    except KeyboardInterrupt:
        print(""Interrupted by user — exiting"")

if __name__ == '__main__':
    main()"
Ww7hz3HQ,Untitled,Alfanrizkyy,Lua,Wednesday 13th of August 2025 01:45:37 PM CDT,"--// Ultra Graphics + Time Controller (Single LocalScript)
--// Place in: StarterPlayer > StarterPlayerScripts
--// Hotkey: G (toggle panel)
--// Theme: Black & White | Watermark: ""Time Set Pro by Oxcom""
--// No blur / eye strain; clean, crisp, ""8K-look"" tone

--========================================================
--== Services
--========================================================
local Players        = game:GetService(""Players"")
local TweenService   = game:GetService(""TweenService"")
local UIS            = game:GetService(""UserInputService"")
local RunService     = game:GetService(""RunService"")
local Lighting       = game:GetService(""Lighting"")
local LocalPlayer    = Players.LocalPlayer
local PlayerGui      = LocalPlayer:WaitForChild(""PlayerGui"")

--========================================================
--== Ultra Graphics (smart, eye-friendly, no blur)
--========================================================
local function applyUltraGraphics()
	-- Technology & global render knobs
	pcall(function()
		Lighting.Technology = Enum.Technology.Future -- modern GI, reflections
	end)

	-- Keep it clean and crisp
	Lighting.EnvironmentDiffuseScale  = 1
	Lighting.EnvironmentSpecularScale = 1
	Lighting.GlobalShadows            = true
	Lighting.Brightness               = 2.2  -- bright enough, not harsh
	Lighting.ExposureCompensation     = 0
	Lighting.ShadowSoftness           = 1
	Lighting.GeographicLatitude       = 35   -- natural sun angle
	Lighting.ClockTime                = 9    -- comfy starting time (morning)

	-- Neutral ambient (no color cast)
	Lighting.Ambient        = Color3.fromRGB(180,180,180)
	Lighting.OutdoorAmbient = Color3.fromRGB(180,180,180)

	-- NO Depth of Field (no blur)
	local dof = Lighting:FindFirstChildOfClass(""DepthOfFieldEffect"")
	if dof then dof.Enabled = false end

	-- Subtle post-processing for clarity (not flashy)
	local cc = Lighting:FindFirstChild(""UX_CC"") or Instance.new(""ColorCorrectionEffect"")
	cc.Name        = ""UX_CC""
	cc.Parent      = Lighting
	cc.Brightness  = 0.02   -- lift shadows slightly
	cc.Contrast    = 0.12   -- mild clarity
	cc.Saturation  = -0.05  -- slightly desaturated to reduce eye strain
	cc.Enabled     = true

	local bloom = Lighting:FindFirstChild(""UX_Bloom"") or Instance.new(""BloomEffect"")
	bloom.Name      = ""UX_Bloom""
	bloom.Parent    = Lighting
	bloom.Intensity = 0.15  -- very soft, avoids glow
	bloom.Size      = 10
	bloom.Threshold = 0.92
	bloom.Enabled   = true

	local sun = Lighting:FindFirstChild(""UX_Sun"") or Instance.new(""SunRaysEffect"")
	sun.Name      = ""UX_Sun""
	sun.Parent    = Lighting
	sun.Intensity = 0.02    -- barely there, only at strong angles
	sun.Spread    = 0.8
	sun.Enabled   = true

	-- Soft atmosphere, no fog wall
	local atmo = Lighting:FindFirstChild(""UX_Atmosphere"") or Instance.new(""Atmosphere"")
	atmo.Name   = ""UX_Atmosphere""
	atmo.Parent = Lighting
	atmo.Density = 0.25
	atmo.Offset  = 0.03
	atmo.Color   = Color3.fromRGB(210,210,210)
	atmo.Decay   = Color3.fromRGB(140,140,140)
	atmo.Glare   = 0.04
	atmo.Haze    = 0.55

	-- Try to push client quality high (best-effort)
	pcall(function()
		if settings and settings().Rendering then
			-- Use LevelXX if available; fallback Automatic otherwise
			settings().Rendering.QualityLevel = Enum.QualityLevel.Level21 or Enum.QualityLevel.Automatic
		end
	end)
end

applyUltraGraphics()

--========================================================
--== Time utilities
--========================================================
local function clamp(v, mn, mx) if v < mn then return mn elseif v > mx then return mx else return v end end
local function hhmmToClock(hh, mm) hh = clamp(hh,0,23) mm = clamp(mm,0,59) return hh + (mm/60) end
local function clockToHHMM(clock)
	local totalMin = math.floor((clock % 24) * 60 + 0.5)
	local h = math.floor(totalMin/60)
	local m = totalMin % 60
	return h, m
end
local function fmt(h, m) return string.format(""%02d:%02d"", h, m) end

--========================================================
--== UI (Black & White, elegant, smooth)
--========================================================
local gui = Instance.new(""ScreenGui"")
gui.Name = ""UltraTimeControllerUI""
gui.ResetOnSpawn = false
gui.IgnoreGuiInset = true
gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
gui.Parent = PlayerGui

-- Main panel
local PANEL_W, PANEL_H = 440, 232
local panel = Instance.new(""Frame"")
panel.Name = ""Panel""
panel.Size = UDim2.fromOffset(PANEL_W, PANEL_H)
panel.Position = UDim2.new(0, -PANEL_W - 24, 0.25, 0) -- start fully hidden to the left
panel.BackgroundColor3 = Color3.fromRGB(18,18,18)
panel.BorderSizePixel = 0
panel.Parent = gui
panel.BackgroundTransparency = 0

local corner = Instance.new(""UICorner"", panel) corner.CornerRadius = UDim.new(0,16)

-- Subtle shadow
local shadow = Instance.new(""ImageLabel"")
shadow.Name = ""Shadow""
shadow.Parent = panel
shadow.BackgroundTransparency = 1
shadow.AnchorPoint = Vector2.new(0.5,0.5)
shadow.Position = UDim2.fromScale(0.5,0.5)
shadow.Size = UDim2.new(1, 48, 1, 48)
shadow.Image = ""rbxassetid://1316045217""
shadow.ScaleType = Enum.ScaleType.Slice
shadow.SliceCenter = Rect.new(10,10,118,118)
shadow.ImageTransparency = 0.3
shadow.ZIndex = 0

-- Header
local header = Instance.new(""TextLabel"")
header.Name = ""Header""
header.Parent = panel
header.Size = UDim2.new(1, -20, 0, 42)
header.Position = UDim2.new(0, 12, 0, 8)
header.BackgroundTransparency = 1
header.Font = Enum.Font.GothamBold
header.Text = ""Ultra Graphics • Time Controller""
header.TextSize = 18
header.TextColor3 = Color3.fromRGB(245,245,245)
header.TextXAlignment = Enum.TextXAlignment.Left
header.ZIndex = 2

local subtitle = Instance.new(""TextLabel"")
subtitle.Parent = panel
subtitle.Size = UDim2.new(1, -20, 0, 18)
subtitle.Position = UDim2.new(0, 12, 0, 40)
subtitle.BackgroundTransparency = 1
subtitle.Font = Enum.Font.Gotham
subtitle.Text = ""Presets • Slider • HH:MM input""
subtitle.TextSize = 12
subtitle.TextColor3 = Color3.fromRGB(170,170,170)
subtitle.TextXAlignment = Enum.TextXAlignment.Left
subtitle.ZIndex = 2

-- Buttons container
local buttons = Instance.new(""Frame"")
buttons.Name = ""Buttons""
buttons.Parent = panel
buttons.BackgroundTransparency = 1
buttons.Position = UDim2.new(0, 12, 0, 70)
buttons.Size = UDim2.new(1, -24, 0, 40)
buttons.ZIndex = 2

local function makeBtn(txt)
	local b = Instance.new(""TextButton"")
	b.AutoButtonColor = true
	b.Size = UDim2.new(0.24, 0, 1, 0)
	b.BackgroundColor3 = Color3.fromRGB(28,28,28)
	b.Text = txt
	b.Font = Enum.Font.GothamMedium
	b.TextSize = 14
	b.TextColor3 = Color3.fromRGB(235,235,235)
	b.ZIndex = 3
	local c = Instance.new(""UICorner"", b); c.CornerRadius = UDim.new(0,10)
	local s = Instance.new(""UIStroke"", b); s.Thickness = 1; s.Color = Color3.fromRGB(70,70,70); s.Transparency = 0.35
	return b
end

local btnMorning = makeBtn(""MORNING"")
btnMorning.Parent = buttons
btnMorning.Position = UDim2.new(0.00, 0, 0, 0)

local btnNoon = makeBtn(""NOON"")
btnNoon.Parent = buttons
btnNoon.Position = UDim2.new(0.26, 0, 0, 0)

local btnEvening = makeBtn(""EVENING"")
btnEvening.Parent = buttons
btnEvening.Position = UDim2.new(0.52, 0, 0, 0)

local btnNight = makeBtn(""NIGHT"")
btnNight.Parent = buttons
btnNight.Position = UDim2.new(0.78, 0, 0, 0)

-- Slider area
local sliderLabel = Instance.new(""TextLabel"")
sliderLabel.Parent = panel
sliderLabel.BackgroundTransparency = 1
sliderLabel.Position = UDim2.new(0, 12, 0, 118)
sliderLabel.Size = UDim2.new(0, 160, 0, 18)
sliderLabel.Font = Enum.Font.Gotham
sliderLabel.TextSize = 12
sliderLabel.TextColor3 = Color3.fromRGB(185,185,185)
sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
sliderLabel.Text = ""Time Slider (0—24)""
sliderLabel.ZIndex = 2

local slider = Instance.new(""Frame"")
slider.Name = ""Slider""
slider.Parent = panel
slider.BackgroundTransparency = 1
slider.Position = UDim2.new(0, 12, 0, 140)
slider.Size = UDim2.new(1, -24, 0, 24)
slider.ZIndex = 2

local bar = Instance.new(""Frame"")
bar.Parent = slider
bar.AnchorPoint = Vector2.new(0,0.5)
bar.Position = UDim2.new(0, 0, 0.5, 0)
bar.Size = UDim2.new(1, 0, 0, 6)
bar.BackgroundColor3 = Color3.fromRGB(46,46,46)
bar.BorderSizePixel = 0
local barCorner = Instance.new(""UICorner"", bar); barCorner.CornerRadius = UDim.new(0, 8)

local fill = Instance.new(""Frame"")
fill.Parent = bar
fill.Size = UDim2.new(0, 0, 1, 0)
fill.BackgroundColor3 = Color3.fromRGB(240,240,240)
fill.BorderSizePixel = 0
local fillCorner = Instance.new(""UICorner"", fill); fillCorner.CornerRadius = UDim.new(0, 8)

local knob = Instance.new(""Frame"")
knob.Parent = slider
knob.Size = UDim2.new(0, 16, 0, 16)
knob.AnchorPoint = Vector2.new(0.5, 0.5)
knob.Position = UDim2.new(0, 0, 0.5, 0)
knob.BackgroundColor3 = Color3.fromRGB(255,255,255)
knob.BorderSizePixel = 0
local knobCorner = Instance.new(""UICorner"", knob); knobCorner.CornerRadius = UDim.new(1, 0)
local knobStroke = Instance.new(""UIStroke"", knob); knobStroke.Color = Color3.fromRGB(70,70,70); knobStroke.Thickness = 1; knobStroke.Transparency = 0.3
knob.ZIndex = 3

local timeReadout = Instance.new(""TextLabel"")
timeReadout.Parent = panel
timeReadout.BackgroundTransparency = 1
timeReadout.Position = UDim2.new(1, -140, 0, 118)
timeReadout.Size = UDim2.new(0, 128, 0, 18)
timeReadout.Font = Enum.Font.GothamMedium
timeReadout.TextSize = 14
timeReadout.TextColor3 = Color3.fromRGB(240,240,240)
timeReadout.TextXAlignment = Enum.TextXAlignment.Right
timeReadout.Text = ""09:00""
timeReadout.ZIndex = 2

-- HH:MM input
local inputRow = Instance.new(""Frame"")
inputRow.Parent = panel
inputRow.BackgroundTransparency = 1
inputRow.Position = UDim2.new(0, 12, 0, 176)
inputRow.Size = UDim2.new(1, -24, 0, 32)
inputRow.ZIndex = 2

local inputBox = Instance.new(""TextBox"")
inputBox.Parent = inputRow
inputBox.Size = UDim2.new(0, 110, 1, 0)
inputBox.BackgroundColor3 = Color3.fromRGB(28,28,28)
inputBox.PlaceholderText = ""HH:MM""
inputBox.Text = """"
inputBox.ClearTextOnFocus = false
inputBox.TextXAlignment = Enum.TextXAlignment.Center
inputBox.Font = Enum.Font.GothamMedium
inputBox.TextSize = 14
inputBox.TextColor3 = Color3.fromRGB(235,235,235)
local inputCorner = Instance.new(""UICorner"", inputBox); inputCorner.CornerRadius = UDim.new(0,10)
local inputStroke = Instance.new(""UIStroke"", inputBox); inputStroke.Thickness = 1; inputStroke.Color = Color3.fromRGB(70,70,70); inputStroke.Transparency = 0.35

local applyBtn = Instance.new(""TextButton"")
applyBtn.Parent = inputRow
applyBtn.Size = UDim2.new(0, 130, 1, 0)
applyBtn.Position = UDim2.new(0, 122, 0, 0)
applyBtn.Text = ""Apply HH:MM""
applyBtn.BackgroundColor3 = Color3.fromRGB(240,240,240)
applyBtn.TextColor3 = Color3.fromRGB(16,16,16)
applyBtn.Font = Enum.Font.GothamSemibold
applyBtn.TextSize = 14
applyBtn.AutoButtonColor = true
local applyCorner = Instance.new(""UICorner"", applyBtn); applyCorner.CornerRadius = UDim.new(0,10)

-- Watermark (small)
local watermark = Instance.new(""TextLabel"")
watermark.Parent = panel
watermark.BackgroundTransparency = 1
watermark.Position = UDim2.new(0, 12, 1, -18)
watermark.Size = UDim2.new(1, -24, 0, 14)
watermark.Font = Enum.Font.Gotham
watermark.TextSize = 10
watermark.TextColor3 = Color3.fromRGB(150,150,150)
watermark.TextXAlignment = Enum.TextXAlignment.Left
watermark.Text = ""Time Set Pro by Oxcom""
watermark.ZIndex = 2

-- Padding
local pad = Instance.new(""UIPadding"", panel)
pad.PaddingLeft  = UDim.new(0, 8)
pad.PaddingRight = UDim.new(0, 8)

--========================================================
--== Time logic + UI wiring
--========================================================
local function setClockTime(clock, ease)
	clock = (clock % 24)
	if ease then
		TweenService:Create(Lighting, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ClockTime = clock}):Play()
	else
		Lighting.ClockTime = clock
	end
	-- Update UI visuals
	local alpha = clock/24
	fill:TweenSize(UDim2.new(alpha,0,1,0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.15, true)
	knob:TweenPosition(UDim2.new(alpha,0,0.5,0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.15, true)
	local hh, mm = clockToHHMM(clock)
	timeReadout.Text = fmt(hh, mm)
end

-- Presets
btnMorning.MouseButton1Click:Connect(function() setClockTime(6, true) end)
btnNoon.MouseButton1Click:Connect(function() setClockTime(12, true) end)
btnEvening.MouseButton1Click:Connect(function() setClockTime(17.5, true) end)
btnNight.MouseButton1Click:Connect(function() setClockTime(20, true) end)

-- Slider drag
local dragging = false
local function updateFromX(x)
	local barPos = bar.AbsolutePosition.X
	local barSize = bar.AbsoluteSize.X
	if barSize <= 0 then return end
	local rel = clamp((x - barPos)/barSize, 0, 1)
	setClockTime(rel * 24, false)
end

knob.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
	end
end)
bar.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
		updateFromX(input.Position.X)
	end
end)
UIS.InputChanged:Connect(function(input)
	if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
		updateFromX(input.Position.X)
	end
end)
UIS.InputEnded:Connect(function(input)
	if dragging and (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
		dragging = false
	end
end)

-- HH:MM apply
applyBtn.MouseButton1Click:Connect(function()
	local text = string.gsub(inputBox.Text, ""%s+"", """")
	local h, m = string.match(text, ""^(%d%d?):(%d%d)$"")
	h = tonumber(h); m = tonumber(m)
	if h and m then
		setClockTime(hhmmToClock(h,m), true)
		applyBtn.Text = ""Applied""
		task.delay(0.6, function() applyBtn.Text = ""Apply HH:MM"" end)
	else
		applyBtn.Text = ""Invalid format!""
		task.delay(0.8, function() applyBtn.Text = ""Apply HH:MM"" end)
	end
end)

-- Keep slider position correct when window resizes or time changes elsewhere
local lastClock = Lighting.ClockTime
RunService.RenderStepped:Connect(function()
	if math.abs(Lighting.ClockTime - lastClock) > 1e-3 then
		lastClock = Lighting.ClockTime
		setClockTime(lastClock, false)
	end
end)

--========================================================
--== Smooth toggle (G): left-hide / right-show
--========================================================
local isOpen = false
local function openPos()  return UDim2.new(0, 20, 0.25, 0) end         -- visible (slid in from left to right)
local function closePos() return UDim2.new(0, -PANEL_W - 24, 0.25, 0) end -- hidden to the left

local function togglePanel(state)
	if state ~= nil then isOpen = state else isOpen = not isOpen end
	local goal = isOpen and openPos() or closePos()
	local tween = TweenService:Create(panel, TweenInfo.new(0.36, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Position = goal})
	tween:Play()
	-- subtle fade for polish
	local toTrans = isOpen and 0 or 0.15
	TweenService:Create(panel, TweenInfo.new(0.24, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = toTrans}):Play()
end

-- Show on start (slide in from left to right)
task.defer(function()
	setClockTime(Lighting.ClockTime or 9, false)
	togglePanel(true)
end)

-- Toggle with G
UIS.InputBegan:Connect(function(input, gpe)
	if gpe then return end
	if input.KeyCode == Enum.KeyCode.G then
		-- If open: slide left and hide; if closed: slide right and show
		togglePanel()
	end
end)

-- Optional: drag the panel by header
local draggingPanel = false
local dragOffset = Vector2.new()
header.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		draggingPanel = true
		dragOffset = input.Position - panel.AbsolutePosition
	end
end)
UIS.InputChanged:Connect(function(input)
	if draggingPanel and input.UserInputType == Enum.UserInputType.MouseMovement then
		local newPos = input.Position - dragOffset
		panel.Position = UDim2.fromOffset(newPos.X, newPos.Y)
	end
end)
UIS.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		draggingPanel = false
	end
end)

--========================================================
--== End: Press G to toggle the panel
--========================================================
"
fPxad31x,worker_companion,Fokklz,Lua,Wednesday 13th of August 2025 01:38:01 PM CDT,"-- Companion Turtle Script - Chunk Loading and Following
-- Equipment: Chunk Controller + Ender Modem
-- Follows worker turtle to keep chunks loaded

local hubcomms = require(""hubcomms"")

-- Configuration
local FOLLOW_DISTANCE = 4  -- Stay 4 blocks behind worker
local VERTICAL_OFFSET = -2  -- Stay 2 blocks below worker
local UPDATE_INTERVAL = 5   -- Check position every 5 seconds

-- State tracking
local workerId = nil
local workerPosition = nil
local currentPosition = {x = 0, y = 0, z = 0, facing = 0}
local isFollowing = true
local isSetupMode = false  -- Don't follow during setup/cleanup

-- Initialize companion turtle
function initializeCompanion()
    hubcomms.log(""=== Companion Turtle Initializing ==="")
    
    -- Initialize hub communications
    local success = hubcomms.init({
        label = ""CompanionTurtle_"" .. os.getComputerID(),
        modemSide = ""right"",  -- Adjust based on your setup
        channel = 1337
    })
    
    if success then
        hubcomms.log(""Hub communications initialized"")
        
        -- Register as companion turtle
        hubcomms.setCustomData(""turtle_type"", ""companion"")
        hubcomms.setCustomData(""worker_id"", nil)
        hubcomms.setCustomData(""is_following"", false)
        
        -- Register companion-specific commands
        registerCompanionCommands()
        
        -- Get initial position if GPS available
        local x, y, z = gps.locate()
        if x then
            currentPosition.x = x
            currentPosition.y = y
            currentPosition.z = z
            hubcomms.log(""Initial position: "" .. x .. "","" .. y .. "","" .. z)
        end
        
        hubcomms.setPhase(""waiting"", ""Waiting for worker pairing"")
        
        return true
    else
        hubcomms.log(""Hub communications failed - companion cannot function"", ""ERROR"")
        return false
    end
end

-- Register companion-specific commands
function registerCompanionCommands()
    hubcomms.registerCommand(""pair_worker"", function(args)
        local newWorkerId = args[1] or args.worker_id
        if newWorkerId then
            workerId = tonumber(newWorkerId)
            hubcomms.setCustomData(""worker_id"", workerId)
            hubcomms.setCustomData(""is_following"", true)
            isFollowing = true
            
            hubcomms.log(""Paired with worker turtle: "" .. workerId)
            hubcomms.setPhase(""paired"", ""Following worker "" .. workerId)
            
            return {result = ""ok"", message = ""Paired with worker "" .. workerId}
        else
            return {result = ""error"", message = ""No worker ID provided""}
        end
    end, ""Pair with a worker turtle"")
    
    hubcomms.registerCommand(""companion_move"", function(args)
        if not workerId then
            return {result = ""error"", message = ""Not paired with worker""}
        end
        
        -- Only accept commands from our paired worker
        if args.worker_id ~= workerId then
            return {result = ""error"", message = ""Command from wrong worker""}
        end
        
        local action = args.action
        workerPosition = args.position
        
        hubcomms.log(""Received movement command: "" .. action)
        
        if action == ""setup_start"" or action == ""cleanup_start"" then
            isSetupMode = true
            hubcomms.setPhase(""waiting"", ""Worker doing setup/cleanup - staying put"")
            hubcomms.log(""Setup/cleanup mode - staying put"")
            
        elseif action == ""setup_complete"" or action == ""cleanup_complete"" then
            isSetupMode = false
            hubcomms.setPhase(""following"", ""Resuming following worker"")
            hubcomms.log(""Setup/cleanup complete - resuming following"")
            
        elseif action == ""initial_position"" then
            hubcomms.log(""Received initial worker position"")
            followWorker()
            
        elseif not isSetupMode then
            -- Only follow if not in setup mode
            followWorker()
        end
        
        return {result = ""ok"", message = ""Movement command processed""}
    end, ""Handle movement commands from worker"")
    
    hubcomms.registerCommand(""get_follow_status"", function(args)
        return {
            result = ""ok"",
            message = ""Follow status"",
            data = {
                worker_id = workerId,
                is_paired = workerId ~= nil,
                is_following = isFollowing,
                is_setup_mode = isSetupMode,
                worker_position = workerPosition,
                current_position = currentPosition
            }
        }
    end, ""Get following status"")
end

-- Calculate target position for companion
function calculateTargetPosition()
    if not workerPosition then return nil end
    
    local targetX = workerPosition.x
    local targetY = workerPosition.y + VERTICAL_OFFSET
    local targetZ = workerPosition.z
    
    -- Calculate position 4 blocks behind based on worker's facing
    local facing = workerPosition.facing
    if facing == 0 then      -- North (negative Z)
        targetZ = targetZ + FOLLOW_DISTANCE
    elseif facing == 1 then  -- East (positive X)
        targetX = targetX - FOLLOW_DISTANCE
    elseif facing == 2 then  -- South (positive Z)
        targetZ = targetZ - FOLLOW_DISTANCE
    elseif facing == 3 then  -- West (negative X)
        targetX = targetX + FOLLOW_DISTANCE
    end
    
    return {x = targetX, y = targetY, z = targetZ}
end

-- Move to target position
function moveToPosition(targetX, targetY, targetZ)
    hubcomms.log(""Moving to target position: "" .. targetX .. "","" .. targetY .. "","" .. targetZ)
    
    local moved = false
    
    -- Move in Y direction first (vertical)
    while currentPosition.y < targetY do
        if turtle.up() then
            currentPosition.y = currentPosition.y + 1
            moved = true
            hubcomms.handleCommunications()
        else
            hubcomms.log(""Cannot move up"", ""WARN"")
            break
        end
    end
    
    while currentPosition.y > targetY do
        if turtle.down() then
            currentPosition.y = currentPosition.y - 1
            moved = true
            hubcomms.handleCommunications()
        else
            hubcomms.log(""Cannot move down"", ""WARN"")
            break
        end
    end
    
    -- Move in X direction
    while currentPosition.x < targetX do
        -- Face east and move
        faceDirection(1)
        if turtle.forward() then
            currentPosition.x = currentPosition.x + 1
            moved = true
            hubcomms.handleCommunications()
        else
            hubcomms.log(""Cannot move east"", ""WARN"")
            break
        end
    end
    
    while currentPosition.x > targetX do
        -- Face west and move
        faceDirection(3)
        if turtle.forward() then
            currentPosition.x = currentPosition.x - 1
            moved = true
            hubcomms.handleCommunications()
        else
            hubcomms.log(""Cannot move west"", ""WARN"")
            break
        end
    end
    
    -- Move in Z direction
    while currentPosition.z < targetZ do
        -- Face south and move
        faceDirection(2)
        if turtle.forward() then
            currentPosition.z = currentPosition.z + 1
            moved = true
            hubcomms.handleCommunications()
        else
            hubcomms.log(""Cannot move south"", ""WARN"")
            break
        end
    end
    
    while currentPosition.z > targetZ do
        -- Face north and move
        faceDirection(0)
        if turtle.forward() then
            currentPosition.z = currentPosition.z - 1
            moved = true
            hubcomms.handleCommunications()
        else
            hubcomms.log(""Cannot move north"", ""WARN"")
            break
        end
    end
    
    if moved then
        hubcomms.log(""Reached position: "" .. currentPosition.x .. "","" .. currentPosition.y .. "","" .. currentPosition.z)
        hubcomms.sendStatus()
    end
end

-- Face a specific direction
function faceDirection(targetFacing)
    while currentPosition.facing ~= targetFacing do
        if (currentPosition.facing + 1) % 4 == targetFacing then
            turtle.turnRight()
            currentPosition.facing = (currentPosition.facing + 1) % 4
        else
            turtle.turnLeft()
            currentPosition.facing = (currentPosition.facing - 1) % 4
        end
    end
end

-- Follow worker to calculated position
function followWorker()
    if not workerPosition or isSetupMode then return end
    
    local target = calculateTargetPosition()
    if not target then return end
    
    -- Check if we need to move
    local distanceX = math.abs(currentPosition.x - target.x)
    local distanceY = math.abs(currentPosition.y - target.y) 
    local distanceZ = math.abs(currentPosition.z - target.z)
    
    if distanceX > 0 or distanceY > 0 or distanceZ > 0 then
        hubcomms.setPhase(""following"", ""Moving to follow worker"")
        moveToPosition(target.x, target.y, target.z)
        hubcomms.setPhase(""following"", ""Following worker "" .. workerId)
    end
end

-- Update GPS position
function updateGPSPosition()
    local x, y, z = gps.locate()
    if x then
        currentPosition.x = x
        currentPosition.y = y
        currentPosition.z = z
        return true
    end
    return false
end

-- Periodic position check and adjustment
function periodicFollowCheck()
    if not workerId or not isFollowing or isSetupMode then
        return
    end
    
    -- Update our GPS position
    updateGPSPosition()
    
    -- Check if we're still in the right position relative to worker
    if workerPosition then
        local target = calculateTargetPosition()
        if target then
            local distanceX = math.abs(currentPosition.x - target.x)
            local distanceY = math.abs(currentPosition.y - target.y)
            local distanceZ = math.abs(currentPosition.z - target.z)
            
            -- If we've drifted too far, move back
            if distanceX > 1 or distanceY > 1 or distanceZ > 1 then
                hubcomms.log(""Position drift detected - correcting"")
                followWorker()
            end
        end
    end
end

-- Main companion loop
function main()
    -- Initialize companion turtle
    if not initializeCompanion() then
        print(""Failed to initialize companion turtle"")
        return
    end
    
    hubcomms.log(""=== Companion Turtle - Chunk Loading Service ==="")
    hubcomms.log(""Waiting for pairing with worker turtle..."")
    
    local lastFollowCheck = os.clock()
    
    -- Main loop
    while true do
        -- Handle communications
        hubcomms.handleCommunications()
        
        -- Periodic follow check
        local currentTime = os.clock()
        if currentTime - lastFollowCheck >= UPDATE_INTERVAL then
            periodicFollowCheck()
            lastFollowCheck = currentTime
        end
        
        -- Check operational state
        local canContinue, reason = hubcomms.shouldContinue()
        if not canContinue then
            if reason == ""emergency_stop"" then
                hubcomms.log(""Emergency stop - halting companion"", ""ERROR"")
                break
            elseif reason == ""paused"" then
                hubcomms.setPhase(""paused"", ""Companion paused with worker"")
                if not hubcomms.waitForResume() then
                    hubcomms.log(""Emergency stop during pause"", ""ERROR"")
                    break
                end
                hubcomms.setPhase(""following"", ""Companion resumed with worker"")
            end
        end
        
        sleep(1)
    end
    
    hubcomms.log(""Companion turtle shutting down"")
    hubcomms.cleanup()
end

-- Test mode for companion
function testMode()
    hubcomms.log(""=== Companion Test Mode ==="")
    
    if not initializeCompanion() then
        print(""Failed to initialize companion turtle"")
        return
    end
    
    -- Simulate following behavior
    hubcomms.log(""Test mode - simulating following behavior"")
    
    for i = 1, 10 do
        hubcomms.log(""Test iteration "" .. i)
        
        -- Simulate worker position updates
        workerPosition = {
            x = i * 2,
            y = 64,
            z = i * 3, 
            facing = i % 4
        }
        
        hubcomms.log(""Simulated worker position: "" .. workerPosition.x .. "","" .. workerPosition.y .. "","" .. workerPosition.z)
        
        local target = calculateTargetPosition()
        if target then
            hubcomms.log(""Calculated target: "" .. target.x .. "","" .. target.y .. "","" .. target.z)
        end
        
        hubcomms.handleCommunications()
        sleep(3)
    end
    
    hubcomms.log(""Test complete"")
    hubcomms.cleanup()
end

-- Run based on command line argument
local args = {...}
if args[1] == ""test"" then
    testMode()
else
    main()
end"
GJSj9370,ESP32-S3-ETH-8DI-8RO-C,DeaD_EyE,Python,Wednesday 13th of August 2025 11:59:31 AM CDT,"""""""
Test Code for ESP32-S3-ETH-8DI-8RO-C

https://www.waveshare.com/wiki/ESP32-S3-ETH-8DI-8RO-C#Inteface_Description

This works:
- WLAN
- WS2812B LED
- Outputs

Implemented but not tested:
- Inputs

Not tested yet:
- CAN
- RTC

Does not work:
- Ethernet has some issues, doesn't work yet 
""""""

import time
from machine import Pin, I2C, SPI
from network import LAN, PHY_W5500
from neopixel import NeoPixel

# TCA99554PWR is used to control the relay outputs
TCA_ADDR = 32
TCA_CONFIG = 0x03
TCA_OUTPUT = 0x01

# LED at USB-C Port
np = NeoPixel(Pin(38), 1)
np[0] = (120, 10, 50)
np.write()

# TCA: 32, RTC: 81
i2c = I2C(scl=Pin(41), sda=Pin(42), freq=400_000)
# first set all outputs to 0
i2c.writeto_mem(TCA_ADDR, TCA_OUTPUT, b'\x00')
#then configure all gpios as outputs
i2c.writeto_mem(TCA_ADDR, TCA_CONFIG, b'\x00')

# GPIO-Inputs are from ESP32
inputs = [Pin(4 + n, mode=Pin.IN, pull=Pin.PULL_DOWN) for n in range(8)]


def read_port(port) -> bool:
    """"""
    Read Port 1 - 8
    """"""
    return inputs[port - 1].value()


def set_output(port: int, value: bool):
    """"""
    Write to Port 1 - 8
    
    Chip: TCA99554PWR (I2C)
    """"""
    buffer = bytearray(1)
    i2c.readfrom_mem_into(TCA_ADDR, TCA_OUTPUT, buffer)
    
    if value:
        buffer[0] |= 1 << (port - 1)
    else:
        buffer[0] &= ~(1 << (port - 1))

    i2c.writeto_mem(TCA9554A_ADDR, TCA_OUTPUT, buffer)


# test 1
for color in [(255,0,0), (0,255,0), (0,0,255)]:
    np[0] = color
    np.write()
    time.sleep(1)
np[0] = (0,0,0)
np.write()

# test 2
for port in range(1, 9):
    if port > 1:
        set_output(port - 1, False)
    set_output(port, True)
    time.sleep(0.2)
set_output(8, False)

""""""
# This does not work yet.


print(""Starting LAN"")
time.sleep(5)

lan_spi = SPI(2, sck=Pin(15), mosi=Pin(13), miso=Pin(14), baudrate=20_000_000)

lan_int = Pin(12, mode=Pin.IN)
lan_sel = Pin(16, mode=Pin.OUT)
lan_rst = Pin(39, mode=Pin.OUT)

eth0 = LAN(spi=lan_spi, cs=lan_sel, int=lan_int, phy_type=PHY_W5500, phy_addr=0)
""""""

"
K7NXKQHt,Untitled,Josif_tepe,C,Wednesday 13th of August 2025 11:54:58 AM CDT,"#include <stdio.h>

int main(void) {
    int n;
    scanf(""%d"", &n);
    
    int broj_na_deliteli = 0;
    
    for(int i = 1; i <= n; i++) {
        if(n % i == 0) {
            broj_na_deliteli++;
            printf(""%d\n"", i);
        }
    }
    
    if(broj_na_deliteli > 2) {
        printf(""SLOZHEN BROJ\n"");
    }
    else {
        printf(""PROST BROJ\n"");
    }
    return 0;
}
"
NDzXgVJX,Untitled,Josif_tepe,C,Wednesday 13th of August 2025 11:50:13 AM CDT,"#include <stdio.h>

int main(void) {
    int n;
    scanf(""%d"", &n);
    
    float vkupno = n;
    float kolku_se_validni = 0.0;
    for(int i = 0; i < n; i++) {
        int broj;
        scanf(""%d"", &broj);
        
        int zbir = 0;
        for(int j = broj; j > 0; j /= 10) {
            int cifra = j % 10;
            
            zbir += cifra;
        }
        
        if(zbir < 10) {
            kolku_se_validni += 1.0;
        }
    }
    
    float procent = kolku_se_validni / vkupno;
    procent *= 100.0;
    
    printf(""%.2f%%"", procent);
    return 0;
}
"
PmrqhWxx,insufficient added,max2201111,Python,Wednesday 13th of August 2025 11:44:03 AM CDT,"import time
import copy
from datetime import datetime
from typing import List, Tuple, Optional, Dict, Set

class ChessEngine:
    def __init__(self):
        # Základní nastavení
        self.board = [['' for _ in range(8)] for _ in range(8)]
        self.white_to_move = True
        self.castling_rights = {'K': True, 'Q': True, 'k': True, 'q': True}
        self.en_passant = None
        self.halfmove_clock = 0
        self.fullmove_number = 1
        
        # Hodnoty figur pro evaluaci
        self.piece_values = {
            'P': 100, 'N': 320, 'B': 330, 'R': 500, 'Q': 900, 'K': 20000,
            'p': -100, 'n': -320, 'b': -330, 'r': -500, 'q': -900, 'k': -20000,
            'A': 1200, 'a': -1200,  # Amazonka (kůň + dáma)
            'C': 800, 'c': -800,    # Cyril (kůň + věž)
            'E': 650, 'e': -650     # Eve (kůň + střelec)
        }
        
        # Historie tahů pro výpis cesty
        self.move_history = []
        self.position_history = []
        
    def load_fen(self, fen: str):
        """"""Načte pozici z FEN stringu""""""
        # Nejdříve vymaž šachovnici
        self.board = [['' for _ in range(8)] for _ in range(8)]
        
        parts = fen.split()
        
        # Parsování pozice
        rows = parts[0].split('/')
        for row_idx, row in enumerate(rows):
            if row_idx >= 8:  # Ochrana proti příliš mnoha řádkům
                break
            col_idx = 0
            for char in row:
                if col_idx >= 8:  # Ochrana proti překročení sloupců
                    break
                if char.isdigit():
                    # Prázdná pole
                    empty_squares = int(char)
                    for _ in range(empty_squares):
                        if col_idx < 8:
                            self.board[row_idx][col_idx] = ''
                            col_idx += 1
                else:
                    self.board[row_idx][col_idx] = char
                    col_idx += 1
        
        # Na tahu
        self.white_to_move = parts[1] == 'w'
        
        # Rošáda
        castling = parts[2] if len(parts) > 2 else '-'
        self.castling_rights = {
            'K': 'K' in castling,
            'Q': 'Q' in castling,
            'k': 'k' in castling,
            'q': 'q' in castling
        }
        
        # En passant
        self.en_passant = parts[3] if len(parts) > 3 and parts[3] != '-' else None
        
        # Počet tahů
        self.halfmove_clock = int(parts[4]) if len(parts) > 4 else 0
        self.fullmove_number = int(parts[5]) if len(parts) > 5 else 1
        
    def to_fen(self) -> str:
        """"""Převede aktuální pozici na FEN string""""""
        # Pozice
        fen_rows = []
        for row in self.board:
            fen_row = ''
            empty_count = 0
            for cell in row:
                if cell == '':
                    empty_count += 1
                else:
                    if empty_count > 0:
                        fen_row += str(empty_count)
                        empty_count = 0
                    fen_row += cell
            if empty_count > 0:
                fen_row += str(empty_count)
            fen_rows.append(fen_row)
        
        board_fen = '/'.join(fen_rows)
        
        # Na tahu
        active_color = 'w' if self.white_to_move else 'b'
        
        # Rošáda
        castling = ''
        if self.castling_rights['K']: castling += 'K'
        if self.castling_rights['Q']: castling += 'Q'
        if self.castling_rights['k']: castling += 'k'
        if self.castling_rights['q']: castling += 'q'
        if not castling: castling = '-'
        
        # En passant
        en_passant = self.en_passant if self.en_passant else '-'
        
        return f""{board_fen} {active_color} {castling} {en_passant} {self.halfmove_clock} {self.fullmove_number}""
    
    def print_board(self):
        """"""Vypíše šachovnici v ASCII formátu""""""
        print(""  a b c d e f g h"")
        for i in range(8):
            print(f""{8-i} "", end="""")
            for j in range(8):
                piece = self.board[i][j]
                if piece == '':
                    piece = '.'
                print(f""{piece} "", end="""")
            print(f""{8-i}"")
        print(""  a b c d e f g h"")
        print()
    
    def is_white_piece(self, piece: str) -> bool:
        """"""Zjistí, zda je figura bílá""""""
        return piece.isupper()
    
    def get_piece_moves(self, row: int, col: int, check_castling: bool = True) -> List[Tuple[int, int]]:
        """"""Získá všechny možné tahy pro figuru na dané pozici""""""
        piece = self.board[row][col]
        if piece == '':
            return []
        
        piece_type = piece.lower()
        is_white = self.is_white_piece(piece)
        moves = []
        
        if piece_type == 'p':
            # Pěšec
            direction = -1 if is_white else 1
            start_row = 6 if is_white else 1
            
            # Tah dopředu
            if 0 <= row + direction < 8 and self.board[row + direction][col] == '':
                moves.append((row + direction, col))
                # Dvojitý tah z počáteční pozice
                if row == start_row and self.board[row + 2 * direction][col] == '':
                    moves.append((row + 2 * direction, col))
            
            # Braní úhlopříčně
            for dc in [-1, 1]:
                new_row, new_col = row + direction, col + dc
                if 0 <= new_row < 8 and 0 <= new_col < 8:
                    target = self.board[new_row][new_col]
                    if target != '' and self.is_white_piece(target) != is_white:
                        moves.append((new_row, new_col))
                    # En passant
                    elif self.en_passant and self.en_passant == f""{chr(ord('a') + new_col)}{8 - new_row}"":
                        moves.append((new_row, new_col))
        
        elif piece_type == 'r':
            # Věž
            directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
            for dr, dc in directions:
                for i in range(1, 8):
                    new_row, new_col = row + i * dr, col + i * dc
                    if not (0 <= new_row < 8 and 0 <= new_col < 8):
                        break
                    target = self.board[new_row][new_col]
                    if target == '':
                        moves.append((new_row, new_col))
                    else:
                        if self.is_white_piece(target) != is_white:
                            moves.append((new_row, new_col))
                        break
        
        elif piece_type == 'n':
            # Kůň
            knight_moves = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]
            for dr, dc in knight_moves:
                new_row, new_col = row + dr, col + dc
                if 0 <= new_row < 8 and 0 <= new_col < 8:
                    target = self.board[new_row][new_col]
                    if target == '' or self.is_white_piece(target) != is_white:
                        moves.append((new_row, new_col))
        
        elif piece_type == 'b':
            # Střelec
            directions = [(1, 1), (1, -1), (-1, 1), (-1, -1)]
            for dr, dc in directions:
                for i in range(1, 8):
                    new_row, new_col = row + i * dr, col + i * dc
                    if not (0 <= new_row < 8 and 0 <= new_col < 8):
                        break
                    target = self.board[new_row][new_col]
                    if target == '':
                        moves.append((new_row, new_col))
                    else:
                        if self.is_white_piece(target) != is_white:
                            moves.append((new_row, new_col))
                        break
        
        elif piece_type == 'q':
            # Dáma
            directions = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]
            for dr, dc in directions:
                for i in range(1, 8):
                    new_row, new_col = row + i * dr, col + i * dc
                    if not (0 <= new_row < 8 and 0 <= new_col < 8):
                        break
                    target = self.board[new_row][new_col]
                    if target == '':
                        moves.append((new_row, new_col))
                    else:
                        if self.is_white_piece(target) != is_white:
                            moves.append((new_row, new_col))
                        break
        
        elif piece_type == 'k':
            # Král
            king_moves = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]
            for dr, dc in king_moves:
                new_row, new_col = row + dr, col + dc
                if 0 <= new_row < 8 and 0 <= new_col < 8:
                    target = self.board[new_row][new_col]
                    if target == '' or self.is_white_piece(target) != is_white:
                        moves.append((new_row, new_col))
            
            # Rošáda - pouze pokud je povoleno kontrolovat (vyhneme se rekurzi)
            if check_castling and not self.is_in_check(is_white):
                # Krátká rošáda
                castling_key = 'K' if is_white else 'k'
                if self.castling_rights[castling_key]:
                    if (self.board[row][col + 1] == '' and self.board[row][col + 2] == '' and
                        not self.is_square_attacked(row, col + 1, not is_white) and
                        not self.is_square_attacked(row, col + 2, not is_white)):
                        moves.append((row, col + 2))
                
                # Dlouhá rošáda
                castling_key = 'Q' if is_white else 'q'
                if self.castling_rights[castling_key]:
                    if (self.board[row][col - 1] == '' and self.board[row][col - 2] == '' and
                        self.board[row][col - 3] == '' and
                        not self.is_square_attacked(row, col - 1, not is_white) and
                        not self.is_square_attacked(row, col - 2, not is_white)):
                        moves.append((row, col - 2))
        
        elif piece_type == 'a':  # Amazonka (kůň + dáma)
            # Tahy dámy
            directions = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]
            for dr, dc in directions:
                for i in range(1, 8):
                    new_row, new_col = row + i * dr, col + i * dc
                    if not (0 <= new_row < 8 and 0 <= new_col < 8):
                        break
                    target = self.board[new_row][new_col]
                    if target == '':
                        moves.append((new_row, new_col))
                    else:
                        if self.is_white_piece(target) != is_white:
                            moves.append((new_row, new_col))
                        break
            # Tahy koně
            knight_moves = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]
            for dr, dc in knight_moves:
                new_row, new_col = row + dr, col + dc
                if 0 <= new_row < 8 and 0 <= new_col < 8:
                    target = self.board[new_row][new_col]
                    if target == '' or self.is_white_piece(target) != is_white:
                        moves.append((new_row, new_col))
        
        elif piece_type == 'c':  # Cyril (kůň + věž)
            # Tahy věže
            directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
            for dr, dc in directions:
                for i in range(1, 8):
                    new_row, new_col = row + i * dr, col + i * dc
                    if not (0 <= new_row < 8 and 0 <= new_col < 8):
                        break
                    target = self.board[new_row][new_col]
                    if target == '':
                        moves.append((new_row, new_col))
                    else:
                        if self.is_white_piece(target) != is_white:
                            moves.append((new_row, new_col))
                        break
            # Tahy koně
            knight_moves = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]
            for dr, dc in knight_moves:
                new_row, new_col = row + dr, col + dc
                if 0 <= new_row < 8 and 0 <= new_col < 8:
                    target = self.board[new_row][new_col]
                    if target == '' or self.is_white_piece(target) != is_white:
                        moves.append((new_row, new_col))
        
        elif piece_type == 'e':  # Eve (kůň + střelec)
            # Tahy střelce
            directions = [(1, 1), (1, -1), (-1, 1), (-1, -1)]
            for dr, dc in directions:
                for i in range(1, 8):
                    new_row, new_col = row + i * dr, col + i * dc
                    if not (0 <= new_row < 8 and 0 <= new_col < 8):
                        break
                    target = self.board[new_row][new_col]
                    if target == '':
                        moves.append((new_row, new_col))
                    else:
                        if self.is_white_piece(target) != is_white:
                            moves.append((new_row, new_col))
                        break
            # Tahy koně
            knight_moves = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]
            for dr, dc in knight_moves:
                new_row, new_col = row + dr, col + dc
                if 0 <= new_row < 8 and 0 <= new_col < 8:
                    target = self.board[new_row][new_col]
                    if target == '' or self.is_white_piece(target) != is_white:
                        moves.append((new_row, new_col))
        
        return moves
    
    def is_square_attacked(self, row: int, col: int, by_white: bool) -> bool:
        """"""Zjistí, zda je pole napadené danou barvou""""""
        for r in range(8):
            for c in range(8):
                piece = self.board[r][c]
                if piece != '' and self.is_white_piece(piece) == by_white:
                    # Nekontroluji rošádu při detekci napadení (vyhneme se rekurzi)
                    moves = self.get_piece_moves(r, c, check_castling=False)
                    if (row, col) in moves:
                        return True
        return False
    
    def find_king(self, is_white: bool) -> Tuple[int, int]:
        """"""Najde krále dané barvy""""""
        king = 'K' if is_white else 'k'
        for r in range(8):
            for c in range(8):
                if self.board[r][c] == king:
                    return (r, c)
        return (-1, -1)  # Král nenalezen
    
    def is_in_check(self, is_white: bool) -> bool:
        """"""Zjistí, zda je král v šachu""""""
        king_pos = self.find_king(is_white)
        if king_pos == (-1, -1):
            return False
        return self.is_square_attacked(king_pos[0], king_pos[1], not is_white)
    
    def make_move(self, from_pos: Tuple[int, int], to_pos: Tuple[int, int]) -> bool:
        """"""Provede tah a vrátí True, pokud je legální""""""
        from_row, from_col = from_pos
        to_row, to_col = to_pos
        
        piece = self.board[from_row][from_col]
        if piece == '':
            return False
        
        is_white = self.is_white_piece(piece)
        if is_white != self.white_to_move:
            return False
        
        # Zkontroluj, zda je tah v seznamu možných tahů
        possible_moves = self.get_piece_moves(from_row, from_col)
        if (to_row, to_col) not in possible_moves:
            return False
        
        # Ulož původní stav
        original_board = copy.deepcopy(self.board)
        original_castling = copy.deepcopy(self.castling_rights)
        original_en_passant = self.en_passant
        
        # Proveď tah
        captured_piece = self.board[to_row][to_col]
        self.board[to_row][to_col] = piece
        self.board[from_row][from_col] = ''
        
        # Speciální tahy
        piece_type = piece.lower()
        
        # En passant
        if piece_type == 'p' and self.en_passant and f""{chr(ord('a') + to_col)}{8 - to_row}"" == self.en_passant:
            if is_white:
                self.board[to_row + 1][to_col] = ''
            else:
                self.board[to_row - 1][to_col] = ''
        
        # Rošáda
        if piece_type == 'k' and abs(to_col - from_col) == 2:
            if to_col > from_col:  # Krátká rošáda
                self.board[from_row][7] = ''
                self.board[from_row][5] = 'R' if is_white else 'r'
            else:  # Dlouhá rošáda
                self.board[from_row][0] = ''
                self.board[from_row][3] = 'R' if is_white else 'r'
        
        # Aktualizace en passant
        if piece_type == 'p' and abs(to_row - from_row) == 2:
            self.en_passant = f""{chr(ord('a') + from_col)}{8 - (from_row + to_row) // 2}""
        else:
            self.en_passant = None
        
        # Aktualizace rošádových práv
        if piece_type == 'k':
            if is_white:
                self.castling_rights['K'] = False
                self.castling_rights['Q'] = False
            else:
                self.castling_rights['k'] = False
                self.castling_rights['q'] = False
        elif piece_type == 'r':
            if from_row == 0 or from_row == 7:
                if from_col == 0:
                    key = 'Q' if from_row == 7 else 'q'
                    self.castling_rights[key] = False
                elif from_col == 7:
                    key = 'K' if from_row == 7 else 'k'
                    self.castling_rights[key] = False
        
        # Zkontroluj, zda vlastní král není v šachu
        if self.is_in_check(is_white):
            # Vrať původní stav
            self.board = original_board
            self.castling_rights = original_castling
            self.en_passant = original_en_passant
            return False
        
        # Tah je legální
        self.white_to_move = not self.white_to_move
        if not self.white_to_move:
            self.fullmove_number += 1
        
        if captured_piece or piece_type == 'p':
            self.halfmove_clock = 0
        else:
            self.halfmove_clock += 1
        
        return True
    
    def undo_move(self, from_pos: Tuple[int, int], to_pos: Tuple[int, int], 
                  captured_piece: str, old_castling: dict, old_en_passant: str,
                  old_halfmove: int, old_fullmove: int, was_white_to_move: bool):
        """"""Vrátí tah zpět""""""
        from_row, from_col = from_pos
        to_row, to_col = to_pos
        
        piece = self.board[to_row][to_col]
        self.board[from_row][from_col] = piece
        self.board[to_row][to_col] = captured_piece
        
        # Vrácení speciálních tahů
        piece_type = piece.lower()
        
        # Rošáda
        if piece_type == 'k' and abs(to_col - from_col) == 2:
            if to_col > from_col:  # Krátká rošáda
                self.board[from_row][7] = 'R' if self.is_white_piece(piece) else 'r'
                self.board[from_row][5] = ''
            else:  # Dlouhá rošáda
                self.board[from_row][0] = 'R' if self.is_white_piece(piece) else 'r'
                self.board[from_row][3] = ''
        
        # En passant
        if piece_type == 'p' and old_en_passant and f""{chr(ord('a') + to_col)}{8 - to_row}"" == old_en_passant:
            if self.is_white_piece(piece):
                self.board[to_row + 1][to_col] = 'p'
            else:
                self.board[to_row - 1][to_col] = 'P'
        
        self.castling_rights = old_castling
        self.en_passant = old_en_passant
        self.halfmove_clock = old_halfmove
        self.fullmove_number = old_fullmove
        self.white_to_move = was_white_to_move
    
    def get_all_legal_moves(self) -> List[Tuple[Tuple[int, int], Tuple[int, int]]]:
        """"""Získá všechny legální tahy pro aktuálního hráče""""""
        legal_moves = []
        
        for row in range(8):
            for col in range(8):
                piece = self.board[row][col]
                if piece != '' and self.is_white_piece(piece) == self.white_to_move:
                    moves = self.get_piece_moves(row, col)
                    for to_row, to_col in moves:
                        # Zkopíruj stav
                        original_state = self.save_state()
                        
                        # Zkus tah
                        if self.make_move((row, col), (to_row, to_col)):
                            legal_moves.append(((row, col), (to_row, to_col)))
                        
                        # Vrať stav
                        self.restore_state(original_state)
        
        return legal_moves
    
    def save_state(self):
        """"""Uloží aktuální stav hry""""""
        return {
            'board': copy.deepcopy(self.board),
            'white_to_move': self.white_to_move,
            'castling_rights': copy.deepcopy(self.castling_rights),
            'en_passant': self.en_passant,
            'halfmove_clock': self.halfmove_clock,
            'fullmove_number': self.fullmove_number
        }
    
    def restore_state(self, state):
        """"""Obnoví uložený stav hry""""""
        self.board = state['board']
        self.white_to_move = state['white_to_move']
        self.castling_rights = state['castling_rights']
        self.en_passant = state['en_passant']
        self.halfmove_clock = state['halfmove_clock']
        self.fullmove_number = state['fullmove_number']
    
    def get_material_balance(self) -> int:
        """"""Spočítá materiální vyváženost (pozitivní = výhoda bílého)""""""
        balance = 0
        for row in range(8):
            for col in range(8):
                piece = self.board[row][col]
                if piece != '' and piece.lower() != 'k':  # Ignoruj krále
                    balance += self.piece_values.get(piece, 0)
        return balance
    
    def evaluate_position(self) -> int:
        """"""Ohodnotí pozici s lepším rozlišením koncových pozic""""""
        # Rychlá kontrola matu/patu před materiálním hodnocením
        if self.is_checkmate():
            if self.white_to_move:  # Bílý v matu -> černý vyhrál
                return -999999
            else:  # Černý v matu -> bílý vyhrál
                return 999999
                
        elif self.is_stalemate():
            # Pat: ve vítězné pozici je to neúspěch
            material_balance = self.get_material_balance()
            if material_balance > 300:  # Bílý má výhodu -> pat je velmi špatný
                return -10000  
            elif material_balance < -300:  # Černý má výhodu -> pat je velmi dobrý pro bílého
                return 10000
            else:
                return 0  # Vyrovnaná pozice
        
        # Materiální hodnocení
        score = self.get_material_balance()
        
        # Bonus pro pokročilé koncovky - motivace k matu
        if abs(score) > 500:  # Významná materiální výhoda
            # Penalty za vzdálenost králů (v koncovce chceme krále blízko)
            white_king = self.find_king(True)
            black_king = self.find_king(False)
            
            if white_king != (-1, -1) and black_king != (-1, -1):
                king_distance = abs(white_king[0] - black_king[0]) + abs(white_king[1] - black_king[1])
                if score > 0:  # Bílý vede
                    score -= king_distance * 10  # Penalty za vzdálené krále
                else:  # Černý vede
                    score += king_distance * 10
        
        return score
    
    def is_checkmate(self) -> bool:
        """"""Zjistí, zda je mat""""""
        if not self.is_in_check(self.white_to_move):
            return False
        
        legal_moves = self.get_all_legal_moves()
        return len(legal_moves) == 0
    
    def is_stalemate(self) -> bool:
        """"""Zjistí, zda je pat""""""
        if self.is_in_check(self.white_to_move):
            return False
        
        legal_moves = self.get_all_legal_moves()
        return len(legal_moves) == 0

    # ======== NOVÁ METODA PRO NEDOSTATEK MATERIÁLU ========
    def is_insufficient_material(self) -> bool:
        """"""
        Vrátí True, pokud žádná strana nemá dost materiálu k vynucení matu.
        Pravidla (použité v implementaci):
         - K vs K -> insufficient
         - K+N vs K -> insufficient
         - K+B vs K -> insufficient
         - K+B vs K+B se stejnobarevnými střelci -> insufficient
         - Jakákoli strana s A/C/E/Q/R/P má dost materiálu -> sufficient
           (E = střelec+kůň v jednom -> považujeme za dostatečný materiál)
        """"""
        # Sběr informací o figurách pro obě barvy
        white_pieces: List[str] = []
        black_pieces: List[str] = []
        white_bishop_squares: List[Tuple[int,int]] = []
        black_bishop_squares: List[Tuple[int,int]] = []

        for r in range(8):
            for c in range(8):
                p = self.board[r][c]
                if p == '' or p.lower() == 'k':
                    continue
                if self.is_white_piece(p):
                    white_pieces.append(p)
                    if p.lower() == 'b':
                        white_bishop_squares.append((r, c))
                else:
                    black_pieces.append(p)
                    if p.lower() == 'b':
                        black_bishop_squares.append((r, c))

        # Pokud žádná strana nemá jiné figury než králové
        if not white_pieces and not black_pieces:
            return True

        # Pokud některá strana má ""jasně matovací"" figury => sufficient
        def side_has_obvious_mating(pieces: List[str]) -> bool:
            for x in pieces:
                t = x.lower()
                if t in ('a', 'c', 'e', 'q', 'r', 'p'):  # E treated as B+N -> sufficient
                    return True
                if t == 'b' or t == 'n':
                    # pokračujeme, protože samotný B nebo N nemusí být dostačující
                    continue
            return False

        # Pokud bílý nebo černý má nějakou ""vysoce matovací"" figuru, ok
        if side_has_obvious_mating(white_pieces):
            white_can_mate = True
        else:
            # Bílý má jen lehké figury (B nebo N) nebo nic
            if len(white_pieces) == 0:
                white_can_mate = False
            elif len(white_pieces) == 1:
                t = white_pieces[0].lower()
                # jediný jezdec nebo jediný střelec není dostačující
                white_can_mate = False if t in ('n', 'b') else True
            else:
                # více než 1 figurka (avšak bez A/C/E/Q/R/P) - většinou může matovat
                # např. B+N nebo 2B, 2N (2N formálně často nedokáže vynutit, ale nebudeme být přehnaně striktní)
                # důležité: B+N je sufficient
                types = set([p.lower() for p in white_pieces])
                if 'e' in types or ('b' in types and 'n' in types):
                    white_can_mate = True
                elif 'b' in types and len([p for p in white_pieces if p.lower() == 'b']) == 2:
                    # dva střelci na různých barvách mohou vynutit mat -> sufficient
                    # ověříme barvu polí níže ; zatím považujeme za možný
                    white_can_mate = True
                else:
                    # jinak považujeme za schopné (konzervativní přístup)
                    white_can_mate = True

        if side_has_obvious_mating(black_pieces):
            black_can_mate = True
        else:
            if len(black_pieces) == 0:
                black_can_mate = False
            elif len(black_pieces) == 1:
                t = black_pieces[0].lower()
                black_can_mate = False if t in ('n', 'b') else True
            else:
                types = set([p.lower() for p in black_pieces])
                if 'e' in types or ('b' in types and 'n' in types):
                    black_can_mate = True
                elif 'b' in types and len([p for p in black_pieces if p.lower() == 'b']) == 2:
                    black_can_mate = True
                else:
                    black_can_mate = True

        # Speciální kontrola: K+B vs K+B - pokud oba mají pouze po jednom střelci a žádné jiné figury,
        # musíme zjistit, zda jsou střelci na stejné barvě polí.
        def square_color(r: int, c: int) -> int:
            # 0 = světlé, 1 = tmavé
            return (r + c) & 1

        # K+B vs K (bez dalších figur)
        if (len(white_pieces) == 1 and white_pieces[0].lower() in ('b', 'n') and not black_pieces) or \
           (len(black_pieces) == 1 and black_pieces[0].lower() in ('b', 'n') and not white_pieces):
            # jediný lehký proti holému králi -> insufficient
            return True

        # K+B vs K+B speciální případ
        if len(white_pieces) == 1 and len(black_pieces) == 1 and \
           white_pieces[0].lower() == 'b' and black_pieces[0].lower() == 'b':
            # oba mají právě jednoho střelce a nic dalšího
            # zjistíme barvy polí
            w_r, w_c = white_bishop_squares[0] if white_bishop_squares else (-1, -1)
            b_r, b_c = black_bishop_squares[0] if black_bishop_squares else (-1, -1)
            if w_r == -1 or b_r == -1:
                # nemáme souřadnice (nemělo by se stát), bezpečně považujeme za insufficient
                return True
            if square_color(w_r, w_c) == square_color(b_r, b_c):
                # stejné barvy polí -> insufficient
                return True
            else:
                # různé barvy polí -> teoreticky mat možný
                return False

        # Jinak považujeme pozici za insufficient jen pokud ani jedna strana nemůže matovat
        if not white_can_mate and not black_can_mate:
            return True

        return False

    def is_game_over(self) -> Tuple[bool, str]:
        """"""Zjistí, zda je hra u konce""""""
        if self.is_checkmate():
            winner = ""Černý"" if self.white_to_move else ""Bílý""
            return True, f""Mat! Vyhrál {winner}.""
        elif self.is_stalemate():
            return True, ""Pat! Remíza.""
        elif self.is_insufficient_material():  # <<< Přidáno: kontrola nedostatečného materiálu
            return True, ""Remíza – nedostatečný materiál.""
        elif self.halfmove_clock >= 100:
            return True, ""Remíza podle pravidla 50 tahů.""
        
        return False, """"
    
    def minimax(self, depth: int, alpha: int, beta: int, maximizing: bool, 
                path: List[str]) -> Tuple[int, List[str]]:
        """"""Minimax algoritmus s alfa-beta pruningem - OPRAVENO PRO MAT""""""
        
        # Kontrola konce hry
        if self.is_checkmate():
            # Mat: kdo vyhrál?
            if self.white_to_move:  # Bílý je na tahu ale je v matu -> černý vyhrál
                return (-999999 + len(path), path)
            else:  # Černý je na tahu ale je v matu -> bílý vyhrál  
                return (999999 - len(path), path)
                
        elif self.is_stalemate():
            # NOVÁ LOGIKA: Pat je vždy remíza, ale ve vítězné pozici je to selhání
            material_balance = self.get_material_balance()
            
            if material_balance > 300:  # Bílý má výraznou výhodu
                return (-10000, path)  # Pat ve vítězné pozici je velmi špatný pro bílého
            elif material_balance < -300:  # Černý má výraznou výhodu  
                return (10000, path)   # Pat ve vítězné pozici je velmi špatný pro černého
            else:
                return (0, path)  # Vyrovnaná pozice -> pat je OK
                
        elif self.halfmove_clock >= 100:
            return (0, path)
        
        if depth == 0:
            return (self.evaluate_position(), path)
        
        legal_moves = self.get_all_legal_moves()
        
        if maximizing:
            max_eval = float('-inf')
            best_path = path
            
            for move in legal_moves:
                # Ulož stav
                original_state = self.save_state()
                
                # Proveď tah
                self.make_move(move[0], move[1])
                move_notation = f""{chr(ord('a') + move[0][1])}{8 - move[0][0]}-{chr(ord('a') + move[1][1])}{8 - move[1][0]}""
                new_path = path + [move_notation]
                
                eval_score, eval_path = self.minimax(depth - 1, alpha, beta, False, new_path)
                
                if eval_score > max_eval:
                    max_eval = eval_score
                    best_path = eval_path
                
                # Vrať stav
                self.restore_state(original_state)
                
                alpha = max(alpha, eval_score)
                if beta <= alpha:
                    break
            
            return (max_eval, best_path)
        
        else:
            min_eval = float('inf')
            best_path = path
            
            for move in legal_moves:
                # Ulož stav
                original_state = self.save_state()
                
                # Proveď tah
                self.make_move(move[0], move[1])
                move_notation = f""{chr(ord('a') + move[0][1])}{8 - move[0][0]}-{chr(ord('a') + move[1][1])}{8 - move[1][0]}""
                new_path = path + [move_notation]
                
                eval_score, eval_path = self.minimax(depth - 1, alpha, beta, True, new_path)
                
                if eval_score < min_eval:
                    min_eval = eval_score
                    best_path = eval_path
                
                # Vrať stav
                self.restore_state(original_state)
                
                beta = min(beta, eval_score)
                if beta <= alpha:
                    break
            
            return (min_eval, best_path)
    
    def find_best_move(self, max_depth: int = 10) -> Tuple[Optional[List[str]], int]:
        """"""Najde nejlepší tah pomocí iterativního prohloubení""""""
        print(f""Hledání nejlepšího tahu (maximální hloubka: {max_depth})..."")
        print(f""Na tahu: {'Bílý' if self.white_to_move else 'Černý'}"")
        
        # Zkontroluj materiální situaci
        material_balance = self.get_material_balance()
        if material_balance > 300:
            print(f""Bílý má materiální výhodu ({material_balance} bodů) - hledám mat!"")
        elif material_balance < -300:
            print(f""Černý má materiální výhodu ({-material_balance} bodů) - bráním se!"")
        print()
        
        best_path = None
        best_score = 0
        
        for depth in range(1, max_depth + 1):
            # Přidání časového razítka před každou hloubku
            current_time = datetime.now().strftime(""%H:%M:%S"")
            
            start_time = time.time()
            
            # OPRAVA: maximizing musí odpovídat tomu, kdo je na tahu!
            # Bílý maximalizuje (+), černý minimalizuje (-)
            score, path = self.minimax(depth, float('-inf'), float('inf'), self.white_to_move, [])
            
            end_time = time.time()
            elapsed = end_time - start_time
            
            print(f""[{current_time}] Hloubka {depth}: skóre {score}, čas {elapsed:.3f}s"")
            
            best_path = path
            best_score = score
            
            # Pokud byl nalezen mat, skonči
            if abs(score) > 900000:
                print(f""Nalezen mat v {len(path)} tazích!"")
                break
                
            # Pokud je skóre příliš nízké ve vítězné pozici, pokračuj v hledání
            if material_balance > 300 and score < -500:
                print(f""Skóre {score} je příliš nízké pro vítěznou pozici, pokračujem..."")
        
        return best_path, best_score
    
    def play_game(self, initial_fen: str = None, max_depth: int = 6):
        """"""Spustí hru s automatickým hraním""""""
        if initial_fen:
            self.load_fen(initial_fen)
        else:
            # Standardní počáteční pozice
            self.load_fen(""rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"")
        
        print(""=== ŠACHOVÝ ENGINE S NESTANDARDNÍMI FIGURAMI ==="")
        print(""Legenda figur:"")
        print(""A/a = Amazonka (Kůň + Dáma)"")
        print(""C/c = Cyril (Kůň + Věž)"")
        print(""E/e = Eve (Kůň + Střelec)"")
        print()
        
        print(""Počáteční pozice:"")
        print(f""FEN: {self.to_fen()}"")
        self.print_board()
        
        move_count = 0
        # Historie provedených tahů
        executed_moves = []
        
        while True:
            game_over, result = self.is_game_over()
            if game_over:
                print(result)
                break
            
            move_count += 1
            print(f""\n=== TAH {move_count} ==="")
            
            best_path, score = self.find_best_move(max_depth)
            
            if not best_path:
                print(""Žádný tah nenalezen!"")
                break
            
            # Simuluj celou cestu
            if abs(score) > 900000:
                print(f""\nNalezená cesta k matu ({len(best_path)} tahů):"")
            elif abs(score) > 5000:
                print(f""\nNalezená silná cesta ({len(best_path)} tahů):"")
            elif abs(score) < -5000:
                print(f""\nVarování: Možný pat v {len(best_path)} tazích!"")
            else:
                print(f""\nNalezená cesta ({len(best_path)} tahů):"")
            
            current_engine = ChessEngine()
            current_engine.restore_state(self.save_state())
            
            # Vypíš počáteční pozici
            print(f""\nPočáteční pozice:"")
            print(f""FEN: {current_engine.to_fen()}"")
            current_engine.print_board()
            
            for i, move_notation in enumerate(best_path):
                # Parsuj a proveď tah
                from_pos = (8 - int(move_notation[1]), ord(move_notation[0]) - ord('a'))
                to_pos = (8 - int(move_notation[4]), ord(move_notation[3]) - ord('a'))
                
                if not current_engine.make_move(from_pos, to_pos):
                    print(""Chyba při provádění tahu!"")
                    break
                
                # Teď vypíš pozici PO provedení tahu
                print(f""\nTah {i + 1}: {move_notation}"")
                print(f""FEN: {current_engine.to_fen()}"")
                current_engine.print_board()
                
                game_over, result = current_engine.is_game_over()
                if game_over:
                    print(f""{result}"")
                    return
            
            # Proveď první tah z nalezené cesty
            if best_path:
                first_move = best_path[0]
                from_pos = (8 - int(first_move[1]), ord(first_move[0]) - ord('a'))
                to_pos = (8 - int(first_move[4]), ord(first_move[3]) - ord('a'))
                
                # Zapamatuj si, kdo hraje před tahem
                current_player = ""Bílý"" if self.white_to_move else ""Černý""
                
                if self.make_move(from_pos, to_pos):
                    # Přidej tah do historie
                    executed_moves.append(first_move)
                    
                    print(f""\nProveden tah: {first_move} ({current_player})"")
                    
                    # Vytiskni celou historii tahů s číslováním
                    print(f""\nCelá historie tahů ({len(executed_moves)} tahů):"")
                    history_display = []
                    for i, move in enumerate(executed_moves):
                        if i % 2 == 0:  # Bílý tah
                            move_number = (i // 2) + 1
                            history_display.append(f""{move_number}.{move}"")
                        else:  # Černý tah
                            history_display.append(move)
                    
                    # Rozděl do řádků po 6 tazích (3 páry)
                    for i in range(0, len(history_display), 6):
                        chunk = history_display[i:i+6]
                        print("" "".join(chunk))
                else:
                    print(""Chyba při provádění prvního tahu!"")
                    break
            else:
                break

# Spuštění enginu
if __name__ == ""__main__"":
    engine = ChessEngine()
    
    # Testovací pozice - zajímavější matový problém
    # Černý král v rohu, bílá Amazonka a král pro demonstraci síly Amazonky
    test_fen = ""k7/8/2A5/8/8/8/8/K7 w - - 0 1""
    test_fen = ""7A/8/8/8/8/8/6k1/1K6 w - - 0 1""

    test_fen = ""8/8/8/8/8/5BN1/5K1k/8 b - - 0 1""

    test_fen = ""8/8/8/5N2/8/5B1k/5K2/8 b - - 0 1""

#    test_fen = ""8/8/8/8/A7/4c1k1/8/6K1 w - - 0 1""
    
    print(f""Používám testovací pozici: {test_fen}"")
    print(""Pozice: Střelec na f3, Kůň na g3, Bílý král na f2, Černý král na h2"")
    engine.play_game(test_fen, max_depth=9)
"
xYewESDu,Untitled,Josif_tepe,C,Wednesday 13th of August 2025 11:43:11 AM CDT,"#include <stdio.h>

int main(void) {
    int broj;
    scanf(""%d"", &broj);
    
    int i = broj;
    int zbir = 0;
    while(i > 0) {
        int cifra = i % 10;
        i /= 10;
        
        printf(""%d "", cifra);
        zbir += cifra;
    }
    
    printf(""\n%d\n"", zbir);
    return 0;
}
"
wwcmFEjX,Untitled,Josif_tepe,C,Wednesday 13th of August 2025 11:41:30 AM CDT,"#include <stdio.h>

int main(void) {
    int broj;
    scanf(""%d"", &broj);
    
    int zbir = 0;
    for(int i = broj; i > 0; i /= 10) {
        int cifra = i % 10;
        
        zbir += cifra;
        printf(""%d "", cifra);
    }
    printf(""\n%d\n"", zbir);
    return 0;
}
"
055aAJdR,Untitled,Josif_tepe,C,Wednesday 13th of August 2025 11:30:36 AM CDT,"#include <stdio.h>

int main(void) {
    int broj;
    
    int prethoden_broj;
    int dali_sme_na_prviot_broj = 1;
    int kolku_broevi = 0;
    
    while(scanf(""%d"", &broj)) {
        if(dali_sme_na_prviot_broj == 1) {
            prethoden_broj = broj;
            dali_sme_na_prviot_broj = 0;
        }
        else {
            if(prethoden_broj >= broj) {
                break;
            }
            prethoden_broj = broj;
        }
        kolku_broevi++;
    }
    
    printf(""%d\n"", kolku_broevi);
    
    return 0;
}
"
fdqW17Ft,Untitled,Josif_tepe,C++,Wednesday 13th of August 2025 10:58:26 AM CDT,"#include <iostream>
#include <vector>
#include <queue>
using namespace std;
const int maxn = 1e5 + 5;
int n, m;
vector<int> graph[maxn];

void bfs(int S, int E) {
    queue<int> q;
    q.push(S);
    q.push(0);
    
    vector<bool> visited(n + 1, false);
    visited[S] = true;
    
    while(!q.empty()) {
        int node = q.front();
        q.pop();
        int dist = q.front();
        q.pop();
        
        if(node == E) {
            cout << dist << endl;
            break;
        }
        
        for(int neighbour : graph[node]) {
            if(!visited[neighbour]) {
                visited[neighbour] = true;
                q.push(neighbour);
                q.push(dist + 1);
            }
        }
        
    }
}
int main() {
    ios_base::sync_with_stdio(false);
    
    cin >> n >> m;
    
    for(int i = 0; i < m; i++) {
        int a, b;
        cin >> a >> b;
        graph[a].push_back(b);
        graph[b].push_back(a);
    }
    
    int S, E;
    cin >> S >> E;
    bfs(S, E);
    return 0;
}
"
rx0JQNk5,sets and stacks,aircampro,C++,Wednesday 13th of August 2025 10:48:04 AM CDT,"// simple program showing the use of sets and stacks
//
#include <vector>
#include <iostream>
#include <string>
#include <fstream>
#include <sstream>
#include <string>
#include <set>
#include <iterator>
#include <stack>

// find position of element in set
auto find_val_in_set(std::set<int>& st, int v2f) {
	auto first = st.find(v2f);
	return first;
}

// delete a value from the set
auto del_val_in_set(std::set<int>& st, int v2f) {
	auto first = st.find(v2f);
    auto b = st.erase(first);
	return *b;                                       // return next element value
}

// fast vector copy
// std::copy(v2.begin(),v2.end(),std::back_inserter(v1));

auto del_from_vals_in_set(std::set<int>& st, int v_st, int v_end) {
	auto first = st.find(v_st);
	auto last = st.find(v_end);
	st.erase(first, last);
	//for (auto itr = st.begin(); itr != st.end(); ++itr)
	//	std::cout << *itr;
    return first;
}

// leave odd numbers only
void remove_even_set(std::set<int>& st) {
	for (auto itr = st.begin(); itr != st.end();) {
		if (*itr % 2 == 0)
			itr = st.erase(itr);
		else
			++itr;;
	}
}

// leave even numbers only
auto remove_odd_set(std::set<int>& st) {
	for (auto itr = st.begin(); itr != st.end();) {
		if (!static_cast<bool>((*itr % 2)) == false)
			itr = st.erase(itr);
		else
			++itr;;
	}
}

int main() {
  std::vector<int> ssv = {2, 3, 6, 1, 76, 57, 68, 120, 118};
  std::set<int> ss;
  // going from vector to set automatically sorts the data in order
  for (auto i : ssv) {
      ss.insert(i);
  }
  auto aa = find_val_in_set(ss, 6);
  std::cout << ""value found "" << *aa << std::endl;
  // auto bb = del_val_in_set(ss, 6);
  // std::cout << ""value deleted next value is "" << bb << std::endl;
  auto a = del_from_vals_in_set(ss,1,6);
  std::cout << ""first deleted value was "" << *a << std::endl;
  for (auto itr = ss.begin(); itr != ss.end(); ++itr)
	  std::cout << *itr << std::endl;
  std::set<int> sss;
  for (auto s : ss) {
      std::cout << s << std::endl;
      sss.insert(s);
  }
  remove_odd_set(ss);
  std::cout << ""---------- only even ---------------"" << std::endl;
  for (auto s : ss) {
      std::cout << s << std::endl;
  }    
  remove_even_set(sss);
  std::cout << ""---------- only odd ---------------"" << std::endl;
  for (auto s : sss) {
      std::cout << s << std::endl;
  } 

  // show fifo stack
  std::cout << ""---------- fifo stack ---------------"" << std::endl;
  std::stack<int> fifo;
  for (auto i : ssv) {
      fifo.push(i);
  }
  std::cout << fifo.top() << std::endl;
  fifo.pop();
  std::cout << fifo.top() << std::endl;
   
  return 0;	
}"
LBPSfHyv,Untitled,TataVucko70,C++,Wednesday 13th of August 2025 10:14:23 AM CDT,"# include <iostream>
using namespace std;

const int MAX=1e6+11;
long long dp[MAX];

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);

    dp[1]=6;
    for(int i=2;i<=1e6;i++)
    {
        dp[i]=max(dp[i],dp[i-1]+i*3+2);
    }

    long long n,ans=0;
    cin>>n;
    for(int i=1;i<=1e6;i++)
    {
        if(n>=dp[i]) ans=i;
        else break;
    }

    cout<<ans<<""\n"";

    return 0;
}


"
Z41eqmsm,Untitled,Josif_tepe,Python,Wednesday 13th of August 2025 10:04:35 AM CDT,"

import numpy as np
import unittest



naslovi = np.genfromtxt(""chapters.txt"", dtype=str, delimiter='\n')

data = np.genfromtxt(""mentions.txt"", delimiter=',', dtype=str)
poglavja = data[:, 0].astype(int) - 1
osebe = data[:, 1]
omembe = data[:, 2].astype(float)

class Test0(unittest.TestCase):
    def test(self):
        np.testing.assert_equal(
            ['The Other Minister', ""Spinner's End"", ""Will and Won't"",
             'Horace Slughorn'],
            naslovi[:4]
        )
        np.testing.assert_equal(
            ['The Lightning-Struck Tower', 'Flight of the Prince',
             'The Phoenix Lament', 'The White Tomb'],
            naslovi[-4:]
        )
        np.testing.assert_equal(
            [0, 1, 2, 3, 3, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 10,
             10, 10, 11, 11, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16, 16, 17, 17,
             18, 18, 19, 19, 20, 20, 21, 22, 23, 23, 23, 24, 25, 26, 27, 28, 28,
             28, 29, 29, 29],
            poglavja[::17]
        )
        np.testing.assert_equal(
            ['Burke', 'Harry', 'Sirius', 'Dumbledore', 'Bones', 'Scrimgeour',
             'Voldemort', 'First', 'Kingsley', 'Vance', 'Fudge', 'Lestrange',
             'Lucius', 'Harry', 'Dumbledore', 'Narcissa', 'Sirius', 'Snape',
             'Voldemort', 'Draco', 'Quirrell', 'Karkaroff', 'Greyback',
             'Potter', 'Vance', 'Avery', 'Yaxley', 'Black', 'Lestrange',
             'Harry'],
            osebe[:30]
        )
        np.testing.assert_equal(
            [3, 1, 10, 4, 4, 16, 1, 1, 3, 3, 72, 36, 8, 3, 20, 46, 1,
             76, 51, 14, 1, 1, 1, 3, 1, 1, 1, 1, 6, 66],
            omembe[:30])
        np.testing.assert_equal(
            [2, 1, 5, 1, 1, 1, 1, 1, 11, 5, 7, 4, 1, 2, 1, 4, 1,
             4, 2, 2, 1, 15, 28, 2, 1, 2, 1, 1, 1, 1],
            omembe[-30:]
        )



# class Test1(unittest.TestCase):
#     def test_1_naj_oseba(self):
#         self.assertEqual(""Harry"", naj_oseba())
#
#     def test_2_naj_dogajanje(self):
#         self.assertEqual((""The Cave"", ""Harry""), naj_dogajanje())
#
#     def test_3_prva_omemba(self):
#         self.assertEqual(""The Other Minister"", prva_omemba(""Harry""))
#         self.assertEqual(""The Other Minister"", prva_omemba(""Sirius""))
#         self.assertEqual(""Spinner's End"", prva_omemba(""Draco""))
#         self.assertEqual(""Will and Won't"", prva_omemba(""Rosmerta""))
#         self.assertEqual(""Horace Slughorn"", prva_omemba(""Umbridge""))
#         self.assertEqual(""An Excess of Phlegm"", prva_omemba(""Ginny""))
#         self.assertEqual(""Snape Victorious"", prva_omemba(""Filch""))
#
#     def test_4_koliko_poglavij(self):
#         self.assertEqual(30, koliko_poglavij(""Harry""))
#         self.assertEqual(16, koliko_poglavij(""Sirius""))
#         self.assertEqual(17, koliko_poglavij(""Draco""))
#         self.assertEqual(6, koliko_poglavij(""Rosmerta""))
#         self.assertEqual(6, koliko_poglavij(""Umbridge""))
#         self.assertEqual(22, koliko_poglavij(""Ginny""))
#
#     def test_5_v_poglavjih_st(self):
#         np.testing.assert_equal(
#             [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29],
#             v_poglavjih_st(""Harry""))
#         np.testing.assert_equal(
#             [0,  1,  2,  3,  4,  5,  7, 11, 12, 15, 20, 22, 23, 24, 28, 29],
#             v_poglavjih_st(""Sirius""))
#         np.testing.assert_equal(
#             [1,  5,  6,  7, 11, 12, 13, 14, 15, 18, 19, 20, 21, 23, 24, 26, 27],
#             v_poglavjih_st(""Draco""))
#         np.testing.assert_equal(
#             [ 2, 11, 20, 24, 26, 28],
#             v_poglavjih_st(""Rosmerta""))
#         np.testing.assert_equal(
#             [ 3,  4,  6, 15, 16, 29],
#             v_poglavjih_st(""Umbridge""))
#         np.testing.assert_equal(
#             [ 4,  5,  6,  7,  8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29],
#             v_poglavjih_st(""Ginny""))
#
#     def test_6_v_poglavjih(self):
#         np.testing.assert_equal(
#             [""Will and Won't"", 'Silver and Opals', 'The Unknowable Room',
#              'The Seer Overheard', 'The Lightning-Struck Tower',
#              'The Phoenix Lament'],
#             v_poglavjih(""Rosmerta""))
#
#         np.testing.assert_equal(
#             ['Horace Slughorn', 'An Excess of Phlegm', 'The Slug Club',
#              'A Very Frosty Christmas', 'A Sluggish Memory', 'The White Tomb'],
#             v_poglavjih(""Umbridge""))
#
#     def test_7_vseh_omemb(self):
#         self.assertEqual(2789, vseh_omemb(""Harry""))
#         self.assertEqual(72, vseh_omemb(""Sirius""))
#         self.assertEqual(72, vseh_omemb(""Draco""))
#         self.assertEqual(21, vseh_omemb(""Rosmerta""))
#         self.assertEqual(13, vseh_omemb(""Umbridge""))
#         self.assertEqual(233, vseh_omemb(""Ginny""))
#
#
# class Test2(unittest.TestCase):
#     def test_1_maska_poglavij(self):
#         np.testing.assert_equal(
#             [False, False, True, False, False, False, False, False, False,
#              False, False, True, False, False, False, False, False, False,
#              False, False, True, False, False, False, True, False, True,
#              False, True, False],
#             maska_poglavij(""Rosmerta"")
#         )
#         np.testing.assert_equal(
#             [True, False, True, True, False, False, False, False, False,
#              False, False, False, False, False, True, True, True, False,
#              False, False, False, False, False, False, False, False, False,
#              False, False, True],
#             maska_poglavij(""Fudge"")
#         )
#         np.testing.assert_equal(
#             [False, False, False, False, False, False, True, False, True,
#              False, True, True, False, False, True, False, False, True,
#              False, False, True, False, False, True, False, False, False,
#              False, False, True],
#             maska_poglavij(""Crabbe"")
#         )
#
#     def test_2_podobnost(self):
#         self.assertAlmostEqual(0.8666666666666667, podobnost(""Harry"", ""Ron""))
#         self.assertAlmostEqual(0.9615384615384616, podobnost(""Hermione"", ""Ron""))
#         self.assertAlmostEqual(0.8888888888888888, podobnost(""Crabbe"", ""Goyle""))
#         self.assertAlmostEqual(0.34615384615384615, podobnost(""Crabbe"", ""Ron""))
#         self.assertAlmostEqual(0.08333333333333333, podobnost(""Rosmerta"", ""Fudge""))
#         self.assertAlmostEqual(0, podobnost(""Rosmerta"", ""Umbridge""))
#         self.assertAlmostEqual(0.11764705882352941, podobnost(""Filch"", ""Fudge""))
#

if __name__ == ""__main__"":
    # unittest.main()
    naslovi = np.genfromtxt(""chapters.txt"", dtype=str, delimiter='\n')

    data = np.genfromtxt(""mentions.txt"", delimiter=',', dtype=str)
    poglavja = data[:, 0].astype(int) - 1
    osebe = data[:, 1]
    omembe = data[:, 2].astype(float)
    print(naslovi)
    print(poglavja)
    print(osebe)
    print(omembe)"
RRW9SxJK,Untitled,Josif_tepe,Python,Wednesday 13th of August 2025 09:36:43 AM CDT,"


def indeks_drzave(drzave, drzava):
    return np.where(drzave == drzava)[0][0]


import unittest
import numpy as np

def srecne_drzave(tezina, vrednost, drzavi, mera):
    pari = vrednost / tezina
    niza = pari < mera
    return drzavi[niza]


def vec_kot(tezina, drzavi, drzava):
    idx = indeks_drzave(drzavi, drzava)
    tezina_na_drzava = tezina[idx]

    return np.sum(tezina > tezina_na_drzava)


class Test(unittest.TestCase):
    teze = np.array([
        1068570000, 9342850, 612897, 18700200, 49379400, 56, 370860, 43500500, 10144900, 13835200, 43631, 560529, 744,
        17534600, 244311, 1532300, 196011000, 11942800, 14537700, 126296000, 1109590000, 19241800, 351094000, 78485700,
        200695000, 38, 36990300, 1043, 44463300, 2254140, 8458220, 4928940, 34353400, 665230000, 921, 4361420000,
        6713560,
        2801620, 25146700, 1383, 232316000, 16513200, 15257100, 87426100, 1262980, 984042, 3696, 5001, 2276820, 1834080,
        3674190, 1389550, 18517700, 1405, 70, 214838000, 243406, 3811980, 209393, 663050000, 184010000, 37136, 2776060,
        1023000000, 96376, 42021600, 73296100, 10801, 652604000, 11648, 175679000, 56456100, 3244410, 432232, 28058500,
        5749150, 496208000, 189785000, 661390000, 306924000, 3990210, 2201580, 252888000, 721, 14383800, 24717400, 80,
        1035, 77105800, 5007, 20, 6560710, 15098200, 1260, 1308900000, 4985, 16187800, 81313800, 207859000, 12153300,
        27587000, 10744700, 620922, 120931000, 4078, 98410700, 40, 511178, 79888700, 10536100, 337907000, 623329, 54,
        21303300, 2243, 6242780, 53954900, 39347600, 58980300, 954379, 45073400, 221254000, 11955600, 8986530, 201142,
        152588000, 67857700, 2779200, 39630100, 4220, 72308600, 91093500, 505, 423, 682, 111907000, 8342420, 55854900,
        1000, 7133440, 192466, 623, 41875700, 20, 564718000, 7, 49, 36951000, 97095, 67025]
    )
    vrednosti = np.array([
        704414240.0, 5198640.0, 157250.0, 5112190.0, 36917880.0, 630.0, 8000.0, 15652370.0, 5257200.0, 9220620.0,
        92800.0,
        448430.0, 4370.0, 12969130.0, 49730.0, 382490.0, 132893720.0, 11756100.0, 4162040.0, 128338700.0, 850738690.0,
        19999940.0, 114364670.0, 82133940.0, 95349460.0, 290.0, 8672850.0, 1770.0, 34411500.0, 235290.0, 11840420.0,
        8420020.0, 30988300.0, 246818670.0, 6020.0, 2121188560.0, 1053330.0, 89600.0, 2210900.0, 1390.0, 89375730.0,
        8342040.000000001, 14250450.0, 86454840.0, 1010400.0, 5040470.0, 2960.0, 34260.0, 1324970.0, 1448430.0,
        1362790.0,
        769760.0, 1500810.0, 310.0, 290.0, 154979800.0, 319310.0, 212700.0, 317670.0, 497390830.0, 180013280.0, 17550.0,
        1794780.0, 762868730.0, 42760.0, 32244710.0, 34409890.0, 8550.0, 704455360.0, 52000.0, 47054850.0, 70982550.0,
        306660.0, 75920.0, 12041100.0, 5823920.0, 354618660.0, 131940180.0, 392402000.0, 176103690.0,
        4178640.0000000005,
        331280.0, 202587630.0, 3080.0, 11359250.0, 910640.0, 190.0, 830.0, 67082000.0, 21350.0, 340.0, 3809010.0,
        14232640.0, 1920.0, 946332640.0, 24940.0, 11224320.0, 61946980.0, 105558710.0, 339780.0, 16204030.0, 5069310.0,
        55400.0, 100032790.0, 3260.0, 47176630.0, 120.0, 163550.0, 101210240.0, 5584560.0, 210354680.0, 405000.0, 10.0,
        3255560.0, 4140.0, 7085300.0, 36155240.0, 17821430.0, 54699790.0, 744540.0, 24541610.0, 186693450.0, 1974190.0,
        5114640.0, 158850.0, 102653740.0, 47623360.0, 1565850.0, 25061160.0, 3550.0, 57945390.0, 57052640.0, 400.0,
        470.0,
        12040.0, 16552220.000000002, 367340.0, 4715430.0, 160.0, 7980060.0, 803750.0, 1060.0, 30607910.0, 20.0,
        427873090.0, 130.0, 240.0, 22456700.0, 111600.0, 32400.0]
    )
    drzave = np.array([
        'Russian Federation', 'Botswana', 'Paraguay', 'Tunisia', 'Croatia', 'Cook Islands', 'Benin', 'Uruguay',
        'Egypt, Arab Rep.', 'Bahrain', 'Greenland', 'Vietnam', 'French Polynesia', 'Albania', 'Lebanon', 'Malaysia',
        'Czech Republic', 'Estonia', 'Trinidad and Tobago', 'Austria', 'Japan', 'Azerbaijan', 'Argentina', 'Norway',
        'Turkey', 'Vanuatu', 'South Africa', 'Malawi', 'Belarus', 'Mauritania', 'Armenia', 'Luxembourg', 'Lithuania',
        'China', 'New Caledonia', 'United States', 'Nigeria', 'Burkina Faso', 'Colombia', 'Fiji',
        'Syrian Arab Republic',
        'Senegal', 'Georgia', 'Denmark', 'Bermuda', 'Bahamas, The', 'Dominican Republic', 'Venezuela', 'Macao',
        'Brunei',
        'Barbados', 'Maldives', 'Mali', 'Pakistan', ""Cote d'Ivoire"", 'Ukraine', 'Andorra', 'Niger', 'Mexico', 'Italy',
        'Sweden', 'St. Kitts and Nevis', 'Aruba', 'United Kingdom', 'Kenya', 'Bulgaria', 'Hong Kong, China', 'Panama',
        'Belgium', 'Israel', 'Chile', 'Finland', 'Rwanda', 'Bhutan', 'Morocco', 'Iceland', 'Canada', 'Spain',
        'Iran, Islamic Rep.', 'Saudi Arabia', 'Namibia', 'Guatemala', 'Poland', 'Ethiopia(excludes Eritrea)',
        'Occ.Pal.Terr', 'Costa Rica', 'Comoros', 'Lao PDR', 'Hungary', 'Ghana', 'Gambia, The', 'Montenegro', 'Latvia',
        'Bangladesh', 'Germany', 'Brazil', 'North Macedonia', 'New Zealand', 'Algeria', 'Nepal', 'Qatar', 'Oman',
        'Uganda', 'Greece', 'Mozambique', 'Libya', 'Guyana', 'Zimbabwe', 'Switzerland', 'Moldova', 'Korea, Rep.',
        'Antigua and Barbuda', 'Bolivia', 'Afghanistan', 'Gabon', 'Malta', 'Slovenia', 'Singapore', 'Slovak Republic',
        'Lesotho', 'Kazakhstan', 'Netherlands', 'Thailand', 'Kyrgyz Republic', 'Zambia', 'Portugal', 'Romania',
        'Indonesia', 'Jordan', 'Angola', 'Ireland', 'Kuwait', 'Micronesia, Fed. Sts.', 'St. Lucia', 'Seychelles',
        'El Salvador', 'Nicaragua', 'Honduras', 'Burundi', 'Cyprus', 'Australia', 'Cape Verde',
        'Serbia, FR(Serbia/Montenegro)', 'Palau', 'France', 'Other Asia, nes', 'Tonga', 'Bosnia and Herzegovina',
        'Grenada', 'Sri Lanka']
    )

    def test_01_srecne_drzave(self):
        srecne = srecne_drzave(self.teze, self.vrednosti, self.drzave, 0.6)
        self.assertIsInstance(srecne, np.ndarray, ""Funkcija mora vrniti numpy array"")
        np.testing.assert_equal(
            np.array(['Botswana', 'Paraguay', 'Tunisia', 'Benin', 'Uruguay', 'Egypt, Arab Rep.', 'Lebanon', 'Malaysia',
                      'Trinidad and Tobago', 'Argentina', 'Turkey', 'South Africa', 'Mauritania', 'China',
                      'United States', 'Nigeria', 'Burkina Faso', 'Colombia', 'Syrian Arab Republic', 'Senegal',
                      'Macao', 'Barbados', 'Maldives', 'Mali', 'Pakistan', 'Niger', 'St. Kitts and Nevis', 'Kenya',
                      'Hong Kong, China', 'Chile', 'Rwanda', 'Bhutan', 'Morocco', 'Iran, Islamic Rep.', 'Saudi Arabia',
                      'Guatemala', 'Costa Rica', 'Montenegro', 'Algeria', 'Nepal', 'Qatar', 'Oman', 'Uganda', 'Libya',
                      'Zimbabwe', 'Moldova', 'Bolivia', 'Afghanistan', 'Singapore', 'Kazakhstan', 'Thailand',
                      'Kyrgyz Republic', 'Indonesia', 'El Salvador', 'Nicaragua', 'Honduras', 'Burundi', 'Sri Lanka'
                      ]),
            srecne)

        np.testing.assert_equal(
            np.array([
                'Paraguay', 'Tunisia', 'Benin', 'Uruguay', 'Lebanon', 'Malaysia', 'Trinidad and Tobago', 'Argentina',
                'Turkey', 'South Africa', 'Mauritania', 'China', 'United States', 'Nigeria', 'Burkina Faso', 'Colombia',
                'Syrian Arab Republic', 'Barbados', 'Mali', 'Pakistan', 'Niger', 'St. Kitts and Nevis', 'Kenya',
                'Hong Kong, China', 'Chile', 'Rwanda', 'Bhutan', 'Morocco', 'Guatemala', 'Costa Rica', 'Nepal', 'Oman',
                'Uganda', 'Libya', 'Zimbabwe', 'Bolivia', 'Afghanistan', 'Singapore', 'Thailand', 'El Salvador',
                'Nicaragua', 'Honduras', 'Burundi', 'Sri Lanka'
            ]),
            srecne_drzave(self.teze, self.vrednosti, self.drzave, 0.5))

        np.testing.assert_equal(
            np.array(['Benin', 'Burkina Faso', 'Colombia', 'Mali', 'Niger', 'Rwanda', 'Costa Rica', 'Nepal', 'Uganda',
                      'Nicaragua', 'Honduras'
                      ]),
            srecne_drzave(self.teze, self.vrednosti, self.drzave, 0.1))

    def test_02_vec_kot(self):
        self.assertEqual(2, vec_kot(np.array([2, 1, 3]), np.array([""a"", ""b"", ""c""]), ""b""))
        self.assertEqual(1, vec_kot(np.array([2, 1, 3]), np.array([""a"", ""b"", ""c""]), ""a""))
        self.assertEqual(0, vec_kot(np.array([2, 1, 3]), np.array([""a"", ""b"", ""c""]), ""c""))

        self.assertEqual(41, vec_kot(self.teze, self.drzave, ""Slovenia""))
        self.assertEqual(0, vec_kot(self.teze, self.drzave, ""United States""))
        self.assertEqual(5, vec_kot(self.teze, self.drzave, ""China""))


if __name__ == ""__main__"":
    unittest.main()
"
19NPsti9,Python: The Complete Training 2025,f0f077,Python,Wednesday 13th of August 2025 09:12:40 AM CDT,"Python: The Complete Training 2025
From 0 to expert Python: the most comprehensive training with 15 projects (Web, Data, Scripting, Bots), exercises, quizzes...
What you will learn
Learn all Python concepts, from basics to advanced methods, from scratch.
Learn how to create websites and complete projects from A to Z.
Learn the tools used in the professional world
Using databases
Learn to solve problems by building cross-platform applications.
Create your own modules
for more:https://cuty.io/TlYlFEkfBQyW"
DitvF9dg,SendIt // Mettler Toledo BB35 COM-Communication,qdoz,C#,Wednesday 13th of August 2025 08:32:32 AM CDT,"### MT-SICS Kommanods (Level 1) ###
SI = Sofortiges Bruttogewicht
S = stabiles Bruttogewicht
T = Tara ausführen
Z = Nullstellen
I = Identifikation (Gerätename/FW, wenn unterstützt)


// Initialisieren des COM-Port
		this.com1Port = new SerialPort(this.Settings.ScalePortName, 9600, Parity.None, 8, StopBits.One)
			{
				Handshake = Handshake.XOnXOff
			};
			try
			{
				this.com1Port.DataReceived += this.Com1Port_DataReceived;
				this.com1Port.ErrorReceived += this.Com1Port_ErrorReceived;
				this.com1Port.Open();
			}
			catch (Exception ex)
			{
				this.Serilog.Error(ex, ""SetUpComPort"");
			}

// Anfrage an die Waage senden
private void SendWeightRequest()
		{
			try
			{
				using (CancellationTokenSource cancellationTokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(5.0)))
				{
					cancellationTokenSource.Token.Register(delegate
					{
						throw new TimeoutException();
					});
					this.com1Port.WriteLine(""SI"");
				}
			}
			catch (Exception ex)
			{
				this.weightReceivedSignal.Set();
				this.Serilog.Error(ex, ""SendWeightRequest"");
			}
			finally
			{
				if (!this.Settings.WaitForScaleSignal)
				{
					this.weightReceivedSignal.Set();
				}
				else
				{
					MessageBox.Show(""Achtung: Du hast die Einstellung gesetzt, dass es erst weitergeht, wenn die Waage ein Gewicht zurückgibt."");
				}
			}
		}

// Antwort von der Waage erhalten
	private void Com1Port_DataReceived(object sender, SerialDataReceivedEventArgs e)
		{
			try
			{
				string text = this.com1Port.ReadExisting();
				if (text.StartsWith(""S S""))
				{
					string[] array = text.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).Skip(2).ToArray<string>();
					if (array[1].Trim() != ""kg"")
					{
						MessageBox.Show(""ACHTUNG, die Waage ist nicht auf kg eingestellt! Gewicht wird nicht genommen!"");
					}
					else
					{
						double num = double.Parse(array[0], CultureInfo.InvariantCulture);
						this.mebWeight.Text = Math.Round(num, 2).ToString(""n2"", this.germanCulture);
					}
				}
			}
			catch (Exception ex)
			{
				this.Serilog.Error(ex, ""Com1Port_DataReceived"");
			}
			finally
			{
				this.weightReceivedSignal.Set();
			}
		}"
2kqvw6aK,Connection Troubleshooting rev_02,pleasedontcode,Arduino,Wednesday 13th of August 2025 08:31:01 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Connection Troubleshooting
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2025-08-13 13:29:59

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* esp32 with i2c lcd display.swich 1 for start.swich */
	/* 2 for stop,swich 3 for time setting up,swich 4 for */
	/* time setting down.relay 1 out put.delay 1 time is */
	/* 1 to 5 minutes,delay 2 time is 1 to 10 minutes. */
/****** END SYSTEM REQUIREMENTS *****/


/********* User code review feedback **********
#### Feedback 1 ####
- wifi not seen

********* User code review feedback **********/

/* START CODE */
/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <WiFi.h>

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void initializeHardware();
void handleSwitches();
void startOperation();
void stopOperation();
void increaseTime();
void decreaseTime();
void controlRelay();
void initializeWiFi();

#define I2C_ADDRESS 0x27 // Common I2C address for LCD, change if different

// Pin definitions
const int switchStartPin = 12;    // Switch 1 for start
const int switchStopPin = 13;     // Switch 2 for stop
const int switchUpPin = 14;       // Switch 3 for time setting up
const int switchDownPin = 15;     // Switch 4 for time setting down
const int relayPin = 16;          // Relay output pin

// Variables for timing (converted to minutes for easier user control)
unsigned long delay1 = 1 * 60000; // Default 1 minute in milliseconds, min 1 min, max 5 min
unsigned long delay2 = 10 * 60000; // Default 10 minutes in milliseconds, min 1 min, max 10 min

// State variables
bool operationRunning = false;
bool relayActive = false;  // To manage relay state within the loop

// Initialize LCD
LiquidCrystal_I2C lcd(I2C_ADDRESS, 16, 2);

void setup(void)
{
  initializeHardware();
  initializeWiFi();
}

void loop(void)
{
  handleSwitches();

  if (operationRunning)
  {
    controlRelay();
  }
}

void initializeHardware()
{
  // Initialize serial communication for debugging
  Serial.begin(115200);

  // Initialize LCD
  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(""System Ready"");

  // Initialize switch pins
  pinMode(switchStartPin, INPUT_PULLUP);
  pinMode(switchStopPin, INPUT_PULLUP);
  pinMode(switchUpPin, INPUT_PULLUP);
  pinMode(switchDownPin, INPUT_PULLUP);

  // Initialize relay pin
  pinMode(relayPin, OUTPUT);
  digitalWrite(relayPin, LOW);
}

void initializeWiFi()
{
  const char* ssid = ""your_SSID"";       // Replace with your network SSID
  const char* password = ""your_PASSWORD""; // Replace with your network password
  WiFi.begin(ssid, password);
  Serial.print(""Connecting to WiFi"");
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(""."");
  }
  Serial.println(""WiFi connected"");
  Serial.print(""IP address: "");
  Serial.println(WiFi.localIP());
}

void handleSwitches()
{
  // Read switch states (active LOW)
  if (digitalRead(switchStartPin) == LOW)
  {
    startOperation();
    delay(300); // Debounce delay
  }
  if (digitalRead(switchStopPin) == LOW)
  {
    stopOperation();
    delay(300);
  }
  if (digitalRead(switchUpPin) == LOW)
  {
    increaseTime();
    delay(300);
  }
  if (digitalRead(switchDownPin) == LOW)
  {
    decreaseTime();
    delay(300);
  }
}

void startOperation()
{
  if (!operationRunning)
  {
    operationRunning = true;
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(""Operation Start"");
  }
}

void stopOperation()
{
  if (operationRunning)
  {
    operationRunning = false;
    digitalWrite(relayPin, LOW);
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(""Operation Stop"");
  }
}

void increaseTime()
{
  // Increase delay1 and delay2 within limits
  if (delay1 < 5 * 60000) // Max 5 minutes
  {
    delay1 += 60000; // Increase by 1 minute
  }
  if (delay2 < 10 * 60000) // Max 10 minutes
  {
    delay2 += 60000; // Increase by 1 minute
  }
  // Display updated delays
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(""Delay1:"");
  lcd.print(delay1 / 60000);
  lcd.setCursor(0, 1);
  lcd.print(""Delay2:"");
  lcd.print(delay2 / 60000);
  delay(500);
}

void decreaseTime()
{
  // Decrease delay1 and delay2 within limits
  if (delay1 > 60000) // Minimum 1 minute
  {
    delay1 -= 60000; // Decrease by 1 minute
  }
  if (delay2 > 60000) // Minimum 1 minute
  {
    delay2 -= 60000; // Decrease by 1 minute
  }
  // Display updated delays
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(""Delay1:"");
  lcd.print(delay1 / 60000);
  lcd.setCursor(0, 1);
  lcd.print(""Delay2:"");
  lcd.print(delay2 / 60000);
  delay(500);
}

void controlRelay()
{
  static unsigned long lastToggleTime = 0;
  unsigned long currentTime = millis();

  if (!relayActive)
  {
    // Turn relay on
    digitalWrite(relayPin, HIGH);
    relayActive = true;
    lastToggleTime = currentTime;
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(""Relay ON"");
  }
  else
  {
    // Relay is ON, check if delay1 passed to turn off
    if (currentTime - lastToggleTime >= delay1)
    {
      // Turn relay off
      digitalWrite(relayPin, LOW);
      relayActive = false;
      lastToggleTime = currentTime;
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print(""Relay OFF"");
    }
  }

  // This function is called repeatedly in loop(), so it manages timing internally
}
"
TW8NYEAb,Relay Controller rev_01,pleasedontcode,Arduino,Wednesday 13th of August 2025 08:23:27 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Relay Controller
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2025-08-13 13:23:08

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* esp32 with i2c lcd display.swich 1 for start.swich */
	/* 2 for stop,swich 3 for time setting up,swich 4 for */
	/* time setting down.relay 1 out put.delay 1 time is */
	/* 1 to 5 minutes,delay 2 time is 1 to 10 minutes. */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */
/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void initializeHardware();
void handleSwitches();
void startOperation();
void stopOperation();
void increaseTime();
void decreaseTime();
void controlRelay();

#define I2C_ADDRESS 0x27 // Common I2C address for LCD, change if different

// Pin definitions
const int switchStartPin = 12;    // Switch 1 for start
const int switchStopPin = 13;     // Switch 2 for stop
const int switchUpPin = 14;       // Switch 3 for time setting up
const int switchDownPin = 15;     // Switch 4 for time setting down
const int relayPin = 16;          // Relay output pin

// Variables for timing
unsigned long delay1 = 60000; // Default 1 minute in milliseconds
unsigned long delay2 = 600000; // Default 10 minutes in milliseconds

// State variables
bool operationRunning = false;

// Initialize LCD
LiquidCrystal_I2C lcd(I2C_ADDRESS, 16, 2);

void setup(void)
{
  initializeHardware();
}

void loop(void)
{
  handleSwitches();
  // Additional logic can be added here
}

void initializeHardware()
{
  // Initialize serial communication for debugging
  Serial.begin(115200);

  // Initialize LCD
  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(""System Ready"");

  // Initialize switch pins
  pinMode(switchStartPin, INPUT_PULLUP);
  pinMode(switchStopPin, INPUT_PULLUP);
  pinMode(switchUpPin, INPUT_PULLUP);
  pinMode(switchDownPin, INPUT_PULLUP);

  // Initialize relay pin
  pinMode(relayPin, OUTPUT);
  digitalWrite(relayPin, LOW);
}

void handleSwitches()
{
  // Read switch states (active LOW)
  if (digitalRead(switchStartPin) == LOW)
  {
    startOperation();
    delay(300); // Debounce delay
  }
  if (digitalRead(switchStopPin) == LOW)
  {
    stopOperation();
    delay(300);
  }
  if (digitalRead(switchUpPin) == LOW)
  {
    increaseTime();
    delay(300);
  }
  if (digitalRead(switchDownPin) == LOW)
  {
    decreaseTime();
    delay(300);
  }
}

void startOperation()
{
  if (!operationRunning)
  {
    operationRunning = true;
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(""Operation Start"");
    controlRelay();
  }
}

void stopOperation()
{
  if (operationRunning)
  {
    operationRunning = false;
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(""Operation Stop"");
    digitalWrite(relayPin, LOW);
  }
}

void increaseTime()
{
  // Increase delay1 and delay2 within limits
  if (delay1 < 300000) // Max 5 minutes
  {
    delay1 += 60000; // Increase by 1 minute
  }
  if (delay2 < 600000) // Max 10 minutes
  {
    delay2 += 60000; // Increase by 1 minute
  }
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(""Delay1:"");
  lcd.print(delay1 / 60000);
  lcd.setCursor(0, 1);
  lcd.print(""Delay2:"");
  lcd.print(delay2 / 60000);
  delay(500);
}

void decreaseTime()
{
  // Decrease delay1 and delay2 within limits
  if (delay1 > 60000) // Minimum 1 minute
  {
    delay1 -= 60000; // Decrease by 1 minute
  }
  if (delay2 > 60000) // Minimum 1 minute
  {
    delay2 -= 60000; // Decrease by 1 minute
  }
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(""Delay1:"");
  lcd.print(delay1 / 60000);
  lcd.setCursor(0, 1);
  lcd.print(""Delay2:"");
  lcd.print(delay2 / 60000);
  delay(500);
}

void controlRelay()
{
  if (operationRunning)
  {
    // Turn relay on
    digitalWrite(relayPin, HIGH);
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(""Relay ON"");
    delay(delay1);
    // Turn relay off
    digitalWrite(relayPin, LOW);
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(""Relay OFF"");
    delay(delay2);
    // Repeat or stop based on additional logic
  }
}
"
6kE2gfQX,hub,Fokklz,Lua,Wednesday 13th of August 2025 08:16:23 AM CDT,"-- Mekanism Mining Hub Control Script (Enhanced UI)
-- Central control system for managing multiple mining turtles
-- Requires: Advanced Computer + Monitor + Ender Modem

-- Configuration
local CHANNEL = 1337  -- Communication channel for turtle network
local HUB_ID = ""MINING_HUB""
local MONITOR_SIDE = ""left""  -- Side where monitor is attached
local MODEM_SIDE = ""right""   -- Side where ender modem is attached
local DATA_FILE = ""hub_data.json""  -- File to store turtle data
local SAVE_INTERVAL = 30  -- Save data every 30 seconds
local AUTO_NAME_PREFIX = ""MINER""  -- Prefix for auto-generated names
local autoNameCounter = 1  -- Counter for auto-generated names

-- Global variables
local turtles = {}  -- Table to store turtle information
local selectedTurtle = nil  -- Currently selected turtle
local detailsExpanded = false  -- Whether details are currently shown
local scrollOffset = 0  -- For scrolling through logs
local scrollButtonsLine = 0  -- Track where scroll buttons are positioned
local pauseResumeButtonsLine = 0  -- Track where pause/resume buttons are positioned
local lastSave = 0  -- Track last save time
local monitor = nil
local modem = nil
local running = true

-- Colors for UI (using global colors API)
local uiColors = {
    background = colors.black,
    header = colors.blue,
    text = colors.white,
    selected = colors.green,
    offline = colors.red,
    online = colors.lime,
    warning = colors.yellow,
    border = colors.gray,
    accent = colors.cyan
}

-- Turtle data structure with pairing support
function createTurtleEntry(id, label, x, y, z)
    return {
        id = id,
        label = label or (""Turtle_"" .. id),
        x = x or 0,
        y = y or 0, 
        z = z or 0,
        status = ""online"",
        lastSeen = os.clock(),
        logs = {},
        cycle = 0,
        fuel = 0,
        phase = ""unknown"",
        inventory = {},
        customData = {},  -- Store custom data from turtle
        turtleType = ""worker"",  -- ""worker"" or ""companion""
        pairedWith = nil,  -- ID of paired turtle
        needsCompanion = false  -- Whether this turtle needs a companion
    }
end

-- Save turtle data to file
function saveTurtleData()
    local dataToSave = {
        turtles = {},
        timestamp = os.clock(),
        hubId = HUB_ID,
        autoNameCounter = autoNameCounter  -- Save the counter
    }
    
    -- Copy turtle data (excluding logs to keep file size manageable)
    for id, turtle in pairs(turtles) do
        dataToSave.turtles[id] = {
            id = turtle.id,
            label = turtle.label,
            x = turtle.x,
            y = turtle.y,
            z = turtle.z,
            status = ""offline"",  -- Mark as offline until reconnection
            lastSeen = turtle.lastSeen,
            cycle = turtle.cycle,
            fuel = turtle.fuel,
            phase = turtle.phase,
            logs = {}  -- Don't save logs to keep file small
        }
    end
    
    local file = fs.open(DATA_FILE, ""w"")
    if file then
        file.write(textutils.serialise(dataToSave))
        file.close()
        return true
    end
    return false
end

-- Load turtle data from file
function loadTurtleData()
    if not fs.exists(DATA_FILE) then
        print(""No previous turtle data found"")
        return false
    end
    
    local file = fs.open(DATA_FILE, ""r"")
    if not file then
        print(""Failed to open turtle data file"")
        return false
    end
    
    local content = file.readAll()
    file.close()
    
    local data = textutils.unserialise(content)
    if not data or not data.turtles then
        print(""Invalid turtle data file"")
        return false
    end
    
    -- Restore auto name counter
    autoNameCounter = data.autoNameCounter or 1
    
    -- Restore turtle data
    local loadedCount = 0
    for id, turtleData in pairs(data.turtles) do
        turtles[tonumber(id)] = createTurtleEntry(
            turtleData.id,
            turtleData.label,
            turtleData.x,
            turtleData.y,
            turtleData.z
        )
        
        -- Restore additional data
        local turtle = turtles[tonumber(id)]
        turtle.status = ""offline""  -- Start as offline until they reconnect
        turtle.lastSeen = turtleData.lastSeen or 0
        turtle.cycle = turtleData.cycle or 0
        turtle.fuel = turtleData.fuel or 0
        turtle.phase = turtleData.phase or ""unknown""
        
        -- Add a log entry about restoration
        addTurtleLog(tonumber(id), ""Restored from previous session (waiting for reconnection)"")
        
        loadedCount = loadedCount + 1
    end
    
    print(""Loaded "" .. loadedCount .. "" turtles from previous session"")
    print(""Auto-name counter restored to: "" .. autoNameCounter)
    return true
end

-- Broadcast discovery message with new protocol
function broadcastDiscovery()
    if not modem then return end
    
    local discoveryMessage = {
        type = ""hub_discovery"",
        id = tostring(os.clock()),
        from = ""hub"",
        timestamp = os.clock(),
        data = {
            hubId = HUB_ID,
            channel = CHANNEL,
            message = ""Hub restarted - please re-register""
        }
    }
    
    modem.transmit(CHANNEL, CHANNEL, textutils.serialise(discoveryMessage))
    print(""Broadcasted discovery message to all turtles"")
end

-- Periodic save function
function handlePeriodicSave()
    local currentTime = os.clock()
    if currentTime - lastSave >= SAVE_INTERVAL then
        if saveTurtleData() then
            -- Only print save message if we have turtles to save
            if table.getn(turtles) > 0 then
                print(""Auto-saved turtle data ("" .. table.getn(turtles) .. "" turtles)"")
            end
        end
        lastSave = currentTime
    end
end

-- Initialize hardware connections
function initializeHardware()
    print(""Initializing hardware..."")
    
    -- Setup monitor
    if peripheral.isPresent(MONITOR_SIDE) then
        monitor = peripheral.wrap(MONITOR_SIDE)
        if monitor then
            monitor.setTextScale(0.5)  -- Smaller text for more info
            print(""✓ Monitor connected"")
        else
            error(""Failed to wrap monitor"")
        end
    else
        error(""No monitor found on "" .. MONITOR_SIDE .. "" side"")
    end
    
    -- Setup modem
    if peripheral.isPresent(MODEM_SIDE) then
        modem = peripheral.wrap(MODEM_SIDE)
        if modem then
            modem.open(CHANNEL)
            print(""✓ Ender modem connected on channel "" .. CHANNEL)
        else
            error(""Failed to wrap modem"")
        end
    else
        error(""No ender modem found on "" .. MODEM_SIDE .. "" side"")
    end
    
    print(""Hardware initialization complete!"")
end

-- Add log entry to turtle
function addTurtleLog(turtleId, message)
    if turtles[turtleId] then
        local timestamp = os.date(""%H:%M:%S"")
        table.insert(turtles[turtleId].logs, {
            time = timestamp,
            message = message
        })
        
        -- Keep only last 100 log entries
        if #turtles[turtleId].logs > 100 then
            table.remove(turtles[turtleId].logs, 1)
        end
        
        turtles[turtleId].lastSeen = os.clock()
    end
end

-- Handle incoming messages from turtles
function handleTurtleMessage(message, senderId)
    local data = textutils.unserialise(message)
    if not data then return end
    
    if data.type == ""register"" then
        -- New turtle registration
        turtles[senderId] = createTurtleEntry(
            senderId,
            data.label,
            data.x, data.y, data.z
        )
        addTurtleLog(senderId, ""Turtle registered with hub"")
        
        -- Send acknowledgment
        modem.transmit(CHANNEL, CHANNEL, textutils.serialise({
            type = ""register_ack"",
            hubId = HUB_ID,
            timestamp = os.clock()
        }))
        
    elseif data.type == ""status_update"" then
        -- Status update from existing turtle
        if turtles[senderId] then
            turtles[senderId].status = data.status or ""online""
            turtles[senderId].cycle = data.cycle or 0
            turtles[senderId].fuel = data.fuel or 0
            turtles[senderId].phase = data.phase or ""unknown""
            turtles[senderId].x = data.x or turtles[senderId].x
            turtles[senderId].y = data.y or turtles[senderId].y
            turtles[senderId].z = data.z or turtles[senderId].z
            turtles[senderId].lastSeen = os.clock()
        end
        
    elseif data.type == ""log"" then
        -- Log message from turtle
        addTurtleLog(senderId, data.message)
        
    elseif data.type == ""heartbeat"" then
        -- Keep-alive signal
        if turtles[senderId] then
            turtles[senderId].lastSeen = os.clock()
        end
    end
end

-- Check for offline turtles
function checkTurtleStatus()
    local currentTime = os.clock()
    for id, turtle in pairs(turtles) do
        if currentTime - turtle.lastSeen > 30 then  -- 30 seconds timeout
            turtle.status = ""offline""
        end
    end
end

-- Draw header on monitor
function drawHeader()
    monitor.setBackgroundColor(uiColors.header)
    monitor.setTextColor(uiColors.text)
    monitor.setCursorPos(1, 1)
    
    local w, h = monitor.getSize()
    local title = "" MEKANISM MINING HUB CONTROL ""
    local padding = math.floor((w - #title) / 2)
    
    monitor.clearLine()
    monitor.setCursorPos(padding, 1)
    monitor.write(title)
    
    -- Status line
    monitor.setCursorPos(1, 2)
    monitor.clearLine()
    local onlineCount = 0
    local restoredCount = 0
    for _, turtle in pairs(turtles) do
        if turtle.status == ""online"" then
            onlineCount = onlineCount + 1
        else
            restoredCount = restoredCount + 1
        end
    end
    
    local statusText = string.format("" Active: %d/%d"", onlineCount, table.getn(turtles))
    if restoredCount > 0 then
        statusText = statusText .. string.format("" | Waiting: %d"", restoredCount)
    end
    statusText = statusText .. string.format("" | Ch: %d | %s "", CHANNEL, os.date(""%H:%M:%S""))
    monitor.write(statusText)
    
    -- Instructions
    monitor.setCursorPos(1, 3)
    monitor.clearLine()
    monitor.setTextColor(uiColors.accent)
    monitor.write("" Click turtle to expand | [PAUSE]/[RESUME]/[EMERGENCY] buttons | Scroll: [UP]/[DOWN] "")
end

-- Get sorted turtle list
function getSortedTurtles()
    local sortedList = {}
    for id, turtle in pairs(turtles) do
        table.insert(sortedList, {id = id, turtle = turtle})
    end
    
    -- Sort by status (online first) then by ID
    table.sort(sortedList, function(a, b)
        if a.turtle.status ~= b.turtle.status then
            return a.turtle.status == ""online""
        end
        return a.id < b.id
    end)
    
    return sortedList
end

-- Draw turtle list with accordion-style details and pairing info
function drawTurtleList()
    local w, h = monitor.getSize()
    monitor.setBackgroundColor(uiColors.background)
    
    -- Clear turtle list area (start from line 4)
    for y = 4, h do
        monitor.setCursorPos(1, y)
        monitor.clearLine()
    end
    
    local sortedTurtles = getSortedTurtles()
    
    if #sortedTurtles == 0 then
        monitor.setTextColor(uiColors.warning)
        monitor.setCursorPos(2, 6)
        monitor.write(""No turtles registered"")
        monitor.setCursorPos(2, 7)
        monitor.write(""Waiting for connections on channel "" .. CHANNEL .. ""..."")
        return
    end
    
    local line = 4
    
    for i, entry in ipairs(sortedTurtles) do
        local id = entry.id
        local turtle = entry.turtle
        
        if line > h then break end
        
        -- Draw turtle summary line with type and pairing info
        monitor.setCursorPos(1, line)
        monitor.setBackgroundColor(uiColors.background)
        
        -- Status indicator
        local statusColor = turtle.status == ""online"" and uiColors.online or uiColors.offline
        monitor.setTextColor(statusColor)
        monitor.write(""●"")
        
        -- Turtle type indicator
        monitor.setTextColor(uiColors.text)
        local typeIndicator = """"
        if turtle.turtleType == ""worker"" then
            typeIndicator = ""[W]""
        elseif turtle.turtleType == ""companion"" then
            typeIndicator = ""[C]""
        end
        monitor.write(typeIndicator)
        
        -- Pairing indicator
        local pairIndicator = """"
        if turtle.pairedWith then
            pairIndicator = ""↔"" .. turtle.pairedWith
        elseif turtle.turtleType == ""worker"" then
            pairIndicator = ""○""  -- Waiting for companion
        elseif turtle.turtleType == ""companion"" then
            pairIndicator = ""○""  -- Waiting for worker
        end
        
        -- Main turtle info
        local info = string.format("" %s [%d]%s - %s | C:%d F:%d"", 
            turtle.label, id, pairIndicator, turtle.phase, turtle.cycle, turtle.fuel)
        
        -- Highlight selected turtle
        if selectedTurtle == id and detailsExpanded then
            monitor.setBackgroundColor(uiColors.selected)
            monitor.setTextColor(colors.black)
        end
        
        monitor.write(info)
        
        -- Add coordinates if available and space permits
        if turtle.x ~= 0 or turtle.y ~= 0 or turtle.z ~= 0 then
            local coordText = string.format("" (%d,%d,%d)"", turtle.x, turtle.y, turtle.z)
            if #info + #coordText < w - 6 then  -- Account for type and pair indicators
                monitor.write(coordText)
            end
        end
        
        monitor.setBackgroundColor(uiColors.background)
        line = line + 1
        
        -- Draw expanded details if this turtle is selected
        if selectedTurtle == id and detailsExpanded then
            line = drawExpandedDetails(turtle, line, w, h)
        end
    end
end

-- Draw expanded details for selected turtle
function drawExpandedDetails(turtle, startLine, w, h)
    local line = startLine
    
    -- Calculate maximum height for details (70% of total screen)
    local maxDetailHeight = math.floor(h * 0.7)
    local availableHeight = math.min(h - startLine, maxDetailHeight)
    local endLine = startLine + availableHeight - 1
    
    -- Draw border
    monitor.setCursorPos(1, line)
    monitor.setTextColor(uiColors.border)
    monitor.write(string.rep(""-"", w))
    line = line + 1
    
    if line > endLine then return line end
    
    -- Turtle details header
    monitor.setCursorPos(2, line)
    monitor.setTextColor(uiColors.accent)
    monitor.write(""TURTLE DETAILS: "" .. turtle.label .. "" [ID:"" .. turtle.id .. ""]"")
    line = line + 1
    
    if line > endLine then return line end
    
    -- Pause/Resume buttons
    monitor.setCursorPos(2, line)
    monitor.setTextColor(uiColors.text)
    monitor.write(""Controls: "")
    
    -- Determine if turtle is paused based on phase or custom data
    local isPaused = (turtle.phase == ""paused"") or 
                    (turtle.customData and turtle.customData.status == ""paused"")
    
    -- [PAUSE] or [RESUME] button
    if isPaused then
        monitor.setBackgroundColor(uiColors.online)
        monitor.setTextColor(colors.white)
        monitor.write(""[RESUME]"")
    else
        monitor.setBackgroundColor(uiColors.warning)
        monitor.setTextColor(colors.black)
        monitor.write(""[PAUSE]"")
    end
    monitor.setBackgroundColor(uiColors.background)
    
    monitor.setTextColor(uiColors.text)
    monitor.write("" "")
    
    -- [EMERGENCY] button
    monitor.setBackgroundColor(uiColors.offline)
    monitor.setTextColor(colors.white)
    monitor.write(""[EMERGENCY]"")
    monitor.setBackgroundColor(uiColors.background)
    
    -- Store button positions for click detection
    pauseResumeButtonsLine = line
    
    line = line + 1
    
    if line > endLine then return line end
    
    -- Status and timing info
    monitor.setCursorPos(2, line)
    monitor.setTextColor(uiColors.text)
    monitor.write(""Status: "")
    local statusColor = turtle.status == ""online"" and uiColors.online or uiColors.offline
    monitor.setTextColor(statusColor)
    monitor.write(turtle.status)
    monitor.setTextColor(uiColors.text)
    monitor.write("" | Last Seen: "" .. os.date(""%H:%M:%S"", turtle.lastSeen))
    line = line + 1
    
    if line > endLine then return line end
    
    -- Coordinates (enhanced GPS display)
    monitor.setCursorPos(2, line)
    monitor.setTextColor(uiColors.text)
    if turtle.x ~= 0 or turtle.y ~= 0 or turtle.z ~= 0 then
        local distance = math.sqrt(turtle.x * turtle.x + turtle.y * turtle.y + turtle.z * turtle.z)
        monitor.write(string.format(""Position: X:%d Y:%d Z:%d | Distance: %.1f blocks"", 
            turtle.x, turtle.y, turtle.z, distance))
    else
        monitor.write(""Position: GPS data not available"")
    end
    line = line + 1
    
    if line > endLine then return line end
    
    -- Fuel and cycle info
    monitor.setCursorPos(2, line)
    monitor.setTextColor(uiColors.text)
    monitor.write(string.format(""Fuel: %d | Cycle: %d | Phase: %s"", 
        turtle.fuel, turtle.cycle, turtle.phase))
    line = line + 1
    
    if line > endLine then return line end
    
    -- Logs header with scroll buttons
    monitor.setCursorPos(2, line)
    monitor.setTextColor(uiColors.accent)
    monitor.write(""RECENT LOGS:"")
    
    -- Add scroll buttons
    local totalLogs = #turtle.logs
    if totalLogs > 0 then
        monitor.setTextColor(uiColors.text)
        monitor.write("" "")
        
        -- [UP] button
        local upButtonStart = monitor.getCursorPos()
        monitor.setBackgroundColor(uiColors.border)
        monitor.setTextColor(colors.white)
        monitor.write(""[UP]"")
        monitor.setBackgroundColor(uiColors.background)
        
        monitor.setTextColor(uiColors.text)
        monitor.write("" "")
        
        -- [DOWN] button  
        monitor.setBackgroundColor(uiColors.border)
        monitor.setTextColor(colors.white)
        monitor.write(""[DOWN]"")
        monitor.setBackgroundColor(uiColors.background)
        
        -- Store button positions for click detection
        scrollButtonsLine = line
    end
    
    line = line + 1
    
    -- Display logs with scrolling
    local logs = turtle.logs
    local maxLogLines = endLine - line
    
    if totalLogs == 0 then
        if line <= endLine then
            monitor.setCursorPos(4, line)
            monitor.setTextColor(uiColors.warning)
            monitor.write(""No logs available"")
        end
        line = line + 1
    else
        -- Calculate which logs to show based on scroll offset
        local endIndex = totalLogs - scrollOffset
        local startIndex = math.max(1, endIndex - maxLogLines + 1)
        endIndex = math.min(totalLogs, startIndex + maxLogLines - 1)
        
        for i = startIndex, endIndex do
            if line > endLine then break end
            
            local log = logs[i]
            monitor.setCursorPos(4, line)
            monitor.setTextColor(uiColors.warning)
            monitor.write(log.time)
            monitor.setTextColor(uiColors.text)
            
            -- Word wrap long messages
            local maxLogWidth = w - 12  -- Account for timestamp and indent
            local message = log.message
            
            if #message <= maxLogWidth then
                monitor.write("" "" .. message)
            else
                -- First line
                monitor.write("" "" .. string.sub(message, 1, maxLogWidth))
                line = line + 1
                
                -- Additional lines for long messages
                local remaining = string.sub(message, maxLogWidth + 1)
                while #remaining > 0 and line <= endLine do
                    monitor.setCursorPos(12, line)
                    monitor.setTextColor(uiColors.text)
                    local chunk = string.sub(remaining, 1, maxLogWidth)
                    monitor.write(chunk)
                    remaining = string.sub(remaining, maxLogWidth + 1)
                    line = line + 1
                end
                line = line - 1  -- Adjust for the extra increment
            end
            line = line + 1
        end
        
        -- Show scroll indicator if there are more logs
        if totalLogs > maxLogLines and line <= endLine then
            monitor.setCursorPos(2, line)
            monitor.setTextColor(uiColors.border)
            monitor.write(string.format(""Showing logs %d-%d of %d total (offset: %d)"", 
                startIndex, endIndex, totalLogs, scrollOffset))
            line = line + 1
        end
    end
    
    -- Bottom border
    if line <= endLine then
        monitor.setCursorPos(1, line)
        monitor.setTextColor(uiColors.border)
        monitor.write(string.rep(""-"", w))
        line = line + 1
    end
    
    return line
end

-- Handle monitor touches
function handleMonitorTouch(x, y)
    local w, h = monitor.getSize()
    
    -- Ignore header clicks
    if y <= 3 then return end
    
    -- Check for pause/resume/emergency button clicks first
    if selectedTurtle and detailsExpanded and y == pauseResumeButtonsLine then
        local turtle = turtles[selectedTurtle]
        if turtle then
            -- Determine current state
            local isPaused = (turtle.phase == ""paused"") or 
                            (turtle.customData and turtle.customData.status == ""paused"")
            
            -- Check which button was clicked
            if x >= 12 and x <= 19 then -- [PAUSE] or [RESUME] button (around x position 12-19)
                if isPaused then
                    sendCommandToTurtle(selectedTurtle, ""resume_mining"")
                    addTurtleLog(selectedTurtle, ""Resume command sent from hub"")
                else
                    sendCommandToTurtle(selectedTurtle, ""pause_mining"")
                    addTurtleLog(selectedTurtle, ""Pause command sent from hub"")
                end
                return
            elseif x >= 21 and x <= 31 then -- [EMERGENCY] button (around x position 21-31)
                sendCommandToTurtle(selectedTurtle, ""emergency_stop"")
                addTurtleLog(selectedTurtle, ""EMERGENCY STOP sent from hub"")
                return
            end
        end
    end
    
    -- Check for scroll button clicks
    if selectedTurtle and detailsExpanded and y == scrollButtonsLine then
        local turtle = turtles[selectedTurtle]
        if turtle and #turtle.logs > 0 then
            -- Check [UP] button click (around x position 14-17)
            if x >= 14 and x <= 17 then
                scrollOffset = math.max(0, scrollOffset - 1)
                return
            end
            -- Check [DOWN] button click (around x position 19-25) 
            if x >= 19 and x <= 25 then
                local maxOffset = math.max(0, #turtle.logs - 5)  -- Show last 5 logs when fully scrolled
                scrollOffset = math.min(maxOffset, scrollOffset + 1)
                return
            end
        end
    end
    
    local sortedTurtles = getSortedTurtles()
    local line = 4
    
    for i, entry in ipairs(sortedTurtles) do
        local id = entry.id
        local turtle = entry.turtle
        
        -- Check if this line was clicked
        if y == line then
            if selectedTurtle == id and detailsExpanded then
                -- Collapse if already expanded
                selectedTurtle = nil
                detailsExpanded = false
                scrollOffset = 0
                scrollButtonsLine = 0
                pauseResumeButtonsLine = 0
            else
                -- Expand this turtle
                selectedTurtle = id
                detailsExpanded = true
                scrollOffset = 0
                scrollButtonsLine = 0
                pauseResumeButtonsLine = 0
            end
            return
        end
        
        line = line + 1
        
        -- Skip over expanded details if shown
        if selectedTurtle == id and detailsExpanded then
            -- Calculate how many lines the details take (70% of screen max)
            local maxDetailHeight = math.floor(h * 0.7)
            local detailLines = math.min(maxDetailHeight, 15)  -- Roughly 15 lines for details
            line = line + detailLines
        end
        
        if line > h then break end
    end
end

-- Handle keyboard input for scrolling and commands
function handleKeyboard(key)
    if selectedTurtle and detailsExpanded then
        local turtle = turtles[selectedTurtle]
        if turtle then
            if key == keys.up then
                scrollOffset = math.max(0, scrollOffset - 1)
                return true
            elseif key == keys.down then
                local maxOffset = math.max(0, #turtle.logs - 10)  -- Roughly 10 visible logs
                scrollOffset = math.min(maxOffset, scrollOffset + 1)
                return true
            end
        end
    end
    return false
end

-- Send command to turtle
function sendCommandToTurtle(turtleId, command)
    if not turtles[turtleId] then return false end
    
    local message = textutils.serialise({
        type = ""command"",
        command = command,
        timestamp = os.clock(),
        hubId = HUB_ID
    })
    
    modem.transmit(CHANNEL, CHANNEL, message)
    addTurtleLog(turtleId, ""Hub sent command: "" .. command)
    return true
end

-- Main UI update function
function updateDisplay()
    monitor.clear()
    drawHeader()
    drawTurtleList()
end

-- Handle terminal commands
function handleTerminalCommands()
    print(""\nHub Commands:"")
    print(""- 'list' - Show all turtles"")
    print(""- 'select <id>' - Select turtle"")
    print(""- 'cmd <command>' - Send command to selected turtle"")
    print(""- 'stop' - Stop hub"")
    print(""- 'clear' - Clear terminal"")
    print(""- 'expand <id>' - Expand turtle details"")
    print(""- 'collapse' - Collapse details"")
    
    while running do
        write(""Hub> "")
        local input = read()
        local parts = {}
        for word in input:gmatch(""%S+"") do
            table.insert(parts, word)
        end
        
        local command = parts[1]
        
        if command == ""list"" then
            print(""Registered turtles:"")
            for id, turtle in pairs(turtles) do
                print(string.format(""  [%d] %s - %s (C:%d F:%d) %s"", 
                    id, turtle.label, turtle.status, turtle.cycle, turtle.fuel, turtle.phase))
            end
            
        elseif command == ""select"" and parts[2] then
            local id = tonumber(parts[2])
            if turtles[id] then
                selectedTurtle = id
                print(""Selected turtle "" .. id)
            else
                print(""Turtle "" .. id .. "" not found"")
            end
            
        elseif command == ""expand"" and parts[2] then
            local id = tonumber(parts[2])
            if turtles[id] then
                selectedTurtle = id
                detailsExpanded = true
                scrollOffset = 0
                print(""Expanded turtle "" .. id .. "" details"")
            else
                print(""Turtle "" .. id .. "" not found"")
            end
            
        elseif command == ""collapse"" then
            detailsExpanded = false
            selectedTurtle = nil
            scrollOffset = 0
            print(""Collapsed details"")
            
        elseif command == ""cmd"" and parts[2] then
            if selectedTurtle then
                local cmd = table.concat(parts, "" "", 2)
                if sendCommandToTurtle(selectedTurtle, cmd) then
                    print(""Command sent to turtle "" .. selectedTurtle)
                else
                    print(""Failed to send command"")
                end
            else
                print(""No turtle selected"")
            end
            
        elseif command == ""stop"" then
            running = false
            print(""Stopping hub..."")
            break
            
        elseif command == ""clear"" then
            term.clear()
            term.setCursorPos(1, 1)
            
        else
            print(""Unknown command: "" .. input)
        end
    end
end

-- Main event loop
function eventLoop()
    local timer = os.startTimer(1)  -- Update timer
    local saveTimer = os.startTimer(SAVE_INTERVAL)  -- Save timer
    
    while running do
        local event, param1, param2, param3, param4, param5 = os.pullEvent()
        
        if event == ""modem_message"" then
            local side, channel, replyChannel, message, distance = param1, param2, param3, param4, param5
            if channel == CHANNEL then
                handleTurtleMessage(message, replyChannel)
                updateDisplay()
            end
            
        elseif event == ""monitor_touch"" then
            local side, x, y = param1, param2, param3
            if side == MONITOR_SIDE then
                handleMonitorTouch(x, y)
                updateDisplay()
            end
            
        elseif event == ""timer"" then
            if param1 == timer then
                checkTurtleStatus()
                updateDisplay()
                timer = os.startTimer(5)  -- Check every 5 seconds
            elseif param1 == saveTimer then
                handlePeriodicSave()
                saveTimer = os.startTimer(SAVE_INTERVAL)
            end
            
        elseif event == ""terminate"" then
            running = false
        end
    end
end

-- Main function
function main()
    print(""=== MEKANISM MINING HUB CONTROL (Enhanced) ==="")
    print(""Initializing..."")
    
    -- Initialize hardware
    initializeHardware()
    
    -- Load previous turtle data
    print(""Loading previous session data..."")
    loadTurtleData()
    
    -- Initial display
    updateDisplay()
    
    -- Broadcast discovery message to tell turtles to reconnect
    print(""Broadcasting discovery message..."")
    sleep(1)  -- Small delay to ensure modem is ready
    broadcastDiscovery()
    
    print(""Hub is running!"")
    print(""- Click turtles to expand/collapse details"")
    print(""- Use [PAUSE]/[RESUME]/[EMERGENCY] buttons for control"")
    print(""- Use [UP]/[DOWN] buttons to scroll logs"") 
    print(""- Details limited to 70% of screen height"")
    print(""- Auto-naming: Turtles get MINER names automatically"")
    print(""- Remote installation: Use 'install <id>' or 'install_all'"")
    print(""- Use terminal for advanced commands"")
    print(""- Auto-saves every "" .. SAVE_INTERVAL .. "" seconds"")
    print(""Turtles can register on channel "" .. CHANNEL)
    
    if table.getn(turtles) > 0 then
        print(""Waiting for "" .. table.getn(turtles) .. "" turtles to reconnect..."")
    end
    
    -- Start terminal and event loops in parallel
    parallel.waitForAny(eventLoop, handleTerminalCommands)
    
    -- Cleanup and save on shutdown
    print(""Shutting down hub..."")
    if saveTurtleData() then
        print(""Turtle data saved successfully"")
    else
        print(""Warning: Failed to save turtle data"")
    end
    
    if modem then
        modem.close(CHANNEL)
    end
    if monitor then
        monitor.clear()
        monitor.setCursorPos(1, 1)
        monitor.setTextColor(colors.white)
        monitor.setBackgroundColor(colors.black)
        monitor.write(""Mining Hub Offline"")
    end
    
    print(""Hub shutdown complete."")
end

-- Utility function to get table length (Lua 5.1 compatibility)
function table.getn(t)
    local count = 0
    for _ in pairs(t) do count = count + 1 end
    return count
end

-- Run the hub
main()"
Ykv5zMfg,esp,atoz0to9aand_,Lua,Wednesday 13th of August 2025 08:14:52 AM CDT,"--[[
    Player Highlighter and Nametag Script

    This script should be placed in a LocalScript, for example, inside StarterPlayer.StarterPlayerScripts.

    What it does:
    1.  Continuously scans for all players in the game.
    2.  For each player's character, it creates a red highlight box that is visible through walls.
    3.  It also creates a white nametag above each player's head, showing their username.
]]

-- Services
local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")

-- This function creates and manages the highlight and nametag for a character
local function setupCharacter(character)
    if not character or not character.Parent then
        return
    end

    -- Wait for the Humanoid and Head to exist
    local humanoid = character:WaitForChild(""Humanoid"", 5)
    local head = character:WaitForChild(""Head"", 5)
    local humanoidRootPart = character:WaitForChild(""HumanoidRootPart"", 5)

    if not humanoid or not head or not humanoidRootPart then
        print(""Could not find required parts for character: "" .. character.Name)
        return
    end

    -- Prevent creating duplicates
    if head:FindFirstChild(""PlayerNametagGui"") then
        return
    end

    -- 1. Create the Highlight Box
    local highlight = Instance.new(""BoxHandleAdornment"")
    highlight.Name = ""PlayerHighlight""
    highlight.Adornee = humanoidRootPart
    highlight.AlwaysOnTop = true -- Makes it visible through walls
    highlight.ZIndex = 5
    highlight.Size = humanoidRootPart.Size + Vector3.new(1, 1, 0.5) -- Make it slightly larger than the character's torso
    highlight.Color3 = Color3.fromRGB(255, 0, 0) -- Red color
    highlight.Transparency = 0.5 -- Make it semi-transparent
    highlight.Parent = head -- Parent to head to ensure it gets cleaned up on death

    -- 2. Create the Nametag GUI
    local nametagGui = Instance.new(""BillboardGui"")
    nametagGui.Name = ""PlayerNametagGui""
    nametagGui.Adornee = head
    nametagGui.Size = UDim2.new(0, 200, 0, 50) -- Size of the GUI in pixels
    nametagGui.StudsOffset = Vector3.new(0, 2.5, 0) -- Position it above the head
    nametagGui.AlwaysOnTop = true -- Make it visible through walls
    nametagGui.Parent = head

    -- 3. Create the Text Label for the username
    local textLabel = Instance.new(""TextLabel"")
    textLabel.Name = ""UsernameLabel""
    textLabel.Parent = nametagGui
    textLabel.BackgroundTransparency = 1 -- No background
    textLabel.Size = UDim2.new(1, 0, 1, 0) -- Fill the entire GUI
    textLabel.Font = Enum.Font.SourceSansBold
    textLabel.TextSize = 24
    textLabel.TextColor3 = Color3.fromRGB(255, 255, 255) -- White color
    textLabel.TextStrokeTransparency = 0 -- Black outline for readability
    textLabel.Text = character.Name

    -- Clean up when the character is destroyed or the humanoid dies
    humanoid.Died:Connect(function()
        highlight:Destroy()
        nametagGui:Destroy()
    end)
end

-- This function runs on every frame to check for new players
local function onRenderStep()
    for _, player in ipairs(Players:GetPlayers()) do
        -- Check if the character exists and has a head
        if player.Character and player.Character:FindFirstChild(""Head"") then
            -- Check if the nametag has already been created
            if not player.Character.Head:FindFirstChild(""PlayerNametagGui"") then
                -- Use a coroutine to avoid any potential lag
                coroutine.wrap(setupCharacter)(player.Character)
            end
        end
    end
end

-- Connect the function to the game's render step
RunService.RenderStepped:Connect(onRenderStep)

-- Also handle players being added
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        -- A small delay to ensure all parts are loaded
        task.wait(1)
        coroutine.wrap(setupCharacter)(character)
    end)
end)
"
wU7C4Uw9,Display Controller rev_03,pleasedontcode,Arduino,Wednesday 13th of August 2025 08:09:42 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Display Controller
	- Source Code NOT compiled for: ESP8266 NodeMCU V1.0
	- Source Code created on: 2025-08-13 13:08:12

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* esp32 with i2c display, swich 1 for start */
	/* button,swich 2 for stop button,swich 3 for delay */
	/* time setting up,swich 4 for delay time setting */
	/* down.relay 1 output. */
/****** END SYSTEM REQUIREMENTS *****/


/********* User code review feedback **********
#### Feedback 1 ####
- no need oled,use lcd 16 charector type

********* User code review feedback **********/

/* START CODE */
/****** DEFINITION OF LIBRARIES *****/
// Include Wire library for I2C communication
#include <Wire.h>
// Include a library for the I2C display (assuming SSD1306 or similar, adjust if needed)
#include <Adafruit_SSD1306.h>

// Include LCD header
#include ""Project_3299.h""

// Define display parameters
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET -1   // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

/****** SYSTEM REQUIREMENTS *****/
// System Requirement 1: ""esp32 with i2c display, switch 1 for start button, switch 2 for stop button,
// switch 3 for delay time setting, switch 4 for delay time setting down relay 1 output.""
/****** END SYSTEM REQUIREMENTS *****/

// Define pin assignments
const int buttonStartPin = D1;   // Switch 1 for start
const int buttonStopPin = D2;    // Switch 2 for stop
const int buttonDelayPin = D3;   // Switch 3 for delay time setting
const int switchDelayPin = D4;   // Switch 4 for delay time decrease
const int relayPin = D5;         // Relay output

// Variables for button states
bool isRunning = false;
unsigned long delayTime = 1000; // Default delay time in milliseconds
unsigned long previousMillis = 0;

// Variables to handle button debouncing
unsigned long lastDebounceTimeStart = 0;
unsigned long lastDebounceTimeStop = 0;
unsigned long lastDebounceTimeDelay = 0;
unsigned long lastDebounceTimeDelayDown = 0;
const unsigned long debounceDelay = 50; // milliseconds

// Variables for buttons state
int lastStartButtonState = HIGH;
int lastStopButtonState = HIGH;
int lastDelayButtonState = HIGH;
int lastDelayDownButtonState = HIGH;

void setup() {
  // Initialize serial communication for debugging
  Serial.begin(115200);

  // Initialize display
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x64
    Serial.println(F(""SSD1306 allocation failed""));
    for(;;); // Don't proceed, loop forever
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0,0);
  display.println(""System Initializing"");
  display.display();

  // Initialize pins
  pinMode(buttonStartPin, INPUT_PULLUP);
  pinMode(buttonStopPin, INPUT_PULLUP);
  pinMode(buttonDelayPin, INPUT_PULLUP);
  pinMode(switchDelayPin, INPUT_PULLUP);
  pinMode(relayPin, OUTPUT);

  // Initialize relay state to off
  digitalWrite(relayPin, LOW);

  // Initialize LCD
  initLCD();
}

void loop() {
  unsigned long currentMillis = millis();

  // Read buttons with debounce
  handleButtonStart(currentMillis);
  handleButtonStop(currentMillis);
  handleDelayAdjustment(currentMillis);

  // If start button pressed, start operation
  if (isRunning) {
    // Turn relay on
    digitalWrite(relayPin, HIGH);

    // Perform delay with non-blocking approach
    if (currentMillis - previousMillis >= delayTime) {
      previousMillis = currentMillis;
      // Toggle relay or perform other actions if needed
      // For continuous on/off, implement toggle here
    }
  } else {
    // Turn relay off
    digitalWrite(relayPin, LOW);
  }

  // Update LCD periodically
  static unsigned long lastDisplayUpdate = 0;
  if (currentMillis - lastDisplayUpdate > 500) { // update every 500ms
    lastDisplayUpdate = currentMillis;
    updateLCD();
  }
}

// Handle start button
void handleButtonStart(unsigned long currentMillis) {
  int reading = digitalRead(buttonStartPin);
  if (reading != lastStartButtonState) {
    lastDebounceTimeStart = currentMillis;
  }
  if ((currentMillis - lastDebounceTimeStart) > debounceDelay) {
    if (reading == LOW && lastStartButtonState == HIGH) {
      // Button pressed
      isRunning = true;
    }
  }
  lastStartButtonState = reading;
}

// Handle stop button
void handleButtonStop(unsigned long currentMillis) {
  int reading = digitalRead(buttonStopPin);
  if (reading != lastStopButtonState) {
    lastDebounceTimeStop = currentMillis;
  }
  if ((currentMillis - lastDebounceTimeStop) > debounceDelay) {
    if (reading == LOW && lastStopButtonState == HIGH) {
      // Button pressed
      isRunning = false;
    }
  }
  lastStopButtonState = reading;
}

// Handle delay adjustment
void handleDelayAdjustment(unsigned long currentMillis) {
  int delayButtonState = digitalRead(buttonDelayPin);
  int delayDownState = digitalRead(switchDelayPin);

  // Increase delay time
  if (delayButtonState != lastDelayButtonState) {
    lastDebounceTimeDelay = currentMillis;
  }
  if ((currentMillis - lastDebounceTimeDelay) > debounceDelay) {
    if (delayButtonState == LOW && lastDelayButtonState == HIGH) {
      delayTime += 100; // increase delay by 100ms
    }
  }
  lastDelayButtonState = delayButtonState;

  // Decrease delay time
  if (delayDownState != lastDelayDownButtonState) {
    lastDebounceTimeDelayDown = currentMillis;
  }
  if ((currentMillis - lastDebounceTimeDelayDown) > debounceDelay) {
    if (switchDelayPin == LOW && lastDelayDownButtonState == HIGH) {
      if (delayTime > 100) {
        delayTime -= 100; // decrease delay by 100ms
      }
    }
  }
  lastDelayDownButtonState = delayDownState;
}

// Update LCD display
void updateLCD() {
  // Clear display
  display.clearDisplay();
  display.setCursor(0, 0);
  display.print(""Start:"");
  display.println(isRunning ? ""Yes"" : ""No "");
  display.print(""Delay:"");
  display.print(delayTime);
  display.println(""ms"");
  display.display();
}
"
BCpzbs8z,worker_installer,Fokklz,Lua,Wednesday 13th of August 2025 08:06:49 AM CDT,"-- Enhanced Mining Network Installer v2.0
-- Supports Worker and Companion turtle types with persistent configuration

-- Get command line arguments first
local args = {...}

print(""=== Enhanced Mining Network Installer v2.0 ==="")
print(""Turtle ID: "" .. os.getComputerID())

-- Configuration
local CONFIG_FILE = ""turtle_config.json""
local PASTEBIN_CODES = {
    hubcomms = ""Brt6WWFe"",      -- hubcomms module
    worker = ""ZnQFFQs4"",        -- worker script  
    companion = ""fPxad31x""  -- companion script
}

-- Turtle types
local TURTLE_TYPES = {
    WORKER = ""worker"",
    COMPANION = ""companion""
}

-- Current configuration
local config = {
    turtleType = nil,
    version = ""2.0"",
    lastUpdate = nil,
    installDate = nil
}

-- Utility functions
local function saveConfig()
    local file = fs.open(CONFIG_FILE, ""w"")
    if file then
        file.write(textutils.serialise(config))
        file.close()
        return true
    end
    return false
end

local function loadConfig()
    if not fs.exists(CONFIG_FILE) then
        return false
    end
    
    local file = fs.open(CONFIG_FILE, ""r"")
    if not file then
        return false
    end
    
    local content = file.readAll()
    file.close()
    
    local savedConfig = textutils.unserialise(content)
    if savedConfig then
        config = savedConfig
        return true
    end
    return false
end

local function promptTurtleType()
    print(""\n=== Turtle Type Selection ==="")
    print(""What type of turtle should this be?"")
    print("""")
    print(""1. WORKER - Main mining turtle"")
    print(""   - Performs actual mining operations"")
    print(""   - Manages Mekanism Digital Miner setup"")
    print(""   - Can work alone or with a companion"")
    print("""")
    print(""2. COMPANION - Chunk loading support"")
    print(""   - Follows a worker turtle"")
    print(""   - Provides chunk loading services"")
    print(""   - Requires pairing with a worker"")
    print("""")
    
    while true do
        write(""Enter choice (1 for Worker, 2 for Companion): "")
        local choice = read()
        
        if choice == ""1"" then
            return TURTLE_TYPES.WORKER
        elseif choice == ""2"" then
            return TURTLE_TYPES.COMPANION
        else
            print(""Invalid choice. Please enter 1 or 2."")
        end
    end
end

local function confirmTurtleType(turtleType)
    print(""\n=== Configuration Confirmation ==="")
    print(""Turtle Type: "" .. string.upper(turtleType))
    
    if turtleType == TURTLE_TYPES.WORKER then
        print(""This turtle will:"")
        print(""- Download worker scripts and hubcomms module"")
        print(""- Be configured for mining operations"")
        print(""- Connect to hub on channel 1337"")
        print(""- Can work independently or with a companion"")
    else
        print(""This turtle will:"")
        print(""- Download companion scripts and hubcomms module"")
        print(""- Be configured for chunk loading support"")
        print(""- Need to be paired with a worker turtle"")
        print(""- Follow the worker to provide chunk loading"")
    end
    
    print("""")
    write(""Confirm this configuration? (y/n): "")
    local response = read()
    
    return string.lower(response) == ""y"" or string.lower(response) == ""yes""
end

local function downloadScript(pastebinCode, filename)
    print(""  Downloading "" .. filename .. ""..."")
    
    local success = shell.run(""pastebin"", ""get"", pastebinCode, filename)
    
    if success then
        if fs.exists(filename) then
            print(""  ✓ "" .. filename .. "" downloaded successfully"")
            return true
        else
            print(""  ✗ "" .. filename .. "" download failed - file not created"")
            return false
        end
    else
        print(""  ✗ "" .. filename .. "" download failed - pastebin error"")
        return false
    end
end

local function cleanupOldFiles()
    local filesToDelete = {
        ""startup.lua"",
        ""worker.lua"", 
        ""companion.lua"",
        ""hubcomms.lua"",
        ""hubcomms_temp.lua""
    }
    
    local dirsToDelete = {
        ""modules""
    }
    
    print(""Cleaning up old files..."")
    local deletedCount = 0
    
    for _, filename in ipairs(filesToDelete) do
        if fs.exists(filename) then
            fs.delete(filename)
            print(""  Deleted "" .. filename)
            deletedCount = deletedCount + 1
        end
    end
    
    for _, dirname in ipairs(dirsToDelete) do
        if fs.exists(dirname) and fs.isDir(dirname) then
            fs.delete(dirname)
            print(""  Deleted directory "" .. dirname)
            deletedCount = deletedCount + 1
        end
    end
    
    if deletedCount == 0 then
        print(""  No old files to clean up"")
    else
        print(""  Cleaned up "" .. deletedCount .. "" old files/directories"")
    end
end

local function installHubcommsModule()
    print(""  Installing hubcomms module..."")
    
    -- Download to temporary location first
    if not downloadScript(PASTEBIN_CODES.hubcomms, ""hubcomms_temp.lua"") then
        return false
    end
    
    -- Copy to both locations for compatibility
    if fs.exists(""hubcomms_temp.lua"") then
        -- Copy to main location
        fs.copy(""hubcomms_temp.lua"", ""hubcomms.lua"")
        
        -- Also create the module structure for require() to work
        if not fs.exists(""modules"") then
            fs.makeDir(""modules"")
        end
        fs.copy(""hubcomms_temp.lua"", ""modules/hubcomms.lua"")
        
        -- Clean up temp file
        fs.delete(""hubcomms_temp.lua"")
        
        print(""  ✓ hubcomms.lua installed"")
        return true
    end
    
    return false
end

local function installWorkerTurtle()
    print(""\n=== Installing Worker Turtle ==="")
    
    -- Install hubcomms module
    if not installHubcommsModule() then
        return false
    end
    
    -- Download worker script as startup
    if not downloadScript(PASTEBIN_CODES.worker, ""startup.lua"") then
        return false
    end
    
    print(""\nWorker installation completed!"")
    print(""Files installed:"")
    print(""  - hubcomms.lua (communication module)"")
    print(""  - modules/hubcomms.lua (for require compatibility)"")
    print(""  - startup.lua (worker script)"")
    
    return true
end

local function installCompanionTurtle()
    print(""\n=== Installing Companion Turtle ==="")
    
    -- Install hubcomms module
    if not installHubcommsModule() then
        return false
    end
    
    -- Download companion script as startup
    if not downloadScript(PASTEBIN_CODES.companion, ""startup.lua"") then
        return false
    end
    
    print(""\nCompanion installation completed!"")
    print(""Files installed:"")
    print(""  - hubcomms.lua (communication module)"")
    print(""  - modules/hubcomms.lua (for require compatibility)"")
    print(""  - startup.lua (companion script)"")
    
    return true
end

local function testHubcommsModule()
    print(""\nTesting hubcomms module..."")
    
    -- Check if files exist
    if not fs.exists(""hubcomms.lua"") then
        print(""  ✗ hubcomms.lua file not found"")
        return false
    end
    
    if not fs.exists(""modules/hubcomms.lua"") then
        print(""  ✗ modules/hubcomms.lua file not found"")
        return false
    end
    
    -- Try loading with dofile to test syntax
    local success, result = pcall(dofile, ""hubcomms.lua"")
    
    if success and type(result) == ""table"" then
        print(""  ✓ hubcomms module loads correctly"")
        
        -- Test require path as well
        local reqSuccess, reqResult = pcall(function()
            return require(""modules.hubcomms"")
        end)
        
        if reqSuccess and type(reqResult) == ""table"" then
            print(""  ✓ hubcomms module require() works"")
            return true
        else
            print(""  ⚠ hubcomms loads but require() has issues"")
            return true  -- Still consider it a success since dofile works
        end
    else
        print(""  ✗ hubcomms module failed to load"")
        if result then
            print(""  Error: "" .. tostring(result))
        end
        return false
    end
end

local function performInstallation(isUpdate)
    local installType = isUpdate and ""Update"" or ""Installation""
    
    print(""\n=== "" .. installType .. "" Process ==="")
    
    -- Clean up old files
    cleanupOldFiles()
    
    -- Install based on turtle type
    local success = false
    
    if config.turtleType == TURTLE_TYPES.WORKER then
        success = installWorkerTurtle()
    elseif config.turtleType == TURTLE_TYPES.COMPANION then
        success = installCompanionTurtle()
    else
        print(""ERROR: Unknown turtle type: "" .. tostring(config.turtleType))
        return false
    end
    
    if not success then
        print(""\n"" .. installType .. "" FAILED!"")
        return false
    end
    
    -- Test the installation
    if not testHubcommsModule() then
        print(""\n"" .. installType .. "" verification failed!"")
        return false
    end
    
    -- Update configuration
    config.lastUpdate = os.clock()
    if not isUpdate then
        config.installDate = os.clock()
    end
    
    if not saveConfig() then
        print(""Warning: Failed to save configuration"")
    end
    
    print(""\n"" .. installType .. "" completed successfully!"")
    return true
end

local function showInstallationSummary(isUpdate)
    print(""\n=== Installation Summary ==="")
    print(""Turtle ID: "" .. os.getComputerID())
    print(""Turtle Type: "" .. string.upper(config.turtleType))
    print(""Version: "" .. config.version)
    
    if isUpdate then
        print(""Action: Updated existing installation"")
    else
        print(""Action: Fresh installation"")
        print(""Install Date: "" .. os.date(""%Y-%m-%d %H:%M:%S"", config.installDate))
    end
    
    print(""Last Update: "" .. os.date(""%Y-%m-%d %H:%M:%S"", config.lastUpdate))
    print("""")
    
    if config.turtleType == TURTLE_TYPES.WORKER then
        print(""Worker Turtle Configuration:"")
        print(""- Will connect to hub on channel 1337"")
        print(""- Ready for mining operations"")
        print(""- Can work with or without a companion"")
        print(""- Use 'startup test' to run communication tests"")
    else
        print(""Companion Turtle Configuration:"")
        print(""- Will connect to hub on channel 1337"")
        print(""- Needs to be paired with a worker turtle"")
        print(""- Provides chunk loading support"")
        print(""- Use 'startup test' to run communication tests"")
    end
    
    print("""")
    print(""The turtle will auto-start on reboot."")
    print(""Configuration saved to: "" .. CONFIG_FILE)
end

local function handleRemoteInstall()
    if args[1] == ""remote"" then
        print(""Remote installation detected"")
        
        -- Load existing config if available
        local hasConfig = loadConfig()
        
        if hasConfig and config.turtleType then
            print(""Existing configuration found: "" .. string.upper(config.turtleType))
            print(""Performing remote update..."")
            
            if performInstallation(true) then
                showInstallationSummary(true)
                print(""\nRemote update complete - rebooting in 3 seconds..."")
                sleep(3)
                os.reboot()
            else
                print(""Remote update failed!"")
                return false
            end
        else
            print(""No existing configuration found."")
            print(""Remote installation requires existing configuration."")
            print(""Please run installer manually first."")
            return false
        end
    end
    return true
end

local function main()
    -- Check if we're on a turtle
    if not turtle then
        print(""ERROR: This installer must be run on a turtle"")
        return
    end
    
    -- Handle remote installation first
    if not handleRemoteInstall() then
        return
    end
    
    -- Load existing configuration
    local hasExistingConfig = loadConfig()
    local isUpdate = hasExistingConfig and config.turtleType ~= nil
    
    print(""\nTurtle Status: "" .. (isUpdate and ""CONFIGURED"" or ""NEW""))
    
    if isUpdate then
        print(""Current Type: "" .. string.upper(config.turtleType))
        print(""Last Update: "" .. (config.lastUpdate and os.date(""%Y-%m-%d %H:%M:%S"", config.lastUpdate) or ""Unknown""))
        print(""\nThis will update your existing installation."")
        
        write(""\nProceed with update? (y/n): "")
        local response = read()
        
        if not (string.lower(response) == ""y"" or string.lower(response) == ""yes"") then
            print(""Update cancelled."")
            return
        end
    else
        -- First time setup - ask for turtle type
        config.turtleType = promptTurtleType()
        
        if not confirmTurtleType(config.turtleType) then
            print(""Installation cancelled."")
            return
        end
        
        print(""\nConfiguration saved. Starting installation..."")
        saveConfig()
    end
    
    -- Perform the installation
    if performInstallation(isUpdate) then
        showInstallationSummary(isUpdate)
        
        -- Ask about reboot
        print(""\nWould you like to reboot now to start the turtle? (y/n): "")
        local rebootChoice = read()
        
        if string.lower(rebootChoice) == ""y"" or string.lower(rebootChoice) == ""yes"" then
            print(""Rebooting in 3 seconds..."")
            sleep(3)
            os.reboot()
        else
            print(""Installation complete. Run 'reboot' when ready to start."")
        end
    else
        print(""Installation failed! Please check the errors above."")
    end
end

-- Additional utility function for manual type changes
local function changeType()
    print(""=== Change Turtle Type ==="")
    
    if loadConfig() and config.turtleType then
        print(""Current type: "" .. string.upper(config.turtleType))
    else
        print(""No current configuration found."")
    end
    
    local newType = promptTurtleType()
    
    if confirmTurtleType(newType) then
        config.turtleType = newType
        saveConfig()
        
        print(""Type changed to: "" .. string.upper(newType))
        print(""Run the installer again to download the appropriate scripts."")
    else
        print(""Type change cancelled."")
    end
end

-- Handle command line arguments
local command = args[1]

if command == ""change-type"" then
    changeType()
elseif command == ""show-config"" then
    if loadConfig() then
        print(""Current Configuration:"")
        print(""  Type: "" .. (config.turtleType and string.upper(config.turtleType) or ""Not set""))
        print(""  Version: "" .. (config.version or ""Unknown""))
        print(""  Install Date: "" .. (config.installDate and os.date(""%Y-%m-%d %H:%M:%S"", config.installDate) or ""Unknown""))
        print(""  Last Update: "" .. (config.lastUpdate and os.date(""%Y-%m-%d %H:%M:%S"", config.lastUpdate) or ""Unknown""))
    else
        print(""No configuration found."")
    end
elseif command == ""help"" then
    print(""Enhanced Mining Network Installer v2.0"")
    print(""Usage:"")
    print(""  installer           - Run normal installation/update"")
    print(""  installer remote    - Remote installation (for hub control)"")
    print(""  installer change-type - Change turtle type"")
    print(""  installer show-config - Show current configuration"")
    print(""  installer help      - Show this help"")
else
    main()
end"
YvQkP1tg,Relay Controller rev_02,pleasedontcode,Arduino,Wednesday 13th of August 2025 08:06:44 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Relay Controller
	- Source Code NOT compiled for: ESP8266 NodeMCU V1.0
	- Source Code created on: 2025-08-13 13:05:56

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* esp32 with i2c display, swich 1 for start */
	/* button,swich 2 for stop button,swich 3 for delay */
	/* time setting up,swich 4 for delay time setting */
	/* down.relay 1 output. */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */
/****** DEFINITION OF LIBRARIES *****/
// Include Wire library for I2C communication
#include <Wire.h>
// Include a library for the I2C display (assuming SSD1306 or similar, adjust if needed)
#include <Adafruit_SSD1306.h>

// Define display parameters
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET -1   // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Define pin assignments
const int buttonStartPin = D1;   // Switch 1 for start
const int buttonStopPin = D2;    // Switch 2 for stop
const int buttonDelayPin = D3;   // Switch 3 for delay time setting
const int switchDelayPin = D4;   // Switch 4 for delay time decrease
const int relayPin = D5;         // Relay output

// Variables for button states
bool isRunning = false;
unsigned long delayTime = 1000; // Default delay time in milliseconds
unsigned long previousMillis = 0;

// Variables to handle button debouncing
unsigned long lastDebounceTimeStart = 0;
unsigned long lastDebounceTimeStop = 0;
unsigned long lastDebounceTimeDelay = 0;
unsigned long lastDebounceTimeDelayDown = 0;
const unsigned long debounceDelay = 50; // milliseconds

// Variables for buttons state
int lastStartButtonState = HIGH;
int lastStopButtonState = HIGH;
int lastDelayButtonState = HIGH;
int lastDelayDownButtonState = HIGH;

void setup() {
  // Initialize serial communication for debugging
  Serial.begin(115200);

  // Initialize display
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x64
    Serial.println(F(""SSD1306 allocation failed""));
    for(;;); // Don't proceed, loop forever
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0,0);
  display.println(""System Initializing"");
  display.display();

  // Initialize pins
  pinMode(buttonStartPin, INPUT_PULLUP);
  pinMode(buttonStopPin, INPUT_PULLUP);
  pinMode(buttonDelayPin, INPUT_PULLUP);
  pinMode(switchDelayPin, INPUT_PULLUP);
  pinMode(relayPin, OUTPUT);

  // Initialize relay state to off
  digitalWrite(relayPin, LOW);

  // Show initial message
  display.clearDisplay();
  display.setCursor(0,0);
  display.println(""Ready"");
  display.display();
}

void loop() {
  unsigned long currentMillis = millis();

  // Read buttons with debounce
  handleButtonStart(currentMillis);
  handleButtonStop(currentMillis);
  handleDelayAdjustment(currentMillis);

  // If start button pressed, start operation
  if (isRunning) {
    // Turn relay on
    digitalWrite(relayPin, HIGH);

    // Perform delay with non-blocking approach
    if (currentMillis - previousMillis >= delayTime) {
      previousMillis = currentMillis;
      // Toggle relay or perform other actions if needed
      // For continuous on/off, implement toggle here
    }
  } else {
    // Turn relay off
    digitalWrite(relayPin, LOW);
  }

  // Update display periodically
  static unsigned long lastDisplayUpdate = 0;
  if (currentMillis - lastDisplayUpdate > 500) { // update every 500ms
    lastDisplayUpdate = currentMillis;
    updateDisplay();
  }
}

// Handle start button
void handleButtonStart(unsigned long currentMillis) {
  int reading = digitalRead(buttonStartPin);
  if (reading != lastStartButtonState) {
    lastDebounceTimeStart = currentMillis;
  }
  if ((currentMillis - lastDebounceTimeStart) > debounceDelay) {
    if (reading == LOW && lastStartButtonState == HIGH) {
      // Button pressed
      isRunning = true;
    }
  }
  lastStartButtonState = reading;
}

// Handle stop button
void handleButtonStop(unsigned long currentMillis) {
  int reading = digitalRead(buttonStopPin);
  if (reading != lastStopButtonState) {
    lastDebounceTimeStop = currentMillis;
  }
  if ((currentMillis - lastDebounceTimeStop) > debounceDelay) {
    if (reading == LOW && lastStopButtonState == HIGH) {
      // Button pressed
      isRunning = false;
    }
  }
  lastStopButtonState = reading;
}

// Handle delay adjustment
void handleDelayAdjustment(unsigned long currentMillis) {
  int delayButtonState = digitalRead(buttonDelayPin);
  int delayDownState = digitalRead(switchDelayPin);

  // Increase delay time
  if (delayButtonState != lastDelayButtonState) {
    lastDebounceTimeDelay = currentMillis;
  }
  if ((currentMillis - lastDebounceTimeDelay) > debounceDelay) {
    if (delayButtonState == LOW && lastDelayButtonState == HIGH) {
      delayTime += 100; // increase delay by 100ms
    }
  }
  lastDelayButtonState = delayButtonState;

  // Decrease delay time
  if (delayDownState != lastDelayDownButtonState) {
    lastDebounceTimeDelayDown = currentMillis;
  }
  if ((currentMillis - lastDebounceTimeDelayDown) > debounceDelay) {
    if (switchDelayPin == LOW && lastDelayDownButtonState == HIGH) {
      if (delayTime > 100) {
        delayTime -= 100; // decrease delay by 100ms
      }
    }
  }
  lastDelayDownButtonState = delayDownState;
}

// Update OLED display
void updateDisplay() {
  display.clearDisplay();
  display.setCursor(0,0);
  display.print(""Start: "");
  display.println(isRunning ? ""Yes"" : ""No"");
  display.print(""Delay: "");
  display.print(delayTime);
  display.println("" ms"");
  display.display();
}
"
Brt6WWFe,hubcomms,Fokklz,Lua,Wednesday 13th of August 2025 08:00:52 AM CDT,"-- Enhanced Turtle Hub Communications Module (hubcomms.lua)
-- Bi-directional command system with clean protocol and integrated pause/resume

local hubcomms = {}

-- Configuration
local CHANNEL = 1337
local MODEM_SIDE = ""right""
local UPDATE_INTERVAL = 30
local HEARTBEAT_INTERVAL = 15
local RESPONSE_TIMEOUT = 10

-- Private variables
local modem = nil
local hubConnected = false
local turtleLabel = nil
local isInitialized = false
local customData = {}
local commandCallbacks = {}
local responseCallbacks = {}  -- For tracking command responses
local lastUpdate = 0
local lastHeartbeat = 0
local pendingCommands = {}  -- Track commands waiting for responses

-- State management for pause/resume/emergency
local operationalState = {
    isPaused = false,
    isEmergencyStop = false,
    pauseReason = nil,
    resumeCallback = nil,
    emergencyCallback = nil
}

-- Message Types Protocol
local MESSAGE_TYPES = {
    REGISTER = ""register"",
    REGISTER_ACK = ""register_ack"", 
    STATUS_UPDATE = ""status_update"",
    LOG = ""log"",
    COMMAND = ""command"",
    RESPONSE = ""response"",
    HEARTBEAT = ""heartbeat"",
    HUB_DISCOVERY = ""hub_discovery"",
    TURTLE_COMMAND = ""turtle_command""  -- Commands FROM turtle TO hub
}

-- Generate unique message ID
local function generateMessageId()
    return tostring(os.clock()) .. ""_"" .. tostring(math.random(1000, 9999))
end

-- Initialize the communication system
function hubcomms.init(config)
    config = config or {}
    
    local modemSide = config.modemSide or MODEM_SIDE
    local channel = config.channel or CHANNEL
    CHANNEL = channel
    
    turtleLabel = config.label or (""Turtle_"" .. os.getComputerID())
    if os.getComputerLabel() ~= turtleLabel then
        os.setComputerLabel(turtleLabel)
    end
    
    if peripheral.isPresent(modemSide) then
        modem = peripheral.wrap(modemSide)
        if modem and modem.isWireless() then
            modem.open(CHANNEL)
            isInitialized = true
            hubcomms.log(""Hub communications initialized on channel "" .. CHANNEL)
            hubcomms.registerWithHub()
            return true
        else
            print(""Error: Device on "" .. modemSide .. "" is not a wireless modem"")
            return false
        end
    else
        print(""Error: No ender modem found on "" .. modemSide .. "" side"")
        return false
    end
end

-- Enhanced logging with different log levels
function hubcomms.log(message, level)
    level = level or ""INFO""
    local timestamp = os.date(""%H:%M:%S"")
    local logMessage = ""["" .. level .. ""] "" .. message
    
    print(logMessage)
    
    if isInitialized and modem then
        hubcomms.sendMessage(MESSAGE_TYPES.LOG, {
            message = message,
            level = level,
            timestamp = timestamp
        })
    end
end

-- Send a generic message to hub
function hubcomms.sendMessage(messageType, data, expectResponse)
    if not isInitialized or not modem then return false end
    
    local messageId = generateMessageId()
    local message = {
        type = messageType,
        id = messageId,
        from = os.getComputerID(),
        timestamp = os.clock(),
        data = data or {}
    }
    
    modem.transmit(CHANNEL, os.getComputerID(), textutils.serialise(message))
    
    if expectResponse then
        pendingCommands[messageId] = {
            sent = os.clock(),
            callback = nil
        }
        return messageId
    end
    
    return true
end

-- Send command to hub (bi-directional commands)
function hubcomms.sendCommand(command, args, callback)
    args = args or {}
    local commandData = {
        command = command,
        args = args
    }
    
    local messageId = hubcomms.sendMessage(MESSAGE_TYPES.TURTLE_COMMAND, commandData, callback ~= nil)
    
    if callback and messageId then
        pendingCommands[messageId].callback = callback
    end
    
    return messageId
end

-- Register with hub
function hubcomms.registerWithHub()
    if not isInitialized then return false end
    
    local x, y, z = gps.locate()
    if not x then x, y, z = 0, 0, 0 end
    
    local registrationData = {
        label = turtleLabel,
        x = x, y = y, z = z,
        fuel = turtle.getFuelLevel(),
        version = ""2.0""
    }
    
    hubcomms.sendMessage(MESSAGE_TYPES.REGISTER, registrationData)
    hubcomms.log(""Registration sent to hub"")
    return true
end

-- Enhanced status updates
function hubcomms.sendStatus(statusData)
    if not isInitialized then return end
    
    statusData = statusData or {}
    local x, y, z = gps.locate()
    if not x then x, y, z = 0, 0, 0 end
    
    -- Include operational state in status
    local currentStatus = ""online""
    if operationalState.isEmergencyStop then
        currentStatus = ""emergency""
    elseif operationalState.isPaused then
        currentStatus = ""paused""
    end
    
    local data = {
        status = statusData.status or currentStatus,
        cycle = statusData.cycle or customData.cycle or 0,
        fuel = turtle.getFuelLevel(),
        x = x, y = y, z = z,
        phase = statusData.phase or customData.phase or ""idle"",
        custom = statusData.custom or customData,
        inventory = statusData.inventory or {},
        operationalState = {
            isPaused = operationalState.isPaused,
            isEmergencyStop = operationalState.isEmergencyStop,
            pauseReason = operationalState.pauseReason
        }
    }
    
    hubcomms.sendMessage(MESSAGE_TYPES.STATUS_UPDATE, data)
end

-- Operational state management functions
function hubcomms.isPaused()
    return operationalState.isPaused
end

function hubcomms.isEmergencyStop()
    return operationalState.isEmergencyStop
end

function hubcomms.getPauseReason()
    return operationalState.pauseReason
end

-- Wait for resume (blocking function for use in mining loops)
function hubcomms.waitForResume()
    if not operationalState.isPaused then
        return true -- Not paused, continue
    end
    
    hubcomms.log(""Waiting for resume command..."", ""WARN"")
    hubcomms.setPhase(""paused"", ""Waiting for resume"")
    
    while operationalState.isPaused do
        hubcomms.handleCommunications()
        sleep(1)
        
        -- Check for emergency stop while paused
        if operationalState.isEmergencyStop then
            return false
        end
    end
    
    hubcomms.log(""Resumed operations"")
    return true
end

-- Check if should continue operations (non-blocking)
function hubcomms.shouldContinue()
    hubcomms.handleCommunications()
    
    if operationalState.isEmergencyStop then
        return false, ""emergency_stop""
    end
    
    if operationalState.isPaused then
        return false, ""paused""
    end
    
    return true, ""running""
end

-- Enhanced pause/resume with integration
function hubcomms.pause(reason)
    operationalState.isPaused = true
    operationalState.pauseReason = reason or ""Manual pause""
    hubcomms.setCustomData(""status"", ""paused"")
    hubcomms.setPhase(""paused"", operationalState.pauseReason)
    hubcomms.sendStatus()
    hubcomms.log(""Operations paused: "" .. operationalState.pauseReason, ""WARN"")
end

function hubcomms.resume(reason)
    operationalState.isPaused = false
    operationalState.pauseReason = nil
    hubcomms.setCustomData(""status"", ""running"")
    hubcomms.setPhase(""running"", reason or ""Resumed operations"")
    hubcomms.sendStatus()
    hubcomms.log(""Operations resumed: "" .. (reason or ""Resumed operations""))
end

function hubcomms.emergencyStop(reason)
    operationalState.isEmergencyStop = true
    operationalState.isPaused = true
    operationalState.pauseReason = reason or ""Emergency stop activated""
    hubcomms.setCustomData(""status"", ""emergency"")
    hubcomms.setPhase(""emergency"", operationalState.pauseReason)
    hubcomms.sendStatus()
    hubcomms.log(""EMERGENCY STOP: "" .. operationalState.pauseReason, ""ERROR"")
    
    if operationalState.emergencyCallback then
        operationalState.emergencyCallback(reason)
    end
end

-- Set callbacks for operational state changes
function hubcomms.setResumeCallback(callback)
    operationalState.resumeCallback = callback
end

function hubcomms.setEmergencyCallback(callback)
    operationalState.emergencyCallback = callback
end

-- Data management
function hubcomms.setCustomData(key, value)
    customData[key] = value
end

function hubcomms.getCustomData(key)
    return customData[key]
end

function hubcomms.getAllCustomData()
    return customData
end

-- Enhanced command registration with response support
function hubcomms.registerCommand(command, callback, description)
    commandCallbacks[command] = {
        callback = callback,
        description = description or ""No description""
    }
end

-- Get list of registered commands
function hubcomms.getRegisteredCommands()
    local commands = {}
    for cmd, info in pairs(commandCallbacks) do
        commands[cmd] = info.description
    end
    return commands
end

-- Send heartbeat with enhanced info
function hubcomms.sendHeartbeat()
    if not isInitialized then return end
    
    local data = {
        fuel = turtle.getFuelLevel(),
        status = operationalState.isEmergencyStop and ""emergency"" or 
                (operationalState.isPaused and ""paused"" or ""online""),
        uptime = os.clock(),
        operationalState = {
            isPaused = operationalState.isPaused,
            isEmergencyStop = operationalState.isEmergencyStop
        }
    }
    
    hubcomms.sendMessage(MESSAGE_TYPES.HEARTBEAT, data)
end

-- Handle incoming messages
local function handleHubMessage(message)
    local data = textutils.unserialise(message)
    if not data then return end
    
    if data.type == MESSAGE_TYPES.REGISTER_ACK then
        hubConnected = true
        
        -- Handle auto-naming from hub
        if data.data.assignedLabel and data.data.wasAutoNamed then
            local oldLabel = turtleLabel
            turtleLabel = data.data.assignedLabel
            os.setComputerLabel(turtleLabel)
            hubcomms.log(""Hub assigned name: '"" .. turtleLabel .. ""' (was: '"" .. oldLabel .. ""')"")
        end
        
        hubcomms.log(""Registered with hub: "" .. (data.data.hubId or ""Unknown""))
        
    elseif data.type == MESSAGE_TYPES.COMMAND then
        local cmdData = data.data
        hubcomms.log(""Hub command: "" .. cmdData.command)
        
        local response = handleCommand(cmdData.command, cmdData.args, data.id)
        
        -- Send response if command expects one
        if data.id and response ~= nil then
            hubcomms.sendMessage(MESSAGE_TYPES.RESPONSE, {
                originalId = data.id,
                result = response.result or ""ok"",
                message = response.message or """",
                data = response.data or {}
            })
        end
        
    elseif data.type == MESSAGE_TYPES.RESPONSE then
        -- Handle response to our command
        local responseData = data.data
        local originalId = responseData.originalId
        
        if pendingCommands[originalId] then
            if pendingCommands[originalId].callback then
                pendingCommands[originalId].callback(responseData)
            end
            pendingCommands[originalId] = nil
        end
        
    elseif data.type == MESSAGE_TYPES.HUB_DISCOVERY then
        hubcomms.log(""Hub discovery received - re-registering..."")
        hubConnected = false
        sleep(math.random(1, 3))
        hubcomms.registerWithHub()
    end
end

-- Enhanced command handler with response support and state integration
function handleCommand(commandStr, args, messageId)
    args = args or {}
    
    -- Check for custom command callbacks first
    if commandCallbacks[commandStr] then
        local result = commandCallbacks[commandStr].callback(args)
        return result or {result = ""ok"", message = ""Command executed""}
    end
    
    -- Handle built-in commands with proper integration
    if commandStr == ""status"" then
        hubcomms.sendStatus()
        return {result = ""ok"", message = ""Status sent"", data = {
            customData = customData,
            operationalState = operationalState
        }}
        
    elseif commandStr == ""ping"" then
        hubcomms.log(""Pong! Turtle is responsive"")
        return {result = ""ok"", message = ""pong"", data = {fuel = turtle.getFuelLevel()}}
        
    elseif commandStr == ""pause_mining"" then
        local reason = args.reason or args[1] or ""Paused by hub command""
        hubcomms.pause(reason)
        return {result = ""ok"", message = ""Mining operations paused"", data = {reason = reason}}
        
    elseif commandStr == ""resume_mining"" then
        local reason = args.reason or args[1] or ""Resumed by hub command""
        hubcomms.resume(reason)
        if operationalState.resumeCallback then
            operationalState.resumeCallback(reason)
        end
        return {result = ""ok"", message = ""Mining operations resumed"", data = {reason = reason}}
        
    elseif commandStr == ""emergency_stop"" then
        local reason = args.reason or args[1] or ""Emergency stop from hub""
        hubcomms.emergencyStop(reason)
        return {result = ""ok"", message = ""Emergency stop activated"", data = {reason = reason}}
        
    elseif commandStr == ""get_fuel"" then
        local fuel = turtle.getFuelLevel()
        return {result = ""ok"", message = ""Fuel level: "" .. fuel, data = {fuel = fuel}}
        
    elseif commandStr == ""get_position"" then
        local x, y, z = gps.locate()
        if x then
            return {result = ""ok"", message = ""Position retrieved"", data = {x = x, y = y, z = z}}
        else
            return {result = ""error"", message = ""GPS not available""}
        end
        
    elseif commandStr == ""get_inventory"" then
        local inventory = {}
        for slot = 1, 16 do
            local item = turtle.getItemDetail(slot)
            if item then
                inventory[slot] = {name = item.name, count = item.count}
            end
        end
        return {result = ""ok"", message = ""Inventory retrieved"", data = {inventory = inventory}}
        
    elseif commandStr == ""move"" then
        local direction = args[1] or args.direction
        if not direction then
            return {result = ""error"", message = ""Direction required""}
        end
        
        local success = false
        if direction == ""forward"" then success = turtle.forward()
        elseif direction == ""back"" then success = turtle.back()
        elseif direction == ""up"" then success = turtle.up()
        elseif direction == ""down"" then success = turtle.down()
        elseif direction == ""left"" then turtle.turnLeft(); success = true
        elseif direction == ""right"" then turtle.turnRight(); success = true
        end
        
        if success then
            hubcomms.sendStatus()  -- Update position
            return {result = ""ok"", message = ""Moved "" .. direction}
        else
            return {result = ""error"", message = ""Failed to move "" .. direction}
        end
        
    elseif commandStr == ""refuel"" then
        local slot = args[1] or args.slot or 1
        turtle.select(slot)
        local before = turtle.getFuelLevel()
        
        if turtle.refuel(1) then
            local after = turtle.getFuelLevel()
            return {result = ""ok"", message = ""Refueled"", data = {before = before, after = after}}
        else
            return {result = ""error"", message = ""No fuel available""}
        end
        
    elseif commandStr == ""execute"" then
        -- Execute arbitrary lua code (be careful with this!)
        local code = args[1] or args.code
        if not code then
            return {result = ""error"", message = ""Code required""}
        end
        
        local success, result = pcall(load(code))
        if success then
            return {result = ""ok"", message = ""Code executed"", data = {result = tostring(result)}}
        else
            return {result = ""error"", message = ""Code execution failed: "" .. tostring(result)}
        end
        
    else
        return {result = ""error"", message = ""Unknown command: "" .. commandStr}
    end
end

-- Clean up expired pending commands
local function cleanupPendingCommands()
    local currentTime = os.clock()
    for id, cmd in pairs(pendingCommands) do
        if currentTime - cmd.sent > RESPONSE_TIMEOUT then
            if cmd.callback then
                cmd.callback({result = ""timeout"", message = ""Command timed out""})
            end
            pendingCommands[id] = nil
        end
    end
end

-- Background communication handler
function hubcomms.handleCommunications()
    if not isInitialized then return end
    
    local currentTime = os.clock()
    
    -- Send periodic updates
    if currentTime - lastUpdate >= UPDATE_INTERVAL then
        hubcomms.sendStatus()
        lastUpdate = currentTime
    end
    
    -- Send heartbeats
    if currentTime - lastHeartbeat >= HEARTBEAT_INTERVAL then
        hubcomms.sendHeartbeat()
        lastHeartbeat = currentTime
    end
    
    -- Clean up expired commands
    cleanupPendingCommands()
    
    -- Check for messages (non-blocking)
    local event, side, channel, replyChannel, message, distance = os.pullEventRaw(0.1)
    if event == ""modem_message"" and channel == CHANNEL then
        handleHubMessage(message)
    end
end

-- Blocking communication loop for parallel execution
function hubcomms.communicationLoop()
    while isInitialized do
        local event, side, channel, replyChannel, message, distance = os.pullEvent()
        
        if event == ""modem_message"" and channel == CHANNEL then
            handleHubMessage(message)
        elseif event == ""terminate"" then
            break
        end
        
        hubcomms.handleCommunications()
    end
end

-- Convenience functions for common operations
function hubcomms.setStatus(status, details)
    hubcomms.setCustomData(""status"", status)
    local message = ""Status: "" .. status
    if details then
        message = message .. "" - "" .. details
    end
    hubcomms.log(message)
    hubcomms.sendStatus()
end

function hubcomms.setPhase(phase, details)
    hubcomms.setCustomData(""phase"", phase)
    local message = ""Phase: "" .. phase
    if details then
        message = message .. "" - "" .. details
    end
    hubcomms.log(message)
    hubcomms.sendStatus()
end

function hubcomms.setCycle(cycle, details)
    hubcomms.setCustomData(""cycle"", cycle)
    local message = ""Cycle: "" .. cycle
    if details then
        message = message .. "" - "" .. details
    end
    hubcomms.log(message)
    hubcomms.sendStatus()
end

-- Advanced: Send custom command to hub with callback
function hubcomms.requestFromHub(command, args, callback)
    return hubcomms.sendCommand(command, args, callback)
end

-- Get system status
function hubcomms.getStatus()
    return {
        initialized = isInitialized,
        connected = hubConnected,
        label = turtleLabel,
        fuel = turtle.getFuelLevel(),
        custom = customData,
        pendingCommands = table.getn(pendingCommands),
        operationalState = operationalState
    }
end

-- Cleanup and shutdown
function hubcomms.cleanup()
    if isInitialized then
        hubcomms.log(""Hub communications shutting down"")
        
        if modem then
            hubcomms.sendMessage(MESSAGE_TYPES.STATUS_UPDATE, {status = ""offline""})
            modem.close(CHANNEL)
        end
        
        isInitialized = false
        hubConnected = false
    end
end

-- Utility functions
function hubcomms.isConnected()
    return hubConnected
end

function hubcomms.isInitialized()
    return isInitialized
end

-- Enhanced helper for mining scripts - integrated pause/resume checking
function hubcomms.safeOperation(operation, description)
    description = description or ""operation""
    
    -- Check if we should continue before starting
    local canContinue, reason = hubcomms.shouldContinue()
    if not canContinue then
        if reason == ""emergency_stop"" then
            error(""Emergency stop: "" .. (operationalState.pauseReason or ""Unknown reason""))
        elseif reason == ""paused"" then
            if not hubcomms.waitForResume() then
                error(""Emergency stop during pause"")
            end
        end
    end
    
    -- Log operation start
    hubcomms.log(""Starting: "" .. description)
    
    -- Perform operation
    local success, result = pcall(operation)
    
    if success then
        hubcomms.log(""Completed: "" .. description)
        return result
    else
        hubcomms.log(""Failed: "" .. description .. "" - "" .. tostring(result), ""ERROR"")
        error(result)
    end
end

-- Register some useful default commands - now with proper integration and remote install
hubcomms.registerCommand(""help"", function(args)
    local commands = hubcomms.getRegisteredCommands()
    return {
        result = ""ok"", 
        message = ""Available commands"", 
        data = {commands = commands}
    }
end, ""List all available commands"")

hubcomms.registerCommand(""remote_install"", function(args)
    hubcomms.log(""Remote installation requested from hub"")
    hubcomms.setPhase(""installing"", ""Downloading installer"")
    
    -- Download and run the simple installer
    local INSTALLER_CODE = ""BCpzbs8z""
    
    hubcomms.log(""Downloading installer..."")
    local success = shell.run(""pastebin"", ""run"", INSTALLER_CODE, ""remote"")
    
    if success then
        hubcomms.log(""Installation completed - system will reboot"")
        return {result = ""ok"", message = ""Installation completed""}
    else
        hubcomms.log(""Installation failed"", ""ERROR"")
        hubcomms.setPhase(""install_failed"", ""Installation failed"")
        return {result = ""error"", message = ""Installation failed""}
    end
end, ""Remotely install/update worker scripts"")

hubcomms.registerCommand(""reboot"", function(args)
    hubcomms.log(""Reboot command received from hub"")
    hubcomms.cleanup()
    os.reboot()
end, ""Reboot the turtle"")

hubcomms.registerCommand(""shutdown"", function(args)
    hubcomms.log(""Shutdown command received from hub"")
    hubcomms.cleanup()
    os.shutdown()
end, ""Shutdown the turtle"")

return hubcomms"
BZeAHStj,Mekanism Miner Hub Worker,Fokklz,Lua,Wednesday 13th of August 2025 07:49:32 AM CDT,"-- Turtle Communication Test Script
-- Minimal script to test hub communication and registration
-- Requires: Turtle + Ender Modem

-- Configuration
local CHANNEL = 1337  -- Must match hub channel
local MODEM_SIDE = ""right""  -- Side where ender modem is attached
local TURTLE_LABEL = ""TestMiner_"" .. os.getComputerID()
local UPDATE_INTERVAL = 10  -- Status update every 10 seconds
local HEARTBEAT_INTERVAL = 5  -- Heartbeat every 5 seconds

-- Global variables
local modem = nil
local hubConnected = false
local running = true
local cycleCount = 0

-- Initialize modem
function initializeModem()
    print(""Initializing ender modem..."")
    
    if peripheral.isPresent(MODEM_SIDE) then
        modem = peripheral.wrap(MODEM_SIDE)
        if modem and modem.isWireless() then
            modem.open(CHANNEL)
            print(""✓ Ender modem connected on channel "" .. CHANNEL)
            return true
        else
            print(""✗ Device on "" .. MODEM_SIDE .. "" is not a wireless modem"")
            return false
        end
    else
        print(""✗ No ender modem found on "" .. MODEM_SIDE .. "" side"")
        return false
    end
end

-- Wrapper function for logging that sends to both local and hub
function hubLog(message)
    -- Always print locally first
    print(message)
    
    -- Send to hub if modem is available
    if modem then
        local data = {
            type = ""log"",
            message = message,
            timestamp = os.clock()
        }
        
        modem.transmit(CHANNEL, os.getComputerID(), textutils.serialise(data))
    end
end

-- Send registration message to hub
function registerWithHub()
    if not modem then return false end
    
    hubLog(""Attempting to register with hub..."")
    
    local x, y, z = gps.locate()
    if not x then
        x, y, z = 0, 0, 0  -- Default if GPS not available
    end
    
    local registrationData = {
        type = ""register"",
        label = TURTLE_LABEL,
        x = x,
        y = y,
        z = z,
        fuel = turtle.getFuelLevel(),
        timestamp = os.clock()
    }
    
    modem.transmit(CHANNEL, os.getComputerID(), textutils.serialise(registrationData))
    hubLog(""Registration message sent"")
    return true
end

-- Send status update to hub
function sendStatusUpdate()
    if not modem then return end
    
    local x, y, z = gps.locate()
    if not x then
        x, y, z = 0, 0, 0
    end
    
    local statusData = {
        type = ""status_update"",
        status = ""online"",
        cycle = cycleCount,
        fuel = turtle.getFuelLevel(),
        x = x,
        y = y,
        z = z,
        timestamp = os.clock()
    }
    
    modem.transmit(CHANNEL, os.getComputerID(), textutils.serialise(statusData))
end

-- Send heartbeat to hub
function sendHeartbeat()
    if not modem then return end
    
    local heartbeatData = {
        type = ""heartbeat"",
        timestamp = os.clock()
    }
    
    modem.transmit(CHANNEL, os.getComputerID(), textutils.serialise(heartbeatData))
end

-- Handle incoming messages from hub
function handleHubMessage(message)
    local data = textutils.unserialise(message)
    if not data then return end
    
    if data.type == ""register_ack"" then
        hubConnected = true
        hubLog(""Successfully registered with hub: "" .. (data.hubId or ""Unknown""))
        
    elseif data.type == ""command"" then
        hubLog(""Received command from hub: "" .. data.command)
        handleHubCommand(data.command)
    end
end

-- Handle commands from hub
function handleHubCommand(command)
    local parts = {}
    for word in command:gmatch(""%S+"") do
        table.insert(parts, word)
    end
    
    local cmd = parts[1]
    
    if cmd == ""status"" then
        hubLog(""Status: Online, Cycle "" .. cycleCount .. "", Fuel "" .. turtle.getFuelLevel())
        
    elseif cmd == ""stop"" then
        hubLog(""Stop command received from hub"")
        running = false
        
    elseif cmd == ""test"" then
        hubLog(""Test command received - performing test sequence"")
        performTestSequence()
        
    elseif cmd == ""refuel"" then
        hubLog(""Refuel command received"")
        local beforeFuel = turtle.getFuelLevel()
        turtle.select(1)
        if turtle.refuel(1) then
            local afterFuel = turtle.getFuelLevel()
            hubLog(""Refueled: "" .. beforeFuel .. "" → "" .. afterFuel)
        else
            hubLog(""No fuel available to consume"")
        end
        
    elseif cmd == ""move"" and parts[2] then
        local direction = parts[2]
        hubLog(""Move command: "" .. direction)
        
        if direction == ""forward"" then
            if turtle.forward() then
                hubLog(""Moved forward successfully"")
            else
                hubLog(""Failed to move forward"")
            end
        elseif direction == ""back"" then
            if turtle.back() then
                hubLog(""Moved back successfully"")
            else
                hubLog(""Failed to move back"")
            end
        elseif direction == ""up"" then
            if turtle.up() then
                hubLog(""Moved up successfully"")
            else
                hubLog(""Failed to move up"")
            end
        elseif direction == ""down"" then
            if turtle.down() then
                hubLog(""Moved down successfully"")
            else
                hubLog(""Failed to move down"")
            end
        end
        
        -- Send updated position
        sendStatusUpdate()
        
    else
        hubLog(""Unknown command: "" .. command)
    end
end

-- Perform a test sequence to generate activity
function performTestSequence()
    hubLog(""Starting test sequence..."")
    
    for i = 1, 3 do
        hubLog(""Test step "" .. i .. ""/3"")
        sleep(1)
        
        -- Simulate some activity
        local fuel = turtle.getFuelLevel()
        hubLog(""Current fuel level: "" .. fuel)
        
        if i == 2 then
            hubLog(""Turning right..."")
            turtle.turnRight()
        end
    end
    
    hubLog(""Test sequence complete!"")
    cycleCount = cycleCount + 1
end

-- Main communication loop
function communicationLoop()
    local lastUpdate = 0
    local lastHeartbeat = 0
    
    while running do
        local currentTime = os.clock()
        
        -- Send periodic status updates
        if currentTime - lastUpdate >= UPDATE_INTERVAL then
            sendStatusUpdate()
            lastUpdate = currentTime
        end
        
        -- Send periodic heartbeats
        if currentTime - lastHeartbeat >= HEARTBEAT_INTERVAL then
            sendHeartbeat()
            lastHeartbeat = currentTime
        end
        
        -- Check for incoming messages
        local event, side, channel, replyChannel, message, distance = os.pullEvent()
        
        if event == ""modem_message"" and channel == CHANNEL then
            handleHubMessage(message)
            
        elseif event == ""terminate"" then
            running = false
            hubLog(""Termination signal received"")
        end
    end
end

-- Simple test activity loop
function testActivityLoop()
    local testTimer = os.startTimer(30)  -- Test activity every 30 seconds
    
    while running do
        local event, param1 = os.pullEvent()
        
        if event == ""timer"" and param1 == testTimer then
            performTestSequence()
            testTimer = os.startTimer(30)
            
        elseif event == ""terminate"" then
            running = false
        end
    end
end

-- Interactive command interface
function commandInterface()
    print(""\nTurtle Commands (type while running):"")
    print(""- 'test' - Run test sequence"")
    print(""- 'status' - Show status"")
    print(""- 'fuel' - Check fuel"")
    print(""- 'register' - Re-register with hub"")
    print(""- 'stop' - Stop turtle"")
    
    while running do
        sleep(0.1)  -- Prevent busy waiting
        
        -- Note: In ComputerCraft, we can't easily do non-blocking input
        -- This is mainly for demonstration - commands will come from hub
    end
end

-- Cleanup function
function cleanup()
    hubLog(""Turtle shutting down..."")
    
    if modem then
        -- Send offline status
        local offlineData = {
            type = ""status_update"",
            status = ""offline"",
            timestamp = os.clock()
        }
        modem.transmit(CHANNEL, os.getComputerID(), textutils.serialise(offlineData))
        
        modem.close(CHANNEL)
    end
    
    print(""Turtle shutdown complete."")
end

-- Main function
function main()
    print(""=== TURTLE COMMUNICATION TEST ==="")
    print(""Turtle ID: "" .. os.getComputerID())
    print(""Label: "" .. TURTLE_LABEL)
    
    -- Initialize hardware
    if not initializeModem() then
        print(""Failed to initialize modem - exiting"")
        return
    end
    
    -- Set computer label if not already set
    if os.getComputerLabel() ~= TURTLE_LABEL then
        os.setComputerLabel(TURTLE_LABEL)
        hubLog(""Set turtle label to: "" .. TURTLE_LABEL)
    end
    
    -- Register with hub
    hubLog(""Turtle starting up..."")
    registerWithHub()
    
    -- Wait a moment for registration
    sleep(2)
    
    hubLog(""Starting communication loops..."")
    hubLog(""Hub channel: "" .. CHANNEL)
    hubLog(""Fuel level: "" .. turtle.getFuelLevel())
    
    -- Get initial position
    local x, y, z = gps.locate()
    if x then
        hubLog(""Position: "" .. x .. "","" .. y .. "","" .. z)
    else
        hubLog(""GPS not available - using default coordinates"")
    end
    
    -- Run communication and test loops in parallel
    parallel.waitForAny(
        communicationLoop,
        testActivityLoop
    )
    
    -- Cleanup
    cleanup()
end

-- Run the turtle communication test
main()"
xpEv3gNR,Mekanism Miner Hub,Fokklz,Lua,Wednesday 13th of August 2025 07:41:29 AM CDT,"-- Mekanism Mining Hub Control Script
-- Central control system for managing multiple mining turtles
-- Requires: Advanced Computer + Monitor + Ender Modem

-- Configuration
local CHANNEL = 1337  -- Communication channel for turtle network
local HUB_ID = ""MINING_HUB""
local MONITOR_SIDE = ""left""  -- Side where monitor is attached
local MODEM_SIDE = ""right""   -- Side where ender modem is attached

-- Global variables
local turtles = {}  -- Table to store turtle information
local selectedTurtle = nil  -- Currently selected turtle
local monitor = nil
local modem = nil
local running = true

-- Colors for UI (using global colors API)
local uiColors = {
    background = colors.black,
    header = colors.blue,
    text = colors.white,
    selected = colors.green,
    offline = colors.red,
    online = colors.lime,
    warning = colors.yellow
}

-- Turtle data structure
function createTurtleEntry(id, label, x, y, z)
    return {
        id = id,
        label = label or (""Turtle_"" .. id),
        x = x or 0,
        y = y or 0, 
        z = z or 0,
        status = ""online"",
        lastSeen = os.clock(),
        logs = {},
        cycle = 0,
        fuel = 0,
        inventory = {}
    }
end

-- Initialize hardware connections
function initializeHardware()
    print(""Initializing hardware..."")
    
    -- Setup monitor
    if peripheral.isPresent(MONITOR_SIDE) then
        monitor = peripheral.wrap(MONITOR_SIDE)
        if monitor then
            monitor.setTextScale(0.5)  -- Smaller text for more info
            print(""✓ Monitor connected"")
        else
            error(""Failed to wrap monitor"")
        end
    else
        error(""No monitor found on "" .. MONITOR_SIDE .. "" side"")
    end
    
    -- Setup modem
    if peripheral.isPresent(MODEM_SIDE) then
        modem = peripheral.wrap(MODEM_SIDE)
        if modem then
            modem.open(CHANNEL)
            print(""✓ Ender modem connected on channel "" .. CHANNEL)
        else
            error(""Failed to wrap modem"")
        end
    else
        error(""No ender modem found on "" .. MODEM_SIDE .. "" side"")
    end
    
    print(""Hardware initialization complete!"")
end

-- Add log entry to turtle
function addTurtleLog(turtleId, message)
    if turtles[turtleId] then
        local timestamp = os.date(""%H:%M:%S"")
        table.insert(turtles[turtleId].logs, {
            time = timestamp,
            message = message
        })
        
        -- Keep only last 50 log entries
        if #turtles[turtleId].logs > 50 then
            table.remove(turtles[turtleId].logs, 1)
        end
        
        turtles[turtleId].lastSeen = os.clock()
    end
end

-- Handle incoming messages from turtles
function handleTurtleMessage(message, senderId)
    local data = textutils.unserialise(message)
    if not data then return end
    
    if data.type == ""register"" then
        -- New turtle registration
        turtles[senderId] = createTurtleEntry(
            senderId,
            data.label,
            data.x, data.y, data.z
        )
        addTurtleLog(senderId, ""Turtle registered with hub"")
        
        -- Send acknowledgment
        modem.transmit(CHANNEL, CHANNEL, textutils.serialise({
            type = ""register_ack"",
            hubId = HUB_ID,
            timestamp = os.clock()
        }))
        
    elseif data.type == ""status_update"" then
        -- Status update from existing turtle
        if turtles[senderId] then
            turtles[senderId].status = data.status or ""online""
            turtles[senderId].cycle = data.cycle or 0
            turtles[senderId].fuel = data.fuel or 0
            turtles[senderId].x = data.x or turtles[senderId].x
            turtles[senderId].y = data.y or turtles[senderId].y
            turtles[senderId].z = data.z or turtles[senderId].z
            turtles[senderId].lastSeen = os.clock()
        end
        
    elseif data.type == ""log"" then
        -- Log message from turtle
        addTurtleLog(senderId, data.message)
        
    elseif data.type == ""heartbeat"" then
        -- Keep-alive signal
        if turtles[senderId] then
            turtles[senderId].lastSeen = os.clock()
        end
    end
end

-- Check for offline turtles
function checkTurtleStatus()
    local currentTime = os.clock()
    for id, turtle in pairs(turtles) do
        if currentTime - turtle.lastSeen > 30 then  -- 30 seconds timeout
            turtle.status = ""offline""
        end
    end
end

-- Draw header on monitor
function drawHeader()
    monitor.setBackgroundColor(uiColors.header)
    monitor.setTextColor(uiColors.text)
    monitor.setCursorPos(1, 1)
    
    local w, h = monitor.getSize()
    local title = "" MEKANISM MINING HUB CONTROL ""
    local padding = math.floor((w - #title) / 2)
    
    monitor.clearLine()
    monitor.setCursorPos(padding, 1)
    monitor.write(title)
    
    -- Status line
    monitor.setCursorPos(1, 2)
    monitor.clearLine()
    local statusText = "" Active Turtles: "" .. table.getn(turtles) .. "" | Channel: "" .. CHANNEL .. "" ""
    monitor.write(statusText)
end

-- Draw turtle list
function drawTurtleList()
    local w, h = monitor.getSize()
    monitor.setBackgroundColor(uiColors.background)
    
    -- Clear turtle list area
    for y = 4, h do
        monitor.setCursorPos(1, y)
        monitor.clearLine()
    end
    
    if table.getn(turtles) == 0 then
        monitor.setTextColor(uiColors.warning)
        monitor.setCursorPos(2, 5)
        monitor.write(""No turtles registered"")
        monitor.setCursorPos(2, 6)
        monitor.write(""Waiting for connections..."")
        return
    end
    
    local line = 4
    for id, turtle in pairs(turtles) do
        if line > h then break end
        
        monitor.setCursorPos(1, line)
        
        -- Status indicator
        local statusColor = turtle.status == ""online"" and uiColors.online or uiColors.offline
        monitor.setTextColor(statusColor)
        monitor.write(""●"")
        
        -- Turtle info
        monitor.setTextColor(uiColors.text)
        local info = string.format("" %s [%d] - Cycle:%d Fuel:%d Pos:(%d,%d,%d)"", 
            turtle.label, id, turtle.cycle, turtle.fuel, turtle.x, turtle.y, turtle.z)
        
        -- Highlight selected turtle
        if selectedTurtle == id then
            monitor.setBackgroundColor(uiColors.selected)
            monitor.setTextColor(colors.black)
        end
        
        monitor.write(info)
        monitor.setBackgroundColor(uiColors.background)
        
        line = line + 1
    end
end

-- Draw turtle details panel
function drawTurtleDetails()
    if not selectedTurtle or not turtles[selectedTurtle] then
        return
    end
    
    local turtle = turtles[selectedTurtle]
    local w, h = monitor.getSize()
    local splitX = math.floor(w * 0.6)  -- Split screen at 60%
    
    -- Draw separator
    monitor.setBackgroundColor(uiColors.background)
    monitor.setTextColor(uiColors.header)
    for y = 4, h do
        monitor.setCursorPos(splitX, y)
        monitor.write(""|"")
    end
    
    -- Draw turtle details header
    monitor.setCursorPos(splitX + 2, 4)
    monitor.setTextColor(uiColors.text)
    monitor.write(""TURTLE DETAILS: "" .. turtle.label)
    
    monitor.setCursorPos(splitX + 2, 5)
    monitor.setTextColor(uiColors.text)
    monitor.write(""Status: "")
    local statusColor = turtle.status == ""online"" and uiColors.online or uiColors.offline
    monitor.setTextColor(statusColor)
    monitor.write(turtle.status)
    
    monitor.setCursorPos(splitX + 2, 6)
    monitor.setTextColor(uiColors.text)
    monitor.write(""Last Seen: "" .. os.date(""%H:%M:%S"", turtle.lastSeen))
    
    -- Draw recent logs
    monitor.setCursorPos(splitX + 2, 8)
    monitor.setTextColor(uiColors.text)
    monitor.write(""RECENT LOGS:"")
    
    local logStart = 9
    local maxLogs = h - logStart
    local logs = turtle.logs
    local startIndex = math.max(1, #logs - maxLogs + 1)
    
    for i = startIndex, #logs do
        local logY = logStart + (i - startIndex)
        if logY > h then break end
        
        monitor.setCursorPos(splitX + 2, logY)
        monitor.setTextColor(uiColors.warning)
        monitor.write(logs[i].time)
        monitor.setTextColor(uiColors.text)
        
        local maxLogWidth = w - splitX - 10
        local message = logs[i].message
        if #message > maxLogWidth then
            message = string.sub(message, 1, maxLogWidth - 3) .. ""...""
        end
        monitor.write("" "" .. message)
    end
end

-- Handle monitor touches
function handleMonitorTouch(x, y)
    local w, h = monitor.getSize()
    local splitX = math.floor(w * 0.6)
    
    -- Only handle touches on turtle list (left side)
    if x >= splitX then return end
    
    -- Calculate which turtle was clicked
    local turtleIndex = y - 3  -- Adjust for header
    if turtleIndex < 1 then return end
    
    local currentIndex = 1
    for id, turtle in pairs(turtles) do
        if currentIndex == turtleIndex then
            selectedTurtle = id
            return
        end
        currentIndex = currentIndex + 1
    end
end

-- Send command to turtle
function sendCommandToTurtle(turtleId, command)
    if not turtles[turtleId] then return false end
    
    local message = textutils.serialise({
        type = ""command"",
        command = command,
        timestamp = os.clock(),
        hubId = HUB_ID
    })
    
    modem.transmit(CHANNEL, CHANNEL, message)
    addTurtleLog(turtleId, ""Hub sent command: "" .. command)
    return true
end

-- Main UI update function
function updateDisplay()
    monitor.clear()
    drawHeader()
    drawTurtleList()
    if selectedTurtle then
        drawTurtleDetails()
    end
end

-- Handle keyboard input for commands
function handleKeyboard()
    print(""\nHub Commands:"")
    print(""- 'list' - Show all turtles"")
    print(""- 'select <id>' - Select turtle"")
    print(""- 'cmd <command>' - Send command to selected turtle"")
    print(""- 'stop' - Stop hub"")
    print(""- 'clear' - Clear screen"")
    
    while running do
        write(""Hub> "")
        local input = read()
        local parts = {}
        for word in input:gmatch(""%S+"") do
            table.insert(parts, word)
        end
        
        local command = parts[1]
        
        if command == ""list"" then
            print(""Registered turtles:"")
            for id, turtle in pairs(turtles) do
                print(string.format(""  [%d] %s - %s"", id, turtle.label, turtle.status))
            end
            
        elseif command == ""select"" and parts[2] then
            local id = tonumber(parts[2])
            if turtles[id] then
                selectedTurtle = id
                print(""Selected turtle "" .. id)
            else
                print(""Turtle "" .. id .. "" not found"")
            end
            
        elseif command == ""cmd"" and parts[2] then
            if selectedTurtle then
                local cmd = table.concat(parts, "" "", 2)
                if sendCommandToTurtle(selectedTurtle, cmd) then
                    print(""Command sent to turtle "" .. selectedTurtle)
                else
                    print(""Failed to send command"")
                end
            else
                print(""No turtle selected"")
            end
            
        elseif command == ""stop"" then
            running = false
            print(""Stopping hub..."")
            break
            
        elseif command == ""clear"" then
            term.clear()
            term.setCursorPos(1, 1)
        else
            print(""Unknown command: "" .. input)
        end
    end
end

-- Main event loop
function eventLoop()
    local timer = os.startTimer(1)  -- Update timer
    
    while running do
        local event, param1, param2, param3, param4, param5 = os.pullEvent()
        
        if event == ""modem_message"" then
            local side, channel, replyChannel, message, distance = param1, param2, param3, param4, param5
            if channel == CHANNEL then
                handleTurtleMessage(message, replyChannel)
                updateDisplay()
            end
            
        elseif event == ""monitor_touch"" then
            local side, x, y = param1, param2, param3
            if side == MONITOR_SIDE then
                handleMonitorTouch(x, y)
                updateDisplay()
            end
            
        elseif event == ""timer"" and param1 == timer then
            checkTurtleStatus()
            updateDisplay()
            timer = os.startTimer(5)  -- Check every 5 seconds
            
        elseif event == ""terminate"" then
            running = false
        end
    end
end

-- Main function
function main()
    print(""=== MEKANISM MINING HUB CONTROL ==="")
    print(""Initializing..."")
    
    -- Initialize hardware
    initializeHardware()
    
    -- Initial display
    updateDisplay()
    
    print(""Hub is running!"")
    print(""Turtles can now register on channel "" .. CHANNEL)
    
    -- Start keyboard input handler in parallel
    parallel.waitForAny(eventLoop, handleKeyboard)
    
    -- Cleanup
    if modem then
        modem.close(CHANNEL)
    end
    if monitor then
        monitor.clear()
        monitor.setCursorPos(1, 1)
        monitor.setTextColor(colors.white)
        monitor.setBackgroundColor(colors.black)
        monitor.write(""Mining Hub Offline"")
    end
    
    print(""Hub shutdown complete."")
end

-- Utility function to get table length (Lua 5.1 compatibility)
function table.getn(t)
    local count = 0
    for _ in pairs(t) do count = count + 1 end
    return count
end

-- Run the hub
main()"
FZbV1gEc,Relay Controller rev_03,pleasedontcode,Arduino,Wednesday 13th of August 2025 07:41:04 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Relay Controller
	- Source Code NOT compiled for: Arduino Nano ESP32
	- Source Code created on: 2025-08-13 12:40:49

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* esp32 with i2c display,one relay out,one swich for */
	/* start, one swich for stop, one swich for time */
	/* setting up,one swich for time setting down,one */
	/* ds18b20 temperature sensor. */
/****** END SYSTEM REQUIREMENTS *****/


/********* User code review feedback **********
#### Feedback 1 ####
- not working

#### Feedback 2 ####
- no oled in my scope

********* User code review feedback **********/

/* START CODE */
/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <OneWire.h>
#include <DallasTemperature.h>

// Define pins for switches
const int startSwitchPin = 2;   // Start button
const int stopSwitchPin = 3;    // Stop button
const int timeUpSwitchPin = 4;  // Time setting up
const int timeDownSwitchPin = 5; // Time setting down

// Define pin for relay
const int relayPin = 6;

// Define pin for DS18B20 temperature sensor
const int oneWireBusPin = 7;

// Create OneWire and DallasTemperature objects
OneWire oneWire(oneWireBusPin);
DallasTemperature sensors(&oneWire);

// Variables for system state
bool systemRunning = false;
int temperature = 0;
int setTimeMinutes = 0;

void setup() {
  // Initialize serial communication
  Serial.begin(115200);

  // Initialize pins
  pinMode(startSwitchPin, INPUT_PULLUP);
  pinMode(stopSwitchPin, INPUT_PULLUP);
  pinMode(timeUpSwitchPin, INPUT_PULLUP);
  pinMode(timeDownSwitchPin, INPUT_PULLUP);
  pinMode(relayPin, OUTPUT);

  // Initialize relay
  digitalWrite(relayPin, LOW); // Relay off

  // Initialize temperature sensor
  sensors.begin();

  // Initial status message
  Serial.println(""System initialized"");
}

void loop() {
  handleSwitches();
  readTemperature();
  // Optional: Send status over serial for debugging
  Serial.print(""Temperature: "");
  Serial.print(temperature);
  Serial.print("" C, Set Time: "");
  Serial.print(setTimeMinutes);
  Serial.print("" min, Status: "");
  Serial.println(systemRunning ? ""RUNNING"" : ""STOPPED"");
  delay(200); // Loop delay
}

void handleSwitches() {
  // Read switch states
  bool startState = digitalRead(startSwitchPin) == LOW;
  bool stopState = digitalRead(stopSwitchPin) == LOW;
  bool timeUpState = digitalRead(timeUpSwitchPin) == LOW;
  bool timeDownState = digitalRead(timeDownSwitchPin) == LOW;

  if (startState) {
    systemRunning = true;
    digitalWrite(relayPin, HIGH); // Turn relay on
  }
  if (stopState) {
    systemRunning = false;
    digitalWrite(relayPin, LOW); // Turn relay off
  }
  if (timeUpState) {
    setTimeMinutes++;
  }
  if (timeDownState) {
    if (setTimeMinutes > 0) {
      setTimeMinutes--;
    }
  }
}

void readTemperature() {
  sensors.requestTemperatures();
  temperature = sensors.getTempCByIndex(0);
}
"
RVGEL7Am,ESP32 Essentials rev_02,pleasedontcode,Arduino,Wednesday 13th of August 2025 07:40:23 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ESP32 Essentials
	- Source Code NOT compiled for: Arduino Nano ESP32
	- Source Code created on: 2025-08-13 12:39:59

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* esp32 with i2c display,one relay out,one swich for */
	/* start, one swich for stop, one swich for time */
	/* setting up,one swich for time setting down,one */
	/* ds18b20 temperature sensor. */
/****** END SYSTEM REQUIREMENTS *****/


/********* User code review feedback **********
#### Feedback 1 ####
- not working

********* User code review feedback **********/

/* START CODE */
/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <Adafruit_SSD1306.h>
#include <OneWire.h>
#include <DallasTemperature.h>

// Define display parameters
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET    -1 // Reset pin # (or -1 if sharing Arduino reset pin)

// Instantiate display object
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Define pins for switches
const int startSwitchPin = 2;   // Start button
const int stopSwitchPin = 3;    // Stop button
const int timeUpSwitchPin = 4;  // Time setting up
const int timeDownSwitchPin = 5; // Time setting down

// Define pin for relay
const int relayPin = 6;

// Define pin for DS18B20 temperature sensor
const int oneWireBusPin = 7;

// Create OneWire and DallasTemperature objects
OneWire oneWire(oneWireBusPin);
DallasTemperature sensors(&oneWire);

// Variables for system state
bool systemRunning = false;
int temperature = 0;
int setTimeMinutes = 0;

void setup() {
  // Initialize serial communication
  Serial.begin(115200);

  // Initialize display
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x64
    Serial.println(F(""SSD1306 allocation failed""));
    for(;;); // Loop forever
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0,0);
  display.println(""Initializing..."");
  display.display();

  // Initialize pins
  pinMode(startSwitchPin, INPUT_PULLUP);
  pinMode(stopSwitchPin, INPUT_PULLUP);
  pinMode(timeUpSwitchPin, INPUT_PULLUP);
  pinMode(timeDownSwitchPin, INPUT_PULLUP);
  pinMode(relayPin, OUTPUT);

  // Initialize relay
  digitalWrite(relayPin, LOW); // Relay off

  // Initialize temperature sensor
  sensors.begin();

  // Initial display update
  updateDisplay();
}

void loop() {
  handleSwitches();
  readTemperature();
  updateDisplay();
  delay(200); // Loop delay
}

void handleSwitches() {
  // Read switch states
  bool startState = digitalRead(startSwitchPin) == LOW;
  bool stopState = digitalRead(stopSwitchPin) == LOW;
  bool timeUpState = digitalRead(timeUpSwitchPin) == LOW;
  bool timeDownState = digitalRead(timeDownSwitchPin) == LOW;

  if (startState) {
    systemRunning = true;
    digitalWrite(relayPin, HIGH); // Turn relay on
  }
  if (stopState) {
    systemRunning = false;
    digitalWrite(relayPin, LOW); // Turn relay off
  }
  if (timeUpState) {
    setTimeMinutes++;
  }
  if (timeDownState) {
    if (setTimeMinutes > 0) {
      setTimeMinutes--;
    }
  }
}

void readTemperature() {
  sensors.requestTemperatures();
  temperature = sensors.getTempCByIndex(0);
}

void updateDisplay() {
  display.clearDisplay();
  display.setCursor(0,0);
  display.println(""ESP32 I2C Display"");
  display.println(""-----------------"");
  display.print(""Temp: "");
  display.print(temperature);
  display.println("" C"");
  display.print(""Set Time: "");
  display.print(setTimeMinutes);
  display.println("" min"");
  display.println(systemRunning ? ""Status: RUNNING"" : ""Status: STOPPED"");
  display.display();
}
"
JsdKqe81,Device Management rev_01,pleasedontcode,Arduino,Wednesday 13th of August 2025 07:37:01 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Device Management
	- Source Code NOT compiled for: Arduino Nano ESP32
	- Source Code created on: 2025-08-13 12:36:48

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* esp32 with i2c display,one relay out,one swich for */
	/* start, one swich for stop, one swich for time */
	/* setting up,one swich for time setting down,one */
	/* ds18b20 temperature sensor. */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */
/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <Adafruit_SSD1306.h>
#include <OneWire.h>
#include <DallasTemperature.h>

// Define display parameters
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET    -1 // Reset pin # (or -1 if sharing Arduino reset pin)

// Instantiate display object
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Define pins for switches
const int startSwitchPin = 2;   // Start button
const int stopSwitchPin = 3;    // Stop button
const int timeUpSwitchPin = 4;  // Time setting up
const int timeDownSwitchPin = 5; // Time setting down

// Define pin for relay
const int relayPin = 6;

// Define pin for DS18B20 temperature sensor
const int oneWireBusPin = 7;

// Create OneWire and DallasTemperature objects
OneWire oneWire(oneWireBusPin);
DallasTemperature sensors(&oneWire);

// Variables for system state
bool systemRunning = false;
unsigned long lastDebounceTime = 0;
unsigned long debounceDelay = 50; // milliseconds
int temperature = 0;
int setTimeMinutes = 0;

void setup() {
  // Initialize serial communication
  Serial.begin(115200);

  // Initialize display
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x64
    Serial.println(F(""SSD1306 allocation failed""));
    for(;;); // Loop forever
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0,0);
  display.println(""Initializing..."");
  display.display();

  // Initialize pins
  pinMode(startSwitchPin, INPUT_PULLUP);
  pinMode(stopSwitchPin, INPUT_PULLUP);
  pinMode(timeUpSwitchPin, INPUT_PULLUP);
  pinMode(timeDownSwitchPin, INPUT_PULLUP);
  pinMode(relayPin, OUTPUT);

  // Initialize relay
  digitalWrite(relayPin, LOW); // Relay off

  // Initialize temperature sensor
  sensors.begin();

  // Initial display update
  updateDisplay();
}

void loop() {
  handleSwitches();
  readTemperature();
  updateDisplay();
  delay(200); // Loop delay
}

void handleSwitches() {
  // Read switch states
  bool startState = digitalRead(startSwitchPin) == LOW;
  bool stopState = digitalRead(stopSwitchPin) == LOW;
  bool timeUpState = digitalRead(timeUpSwitchPin) == LOW;
  bool timeDownState = digitalRead(timeDownSwitchPin) == LOW;

  unsigned long currentTime = millis();

  // Debounce logic can be added here if needed

  if (startState) {
    systemRunning = true;
    digitalWrite(relayPin, HIGH); // Turn relay on
  }
  if (stopState) {
    systemRunning = false;
    digitalWrite(relayPin, LOW); // Turn relay off
  }
  if (timeUpState) {
    setTimeMinutes++;
  }
  if (timeDownState) {
    if (setTimeMinutes > 0) {
      setTimeMinutes--;
    }
  }
}

void readTemperature() {
  sensors.requestTemperatures();
  temperature = sensors.getTempCByIndex(0);
}

void updateDisplay() {
  display.clearDisplay();
  display.setCursor(0,0);
  display.println(""ESP32 I2C Display"");
  display.println(""-----------------"");
  display.print(""Temp: "");
  display.print(temperature);
  display.println("" C"");
  display.print(""Set Time: "");
  display.print(setTimeMinutes);
  display.println("" min"");
  display.println(systemRunning ? ""Status: RUNNING"" : ""Status: STOPPED"");
  display.display();
}
"
ZzrtmTht,Embedded Control rev_06,pleasedontcode,Arduino,Wednesday 13th of August 2025 07:15:59 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Embedded Control
	- Source Code NOT compiled for: ESP8266 NodeMCU V1.0
	- Source Code created on: 2025-08-13 12:15:41

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* esp12f with i2c display timer,press start relay on */
	/* hold set time.after delay another delay time as */
	/* per set start,after this lid open a message on */
	/* display and off all.2 swich to up down time */
	/* setting,another one swich to stop.all setting from */
	/* mobile */
/****** END SYSTEM REQUIREMENTS *****/


/********* User code review feedback **********
#### Feedback 1 ####
- ssd name is esp32,password is 12345678
#### Feedback 2 ####
- wifi not seen

#### Feedback 3 ####
- Compilation error: 'esp' was not declared in this scope; did you
 mean 'exp'?
********* User code review feedback **********/

/* START CODE */
/****** DEFINITION OF LIBRARIES *****/
#include <DS18B20.h>
#include <Wire.h>             // For I2C display
#include <LiquidCrystal_I2C.h> // For I2C LCD display
#include <ESP8266WiFi.h>      // For WiFi connectivity
#include <ESP8266WebServer.h> // For mobile control via web

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void initializeDisplay();
void updateDisplay(const String& message);
void handleWebServer();
void startRelay();
void stopRelay();
void openLid();
void closeLid();
void saveSettingsFromMobile();
void handleSetDelays();
void handleStartSystem();
void handleStopSystem();

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t DS18B20_DQ_PIN = 1; // D1 pin on NodeMCU

// Pins for switches/buttons
const uint8_t BUTTON_START_PIN = D2;   // GPIO 4
const uint8_t BUTTON_UP_PIN = D3;      // GPIO 0
const uint8_t BUTTON_DOWN_PIN = D4;    // GPIO 2
const uint8_t BUTTON_STOP_PIN = D5;    // GPIO 14

// Relay control pin
const uint8_t RELAY_PIN = D6;          // GPIO 12

// Lid sensor (optional)
const uint8_t LID_SENSOR_PIN = D7;     // GPIO 13

//***** LIBRARIES CLASS INSTANCES *****/
// DS18B20 instance
DS18B20 temperatureSensor(DS18B20_DQ_PIN);

// LCD display instance (assuming 16x2 LCD with I2C address 0x27)
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Web server for mobile control
ESP8266WebServer server(80);

// Timer variables
unsigned long startDelayMillis = 0;
unsigned long holdDelayMillis = 0;
unsigned long startDelayDuration = 5000; // default 5 seconds
unsigned long holdDelayDuration = 10000; // default 10 seconds

// State variables
bool relayOn = false;
bool lidOpened = false;
bool systemRunning = false;
unsigned long systemStartTime = 0;

// Mobile settings (to be set via web interface)
unsigned long userSetStartDelay = 5000; // default 5 seconds
unsigned long userSetHoldDelay = 10000; // default 10 seconds

// WiFi credentials
const char* ssid = ""esp12f"";
const char* password = ""12345678"";

// Function to initialize display
void initializeDisplay() {
  lcd.init();
  lcd.backlight();
  updateDisplay(""System Ready"");
}

// Function to update display message
void updateDisplay(const String& message) {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(message);
}

// Setup function
void setup() {
  // Initialize serial for debugging
  Serial.begin(9600);

  // Initialize pins
  pinMode(DS18B20_DQ_PIN, INPUT);
  pinMode(BUTTON_START_PIN, INPUT_PULLUP);
  pinMode(BUTTON_UP_PIN, INPUT_PULLUP);
  pinMode(BUTTON_DOWN_PIN, INPUT_PULLUP);
  pinMode(BUTTON_STOP_PIN, INPUT_PULLUP);
  pinMode(RELAY_PIN, OUTPUT);
  pinMode(LID_SENSOR_PIN, INPUT_PULLUP);

  // Initialize display
  initializeDisplay();

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(""."");
  }
  Serial.println(""\nWiFi connected"");
  updateDisplay(""WiFi Connected"");

  // Setup web server routes
  server.on(""/"", handleWebServer);
  server.on(""/setDelays"", handleSetDelays);
  server.on(""/start"", handleStartSystem);
  server.on(""/stop"", handleStopSystem);
  server.begin();

  // Initialize other variables
  startDelayMillis = millis();
  holdDelayMillis = millis();
}

// Loop function
void loop() {
  // Handle web server
  handleWebServer();

  // Read buttons
  if (digitalRead(BUTTON_START_PIN) == LOW) {
    // Start system
    systemRunning = true;
    systemStartTime = millis();
    updateDisplay(""System Started"");
    startRelay();
  }

  if (digitalRead(BUTTON_STOP_PIN) == LOW) {
    // Stop system
    systemRunning = false;
    updateDisplay(""System Stopped"");
    stopRelay();
  }

  if (digitalRead(BUTTON_UP_PIN) == LOW) {
    // Increase start delay
    userSetStartDelay += 1000; // increase by 1 sec
    Serial.print(""Start Delay: "");
    Serial.println(userSetStartDelay);
  }

  if (digitalRead(BUTTON_DOWN_PIN) == LOW) {
    // Decrease start delay
    if (userSetStartDelay > 1000) {
      userSetStartDelay -= 1000; // decrease by 1 sec
    }
    Serial.print(""Start Delay: "");
    Serial.println(userSetStartDelay);
  }

  // Main logic
  if (systemRunning) {
    unsigned long currentTime = millis();

    // Check if delay before starting relay
    if ((currentTime - systemStartTime) >= userSetStartDelay && !relayOn) {
      startRelay();
    }

    // After relay is on for hold delay, open lid and turn off relay
    if (relayOn && (currentTime - (systemStartTime + userSetStartDelay)) >= userSetHoldDelay) {
      openLid();
      stopRelay();
      updateDisplay(""Lid Opened"");
    }

    // Optional: monitor lid sensor or other conditions
    if (digitalRead(LID_SENSOR_PIN) == LOW && !lidOpened) {
      // Lid opened
      lidOpened = true;
      updateDisplay(""Lid is Open"");
    }
  }

  // Read temperature
  float tempC = temperatureSensor.getTempC();
  Serial.print(""Temperature: "");
  Serial.print(tempC);
  Serial.println("" C"");

  delay(100); // loop delay
}

// Handle web server requests
void handleWebServer() {
  server.handleClient();
  // Additional web interface handling can be added here
}

// Handle setting delays via web
void handleSetDelays() {
  if (server.hasArg(""startDelay"")) {
    unsigned long delayVal = server.arg(""startDelay"").toInt();
    userSetStartDelay = delayVal;
  }
  if (server.hasArg(""holdDelay"")) {
    unsigned long delayVal = server.arg(""holdDelay"").toInt();
    userSetHoldDelay = delayVal;
  }
  server.send(200, ""text/plain"", ""Delays updated"");
}

// Handle start system
void handleStartSystem() {
  systemRunning = true;
  systemStartTime = millis();
  updateDisplay(""System Started"");
  startRelay();
  server.send(200, ""text/plain"", ""System started"");
}

// Handle stop system
void handleStopSystem() {
  systemRunning = false;
  updateDisplay(""System Stopped"");
  stopRelay();
  server.send(200, ""text/plain"", ""System stopped"");
}

// Start relay
void startRelay() {
  digitalWrite(RELAY_PIN, HIGH);
  relayOn = true;
  Serial.println(""Relay ON"");
}

// Stop relay
void stopRelay() {
  digitalWrite(RELAY_PIN, LOW);
  relayOn = false;
  Serial.println(""Relay OFF"");
}

// Open lid (simulate with message)
void openLid() {
  updateDisplay(""Lid is Open"");
  lidOpened = true;
}

// Close lid (simulate)
void closeLid() {
  updateDisplay(""Lid Closed"");
  lidOpened = false;
}

// Save settings from mobile (via web)
void saveSettingsFromMobile() {
  // Parse web request to update delays
}
"
NN3M9wJV,OP MASHUP PORTAL 2,OfficialOnePesewa,JSON,Wednesday 13th of August 2025 07:14:40 AM CDT,"{
  ""loginTitle"": ""🔐 OP VIP ACCESS 🔐"",
  ""loginDescription"": ""Login to unlock your exclusive VIP features."",
  ""loginButtonText"": ""Login"",
  ""contactButtonText"": ""Contact"",
  ""expiredTitle"": ""Subscription Expired"",
  ""expiredDescription"": ""Your access expired on %s. Please renew to continue."",
  ""renewButtonText"": ""Renew Now"",
  ""renewUrl"": ""https://wa.me/233544482494"",
  ""telegramUrl"": ""https://wa.me/233544482494"",
  ""whatsappUrl"": ""https://wa.me/233544482494"",
  ""instagramUrl"": ""https://wa.me/233544482494"",
  ""users"": [
    {
      ""username"": ""OfficialOne"",
      ""password"": ""Pesewa1990"",
      ""expiryDate"": ""2026-12-12"",
      ""deviceId"": ""0c957e8f6e3dad19"",
      ""appId"": ""com.mtngh.mymtn""
    },
    {
      ""username"": ""#"",
      ""password"": ""#"",
      ""expiryDate"": ""#"",
      ""deviceId"": ""#"",
      ""appId"": ""#""
    }, 
     {
      ""username"": ""#"",
      ""password"": ""#"",
      ""expiryDate"": ""#"",
      ""deviceId"": ""#"",
      ""appId"": ""#""
   }
  ]
}"
