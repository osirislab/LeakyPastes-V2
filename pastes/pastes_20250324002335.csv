id,title,username,language,date,content
itdDRpct,2025-03-23_stats.json,rdp_snitch,JSON,Sunday 23rd of March 2025 07:18:20 PM CDT,"{
  ""ip"": {
    ""106.14.144.233"": 423,
    ""45.33.103.224"": 9,
    ""167.99.154.203"": 12,
    ""157.230.211.4"": 3,
    ""167.94.146.62"": 3,
    ""103.37.60.27"": 6,
    ""87.251.78.48"": 99,
    ""147.185.132.144"": 9,
    ""88.214.25.122"": 6,
    ""82.202.249.174"": 3,
    ""185.243.96.117"": 9,
    ""91.238.181.96"": 6,
    ""134.199.216.169"": 9,
    ""194.180.48.42"": 6,
    ""64.23.170.33"": 3,
    ""198.235.24.238"": 9,
    ""45.135.232.124"": 9,
    ""45.227.254.132"": 9,
    ""221.165.91.14"": 3,
    ""58.218.199.219"": 12,
    ""188.166.250.11"": 3,
    ""107.178.96.84"": 3,
    ""205.210.31.67"": 9,
    ""178.63.252.130"": 3,
    ""142.93.108.220"": 3,
    ""152.32.183.13"": 3,
    ""147.185.132.87"": 9
  },
  ""asn"": {
    ""AS37963"": 423,
    ""AS63949"": 9,
    ""AS14061"": 24,
    ""AS398705"": 3,
    ""AS149147"": 6,
    ""AS199785"": 99,
    ""AS396982"": 36,
    ""AS35042"": 6,
    ""AS49505"": 3,
    ""AS48693"": 9,
    ""AS49434"": 6,
    ""Unknown"": 9,
    ""AS201814"": 6,
    ""AS198953"": 9,
    ""AS267784"": 9,
    ""AS4766"": 3,
    ""AS4134"": 12,
    ""AS53755"": 3,
    ""AS24940"": 3,
    ""AS135377"": 3
  },
  ""isp"": {
    ""Hangzhou Alibaba Advertising Co"": 423,
    ""Akamai Technologies, Inc."": 9,
    ""DigitalOcean, LLC"": 24,
    ""Censys, Inc."": 3,
    ""Gofiber Software Technology Company Limited"": 6,
    ""Cloud Hosting Solutions, Limited."": 99,
    ""Google LLC"": 36,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""JSC Selectel"": 3,
    ""Rices Privately owned enterprise"": 9,
    ""Datacenter location PAR1 France"": 6,
    ""DigitalOcean"": 9,
    ""MEVSPACE sp. z o.o."": 6,
    ""Proton66 OOO"": 9,
    ""Flyservers S.A."": 9,
    ""Korea Telecom"": 3,
    ""Chinanet"": 12,
    ""Input Output Flood LLC"": 3,
    ""Hetzner Online GmbH"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3
  },
  ""org"": {
    ""Aliyun Computing Co., LTD"": 423,
    ""Linode"": 9,
    ""Digital Ocean"": 12,
    ""DigitalOcean, LLC"": 18,
    ""Censys, Inc."": 3,
    ""GOFIBER-SOFTWARE"": 6,
    ""Cloud Hosting Solutions, Limited"": 99,
    ""Palo Alto Networks, Inc"": 36,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""Unknown"": 3,
    ""Rices Privately owned enterprise"": 9,
    ""HostSlick"": 6,
    ""Proton66 LLC"": 9,
    ""Xwin Universal LTD"": 9,
    ""Kornet"": 3,
    ""Chinanet JS"": 12,
    ""Digitalocean"": 3,
    ""Input Output Flood LLC"": 3,
    ""Rasoul Shamaei"": 3,
    ""Ucloud Information Technology"": 3
  },
  ""regionName"": {
    ""Shanghai"": 423,
    ""Georgia"": 9,
    ""New Jersey"": 15,
    ""Hesse"": 6,
    ""Ho Chi Minh"": 6,
    ""Moscow"": 108,
    ""California"": 39,
    ""Kowloon City"": 6,
    ""St.-Petersburg"": 3,
    ""New York"": 18,
    ""\u00cele-de-France"": 6,
    ""Bavaria"": 6,
    ""Vilnius"": 9,
    ""Incheon"": 3,
    ""Jiangsu"": 12,
    ""South West"": 3,
    ""Arizona"": 3,
    ""Saxony"": 3,
    ""Virginia"": 3
  },
  ""country"": {
    ""China"": 435,
    ""United States"": 87,
    ""Germany"": 15,
    ""Vietnam"": 6,
    ""Russia"": 111,
    ""Hong Kong"": 6,
    ""France"": 6,
    ""Lithuania"": 9,
    ""South Korea"": 3,
    ""Singapore"": 3
  },
  ""account"": {
    ""hello"": 567,
    ""lkomzma7"": 9,
    ""szgf1oa7"": 12,
    ""beio"": 3,
    ""(empty)"": 9,
    ""GBmBOfeEB"": 3,
    ""tkYXeR"": 3,
    ""mmHvGM"": 3,
    ""Test"": 15,
    ""Administr"": 9,
    ""RsDrqgVLS"": 3,
    ""JQZKiF"": 3,
    ""vSvpUG"": 3,
    ""Domain"": 18,
    ""ppnJQIfSj"": 3,
    ""WVWUNS"": 3,
    ""cEtblk"": 3,
    ""Administrator"": 3,
    ""YNlAjAIUN"": 3,
    ""BoEPKH"": 3,
    ""dSyWFX"": 3
  },
  ""keyboard"": {
    ""Unknown"": 681
  },
  ""client_build"": {
    ""Unknown"": 681
  },
  ""client_name"": {
    ""Unknown"": 681
  },
  ""ip_type"": {
    ""hosting & proxy"": 429,
    ""hosting"": 90,
    ""Unknown"": 150,
    ""proxy"": 12
  }
}"
q22DBCbF,2025-03-23_stats.json,rdp_snitch,JSON,Sunday 23rd of March 2025 07:16:11 PM CDT,"{
  ""ip"": {
    ""106.14.144.233"": 282,
    ""45.33.103.224"": 6,
    ""167.99.154.203"": 8,
    ""157.230.211.4"": 2,
    ""167.94.146.62"": 2,
    ""103.37.60.27"": 4,
    ""87.251.78.48"": 66,
    ""147.185.132.144"": 6,
    ""88.214.25.122"": 4,
    ""82.202.249.174"": 2,
    ""185.243.96.117"": 6,
    ""91.238.181.96"": 4,
    ""134.199.216.169"": 6,
    ""194.180.48.42"": 4,
    ""64.23.170.33"": 2,
    ""198.235.24.238"": 6,
    ""45.135.232.124"": 6,
    ""45.227.254.132"": 6,
    ""221.165.91.14"": 2,
    ""58.218.199.219"": 8,
    ""188.166.250.11"": 2,
    ""107.178.96.84"": 2,
    ""205.210.31.67"": 6,
    ""178.63.252.130"": 2,
    ""142.93.108.220"": 2,
    ""152.32.183.13"": 2,
    ""147.185.132.87"": 6
  },
  ""asn"": {
    ""AS37963"": 282,
    ""AS63949"": 6,
    ""AS14061"": 16,
    ""AS398705"": 2,
    ""AS149147"": 4,
    ""AS199785"": 66,
    ""AS396982"": 24,
    ""AS35042"": 4,
    ""AS49505"": 2,
    ""AS48693"": 6,
    ""AS49434"": 4,
    ""Unknown"": 6,
    ""AS201814"": 4,
    ""AS198953"": 6,
    ""AS267784"": 6,
    ""AS4766"": 2,
    ""AS4134"": 8,
    ""AS53755"": 2,
    ""AS24940"": 2,
    ""AS135377"": 2
  },
  ""isp"": {
    ""Hangzhou Alibaba Advertising Co"": 282,
    ""Akamai Technologies, Inc."": 6,
    ""DigitalOcean, LLC"": 16,
    ""Censys, Inc."": 2,
    ""Gofiber Software Technology Company Limited"": 4,
    ""Cloud Hosting Solutions, Limited."": 66,
    ""Google LLC"": 24,
    ""NOC EMAIL: noc@one-host.net"": 4,
    ""JSC Selectel"": 2,
    ""Rices Privately owned enterprise"": 6,
    ""Datacenter location PAR1 France"": 4,
    ""DigitalOcean"": 6,
    ""MEVSPACE sp. z o.o."": 4,
    ""Proton66 OOO"": 6,
    ""Flyservers S.A."": 6,
    ""Korea Telecom"": 2,
    ""Chinanet"": 8,
    ""Input Output Flood LLC"": 2,
    ""Hetzner Online GmbH"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2
  },
  ""org"": {
    ""Aliyun Computing Co., LTD"": 282,
    ""Linode"": 6,
    ""Digital Ocean"": 8,
    ""DigitalOcean, LLC"": 12,
    ""Censys, Inc."": 2,
    ""GOFIBER-SOFTWARE"": 4,
    ""Cloud Hosting Solutions, Limited"": 66,
    ""Palo Alto Networks, Inc"": 24,
    ""ThinkTech Technology Industrial CO. Limited"": 8,
    ""Unknown"": 2,
    ""Rices Privately owned enterprise"": 6,
    ""HostSlick"": 4,
    ""Proton66 LLC"": 6,
    ""Xwin Universal LTD"": 6,
    ""Kornet"": 2,
    ""Chinanet JS"": 8,
    ""Digitalocean"": 2,
    ""Input Output Flood LLC"": 2,
    ""Rasoul Shamaei"": 2,
    ""Ucloud Information Technology"": 2
  },
  ""regionName"": {
    ""Shanghai"": 282,
    ""Georgia"": 6,
    ""New Jersey"": 10,
    ""Hesse"": 4,
    ""Ho Chi Minh"": 4,
    ""Moscow"": 72,
    ""California"": 26,
    ""Kowloon City"": 4,
    ""St.-Petersburg"": 2,
    ""New York"": 12,
    ""\u00cele-de-France"": 4,
    ""Bavaria"": 4,
    ""Vilnius"": 6,
    ""Incheon"": 2,
    ""Jiangsu"": 8,
    ""South West"": 2,
    ""Arizona"": 2,
    ""Saxony"": 2,
    ""Virginia"": 2
  },
  ""country"": {
    ""China"": 290,
    ""United States"": 58,
    ""Germany"": 10,
    ""Vietnam"": 4,
    ""Russia"": 74,
    ""Hong Kong"": 4,
    ""France"": 4,
    ""Lithuania"": 6,
    ""South Korea"": 2,
    ""Singapore"": 2
  },
  ""account"": {
    ""hello"": 378,
    ""lkomzma7"": 6,
    ""szgf1oa7"": 8,
    ""beio"": 2,
    ""(empty)"": 6,
    ""GBmBOfeEB"": 2,
    ""tkYXeR"": 2,
    ""mmHvGM"": 2,
    ""Test"": 10,
    ""Administr"": 6,
    ""RsDrqgVLS"": 2,
    ""JQZKiF"": 2,
    ""vSvpUG"": 2,
    ""Domain"": 12,
    ""ppnJQIfSj"": 2,
    ""WVWUNS"": 2,
    ""cEtblk"": 2,
    ""Administrator"": 2,
    ""YNlAjAIUN"": 2,
    ""BoEPKH"": 2,
    ""dSyWFX"": 2
  },
  ""keyboard"": {
    ""Unknown"": 454
  },
  ""client_build"": {
    ""Unknown"": 454
  },
  ""client_name"": {
    ""Unknown"": 454
  },
  ""ip_type"": {
    ""hosting & proxy"": 286,
    ""hosting"": 60,
    ""Unknown"": 100,
    ""proxy"": 8
  }
}"
qtL70WTT,2025-03-23_stats.json,rdp_snitch,JSON,Sunday 23rd of March 2025 07:15:08 PM CDT,"{
  ""ip"": {
    ""106.14.144.233"": 141,
    ""45.33.103.224"": 3,
    ""167.99.154.203"": 4,
    ""157.230.211.4"": 1,
    ""167.94.146.62"": 1,
    ""103.37.60.27"": 2,
    ""87.251.78.48"": 33,
    ""147.185.132.144"": 3,
    ""88.214.25.122"": 2,
    ""82.202.249.174"": 1,
    ""185.243.96.117"": 3,
    ""91.238.181.96"": 2,
    ""134.199.216.169"": 3,
    ""194.180.48.42"": 2,
    ""64.23.170.33"": 1,
    ""198.235.24.238"": 3,
    ""45.135.232.124"": 3,
    ""45.227.254.132"": 3,
    ""221.165.91.14"": 1,
    ""58.218.199.219"": 4,
    ""188.166.250.11"": 1,
    ""107.178.96.84"": 1,
    ""205.210.31.67"": 3,
    ""178.63.252.130"": 1,
    ""142.93.108.220"": 1,
    ""152.32.183.13"": 1,
    ""147.185.132.87"": 3
  },
  ""asn"": {
    ""AS37963"": 141,
    ""AS63949"": 3,
    ""AS14061"": 8,
    ""AS398705"": 1,
    ""AS149147"": 2,
    ""AS199785"": 33,
    ""AS396982"": 12,
    ""AS35042"": 2,
    ""AS49505"": 1,
    ""AS48693"": 3,
    ""AS49434"": 2,
    ""Unknown"": 3,
    ""AS201814"": 2,
    ""AS198953"": 3,
    ""AS267784"": 3,
    ""AS4766"": 1,
    ""AS4134"": 4,
    ""AS53755"": 1,
    ""AS24940"": 1,
    ""AS135377"": 1
  },
  ""isp"": {
    ""Hangzhou Alibaba Advertising Co"": 141,
    ""Akamai Technologies, Inc."": 3,
    ""DigitalOcean, LLC"": 8,
    ""Censys, Inc."": 1,
    ""Gofiber Software Technology Company Limited"": 2,
    ""Cloud Hosting Solutions, Limited."": 33,
    ""Google LLC"": 12,
    ""NOC EMAIL: noc@one-host.net"": 2,
    ""JSC Selectel"": 1,
    ""Rices Privately owned enterprise"": 3,
    ""Datacenter location PAR1 France"": 2,
    ""DigitalOcean"": 3,
    ""MEVSPACE sp. z o.o."": 2,
    ""Proton66 OOO"": 3,
    ""Flyservers S.A."": 3,
    ""Korea Telecom"": 1,
    ""Chinanet"": 4,
    ""Input Output Flood LLC"": 1,
    ""Hetzner Online GmbH"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1
  },
  ""org"": {
    ""Aliyun Computing Co., LTD"": 141,
    ""Linode"": 3,
    ""Digital Ocean"": 4,
    ""DigitalOcean, LLC"": 6,
    ""Censys, Inc."": 1,
    ""GOFIBER-SOFTWARE"": 2,
    ""Cloud Hosting Solutions, Limited"": 33,
    ""Palo Alto Networks, Inc"": 12,
    ""ThinkTech Technology Industrial CO. Limited"": 4,
    ""Unknown"": 1,
    ""Rices Privately owned enterprise"": 3,
    ""HostSlick"": 2,
    ""Proton66 LLC"": 3,
    ""Xwin Universal LTD"": 3,
    ""Kornet"": 1,
    ""Chinanet JS"": 4,
    ""Digitalocean"": 1,
    ""Input Output Flood LLC"": 1,
    ""Rasoul Shamaei"": 1,
    ""Ucloud Information Technology"": 1
  },
  ""regionName"": {
    ""Shanghai"": 141,
    ""Georgia"": 3,
    ""New Jersey"": 5,
    ""Hesse"": 2,
    ""Ho Chi Minh"": 2,
    ""Moscow"": 36,
    ""California"": 13,
    ""Kowloon City"": 2,
    ""St.-Petersburg"": 1,
    ""New York"": 6,
    ""\u00cele-de-France"": 2,
    ""Bavaria"": 2,
    ""Vilnius"": 3,
    ""Incheon"": 1,
    ""Jiangsu"": 4,
    ""South West"": 1,
    ""Arizona"": 1,
    ""Saxony"": 1,
    ""Virginia"": 1
  },
  ""country"": {
    ""China"": 145,
    ""United States"": 29,
    ""Germany"": 5,
    ""Vietnam"": 2,
    ""Russia"": 37,
    ""Hong Kong"": 2,
    ""France"": 2,
    ""Lithuania"": 3,
    ""South Korea"": 1,
    ""Singapore"": 1
  },
  ""account"": {
    ""hello"": 189,
    ""lkomzma7"": 3,
    ""szgf1oa7"": 4,
    ""beio"": 1,
    ""(empty)"": 3,
    ""GBmBOfeEB"": 1,
    ""tkYXeR"": 1,
    ""mmHvGM"": 1,
    ""Test"": 5,
    ""Administr"": 3,
    ""RsDrqgVLS"": 1,
    ""JQZKiF"": 1,
    ""vSvpUG"": 1,
    ""Domain"": 6,
    ""ppnJQIfSj"": 1,
    ""WVWUNS"": 1,
    ""cEtblk"": 1,
    ""Administrator"": 1,
    ""YNlAjAIUN"": 1,
    ""BoEPKH"": 1,
    ""dSyWFX"": 1
  },
  ""keyboard"": {
    ""Unknown"": 227
  },
  ""client_build"": {
    ""Unknown"": 227
  },
  ""client_name"": {
    ""Unknown"": 227
  },
  ""ip_type"": {
    ""hosting & proxy"": 143,
    ""hosting"": 30,
    ""Unknown"": 50,
    ""proxy"": 4
  }
}"
xAAgG0Xm,Untitled,FleZ,JavaScript,Sunday 23rd of March 2025 07:13:05 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/936/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
drFv9SDR,Untitled,FleZ,JavaScript,Sunday 23rd of March 2025 06:57:42 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/259/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
t2ktg7hQ,Untitled,lewis_FEUP,Lua,Sunday 23rd of March 2025 06:55:22 PM CDT,"---
--- Made for the Advanced Peripherals documentation - Can be used in production
--- Created by Srendi - https://github.com/SirEndii
--- DateTime: 24.12.2023 (No)
--- Link: tbd
---

mon = peripheral.find(""monitor"")
me = peripheral.find(""meBridge"")

data = {
    drives = 0,
    totalBytes = 0,
    usedBytes = 0,
    totalCells = 0,
}

local label = ""ME Drives""

local monX, monY

os.loadAPI(""medrives/api/bars.lua"")

function prepare()
    mon.clear()
    monX, monY = mon.getSize()
    if monX < 38 or monY < 25 then
        error(""Monitor is too small, we need a size of 39x and 26y minimum."")
    end
    mon.setPaletteColor(colors.red, 0xba2525)
    mon.setBackgroundColor(colors.black)
    mon.setCursorPos((monX/2)-(#label/2),1)
    mon.setTextScale(1)
    mon.write(label)
    mon.setCursorPos(1,1)
    drawBox(2, monX - 1, 3, monY - 10, ""Drives"", colors.gray, colors.lightGray)
    drawBox(2, monX - 1, monY - 8, monY - 1, ""Stats"", colors.gray, colors.lightGray)
    addBars()
end

function addBars()
    drives = me.listCells()
    data.drives = #drives
    for i=1, #drives do
        x = 3*i
        full = drives[i].totalBytes
        print(full)
        print(drives[i].usedBytes)
        bars.add(""""..i,""ver"", full, drives[i].usedBytes, 1+x, 5, 1, monY - 16, colors.red, colors.green)
        mon.setCursorPos(x+1, monY - 11)
        --mon.write(string.format(i))
        data.totalBytes = data.totalBytes + drives[i].totalBytes
        data.usedBytes = data.usedBytes + drives[i].usedBytes
        data.totalCells = data.totalCells + #drives[i].cells
    end
    bars.construct(mon)
    bars.screen()
end


function drawBox(xMin, xMax, yMin, yMax, title, bcolor, tcolor)
    mon.setBackgroundColor(bcolor)
    for xPos = xMin, xMax, 1 do
        mon.setCursorPos(xPos, yMin)
        mon.write("" "")
    end
    for yPos = yMin, yMax, 1 do
        mon.setCursorPos(xMin, yPos)
        mon.write("" "")
        mon.setCursorPos(xMax, yPos)
        mon.write("" "")

    end
    for xPos = xMin, xMax, 1 do
        mon.setCursorPos(xPos, yMax)
        mon.write("" "")
    end
    mon.setCursorPos(xMin+2, yMin)
    mon.setBackgroundColor(colors.black)
    mon.setTextColor(tcolor)
    mon.write("" "")
    mon.write(title)
    mon.write("" "")
    mon.setTextColor(colors.white)
end

function clear(xMin,xMax, yMin, yMax)
    mon.setBackgroundColor(colors.black)
    for xPos = xMin, xMax, 1 do
        for yPos = yMin, yMax, 1 do
            mon.setCursorPos(xPos, yPos)
            mon.write("" "")
        end
    end
end

function getUsage()
    return (data.usedBytes * 100) / data.totalBytes
end

function comma_value(n) -- credit http://richard.warburton.it
    local left,num,right = string.match(n,'^([^%d]*%d)(%d*)(.-)$')
    return left..(num:reverse():gsub('(%d%d%d)','%1,'):reverse())..right
end

function roundToDecimal(num, decimalPlaces)
    local mult = 10^(decimalPlaces or 0)
    return math.floor(num * mult + 0.5) / mult
end

function updateStats()
    newDrives = me.listDrives()
    data.totalBytes = 0;
    data.usedBytes = 0;
    data.totalCells = 0;

    if newDrives == nil then
        data.drives = 0
        print(""The given table is nil, but why?"")
        return
    end

    if newDrives == nil or #newDrives == 0 then
        clear(3,monX - 3,4,monY - 12)
        mon.setCursorPos(4, 5);
        mon.write(""Zero drives are better than -1 drives I guess"")
    else 
        for i=1, #newDrives do
            data.totalBytes = data.totalBytes + newDrives[i].totalBytes
            data.usedBytes = data.usedBytes + newDrives[i].usedBytes
            data.totalCells = data.totalCells + #newDrives[i].cells

            bars.set(""""..i,""cur"", newDrives[i].usedBytes)
            bars.set(""""..i,""max"", newDrives[i].totalBytes)
        end
    end
    bars.screen()

    clear(3,monX - 3,monY - 5,monY - 2)
    print(""Drives: "".. data.drives)
    mon.setCursorPos(4,monY-6)
    mon.write(""Drives: "".. data.drives)
    mon.setCursorPos(4,monY-5)
    mon.write(""Full: "".. roundToDecimal(getUsage(), 2) ..""%"")
    mon.setCursorPos(4,monY-4)
    mon.write(""Cells: "".. data.totalCells)
    mon.setCursorPos(4,monY-3)
    mon.write(""Bytes(Total|Used):"")
    mon.setCursorPos(23,monY-3)
    mon.write(comma_value(data.totalBytes) .."" | "".. comma_value(data.usedBytes))

    if data.drives ~= #newDrives then
        clear(3,monX - 3,4,monY - 12)
        mon.setCursorPos(4, 5);
        mon.write(""Found new Drive... Rebooting"")
        shell.run(""reboot"")
    end
end

prepare()

while true do
    updateStats()
    sleep(0.5)
end"
80EgwRW7,Untitled,FleZ,JavaScript,Sunday 23rd of March 2025 06:42:19 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/248/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
4kNvMRyD,Untitled,FleZ,JavaScript,Sunday 23rd of March 2025 06:26:42 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/020/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
zPStk08s,SQL for Beginners (The Essentials Through Practice),f0f077,SQL,Sunday 23rd of March 2025 06:20:34 PM CDT,"SQL for Beginners (The Essentials Through Practice)
Master the essentials of SQL language to extract data from databases (concrete Marketing examples)
What you will learn
Extract data from any database in SQL
All SQL basics: displaying columns from a table, creating conditions, sorting data
Group data to perform calculations on each group
Combining tables using the JOIN command
for more:https://short-jambo.ink/NAI6P"
K7vcDUU6,Become an SQL Expert - The Complete Course,f0f077,SQL,Sunday 23rd of March 2025 06:16:57 PM CDT,"Become an SQL Expert - The Complete Course
SQL, Big Query & PostgreSQL: Analysis, Databases, Python, Power BI for optimal Data Science.
What you will learn
Fundamentals of SQL and Databases
Data Query and Analysis
Creation and Management of Databases
Advanced SQL features (procedures, subqueries, triggers)
for more:https://short-jambo.ink/6yIh"
hSrhemyd,Untitled,FleZ,JavaScript,Sunday 23rd of March 2025 06:10:34 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/219/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
pycJTtTa,Untitled,FleZ,JavaScript,Sunday 23rd of March 2025 05:55:10 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/790/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
0LdzPykn,遥控跳船 信号接收器 原型,jaklsfjlsak,Lua,Sunday 23rd of March 2025 05:46:44 PM CDT,"local ship = peripheral.find(""warpdriveShipController"")

local ship_front, ship_right, ship_up = ship.dim_positive()
local ship_back, ship_left, ship_down = ship.dim_negative()
local ship_isInHyper = ship.isInHyperspace()
local ship_movement = { ship.movement() }
local ship_rotationSteps = ship.rotationSteps()

-- Open rednet on the modem side (adjust ""left"" as needed)
rednet.open(""top"")

print(""Waiting for coordinate broadcasts when redstone is active on the front..."")

while true do
    -- Only process messages when redstone signal on the ""front"" is on.
    if redstone.getInput(""front"") then
        -- Use a timeout (0.5 seconds) so the call doesn't block indefinitely and allows rechecking the redstone state.
        local senderID, message, protocol = rednet.receive(""coordBroadcast"", 0.5)
        
        if senderID then
            if message and message.x and message.y and message.z then
                print(""Received coordinates from computer "" .. senderID .. "":"")
                print(""X: "" .. message.x .. "", Y: "" .. message.y .. "", Z: "" .. message.z)

            local lastLx = tonumber(message.x)
            local lastLy = tonumber(message.y)  -- if needed for future use
            local lastLz = tonumber(message.z)
            
            print(""Jumping to X:"" .. lastLx .. "", Z:"" .. lastLz)
            
            local rx, ry, rz = ship.getOrientation()
            local minForwardBack = math.abs(ship_front + ship_back + 1)
            local minLeftRight = math.abs(ship_left + ship_right + 1)
            local mx, my, mz = ship.getLocalPosition()
            
            local dx = lastLx - mx
            local dz = lastLz - mz
            
            local forwardBackMov = 0
            local leftRightMov = 0
            
            -- Determine movement based on ship's orientation.
            if rx == 1 then
                forwardBackMov = dx
                leftRightMov = dz
            elseif rx == -1 then
                forwardBackMov = -dx
                leftRightMov = -dz
            elseif rz == 1 then
                forwardBackMov = dz
                leftRightMov = -dx
            elseif rz == -1 then
                forwardBackMov = -dz
                leftRightMov = dx
            end
            
            if math.abs(forwardBackMov) < minForwardBack and math.abs(leftRightMov) < minLeftRight then
                print(""The movement is too small!"")
            else
                ship.movement(forwardBackMov, 0, leftRightMov)
                ship.rotationSteps(0)
                ship.command(""MANUAL"", true)
            end

            
            
            else
                print(""Received invalid data from computer "" .. senderID)
            end
        end
    else
        -- Optionally, you can print a message when redstone is off or simply sleep quietly.
        -- print(""Redstone is off on the front; not receiving messages."")
        sleep(0.1)
    end
end
"
nYfB08Ar,Untitled,FleZ,JavaScript,Sunday 23rd of March 2025 05:39:46 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/624/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
FJt5c2Xw,Untitled,FleZ,JavaScript,Sunday 23rd of March 2025 05:24:23 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/611/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
TpjYQkK4,Untitled,lewis_FEUP,Lua,Sunday 23rd of March 2025 05:22:16 PM CDT,"local detector = peripheral.find(""energyDetector"")
local monitor = peripheral.find(""monitor"")
local meBridge = peripheral.find(""meBridge"")

repeat
  monitor.clear()
  monitor.setCursorPos(1, 1)
  monitor.write(""Current transfer rate: "" .. detector.getTransferRate() .. "" FE/t"")
  monitor.setCursorPos(1, 2)
  monitor.write(""Ae2 System:"")
  monitor.setCursorPos(1, 3)
  monitor.write(""Max Energy: "" .. meBridge.getEnergyStorage() * 0.55)
  monitor.setCursorPos(1, 4)
  monitor.write(""Current Energy: "" .. meBridge.getEnergyUsage())
  monitor.setCursorPos(1, 5)
  meItem = meBridge.getItem({name  = ""minecraft:gold_ingot""})
  monitor.setCursorPos(1, 6)
  monitor.write(""Current Energy: "" .. meItem.name .. """")
  monitor.write(""Current Energy: "" .. meItem.displayName  .. """")
  monitor.setCursorPos(1, 7)
  os.sleep(1)
until false
"
w0aDXtdm,Untitled,FleZ,JavaScript,Sunday 23rd of March 2025 05:09:00 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/799/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
UFD0iCEZ,Untitled,FleZ,JavaScript,Sunday 23rd of March 2025 04:53:36 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/474/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
6qKzTXNk,CastHelper,Enderlook,C#,Sunday 23rd of March 2025 04:45:40 PM CDT,"public abstract class CasterHelper<TFrom, TTo>
#if NET9_0_OR_GREATER
    where TFrom : allows ref struct
    where TTo : allows ref struct
#endif
{
#if NET9_0_OR_GREATER
    private static readonly CasterHelper<TFrom, TTo>? Impl = (typeof(TFrom).IsByRefLike || typeof(TTo).IsByRefLike || (typeof(TFrom).IsValueType && typeof(TTo) == typeof(TFrom)))
        ? null
        : (CasterHelper<TFrom, TTo>?)Activator.CreateInstance(typeof(CastHelperImplementation<,>).MakeGenericType(new Type[] { typeof(TFrom), typeof(TTo) }));
#endif

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [return: NotNullIfNotNull(nameof(from))]
    public static TTo Cast(scoped in TFrom from)
    {
        if (typeof(TFrom).IsValueType && typeof(TFrom) == typeof(TTo))
        {
#if NET9_0_OR_GREATER
            return Unsafe.BitCast<TFrom, TTo>(from);
#else
            return Unsafe.As<TFrom, TTo>(ref Unsafe.AsRef(in from));
#endif
        }

#if NET9_0_OR_GREATER
        if (typeof(TFrom).IsByRefLike || typeof(TTo).IsByRefLike)
            Helper.ThrowInvalidCastException();
#endif

#if NET9_0_OR_GREATER
        return Impl!.Cast_(from);
#else
        return (TTo)(object)from;
#endif
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool TryCast(scoped in TFrom from, out TTo? to)
    {
        if (typeof(TFrom).IsValueType && typeof(TFrom) == typeof(TTo))
        {
#if NET9_0_OR_GREATER
            to = Unsafe.BitCast<TFrom, TTo>(from);
#else
            to = Unsafe.As<TFrom, TTo>(ref Unsafe.AsRef(in from));
#endif
            return true;
        }

#if NET9_0_OR_GREATER
        if (typeof(TFrom).IsByRefLike || typeof(TTo).IsByRefLike)
        {
            to = default;
            return false;
        }
#endif

#if NET9_0_OR_GREATER
        return Impl!.TryCast_(from, out to);
#else
        if (from is TTo v)
        {
            to = v;
            return true;
        }
        to = default;
        return !typeof(TTo).IsValueType && from is null;
#endif
    }

#if NET9_0_OR_GREATER
    [return: NotNullIfNotNull(nameof(from))]
    protected abstract TTo Cast_(scoped in TFrom from);

    protected abstract bool TryCast_(scoped in TFrom from, out TTo to);
#endif
}

#if NET9_0_OR_GREATER
internal sealed class CastHelperImplementation<TFrom, TTo> : CasterHelper<TFrom, TTo>
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    protected override TTo Cast_(scoped in TFrom from) => (TTo)(object)from;

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    protected override bool TryCast_(scoped in TFrom from, out TTo to)
    {
        if (from is TTo v)
        {
            to = v;
            return true;
        }
        to = default;
        return !typeof(TTo).IsValueType && from is null;
    }
}
#endif"
tyeM1pnM,Untitled,FleZ,JavaScript,Sunday 23rd of March 2025 04:38:03 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/228/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
WLU7KSHH,CF1618E,pb_jiang,C++,Sunday 23rd of March 2025 04:38:02 PM CDT,"// Problem: E. Singers' Tour
// Contest: Codeforces - Codeforces Round 760 (Div. 3)
// URL: https://codeforces.com/problemset/problem/1618/E
// Memory Limit: 256 MB
// Time Limit: 2000 ms
//
// Powered by CP Editor (https://cpeditor.org)

#include <assert.h>
#include <bits/stdc++.h>
using namespace std;
#ifndef __DEBUG__
#define dbg(...) 42
#endif
template <class T> using mpq = priority_queue<T, vector<T>, greater<T>>;

using ll = long long;
using a2l = array<ll, 2>;
using pll = pair<ll, ll>;
using vl = vector<ll>;

void solve()
{
    ll n;
    cin >> n;
    vl bs(n);
    for (auto &x : bs)
        cin >> x;
    vl as(n), cs(n), vs(n);
    for (ll i = 0; i < n; ++i)
        as[i] = bs[i] - bs[(i - 1 + n) % n];
    for (ll i = 0; i < n; ++i)
        cs[i] = as[i] - as[(i - 1 + n) % n];
    for (auto x : cs) {
        if (x % n) {
            dbg(x);
            cout << ""NO\n"";
            return;
        }
    }
    for (ll i = 1; i < n; ++i)
        vs[i] = vs[i - 1] - cs[i] / n;
    ll final = 0, factor = n * (n + 1) / 2;
    for (ll i = 0; i < n; ++i)
        final += ((n - i) % n + 1) * vs[i];
    if ((final - bs[0]) % factor) {
        dbg(final, bs[0], factor);
        cout << ""NO\n"";
        return;
    }
    ll d = (final - bs[0]) / factor;
    for (ll i = 0; i < n; ++i) {
        vs[i] -= d;
        if (vs[i] <= 0) {
            dbg(vs[i]);
            cout << ""NO\n"";
            return;
        }
    }
    cout << ""YES\n"";
    for (auto x : vs)
        cout << x << ' ';
    cout << '\n';
}

int main(int argc, char **argv)
{
    ll t;
    cin >> t;
    while (t--)
        solve();
    return 0;
};
"
tRuB9zkg,Untitled,FleZ,JavaScript,Sunday 23rd of March 2025 04:22:40 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/314/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
B0kgMtc7,Aus Post Paste V2,Evenstephen,JSON,Sunday 23rd of March 2025 04:19:02 PM CDT,"
Packing Details:

Array
(
    [1] => Array
        (
            [weight] => 5.35
            [length] => 66.5
            [height] => 16
            [width] => 29
            [quantity] => 1
            [name] => Box #11
            [postcode] => 3088
        )

)

Packing Request:

https://digitalapi.auspost.com.au/postage/parcel/domestic/calculate.json?from_postcode=3088&to_postcode=3088&length=66.5&width=29&height=16&weight=5.35&service_code=AUS_PARCEL_REGULAR

Australia Post RESPONSE:

stdClass Object
(
    [postage_result] => stdClass Object
        (
            [service] => Parcel Post
            [delivery_time] => Delivered in 2-3 business days
            [total_cost] => 23.45
            [costs] => stdClass Object
                (
                    [cost] => stdClass Object
                        (
                            [item] => Parcel Post
                            [cost] => 23.45
                        )

                )

        )

)

Packing Request:

https://digitalapi.auspost.com.au/postage/parcel/domestic/calculate.json?from_postcode=3088&to_postcode=3088&length=66.5&width=29&height=16&weight=5.35&service_code=AUS_PARCEL_EXPRESS

Australia Post RESPONSE:

stdClass Object
(
    [postage_result] => stdClass Object
        (
            [service] => Express Post
            [delivery_time] => Guaranteed Next Business Day within the Express Post network (If posted on any business day Monday to Friday in accordance with the conditions set out on the item).
            [total_cost] => 32.25
            [costs] => stdClass Object
                (
                    [cost] => stdClass Object
                        (
                            [item] => Express Post
                            [cost] => 32.25
                        )

                )

        )

)

Packing Details:

Array
(
    [1] => Array
        (
            [weight] => 10.7
            [length] => 66.5
            [height] => 29
            [width] => 32
            [quantity] => 2
            [name] => Box #19
            [postcode] => 3088
        )

)

Packing Request:

https://digitalapi.auspost.com.au/postage/parcel/domestic/calculate.json?from_postcode=3088&to_postcode=3088&length=66.5&width=32&height=29&weight=10.7&service_code=AUS_PARCEL_REGULAR

Australia Post RESPONSE:

stdClass Object
(
    [postage_result] => stdClass Object
        (
            [service] => Parcel Post
            [delivery_time] => Delivered in 2-3 business days
            [total_cost] => 25.05
            [costs] => stdClass Object
                (
                    [cost] => stdClass Object
                        (
                            [item] => Parcel Post
                            [cost] => 25.05
                        )

                )

        )

)

Packing Request:

https://digitalapi.auspost.com.au/postage/parcel/domestic/calculate.json?from_postcode=3088&to_postcode=3088&length=66.5&width=32&height=29&weight=10.7&service_code=AUS_PARCEL_EXPRESS

Australia Post RESPONSE:

stdClass Object
(
    [postage_result] => stdClass Object
        (
            [service] => Express Post
            [delivery_time] => Guaranteed Next Business Day within the Express Post network (If posted on any business day Monday to Friday in accordance with the conditions set out on the item).
            [total_cost] => 34.65
            [costs] => stdClass Object
                (
                    [cost] => stdClass Object
                        (
                            [item] => Express Post
                            [cost] => 34.65
                        )

                )

        )

)

Packing Details:

Array
(
    [1] => Array
        (
            [weight] => 15.9
            [length] => 66.5
            [height] => 38
            [width] => 40.5
            [quantity] => 3
            [name] => Box #19
            [postcode] => 3088
        )

)

Packing Request:

https://digitalapi.auspost.com.au/postage/parcel/domestic/calculate.json?from_postcode=3088&to_postcode=3088&length=66.5&width=40.5&height=38&weight=15.9&service_code=AUS_PARCEL_REGULAR

Australia Post RESPONSE:

stdClass Object
(
    [postage_result] => stdClass Object
        (
            [service] => Parcel Post
            [delivery_time] => Delivered in 2-3 business days
            [total_cost] => 27.05
            [costs] => stdClass Object
                (
                    [cost] => stdClass Object
                        (
                            [item] => Parcel Post
                            [cost] => 27.05
                        )

                )

        )

)

Packing Request:

https://digitalapi.auspost.com.au/postage/parcel/domestic/calculate.json?from_postcode=3088&to_postcode=3088&length=66.5&width=40.5&height=38&weight=15.9&service_code=AUS_PARCEL_EXPRESS

Australia Post RESPONSE:

stdClass Object
(
    [postage_result] => stdClass Object
        (
            [service] => Express Post
            [delivery_time] => Guaranteed Next Business Day within the Express Post network (If posted on any business day Monday to Friday in accordance with the conditions set out on the item).
            [total_cost] => 37.65
            [costs] => stdClass Object
                (
                    [cost] => stdClass Object
                        (
                            [item] => Express Post
                            [cost] => 37.65
                        )

                )

        )

)

Have a coupon? Click here to enter your code	
Packing Details:

Array
(
    [1] => Array
        (
            [weight] => 15.9
            [length] => 66.5
            [height] => 38
            [width] => 40.5
            [quantity] => 3
            [name] => Box #19
            [postcode] => 3088
        )

)

Packing Request:

https://digitalapi.auspost.com.au/postage/parcel/domestic/calculate.json?from_postcode=3088&to_postcode=3088&length=66.5&width=40.5&height=38&weight=15.9&service_code=AUS_PARCEL_REGULAR

Australia Post RESPONSE:

stdClass Object
(
    [postage_result] => stdClass Object
        (
            [service] => Parcel Post
            [delivery_time] => Delivered in 2-3 business days
            [total_cost] => 27.05
            [costs] => stdClass Object
                (
                    [cost] => stdClass Object
                        (
                            [item] => Parcel Post
                            [cost] => 27.05
                        )

                )

        )

)

Packing Request:

https://digitalapi.auspost.com.au/postage/parcel/domestic/calculate.json?from_postcode=3088&to_postcode=3088&length=66.5&width=40.5&height=38&weight=15.9&service_code=AUS_PARCEL_EXPRESS

Australia Post RESPONSE:

stdClass Object
(
    [postage_result] => stdClass Object
        (
            [service] => Express Post
            [delivery_time] => Guaranteed Next Business Day within the Express Post network (If posted on any business day Monday to Friday in accordance with the conditions set out on the item).
            [total_cost] => 37.65
            [costs] => stdClass Object
                (
                    [cost] => stdClass Object
                        (
                            [item] => Express Post
                            [cost] => 37.65
                        )

                )

        )

)

Packing Details:

Array
(
    [1] => Array
        (
            [weight] => 15.9
            [length] => 66.5
            [height] => 38
            [width] => 40.5
            [quantity] => 3
            [name] => Box #19
            [postcode] => 3088
        )

)

Packing Request:

https://digitalapi.auspost.com.au/postage/parcel/domestic/calculate.json?from_postcode=3088&to_postcode=3088&length=66.5&width=40.5&height=38&weight=15.9&service_code=AUS_PARCEL_REGULAR

Australia Post RESPONSE:

stdClass Object
(
    [postage_result] => stdClass Object
        (
            [service] => Parcel Post
            [delivery_time] => Delivered in 2-3 business days
            [total_cost] => 27.05
            [costs] => stdClass Object
                (
                    [cost] => stdClass Object
                        (
                            [item] => Parcel Post
                            [cost] => 27.05
                        )

                )

        )

)

Packing Request:

https://digitalapi.auspost.com.au/postage/parcel/domestic/calculate.json?from_postcode=3088&to_postcode=3088&length=66.5&width=40.5&height=38&weight=15.9&service_code=AUS_PARCEL_EXPRESS

Australia Post RESPONSE:

stdClass Object
(
    [postage_result] => stdClass Object
        (
            [service] => Express Post
            [delivery_time] => Guaranteed Next Business Day within the Express Post network (If posted on any business day Monday to Friday in accordance with the conditions set out on the item).
            [total_cost] => 37.65
            [costs] => stdClass Object
                (
                    [cost] => stdClass Object
                        (
                            [item] => Express Post
                            [cost] => 37.65
                        )

                )

        )

)

Packing Details:

Array
(
    [1] => Array
        (
            [weight] => 15.9
            [length] => 66.5
            [height] => 38
            [width] => 40.5
            [quantity] => 3
            [name] => Box #19
            [postcode] => 3088
        )

)

Packing Request:

https://digitalapi.auspost.com.au/postage/parcel/domestic/calculate.json?from_postcode=3088&to_postcode=3088&length=66.5&width=40.5&height=38&weight=15.9&service_code=AUS_PARCEL_REGULAR

Australia Post RESPONSE:

stdClass Object
(
    [postage_result] => stdClass Object
        (
            [service] => Parcel Post
            [delivery_time] => Delivered in 2-3 business days
            [total_cost] => 27.05
            [costs] => stdClass Object
                (
                    [cost] => stdClass Object
                        (
                            [item] => Parcel Post
                            [cost] => 27.05
                        )

                )

        )

)

Packing Request:

https://digitalapi.auspost.com.au/postage/parcel/domestic/calculate.json?from_postcode=3088&to_postcode=3088&length=66.5&width=40.5&height=38&weight=15.9&service_code=AUS_PARCEL_EXPRESS

Australia Post RESPONSE:

stdClass Object
(
    [postage_result] => stdClass Object
        (
            [service] => Express Post
            [delivery_time] => Guaranteed Next Business Day within the Express Post network (If posted on any business day Monday to Friday in accordance with the conditions set out on the item).
            [total_cost] => 37.65
            [costs] => stdClass Object
                (
                    [cost] => stdClass Object
                        (
                            [item] => Express Post
                            [cost] => 37.65
                        )

                )

        )

)

"
5i8KPrVJ,Untitled,FleZ,JavaScript,Sunday 23rd of March 2025 04:07:18 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/465/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
pp78DjFH,Untitled,FleZ,JavaScript,Sunday 23rd of March 2025 03:51:55 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/332/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
pfJ9xxuy,worker.lua,hhhzzzsss,Lua,Sunday 23rd of March 2025 03:33:33 PM CDT,"local component = require(""component"")
local event = require(""event"")
local computer = require(""computer"")
local os = require(""os"")
local term = require(""term"")
local modem = component.modem

local CONTROLLER_PORT = 1
local WORKER_PORT = 2

modem.open(1)

local function tickTime()
    return os.time() * (1000/60/60)
end

local function handle_ping(address)
    modem.send(address, WORKER_PORT)
end

local noteQueue = {}

local function handle_note(pitch, duration, time)
    table.insert(noteQueue, {pitch = pitch, duration = duration, time = time})
end

local function process_queue()
    if #noteQueue == 0 then return end
    
    local currentTime = tickTime()
    while #noteQueue > 0 and noteQueue[1].time <= currentTime do
        local note = table.remove(noteQueue, 1)
        computer.beep(note.pitch, note.duration)
    end
end

term.clear()
print(""Running worker..."")

while true do
    local id, _, remoteAddress, port, _, protocol, data1, data2, data3 = event.pullMultiple(""modem_message"", ""interrupted"")
    if id == ""interrupted"" then
        print(""Interrupted. Exiting..."")
        break
    end
    if port == CONTROLLER_PORT then
        if protocol == ""ping"" then
            handle_ping(remoteAddress)
        elseif protocol == ""note"" then
            handle_note(data1, data2, data3)
        end
    end
    
    process_queue()
end"
eyM8Yuiv,Untitled,MiaMyLove,JavaScript,Sunday 23rd of March 2025 03:33:13 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/161/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
AN0ii1zh,GROK Esp32 HID XYZ axis Bluetooth/usb ssd1306 screen,LandoRo,C#,Sunday 23rd of March 2025 03:30:14 PM CDT,"#include <Wire.h>
#include <Adafruit_ADS1X15.h>
#include <Adafruit_SSD1306.h>
#include <BleGamepad.h>
#include <TinyUSB.h>
#include ""driver/usb_phy.h""

// OLED Config
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// ADS1115 Instance
Adafruit_ADS1115 ads;

// BLE Gamepad Instance
BleGamepad bleGamepad(""Generic Sim Pedals BLE"", ""xAI"", 100);

// TinyUSB HID Descriptor (3-axis joystick)
static const uint8_t hid_report_descriptor[] = {
    TUD_HID_REPORT_DESC_GAMEPAD(HID_REPORT_ID(1), 0, 0, 0, 32767, 32767, 32767)
};

// TinyUSB Device Descriptor
static const tusb_desc_device_t usb_device_descriptor = {
    .bLength = 18, .bDescriptorType = TUSB_DESC_DEVICE, .bcdUSB = 0x0200,
    .bMaxPacketSize0 = CFG_TUD_ENDPOINT0_SIZE, .idVendor = 0xCafe, .idProduct = 0x4001,
    .bcdDevice = 0x0100, .iManufacturer = 0x01, .iProduct = 0x02, .iSerialNumber = 0x03,
    .bNumConfigurations = 0x01
};

// USB Strings
static const char *usb_string_descriptor[] = {
    (char[]){0x09, 0x04}, ""xAI"", ""Generic Sim Pedals USB"", ""123456""
};

// TinyUSB Config
static const tinyusb_config_t tusb_cfg = {
    .device_descriptor = &usb_device_descriptor,
    .string_descriptor = usb_string_descriptor,
    .hid_report_descriptor = hid_report_descriptor,
    .hid_report_descriptor_len = sizeof(hid_report_descriptor)
};

// Pins
#define SDA_PIN 9
#define SCL_PIN 10
#define USB_DP_PIN 13
#define USB_DM_PIN 12

// Calibration (volts)
const float GAS_MIN_VOLT = 0.5f, GAS_MAX_VOLT = 4.5f;
const float BRAKE_MIN_VOLT = 0.5f, BRAKE_MAX_VOLT = 4.5f;
const float CLUTCH_MIN_VOLT = 0.5f, CLUTCH_MAX_VOLT = 4.5f;

// Axis Values
int16_t clutchValue, brakeValue, gasValue;

void setup() {
  Wire.begin(SDA_PIN, SCL_PIN);

  // ADS1115 Init
  if (!ads.begin(0x48)) while (1);
  ads.setGain(GAIN_TWOTHIRDS);

  // SSD1306 Init
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) while (1);
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println(""Sim Pedals"");
  display.display();

  // USB PHY Config
  usb_phy_config_t phy_conf = {
    .controller = USB_PHY_CTRL_OTG, .target = USB_PHY_TARGET_INT,
    .otg_mode = USB_OTG_MODE_DEVICE, .speed = USB_PHY_SPEED_FULL,
    .gpio_conf = { .dp_pin = USB_DP_PIN, .dm_pin = USB_DM_PIN }
  };
  usb_phy_handle_t phy_handle;
  if (usb_new_phy(&phy_conf, &phy_handle) != ESP_OK) while (1);

  // TinyUSB Init
  tinyusb_driver_install(&tusb_cfg);

  // BLE Init
  bleGamepad.begin();
  bleGamepad.setAutoReport(false);
}

void loop() {
  // Read ADC (inline to reduce function calls)
  float gasVoltage = ads.computeVolts(ads.readADC_SingleEnded(0));
  float brakeVoltage = ads.computeVolts(ads.readADC_SingleEnded(1));
  float clutchVoltage = ads.computeVolts(ads.readADC_SingleEnded(2));

  // Map to HID range (0-32767)
  gasValue = constrain(map(gasVoltage * 1000, GAS_MIN_VOLT * 1000, GAS_MAX_VOLT * 1000, 0, 32767), 0, 32767);
  brakeValue = constrain(map(brakeVoltage * 1000, BRAKE_MIN_VOLT * 1000, BRAKE_MAX_VOLT * 1000, 0, 32767), 0, 32767);
  clutchValue = constrain(map(clutchVoltage * 1000, CLUTCH_MIN_VOLT * 1000, CLUTCH_MAX_VOLT * 1000, 0, 32767), 0, 32767);

  // USB or BLE Reporting
  if (tud_ready()) {
    uint8_t report[6] = {
      (uint8_t)(gasValue & 0xFF), (uint8_t)(gasValue >> 8),
      (uint8_t)(brakeValue & 0xFF), (uint8_t)(brakeValue >> 8),
      (uint8_t)(clutchValue & 0xFF), (uint8_t)(clutchValue >> 8)
    };
    tud_hid_report(1, report, 6);
  } else if (bleGamepad.isConnected()) {
    bleGamepad.setAxes(gasValue, brakeValue, clutchValue, 0, 0, 0, 0, DPAD_CENTERED);
    bleGamepad.sendReport();
  }

  // Brake PSI
  float brakePSI = constrain(((brakeVoltage - 0.5f) / 4.0f) * 100.0f, 0.0f, 100.0f);

  // OLED Update
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0, 0);
  if (tud_ready()) display.print(""USB"");
  else if (bleGamepad.isConnected()) display.print(""BT"");
  display.setTextSize(2);
  display.setCursor(40, 16);  // Precomputed for ""Brake""
  display.print(""Brake"");
  display.setCursor(28, 40);  // Precomputed for ""XX.XX PSI""
  display.print(brakePSI, 2);
  display.print("" PSI"");
  display.display();

  delay(5);  // Reduced delay for responsiveness
}"
zckuAni3,Untitled,MiaMyLove,JavaScript,Sunday 23rd of March 2025 03:17:52 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/603/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
n4gHNACe,Untitled,MiaMyLove,JavaScript,Sunday 23rd of March 2025 03:02:26 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/498/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
PQd3pSKi,Untitled,MiaMyLove,JavaScript,Sunday 23rd of March 2025 02:47:03 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/826/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
4cb5EQNk,Другий семестр. Лабораторна робота №9-10 (Завдання 2),Lavig,C++,Sunday 23rd of March 2025 02:33:36 PM CDT,"#include <iostream>
#include <windows.h>
#include <vector>
#include <fstream>
#include <sstream>

using namespace std;

int main() {
    SetConsoleOutputCP(1251);
    SetConsoleCP(1251);
    ifstream input_file(""D:/files/input.txt"");
    if (!input_file) {
        cout << ""Файлу, з якого мають зчитуватися числа, не існує!"" << endl;
        return 0;
    }
    vector<vector<vector<int>>> all_matrices;
    vector<vector<int>> matrix;
    string line;
    while (getline(input_file, line)) {
        if (line.empty()) {
            if (!matrix.empty()) {
                all_matrices.push_back(matrix);
                matrix.clear();
            }
        }
        else {
            stringstream ss(line);
            vector<int> row;
            int num;
            while (ss >> num) {
                row.push_back(num);
            }
            matrix.push_back(row);
        }
    }
    if (!matrix.empty()) {
        all_matrices.push_back(matrix);
    }
    input_file.close();
    if (all_matrices.empty()) {
        cout << ""У файлі немає матриць!"" << endl;
        return 0;
    }
    ofstream output_file(""D:/files/input.txt"");
    ofstream odd_file(""D:/files/output.txt"");
    if (!output_file || !odd_file) {
        cout << ""Помилка відкриття вихідних файлів!"" << endl;
        return 0;
    }
    bool has_odd_sum_matrix = false;
    for (int m = 0; m < all_matrices.size(); m++) {
        matrix = all_matrices[m];
        int sum = 0;
        for (int i = 0; i < matrix.size(); i++) {
            for (int j = 0; j < matrix[i].size(); j++) {
                if (matrix[i][j] < 0 && matrix[i][j] % 2 != 0) {
                    sum += matrix[i][j];
                }
            }
        }
        if (sum % 2 != 0) {
            has_odd_sum_matrix = true;
            for (int i = 0; i < matrix.size(); i++) {
                for (int j = 0; j < matrix[i].size(); j++) {
                    odd_file << matrix[i][j] << "" "";
                }
                odd_file << ""\n"";
            }
            odd_file << ""\n"";
            for (int i = 0; i < matrix.size(); i++) {
                for (int j = 0; j < matrix[i].size(); j++) {
                    if (i == j) {
                        matrix[i][j] = 1;
                    }
                    else {
                        matrix[i][j] = 0;
                    }
                }
            }
        }
        for (int i = 0; i < matrix.size(); i++) {
            for (int j = 0; j < matrix[i].size(); j++) {
                output_file << matrix[i][j] << "" "";
            }
            output_file << ""\n"";
        }
        output_file << ""\n"";
    }
    output_file.close();
    odd_file.close();
    if (!has_odd_sum_matrix) {
        cout << ""Матриць із непарною сумою від'ємних чисел не знайдено."" << endl;
    }
    cout << ""Файли успішно оновлені!"" << endl;
}"
sGZ9TVdz,Untitled,MiaMyLove,JavaScript,Sunday 23rd of March 2025 02:31:41 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/064/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
a902jfdB,Untitled,nq1s788,C++,Sunday 23rd of March 2025 02:24:51 PM CDT,"В этой задаче нужно реализовать алгоритм Дейкстры за O(mlogn). Про алгоритм можно почитать здесь https://ru.algorithmica.org/cs/shortest-paths/dijkstra/

Я подписала в задаче, к сожалению в реализации используется сет на дереве, в ванильном питоне он не реализован, пример реализации на c++:
vector<int> dijkstra(int s) {
    vector<int> d(n, inf);
    d[root] = 0;
    set< pair<int, int> > q;
    q.insert({0, s});
    while (!q.empty()) {
        int v = q.begin()->second;
        q.erase(q.begin());
        for (auto [u, w] : g[v]) {
            if (d[u] > d[v] + w) {
                q.erase({d[u], u});
                d[u] = d[v] + w;
                q.insert({d[u], u});
            }
        }
    }
    return d;
}"
qi3AKebk,Untitled,nq1s788,Python,Sunday 23rd of March 2025 02:19:47 PM CDT,"В этой задаче нужно реализовать алгоритм Дейкстры за O(n^2). Про него подробнее можно почитать здесь: https://ru.algorithmica.org/cs/shortest-paths/dijkstra/

Пример кода на python:
n, m = map(int, input().split())
g = [[] for i in range(n)]
for i in range(m):
    x, y, c = map(int, input().split())
    x -= 1
    y -= 1
    g[x].append((y, c))
    g[y].append((x, c))
start, end = map(int, input().split())
start -= 1
end -= 1
inf = 1000000000
w = [inf for i in range(n)]
used = [False for i in range(n)]
w[start] = 0
for i in range(n):
    cur = -1
    cur_w = inf
    for e in range(n):
        if not used[e] and w[e] < cur_w:
            cur = e
            cur_w = w[e]
    if cur == -1:
        break
    used[cur] = True
    for to in g[cur]:
        w[to[0]] = min(w[to[0]], w[cur] + to[1])
if not used[end]:
    print(-1)
else:
    print(w[end])"
aaRenRRZ,Untitled,MiaMyLove,JavaScript,Sunday 23rd of March 2025 02:16:18 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/060/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ZPbXTTRX,Untitled,MiaMyLove,JavaScript,Sunday 23rd of March 2025 02:00:54 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/940/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
CTkAajS2,Untitled,MiaMyLove,JavaScript,Sunday 23rd of March 2025 01:45:10 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/766/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
FZa8vKEP,Untitled,MiaMyLove,JavaScript,Sunday 23rd of March 2025 01:29:47 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/586/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
qTW4NvbG,Untitled,MiaMyLove,JavaScript,Sunday 23rd of March 2025 01:14:03 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/303/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
u7yz6A6h,my_personal_docker_compose,Catsher,YAML,Sunday 23rd of March 2025 01:09:40 PM CDT,"version: '3.8'

services:
  postgresql:
    image: postgres:latest
    container_name: postgres_db 
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ""pg_isready""
      interval: 10s
      timeout: 5s
      retries: 5


  rabbitmq:
    image: rabbitmq:3.13-management
    restart: unless-stopped
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: ""rabbitmq-diagnostics -q ping""
      interval: 30s
      timeout: 30s
      retries: 3

  zookeeper:
    image: bitnami/zookeeper:latest
    restart: on-failure
    ports:
      - ""2181:2181""
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zookeeper:2888:3888
      ALLOW_ANONYMOUS_LOGIN: ""yes""

  kafka:
    image: bitnami/kafka:latest
    restart: on-failure
    ports:
      - ""9092:9092""
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: ""zookeeper:2181""
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: ""kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO""
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: ""yes""
      KAFKA_LISTENERS: ""INTERNAL://:29092,EXTERNAL://:9092""
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: ""6000""
      KAFKA_RESTART_ATTEMPTS: ""10""
      KAFKA_RESTART_DELAY: ""5""
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: ""0""
    depends_on:
      - zookeeper

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: postgres
      PGADMIN_LISTEN_PORT: 80
    ports:
      - 5433:80
    volumes:
      - pgadmin:/var/lib/pgadmin
    depends_on:
      - postgresql
      - kafka
      
volumes:
    postgres_data:
      driver: local
    pgadmin: {}"
CB8YSyev,Bloom & Dine - โพสต์,Kelly-B9978,HTML,Sunday 23rd of March 2025 01:04:45 PM CDT,"<link href=""https://dl.dropbox.com/scl/fi/tpnytrlcop69bxh49xizy/BloomnDine.css?rlkey=nofl9g8t20qld95ihxdlwh73m&st=hcommcgi"" rel=""stylesheet"">
<div id=""BloomnDine""><a href=""https://discord.com/users/625292873914515456/""></a><div id=""bnd-thread"" class=""bnd-set"" style=""--bnd-bg: #f6eee3;--bnd-txt: #716d32;--bnd-primary: #545225;"">
<div class=""bnd-png1"" style=""--bnd-png: url(https://iili.io/3IR7uvj.png);transform: scaleX(-1) rotate(-45deg) translate(15%, 15%);""></div>
<div class=""bnd-png2"" style=""--bnd-png: url(https://iili.io/3IRBcB4.png);--bnd-pos: right top;--bnd-size: 80%;rotate: 20deg;""></div>
<div class=""bnd-paper"">
<div class=""bnd-name"">Bloom & Dine</div>
<div class=""bnd-gallery"">
<div class=""bnd-img"" style=""--bnd-pic: url(https://iili.io/3IANvt9.png);--bnd-pos: 50% 100%;--bnd-size: 105%;""></div>
<div class=""bnd-img"" style=""--bnd-pic: url(https://iili.io/3IAO0Ux.png);--bnd-pos: 50% 80%;""></div>
<div class=""bnd-img"" style=""--bnd-pic: url(https://iili.io/3IAOHSR.png);--bnd-pos: 50% 90%;--bnd-size: 110%;""></div>
<div class=""bnd-img"" style=""--bnd-pic: url(https://iili.io/3IAeCzP.png);--bnd-pos: 50% 68%;--bnd-size: 120%;""></div>
</div>
<div class=""bnd-content""> -- ข้อมูล อธิบายบรรยากาศในงาน --</div>
<div class=""bnd-topic"">เงื่อนไข</div>
[list]
[*]เงื่อนไข 1
[*]เงื่อนไข 2
[*]เงื่อนไข 3
[/list]
[align=center]( เขียนอะไรสักอย่าง )[/align]
</div></div></div>"
4QF97HWd,零食采购 参考代码,Dmaxiya,C++,Sunday 23rd of March 2025 12:41:19 PM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const int maxn = 100000 + 100;
const int Log = 20;
int n, q, u, v, s, t, cnt;
int c[maxn], id[maxn];
int st[maxn][Log], bitMask[maxn][Log];
vector<int> G[maxn];

void dfs(int root, int fa) {
    id[root] = ++cnt;
    st[root][0] = fa;
    bitMask[root][0] = 1 << c[root];
    for (int i = 1; i < Log; ++i) {
        st[root][i] = st[st[root][i - 1]][i - 1];
        bitMask[root][i] = bitMask[root][i - 1] | bitMask[st[root][i - 1]][i - 1];
    }
    for (int pos : G[root]) {
        if (pos == fa) {
            continue;
        }
        dfs(pos, root);
    }
}

int solve(int s, int t) {
    if (s == t) {
        return 1;
    }
    if (id[s] > id[t]) {
        swap(s, t);
    }
    int mask = 0;
    for (int i = Log - 1; i >= 0; --i) {
        if (id[st[t][i]] > id[s]) {
            mask |= bitMask[t][i];
            t = st[t][i];
        }
    }
    mask |= bitMask[t][0];
    t = st[t][0];
    for (int i = Log - 1; i >= 0; --i) {
        if (id[st[s][i]] > id[t]) {
            mask |= bitMask[s][i];
            s = st[s][i];
        }
    }
    mask |= bitMask[s][0];
    return __builtin_popcount(mask | (1 << c[t]));
}

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif
    ios::sync_with_stdio(false);

    cin >> n >> q;
    for (int i = 1; i <= n; ++i) {
        cin >> c[i];
        --c[i];
    }
    for (int i = 1; i < n; ++i) {
        cin >> u >> v;
        G[u].push_back(v);
        G[v].push_back(u);
    }
    dfs(1, 1);
    while (q--) {
        cin >> s >> t;
        cout << solve(s, t) << endl;
    }

    return 0;
}
"
zR8WxxtV,farming.lua,PasteMrBin,Lua,Sunday 23rd of March 2025 12:20:16 PM CDT,"-- programma per farming

function farmingForward(numBlocksY)
    
    turtle.select(2)

    for i = 1, numBlocksY, 1 do
        turtle.digDown()
        turtle.placeDown()
        turtle.forward()
    end
end

function turnLeft()
    
    turtle.turnLeft()
    turtle.forward()
    turtle.turnLeft()
    turtle.forward()
end

function turnRight()

    turtle.turnRight()
    turtle.forward()
    turtle.turnRight()
    turtle.forward()
end

function backHome(numBlocksX, numBlocksY, pariDispari)

    if pariDispari % 2 ~= 0 then

        for i = 1, numBlocksY, 1 do
            turtle.forward()
        end

        turtle.turnLeft()

        for i = 1, numBlocksX, 1 do
            turtle.forward()
        end

    else
        turtle.turnRight()
        for i = 1, numBlocksX, 1 do
            turtle.forward()
        end
    end
end

function farming(numBlocksX, numBlocksY)
    turtle.up()
    turtle.forward()

    pariDispari = 0

    for i = 1, numBlocksX, 1 do
        farmingForward(numBlocksY)
        if i % 2 == 0 then
            turnRight()
        else
            turnLeft()
        end
        pariDispari = i
    end

    backHome(numBlocksX, numBlocksY, pariDispari)
end

farming(8, 8)
"
VtfW5yMy,Untitled,MiaMyLove,JavaScript,Sunday 23rd of March 2025 12:20:06 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/367/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
mKYFkkUN,Untitled,FleZ,JavaScript,Sunday 23rd of March 2025 12:18:59 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/522/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Dc0hkFVt,SM83.h,kgkotzamanidis,C++,Sunday 23rd of March 2025 12:17:32 PM CDT,"/*
 *An Gameboy and GameboyColor emulation with project name GkotzamBoyGR
 *Copyright (C) <Fri Mar 21 2025>  <KGkotzamanidis>
 *
 *This program is free software: you can redistribute it and/or modify
 *it under the terms of the GNU General Public License as published by
 *the Free Software Foundation, either version 3 of the License, or
 *(at your option) any later version.
 *
 *This program is distributed in the hope that it will be useful,
 *but WITHOUT ANY WARRANTY; without even the implied warranty of
 *MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *GNU General Public License for more details.
 *
 *You should have received a copy of the GNU General Public License
 *along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
#include <cstdint>

#include ""EmulationUtils.h""
#include ""Motherboard.h""

class SM83
{
public:
    SM83(Motherboard &mem);

    void reset(void);
    void step(void);

    bool getDoubleSpeed();
    int getlastCycleCount();

private: /* CPU Functions */
    Motherboard *mem;

    int lastCycleCount;

    static const int instructionCount[];
    static const int prefixedinstructionCount[];

    void executeInstruction(uint8_t opcode);
    void executePrefixedInstruction(uint8_t opcode);

private: /* CPU Register functions */
    uint8_t A, B, C, D, E, F, H, L;
    uint16_t PC, SP;
    uint16_t AF();
    uint16_t BC();
    uint16_t DE();
    uint16_t HL();

    bool IME, IMEhold, ishalt, EIDIFlag, DoubleSpeed;

    void setAF(uint16_t data);
    void setBC(uint16_t data);
    void setDE(uint16_t data);
    void setHL(uint16_t data);

private: /* Flags */
    void setFlag(uint8_t flag, bool state);
    bool getFlag(uint8_t flag);

    bool getFlagZ();
    bool getFlagC();

private: /* Arithemtic and Logical Unit (ALU) */
    void alu16bitADD(uint16_t data);
    void alu16bitSPADD();

    void alu8bitADD(uint8_t data);
    void alu8bitADC(uint8_t data, bool carry);
    void alu8bitSUB(uint8_t data);
    void alu8bitSBC(uint8_t data, bool carry);

    uint8_t alu8bitINC(uint8_t data);
    uint8_t alu8bitDEC(uint8_t data);

    void logic8bitAND(uint8_t data);
    void logic8bitOR(uint8_t data);
    void logic8bitXOR(uint8_t data);
    void logic8bitCP(uint8_t data);
    void logic8bitDAA();
    void logic8bitCPL();

private: /* Rotate and Shift */
    uint8_t RLC(uint8_t data);
    uint8_t RL(uint8_t data);
    uint8_t RRC(uint8_t data);
    uint8_t RR(uint8_t data);
    uint8_t SLA(uint8_t data);
    uint8_t SRA(uint8_t data);
    uint8_t SRL(uint8_t data);
    uint8_t SWAP(uint8_t data);

    void BIT(int bit, uint8_t data);
    uint8_t SET(int bit, uint8_t data);
    uint8_t RES(int bit, uint8_t data);

private: /* CPU Control Instruction */
    void ccf(void);
    void scf(void);
    void nop(void);
    void halt(void);
    void stop(void);
    void di(void);
    void ei(void);

private: /* Jump Instruction */
    void jp(bool state);
    void jr(bool state);
    void call(bool state);
    void ret(bool state);
    void reti(void);
    void rst(uint8_t data);
};"
W0WdJ8dA,SM83.cpp,kgkotzamanidis,C++,Sunday 23rd of March 2025 12:16:21 PM CDT,"/*
 *An Gameboy and GameboyColor emulation with project name GkotzamBoyGR
 *Copyright (C) <Fri Mar 21 2025>  <KGkotzamanidis>
 *
 *This program is free software: you can redistribute it and/or modify
 *it under the terms of the GNU General Public License as published by
 *the Free Software Foundation, either version 3 of the License, or
 *(at your option) any later version.
 *
 *This program is distributed in the hope that it will be useful,
 *but WITHOUT ANY WARRANTY; without even the implied warranty of
 *MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *GNU General Public License for more details.
 *
 *You should have received a copy of the GNU General Public License
 *along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
#include ""SM83.h""
SM83::SM83(Motherboard &mem) : mem(&mem)
{
    std::printf(""Initiallize CPU Sector\n"");
    EIDIFlag = false;
    IME = false;
    IMEhold = false;
    ishalt = false;
}
const int SM83::instructionCount[] = {
	4,12,8,8,4,4,8,4,20,8,8,8,4,4,8,4,
	4,12,8,8,4,4,8,4,12,8,8,8,4,4,8,4,
	8,12,8,8,4,4,8,4,8,8,8,8,4,4,8,4,
	8,12,8,8,12,12,12,4,8,8,8,8,4,4,8,4,
	4,4,4,4,4,4,8,4,4,4,4,4,4,4,8,4,
	4,4,4,4,4,4,8,4,4,4,4,4,4,4,8,4,
	4,4,4,4,4,4,8,4,4,4,4,4,4,4,8,4,
	8,8,8,8,8,8,4,8,4,4,4,4,4,4,8,4,
	4,4,4,4,4,4,8,4,4,4,4,4,4,4,8,4,
	4,4,4,4,4,4,8,4,4,4,4,4,4,4,8,4,
	4,4,4,4,4,4,8,4,4,4,4,4,4,4,8,4,
	4,4,4,4,4,4,8,4,4,4,4,4,4,4,8,4,
	8,12,12,16,12,16,8,16,8,16,12,4,12,24,8,16,
	8,12,12,0,12,16,8,16,8,16,12,0,12,0,8,16,
	12,12,8,0,0,16,8,16,16,4,16,0,0,0,8,16,
	12,12,8,4,0,16,8,16,12,8,16,4,0,0,8,16,
};

const int SM83::prefixedinstructionCount[] = {
	8,8,8,8,8,8,16,8,8,8,8,8,8,8,16,8,
	8,8,8,8,8,8,16,8,8,8,8,8,8,8,16,8,
	8,8,8,8,8,8,16,8,8,8,8,8,8,8,16,8,
	8,8,8,8,8,8,16,8,8,8,8,8,8,8,16,8,
	8,8,8,8,8,8,12,8,8,8,8,8,8,8,12,8,
	8,8,8,8,8,8,12,8,8,8,8,8,8,8,12,8,
	8,8,8,8,8,8,12,8,8,8,8,8,8,8,12,8,
	8,8,8,8,8,8,12,8,8,8,8,8,8,8,12,8,
	8,8,8,8,8,8,16,8,8,8,8,8,8,8,16,8,
	8,8,8,8,8,8,16,8,8,8,8,8,8,8,16,8,
	8,8,8,8,8,8,16,8,8,8,8,8,8,8,16,8,
	8,8,8,8,8,8,16,8,8,8,8,8,8,8,16,8,
	8,8,8,8,8,8,16,8,8,8,8,8,8,8,16,8,
	8,8,8,8,8,8,16,8,8,8,8,8,8,8,16,8,
	8,8,8,8,8,8,16,8,8,8,8,8,8,8,16,8,
	8,8,8,8,8,8,16,8,8,8,8,8,8,8,16,8,
};

void SM83::reset(void)
{
    EIDIFlag = false;
    IME = false;
    IMEhold = false;
    ishalt = false;

    PC = 0x0000;
    SP = 0x0000;
    A = B = C = D = E = H = L = F = 0x00;
}

void SM83::step(void)
{
    IME = EIDIFlag ? IME : IMEhold;
    EIDIFlag = false;

    uint8_t iflags = mem->readByte(IFaddress);
    uint8_t ieflags = mem->readByte(IEaddress);
    uint8_t activeInterrupts = iflags & ieflags;

    if (activeInterrupts != 0)
    {
        ishalt = false;

        if (IME)
        {
            IMEhold = false;
            IME = false;

            if (activeInterrupts & VBlankInterrupt)
            {
                mem->writeByte(IFaddress, iflags & ~VBlankInterrupt);
                rst(0x40);
            }
            else if (activeInterrupts & LCDCInterrupt)
            {
                mem->writeByte(IFaddress, iflags & ~LCDCInterrupt);
                rst(0x48);
            }
            else if (activeInterrupts & timerOverflow)
            {
                mem->writeByte(IFaddress, iflags & ~timerOverflow);
                rst(0x50);
            }
            else if (activeInterrupts & buttonOverflow)
            {
                mem->writeByte(IFaddress, iflags & ~buttonOverflow);
                rst(0x60);
            }
        }
    }

    if (!ishalt)
    {
        executeInstruction(mem->readByte(PC));
    }
    else
    {
        lastCycleCount = 4;
    }
}

bool SM83::getDoubleSpeed()
{
    return DoubleSpeed;
}

int SM83::getlastCycleCount()
{
    return lastCycleCount;
}

/* For more information about the SM83 Instruction read this
   https://gbdev.io/gb-opcodes/optables/
*/
void SM83::executeInstruction(uint8_t opcode)
{
    PC++;
    lastCycleCount = instructionCount[opcode];

    switch (opcode)
    {
    case 0x00:
        nop();
        break;
    case 0x01:
        setBC(mem->readWord(PC));
        PC += 2;
        break;
    case 0x02:
        mem->writeByte(BC(), A);
        break;
    case 0x03:
        setBC(BC() + 1);
        break;
    case 0x04:
        B = alu8bitINC(B);
        break;
    case 0x05:
        B = alu8bitDEC(B);
        break;
    case 0x06:
        B = mem->readByte(PC);
        PC++;
        break;
    case 0x07:
    {
        /*
         *A = RLC(A);
         */
        bool carry = (A & 0x80) != 0;
        A = (A << 1) | (uint8_t)carry;
        setFlag(Flag_Z, false);
        setFlag(Flag_N, false);
        setFlag(Flag_H, false);
        setFlag(Flag_C, carry);
        break;
    }
    case 0x08:
        mem->writeWord(mem->readWord(PC), SP);
        PC += 2;
        break;
    case 0x09:
        alu16bitADD(BC());
        break;
    case 0x0A:
        A = mem->readByte(BC());
        break;
    case 0x0B:
        setBC(BC() - 1);
        break;
    case 0x0C:
        C = alu8bitINC(C);
        break;
    case 0x0D:
        C = alu8bitDEC(C);
        break;
    case 0x0E:
        C = mem->readByte(PC);
        PC++;
        break;
    case 0x0F:
    {
        /*
         *A = RRC(A);
         */
        bool carry = (A & 0x1) != 0;
        A = (A >> 1) | (carry << 7);
        setFlag(Flag_Z, false);
        setFlag(Flag_N, false);
        setFlag(Flag_H, false);
        setFlag(Flag_C, carry);
        break;
    }
    case 0x10:
        stop();
        PC++;
        break;
    case 0x11:
        setDE(mem->readWord(PC));
        PC += 2;
        break;
    case 0x12:
        mem->writeByte(DE(), A);
        break;
    case 0x13:
        setDE(DE() + 1);
        break;
    case 0x14:
        D = alu8bitINC(D);
        break;
    case 0x15:
        D = alu8bitDEC(D);
        break;
    case 0x16:
        D = mem->readByte(PC);
        PC++;
        break;
    case 0x17:
    {
        /*
         *A = RL(A);
         */
        bool carryFlagBit = getFlagC();
        bool carry = (A & 0x80) != 0;
        A = (A << 1) | (uint8_t)carryFlagBit;
        setFlag(Flag_Z, false);
        setFlag(Flag_N, false);
        setFlag(Flag_H, false);
        setFlag(Flag_C, carry);
        break;
    }
    case 0x18:
        jr(true);
        break;
    case 0x19:
        alu16bitADD(DE());
        break;
    case 0x1A:
        A = mem->readByte(DE());
        break;
    case 0x1B:
        setDE(DE() - 1);
        break;
    case 0x1C:
        E = alu8bitINC(E);
        break;
    case 0x1D:
        E = alu8bitDEC(E);
        break;
    case 0x1E:
        E = mem->readByte(PC);
        PC++;
        break;
    case 0x1F:
    {
        /*
         * A = RR(A);
         */
        bool carryFlagBit = getFlagC();
        bool carry = (A & 0x1) != 0;
        A = (A >> 1) | (carryFlagBit << 7);
        setFlag(Flag_Z, false);
        setFlag(Flag_N, false);
        setFlag(Flag_H, false);
        setFlag(Flag_C, carry);
        break;
    }
    case 0x20:
        jr(!getFlagZ());
        break;
    case 0x21:
        setHL(mem->readWord(PC));
        PC += 2;
        break;
    case 0x22:
        mem->writeByte(HL(), A);
        setHL(HL() + 1);
        break;
    case 0x23:
        setHL(HL() + 1);
        break;
    case 0x24:
        H = alu8bitINC(H);
        break;
    case 0x25:
        H = alu8bitDEC(H);
        break;
    case 0x26:
        H = mem->readByte(PC);
        PC++;
        break;
    case 0x27:
        logic8bitDAA();
        break;
    case 0x28:
        jr(getFlagZ());
        break;
    case 0x29:
        alu16bitADD(HL());
        break;
    case 0x2A:
        A = mem->readByte(HL());
        setHL(HL() + 1);
        break;
    case 0x2B:
        setHL(HL() - 1);
        break;
    case 0x2C:
        L = alu8bitINC(L);
        break;
    case 0x2D:
        L = alu8bitDEC(L);
        break;
    case 0x2E:
        L = mem->readByte(PC);
        PC++;
        break;
    case 0x2F:
        logic8bitCPL();
        break;
    case 0x30:
        jr(!getFlagC());
        break;
    case 0x31:
        SP = mem->readWord(PC);
        PC += 2;
        break;
    case 0x32:
        mem->writeByte(HL(), A);
        setHL(HL() - 1);
        break;
    case 0x33:
        SP++;
        break;
    case 0x34:
        mem->writeByte(HL(), alu8bitINC(mem->readByte(HL())));
        break;
    case 0x35:
        mem->writeByte(HL(), alu8bitDEC(mem->readByte(HL())));
        break;
    case 0x36:
        mem->writeWord(HL(), mem->readByte(PC));
        PC++;
        break;
    case 0x37:
        scf();
        break;
    case 0x38:
        jr(getFlagC());
        break;
    case 0x39:
        alu16bitADD(SP);
        break;
    case 0x3A:
        A = mem->readByte(HL());
        setHL(HL() - 1);
        break;
    case 0x3B:
        SP--;
        break;
    case 0x3C:
        A = alu8bitINC(A);
        break;
    case 0x3D:
        A = alu8bitDEC(A);
        break;
    case 0x3E:
        A = mem->readByte(PC);
        PC++;
        break;
    case 0x3F:
        ccf();
        break;
    case 0x40:
        B = B;
        break;
    case 0x41:
        B = C;
        break;
    case 0x42:
        B = D;
        break;
    case 0x43:
        B = E;
        break;
    case 0x44:
        B = H;
        break;
    case 0x45:
        B = L;
        break;
    case 0x46:
        B = mem->readByte(HL());
        break;
    case 0x47:
        B = A;
        break;
    case 0x48:
        C = B;
        break;
    case 0x49:
        C = C;
        break;
    case 0x4A:
        C = D;
        break;
    case 0x4B:
        C = E;
        break;
    case 0x4C:
        C = H;
        break;
    case 0x4D:
        C = L;
        break;
    case 0x4E:
        C = mem->readByte(HL());
        break;
    case 0x4F:
        C = A;
        break;
    case 0x50:
        D = B;
        break;
    case 0x51:
        D = C;
        break;
    case 0x52:
        D = D;
        break;
    case 0x53:
        D = E;
        break;
    case 0x54:
        D = H;
        break;
    case 0x55:
        D = L;
        break;
    case 0x56:
        D = mem->readByte(HL());
        break;
    case 0x57:
        D = A;
        break;
    case 0x58:
        E = B;
        break;
    case 0x59:
        E = C;
        break;
    case 0x5A:
        E = D;
        break;
    case 0x5B:
        E = E;
        break;
    case 0x5C:
        E = H;
        break;
    case 0x5D:
        E = L;
        break;
    case 0x5E:
        E = mem->readByte(HL());
        break;
    case 0x5F:
        E = A;
        break;
    case 0x60:
        H = B;
        break;
    case 0x61:
        H = C;
        break;
    case 0x62:
        H = D;
        break;
    case 0x63:
        H = E;
        break;
    case 0x64:
        H = H;
        break;
    case 0x65:
        H = L;
        break;
    case 0x66:
        H = mem->readByte(HL());
        break;
    case 0x67:
        H = A;
        break;
    case 0x68:
        L = B;
        break;
    case 0x69:
        L = C;
        break;
    case 0x6A:
        L = D;
        break;
    case 0x6B:
        L = E;
        break;
    case 0x6C:
        L = H;
        break;
    case 0x6D:
        L = L;
        break;
    case 0x6E:
        L = mem->readByte(HL());
        break;
    case 0x6F:
        L = A;
        break;
    case 0x70:
        mem->writeByte(HL(), B);
        break;
    case 0x71:
        mem->writeByte(HL(), C);
        break;
    case 0x72:
        mem->writeByte(HL(), D);
        break;
    case 0x73:
        mem->writeByte(HL(), E);
        break;
    case 0x74:
        mem->writeByte(HL(), H);
        break;
    case 0x75:
        mem->writeByte(HL(), L);
        break;
    case 0x76:
        halt();
        break;
    case 0x77:
        mem->writeByte(HL(), A);
        break;
    case 0x78:
        A = B;
        break;
    case 0x79:
        A = C;
        break;
    case 0x7A:
        A = D;
        break;
    case 0x7B:
        A = E;
        break;
    case 0x7C:
        A = H;
        break;
    case 0x7D:
        A = L;
        break;
    case 0x7E:
        A = mem->readByte(HL());
        break;
    case 0x7F:
        A = A;
        break;
    case 0x80:
        alu8bitADD(B);
        break;
    case 0x81:
        alu8bitADD(C);
        break;
    case 0x82:
        alu8bitADD(D);
        break;
    case 0x83:
        alu8bitADD(E);
        break;
    case 0x84:
        alu8bitADD(H);
        break;
    case 0x85:
        alu8bitADD(L);
        break;
    case 0x86:
        alu8bitADD(mem->readByte(HL()));
        break;
    case 0x87:
        alu8bitADD(A);
        break;
    case 0x88:
        alu8bitADC(B, getFlagC());
        break;
    case 0x89:
        alu8bitADC(C, getFlagC());
        break;
    case 0x8A:
        alu8bitADC(D, getFlagC());
        break;
    case 0x8B:
        alu8bitADC(E, getFlagC());
        break;
    case 0x8C:
        alu8bitADC(H, getFlagC());
        break;
    case 0x8D:
        alu8bitADC(L, getFlagC());
        break;
    case 0x8E:
        alu8bitADC(mem->readByte(HL()), getFlagC());
        break;
    case 0x8F:
        alu8bitADC(A, getFlagC());
        break;
    case 0x90:
        alu8bitSUB(B);
        break;
    case 0x91:
        alu8bitSUB(C);
        break;
    case 0x92:
        alu8bitSUB(D);
        break;
    case 0x93:
        alu8bitSUB(E);
        break;
    case 0x94:
        alu8bitSUB(H);
        break;
    case 0x95:
        alu8bitSUB(L);
        break;
    case 0x96:
        alu8bitSUB(mem->readByte(HL()));
        break;
    case 0x97:
        alu8bitSUB(A);
        break;
    case 0x98:
        alu8bitSBC(B, getFlagC());
        break;
    case 0x99:
        alu8bitSBC(C, getFlagC());
        break;
    case 0x9A:
        alu8bitSBC(D, getFlagC());
        break;
    case 0x9B:
        alu8bitSBC(E, getFlagC());
        break;
    case 0x9C:
        alu8bitSBC(H, getFlagC());
        break;
    case 0x9D:
        alu8bitSBC(L, getFlagC());
        break;
    case 0x9E:
        alu8bitSBC(mem->readByte(HL()), getFlagC());
        break;
    case 0x9F:
        alu8bitSBC(A, getFlagC());
        break;
    case 0xA0:
        logic8bitAND(B);
        break;
    case 0xA1:
        logic8bitAND(C);
        break;
    case 0xA2:
        logic8bitAND(D);
        break;
    case 0xA3:
        logic8bitAND(E);
        break;
    case 0xA4:
        logic8bitAND(H);
        break;
    case 0xA5:
        logic8bitAND(L);
        break;
    case 0xA6:
        logic8bitAND(mem->readByte(HL()));
        break;
    case 0xA7:
        logic8bitAND(A);
        break;
    case 0xA8:
        logic8bitXOR(B);
        break;
    case 0xA9:
        logic8bitXOR(C);
        break;
    case 0xAA:
        logic8bitXOR(D);
        break;
    case 0xAB:
        logic8bitXOR(E);
        break;
    case 0xAC:
        logic8bitXOR(H);
        break;
    case 0xAD:
        logic8bitXOR(L);
        break;
    case 0xAE:
        logic8bitXOR(mem->readByte(HL()));
        break;
    case 0xAF:
        logic8bitXOR(A);
        break;
    case 0xB0:
        logic8bitOR(B);
        break;
    case 0xB1:
        logic8bitOR(C);
        break;
    case 0xB2:
        logic8bitOR(D);
        break;
    case 0xB3:
        logic8bitOR(E);
        break;
    case 0xB4:
        logic8bitOR(H);
        break;
    case 0xB5:
        logic8bitOR(L);
        break;
    case 0xB6:
        logic8bitOR(mem->readByte(HL()));
        break;
    case 0xB7:
        logic8bitOR(A);
        break;
    case 0xB8:
        logic8bitCP(B);
        break;
    case 0xB9:
        logic8bitCP(C);
        break;
    case 0xBA:
        logic8bitCP(D);
        break;
    case 0xBB:
        logic8bitCP(E);
        break;
    case 0xBC:
        logic8bitCP(H);
        break;
    case 0xBD:
        logic8bitCP(L);
        break;
    case 0xBE:
        logic8bitCP(mem->readByte(HL()));
        break;
    case 0xBF:
        logic8bitCP(A);
        break;
    case 0xC0:
        ret(!getFlagZ());
        break;
    case 0xC1:
        setBC(mem->readWord(SP));
        SP += 2;
        break;
    case 0xC2:
        jp(!getFlagZ());
        break;
    case 0xC3:
        jp(true);
        break;
    case 0xC4:
        call(!getFlagZ());
        break;
    case 0xC5:
        SP -= 2;
        mem->writeWord(SP, BC());
        break;
    case 0xC6:
        alu8bitADD(mem->readByte(PC));
        PC++;
        break;
    case 0xC7:
        rst(0x00);
        break;
    case 0xC8:
        ret(getFlagZ());
        break;
    case 0xC9:
        ret(true);
        break;
    case 0xCA:
        jp(getFlagZ());
        break;
    case 0xCB:
        executePrefixedInstruction(mem->readByte(PC));
        break;
    case 0xCC:
        call(getFlagZ());
        break;
    case 0xCD:
        call(true);
        break;
    case 0xCE:
        alu8bitADC(mem->readByte(PC), getFlagC());
        PC++;
        break;
    case 0xCF:
        rst(0x08);
        break;
    case 0xD0:
        ret(!getFlagC());
        break;
    case 0xD1:
        setDE(mem->readWord(SP));
        SP += 2;
        break;
    case 0xD2:
        jp(!getFlagC());
        break;
    case 0xD3:
        /* Empty Instruction */
        std::cout << ""Empty Instruction"" << std::endl;
        break;
    case 0xD4:
        call(!getFlagC());
        break;
    case 0xD5:
        SP -= 2;
        mem->writeWord(SP, DE());
        break;
    case 0xD6:
        alu8bitSUB(mem->readByte(PC));
        PC++;
        break;
    case 0xD7:
        rst(0x10);
        break;
    case 0xD8:
        ret(getFlagC());
        break;
    case 0xD9:
        reti();
        break;
    case 0xDA:
        jp(getFlagC());
        break;
    case 0xDB:
        /* Empty Instruction */
        std::cout << ""Empty Instruction"" << std::endl;
        break;
    case 0xDC:
        call(getFlagC());
        break;
    case 0xDD:
        /* Empty Instruction */
        std::cout << ""Empty Instruction"" << std::endl;
        break;
    case 0xDE:
        alu8bitSBC(mem->readByte(PC), getFlagC());
        PC++;
        break;
    case 0xDF:
        rst(0x18);
        break;
    case 0xE0:
        mem->writeByte(0xFF00 + mem->readByte(PC), A);
        PC++;
        break;
    case 0xE1:
        setHL(mem->readWord(SP));
        SP += 2;
        break;
    case 0xE2:
        mem->writeByte(0xFF00 + C, A);
        break;
    case 0xE3:
        /* Empty Instruction */
        std::cout << ""Empty Instruction"" << std::endl;
        break;
    case 0xE4:
        /* Empty Instruction */
        std::cout << ""Empty Instruction"" << std::endl;
        break;
    case 0xE5:
        SP -= 2;
        mem->writeWord(SP, HL());
        break;
    case 0xE6:
        logic8bitAND(mem->readByte(PC));
        PC++;
        break;
    case 0xE7:
        rst(0x20);
        break;
    case 0xE8:
        alu16bitSPADD();
        break;
    case 0xE9:
        PC = HL();
        PC += 2;
        break;
    case 0xEA:
        mem->writeByte(mem->readWord(PC), A);
        PC += 2;
        break;
    case 0xEB:
        /* Empty Instruction */
        std::cout << ""Empty Instruction"" << std::endl;
        break;
    case 0xEC:
        /* Empty Instruction */
        std::cout << ""Empty Instruction"" << std::endl;
        break;
    case 0xED:
        /* Empty Instruction */
        std::cout << ""Empty Instruction"" << std::endl;
        break;
    case 0xEE:
        logic8bitXOR(mem->readByte(PC));
        PC++;
        break;
    case 0xEF:
        rst(0x28);
        break;
    case 0xF0:
        A = mem->readByte(0xFF00 + mem->readByte(PC));
        PC++;
        break;
    case 0xF1:
        setAF(mem->readWord(SP));
        SP += 2;
        break;
    case 0xF2:
        A = mem->readByte(0xFF00 + C);
        break;
    case 0xF3:
        di();
        break;
    case 0xF4:
        /* Empty Instruction */
        std::cout << ""Empty Instruction"" << std::endl;
    case 0xF5:
        SP -= 2;
        mem->writeWord(SP, AF());
        break;
    case 0xF6:
        logic8bitOR(mem->readByte(PC));
        PC++;
        break;
    case 0xF7:
        rst(0x30);
        break;
    case 0xF8:
    {
        int8_t data = mem->readByte(PC);
        uint16_t result = SP + data;
        setFlag(Flag_Z, false);
        setFlag(Flag_N, false);
        setFlag(Flag_H, ((SP & 0x0F) + (data & 0x0F)) > 0x0F);
        setFlag(Flag_C, result > 0xFFFF);
        setHL(result);
        PC++;
        break;
    }
    case 0xF9:
        SP = HL();
        break;
    case 0xFA:
        A = mem->readByte(mem->readWord(PC));
        PC += 2;
        break;
    case 0xFB:
        ei();
        break;
    case 0xFC:
        /* Empty Instruction */
        std::printf(""Empty Instruction"");
        break;
    case 0xFD:
        /* Empty Instruction */
        std::printf(""Empty Instruction"");
        break;
    case 0xFE:
        logic8bitCP(mem->readByte(PC));
        PC++;
        break;
    case 0xFF:
        rst(0x38);
        break;
    }
}

void SM83::executePrefixedInstruction(uint8_t opcode)
{
    PC++;
    lastCycleCount = prefixedinstructionCount[opcode];
    switch (opcode)
    {
    case 0x0:
        B = RLC(B);
        break;
    case 0x1:
        C = RLC(C);
        break;
    case 0x2:
        D = RLC(D);
        break;
    case 0x3:
        E = RLC(E);
        break;
    case 0x4:
        H = RLC(H);
        break;
    case 0x5:
        L = RLC(L);
        break;
    case 0x6:
        mem->writeByte(HL(), RLC(mem->readByte(HL())));
        break;
    case 0x7:
        A = RLC(A);
        break;
    case 0x8:
        B = RRC(B);
        break;
    case 0x9:
        C = RRC(C);
        break;
    case 0xA:
        D = RRC(D);
        break;
    case 0xB:
        E = RRC(E);
        break;
    case 0xC:
        H = RRC(H);
        break;
    case 0xD:
        L = RRC(L);
        break;
    case 0xE:
        mem->writeByte(HL(), RRC(mem->readByte(HL())));
        break;
    case 0xF:
        A = RRC(A);
        break;
    case 0x10:
        B = RL(B);
        break;
    case 0x11:
        C = RL(C);
        break;
    case 0x12:
        D = RL(D);
        break;
    case 0x13:
        E = RL(E);
        break;
    case 0x14:
        H = RL(H);
        break;
    case 0x15:
        L = RL(L);
        break;
    case 0x16:
        mem->writeByte(HL(), RL(mem->readByte(HL())));
        break;
    case 0x17:
        A = RL(A);
        break;
    case 0x18:
        B = RR(B);
        break;
    case 0x19:
        C = RR(C);
        break;
    case 0x1A:
        D = RR(D);
        break;
    case 0x1B:
        E = RR(E);
        break;
    case 0x1C:
        H = RR(H);
        break;
    case 0x1D:
        L = RR(L);
        break;
    case 0x1E:
        mem->writeByte(HL(), RR(mem->readByte(HL())));
        break;
    case 0x1F:
        A = RR(A);
        break;
    case 0x20:
        B = SLA(B);
        break;
    case 0x21:
        C = SLA(C);
        break;
    case 0x22:
        D = SLA(D);
        break;
    case 0x23:
        E = SLA(E);
        break;
    case 0x24:
        H = SLA(H);
        break;
    case 0x25:
        L = SLA(L);
        break;
    case 0x26:
        mem->writeByte(HL(), SLA(mem->readByte(HL())));
        break;
    case 0x27:
        A = SLA(A);
        break;
    case 0x28:
        B = SRA(B);
        break;
    case 0x29:
        C = SRA(C);
        break;
    case 0x2A:
        D = SRA(D);
        break;
    case 0x2B:
        E = SRA(E);
        break;
    case 0x2C:
        H = SRA(H);
        break;
    case 0x2D:
        L = SRA(L);
        break;
    case 0x2E:
        mem->writeByte(HL(), SRA(mem->readByte(HL())));
        break;
    case 0x2F:
        A = SRA(A);
        break;
    case 0x30:
        B = SWAP(B);
        break;
    case 0x31:
        C = SWAP(C);
        break;
    case 0x32:
        D = SWAP(D);
        break;
    case 0x33:
        E = SWAP(E);
        break;
    case 0x34:
        H = SWAP(H);
        break;
    case 0x35:
        L = SWAP(L);
        break;
    case 0x36:
        mem->writeByte(HL(), SWAP(mem->readByte(HL())));
        break;
    case 0x37:
        A = SWAP(A);
        break;
    case 0x38:
        B = SRL(B);
        break;
    case 0x39:
        C = SRL(C);
        break;
    case 0x3A:
        D = SRL(D);
        break;
    case 0x3B:
        E = SRL(E);
        break;
    case 0x3C:
        H = SRL(H);
        break;
    case 0x3D:
        L = SRL(L);
        break;
    case 0x3E:
        mem->writeByte(HL(), mem->readByte(HL()));
        break;
    case 0x3F:
        A = SRL(A);
        break;
    case 0x40:
        BIT(0, B);
        break;
    case 0x41:
        BIT(0, C);
        break;
    case 0x42:
        BIT(0, D);
        break;
    case 0x43:
        BIT(0, E);
        break;
    case 0x44:
        BIT(0, H);
        break;
    case 0x45:
        BIT(0, L);
        break;
    case 0x46:
        BIT(0, mem->readByte(HL()));
        break;
    case 0x47:
        BIT(0, A);
        break;
    case 0x48:
        BIT(1, B);
        break;
    case 0x49:
        BIT(1, C);
        break;
    case 0x4A:
        BIT(1, D);
        break;
    case 0x4B:
        BIT(1, E);
        break;
    case 0x4C:
        BIT(1, H);
        break;
    case 0x4D:
        BIT(1, L);
        break;
    case 0x4E:
        BIT(1, mem->readByte(HL()));
        break;
    case 0x4F:
        BIT(1, A);
        break;
    case 0x50:
        BIT(2, B);
        break;
    case 0x51:
        BIT(2, C);
        break;
    case 0x52:
        BIT(2, D);
        break;
    case 0x53:
        BIT(2, E);
        break;
    case 0x54:
        BIT(2, H);
        break;
    case 0x55:
        BIT(2, L);
        break;
    case 0x56:
        BIT(2, mem->readByte(HL()));
        break;
    case 0x57:
        BIT(2, A);
        break;
    case 0x58:
        BIT(3, B);
        break;
    case 0x59:
        BIT(3, C);
        break;
    case 0x5A:
        BIT(3, D);
        break;
    case 0x5B:
        BIT(3, E);
        break;
    case 0x5C:
        BIT(3, H);
        break;
    case 0x5D:
        BIT(3, L);
        break;
    case 0x5E:
        BIT(3, mem->readByte(HL()));
        break;
    case 0x5F:
        BIT(3, A);
        break;
    case 0x60:
        BIT(4, B);
        break;
    case 0x61:
        BIT(4, C);
        break;
    case 0x62:
        BIT(4, D);
        break;
    case 0x63:
        BIT(4, E);
        break;
    case 0x64:
        BIT(4, H);
        break;
    case 0x65:
        BIT(4, L);
        break;
    case 0x66:
        BIT(4, mem->readByte(HL()));
        break;
    case 0x67:
        BIT(4, A);
        break;
    case 0x68:
        BIT(5, B);
        break;
    case 0x69:
        BIT(5, C);
        break;
    case 0x6A:
        BIT(5, D);
        break;
    case 0x6B:
        BIT(5, E);
        break;
    case 0x6C:
        BIT(5, H);
        break;
    case 0x6D:
        BIT(5, L);
        break;
    case 0x6E:
        BIT(5, mem->readByte(HL()));
        break;
    case 0x6F:
        BIT(5, A);
        break;
    case 0x70:
        BIT(6, B);
        break;
    case 0x71:
        BIT(6, C);
        break;
    case 0x72:
        BIT(6, D);
        break;
    case 0x73:
        BIT(6, E);
        break;
    case 0x74:
        BIT(6, H);
        break;
    case 0x75:
        BIT(6, L);
        break;
    case 0x76:
        BIT(6, mem->readByte(HL()));
        break;
    case 0x77:
        BIT(6, A);
        break;
    case 0x78:
        BIT(7, B);
        break;
    case 0x79:
        BIT(7, C);
        break;
    case 0x7A:
        BIT(7, D);
        break;
    case 0x7B:
        BIT(7, E);
        break;
    case 0x7C:
        BIT(7, H);
        break;
    case 0x7D:
        BIT(7, L);
        break;
    case 0x7E:
        BIT(7, mem->readByte(HL()));
        break;
    case 0x7F:
        BIT(7, A);
        break;
    case 0x80:
        B = RES(0, B);
        break;
    case 0x81:
        C = RES(0, C);
        break;
    case 0x82:
        D = RES(0, D);
        break;
    case 0x83:
        E = RES(0, E);
        break;
    case 0x84:
        H = RES(0, H);
        break;
    case 0x85:
        L = RES(0, L);
        break;
    case 0x86:
        mem->writeByte(HL(), RES(mem->readByte(HL()), 0));
        break;
    case 0x87:
        A = RES(0, A);
        break;
    case 0x88:
        B = RES(1, B);
        break;
    case 0x89:
        C = RES(1, C);
        break;
    case 0x8A:
        D = RES(1, D);
        break;
    case 0x8B:
        E = RES(1, E);
        break;
    case 0x8C:
        H = RES(1, H);
        break;
    case 0x8D:
        L = RES(1, L);
        break;
    case 0x8E:
        mem->writeByte(HL(), RES(mem->readByte(HL()), 1));
        break;
    case 0x8F:
        A = RES(1, A);
        break;
    case 0x90:
        B = RES(2, B);
        break;
    case 0x91:
        C = RES(2, C);
        break;
    case 0x92:
        D = RES(2, D);
        break;
    case 0x93:
        E = RES(2, E);
        break;
    case 0x94:
        H = RES(2, H);
        break;
    case 0x95:
        L = RES(2, L);
        break;
    case 0x96:
        mem->writeByte(HL(), RES(mem->readByte(HL()), 2));
        break;
    case 0x97:
        A = RES(2, A);
        break;
    case 0x98:
        B = RES(3, B);
        break;
    case 0x99:
        C = RES(3, C);
        break;
    case 0x9A:
        D = RES(3, D);
        break;
    case 0x9B:
        E = RES(3, E);
        break;
    case 0x9C:
        H = RES(3, H);
        break;
    case 0x9D:
        L = RES(3, L);
        break;
    case 0x9E:
        mem->writeByte(HL(), RES(mem->readByte(HL()), 3));
        break;
    case 0x9F:
        A = RES(3, A);
        break;
    case 0xA0:
        B = RES(4, B);
        break;
    case 0xA1:
        C = RES(4, C);
        break;
    case 0xA2:
        D = RES(4, D);
        break;
    case 0xA3:
        E = RES(4, E);
        break;
    case 0xA4:
        H = RES(4, H);
        break;
    case 0xA5:
        L = RES(4, L);
        break;
    case 0xA6:
        mem->writeByte(HL(), RES(mem->readByte(HL()), 4));
        break;
    case 0xA7:
        A = RES(4, A);
        break;
    case 0xA8:
        B = RES(5, B);
        break;
    case 0xA9:
        C = RES(5, C);
        break;
    case 0xAA:
        D = RES(5, D);
        break;
    case 0xAB:
        E = RES(5, E);
        break;
    case 0xAC:
        H = RES(5, H);
        break;
    case 0xAD:
        L = RES(5, L);
        break;
    case 0xAE:
        mem->writeByte(HL(), RES(mem->readByte(HL()), 5));
        break;
    case 0xAF:
        A = RES(5, A);
        break;
    case 0xB0:
        B = RES(6, B);
        break;
    case 0xB1:
        C = RES(6, C);
        break;
    case 0xB2:
        D = RES(6, D);
        break;
    case 0xB3:
        E = RES(6, E);
        break;
    case 0xB4:
        H = RES(6, H);
        break;
    case 0xB5:
        L = RES(6, L);
        break;
    case 0xB6:
        mem->writeByte(HL(), RES(mem->readByte(HL()), 6));
        break;
    case 0xB7:
        A = RES(6, A);
        break;
    case 0xB8:
        B = RES(7, B);
        break;
    case 0xB9:
        C = RES(7, C);
        break;
    case 0xBA:
        D = RES(7, D);
        break;
    case 0xBB:
        E = RES(7, E);
        break;
    case 0xBC:
        H = RES(7, H);
        break;
    case 0xBD:
        L = RES(7, L);
        break;
    case 0xBE:
        mem->writeByte(HL(), RES(mem->readByte(HL()), 7));
        break;
    case 0xBF:
        A = RES(7, A);
        break;
    case 0xC0:
        B = SET(0, B);
        break;
    case 0xC1:
        C = SET(0, C);
        break;
    case 0xC2:
        D = SET(0, D);
        break;
    case 0xC3:
        E = SET(0, E);
        break;
    case 0xC4:
        H = SET(0, H);
        break;
    case 0xC5:
        L = SET(0, L);
        break;
    case 0xC6:
        mem->writeByte(HL(), SET(mem->readByte(HL()), 0));
        break;
    case 0xC7:
        A = SET(0, A);
        break;
    case 0xC8:
        B = SET(1, B);
        break;
    case 0xC9:
        C = SET(1, C);
        break;
    case 0xCA:
        D = SET(1, D);
        break;
    case 0xCB:
        E = SET(1, E);
        break;
    case 0xCC:
        H = SET(1, H);
        break;
    case 0xCD:
        L = SET(1, L);
        break;
    case 0xCE:
        mem->writeByte(HL(), SET(mem->readByte(HL()), 1));
        break;
    case 0xCF:
        A = SET(1, A);
        break;
    case 0xD0:
        B = SET(2, B);
        break;
    case 0xD1:
        C = SET(2, C);
        break;
    case 0xD2:
        D = SET(2, D);
        break;
    case 0xD3:
        E = SET(2, E);
        break;
    case 0xD4:
        H = SET(2, H);
        break;
    case 0xD5:
        L = SET(2, L);
        break;
    case 0xD6:
        mem->writeByte(HL(), SET(mem->readByte(HL()), 2));
        break;
    case 0xD7:
        A = SET(2, A);
        break;
    case 0xD8:
        B = SET(3, B);
        break;
    case 0xD9:
        C = SET(3, C);
        break;
    case 0xDA:
        D = SET(3, D);
        break;
    case 0xDB:
        E = SET(3, E);
        break;
    case 0xDC:
        H = SET(3, H);
        break;
    case 0xDD:
        L = SET(3, L);
        break;
    case 0xDE:
        mem->writeByte(HL(), SET(mem->readByte(HL()), 3));
        break;
    case 0xDF:
        A = SET(3, A);
        break;
    case 0xE0:
        B = SET(4, B);
        break;
    case 0xE1:
        C = SET(4, C);
        break;
    case 0xE2:
        D = SET(4, D);
        break;
    case 0xE3:
        E = SET(4, E);
        break;
    case 0xE4:
        H = SET(4, H);
        break;
    case 0xE5:
        L = SET(4, L);
        break;
    case 0xE6:
        mem->writeByte(HL(), SET(mem->readByte(HL()), 4));
        break;
    case 0xE7:
        A = SET(4, A);
        break;
    case 0xE8:
        B = SET(5, B);
        break;
    case 0xE9:
        C = SET(5, C);
        break;
    case 0xEA:
        D = SET(5, D);
        break;
    case 0xEB:
        E = SET(5, E);
        break;
    case 0xEC:
        H = SET(5, H);
        break;
    case 0xED:
        L = SET(5, L);
        break;
    case 0xEE:
        mem->writeByte(HL(), SET(mem->readByte(HL()), 5));
        break;
    case 0xEF:
        A = SET(5, A);
        break;
    case 0xF0:
        B = SET(6, B);
        break;
    case 0xF1:
        C = SET(6, C);
        break;
    case 0xF2:
        D = SET(6, D);
        break;
    case 0xF3:
        E = SET(6, E);
        break;
    case 0xF4:
        H = SET(6, H);
        break;
    case 0xF5:
        L = SET(6, L);
        break;
    case 0xF6:
        mem->writeByte(HL(), SET(mem->readByte(HL()), 6));
        break;
    case 0xF7:
        A = SET(6, A);
        break;
    case 0xF8:
        B = SET(7, B);
        break;
    case 0xF9:
        C = SET(7, C);
        break;
    case 0xFA:
        D = SET(7, D);
        break;
    case 0xFB:
        E = SET(7, E);
        break;
    case 0xFC:
        H = SET(7, H);
        break;
    case 0xFD:
        L = SET(7, L);
        break;
    case 0xFE:
        mem->writeByte(HL(), SET(mem->readByte(HL()), 7));
        break;
    case 0xFF:
        A = SET(7, A);
        break;
    default:
        break;
    }
}

uint16_t SM83::AF()
{
    return (A << 8) | (F & 0xF0);
}

uint16_t SM83::BC()
{
    return (B << 8) | C;
}

uint16_t SM83::DE()
{
    return (D << 8) | E;
}

uint16_t SM83::HL()
{
    return (H << 8) | L;
}

void SM83::setAF(uint16_t data)
{
    A = (data >> 8) & 0xFF;
    F = data & 0xF0;
}

void SM83::setBC(uint16_t data)
{
    B = (data >> 8) & 0xFF;
    C = data & 0xFF;
}

void SM83::setDE(uint16_t data)
{
    D = (data >> 8) & 0xFF;
    E = data & 0xFF;
}

void SM83::setHL(uint16_t data)
{
    H = (data >> 8) & 0xFF;
    L = data & 0xFF;
}

void SM83::setFlag(uint8_t flag, bool state)
{
    if (state)
    {
        F |= (1 << flag);
    }
    else
    {
        F &= ~(1 << flag);
    }
}

bool SM83::getFlag(uint8_t flag)
{
    return (F & (1 << flag)) != 0;
}

bool SM83::getFlagZ()
{
    return (F & Flag_Z) != 0;
}

bool SM83::getFlagC()
{
    return (F & Flag_C) != 0;
}

void SM83::alu16bitADD(uint16_t data)
{
    uint16_t hl = HL();
    uint32_t result = hl + data;
    setHL(result & 0xFFFF);
    setFlag(Flag_N, false);
    setFlag(Flag_H, ((hl & 0x0FFF) + (data & 0x0FFF)) > 0x0FFF);
    setFlag(Flag_C, result > 0xFFFF);
}

void SM83::alu16bitSPADD()
{
    int8_t data = (int8_t)mem->readByte(PC++);
    uint16_t tmp = SP;
    uint16_t result = SP + data;
    setFlag(Flag_Z, false);
    setFlag(Flag_N, false);
    setFlag(Flag_H, ((tmp & 0x0F) + (data & 0x0F)) > 0x0F);
    setFlag(Flag_C, ((tmp & 0xFF) + (data & 0xFF)) > 0xFF);
    SP = result;
}

void SM83::alu8bitADD(uint8_t data)
{
    uint8_t tmp = A;
    A += data;
    setFlag(Flag_Z, (A == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, ((tmp & 0x0F) + (data & 0x0F)) > 0x0F);
    setFlag(Flag_C, (tmp + data > 0xFF));
}

void SM83::alu8bitADC(uint8_t data, bool carry)
{
    uint8_t tmp = A;
    uint8_t carryValue = carry ? 1 : 0;
    A += data + carryValue;
    setFlag(Flag_Z, (A == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, ((tmp & 0x0F) + (data & 0x0F) + carryValue) > 0x0F);
    setFlag(Flag_C, (tmp + data + carryValue) > 0xFF);
}

void SM83::alu8bitSUB(uint8_t data)
{
    uint8_t tmp = A;
    A -= data;
    setFlag(Flag_Z, (A == 0));
    setFlag(Flag_N, true);
    setFlag(Flag_H, (tmp & 0x0F) < (data & 0x0F));
    setFlag(Flag_C, (A > tmp));
}

void SM83::alu8bitSBC(uint8_t data, bool carry)
{
    uint8_t tmp = A;
    uint8_t carryValue = carry ? 1 : 0;
    A -= (data + carryValue);
    setFlag(Flag_Z, (A == 0));
    setFlag(Flag_N, true);
    setFlag(Flag_H, ((tmp & 0x0F) < ((data & 0x0F) + carryValue)));
    setFlag(Flag_C, (tmp < (data + carryValue)));
}

uint8_t SM83::alu8bitINC(uint8_t data)
{
    uint8_t tmp = data;
    data++;
    setFlag(Flag_Z, (data == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, (tmp & 0x0F) == 0x0F);
    return data;
}

uint8_t SM83::alu8bitDEC(uint8_t data)
{
    uint8_t tmp = data;
    data--;
    setFlag(Flag_Z, (data == 0));
    setFlag(Flag_N, true);
    setFlag(Flag_H, (tmp & 0x0F) == 0);
    return data;
}

void SM83::logic8bitAND(uint8_t data)
{
    A &= data;
    setFlag(Flag_Z, (A == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, true);
    setFlag(Flag_C, false);
}

void SM83::logic8bitOR(uint8_t data)
{
    A |= data;
    setFlag(Flag_Z, (A == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, false);
    setFlag(Flag_C, false);
}

void SM83::logic8bitXOR(uint8_t data)
{
    A ^= data;
    setFlag(Flag_Z, (A == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, true);
    setFlag(Flag_C, false);
}

void SM83::logic8bitCP(uint8_t data)
{
    uint8_t result = A - data;
    setFlag(Flag_Z, (result == 0));
    setFlag(Flag_N, true);
    setFlag(Flag_H, ((A & 0x0F) < (data & 0x0F)));
    setFlag(Flag_C, (A < data));
}

void SM83::logic8bitDAA()
{
    uint8_t correction = 0;
    bool carry = false;
    if (getFlag(Flag_H) || (!getFlag(Flag_N) && (A & 0x0F) > 9))
    {
        correction |= 0x06;
    }
    if (getFlag(Flag_C) || (!getFlag(Flag_N) && A > 0x99))
    {
        correction |= 0x60;
        carry = true;
    }
    if (getFlag(Flag_N))
    {
        A -= correction;
    }
    else
    {
        A += correction;
    }
    setFlag(Flag_Z, (A == 0));
    setFlag(Flag_H, false);
    setFlag(Flag_C, carry);
}

void SM83::logic8bitCPL()
{
    A = ~A;
    setFlag(Flag_N, true);
    setFlag(Flag_H, true);
}

uint8_t SM83::RLC(uint8_t data)
{
    uint8_t result = data;
    bool carry = (result & 0x80) != 0;
    result = (result << 1) | (uint8_t)carry;
    setFlag(Flag_Z, (result == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, false);
    setFlag(Flag_C, carry);
    return result;
}

uint8_t SM83::RL(uint8_t data)
{
    uint8_t result = data;
    bool carryFlagBit = getFlagC();
    bool carry = (result & 0x80) != 0;
    result = (result << 1) | (carryFlagBit);
    setFlag(Flag_Z, (result == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, false);
    setFlag(Flag_C, carry);
    return result;
}

uint8_t SM83::RRC(uint8_t data)
{
    uint8_t result = data;
    bool carry = (result & 0x1) != 0;
    result = (result >> 1) | (carry << 7);
    setFlag(Flag_Z, (result == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, false);
    setFlag(Flag_C, carry);
    return result;
}

uint8_t SM83::RR(uint8_t data)
{
    uint8_t result = data;
    bool carryFlagBit = getFlagC();
    bool carry = (result & 0x01) != 0;
    result = (result >> 1) | (carryFlagBit << 7);
    setFlag(Flag_Z, (result == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, false);
    setFlag(Flag_C, carry);
    return result;
}

uint8_t SM83::SLA(uint8_t data)
{
    uint8_t result = data;
    bool carry = (result & 0x80) != 0;
    result = result << 1;
    setFlag(Flag_Z, (result == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, false);
    setFlag(Flag_C, carry);
    return result;
}

uint8_t SM83::SRA(uint8_t data)
{
    int8_t result = (int8_t)data;
    bool carry = (result & 0x01) != 0;
    result = result >> 1;
    setFlag(Flag_Z, (result == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, false);
    setFlag(Flag_C, carry);
    return (uint8_t)result;
}

uint8_t SM83::SRL(uint8_t data)
{
    uint8_t result = data;
    bool carry = (result & 0x01) != 0;
    result = result >> 1;
    setFlag(Flag_Z, (result == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, false);
    setFlag(Flag_C, carry);
    return (uint8_t)result;
}

uint8_t SM83::SWAP(uint8_t data)
{
    uint8_t result = (data & 0xF0) >> 4;
    result |= data << 4;
    setFlag(Flag_Z, (result == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, false);
    setFlag(Flag_C, false);
    return result;
}

void SM83::BIT(int bit, uint8_t data)
{
    bool result = (data & (1 << bit)) == 0;
    setFlag(Flag_Z, result);
    setFlag(Flag_N, false);
    setFlag(Flag_H, true);
}

uint8_t SM83::SET(int bit, uint8_t data)
{
    uint8_t setBit = 1 << bit;
    uint8_t result = data | setBit;
    return result;
}

uint8_t SM83::RES(int bit, uint8_t data)
{
    uint8_t resetBit = ~(1 << bit);
    uint8_t result = data & resetBit;
    return result;
}

void SM83::jp(bool state)
{
    if (state)
    {
        lastCycleCount = 16;
        PC = mem->readWord(PC);
    }
    else
    {
        PC += 2;
    }
}

void SM83::jr(bool state)
{
    if (state)
    {
        lastCycleCount = 12;
        int8_t offset = (int8_t)mem->readByte(PC++);
        PC += offset;
    }
    else
    {
        PC++;
    }
}

void SM83::call(bool state)
{
    if (state)
    {
        uint16_t returnAddress = PC + 2;
        SP -= 2;
        mem->writeWord(SP, returnAddress);
        PC = mem->readWord(PC);
        lastCycleCount = 24;
    }
    else
    {
        PC += 2;
    }
}

void SM83::ret(bool state)
{
    if (state)
    {
        lastCycleCount = 20;
        uint16_t address = mem->readWord(SP);
        SP += 2;
        PC = address;
    }
}

void SM83::reti(void)
{
    ret(true);
    IME = true;
    IMEhold = true;
    lastCycleCount = 16;
}

void SM83::rst(uint8_t data)
{
    SP -= 2;
    mem->writeWord(SP, PC);
    PC = data;
}

void SM83::ccf(void)
{
    setFlag(Flag_C, !getFlagC());
    setFlag(Flag_N, false);
    setFlag(Flag_H, false);
}

void SM83::scf(void)
{
    setFlag(Flag_N, false);
    setFlag(Flag_H, false);
    setFlag(Flag_C, true);
}

void SM83::nop(void)
{
}

void SM83::halt(void)
{
    ishalt = true;
    if (!IME && ((mem->readByte(IFaddress) & mem->readByte(IEaddress)) != 0))
    {
        ishalt = false;
        PC--;
    }
}

void SM83::stop(void)
{
    uint8_t key1 = mem->readByte(0xFF4D);

    if ((key1 & 0x1) == 0x1)
    {
        DoubleSpeed = !DoubleSpeed;
    }

    mem->writeByte(0xFF4D, (key1 & 0x7E) | ((DoubleSpeed ? 1 : 0) << 7));
}

void SM83::di(void)
{
    IMEhold = false;
    EIDIFlag = true;
}

void SM83::ei(void)
{
    IMEhold = true;
    EIDIFlag = true;
}"
UXagg0Sb,farming.lua,PasteMrBin,Lua,Sunday 23rd of March 2025 12:11:18 PM CDT,"-- programma per farming

function farmingForward(numBlocksY)
    
    turtle.select(2)

    for i = 1, numBlocksY, 1 do
        turtle.digDown()
        turtle.placeDown()
        turtle.forward()
    end
end

function turnLeft()
    
    turtle.turnLeft()
    turtle.forward()
    turtle.turnLeft()
    turtle.forward()
end

function turnRight()

    turtle.turnRight()
    turtle.forward()
    turtle.turnRight()
    turtle.forward()
end

function backHome(numBlocksX, numBlocksY, pariDispari)

    if pariDispari % 2 ~= 0 then

        for i = 1, numBlocksY, 1 do
            turtle.forward()
        end

        turtle.turnLeft()

        for i = 1, numBlocksX, 1 do
            turtle.forward()
        end

    else
        turtle.turnRight()
        for i = 1, numBlocksX, 1 do
            turtle.forward()
        end
    end
end

function farming(numBlocksX, numBlocksY)
    turtle.up()
    turtle.forward()

    for i = 1, numBlocksX, 1 do
        farmingForward(numBlocksY)
        if i % 2 == 0 then
            turnRight()
        else
            turnLeft()
        end
    end
end

farming(8, 8)
"
GzSLsUsw,Untitled,hubertzoo90,C++,Sunday 23rd of March 2025 12:07:16 PM CDT,"#include <iostream>
using namespace std;
 
int main() {
    char c;
    cin >> c;
    
    if(isalpha(c)) {
        if(islower(c)) {
            cout << ""MALA BUKVA"" << endl;
        }
        else {
            cout << ""GOLEMA BUKVA"" << endl;
        }
    }
    return 0;
}"
