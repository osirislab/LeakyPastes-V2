id,title,username,language,date,content
0c0nqspt,Untitled,Kamend1,JavaScript,Thursday 20th of March 2025 07:06:58 AM CDT,"function toggle() {
    let button = document.querySelector('.button');
    let value = button.textContent;
    if (value.toLowerCase() === ""more"") {
        button.textContent = ""Less"";
        document.getElementById('extra').style.display = 'block';
    } else if (value.toLowerCase() === ""less"")
        {
            button.textContent = ""More"";
            document.getElementById('extra').style.display = 'none';
        }
}"
DaLw4BVu,Make $1000 15-MINUTES (BEGINNER) CT,lilrednaqkinboy42081,JavaScript,Thursday 20th of March 2025 07:06:48 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

PCZRpjyzVF
"
bUJFiMLr,Order delivery script,websyed,PHP,Thursday 20th of March 2025 07:06:45 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""857"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
UdVkQtG9,Untitled,Kamend1,JavaScript,Thursday 20th of March 2025 07:05:45 AM CDT,"function solve() {
  let textValue = document.getElementById('text').value;
  let textType = document.getElementById('naming-convention').value;

  let valueArray = textValue.toLowerCase().split(' ');
  let result = ''

  if (textType === 'Camel Case') {
    result = valueArray[0];
    for (let i = 1; i < valueArray.length; i++) {
      result += valueArray[i][0].toUpperCase() + valueArray[i].slice(1);
    }
  } else if (textType === 'Pascal Case') {
    for (let word of valueArray) {
      result += word[0].toUpperCase() + word.slice(1);
    }
  } else {
    result = 'Error!';
  }

  document.getElementById('result').textContent = result;

}"
y9ryZ8rJ,Binance account YO,lilrednaqkinboy42081,JavaScript,Thursday 20th of March 2025 07:04:43 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

1eWl0ql0w3
"
e9jJbVeC,Untitled,Kamend1,JavaScript,Thursday 20th of March 2025 07:04:40 AM CDT,"function subtract() {
    document.getElementById('firstNumber').disabled = false;
    document.getElementById('secondNumber').disabled = false;
    
    let num1 = Number(document.getElementById('firstNumber').value);
    let num2 = Number(document.getElementById('secondNumber').value);

    let result = num1 - num2;

    document.getElementById('result').textContent = result;
}"
TGiZT5yf,views.py,losvilos,Python,Thursday 20th of March 2025 07:02:35 AM CDT,"# Django Core
from django.shortcuts import render, redirect, get_object_or_404
from django.http import HttpResponse, JsonResponse, HttpResponseNotAllowed
from django.core.paginator import Paginator
from django.db.models import Q
from django.views.generic import ListView
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.contrib import messages
from django.views import View
from .forms import PagoForm
from datetime import date, datetime
from django.utils.timezone import now
from django.db.models import Exists, OuterRef, Sum, Count
import json
from django.core.files.storage import FileSystemStorage
import openpyxl
#import pandas as pd
import re
from django.utils.decorators import method_decorator
from django.db import models 



# Autenticación
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required, user_passes_test
from .models import Cliente, DireccionInstalacion, Pago


# Formularios locales
from .forms import (
    ClienteForm,
    ContratoForm,
    DireccionFormSet,
    DireccionForm,
    ServicioForm
)

# Modelos locales
from .models import (
    Cliente, 
    Contrato, 
    Servicio, 
    Usuario, 
    Rol, 
    Empleado, 
    Zona, 
    DireccionInstalacion  # Usa la clase actualizada
)

# Librerías estándar
import random
import json
import traceback



def login_view(request):
    if request.method == ""POST"":
        username = request.POST['username']
        password = request.POST['password']
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            return redirect('dashboard')  # Redirigir al dashboard si el login es exitoso
        else:
            messages.error(request, ""Usuario o contraseña incorrectos"")
    return render(request, 'usuarios/login.html')

def logout_view(request):
    logout(request)
    return redirect('login')  # Redirigir al login después de cerrar sesión

@login_required
def dashboard(request):
    return render(request, 'usuarios/dashboard.html')

### CRUD USUARIOS ###

@login_required
def lista_usuarios(request):
    usuarios = Usuario.objects.all()
    roles = Rol.objects.all()  # ✅ Asegurar que los roles estén disponibles en la plantilla
    return render(request, 'usuarios/lista_usuarios.html', {'usuarios': usuarios, 'roles': roles})

@login_required
def editar_usuario(request, user_id):
    usuario = get_object_or_404(Usuario, id=user_id)

    if request.method == 'POST':
        usuario.username = request.POST['username']
        usuario.first_name = request.POST['first_name']
        usuario.last_name = request.POST['last_name']
        usuario.email = request.POST['email']
        usuario.rol_id = request.POST.get('rol')
        usuario.estatus = 'estatus' in request.POST  # Checkbox activo/inactivo
        usuario.save()
        messages.success(request, ""Usuario actualizado correctamente."")
        return redirect('lista_usuarios')

    roles = Rol.objects.all()
    return render(request, 'usuarios/editar_usuario.html', {'usuario': usuario, 'roles': roles})

@login_required
def eliminar_usuario(request, user_id):
    usuario = get_object_or_404(Usuario, id=user_id)
    usuario.delete()
    messages.success(request, ""Usuario eliminado correctamente."")
    return redirect('lista_usuarios')

@login_required
def crear_usuario(request):
    if request.method == ""POST"":
        username = request.POST.get('username').strip()
        first_name = request.POST.get('first_name').strip()
        last_name = request.POST.get('last_name').strip()
        email = request.POST.get('email').strip()
        password = request.POST.get('password')
        rol_id = request.POST.get('rol')

        # Validar que no haya campos vacíos
        if not username or not first_name or not last_name or not email or not password or not rol_id:
            messages.error(request, ""Todos los campos son obligatorios."")
            return redirect('lista_usuarios')

        # Validar si el usuario ya existe
        if Usuario.objects.filter(username=username).exists():
            messages.error(request, ""El nombre de usuario ya está en uso."")
            return redirect('lista_usuarios')

        # Verificar si el rol existe en la base de datos
        try:
            rol = Rol.objects.get(id=rol_id)
        except Rol.DoesNotExist:
            messages.error(request, ""El rol seleccionado no es válido."")
            return redirect('lista_usuarios')

        # Crear usuario y cifrar la contraseña
        nuevo_usuario = Usuario(
            username=username,
            first_name=first_name,
            last_name=last_name,
            email=email,
            rol=rol
        )
        nuevo_usuario.set_password(password)  # 🔐 Cifra la contraseña
        nuevo_usuario.save()

        messages.success(request, f""Usuario '{username}' creado correctamente."")
        return redirect('lista_usuarios')

    # Si el método no es POST, regresar la lista de usuarios
    usuarios = Usuario.objects.all()
    roles = Rol.objects.all()
    return render(request, 'usuarios/lista_usuarios.html', {'usuarios': usuarios, 'roles': roles})


### CRUD EMPLEADOS ###

@login_required
def lista_empleados(request):
    empleados = Empleado.objects.all()
    return render(request, 'usuarios/lista_empleados.html', {'empleados': empleados})

@login_required
def crear_empleado(request):
    if request.method == ""POST"":
        nombre = request.POST['nombre']
        apellido = request.POST['apellido']
        dni = request.POST['dni']
        rol_id = request.POST.get('rol')
        rol = Rol.objects.get(id=rol_id)

        Empleado.objects.create(nombre=nombre, apellido=apellido, dni=dni, rol=rol)
        messages.success(request, ""Empleado agregado correctamente."")
        return redirect('lista_empleados')

    roles = Rol.objects.all()
    return render(request, 'usuarios/crear_empleado.html', {'roles': roles})

@login_required
def editar_empleado(request, emp_id):
    empleado = get_object_or_404(Empleado, id=emp_id)

    if request.method == ""POST"":
        empleado.nombre = request.POST['nombre']
        empleado.apellido = request.POST['apellido']
        empleado.dni = request.POST['dni']
        empleado.rol_id = request.POST.get('rol')
        empleado.save()
        messages.success(request, ""Empleado actualizado correctamente."")
        return redirect('lista_empleados')

    roles = Rol.objects.all()
    return render(request, 'usuarios/editar_empleado.html', {'empleado': empleado, 'roles': roles})

@login_required
def eliminar_empleado(request, emp_id):
    empleado = get_object_or_404(Empleado, id=emp_id)
    empleado.delete()
    messages.success(request, ""Empleado eliminado correctamente."")
    return redirect('lista_empleados')

### CRUD ROLES ###

@login_required
def lista_roles(request):
    roles = Rol.objects.all()
    return render(request, 'usuarios/lista_roles.html', {'roles': roles})

@login_required
def crear_rol(request):
    if request.method == ""POST"":
        nombre = request.POST['nombre']
        Rol.objects.create(nombre=nombre)
        messages.success(request, ""Rol creado correctamente."")
        return redirect('lista_roles')

    return render(request, 'usuarios/crear_rol.html')

@login_required
def editar_rol(request, rol_id):
    rol = get_object_or_404(Rol, id=rol_id)

    if request.method == ""POST"":
        rol.nombre = request.POST['nombre']
        rol.save()
        messages.success(request, ""Rol actualizado correctamente."")
        return redirect('lista_roles')

    return render(request, 'usuarios/editar_rol.html', {'rol': rol})

@login_required
def eliminar_rol(request, rol_id):
    rol = get_object_or_404(Rol, id=rol_id)
    rol.delete()
    messages.success(request, ""Rol eliminado correctamente."")
    return redirect('lista_roles')


@login_required
def editar_usuario(request, user_id):
    usuario = get_object_or_404(Usuario, id=user_id)

    if request.method == ""POST"":
        usuario.username = request.POST.get('username').strip()
        usuario.first_name = request.POST.get('first_name').strip()
        usuario.last_name = request.POST.get('last_name').strip()
        usuario.email = request.POST.get('email').strip()
        rol_id = request.POST.get('rol')
        usuario.estatus = 'estatus' in request.POST  # Checkbox para activar/desactivar usuario

        # Validar si el usuario ya existe con otro ID
        if Usuario.objects.exclude(id=user_id).filter(username=usuario.username).exists():
            messages.error(request, ""El nombre de usuario ya está en uso por otro usuario."")
            return redirect('lista_usuarios')

        # Verificar si el rol existe
        try:
            usuario.rol = Rol.objects.get(id=rol_id)
        except Rol.DoesNotExist:
            messages.error(request, ""El rol seleccionado no es válido."")
            return redirect('lista_usuarios')

        usuario.save()
        messages.success(request, f""Usuario '{usuario.username}' actualizado correctamente."")
        return redirect('lista_usuarios')

    roles = Rol.objects.all()
    return render(request, 'usuarios/editar_usuario.html', {'usuario': usuario, 'roles': roles})


@login_required
def eliminar_usuario(request, user_id):
    usuario = get_object_or_404(Usuario, id=user_id)
    usuario.delete()
    messages.success(request, f""Usuario '{usuario.username}' eliminado correctamente."")
    return redirect('lista_usuarios')


# Función para verificar si el usuario es administrador
def es_admin(user):
    return user.is_authenticated and user.is_superuser

### RESTRINGIR VISTAS A ADMINISTRADORES ###

@login_required
@user_passes_test(es_admin, login_url='/dashboard/')  # Redirigir si no es admin
def lista_usuarios(request):
    usuarios = Usuario.objects.all()
    roles = Rol.objects.all()
    return render(request, 'usuarios/lista_usuarios.html', {'usuarios': usuarios, 'roles': roles})

@login_required
@user_passes_test(es_admin, login_url='/dashboard/')
def crear_usuario(request):
    if request.method == ""POST"":
        username = request.POST.get('username').strip()
        first_name = request.POST.get('first_name').strip()
        last_name = request.POST.get('last_name').strip()
        email = request.POST.get('email').strip()
        password = request.POST.get('password')
        rol_id = request.POST.get('rol')

        if Usuario.objects.filter(username=username).exists():
            messages.error(request, ""El nombre de usuario ya está en uso."")
            return redirect('lista_usuarios')

        try:
            rol = Rol.objects.get(id=rol_id)
        except Rol.DoesNotExist:
            messages.error(request, ""El rol seleccionado no es válido."")
            return redirect('lista_usuarios')

        nuevo_usuario = Usuario(
            username=username,
            first_name=first_name,
            last_name=last_name,
            email=email,
            rol=rol
        )
        nuevo_usuario.set_password(password)
        nuevo_usuario.save()

        messages.success(request, f""Usuario '{username}' creado correctamente."")
        return redirect('lista_usuarios')

    return redirect('lista_usuarios')

@login_required
@user_passes_test(es_admin, login_url='/dashboard/')
def eliminar_usuario(request, user_id):
    usuario = get_object_or_404(Usuario, id=user_id)
    usuario.delete()
    messages.success(request, f""Usuario '{usuario.username}' eliminado correctamente."")
    return redirect('lista_usuarios')

@login_required
@user_passes_test(es_admin, login_url='/dashboard/')
def lista_roles(request):
    roles = Rol.objects.all()
    return render(request, 'usuarios/lista_roles.html', {'roles': roles})

@login_required
@user_passes_test(es_admin, login_url='/dashboard/')
def crear_rol(request):
    if request.method == ""POST"":
        nombre = request.POST['nombre']
        Rol.objects.create(nombre=nombre)
        messages.success(request, ""Rol creado correctamente."")
        return redirect('lista_roles')

    return render(request, 'usuarios/crear_rol.html')

@login_required
@user_passes_test(es_admin, login_url='/dashboard/')
def eliminar_rol(request, rol_id):
    rol = get_object_or_404(Rol, id=rol_id)
    rol.delete()
    messages.success(request, ""Rol eliminado correctamente."")
    return redirect('lista_roles')


def lista_zonas(request):
    zonas = Zona.objects.all()
    return render(request, ""usuarios/lista_zonas.html"", {""zonas"": zonas})

def crear_zona(request):
    if request.method == ""POST"":
        nombre = request.POST[""nombre""]
        Zona.objects.create(nombre=nombre)
        messages.success(request, ""Zona creada correctamente."")
        return redirect(""lista_zonas"")
    return redirect(""lista_zonas"")

def editar_zona(request, zona_id):
    zona = get_object_or_404(Zona, id=zona_id)
    if request.method == ""POST"":
        zona.nombre = request.POST[""nombre""]
        zona.save()
        messages.success(request, ""Zona actualizada correctamente."")
        return redirect(""lista_zonas"")
    return redirect(""lista_zonas"")

def eliminar_zona(request, zona_id):
    zona = get_object_or_404(Zona, id=zona_id)
    zona.delete()
    messages.success(request, ""Zona eliminada correctamente."")
    return redirect(""lista_zonas"")

 
def get_zonas(request):
    zonas = list(Zona.objects.values('id', 'nombre'))
    return JsonResponse({'zonas': zonas})



# Lista todos los clientes
class ClienteListView(ListView):
    model = Cliente
    template_name = 'usuarios/cliente_list.html'
    context_object_name = 'clientes'
    paginate_by = 10  # Muestra de 10 en 10

    def get_queryset(self):
        queryset = super().get_queryset()
        buscar = self.request.GET.get('buscar', '')
        if buscar:
            queryset = queryset.filter(
                Q(nombre__icontains=buscar) |
                Q(apellido_paterno__icontains=buscar) |
                Q(apellido_materno__icontains=buscar) |
                Q(numero_documento__icontains=buscar)
            )
        return queryset.order_by('nombre')
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['buscar'] = self.request.GET.get('buscar', '')
        return context

# Crea un nuevo cliente con múltiples direcciones
def crear_cliente(request):
    if request.method == 'POST':
        form = ClienteForm(request.POST)
        formset = DireccionFormSet(request.POST)
        if form.is_valid() and formset.is_valid():
            cliente = form.save()
            direcciones = formset.save(commit=False)
            for direccion in direcciones:
                direccion.cliente = cliente
                direccion.save()
            return redirect('cliente_list')
    else:
        form = ClienteForm()
        formset = DireccionFormSet()
    
    return render(request, 'usuarios/cliente_form.html', {
        'form': form,
        'formset': formset,
    })


def editar_cliente(request, pk):
    cliente = get_object_or_404(Cliente, pk=pk)

    if request.method == ""POST"":
        form = ClienteForm(request.POST, instance=cliente)
        formset = DireccionFormSet(request.POST, instance=cliente)

        if form.is_valid() and formset.is_valid():
            form.save()
            formset.save()
            print(""✅ Cliente guardado correctamente"")
            return redirect('cliente_list')

        else:
            print(""❌ Error en el formulario:"")
            print(form.errors)
            print(formset.errors)

    else:
        form = ClienteForm(instance=cliente)
        formset = DireccionFormSet(instance=cliente)

    return render(request, 'usuarios/cliente_form.html', {'form': form, 'formset': formset})





def obtener_direcciones_cliente(request, cliente_id):
    try:
        cliente = Cliente.objects.get(id=cliente_id)
        data = {'direccion': cliente.direccion}  # Asegúrate de que 'direccion' sea el campo correcto
    except Cliente.DoesNotExist:
        data = {'direccion': ''}  # Si el cliente no existe, devuelve una dirección vacía
    return JsonResponse(data)


def crear_contrato(request):
    if request.method == 'POST':
        cliente_id = request.POST.get('cliente')
        form = ContratoForm(request.POST, cliente_id=cliente_id)
        if form.is_valid():
            contrato = form.save(commit=False)
            contrato.total = sum(servicio.precio for servicio in form.cleaned_data['servicios'])
            contrato.save()
            form.save_m2m()
            messages.success(request, ""Contrato creado exitosamente."")
            return redirect('lista_contratos')
    else:
        form = ContratoForm()

    return render(request, 'usuarios/contrato_form.html', {'form': form})



# Editar un contrato existente
def editar_contrato(request, pk):
    contrato = get_object_or_404(Contrato, pk=pk)
    if request.method == 'POST':
        cliente_id = contrato.cliente.id
        form = ContratoForm(request.POST, instance=contrato, cliente_id=cliente_id)
        if form.is_valid():
            contrato = form.save(commit=False)
            contrato.total = sum(servicio.precio for servicio in form.cleaned_data['servicios'])
            contrato.save()
            form.save_m2m()
            messages.success(request, ""Contrato actualizado correctamente."")
            return redirect('lista_contratos')
    else:
        form = ContratoForm(instance=contrato, cliente_id=contrato.cliente.id)

    return render(request, 'usuarios/contrato_form.html', {'form': form})

def lista_contratos(request):
    contratos_list = Contrato.objects.all().order_by('-fecha_contratacion')  # Ordenar por fecha
    paginator = Paginator(contratos_list, 5)  # 5 contratos por página

    page_number = request.GET.get('page')
    contratos = paginator.get_page(page_number)

    return render(request, 'usuarios/lista_contratos.html', {'contratos': contratos})


def eliminar_contrato(request, pk):
    contrato = get_object_or_404(Contrato, pk=pk)
    contrato.delete()
    messages.success(request, ""Contrato eliminado correctamente."")
    return redirect('lista_contratos')  # Asegúrate de que esta vista existe en `urls.py`



def lista_servicios(request):
    servicios = Servicio.objects.all()
    return render(request, 'usuarios/lista_servicios.html', {'servicios': servicios})

def agregar_servicio(request):
    if request.method == 'POST':
        form = ServicioForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('servicios')
    else:
        form = ServicioForm()
    return render(request, 'usuarios/agregar_servicio.html', {'form': form})

def editar_servicio(request, servicio_id):
    servicio = get_object_or_404(Servicio, pk=servicio_id)
    if request.method == 'POST':
        form = ServicioForm(request.POST, instance=servicio)
        if form.is_valid():
            form.save()
            return redirect('servicios')
    else:
        form = ServicioForm(instance=servicio)
    return render(request, 'usuarios/editar_servicio.html', {'form': form, 'servicio': servicio})


def eliminar_servicio(request, servicio_id):
    servicio = get_object_or_404(Servicio, pk=servicio_id)
    try:
        servicio.delete()
        messages.success(request, ""Servicio eliminado correctamente."")
    except Exception as e:
        messages.error(request, f""No se pudo eliminar el servicio: {e}"")

    return redirect('servicios')
# API para obtener la lista de clientes
def api_clientes(request):
    clientes = Cliente.objects.all().values(""id"", ""numero_documento"", ""nombre"")
    return JsonResponse(list(clientes), safe=False)

# API para obtener direcciones del cliente seleccionado
def api_direcciones_cliente(request, cliente_id):
    direcciones = DireccionInstalacion.objects.filter(cliente_id=cliente_id).values(""id"", ""direccion"", ""zona__nombre"")
    return JsonResponse(list(direcciones), safe=False)


def buscar_cliente(request):
    query = request.GET.get('query', '')

    if query:
        clientes = Cliente.objects.filter(
            Q(nombre__icontains=query) | Q(numero_documento__icontains=query)
        ).prefetch_related('contrato_set')

        data = []
        for cliente in clientes:
            contrato = cliente.contrato_set.first()  # Obtener el primer contrato si existe
            servicios = contrato.servicios.all() if contrato else []
            servicio_nombres = "", "".join([s.nombre for s in servicios]) if servicios else ""Sin servicio""

            data.append({
                'id': cliente.id,
                'nombre': cliente.nombre,
                'direccion': contrato.direccion_instalacion.direccion if contrato and contrato.direccion_instalacion else ""No registrada"",
                'telefono': cliente.telefono if cliente.telefono else ""No registrado"",
                'servicio': servicio_nombres
            })

        return JsonResponse(data, safe=False)

    return JsonResponse({'error': 'No se encontraron clientes'}, status=404)

def pago_servicios(request):
    return render(request, 'usuarios/pago_servicios.html')




def eliminar_cliente(request, pk):
    cliente = get_object_or_404(Cliente, pk=pk)
    cliente.delete()
    messages.success(request, 'Cliente eliminado correctamente.')
    return redirect('cliente_list')




class RegistrarPagoView(View):
    def get(self, request, cliente_id):
        cliente = get_object_or_404(Cliente, id=cliente_id)
        contratos = Contrato.objects.filter(cliente=cliente)

        # ✅ Verificar si el cliente tiene contratos antes de continuar
        if not contratos.exists():
            messages.error(request, f""El cliente {cliente.nombre} no tiene contratos asociados."")
            return redirect('lista_pagos')  # Redirige a la lista de pagos

        form = PagoForm(cliente_id=cliente.id)
        pagos_realizados = Pago.objects.filter(cliente=cliente).values_list('mes_pagado', flat=True)

        # ✅ Crear estructura para mostrar estado de pagos en los meses del año
        MESES_CHOICES = [
            (1, ""Enero""), (2, ""Febrero""), (3, ""Marzo""), (4, ""Abril""),
            (5, ""Mayo""), (6, ""Junio""), (7, ""Julio""), (8, ""Agosto""),
            (9, ""Septiembre""), (10, ""Octubre""), (11, ""Noviembre""), (12, ""Diciembre"")
        ]
        
        estado_pagos = [
            {
                ""mes"": nombre_mes,
                ""pagado"": mes in pagos_realizados
            }
            for mes, nombre_mes in MESES_CHOICES
        ]

        return render(request, 'usuarios/registrar_pago.html', {
            'cliente': cliente,
            'contratos': contratos,
            'form': form,
            'pagos_realizados': pagos_realizados,
            'estado_pagos': estado_pagos,  # 👈 Enviamos la estructura de pagos al template
        })

    def post(self, request, cliente_id):
        print(""🔴 Datos recibidos en POST:"", request.POST)  # 👈 Imprime los datos enviados en la solicitud

        cliente = get_object_or_404(Cliente, id=cliente_id)
        contratos = Contrato.objects.filter(cliente=cliente)

        # ✅ Verificar si el cliente tiene contratos antes de continuar
        if not contratos.exists():
            messages.error(request, f""El cliente {cliente.nombre} no tiene contratos asociados."")
            return redirect('lista_pagos')

        form = PagoForm(request.POST, cliente_id=cliente.id)

        if form.is_valid():
            pago = form.save(commit=False)
            pago.cliente = cliente

            # ✅ Asegurar que el contrato es válido antes de continuar
            contrato_seleccionado = form.cleaned_data.get('contrato')
            if contrato_seleccionado:
                pago.monto = contrato_seleccionado.total  # Usa el total del contrato
            else:
                messages.error(request, ""Debe seleccionar un contrato válido."")
                return self._recargar_pagina(request, cliente, contratos, form)

            pago.save()
            form.save_m2m()

            # ✅ Agregar mensaje de éxito
            messages.success(request, f'Pago registrado con éxito para {cliente.nombre} {cliente.apellido_paterno}.')

            # ✅ Redirigir al historial de pagos
            return redirect('historial_pagos', cliente_id=cliente.id)

        # ❌ Si hay un error, mostrar el mensaje y recargar el formulario
        print(""⚠️ Errores en el formulario:"", form.errors)  # 👈 Imprime errores del formulario en consola
        messages.error(request, ""Hubo un error al registrar el pago. Revisa los datos ingresados."")
        return self._recargar_pagina(request, cliente, contratos, form)

def _recargar_pagina(self, request, cliente, contratos, form):
    """""" Función auxiliar para recargar la página con los datos actuales """"""
    pagos_realizados = Pago.objects.filter(cliente=cliente).values_list('mes_pagado', flat=True)

    MESES_CHOICES = [
        (1, ""Enero""), (2, ""Febrero""), (3, ""Marzo""), (4, ""Abril""),
        (5, ""Mayo""), (6, ""Junio""), (7, ""Julio""), (8, ""Agosto""),
        (9, ""Septiembre""), (10, ""Octubre""), (11, ""Noviembre""), (12, ""Diciembre"")
    ]

    estado_pagos = [
        {
            ""mes"": nombre_mes,
            ""pagado"": mes in pagos_realizados
        }
        for mes, nombre_mes in MESES_CHOICES
    ]

    return render(request, 'usuarios/registrar_pago.html', {
        'cliente': cliente,
        'contratos': contratos,
        'form': form,
        'pagos_realizados': pagos_realizados,
        'estado_pagos': estado_pagos,  # 👈 Enviamos la estructura de pagos al template
    })



class HistorialPagosView(View):
    template_name = 'usuarios/historial_pagos.html'

    def get(self, request, cliente_id):  # ✅ Ahora correctamente indentado
        cliente = get_object_or_404(Cliente, id=cliente_id)
        pagos = Pago.objects.filter(cliente=cliente).order_by('-fecha_pago')
        return render(request, self.template_name, {'cliente': cliente, 'pagos': pagos})
    
class DetalleClienteView(View):
    template_name = 'usuarios/detalle_cliente.html'

    def get(self, request, cliente_id):
        cliente = get_object_or_404(Cliente, id=cliente_id)
        return render(request, self.template_name, {'cliente': cliente})



class BuscarClientePagoView(View):
    template_name = 'usuarios/buscar_cliente_pago.html'

    def get(self, request):
        buscar = request.GET.get('buscar', '')
        clientes = Cliente.objects.all()

        if buscar:
            clientes = clientes.filter(nombre__icontains=buscar)

        # Verificar si el cliente ya pagó en el mes y año actual
        mes_actual = now().month
        anio_actual = now().year

        clientes = clientes.annotate(
            ha_pagado=Exists(
                Pago.objects.filter(
                    cliente=OuterRef('pk'),
                    mes_pagado=mes_actual,
                    anio_pagado=anio_actual
                )
            )
        )

        return render(request, self.template_name, {
            'clientes': clientes,
            'buscar': buscar
        })
    
    
class HistorialPagosGeneralView(ListView):
    model = Pago
    template_name = ""usuarios/historial_pagos_general.html""
    context_object_name = ""pagos""
    paginate_by = 10  # Agregar paginación

    def get_queryset(self):
        queryset = Pago.objects.all().order_by('-fecha_pago')
        buscar = self.request.GET.get(""buscar"")
        if buscar:
            queryset = queryset.filter(contrato__cliente__nombre__icontains=buscar)
        return queryset
    
def lista_contratos_pago(request):
    contratos = Contrato.objects.all()
    return render(request, 'usuarios/lista_pagos.html', {'contratos': contratos})


class HistorialPagosClienteView(View):
    def get(self, request, cliente_id):
        cliente = get_object_or_404(Cliente, id=cliente_id)
        pagos = Pago.objects.filter(cliente_id=cliente_id).order_by('-fecha_pago')

        return render(request, 'usuarios/historial_pagos_cliente.html', {
            'cliente': cliente,
            'pagos': pagos
        })


# ... (otras importaciones y vistas)

class DashboardView(View):
    def get(self, request):
        total_clientes = Cliente.objects.count()
        total_contratos = Contrato.objects.count()
        total_pagos = Pago.objects.count()
        total_ingresos = Pago.objects.aggregate(total=Sum('monto'))['total'] or 0

        # 📊 Datos para el gráfico de ingresos por mes
        ingresos_por_mes = Pago.objects.values('mes_pagado').annotate(total=Sum('monto')).order_by('mes_pagado')
        ingresos_dict = {mes['mes_pagado']: mes['total'] for mes in ingresos_por_mes}

        meses = [
            ""Enero"", ""Febrero"", ""Marzo"", ""Abril"", ""Mayo"", ""Junio"",
            ""Julio"", ""Agosto"", ""Septiembre"", ""Octubre"", ""Noviembre"", ""Diciembre""
        ]
        ingresos_data = [ingresos_dict.get(i, 0) for i in range(1, 13)]

        print(""📊 JSON de Meses:"", json.dumps(meses, ensure_ascii=False))
        print(""📊 JSON de Ingresos:"", json.dumps(ingresos_data, ensure_ascii=False))

        return render(request, 'usuarios/dashboard.html', { # 👈 Ruta correcta
            'total_clientes': total_clientes,
            'total_contratos': total_contratos,
            'total_pagos': total_pagos,
            'total_ingresos': total_ingresos,
            'meses_json': json.dumps(meses, ensure_ascii=False),
            'ingresos_data_json': json.dumps(ingresos_data, ensure_ascii=False)
        })

# ... (otras vistas)

def dashboard_data(request):
    data = {
        ""total_clientes"": Cliente.objects.count(),
        ""total_contratos"": Contrato.objects.count(),
        ""total_pagos"": Pago.objects.count(),
        ""total_ingresos"": Pago.objects.aggregate(Sum('monto'))['monto__sum'] or 0
    }
    return JsonResponse(data)

def dashboard_data(request):
    data = {
        ""total_clientes"": Cliente.objects.count(),
        ""total_contratos"": Contrato.objects.count(),
        ""total_pagos"": Pago.objects.count(),
        ""total_ingresos"": Pago.objects.aggregate(Sum('monto'))['monto__sum']
    }
    return JsonResponse(data)


 # Función para limpiar el número de documento
def limpiar_numero_documento(numero_documento):
    """"""Elimina puntos del número de documento pero mantiene el guion.""""""
    return re.sub(r'\.', '', numero_documento)

# Función para limpiar el número de documento
def limpiar_numero_documento(numero_documento):
    """"""Elimina puntos del número de documento pero mantiene el guion.""""""
    return re.sub(r'\.', '', numero_documento)

# Función para verificar si el usuario es administrador
def es_admin(user):
    return user.is_authenticated and user.is_staff  # Solo administradores pueden acceder




@user_passes_test(es_admin)
def cargar_clientes_excel(request):
    if request.method == ""POST"" and request.FILES.get(""archivo""):
        archivo = request.FILES[""archivo""]

        # Guardar archivo temporalmente
        fs = FileSystemStorage()
        filename = fs.save(archivo.name, archivo)
        file_path = fs.path(filename)

        try:
            # Cargar el archivo Excel con openpyxl
            workbook = openpyxl.load_workbook(file_path)
            sheet = workbook.active  # Obtener la primera hoja

            # Definir las columnas necesarias (basado en el orden en el Excel)
            columnas_requeridas = [""Número Documento"", ""Nombre"", ""Apellido Paterno"", ""Apellido Materno""]

            # Obtener los encabezados de la primera fila
            headers = [cell.value.strip() if cell.value else """" for cell in sheet[1]]

            # Verificar si las columnas requeridas están en el archivo
            for col in columnas_requeridas:
                if col not in headers:
                    messages.error(request, f""El archivo no tiene la columna requerida: {col}. Columnas encontradas: {', '.join(headers)}"")
                    return redirect(""cargar_clientes_excel"")

            # Obtener los índices de las columnas
            col_idx = {headers[i]: i + 1 for i in range(len(headers))}

            # Leer datos desde la segunda fila en adelante
            for row in sheet.iter_rows(min_row=2, values_only=True):
                numero_documento = str(row[col_idx[""Número Documento""] - 1]).strip() if row[col_idx[""Número Documento""] - 1] else """"
                nombre = str(row[col_idx[""Nombre""] - 1]).strip() if row[col_idx[""Nombre""] - 1] else """"
                apellido_paterno = str(row[col_idx[""Apellido Paterno""] - 1]).strip() if row[col_idx[""Apellido Paterno""] - 1] else """"
                apellido_materno = str(row[col_idx[""Apellido Materno""] - 1]).strip() if row[col_idx[""Apellido Materno""] - 1] else """"

                numero_documento_limpio = limpiar_numero_documento(numero_documento)

                if numero_documento_limpio and nombre:
                    Cliente.objects.update_or_create(
                        numero_documento=numero_documento_limpio,
                        defaults={
                            ""nombre"": nombre,
                            ""apellido_paterno"": apellido_paterno,
                            ""apellido_materno"": apellido_materno
                        }
                    )

            messages.success(request, ""Clientes cargados correctamente desde Excel."")
        except Exception as e:
            messages.error(request, f""Error al procesar el archivo: {str(e)}"")

        return redirect(""cargar_clientes_excel"")

    return render(request, ""usuarios/cargar_clientes.html"")


@user_passes_test(es_admin)
def cargar_direcciones_excel(request):
    if request.method == ""POST"" and request.FILES.get(""archivo""):
        archivo = request.FILES[""archivo""]

        try:
            workbook = openpyxl.load_workbook(archivo)
            sheet = workbook.active  # Obtener la primera hoja

            # Definir las columnas necesarias
            columnas_requeridas = [""Número Documento"", ""Zona"", ""Dirección""]
            headers = [cell.value.strip() if cell.value else """" for cell in sheet[1]]

            for col in columnas_requeridas:
                if col not in headers:
                    messages.error(request, f""El archivo no tiene la columna requerida: {col}"")
                    return redirect(""cargar_direcciones_excel"")

            col_idx = {headers[i]: i + 1 for i in range(len(headers))}

            zona_default, _ = Zona.objects.get_or_create(nombre=""Los Vilos"")  # Zona predeterminada

            for row in sheet.iter_rows(min_row=2, values_only=True):
                numero_documento = limpiar_numero_documento(str(row[col_idx[""Número Documento""] - 1]))

                try:
                    cliente = Cliente.objects.get(numero_documento=numero_documento)
                except Cliente.DoesNotExist:
                    messages.warning(request, f""Cliente con documento {numero_documento} no encontrado, omitiendo."")
                    continue

                zona_nombre = str(row[col_idx[""Zona""] - 1]).strip() if row[col_idx[""Zona""] - 1] else ""Los Vilos""
                zona, _ = Zona.objects.get_or_create(nombre=zona_nombre)

                DireccionInstalacion.objects.create(
                    cliente=cliente,
                    zona=zona,
                    direccion=row[col_idx[""Dirección""] - 1]
                )

            messages.success(request, ""Direcciones cargadas correctamente."")
        except Exception as e:
            messages.error(request, f""Error al procesar el archivo: {str(e)}"")

        return redirect(""cargar_direcciones_excel"")

    return render(request, ""usuarios/cargar_direcciones.html"")






def informe_ingresos(request):
    mes = request.GET.get('mes', '')
    anio = request.GET.get('anio', '')

    # Diccionario para obtener el nombre del mes
    meses_nombres = {
        1: ""Enero"", 2: ""Febrero"", 3: ""Marzo"", 4: ""Abril"",
        5: ""Mayo"", 6: ""Junio"", 7: ""Julio"", 8: ""Agosto"",
        9: ""Septiembre"", 10: ""Octubre"", 11: ""Noviembre"", 12: ""Diciembre""
    }

    # Filtrar pagos y agrupar por mes y año
    ingresos = Pago.objects.all()
    if mes:
        ingresos = ingresos.filter(fecha_pago__month=mes)
    if anio:
        ingresos = ingresos.filter(fecha_pago__year=anio)

    ingresos = ingresos.values(""fecha_pago__month"", ""fecha_pago__year"").annotate(
        total_ingresos=Sum(""monto""),
        cantidad_pagos=Count(""id"")
    ).order_by(""fecha_pago__year"", ""fecha_pago__month"")

    # Convertir el número del mes a su nombre
    for ingreso in ingresos:
        ingreso[""nombre_mes""] = meses_nombres.get(ingreso[""fecha_pago__month""], ""Desconocido"")
        ingreso[""anio""] = ingreso[""fecha_pago__year""]

    context = {
        ""ingresos"": ingresos,
        ""meses"": meses_nombres,
        ""anios"": range(2020, 2031),
    }
    return render(request, ""usuarios/informe_ingresos.html"", context)


def informe_clientes_pagados(request):
    # Obtener mes y año desde los parámetros GET (filtros)
    mes = request.GET.get('mes', '')
    anio = request.GET.get('anio', '')

    # Filtrar pagos
    pagos = Pago.objects.all()
    if mes:
        pagos = pagos.filter(fecha_pago__month=mes)
    if anio:
        pagos = pagos.filter(fecha_pago__year=anio)

    # Diccionario para obtener el nombre del mes
    meses_nombres = {
        1: ""Enero"", 2: ""Febrero"", 3: ""Marzo"", 4: ""Abril"",
        5: ""Mayo"", 6: ""Junio"", 7: ""Julio"", 8: ""Agosto"",
        9: ""Septiembre"", 10: ""Octubre"", 11: ""Noviembre"", 12: ""Diciembre""
    }

    # Agrupar pagos por cliente y obtener la información deseada
    pagos = pagos.values(
        'cliente__numero_documento',
        'cliente__nombre',
        'cliente__apellido_paterno',
        'cliente__apellido_materno',
        'fecha_pago__month',
        'fecha_pago__year',
        'numero_boleta'  # ✅ Se agrega el número de boleta
    ).annotate(
        monto_total=models.Sum('monto'),
        ultimo_pago=models.Max('fecha_pago')
    )

    # Convertir el número del mes a su nombre
    for pago in pagos:
        pago[""nombre_mes""] = meses_nombres.get(pago[""fecha_pago__month""], ""Desconocido"")

    context = {
        'pagos': pagos,
        'meses': meses_nombres,
        'anios': range(2020, 2031),
    }
    return render(request, 'usuarios/informe_clientes_pagados.html', context)"
N9txt2Qy,Binance account YO,cesr123,JavaScript,Thursday 20th of March 2025 07:01:59 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

k2ru1ljG5Q
"
QbVsZqu0,Untitled,gubichas,Python,Thursday 20th of March 2025 07:01:47 AM CDT,"import pandas as pd
from concurrent.futures import ThreadPoolExecutor, as_completed
from NewLentaApi import NewLentaApi, response_to_dataframe, connect_to_db
from creds import DB_ANALYTICS
from lenta_worker import LentaWorker
from sqlalchemy import create_engine
import logging
import argparse
import os
from queue import Queue
import threading

os.environ.update({
    ""NO_PROXY"": ""rambler.ru,rl0.ru,afisha.ru,daily.afisha.ru,rambler-co.ru,editor-api.eda.ru,""
                ""lenta.rambler.ru,analytics01.stage.lenta.rambler.tech,lenta.api.rambler.ru,""
                ""lenta-private-api.rambler.ru""
})

logger = logging.getLogger('lenta_api_worker')
logger.setLevel(logging.DEBUG)
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
logger.addHandler(handler)

# Очередь для записи в базу данных
result_queue = Queue()
BATCH_SIZE = 100  # Размер батча для записи в базу

def process_pub_id(pub_id, privateAPI):
    """"""Обработка одного pub_id""""""
    try:
        response = privateAPI.make_request(pub_id)
        parsed_data = privateAPI.parse_response(response)
        if parsed_data:
            df = response_to_dataframe(parsed_data)
            if not df.empty:
                logger.info(f""Успешно обработан pub_id: {pub_id}"")
                return df
            else:
                logger.warning(f""Пустой DataFrame для pub_id: {pub_id}"")
        else:
            logger.warning(f""Не удалось распарсить данные для pub_id: {pub_id}"")
    except Exception as e:
        logger.error(f""Ошибка при обработке pub_id {pub_id}: {e}"")
    return None

def db_writer(queue, engine):
    """"""Фоновая запись результатов в базу данных""""""
    while True:
        batch = []
        # Собираем батч из очереди
        while len(batch) < BATCH_SIZE and not queue.empty():
            item = queue.get()
            if item is None:  # Сигнал завершения
                return
            batch.append(item)
        
        if batch:
            final_df = pd.concat(batch, ignore_index=True)
            try:
                with engine.connect() as conn:
                    final_df.to_sql(
                        name='test_lenta_new_api',
                        schema='lenta_content',
                        con=conn,
                        if_exists='append',
                        index=False
                    )
                logger.info(f""Успешно сохранено {len(final_df)} записей в test_lenta_new_api"")
            except Exception as e:
                logger.error(f""Ошибка при записи в PostgreSQL: {e}"")
            finally:
                for _ in batch:
                    queue.task_done()

def fetch_lenta_data(end_date):
    worker = LentaWorker(DB_ANALYTICS)
    privateAPI = NewLentaApi()
    engine = create_engine(
        'postgresql://{dbuser}:{dbpass}@{dbhost}:{dbport}/{dbname}'.format(**DB_ANALYTICS),
        isolation_level=""READ UNCOMMITTED""
    )

    # Получение pub_ids
    try:
        pub_ids = worker.db.get_slug(end_date)  # Предполагаем, что это список строк
        logger.info(f""Получено {len(pub_ids)} pub_ids для обработки на дату {end_date}"")
    except Exception as e:
        logger.error(f""Ошибка при получении pub_ids: {e}"")
        return

    if not pub_ids:
        logger.warning(""Не найдено ни одного pub_id для обработки."")
        return

    # Запуск фонового писателя в базу данных
    writer_thread = threading.Thread(target=db_writer, args=(result_queue, engine), daemon=True)
    writer_thread.start()

    # Параллельные запросы к новому API
    with ThreadPoolExecutor(max_workers=15) as pool:
        future_to_pub_id = {pool.submit(process_pub_id, pub_id, privateAPI): pub_id for pub_id in pub_ids}
        for future in as_completed(future_to_pub_id):
            pub_id = future_to_pub_id[future]
            try:
                df = future.result()
                if df is not None:
                    result_queue.put(df)
            except Exception as e:
                logger.error(f""Ошибка в потоке для pub_id {pub_id}: {e}"")

    # Ожидание завершения обработки всех pub_ids
    result_queue.join()
    # Сигнал завершения для писателя
    result_queue.put(None)
    writer_thread.join()

    logger.info(""Обработка завершена"")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Fetch and save data from Lenta Private API')
    parser.add_argument('-s', '--end_date', required=True, help=""Execution date (YYYY-MM-DD)"")
    args = parser.parse_args()
    fetch_lenta_data(args.end_date)"
MvqLVVUT,Untitled,websyed,PHP,Thursday 20th of March 2025 07:01:22 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""157"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
BJt8adNd,contrato_form.html,losvilos,Python,Thursday 20th of March 2025 07:01:08 AM CDT,"{% extends 'base.html' %}
{% load static custom_filters %}

{% block content %}
<div class=""container mt-4"">
    <h2 class=""mb-4"">Nuevo Contrato</h2>
    <form method=""post"" id=""formContrato"">
        {% csrf_token %}

        <!-- Campos del formulario -->
        <div class=""row"">
            <!-- Selección de Cliente con Modal -->
            <div class=""col-md-6"">
                <label><strong>Cliente:</strong></label>
                <div class=""input-group"">
                    <input type=""text"" id=""buscarCliente"" class=""form-control"" placeholder=""Buscar cliente..."" readonly>
                    <button type=""button"" class=""btn btn-primary"" data-bs-toggle=""modal"" data-bs-target=""#modalClientes"">
                        <i class=""fas fa-search""></i>
                    </button>
                </div>
                <input type=""hidden"" name=""cliente"" id=""id_cliente"">
            </div>
            <!-- Dirección de Instalación -->
            <div class=""col-md-6"">
                <label><strong>Dirección de Instalación:</strong></label>
                <select id=""id_direccion_instalacion"" name=""direccion_instalacion"" class=""form-control"">
                    <option value="""">Seleccione una dirección...</option>
                </select>
                <small id=""mensajeSinDirecciones"" class=""text-danger"" style=""display: none;"">No hay direcciones disponibles</small>
            </div>
        </div>

        <div class=""row mt-3"">
            <div class=""col-md-6"">
                <label><strong>Número abonado:</strong></label>
                {{ form.numero_abonado }}
            </div>
            <div class=""col-md-6"">
                <label><strong>Días de gracia:</strong></label>
                {{ form.dias_gracia }}
            </div>
        </div>

        <!-- Fecha de contratación y Descripción en la misma fila -->
        <div class=""row mt-3"">
            <div class=""col-md-6"">
                <label><strong>Fecha de contratación:</strong></label>
                {{ form.fecha_contratacion }}
            </div>
            <div class=""col-md-6"">
                <label><strong>Descripción:</strong></label>
                {{ form.descripcion }}
            </div>
        </div>

        <div class=""row mt-3"">
            <div class=""col-md-6"">
                <label><strong>Día de pago:</strong></label>
                {{ form.dia_pago }}
            </div>
        </div>

        <!-- Lista de Servicios -->
        <div class=""mt-3"">
            <label><strong>Servicios contratados:</strong></label>
            {% for servicio in form.servicios.field.queryset %}
            <div class=""form-check"">
                <input type=""checkbox"" name=""servicios"" value=""{{ servicio.id }}"" data-precio=""{{ servicio.precio }}"" class=""form-check-input"">
                <label class=""form-check-label"">
                    {{ servicio.nombre }} - ${{ servicio.precio }}
                </label>
            </div>
            {% endfor %}
        </div>

        <!-- Total de Servicios -->
        <div class=""alert alert-success mt-3"">
            <strong>Total Servicios:</strong> $<span id=""total"">0</span>
        </div>

        <!-- Botón de Guardar siempre visible -->
        <div class=""sticky-bottom bg-white py-3 text-center"">
            <button type=""submit"" class=""btn btn-primary"">
                <i class=""fas fa-save""></i> Guardar Contrato
            </button>
        </div>
    </form>
</div>

<!-- Modal para buscar cliente -->
<div class=""modal fade"" id=""modalClientes"" tabindex=""-1"" aria-hidden=""true"">
    <div class=""modal-dialog modal-lg"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"">Seleccionar Cliente</h5>
                <button type=""button"" class=""btn-close"" data-bs-dismiss=""modal""></button>
            </div>
            <div class=""modal-body"">
                <input type=""text"" id=""filtroClientes"" class=""form-control"" placeholder=""Buscar por nombre o documento..."">
                <table class=""table mt-3"">
                    <thead>
                        <tr>
                            <th>Documento</th>
                            <th>Nombre</th>
                            <th>Seleccionar</th>
                        </tr>
                    </thead>
                    <tbody id=""listaClientes""></tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- SCRIPT PARA MANEJO DE DIRECCIONES Y TOTAL DE SERVICIOS -->
<script>
document.addEventListener('DOMContentLoaded', function() {

    // Función para calcular el total de servicios
    function calcularTotal() {
        let total = 0;
        document.querySelectorAll(""input[name='servicios']:checked"").forEach(checkbox => {
            total += parseFloat(checkbox.dataset.precio) || 0;
        });
        document.getElementById(""total"").textContent = `$${total.toLocaleString(""es-CL"")}`;
    }

    document.querySelectorAll(""input[name='servicios']"").forEach(checkbox => {
        checkbox.addEventListener(""change"", calcularTotal);
    });

    calcularTotal();

    // Cargar direcciones del cliente seleccionado
    function cargarDirecciones(clienteId) {
        let selectDireccion = document.getElementById(""id_direccion_instalacion"");
        let mensajeSinDirecciones = document.getElementById(""mensajeSinDirecciones"");
        
        selectDireccion.innerHTML = ""<option>Cargando...</option>"";

        fetch(`/api/clientes/${clienteId}/direcciones/`)
        .then(response => response.json())
        .then(data => {
            selectDireccion.innerHTML = """";

            if (data.length === 0) {
                mensajeSinDirecciones.style.display = ""block"";
                selectDireccion.innerHTML = ""<option value=''>No hay direcciones disponibles</option>"";
            } else {
                mensajeSinDirecciones.style.display = ""none"";
                data.forEach(direccion => {
                    let option = document.createElement(""option"");
                    option.value = direccion.id;
                    option.textContent = `${direccion.direccion} (${direccion.zona})`;
                    selectDireccion.appendChild(option);
                });
            }
        })
        .catch(error => {
            console.error(""Error al cargar direcciones:"", error);
            selectDireccion.innerHTML = ""<option>Error al cargar</option>"";
            mensajeSinDirecciones.style.display = ""block"";
        });
    }

    // Ejecutar carga de clientes cuando se abre el modal
    document.querySelector('[data-bs-target=""#modalClientes""]').addEventListener('click', function () {
        fetch('/api/clientes/')
        .then(response => response.json())
        .then(data => {
            let listaClientes = document.getElementById(""listaClientes"");
            listaClientes.innerHTML = """";
            data.forEach(cliente => {
                let row = document.createElement(""tr"");
                row.innerHTML = `
                    <td>${cliente.numero_documento}</td>
                    <td>${cliente.nombre}</td>
                    <td><button class=""btn btn-success seleccionar-cliente"" data-id=""${cliente.id}"" data-nombre=""${cliente.nombre}"">Seleccionar</button></td>
                `;
                listaClientes.appendChild(row);
            });

            document.querySelectorAll("".seleccionar-cliente"").forEach(boton => {
                boton.addEventListener(""click"", function() {
                    document.getElementById(""buscarCliente"").value = this.getAttribute(""data-nombre"");
                    document.getElementById(""id_cliente"").value = this.getAttribute(""data-id"");
                    $(""#modalClientes"").modal(""hide"");
                    cargarDirecciones(this.getAttribute(""data-id""));
                });
            });
        })
        .catch(error => console.error(""Error al cargar clientes:"", error));
    });

});
</script>
{% endblock %}"
ASXe6asa,dataNone,TestGuy1,JSON,Thursday 20th of March 2025 07:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '5242e41d2f035305e668a5045902fa53093b14b76f4df53cf610144c5cc00f31aa97636e9cbdf0c391266e8d0040eaa7221218ae67790cbc7cf11c6449c8b0504fee112fa1ddaa79c2d18a82aae8820387586b2670a3bab14c1171455f06c73fe8944967b0ccd0ff3eaadcbc5487ba50e8bd0c1fbe4690ccff2782924e2eb66f',
  otherdata: [
    'e3953260b6c883cc957baf5e27ddf096',
    '36671a181cfa3c98684c0775f126447e',
    '008069807525b79bb9c0ccfc8b7f917d',
    'a9c55f19a62b45961e396c0972f68653',
    'bc7298aed688d87bfe287cbafd360f83',
    '5d1c7022d98d1ee44e91e716dffae5d9',
    '2d152e6ee2a86edd8537f445e2184c6d',
    '72573f19c523faf13a255b9907fd410c'
  ]
}"
43Rt3yRq,Make $1000 15-MINUTES (BEGINNER) CT,baloku,JavaScript,Thursday 20th of March 2025 06:58:57 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

iArjnQo58x
"
3hkETqJM,Binance account YO,baloku,JavaScript,Thursday 20th of March 2025 06:56:53 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

YJ2Ae0NIhp
"
XF54JQWw,Order delivery script,websyed,PHP,Thursday 20th of March 2025 06:55:46 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""688"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
w1Bdffs5,Bot Codice Grezzo Azionario QTA,Maurizio-Ciullo,JavaScript,Thursday 20th of March 2025 06:55:05 AM CDT,"Vedi Video Webiar Corsi QTA Cartella 14 Webianar Azionario


3 Codici Grezzi:
1: Senza money managenment
2: Stessa strategia com Money management
3: Senza money managenment invertita solo per sottostante Intel

E' stata lanciata la strategia su molti sottostanti di portafoglio

I sottostanti azionari provati tutti a 15 Minuti sono nello screen.
Intel mostra performance molto negative perché è reversal come natura quindi invertiamo la stessa strategia in modo reversal

*Codice 1 grezzo azionario senza Money Management:

buy 10000 / close shares next bar highD(0) stop;
sell next bar lowD(0) stop;


*Codice 2 grezzo azionario con Money Management:

buy ((InitialCapital + NetProfit * 0.01)  / AverageTrueRange(2) shares next bar highD(0) stop;
sell next bar lowD(0) stop;

*Codice 3 grezzo azionario senza Money Management Invertita Intel:

buy 10000 / close shares next bar lowD(0) limit;
sell next bar highD(0) limit;
"
3nr6TmmQ,EARN $900 INSTANTLY 2025 PJ,baloku,JavaScript,Thursday 20th of March 2025 06:54:50 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

xQCGR1iTCN
"
ueJ7DmD5,Random Gmail Acc P0,baloku,JavaScript,Thursday 20th of March 2025 06:52:47 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

6U4exCEd6R
"
kGN3JSS8,jugger.nut,pressf880,C++,Thursday 20th of March 2025 06:50:45 AM CDT,"const TEAM_CT = 3
const TEAM_T = 2

const SND_CT_WIN = ""radio/ctwin.wav""
const SND_T_WIN = ""radio/terwin.wav""
const SND_ROUND_END = ""radio/rounddraw.wav""

const MSG_PREFIX = ""\x07FF0000[INFO] \x07FFFFFF""

m_nMaxPlayers <- MaxClients().tointeger()
m_nRoundTime <- null

m_bRoundInit <- false
m_bNotEnough <- false
m_bPickRandom <- true

m_hJugger <- null
m_hJuggerWeapon <- null

m_CTSpawnPos <- []
m_TSpawnPos <- []

function ReplacePos(pos, ent)
{
    local num = 0

    for(local e; e = Entities.FindByClassname(e, ent);)
    {
        if(num > pos.len()) continue
        e.SetAbsOrigin(pos[num])
        num++
    }
}

for(local e; e = Entities.FindByClassname(e, ""info_player_counterterrorist"");)
{
    m_CTSpawnPos.append(e.GetOrigin())
}

for(local e; e = Entities.FindByClassname(e, ""info_player_terrorist"");)
{
    m_TSpawnPos.append(e.GetOrigin())
}

ReplacePos(m_TSpawnPos, ""info_player_counterterrorist"")
ReplacePos(m_CTSpawnPos, ""info_player_terrorist"")

SendToServerConsole(""mp_restartgame 3;mp_timelimit 0;mp_ignore_round_win_conditions 1;mp_autoteambalance 0;mp_freezetime 5;mp_roundtime 5"")

ClientPrint(null, 3, MSG_PREFIX + ""Скрипт запущен"")

function CollectEventsInScope(events)
{
	local events_id = UniqueString()
	getroottable()[events_id] <- events
	local events_table = getroottable()[events_id]
	local Instance = Entities.First()
	foreach (name, callback in events) 
	{
		local callback_binded = callback.bindenv(this) 
		events_table[name] = @(params) Instance.IsValid() ? callback_binded(params) : delete getroottable()[events_id]
	}
	__CollectGameEventCallbacks(events_table)	
}

CollectEventsInScope
({
    function OnGameEvent_round_start(d)
    {
        m_bRoundInit = true

        if(CountAlivePlayers(0) < 2)
        {
            m_bNotEnough = true
            ClientPrint(null, 3, MSG_PREFIX + ""Недостаточно игроков для начала игры"")
            return
        }

        for(local i = 1; i <= m_nMaxPlayers; i++)
        {
            local ply = PlayerInstanceFromIndex(i)
            if(!ply) continue

            ChangeTeam(ply, TEAM_CT)
            ply.SetHealth(100)
            ply.SetModelScale(1.0, 0.0)

            NetProps.SetPropString(ply, ""m_iszScriptThinkFunction"", """")
            NetProps.SetPropInt(ply, ""m_takedamage"", 2)
            NetProps.SetPropFloat(ply, ""m_flMaxspeed"", 250.00)
            NetProps.SetPropInt(ply, ""m_iAccount"", 64000)
        }
        
        m_nRoundTime = NetProps.GetPropInt(Entities.FindByClassname(null, ""cs_gamerules""), ""m_iRoundTime"")
        NetProps.SetPropString(Entities.First(), ""m_iszScriptThinkFunction"", """")
        EntFire(""func_buyzone"", ""SetTeam"", TEAM_CT)

        if(m_bPickRandom) m_hJugger = GetRandomPlayer()

        ChangeTeam(m_hJugger, TEAM_T)
        StripWeapon(m_hJugger)
        AddThinkToEnt(m_hJugger, ""JuggerThink"")
        m_hJugger.SetModelScale(1.15, 0.0)

        m_hJuggerWeapon = GiveWeapon(m_hJugger, ""weapon_m249"")
        EntFire(""weapon_c4"", ""Kill"")

        m_hJugger.SetHealth(1025 * CountAlivePlayers(TEAM_CT))
        NetProps.SetPropFloat(m_hJugger, ""m_flMaxspeed"", 135.00)

        ClientPrint(null, 3, MSG_PREFIX + ""Игрок \x07FF0000"" + NetProps.GetPropString(m_hJugger, ""m_szNetname"") + "" \x07FFFFFFстал Джаггернаутом"")
    }

    function OnGameEvent_player_spawn(d)
    {
        if(CountAlivePlayers(0) == 2 && m_bNotEnough)
        {
            m_bNotEnough = false
            ClientPrint(null, 3, MSG_PREFIX + ""Зашло нужное количество игроков, игра началась!"")
            SendToServerConsole(""mp_restartgame 3"")
        }
    }

    function OnGameEvent_player_death(d)
    {
        local ply = GetPlayerFromUserID(d.userid)
        local attacker = GetPlayerFromUserID(d.attacker)

        if(CountAlivePlayers(TEAM_CT) == 0)
        {   
            m_bPickRandom = true
            SendToServerConsole(""mp_restartgame 5"")

            EmitSoundEx(
            {
                sound_name = SND_T_WIN
                sound_level = 0
            })
            ShowText(""Джаггернаут победил"", 255, 0, 0)
            ClientPrint(null, 3, MSG_PREFIX + ""Джаггернаут одержал победу"")
        }
        else if(CountAlivePlayers(TEAM_T) == 0)
        {
            SendToServerConsole(""mp_restartgame 5"")
            NetProps.SetPropString(m_hJugger, ""m_iszScriptThinkFunction"", """")

            if(attacker)
            {
                m_hJugger = attacker
                m_bPickRandom = false
                ClientPrint(null, 3, MSG_PREFIX + ""Игрок \x07FF0000"" + NetProps.GetPropString(attacker, ""m_szNetname"") + "" \x07FFFFFFубил Джаггернаута!"")
            }

            EmitSoundEx(
            {
                sound_name = SND_CT_WIN
                sound_level = 0
            })
            ShowText(""Синие победили"", 0, 0, 255)
            ClientPrint(null, 3, MSG_PREFIX + ""Синие одержали победу"")
        }
    }

    function OnGameEvent_player_disconnect(d)
    {
        local ply = GetPlayerFromUserID(d.userid)

        if(ply == m_hJugger)
        {
            m_hJugger = null
            m_bPickRandom = true
            SendToServerConsole(""mp_restartgame 5"")

            EmitSoundEx(
            {
                sound_name = SND_CT_WIN
                sound_level = 0
            })
            ShowText(""Синие победили"", 0, 0, 255)
            ClientPrint(null, 3, MSG_PREFIX + ""Джаггернаут отключился, синие победили"")
        }
    }

    function OnGameEvent_round_freeze_end(d)
    {
        if(!m_bRoundInit) return
        AddThinkToEnt(Entities.First(), ""Think"")
    }
})

function CountAlivePlayers(team)
{
    local num = 0

    for(local i = 1; i <= m_nMaxPlayers; i++)
    {
        local ply = PlayerInstanceFromIndex(i)
        if(!ply || !ply.IsAlive()) continue

        if(team == 0 || ply.GetTeam() == team)
        {
            num++
        }
    }

    return num
}

function GetRandomPlayer()
{
    local players = []

    for(local i = 1; i <= m_nMaxPlayers; i++)
    {
        local ply = PlayerInstanceFromIndex(i)
        if(!ply || !ply.IsAlive()) continue

        players.append(ply)
    }

    return players[RandomInt(0, players.len() -1)]
}

function ChangeTeam(player, team)
{
    NetProps.SetPropInt(player, ""m_iPlayerState"", 0)
    NetProps.SetPropInt(player, ""m_iTeamNum"", team)
    player.SetTeam(team)

    player.DispatchSpawn()
}

function StripWeapon(player)
{
    local weaponStrip = null
    if(!weaponStrip) weaponStrip = Entities.CreateByClassname(""player_weaponstrip"")
    
    return weaponStrip.AcceptInput(""Strip"", """", player, null)
}

function GiveWeapon(player, classname)
{
    local weapon = SpawnEntityFromTable(classname,
    {
        ammo = 3000
        origin = player.GetOrigin()
        teamnum = player.GetTeam()
    })

    weapon.SetClip1(0)
    NetProps.SetPropBool(weapon, ""m_bForcePurgeFixedupStrings"", true)

    return weapon
}

function ShowText(msg, r, g, b)
{
    local text = null
    if(!text)
    {
        text = SpawnEntityFromTable(""game_text"",
        {
            x = -1
            y = 0.3
            holdtime = 6
            spawnflags = 1
        })
    }
    text.__KeyValueFromVector(""color"", Vector(r, g, b))

    NetProps.SetPropString(text, ""m_iszMessage"", msg)
    return text.AcceptInput(""Display"", """", null, null)
}

function JuggerThink()
{
    local weapon = NetProps.GetPropEntity(self, ""m_hActiveWeapon"")

    if(!m_hJuggerWeapon.GetOwner() || weapon != m_hJuggerWeapon)
    {
        m_hJuggerWeapon.Destroy()
        StripWeapon(self)
        m_hJuggerWeapon = GiveWeapon(self, ""weapon_m249"")
    }

    return -1
}

function Think()
{
    m_nRoundTime--

    if(m_nRoundTime <= 0)
    {
        NetProps.SetPropString(self, ""m_iszScriptThinkFunction"", """")
        SendToServerConsole(""mp_restartgame 5"")

        for(local i = 1; i <= m_nMaxPlayers; i++)
        {
            local ply = PlayerInstanceFromIndex(i)
            if(!ply || !ply.IsAlive()) continue

            NetProps.SetPropInt(ply, ""m_takedamage"", 0)
        }

        EmitSoundEx(
        {
            sound_name = SND_ROUND_END
            sound_level = 0
        })
        ShowText(""Раунд закончился"", 255, 255, 255)
        ClientPrint(null, 3, MSG_PREFIX + ""Раунд завершен"")
    }

    return 1
}"
kgd5sitn,EARN $900 INSTANTLY 2025 PJ,xotticcs,JavaScript,Thursday 20th of March 2025 06:50:40 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

JLBCcbqnhv
"
hR4qBj6Z,Binance account YO,allusonns,JavaScript,Thursday 20th of March 2025 06:48:34 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

mO2L19ymCB
"
hjBDAxTr,Make $1000 15-MINUTES (BEGINNER) CT,Udd106804,JavaScript,Thursday 20th of March 2025 06:45:50 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

McOMxru9U4
"
iNu9Nc4d,Order delivery script,websyed,PHP,Thursday 20th of March 2025 06:44:39 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""493"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
J9m70f9C,Binance account YO,Udd106804,JavaScript,Thursday 20th of March 2025 06:43:47 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

1stGMCFB1L
"
Mqme3tGH,EARN $900 INSTANTLY 2025 PJ,Udd106804,JavaScript,Thursday 20th of March 2025 06:41:41 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

yHNjXrIZnR
"
epfcMAG6,Random Gmail Acc P0,Udd106804,JavaScript,Thursday 20th of March 2025 06:39:37 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

6thQEMV5O0
"
ub9phbrb,Make $1000 15-MINUTES (BEGINNER) CT,Udd106804,JavaScript,Thursday 20th of March 2025 06:37:32 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

XGDDz3VJM7
"
Ku9N9aYP,Binance account YO,hussunii,JavaScript,Thursday 20th of March 2025 06:34:37 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

uRBai062Av
"
0J6WGW15,Untitled,websyed,PHP,Thursday 20th of March 2025 06:33:53 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""920"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
UN7Echdk,Make $1000 15-MINUTES (BEGINNER) CT,Aximos1315,JavaScript,Thursday 20th of March 2025 06:32:22 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

1YRhm1yVtQ
"
5zzfV4bF,Binance account YO,Aximos1315,JavaScript,Thursday 20th of March 2025 06:30:17 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

q7GTGSl65h
"
NvMnHUAT,Order delivery script,websyed,PHP,Thursday 20th of March 2025 06:28:31 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""902"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
tP1HYPFk,Binance account YO,1728scwban,JavaScript,Thursday 20th of March 2025 06:27:59 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

OuGQMeHJ6B
"
qJeF60Lq,Random Gmail Acc P0,1728scwban,JavaScript,Thursday 20th of March 2025 06:25:47 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

tQIwIXpHza
"
kuyvhhFU,Make $1000 15-MINUTES (BEGINNER) CT,1728scwban,JavaScript,Thursday 20th of March 2025 06:23:43 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

K3P7pv3lYP
"
2f1Zixyh,Untitled,websyed,PHP,Thursday 20th of March 2025 06:23:08 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""728"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
Fj5Nq2Na,Binance account YO,1728scwban,JavaScript,Thursday 20th of March 2025 06:21:38 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

HTR9fCFvxX
"
k3MG3LUP,EARN $900 INSTANTLY 2025 PJ,1728scwban,JavaScript,Thursday 20th of March 2025 06:19:32 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

Dy7gDx5pUV
"
aPB4Hpc2,Order delivery script,websyed,PHP,Thursday 20th of March 2025 06:17:36 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""460"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
xVMwQcfS,Random Gmail Acc P0,1728scwban,JavaScript,Thursday 20th of March 2025 06:17:28 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

zGeuhElj5X
"
VT9Gd95n,Make $1000 15-MINUTES (BEGINNER) CT,1728scwban,JavaScript,Thursday 20th of March 2025 06:15:24 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

4O4Fl2Pc9i
"
tcBhbsAJ,Binance account YO,1728scwban,JavaScript,Thursday 20th of March 2025 06:13:19 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

FJIDMvODUA
"
fkqWqZzq,EARN $900 INSTANTLY 2025 PJ,1728scwban,JavaScript,Thursday 20th of March 2025 06:11:07 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

eJqTDI4bK7
"
LbbZBLRE,Random Gmail Acc P0,1728scwban,JavaScript,Thursday 20th of March 2025 06:09:02 AM CDT," 
Tutorial: https://pdfupload.io/docs/a0fb737c

Enjoy

lNqCPLNL4T
"
qGHczapU,Order delivery script,websyed,PHP,Thursday 20th of March 2025 06:01:06 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""434"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
3rMzn84P,Untitled,websyed,PHP,Thursday 20th of March 2025 05:55:23 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""084"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
NHwBMwfP,Order delivery script,websyed,PHP,Thursday 20th of March 2025 05:50:01 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""866"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
GDJgu1Zy,Order delivery script,websyed,PHP,Thursday 20th of March 2025 05:44:38 AM CDT,"<?php

$api_url = ""/api/order-status"";
$order_id = ""533"";
$response = file_get_contents(""$api_url?order_id=$order_id"");
$order_data = json_decode($response, true);

if ($order_data && isset($order_data['status'])) {
    if ($order_data['status'] === ""Paid"") {
        $encoded_url = ""https://psee.io/7b2jmr"";
        $encoded_warning = ""UmVtZW1iZXIgdG8gbm90IHVzZSBpdCBmb3Igb3JkZXJzIGFib3ZlICQyMDAwIGF0IG9uY2UgLSB0aGV5IHdpbGwgYmxvY2sgeW91IGFuZCB5b3VyIG5ldHdvcmsu"";
        $message = ""Thank you for your purchase!"" . $encoded_url . ""\n"" . $encoded_warning;
        sendMessage($order_data['user_email'], $message);
    } else {
        echo ""Unpaid"";
    }
} else {
    echo ""Invalid response from store API."";
}

function sendMessage($recipient, $message) {
    echo ""Message sent to $recipient: \n$message"";
}
"
sFhGaPur,obj decode/encode for compose navigation,Roctik,Kotlin,Thursday 20th of March 2025 05:38:08 AM CDT,"import kotlin.reflect.full.memberProperties
import kotlin.reflect.full.primaryConstructor
import java.net.URLEncoder
import java.net.URLDecoder
import java.nio.charset.StandardCharsets

fun String.encodeToUtf8(): String = URLEncoder.encode(this, StandardCharsets.UTF_8.toString())

fun String.decodeFromUtf8(): String = URLDecoder.decode(this, StandardCharsets.UTF_8.toString())

fun Any?.encodedIfPossible(): Any? {
    return when (this) {
        is String -> this.encodeToUtf8()
        is List<*> -> this.map { it.encodedIfPossible() }
        is Set<*> -> this.map { it.encodedIfPossible() }.toSet()
        is Map<*, *> -> this.mapValues { it.value.encodedIfPossible() }
        else -> this?.let { if (it::class.isData) it.encodedStrings() else it }
    }
}

fun <T : Any> T.encodedStrings(): T {
    val clazz = this::class
    val constructor = clazz.primaryConstructor
        ?: throw IllegalArgumentException(""Class ${clazz.simpleName} must have a primary constructor"")

    val args = constructor.parameters.associateWith { param ->
        val property = clazz.memberProperties.firstOrNull { it.name == param.name }
        val value = property?.call(this)

        value.encodedIfPossible()
    }

    return constructor.callBy(args)
}

fun Any?.decodedIfPossible(): Any? {
    return when (this) {
        is String -> this.decodeFromUtf8()
        is List<*> -> this.map { it.decodedIfPossible() }
        is Set<*> -> this.map { it.decodedIfPossible() }.toSet()
        is Map<*, *> -> this.mapValues { it.value.decodedIfPossible() }
        else -> this?.let { if (it::class.isData) it.decodedStrings() else it }
    }
}

fun <T : Any> T.decodedStrings(): T {
    val clazz = this::class
    val constructor = clazz.primaryConstructor
        ?: throw IllegalArgumentException(""Class ${clazz.simpleName} must have a primary constructor"")

    val args = constructor.parameters.associateWith { param ->
        val property = clazz.memberProperties.firstOrNull { it.name == param.name }
        val value = property?.call(this)

        value.decodedIfPossible()
    }

    return constructor.callBy(args)
}
"
dqcYzVfh,Untitled,Chumva,Java,Thursday 20th of March 2025 05:37:41 AM CDT,"Runtime          net.osmand.plus                      E  FATAL EXCEPTION: main
                                                                                                    Process: net.osmand.plus, PID: 7982
                                                                                                    java.lang.NullPointerException: Attempt to invoke interface method 'java.lang.Object[] java.util.Collection.toArray()' on a null object reference
                                                                                                    	at java.util.ArrayList.addAll(ArrayList.java:759)
                                                                                                    	at net.osmand.plus.views.mapwidgets.configure.panel.WidgetsListAdapter.setItems(WidgetsListAdapter.java:274)
                                                                                                    	at net.osmand.plus.views.mapwidgets.configure.panel.WidgetsListFragment.setupRecyclerView(WidgetsListFragment.java:104)
                                                                                                    	at net.osmand.plus.views.mapwidgets.configure.panel.WidgetsListFragment.onCreateView(WidgetsListFragment.java:89)
                                                                                                    	at androidx.fragment.app.Fragment.performCreateView(Fragment.java:3104)
                                                                                                    	at androidx.fragment.app.FragmentStateManager.createView(FragmentStateManager.java:524)
                                                                                                    	at androidx.fragment.app.FragmentStateManager.moveToExpectedState(FragmentStateManager.java:261)
                                                                                                    	at androidx.fragment.app.FragmentStore.moveToExpectedState(FragmentStore.java:113)
                                                                                                    	at androidx.fragment.app.FragmentManager.moveToState(FragmentManager.java:1433)
                                                                                                    	at androidx.fragment.app.FragmentManager.dispatchStateChange(FragmentManager.java:2977)
                                                                                                    	at androidx.fragment.app.FragmentManager.dispatchViewCreated(FragmentManager.java:2888)
                                                                                                    	at androidx.fragment.app.Fragment.performViewCreated(Fragment.java:3129)
                                                                                                    	at androidx.fragment.app.FragmentStateManager.createView(FragmentStateManager.java:552)
                                                                                                    	at androidx.fragment.app.FragmentStateManager.moveToExpectedState(FragmentStateManager.java:261)
                                                                                                    	at androidx.fragment.app.FragmentManager.executeOpsTogether(FragmentManager.java:1890)
                                                                                                    	at androidx.fragment.app.FragmentManager.removeRedundantOperationsAndExecute(FragmentManager.java:1817)
                                                                                                    	at androidx.fragment.app.FragmentManager.execPendingActions(FragmentManager.java:1760)
                                                                                                    	at androidx.fragment.app.FragmentManager$5.run(FragmentManager.java:547)
                                                                                                    	at android.os.Handler.handleCallback(Handler.java:991)
                                                                                                    	at android.os.Handler.dispatchMessage(Handler.java:102)
                                                                                                    	at android.os.Looper.loopOnce(Looper.java:232)
                                                                                                    	at android.os.Looper.loop(Looper.java:317)
                                                                                                    	at android.app.ActivityThread.main(ActivityThread.java:8787)
                                                                                                    	at java.lang.reflect.Method.invoke(Native Method)
                                                                                                    	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:591)
                                                                                                    	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:871)"
