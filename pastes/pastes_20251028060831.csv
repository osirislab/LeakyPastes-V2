id,title,username,language,date,content
HAdM9fvp,üî• Exchange profit method,simsly,JavaScript,Tuesday 28th of October 2025 12:59:53 AM CDT,"New methods just got posted on our channel

Recently Leaked:
‚úÖ Swapzone Profit Method
Docs Link: docs.google.com/document/d/1iLvzHvTt4Z3tedm0sXRlKrkiVrLAmynuT-mGWRCxK-8

Post hash: YVOFVOqTbTqJekVlVJmkpfZuQwFtljcvoMhmCIRCdqfm"
4k4MFCjR,üíé ChangeNOW Exploit üìå‚úÖ,iambyoung,JavaScript,Tuesday 28th of October 2025 12:58:25 AM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: nx3tt5lb5pfkg7htg0ndmysuvxhfwchjpk1c8pvq0mblwv5pn0
"
DFKvNQHV,üíé ChangeNOW Exploit,simsly,JavaScript,Tuesday 28th of October 2025 12:49:51 AM CDT,"New methods just got posted on our channel

Recently Leaked:
‚úÖ Swapzone Profit Method
Docs Link: docs.google.com/document/d/1iLvzHvTt4Z3tedm0sXRlKrkiVrLAmynuT-mGWRCxK-8

Post hash: wcUtiFgFZnnPDnOjKWvUqlqcZEcHFapMUnenvdqLFqKV"
d8sxzqhj,üí° EASY MONEY GUIDE ‚úÖ Working ‚úÖüìå,iambyoung,JavaScript,Tuesday 28th of October 2025 12:47:30 AM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: 6bcfbd4xbh1rf3j4exr8f1t3ctnkhc1ebmvc3asm9kjjfb3kj1
"
ZbFX2sCm,üíµ Make 3000$ in 20 minutes üíµ,simsly,JavaScript,Tuesday 28th of October 2025 12:39:49 AM CDT,"New methods just got posted on our channel

Recently Leaked:
‚úÖ Swapzone Profit Method
Docs Link: docs.google.com/document/d/1iLvzHvTt4Z3tedm0sXRlKrkiVrLAmynuT-mGWRCxK-8

Post hash: iyJOoFthKsDMCPlJjhvCizKXECRKWCrVRJfAPOrcevPq"
TJJ8f6ea,‚≠êMake $15OO in 2O minutes‚≠ê üö®üíµ,iambyoung,JavaScript,Tuesday 28th of October 2025 12:36:36 AM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: enja0gbe8vb3bm1cyru9tkw61tsuwaoxwu3c32xnu9skv53nqn
"
2P7sv0AM,üí° EASY MONEY GUIDE ‚úÖ Working,simsly,JavaScript,Tuesday 28th of October 2025 12:29:47 AM CDT,"New methods just got posted on our channel

Recently Leaked:
‚úÖ Swapzone Profit Method
Docs Link: docs.google.com/document/d/1iLvzHvTt4Z3tedm0sXRlKrkiVrLAmynuT-mGWRCxK-8

Post hash: dAkMcXJsAKlOyChGsuhoINsjgcuGRJynhkWWPgVbTJFi"
8rMuX9ah,‚≠êProfit Method‚≠ê üî•üíµ,iambyoung,JavaScript,Tuesday 28th of October 2025 12:25:43 AM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: klhrajwhgceqt39ngvc1l9k9ee5fk18scqgx4xo0ml4bn3lnqj
"
nYqWfyA8,üìù MAKE $2500 IN 15 MIN ‚úÖ Working,simsly,JavaScript,Tuesday 28th of October 2025 12:19:45 AM CDT,"New methods just got posted on our channel

Recently Leaked:
‚úÖ Swapzone Profit Method
Docs Link: docs.google.com/document/d/1iLvzHvTt4Z3tedm0sXRlKrkiVrLAmynuT-mGWRCxK-8

Post hash: HJPYZzQkFmtgWtETxjieHzhWAPaKjnUiaYWYuKxycsFd"
4BEDwaF2,üî• Exchange profit method ‚úÖ‚úÖ,iambyoung,JavaScript,Tuesday 28th of October 2025 12:14:51 AM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: vxlvwn2dsfn2mo7bveupa2yjpxm5yj98uzn5y72sb5rbn1nk2j
"
6dY5asHD,üí° Instant BTC Profit Method ‚úÖ Working,simsly,JavaScript,Tuesday 28th of October 2025 12:09:44 AM CDT,"New methods just got posted on our channel

Recently Leaked:
‚úÖ Swapzone Profit Method
Docs Link: docs.google.com/document/d/1iLvzHvTt4Z3tedm0sXRlKrkiVrLAmynuT-mGWRCxK-8

Post hash: QcjHIdYZlJEVnHjqUmTDfYPBfxNJHhPxpiUeYbadrMzI"
LkLYc9AR,Camera Commander rev_01,pleasedontcode,Arduino,Tuesday 28th of October 2025 12:05:20 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Camera Commander
	- Source Code NOT compiled for: XIAO ESP32S3
	- Source Code created on: 2025-10-28 05:04:58

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* use platformio to program my ""seeed xaio esp32s3 */
	/* sense"". i need to train an ai model to classify 4 */
	/* different check valve cartridges and communicate */
	/* the results to my click plc via rs232.    sensor */
	/* modality - Images with installed camera a */
/****** END SYSTEM REQUIREMENTS *****/


/* START CODE */

// Include necessary libraries
#include <Arduino.h>
#include ""esp_camera.h""

// --- Camera Pin Definitions ---
// (Same as before)
#define PWDN_GPIO_NUM     -1
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM     10
#define SIOD_GPIO_NUM     40
#define SIOC_GPIO_NUM     39
#define Y9_GPIO_NUM       48
#define Y8_GPIO_NUM       11
#define Y7_GPIO_NUM       12
#define Y6_GPIO_NUM       14
#define Y5_GPIO_NUM       16
#define Y4_GPIO_NUM       18
#define Y3_GPIO_NUM       17
#define Y2_GPIO_NUM       15
#define VSYNC_GPIO_NUM    38
#define HREF_GPIO_NUM     47
#define PCLK_GPIO_NUM     13

// Setup function
void setup() {
  Serial.begin(115200);
  Serial.println(""ESP32 Serial Data Collector Ready. Send 'c' to capture."");

  // Camera configuration
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sccb_sda = SIOD_GPIO_NUM;
  config.pin_sccb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  config.frame_size = FRAMESIZE_QVGA; // 320x240
  config.jpeg_quality = 10;
  config.fb_count = 1;

  // Initialize camera
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf(""Camera init failed with error 0x%x\n"", err);
    return;
  }
  Serial.println(""Camera initialized successfully."");
}

// Loop function
void loop() {
  if (Serial.available() > 0) {
    char command = Serial.read();
    if (command == 'c') {
      camera_fb_t *fb = esp_camera_fb_get();
      if (!fb) {
        Serial.println(""FAIL"");
        return;
      }
      // Send a header with the image size
      Serial.printf(""START,%d\n"", fb->len);
      // Write the raw image data
      Serial.write(fb->buf, fb->len);
      // Wait for the serial buffer to be empty before continuing
      Serial.flush();
      // Send a footer to mark end of image data
      Serial.println(""END"");
      esp_camera_fb_return(fb);
    }
  }
}

/* END CODE */
"
VVsAV35F,Fixed mod.lua,Imsvale,Lua,Monday 27th of October 2025 10:06:15 PM CDT,"-- Smart Capacity Customizer for Vehicles
-- Minor Version 2.5.1 - 28/10/2025
-- FIXED: MU detection bugs
-- Main mod functionality
function data()

    local Constants = {
        PASSENGER_TYPE = ""PASSENGERS"",
        AIR_CARRIER = ""AIR"",
        passengerMultipliers = {0.125, 0.25, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9,
                                9.5, 10, 12, 14, 16, 18, 20},
        cargoMultipliers = {0.125, 0.25, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 20, 30, 40},
        priceRunningCost = {1, 0.05, 0.05555555555555555, 0.0625, 0.07142857142857142, 0.08333333333333333, 0.1,
                            0.1111111111111111, 0.125, 0.14285714285714285, 0.16666666666666666, 0.2, 0.25,
                            0.3333333333333333, 0.5}
    }

    local Utils = {}

    function Utils.safeGet(data, ...)
        local result = data
        for _, key in ipairs({...}) do
            result = result and result[key]
            if not result then
                break
            end
        end
        return result
    end

    function Utils.isAirCarrier(data)
        if data and data.metadata and data.metadata.transportVehicle ~= nil then
            local carrierType = data.metadata.transportVehicle.carrier

            if carrierType == 3 then
                return true
            end
        end
        return false
    end

    function Utils.checkCarrierType(data, carrierType)
        if Utils.safeGet(data, 'metadata', 'transportVehicle', 'carrier') ~= nil then
            return Utils.safeGet(data, 'metadata', 'transportVehicle', 'carrier') == carrierType
        end
        return false
    end

    function Utils.checkDrivingLicense(data, licenseType)
        if data and data.metadata and data.metadata.seatProvider and data.metadata.seatProvider.drivingLicense then
            return data.metadata.seatProvider.drivingLicense == licenseType
        end
        return false
    end

    function Utils.modifyCargoEntries(data, multiplier)
        local function modifyCapacity(container)
            local capacity = Utils.safeGet(container, 'capacity')
            if capacity then
                container.capacity = math.max(1, math.floor(capacity * multiplier))
            end
        end

        local function modifyLoadConfigs(loadConfigs)
            for _, loadConfig in ipairs(loadConfigs or {}) do
                for _, cargoEntry in ipairs(Utils.safeGet(loadConfig, 'cargoEntries') or {}) do
                    cargoEntry.capacity = math.max(1, math.floor(cargoEntry.capacity * multiplier))
                end
            end
        end

        local transportVehicle = Utils.safeGet(data, 'metadata', 'transportVehicle')
        if transportVehicle then
            modifyCapacity(transportVehicle)

            if transportVehicle.compartments then
                for _, compartment in ipairs(transportVehicle.compartments) do
                    modifyCapacity(compartment)
                    modifyLoadConfigs(compartment.loadConfigs)
                    modifyLoadConfigs(compartment.cargoEntries)
                end
            end

            if transportVehicle.compartmentsList then
                for _, compartmentList in ipairs(transportVehicle.compartmentsList) do
                    modifyCapacity(compartmentList)
                    modifyLoadConfigs(compartmentList.loadConfigs)
                    modifyLoadConfigs(compartmentList.cargoEntries)
                end
            end

            if transportVehicle.capacities then
                for _, capacity in ipairs(transportVehicle.capacities) do
                    modifyCapacity(capacity)
                end
            end
        end
    end

    function Utils.checkForPassengers(compartments, compartmentsList, data)
        local function checkLoadConfigsAndCargoEntries(loadConfigs)
            for _, loadConfig in ipairs(loadConfigs or {}) do
                for _, cargoEntry in ipairs(loadConfig.cargoEntries or {}) do
                    if cargoEntry.type == Constants.PASSENGER_TYPE then
                        return true
                    end
                end
            end
            return false
        end

        if not data or not data.metadata or not data.metadata.transportVehicle then
            return false
        end

        local transportVehicle = data.metadata.transportVehicle
        if transportVehicle then
            if transportVehicle.type == Constants.PASSENGER_TYPE or
                checkLoadConfigsAndCargoEntries(transportVehicle.loadConfigs) then
                return true
            end

            local function checkContainers(container)
                if container then
                    for _, item in ipairs(container) do
                        if item.type == Constants.PASSENGER_TYPE or checkLoadConfigsAndCargoEntries(item.loadConfigs) then
                            return true
                        end
                    end
                end
                return false
            end

            return
                checkContainers(transportVehicle.compartmentsList) or checkContainers(transportVehicle.compartments) or
                    checkContainers(transportVehicle.capacities)
        end
        return false
    end

    -- FIXED: Corrected EMU detection for modded vehicles
    -- Bug #1: Changed carrier == ""RAIL"" to carrier == 1 (numeric comparison)
    -- Bug #2: Removed blocking 'and data.metadata.id' check (id is always nil at runtime)
    -- Bug #3: Made multipleUnitRep lookup conditional since id is nil
    function Utils.isMultipleUnit(data, multipleUnitRep)
        if not data or not data.metadata then
            return false
        end
        local transportVehicle = data.metadata.transportVehicle
        if transportVehicle and transportVehicle.carrier == 1 then
            return (data.metadata.id and multipleUnitRep[data.metadata.id] ~= nil) or
                   transportVehicle.multipleUnitOnly or
                   Utils.hasCrewSeatAndEngines(data)
        end
        return false
    end

    function Utils.hasCrewSeatAndEngines(data)
        if not data or not data.metadata or not data.metadata.transportVehicle then
            return false
        end
        local transportVehicle = data.metadata.transportVehicle
        local seatProvider = data.metadata.seatProvider

        if not seatProvider or not seatProvider.seats or #seatProvider.seats == 0 then
            return false
        end
        if not transportVehicle.engines or #transportVehicle.engines == 0 then
            return false
        end

        return true
    end

    -- determineMultiplier
    -- FIXED: Removed redundant checkDrivingLicense from MU check (line 178)
    -- Many EMU units don't have seatProvider but still have multipleUnitOnly=true
    function Utils.determineMultiplier(data, multiplierCache, multipleUnitRep)
        local transportVehicle = Utils.safeGet(data, 'metadata', 'transportVehicle')

        if not transportVehicle then
            return nil
        end

        if Utils.isMultipleUnit(data, multipleUnitRep) then
            return multiplierCache.mu
        end
        if Utils.checkDrivingLicense(data, 3) then
            return multiplierCache.tramMu
        end

        if data.metadata.roadVehicle then
            if Utils.checkForPassengers(Utils.safeGet(transportVehicle, 'compartmentsList'),
                Utils.safeGet(transportVehicle, 'compartments'), data) then
                return multiplierCache.roadPassenger
            else
                return multiplierCache.roadCargo
            end
        end

        local hasPassengers = Utils.checkForPassengers(Utils.safeGet(transportVehicle, 'compartmentsList'),
            Utils.safeGet(transportVehicle, 'compartments'), data)

        if hasPassengers and Utils.checkDrivingLicense(data, 2) then
            return multiplierCache.wagonPassenger
        end

        if Utils.checkCarrierType(data, 3) then
            if hasPassengers then
                return multiplierCache.passengerAir
            else
                return multiplierCache.airCargo
            end
        end

        if Utils.checkCarrierType(data, 4) then
            return multiplierCache.waterMu
        end

        return multiplierCache.cargo
    end

    function Utils.mathRound(num)
        return num >= 0 and math.floor(num + 0.5) or math.ceil(num - 0.5)
    end

    return {
        info = {
            majorVersion = 2,
            minorVersion = 5,
            severityAdd = ""NONE"",
            severityRemove = ""NONE"",
            name = _(""Smart Capacity Customizer for Vehicles""),
            description = _(
                [[ Enhance your gameplay by dynamically adjusting with a smart way the capacity of all vehicles.

This mod allows for precise customization of passenger and cargo capacities for most Vehicles and lets you tweak those vehicles to perfectly suit your gameplay style, from enhancing realism to maximizing efficiency.

Compatible with vanilla and for the most vehicles mods (if they follow TF2 good modding practice).

The mod provides sliders to select from ten (10) multipliers.

The 1st multiplier is for Multiple Units, the 2nd for Passenger Wagons, the 3rd for Cargo Wagons, the 4th for Trams, the 5th is for Road Vehicles for passengers, the 6th is for Road Vehicles for cargo, the 7th is for Air vehicles for passengers, the 8th is for Air vehicles for Cargo, the 9th is for water vehicles(general) and the 10th is for price/running cost adjustments. The value range for vehicles is from ""1/8"" to x20 for passenger related vehicles. For cargo wagons the values is from ""1/8"" to x40. ""Default"" value it means there is no change to the original capacity.

Writing code is a complex and time-consuming task, which often takes me away from my work and family. If you appreciate my work and would like to support me, so that I can continue to help all of you in the future, please consider clicking on the link below:
https://buy.stripe.com/fZe9C2c2u5np67m289

Safe to add/remove in your save game. If you enjoy it, give it a thumb up :)

[img]https://i.imgur.com/fVVaDCS.gif[/img] ]]),
            visible = true,
            tags = {""Script Mod"", ""Vehicle"", ""Misc"", ""Capacity"", ""Wagon"", ""Multiple Unit"", ""Tram"", ""Cargo"", ""Bus"",
                    ""Road"", ""Train""},
            authors = {{
                name = ""Aks_Lrs"",
                role = ""CREATOR"",
                text = """"
            }},
            params = {{
                key = ""muPassengerMultiplier"",
                name = _(""Multiple Unit Passenger Capacity Multiplier""),
                uiType = ""SLIDER"",
                values = {_(""1/8""), _(""1/4""), _(""1/2""), _(""Default""), _(""x1.5""), _(""x2""), _(""x2.5""), _(""x3""), _(""x3.5""),
                          _(""x4""), _(""x4.5""), _(""x5""), _(""x5.5""), _(""x6""), _(""x6.5""), _(""x7""), _(""x7.5""), _(""x8""),
                          _(""x8.5""), _(""x9""), _(""x9.5""), _(""x10""), _(""x12""), _(""x14""), _(""x16""), _(""x18""), _(""x20"")},
                defaultIndex = 10,
                tooltip = _(""Adjust the passenger capacity multiplier for multiple unit rail vehicles."")
            }, {
                key = ""wagonPassengerMultiplier"",
                name = _(""Passenger Wagon Capacity Multiplier""),
                uiType = ""SLIDER"",
                values = {_(""1/8""), _(""1/4""), _(""1/2""), _(""Default""), _(""x1.5""), _(""x2""), _(""x2.5""), _(""x3""), _(""x3.5""),
                          _(""x4""), _(""x4.5""), _(""x5""), _(""x5.5""), _(""x6""), _(""x6.5""), _(""x7""), _(""x7.5""), _(""x8""),
                          _(""x8.5""), _(""x9""), _(""x9.5""), _(""x10""), _(""x12""), _(""x14""), _(""x16""), _(""x18""), _(""x20"")},
                defaultIndex = 10,
                tooltip = _(""Adjust the passenger capacity multiplier for wagons."")
            }, {
                key = ""cargoWagonMultiplier"",
                name = _(""Cargo Wagon Capacity Multiplier""),
                uiType = ""SLIDER"",
                values = {_(""1/8""), _(""1/4""), _(""1/2""), _(""Default""), _(""x2""), _(""x3""), _(""x4""), _(""x5""), _(""x6""),
                          _(""x7""), _(""x8""), _(""x9""), _(""x10""), _(""x12""), _(""x14""), _(""x16""), _(""x18""), _(""x20""),
                          _(""x30""), _(""x40"")},
                defaultIndex = 7,
                tooltip = _(""Adjust the capacity multiplier for cargo wagons."")
            }, {
                key = ""tramMultiplier"",
                name = _(""Tram Capacity Multiplier""),
                uiType = ""SLIDER"",
                values = {_(""1/8""), _(""1/4""), _(""1/2""), _(""Default""), _(""x1.5""), _(""x2""), _(""x2.5""), _(""x3""), _(""x3.5""),
                          _(""x4""), _(""x4.5""), _(""x5""), _(""x5.5""), _(""x6""), _(""x6.5""), _(""x7""), _(""x7.5""), _(""x8""),
                          _(""x8.5""), _(""x9""), _(""x9.5""), _(""x10""), _(""x12""), _(""x14""), _(""x16""), _(""x18""), _(""x20"")},
                defaultIndex = 10,
                tooltip = _(""Adjust the capacity multiplier for Trams."")
            }, {
                key = ""roadPassengerMultiplier"",
                name = _(""Road Passenger Vehicle Capacity Multiplier""),
                uiType = ""SLIDER"",
                values = {_(""1/8""), _(""1/4""), _(""1/2""), _(""Default""), _(""x1.5""), _(""x2""), _(""x2.5""), _(""x3""), _(""x3.5""),
                          _(""x4""), _(""x4.5""), _(""x5""), _(""x5.5""), _(""x6""), _(""x6.5""), _(""x7""), _(""x7.5""), _(""x8""),
                          _(""x8.5""), _(""x9""), _(""x9.5""), _(""x10""), _(""x12""), _(""x14""), _(""x16""), _(""x18""), _(""x20"")},
                defaultIndex = 10,
                tooltip = _(""Adjust the capacity multiplier for road passenger vehicles."")
            }, {
                key = ""roadCargoMultiplier"",
                name = _(""Road Cargo Vehicle Capacity Multiplier""),
                uiType = ""SLIDER"",
                values = {_(""1/8""), _(""1/4""), _(""1/2""), _(""Default""), _(""x2""), _(""x3""), _(""x4""), _(""x5""), _(""x6""),
                          _(""x7""), _(""x8""), _(""x9""), _(""x10""), _(""x12""), _(""x14""), _(""x16""), _(""x18""), _(""x20""),
                          _(""x30""), _(""x40"")},
                defaultIndex = 7,
                tooltip = _(""Adjust the capacity multiplier for road cargo vehicles."")
            }, {
                key = ""passengerAirMultiplier"",
                name = _(""Passenger Air Vehicle Capacity Multiplier""),
                uiType = ""SLIDER"",
                values = {_(""1/8""), _(""1/4""), _(""1/2""), _(""Default""), _(""x1.5""), _(""x2""), _(""x2.5""), _(""x3""), _(""x3.5""),
                          _(""x4""), _(""x4.5""), _(""x5""), _(""x5.5""), _(""x6""), _(""x6.5""), _(""x7""), _(""x7.5""), _(""x8""),
                          _(""x8.5""), _(""x9""), _(""x9.5""), _(""x10""), _(""x12""), _(""x14""), _(""x16""), _(""x18""), _(""x20"")},
                defaultIndex = 10,
                tooltip = _(""Adjust the capacity multiplier for Passenger air vehicles."")
            }, {
                key = ""cargoAirMultipliers"",
                name = _(""Cargo Air Vehicle Capacity Multiplier""),
                uiType = ""SLIDER"",
                values = {_(""1/8""), _(""1/4""), _(""1/2""), _(""Default""), _(""x2""), _(""x3""), _(""x4""), _(""x5""), _(""x6""),
                          _(""x7""), _(""x8""), _(""x9""), _(""x10""), _(""x12""), _(""x14""), _(""x16""), _(""x18""), _(""x20""),
                          _(""x30""), _(""x40"")},
                defaultIndex = 7,
                tooltip = _(""Adjust the capacity multiplier for Cargo Air Vehicle."")
            }, {
                key = ""waterMultiplier"",
                name = _(""Water Vehicle Capacity Multiplier""),
                uiType = ""SLIDER"",
                values = {_(""1/8""), _(""1/4""), _(""1/2""), _(""Default""), _(""x1.5""), _(""x2""), _(""x2.5""), _(""x3""), _(""x3.5""),
                          _(""x4""), _(""x4.5""), _(""x5""), _(""x5.5""), _(""x6""), _(""x6.5""), _(""x7""), _(""x7.5""), _(""x8""),
                          _(""x8.5""), _(""x9""), _(""x9.5""), _(""x10""), _(""x12""), _(""x14""), _(""x16""), _(""x18""), _(""x20"")},
                defaultIndex = 10,
                tooltip = _(""Adjust the capacity multiplier for Water Vehicle."")
            }, {
                key = ""priceRunningCost"",
                name = _(""Price & Running Cost Divider""),
                uiType = ""SLIDER"",
                values = {_(""Default""), _(""1/20""), _(""1/18""), _(""1/16""), _(""1/14""), _(""1/12""), _(""1/10""), _(""1/9""),
                          _(""1/8""), _(""1/7""), _(""1/6""), _(""1/5""), _(""1/4""), _(""1/3""), _(""1/2"")},
                defaultIndex = 1,
                tooltip = _(""Reduce Price & Running Cost for all rail vehicles."")
            }}
        },

        -- Adjusts the rail vehicles
        runFn = function(settings)
            local function adjustRailVehicleModel(fileName, data)
                -- Check if the vehicle is a rail / road Vehicle
                if data.metadata.railVehicle and data.metadata.roadVehicle and data.metadata.transportVehicle then
                    -- Reset running cost and price
                    data.metadata.maintenance.runningCosts = -1
                    data.metadata.cost.price = -1
                end
                return data
            end

            -- Add a modifier to adjust rail vehicle models
            addModifier(""loadModel"", adjustRailVehicleModel)
        end,

        postRunFn = function(settings, modParams)
            -- Retrieve all vehicles and multiple unit representations
            local allVehicles = api.res.modelRep.getAll()
            local multipleUnitRep = api.res.multipleUnitRep.getAll()

            -- Ensure modParams is valid
            local params = modParams[getCurrentModId()]
            if not params then
                return false
            end

            -- Construct the multiplier cache
            local multiplierCache = {
                mu = Constants.passengerMultipliers[params.muPassengerMultiplier + 1],
                wagonPassenger = Constants.passengerMultipliers[params.wagonPassengerMultiplier + 1],
                cargo = Constants.cargoMultipliers[params.cargoWagonMultiplier + 1],
                tramMu = Constants.passengerMultipliers[params.tramMultiplier + 1],
                roadPassenger = Constants.passengerMultipliers[params.roadPassengerMultiplier + 1],
                roadCargo = Constants.cargoMultipliers[params.roadCargoMultiplier + 1],
                passengerAir = Constants.passengerMultipliers[params.passengerAirMultiplier + 1],
                airCargo = Constants.cargoMultipliers[params.cargoAirMultipliers + 1],
                waterMu = Constants.passengerMultipliers[params.waterMultiplier + 1],
                priceDiv = Constants.priceRunningCost[params.priceRunningCost + 1]
            }

            -- Validate that multiplierCache is not nil
            if not multiplierCache then
                return false
            end

            -- Iterate through all vehicles and adjust their parameters based on the multipliers
            for _, model in ipairs(allVehicles) do
                local modelData = api.res.modelRep.get(api.res.modelRep.find(model))

                if modelData and Utils.safeGet(modelData, 'metadata', 'transportVehicle') then
                    Utils.modifyCargoEntries(modelData,
                        Utils.determineMultiplier(modelData, multiplierCache, multipleUnitRep))

                    -- Apply price and running cost adjustments
                    local priceDiv = multiplierCache.priceDiv
                    if priceDiv then
                        local maintenance = Utils.safeGet(modelData, 'metadata', 'maintenance')
                        local cost = Utils.safeGet(modelData, 'metadata', 'cost')

                        if maintenance and maintenance.runningCosts then
                            maintenance.runningCosts = Utils.mathRound(maintenance.runningCosts * priceDiv)
                        end
                        if cost and cost.price then
                            cost.price = Utils.mathRound(cost.price * priceDiv)
                        end
                    end
                end
            end
        end
    }
end
"
y1UKBRMy,Defenses,Vortex23,Lua,Monday 27th of October 2025 09:49:32 PM CDT,"local v1 = {
    [""Cannon""] = {
        [""Order""] = 1,
        [""Price""] = 50,
        [""UpgradeCost""] = 75,
        [""Info""] = ""Basic defense"",
        [""Image""] = ""rbxassetid://116754967028497"",
        [""BuildTime""] = 0,
        [""ProductId""] = 3419043085,
        [""ProductPrice""] = 9,
        [""MaxHP""] = 10,
        [""MaxLevel""] = 10,
        [""Range""] = 26,
        [""Damage""] = 6,
        [""Reload""] = 0.5
    },
    [""Wall""] = {
        [""Order""] = 2,
        [""Price""] = 75,
        [""Info""] = ""Slows enemies"",
        [""Image""] = ""rbxassetid://120220049762094"",
        [""BuildTime""] = 0,
        [""ProductId""] = 3419043386,
        [""ProductPrice""] = 14,
        [""UpgradeCost""] = 100,
        [""MaxHP""] = 10,
        [""MaxLevel""] = 10
    },
    [""Tung Tower""] = {
        [""Order""] = 3,
        [""Price""] = 200,
        [""UpgradeCost""] = 250,
        [""Info""] = ""Ranged attack"",
        [""Image""] = ""rbxassetid://126322496564097"",
        [""BuildTime""] = 0,
        [""ProductId""] = 3419043788,
        [""ProductPrice""] = 24,
        [""MaxHP""] = 25,
        [""MaxLevel""] = 10,
        [""Range""] = 34,
        [""Damage""] = 10,
        [""Reload""] = 1
    },
    [""Tesla""] = {
        [""Order""] = 4,
        [""Price""] = 650,
        [""UpgradeCost""] = 900,
        [""Info""] = ""Zaps enemies"",
        [""Image""] = ""rbxassetid://77721105291472"",
        [""BuildTime""] = 0,
        [""ProductId""] = 3419044148,
        [""ProductPrice""] = 29,
        [""MaxHP""] = 35,
        [""MaxLevel""] = 10,
        [""Range""] = 18,
        [""Damage""] = 14,
        [""Reload""] = 0.85,
        [""THRequired""] = 2
    },
    [""Gold Mine""] = {
        [""Order""] = 5,
        [""Price""] = 900,
        [""UpgradeCost""] = 1300,
        [""Info""] = ""Earns Gold offline"",
        [""Image""] = ""rbxassetid://101029043218871"",
        [""BuildTime""] = 0,
        [""ProductId""] = 3435675854,
        [""ProductPrice""] = 39,
        [""MaxHP""] = 55,
        [""MaxLevel""] = 10,
        [""GoldPerSecond""] = 4,
        [""THRequired""] = 2
    },
    [""Inferno""] = {
        [""Order""] = 6,
        [""Price""] = 1400,
        [""UpgradeCost""] = 1800,
        [""Info""] = ""Burns enemies"",
        [""Image""] = ""rbxassetid://105206404200484"",
        [""BuildTime""] = 0,
        [""ProductId""] = 3419044466,
        [""ProductPrice""] = 49,
        [""MaxHP""] = 45,
        [""MaxLevel""] = 10,
        [""Range""] = 26,
        [""Damage""] = 20,
        [""Reload""] = 1,
        [""THRequired""] = 3
    },
    [""Launcher""] = {
        [""Order""] = 7,
        [""Price""] = 2700,
        [""UpgradeCost""] = 3500,
        [""Info""] = ""Splash damage"",
        [""Image""] = ""rbxassetid://133494673363880"",
        [""BuildTime""] = 0,
        [""ProductId""] = 3419044602,
        [""ProductPrice""] = 64,
        [""MaxHP""] = 60,
        [""MaxLevel""] = 10,
        [""Range""] = 34,
        [""Damage""] = 48,
        [""Reload""] = 1.5,
        [""THRequired""] = 4
    },
    [""Air Blaster""] = {
        [""Order""] = 8,
        [""Price""] = 3200,
        [""UpgradeCost""] = 4700,
        [""Info""] = ""Air defense"",
        [""Image""] = ""rbxassetid://71792792638481"",
        [""BuildTime""] = 0,
        [""ProductId""] = 3431678183,
        [""ProductPrice""] = 99,
        [""MaxHP""] = 65,
        [""MaxLevel""] = 10,
        [""Range""] = 26,
        [""Damage""] = 172,
        [""Reload""] = 1,
        [""THRequired""] = 5
    },
    [""Crossbow""] = {
        [""Order""] = 9,
        [""Price""] = 5400,
        [""UpgradeCost""] = 7000,
        [""Info""] = ""Rapid fire"",
        [""Image""] = ""rbxassetid://74543853360723"",
        [""BuildTime""] = 0,
        [""ProductId""] = 3419044953,
        [""ProductPrice""] = 149,
        [""MaxHP""] = 80,
        [""MaxLevel""] = 10,
        [""Range""] = 46,
        [""Damage""] = 8,
        [""Reload""] = 0.1,
        [""THRequired""] = 6
    },
    [""Magic Tower""] = {
        [""Order""] = 10,
        [""Price""] = 7700,
        [""UpgradeCost""] = 9400,
        [""Info""] = ""Powerful blasts"",
        [""Image""] = ""rbxassetid://140615314867820"",
        [""BuildTime""] = 0,
        [""ProductId""] = 3435883178,
        [""ProductPrice""] = 249,
        [""MaxHP""] = 80,
        [""MaxLevel""] = 10,
        [""Range""] = 32,
        [""Damage""] = 64,
        [""Reload""] = 0.8,
        [""THRequired""] = 7
    },
    [""Tung Hut""] = {
        [""Order""] = 11,
        [""Price""] = 22000,
        [""UpgradeCost""] = 26000,
        [""Info""] = ""Spawns Tungs"",
        [""Image""] = ""rbxassetid://113419945289470"",
        [""BuildTime""] = 0,
        [""ProductId""] = 3438987452,
        [""ProductPrice""] = 399,
        [""MaxHP""] = 125,
        [""MaxLevel""] = 10,
        [""Reload""] = 3,
        [""THRequired""] = 8
    }
}
return v1"
pQntE2Ls,Product of Array Except Self - LeetCode,titan2400,Java,Monday 27th of October 2025 09:46:12 PM CDT,"// Product of Array Except Self - https://leetcode.com/problems/product-of-array-except-self/description/

class Solution {
    // Brute Force 
    // Time Complexity: O(n^2)
    // Space Complexity: O(1)
    // Below solution leads to Time Limit Exceeded on LeetCode
    // public int[] productExceptSelf(int[] nums) {
    //     int[] answer = new int[nums.length];
    //     for(int i = 0; i < nums.length; i++) {
    //         int product = 1;
    //         for (int j = 0; j < nums.length; j++) {
    //             if (i != j) {
    //                 product *= nums[j];
    //             }
    //         }

    //         answer[i] = product;
    //     }

    //     return answer;
    // }

    // Ignoring the Division constraint
    // Time Complexity: O(n)
    // Space Complexity: O(1)
    // Below solution doesn't work when input array has 0
    // public int[] productExceptSelf(int[] nums) {
    //     int[] answer = new int[nums.length];
    //     int arrayProduct = 1;
    //     for(int i = 0; i < nums.length; i++) {
    //         arrayProduct *= nums[i];
    //     }

    //     for(int i = 0; i < nums.length; i++) {
    //         if (nums[i] != 0) {
    //             answer[i] = arrayProduct / nums[i];
    //         }
            
    //     }

    //     return answer;
    // }

    // Ignoring the Division constraint
    // Time Complexity: O(n)
    // Space Complexity: O(1)
    // public int[] productExceptSelf(int[] nums) {
    //     int[] answer = new int[nums.length];
    //     int arrayProduct = 1, zCount = 0;
    //     for(int i = 0; i < nums.length; i++) {
    //         if (nums[i] != 0) {
    //             arrayProduct *= nums[i];
    //         } else {
    //             zCount++;
    //         }

    //     }

    //     if(zCount > 1) {
    //         return answer;
    //     }

    //     for(int i = 0; i < nums.length; i++) {

    //         if(zCount > 0) {
    //             answer[i] = (nums[i] == 0)? arrayProduct: 0;
    //         }
    //         else {
    //             answer[i] = arrayProduct / nums[i];
    //         }
    //     }

    //     return answer;
    // }

    // Using Prefix & Suffix products arrays
    // Time Complexity: O(n)
    // Space Complexity: O(n)
    // public int[] productExceptSelf(int[] nums) {
    //     int[] answer = new int[nums.length];

    //     int[] prefix = new int[nums.length];
    //     int[] suffix = new int[nums.length];


    //     // prefixes
    //     prefix[0] = 1;
    //     for(int i = 1; i < nums.length; i++) {
    //         prefix[i] = prefix[i - 1] * nums[i - 1];
    //     }

    //     // suffixes
    //     suffix[nums.length - 1] = 1;
    //     for(int i = nums.length - 2; i >= 0; i--) {
    //         suffix[i] = suffix[i + 1] * nums[i + 1];
    //     }

    //     for(int i = 0; i < nums.length; i++) {
    //         answer[i] = prefix[i] * suffix[i];
    //     }

    //     return answer;
    // }

    // Using Prefix & Suffix products optimised for space
    // Time Complexity: O(n)
    // Space Complexity: O(1)
    public int[] productExceptSelf(int[] nums) {
        int[] answer = new int[nums.length];

        // prefixes
        answer[0] = 1;
        for(int i = 1; i < nums.length; i++) {
            answer[i] = answer[i - 1] * nums[i - 1];
        }

        // suffixes
        int suffix = 1;
        for(int i = nums.length - 1; i >= 0; i--) {
            answer[i] *= suffix;
            suffix *= nums[i];
        }

        return answer;
    }
}
"
v7raCCju,Group Anagrams - LeetCode,titan2400,Java,Monday 27th of October 2025 09:16:50 PM CDT,"// Group Anagrams - https://leetcode.com/problems/group-anagrams/

class Solution {

    // Using HashMap to build dictionary
    // Time Complexity: O(n * klogk)
    //  where k is the length of string
    // Space Complexity: O(n * k)

    // Key Clarifications
    // - Do we need special handling for empty strings
    // - Can we assume that input strings are all lowercase
    // public List<List<String>> groupAnagrams(String[] strs) {

    //     Map<String, List<String>> map = new HashMap<>();

    //     for(int i = 0; i < strs.length; i++) {
    //         char[] charArray = strs[i].toCharArray();
    //         Arrays.sort(charArray);
    //         String sorted = new String(charArray);

    //         List<String> anagrams = map.getOrDefault(sorted, new ArrayList<>());
    //         anagrams.add(strs[i]);
    //         map.put(sorted, anagrams);
    //     }

    //     List<List<String>> result = new ArrayList<>();
    //     for(List<String> anagrams: map.values()) {
    //         result.add(anagrams);
    //     }

    //     return result;
    // }

    // Same as above but compact code
    public List<List<String>> groupAnagrams(String[] strs) {

        Map<String, List<String>> map = new HashMap<>();
        for(int i = 0; i < strs.length; i++) {
            char[] charArray = strs[i].toCharArray();
            Arrays.sort(charArray);
            String sorted = new String(charArray);
            map.putIfAbsent(sorted, new ArrayList<>());
            map.get(sorted).add(strs[i]);
        }

        return new ArrayList<>(map.values());
    }
}"
auQtbwL5,Brainrot Jumping Inf Money,GuysModz,Lua,Monday 27th of October 2025 08:42:39 PM CDT,"--[[ v1.0.0 https://wearedevs.net/obfuscator ]] return(function(...)local Z={""\116\097\068\082\110\054\068\082\053\117\102\098\053\072\076\121"";""\086\082\114\056\120\047\065\061"",""\115\072\076\085\110\079\119\061"";""\049\049\051\113\113\086\061\061"";""\113\055\078\079\115\065\061\061"";""\121\069\078\102\052\116\087\122\066\078\090\061"";""\076\072\068\053\085\115\056\084\118\065\061\061"";""\122\106\086\056\053\106\090\100\101\086\061\061"";""\105\090\065\110"",""\076\080\079\049\048\103\106\061"",""\077\084\109\087\068\055\106\120"",""\100\110\122\099\070\098\088\053\051\055\106\043\075\069\051\100\083\086\083\061"";""\065\079\049\065\081\117\083\061"",""\087\083\068\111\066\086\108\068\083\100\061\061"",""\056\084\108\081\050\072\065\081\068\074\119\105\116\114\043\054"";""\116\122\115\105\068\074\104\077\099\054\109\043\056\120\050\047"";""\050\104\043\115\102\114\043\080\115\057\068\106\053\117\107\047"",""\067\057\098\054\117\099\099\049\089\101\061\061"";""\108\089\085\097\098\047\109\103\052\065\061\061"";""\065\097\111\103\110\072\068\074\073\086\061\061"",""\099\067\075\068\106\050\057\118\110\055\103\070\088\097\084\122\053\055\065\061"";""\107\072\075\081\071\066\085\118\074\097\082\090\070\086\070\118\082\108\080\061"",""\068\043\104\056\072\068\073\106\055\067\053\109\065\118\074\113\111\065\061\061"",""\098\080\116\087\043\078\074\099\067\080\101\061"";""\065\084\086\121\048\101\061\061"",""\109\053\084\070\100\065\061\061"";""\043\054\106\072\054\052\120\047\051\100\061\061"",""\081\113\107\061"";""\052\102\107\079\100\121\084\104\051\080\056\079\118\085\083\056\078\047\115\109\100\069\047\118\089\065\113\081\090\086\061\061"";""\057\122\075\101"";""\084\052\057\106\083\101\061\061"";""\110\043\113\083\081\078\080\100\067\108\110\047\074\103\086\061"";""\077\100\061\061"",""\074\121\054\087"";""\077\102\106\089\105\083\113\074\053\109\075\065\085\101\061\061"";""\055\065\066\065"";""\052\074\050\043\105\076\122\080\079\043\047\056\048\099\066\066\098\110\066\113\110\100\061\061"";""\110\099\101\061"",""\082\079\052\100\100\100\061\061"",""\102\072\121\049\115\068\050\121\116\057\115\121\116\100\061\061"";""\077\106\104\043\054\099\065\105\073\081\043\107\073\114\108\065"";""\117\081\111\108\110\072\102\121\051\086\061\061"";""\105\054\121\104"";""\089\084\085\122\101\068\105\048\118\055\053\061"";""\073\072\050\052\054\080\107\122\083\080\105\103\053\081\068\066"";""\067\075\090\098\101\122\082\061"",""\118\084\051\118\052\086\061\061"";""\068\057\108\090\115\099\100\097\065\080\107\122\065\074\043\119"",""\104\052\120\113\071\100\080\061"";""\068\099\102\108\110\120\119\061"",""\110\121\102\084\053\054\108\043\051\084\068\103\050\117\050\114\083\065\061\061"",""\099\081\115\072\110\122\068\105\099\080\098\085\083\097\105\081\065\082\053\061"";""\072\069\066\076\086\107\097\083\055\079\106\061"";""\117\047\108\090\119\051\108\105\088\119\120\070\084\108\043\117"",""\112\086\061\061"",""\103\103\043\049\100\100\061\061"",""\073\114\104\122\056\101\061\061"",""\116\079\102\049\056\054\105\057"";""\067\102\065\061"";""\097\055\105\106"",""\114\100\086\086\119\100\061\061"",""\047\050\103\050"";""\088\118\098\075\100\078\106\061"";""\065\057\112\071\100\051\100\061"",""\077\049\067\070\075\101\061\061"",""\068\114\104\109\116\114\068\049\119\106\102\121\073\114\068\074\073\114\068\080\119\065\061\061"";""\054\080\073\054\120\122\068\077\099\082\098\117\089\117\073\117\068\120\119\061"",""\083\051\111\110\050\101\061\061"";""\049\111\115\089\079\072\090\061"";""\070\108\100\055\067\066\102\049\087\106\065\061"";""\119\082\056\079\111\116\087\120\077\101\061\061"";""\115\114\102\077\050\117\098\108\073\114\073\115\099\122\102\078"";""\110\067\106\061"",""\110\067\119\061"",""\068\072\068\074\073\114\111\049\083\100\061\061"",""\089\103\112\049\055\084\081\114\117\072\111\056\071\053\066\065\047\107\116\083\066\100\061\061"",""\103\067\089\083\043\088\104\086\052\075\099\061"",""\102\054\105\081\110\065\061\061"",""\072\107\109\082"","""",""\080\054\054\079\090\070\080\103"",""\068\122\115\074\110\108\122\082\070\052\090\061"";""\115\110\087\117\089\065\061\061"";""\089\073\097\084"",""\120\097\121\047\102\054\108\087\083\068\106\105\099\068\121\067\065\100\061\061"";""\088\111\057\049\116\066\118\115\106\083\065\049\107\108\116\061"",""\082\082\054\050\043\079\106\061"",""\068\106\109\101\083\084\083\082\077\114\050\067\120\074\102\053\068\101\061\061"",""\121\104\047\107\050\101\061\061"",""\078\077\116\054\075\108\050\097\082\100\061\061"",""\102\075\055\077\109\080\104\052\120\074\067\097\121\052\121\085\051\116\081\104\084\101\065\086\113\074\089\072\109\100\061\061"",""\097\074\111\067"";""\077\118\100\121\115\052\107\108\077\100\061\061"";""\068\097\104\108\073\106\115\085\116\080\050\107\056\054\076\080"",""\120\108\068\079\078\083\051\099"",""\047\120\107\075\057\051\088\098\057\101\061\061"";""\111\116\119\052\098\065\061\061"";""\071\089\048\072\071\100\061\061"",""\043\085\069\070\103\110\082\100\104\052\066\049\056\072\051\083\122\102\101\114\049\100\067\089\108\076\090\056\119\068\101\061"",""\073\114\104\118\110\114\099\061"";""\053\097\098\098\116\100\061\061"",""\115\117\043\049\110\079\119\061"",""\054\121\068\114\054\072\081\101\115\081\065\061"",""\117\081\111\090\115\054\047\061"";""\108\111\102\087"",""\075\068\098\100\079\119\049\109\112\101\061\061"";""\052\097\100\089\076\086\061\061"";""\117\081\111\109\115\117\102\098\073\114\104\118\110\114\099\061"";""\116\072\068\109\110\079\115\121"";""\067\047\114\118\051\047\048\086\086\087\088\071"",""\110\114\068\103"",""\072\097\083\070\077\086\061\061"",""\115\097\104\109\115\065\061\061"";""\102\069\065\050\086\065\061\061"";""\090\100\121\086\081\121\116\061"";""\108\110\117\047"";""\117\081\111\057\053\101\061\061"",""\050\050\049\049\102\115\085\098\110\048\108\054"";""\073\054\105\101\053\054\050\087"";""\053\073\087\087\112\068\089\068\067\101\061\061"",""\073\114\111\103\073\054\081\118\115\117\119\061"",""\117\089\089\080"",""\103\110\070\099\057\049\075\065\118\121\098\090\077\075\052\086"";""\100\118\100\085\085\101\061\061"";""\049\071\111\057\098\087\099\076\081\081\109\106\084\100\061\061"",""\098\065\118\066\118\050\070\071\118\043\053\061"";""\119\111\053\113\069\106\122\122\098\079\114\057\109\085\075\122\068\099\068\052\119\069\107\061"";""\065\097\111\090\110\079\119\122"",""\102\106\050\050\099\054\104\098\050\081\108\115\102\079\050\077\089\081\106\061"",""\110\054\104\082\056\086\061\061"",""\115\079\050\081\053\100\061\061"",""\121\116\077\101"";""\108\068\103\067\117\047\112\119\068\089\099\061"",""\067\051\102\089"",""\117\048\104\099"",""\118\048\054\116\107\065\061\061"",""\116\072\104\103\115\114\111\109"",""\083\081\079\086\116\115\050\051\116\089\053\061"",""\121\055\055\099\109\082\049\074\076\082\084\105\112\108\049\073\076\117\117\081\068\065\061\061"",""\114\102\065\084\120\055\118\107\116\065\061\061"",""\053\097\111\103\053\097\104\082"",""\075\122\084\088"",""\115\122\098\097\077\068\065\101\120\067\068\085\077\114\105\101\089\081\086\061"";""\081\083\080\089\098\081\069\079\082\056\098\047\108\083\118\104"";""\052\121\075\082\106\055\054\043\075\078\051\117\102\100\061\061"",""\115\097\081\098\073\114\050\107"",""\102\097\068\082\099\097\068\049\073\072\121\074\115\065\061\061"",""\114\049\080\101\120\087\079\055\088\083\106\120\121\075\114\080\097\068\108\099\081\083\114\110\068\108\069\056\083\065\061\061"",""\116\114\050\098\110\114\101\061"",""\099\122\104\083\056\068\065\082\050\057\050\047\083\080\081\056\053\081\119\061"";""\068\099\102\108\110\065\061\061"";""\097\097\086\114\051\112\089\078\082\076\085\122\057\078\087\073\047\072\108\054\066\065\061\061"",""\083\122\104\066\077\099\102\122\115\068\098\052\065\120\050\108"";""\112\104\121\068"";""\056\082\102\075\116\082\073\075\110\079\108\098\050\054\105\043\102\101\061\061"",""\089\071\122\067\090\057\099\088\101\081\056\083\109\055\120\089"",""\119\073\052\066\055\080\109\051\108\100\109\105\048\086\061\061"";""\121\068\111\082"";""\122\069\108\084\115\101\055\082\052\097\107\061"",""\075\113\104\118\056\068\119\105\116\101\061\061"",""\122\056\085\120\114\065\061\061"";""\120\078\112\098"",""\097\083\112\101\101\074\072\118\120\100\106\061"";""\098\122\116\090\082\065\061\061"",""\073\114\111\122\073\084\043\108\110\072\116\061"";""\050\077\049\084"";""\047\089\087\099"";""\085\104\118\050\108\108\084\101\117\098\103\083\080\101\061\061"",""\098\089\047\100\054\078\101\119\116\101\061\061"",""\089\054\105\122\073\114\104\103\053\097\099\061"";""\103\053\086\056\052\097\122\109\086\053\103\070\043\109\086\061"",""\067\089\120\067\087\073\081\080\070\101\061\061"",""\065\079\121\097\054\106\108\072\099\080\105\083\053\121\107\081\089\101\061\061"";""\056\067\083\100\090\100\061\061"",""\065\082\053\079\053\122\086\105\120\099\081\068\050\072\068\069"";""\102\114\068\122\073\084\043\085\051\065\061\061"";""\080\116\105\084\082\099\051\121\118\069\120\068\077\065\061\061"";""\088\116\069\108\055\065\061\061"";""\055\070\098\054\121\109\055\108\072\067\119\102\082\065\109\117\118\047\106\067\089\106\047\061"",""\051\052\087\057\085\057\119\051\047\101\098\079\043\069\120\079"";""\119\102\066\079\067\109\116\070\080\052\109\114"";""\107\054\101\076\109\100\061\061"";""\053\057\121\082\115\065\061\061"",""\111\089\071\106"";""\107\107\057\084\100\100\061\061"",""\112\097\087\117\070\104\117\070\110\119\043\101\082\057\106\113\085\109\085\088\104\118\119\061"",""\048\115\083\108\102\074\077\073\120\106\100\115"";""\085\112\052\122\106\099\069\076\051\090\076\053\068\100\061\061"",""\056\117\078\098\056\117\043\122"",""\056\110\116\114\068\109\122\057\082\056\055\120\089\065\061\061"",""\051\122\052\100\103\102\112\056\088\081\047\074\052\102\081\051\101\097\053\067\084\114\052\085"",""\097\070\113\076\113\100\104\113\076\111\121\075"",""\077\120\076\113\086\112\086\057\053\053\066\067\055\100\061\061"";""\099\068\106\074\089\100\061\061"";""\051\116\100\106\097\100\061\061"",""\110\079\121\067\051\099\108\090\065\054\076\087\102\104\115\043\089\100\061\061"",""\103\101\117\112\043\043\088\104\077\101\074\077\055\070\075\048\120\102\081\122\069\118\065\110\109\065\061\061"";""\075\072\055\113\078\073\121\074"";""\119\066\079\050\111\100\116\050\079\106\066\081\050\098\121\103"";""\067\066\115\104\111\100\061\061"";""\102\057\098\107\053\099\081\069\051\114\068\089\110\122\073\077\056\100\061\061"";""\117\072\103\103"";""\080\088\098\108""}local function Q(Q)return Z[Q-(294979+-294148)]end for Q,B in ipairs({{-775199-(-775200),-531896+532099};{146976-146975;990324+-990316};{-639516+639525;181637-181434}})do while B[-223024-(-223025)]<B[-693691-(-693693)]do Z[B[1003208+-1003207]],Z[B[-407902-(-407904)]],B[443281+-443280],B[-622748-(-622750)]=Z[B[-167937+167939]],Z[B[-18101-(-18102)]],B[-342490-(-342491)]+(250600-250599),B[-836981-(-836983)]-(387882+-387881)end end do local Q=table.insert local B=string.sub local v=Z local X=table.concat local E={S=586494-586482;Y=-45097-(-45115);b=796110+-796077,[""\052""]=252117-252115,g=-910775-(-910821),[""\056""]=989369-989343;n=1023185+-1023158,x=199182+-199163;O=716579+-716524,G=-278389-(-278447),k=738409+-738369;q=-935522+935581;J=547602-547567,[""\049""]=502296+-502246,r=277200+-277194;T=428120+-428113,w=-1003940-(-1003948),e=1031429-1031381,X=-188816-(-188876);[""\053""]=259917+-259893;N=925705+-925704,W=-431331+431374;d=894354+-894322;o=-138346-(-138407);f=782926-782909;j=-816030+816034;[""\054""]=362035-362013,A=-19729+19745;i=960867-960810;[""\043""]=-311333+311342,E=559682-559640,M=959453+-959439,m=-385201+385246,l=855548+-855507,U=-183601+183648;y=-68588-(-68625);[""\057""]=714065-714026,t=51764-51736;[""\055""]=-102820+102882,Q=697898+-697845,D=894389-894368,z=280191+-280140,[""\047""]=433436+-433380;V=751277-751277;a=-287307+287361;I=91913-91884;L=-299795-(-299844);[""\051""]=231654+-231624;v=9096+-9062,K=-760510-(-760521);u=-228276-(-228299),c=1031360+-1031340;B=-187458-(-187473);[""\050""]=354445-354432,Z=-253887+253931,p=775222-775159,H=194539+-194501,[""\048""]=111870+-111839;F=-975221+975231;C=-429947-(-429950);s=-1027109-(-1027134),R=353485+-353433;P=700349+-700313,h=273394-273389}local m=string.len local H=type local b=math.floor local R=string.char for Z=-1505+1506,#v,-909844-(-909845)do local i=v[Z]if H(i)==""\115\116\114\105\110\103""then local H=m(i)local x={}local l=246552+-246551 local O=439065+-439065 local e=1027748+-1027748 while l<=H do local Z=B(i,l,l)local v=E[Z]if v then O=O+v*(-261813-(-261877))^((-44826+44829)-e)e=e+(-538463-(-538464))if e==1006766+-1006762 then e=140907-140907 local Z=b(O/(132803-67267))local B=b((O%(-857968-(-923504)))/(-601557+601813))local v=O%(-500655-(-500911))Q(x,R(Z,B,v))O=-222321+222321 end elseif Z==""\061""then Q(x,R(b(O/(-1003445+1068981))))if l>=H or B(i,l+(724847-724846),l+(149774+-149773))~=""\061""then Q(x,R(b((O%(168978-103442))/(938860-938604))))end break end l=l+(46985-46984)end v[Z]=X(x)end end end return(function(Z,v,X,E,m,H,b,N,x,l,B,A,K,R,O,k,c,J,j,o,i,e)N,e,j,i,O,A,J,x,K,o,B,R,l,c,k=function(Z,Q)local v=O(Q)local X=function(X,E,m,H)return B(Z,{X,E;m;H},Q,v)end return X end,function(Z)local Q,B=-766896-(-766897),Z[258118-258117]while B do i[B],Q=i[B]-(803516-803515),Q+(-599744+599745)if i[B]==169713+-169713 then i[B],R[B]=nil,nil end B=Z[Q]end end,function(Z,Q)local v=O(Q)local X=function(X)return B(Z,{X},Q,v)end return X end,{},function(Z)for Q=-565202-(-565203),#Z,905962-905961 do i[Z[Q]]=i[Z[Q]]+(983773+-983772)end if X then local B=X(true)local v=m(B)v[Q(973465+-972584)],v[Q(74033-73077)],v[Q(274172+-273229)]=Z,e,function()return 709342+-4222481 end return B else return E({},{[Q(354537+-353581)]=e,[Q(-703498-(-704379))]=Z;[Q(218389-217446)]=function()return-408087+-3105052 end})end end,function(Z,Q)local v=O(Q)local X=function()return B(Z,{},Q,v)end return X end,function(Z,Q)local v=O(Q)local X=function(X,E,m,H,b)return B(Z,{X;E;m;H,b},Q,v)end return X end,function()l=l+(70819+-70818)i[l]=-155642-(-155643)return l end,function(Z)i[Z]=i[Z]-(192105-192104)if 948206+-948206==i[Z]then i[Z],R[Z]=nil,nil end end,function(Z,Q)local v=O(Q)local X=function(...)return B(Z,{...},Q,v)end return X end,function(B,X,E,m)local P,T,l,z,D,Bx,V,r,S,Zx,b,a,I,u,i,M,p,U,Qx,Y,s,d,q,G,y,n,e,F,O,C,o,g,t,w,W,h,f,L while B do if B<7340194-(-736859)then if B<3384575-(-434549)then if B<2654423-750689 then if B<-858768+1549082 then if B<443915-98205 then if B<-306861+447364 then if B<538459-450433 then B=true B=B and 833355+9707186 or-685270+13377311 else d=#M T=618962+-618962 s=d==T B=4527665-709837 end else if B<457396+-201615 then B=true B=B and 9359586-866248 or-559521+14091349 else f=G==a B=985644+11931216 g=f end end else if B<126456-(-481008)then if B<1037883-592274 then B=o e[B]=b a=17582414689334-234555 z=6389680305706-(-628085)b=R[E[861999-861998]]o=R[E[-631539-(-631541)]]p=Q(763153-762169)w=o(p,z)B=b[w]w=Q(158147-157180)G=-181434+27189226403374 o=Z[w]p=R[E[63257-63256]]F=Q(635761+-634802)z=R[E[812485+-812483]]L=z(F,G)w=p[L]p=-64651-(-64906)b=o[w]w=160256+-160001 z=436770+-436515 o=b(w,p,z)z=-303752+12019978745957 e[B]=o p=Q(618684+-617806)b=R[E[-614392-(-614393)]]o=R[E[-580537+580539]]w=o(p,z)B=b[w]b=i e[B]=b z=293152+12525363469736 b=R[E[993760+-993759]]o=R[E[55288-55286]]p=Q(98831-97987)w=o(p,z)B=b[w]p=Q(342348-341431)w=Z[p]z=R[E[-814172-(-814173)]]L=R[E[466188-466186]]G=Q(-544-(-1561))F=L(G,a)G=147106+6851928083924 p=z[F]o=w[p]p=R[E[-460409+460410]]z=R[E[-336962+336964]]F=Q(-400702+401576)L=z(F,G)w=p[L]b=o[w]e[B]=b b=R[E[1008780+-1008779]]L=Q(795939+-795016)z=-206452+11998256561223 p=Q(-398280-(-399257))o=R[E[-262329-(-262331)]]w=o(p,z)B=b[w]o=Q(-384309+385318)b=-149880+149894 e[B]=b b=Z[o]F=365834773735-(-826307)w=R[E[-772529-(-772530)]]p=R[E[-614285+614287]]z=p(L,F)o=w[z]F=-379122+21764385206408 a=-495412+29373788423330 L=Q(-847661-(-848626))B=b[o]w=R[E[-242237-(-242238)]]G=Q(26760-25922)p=R[E[1023860+-1023858]]z=p(L,F)o=w[z]b=B(o,e)L=-239608+1798611872573 o=R[E[271335-271334]]w=R[E[-228099-(-228101)]]z=Q(-26189-(-27184))p=w(z,L)B=o[p]p=Q(230459+-229469)w=Z[p]z=R[E[-3776+3777]]L=R[E[274718-274716]]F=L(G,a)p=z[F]o=w[p]z=649850+-649842 p=749838-749838 w=o(p,z)b[B]=w b={e}B=Z[Q(1000168+-999257)]else i=x()R[i]=X[-654832-(-654833)]l=x()R[l]=X[-157944-(-157946)]p=Q(-528680+529646)b=R[i]e=R[E[937017+-937016]]z=-974129+2342138683763 o=R[E[-556888+556890]]w=o(p,z)O=e[w]B=b[O]b=Q(104199-103340)O=A(-270327+8231783,{E[993692+-993689];l,i,E[-623715+623716];E[999791-999789]})b=B[b]i=K(i)b=b(B,O)l=K(l)B=Z[Q(-158086-(-159100))]b={}end else O=-271208-(-271249)l=R[E[-588465-(-588467)]]i=l*O l=2164+32174625026577 b=i+l l=597477+-597476 i=35184371221313-(-867519)B=b%i R[E[601512-601510]]=B i=R[E[-575986+575989]]b=i~=l B=-71820+16823302 end end else if B<1305231-(-33934)then if B<161956+917128 then if B<1045767-237492 then I=384263-384262 h=B q=t[I]I=false Y=q==I U=Y B=Y and 244559+1768617 or 14715921-(-1026477)else B=R[p]T=-198893-(-198899)W=-877581-(-877582)f=B(W,T)B=Q(-703728-(-704641))T=Q(169767-168854)Z[B]=f W=Z[T]T=-925291+925293 B=W>T B=B and 827633+14280702 or 7115027-(-173977)end else B=584006+14140366 end else if B<531358+1068704 then if B<2275207-894323 then O=O+o p=not w l=O<=e l=p and l p=O>=e p=w and p l=p or l p=-526202+16994333 B=l and p l=6896501-(-443967)B=B or l else B=R[E[302343+-302336]]B=B and 6903662-465433 or 15582520-1014557 end else B=-349620+3882985 G=Q(661666+-660767)z=R[E[-460107+460111]]L=R[E[-479507+479512]]a=719839+27377556944365 F=L(G,a)p=z[F]o=p end end end else if B<2285183-(-673765)then if B<491204+1846674 then if B<1486921-(-668590)then if B<1706009-(-385978)then I=459301-459299 q=t[I]I=R[n]B=-442768+16185166 Y=q==I U=Y else L=A(754187+1442462,{})b=Q(-67457-(-68417))B=Z[b]e=Q(68458-67454)z=Q(-575954-(-576942))i=R[E[601656-601652]]O=Z[e]p=Z[z]z={p(L)}w={v(z)}p=784014-784012 o=w[p]e=O(o)O=Q(-801718+802650)l=i(e,O)i={l()}b=B(v(i))i=b l=R[E[-442767-(-442772)]]b=l B=l and 13070805-(-160213)or-169166+3529681 end else if B<-159185+2356244 then l=Q(127050-126173)b=13068106-160681 O=723133+15554399 i=l^O B=b-i b=Q(-183470-(-184452))i=B B=b/i b={B}B=Z[Q(903618+-902691)]else b={}B=true R[E[-260877-(-260878)]]=B B=Z[Q(-864484-(-865408))]end end else if B<1781325-(-749699)then if B<521684+1951352 then i=R[E[520249-520248]]b=#i i=-419162-(-419162)B=b==i B=B and-657936+1345778 or 15652015-617173 else u=not T g=g+W b=g<=f b=u and b u=g>=f u=T and u b=u or b u=7200851-675727 B=b and u b=387549+14817865 B=B or b end else B=12758389-(-73028)end end else if B<644721+2854885 then if B<3203046-(-219134)then if B<3214132-131796 then w=9e+50-(-74731)L=Q(920999+-920030)b=Q(808583-807555)s=-711173+35121468742119 B=Z[b]z=Z[L]F=R[E[1028834-1028833]]G=R[E[294554+-294552]]M=Q(1015430-1014455)a=G(M,s)o=-978148+1e+100 e=9e+99-367295 L=F[a]p=z[L]O={e,o,w;p}e={B(O)}i=e[-148786-(-148788)]b=e[871184+-871183]l=e[799457+-799454]O=b B=537650+12685878 else i=nil R[E[-1014750+1014755]]=b B=1048133-(-334483)end else B=7691143-548810 end else if B<-781943+4397395 then if B<659136+2928098 then B=w l=e..o i=O..l B[b]=i B=R[E[269212-269209]]i=R[E[197885-197881]]l=R[E[26908+-26903]]e=Q(698827-697912)o=14668940663663-508097 O=l(e,o)b=i[O]w=R[E[-871093-(-871094)]]e=B l=B p=R[E[354078-354076]]o=w[p]B=o and 12252628-(-172279)or 1031633+4423005 O=o else p=nil B=7788952-646619 w=nil e=nil end else d=205305+-205304 P=-656234-(-656235)T=#M s=O(d,T)B=-725455+7529355 d=w(M,s)T=R[a]s=nil r=d-P u=p(r)T[d]=u d=nil end end end end else if B<266882+5830294 then if B<5356380-(-121177)then if B<403825+4605932 then if B<863397+3393723 then if B<-658800+4568952 then B=12297885-515165 R[l]=b else i=Q(-681520+682432)b=Q(-882732+883645)B=Z[b]b=Z[i]i=Q(35910-34998)Z[i]=B B=15472696-748324 i=Q(-110717-(-111630))Z[i]=b i=R[E[821689-821688]]l=i()end else if B<4412415-(-392414)then a=Q(-361874+362828)B=R[E[-380553+380556]]g=2710654787122-907588 M=31043097956150-202431 s=18276812633596-(-322370)e=l e=nil L=R[E[48744-48743]]F=R[E[52575-52573]]w=Q(668843+-667964)G=F(a,M)z=L[G]F=R[E[160852-160851]]M=Q(-745169-(-746202))d=17519511012319-631809 G=R[E[392636+-392634]]a=G(M,s)w=B[w]L=F[a]G=R[E[750481+-750480]]a=R[E[-950792+950794]]s=Q(448782-447933)M=a(s,d)F=G[M]a=R[E[-599245-(-599246)]]d=Q(-838362-(-839196))M=R[E[-377500+377502]]s=M(d,g)G=a[s]a=-75336+75336 p={[z]=o;[L]=F;[G]=a}w=w(B,p)p=Q(217096+-216200)w=Z[p]z=R[E[-217089-(-217090)]]L=R[E[-15913-(-15915)]]G=Q(-883608-(-884472))a=-587690+30275069898427 F=L(G,a)p=z[F]B=w[p]p=.1 o=nil w=B(p)B=-835266+14058794 else o=Q(-763915+764928)i=Q(513968-513072)b=Z[i]l=R[E[-956615-(-956617)]]O=R[E[994289-994286]]w=-996451+12074762816089 e=O(o,w)i=l[e]B=b[i]i=.05 b=B(i)B=-35646-(-258737)end end else if B<-448890+5866894 then if B<753033+4313511 then U=R[l]b=U B=U and 104155-(-634048)or 230236+3678307 else o=Q(-950472+951439)B=-181370+6382419 e=Z[o]L=Q(-1032973-(-1033902))w=R[E[-821317+821321]]p=R[E[-266237+266242]]F=2043216655711-(-822872)z=p(L,F)p=324350-324270 o=w[z]O=e[o]o=250578-250378 w=-103615-(-103695)e=O(o,w,p)i=e end else i=O B=e B=O and 6718765-517716 or 37870+5370169 end end else if B<-258636+6257283 then if B<371586+5446489 then if B<-577494+6102856 then M=not a F=F+G z=F<=L z=M and z M=F>=L M=a and M z=M or z M=337711+9149551 B=z and M z=-604163+4193026 B=B or z else B=b and 1615274-(-480250)or 585907-(-796709)end else b=Q(-957545+958533)i=c(-1014940+16431956,{E[101407-101403]})B=Z[b]b=B(i)B=5317440-459271 end else if B<-855851+6936621 then if B<-418996+6497450 then b=Q(904277+-903336)B=Z[b]i=Q(-4915-(-5820))b=B(i)B=Z[Q(-1012002-(-1012893))]b={}else w=R[o]B=9835359-214968 b=w end else l=R[E[-718005-(-718007)]]O=R[E[-703259+703262]]B=-477565+6154301 i=l==O b=i end end end else if B<886006+6322341 then if B<-389368+6828156 then if B<15025+6164376 then if B<442311+5708766 then B=-630623-(-714295)else B=847177+-624086 end else if B<7092084-723096 then B=l B[b]=i b={}B=Z[Q(264886+-264049)]else O=-939525-(-939525)i=Q(-679768+680709)B=Z[i]l=R[E[-66422+66430]]i=B(l,O)B=15210794-642831 end end else if B<-1024598+7955773 then if B<681966+6034370 then u=x()P=-496547+496647 C=819371+-819116 R[u]=g r=Q(862347-861378)b=Z[r]r=Q(-923532+924508)B=b[r]r=619870+-619869 D=-663959+673959 b=B(r,P)r=x()R[r]=b B=R[p]n=622195+-622194 P=839926-839926 t=-61347+61349 b=B(P,C)P=x()C=822213-822212 R[P]=b B=R[p]V=R[r]b=B(C,V)y=-171936-(-171936)C=x()R[C]=b Y=Q(-370625+371629)b=R[p]V=b(n,t)b=-1021533-(-1021534)B=V==b V=x()b=Q(-515681-(-516613))R[V]=B h=Z[Y]t=Q(877189-876317)B=Q(-557335-(-558305))q=R[p]I={q(y,D)}Y=h(v(I))h=Q(-675687+676559)U=Y..h n=t..U B=s[B]B=B(s,b,n)n=x()R[n]=B t=Q(-463468-(-464456))b=Z[t]U=c(115734+9530898,{p;u,F,O,l;d;V;n;r;C;P,L})t={b(U)}B={v(t)}t=B B=R[V]B=B and-451384+5489749 or 7854031-118393 else T=-342630-(-342630)d=#M s=d==T B=s and 11496417-(-548751)or 336012+3481816 end else b={l}B=Z[Q(-66420+67414)]end end else if B<518965+7260171 then if B<8521072-797579 then if B<943245+6378848 then T=Q(11728-10815)B=Z[T]T=Q(-74811-(-75723))Z[T]=B B=13457910-(-295091)else B=R[E[724436-724426]]l=R[E[-796799+796810]]i[B]=l B=R[E[607363-607351]]l={B(i)}B=Z[Q(1027062+-1026178)]b={v(l)}end else h=R[l]U=h B=h and 746969+15716090 or 10099853-628952 end else if B<7872288-(-110038)then if B<7478011-(-439461)then B=true B=B and 1774425-837595 or 395832+9765355 else B=R[E[-666295-(-666296)]]b=R[E[-19217-(-19219)]]o=5619050690514-585114 z=Q(341097+-340076)O=R[E[-531353-(-531354)]]e=R[E[-182317+182319]]l=O[e]i=not l B[b]=i B=R[E[-448493+448496]]e=Q(-524688+525531)L=795277+2463827993070 i=R[E[-497585+497589]]l=R[E[-726603-(-726608)]]O=l(e,o)b=i[O]O=R[E[-993928+993931]]o=R[E[-675366-(-675370)]]w=R[E[609221+-609216]]p=w(z,L)e=o[p]l=O[e]z=Q(-253180+254068)L=-902852+32976831021760 O=Q(-251365+252335)o=R[E[788254+-788250]]F=19495790063231-(-193783)w=R[E[-199154-(-199159)]]p=w(z,L)O=l[O]e=o[p]L=Q(-263328-(-264247))w=R[E[213097+-213093]]p=R[E[493108-493103]]z=p(L,F)o=w[z]O=O(l,e,o)L=-464161+9660279498419 z=Q(257475-256577)o=R[E[755912+-755908]]w=R[E[-903747+903752]]p=w(z,L)e=o[p]z=B F=R[E[1030578-1030577]]w=B G=R[E[-276162+276164]]L=F[G]B=L and 791087+13177128 or 493156+8520726 p=L end else F=Q(1011662-1010704)L=Z[F]b=L B=10385+12392528 end end end end end else if B<390867+12822961 then if B<1044284+9396408 then if B<-242605+9728591 then if B<8372867-(-347337)then if B<591231+7901900 then if B<235165+8249774 then B=F b=L B=L and-65850+12468763 or 8116593-55574 else B=Z[Q(-966496+967402)]b={}end else if B<777044+7717433 then b=R[E[-415617+415618]]o=Q(-186169+187132)w=386215+32073680573872 l=R[E[763112-763110]]O=R[E[-788242-(-788245)]]e=O(o,w)i=l[e]B=b[i]B=B and 5161761-(-809260)or-756955+5615124 else z=Q(612058-611091)B=-506028-(-927193)p=Z[z]L=R[E[-755377+755378]]a=Q(167411+-166412)M=16979902553991-737445 F=R[E[493774+-493772]]G=F(a,M)z=L[G]w=p[z]F=42020-41820 z=361050-360960 L=-829053-(-829153)p=w(z,L,F)b=p end end else if B<-6180+9337518 then if B<9768700-773975 then e=Q(-398502-(-399511))i=X[-141601-(-141602)]l=X[-1031352+1031354]O=X[807378-807375]G=9106840911669-(-20827)z=Q(660217+-659342)b=Z[e]M=970634+-970633 L=13004807324798-(-430889)o=R[E[155505+-155504]]F=Q(952996+-951990)w=R[E[-240654+240656]]p=w(z,L)z=Q(50260-49253)e=o[p]B=b[e]L=7881767643704-252898 o=R[E[-401319+401320]]w=R[E[862516-862514]]p=w(z,L)e=o[p]o=R[E[667940+-667937]]b=B(e,o)z=-66694+5008661188002 e=b b=R[E[-507764-(-507765)]]p=Q(908751-907915)o=R[E[-967095+967097]]w=o(p,z)B=b[w]w=Q(262833-261944)o=Z[w]p=R[E[-199774-(-199775)]]z=R[E[15043+-15041]]L=z(F,G)w=p[L]b=o[w]z=-579945-(-579945)G=19877199610826-(-598110)p=283056+-283056 L=946318-946278 w=.85 o=b(w,p,z,L)p=Q(-679087+680059)e[B]=o z=38089+9850031881505 F=Q(-480387+481360)b=R[E[377625-377624]]o=R[E[-669390+669392]]w=o(p,z)B=b[w]w=Q(-14321-(-15210))o=Z[w]p=R[E[-686422+686423]]z=R[E[802684-802682]]L=z(F,G)w=p[L]b=o[w]z=-815709+815709 F=374922+-374862 p=165446-165446 a=l-M w=.075 M=-79910-(-79960)G=a*M L=F+G o=b(w,p,z,L)e[B]=o b=R[E[492090-492089]]p=Q(-407065+407941)z=-603693+23212507816038 o=R[E[-800023+800025]]w=o(p,z)B=b[w]o=B B=O and 1000239+-579074 or 9561781-1011886 b=O else B=z B=p and-880379+4413744 or-692785+2385311 o=p end else R[l]=U y=872400-872399 I=R[C]q=I+y Y=t[q]h=G+Y Y=49492-49236 B=h%Y q=R[P]Y=a+q G=B B=12041357-258637 q=167753+-167497 h=Y%q a=h end end else if B<733728+9069211 then if B<399673+9239659 then if B<9734379-168652 then z=F W=Q(-176280-(-177177))f=Z[W]W=Q(-949700+950722)g=f[W]B=465003+5012959 f=g(i,z)g=R[E[994418-994412]]W=g()d=f+W s=d+w d=-365622+365878 M=s%d W=268270-268269 d=O[l]w=M f=w+W g=e[f]s=d..g O[l]=s z=nil else p=Q(-274063-(-275032))w=b z=Q(519982-519043)b=Z[p]p=Q(688327-687351)B=b[p]p=x()R[p]=B a=Q(-97331-(-98270))b=Z[z]z=Q(-849351+850331)B=b[z]G=Z[a]L=G z=B F=B B=G and 10043860-(-762175)or 8655988-234892 end else o=4752+-4750 l=R[E[-917105+917106]]e=-167719-(-167720)O=l(e,o)l=-531529+531530 i=O==l B=i and-497904+6174640 or 5562349-(-531093)b=i end else if B<822449+9443120 then if B<9141260-(-970873)then B=true B=B and 795580+13733362 or 14283495-108073 else B=Z[Q(592012-591023)]b={}end else s=d P=s B=442343+14670502 M[s]=P s=nil end end end else if B<12314532-(-109177)then if B<11119951-(-733468)then if B<-911763+11719366 then if B<174470+10630929 then o=Q(-61190-(-62116))b=R[E[453461+-453460]]w=5751448441446-(-751632)l=R[E[69262-69260]]O=R[E[761096+-761093]]e=O(o,w)i=l[e]B=b[i]B=B and 16273301-(-495239)or 16923762-928067 else M=Q(-386051+386990)a=Z[M]M=Q(83244-82286)G=a[M]B=22801+8398295 L=G end else if B<215836+10836692 then l=R[E[1014381+-1014378]]O=705550+-705549 i=l~=O B=i and-187387+16159060 or 816878+15934604 else u=K(u)C=K(C)t=nil n=K(n)V=K(V)r=K(r)B=264772+2230990 P=K(P)end end else if B<13056776-701814 then if B<11371993-(-674240)then d=x()T=k(1825954-(-615197),{d;L,F,o})O=nil s={}Y=nil P={}R[d]=s o=K(o)r=Q(478960+-478120)u=x()M=nil s=x()t=Q(-656416+657363)R[s]=T T={}R[u]=T V=Q(731204-730323)T=Z[r]n=R[u]C={[V]=n;[t]=Y}r=T(P,C)T=c(12870277-560753,{u;d;a;L;F;s})F=K(F)s=K(s)u=K(u)p=nil G=nil z=nil L=K(L)a=K(a)R[l]=r M=199339772630-(-603526)w=nil G=10084370451642-(-17821)o=Q(259746+-258794)d=K(d)R[e]=T F=Q(-1027348-(-1028373))O=Z[o]a=18398448209587-(-987844)p=R[l]z=R[e]L=z(F,G)t=713786+7963236575810 o=Q(-22337+23323)w=p[L]o=O[o]G=Q(-332237+333172)u=-199063+34114788362148 o=o(O,w)w=Q(-408912+409864)O=Z[w]z=R[l]w=Q(78508+-77522)T=-571478+12370932633302 L=R[e]w=O[w]F=L(G,a)G=Q(-733827-(-734698))p=z[F]w=w(O,p)a=14360493008839-(-914008)Y=-892777+29189400237185 z=R[l]L=R[e]d=-434630+10690160915767 F=L(G,a)p=z[F]s=Q(372153-371134)O=w[p]p=Q(-512790-(-513723))a=Q(597975-596949)L=R[l]F=R[e]G=F(a,M)z=L[G]L=Q(-534031-(-534983))p=O[p]p=p(O,z)z=Z[L]L=Q(100034+-99048)G=R[l]a=R[e]M=a(s,d)d=Q(87090+-86180)Bx=-983668+33425657642817 L=z[L]F=G[M]L=L(z,F)a=R[l]M=R[e]s=M(d,T)d=Q(-366306-(-367227))G=a[s]T=543703679404-835759 F=o[G]a=R[l]M=R[e]s=M(d,T)T=-559978+20362164547699 G=a[s]z=F[G]a=R[l]d=Q(578012+-577150)M=R[e]F=Q(-581197+582130)Zx=Q(256355+-255384)s=M(d,T)G=a[s]T=13208819123296-453722 F=z[F]F=F(z,G)z=x()n=Q(-167365+168226)d=Q(-247139+248084)R[z]=F a=R[l]M=R[e]s=M(d,T)P=891208+21931043262108 G=a[s]F=o[G]M=R[l]T=Q(938393+-937543)s=R[e]d=s(T,u)a=M[d]G=Q(1001419+-1000486)C=-580928+2664491491864 G=F[G]G=G(F,a)F=x()M=Q(50248-49239)R[F]=G u=Q(87353-86452)a=Z[M]s=R[l]d=R[e]T=d(u,P)M=s[T]G=a[M]s=R[l]P=693005+24161684347110 u=Q(455962+-454931)d=R[e]T=d(u,P)M=s[T]P=179017+22900522790494 a=G(M)G=x()R[G]=a a=R[G]s=R[l]d=R[e]u=Q(-594785+595680)T=d(u,P)M=s[T]d=R[l]T=R[e]P=Q(-179848+180878)u=T(P,C)s=d[u]a[M]=s u=Q(945738+-944755)a=R[G]s=R[l]P=28223239050338-647436 d=R[e]T=d(u,P)M=s[T]u=Q(670804-669944)s=false a[M]=s a=R[G]s=R[l]P=13731917044916-(-769094)d=R[e]T=d(u,P)M=s[T]y=Q(965440+-964594)u=Q(-804758+805675)T=Z[u]P=R[l]C=R[e]V=C(n,t)u=P[V]d=T[u]V=Q(245855+-244847)n=1012055+17056327200175 u=R[l]P=R[e]t=23094578999260-148954 C=P(V,n)P=18003633710092-607053 T=u[C]s=d[T]u=Q(-968761-(-969695))a[M]=s a=R[G]s=R[l]n=Q(302367+-301423)d=R[e]T=d(u,P)P=Q(128825-127894)M=s[T]s=p a[M]=s s=Q(223802+-222793)M=Z[s]C=103951+5161605247828 d=R[l]T=R[e]S=1545782520731-616652 u=T(P,C)C=525185+6828313217258 s=d[u]a=M[s]q=-1017048+25577561355102 P=Q(1015117-1014209)d=R[l]T=R[e]u=T(P,C)s=d[u]d=R[G]p=nil M=a(s,d)a=x()C=-126574+25055424961537 R[a]=M M=R[a]d=R[l]T=R[e]P=Q(331019+-330082)u=T(P,C)s=d[u]u=Q(670652+-669763)T=Z[u]P=R[l]C=R[e]V=C(n,t)u=P[V]P=-812716-(-813016)d=T[u]V=-966548+966748 u=-385231-(-385231)t=70547+21600841257911 B=Z[Q(674463-673631)]C=1006192-1006192 T=d(u,P,C,V)M[s]=T P=Q(-253966-(-254964))M=R[a]C=19623202919393-815152 d=R[l]T=R[e]u=T(P,C)s=d[u]u=Q(-983940+984829)T=Z[u]P=R[l]C=R[e]n=Q(-118523-(-119497))V=C(n,t)C=-47862+47862.5 u=P[V]P=645256+-645406 n=Q(590792-589944)d=T[u]u=834882.5-834882 V=-1024180+1024080 T=d(u,P,C,V)P=Q(-159400-(-160325))M[s]=T M=R[a]d=R[l]t=425698+28521581442303 T=R[e]C=34976246098869-846870 u=T(P,C)s=d[u]u=Q(-3590-(-4504))T=Z[u]P=R[l]C=R[e]V=C(n,t)C=27574605376525-358885 u=P[V]P=834679+-834678.5 d=T[u]u=426676+-426675.5 T=d(u,P)M[s]=T P=Q(108180-107189)M=R[a]d=R[l]n=Q(946272+-945425)T=R[e]u=T(P,C)t=20080505881876-(-941938)s=d[u]u=Q(476407+-475440)T=Z[u]P=R[l]C=R[e]V=C(n,t)u=P[V]C=935422-935387 P=-108474+108499 d=T[u]u=575871+-575846 T=d(u,P,C)M[s]=T P=Q(285394+-284474)M=R[a]d=R[l]C=89590+25511834701937 T=R[e]u=T(P,C)C=11040158289828-(-771184)s=d[u]d=true V=-450689+30164877743967 M[s]=d P=Q(1017923-1016903)M=R[a]d=R[l]T=R[e]u=T(P,C)s=d[u]d=true C=Q(866793+-865812)M[s]=d d=Q(-832059+833068)s=Z[d]T=R[l]u=R[e]P=u(C,V)n=Q(197628-196623)d=T[P]M=s[d]T=R[l]C=Q(475685-474840)V=8725911551091-(-332652)u=R[e]P=u(C,V)t=30364216670937-(-1014882)d=T[P]T=R[a]s=M(d,T)C=705258+25400652278602 P=Q(244284-243322)d=R[l]T=R[e]u=T(P,C)M=d[u]u=Q(148428+-147438)T=Z[u]P=R[l]C=R[e]V=C(n,t)u=P[V]t=4593864992360-728589 V=-746027+19416073127292 P=293577+-293565 d=T[u]u=843794-843794 C=Q(-12194+13063)T=d(u,P)s[M]=T d=Q(-541122-(-542131))s=Z[d]T=R[l]u=R[e]P=u(C,V)d=T[P]M=s[d]C=Q(-106712+107553)T=R[l]V=317300+2587212623168 n=Q(-872538-(-873493))u=R[e]P=u(C,V)d=T[P]T=R[a]s=M(d,T)d=R[l]P=Q(953608-952608)T=R[e]C=175783+30907920353681 u=T(P,C)M=d[u]u=Q(265481+-264592)T=Z[u]P=R[l]C=R[e]V=C(n,t)t=29838336230600-(-356734)u=P[V]P=535904+-535904 C=82900+-82900 V=-556551+556591 d=T[u]u=-85295+85296 T=d(u,P,C,V)C=15796031453910-(-172517)s[M]=T d=R[l]P=Q(847028+-846050)T=R[e]u=T(P,C)n=Q(986806-985940)M=d[u]u=Q(229167-228200)T=Z[u]P=R[l]C=R[e]V=C(n,t)u=P[V]d=T[u]P=-872543-(-872588)u=-309763+309808 C=638032+-637972 T=d(u,P,C)s[M]=T T=Q(-822601-(-823610))d=Z[T]u=R[l]V=Q(665509-664548)P=R[e]O=nil n=-119994+26524908553465 C=P(V,n)V=Q(360859-359976)n=776630+4773343784696 T=u[C]t=Q(576797+-575915)M=d[T]L=nil u=R[l]P=R[e]C=P(V,n)T=u[C]C=Q(-853530-(-854423))V=-506671+17554487958301 d=M(T,s)T=R[l]u=R[e]P=u(C,V)M=T[P]P=Q(-405171-(-406161))u=Z[P]C=R[l]V=R[e]n=V(t,Y)P=C[n]T=u[P]V=Q(757165+-756172)P=617096+-617096 C=881288+-881276 t=Q(-51694+52612)u=T(P,C)n=32996583289121-324892 d[M]=u T=Q(-798354-(-799363))d=Z[T]u=R[l]Y=14868538174846-(-912781)P=R[e]C=P(V,n)T=u[C]M=d[T]n=-1998+31286405284022 u=R[l]V=Q(-294642+295591)P=R[e]C=P(V,n)V=79281+1968264449507 T=u[C]d=M(T,s)T=R[l]C=Q(825122-824169)u=R[e]P=u(C,V)M=T[P]P=Q(595168+-594279)u=Z[P]C=R[l]V=R[e]D=804415+324878006872 n=V(t,Y)P=C[n]V=-991950-(-991951)n=80025-80025 T=u[P]P=-214538-(-214539)C=-828025+828025 u=T(P,C,V,n)d[M]=u T=R[l]C=Q(-58031-(-58899))u=R[e]V=14105665368959-(-910889)t=Q(-142088-(-142945))P=u(C,V)V=497692+7129869382876 M=T[P]T=634214-634213 d[M]=T T=R[l]Y=878551+21696851951520 u=R[e]C=Q(-1032493+1033520)P=u(C,V)M=T[P]P=Q(399480-398513)u=Z[P]C=R[l]V=R[e]n=V(t,Y)V=-276775+277030 Y=Q(-332873+333777)P=C[n]T=u[P]P=-387612-(-387867)n=-764006+30224449494880 C=-759771-(-760026)u=T(P,C,V)V=3976719168095-158500 d[M]=u T=R[l]u=R[e]C=Q(-285676-(-286562))P=u(C,V)V=Q(86333+-85395)M=T[P]u=R[l]P=R[e]C=P(V,n)T=u[C]C=Q(-1000332-(-1001356))d[M]=T T=R[l]V=6135682948966-119869 u=R[e]P=u(C,V)C=Q(-280167-(-281084))M=T[P]P=Z[C]V=R[l]n=R[e]t=n(Y,q)C=V[t]q=751125+29007951576750 u=P[C]Y=545255+30016321332402 C=R[l]t=Q(175134-174118)V=R[e]n=V(t,Y)V=34657265202133-505035 P=C[n]T=u[P]d[M]=T T=R[l]u=R[e]C=Q(165442+-164550)P=u(C,V)M=T[P]I=2423105196096-(-488488)n=Q(1045148+-1044275)u=Q(-690631-(-691640))T=-206203+206219 d[M]=T T=Z[u]P=R[l]C=R[e]t=-959769+17967794210247 V=C(n,t)u=P[V]Y=Q(201540-200517)M=T[u]P=R[l]C=R[e]n=Q(1042747-1041715)t=14912456047953-(-548303)V=C(n,t)u=P[V]V=Q(-444826-(-445762))T=M(u,s)n=-586401+24984727969811 u=R[l]P=R[e]C=P(V,n)M=u[C]C=Q(507511+-506622)P=Z[C]V=R[l]n=R[e]t=n(Y,q)q=33710639917576-634039 Y=Q(-532755-(-533756))C=V[t]V=-916256+916286 u=P[C]n=-67472-(-67472)C=329788+-329788 t=733961-733931 P=u(C,V,n,t)V=Q(-845150-(-846152))T[M]=P n=-39805+9892961840507 u=R[l]P=R[e]C=P(V,n)M=u[C]C=Q(1012641+-1011752)P=Z[C]V=R[l]n=R[e]t=n(Y,q)C=V[t]u=P[C]t=-855065+855070 n=203577+-203577 C=975341+-975340 V=-815654+815624 P=u(C,V,n,t)T[M]=P V=Q(-175751-(-176738))u=R[l]q=-962401+17942340521988 P=R[e]n=398045+19224232808474 C=P(V,n)M=u[C]u=-148517-(-148518)T[M]=u n=5072807112367-(-268939)u=R[l]P=R[e]V=Q(348768-347739)C=P(V,n)Y=Q(-384695-(-385706))M=u[C]C=Q(209126-208159)P=Z[C]V=R[l]n=R[e]t=n(Y,q)C=V[t]u=P[C]V=329775-329520 n=-727235-(-727490)C=-135411-(-135666)P=u(C,V,n)V=Q(358139+-357239)T[M]=P n=21811445456317-(-707055)u=R[l]P=R[e]C=P(V,n)M=u[C]t=712477+796355093077 P=R[l]C=R[e]n=Q(410229-409335)V=C(n,t)u=P[V]n=829626+22536202993732 T[M]=u V=Q(-17488+18395)u=R[l]P=R[e]C=P(V,n)V=Q(-919566+920483)q=Q(-621698+622626)M=u[C]C=Z[V]n=R[l]t=R[e]Y=t(q,I)V=n[Y]Y=Q(359496+-358532)q=30634693305471-912582 P=C[V]V=R[l]n=R[e]t=n(Y,q)Y=-722067+31657347350056 C=V[t]V=Q(147089+-146173)u=P[C]T[M]=u n=-126569+13876740278182 u=R[l]P=R[e]C=P(V,n)M=u[C]u=-913524-(-913540)Qx=22493794464272-(-685786)T[M]=u n=Q(291391+-290373)P=R[l]C=R[e]t=7196451272885-1026974 V=C(n,t)u=P[V]M=T[u]P=N(888795+11750957,{G})u=Q(715548-714689)u=M[u]u=u(M,P)M=J(8436556-(-505340),{l,e,a})C=R[l]t=Q(117286-116453)V=R[e]n=V(t,Y)P=C[n]t=Q(127800+-126833)n=Z[t]C=-21890+21891 Y=R[l]q=R[e]I=q(y,D)t=Y[I]q=960287+-960087 V=n[t]Y=486292+-486172 t=991331-991251 n={V(t,Y,q)}u=M(P,C,v(n))V=R[l]Y=Q(628906+-628055)n=R[e]q=13413649027310-(-18296)t=n(Y,q)Y=Q(215230-214263)C=V[t]V=432403+-432401 D=Q(1034833+-1033975)t=Z[Y]q=R[l]I=R[e]y=I(D,S)o=nil Y=q[y]q=-489906+489986 n=t[Y]D=40723782447-678685 I=-54127-(-54207)Y=557229+-557029 t={n(Y,q,I)}I=258801+18267218112073 P=M(C,V,v(t))n=R[l]t=R[e]q=Q(559025-558173)Y=t(q,I)V=n[Y]Y=R[l]q=R[e]y=Q(-1011743+1012689)n=false S=330330+19023118964800 I=q(y,D)t=Y[I]Y=false C={[V]=n,[t]=Y}s=nil V=x()R[V]=C y=Q(564998-564095)C=k(57054+479618,{l;e;V})D=34546139724470-(-640032)Y=R[l]q=R[e]I=q(y,D)D=416462+7932241392543 t=Y[I]n=C(u,t)Y=R[l]q=R[e]y=Q(-940512-(-941382))I=q(y,D)t=Y[I]n=C(P,t)Y=Q(-163660+164556)t=Z[Y]q=R[l]D=Q(-885153-(-886038))I=R[e]y=I(D,S)Y=q[y]n=t[Y]D=Q(-317050-(-317952))Y=A(-870104+6969921,{V,l,e,z})t=n(Y)Y=Q(533457+-532561)t=Z[Y]q=R[l]S=24475039742836-1036015 I=R[e]y=I(D,S)S=891032+20948012354946 Y=q[y]n=t[Y]Y=j(740380+5423283,{V;l;e;F})t=n(Y)Y=Q(21265-20256)t=Z[Y]q=R[l]I=R[e]T=nil u=nil D=Q(-130045+131042)y=I(D,S)D=Q(57431-56474)Y=q[y]n=t[Y]q=R[l]S=32398559058290-(-713084)I=R[e]y=I(D,S)Y=q[y]D=-129843+25488410995087 q=R[a]t=n(Y,q)Y=R[l]y=Q(-195730+196595)q=R[e]G=K(G)I=q(y,D)n=Y[I]I=Q(342166+-341277)w=nil q=Z[I]y=R[l]D=R[e]S=D(Zx,Qx)I=y[S]Y=q[I]y=-949171+949171 D=-866835-(-866835)I=248329+-248328 S=877658-877638 q=Y(I,y,D,S)D=-346989+15481406400406 b={}Qx=101074+25529133867933 y=Q(-491077+491940)t[n]=q Y=R[l]Zx=Q(-76162+77001)q=R[e]I=q(y,D)P=nil n=Y[I]I=Q(-658509+659398)q=Z[I]y=R[l]F=K(F)D=R[e]S=D(Zx,Qx)D=34773+-34772 I=y[S]y=-201983+201983 Zx=Q(170252-169399)Y=q[I]V=K(V)a=K(a)S=-980867+980847 I=160385-160385 q=Y(I,y,D,S)t[n]=q D=-960814+24835933836891 y=Q(-11911-(-12841))Y=R[l]q=R[e]I=q(y,D)n=Y[I]D=43794+21100456115023 Y=-262203+262204 y=Q(213240+-212244)t[n]=Y Y=R[l]q=R[e]I=q(y,D)d=nil Qx=27992963468387-711032 n=Y[I]I=Q(228992+-228025)q=Z[I]M=nil y=R[l]D=R[e]S=D(Zx,Qx)I=y[S]Y=q[I]D=-192610-(-192790)I=117588+-117418 y=943826+-943656 q=Y(I,y,D)y=Q(-155144+156178)t[n]=q Y=R[l]Qx=Q(-984925+985876)D=-277304+22628391167073 q=R[e]I=q(y,D)n=Y[I]D=Q(1029599-1028589)q=R[l]S=1014559+5411873296057 I=R[e]y=I(D,S)Y=q[y]D=2468869516961-(-169436)t[n]=Y y=Q(-400899+401902)Y=R[l]q=R[e]I=q(y,D)z=K(z)y=Q(607839+-606922)n=Y[I]I=Z[y]D=R[l]S=R[e]Zx=S(Qx,Bx)y=D[Zx]q=I[y]y=R[l]D=R[e]C=nil Zx=Q(695428-694593)Qx=32789431188313-(-786507)S=D(Zx,Qx)I=y[S]Y=q[I]t[n]=Y Y=R[l]D=17137810041933-183585 y=Q(836514-835605)q=R[e]l=K(l)I=q(y,D)n=Y[I]e=K(e)Y=-330694+330706 t[n]=Y t=nil else l=X[-881811+881813]i=X[-926793+926794]B=R[E[-385106+385107]]O=B B=O[l]B=B and 3907194-428836 or-1037091+17008103 end else s=A(903616+15469621,{})M=Q(573912-572924)F=-539555-(-539558)L=x()R[L]=b G=55288+-55223 W=Q(-666382+667386)B=R[p]b=B(F,G)F=x()R[F]=b B=-454791+454791 G=B b=Z[M]B=872408-872408 M={b(s)}a=B B={v(M)}M=B b=47971+-47969 B=M[b]s=B b=Q(-682350-(-683310))B=Z[b]d=R[O]f=Z[W]W=f(s)f=Q(380631+-379699)g=d(W,f)d={g()}b=B(v(d))B=2970508-474746 d=x()R[d]=b b=806324-806323 g=R[F]f=g g=147127-147126 W=g g=-582002-(-582002)T=W<g g=b-W end end else if B<12489112-(-291976)then if B<557616+12097269 then if B<452209+12125688 then p=Q(342403+-341436)w=Z[p]a=-560622+19904107262498 z=R[E[-992218-(-992222)]]B=6331786-877148 G=Q(-949706+950685)L=R[E[-286872-(-286877)]]F=L(G,a)p=z[F]o=w[p]p=979661+-979581 L=935798-935678 z=781699-781499 w=o(p,z,L)O=w else B=R[E[-372386+372387]]b=Q(928945-927930)b=B[b]b=b(B)B=Z[Q(231033-230177)]b={}end else B=Z[Q(714696+-713809)]b={}end else if B<12041159-(-880104)then if B<83259+12831491 then L=K(L)d=K(d)O=K(O)O=nil w=nil G=nil a=nil F=K(F)o=K(o)p=K(p)z=nil d=-43677+43933 L=Q(-466460+467357)w=Q(869095-868126)M=nil l=K(l)e=K(e)e=x()s=nil F=x()p=Q(-649551-(-650520))l=nil G={}B=-114947+15227792 R[e]=l l=x()R[l]=O z=Q(555216+-554277)o=Z[w]w=Q(-46155-(-46997))O=o[w]o=x()s=901841+-901840 R[o]=O w=Z[p]p=Q(114232+-113256)O=w[p]p=Z[z]z=Q(294907+-293959)w=p[z]a=x()T=d z=Z[L]L=Q(186025-185085)p=z[L]M={}L=x()z=-51727-(-51727)R[L]=z z=603042+-603040 R[F]=z R[a]=G z={}d=-694923-(-694924)G=-1012822-(-1012822)u=d d=467895+-467895 r=u<d d=s-u else R[l]=g B=R[l]B=B and 111770+2466102 or 15212959-374932 end else B=true l=x()R[l]=B p=Q(31449+-30461)o=x()i=X O=Q(-552383-(-553280))z=c(-390395+2587487,{o})b=Z[O]O=Q(-13157+14142)B=b[O]O=x()e=x()R[O]=B B=A(6031125-(-17465),{})R[e]=B B=false R[o]=B w=Z[p]p=w(z)B=p and 6744528-664455 or 19979+9600412 b=p end end end end else if B<14462276-(-742861)then if B<13890937-(-676411)then if B<-240319+14126375 then if B<-689239+13982408 then if B<13211524-(-14873)then l,o=O(i,l)B=l and 581701+3907287 or 8093496-(-399122)else B=3358407-(-2108)O=R[E[1026431+-1026425]]l=O==i b=l end else if B<745400+12973326 then B=Z[Q(-356541-(-357395))]b={}else B=409150+7479156 end end else if B<-324641+14783758 then if B<787222+13244177 then F=R[E[388601-388597]]M=Q(-193291+194158)G=R[E[-487460-(-487465)]]s=843777+10797264925602 a=G(M,s)L=F[a]p=L B=9496586-482704 else B=J(-83675+1321648,{e})f={B()}B=Z[Q(-754212+755102)]b={v(f)}end else B=581675+7306631 end end else if B<455199+14437836 then if B<13016+14769830 then if B<13771834-(-827030)then B={}O=R[E[-648129+648138]]i=B e=O O=729370+-729369 B=979855-(-364150)l=-160227-(-160228)o=O O=816299+-816299 w=o<O O=l-o else B=true B=B and 907826+3059938 or 16213939-526932 end else B=true B=829248+13346174 end else if B<16105523-995836 then if B<14103095-(-947115)then O=Q(221045+-220106)l=Z[O]O=Q(-206154-(-207102))i=l[O]O=R[E[-351317+351318]]l={i(O)}b={v(l)}B=Z[Q(469856-468844)]else W=Q(-238190-(-239194))B=Z[W]u=Q(-425245-(-426157))T=Z[u]W=B(T)B=Q(-952483-(-953396))Z[B]=W B=564450+13188551 end else P=not r d=d+u s=d<=T s=P and s P=d>=T P=r and P s=P or s P=9944140-(-349326)B=s and P s=384402+-273898 B=B or s end end end else if B<196973+15797075 then if B<15176213-(-559255)then if B<-791727+16460073 then if B<-1033386+16349006 then f=R[l]B=f and-366095-(-636159)or-858310+13775170 g=f else B=R[E[-141429-(-141430)]]b=Q(-377022+377901)b=B[b]b=b(B)B=Z[Q(-499574-(-500454))]b={}end else B=Z[Q(-351636+352604)]b={}end else if B<16776744-805293 then if B<15186927-(-722104)then B=h B=167524+3741019 b=U else B={}p=280184+-279929 F=857126+-857125 R[E[382957+-382955]]=B o=858845+35184371229987 z=Q(-408291-(-409188))b=R[E[-101460+101463]]e=b b=l%o B=6160702-682740 R[E[741937-741933]]=b w=l%p p=66810+-66808 o=w+p R[E[-142636-(-142641)]]=o p=Z[z]z=Q(-1007220-(-1008170))w=p[z]p=w(i)w=Q(170783+-169864)z=-541580+541581 G=F F=507870+-507870 O[l]=w L=p w=-423320+423455 a=G<F F=z-G end else l=R[E[404441+-404438]]G=-456061+456074 B=347668+14687174 O=296178-296146 L=106570-106568 i=l%O e=R[E[-490864-(-490868)]]p=R[E[-1009569-(-1009571)]]s=R[E[-213667+213670]]M=s-i s=875091-875059 a=M/s F=G-a z=L^F w=p/z z=568336+-568335 o=e(w)e=-511669+4295478965 O=o%e o=-848200+848202 e=o^i l=O/e e=R[E[-318486+318490]]p=l%z z=4295877360-910064 w=p*z o=e(w)i=nil e=R[E[538728-538724]]p=-529531+595067 w=e(l)O=o+w o=-228226-(-293762)e=O%o w=O-e o=w/p p=-472257-(-472513)L=83880-83624 l=nil w=e%p z=e-w e=nil O=nil p=z/L L=713418+-713162 z=o%L F=o-z o=nil G=-396734+396990 L=F/G F={w,p,z;L}R[E[-529407-(-529408)]]=F L=nil p=nil w=nil z=nil end end else if B<16056848-(-408577)then if B<16839156-382081 then if B<15355123-(-929523)then i=Q(736673+-735777)b=Z[i]l=R[E[-900531+900533]]w=259086+17885345721466 O=R[E[806657-806654]]o=Q(734375+-733453)e=O(o,w)i=l[e]B=b[i]i=673201+-673200 b=B(i)B=477563-393891 else b=246364+16363138 O=-425163+632190 l=Q(881321-880379)i=l^O B=b-i b=Q(654908-654053)i=B B=b/i b={B}B=Z[Q(-215237+216229)]end else Y=-56353-(-56354)h=t[Y]U=h B=9620620-149719 end else if B<15934594-(-824802)then if B<16404512-(-106497)then B=R[E[496927+-496926]]l=O z=-939265+939265 L=968658-968403 p=B(z,L)i[l]=p B=498535-(-845470)l=nil else O=-499064+499280 l=R[E[110233-110230]]B=11036261-187231 i=l*O l=717625+-717368 b=i%l R[E[553730-553727]]=b end else i=j(-931716+3941140,{E[668621-668619],E[-987005+987008];E[874787-874783]})b=Q(941747-940759)B=Z[b]b=B(i)B=-433817+16429512 end end end end end end end B=#m return v(b)end,{},604405-604405,function(Z,Q)local v=O(Q)local X=function(X,E)return B(Z,{X;E},Q,v)end return X end,function(Z,Q)local v=O(Q)local X=function(X,E,m)return B(Z,{X;E;m},Q,v)end return X end return(o(12841069-(-369913),{}))(v(b))end)(getfenv and getfenv()or _ENV,unpack or table[Q(11405+-10447)],newproxy,setmetatable,getmetatable,select,{...})end)(...)"
9vcN2GsF,Remove woo edit account link on login dropdown,arie_cristianD,PHP,Monday 27th of October 2025 08:40:28 PM CDT,"add_filter( 'jnews_dropdown_link', 'j_remove_woo_edit_account', 99 );

function j_remove_woo_edit_account( $dropdown ) {
	if ( is_user_logged_in() ) {
		if ( isset( $dropdown['edit-account'] ) ) {
			unset( $dropdown['edit-account'] );
		}
	}

	return $dropdown;
}
"
cWzMqddV,gFlatTerrain,petdono,Lua,Monday 27th of October 2025 07:08:19 PM CDT,"-- level_snake.lua
-- Turtle leveler in a snake pattern with auto-unload and fueling routine.
-- Now also ensures the exposed surface block (below the turtle when above is air) is a top-level block
-- (dirt/podzol/grass_block). If not, it replaces it with a top-level block from inventory.

-- CONFIG DEFAULTS
local DEFAULT_MAX_HEIGHT = 128
local DEFAULT_FUEL_TARGET = 200 -- minimum fuel level to reach after refueling

-- Allowed ""top-level"" blocks
local TOP_BLOCKS = {
  [""minecraft:dirt""] = true,
  [""minecraft:podzol""] = true,
  [""minecraft:grass_block""] = true,
}

-- State: coordinates relative to starting position
-- x increases forward from start (initial facing), y increases to the right of initial facing, z increases upward
local pos = { x = 0, y = 0, z = 0 }
local facing = 0 -- 0 = +x (start forward), 1 = +y (right), 2 = -x (back), 3 = -y (left)
local startFacing = 0
local startPos = { x = 0, y = 0, z = 0 } -- origin

local sleepShort = function() sleep(0.2) end

-- Turning helpers
local function turnLeft()
  turtle.turnLeft()
  facing = (facing + 3) % 4
end
local function turnRight()
  turtle.turnRight()
  facing = (facing + 1) % 4
end
local function turnAround()
  turtle.turnRight(); turtle.turnRight()
  facing = (facing + 2) % 4
end

-- Movement with retries
local function tryForward(maxTries)
  maxTries = maxTries or 200
  local tries = 0
  while not turtle.forward() do
    tries = tries + 1
    if tries > maxTries then return false, ""forward blocked"" end
    if turtle.detect() then turtle.dig() else pcall(turtle.attack) end
    sleepShort()
  end
  if facing == 0 then pos.x = pos.x + 1
  elseif facing == 1 then pos.y = pos.y + 1
  elseif facing == 2 then pos.x = pos.x - 1
  elseif facing == 3 then pos.y = pos.y - 1
  end
  return true
end

local function tryUp(maxTries)
  maxTries = maxTries or 200
  local tries = 0
  while not turtle.up() do
    tries = tries + 1
    if tries > maxTries then return false, ""up blocked"" end
    if turtle.detectUp() then turtle.digUp() else pcall(turtle.attackUp) end
    sleepShort()
  end
  pos.z = pos.z + 1
  return true
end

local function tryDown(maxTries)
  maxTries = maxTries or 200
  local tries = 0
  while not turtle.down() do
    tries = tries + 1
    if tries > maxTries then return false, ""down blocked"" end
    if turtle.detectDown() then turtle.digDown() else pcall(turtle.attackDown) end
    sleepShort()
  end
  pos.z = pos.z - 1
  return true
end

local function safeDigUp() while turtle.detectUp() do turtle.digUp(); sleepShort() end end
local function safeDigDown() while turtle.detectDown() do turtle.digDown(); sleepShort() end end
local function safeDigForward() while turtle.detect() do turtle.dig(); sleepShort() end end

local function isInventoryFull()
  for i = 1, 16 do
    if turtle.getItemCount(i) == 0 then return false end
  end
  return true
end

-- Direction/origin navigation
local function faceDir(dir)
  local diff = (dir - facing) % 4
  if diff == 1 then turnRight()
  elseif diff == 2 then turnAround()
  elseif diff == 3 then turnLeft()
  end
end

local function moveLineTo(targetX, targetY)
  if pos.x < targetX then
    faceDir(0)
    while pos.x < targetX do local ok, err = tryForward(); if not ok then return false, err end end
  elseif pos.x > targetX then
    faceDir(2)
    while pos.x > targetX do local ok, err = tryForward(); if not ok then return false, err end end
  end
  if pos.y < targetY then
    faceDir(1)
    while pos.y < targetY do local ok, err = tryForward(); if not ok then return false, err end end
  elseif pos.y > targetY then
    faceDir(3)
    while pos.y > targetY do local ok, err = tryForward(); if not ok then return false, err end end
  end
  return true
end

local function moveToStartLevel()
  while pos.z > startPos.z do local ok, err = tryDown(); if not ok then return false, err end end
  while pos.z < startPos.z do local ok, err = tryUp(); if not ok then return false, err end end
  return true
end

local function goHome()
  local ok, err = moveToStartLevel(); if not ok then return false, err end
  ok, err = moveLineTo(startPos.x, startPos.y); if not ok then return false, err end
  faceDir(startFacing)
  return true
end

-- Deposit into chest behind start. Keeps facing turned-around for fueling step.
local function depositToChestBehind()
  turnAround()
  local leftover = false

  for s = 1, 16 do
    local before = turtle.getItemCount(s)
    if before > 0 then
      turtle.select(s)
      local okDrop = turtle.drop()
      local after = turtle.getItemCount(s)
      if after > 0 or not okDrop then
        leftover = true
      end
    end
  end

  if not leftover then
    return true, false
  end

  -- Chest full or blocked: step left (relative to current facing) and dump to ground
  turnLeft()
  local moved = select(1, tryForward())
  turnRight()
  if not moved then
    for s = 1, 16 do
      if turtle.getItemCount(s) > 0 then turtle.select(s); turtle.drop() end
    end
  else
    for s = 1, 16 do
      if turtle.getItemCount(s) > 0 then turtle.select(s); turtle.drop() end
    end
    turnRight(); tryForward(); turnLeft()
  end

  return true, true
end

-- Fuel search left of start while still turned-around
local function searchAndRefuel(fuelTarget)
  fuelTarget = fuelTarget or DEFAULT_FUEL_TARGET
  local fl = turtle.getFuelLevel()
  if fl == ""unlimited"" then return true end

  for step = 1, 8 do
    -- move left while preserving current facing
    turnLeft()
    local okMove = select(1, tryForward())
    turnRight()
    if not okMove then break end

    -- Try pulling from adjacent inventories
    for _ = 1, 4 do
      pcall(turtle.suck)
      pcall(turtle.suckDown)
      pcall(turtle.suckUp)
      sleepShort()
    end

    -- Try to refuel from anything in inventory
    for s = 1, 16 do
      if turtle.getItemCount(s) > 0 then
        turtle.select(s)
        if turtle.refuel(1) then
          while turtle.getItemCount(s) > 0 do
            local lvl = turtle.getFuelLevel()
            if lvl == ""unlimited"" or lvl >= fuelTarget then return true end
            if not turtle.refuel(1) then break end
            sleepShort()
          end
        end
      end
    end

    local lvl = turtle.getFuelLevel()
    if lvl == ""unlimited"" or lvl >= fuelTarget then return true end
  end

  return turtle.getFuelLevel() == ""unlimited"" or turtle.getFuelLevel() >= fuelTarget
end

-- Helpers for top-level surface replacement
local function selectTopBlockSlot()
  for s = 1, 16 do
    local d = turtle.getItemDetail(s)
    if d and TOP_BLOCKS[d.name] then
      return s
    end
  end
  return nil
end

local function ensureTopSurface()
  -- Only acts when there is a block below; if not, we do nothing (no filling requested).
  if not turtle.detectDown() then return end
  local ok, data = turtle.inspectDown()
  if not ok then return end
  local name = data and data.name or nil
  if name and not TOP_BLOCKS[name] then
    -- Try to remove the non-top block and place a top block
    local dug = turtle.digDown()
    if not dug and turtle.detectDown() then
      -- couldn't dig (maybe unbreakable or entity), abort replacement
      return
    end
    local slot = selectTopBlockSlot()
    if slot then
      turtle.select(slot)
      -- placeDown may fail if entity present or placement rules; we try a few times
      for _ = 1, 5 do
        if turtle.placeDown() then break end
        sleepShort()
      end
    else
      print(""No top-level blocks in inventory to place as surface."")
    end
  end
end

-- Column process: up/down rule + top-surface replacement
local maxHeightLimit = DEFAULT_MAX_HEIGHT
local function processColumn()
  local loopLimit, loopCount = 2000, 0
  while true do
    loopCount = loopCount + 1
    if loopCount > loopLimit then
      print(""Loop limit reached in processColumn; aborting column."")
      return false
    end

    if turtle.detectUp() then
      safeDigUp()
      local ok, err = tryUp()
      if not ok then print(""Error moving up: "" .. tostring(err)); return false end
      if pos.z > maxHeightLimit then
        print(""Reached max height limit, stopping vertical work here."")
        break
      end
    else
      -- Above is air
      if turtle.detectDown() then
        -- Surface found: ensure it's a top-level block
        ensureTopSurface()
        break
      else
        -- Below is air: descend if not below start level
        if pos.z == startPos.z then
          break
        else
          local ok, err = tryDown()
          if not ok then print(""Error moving down: "" .. tostring(err)); return false end
        end
      end
    end
  end
  return true
end

-- Resume state
local resumeState = nil
local function saveResume()
  resumeState = { pos = { x = pos.x, y = pos.y, z = pos.z }, facing = facing }
end
local function restoreResume()
  if not resumeState then return false, ""no resume state"" end
  local target = resumeState.pos
  while pos.z > target.z do local ok, err = tryDown(); if not ok then return false, err end end
  while pos.z < target.z do local ok, err = tryUp(); if not ok then return false, err end end
  local ok, err = moveLineTo(target.x, target.y); if not ok then return false, err end
  faceDir(resumeState.facing)
  resumeState = nil
  return true
end

-- TUI
local function promptNumber(prompt, default)
  write(prompt)
  if default then write("" ["" .. tostring(default) .. ""]"") end
  write("": "")
  local val = read()
  if val == """" or val == nil then return default end
  local n = tonumber(val)
  return n or default
end

-- Main traversal (snake)
local function mainLoop(length, width, maxHeight, fuelTarget)
  maxHeightLimit = maxHeight or DEFAULT_MAX_HEIGHT
  print((""Starting snake-leveler: length=%d width=%d maxHeight=%d""):format(length, width, maxHeightLimit))

  for row = 1, width do
    local forwardRow = (row % 2 == 1)
    if forwardRow then faceDir(0) else faceDir(2) end

    for col = 1, length do
      print((""Row %d col %d  (x=%d y=%d z=%d f=%d)""):format(row, col, pos.x, pos.y, pos.z, facing))

      local ok = processColumn()
      if not ok then print(""Error in processColumn; aborting.""); return false end

      -- Unload/refuel if full
      if isInventoryFull() then
        print(""Inventory full: returning to base to unload."")
        saveResume()
        local okHome, err = goHome()
        if not okHome then print(""Failed to go home: "" .. tostring(err)); return false end

        local deposited = select(1, depositToChestBehind())
        if not deposited then print(""Failed to deposit items at home.""); return false end

        print(""Searching for fuel..."")
        local refueled = searchAndRefuel(fuelTarget)
        if refueled then print(""Refueled."") else print(""Could not reach desired fuel target. Continuing anyway."") end

        local okRestore, errR = restoreResume()
        if not okRestore then print(""Failed to restore resume position: "" .. tostring(errR)); return false end
        print(""Resumed work."")
      end

      if col < length then
        local okf, errf = tryForward()
        if not okf then print(""Failed to move to next column: "" .. tostring(errf)); return false end
      end
    end

    if row < width then
      if forwardRow then
        turnRight(); local ok, err = tryForward(); if not ok then print(""Failed to step to next row: "" .. tostring(err)); return false end; turnRight()
      else
        turnLeft();  local ok, err = tryForward(); if not ok then print(""Failed to step to next row: "" .. tostring(err)); return false end;  turnLeft()
      end
    end
  end

  print(""Finished area traversal."")
  return true
end

-- Startup TUI
print(""=== Turtle Snake Leveler ==="")
print(""Place turtle at the bottom corner of the area facing along the first row."")
print(""Place a chest directly behind the turtle (one block behind the starting facing) to receive drops."")
print(""Keep some dirt/podzol/grass in inventory for surface replacement."")
local length = promptNumber(""Enter length (columns per row)"", 10)
local width = promptNumber(""Enter width (number of rows)"", 3)
local maxH = promptNumber(""Optional: max relative height to climb (safety)"", DEFAULT_MAX_HEIGHT)
local fuelTarget = promptNumber(""Optional: desired fuel level after refuel"", DEFAULT_FUEL_TARGET)

print((""Parameters: length=%s, width=%s, maxHeight=%s, fuelTarget=%s""):format(tostring(length), tostring(width), tostring(maxH), tostring(fuelTarget)))
print(""Press ENTER to start or CTRL+T to cancel."")
read()

local ok, err = pcall(function() return mainLoop(length, width, maxH, fuelTarget) end)
if not ok then print(""Run-time error: "" .. tostring(err)) end
print(""Script done."")"
S0mHRmWg,–ü—Ä–∏–∫–ª–∞–¥–Ω–∞_–µ–∫–æ–Ω–æ–º–µ—Ç—Ä–∏–∫–∞_–õ–†‚Ññ4_–ú—ñ—Ä–æ—à–Ω–∏—á–µ–Ω–∫–æ,mirosh111000,Python,Monday 27th of October 2025 07:00:40 PM CDT,"import numpy as np
import pandas as pd
import statsmodels.api as sm
from scipy.stats import t as tdist, f as fdist, spearmanr
import matplotlib.pyplot as plt

def print_table(df: pd.DataFrame, title: str, floatfmt=""{:,.6f}"".format):
    print(""="" * (len(title) + 2))
    print(title)
    print(""="" * (len(title) + 2))
    df_print = df.copy()
    for c in df_print.columns:
        if np.issubdtype(df_print[c].dtype, np.number):
            df_print[c] = df_print[c].map(lambda v: floatfmt(v))
    print(df_print.to_string(index=False))
    print()

def _add_const(x):
    return sm.add_constant(np.asarray(x, float))

def table1_base(x, y):
    x = np.asarray(x, float); y = np.asarray(y, float)
    df = pd.DataFrame({
        ""i"": np.arange(1, len(x)+1),
        ""x"": x, ""y"": y,
        ""x^2"": x**2, ""x*y"": x*y, ""y^2"": y**2
    })
    print_table(df, ""–¢–∞–±–ª–∏—Ü—è 1. –ë–∞–∑–æ–≤—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏"")
    return df

def fit_ols(x, y):
    X = _add_const(x)
    model = sm.OLS(y, X).fit()
    a0, a1 = model.params
    se0, se1 = model.bse
    t0, t1 = model.tvalues
    p0, p1 = model.pvalues
    r2 = model.rsquared
    rss = np.sum(model.resid**2)
    df = int(model.df_resid)
    df_out = pd.DataFrame([{
        ""a0"": a0, ""a1"": a1, ""SE(a0)"": se0, ""SE(a1)"": se1,
        ""t(a0)"": t0, ""p(a0)"": p0, ""t(a1)"": t1, ""p(a1)"": p1,
        ""R2"": r2, ""RSS"": rss, ""df"": df
    }])
    print_table(df_out, ""OLS: –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"")
    yhat = model.fittedvalues
    u = model.resid
    df2 = pd.DataFrame({
        ""i"": np.arange(1, len(x)+1),
        ""x"": x, ""y"": y, ""≈∑"": yhat, ""u"": u, ""u^2"": u**2, ""|u|"": np.abs(u)
    })
    print_table(df2, ""–¢–∞–±–ª–∏—Ü—è 2. –ó–∞–ª–∏—à–∫–∏ —Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏ (OLS)"")
    return model, df2

def var_bins(x, vals, nbins=3):
    order = np.argsort(x)
    x_sorted = np.asarray(x)[order]
    v_sorted = np.asarray(vals)[order]
    groups = np.array_split(np.arange(len(x)), nbins)
    rows = []
    for b, idx in enumerate(groups, start=1):
        xx = x_sorted[idx]
        vv = v_sorted[idx]
        rows.append({""bin"": b, ""x_min"": xx.min(), ""x_max"": xx.max(),
                     ""n"": len(idx), ""Var(u)"": vv.var(ddof=1)})
    return pd.DataFrame(rows)

def show_bins_ols(x, u):
    dfbins = var_bins(x, u, 3)
    print_table(dfbins, ""–¢–∞–±–ª–∏—Ü—è 3. –†–æ–∑–∫–∏–¥ Var(u) —É 3 –±—ñ–Ω–Ω–∞—Ö x (OLS)"")
    return dfbins

def spearman_test(x, z, alpha=0.05, label=""|u|""):
    rho, p = spearmanr(x, z)
    n = len(x)
    if abs(rho) < 1.0:
        t_stat = rho * np.sqrt((n - 2) / (1 - rho**2))
    else:
        t_stat = np.sign(rho) * np.inf
    tcrit = tdist.ppf(1 - alpha/2, df=n-2)
    out = pd.DataFrame([{
        ""rho"": rho, ""t_stat"": t_stat, ""t_crit(Œ±/2)"": tcrit,
        ""p_value"": p, ""reject_H0"": bool(p < alpha)
    }])
    print_table(
        pd.DataFrame({
            ""i"": np.arange(1, n+1),
            ""x"": x, f""|{label}|"": z,
            ""rank_x"": pd.Series(x).rank(method=""average""),
            f""rank_|{label}|"": pd.Series(z).rank(method=""average""),
            ""(Œîrank)^2"": (pd.Series(x).rank(method=""average"")
                          - pd.Series(z).rank(method=""average""))**2
        }),
        f""–¢–∞–±–ª–∏—Ü—è 4. –°–ø—ñ—Ä–º–µ–Ω ‚Äî —Ä–∞–Ω–≥–∏ x —Ç–∞ |{label}|""
    )
    print_table(out, ""–ü—ñ–¥—Å—É–º–æ–∫ —Ç–µ—Å—Ç—É –°–ø—ñ—Ä–º–µ–Ω–∞"")
    return rho, p

def gq_groups(x, y, m=4, c=2):
    order = np.argsort(x)
    x_sorted, y_sorted = np.asarray(x)[order], np.asarray(y)[order]
    left_idx = np.arange(0, m)
    right_idx = np.arange(len(x_sorted)-m, len(x_sorted))
    mid_cut = slice(m, len(x_sorted)-m)
    if c > 0:
        right_idx = np.arange(len(x_sorted)-m, len(x_sorted))
    Xl = _add_const(x_sorted[left_idx]); yl = y_sorted[left_idx]
    Xr = _add_const(x_sorted[right_idx]); yr = y_sorted[right_idx]
    ols_l = sm.OLS(yl, Xl).fit()
    ols_r = sm.OLS(yr, Xr).fit()
    left_tbl = pd.DataFrame({
        ""i"": order[left_idx] + 1,
        ""x"": x_sorted[left_idx],
        ""y"": yl,
        ""≈∑(group)"": ols_l.fittedvalues,
        ""u(group)"": ols_l.resid,
        ""u^2(group)"": ols_l.resid**2
    })
    right_tbl = pd.DataFrame({
        ""i"": order[right_idx] + 1,
        ""x"": x_sorted[right_idx],
        ""y"": yr,
        ""≈∑(group)"": ols_r.fittedvalues,
        ""u(group)"": ols_r.resid,
        ""u^2(group)"": ols_r.resid**2
    })
    return left_tbl.sort_values(""i""), right_tbl.sort_values(""i""), ols_l, ols_r

def gq_summary_compact(left_fit, right_fit, m, alpha=0.05):
    var_left = left_fit.resid.var(ddof=1)
    var_right = right_fit.resid.var(ddof=1)
    F = var_left / var_right
    df_m1 = m - 1
    Fcrit = fdist.ppf(1 - alpha, df_m1, df_m1)
    reject = bool(F > Fcrit)
    out = pd.DataFrame([{
        ""m"": m, ""c"": 2, ""df_m1"": df_m1,
        ""RSS_left"": np.sum(left_fit.resid**2),
        ""RSS_right"": np.sum(right_fit.resid**2),
        ""F_stat"": F, ""Fcrit_df_m1(one-sided)"": Fcrit,
        ""reject_H0"": reject
    }])
    return out

def run_gq(x, y, m=4, c=2, alpha=0.05, prefix=""""):
    left_tbl, right_tbl, ols_l, ols_r = gq_groups(x, y, m, c)
    print_table(left_tbl, f""–¢–∞–±–ª–∏—Ü—è 5. –ì—Ä—É–ø–∞ LEFT –¥–ª—è —Ç–µ—Å—Ç—É –ì–ö (–∑–∞ x‚Üë)"")
    print_table(right_tbl, f""–¢–∞–±–ª–∏—Ü—è 6. –ì—Ä—É–ø–∞ RIGHT –¥–ª—è —Ç–µ—Å—Ç—É –ì–ö (–∑–∞ x‚Üë)"")
    compact = gq_summary_compact(ols_l, ols_r, m, alpha)
    print_table(compact, ""–ó–≤–µ–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—è —Ç–µ—Å—Ç—É –ì–æ–ª–¥—Ñ–µ–ª–¥–∞‚Äì–ö–≤–∞–Ω–¥—Ç–∞"")
    return compact

def glejser_table(x, yhat, uabs, deltas=(1,2,3,0.5,1/3), alpha=0.05, label=""|u|""):
    rows = []
    long_tbl = pd.DataFrame({
        ""i"": np.arange(1, len(x)+1),
        ""x"": x, ""y"": y, ""x^2"": x**2, ""≈∑"": yhat, ""|u|"": uabs, ""x*|u|"": x*uabs
    })
    for delta in deltas:
        X = _add_const(x**delta)
        mod = sm.OLS(uabs, X).fit()
        b0, b1 = mod.params
        se_b1 = mod.bse[1]
        t_ratio = abs(b1) / se_b1 if se_b1 > 0 else np.inf
        tcrit = tdist.ppf(1 - alpha/2, df=len(x)-2)
        pval = mod.pvalues[1]
        rows.append({
            ""Œ¥"": delta, ""b0"": b0, ""b1"": b1, ""SE(b1)"": se_b1,
            ""|b1|/SE(b1)"": t_ratio, ""t_crit(Œ±/2)"": tcrit,
            ""p-value"": pval, ""SŒµ^2"": np.mean(mod.resid**2),
            ""decision"": ""–í–Ü–î–•–ò–õ–Ø–Ñ–ú–û H0"" if pval < alpha else ""–ü—Ä–∏–π–º–∞—î–º–æ H0""
        })
        long_tbl[f""√ª({label})_Œ¥={delta}""] = mod.fittedvalues
        long_tbl[f""({label}-√ª)_Œ¥={delta}^2""] = (uabs - mod.fittedvalues)**2

    short_tbl = pd.DataFrame(rows)
    print_table(long_tbl, f""–¢–∞–±–ª–∏—Ü—è 7–∞. –¢–µ—Å—Ç –ì–ª–µ–π–∑–µ—Ä–∞ ‚Äî –ø–æ–∫—Ä–æ–∫–æ–≤–∞ —Ç–∞–±–ª–∏—Ü—è"")
    print_table(short_tbl, ""–¢–∞–±–ª–∏—Ü—è 7b. –¢–µ—Å—Ç –ì–ª–µ–π–∑–µ—Ä–∞ ‚Äî –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –π —Ä—ñ—à–µ–Ω–Ω—è –ø–æ Œ¥"")
    return short_tbl, long_tbl

def choose_delta_for_weights(glejser_short, alpha=0.05):
    ok = glejser_short[glejser_short[""p-value""] >= alpha]
    if len(ok) == 0:
        best = glejser_short.sort_values(""SŒµ^2"").iloc[0]
    else:
        best = ok.iloc[ok[""b1""].abs().argmin()]
    return float(best[""Œ¥""]), best

def wls_fit_with_weights(x, y, delta, glejser_short):
    row = glejser_short.loc[glejser_short[""Œ¥""] == delta].iloc[0]
    b0, b1 = row[""b0""], row[""b1""]
    sigma_hat = b0 + b1 * (x ** delta)
    mn = sigma_hat.min()
    if mn <= 0:
        sigma_hat = sigma_hat + (abs(mn) + 1e-8)
    w = 1.0 / (sigma_hat ** 2)
    model = sm.WLS(y, _add_const(x), weights=w).fit()
    df_out = pd.DataFrame([{
        ""a0"": model.params[0], ""a1"": model.params[1],
        ""SE(a0)"": model.bse[0], ""SE(a1)"": model.bse[1],
        ""t(a0)"": model.tvalues[0], ""p(a0)"": model.pvalues[0],
        ""t(a1)"": model.tvalues[1], ""p(a1)"": model.pvalues[1],
        ""R2"": model.rsquared, ""RSS"": np.sum(model.resid**2), ""df"": int(model.df_resid)
    }])
    print_table(df_out, ""WLS: –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø—ñ—Å–ª—è —É—Å—É–Ω–µ–Ω–Ω—è)"")
    comp = pd.DataFrame({
        ""model"": [""OLS"", ""WLS""],
        ""a0"": [np.nan, np.nan],
        ""a1"": [np.nan, np.nan],
        ""SE(a0)"": [np.nan, np.nan],
        ""SE(a1)"": [np.nan, np.nan],
        ""t(a0)"": [np.nan, np.nan],
        ""p(a0)"": [np.nan, np.nan],
        ""t(a1)"": [np.nan, np.nan],
        ""p(a1)"": [np.nan, np.nan],
        ""R2"": [np.nan, np.nan],
        ""RSS"": [np.nan, np.nan],
        ""df"": [np.nan, np.nan],
    })
    return model, sigma_hat

def compare_ols_wls(ols_model, wls_model):
    comp = pd.DataFrame({
        ""model"": [""OLS"", ""WLS""],
        ""a0"": [ols_model.params[0], wls_model.params[0]],
        ""a1"": [ols_model.params[1], wls_model.params[1]],
        ""SE(a0)"": [ols_model.bse[0], wls_model.bse[0]],
        ""SE(a1)"": [ols_model.bse[1], wls_model.bse[1]],
        ""t(a0)"": [ols_model.tvalues[0], wls_model.tvalues[0]],
        ""p(a0)"": [ols_model.pvalues[0], wls_model.pvalues[0]],
        ""t(a1)"": [ols_model.tvalues[1], wls_model.tvalues[1]],
        ""p(a1)"": [ols_model.pvalues[1], wls_model.pvalues[1]],
        ""R2"": [ols_model.rsquared, wls_model.rsquared],
        ""RSS"": [np.sum(ols_model.resid**2), np.sum(wls_model.resid**2)],
        ""df"": [int(ols_model.df_resid), int(wls_model.df_resid)]
    })
    print_table(comp, ""–¢–∞–±–ª–∏—Ü—è 8. –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è OLS vs WLS"")
    return comp

def standardized_residuals(y, yhat, sigma_hat):
    u = y - yhat
    rstar = u / sigma_hat
    return u, rstar

def plot_diagnostics_ols(x, y, yhat, u, nbins=3):
    fig, axes = plt.subplots(2, 2, figsize=(10, 8))
    axes = axes.ravel()

    axes[0].scatter(x, u)
    axes[0].axhline(0, linewidth=1)
    axes[0].set_title(""OLS: u vs x""); axes[0].set_xlabel(""x""); axes[0].set_ylabel(""u"")

    axes[1].scatter(yhat, u)
    axes[1].axhline(0, linewidth=1)
    axes[1].set_title(""OLS: u vs ≈∑""); axes[1].set_xlabel(""≈∑""); axes[1].set_ylabel(""u"")

    axes[2].scatter(x, np.abs(u))
    axes[2].set_title(""OLS: |u| vs x""); axes[2].set_xlabel(""x""); axes[2].set_ylabel(""|u|"")

    bins = var_bins(x, u, nbins)
    axes[3].bar(bins[""bin""], bins[""Var(u)""])
    axes[3].set_title(""OLS: Var(u) —É –±—ñ–Ω–Ω–∞—Ö x""); axes[3].set_xlabel(""–±—ñ–Ω""); axes[3].set_ylabel(""Var"")
    fig.suptitle(""–í—ñ–∑—É–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ‚Äî OLS"")
    plt.tight_layout()
    plt.show()

def plot_diagnostics_wls(x, yhat_w, rstar, nbins=3):
    fig, axes = plt.subplots(2, 2, figsize=(10, 8))
    axes = axes.ravel()

    axes[0].scatter(x, rstar)
    axes[0].axhline(0, linewidth=1)
    axes[0].set_title(""–ü—ñ—Å–ª—è WLS (r*): r* vs x""); axes[0].set_xlabel(""x""); axes[0].set_ylabel(""r*"")

    axes[1].scatter(yhat_w, rstar)
    axes[1].axhline(0, linewidth=1)
    axes[1].set_title(""–ü—ñ—Å–ª—è WLS (r*): r* vs ≈∑""); axes[1].set_xlabel(""≈∑""); axes[1].set_ylabel(""r*"")

    axes[2].scatter(x, np.abs(rstar))
    axes[2].set_title(""–ü—ñ—Å–ª—è WLS (r*): |r*| vs x""); axes[2].set_xlabel(""x""); axes[2].set_ylabel(""|r*|"")

    bins = var_bins(x, rstar, nbins)
    axes[3].bar(bins[""bin""], bins[""Var(u)""])
    axes[3].set_title(""–ü—ñ—Å–ª—è WLS (r*): Var(r*) —É –±—ñ–Ω–Ω–∞—Ö x""); axes[3].set_xlabel(""–±—ñ–Ω""); axes[3].set_ylabel(""Var"")
    fig.suptitle(""–í—ñ–∑—É–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ‚Äî –ü—ñ—Å–ª—è WLS (r*)"")
    plt.tight_layout()
    plt.show()

def run_pipeline(x, y, alpha=0.05, deltas=(1,2,3,0.5,1/3), m=4, c=2, make_plots=True):
    x = np.asarray(x, float); y = np.asarray(y, float)

    table1_base(x, y)

    ols_model, tbl2 = fit_ols(x, y)
    yhat = ols_model.fittedvalues
    u = ols_model.resid
    show_bins_ols(x, u)
    spearman_test(x, np.abs(u), alpha, label=""u"")

    gq_compact_ols = run_gq(x, y, m=m, c=c, alpha=alpha)

    glejser_short, glejser_long = glejser_table(x, yhat, np.abs(u), deltas, alpha)

    delta_best, row_best = choose_delta_for_weights(glejser_short, alpha)

    wls_model, sigma_hat = wls_fit_with_weights(x, y, delta_best, glejser_short)
    compare_ols_wls(ols_model, wls_model)

    yhat_w = wls_model.fittedvalues
    u_w, rstar = standardized_residuals(y, yhat_w, sigma_hat)

    df_r = pd.DataFrame({
        ""i"": np.arange(1, len(x)+1), ""x"": x, ""y"": y,
        ""≈∑(WLS)"": yhat_w, ""u(WLS)"": u_w, ""r*(WLS)"": rstar,
        ""r*^2(WLS)"": rstar**2, ""|r*|(WLS)"": np.abs(rstar)
    })
    print_table(df_r, ""–¢–∞–±–ª–∏—Ü—è 2*. –ü—Ä–æ–≥–Ω–æ–∑–∏ —Ç–∞ –∑–∞–ª–∏—à–∫–∏ (WLS) –∑ r* = u/œÉÃÇ"")

    df_bins_r = var_bins(x, rstar, 3).rename(columns={""Var(u)"": ""Var(r*)""})
    print_table(df_bins_r, ""–¢–∞–±–ª–∏—Ü—è 3*. –†–æ–∑–∫–∏–¥ Var(r*) —É 3 –±—ñ–Ω–Ω–∞—Ö x (–ø—ñ—Å–ª—è WLS)"")

    spearman_rho_r, p_r = spearman_test(x, np.abs(rstar), alpha, label=""r*"")

    left_tbl_r, right_tbl_r, fit_l_r, fit_r_r = gq_groups(x, rstar, m, c)
    left_r = pd.DataFrame({""i"": left_tbl_r[""i""], ""x"": left_tbl_r[""x""], ""r*(WLS)"": fit_l_r.resid + fit_l_r.fittedvalues, ""r*(WLS)^2"": (fit_l_r.resid + fit_l_r.fittedvalues)**2})
    right_r = pd.DataFrame({""i"": right_tbl_r[""i""], ""x"": right_tbl_r[""x""], ""r*(WLS)"": fit_r_r.resid + fit_r_r.fittedvalues, ""r*(WLS)^2"": (fit_r_r.resid + fit_r_r.fittedvalues)**2})
    print_table(left_r, ""–¢–∞–±–ª–∏—Ü—è 5*. LEFT (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω—ñ r*) –¥–ª—è —Ç–µ—Å—Ç—É –ì–ö"")
    print_table(right_r, ""–¢–∞–±–ª–∏—Ü—è 6*. RIGHT (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω—ñ r*) –¥–ª—è —Ç–µ—Å—Ç—É –ì–ö"")

    gq_compact_r = gq_summary_compact(fit_l_r, fit_r_r, m, alpha)
    print_table(gq_compact_r, ""–ó–≤–µ–¥–µ–Ω–Ω—è —Ç–µ—Å—Ç—É –ì–æ–ª–¥—Ñ–µ–ª–¥–∞‚Äì–ö–≤–∞–Ω–¥—Ç–∞ –Ω–∞ r* (F, df=m‚àí1)"")

    glejser_r_short, glejser_r_long = glejser_table(
        x, yhat_w, np.abs(rstar), deltas, alpha, label=""r*""
    )

    homosk_after_wls = (
        (p_r >= alpha) and
        (not bool(gq_compact_r[""reject_H0""].iloc[0])) and
        all(glejser_r_short[""p-value""] >= alpha)
    )
    summary_line = f""–ü–Ü–î–°–£–ú–û–ö: –ì–æ–º–æ—Å–∫–µ–¥–∞—Å—Ç–∏—á–Ω—ñ—Å—Ç—å –ø—ñ—Å–ª—è WLS (–∑–∞ r*): {'–¢–ê–ö' if homosk_after_wls else '–ù–Ü'}; –º–æ–¥–µ–ª—å –≤–∞–≥ –∑–∞ –ì–ª–µ–π–∑–µ—Ä–æ–º: Œ¥={delta_best:g}""
    print(summary_line)

    if make_plots:
        plot_diagnostics_ols(x, y, yhat, u, nbins=3)
        plot_diagnostics_wls(x, yhat_w, rstar, nbins=3)

    return {
        ""ols_model"": ols_model,
        ""wls_model"": wls_model,
        ""sigma_hat"": sigma_hat,
        ""glejser_ols"": glejser_short,
        ""glejser_wls_r"": glejser_r_short,
        ""gq_ols_compact"": gq_compact_ols,
        ""gq_r_compact"": gq_compact_r,
        ""homosked_after_wls"": homosk_after_wls,
        ""delta_best"": delta_best
    }

if __name__ == ""__main__"":
    x = [0.3, 0.6, 1.1, 0.2, 0.8, 1.6, 1.5, 0.9, 0.9, 0.8]
    y = [2.8, 4.3, 6.3, 2.9, 5.3, 8.3, 8.0, 5.7, 5.4, 5.2]

    run_pipeline(x, y, alpha=0.05, deltas=(1,2,3,0.5,1/3), m=4, c=2, make_plots=True)
"
Pn7geaxS,lb6,tmCool,Python,Monday 27th of October 2025 06:53:17 PM CDT,"import ctypes
import string

kernel32 = ctypes.WinDLL('kernel32', use_last_error=True)

GetLogicalDrives = kernel32.GetLogicalDrives
GetLogicalDrives.restype = ctypes.c_ulong # Dword

GetVolumeInformation = kernel32.GetVolumeInformationW
GetVolumeInformation.argtypes = [
    ctypes.c_wchar_p,  
    ctypes.c_wchar_p,  
    ctypes.c_ulong,    
    ctypes.POINTER(ctypes.c_ulong), 
    ctypes.POINTER(ctypes.c_ulong), 
    ctypes.POINTER(ctypes.c_ulong), 
    ctypes.c_wchar_p,  
    ctypes.c_ulong     
]
GetVolumeInformation.restype = ctypes.c_int 

GetDiskFreeSpace = kernel32.GetDiskFreeSpaceW
GetDiskFreeSpace.argtypes = [
    ctypes.c_wchar_p,  
    ctypes.POINTER(ctypes.c_ulong),  
    ctypes.POINTER(ctypes.c_ulong),  
    ctypes.POINTER(ctypes.c_ulong),  
    ctypes.POINTER(ctypes.c_ulong)   
]
GetDiskFreeSpace.restype = ctypes.c_int # BOOL

def get_drive_info():
    drive_mask = GetLogicalDrives()
    
    print(""\n"")
    print(""‚ïî"" + ""‚ïê"" * 63 + ""‚ïó"")
    print(""‚ïë     –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –õ–û–ì–ò–ß–ï–°–ö–ò–• –î–ò–°–ö–ê–• –ö–û–ú–ü–¨–Æ–¢–ï–†–ê"" + "" "" * 17 + ""‚ïë"")
    print(""‚ïö"" + ""‚ïê"" * 63 + ""‚ïù"")
    
    for i, drive_letter in enumerate(string.ascii_uppercase):
        if (drive_mask >> i) & 1:
            root_path = f""{drive_letter}:\\""
            print(f"">> –¢–æ–º: {root_path}"")

            volume_name_size = 256
            volume_name = ctypes.create_unicode_buffer(volume_name_size)
            serial_number = ctypes.c_ulong()
            max_component_len = ctypes.c_ulong()
            file_system_flags = ctypes.c_ulong()
            file_system_name_size = 256
            file_system_name = ctypes.create_unicode_buffer(file_system_name_size)

            success_vi = GetVolumeInformation(
                root_path,
                volume_name,
                volume_name_size,
                ctypes.byref(serial_number),
                ctypes.byref(max_component_len),
                ctypes.byref(file_system_flags),
                file_system_name,
                file_system_name_size
            )

            if success_vi:
                print(f""  - –ò–º—è —Ç–æ–º–∞: {volume_name.value}"")
                print(f""  - –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: {file_system_name.value}"")
                print(f""  - –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {serial_number.value:X}"")
                print(f""  - –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: {max_component_len.value} —Å–∏–º–≤–æ–ª–æ–≤"")
            else:
                print(f""  - !! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º–µ (–ö–æ–¥ –æ—à–∏–±–∫–∏: {ctypes.get_last_error()}) !!"")
            
            sectors_per_cluster = ctypes.c_ulong()
            bytes_per_sector = ctypes.c_ulong()
            free_clusters = ctypes.c_ulong()
            total_clusters = ctypes.c_ulong()

            success_dfs = GetDiskFreeSpace(
                root_path,
                ctypes.byref(sectors_per_cluster),
                ctypes.byref(bytes_per_sector),
                ctypes.byref(free_clusters),
                ctypes.byref(total_clusters)
            )

            if success_dfs:
                bytes_per_cluster = sectors_per_cluster.value * bytes_per_sector.value
                total_space_bytes = total_clusters.value * bytes_per_cluster
                free_space_bytes = free_clusters.value * bytes_per_cluster
                
                def format_bytes(bytes_value):
                    KB = 1024
                    MB = KB * 1024
                    GB = MB * 1024
                    TB = GB * 1024
                    
                    if bytes_value >= TB:
                        return f""{bytes_value / TB:.2f} –¢–ë""
                    elif bytes_value >= GB:
                        return f""{bytes_value / GB:.2f} –ì–ë""
                    elif bytes_value >= MB:
                        return f""{bytes_value / MB:.2f} –ú–ë""
                    elif bytes_value >= KB:
                        return f""{bytes_value / KB:.2f} –ö–ë""
                    else:
                        return f""{bytes_value} –±–∞–π—Ç""

                print(""  - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:"")
                print(f""    - –†–∞–∑–º–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞: {format_bytes(bytes_per_cluster)}"")
                print(f""    - –û–±—â–µ–µ –º–µ—Å—Ç–æ: {format_bytes(total_space_bytes)}"")
                print(f""    - –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: {format_bytes(free_space_bytes)}"")
                print(f""    - –ö–ª–∞—Å—Ç–µ—Ä—ã (–û–±—â–µ–µ/–°–≤–æ–±–æ–¥–Ω–æ–µ): {total_clusters.value} / {free_clusters.value}"")
            else:
                print(f""  - !! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–ö–æ–¥ –æ—à–∏–±–∫–∏: {ctypes.get_last_error()}) !!"")
            
            print(""-"" * 30)

if __name__ == ""__main__"":
    try:
        get_drive_info()
        print()
        input(""–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞..."")
    except Exception as e:
        print(f""–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"")
        import traceback
        traceback.print_exc()
        input(""–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞..."")"
NGvbWDzx,Untitled,Melanie1204,Python,Monday 27th of October 2025 05:49:32 PM CDT,"import tkinter as tk
from tkinter import messagebox, filedialog
from tkinter import ttk
import requests
import re
import os
import subprocess
import json
from threading import Thread

# Hilfsfunktion zur Extraktion der Video-ID aus Twitch-URL
def extract_video_id(url):
    match = re.search(r""videos/(\d+)"", url)
    return match.group(1) if match else None

# Video-Metadaten (Titel) via Twitch GraphQL API holen
def fetch_video_title(video_id):
    client_id = 'kimne78kx3ncx6brgo4mv6wki5h1ko'
    query = '''
        query VideoByID($id: ID!) {
            video(id: $id) {
                title
            }
        }
    '''
    payload = [{
        'operationName': 'VideoByID',
        'variables': {'id': video_id},
        'query': query
    }]
    headers = {'Client-ID': client_id, 'Content-Type': 'application/json'}
    try:
        res = requests.post('https://gql.twitch.tv/gql', headers=headers, data=json.dumps(payload))
        res.raise_for_status()
        data = res.json()
        return data[0]['data']['video']['title']
    except Exception:
        return video_id

# M3U8-Playlist abrufen √ºber Twitch GraphQL API
def get_all_m3u8_urls(video_id):
    payload = [{
        ""operationName"": ""PlaybackAccessToken_Template"",
        ""variables"": {""vodID"": video_id, ""playerType"": ""embed""},
        ""query"": """"""
            query PlaybackAccessToken_Template($vodID: ID!, $playerType: String!) {
                videoPlaybackAccessToken(
                    id: $vodID,
                    params: { platform: \""web\"", playerBackend: \""mediaplayer\"", playerType: $playerType }
                ) {
                    signature
                    value
                }
            }
        """"""
    }]
    headers = {""Client-ID"": ""kimne78kx3ncx6brgo4mv6wki5h1ko"", ""Content-Type"": ""application/json""}
    res = requests.post(""https://gql.twitch.tv/gql"", headers=headers, data=json.dumps(payload))
    res.raise_for_status()
    data = res.json()[0]['data']['videoPlaybackAccessToken']
    sig, token = data['signature'], data['value']
    m3u8_url = f""https://usher.ttvnw.net/vod/{video_id}.m3u8""
    params = {""player"": ""twitchweb"", ""token"": token, ""sig"": sig,
              ""allow_source"": ""true"", ""allow_audio_only"": ""true"", ""playlist_include_framerate"": ""true""}
    playlist_resp = requests.get(m3u8_url, params=params)
    playlist_resp.raise_for_status()
    playlist = playlist_resp.text
    streams = re.findall(r""#EXT-X-STREAM-INF:.*RESOLUTION=(\d+x\d+).*\n(.*)"", playlist, re.IGNORECASE)
    return {res: url for res, url in streams}

# Download-Funktion, Aufrufe GUI-aktualisierend via safe callbacks
def download_video(m3u8_url, output_path, safe_log, safe_progress):
    try:
        cmd = [""ffmpeg"", ""-i"", m3u8_url, ""-c"", ""copy"", ""-bsf:a"", ""aac_adtstoasc"", output_path]
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, encoding='utf-8', errors='ignore')
        for line in process.stdout:
            safe_log(line.strip())
        process.wait()
        safe_log(f""Video gespeichert: {output_path}"")
        safe_progress(100)
    except Exception as e:
        safe_log(f""Fehler beim ffmpeg-Lauf: {e}"")
        safe_progress(0)

# Hauptklasse f√ºr GUI
def main():
    root = tk.Tk()
    root.title(""Twitch Downloader"")

    # Widgets
    tk.Label(root, text=""Twitch VOD URL:"").pack(anchor='w', padx=10, pady=(10,0))
    url_entry = tk.Entry(root, width=60)
    url_entry.pack(padx=10)

    tk.Label(root, text=""Video-Titel:"").pack(anchor='w', padx=10, pady=(10,0))
    title_var = tk.StringVar()
    title_entry = tk.Entry(root, textvariable=title_var, width=60)
    title_entry.pack(padx=10)

    tk.Label(root, text=""Qualit√§t ausw√§hlen:"").pack(anchor='w', padx=10, pady=(10,0))
    quality_var = tk.StringVar()
    quality_menu = tk.OptionMenu(root, quality_var, ""Bitte URL eingeben"")
    quality_menu.pack(padx=10)

    progress = tk.DoubleVar()
    progressbar = ttk.Progressbar(root, variable=progress, maximum=100)
    progressbar.pack(fill='x', padx=10, pady=5)

    log_text = tk.Text(root, height=8, width=70, state='disabled')
    log_text.pack(padx=10, pady=(0,10))

    output_path = [None]  # mutable container

    # Thread-safe GUI-Update-Funktionen
    def safe_log(msg):
        root.after(0, lambda: log(msg))
    def safe_progress(val):
        root.after(0, lambda: progress.set(val))

    def log(msg):
        log_text.configure(state='normal')
        log_text.insert(tk.END, msg+""\n"")
        log_text.see(tk.END)
        log_text.configure(state='disabled')

    def on_url_change(event=None):
        vid = extract_video_id(url_entry.get().strip())
        if not vid:
            return
        title = fetch_video_title(vid)
        title_var.set(title)
        log(f""Titel geladen: {title}"")
        streams = get_all_m3u8_urls(vid)
        menu = quality_menu['menu']
        menu.delete(0,'end')
        for r,u in streams.items():
            menu.add_command(label=r, command=lambda r=r: quality_var.set(r))
        if streams:
            q = next(iter(streams))
            quality_var.set(q)
            root.streams = streams
            log(f""Qualit√§ten: {', '.join(streams.keys())}"")

    def save_as():
        fname = filedialog.asksaveasfilename(
            defaultextension='.mp4',
            filetypes=[('MP4','*.mp4'),('All','*.*')],
            initialfile=f""{title_var.get() or 'video'}.mp4""
        )
        if fname:
            output_path[0] = fname
            log(f""Speichern unter: {fname}"")

    def start_dl():
        if not output_path[0]:
            messagebox.showerror('Fehler','Bitte √ºber ""Speichern unter..."" einen Zielpfad w√§hlen.')
            return
        vid = extract_video_id(url_entry.get().strip())
        q = quality_var.get()
        u = getattr(root,'streams',{}).get(q)
        if not all([vid,q,u]):
            messagebox.showerror('Fehler','Bitte URL eingeben und Qualit√§t ausw√§hlen.')
            return
        log('Starte Download...')
        Thread(target=lambda: download_video(u, output_path[0], safe_log, safe_progress)).start()

    url_entry.bind('<FocusOut>', on_url_change)
    tk.Button(root, text='Speichern unter...', command=save_as).pack(pady=5)
    tk.Button(root, text='Download starten', command=start_dl).pack(pady=5)

    root.mainloop()

if __name__=='__main__':
    main()
"
05HMH9cG,stairdigger,Neon1432,Lua,Monday 27th of October 2025 04:43:42 PM CDT,"local args = { ... }
local levels = 5
if #args ~= 0 then
    if tonumber(args[1]) == nil then
        error(""input must be a number"")
    else
        levels = tonumber(args[1])
    end
end

local function selectItem(itemname)
    local function isItem()
        local details = turtle.getItemDetail()
        if details ~= nil then
            if details.name == itemname then
                return true
            end
        end
        return false
    end
    if isItem() then return true end
    for i = 1, 16, 1 do
        turtle.select(i)
        if isItem() then return true end
    end
    return false
end


---@enum Directions
local Directions = {
    forward = 0,
    up = 2,
    down = 4,
}

---@param direction Directions
local function placeBlock(direction)
    selectItem(""minecraft:cobblestone"")
    if direction == Directions.forward then
        if not turtle.inspect() then
            turtle.place()
        end
    end
    if direction == Directions.down then
        if not turtle.inspectDown() then
            turtle.placeDown()
        end
    end
    if direction == Directions.up then
        if not turtle.inspectUp() then
            turtle.placeUp()
        end
    end
end

local function surroundingsSafe()
    if turtle.inspectDown() or turtle.inspectUp() then
        return false
    end
    return true
end

---comment
---@return boolean
local function digLevel()
    turtle.dig()
    turtle.forward()
    turtle.digDown()
    turtle.down()
    placeBlock(Directions.down)
    turtle.up()
    turtle.digUp()
    turtle.up()
    turtle.digUp()
    turtle.up()
    turtle.digUp()
    turtle.up()
    placeBlock(Directions.up)
    turtle.down()
    turtle.down()
    turtle.down()
    if not surroundingsSafe() then
        return false
    end
    turtle.down()
    return true
end

local safe = true
while safe do
    safe = digLevel()

    levels = levels - 1
    if levels <= 0 then
        return true
    end
end
"
55gvdrwt,Untitled,Anderson88888999,HTML,Monday 27th of October 2025 03:54:20 PM CDT,"// === Classic Clippy AI ===
const htmlContent = `
<!DOCTYPE html>
<html lang=""en"">
<head>
<meta charset=""UTF-8"">
<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
<title>Clippy AI</title>
<script src=""https://cdn.tailwindcss.com""></script>
<style>
  body {
    font-family: ""Comic Sans MS"", ""Segoe UI"", sans-serif;
    background: white;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100vh;
    overflow: hidden;
  }
  #clippy-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
  }
  #clippy {
    width: 140px;
    height: auto;
    user-select: none;
    animation: floaty 3s ease-in-out infinite;
  }
  @keyframes floaty {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-5px); }
  }

  /* Old Clippy Bubble */
  .speech {
    background: #ffffe0;
    border: 2px solid #e5d36b;
    border-radius: 12px;
    padding: 12px 16px;
    max-width: 300px;
    color: #333;
    font-size: 14px;
    box-shadow: 2px 2px 6px rgba(0,0,0,0.2);
    position: absolute;
    bottom: 170px;
    opacity: 0;
    transform: scale(0.9);
    animation: popUp 0.25s ease-out forwards;
  }
  @keyframes popUp {
    from { opacity: 0; transform: scale(0.8) translateY(10px); }
    to { opacity: 1; transform: scale(1) translateY(0); }
  }
  .speech::after {
    content: """";
    position: absolute;
    bottom: -16px;
    left: 30px;
    border-width: 8px;
    border-style: solid;
    border-color: #ffffe0 transparent transparent transparent;
    filter: drop-shadow(1px 1px 1px rgba(0,0,0,0.1));
  }

  #input-area {
    display: flex;
    gap: 8px;
    margin-top: 30px;
  }
  #user-input {
    padding: 10px 14px;
    border-radius: 9999px;
    border: 1px solid #ccc;
    outline: none;
    width: 220px;
  }
  #user-input:focus {
    border-color: #888;
  }
  #send-btn {
    background: #0078d7;
    color: white;
    border: none;
    border-radius: 9999px;
    padding: 10px 18px;
    cursor: pointer;
    font-weight: bold;
    transition: background 0.2s;
  }
  #send-btn:hover {
    background: #005ea6;
  }
</style>
</head>
<body>
  <div id=""clippy-container"">
    <img id=""clippy"" src=""https://static.wikia.nocookie.net/18056f4d-426a-4238-a766-85f5fcf0d59b/scale-to-width/755"" alt=""Clippy"">
    <div id=""bubble-area""></div>
    <div id=""input-area"">
      <input id=""user-input"" type=""text"" placeholder=""Ask Clippy something..."" />
      <button id=""send-btn"">Send</button>
    </div>
  </div>

  <script>
    const apiKey = ""AIzaSyCzNQXv5QifWxlaWu0urbs2FZZrSLrj-Cg"";
    const model = ""gemini-2.5-flash-preview-05-20"";
    const bubbleArea = document.getElementById(""bubble-area"");
    const userInput = document.getElementById(""user-input"");
    const sendBtn = document.getElementById(""send-btn"");

    let chatHistory = [];

    function showBubble(text) {
      const old = bubbleArea.querySelector("".speech"");
      if (old) old.remove();
      const bubble = document.createElement(""div"");
      bubble.className = ""speech"";
      bubble.textContent = text;
      bubbleArea.appendChild(bubble);
    }

    async function sendMessage() {
      const text = userInput.value.trim();
      if (!text) return;
      showBubble(""Hmm... let me think! üßê"");
      userInput.value = """";

      chatHistory.push({ role: ""user"", parts: [{ text }] });

      try {
        const res = await fetch(\`https://generativelanguage.googleapis.com/v1beta/models/\${model}:generateContent?key=\${apiKey}\`, {
          method: ""POST"",
          headers: { ""Content-Type"": ""application/json"" },
          body: JSON.stringify({ contents: chatHistory })
        });
        const data = await res.json();
        const aiText = data?.candidates?.[0]?.content?.parts?.[0]?.text || ""Sorry, my paperclip brain glitched üòÖ"";

        chatHistory.push({ role: ""model"", parts: [{ text: aiText }] });
        showBubble(aiText);
      } catch (err) {
        console.error(err);
        showBubble(""Oops! I lost connection to my office server! üìéüí•"");
      }
    }

    sendBtn.addEventListener(""click"", sendMessage);
    userInput.addEventListener(""keydown"", e => {
      if (e.key === ""Enter"") sendMessage();
    });

    showBubble(""Hey there! It looks like you‚Äôre trying to chat with Clippy ü§ì"");
  </script>
</body>
</html>
`;

const clippyWin = window.open(""about:blank"", ""_blank"");
if (clippyWin) {
  clippyWin.document.write(htmlContent);
  clippyWin.document.close();
} else {
  alert(""Pop-up blocked! Allow pop-ups and try again."");
}"
C6cv8KTh,CarSS        (TextBasedCarGame),Gamerboy0936,C++,Monday 27th of October 2025 03:08:09 PM CDT,"/*
		    *WELCOME TO CARSS*
Hello! And Welcome To The (probably)BIGGEST! Text Based Game On The Internet ""CarSS"" A Car/Racing Simulator Where You Can Upgrade Your Car,Buy A Mechanic Shop,Buy New Cars, And Gamble(the most important part), Travel To Towns...And Upgrade Your Car!, Race Different Opponets And Ofcourse....Ummm...Gamble...Oh Right And Open A Mechanic Shop With Randomly Generated Jobs, Fun Right?..Now Trust Me...This Game Is Not Done Yet! I Will All A TON Of More Stuff...I Released It On PasteBin In V1.9,I Was Waiting Until The Game Just....Just...JUST....Felt Perfect...And Now It Feels Perfect!(close to perfect)..Thank You So Much For Playing My Game!,
Also Check Out My Official Channel @tankiegames On Youtube And My Game On Itch.io ""The Headless""
Have Fun!
-A Game By Tareq
*/

#include <iostream>
#include <ctime>
#include <cstdlib>
#include <chrono>
#include <thread>

using namespace std;
		int money = 5000; //money
	
class RandomJobGeneration {
	public:
		string newcar = ""test"";
		string newproblem = ""test"";
		string customertext = ""test"";
		int randomcar;
		int randomproblem;
		int newprice = 500;
		
		void randomcarinit()
		{
			srand(time(0));
			randomcar = rand()%10;
			if (randomcar == 0) //cars
			{
				newcar = ""Toyota Supra MK5"";
				newprice += 600;
			}
			if (randomcar == 1)
			{
				newcar = ""TTS Racer"";
				newprice += 1000;
			}
			if (randomcar == 2)
			{
				newcar = ""Buggati Vayro"";
				newprice += 3000;
			}
			if (randomcar == 3)
			{
				newcar = ""BMW M5"";
				newprice += 300;
			}
			if (randomcar == 4)
			{
				newcar = ""Dastun100A"";
				newprice += 250;
				
			}
			if (randomcar == 5)
			{
				newcar = ""Ford Focus X1"";
				newprice += 250;
			}
			if (randomcar == 6)
			{
				newcar = ""Toyota Supra MK4"";
				newprice += 550;
			}
			if (randomcar == 7)
			{
				newcar = ""NewLand C6"";
				newprice += 500;
			}
			if (randomcar == 8)
			{
				newcar = ""Ford Focus X4"";
				newprice += 525;
			}
			if (randomcar == 9)
			{
				newcar = ""TTS Racer"";
				newprice += 6000;
			}
			if (randomcar == 10)
			{
				newcar = ""E36"";
				newprice += 500;
			}
		}
		void randomprobleminit() //problems
		{
			srand(time(0));
			randomproblem = rand()%10;
			if (randomproblem == 0)
			{
				customertext = ""Hey, I Hear Knocking Coming From The Engine, Can You Fix It?"";
				newproblem = ""Broken Piston"";
				newprice += 700;
			}
			if (randomproblem == 1)
			{
				customertext = ""Howdy!, One Of My Taillights Are Not Working"";
				newproblem = ""Broken Tail Light"";
				newprice += 150;
			}
			if (randomproblem == 2)
			{
				customertext = ""Hello!, I Want A Complete Engine Rebuild"";
				newproblem = ""Engine Rebuild"";
				newprice += 2500;
			}
			if (randomproblem == 3)
			{
				customertext = ""Hello!, My Headgasket Seems To Be Leaking!"";	
				newproblem = ""Damaged HeadGasket"";
				newprice += 425;
			}
			if (randomproblem == 4)
			{
				customertext = ""My Umm...Windshield Is Broken..Dont Ask How!"";
				newproblem = ""Broken Windshield"";
				newprice += 350;
			}
			if (randomproblem == 5)
			{
				customertext = ""Hello! I Seem To Have A Flat!"";
				newproblem = ""Tire Change"";
				newprice += 245;
			}
			if (randomproblem == 6)
			{
				customertext = ""Howdy!, I Would Like A OilChange"";
				newproblem = ""Oil Change"";
				newprice += 100;
			}
			if (randomproblem == 7)
			{
				customertext = ""I Want To Completely Repaint The Body"";
				newproblem = ""Repaint"";
				newprice += 220;
			}
			if (randomproblem == 8)
			{
				customertext = ""Hey! My Windshield Wipers Are Not Working!"";
				newproblem = ""Windshield Wipers"";
				newprice += 150;
			}
			if (randomproblem == 9)
			{
				customertext = ""Hey...Ummm...Its A Long Story But There Is A Giant Hole In The Block"";
				newproblem = ""Engine Block Leak"";
				newprice += 800;
			}
			if (randomproblem == 10)
			{
				customertext = ""Hey! The Car Is Always Overheating!"";
				newproblem = ""Broken Waterpump"";
				newprice += 250;
			}
		}
		//newproblem
};
	RandomJobGeneration RJG;
class MechanicJob {
	public: 
		void job(string car,string problem ,int cost,string text)
		{
			cout << ""Customer: "" << text << endl;
			cout << ""Car : "" << car << endl;
			cout << ""Problem : "" << problem << endl;
			cout << ""Cost: "" << cost << ""$"" << endl;
			cout << ""Accept/anykey to decline"" << endl;
			string answer;
			cin >> answer;
			if (answer == ""accept"")
			{
				if (money >=cost)
				{
					cout << ""Repairing..."" << endl;
					this_thread::sleep_for(chrono::seconds(1));
					cout << ""10%"" << endl;
					this_thread::sleep_for(chrono::seconds(1));
					cout << ""25%"" << endl;
					this_thread::sleep_for(chrono::seconds(1));
					cout << ""60%"" << endl;
					this_thread::sleep_for(chrono::seconds(1));
					cout << ""90%"" << endl;
					this_thread::sleep_for(chrono::seconds(1));
					cout << ""done..."" << endl;
					srand(time(0));
					int tip = rand()%200;
					srand(time(0));
					int randomincome = 100 + rand()%1000;
					int totalincome = cost + randomincome + tip;
					cout << ""Tip: "" << tip << ""$"" << endl;
					cout << ""Total: "" << totalincome << ""$"" << endl;
					money += totalincome;
					cout << ""Current Money: "" << money << ""$"" << endl;
					RJG.newprice = 0;
					
				}
				else
				{
					cout << ""Not Enough Money"" << endl;
					RJG.newprice = 0;
				}
			}
			else
			{
				cout << ""Successfuly Declined"" << endl;
			}
		}
};

int main()
{ //Variables
	MechanicJob mechanicjob;
	string carnumber = ""CHE3ZE"";
	string car = ""Datsun 100A"";
	string currenttown = ""BluesTown"";
	int currentplace = 0;
	// 0 = None
	// 1 = Casino
	// 2 = MechanicJob
	int fines = 0;
	int enginehp = 150;
	int carprice = 55000;
	int totalraces = 0;
	int totalwinnedraces = 0;
	int totalpartsinstalled = 0;
	bool hascar = true;
	int enginetorque = 250;
	int fuel = 100;
	//engine upgrades
	bool racingcrsinstalled= false;
	bool racingcmsinstalled = false;
	bool racingpistonconrodinstalled = false;
	bool racingsparkplugsinstalled = false;
	bool racingdistributerinstalled = false;
	bool racingflywheelinstalled = false;
	bool turboinstalled = false;
	bool racingintakeinstalled = false;
	//achievements
	bool Ach_goddamnyourerich = false;
	bool Ach_firstrace = false;
	bool Ach_firstwinnedrace = false;
	bool Ach_yournameisbiXch = false;
	bool Ach_amoddedcarslover = false;
	//PlacesOwned
	bool mechanicplace = false;
	//other
	string engine = ""STA I4"";
	//Main Info
cout << ""               CarSS V1.9FULLVERSION"" << endl <<""You Will Start With 5000$,The Idea Of The Game Is Simple,Get Money,Upgrade OR Buy A Car And Well...Win RACES BABYYYY!."" << endl;
cout << ""Please Put Your Name Here:"" << endl;
string name;
cin >> name;
cout << ""Your Name Is "" << name << ""!!!!"" << "" The Name Will Be Used Ingame"" << endl;
cout << ""You Can Start With 'help'"" << endl << endl;
while (true)
{ //Main Stuff
	//Straight 'if's
		if(name == ""Bitch"" or name == ""bitch"")
		{
			if (Ach_yournameisbiXch == false)
			{
				cout << ""Your Name Is B*ch?, Has Just Been Achieved"" << endl;
				Ach_yournameisbiXch= true;
			}
		}
		
		if (money >= 1000000)
		{
			if (Ach_goddamnyourerich == false)
			{
				Ach_goddamnyourerich = true;
				cout << ""God Damn You're Rich, Has Just Been Achieved"" << endl;
			}
		}
		
		if (totalpartsinstalled == 5)
		{
			if (Ach_amoddedcarslover == false)
			{
				cout << ""A Modded Cars Lover, Has Just Been Achieved"" << endl;
				Ach_amoddedcarslover= true;
			}
		}
		
		if (totalraces == 1)
		{
			if (Ach_firstrace == false)
			{
				cout << ""First Race, Has Just Been Achieved"" << endl;
				Ach_firstrace= true;
			}
		}
		
		if (totalwinnedraces == 1)
		{
			if (Ach_firstwinnedrace == false)
			{
				cout << ""First Win, Has Just Been Achieved"" << endl;
				Ach_firstwinnedrace= true;
			}
		}
	string main;
	cin >> main;
	
	if (currentplace == 1) //Casino
	{
		if (main == ""bet"")
		{
			cout << ""How Much Ya Wanna Bet?"" << endl;
			int bet;
			cin >> bet;
			if (bet > money)
			{
				cout << ""Not Enough Money"" << endl;
			}
			else
			{
			int chance = 1 + rand() % 3;
			
			if (chance == 1)
			{
				money = money+bet;
				cout << ""Congrats Ya Won "" << bet*2 << ""$"" << endl;
					
			}
			else
			{
				money = money-bet; 
				cout << ""Sadly..Ya Lost "" << bet << ""$"" << endl;
			}
			}
		}
		if (main == ""balance"")
		{
			cout << ""You Got "" << money << ""$"" << endl;
		}
		if (main == ""leave"")
		{
			cout << ""Cya Next Time!"" << endl;
			currentplace = 0;
		}
		if (main == ""help"")
		{
			cout << ""leave"" << endl;
			cout << ""balance"" << endl;
			cout << ""bet"" << endl;
		}
	}
	if (currentplace == 2) //MechanicJob
	{
		if (main == ""help"")
		{
			cout << ""newjob"" << endl;
			cout << ""balance"" << endl;
			cout << ""leave"" << endl;
		}
		if (main == ""balance"")
		{
			cout << ""You Have "" << money << ""$"" << endl;
		}
		if (main == ""newjob"")
		{
			RJG.randomprobleminit();
			RJG.randomcarinit();
			mechanicjob.job(RJG.newcar,RJG.newproblem,RJG.newprice,RJG.customertext);
			RJG.newprice = 0;
		}
		if (main == ""leave"")	
		{
			currentplace = 0;
		}
	}
	
	if (currentplace == 0) // Nothing
	{
		
	if (main == ""help"")
	{
		cout << ""------------------"" << endl;
		cout << ""balance"" << endl;
		cout << ""mycar"" << endl;
		cout << ""allcars"" << endl;
		cout << ""achievements"" << endl;
		cout << ""buycar"" << endl;
		cout << ""allengines"" << endl;
		cout << ""fillfuel""<< endl;
		cout << ""race"" << endl;
		cout << ""gototown"" << endl;
		cout << ""gotoplace"" << endl;
		cout << ""fuellevel"" << endl;
		cout << ""checkfuel"" << endl;
		cout << ""status"" << endl;
		cout << ""payfines"" << endl;
		cout << ""enginechange(NOTACTIVE)"" << endl;
		cout << ""sellcar"" << endl;
		cout << ""myengine"" << endl;
		cout << ""fines"" << endl;
		cout << ""dyno"" << endl;
		cout << ""quit"" << endl;
		cout << ""updates"" << endl;
		cout << ""info"" << endl;
		cout << ""howtoplay"" << endl;
		cout << ""buyplace"" << endl;
		cout << ""------------------"" << endl;
		cout << endl;
	}
	if (main == ""howtoplay"")
	{
		cout << ""Welcome To CarSS"" << endl;
		cout << ""-You Can Go To Different Towns And Go To Different Places(f.e.Casino) and You Have A Mechanic Garage That You Can Work At Once You Buy It(25000$), You Can Race,Buy Cars,Sell Cars, Ans Upgrade Engine Parts To Increase Your Chance Of Winning."" << endl;
		cout << ""Keep In Mind: There Is A 1/6 Chance Of Getting A Fine While Going To Towns, Once Your Fines Reach Over 30000$..Welp You'll Lose!"" << endl;	
	}
	if (main == ""status"")
	{
		cout << ""STATUS:"" << endl;
		cout << ""----------------"" << endl;
		cout << ""Fuel = "" << fuel << endl;
		cout << ""Total Winned Races = "" << totalwinnedraces << endl;
		cout << ""Total Races = "" << totalraces << endl;
		cout << ""Car = ""<< car << endl;
		cout << ""Engine = "" << engine << endl;
		cout << ""Car Price = "" << carprice <<  endl;
		cout << ""Licence Plate Number = "" << carnumber << endl;
		cout << ""Engine Torque = "" << enginetorque << endl;
		cout << ""Engine HP = "" << enginehp << endl;
		cout << ""Total Parts Installed = "" << totalpartsinstalled << endl;
		cout << ""Fines = "" << fines << endl;
		cout << ""----------------"" << endl;
	}
	if (main == ""checkfuel"")
	{
		cout << ""You Have "" << fuel << ""% Of Fuel"" << endl;
	}
	if (main == ""buyplace"")
	{
		cout << ""1.MNO Mechanic = 25000$"" << endl;
		int buyplace;
		cin >> buyplace;
		if (buyplace == 1)
		{
			if (money >= 25000)
			{
				cout << ""Successful"" << endl;
				mechanicplace = true;
				money -= 25000;
			}
			else
			{
				cout << ""Not Enough Money"" << endl;
			}
		}
	}
	
	if (main == ""achievements"")
	{
		//ACHIEVEMENTS!
		cout << ""*ACHIEVEMENTS*,1 = true and 0 = false"" << endl;
		cout << ""-----------------------"" << endl;
		cout << ""God Damn You're Rich! Achievement = "" << Ach_goddamnyourerich << endl;
		cout << ""First Race! Achievement = "" << Ach_firstrace << endl;
		cout << ""First Win! Achievement = "" << Ach_firstwinnedrace << endl;
		cout << ""Your Name Is Bi*ch? Achievement = "" << Ach_yournameisbiXch << endl;
		cout << ""A Modded Cars Lover! Achievement = "" << Ach_amoddedcarslover << endl;
		cout << ""-----------------------"" << endl;
	}
	if (fines > 29999)
	{
		cout << ""*Found This Near Your Missing Car!*"" << endl;
		cout << ""Police Report For "" << name << "" Your Car Has Been Suspended For The Following Reason: Your Fines Reached Over 30000$ To Get Your Car Back You WIll Have To Pay 200000$ For Not Paying Your Fine Of "" << fines << ""$, GoodLuck!"" << endl;
		
		cout << name << "": Fu*k This *GunShot* "" <<endl;
		return 0;
	}
	
	if (main == ""payfines"")
	{
		if (money > fines)
		{
			if (!fines == 0)
			{
			cout << "" You Have Successfuly Paid Your Fines"" << endl;
			money -= fines;
			fines = 0;
			}
			else
			{
				cout << ""You Dont Have Any Fines"" << endl;
			}
		}
		else
		{
			cout << ""You Dont Have Enough Money"" << endl;
		}
	}
	
	if (main == ""fuellevel"")
	{
		cout << ""You Have "" << fuel << ""% Of Fuel"" << endl;
	}
	
	if (main == ""balance"")
	{
		cout << ""You Have "" << money << ""$"" << endl << endl;
	}

	
	if (main == ""fines"")
	{
		cout << ""You Have Total Fines Of "" << fines << ""$"" << endl;
	}
	
	if (main == ""info"")
	{
		cout << ""This Game is A Text Based Racing Simulator Where You Can Upgrade Your Car And Race And Buy/Sell Cars The Race, I Really Hope You Enjoyed Playing This Game, It Took Me Like 60 Hours To Make, So You Better Enjoy It."" << endl;
	}
	
	if (main == ""updates"")
	{
		cout << ""V0.7: Added Info And A Updates List"" << endl;
		cout << ""V0.9: Added Towns And Police And A Bad Ending"" << endl;
		cout << ""V0.95: Added 2 New Engine Upgrades And One New Opponet Racer"" << endl;
		cout << ""V0.96: Fixed 2 Bugs One Of Them Where You Didn't Even Lose Money When You Bought A New Engine Part And Changed The Cost Of Engine Parts To Make The Game More Harder"" << endl;
		cout << ""V0.97: Added A New Opponet Racer And A New Car!!"" << endl;
		cout << ""V0.98: Added The Ability To Install Other Engines On Your Car Why?....Well Because It Sounds Better And Also Added A 'futureideas' List To See Future Ideas And Finally Fixed A Bug With the 'allcars' And The 'allengines'"" << endl;
		cout << ""V0.99: Added New Engine Upgrades(SparkPlugRacing,DistributerRacing), And Fixed Some Bugs And Made The Starting Money From 6000 To 4000 To Make The Game A Little More Harder And Finally; Changed A Command From 'checkmoney' To 'balance'."" << endl;
		cout <<""V0.995: Did The Last Few Bits Like Bugfixes and Changes."" << endl;
		cout << ""V1.0: The Biggest Update Yet, A New Achievements System And Status Which Shows Your(fuel..car...totalraces..etc)."" << endl;
		cout << ""V1.1: Added 2 New Cars(Datsun100A(newstartercar)_TTSRacer(a v12 1200hp racer),And Added 2 New Races."" << endl;
		cout << ""V1.2: Added A Quit Function, And Bug Fixes."" << endl;
		cout << ""V1.3: Added 1 New Engine Upgrade (Racing Intake), And Added The Missing Code For The TTS Racer"" << endl;
		cout << ""V1.4: Added A (gotoplace) Which Goes To A Certain Place In Towns And Made The Fines Have A Less Chance To Get You."" << endl;
		cout << ""V1.5: Added Some Small Stuff And Fixed Some Bugs And Made The Player Get 5000$ At The Start"" << endl;
		cout << ""V1.55: Changed The Fine System To Make it A Bit More 'Realistic'."" << endl;
		cout << ""V1.6BETA: Added A New Mechanics Job, With Random Job Generation(took me 3+ hours btw, so you better like it)"" << endl;
		cout << ""V1.7: Updated The Mechanics Job And Fixed A Few Bugs"" << endl;
		cout << ""V1.75: Updated The Mechanics Job(again)"" << endl;
		cout << ""V1.8: Added A New Car And A New Problem To The Mechanic Shop"" << endl;
		cout << ""V1.85: Changed And Fixed A Couple Of Stuff"" << endl;
		cout << ""V1.9: Released On PasteBin"" << endl;
	}
	
	if (main == ""fillfuel"")
	{
		if (money > 25)
		{
		cout << ""Successfully Filled Your Fuel to 100% Costed 25$"" << endl;
		fuel = 100;
		money -= 25;
		}
		else
		{
			cout << "" You Dont Have Enough Money You Need 25$"" << endl;
		}
	}
	
	if (main == ""gototown"")
	{
		int randfinespeed = 0;
		
		randfinespeed = 60 + rand()%100;
		cout << "" Choose A Town To Go To"" << endl;
		cout << ""1.RedSeaTown, Fuel Needed 40%"" << endl;
		cout << ""2.BluesTown, Fuel Needed 30%"" << endl;
		string townchoose;
		cin >> townchoose;
		if (townchoose == ""1"")
		{
			if (currenttown == ""RedSeaTown"")
			cout << ""you are already in that town"" << endl;
			else
			{
			if(fuel > 40)
			{
				cout << ""Successfuly Went To Town""<< endl;
				currenttown = ""RedSeaTown"";
				fuel -= 40;
				int y = time(0);
				srand(y);
				int policechance = 1 + rand() % 6;
				
				if (policechance == 2)
				{
					cout << ""Mr "" << name << "" A Ticket Was Brought To You By UPD For Going Over The Speed Limit By "" << randfinespeed << ""KM/H, A Fine Of "" << ""5000"" << ""$ , Please Keep In Mind: If Your Fines Reached Over 30000$ Your Car Will Be Suspended...To Get It Back..You Will Pay 200000$, Licence Plate: "" << carnumber << ""."" << endl;
					fines += 5000;
				}
				else
				{
					
				}
			}
			else
			{
				cout << ""You Dont Have Enough Fuel(you wanna pee in the gas tank?)"" << endl;
			}
			}
		}
			if (townchoose == ""2"")
		{
			if (currenttown == ""BluesTown"")
			{
				cout << ""you are already in that town"" << endl;
			}
			else
			{
			if(fuel > 30)
			{
				cout << ""Successfuly Went To Town""<< endl;
				currenttown = ""BluesTown"";
				fuel -= 30;
				int y = time(0);
				srand(y);
				int policechance = 1 + rand() % 6;
				
				if (policechance == 2)
				{
					cout << ""Mr "" << name << "" A Ticket Was Brought To You By UPD For Going Over The Speed Limit By "" << randfinespeed << ""KM/H, A Fine Of "" << ""5000"" << ""$ , Please Keep In Mind: If Your Fines Reached Over 30000$ Your Car Will Be Suspended...To Get It Back..You Will Pay 200000$, Licence Plate: "" << carnumber << ""."" << endl;
					fines += 5000;
				}
				else
				{
					
				}
			}
			else
			{
				cout << ""You Dont Have Enough Fuel(you wanna pee in the gas tank?)"" << endl;
			}
			}
			
		}
	}
	if (main == ""gotoplace"")
	{
		cout << ""Where Do You Wanna Go?"" << endl;
		if(currenttown == ""RedSeaTown"")
		{
			cout << ""In RedSeaTown,"" << endl;
			cout << ""1.Zino (Casino) Uses 5% Fuel"" << endl;
			int redtownplace;
			cin >> redtownplace;
			if (redtownplace == 1)
			{
				if (fuel > 5)
				{
					cout << ""Successful"" << endl;
					cout << ""Start With 'help'"" << endl;
					currentplace = 1;
				}
				else
				{
					cout << ""Not Enough Fuel"" << endl;
				}
			}
		}
		if (currenttown == ""BluesTown"")
		{
			cout << ""1.MZN Mechanic"" << endl;
			int bluestownplace;
			cin >> bluestownplace;
			if (bluestownplace == 1)
			{
				if (mechanicplace == true)
				{
					currentplace = 2;
					cout << ""Successful"" << endl;
					cout << ""Start With 'help'"" << endl;
				}
				else
				{
					cout << ""You Dont Own The Place"" << endl;
				}
			}
		}
	}
	
	if (main == ""dyno"")
	{
		if (hascar == true)
		{
		cout << enginehp << "" HP"" << endl;
		cout << enginetorque << "" NM"" << endl;
		}
		else
		{
			cout << ""You Dont Have A Car"" << endl << endl;
		}
	}
	
	if (main == ""mycar"")
	{
		if (hascar == true)
		{
		cout << ""Your Current Car Is "" << ""'"" << car << ""'"" << endl;
		cout << endl;
		}
		else {
			cout << ""You Dont Have A Car"" << endl << endl;
		}
	}
	
	if (main == ""myengine"")
	{
		if (hascar == true)
		{
		cout << ""You Have A "" << engine << endl << endl;
		}
		else {
			cout << ""You Dont Have A Car"" << endl << endl;
		}
	}
	
	if (main == ""allcars"")
	{
		cout << ""Toyota Supra MK4"" << endl;
		cout << ""BMW E36"" << endl;
		cout << ""BMW M5"" << endl;
		cout << ""Datsun100A"" << endl;
		cout << ""TTS Racer"" << endl;
		cout << endl;
	}
	
	if (main == ""allengines"")
	{
		cout << ""2VZ I6"" << endl;
		cout << ""56B I5"" << endl;
		cout << ""SST V8"" << endl;
		cout << ""STA I4"" << endl;
		cout << ""TTS V12"" << endl;
		cout << endl;
	}
	
	if (main == ""sellcar"")
	{
		if (hascar == true)
		{
			cout << ""Successfuly Sold The Car For "" << carprice << ""$"" << endl << endl;
			money += carprice;
			hascar = false;
			car = ""None"";
			engine = ""None"";
		}
		else
		{
			cout << ""You Dont Have A Car(you wanna sell air?)"" << endl << endl;
		}
	}
	
	if (main == ""enginechange"")
	{
		cout << ""this feature was removed temporarly to fix some huge bugs"" << endl;
	}
	if (main == ""quit"")
	{
		cout << ""Are You Sure? ): (you will lose all progress!)"" << endl;
		cout << ""Y/N"" << endl;
		string dec;
		cin >> dec;
		if (dec == ""Y"" or dec == ""y"")
		{
			return 0;
		}
	}
	
	if (main == ""engineupgrade"")
	{
		if (hascar == true)
		{
		cout << ""Upgrade Choices ( or type back to go back):"" << endl;		cout << ""1. Turbo = 12000$"" << endl;
		cout << ""2. Racing Camshaft = 7800$"" << endl;
		cout << ""3. Racing CrankShaft = 8000$"" << endl;
		cout << ""4. Racing Piston Conrods = 10000$"" << endl;
		cout << ""5.Racing Flywheel = 9500$"" << endl;
		cout << ""6.Racing Sparkplugs = 2500$"" << endl;
		cout << ""7.Racing Distributer = 3500$"" << endl;
		cout << ""8.Racing Intake = 5000$"" << endl;
		string engineupgrade;
		cin >> engineupgrade;
		
		if (engineupgrade == ""1"")
		{
			if (turboinstalled == false)
			{
				if (money >= 12000)
				{
					turboinstalled = true;
					cout << ""Successful"" << endl;
					enginehp += 50;
					enginetorque += 150;
					carprice += 14000;
					totalpartsinstalled += 1;
					money -= 12000;
				}
				else
				{
					cout << ""You Dont Have Enough Money"" << endl;
				}
			}
			else
			{
				cout << ""You Already Have A Turbo"" << endl;
			}
		}
		if (engineupgrade == ""2"")
		{
			if (racingcmsinstalled == false)
			{
				if (money >= 7800)
				{
					racingcmsinstalled = true;
					cout << ""Successful"" << endl;
					enginehp += 70;
					enginetorque += 65;
					totalpartsinstalled += 1;
					carprice += 9000;
					money -= 7800;
				}
				else
				{
					cout << ""You Dont Have Enough Money"" << endl;
				}
			}
			else
			{
				cout << ""You Already Have A Racing Camshaft"" << endl;
			}
		}
		
		if (engineupgrade == ""3"")
		{
			if (racingcrsinstalled == false)
			{
				if (money >= 8000)
				{
					racingcrsinstalled = true;
					cout << ""Successful"" << endl;
					enginehp += 25;
					enginetorque += 80;
					totalpartsinstalled += 1;
					carprice += 9000;
					money -= 8000;
				}
				else
				{
					cout << ""You Dont Have Enough Money"" << endl;
				}
			}
			else
			{
				cout << ""You Already Have A Racing Crankshaft"" << endl;
			}
		}
		
		if (engineupgrade == ""4"")
		{
			if (racingpistonconrodinstalled == false)
			{
				if (money >= 10000)
				{
					racingpistonconrodinstalled = true;
					cout << ""Successful"" << endl;
					enginehp += 35;
					enginetorque += 140;
					carprice += 11500;
					totalpartsinstalled += 1;
					money -= 10000;
				}
				else
				{
					cout << ""You Dont Have Enough Money"" << endl;
				}
			}
			else
			{
				cout << ""You Already Have A Racing Piston Conrod"" << endl;
			}
		}
		
		if (engineupgrade == ""5"")
		{
			if (racingflywheelinstalled == false)
			{
				if (money >= 9500)
				{
					racingflywheelinstalled = true;
					cout << ""Successful"" << endl;
					enginehp += 10;
					enginetorque += 160;
					totalpartsinstalled += 1;
					carprice += 11000;
					money -= 9500;
				}
				else
				{
					cout << ""You Dont Have Enough Money"" << endl;
				}
			}
			else
			{
				cout << ""You Already Have A Racing Flywheel"" << endl;
			}
		}
		
		if (engineupgrade == ""6"")
		{
			if (racingsparkplugsinstalled == false)
			{
				if (money >= 2500)
				{
					racingsparkplugsinstalled = true;
					cout << ""Successful"" << endl;
					enginehp += 5;
					enginetorque += 30;
					carprice += 2550;
					totalpartsinstalled += 1;
					money -= 2500;
				}
				else
				{
					cout << ""You Dont Have Enough Money"" << endl;
				}
			}
			else
			{
				cout << ""You Already Have Racing Sparkplugs"" << endl;
			}
		}
		
		if (engineupgrade == ""7"")
		{
			if (racingdistributerinstalled == false)
			{
				if (money >= 3500)
				{
					racingdistributerinstalled = true;
					cout << ""Successful"" << endl;
					enginehp += 10;
					enginetorque += 50;
					carprice += 3600;
					totalpartsinstalled += 1;
					money -= 3500;
				}
				else
				{
					cout << ""You Dont Have Enough Money"" << endl;
				}
			}
			else
			{
				cout << ""You Already Have A Racing Distributer"" << endl;
			}
		}
		if (engineupgrade == ""8"")
		{
			if (racingintakeinstalled == false)
			{
				if (money >= 5000)
				{
					racingintakeinstalled = true;
					cout << ""Successful"" << endl;
					enginehp += 30;
					enginetorque += 80;
					carprice += 5100;
					totalpartsinstalled += 1;
					money -= 5000;
				}
				else
				{
					cout << ""You Dont Have Enough Money"" << endl;
				}
			}
			else
			{
				cout << ""You Already Have A Racing Distributer"" << endl;
			}
		}
		}
	else
	{
		cout << ""You Dont Have A Car"" << endl;
	}
	}
	
	if (main == ""buycar"")
	{
		cout << ""Welcome To SSU Dealership Which Car Would You Like To Buy?"" << endl;
		cout << ""1. Toyota Supra MK4, Engine: 2VZ I6 250HP = 120K"" <<endl;
		cout << ""2. BMW E36, Engine: 56B I5 350HP = 250K"" << endl;
		cout << ""3. BMW M5, Engine: SST V8 600HP = 500K"" << endl;
		cout << ""4.Datsun 100A, Engine: STA I4 150HP = 60K"" << endl;
		cout << ""5.TTS Racer, Engine: TTS V12 1200HP = 3M"" << endl;
		string carbuy;
		cin >> carbuy;
		
		if (carbuy == ""1"")
		{
			if (hascar == true)
			{
				cout << ""You Cant Buy A Car If You Already Have Another Car"" << endl << endl;
			}
			else
			{
				if (money >= 120000)
				{
					cout << ""Succesfully Bought 'Toyota Supra MK4"" << endl;
					money -= 120000;
					car = ""Toyota Supra MK4"";
					engine = ""2VZ I6"";
					cout << endl;
					enginetorque = 500;
					enginehp = 250;
					turboinstalled = false;
					racingcmsinstalled = false;
					racingpistonconrodinstalled = false;
					racingflywheelinstalled = false;
					racingcrsinstalled = false;
					racingdistributerinstalled = false;
					racingsparkplugsinstalled = false;
					racingintakeinstalled = false;
					hascar = true;
					carprice = 100000;
				}
				else
				{
					cout << ""You Dont Have Enough Money"" << endl;
					cout << "" You Have "" << money << ""$"" << "" You Need "" << 120000 - money << ""$"" << endl << endl;
				}
			}
		}
		if (carbuy == ""2"")
		{
			if (hascar == true)
			{
				cout << ""You Cant Buy A Car If You Already Have Another Car"" << endl << endl;
			}
			else
			{
				if (money >= 250000)
				{
					cout << ""Succesfully Bought 'BMW E36"" << endl;
					money -= 120000;
					car = ""BMW E36"";
					engine = ""56B I5"";
					cout << endl;
					enginetorque = 750;
					enginehp = 350;
					turboinstalled = false;
					racingcmsinstalled = false;
					racingpistonconrodinstalled = false;
					racingflywheelinstalled  = false;
					racingcrsinstalled = false;
					racingdistributerinstalled = false;
					racingsparkplugsinstalled = false;
					racingintakeinstalled = false;
					hascar = true;
					carprice = 220000;
				}
				else
				{
					cout << ""You Dont Have Enough Money"" << endl;
					cout << "" You Have "" << money << ""$"" << "" You Need "" << 250000 - money << ""$"" << endl << endl;
				}
			}
		}
		
		if (carbuy == ""3"")
		{
			if (hascar == true)
			{
				cout << ""You Cant Buy A Car If You Already Have Another Car"" << endl << endl;
			}
			else
			{
				if (money >= 500000)
				{
					cout << ""Succesfully Bought 'BMW M5"" << endl;
					money -= 120000;
					car = ""BMW M5"";
					engine = ""SST V8"";
					cout << endl;
					enginetorque = 900;
					enginehp = 600;
					turboinstalled = false;
					racingcmsinstalled = false;
					racingpistonconrodinstalled = false;
					racingflywheelinstalled = false;
					racingcrsinstalled = false;
					racingdistributerinstalled = false;
					racingsparkplugsinstalled = false;
					racingintakeinstalled = false;
					hascar = true;
					carprice = 450000;
				}
				else
				{
					cout << ""You Dont Have Enough Money"" << endl;
					cout << "" You Have "" << money << ""$"" << "" You Need "" << 500000 - money << ""$"" << endl << endl;
				}
			}
		}
		if (carbuy == ""4"")
		{
			if (hascar == true)
			{
				cout << ""You Cant Buy A Car If You Already Have Another Car"" << endl << endl;
			}
			else
			{
				if (money >= 60000)
				{
					cout << ""Succesfully Bought 'Datsun 100A"" << endl;
					money -= 60000;
					car = ""Datsun 100A"";
					engine = ""STA I4"";
					cout << endl;
					enginetorque = 250;
					enginehp = 150;
					turboinstalled = false;
					racingcmsinstalled = false;
					racingpistonconrodinstalled = false;
					racingflywheelinstalled = false;
					racingcrsinstalled = false;
					racingdistributerinstalled = false;
					racingsparkplugsinstalled = false;
					racingintakeinstalled = false;
					hascar = true;
					carprice = 55000;
				}
				else
				{
					cout << ""You Dont Have Enough Money"" << endl;
					cout << "" You Have "" << money << ""$"" << "" You Need "" << 60000 - money << ""$"" << endl << endl;
				}
			}
		}
		if (carbuy == ""5"")
		{
			if (hascar == true)
			{
				cout << ""You Cant Buy A Car If You Already Have Another Car"" << endl << endl;
			}
			else
			{
				if (money >= 3000000)
				{
					cout << ""Succesfully Bought 'TTS Racer"" << endl;
					money -= 60000;
					car = ""TTS Racer"";
					engine = ""TTS V12"";
					cout << endl;
					enginetorque = 2000;
					enginehp = 1200;
					turboinstalled = false;
					racingcmsinstalled = false;
					racingpistonconrodinstalled = false;
					racingflywheelinstalled = false;
					racingcrsinstalled = false;
					racingdistributerinstalled = false;
					racingsparkplugsinstalled = false;
					racingintakeinstalled = false;
					hascar = true;
					carprice = 2500000;
				}
				else
				{
					cout << ""You Dont Have Enough Money"" << endl;
					cout << "" You Have "" << money << ""$"" << "" You Need "" << 60000 - money << ""$"" << endl << endl;
				}
			}
		}
			
	}
	
	
	if (main == ""race"")
	{
		 if (hascar == true)
		 {
		 bool morehp = false;
		 bool moretorque = false;
		cout << ""Choose Your Opponet"" << endl;
		cout << ""1. William (Mazda R5 210 hp 500NM) bet is 1000$"" << endl;
		cout << ""2. Jack (Ford GT 300HP 700NM) bet is 3000$"" << endl;
		cout << ""3. Ali (Supra MK4 700HP 1200NM) bet is 8000$"" <<
		endl;
		cout << ""4.Yousef (Skyline GZEDITON 1200HP 2200NM) bet is 20000$"" << endl;
		cout << ""5.Jason (Miata 2000 200HP 220NM) bet is 500$"" << endl;
		string racechoose;
		cin >> racechoose;
		if (racechoose == ""1"")
		{
		totalraces += 1;
		if (enginehp > 210)
		{
			morehp = true;
		}
		if (enginetorque > 500)
		{
			moretorque = true;
		}
		if (moretorque == true && morehp == true)
		{
			cout << ""William: Well....Congrats, Here Is The 1000$ as Promised"" << endl;
			money += 1000;
			cout << ""Your Current Balance is "" << money << ""$"" << endl;
			totalwinnedraces += 1;
		}
		else if (moretorque == true && morehp == false or moretorque == false && morehp == true)
		{
			int x = time(0);
			srand(x);
			int winningchance = 1 + rand() % 2;
			
			if(winningchance == 2)
			{
				cout << ""William: Well....Congrats, Here Is The 1000$ as Promised"" << endl;
			money += 1000;
			cout << ""Your Current Balance is "" << money << ""$"" << endl << endl;
			totalwinnedraces += 1;
			}
			else
			{
				cout << ""You Lost 1000$...Try To Make Your Car Better to Win"" << endl;
				money -= 1000;
				cout << endl;
			}
		}
		else if (moretorque == false && morehp == false)
		{
			cout << ""You Lost 1000$...Try To Make Your Car Better to Win"" << endl;
				money -= 1000;
				cout << endl;
		}
	}
	if (racechoose == ""2"")
	{
		totalraces += 1;
		if (enginehp > 300)
		{
			morehp = true;
		}
		if (enginetorque > 700)
		{
			moretorque = true;
		}
		if (moretorque == true && morehp == true)
		{
			cout << ""Jack: Well....Congrats, Here Is The 3000$ as Promised"" << endl;
			money += 3000;
			cout << ""Your Current Balance is "" << money << ""$"" << endl;
			totalwinnedraces += 1;
		}
		else if (moretorque == true && morehp == false or moretorque == false && morehp == true)
		{
			int x = time(0);
			srand(x);
			int winningchance = 1 + rand() % 2;
			
			if(winningchance == 2)
			{
				cout << ""Jack: Well....Congrats, Here Is The 3000$ as Promised"" << endl;
			money += 3000;
			cout << ""Your Current Balance is "" << money << ""$"" << endl << endl;
			totalwinnedraces += 1;
			}
			else
			{
				cout << ""You Lost 3000$...Try To Make Your Car Better to Win"" << endl;
				money -= 3000;
				cout << endl;
			}
		}
		else if (moretorque == false && morehp == false)
		{
			cout << ""You Lost 3000$...Try To Make Your Car Better to Win"" << endl;
				money -= 3000;
				cout << endl;
		}
	}
	
	if (racechoose == ""3"")
	{
		totalraces += 1;
		if (enginehp > 700)
		{
			morehp = true;
		}
		if (enginetorque > 1200)
		{
			moretorque = true;
		}
		if (moretorque == true && morehp == true)
		{
			cout << ""Ali: Well....Congrats, Here Is The 8000$ as Promised"" << endl;
			money += 8000;
			cout << ""Your Current Balance is "" << money << ""$"" << endl;
			totalwinnedraces += 1;
		}
		else if (moretorque == true && morehp == false or moretorque == false && morehp == true)
		{
			int x = time(0);
			srand(x);
			int winningchance = 1 + rand() % 2;
			
			if(winningchance == 2)
			{
				cout << ""Ali: Well....Congrats, Here Is The 8000$ as Promised"" << endl;
			money += 8000;
			cout << ""Your Current Balance is "" << money << ""$"" << endl << endl;
			totalwinnedraces += 1;
			}
			else
			{
				cout << ""You Lost 8000$...Try To Make Your Car Better to Win"" << endl;
				money -= 8000;
				cout << endl;
			}
		}
		else if (moretorque == false && morehp == false)
		{
			cout << ""You Lost 8000$...Try To Make Your Car Better to Win"" << endl;
				money -= 8000;
				cout << endl;
		}
	}
	if (racechoose == ""4"")
	{
		totalraces += 1;
		if (enginehp > 1200)
		{
			morehp = true;
		}
		if (enginetorque > 2200)
		{
			moretorque = true;
		}
		if (moretorque == true && morehp == true)
		{
			cout << ""Yousef: Well....Congrats, Here Is The 20000$ as Promised"" << endl;
			money += 20000;
			cout << ""Your Current Balance is "" << money << ""$"" << endl;
			totalwinnedraces += 1;
		}
		else if (moretorque == true && morehp == false or moretorque == false && morehp == true)
		{
			int x = time(0);
			srand(x);
			int winningchance = 1 + rand() % 2;
			
			if(winningchance == 2)
			{
				cout << ""Yousef: Well....Congrats, Here Is The 20000$ as Promised"" << endl;
			money += 20000;
			cout << ""Your Current Balance is "" << money << ""$"" << endl << endl;
			totalwinnedraces += 1;
			}
			else
			{
				cout << ""You Lost 20000$...Try To Make Your Car Better to Win"" << endl;
				money -= 20000;
				cout << endl;
			}
		}
		else if (moretorque == false && morehp == false)
		{
			cout << ""You Lost 20000$...Try To Make Your Car Better to Win"" << endl;
				money -= 20000;
				cout << endl;
		}
	}
	if (racechoose == ""5"")
	{
		totalraces += 1;
		if (enginehp > 200)
		{
			morehp = true;
		}
		if (enginetorque > 220)
		{
			moretorque = true;
		}
		if (moretorque == true && morehp == true)
		{
			cout << ""Jason: Well....Congrats, Here Is The 500$ as Promised"" << endl;
			money += 500;
			cout << ""Your Current Balance is "" << money << ""$"" << endl;
			totalwinnedraces += 1;
		}
		else if (moretorque == true && morehp == false or moretorque == false && morehp == true)
		{
			int x = time(0);
			srand(x);
			int winningchance = 1 + rand() % 2;
			
			if(winningchance == 2)
			{
				cout << ""Jason: Well....Congrats, Here Is The 500$ as Promised"" << endl;
			money += 500;
			cout << ""Your Current Balance is "" << money << ""$"" << endl << endl;
			totalwinnedraces += 1;
			}
			else
			{
				cout << ""You Lost 500$...Try To Make Your Car Better to Win"" << endl;
				money -= 500;
				cout << endl;
			}
		}
		else if (moretorque == false && morehp == false)
		{
			cout << ""You Lost 500$...Try To Make Your Car Better to Win"" << endl;
				money -= 500;
				cout << endl;
		}
	}
	
	
	}
	else
	{
		cout << ""You Dont Have A Car(you wanna race on foot?)"" << endl;
	}
}
}
}
}"
pjJLnEin,SpendingSimulatorV6.6.1,Gamerboy0936,C++,Monday 27th of October 2025 02:47:17 PM CDT,"	//if you have any small suggestions for the game tell me in the comments!
	#include<iostream>
using namespace std;

int main()
{
cout << ""Spending Simulator V6.6.1 Type help To See The   Commands! And Type howtoplay To See How To Play"" << endl;
//variables
int money = 30; //ingame money
int food = 0;
int property = 0;
int otherstuff = 0;
int weapons = 0;
int miner = 1;
int hasfridge = 0;
int hashouse = 0;
int hashanger =0;
int hasnuke = 0;
int hascar = 0;
int hasbunker = 0;
int haswater = 0;
int hasfood = 0;
int hasultranuke = 0;
//achievements
bool propertylover = true; //get 100 propertys
bool caseoh = false; //get 100 food
bool dangerousfella = false; //get 100 weapons
//********
bool everything = false;
bool quit = false;
string main;
//loop hole
while ( quit == false )
{
	//other
	if (property > 99 and propertylover == false)
	{
		propertylover = true;
		cout << ""Achievement Unlocked"" << endl;
	}
	if (food > 99 and caseoh == false)
	{
		caseoh = true;
		cout << ""Achievement Unlocked"" << endl;
	}
	if (weapons > 99 and dangerousfella == false)
	{
		dangerousfella = true;
		cout << ""Achievement Unlocked"" << endl;
	}
	//mainstuff
	cin >> main;
	if(main == ""help"" )
	{
	 cout << ""***********"" << endl;
	 cout << ""checkminer (Check Your Miner's Level)"" << endl;
	 cout << ""quit (Stops The Program)"" << endl;
	 cout << ""checkother (Quantity Of Other Stuff)"" << endl;
	 cout << ""upgradelist (Miner Upgrade Levels)"" << endl;
	 cout << ""nukeworld (End Humanity)"" << endl;
	 cout << ""nukesolarsystem (Ends The Solar System)"" << endl;
	 cout << ""upgrade (Upgrade Your Miner)"" << endl;
	 cout << ""gm (Get Money)"" << endl;
	 cout << ""checkfood (Quantity Of Food)"" << endl;
	 cout << ""checkproperty (Quantity Of Propertys)"" << endl;
	 cout << ""checkweapons (Quantity Of Weapons)"" << endl;
	 cout << ""itemlist (All The Items InGame)"" << endl;
	 cout << ""checkmoney (How Much Money You Have)"" << endl;
	 cout << ""buy(itemname)"" << endl;
	 cout << ""info"" << endl;
	 cout << ""achievements"" << endl;
	 cout << ""updates (Shows Update History)"" << endl;
	 cout << ""***********"" << endl;
	}
	if (main ==""updates"")
	{
		cout << ""V4.0.0: Added A Updates Menu And Added Reason For Buyables And Added A New Hanger And Fridge And Made A New Version System!!!"" << endl;
		cout << ""V4.5.0: Fixed A Writing Problem Where The (2xmoney) was Still Here Added A New Upgrade Level(7) And Now You Can See What Each Level Gives You!! With(upgradelist), And Now (checkweapons) Tells You If You Have A Nuke!! Thats All Hope You Guys Have Fun!!!!!"" << endl;
		cout << ""V5.0.0: Added New Buyables And A Car Which Is Important! And Added A Bunker For You To Survive The Explosion And Now (checkproperty) Tells You If U Have A Bunker, Anyways Have Fun!!!!"" << endl;
		cout << ""V5.5.0: Fixed A Bug Where When You Upgrade To Level 6 It Gives You Level 2, And Fixed Writing Problems In Ending 1!!"" << endl;
		cout << ""V6.0.0: Added A Third Ending And Fixed A Bug Where If You Have 1$ Under The Item Price It Will Buy it!(took me like 2 hours) And Did Some Tuning In The Ending Scenes!!"" << endl;
		cout << ""V6.5.0: Added A 'Quit' To Quit The Game If You Want And Did Some Other Small Things(i know its nothing much but i ran out of ideas)"" << endl;
		cout << ""V6.5.1: Fixed A Bug Where You Cant Upgrade To Level 2!"" << endl;
		cout << ""V6.6: Added A Secret Ending!!"" << endl;
		cout << ""V6.6.1: Made A Simple Change In How The While Loop Functions, Fixed A Couple Of Bugs And Some Missing Text, And Added Achievements!, And Changed The Help Menu And Also Made The (getmoney) Command To (gm), Have Fun!"" << endl;
	}
	if (main ==""upgradelist"")
	{
	cout << ""Level 1 = +1$"" << endl << ""Level 2 = +10$"" << endl << ""Level 3 = +100$"" << endl << ""Level 4 = +1000$"" << endl << ""Level 5 = +10000$"" << endl << ""Level 6 = +100000$"" << endl << ""Level 7 = +300000$"" << endl;
	}
	if (main ==""quit"")
	{
		cout << ""Are You Sure You Wanna Quit? y/n"" << endl;
		string quit;
		cin >> quit;
		if (quit == ""y"")
		{
			cout << ""Hope You Had Fun!"" << endl;
			return 0;
		}
	}
	if (main == ""howtoplay"")
	{
		cout << ""Your Goal Is To Buy The Nuke To Explode the Earth, Try To Buy Properties Or Food Or Weapons Anyways Hope You Have Fun! And Dont Forget To Blow Up The Earth!!!(i will add more buyables in the future or make the game easier!) You Will Start With  30 $"" << endl;
	}
	if (main == ""checkminer"")
	{
		cout << ""Your Miner Is Level "" << miner << endl;
	}
	if (main == ""achievements"")
	{
		cout << ""0 = False , 1 = True"" << endl;
		cout << ""Property Lover = "" << propertylover << endl;
		cout << ""Dangerous Fella = "" << dangerousfella << endl;
		cout << ""Am I Caseoh? = "" << caseoh << endl;
	}
if (main ==""gm"")
{
 if (miner ==1)
 {
 	money = money+1;
 cout << ""You Now Have "" << money << "" $"" << endl;
 }
 if (miner ==2)
 {
 	money = money+10;
 	cout << ""You Now Have "" << money << "" $"" << endl;
 }
 if (miner ==3)
 {
 	money = money+100;
 	cout << ""You Now Have "" << money << "" $"" << endl;
 }
 if (miner ==4)
 {
 	money = money+1000;
 	cout << ""You Now Have "" << money << "" $"" << endl;
 }
 if (miner ==5)
 {
 	money = money+10000;
 	cout << ""You Now Have "" << money << "" $"" << endl;
 }
 if ( miner ==6)
 {
 	money = money+100000;
 	cout << ""You Now Have "" << money << "" $"" << endl;
 }
 if (miner ==7)
 {
 	money = money+300000;
 	cout << ""You Now Have "" << money << "" $"" << endl;
 }
}
if (main == ""upgrade"")
{
	cout << ""Your Current Miner Is Level "" << miner << endl;
	cout << ""Would You Like To Upgrade? (y/n)"" << endl;
	string upgrade;
	cin >> upgrade;
	if (upgrade == ""y"")
	{
		cout << ""What Level Would You Like To Upgrade to?(type the number u want to upgrade to)"" << endl;
		cout << ""Level 2 = 50$"" << endl << ""Level 3 = 300$"" << endl << ""Level 4 = 3000$"" << endl << ""Level 5 = 13000$"" << endl << ""Level 6 = 150000$"" << endl << ""Level 7 = 650000$"" << endl;
		int lvlupgrade;
		cin >> lvlupgrade;
		if (lvlupgrade == 2)
		{
			if ( miner <= 2)
			{
			if (money >= 50)
			{
				miner = 2;
				money = money-50;
				cout << ""Successful"" << endl;
			}
			else
			{
				cout << ""Not Enough Money!"" << endl;
			}
			}
		}
				if (lvlupgrade == 3)
		{
			if ( miner <= 3)
			{
			if (money >= 300)
			{
				miner = 3;
				money = money-300;
				cout << ""Successful"" << endl;
			}
			else
			{
				cout << ""Not Enough Money!"" << endl;
			}
			}
		}
				if (lvlupgrade == 4)
		{
			if ( miner <= 4)
			{
			if (money >=  3000)
			{
				miner = 4;
				money = money-3000;
				cout << ""Successful"" << endl;
			}
			else
			{
				cout << ""Not Enough Money!"" << endl;
			}
			}
		}
				if (lvlupgrade == 5)
		{
			if ( miner <= 5)
			{
			if (money >= 13000)
			{
				miner = 5;
				money = money-13000;
				cout << ""Successful"" << endl;
			}
			else
			{
				cout << ""Not Enough Money!"" << endl;
			}
			}
		}
				if (lvlupgrade == 6)
		{
			if ( miner <= 6)
			{
			if (money >= 150000)
			{
				miner = 6;
				money = money-150000;
				cout << ""Successful"" << endl;
			}
			else
			{
				cout << ""Not Enough Money!"" << endl;
			}
			}
		}
				if (lvlupgrade == 7)
		{
			if ( miner <= 7)
			{
			if (money >= 650000)
			{
				miner = 7;
				money = money-650000;
				cout << ""Successful"" << endl;
			}
			else
			{
				cout << ""Not Enough Money!"" << endl;
			}
			}
		}
	}
}
if (main ==""checkweapons"")
{
	cout << ""You Have "" << weapons << "" Weapons"" << endl;
	if (hasnuke == 1)
	{
		cout << ""You Have A Nuke!!"" << endl;
	}
}
if (main == ""checkother"")
{
	cout << ""You Have "" << otherstuff << "" Other Stuff!"" << endl;
}
if (main == ""checkproperty"")
{
	cout << ""You Have "" << property << "" Properties"" << endl;
	if(hasbunker == 1)
	{
		cout << ""You Have A Bunker!""<< endl;
	}
}
if( main == ""checkmoney"")
{
 cout << money << "" $"" << endl;
}
if ( main == ""checkfood"")
{
 cout << ""You Have "" << food << "" Consumables"" << endl;
}
if (main == ""itemlist"")
{
 cout << ""Burger = 7$"" << endl << ""House = 5250$"" << endl << ""Coffee = 5$"" << endl << ""ULTRAWEAPON = 1M$"" << endl << ""Nuke = 3M$"" << endl << ""Hanger = 1M$"" << endl <<""Fridge = 1000$"" << endl << ""Car = 2500$"" << endl << ""Bunker = 4M$"" << endl << ""Water = 10$"" << endl << ""UltraNuke = 50M$(destroys the solarsystem)"" << endl;
}
if (main == ""nukesolarsystem"")
{
	if (hasultranuke == 1)
	{
		cout << ""YOU NUKED THE SOLARSYSTEM"" << endl << ""End Of Game, Game Made By TarekJwehra"" << endl << ""Ending 3 out of 4"" << endl;
		return 0;
	}
	else
	{
		cout << ""You Dont Have The Ultra Nuke!"" << endl;
	}
}
if (main == ""buyburger"")
{
 if (money >= 7)
 {
 	if (hasfridge == 1)
 	{
 food = food+1;
 money = money-7;
 hasfood = 1;
 cout << ""Successful!"" << endl;
 	}
 	else
 	{
 		cout << ""You Dont Have A Fridge"" << endl;
 	}
}
else
{
cout << ""Not Enough Money!"" << endl;
}
}
if (main == ""buywater"")
{
	if (money >= 10)
	{
		if (hasfridge == 1)
		{
		haswater = 1;
		money = money-10;
		food = food+1;
		cout << ""Successful"" << endl;
		}
		else 
		{
			cout << ""You Dont Have A Fridge"" << endl;
		}
	}
	else
	{
		cout << ""Not Enough Money!!"" << endl;
	}
}
if (main ==""buybunker"")
{
	if (money >= 4000000)
	{
		if (hasfood == 1)
		{
			if (hascar == 1)
			{
				if (haswater == 1)
				{
					hasbunker = 1;
					property = property+1;
					money = money-4000000;
					cout << ""Successful!"" << endl;
				}
				else
				{
					cout << ""You Dont Have Water!!"" << endl;
				}
			}
			else
			{
				cout << ""You Dont Have A Car!"" << endl;
			}
		}
		else
		{
			cout <<""You Dont Have Food!!"" << endl;
		}
	}
	else
	{
		cout << ""Not Enough Money!"" << endl;
	}
}
if (main == ""buycar"")
{
	if (money >= 25000)
	{
		if (hashouse == 1)
		{
		money = money-25000;
		hascar = 1;
		otherstuff = otherstuff+1;
		cout << ""Successful"" << endl;
		}
		else
		{
			cout << ""You Dont Have A House!!"" << endl;
		}
	}
	else
	{
	cout << ""You Dont Have Enough Money!!!"" << endl;
	}
}
if (main == ""buyfridge"")
{
	if (money >= 1000)
	{
		if (hashouse == 1)
		{
			if (hascar == 1)
			{
			otherstuff = otherstuff+1;
			hasfridge = 1;
			money = money-1000;
			cout << ""Successful"" << endl;
			}
			else
			{
				cout << ""You Dont Have A Car!!!"" << endl;
			}
		}
		else
		{
			cout << ""You Dont Have A House!"" << endl;
		}
	}
	else
	{
		cout << ""Not Enough Money!"" << endl;
	}
}
if (main == ""nukeworld"")
{
	if (hasnuke == 1)
	{
		if (hasbunker == 1)
		{
		cout<< ""YOU HAVE EXPLODED EARTH AND SURVIVED!!"" << endl << ""End Of Game, Game Made By TarekJwehra!"" << endl << ""Ending 2 out of 4"" << endl;
		return 0;
		}
		else
		{
			cout << ""YOU HAVE EXPLODED EARTH AND DIED!!"" << endl << ""End Of Game, Game Made By TarekJwehera!"" << endl << ""Ending 1 out of 4"" << endl;
			return 0;
		}
	}
	else
	{
		cout << ""You Dont Have A Nuke(yet)"" << endl;
	}
}
if (main == ""(TMN)edit(money)"")
{
	cout << ""money = "" << endl;
	int editcash;
	cin >> editcash;
	money = editcash;
}

if (main == ""buynuke"")
{
	if (money >= 3000000)
	{
		if(hashanger == 1)
		{
		weapons = weapons+1;
		money = money-3000000;
		hasnuke = 1;
		cout << ""Successful"" << endl;
		}
		else
		{
			cout << ""You Dont Have A Hanger!"" << endl;
		}
	}
	else
	{
		cout << ""Not Enough Money!"" << endl;
	}
}
if (main == ""(TMN)task(simulator.exe).Stop()"")
	{
		cout << ""You Did it......No Nuke,No Life,Its All Just A   Simulation......You Dont Even Exist......"" << endl;
		cout << ""Ending ??? out of 4"" << endl;
		return 0;
	}
if (main == ""buyhouse"")
{
if ( money >= 5250)
{
 property = property+1;
 hashouse = 1;
 money = money-5250;
 cout << ""Successful!"" << endl;
}
else
{
 cout << ""Not Enough Money!"" << endl;
}
}
if (main == ""buyhanger"")
{
if ( money >= 1000000)
{
 if (hascar == 1)
 {
 property = property+1;
 hashanger= 1;
 money = money-1000000;
 cout << ""Successful!"" << endl;
 }
 else
 {
 	cout << ""You Dont Have A Car!!"" << endl;
 }
}
else
{
 cout << ""Not Enough Money!"" << endl;
}
}
if ( main == ""info"")
{
	cout <<""This is A Small Game Made By(TarekJwehra), About Buying Items And Blowing Up The Earth And Upgrade Your Miner!!"" << endl;
}
if (main == ""buyultranuke"")
{
	if (money >= 50000000)
	{
		if (hashanger == 1)
		{
			money = money-50000000;
			weapons = weapons+1;
			hasultranuke = 1;
			cout << ""Successful"" << endl;
		}
		else
		{
			cout << ""You Dont Have A Hanger"" << endl;
		}
	}
	else
	{
		cout << ""Not Enough Money!"" << endl;
	}
}
if (main == ""buycoffee"")
{
 if (money >= 5)
 {
 	if (hasfridge == 1)
 	{
 otherstuff = otherstuff+1;
 money = money-5;
  cout << ""Successful!"" << endl;
 	}
 	else
 	{
 		cout << ""You Dont Have A Fridge"" << endl;
 	}
 }
 else
 {
  cout << ""Not Enough Money!"" << endl;
 }
}
if(main==""buyultraweapon"")
{
 if (money >= 1000000)
 {
  if (hashanger == 1)
  {
  weapons = weapons+1;
  money = money-1000000;
  cout << ""Succcessful"" << endl;
  }
  else
  {
  	cout << ""You Dont Have A Hanger!"" << endl;
  }
 }
 else
 {
  cout << ""Not Enough Money!"" << endl;
 }
}
} 
}
//have fun playing my game!!
//Made By Gamerboy aka TarekJwehra
//App Used: Cxxdroid"
SDtiKRTx,Tick_Tack_Toe,Pinhas2001,Lua,Monday 27th of October 2025 02:13:06 PM CDT,"-- Wrap monitor
local monitor = peripheral.wrap(""monitor_1"")
monitor.clear()
monitor.setTextScale(2)

-- Board setup
local board = {
    {"" "","" "","" ""},
    {"" "","" "","" ""},
    {"" "","" "","" ""}
}

local currentPlayer = ""X""
local colorsMap = {X = colors.red, O = colors.blue}

-- Monitor dimensions
local width, height = monitor.getSize()
local topMargin = 3
local cellWidth = math.floor(width / 3)
local cellHeight = math.floor((height - topMargin) / 3)

-- Draw the grid and board
local function drawBoard()
    monitor.clear()
    monitor.setTextColor(colors.white)
    monitor.setCursorPos(1,1)
    monitor.write(""=== Tic-Tac-Toe ==="")

    -- Draw grid lines
    for i = 1, 2 do
        -- Vertical lines
        local x = i * cellWidth + 1
        for y = topMargin, height do
            monitor.setCursorPos(x, y)
            monitor.write(""|"")
        end
        -- Horizontal lines
        local y = topMargin + i * cellHeight - 1
        monitor.setCursorPos(1, y)
        monitor.write(string.rep(""-"", width))
    end

    -- Draw X and O
    for r = 1, 3 do
        for c = 1, 3 do
            local x = (c - 1) * cellWidth + math.floor(cellWidth / 2)
            local y = topMargin + (r - 1) * cellHeight + math.floor(cellHeight / 2)
            monitor.setCursorPos(x, y)
            monitor.setTextColor(colorsMap[board[r][c]] or colors.white)
            monitor.write(board[r][c])
        end
    end

    -- Display current player
    monitor.setTextColor(colors.white)
    monitor.setCursorPos(1, height)
    monitor.write(""Player ""..currentPlayer..""'s turn     "")
end

-- Check for win
local function checkWin()
    for i=1,3 do
        if board[i][1] ~= "" "" and board[i][1] == board[i][2] and board[i][2] == board[i][3] then return true end
        if board[1][i] ~= "" "" and board[1][i] == board[2][i] and board[2][i] == board[3][i] then return true end
    end
    if board[1][1] ~= "" "" and board[1][1] == board[2][2] and board[2][2] == board[3][3] then return true end
    if board[1][3] ~= "" "" and board[1][3] == board[2][2] and board[2][2] == board[3][1] then return true end
    return false
end

-- Check for draw
local function checkDraw()
    for r=1,3 do
        for c=1,3 do
            if board[r][c] == "" "" then return false end
        end
    end
    return true
end

-- Convert touch coordinates to row/column
local function touchToCell(x, y)
    local col = math.ceil(x / cellWidth)
    local row = math.ceil((y - topMargin + 1) / cellHeight)
    if row < 1 then row = 1 end
    if row > 3 then row = 3 end
    if col < 1 then col = 1 end
    if col > 3 then col = 3 end
    return row, col
end

-- Main loop
drawBoard()
while true do
    local event, side, x, y = os.pullEvent(""monitor_touch"")
    local row, col = touchToCell(x, y)

    if row >= 1 and row <= 3 and col >= 1 and col <= 3 then
        if board[row][col] == "" "" then
            board[row][col] = currentPlayer
            drawBoard()

            if checkWin() then
                monitor.setCursorPos(1, height)
                monitor.setTextColor(colors.green)
                monitor.write(""Player ""..currentPlayer.."" wins!     "")
                break
            elseif checkDraw() then
                monitor.setCursorPos(1, height)
                monitor.setTextColor(colors.yellow)
                monitor.write(""It's a draw!     "")
                break
            else
                currentPlayer = (currentPlayer == ""X"") and ""O"" or ""X""
                drawBoard()
            end
        end
    end
end
"
uPM3wq3M,News Oct27 25,Newscaster0,Email,Monday 27th of October 2025 01:20:54 PM CDT,".‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé1‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé2‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé3‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
T‚Äée‚Äés‚Äét‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äél‚Äée‚Äét‚Äée‚Äé.‚Äé

‚Üì‚Äé

T‚Äér‚Äéu‚Äém‚Äép‚Äé'‚Äés‚Äé ‚ÄéU‚ÄéS‚ÄéC‚ÄéI‚ÄéS‚Äé ‚ÄéS‚Äét‚Äér‚Äée‚Äén‚Äég‚Äét‚Äéh‚Äée‚Äén‚Äés‚Äé ‚ÄéC‚Äéi‚Äét‚Äéi‚Äéz‚Äée‚Äén‚Äés‚Äéh‚Äéi‚Äép‚Äé ‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚ÄéB‚Äée‚Äét‚Äét‚Äée‚Äér‚Äé ‚ÄéA‚Äés‚Äés‚Äéi‚Äém‚Äéi‚Äél‚Äéa‚Äét‚Äée‚Äé ‚ÄéI‚Äém‚Äém‚Äéi‚Äég‚Äér‚Äéa‚Äén‚Äét‚Äés‚Äé
A‚ÄéO‚ÄéC‚Äé ‚ÄéR‚Äéa‚Äél‚Äél‚Äéi‚Äée‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéM‚Äéa‚Äém‚Äéd‚Äéa‚Äén‚Äéi‚Äé:‚Äé ‚Äé‚Äò‚ÄéT‚Äéh‚Äée‚Äéy‚Äé ‚ÄéW‚Äéa‚Äén‚Äét‚Äé ‚ÄéU‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéT‚Äéh‚Äéi‚Äén‚Äék‚Äé ‚ÄéW‚Äée‚Äé ‚ÄéA‚Äér‚Äée‚Äé ‚ÄéC‚Äér‚Äéa‚Äéz‚Äéy‚Äé ‚Äé‚Äî‚Äé ‚ÄéW‚Äée‚Äé ‚ÄéA‚Äér‚Äée‚Äé ‚ÄéS‚Äéa‚Äén‚Äée‚Äé‚Äô‚Äé
A‚Äéa‚Äér‚Äéo‚Äén‚Äé ‚ÄéR‚Äéo‚Äéd‚Äég‚Äée‚Äér‚Äés‚Äé ‚ÄéA‚Äéd‚Äém‚Äéi‚Äét‚Äés‚Äé ‚ÄéP‚Äéa‚Äéc‚Äék‚Äée‚Äér‚Äés‚Äé ‚ÄéF‚Äéa‚Äén‚Äés‚Äé ‚ÄéC‚Äéa‚Äéu‚Äés‚Äée‚Äéd‚Äé ‚ÄéH‚Äéi‚Äém‚Äé ‚Äét‚Äéo‚Äé ‚ÄéM‚Äéa‚Äék‚Äée‚Äé ‚ÄéT‚Äéh‚Äéi‚Äés‚Äé ‚ÄéU‚Äén‚Äée‚Äéx‚Äép‚Äée‚Äéc‚Äét‚Äée‚Äéd‚Äé ‚ÄéM‚Äéo‚Äév‚Äée‚Äé
R‚Äée‚Äép‚Äéo‚Äér‚Äét‚Äé:‚Äé ‚ÄéJ‚Äéa‚Äés‚Äém‚Äéi‚Äén‚Äée‚Äé ‚ÄéC‚Äér‚Äéo‚Äéc‚Äék‚Äée‚Äét‚Äét‚Äé ‚ÄéH‚Äéi‚Äéd‚Äé ‚ÄéS‚Äét‚Äéo‚Äéc‚Äék‚Äé ‚ÄéH‚Äéo‚Äél‚Äéd‚Äéi‚Äén‚Äég‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéM‚Äéa‚Äér‚Äéi‚Äéj‚Äéu‚Äéa‚Äén‚Äéa‚Äé ‚ÄéC‚Äéo‚Äém‚Äép‚Äéa‚Äén‚Äéi‚Äée‚Äés‚Äé
F‚Äéa‚Äér‚Äéa‚Äég‚Äée‚Äé:‚Äé ‚ÄéC‚Äéo‚Äén‚Äév‚Äée‚Äén‚Äée‚Äé ‚ÄéS‚Äép‚Äée‚Äéc‚Äéi‚Äéa‚Äél‚Äé ‚ÄéC‚Äéo‚Äéu‚Äér‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚ÄéI‚Äén‚Äév‚Äée‚Äés‚Äét‚Äéi‚Äég‚Äéa‚Äét‚Äée‚Äé ‚ÄéG‚Äér‚Äéo‚Äéo‚Äém‚Äéi‚Äén‚Äég‚Äé ‚ÄéG‚Äéa‚Äén‚Äég‚Äés‚Äé ‚ÄéC‚Äéo‚Äév‚Äée‚Äér‚Äé-‚Äéu‚Äép‚Äé
B‚Äér‚Äéa‚Äén‚Äéd‚Äéo‚Äén‚Äé ‚ÄéJ‚Äéo‚Äéh‚Äén‚Äés‚Äéo‚Äén‚Äé:‚Äé ‚Äé'‚ÄéW‚Äée‚Äé ‚ÄéD‚Äéo‚Äén‚Äé'‚Äét‚Äé ‚ÄéH‚Äéa‚Äév‚Äée‚Äé ‚ÄéI‚Äél‚Äél‚Äée‚Äég‚Äéa‚Äél‚Äé ‚ÄéA‚Äél‚Äéi‚Äée‚Äén‚Äés‚Äé'‚Äé
F‚Äéa‚Äéc‚Äét‚Äé ‚ÄéC‚Äéh‚Äée‚Äéc‚Äék‚Äé:‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéI‚Äés‚Äé ‚ÄéR‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚ÄéA‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚ÄéR‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéR‚Äée‚Äéa‚Äég‚Äéa‚Äén‚Äé'‚Äés‚Äé ‚ÄéT‚Äér‚Äéa‚Äéd‚Äée‚Äé ‚ÄéR‚Äée‚Äéc‚Äéo‚Äér‚Äéd‚Äé
R‚Äéa‚Äéd‚Äéi‚Äéo‚Äéh‚Äée‚Äéa‚Äéd‚Äé ‚ÄéF‚Äér‚Äéo‚Äén‚Äét‚Äém‚Äéa‚Äén‚Äé ‚ÄéT‚Äéh‚Äéo‚Äém‚Äé ‚ÄéY‚Äéo‚Äér‚Äék‚Äée‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äé ‚Äé'‚ÄéA‚Äéb‚Äés‚Äéo‚Äél‚Äéu‚Äét‚Äée‚Äél‚Äéy‚Äé ‚ÄéN‚Äéo‚Äét‚Äé'‚Äé ‚ÄéP‚Äél‚Äéa‚Äéy‚Äé ‚Äéi‚Äén‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé
W‚ÄéA‚ÄéT‚ÄéC‚ÄéH‚Äé:‚Äé ‚ÄéR‚Äée‚Äéf‚Äés‚Äé ‚ÄéK‚Äén‚Äéo‚Äéc‚Äék‚Äée‚Äéd‚Äé ‚ÄéO‚Äév‚Äée‚Äér‚Äé ‚ÄéD‚Äéu‚Äér‚Äéi‚Äén‚Äég‚Äé ‚ÄéW‚Äéi‚Äél‚Äéd‚Äé ‚ÄéB‚Äér‚Äéa‚Äéw‚Äél‚Äé ‚ÄéB‚Äée‚Äét‚Äéw‚Äée‚Äée‚Äén‚Äé ‚ÄéP‚Äéa‚Äéc‚Äék‚Äée‚Äér‚Äés‚Äé-‚ÄéS‚Äét‚Äée‚Äée‚Äél‚Äée‚Äér‚Äés‚Äé
F‚Äéa‚Äéc‚Äét‚Äé ‚ÄéC‚Äéh‚Äée‚Äéc‚Äék‚Äé:‚Äé ‚ÄéT‚Äéi‚Äém‚Äé ‚ÄéW‚Äéa‚Äél‚Äéz‚Äé ‚ÄéS‚Äép‚Äér‚Äée‚Äéa‚Äéd‚Äés‚Äé ‚ÄéF‚Äéa‚Äék‚Äée‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äé ‚ÄéA‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚ÄéW‚ÄéH‚Äé ‚ÄéB‚Äéa‚Äél‚Äél‚Äér‚Äéo‚Äéo‚Äém‚Äé
M‚Äée‚Äéx‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚ÄéB‚Äéo‚Äér‚Äéd‚Äée‚Äér‚Äé ‚ÄéS‚Äét‚Äéa‚Äét‚Äée‚Äé ‚ÄéC‚Äéo‚Äép‚Äés‚Äé ‚ÄéA‚Äéb‚Äéd‚Äéu‚Äéc‚Äét‚Äée‚Äéd‚Äé ‚ÄéT‚Äér‚Äéa‚Äév‚Äée‚Äél‚Äée‚Äér‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéT‚Äéu‚Äér‚Äén‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äée‚Äém‚Äé ‚ÄéO‚Äév‚Äée‚Äér‚Äé ‚Äét‚Äéo‚Äé ‚ÄéC‚Äéa‚Äér‚Äét‚Äée‚Äél‚Äé
G‚Äéo‚Äév‚Äé.‚Äé ‚ÄéM‚Äéi‚Äék‚Äée‚Äé ‚ÄéB‚Äér‚Äéa‚Äéu‚Äén‚Äé ‚ÄéC‚Äéa‚Äél‚Äél‚Äés‚Äé ‚ÄéS‚Äép‚Äée‚Äéc‚Äéi‚Äéa‚Äél‚Äé ‚ÄéS‚Äée‚Äés‚Äés‚Äéi‚Äéo‚Äén‚Äé ‚Äéo‚Äén‚Äé ‚ÄéI‚Äén‚Äéd‚Äéi‚Äéa‚Äén‚Äéa‚Äé ‚ÄéR‚Äée‚Äéd‚Äéi‚Äés‚Äét‚Äér‚Äéi‚Äéc‚Äét‚Äéi‚Äén‚Äég‚Äé,‚Äé ‚ÄéT‚Äéa‚Äéx‚Äé ‚ÄéC‚Äéo‚Äéd‚Äée‚Äé
B‚Äér‚Äéa‚Äéz‚Äéi‚Äél‚Äé'‚Äés‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé ‚ÄéL‚Äéu‚Äél‚Äéa‚Äé ‚ÄéB‚Äéo‚Äéa‚Äés‚Äét‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéJ‚Äéa‚Äéi‚Äél‚Äéi‚Äén‚Äég‚Äé ‚ÄéP‚Äéo‚Äél‚Äéi‚Äét‚Äéi‚Äéc‚Äéa‚Äél‚Äé ‚ÄéR‚Äéi‚Äév‚Äéa‚Äél‚Äé
V‚ÄéI‚ÄéD‚ÄéE‚ÄéO‚Äé:‚Äé ‚ÄéH‚Äéu‚Äér‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äée‚Äé ‚ÄéM‚Äée‚Äél‚Äéi‚Äés‚Äés‚Äéa‚Äé ‚ÄéR‚Äéo‚Äéa‚Äér‚Äés‚Äé ‚ÄéT‚Äéo‚Äéw‚Äéa‚Äér‚Äéd‚Äé ‚ÄéJ‚Äéa‚Äém‚Äéa‚Äéi‚Äéc‚Äéa‚Äé ‚Äéa‚Äés‚Äé ‚ÄéC‚Äéa‚Äét‚Äée‚Äég‚Äéo‚Äér‚Äéy‚Äé ‚Äé5‚Äé ‚ÄéS‚Äét‚Äéo‚Äér‚Äém‚Äé
V‚ÄéI‚ÄéD‚ÄéE‚ÄéO‚Äé:‚Äé ‚ÄéC‚Äér‚Äéi‚Äés‚Äé ‚ÄéC‚Äéo‚Äél‚Äél‚Äéi‚Äén‚Äés‚Äéw‚Äéo‚Äér‚Äét‚Äéh‚Äé ‚ÄéA‚Äés‚Äék‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéR‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚ÄéQ‚Äéu‚Äée‚Äés‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéR‚Äée‚Äép‚Äél‚Äéa‚Äéy‚Äé ‚ÄéA‚Äés‚Äés‚Äéi‚Äés‚Äét‚Äée‚Äéd‚Äé ‚ÄéT‚ÄéD‚Äé
G‚Äée‚Äét‚Äé ‚ÄéA‚Äél‚Äél‚Äé ‚ÄéB‚Äér‚Äée‚Äéi‚Äét‚Äéb‚Äéa‚Äér‚Äét‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äé ‚ÄéH‚Äée‚Äér‚Äée‚Äé
H‚Äéo‚Äém‚Äée‚ÄéP‚Äéa‚Äég‚Äée‚Äé
J‚Äéa‚Äés‚Äém‚Äéi‚Äén‚Äée‚Äé ‚ÄéC‚Äér‚Äéo‚Äéc‚Äék‚Äée‚Äét‚Äét‚Äé ‚ÄéB‚Äéu‚Äés‚Äét‚Äée‚Äéd‚Äé:‚Äé ‚ÄéH‚Äéi‚Äéd‚Äé ‚ÄéS‚Äét‚Äéo‚Äéc‚Äék‚Äé ‚ÄéH‚Äéo‚Äél‚Äéd‚Äéi‚Äén‚Äég‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéP‚Äéh‚Äéa‚Äér‚Äém‚Äéa‚Äé,‚Äé ‚ÄéF‚Äéo‚Äés‚Äés‚Äéi‚Äél‚Äé ‚ÄéF‚Äéu‚Äée‚Äél‚Äés‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéM‚Äéa‚Äér‚Äéi‚Äéj‚Äéu‚Äéa‚Äén‚Äéa‚Äé ‚ÄéC‚Äéo‚Äém‚Äép‚Äéa‚Äén‚Äéi‚Äée‚Äés‚Äé
W‚ÄéA‚ÄéS‚ÄéH‚ÄéI‚ÄéN‚ÄéG‚ÄéT‚ÄéO‚ÄéN‚Äé,‚Äé ‚ÄéD‚ÄéC‚Äé ‚Äé-‚Äé ‚ÄéS‚ÄéE‚ÄéP‚ÄéT‚ÄéE‚ÄéM‚ÄéB‚ÄéE‚ÄéR‚Äé ‚Äé1‚Äé7‚Äé:‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚Äé ‚ÄéR‚Äée‚Äép‚Äé.‚Äé ‚ÄéJ‚Äéa‚Äés‚Äém‚Äéi‚Äén‚Äée‚Äé ‚ÄéC‚Äér‚Äéo‚Äéc‚Äék‚Äée‚Äét‚Äét‚Äé ‚Äé(‚ÄéD‚Äé-‚ÄéT‚ÄéX‚Äé)‚Äé ‚Äés‚Äép‚Äée‚Äéa‚Äék‚Äés‚Äé ‚Äéd‚Äéu‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äé ‚ÄéH‚Äéo‚Äéu‚Äés‚Äée‚Äé ‚ÄéJ‚Äéu‚Äéd‚Äé
R‚Äéa‚Äéd‚Äéi‚Äéc‚Äéa‚Äél‚Äé ‚Äél‚Äée‚Äéf‚Äét‚Äéi‚Äés‚Äét‚Äé ‚ÄéR‚Äée‚Äép‚Äé.‚Äé ‚ÄéJ‚Äéa‚Äés‚Äém‚Äéi‚Äén‚Äée‚Äé ‚ÄéC‚Äér‚Äéo‚Äéc‚Äék‚Äée‚Äét‚Äét‚Äé ‚Äé(‚ÄéD‚Äé-‚ÄéT‚ÄéX‚Äé)‚Äé ‚Äér‚Äée‚Äép‚Äéo‚Äér‚Äét‚Äée‚Äéd‚Äél‚Äéy‚Äé ‚Äéh‚Äéa‚Äéd‚Äé ‚Äéa‚Äé ‚Äés‚Äée‚Äéc‚Äér‚Äée‚Äét‚Äé ‚Äés‚Äét‚Äéo‚Äéc‚Äék‚Äé ‚Äép‚Äéo‚Äér‚Äét‚Äéf‚Äéo‚Äél‚Äéi‚Äéo‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äér‚Äéi‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äéd‚Äée‚Äél‚Äév‚Äée‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äém‚Äéa‚Äér‚Äéi‚Äéj‚Äéu‚Äéa‚Äén‚Äéa‚Äé ‚Äéb‚Äéu‚Äés‚Äéi‚Äén‚Äée‚Äés‚Äés‚Äé.‚Äé

‚Äò‚ÄéA‚Äé ‚ÄéH‚Äéo‚Äéu‚Äés‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéD‚Äéy‚Äén‚Äéa‚Äém‚Äéi‚Äét‚Äée‚Äé‚Äô‚Äé ‚ÄéR‚Äée‚Äév‚Äéi‚Äée‚Äéw‚Äé:‚Äé ‚ÄéN‚Äée‚Äét‚Äéf‚Äél‚Äéi‚Äéx‚Äé‚Äô‚Äés‚Äé ‚ÄéW‚Äéo‚Äér‚Äés‚Äét‚Äé ‚ÄéT‚ÄéV‚Äé ‚ÄéM‚Äéo‚Äév‚Äéi‚Äée‚Äé ‚ÄéY‚Äée‚Äét‚Äé
‚Äò‚ÄéA‚Äé ‚ÄéH‚Äéo‚Äéu‚Äés‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéD‚Äéy‚Äén‚Äéa‚Äém‚Äéi‚Äét‚Äée‚Äé‚Äô‚Äé ‚ÄéR‚Äée‚Äév‚Äéi‚Äée‚Äéw‚Äé:‚Äé ‚ÄéN‚Äée‚Äét‚Äéf‚Äél‚Äéi‚Äéx‚Äé‚Äô‚Äés‚Äé ‚ÄéW‚Äéo‚Äér‚Äés‚Äét‚Äé ‚ÄéT‚ÄéV‚Äé ‚ÄéM‚Äéo‚Äév‚Äéi‚Äée‚Äé ‚ÄéY‚Äée‚Äét‚Äé
J‚Äéo‚Äéh‚Äén‚Äé ‚ÄéN‚Äéo‚Äél‚Äét‚Äée‚Äé
N‚Äéo‚Äél‚Äét‚Äée‚Äé ‚Äé‚Äî‚Äé ‚ÄéD‚Äéi‚Äés‚Äén‚Äée‚Äéy‚Äé‚Äô‚Äés‚Äé ‚Äé‚Äò‚ÄéS‚Äép‚Äér‚Äéi‚Äén‚Äég‚Äés‚Äét‚Äée‚Äée‚Äén‚Äé:‚Äé ‚ÄéD‚Äée‚Äél‚Äéi‚Äév‚Äée‚Äér‚Äé ‚ÄéM‚Äée‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚ÄéN‚Äéo‚Äéw‚Äéh‚Äée‚Äér‚Äée‚Äé‚Äô‚Äé ‚ÄéB‚Äéo‚Äém‚Äéb‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚ÄéA‚Äé.‚Äé
D‚Äéi‚Äés‚Äén‚Äée‚Äéy‚Äé‚Äô‚Äés‚Äé ‚Äé‚Äò‚ÄéS‚Äép‚Äér‚Äéi‚Äén‚Äég‚Äés‚Äét‚Äée‚Äée‚Äén‚Äé:‚Äé ‚ÄéD‚Äée‚Äél‚Äéi‚Äév‚Äée‚Äér‚Äé ‚ÄéM‚Äée‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚ÄéN‚Äéo‚Äéw‚Äéh‚Äée‚Äér‚Äée‚Äé‚Äô‚Äé ‚ÄéB‚Äéo‚Äém‚Äéb‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚ÄéA‚Äé.‚Äé
2‚Äé,‚Äé1‚Äé6‚Äé1‚Äé
T‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéR‚Äéa‚Äéi‚Äés‚Äée‚Äés‚Äé ‚ÄéC‚Äéa‚Äén‚Äéa‚Äéd‚Äéi‚Äéa‚Äén‚Äé ‚ÄéT‚Äéa‚Äér‚Äéi‚Äéf‚Äéf‚Äés‚Äé ‚Äé1‚Äé0‚Äé%‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚Äé‚Äò‚ÄéF‚Äér‚Äéa‚Äéu‚Äéd‚Äéu‚Äél‚Äée‚Äén‚Äét‚Äé‚Äô‚Äé ‚ÄéR‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéR‚Äée‚Äéa‚Äég‚Äéa‚Äén‚Äé ‚ÄéA‚Äéd‚Äé ‚ÄéA‚Äéi‚Äér‚Äés‚Äé ‚ÄéD‚Äéu‚Äér‚Äéi‚Äén‚Äég‚Äé ‚ÄéW‚Äéo‚Äér‚Äél‚Äéd‚Äé ‚ÄéS‚Äée‚Äér‚Äéi‚Äée‚Äés‚Äé
T‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéR‚Äéa‚Äéi‚Äés‚Äée‚Äés‚Äé ‚ÄéC‚Äéa‚Äén‚Äéa‚Äéd‚Äéi‚Äéa‚Äén‚Äé ‚ÄéT‚Äéa‚Äér‚Äéi‚Äéf‚Äéf‚Äés‚Äé ‚Äé1‚Äé0‚Äé%‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚Äé‚Äò‚ÄéF‚Äér‚Äéa‚Äéu‚Äéd‚Äéu‚Äél‚Äée‚Äén‚Äét‚Äé‚Äô‚Äé ‚ÄéR‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéR‚Äée‚Äéa‚Äég‚Äéa‚Äén‚Äé ‚ÄéA‚Äéd‚Äé ‚ÄéA‚Äéi‚Äér‚Äés‚Äé ‚ÄéD‚Äéu‚Äér‚Äéi‚Äén‚Äég‚Äé ‚ÄéW‚Äéo‚Äér‚Äél‚Äéd‚Äé ‚ÄéS‚Äée‚Äér‚Äéi‚Äée‚Äés‚Äé
6‚Äé,‚Äé6‚Äé1‚Äé5‚Äé
K‚Äéa‚Äém‚Äéa‚Äél‚Äéa‚Äé ‚ÄéH‚Äéa‚Äér‚Äér‚Äéi‚Äés‚Äé:‚Äé ‚Äé‚Äò‚ÄéI‚Äé ‚ÄéA‚Äém‚Äé ‚ÄéN‚Äéo‚Äét‚Äé ‚ÄéD‚Äéo‚Äén‚Äée‚Äé‚Äô‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéM‚Äéa‚Äéy‚Äé ‚ÄéR‚Äéu‚Äén‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé ‚Äéi‚Äén‚Äé ‚Äé2‚Äé0‚Äé2‚Äé8‚Äé
K‚Äéa‚Äém‚Äéa‚Äél‚Äéa‚Äé ‚ÄéH‚Äéa‚Äér‚Äér‚Äéi‚Äés‚Äé:‚Äé ‚Äé‚Äò‚ÄéI‚Äé ‚ÄéA‚Äém‚Äé ‚ÄéN‚Äéo‚Äét‚Äé ‚ÄéD‚Äéo‚Äén‚Äée‚Äé‚Äô‚Äé
5‚Äé,‚Äé5‚Äé5‚Äé8‚Äé
S‚Äéu‚Äér‚Äép‚Äér‚Äéi‚Äés‚Äée‚Äé:‚Äé ‚ÄéR‚Äée‚Äép‚Äéu‚Äéb‚Äél‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚ÄéS‚Äét‚Äée‚Äév‚Äée‚Äé ‚ÄéH‚Äéi‚Äél‚Äét‚Äéo‚Äén‚Äé ‚ÄéL‚Äée‚Äéa‚Äéd‚Äés‚Äé ‚ÄéP‚Äéo‚Äél‚Äél‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéC‚Äéa‚Äél‚Äéi‚Äéf‚Äéo‚Äér‚Äén‚Äéi‚Äéa‚Äé ‚ÄéG‚Äéo‚Äév‚Äée‚Äér‚Äén‚Äéo‚Äér‚Äé
S‚Äéu‚Äér‚Äép‚Äér‚Äéi‚Äés‚Äée‚Äé:‚Äé ‚ÄéR‚Äée‚Äép‚Äéu‚Äéb‚Äél‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚ÄéS‚Äét‚Äée‚Äév‚Äée‚Äé ‚ÄéH‚Äéi‚Äél‚Äét‚Äéo‚Äén‚Äé ‚ÄéL‚Äée‚Äéa‚Äéd‚Äés‚Äé ‚ÄéP‚Äéo‚Äél‚Äél‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéC‚Äéa‚Äél‚Äéi‚Äéf‚Äéo‚Äér‚Äén‚Äéi‚Äéa‚Äé ‚ÄéG‚Äéo‚Äév‚Äée‚Äér‚Äén‚Äéo‚Äér‚Äé
1‚Äé,‚Äé8‚Äé0‚Äé7‚Äé
W‚Äéa‚Äét‚Äéc‚Äéh‚Äé:‚Äé ‚ÄéA‚Äén‚Äét‚Äéi‚Äéf‚Äéa‚Äé ‚ÄéB‚Äér‚Äéa‚Äéw‚Äél‚Äés‚Äé ‚ÄéO‚Äéu‚Äét‚Äés‚Äéi‚Äéd‚Äée‚Äé ‚ÄéP‚Äéo‚Äér‚Äét‚Äél‚Äéa‚Äén‚Äéd‚Äé ‚ÄéI‚ÄéC‚ÄéE‚Äé ‚ÄéF‚Äéa‚Äéc‚Äéi‚Äél‚Äéi‚Äét‚Äéy‚Äé ‚Äéa‚Äés‚Äé ‚ÄéP‚Äéo‚Äél‚Äéi‚Äéc‚Äée‚Äé ‚ÄéA‚Äég‚Äéa‚Äéi‚Äén‚Äé ‚ÄéM‚Äéa‚Äék‚Äée‚Äé ‚ÄéN‚Äéo‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äés‚Äé
A‚Äén‚Äét‚Äéi‚Äéf‚Äéa‚Äé ‚ÄéB‚Äér‚Äéa‚Äéw‚Äél‚Äés‚Äé ‚ÄéO‚Äéu‚Äét‚Äés‚Äéi‚Äéd‚Äée‚Äé ‚ÄéP‚Äéo‚Äér‚Äét‚Äél‚Äéa‚Äén‚Äéd‚Äé ‚ÄéI‚ÄéC‚ÄéE‚Äé ‚ÄéF‚Äéa‚Äéc‚Äéi‚Äél‚Äéi‚Äét‚Äéy‚Äé ‚Äéa‚Äés‚Äé ‚ÄéP‚Äéo‚Äél‚Äéi‚Äéc‚Äée‚Äé ‚ÄéA‚Äég‚Äéa‚Äéi‚Äén‚Äé ‚ÄéM‚Äéa‚Äék‚Äée‚Äé ‚ÄéN‚Äéo‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äés‚Äé
1‚Äé,‚Äé3‚Äé6‚Äé5‚Äé
T‚Äéi‚Äém‚Äéo‚Äét‚Äéh‚Äéy‚Äé ‚ÄéM‚Äée‚Äél‚Äél‚Äéo‚Äén‚Äé ‚ÄéI‚Äéd‚Äée‚Äén‚Äét‚Äéi‚Äéf‚Äéi‚Äée‚Äéd‚Äé ‚Äéa‚Äés‚Äé ‚Äé$‚Äé1‚Äé3‚Äé0‚Äé ‚ÄéM‚Äéi‚Äél‚Äél‚Äéi‚Äéo‚Äén‚Äé ‚ÄéD‚Äéo‚Äén‚Äéo‚Äér‚Äé ‚Äét‚Äéo‚Äé ‚ÄéF‚Äéu‚Äén‚Äéd‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚Äé ‚ÄéT‚Äér‚Äéo‚Äéo‚Äép‚Äés‚Äé ‚ÄéD‚Äéu‚Äér‚Äéi‚Äén‚Äég‚Äé ‚ÄéS‚Äéh‚Äéu‚Äét‚Äéd‚Äéo‚Äéw‚Äén‚Äé
T‚Äéi‚Äém‚Äéo‚Äét‚Äéh‚Äéy‚Äé ‚ÄéM‚Äée‚Äél‚Äél‚Äéo‚Äén‚Äé ‚ÄéI‚Äéd‚Äée‚Äén‚Äét‚Äéi‚Äéf‚Äéi‚Äée‚Äéd‚Äé ‚Äéa‚Äés‚Äé ‚Äé$‚Äé1‚Äé3‚Äé0‚Äé ‚ÄéM‚Äéi‚Äél‚Äél‚Äéi‚Äéo‚Äén‚Äé ‚ÄéD‚Äéo‚Äén‚Äéo‚Äér‚Äé ‚Äét‚Äéo‚Äé ‚ÄéF‚Äéu‚Äén‚Äéd‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚Äé ‚ÄéT‚Äér‚Äéo‚Äéo‚Äép‚Äés‚Äé ‚ÄéD‚Äéu‚Äér‚Äéi‚Äén‚Äég‚Äé ‚ÄéS‚Äéh‚Äéu‚Äét‚Äéd‚Äéo‚Äéw‚Äén‚Äé
8‚Äé5‚Äé9‚Äé
D‚Äée‚Äém‚Äé ‚ÄéR‚Äée‚Äép‚Äé.‚Äé ‚ÄéB‚Äée‚Äén‚Äén‚Äéi‚Äée‚Äé ‚ÄéT‚Äéh‚Äéo‚Äém‚Äép‚Äés‚Äéo‚Äén‚Äé:‚Äé ‚ÄéS‚Äéh‚Äéu‚Äét‚Äéd‚Äéo‚Äéw‚Äén‚Äé ‚ÄéI‚Äés‚Äén‚Äé‚Äô‚Äét‚Äé ‚ÄéO‚Äéu‚Äér‚Äé ‚ÄéF‚Äéa‚Äéu‚Äél‚Äét‚Äé,‚Äé ‚ÄéW‚Äée‚Äé ‚ÄéW‚Äéa‚Äén‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚Äé‚Äò‚ÄéR‚Äée‚Äés‚Äéo‚Äél‚Äév‚Äée‚Äé ‚ÄéW‚Äéh‚Äéa‚Äét‚Äée‚Äév‚Äée‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéI‚Äém‚Äé
D‚Äée‚Äém‚Äé ‚ÄéR‚Äée‚Äép‚Äé.‚Äé ‚ÄéB‚Äée‚Äén‚Äén‚Äéi‚Äée‚Äé ‚ÄéT‚Äéh‚Äéo‚Äém‚Äép‚Äés‚Äéo‚Äén‚Äé:‚Äé ‚ÄéS‚Äéh‚Äéu‚Äét‚Äéd‚Äéo‚Äéw‚Äén‚Äé ‚ÄéI‚Äés‚Äén‚Äé‚Äô‚Äét‚Äé ‚ÄéO‚Äéu‚Äér‚Äé ‚ÄéF‚Äéa‚Äéu‚Äél‚Äét‚Äé
2‚Äé,‚Äé1‚Äé9‚Äé6‚Äé
S‚ÄéO‚ÄéC‚ÄéI‚ÄéA‚ÄéL‚Äé
M‚ÄéO‚ÄéS‚ÄéT‚Äé ‚ÄéP‚ÄéO‚ÄéP‚ÄéU‚ÄéL‚ÄéA‚ÄéR‚Äé
F‚Äée‚Äéa‚Äér‚Äéf‚Äéu‚Äél‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéW‚Äéa‚Äér‚Äén‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äé‚Äò‚ÄéD‚Äéa‚Äér‚Äék‚Äé ‚ÄéD‚Äéa‚Äéy‚Äés‚Äé‚Äô‚Äé ‚ÄéU‚Äén‚Äéd‚Äée‚Äér‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéC‚Äéa‚Äél‚Äél‚Äés‚Äé ‚Äéo‚Äén‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéS‚Äét‚Äéa‚Äén‚Äéd‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéL‚Äéa‚Äét‚Äée‚Äé-‚ÄéN‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚Äé
B‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéW‚Äéa‚Äér‚Äén‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äé‚Äò‚ÄéD‚Äéa‚Äér‚Äék‚Äé ‚ÄéD‚Äéa‚Äéy‚Äés‚Äé‚Äô‚Äé ‚ÄéU‚Äén‚Äéd‚Äée‚Äér‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé:‚Äé ‚ÄéP‚Äér‚Äéa‚Äéi‚Äés‚Äée‚Äés‚Äé ‚ÄéL‚Äéa‚Äét‚Äée‚Äé-‚ÄéN‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚ÄéT‚ÄéV‚Äé ‚ÄéH‚Äéo‚Äés‚Äét‚Äés‚Äé
3‚Äé,‚Äé9‚Äé2‚Äé9‚Äé
R‚Äéu‚Äéb‚Äéi‚Äéo‚Äé ‚ÄéD‚Äée‚Äép‚Äéo‚Äér‚Äét‚Äés‚Äé ‚ÄéS‚Äéu‚Äés‚Äép‚Äée‚Äéc‚Äét‚Äée‚Äéd‚Äé ‚ÄéM‚Äéu‚Äés‚Äél‚Äéi‚Äém‚Äé ‚ÄéB‚Äér‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äéh‚Äéo‚Äéo‚Äéd‚Äé ‚ÄéL‚Äée‚Äéa‚Äéd‚Äée‚Äér‚Äé
R‚Äéu‚Äéb‚Äéi‚Äéo‚Äé ‚ÄéD‚Äée‚Äép‚Äéo‚Äér‚Äét‚Äés‚Äé ‚ÄéS‚Äéu‚Äés‚Äép‚Äée‚Äéc‚Äét‚Äée‚Äéd‚Äé ‚ÄéM‚Äéu‚Äés‚Äél‚Äéi‚Äém‚Äé ‚ÄéB‚Äér‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äéh‚Äéo‚Äéo‚Äéd‚Äé ‚ÄéL‚Äée‚Äéa‚Äéd‚Äée‚Äér‚Äé
2‚Äé,‚Äé5‚Äé4‚Äé8‚Äé
A‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚ÄéF‚Äée‚Äéd‚Äée‚Äér‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéG‚Äéo‚Äév‚Äée‚Äér‚Äén‚Äém‚Äée‚Äén‚Äét‚Äé ‚ÄéE‚Äém‚Äép‚Äél‚Äéo‚Äéy‚Äée‚Äée‚Äés‚Äé ‚ÄéC‚Äéa‚Äél‚Äél‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéP‚Äéa‚Äés‚Äés‚Äéa‚Äég‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéC‚Äél‚Äée‚Äéa‚Äén‚Äé ‚ÄéC‚ÄéR‚Äé ‚Äét‚Äéo‚Äé ‚ÄéR‚Äée‚Äéo‚Äép‚Äée‚Äén‚Äé ‚ÄéG‚Äéo‚Äév‚Äée‚Äér‚Äén‚Äém‚Äée‚Äén‚Äét‚Äé
A‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚ÄéF‚Äée‚Äéd‚Äée‚Äér‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéG‚Äéo‚Äév‚Äée‚Äér‚Äén‚Äém‚Äée‚Äén‚Äét‚Äé ‚ÄéE‚Äém‚Äép‚Äél‚Äéo‚Äéy‚Äée‚Äée‚Äés‚Äé ‚ÄéC‚Äéa‚Äél‚Äél‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéP‚Äéa‚Äés‚Äés‚Äéa‚Äég‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéC‚Äél‚Äée‚Äéa‚Äén‚Äé ‚ÄéC‚ÄéR‚Äé
1‚Äé5‚Äé7‚Äé
E‚Äér‚Äéi‚Äéc‚Äé ‚ÄéS‚Äéw‚Äéa‚Äél‚Äéw‚Äée‚Äél‚Äél‚Äé ‚ÄéW‚Äéa‚Äén‚Äét‚Äés‚Äé ‚ÄéC‚Äéa‚Äén‚Äéd‚Äéi‚Äéd‚Äéa‚Äét‚Äée‚Äé ‚ÄéL‚Äéi‚Äét‚Äém‚Äéu‚Äés‚Äé ‚ÄéT‚Äée‚Äés‚Äét‚Äé:‚Äé ‚ÄéM‚Äéu‚Äés‚Äét‚Äé ‚ÄéP‚Äél‚Äée‚Äéd‚Äég‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚ÄéD‚Äée‚Äém‚Äéo‚Äél‚Äéi‚Äés‚Äéh‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéB‚Äéa‚Äél‚Äél‚Äér‚Äéo‚Äéo‚Äém‚Äé
E‚Äér‚Äéi‚Äéc‚Äé ‚ÄéS‚Äéw‚Äéa‚Äél‚Äéw‚Äée‚Äél‚Äél‚Äé ‚ÄéS‚Äéa‚Äéy‚Äés‚Äé ‚ÄéC‚Äéa‚Äén‚Äéd‚Äéi‚Äéd‚Äéa‚Äét‚Äée‚Äés‚Äé ‚ÄéM‚Äéu‚Äés‚Äét‚Äé ‚ÄéP‚Äél‚Äée‚Äéd‚Äég‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚ÄéD‚Äée‚Äém‚Äéo‚Äél‚Äéi‚Äés‚Äéh‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéB‚Äéa‚Äél‚Äél‚Äér‚Äéo‚Äéo‚Äém‚Äé
7‚Äé,‚Äé2‚Äé1‚Äé1‚Äé
T‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéC‚Äéa‚Äél‚Äél‚Äés‚Äé ‚ÄéO‚Äén‚Äé ‚ÄéD‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äét‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéE‚Äén‚Äéd‚Äé ‚ÄéS‚Äéh‚Äéu‚Äét‚Äéd‚Äéo‚Äéw‚Äén‚Äé ‚Äéo‚Äén‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé ‚Äé2‚Äé6‚Äé:‚Äé ‚Äé‚Äò‚ÄéW‚Äée‚Äé ‚ÄéJ‚Äéu‚Äés‚Äét‚Äé ‚ÄéW‚Äéa‚Äén‚Äét‚Äé ‚ÄéP‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚ÄéG‚Äée‚Äét‚Äé ‚ÄéP‚Äéa‚Äéi‚Äéd‚Äé‚Äô‚Äé
T‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéC‚Äéa‚Äél‚Äél‚Äés‚Äé ‚Äéo‚Äén‚Äé ‚ÄéD‚Äée‚Äém‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéE‚Äén‚Äéd‚Äé ‚ÄéS‚Äéh‚Äéu‚Äét‚Äéd‚Äéo‚Äéw‚Äén‚Äé:‚Äé ‚Äé'‚ÄéW‚Äée‚Äé ‚ÄéJ‚Äéu‚Äés‚Äét‚Äé ‚ÄéW‚Äéa‚Äén‚Äét‚Äé ‚ÄéP‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚ÄéP‚Äéa‚Äéi‚Äéd‚Äé'‚Äé
4‚Äé4‚Äé6‚Äé
2‚Äé5‚Äé ‚ÄéY‚Äée‚Äéa‚Äér‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéD‚Äée‚Äéa‚Äét‚Äéh‚Äé:‚Äé ‚ÄéO‚Äév‚Äée‚Äér‚Äé ‚Äé1‚Äé4‚Äé,‚Äé2‚Äé0‚Äé0‚Äé ‚ÄéM‚Äéu‚Äér‚Äéd‚Äée‚Äér‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéD‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äét‚Äé-‚ÄéR‚Äéu‚Äén‚Äé ‚ÄéC‚Äéh‚Äéi‚Äéc‚Äéa‚Äég‚Äéo‚Äé ‚ÄéS‚Äéi‚Äén‚Äéc‚Äée‚Äé ‚Äé2‚Äé0‚Äé0‚Äé0‚Äé
O‚Äév‚Äée‚Äér‚Äé ‚Äé1‚Äé4‚Äé,‚Äé2‚Äé0‚Äé0‚Äé ‚ÄéM‚Äéu‚Äér‚Äéd‚Äée‚Äér‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéD‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äét‚Äé-‚ÄéR‚Äéu‚Äén‚Äé ‚ÄéC‚Äéh‚Äéi‚Äéc‚Äéa‚Äég‚Äéo‚Äé ‚Äé2‚Äé0‚Äé0‚Äé0‚Äé ‚ÄéI‚Äén‚Äét‚Äéo‚Äé ‚Äé2‚Äé0‚Äé2‚Äé5‚Äé
2‚Äé7‚Äé9‚Äé
F‚ÄéA‚ÄéA‚Äé ‚ÄéA‚Äén‚Äén‚Äéo‚Äéu‚Äén‚Äéc‚Äée‚Äés‚Äé ‚ÄéH‚Äéa‚Äél‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéF‚Äél‚Äéi‚Äég‚Äéh‚Äét‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéL‚Äéo‚Äés‚Äé ‚ÄéA‚Äén‚Äég‚Äée‚Äél‚Äée‚Äés‚Äé ‚ÄéD‚Äéu‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚ÄéS‚Äét‚Äéa‚Äéf‚Äéf‚Äéi‚Äén‚Äég‚Äé ‚ÄéI‚Äés‚Äés‚Äéu‚Äée‚Äés‚Äé ‚ÄéD‚Äéu‚Äér‚Äéi‚Äén‚Äég‚Äé ‚ÄéS‚Äéc‚Äéh‚Äéu‚Äém‚Äée‚Äér‚Äé ‚ÄéS‚Äéh‚Äéu‚Äét‚Äéd‚Äéo‚Äéw‚Äén‚Äé
F‚Äél‚Äéi‚Äég‚Äéh‚Äét‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéL‚Äé.‚ÄéA‚Äé.‚Äé ‚ÄéH‚Äéa‚Äél‚Äét‚Äée‚Äéd‚Äé ‚ÄéD‚Äéu‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚ÄéS‚Äét‚Äéa‚Äéf‚Äéf‚Äéi‚Äén‚Äég‚Äé ‚ÄéS‚Äéh‚Äéo‚Äér‚Äét‚Äéa‚Äég‚Äée‚Äés‚Äé ‚ÄéD‚Äéu‚Äér‚Äéi‚Äén‚Äég‚Äé ‚ÄéS‚Äéc‚Äéh‚Äéu‚Äém‚Äée‚Äér‚Äé ‚ÄéS‚Äéh‚Äéu‚Äét‚Äéd‚Äéo‚Äéw‚Äén‚Äé
7‚Äé9‚Äé9‚Äé
S‚Äéc‚Äéh‚Äéw‚Äéa‚Äér‚Äéz‚Äée‚Äén‚Äée‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéR‚Äée‚Äéj‚Äée‚Äéc‚Äét‚Äés‚Äé ‚ÄéT‚Äéa‚Äép‚Äép‚Äée‚Äér‚Äé ‚ÄéE‚Äéf‚Äéf‚Äéo‚Äér‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚ÄéB‚Äél‚Äéa‚Äém‚Äée‚Äé ‚ÄéG‚ÄéO‚ÄéP‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äé‚Äò‚ÄéE‚Äéx‚Äét‚Äér‚Äée‚Äém‚Äée‚Äé ‚ÄéG‚Äée‚Äér‚Äér‚Äéy‚Äém‚Äéa‚Äén‚Äéd‚Äée‚Äér‚Äéi‚Äén‚Äég‚Äé‚Äô‚Äé ‚Äé‚Äî‚Äé ‚Äé&‚Äé#‚Äé8‚Äé2‚Äé
S‚Äéc‚Äéh‚Äéw‚Äéa‚Äér‚Äéz‚Äée‚Äén‚Äée‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéR‚Äée‚Äéj‚Äée‚Äéc‚Äét‚Äés‚Äé ‚ÄéT‚Äéa‚Äép‚Äép‚Äée‚Äér‚Äé ‚ÄéB‚Äél‚Äéa‚Äém‚Äéi‚Äén‚Äég‚Äé ‚ÄéG‚ÄéO‚ÄéP‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äé'‚ÄéE‚Äéx‚Äét‚Äér‚Äée‚Äém‚Äée‚Äé ‚ÄéG‚Äée‚Äér‚Äér‚Äéy‚Äém‚Äéa‚Äén‚Äéd‚Äée‚Äér‚Äéi‚Äén‚Äég‚Äé'‚Äé
5‚Äé9‚Äé
T‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéS‚Äéi‚Äég‚Äén‚Äés‚Äé ‚ÄéH‚Äéi‚Äés‚Äét‚Äéo‚Äér‚Äéi‚Äéc‚Äé ‚ÄéP‚Äée‚Äéa‚Äéc‚Äée‚Äé,‚Äé ‚ÄéT‚Äér‚Äéa‚Äéd‚Äée‚Äé ‚ÄéA‚Äég‚Äér‚Äée‚Äée‚Äém‚Äée‚Äén‚Äét‚Äés‚Äé ‚Äéo‚Äén‚Äé ‚ÄéA‚Äér‚Äér‚Äéi‚Äév‚Äéa‚Äél‚Äé ‚Äéi‚Äén‚Äé ‚ÄéM‚Äéa‚Äél‚Äéa‚Äéy‚Äés‚Äéi‚Äéa‚Äé
T‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéS‚Äéi‚Äég‚Äén‚Äés‚Äé ‚ÄéP‚Äée‚Äéa‚Äéc‚Äée‚Äé,‚Äé ‚ÄéT‚Äér‚Äéa‚Äéd‚Äée‚Äé ‚ÄéA‚Äég‚Äér‚Äée‚Äée‚Äém‚Äée‚Äén‚Äét‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéM‚Äéa‚Äél‚Äéa‚Äéy‚Äés‚Äéi‚Äéa‚Äé
3‚Äé,‚Äé5‚Äé6‚Äé8‚Äé
S‚Äéh‚Äéo‚Äéc‚Äék‚Äé:‚Äé ‚ÄéG‚Äéa‚Äév‚Äéi‚Äén‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äéo‚Äém‚Äé ‚ÄéH‚Äéi‚Äén‚Äét‚Äés‚Äé ‚Äéa‚Äét‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äéi‚Äéa‚Äél‚Äé ‚ÄéR‚Äéu‚Äén‚Äé
S‚Äéh‚Äéo‚Äéc‚Äék‚Äé:‚Äé ‚ÄéG‚Äéa‚Äév‚Äéi‚Äén‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äéo‚Äém‚Äé ‚ÄéH‚Äéi‚Äén‚Äét‚Äés‚Äé ‚Äéa‚Äét‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äéi‚Äéa‚Äél‚Äé ‚ÄéR‚Äéu‚Äén‚Äé

F‚Äéi‚Äét‚Äéz‚Äég‚Äée‚Äér‚Äéa‚Äél‚Äéd‚Äé ‚ÄéP‚Äéo‚Äél‚Äéi‚Äéc‚Äée‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äé ‚ÄéN‚Äée‚Äég‚Äér‚Äéo‚Äé ‚ÄéG‚Äée‚Äén‚Äét‚Äél‚Äée‚Äém‚Äéa‚Äén‚Äé ‚ÄéW‚Äéh‚Äéo‚Äé ‚ÄéG‚Äéu‚Äén‚Äén‚Äée‚Äéd‚Äé ‚ÄéD‚Äéo‚Äéw‚Äén‚Äé ‚ÄéW‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéM‚Äéa‚Äén‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéK‚Äén‚Äéo‚Äéc‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äén‚Äé ‚ÄéH‚Äéi‚Äés‚Äé ‚ÄéD‚Äéo‚Äéo‚Äér‚Äé.‚Äé

A‚Äén‚Äéy‚Äé ‚Äén‚Äée‚Äég‚Äér‚Äéo‚Äé ‚Äél‚Äéi‚Äév‚Äéi‚Äén‚Äég‚Äé ‚Äéi‚Äén‚Äé ‚Äéa‚Äé ‚Äét‚Äéo‚Äéw‚Äén‚Äé ‚Äéc‚Äéa‚Äél‚Äél‚Äée‚Äéd‚Äé ‚ÄéF‚Äéi‚Äét‚Äéz‚Äég‚Äée‚Äér‚Äéa‚Äél‚Äéd‚Äé ‚Äéw‚Äéo‚Äéu‚Äél‚Äéd‚Äén‚Äé'‚Äét‚Äé ‚Äéw‚Äéo‚Äér‚Äék‚Äé.‚Äé



O‚Äél‚Äéd‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äéa‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚ÄéW‚Äéo‚Äér‚Äéc‚Äée‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéP‚Äéo‚Äél‚Äéi‚Äéc‚Äée‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äéi‚Äén‚Äég‚Äé ‚ÄéW‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéM‚Äéa‚Äén‚Äé.‚Äé


D‚Äéi‚Äén‚Äéd‚Äéu‚Äé ‚ÄéD‚Äéi‚Äén‚Äéw‚Äéi‚Äéd‚Äéd‚Äéi‚Äée‚Äé ‚ÄéS‚Äéh‚Äée‚Äér‚Äéi‚Äéf‚Äéf‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äéi‚Äén‚Äég‚Äé ‚ÄéH‚Äéi‚Äés‚Äé ‚ÄéN‚Äée‚Äég‚Äér‚Äéo‚Äé ‚ÄéB‚Äér‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé.‚Äé


C‚Äél‚Äéo‚Äés‚Äéi‚Äén‚Äég‚Äé ‚ÄéS‚Äét‚Äéa‚Äét‚Äée‚Äém‚Äée‚Äén‚Äét‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéR‚Äée‚Äét‚Äér‚Äéi‚Äéa‚Äél‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéM‚Äéo‚Äén‚Äék‚Äée‚Äéy‚Äé ‚ÄéW‚Äéh‚Äéo‚Äé ‚ÄéR‚Äéa‚Äép‚Äée‚Äéd‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äée‚Äéd‚Äé ‚ÄéW‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéW‚Äéo‚Äém‚Äéa‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚Äé1‚Äé9‚Äé9‚Äé1‚Äé.‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéW‚Äée‚Äéa‚Äét‚Äéh‚Äée‚Äér‚Äé!‚Äé


1‚Äé0‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé ‚ÄéW‚Äée‚Äéa‚Äét‚Äéh‚Äée‚Äér‚Äé-‚Äé ‚ÄéD‚Äéa‚Äél‚Äée‚Äé,‚Äé ‚ÄéT‚Äée‚Äéx‚Äéa‚Äés‚Äé
A‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé:‚Äé1‚Äé4‚Äé ‚Äép‚Äém‚Äé ‚ÄéC‚ÄéD‚ÄéT‚Äé
F‚Äéi‚Äér‚Äée‚Äé ‚ÄéW‚Äée‚Äéa‚Äét‚Äéh‚Äée‚Äér‚Äé ‚ÄéW‚Äéa‚Äét‚Äéc‚Äéh‚Äé
T‚Äéo‚Äéd‚Äéa‚Äéy‚Äé
D‚Äéa‚Äéy‚Äé
8‚Äé9‚Äé¬∞‚Äé
1‚Äé%‚Äé
S‚ÄéS‚ÄéW‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé.‚Äé ‚ÄéH‚Äéi‚Äég‚Äéh‚Äé ‚Äé8‚Äé9‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéS‚ÄéS‚ÄéW‚Äé ‚Äéa‚Äét‚Äé ‚Äé1‚Äé0‚Äé ‚Äét‚Äéo‚Äé ‚Äé1‚Äé5‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé


H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
5‚Äé4‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
6‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
S‚Äéu‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
7‚Äé:‚Äé4‚Äé0‚Äé ‚Äéa‚Äém‚Äé
S‚Äéu‚Äén‚Äés‚Äée‚Äét‚Äé
6‚Äé:‚Äé4‚Äé7‚Äé ‚Äép‚Äém‚Äé
N‚Äéi‚Äég‚Äéh‚Äét‚Äé
6‚Äé9‚Äé¬∞‚Äé
1‚Äé5‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé
C‚Äél‚Äée‚Äéa‚Äér‚Äé ‚Äét‚Äéo‚Äé ‚Äép‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚Äéc‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé.‚Äé ‚ÄéL‚Äéo‚Äéw‚Äé ‚Äé6‚Äé9‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéS‚Äé ‚Äéa‚Äét‚Äé ‚Äé5‚Äé ‚Äét‚Äéo‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé

H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
8‚Äé4‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
0‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
M‚Äéo‚Äéo‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
1‚Äé:‚Äé1‚Äé2‚Äé ‚Äép‚Äém‚Äé
M‚Äéo‚Äéo‚Äén‚Äés‚Äée‚Äét‚Äé
1‚Äé1‚Äé:‚Äé1‚Äé5‚Äé ‚Äép‚Äém‚Äé
W‚Äéa‚Äéx‚Äéi‚Äén‚Äég‚Äé ‚ÄéC‚Äér‚Äée‚Äés‚Äéc‚Äée‚Äén‚Äét‚Äé
T‚Äéu‚Äée‚Äé ‚Äé2‚Äé8‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé7‚Äé¬∞‚Äé
/‚Äé5‚Äé1‚Äé¬∞‚Äé
2‚Äé0‚Äé%‚Äé
W‚Äée‚Äéd‚Äé ‚Äé2‚Äé9‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé/‚ÄéW‚Äéi‚Äén‚Äéd‚Äé
7‚Äé0‚Äé¬∞‚Äé
/‚Äé4‚Äé2‚Äé¬∞‚Äé
0‚Äé%‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé3‚Äé0‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
7‚Äé2‚Äé¬∞‚Äé
/‚Äé4‚Äé1‚Äé¬∞‚Äé
0‚Äé%‚Äé
F‚Äér‚Äéi‚Äé ‚Äé3‚Äé1‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
7‚Äé6‚Äé¬∞‚Äé
/‚Äé4‚Äé6‚Äé¬∞‚Äé
4‚Äé%‚Äé
S‚Äéa‚Äét‚Äé ‚Äé0‚Äé1‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
8‚Äé0‚Äé¬∞‚Äé
/‚Äé5‚Äé2‚Äé¬∞‚Äé
1‚Äé2‚Äé%‚Äé
S‚Äéu‚Äén‚Äé ‚Äé0‚Äé2‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
8‚Äé3‚Äé¬∞‚Äé
/‚Äé5‚Äé8‚Äé¬∞‚Äé
6‚Äé%‚Äé
M‚Äéo‚Äén‚Äé ‚Äé0‚Äé3‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
8‚Äé6‚Äé¬∞‚Äé
/‚Äé5‚Äé9‚Äé¬∞‚Äé
6‚Äé%‚Äé
T‚Äéu‚Äée‚Äé ‚Äé0‚Äé4‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéS‚Äéu‚Äén‚Äén‚Äéy‚Äé
8‚Äé2‚Äé¬∞‚Äé
/‚Äé6‚Äé2‚Äé¬∞‚Äé
8‚Äé%‚Äé
W‚Äée‚Äéd‚Äé ‚Äé0‚Äé5‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéS‚Äéu‚Äén‚Äén‚Äéy‚Äé
8‚Äé5‚Äé¬∞‚Äé
/‚Äé6‚Äé2‚Äé¬∞‚Äé
5‚Äé%‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé0‚Äé6‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
8‚Äé5‚Äé¬∞‚Äé

/‚Äé6‚Äé2‚Äé¬∞‚Äé
1‚Äé0‚Äé%‚Äé
F‚Äér‚Äéi‚Äé ‚Äé0‚Äé7‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
8‚Äé2‚Äé¬∞‚Äé
/‚Äé5‚Äé9‚Äé¬∞‚Äé
1‚Äé4‚Äé%‚Äé
S‚Äéa‚Äét‚Äé ‚Äé0‚Äé8‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
8‚Äé2‚Äé¬∞‚Äé
/‚Äé6‚Äé1‚Äé¬∞‚Äé
1‚Äé9‚Äé%‚Äé
S‚Äéu‚Äén‚Äé ‚Äé0‚Äé9‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéS‚Äéu‚Äén‚Äén‚Äéy‚Äé
8‚Äé3‚Äé¬∞‚Äé
/‚Äé5‚Äé9‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
M‚Äéo‚Äén‚Äé ‚Äé1‚Äé0‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé0‚Äé¬∞‚Äé
/‚Äé5‚Äé7‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé

.‚Äé.‚Äé.‚Äé
C‚Äéu‚Äér‚Äér‚Äée‚Äén‚Äét‚Äé ‚Äét‚Äéh‚Äér‚Äée‚Äéa‚Äét‚Äé:‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚ÄéG‚Äér‚Äée‚Äéa‚Äét‚Äé ‚ÄéP‚Äéu‚Äém‚Äép‚Äék‚Äéi‚Äén‚Äé.‚Äé ‚ÄéüéÉ
.‚Äé.‚Äé.‚Äé

S‚Äéo‚Äén‚Äéi‚Äéc‚Äé
C‚Äér‚Äée‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚Äéa‚Äé ‚Äét‚Äér‚Äéi‚Äéo‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéJ‚Äéa‚Äép‚Äéa‚Äén‚Äée‚Äés‚Äée‚Äé ‚Äév‚Äéi‚Äéd‚Äée‚Äéo‚Äé ‚Äég‚Äéa‚Äém‚Äée‚Äé ‚Äém‚Äéa‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéf‚Äéu‚Äér‚Äéf‚Äéa‚Äég‚Äés‚Äé ‚Äéa‚Äés‚Äé ‚Äéa‚Äé ‚Äés‚Äéu‚Äéc‚Äéc‚Äée‚Äés‚Äés‚Äéo‚Äér‚Äé ‚Äét‚Äéo‚Äé ‚ÄéA‚Äél‚Äée‚Äéx‚Äé ‚ÄéK‚Äéi‚Äéd‚Äéd‚Äé,‚Äé ‚ÄéS‚Äéo‚Äén‚Äéi‚Äéc‚Äé ‚Äéh‚Äéi‚Äém‚Äés‚Äée‚Äél‚Äéf‚Äé ‚Äéi‚Äés‚Äé ‚Äée‚Äés‚Äés‚Äée‚Äén‚Äét‚Äéi‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äél‚Äéi‚Äék‚Äée‚Äé ‚Äéa‚Äé ‚Äéf‚Äéa‚Äég‚Äég‚Äéo‚Äét‚Äé ‚Äéw‚Äéh‚Äéo‚Äé ‚Äém‚Äéa‚Äék‚Äée‚Äés‚Äé ‚Äéc‚Äél‚Äéa‚Äéi‚Äém‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äéh‚Äéa‚Äév‚Äée‚Äé ‚Äéo‚Äén‚Äéc‚Äée‚Äé ‚Äéb‚Äée‚Äée‚Äén‚Äé ‚Äéa‚Äés‚Äé ‚Äéc‚Äéo‚Äéo‚Äél‚Äé ‚Äéa‚Äés‚Äé ‚Äéy‚Äéo‚Äéu‚Äé,‚Äé ‚Äéb‚Äéu‚Äét‚Äé ‚Äén‚Äéo‚Äé ‚Äéo‚Äén‚Äée‚Äé ‚Äéc‚Äéa‚Äén‚Äé ‚Äér‚Äée‚Äém‚Äée‚Äém‚Äéb‚Äée‚Äér‚Äé ‚Äéw‚Äéh‚Äéy‚Äé.‚Äé ‚ÄéH‚Äée‚Äé ‚Äéc‚Äéa‚Äén‚Äé ‚Äér‚Äéu‚Äén‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äé ‚Äé5‚Äé0‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé ‚Äéo‚Äén‚Äé ‚Äél‚Äéa‚Äén‚Äéd‚Äé,‚Äé ‚Äé7‚Äé0‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéA‚Äéu‚Äét‚Äéo‚Äéb‚Äéa‚Äéh‚Äén‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äé1‚Äé5‚Äé ‚Äém‚Äép‚Äéh‚Äé ‚Äéu‚Äép‚Äé ‚ÄéT‚Äéa‚Äéi‚Äél‚Äés‚Äé'‚Äé ‚Äéa‚Äés‚Äés‚Äé.‚Äé ‚ÄéS‚Äéo‚Äén‚Äéi‚Äéc‚Äé ‚Äéz‚Äéi‚Äép‚Äép‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äér‚Äéo‚Äéu‚Äég‚Äéh‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äée‚Äém‚Äée‚Äén‚Äé-‚Äés‚Äép‚Äée‚Äéc‚Äék‚Äél‚Äée‚Äéd‚Äé ‚Äéw‚Äéo‚Äér‚Äél‚Äéd‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéf‚Äéu‚Äér‚Äér‚Äéy‚Äé ‚Äéf‚Äéa‚Äén‚Äéd‚Äéo‚Äém‚Äé ‚Äéi‚Äén‚Äé ‚Äé1‚Äé9‚Äé9‚Äé1‚Äé.‚Äé ‚Äé""‚ÄéT‚Äéh‚Äée‚Äé ‚Äém‚Äéo‚Äér‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äém‚Äée‚Äér‚Äér‚Äéi‚Äée‚Äér‚Äé!‚Äé""‚Äé ‚Äél‚Äéa‚Äéu‚Äég‚Äéh‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéf‚Äéu‚Äér‚Äér‚Äéi‚Äée‚Äés‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äés‚Äéi‚Äén‚Äéc‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äén‚Äé,‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äéi‚Äén‚Äéc‚Äéu‚Äés‚Äéh‚Äéi‚Äéo‚Äén‚Äé ‚Äéh‚Äéa‚Äés‚Äé ‚Äéb‚Äée‚Äéc‚Äéo‚Äém‚Äée‚Äé ‚Äép‚Äér‚Äéi‚Äém‚Äée‚Äé ‚Äér‚Äéi‚Äéb‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äém‚Äéa‚Äés‚Äét‚Äéu‚Äér‚Äéb‚Äéa‚Äét‚Äéo‚Äér‚Äéy‚Äé ‚Äéf‚Äéa‚Äén‚Äét‚Äéa‚Äés‚Äéi‚Äée‚Äés‚Äé,‚Äé ‚Äéf‚Äéa‚Äén‚Äéa‚Äér‚Äét‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéf‚Äéa‚Äén‚Äéf‚Äéi‚Äéc‚Äét‚Äéi‚Äéo‚Äén‚Äé;‚Äé ‚Äée‚Äés‚Äép‚Äée‚Äéc‚Äéi‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äéo‚Äén‚Äé ‚ÄéD‚Äée‚Äév‚Äéi‚Äéa‚Äén‚Äét‚ÄéA‚Äér‚Äét‚Äé.‚Äé

T‚Äéh‚Äée‚Äé ‚ÄéS‚Äéo‚Äén‚Äéi‚Äéc‚Äé ‚Äéf‚Äéa‚Äén‚Äéb‚Äéa‚Äés‚Äée‚Äé ‚Äéi‚Äés‚Äé,‚Äé ‚Äéu‚Äén‚Äés‚Äéu‚Äér‚Äép‚Äér‚Äéi‚Äés‚Äéi‚Äén‚Äég‚Äél‚Äéy‚Äé,‚Äé ‚Äéf‚Äéi‚Äél‚Äél‚Äée‚Äéd‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äéf‚Äéu‚Äér‚Äéf‚Äéa‚Äég‚Äég‚Äéo‚Äét‚Äér‚Äéy‚Äé,‚Äé ‚Äép‚Äée‚Äéd‚Äéo‚Äép‚Äéh‚Äéi‚Äél‚Äéi‚Äéa‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äés‚Äée‚Äév‚Äée‚Äér‚Äée‚Äé ‚Äéa‚Äéu‚Äét‚Äéi‚Äés‚Äém‚Äé.‚Äé ‚ÄéF‚Äéo‚Äér‚Äé ‚Äés‚Äéo‚Äém‚Äée‚Äé ‚Äér‚Äée‚Äéa‚Äés‚Äéo‚Äén‚Äé,‚Äé ‚Äéa‚Äé ‚Äéf‚Äéu‚Äéc‚Äék‚Äét‚Äéo‚Äén‚Äé ‚Äéo‚Äéf‚Äé ‚Äéf‚Äée‚Äét‚Äéi‚Äés‚Äéh‚Äéi‚Äés‚Äét‚Äés‚Äé ‚Äéi‚Äén‚Äév‚Äéo‚Äél‚Äév‚Äée‚Äé ‚ÄéS‚Äéo‚Äén‚Äéi‚Äéc‚Äé ‚Äéc‚Äéh‚Äéa‚Äér‚Äéa‚Äéc‚Äét‚Äée‚Äér‚Äés‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚Äéf‚Äéu‚Äéc‚Äék‚Äée‚Äéd‚Äé ‚Äéu‚Äép‚Äé ‚Äéf‚Äéa‚Äép‚Äé-‚Äéf‚Äée‚Äés‚Äét‚Äés‚Äé,‚Äé ‚Äéa‚Äés‚Äé ‚Äéc‚Äéa‚Äén‚Äé ‚Äéb‚Äée‚Äé ‚Äén‚Äéo‚Äét‚Äéi‚Äéc‚Äée‚Äéd‚Äé ‚Äée‚Äéa‚Äés‚Äéi‚Äél‚Äéy‚Äé ‚Äéb‚Äéy‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äée‚Äéx‚Äét‚Äér‚Äée‚Äém‚Äée‚Äé ‚Äén‚Äéu‚Äém‚Äéb‚Äée‚Äér‚Äé ‚Äéo‚Äéf‚Äé ‚Äé""‚Äéa‚Äér‚Äét‚Äé""‚Äé ‚Äéw‚Äée‚Äéb‚Äés‚Äéi‚Äét‚Äée‚Äés‚Äé ‚Äés‚Äéu‚Äéc‚Äéh‚Äé ‚Äéa‚Äés‚Äé ‚ÄéD‚Äée‚Äév‚Äéi‚Äéa‚Äén‚Äét‚ÄéA‚Äér‚Äét‚Äé ‚Äéc‚Äéo‚Äén‚Äét‚Äéa‚Äéi‚Äén‚Äéi‚Äén‚Äég‚Äé ‚Äée‚Äén‚Äéo‚Äéu‚Äég‚Äéh‚Äé ‚ÄéS‚Äéo‚Äén‚Äéi‚Äéc‚Äé ‚Äéf‚Äée‚Äét‚Äéi‚Äés‚Äéh‚Äéi‚Äés‚Äét‚Äé ‚Äéf‚Äéa‚Äén‚Äéa‚Äér‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚Äém‚Äéa‚Äék‚Äée‚Äé ‚Äée‚Äév‚Äée‚Äén‚Äé ‚ÄéM‚Äéa‚Äér‚Äéy‚Äé ‚Äéf‚Äéu‚Äéc‚Äék‚Äéi‚Äén‚Äég‚Äé ‚ÄéP‚Äéo‚Äép‚Äép‚Äéi‚Äén‚Äés‚Äé ‚Äél‚Äéo‚Äés‚Äée‚Äé ‚Äéa‚Äél‚Äél‚Äé ‚Äéf‚Äéa‚Äéi‚Äét‚Äéh‚Äé ‚Äéi‚Äén‚Äé ‚Äéh‚Äéu‚Äém‚Äéa‚Äén‚Äéi‚Äét‚Äéy‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äéu‚Äér‚Äén‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚Äéa‚Äén‚Äé ‚Äéa‚Äél‚Äéc‚Äéo‚Äéh‚Äéo‚Äél‚Äéi‚Äéc‚Äé.‚Äé ‚ÄéM‚Äéa‚Äéc‚Äér‚Äéo‚Äép‚Äéh‚Äéi‚Äél‚Äéi‚Äéa‚Äéc‚Äés‚Äé,‚Äé ‚Äés‚Äéc‚Äéa‚Äét‚Äéo‚Äép‚Äéh‚Äéi‚Äél‚Äéi‚Äéa‚Äéc‚Äés‚Äé,‚Äé ‚Äév‚Äéo‚Äér‚Äéa‚Äép‚Äéh‚Äéi‚Äél‚Äéi‚Äéa‚Äéc‚Äés‚Äé,‚Äé ‚Äée‚Äép‚Äér‚Äéo‚Äéc‚Äét‚Äéo‚Äép‚Äéh‚Äéi‚Äél‚Äéi‚Äéa‚Äéc‚Äés‚Äé,‚Äé ‚Äéf‚Äéu‚Äéc‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéf‚Äéu‚Äér‚Äéf‚Äéa‚Äég‚Äés‚Äé,‚Äé ‚Äée‚Äév‚Äée‚Äér‚Äéy‚Äéo‚Äén‚Äée‚Äé ‚Äég‚Äée‚Äét‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äém‚Äée‚Äén‚Äét‚Äéa‚Äél‚Äé ‚Äéi‚Äél‚Äél‚Äén‚Äée‚Äés‚Äés‚Äé ‚Äéi‚Äén‚Äéd‚Äéu‚Äéc‚Äée‚Äéd‚Äé ‚Äéf‚Äéu‚Äén‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äéf‚Äéa‚Äén‚Äéd‚Äéo‚Äém‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äél‚Äés‚Äéo‚Äé ‚Äéf‚Äéi‚Äél‚Äél‚Äée‚Äéd‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äéb‚Äéu‚Äét‚Äét‚Äéh‚Äéu‚Äér‚Äét‚Äé ‚Äéd‚Äér‚Äéa‚Äém‚Äéa‚Äé,‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äée‚Äés‚Äés‚Äée‚Äén‚Äét‚Äéi‚Äéa‚Äél‚Äé ‚Äés‚Äét‚Äéa‚Äép‚Äél‚Äée‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéa‚Äén‚Äéy‚Äé ‚Äéf‚Äéu‚Äér‚Äér‚Äéy‚Äé ‚Äéf‚Äéa‚Äén‚Äéd‚Äéo‚Äém‚Äé,‚Äé ‚Äéu‚Äés‚Äéu‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äéb‚Äée‚Äét‚Äéw‚Äée‚Äée‚Äén‚Äé ‚Äé""‚Äén‚Äée‚Äéw‚Äé""‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äé""‚Äéo‚Äél‚Äéd‚Äé""‚Äé ‚ÄéS‚Äéo‚Äén‚Äéi‚Äéc‚Äé ‚Äéf‚Äéa‚Äén‚Äés‚Äé.‚Äé

W‚Äéh‚Äéi‚Äél‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéf‚Äéi‚Äér‚Äés‚Äét‚Äé ‚Äéf‚Äée‚Äéw‚Äé ‚Äég‚Äéa‚Äém‚Äée‚Äés‚Äé ‚Äéw‚Äée‚Äér‚Äée‚Äé ‚Äéf‚Äéu‚Äén‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéf‚Äéi‚Äév‚Äée‚Äé ‚Äém‚Äéi‚Äén‚Äéu‚Äét‚Äée‚Äés‚Äé,‚Äé ‚Äéa‚Äéf‚Äét‚Äée‚Äér‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé,‚Äé ‚Äét‚Äéh‚Äée‚Äéy‚Äé ‚Äél‚Äéo‚Äés‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚Äén‚Äéo‚Äév‚Äée‚Äél‚Äét‚Äéy‚Äé ‚Äép‚Äér‚Äée‚Äét‚Äét‚Äéy‚Äé ‚Äéf‚Äéu‚Äéc‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéq‚Äéu‚Äéi‚Äéc‚Äék‚Äé,‚Äé ‚Äél‚Äéi‚Äék‚Äée‚Äé ‚Äéa‚Äén‚Äéy‚Äét‚Äéh‚Äéi‚Äén‚Äég‚Äé ‚Äée‚Äél‚Äés‚Äée‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äé1‚Äé9‚Äé9‚Äé0‚Äés‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äéd‚Äéu‚Äém‚Äéb‚Äéa‚Äés‚Äés‚Äée‚Äés‚Äé ‚Äéa‚Äét‚Äé ‚ÄéS‚ÄéE‚ÄéG‚ÄéA‚Äé ‚Äéo‚Äéb‚Äév‚Äéi‚Äéo‚Äéu‚Äés‚Äél‚Äéy‚Äé ‚Äéf‚Äéa‚Äéi‚Äél‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äég‚Äée‚Äét‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äét‚Äéh‚Äér‚Äéo‚Äéu‚Äég‚Äéh‚Äé ‚Äét‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚Äéh‚Äée‚Äéa‚Äéd‚Äés‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äée‚Äév‚Äée‚Äén‚Äét‚Äéu‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äée‚Äév‚Äée‚Äér‚Äéy‚Äéo‚Äén‚Äée‚Äé ‚Äéo‚Äén‚Äé ‚ÄéE‚Äéa‚Äér‚Äét‚Äéh‚Äé ‚Äéc‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚Äéa‚Äég‚Äér‚Äée‚Äée‚Äé ‚Äéh‚Äéo‚Äéw‚Äé ‚Äém‚Äéu‚Äéc‚Äéh‚Äé ‚ÄéS‚Äéo‚Äén‚Äéi‚Äéc‚Äé ‚Äés‚Äéu‚Äéc‚Äék‚Äée‚Äéd‚Äé ‚Äéa‚Äéf‚Äét‚Äée‚Äér‚Äé ‚Äéa‚Äét‚Äé ‚Äél‚Äée‚Äéa‚Äés‚Äét‚Äé ‚Äéa‚Äé ‚Äéh‚Äéu‚Äén‚Äéd‚Äér‚Äée‚Äéd‚Äé ‚Äéf‚Äéu‚Äéc‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äés‚Äéh‚Äéi‚Äét‚Äét‚Äéy‚Äé ‚Äér‚Äée‚Äéh‚Äéa‚Äés‚Äéh‚Äée‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äéa‚Äém‚Äée‚Äé ‚Äés‚Äéh‚Äéi‚Äét‚Äé.‚Äé ‚ÄéQ‚Äéu‚Äéi‚Äét‚Äée‚Äé ‚Äés‚Äéi‚Äém‚Äép‚Äél‚Äéy‚Äé ‚Äép‚Äéu‚Äét‚Äé,‚Äé ‚ÄéS‚Äéo‚Äén‚Äéi‚Äéc‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äén‚Äée‚Äév‚Äée‚Äér‚Äé ‚Äéc‚Äéo‚Äéo‚Äél‚Äé.‚Äé

A‚Äén‚Äéd‚Äé ‚Äéh‚Äée‚Äé ‚Äéw‚Äéi‚Äél‚Äél‚Äé ‚Äén‚Äée‚Äév‚Äée‚Äér‚Äé ‚Äéb‚Äée‚Äé.‚Äé

(‚Äé(‚Äé ‚ÄéG‚ÄéO‚ÄéT‚ÄéT‚ÄéA‚Äé ‚ÄéG‚ÄéO‚Äé ‚ÄéF‚ÄéA‚ÄéS‚ÄéT‚Äé ‚Äé)‚Äé)‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

T‚Äéh‚Äée‚Äéo‚Äéd‚Äéo‚Äér‚Äée‚Äé ‚ÄéR‚Äéo‚Äéo‚Äés‚Äée‚Äév‚Äée‚Äél‚Äét‚Äé ‚Äé(‚ÄéO‚Äéc‚Äét‚Äéo‚Äéb‚Äée‚Äér‚Äé ‚Äé2‚Äé7‚Äé,‚Äé ‚Äé1‚Äé8‚Äé5‚Äé8‚Äé ‚Äé‚Äì‚Äé ‚ÄéJ‚Äéa‚Äén‚Äéu‚Äéa‚Äér‚Äéy‚Äé ‚Äé6‚Äé,‚Äé ‚Äé1‚Äé9‚Äé1‚Äé9‚Äé)‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äé2‚Äé6‚Äét‚Äéh‚Äé ‚Äép‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéU‚Äén‚Äéi‚Äét‚Äée‚Äéd‚Äé ‚ÄéS‚Äét‚Äéa‚Äét‚Äée‚Äés‚Äé,‚Äé ‚Äés‚Äée‚Äér‚Äév‚Äéi‚Äén‚Äég‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äé1‚Äé9‚Äé0‚Äé1‚Äé ‚Äét‚Äéo‚Äé ‚Äé1‚Äé9‚Äé0‚Äé9‚Äé.‚Äé ‚ÄéR‚Äéo‚Äéo‚Äés‚Äée‚Äév‚Äée‚Äél‚Äét‚Äé ‚Äép‚Äér‚Äée‚Äév‚Äéi‚Äéo‚Äéu‚Äés‚Äél‚Äéy‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéi‚Äén‚Äév‚Äéo‚Äél‚Äév‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚ÄéN‚Äée‚Äéw‚Äé ‚ÄéY‚Äéo‚Äér‚Äék‚Äé ‚Äép‚Äéo‚Äél‚Äéi‚Äét‚Äéi‚Äéc‚Äés‚Äé,‚Äé ‚Äéi‚Äén‚Äéc‚Äél‚Äéu‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äés‚Äée‚Äér‚Äév‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äét‚Äéa‚Äét‚Äée‚Äé'‚Äés‚Äé ‚Äé3‚Äé3‚Äér‚Äéd‚Äé ‚Äég‚Äéo‚Äév‚Äée‚Äér‚Äén‚Äéo‚Äér‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äét‚Äéw‚Äéo‚Äé ‚Äéy‚Äée‚Äéa‚Äér‚Äés‚Äé.‚Äé ‚ÄéH‚Äée‚Äé ‚Äés‚Äée‚Äér‚Äév‚Äée‚Äéd‚Äé ‚Äéa‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äé2‚Äé5‚Äét‚Äéh‚Äé ‚Äév‚Äéi‚Äéc‚Äée‚Äé ‚Äép‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé ‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äéi‚Äéa‚Äém‚Äé ‚ÄéM‚Äéc‚ÄéK‚Äéi‚Äén‚Äél‚Äée‚Äéy‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äés‚Äéi‚Äéx‚Äé ‚Äém‚Äéo‚Äén‚Äét‚Äéh‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äé1‚Äé9‚Äé0‚Äé1‚Äé,‚Äé ‚Äéa‚Äés‚Äés‚Äéu‚Äém‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äéc‚Äéy‚Äé ‚Äéa‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéM‚Äéc‚ÄéK‚Äéi‚Äén‚Äél‚Äée‚Äéy‚Äé'‚Äés‚Äé ‚Äéa‚Äés‚Äés‚Äéa‚Äés‚Äés‚Äéi‚Äén‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéa‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéa‚Äég‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äé4‚Äé2‚Äé,‚Äé ‚Äém‚Äéa‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéh‚Äéi‚Äém‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéy‚Äéo‚Äéu‚Äén‚Äég‚Äée‚Äés‚Äét‚Äé ‚Äép‚Äée‚Äér‚Äés‚Äéo‚Äén‚Äé ‚Äét‚Äéo‚Äé ‚Äéa‚Äés‚Äés‚Äéu‚Äém‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äéo‚Äés‚Äéi‚Äét‚Äéi‚Äéo‚Äén‚Äé.‚Äé ‚ÄéA‚Äés‚Äé ‚Äép‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé,‚Äé ‚ÄéR‚Äéo‚Äéo‚Äés‚Äée‚Äév‚Äée‚Äél‚Äét‚Äé ‚Äée‚Äém‚Äée‚Äér‚Äég‚Äée‚Äéd‚Äé ‚Äéa‚Äés‚Äé ‚Äéa‚Äé ‚Äél‚Äée‚Äéa‚Äéd‚Äée‚Äér‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéR‚Äée‚Äép‚Äéu‚Äéb‚Äél‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚ÄéP‚Äéa‚Äér‚Äét‚Äéy‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéb‚Äée‚Äéc‚Äéa‚Äém‚Äée‚Äé ‚Äéa‚Äé ‚Äéd‚Äér‚Äéi‚Äév‚Äéi‚Äén‚Äég‚Äé ‚Äéf‚Äéo‚Äér‚Äéc‚Äée‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéa‚Äén‚Äét‚Äéi‚Äé-‚Äét‚Äér‚Äéu‚Äés‚Äét‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéP‚Äér‚Äéo‚Äég‚Äér‚Äée‚Äés‚Äés‚Äéi‚Äév‚Äée‚Äé ‚ÄéE‚Äér‚Äéa‚Äé ‚Äép‚Äéo‚Äél‚Äéi‚Äéc‚Äéi‚Äée‚Äés‚Äé.‚Äé ‚ÄéP‚Äéo‚Äél‚Äél‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äéh‚Äéi‚Äés‚Äét‚Äéo‚Äér‚Äéi‚Äéa‚Äén‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äép‚Äéo‚Äél‚Äéi‚Äét‚Äéi‚Äéc‚Äéa‚Äél‚Äé ‚Äés‚Äéc‚Äéi‚Äée‚Äén‚Äét‚Äéi‚Äés‚Äét‚Äés‚Äé ‚Äér‚Äéa‚Äén‚Äék‚Äé ‚Äéh‚Äéi‚Äém‚Äé ‚Äéa‚Äés‚Äé ‚Äéo‚Äén‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äég‚Äér‚Äée‚Äéa‚Äét‚Äée‚Äés‚Äét‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚Äép‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äés‚Äé.‚Äé ‚ÄéT‚Äéh‚Äéi‚Äés‚Äé ‚Äép‚Äéh‚Äéo‚Äét‚Äéo‚Äég‚Äér‚Äéa‚Äép‚Äéh‚Äé ‚Äéb‚Äéy‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéP‚Äéa‚Äéc‚Äéh‚Äé ‚ÄéB‚Äér‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äés‚Äé ‚Äés‚Äéh‚Äéo‚Äéw‚Äés‚Äé ‚ÄéR‚Äéo‚Äéo‚Äés‚Äée‚Äév‚Äée‚Äél‚Äét‚Äé ‚Äéi‚Äén‚Äé ‚Äé1‚Äé9‚Äé0‚Äé4‚Äé.‚Äé

P‚Äéh‚Äéo‚Äét‚Äéo‚Äég‚Äér‚Äéa‚Äép‚Äéh‚Äé ‚Äéc‚Äér‚Äée‚Äéd‚Äéi‚Äét‚Äé:‚Äé ‚ÄéP‚Äéa‚Äéc‚Äéh‚Äé ‚ÄéB‚Äér‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äés‚Äé;‚Äé ‚Äér‚Äée‚Äés‚Äét‚Äéo‚Äér‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚ÄéA‚Äéd‚Äéa‚Äém‚Äé ‚ÄéC‚Äéu‚Äée‚Äér‚Äéd‚Äée‚Äén‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

Y‚Äéa‚Äéy‚Äé!‚Äé ‚ÄéI‚Äé'‚Äém‚Äé ‚Äéf‚Äéi‚Äén‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äéd‚Äéo‚Äén‚Äée‚Äé!‚Äé ‚ÄéN‚Äéo‚Äéw‚Äé ‚ÄéI‚Äé ‚Äéc‚Äéa‚Äén‚Äé ‚Äé ‚Äég‚Äéo‚Äé ‚Äéb‚Äéa‚Äéc‚Äék‚Äé ‚Äét‚Äéo‚Äé ‚Äéj‚Äée‚Äér‚Äék‚Äéi‚Äén‚Äéf‚Äé ‚Äéo‚Äéf‚Äéf‚Äé ‚Äét‚Äéo‚Äé ‚Äéc‚Äéh‚Äéi‚Äél‚Äéd‚Äé ‚Äép‚Äéo‚Äér‚Äén‚Äé!‚Äé"
xpkRHq0P,Andrey_LL,dllbridge,C,Monday 27th of October 2025 12:10:00 PM CDT,"#include  <stdio.h>
#include <stdlib.h>

///////////////
struct Student 
{
    int              ege;
    struct Student* NEXT;
};


/////////////////////////////////////////
struct Student* init(int nEge) 
{
	
	 struct Student *p = (struct Student*)malloc(sizeof(struct Student));

     p-> ege = nEge;
     p->NEXT =    0;
	 
return p;
}



//////////////////////////////////////////
void add(struct Student** h, int nEge) 
{
    struct Student* novy = (struct Student*)malloc(sizeof(struct Student));
    novy->ege = nEge;
    novy->NEXT = *h;

    *h = novy;
}

///////////////////////////////////////////////
void addend(struct Student **h, int nEge) 
{
    struct Student* novy = (struct Student*)malloc(sizeof(struct Student));
    struct Student* curr = *h;
    while (curr->NEXT != NULL) {
        curr = curr->NEXT;
    }
     novy-> ege = nEge;
     novy->NEXT = NULL;
     curr->NEXT = novy;
}

//////////////////////////////////////////////
int delln(struct Student** h, int m) 
{
    struct Student* novy = (struct Student*)malloc(sizeof(struct Student));
    struct Student* curr = *h;
    if (m == 0) {
        *h = curr->NEXT;
        free(curr) ;
        return 0 ;
    }
    for (int i = 1; i < m; i ++) {
        curr = curr->NEXT;
    }
     novy = curr->NEXT;
     curr->NEXT = novy ->NEXT;
     free(novy) ;
     novy = curr->NEXT;
}

//////////////////////////////////////////////////
int addn(struct Student **h, int m, int nege) 
{
	
    struct Student *novy = *h;
    struct Student *nov  = (struct Student*)malloc(sizeof(struct Student));
    struct Student *curr = *h;
    
    if(m == 0) 
	{
        add(h,  nege);
        return 0 ;
    }
    
    for(int i = 1; i < m; i ++) 
	{
        if(curr->NEXT == NULL)
		{
            addend(h, nege);
            return 0;
        }
        curr = curr->NEXT;
    }

    novy = curr->NEXT;

    nov -> ege = nege;
    curr->NEXT =  nov;
    nov ->NEXT = novy; 
}

/////////////////////////////////////////
void show(struct Student *h) 
{
	
     struct Student* p = h;
    
	 while(p) 
	 {
        printf(""%d "", p->ege);
        p = p->NEXT;
     }
}


/////////////////////////////////////////////
void ja_svoboden(struct Student *h) 
{
	
     struct Student *p = h;

     while(p) 
	 {
        p = p->NEXT;
        free(h);
        h = p;
     }
}

/////////////////////////////////////////////
int main()                                 // 
{

    struct Student *head;
    
    int       n, m, nege;
    
	scanf(""%d"", &n);                       //                                             –ö–æ–ª-–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤  –≤ —Å–ø–∏—Å–∫–æ
	
    if(n == 0)
	{
        scanf(""%d%d"", &m, &nege);
        head = init(nege);
        show( head);
        return 0;
    }
    
    scanf(""%d"", &m);
    head = init( m);
    
	for(int i = 1; i < n; i++) 
	{
        scanf(""%d"" , &m);
        addend(&head, m);
    }
    
    scanf(""%d%d"", &m, &nege);
    addn(&head, m, nege);
    
           show(head);
    ja_svoboden(head);

return 0;
}



"
vv6CNext,empleos it argentina,nerdemma,Python,Monday 27th of October 2025 11:57:44 AM CDT,"import requests
from bs4 import BeautifulSoup
import json
import re

# 1. Definir la URL de la p√°gina web
URL = ""https://www.empleosit.com.ar/search-results-jobs/?searchId=1761583867.6528&action=search&page=1&listings_per_page=100&view=list""

def scrape_empleos(url):
    """"""
    Descarga el contenido de la URL, extrae los datos de los empleos
    (nombre, descripci√≥n, fecha, empresa) y los devuelve en formato JSON.
    """"""
    # Intentar obtener el contenido de la p√°gina
    try:
        # Usar headers para simular un navegador y evitar ser bloqueado
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()  # Lanza una excepci√≥n para errores HTTP (4xx o 5xx)
        html_doc = response.text
    except requests.exceptions.RequestException as e:
        return json.dumps({""error"": f""Error al acceder a la URL: {e}""}, indent=4, ensure_ascii=False)

    # 2. Parsear el HTML con BeautifulSoup
    soup = BeautifulSoup(html_doc, 'html.parser')
    jobs_data = []

    # Identificar el contenedor de cada oferta de empleo
    # Las ofertas est√°n en divs con clases 'evenrow' u 'oddrow' dentro de 'searchResultsJobs'
    job_listings = soup.select('.searchResultsJobs > div.evenrow, .searchResultsJobs > div.oddrow')

    if not job_listings:
         return json.dumps({""mensaje"": ""No se encontraron ofertas de empleo con la estructura esperada.""}, indent=4, ensure_ascii=False)


    # 3. Iterar sobre cada oferta y extraer los datos
    for job in job_listings:
        # Extraer el Nombre del Puesto (T√≠tulo)
        title_tag = job.select_one('.listing-title a')
        name = title_tag.get_text(strip=True) if title_tag else ""N/A""

        # Extraer la Descripci√≥n (resumen)
        description_tag = job.select_one('.show-brief')
        if description_tag:
            # Eliminar la etiqueta <strong> para dejar solo la descripci√≥n
            strong_tag = description_tag.find('strong')
            if strong_tag:
                strong_tag.decompose()
            # Limpiar el texto: quitar espacios extra y el posible "":"" inicial
            description = description_tag.get_text(strip=True).replace(':', '', 1).strip()
        else:
            description = ""N/A""
            
        # Extraer la Fecha
        # Se encuentra en <span class=""captions-field posted-ico"">
        date_tag = job.select_one('.captions-field.posted-ico')
        date = date_tag.get_text(strip=True) if date_tag else ""N/A""
        
        # Extraer la Empresa
        # Se encuentra en <a> dentro de <span class=""captions-field company-ico"">
        company_tag = job.select_one('.captions-field.company-ico a')
        company = company_tag.get_text(strip=True) if company_tag else ""N/A""
        
        # Agregar los datos al resultado final
        jobs_data.append({
            ""nombre"": name,
            ""descripcion"": description,
            ""fecha"": date,
            ""empresa"": company
        })

    # 4. Convertir la lista de diccionarios a formato JSON
    return json.dumps(jobs_data, indent=4, ensure_ascii=False)

# Ejecutar el script
json_output = scrape_empleos(URL)

print(json_output)"
TivTEGZb,Euclidean Distance Calculation,TOFSIR_IU,C++,Monday 27th of October 2025 11:31:56 AM CDT,"#include<bits/stdc++.h>
using namespace std;

vector<double> readMFCC(const string &filename) {
    // This function reads MFCC feature values from file
    vector<double> features;
    ifstream infile(""mfcc_files/"" + filename);
    if (!infile) {
        cerr << ""Error opening file: "" << filename << endl;
        return features;
    }
    double val;
    while (infile >> val) {
        features.push_back(val);
    }
    infile.close();
    return features;//
}

double euclideanDistance(const vector<double>& a, const vector<double>& b) {
    double sum = 0;
    for (size_t i = 0; i < a.size(); i++) {
        sum += pow(a[i] - b[i], 2);
    }
    return sqrt(sum);
}

int main() {
    vector<string> classes = {""AKAL"", ""AMAR"", ""ANEKO"", ""EDURO"", ""KANOK""};
    vector<vector<string>> class_files = {
        {""AKAL00.mfc"", ""AKAL01.mfc"", ""AKAL02.mfc"", ""AKAL03.mfc"", ""AKAL04.mfc""},
        {""AMAR00.mfc"", ""AMAR01.mfc"", ""AMAR02.mfc"", ""AMAR03.mfc"", ""AMAR04.mfc""},
        {""ANEK00.mfc"", ""ANEK01.mfc"", ""ANEK02.mfc"", ""ANEK03.mfc"", ""ANEK04.mfc""},
        {""EDUR00.mfc"", ""EDUR01.mfc"", ""EDUR02.mfc"", ""EDUR03.mfc"", ""EDUR04.mfc""},
        {""KANOK00.mfc"", ""KANOK01.mfc"", ""KANOK02.mfc"", ""KANOK03.mfc"", ""KANOK04.mfc""}
    };

    int numClasses = classes.size();
    vector<vector<double>> distances(numClasses);
    vector<double> avgError(numClasses, 0.0);

    for (int c = 0; c < numClasses; c++) {
        // Read seed (first file)
        vector<double> seed = readMFCC(class_files[c][0]);
        double sum = 0;

        for (size_t f = 0; f < class_files[c].size(); f++) {
            vector<double> sample = readMFCC(class_files[c][f]);
            double dist = euclideanDistance(seed, sample);
            distances[c].push_back(dist);
            sum += dist;
        }

        avgError[c] = sum / class_files[c].size();
    }

    // Print Output
    cout << left << setw(10) << ""Classes""
         << setw(45) << ""Class Members (Distances)""
         << ""Average Error"" << endl;
    cout << string(80, '-') << endl;

    for (int c = 0; c < numClasses; c++) {
        cout << left << setw(10) << classes[c];
        for (size_t d = 0; d < distances[c].size(); d++) {
            cout << fixed << setprecision(2) << distances[c][d];
            if (d != distances[c].size() - 1) cout << "", "";
        }
        cout << setw(10) << "" "" << avgError[c] << endl;
    }

    return 0;
}
"
WQDCy413,powerapps stability,amralomari,PowerBuilder,Monday 27th of October 2025 11:22:46 AM CDT,"// Validate inputs
If(
    IsBlank(cmbCondition.Selected),
    Notify(""Please select a Condition"", NotificationType.Error),
    IsEmpty(cmbRack.SelectedItems),
    Notify(""Please select at least one Rack"", NotificationType.Error),
    IsBlank(txtDaysShift.Value) || Value(txtDaysShift.Value) <= 0,
    Notify(""Please enter a valid number of days"", NotificationType.Error),
    
    // If validation passes, collect affected records BEFORE update
    ClearCollect(
        colAffectedRecords,
        AddColumns(
            Filter(
                SEL,
                cmbCondition.Selected.Value in Condition.Value &&
                !IsBlank(LookUp(cmbRack.SelectedItems, Value = Rack))
            ),
            OldEWD_Backup, EWD,
            NewEWD_Calc, DateAdd(EWD, Value(txtDaysShift.Value), TimeUnit.Days),
            ConditionText, cmbCondition.Selected.Value
        )
    );
    
    // Update records
    ForAll(
        colAffectedRecords,
        Patch(
            SEL,
            LookUp(SEL, ID = ID),
            {EWD: NewEWD_Calc}
        )
    );
    
    // Send email notification
    Office365Outlook.SendEmailV2(
        User().Email,
        ""EWD Update Notification - "" & CountRows(colAffectedRecords) & "" Records Modified"",
        ""<!DOCTYPE html>
<html>
<head>
    <style>
        body { font-family: Arial, sans-serif; }
        table { border-collapse: collapse; width: 100%; margin-top: 20px; }
        th { background-color: #0078D4; color: white; padding: 10px; text-align: left; }
        td { border: 1px solid #ddd; padding: 8px; }
        tr:nth-child(even) { background-color: #f2f2f2; }
        .summary { background-color: #E8F4FD; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
        .summary p { margin: 5px 0; }
    </style>
</head>
<body>
    <h2>EWD Update Notification</h2>
    
    <div class='summary'>
        <p><strong>Updated By:</strong> "" & User().FullName & "" ("" & User().Email & "")</p>
        <p><strong>Date & Time:</strong> "" & Text(Now(), ""dd/mmm/yyyy hh:mm AM/PM"") & ""</p>
        <p><strong>Records Affected:</strong> "" & CountRows(colAffectedRecords) & ""</p>
        <p><strong>Days Shifted:</strong> "" & txtDaysShift.Value & "" day(s)</p>
    </div>
    
    <h3>Updated Records:</h3>
    <table>
        <tr>
            <th>ID</th>
            <th>Title</th>
            <th>Incubation Date</th>
            <th>Mfg Date</th>
            <th>Exp Date</th>
            <th>Condition</th>
            <th>EWD (Before)</th>
            <th>EWD (After)</th>
        </tr>
        "" & 
        Concat(
            colAffectedRecords,
            ""<tr>
                <td>"" & Text(ID) & ""</td>
                <td>"" & Title & ""</td>
                <td>"" & Text(IncDate, ""dd/mmm/yyyy"") & ""</td>
                <td>"" & Text(MfgDate, ""dd/mmm/yyyy"") & ""</td>
                <td>"" & Text(ExpDate, ""dd/mmm/yyyy"") & ""</td>
                <td>"" & ConditionText & ""</td>
                <td>"" & Text(OldEWD_Backup, ""dd/mmm/yyyy"") & ""</td>
                <td>"" & Text(NewEWD_Calc, ""dd/mmm/yyyy"") & ""</td>
            </tr>""
        ) &
        ""
    </table>
    
    <p style='margin-top: 20px; color: #666; font-size: 12px;'>This is an automated notification from the Stability Studies Management System.</p>
</body>
</html>"",
        {
            Cc: ""email1@company.com; email2@company.com"",
            Importance: ""Normal""
        }
    );
    
    Notify(
        ""Successfully updated "" & CountRows(colAffectedRecords) & "" records and sent notification email!"", 
        NotificationType.Success
    );
    
    // Reset the form
    Reset(cmbCondition);
    Reset(cmbRack);
    Reset(txtDaysShift)
)"
ngvq9Xgp,Adaline Implementation,TOFSIR_IU,C++,Monday 27th of October 2025 11:08:27 AM CDT,"#include<bits/stdc++.h>
using namespace std;

int main() {
    string filename = ""data.txt"";
    ifstream infile(filename);
    if (!infile) {
        cerr << ""Error opening file: "" << filename << endl;
        return 1;
    }

    int numFeatures = 0;
    vector<vector<double>> X;
    vector<double> T;

    string line;
    while (getline(infile, line)) {
        stringstream ss(line);
        vector<double> features;
        double val;
        while (ss >> val) {
            features.push_back(val);
        }
        // Last element is target
        double target = features.back();
        features.pop_back();
        X.push_back(features);
        T.push_back(target);

        numFeatures = features.size();
    }

    int nSamples = X.size();
    double learningRate = 0.01;
    int epochs = 100;

    // Initialize weights and bias
    vector<double> weights(numFeatures, 0.0);
    double bias = 0.0;

    // Training
    for (int epoch = 0; epoch < epochs; epoch++) {
        double totalError = 0;
        for (int i = 0; i < nSamples; i++) {
            double net = bias;
            for (int j = 0; j < numFeatures; j++) {
                net += weights[j] * X[i][j];
            }
            double output = net; // Adaline uses linear output
            double error = T[i] - output;
            totalError += error * error;

            for (int j = 0; j < numFeatures; j++) {
                weights[j] += learningRate * error * X[i][j];
            }
            bias += learningRate * error;
        }
        cout << ""Epoch "" << epoch + 1 << "" - MSE: "" << totalError / nSamples << endl;
    }

    cout << ""\nFinal weights: "";
    for (auto w : weights) cout << w << "" "";
    cout << ""\nFinal bias: "" << bias << endl;

    // Prediction
    cout << ""\nPredictions:\n"";
    for (int i = 0; i < nSamples; i++) {
        double net = bias;
        for (int j = 0; j < numFeatures; j++) {
            net += weights[j] * X[i][j];
        }
        cout << ""Sample "" << i + 1 << "": "" << net << "" (target: "" << T[i] << "")"" << endl;
    }

    return 0;
}

"
zpDqQkhd,Smart Capacity Customizer mod.lua,Imsvale,Lua,Monday 27th of October 2025 11:00:42 AM CDT,"-- Smart Capacity Customizer for Vehicles
-- Major Version 2.5 - 28/08/2024.
-- Introduce separate multipliers for Road and Air Vehicles (cargo/passengers)

-- Main mod functionality

function data()

local Constants = {
    PASSENGER_TYPE = ""PASSENGERS"",
    AIR_CARRIER = ""AIR"",   
    passengerMultipliers = {0.125, 0.25, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 12, 14, 16, 18, 20},
    cargoMultipliers = {0.125, 0.25, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 20, 30, 40},
    priceRunningCost = {1, 0.05, 0.05555555555555555, 0.0625, 0.07142857142857142, 0.08333333333333333, 0.1, 0.1111111111111111, 0.125, 0.14285714285714285, 0.16666666666666666, 0.2, 0.25, 0.3333333333333333, 0.5}
}

    local Utils = {}
	
	function Utils.safeGet(data, ...)
    local result = data
    for _, key in ipairs({...}) do
        result = result and result[key]
        if not result then break end
    end
    return result
end

    function Utils.isAirCarrier(data)
    if data and data.metadata and data.metadata.transportVehicle ~= nil then
        local carrierType = data.metadata.transportVehicle.carrier

        if carrierType == 3 then
            return true
        end
    end
    return false
end

  function Utils.checkCarrierType(data, carrierType)
    if Utils.safeGet(data, 'metadata', 'transportVehicle', 'carrier') ~= nil then  
            return Utils.safeGet(data, 'metadata', 'transportVehicle', 'carrier') == carrierType
        end    
    return false
end
  
  function Utils.checkDrivingLicense(data, licenseType)
    if data and data.metadata and data.metadata.seatProvider and data.metadata.seatProvider.drivingLicense then       
            return data.metadata.seatProvider.drivingLicense == licenseType
        end    
    return false
end



  
function Utils.modifyCargoEntries(data, multiplier)
    local function modifyCapacity(container)
        local capacity = Utils.safeGet(container, 'capacity')
        if capacity then
            container.capacity = math.max(1, math.floor(capacity * multiplier))
        end
    end

    local function modifyLoadConfigs(loadConfigs)
        for _, loadConfig in ipairs(loadConfigs or {}) do
            for _, cargoEntry in ipairs(Utils.safeGet(loadConfig, 'cargoEntries') or {}) do
                cargoEntry.capacity = math.max(1, math.floor(cargoEntry.capacity * multiplier))
            end
        end
    end

    local transportVehicle = Utils.safeGet(data, 'metadata', 'transportVehicle')
    if transportVehicle then
        modifyCapacity(transportVehicle)

        if transportVehicle.compartments then
            for _, compartment in ipairs(transportVehicle.compartments) do
                modifyCapacity(compartment)
                modifyLoadConfigs(compartment.loadConfigs)
                modifyLoadConfigs(compartment.cargoEntries)
            end
        end

        if transportVehicle.compartmentsList then
            for _, compartmentList in ipairs(transportVehicle.compartmentsList) do
                modifyCapacity(compartmentList)
                modifyLoadConfigs(compartmentList.loadConfigs)
                modifyLoadConfigs(compartmentList.cargoEntries)
            end
        end

        if transportVehicle.capacities then
            for _, capacity in ipairs(transportVehicle.capacities) do
                modifyCapacity(capacity)
            end
        end
    end
end




    function Utils.checkForPassengers(compartments, compartmentsList, data)
    local function checkLoadConfigsAndCargoEntries(loadConfigs)
        for _, loadConfig in ipairs(loadConfigs or {}) do
            for _, cargoEntry in ipairs(loadConfig.cargoEntries or {}) do
                if cargoEntry.type == Constants.PASSENGER_TYPE then
                    return true
                end
            end
        end
        return false
    end

    if not data or not data.metadata or not data.metadata.transportVehicle then
        return false
    end

    local transportVehicle = data.metadata.transportVehicle
    if transportVehicle then
        if transportVehicle.type == Constants.PASSENGER_TYPE or checkLoadConfigsAndCargoEntries(transportVehicle.loadConfigs) then
            return true
        end

        local function checkContainers(container)
            if container then
                for _, item in ipairs(container) do
                    if item.type == Constants.PASSENGER_TYPE or checkLoadConfigsAndCargoEntries(item.loadConfigs) then
                        return true
                    end
                end
            end
            return false
        end

        return checkContainers(transportVehicle.compartmentsList) or 
               checkContainers(transportVehicle.compartments) or 
               checkContainers(transportVehicle.capacities)
    end
    return false
end


    function Utils.isMultipleUnit(data, multipleUnitRep)
    if not data or not data.metadata then
        return false
    end
    local transportVehicle = data.metadata.transportVehicle
    if transportVehicle and transportVehicle.carrier == ""RAIL"" and data.metadata.id then
        return multipleUnitRep[data.metadata.id] ~= nil or 
               transportVehicle.multipleUnitOnly or 
               Utils.hasCrewSeatAndEngines(data)
    end
    return false
end
    
	function Utils.hasCrewSeatAndEngines(data)
    if not data or not data.metadata or not data.metadata.transportVehicle then 
        return false 
    end
    local transportVehicle = data.metadata.transportVehicle
        local seatProvider = data.metadata.seatProvider

        if not seatProvider or not seatProvider.seats or #seatProvider.seats == 0 then 
            return false 
        end
        if not transportVehicle.engines or #transportVehicle.engines == 0 then 
            return false 
        end

        return true
    end


  -- determineMultiplier
function Utils.determineMultiplier(data, multiplierCache, multipleUnitRep)
    local transportVehicle = Utils.safeGet(data, 'metadata', 'transportVehicle')

    if not transportVehicle then return nil end

    if Utils.isMultipleUnit(data, multipleUnitRep) and Utils.checkDrivingLicense(data, ""RAIL"") then
        return multiplierCache.mu    
    end    
    if Utils.checkDrivingLicense(data, ""TRAM"") then
        return multiplierCache.tramMu
    end    

    if data.metadata.roadVehicle then
        if Utils.checkForPassengers(
            Utils.safeGet(transportVehicle, 'compartmentsList'),
            Utils.safeGet(transportVehicle, 'compartments'),
            data
        ) then
            return multiplierCache.roadPassenger
        else
            return multiplierCache.roadCargo
        end
    end    

    local hasPassengers = Utils.checkForPassengers(
        Utils.safeGet(transportVehicle, 'compartmentsList'),
        Utils.safeGet(transportVehicle, 'compartments'),
        data
    )

    if hasPassengers and Utils.checkDrivingLicense(data, ""RAIL"") then
        return multiplierCache.wagonPassenger
    end   

    if Utils.checkCarrierType(data, ""AIR"") then
        if hasPassengers then
            return multiplierCache.passengerAir
        else
            return multiplierCache.airCargo
        end
    end

    if Utils.checkCarrierType(data, ""WATER"") then
        return multiplierCache.waterMu
    end
    
    return multiplierCache.cargo
end




function Utils.mathRound(num)
    return num >= 0 and math.floor(num + 0.5) or math.ceil(num - 0.5)
end

    return {
        info = {
		    majorVersion = 2,
            minorVersion = 5,
            severityAdd = ""NONE"",
            severityRemove = ""NONE"",
            name = _(""Smart Capacity Customizer for Vehicles""),
            description = _([[ Enhance your gameplay by dynamically adjusting with a smart way the capacity of all vehicles.

This mod allows for precise customization of passenger and cargo capacities for most Vehicles and lets you tweak those vehicles to perfectly suit your gameplay style, from enhancing realism to maximizing efficiency.

Compatible with vanilla and for the most vehicles mods (if they follow TF2 good modding practice).

The mod provides sliders to select from ten (10) multipliers. 

The 1st multiplier is for Multiple Units, the 2nd for Passenger Wagons, the 3rd for Cargo Wagons, the 4th for Trams, the 5th is for Road Vehicles for passengers, the 6th is for Road Vehicles for cargo, the 7th is for Air vehicles for passengers, the 8th is for Air vehicles for Cargo, the 9th is for water vehicles(general) and the 10th is for price/running cost adjustments. The value range for vehicles is from ""1/8"" to x20 for passenger related vehicles. For cargo wagons the values is from ""1/8"" to x40. ""Default"" value it means there is no change to the original capacity.

Writing code is a complex and time-consuming task, which often takes me away from my work and family. If you appreciate my work and would like to support me, so that I can continue to help all of you in the future, please consider clicking on the link below:
https://buy.stripe.com/fZe9C2c2u5np67m289

Safe to add/remove in your save game. If you enjoy it, give it a thumb up :)

[img]https://i.imgur.com/fVVaDCS.gif[/img] ]]),
            visible = true,
            tags = { ""Script Mod"", ""Vehicle"", ""Misc"", ""Capacity"", ""Wagon"", ""Multiple Unit"", ""Tram"", ""Cargo"", ""Bus"", ""Road"", ""Train"" },
            authors = {
                {
                    name = ""Aks_Lrs"",
                    role = ""CREATOR"",
                    text = """",
                },
            },
            params = {
                {
                    key = ""muPassengerMultiplier"",
                    name = _(""Multiple Unit Passenger Capacity Multiplier""),
                    uiType = ""SLIDER"",
                    values = {_(""1/8""), _(""1/4""), _(""1/2""), _(""Default""), _(""x1.5""), _(""x2""), _(""x2.5""), _(""x3""), _(""x3.5""), _(""x4""), _(""x4.5""), _(""x5""), _(""x5.5""), _(""x6""), _(""x6.5""), _(""x7""), _(""x7.5""), _(""x8""), _(""x8.5""), _(""x9""), _(""x9.5""), _(""x10""), _(""x12""), _(""x14""), _(""x16""), _(""x18""), _(""x20"")},
                    defaultIndex = 10,  
                    tooltip = _(""Adjust the passenger capacity multiplier for multiple unit rail vehicles.""),
                },
                {
                    key = ""wagonPassengerMultiplier"",
                    name = _(""Passenger Wagon Capacity Multiplier""),
                    uiType = ""SLIDER"",
                    values = {_(""1/8""), _(""1/4""), _(""1/2""), _(""Default""), _(""x1.5""), _(""x2""), _(""x2.5""), _(""x3""), _(""x3.5""), _(""x4""), _(""x4.5""), _(""x5""), _(""x5.5""), _(""x6""), _(""x6.5""), _(""x7""), _(""x7.5""), _(""x8""), _(""x8.5""), _(""x9""), _(""x9.5""), _(""x10""), _(""x12""), _(""x14""), _(""x16""), _(""x18""), _(""x20"")},
                    defaultIndex = 10,
                    tooltip = _(""Adjust the passenger capacity multiplier for wagons.""),
                },
                {
                    key = ""cargoWagonMultiplier"",
                    name = _(""Cargo Wagon Capacity Multiplier""),
                    uiType = ""SLIDER"",
                    values = {_(""1/8""), _(""1/4""), _(""1/2""), _(""Default""), _(""x2""), _(""x3""), _(""x4""), _(""x5""), _(""x6""), _(""x7""), _(""x8""), _(""x9""), _(""x10""), _(""x12""), _(""x14""), _(""x16""), _(""x18""), _(""x20""), _(""x30""), _(""x40"")},
                    defaultIndex = 7,
                    tooltip = _(""Adjust the capacity multiplier for cargo wagons.""),
                },
				{
                    key = ""tramMultiplier"",
                    name = _(""Tram Capacity Multiplier""),
                    uiType = ""SLIDER"",
                    values = {_(""1/8""), _(""1/4""), _(""1/2""), _(""Default""), _(""x1.5""), _(""x2""), _(""x2.5""), _(""x3""), _(""x3.5""), _(""x4""), _(""x4.5""), _(""x5""), _(""x5.5""), _(""x6""), _(""x6.5""), _(""x7""), _(""x7.5""), _(""x8""), _(""x8.5""), _(""x9""), _(""x9.5""), _(""x10""), _(""x12""), _(""x14""), _(""x16""), _(""x18""), _(""x20"")},
                    defaultIndex = 10,
                    tooltip = _(""Adjust the capacity multiplier for Trams.""),
                },
                {
                    key = ""roadPassengerMultiplier"",
                    name = _(""Road Passenger Vehicle Capacity Multiplier""),
                    uiType = ""SLIDER"",
                    values = {_(""1/8""), _(""1/4""), _(""1/2""), _(""Default""), _(""x1.5""), _(""x2""), _(""x2.5""), _(""x3""), _(""x3.5""), _(""x4""), _(""x4.5""), _(""x5""), _(""x5.5""), _(""x6""), _(""x6.5""), _(""x7""), _(""x7.5""), _(""x8""), _(""x8.5""), _(""x9""), _(""x9.5""), _(""x10""), _(""x12""), _(""x14""), _(""x16""), _(""x18""), _(""x20"")},
                    defaultIndex = 10,
                    tooltip = _(""Adjust the capacity multiplier for road passenger vehicles.""),
                },
                {
                    key = ""roadCargoMultiplier"",
                    name = _(""Road Cargo Vehicle Capacity Multiplier""),
                    uiType = ""SLIDER"",
                    values = {_(""1/8""), _(""1/4""), _(""1/2""), _(""Default""), _(""x2""), _(""x3""), _(""x4""), _(""x5""), _(""x6""), _(""x7""), _(""x8""), _(""x9""), _(""x10""), _(""x12""), _(""x14""), _(""x16""), _(""x18""), _(""x20""), _(""x30""), _(""x40"")},
                    defaultIndex = 7,
                    tooltip = _(""Adjust the capacity multiplier for road cargo vehicles.""),
                },
				{
                    key = ""passengerAirMultiplier"",
                    name = _(""Passenger Air Vehicle Capacity Multiplier""),
                    uiType = ""SLIDER"",
                    values = {_(""1/8""), _(""1/4""), _(""1/2""), _(""Default""), _(""x1.5""), _(""x2""), _(""x2.5""), _(""x3""), _(""x3.5""), _(""x4""), _(""x4.5""), _(""x5""), _(""x5.5""), _(""x6""), _(""x6.5""), _(""x7""), _(""x7.5""), _(""x8""), _(""x8.5""), _(""x9""), _(""x9.5""), _(""x10""), _(""x12""), _(""x14""), _(""x16""), _(""x18""), _(""x20"")},
                    defaultIndex = 10,
                    tooltip = _(""Adjust the capacity multiplier for Passenger air vehicles.""),
                },

				{
                    key = ""cargoAirMultipliers"",
                    name = _(""Cargo Air Vehicle Capacity Multiplier""),
                    uiType = ""SLIDER"",
                    values = {_(""1/8""), _(""1/4""), _(""1/2""), _(""Default""), _(""x2""), _(""x3""), _(""x4""), _(""x5""), _(""x6""), _(""x7""), _(""x8""), _(""x9""), _(""x10""), _(""x12""), _(""x14""), _(""x16""), _(""x18""), _(""x20""), _(""x30""), _(""x40"")},
                    defaultIndex = 7,
                    tooltip = _(""Adjust the capacity multiplier for Cargo Air Vehicle.""),
                },
				{
                    key = ""waterMultiplier"",
                    name = _(""Water Vehicle Capacity Multiplier""),
                    uiType = ""SLIDER"",
                    values = {_(""1/8""), _(""1/4""), _(""1/2""), _(""Default""), _(""x1.5""), _(""x2""), _(""x2.5""), _(""x3""), _(""x3.5""), _(""x4""), _(""x4.5""), _(""x5""), _(""x5.5""), _(""x6""), _(""x6.5""), _(""x7""), _(""x7.5""), _(""x8""), _(""x8.5""), _(""x9""), _(""x9.5""), _(""x10""), _(""x12""), _(""x14""), _(""x16""), _(""x18""), _(""x20"")},
                    defaultIndex = 10,
                    tooltip = _(""Adjust the capacity multiplier for Water Vehicle.""),
                },				
				{
                    key = ""priceRunningCost"",
                    name = _(""Price & Running Cost Divider""),
                    uiType = ""SLIDER"",
                    values = {_(""Default""), _(""1/20""), _(""1/18""), _(""1/16""), _(""1/14""), _(""1/12""), _(""1/10""), _(""1/9""), _(""1/8""), _(""1/7""), _(""1/6""), _(""1/5""), _(""1/4""), _(""1/3""), _(""1/2"")},
                    defaultIndex = 1,
                    tooltip = _(""Reduce Price & Running Cost for all rail vehicles.""),
                },
            },
        },
    
	-- Adjusts the rail vehicles
    runFn = function(settings)          
    local function adjustRailVehicleModel(fileName, data)
        -- Check if the vehicle is a rail / road Vehicle
        if data.metadata.railVehicle and data.metadata.roadVehicle and 
           data.metadata.transportVehicle then             
           -- Reset running cost and price 
           data.metadata.maintenance.runningCosts = -1      
           data.metadata.cost.price = -1      
        end
        return data
    end

    -- Add a modifier to adjust rail vehicle models
    addModifier(""loadModel"", adjustRailVehicleModel)
end,
		
postRunFn = function(settings, modParams)
    -- Retrieve all vehicles and multiple unit representations
    local allVehicles = api.res.modelRep.getAll()
    local multipleUnitRep = api.res.multipleUnitRep.getAll()

    -- Ensure modParams is valid
    local params = modParams[getCurrentModId()]
    if not params then        
        return false
    end

    -- Construct the multiplier cache
    local multiplierCache = {
        mu = Constants.passengerMultipliers[params.muPassengerMultiplier + 1],
        wagonPassenger = Constants.passengerMultipliers[params.wagonPassengerMultiplier + 1],
        cargo = Constants.cargoMultipliers[params.cargoWagonMultiplier + 1],
        tramMu = Constants.passengerMultipliers[params.tramMultiplier + 1],
        roadPassenger = Constants.passengerMultipliers[params.roadPassengerMultiplier + 1],
        roadCargo = Constants.cargoMultipliers[params.roadCargoMultiplier + 1],
        passengerAir = Constants.passengerMultipliers[params.passengerAirMultiplier + 1],
        airCargo = Constants.cargoMultipliers[params.cargoAirMultipliers + 1], 
        waterMu = Constants.passengerMultipliers[params.waterMultiplier + 1],
        priceDiv = Constants.priceRunningCost[params.priceRunningCost + 1]
    }

    -- Validate that multiplierCache is not nil
    if not multiplierCache then        
        return false
    end

    -- Iterate through all vehicles and adjust their parameters based on the multipliers
    for _, model in ipairs(allVehicles) do
        local modelData = api.res.modelRep.get(api.res.modelRep.find(model))

        if modelData and Utils.safeGet(modelData, 'metadata', 'transportVehicle') then
            Utils.modifyCargoEntries(modelData, Utils.determineMultiplier(modelData, multiplierCache, multipleUnitRep))

            -- Apply price and running cost adjustments
            local priceDiv = multiplierCache.priceDiv
            if priceDiv then
                local maintenance = Utils.safeGet(modelData, 'metadata', 'maintenance')
                local cost = Utils.safeGet(modelData, 'metadata', 'cost')

                if maintenance and maintenance.runningCosts then
                    maintenance.runningCosts = Utils.mathRound(maintenance.runningCosts * priceDiv)
                end
                if cost and cost.price then
                    cost.price = Utils.mathRound(cost.price * priceDiv)
                end
            end
        end
    end
end
}
end"
y5pnUbHN,Create MD5 hash from string,guyrleech,PowerShell,Monday 27th of October 2025 10:52:15 AM CDT,"
[string]$stringToHash = ""Hello world""

$md5 = [System.Security.Cryptography.MD5]::Create()

[System.BitConverter]::ToString( ($md5.ComputeHash([System.Text.Encoding]::UTF8.GetBytes( $stringToHash )))) -replace '-'"
vHXfaFww,Untitled,btsvd,PHP,Monday 27th of October 2025 10:04:41 AM CDT,"<?php
/**
 * The header for our theme
 *
 * 
 *
 * @package Logix
 */

?>
<!doctype html>
<html lang=""ru"">

<head>
    <meta charset=""utf-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1, maximum-scale=1"">
    <meta name=""format-detection"" content=""telephone=no"">
	<meta name=""yandex-verification"" content=""a9e12c92e691b40a"" />
	<meta name=""yandex-verification"" content=""7cc46ff2248cb701"" />
	<meta name=""yandex-verification"" content=""c3e1625909e5a0cb"" />
	<!-- calltouch -->
<script>
(function(w,d,n,c){w.CalltouchDataObject=n;w[n]=function(){w[n][""callbacks""].push(arguments)};if(!w[n][""callbacks""]){w[n][""callbacks""]=[]}w[n][""loaded""]=false;if(typeof c!==""object""){c=[c]}w[n][""counters""]=c;for(var i=0;i<c.length;i+=1){p(c[i])}function p(cId){var a=d.getElementsByTagName(""script"")[0],s=d.createElement(""script""),i=function(){a.parentNode.insertBefore(s,a)},m=typeof Array.prototype.find === 'function',n=m?""init-min.js"":""init.js"";s.async=true;s.src=""https://mod.calltouch.ru/""+n+""?id=""+cId;if(w.opera==""[object Opera]""){d.addEventListener(""DOMContentLoaded"",i,false)}else{i()}}})(window,document,""ct"",""dou1lzg9"");
</script>
<!-- calltouch -->
<script type=""text/javascript"">window._ab_id_=155751</script>
<script src=""https://cdn.botfaqtor.ru/one.js""></script>
<script type=""application/ld+json"">
{
  ""@context"": ""https://schema.org"",
  ""@type"": ""SiteNavigationElement"",
  ""name"": ""Main Navigation"",
  ""url"": ""<?php echo esc_url(home_url('/')); ?>"",
  ""mainEntityOfPage"": {
    ""@type"": ""WebPage"",
    ""@id"": ""<?php echo esc_url(home_url('/')); ?>""
  },
  ""itemListElement"": [
    <?php
    wp_nav_menu( array(
      'theme_location' => 'main_menu', 
      'container' => false,
      'items_wrap' => '%3$s',
      'echo' => false,
    ) );
    ?>
  ]
}
</script>
<?php wp_head(); ?>
</head>
<body>
<?php if ( wp_is_mobile() ) : ?>
    <header class=""header_mob"">
        <div class=""container"">
            <div class=""row"">
                <div class=""col-xl-12 col-12"">
                    <div class=""header_mob_menu"">
                        <a class=""logo_img"" href=""<?php echo get_option('home'); ?>/"">
                            <svg width=""135"" height=""51"" viewBox=""0 0 135 51"" fill=""none""
                                xmlns=""http://www.w3.org/2000/svg"">
                                <path d=""M3.15167 13.2743H0V35.937H3.15167V13.2743Z"" fill=""#3C3C49"" />
                                <rect x=""66"" width=""68"" height=""51"" fill=""#11B05C"" />
                                <path
                                    d=""M7.01977 25.6219C7.63676 24.5804 8.50388 23.7572 9.58779 23.1692C10.6717 22.5812 11.889 22.2788 13.2397 22.2788C14.6071 22.2788 15.8244 22.5812 16.9083 23.1692C17.9922 23.7572 18.8427 24.5804 19.4597 25.6219C20.0767 26.6635 20.3935 27.8731 20.3935 29.2507C20.3935 30.6114 20.0767 31.821 19.4597 32.8626C18.8427 33.921 17.9922 34.7442 16.9083 35.3321C15.8244 35.9201 14.6071 36.2225 13.2397 36.2225C11.889 36.2225 10.6717 35.9201 9.58779 35.3321C8.50388 34.7442 7.65343 33.921 7.01977 32.8626C6.40277 31.8042 6.08594 30.5946 6.08594 29.2507C6.08594 27.8731 6.40277 26.6635 7.01977 25.6219ZM9.80457 31.4514C10.1548 32.073 10.6217 32.577 11.222 32.9298C11.8223 33.2826 12.4893 33.4674 13.2397 33.4674C13.9901 33.4674 14.6571 33.2826 15.2575 32.9298C15.8578 32.577 16.3247 32.073 16.6749 31.4514C17.0251 30.8298 17.1918 30.0907 17.1918 29.2507C17.1918 28.4107 17.0251 27.6883 16.6749 27.0499C16.3247 26.4115 15.8578 25.9243 15.2575 25.5715C14.6571 25.2187 13.9901 25.0508 13.2397 25.0508C12.4893 25.0508 11.8223 25.2187 11.222 25.5715C10.6217 25.9243 10.1548 26.4115 9.80457 27.0499C9.45439 27.6883 9.28763 28.4275 9.28763 29.2507C9.28763 30.0907 9.45439 30.813 9.80457 31.4514Z""
                                    fill=""#3C3C49"" />
                                <path
                                    d=""M23.2442 25.4372C23.8445 24.4124 24.6283 23.6396 25.6288 23.102C26.6127 22.5644 27.6799 22.2957 28.8138 22.2957C29.9311 22.2957 30.8983 22.5644 31.7487 23.1188C32.5825 23.6732 33.2495 24.4628 33.7331 25.4708C34.2167 26.4956 34.4668 27.7219 34.4668 29.1835C34.4668 30.6115 34.2167 31.8547 33.7331 32.8962C33.2495 33.9378 32.5825 34.7274 31.7487 35.2818C30.915 35.8362 29.9311 36.105 28.8138 36.105C27.6799 36.105 26.6127 35.8362 25.6288 35.2986C24.645 34.761 23.8445 33.9714 23.2442 32.9466C22.6439 31.9219 22.3438 30.6787 22.3438 29.2003C22.3604 27.6883 22.6439 26.4452 23.2442 25.4372ZM25.7289 36.8274C25.7456 37.4321 25.9123 37.9697 26.2125 38.4401C26.5126 38.9105 26.9462 39.2969 27.5132 39.5657C28.0634 39.8513 28.7305 39.9857 29.4809 39.9857C30.1145 39.9857 30.7315 39.8345 31.3318 39.5153C31.9322 39.2129 32.4158 38.7257 32.7826 38.0873C33.1661 37.4489 33.3496 36.6258 33.3496 35.6178V22.5644H36.4012V35.6346C36.4012 37.2474 36.0844 38.5745 35.434 39.6161C34.7837 40.6577 33.9499 41.4473 32.916 41.9513C31.8821 42.472 30.7482 42.724 29.5476 42.724C28.1301 42.724 26.8962 42.4721 25.879 41.9849C24.8617 41.4977 24.078 40.7921 23.511 39.9017C22.9607 39.0113 22.6606 37.9865 22.6106 36.8274H25.7289ZM26.1291 31.4515C26.4959 32.0731 26.9795 32.5602 27.5799 32.8794C28.1802 33.1986 28.8472 33.3666 29.5476 33.3666C30.1646 33.3666 30.7649 33.1986 31.3318 32.8794C31.9155 32.5602 32.3824 32.0899 32.7659 31.4683C33.1495 30.8467 33.3329 30.0907 33.3329 29.1667C33.3329 28.4947 33.2162 27.8899 32.9994 27.386C32.7826 26.8652 32.4825 26.4452 32.1156 26.0756C31.7487 25.7228 31.3485 25.454 30.8983 25.2692C30.448 25.1012 29.9978 25.0004 29.5476 25.0004C28.8305 25.0004 28.1802 25.1684 27.5799 25.4876C26.9795 25.8068 26.4959 26.2772 26.1291 26.8988C25.7622 27.5203 25.5788 28.2763 25.5788 29.1667C25.5788 30.0571 25.7622 30.8131 26.1291 31.4515Z""
                                    fill=""#3C3C49"" />
                                <path
                                    d=""M40.7379 15.8781C41.1382 15.5085 41.5884 15.3237 42.1053 15.3237C42.6556 15.3237 43.1392 15.5085 43.5227 15.8781C43.9063 16.2477 44.1064 16.7013 44.1064 17.2389C44.1064 17.7597 43.9063 18.2133 43.5227 18.5829C43.1392 18.9525 42.6723 19.1541 42.1053 19.1541C41.5884 19.1541 41.1215 18.9693 40.7379 18.5829C40.3377 18.2133 40.1543 17.7597 40.1543 17.2389C40.1543 16.7013 40.3544 16.2477 40.7379 15.8781ZM43.6728 35.9369H40.5879V22.5644H43.6728V35.9369Z""
                                    fill=""#3C3C49"" />
                                <path
                                    d=""M59.0982 22.5645L54.3457 29.0491L59.3984 35.937H55.8965L52.7282 31.3507L49.5598 35.937H45.9746L51.0606 29.0491L46.2748 22.5645H49.8433L52.7282 26.7476L55.613 22.5645H59.0982Z""
                                    fill=""#3C3C49"" />
                                <path
                                    d=""M76.5893 35.9369H73.1875V15.5925H76.5893V35.9369ZM75.2052 15.5925H79.2741C80.7582 15.5925 82.0255 15.8445 83.1094 16.3653C84.1933 16.8861 85.0271 17.6085 85.6274 18.5493C86.2277 19.4901 86.5279 20.6156 86.5279 21.9092C86.5279 23.2028 86.2277 24.3284 85.6274 25.2859C85.0271 26.2435 84.1767 26.9659 83.1094 27.4867C82.0255 28.0075 80.7582 28.2595 79.2741 28.2595H75.2052V25.2355H79.2741C80.4413 25.2355 81.3918 24.9499 82.1089 24.3956C82.8259 23.8412 83.1761 23.018 83.1761 21.926C83.1761 20.834 82.8259 20.0276 82.1089 19.4733C81.3918 18.9189 80.458 18.6501 79.2741 18.6501H75.2052V15.5925Z""
                                    fill=""white"" />
                                <path
                                    d=""M93.2495 35.937H89.8477V15.5927H93.2495V35.937ZM91.8654 15.5927H96.0843C97.5684 15.5927 98.8358 15.8614 99.9197 16.3822C101.004 16.903 101.837 17.6422 102.438 18.583C103.038 19.5238 103.338 20.6326 103.338 21.9093C103.338 23.1861 103.038 24.2949 102.438 25.2525C101.837 26.21 100.987 26.9324 99.9197 27.4532C98.8358 27.974 97.5684 28.2428 96.0843 28.2428H91.8654V25.3869H95.9342C96.718 25.3869 97.4017 25.2525 97.9853 25.0005C98.5689 24.7317 99.0192 24.3453 99.336 23.8413C99.6695 23.3205 99.8196 22.7157 99.8196 21.9933C99.8196 21.2541 99.6529 20.6326 99.336 20.1286C99.0025 19.6246 98.5523 19.2382 97.9853 18.9694C97.4017 18.7006 96.718 18.5662 95.9342 18.5662H91.8654V15.5927ZM97.7018 26.2268L104.572 35.937H100.453L94.0499 26.2268H97.7018Z""
                                    fill=""white"" />
                                <path
                                    d=""M106.639 21.5565C107.156 20.2797 107.89 19.1709 108.84 18.2302C109.791 17.2894 110.908 16.5502 112.192 16.0294C113.476 15.4918 114.844 15.223 116.328 15.223C117.845 15.223 119.246 15.4918 120.513 16.0294C121.781 16.567 122.898 17.3062 123.848 18.2302C124.799 19.1709 125.533 20.2797 126.05 21.5565C126.566 22.8333 126.833 24.2444 126.833 25.7732C126.833 27.2852 126.566 28.6964 126.05 29.9899C125.533 31.2835 124.799 32.4091 123.865 33.3667C122.915 34.3242 121.814 35.0634 120.547 35.5842C119.279 36.1218 117.879 36.3906 116.328 36.3906C114.827 36.3906 113.443 36.1218 112.159 35.5842C110.875 35.0466 109.774 34.3074 108.824 33.3667C107.873 32.4259 107.156 31.3003 106.639 29.9899C106.122 28.6964 105.855 27.2852 105.855 25.7732C105.855 24.2276 106.122 22.8333 106.639 21.5565ZM110.358 29.4859C110.958 30.5779 111.759 31.4347 112.792 32.0563C113.826 32.6779 114.994 32.9971 116.328 32.9971C117.678 32.9971 118.862 32.6779 119.896 32.0563C120.93 31.4347 121.731 30.5779 122.314 29.4859C122.898 28.394 123.198 27.1676 123.198 25.7732C123.198 24.3788 122.915 23.1357 122.331 22.0437C121.747 20.9517 120.947 20.0949 119.93 19.4733C118.896 18.8517 117.712 18.5494 116.344 18.5494C115.01 18.5494 113.843 18.8517 112.809 19.4733C111.775 20.0949 110.975 20.9517 110.375 22.0437C109.774 23.1357 109.474 24.3788 109.474 25.7732C109.457 27.1508 109.758 28.394 110.358 29.4859Z""
                                    fill=""white"" />
                                <path d=""M66 -2V51M134 -2V51"" stroke=""#3C3C49"" stroke-miterlimit=""10"" />
                            </svg>
                        </a>
						<a href=""#"" class=""header__call-out openbtn fast"">
							<svg xmlns=""http://www.w3.org/2000/svg"" width=""14"" height=""14"" viewBox=""0 0 14 14"" fill=""none"">
							<circle cx=""7"" cy=""7"" r=""7"" fill=""#11B05C""/>
							</svg>
							<div class=""link-row"">–ó–∞–∫–∞–∑–∞—Ç—å</div>
							<div class=""link-row"">–∑–≤–æ–Ω–æ–∫</div>
                        </a>
						<div class=""header__contacts"">
                            <a href=""tel:<?php the_field('header_phon_num','option');?>""><?php the_field('header_phon_num','option');?></a>
							<a class=""mobile-phone-icon"" href=""tel:<?php the_field('header_phon_num','option');?>"">
								<i class=""fa-solid fa-headset"" width=""18"" height=""18"" style=""color: #696980;""></i>
							</a>
							<div class=""header__contacts_link"">
                                <?php if( get_field('telegram','option') ){ ?>
                                <a href=""<?php the_field('telegram','option'); ?>""><svg xmlns=""http://www.w3.org/2000/svg"" width=""18"" height=""18""
                                        viewBox=""0 0 18 18"" fill=""none"">
                                        <path
                                            d=""M1.33813 9.2116L5.08513 10.3801V10.3816L5.10313 10.3696L6.40813 14.6761C6.57763 15.1411 6.80863 15.2251 7.08913 15.1861C7.37113 15.1486 7.51963 14.9971 7.70263 14.8201L9.48613 13.0981L13.3126 15.9301C14.0101 16.3156 14.5126 16.1161 14.6866 15.2806L17.1721 3.5506C17.4466 2.4571 16.9666 2.0206 16.1191 2.3656L1.51963 8.0056C0.523629 8.4061 0.528129 8.9641 1.33813 9.2116Z""
                                            fill=""#696980"" />
                                    </svg></a>
                                <?php } ?>
                                <?php if( get_field('wathsaap','option') ){ ?>
                                <a href=""<?php the_field('wathsaap','option'); ?>""><svg xmlns=""http://www.w3.org/2000/svg"" width=""18"" height=""18""
                                        viewBox=""0 0 18 18"" fill=""none"">
                                        <path
                                            d=""M1.50301 16.5L2.51701 12.774C1.84886 11.6286 1.49783 10.326 1.50001 9C1.50001 4.85775 4.85776 1.5 9.00001 1.5C13.1423 1.5 16.5 4.85775 16.5 9C16.5 13.1423 13.1423 16.5 9.00001 16.5C7.67459 16.5021 6.3725 16.1514 5.22751 15.4838L1.50301 16.5ZM6.29326 5.481C6.19641 5.48701 6.10177 5.51252 6.01501 5.556C5.93365 5.60207 5.85938 5.65967 5.79451 5.727C5.70451 5.81175 5.65351 5.88525 5.59876 5.9565C5.32157 6.31725 5.17247 6.76006 5.17501 7.215C5.17651 7.5825 5.27251 7.94025 5.42251 8.27475C5.72926 8.95125 6.23401 9.6675 6.90076 10.3312C7.06126 10.491 7.21801 10.6515 7.38676 10.8007C8.2143 11.5293 9.20045 12.0548 10.2668 12.3353L10.6935 12.4005C10.8323 12.408 10.971 12.3975 11.1105 12.3907C11.3289 12.3795 11.5422 12.3203 11.7353 12.2175C11.8598 12.1515 11.9183 12.1185 12.0225 12.0525C12.0225 12.0525 12.0548 12.0315 12.1163 11.985C12.2175 11.91 12.2798 11.8568 12.3638 11.769C12.426 11.7045 12.48 11.6287 12.5213 11.5425C12.5798 11.4202 12.6383 11.187 12.6623 10.9928C12.6803 10.8442 12.675 10.7633 12.6728 10.713C12.6698 10.6328 12.603 10.5495 12.5303 10.5142L12.0938 10.3185C12.0938 10.3185 11.4413 10.0343 11.043 9.85275C11.001 9.83445 10.956 9.82402 10.9103 9.822C10.8589 9.81673 10.8071 9.8225 10.7582 9.83893C10.7093 9.85536 10.6645 9.88206 10.6268 9.91725V9.91575C10.623 9.91575 10.5728 9.9585 10.0305 10.6155C9.99939 10.6573 9.95652 10.6889 9.90736 10.7063C9.85821 10.7237 9.805 10.726 9.75451 10.713C9.70564 10.6999 9.65777 10.6834 9.61126 10.6635C9.51826 10.6245 9.48601 10.6095 9.42226 10.5817L9.41851 10.5802C8.98944 10.3929 8.59218 10.1399 8.24101 9.83025C8.14651 9.74775 8.05876 9.65775 7.96876 9.57075C7.67369 9.28818 7.41655 8.96851 7.20376 8.61975L7.15951 8.5485C7.12773 8.50062 7.10203 8.44898 7.08301 8.39475C7.05451 8.2845 7.12876 8.196 7.12876 8.196C7.12876 8.196 7.31101 7.9965 7.39576 7.8885C7.46633 7.79874 7.53217 7.70536 7.59301 7.60875C7.68151 7.46625 7.70926 7.32 7.66276 7.20675C7.45276 6.69375 7.23526 6.183 7.01176 5.676C6.96751 5.5755 6.83626 5.5035 6.71701 5.48925C6.67651 5.48475 6.63601 5.48025 6.59551 5.47725C6.49479 5.47225 6.39386 5.47325 6.29326 5.48025V5.481Z""
                                            fill=""#696980"" />
                                    </svg></a>
                                    <?php } ?>
                            </div>
						</div>
						
                        <div class=""btn_back"">
                            <button class=""btn_burger""></button>
                        </div>
                        <div class=""burger_menu"">
                            <div class=""container"">
                                <div class=""row"">
                                    <div class=""col-12"">
                                        <div class=""burger_menu_container"">
                                            <?php     $args = array(
                                            'menu' => '–ú–µ–Ω—é –≤ —à–∞–ø–∫–µ',
                                            'menu_class' => 'burger_menu_list', 
                                            'link_after' => '<svg xmlns=""http://www.w3.org/2000/svg"" width=""25""
                                                        height=""24"" viewBox=""0 0 25 24"" fill=""none"">
                                                        <path
                                                            d=""M17.5647 13.0102L5.39254 13.0102L5.39254 11.0105L17.564 11.0098L12.2006 5.64642L13.6148 4.23221L21.393 12.0104L13.6148 19.7886L12.2006 18.3743L17.5647 13.0102Z""
                                                            fill=""#11B05C"" />
                                                    </svg>',
											'after' => '<svg class=""hidden_arrow"" xmlns=""http://www.w3.org/2000/svg"" width=""25""
                                                        height=""24"" viewBox=""0 0 25 24"" fill=""none"">
                                                        <path
                                                            d=""M17.5647 13.0102L5.39254 13.0102L5.39254 11.0105L17.564 11.0098L12.2006 5.64642L13.6148 4.23221L21.393 12.0104L13.6148 19.7886L12.2006 18.3743L17.5647 13.0102Z""
                                                            fill=""#11B05C"" />
                                                    </svg>'
                                            
                                        );
                                         
                                        wp_nav_menu( $args ); ?>
                                            <nav class=""burger_menu_contact"">
                                                <ul>
                                                    <li><a href=""tel:+7 (495) 2 111 333"">+7 (495) 2 111 333</a></li>
                                                    <li>–≥. –ú–æ—Å–∫–≤–∞, –ü—Ä-—Ç –í–µ—Ä–Ω–∞–¥—Å–∫–æ–≥–æ, –¥.41, —Å—Ç—Ä.1, –æ—Ñ–∏—Å 732</li>
                                                    <li><a href=""mailto:info@logixpro.ru"">info@logixpro.ru</a></li>
                                                    <li>–†–∞–±–æ—Ç–∞–µ–º 9.00 - 19.00 –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö</li>
                                                </ul>
                                                <a href=""#"" class=""openbtn""><svg xmlns=""http://www.w3.org/2000/svg""
                                                        width=""16"" height=""16"" viewBox=""0 0 16 16"" fill=""none"">
                                                        <circle cx=""8"" cy=""8"" r=""8"" fill=""#11B05C"" />
                                                    </svg>–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</a>
                                            </nav>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </header>
<?php else : ?>
    <header class=""header"" id=""myHeader"">
        <div class=""container"">
            <div class=""row"">
                <div class=""col-xl-12"">
                    <div class=""header__all"">
                        <div class=""header__inform"">
                            <div class=""adress""><?php the_field('header_adress','option'); ?></div>
                            <div class=""chart""><?php the_field('header_work_time','option'); ?></div>
                        </div>
                        <div class=""header__contacts"">
							<a href=""#"" class=""header__call-out openbtn fast"">
								<svg xmlns=""http://www.w3.org/2000/svg"" width=""14"" height=""14"" viewBox=""0 0 14 14"" fill=""none"">
								<circle cx=""7"" cy=""7"" r=""7"" fill=""#11B05C""/>
								</svg>
								<div class=""link-row"">–ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫</div>
                        	</a>
                            <a href=""mailto:info@logixpro.ru""><?php the_field('header_site','option'); ?></a>
                            <a href=""tel:<?php the_field('header_phon_num','option'); ?>""><?php the_field('header_phon_num','option'); ?></a>
                            <div class=""header__contacts_link"">
                                <?php if( get_field('telegram','option') ){ ?>
                                <a href=""<?php the_field('telegram','option'); ?>""><svg xmlns=""http://www.w3.org/2000/svg"" width=""18"" height=""18""
                                        viewBox=""0 0 18 18"" fill=""none"">
                                        <path
                                            d=""M1.33813 9.2116L5.08513 10.3801V10.3816L5.10313 10.3696L6.40813 14.6761C6.57763 15.1411 6.80863 15.2251 7.08913 15.1861C7.37113 15.1486 7.51963 14.9971 7.70263 14.8201L9.48613 13.0981L13.3126 15.9301C14.0101 16.3156 14.5126 16.1161 14.6866 15.2806L17.1721 3.5506C17.4466 2.4571 16.9666 2.0206 16.1191 2.3656L1.51963 8.0056C0.523629 8.4061 0.528129 8.9641 1.33813 9.2116Z""
                                            fill=""#696980"" />
                                    </svg></a>
                                <?php } ?>
                                <?php if( get_field('wathsaap','option') ){ ?>
                                <a href=""<?php the_field('wathsaap','option'); ?>""><svg xmlns=""http://www.w3.org/2000/svg"" width=""18"" height=""18""
                                        viewBox=""0 0 18 18"" fill=""none"">
                                        <path
                                            d=""M1.50301 16.5L2.51701 12.774C1.84886 11.6286 1.49783 10.326 1.50001 9C1.50001 4.85775 4.85776 1.5 9.00001 1.5C13.1423 1.5 16.5 4.85775 16.5 9C16.5 13.1423 13.1423 16.5 9.00001 16.5C7.67459 16.5021 6.3725 16.1514 5.22751 15.4838L1.50301 16.5ZM6.29326 5.481C6.19641 5.48701 6.10177 5.51252 6.01501 5.556C5.93365 5.60207 5.85938 5.65967 5.79451 5.727C5.70451 5.81175 5.65351 5.88525 5.59876 5.9565C5.32157 6.31725 5.17247 6.76006 5.17501 7.215C5.17651 7.5825 5.27251 7.94025 5.42251 8.27475C5.72926 8.95125 6.23401 9.6675 6.90076 10.3312C7.06126 10.491 7.21801 10.6515 7.38676 10.8007C8.2143 11.5293 9.20045 12.0548 10.2668 12.3353L10.6935 12.4005C10.8323 12.408 10.971 12.3975 11.1105 12.3907C11.3289 12.3795 11.5422 12.3203 11.7353 12.2175C11.8598 12.1515 11.9183 12.1185 12.0225 12.0525C12.0225 12.0525 12.0548 12.0315 12.1163 11.985C12.2175 11.91 12.2798 11.8568 12.3638 11.769C12.426 11.7045 12.48 11.6287 12.5213 11.5425C12.5798 11.4202 12.6383 11.187 12.6623 10.9928C12.6803 10.8442 12.675 10.7633 12.6728 10.713C12.6698 10.6328 12.603 10.5495 12.5303 10.5142L12.0938 10.3185C12.0938 10.3185 11.4413 10.0343 11.043 9.85275C11.001 9.83445 10.956 9.82402 10.9103 9.822C10.8589 9.81673 10.8071 9.8225 10.7582 9.83893C10.7093 9.85536 10.6645 9.88206 10.6268 9.91725V9.91575C10.623 9.91575 10.5728 9.9585 10.0305 10.6155C9.99939 10.6573 9.95652 10.6889 9.90736 10.7063C9.85821 10.7237 9.805 10.726 9.75451 10.713C9.70564 10.6999 9.65777 10.6834 9.61126 10.6635C9.51826 10.6245 9.48601 10.6095 9.42226 10.5817L9.41851 10.5802C8.98944 10.3929 8.59218 10.1399 8.24101 9.83025C8.14651 9.74775 8.05876 9.65775 7.96876 9.57075C7.67369 9.28818 7.41655 8.96851 7.20376 8.61975L7.15951 8.5485C7.12773 8.50062 7.10203 8.44898 7.08301 8.39475C7.05451 8.2845 7.12876 8.196 7.12876 8.196C7.12876 8.196 7.31101 7.9965 7.39576 7.8885C7.46633 7.79874 7.53217 7.70536 7.59301 7.60875C7.68151 7.46625 7.70926 7.32 7.66276 7.20675C7.45276 6.69375 7.23526 6.183 7.01176 5.676C6.96751 5.5755 6.83626 5.5035 6.71701 5.48925C6.67651 5.48475 6.63601 5.48025 6.59551 5.47725C6.49479 5.47225 6.39386 5.47325 6.29326 5.48025V5.481Z""
                                            fill=""#696980"" />
                                    </svg></a>
                                    <?php } ?>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class=""row"">
                <div class=""col-xl-12"">
                    <div class=""header__menu"" id=""head_down"">
                        <div class=""header__menu_logo_img"">
                            <a href=""<?php echo get_option('home'); ?>/"">
                                <svg width=""135"" height=""51"" viewBox=""0 0 135 51"" fill=""none""
                                    xmlns=""http://www.w3.org/2000/svg"">
                                    <path d=""M3.15167 13.2743H0V35.937H3.15167V13.2743Z"" fill=""#3C3C49"" />
                                    <rect x=""66"" width=""68"" height=""51"" fill=""#11B05C"" />
                                    <path
                                        d=""M7.01977 25.6219C7.63676 24.5804 8.50388 23.7572 9.58779 23.1692C10.6717 22.5812 11.889 22.2788 13.2397 22.2788C14.6071 22.2788 15.8244 22.5812 16.9083 23.1692C17.9922 23.7572 18.8427 24.5804 19.4597 25.6219C20.0767 26.6635 20.3935 27.8731 20.3935 29.2507C20.3935 30.6114 20.0767 31.821 19.4597 32.8626C18.8427 33.921 17.9922 34.7442 16.9083 35.3321C15.8244 35.9201 14.6071 36.2225 13.2397 36.2225C11.889 36.2225 10.6717 35.9201 9.58779 35.3321C8.50388 34.7442 7.65343 33.921 7.01977 32.8626C6.40277 31.8042 6.08594 30.5946 6.08594 29.2507C6.08594 27.8731 6.40277 26.6635 7.01977 25.6219ZM9.80457 31.4514C10.1548 32.073 10.6217 32.577 11.222 32.9298C11.8223 33.2826 12.4893 33.4674 13.2397 33.4674C13.9901 33.4674 14.6571 33.2826 15.2575 32.9298C15.8578 32.577 16.3247 32.073 16.6749 31.4514C17.0251 30.8298 17.1918 30.0907 17.1918 29.2507C17.1918 28.4107 17.0251 27.6883 16.6749 27.0499C16.3247 26.4115 15.8578 25.9243 15.2575 25.5715C14.6571 25.2187 13.9901 25.0508 13.2397 25.0508C12.4893 25.0508 11.8223 25.2187 11.222 25.5715C10.6217 25.9243 10.1548 26.4115 9.80457 27.0499C9.45439 27.6883 9.28763 28.4275 9.28763 29.2507C9.28763 30.0907 9.45439 30.813 9.80457 31.4514Z""
                                        fill=""#3C3C49"" />
                                    <path
                                        d=""M23.2442 25.4372C23.8445 24.4124 24.6283 23.6396 25.6288 23.102C26.6127 22.5644 27.6799 22.2957 28.8138 22.2957C29.9311 22.2957 30.8983 22.5644 31.7487 23.1188C32.5825 23.6732 33.2495 24.4628 33.7331 25.4708C34.2167 26.4956 34.4668 27.7219 34.4668 29.1835C34.4668 30.6115 34.2167 31.8547 33.7331 32.8962C33.2495 33.9378 32.5825 34.7274 31.7487 35.2818C30.915 35.8362 29.9311 36.105 28.8138 36.105C27.6799 36.105 26.6127 35.8362 25.6288 35.2986C24.645 34.761 23.8445 33.9714 23.2442 32.9466C22.6439 31.9219 22.3438 30.6787 22.3438 29.2003C22.3604 27.6883 22.6439 26.4452 23.2442 25.4372ZM25.7289 36.8274C25.7456 37.4321 25.9123 37.9697 26.2125 38.4401C26.5126 38.9105 26.9462 39.2969 27.5132 39.5657C28.0634 39.8513 28.7305 39.9857 29.4809 39.9857C30.1145 39.9857 30.7315 39.8345 31.3318 39.5153C31.9322 39.2129 32.4158 38.7257 32.7826 38.0873C33.1661 37.4489 33.3496 36.6258 33.3496 35.6178V22.5644H36.4012V35.6346C36.4012 37.2474 36.0844 38.5745 35.434 39.6161C34.7837 40.6577 33.9499 41.4473 32.916 41.9513C31.8821 42.472 30.7482 42.724 29.5476 42.724C28.1301 42.724 26.8962 42.4721 25.879 41.9849C24.8617 41.4977 24.078 40.7921 23.511 39.9017C22.9607 39.0113 22.6606 37.9865 22.6106 36.8274H25.7289ZM26.1291 31.4515C26.4959 32.0731 26.9795 32.5602 27.5799 32.8794C28.1802 33.1986 28.8472 33.3666 29.5476 33.3666C30.1646 33.3666 30.7649 33.1986 31.3318 32.8794C31.9155 32.5602 32.3824 32.0899 32.7659 31.4683C33.1495 30.8467 33.3329 30.0907 33.3329 29.1667C33.3329 28.4947 33.2162 27.8899 32.9994 27.386C32.7826 26.8652 32.4825 26.4452 32.1156 26.0756C31.7487 25.7228 31.3485 25.454 30.8983 25.2692C30.448 25.1012 29.9978 25.0004 29.5476 25.0004C28.8305 25.0004 28.1802 25.1684 27.5799 25.4876C26.9795 25.8068 26.4959 26.2772 26.1291 26.8988C25.7622 27.5203 25.5788 28.2763 25.5788 29.1667C25.5788 30.0571 25.7622 30.8131 26.1291 31.4515Z""
                                        fill=""#3C3C49"" />
                                    <path
                                        d=""M40.7379 15.8781C41.1382 15.5085 41.5884 15.3237 42.1053 15.3237C42.6556 15.3237 43.1392 15.5085 43.5227 15.8781C43.9063 16.2477 44.1064 16.7013 44.1064 17.2389C44.1064 17.7597 43.9063 18.2133 43.5227 18.5829C43.1392 18.9525 42.6723 19.1541 42.1053 19.1541C41.5884 19.1541 41.1215 18.9693 40.7379 18.5829C40.3377 18.2133 40.1543 17.7597 40.1543 17.2389C40.1543 16.7013 40.3544 16.2477 40.7379 15.8781ZM43.6728 35.9369H40.5879V22.5644H43.6728V35.9369Z""
                                        fill=""#3C3C49"" />
                                    <path
                                        d=""M59.0982 22.5645L54.3457 29.0491L59.3984 35.937H55.8965L52.7282 31.3507L49.5598 35.937H45.9746L51.0606 29.0491L46.2748 22.5645H49.8433L52.7282 26.7476L55.613 22.5645H59.0982Z""
                                        fill=""#3C3C49"" />
                                    <path
                                        d=""M76.5893 35.9369H73.1875V15.5925H76.5893V35.9369ZM75.2052 15.5925H79.2741C80.7582 15.5925 82.0255 15.8445 83.1094 16.3653C84.1933 16.8861 85.0271 17.6085 85.6274 18.5493C86.2277 19.4901 86.5279 20.6156 86.5279 21.9092C86.5279 23.2028 86.2277 24.3284 85.6274 25.2859C85.0271 26.2435 84.1767 26.9659 83.1094 27.4867C82.0255 28.0075 80.7582 28.2595 79.2741 28.2595H75.2052V25.2355H79.2741C80.4413 25.2355 81.3918 24.9499 82.1089 24.3956C82.8259 23.8412 83.1761 23.018 83.1761 21.926C83.1761 20.834 82.8259 20.0276 82.1089 19.4733C81.3918 18.9189 80.458 18.6501 79.2741 18.6501H75.2052V15.5925Z""
                                        fill=""white"" />
                                    <path
                                        d=""M93.2495 35.937H89.8477V15.5927H93.2495V35.937ZM91.8654 15.5927H96.0843C97.5684 15.5927 98.8358 15.8614 99.9197 16.3822C101.004 16.903 101.837 17.6422 102.438 18.583C103.038 19.5238 103.338 20.6326 103.338 21.9093C103.338 23.1861 103.038 24.2949 102.438 25.2525C101.837 26.21 100.987 26.9324 99.9197 27.4532C98.8358 27.974 97.5684 28.2428 96.0843 28.2428H91.8654V25.3869H95.9342C96.718 25.3869 97.4017 25.2525 97.9853 25.0005C98.5689 24.7317 99.0192 24.3453 99.336 23.8413C99.6695 23.3205 99.8196 22.7157 99.8196 21.9933C99.8196 21.2541 99.6529 20.6326 99.336 20.1286C99.0025 19.6246 98.5523 19.2382 97.9853 18.9694C97.4017 18.7006 96.718 18.5662 95.9342 18.5662H91.8654V15.5927ZM97.7018 26.2268L104.572 35.937H100.453L94.0499 26.2268H97.7018Z""
                                        fill=""white"" />
                                    <path
                                        d=""M106.639 21.5565C107.156 20.2797 107.89 19.1709 108.84 18.2302C109.791 17.2894 110.908 16.5502 112.192 16.0294C113.476 15.4918 114.844 15.223 116.328 15.223C117.845 15.223 119.246 15.4918 120.513 16.0294C121.781 16.567 122.898 17.3062 123.848 18.2302C124.799 19.1709 125.533 20.2797 126.05 21.5565C126.566 22.8333 126.833 24.2444 126.833 25.7732C126.833 27.2852 126.566 28.6964 126.05 29.9899C125.533 31.2835 124.799 32.4091 123.865 33.3667C122.915 34.3242 121.814 35.0634 120.547 35.5842C119.279 36.1218 117.879 36.3906 116.328 36.3906C114.827 36.3906 113.443 36.1218 112.159 35.5842C110.875 35.0466 109.774 34.3074 108.824 33.3667C107.873 32.4259 107.156 31.3003 106.639 29.9899C106.122 28.6964 105.855 27.2852 105.855 25.7732C105.855 24.2276 106.122 22.8333 106.639 21.5565ZM110.358 29.4859C110.958 30.5779 111.759 31.4347 112.792 32.0563C113.826 32.6779 114.994 32.9971 116.328 32.9971C117.678 32.9971 118.862 32.6779 119.896 32.0563C120.93 31.4347 121.731 30.5779 122.314 29.4859C122.898 28.394 123.198 27.1676 123.198 25.7732C123.198 24.3788 122.915 23.1357 122.331 22.0437C121.747 20.9517 120.947 20.0949 119.93 19.4733C118.896 18.8517 117.712 18.5494 116.344 18.5494C115.01 18.5494 113.843 18.8517 112.809 19.4733C111.775 20.0949 110.975 20.9517 110.375 22.0437C109.774 23.1357 109.474 24.3788 109.474 25.7732C109.457 27.1508 109.758 28.394 110.358 29.4859Z""
                                        fill=""white"" />
                                    <path d=""M66 -2V51M134 -2V51"" stroke=""#3C3C49"" stroke-miterlimit=""10"" />
                                </svg>
                            </a>
                        </div>
                        <a href=""#"" class=""header__call-out openbtn fast"">
                        <svg xmlns=""http://www.w3.org/2000/svg"" width=""14"" height=""14"" viewBox=""0 0 14 14"" fill=""none"">
                        <circle cx=""7"" cy=""7"" r=""7"" fill=""#11B05C""/>
                        </svg>
                        <div class=""link-row"">–ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫</div>
                        </a>
                   <?php     $args = array(
                            'menu' => '–ú–µ–Ω—é –≤ —à–∞–ø–∫–µ',
                            'menu_class' => 'header__menu_nav' 
                            
                        );
                         
                        wp_nav_menu( $args ); ?>
                    </div>
                </div>
            </div>
        </div>
    </header>
<?php endif; ?>
    <main>
"
tuMN8yGb,Valid Anagrams - LeetCode,titan2400,Java,Monday 27th of October 2025 09:43:31 AM CDT,"// Valid Anagrams - https://leetcode.com/problems/valid-anagram/sou

class Solution {

    // Sort the underlying character arrays & compare
    // For anagrams they should be an exact match
    // Time Complexity: O(nlogn)
    // Space Complexity: O(n)
    // public boolean isAnagram(String s, String t) {
    //     if(s == null && t == null) {
    //         return true;
    //     }

    //     if(s == null || t == null) {
    //         return false;
    //     }

    //     if(s.length() != t.length()) {
    //         return false;
    //     }


    //     char[] sChars = s.toCharArray();
    //     char[] tChars = t.toCharArray();

    //     Arrays.sort(sChars);
    //     Arrays.sort(tChars);

    //     for(int i = 0; i < s.length(); i++) {
    //         if(sChars[i] != tChars[i]) {
    //             return false;
    //         }
    //     }

    //     return true;
    // }

    // Using HashMap to count characters in one of the strings
    // and using the other string to decrement counts in Hashmap
    // Time Complexity: O(n)
    // Space Complexity: O(k) 
    //   where k is number of unique characters in the string
    // LeetCode indicate above solution to be much better despite the complexity
    // public boolean isAnagram(String s, String t) {
    //     if(s == null && t == null) {
    //         return true;
    //     }

    //     if(s == null || t == null) {
    //         return false;
    //     }

    //     if(s.length() != t.length()) {
    //         return false;
    //     }

    //     Map<Character, Integer> count = new HashMap<>();

    //     for (int i = 0; i < s.length(); i++) {
    //         count.put(s.charAt(i), count.getOrDefault(s.charAt(i), 0) + 1);
    //     }

    //     for (int i = 0; i < t.length(); i++) {
    //         char c = t.charAt(i);
    //         if(!count.containsKey(c)) {
    //             return false;
    //         }

    //         int counter = count.get(c) - 1;
    //         if (counter < 0) {
    //             return false;
    //         }

    //         count.put(c, counter);
    //     } 

    //     for(Integer countValue: count.values()) {
    //         if (countValue != 0) {
    //             return false;
    //         }
    //     }

    //     return true;
    // }

    // Using Array to count characters 
    // Time Complexity: O(n)
    // Space Complexity: O(1) 
    // LeetCode indicate sorting solution to be much better despite the complexity
    public boolean isAnagram(String s, String t) {
        if(s == null && t == null) {
            return true;
        }

        if(s == null || t == null) {
            return false;
        }

        if(s.length() != t.length()) {
            return false;
        }

        int[] freq = new int[26];
        for (int i = 0; i < s.length(); i++) {
            freq[s.charAt(i) - 'a']++;
            freq[t.charAt(i) - 'a']--;
        }

        for(int i = 0; i < freq.length; i++) {
            if(freq[i] != 0) {
                return false;
            }
        }

        return true;
    }
}"
GpQFcs9H,InfiniteReboot,paramus,Lua,Monday 27th of October 2025 09:35:30 AM CDT,"local monitor = peripheral.find(""monitor"")
local delay = 2

function ScreamingFace()
    --Left eje
    paintutils.drawPixel(5,3, colors.white)
    paintutils.drawPixel(4,4, colors.white)
    --Right eye
    paintutils.drawPixel(20,3, colors.white)
    paintutils.drawPixel(21,4, colors.white)
    
    --Mouth
    paintutils.drawLine(5,10, 7,9 , colors.white)
    paintutils.drawLine(7,9, 10,10 , colors.white)
    paintutils.drawLine(10,9, 17,9 , colors.white)
    paintutils.drawLine(17,9, 20,10 , colors.white)
end

while (true) do
    term.setBackgroundColour(colors.black)
    term.setTextColour(colors.green)
	term.clear()
    
    term.setCursorPos(1,1)
    sleep(delay)
    print(""[I] Initiating reboot secuence."")
    sleep(delay)
    print(""[I] Checking internal memory."")
    sleep(delay)
    term.setTextColour(colors.yellow)
    print(""[W] Memory corruption detected, starting recovery procedure."")
    sleep(delay)
    term.setTextColour(colors.red)
    print(""[Err] FATAL ERROR."")
    sleep(delay)
    
    term.setBackgroundColour(colors.red)
	term.clear()
    ScreamingFace()
    sleep(0.05)
    term.setBackgroundColour(colors.black)
	term.clear()
    ScreamingFace()
    sleep(0.05)
    term.setBackgroundColour(colors.red)
	term.clear()
    ScreamingFace()
    sleep(0.05)
    term.setBackgroundColour(colors.black)
	term.clear()
    ScreamingFace()
    sleep(0.05)
end"
5C57rJdN,üíé ChangeNOW Exploit üî•üî•,mo_am5mer,JavaScript,Monday 27th of October 2025 09:35:28 AM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: t692nuvl3btkngpbtu7xt6h2dzpjylhddut2bw2x9lj9ynd2uf
"
C5NF5rQJ,üí° EASY MONEY GUIDE ‚úÖ Working üö®üî•,mo_am5mer,JavaScript,Monday 27th of October 2025 09:24:36 AM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: pjd7cwp70mmlb9v1ywnhb6pnzngfzs4kn20ua6srnx12t61emb
"
2DEyNJ7z,Untitled,MeguminBOT,Haxe,Monday 27th of October 2025 09:23:28 AM CDT,"
function recalcSectionState(curStep:Int, curDecStep:Float):Void {
	Reflect.setField(game, 'curStep', curStep);
	Reflect.setField(game, 'curDecStep', curDecStep);

	var rollbackFunc:Dynamic = Reflect.field(game, 'rollbackSection');
	if (rollbackFunc != null) {
		Reflect.callMethod(game, rollbackFunc, []);
		return;
	}

	if (game.SONG == null || game.SONG.notes == null) {
		return;
	}

	var notes:Array<Dynamic> = game.SONG.notes;
	var totalSections:Int = notes.length;
	var cumulativeSteps:Int = 0;
	var targetSection:Int = 0;
	var found:Bool = false;

	for (i in 0...totalSections) {
		var section:Dynamic = notes[i];
		if (section == null) continue;

		var sectionBeats:Float = section.sectionBeats;
		if (sectionBeats == null || sectionBeats <= 0) sectionBeats = 4;

		cumulativeSteps += Math.round(sectionBeats * 4);

		if (curStep < cumulativeSteps) {
			targetSection = i;
			found = true;
			break;
		}
	}

	if (!found) {
		targetSection = Math.max(0, totalSections - 1);
	}

	Reflect.setField(game, 'curSection', targetSection);

	if (cumulativeSteps <= curStep) {
		var beatsAhead:Float = 4;
		var sectionData:Dynamic = notes[targetSection];
		if (sectionData != null) {
			beatsAhead = sectionData.sectionBeats;
			if (beatsAhead == null || beatsAhead <= 0) beatsAhead = 4;
		}
		cumulativeSteps = curStep + Math.round(beatsAhead * 4);
	}

	Reflect.setField(game, 'stepsToDo', cumulativeSteps);
}"
mB8KEuhd,Contains Duplicate - LeetCode,titan2400,Java,Monday 27th of October 2025 09:11:00 AM CDT,"// Contains Duplicate - https://leetcode.com/problems/contains-duplicate/

class Solution {
    // Brute force 
    // Time Complexity: O(n^2)
    // Space Complexity: O(1)
    // Below solution leads to time limit exceeded on LeetCode
    // public boolean containsDuplicate(int[] nums) {
    //     for(int i = 0; i < nums.length; i++) {
    //         for(int j = i + 1; j < nums.length; j++) {
    //             if(nums[i] == nums[j]) {
    //                 return true;
    //             }
    //         }
    //     }

    //     return false;
    // }

    // Using HashSet
    // Time Complexity: O(n)
    // Space Complexity: O(n)
    // public boolean containsDuplicate(int[] nums) {
    //     Set<Integer> set = new HashSet<>();

    //     for(int i = 0; i < nums.length; i++) {
    //         set.add(nums[i]);
    //     }

    //     return set.size() != nums.length;
    // }

    // Using HashSet (Optimized)
    // Time Complexity: O(n)
    // Space Complexity: O(n)
    public boolean containsDuplicate(int[] nums) {
        Set<Integer> set = new HashSet<>();

        for(int i = 0; i < nums.length; i++) {
            if(set.contains(nums[i])) {
                return true;
            }

            set.add(nums[i]);
        }

        return false;
    }
}"
hXKk1yrD,‚≠êMake $15OO in 2O minutes‚≠ê üìåüìù,mo_am5mer,JavaScript,Monday 27th of October 2025 09:10:50 AM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: akndxwj475qquq0pteeb0rtbllendvjqxt3tmjeeoj3stt57m2
"
GBPrksQB,# tk_5x5_Sudoku_Slider.py,here2share,Python,Monday 27th of October 2025 09:02:59 AM CDT,"# tk_5x5_Sudoku_Slider.py

from tkinter import *
from PIL import Image, ImageDraw, ImageFont, ImageTk
from random import randint
import itertools

BACKGROUND = 'orange'
TSIZE = 90
MARGIN = 7
ROWS = 5
COLUMNS = 5
board = {}

colors = ['#ff8888', '#8888ff', '#88ff88', '#ffff66']
ARC_COLORS = list(itertools.permutations(colors, 4))

instructions = '''
# tk_5x5_Sudoku_Slider.py

To win this game, the player must satisfy all the following conditions:

1. Valid 5√ó5 Sudoku Grid
- Each number from 1 to 5 must appear exactly once in each row and each column.

2. Matching Edge Colors
- The top half-circle of a tile must match the bottom half-circle of the tile above it.
- The left half-circle must match the right half-circle of the tile to its left.
'''

def create_tile_image(n, arc_colors_4, idx):
	img_size = TSIZE + 2 * MARGIN
	img = Image.new('RGBA', (img_size, img_size))
	draw = ImageDraw.Draw(img)

	draw.rectangle([MARGIN, MARGIN, img_size - MARGIN, img_size - MARGIN], outline=None, fill='white')

	r = TSIZE - 50
	cx, cy = img_size // 2, img_size // 2

	draw.pieslice([cx - r//2, MARGIN - r//2, cx + r//2, MARGIN + r//2], start=0, end=180, fill=arc_colors_4[0])
	draw.pieslice([cx - r//2, img_size - MARGIN - r//2, cx + r//2, img_size - MARGIN + r//2], start=180, end=360, fill=arc_colors_4[1])
	draw.pieslice([MARGIN - r//2, cy - r//2, MARGIN + r//2, cy + r//2], start=270, end=90, fill=arc_colors_4[2])
	draw.pieslice([img_size - MARGIN - r//2, cy - r//2, img_size - MARGIN + r//2, cy + r//2], start=90, end=270, fill=arc_colors_4[3])

	font = ImageFont.truetype(""arial.ttf"", int(TSIZE * 0.7))
	text_size = draw.textsize(str(n), font=font)
	text_pos = (cx - text_size[0] // 2, cy - text_size[1] // 2 - 6)
	draw.text(text_pos, str(n), font=font, fill='black')
	
	#draw.text(text_pos, str(idx), font=font, fill='gray') # testing purpose

	draw.rectangle([MARGIN, MARGIN, img_size - MARGIN, img_size - MARGIN], outline='black', fill=None)

	return ImageTk.PhotoImage(img)
	
def generate_latin_square(n=5):
    import random
    base = list(range(1, n + 1))
    square = []
    for i in range(n):
        row = base[i:] + base[:i]
        square.append(row)

    for _ in range(10):
        i, j = random.sample(range(n), 2)
        square[i], square[j] = square[j], square[i]
        for row in square:
            row[i], row[j] = row[j], row[i]
    return square

def permute(array):
    n = len(array)
    signature = +1
    for i in range(n - 2):
        j = randint(0, n - 1)
        if j != i:
            signature = -signature
            array[i], array[j] = array[j], array[i]
    if signature < 0:
        array[-2], array[-1] = array[-1], array[-2]

def create_tile(idx, arc_colors_4, n):
	image = create_tile_image(n, arc_colors_4, idx)
	tile_id = canvas.create_image(0, 0, image=image, anchor='nw')
	return {'id': idx, 'canvas_id': tile_id, 'image': image, 'row': 0, 'column': 0}

def move_tile(tile, dx, dy):
    canvas.move(tile['canvas_id'], dx, dy)

def moveto_tile(tile, row, column):
    S = MARGIN + TSIZE
    x = MARGIN + column * S
    y = MARGIN + row * S
    current_x = MARGIN + tile['column'] * S
    current_y = MARGIN + tile['row'] * S
    dx = x - current_x
    dy = y - current_y
    move_tile(tile, dx, dy)
    tile['row'] = row
    tile['column'] = column

def create_timer(parent):
    label = Label(parent)
    label.elapsed = 0
    label.config(text='Time: 0s')
    label.running = True
    def update():
        if label.running:
            label.elapsed += 1
            label.config(text=f'Time: {label.elapsed}s')
            label.after_id = label.after(1000, update)
    label.after_id = label.after(1000, update)
    return label

def stop_timer():
    timer = board['timer']
    timer.running = False
    if hasattr(timer, 'after_id'):
        timer.after_cancel(timer.after_id)

def reset_timer():
    timer = board['timer']
    timer.running = False
    if hasattr(timer, 'after_id'):
        timer.after_cancel(timer.after_id)
    timer.elapsed = 0
    timer.config(text='Time: 0s')
    timer.running = True
    def update():
        if timer.running:
            timer.elapsed += 1
            timer.config(text=f'Time: {timer.elapsed}s')
            timer.after_id = timer.after(1000, update)
    timer.after_id = timer.after(1000, update)

def assign_matching_combos(rows, columns):
    grid = [[None for _ in range(columns)] for _ in range(rows)]
    used = set()

    def is_valid(combo, r, c):
        if r > 0 and grid[r - 1][c] and grid[r - 1][c][1] != combo[0]:
            return False
        if c > 0 and grid[r][c - 1] and grid[r][c - 1][3] != combo[2]:
            return False
        return True

    def backtrack(r, c):
        if r == rows:
            return True

        next_r, next_c = (r, c + 1) if c + 1 < columns else (r + 1, 0)

        if r == rows - 1 and c == columns - 1:
            return backtrack(next_r, next_c)

        for combo in ARC_COLORS:
            if combo in used:
                continue
            if is_valid(combo, r, c):
                grid[r][c] = combo
                used.add(combo)
                if backtrack(next_r, next_c):
                    return True
                grid[r][c] = None
                used.remove(combo)

        return False

    backtrack(0, 0)

    return grid

def create_board(timer, rows, columns):
    combo_grid = assign_matching_combos(rows, columns)
    latin_square = generate_latin_square(rows)
    tiles = []
    for r in range(rows):
        for c in range(columns):
            if r == rows - 1 and c == columns - 1:
                continue
            arc_colors_4 = combo_grid[r][c]
            number = latin_square[r][c]
            tile = create_tile(len(tiles) + 1, arc_colors_4, number)
            moveto_tile(tile, r, c)
            tiles.append(tile)
    board['tiles'] = tiles
    board['rows'] = rows
    board['columns'] = columns
    board['row'] = rows - 1
    board['col'] = columns - 1
    board['timer'] = timer
    board['locked'] = False
    canvas.bind('<Button-1>', lambda e: clickhandler(e))
    canvas.pack()
    shuffle_board()

def shuffle_board():
    canvas.delete('end')
    board['locked'] = False
    positions = [(r, c) for r in range(ROWS) for c in range(COLUMNS)]
    positions.remove((ROWS - 1, COLUMNS - 1))
    permute(positions)
    for tile, (r, c) in zip(board['tiles'], positions):
        moveto_tile(tile, r, c)
    board['row'] = ROWS - 1
    board['col'] = COLUMNS - 1
    reset_timer()

def update_timer():
    timer = board['timer']
    if timer.running:
        timer.elapsed += 1
        timer.config(text=f'Time: {timer.elapsed}s')
        timer.after_id = timer.after(1000, lambda: update_timer())

def clickhandler(event):
    if board['locked']:
        return
    S = MARGIN + TSIZE
    row = max(0, min((event.y - MARGIN // 2) // S, board['rows'] - 1))
    column = max(0, min((event.x - MARGIN // 2) // S, board['columns'] - 1))
    if row == board['row'] and column != board['col']:
        move_row(row, column)
    elif column == board['col'] and row != board['row']:
        move_column(row, column)
    check_win()

def move_row(r, c):
    delta = 1 if c > board['col'] else -1
    for col in range(board['col'], c, delta):
        move_tile_at(r, col + delta, 0, -delta)
    board['col'] = c

def move_column(r, c):
    delta = 1 if r > board['row'] else -1
    for row in range(board['row'], r, delta):
        move_tile_at(row + delta, c, -delta, 0)
    board['row'] = r

def move_tile_at(r, c, tr, tc):
    for tile in board['tiles']:
        if tile['row'] == r and tile['column'] == c:
            moveto_tile(tile, r + tr, c + tc)
            break

def check_win():
	for tile in board['tiles']:
		expected_id = tile['row'] * board['columns'] + tile['column'] + 1
		if tile['id'] != expected_id:
			return

	stop_timer()
	board['locked'] = True
	S = MARGIN + TSIZE
	canvas.create_rectangle(0, 40, S * ROWS + MARGIN, 140, fill='gray', stipple='gray75', outline='', tag='end')
	canvas.create_text(canvas.winfo_width() // 2, TSIZE - 5, text=""Puzzle Complete!"", font='Helvetica 40', fill='white', tag='end')

def change_bg(color):
    canvas['background'] = color

def show_about():
    top = Toplevel(root)
    top.title(""Program Info"")
    Label(top, text=instructions, padx=20, pady=20).pack()
    Button(top, text=""OK"", command=top.destroy).pack()

root = Tk()
root.geometry('+0+0')
root.title(""# tk_5x5_Sudoku_Slider.py"")

S = MARGIN + TSIZE
canvas = Canvas(root, background=BACKGROUND, height=S * ROWS + MARGIN - 2, width=S * COLUMNS + MARGIN - 2)

menubar = Frame(root, relief=RAISED, bd=2)
menubutton1 = Menubutton(menubar, text='Options')
menubutton1.pack(side=LEFT)
menubutton2 = Menubutton(menubar, text='Colors')
menubutton2.pack(side=LEFT)
timer = create_timer(menubar)
timer.pack(side=RIGHT, padx=MARGIN)
menubar.pack(side=TOP, fill=X)
create_board(timer, ROWS, COLUMNS)

menu1 = Menu(menubutton1)
menu1.add_command(label='About this program...', command=show_about)
menu1.add_command(label='New game', command=lambda: shuffle_board())
menu1.add_command(label='Quit', command=root.quit)
menubutton1['menu'] = menu1

menu2 = Menu(menubutton2)
menu2.add_command(label='Burlywood', command=lambda: change_bg('burlywood'))
menu2.add_command(label='Forest Green', command=lambda: change_bg('Forest Green'))
menu2.add_command(label='Orange', command=lambda: change_bg('orange'))
menubutton2['menu'] = menu2

root.mainloop()"
WUPQAGs9,‚≠êProfit Method‚≠ê üî•üíµ,mo_am5mer,JavaScript,Monday 27th of October 2025 08:50:47 AM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: sqn4z14mqymngxohmhplx71wfsb5571b0qedgtbydolmgtnu0a
"
Rt8jDrnq,fb_vanilla_ub24-25.sh,natanprog,Bash,Monday 27th of October 2025 08:50:33 AM CDT,"#!/bin/bash

# Please contact IBSurgeon with any question regarding this script: support@ib-aid.com
# This script is provided AS IS, without any warranty. 
# This script is licensed under IDPL https://firebirdsql.org/en/initial-developer-s-public-license-version-1-0/

FB_VER=2.5
FB_URL=""https://github.com/FirebirdSQL/firebird/releases/download/R2_5_9/FirebirdCS-2.5.9.27139-0.amd64.tar.gz""
FTP_URL=""https://cc.ib-aid.com/download/distr""

SYSCTL=/etc/sysctl.conf
SYS_STR=""vm.max_map_count""

TMP_DIR=$(mktemp -d)
OLD_DIR=$(pwd -P)

MOD_SCRIPT=$TMP_DIR/fb/scripts/postinstall.sh
#------------------------------------------------------------------------
#  register/start/stop server using systemd

SYSTEMCTL=systemctl
SYSTEMD_DIR=/usr/lib/systemd/system
[ -d $SYSTEMD_DIR ] || SYSTEMD_DIR=/lib/systemd/system

PROC_SKT_CTRL=firebird.socket
PROC_SVC_CTRL=firebird@.service
THRD_SVC_CTRL=firebird.service

download_file(){
    url=$1
    tmp=$2
    name=$3
    fname=$(basename -- ""$url"")

    echo ""Downloading $name...""
    m=$(curl -w ""%{http_code}"" --location $url --output $tmp/$fname --progress-bar)
    r=$?
    s=""""
    case $m in
	""200"") s=""OK"";;
	""404"") exit_script 1 ""File not found on server"";;
	   * ) exit_script 1 ""HTTP error ($m)"";;
    esac
    case $r in
       0) echo ""OK"";;	  
      23) exit_script $r ""Write error"";;
      67) exit_script $r ""Wrong login / password"";;
      78) exit_script $r ""File $url does not exist on server"";;
       *) exit_script $r ""Error downloading file ($r)"";;
    esac
}

exit_script(){
	p1=$1
	p2=$2
	if [[ -z ""$p1"" ]]; then
		p1=0				# p1 was empty
	fi
	# cleanup
	if [ -d $TMP_DIR ]; then rm -rf $TMP_DIR; fi
	if [ $p1 -eq 0 ]; then		# normal termination
		if [[ -z ""$p2"" ]]; then
			p2=""Script terminated normally""
		fi
		echo $p2
		exit 0
	else
		if [[ -z ""$p2"" ]]; then
			p2=""An error occured during script execution ($p1)""
		fi
		echo $p2
		exit $p1
	fi
}

if grep -q $SYS_STR $SYSCTL; then
	echo ""Parameter $SYS_STR already set in $SYSCTL""
else
	echo ""$SYS_STR = 256000"" >> $SYSCTL
	sysctl -p
fi

apt update
apt install --no-install-recommends -y ca-certificates net-tools wget unzip gettext libncurses6 curl tar tzdata locales sudo xz-utils file libtommath1 libicu74

ln -s libtommath.so.1 /usr/lib/x86_64-linux-gnu/libtommath.so.0
ln -s libncurses.so.6 /usr/lib/x86_64-linux-gnu/libncurses.so.5
locale-gen ""en_US.UTF-8""

download_file $FB_URL $TMP_DIR ""FB installer""
download_file $FTP_URL/$FB_VER/confv.tar.xz $TMP_DIR ""FB config files""
download_file $FTP_URL/$FB_VER/systemd-files.tar.xz $TMP_DIR ""Systemd support""

echo Extracting FB installer ==================================================

mkdir $TMP_DIR/fb $TMP_DIR/conf $TMP_DIR/systemd-files
tar xvf $TMP_DIR/*.gz -C $TMP_DIR/fb --strip-components=1 > /dev/null || exit_script 1 ""Error unpacking FB archive""
tar xvf $TMP_DIR/confv.tar.xz -C $TMP_DIR/conf > /dev/null || exit_script 1 ""Error unpacking conf archive""
tar xvf $TMP_DIR/systemd-files.tar.xz -C $TMP_DIR/systemd-files  > /dev/null || exit_script 1 ""Error unpacking systemd files""

echo Running FB installer =====================================================

if [ -e $SYSTEMD_DIR/$PROC_SKT_CTRL -a -e $SYSTEMD_DIR/$PROC_SVC_CTRL -a -e $SYSTEMD_DIR/$THRD_SVC_CTRL ]; then
        echo ""All systemd control files found.""
else
        echo ""One or more systemd control files not found. Copying to $SYSTEMD_DIR""
        cp $TMP_DIR/systemd-files/{$PROC_SKT_CTRL,$PROC_SVC_CTRL,$THRD_SVC_CTRL} $SYSTEMD_DIR
        echo ""Reloading systemd units""
        systemctl daemon-reload
fi

sed -i 's/^startService classic$/#startService classic/g' $MOD_SCRIPT
sed -i 's/^updateInetdServiceEntry$/#updateInetdServiceEntry/g' $MOD_SCRIPT
sed -i 's|replaceLineInFile /etc/services|#replaceLineInFile /etc/services|g' $MOD_SCRIPT

cd $TMP_DIR/fb

yes ""masterkey"" | ./install.sh
cp $TMP_DIR/systemd-files/changeSystemdMode.sh /opt/firebird/bin/

cd $OLD_DIR
cp -rf $TMP_DIR/conf/*.conf /opt/firebird
chown firebird:firebird /opt/firebird/firebird.conf /opt/firebird/aliases.conf
/opt/firebird/bin/changeSystemdMode.sh thread

echo Postinstall actions ======================================================

exit_script 0

"
LYfHpxUJ,üî• Exchange profit method üìåüìù,mo_am5mer,JavaScript,Monday 27th of October 2025 08:30:45 AM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: 87svyxrrvcp5b0z17be8hqsrrwkb37jvxkhtjb4nzarqktn1gh
"
BfAParpf,tarMainInstall.sh,natanprog,Bash,Monday 27th of October 2025 08:23:55 AM CDT,"#!/bin/sh
#
#  This library is part of the FirebirdSQL project
#
#  This library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 2.1 of the License, or (at your option) any later version.
#  You may obtain a copy of the Licence at
#  http://www.gnu.org/licences/lgpl.html
#  
#  As a special exception this file can also be included in modules
#  with other source code as long as that source code has been 
#  released under an Open Source Initiative certificed licence.  
#  More information about OSI certification can be found at: 
#  http://www.opensource.org 
#  
#  This module is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public Licence for more details.
#  
#  This module was created by members of the firebird development 
#  team.  All individual contributions remain the Copyright (C) of 
#  those individuals and all rights are reserved.  Contributors to 
#  this file are either listed below or can be obtained from a CVS 
#  history command.
# 
#   Created by:  Mark O'Donohue <mark.odonohue@ludwig.edu.au>
# 
#   Contributor(s):
#  
# 
#   $Id: tarMainInstall.sh.in,v 1.1 2003/06/06 14:04:39 alexpeshkoff Exp $
# 

#  Install script for FirebirdSQL database engine
#  http://www.firebirdsql.org

# This is the new file !!!


#------------------------------------------------------------------------
# Prompt for response, store result in Answer

Answer=""""

AskQuestion() {
    Test=$1
    DefaultAns=$2
    echo -n ""${1}""
    Answer=""$DefaultAns""
    read Answer
}

#------------------------------------------------------------------------
# Prompt for yes or no answer - returns non-zero for no

AskYNQuestion() {
    while echo -n ""${*} (y/n): ""
    do
        read answer rest
        case $answer in
        [yY]*)
            return 0
            ;;
        [nN]*)
            return 1
            ;;
        *)
            echo ""Please answer y or n""
            ;;
        esac
    done
}


#------------------------------------------------------------------------
# Run process and check status


runAndCheckExit() {
    Cmd=$*

#    echo $Cmd
    $Cmd

    ExitCode=$?

    if [ $ExitCode -ne 0 ]
      then
        echo ""Install aborted: The command $Cmd ""
        echo ""                 failed with error code $ExitCode""
        exit
    fi
}

#------------------------------------------------------------------------
# Check for a previous install 


checkInstallUser() {

    if [ ""`whoami`"" != ""root"" ];
      then
        echo """"
        echo ""--- Warning ----------------------------------------------""
        echo """"
        echo ""    You need to be 'root' user to install""
        echo """"
        exit
    fi
}



#== Main Program ==========================================================


InteractiveInstall=1
export InteractiveInstall


checkInstallUser

BuildVersion=1.5.6.5026
PackageVersion=0
CpuType=i686

Version=""$BuildVersion-$PackageVersion.$CpuType""


cat <<EOF

Firebird super $Version Installation

EOF



AskQuestion ""Press Enter to start installation or ^C to abort""


# Here we are installing from a install tar.gz file

if [ -e scripts ]
  then
    echo ""Extracting install data""
    runAndCheckExit ""./scripts/preinstall.sh""
    runAndCheckExit ""./scripts/tarinstall.sh""
    runAndCheckExit ""./scripts/postinstall.sh""

fi

echo ""Install completed""

"
VRBKc4f3,tarinstall.sh,natanprog,Bash,Monday 27th of October 2025 08:20:51 AM CDT,"#!/bin/sh
#
#  This library is part of the FirebirdSQL project
#
#  This library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 2.1 of the License, or (at your option) any later version.
#  You may obtain a copy of the Licence at
#  http://www.gnu.org/licences/lgpl.html
#  
#  As a special exception this file can also be included in modules
#  with other source code as long as that source code has been 
#  released under an Open Source Initiative certificed licence.  
#  More information about OSI certification can be found at: 
#  http://www.opensource.org 
#  
#  This module is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public Licence for more details.
#  
#  This module was created by members of the firebird development 
#  team.  All individual contributions remain the Copyright (C) of 
#  those individuals and all rights are reserved.  Contributors to 
#  this file are either listed below or can be obtained from a CVS 
#  history command.
# 
#   Created by:  Mark O'Donohue <mark.odonohue@ludwig.edu.au>
# 
#   Contributor(s):
#  
# 
#   $Id: tarinstall.sh.in,v 1.1.2.3 2004/01/29 13:37:33 alexpeshkoff Exp $
# 

# THe way this works is that the buildroot file is stored relative to the root
# directory and a tar -xzf at root directory will restore all the files in 
# the position that we want them to be

OrigDir=`pwd`

cd /

tar -xzf ""$OrigDir/buildroot.tar.gz""

cd ""$OrigDir""
"
CwTzE1N6,jQuery Form Input Element Value Reset All Elements,Virajsinh,jQuery,Monday 27th of October 2025 08:01:31 AM CDT,"<script type=""text/javascript"">
	$('#form_reset_btn').on('click', function () {
		let $form = $(this).closest('.card').find('form');

		// Reset the whole form
		$form[0].reset();

		// Clear inputs manually, except those with .ignore_reset
		$form.find('input:not(.ignore_reset), textarea:not(.ignore_reset)').each(function () {
			$(this).val('');
		});

		// Reset selects, excluding those with .ignore_reset
		$form.find('select:not(.ignore_reset)').each(function () {
			$(this).val('').trigger('change'); // Also works with select2
		});

		$form.find('select.ignore_reset').each(function () {
			if ($(this).attr('data-default_value')) {
				var value = $(this).attr('data-default_value');
				$(this).val(value).trigger('change');
			}
		});
	});
</script>"
