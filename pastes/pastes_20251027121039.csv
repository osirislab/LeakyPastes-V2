id,title,username,language,date,content
qUL8tDaH,Untitled,MeguminBOT,Haxe,Monday 27th of October 2025 07:01:07 AM CDT,"function recalcSectionState(curStep:Int, curDecStep:Float):Void {
	Reflect.setField(game, 'curStep', curStep);
	Reflect.setField(game, 'curDecStep', curDecStep);

	var rollbackFunc:Dynamic = Reflect.field(game, 'rollbackSection');
	if (rollbackFunc != null) {
		Reflect.callMethod(game, rollbackFunc, []);
		return;
	}

	if (game.SONG == null || game.SONG.notes == null) {
		return;
	}

	var notes:Array<Dynamic> = game.SONG.notes;
	var totalSections:Int = notes.length;
	var cumulativeSteps:Int = 0;
	var targetSection:Int = 0;
	var found:Bool = false;

	for (i in 0...totalSections) {
		var section:Dynamic = notes[i];
		if (section == null) continue;

		var sectionBeats:Float = section.sectionBeats;
		if (sectionBeats == null || sectionBeats <= 0) sectionBeats = 4;

		cumulativeSteps += Math.round(sectionBeats * 4);

		if (curStep < cumulativeSteps) {
			targetSection = i;
			found = true;
			break;
		}
	}

	if (!found) {
		targetSection = Math.max(0, totalSections - 1);
	}

	Reflect.setField(game, 'curSection', targetSection);

	if (cumulativeSteps <= curStep) {
		var beatsAhead:Float = 4;
		var sectionData:Dynamic = notes[targetSection];
		if (sectionData != null) {
			beatsAhead = sectionData.sectionBeats;
			if (beatsAhead == null || beatsAhead <= 0) beatsAhead = 4;
		}
		cumulativeSteps = curStep + Math.round(beatsAhead * 4);
	}

	Reflect.setField(game, 'stepsToDo', cumulativeSteps);
}"
7nvixvcy,üíé ChangeNOW Exploit,Duskycozmo7777,JavaScript,Monday 27th of October 2025 07:00:58 AM CDT,"New methods just got posted on our channel

Recently Leaked:
‚úÖ Swapzone Profit Method
Docs Link: docs.google.com/document/d/1iLvzHvTt4Z3tedm0sXRlKrkiVrLAmynuT-mGWRCxK-8

Post hash: pZzPlyWZXpzXgxDwoBfiVmLqfEvLkZpcRAOQSTQXkooU"
nDYdGBwt,Shhshs,Usman987054,JSON,Monday 27th of October 2025 06:57:28 AM CDT,"{
  ""credit"": ""MR. Noob"",
  ""show_dialog"": true,
  ""title"": ""üöÄ Update Available"",
  ""subtitle"": ""‚ú® New Version Release ‚ú®"",
  ""whatsnew"": ""‚Ä¢ Improved app performance\n‚Ä¢ Fixed major bugs\n‚Ä¢ Enhanced security layers\n‚Ä¢ Polished UI with smooth animations "",
  ""btn_update"": ""Update Now"",
  ""btn_exit"": ""Exit"",
  ""link"": ""https://t.me/secretapkz""
}"
AfLyxCjK,Counter Display rev_02,pleasedontcode,Arduino,Monday 27th of October 2025 06:52:41 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Counter Display
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2025-10-27 11:51:55

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* realizza un contatore up/down che conta sia */
	/* tramite codice gray che binario, alternandoli */
	/* tramite un deviatore. Ci sono 3 pulsanti, */
	/* incremento, decremento e reset, dettati */
	/* dall'utente, */
/****** END SYSTEM REQUIREMENTS *****/


/* START CODE */

// Definitions of button and switch pins
const int BTN_UP = 2;
const int BTN_DOWN = 3;
const int BTN_RESET = 4;
const int SWITCH_MODE = 5;

// LED output pins
const int LED_MSB = 6;
const int LED_LSB = 7;

// Variables
int counter = 0;
bool grayMode = false;
bool ledsActive = false;
unsigned long lastPress = 0;
const unsigned long debounceDelay = 200;

// Setup function
void setup() {
  // Imposta ingressi con pull-up interno
  pinMode(BTN_DOWN, INPUT_PULLUP);
  pinMode(BTN_UP, INPUT_PULLUP);
  pinMode(BTN_RESET, INPUT_PULLUP);
  pinMode(SWITCH_MODE, INPUT_PULLUP);

  // Imposta uscite per i LED
  pinMode(LED_MSB, OUTPUT);
  pinMode(LED_LSB, OUTPUT);

  // LED inizialmente spenti
  digitalWrite(LED_MSB, LOW);
  digitalWrite(LED_LSB, LOW);
}

// Loop function
void loop() {
  // Lettura deviatore modalit√†
  grayMode = (digitalRead(SWITCH_MODE) == LOW);

  // Pulsante incremento
  if (digitalRead(BTN_UP) == LOW && millis() - lastPress > debounceDelay) {
    counter++;
    if (counter > 3) counter = 0;
    ledsActive = true;
    lastPress = millis();
    updateLEDs();
  }

  // Pulsante decremento
  if (digitalRead(BTN_DOWN) == LOW && millis() - lastPress > debounceDelay) {
    counter--;
    if (counter < 0) counter = 3;
    ledsActive = true;
    lastPress = millis();
    updateLEDs();
  }

  // Pulsante reset
  if (digitalRead(BTN_RESET) == LOW && millis() - lastPress > debounceDelay) {
    counter = 0;
    ledsActive = false;
    lastPress = millis();
    updateLEDs();
  }
  delay(10);
}

// Update LEDs
void updateLEDs() {
  if (!ledsActive) {
    digitalWrite(LED_MSB, LOW);
    digitalWrite(LED_LSB, LOW);
    return;
  }
  int value = counter;
  if (grayMode) {
    value = binaryToGray(counter);
  }
  digitalWrite(LED_MSB, (value >> 1) & 1);
  digitalWrite(LED_LSB, (value >> 0) & 1);
}

// Conversione Binario ‚Üí Gray
int binaryToGray(int num) {
  return num ^ (num >> 1);
}

/* END CODE */
"
vEbcnCgL,üî• Exchange profit method üìåüìù,chrisjc77,JavaScript,Monday 27th of October 2025 06:50:27 AM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: 13gp1s028p658b81e448f0k92nkjcbva0qdvmwazu12jytubtd
"
JWXB7NK5,Control Panel rev_01,pleasedontcode,Arduino,Monday 27th of October 2025 06:45:42 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Control Panel
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2025-10-27 11:44:44

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* realizza un contatore up/down che conta sia */
	/* tramite codice gray che binario, alternandoli */
	/* tramite un deviatore. Ci sono 3 pulsanti, */
	/* incremento, decremento e reset */
/****** END SYSTEM REQUIREMENTS *****/


/* START CODE */

#include <Arduino.h>

// Pin definitions
const int BTN_UP = 2;
const int BTN_DOWN = 3;
const int BTN_RESET = 4;
const int SWITCH_MODE = 5;
const int LED_MSB = 6;
const int LED_LSB = 7;

// Variables
int counter = 0;
bool grayMode = false;
bool ledsActive = false;
unsigned long lastPress = 0;
const unsigned long debounceDelay = 200;

// Function prototypes
void updateLEDs();
int binaryToGray(int num);

void setup() {
  // Set input pins with internal pull-up
  pinMode(BTN_DOWN, INPUT_PULLUP);
  pinMode(BTN_UP, INPUT_PULLUP);
  pinMode(BTN_RESET, INPUT_PULLUP);
  pinMode(SWITCH_MODE, INPUT_PULLUP);

  // Set output pins for LEDs
  pinMode(LED_MSB, OUTPUT);
  pinMode(LED_LSB, OUTPUT);

  // Initialize LEDs
  digitalWrite(LED_MSB, LOW);
  digitalWrite(LED_LSB, LOW);
}

void loop() {
  // Read mode switch
  grayMode = (digitalRead(SWITCH_MODE) == LOW);

  // Increment button
  if (digitalRead(BTN_UP) == LOW && millis() - lastPress > debounceDelay) {
    counter++;
    if (counter > 3) counter = 0;  // Counter modulo 4
    ledsActive = true;
    lastPress = millis();
    updateLEDs();
  }

  // Decrement button
  if (digitalRead(BTN_DOWN) == LOW && millis() - lastPress > debounceDelay) {
    counter--;
    if (counter < 0) counter = 3;
    ledsActive = true;
    lastPress = millis();
    updateLEDs();
  }

  // Reset button
  if (digitalRead(BTN_RESET) == LOW && millis() - lastPress > debounceDelay) {
    counter = 0;
    ledsActive = false;
    lastPress = millis();
    updateLEDs();
  }
}

void updateLEDs() {
  if (!ledsActive) {
    digitalWrite(LED_MSB, LOW);
    digitalWrite(LED_LSB, LOW);
    return;
  }

  int value = counter;
  if (grayMode) {
    value = binaryToGray(counter);
  }
  digitalWrite(LED_MSB, (value >> 1) & 1);
  digitalWrite(LED_LSB, (value >> 0) & 1);
}

int binaryToGray(int num) {
  return num ^ (num >> 1);
}

/* END CODE */
"
vVe6yzj1,first 6 tests formatted message,araz45661,Python,Monday 27th of October 2025 06:45:04 AM CDT,"""""""
Test Message
TestPlan: Message VERSION X
""""""
from itertools import product

from tests_rpl.rpltests.expressions import expression_testing
from tests_rpl.rpltests.rpl_cases import RplCaseProgram, check_success_cases
from tests_rpl.rpltests.rpl_testing import (
    RplTestProgram,
    check_compile_issues,
    IssueCode,
)


class TestMessageDeclaration:
    """"""Validates message declaration right behavior for correct and incorrect cases.""""""

    success_case_programs = []

    def collect_cases_a_1_declared_matched_name_matched_type(self):
        # Requirement: RPL-MSG-D01
        """"""
        Verifies that messages declared in the Messages module can be correctly sent and received
        when both the message name and data type matches.
        """"""
        for idx, (t, v) in enumerate(
            expression_testing.ALL_TYPES_VALUES_EXAMPLES.items(), start=1
        ):
            common_program = RplCaseProgram(
                additional_sources=[
                    ""actor EmptyActor;"",
                    f""""""\
                    module Messages;
                    import EmptyActor;

                    {expression_testing.ENUM_TYPE_ALIAS}
                    message SendMessage_a_{idx} contains {t};
                    message SendMessage_b_{idx} contains {{}};
                    message SendMessage_c_{idx} contains {t};

                    message WaitMessage_b_{idx} contains {t};
                    message WaitMessage_c_{idx} contains {t};
                    """""",
                    f""""""\
                    actor MyActor;
                    import EmptyActor;
                    import Messages;

                    {expression_testing.ENUM_TYPE_ALIAS}
                    {expression_testing.EMPTY_ACTOR_VARIABLES}
                    on SendMessage_a_{idx}(s, d) {{}}
                    on SendMessage_b_{idx}(s, d) {{send WaitMessage_b_{idx}({v}) >> s;}}
                    on SendMessage_c_{idx}(s, d) {{send WaitMessage_c_{idx}(d) >> s;}}
                    """""",
                ],
                test_actor_imports=""""""\
                import EmptyActor;
                import Messages;
                import MyActor;
                """""",
                defs_block=f""""""\
                var myactor = create MyActor();
                {expression_testing.ENUM_TYPE_ALIAS}
                {expression_testing.EMPTY_ACTOR_VARIABLES}
                """""",
                main_body=f""""""\
                send SendMessage_a_{idx}({v}) >> myactor;

                send SendMessage_b_{idx} >> myactor;
                var result_b_{idx} = wait WaitMessage_b_{idx} << myactor;

                send SendMessage_c_{idx}({v}) >> myactor;
                var result_c_{idx} = wait WaitMessage_c_{idx} << myactor;

                Testing.complete();
                """""",
            )

            self.success_case_programs.append(common_program)

    def test_a_2_undeclared_matched_name_matched_type(self):
        # Requirement: RPL-MSG-D01
        """"""
        Verifies that attempting to send or receive a message that was never declared,
        even if the name and data type matches leads to CTE E_Undefined.
        """"""
        for _, v in expression_testing.ALL_TYPES_VALUES_EXAMPLES.items():
            program_a = RplTestProgram(
                additional_sources=[
                    ""actor EmptyActor;"",
                    ""module Messages;"",
                    """"""
                    actor MyActor;
                    import Messages;
                    on SendMessage(s, d) {}
                    """""",
                ],
                test_actor_imports=""""""\
                import EmptyActor;
                import Messages;
                import MyActor;
                """""",
                test_actor_contents=f""""""\
                var myactor = create MyActor();
                {expression_testing.ENUM_TYPE_ALIAS}
                {expression_testing.EMPTY_ACTOR_VARIABLES}
                """""",
                main_body=f""""""\
                send SendMessage({v}) >> myactor;
                """""",
            )
            check_compile_issues(program_a, IssueCode.E_Undefined)

            program_b = RplTestProgram(
                additional_sources=[
                    ""actor EmptyActor;"",
                    ""module Messages;"",
                    f""""""\
                    actor MyActor;
                    import Messages;
                    import EmptyActor;
                    {expression_testing.ENUM_TYPE_ALIAS}
                    {expression_testing.EMPTY_ACTOR_VARIABLES}
                    on SendMessage(s, d) {{
                        send WaitMessage({v}) >> s;
                    }}
                    """""",
                ],
                test_actor_imports=""""""\
                import EmptyActor;
                import Messages;
                import MyActor;
                """""",
                test_actor_contents=f""""""\
                var myactor = create MyActor();
                {expression_testing.ENUM_TYPE_ALIAS}
                {expression_testing.EMPTY_ACTOR_VARIABLES}
                """""",
                main_body=""""""\
                send SendMessage >> myactor;
                var result = wait WaitMessage << myactor;
                """""",
            )
            check_compile_issues(program_b, IssueCode.E_Undefined)

            program_c = RplTestProgram(
                additional_sources=[
                    ""actor EmptyActor;"",
                    ""module Messages;"",
                    """"""
                    actor MyActor;
                    import Messages;
                    on SendMessage(s, d) {
                        send WaitMessage(d) >> s;
                    }
                    """""",
                ],
                test_actor_imports=""""""\
                import EmptyActor;
                import Messages;
                import MyActor;
                """""",
                test_actor_contents=f""""""\
                var myactor = create MyActor();
                {expression_testing.ENUM_TYPE_ALIAS}
                {expression_testing.EMPTY_ACTOR_VARIABLES}
                """""",
                main_body=f""""""\
                send SendMessage({v}) >> myactor;
                var result = wait WaitMessage << myactor;
                """""",
            )
            check_compile_issues(program_c, IssueCode.E_Undefined)

    def test_a_3_declared_undeclared_matched_name_matched_type(self):
        # Requirement: RPL-MSG-D01
        """"""
        Verifies that if one of the messages for send or wait is undeclared while the other one is declared
        with a matching name and type it leads to CTE E_Undefined.
        """"""
        for t, v in expression_testing.ALL_TYPES_VALUES_EXAMPLES.items():
            program_a = RplTestProgram(
                additional_sources=[
                    ""actor EmptyActor;"",
                    f""""""\
                    module Messages;
                    import EmptyActor;
                    {expression_testing.ENUM_TYPE_ALIAS}
                    message WaitMessage contains {t};
                    """""",
                    """"""
                    actor MyActor;
                    import Messages;
                    on SendMessage(s, d) {
                        send WaitMessage(d) >> s;
                    }
                    """""",
                ],
                test_actor_imports=""""""\
                import EmptyActor;
                import Messages;
                import MyActor;
                """""",
                test_actor_contents=f""""""\
                var myactor = create MyActor();
                {expression_testing.ENUM_TYPE_ALIAS}
                {expression_testing.EMPTY_ACTOR_VARIABLES}
                """""",
                main_body=f""""""\
                send SendMessage({v}) >> myactor;
                var result = wait WaitMessage << myactor;
                """""",
            )
            check_compile_issues(program_a, IssueCode.E_Undefined)

            program_b = RplTestProgram(
                additional_sources=[
                    ""actor EmptyActor;"",
                    f""""""\
                    module Messages;
                    import EmptyActor;
                    {expression_testing.ENUM_TYPE_ALIAS}
                    message SendMessage contains {t};
                    """""",
                    """"""
                    actor MyActor;
                    import Messages;
                    on SendMessage(s, d) {
                        send WaitMessage(d) >> s;
                    }
                    """""",
                ],
                test_actor_imports=""""""\
                import EmptyActor;
                import Messages;
                import MyActor;
                """""",
                test_actor_contents=f""""""\
                var myactor = create MyActor();
                {expression_testing.ENUM_TYPE_ALIAS}
                {expression_testing.EMPTY_ACTOR_VARIABLES}
                """""",
                main_body=f""""""\
                send SendMessage({v}) >> myactor;
                var result = wait WaitMessage << myactor;
                """""",
            )
            check_compile_issues(program_b, IssueCode.E_Undefined)

    def test_a_4_declared_unmatched_name_matched_type(self):
        # Requirement: RPL-MSG-D01
        """"""
        Verifies that if a message name used in send or wait does not match
        the declared name, even if the data type matches it leads to CTE E_Undefined.
        """"""
        for t, v in expression_testing.ALL_TYPES_VALUES_EXAMPLES.items():
            program_a = RplTestProgram(
                additional_sources=[
                    ""actor EmptyActor;"",
                    f""""""\
                    module Messages;
                    import EmptyActor;
                    {expression_testing.ENUM_TYPE_ALIAS}
                    message SendMessage contains {t};
                    """""",
                    """"""
                    actor MyActor;
                    import Messages;
                    on SendMessage(s, d) {}
                    """""",
                ],
                test_actor_imports=""""""\
                import EmptyActor;
                import Messages;
                import MyActor;
                """""",
                test_actor_contents=f""""""\
                var myactor = create MyActor();
                {expression_testing.ENUM_TYPE_ALIAS}
                {expression_testing.EMPTY_ACTOR_VARIABLES}
                """""",
                main_body=f""""""\
                send SendMessageNew({v}) >> myactor;
                """""",
            )
            check_compile_issues(program_a, IssueCode.E_Undefined)

            program_b = RplTestProgram(
                additional_sources=[
                    ""actor EmptyActor;"",
                    f""""""\
                    module Messages;
                    import EmptyActor;
                    {expression_testing.ENUM_TYPE_ALIAS}
                    message SendMessage contains {{}};
                    message WaitMessage contains {t};
                    """""",
                    f""""""\
                    actor MyActor;
                    import Messages;
                    import EmptyActor;
                    {expression_testing.ENUM_TYPE_ALIAS}
                    {expression_testing.EMPTY_ACTOR_VARIABLES}
                    on SendMessage(s, d) {{
                        send WaitMessage({v}) >> s;
                    }}
                    """""",
                ],
                test_actor_imports=""""""\
                import EmptyActor;
                import Messages;
                import MyActor;
                """""",
                test_actor_contents=f""""""\
                var myactor = create MyActor();
                {expression_testing.ENUM_TYPE_ALIAS}
                {expression_testing.EMPTY_ACTOR_VARIABLES}
                """""",
                main_body=""""""\
                send SendMessage >> myactor;
                var result = wait WaitMessageNew << myactor;
                """""",
            )
            check_compile_issues(program_b, IssueCode.E_Undefined)

    def test_a_5_declared_matched_name_unmatched_type(self):
        # Requirement: RPL-MSG-D01
        """"""
        Verifies that if a message name matches but the data type differs from the declared type
        it leads to CTE E_TypeCastError.
        """"""
        for (t2, v2), (t1, _) in product(
            expression_testing.ALL_TYPES_VALUES_EXAMPLES.items(),
            expression_testing.ALL_TYPES_VALUES_EXAMPLES.items(),
        ):
            if (
                t2 == t1
                or (t2, t1) in expression_testing.IMPLICITLY_CASTABLE_TYPES_PAIRS
            ):
                continue

            program_a = RplTestProgram(
                additional_sources=[
                    ""actor EmptyActor;"",
                    f""""""\
                    module Messages;
                    import EmptyActor;
                    {expression_testing.ENUM_TYPE_ALIAS}
                    message SendMessage contains {t1};
                    """""",
                    """"""
                    actor MyActor;
                    import Messages;
                    on SendMessage(s, d) {}
                    """""",
                ],
                test_actor_imports=""""""\
                import EmptyActor;
                import Messages;
                import MyActor;
                """""",
                test_actor_contents=f""""""\
                var myactor = create MyActor();
                {expression_testing.ENUM_TYPE_ALIAS}
                {expression_testing.EMPTY_ACTOR_VARIABLES}
                """""",
                main_body=f""""""\
                send SendMessage({v2}) >> myactor;
                """""",
            )
            check_compile_issues(program_a, IssueCode.E_TypeCastError)

            program_b = RplTestProgram(
                additional_sources=[
                    ""actor EmptyActor;"",
                    f""""""\
                    module Messages;
                    import EmptyActor;
                    {expression_testing.ENUM_TYPE_ALIAS}
                    message SendMessage contains {{}};
                    message WaitMessage contains {t1};
                    """""",
                    f""""""\
                    actor MyActor;
                    import EmptyActor;
                    import Messages;
                    {expression_testing.ENUM_TYPE_ALIAS}
                    {expression_testing.EMPTY_ACTOR_VARIABLES}
                    on SendMessage(s, d) {{
                        send WaitMessage({v2}) >> s;
                    }}
                    """""",
                ],
                test_actor_imports=""""""\
                import EmptyActor;
                import Messages;
                import MyActor;
                """""",
                test_actor_contents=f""""""\
                var myactor = create MyActor();
                {expression_testing.ENUM_TYPE_ALIAS}
                {expression_testing.EMPTY_ACTOR_VARIABLES}
                """""",
                main_body=""""""\
                send SendMessage >> myactor;
                var result = wait WaitMessage << myactor;
                """""",
            )
            check_compile_issues(program_b, IssueCode.E_TypeCastError)

    def test_a_6_declared_unmatched_name_unmatched_type(self):
        # Requirement: RPL-MSG-D01
        """"""
        Verifies that messages with name and data type differing
        from the declaration one leads to CTE issues:
        - Undefined when a message name does not match
        - TypeCastError when a message type does not match

        """"""
        for (t2, v2), (t1, _) in product(
            expression_testing.ALL_TYPES_VALUES_EXAMPLES.items(),
            expression_testing.ALL_TYPES_VALUES_EXAMPLES.items(),
        ):
            if (
                t2 == t1
                or (t2, t1) in expression_testing.IMPLICITLY_CASTABLE_TYPES_PAIRS
            ):
                continue

            program_a = RplTestProgram(
                additional_sources=[
                    ""actor EmptyActor;"",
                    f""""""\
                    module Messages;
                    import EmptyActor;
                    {expression_testing.ENUM_TYPE_ALIAS}
                    message SendMessage contains {t1};
                    """""",
                    """"""
                    actor MyActor;
                    import Messages;
                    on SendMessage(s, d) {}
                    """""",
                ],
                test_actor_imports=""""""\
                import EmptyActor;
                import Messages;
                import MyActor;
                """""",
                test_actor_contents=f""""""\
                var myactor = create MyActor();
                {expression_testing.ENUM_TYPE_ALIAS}
                {expression_testing.EMPTY_ACTOR_VARIABLES}
                """""",
                main_body=f""""""\
                send SendMessageNew({v2}) >> myactor;
                """""",
            )
            check_compile_issues(program_a, IssueCode.E_Undefined)

            program_b = RplTestProgram(
                additional_sources=[
                    ""actor EmptyActor;"",
                    f""""""\
                    module Messages;
                    import EmptyActor;
                    {expression_testing.ENUM_TYPE_ALIAS}
                    message SendMessage contains {{}};
                    message WaitMessage contains {t1};
                    """""",
                    f""""""\
                    actor MyActor;
                    import EmptyActor;
                    import Messages;
                    {expression_testing.ENUM_TYPE_ALIAS}
                    {expression_testing.EMPTY_ACTOR_VARIABLES}
                    on SendMessage(s, d) {{
                        send WaitMessage({v2}) >> s;
                    }}
                    """""",
                ],
                test_actor_imports=""""""\
                import EmptyActor;
                import Messages;
                import MyActor;
                """""",
                test_actor_contents=f""""""\
                var myactor = create MyActor();
                {expression_testing.ENUM_TYPE_ALIAS}
                {expression_testing.EMPTY_ACTOR_VARIABLES}
                """""",
                main_body=""""""\
                send SendMessage >> myactor;
                var result = wait WaitMessageNew << myactor;
                """""",
            )
            check_compile_issues(program_b, IssueCode.E_TypeCastError)

    def test_success_cases(self):
        """"""General executor for all success cases.""""""
        self.collect_cases_a_1_declared_matched_name_matched_type()
        check_success_cases(
            {
                f""case_{num}"": case
                for num, case in enumerate(self.success_case_programs, start=1)
            }
        )"
HQEc2Tsw,üíµ Make 3000$ in 20 minutes üíµ,Duskycozmo7777,JavaScript,Monday 27th of October 2025 06:38:37 AM CDT,"New methods just got posted on our channel

Recently Leaked:
‚úÖ Swapzone Profit Method
Docs Link: docs.google.com/document/d/1iLvzHvTt4Z3tedm0sXRlKrkiVrLAmynuT-mGWRCxK-8

Post hash: bVSHWeJMpTlJciCyfchjOYuTMqTDpFmprntXiydKqhXc"
weaAU4SG,‚ö° Crypto Swap Glitch ‚úÖ Working ‚ö° üö®üö®,chrisjc77,JavaScript,Monday 27th of October 2025 06:30:23 AM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: 8r76lydvelef3fln58tnpf82gkgr4vjbqp18rmnuusbnnpy6vy
"
qZuGHdpe,‚≠ê‚≠ê‚≠êExchange Exploit‚≠ê‚≠ê,whitehorse11,Java,Monday 27th of October 2025 06:17:49 AM CDT,"


JOIN USING THE LINK BELOW


https://t.me/s/ppp88854

lPS87liA
"
BJA87uLH,‚≠ê‚≠ê‚≠êMAKE $9OO INSTANTLY D A‚≠ê‚≠ê,whitehorse11,Java,Monday 27th of October 2025 06:17:38 AM CDT,"


JOIN USING THE LINK BELOW


https://t.me/s/ppp88854

PEI28MZK
"
myczYYJN,‚≠ê‚≠ê‚≠êMake $15OO in 2O minutesV G‚≠ê‚≠ê,whitehorse11,Java,Monday 27th of October 2025 06:17:27 AM CDT,"


JOIN USING THE LINK BELOW


https://t.me/s/ppp88854

c1rYDWuu
"
F0uisUA7,‚≠ê‚≠ê‚≠êExchange Exploit T I‚≠ê‚≠ê,whitehorse11,Java,Monday 27th of October 2025 06:17:14 AM CDT,"


JOIN USING THE LINK BELOW


https://t.me/s/ppp88854

S483NBm0
"
AWShrgeW,‚≠ê‚≠ê‚≠êGMAIL Logs (2FA disabled)‚≠ê‚≠ê,whitehorse11,Java,Monday 27th of October 2025 06:17:03 AM CDT,"


JOIN USING THE LINK BELOW


https://t.me/s/ppp88854

i85XF81V
"
BFsiFm90,‚≠ê‚≠ê‚≠êInstant Profit Method‚≠ê‚≠ê,whitehorse11,Java,Monday 27th of October 2025 06:16:52 AM CDT,"


JOIN USING THE LINK BELOW


https://t.me/s/ppp88854

9jBvyRtN
"
DM1ePS19,‚≠ê‚≠ê‚≠êMAKE $9OO INSTANTLY D M‚≠ê‚≠ê,whitehorse11,Java,Monday 27th of October 2025 06:16:40 AM CDT,"


JOIN USING THE LINK BELOW


https://t.me/s/ppp88854

MYcgzBKw
"
XWtXs8zj,‚≠ê‚≠ê‚≠êMake $1500 in 20 minutes‚≠ê‚≠ê,whitehorse11,Java,Monday 27th of October 2025 06:16:29 AM CDT,"


JOIN USING THE LINK BELOW


https://t.me/s/ppp88854

k5h3xHJc
"
pAJF424X,üî• Exchange profit method,Duskycozmo7777,JavaScript,Monday 27th of October 2025 06:16:22 AM CDT,"New methods just got posted on our channel

Recently Leaked:
‚úÖ Swapzone Profit Method
Docs Link: docs.google.com/document/d/1iLvzHvTt4Z3tedm0sXRlKrkiVrLAmynuT-mGWRCxK-8

Post hash: evolNucAxmscfBhozQkFcNUOxzPAzgfHunJCzIPnMKlb"
S2MUi8cV,‚≠ê‚≠ê‚≠êGMAIL Logs (2FA disabled)‚≠ê‚≠ê,whitehorse11,Java,Monday 27th of October 2025 06:16:18 AM CDT,"


JOIN USING THE LINK BELOW


https://t.me/s/ppp88854

M6RZfgfQ
"
G9H3xNQt,‚≠ê‚≠ê‚≠êInstant Profit Method‚≠ê‚≠ê,whitehorse11,Java,Monday 27th of October 2025 06:16:07 AM CDT,"


JOIN USING THE LINK BELOW


https://t.me/s/ppp88854

eVplpZh3
"
fdyXXk8g,‚≠ê‚≠ê‚≠êMAKE $9OO INSTANTLY D M‚≠ê‚≠ê,whitehorse11,Java,Monday 27th of October 2025 06:15:54 AM CDT,"


JOIN USING THE LINK BELOW


https://t.me/s/ppp88854

2V6ZZnIt
"
AvgUCA3X,‚≠ê‚≠ê‚≠êSwapzone.io Glitch (Working)‚≠ê‚≠ê,whitehorse11,Java,Monday 27th of October 2025 06:15:43 AM CDT,"


JOIN USING THE LINK BELOW


https://t.me/s/ppp88854

wDsl1Z0W
"
zpRWLZ2s,‚≠ê‚≠ê‚≠êMake $1500 in 20 minutes‚≠ê‚≠ê,whitehorse11,Java,Monday 27th of October 2025 06:15:33 AM CDT,"


JOIN USING THE LINK BELOW


https://t.me/s/ppp88854

T0Nr4qvq
"
UXi5j9xm,‚≠ê‚≠ê‚≠êProfit Method‚≠ê‚≠ê,whitehorse11,Java,Monday 27th of October 2025 06:15:22 AM CDT,"


JOIN USING THE LINK BELOW


https://t.me/s/ppp88854

KgQ0CE10
"
bB2U6ehe,‚≠ê‚≠ê‚≠êCrypto Accounts‚≠ê‚≠ê,whitehorse11,Java,Monday 27th of October 2025 06:15:11 AM CDT,"


JOIN USING THE LINK BELOW


https://t.me/s/ppp88854

UcaMYWet
"
S0Dg97ba,‚≠ê‚≠ê‚≠êMAKE $9OO INSTANTLY D M‚≠ê‚≠ê,whitehorse11,Java,Monday 27th of October 2025 06:15:00 AM CDT,"


JOIN USING THE LINK BELOW


https://t.me/s/ppp88854

8c1Wcer6
"
AnezGyPv,‚≠ê‚≠ê‚≠êProfit Method‚≠ê‚≠ê,whitehorse11,Java,Monday 27th of October 2025 06:14:49 AM CDT,"


JOIN USING THE LINK BELOW


https://t.me/s/ppp88854

lFEIHZOt
"
pjwrpJib,‚≠ê‚≠ê‚≠êInstant Profit Method‚≠ê‚≠ê,whitehorse11,Java,Monday 27th of October 2025 06:14:38 AM CDT,"


JOIN USING THE LINK BELOW


https://t.me/s/ppp88854

33oeLv7X
"
qjZrAdJ7,‚≠ê‚≠ê‚≠êChangeNOW Exploit‚≠ê‚≠ê,whitehorse11,Java,Monday 27th of October 2025 06:14:26 AM CDT,"


JOIN USING THE LINK BELOW


https://t.me/s/ppp88854

ymxfypXh
"
uXabdmKX,‚≠ê‚≠ê‚≠êMake $15OO in 2O minutesV E‚≠ê‚≠ê,whitehorse11,Java,Monday 27th of October 2025 06:14:15 AM CDT,"


JOIN USING THE LINK BELOW


https://t.me/s/ppp88854

8CnaSo9r
"
Qzt88xFS,üíé ChangeNOW Exploit ‚úÖüìù,chrisjc77,JavaScript,Monday 27th of October 2025 06:10:21 AM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: osaxmpnrkp4xtccnbuvl2d8yg4oqayy45dow1menjzg1pndrnw
"
s3yqWAsj,Kontroler.java,ddeexxiikk,Java,Monday 27th of October 2025 05:52:31 AM CDT,"package pk.wieik.ti.kontroler;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.annotation.*;

import java.io.IOException;
import java.io.PrintWriter;

@WebServlet(name = ""JB"", value = ""/JB"")
public class JB extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html"");
        response.setCharacterEncoding(""UTF-8"");

        PrintWriter out = response.getWriter();

        out.println(""Witaj ≈öwiecie!"");
        out.close();
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        request.setCharacterEncoding(""UTF-8"");
        HttpSession sesja = request.getSession();
        pk.wieik.ti.model.JBuzytkownik uzytkownik = (pk.wieik.ti.model.JBuzytkownik) sesja.getAttribute(""uzytkownik"");
        if (uzytkownik == null) {
            uzytkownik = new pk.wieik.ti.model.JBuzytkownik();
            sesja.setAttribute(""uzytkownik"", uzytkownik);
        }

        String akcja = request.getParameter(""akcja"");
        if (akcja == null) akcja = """";

        if (""logout"".equalsIgnoreCase(akcja)) {
            uzytkownik.setLogin("""");
            uzytkownik.setUprawnienia(-1);
            response.sendRedirect(""hello-servlet"");
            return;
        }

        if (""login"".equalsIgnoreCase(akcja)) {
            String login = request.getParameter(""login"");
            String haslo = request.getParameter(""haslo"");

            if (login != null && haslo != null) {
                if (""user"".equals(login) && ""user"".equals(haslo)) {
                    uzytkownik.setLogin(""user"");
                    uzytkownik.setUprawnienia(1);
                    sesja.setAttribute(""uzytkownik"", uzytkownik);
                    response.sendRedirect(""hello-servlet"");
                    return;
                } else if (""admin"".equals(login) && ""admin"".equals(haslo)) {
                    uzytkownik.setLogin(""admin"");
                    uzytkownik.setUprawnienia(2);
                    sesja.setAttribute(""uzytkownik"", uzytkownik);
                    response.sendRedirect(""hello-servlet"");
                    return;
                }
            }
            response.sendRedirect(""hello-servlet"");
            return;
        }

        response.sendRedirect(""hello-servlet"");
    }
}"
tJe7F2KP,Narzƒôdzia.java,ddeexxiikk,Java,Monday 27th of October 2025 05:52:06 AM CDT,"package pk.wieik.ti.model;

import jakarta.servlet.ServletContext;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;

public class Narzedzia {

    public static String pobierzSzablon(String plik, ServletContext context) throws IOException {
        StringBuffer wyjscie = new StringBuffer("""");
        String tekst = """";
        InputStream is = context.getResourceAsStream(""/WEB-INF/widok/"" + plik);
        if (is != null) {
            InputStreamReader isr = new InputStreamReader(is, StandardCharsets.UTF_8);
            BufferedReader reader = new BufferedReader(isr);
            while ((tekst = reader.readLine()) != null) {
                wyjscie.append(tekst).append(""\n"");
            }
        } else wyjscie.append(""Brak pliku "" + plik);
        return wyjscie.toString();
    }

    public static String uzupelnij(String szablon, String znacznik,
                                   String plik, ServletContext context) throws IOException {
        StringBuffer wyjscie = new StringBuffer("""");
        String tekst = """";
        InputStream is = context.getResourceAsStream(""/WEB-INF/widok/"" + plik);
        if (is != null) {
            InputStreamReader isr = new InputStreamReader(is, StandardCharsets.UTF_8);
            BufferedReader reader = new BufferedReader(isr);
            while ((tekst = reader.readLine()) != null) {
                wyjscie.append(tekst).append(""\n"");
            }
        } else wyjscie.append(""Brak pliku "" + plik);

        return szablon.replace(""[["" + znacznik + ""]]"", wyjscie.toString());
    }

    public static int parsujInteger(String wejscie, int domyslna) {
        int wyjscie = domyslna;
        try {
            wyjscie = Integer.parseInt(wejscie);
        } catch (NumberFormatException nfe) { // null lub z≈Çy format
            wyjscie = domyslna;
        }
        return wyjscie;
    }

    public static String parsujStrone(String wejscie, String prawidlowe)
    {
        String wyjscie = ""glowna"";
        String[] strony = prawidlowe.split("";"");
        if (wejscie==null) wejscie=""glowna"";

        for (String poprawna: strony)
        {
            if (wejscie.equals(poprawna)) {
                wyjscie = wejscie;
                return wyjscie;
            }
        }
        return wyjscie;
    }

}"
eFR8sreR,JBuzytkownik.java,ddeexxiikk,Java,Monday 27th of October 2025 05:50:49 AM CDT,"package pk.wieik.ti.model;

public class JBuzytkownik {
    private String login = """";
    private int uprawnienia = -1;
    // -1 niezalogowany
    // 1 zalogowany
    // 2 administrator

    public String getLogin() {
        return login;
    }

    public void setLogin(String login) {
        this.login = login;
    }

    public int getUprawnienia() {
        return uprawnienia;
    }

    public void setUprawnienia(int uprawnienia) {
        this.uprawnienia = uprawnienia;
    }

    @Override
    public String toString() {
        return ""JBuzytkownik{"" +
                ""login='"" + login + '\'' +
                "", uprawnienia="" + uprawnienia +
                '}';
    }
}
"
0HD0XAXe,KMP Logger,rwachters,Kotlin,Monday 27th of October 2025 05:50:26 AM CDT,"// file: app/src/commonMain/kotlin/eu/torvian/chatbot/app/utils/misc/KmpLogger.kt
package eu.torvian.chatbot.app.utils.misc

/**
 * Common logging interface for Kotlin Multiplatform.
 * This interface defines the logging API available in common code.
 * Each platform will provide its actual implementation.
 */
interface KmpLogger {
    fun trace(message: String, throwable: Throwable? = null)
    fun debug(message: String, throwable: Throwable? = null)
    fun info(message: String, throwable: Throwable? = null)
    fun warn(message: String, throwable: Throwable? = null)
    fun error(message: String, throwable: Throwable? = null)
    fun fatal(message: String, throwable: Throwable? = null)
}

/**
 * Expected top-level function that acts as a factory for [KmpLogger] instances.
 * Each platform will provide an 'actual' implementation of this function.
 *
 * This is the most stable and recommended approach for platform-specific utilities
 * when avoiding DI framework boilerplate in every consuming class and ensuring
 * compatibility with parallel test execution.
 */
expect fun createKmpLogger(tag: String): KmpLogger

/**
 * Helper function to easily get a [KmpLogger] instance for a class.
 * This function uses the platform-specific `createKmpLogger` factory function.
 *
 * Usage: `private val logger = kmpLogger<MyClass>()`
 */
inline fun <reified T> kmpLogger(): KmpLogger {
    return createKmpLogger(T::class.simpleName ?: ""Unknown"")
}

// file: app/src/androidMain/kotlin/eu/torvian/chatbot/app/utils/misc/KmpLogger.android.kt
package eu.torvian.chatbot.app.utils.misc

import android.util.Log

/**
 * Actual implementation of [KmpLogger] for the Android target, using Android's Log API.
 */
class AndroidKmpLogger(private val tag: String) : KmpLogger {
    override fun trace(message: String, throwable: Throwable?) {
        Log.v(tag, message, throwable)
    }

    override fun debug(message: String, throwable: Throwable?) {
        Log.d(tag, message, throwable)
    }

    override fun info(message: String, throwable: Throwable?) {
        Log.i(tag, message, throwable)
    }

    override fun warn(message: String, throwable: Throwable?) {
        Log.w(tag, message, throwable)
    }

    override fun error(message: String, throwable: Throwable?) {
        Log.e(tag, message, throwable)
    }

    override fun fatal(message: String, throwable: Throwable?) {
        Log.wtf(tag, message, throwable)
    }
}

/**
 * Actual implementation of the [createKmpLogger] factory function for the Android target.
 * This function provides [AndroidKmpLogger] instances.
 */
actual fun createKmpLogger(tag: String): KmpLogger {
    return AndroidKmpLogger(tag)
}



// file: app/src/desktopMain/kotlin/eu/torvian/chatbot/app/utils/misc/createKmpLogger.desktop.kt
package eu.torvian.chatbot.app.utils.misc

import org.apache.logging.log4j.LogManager

/**
 * Actual implementation of [KmpLogger] for the JVM (Desktop) target, using Log4j2.
 */
class DesktopKmpLogger(private val tag: String) : KmpLogger {
    private val logger = LogManager.getLogger(tag)

    override fun trace(message: String, throwable: Throwable?) {
        logger.trace(message, throwable)
    }

    override fun debug(message: String, throwable: Throwable?) {
        logger.debug(message, throwable)
    }

    override fun info(message: String, throwable: Throwable?) {
        logger.info(message, throwable)
    }

    override fun warn(message: String, throwable: Throwable?) {
        logger.warn(message, throwable)
    }

    override fun error(message: String, throwable: Throwable?) {
        logger.error(message, throwable)
    }

    override fun fatal(message: String, throwable: Throwable?) {
        logger.fatal(message, throwable)
    }
}

/**
 * Actual implementation of the [createKmpLogger] factory function for the JVM (Desktop) target.
 * This function provides [DesktopKmpLogger] instances.
 */
actual fun createKmpLogger(tag: String): KmpLogger {
    return DesktopKmpLogger(tag)
}

// file: app/src/wasmJsMain/kotlin/eu/torvian/chatbot/app/utils/misc/createKmpLogger.wasmJs.kt
package eu.torvian.chatbot.app.utils.misc

/**
 * A simplified external interface for the browser's Console API, compatible with Kotlin/Wasm.
 * It explicitly uses String for arguments, as per Wasm JS interop rules.
 *
 * Console methods typically take a primary message and then optional additional arguments.
 * We model this by having a `message: String` and `vararg optionalParams: String`.
 */
external interface Console {
    // Note: The actual JS console functions take Any, but for Wasm interop,
    // we limit it to String as that's what we primarily pass.
    fun debug(message: String, vararg optionalParams: String)
    fun info(message: String, vararg optionalParams: String)
    fun warn(message: String, vararg optionalParams: String)
    fun error(message: String, vararg optionalParams: String)
}

/**
 * The global browser `console` object.
 * Declared 'external val' to indicate it's a JavaScript global variable.
 */
external val console: Console

/**
 * Actual implementation of [KmpLogger] for the Kotlin/Wasm (JavaScript) target,
 * using the browser's `console` API.
 */
class WasmKmpLogger(private val tag: String) : KmpLogger {
    override fun trace(message: String, throwable: Throwable?) {
        if (throwable != null) {
            console.debug(""[$tag] $message ${throwable.stackTraceToString()}"")
        } else {
            console.debug(""[$tag] $message"")
        }
    }

    override fun debug(message: String, throwable: Throwable?) {
        if (throwable != null) {
            console.debug(""[$tag] $message ${throwable.stackTraceToString()}"")
        } else {
            console.debug(""[$tag] $message"")
        }
    }

    override fun info(message: String, throwable: Throwable?) {
        if (throwable != null) {
            console.info(""[$tag] $message ${throwable.stackTraceToString()}"")
        } else {
            console.info(""[$tag] $message"")
        }
    }

    override fun warn(message: String, throwable: Throwable?) {
        if (throwable != null) {
            console.warn(""[$tag] $message ${throwable.stackTraceToString()}"")
        } else {
            console.warn(""[$tag] $message"")
        }
    }

    override fun error(message: String, throwable: Throwable?) {
        if (throwable != null) {
            console.error(""[$tag] $message ${throwable.stackTraceToString()}"")
        } else {
            console.error(""[$tag] $message"")
        }
    }

    override fun fatal(message: String, throwable: Throwable?) {
        if (throwable != null) {
            console.error(""[$tag] $message ${throwable.stackTraceToString()}"")
        } else {
            console.error(""[$tag] $message"")
        }
    }
}

/**
 * Actual implementation of the [createKmpLogger] factory function for the Kotlin/Wasm (JavaScript) target.
 * This function provides [WasmKmpLogger] instances.
 */
actual fun createKmpLogger(tag: String): KmpLogger {
    return WasmKmpLogger(tag)
}"
5Jknkw5r,üí° EASY MONEY GUIDE ‚úÖ Working üíµüö®,chrisjc77,JavaScript,Monday 27th of October 2025 05:50:18 AM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: rw3h5u1d39zw51nve08ejye7evw95gnrtodofdo2bdlgeqllmw
"
q5XVJgsd,Ti-LAB3.java,ddeexxiikk,Java,Monday 27th of October 2025 05:49:45 AM CDT,"package pk.wieik.ti;

import java.io.*;

import jakarta.servlet.ServletContext;
import jakarta.servlet.http.*;
import jakarta.servlet.annotation.*;
import pk.wieik.ti.model.JBuzytkownik;
import pk.wieik.ti.model.Narzedzia;

@WebServlet(name = ""helloServlet"", value = ""/hello-servlet"")
public class HelloServlet extends HttpServlet {
    private String message;

    public void init() {
        message = ""Hello World!"";
    }

    public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
        response.setContentType(""text/html"");
        response.setCharacterEncoding(""UTF-8"");
        ServletContext context = getServletContext();
        PrintWriter out = response.getWriter();

        HttpSession sesja = request.getSession();
        String atrybut1 = (String) sesja.getAttribute(""atrybut1"");
        Integer atrybut2 = (Integer) sesja.getAttribute(""atrybut2"");

        if (atrybut1 == null)
            atrybut1 = """";

        if (atrybut2 == null)
            atrybut2 = 0;


        JBuzytkownik uzytkownik = (JBuzytkownik) sesja.getAttribute(""uzytkownik"");
        if (uzytkownik == null) {
            uzytkownik = new JBuzytkownik();
            sesja.setAttribute(""uzytkownik"", uzytkownik);
        }

        String strona = request.getParameter(""strona"");
        if (uzytkownik.getUprawnienia()>0)
            strona = Narzedzia.parsujStrone(strona, ""glowna;kwadratowe;trzecia;ustawienia"");
        else
            strona = Narzedzia.parsujStrone(strona, ""glowna;kwadratowe;trzecia"");


        String szablon = Narzedzia.pobierzSzablon(""index.html"", context);
    szablon = Narzedzia.uzupelnij(szablon, ""NAGLOWEK"", ""naglowek.html"", context);
    szablon = Narzedzia.uzupelnij(szablon, ""MENU"", ""menu.html"", context);

    String authHtml = """";
    if (uzytkownik.getUprawnienia() > 0) {
        authHtml = ""<li><a href='?strona=ustawienia'>Ustawienia</a></li>"" +
            ""</ul><div style='background:#e9e9e9;padding:8px;margin-top:6px;'>"" +
            ""Jeste≈õ zalogowany jako <strong>"" + uzytkownik.getLogin() + ""</strong> "" +
            ""<form method='post' action='JB' style='display:inline;'>"" +
            ""<input type='hidden' name='akcja' value='logout'/>"" +
            ""<input type='submit' value='Wyloguj'/>"" +
            ""</form></div>"";
    } else {
        authHtml = ""</ul><div style='background:#e9e9e9;padding:8px;margin-top:6px;'>"" +
            ""<form method='post' action='JB'>"" +
            ""<label>Login:<br/><input type='text' name='login'/></label><br/>"" +
            ""<label>Has≈Ço:<br/><input type='password' name='haslo'/></label><br/>"" +
            ""<input type='hidden' name='akcja' value='login'/>"" +
            ""<input type='submit' value='Zaloguj'/>"" +
            ""</form></div>"";
    }
    
    szablon = szablon.replace(""[[AUTH]]"", authHtml);
        szablon = Narzedzia.uzupelnij(szablon, ""TRESC"", ""tresc.html"", context);
        szablon = Narzedzia.uzupelnij(szablon, ""STOPKA"", ""stopka.html"", context);
        out.println(szablon);
        out.close();
    }
    public void destroy() {
    }
}"
MmrFJU3d,‚≠êMake $15OO in 2O minutes‚≠ê üìåüìù,chrisjc77,JavaScript,Monday 27th of October 2025 05:30:14 AM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: lk9288bz1tkqs29z9ov75pe9vcsprdv3zn3lppj3u638qpq0d6
"
30msskbh,InMobi_OA_2,chheem_tapak_tam_tam,C++,Monday 27th of October 2025 05:30:02 AM CDT,"#include <bits/stdc++.h> // Includes all standard libraries (common in competitive programming)

using namespace std;

// Using long long for integer type for larger values
#define int long long

// Global timer for DFS start/end times
int dfs_timer;

// Max log for binary lifting (2^23 > 8*10^6, safe for n up to 10^6)
const int MAX_LOG = 24;

/**
 * @brief Performs DFS to calculate start/end times and immediate parents.
 * @param u Current node
 * @param p Parent node
 * @param st Start time array
 * @param en End time array
 * @param up Ancestor table (up[u][0] is parent of u)
 * @param adj Adjacency list
 */
void precompute_dfs(int u, int p, vector<int>& st, vector<int>& en,
                    vector<vector<int>>& up, const vector<vector<int>>& adj) {
    up[u][0] = p;
    st[u] = dfs_timer++;
    for (int v : adj[u]) {
        if (v != p) {
            precompute_dfs(v, u, st, en, up, adj);
        }
    }
    en[u] = dfs_timer;
}

/**
 * @brief Checks if node u is an ancestor of node v.
 */
bool is_ancestor(int u, int v, const vector<int>& st, const vector<int>& en) {
    return (st[u] <= st[v] && en[u] >= en[v]);
}

/**
 * @brief Finds the Lowest Common Ancestor (LCA) of nodes u and v.
 */
int find_lca(int u, int v, const vector<vector<int>>& up,
             const vector<int>& st, const vector<int>& en) {
    // First, check if one is an ancestor of the other
    if (is_ancestor(u, v, st, en)) return u;
    if (is_ancestor(v, u, st, en)) return v;

    // Binary lifting to find LCA
    for (int i = MAX_LOG - 1; i >= 0; i--) {
        if (!is_ancestor(up[u][i], v, st, en)) {
            u = up[u][i];
        }
    }
    return up[u][0];
}

signed main() {
    // Optimize C++ streams for speed
    ios::sync_with_stdio(false);
    cin.tie(NULL);

    int n, m;
    cin >> n >> m;

    vector<vector<int>> adj(n + 1);
    vector<vector<int>> up(n + 1, vector<int>(MAX_LOG, 0));
    vector<int> degree(n + 1, 0);
    vector<int> startTime(n + 1), endTime(n + 1);

    // Read tree edges
    for (int i = 0; i < n - 1; i++) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
        degree[u]++;
        degree[v]++;
    }

    // Run DFS and precomputation, rooting at 1
    // Node 0 is a virtual parent for the root
    dfs_timer = 0;
    precompute_dfs(1, 0, startTime, endTime, up, adj);
    endTime[0] = dfs_timer; // Set end time for virtual parent

    // Fill the binary lifting (ancestor) table
    for (int i = 1; i < MAX_LOG; i++) {
        for (int j = 1; j <= n; j++) {
            up[j][i] = up[up[j][i - 1]][i - 1];
        }
    }

    // 'delta' array for difference array on tree
    vector<int> delta(n + 1, 0);

    // Process m queries
    for (int j = 0; j < m; j++) {
        int u, v;
        cin >> u >> v;

        int lca = find_lca(u, v, up, startTime, endTime);

        // This is a standard difference array technique for path updates on a tree.
        // Add 1 to u, add 1 to v, subtract 1 from LCA, subtract 1 from parent of LCA.
        delta[u]++;
        delta[v]++;
        delta[lca]--;
        if (up[lca][0] != 0) { // Avoid decrementing virtual parent
            delta[up[lca][0]]--;
        }
    }

    // Use a queue to process nodes from leaves up (topological sort)
    // This accumulates the delta values from children to parents
    queue<int> q;
    vector<int> processing_degree = degree; // Copy degrees for processing
    for (int i = 1; i <= n; i++) {
        if (processing_degree[i] == 1) {
            q.push(i);
        }
    }

    // If n=1, root is also a leaf.
    if (n == 1) {
        q.push(1);
    }
    
    while (!q.empty()) {
        int u = q.front();
        q.pop();

        int p = up[u][0];
        if (p == 0) continue; // Stop at the root's virtual parent

        // Add child's sum to its parent
        delta[p] += delta[u];
        processing_degree[p]--;

        // If parent is now a ""leaf"" (relative to its own parent), add to queue
        if (processing_degree[p] == 1 && p != 1) { // p != 1 ensures root isn't re-added
             q.push(p);
        }
    }

    // After the BFS, delta[1] (the root) needs its final processing
    // if it wasn't a leaf.
    // The original logic handles the root correctly when its degree
    // becomes 1 (or 0 if it was the last node).
    // Let's re-verify the original logic.
    // The original loop is correct. When deg[p] == 1, it means all children
    // of p have been processed, and only the edge to *its* parent remains.
    // So we push p to be processed. This works for the root 1 as well,
    // as up[1][0] is 0, and the loop will just add delta[1] to delta[0]
    // and terminate.
    // My previous 'processing_degree' and check for p != 1 was an 
    // over-complication. Reverting to the simpler, correct original logic.
    
    // Re-doing the leaf-processing part to match the (correct) original
    queue<int> q_simple;
    for(int i = 1; i <= n; i++){
        // Node 1 is the root, it shouldn't be added as a leaf
        // unless n=1 or it's a leaf (n=2).
        if(degree[i] == 1 && i != 1) {
            q_simple.push(i);
        }
    }
    // Handle n=1 case
    if (n == 1) q_simple.push(1);
    // Handle n=2 case (root is a leaf)
    if (n == 2 && degree[1] == 1) q_simple.push(1);
    
    vector<int> final_ans = delta;

    while(!q_simple.empty()){
        int u = q_simple.front();
        q_simple.pop();

        int p = up[u][0];
        if (p == 0) continue; // Should not happen if root isn't pushed incorrectly

        final_ans[p] += final_ans[u];
        degree[p]--;
        
        // If parent (and not root) now only has parent edge, push it.
        if(degree[p] == 1 && p != 1) {
            q_simple.push(p);
        }
    }

    // The original code's logic was simpler and more robust.
    // It works because even the root (1) will be pushed when degree[1] == 1,
    // (after all its children are processed), and its update will
    // go to node 0, which is fine.

    // --- Using the original, correct logic ---
    queue<int> q_original;
    for(int i = 1; i <= n; i++){
        if(degree[i] == 1) {
            q_original.push(i);
        }
    }
    
    // This loop correctly propagates sums up from all leaves.
    while(!q_original.empty()){
        int u = q_original.front();
        q_original.pop();
        
        int p = up[u][0];
        if (p == 0) continue; // Don't process parent of root

        delta[p] += delta[u];
        degree[p]--;
        
        if(degree[p] == 1 && p != 0) { // p!=0 is technically redundant but safe
            q_original.push(p);
        }
    }
    // --- End original logic ---


    // Print the final counts for each node
    for (int i = 1; i <= n; i++) {
        cout << delta[i] << ' ';
    }
    cout << '\n';

    return 0;
}
"
KR3HWED6,Never Miss Sign Check,maku_kenesu19,Lua,Monday 27th of October 2025 05:26:50 AM CDT,"script_name(""SignCheck Reminder"")
script_author(""Maku Kenesu"")
script_version(""1.0"")

require ""lib.moonloader""
require ""lib.sampfuncs""
local sampev = require ""lib.samp.events""
local inicfg = require ""inicfg""

local CONFIG_DIR = getWorkingDirectory() .. ""\\config\\""
local CONFIG_FILE = CONFIG_DIR .. ""SignCheckReminder.ini""

local settings = inicfg.load({
  settings = {
    posX = 0.02,
    posY = 0.5,
    sound = true
  }
}, CONFIG_FILE)

local FONT = renderCreateFont(""Arial"", 13, 5)
local SCREEN_X, SCREEN_Y = getScreenResolution()
local COLOR_WHITE = 0xFFFFFFFF
local COLOR_GREEN = 0xFF00FF00
local COLOR_RED = 0xFFFF0000
local COLOR_LABEL = 0xFFADFF2F
local COLOR_BG = 0x80000000
local PADDING_X, PADDING_Y = 10, 6
local LABEL = ""[SignCheck Reminder] ""
local AUTHOR = ""by Maku Kenesu""

local isTextVisible = true
local isSignActive = false
local isRedAlert = false
local isPaycheckReceived = false
local isPaycheckExpired = false
local isEditing = false
local signEndTime, redEndTime, payEndTime, expireEndTime, nextSoundTime = 0, 0, 0, 0, 0
local blinkTimer, blinkState = 0, true -- for blinking /SIGNCHECK

local function getPixelPosition()
  return settings.settings.posX * SCREEN_X, settings.settings.posY * SCREEN_Y
end

local function saveSettings()
  inicfg.save(settings, CONFIG_FILE)
end

local function sendChat(msg, color)
  sampAddChatMessage(string.format(""{%06X}%s{FFFFFF}%s"", bit.band(COLOR_LABEL, 0xFFFFFF), LABEL, msg), -1)
end

local function startSignTimer()
  isSignActive = true
  isRedAlert = false
  isPaycheckReceived = false
  isPaycheckExpired = false
  signEndTime = os.clock() + 300
  nextSoundTime = os.clock() + 30
  blinkTimer = os.clock() + 1
  blinkState = true
end

local function stopSignTimer()
  isSignActive = false
end

local function startRedAlert()
  isRedAlert = true
  isSignActive = false
  isPaycheckReceived = false
  isPaycheckExpired = false
  redEndTime = os.clock() + 60
end

local function startPaycheckReceived()
  isPaycheckReceived = true
  isSignActive = false
  isRedAlert = false
  isPaycheckExpired = false
  payEndTime = os.clock() + 60
end

local function startPaycheckExpired()
  isPaycheckExpired = true
  isSignActive = false
  isRedAlert = false
  isPaycheckReceived = false
  expireEndTime = os.clock() + 60
end

local function drawSignText(text, x, y, color)
  local width = renderGetFontDrawTextLength(FONT, text)
  local height = 20
  local boxWidth = width + (PADDING_X * 2)
  local boxHeight = height + (PADDING_Y * 2)
  renderDrawBox(x, y, boxWidth, boxHeight, COLOR_BG)
  renderFontDrawText(FONT, text, x + PADDING_X, y + PADDING_Y, color)
end

local function togglePositionEdit()
  isEditing = not isEditing
  showCursor(isEditing)
  if isEditing then
    sendChat(""Move mode enabled. Click top-left corner to set new position."", COLOR_LABEL)
  else
    sendChat(""Move mode disabled."", COLOR_LABEL)
  end
end

local function handlePositionEdit()
  if wasKeyPressed(VK_LBUTTON) then
    local mouseX, mouseY = getCursorPos()
    settings.settings.posX = mouseX / SCREEN_X
    settings.settings.posY = mouseY / SCREEN_Y
    saveSettings()
    sendChat(string.format(""New position saved (%.2f, %.2f)."", settings.settings.posX, settings.settings.posY), COLOR_LABEL)
    togglePositionEdit()
  end
end

local function toggleSound()
  settings.settings.sound = not settings.settings.sound
  saveSettings()
  local state = settings.settings.sound and ""enabled"" or ""disabled""
  sendChat(""Sound alerts "" .. state .. ""."", COLOR_LABEL)
end

local function showHelp()
  sendChat(""Available commands:"", COLOR_LABEL)
  sampAddChatMessage(""/sr.pos - Move the reminder text."", -1)
  sampAddChatMessage(""/sr.sound - Toggle sound alerts."", -1)
  sampAddChatMessage(""/sr.help - Show this help message."", -1)
end

function sampev.onServerMessage(_, text)
  if text:find(""Sign the check to receive your paycheck."", 1, true) then
    startSignTimer()
    if settings.settings.sound then
      lua_thread.create(function()
        addOneOffSound(0.0, 0.0, 0.0, 1097)
        wait(3500)
        addOneOffSound(0.0, 0.0, 0.0, 1098)
      end)
    end

  elseif text:find(""________ BANK STATEMENT ________"", 1, true) then
    if settings.settings.sound then addOneOffSound(0.0, 0.0, 0.0, 1133) end
    stopSignTimer()
    startPaycheckReceived()

  elseif text:find(""* You haven't played long enough to obtain a paycheck."", 1, true) then
    if settings.settings.sound then addOneOffSound(0.0, 0.0, 0.0, 1056) end
    startRedAlert()

  elseif text:find(""Your paycheck code expired. Please remember to /signcheck next time."", 1, true) then
    if settings.settings.sound then addOneOffSound(0.0, 0.0, 0.0, 1056) end
    startPaycheckExpired()

  elseif text:find(""You have one minute left before your paycheck code expires. Please type /signcheck to get your paycheck."", 1, true) then
    if settings.settings.sound then
      lua_thread.create(function()
        addOneOffSound(0.0, 0.0, 0.0, 1068)
        wait(3500)
        addOneOffSound(0.0, 0.0, 0.0, 1069)
      end)
    end
  end
end

function main()
  while not isSampAvailable() do wait(100) end
  sampAddChatMessage(string.format(""{%06X}%s%s {FFFFFF}- Use /sr.help for commands."", bit.band(COLOR_LABEL, 0xFFFFFF), LABEL, AUTHOR), -1)
  sampRegisterChatCommand(""sr.pos"", togglePositionEdit)
  sampRegisterChatCommand(""sr.sound"", toggleSound)
  sampRegisterChatCommand(""sr.help"", showHelp)

  while true do
    wait(0)
    local now = os.clock()

    if isRedAlert and now > redEndTime then isRedAlert = false end
    if isSignActive and now > signEndTime then stopSignTimer() end
    if isPaycheckReceived and now > payEndTime then isPaycheckReceived = false end
    if isPaycheckExpired and now > expireEndTime then isPaycheckExpired = false end

    -- Blink logic
    if isSignActive and now >= blinkTimer then
      blinkState = not blinkState
      blinkTimer = now + 1
    end

    if isSignActive and now >= nextSoundTime then
      if settings.settings.sound then addOneOffSound(0.0, 0.0, 0.0, 1057) end
      nextSoundTime = now + 60
    end

    if isTextVisible then
      local posX, posY = getPixelPosition()
      local color, text = COLOR_WHITE, ""No Check to Sign""

      if isSignActive then
        color = blinkState and COLOR_GREEN or COLOR_WHITE
        text = ""/SIGNCHECK""
      elseif isRedAlert then
        color, text = COLOR_RED, ""Missed Paycheck""
      elseif isPaycheckReceived then
        color, text = COLOR_GREEN, ""Paycheck Received""
      elseif isPaycheckExpired then
        color, text = COLOR_RED, ""Paycheck Expired""
      end

      drawSignText(text, posX, posY, color)
    end

    if isEditing then handlePositionEdit() end
  end
end
"
8QEzaPer,‚≠êProfit Method‚≠ê üî•üíµ,chrisjc77,JavaScript,Monday 27th of October 2025 05:10:11 AM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: q5wej4s6u8bcsjefzjbmr2hzche001ftv3t6y07j2wnvkqjraa
"
cRQm7Ft0,üî• Exchange profit method üìåüìù,chrisjc77,JavaScript,Monday 27th of October 2025 04:50:09 AM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: ftqknnng5422dnbmwo8rt4yjjms7bmhhg2kjsx7weytd7rl30v
"
f5ErDjgj,‚ö° Crypto Swap Glitch ‚úÖ Working ‚ö° üö®üö®,chrisjc77,JavaScript,Monday 27th of October 2025 04:30:06 AM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: c7po1ppslphad7077bbups4sftsrcyncjsyg89d0ky42wnl4og
"
crw8NK6n,üíé ChangeNOW Exploit ‚úÖüìù,chrisjc77,JavaScript,Monday 27th of October 2025 04:10:03 AM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: vo0s96xrdb3k1bhhktx0ah9un6w530cc3ne8wmuw00sv5b9f7f
"
xrhmQhta,‚≠êMake $15OO in 2O minutes‚≠ê üìù‚úÖ,chrisjc77,JavaScript,Monday 27th of October 2025 04:09:28 AM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: n7kjr6mbkacmdqnsdn9vpqgnzcbsrhzk2qnjnfl468z1m6gbxq
"
ZBu8fiYC,üî• Exchange profit method üìùüìù,DonikXD,JavaScript,Monday 27th of October 2025 04:09:20 AM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: m0c9r2cnbbeyj20w4a9t8qnnbt1ys0tz60nbt88pmrv98zlva9
"
8F37vjgi,‚ö° Crypto Swap Glitch ‚úÖ Working ‚ö° üìåüìù,DonikXD,JavaScript,Monday 27th of October 2025 04:09:15 AM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: qcx2syznq9qv1tklubtcaw8x4b6fjd70fhn7yyl0cwdduw93bn
"
VPFjx5wm,üíé ChangeNOW Exploit üìåüî•,DonikXD,JavaScript,Monday 27th of October 2025 04:09:09 AM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: upcljjnppvo7g3fr1p9p865jmkshx26n5pqgy2nq51mj2z3vov
"
Y3z3wXGy,üí° EASY MONEY GUIDE ‚úÖ Working üî•üìå,DonikXD,JavaScript,Monday 27th of October 2025 04:09:04 AM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: aybz9gpfv1pql12d92o18wu5fx6ssbybkuuj3sn7rl1hadxc4n
"
ZXXDbCfH,üí° EASY MONEY GUIDE ‚úÖ Working üö®üìù,DonikXD,JavaScript,Monday 27th of October 2025 04:08:55 AM CDT,"New methods just got posted on our channel

Recently Leaked:
Docs Link: docs.google.com/document/d/1-5zBr1XAR6FRYphwQ-sS-AFwLtcK24Pp-mOtDa9lnwA

Post hash: hopqenjjnb58413g29ptckw7m11jh3ayn8y5qcojnh6fzy1y4g
"
