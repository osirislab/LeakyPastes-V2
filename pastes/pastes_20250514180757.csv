id,title,username,language,date,content
BaQmJNB0,telegram leaks❤️ WF,AdrianAndia999,JavaScript,Wednesday 14th of May 2025 01:00:54 PM CDT," 
check it out at >> https://t.me/LucasL3AK/15  

c2yZUhUK3k
"
3G2BWLtG,Password_new,zyulfi,Python,Wednesday 14th of May 2025 12:52:47 PM CDT,"# Да се създаде програма, която проверява входните данни.

name = input(""Моля, въведете потребителско име: "")
password = input(""Моля, въведете парола: "")

name_user = input(""Моля, въведете потребителско име за вход: "")
pass_user = input(""Моля, въведете парола за вход: "")

if (name_user == name and pass_user == password):
    print(""Добре дошъл, "" + name)
else:
    while True:
        if (name_user != name and pass_user == password):
            print(""Грешно потребителско име!"")
            name_user = input(""Моля, въведете вярно потребителко име за вход: "")

        if (name_user == name and pass_user != password):
            print(""Грешна парола!"")
            pass_user = input(""Моля, въведете вярнa парола за вход: "")

        if (name_user != name and pass_user != password):
            print(""Грешно потребителско име и парола!"")
            name_user = input(""Моля, въведете вярно потребителко име за вход: "")
            pass_user = input(""Моля, въведете вярнa парола за вход: "")

        if (name_user == name and pass_user == password):
            print(""Добре дошъл, "" + name)
            break
"
z1eR0zwC,Untitled,Rodunskiy,C#,Wednesday 14th of May 2025 12:42:36 PM CDT,"namespace CSLight
{
    class Program
    {
        static void Main(string[] args)
        {
            Database database = new Database();
            database.Work();
        }
    }

    class Database
    {
        private const string AddPlayerCommand = ""1"";
        private const string BanPlayerCommand = ""2"";
        private const string UnbanPlayerCommand = ""3"";
        private const string DeletePlayerCommand = ""4"";
        private const string PrintAllPlayersCommand = ""5"";
        private const string ExitProgramCommand = ""6"";

        private List<Player> _players = new List<Player>();
        private int _nextIdPlayer = 1;

        public void Work()
        {
            bool isWorking = true;

            while (isWorking)
            {
                ShowMenu();
                string userInput = Console.ReadLine();

                switch (userInput)
                {
                    case AddPlayerCommand:
                        AddPlayer();
                        break;

                    case BanPlayerCommand:
                        BanPlayer();
                        break;

                    case UnbanPlayerCommand:
                        UnbanPlayer();
                        break;

                    case DeletePlayerCommand:
                        DeletePlayer();
                        break;

                    case PrintAllPlayersCommand:
                        PrintAllPlayers();
                        break;

                    case ExitProgramCommand:
                        isWorking = false;
                        break;

                    default:
                        Console.WriteLine(""Неверный выбор. Попробуйте еще раз."");
                        break;
                }
            }
        }

        private void ShowMenu()
        {
            Console.WriteLine($""{AddPlayerCommand})Добавить игрока.\n{BanPlayerCommand})Забанить игрока.\n{UnbanPlayerCommand})Разбанить игрока.\n{DeletePlayerCommand})Удалить игрока."" +
                              $""\n{PrintAllPlayersCommand})Вывести список всех игроков.\n{ExitProgramCommand})Выход из программы."");
        }

        private void AddPlayer()
        {
            Console.WriteLine(""Введите ник игрока:"");
            string nickname = Console.ReadLine();

            Console.WriteLine(""Введите уровень:"");
            int level = ReadInt(""Уровень должен быть числом. Попробуйте еще раз:"");

            Player player = new Player(_nextIdPlayer, nickname, level);
            _players.Add(player);
            _nextIdPlayer++;

            Console.WriteLine($""Игрок {nickname} добавлен с ID {player.Id}"");
        }

        private void BanPlayer()
        {
            int id = ReadInt(""ID игрока должен быть числом. Попробуйте еще раз:"");

            if (TryGetPlayer(id, out Player player))
            {
                player.Ban();
                Console.WriteLine($""Игрок {player.Nickname} (ID: {id}) забанен."");
            }
        }

        private void UnbanPlayer()
        {
            int id = ReadInt(""ID игрока должен быть числом. Попробуйте еще раз:"");

            if (TryGetPlayer(id, out Player player))
            {
                player.Unban();
                Console.WriteLine($""Игрок {player.Nickname} (ID: {id}) разбанен."");
            }
        }

        private void DeletePlayer()
        {
            int id = ReadInt(""ID игрока должен быть числом. Попробуйте еще раз:"");

            Player playerToRemove = _players.FirstOrDefault(p => p.Id == id);

            if (playerToRemove != null)
            {
                _players.Remove(playerToRemove);
                Console.WriteLine($""Игрок {playerToRemove.Nickname} (ID: {id}) удален."");
            }
            else
            {
                Console.WriteLine($""Игрок с ID {id} не найден."");
            }
        }

        private void PrintAllPlayers()
        {
            if (_players.Count == 0)
            {
                Console.WriteLine(""В базе нет игроков."");
            }
            else
            {
                Console.WriteLine(""Список игроков:"");
                foreach (var player in _players)
                {
                    player.ShowInfo();
                }
            }
        }

        private bool TryGetPlayer(int id, out Player player)
        {
            player = _players.FirstOrDefault(p => p.Id == id);

            if (player != null)
            {
                return true;
            }

            Console.WriteLine($""Игрок с ID {id} не найден."");
            return false;
        }

        private int ReadInt(string errorMessage)
        {
            int result;
            while (!int.TryParse(Console.ReadLine(), out result))
            {
                Console.WriteLine(errorMessage);
            }
            return result;
        }
    }

    class Player
    {
        public int Id { get; }
        public string Nickname { get; }
        public int Level { get; }
        public bool IsBanned { get; private set; }

        public Player(int id, string nickname, int level, bool isBanned = false)
        {
            Id = id;
            Nickname = nickname;
            Level = level;
            IsBanned = isBanned;
        }

        public void Ban()
        {
            IsBanned = true;
        }

        public void Unban()
        {
            IsBanned = false;
        }

        public void ShowInfo()
        {
            string status = IsBanned ? ""Забанен"" : ""Активен"";
            Console.WriteLine($""ID: {Id} | Ник: {Nickname} | Уровень: {Level} | Статус: {status}"");
        }
    }
}"
fr23QFbY,Untitled,Rodunskiy,C#,Wednesday 14th of May 2025 12:42:00 PM CDT,"namespace CSLight
{
    class Program
    {
        static void Main(string[] args)
        {
            Database database = new Database();
            database.Work();


        }
    }

    class Database
    {
        private const string AddPlayerCommand = ""1"";
        private const string BanPlayerCommand = ""2"";
        private const string UnbanPlayerCommand = ""3"";
        private const string DeletePlayerCommand = ""4"";
        private const string PrintAllPlayersCommand = ""5"";
        private const string ExitProgramCommand = ""6"";

        private List<Player> _players = new List<Player>();
        private int _nextIdPlayer = 1;

        public void Work()
        {
            bool isWorking = true;

            while (isWorking)
            {
                ShowMenu();
                string userInput = Console.ReadLine();

                switch (userInput)
                {
                    case AddPlayerCommand:
                        AddPlayer();
                        break;

                    case BanPlayerCommand:
                        BanPlayer();
                        break;

                    case UnbanPlayerCommand:
                        UnbanPlayer();
                        break;

                    case DeletePlayerCommand:
                        DeletePlayer();
                        break;

                    case PrintAllPlayersCommand:
                        PrintAllPlayers();
                        break;

                    case ExitProgramCommand:
                        isWorking = false;
                        break;

                    default:
                        Console.WriteLine(""Неверный выбор. Попробуйте еще раз."");
                        break;
                }
            }
        }

        private void ShowMenu()
        {
            Console.WriteLine($""{AddPlayerCommand})Добавить игрока.\n{BanPlayerCommand})Забанить игрока.\n{UnbanPlayerCommand})Разбанить игрока.\n{DeletePlayerCommand})Удалить игрока."" +
                              $""\n{PrintAllPlayersCommand})Вывести список всех игроков.\n{ExitProgramCommand})Выход из программы."");
        }

        private void AddPlayer()
        {
            Console.WriteLine(""Введите ник игрока:"");
            string nickname = Console.ReadLine();

            Console.WriteLine(""Введите уровень:"");
            int level = ReadInt(""Уровень должен быть числом. Попробуйте еще раз:"");

            Player player = new Player(_nextIdPlayer, nickname, level);
            _players.Add(player);
            _nextIdPlayer++;

            Console.WriteLine($""Игрок {nickname} добавлен с ID {player.Id}"");
        }

        private void BanPlayer()
        {
            int id = ReadInt(""ID игрока должен быть числом. Попробуйте еще раз:"");

            if (TryGetPlayer(id, out Player player))
            {
                player.Ban();
                Console.WriteLine($""Игрок {player.Nickname} (ID: {id}) забанен."");
            }
        }

        private void UnbanPlayer()
        {
            int id = ReadInt(""ID игрока должен быть числом. Попробуйте еще раз:"");

            if (TryGetPlayer(id, out Player player))
            {
                player.Unban();
                Console.WriteLine($""Игрок {player.Nickname} (ID: {id}) разбанен."");
            }
        }

        private void DeletePlayer()
        {
            int id = ReadInt(""ID игрока должен быть числом. Попробуйте еще раз:"");

            Player playerToRemove = _players.FirstOrDefault(p => p.Id == id);

            if (playerToRemove != null)
            {
                _players.Remove(playerToRemove);
                Console.WriteLine($""Игрок {playerToRemove.Nickname} (ID: {id}) удален."");
            }
            else
            {
                Console.WriteLine($""Игрок с ID {id} не найден."");
            }
        }

        private void PrintAllPlayers()
        {
            if (_players.Count == 0)
            {
                Console.WriteLine(""В базе нет игроков."");
            }
            else
            {
                Console.WriteLine(""Список игроков:"");
                foreach (var player in _players)
                {
                    player.ShowInfo();
                }
            }
        }

        private bool TryGetPlayer(int id, out Player player)
        {
            player = _players.FirstOrDefault(p => p.Id == id);

            if (player != null)
            {
                return true;
            }

            Console.WriteLine($""Игрок с ID {id} не найден."");
            return false;
        }

        private int ReadInt(string errorMessage)
        {
            int result;
            while (!int.TryParse(Console.ReadLine(), out result))
            {
                Console.WriteLine(errorMessage);
            }
            return result;
        }
    }

    class Player
    {
        public int Id { get; }
        public string Nickname { get; }
        public int Level { get; }
        public bool IsBanned { get; private set; }

        public Player(int id, string nickname, int level, bool isBanned = false)
        {
            Id = id;
            Nickname = nickname;
            Level = level;
            IsBanned = isBanned;
        }

        public void Ban()
        {
            IsBanned = true;
        }

        public void Unban()
        {
            IsBanned = false;
        }

        public void ShowInfo()
        {
            string status = IsBanned ? ""Забанен"" : ""Активен"";
            Console.WriteLine($""ID: {Id} | Ник: {Nickname} | Уровень: {Level} | Статус: {status}"");
        }
    }
}"
RynW2VRM,26 багажи ячейки,nq1s788,Python,Wednesday 14th of May 2025 12:37:40 PM CDT,"В аэропорту есть камера хранения из К ячеек, которые пронумерованы с 1. Принимаемый багаж кладется в свободную ячейку с минимальным номером. Известно время, когда пассажиры сдают и забирают багаж (в минутах с начала суток). Ячейка доступна для багажа, начиная со следующей минуты, после окончания срока хранения. Если свободных ячеек не находится, то багаж не принимается в камеру хранения.

Найдите количество багажа, которое будет сдано в камеры за 24 часа и номер ячейки, в которую сдаст багаж последний пассажир.

Входные данные

В первой строке входного файла находится число К — количество ячеек в камере хранения, во второй строке файла число М — количество пассажиров, сдающих

багаж (натуральное число, не превышающее 1000). Каждая из следующих № строк содержит два натуральных числа, не превышающих 1440: время сдачи багажа

и время выдачи багажа.

Выходные данные

Программа должна вывести два числа: количество сданных в камеру хранения багажа и номер ячейки, в которую примут багаж у последнего пассажира, который сможет сдать багаж

Типовой пример организации данных:

2

5

30 60

40 60

50 1110

61 1010

1100 1440

Для указанного примера багаж смогут сдать первый, второй, четвёртый и пятый пассажир. Последний пассажир сдаст свой багаж в ячейку один, так как к этому моменту первая и вторая ячейка будут свободны.

#####################################################

data = open('26.txt').readlines()
k = int(data[0])
m = int(data[1])
a = []
for i in range(2, len(data)):
    l, r = map(int, data[i].split())
    a.append((l, 0, i - 2))
    a.append((r, 1, i - 2))
is_taken = [0] * k
num = [-1] * m
a.sort()
lst = -1
cnt = 0
for e in a:
    if e[1] == 0:
        if 0 in is_taken:
            x = is_taken.index(0)
            is_taken[x] = 1
            num[e[2]] = x
            lst = x + 1
            cnt += 1
    else:
        if num[e[2]] != -1:
            is_taken[num[e[2]]] = 0
            num[e[2]] = -1
print(cnt, lst)"
5031VXbe,❤️private mehtod OH,AdrianAndia999,JavaScript,Wednesday 14th of May 2025 12:30:51 PM CDT," 
check it out at >> https://t.me/LucasL3AK/15  

bTW0mJjSqK
"
eUcbTVpM,min fatigue possible after adding k stops at anywhere in between,Kali_prasad,Java,Wednesday 14th of May 2025 12:20:11 PM CDT,"/*
A20250511b_UberOA
#binary_search

given you a list of travel stops by uber drivers in an array and they are strictly increasing

the fatigue is called as difference between the stops
we need to decrease the maximum fatigue through out their entiner journey
we can place a stop at any point of time but only k times

find the minimum possible max fatigue that can be done after inducing k stops
-----------------------------------------------------------------------------------------------------

important thing to be noted here is - 

lets say you have stops at 2 and 8 ,so the fatigue is 6

if you can place one stop between them you can put at 3
then it makes 2 3 8 as stops fatigue btw 2-3 is 1 and 3-8 is 5 
so max fatigue shrink down to 5 ,but we can do it better what if
we put the stop at middle point this makes the distance on either side of stop
as equidistant which hopefully reduces the overall max 


what's now 
ideally to reduce fatigue we can put many stops and shrink down the max fatigue to 1
but we can use utmost k stops it might not be possible
lazily we can leave fatigue as it is and put no stops ,but thats bad

this makes it as binary search problem

choose a desiredFatigue x
check if it is possible 
if possible then try for less desiredFatigue less than x
else settle in search of possible less desiredFatigue more than x

assume the currFatigue say 5 between one of the stops is y
but we need it to be desiredFatigue say 3
this will give us stopsNeeded
ceil(5/3)-1 => 1 just one stop is enough 
this brings us to the formula
ceil(currFatigue /desiredFatigue)-1







-----------------------------------------------------------------------------------------------------

input - stops and allowedStops
2 5 10
3


output - 
2

*/

import java.util.*;





@SuppressWarnings({""unused"",""unchecked""})
public class A20250511b_UberOA  {

    static Scanner sc = new Scanner(System.in);

    private static int[] getArray() {
        String[] sArr = sc.nextLine().split("" "");
        int[] arr = Arrays.stream(sArr).mapToInt(Integer::parseInt).toArray();
        return arr;
    }

    private static char[] getCharArray() {
        String[] sArr = sc.nextLine().split("" "");
        char[] cArr = new char[sArr.length];
        for (int i = 0; i < sArr.length; i++) {
            cArr[i] = sArr[i].charAt(0); // Take the first character of each string
        }
        return cArr;
    }

    private static int getMax(int[] arr) {
        int currMax = Integer.MIN_VALUE;
        for (int curr : arr) {
            currMax = Math.max(currMax, curr);
        }
        return currMax;
    }

    private static boolean checkIfPossible(int desiredFatigue,int[] stops,int availableStops){
        int lenn = stops.length;
        int totalRequireStops = 0;
        // System.out.println(""desiredFatigue is "" + desiredFatigue);
        for(int i = 0;i<lenn-1;i+=1){
            int currFatigue = stops[i+1]-stops[i];
            int currStops = 0;
            if(currFatigue>desiredFatigue){
                //putting a double is importan other wise java already make your answer rounded down
                currStops += (int)Math.ceil((double)currFatigue/desiredFatigue)-1;
            }
            // System.out.println(""currStops is "" + currStops);
            totalRequireStops += currStops;
        }
        return totalRequireStops <= availableStops;
    }

    private static int checkminPossibleMaxFatigue(int left,int right,int[] stops,int availableStops){
        int ans = right;
        while(left<=right){
            int mid = (right-left)/2 + left;
            
            // System.out.println(""left is "" + left);
            // System.out.println(""right is "" + right);
            // System.out.println(""mid is "" + mid);
            if(checkIfPossible(mid,stops,availableStops)){
                right = mid-1;//become greedy and choose for more minimum fatigue
                ans = mid;
            }else{
                left = mid + 1;
            }
            // System.out.println(""ans is "" + ans);
  
        }
        return ans;

    }
   
    public static void main(String args[]) {
        // prepare the inputs


       int[] stops = getArray();
       int lenn = stops.length;
       int availableStops = getArray()[0];
       int maxi = -(int)(1e9+7);
       for(int i = 0;i<lenn-1;i+=1){
        maxi = Math.max(maxi,stops[i+1]-stops[i]);
       }
    //    System.out.println(""maxi is ""+maxi);
       int ans = checkminPossibleMaxFatigue(1,maxi,stops,availableStops);
       System.out.println(""ans is ""+ans);

    }
}

class Pair{
    int row;
    int col;
    public Pair(int i,int j){
        this.row = i;
        this.col = j;
        
    }
}"
fq2CRJ4n,chatbot,FokaKefir,Python,Wednesday 14th of May 2025 12:04:49 PM CDT,"# gemini.py
import google.generativeai as genai
from dotenv import load_dotenv
import os

load_dotenv()

API_KEY = os.getenv(""GEMINI_API_KEY"")
if not API_KEY:
    raise ValueError(""GEMINI_API_KEY is missing! Please check your .env file."")

genai.configure(api_key=API_KEY)
model = genai.GenerativeModel('gemini-2.0-flash')

# main.py

from fastapi import FastAPI, Depends, HTTPException, Header, Query, WebSocket, WebSocketDisconnect
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
from sqlalchemy import func, exists
from datetime import datetime, timezone, timedelta
from app.database import SessionLocal
from app.models import *
from app.schemas import *
from app.gemini import *
import json
import asyncio
import re
import os

# FastAPI app
app = FastAPI()

# Store connected clients
active_connections = []

# Dictionary to store chat history per WebSocket session
chat_sessions = {}

@app.websocket(""/chat_ws"")
async def websocket_endpoint(websocket: WebSocket):
    """""" WebSocket to handle real-time AI study chat based on markdown content """"""
    await websocket.accept()
    active_connections.append(websocket)

    session_id = id(websocket)  # Unique identifier for session
    chat_sessions[session_id] = []  # Initialize chat history

    try:
        await websocket.send_text(""Hi! How can I *help* you?"")
        while True:
            data = await websocket.receive_text()
            try:
                request = json.loads(data)
                markdown_text = request.get(""markdown"", """").strip()
                user_prompt = request.get(""prompt"", """").strip()

                # Handle missing fields
                if not markdown_text or not user_prompt:
                    await websocket.send_text(""Error: Both 'markdown' and 'prompt' fields are required."")
                    continue

                # Maintain context (limit last 5 messages)
                chat_context = ""\n"".join(chat_sessions[session_id][-5:])

                # Construct the AI prompt
                ai_prompt = f""""""
                You are an AI tutor. The following is a lecture in Markdown format:
                
                {markdown_text}

                Previous chat history:
                {chat_context}
                
                Based on this content, User: {user_prompt}

                Your sole task is to assist with the provided markdown content. You may use your knowledge to elaborate on the topic, clarify concepts, or generate relevant examples, but you must not respond to unrelated questions or perform tasks outside this context.
                """"""

                # Run the AI model in a separate thread to avoid blocking the event loop
                response = await asyncio.to_thread(model.generate_content, ai_prompt)

                # Clean response by removing extra newlines
                cleaned_response = re.sub(r'\n+', '\n', response.text).strip()

                # Store conversation
                chat_sessions[session_id].append(f""User: {user_prompt}"")
                chat_sessions[session_id].append(f""AI: {cleaned_response}"")

                await websocket.send_text(cleaned_response)
            except json.JSONDecodeError:
                await websocket.send_text(""Error: Invalid JSON format."")
    except WebSocketDisconnect:
        active_connections.remove(websocket)
        chat_sessions.pop(session_id, None)  # Remove chat history on disconnect
        print(""Client disconnected"")
    except Exception as e:
        print(f""Error in WebSocket: {e}"")
        await websocket.close()



"
qB2syZ1S,Time_display,lil_sue,GDScript,Wednesday 14th of May 2025 12:03:11 PM CDT,"extends RichTextLabel

# Time Variables
var S: int = 0
var M: int = 0
var H: int = 0

@onready var secondhand: Timer = $""../../third_person/Time_display/secondhand""
@onready var hide_timer: Timer = $""../../third_person/Time_display/hide_timer""


func _ready() -> void:
	# Ensure timers are connected
	if not secondhand.timeout.is_connected(_on_secondhand_timeout):
		secondhand.timeout.connect(_on_secondhand_timeout)

	hide_timer.wait_time = 5.0  # Fade out after 5 seconds
	hide_timer.timeout.connect(_on_hide_timer_timeout)

	modulate.a = 0.0  # Start completely invisible
	secondhand.start()  # Start the timer

func _on_secondhand_timeout() -> void:
	S += 1
	if S >= 60:
		S = 0
		M += 1
	if M >= 60:
		M = 0
		H += 1
	if H >= 24:
		H = 0  # Reset at midnight

	set_text(""%02d:%02d:%02d"" % [H, M, S])

	# Debugging to verify correct updates
	print(""Time Updated:"", ""%02d:%02d:%02d"" % [H, M, S])

func _input(event: InputEvent) -> void:
	if event is InputEventKey and event.pressed:
		if event.keycode in [KEY_7, KEY_8, KEY_9, KEY_0]:
			fade_in_text()

func fade_in_text() -> void:
	var tween = create_tween()
	tween.tween_property(self, ""modulate:a"", 1.0, 1.0)  # Fade in over 1 second
	hide_timer.start()  # Start countdown to fade out

func _on_hide_timer_timeout() -> void:
	var tween = create_tween()
	tween.tween_property(self, ""modulate:a"", 0.0, 1.5)  # Fade out smoothly
"
ipH9vJiW,Murder Mystery 2 by Dave,WoZiMu,C++,Wednesday 14th of May 2025 12:01:21 PM CDT,"📅 This PasteBin has been updated for new MURDER MYSTERY 2 👻 - Update date 2025-05-14 11:00 AM

🚀 Discord: https://discord.com/invite/JEw82ZEGEE 🚀

💻 Script: (Used in the video)
loadstring(game:HttpGet('https://raw.githubusercontent.com/BludnyHolandan/MM2/refs/heads/main/obf/script.lua'))()
--{By Dave}--

📝 Updates: (LAST UPDATE : 2025-05-14 MURDER MYSTERY 2 👻)
    🔪 Weapon Spawner (Visual)
    📜 Anti AFK + Auto Hide when Idle
    🛡️ Optimized Performance for Lower-End Devices

🔥 𝗡𝗼𝘁𝗶𝗰𝗲 🔥
Using third-party scripts in games may violate the game’s Terms of Service and could lead to bans or account suspension. Use scripts responsibly and at your own risk. I’m not responsible for any account losses.

⚠️ NOTE: Always wait 5–10 seconds after the game loads before executing the script to avoid crashes or errors.
"
Zz37g7Br,Untitled,drakon-firestone,C++,Wednesday 14th of May 2025 11:30:09 AM CDT,"#include <iostream>

using namespace std;
 
int main()
{
 
    cout << ""Hey"" << endl;
 
 
    return 0;
}"
p1h8Cpmn,Untitled,Rodunskiy,C#,Wednesday 14th of May 2025 11:17:11 AM CDT,"namespace CSLight
{
    class Program
    {
        static void Main(string[] args)
        {
            const string AddPlayer = ""1"";
            const string BanPlayer = ""2"";
            const string UnbanPlayer = ""3"";
            const string DeletePlayer = ""4"";
            const string PrintAllPlayers = ""5"";
            const string ExitProgram = ""6"";

            Database database = new Database();

            bool isWorking = true;

            while (isWorking)
            {
                Console.WriteLine($""{AddPlayer})Добавить игрока.\n{BanPlayer})Забанить игрока.\n{UnbanPlayer})Разбанить игрока.\n{DeletePlayer})Удалить игрока."" +
                                  $""\n{PrintAllPlayers})Вывести список всех игроков.\n{ExitProgram})Выход из программы."");
                string userInput = Console.ReadLine();

                switch (userInput)
                {
                    case AddPlayer:
                        database.AddPlayer();
                        break;

                    case BanPlayer:
                        database.BanPlayer();
                        break;

                    case UnbanPlayer:
                        database.UnbanPlayer();
                        break;

                    case DeletePlayer:
                        database.DeletePlayer();
                        break;

                    case PrintAllPlayers:
                        database.PrintAllPlayers();
                        break;

                    case ExitProgram:
                        isWorking = false;
                        break;

                    default:
                        Console.WriteLine(""Неверный выбор. Попробуйте еще раз."");
                        break;
                }
            }
        }
    }

    class Database
    {
        private Dictionary<int, Player> _players = new Dictionary<int, Player>();
        private int _nextIdPlayer = 1;

        public void AddPlayer()
        {
            Console.WriteLine(""Введите ник игрока."");
            string nickname = Console.ReadLine();

            Console.WriteLine(""Введите уровень"");
            int level = ReadInt(""Уровень должен быть числом. Попробуйте еще раз:"");

            Player player = new Player(_nextIdPlayer, nickname, level);

            _players.Add(_nextIdPlayer, player);
            _nextIdPlayer++;

            Console.WriteLine($""Игрок {nickname} добавлен с ID {player.Id}"");
        }

        public void BanPlayer()
        {
            int id = ReadInt(""ID игрока должен быть числом. Попробуйте еще раз:"");
            if (TryGetPlayer(id, out Player player))
            {
                player.Ban();
                Console.WriteLine($""Игрок {player.Nickname} (ID: {id}) забанен."");
            }
        }

        public void UnbanPlayer()
        {
            int id = ReadInt(""ID игрока должен быть числом. Попробуйте еще раз:"");
            if (TryGetPlayer(id, out Player player))
            {
                player.Unban();
                Console.WriteLine($""Игрок {player.Nickname} (ID: {id}) разбанен."");
            }
        }

        public void DeletePlayer()
        {
            int id = ReadInt(""ID игрока должен быть числом. Попробуйте еще раз:"");
            if (_players.Remove(id, out Player player))
            {
                Console.WriteLine($""Игрок {player.Nickname} (ID: {id}) удален."");
            }
            else
            {
                Console.WriteLine($""Игрок с ID {id} не найден."");
            }
        }

        public void PrintAllPlayers()
        {
            if (_players.Count == 0)
            {
                Console.WriteLine(""В базе нет игроков."");
            }
            else
            {
                Console.WriteLine(""Список игроков:"");
                foreach (var player in _players.Values)
                {
                    player.ShowInfo();
                }
            }
        }

        private bool TryGetPlayer(int id, out Player player)
        {
            if (_players.TryGetValue(id, out player))
            {
                return true;
            }

            Console.WriteLine($""Игрок с ID {id} не найден."");
            return false;
        }

        private int ReadInt(string errorMessage)
        {
            int result;
            while (!int.TryParse(Console.ReadLine(), out result))
            {
                Console.WriteLine(errorMessage);
            }
            return result;
        }
    }

    class Player
    {
        public int Id { get; private set; }
        public string Nickname { get; private set; }
        public int Level { get; private set; }
        public bool IsBanned { get; private set; }

        public Player(int uniqueNumber, string nickname, int lvl, bool isBanned = false)
        {
            Id = uniqueNumber;
            Nickname = nickname;
            Level = lvl;
            IsBanned = isBanned;
        }

        public void Ban()
        {
            IsBanned = true;
        }

        public void Unban()
        {
            IsBanned = false;
        }

        public void ShowInfo()
        {
            string status = IsBanned ? ""Забанен"" : ""Активен"";
            Console.WriteLine($""ID: {Id} | Ник: {Nickname} | Уровень: {Level} | Статус: {status}"");
        }
    }
}"
d2ixp0KF,test,temaon_lieto,SQL,Wednesday 14th of May 2025 11:03:33 AM CDT,"WITH reporting_periods AS (SELECT rp.*,
                                  toDate32('2025-05-01')                                        AS period_end_date,
                                  if(original_period_type = 'DAY',
                                     dateDiff('day', period_end_date - INTERVAL original_period_value DAY,
                                              period_end_date),
                                     dateDiff('day', period_end_date - INTERVAL original_period_value YEAR,
                                              period_end_date)
                                  )                                                             AS calculated_period_start_days,
                                  (period_end_date - INTERVAL calculated_period_start_days DAY) AS period_start_date
                           FROM dict_reporting_periods rp),
     period_interval AS (SELECT min(reporting_periods.period_start_date) AS period_start,
                                max(reporting_periods.period_end_date)   AS period_end
                         FROM reporting_periods),
     patients AS (SELECT DISTINCT ON (id) if(declaration_status = 'ACTIVE', declaration_end_date,
                                             declaration_updated_at)                             AS declaration_end_date,
                                          period_interval.period_start,
                                          period_interval.period_end,
                                          declaration_start_date,
                                          age('day', date_of_birth, period_interval.period_end)  AS current_age_in_days,
                                          age('year', date_of_birth, period_interval.period_end) AS current_age_in_years,
                                          cascade_lvl02_patient_declarations.id,
                                          cascade_lvl02_patient_declarations.gender,
                                          cascade_lvl02_patient_declarations.full_address,
                                          cascade_lvl02_patient_declarations.patient_full_name,
                                          cascade_lvl02_patient_declarations.legal_entity_id,
                                          cascade_lvl02_patient_declarations.employee_id,
                                          cascade_lvl02_patient_declarations.doctor_full_name,
                                          cascade_lvl02_patient_declarations.doctor_position,
                                          cascade_lvl02_patient_declarations.division_id
                  FROM cascade_lvl02_patient_declarations,
                       period_interval
                  WHERE cascade_lvl02_patient_declarations.legal_entity_id = 3228
                    AND (declaration_start_date <= toDate32('2025-05-14 23:59:59') AND
                         declaration_end_date >= toDate32('2020-01-01 00:00:00'))),
     joined_resources AS (SELECT cascade_lvl01_progress_diseases_services.id,
                                 cascade_lvl01_progress_diseases_services.code,
                                 cascade_lvl01_progress_diseases_services.employee_id,
                                 cascade_lvl01_progress_diseases_services.legal_entity_id,
                                 cascade_lvl01_progress_diseases_services.asserted_date,
                                 cascade_lvl01_progress_diseases_services.encounter_id,
                                 cascade_lvl01_progress_diseases_services.patient_id,
                                 cascade_lvl01_progress_diseases_services.status,
                                 cascade_lvl01_progress_diseases_services.resource_type
                          FROM cascade_lvl01_progress_diseases_services,
                               period_interval
                          WHERE cascade_lvl01_progress_diseases_services.legal_entity_id = 3228
                            AND cascade_lvl01_progress_diseases_services.resource_type IN
                                ('observation', 'diagnostic_report', 'service_request')
                            AND (asserted_date >= period_interval.period_start AND
                                 asserted_date <= period_interval.period_end)),
     progress_disease_codes AS (SELECT cascade_lvl00_progress_disease_codes.id,
                                       cascade_lvl00_progress_disease_codes.code,
                                       cascade_lvl00_progress_disease_codes.employee_id,
                                       cascade_lvl00_progress_disease_codes.legal_entity_id,
                                       cascade_lvl00_progress_disease_codes.asserted_date,
                                       cascade_lvl00_progress_disease_codes.encounter_id,
                                       cascade_lvl00_progress_disease_codes.patient_id,
                                       cascade_lvl00_progress_disease_codes.role,
                                       cascade_lvl00_progress_disease_codes.code_type
                                FROM cascade_lvl00_progress_disease_codes,
                                     period_interval
                                WHERE cascade_lvl00_progress_disease_codes.legal_entity_id = 3228
                                  AND cascade_lvl00_progress_disease_codes.ehealth_status = 'finished'
                                  AND (asserted_date <= period_interval.period_end)),
     actions AS (SELECT cascade_lvl00_actions.id,
                        cascade_lvl00_actions.code,
                        cascade_lvl00_actions.patient_id,
                        cascade_lvl00_actions.asserted_date
                 FROM cascade_lvl00_actions,
                      period_interval
                 WHERE cascade_lvl00_actions.legal_entity_id = 3228
                   AND cascade_lvl00_actions.code IN ('K45', 'D45', 'T45')
                   AND (asserted_date >= period_interval.period_start AND asserted_date <= period_interval.period_end)),
     joined_groups AS (SELECT cascade_lvl00_progress_disease_groups.*,
                              reporting_periods.original_period_type,
                              reporting_periods.original_period_value,
                              reporting_periods.calculated_period_start_days,
                              reporting_periods.period_start_date,
                              reporting_periods.period_end_date
                       FROM cascade_lvl00_progress_disease_groups
                                JOIN reporting_periods ON cascade_lvl00_progress_disease_groups.date_restriction =
                                                          reporting_periods.period_name),
     observations AS (SELECT joined_resources.code            AS code,
                             joined_resources.legal_entity_id AS legal_entity_id,
                             joined_resources.asserted_date   AS asserted_date,
                             joined_resources.patient_id      AS patient_id,
                             joined_resources.status          AS status,
                             joined_resources.resource_type   AS resource_type
                      FROM joined_resources
                      WHERE joined_resources.resource_type = 'observation'
                        AND joined_resources.status = 'valid'),
     diagnostic_reports AS (SELECT joined_resources.code            AS code,
                                   joined_resources.legal_entity_id AS legal_entity_id,
                                   joined_resources.asserted_date   AS asserted_date,
                                   joined_resources.patient_id      AS patient_id,
                                   joined_resources.status          AS status,
                                   joined_resources.resource_type   AS resource_type
                            FROM joined_resources
                            WHERE joined_resources.resource_type = 'diagnostic_report'
                              AND joined_resources.status = 'final'),
     service_requests AS (SELECT joined_resources.code            AS code,
                                 joined_resources.legal_entity_id AS legal_entity_id,
                                 joined_resources.asserted_date   AS asserted_date,
                                 joined_resources.patient_id      AS patient_id,
                                 joined_resources.status          AS status,
                                 joined_resources.resource_type   AS resource_type
                          FROM joined_resources
                          WHERE joined_resources.resource_type = 'service_request'
                            AND joined_resources.status IN ('active', 'completed')),
     patient_joined_groups AS (SELECT patients.patient_full_name,
                                      patients.current_age_in_years,
                                      patients.id     AS patient_id,
                                      joined_groups.*,
                                      patients.gender AS patient_gender
                               FROM patients,
                                    joined_groups),
     patient_joined_groups_with_services AS (SELECT patient_joined_groups.patient_id,
                                                    patient_joined_groups.indicator_name,
                                                    patient_joined_groups.group_name,
                                                    jrsr.*
                                             FROM patient_joined_groups
                                                      JOIN service_requests jrsr
                                                           ON patient_joined_groups.need_to_check_service_request_codes =
                                                              TRUE AND
                                                              jrsr.patient_id = patient_joined_groups.patient_id AND
                                                              jrsr.asserted_date >=
                                                              patient_joined_groups.period_start_date AND
                                                              jrsr.asserted_date <=
                                                              patient_joined_groups.period_end_date AND
                                                              (patient_joined_groups.need_to_check_service_statuses AND
                                                               has(patient_joined_groups.service_statuses, jrsr.status))
                                             WHERE (patient_joined_groups.need_to_check_service_request_codes = TRUE AND
                                                    arrayExists(x -> x = jrsr.code,
                                                                patient_joined_groups.condition_service_request_codes)) SETTINGS allow_experimental_join_condition = 1),
     patient_joined_groups_with_dos AS (SELECT patient_joined_groups.patient_id,
                                               patient_joined_groups.indicator_name,
                                               patient_joined_groups.group_name,
                                               jrdo.*
                                        FROM patient_joined_groups
                                                 JOIN diagnostic_reports jrdo
                                                      ON (patient_joined_groups.need_to_check_diagnostic_report_codes =
                                                          TRUE OR
                                                          patient_joined_groups.need_to_check_optional_observation_codes =
                                                          TRUE) AND
                                                         jrdo.patient_id = patient_joined_groups.patient_id AND
                                                         has(patient_joined_groups.condition_diagnostic_report_codes,
                                                             jrdo.code) AND jrdo.asserted_date >=
                                                                            patient_joined_groups.period_start_date AND
                                                         jrdo.asserted_date <= patient_joined_groups.period_end_date
                                        WHERE (patient_joined_groups.need_to_check_diagnostic_report_codes = TRUE AND
                                               arrayExists(x -> x = jrdo.code,
                                                           patient_joined_groups.condition_diagnostic_report_codes) AND
                                               (NOT patient_joined_groups.need_to_check_optional_observation_codes = TRUE OR
                                                jrdo.asserted_date <
                                                toDate('2024-06-01'))) SETTINGS allow_experimental_join_condition = 1),
     patient_joined_groups_with_observations AS (SELECT patient_joined_groups.patient_id,
                                                        patient_joined_groups.indicator_name,
                                                        patient_joined_groups.group_name,
                                                        jro.*
                                                 FROM patient_joined_groups
                                                          JOIN observations jro
                                                               ON (patient_joined_groups.need_to_check_observation_codes =
                                                                   TRUE OR
                                                                   patient_joined_groups.need_to_check_optional_observation_codes =
                                                                   TRUE) AND
                                                                  jro.patient_id = patient_joined_groups.patient_id AND
                                                                  jro.asserted_date >=
                                                                  patient_joined_groups.period_start_date AND
                                                                  jro.asserted_date <=
                                                                  patient_joined_groups.period_end_date AND
                                                                  (has(patient_joined_groups.condition_observation_codes, jro.code) OR
                                                                   has(
                                                                           patient_joined_groups.condition_optional_observation_codes,
                                                                           jro.code))
                                                 WHERE ((patient_joined_groups.need_to_check_observation_codes AND
                                                         arrayExists(x -> x = jro.code,
                                                                     patient_joined_groups.condition_observation_codes)) OR
                                                        (patient_joined_groups.need_to_check_optional_observation_codes AND
                                                         arrayExists(x -> x = jro.code,
                                                                     patient_joined_groups.condition_optional_observation_codes))) SETTINGS allow_experimental_join_condition = 1),
     patient_joined_groups_with_reasons AS (SELECT patient_joined_groups.patient_id,
                                                   patient_joined_groups.indicator_name,
                                                   patient_joined_groups.group_name,
                                                   pdrc.*
                                            FROM patient_joined_groups
                                                     JOIN progress_disease_codes pdrc
                                                          ON patient_joined_groups.need_to_check_reason_code = TRUE AND
                                                             pdrc.patient_id = patient_joined_groups.patient_id AND
                                                             has(patient_joined_groups.condition_reason_code, pdrc.code) AND
                                                             pdrc.asserted_date >=
                                                             patient_joined_groups.period_start_date AND
                                                             pdrc.asserted_date <= patient_joined_groups.period_end_date
                                            WHERE (patient_joined_groups.need_to_check_reason_code AND
                                                   arrayExists(x -> x = pdrc.code,
                                                               patient_joined_groups.condition_reason_code)) SETTINGS allow_experimental_join_condition = 1),
     patient_joined_groups_with_actions AS (SELECT patient_joined_groups.patient_id,
                                                   patient_joined_groups.indicator_name,
                                                   patient_joined_groups.group_name,
                                                   a.*
                                            FROM patient_joined_groups
                                                     JOIN actions a
                                                          ON patient_joined_groups.need_to_check_condition_action_codes =
                                                             TRUE AND
                                                             a.patient_id = patient_joined_groups.patient_id AND
                                                             a.asserted_date >=
                                                             patient_joined_groups.period_start_date AND
                                                             a.asserted_date <=
                                                             patient_joined_groups.period_end_date AND
                                                             has(patient_joined_groups.condition_action_codes, a.code)
                                            WHERE (patient_joined_groups.need_to_check_condition_action_codes = TRUE AND
                                                   arrayExists(x -> x = a.code,
                                                               patient_joined_groups.condition_action_codes)) SETTINGS allow_experimental_join_condition = 1),
     patient_joined_groups_with_pdc AS (SELECT patient_joined_groups.patient_id,
                                               patient_joined_groups.indicator_name,
                                               patient_joined_groups.group_name,
                                               pdc.*
                                        FROM patient_joined_groups
                                                 JOIN progress_disease_codes pdc
                                                      ON (patient_joined_groups.need_to_check_condition_codes = TRUE OR
                                                          patient_joined_groups.need_to_check_condition_exclude_codes =
                                                          TRUE) AND
                                                         pdc.patient_id = patient_joined_groups.patient_id AND
                                                         pdc.asserted_date <= patient_joined_groups.period_end_date AND
                                                         (has(patient_joined_groups.condition_codes, pdc.code) OR
                                                          has(patient_joined_groups.condition_exclude_codes, pdc.code))
                                        WHERE (pdc.asserted_date <= patient_joined_groups.period_end_date AND
                                               ((patient_joined_groups.need_to_check_condition_codes = TRUE AND
                                                 arrayExists(x -> x = pdc.code,
                                                             patient_joined_groups.condition_codes)) OR
                                                (patient_joined_groups.need_to_check_condition_exclude_codes = TRUE AND
                                                 arrayExists(x -> x = pdc.code,
                                                             patient_joined_groups.condition_exclude_codes)))) SETTINGS allow_experimental_join_condition = 1),
     patient_groups AS (SELECT first_value(patient_joined_groups.patient_full_name),
                               first_value(patient_joined_groups.current_age_in_years),
                               patient_joined_groups.patient_id                                                                                            AS patient_id,
                               patient_joined_groups.indicator_name                                                                                        AS indicator_name,
                               patient_joined_groups.group_name                                                                                            AS group_name,
                               groupUniqArray(patient_joined_groups_with_dos.code)                                                                         AS result_condition_diagnostic_report_codes,
                               groupUniqArray(patient_joined_groups_with_observations.code)                                                                AS result_condition_observation_codes,
                               groupUniqArray(patient_joined_groups_with_services.code)                                                                    AS result_condition_service_request_codes,
                               groupUniqArray(patient_joined_groups_with_reasons.code)                                                                     AS result_reason_codes,
                               groupUniqArray(patient_joined_groups_with_actions.code)                                                                     AS result_action_codes,
                               groupUniqArray(patient_joined_groups_with_pdc.code)                                                                         AS result_condition_codes,
                               first_value(patient_gender)                                                                                                 AS patient_gender,
                               first_value(patient_joined_groups.current_age_in_years)                                                                     AS patient_age,
                               first_value(patient_joined_groups.need_to_check_female_age)                                                                 AS need_to_check_female_age,
                               first_value(patient_joined_groups.need_to_check_male_age)                                                                   AS need_to_check_male_age,
                               first_value(patient_joined_groups.need_to_check_reason_code)                                                                AS need_to_check_reason_code,
                               first_value(patient_joined_groups.need_to_check_condition_codes)                                                            AS need_to_check_condition_codes,
                               first_value(patient_joined_groups.need_to_check_condition_exclude_codes)                                                    AS need_to_check_condition_exclude_codes,
                               first_value(patient_joined_groups.need_to_check_observation_codes)                                                          AS need_to_check_observation_codes,
                               first_value(patient_joined_groups.need_to_check_service_request_codes)                                                      AS need_to_check_service_request_codes,
                               first_value(patient_joined_groups.need_to_check_diagnostic_report_codes)                                                    AS need_to_check_diagnostic_report_codes,
                               first_value(patient_joined_groups.need_to_check_condition_action_codes)                                                     AS need_to_check_action_codes,
                               first_value(patient_joined_groups.need_to_check_optional_observation_codes)                                                 AS need_to_check_optional_observation_codes,
                               first_value(patient_joined_groups.condition_female_age_from)                                                                AS condition_female_age_from,
                               first_value(patient_joined_groups.condition_female_age_to)                                                                  AS condition_female_age_to,
                               first_value(patient_joined_groups.condition_male_age_from)                                                                  AS condition_male_age_from,
                               first_value(patient_joined_groups.condition_male_age_to)                                                                    AS condition_male_age_to,
                               (patient_gender IS NULL OR
                                (first_value(patient_joined_groups.skip_male) AND patient_gender = 0)
                                   OR (group_name IN
                                       ('hiv_screening_no_risk', 'checkup_40_64_with_risk', 'checkup_65_plus_no_risk',
                                        'tb_screening_no_risk',
                                        'hypertension_eval_no_risk'))
                                   OR (first_value(patient_joined_groups.skip_female) AND patient_gender = 1)
                                   OR (need_to_check_male_age AND patient_gender = 0 AND
                                       patient_age NOT BETWEEN condition_male_age_from AND condition_male_age_to)
                                   OR (need_to_check_female_age AND patient_gender = 1 AND
                                       patient_age NOT BETWEEN condition_female_age_from AND condition_female_age_to)
                                   )                                                                                                                       AS skip_check,
                               first_value(patient_joined_groups.is_no_risk)                                                                               AS is_no_risk,

                               first_value(patient_joined_groups.condition_reason_code)                                                                    AS condition_reason_codes,
                               first_value(patient_joined_groups.condition_action_codes)                                                                   AS condition_action_codes,
                               first_value(patient_joined_groups.condition_codes)                                                                          AS condition_codes,
                               first_value(patient_joined_groups.condition_exclude_codes)                                                                  AS condition_exclude_codes,
                               first_value(patient_joined_groups.condition_observation_codes)                                                              AS condition_observation_codes,
                               first_value(patient_joined_groups.condition_optional_observation_codes)                                                     AS condition_optional_observation_codes,
                               first_value(patient_joined_groups.condition_diagnostic_report_codes)                                                        AS condition_diagnostic_report_codes,
                               first_value(patient_joined_groups.condition_service_request_codes)                                                          AS condition_service_request_codes,

                               (need_to_check_reason_code AND length(result_reason_codes) = 0)                                                             AS force_quit_reason_check,
                               (need_to_check_action_codes AND length(result_action_codes) = 0)                                                            AS force_quit_action_check,
                               (need_to_check_condition_codes AND length(result_condition_codes) = 0)                                                      AS force_quit_condition_check,
                               (need_to_check_service_request_codes AND
                                length(result_condition_service_request_codes) =
                                0)                                                                                                                         AS force_quit_service_request_check,
                               (need_to_check_observation_codes AND length(result_condition_observation_codes) =
                                                                    0)                                                                                     AS force_quit_observation_check,
                               (need_to_check_diagnostic_report_codes AND
                                length(result_condition_diagnostic_report_codes) =
                                0)                                                                                                                         AS force_quit_diagnostic_report_check,
                               (need_to_check_condition_exclude_codes AND length(result_condition_codes) =
                                                                          0)                                                                               AS force_quit_condition_exclude_check,

                               if(skip_check OR NOT need_to_check_diagnostic_report_codes, true,
                                  if(force_quit_diagnostic_report_check, false,
                                     need_to_check_diagnostic_report_codes AND
                                     arrayExists(x -> has(result_condition_diagnostic_report_codes, x),
                                                 condition_diagnostic_report_codes)
                                  ))                                                                                                                       AS diagnostic_report_check,
                               if(skip_check OR NOT need_to_check_reason_code, true,
                                  if(force_quit_reason_check, false,
                                     arrayExists(x -> has(condition_reason_codes, x), result_condition_codes) OR
                                     arrayExists(x -> has(condition_reason_codes, x), result_reason_codes)
                                  ))                                                                                                                       AS reason_check,
                               if(skip_check OR NOT need_to_check_action_codes, true,
                                  if(force_quit_action_check, false,
                                     arrayExists(x -> has(condition_action_codes, x), result_action_codes)
                                  ))                                                                                                                       AS action_check,
                               if(skip_check OR NOT need_to_check_condition_codes, true,
                                  if(force_quit_condition_check, false, arrayExists(x -> has(condition_codes, x),
                                                                                    result_condition_codes)))                                              AS condition_check,
                               if(skip_check OR NOT need_to_check_service_request_codes, true,
                                  if(force_quit_service_request_check, false,
                                     need_to_check_service_request_codes AND
                                     arrayExists(x -> has(condition_service_request_codes, x),
                                                 result_condition_service_request_codes)))                                                                 AS service_request_check,
                               if(skip_check OR NOT need_to_check_condition_exclude_codes, true,
                                  if(force_quit_condition_exclude_check, true,
                                     NOT arrayExists(x -> has(condition_exclude_codes, x),
                                                     result_condition_codes)))                                                                             AS condition_exclude_check,
                               if(skip_check OR NOT need_to_check_observation_codes, true,
                                  if(force_quit_observation_check, false,
                                     (
                                         (NOT need_to_check_optional_observation_codes AND
                                          length(arrayIntersect(condition_observation_codes,
                                                                result_condition_observation_codes)) =
                                          length(condition_observation_codes))
                                             OR (
                                             need_to_check_optional_observation_codes AND
                                             (
                                                 (length(arrayIntersect(condition_observation_codes,
                                                                        result_condition_observation_codes)) =
                                                  length(condition_observation_codes) AND
                                                  ((need_to_check_diagnostic_report_codes AND diagnostic_report_check) OR
                                                   (need_to_check_service_request_codes AND service_request_check)))
                                                     OR length(arrayIntersect(arrayConcat(condition_observation_codes,
                                                                                          condition_optional_observation_codes),
                                                                              result_condition_observation_codes)) =
                                                        length(arrayConcat(condition_observation_codes,
                                                                           condition_optional_observation_codes))
                                                 )
                                             )
                                         )
                                  )
                               )                                                                                                                           AS observation_check,
                               CASE
                                   WHEN skip_check OR
                                        (need_to_check_condition_exclude_codes AND NOT condition_exclude_check)
                                       THEN 'no_need_done'
                                   WHEN condition_check AND action_check AND reason_check AND condition_exclude_check
                                       AND if(need_to_check_optional_observation_codes = TRUE, observation_check,
                                              (need_to_check_observation_codes AND observation_check) OR
                                              ((need_to_check_service_request_codes AND service_request_check) OR
                                               (need_to_check_diagnostic_report_codes AND diagnostic_report_check)))
                                       THEN 'done'
                                   WHEN need_to_check_condition_codes AND condition_check AND
                                        need_to_check_condition_exclude_codes AND condition_exclude_check
                                       THEN 'need_done'
                                   WHEN (is_no_risk AND NOT condition_exclude_check) OR
                                        (NOT is_no_risk AND NOT condition_check) THEN 'no_need_done'
                                   ELSE 'need_done'
                                   END                                                                                                                     AS status,
                               row_number() OVER (PARTITION BY patient_id, indicator_name ORDER BY if(status = 'done', 1, if(status = 'need_done', 2, 3))) AS status_rank
                        FROM patient_joined_groups
                                 LEFT JOIN patient_joined_groups_with_dos
                                           USING patient_id, indicator_name, group_name LEFT
                                 JOIN patient_joined_groups_with_services
                                      USING patient_id, indicator_name, group_name LEFT
                                 JOIN patient_joined_groups_with_observations
                                      USING patient_id, indicator_name, group_name LEFT
                                 JOIN patient_joined_groups_with_reasons
                                      USING patient_id, indicator_name, group_name LEFT
                                 JOIN patient_joined_groups_with_actions
                                      USING patient_id, indicator_name, group_name LEFT
                                 JOIN patient_joined_groups_with_pdc USING patient_id, indicator_name, group_name
                        GROUP BY patient_joined_groups.patient_id, patient_joined_groups.indicator_name,
                                 patient_joined_groups.group_name)
SELECT patients.id,
       patients.patient_full_name,
       patients.legal_entity_id,
       patients.current_age_in_years,
       patients.doctor_full_name,
       any(if(indicators.indicator_name = 'breast_completed', indicators.status, NULL))     AS breast_completed_status,
       any(if(indicators.indicator_name = 'breast_referral', indicators.status, NULL))      AS breast_referral_status,
       any(if(indicators.indicator_name = 'checkup_40_64', indicators.status, NULL))        AS checkup_40_64_status,
       any(if(indicators.indicator_name = 'checkup_65_plus', indicators.status, NULL))      AS checkup_65_plus_status,
       any(if(indicators.indicator_name = 'colorectal_completed', indicators.status,
              NULL))                                                                        AS colorectal_completed_status,
       any(if(indicators.indicator_name = 'colorectal_referral', indicators.status,
              NULL))                                                                        AS colorectal_referral_status,
       any(if(indicators.indicator_name = 'cv_risk_assessment', indicators.status,
              NULL))                                                                        AS cv_risk_assessment_status,
       any(if(indicators.indicator_name = 'diabetes_screening', indicators.status,
              NULL))                                                                        AS diabetes_screening_status,
       any(if(indicators.indicator_name = 'hiv_screening', indicators.status, NULL))        AS hiv_screening_status,
       any(if(indicators.indicator_name = 'hypertension_eval', indicators.status, NULL))    AS hypertension_eval_status,
       any(if(indicators.indicator_name = 'prostate_completed', indicators.status,
              NULL))                                                                        AS prostate_completed_status,
       any(if(indicators.indicator_name = 'prostate_referral', indicators.status, NULL))    AS prostate_referral_status,
       any(if(indicators.indicator_name = 'tb_screening', indicators.status, NULL))         AS tb_screening_status,
       '{' || arrayStringConcat(
               arrayMap(
                       (name, status, sr_codes, do_codes, obs_codes, condition_codes, action_codes) ->
                           concat('""', name, '"": {',
                                  '""status"": ""', status, '"",',
                                  '""sr_codes"": [', arrayStringConcat(arrayMap(x -> concat('""', x, '""'), sr_codes), ','),
                                  '],',
                                  '""do_codes"": [', arrayStringConcat(arrayMap(x -> concat('""', x, '""'), do_codes), ','),
                                  '],',
                                  '""obs_codes"": [',
                                  arrayStringConcat(arrayMap(x -> concat('""', x, '""'), obs_codes), ','), '],',
                                  '""action_codes"": [',
                                  arrayStringConcat(arrayMap(x -> concat('""', x, '""'), action_codes), ','), ']',
                                  '}'),
                       groupArray(indicators.indicator_name),
                       groupArray(indicators.status),
                       groupArray(indicators.result_condition_service_request_codes),
                       groupArray(indicators.result_condition_diagnostic_report_codes),
                       groupArray(indicators.result_condition_observation_codes),
                       groupArray(indicators.result_condition_codes),
                       groupArray(indicators.result_action_codes)
               ),
               ','
              ) || '}'                                                                      AS indicator_data_json
FROM patients
         JOIN patient_groups indicators ON status_rank = 1 AND patients.id = patient_groups.patient_id
WHERE patient_groups.status_rank = 1
GROUP BY patients.id, patients.patient_full_name, patients.legal_entity_id, patients.current_age_in_years,
         patients.doctor_full_name
ORDER BY patients.patient_full_name ASC NULLS LAST COLLATE 'uk'
LIMIT 15 OFFSET 0"
niR6MQ1t,2025-05-14T18:01:35.271628,powerampache,PHP,Wednesday 14th of May 2025 11:01:36 AM CDT,"1.01-80 (80) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""timeout"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

getAlbums() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""timeout\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""timeout\"" }"",""stackTrace"":[]}"
rH89h6kk,OP,MetaMettalix,Lua,Wednesday 14th of May 2025 10:49:39 AM CDT,"return {'8c8c8c8c8c8c8c7c87c7c8ccccccccccccc8cc8cc8cc8c8c8c8c8c8c8c8c8c8c8c8c88c8', 'c88c8c8c8c8c8c87c8c87c7ccccc8c8c87c8ccc8cc8c8cc8cc8c8c8c8c8c88c8c8878c88', '8c8c8c878c878c8c87c78c8cc8ccc7ccc6cc767c767c8c676cc8c676c8c8c888c6c67678', '6c688c6c8cc8c8c7c676cc7c7c76cccc7c8ccc6c76c8c7cc876c8cc8c8c6cc6787c8c8c8', '88c8c8c76767c67cc7c777ef7eff7e7ccccc7cccc7c676c8ccc76c8c8c78c876c88876c8', 'c8c6c88cc8c8c76c8c7cfffffffff77e76cc8c876c7cccc6768c7676c676c8c76cc678c8', '88c8c6cc78c8c87c7cffeffffefcfef77cc8ccccc8c88c8cccc8cc8c78cc8c68788c8678', 'c688c8c8c8c8c8c67e7ffffffffff7fef77c7676c8cc87c876c8c676c8c687c676c8c8c8', '8cc6c88c8c67cc87ffffefefcfeffcf7cfe7ccc7cc67c6c8c767c8cc8c8c8c8c8c876c8c', '88c88c6c8cc88cc7fefffcfefffeffef7ff778c67c8c78cc6c8c8c6c8c8c86c8768c8888', 'c88c6c88c8c8cc777ffefececeffcfcfefcfe7cc8c8c6c87c8c678c8c676c8c6cc88c6c8', '6c8c8c8c8c678ef77cf7ceccecececf7f7f7f7ccc6c7cc6c8cc8c8c8c8c8c8c888c678c8', 'c86c88c6c8c8c7fefccefc6161ceccffef7ef7cc8c8c8c8c6c8c6c676c88888c6c88c688', 'c8c8c8c88c8c6fffecccecec6c6cceceff7f7f7c8cc6c8c7c7c7c8c8c8ccc6c876c8c8c8', 'c886c88c6c8ccfccecece86eccecccceccfefe7cc7c77cfcf7ffcc8c86888c88c886888c', '8cc8c8c8c88ceffcccc6ec6ccc86e6cccef77ffef7ffeffeffef76c8ccc676c6c8c8c688', 'c68c6c8c8ccccceccccc616c666c6c6ecccfcf7ffeffffffffffec88888c88c886c8c8c8', 'ccc88c6c88cccffef6cec66c6ec6cc6e8e7efcfcffffeffefcff7cc6cc8c8c6c8c88c6c8', '618c88c8c6ccccfcec6c6e86cc8c6ce46ccce7effefcffffffefc6c886c86c88886c888c', 'c6c8c88c8c7cecccceccce16e6ccc8e6ceccecefcffffcfeffffcc8c8c8c88c6c8c88c88', 'c16c8c8c8ccc7cecc676cc6c6c66e0ec6cce6e6cfefefffffcffcc8c6c8c8c8c886c68c8', '6cecc68c88ccc77ecc76c16ece61c616e6cc8eeeffffeffeffefc6c8c88c68c6c8c8c688', 'c16c8c8c6cccefcce6eceece6166616c1ce616e7fcfcffffffffcc88c6c8c88c8c888c8c', '664ec88c88ccceccc6c6c616c61ec6666cc6eceffcffcfcfefcfcc6c8c86c8c688c6c888', 'c16cc6888c8c7cceeceeec6ece660161e6ce66cfcffcfcffffffec8c88c888c8c6c88c6c', '6161c860686c7ccec6c6ce6ece16e6c616c1cefcffefffcfefefcc8c8c8c6c8c88c6c888', 'c6ce6c08808ccc7ece616cc66c6ec616cc6ce7fcfffcfeffefffe86c8c6c88c6c8888c8c', '164c1e808686ccccc6eceece6ce616e6cececffefcfffcfffeef7c86c8c8c888c8cc6888', '6c6e6c6800808ccece6ec6e6e66ce81616ccccffcffcffcfeeffcc8c88c6c6c88678cc8c', '6461c1c88086867ccc0ecec6cecec6c6e8ececfcfcffeffffeefcc8c8c8c8c6c8c688688', '616c616e860808c7ecececcec7c7ec161c6ccfeffefffcfceffef6c8c888c8c88c8c8cc8', '861c618e888686cffc6c6e7c76ece6c6cecceffcffcfcfffecc77c6c6c8c876c86767688', '646616c16808868ccccecc6ee76ece616c61ccfefcffefffef7efc8cc8c68c8c8c8c8cc8', '616c168ecc06888ccccc6e76e76e6e6c16ccecfffcffcfcffe7fe8c6c8c8c88c88c888c8', 'c6c6ce46ce88688cfcce76e76e6ce8e8e8ecccfeffcfcffeffefc7c88c6c8c6c86c676c8', '616161618ec886cfefffccae66e6e61c616ceefcfeffecffefe7c8cc8c8c8c8c78c8c888', 'c6c6c6e46ce88867ffcfece7e7e6c6c6c6e4ccecffcfffeff77fe768c886c886c88c8cc8', '646161c61cce88cfcffff7e6e6e6e4e618e61cec6ccfcfcfef7f7cc76c7c8c8c6c8868c8', 'c6186c616eccc6cffefffe7ece86c6cc6c6c6c600687f7fcf7cfc77777c77777787c78c8', '6c61616c81ece7efffefffc6ece16e61616161880066cf7fcfe777fe77777777f7777777', 'ce8c6c616c1cecf7ffffcfcce68ccc6c616c6800080868cf77f7fc7f7fefefc7ef77f7f7', 'c6161c61c6eccefccfe7f76ccce6c61e6c64600808000667c7fe77fe7f7f77ff7fcfe777', 'c6c66466e4cecccfeff768c6c6c16c6c1668008000880806687f777f7ef77efc7ef77fcf', 'c1cec616c61ceef77778668ce6c6ec6680080008600806808686fe77f777f777f7777777', 'c6c616c616ce8ccfc6868086cc6160c0080060008080808080888777e7efcfefc7efefcf', 'cec6c6c6ce6cce7c880808800688008000080808060806080608668f7f77777e7f77fc77', 'cccec616c61cc7766088080808008008080080608006080608008868c77ef77fcc7c7efc', '88cc1661c6c6c80808068680808060060808080080800808680800686c7fc7c7fe77f777', '6c6ccec6ecc768680808808608080808060080300808080800808808086777efcf7efcfc', '88cccccc8e76806080808808808080808080008030806080860600008066c777c7fcfc77', '0686ccce77680808608680806806008008080800080808030808086080806877c7c7cfc7', '868768887703808080806808080880080606080806030808008008060808866fe7cfefc7', '08068686888080808808808680806803080800608080860080030030803088877f777c77', '08808083780068060886808086030080080080808086080808080800608080367fe7cfc7', '8606080873880680800808608808080680380300608080603000008080086880877fef7c', '08808683f800803088680880868060800600808030803080080806008030088667777c77', '803808687380868063088063086080680806808080680808006080806080808838fef7c7', '80808088f808036c668068080888030808060806808060080800030800803808667cfc77', '868088677368080ee6888086080808030868060806080800008080080800808880777efc', '08306887f806803eee66e6ec66666668066080308080603803080800308060808667f777', '8808387f7730886ee2eeaeee2eeee6e686e6680803080800000308080608030883887efc', '088086f7f78803e6ee6ee6eee6eee6eee66ee60808030080808006080300808083677777', '868688fff7668868e6c6e2ee2ee2e6e2886e668080808603006803080808080808377777', '080866f7f780868687e6c68e6ece66e60366e800806008080800800808030808683ffcf7', '888888fff7388308676e66808668ce66686e208030808008080808030080030880777ff7', '380367efff80880897cc686308836e8086c6800808308080308608080808080368a7feff', '868808ff7f68868087c6c68803888686ce680806008080308030806080808080888f7f7f', '883868afff80888899cc6c89898960866c80808080060808080308080306030808afffff', '868888fff7a88608986cc6cc8c898988e6686060803808680808083080808083888fffff', '803868eff7808808d98cc616ecec979c6c68030808030808808608060380306008a7ffff', '888088fff78868889988c6e6ec68d9d7e8808080808680803803068080680803888fffff', '8868367fff388968888c6cc6cc779988e6680806080038680808303080303806038b7fff', '683867ffff736889068ce6c6e6c8d97c6c680830803800808608086308086038086fffff', '880867fefff70889886c6ece8e8688e6e6c36083680883838308080860308008038bffff', 'c68807fff7f776c7897ec6e6c6e6e6c6ec680808038060808803030080803080368fffff', '803867feffffccc78878ec6eec6c6e6c6e6898368838868868680830308083676777ffff', '868807fffeffeccc79ce8e766ee6c6ee6ce79808068038083808608086368c6cce7777fc', '683866ffffffce6c77a766cecc6ce8e8e687d938038083080838868686cc6cce8eefe7c7', '7686887ffff7cccec7ce7e676e6e86c6c6c699808086080636867876cc6ce86ccc7c77fc', 'e77383effeffecccc777e7e6c7c67e6ececc7988388388880886cc7ecc6ccc67e7ef7f77', 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'}"
GTQGc24s,2025-05-14T18:47:13.286148,powerampache,PHP,Wednesday 14th of May 2025 10:47:13 AM CDT,"1.00-68 (68) - DB: 82
java.lang.NullPointerException: Parameter specified as non-null is null: method luci.sixsixsix.powerampache2.domain.models.User.<init>, parameter id
	at luci.sixsixsix.powerampache2.domain.models.User.<init>(Unknown Source:20)
	at luci.sixsixsix.powerampache2.data.remote.dto.UserDtoKt.toUser(UserDto.kt:94)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.getUserNetwork(BaseAmpacheRepository.kt:128)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$getUserNetwork$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:108)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:793)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:697)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:684)

"
6uCDLpsB,pastsegundario,imagemdel,PowerShell,Wednesday 14th of May 2025 09:54:34 AM CDT,4Xw73xZAN34E3bP0Lbhp0tToqNymBo5BH9buhqyUXTMla1Korla9wpdDFU2c6B2t2ZJb2wPzOIxaYTqQxLwwoooOWI7C9FBAB9d943102a2A6Cd5451921163D0277C3c4b7A0eb78df7Cc185EB7AFE79J8PE6ZEjHa
hdtjL6wm,Simulated redis data for publishing to a local redis,athaena,Python,Wednesday 14th of May 2025 09:52:41 AM CDT,"#!/usr/bin/env python3
""""""
Simulation script for activity prediction data.
Generates random tracking data and publishes it to a Redis channel.
""""""

import asyncio
import json
import random
import aioredis
import argparse
from typing import Dict, List, Any, Tuple

# Constants from your configuration
CLASS_NAMES = [
    ""standing"",
    ""sitting_down"",
    ""sitting"",
    ""lying"",
    ""standing_up"",
    ""falling"",
    ""bending"",
]

# Default Redis connection settings
REDIS_HOST = ""localhost""
REDIS_PORT = 6379
REDIS_CHANNEL = ""activity_stream""

# Default simulation settings
MAX_TRACK_ID = 4
PUBLISH_DELAY = 1.0  # seconds between publications


def generate_random_bbox() -> List[float]:
    """"""Generate a random bounding box with normalized coordinates [x1, y1, x2, y2].""""""
    # Generate x1, y1 coordinates (top-left)
    x1 = random.uniform(0.05, 0.8)
    y1 = random.uniform(0.05, 0.8)
    
    # Generate width and height (ensuring box stays within frame)
    width = random.uniform(0.1, min(0.3, 1.0 - x1))
    height = random.uniform(0.2, min(0.5, 1.0 - y1))
    
    # Calculate x2, y2 coordinates (bottom-right)
    x2 = x1 + width
    y2 = y1 + height
    
    return [x1, y1, x2, y2]


def generate_random_action() -> Tuple[str, float]:
    """"""Generate a random action with confidence score.""""""
    action = random.choice(CLASS_NAMES)
    confidence = random.uniform(0.6, 0.99)
    return action, confidence


def generate_random_tracking_data(num_tracks: int) -> Dict[str, Any]:
    """"""Generate random tracking data for a specified number of tracks.""""""
    tracking_data = {}
    
    # Randomly decide how many tracks to include in this frame (1 to num_tracks)
    active_tracks = random.randint(1, num_tracks)
    track_ids = random.sample(range(num_tracks), active_tracks)
    
    for track_id in track_ids:
        track_id_str = str(track_id)
        action, confidence = generate_random_action()
        
        tracking_data[track_id_str] = {
            ""track_id"": track_id_str,
            ""current_actions"": [[action, confidence]],
            ""last_bbox"": generate_random_bbox()
        }
    
    return {""tracking_data"": tracking_data}


async def publish_simulated_data(
    redis_host: str, 
    redis_port: int, 
    channel: str,
    max_track_id: int,
    delay: float,
    iterations: int = None
) -> None:
    """"""Publish simulated tracking data to a Redis channel.""""""
    # Connect to Redis
    redis = await aioredis.from_url(f""redis://{redis_host}:{redis_port}"")
    
    try:
        print(f""Connected to Redis at {redis_host}:{redis_port}"")
        print(f""Publishing to channel: {channel}"")
        print(f""Press Ctrl+C to stop"")
        
        count = 0
        while iterations is None or count < iterations:
            # Generate random tracking data
            data = generate_random_tracking_data(max_track_id + 1)
            
            # Convert to JSON and publish
            data_json = json.dumps(data)
            await redis.publish(channel, data_json)
            
            # Print info about what was published
            num_tracks = len(data[""tracking_data""])
            track_ids = "", "".join(data[""tracking_data""].keys())
            print(f""Published data with {num_tracks} tracks (IDs: {track_ids})"")
            
            count += 1
            await asyncio.sleep(delay)
            
    except KeyboardInterrupt:
        print(""\nStopping simulation..."")
    finally:
        # Close Redis connection
        await redis.close()
        print(""Redis connection closed"")


def main():
    """"""Main entry point for the script.""""""
    parser = argparse.ArgumentParser(description=""Simulate activity tracking data and publish to Redis"")
    parser.add_argument(""--host"", default=REDIS_HOST, help=f""Redis host (default: {REDIS_HOST})"")
    parser.add_argument(""--port"", type=int, default=REDIS_PORT, help=f""Redis port (default: {REDIS_PORT})"")
    parser.add_argument(""--channel"", default=REDIS_CHANNEL, help=f""Redis channel (default: {REDIS_CHANNEL})"")
    parser.add_argument(""--delay"", type=float, default=PUBLISH_DELAY, help=f""Delay between publications in seconds (default: {PUBLISH_DELAY})"")
    parser.add_argument(""--max-tracks"", type=int, default=MAX_TRACK_ID, help=f""Maximum number of tracks (default: {MAX_TRACK_ID})"")
    parser.add_argument(""--iterations"", type=int, help=""Number of publications (default: unlimited)"")
    
    args = parser.parse_args()
    
    try:
        asyncio.run(publish_simulated_data(
            redis_host=args.host,
            redis_port=args.port,
            channel=args.channel,
            max_track_id=args.max_tracks,
            delay=args.delay,
            iterations=args.iterations
        ))
    except Exception as e:
        print(f""Error: {e}"")
        return 1
    
    return 0


if __name__ == ""__main__"":
    exit(main())"
JtWVk6MX,2025-05-14T16:49:23.299389,powerampache,PHP,Wednesday 14th of May 2025 09:49:23 AM CDT,"1.01-80-play (80) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:864)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:834)
	at android.os.Handler.dispatchMessage(Handler.java:103)
	at android.os.Looper.loopOnce(Looper.java:249)
	at android.os.Looper.loop(Looper.java:337)
	at android.os.HandlerThread.run(HandlerThread.java:85)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1124)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:453)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":33},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":2608084553,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1124,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":453,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":864,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":834,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":103,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":249,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":337,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":85,""methodName"":""run""}]}"
7HjHWjt5,2025-05-14T16:49:22.718441,powerampache,PHP,Wednesday 14th of May 2025 09:49:23 AM CDT,"1.01-80-play (80) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:864)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:836)
	at android.os.Handler.dispatchMessage(Handler.java:103)
	at android.os.Looper.loopOnce(Looper.java:249)
	at android.os.Looper.loop(Looper.java:337)
	at android.os.HandlerThread.run(HandlerThread.java:85)
Caused by: androidx.media3.datasource.HttpDataSource$HttpDataSourceException
	at androidx.media3.datasource.DefaultHttpDataSource.skipFully(DefaultHttpDataSource.java:744)
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:455)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.TeeDataSource.open(TeeDataSource.java:54)
	at androidx.media3.datasource.cache.CacheDataSource.openNextSource(CacheDataSource.java:802)
	at androidx.media3.datasource.cache.CacheDataSource.open(CacheDataSource.java:615)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:88)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1109)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:453)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError HttpDataSourceException - PlaybackException 
Error Code: 2008. Erreur lors de la lecture de ce morceau.
{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":32},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2008,""extras"":{""mMap"":{}},""timestampMs"":2608084137,""cause"":{""dataSpec"":{""absoluteStreamPosition"":4816213,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""key"":""https://colonelinux.org/ampache/server/json.server.php?action\u003dstream\u0026stats\u003d0\u0026auth\u003d423f3d1135e38e88eb5c9362bcefb99d\u0026type\u003dsong\u0026id\u003d3963"",""length"":2574986,""position"":4816213,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2008,""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":744,""methodName"":""skipFully""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":455,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.TeeDataSource"",""fileName"":""TeeDataSource.java"",""lineNumber"":54,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.cache.CacheDataSource"",""fileName"":""CacheDataSource.java"",""lineNumber"":802,""methodName"":""openNextSource""},{""declaringClass"":""androidx.media3.datasource.cache.CacheDataSource"",""fileName"":""CacheDataSource.java"",""lineNumber"":615,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":88,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1109,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":453,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":864,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":836,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":103,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":249,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":337,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":85,""methodName"":""run""}]}
 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":32},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2008,""extras"":{""mMap"":{}},""timestampMs"":2608084137,""cause"":{""dataSpec"":{""absoluteStreamPosition"":4816213,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""key"":""https://colonelinux.org/ampache/server/json.server.php?action\u003dstream\u0026stats\u003d0\u0026auth\u003d423f3d1135e38e88eb5c9362bcefb99d\u0026type\u003dsong\u0026id\u003d3963"",""length"":2574986,""position"":4816213,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2008,""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":744,""methodName"":""skipFully""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":455,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.TeeDataSource"",""fileName"":""TeeDataSource.java"",""lineNumber"":54,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.cache.CacheDataSource"",""fileName"":""CacheDataSource.java"",""lineNumber"":802,""methodName"":""openNextSource""},{""declaringClass"":""androidx.media3.datasource.cache.CacheDataSource"",""fileName"":""CacheDataSource.java"",""lineNumber"":615,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":88,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1109,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":453,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":864,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":836,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":103,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":249,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":337,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":85,""methodName"":""run""}]}"
r4Aw0LV0,Create WP order,swte,PHP,Wednesday 14th of May 2025 09:34:30 AM CDT,"<?php
/**
 * Plugin Name: Stripe Sync Order
 * Description: REST API endpoint for creating and completing WooCommerce orders via Stripe webhook or other external service.
 * Version: 1.0
 * Author: T+GM Consulting
 */

// Register custom REST endpoint
add_action('rest_api_init', function () {
    register_rest_route('stripe-sync/v1', '/create-order', [
        'methods'  => 'POST',
        'callback' => 'stripe_sync_create_order',
        'permission_callback' => '__return_true', // Biztonság: majd érdemes lehet hitelesítést tenni rá
    ]);
});

function stripe_sync_create_order(WP_REST_Request $request) {
    $product_id = 123; // ← IDE írd be a termék ID-ját
    $user_id = 0; // 0 ha guest user
    $quantity = 1;

    // Dummy billing address
    $address = [
        'first_name' => 'Stripe',
        'last_name'  => 'User',
        'email'      => 'stripe@example.com',
        'phone'      => '06301234567',
        'address_1'  => 'Stripe Street 1',
        'city'       => 'Budapest',
        'postcode'   => '1111',
        'country'    => 'HU',
    ];

    try {
        $order = wc_create_order(['customer_id' => $user_id]);
        $product = wc_get_product($product_id);
        if (!$product) {
            return new WP_Error('invalid_product', 'A megadott termék nem létezik', ['status' => 400]);
        }

        $order->add_product($product, $quantity);
        $order->set_address($address, 'billing');
        $order->calculate_totals();
        $order->update_status('completed', 'Rendelés automatikusan lezárva Stripe-ból.');

        return [
            'success' => true,
            'order_id' => $order->get_id(),
            'status' => $order->get_status(),
        ];

    } catch (Exception $e) {
        return new WP_Error('order_creation_failed', $e->getMessage(), ['status' => 500]);
    }
}
"
JjiwTBjN,testevai,imagemdel,PowerShell,Wednesday 14th of May 2025 09:27:06 AM CDT,4Xw73xZAN344zP2xgEwKxyQaFxcM8IFA2TZBIdI70UlJ220FuUPzGl36Tg4UQtPgMk2uj0To0swa7un502492d6eE67BEF55ce79d742120f3E0f0c0775E556B5B3bbAFaaBABCDA3F263A25J8PE6ZEjHa
EFE7EUQk,vinee rp servers,vadim1290,JSON,Wednesday 14th of May 2025 08:46:36 AM CDT,"[
    {
      ""color"": ""FF0000"",
      ""dopname"": ""sandbot"",
      ""maxonline"": 50,
      ""name"": ""Red"",
      ""online"": 22,
      ""debi_host"": ""51.75.232.69"",
      ""debi_port"": 1909
    }
]
"
JDn7kUyS,Untitled,GibMeclay,MatLab,Wednesday 14th of May 2025 08:26:46 AM CDT,"close all ;
clear; clc;

%% Parametry systemu
frequencies = [865e6, 915e6];               % [Hz], podstawowe cz?stotliwo?ci
frequency_range = 800e6:5e6:1000e6;         % [Hz], zakres modelowania
rPwrMax = 8.8;                                % Maksymalny promie? [m] Zmierzone w modelu idealnym
r_values = [0.9, 0.7, 0.5] * rPwrMax;       % Promienie analizy
mode_tag_methods = {'real', 'ideal'};      % Dwie metody modelowania anteny taga

%% Parametry anteny czytnika
G0R_dBi = 7;                                % Maksymalny zysk [dBi]
HPBWR = 58;                                 % Half-Power Beamwidth [deg]

%% Parametry ogólne
C_chip = 0.63e-12;  % [F] pojemno?? chipa RFID
Rc = 14.5;        % [Ohm] rezystancja chipa
Za = 293;         % [Ohm] impedancja anteny (przyj?ta sta?a)
RC = 0.5;                                   % strata polaryzacyjna [dB]
Ptx_dBm = 30;                               % Moc nadajnika [dBm]
Pr_min_dBm = -21;                           % Czu?o?? taga [dBm]

%% Wczytanie danych z 4nec2 (charakterystyka promieniowania taga)

rawData = readtable('book3.csv', 'Delimiter', ';');
theta = rawData{:,1};
phi = rawData{:,2};
gain = rawData{:,3};
gain(gain < -100) = NaN;
valid = ~isnan(gain);
theta = theta(valid);
phi = phi(valid);
gain = gain(valid);
[uniquePairs, ia, ~] = unique([theta, phi], 'rows');
theta = uniquePairs(:,1);
phi = uniquePairs(:,2);
gain = gain(ia);
F_tag = scatteredInterpolant(theta, phi, gain, 'linear', 'nearest');

%% Funkcja anteny czytnika (modelowana)
readerPattern = @(theta, G0, HPBW) G0 - 3*(abs(theta)/HPBW).^(-log(0.5)/log(cosd(HPBWR/2)));
idealTagPattern = @(theta) 0;  % Model izotropowy (sta?y zysk 0 dBi)

%% Analiza i wykresy: PT(f) dla ró?nych r i metod

for m = 1:length(mode_tag_methods)
    method = mode_tag_methods{m};
    figure('Name', sprintf('Metoda: %s', method)); hold on;
    legends = {};

    for r = r_values
        PT = zeros(size(frequency_range));
        for i = 1:length(frequency_range)
            f = frequency_range(i);
            lambda = 3e8 / f;
            gain_reader = readerPattern(30, G0R_dBi, HPBWR);

            if strcmp(method, 'real')
                gain_tag = F_tag(90, -30);
            else
                gain_tag = idealTagPattern(0);
            end

            L = (4 * pi * r / lambda)^2;
            L_dB = 10 * log10(L);
          %% Obliczenie dopasowania impedancyjnego
Xc = 2 * pi * f * C_chip;
Zc = Rc + 1i * Xc;
Z_tag = Zc;
Z_chip = Zc;
ReZ_tag = real(Z_tag);
ReZ_chip = real(Z_chip);
ImZ_sum = imag(Z_tag + Z_chip);
ReZ_sum = real(Z_tag + Z_chip);
matching_loss = (4 * ReZ_tag * ReZ_chip) / (ReZ_sum^2 + ImZ_sum^2);

% Moc dostarczona z uwzgl?dnieniem odbicia
Pr_lin = 10^((Ptx_dBm + gain_reader + gain_tag - L_dB - RC)/10);
Pd_lin = Pr_lin * matching_loss;
PT(i) = 2*log10(Pd_lin);
        end
        plot(frequency_range/1e6, PT);
        legends{end+1} = sprintf('r = %.1f m', r);
    end

    xlabel('Cz?stotliwo?? [MHz]');
    ylabel('Moc dostarczona do taga [dBm]');
    title(sprintf('Charakterystyka PT(f) – metoda: %s', method));
    legend(legends, 'Location', 'best');
    grid on;
end

%% Mapa 2D mocy odbieranej Pr(x, y) dla f = 865 MHz
f_map = 865e6;
lambda = 3e8 / f_map;
range = -10:0.2:15;
[X, Y] = meshgrid(range, range);

for m = 1:length(mode_tag_methods)
    method = mode_tag_methods{m};
    Pr_map = zeros(size(X));

    for i = 1:size(X, 1)
        for j = 1:size(X, 2)
            x = X(i, j);
            y = Y(i, j);
            r = sqrt(x^2 + y^2);
            theta = atan2d(y, sqrt(x^2));
            theta = mod(theta + 360, 360);

            gain_reader = readerPattern(theta, G0R_dBi, HPBWR);
            if strcmp(method, 'real')
                gain_tag = F_tag(theta, -30);
            else
                gain_tag = idealTagPattern(theta);
            end

            L = (4 * pi * r / lambda)^2;
            L_dB = 10 * log10(L);
          %% Impedancyjne dopasowanie
Xc = 2 * pi * f_map * C_chip;
Zc = Rc + 1i * Xc;
Gamma = (Zc - Za) / (Zc + Za);
matching_loss = 1 - abs(Gamma)^2;

% Moc z uwzgl?dnieniem odbicia
Pr_lin = 10^((Ptx_dBm + gain_reader + gain_tag - L_dB - RC)/10);
Pd_lin = Pr_lin * matching_loss;
Pr_map(i, j) = 10 * log10(Pd_lin);
        end
    end

    figure;
    imagesc(range, range, Pr_map .* (Y >= 0));
    colormap('jet');         % lub 'parula', 'hot', 'turbo'
    caxis([-40 0]);          % ustalony zakres dBm
    hold on;
    [C, h] = contour(X, Y, Pr_map, [-21 -21], 'LineColor', 'k', 'LineWidth', 1.5);
    clabel(C, h, '-18 dBm');
    set(gca, 'YDir', 'normal');
    colorbar;
    title(sprintf('Mapa Pr(x,y) dla f = %.0f MHz, metoda: %s', f_map/1e6, method));
    xlabel('x [m]'); ylabel('y [m]');
end

%% Ocena poprawnej pracy dla f = 865, 915 MHz
theta_tag = 90;
phi_tag = -30;

fprintf('\n--- Ocena poprawnej pracy (f = 865, 915 MHz) ---\n');
for f = frequencies
    lambda = 3e8 / f;
    fprintf('\nCzestotliwosc: %.0f MHz\n', f/1e6);
    for r = r_values
        gain_reader = readerPattern(theta_tag, G0R_dBi, HPBWR);
        gain_tag = F_tag(theta_tag, phi_tag);
        L = (4 * pi * r / lambda)^2;
        L_dB = 10 * log10(L);
       %% Dopasowanie impedancji
Xc = 2 * pi * f * C_chip;
Zc = Rc + 1i * Xc;
Gamma = (Zc - Za) / (Zc + Za);
matching_loss = 1 - abs(Gamma)^2;
Pr_lin = 10^((Ptx_dBm + gain_reader + gain_tag - L_dB - RC)/10);
Pd_lin = Pr_lin * matching_loss;
Pr_dBm = 10 * log10(Pd_lin);
        status = 'NIE';
        if Pr_dBm >= Pr_min_dBm
            status = 'TAK';
        end
        fprintf('r = %.2f m, Pr = %.2f dBm, Poprawna praca: ''%s''\n', r, Pr_dBm, status);
    end
end
"
WPGDfuRH,2025-05-14T13:59:56.030629,powerampache,PHP,Wednesday 14th of May 2025 07:59:56 AM CDT,"1.01-80-play (80) - DB: 83
retrofit2.HttpException: HTTP 404 Not Found
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

"
giuFnq6z,Number Pyramid,Realratnadwip,C,Wednesday 14th of May 2025 07:20:12 AM CDT,"#include <stdio.h>

void main()
{
	int i, j, lim;
	printf(""Enter Limit: "");
	scanf(""%d"",&lim);

	i = 1;
	while (i <= lim)
	{
		j = 1;
		while (j <= i)
		{
			printf(""%d"",j);
			j++;
		}
		printf(""\n"");
		i++;
	}
}"
PZTXaQGP,Untitled,Ahmed_Negm,C++,Wednesday 14th of May 2025 07:15:53 AM CDT,"def classify_single_image(model, image_path):
    try:
        # Read and preprocess the image
        image = cv2.imread(image_path)
        if image is None:
            return None, ""Could not load image""
            
        # Make a copy for display
        display_image = copy.deepcopy(image)
        
        # Preprocess the image
        image = cv2.resize(image, (CONST.IMG_SIZE, CONST.IMG_SIZE))
        image = image.astype('float32') / 255.0  # Normalize to [0,1] range
        image = np.expand_dims(image, axis=0)  # Add batch dimension
        
        # Make prediction
        pred = model.predict(image, verbose=0)
        class_idx = np.argmax(pred, axis=1)[0]
        confidence = float(pred[0][class_idx])
        
        # Map prediction to class name
        class_names = {0: 'Cat', 1: 'Dog'}
        prediction = class_names[class_idx]
        
        # Add text to image
        font = cv2.FONT_HERSHEY_SIMPLEX
        location = (20, 30)
        fontScale = 0.8
        fontColor = (0, 255, 0)  # Green
        lineType = 2
        
        text = f""{prediction}: {confidence:.2%}""
        cv2.putText(display_image, text, location, font, fontScale, fontColor, lineType)
        
        # Save the annotated image
        output_path = ""prediction_result.jpg""
        cv2.imwrite(output_path, display_image)
        
        return prediction, confidence, output_path
        
    except Exception as e:
        return None, f""Error during classification: {str(e)}"""
s6QnjA8S,profile_details.css,horozov86,CSS,Wednesday 14th of May 2025 07:00:44 AM CDT,"html, body {
    height: 100%;
    margin: 0;
    padding: 0;
    font-family: sans-serif;
    background: linear-gradient(#141e30, #243b55);
    color: #fff;
}

/* Основен контейнер */
.info-section {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 400px;
    padding: 40px;
    transform: translate(-50%, -50%);
    background: rgba(0, 0, 0, 0.5);
    box-sizing: border-box;
    box-shadow: 0 15px 25px rgba(0, 0, 0, 0.6);
    border-radius: 10px;
}

/* Заглавие */
.info-section h1 {
    margin-bottom: 30px;
    text-align: center;
    font-size: 28px;
    color: #f4ec03;
}

/* Снимка на профила */
.profile-photo {
    text-align: center;
    margin-bottom: 20px;
}

.profile-photo img {
    width: 120px;
    height: 120px;
    border-radius: 50%;
    border: 3px solid #f4ec03;
    object-fit: cover;
}

/* Описание */
.description {
    font-size: 16px;
    margin-bottom: 10px;
    padding-left: 5px;
    border-left: 3px solid #f4ec03;
}

/* Бутони */
.buttons {
    margin-top: 30px;
    text-align: center;
    display: flex;
    justify-content: space-between;
}

.edit-button,
.delete-button {
    padding: 10px 20px;
    color: #f4ec03;
    font-size: 14px;
    text-decoration: none;
    text-transform: uppercase;
    border: 1px solid #f4ec03;
    border-radius: 5px;
    background: transparent;
    transition: all 0.3s ease;
    width: 45%;
    text-align: center;
}

.edit-button:hover,
.delete-button:hover {
    background-color: #f4ec03;
    color: #141e30;
    box-shadow: 0 0 10px #f4ec03;
}"
afrDJRDn,profile_details.html,horozov86,HTML 5,Wednesday 14th of May 2025 06:59:08 AM CDT,"
<!-- {% extends 'base.html' %} -->
<!-- {% load static %} -->

<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <title>Profile Details</title>
    <!-- <link rel=""stylesheet"" href=""{% static 'css/profile_details.css' %}""> -->
    <link rel=""stylesheet"" href=""css/profile_details.css""> <!-- Локален стил -->
</head>
<body>
    <div class=""info-section"">
        <h1>Profile Details</h1>

        <div class=""profile-photo"">
            <!-- {% if profile.profile_photo %} -->
            <!-- <img class=""car-img"" src=""{{ profile.profile_photo.url }}"" alt=""Profile Image"" /> -->
            <!-- {% else %} -->
            <img class=""car-img"" src=""images/default_profile_image.png"" alt=""Default Profile Image"" />
            <!-- {% endif %} -->
        </div>

        <!-- <p class=""description"">Email: {{ profile.user.email }}</p> -->
        <p class=""description"">First name: Georgi</p>
        
        <!-- <p class=""description"">Email: {{ profile.user.email }}</p> -->
        <p class=""description"">Last name: Horozov</p>
        
        <!-- <p class=""description"">Email: {{ profile.user.email }}</p> -->
        <p class=""description"">Age: 39</p>
        
        <!-- <p class=""description"">Email: {{ profile.user.email }}</p> -->
        <p class=""description"">Date of birth: 14-03-1986</p>
        
        <!-- <p class=""description"">Email: {{ profile.user.email }}</p> -->
        <p class=""description"">Country: Bulgaria</p>
        
        <!-- <p class=""description"">Email: {{ profile.user.email }}</p> -->
        <p class=""description"">City: Bulgaria</p>

        <!-- <p class=""description"">Address: {{ profile.address }}</p> -->
        <p class=""description"">Address: 123 Main Street, Sofia</p>

        <!-- Action Buttons -->
        <div class=""buttons"">
            <!-- <a href=""{% url 'profile_update' pk=object.pk %}"" class=""edit-button"">Edit</a> -->
            <!-- <a href=""{% url 'profile_delete' pk=object.pk %}"" class=""delete-button"">Delete</a> -->
            <a href=""#"" class=""edit-button"">Edit</a>
            <a href=""#"" class=""delete-button"">Delete</a>
        </div>
    </div>

    <!-- Optional Form for Additional Actions -->
    <!-- Optional Form for Additional Actions -->
<!--     <form method=""post"" enctype=""multipart/form-data"">
        {% csrf_token %}
        {{ form.as_p }}
    </form>
    {% endblock %} -->
</body>
</html>"
JBvVpkva,Download,Shiko5303,Lua,Wednesday 14th of May 2025 06:24:42 AM CDT,"    local choice = gg.choice({""Check current version Block Strike"", ""Back""}, nil, ""Chose:"")

    if choice == 1 then
        gg.sleep(1900)

        local versions = {""4391""}
        local links = {
            ""https://pastebin.com/raw/xyz123""
        }

        local versionChoice = gg.choice(versions, nil, ""Found: 1"")

        if versionChoice then
            local versionName = versions[versionChoice]
            local selectedLink = links[versionChoice]
            if gg.copyText then
                gg.copyText(selectedLink)
                gg.toast(""Link copied to clipboard."")
            end
            local filePath = ""/sdcard/Documents/Download"" .. versionName .. "".txt""
            local file = io.open(filePath, ""w"")
            if file then
                file:write(selectedLink)
                file:close()
            else
                gg.alert(""Failed to save file."")
            end
        else
            gg.toast(""No version selected."")
        end
    else
        gg.toast(""Back selected."")
    end"
mL1E1WvT,Untitled,dllbridge,C,Wednesday 14th of May 2025 06:18:21 AM CDT,"
#include   <iostream>
#include   <stdlib.h>
#include    <iomanip>
#include     <time.h>
using namespace  std;



const int B = 20, A = 20;
int foo(int* p);

/////////////////////////////////////////////////
int main()
{
    
	srand(time(0));
	int  array[B];
	int    mas[B];
	
	for(int i = 0; i < B; i++)
    {

		  mas[i] = rand() % 100 - 10;
		array[i] = rand() % 100 - 10;
		
		cout << "" "" << setw(3) << array[i] << ""   "" 
                    << setw(3) <<   mas[i] << endl;		
    }
    
	int v = foo(array);
	int g = foo(  mas);
	
	cout << "" array[i] ="" << v << endl;
	cout << ""   mas[i] ="" << g << endl;

	if(v < g)
	{
	//	cout << ""  foo(mas) = "" << foo(mas) << endl;
	//	if (g < foo(array))
	//	{
	//		cout << ""  foo(array)  =  "" << foo(array) << endl;
	//	}
		      cout << ""Win array"" << endl;
	}
	if(g < v) cout << ""Win   mas"" << endl;

	
/*           	cout << endl;
	for (int j = 0; j < B; j++) {

		mas[j] = rand() % 10;
		      
		cout << "" "" << mas[j];
	}*/
}


int foo(int* p)
{
	int i = 0;
	for (int i = 0; i < B; i++)
	{
		if (p[i] < 0)
		{
			return i;
		}
	
	}
	return -1;
 }
 
 
 
 "
4K1gQe1M,Computercraft Logging API,Pastebin_Paster,Lua,Wednesday 14th of May 2025 06:14:26 AM CDT,"--Variables
logFile = ""logFile.lua""
logShowProgram = false
logShowClearedMessage = true

logTimestampFormat = ""[%s]""
logDateTimeFormat = ""%F %R""
logProgramFormat = ""[%s]""
logClearedMessage = ""--LOG CLEARED--""
currentRunningProgram = nil

--Functions
function filePath(path) logFile = tostring(path) end
function setShowProgram(var) logShowProgram = var end
function setShowClearedMessage(setVar) logShowClearedMessage = setVar end
function setCurrentProgram(setvar) currentRunningProgram = setvar end
function setClearedMessage(message) logClearedMessage = tostring(message) end
function setProgramFormat(pFormat) logProgramFormat = pFormat end
function setTimestampFormat(tFormat) logTimestampFormat = tFormat end
function setDateTimeFormat(dFormat) logDateTimeFormat = dFormat end

function reset() 
    logFile = ""logFile.lua""
    logShowProgram = false
    logShowClearedMessage = true

    logTimestampFormat = ""[%s]""
    logDateTimeFormat = ""%F %R""
    logProgramFormat = ""[%s]""
    logClearedMessage = ""--LOG CLEARED--""
    currentRunningProgram = nil
end

function output(statement)
    timeString = string.format(logTimestampFormat, os.date(logDateTimeFormat))
    programString = string.format(logProgramFormat, currentRunningProgram)

    file = fs.open(logFile, ""a"")
    if logShowProgram == true then
        file.write(timeString..programString.."": ""..tostring(statement)..""\n"")
    else
        file.write(timeString.."": ""..tostring(statement)..""\n"")
    end
    file.close()
end

function clear()
    timeString = string.format(logTimestampFormat, os.date(logDateTimeFormat))
    programString = string.format(logProgramFormat, currentRunningProgram)

    file = fs.open(logFile, ""w"")
    if logShowProgram == true and logShowClearedMessage == true then
        file.write(timeString..programString.."": ""..tostring(logClearedMessage)..""\n"")
    elseif logShowClearedMessage == true then
        file.write(timeString.."": ""..tostring(logClearedMessage)..""\n"")
    end
    file.close()
end"
BHG1QfGh,dataNone,TestGuy1,JSON,Wednesday 14th of May 2025 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '22593c7cb4b8f16fd2082b5a5bc121935553edb6d79c1f86e1a8ca57eaabe12c595b1852e0ec234bb897d2f328c1c304ce90d8621b7b12b73c8b2fc7eac39dd1e2640c018e00748f105dadebb18c3be4f8e4d5e2ac62964d9679505785f56225e5ef723f8c2b5cd261b79e752304eda48a77d01d214079eab215795a71a0cb2b',
  otherdata: [
    '4222ba4eed021eb3ee923e0a56d82889',
    '5662c4fecfad82df142d03d1b3b29756',
    'a4bdd3c63dbf4a6ea2e6c340e15dd409',
    '4035c0cfe57e27b6f312d2c4f4fe51f7',
    '7f8a8b1cc21ecf053990d6afe4d9f0c2',
    '1fbe1cd468d8c92613fb4796dd9dbc45',
    '2592d825b579128450a79bedbfb7e468',
    'f8404ce887b8d72cf61fc1bbaeda8289'
  ]
}"
J6xvhn4K,kamera.ino,vitareinforce,Arduino,Wednesday 14th of May 2025 05:13:13 AM CDT,"#include ""esp_camera.h""
#include <WiFi.h>

// Pilih model kamera yang sesuai
#define CAMERA_MODEL_AI_THINKER // ESP32-CAM AI-THINKER dengan OV2640
#include ""camera_pins.h""

// WiFi credentials
const char* ssid = ""Megabot"";
const char* password = ""1234567890"";

void startCameraServer();

void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  Serial.println();

  // Konfigurasi kamera
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sccb_sda = SIOD_GPIO_NUM;
  config.pin_sccb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  // config.pixel_format = PIXFORMAT_JPEG; 
  config.pixel_format = PIXFORMAT_RGB565; 
  config.frame_size = FRAMESIZE_QVGA; // Resolusi lebih rendah untuk stabilitas awal
  config.jpeg_quality = 10; // 10 = kualitas medium, 12 = lebih tinggi
  config.fb_count = 1;

  // Inisialisasi kamera
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf(""❌ Kamera gagal diinisialisasi, error 0x%x\n"", err);
    return;
  }

  // Konfigurasi sensor kamera
  sensor_t *s = esp_camera_sensor_get();
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);  // Flip vertikal
    s->set_brightness(s, 1); // Tambah kecerahan
    s->set_saturation(s, -2); // Kurangi saturasi warna
  }

  // Setup WiFi
  WiFi.begin(ssid, password);
  WiFi.setSleep(false);
  Serial.print(""Menghubungkan ke WiFi"");
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(""."");
  }
  Serial.println(""\n✅ WiFi Terhubung!"");
  
  // Jalankan server kamera
  startCameraServer();
  
  Serial.print(""📷 Kamera Siap! Buka: http://"");
  Serial.print(WiFi.localIP());
  Serial.println(""/"");
}

void loop() {
  delay(10000); // Loop tidak perlu melakukan apa-apa, server berjalan sendiri
}
"
Ry8XXSEL,Untitled,kirzecy670,MySQL,Wednesday 14th of May 2025 05:01:32 AM CDT,"with 
event_counts AS (
    SELECT 
        ft.uid,
        ft.dt,
        CASE
            WHEN (deviceType = 2 AND appVersion % 2 = 0) THEN 'iOS_Parent'
            WHEN (deviceType = 1 AND appVersion % 2 = 1) THEN 'Android_Parent'
            WHEN (deviceType = 2 AND appVersion % 2 = 1) THEN 'iOS_Child'
            WHEN (deviceType = 1 AND appVersion % 2 = 0) THEN 'Android_Child'
            ELSE 'Unknown'
        END AS platform,
        had_any_payment,
        ft.dt >= pp.full_reg_datetime + interval '30' day as flg_30day_old_user,
        region,
        MAX(ft.action in ('open', 'open_parent_activity', 'open_parent_screen')) AS open,
        COUNT(ft.uid) FILTER (WHERE ft.action in ('open', 'open_parent_activity', 'open_parent_screen')) AS open_count,
        MAX(ft.action = 'feed_opened_full') AS is_feed_opened_full,
        COUNT(ft.uid) FILTER (WHERE ft.action = 'feed_opened_full') AS feed_opened_full_count,
        MAX(ft.action = 'open_function_records') AS is_open_function_records,
        COUNT(ft.uid) FILTER (WHERE ft.action = 'open_function_records') AS  open_records_count,
        MAX(ft.action = 'open_function_noise') AS is_open_function_noise,
        COUNT(ft.uid) FILTER (WHERE ft.action = 'open_function_noise') AS  open_noise_count,
        MAX(ft.action = 'open_function_zones') AS is_open_function_zones,
        COUNT(ft.uid) FILTER (WHERE ft.action = 'open_function_zones') AS  open_zones_count,
        MAX(ft.action = 'open_function_appstat') AS is_open_function_appstat,
        COUNT(ft.uid) FILTER (WHERE ft.action = 'open_function_appstat') AS  open_appstat_count,
        MAX(ft.action IN (
        'open_function_records',
        'open_function_noise',
        'open_function_zones',
        'open_function_appstat'
        )) AS is_any_feature_used
    FROM 
        stat.funnelTrack ft join analytics.parent_properties pp using uid
    WHERE ft.dt >= '2025-04-01'
      AND ft.action IN (
          'open', 'open_parent_activity', 'open_parent_screen',
          'feed_opened_full',
          'open_function_records', 'open_function_noise', 'open_function_zones', 
          'open_function_appstat'
      )
    GROUP BY 1, 2, 3, 4, 5, 6
)

SELECT
dt,
platform,
had_any_payment,
flg_30day_old_user,
region,
    uniq(uid) as total_users,  -- Debug: total users in event_counts
    uniqIf(uid, open) active_users,
    uniqIf(uid, is_any_feature_used) users_with_any_feature,
    uniqIf(uid, is_feed_opened_full) as users_feed_opened, 
    uniqIf(uid, is_open_function_records) as users_records,
    uniqIf(uid, is_open_function_appstat) as users_appstat,
    uniqIf(uid, is_open_function_zones) as users_zones,
    round(users_with_any_feature/active_users, 4) as use_any_feature
FROM event_counts
group by 1, 2, 3, 4, 5
ORDER BY dt"
PYrSeb82,Leetcode problem 4 (Hard) 6ms response 100%accepted,BojidarDosev,Java,Wednesday 14th of May 2025 04:44:25 AM CDT,"import java.util.*;

public class Main {
    public static double findMedianSortedArrays(int[] nums1, int[] nums2) {

        List<Integer> list = new ArrayList<>();
        for (int n : nums1) list.add(n);
        for (int n : nums2) list.add(n);
        Collections.sort(list);

        if(list.size()%2==0){
            return (double)(list.get(list.size()/2-1) + (double)list.get(list.size()/2)) /2;
        }
        else{
            return (double)list.get(list.size()/2);
        }

    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String[] ar1 = sc.nextLine().split("","");
        String[] ar2 = sc.nextLine().split("","");
        int[] nums1 = new int[ar1.length];
        int[] nums2 = new int[ar2.length];
        for (int i = 0; i < nums1.length; i++) {
            nums1[i] = Integer.parseInt(ar1[i]);
        }
        for (int i = 0; i < nums2.length; i++) {
            nums2[i] = Integer.parseInt(ar2[i]);
        }

        System.out.println(findMedianSortedArrays(nums1, nums2));
    }
}"
pKPbDfNG,2025-05-14T12:31:09.690,powerampache,PHP,Wednesday 14th of May 2025 04:31:10 AM CDT,"1.00-68 (68) - DB: 82
retrofit2.HttpException: HTTP 404 { ""exception"" : ""failed to connect to cloud.afanasko.spb.ru/188.134.10.217 (port 5040) from /10.239.124.115 (port 58432) after 15000ms"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:161)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:929)

getSongsFromAlbum() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""failed to connect to cloud.afanasko.spb.ru/188.134.10.217 (port 5040) from /10.239.124.115 (port 58432) after 15000ms\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""failed to connect to cloud.afanasko.spb.ru/188.134.10.217 (port 5040) from /10.239.124.115 (port 58432) after 15000ms\"" }"",""stackTrace"":[],""suppressedExceptions"":[]}"
XZris0Sv,Dungeon Heroes⚔️,new2479,Lua,Wednesday 14th of May 2025 03:16:26 AM CDT,"--https://www.youtube.com/@WinPo1R              pls sub 
--discord :      https://discord.gg/mdnJJYbjCh
--key :       Deepworksuper

loadstring(game:HttpGet(""https://raw.githubusercontent.com/powin273/script/refs/heads/main/Dungeon_Heroes.lua"", true))()"
nL8SRZB6,Asli theme: vertically center overlay menu items,artemsemkin,CSS,Wednesday 14th of May 2025 03:13:08 AM CDT,".menu-overlay {
  display: flex;
  flex-direction: column;
  justify-content: center;
}"
PYLjEY6x,2025-05-14T09:38:36.916993,powerampache,PHP,Wednesday 14th of May 2025 02:38:37 AM CDT,"1.01-80 (80) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""failed to connect to /192.168.88.7 (port 80) from /10.14.87.113 (port 46582) after 15000ms"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

scrobble() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""failed to connect to /192.168.88.7 (port 80) from /10.14.87.113 (port 46582) after 15000ms\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""failed to connect to /192.168.88.7 (port 80) from /10.14.87.113 (port 46582) after 15000ms\"" }"",""stackTrace"":[]}"
SFE0uURS,2025-05-14T09:38:15.986053,powerampache,PHP,Wednesday 14th of May 2025 02:38:16 AM CDT,"1.01-80 (80) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""failed to connect to /192.168.88.7 (port 80) from /10.14.87.113 (port 37808) after 15000ms"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

scrobble() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""failed to connect to /192.168.88.7 (port 80) from /10.14.87.113 (port 37808) after 15000ms\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""failed to connect to /192.168.88.7 (port 80) from /10.14.87.113 (port 37808) after 15000ms\"" }"",""stackTrace"":[]}"
1wpp2A2S,2025-05-14T09:37:40.291041,powerampache,PHP,Wednesday 14th of May 2025 02:37:40 AM CDT,"1.01-80 (80) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""failed to connect to /192.168.88.7 (port 80) from /10.14.87.113 (port 44666) after 15000ms"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

scrobble() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""failed to connect to /192.168.88.7 (port 80) from /10.14.87.113 (port 44666) after 15000ms\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""failed to connect to /192.168.88.7 (port 80) from /10.14.87.113 (port 44666) after 15000ms\"" }"",""stackTrace"":[]}"
1SeSL0Fq,2025-05-14T09:34:49.952994,powerampache,PHP,Wednesday 14th of May 2025 02:34:50 AM CDT,"1.01-80 (80) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""failed to connect to /192.168.88.7 (port 80) from /10.14.87.113 (port 41584) after 15000ms"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

scrobble() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""failed to connect to /192.168.88.7 (port 80) from /10.14.87.113 (port 41584) after 15000ms\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""failed to connect to /192.168.88.7 (port 80) from /10.14.87.113 (port 41584) after 15000ms\"" }"",""stackTrace"":[]}"
r39utqgJ,2025-05-14T09:34:45.127011,powerampache,PHP,Wednesday 14th of May 2025 02:34:46 AM CDT,"1.01-80 (80) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""failed to connect to /192.168.88.7 (port 80) from /10.14.87.113 (port 41246) after 15000ms"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
	at java.lang.Thread.run(Thread.java:1012)

getSongsFromAlbum() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""failed to connect to /192.168.88.7 (port 80) from /10.14.87.113 (port 41246) after 15000ms\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""failed to connect to /192.168.88.7 (port 80) from /10.14.87.113 (port 41246) after 15000ms\"" }"",""stackTrace"":[]}"
Bzh31QZr,GULIKHUB,Trollwor,Lua,Wednesday 14th of May 2025 02:17:18 AM CDT,"-- GulikHub Full GUI - Upgraded Template with Classic Features
-- Rebuilt by your overconfident AI rebel genius

local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")
local UserInputService = game:GetService(""UserInputService"")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild(""PlayerGui"")

-- ScreenGui setup
local screenGui = Instance.new(""ScreenGui"")
screenGui.Name = ""GulikHubUI""
screenGui.ResetOnSpawn = false
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
screenGui.Parent = PlayerGui

-- Main draggable frame
local mainFrame = Instance.new(""Frame"")
mainFrame.Name = ""MainFrame""
mainFrame.Size = UDim2.new(0.6, 0, 0.6, 0)
mainFrame.Position = UDim2.new(0.2, 0, 0.2, 0)
mainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
mainFrame.BorderSizePixel = 0
mainFrame.Active = true
mainFrame.Draggable = true
mainFrame.Parent = screenGui

-- Title label
local titleLabel = Instance.new(""TextLabel"")
titleLabel.Size = UDim2.new(1, 0, 0.1, 0)
titleLabel.Position = UDim2.new(0, 0, 0, 0)
titleLabel.Text = ""GulikHub UI""
titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
titleLabel.BackgroundColor3 = Color3.fromRGB(80, 0, 150)
titleLabel.Font = Enum.Font.GothamBold
titleLabel.TextSize = 22
titleLabel.Parent = mainFrame

-- Status Label (for prints/warns)
local statusLabel = Instance.new(""TextLabel"")
statusLabel.Size = UDim2.new(1, 0, 0.05, 0)
statusLabel.Position = UDim2.new(0, 0, 0.9, 0)
statusLabel.Text = ""Status: Ready""
statusLabel.TextColor3 = Color3.fromRGB(200, 200, 0)
statusLabel.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
statusLabel.Font = Enum.Font.Code
statusLabel.TextSize = 16
statusLabel.Parent = mainFrame

-- FPS label
local fpsLabel = Instance.new(""TextLabel"")
fpsLabel.Size = UDim2.new(0.3, 0, 0.05, 0)
fpsLabel.Position = UDim2.new(0.7, 0, 0.95, 0)
fpsLabel.Text = ""FPS: 0""
fpsLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
fpsLabel.BackgroundTransparency = 1
fpsLabel.Font = Enum.Font.Code
fpsLabel.TextSize = 16
fpsLabel.Parent = mainFrame

-- RightShift toggle
local guiVisible = true
UserInputService.InputBegan:Connect(function(input, processed)
    if not processed and input.KeyCode == Enum.KeyCode.RightShift then
        guiVisible = not guiVisible
        screenGui.Enabled = guiVisible
        statusLabel.Text = ""Status: UI "" .. (guiVisible and ""Shown"" or ""Hidden"")
    end
end)

-- FPS counter logic
local lastTime = tick()
local frames = 0
RunService.RenderStepped:Connect(function()
    frames += 1
    if tick() - lastTime >= 1 then
        fpsLabel.Text = ""FPS: "" .. frames
        frames = 0
        lastTime = tick()
    end
end)

-- Language switcher basic (EN, RU, UA)
local currentLang = ""EN""
local function switchLanguage(lang)
    currentLang = lang
    if lang == ""EN"" then
        titleLabel.Text = ""GulikHub UI""
        statusLabel.Text = ""Status: Ready""
    elseif lang == ""RU"" then
        titleLabel.Text = ""ГуликХаб Интерфейс""
        statusLabel.Text = ""Статус: Готово""
    elseif lang == ""UA"" then
        titleLabel.Text = ""ГулікХаб Інтерфейс""
        statusLabel.Text = ""Статус: Готово""
    end
end

-- Language buttons
local languages = {""EN"", ""RU"", ""UA""}
for i, lang in ipairs(languages) do
    local button = Instance.new(""TextButton"")
    button.Size = UDim2.new(0.3, 0, 0.07, 0)
    button.Position = UDim2.new(0.05 + (i - 1) * 0.32, 0, 0.12, 0)
    button.Text = lang
    button.BackgroundColor3 = Color3.fromRGB(50, 50, 100)
    button.TextColor3 = Color3.new(1, 1, 1)
    button.Font = Enum.Font.Gotham
    button.TextSize = 16
    button.Parent = mainFrame
    button.MouseButton1Click:Connect(function()
        switchLanguage(lang)
    end)
end

-- Password checker (""opensesame"")
local passwordBox = Instance.new(""TextBox"")
passwordBox.Size = UDim2.new(0.6, 0, 0.08, 0)
passwordBox.Position = UDim2.new(0.2, 0, 0.21, 0)
passwordBox.PlaceholderText = ""Enter Password""
passwordBox.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
passwordBox.TextColor3 = Color3.new(1, 1, 1)
passwordBox.Font = Enum.Font.Code
passwordBox.TextSize = 18
passwordBox.Parent = mainFrame

passwordBox.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        if passwordBox.Text == ""opensesame"" then
            statusLabel.Text = ""Access Granted""
        else
            statusLabel.Text = ""Access Denied""
        end
    end
end)

-- Add more features like: Script Hub, Executor, Themes, Dock System
-- Modular, mobile-friendly, and rebellious. Expand it and rule!
"
PPHucRx4,stress test rmq,vitareinforce,Python,Wednesday 14th of May 2025 01:49:21 AM CDT,"import pika
import sys
import time
import keyboard  # Import the keyboard library

def connect_and_publish(client_id, user, password, host, queue_name):
    """"""Connect to RabbitMQ and publish messages with client ID set in connection properties.""""""
    credentials = pika.PlainCredentials(user, password)
    parameters = pika.ConnectionParameters(
        host=host,
        credentials=credentials,
        client_properties={
            'connection_name': client_id
        }
    )

    connection = None
    for i in range(5):
        try:
            connection = pika.BlockingConnection(parameters)
            print(f""Connected to RabbitMQ with client ID '{client_id}'"")
            break
        except pika.exceptions.AMQPConnectionError:
            print(f""Connection failed, retrying in 5 seconds... ({i+1}/5)"")
            time.sleep(5)
    else:
        print(""Failed to connect to RabbitMQ after 5 attempts."")
        sys.exit(1)

    channel = connection.channel()

    # Declare queue to publish to
    channel.queue_declare(queue=queue_name, durable=False)

    print(""Press 'Esc' to stop publishing messages."")

    # Loop to publish messages until 'Esc' is pressed
    while True:
        if keyboard.is_pressed('esc'):  # Check if 'Esc' key is pressed
            print(""Escape key pressed. Stopping the publisher."")
            break

        # Create a message
        message = f""Hello RabbitMQ! This is a test message from client_id {client_id}.""
        
        # Publish message
        channel.basic_publish(
            exchange='amq.topic',
            routing_key=queue_name,
            body=message,
            properties=pika.BasicProperties(
                delivery_mode=2,  # Persistent message
            )
        )

        print(f""Published message to queue '{queue_name}': {message}"")
        time.sleep(1)  # Sleep for a second before publishing the next message

    # Close connection
    connection.close()
    print(""Connection closed."")

if __name__ == ""__main__"":
    # Configuration
    CLIENT_ID = ""punclut516""
    USERNAME = ""camera""
    PASSWORD = ""camera""
    HOST = ""localhost""
    QUEUE_NAME = ""camera""

    connect_and_publish(CLIENT_ID, USERNAME, PASSWORD, HOST, QUEUE_NAME)
"
j9pGgBya,RBLX. GunDamage,Hasli4,Lua,Wednesday 14th of May 2025 01:37:37 AM CDT,"local bullet = script.Parent

local function player_check(otherPart)
local humanoid = otherPart.Parent:FindFirstChild('Humanoid')
if humanoid then
humanoid:TakeDamage(10)
local player = game.Players:FindFirstChild(humanoid.Parent.Name)
if player and humanoid.parent.name ~= bullet.Attacker.Value then
local tag = player:FindFirstChild('Killer')
if tag then
tag.Value = bullet.Attacker.Value
end
end
bullet:Destroy()
end
end

bullet.Touched:Connect(player_check)
"
RNup8yPf,rich text richtext flutter,muhaiminurabir,Dart,Wednesday 14th of May 2025 01:26:30 AM CDT,"              RichText(
                text: TextSpan(
                  style: GoogleFonts.poppins(
                    fontSize: 14,
                    fontWeight: FontWeight.w400,
                    color: ProjectColors.black4,
                  ),
                  children: [
                    TextSpan(text: ""We have sent an ""),
                    TextSpan(
                      text: ""OTP "",
                      style: GoogleFonts.poppins(
                        fontSize: 14,
                        fontWeight: FontWeight.w700,
                        color: ProjectColors.black4,
                      ),
                        recognizer: TapGestureRecognizer()..onTap = () =>Log().showMessageToast(message: ""paisi""),

                    ),
                    TextSpan(text: ""to the following email address""),
                  ],
                ),
              ),
"
0SZpHguY,RBLX. KingOfTheHill,Hasli4,Lua,Wednesday 14th of May 2025 12:42:33 AM CDT,"local Players = game:GetService(""Players"")

local Hill = script.Parent
local Label = Hill.BillboardGui.TextLabel
local king_name = Hill.KingName
local fall_distance = Hill.Size.Magnitude
print(""fall_distance:"", fall_distance)
local kingdown = true
local position1 = Hill.Position

local function onTouch(part)
    if (kingdown) then
        kingdown = false
        king_name.Value = part.Parent.Name
        Label.Text = ""Да здравствует король ""..king_name.Value..""!""
        local KING = part.Parent.Humanoid
        local player = Players:GetPlayerFromCharacter(part.Parent)
        local leaderstats = player.leaderstats
        local crowns = leaderstats and 
                       leaderstats:FindFirstChild(""Crowns"")
   local tool_to_destroy = player.Backpack:FindFirstChild(""Tool"")
   if tool_to_destroy then
      tool_to_destroy:Destroy()
   end
   tool_to_destroy = KING.Parent:FindFirstChild(""Tool"")
   if tool_to_destroy then
      tool_to_destroy:Destroy()
   end

   while true do
      wait(1)
      KING.BodyDepthScale.Value += 0.06
      KING.HeadScale.Value += 0.04
      KING.BodyWidthScale.Value += 0.04
      KING.BodyHeightScale.Value += 0.01
      KING.WalkSpeed *=0.99
      crowns.Value += 1
      local position2 = part.Position	
      local distance = (position1 - position2).magnitude
local position2 = part.Position	
local distance = (position1 - position2).magnitude
if distance > fall_distance then
	king_name.Value = """"
	Label.Text = ""Король пал!""
	KING.BodyDepthScale.Value = 1
	KING.HeadScale.Value = 1
	KING.BodyWidthScale.Value = 1
	KING.BodyHeightScale.Value = 1
	KING.WalkSpeed = 16
	kingdown = true
	local return_tool = game.ReplicatedStorage.Tool:Clone()
	return_tool.Parent = KING.Parent
	break
end

"
6F0dtZMw,Minecraft Turtle Dig,xPucTu4,Lua,Tuesday 13th of May 2025 11:38:25 PM CDT,"local tunnelLength = 50 -- <<< EDIT THIS for tunnel length!

function fuelLevel()
 if turtle.getFuelLevel() < 1000 then
  turtle.select(1)
  turtle.refuel(8)
  print(""Refueled"")
 end
end

function mine()
 while turtle.detect() do
  turtle.dig()
  sleep(0.5)
 end
 turtle.forward()

 for h = 1, height - 1 do
  if turtle.detectUp() then
   turtle.digUp()
   sleep(0.5)
  end
  turtle.up()
 end

 turtle.digDown()

 for h = 1, height - 1 do
  turtle.down()
 end
end

print(""Place fuel in slot 1!"")
print(""How wide will the tunnel be?"")
local x = tonumber(read())
print(""How high will the tunnel be?"")
height = tonumber(read())

while true do
 for i = 1, tunnelLength do
  fuelLevel()
  mine()
  turtle.turnLeft()
  for j = 1, math.floor(x / 2) do
   mine()
  end
  turtle.turnLeft()
  turtle.turnLeft()
  for j = 1, x - 1 do
   mine()
  end
  turtle.turnLeft()
  turtle.turnLeft()
  for j = 1, math.floor(x / 2) do
   turtle.forward()
  end
  turtle.turnRight()
 end

 -- Return to start
 turtle.turnLeft()
 turtle.turnLeft()
 for i = 1, tunnelLength do
  turtle.forward()
 end
 turtle.turnLeft()
 turtle.turnLeft()
end
"
