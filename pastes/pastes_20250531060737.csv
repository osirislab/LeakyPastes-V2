id,title,username,language,date,content
MzM4M0Zt,Make 2000$ in 15 minutes [WORKED] 37,cc_uncrowned,Java,Saturday 31st of May 2025 12:56:43 AM CDT," 
>EBOOK<
CURRENT>https://www.dropbox.com/scl/fi/4e2z07jv1v6rsganifo2e/ebook.pdf?rlkey=t4mllp8ph0b4beuwnnx52ms84&st=hj3ruffr&dl=0

yHwtFc"
yWcGTyM2,GaG Script,padhi,Lua,Saturday 31st of May 2025 12:55:41 AM CDT,"--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_Welcome to LuaObfuscator.com   (Alpha 0.10.9) ~  Much Love, Ferib 

]]--

local v0=game:GetService(""Players"");local v1=v0.LocalPlayer;local function v2() local v3=1795 -(208 + 1587) ;local v4;local v5;local v6;while true do if (v3==0) then v4=10;v5=0.1 + 0 ;v3=569 -(367 + 201) ;end if (v3==(928 -(214 + 713))) then v6="""";for v7=1 + 0 ,v4 do local v8=0 + 0 ;while true do if (v8==0) then v6=""[""   .. string.rep(""="",v7)   .. string.rep("" "",v4-v7 )   .. ""]"" ;if rconsoleclear then pcall(rconsoleclear);end v8=1;end if (v8==(878 -(282 + 595))) then print(""Natmen Hub Autentification ""   .. v6 );wait(v5);break;end end end v3=1639 -(1523 + 114) ;end if (v3==(2 + 0)) then wait(0.5 -0 );v1:Kick(""I'am Trolling Dumb People"");break;end end end v2();"
12hV6Ku2,P2U - NIGHTREIGN,Hokzii,HTML,Saturday 31st of May 2025 12:53:57 AM CDT,"<link rel=""stylesheet"" type=""text/css"" href=""https://dl.dropbox.com/scl/fi/9xhw6tuqhgwnw6xbtny8h/P2U-NIGHTREIGN.css?rlkey=fl0xkp0dxe515q2ihbvufbzd7&st=wsmntt6r&dl=0"">
<div class=""firefly""></div><div class=""firefly""></div><div class=""firefly""></div><div class=""firefly""></div><div class=""firefly""></div><div class=""firefly""></div><div class=""firefly""></div><div class=""firefly""></div><div class=""firefly""></div><div class=""firefly""></div>

<table width=""90%"" class=""Main-BG""><tbody><tr><td class=""Main-Links"" colspan=""2""><a href=""URL"">Link 1</a>  |  <a href=""URL"">Link 2</a> | <a href=""URL"">Link 3</a> </td></tr><tr><td class=""Main-Spacer""></td><td align=""center""><div class=""Main-Content""><h3>Header 1</h3>
CONTENT
   
 <h3>Header 2</h3>
Content

<a href=""https://www.lioden.com/territory.php?id=139"">HTML Credit - Punny</a></div>"
aB5gEFEK,FREE 500$ GIFTCARDS-[Works Worldwide] 0Y,cc_uncrowned,Java,Saturday 31st of May 2025 12:35:10 AM CDT," 
>EBOOK<
CURRENT>https://www.dropbox.com/scl/fi/4e2z07jv1v6rsganifo2e/ebook.pdf?rlkey=t4mllp8ph0b4beuwnnx52ms84&st=hj3ruffr&dl=0

M73oKC"
3QnvFs0C,Make 2500$ in 1 day [Method],cc_uncrowned,Java,Saturday 31st of May 2025 12:25:09 AM CDT," 
>EBOOK<
CURRENT>https://www.dropbox.com/scl/fi/4e2z07jv1v6rsganifo2e/ebook.pdf?rlkey=t4mllp8ph0b4beuwnnx52ms84&st=hj3ruffr&dl=0

4tbfco"
7hndPgMe,2025-05-31T07:15:53.197380,powerampache,PHP,Saturday 31st of May 2025 12:15:53 AM CDT,"1.01-80-play (80) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.MusicException: {""errorAction"":""handshake"",""errorCode"":""4701"",""errorMessage"":""Invalid Login - passphrase does not match"",""errorType"":""system""}
	at luci.sixsixsix.powerampache2.data.MusicRepositoryImpl.tryAuthorize(MusicRepositoryImpl.kt:268)
	at luci.sixsixsix.powerampache2.data.MusicRepositoryImpl.access$tryAuthorize(MusicRepositoryImpl.kt:83)
	at luci.sixsixsix.powerampache2.data.MusicRepositoryImpl$tryAuthorize$1.invokeSuspend(Unknown Source:18)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:959)
	at android.os.Handler.dispatchMessage(Handler.java:100)
	at android.os.Looper.loopOnce(Looper.java:249)
	at android.os.Looper.loop(Looper.java:337)
	at android.app.ActivityThread.main(ActivityThread.java:9403)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:614)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1005)

authorize() - {""errorAction"":""handshake"",""errorCode"":""4701"",""errorMessage"":""Invalid Login - passphrase does not match"",""errorType"":""system""}"
V1BTHuHm,Get anything for FREE 87,cc_uncrowned,Java,Saturday 31st of May 2025 12:15:09 AM CDT," 
>EBOOK<
CURRENT>https://www.dropbox.com/scl/fi/4e2z07jv1v6rsganifo2e/ebook.pdf?rlkey=t4mllp8ph0b4beuwnnx52ms84&st=hj3ruffr&dl=0

L5TxYa"
xMCZrxc8,Grow a garden,new2479,Lua,Friday 30th of May 2025 11:07:14 PM CDT,"--https://www.youtube.com/@WinPo1R              pls sub 
--discord :      https://discord.gg/mdnJJYbjCh
 
 
loadstring(game:HttpGet(""https://raw.githubusercontent.com/powin273/script/refs/heads/main/grow_a_garden.lua"", true))()"
qD5mRJFN,Regex-RandomImageST,Cpt_Haddock,JSON,Friday 30th of May 2025 10:37:27 PM CDT,"{
    ""id"": ""aa0cd123-9f9f-4b04-b8f7-0f3524e48372"",
    ""scriptName"": ""regex randomImage"",
    ""findRegex"": ""/^/ig"",
    ""replaceString"": ""<img style=\""max-height:720px;padding:10px;height:auto;float:left;\"" src=\""https://st.pekka.me/images/lily1/{{roll:d441}}.webp\"">\n"",
    ""trimStrings"": [],
    ""placement"": [
        2
    ],
    ""disabled"": false,
    ""markdownOnly"": true,
    ""promptOnly"": false,
    ""runOnEdit"": true,
    ""substituteRegex"": 0,
    ""minDepth"": null,
    ""maxDepth"": 2
}"
CYc0UR9M,spatialHelperInstaller,Myros27,Lua,Friday 30th of May 2025 09:33:45 PM CDT,"fs.makeDir(""startup"")
shell.setDir(""startup"")
shell.run(""pastebin get U5AXp7RX spatialHelperBot"")
os.reboot()"
0K6eQv7c,Luna X V2,TeleToon,Lua,Friday 30th of May 2025 09:31:48 PM CDT,"-- Fixed Update Luna X v2
-- GUI Script Executor with draggable cat icon

local UserInputService = game:GetService(""UserInputService"")
local RunService = game:GetService(""RunService"")

-- Create main screen GUI
local screenGui = Instance.new(""ScreenGui"")
screenGui.Name = ""FixedUpdateLunaXv2""
screenGui.ResetOnSpawn = false
screenGui.Parent = game:GetService(""Players"").LocalPlayer:WaitForChild(""PlayerGui"")

-- Create draggable cat icon button
local catIcon = Instance.new(""ImageButton"")
catIcon.Name = ""CatIcon""
catIcon.Size = UDim2.new(0, 60, 0, 60)
catIcon.Position = UDim2.new(0, 20, 0, 20)
catIcon.BackgroundTransparency = 1
catIcon.Image = ""rbxassetid://6023426915"" -- Cat icon image
catIcon.Parent = screenGui

catIcon.Active = true
catIcon.Draggable = true

-- Create Script Editor Frame
local editorFrame = Instance.new(""Frame"")
editorFrame.Name = ""ScriptEditor""
editorFrame.Size = UDim2.new(0, 400, 0, 300)
editorFrame.Position = UDim2.new(0.5, -200, 0.5, -150) -- center screen
editorFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
editorFrame.BorderSizePixel = 0
editorFrame.Visible = false
editorFrame.Parent = screenGui

-- Create UI corner for rounded edges
local uiCorner = Instance.new(""UICorner"")
uiCorner.CornerRadius = UDim.new(0,12)
uiCorner.Parent = editorFrame

-- Title label
local titleLabel = Instance.new(""TextLabel"")
titleLabel.Text = ""Fixed Update Luna X v2""
titleLabel.Size = UDim2.new(1, 0, 0, 40)
titleLabel.BackgroundTransparency = 1
titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
titleLabel.Font = Enum.Font.GothamBold
titleLabel.TextSize = 26
titleLabel.Parent = editorFrame

-- Close button
local closeButton = Instance.new(""TextButton"")
closeButton.Text = ""X""
closeButton.Size = UDim2.new(0, 30, 0, 30)
closeButton.Position = UDim2.new(1, -35, 0, 5)
closeButton.BackgroundColor3 = Color3.fromRGB(180, 50, 50)
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.Font = Enum.Font.GothamBold
closeButton.TextSize = 20
closeButton.Parent = editorFrame

local closeUICorner = Instance.new(""UICorner"")
closeUICorner.CornerRadius = UDim.new(0, 5)
closeUICorner.Parent = closeButton

-- TextBox for script input
local scriptBox = Instance.new(""TextBox"")
scriptBox.ClearTextOnFocus = false
scriptBox.MultiLine = true
scriptBox.PlaceholderText = ""Paste your Lua script here...""
scriptBox.Size = UDim2.new(1, -40, 1, -110)
scriptBox.Position = UDim2.new(0, 20, 0, 50)
scriptBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
scriptBox.TextColor3 = Color3.fromRGB(220, 220, 220)
scriptBox.Font = Enum.Font.Code
scriptBox.TextSize = 18
scriptBox.Parent = editorFrame

local scriptBoxCorner = Instance.new(""UICorner"")
scriptBoxCorner.CornerRadius = UDim.new(0, 8)
scriptBoxCorner.Parent = scriptBox

-- Execute button
local executeButton = Instance.new(""TextButton"")
executeButton.Text = ""Execute""
executeButton.Size = UDim2.new(0, 100, 0, 35)
executeButton.Position = UDim2.new(1, -120, 1, -45)
executeButton.BackgroundColor3 = Color3.fromRGB(40, 150, 40)
executeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
executeButton.Font = Enum.Font.GothamBold
executeButton.TextSize = 20
executeButton.Parent = editorFrame

local executeUICorner = Instance.new(""UICorner"")
executeUICorner.CornerRadius = UDim.new(0, 8)
executeUICorner.Parent = executeButton

-- Frame to display the executed script output
local outputFrame = Instance.new(""Frame"")
outputFrame.Name = ""OutputFrame""
outputFrame.Size = UDim2.new(0, 400, 0, 150)
outputFrame.Position = UDim2.new(0.5, -200, 0.5, 160) -- below editor
outputFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
outputFrame.BorderSizePixel = 0
outputFrame.Visible = false
outputFrame.Parent = screenGui

local outputCorner = Instance.new(""UICorner"")
outputCorner.CornerRadius = UDim.new(0, 12)
outputCorner.Parent = outputFrame

local outputLabel = Instance.new(""TextLabel"")
outputLabel.Name = ""OutputLabel""
outputLabel.Text = ""Executed script output will appear here (printed or GUI created by script)""
outputLabel.Size = UDim2.new(1, -20, 1, -20)
outputLabel.Position = UDim2.new(0, 10, 0, 10)
outputLabel.BackgroundTransparency = 1
outputLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
outputLabel.TextWrapped = true
outputLabel.Font = Enum.Font.Code
outputLabel.TextSize = 16
outputLabel.Parent = outputFrame

-- Persistent variable to save last script
local lastScript = nil

-- Function to show editor
local function openEditor()
    editorFrame.Visible = true
    outputFrame.Visible = lastScript ~= nil
end

-- Function to hide editor
local function closeEditor()
    editorFrame.Visible = false
end

-- Clicking cat icon toggles editor visibility
catIcon.MouseButton1Click:Connect(function()
    if editorFrame.Visible then
        closeEditor()
    else
        openEditor()
        -- Refill the script box with last script if any
        if lastScript then
            scriptBox.Text = lastScript
        else
            scriptBox.Text = """"
        end
    end
end)

-- Close button closes editor
closeButton.MouseButton1Click:Connect(function()
    closeEditor()
end)

-- Helper function to run user script safely
local function runUserScript(code)
    local func, err = loadstring(code)
    if not func then
        warn(""Script compilation error: "" .. err)
        outputLabel.Text = ""Error compiling script: "" .. err
        outputFrame.Visible = true
        return
    end
    local success, runtimeErr = pcall(func)
    if not success then
        warn(""Script runtime error: "" .. runtimeErr)
        outputLabel.Text = ""Error running script: "" .. runtimeErr
        outputFrame.Visible = true
        return
    end
    outputLabel.Text = ""Script executed successfully."" ..
        ""\nIf your script creates GUI elements or prints, they will appear now.""
    outputFrame.Visible = true
end

-- Execute button action
executeButton.MouseButton1Click:Connect(function()
    local scriptText = scriptBox.Text
    if scriptText == """" or not scriptText then
        outputLabel.Text = ""Please enter a script before executing.""
        outputFrame.Visible = true
        return
    end
    lastScript = scriptText
    runUserScript(scriptText)
end)

-- Initially only the cat icon shown
closeEditor()
"
qccdWwjL,Luna X V2 Executor Pro,TeleToon,Lua,Friday 30th of May 2025 09:21:43 PM CDT,"-- Customizable Variables
local BACKGROUND_COLOR = Color3.fromRGB(40, 40, 40) -- Color of the script editor background
local TEXT_COLOR = Color3.fromRGB(255, 255, 255) -- Color of the text inside the script editor
local FONT_SIZE = 14 -- Size of the font in the script editor
local BUTTON_COLOR = Color3.fromRGB(60, 60, 60) -- Color of the buttons
local BUTTON_TEXT_COLOR = Color3.fromRGB(200, 200, 200) -- Color of the text on the buttons
local TITLE_BAR_COLOR = Color3.fromRGB(30, 30, 30) -- Color of the title bar
local TITLE_TEXT_COLOR = Color3.fromRGB(255, 255, 255) -- Color of the title text
local ICON_SIZE = 32 -- Size of the Luna Cat icon (pixels)
local TITLE_BAR_HEIGHT = 30 -- Height of the title bar (pixels)
local TAB_HEIGHT = 25 -- Height of each tab
local TAB_COLOR = Color3.fromRGB(50, 50, 50)
local TAB_TEXT_COLOR = Color3.fromRGB(220, 220, 220)
local SELECTED_TAB_COLOR = Color3.fromRGB(70, 70, 70)
local SELECTED_TAB_TEXT_COLOR = Color3.fromRGB(255, 255, 255)

-- Services
local Players = game:GetService(""Players"")
local UserInputService = game:GetService(""UserInputService"")

-- Local Player
local localPlayer = Players.LocalPlayer
local playerGui = localPlayer:WaitForChild(""PlayerGui"")

-- Main GUI Creation
local screenGui = Instance.new(""ScreenGui"")
screenGui.Name = ""ScriptEditorGUI""
screenGui.Parent = playerGui
screenGui.ResetOnSpawn = false

local mainFrame = Instance.new(""Frame"")
mainFrame.Name = ""MainFrame""
mainFrame.Size = UDim2.new(0.5, 0, 0.5, 0)
mainFrame.Position = UDim2.new(0.25, 0, 0.25, 0)
mainFrame.BackgroundColor3 = BACKGROUND_COLOR
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui
mainFrame.Active = true -- Important for draggable
mainFrame.Draggable = true -- Make the GUI draggable

-- Title Bar
local titleBar = Instance.new(""Frame"")
titleBar.Name = ""TitleBar""
titleBar.Size = UDim2.new(1, 0, 0, TITLE_BAR_HEIGHT)
titleBar.Position = UDim2.new(0, 0, 0, 0)
titleBar.BackgroundColor3 = TITLE_BAR_COLOR
titleBar.BorderSizePixel = 0
titleBar.Parent = mainFrame
titleBar.Active = true -- Required for draggable functionality
titleBar.Draggable = true -- Make the title bar draggable

local titleLabel = Instance.new(""TextLabel"")
titleLabel.Name = ""TitleLabel""
titleLabel.Size = UDim2.new(0.8, 0, 1, 0)
titleLabel.Position = UDim2.new(0, 0, 0, 0)
titleLabel.BackgroundColor3 = titleBar.BackgroundColor3
titleLabel.TextColor3 = TITLE_TEXT_COLOR
titleLabel.Text = ""Script Editor""
titleLabel.Font = Enum.Font.SourceSansBold
titleLabel.TextSize = 16
titleLabel.TextXAlignment = Enum.TextXAlignment.Left
titleLabel.Parent = titleBar

-- Close Button
local closeButton = Instance.new(""TextButton"")
closeButton.Name = ""CloseButton""
closeButton.Size = UDim2.new(0, TITLE_BAR_HEIGHT, 1, 0)
closeButton.Position = UDim2.new(1, -TITLE_BAR_HEIGHT, 0, 0)
closeButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.Text = ""X""
closeButton.Font = Enum.Font.SourceSansBold
closeButton.TextSize = 16
closeButton.Parent = titleBar

closeButton.MouseButton1Click:Connect(function()
	screenGui:Destroy()
end)

-- Tabs Frame
local tabsFrame = Instance.new(""Frame"")
tabsFrame.Name = ""TabsFrame""
tabsFrame.Size = UDim2.new(1, 0, 0, TAB_HEIGHT)
tabsFrame.Position = UDim2.new(0, 0, 0, TITLE_BAR_HEIGHT)
tabsFrame.BackgroundColor3 = BACKGROUND_COLOR
tabsFrame.BorderSizePixel = 0
tabsFrame.Parent = mainFrame

-- Script Editor Text Box
local scriptTextBox = Instance.new(""TextBox"")
scriptTextBox.Name = ""ScriptTextBox""
scriptTextBox.Size = UDim2.new(1, 0, 1, -TITLE_BAR_HEIGHT - TAB_HEIGHT)
scriptTextBox.Position = UDim2.new(0, 0, 0, TITLE_BAR_HEIGHT + TAB_HEIGHT)
scriptTextBox.BackgroundColor3 = BACKGROUND_COLOR
scriptTextBox.TextColor3 = TEXT_COLOR
scriptTextBox.Font = Enum.Font.SourceSans
scriptTextBox.TextSize = FONT_SIZE
scriptTextBox.TextXAlignment = Enum.TextXAlignment.Left
scriptTextBox.TextYAlignment = Enum.TextYAlignment.Top
scriptTextBox.MultiLine = true
scriptTextBox.Parent = mainFrame
scriptTextBox.ClearTextOnFocus = false

-- Luna Cat Icon (Button to Re-open Editor)
local lunaCatButton = Instance.new(""ImageButton"")
lunaCatButton.Name = ""LunaCatButton""
lunaCatButton.Size = UDim2.new(0, ICON_SIZE, 0, ICON_SIZE)
lunaCatButton.Position = UDim2.new(0.9, 0, 0.9, 0) -- Bottom right corner
lunaCatButton.BackgroundTransparency = 1.0
lunaCatButton.Image = ""rbxassetid://1169249271"" -- Replace with your Luna Cat image asset ID
lunaCatButton.Visible = false -- Initially hidden
lunaCatButton.Parent = playerGui

lunaCatButton.MouseButton1Click:Connect(function()
	screenGui.Enabled = true	lunaCatButton.Visible = false
end)

-- Minimize Functionality
local function minimizeEditor()
	screenGui.Enabled = false	-- Hide the main GUI
	lunaCatButton.Visible = true -- Show the Luna Cat icon
end

-- Example Tab (you can add more dynamically)
local tabButton = Instance.new(""TextButton"")
tabButton.Name = ""Tab1""
tabButton.Size = UDim2.new(0, 100, 1, 0)
tabButton.Position = UDim2.new(0, 0, 0, 0)
tabButton.BackgroundColor3 = SELECTED_TAB_COLOR -- Start as selected
tabButton.TextColor3 = SELECTED_TAB_TEXT_COLOR
tabButton.Text = ""Script 1""
tabButton.Font = Enum.Font.SourceSansBold
tabButton.TextSize = 14
tabButton.Parent = tabsFrame

local currentlySelectedTab = tabButton

-- Sample 'Ask AI' Button (Placeholder - functionality not implemented)
local askAIButton = Instance.new(""TextButton"")
askAIButton.Name = ""AskAIButton""
askAIButton.Size = UDim2.new(0, 80, 0, 20)
askAIButton.Position = UDim2.new(1, -85, 0, 5)
askAIButton.BackgroundColor3 = BUTTON_COLOR
askAIButton.TextColor3 = BUTTON_TEXT_COLOR
askAIButton.Text = ""Ask AI""
askAIButton.Font = Enum.Font.SourceSansBold
askAIButton.TextSize = 12
askAIButton.Parent = titleBar

-- Add a function to minimize the editor when close button is clicked
closeButton.MouseButton1Click:Connect(minimizeEditor)

-- Function to Create a new Tab
local function createTab(tabName)
	local newTabButton = Instance.new(""TextButton"")
	newTabButton.Name = tabName
	newTabButton.Size = UDim2.new(0, 100, 1, 0)
	newTabButton.BackgroundColor3 = TAB_COLOR
	newTabButton.TextColor3 = TAB_TEXT_COLOR
	newTabButton.Text = tabName
	newTabButton.Font = Enum.Font.SourceSansBold
	newTabButton.TextSize = 14	--[[
	--Calculate Position for the new tab.
	local tabsCount = #tabsFrame:GetChildren()
	newTabButton.Position = UDim2.new(0, (tabsCount - 1) * 100, 0, 0)--]]

	-- Reposition existing tabs	local tabCount = 0	for i, tab in pairs(tabsFrame:GetChildren()) do		if tab:IsA(""TextButton"") then			tab.Position = UDim2.new(0, tabCount * 100, 0, 0)			tabCount = tabCount + 1		end	end
	newTabButton.Position = UDim2.new(0, tabCount * 100, 0, 0)
	newTabButton.Parent = tabsFrame

	-- Deselect the current tab	if currentlySelectedTab then		currentlySelectedTab.BackgroundColor3 = TAB_COLOR		currentlySelectedTab.TextColor3 = TAB_TEXT_COLOR	end
	
	-- Select the new tab	currentlySelectedTab = newTabButton	currentlySelectedTab.BackgroundColor3 = SELECTED_TAB_COLOR	currentlySelectedTab.TextColor3 = SELECTED_TAB_TEXT_COLOR	
	-- Connect the event to switch the script on the new tab	newTabButton.MouseButton1Click:Connect(function()		if currentlySelectedTab then			currentlySelectedTab.BackgroundColor3 = TAB_COLOR			currentlySelectedTab.TextColor3 = TAB_TEXT_COLOR		end		currentlySelectedTab = newTabButton		currentlySelectedTab.BackgroundColor3 = SELECTED_TAB_COLOR		currentlySelectedTab.TextColor3 = SELECTED_TAB_TEXT_COLOR		-- Load script of the clicked tab here.	end)

	return newTabButton
end

-- Example on how to create a tab, you can execute it when the script is running.
--local newTab = createTab(""New Script"")

print(""Script Editor GUI initialized."")
"
4H3YLwZW,Luna X Pro Infinty,TeleToon,Lua,Friday 30th of May 2025 09:17:25 PM CDT,"-- Customizable Variables
local BACKGROUND_COLOR = Color3.fromRGB(40, 40, 40) -- Background color of the script editor
local TEXT_COLOR = Color3.fromRGB(255, 255, 255) -- Text color in the script editor
local FONT_SIZE = 14 -- Font size of the text
local FONT = Enum.Font.SourceSansBold -- Font of the text
local BUTTON_COLOR = Color3.fromRGB(60, 60, 60) -- Color of the buttons
local BUTTON_HOVER_COLOR = Color3.fromRGB(80, 80, 80) -- Hover color of the buttons
local BUTTON_TEXT_COLOR = Color3.fromRGB(255, 255, 255) -- Text color on the buttons
local ICON_SIZE = 32 -- Size of the Luna cat icon (pixels)
local DRAG_SPEED = 0.1 -- Speed at which the GUI is dragged

--// Services
local Players = game:GetService(""Players"")
local GuiService = game:GetService(""GuiService"")

--// Variables
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild(""PlayerGui"")

--// UI Elements
local ScriptEditor = Instance.new(""ScreenGui"")
ScriptEditor.Name = ""ScriptEditor""
ScriptEditor.Parent = PlayerGui
ScriptEditor.ResetOnSpawn = false

local MainFrame = Instance.new(""Frame"")
MainFrame.Name = ""MainFrame""
MainFrame.Size = UDim2.new(0.5, 0, 0.5, 0)
MainFrame.Position = UDim2.new(0.25, 0, 0.25, 0)
MainFrame.BackgroundColor3 = BACKGROUND_COLOR
MainFrame.Parent = ScriptEditor
MainFrame.Draggable = true

local TitleBar = Instance.new(""Frame"")
TitleBar.Name = ""TitleBar""
TitleBar.Size = UDim2.new(1, 0, 0.1, 0)
TitleBar.BackgroundColor3 = BUTTON_COLOR
TitleBar.Parent = MainFrame

local TitleLabel = Instance.new(""TextLabel"")
TitleLabel.Name = ""TitleLabel""
TitleLabel.Size = UDim2.new(0.8, 0, 1, 0)
TitleLabel.Position = UDim2.new(0.1, 0, 0, 0)
TitleLabel.BackgroundColor3 = nil
TitleLabel.BackgroundTransparency = 1
TitleLabel.TextColor3 = TEXT_COLOR
TitleLabel.Font = FONT
TitleLabel.TextSize = FONT_SIZE
TitleLabel.Text = ""Script Editor""
TitleLabel.Parent = TitleBar
TitleLabel.TextXAlignment = Enum.TextXAlignment.Left

local CloseButton = Instance.new(""TextButton"")
CloseButton.Name = ""CloseButton""
CloseButton.Size = UDim2.new(0.1, 0, 1, 0)
CloseButton.Position = UDim2.new(0.9, 0, 0, 0)
CloseButton.BackgroundColor3 = BUTTON_COLOR
CloseButton.TextColor3 = BUTTON_TEXT_COLOR
CloseButton.Font = FONT
CloseButton.TextSize = FONT_SIZE
CloseButton.Text = ""X""
CloseButton.Parent = TitleBar

CloseButton.MouseButton1Click:Connect(function()
	ScriptEditor.Enabled = false
	LunaCatIcon.Visible = true -- Show Luna Cat Icon when closing
end)

CloseButton.MouseEnter:Connect(function()
	CloseButton.BackgroundColor3 = BUTTON_HOVER_COLOR
end)

CloseButton.MouseLeave:Connect(function()
	CloseButton.BackgroundColor3 = BUTTON_COLOR
end)

local ScriptTextBox = Instance.new(""TextBox"")
ScriptTextBox.Name = ""ScriptTextBox""
ScriptTextBox.Size = UDim2.new(0.9, 0, 0.7, 0)
ScriptTextBox.Position = UDim2.new(0.05, 0, 0.15, 0)
ScriptTextBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
ScriptTextBox.TextColor3 = TEXT_COLOR
ScriptTextBox.Font = FONT
ScriptTextBox.TextSize = FONT_SIZE
ScriptTextBox.Text = ""-- Your Script Here""
ScriptTextBox.Parent = MainFrame
ScriptTextBox.MultiLine = true
ScriptTextBox.ClearTextOnFocus = false

local ExecuteButton = Instance.new(""TextButton"")
ExecuteButton.Name = ""ExecuteButton""
ExecuteButton.Size = UDim2.new(0.3, 0, 0.1, 0)
ExecuteButton.Position = UDim2.new(0.35, 0, 0.87, 0)
ExecuteButton.BackgroundColor3 = BUTTON_COLOR
ExecuteButton.TextColor3 = BUTTON_TEXT_COLOR
ExecuteButton.Font = FONT
ExecuteButton.TextSize = FONT_SIZE
ExecuteButton.Text = ""Execute""
ExecuteButton.Parent = MainFrame

ExecuteButton.MouseEnter:Connect(function()
	ExecuteButton.BackgroundColor3 = BUTTON_HOVER_COLOR
end)

ExecuteButton.MouseLeave:Connect(function()
	ExecuteButton.BackgroundColor3 = BUTTON_COLOR
end)

ExecuteButton.MouseButton1Click:Connect(function()
	-- Execute the script in the text box
	local scriptToExecute = ScriptTextBox.Text
	local env = {script = script, game = game, workspace = workspace, require = require, print = print, warn = warn, tick = tick, wait = wait, delay = delay, spawn = spawn}
	local func = loadstring(scriptToExecute)
	
	if func then
		setfenv(func, env)
		pcall(func)
	end
end)


-- Luna Cat Icon
local LunaCatIcon = Instance.new(""ImageButton"")
LunaCatIcon.Name = ""LunaCatIcon""
LunaCatIcon.Size = UDim2.new(0, ICON_SIZE, 0, ICON_SIZE)
LunaCatIcon.Position = UDim2.new(0.02, 0, 0.02, 0)
LunaCatIcon.BackgroundTransparency = 1
LunaCatIcon.Image = ""rbxassetid://6627783583"" -- Replace with your Luna cat image asset ID
LunaCatIcon.Parent = PlayerGui

LunaCatIcon.MouseButton1Click:Connect(function()
	ScriptEditor.Enabled = true
	LunaCatIcon.Visible = false -- Hide Luna Cat Icon when editor opens
end)

-- Initially hide the Script Editor and show Luna Cat Icon
ScriptEditor.Enabled = false
LunaCatIcon.Visible = true

-- Make LunaCatIcon Draggable
local dragging = nil
local dragInput = nil
local dragStart = nil

LunaCatIcon.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
		dragStart = input.Position
		dragInput = input
	end
end)

LunaCatIcon.InputChanged:Connect(function(input)
	if input == dragInput and dragging then
		local delta = input.Position - dragStart
		local pos = UDim2.new(
			LunaCatIcon.Position.X.Scale, 
			LunaCatIcon.Position.X.Offset + delta.X,
			LunaCatIcon.Position.Y.Scale, 
			LunaCatIcon.Position.Y.Offset + delta.Y
		)
		LunaCatIcon.Position = pos
	end
end)

LunaCatIcon.InputEnded:Connect(function(input)
	if input == dragInput then
		dragging = false
		dragInput = nil
	end
end)"
fspHWLfh,Luna X Executor Allowed In All Executor,TeleToon,Lua,Friday 30th of May 2025 08:35:53 PM CDT,"-- Customizable Variables
local BACKGROUND_COLOR = Color3.fromRGB(40, 40, 40) -- Background color of the script editor
local TEXT_COLOR = Color3.fromRGB(220, 220, 220) -- Text color for the script
local BUTTON_COLOR = Color3.fromRGB(60, 60, 60) -- Button color
local BUTTON_HOVER_COLOR = Color3.fromRGB(80, 80, 80) -- Button hover color
local BUTTON_TEXT_COLOR = Color3.fromRGB(255, 255, 255) -- Button text color
local FONT_SIZE = 14 -- Font size for text in the editor
local WINDOW_TITLE = ""Script Executor"" -- Title of the script editor window
local TITLE_BAR_HEIGHT = 30 -- Height of the title bar
local CAT_IMAGE_ID = ""rbxassetid://14387318715"" -- Asset ID of the Luna cat image
local WINDOW_WIDTH = 600 -- Width of the script editor window
local WINDOW_HEIGHT = 400 -- Height of the script editor window

local scriptEditorGui = nil -- Holds the script editor GUI

-- Function to create a draggable window
local function createDraggableWindow(title, width, height)
 local screenGui = Instance.new(""ScreenGui"")
 screenGui.ResetOnSpawn = false
 screenGui.Name = ""ScriptEditorGUI""

 local frame = Instance.new(""Frame"")
 frame.Size = UDim2.new(0, width, 0, height)
 frame.BackgroundTransparency = 1
 frame.BackgroundColor3 = BACKGROUND_COLOR
 frame.Position = UDim2.new(0.5, -width / 2, 0.5, -height / 2) -- Center the window
 frame.BorderSizePixel = 0
 frame.Active = true -- Needed for draggable functionality
 frame.Draggable = true -- Enable dragging

 local titleBar = Instance.new(""Frame"")
 titleBar.Size = UDim2.new(1, 0, 0, TITLE_BAR_HEIGHT)
 titleBar.Position = UDim2.new(0, 0, 0, 0)
 titleBar.BackgroundColor3 = BUTTON_COLOR
 titleBar.BorderSizePixel = 0

 local titleLabel = Instance.new(""TextLabel"")
 titleLabel.Size = UDim2.new(0.8, 0, 1, 0)
 titleLabel.Position = UDim2.new(0, 0, 0, 0)
 titleLabel.BackgroundColor3 = BUTTON_COLOR
 titleLabel.TextColor3 = BUTTON_TEXT_COLOR
 titleLabel.Text = title
 titleLabel.Font = Enum.Font.SourceSans
 titleLabel.TextSize = FONT_SIZE
 titleLabel.TextXAlignment = Enum.TextXAlignment.Left
 titleLabel.BorderSizePixel = 0

 local closeButton = Instance.new(""TextButton"")
 closeButton.Size = UDim2.new(0.2, 0, 1, 0)
 closeButton.Position = UDim2.new(0.8, 0, 0, 0)
 closeButton.BackgroundColor3 = BUTTON_COLOR
 closeButton.TextColor3 = BUTTON_TEXT_COLOR
 closeButton.Text = ""X""
 closeButton.Font = Enum.Font.SourceSans
 closeButton.TextSize = FONT_SIZE
 closeButton.BorderSizePixel = 0
 closeButton.AutoButtonColor = false

 closeButton.MouseEnter:Connect(function()
 closeButton.BackgroundColor3 = BUTTON_HOVER_COLOR
 end)

 closeButton.MouseLeave:Connect(function()
 closeButton.BackgroundColor3 = BUTTON_COLOR
 end)

 closeButton.MouseButton1Click:Connect(function()
 screenGui:Destroy()
 scriptEditorGui = nil -- Clear the reference when closed
 end)

 local textBox = Instance.new(""TextBox"")
 textBox.Size = UDim2.new(1, -4, 1, -TITLE_BAR_HEIGHT - 4)
 textBox.Position = UDim2.new(0, 2, 0, TITLE_BAR_HEIGHT + 2)
 textBox.BackgroundColor3 = BACKGROUND_COLOR
 textBox.TextColor3 = TEXT_COLOR
 textBox.Font = Enum.Font.SourceSans
 textBox.TextSize = FONT_SIZE
 textBox.MultiLine = true
 textBox.BorderSizePixel = 0

 local executeButton = Instance.new(""TextButton"")
 executeButton.Size = UDim2.new(0.2, 0, 0, TITLE_BAR_HEIGHT)
 executeButton.Position = UDim2.new(0.8, -4, 1, -TITLE_BAR_HEIGHT -4)
 executeButton.AnchorPoint = Vector2.new(1,1)
 executeButton.BackgroundColor3 = BUTTON_COLOR
 executeButton.TextColor3 = BUTTON_TEXT_COLOR
 executeButton.Text = ""Execute""
 executeButton.Font = Enum.Font.SourceSans
 executeButton.TextSize = FONT_SIZE
 executeButton.BorderSizePixel = 0
 executeButton.AutoButtonColor = false

 executeButton.MouseEnter:Connect(function()
 executeButton.BackgroundColor3 = BUTTON_HOVER_COLOR
 end)

 executeButton.MouseLeave:Connect(function()
 executeButton.BackgroundColor3 = BUTTON_COLOR
 end)

 executeButton.MouseButton1Click:Connect(function()
 local scriptToExecute = textBox.Text

 -- Attempt to execute the script in a protected environment
 local function protectedCall()
 local success, result = pcall(function()
 local env = setmetatable({},
 {__index = _G,
 __newindex = function(table, key, value)
 if key == ""plugin"" then
 return -- Prevent access to 'plugin'
 end
 rawset(table, key, value)
 end
 })

 local execute = loadstring(scriptToExecute, ""ScriptExecutor"")
 if execute then
 setfenv(execute, env)
 execute()
 end
 end)

 if not success then
 warn(""Execution Error: "", result)
 end
 end

 protectedCall()
 end)

 closeButton.Parent = titleBar
 titleLabel.Parent = titleBar
 titleBar.Parent = frame
 textBox.Parent = frame
 executeButton.Parent = frame
 frame.Parent = screenGui
 screenGui.Parent = game.CoreGui -- Ensures it renders above other GUIs, crucial for exploits

 return screenGui
end

-- Function to create the cat icon
local function createCatIcon()
 local screenGui = Instance.new(""ScreenGui"")
 screenGui.ResetOnSpawn = false
 screenGui.Name = ""CatIconGUI""

 local imageButton = Instance.new(""ImageButton"")
 imageButton.Size = UDim2.new(0, 50, 0, 50)
 imageButton.Position = UDim2.new(0.05, 0, 0.05, 0)
 imageButton.BackgroundTransparency = 1
 imageButton.Image = CAT_IMAGE_ID
 imageButton.BorderSizePixel = 0

 imageButton.MouseButton1Click:Connect(function()
 if not scriptEditorGui then
 scriptEditorGui = createDraggableWindow(WINDOW_TITLE, WINDOW_WIDTH, WINDOW_HEIGHT)
 else
 if not scriptEditorGui.Parent then -- Check if GUI was parented to nil (destroyed)
 scriptEditorGui = createDraggableWindow(WINDOW_TITLE, WINDOW_WIDTH, WINDOW_HEIGHT)
 else
 scriptEditorGui.Enabled = true -- Make sure its enabled if exists
 end
 end
 end)

 imageButton.Parent = screenGui
 screenGui.Parent = game.CoreGui
end

-- Initialize the script editor
createCatIcon()
"
XAScggec,2025-05-31T02:26:49.107898,powerampache,PHP,Friday 30th of May 2025 07:26:48 PM CDT,"1.01-78 (78) - DB: 83
retrofit2.HttpException: HTTP 502 
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1156)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:651)
	at java.lang.Thread.run(Thread.java:1119)

"
aS0d1xUc,2025-05-29_stats.json,rdp_snitch,JSON,Friday 30th of May 2025 07:18:22 PM CDT,"{
  ""ip"": {
    ""165.232.170.129"": 24966,
    ""128.199.168.88"": 5115,
    ""143.198.221.164"": 528,
    ""157.245.159.1"": 291,
    ""71.82.170.60"": 21,
    ""91.238.181.27"": 6,
    ""37.19.195.67"": 3,
    ""103.144.2.187"": 6,
    ""80.94.95.198"": 45,
    ""87.249.133.77"": 3,
    ""103.150.221.39"": 15,
    ""111.170.152.113"": 3,
    ""157.245.150.219"": 18,
    ""91.238.181.26"": 18,
    ""92.63.197.197"": 12,
    ""123.103.219.78"": 45,
    ""198.235.24.207"": 9,
    ""128.1.32.99"": 3,
    ""211.198.76.235"": 3,
    ""71.6.134.230"": 30,
    ""138.68.188.52"": 3,
    ""167.94.146.50"": 3,
    ""167.172.153.78"": 6,
    ""92.63.197.23"": 24,
    ""80.94.95.203"": 3,
    ""178.163.63.217"": 3,
    ""212.147.209.72"": 6,
    ""45.134.26.14"": 3,
    ""205.210.31.39"": 9,
    ""71.6.135.131"": 15,
    ""185.226.197.7"": 18,
    ""212.56.53.17"": 12,
    ""194.165.16.166"": 6,
    ""134.122.51.9"": 72,
    ""194.165.16.164"": 6,
    ""68.183.179.179"": 3,
    ""205.210.31.218"": 9,
    ""165.154.138.107"": 3,
    ""146.190.89.207"": 27,
    ""47.236.145.243"": 3,
    ""147.185.132.102"": 9,
    ""147.185.133.35"": 12,
    ""167.94.145.107"": 3
  },
  ""asn"": {
    ""AS14061"": 31029,
    ""AS20115"": 21,
    ""AS49434"": 24,
    ""AS212238"": 6,
    ""AS138152"": 6,
    ""AS204428"": 48,
    ""AS140599"": 15,
    ""AS151185"": 3,
    ""AS210848"": 36,
    ""AS4826"": 45,
    ""AS396982"": 48,
    ""AS135377"": 6,
    ""AS4766"": 3,
    ""AS10439"": 45,
    ""AS398705"": 6,
    ""AS8416"": 3,
    ""AS50837"": 6,
    ""AS198953"": 3,
    ""AS21859"": 18,
    ""AS4213"": 12,
    ""AS48721"": 12,
    ""AS45102"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 31029,
    ""Charter Communications"": 21,
    ""Datacenter location PAR1 France"": 24,
    ""Datacamp Limited"": 6,
    ""Yisu Cloud LTD"": 6,
    ""SS-Net"": 48,
    ""Comfac Corporation"": 15,
    ""China Telecom"": 3,
    ""Telkom Internet LTD"": 36,
    ""Vocus PTY LTD"": 45,
    ""Google LLC"": 48,
    ""Zenlayer Inc"": 21,
    ""Korea Telecom"": 3,
    ""CariNet, Inc."": 45,
    ""Censys, Inc."": 6,
    ""Infoline networks"": 3,
    ""CLOUDSIGMA AG"": 6,
    ""Proton66 OOO"": 3,
    ""Krypt Technologies"": 12,
    ""Flyservers S.A."": 12,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Alibaba (US) Technology Co., Ltd."": 3
  },
  ""org"": {
    ""DigitalOcean, LLC"": 31029,
    ""Spectrum"": 21,
    ""ThinkTech Technology Industrial CO. Limited"": 24,
    ""Cdnext VIE"": 3,
    ""XINRUIDE INTERNET CO, .LIMITED"": 6,
    ""Unmanaged LTD"": 48,
    ""Datacamp Limited"": 3,
    ""Comfac Corporation"": 15,
    ""Chinanet HB"": 3,
    ""Korotkij Denis Aleksandrovich"": 36,
    ""Vocus Communications"": 45,
    ""Palo Alto Networks, Inc"": 48,
    ""UCLOUD"": 3,
    ""KORNET"": 3,
    ""CariNet, Inc."": 45,
    ""Censys, Inc."": 6,
    ""Unknown"": 3,
    ""ServeCentric Ltd"": 6,
    ""Proton66 LLC"": 3,
    ""ICG 4 ZEN AMS"": 18,
    ""VPN Consumer Los Angeles, United States"": 12,
    ""Flyservers S.A"": 12,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Alibaba Cloud LLC"": 3
  },
  ""regionName"": {
    ""South West"": 30948,
    ""Wisconsin"": 21,
    ""\u00cele-de-France"": 24,
    ""Vienna"": 6,
    ""Yau Tsim Mong"": 6,
    ""Sofia-Capital"": 48,
    ""Davao Region"": 15,
    ""Hubei"": 3,
    ""North Holland"": 126,
    ""Western Australia"": 45,
    ""California"": 75,
    ""Kaohsiung"": 3,
    ""Gyeonggi-do"": 3,
    ""Nevada"": 30,
    ""England"": 3,
    ""Hesse"": 6,
    ""New Jersey"": 6,
    ""Samara Oblast"": 3,
    ""Leinster"": 6,
    ""St.-Petersburg"": 3,
    ""Kaunas"": 12,
    ""North West"": 3,
    ""Michigan"": 3
  },
  ""country"": {
    ""Singapore"": 30951,
    ""United States"": 135,
    ""France"": 24,
    ""Austria"": 6,
    ""Hong Kong"": 6,
    ""Bulgaria"": 48,
    ""Philippines"": 15,
    ""China"": 3,
    ""The Netherlands"": 126,
    ""Australia"": 45,
    ""Taiwan"": 3,
    ""South Korea"": 3,
    ""United Kingdom"": 3,
    ""Germany"": 6,
    ""Russia"": 6,
    ""Ireland"": 6,
    ""Lithuania"": 12
  },
  ""account"": {
    ""hello"": 31065,
    ""142.93.8.59"": 129,
    ""Test"": 33,
    ""Domain"": 18,
    ""fWoXUOlNE"": 3,
    ""GFsklj"": 3,
    ""dNlOyD"": 3,
    ""Administrator"": 6,
    ""eltons"": 15,
    ""administr"": 15,
    ""(empty)"": 6,
    ""Administr"": 30,
    ""OGEvxaHKh"": 3,
    ""jJrVJT"": 3,
    ""pjvhBH"": 3,
    ""root"": 33,
    ""UKBtFxqPD"": 3,
    ""RtHlCt"": 3,
    ""gWTNNi"": 3,
    ""DFzAWdtPU"": 3,
    ""DTlWOn"": 3,
    ""PVRsgn"": 3,
    ""yhDxyQONx"": 6,
    ""nmap"": 3,
    ""naap"": 3
  },
  ""keyboard"": {
    ""Unknown"": 31398
  },
  ""client_build"": {
    ""Unknown"": 31398
  },
  ""client_name"": {
    ""Unknown"": 31398
  },
  ""ip_type"": {
    ""hosting"": 31176,
    ""Unknown"": 201,
    ""hosting & proxy"": 21
  }
}"
95JAv8Uc,2025-05-29_stats.json,rdp_snitch,JSON,Friday 30th of May 2025 07:16:08 PM CDT,"{
  ""ip"": {
    ""165.232.170.129"": 24965,
    ""128.199.168.88"": 5115,
    ""143.198.221.164"": 528,
    ""157.245.159.1"": 291,
    ""71.82.170.60"": 21,
    ""91.238.181.27"": 6,
    ""37.19.195.67"": 3,
    ""103.144.2.187"": 6,
    ""80.94.95.198"": 45,
    ""87.249.133.77"": 3,
    ""103.150.221.39"": 15,
    ""111.170.152.113"": 3,
    ""157.245.150.219"": 18,
    ""91.238.181.26"": 18,
    ""92.63.197.197"": 12,
    ""123.103.219.78"": 45,
    ""198.235.24.207"": 9,
    ""128.1.32.99"": 3,
    ""211.198.76.235"": 3,
    ""71.6.134.230"": 30,
    ""138.68.188.52"": 3,
    ""167.94.146.50"": 3,
    ""167.172.153.78"": 6,
    ""92.63.197.23"": 24,
    ""80.94.95.203"": 3,
    ""178.163.63.217"": 3,
    ""212.147.209.72"": 6,
    ""45.134.26.14"": 3,
    ""205.210.31.39"": 9,
    ""71.6.135.131"": 15,
    ""185.226.197.7"": 18,
    ""212.56.53.17"": 12,
    ""194.165.16.166"": 6,
    ""134.122.51.9"": 72,
    ""194.165.16.164"": 6,
    ""68.183.179.179"": 3,
    ""205.210.31.218"": 9,
    ""165.154.138.107"": 3,
    ""146.190.89.207"": 27,
    ""47.236.145.243"": 3,
    ""147.185.132.102"": 9,
    ""147.185.133.35"": 12,
    ""167.94.145.107"": 3
  },
  ""asn"": {
    ""AS14061"": 31028,
    ""AS20115"": 21,
    ""AS49434"": 24,
    ""AS212238"": 6,
    ""AS138152"": 6,
    ""AS204428"": 48,
    ""AS140599"": 15,
    ""AS151185"": 3,
    ""AS210848"": 36,
    ""AS4826"": 45,
    ""AS396982"": 48,
    ""AS135377"": 6,
    ""AS4766"": 3,
    ""AS10439"": 45,
    ""AS398705"": 6,
    ""AS8416"": 3,
    ""AS50837"": 6,
    ""AS198953"": 3,
    ""AS21859"": 18,
    ""AS4213"": 12,
    ""AS48721"": 12,
    ""AS45102"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 31028,
    ""Charter Communications"": 21,
    ""Datacenter location PAR1 France"": 24,
    ""Datacamp Limited"": 6,
    ""Yisu Cloud LTD"": 6,
    ""SS-Net"": 48,
    ""Comfac Corporation"": 15,
    ""China Telecom"": 3,
    ""Telkom Internet LTD"": 36,
    ""Vocus PTY LTD"": 45,
    ""Google LLC"": 48,
    ""Zenlayer Inc"": 21,
    ""Korea Telecom"": 3,
    ""CariNet, Inc."": 45,
    ""Censys, Inc."": 6,
    ""Infoline networks"": 3,
    ""CLOUDSIGMA AG"": 6,
    ""Proton66 OOO"": 3,
    ""Krypt Technologies"": 12,
    ""Flyservers S.A."": 12,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Alibaba (US) Technology Co., Ltd."": 3
  },
  ""org"": {
    ""DigitalOcean, LLC"": 31028,
    ""Spectrum"": 21,
    ""ThinkTech Technology Industrial CO. Limited"": 24,
    ""Cdnext VIE"": 3,
    ""XINRUIDE INTERNET CO, .LIMITED"": 6,
    ""Unmanaged LTD"": 48,
    ""Datacamp Limited"": 3,
    ""Comfac Corporation"": 15,
    ""Chinanet HB"": 3,
    ""Korotkij Denis Aleksandrovich"": 36,
    ""Vocus Communications"": 45,
    ""Palo Alto Networks, Inc"": 48,
    ""UCLOUD"": 3,
    ""KORNET"": 3,
    ""CariNet, Inc."": 45,
    ""Censys, Inc."": 6,
    ""Unknown"": 3,
    ""ServeCentric Ltd"": 6,
    ""Proton66 LLC"": 3,
    ""ICG 4 ZEN AMS"": 18,
    ""VPN Consumer Los Angeles, United States"": 12,
    ""Flyservers S.A"": 12,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Alibaba Cloud LLC"": 3
  },
  ""regionName"": {
    ""South West"": 30947,
    ""Wisconsin"": 21,
    ""\u00cele-de-France"": 24,
    ""Vienna"": 6,
    ""Yau Tsim Mong"": 6,
    ""Sofia-Capital"": 48,
    ""Davao Region"": 15,
    ""Hubei"": 3,
    ""North Holland"": 126,
    ""Western Australia"": 45,
    ""California"": 75,
    ""Kaohsiung"": 3,
    ""Gyeonggi-do"": 3,
    ""Nevada"": 30,
    ""England"": 3,
    ""Hesse"": 6,
    ""New Jersey"": 6,
    ""Samara Oblast"": 3,
    ""Leinster"": 6,
    ""St.-Petersburg"": 3,
    ""Kaunas"": 12,
    ""North West"": 3,
    ""Michigan"": 3
  },
  ""country"": {
    ""Singapore"": 30950,
    ""United States"": 135,
    ""France"": 24,
    ""Austria"": 6,
    ""Hong Kong"": 6,
    ""Bulgaria"": 48,
    ""Philippines"": 15,
    ""China"": 3,
    ""The Netherlands"": 126,
    ""Australia"": 45,
    ""Taiwan"": 3,
    ""South Korea"": 3,
    ""United Kingdom"": 3,
    ""Germany"": 6,
    ""Russia"": 6,
    ""Ireland"": 6,
    ""Lithuania"": 12
  },
  ""account"": {
    ""hello"": 31064,
    ""142.93.8.59"": 129,
    ""Test"": 33,
    ""Domain"": 18,
    ""fWoXUOlNE"": 3,
    ""GFsklj"": 3,
    ""dNlOyD"": 3,
    ""Administrator"": 6,
    ""eltons"": 15,
    ""administr"": 15,
    ""(empty)"": 6,
    ""Administr"": 30,
    ""OGEvxaHKh"": 3,
    ""jJrVJT"": 3,
    ""pjvhBH"": 3,
    ""root"": 33,
    ""UKBtFxqPD"": 3,
    ""RtHlCt"": 3,
    ""gWTNNi"": 3,
    ""DFzAWdtPU"": 3,
    ""DTlWOn"": 3,
    ""PVRsgn"": 3,
    ""yhDxyQONx"": 6,
    ""nmap"": 3,
    ""naap"": 3
  },
  ""keyboard"": {
    ""Unknown"": 31397
  },
  ""client_build"": {
    ""Unknown"": 31397
  },
  ""client_name"": {
    ""Unknown"": 31397
  },
  ""ip_type"": {
    ""hosting"": 31175,
    ""Unknown"": 201,
    ""hosting & proxy"": 21
  }
}"
AVebmZuy,2025-05-29_stats.json,rdp_snitch,JSON,Friday 30th of May 2025 07:15:10 PM CDT,"{
  ""ip"": {
    ""165.232.170.129"": 24964,
    ""128.199.168.88"": 5115,
    ""143.198.221.164"": 528,
    ""157.245.159.1"": 291,
    ""71.82.170.60"": 21,
    ""91.238.181.27"": 6,
    ""37.19.195.67"": 3,
    ""103.144.2.187"": 6,
    ""80.94.95.198"": 45,
    ""87.249.133.77"": 3,
    ""103.150.221.39"": 15,
    ""111.170.152.113"": 3,
    ""157.245.150.219"": 18,
    ""91.238.181.26"": 18,
    ""92.63.197.197"": 12,
    ""123.103.219.78"": 45,
    ""198.235.24.207"": 9,
    ""128.1.32.99"": 3,
    ""211.198.76.235"": 3,
    ""71.6.134.230"": 30,
    ""138.68.188.52"": 3,
    ""167.94.146.50"": 3,
    ""167.172.153.78"": 6,
    ""92.63.197.23"": 24,
    ""80.94.95.203"": 3,
    ""178.163.63.217"": 3,
    ""212.147.209.72"": 6,
    ""45.134.26.14"": 3,
    ""205.210.31.39"": 9,
    ""71.6.135.131"": 15,
    ""185.226.197.7"": 18,
    ""212.56.53.17"": 12,
    ""194.165.16.166"": 6,
    ""134.122.51.9"": 72,
    ""194.165.16.164"": 6,
    ""68.183.179.179"": 3,
    ""205.210.31.218"": 9,
    ""165.154.138.107"": 3,
    ""146.190.89.207"": 27,
    ""47.236.145.243"": 3,
    ""147.185.132.102"": 9,
    ""147.185.133.35"": 12,
    ""167.94.145.107"": 3
  },
  ""asn"": {
    ""AS14061"": 31027,
    ""AS20115"": 21,
    ""AS49434"": 24,
    ""AS212238"": 6,
    ""AS138152"": 6,
    ""AS204428"": 48,
    ""AS140599"": 15,
    ""AS151185"": 3,
    ""AS210848"": 36,
    ""AS4826"": 45,
    ""AS396982"": 48,
    ""AS135377"": 6,
    ""AS4766"": 3,
    ""AS10439"": 45,
    ""AS398705"": 6,
    ""AS8416"": 3,
    ""AS50837"": 6,
    ""AS198953"": 3,
    ""AS21859"": 18,
    ""AS4213"": 12,
    ""AS48721"": 12,
    ""AS45102"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 31027,
    ""Charter Communications"": 21,
    ""Datacenter location PAR1 France"": 24,
    ""Datacamp Limited"": 6,
    ""Yisu Cloud LTD"": 6,
    ""SS-Net"": 48,
    ""Comfac Corporation"": 15,
    ""China Telecom"": 3,
    ""Telkom Internet LTD"": 36,
    ""Vocus PTY LTD"": 45,
    ""Google LLC"": 48,
    ""Zenlayer Inc"": 21,
    ""Korea Telecom"": 3,
    ""CariNet, Inc."": 45,
    ""Censys, Inc."": 6,
    ""Infoline networks"": 3,
    ""CLOUDSIGMA AG"": 6,
    ""Proton66 OOO"": 3,
    ""Krypt Technologies"": 12,
    ""Flyservers S.A."": 12,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Alibaba (US) Technology Co., Ltd."": 3
  },
  ""org"": {
    ""DigitalOcean, LLC"": 31027,
    ""Spectrum"": 21,
    ""ThinkTech Technology Industrial CO. Limited"": 24,
    ""Cdnext VIE"": 3,
    ""XINRUIDE INTERNET CO, .LIMITED"": 6,
    ""Unmanaged LTD"": 48,
    ""Datacamp Limited"": 3,
    ""Comfac Corporation"": 15,
    ""Chinanet HB"": 3,
    ""Korotkij Denis Aleksandrovich"": 36,
    ""Vocus Communications"": 45,
    ""Palo Alto Networks, Inc"": 48,
    ""UCLOUD"": 3,
    ""KORNET"": 3,
    ""CariNet, Inc."": 45,
    ""Censys, Inc."": 6,
    ""Unknown"": 3,
    ""ServeCentric Ltd"": 6,
    ""Proton66 LLC"": 3,
    ""ICG 4 ZEN AMS"": 18,
    ""VPN Consumer Los Angeles, United States"": 12,
    ""Flyservers S.A"": 12,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Alibaba Cloud LLC"": 3
  },
  ""regionName"": {
    ""South West"": 30946,
    ""Wisconsin"": 21,
    ""\u00cele-de-France"": 24,
    ""Vienna"": 6,
    ""Yau Tsim Mong"": 6,
    ""Sofia-Capital"": 48,
    ""Davao Region"": 15,
    ""Hubei"": 3,
    ""North Holland"": 126,
    ""Western Australia"": 45,
    ""California"": 75,
    ""Kaohsiung"": 3,
    ""Gyeonggi-do"": 3,
    ""Nevada"": 30,
    ""England"": 3,
    ""Hesse"": 6,
    ""New Jersey"": 6,
    ""Samara Oblast"": 3,
    ""Leinster"": 6,
    ""St.-Petersburg"": 3,
    ""Kaunas"": 12,
    ""North West"": 3,
    ""Michigan"": 3
  },
  ""country"": {
    ""Singapore"": 30949,
    ""United States"": 135,
    ""France"": 24,
    ""Austria"": 6,
    ""Hong Kong"": 6,
    ""Bulgaria"": 48,
    ""Philippines"": 15,
    ""China"": 3,
    ""The Netherlands"": 126,
    ""Australia"": 45,
    ""Taiwan"": 3,
    ""South Korea"": 3,
    ""United Kingdom"": 3,
    ""Germany"": 6,
    ""Russia"": 6,
    ""Ireland"": 6,
    ""Lithuania"": 12
  },
  ""account"": {
    ""hello"": 31063,
    ""142.93.8.59"": 129,
    ""Test"": 33,
    ""Domain"": 18,
    ""fWoXUOlNE"": 3,
    ""GFsklj"": 3,
    ""dNlOyD"": 3,
    ""Administrator"": 6,
    ""eltons"": 15,
    ""administr"": 15,
    ""(empty)"": 6,
    ""Administr"": 30,
    ""OGEvxaHKh"": 3,
    ""jJrVJT"": 3,
    ""pjvhBH"": 3,
    ""root"": 33,
    ""UKBtFxqPD"": 3,
    ""RtHlCt"": 3,
    ""gWTNNi"": 3,
    ""DFzAWdtPU"": 3,
    ""DTlWOn"": 3,
    ""PVRsgn"": 3,
    ""yhDxyQONx"": 6,
    ""nmap"": 3,
    ""naap"": 3
  },
  ""keyboard"": {
    ""Unknown"": 31396
  },
  ""client_build"": {
    ""Unknown"": 31396
  },
  ""client_name"": {
    ""Unknown"": 31396
  },
  ""ip_type"": {
    ""hosting"": 31174,
    ""Unknown"": 201,
    ""hosting & proxy"": 21
  }
}"
erK5vapZ,Untitled,GeraldTB,JSON,Friday 30th of May 2025 05:42:23 PM CDT,"""
Pero a los Dias Moriste de tanta Dulzura!,
Lamentablemente Tenia Veneno, y Sufriste una Muerte Lenta!,
Lamentablemente Tenia Veneno, Pero Te Salvaste,
y Te Denucio A la Poilicia,
Cada Día tiene más Marcas de Mordida que se Ven por Todo su Cuerpo,
"""
cju69SxG,TCU_Code,DanSt3fan,C,Friday 30th of May 2025 04:45:18 PM CDT,"/*@!Encoding:1252*/
includes
{
  
}

variables
{
  int crctable[256] = {0x00, 0x2F, 0x5E, 0x71, 0xBC, 0x93, 0xE2, 0xCD, 0x57, 0x78, 0x09, 0x26, 0xEB, 0xC4, 0xB5, 0x9A,
                       0xAE, 0x81, 0xF0, 0xDF, 0x12, 0x3D, 0x4C, 0x63, 0xF9, 0xD6, 0xA7, 0x88, 0x45, 0x6A, 0x1B, 0x34, 
                       0x73, 0x5C, 0x2D, 0x02, 0xCF, 0xE0, 0x91, 0xBE, 0x24, 0x0B, 0x7A, 0x55, 0x98, 0xB7, 0xC6, 0xE9, 
                       0xDD, 0xF2, 0x83, 0xAC, 0x61, 0x4E, 0x3F, 0x10, 0x8A, 0xA5, 0xD4, 0xFB, 0x36, 0x19, 0x68, 0x47, 
                       0xE6, 0xC9, 0xB8, 0x97, 0x5A, 0x75, 0x04, 0x2B, 0xB1, 0x9E, 0xEF, 0xC0, 0x0D, 0x22, 0x53, 0x7C, 
                       0x48, 0x67, 0x16, 0x39, 0xF4, 0xDB, 0xAA, 0x85, 0x1F, 0x30, 0x41, 0x6E, 0xA3, 0x8C, 0xFD, 0xD2, 
                       0x95, 0xBA, 0xCB, 0xE4, 0x29, 0x06, 0x77, 0x58, 0xC2, 0xED, 0x9C, 0xB3, 0x7E, 0x51, 0x20, 0x0F, 
                       0x3B, 0x14, 0x65, 0x4A, 0x87, 0xA8, 0xD9, 0xF6, 0x6C, 0x43, 0x32, 0x1D, 0xD0, 0xFF, 0x8E, 0xA1, 
                       0xE3, 0xCC, 0xBD, 0x92, 0x5F, 0x70, 0x01, 0x2E, 0xB4, 0x9B, 0xEA, 0xC5, 0x08, 0x27, 0x56, 0x79, 
                       0x4D, 0x62, 0x13, 0x3C, 0xF1, 0xDE, 0xAF, 0x80, 0x1A, 0x35, 0x44, 0x6B, 0xA6, 0x89, 0xF8, 0xD7, 
                       0x90, 0xBF, 0xCE, 0xE1, 0x2C, 0x03, 0x72, 0x5D, 0xC7, 0xE8, 0x99, 0xB6, 0x7B, 0x54, 0x25, 0x0A, 
                       0x3E, 0x11, 0x60, 0x4F, 0x82, 0xAD, 0xDC, 0xF3, 0x69, 0x46, 0x37, 0x18, 0xD5, 0xFA, 0x8B, 0xA4, 
                       0x05, 0x2A, 0x5B, 0x74, 0xB9, 0x96, 0xE7, 0xC8, 0x52, 0x7D, 0x0C, 0x23, 0xEE, 0xC1, 0xB0, 0x9F,
                       0xAB, 0x84, 0xF5, 0xDA, 0x17, 0x38, 0x49, 0x66, 0xFC, 0xD3, 0xA2, 0x8D, 0x40, 0x6F, 0x1E, 0x31, 
                       0x76, 0x59, 0x28, 0x07, 0xCA, 0xE5, 0x94, 0xBB, 0x21, 0x0E, 0x7F, 0x50, 0x9D, 0xB2, 0xC3, 0xEC, 
                       0xD8, 0xF7, 0x86, 0xA9, 0x64, 0x4B, 0x3A, 0x15, 0x8F, 0xA0, 0xD1, 0xFE, 0x33, 0x1C, 0x6D, 0x42}; // Look-up table used for E2E
  int dataid[16] = {0x3B, 0x14, 0x65, 0x4A, 0x87, 0xA8, 0xD9, 0xF6, 0x6C, 0x43, 0x32, 0x1D, 0xD0, 0xFF, 0x8E, 0xA1}; // DataID List used for E2E
  int e2e_123, e2e_124; // Used for E2E check of the Rx Messages
  byte data_123[8], data_124[8]; // Used for E2E check of the Rx Messages
  mstimer e2e_ET1, e2e_ET1_old, e2e_ET2, e2e_ET2_old;
  
  int condm, state;
  float gearr[6] = {3.55, 3.73, 2.05, 1.32, 0.97, 0.65}; // Gearbox drive ratios - [R, 1st, 2nd, 3rd, 4th, 5th].
}

on start // Timers used for E2E function calling
{
  setTimer(e2e_ET1, 150); 
  setTimer(e2e_ET2, 150);
}

on timer e2e_ET1{ // Calling the E2E function for ET1 message
  setTimer(e2e_ET1, 100);
  if(isTimerActive(e2e_ET1_old) == 0){
    sysSetVariableString(sysvar::sysNS::E2E_ET1_Status, ""Timeout Error"");
  }
}

on timer e2e_ET2{ // Calling the E2E function for ET2 message
  setTimer(e2e_ET2, 100);
  if(isTimerActive(e2e_ET2_old) == 0){
    sysSetVariableString(sysvar::sysNS::E2E_ET2_Status, ""Timeout Error"");
  }
}

on timer e2e_ET1_old{
  
}

on timer e2e_ET2_old{

}

/// <Rx>
on message Engine_Transmission_1
{
  int i; // where i is used for e2e checking and cond, condd are used for autoshifting in the autoshift function.
  for(i = 0; i < this.dlc; i++)
  {
    data_123[i] = this.byte(i);
  }
  setTimer(e2e_ET1_old, 100);
  e2e_123 = E2ECheck(this.id, this.dlc, data_123);
  if(e2e_123){
    if($sig_engine_PRNDM_Req == 0x0 || $sig_engine_PRNDM_Req == 0x2){ // check if vehicle in park or neutral to allow for manual shifting position
      condm = 1;
      state = 1; // we use to this to know if we need to engage 1st gear
    }
    if($sig_engine_PRNDM_Req == 0x1){
      $Transmission_Engine_1::sig_transmission_RPM = $sig_engine_RPM / gearr[0]; // calculate the rpm for reverse based on throttle input
      if($Transmission_Engine_1::sig_transmission_RPM > 0 ){
        condm = 0; // doesn't allow to go into manual shifting if reverse is engaged
        state = 1;
      }
    }
    if($sig_engine_PRNDM_Req == 0x3){
      AutoShift();
      condm = 1;
      state = 2;
    }
    if($sig_engine_PRNDM_Req == 0x4 && condm == 1){
      ManualShift();
    }
  }
}


/// <Rx>
on message Engine_Transmission_2
{
  int i;
  for(i = 0; i < this.dlc; i++)
  {
    data_124[i] = this.byte(i);
  }
  setTimer(e2e_ET2_old, 100);
  e2e_124 = E2ECheck(this.id, this.dlc, data_124);
  if(e2e_124){
    if($sig_engine_PRNDM_Req == 0x0){ // If in park engage 1st gear to prevent rolling.
      if($sig_transmission_RPM == 0){
        $Transmission_Engine_1::sig_transmission_Gear1 = 1;
        $Transmission_Engine_2::sig_transmission_Gear2 = 1;
        $Transmission_Engine_2::sig_transmission_PRNDM_Conf = $sig_engine_PRNDM_Req;
      }else{
        $sig_transmission_PRNDM_Conf = 5;
      }
    }
    if($sig_engine_PRNDM_Req == 0x1){ // If in reverse engage reverse gear
      if($sig_transmission_RPM == 0){ // Fail safe in case we switch to reverse while in Drive
        $Transmission_Engine_1::sig_transmission_Gear1 = 6;
        $Transmission_Engine_2::sig_transmission_Gear2 = 6;
        $Transmission_Engine_2::sig_transmission_PRNDM_Conf = $sig_engine_PRNDM_Req;
      }else{
        $Transmission_Engine_2::sig_transmission_PRNDM_Conf = 5; 
      }
    }
    if($sig_engine_PRNDM_Req == 0x2){ // If in neutral the gearbox is in neutral
      $Transmission_Engine_1::sig_transmission_Gear1 = 0;
      $Transmission_Engine_2::sig_transmission_Gear2 = 0;
      $Transmission_Engine_2::sig_transmission_PRNDM_Conf = $sig_engine_PRNDM_Req;
    }
    if($sig_engine_PRNDM_Req == 0x3){ // If in drive the gearbox is in drive
      $Transmission_Engine_2::sig_transmission_PRNDM_Conf = $sig_engine_PRNDM_Req;
    }
    if($sig_engine_PRNDM_Req == 0x4){ // If in manual shift the gearbox is in manual shift
      $Transmission_Engine_2::sig_transmission_PRNDM_Conf = $sig_engine_PRNDM_Req;
    }
  }
}


void ManualShift()
{
  int condd[6], gear, acc;
  $sig_engine_Man_Shift = 0x4;
  if(state == 1){ // This is used to check if we are in park or neutral when switching to manual shifting
    $Transmission_Engine_1::sig_transmission_Gear1 = 1; // Sets the vehicle in first gear
    $Transmission_Engine_2::sig_transmission_Gear2 = 1;
    state = 2; // Resets the state
  }else{
    // Check if there is an upshift request and that we can still upshift ( current gear is < 5)
    if($sig_engine_Man_Shift == 0x1 && $Transmission_Engine_1::sig_transmission_Gear1 < 5){ 
      gear = $Transmission_Engine_1::sig_transmission_Gear1 + 1; // Do the upshift
      acc = ($sig_transmission_RPM * gearr[gear]) / 6; // Calculate the accelerator position for the upshift
      if(acc > 50){ // Checks if the upshift is possible else we stick to the same gear.
        @sysvar::sysNS::sys_engine_Acceleratie = ($sig_transmission_RPM * gearr[gear]) / 6; // Set the RPM for upshift
        $sig_engine_Man_Shift == 0x4; // Reset the upshift flag to idle
        $Transmission_Engine_1::sig_transmission_Gear1 = gear; // Confirm the upshift
        $Transmission_Engine_2::sig_transmission_Gear2 = gear;
        $sig_transmission_Conf_Up_Down = 1;
      }else { // Else we stick to the same gear and reset the upshift request flag
        gear = $Transmission_Engine_1::sig_transmission_Gear1 - 1;
        $sig_engine_Man_Shift == 0x4;
        $sig_transmission_Conf_Up_Down = 0;
      }
    }else if($sig_engine_Man_Shift == 0x0 && $Transmission_Engine_1::sig_transmission_Gear1 > 1) {
      gear = $Transmission_Engine_1::sig_transmission_Gear1 - 1; // Do the downshift
      acc = ($sig_transmission_RPM * gearr[gear]) / 6; // Calculate the accelerator position for the downshift
      if(acc < 1000){ // Checks if the downshift is possible else we stick to the same gear.
        @sysvar::sysNS::sys_engine_Acceleratie = ($sig_transmission_RPM * gearr[gear]) / 6; // Set the RPM for downshift
        $sig_engine_Man_Shift == 0x4; // Reset the downshift flag to idle
        $Transmission_Engine_1::sig_transmission_Gear1 = gear; // Confirm the downshift
        $Transmission_Engine_2::sig_transmission_Gear2 = gear;
        $sig_transmission_Conf_Up_Down = 1;
      }else { // Else we stick to the same gear and reset the downshift request flag
        gear = $Transmission_Engine_1::sig_transmission_Gear1 + 1;
        $sig_engine_Man_Shift == 0x4;
        $sig_transmission_Conf_Up_Down = 0;
      }
    }else{ // Calculate the output rpm based on the current engaged gear
      $Transmission_Engine_1::sig_transmission_RPM = $sig_engine_RPM / gearr[gear]; 
    }
  }
}

void AutoShift()
{
  int cond[6], condd[6];
  $sig_transmission_Conf_Up_Down = 1;
  
  //1st Gear
  if($sig_transmission_RPM <= 490){
    if(condd[1] == 1){
      @sysvar::sysNS::sys_engine_Acceleratie = (483 * gearr[1]) / 6; // Set the RPM accordingly for downshifts, where 483 is the last possible rpm for 1st gear
      condd[1] = 0; // Reset the downshift condition
    }else{
      $Transmission_Engine_1::sig_transmission_Gear1 = 1; // Engage 1st gear
      $Transmission_Engine_2::sig_transmission_Gear2 = 1;
      $Transmission_Engine_1::sig_transmission_RPM = $sig_engine_RPM / gearr[1]; // calculate the rpm for 1st gear based on throttle input
    }
    if($sig_transmission_RPM >=480){
      cond[2] = 1; // Set the upshift condition
    }
  }
  
  //2nd Gear
  if($sig_transmission_RPM > 490 && $sig_transmission_RPM <= 970){
    if(condd[2] == 1){
      @sysvar::sysNS::sys_engine_Acceleratie = (951 * gearr[2]) / 6; // Set the RPM accordingly for downshift
      condd[2] = 0; // Reset the downshift condition
    }else if(cond[2] == 1){
      @sysvar::sysNS::sys_engine_Acceleratie = ($sig_transmission_RPM * gearr[2]) / 6; // Set the RPM accordingly for upshift
      cond[2] = 0; // Reset the upshift condition
    }else{
      $Transmission_Engine_1::sig_transmission_Gear1 = 2; // Engage 2nd gear
      $Transmission_Engine_2::sig_transmission_Gear2 = 2;
      $Transmission_Engine_1::sig_transmission_RPM = $sig_engine_RPM / gearr[2]; // calculate the rpm for 2nd gear based on throttle input
    }
    if($sig_transmission_RPM >=950){
      cond[3] = 1; // Set the upshift condition
    }
    if($sig_transmission_RPM <= 500){
      condd[1] = 1; // Set the downshift condition
    }
  }
  
//3rd Gear
  if($sig_transmission_RPM > 970 && $sig_transmission_RPM <= 1500){
    if(condd[3] == 1){
      @sysvar::sysNS::sys_engine_Acceleratie = (1485 * gearr[3]) / 6; // Set the RPM accordingly for downshift
      condd[3] = 0; // Reset the downshift condition
    }else if(cond[3] == 1){
      @sysvar::sysNS::sys_engine_Acceleratie = ($sig_transmission_RPM * gearr[3]) / 6; // Set the RPM accordingly for upshift
      cond[3] = 0; // Reset the upshift condition
    }else{
      $Transmission_Engine_1::sig_transmission_Gear1 = 3; // Engage 3rd gear
      $Transmission_Engine_2::sig_transmission_Gear2 = 3;
      $Transmission_Engine_1::sig_transmission_RPM = $sig_engine_RPM / gearr[3]; // calculate the rpm for 3rd gear based on throttle input
    }
    if($sig_transmission_RPM >= 1480){
      cond[4] = 1; // Set the upshift condition
    }
    if($sig_transmission_RPM <= 1000){
      condd[2] = 1; // Set the downshift condition
    }
  }
  
//4th Gear
  if($sig_transmission_RPM > 1500 && $sig_transmission_RPM <= 2000){
    if(condd[4] == 1){
      @sysvar::sysNS::sys_engine_Acceleratie = (1940 * gearr[4]) / 6; // Set the RPM accordingly for downshift
      condd[4] = 0; // Reset the downshift condition
    }else if(cond[4] == 1){
      @sysvar::sysNS::sys_engine_Acceleratie = ($sig_transmission_RPM * gearr[4]) / 6; // Set the RPM accordingly for upshift
      cond[4] = 0; // Reset the upshift condition
    }else{
      $Transmission_Engine_1::sig_transmission_Gear1 = 4; // Engage 4th gear
      $Transmission_Engine_2::sig_transmission_Gear2 = 4;
      $Transmission_Engine_1::sig_transmission_RPM = $sig_engine_RPM / gearr[4]; // calculate the rpm for 4th gear based on throttle input
    }
    if($sig_transmission_RPM >= 1970){
      cond[5] = 1; // Set the upshift condition
    }
    if($sig_transmission_RPM <= 1600){
      condd[3] = 1; // Set the downshift condition
    }
  }
  
//5th Gear
  if($sig_transmission_RPM > 2000){
    if(cond[5] == 1){
      @sysvar::sysNS::sys_engine_Acceleratie = ($sig_transmission_RPM * gearr[5]) / 6; // Set the RPM accordingly for upshift
      cond[5] = 0; // Reset the upshift condition
    }else{
      $Transmission_Engine_1::sig_transmission_Gear1 = 5; // Engage 5th gear
      $Transmission_Engine_2::sig_transmission_Gear2 = 5;
      $Transmission_Engine_1::sig_transmission_RPM = $sig_engine_RPM / gearr[5]; // calculate the rpm for 5th gear based on throttle input
    }
    if($sig_transmission_RPM <= 2100){ // Downshift into 4th gear
      condd[4] = 1;
    }
  }
}



dword applILTxPending (long aId, dword aDlc, byte data[])
{
  dword i;
  byte xor, crc;
  int e2e_sqcvalue1, e2e_sqcvalue2;
  //The following code increments the SQC value and then calculates the CRC of the 0x321 message.
  if(aId == 0x321)
  {
    if(@sysvar::sysNS::E2E_TE1_MSG_Error == 0){
      e2e_sqcvalue1 = data[1] & 0x0F;
      //This code takes the value of the current sqc
      if(@sysvar::sysNS::E2E_TE1_SQC_Error != 1){
        e2e_sqcvalue1++; 
      }else{
        e2e_sqcvalue1 = 0;
      }
      e2e_sqcvalue1 = e2e_sqcvalue1 & 0xF;
      //This code increments the value of the sqc counter
      data[1] = (data[1] & 0xF0) + e2e_sqcvalue1; //Append the new sqc value in the data of the message
      xor = 0xFF;
      for(i = 1; i < aDlc; ++i) {
        xor = xor ^ data[i];
        xor = crctable[xor];
      }
      xor = xor ^ dataid[e2e_sqcvalue1];
      crc = crctable[xor];
      //Calculate the CRC of the message without the final 0xFF xor.
      data[0] = crc ^ 0xFF;
      if(@sysvar::sysNS::E2E_TE1_CRC_Error == 1){
        data[0] = data[0] ^ 0xFF;
      }
    }else{
      return 0;
    }
  }
  //The following code does the same for the 0x322 message, incrementing the sqc value and then calculating the CRC
  if(aId == 0x322)
  {
    if(@sysNS::E2E_TE2_MSG_Error == 0){
      e2e_sqcvalue2 = data[1] & 0x0F;
      if(@sysvar::sysNS::E2E_TE2_SQC_Error != 1){
        e2e_sqcvalue2++; 
      }else{
        e2e_sqcvalue1 = 0;
      }
      e2e_sqcvalue2 = e2e_sqcvalue2 & 0xF;
      data[1] = (data[1] & 0xF0) + e2e_sqcvalue2;
      xor = 0xFF;
      for(i = 1; i < aDlc; ++i) {
        xor = xor ^ data[i];
        crc = crctable[xor];
      }
      xor = xor ^ dataid[e2e_sqcvalue2];
      crc = crctable[xor];
      data[0] = crc ^ 0xFF;
      if(@sysvar::sysNS::E2E_TE2_CRC_Error == 1){        
        data[0] = data[0] ^ 0xFF;
      }
    }else{
      return 0;
    }
  }
  return 1; //Returning 1 means allowing 
}

int E2ECheck(dword aId, byte aDlc, byte data[])
{
  dword i;
  byte xor, crc, crc_123, crc_124;
  int e2e_c_sqcold1, e2e_c_sqcold2;
  int e2e_c_sqcvalue1, e2e_c_sqcvalue2, ver;
  ver = 0;
  if(aId == 0x123)
  {
    e2e_c_sqcvalue1 = data[1] & 0x0F;
    if(((e2e_c_sqcold1 + 1) & 0xF) == e2e_c_sqcvalue1){
      xor = 0xFF;
      for(i = 1; i < aDlc; ++i) {
        xor = xor ^ data[i];
        xor = crctable[xor];
      }
      xor = xor ^ dataid[e2e_c_sqcvalue1];
      crc = crctable[xor];
      crc_123 = crc ^ 0xFF;
      if(data[0] == crc_123){
        ver = 1;
        e2e_c_sqcold1 = e2e_c_sqcvalue1;
        sysSetVariableString(sysvar::sysNS::E2E_ET1_Status, ""OK"");
      }else {
        ver = 0;
        e2e_c_sqcold1 = e2e_c_sqcvalue1;
        sysSetVariableString(sysvar::sysNS::E2E_ET1_Status, ""CRC Error""); 
      }
    }else {
      ver = 0;
      sysSetVariableString(sysvar::sysNS::E2E_ET1_Status, ""SQC Error"");
    }
  }
  if(aId == 0x124)
  {
    e2e_c_sqcvalue2 = data[1] & 0x0F;
    if(((e2e_c_sqcold2 + 1) & 0xF) == e2e_c_sqcvalue2){
      xor = 0xFF;
      for(i = 1; i < aDlc; ++i) {
        xor = xor ^ data[i];
        crc = crctable[xor];
      }
      xor = xor ^ dataid[e2e_c_sqcvalue2];
      crc = crctable[xor];
      crc_124 = crc ^ 0xFF;
      if(data[0] == crc_124){
        ver = 1;
        e2e_c_sqcold2 = e2e_c_sqcvalue2;
        sysSetVariableString(sysvar::sysNS::E2E_ET2_Status, ""OK"");
      }else {
        ver = 0;
        e2e_c_sqcold2 = e2e_c_sqcvalue2;
        sysSetVariableString(sysvar::sysNS::E2E_ET2_Status, ""CRC Error"");
      }
    }else {
      ver = 0;
      sysSetVariableString(sysvar::sysNS::E2E_ET2_Status, ""SQC Error"");
    }
  }
  return ver;
}

"
HjpgXCpJ,spatialInstaller,Myros27,Lua,Friday 30th of May 2025 04:34:14 PM CDT,"fs.makeDir(""startup"")
shell.setDir(""startup"")
shell.run(""pastebin get 9ixwt0Gv spatialLoderBot"")
os.reboot()"
9ixwt0Gv,spatialLoaderBot,Myros27,Lua,Friday 30th of May 2025 04:15:41 PM CDT,"--[[
Robot Turtle for Spatial Storage Management
Version 1.1

Handles 'load' and 'unload' commands for spatial dimensions via chat.
Interacts with a System Connector (back) and IO Port (front).
Requires a Chat Box peripheral.
Uses global textutils for JSON operations.
--]]

-- textutils is globally available in CC:Tweaked for JSON functions.

-- Configuration
local NAME_FILE = ""name.json""
local ACTIVE_DIM_FILE = ""active_dim.json""
local CHAT_MODULE_NAME = ""chatBox""

-- Turtle State
local turtle_id = nil -- Canonical name, e.g., ""ab12""
local chat_box = nil
local current_dim_id_in_port = """" -- User-defined name of the dimension currently in the IO Port
local current_dim_nbt_in_port = nil -- NBT of the dimension currently in the IO Port

-- Error State Flag
local in_error_state = false

--#region Helper Functions

function error_state(reason)
    term.setTextColor(colors.red)
    print(""ERROR: "" .. reason)
    term.setTextColor(colors.white)
    print(""Turtle is now locked down."")
    in_error_state = true
    -- Lock down: no more reactions or interactions
    while true do
        os.sleep(3600) -- Sleep for a long time
    end
end

local function file_exists(path)
    return fs.exists(path)
end

local function read_json_file(path)
    if not file_exists(path) then
        return nil
    end
    local handle = fs.open(path, ""r"")
    if not handle then
        print(""Warning: Could not open "" .. path .. "" for reading."")
        return nil
    end
    local content = handle.readAll()
    handle.close()
    -- Use pcall to safely attempt to unserialise JSON, as malformed JSON will error
    local success, data = pcall(textutils.unserialiseJSON, content)
    if success then
        return data
    else
        print(""Warning: Could not parse JSON from "" .. path .. "". Error: "" .. tostring(data))
        return nil
    end
end

local function write_json_file(path, data)
    local success, serialized_data = pcall(textutils.serialiseJSON, data, {compact = false})
    if not success or not serialized_data then
        error_state(""Failed to serialize data for "" .. path .. "". Error: "" .. tostring(serialized_data)) -- serialized_data will be error msg on fail
        return false
    end
    local handle = fs.open(path, ""w"")
    if not handle then
        error_state(""Could not open "" .. path .. "" for writing."")
        return false
    end
    handle.write(serialized_data)
    handle.close()
    return true
end

local function validate_name_structure(name_str)
    if type(name_str) ~= ""string"" then return false end
    local len = string.len(name_str)
    if len < 2 or len > 4 then return false end

    local letters = name_str:gsub(""[^a-zA-Z]"", """")
    local numbers = name_str:gsub(""[^0-9]"", """")

    if string.len(letters) + string.len(numbers) ~= len then return false end -- Contains other chars

    if not (string.len(letters) >= 1 and string.len(letters) <= 2) then return false end
    if not (string.len(numbers) >= 1 and string.len(numbers) <= 2) then return false end

    return true
end

local function canonicalize_name(name_str)
    if type(name_str) ~= ""string"" then return """" end
    local lower_name = name_str:lower()
    local letters_part = {}
    for char in lower_name:gmatch(""[a-z]"") do
        table.insert(letters_part, char)
    end
    table.sort(letters_part)

    local numbers_part = {}
    for char in lower_name:gmatch(""[0-9]"") do
        table.insert(numbers_part, char)
    end
    table.sort(numbers_part)

    return table.concat(letters_part) .. table.concat(numbers_part)
end

local function send_chat_message(message)
    if chat_box then
        local prefix = turtle_id or ""Turtle""
        chat_box.sendMessage(message, prefix, ""[]"", ""&e"") -- Yellow brackets for turtle name
        os.sleep(1) -- Cooldown to prevent spam
    else
        print(""Chat: ["" .. (turtle_id or ""Turtle"") .. ""] "" .. message)
    end
end

-- Deep NBT comparison by serializing to JSON strings
local function compare_nbt_data(nbt1, nbt2)
    if nbt1 == nil and nbt2 == nil then return true end
    if type(nbt1) ~= type(nbt2) then return false end

    if type(nbt1) == ""table"" then
        -- Use pcall for serialization as NBT could theoretically be non-serializable (though unlikely for valid item NBT)
        local success1, s_nbt1 = pcall(textutils.serialiseJSON, nbt1)
        local success2, s_nbt2 = pcall(textutils.serialiseJSON, nbt2)
        if success1 and success2 then
            return s_nbt1 == s_nbt2
        else
            print(""Warning: Could not serialize NBT data for comparison."")
            return false -- If serialization fails, consider them not equal
        end
    end
    return nbt1 == nbt2
end

--#endregion Helper Functions

--#region Initialization

local function initialize_name()
    local name_data = read_json_file(NAME_FILE)
    if name_data and name_data.id and validate_name_structure(name_data.id) then
        turtle_id = canonicalize_name(name_data.id)
        print(""Name loaded: "" .. turtle_id)
    else
        print(""No valid name found. Please set a name for this turtle."")
        local input_name
        repeat
            term.write(""Enter name (1-2 letters, 1-2 numbers, e.g., n1, ab12): "")
            input_name = read()
            if not validate_name_structure(input_name) then
                print(""Invalid name format. Must be 1-2 letters and 1-2 numbers (e.g., 'a1', 'xy12')."")
                input_name = nil
            end
        until input_name
        turtle_id = canonicalize_name(input_name)
        if not write_json_file(NAME_FILE, {id = turtle_id}) then
            error_state(""Failed to save name to "" .. NAME_FILE)
        end
        print(""Name set to: "" .. turtle_id)
    end
end

local function initialize_peripherals_and_state()
    chat_box = peripheral.find(CHAT_MODULE_NAME)
    if not chat_box then
        error_state(""Chat Box peripheral ('"" .. CHAT_MODULE_NAME .. ""') not found."")
    end
    print(""Chat Box found."")

    for i = 1, 16 do
        if turtle.getItemCount(i) > 0 then
            error_state(""Turtle inventory is not empty. Slot "" .. i .. "" contains items. Please clear inventory."")
        end
    end
    print(""Inventory is empty."")

    local active_dim_data = read_json_file(ACTIVE_DIM_FILE)
    if not active_dim_data or type(active_dim_data.name) ~= ""string"" or (active_dim_data.nbt ~= nil and type(active_dim_data.nbt) ~= ""table"") then
        print(""Warning: "" .. ACTIVE_DIM_FILE .. "" missing or corrupt. Initializing fresh."")
        active_dim_data = {name = """", nbt = nil}
        if not write_json_file(ACTIVE_DIM_FILE, active_dim_data) then
            error_state(""Failed to create/initialize "" .. ACTIVE_DIM_FILE)
        end
    end
    current_dim_id_in_port = active_dim_data.name
    current_dim_nbt_in_port = active_dim_data.nbt
    if current_dim_id_in_port ~= """" and current_dim_id_in_port ~= nil then
        print(""Remembering loaded dimension: "" .. current_dim_id_in_port)
    else
        print(""No dimension currently loaded in IO Port."")
    end
end

--#endregion Initialization

--#region Command Processing

local function do_unload_procedure(target_slot_for_unloaded_disk)
    print(""Starting unload procedure..."")
    if current_dim_id_in_port == """" or current_dim_id_in_port == nil then
        send_chat_message(""I don't have any dimension loaded to unload."")
        return false
    end

    local original_selected_slot = turtle.getSelectedSlot()
    if target_slot_for_unloaded_disk then
        turtle.select(target_slot_for_unloaded_disk)
        if turtle.getItemCount(target_slot_for_unloaded_disk) > 0 then
             error_state(""Target slot "" .. target_slot_for_unloaded_disk .. "" for unload is not empty."")
        end
    else
        turtle.select(1)
        if turtle.getItemCount(1) > 0 then
            error_state(""Slot 1 for unload is not empty."")
        end
    end

    print(""Powering system connector (back)..."")
    rs.setOutput(""back"", true)
    os.sleep(0.5)

    print(""Pulsing IO Port (front) to eject disk..."")
    local disk_retrieved = false
    for i = 1, 3 do
        rs.setOutput(""front"", true)
        os.sleep(0.1)
        rs.setOutput(""front"", false)
        os.sleep(0.1)

        if turtle.suck() then
            disk_retrieved = true
            print(""Disk retrieved into slot "" .. turtle.getSelectedSlot())
            break
        end
        print(""Failed to suck disk, attempt "" .. i .. ""/3. Retrying..."")
        if i < 3 then os.sleep(0.5) end
    end

    if not disk_retrieved then
        rs.setOutput(""back"", false)
        error_state(""Failed to retrieve disk from IO Port after 3 attempts during unload."")
    end

    local item_detail = turtle.getItemDetail()
    if not item_detail then
        rs.setOutput(""back"", false)
        error_state(""Failed to get details of retrieved disk from IO Port."")
    end

    print(""Comparing NBT of retrieved disk..."")
    if not compare_nbt_data(item_detail.nbt, current_dim_nbt_in_port) then
        rs.setOutput(""back"", false)
        error_state(""NBT mismatch! Retrieved disk does not match expected NBT for '"" .. current_dim_id_in_port .. ""'."")
    end
    print(""NBT matches."")

    if not target_slot_for_unloaded_disk then
        print(""Updating active_dim.json to empty state."")
        local temp_unloaded_id = current_dim_id_in_port -- Cache for message
        current_dim_id_in_port = """"
        current_dim_nbt_in_port = nil
        if not write_json_file(ACTIVE_DIM_FILE, {name = """", nbt = nil}) then
            rs.setOutput(""back"", false)
            error_state(""Failed to update "" .. ACTIVE_DIM_FILE .. "" after unload."")
        end
         -- send_chat_message(""Dimension '"" .. temp_unloaded_id .. ""' successfully unloaded."") -- Moved to process_unload
    end

    print(""Sending disk to chest above..."")
    if not turtle.dropUp() then
        rs.setOutput(""back"", false)
        error_state(""Failed to drop disk up into chest after unload."")
    end
    
    turtle.select(original_selected_slot)
    return true
end

local function process_unload()
    if current_dim_id_in_port == """" or current_dim_id_in_port == nil then
        send_chat_message(""I don't have any dimension loaded to unload."")
        return
    end

    local unloaded_dim_name_cache = current_dim_id_in_port
    if do_unload_procedure(nil) then
        send_chat_message(""Dimension '"" .. unloaded_dim_name_cache .. ""' has been unloaded."")
    else
        -- error_state would have been called, or message sent by do_unload_procedure
        print(""Unload procedure reported failure or no action for '"" .. unloaded_dim_name_cache .. ""'."")
    end
    rs.setOutput(""back"", false)
end


local function process_load(dim_to_load_user_name)
    print(""Processing load command for dimension: "" .. dim_to_load_user_name)

    local was_dim_loaded_in_port = (current_dim_id_in_port ~= """" and current_dim_id_in_port ~= nil)
    local old_dim_name_cache = current_dim_id_in_port

    print(""Attempting to retrieve new disk '"" .. dim_to_load_user_name .. ""' from chest above..."")
    turtle.select(1)

    if turtle.getItemCount(1) > 0 then
        error_state(""Slot 1 is not empty before attempting to suckUp new disk."")
    end

    local new_disk_retrieved = false
    for i = 1, 20 do
        if turtle.suckUp() then
            if turtle.getItemCount(1) > 0 then
                new_disk_retrieved = true
                print(""New disk retrieved into slot 1."")
                break
            end
        end
        if i < 20 then os.sleep(0.1) end
    end

    if not new_disk_retrieved then
        send_chat_message(""Could not find item for dimension '"" .. dim_to_load_user_name .. ""' in the chest above after 20 tries."")
        os.sleep(3)
        return
    end

    print(""Powering system connector (back)..."")
    rs.setOutput(""back"", true)
    os.sleep(0.5)

    if was_dim_loaded_in_port then
        print(""A dimension ('"" .. old_dim_name_cache .. ""') is already loaded. Unloading it first..."")
        if not do_unload_procedure(16) then
            rs.setOutput(""back"", false)
            print(""Failed to unload the existing dimension '"" .. old_dim_name_cache .. ""'. Aborting load of '"" .. dim_to_load_user_name .. ""'."")
            if turtle.getItemCount(1) > 0 then
                print(""Returning unused new disk from slot 1 to chest above."")
                if not turtle.dropUp() then
                    print(""Warning: Failed to return new disk to chest above."")
                end
            end
            return
        end
        print(""Old dimension '"" .. old_dim_name_cache .. ""' unloaded and sent to system (from slot 16)."")
    end

    turtle.select(1)
    local new_item_detail = turtle.getItemDetail(1)
    if not new_item_detail then
        rs.setOutput(""back"", false)
        error_state(""Failed to get details of the new disk in slot 1 for '"".. dim_to_load_user_name ..""'."")
    end

    print(""Updating active_dim.json with new dimension info: "" .. dim_to_load_user_name)
    current_dim_id_in_port = dim_to_load_user_name
    current_dim_nbt_in_port = new_item_detail.nbt
    if not write_json_file(ACTIVE_DIM_FILE, {name = current_dim_id_in_port, nbt = current_dim_nbt_in_port}) then
        rs.setOutput(""back"", false)
        error_state(""Failed to update "" .. ACTIVE_DIM_FILE .. "" for new dimension '"" .. dim_to_load_user_name .. ""'."")
    end

    print(""Dropping new disk into IO Port (front)..."")
    if not turtle.drop() then
        rs.setOutput(""back"", false)
        error_state(""Failed to drop new disk '"" .. dim_to_load_user_name .. ""' into IO Port."")
    end

    print(""Pulsing IO Port to load dimension '"" .. dim_to_load_user_name .. ""'..."")
    rs.setOutput(""front"", true)
    os.sleep(0.1)
    rs.setOutput(""front"", false)
    os.sleep(0.1)

    print(""Cycling disk in IO Port (suck then drop)..."")
    turtle.select(1)
    if turtle.getItemCount(1) > 0 then
        error_state(""Slot 1 not empty before IO disk cycle suck for '"" .. dim_to_load_user_name .. ""'."")
    end
    if not turtle.suck() then
        rs.setOutput(""back"", false)
        error_state(""Failed to suck disk from IO Port after load signal for '"" .. dim_to_load_user_name .. ""'."")
    end
    if not turtle.drop() then
        rs.setOutput(""back"", false)
        error_state(""Failed to drop disk back into IO Port after suck-back for '"" .. dim_to_load_user_name .. ""'."")
    end

    rs.setOutput(""back"", false)
    send_chat_message(""Dimension '"" .. dim_to_load_user_name .. ""' loaded successfully."")
    if was_dim_loaded_in_port then
        send_chat_message(""(Replaced previously loaded dimension: '"" .. old_dim_name_cache .. ""')"")
    end
end


local function handle_chat_message(username, message)
    print(""Chat from "" .. username .. "": "" .. message)

    local lower_message = message:lower()
    local parts = {}
    for part in lower_message:gmatch(""%S+"") do -- %S+ matches one or more non-space characters
        table.insert(parts, part)
    end

    if #parts < 1 then return end -- Ignore empty messages

    local trigger = parts[1]
    if not (trigger == ""@spatial"" or trigger == ""@spat"") then
        return -- Not for us
    end

    if #parts < 3 then
        send_chat_message(""Command too short. Usage: @"" .. (trigger == ""@spat"" and ""spat"" or ""spatial"") .. "" <load|unload> <your_name> [dim_id_for_load]"")
        return
    end

    local command = parts[2]
    local target_name_str = parts[3]
    local dim_name_for_load -- Will be parts[4] if command is ""load""

    local target_canonical = canonicalize_name(target_name_str)
    if target_canonical ~= turtle_id then
        print(""Command was for turtle '"" .. target_name_str .. ""' (parsed as "" .. target_canonical .. ""), not me ("" .. turtle_id .. ""). Sleeping."")
        os.sleep(5)
        return
    end

    print(""Command is for me. Command: "" .. command)

    if command == ""load"" then
        if #parts < 4 then
            send_chat_message(""Load command requires a dimension name. Usage: @"" .. (trigger == ""@spat"" and ""spat"" or ""spatial"") .. "" load "" .. target_name_str .. "" <DimensionName>"")
            return
        end
        dim_name_for_load = parts[4] -- The actual dimension ID string, can contain mixed case or special chars
        process_load(dim_name_for_load)
    elseif command == ""unload"" then
        process_unload()
    else
        send_chat_message(""Unknown command '"" .. command .. ""'. Available: load, unload."")
    end
end

--#endregion Command Processing

--#region Main Program
local function main()
    print(""Spatial Storage Turtle Initializing..."")
    rs.setOutput(""front"", false)
    rs.setOutput(""back"", false)
    print(""Redstone outputs initialized to off."")

    initialize_name()
    if in_error_state then return end

    initialize_peripherals_and_state()
    if in_error_state then return end

    print(""Initialization complete. Turtle '"" .. turtle_id .. ""' is operational."")
    send_chat_message(""Turtle '"" .. turtle_id .. ""' online and ready."")

    while not in_error_state do
        local event_data = {os.pullEvent(""chat"")} -- Wait indefinitely for a chat event
        local event_type = event_data[1]
        if event_type == ""chat"" then
            local username = event_data[2]
            local message_content = event_data[3]
            
            local success, err = pcall(handle_chat_message, username, message_content)
            if not success then
                local error_message_log = ""Runtime error during command processing: "" .. tostring(err)
                print(error_message_log)
                term.setTextColor(colors.red)
                -- Attempt to print stack trace if available (err might contain it)
                if type(err) == ""string"" and err:match("":%d+:"") then -- Basic check for stack trace like string
                    print(err)
                else
                    -- If no obvious stack trace, print a generic part of the error.
                    -- This part is tricky as CC error objects can vary.
                    debug.traceback(""Error in handle_chat_message"", 2) -- Print current stack trace
                end
                term.setTextColor(colors.white)
                send_chat_message(""An internal error occurred processing a command. Check my console. I might need a reset."")
                -- Decide if this should go to full error_state() or try to continue.
                -- For now, it logs and continues listening for more chat commands.
                -- Consider error_state(error_message_log) for critical failures.
            end
        end
        -- Loop continues if not in_error_state
    end
    
    print(""Main loop exited due to error state."")
end

-- Execute main function
main()

if not in_error_state then
    print(""Turtle script finished unexpectedly without entering error state."")
end

--#endregion Main Program"
wXTp2hEt,wwwq,Smokahontas,VisualBasic,Friday 30th of May 2025 04:08:53 PM CDT,"
me de outra foto agora com outra roupa e outra expressão, mantenha as caracteristicas faciais intactas, de corpo inteiro

me de aquela que ela esta na praia

eu. outro angulo outra expressao outro tipo de foto com estilo de roupa diferente

eu. outro angulo  outro tipo de roupa outra expressao outra iluminaçao outro ambiente

me de aquela que ela esta em um ambiente diferente com roupa diferente e cor preta, tipo casa




Foto casual estilo  tirada com celular, da garota da imagem IMG_1. Ambiente simples e comum. Iluminação suave e natural, sem parecer de estúdio. Qualidade normal, como se fosse tirada para postar nos stories ou no feed, sem filtros pesados. A garota está com roupa diferente e fazendo outra pose ou expressão facial.
foto natural
roupa branca decotada





as duas pessoas estão em um lugar lindo, iluminação de filme, mantenha eles na mesma posição, expressão,  só que tudo mais bonito

melhore completamente essa imagem, deixando linda, iluminação de filme, mantenha a caracteristicas e  eles na mesma posição, expressão,  só que tudo mais bonito
e qualidade excelente"
62paBSXB,Untitled,Asdqewdfgfdfhg,Lua,Friday 30th of May 2025 03:51:56 PM CDT,"--RELOAD GUI
if game.CoreGui:FindFirstChild(""SysBroker"") then
	game:GetService(""StarterGui""):SetCore(""SendNotification"", {Title = ""System Broken"",Text = ""GUI Already loaded, rejoin to re-execute"",Duration = 5;})
	return
end
local version = 2
--VARIABLES
_G.AntiFlingToggled = false
local Players = game:GetService(""Players"")
local plr = Players.LocalPlayer
local TweenService = game:GetService(""TweenService"")
local RunService = game:GetService(""RunService"")
local Light = game:GetService(""Lighting"")
local HttpService = game:GetService(""HttpService"")
local httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
local mouse = plr:GetMouse()
local ScriptWhitelist = {}
local ForceWhitelist = {}
local TargetedPlayer = nil
local FlySpeed = 50
local PotionTool = nil
local SavedCheckpoint = nil
local MinesFolder = nil
local FreeEmotesEnabled = false
local CannonsFolders = {}

pcall(function()
	MinesFolder = game:GetService(""Workspace"").Landmines
	for i,v in pairs(game:GetService(""Workspace""):GetChildren()) do
		if v.Name == ""Cannons"" then
			table.insert(CannonsFolders, v)
		end
	end
end)
--FUNCTIONS
_G.shield = function(id)
	if not table.find(ForceWhitelist,id) then
		table.insert(ForceWhitelist, id)
	end
end

local function RandomChar()
	local length = math.random(1,5)
	local array = {}
	for i = 1, length do
		array[i] = string.char(math.random(32, 126))
	end
	return table.concat(array)
end

local function ChangeToggleColor(Button)
	led = Button.Ticket_Asset
	if led.ImageColor3 == Color3.fromRGB(255, 0, 0) then
		led.ImageColor3 = Color3.fromRGB(0, 255, 0)
	else
		led.ImageColor3 = Color3.fromRGB(255, 0, 0)
	end
end

local function GetPing()
	return (game:GetService(""Stats"").Network.ServerStatsItem[""Data Ping""]:GetValue())/1000
end

local function GetPlayer(UserDisplay)
	if UserDisplay ~= """" then
        for i,v in pairs(Players:GetPlayers()) do
            if v.Name:lower():match(UserDisplay) or v.DisplayName:lower():match(UserDisplay) then
                return v
            end
        end
		return nil
	else
		return nil
    end
end

local function GetCharacter(Player)
	if Player.Character then
		return Player.Character
	end
end

local function GetRoot(Player)
	if GetCharacter(Player):FindFirstChild(""HumanoidRootPart"") then
		return GetCharacter(Player).HumanoidRootPart
	end
end

local function TeleportTO(posX,posY,posZ,player,method)
	pcall(function()
		if method == ""safe"" then
			task.spawn(function()
				for i = 1,30 do
					task.wait()
					GetRoot(plr).Velocity = Vector3.new(0,0,0)
					if player == ""pos"" then
						GetRoot(plr).CFrame = CFrame.new(posX,posY,posZ)
					else
						GetRoot(plr).CFrame = CFrame.new(GetRoot(player).Position)+Vector3.new(0,2,0)
					end
				end
			end)
		else
			GetRoot(plr).Velocity = Vector3.new(0,0,0)
			if player == ""pos"" then
				GetRoot(plr).CFrame = CFrame.new(posX,posY,posZ)
			else
				GetRoot(plr).CFrame = CFrame.new(GetRoot(player).Position)+Vector3.new(0,2,0)
			end
		end
	end)
end

local function PredictionTP(player,method)
	local root = GetRoot(player)
	local pos = root.Position
	local vel = root.Velocity
	GetRoot(plr).CFrame = CFrame.new((pos.X)+(vel.X)*(GetPing()*3.5),(pos.Y)+(vel.Y)*(GetPing()*2),(pos.Z)+(vel.Z)*(GetPing()*3.5))
	if method == ""safe"" then
		task.wait()
		GetRoot(plr).CFrame = CFrame.new(pos)
		task.wait()
		GetRoot(plr).CFrame = CFrame.new((pos.X)+(vel.X)*(GetPing()*3.5),(pos.Y)+(vel.Y)*(GetPing()*2),(pos.Z)+(vel.Z)*(GetPing()*3.5))
	end
end

local function Touch(x,root)
	pcall(function()
		x = x:FindFirstAncestorWhichIsA(""Part"")
		if x then
			if firetouchinterest then
				task.spawn(function()
					firetouchinterest(x, root, 1)
					task.wait()
					firetouchinterest(x, root, 0)
				end)
			end
		end
	end)
end


local function GetPush()
	local TempPush = nil
	pcall(function()
		if plr.Backpack:FindFirstChild(""Push"") then
			PushTool = plr.Backpack.Push
			PushTool.Parent = plr.Character
			TempPush = PushTool
		end
		for i,v in pairs(Players:GetPlayers()) do
			if v.Character:FindFirstChild(""Push"") then
				TempPush = v.Character.Push
			end
		end
	end)
	return TempPush
end

local function CheckPotion()
	if plr.Backpack:FindFirstChild(""potion"") then
		PotionTool = plr.Backpack:FindFirstChild(""potion"")
		return true
	elseif plr.Character:FindFirstChild(""potion"") then
		PotionTool = plr.Character:FindFirstChild(""potion"")
		return true
	else
		return false
	end
end

local function Push(Target)
	local Push = GetPush()
	local FixTool = nil
	if Push ~= nil then
		local args = {[1] = Target.Character}
		GetPush().PushTool:FireServer(unpack(args))
	end
	if plr.Character:FindFirstChild(""Push"") then
		plr.Character.Push.Parent = plr.Backpack
	end
	if plr.Character:FindFirstChild(""ModdedPush"") then
		FixTool = plr.Character:FindFirstChild(""ModdedPush"")
		FixTool.Parent = plr.Backpack
		FixTool.Parent = plr.Character
	end
	if plr.Character:FindFirstChild(""ClickTarget"") then
		FixTool = plr.Character:FindFirstChild(""ClickTarget"")
		FixTool.Parent = plr.Backpack
		FixTool.Parent = plr.Character
	end
	if plr.Character:FindFirstChild(""potion"") then
		FixTool = plr.Character:FindFirstChild(""potion"")
		FixTool.Parent = plr.Backpack
		FixTool.Parent = plr.Character
	end
end

local function ToggleRagdoll(bool)
	pcall(function()
		plr.Character[""Falling down""].Disabled = bool
		plr.Character[""Swimming""].Disabled = bool
		plr.Character[""StartRagdoll""].Disabled = bool
		plr.Character[""Pushed""].Disabled = bool
		plr.Character[""RagdollMe""].Disabled = bool
	end)
end

local function ToggleVoidProtection(bool)
	if bool then
		game.Workspace.FallenPartsDestroyHeight = 0/0
	else
		game.Workspace.FallenPartsDestroyHeight = -500
	end
end

local function PlayAnim(id,time,speed)
	pcall(function()
		plr.Character.Animate.Disabled = false
		local hum = plr.Character.Humanoid
		local animtrack = hum:GetPlayingAnimationTracks()
		for i,track in pairs(animtrack) do
			track:Stop()
		end
		plr.Character.Animate.Disabled = true
		local Anim = Instance.new(""Animation"")
		Anim.AnimationId = ""rbxassetid://""..id
		local loadanim = hum:LoadAnimation(Anim)
		loadanim:Play()
		loadanim.TimePosition = time
		loadanim:AdjustSpeed(speed)
		loadanim.Stopped:Connect(function()
			plr.Character.Animate.Disabled = false
			for i, track in pairs (animtrack) do
        		track:Stop()
    		end
		end)
	end)
end

local function StopAnim()
	plr.Character.Animate.Disabled = false
    local animtrack = plr.Character.Humanoid:GetPlayingAnimationTracks()
    for i, track in pairs (animtrack) do
        track:Stop()
    end
end

local function SendNotify(title, message, duration)
	game:GetService(""StarterGui""):SetCore(""SendNotification"", {Title = title,Text = message,Duration = duration;})
end

--LOAD GUI
task.wait(0.1)
local SysBroker = Instance.new(""ScreenGui"")
local Background = Instance.new(""ImageLabel"")
local TitleBarLabel = Instance.new(""TextLabel"")
local SectionList = Instance.new(""Frame"")
local Home_Section_Button = Instance.new(""TextButton"")
local Game_Section_Button = Instance.new(""TextButton"")
local Character_Section_Button = Instance.new(""TextButton"")
local Target_Section_Button = Instance.new(""TextButton"")
local Animations_Section_Button = Instance.new(""TextButton"")
local Misc_Section_Button = Instance.new(""TextButton"")
local Credits_Section_Button = Instance.new(""TextButton"")
local Game_Section = Instance.new(""ScrollingFrame"")
local CMDBar = Instance.new(""TextBox"")
local Home_Section = Instance.new(""ScrollingFrame"")
local Profile_Image = Instance.new(""ImageLabel"")
local Welcome_Label = Instance.new(""TextLabel"")
local Announce_Label = Instance.new(""TextLabel"")
local Character_Section = Instance.new(""ScrollingFrame"")
local WalkSpeed_Button = Instance.new(""TextButton"")
local WalkSpeed_Input = Instance.new(""TextBox"")
local ClearCheckpoint_Button = Instance.new(""TextButton"")
local JumpPower_Input = Instance.new(""TextBox"")
local JumpPower_Button = Instance.new(""TextButton"")
local SaveCheckpoint_Button = Instance.new(""TextButton"")
local Respawn_Button = Instance.new(""TextButton"")
local FlySpeed_Button = Instance.new(""TextButton"")
local FlySpeed_Input = Instance.new(""TextBox"")
local Fly_Button = Instance.new(""TextButton"")
local Target_Section = Instance.new(""ScrollingFrame"")
local TargetImage = Instance.new(""ImageLabel"")
local ClickTargetTool_Button = Instance.new(""ImageButton"")
local TargetName_Input = Instance.new(""TextBox"")
local UserIDTargetLabel = Instance.new(""TextLabel"")
local ViewTarget_Button = Instance.new(""TextButton"")
local FlingTarget_Button = Instance.new(""TextButton"")
local FocusTarget_Button = Instance.new(""TextButton"")
local BenxTarget_Button = Instance.new(""TextButton"")
local TeleportTarget_Button = Instance.new(""TextButton"")
local HeadsitTarget_Button = Instance.new(""TextButton"")
local StandTarget_Button = Instance.new(""TextButton"")
local BackpackTarget_Button = Instance.new(""TextButton"")
local DoggyTarget_Button = Instance.new(""TextButton"")
local DragTarget_Button = Instance.new(""TextButton"")
local Animations_Section = Instance.new(""ScrollingFrame"")
local VampireAnim_Button = Instance.new(""TextButton"")
local HeroAnim_Button = Instance.new(""TextButton"")
local ZombieClassicAnim_Button = Instance.new(""TextButton"")
local MageAnim_Button = Instance.new(""TextButton"")
local GhostAnim_Button = Instance.new(""TextButton"")
local ElderAnim_Button = Instance.new(""TextButton"")
local LevitationAnim_Button = Instance.new(""TextButton"")
local AstronautAnim_Button = Instance.new(""TextButton"")
local NinjaAnim_Button = Instance.new(""TextButton"")
local WerewolfAnim_Button = Instance.new(""TextButton"")
local CartoonAnim_Button = Instance.new(""TextButton"")
local PirateAnim_Button = Instance.new(""TextButton"")
local SneakyAnim_Button = Instance.new(""TextButton"")
local ToyAnim_Button = Instance.new(""TextButton"")
local KnightAnim_Button = Instance.new(""TextButton"")
--NEWS
local ConfidentAnim_Button = Instance.new(""TextButton"")
local PopstarAnim_Button = Instance.new(""TextButton"")
local PrincessAnim_Button = Instance.new(""TextButton"")
local CowboyAnim_Button = Instance.new(""TextButton"")
local PatrolAnim_Button = Instance.new(""TextButton"")
local ZombieFEAnim_Button = Instance.new(""TextButton"")
--NEWS
local Misc_Section = Instance.new(""ScrollingFrame"")
local AntiAFK_Button = Instance.new(""TextButton"")
local Shaders_Button = Instance.new(""TextButton"")
local Day_Button = Instance.new(""TextButton"")
local Night_Button = Instance.new(""TextButton"")
local Rejoin_Button = Instance.new(""TextButton"")
local CMDX_Button = Instance.new(""TextButton"")
local InfYield_Button = Instance.new(""TextButton"")
local Serverhop_Button = Instance.new(""TextButton"")
local Explode_Button = Instance.new(""TextButton"")
local FreeEmotes_Button = Instance.new(""TextButton"")
local ChatBox_Input = Instance.new(""TextBox"")
local Credits_Section = Instance.new(""ScrollingFrame"")
local Credits_Label = Instance.new(""TextLabel"")
local Crown = Instance.new(""ImageLabel"")
local Assets = Instance.new(""Folder"")
local Ticket_Asset = Instance.new(""ImageButton"")
local Click_Asset = Instance.new(""ImageButton"")
local Velocity_Asset = Instance.new(""BodyAngularVelocity"")
local Fly_Pad = Instance.new(""ImageButton"")
local UIGradient = Instance.new(""UIGradient"")
local FlyAButton = Instance.new(""TextButton"")
local FlyDButton = Instance.new(""TextButton"")
local FlyWButton = Instance.new(""TextButton"")
local FlySButton = Instance.new(""TextButton"")
local OpenClose = Instance.new(""ImageButton"")
local UICornerOC = Instance.new(""UICorner"")

local function CreateToggle(Button)
	local NewToggle = Ticket_Asset:Clone()
	NewToggle.Parent = Button
end

local function CreateClicker(Button)
	local NewClicker = Click_Asset:Clone()
	NewClicker.Parent = Button
end

SysBroker.Name = ""SysBroker""
SysBroker.Parent = game.CoreGui
SysBroker.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Background.Name = ""Background""
Background.Parent = SysBroker
Background.AnchorPoint = Vector2.new(0.5, 0.5)
Background.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
Background.BorderColor3 = Color3.fromRGB(0, 255, 255)
Background.Position = UDim2.new(0.5, 0, 0.5, 0)
Background.Size = UDim2.new(0, 500, 0, 350)
Background.ZIndex = 9
Background.Image = ""rbxassetid://159991693""
Background.ImageColor3 = Color3.fromRGB(0, 255, 255)
Background.ImageTransparency = 0.600
Background.ScaleType = Enum.ScaleType.Tile
Background.SliceCenter = Rect.new(0, 256, 0, 256)
Background.TileSize = UDim2.new(0, 30, 0, 30)
Background.Active = true
Background.Draggable = true

TitleBarLabel.Name = ""TitleBarLabel""
TitleBarLabel.Parent = Background
TitleBarLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
TitleBarLabel.BackgroundTransparency = 0.250
TitleBarLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
TitleBarLabel.BorderSizePixel = 0
TitleBarLabel.Size = UDim2.new(1, 0, 0, 30)
TitleBarLabel.Font = Enum.Font.Unknown
TitleBarLabel.Text = ""____/SYSTEMBROKEN\\___""
TitleBarLabel.TextColor3 = Color3.fromRGB(0, 255, 255)
TitleBarLabel.TextScaled = true
TitleBarLabel.TextSize = 14.000
TitleBarLabel.TextWrapped = true
TitleBarLabel.TextXAlignment = Enum.TextXAlignment.Left

SectionList.Name = ""SectionList""
SectionList.Parent = Background
SectionList.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
SectionList.BackgroundTransparency = 0.500
SectionList.BorderColor3 = Color3.fromRGB(0, 0, 0)
SectionList.BorderSizePixel = 0
SectionList.Position = UDim2.new(0, 0, 0, 30)
SectionList.Size = UDim2.new(0, 105, 0, 320)

Home_Section_Button.Name = ""Home_Section_Button""
Home_Section_Button.Parent = SectionList
Home_Section_Button.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
Home_Section_Button.BackgroundTransparency = 0.500
Home_Section_Button.BorderColor3 = Color3.fromRGB(0, 0, 0)
Home_Section_Button.BorderSizePixel = 0
Home_Section_Button.Position = UDim2.new(0, 0, 0, 25)
Home_Section_Button.Size = UDim2.new(0, 105, 0, 30)
Home_Section_Button.Font = Enum.Font.Oswald
Home_Section_Button.Text = ""Home""
Home_Section_Button.TextColor3 = Color3.fromRGB(0, 0, 0)
Home_Section_Button.TextScaled = true
Home_Section_Button.TextSize = 14.000
Home_Section_Button.TextWrapped = true

Game_Section_Button.Name = ""Game_Section_Button""
Game_Section_Button.Parent = SectionList
Game_Section_Button.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
Game_Section_Button.BackgroundTransparency = 0.500
Game_Section_Button.BorderColor3 = Color3.fromRGB(0, 0, 0)
Game_Section_Button.BorderSizePixel = 0
Game_Section_Button.Position = UDim2.new(0, 0, 0, 65)
Game_Section_Button.Size = UDim2.new(0, 105, 0, 30)
Game_Section_Button.Font = Enum.Font.Oswald
Game_Section_Button.Text = ""Game""
Game_Section_Button.TextColor3 = Color3.fromRGB(0, 0, 0)
Game_Section_Button.TextScaled = true
Game_Section_Button.TextSize = 14.000
Game_Section_Button.TextWrapped = true

Character_Section_Button.Name = ""Character_Section_Button""
Character_Section_Button.Parent = SectionList
Character_Section_Button.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
Character_Section_Button.BackgroundTransparency = 0.500
Character_Section_Button.BorderColor3 = Color3.fromRGB(0, 0, 0)
Character_Section_Button.BorderSizePixel = 0
Character_Section_Button.Position = UDim2.new(0, 0, 0, 105)
Character_Section_Button.Size = UDim2.new(0, 105, 0, 30)
Character_Section_Button.Font = Enum.Font.Oswald
Character_Section_Button.Text = ""Character""
Character_Section_Button.TextColor3 = Color3.fromRGB(0, 0, 0)
Character_Section_Button.TextScaled = true
Character_Section_Button.TextSize = 14.000
Character_Section_Button.TextWrapped = true

Target_Section_Button.Name = ""Target_Section_Button""
Target_Section_Button.Parent = SectionList
Target_Section_Button.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
Target_Section_Button.BackgroundTransparency = 0.500
Target_Section_Button.BorderColor3 = Color3.fromRGB(0, 0, 0)
Target_Section_Button.BorderSizePixel = 0
Target_Section_Button.Position = UDim2.new(0, 0, 0, 145)
Target_Section_Button.Size = UDim2.new(0, 105, 0, 30)
Target_Section_Button.Font = Enum.Font.Oswald
Target_Section_Button.Text = ""Target""
Target_Section_Button.TextColor3 = Color3.fromRGB(0, 0, 0)
Target_Section_Button.TextScaled = true
Target_Section_Button.TextSize = 14.000
Target_Section_Button.TextWrapped = true

Animations_Section_Button.Name = ""Animations_Section_Button""
Animations_Section_Button.Parent = SectionList
Animations_Section_Button.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
Animations_Section_Button.BackgroundTransparency = 0.500
Animations_Section_Button.BorderColor3 = Color3.fromRGB(0, 0, 0)
Animations_Section_Button.BorderSizePixel = 0
Animations_Section_Button.Position = UDim2.new(0, 0, 0, 185)
Animations_Section_Button.Size = UDim2.new(0, 105, 0, 30)
Animations_Section_Button.Font = Enum.Font.Oswald
Animations_Section_Button.Text = ""Animations""
Animations_Section_Button.TextColor3 = Color3.fromRGB(0, 0, 0)
Animations_Section_Button.TextScaled = true
Animations_Section_Button.TextSize = 14.000
Animations_Section_Button.TextWrapped = true

Misc_Section_Button.Name = ""Misc_Section_Button""
Misc_Section_Button.Parent = SectionList
Misc_Section_Button.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
Misc_Section_Button.BackgroundTransparency = 0.500
Misc_Section_Button.BorderColor3 = Color3.fromRGB(0, 0, 0)
Misc_Section_Button.BorderSizePixel = 0
Misc_Section_Button.Position = UDim2.new(0, 0, 0, 225)
Misc_Section_Button.Size = UDim2.new(0, 105, 0, 30)
Misc_Section_Button.Font = Enum.Font.Oswald
Misc_Section_Button.Text = ""Misc""
Misc_Section_Button.TextColor3 = Color3.fromRGB(0, 0, 0)
Misc_Section_Button.TextScaled = true
Misc_Section_Button.TextSize = 14.000
Misc_Section_Button.TextWrapped = true

Credits_Section_Button.Name = ""Credits_Section_Button""
Credits_Section_Button.Parent = SectionList
Credits_Section_Button.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
Credits_Section_Button.BackgroundTransparency = 0.500
Credits_Section_Button.BorderColor3 = Color3.fromRGB(0, 0, 0)
Credits_Section_Button.BorderSizePixel = 0
Credits_Section_Button.Position = UDim2.new(0, 0, 0, 265)
Credits_Section_Button.Size = UDim2.new(0, 105, 0, 30)
Credits_Section_Button.Font = Enum.Font.Oswald
Credits_Section_Button.Text = ""Credits""
Credits_Section_Button.TextColor3 = Color3.fromRGB(0, 0, 0)
Credits_Section_Button.TextScaled = true
Credits_Section_Button.TextSize = 14.000
Credits_Section_Button.TextWrapped = true

Game_Section.Name = ""Game_Section""
Game_Section.Parent = Background
Game_Section.Active = true
Game_Section.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Game_Section.BackgroundTransparency = 1.000
Game_Section.BorderColor3 = Color3.fromRGB(0, 0, 0)
Game_Section.BorderSizePixel = 0
Game_Section.Position = UDim2.new(0, 105, 0, 30)
Game_Section.Size = UDim2.new(0, 395, 0, 320)
Game_Section.Visible = false
Game_Section.CanvasSize = UDim2.new(0, 0, 1.85, 0)
Game_Section.ScrollBarThickness = 5


Home_Section.Name = ""Home_Section""
Home_Section.Parent = Background
Home_Section.Active = true
Home_Section.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Home_Section.BackgroundTransparency = 1.000
Home_Section.BorderColor3 = Color3.fromRGB(0, 0, 0)
Home_Section.BorderSizePixel = 0
Home_Section.Position = UDim2.new(0, 105, 0, 30)
Home_Section.Size = UDim2.new(0, 395, 0, 320)
Home_Section.CanvasSize = UDim2.new(0, 0, 0, 0)
Home_Section.ScrollBarThickness = 5

Profile_Image.Name = ""Profile_Image""
Profile_Image.Parent = Home_Section
Profile_Image.BackgroundColor3 = Color3.fromRGB(30,30,30)
Profile_Image.BorderColor3 = Color3.fromRGB(0, 0, 0)
Profile_Image.BorderSizePixel = 0
Profile_Image.Position = UDim2.new(0, 25, 0, 25)
Profile_Image.Size = UDim2.new(0, 100, 0, 100)
Profile_Image.Image = Players:GetUserThumbnailAsync(plr.UserId,Enum.ThumbnailType.HeadShot,Enum.ThumbnailSize.Size420x420)

Welcome_Label.Name = ""Welcome_Label""
Welcome_Label.Parent = Home_Section
Welcome_Label.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Welcome_Label.BackgroundTransparency = 1.000
Welcome_Label.BorderColor"
39TyJH1R,DRR,phystota,C++,Friday 30th of May 2025 03:46:13 PM CDT,"#include <iostream>
#include <random>
#include <fstream>
#include <assert.h>
 
#include <math.h>
#include <iomanip>  // For std::fixed and std::setprecision

#include <vector>
#include <cmath>


int main() {

//    double D = 1.55986;
    double D = 0.0;
    double dx = 0.000523438;
    double L = 0.067;
    int N_G = 129;
   
    double dt = 1.0e-2;
    double alpha = dt*D/(dx*dx);
    std::cout << ""alpha stability: "" << alpha << ""\n"";
    std::cout << ""max dt for the diffusion: "" << 0.5*dx*dx/D << ""\n"";

    double T_diff = L*L/(M_PI*M_PI*D); std::cout << T_diff << ""\n"";

    int max_iter = 5000000;    

    double GAS_DENSITY = 9.64e+20;
    double R = sqrt(1.6e-4/M_PI);
    double nu_loss = D/(R*R);


    double accuracy = 1.0E-4;
    double cycle = 0;                   // to sace the moment of iteraion

    double S0, S1, S2;
    double cylindric_diff1 = 0.0, cylindric_diff2 = 0.0;  

    std::vector<double> e1_density_fw(N_G, 0);
    std::vector<double> e1_density_bw(N_G, 0);
    std::vector<double> e2_density_fw(N_G, 0);
    std::vector<double> e2_density_bw(N_G, 0);    
    std::vector<double> gas_dens_local(N_G, GAS_DENSITY);

    std::ofstream file0(""initial.dat"");
    file0 << std::scientific << std::setprecision(6);    

    std::ofstream file1(""final.dat"");
    file1 << std::scientific << std::setprecision(6);      


    std::ifstream infile(""dat/rates.dat"");  
    std::vector<double> avg_rate1f; std::vector<double> avg_rate1b; 
    std::vector<double> avg_rate2f; std::vector<double> avg_rate2b;


    double a, b, c, d;

    while (infile >> a >> b >> c >> d){
        avg_rate1f.push_back(a); avg_rate1b.push_back(b);
        avg_rate2f.push_back(c); avg_rate2b.push_back(d);
    }

    // initial condition:
    for (int j = 0;  j < N_G; j++){
        e1_density_bw[j] = 0.0;
        e2_density_bw[j] = 0.0;
    }


    for (int k = 0; k < max_iter; k++){
         
        e1_density_bw[0] = e1_density_bw[1]; e1_density_bw[N_G-1] = e1_density_bw[N_G-2];     
        e2_density_bw[0] = e2_density_bw[1]; e2_density_bw[N_G-1] = e2_density_bw[N_G-2];  
        gas_dens_local[0] = gas_dens_local[1]; gas_dens_local[N_G-1] = gas_dens_local[N_G-2];

        for (int j = 1; j < N_G-1; j++){                       

            S0 = dt*(-(avg_rate1f[j]+avg_rate2f[j])*gas_dens_local[j] + avg_rate1b[j]*e1_density_bw[j] + avg_rate2b[j]*e2_density_bw[j]);
            S1 = dt*(avg_rate1f[j]*gas_dens_local[j] - avg_rate1b[j]*e1_density_bw[j]);
            S2 = dt*(avg_rate2f[j]*gas_dens_local[j] - avg_rate2b[j]*e2_density_bw[j]);     

            e1_density_fw[j] = e1_density_bw[j]*(1.0 - 2*alpha) + alpha*(e1_density_bw[j+1] + e1_density_bw[j-1]) + S1;      // step of calculation     
            e2_density_fw[j] = e2_density_bw[j]*(1.0 - 2*alpha) + alpha*(e2_density_bw[j+1] + e2_density_bw[j-1]) + S2;
            gas_dens_local[j] += S0;
        
        }

        // boundary conditions:
                                    
        e1_density_fw[0] = e1_density_fw[1]; e1_density_fw[N_G-1] = e1_density_fw[N_G-2];
                                     
        e2_density_fw[0] = e2_density_fw[1]; e2_density_fw[N_G-1] = e2_density_fw[N_G-2];               


        double err1 = 0.0, err2 = 0.0;
        for(int j = 1; j < N_G-1; ++j) {
            err1 = std::max(err1, std::abs(e1_density_fw[j] - e1_density_bw[j])/dt);
            err2 = std::max(err2, std::abs(e2_density_fw[j] - e2_density_bw[j])/dt);
        }

        if(err1 < accuracy && err2 < accuracy) {
            cycle = k;
            std::cout << ""Converged in "" << k << "" iterations"" << ""\n"";
            break;
        }        

        for (int j = 0; j < N_G; j++){
            e1_density_bw[j] = e1_density_fw[j];                                                      // swap of arrays each step
            e2_density_bw[j] = e2_density_fw[j];
        }
    }

    for (int j = 0;  j < N_G; j++){
        double x = j*dx;
        file1 << x << "" "" << e1_density_bw[j] << "" "" << e2_density_bw[j] << "" "" << gas_dens_local[j]<< ""\n"";
    }    

    file0.close();
    file1.close();

    return 0;

}"
6FHFb4x3,subestaciones create,Cavayo,Lua,Friday 30th of May 2025 03:09:12 PM CDT,"local peripherals = {
    { side = ""modular_accumulator_0"", nombre = ""Oliscopo"", color = colors.lime },
    { side = ""modular_accumulator_1"", nombre = ""Oreo"",     color = colors.lime },
    { side = ""modular_accumulator_2"", nombre = ""Colirios"", color = colors.lime },
    { side = ""modular_accumulator_3"", nombre = ""Colibri"",  color = colors.lime },
}

local monitor = peripheral.find(""monitor"")
monitor.setTextScale(1)
monitor.setBackgroundColor(colors.black)
monitor.clear()

local w, h = monitor.getSize()
local espacioEntre = 2
local anchoCelda = math.floor((w - espacioEntre) / 2)

-- Posiciones calculadas de forma dinámica
local posiciones = {
    { x = 1,                y = 3 }, -- izquierda arriba
    { x = anchoCelda + espacioEntre + 1, y = 3 }, -- derecha arriba
    { x = 1,                y = 11 }, -- izquierda abajo
    { x = anchoCelda + espacioEntre + 1, y = 11 }, -- derecha abajo
}

-- Centrado dinámico
local function escribirCentrado(texto, xInicio, ancho, y, color)
    local x = xInicio + math.floor((ancho - #texto) / 2)
    monitor.setCursorPos(xInicio, y)
    monitor.setTextColor(color or colors.white)
    monitor.write(("" ""):rep(ancho)) -- limpia línea
    monitor.setCursorPos(x, y)
    monitor.write(texto)
end

local function formatFE(val)
    if val >= 1e6 then
        return string.format(""%.2fM"", val / 1e6)
    else
        return string.format(""%.0f"", val)
    end
end

while true do
    local totalEnergia, totalCapacidad = 0, 0
    local datos = {}

    for i, perif in ipairs(peripherals) do
        local acc = peripheral.wrap(perif.side)
        local energia = acc.getEnergy() or 0
        local capacidad = acc.getCapacity() or 1
        local porcentaje = math.floor((energia / capacidad) * 100)
        totalEnergia = totalEnergia + energia
        totalCapacidad = totalCapacidad + capacidad
        datos[i] = { energia = energia, capacidad = capacidad, porcentaje = porcentaje }
    end

    local media = math.floor((totalEnergia / totalCapacidad) * 100)

    -- Línea superior centrada
    local textoMedia = ""Carga media de la red: "" .. media .. ""%""
    local xMedia = math.floor((w - #textoMedia) / 2) + 1
    monitor.setCursorPos(1, 1)
    monitor.setTextColor(media < 30 and colors.red or colors.white)
    monitor.write(("" ""):rep(w))
    monitor.setCursorPos(xMedia, 1)
    monitor.write(textoMedia)

    -- Subestaciones
    for i, perif in ipairs(peripherals) do
        local d = datos[i]
        local pos = posiciones[i]
        local color = d.porcentaje <= 20 and colors.red or perif.color

        escribirCentrado(perif.nombre, pos.x, anchoCelda, pos.y, color)
        escribirCentrado(""--------"", pos.x, anchoCelda, pos.y + 1, color)
        escribirCentrado(formatFE(d.energia) .. "" / "" .. formatFE(d.capacidad) .. "" FE"", pos.x, anchoCelda, pos.y + 2, color)
        escribirCentrado(d.porcentaje .. ""%"", pos.x, anchoCelda, pos.y + 3, color)
    end

    sleep(1)
end

"
BBekKLTg,Untitled,nico78916,Lua,Friday 30th of May 2025 02:58:39 PM CDT,"-- Script de minage d'un chunk entier jusqu'à y = -64 avec refuel automatique

local SIZE = 16  -- Taille du chunk (16x16)
local FUEL_THRESHOLD = 100  -- Niveau de fuel minimum avant ravitaillement
local dir = true
local y = 0
-- Fonction pour ravitailler en carburant
function refuelIfNeeded()
    if turtle.getFuelLevel() < FUEL_THRESHOLD then
        print(""Ravitaillement en carburant..."")
        turtle.select(1) -- Sélectionne le premier slot
        turtle.refuel()
    end
end

-- Fonction pour miner une colonne entière
function mineColumn()
    if dir then
    	repeat
    	    turtle.digDown()
    	    refuelIfNeeded()
            y = y +1
   		until not turtle.down()
        dir = false
    else
        repeat
    	    turtle.digUp()
    	    refuelIfNeeded()
            turtle.up()
            y = y - 1
   		until y == 0
        dir = true
	end
end

-- Fonction pour miner un chunk complet
function mineChunk()
    for x = 1, SIZE do
        for z = 1, SIZE do
            mineColumn()
            if z < SIZE then
				while not turtle.dig() do
					if dir then
						turtle.down()
						y = y + 1
					else
						turltle.up()
    					y = y - 1
					end
				end
                turtle.forward()
            end
        end
        -- Repositionnement à chaque fin de ligne
        if x < SIZE then
            if x % 2 == 1 then
                turtle.turnRight()
                turtle.forward()
                turtle.turnRight()
            else
                turtle.turnLeft()
                turtle.forward()
                turtle.turnLeft()
            end
        end
    end
end

-- Démarrer l'exploitation minière
print(""Début du minage du chunk..."")
mineChunk()
print(""Minage terminé !"")
"
brEqJ9sh,LongBow WireFrame Animation Tweaks= Done Completed!!!,alien_fx_fiend,C++,Friday 30th of May 2025 02:27:33 PM CDT,"==++ Here's the full code for (file 1/1) of ""BowAndArrow.cpp""::: ++==
```BowAndArrow.cpp
//  BowAndArrow.cpp
//  Simple Win32 / Direct2D demo - ""wireframe longbow""
//  Build: cl /EHsc /DUNICODE /D_UNICODE BowAndArrow.cpp d2d1.lib user32.lib gdi32.lib

#include <windows.h>
#include <d2d1.h>
#include <chrono>
#include <cmath>
#include <algorithm>
#pragma comment(lib, ""d2d1"")

// -------------------------------------------------
// Small RAII helper to release COM objects
// -------------------------------------------------
template<class T> void SafeRelease(T** pp)
{
    if (*pp) { (*pp)->Release(); *pp = nullptr; }
}

// -------------------------------------------------
// Animation constants
// -------------------------------------------------
constexpr float  COCK_TIME = 1.0f;   // seconds
constexpr float  HOLD_TIME = 0.5f;   // seconds
constexpr float  FIRE_TIME = 1.0f;   // seconds
constexpr UINT   TIMER_ID = 1;
constexpr UINT   TIMER_MS = 16;     // ~60 FPS

enum class AnimStage { Cocking, Hold, Firing, Done };
constexpr float ARROW_REST_OFFSET = 500.0f;   // pixels in-front of bow ( > 0 )

// String pull distance (pixels) and bow X center
constexpr float STRING_MAX_PULL = 180.0f;
constexpr float CX_BOW = 220.0f;

// -------------------------------------------------
// Global state (kept simple for a demo)
// -------------------------------------------------
HWND                    g_hWnd = nullptr;
ID2D1Factory* g_pFactory = nullptr;
ID2D1HwndRenderTarget* g_pRenderTarget = nullptr;
ID2D1SolidColorBrush* g_pBrush = nullptr;

float g_windowW = 1280.0f;
float g_windowH = 720.0f;
// Modify g_arrowPosX initialization to start off-screen at the top
float g_arrowPosX = CX_BOW;   // Will be properly positioned in animation update
// Add these with other global variables
float g_arrowPosY = 0.0f;       // Variable for arrow's vertical position
float g_arrowRotation = 0.0f;   // Rotation angle in radians

// Geometry helpers (depend on window height, so they are updated in WM_SIZE)
float cx = CX_BOW;
float topY = 120.0f;
float bottomY = 600.0f;   // will be overwritten in WM_SIZE
float midY = 360.0f;
float halfHeight = 240.0f;

// Animation variables
AnimStage   g_stage = AnimStage::Cocking;
float       g_timeInStage = 0.0f;        // seconds
auto        g_prevTick = std::chrono::high_resolution_clock::now();
float       g_stringOffset = 0.0f;        // 0 = relaxed, 1 = fully drawn
//float       g_arrowPosX = 0.0f;        // head position

// -------------------------------------------------
// Helpers
// -------------------------------------------------
float Lerp(float a, float b, float t) { return a + (b - a) * t; }

// Create or re-create render target
HRESULT CreateDeviceResources()
{
    if (g_pRenderTarget) return S_OK;

    RECT rc; GetClientRect(g_hWnd, &rc);

    D2D1_SIZE_U size = D2D1::SizeU(rc.right - rc.left,
        rc.bottom - rc.top);

    HRESULT hr = g_pFactory->CreateHwndRenderTarget(
        D2D1::RenderTargetProperties(),
        D2D1::HwndRenderTargetProperties(g_hWnd, size),
        &g_pRenderTarget);

    if (SUCCEEDED(hr))
        hr = g_pRenderTarget->CreateSolidColorBrush(
            D2D1::ColorF(D2D1::ColorF::White), &g_pBrush);

    return hr;
}

void DiscardDeviceResources()
{
    SafeRelease(&g_pBrush);
    SafeRelease(&g_pRenderTarget);
}

// -------------------------------------------------
// Core rendering
// -------------------------------------------------
void OnRender()
{
    if (FAILED(CreateDeviceResources()))
        return;

    g_pRenderTarget->BeginDraw();
    g_pRenderTarget->Clear(D2D1::ColorF(0x202020)); // dark bg

    // -------------------------------------------------
    // 1. Draw Bow limbs (two quadratic curves)
    // -------------------------------------------------
    ID2D1PathGeometry* pGeom = nullptr;
    ID2D1GeometrySink* pSink = nullptr;
    if (SUCCEEDED(g_pFactory->CreatePathGeometry(&pGeom)))
    {
        pGeom->Open(&pSink);

        //--------------------------------------------------------------
        //  One continuous "")""-shaped limb with a slightly pointy tip.
        //  End-points stay on the string ( (cx, topY) & (cx, bottomY) )
        //--------------------------------------------------------------
        constexpr float NOSE = 35.0f;               // how far the tips stick out
        const     float BULGE = halfHeight * 0.5f;  // max belly distance (x)

        pSink->BeginFigure(D2D1::Point2F(cx, topY), D2D1_FIGURE_BEGIN_HOLLOW);

        // Draw semicircle bow with pointy tip at middle
        // First quarter - top to middle-top
        pSink->AddBezier(
            D2D1::BezierSegment(
                D2D1::Point2F(cx + NOSE, topY + halfHeight * 0.1f),      // slight curve at top
                D2D1::Point2F(cx + BULGE, topY + halfHeight * 0.5f),     // first quarter curve
                D2D1::Point2F(cx + BULGE + NOSE, midY - NOSE)));         // approaching tip

        // Middle part with pointy tip
        pSink->AddBezier(
            D2D1::BezierSegment(
                D2D1::Point2F(cx + BULGE + NOSE * 1.2f, midY - NOSE * 0.5f),  // curve to tip
                D2D1::Point2F(cx + BULGE + NOSE * 1.5f, midY),               // pointy tip
                D2D1::Point2F(cx + BULGE + NOSE * 1.2f, midY + NOSE * 0.5f)));  // curve from tip

        // Last quarter - middle-bottom to bottom
        pSink->AddBezier(
            D2D1::BezierSegment(
                D2D1::Point2F(cx + BULGE + NOSE, midY + NOSE),            // after tip
                D2D1::Point2F(cx + BULGE, bottomY - halfHeight * 0.5f),   // last quarter curve
                D2D1::Point2F(cx + NOSE, bottomY - halfHeight * 0.1f)));  // approaching bottom

        // Connect back to string
        pSink->AddBezier(
            D2D1::BezierSegment(
                D2D1::Point2F(cx + NOSE * 0.5f, bottomY - NOSE * 0.25f),  // curve to bottom
                D2D1::Point2F(cx, bottomY),                              // bottom endpoint
                D2D1::Point2F(cx, bottomY)));                            // dummy point (required)

        pSink->EndFigure(D2D1_FIGURE_END_OPEN);

        pSink->Close();
        g_pRenderTarget->DrawGeometry(pGeom, g_pBrush, 2.0f);

        SafeRelease(&pSink);
        SafeRelease(&pGeom);
    }

    // -------------------------------------------------
    // 2. Draw Bow string
    // -------------------------------------------------
    float pull = g_stringOffset * STRING_MAX_PULL;
    D2D1_POINT_2F p1 = D2D1::Point2F(cx, topY);
    D2D1_POINT_2F pm = D2D1::Point2F(cx - pull, midY);
    D2D1_POINT_2F p2 = D2D1::Point2F(cx, bottomY);

    g_pRenderTarget->DrawLine(p1, pm, g_pBrush, 2.0f);
    g_pRenderTarget->DrawLine(pm, p2, g_pBrush, 2.0f);

    // Replace the OnRender arrow drawing section with this to use variable Y position
// Replace the OnRender arrow drawing section with this to use variable Y position and rotation
// Replace the OnRender arrow drawing section with this to use variable Y position and rotation
// -------------------------------------------------
// 3. Draw Arrow (simple shaft + head + tail)
// -------------------------------------------------
    float arrowLen = 240.0f;
    float arrowHead = 18.0f;

    // Apply rotation to the arrow
    g_pRenderTarget->SetTransform(
        D2D1::Matrix3x2F::Rotation(
            g_arrowRotation * (180.0f / 3.14159f), // Convert radians to degrees
            D2D1::Point2F(g_arrowPosX, g_arrowPosY)
        )
    );

    // Shaft
    g_pRenderTarget->DrawLine(
        D2D1::Point2F(g_arrowPosX, g_arrowPosY),
        D2D1::Point2F(g_arrowPosX - arrowLen, g_arrowPosY),
        g_pBrush, 2.0f);

    // Arrow head (small triangle)
    D2D1_POINT_2F headPts[3] = {
        D2D1::Point2F(g_arrowPosX,                 g_arrowPosY),
        D2D1::Point2F(g_arrowPosX - arrowHead,     g_arrowPosY - arrowHead * 0.5f),
        D2D1::Point2F(g_arrowPosX - arrowHead,     g_arrowPosY + arrowHead * 0.5f)
    };
    g_pRenderTarget->DrawLine(headPts[0], headPts[1], g_pBrush, 2.0f);
    g_pRenderTarget->DrawLine(headPts[0], headPts[2], g_pBrush, 2.0f);

    // Fletching (3 short diagonal lines)
    const float fletch = 20.0f;
    const float step = 5.0f;
    // Top fletching
    for (int i = 0; i < 6; ++i)
    {
        float x = g_arrowPosX - arrowLen + i * step;
        g_pRenderTarget->DrawLine(
            D2D1::Point2F(x, g_arrowPosY),
            D2D1::Point2F(x - fletch, g_arrowPosY - fletch * 0.4f + i * 3.0f),
            g_pBrush, 2.0f);
    }
    // Bottom fletching
    for (int i = 0; i < 6; ++i)
    {
        float x = g_arrowPosX - arrowLen + i * step;
        g_pRenderTarget->DrawLine(
            D2D1::Point2F(x, g_arrowPosY),
            D2D1::Point2F(x - fletch, g_arrowPosY + fletch * 0.4f - i * 3.0f),
            g_pBrush, 2.0f);
    }

    // Reset transform for other drawing operations
    g_pRenderTarget->SetTransform(D2D1::Matrix3x2F::Identity());

    // Present
    HRESULT hr = g_pRenderTarget->EndDraw();
    if (hr == D2DERR_RECREATE_TARGET)
        DiscardDeviceResources();
}

// -------------------------------------------------
// Animation tick (called from WM_TIMER)
// -------------------------------------------------
// Replace the UpdateAnimation function with this updated version
// Replace the UpdateAnimation function with this updated version
void UpdateAnimation()
{
    // Compute delta time
    auto  now = std::chrono::high_resolution_clock::now();
    float dt = std::chrono::duration<float>(now - g_prevTick).count();
    g_prevTick = now;
    g_timeInStage += dt;

    switch (g_stage)
    {
    case AnimStage::Cocking:
    {
        float t = min(g_timeInStage / COCK_TIME, 1.0f);

        if (t < 0.6f) {
            // First part: arrow dropping from top with tail pointing down
            float arcT = t / 0.6f;  // Normalize to 0-1 for just this part

            // Starting position at top, end at bow position
            float startX = cx + 500.0f;    // Start slightly right of bow
            float startY = 0.0f;           // Start at top of screen
            float endX = cx + 50.0f;       // End to the right of bow
            float endY = midY - 50.0f;     // End slightly above midpoint

            // Calculate curved path 
            g_arrowPosX = Lerp(startX, endX, arcT);
            g_arrowPosY = Lerp(startY, endY, arcT * arcT); // Accelerate down

            // Arrow has tail pointing down (pointing up = -90 degrees = -PI/2)
            g_arrowRotation = -1.57079f + arcT * 1.07079f; // -PI/2 to close to 0
        }
        else if (t < 0.8f) {
            // Second part: arrow rotates to horizontal and moves into position
            float alignT = (t - 0.6f) / 0.2f;  // Normalize to 0-1 for just this part

            // Move arrow into position horizontally
            float startX = cx + 50.0f;
            float startY = midY - 50.0f;
            float endX = cx + 50.0f;  // Position just right of the bow
            float endY = midY;        // At the midpoint height

            g_arrowPosX = Lerp(startX, endX, alignT);
            g_arrowPosY = Lerp(startY, endY, alignT);

            // Complete the rotation to horizontal
            g_arrowRotation = Lerp(-0.5f, 0.0f, alignT); // Finish rotating to horizontal
        }
        else {
            // Third part: arrow attaches to string and string gets pulled
            float stringT = (t - 0.8f) / 0.2f;  // Normalize to 0-1 for just this part

            // Move arrow with string as it's drawn back
            float startX = cx + 50.0f;
            float endX = cx - STRING_MAX_PULL + 50.0f;

            g_arrowPosX = Lerp(startX, endX, stringT);
            g_arrowPosY = midY;
            g_arrowRotation = 0.0f;  // Keep horizontal

            // Pull string back gradually
            g_stringOffset = stringT;
        }

        if (t >= 1.0f) { g_stage = AnimStage::Hold; g_timeInStage = 0.f; }
    } break;

    case AnimStage::Hold:
        // Arrow is now at the correct position
        g_arrowPosY = midY;
        g_arrowRotation = 0.0f;  // Ensure arrow is horizontal

        if (g_timeInStage >= HOLD_TIME)
        {
            g_stage = AnimStage::Firing; g_timeInStage = 0.f;
        }
        break;

    case AnimStage::Firing:
    {
        float t = min(g_timeInStage / FIRE_TIME, 1.0f);
        g_stringOffset = 1.0f - t;             // 1 -> 0  (same)

        float startX = cx - STRING_MAX_PULL + 50.0f;
        float endX = g_windowW + 100.0f;
        g_arrowPosX = Lerp(startX, endX, t);
        g_arrowPosY = midY; // Keep arrow on straight horizontal path
        g_arrowRotation = 0.0f;  // Keep arrow horizontal

        if (t >= 1.0f)
        {
            g_stage = AnimStage::Cocking; g_timeInStage = 0.f;
            // Reset arrow to starting position for next animation cycle
            g_arrowPosX = cx + 500.0f;
            g_arrowPosY = 0.0f;
            g_arrowRotation = -1.57079f;  // Start with tail pointing down (arrow pointing up)
        }
    } break;

    case AnimStage::Done:
        // Not used anymore, but kept for completeness
        break;
    }

    // Request redraw
    InvalidateRect(g_hWnd, nullptr, FALSE);
}

// -------------------------------------------------
// Window procedure
// -------------------------------------------------
LRESULT CALLBACK WndProc(HWND hWnd, UINT msg,
    WPARAM wParam, LPARAM lParam)
{
    switch (msg)
    {
        // Add this initialization in WM_CREATE or before animation starts
    // Add to WM_CREATE case or main initialization
    // Add this initialization in WM_CREATE case
    case WM_CREATE:
        if (FAILED(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED,
            &g_pFactory)))
            return -1; // abort window creation
        SetTimer(hWnd, TIMER_ID, TIMER_MS, nullptr);
        g_prevTick = std::chrono::high_resolution_clock::now();
        g_arrowPosX = cx + 500.0f;   // Initialize right of bow
        g_arrowPosY = 0.0f;          // Initialize at top of screen
        g_arrowRotation = -1.57079f; // Start with tail pointing down (arrow pointing up)
        return 0;

    case WM_SIZE:
    {
        g_windowW = static_cast<float>(LOWORD(lParam));
        g_windowH = static_cast<float>(HIWORD(lParam));

        // Update dependent geometry values
        topY = 120.0f;
        bottomY = g_windowH - 120.0f;
        midY = (topY + bottomY) * 0.5f;
        halfHeight = (bottomY - topY) * 0.5f;

        if (g_pRenderTarget)
            g_pRenderTarget->Resize(
                D2D1::SizeU(static_cast<UINT>(g_windowW),
                    static_cast<UINT>(g_windowH)));
    }
    return 0;

    case WM_TIMER:
        if (wParam == TIMER_ID)
            UpdateAnimation();
        return 0;

    case WM_PAINT:
    {
        PAINTSTRUCT ps;
        BeginPaint(hWnd, &ps);
        OnRender();
        EndPaint(hWnd, &ps);
    } return 0;

    case WM_DESTROY:
        KillTimer(hWnd, TIMER_ID);
        DiscardDeviceResources();
        SafeRelease(&g_pFactory);
        PostQuitMessage(0);
        return 0;
    }
    return DefWindowProc(hWnd, msg, wParam, lParam);
}

// -------------------------------------------------
// WinMain - entry point
// -------------------------------------------------
int WINAPI wWinMain(HINSTANCE hInst, HINSTANCE, PWSTR, int nCmdShow)
{
    const wchar_t CLASS_NAME[] = L""BowWindow"";

    WNDCLASS wc = {};
    wc.lpfnWndProc = WndProc;
    wc.hInstance = hInst;
    wc.hCursor = LoadCursor(nullptr, IDC_ARROW);
    wc.lpszClassName = CLASS_NAME;
    RegisterClass(&wc);

    g_hWnd = CreateWindowEx(0, CLASS_NAME, L""Direct2D - Longbow Demo"",
        WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT,
        static_cast<int>(g_windowW),
        static_cast<int>(g_windowH),
        nullptr, nullptr, hInst, nullptr);

    ShowWindow(g_hWnd, nCmdShow);

    // Main message loop
    MSG msg;
    while (GetMessage(&msg, nullptr, 0, 0))
    {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }
    return 0;
}
```"
qEuchyYq,LongBow WireFrame Animation D2D-Win32 (Bkp b4 Tweaking Arrow Top Enter Position),alien_fx_fiend,C++,Friday 30th of May 2025 02:25:25 PM CDT,"==++ Here's the full code for ""BowAndArrow.cpp""::: ++==
//  BowAndArrow.cpp
//  Simple Win32 / Direct2D demo - ""wireframe longbow""
//  Build: cl /EHsc /DUNICODE /D_UNICODE BowAndArrow.cpp d2d1.lib user32.lib gdi32.lib

#include <windows.h>
#include <d2d1.h>
#include <chrono>
#include <cmath>
#include <algorithm>
#pragma comment(lib, ""d2d1"")

// -------------------------------------------------
// Small RAII helper to release COM objects
// -------------------------------------------------
template<class T> void SafeRelease(T** pp)
{
    if (*pp) { (*pp)->Release(); *pp = nullptr; }
}

// -------------------------------------------------
// Animation constants
// -------------------------------------------------
constexpr float  COCK_TIME = 1.0f;   // seconds
constexpr float  HOLD_TIME = 0.5f;   // seconds
constexpr float  FIRE_TIME = 1.0f;   // seconds
constexpr UINT   TIMER_ID = 1;
constexpr UINT   TIMER_MS = 16;     // ~60 FPS

enum class AnimStage { Cocking, Hold, Firing, Done };
constexpr float ARROW_REST_OFFSET = 500.0f;   // pixels in-front of bow ( > 0 )

// String pull distance (pixels) and bow X center
constexpr float STRING_MAX_PULL = 180.0f;
constexpr float CX_BOW = 220.0f;

// -------------------------------------------------
// Global state (kept simple for a demo)
// -------------------------------------------------
HWND                    g_hWnd = nullptr;
ID2D1Factory* g_pFactory = nullptr;
ID2D1HwndRenderTarget* g_pRenderTarget = nullptr;
ID2D1SolidColorBrush* g_pBrush = nullptr;

float g_windowW = 1280.0f;
float g_windowH = 720.0f;
// Modify g_arrowPosX initialization to start off-screen at the top
float g_arrowPosX = CX_BOW;   // Will be properly positioned in animation update
// Add these with other global variables
float g_arrowPosY = 0.0f;       // Variable for arrow's vertical position
float g_arrowRotation = 0.0f;   // Rotation angle in radians

// Geometry helpers (depend on window height, so they are updated in WM_SIZE)
float cx = CX_BOW;
float topY = 120.0f;
float bottomY = 600.0f;   // will be overwritten in WM_SIZE
float midY = 360.0f;
float halfHeight = 240.0f;

// Animation variables
AnimStage   g_stage = AnimStage::Cocking;
float       g_timeInStage = 0.0f;        // seconds
auto        g_prevTick = std::chrono::high_resolution_clock::now();
float       g_stringOffset = 0.0f;        // 0 = relaxed, 1 = fully drawn
//float       g_arrowPosX = 0.0f;        // head position

// -------------------------------------------------
// Helpers
// -------------------------------------------------
float Lerp(float a, float b, float t) { return a + (b - a) * t; }

// Create or re-create render target
HRESULT CreateDeviceResources()
{
    if (g_pRenderTarget) return S_OK;

    RECT rc; GetClientRect(g_hWnd, &rc);

    D2D1_SIZE_U size = D2D1::SizeU(rc.right - rc.left,
        rc.bottom - rc.top);

    HRESULT hr = g_pFactory->CreateHwndRenderTarget(
        D2D1::RenderTargetProperties(),
        D2D1::HwndRenderTargetProperties(g_hWnd, size),
        &g_pRenderTarget);

    if (SUCCEEDED(hr))
        hr = g_pRenderTarget->CreateSolidColorBrush(
            D2D1::ColorF(D2D1::ColorF::White), &g_pBrush);

    return hr;
}

void DiscardDeviceResources()
{
    SafeRelease(&g_pBrush);
    SafeRelease(&g_pRenderTarget);
}

// -------------------------------------------------
// Core rendering
// -------------------------------------------------
void OnRender()
{
    if (FAILED(CreateDeviceResources()))
        return;

    g_pRenderTarget->BeginDraw();
    g_pRenderTarget->Clear(D2D1::ColorF(0x202020)); // dark bg

    // -------------------------------------------------
    // 1. Draw Bow limbs (two quadratic curves)
    // -------------------------------------------------
    ID2D1PathGeometry* pGeom = nullptr;
    ID2D1GeometrySink* pSink = nullptr;
    if (SUCCEEDED(g_pFactory->CreatePathGeometry(&pGeom)))
    {
        pGeom->Open(&pSink);

        //--------------------------------------------------------------
        //  One continuous "")""-shaped limb with a slightly pointy tip.
        //  End-points stay on the string ( (cx, topY) & (cx, bottomY) )
        //--------------------------------------------------------------
        constexpr float NOSE = 35.0f;               // how far the tips stick out
        const     float BULGE = halfHeight * 0.5f;  // max belly distance (x)

        pSink->BeginFigure(D2D1::Point2F(cx, topY), D2D1_FIGURE_BEGIN_HOLLOW);

        // Draw semicircle bow with pointy tip at middle
        // First quarter - top to middle-top
        pSink->AddBezier(
            D2D1::BezierSegment(
                D2D1::Point2F(cx + NOSE, topY + halfHeight * 0.1f),      // slight curve at top
                D2D1::Point2F(cx + BULGE, topY + halfHeight * 0.5f),     // first quarter curve
                D2D1::Point2F(cx + BULGE + NOSE, midY - NOSE)));         // approaching tip

        // Middle part with pointy tip
        pSink->AddBezier(
            D2D1::BezierSegment(
                D2D1::Point2F(cx + BULGE + NOSE * 1.2f, midY - NOSE * 0.5f),  // curve to tip
                D2D1::Point2F(cx + BULGE + NOSE * 1.5f, midY),               // pointy tip
                D2D1::Point2F(cx + BULGE + NOSE * 1.2f, midY + NOSE * 0.5f)));  // curve from tip

        // Last quarter - middle-bottom to bottom
        pSink->AddBezier(
            D2D1::BezierSegment(
                D2D1::Point2F(cx + BULGE + NOSE, midY + NOSE),            // after tip
                D2D1::Point2F(cx + BULGE, bottomY - halfHeight * 0.5f),   // last quarter curve
                D2D1::Point2F(cx + NOSE, bottomY - halfHeight * 0.1f)));  // approaching bottom

        // Connect back to string
        pSink->AddBezier(
            D2D1::BezierSegment(
                D2D1::Point2F(cx + NOSE * 0.5f, bottomY - NOSE * 0.25f),  // curve to bottom
                D2D1::Point2F(cx, bottomY),                              // bottom endpoint
                D2D1::Point2F(cx, bottomY)));                            // dummy point (required)

        pSink->EndFigure(D2D1_FIGURE_END_OPEN);

        pSink->Close();
        g_pRenderTarget->DrawGeometry(pGeom, g_pBrush, 2.0f);

        SafeRelease(&pSink);
        SafeRelease(&pGeom);
    }

    // -------------------------------------------------
    // 2. Draw Bow string
    // -------------------------------------------------
    float pull = g_stringOffset * STRING_MAX_PULL;
    D2D1_POINT_2F p1 = D2D1::Point2F(cx, topY);
    D2D1_POINT_2F pm = D2D1::Point2F(cx - pull, midY);
    D2D1_POINT_2F p2 = D2D1::Point2F(cx, bottomY);

    g_pRenderTarget->DrawLine(p1, pm, g_pBrush, 2.0f);
    g_pRenderTarget->DrawLine(pm, p2, g_pBrush, 2.0f);

    // Replace the OnRender arrow drawing section with this to use variable Y position
// Replace the OnRender arrow drawing section with this to use variable Y position and rotation
// Replace the OnRender arrow drawing section with this to use variable Y position and rotation
// -------------------------------------------------
// 3. Draw Arrow (simple shaft + head + tail)
// -------------------------------------------------
    float arrowLen = 240.0f;
    float arrowHead = 18.0f;

    // Apply rotation to the arrow
    g_pRenderTarget->SetTransform(
        D2D1::Matrix3x2F::Rotation(
            g_arrowRotation * (180.0f / 3.14159f), // Convert radians to degrees
            D2D1::Point2F(g_arrowPosX, g_arrowPosY)
        )
    );

    // Shaft
    g_pRenderTarget->DrawLine(
        D2D1::Point2F(g_arrowPosX, g_arrowPosY),
        D2D1::Point2F(g_arrowPosX - arrowLen, g_arrowPosY),
        g_pBrush, 2.0f);

    // Arrow head (small triangle)
    D2D1_POINT_2F headPts[3] = {
        D2D1::Point2F(g_arrowPosX,                 g_arrowPosY),
        D2D1::Point2F(g_arrowPosX - arrowHead,     g_arrowPosY - arrowHead * 0.5f),
        D2D1::Point2F(g_arrowPosX - arrowHead,     g_arrowPosY + arrowHead * 0.5f)
    };
    g_pRenderTarget->DrawLine(headPts[0], headPts[1], g_pBrush, 2.0f);
    g_pRenderTarget->DrawLine(headPts[0], headPts[2], g_pBrush, 2.0f);

    // Fletching (3 short diagonal lines)
    const float fletch = 20.0f;
    const float step = 5.0f;
    // Top fletching
    for (int i = 0; i < 6; ++i)
    {
        float x = g_arrowPosX - arrowLen + i * step;
        g_pRenderTarget->DrawLine(
            D2D1::Point2F(x, g_arrowPosY),
            D2D1::Point2F(x - fletch, g_arrowPosY - fletch * 0.4f + i * 3.0f),
            g_pBrush, 2.0f);
    }
    // Bottom fletching
    for (int i = 0; i < 6; ++i)
    {
        float x = g_arrowPosX - arrowLen + i * step;
        g_pRenderTarget->DrawLine(
            D2D1::Point2F(x, g_arrowPosY),
            D2D1::Point2F(x - fletch, g_arrowPosY + fletch * 0.4f - i * 3.0f),
            g_pBrush, 2.0f);
    }

    // Reset transform for other drawing operations
    g_pRenderTarget->SetTransform(D2D1::Matrix3x2F::Identity());

    // Present
    HRESULT hr = g_pRenderTarget->EndDraw();
    if (hr == D2DERR_RECREATE_TARGET)
        DiscardDeviceResources();
}

// -------------------------------------------------
// Animation tick (called from WM_TIMER)
// -------------------------------------------------
// Replace the UpdateAnimation function with this updated version
// Replace the UpdateAnimation function with this updated version
void UpdateAnimation()
{
    // Compute delta time
    auto  now = std::chrono::high_resolution_clock::now();
    float dt = std::chrono::duration<float>(now - g_prevTick).count();
    g_prevTick = now;
    g_timeInStage += dt;

    switch (g_stage)
    {
    case AnimStage::Cocking:
    {
        float t = min(g_timeInStage / COCK_TIME, 1.0f);

        if (t < 0.6f) {
            // First part: arrow dropping from top with tail pointing down
            float arcT = t / 0.6f;  // Normalize to 0-1 for just this part

            // Starting position at top, end at bow position
            float startX = cx + 100.0f;    // Start slightly right of bow
            float startY = 0.0f;           // Start at top of screen
            float endX = cx + 50.0f;       // End to the right of bow
            float endY = midY - 50.0f;     // End slightly above midpoint

            // Calculate curved path 
            g_arrowPosX = Lerp(startX, endX, arcT);
            g_arrowPosY = Lerp(startY, endY, arcT * arcT); // Accelerate down

            // Arrow has tail pointing down (pointing up = -90 degrees = -PI/2)
            g_arrowRotation = -1.57079f + arcT * 1.07079f; // -PI/2 to close to 0
        }
        else if (t < 0.8f) {
            // Second part: arrow rotates to horizontal and moves into position
            float alignT = (t - 0.6f) / 0.2f;  // Normalize to 0-1 for just this part

            // Move arrow into position horizontally
            float startX = cx + 50.0f;
            float startY = midY - 50.0f;
            float endX = cx + 50.0f;  // Position just right of the bow
            float endY = midY;        // At the midpoint height

            g_arrowPosX = Lerp(startX, endX, alignT);
            g_arrowPosY = Lerp(startY, endY, alignT);

            // Complete the rotation to horizontal
            g_arrowRotation = Lerp(-0.5f, 0.0f, alignT); // Finish rotating to horizontal
        }
        else {
            // Third part: arrow attaches to string and string gets pulled
            float stringT = (t - 0.8f) / 0.2f;  // Normalize to 0-1 for just this part

            // Move arrow with string as it's drawn back
            float startX = cx + 50.0f;
            float endX = cx - STRING_MAX_PULL + 50.0f;

            g_arrowPosX = Lerp(startX, endX, stringT);
            g_arrowPosY = midY;
            g_arrowRotation = 0.0f;  // Keep horizontal

            // Pull string back gradually
            g_stringOffset = stringT;
        }

        if (t >= 1.0f) { g_stage = AnimStage::Hold; g_timeInStage = 0.f; }
    } break;

    case AnimStage::Hold:
        // Arrow is now at the correct position
        g_arrowPosY = midY;
        g_arrowRotation = 0.0f;  // Ensure arrow is horizontal

        if (g_timeInStage >= HOLD_TIME)
        {
            g_stage = AnimStage::Firing; g_timeInStage = 0.f;
        }
        break;

    case AnimStage::Firing:
    {
        float t = min(g_timeInStage / FIRE_TIME, 1.0f);
        g_stringOffset = 1.0f - t;             // 1 -> 0  (same)

        float startX = cx - STRING_MAX_PULL + 50.0f;
        float endX = g_windowW + 100.0f;
        g_arrowPosX = Lerp(startX, endX, t);
        g_arrowPosY = midY; // Keep arrow on straight horizontal path
        g_arrowRotation = 0.0f;  // Keep arrow horizontal

        if (t >= 1.0f)
        {
            g_stage = AnimStage::Cocking; g_timeInStage = 0.f;
            // Reset arrow to starting position for next animation cycle
            g_arrowPosX = cx + 100.0f;
            g_arrowPosY = 0.0f;
            g_arrowRotation = -1.57079f;  // Start with tail pointing down (arrow pointing up)
        }
    } break;

    case AnimStage::Done:
        // Not used anymore, but kept for completeness
        break;
    }

    // Request redraw
    InvalidateRect(g_hWnd, nullptr, FALSE);
}

// -------------------------------------------------
// Window procedure
// -------------------------------------------------
LRESULT CALLBACK WndProc(HWND hWnd, UINT msg,
    WPARAM wParam, LPARAM lParam)
{
    switch (msg)
    {
        // Add this initialization in WM_CREATE or before animation starts
    // Add to WM_CREATE case or main initialization
    // Add this initialization in WM_CREATE case
    case WM_CREATE:
        if (FAILED(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED,
            &g_pFactory)))
            return -1; // abort window creation
        SetTimer(hWnd, TIMER_ID, TIMER_MS, nullptr);
        g_prevTick = std::chrono::high_resolution_clock::now();
        g_arrowPosX = cx + 100.0f;   // Initialize right of bow
        g_arrowPosY = 0.0f;          // Initialize at top of screen
        g_arrowRotation = -1.57079f; // Start with tail pointing down (arrow pointing up)
        return 0;

    case WM_SIZE:
    {
        g_windowW = static_cast<float>(LOWORD(lParam));
        g_windowH = static_cast<float>(HIWORD(lParam));

        // Update dependent geometry values
        topY = 120.0f;
        bottomY = g_windowH - 120.0f;
        midY = (topY + bottomY) * 0.5f;
        halfHeight = (bottomY - topY) * 0.5f;

        if (g_pRenderTarget)
            g_pRenderTarget->Resize(
                D2D1::SizeU(static_cast<UINT>(g_windowW),
                    static_cast<UINT>(g_windowH)));
    }
    return 0;

    case WM_TIMER:
        if (wParam == TIMER_ID)
            UpdateAnimation();
        return 0;

    case WM_PAINT:
    {
        PAINTSTRUCT ps;
        BeginPaint(hWnd, &ps);
        OnRender();
        EndPaint(hWnd, &ps);
    } return 0;

    case WM_DESTROY:
        KillTimer(hWnd, TIMER_ID);
        DiscardDeviceResources();
        SafeRelease(&g_pFactory);
        PostQuitMessage(0);
        return 0;
    }
    return DefWindowProc(hWnd, msg, wParam, lParam);
}

// -------------------------------------------------
// WinMain - entry point
// -------------------------------------------------
int WINAPI wWinMain(HINSTANCE hInst, HINSTANCE, PWSTR, int nCmdShow)
{
    const wchar_t CLASS_NAME[] = L""BowWindow"";

    WNDCLASS wc = {};
    wc.lpfnWndProc = WndProc;
    wc.hInstance = hInst;
    wc.hCursor = LoadCursor(nullptr, IDC_ARROW);
    wc.lpszClassName = CLASS_NAME;
    RegisterClass(&wc);

    g_hWnd = CreateWindowEx(0, CLASS_NAME, L""Direct2D - Longbow Demo"",
        WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT,
        static_cast<int>(g_windowW),
        static_cast<int>(g_windowH),
        nullptr, nullptr, hInst, nullptr);

    ShowWindow(g_hWnd, nCmdShow);

    // Main message loop
    MSG msg;
    while (GetMessage(&msg, nullptr, 0, 0))
    {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }
    return 0;
}
```"
w9hkgNtV,2025-05-30T21:14:25.198270,powerampache,PHP,Friday 30th of May 2025 02:14:24 PM CDT,"1.01-80-play (80) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:864)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:834)
	at android.os.Handler.dispatchMessage(Handler.java:103)
	at android.os.Looper.loopOnce(Looper.java:257)
	at android.os.Looper.loop(Looper.java:342)
	at android.os.HandlerThread.run(HandlerThread.java:85)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1124)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:453)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":27},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":618942020,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1124,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":453,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":864,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":834,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":103,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":257,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":342,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":85,""methodName"":""run""}]}"
XSbMD31q,2025-05-30T21:14:25.315820,powerampache,PHP,Friday 30th of May 2025 02:14:24 PM CDT,"1.01-80-play (80) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:864)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:834)
	at android.os.Handler.dispatchMessage(Handler.java:103)
	at android.os.Looper.loopOnce(Looper.java:257)
	at android.os.Looper.loop(Looper.java:342)
	at android.os.HandlerThread.run(HandlerThread.java:85)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1124)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:453)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":27},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":618942178,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1124,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":453,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":864,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":834,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":103,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":257,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":342,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":85,""methodName"":""run""}]}"
msMvYsCm,2025-05-30T21:14:25.081290,powerampache,PHP,Friday 30th of May 2025 02:14:24 PM CDT,"1.01-80-play (80) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:864)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:834)
	at android.os.Handler.dispatchMessage(Handler.java:103)
	at android.os.Looper.loopOnce(Looper.java:257)
	at android.os.Looper.loop(Looper.java:342)
	at android.os.HandlerThread.run(HandlerThread.java:85)
Caused by: androidx.media3.exoplayer.source.UnrecognizedInputFormatException: None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream. {contentIsMalformed=false, dataType=1}
	at androidx.media3.exoplayer.source.BundledExtractorsAdapter.init(BundledExtractorsAdapter.java:108)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1124)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:453)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

onPlayerError PlaybackException - PlaybackException 

 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":27},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":3003,""extras"":{""mMap"":{}},""timestampMs"":618941904,""cause"":{""sniffFailures"":[{},{}],""uri"":{},""contentIsMalformed"":false,""dataType"":1,""detailMessage"":""None of the available extractors (FlvExtractor, FlacExtractor, WavExtractor, FragmentedMp4Extractor, Mp4Extractor, AmrExtractor, PsExtractor, OggExtractor, TsExtractor, MatroskaExtractor, AdtsExtractor, Ac3Extractor, Ac4Extractor, Mp3Extractor, AviExtractor, JpegExtractor, PngExtractor, WebpExtractor, BmpExtractor, HeifExtractor, AvifExtractor) could read the stream."",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.source.BundledExtractorsAdapter"",""fileName"":""BundledExtractorsAdapter.java"",""lineNumber"":108,""methodName"":""init""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1124,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":453,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1145,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":644,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":1012,""methodName"":""run""}]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":864,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":834,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":103,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":257,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":342,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":85,""methodName"":""run""}]}"
hBU7DN3x,Untitled,lerakaneva,JSON,Friday 30th of May 2025 01:55:53 PM CDT,"[
  {
    ""keys"": [
      ""n0"",
      ""esnd_n0_r0"",
      ""r0"",
      ""r0_qual_pred"",
      ""n1"",
      ""esnd_n1_r0"",
      ""esnd_n1_r1"",
      ""r1"",
      ""r1_qual_pred"",
      ""n2"",
      ""esnd_n2_r1""
    ],
    ""length"": 11,
    ""_fields"": [
      ""Voxilaprevir"",
      {
        ""low"": 4,
        ""high"": 0
      },
      ""biolink:contraindicated_in"",
      ""null null null"",
      ""Rosuvastatin"",
      {
        ""low"": 16,
        ""high"": 0
      },
      {
        ""low"": 598,
        ""high"": 0
      },
      ""biolink:has_adverse_event"",
      ""null null null"",
      ""Blood cholesterol abnormal"",
      {
        ""low"": 7,
        ""high"": 0
      }
    ],
    ""_fieldLookup"": {
      ""n0"": 0,
      ""esnd_n0_r0"": 1,
      ""r0"": 2,
      ""r0_qual_pred"": 3,
      ""n1"": 4,
      ""esnd_n1_r0"": 5,
      ""esnd_n1_r1"": 6,
      ""r1"": 7,
      ""r1_qual_pred"": 8,
      ""n2"": 9,
      ""esnd_n2_r1"": 10
    }
  }
]"
GHB5hD7h,Untitled,lerakaneva,SQL,Friday 30th of May 2025 01:54:46 PM CDT,"MATCH (n0:`biolink:ChemicalEntity`)-[r0]-(n1:`biolink:ChemicalEntity`)-[r1]-(n2:`biolink:DiseaseOrPhenotypicFeature`) WHERE toLower(n1.name) IN ['rosuvastatin'] AND toLower(n0.name) IN ['voxilaprevir'] AND toLower(n2.name) IN ['blood cholesterol abnormal'] CALL{WITH n0, r0 MATCH(n0)-[r0]-(t) RETURN apoc.node.degree(n0, '`'+TYPE(r0)+'`') AS esnd_n0_r0} CALL{WITH n1, r0 MATCH(n1)-[r0]-(t) RETURN apoc.node.degree(n1, '`'+TYPE(r0)+'`') AS esnd_n1_r0} CALL{WITH n1, r1 MATCH(n1)-[r1]-(t) RETURN apoc.node.degree(n1, '`'+TYPE(r1)+'`') AS esnd_n1_r1} CALL{WITH n2, r1 MATCH(n2)-[r1]-(t) RETURN apoc.node.degree(n2, '`'+TYPE(r1)+'`') AS esnd_n2_r1} RETURN n0.name as n0, esnd_n0_r0, TYPE(r0) as r0, apoc.text.join([r0.qualified_predicate,r0.object_direction,r0.object_aspect],' ') as r0_qual_pred, n1.name as n1, esnd_n1_r0, esnd_n1_r1, TYPE(r1) as r1, apoc.text.join([r1.qualified_predicate,r1.object_direction,r1.object_aspect],' ') as r1_qual_pred, n2.name as n2, esnd_n2_r1 LIMIT 10000"
cpqDGrjK,Untitled,lerakaneva,Python,Friday 30th of May 2025 01:53:34 PM CDT,"frontend-1  | 
frontend-1  | <class 'neo4j._sync.work.result.Result'>
frontend-1  | ============================================================
frontend-1  | ERROR in PATH SEARCH:
frontend-1  | ============================================================
frontend-1  | Traceback (most recent call last):
frontend-1  |   File ""/predictive.llc/src/dash_app.py"", line 1105, in submit_path_search
frontend-1  |     answersdf = Graphsearch(graph_db,start_nodes,end_nodes,searched_nodes_dict,searched_options_dict,searched_edges_dict,metadata_bool,timeout_ms=120000,limit_results=10000)
frontend-1  |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
frontend-1  |   File ""/predictive.llc/src/Neo4jSearch.py"", line 411, in Graphsearch
frontend-1  |     robokop_output[j].append(str(m[l+1]).replace('biolink:','').replace('_',' ') if 'null' not in m[l+1] else str(m[l]).replace('biolink:','').replace('_',' '))
frontend-1  |                                                                                     ^^^^^^^^^^^^^^^^^^^^
frontend-1  | TypeError: argument of type 'int' is not iterable
frontend-1  | 
frontend-1  | ============================================================
frontend-1  | Error type: <class 'TypeError'>
frontend-1  | Error message: argument of type 'int' is not iterable
frontend-1  | ============================================================"
U8zqKHh0,Рецензия код,usernameer,Python,Friday 30th of May 2025 12:12:56 PM CDT,"# Доступен весь синтаксис пайтон и
# стандартной библиотеки
import random
import string
# Функция решатель задачи, принимает аргументы
# на усмотрения создателя прототипа.
# Должна возвращать число
def main(word):
	return len(word)
# Функция генерации условия задачи,
# принимает такие же аргументы, как и main()
# Если генерация не предусмотрена, то
# возвращать пустую строку
def get_task():
	return generate_random_string()
def generate_random_string():
	# Выбираем случайную длину от 5 до 20 символов
	length = random.randint(5, 20)
	# Генерируем строку из случайных букв и цифр
	characters = string.ascii_letters + string.digits
	random_string = ''.join(random.choice(characters) for _ in range(length))
	return random_string
"
uf0kKtzW,deploy.yml,ronard_addo,YAML,Friday 30th of May 2025 12:02:52 PM CDT,"name: Build and Deploy to GitHub Pages

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Inject Supabase secrets into config.js ES module
        run: |
          echo ""export const CONFIG = {"" > config.js
          echo ""  url: '${{ secrets.SUPABASE_URL }}',"" >> config.js
          echo ""  key: '${{ secrets.SUPABASE_KEY }}'"" >> config.js
          echo ""};"" >> config.js

      - name: List files before deployment (debugging)
        run: ls -al

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./
          add: true"
jgM2NMiV,quar2day,DanFrmSpace,Lua,Friday 30th of May 2025 11:40:04 AM CDT,"-- Advanced Quarry Turtle for CC: Tweaked
-- Mines 5x5 area down to bedrock with state persistence

-- Configuration
local config = {
    quarryWidth = 5,       -- Width of quarry
    quarryLength = 5,      -- Length of quarry
    minFuelLevel = 500,    -- Minimum fuel before returning
    torchInterval = 5,     -- Place torch every N layers
    chestCheckInterval = 5 -- Check inventory every N layers
}

-- State tracking
local state = {
    x = 0, y = 0, z = 0,
    facing = 0, -- 0=north, 1=east, 2=south, 3=west
    layer = 0,
    rowInLayer = 0,
    blockInRow = 0,
    startX = 0, startY = 0, startZ = 0,
    quarrying = true,
    returningForFuel = false,
    miningPattern = ""rows"" -- rows or spiral
}

-- Utility functions
local function saveState()
    local file = fs.open(""quarry_state"", ""w"")
    file.write(textutils.serialize(state))
    file.close()
end

local function loadState()
    if fs.exists(""quarry_state"") then
        local file = fs.open(""quarry_state"", ""r"")
        state = textutils.unserialize(file.readAll())
        file.close()
        return true
    end
    return false
end

local function deleteState()
    if fs.exists(""quarry_state"") then
        fs.delete(""quarry_state"")
    end
end

-- Movement tracking functions
local function forward()
    if turtle.forward() then
        if state.facing == 0 then state.z = state.z - 1
        elseif state.facing == 1 then state.x = state.x + 1
        elseif state.facing == 2 then state.z = state.z + 1
        elseif state.facing == 3 then state.x = state.x - 1
        end
        return true
    end
    return false
end

local function back()
    if turtle.back() then
        if state.facing == 0 then state.z = state.z + 1
        elseif state.facing == 1 then state.x = state.x - 1
        elseif state.facing == 2 then state.z = state.z - 1
        elseif state.facing == 3 then state.x = state.x + 1
        end
        return true
    end
    return false
end

local function up()
    if turtle.up() then
        state.y = state.y + 1
        return true
    end
    return false
end

local function down()
    if turtle.down() then
        state.y = state.y - 1
        return true
    end
    return false
end

local function turnLeft()
    turtle.turnLeft()
    state.facing = (state.facing - 1) % 4
end

local function turnRight()
    turtle.turnRight()
    state.facing = (state.facing + 1) % 4
end

local function turnAround()
    turnRight()
    turnRight()
end

-- Safe digging functions
local function digSafe()
    while turtle.detect() do
        if not turtle.dig() then
            return false -- Hit bedrock or unbreakable block
        end
        sleep(0.5) -- Handle falling blocks
    end
    return true
end

local function digUpSafe()
    while turtle.detectUp() do
        if not turtle.digUp() then
            return false
        end
        sleep(0.5)
    end
    return true
end

local function digDownSafe()
    while turtle.detectDown() do
        if not turtle.digDown() then
            return false -- Hit bedrock
        end
        sleep(0.5)
    end
    return true
end

-- Movement with digging
local function forwardDig()
    digSafe()
    local attempts = 0
    while not forward() and attempts < 10 do
        digSafe()
        turtle.attack() -- Clear mobs
        attempts = attempts + 1
        sleep(0.2)
    end
    return attempts < 10
end

local function upDig()
    digUpSafe()
    local attempts = 0
    while not up() and attempts < 10 do
        digUpSafe()
        turtle.attackUp()
        attempts = attempts + 1
        sleep(0.2)
    end
    return attempts < 10
end

local function downDig()
    if not digDownSafe() then
        return false -- Hit bedrock
    end
    local attempts = 0
    while not down() and attempts < 10 do
        if not digDownSafe() then
            return false -- Hit bedrock
        end
        turtle.attackDown()
        attempts = attempts + 1
        sleep(0.2)
    end
    return attempts < 10
end

-- Inventory management
local function findItem(name)
    for i = 1, 16 do
        local item = turtle.getItemDetail(i)
        if item and item.name == name then
            return i
        end
    end
    return nil
end

local function countEmptySlots()
    local empty = 0
    for i = 1, 16 do
        if turtle.getItemCount(i) == 0 then
            empty = empty + 1
        end
    end
    return empty
end

local function depositItems()
    print(""Depositing items..."")
    for i = 1, 16 do
        turtle.select(i)
        local item = turtle.getItemDetail()
        -- Keep fuel and torches
        if item and 
           item.name ~= ""minecraft:coal"" and 
           item.name ~= ""minecraft:charcoal"" and
           item.name ~= ""minecraft:lava_bucket"" and
           item.name ~= ""minecraft:torch"" then
            turtle.dropUp()
        end
    end
    turtle.select(1)
end

-- Fuel management
local function getFuelLevel()
    local level = turtle.getFuelLevel()
    if level == ""unlimited"" then
        return 999999
    end
    return level
end

local function refuel()
    print(""Checking fuel..."")
    local fuelLevel = getFuelLevel()
    
    if fuelLevel < config.minFuelLevel then
        print(""Fuel low. Refueling..."")
        for i = 1, 16 do
            turtle.select(i)
            if turtle.refuel(0) then -- Check if item is fuel
                local needed = config.minFuelLevel * 2 - getFuelLevel()
                turtle.refuel(math.ceil(needed / 80)) -- Coal gives 80 fuel
                if getFuelLevel() >= config.minFuelLevel then
                    break
                end
            end
        end
        
        -- Check for lava buckets
        local lavaBucket = findItem(""minecraft:lava_bucket"")
        if lavaBucket and getFuelLevel() < config.minFuelLevel then
            turtle.select(lavaBucket)
            turtle.refuel(1)
        end
    end
    
    turtle.select(1)
    return getFuelLevel() >= config.minFuelLevel
end

-- Torch placement
local function placeTorch()
    local torchSlot = findItem(""minecraft:torch"")
    if torchSlot then
        local currentSlot = turtle.getSelectedSlot()
        turtle.select(torchSlot)
        
        -- Try to place on wall
        turnLeft()
        if not turtle.place() then
            turnRight()
            turnRight()
            turtle.place()
            turnLeft()
        else
            turnRight()
        end
        
        turtle.select(currentSlot)
    end
end

-- Navigation functions
local function goToPosition(targetX, targetY, targetZ, targetFacing)
    print(string.format(""Going to position: X:%d Y:%d Z:%d"", targetX, targetY, targetZ))
    
    -- Move to Y level first (go up if needed)
    while state.y < targetY do
        upDig()
    end
    
    -- Move X
    while state.x < targetX do
        while state.facing ~= 1 do turnRight() end
        forwardDig()
    end
    while state.x > targetX do
        while state.facing ~= 3 do turnRight() end
        forwardDig()
    end
    
    -- Move Z
    while state.z < targetZ do
        while state.facing ~= 2 do turnRight() end
        forwardDig()
    end
    while state.z > targetZ do
        while state.facing ~= 0 do turnRight() end
        forwardDig()
    end
    
    -- Move to Y level (go down if needed)
    while state.y > targetY do
        downDig()
    end
    
    -- Face correct direction
    if targetFacing then
        while state.facing ~= targetFacing do
            turnRight()
        end
    end
end

local function returnToStart()
    print(""Returning to start position..."")
    local savedState = {
        x = state.x,
        y = state.y,
        z = state.z,
        facing = state.facing
    }
    
    goToPosition(state.startX, state.startY, state.startZ, 0)
    
    return savedState
end

local function returnToMining(savedPosition)
    print(""Returning to mining position..."")
    goToPosition(savedPosition.x, savedPosition.y, savedPosition.z, savedPosition.facing)
end

-- Quarry patterns
local function mineLayer()
    -- Always start from the same corner with same orientation
    local layerStartX = state.startX + 1  -- One block forward from start
    local layerStartZ = state.startZ
    local layerY = state.y
    
    -- Ensure we're at the correct starting position and facing
    goToPosition(layerStartX, layerY, layerStartZ, 0)
    
    for row = 1, config.quarryLength do
        -- Mine one row
        for block = 1, config.quarryWidth - 1 do
            forwardDig()
            state.blockInRow = block
            saveState()
        end
        
        -- Move to next row if not last
        if row < config.quarryLength then
            if row % 2 == 1 then
                -- Odd row, turn right
                turnRight()
                forwardDig()
                turnRight()
            else
                -- Even row, turn left
                turnLeft()
                forwardDig()
                turnLeft()
            end
        end
        
        state.rowInLayer = row
        state.blockInRow = 0
        saveState()
    end
    
    -- Always return to the starting corner of this layer facing north
    goToPosition(layerStartX, layerY, layerStartZ, 0)
end

-- Main quarry function
local function quarry()
    print(""Starting quarry operation..."")
    print(string.format(""Size: %dx%d"", config.quarryWidth, config.quarryLength))
    print(""Mining down to bedrock..."")
    
    while state.quarrying do
        -- Check fuel before each layer
        if getFuelLevel() < config.minFuelLevel then
            print(""Low fuel! Current level: "" .. getFuelLevel())
            state.returningForFuel = true
            saveState()
            
            local miningPos = returnToStart()
            
            -- Try to refuel from inventory
            if not refuel() then
                print(""Cannot refuel from inventory!"")
                print(""Please add fuel to the turtle"")
                print(""Fuel needed: "" .. config.minFuelLevel)
                print(""Current fuel: "" .. getFuelLevel())
                print(""Press any key after adding fuel..."")
                os.pullEvent(""key"")
                refuel()
            end
            
            -- Deposit items while we're here
            depositItems()
            
            -- Return to mining
            returnToMining(miningPos)
            state.returningForFuel = false
            saveState()
        end
        
        -- Mine current layer
        print(""Mining layer "" .. state.layer)
        mineLayer()
        
        -- Place torch if needed
        if state.layer % config.torchInterval == 0 then
            placeTorch()
        end
        
        -- Check inventory every few layers
        if state.layer % config.chestCheckInterval == 0 and countEmptySlots() <= 2 then
            print(""Inventory nearly full, returning to deposit..."")
            local miningPos = returnToStart()
            depositItems()
            returnToMining(miningPos)
        end
        
        -- Try to go down
        if not downDig() then
            print(""Hit bedrock at layer "" .. state.layer)
            state.quarrying = false
        else
            state.layer = state.layer + 1
            state.rowInLayer = 0
            state.blockInRow = 0
            saveState()
        end
    end
    
    -- Return to start and deposit final items
    returnToStart()
    depositItems()
    
    print(""Quarry complete!"")
    print(""Mined "" .. state.layer .. "" layers"")
    deleteState()
end

-- Resume function for interrupted mining
local function resume()
    print(""Resuming quarry operation..."")
    print(string.format(""Current position: X:%d Y:%d Z:%d"", state.x, state.y, state.z))
    print(""Current layer: "" .. state.layer)
    
    if state.returningForFuel then
        print(""Was returning for fuel..."")
        returnToStart()
        refuel()
        depositItems()
        
        -- Go back to the starting position of the current layer
        local layerStartX = state.startX + 1
        local layerStartZ = state.startZ
        local layerY = state.startY - state.layer
        goToPosition(layerStartX, layerY, layerStartZ, 0)
        state.returningForFuel = false
    end
    
    quarry()
end

-- Setup function
local function setup()
    print(""Advanced Quarry Turtle"")
    print(""==========================="")
    print(""Setup Instructions:"")
    print(""1. Place chest ABOVE turtle"")
    print(""2. Add fuel (coal/lava buckets)"")
    print(""3. Add torches (optional)"")
    print(""4. Turtle will mine 5x5 area"")
    print(""   in front of it (north)"")
    print(""   extending to the right (east)"")
    print(""==========================="")
    print(""Current fuel: "" .. getFuelLevel())
    print(""Press any key to start..."")
    os.pullEvent(""key"")
    
    -- Check if resuming
    if loadState() then
        print(""Found saved state!"")
        resume()
    else
        -- New quarry
        state.startX = state.x
        state.startY = state.y
        state.startZ = state.z
        
        -- Check initial fuel
        if not refuel() then
            print(""ERROR: Not enough fuel!"")
            print(""Add at least "" .. config.minFuelLevel .. "" fuel"")
            return
        end
        
        -- Move forward to start quarry
        print(""Moving to quarry start position..."")
        forwardDig()
        state.startX = state.x - 1  -- Store original position (one block back)
        state.startY = state.y
        state.startZ = state.z
        downDig() -- Start first layer
        state.layer = 1
        saveState()
        
        quarry()
    end
end

-- Error handling wrapper
local function main()
    local success, error = pcall(setup)
    if not success then
        print(""ERROR: "" .. error)
        print(""State saved. Run program again to resume."")
        saveState()
    end
end

-- Run the program
main()"
0ExZHYR4,Default,abubandit69,Lua,Friday 30th of May 2025 11:30:13 AM CDT,"{""2.defensive_yaw_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF002"",""2.defensive_yaw_jitter_offset"":0,""6.defensive_yaw_jitter_right"":0,""7.yaw_jitter_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF007"",""4.defensive_yaw_jitter_right"":0,""2.defensive_yaw_jitter_right"":0,""2.yaw_variance"":0,""7.yaw_jitter_variance"":10,""5.yaw_jitter_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF005"",""5.yaw_jitter_variance"":10,""3.yaw_jitter_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF003"",""9.yaw_jitter_variance"":0,""fps_boost"":false,""12.defensive_yaw_delay"":1,""4.separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF004"",""2.separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF002"",""6.separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF006"",""3.yaw_jitter_delay"":1,""1.yaw_jitter_delay"":1,""9.defensive_yaw_jitter_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF009"",""7.yaw_jitter_delay"":1,""6.body_yaw_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF006"",""5.yaw_jitter_delay"":1,""8.body_yaw_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF008"",""10.defensive_yaw_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF0010"",""2.defensive_yaw"":false,""4.pitch_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF004"",""8.separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF008"",""2.bombsite_fix"":false,""2.defensive_pitch_offset2"":0,""8.pitch_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF008"",""6.defensive_pitch_offset2"":0,""4.defensive_yaw_jitter_offset"":0,""8.yaw_jitter_delay"":1,""1.yaw_jitter_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF001"",""7.defensive_pitch_variance"":0,""10.yaw_jitter_offset"":0,""1.defensive_pitch_variance"":0,""11.yaw_offset"":0,""9.defensive_pitch_variance"":0,""2.pitch_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF002"",""5.defensive_pitch_variance"":0,""7.yaw_jitter_type"":""Offset"",""6.pitch_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF006"",""3.defensive_pitch_variance"":0,""11.yaw_jitter_right"":0,""6.freestanding"":false,""4.freestanding"":false,""12.defensive_yaw_jitter_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF0012"",""10.yaw_jitter_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF0010"",""11.yaw"":""Offset"",""2.freestanding"":false,""5.yaw_jitter_type"":""Offset"",""event_logs"":true,""2.defensive_yaw_jitter_delay"":1,""1.defensive_angles_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF001"",""force_defensive"":true,""3.defensive_angles_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF003"",""1.yaw_jitter_type"":""Offset"",""8.defensive_yaw_jitter_delay"":1,""2.yaw_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF002"",""5.yaw_jitter_left"":0,""4.yaw_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF004"",""9.defensive_yaw_jitter1"":false,""3.yaw_jitter_type"":""Left \/ Right"",""3.defensive_yaw_jitter1"":false,""3.yaw_jitter_right"":64,""10.defensive_yaw_jitter_type"":""Offset"",""13.yaw_jitter_delay"":1,""7.yaw_jitter_right"":0,""1.defensive_yaw_jitter1"":false,""5.yaw_jitter_right"":0,""1.yaw_jitter_left"":0,""13.defensive_pitch_offset1"":0,""9.defensive_angles_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF009"",""5.defensive_angles_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF005"",""8.yaw_offset"":0,""10.defensive_pitch_variance"":0,""avoid_backstab"":true,""8.defensive_yaw_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF008"",""13.body_yaw_offset"":0,""12.defensive_yaw_jitter2"":""Off"",""8.defensive_yaw_jitter_left"":0,""4.yaw_left"":-9,""13.yaw_right"":0,""1.defensive_yaw_type"":""Random"",""4.override"":true,""10.freestanding"":false,""12.defensive_yaw_jitter_variance"":0,""12.defensive_pitch_offset"":0,""13.yaw_delay"":1,""safe_head_states"":[""Height"",""In air"",""Distance""],""12.defensive_yaw_jitter_offset"":0,""6.defensive_yaw_jitter_left"":0,""8.yaw_left"":0,""animations_lean"":50,""6.yaw_left"":0,""6.override"":false,""2.yaw_left"":-3,""11.defensive_pitch"":false,""2.override"":true,""12.defensive_yaw_type"":""Random"",""12.yaw_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF0012"",""13.defensive_pitch_delay"":1,""12.body_yaw"":""Static"",""8.freestanding"":false,""8.yaw"":""Off"",""13.override"":true,""10.defensive_angles_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF0010"",""6.defensive_pitch"":false,""12.defensive_yaw_offset"":180,""6.defensive_pitch_delay"":1,""11.defensive_pitch_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF0011"",""13.defensive_yaw_jitter_left"":0,""1.defensive_yaw_delay"":1,""8.defensive_pitch_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF008"",""13.defensive_yaw_jitter_delay"":1,""9.yaw_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF009"",""2.defensive_pitch_offset"":0,""13.defensive_yaw_jitter1"":false,""8.defensive_pitch_delay"":1,""10.yaw_variance"":0,""6.defensive_pitch_offset"":0,""4.defensive_pitch_offset"":0,""10.defensive_yaw_variance"":0,""4.defensive_pitch_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF004"",""6.defensive_pitch_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF006"",""10.body_yaw_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF0010"",""13.freestanding_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF0013"",""9.defensive_yaw_type"":""Random"",""5.defensive_yaw_delay"":1,""7.defensive_yaw_type"":""Random"",""3.defensive_yaw_delay"":1,""5.defensive_yaw_type"":""Random"",""8.defensive_pitch_offset"":0,""3.defensive_yaw_type"":""Random"",""8.defensive_pitch_offset1"":0,""shadows_type"":""Bright"",""2.defensive_pitch_offset1"":0,""6.defensive_pitch_offset1"":0,""4.defensive_pitch_offset1"":0,""13.defensive_yaw_delay"":1,""2.pitch_offset"":0,""3.yaw_variance"":0,""1.defensive_yaw_jitter_type"":""Offset"",""5.yaw_variance"":0,""3.defensive_yaw_jitter_type"":""Offset"",""4.body_yaw"":""Jitter"",""9.defensive_yaw_variance"":0,""improvements_triggers"":[""Quick peek assist"",""Exploit charge"",""On shot anti-aim""],""7.defensive_yaw_variance"":0,""6.yaw"":""Off"",""9.defensive_yaw_jitter_type"":""Offset"",""12.yaw_jitter_type"":""Offset"",""1.defensive_yaw_variance"":0,""11.defensive_yaw_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF0011"",""5.defensive_yaw_variance"":0,""6.pitch_offset"":0,""3.defensive_yaw_variance"":0,""2.defensive_yaw_jitter_left"":0,""4.defensive_angles"":false,""4.defensive_yaw_jitter_left"":0,""6.defensive_angles"":false,""12.defensive_yaw_jitter_right"":0,""13.yaw_jitter_offset"":0,""13.defensive_pitch_offset2"":0,""12.yaw_offset"":0,""9.yaw_base"":""Local view"",""13.defensive_pitch_type"":""Switch"",""13.yaw_jitter"":""Off"",""viewmodel_horizontal"":25,""12.yaw"":""Offset"",""1.yaw_base"":""Local view"",""7.yaw_base"":""At targets"",""12.yaw_jitter_right"":0,""2.defensive_yaw_jitter_variance"":0,""3.yaw_base"":""At targets"",""13.defensive_yaw_jitter_separator"":""\u0007404040FFÃ¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾Ã¢â‚¬Â¾\u0007FFFFFF0013"",""drop_grenades"":false,""9.yaw_jitter_offset"":0,""1.defensive_yaw_offset"":180,""3.yaw_jitter_offset"":0,""1.yaw_jitter_offset"":0,""7.yaw_jitter_offset"":47,""5.yaw_jitter_offset"":28,""12.yaw_base"":""Local view"",""10.yaw_left"":0,""5.yaw_base"":""At targets"",""force_defensive_triggers"":[""Weapon switch"",""Damage received"",""Reloading"",""Flashed""],""edge_yaw"":false,""3.yaw"":""Left \/ Right"",""8.defensive_yaw_offset"":180,""12.defensive_angles"":false,""12.bombsite_fix"":false,""8.defensive_angles"":false,""13.defensive_yaw_jitter_type"":""Offset"",""10.defensive_pitch_offset1"":0,""9.defensive_pitch"":false,""11.force_defensive"":false,""2.defensive_angles"":false,""10.yaw_jitter_delay"":1,""12.pitch"":""Down"",""11.defensive_pitch_variance"":0,""4.yaw_delay"":1,""2.freestanding_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF002"",""11.body_yaw"":""Opposite"",""6.freestanding_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF006"",""10.body_yaw_offset"":0,""13.defensive_yaw_jitter2"":""Off"",""viewmodel_in_scope"":false,""2.pitch"":""Down"",""4.yaw_right"":23,""8.yaw_delay"":1,""9.defensive_pitch_offset2"":0,""10.yaw_right"":0,""13.freestanding"":false,""8.pitch"":""Off"",""13.defensive_yaw_jitter_variance"":0,""4.freestanding_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF004"",""9.defensive_yaw_jitter2"":""Off"",""13.defensive_pitch_offset"":0,""3.defensive_yaw_jitter2"":""Off"",""8.freestanding_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF008"",""5.defensive_yaw_jitter2"":""Off"",""10.yaw_delay"":1,""9.defensive_pitch_type"":""Switch"",""10.yaw_jitter_left"":0,""5.defensive_pitch_type"":""Switch"",""11.defensive_yaw_type"":""Random"",""7.defensive_pitch_type"":""Switch"",""12.defensive_pitch"":false,""1.defensive_pitch_type"":""Switch"",""1.body_yaw_offset"":0,""3.defensive_pitch_type"":""Switch"",""7.defensive_yaw_jitter_type"":""Offset"",""6.yaw_jitter"":""Off"",""13.yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0013"",""2.yaw_right"":12,""aspect_ratio"":false,""13.yaw_jitter_variance"":0,""3.defensive_yaw_jitter_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF003"",""8.yaw_jitter_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF008"",""7.defensive_yaw_jitter_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF007"",""5.defensive_yaw_jitter_type"":""Offset"",""13.defensive_yaw_offset"":180,""12.separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0012"",""13.defensive_angles_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0013"",""8.yaw_jitter"":""Off"",""12.defensive_yaw_jitter_left"":0,""9.body_yaw_offset"":0,""12.defensive_pitch_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0012"",""7.body_yaw_offset"":-59,""shadows_distance"":650,""5.body_yaw_offset"":-124,""12.defensive_yaw_jitter_delay"":1,""8.yaw_jitter_variance"":0,""11.defensive_yaw_variance"":0,""11.yaw_variance"":0,""9.defensive_yaw_jitter_offset"":0,""10.defensive_yaw_jitter1"":false,""5.force_defensive"":true,""1.bombsite_fix"":false,""7.force_defensive"":true,""1.force_defensive"":false,""12.freestanding_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0012"",""9.bombsite_fix"":false,""3.defensive_yaw_jitter_offset"":0,""7.defensive_yaw_jitter_right"":0,""5.defensive_yaw_jitter_right"":0,""9.separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF009"",""3.defensive_yaw_jitter_right"":0,""6.yaw_jitter_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF006"",""6.yaw_jitter_variance"":0,""4.yaw_jitter_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF004"",""9.yaw_variance"":0,""10.defensive_yaw_delay"":1,""1.yaw_variance"":0,""3.separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF003"",""1.separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF001"",""7.separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF007"",""viewmodel"":false,""5.separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF005"",""7.body_yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF007"",""4.yaw_jitter_delay"":1,""1.body_yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF001"",""1.defensive_yaw"":false,""3.body_yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF003"",""viewmodel_vertical"":0,""8.defensive_yaw_jitter_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF008"",""13.yaw_jitter_type"":""Offset"",""7.defensive_yaw"":false,""9.body_yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF009"",""1.defensive_yaw_jitter_offset"":0,""12.defensive_yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0012"",""5.body_yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF005"",""5.bombsite_fix"":false,""5.defensive_pitch_offset2"":0,""5.pitch_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF005"",""3.defensive_pitch_offset2"":0,""7.defensive_yaw_jitter_offset"":0,""9.pitch_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF009"",""5.defensive_yaw_jitter_offset"":0,""10.defensive_pitch_offset2"":0,""6.defensive_pitch_variance"":0,""8.defensive_pitch_variance"":0,""13.yaw_offset"":0,""12.yaw_jitter_offset"":0,""10.defensive_pitch_type"":""Switch"",""3.pitch_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF003"",""4.yaw_jitter_type"":""Offset"",""7.pitch_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF007"",""1.pitch_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF001"",""2.defensive_pitch_variance"":0,""10.defensive_yaw"":false,""4.defensive_pitch_variance"":0,""10.defensive_yaw_jitter_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0010"",""1.freestanding"":false,""2.body_yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF002"",""7.freestanding"":false,""4.defensive_pitch_offset2"":0,""5.freestanding"":false,""1.defensive_pitch_offset1"":0,""1.yaw_jitter_right"":0,""10.freestanding_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0010"",""2.yaw_jitter_left"":0,""10.body_yaw"":""Off"",""5.defensive_yaw_jitter_delay"":1,""12.defensive_pitch_type"":""Switch"",""9.defensive_yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF009"",""2.yaw_offset"":0,""3.freestanding"":false,""12.defensive_yaw"":false,""10.defensive_yaw_jitter_delay"":1,""12.yaw_jitter_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0012"",""9.yaw_jitter_left"":0,""3.defensive_yaw_jitter_delay"":1,""9.defensive_yaw_delay"":1,""2.defensive_angles_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF002"",""9.yaw_jitter_delay"":1,""9.yaw_jitter_right"":0,""13.yaw_left"":0,""9.defensive_yaw_jitter_right"":0,""13.yaw_jitter_right"":0,""11.yaw_base"":""At targets"",""6.yaw_jitter_type"":""Offset"",""9.defensive_yaw_jitter_delay"":1,""1.yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF001"",""6.defensive_yaw_jitter1"":false,""3.yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF003"",""4.yaw_jitter_left"":0,""12.defensive_yaw_jitter_type"":""Offset"",""5.defensive_yaw"":false,""7.yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF007"",""8.yaw_jitter_left"":0,""4.yaw_jitter_right"":0,""9.defensive_yaw"":false,""2.yaw_jitter_right"":0,""5.defensive_yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF005"",""8.yaw_jitter_right"":0,""3.defensive_yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF003"",""6.yaw_jitter_right"":0,""12.force_defensive"":false,""2.yaw_jitter"":""Center"",""1.yaw_offset"":0,""9.freestanding"":false,""6.defensive_angles_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF006"",""8.yaw_jitter_type"":""Offset"",""4.defensive_angles_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF004"",""filter_console"":true,""2.defensive_pitch"":false,""4.pitch_offset"":0,""9.yaw_offset"":0,""7.defensive_angles_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF007"",""fps_boost_triggers"":{},""13.yaw_jitter_left"":0,""12.freestanding"":false,""8.body_yaw_offset"":0,""12.defensive_pitch_variance"":0,""7.yaw_right"":12,""7.defensive_yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF007"",""10.defensive_pitch_offset"":0,""5.defensive_pitch_offset"":0,""2.defensive_pitch_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF002"",""3.defensive_pitch_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF003"",""13.separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0013"",""3.defensive_pitch_offset1"":0,""4.defensive_yaw_delay"":1,""8.defensive_yaw_jitter_offset"":0,""8.defensive_yaw_jitter_variance"":0,""8.defensive_angles_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF008"",""7.defensive_yaw_jitter_left"":0,""2.defensive_pitch_delay"":1,""10.defensive_yaw_jitter2"":""Off"",""manual_yaw"":true,""5.yaw_left"":-10,""safe_head"":true,""roll"":false,""11.defensive_angles_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0011"",""1.pitch_offset"":0,""2.defensive_yaw_type"":""Random"",""7.override"":true,""10.defensive_yaw_jitter_variance"":0,""9.override"":false,""drop_grenades_selection"":[""HE"",""Molotov""],""improvements"":true,""3.yaw_jitter"":""Center"",""5.override"":true,""8.body_yaw"":""Off"",""10.defensive_yaw_jitter_offset"":0,""better_scope_overlay_size"":60,""chat_spammer"":false,""4.defensive_yaw"":false,""7.yaw"":""Left \/ Right"",""7.yaw_offset"":0,""11.defensive_pitch_delay"":1,""6.defensive_yaw_offset"":180,""9.defensive_yaw_jitter_left"":0,""4.defensive_yaw_jitter_variance"":0,""11.yaw_delay"":1,""2.defensive_yaw_offset"":180,""3.override"":true,""8.pitch_offset"":0,""9.yaw_left"":0,""5.yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF005"",""7.yaw_left"":-3,""6.yaw_delay"":1,""13.defensive_pitch"":false,""2.body_yaw_offset"":99,""6.defensive_pitch_type"":""Switch"",""1.yaw_right"":0,""1.yaw_left"":0,""7.bombsite_fix"":false,""7.body_yaw"":""Jitter"",""6.yaw_offset"":0,""4.yaw_jitter_offset"":57,""6.yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF006"",""10.defensive_yaw_type"":""Random"",""10.yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0010"",""animations_legs_on_ground"":""Off"",""5.defensive_yaw_offset"":180,""1.defensive_yaw_jitter2"":""Off"",""fast_ladder"":false,""6.yaw_jitter_left"":0,""12.yaw_jitter_left"":0,""7.defensive_yaw_jitter1"":false,""1.defensive_pitch"":false,""10.defensive_yaw_offset"":180,""12.defensive_pitch_delay"":1,""12.defensive_angles_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0012"",""12.yaw_jitter_variance"":0,""1.defensive_pitch_delay"":1,""3.defensive_pitch"":false,""animations_body"":""Off"",""shadows_pitch"":25,""3.body_yaw"":""Jitter"",""7.defensive_pitch"":false,""6.defensive_yaw_jitter_offset"":0,""6.yaw_right"":0,""4.defensive_yaw_jitter2"":""Off"",""11.defensive_yaw_jitter_left"":0,""2.defensive_yaw_delay"":1,""better_scope_overlay"":true,""11.defensive_yaw_jitter_offset"":0,""6.defensive_yaw_jitter_delay"":1,""1.defensive_yaw_jitter_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF001"",""animations"":false,""1.defensive_pitch_offset"":0,""11.defensive_yaw_jitter_delay"":1,""9.yaw"":""Off"",""12.defensive_yaw_variance"":0,""10.yaw"":""Off"",""3.bombsite_fix"":false,""3.defensive_pitch_offset"":0,""13.defensive_pitch_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0013"",""12.yaw_variance"":0,""5.defensive_yaw_jitter_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF005"",""3.defensive_pitch_delay"":1,""6.body_yaw"":""Off"",""5.defensive_pitch_delay"":1,""1.defensive_pitch_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF001"",""5.defensive_pitch_offset1"":0,""7.pitch"":""Down"",""1.defensive_yaw_jitter_right"":0,""11.freestanding_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0011"",""5.defensive_yaw_jitter_left"":0,""7.defensive_pitch_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF007"",""8.defensive_yaw_delay"":1,""9.defensive_pitch_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF009"",""6.defensive_yaw_delay"":1,""8.defensive_yaw_type"":""Random"",""9.defensive_pitch_offset"":0,""6.defensive_yaw_type"":""Random"",""7.defensive_pitch_offset"":0,""4.defensive_yaw_type"":""Random"",""7.defensive_pitch_offset2"":0,""8.defensive_pitch_offset2"":0,""4.pitch"":""Down"",""4.defensive_pitch_delay"":1,""1.defensive_yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF001"",""8.defensive_yaw_jitter_type"":""Offset"",""9.defensive_pitch_offset1"":0,""8.defensive_yaw_variance"":0,""7.defensive_pitch_offset1"":0,""2.yaw_delay"":1,""11.defensive_yaw_delay"":1,""11.yaw_jitter_type"":""Offset"",""11.defensive_angles"":false,""5.yaw_offset"":0,""9.body_yaw"":""Off"",""6.pitch"":""Off"",""3.pitch_offset"":0,""11.separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0011"",""5.body_yaw"":""Jitter"",""12.body_yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0012"",""4.yaw_variance"":0,""2.defensive_yaw_jitter_type"":""Offset"",""1.body_yaw"":""Off"",""4.defensive_yaw_jitter_type"":""Offset"",""3.freestanding_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF003"",""6.defensive_yaw_variance"":0,""10.defensive_yaw_jitter_right"":0,""11.pitch_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0011"",""6.bombsite_fix"":false,""6.defensive_yaw_jitter_variance"":0,""6.yaw_variance"":0,""6.yaw_jitter_delay"":1,""11.override"":true,""7.defensive_pitch_delay"":1,""2.yaw_jitter_delay"":1,""4.defensive_yaw_variance"":0,""aspect_ratio_offset"":160,""13.defensive_yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0013"",""5.pitch_offset"":0,""11.yaw_jitter_left"":0,""11.defensive_yaw_jitter1"":false,""4.defensive_yaw_offset"":180,""1.defensive_yaw_jitter_left"":0,""4.body_yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF004"",""3.defensive_yaw_jitter_left"":0,""2.body_yaw"":""Jitter"",""viewmodel_field_of_view"":680,""7.defensive_angles"":false,""13.defensive_yaw"":false,""4.yaw_jitter"":""Center"",""7.yaw_jitter_left"":0,""8.defensive_yaw_jitter_right"":0,""7.yaw_variance"":0,""11.yaw_jitter_offset"":0,""9.pitch"":""Off"",""5.yaw"":""Left \/ Right"",""1.pitch"":""Off"",""5.yaw_delay"":1,""8.defensive_pitch"":false,""9.yaw_jitter_type"":""Offset"",""6.defensive_yaw_jitter_type"":""Offset"",""11.defensive_pitch_offset1"":0,""11.defensive_pitch_type"":""Switch"",""animations_landing_pitch"":false,""11.body_yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0011"",""10.yaw_jitter_type"":""Offset"",""8.yaw_base"":""Local view"",""4.defensive_yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF004"",""1.defensive_angles"":false,""10.yaw_offset"":0,""10.yaw_jitter"":""Off"",""11.yaw_jitter"":""Off"",""9.defensive_yaw_jitter_variance"":0,""6.yaw_base"":""Local view"",""13.bombsite_fix"":true,""4.yaw_base"":""At targets"",""10.defensive_pitch_delay"":1,""2.yaw_base"":""At targets"",""10.pitch_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0010"",""4.defensive_yaw_jitter_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF004"",""1.defensive_yaw_jitter_variance"":0,""4.defensive_yaw_jitter1"":false,""10.yaw_jitter_right"":0,""10.override"":false,""9.defensive_angles"":false,""2.yaw"":""Left \/ Right"",""11.defensive_yaw_jitter_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0011"",""7.defensive_yaw_jitter_delay"":1,""1.defensive_yaw_jitter_delay"":1,""5.defensive_yaw_jitter1"":false,""7.defensive_yaw_jitter_variance"":0,""8.yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF008"",""5.defensive_yaw_jitter_variance"":0,""11.yaw_jitter_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0011"",""2.yaw_jitter_offset"":45,""12.yaw_left"":0,""8.yaw_jitter_offset"":0,""6.yaw_jitter_offset"":0,""10.yaw_base"":""Local view"",""8.override"":false,""8.defensive_yaw"":false,""viewmodel_adjustment"":false,""3.yaw_offset"":0,""3.yaw_jitter_left"":36,""13.pitch_offset"":0,""4.defensive_yaw_jitter_delay"":1,""4.yaw_jitter_variance"":11,""7.defensive_yaw_offset"":180,""9.pitch_offset"":0,""9.defensive_yaw_offset"":180,""3.defensive_yaw_jitter_variance"":0,""3.defensive_yaw_offset"":180,""2.yaw_jitter_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF002"",""10.defensive_angles"":false,""10.bombsite_fix"":false,""10.pitch_offset"":0,""10.force_defensive"":false,""13.force_defensive"":false,""11.defensive_yaw_jitter_type"":""Offset"",""12.yaw_jitter_delay"":1,""freestanding_disablers"":[""Slow motion"",""In air""],""12.defensive_pitch_offset1"":0,""10.yaw_jitter_variance"":0,""3.defensive_angles"":false,""4.defensive_pitch"":false,""5.defensive_angles"":false,""12.pitch_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0012"",""7.yaw_delay"":1,""shadows"":false,""animations_sliding"":{},""11.defensive_pitch_offset2"":0,""3.yaw_delay"":1,""11.defensive_yaw_jitter_right"":0,""13.defensive_pitch_variance"":0,""11.yaw_jitter_delay"":1,""11.yaw_right"":0,""8.yaw_variance"":0,""3.force_defensive"":false,""11.pitch"":""Down"",""5.pitch"":""Down"",""11.defensive_pitch_offset"":0,""12.body_yaw_offset"":0,""11.body_yaw_offset"":0,""4.yaw"":""Left \/ Right"",""viewmodel_opposite_knife_hand"":false,""11.defensive_yaw"":false,""2.defensive_yaw_variance"":0,""7.pitch_offset"":0,""11.pitch_offset"":0,""1.freestanding_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF001"",""5.defensive_pitch_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF005"",""9.yaw_right"":0,""11.defensive_yaw_jitter2"":""Off"",""11.bombsite_fix"":false,""10.pitch"":""Off"",""5.yaw_right"":14,""11.yaw_left"":0,""9.yaw_delay"":1,""12.yaw_right"":0,""11.freestanding"":true,""12.pitch_offset"":0,""3.defensive_yaw"":false,""9.force_defensive"":false,""7.freestanding_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF007"",""2.yaw_jitter_variance"":23,""1.yaw_delay"":1,""3.pitch"":""Down"",""1.defensive_pitch_offset2"":0,""6.defensive_yaw_jitter2"":""Off"",""5.freestanding_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF005"",""8.defensive_yaw_jitter2"":""Off"",""3.body_yaw_offset"":-59,""2.defensive_yaw_jitter2"":""Off"",""9.freestanding_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF009"",""12.yaw_delay"":1,""viewmodel_height"":-15,""2.defensive_yaw_jitter1"":false,""11.defensive_yaw_jitter_variance"":0,""8.defensive_pitch_type"":""Switch"",""shadows_yaw"":-55,""13.defensive_yaw_jitter_offset"":0,""7.defensive_yaw_jitter2"":""Off"",""4.defensive_pitch_type"":""Switch"",""13.yaw_jitter_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0013"",""animations_legs_in_air"":""Off"",""1.yaw"":""Off"",""8.yaw_right"":0,""6.defensive_yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF006"",""better_scope_overlay_gap"":15,""12.yaw_jitter"":""Off"",""2.yaw_jitter_type"":""Offset"",""4.body_yaw_offset"":-82,""13.body_yaw"":""Off"",""7.yaw_jitter"":""Center"",""10.defensive_pitch"":false,""1.yaw_jitter"":""Off"",""2.defensive_pitch_type"":""Switch"",""3.yaw_right"":18,""2.defensive_yaw_jitter_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF002"",""5.yaw_jitter"":""Center"",""13.defensive_yaw_type"":""Random"",""11.yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0011"",""6.defensive_yaw_jitter_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF006"",""9.yaw_jitter_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF009"",""quick_plant"":true,""11.yaw_jitter_variance"":0,""11.defensive_yaw_offset"":180,""freestanding"":true,""12.override"":true,""3.yaw_jitter_variance"":0,""13.defensive_angles"":false,""1.yaw_jitter_variance"":0,""roll_offset"":0,""3.yaw_left"":-7,""10.defensive_pitch_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0010"",""13.pitch_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0013"",""13.yaw_base"":""Local view"",""8.defensive_yaw_jitter1"":false,""6.force_defensive"":false,""10.defensive_yaw_jitter_left"":0,""8.force_defensive"":false,""6.body_yaw_offset"":0,""13.pitch"":""Off"",""1.override"":true,""13.defensive_yaw_jitter_right"":0,""13.yaw"":""Off"",""7.defensive_yaw_delay"":1,""4.yaw_offset"":0,""9.defensive_pitch_delay"":1,""5.defensive_pitch"":false,""better_scope_overlay_inverted"":false,""force_second_zoom"":false,""12.defensive_yaw_jitter1"":false,""13.defensive_yaw_variance"":0,""13.yaw_variance"":0,""9.yaw_jitter"":""Off"",""13.body_yaw_separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0013"",""8.bombsite_fix"":false,""2.force_defensive"":true,""10.separator"":""\u0007404040FFâ€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\u0007FFFFFF0010"",""4.force_defensive"":true,""4.bombsite_fix"":false,""12.defensive_pitch_offset2"":0,""6.defensive_yaw"":false}"
zpqrf5GE,Alpaca Price Watch,About80Ninjas,Python,Friday 30th of May 2025 11:22:07 AM CDT,"import websocket
import json
import os
import time
from datetime import datetime, timezone

# --- ANSI Color Codes ---
GREEN = '\033[92m'
RED = '\033[91m'
RESET = '\033[0m' # Resets the color
YELLOW = '\033[93m' # For no change or initial display
BLUE = '\033[94m'   # For TRADE label
CYAN = '\033[96m'   # For QUOTE label

# --- TROUBLESHOOTING NOTE ---
# ""insufficient subscription (Code: 409)"" from Alpaca means your API key
# doesn't have the necessary subscription for the chosen data feed.
# Ensure SOCKET_URL below is set appropriately (likely IEX_SOCKET_URL for paper trading).
# --- END TROUBLESHOOTING NOTE ---

# --- Configuration ---
API_KEY = os.environ.get('APCA_API_KEY_ID') or ""YOUR_API_KEY""
API_SECRET = os.environ.get('APCA_API_SECRET_KEY') or ""YOUR_API_SECRET""
TICKER_SYMBOL = ""GME""

SIP_SOCKET_URL = ""wss://stream.data.alpaca.markets/v2/sip""
IEX_SOCKET_URL = ""wss://stream.data.alpaca.markets/v2/iex""

# CHOOSE YOUR SOCKET URL HERE:
# For paper trading, use IEX_SOCKET_URL.
# SOCKET_URL = SIP_SOCKET_URL
SOCKET_URL = IEX_SOCKET_URL # Set for IEX based on paper account

# --- Global Variables ---
authenticated = False
# Store the last prices to determine color changes
last_trade_price = 0.0
last_bid_price = 0.0
last_ask_price = 0.0


def get_price_color(current_price, last_price):
    """"""Determines the color based on price change.""""""
    if last_price == 0.0: # First price update
        return YELLOW
    if current_price is None: # current_price might be None if parsing failed
        return RESET # Default color if price is None
    if current_price > last_price:
        return GREEN
    elif current_price < last_price:
        return RED
    else:
        return YELLOW

def format_timestamp_iso(iso_timestamp_str):
    """"""Formats an ISO 8601 timestamp string (used for both trades and quotes from IEX).""""""
    if iso_timestamp_str:
        try:
            if iso_timestamp_str.endswith('Z'):
                 dt_object = datetime.fromisoformat(iso_timestamp_str.replace('Z', '+00:00'))
            else:
                 dt_object = datetime.fromisoformat(iso_timestamp_str)
                 if dt_object.tzinfo is None:
                      dt_object = dt_object.replace(tzinfo=timezone.utc)
            return dt_object.strftime('%H:%M:%S.%f')[:-3] + "" UTC""
        except ValueError as e:
            print(f""{RED}Error converting ISO timestamp '{iso_timestamp_str}': {e}{RESET}"")
            return ""Invalid Timestamp""
    return ""N/A""


def on_open(ws):
    global authenticated, last_trade_price, last_bid_price, last_ask_price
    authenticated = False
    last_trade_price = 0.0
    last_bid_price = 0.0
    last_ask_price = 0.0
    print(""WebSocket connection opened."")
    if not API_KEY or API_KEY == ""YOUR_API_KEY"" or not API_SECRET or API_SECRET == ""YOUR_API_SECRET"":
        print(f""{RED}Error: API_KEY or API_SECRET not configured. Please set them.{RESET}"")
        ws.close()
        return

    auth_data = {""action"": ""auth"", ""key"": API_KEY, ""secret"": API_SECRET}
    ws.send(json.dumps(auth_data))
    print(f""Sent authentication request for API Key ID starting with: {API_KEY[:4]}..."")

def on_message(ws, message):
    global authenticated, last_trade_price, last_bid_price, last_ask_price
    try:
        data_list = json.loads(message)
        for item in data_list:
            message_type = item.get(""T"")

            if message_type == ""success"" and item.get(""msg"") == ""authenticated"":
                authenticated = True
                print(f""{GREEN}Successfully authenticated!{RESET}"")
                subscribe_message = {
                    ""action"": ""subscribe"",
                    ""trades"": [TICKER_SYMBOL],
                    ""quotes"": [TICKER_SYMBOL],
                }
                ws.send(json.dumps(subscribe_message))
                print(f""Subscribing to trades and quotes for {TICKER_SYMBOL}..."")

            elif message_type == ""error"":
                error_msg = item.get('msg')
                error_code = item.get('code')
                print(f""{RED}API Error: {error_msg} (Code: {error_code}){RESET}"")
                if error_code == 409:
                    print(f""{RED}This 'insufficient subscription' error means your Alpaca account/API key ""
                          f""doesn't have access to this data feed. Check SOCKET_URL and your Alpaca plan.{RESET}"")
                ws.close()

            elif message_type == ""subscription"":
                print(f""Subscription update: Trades: {item.get('trades', [])}, ""
                      f""Quotes: {item.get('quotes', [])}, Bars: {item.get('bars', [])}"")

            elif authenticated:
                symbol = item.get(""S"")
                if symbol != TICKER_SYMBOL:
                    continue

                if message_type == ""t"":  # Trade message
                    price = item.get(""p"")
                    size = item.get(""s"")
                    raw_timestamp = item.get(""t"")
                    readable_time = format_timestamp_iso(raw_timestamp)
                    
                    price_color = get_price_color(price, last_trade_price)
                    price_num = price if price is not None else 0.0

                    # Infer trade side
                    trade_side_indicator = f""{YELLOW}[CROSS]{RESET}"" # Default
                    if price is not None:
                        if last_ask_price > 0 and price >= last_ask_price:
                            trade_side_indicator = f""{GREEN}[BUY]{RESET}""
                        elif last_bid_price > 0 and price <= last_bid_price:
                            trade_side_indicator = f""{RED}[SELL]{RESET}""
                    
                    print(f""{BLUE}TRADE{RESET} [{symbol}]: {trade_side_indicator} Price: {price_color}${price_num:<7.2f}{RESET} ""
                          f""Size: {size:<5} Time: {readable_time}"")
                    
                    if price is not None:
                        last_trade_price = price


                elif message_type == ""q"":  # Quote message
                    bid_price = item.get(""bp"")
                    bid_size = item.get(""bs"")
                    ask_price = item.get(""ap"")
                    ask_size = item.get(""as"")
                    raw_timestamp = item.get(""t"")
                    readable_time = format_timestamp_iso(raw_timestamp)

                    bid_color = get_price_color(bid_price, last_bid_price)
                    ask_color = get_price_color(ask_price, last_ask_price)

                    bid_price_num = bid_price if bid_price is not None else 0.0
                    ask_price_num = ask_price if ask_price is not None else 0.0
                    
                    print(f""{CYAN}QUOTE{RESET} [{symbol}]: Bid: {bid_color}${bid_price_num:<7.2f}{RESET} (Size: {bid_size:<4}) ""
                          f""Ask: {ask_color}${ask_price_num:<7.2f}{RESET} (Size: {ask_size:<4}) Time: {readable_time}"")
                    
                    if bid_price is not None:
                        last_bid_price = bid_price
                    if ask_price is not None:
                        last_ask_price = ask_price
                
                elif not (message_type == ""success"" and item.get(""msg"") == ""connected""):
                    print(f""Other data: {item}"")
            
            elif not (message_type == ""success"" and item.get(""msg"") == ""connected""):
                 print(f""System message: {item}"")

    except json.JSONDecodeError:
        print(f""{RED}Failed to decode JSON: {message}{RESET}"")
    except Exception as e:
        print(f""{RED}An error occurred in on_message: {e!r}{RESET}"")

def on_error(ws, error):
    print(f""{RED}WebSocket error: {error}{RESET}"")

def on_close(ws, close_status_code, close_msg):
    global authenticated
    authenticated = False
    print(f""WebSocket connection closed. Code: {close_status_code}, Message: {close_msg if close_msg else 'N/A'}"")

def main():
    print(""Starting Alpaca WebSocket client..."")
    print(f""Connecting to: {SOCKET_URL} for ticker: {TICKER_SYMBOL}"")

    if API_KEY == ""YOUR_API_KEY"" or API_SECRET == ""YOUR_API_SECRET"":
        print(f""{YELLOW}WARNING: API_KEY or API_SECRET is set to placeholder values. Please configure them.{RESET}"")

    ws_app = websocket.WebSocketApp(SOCKET_URL,
                                  on_open=on_open,
                                  on_message=on_message,
                                  on_error=on_error,
                                  on_close=on_close)
    try:
        ws_app.run_forever()
    except KeyboardInterrupt:
        print(f""\n{YELLOW}WebSocket client stopped by user.{RESET}"")
    except Exception as e:
        print(f""{RED}An unexpected error occurred while running WebSocketApp: {e!r}{RESET}"")
    finally:
        if 'ws_app' in locals() and hasattr(ws_app, 'sock') and ws_app.sock and ws_app.sock.connected:
            ws_app.close()
        print(""WebSocket client shutdown complete."")

if __name__ == ""__main__"":
    main()
"
SqzSEmtz,LongBow & Arrow Animation Wireframe (Improved Trajectory),alien_fx_fiend,C++,Friday 30th of May 2025 11:03:38 AM CDT,"==++ Here is the full source code (file 1/1) of ""bow and arrow.cpp"":: ++==
```bow and arrow.cpp
//  BowAndArrow.cpp
//  Simple Win32 / Direct2D demo - ""wireframe longbow""
//  Build: cl /EHsc /DUNICODE /D_UNICODE BowAndArrow.cpp d2d1.lib user32.lib gdi32.lib

#include <windows.h>
#include <d2d1.h>
#include <chrono>
#include <cmath>
#include <algorithm>
#pragma comment(lib, ""d2d1"")

// -------------------------------------------------
// Small RAII helper to release COM objects
// -------------------------------------------------
template<class T> void SafeRelease(T** pp)
{
    if (*pp) { (*pp)->Release(); *pp = nullptr; }
}

// -------------------------------------------------
// Animation constants
// -------------------------------------------------
constexpr float  COCK_TIME = 1.0f;   // seconds
constexpr float  HOLD_TIME = 0.5f;   // seconds
constexpr float  FIRE_TIME = 1.0f;   // seconds
constexpr UINT   TIMER_ID = 1;
constexpr UINT   TIMER_MS = 16;     // ~60 FPS

enum class AnimStage { Cocking, Hold, Firing, Done };
constexpr float ARROW_REST_OFFSET = 500.0f;   // pixels in-front of bow ( > 0 )

// String pull distance (pixels) and bow X center
constexpr float STRING_MAX_PULL = 180.0f;
constexpr float CX_BOW = 220.0f;

// -------------------------------------------------
// Global state (kept simple for a demo)
// -------------------------------------------------
HWND                    g_hWnd = nullptr;
ID2D1Factory* g_pFactory = nullptr;
ID2D1HwndRenderTarget* g_pRenderTarget = nullptr;
ID2D1SolidColorBrush* g_pBrush = nullptr;

float g_windowW = 1280.0f;
float g_windowH = 720.0f;
// Modify g_arrowPosX initialization to start off-screen at the top
float g_arrowPosX = CX_BOW;   // Will be properly positioned in animation update
// Add these with other global variables
float g_arrowPosY = 0.0f;       // Variable for arrow's vertical position
float g_arrowRotation = 0.0f;   // Rotation angle in radians

// Geometry helpers (depend on window height, so they are updated in WM_SIZE)
float cx = CX_BOW;
float topY = 120.0f;
float bottomY = 600.0f;   // will be overwritten in WM_SIZE
float midY = 360.0f;
float halfHeight = 240.0f;

// Animation variables
AnimStage   g_stage = AnimStage::Cocking;
float       g_timeInStage = 0.0f;        // seconds
auto        g_prevTick = std::chrono::high_resolution_clock::now();
float       g_stringOffset = 0.0f;        // 0 = relaxed, 1 = fully drawn
//float       g_arrowPosX = 0.0f;        // head position

// -------------------------------------------------
// Helpers
// -------------------------------------------------
float Lerp(float a, float b, float t) { return a + (b - a) * t; }

// Create or re-create render target
HRESULT CreateDeviceResources()
{
    if (g_pRenderTarget) return S_OK;

    RECT rc; GetClientRect(g_hWnd, &rc);

    D2D1_SIZE_U size = D2D1::SizeU(rc.right - rc.left,
        rc.bottom - rc.top);

    HRESULT hr = g_pFactory->CreateHwndRenderTarget(
        D2D1::RenderTargetProperties(),
        D2D1::HwndRenderTargetProperties(g_hWnd, size),
        &g_pRenderTarget);

    if (SUCCEEDED(hr))
        hr = g_pRenderTarget->CreateSolidColorBrush(
            D2D1::ColorF(D2D1::ColorF::White), &g_pBrush);

    return hr;
}

void DiscardDeviceResources()
{
    SafeRelease(&g_pBrush);
    SafeRelease(&g_pRenderTarget);
}

// -------------------------------------------------
// Core rendering
// -------------------------------------------------
void OnRender()
{
    if (FAILED(CreateDeviceResources()))
        return;

    g_pRenderTarget->BeginDraw();
    g_pRenderTarget->Clear(D2D1::ColorF(0x202020)); // dark bg

    // -------------------------------------------------
    // 1. Draw Bow limbs (two quadratic curves)
    // -------------------------------------------------
    ID2D1PathGeometry* pGeom = nullptr;
    ID2D1GeometrySink* pSink = nullptr;
    if (SUCCEEDED(g_pFactory->CreatePathGeometry(&pGeom)))
    {
        pGeom->Open(&pSink);

        //--------------------------------------------------------------
        //  One continuous "")""-shaped limb with a slightly pointy tip.
        //  End-points stay on the string ( (cx, topY) & (cx, bottomY) )
        //--------------------------------------------------------------
        constexpr float NOSE = 35.0f;               // how far the tips stick out
        const     float BULGE = halfHeight * 0.5f;  // max belly distance (x)

        pSink->BeginFigure(D2D1::Point2F(cx, topY), D2D1_FIGURE_BEGIN_HOLLOW);

        // Draw semicircle bow with pointy tip at middle
        // First quarter - top to middle-top
        pSink->AddBezier(
            D2D1::BezierSegment(
                D2D1::Point2F(cx + NOSE, topY + halfHeight * 0.1f),      // slight curve at top
                D2D1::Point2F(cx + BULGE, topY + halfHeight * 0.5f),     // first quarter curve
                D2D1::Point2F(cx + BULGE + NOSE, midY - NOSE)));         // approaching tip

        // Middle part with pointy tip
        pSink->AddBezier(
            D2D1::BezierSegment(
                D2D1::Point2F(cx + BULGE + NOSE * 1.2f, midY - NOSE * 0.5f),  // curve to tip
                D2D1::Point2F(cx + BULGE + NOSE * 1.5f, midY),               // pointy tip
                D2D1::Point2F(cx + BULGE + NOSE * 1.2f, midY + NOSE * 0.5f)));  // curve from tip

        // Last quarter - middle-bottom to bottom
        pSink->AddBezier(
            D2D1::BezierSegment(
                D2D1::Point2F(cx + BULGE + NOSE, midY + NOSE),            // after tip
                D2D1::Point2F(cx + BULGE, bottomY - halfHeight * 0.5f),   // last quarter curve
                D2D1::Point2F(cx + NOSE, bottomY - halfHeight * 0.1f)));  // approaching bottom

        // Connect back to string
        pSink->AddBezier(
            D2D1::BezierSegment(
                D2D1::Point2F(cx + NOSE * 0.5f, bottomY - NOSE * 0.25f),  // curve to bottom
                D2D1::Point2F(cx, bottomY),                              // bottom endpoint
                D2D1::Point2F(cx, bottomY)));                            // dummy point (required)

        pSink->EndFigure(D2D1_FIGURE_END_OPEN);

        pSink->Close();
        g_pRenderTarget->DrawGeometry(pGeom, g_pBrush, 2.0f);

        SafeRelease(&pSink);
        SafeRelease(&pGeom);
    }

    // -------------------------------------------------
    // 2. Draw Bow string
    // -------------------------------------------------
    float pull = g_stringOffset * STRING_MAX_PULL;
    D2D1_POINT_2F p1 = D2D1::Point2F(cx, topY);
    D2D1_POINT_2F pm = D2D1::Point2F(cx - pull, midY);
    D2D1_POINT_2F p2 = D2D1::Point2F(cx, bottomY);

    g_pRenderTarget->DrawLine(p1, pm, g_pBrush, 2.0f);
    g_pRenderTarget->DrawLine(pm, p2, g_pBrush, 2.0f);

    // Replace the OnRender arrow drawing section with this to use variable Y position
// Replace the OnRender arrow drawing section with this to use variable Y position and rotation
// Replace the OnRender arrow drawing section with this to use variable Y position and rotation
// -------------------------------------------------
// 3. Draw Arrow (simple shaft + head + tail)
// -------------------------------------------------
    float arrowLen = 240.0f;
    float arrowHead = 18.0f;

    // Apply rotation to the arrow
    g_pRenderTarget->SetTransform(
        D2D1::Matrix3x2F::Rotation(
            g_arrowRotation * (180.0f / 3.14159f), // Convert radians to degrees
            D2D1::Point2F(g_arrowPosX, g_arrowPosY)
        )
    );

    // Shaft
    g_pRenderTarget->DrawLine(
        D2D1::Point2F(g_arrowPosX, g_arrowPosY),
        D2D1::Point2F(g_arrowPosX - arrowLen, g_arrowPosY),
        g_pBrush, 2.0f);

    // Arrow head (small triangle)
    D2D1_POINT_2F headPts[3] = {
        D2D1::Point2F(g_arrowPosX,                 g_arrowPosY),
        D2D1::Point2F(g_arrowPosX - arrowHead,     g_arrowPosY - arrowHead * 0.5f),
        D2D1::Point2F(g_arrowPosX - arrowHead,     g_arrowPosY + arrowHead * 0.5f)
    };
    g_pRenderTarget->DrawLine(headPts[0], headPts[1], g_pBrush, 2.0f);
    g_pRenderTarget->DrawLine(headPts[0], headPts[2], g_pBrush, 2.0f);

    // Fletching (3 short diagonal lines)
    const float fletch = 20.0f;
    const float step = 5.0f;
    // Top fletching
    for (int i = 0; i < 6; ++i)
    {
        float x = g_arrowPosX - arrowLen + i * step;
        g_pRenderTarget->DrawLine(
            D2D1::Point2F(x, g_arrowPosY),
            D2D1::Point2F(x - fletch, g_arrowPosY - fletch * 0.4f + i * 3.0f),
            g_pBrush, 2.0f);
    }
    // Bottom fletching
    for (int i = 0; i < 6; ++i)
    {
        float x = g_arrowPosX - arrowLen + i * step;
        g_pRenderTarget->DrawLine(
            D2D1::Point2F(x, g_arrowPosY),
            D2D1::Point2F(x - fletch, g_arrowPosY + fletch * 0.4f - i * 3.0f),
            g_pBrush, 2.0f);
    }

    // Reset transform for other drawing operations
    g_pRenderTarget->SetTransform(D2D1::Matrix3x2F::Identity());

    // Present
    HRESULT hr = g_pRenderTarget->EndDraw();
    if (hr == D2DERR_RECREATE_TARGET)
        DiscardDeviceResources();
}

// -------------------------------------------------
// Animation tick (called from WM_TIMER)
// -------------------------------------------------
// Replace the UpdateAnimation function with this updated version
// Replace the UpdateAnimation function with this updated version
void UpdateAnimation()
{
    // Compute delta time
    auto  now = std::chrono::high_resolution_clock::now();
    float dt = std::chrono::duration<float>(now - g_prevTick).count();
    g_prevTick = now;
    g_timeInStage += dt;

    switch (g_stage)
    {
    case AnimStage::Cocking:
    {
        float t = min(g_timeInStage / COCK_TIME, 1.0f);

        if (t < 0.6f) {
            // First part: arrow dropping from top with tail pointing down
            float arcT = t / 0.6f;  // Normalize to 0-1 for just this part

            // Starting position at top, end at bow position
            float startX = cx + 100.0f;    // Start slightly right of bow
            float startY = 0.0f;           // Start at top of screen
            float endX = cx + 50.0f;       // End to the right of bow
            float endY = midY - 50.0f;     // End slightly above midpoint

            // Calculate curved path 
            g_arrowPosX = Lerp(startX, endX, arcT);
            g_arrowPosY = Lerp(startY, endY, arcT * arcT); // Accelerate down

            // Arrow has tail pointing down (pointing up = -90 degrees = -PI/2)
            g_arrowRotation = -1.57079f + arcT * 1.07079f; // -PI/2 to close to 0
        }
        else if (t < 0.8f) {
            // Second part: arrow rotates to horizontal and moves into position
            float alignT = (t - 0.6f) / 0.2f;  // Normalize to 0-1 for just this part

            // Move arrow into position horizontally
            float startX = cx + 50.0f;
            float startY = midY - 50.0f;
            float endX = cx + 50.0f;  // Position just right of the bow
            float endY = midY;        // At the midpoint height

            g_arrowPosX = Lerp(startX, endX, alignT);
            g_arrowPosY = Lerp(startY, endY, alignT);

            // Complete the rotation to horizontal
            g_arrowRotation = Lerp(-0.5f, 0.0f, alignT); // Finish rotating to horizontal
        }
        else {
            // Third part: arrow attaches to string and string gets pulled
            float stringT = (t - 0.8f) / 0.2f;  // Normalize to 0-1 for just this part

            // Move arrow with string as it's drawn back
            float startX = cx + 50.0f;
            float endX = cx - STRING_MAX_PULL + 50.0f;

            g_arrowPosX = Lerp(startX, endX, stringT);
            g_arrowPosY = midY;
            g_arrowRotation = 0.0f;  // Keep horizontal

            // Pull string back gradually
            g_stringOffset = stringT;
        }

        if (t >= 1.0f) { g_stage = AnimStage::Hold; g_timeInStage = 0.f; }
    } break;

    case AnimStage::Hold:
        // Arrow is now at the correct position
        g_arrowPosY = midY;
        g_arrowRotation = 0.0f;  // Ensure arrow is horizontal

        if (g_timeInStage >= HOLD_TIME)
        {
            g_stage = AnimStage::Firing; g_timeInStage = 0.f;
        }
        break;

    case AnimStage::Firing:
    {
        float t = min(g_timeInStage / FIRE_TIME, 1.0f);
        g_stringOffset = 1.0f - t;             // 1 -> 0  (same)

        float startX = cx - STRING_MAX_PULL + 50.0f;
        float endX = g_windowW + 100.0f;
        g_arrowPosX = Lerp(startX, endX, t);
        g_arrowPosY = midY; // Keep arrow on straight horizontal path
        g_arrowRotation = 0.0f;  // Keep arrow horizontal

        if (t >= 1.0f)
        {
            g_stage = AnimStage::Cocking; g_timeInStage = 0.f;
            // Reset arrow to starting position for next animation cycle
            g_arrowPosX = cx + 100.0f;
            g_arrowPosY = 0.0f;
            g_arrowRotation = -1.57079f;  // Start with tail pointing down (arrow pointing up)
        }
    } break;

    case AnimStage::Done:
        // Not used anymore, but kept for completeness
        break;
    }

    // Request redraw
    InvalidateRect(g_hWnd, nullptr, FALSE);
}

// -------------------------------------------------
// Window procedure
// -------------------------------------------------
LRESULT CALLBACK WndProc(HWND hWnd, UINT msg,
    WPARAM wParam, LPARAM lParam)
{
    switch (msg)
    {
        // Add this initialization in WM_CREATE or before animation starts
    // Add to WM_CREATE case or main initialization
    // Add this initialization in WM_CREATE case
    case WM_CREATE:
        if (FAILED(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED,
            &g_pFactory)))
            return -1; // abort window creation
        SetTimer(hWnd, TIMER_ID, TIMER_MS, nullptr);
        g_prevTick = std::chrono::high_resolution_clock::now();
        g_arrowPosX = cx + 100.0f;   // Initialize right of bow
        g_arrowPosY = 0.0f;          // Initialize at top of screen
        g_arrowRotation = -1.57079f; // Start with tail pointing down (arrow pointing up)
        return 0;

    case WM_SIZE:
    {
        g_windowW = static_cast<float>(LOWORD(lParam));
        g_windowH = static_cast<float>(HIWORD(lParam));

        // Update dependent geometry values
        topY = 120.0f;
        bottomY = g_windowH - 120.0f;
        midY = (topY + bottomY) * 0.5f;
        halfHeight = (bottomY - topY) * 0.5f;

        if (g_pRenderTarget)
            g_pRenderTarget->Resize(
                D2D1::SizeU(static_cast<UINT>(g_windowW),
                    static_cast<UINT>(g_windowH)));
    }
    return 0;

    case WM_TIMER:
        if (wParam == TIMER_ID)
            UpdateAnimation();
        return 0;

    case WM_PAINT:
    {
        PAINTSTRUCT ps;
        BeginPaint(hWnd, &ps);
        OnRender();
        EndPaint(hWnd, &ps);
    } return 0;

    case WM_DESTROY:
        KillTimer(hWnd, TIMER_ID);
        DiscardDeviceResources();
        SafeRelease(&g_pFactory);
        PostQuitMessage(0);
        return 0;
    }
    return DefWindowProc(hWnd, msg, wParam, lParam);
}

// -------------------------------------------------
// WinMain - entry point
// -------------------------------------------------
int WINAPI wWinMain(HINSTANCE hInst, HINSTANCE, PWSTR, int nCmdShow)
{
    const wchar_t CLASS_NAME[] = L""BowWindow"";

    WNDCLASS wc = {};
    wc.lpfnWndProc = WndProc;
    wc.hInstance = hInst;
    wc.hCursor = LoadCursor(nullptr, IDC_ARROW);
    wc.lpszClassName = CLASS_NAME;
    RegisterClass(&wc);

    g_hWnd = CreateWindowEx(0, CLASS_NAME, L""Direct2D - Longbow Demo"",
        WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT,
        static_cast<int>(g_windowW),
        static_cast<int>(g_windowH),
        nullptr, nullptr, hInst, nullptr);

    ShowWindow(g_hWnd, nCmdShow);

    // Main message loop
    MSG msg;
    while (GetMessage(&msg, nullptr, 0, 0))
    {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }
    return 0;
}
```"
xDtWUxKm,ServerError: received 500 HTTP response,basedcount_bot,Python,Friday 30th of May 2025 11:01:39 AM CDT,"Traceback (most recent call last):
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/basedcount_bot.py"", line 46, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/basedcount_bot.py"", line 123, in check_mail
    async for message in reddit_instance.inbox.unread(limit=None):  # Message
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 37, in __anext__
    await self._next_batch()
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 90, in _next_batch
    self._listing = await self._reddit.get(self.url, params=self.params)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 54, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 813, in get
    return await self._objectify_request(method=""GET"", params=params, path=path)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 570, in _objectify_request
    await self.request(
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 54, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 1061, in request
    return await self._core.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 383, in request
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 305, in _request_with_retries
    return await self._do_retry(
           ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 170, in _do_retry
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 305, in _request_with_retries
    return await self._do_retry(
           ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 170, in _do_retry
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Programming/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 322, in _request_with_retries
    raise self.STATUS_EXCEPTIONS[response.status](response)
asyncprawcore.exceptions.ServerError: received 500 HTTP response
"
4bK9ETGF,Untitled,gandalfbialy,C#,Friday 30th of May 2025 10:58:26 AM CDT,"using KinoGigant;

// Class responsible for storing and managing cinema showtimes.
public class ShowCatalog
{
    // Private list of all showtimes.
    private readonly List<Show> _shows = new();

    // Exposes the showtimes as a read-only collection.
    public IReadOnlyList<Show> Shows => _shows;

    // Adds sample showtimes to the catalog.
    public void SeedSampleShows()
    {
        // Add the ""Matrix"" showtime.
        Add(new Show(
            title: ""Matrix"",
            dateTime: new DateTime(2025, 4, 10),
            hour: new DateTime(2025, 4, 10, 18, 0, 0),
            numberOfSeats: 30));

        // Add the ""Inception"" showtime.
        Add(new Show(
            title: ""Inception"",
            dateTime: new DateTime(2025, 4, 11),
            hour: new DateTime(2025, 4, 11, 20, 0, 0),
            numberOfSeats: 30));
    }

    // Adds a single show to the catalog.
    public void Add(Show show) => _shows.Add(show);
}
"
6i66XGVb,Grow A Garden Coin Dupe NOT PATCHED,velvetkk,Lua,Friday 30th of May 2025 10:52:30 AM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/castleofsolace/GrowAGardenDUPE1/refs/heads/main/mainHub""))()

-- GROW A GARDEN COIN DUPE
-- USE IT WHILE II'S NOT PATCHED"
zvSnYJ6s,Untitled,chrissharp123,PostgreSQL,Friday 30th of May 2025 10:36:51 AM CDT,"delete from 	actor.usr_message aum
where not exists (
	select 1
	from actor.usr_standing_penalty ausp
	where ausp.usr_message = aum.id
	) and aum.create_date < date(now() - '3 months'::interval);
"
wCHt40t3,Mario-SideScroller D2D-Platformer-Demo,alien_fx_fiend,C++,Friday 30th of May 2025 10:17:15 AM CDT,"++== Here's the full source code for (file 1/1) of ""D2d-Platform-Demo.cpp""::: ++==
```D2d-Platform-Demo.cpp
// ------------------------------------------------------------------
// Super-Tiny Side-Scroller Demo  (Win32 + Direct2D + Memory-DC)
//   cl main.cpp /EHsc /DUNICODE /DWIN32_LEAN_AND_MEAN /Zi /MD
//       d2d1.lib windowscodecs.lib
// ------------------------------------------------------------------
#define NOMINMAX
#include <windows.h>
#include <d2d1.h>
#include <cmath>
#include <algorithm>

#pragma comment(lib, ""d2d1.lib"")

template<class T> inline void SafeRelease(T*& p) { if (p) { p->Release(); p = nullptr; } }

constexpr float GRAVITY = 2000.0f;
constexpr float JUMP_VELOCITY = -700.0f;
constexpr float MOVE_SPEED = 300.0f;
constexpr UINT  TIMER_ID = 1;            // ~60 Hz

struct Entity
{
    float x{}, y{}, w{}, h{}, vx{}, vy{};
    bool  alive{ true };
    D2D1_RECT_F RectF() const { return D2D1::RectF(x, y, x + w, y + h); }
};

Entity player{ 50, 200, 30, 30 };
Entity platform{ 200, 300,180, 20 };
Entity enemy{ 550, 270, 30, 30, 60, 0 };

float cameraX = 0.f;
bool  keyLeft = false, keyRight = false, keyJump = false;

// current bottom-of-world (client-height) – initialised to default 480,
// updated each time the window is resized
float g_worldH = 480.0f;

// ------------------------------------------------------------------
// D2D / GDI globals
// ------------------------------------------------------------------
ID2D1Factory* g_pFactory = nullptr;
ID2D1DCRenderTarget* g_pRT = nullptr;
ID2D1SolidColorBrush* g_pBrush = nullptr;

HDC     g_hMemDC = nullptr;
HBITMAP g_hMemBmp = nullptr;
SIZE    g_back{};

// ------------------------------------------------------------------
// Back-buffer + render target
// ------------------------------------------------------------------
void CreateBackBuffer(HDC wndDC, int w, int h)
{
    if (w == 0 || h == 0) return;

    if (g_hMemBmp) DeleteObject(g_hMemBmp);
    if (!g_hMemDC) g_hMemDC = CreateCompatibleDC(wndDC);

    BITMAPINFO bi{};
    bi.bmiHeader.biSize = sizeof(bi.bmiHeader);
    bi.bmiHeader.biWidth = w;
    bi.bmiHeader.biHeight = -h;        // top-down
    bi.bmiHeader.biPlanes = 1;
    bi.bmiHeader.biBitCount = 32;
    bi.bmiHeader.biCompression = BI_RGB;

    g_hMemBmp = CreateDIBSection(wndDC, &bi, DIB_RGB_COLORS, nullptr, nullptr, 0);
    SelectObject(g_hMemDC, g_hMemBmp);
    g_back = { w,h };

    if (!g_pRT)                                   // first creation
    {
        D2D1_RENDER_TARGET_PROPERTIES props =
            D2D1::RenderTargetProperties(
                D2D1_RENDER_TARGET_TYPE_DEFAULT,
                // *** EXPLICIT BGRA 32-bit format (fix) ***
                D2D1::PixelFormat(DXGI_FORMAT_B8G8R8A8_UNORM,
                    D2D1_ALPHA_MODE_PREMULTIPLIED));
        if (SUCCEEDED(g_pFactory->CreateDCRenderTarget(&props, &g_pRT)))
            g_pRT->CreateSolidColorBrush(
                D2D1::ColorF(D2D1::ColorF::White), &g_pBrush);
    }
}

// ------------------------------------------------------------------
// Physics / game update
// ------------------------------------------------------------------
inline bool Intersect(const Entity& a, const Entity& b)
{
    return a.x<b.x + b.w && a.x + a.w>b.x &&
        a.y<b.y + b.h && a.y + a.h>b.y;
}

void GameUpdate(float dt)
{
    player.vx = 0;
    if (keyLeft)  player.vx -= MOVE_SPEED;
    if (keyRight) player.vx += MOVE_SPEED;

    static bool prevJump = false;
    if (keyJump && !prevJump &&
        std::abs(player.vy) < 0.01f &&
        player.y + player.h >= platform.y - 1)
        player.vy = JUMP_VELOCITY;
    prevJump = keyJump;

    player.vy += GRAVITY * dt;
    player.x += player.vx * dt;
    player.y += player.vy * dt;

    if (player.vy > 0 &&
        player.y + player.h >= platform.y &&
        player.x + player.w > platform.x &&
        player.x < platform.x + platform.w)
    {
        player.y = platform.y - player.h; player.vy = 0;
    }

    //if (player.y + player.h > 480) { player.y = 480 - player.h; player.vy = 0; }
        // collide with *current* bottom of the window
        if (player.y + player.h > g_worldH)
         {
        player.y = g_worldH - player.h;
        player.vy = 0;
        }

    if (enemy.alive)
    {
        enemy.x += enemy.vx * dt;
        if (enemy.x < 530) { enemy.x = 530; enemy.vx = std::abs(enemy.vx); }
        if (enemy.x > 650) { enemy.x = 650; enemy.vx = -std::abs(enemy.vx); }
    }

    if (enemy.alive && Intersect(player, enemy))
    {
        bool stomp = player.vy > 0 && player.y + player.h - enemy.y < 15;
        if (stomp) { enemy.alive = false; player.vy = JUMP_VELOCITY * 0.75f; }
        else { player = { 50,200,30,30 }; }
    }

    cameraX = std::max(0.f, player.x - 320.f);
}

// ------------------------------------------------------------------
// Rendering
// ------------------------------------------------------------------
void GameRender()
{
    if (!g_pRT) return;                   // guard

    RECT rc = { 0,0,g_back.cx,g_back.cy };
    g_pRT->BindDC(g_hMemDC, &rc);

    g_pRT->BeginDraw();
    g_pRT->Clear(D2D1::ColorF(0.08f, 0.10f, 0.15f));

    auto draw = [&](const Entity& e, D2D1::ColorF c)
    {
        g_pBrush->SetColor(c);
        g_pRT->FillRectangle(
            D2D1::RectF(e.x - cameraX, e.y,
                e.x - cameraX + e.w, e.y + e.h),
            g_pBrush);
    };

    draw(platform, D2D1::ColorF(0.6f, 0.4f, 0.2f));
    if (enemy.alive) draw(enemy, D2D1::ColorF(0.9f, 0.2f, 0.2f));
    draw(player, D2D1::ColorF(0.2f, 0.7f, 1.0f));

    // ---------- handle device-loss / recreate-target ----------
    HRESULT hr = g_pRT->EndDraw();
    if (hr == D2DERR_RECREATE_TARGET)
    {
        SafeRelease(g_pRT);
        SafeRelease(g_pBrush);
    }
}

// ------------------------------------------------------------------
// Window procedure
// ------------------------------------------------------------------
LRESULT CALLBACK WndProc(HWND hWnd, UINT msg, WPARAM w, LPARAM l)
{
    switch (msg)
    {
    case WM_CREATE:
        D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, &g_pFactory);
        return 0;

    case WM_SIZE:
    {
        int wdt = LOWORD(l), hgt = HIWORD(l);
        HDC hdc = GetDC(hWnd);
        CreateBackBuffer(hdc, wdt, hgt);
        ReleaseDC(hWnd, hdc);

        static bool timerStarted = false;
        if (!timerStarted && g_pRT)
        {
            SetTimer(hWnd, TIMER_ID, 16, nullptr); timerStarted = true;
        }        
            // update game-world height so the player can't fall below view
            g_worldH = static_cast<float>(hgt);
    } return 0;

    case WM_KEYDOWN: case WM_KEYUP:
    {
        bool down = (msg == WM_KEYDOWN);
        switch (w)
        {
        case VK_LEFT:  keyLeft = down; break;
        case VK_RIGHT: keyRight = down; break;
        case VK_SPACE: keyJump = down; break;
        }
    } return 0;

    case WM_TIMER:
    {
        static LARGE_INTEGER fq{}, prev{};
        if (!fq.QuadPart)
        {
            QueryPerformanceFrequency(&fq); QueryPerformanceCounter(&prev);
        }

        LARGE_INTEGER now; QueryPerformanceCounter(&now);
        float dt = float(now.QuadPart - prev.QuadPart) / fq.QuadPart;
        prev = now;

        GameUpdate(dt);
        InvalidateRect(hWnd, nullptr, FALSE);
    } return 0;

    case WM_PAINT:
    {
        PAINTSTRUCT ps;
        HDC hdc = BeginPaint(hWnd, &ps);
        GameRender();
        if (g_hMemDC)
            BitBlt(hdc, 0, 0, g_back.cx, g_back.cy,
                g_hMemDC, 0, 0, SRCCOPY);
        EndPaint(hWnd, &ps);
    } return 0;

    case WM_DESTROY:
        KillTimer(hWnd, TIMER_ID);
        PostQuitMessage(0);
        return 0;
    }
    return DefWindowProc(hWnd, msg, w, l);
}

// ------------------------------------------------------------------
// Entry point
// ------------------------------------------------------------------
int WINAPI wWinMain(HINSTANCE hInst, HINSTANCE, PWSTR, int nCmd)
{
    WNDCLASSEX wc{ sizeof wc };
    wc.hInstance = hInst;
    wc.lpfnWndProc = WndProc;
    wc.lpszClassName = L""SideScrollerWnd"";
    wc.hCursor = LoadCursor(nullptr, IDC_ARROW);
    RegisterClassEx(&wc);

    HWND hWnd = CreateWindowEx(0, L""SideScrollerWnd"",
        L""Mini Side-Scroller (D2D + GDI)"",
        WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT, 800, 480,
        nullptr, nullptr, hInst, nullptr);

    ShowWindow(hWnd, nCmd);
    UpdateWindow(hWnd);

    MSG msg;
    while (GetMessage(&msg, nullptr, 0, 0) > 0)
    {
        TranslateMessage(&msg); DispatchMessage(&msg);
    }

    SafeRelease(g_pBrush);
    SafeRelease(g_pRT);
    SafeRelease(g_pFactory);
    if (g_hMemBmp) DeleteObject(g_hMemBmp);
    if (g_hMemDC)  DeleteDC(g_hMemDC);
    return 0;
}
```"
8Zq5BG3L,2025-05-30T16:14:19.796046,powerampache,PHP,Friday 30th of May 2025 09:14:20 AM CDT,"1.01-80 (80) - DB: 83
java.lang.NullPointerException
	at luci.sixsixsix.powerampache2.data.MusicRepositoryImpl$getGenres$2.invokeSuspend(MusicRepositoryImpl.kt:350)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:984)
	at android.os.Handler.dispatchMessage(Handler.java:104)
	at android.os.Looper.loopOnce(Looper.java:238)
	at android.os.Looper.loop(Looper.java:357)
	at android.app.ActivityThread.main(ActivityThread.java:8088)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:548)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:957)

getGenres() - generic exception {""stackTrace"":[{""declaringClass"":""luci.sixsixsix.powerampache2.data.MusicRepositoryImpl$getGenres$2"",""fileName"":""MusicRepositoryImpl.kt"",""lineNumber"":350,""methodName"":""invokeSuspend""},{""declaringClass"":""kotlin.coroutines.jvm.internal.BaseContinuationImpl"",""fileName"":""ContinuationImpl.kt"",""lineNumber"":33,""methodName"":""resumeWith""},{""declaringClass"":""kotlinx.coroutines.DispatchedTask"",""fileName"":""DispatchedTask.kt"",""lineNumber"":104,""methodName"":""run""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":984,""methodName"":""handleCallback""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":104,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":238,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":357,""methodName"":""loop""},{""declaringClass"":""android.app.ActivityThread"",""fileName"":""ActivityThread.java"",""lineNumber"":8088,""methodName"":""main""},{""declaringClass"":""java.lang.reflect.Method"",""fileName"":""Method.java"",""lineNumber"":-2,""methodName"":""invoke""},{""declaringClass"":""com.android.internal.os.RuntimeInit$MethodAndArgsCaller"",""fileName"":""RuntimeInit.java"",""lineNumber"":548,""methodName"":""run""},{""declaringClass"":""com.android.internal.os.ZygoteInit"",""fileName"":""ZygoteInit.java"",""lineNumber"":957,""methodName"":""main""}]}"
bAeix7p7,2025-05-30T16:14:19.797276,powerampache,PHP,Friday 30th of May 2025 09:14:20 AM CDT,"1.01-80 (80) - DB: 83
java.lang.NullPointerException
	at luci.sixsixsix.powerampache2.data.MusicRepositoryImpl$getGenres$2.invokeSuspend(MusicRepositoryImpl.kt:350)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:984)
	at android.os.Handler.dispatchMessage(Handler.java:104)
	at android.os.Looper.loopOnce(Looper.java:238)
	at android.os.Looper.loop(Looper.java:357)
	at android.app.ActivityThread.main(ActivityThread.java:8088)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:548)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:957)

getGenres() - generic exception {""stackTrace"":[{""declaringClass"":""luci.sixsixsix.powerampache2.data.MusicRepositoryImpl$getGenres$2"",""fileName"":""MusicRepositoryImpl.kt"",""lineNumber"":350,""methodName"":""invokeSuspend""},{""declaringClass"":""kotlin.coroutines.jvm.internal.BaseContinuationImpl"",""fileName"":""ContinuationImpl.kt"",""lineNumber"":33,""methodName"":""resumeWith""},{""declaringClass"":""kotlinx.coroutines.DispatchedTask"",""fileName"":""DispatchedTask.kt"",""lineNumber"":104,""methodName"":""run""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":984,""methodName"":""handleCallback""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":104,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":238,""methodName"":""loopOnce""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":357,""methodName"":""loop""},{""declaringClass"":""android.app.ActivityThread"",""fileName"":""ActivityThread.java"",""lineNumber"":8088,""methodName"":""main""},{""declaringClass"":""java.lang.reflect.Method"",""fileName"":""Method.java"",""lineNumber"":-2,""methodName"":""invoke""},{""declaringClass"":""com.android.internal.os.RuntimeInit$MethodAndArgsCaller"",""fileName"":""RuntimeInit.java"",""lineNumber"":548,""methodName"":""run""},{""declaringClass"":""com.android.internal.os.ZygoteInit"",""fileName"":""ZygoteInit.java"",""lineNumber"":957,""methodName"":""main""}]}"
gWSdRt1D,Untitled,npman,PHP,Friday 30th of May 2025 09:12:51 AM CDT,"<?php
declare(strict_types=1);

namespace SimpleWine\ApiV3\Helper;

use ReflectionException;
use SimpleWine\ApiV3\Enum\DevelopProtocol;
use SimpleWine\Catalog\SectionManager;
use SimpleWine\Enum\SectionCodes;

/**
 * Добавляем гибкости порядка фильтров для различных стратегий
 */
class FiltersListOrderHelper
{
    /**
     * Определяем порядок списка доступных фильтров МП для стратегии Каталог
     * @return array<string>
     * @throws ReflectionException
     */
    public function getCatalogAvailableFiltersList(int $categoryId): array
    {
        $filters = [
            'section',
            'sale',
            'color',
            'type_of_sparkling',
            'price',
            'product_group', // он же drink_type в elastic
            'product_type',
            'sugar_type',
            'country',
            'age_extract',
            'region',
            'year',
            'manufacturer',
            'konyak_class', //aging_category
            'volume',
            'strength',
            'reviews_rating',
            'rating_ws',
            'rating_rp',
            'rating_js',
            'grape',
            'appellason',
            'way_of_manufacture',
            'aging_tank',
            'food',
            //'store',
            'orange',
            'gift_wrap',
            'cultivation_type',
            'natural',
            'vegan',
            'cosher',
            'bezalkogolnoe',
            'barcode',
            'rating', // больше не агрегируется?
            'monosort',
            'rating_num',
        ];

        if (ApiHelper::getDevelopProtocol() >= DevelopProtocol::PROTOCOL_VERSION_372) {
            /**
             * @TODO: нужно думать что сделать с этим классом
             * чтобы он у нас не разрастался
             */
            $filters = $this->processDrinkCategory($categoryId, $filters);
        }

        return $filters;
    }

    /**
     * Определяем порядок списка доступных фильтров МП для стратегии Штрихкод
     * @return array<string>
     */
    public function getBarcodeAvailableFiltersList(): array
    {
        $filters = [
            'section',
            'sale',
            'color',
            'price',
            'product_group', // он же drink_type в elastic
            'product_type',
            'sugar_type',
            'country',
            'age_extract',
            'region',
            'year',
            'manufacturer',
            'konyak_class', //aging_category
            'volume',
            'strength',
            'reviews_rating',
            'rating_ws',
            'rating_rp',
            'rating_js',
            'grape',
            'appellason',
            'way_of_manufacture',
            'aging_tank',
            'food',
            //'store',
            'orange',
            'gift_wrap',
            'cultivation_type',
            'natural',
            'vegan',
            'cosher',
            'bezalkogolnoe',
            'barcode',
            'rating', // больше не агрегируется?
            'monosort',
            'type_of_sparkling',
        ];

        return $filters;
    }

    /**
     * Определяем порядок списка доступных фильтров МП для стратегии Кэшбэк
     * @return array<string>
     */
    public function getCashbackAvailableFiltersList(): array
    {
        $filters = [
            'section',
            'sale',
            'color',
            'price',
            'product_group', // он же drink_type в elastic
            'product_type',
            'sugar_type',
            'country',
            'age_extract',
            'region',
            'year',
            'manufacturer',
            'konyak_class', //aging_category
            'volume',
            'strength',
            'reviews_rating',
            'rating_ws',
            'rating_rp',
            'rating_js',
            'grape',
            'appellason',
            'way_of_manufacture',
            'aging_tank',
            'food',
            //'store',
            'orange',
            'gift_wrap',
            'cultivation_type',
            'natural',
            'vegan',
            'cosher',
            'bezalkogolnoe',
            'barcode',
            'rating', // больше не агрегируется?
            'monosort',
            'type_of_sparkling',
        ];

        return $filters;
    }

    /**
     * Определяем порядок списка доступных фильтров МП для стратегии Промо
     * @return array<string>
     */
    public function getPromoAvailableFiltersList(): array
    {
        $filters = [
            'section',
            'sale',
            'color',
            'price',
            'product_group', // он же drink_type в elastic
            'product_type',
            'sugar_type',
            'country',
            'age_extract',
            'region',
            'year',
            'manufacturer',
            'konyak_class', //aging_category
            'volume',
            'strength',
            'reviews_rating',
            'rating_ws',
            'rating_rp',
            'rating_js',
            'grape',
            'type_of_sparkling',
            'appellason',
            'way_of_manufacture',
            'aging_tank',
            'food',
            //'store',
            'orange',
            'gift_wrap',
            'cultivation_type',
            'natural',
            'vegan',
            'cosher',
            'bezalkogolnoe',
            'barcode',
            'rating', // больше не агрегируется?
            'monosort',
        ];

        return $filters;
    }

    /**
     * Определяем порядок списка доступных фильтров МП для стратегии Поиск
     * @return array<string>
     * @throws ReflectionException
     */
    public function getSearchAvailableFiltersList(?int $categoryId): array
    {
        $filters = [
            'section',
            'sale',
            'color',
            'type_of_sparkling',
            'price',
            'product_group', // он же drink_type в elastic
            'product_type',
            'sugar_type',
            'country',
            'age_extract',
            'region',
            'year',
            'manufacturer',
            'konyak_class', //aging_category
            'volume',
            'strength',
            'reviews_rating',
            'rating_ws',
            'rating_rp',
            'rating_js',
            'grape',
            'appellason',
            'way_of_manufacture',
            'aging_tank',
            'food',
            //'store',
            'orange',
            'gift_wrap',
            'cultivation_type',
            'natural',
            'vegan',
            'cosher',
            'bezalkogolnoe',
            'barcode',
            'rating', // больше не агрегируется?
            'monosort',
        ];

        if ($categoryId !== null && ApiHelper::getDevelopProtocol() >= DevelopProtocol::PROTOCOL_VERSION_372) {
            $filters = $this->processDrinkCategory($categoryId, $filters);
        }

        return $filters;
    }

    /**
     * Определяем порядок списка доступных фильтров МП для Избранных товаров
     * @return array<string>
     */
    public function getFavoriteAvailableFiltersList(): array
    {
        $filters = [
            'section',
            'sale',
            'color',
            'price',
            'product_group', // он же drink_type в elastic
            'product_type',
            'sugar_type',
            'country',
            'age_extract',
            'region',
            'year',
            'manufacturer',
            'konyak_class', //aging_category
            'volume',
            'strength',
            'reviews_rating',
            'rating_ws',
            'rating_rp',
            'rating_js',
            'grape',
            'appellason',
            'way_of_manufacture',
            'aging_tank',
            'food',
            //'store',
            'orange',
            'gift_wrap',
            'cultivation_type',
            'natural',
            'vegan',
            'cosher',
            'bezalkogolnoe',
            'barcode',
            'rating', // больше не агрегируется?
            'monosort',
            'type_of_sparkling',
        ];

        return $filters;
    }

    /**
     * Определяем порядок списка доступных фильтров МП для FavoriteConverterService
     * @return array<string>
     */
    public function getFilterConvertorAvailableFiltersList(): array
    {
        $filters = [
            'section',
            'sale',
            'color',
            'price',
            'product_group', // он же drink_type в elastic
            'product_type',
            'sugar_type',
            'country',
            'age_extract',
            'region',
            'year',
            'manufacturer',
            'konyak_class', //aging_category
            'volume',
            'strength',
            'reviews_rating',
            'rating_ws',
            'rating_rp',
            'rating_js',
            'grape',
            'appellason',
            'way_of_manufacture',
            'aging_tank',
            'food',
            //'store',
            'orange',
            'gift_wrap',
            'cultivation_type',
            'natural',
            'vegan',
            'cosher',
            'bezalkogolnoe',
            'barcode',
            'rating', // больше не агрегируется?
            'monosort',
            'type_of_sparkling',
        ];

        return $filters;
    }

    private function processDrinkCategory(int $categoryId, array $filters): array
    {
        $rootSectionCode = SectionManager::getRootSectionCode(
            ProductCategoryId::getIblockId(),
            $categoryId,
        );

        if ($rootSectionCode === null) {
            return $filters;
        }

        if ($rootSectionCode === SectionCodes::VINO) {
            array_splice(
                $filters,
                array_search('grape', $filters, true) + 1,
                0,
                ['drink_category']
            );

            return $filters;
        }

        if ($rootSectionCode === SectionCodes::CHAMPAGNE) {
            array_splice(
                $filters,
                array_search('grape', $filters, true),
                0,
                ['drink_category']
            );
        }

        return $filters;
    }
}


"
MXEPxNkp,ImGUI Render,Zgragselus,C++,Friday 30th of May 2025 08:55:04 AM CDT,"
/// <summary>
/// Submit user interface buffers for rendering
/// </summary>
/// <param name=""draw_data"">ImGui render data to submit</param>
void RenderPassImgui::RenderGui(ImDrawData* draw_data)
{
	ImGuiIO& io = ImGui::GetIO();

	mContext->SetPipelineState(mGuiPS);
	mContext->SetRootSignature(mGuiRS);
	mContext->SetPrimitiveTopology(Graphics::TRIANGLELIST);
	mContext->SetConstants(0, DWParam(io.DisplaySize.x), DWParam(io.DisplaySize.y));
	mContext->GetCommandList()->Get()->SetGraphicsRootDescriptorTable(1, mGuiFont->GetSRV().mGpuHandle);

	// TODO: Grow index and vertex buffer if and when necessary

	for (int n = 0; n < draw_data->CmdListsCount; n++)
	{
		int idx_offset = 0;
		int vtx_offset = 0;

		const ImDrawList* cmd_list = draw_data->CmdLists[n];
		size_t verticesCount = cmd_list->VtxBuffer.size();
		size_t indicesCount = cmd_list->IdxBuffer.size();
		size_t verticesSize = verticesCount * sizeof(ImDrawVert);
		size_t indicesSize = indicesCount * sizeof(ImDrawIdx);

		mContext->TransitionResource(mGuiVBO, D3D12_RESOURCE_STATE_COPY_DEST, false);
		mContext->TransitionResource(mGuiIBO, D3D12_RESOURCE_STATE_COPY_DEST, true);
		mContext->WriteBuffer(mGuiVBO, 0, &cmd_list->VtxBuffer[0], verticesSize);
		mContext->WriteBuffer(mGuiIBO, 0, &cmd_list->IdxBuffer[0], indicesSize);
		mContext->TransitionResource(mGuiVBO, D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER, false);
		mContext->TransitionResource(mGuiIBO, D3D12_RESOURCE_STATE_INDEX_BUFFER, true);

		mContext->SetIndexBuffer(mGuiIBO->IndexBufferView(0, (unsigned int)indicesSize));
		mContext->SetVertexBuffer(0, mGuiVBO->VertexBufferView(0, (unsigned int)verticesSize, sizeof(ImDrawVert)));

		for (int cmd_i = 0; cmd_i < draw_data->CmdLists[n]->CmdBuffer.Size; cmd_i++)
		{
			const ImDrawCmd* pcmd = &draw_data->CmdLists[n]->CmdBuffer[cmd_i];
			if (pcmd->TextureId != io.Fonts->TexID)
			{
				D3D12_GPU_DESCRIPTOR_HANDLE handle;
				handle.ptr = (uint64_t)pcmd->TextureId;
				if (handle.ptr != 0)
				{
					mContext->GetCommandList()->Get()->SetGraphicsRootDescriptorTable(1, handle);
					if (pcmd->UserCallback)
					{
						pcmd->UserCallback(draw_data->CmdLists[n], pcmd);
					}
					else
					{
						mContext->SetScissorRect(pcmd->ClipRect.x, pcmd->ClipRect.y, pcmd->ClipRect.z, pcmd->ClipRect.w);
						mContext->DrawIndexed(pcmd->ElemCount, idx_offset, vtx_offset);
					}
					mContext->GetCommandList()->Get()->SetGraphicsRootDescriptorTable(1, mGuiFont->GetSRV().mGpuHandle);
				}
			}
			else
			{
				if (pcmd->UserCallback)
				{
					pcmd->UserCallback(draw_data->CmdLists[n], pcmd);
				}
				else
				{
					mContext->SetScissorRect(pcmd->ClipRect.x, pcmd->ClipRect.y, pcmd->ClipRect.z, pcmd->ClipRect.w);
					mContext->DrawIndexed(pcmd->ElemCount, idx_offset, vtx_offset);
				}
			}
			idx_offset += pcmd->ElemCount;
		}
		vtx_offset += draw_data->CmdLists[n]->VtxBuffer.size();
	}
}"
