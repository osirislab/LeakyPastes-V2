id,title,username,language,date,content
Q3h77Uru,Potentiometer Control rev_01,pleasedontcode,Arduino,Saturday 17th of August 2024 01:01:49 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Potentiometer Control
	- Source Code NOT compiled for: Arduino Nano
	- Source Code created on: 2024-08-17 06:01:39

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* The ROV control system must initialize analog */
	/* input on pins A0 and A1 for y-axis and x-axis */
	/* potentiometers, enabling effective user */
	/* interaction for directional adjustments. */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF ANALOG INPUT PINS *****/
const uint8_t y_Potentiometer_Vout_PIN_A0		= A0; // Pin for y-axis potentiometer
const uint8_t x_Potentiometer_Vout_PIN_A1		= A1; // Pin for x-axis potentiometer

void setup(void)
{
	// Initialize analog input pins for potentiometers
	pinMode(y_Potentiometer_Vout_PIN_A0, INPUT); // Set y-axis potentiometer pin as input
	pinMode(x_Potentiometer_Vout_PIN_A1, INPUT); // Set x-axis potentiometer pin as input
}

void loop(void)
{
	// Main code to read potentiometer values and control ROV
	// This section can be expanded based on further requirements
}

/* END CODE */"
SzffAqdT,Gerenciador de Senhas v. 5.1 (Resolvido),MizunoBrasil,Python,Friday 16th of August 2024 11:18:24 PM CDT,"import tkinter as tk
from tkinter import ttk, messagebox
import os
import pyperclip
import webbrowser

class Application(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title(""Gerenciador de Senhas - Filtre os dados por Site ou por Login"")
        self.geometry(""1000x600"")
        self.sort_order_site = ""asc""
        self.sort_order_login = ""asc""
        self.create_widgets()
        self.create_menu()
        self.date_label = ttk.Label(self, text=""Mizuno - 06/05/2024"")
        self.date_label.place(x=10, y=self.winfo_height() - 30)
        self.center_window()

    def create_widgets(self):
        self.search_var = tk.StringVar()
        self.search_entry = ttk.Entry(self, textvariable=self.search_var)
        self.search_entry.pack(pady=(0, 10))
        self.search_button = ttk.Button(self, text=""Pesquisar"", command=self.search_records)
        self.search_button.pack(pady=(0, 10))
        self.tree = ttk.Treeview(self, columns=(""Site"", ""URL"", ""Login"", ""Senha""), show=""headings"")
        self.tree.heading(""Site"", text=""Site"", command=self.sort_sites)
        self.tree.heading(""URL"", text=""URL"")
        self.tree.heading(""Login"", text=""Login"", command=self.sort_login)
        self.tree.heading(""Senha"", text=""Senha"")
        self.tree.pack(pady=10, side=""left"", fill=""both"", expand=True)
        scrollbar = ttk.Scrollbar(self, orient=""vertical"", command=self.tree.yview)
        scrollbar.pack(side=""right"", fill=""y"")
        self.tree.configure(yscrollcommand=scrollbar.set)
        self.refresh_button = ttk.Button(self, text=""Atualizar"", command=self.refresh_tree)
        self.refresh_button.pack()
        self.add_button = ttk.Button(self, text=""Adicionar"", command=self.add_entry)
        self.add_button.pack()
        self.edit_button = ttk.Button(self, text=""Editar"", command=self.edit_entry)
        self.edit_button.pack()
        self.delete_button = ttk.Button(self, text=""Excluir"", command=self.confirm_delete)
        self.delete_button.pack()
        self.load_data()
        self.tree.bind(""<Button-3>"", self.popup_menu)
        self.tree.bind(""<Double-1>"", self.open_url)

    def search_records(self):
        search_term = self.search_var.get().strip().lower()
        if not search_term:
            messagebox.showinfo(""Pesquisa"", ""Digite um termo de pesquisa."")
            return

        # Limpa a TreeView antes de preencher com os resultados da pesquisa
        for item in self.tree.get_children():
            self.tree.delete(item)

        found = False
        if os.path.exists(""dados.txt""):
            with open(""dados.txt"", ""r"") as f:
                for line in f:
                    data = line.strip().split("","")
                    # Verifica se o termo de pesquisa está em algum dos campos 'Site', 'URL' ou 'Login'
                    if search_term in data[0].lower() or search_term in data[1].lower() or search_term in data[2].lower():
                        self.tree.insert("""", ""end"", values=data)
                        found = True

        if not found:
            messagebox.showinfo(""Pesquisa"", ""Nenhum registro correspondente encontrado."")
            self.refresh_tree()  # Chama a função de atualização da árvore diretamente após fechar o alerta

    def create_menu(self):
        self.menu_bar = tk.Menu(self)
        self.file_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.file_menu.add_command(label=""Sobre"", command=self.show_about_dialog)
        self.file_menu.add_separator()
        self.file_menu.add_command(label=""Sair"", command=self.quit_app)
        self.menu_bar.add_cascade(label=""Arquivo"", menu=self.file_menu)
        self.config(menu=self.menu_bar)

    def open_url(self, event):
        if self.tree.selection():
            item = self.tree.selection()[0]
            url = self.tree.item(item, ""values"")[1]
            webbrowser.open(url)

    def center_window(self):
        self.update_idletasks()
        width = self.winfo_width()
        height = self.winfo_height()
        x = (self.winfo_screenwidth() - width) // 2
        y = (self.winfo_screenheight() - height) // 2
        self.geometry('{}x{}+{}+{}'.format(width, height, x, y))

    def load_data(self):
        if os.path.exists(""dados.txt""):
            with open(""dados.txt"", ""r"") as f:
                for line in f:
                    data = line.strip().split("","")
                    self.tree.insert("""", ""end"", values=data)

    def save_data(self):
        with open(""dados.txt"", ""w"") as f:
            for item in self.tree.get_children():
                values = self.tree.item(item, ""values"")
                f.write("","".join(values) + ""\n"")

    def refresh_tree(self):
        for item in self.tree.get_children():
            self.tree.delete(item)
        self.load_data()

    def add_entry(self):
        AddEntryWindow(self)

    def edit_entry(self):
        try:
            item = self.tree.selection()[0]
            values = self.tree.item(item, ""values"")
            EditEntryWindow(self, values)
        except IndexError:
            messagebox.showerror(""Erro"", ""Selecione um registro para editar."")

    def delete_entry(self):
        selected_item = self.tree.selection()[0]
        self.tree.delete(selected_item)
        self.save_data()

    def confirm_delete(self):
        try:
            if messagebox.askyesno(""Confirmar"", ""Tem certeza que deseja excluir este registro?""):
                self.delete_entry()
        except IndexError:
            messagebox.showerror(""Erro"", ""Selecione um registro para excluir."")

    def popup_menu(self, event):
        popup_menu = tk.Menu(self, tearoff=0)
        popup_menu.add_command(label=""Copiar URL"", command=lambda: self.copy_to_clipboard(1))
        popup_menu.add_command(label=""Copiar Login"", command=lambda: self.copy_to_clipboard(2))
        popup_menu.add_command(label=""Copiar Senha"", command=lambda: self.copy_to_clipboard(3))
        popup_menu.post(event.x_root, event.y_root)

    def copy_to_clipboard(self, column_index):
        item = self.tree.selection()[0]
        value = self.tree.item(item, ""values"")[column_index]
        pyperclip.copy(value)

    def sort_sites(self):
        items = self.tree.get_children("""")
        if self.sort_order_site == ""asc"":
            sorted_items = sorted(items, key=lambda x: self.tree.item(x, ""values"")[0])
            self.sort_order_site = ""desc""
        else:
            sorted_items = sorted(items, key=lambda x: self.tree.item(x, ""values"")[0], reverse=True)
            self.sort_order_site = ""asc""
        for item in sorted_items:
            self.tree.move(item, """", ""end"")

    def sort_login(self):
        items = self.tree.get_children("""")
        if self.sort_order_login == ""asc"":
            sorted_items = sorted(items, key=lambda x: self.tree.item(x, ""values"")[2])
            self.sort_order_login = ""desc""
        else:
            sorted_items = sorted(items, key=lambda x: self.tree.item(x, ""values"")[2], reverse=True)
            self.sort_order_login = ""asc""
        for item in sorted_items:
            self.tree.move(item, """", ""end"")

    def show_about_dialog(self):
        messagebox.showinfo(""Sobre"", ""Última atualização: 17/08/2024, by Mizuno. Versão 5.1"")

    def quit_app(self):
        self.destroy()

class AddEntryWindow(tk.Toplevel):
    def __init__(self, parent):
        super().__init__(parent)
        self.title(""Adicionar Entrada"")
        self.geometry(""400x300"")
        self.create_widgets()

    def create_widgets(self):
        self.site_label = ttk.Label(self, text=""Site:"")
        self.site_label.pack(pady=5)
        self.site_entry = ttk.Entry(self)
        self.site_entry.pack(pady=5)

        self.url_label = ttk.Label(self, text=""URL:"")
        self.url_label.pack(pady=5)
        self.url_entry = ttk.Entry(self)
        self.url_entry.pack(pady=5)

        self.login_label = ttk.Label(self, text=""Login:"")
        self.login_label.pack(pady=5)
        self.login_entry = ttk.Entry(self)
        self.login_entry.pack(pady=5)

        self.senha_label = ttk.Label(self, text=""Senha:"")
        self.senha_label.pack(pady=5)
        self.senha_entry = ttk.Entry(self)
        self.senha_entry.pack(pady=5)

        self.save_button = ttk.Button(self, text=""Salvar"", command=self.save_entry)
        self.save_button.pack(pady=20)

    def save_entry(self):
        site = self.site_entry.get().strip()
        url = self.url_entry.get().strip()
        login = self.login_entry.get().strip()
        senha = self.senha_entry.get().strip()
        if site and url and login and senha:
            self.master.tree.insert("""", ""end"", values=(site, url, login, senha))
            self.master.save_data()
            self.destroy()
        else:
            messagebox.showerror(""Erro"", ""Todos os campos devem ser preenchidos."")

class EditEntryWindow(tk.Toplevel):
    def __init__(self, parent, values):
        super().__init__(parent)
        self.title(""Editar Entrada"")
        self.geometry(""400x300"")
        self.values = values
        self.create_widgets()

    def create_widgets(self):
        self.site_label = ttk.Label(self, text=""Site:"")
        self.site_label.pack(pady=5)
        self.site_entry = ttk.Entry(self)
        self.site_entry.insert(0, self.values[0])
        self.site_entry.pack(pady=5)

        self.url_label = ttk.Label(self, text=""URL:"")
        self.url_label.pack(pady=5)
        self.url_entry = ttk.Entry(self)
        self.url_entry.insert(0, self.values[1])
        self.url_entry.pack(pady=5)

        self.login_label = ttk.Label(self, text=""Login:"")
        self.login_label.pack(pady=5)
        self.login_entry = ttk.Entry(self)
        self.login_entry.insert(0, self.values[2])
        self.login_entry.pack(pady=5)

        self.senha_label = ttk.Label(self, text=""Senha:"")
        self.senha_label.pack(pady=5)
        self.senha_entry = ttk.Entry(self)
        self.senha_entry.insert(0, self.values[3])
        self.senha_entry.pack(pady=5)

        self.save_button = ttk.Button(self, text=""Salvar"", command=self.save_entry)
        self.save_button.pack(pady=20)

    def save_entry(self):
        site = self.site_entry.get().strip()
        url = self.url_entry.get().strip()
        login = self.login_entry.get().strip()
        senha = self.senha_entry.get().strip()
        if site and url and login and senha:
            selected_item = self.master.tree.selection()[0]
            self.master.tree.item(selected_item, values=(site, url, login, senha))
            self.master.save_data()
            self.destroy()
        else:
            messagebox.showerror(""Erro"", ""Todos os campos devem ser preenchidos."")

def main():
    app = Application()
    app.mainloop()

if __name__ == ""__main__"":
    main()
"
WqbrrBu3,News Aug16 24,Newscaster_Ned,Email,Friday 16th of August 2024 10:53:22 PM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

W‎e‎l‎l‎,‎ ‎k‎i‎k‎e‎j‎e‎w‎s‎,‎ ‎i‎t‎'‎s‎ ‎t‎i‎m‎e‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎n‎e‎w‎s‎ ‎n‎e‎w‎s‎.‎

K‎a‎m‎a‎l‎a‎ ‎P‎r‎o‎m‎i‎s‎e‎s‎ ‎t‎o‎ ‎B‎u‎i‎l‎d‎ ‎3‎ ‎M‎i‎l‎l‎i‎o‎n‎ ‎H‎o‎m‎e‎s‎ ‎i‎n‎ ‎4‎ ‎Y‎e‎a‎r‎s‎…‎

…‎M‎e‎a‎n‎w‎h‎i‎l‎e‎,‎ ‎B‎i‎d‎e‎n‎-‎H‎a‎r‎r‎i‎s‎ ‎B‎u‎i‎l‎t‎ ‎O‎n‎l‎y‎ ‎8‎ ‎E‎V‎ ‎S‎t‎a‎t‎i‎o‎n‎s‎ ‎i‎n‎ ‎2‎.‎5‎ ‎Y‎e‎a‎r‎s‎
D‎e‎m‎o‎c‎r‎a‎t‎i‎c‎ ‎p‎r‎e‎s‎i‎d‎e‎n‎t‎i‎a‎l‎ ‎n‎o‎m‎i‎n‎e‎e‎ ‎V‎i‎c‎e‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎K‎a‎m‎a‎l‎a‎ ‎H‎a‎r‎r‎i‎s‎ ‎s‎p‎e‎a‎k‎s‎ ‎a‎t‎ ‎a‎ ‎c‎a‎m‎p‎a‎i‎g‎n‎ ‎e‎v‎e‎n‎t‎ ‎a‎t‎
V‎i‎c‎e‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎K‎a‎m‎a‎l‎a‎ ‎H‎a‎r‎r‎i‎s‎ ‎p‎r‎o‎m‎i‎s‎e‎d‎ ‎F‎r‎i‎d‎a‎y‎ ‎t‎h‎a‎t‎ ‎s‎h‎e‎ ‎w‎o‎u‎l‎d‎ ‎b‎u‎i‎l‎d‎ ‎3‎ ‎m‎i‎l‎l‎i‎o‎n‎ ‎n‎e‎w‎ ‎h‎o‎m‎e‎s‎ ‎i‎n‎ ‎f‎o‎u‎r‎ ‎y‎e‎a‎r‎s‎ ‎i‎f‎ ‎s‎h‎e‎ ‎w‎e‎r‎e‎ ‎e‎l‎e‎c‎t‎e‎d‎,‎ ‎b‎u‎t‎ ‎s‎h‎e‎ ‎a‎n‎d‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎b‎a‎r‎e‎l‎y‎ ‎m‎a‎n‎a‎g‎e‎d‎ ‎t‎o‎ ‎b‎u‎i‎l‎d‎ ‎e‎i‎g‎h‎t‎ ‎E‎V‎ ‎c‎h‎a‎r‎g‎i‎n‎g‎ ‎s‎t‎a‎t‎i‎o‎n‎s‎ ‎i‎n‎ ‎t‎w‎o‎-‎a‎n‎d‎-‎a‎-‎h‎a‎l‎f‎ ‎y‎e‎a‎r‎s‎.‎

K‎a‎m‎a‎l‎a‎ ‎P‎r‎o‎m‎i‎s‎e‎s‎ ‎t‎o‎ ‎B‎u‎i‎l‎d‎ ‎3‎ ‎M‎i‎l‎l‎i‎o‎n‎ ‎H‎o‎m‎e‎s‎ ‎i‎n‎ ‎4‎ ‎Y‎e‎a‎r‎s‎;‎ ‎B‎i‎d‎e‎n‎-‎H‎a‎r‎r‎i‎s‎ ‎B‎u‎i‎l‎t‎ ‎O‎n‎l‎y‎ ‎8‎ ‎E‎V‎ ‎S‎t‎a‎t‎i‎o‎n‎s‎ ‎i‎n‎ ‎2‎.‎5‎ ‎Y‎
K‎a‎m‎a‎l‎a‎ ‎P‎r‎o‎m‎i‎s‎e‎s‎3‎ ‎M‎i‎l‎l‎i‎o‎n‎ ‎H‎o‎m‎e‎s‎ ‎i‎n‎ ‎4‎ ‎Y‎e‎a‎r‎s‎;‎ ‎B‎u‎i‎l‎t‎ ‎O‎n‎l‎y‎ ‎8‎ ‎E‎V‎ ‎S‎t‎a‎t‎i‎o‎n‎s‎
1‎,‎4‎6‎5‎
F‎l‎o‎r‎i‎d‎a‎ ‎G‎o‎v‎.‎ ‎R‎o‎n‎ ‎D‎e‎S‎a‎n‎t‎i‎s‎ ‎S‎l‎a‎m‎s‎ ‎P‎r‎o‎p‎o‎s‎e‎d‎ ‎A‎b‎o‎r‎t‎i‎o‎n‎ ‎A‎m‎e‎n‎d‎m‎e‎n‎t‎:‎ ‎M‎e‎a‎n‎s‎ ‎‘‎E‎n‎d‎ ‎o‎f‎ ‎P‎r‎o‎-‎L‎i‎f‎e‎ ‎M‎o‎v‎e‎m‎e‎n‎t‎’‎
D‎e‎S‎a‎n‎t‎i‎s‎:‎ ‎F‎l‎o‎r‎i‎d‎a‎ ‎A‎b‎o‎r‎t‎i‎o‎n‎ ‎A‎m‎e‎n‎d‎m‎e‎n‎t‎ ‎M‎e‎a‎n‎s‎ ‎""‎E‎n‎d‎ ‎o‎f‎ ‎P‎r‎o‎-‎L‎i‎f‎e‎ ‎M‎o‎v‎e‎m‎e‎n‎t‎'‎
3‎1‎6‎
D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎B‎e‎g‎ ‎K‎a‎m‎a‎l‎a‎ ‎H‎a‎r‎r‎i‎s‎ ‎N‎o‎t‎ ‎t‎o‎ ‎R‎e‎l‎e‎a‎s‎e‎ ‎P‎o‎l‎i‎c‎y‎ ‎A‎g‎e‎n‎d‎a‎ ‎B‎e‎f‎o‎r‎e‎ ‎E‎l‎e‎c‎t‎i‎o‎n‎ ‎
D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎B‎e‎g‎ ‎H‎a‎r‎r‎i‎s‎ ‎N‎o‎t‎ ‎t‎o‎ ‎R‎e‎l‎e‎a‎s‎e‎ ‎P‎o‎l‎i‎c‎y‎ ‎A‎g‎e‎n‎d‎a‎ ‎B‎e‎f‎o‎r‎e‎ ‎E‎l‎e‎c‎t‎i‎o‎n‎ ‎
1‎,‎6‎0‎0‎
B‎l‎u‎e‎ ‎S‎t‎a‎t‎e‎ ‎B‎l‎u‎e‎s‎:‎ ‎C‎h‎i‎c‎a‎g‎o‎,‎ ‎D‎e‎s‎t‎r‎o‎y‎e‎d‎ ‎b‎y‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎ ‎M‎i‎s‎r‎u‎l‎e‎,‎ ‎I‎s‎ ‎t‎h‎e‎ ‎P‎e‎r‎f‎e‎c‎t‎ ‎B‎a‎c‎k‎d‎r‎o‎p‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎D‎N‎C‎
C‎h‎i‎c‎a‎g‎o‎,‎ ‎D‎e‎s‎t‎r‎o‎y‎e‎d‎ ‎b‎y‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎ ‎M‎i‎s‎r‎u‎l‎e‎,‎ ‎I‎s‎ ‎t‎h‎e‎ ‎P‎e‎r‎f‎e‎c‎t‎ ‎B‎a‎c‎k‎d‎r‎o‎p‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎D‎N‎C‎
4‎,‎6‎4‎5‎

E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎–‎ ‎T‎r‎u‎m‎p‎:‎ ‎H‎a‎r‎r‎i‎s‎ ‎P‎i‎c‎k‎e‎d‎ ‎W‎a‎l‎z‎ ‎B‎e‎c‎a‎u‎s‎e‎ ‎D‎e‎m‎s‎ ‎'‎D‎o‎n‎'‎t‎ ‎C‎a‎r‎e‎'‎ ‎A‎b‎o‎u‎t‎ ‎V‎e‎t‎s‎
4‎,‎7‎5‎4‎
I‎n‎f‎l‎a‎t‎i‎o‎n‎ ‎O‎v‎e‎r‎l‎o‎a‎d‎:‎ ‎K‎a‎m‎a‎l‎a‎ ‎H‎a‎r‎r‎i‎s‎ ‎W‎i‎l‎l‎ ‎P‎r‎o‎p‎o‎s‎e‎ ‎$‎2‎5‎,‎0‎0‎0‎ ‎G‎o‎v‎t‎ ‎S‎u‎b‎s‎i‎d‎i‎e‎s‎ ‎f‎o‎r‎ ‎F‎i‎r‎s‎t‎-‎T‎i‎m‎e‎ ‎H‎o‎m‎e‎b‎u‎y‎e‎r‎s‎
H‎a‎r‎r‎i‎s‎ ‎t‎o‎ ‎P‎r‎o‎p‎o‎s‎e‎ ‎$‎2‎5‎,‎0‎0‎0‎ ‎S‎u‎b‎s‎i‎d‎i‎e‎s‎ ‎f‎o‎r‎ ‎F‎i‎r‎s‎t‎-‎T‎i‎m‎e‎ ‎H‎o‎m‎e‎b‎u‎y‎e‎r‎s‎
6‎,‎3‎2‎2‎
F‎r‎a‎n‎k‎ ‎L‎u‎n‎t‎z‎:‎ ‎T‎r‎u‎m‎p‎ ‎N‎e‎e‎d‎s‎ ‎t‎o‎ ‎‘‎S‎h‎u‎t‎ ‎U‎p‎,‎’‎ ‎S‎t‎o‎p‎ ‎A‎c‎t‎i‎n‎g‎ ‎L‎i‎k‎e‎ ‎a‎ ‎‘‎P‎e‎t‎u‎l‎a‎n‎t‎ ‎C‎h‎i‎l‎d‎’‎
F‎r‎a‎n‎k‎ ‎L‎u‎n‎t‎z‎:‎ ‎T‎r‎u‎m‎p‎ ‎N‎e‎e‎d‎s‎ ‎T‎o‎ ‎'‎S‎h‎u‎t‎ ‎U‎p‎,‎'‎ ‎S‎t‎o‎p‎ ‎A‎c‎t‎i‎n‎g‎ ‎L‎i‎k‎e‎ ‎a‎ ‎'‎P‎e‎t‎u‎l‎a‎n‎t‎ ‎C‎h‎i‎l‎d‎'‎
1‎,‎0‎9‎4‎
K‎a‎m‎a‎l‎a‎ ‎H‎a‎r‎r‎i‎s‎,‎ ‎T‎i‎m‎ ‎W‎a‎l‎z‎ ‎I‎n‎t‎e‎r‎v‎i‎e‎w‎ ‎E‎a‎c‎h‎ ‎O‎t‎h‎e‎r‎ ‎i‎n‎ ‎P‎o‎l‎i‎c‎y‎-‎F‎r‎e‎e‎ ‎D‎i‎s‎c‎u‎s‎s‎i‎o‎n‎ ‎a‎s‎ ‎B‎o‎t‎h‎ ‎C‎o‎n‎t‎i‎n‎u‎e‎ ‎t‎o‎ ‎D‎o‎d‎g‎e‎ ‎P‎r‎
K‎a‎m‎a‎l‎a‎,‎ ‎W‎a‎l‎z‎ ‎I‎n‎t‎e‎r‎v‎i‎e‎w‎ ‎E‎a‎c‎h‎ ‎O‎t‎h‎e‎r‎ ‎i‎n‎ ‎P‎o‎l‎i‎c‎y‎-‎F‎r‎e‎e‎ ‎D‎i‎s‎c‎u‎s‎s‎i‎o‎n‎
9‎,‎1‎3‎6‎
J‎D‎ ‎V‎a‎n‎c‎e‎’‎s‎ ‎P‎l‎a‎n‎e‎ ‎M‎a‎k‎e‎s‎ ‎E‎m‎e‎r‎g‎e‎n‎c‎y‎ ‎L‎a‎n‎d‎i‎n‎g‎ ‎i‎n‎ ‎M‎i‎l‎k‎w‎a‎u‎k‎e‎e‎ ‎D‎u‎e‎ ‎t‎o‎ ‎D‎o‎o‎r‎ ‎M‎a‎l‎f‎u‎n‎c‎t‎i‎o‎n‎
J‎D‎ ‎V‎a‎n‎c‎e‎'‎s‎ ‎P‎l‎a‎n‎e‎ ‎M‎a‎k‎e‎s‎ ‎E‎m‎e‎r‎g‎e‎n‎c‎y‎ ‎L‎a‎n‎d‎i‎n‎g‎ ‎i‎n‎ ‎M‎i‎l‎k‎w‎a‎u‎k‎e‎e‎
3‎2‎6‎
P‎o‎l‎l‎:‎ ‎M‎a‎j‎o‎r‎i‎t‎y‎ ‎o‎f‎ ‎V‎o‎t‎e‎r‎s‎ ‎S‎a‎y‎ ‎M‎e‎d‎i‎a‎ ‎A‎r‎e‎ ‎S‎h‎i‎l‎l‎i‎n‎g‎ ‎f‎o‎r‎ ‎K‎a‎m‎a‎l‎a‎ ‎H‎a‎r‎r‎i‎s‎
P‎o‎l‎l‎:‎ ‎M‎a‎j‎o‎r‎i‎t‎y‎ ‎o‎f‎ ‎V‎o‎t‎e‎r‎s‎ ‎S‎a‎y‎ ‎M‎e‎d‎i‎a‎ ‎a‎r‎e‎ ‎S‎h‎i‎l‎l‎i‎n‎g‎ ‎f‎o‎r‎ ‎K‎a‎m‎a‎l‎a‎ ‎H‎a‎r‎r‎i‎s‎

E‎r‎e‎c‎t‎u‎s‎ ‎G‎e‎t‎s‎ ‎L‎i‎f‎e‎ ‎A‎f‎t‎e‎r‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎W‎h‎i‎t‎e‎ ‎M‎a‎n‎ ‎a‎t‎ ‎O‎v‎e‎r‎l‎a‎n‎d‎ ‎P‎a‎r‎k‎ ‎G‎a‎s‎ ‎S‎t‎a‎t‎i‎o‎n‎.‎

H‎o‎p‎e‎f‎u‎l‎l‎y‎ ‎h‎e‎'‎l‎l‎ ‎b‎e‎ ‎s‎e‎n‎t‎ ‎b‎a‎c‎k‎ ‎t‎o‎ ‎t‎h‎e‎ ‎u‎n‎d‎e‎r‎w‎o‎r‎l‎d‎.‎


N‎e‎g‎r‎o‎ ‎Q‎u‎e‎e‎n‎s‎ ‎C‎o‎u‎n‎c‎i‎l‎m‎a‎n‎ ‎G‎e‎t‎s‎ ‎J‎a‎i‎l‎t‎i‎m‎e‎ ‎T‎h‎r‎e‎a‎t‎e‎n‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎S‎h‎o‎w‎i‎n‎g‎ ‎u‎p‎ ‎L‎a‎t‎e‎ ‎t‎o‎ ‎C‎o‎u‎r‎t‎.‎


S‎p‎i‎c‎ ‎I‎l‎l‎e‎g‎a‎l‎ ‎R‎a‎p‎e‎s‎ ‎1‎2‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎ ‎G‎i‎r‎l‎ ‎a‎t‎ ‎B‎e‎n‎s‎a‎l‎e‎m‎ ‎T‎o‎w‎n‎s‎h‎i‎p‎ ‎C‎h‎u‎r‎c‎h‎.‎


S‎p‎i‎c‎ ‎G‎e‎t‎s‎ ‎L‎i‎f‎e‎ ‎A‎f‎t‎e‎r‎ ‎1‎4‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎ ‎G‎i‎r‎l‎ ‎C‎o‎m‎e‎s‎ ‎F‎o‎r‎w‎a‎r‎d‎ ‎A‎f‎t‎e‎r‎ ‎B‎e‎i‎n‎g‎ ‎R‎a‎p‎e‎d‎ ‎b‎y‎ ‎H‎i‎m‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎H‎e‎y‎,‎ ‎c‎h‎e‎e‎r‎ ‎u‎p‎.‎ ‎I‎ ‎h‎a‎v‎e‎ ‎t‎h‎e‎ ‎w‎e‎a‎t‎h‎e‎r‎.‎
T‎o‎d‎a‎y‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎0‎°‎
/‎7‎5‎°‎
2‎%‎
S‎ ‎1‎0‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎6‎ ‎|‎ ‎D‎a‎y‎
1‎0‎0‎°‎
2‎%‎
S‎
1‎0‎
 ‎
m‎p‎h‎
M‎o‎s‎t‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎ ‎s‎k‎i‎e‎s‎ ‎t‎h‎i‎s‎ ‎m‎o‎r‎n‎i‎n‎g‎ ‎w‎i‎l‎l‎ ‎b‎e‎c‎o‎m‎e‎ ‎p‎a‎r‎t‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎ ‎t‎h‎i‎s‎ ‎a‎f‎t‎e‎r‎n‎o‎o‎n‎.‎ ‎H‎i‎g‎h‎ ‎a‎r‎o‎u‎n‎d‎ ‎1‎0‎0‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎
 ‎
H‎u‎m‎i‎d‎i‎t‎y‎
5‎5‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
E‎x‎t‎r‎e‎m‎e‎
S‎u‎n‎r‎i‎s‎e‎
6‎:‎5‎8‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
8‎:‎0‎9‎ ‎p‎m‎
F‎r‎i‎ ‎1‎6‎ ‎|‎ ‎N‎i‎g‎h‎t‎
7‎5‎°‎
1‎5‎%‎
S‎
9‎
 ‎
m‎p‎h‎
P‎a‎r‎t‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎ ‎s‎k‎i‎e‎s‎.‎ ‎L‎o‎w‎ ‎a‎r‎o‎u‎n‎d‎ ‎7‎5‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎
 ‎
H‎u‎m‎i‎d‎i‎t‎y‎
7‎7‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
6‎:‎1‎2‎ ‎p‎m‎
W‎a‎x‎i‎n‎g‎ ‎G‎i‎b‎b‎o‎u‎s‎
M‎o‎o‎n‎s‎e‎t‎
3‎:‎1‎2‎ ‎a‎m‎
S‎a‎t‎ ‎1‎7‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎0‎°‎
/‎7‎5‎°‎
1‎6‎%‎
S‎ ‎8‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎8‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎1‎°‎
/‎7‎5‎°‎
8‎%‎
S‎ ‎8‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎9‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎4‎°‎
/‎7‎7‎°‎
6‎%‎
S‎S‎W‎ ‎7‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎0‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎4‎°‎
/‎7‎8‎°‎
6‎%‎
S‎W‎ ‎6‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎1‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎2‎°‎
/‎7‎6‎°‎
8‎%‎
S‎S‎W‎ ‎7‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎2‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎9‎°‎
/‎7‎4‎°‎
1‎4‎%‎
S‎S‎E‎ ‎9‎ ‎m‎p‎h‎
F‎r‎i‎ ‎2‎3‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎7‎°‎
/‎7‎3‎°‎
7‎%‎
E‎S‎E‎ ‎9‎ ‎m‎p‎h‎
S‎a‎t‎ ‎2‎4‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎8‎°‎
/‎7‎3‎°‎
1‎0‎%‎
E‎S‎E‎ ‎9‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎5‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎8‎°‎
/‎7‎3‎°‎
2‎4‎%‎
E‎S‎E‎ ‎8‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎6‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎7‎°‎
/‎7‎4‎°‎
1‎1‎%‎
E‎ ‎8‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎7‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎6‎°‎
/‎7‎4‎°‎
1‎9‎%‎
E‎ ‎7‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎8‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎5‎°‎
/‎7‎4‎°‎
2‎3‎%‎
E‎ ‎7‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎9‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎6‎°‎
/‎7‎3‎°‎
2‎4‎%‎
E‎ ‎7‎ ‎m‎p‎h‎
F‎r‎i‎ ‎3‎0‎
A‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
9‎4‎°‎
/‎7‎4‎°‎
4‎5‎%‎
E‎N‎E‎ ‎7‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎K‎a‎m‎a‎l‎a‎ ‎H‎a‎r‎r‎i‎s‎.‎ ‎👩🏾
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

S‎a‎l‎v‎a‎d‎o‎r‎ ‎R‎a‎m‎o‎s‎
S‎a‎l‎v‎a‎d‎o‎r‎ ‎R‎a‎m‎o‎s‎ ‎a‎.‎k‎.‎a‎.‎ ‎A‎d‎a‎m‎ ‎T‎r‎a‎n‎z‎a‎ ‎w‎a‎s‎ ‎a‎ ‎t‎r‎a‎n‎n‎y‎ ‎w‎h‎o‎ ‎t‎r‎i‎e‎d‎ ‎t‎o‎ ‎b‎e‎a‎t‎ ‎t‎h‎e‎ ‎S‎a‎n‎d‎y‎ ‎H‎o‎o‎k‎ ‎r‎e‎c‎o‎r‎d‎.‎ ‎H‎e‎ ‎k‎i‎l‎l‎e‎d‎ ‎h‎i‎s‎ ‎n‎a‎g‎g‎i‎n‎g‎ ‎n‎a‎n‎n‎y‎ ‎j‎u‎s‎t‎ ‎l‎i‎k‎e‎ ‎L‎a‎n‎z‎a‎,‎ ‎t‎h‎e‎n‎ ‎w‎e‎n‎t‎ ‎t‎o‎ ‎a‎ ‎l‎o‎c‎a‎l‎ ‎s‎c‎h‎o‎o‎l‎ ‎a‎n‎d‎ ‎o‎p‎e‎n‎e‎d‎ ‎f‎i‎r‎e‎ ‎o‎n‎ ‎a‎ ‎b‎u‎n‎c‎h‎ ‎o‎f‎ ‎k‎i‎d‎s‎,‎ ‎c‎r‎e‎a‎t‎i‎n‎g‎ ‎a‎ ‎l‎u‎l‎z‎f‎e‎s‎t‎ ‎i‎n‎ ‎t‎h‎e‎ ‎s‎c‎h‎o‎o‎l‎.‎ ‎H‎e‎ ‎u‎n‎f‎o‎r‎t‎u‎n‎a‎t‎e‎l‎y‎ ‎o‎n‎l‎y‎ ‎g‎o‎t‎ ‎u‎p‎ ‎t‎o‎ ‎1‎9‎ ‎c‎o‎n‎f‎i‎r‎m‎e‎d‎ ‎k‎i‎l‎l‎s‎ ‎o‎n‎ ‎t‎h‎e‎ ‎l‎o‎l‎i‎s‎ ‎b‎e‎f‎o‎r‎e‎ ‎t‎h‎e‎ ‎c‎o‎p‎s‎ ‎g‎o‎t‎ ‎t‎o‎ ‎h‎i‎m‎ ‎a‎n‎d‎ ‎p‎u‎t‎ ‎h‎i‎m‎ ‎d‎o‎w‎n‎.‎

(‎(‎ ‎H‎I‎S‎T‎O‎R‎I‎C‎ ‎F‎I‎R‎S‎T‎ ‎T‎R‎A‎N‎S‎ ‎L‎A‎T‎I‎N‎X‎ ‎S‎C‎H‎O‎O‎L‎ ‎S‎H‎O‎O‎T‎E‎R‎!‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎ ‎P‎u‎l‎l‎ ‎o‎u‎t‎ ‎y‎o‎u‎r‎ ‎b‎o‎o‎s‎t‎e‎r‎ ‎s‎e‎a‎t‎s‎,‎ ‎c‎a‎u‎s‎e‎ ‎i‎t‎'‎s‎ ‎t‎i‎m‎e‎ ‎f‎o‎r‎ ‎A‎n‎g‎l‎i‎n‎.‎

T‎r‎u‎m‎p‎:‎ ‎“‎M‎o‎s‎t‎ ‎P‎o‎w‎e‎r‎f‎u‎l‎ ‎L‎o‎b‎b‎y‎ ‎i‎n‎ ‎T‎h‎i‎s‎ ‎C‎o‎u‎n‎t‎r‎y‎ ‎b‎y‎ ‎F‎a‎r‎ ‎w‎a‎s‎ ‎I‎s‎r‎a‎e‎l‎ ‎a‎n‎d‎ ‎J‎e‎w‎i‎s‎h‎ ‎P‎e‎o‎p‎l‎e‎…‎ ‎T‎o‎d‎a‎y‎,‎ ‎I‎t‎’‎s‎ ‎L‎i‎k‎e‎,‎ ‎W‎h‎a‎t‎ ‎H‎a‎p‎p‎e‎n‎e‎d‎?‎”‎
A‎n‎d‎r‎e‎w‎ ‎A‎n‎g‎l‎i‎n‎ ‎A‎u‎g‎u‎s‎t‎ ‎1‎6‎,‎ ‎2‎0‎2‎4‎


G‎i‎v‎i‎n‎g‎ ‎a‎ ‎s‎p‎e‎e‎c‎h‎ ‎t‎o‎ ‎t‎h‎e‎ ‎J‎e‎w‎s‎,‎ ‎b‎e‎g‎g‎i‎n‎g‎ ‎t‎h‎e‎m‎ ‎t‎o‎ ‎i‎n‎s‎t‎a‎l‎l‎ ‎h‎i‎m‎ ‎a‎s‎ ‎p‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎i‎n‎ ‎a‎ ‎f‎a‎k‎e‎ ‎e‎l‎e‎c‎t‎i‎o‎n‎,‎ ‎g‎a‎m‎e‎ ‎s‎h‎o‎w‎ ‎h‎o‎s‎t‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎m‎o‎u‎r‎n‎e‎d‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎ ‎J‎e‎w‎s‎ ‎d‎o‎ ‎n‎o‎t‎ ‎h‎a‎v‎e‎ ‎e‎n‎o‎u‎g‎h‎ ‎c‎o‎n‎t‎r‎o‎l‎ ‎o‎v‎e‎r‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎p‎o‎l‎i‎t‎i‎c‎s‎.‎

S‎p‎e‎a‎k‎i‎n‎g‎ ‎a‎t‎ ‎a‎ ‎“‎F‎i‎g‎h‎t‎i‎n‎g‎ ‎A‎n‎t‎i‎s‎e‎m‎i‎t‎i‎s‎m‎”‎ ‎e‎v‎e‎n‎t‎ ‎p‎u‎t‎ ‎o‎n‎ ‎b‎y‎ ‎M‎i‎r‎i‎a‎m‎ ‎A‎d‎e‎l‎s‎o‎n‎ ‎a‎t‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎g‎o‎l‎f‎ ‎c‎l‎u‎b‎ ‎i‎n‎ ‎B‎e‎d‎m‎i‎n‎s‎t‎e‎r‎,‎ ‎N‎e‎w‎ ‎J‎e‎r‎s‎e‎y‎ ‎o‎n‎ ‎T‎h‎u‎r‎s‎d‎a‎y‎,‎ ‎T‎r‎u‎m‎p‎,‎ ‎a‎f‎t‎e‎r‎ ‎h‎a‎v‎i‎n‎g‎ ‎b‎e‎e‎n‎ ‎i‎n‎t‎r‎o‎d‎u‎c‎e‎d‎ ‎b‎y‎ ‎a‎ ‎r‎a‎b‎b‎i‎,‎ ‎c‎l‎a‎i‎m‎e‎d‎ ‎a‎c‎c‎u‎r‎a‎t‎e‎l‎y‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎ ‎J‎e‎w‎s‎ ‎h‎a‎d‎ ‎t‎h‎e‎ ‎“‎m‎o‎s‎t‎ ‎p‎o‎w‎e‎r‎f‎u‎l‎ ‎l‎o‎b‎b‎y‎ ‎i‎n‎ ‎t‎h‎i‎s‎ ‎c‎o‎u‎n‎t‎r‎y‎,‎ ‎b‎y‎ ‎f‎a‎r‎.‎”‎ ‎H‎e‎ ‎t‎h‎e‎n‎ ‎f‎a‎l‎s‎e‎l‎y‎ ‎c‎l‎a‎i‎m‎e‎d‎ ‎t‎h‎a‎t‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎t‎o‎o‎k‎ ‎a‎w‎a‎y‎ ‎J‎e‎w‎i‎s‎h‎ ‎p‎o‎w‎e‎r‎.‎

T‎r‎u‎m‎p‎ ‎a‎l‎s‎o‎ ‎p‎r‎o‎m‎o‎t‎e‎d‎ ‎a‎ ‎9‎4‎-‎y‎e‎a‎r‎-‎o‎l‎d‎ ‎J‎e‎w‎,‎ ‎a‎l‎l‎e‎g‎e‎d‎l‎y‎ ‎a‎ ‎s‎u‎r‎v‎i‎v‎o‎r‎ ‎o‎f‎ ‎A‎u‎s‎c‎h‎w‎i‎t‎z‎,‎ ‎a‎n‎d‎ ‎c‎l‎a‎i‎m‎e‎d‎ ‎t‎h‎a‎t‎ ‎a‎ ‎n‎e‎w‎ ‎H‎o‎l‎o‎c‎a‎u‎s‎t‎ ‎i‎s‎ ‎c‎o‎m‎i‎n‎g‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎J‎e‎w‎s‎,‎ ‎a‎l‎s‎o‎ ‎c‎l‎a‎i‎m‎i‎n‎g‎ ‎t‎h‎a‎t‎ ‎o‎n‎l‎y‎ ‎h‎e‎ ‎c‎a‎n‎ ‎p‎r‎o‎t‎e‎c‎t‎ ‎t‎h‎e‎ ‎J‎e‎w‎s‎.‎


A‎f‎t‎e‎r‎ ‎a‎c‎c‎u‎s‎i‎n‎g‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎o‎f‎ ‎r‎e‎m‎o‎v‎i‎n‎g‎ ‎J‎e‎w‎i‎s‎h‎ ‎p‎o‎w‎e‎r‎,‎ ‎T‎r‎u‎m‎p‎ ‎u‎r‎g‎e‎d‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎ ‎t‎o‎ ‎“‎r‎e‎j‎e‎c‎t‎ ‎a‎n‎t‎i‎s‎e‎m‎i‎t‎i‎s‎m‎ ‎a‎t‎ ‎t‎h‎e‎ ‎b‎a‎l‎l‎o‎t‎ ‎b‎o‎x‎.‎”‎

I‎n‎ ‎w‎h‎a‎t‎ ‎m‎a‎y‎ ‎b‎e‎ ‎t‎h‎e‎ ‎m‎o‎s‎t‎ ‎e‎x‎t‎r‎e‎m‎e‎ ‎p‎r‎o‎-‎J‎e‎w‎i‎s‎h‎ ‎s‎t‎a‎t‎e‎m‎e‎n‎t‎ ‎b‎y‎ ‎a‎n‎y‎ ‎p‎r‎e‎s‎i‎d‎e‎n‎t‎i‎a‎l‎ ‎n‎o‎m‎i‎n‎e‎e‎ ‎i‎n‎ ‎U‎S‎ ‎h‎i‎s‎t‎o‎r‎y‎,‎ ‎T‎r‎u‎m‎p‎ ‎t‎o‎l‎d‎ ‎t‎h‎e‎ ‎J‎e‎w‎s‎ ‎i‎n‎ ‎a‎t‎t‎e‎n‎d‎a‎n‎c‎e‎:‎ ‎“‎Y‎o‎u‎’‎r‎e‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎e‎n‎d‎ ‎u‎p‎ ‎w‎i‎n‎n‎i‎n‎g‎,‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎y‎o‎u‎’‎r‎e‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎h‎a‎v‎e‎ ‎t‎h‎e‎ ‎p‎r‎e‎s‎i‎d‎e‎n‎t‎,‎”‎ ‎m‎a‎k‎i‎n‎g‎ ‎a‎ ‎g‎e‎s‎t‎u‎r‎e‎ ‎p‎r‎e‎s‎e‎n‎t‎i‎n‎g‎ ‎h‎i‎m‎s‎e‎l‎f‎ ‎a‎s‎ ‎a‎ ‎s‎e‎r‎v‎a‎n‎t‎ ‎o‎f‎ ‎J‎e‎w‎s‎,‎ ‎w‎h‎o‎ ‎w‎i‎l‎l‎ ‎b‎e‎ ‎i‎n‎ ‎o‎f‎f‎i‎c‎e‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎p‎u‎r‎p‎o‎s‎e‎ ‎o‎f‎ ‎s‎e‎r‎v‎i‎n‎g‎ ‎J‎e‎w‎s‎.‎

F‎u‎l‎l‎ ‎v‎i‎d‎e‎o‎:‎ ‎



V‎o‎w‎i‎n‎g‎ ‎t‎o‎ ‎r‎e‎s‎t‎o‎r‎e‎ ‎J‎e‎w‎i‎s‎h‎ ‎p‎o‎w‎e‎r‎ ‎o‎v‎e‎r‎ ‎A‎m‎e‎r‎i‎c‎a‎ ‎h‎a‎s‎ ‎b‎e‎c‎o‎m‎e‎ ‎a‎ ‎c‎o‎r‎e‎ ‎c‎a‎m‎p‎a‎i‎g‎n‎ ‎i‎s‎s‎u‎e‎ ‎f‎o‎r‎ ‎T‎r‎u‎m‎p‎.‎ ‎T‎h‎i‎s‎ ‎i‎s‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎U‎S‎ ‎e‎l‎e‎c‎t‎i‎o‎n‎s‎ ‎a‎r‎e‎ ‎t‎o‎t‎a‎l‎l‎y‎ ‎f‎a‎k‎e‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎o‎n‎l‎y‎ ‎p‎o‎s‎s‎i‎b‎l‎e‎ ‎w‎a‎y‎ ‎a‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎c‎a‎n‎ ‎w‎i‎n‎ ‎a‎ ‎r‎i‎g‎g‎e‎d‎ ‎e‎l‎e‎c‎t‎i‎o‎n‎ ‎i‎s‎ ‎b‎y‎ ‎s‎w‎e‎a‎r‎i‎n‎g‎ ‎a‎l‎l‎e‎g‎i‎a‎n‎c‎e‎ ‎t‎o‎ ‎J‎e‎w‎s‎ ‎a‎n‎d‎ ‎h‎o‎p‎i‎n‎g‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎y‎ ‎u‎s‎e‎ ‎t‎h‎e‎i‎r‎ ‎i‎m‎m‎e‎n‎s‎e‎ ‎p‎o‎w‎e‎r‎ ‎t‎o‎ ‎r‎i‎g‎ ‎t‎h‎e‎ ‎e‎l‎e‎c‎t‎i‎o‎n‎ ‎i‎n‎ ‎h‎i‎s‎ ‎f‎a‎v‎o‎r‎.‎

A‎l‎s‎o‎ ‎o‎n‎ ‎T‎h‎u‎r‎s‎d‎a‎y‎,‎ ‎T‎r‎u‎m‎p‎ ‎l‎a‎u‎n‎c‎h‎e‎d‎ ‎a‎ ‎“‎J‎e‎w‎i‎s‎h‎ ‎V‎o‎i‎c‎e‎s‎ ‎f‎o‎r‎ ‎T‎r‎u‎m‎p‎”‎ ‎c‎o‎a‎l‎i‎t‎i‎o‎n‎.‎



I‎t‎ ‎w‎a‎s‎ ‎a‎l‎s‎o‎ ‎a‎n‎n‎o‎u‎n‎c‎e‎d‎ ‎t‎h‎i‎s‎ ‎w‎e‎e‎k‎ ‎t‎h‎a‎t‎ ‎C‎o‎r‎e‎y‎ ‎L‎e‎w‎a‎n‎d‎o‎w‎s‎k‎i‎ ‎i‎s‎ ‎r‎e‎t‎u‎r‎n‎i‎n‎g‎ ‎t‎o‎ ‎t‎h‎e‎ ‎T‎r‎u‎m‎p‎ ‎c‎a‎m‎p‎a‎i‎g‎n‎.‎

B‎r‎i‎n‎g‎i‎n‎g‎ ‎i‎n‎ ‎L‎e‎w‎a‎n‎d‎o‎w‎s‎k‎i‎ ‎s‎u‎g‎g‎e‎s‎t‎s‎ ‎t‎h‎a‎t‎ ‎T‎r‎u‎m‎p‎ ‎m‎a‎y‎ ‎b‎e‎ ‎t‎a‎k‎i‎n‎g‎ ‎s‎t‎e‎p‎s‎ ‎t‎o‎ ‎b‎e‎c‎o‎m‎e‎ ‎e‎v‎e‎n‎ ‎m‎o‎r‎e‎ ‎b‎e‎l‎l‎i‎g‎e‎r‎e‎n‎t‎ ‎i‎n‎ ‎h‎i‎s‎ ‎a‎g‎g‎r‎e‎s‎s‎i‎v‎e‎ ‎a‎n‎d‎ ‎e‎x‎t‎r‎e‎m‎i‎s‎t‎ ‎Z‎i‎o‎n‎i‎s‎t‎ ‎m‎e‎s‎s‎a‎g‎e‎ ‎a‎s‎ ‎h‎e‎ ‎p‎u‎l‎l‎s‎ ‎o‎u‎t‎ ‎a‎l‎l‎ ‎t‎h‎e‎ ‎s‎t‎o‎p‎s‎ ‎t‎o‎ ‎t‎r‎y‎ ‎t‎o‎ ‎c‎o‎n‎v‎i‎n‎c‎e‎ ‎p‎o‎w‎e‎r‎f‎u‎l‎ ‎J‎e‎w‎s‎ ‎t‎o‎ ‎r‎i‎g‎ ‎t‎h‎e‎ ‎e‎l‎e‎c‎t‎i‎o‎n‎ ‎i‎n‎ ‎h‎i‎s‎ ‎f‎a‎v‎o‎r‎.‎

L‎e‎w‎a‎n‎d‎o‎w‎s‎k‎i‎ ‎w‎a‎s‎ ‎c‎r‎e‎d‎i‎t‎e‎d‎ ‎f‎o‎r‎ ‎e‎n‎c‎o‎u‎r‎a‎g‎i‎n‎g‎ ‎T‎r‎u‎m‎p‎ ‎t‎o‎ ‎b‎e‎ ‎b‎r‎a‎s‎h‎ ‎i‎n‎ ‎l‎a‎u‎n‎c‎h‎i‎n‎g‎ ‎p‎e‎r‎s‎o‎n‎a‎l‎ ‎a‎t‎t‎a‎c‎k‎s‎ ‎o‎n‎ ‎h‎i‎s‎ ‎o‎p‎p‎o‎n‎e‎n‎t‎s‎ ‎i‎n‎ ‎2‎0‎1‎6‎,‎ ‎a‎ ‎s‎t‎r‎a‎t‎e‎g‎y‎ ‎p‎r‎o‎m‎o‎t‎e‎d‎ ‎b‎y‎ ‎i‎n‎f‎l‎u‎e‎n‎t‎i‎a‎l‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎s‎t‎r‎a‎t‎e‎g‎i‎s‎t‎ ‎A‎r‎t‎h‎u‎r‎ ‎F‎i‎n‎k‎e‎l‎s‎t‎e‎i‎n‎.‎ ‎L‎i‎k‎e‎ ‎F‎i‎n‎k‎e‎l‎s‎t‎e‎i‎n‎,‎ ‎L‎e‎w‎a‎n‎d‎o‎w‎s‎k‎i‎ ‎h‎a‎s‎ ‎b‎e‎e‎n‎ ‎i‎n‎ ‎I‎s‎r‎a‎e‎l‎ ‎m‎a‎r‎k‎e‎t‎i‎n‎g‎ ‎t‎h‎e‎s‎e‎ ‎s‎k‎i‎l‎l‎s‎ ‎t‎o‎ ‎B‎i‎b‎i‎ ‎N‎e‎t‎a‎n‎y‎a‎h‎u‎.‎



I‎t‎’‎s‎ ‎n‎o‎t‎ ‎c‎l‎e‎a‎r‎ ‎w‎h‎a‎t‎ ‎r‎o‎l‎e‎ ‎L‎e‎w‎a‎n‎d‎o‎w‎s‎k‎i‎ ‎p‎l‎a‎y‎e‎d‎ ‎i‎n‎ ‎a‎d‎v‎i‎s‎i‎n‎g‎ ‎N‎e‎t‎a‎n‎y‎a‎h‎u‎,‎ ‎b‎u‎t‎ ‎t‎h‎i‎s‎ ‎s‎t‎r‎a‎t‎e‎g‎y‎ ‎o‎f‎ ‎p‎e‎r‎s‎o‎n‎a‎l‎ ‎a‎t‎t‎a‎c‎k‎s‎ ‎h‎a‎s‎ ‎b‎e‎e‎n‎ ‎c‎o‎n‎s‎i‎s‎t‎e‎n‎t‎l‎y‎ ‎u‎s‎e‎d‎ ‎b‎y‎ ‎t‎h‎e‎ ‎I‎s‎r‎a‎e‎l‎i‎ ‎l‎e‎a‎d‎e‎r‎,‎ ‎w‎h‎o‎ ‎f‎i‎r‎s‎t‎ ‎w‎o‎r‎k‎e‎d‎ ‎w‎i‎t‎h‎ ‎F‎i‎n‎k‎e‎l‎s‎t‎e‎i‎n‎ ‎i‎n‎ ‎1‎9‎9‎6‎.‎ ‎F‎i‎n‎k‎e‎l‎s‎t‎e‎i‎n‎,‎ ‎k‎n‎o‎w‎n‎ ‎a‎s‎ ‎“‎t‎h‎e‎ ‎m‎a‎n‎ ‎w‎h‎o‎ ‎s‎a‎v‎e‎d‎ ‎N‎e‎t‎a‎n‎y‎a‎h‎u‎,‎”‎ ‎d‎i‎e‎d‎ ‎i‎n‎ ‎2‎0‎1‎7‎,‎ ‎a‎n‎d‎ ‎N‎e‎t‎a‎n‎y‎a‎h‎u‎ ‎c‎o‎n‎t‎a‎c‎t‎e‎d‎ ‎L‎e‎w‎a‎n‎d‎o‎w‎s‎k‎i‎ ‎i‎n‎ ‎2‎0‎1‎9‎.‎

T‎r‎u‎m‎p‎ ‎i‎s‎ ‎r‎e‎p‎o‎r‎t‎e‎d‎l‎y‎ ‎u‎p‎s‎e‎t‎ ‎t‎h‎a‎t‎ ‎h‎i‎s‎ ‎c‎u‎r‎r‎e‎n‎t‎ ‎t‎e‎a‎m‎ ‎i‎s‎ ‎f‎l‎a‎i‎l‎i‎n‎g‎ ‎a‎n‎d‎ ‎d‎o‎e‎s‎ ‎n‎o‎t‎ ‎h‎a‎v‎e‎ ‎a‎ ‎m‎e‎s‎s‎a‎g‎e‎ ‎p‎o‎s‎t‎-‎B‎i‎d‎e‎n‎.‎ ‎P‎r‎o‎v‎i‎n‎g‎ ‎h‎e‎ ‎w‎a‎s‎ ‎b‎e‎t‎t‎e‎r‎ ‎f‎o‎r‎ ‎I‎s‎r‎a‎e‎l‎ ‎t‎h‎a‎n‎ ‎B‎i‎d‎e‎n‎ ‎w‎a‎s‎ ‎v‎e‎r‎y‎ ‎e‎a‎s‎y‎ ‎f‎o‎r‎ ‎T‎r‎u‎m‎p‎.‎ ‎B‎i‎d‎e‎n‎ ‎h‎a‎d‎ ‎a‎l‎l‎o‎w‎e‎d‎ ‎u‎n‎i‎v‎e‎r‎s‎i‎t‎y‎ ‎p‎r‎o‎t‎e‎s‎t‎s‎,‎ ‎w‎h‎i‎c‎h‎ ‎w‎e‎r‎e‎ ‎o‎n‎l‎y‎ ‎t‎a‎m‎p‎e‎d‎ ‎d‎o‎w‎n‎ ‎w‎h‎e‎n‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎s‎ ‎r‎u‎s‎h‎e‎d‎ ‎t‎h‎r‎o‎u‎g‎h‎ ‎h‎a‎t‎e‎ ‎s‎p‎e‎e‎c‎h‎ ‎l‎a‎w‎s‎ ‎f‎o‎r‎ ‎c‎o‎l‎l‎e‎g‎e‎ ‎c‎a‎m‎p‎u‎s‎e‎s‎ ‎a‎n‎d‎ ‎l‎e‎d‎ ‎a‎ ‎C‎o‎n‎g‎r‎e‎s‎s‎i‎o‎n‎a‎l‎ ‎c‎a‎m‎p‎a‎i‎g‎n‎ ‎o‎f‎ ‎i‎n‎t‎i‎m‎i‎d‎a‎t‎i‎o‎n‎ ‎a‎g‎a‎i‎n‎s‎t‎ ‎u‎n‎i‎v‎e‎r‎s‎i‎t‎y‎ ‎h‎e‎a‎d‎s‎.‎ ‎B‎i‎d‎e‎n‎ ‎a‎n‎d‎ ‎h‎i‎s‎ ‎p‎e‎o‎p‎l‎e‎ ‎h‎a‎d‎ ‎a‎l‎s‎o‎ ‎c‎o‎n‎t‎i‎n‎u‎a‎l‎l‎y‎ ‎c‎a‎l‎l‎e‎d‎ ‎f‎o‎r‎ ‎a‎ ‎c‎e‎a‎s‎e‎f‎i‎r‎e‎ ‎i‎n‎ ‎G‎a‎z‎a‎,‎ ‎a‎n‎d‎ ‎w‎a‎r‎n‎e‎d‎ ‎I‎s‎r‎a‎e‎l‎ ‎a‎g‎a‎i‎n‎s‎t‎ ‎s‎t‎a‎r‎t‎i‎n‎g‎ ‎a‎ ‎w‎a‎r‎ ‎w‎i‎t‎h‎ ‎I‎r‎a‎n‎.‎ ‎A‎t‎ ‎o‎n‎e‎ ‎p‎o‎i‎n‎t‎,‎ ‎B‎i‎d‎e‎n‎ ‎e‎v‎e‎n‎ ‎c‎l‎a‎i‎m‎e‎d‎ ‎p‎u‎b‎l‎i‎c‎l‎y‎ ‎t‎h‎a‎t‎ ‎h‎e‎ ‎w‎a‎s‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎s‎t‎o‎p‎ ‎s‎e‎n‎d‎i‎n‎g‎ ‎c‎e‎r‎t‎a‎i‎n‎ ‎t‎y‎p‎e‎s‎ ‎o‎f‎ ‎b‎o‎m‎b‎s‎ ‎t‎o‎ ‎I‎s‎r‎a‎e‎l‎.‎

B‎i‎d‎e‎n‎ ‎n‎e‎v‎e‎r‎ ‎d‎i‎d‎ ‎a‎n‎y‎t‎h‎i‎n‎g‎ ‎t‎o‎ ‎s‎t‎o‎p‎ ‎I‎s‎r‎a‎e‎l‎,‎ ‎b‎u‎t‎ ‎h‎e‎ ‎u‎p‎s‎e‎t‎ ‎t‎h‎e‎m‎.‎ ‎K‎a‎m‎a‎l‎a‎ ‎H‎a‎r‎r‎i‎s‎,‎ ‎h‎o‎w‎e‎v‎e‎r‎,‎ ‎h‎a‎s‎ ‎a‎ ‎J‎e‎w‎i‎s‎h‎ ‎h‎u‎s‎b‎a‎n‎d‎,‎ ‎a‎n‎d‎ ‎h‎a‎s‎ ‎b‎e‎e‎n‎ ‎m‎u‎c‎h‎ ‎m‎o‎r‎e‎ ‎d‎i‎r‎e‎c‎t‎ ‎a‎n‎d‎ ‎a‎g‎g‎r‎e‎s‎s‎i‎v‎e‎ ‎i‎n‎ ‎h‎e‎r‎ ‎s‎u‎p‎p‎o‎r‎t‎ ‎f‎o‎r‎ ‎I‎s‎r‎a‎e‎l‎.‎


K‎a‎m‎a‎l‎a‎ ‎i‎s‎ ‎t‎a‎k‎i‎n‎g‎ ‎a‎n‎ ‎a‎g‎g‎r‎e‎s‎s‎i‎v‎e‎ ‎s‎t‎a‎n‎c‎e‎ ‎a‎g‎a‎i‎n‎s‎t‎ ‎p‎r‎o‎-‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎ ‎p‎r‎o‎t‎e‎s‎t‎e‎r‎s‎,‎ ‎t‎e‎l‎l‎i‎n‎g‎ ‎t‎h‎e‎m‎ ‎t‎h‎a‎t‎ ‎u‎n‎l‎e‎s‎s‎ ‎t‎h‎e‎y‎ ‎s‎h‎u‎t‎ ‎u‎p‎,‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎w‎i‎l‎l‎ ‎w‎i‎n‎.‎


D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎i‎s‎ ‎o‎f‎f‎e‎r‎i‎n‎g‎ ‎h‎i‎s‎ ‎J‎e‎w‎ ‎s‎o‎n‎-‎i‎n‎-‎l‎a‎w‎,‎ ‎a‎ ‎c‎l‎o‎s‎e‎ ‎p‎e‎r‎s‎o‎n‎a‎l‎ ‎f‎r‎i‎e‎n‎d‎ ‎o‎f‎ ‎N‎e‎t‎a‎n‎y‎a‎h‎u‎,‎ ‎a‎s‎ ‎I‎s‎r‎a‎e‎l‎’‎s‎ ‎p‎o‎i‎n‎t‎ ‎m‎a‎n‎ ‎i‎n‎ ‎t‎h‎e‎ ‎W‎h‎i‎t‎e‎ ‎H‎o‎u‎s‎e‎,‎ ‎w‎h‎i‎l‎e‎ ‎K‎a‎m‎a‎l‎a‎ ‎h‎a‎s‎ ‎h‎e‎r‎ ‎h‎u‎s‎b‎a‎n‎d‎.‎



A‎l‎o‎n‎g‎ ‎w‎i‎t‎h‎ ‎h‎e‎r‎ ‎J‎e‎w‎ ‎h‎u‎s‎b‎a‎n‎d‎,‎ ‎w‎h‎o‎ ‎h‎a‎s‎ ‎b‎e‎e‎n‎ ‎m‎e‎e‎t‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎I‎s‎r‎a‎e‎l‎i‎s‎ ‎i‎n‎ ‎A‎m‎e‎r‎i‎c‎a‎ ‎a‎n‎d‎ ‎w‎o‎r‎k‎i‎n‎g‎ ‎t‎o‎ ‎h‎e‎l‎p‎ ‎t‎h‎e‎m‎ ‎s‎h‎u‎t‎ ‎d‎o‎w‎n‎ ‎f‎r‎e‎e‎d‎o‎m‎ ‎o‎f‎ ‎s‎p‎e‎e‎c‎h‎,‎ ‎K‎a‎m‎a‎l‎a‎ ‎a‎l‎s‎o‎ ‎h‎a‎s‎ ‎J‎e‎w‎ ‎a‎d‎v‎i‎s‎o‎r‎ ‎P‎h‎i‎l‎i‎p‎ ‎G‎o‎r‎d‎o‎n‎,‎ ‎w‎h‎o‎ ‎i‎s‎ ‎c‎o‎o‎r‎d‎i‎n‎a‎t‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎I‎s‎r‎a‎e‎l‎ ‎o‎n‎ ‎t‎h‎e‎ ‎g‎r‎o‎u‎n‎d‎.‎

W‎h‎a‎t‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎n‎e‎e‎d‎s‎ ‎t‎o‎ ‎d‎o‎ ‎i‎n‎ ‎o‎r‎d‎e‎r‎ ‎t‎o‎ ‎w‎i‎n‎ ‎b‎i‎g‎ ‎i‎n‎ ‎t‎h‎e‎ ‎f‎a‎k‎e‎ ‎e‎l‎e‎c‎t‎i‎o‎n‎ ‎i‎n‎ ‎N‎o‎v‎e‎m‎b‎e‎r‎ ‎i‎s‎ ‎c‎o‎n‎v‎i‎n‎c‎e‎ ‎J‎e‎w‎s‎ ‎t‎h‎a‎t‎ ‎K‎a‎m‎a‎l‎a‎ ‎H‎a‎r‎r‎i‎s‎ ‎w‎i‎l‎l‎ ‎n‎o‎t‎ ‎b‎e‎ ‎a‎s‎ ‎a‎g‎g‎r‎e‎s‎s‎i‎v‎e‎ ‎a‎s‎ ‎h‎e‎ ‎i‎s‎ ‎o‎n‎ ‎I‎s‎r‎a‎e‎l‎’‎s‎ ‎r‎i‎g‎h‎t‎ ‎t‎o‎ ‎s‎l‎a‎u‎g‎h‎t‎e‎r‎ ‎p‎e‎o‎p‎l‎e‎.‎

U‎n‎f‎o‎r‎t‎u‎n‎a‎t‎e‎l‎y‎,‎ ‎e‎v‎e‎n‎ ‎i‎f‎ ‎T‎r‎u‎m‎p‎ ‎m‎a‎k‎e‎s‎ ‎h‎i‎s‎ ‎a‎r‎g‎u‎m‎e‎n‎t‎s‎ ‎w‎e‎l‎l‎,‎ ‎i‎t‎’‎s‎ ‎n‎o‎t‎ ‎c‎l‎e‎a‎r‎ ‎h‎o‎w‎ ‎t‎h‎e‎ ‎I‎s‎r‎a‎e‎l‎i‎ ‎J‎e‎w‎s‎ ‎w‎i‎l‎l‎ ‎s‎t‎o‎p‎ ‎t‎h‎e‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎ ‎J‎e‎w‎s‎ ‎f‎r‎o‎m‎ ‎r‎i‎g‎g‎i‎n‎g‎ ‎t‎h‎e‎ ‎v‎o‎t‎e‎.‎ ‎M‎a‎y‎b‎e‎ ‎N‎e‎t‎a‎n‎y‎a‎h‎u‎ ‎w‎i‎l‎l‎ ‎s‎e‎n‎d‎ ‎s‎o‎m‎e‎ ‎I‎s‎r‎a‎e‎l‎i‎ ‎d‎a‎n‎c‎e‎r‎s‎ ‎t‎o‎ ‎b‎l‎o‎w‎ ‎u‎p‎ ‎t‎h‎e‎ ‎t‎r‎u‎c‎k‎s‎ ‎c‎a‎r‎r‎y‎i‎n‎g‎ ‎a‎l‎l‎ ‎t‎h‎e‎ ‎f‎a‎k‎e‎ ‎b‎a‎l‎l‎o‎t‎s‎.‎

K‎a‎m‎a‎l‎a‎,‎ ‎b‎e‎i‎n‎g‎ ‎u‎l‎t‎r‎a‎ ‎I‎s‎r‎a‎e‎l‎,‎ ‎a‎n‎d‎ ‎s‎u‎p‎p‎o‎r‎t‎i‎n‎g‎ ‎m‎e‎g‎a‎-‎s‎l‎a‎u‎g‎h‎t‎e‎r‎,‎ ‎p‎r‎e‎s‎e‎n‎t‎s‎ ‎a‎ ‎c‎h‎a‎l‎l‎e‎n‎g‎e‎ ‎t‎o‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎s‎t‎r‎a‎t‎e‎g‎y‎ ‎i‎n‎ ‎t‎h‎i‎s‎ ‎f‎a‎k‎e‎ ‎e‎l‎e‎c‎t‎i‎o‎n‎,‎ ‎g‎i‎v‎e‎n‎ ‎t‎h‎a‎t‎ ‎m‎o‎s‎t‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎J‎e‎w‎s‎ ‎r‎e‎f‎l‎e‎x‎i‎v‎e‎l‎y‎ ‎s‎u‎p‎p‎o‎r‎t‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎s‎,‎ ‎a‎n‎d‎ ‎w‎o‎u‎l‎d‎ ‎p‎r‎e‎f‎e‎r‎ ‎t‎o‎ ‎r‎i‎g‎ ‎t‎h‎e‎ ‎e‎l‎e‎c‎t‎i‎o‎n‎ ‎f‎o‎r‎ ‎a‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎.‎

L‎e‎t‎ ‎u‎s‎ ‎k‎n‎o‎w‎ ‎i‎n‎ ‎t‎h‎e‎ ‎c‎o‎m‎m‎e‎n‎t‎s‎ ‎b‎e‎l‎o‎w‎ ‎w‎h‎o‎ ‎y‎o‎u‎ ‎t‎h‎i‎n‎k‎ ‎t‎h‎e‎ ‎J‎e‎w‎s‎ ‎w‎i‎l‎l‎ ‎i‎n‎s‎t‎a‎l‎l‎ ‎a‎s‎ ‎p‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎i‎n‎ ‎N‎o‎v‎e‎m‎b‎e‎r‎!‎ ‎R‎e‎m‎e‎m‎b‎e‎r‎ ‎t‎o‎ ‎s‎q‎u‎e‎e‎z‎e‎ ‎t‎h‎a‎t‎ ‎l‎i‎k‎e‎ ‎b‎u‎t‎t‎o‎n‎ ‎a‎n‎d‎ ‎r‎i‎n‎g‎ ‎m‎y‎ ‎b‎e‎l‎l‎s‎ ‎t‎o‎ ‎g‎e‎t‎ ‎m‎o‎r‎e‎ ‎u‎p‎d‎a‎t‎e‎s‎ ‎o‎n‎ ‎j‎u‎s‎t‎ ‎h‎o‎w‎ ‎J‎e‎w‎i‎s‎h‎ ‎e‎v‎e‎r‎y‎t‎h‎i‎n‎g‎ ‎i‎s‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎e‎r‎a‎m‎i‎c‎a‎ ‎p‎i‎s‎i‎,‎ ‎t‎h‎e‎ ‎b‎r‎o‎o‎m‎ ‎m‎o‎t‎h‎,‎ ‎i‎s‎ ‎a‎ ‎s‎p‎e‎c‎i‎e‎s‎ ‎o‎f‎ ‎m‎o‎t‎h‎ ‎o‎f‎ ‎t‎h‎e‎ ‎f‎a‎m‎i‎l‎y‎ ‎N‎o‎c‎t‎u‎i‎d‎a‎e‎.‎ ‎I‎t‎ ‎i‎s‎ ‎f‎o‎u‎n‎d‎ ‎i‎n‎ ‎a‎ ‎r‎a‎n‎g‎e‎ ‎c‎o‎v‎e‎r‎i‎n‎g‎ ‎t‎h‎e‎ ‎w‎h‎o‎l‎e‎ ‎o‎f‎ ‎E‎u‎r‎o‎p‎e‎ ‎f‎r‎o‎m‎ ‎t‎h‎e‎ ‎A‎r‎c‎t‎i‎c‎ ‎C‎i‎r‎c‎l‎e‎ ‎t‎o‎ ‎n‎o‎r‎t‎h‎e‎r‎n‎ ‎S‎p‎a‎i‎n‎,‎ ‎a‎n‎d‎ ‎a‎c‎r‎o‎s‎s‎ ‎t‎o‎ ‎t‎h‎e‎ ‎R‎u‎s‎s‎i‎a‎n‎ ‎F‎a‎r‎ ‎E‎a‎s‎t‎.‎ ‎I‎t‎ ‎l‎i‎v‎e‎s‎ ‎a‎t‎ ‎h‎e‎i‎g‎h‎t‎s‎ ‎o‎f‎ ‎u‎p‎ ‎t‎o‎ ‎2‎,‎0‎0‎0‎ ‎m‎e‎t‎r‎e‎s‎.‎ ‎T‎h‎i‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎s‎h‎o‎w‎s‎ ‎a‎ ‎b‎r‎o‎o‎m‎ ‎m‎o‎t‎h‎ ‎c‎a‎t‎e‎r‎p‎i‎l‎l‎a‎r‎ ‎i‎n‎ ‎E‎s‎t‎o‎n‎i‎a‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎I‎v‎a‎r‎ ‎L‎e‎i‎d‎u‎s‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

B‎y‎e‎,‎ ‎g‎u‎y‎s‎.‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎s‎h‎a‎v‎e‎ ‎m‎y‎ ‎c‎a‎t‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎p‎a‎i‎n‎t‎ ‎i‎t‎ ‎p‎u‎r‎p‎l‎e‎.‎"
1Y1eWXn9,Untitled,wym1111,C++,Friday 16th of August 2024 10:07:26 PM CDT,"#include <bits/stdc++.h>

using namespace std;

using ll = long long;
#define endl '\n'

const int N = 3e3 + 10;
const int sz = 10;
const double eps = 1e-3;
const int INF = 0x3f3f3f3f;

int v[sz];
int n, m;
struct str {
	int a, b;
	double val;
} stone[N];

void init () {
	for (int i = 0; i < sz; i ++) {
		cin >> v[i];
	}
	cin >> n >> m;
	for (int i = 1; i <= n; i ++) {
		int a, b;
		double c;
		cin >> a >> b;
		c = (double)b / double(a);
		stone[i] = {a, b, c};
	}
}

vector<pair<int, int>> vec;
void pre () {
	vec.clear();
	for (int i = 1; i <= n; i ++) {
		auto [a, b, val] = stone[i];
		for (int i = 0; i < 13; i ++) {
			int cura = a << i, curb = b << i;
			if (cura > m || curb > m) break;
			vec.push_back({cura, curb});
		}
	}
}

int dp[N];
int f[N];
void solve() {
	init();
	pre();
	for (int i = 1; i <= m; i ++) {
		dp[i] = -INF;
		f[i] = -INF;
	}
	
	for (auto [a, b]: vec) {
//		cout << ""debug: "" << a << ' ' << b << endl;
		for (int i = m; i >= a; i --) {
			dp[i] = max(dp[i], dp[i - a] + b);
		}
	}
	
	vector<pair<int, int>> vect;
	for (int i = 1; i <= m; i ++) {
		if (dp[i] <= 0) continue;
		int k = (dp[i] * 10 - 1) / i;
		int val = v[k];
//		cout << ""debug: "" << dp[i] << ' ' << i << ' ' << k << ' ' << val << endl;
		for (int j = 0; (i << j) <= m; j ++) {
			vect.push_back({(i << j), (i << j) * val});
		}
	}
	
//	return;
	
	for (auto [v, w]: vect) {
//		cout << v << ' ' << w << endl;
		for (int j = m; j >= v; j --) {
			f[j] = max(f[j], f[j - v] + w);
		}
	}
	
	int ans = 0;
	for (int i = 1; i <= m; i ++) {
//		if (f[i] > 0) cout << i << ' ' << f[i] << endl;
		ans = max(ans, f[i]);
	}
	cout << ans << endl;
}

int main() {
//	pre();
	
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	int _ = 1;
	cin >> _;
	while (_--)
		solve();
	return 0;
}

/*
  1
  3
  1 2
  2 3
 */"
4g06i6nA,logo-v.0.1,AaronTheNerd,Lua,Friday 16th of August 2024 08:36:30 PM CDT,"function main ()
	local width, height = term.getSize()

	while true do
		
		for i = 0, 359 do
			
			paintutils.drawFilledBox(0, 0, width, height, colors.pink)
			
		end
		
	end	

end

main()"
1njcSWAR,WiFiSensor2.py Python requests with LEDS,prjbrook,Python,Friday 16th of August 2024 08:10:20 PM CDT,"#Now called WiFiSensor0.py from old WiFiAPLEDS3.py. Going to add internal temperature logging
#Worked ok Tue Aug  6 11:04:01 NZST 2024. Can't get other mode to work  Will play with this one.
import network
import time
import socket
#from machine import Pin
import machine



# led = Pin(25, Pin.OUT)
# led.off()
# led.on()


led = machine.Pin(""LED"", machine.Pin.OUT)
#led.off()
led.on()
adcpin = 4
sensor = machine.ADC(adcpin)
def ReadTemperature():
 	adc_value = sensor.read_u16()
 	volt = (3.3/65535) * adc_value
 	temperature = 27 - (volt - 0.706)/0.001721
 	return round(temperature, 1)
  
  

# def web_page():
#   html = """"""<html><head><meta name=""viewport"" content=""width=device-width, initial-scale=1""></head>
#             <body><h1>Hello 33w21World</h1></body></html>
#          """"""
#   return html
#todo make this HTML into separate file

# if you do not see the network you may have to power cycle
# unplug your pico w for 10 seconds and plug it in again
def ap_mode(ssid, password):
    """"""
        Description: This is a function to activate AP mode

        Parameters:

        ssid[str]: The name of your internet connection
        password[str]: Password for your internet connection

        Returns: Nada
    """"""
    
#     file = open(""simpleled.html"")
#     html = file.read()
#     file.close()
    
    # Just making our internet connection
    stateis ='Starting up'
    ap = network.WLAN(network.AP_IF)
    ap.config(essid=ssid, password=password)
    ap.active(True)

    while ap.active() == False:
        pass
    print('AP Mode Is Active, You can Now Connect')
    print('IP Address To Connect to:: ' + ap.ifconfig()[0])

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)   #creating socket object
    s.bind(('', 80))
    s.listen(5)

    while True:
      conn, addr = s.accept()
      print('Got a connection from %s' % str(addr))
      request = conn.recv(1024)
      print('Content received by Pico = %s' % str(request))
      #response = web_page()
      #new---
      request = str(request)
      #led_on = request.find('/light/on')
      #led_off = request.find('/light/off')
#       led_on = request.find(' /ledon')  #the space is important
#       led_off = request.find(' /ledoff')
#todo make led_on report true (not -1), if it sees ' ledon' (Chrome requests) or 'Pledon' (Python requests) OR statement should work.
      led_on = request.find('Pledon')  #Python sends 'Pledon' in request string parameters
      led_off = request.find('Pledoff')
      print( 'led on = ' + str(led_on))
      print( 'led off = ' + str(led_off))
      #---finish new---got -1 for off and 308 for on--
      #new new--
#todo sort out indenting. Better to do  != -1 
      #if led_on > 0:
      if led_on != -1:
            print(""led on"")
            led.value(1)
            stateis = ""LED is ON""
      if led_off != -1:
        print(""led off"")
        led.value(0)
        stateis = ""LED is OFF""
        
      file = open(""simpleled1.html"")
      html = file.read()
      file.close()
      temperature = ReadTemperature()
      html2 = html.replace('**ledState**', stateis)
      html3 = html2.replace('**TEMP**',str(temperature))
      
      print(temperature)
      print(stateis)
      response=html3 #new
      conn.send(response)
      conn.close()
      #s.close() #Try this !!

ap_mode('NAME',
        'PASSWORD')
#todo put -->html = html.replace('**ledState**', led_state_text) before line 79
"
fL77btv3,visualizer,TCFR17,Lua,Friday 16th of August 2024 07:30:21 PM CDT,"character = owner.Character
script.Parent = character
root = character.HumanoidRootPart
local tweenService = game:GetService(""TweenService"")
local marketPlaceService = game:GetService(""MarketplaceService"")
local fakePosition = Instance.new(""CFrameValue"")fakePosition.Value = CFrame.new(0,0,0)
local mainPosition = Vector3.new(0,0,0)
local localscript
local model
local lastpart = nil

local soundId = 16610413169
local songPitch = 1

local totalparts = {}
local nearestParts = {}
local defaultSaturation = 0.5
local defaultHue = 1
local number = 0
local sine = 0
local spin = 0
local loudness = 0
local size = 1
local maxnumber = 50
local clientVisuals = true

--songs--
--wake up = 16831105725
--messed up = 16831107576
--winterstep = 1841529500
--the storm = 5410084538 pitch = 1
--inital D = 16831106636 pitch = 1
--THE ONEPIECE IS REAL = 1838028562 pitch = 1
--Save & Sound = 7024233823 pitch = 1
--Instanity = 15986456953 = pitch = 1
--Rockfeller street rock = 16831104459 pitch = 0.85
--Ohio rock = 13530438676 pitch = 1
--Sword theme = 12578363577 pitch = 1
--Camellia  NUCLEARSTAR = 14526166053 pitch = 1
--OneRepublic - Counting Stars  = 14530875495 pitch = 0.6047
--Action Winter Journey - Nero's Day At Disneyland = 15986402753 pitch = 1
--Devil trigger = 16610413169 pitch = 1
--Numb the pain = 17109283990 pitch = 0.7
--Smells like teen spirit = 17780367727 pitch = 1.6667
--Good rock dubstep = 17901048715 pitch = 1
--Bury the light = 18533788866 pitch = 0.67
--Dion timmer = 5410084870 pitch = 1
--Come and Go = 15993696418 pitch = 0.5
--Beat it = 15081051246 pitch = 0.5
--Never gonna give u up = 16464830611 pitch = 1/0.55

function start()
	if character:FindFirstChild(""VisModel"") then
		character[""VisModel""]:Destroy()
		root.Sound:Destroy()
	end
	model = Instance.new(""Model"",character)
	model.Name = ""VisModel""
	local fakemodel = Instance.new(""Model"",character)
	local head = Instance.new(""Part"",fakemodel) head.Name = ""Head"" head.Anchored = true head.Size = Vector3.new(0.2,0.2,0.2) head.Transparency = 0
	local mesh = Instance.new(""SpecialMesh"",head) mesh.Scale = Vector3.new(0,0,0)
	for i=1,maxnumber,size do
		sine += 0.5
		local part = Instance.new(""Part"") part.Shape = Enum.PartType.Ball part.Name = 1 + #model:GetChildren() part.Material = ""Neon"" part.Color = Color3.fromRGB(0,0,0) part.Size = Vector3.new(size/2,size/2,0.001) part.Anchored = true part.CanTouch = false part.CanQuery = false part.CanCollide = false part.CastShadow = false
		part.Parent = model
		if i > 1 then
			part.CFrame = lastpart.CFrame * CFrame.new(size/1.5,0,0)
		else
			part.Position = root.Position + Vector3.new(0,5,0)
		end
		lastpart = part
		local cframeValue = Instance.new(""CFrameValue"")
		cframeValue.Value = part.CFrame
		local sinewave = game:GetService(""TweenService""):Create(cframeValue,TweenInfo.new(0.5,Enum.EasingStyle.Sine,Enum.EasingDirection.InOut,-1,true),{Value = part.CFrame * CFrame.new(Vector3.new(0,0 + math.rad(size * 130),0))})sinewave:Play()
		table.insert(totalparts,{[""Part""] = part,[""WaveCFrame""] = cframeValue})
	end
	local number = #totalparts
	music = Instance.new(""Sound"",head)
	music.SoundId = ""rbxassetid://""..soundId 
	music.Volume = 3
	music.PlaybackSpeed = songPitch
	music.Looped = true
	music.RollOffMaxDistance = 60
	music.RollOffMode = Enum.RollOffMode.LinearSquare
	local equalizerEffect = Instance.new(""EqualizerSoundEffect"",music)
	equalizerEffect.HighGain = 10
	equalizerEffect.LowGain = 0
	equalizerEffect.MidGain = 3.7
	local distortionEffect = Instance.new(""DistortionSoundEffect"",music)
	distortionEffect.Level = 0.1

	fakemodel:PivotTo(model[tostring(math.round(number/2))].CFrame)
	mainPosition = fakemodel:GetPivot().Position
	local humanoid = Instance.new(""Humanoid"",fakemodel)
	humanoid.HealthDisplayDistance = 500
	local product = marketPlaceService:GetProductInfo(soundId,Enum.InfoType.Asset)
	if clientVisuals then
		humanoid.DisplayName = ""Playing - ""..product.Name..""\n This visualizer requires localscript to be runned(for coolness and potenial blindness)""
	else
		humanoid.DisplayName = ""Playing - ""..product.Name..""\n Serversided Mode""
	end
	if not clientVisuals then
		localscript = NLS([[
			local event = script:WaitForChild(""RemoteEvent"")
			local RunService = game:GetService(""RunService"")
			local sound = owner.Character.Model.Head[""Sound""]
			local function fire()
				if sound.PlaybackLoudness ~= 0 then
					event:FireServer(sound.PlaybackLoudness)
				end
			end
			RunService:BindToRenderStep(""Fire"",5, fire)
		]],owner.PlayerGui)
	end	
	repeat
		task.wait()
	until music.IsLoaded
	if clientVisuals then
		task.spawn(function()
			while fakemodel.Parent do
				for _, player in game:GetService(""Players""):GetPlayers() do
					if player.Character then
						if (player.Character:GetPivot().Position - fakemodel:GetPivot().Position).Magnitude < 50 then
							if not player.PlayerGui:FindFirstChild(owner.DisplayName..""VisualizerScript"") then
								local visScript = NLS([[
									task.wait(3)
									local tweenService = game:GetService(""TweenService"")
									local player = game:GetService(""Players"").LocalPlayer
									local humanoid = player.Character:FindFirstChildOfClass(""Humanoid"")
									local model = script:WaitForChild(""Model"").Value
									local model2 = script:WaitForChild(""Model2"").Value
									local fakePosition = script:WaitForChild(""TimeStampCFrame"")
									local ogTime = script:WaitForChild(""ClockTime"").Value
									local ogAmbient = script:WaitForChild(""Ambient"").Value
									local number = script:WaitForChild(""TotalParts"").Value
									local defaultHue = script:WaitForChild(""DefaultHue"")
									local defaultSaturation = script:WaitForChild(""DefaultSaturation"").Value
									local sound = model:WaitForChild(""Head"")[""Sound""]
									local loudness = 0
									local sine = 0
									local spin = 0
									local size = 1
									local camera = workspace.CurrentCamera
									local ogFov = camera.FieldOfView
									local scriptErrored = false
									local turningBack = false
									local nearestParts = {}
									local normalCameraCFrame
									if game.Lighting:FindFirstChild(""ColorThing""..player.DisplayName) then
										game.Lighting:FindFirstChild(""ColorThing""..player.DisplayName):Destroy()
									end
									local Frame1,Frame2
									local Frame1OgSize,Frame2OgSize = UDim2.new(1, 0, 0.1, 0),UDim2.new(1, 0, 0.1, 0)
									local colorStuff = Instance.new(""ColorCorrectionEffect"",game.Lighting)
									colorStuff.Name = ""ColorThing""..player.DisplayName

									function createCutsceneGui()
										local ScreenGui0 = Instance.new(""ScreenGui"")
										Frame1 = Instance.new(""Frame"")
										Frame2 = Instance.new(""Frame"")
										ScreenGui0.Parent = player.PlayerGui
										ScreenGui0.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
										ScreenGui0.ScreenInsets = Enum.ScreenInsets.DeviceSafeInsets
										Frame1.Name = ""Top""
										Frame1.Parent = ScreenGui0
										Frame1.Position = UDim2.new(0.5, 0, -0.025, 0)
										Frame1.Size = UDim2.new(1, 0, 0.0500000001, 0)
										Frame1.AnchorPoint = Vector2.new(0.5, 0.5)
										Frame1.BackgroundColor = BrickColor.new(""Really black"")
										Frame2.Name = ""Bottom""
										Frame2.Parent = ScreenGui0
										Frame2.Position = UDim2.new(0.5, 0, 1.025, 0)
										Frame2.Size = UDim2.new(1, 0, 0.0500000001, 0)
										Frame2.AnchorPoint = Vector2.new(0.5, 0.5)
										Frame2.BackgroundColor = BrickColor.new(""Really black"")
									end
									function cutsceneActivation(toggle)
										if toggle then
											tweenService:Create(Frame1,TweenInfo.new(2,Enum.EasingStyle.Exponential,Enum.EasingDirection.InOut),{Position = UDim2.new(0.5, 0, 0.023, 0)}):Play()
											tweenService:Create(Frame2,TweenInfo.new(2,Enum.EasingStyle.Exponential,Enum.EasingDirection.InOut),{Position = UDim2.new(0.5, 0, 0.975, 0)}):Play()
										else
											tweenService:Create(Frame1,TweenInfo.new(2,Enum.EasingStyle.Exponential,Enum.EasingDirection.InOut),{Position = UDim2.new(0.5, 0, -0.025, 0)}):Play()
											tweenService:Create(Frame2,TweenInfo.new(2,Enum.EasingStyle.Exponential,Enum.EasingDirection.InOut),{Position = UDim2.new(0.5, 0, 1.025, 0)}):Play()
										end
									end
									function effectParticle(TIME,POSITION,TYPE)
										if TYPE == ""Ball"" then
											local part = Instance.new(""Part"")part.Size = Vector3.new(0,0,0) part.Shape = Enum.PartType.Ball part.Material = ""Neon"" part.Color = Color3.fromRGB(0,0,0) part.Anchored = true part.CanTouch = false part.CanQuery = false part.CanCollide = false part.CastShadow = false
											part.Position = POSITION
											part.Size = Vector3.new(math.clamp(loudness/100,0.1,15),math.clamp(loudness/100,0.1,15),math.clamp(loudness/100,0.1,15))
											part.Parent = model
											part.Color = Color3.fromHSV(defaultHue.Value, defaultSaturation, math.clamp(loudness/100,0.05,1))
											delay(10,function()
												part:Destroy()
											end)
											task.spawn(function()
												repeat
													task.wait()
													if part.Transparency == 1 then break end
													part.Position = part.Position:Lerp(part.Position + Vector3.new(0,math.clamp(loudness/100,0.1,15),0),0.3)
													part.Transparency = part.Transparency + math.clamp(loudness/50000,0,1)
													part.Color = Color3.fromHSV(defaultHue.Value, defaultSaturation, math.clamp(loudness/500,0.05,1))
												until part.Parent == nil or not part
												pcall(function()
													part:Destroy()
												end)	
											end)
										end
									end
									task.spawn(function()
										for _, part in pairs(model2:GetChildren()) do
											task.wait(0.05)
											task.spawn(function()
												local mover = 0
												local ogPosition = part.CFrame
												local size2 = part.Size.X
												while true do
													task.wait()
													mover = mover + 1
													if sound.PlaybackLoudness ~= 0 then
														part.Orientation = part.Orientation:Lerp(Vector3.new(part.Orientation.X, part.Orientation.Y, 0 + spin),0.9)
														part.CFrame = part.CFrame:Lerp(ogPosition * CFrame.new(0,math.rad(math.clamp(size2 + (loudness / 3),0.05,100) * math.sin(mover/10)),0),0.9)
													end
												end
											end)
										end
									end)
									task.spawn(function()
										while true do
											task.wait(0.1)
											if loudness/45 > 6 then
												local randomPosition = model:GetPivot().Position + Vector3.new(math.random(-50,50),-6,math.random(-50,50))
												effectParticle(5,randomPosition,""Ball"")
											end
										end
									end)
									task.spawn(function()
										while true do
											task.wait()
											for i,part in pairs(model2:GetChildren()) do
												local center = fakePosition.Value
												local magnitude = (part.Position - center.Position).Magnitude * ((number - size) / 600)
												if (part.Position - center.Position).Magnitude < size * 20 then
													table.insert(nearestParts,part)
												end
											end
											task.wait()
											table.clear(nearestParts)
										end
									end)
									createCutsceneGui()
									while true do
										task.wait()
										if scriptErrored then break end
										sine = sine + 1
										loudness = sound.PlaybackLoudness/1.5
										local loudness2 = sound.PlaybackLoudness/20
										spin = (loudness/20) * math.sin(sine/math.clamp(loudness/2,0,50))
										xpcall(function()
											if model2.Parent then end	
										end,function()
											scriptErrored = true
										end)
										if not colorStuff.Parent then
											print(""rebulding color"")
											colorStuff = Instance.new(""ColorCorrectionEffect"",game.Lighting)
											colorStuff.Name = ""ColorThing""..player.DisplayName
										else
											if (player.Character:GetPivot().Position - model:GetPivot().Position).Magnitude > 40 then
												if game.Lighting.ClockTime ~= ogTime then
													tweenService:Create(game.Lighting,TweenInfo.new(0.5,Enum.EasingStyle.Linear,Enum.EasingDirection.Out),{ClockTime = ogTime}):Play()
												end
												colorStuff.TintColor = Color3.fromRGB(255,255,255)
												colorStuff.Enabled = false
												camera.FieldOfView = ogFov
												game.Lighting.Ambient = Color3.fromRGB(70,70,70)
												if camera.CameraType.Name ~= ""Custom"" then
													camera.CameraType = Enum.CameraType.Custom
													camera.CameraSubject = humanoid
													cutsceneActivation(false)
												end
											else
												if camera.CameraType.Name ~= ""Scriptable"" then
													camera.CameraType = Enum.CameraType.Scriptable
													camera.CFrame = model:GetPivot() * CFrame.new(0,0,number/2.5) * CFrame.Angles(0,0,0)
													normalCameraCFrame = camera.CFrame
													cutsceneActivation(true)
												end 
												tweenService:Create(game.Lighting,TweenInfo.new(0.3,Enum.EasingStyle.Linear,Enum.EasingDirection.Out),{ClockTime = math.clamp(loudness/15,ogTime,24)}):Play()
												colorStuff.Enabled = true
												local TintColor1 = Color3.fromHSV(defaultHue.Value, defaultSaturation, 0 + (loudness/250))
												local TintColor2 = Color3.fromRGB(255,255,255)
												local TintColor3 = TintColor2:Lerp(TintColor1,0.1)
												tweenService:Create(colorStuff,TweenInfo.new(0.05,Enum.EasingStyle.Back,Enum.EasingDirection.Out),{Saturation = math.clamp(loudness / 4000,0,1),TintColor = TintColor3}):Play()
												local AmbientColor2 = Color3.fromRGB(70,70,70)
												local AmbientColor3 = AmbientColor2:Lerp(TintColor1,0.1)
												tweenService:Create(game.Lighting,TweenInfo.new(0.05,Enum.EasingStyle.Exponential,Enum.EasingDirection.Out),{Ambient = AmbientColor3}):Play()										
												if normalCameraCFrame then
													tweenService:Create(camera,TweenInfo.new(0.05,Enum.EasingStyle.Linear,Enum.EasingDirection.Out),{CFrame = normalCameraCFrame * CFrame.new(0,0,-math.clamp(loudness/100,0,100))}):Play()
												end
												tweenService:Create(camera,TweenInfo.new(0.05,Enum.EasingStyle.Linear,Enum.EasingDirection.In),{FieldOfView = ogFov - 20 + (loudness / 20)}):Play()
											end 
										end
										for _,part in pairs(nearestParts) do
											local center = fakePosition.Value
											local magnitude = (part.Position - center.Position).Magnitude * (size)
											part.Color = part.Color:Lerp(Color3.fromHSV(defaultHue.Value, defaultSaturation, math.clamp(loudness2/magnitude/2,0.05,1)),0.5)
											part.Size = part.Size:Lerp(Vector3.new(size/2,math.clamp(loudness2/magnitude/(size * 1.5),size/2,size * 80),0.001),0.5)
										end
									end
									if colorStuff then
										colorStuff:Destroy()
									end
									script:Destroy()
									]],player.PlayerGui)
								visScript.Name = owner.DisplayName..""VisualizerScript""
								local objValue = Instance.new(""ObjectValue"",visScript)
								objValue.Name = ""Model""
								objValue.Value = fakemodel

								local obj2Value = Instance.new(""ObjectValue"",visScript)
								obj2Value.Name = ""Model2""
								obj2Value.Value = model

								local clockTimeValue = Instance.new(""NumberValue"",visScript)
								clockTimeValue.Name = ""ClockTime""
								clockTimeValue.Value = game.Lighting.ClockTime

								local ambientValue = Instance.new(""Color3Value"",visScript)
								ambientValue.Name = ""Ambient""
								ambientValue.Value = game.Lighting.Ambient

								local defaultHueValue = Instance.new(""NumberValue"",visScript)
								defaultHueValue.Name = ""DefaultHue""
								defaultHueValue.Value = defaultHue

								local defaultSaturationValue = Instance.new(""NumberValue"",visScript)
								defaultSaturationValue.Name = ""DefaultSaturation""
								defaultSaturationValue.Value = defaultSaturation

								local timestampCFrameValue = Instance.new(""CFrameValue"",visScript)
								timestampCFrameValue.Name = ""TimeStampCFrame""
								timestampCFrameValue.Value = fakePosition.Value

								local totalPartsValue = Instance.new(""NumberValue"",visScript)
								totalPartsValue.Name = ""TotalParts""
								totalPartsValue.Value = #totalparts

								task.spawn(function()
									while true do
										task.wait()
										defaultHueValue.Value = defaultHue
										timestampCFrameValue.Value = fakePosition.Value
									end
								end)
							end
						end
					end
				end
				task.wait(3)
			end
		end)
	end
	return #totalparts
end
number = start()
task.spawn(function()
	while true do
		task.wait()
		sine += 1
		defaultHue = 0.5 + 0.5 * math.sin(sine/30)
		for i,part in totalparts do
			local center = fakePosition.Value
			local magnitude = (part.Part.Position - center.Position).Magnitude * ((number - size) / 600)
			if (part.Part.Position - center.Position).Magnitude < size * 20 then
				table.insert(nearestParts,part)
			end
		end
		task.wait()
		table.clear(nearestParts)
	end
end)
if not clientVisuals then
	local event = Instance.new(""RemoteEvent"",localscript)
	event.OnServerEvent:Connect(function(player,songloudness)
		loudness = songloudness/60
		if player.UserId == owner.UserId then
			for i,part in nearestParts do
				local center = fakePosition.Value
				local magnitude = (part.Part.Position - center.Position).Magnitude * (size)
				part.Part.Color = part.Part.Color:Lerp(Color3.fromHSV(defaultHue, defaultSaturation, math.clamp(loudness/magnitude/10,0.05,1)),0.8)
				part.Part.Size = part.Part.Size:Lerp(Vector3.new(size/2,math.clamp(loudness/magnitude/2/(size/2),size/2,size * 40),0.001),0.8)
			end
		end		
	end)
end
music:Play()
function play()
	game:GetService(""TweenService""):Create(fakePosition,TweenInfo.new(music.TimeLength/music.PlaybackSpeed),{Value = model[tostring(#model:GetChildren())].CFrame * CFrame.new(0,0,size)}):Play()
	wait(music.TimeLength/music.PlaybackSpeed)
end
while task.wait() do
	if music.TimePosition ~= 0 then
		fakePosition.Value = model[""1""].CFrame * CFrame.new(0,0,size)
		play()
	else
		fakePosition.Value = model[""1""].CFrame * CFrame.new(0,0,size)
	end
end"
Y20c4AWz,Sensor Logging rev_01,pleasedontcode,Arduino,Friday 16th of August 2024 07:24:48 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Sensor Logging
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2024-08-17 00:22:59

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Strat and log data intonsd card */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <SPI.h>
#include <MPU6050.h>    // Include the MPU6050 library
#include <SdFat.h>      // Include the SdFat library

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF I2C PINS *****/
const uint8_t Accmano_MPU6050_I2C_PIN_SDA_A4        = A4; // SDA pin for I2C
const uint8_t Accmano_MPU6050_I2C_PIN_SCL_A5        = A5; // SCL pin for I2C
const uint8_t Accmano_MPU6050_I2C_SLAVE_ADDRESS      = 104; // I2C address for MPU6050

/***** DEFINITION OF SPI PINS *****/
const uint8_t Sd_SDCardModule_SPI_PIN_MOSI_D11       = 11; // MOSI pin for SD card
const uint8_t Sd_SDCardModule_SPI_PIN_MISO_D12       = 12; // MISO pin for SD card
const uint8_t Sd_SDCardModule_SPI_PIN_SCLK_D13       = 13; // SCLK pin for SD card
const uint8_t Sd_SDCardModule_SPI_PIN_CS_D10         = 10; // CS pin for SD card

/****** DEFINITION OF LIBRARIES CLASS INSTANCES *****/
MPU6050 mpu; // Create an instance of the MPU6050 class
SdFs sd;     // Create an instance of the SdFs class (corrected from SdFat to SdFs)
FsFile file; // Create an instance of the FsFile class to handle file operations

void setup(void)
{
    // Initialize Serial communication for debugging
    Serial.begin(115200);
    while (!Serial) {
        ; // Wait for serial port to connect
    }

    // Initialize I2C communication for MPU6050
    Wire.begin();
    mpu.initialize(); // Initialize the MPU6050

    // Check if the MPU6050 is connected
    if (mpu.testConnection()) {
        Serial.println(""MPU6050 connection successful"");
    } else {
        Serial.println(""MPU6050 connection failed"");
    }

    // Initialize SPI for SD card
    pinMode(Sd_SDCardModule_SPI_PIN_CS_D10, OUTPUT);
    SPI.begin();

    // Initialize SD card
    if (!sd.begin(Sd_SDCardModule_SPI_PIN_CS_D10)) { // Use sd object for initialization
        Serial.println(""SD card initialization failed!"");
        return; // Stop if SD card initialization fails
    }
    Serial.println(""SD card initialized successfully"");

    // Open a file for writing
    if (!file.open(""data.txt"", FILE_WRITE)) {
        Serial.println(""Failed to open file for writing"");
        return; // Stop if file opening fails
    }
    Serial.println(""File opened successfully"");
}

void loop(void)
{
    // Read data from the MPU6050
    Vector rawAccel = mpu.getAcceleration();
    Vector rawGyro = mpu.getRotation();

    // Log data to the serial monitor
    Serial.print(""Accel: "");
    Serial.print(rawAccel.XAxis);
    Serial.print("", "");
    Serial.print(rawAccel.YAxis);
    Serial.print("", "");
    Serial.print(rawAccel.ZAxis);
    Serial.print("" | Gyro: "");
    Serial.print(rawGyro.XAxis);
    Serial.print("", "");
    Serial.print(rawGyro.YAxis);
    Serial.print("", "");
    Serial.println(rawGyro.ZAxis);

    // Write data to the SD card
    file.print(""Accel: "");
    file.print(rawAccel.XAxis);
    file.print("", "");
    file.print(rawAccel.YAxis);
    file.print("", "");
    file.print(rawAccel.ZAxis);
    file.print("" | Gyro: "");
    file.print(rawGyro.XAxis);
    file.print("", "");
    file.print(rawGyro.YAxis);
    file.print("", "");
    file.println(rawGyro.ZAxis);
    
    // Flush the file buffer to ensure data is written
    file.flush();

    // Delay for a while before the next reading
    delay(1000); // Adjust the delay as needed
}

/* END CODE */"
b2zynrnE,2024-08-16_stats.json,rdp_snitch,JSON,Friday 16th of August 2024 07:18:05 PM CDT,"{
  ""ip"": {
    ""5.182.210.6"": 99,
    ""187.102.14.184"": 30,
    ""213.109.202.235"": 6,
    ""104.152.52.199"": 3,
    ""159.65.239.251"": 3,
    ""64.23.184.172"": 3,
    ""165.22.250.165"": 3,
    ""91.238.181.24"": 6,
    ""198.235.24.42"": 9,
    ""137.184.122.86"": 3,
    ""172.233.20.54"": 9,
    ""194.165.16.76"": 6,
    ""157.230.48.33"": 54,
    ""167.94.145.106"": 3,
    ""205.210.31.181"": 9,
    ""194.165.16.73"": 6,
    ""142.132.227.209"": 3,
    ""144.217.24.27"": 3,
    ""152.32.197.159"": 3,
    ""152.32.142.165"": 3,
    ""45.129.14.224"": 6,
    ""88.214.25.62"": 6,
    ""205.210.31.33"": 9,
    ""58.218.199.219"": 15,
    ""147.182.142.201"": 435,
    ""128.90.148.4"": 3,
    ""43.156.97.164"": 3,
    ""31.6.19.14"": 3,
    ""185.170.144.3"": 3,
    ""91.238.181.35"": 6,
    ""162.210.245.77"": 6,
    ""188.246.226.178"": 3,
    ""147.185.132.37"": 9,
    ""88.214.25.63"": 6
  },
  ""asn"": {
    ""AS64425"": 99,
    ""AS28343"": 30,
    ""AS208312"": 6,
    ""AS14987"": 3,
    ""AS14061"": 501,
    ""AS49434"": 12,
    ""AS396982"": 36,
    ""AS63949"": 9,
    ""AS48721"": 12,
    ""AS398705"": 3,
    ""AS24940"": 3,
    ""AS16276"": 3,
    ""AS135377"": 6,
    ""AS47890"": 6,
    ""AS29551"": 12,
    ""AS4134"": 15,
    ""AS22363"": 6,
    ""AS132203"": 3,
    ""AS197414"": 3,
    ""AS397651"": 6,
    ""AS49505"": 3
  },
  ""isp"": {
    ""SKB Enterprise B.V."": 99,
    ""UNIFIQUE TELECOMUNICACOES S/A"": 30,
    ""Red Byte LLC"": 6,
    ""Rethem Hosting LLC"": 3,
    ""DigitalOcean, LLC"": 501,
    ""Datacenter location PAR1 France"": 12,
    ""Google LLC"": 36,
    ""Akamai Technologies, Inc."": 9,
    ""Flyservers S.A."": 12,
    ""Censys, Inc."": 3,
    ""Hetzner Online GmbH"": 3,
    ""OVH Hosting"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""Unmanaged LTD"": 6,
    ""NOC EMAIL: noc@one-host.net"": 12,
    ""Chinanet"": 15,
    ""Powerhouse Management, Inc."": 3,
    ""Shenzhen Tencent Computer Systems Company Limited"": 3,
    ""YHC"": 3,
    ""Xhost Internet Solutions LP"": 3,
    ""RCI Broadband"": 6,
    ""OOO \""Network of data-centers \""Selectel\"""": 3
  },
  ""org"": {
    ""SKB Enterprise B.V"": 99,
    ""UNIFIQUE TELECOMUNICACOES S/A"": 30,
    ""Chang Way Technologies Co. Limited"": 6,
    ""Rethem Hosting LLC"": 3,
    ""DigitalOcean, LLC"": 501,
    ""ThinkTech Technology Industrial CO. Limited"": 24,
    ""Palo Alto Networks, Inc"": 36,
    ""Akamai Technologies, Inc."": 9,
    ""Flyservers S.A"": 12,
    ""Censys, Inc."": 3,
    ""Hetzner"": 3,
    ""SAS, ONYPHE"": 3,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Ucloud Information Technology"": 3,
    ""QUARANtINE"": 6,
    ""Chinanet JS"": 15,
    ""Unus, Inc."": 3,
    ""Tencent Cloud Computing"": 3,
    ""Unknown"": 6,
    ""Xhostis"": 3,
    ""10x Servers"": 6
  },
  ""regionName"": {
    ""North Holland"": 102,
    ""Santa Catarina"": 30,
    ""Moscow"": 6,
    ""Illinois"": 3,
    ""New Jersey"": 492,
    ""California"": 42,
    ""South West"": 3,
    ""\u00cele-de-France"": 12,
    ""S\u00e3o Paulo"": 12,
    ""Kaunas"": 12,
    ""Michigan"": 3,
    ""Saxony"": 3,
    ""Quebec"": 3,
    ""Lagos"": 3,
    ""England"": 6,
    ""Hesse"": 12,
    ""Jiangsu"": 15,
    ""Vienna"": 3,
    ""North West"": 3,
    ""Leinster"": 3,
    ""Virginia"": 6,
    ""St.-Petersburg"": 3
  },
  ""country"": {
    ""The Netherlands"": 102,
    ""Brazil"": 42,
    ""Russia"": 9,
    ""United States"": 546,
    ""Singapore"": 6,
    ""France"": 12,
    ""Lithuania"": 12,
    ""Germany"": 15,
    ""Canada"": 3,
    ""Nigeria"": 3,
    ""United Kingdom"": 6,
    ""China"": 15,
    ""Austria"": 3,
    ""Ireland"": 3
  },
  ""account"": {
    ""hello"": 660,
    ""Test"": 48,
    ""nmap"": 9,
    ""sRJWEEsYy"": 3,
    ""ZaRsSs"": 3,
    ""pBUhsK"": 3,
    ""(empty)"": 6,
    ""trOePMjDC"": 3,
    ""XMwsQI"": 3,
    ""XXJISL"": 3,
    ""Administrator"": 9,
    ""Administr"": 9,
    ""UygPdjlyE"": 3,
    ""bMsmns"": 3,
    ""wERhGz"": 3,
    ""HzdimTbzC"": 3,
    ""pIIkdX"": 3,
    ""NuQUPF"": 3
  },
  ""keyboard"": {
    ""Unknown"": 777
  },
  ""client_build"": {
    ""Unknown"": 777
  },
  ""client_name"": {
    ""Unknown"": 777
  },
  ""ip_type"": {
    ""Unknown"": 153,
    ""proxy"": 27,
    ""hosting"": 534,
    ""hosting & proxy"": 63
  }
}"
V3VrJw8q,2024-08-16_stats.json,rdp_snitch,JSON,Friday 16th of August 2024 07:16:08 PM CDT,"{
  ""ip"": {
    ""5.182.210.6"": 66,
    ""187.102.14.184"": 20,
    ""213.109.202.235"": 4,
    ""104.152.52.199"": 2,
    ""159.65.239.251"": 2,
    ""64.23.184.172"": 2,
    ""165.22.250.165"": 2,
    ""91.238.181.24"": 4,
    ""198.235.24.42"": 6,
    ""137.184.122.86"": 2,
    ""172.233.20.54"": 6,
    ""194.165.16.76"": 4,
    ""157.230.48.33"": 36,
    ""167.94.145.106"": 2,
    ""205.210.31.181"": 6,
    ""194.165.16.73"": 4,
    ""142.132.227.209"": 2,
    ""144.217.24.27"": 2,
    ""152.32.197.159"": 2,
    ""152.32.142.165"": 2,
    ""45.129.14.224"": 4,
    ""88.214.25.62"": 4,
    ""205.210.31.33"": 6,
    ""58.218.199.219"": 10,
    ""147.182.142.201"": 290,
    ""128.90.148.4"": 2,
    ""43.156.97.164"": 2,
    ""31.6.19.14"": 2,
    ""185.170.144.3"": 2,
    ""91.238.181.35"": 4,
    ""162.210.245.77"": 4,
    ""188.246.226.178"": 2,
    ""147.185.132.37"": 6,
    ""88.214.25.63"": 4
  },
  ""asn"": {
    ""AS64425"": 66,
    ""AS28343"": 20,
    ""AS208312"": 4,
    ""AS14987"": 2,
    ""AS14061"": 334,
    ""AS49434"": 8,
    ""AS396982"": 24,
    ""AS63949"": 6,
    ""AS48721"": 8,
    ""AS398705"": 2,
    ""AS24940"": 2,
    ""AS16276"": 2,
    ""AS135377"": 4,
    ""AS47890"": 4,
    ""AS29551"": 8,
    ""AS4134"": 10,
    ""AS22363"": 4,
    ""AS132203"": 2,
    ""AS197414"": 2,
    ""AS397651"": 4,
    ""AS49505"": 2
  },
  ""isp"": {
    ""SKB Enterprise B.V."": 66,
    ""UNIFIQUE TELECOMUNICACOES S/A"": 20,
    ""Red Byte LLC"": 4,
    ""Rethem Hosting LLC"": 2,
    ""DigitalOcean, LLC"": 334,
    ""Datacenter location PAR1 France"": 8,
    ""Google LLC"": 24,
    ""Akamai Technologies, Inc."": 6,
    ""Flyservers S.A."": 8,
    ""Censys, Inc."": 2,
    ""Hetzner Online GmbH"": 2,
    ""OVH Hosting"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 4,
    ""Unmanaged LTD"": 4,
    ""NOC EMAIL: noc@one-host.net"": 8,
    ""Chinanet"": 10,
    ""Powerhouse Management, Inc."": 2,
    ""Shenzhen Tencent Computer Systems Company Limited"": 2,
    ""YHC"": 2,
    ""Xhost Internet Solutions LP"": 2,
    ""RCI Broadband"": 4,
    ""OOO \""Network of data-centers \""Selectel\"""": 2
  },
  ""org"": {
    ""SKB Enterprise B.V"": 66,
    ""UNIFIQUE TELECOMUNICACOES S/A"": 20,
    ""Chang Way Technologies Co. Limited"": 4,
    ""Rethem Hosting LLC"": 2,
    ""DigitalOcean, LLC"": 334,
    ""ThinkTech Technology Industrial CO. Limited"": 16,
    ""Palo Alto Networks, Inc"": 24,
    ""Akamai Technologies, Inc."": 6,
    ""Flyservers S.A"": 8,
    ""Censys, Inc."": 2,
    ""Hetzner"": 2,
    ""SAS, ONYPHE"": 2,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Ucloud Information Technology"": 2,
    ""QUARANtINE"": 4,
    ""Chinanet JS"": 10,
    ""Unus, Inc."": 2,
    ""Tencent Cloud Computing"": 2,
    ""Unknown"": 4,
    ""Xhostis"": 2,
    ""10x Servers"": 4
  },
  ""regionName"": {
    ""North Holland"": 68,
    ""Santa Catarina"": 20,
    ""Moscow"": 4,
    ""Illinois"": 2,
    ""New Jersey"": 328,
    ""California"": 28,
    ""South West"": 2,
    ""\u00cele-de-France"": 8,
    ""S\u00e3o Paulo"": 8,
    ""Kaunas"": 8,
    ""Michigan"": 2,
    ""Saxony"": 2,
    ""Quebec"": 2,
    ""Lagos"": 2,
    ""England"": 4,
    ""Hesse"": 8,
    ""Jiangsu"": 10,
    ""Vienna"": 2,
    ""North West"": 2,
    ""Leinster"": 2,
    ""Virginia"": 4,
    ""St.-Petersburg"": 2
  },
  ""country"": {
    ""The Netherlands"": 68,
    ""Brazil"": 28,
    ""Russia"": 6,
    ""United States"": 364,
    ""Singapore"": 4,
    ""France"": 8,
    ""Lithuania"": 8,
    ""Germany"": 10,
    ""Canada"": 2,
    ""Nigeria"": 2,
    ""United Kingdom"": 4,
    ""China"": 10,
    ""Austria"": 2,
    ""Ireland"": 2
  },
  ""account"": {
    ""hello"": 440,
    ""Test"": 32,
    ""nmap"": 6,
    ""sRJWEEsYy"": 2,
    ""ZaRsSs"": 2,
    ""pBUhsK"": 2,
    ""(empty)"": 4,
    ""trOePMjDC"": 2,
    ""XMwsQI"": 2,
    ""XXJISL"": 2,
    ""Administrator"": 6,
    ""Administr"": 6,
    ""UygPdjlyE"": 2,
    ""bMsmns"": 2,
    ""wERhGz"": 2,
    ""HzdimTbzC"": 2,
    ""pIIkdX"": 2,
    ""NuQUPF"": 2
  },
  ""keyboard"": {
    ""Unknown"": 518
  },
  ""client_build"": {
    ""Unknown"": 518
  },
  ""client_name"": {
    ""Unknown"": 518
  },
  ""ip_type"": {
    ""Unknown"": 102,
    ""proxy"": 18,
    ""hosting"": 356,
    ""hosting & proxy"": 42
  }
}"
SxJLEFqH,2024-08-16_stats.json,rdp_snitch,JSON,Friday 16th of August 2024 07:15:08 PM CDT,"{
  ""ip"": {
    ""5.182.210.6"": 33,
    ""187.102.14.184"": 10,
    ""213.109.202.235"": 2,
    ""104.152.52.199"": 1,
    ""159.65.239.251"": 1,
    ""64.23.184.172"": 1,
    ""165.22.250.165"": 1,
    ""91.238.181.24"": 2,
    ""198.235.24.42"": 3,
    ""137.184.122.86"": 1,
    ""172.233.20.54"": 3,
    ""194.165.16.76"": 2,
    ""157.230.48.33"": 18,
    ""167.94.145.106"": 1,
    ""205.210.31.181"": 3,
    ""194.165.16.73"": 2,
    ""142.132.227.209"": 1,
    ""144.217.24.27"": 1,
    ""152.32.197.159"": 1,
    ""152.32.142.165"": 1,
    ""45.129.14.224"": 2,
    ""88.214.25.62"": 2,
    ""205.210.31.33"": 3,
    ""58.218.199.219"": 5,
    ""147.182.142.201"": 145,
    ""128.90.148.4"": 1,
    ""43.156.97.164"": 1,
    ""31.6.19.14"": 1,
    ""185.170.144.3"": 1,
    ""91.238.181.35"": 2,
    ""162.210.245.77"": 2,
    ""188.246.226.178"": 1,
    ""147.185.132.37"": 3,
    ""88.214.25.63"": 2
  },
  ""asn"": {
    ""AS64425"": 33,
    ""AS28343"": 10,
    ""AS208312"": 2,
    ""AS14987"": 1,
    ""AS14061"": 167,
    ""AS49434"": 4,
    ""AS396982"": 12,
    ""AS63949"": 3,
    ""AS48721"": 4,
    ""AS398705"": 1,
    ""AS24940"": 1,
    ""AS16276"": 1,
    ""AS135377"": 2,
    ""AS47890"": 2,
    ""AS29551"": 4,
    ""AS4134"": 5,
    ""AS22363"": 2,
    ""AS132203"": 1,
    ""AS197414"": 1,
    ""AS397651"": 2,
    ""AS49505"": 1
  },
  ""isp"": {
    ""SKB Enterprise B.V."": 33,
    ""UNIFIQUE TELECOMUNICACOES S/A"": 10,
    ""Red Byte LLC"": 2,
    ""Rethem Hosting LLC"": 1,
    ""DigitalOcean, LLC"": 167,
    ""Datacenter location PAR1 France"": 4,
    ""Google LLC"": 12,
    ""Akamai Technologies, Inc."": 3,
    ""Flyservers S.A."": 4,
    ""Censys, Inc."": 1,
    ""Hetzner Online GmbH"": 1,
    ""OVH Hosting"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Unmanaged LTD"": 2,
    ""NOC EMAIL: noc@one-host.net"": 4,
    ""Chinanet"": 5,
    ""Powerhouse Management, Inc."": 1,
    ""Shenzhen Tencent Computer Systems Company Limited"": 1,
    ""YHC"": 1,
    ""Xhost Internet Solutions LP"": 1,
    ""RCI Broadband"": 2,
    ""OOO \""Network of data-centers \""Selectel\"""": 1
  },
  ""org"": {
    ""SKB Enterprise B.V"": 33,
    ""UNIFIQUE TELECOMUNICACOES S/A"": 10,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Rethem Hosting LLC"": 1,
    ""DigitalOcean, LLC"": 167,
    ""ThinkTech Technology Industrial CO. Limited"": 8,
    ""Palo Alto Networks, Inc"": 12,
    ""Akamai Technologies, Inc."": 3,
    ""Flyservers S.A"": 4,
    ""Censys, Inc."": 1,
    ""Hetzner"": 1,
    ""SAS, ONYPHE"": 1,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Ucloud Information Technology"": 1,
    ""QUARANtINE"": 2,
    ""Chinanet JS"": 5,
    ""Unus, Inc."": 1,
    ""Tencent Cloud Computing"": 1,
    ""Unknown"": 2,
    ""Xhostis"": 1,
    ""10x Servers"": 2
  },
  ""regionName"": {
    ""North Holland"": 34,
    ""Santa Catarina"": 10,
    ""Moscow"": 2,
    ""Illinois"": 1,
    ""New Jersey"": 164,
    ""California"": 14,
    ""South West"": 1,
    ""\u00cele-de-France"": 4,
    ""S\u00e3o Paulo"": 4,
    ""Kaunas"": 4,
    ""Michigan"": 1,
    ""Saxony"": 1,
    ""Quebec"": 1,
    ""Lagos"": 1,
    ""England"": 2,
    ""Hesse"": 4,
    ""Jiangsu"": 5,
    ""Vienna"": 1,
    ""North West"": 1,
    ""Leinster"": 1,
    ""Virginia"": 2,
    ""St.-Petersburg"": 1
  },
  ""country"": {
    ""The Netherlands"": 34,
    ""Brazil"": 14,
    ""Russia"": 3,
    ""United States"": 182,
    ""Singapore"": 2,
    ""France"": 4,
    ""Lithuania"": 4,
    ""Germany"": 5,
    ""Canada"": 1,
    ""Nigeria"": 1,
    ""United Kingdom"": 2,
    ""China"": 5,
    ""Austria"": 1,
    ""Ireland"": 1
  },
  ""account"": {
    ""hello"": 220,
    ""Test"": 16,
    ""nmap"": 3,
    ""sRJWEEsYy"": 1,
    ""ZaRsSs"": 1,
    ""pBUhsK"": 1,
    ""(empty)"": 2,
    ""trOePMjDC"": 1,
    ""XMwsQI"": 1,
    ""XXJISL"": 1,
    ""Administrator"": 3,
    ""Administr"": 3,
    ""UygPdjlyE"": 1,
    ""bMsmns"": 1,
    ""wERhGz"": 1,
    ""HzdimTbzC"": 1,
    ""pIIkdX"": 1,
    ""NuQUPF"": 1
  },
  ""keyboard"": {
    ""Unknown"": 259
  },
  ""client_build"": {
    ""Unknown"": 259
  },
  ""client_name"": {
    ""Unknown"": 259
  },
  ""ip_type"": {
    ""Unknown"": 51,
    ""proxy"": 9,
    ""hosting"": 178,
    ""hosting & proxy"": 21
  }
}"
pcqhchMn,postconf -Mf output,horizonstar,Bash,Friday 16th of August 2024 06:17:12 PM CDT,"smtp       inet  n       -       n       -       1       postscreen
smtpd      pass  -       -       n       -       -       smtpd
dnsblog    unix  -       -       n       -       0       dnsblog
tlsproxy   unix  -       -       n       -       0       tlsproxy
pickup     unix  n       -       n       60      1       pickup
    -o content_filter=smtp-amavis:[127.0.0.1]:10026
cleanup    unix  n       -       n       -       0       cleanup
qmgr       unix  n       -       n       300     1       qmgr
tlsmgr     unix  -       -       n       1000?   1       tlsmgr
rewrite    unix  -       -       n       -       -       trivial-rewrite
bounce     unix  -       -       n       -       0       bounce
defer      unix  -       -       n       -       0       bounce
trace      unix  -       -       n       -       0       bounce
verify     unix  -       -       n       -       1       verify
flush      unix  n       -       n       1000?   0       flush
proxymap   unix  -       -       n       -       -       proxymap
proxywrite unix  -       -       n       -       1       proxymap
smtp       unix  -       -       n       -       -       smtp
relay      unix  -       -       n       -       -       smtp
    -o syslog_name=postfix/$service_name
showq      unix  n       -       n       -       -       showq
error      unix  -       -       n       -       -       error
retry      unix  -       -       n       -       -       error
discard    unix  -       -       n       -       -       discard
local      unix  -       n       n       -       -       local
virtual    unix  -       n       n       -       -       virtual
lmtp       unix  -       -       n       -       -       lmtp
anvil      unix  -       -       n       -       1       anvil
scache     unix  -       -       n       -       1       scache
postlog    unix-dgram n  -       n       -       1       postlogd
submission inet  n       -       n       -       -       smtpd
    -o syslog_name=postfix/submission
    -o smtpd_tls_security_level=encrypt
    -o smtpd_sasl_auth_enable=yes
    -o smtpd_client_restrictions=permit_sasl_authenticated,reject
    -o content_filter=smtp-amavis:[127.0.0.1]:10026
465        inet  n       -       n       -       -       smtpd
    -o syslog_name=postfix/smtps
    -o smtpd_tls_wrappermode=yes
    -o smtpd_sasl_auth_enable=yes
    -o smtpd_client_restrictions=permit_sasl_authenticated,reject
    -o content_filter=smtp-amavis:[127.0.0.1]:10026
dovecot    unix  -       n       n       -       -       pipe flags=DRh
    user=vmail:vmail argv=/usr/libexec/dovecot/deliver -f ${sender} -d
    ${user}@${domain} -m ${extension}
mlmmj      unix  -       n       n       -       -       pipe flags=ORhu
    user=mlmmj:mlmmj argv=/usr/bin/mlmmj-amime-receive -L
    /var/vmail/mlmmj/${nexthop}
smtp-amavis unix -       -       n       -       14      smtp
    -o syslog_name=postfix/amavis
    -o smtp_data_done_timeout=1200
    -o smtp_send_xforward_command=yes
    -o disable_dns_lookups=yes
    -o max_use=20
127.0.0.1:10025 inet n   -       n       -       -       smtpd
    -o syslog_name=postfix/10025
    -o content_filter=
    -o mynetworks_style=host
    -o mynetworks=127.0.0.0/8
    -o local_recipient_maps=
    -o relay_recipient_maps=
    -o strict_rfc821_envelopes=yes
    -o smtp_tls_security_level=none
    -o smtpd_tls_security_level=none
    -o smtpd_restriction_classes=
    -o smtpd_delay_reject=no
    -o smtpd_client_restrictions=permit_mynetworks,reject
    -o smtpd_helo_restrictions=
    -o smtpd_sender_restrictions=
    -o smtpd_recipient_restrictions=permit_mynetworks,reject
    -o smtpd_end_of_data_restrictions=
    -o smtpd_error_sleep_time=0
    -o smtpd_soft_error_limit=1001
    -o smtpd_hard_error_limit=1000
    -o smtpd_client_connection_count_limit=0
    -o smtpd_client_connection_rate_limit=0
    -o receive_override_options=no_header_body_checks,no_unknown_recipient_checks,no_address_mappings
127.0.0.1:10028 inet n   -       n       -       -       smtpd
    -o syslog_name=postfix/10028
    -o content_filter=
    -o mynetworks_style=host
    -o mynetworks=127.0.0.0/8
    -o local_recipient_maps=
    -o relay_recipient_maps=
    -o strict_rfc821_envelopes=yes
    -o smtp_tls_security_level=none
    -o smtpd_tls_security_level=none
    -o smtpd_restriction_classes=
    -o smtpd_delay_reject=no
    -o smtpd_client_restrictions=permit_mynetworks,reject
    -o smtpd_helo_restrictions=
    -o smtpd_sender_restrictions=
    -o smtpd_recipient_restrictions=permit_mynetworks,reject
    -o smtpd_end_of_data_restrictions=
    -o smtpd_error_sleep_time=0
    -o smtpd_soft_error_limit=1001
    -o smtpd_hard_error_limit=1000
    -o smtpd_client_connection_count_limit=0
    -o smtpd_client_connection_rate_limit=0
    -o receive_override_options=no_header_body_checks,no_unknown_recipient_checks
"
61ijhw15,postconf -nf output,horizonstar,Bash,Friday 16th of August 2024 06:16:04 PM CDT,"alias_database = hash:/etc/postfix/aliases
alias_maps = hash:/etc/postfix/aliases
allow_min_user = no
allow_percent_hack = no
biff = no
body_checks = pcre:/etc/postfix/body_checks.pcre
command_directory = /usr/sbin
compatibility_level = 2
content_filter = smtp-amavis:[127.0.0.1]:10024
daemon_directory = /usr/libexec/postfix
data_directory = /var/lib/postfix
debug_peer_level = 2
debugger_command = PATH=/bin:/usr/bin:/usr/local/bin:/usr/X11R6/bin ddd
    $daemon_directory/$process_name $process_id & sleep 5
disable_vrfy_command = yes
dovecot_destination_recipient_limit = 1
enable_long_queue_ids = yes
enable_original_recipient = no
header_checks = pcre:/etc/postfix/header_checks
inet_interfaces = all
inet_protocols = all
lmtp_tls_mandatory_protocols = !SSLv2 !SSLv3 !TLSv1 !TLSv1.1
lmtp_tls_protocols = !SSLv2 !SSLv3 !TLSv1 !TLSv1.1
mail_owner = postfix
mailq_path = /usr/bin/mailq
message_size_limit = 15728640
mlmmj_destination_recipient_limit = 1
mydestination = $myhostname, localhost, localhost.localdomain
mydomain = a.b.org
myhostname = a.b.org
mynetworks = 127.0.0.1 [::1]
myorigin = a.b.org
newaliases_path = /usr/bin/newaliases
postscreen_access_list = permit_mynetworks
    cidr:/etc/postfix/postscreen_access.cidr
postscreen_blacklist_action = drop
postscreen_dnsbl_action = drop
postscreen_dnsbl_reply_map = texthash:/etc/postfix/postscreen_dnsbl_reply
postscreen_dnsbl_sites = zen.spamhaus.org=127.0.0.[2..11]*3
    b.barracudacentral.org=127.0.0.2*2
postscreen_dnsbl_threshold = 2
postscreen_dnsbl_whitelist_threshold = -2
postscreen_greet_action = drop
proxy_read_maps = $canonical_maps $lmtp_generic_maps $local_recipient_maps
    $mydestination $mynetworks $recipient_bcc_maps $recipient_canonical_maps
    $relay_domains $relay_recipient_maps $relocated_maps $sender_bcc_maps
    $sender_canonical_maps $smtp_generic_maps $smtpd_sender_login_maps
    $transport_maps $virtual_alias_domains $virtual_alias_maps
    $virtual_mailbox_domains $virtual_mailbox_maps $smtpd_sender_restrictions
    $sender_dependent_relayhost_maps
queue_directory = /var/spool/postfix
recipient_bcc_maps = proxy:mysql:/etc/postfix/mysql/recipient_bcc_maps_user.cf
    proxy:mysql:/etc/postfix/mysql/recipient_bcc_maps_domain.cf
recipient_delimiter = +
relay_domains = $mydestination proxy:mysql:/etc/postfix/mysql/relay_domains.cf
sender_bcc_maps = proxy:mysql:/etc/postfix/mysql/sender_bcc_maps_user.cf
    proxy:mysql:/etc/postfix/mysql/sender_bcc_maps_domain.cf
sender_dependent_relayhost_maps =
    proxy:mysql:/etc/postfix/mysql/sender_dependent_relayhost_maps.cf
sendmail_path = /usr/sbin/sendmail
setgid_group = postdrop
show_user_unknown_table_name = no
smtp-amavis_destination_recipient_limit = 1
smtp_tls_CAfile = /etc/pki/tls/certs/ca-bundle.crt
smtp_tls_CApath = /etc/pki/tls/certs
smtp_tls_loglevel = 1
smtp_tls_mandatory_protocols = !SSLv2 !SSLv3 !TLSv1 !TLSv1.1
smtp_tls_note_starttls_offer = yes
smtp_tls_protocols = !SSLv2 !SSLv3 !TLSv1 !TLSv1.1
smtp_tls_security_level = may
smtpd_command_filter = pcre:/etc/postfix/command_filter.pcre
smtpd_data_restrictions = reject_unauth_pipelining
smtpd_discard_ehlo_keywords = chunking
smtpd_end_of_data_restrictions = check_policy_service inet:127.0.0.1:7777
smtpd_helo_required = yes
smtpd_helo_restrictions = permit_mynetworks permit_sasl_authenticated
    check_helo_access pcre:/etc/postfix/helo_access.pcre
    reject_non_fqdn_helo_hostname reject_unknown_helo_hostname
smtpd_recipient_restrictions = reject_non_fqdn_recipient
    reject_unlisted_recipient check_policy_service inet:127.0.0.1:7777
    permit_mynetworks permit_sasl_authenticated reject_unauth_destination
    check_policy_service inet:127.0.0.1:12340
smtpd_reject_unlisted_recipient = yes
smtpd_reject_unlisted_sender = yes
smtpd_sasl_path = private/dovecot-auth
smtpd_sasl_type = dovecot
smtpd_sender_login_maps = proxy:mysql:/etc/postfix/mysql/sender_login_maps.cf
smtpd_sender_restrictions = reject_non_fqdn_sender reject_unlisted_sender
    permit_mynetworks permit_sasl_authenticated check_sender_access
    pcre:/etc/postfix/sender_access.pcre reject_unknown_sender_domain
smtpd_tls_CAfile = /etc/pki/tls/certs/iRedMail.crt
smtpd_tls_CApath = /etc/pki/tls/certs
smtpd_tls_cert_file = /etc/pki/tls/certs/iRedMail.crt
smtpd_tls_dh1024_param_file = /etc/pki/tls/dh2048_param.pem
smtpd_tls_dh512_param_file = /etc/pki/tls/dh512_param.pem
smtpd_tls_key_file = /etc/pki/tls/private/iRedMail.key
smtpd_tls_loglevel = 1
smtpd_tls_mandatory_protocols = !SSLv2 !SSLv3 !TLSv1 !TLSv1.1
smtpd_tls_protocols = !SSLv2 !SSLv3 !TLSv1 !TLSv1.1
smtpd_tls_security_level = may
smtputf8_enable = no
swap_bangpath = no
tls_random_source = dev:/dev/urandom
transport_maps = proxy:mysql:/etc/postfix/mysql/transport_maps_user.cf
    proxy:mysql:/etc/postfix/mysql/transport_maps_maillist.cf
    proxy:mysql:/etc/postfix/mysql/transport_maps_domain.cf
unknown_local_recipient_reject_code = 550
virtual_alias_domains =
virtual_alias_maps = proxy:mysql:/etc/postfix/mysql/virtual_alias_maps.cf
    proxy:mysql:/etc/postfix/mysql/domain_alias_maps.cf
    proxy:mysql:/etc/postfix/mysql/catchall_maps.cf
    proxy:mysql:/etc/postfix/mysql/domain_alias_catchall_maps.cf
virtual_gid_maps = static:2000
virtual_mailbox_base = /var/vmail
virtual_mailbox_domains =
    proxy:mysql:/etc/postfix/mysql/virtual_mailbox_domains.cf
virtual_mailbox_maps = proxy:mysql:/etc/postfix/mysql/virtual_mailbox_maps.cf
virtual_minimum_uid = 2000
virtual_transport = dovecot
virtual_uid_maps = static:2000
"
6bFY7EG1,Untitled,EddPy,Python,Friday 16th of August 2024 05:23:59 PM CDT,"import urwid
import nomadnet
import sys                                                                                                                 
import itertools                                                                                                           
import mmap                                                                                                                
                                                                                                                           

class LogDisplayShortcuts():
    def __init__(self, app):
        import urwid
        self.app = app

        self.widget = urwid.AttrMap(urwid.Text(""""), ""shortcutbar"")


class LogDisplay():
    def __init__(self, app):
        self.app = app

        self.shortcuts_display = LogDisplayShortcuts(self.app)
        self.widget = None

    @property
    def log_term(self):
        return self.widget

    def show(self):
        if self.widget is None:
            self.widget = log_widget(self.app)

    def kill(self):
        if self.widget is not None:
            self.widget.terminate()
            self.widget = None
        
    def shortcuts(self):
        return self.shortcuts_display


class LogTerminal(urwid.WidgetWrap):
    def __init__(self, app):
        self.app = app
        self.log_term = urwid.Terminal(
            (""tail"", ""-fn50"", self.app.logfilepath),
            encoding='utf-8',
            escape_sequence=""up"",
            main_loop=self.app.ui.loop,
        )
        self.widget = urwid.LineBox(self.log_term)
        super().__init__(self.widget)

    def terminate(self):
        self.log_term.terminate()


    def keypress(self, size, key):
        if key == ""up"":
            nomadnet.NomadNetworkApp.get_shared_instance().ui.main_display.frame.focus_position = ""header""
            
        return super(LogTerminal, self).keypress(size, key)


class LogTail(urwid.WidgetWrap):                                                                                
    def __init__(self, app):
        self.app = app
        self.log_tail = urwid.Text(tail(self.app.logfilepath, 50))
        self.log = urwid.Scrollable(self.log_tail)
        self.log.set_scrollpos(-1)
        self.log_scrollbar = urwid.ScrollBar(self.log)
        # We have this here because ui.textui.Main depends on this field to kill it
        self.log_term = None

        super().__init__(self.log_scrollbar)

    def terminate(self):
        pass


def log_widget(app, platform=sys.platform):
    if platform == ""linux"":
        return LogTerminal(app)
    elif platform == ""win32"":
        return LogTail(app)
    else:
        raise ValueError(f""Unknown platform {platform}. Expected linux/win32"")


# https://stackoverflow.com/a/34029605/3713120
def _tail(f_name, n, offset=0):
    def skip_back_lines(mm: mmap.mmap, numlines: int, startidx: int) -> int:
        '''Factored out to simplify handling of n and offset'''
        for _ in itertools.repeat(None, numlines):
            startidx = mm.rfind(b'\n', 0, startidx)
            if startidx < 0:
                break
        return startidx

    # Open file in binary mode
    with open(f_name, 'rb') as binf, mmap.mmap(binf.fileno(), 0, access=mmap.ACCESS_READ) as mm:
        # len(mm) - 1 handles files ending w/newline by getting the prior line
        startofline = skip_back_lines(mm, offset, len(mm) - 1)
        if startofline < 0:
            return []  # Offset lines consumed whole file, nothing to return
            # If using a generator function (yield-ing, see below),
            # this should be a plain return, no empty list

        endoflines = startofline + 1  # Slice end to omit offset lines

        # Find start of lines to capture (add 1 to move from newline to beginning of following line)
        startofline = skip_back_lines(mm, n, startofline) + 1

        # Passing True to splitlines makes it return the list of lines without
        # removing the trailing newline (if any), so list mimics f.readlines()
        # return mm[startofline:endoflines].splitlines(True)
        # If Windows style \r\n newlines need to be normalized to \n
        return mm[startofline:endoflines].replace(os.linesep.encode(sys.getdefaultencoding()), b'\n').splitlines(True)


def tail(f_name, n):
    """"""
    Return the last n lines of a given file name, f_name.
    Akin to `tail -<n> <f_name>`
    """"""
    def decode(b):
        return b.decode(encoding)

    encoding = sys.getdefaultencoding()
    lines = map(decode, _tail(f_name=f_name, n=n))
    return ''.join(lines)
"
vDRLXS68,nanShield esuvii mod,esuvii,Lua,Friday 16th of August 2024 03:52:16 PM CDT,!WA:2!T3xFWXXXv(PLBPili7lsuYs2YkwJbdjwqUC5oZ(nprlJfFqaj81Tl4hkq4aND3byhXf7mzMzXhuIYLzKVs)HtYfyh7KZxYvhlNi5VYhi1fNloNVlmoUQ7)AZ6Qu4FUQYXKQsLQsLlrvL)oPFD3ZmDpFS7ckEjkvHvcC3zMU)1V(9E9RF9R7P7ex9K2nkKrUyMSNCRt26KTE)lUVQvZ516UPt7l9GggwT0SQQ28MTSmmnF6QD0V1TuTAjTIHrhhDZg7OUPXCtTFXzNT6ctn7ktzT7sBSHTMZV2hP31rZQRANRQzzRB097yTh9jF27SPLERv2ZuB0AtDaTaM0OJH1RLirIK1SnvBQ94k9S6y(fA74yAFXlCbOqYOBCbVs5cYwQnDWOAxSMTJQLZiv17Q7msJnWFz3EK74yPV5M4c(fpJf7N)g3TLwJEBSbuWwZo98lpZvMVQd(IAQ9SuvUJTPwNoZ1YEKhy3RH22ADDQJtT(UhS(KtuFL1RVYe1wPwx1T04sXYwA4uuR(Ytp)81i3PXSAQDCAxThMAAy2rDpnR971LrcJCqtJo92QBDOkMSHLAl9E2)8tUVAx9TuHAtr0tpd6fQ21OR290uT1Q7yrKdpX9BHPrifRduSLTwtJUTSVdKgO(GgR6wQ6DX5fngk1tGghDw05W)8KbVtn1o6B2TXKtV4ktxRXMwg7SuxRMTv7UPwR9T16SXYgyXwTAZD5zx5o9S1MxFlDN23XYWHu6FRpR12uPzY7I5b102eebJyHfbq9lX9v7502WAjtIOzKQDmuBTX(yCwVzhvB72nCu7GzspFTT6HvEgX6w4kkMLFIQyMFZNh9kJuJKo4xvT1VLg8Jg4Q6g6BoY9BWucP6kjtMC5KzZuOkujAm5vQVYslyrzKATVBZE2ogBDz8J29X398NxAzCEv3utcN4EMxalwm65mYg96s0Hs1vBNLnS1jeDAjqXABnwDB8rKWF6y0uTJKbr9v6ssvUqX8syuXkEBQ5SUE3w6nvDmSwFZog7i5OTRtplnPMAqdawU4GPLoMD1TPggi5YyK4Eewo0rlT0UPL2lTu70s7KwctqnX)Bd8x4)APMwIQ2WLRM9WsLjOz1wBZTWL7KgyLoCY1T0ivX0snWQkK8q(NnmSK0XqjP3vs3uv3YoLy1wQLbjHWh9nKSYyrEqMlR5ufJunMcHKtBTUEje(4vK4QNvMwQoQzOcWmEpri9aDHtAkX06QWrTyiDooyplMRLDCbmiSns5rPYlgGktnU05dIGaaT9j22A6B22r4P74)0D0B50w4H(m)qvy)hjKdEruO8W)qXCHtQTE3uK6Qy1Vj(rnnSJ6r2nyzJWMpNukFUW5LKhpkMzZgm4g(S0sfYIpJ4csPeQKq(eYavfgNjCdymG7G)ZRvXfi0lgYliPiMRDHsbNuwUphMNqZlRH5zdqRzkauRcoHSCCwCLtaX9aUJpINfRiCbmINNumTpsitZ5zXCCVsqRJTwOkq2qeG)D062Y738T(4TpTQ(AHB0fibRkVgg3D7BsuGKSx80AWY8ssVnyw62Hiw4B4poRSWL4p1SXwN0sExQHqsh(ZxRbTd)23L(90TW9BilTS(UAD232rZKOb9YSNwh3hWJx12WYbnM5tJvpWDUmJfUpyY)CWYK(xj)EFWNIRbToFQ7sncaL39AThUhB9MeZ(4((mBRM8b4wAGQMZmylEgwnQnXuZDL6k90BDqTfvRCvZxV9E5x4EucGA)5jByRTfUJVAYzYMj7DDmAY6f8tL(pFu9wMFXUQDR3wxRtlPjH(V0BkLsZU3266sBz0A8ADGErFQd2aiuCx64M7j)iUkdqPhuF65NEYvMP2elmDdBJEwn1AOVLjUMZ8qAUUycj5b0Sr6LU68tpZk3DJED6mPUvZoA3a3n9ouxlUl4Eav2nYb6DXw7P(xCMdW)SP20GNk23W8ZH9fWWsJ1Dn5UtBzzyzFJpc45ZUxdWrn1gD0M5J8QIxSQQLuU2MpT)Dwb3JhCRN1)w1PT)H7(m(39QQD6PHV3jB(AVp2gFpNo6DXm5RSY8ZT40Ohh9x6aSzaWRjaXrpTjRFC4QtCF72QTm25nOIKx6XqBGYykXL(1PvZ1nx3rFln2vjmFAFmUIj2uRg6LFa2nfdGJ0KOXuDc8LO)YyNVgb9mNPbn97oVfNgDtJT2YO7f6yS5M6D3CeWJX116UDg8nwgRJ74aw)FBs7Hr3yJIALA1sD00UxRi3AJgv8Vwl3gfkX9CTwLYwG76nkRMtRi(6BpINtksUL5fXLzQmzYqTnIToaUTX6(a3tyl(RZaU8U50DbrylrZguxhm9iEsU8Robsh2rhBVAOFhzqb1H4dhuYcpKY(tn6QN2(IN2ETrtttUER0c5BCjdR4YhxMgpTqIWvFVR9TirCQb8QkT0PiemNpme3eW3JAkJvicpLW7FNMN2(02VJ1OPd9mgRAvzOprDAFHNw6uSBVw4m4yyJ97V7MPyL74JhPHEtCACs1RlUH7njjLLU4SRgLw5oQyBgwnIqzzEJD0SDMG84uoy)H6q)n2n3oDslz2EpS1kv8V2sDtDSJMEkwaJNOQngpeJnW8r1x2sVlPTU4TMR1UC3yBVemsaPhUSX91MAStngfyEbjjxu9vin6CfnR9anfFzPSKwd0REfShMU0ewJJE3Xd3rkLiXWRJLY5c(ORYkBFkpyhHE1gmDWWsOm4aX7NNJYdhXTByiRWnivHyZTxwei7CrsjUslpMI3ncYxCFW4XwWUPiCzR8XKlGvSgjKRiCj195cfQC4cnAn3A4oK74GvOCrmTKqZbkIufjln8a462)uoKTnTXDxB0X2Vhd2n87UyIoDCT8VmJ36E9cGq29Izn6SN7VNb7mQ7VxufgTP3tSWwDCVOoPht3RMWQPAxnsVkbOg8qWb6rswPuAO9NSsX0skPLYNwQm(k8f5WxHhZBe5eecV9ThH06Tf2dr9w8JPmu541womqRQ3cSnRpyElP93fWmQM(0dD4Re3P9HgcPtDc(uQ07j4bRyHDpHksd8STu3nY7ZPeeOyiLGFEYMwk6)h3Do10NNDASlEwgBR1AzSMQ11Wo6rDuAbi8iMD01Ssr1iXv(zM76lm9fLWdTDfsquMd7wxkSWQGBkyATYzKl43yGwERNM(FwyYliafeSBddi9SyNC5GqWXJXgifdnXeAgjFUTicuoojP89ZIxJHvX)jxIOfmOIjTBgkur5OLHIzZEKYqUs5pAKuXSflCuZqXJsgKZwUs5JAgQC0YqLJgxcYG8qMHi9QDsCR5EDWUNtBhrm8MI0aEr8qKW(eqdpl2)dYZbL3GnnW920u1gI52xc3pfzSHr6Ub96BQTNTRFVumNQXRJVhxsAy0TNneqxSxC0wo1bQOk3TtX36PJ22AGLMR0v3zE43PgLsgJYNkweV8RhRcKsg42KX1zVgxIn1SMNHAWmyss8YSeSwGsiUC59m(mGn5fx6DFeFYjYI4YG)dxliReucIihTPSsFvKG1f4jZ01vyf06XQmvJ1ckjwwRRAhN9OEzaMkLXETNsjl(F9jsiqozYMlKy0M4K1UPYs6Wpf5EP9yuqaf94KJhb5IZnhLd(C5FzkyqpmpxgH3Nw)bK4bZzLCJdhJQoRNkX4sNZp98AQNLJBFwbwbj9JhLRsr18BmwRosdqrhWPXtoThTKMrEP9OCAg4PR0(KvAbQIJGyDzqBRs60iSLci4U92yJ5A5BEy8GkNZ1k4ykukuGFyeSH1IXKAEz9y(FcARJDQH2QgkyVg1yND8h4bRybLuww4htIBbjDPl5Ztdp8JgwAQ3uiMCq0)mC8ZFOS4xUD170pWcmkfgN2LBfdVEctZo7nb(Qy41U(wrAyY5U1QEjFTakAEikODXqACHHoKv6DVKBrerSl444a6XQwWjU9m8e0WVOneH4VgbPtBJSK1IA7mMxptJhzOB5kYqIoU(LCRer2lyy59a6smeHet9GkRgtK7Zh3z9oef2iebEO6QbWzupuxQmpKxlCUJxTrYTCfYKwGOmfKIja65appCrt9H5j0yeojD8bI6O0GgeDLqyafIvdXOfezW2Jt(O5CKjeVXbXF15y92elRJ5i1CBi1sDlYqUGGbl1w10uRRgUZlnSPunIDbPDuTXwp2cCYlegmNwS02(QCQ1XYDE44Lqa48lcSj(athvFvsIMnVG6UdKfhVUvuYys5qvMi0PDQXJDQtIWWBncdoklV(va)0Wt7bIlCC8sH2ddITZ31s8AzNNtllkQe)lv9UypbglnF(ecEhpEVc2HTW93ju8IZM2o6M4XmiiMIoMRXjC6JaHOTmfPXrQO1tcOzrtBSAv0wkD12XTHsQ(leiQ5ywSVM2WBUBqIxMFUUeZ4dMpXBaBGkpmyhSkVTMJqXWRe59SXc5ShuqJik)fiNXhPVkhrPrfVJJ(EVnipczUUn8U7fubnwNVCtzuINyyUrie95U8puG9su28gLmFCUIzG0EbZlOmQECEkkUowaHwKDAWLmsC48KuE0qA3rMW52qqz5PyvOGZNaBAHYgoyYqMjulzSF02Q6DLOH3mG2KGAIx9nO3n(D6HjACca23QbDqYTos)(CELDOPbjfJlXWoqVHSkhUi86KID15c0LvmkdPDR8ucmnLr7sncg0cfd(abmLCf5HxdR1dQ12zQ3uTlDYOtn61My9fNyX1Rp7Ctp)uJYI5EAj2eJrP9X7RMllpWSCm(qgc5oA9IOXIr31HNKITS9iuyOP4sJE3Gw351NjbJ6YxzUP8NVQYC44AfNVya)ThBPLxzULwS(yHTItQ1XqwSHlsy9u7r0I(s8eYrcrcQB71KeOFLWZ3MMlDpkzDqU(exP2eRpXYlp)Ctp1OGczKjO20ZuB66ZoAmJOLzHLvQY5cuSd2gjhhjMYFHLUkqGF8k)49tRFeq16lvRAKfovas40zzt(z0JCjmr6MHqPnWuMQWKHeBfdX4sIGDuA4kj5kXwsbCr3xw2xxSeCE2p6iFC0VzsXGUEmeZ(o1eczzh7nZg8T7iUha)KlkWra3LXdWYcBedpiR9K6Q2987OE(Eo68Zzi)yP9NRKrP2KhDnsFBS75hfzY9vCVVyWIjplhFE8VDE3B7gRtYDl4Ex)iNsUFr37hkiUKhxsy2gDRh8Z3tPY5jtLXBdt9tA4M5Rq(cRnZ)xwjPBNggJkPdftV1r6Qyh0kviRaek5l5cHsuqq1XK48SGGcDAE8qjx2kpuOuueLkYhDuYvPISak5RK)iJISCXcI1iPcEOKVCAVV9q51uXJnZPTL6T08ep5dWvWm3(kEMxZ2wZkSusQCUs5eqQsL(lOxqTRQeBz1LA5vg3NKuebcdv)bsVRruuuoLYbu9K9L4YP9(2hidBBPz1B5YDuKRuiG0oF)1zCNHFPLTmC4wn0q1sjFbxSuiAXv6pwWccGdhPu1u7Et3vAlw8xSmDMrFubiqHffaSGVUGsHHgqfEaljayXsEaMB4PWC8awwaWkCao8uyEEaRWdOmNao)WtHf8ekLkikLLR8qbyrxavkvixX4KYfJfqChES1BTlovYNZtBb4zY59XjswhSgucRgdvWCc4Wvbpk4uUsELhb4GLG5YYJZaBfeaNqnRukuu(rjGafkc4GAwfnG8nRefLdSzv0aY3SkNGmDGnRIgW88MMY)OeqGcfaKVD6raWc8nRYfNuUyS8WqnRWTP97dopTN8qDwbc5bGd0SYRzE5HXUbDzHfzdcFVLkpm6VHqkcn4cYcqoin44GKxhUGIaKdshooi51IlKtaYbP0fhK8QDfYlivYDuLkH6Ga30i3JwibD5YXjXl2hiJul0T(cRkWbRfswoIr7StwEGgSr0aafLv0IcioqROrJOGz0YcioqZOrJOGD0scioqZErJOGDVkccKChrbsu6FfEKIiO(LpozDX4rmkBPLezFfgKT0ObcuJDLS5gkNWOlK2O9UOapsdupoesr5LTSaKdsrooif8ZwraYbPjhhK54vtKF0cjqL5eGCqToIdsb33ZliOZDuf0rPnhReVyFGmS6CrfLkIiv23NfL0EFhePRbV(9b9kvUuorWYx0VMYalF)btHdmpRZHeUfyGvO)G5jwvkxuweSkYHyyfZ2xWYZp8j3QzXHAub0f9E4wUy5OxDS4q5GhdPWwtYwuMznHSU5fmlfztHP7ObVBCrffaLSfvYUM)IXhtuHnOOiqwABQBlzSHun1n7QIn45fdPczlYHee3K(BAccInau4XIjN3DqRmOukvkixphVH3Qgyo1ewBXE3Ua7f5DhKdfc5CL9GOadIc9fcLsflxMhcL8diaseiObqIIrUszZvrGmGOq1xmMrvVJT6gAqKB6O20rZAp3QuoVXCWWAq0ZSQwBH5UKzdamTuvRJJRXGkLZMvam5Wn5cpmE(khohE(mpKe0cQw3eK4oT1KMYsDtmnnVHLhEYLZjk2LLlePUygzw0TG18TeSOVVyastgBlxeQC4MkfZuUWrfkff5YLevgZIbroBgLJmvvs21OPNEDomu5Yu6OxblMxKQkvgaixgSeaI6AbqsipuvWSfRiav(4cu6GPkLS5dOvrHsooRjmBVb445LfRB5OOOCKqPuPcIm7bfOFwOFzZpIVDGkbnSvEa(CTcw9UApllGnnMngxn2BsgUDNCWgX0ShpvTIr39WGCzJwsly0YVtGCflhbNwjtoANaG5XC84CfCJoGAMh2UjKMEJnWMCd2RUs5YYzhylA(iuV6Yw6A2oRrTCcTTXgWy7yfezqjrza1FicvgzT1dVP03wpQ(r9EHD4eReWYaJ0e3gxwM(TN2QhKHvBd5vJ7lvIh4vYdWLhOxOt6Ify(oCeapRVRCfZw6VWq37ftYNXq6XtgStjd)vI(9raDFp6DFjM8v3kqbh44yoVso63hbW9DepxPa2YuYLJo1pPjZ(Jsf63hbW9Dj39LJYxfmB2iBOm8GxGhCrtd5ktbhEfgX)bY3ChnLXI(kJSx6k)gJLPSLCuxRHjDm)rtGwIhCXwMfZMN0)rE6C0vihBU6gEWlZ3msuBPurLGDov4OjqR41kkBPaMJDTrfKTeYMseGxiB2qSMs(JgHojBYSbqumMUFwDb1n1wJF(d5Gs(rdusY5lMlsOYo0qfAO)LZ7hwC6ezZnf0SjSvP8WGPcpMfeXKB0jft799GX0FW)zLdm9058h5A(8P9(EWyMNhtfXP8UuL(oMZyXSapMIYOcf7)qpJftFRafYMxC2Ags5ojU(WyA97FqCIYGXiDKakc1NaZ1aFafyiMBiqKx5PqzXzVOyO4NKFiqKt1rrjxCZnvbgIfgceZZJybX5ssEOeYbrSaViwmGLdRiMeUrEzCrzpzmdjozmtPwrPFifHq2B6hzrtDarnkoi5LYfveGCqXokoi5TqeiuTdkcsXbzEU4iLTIyWZhs5Cqi9f0Y5vc01vosGfaFxb168fzQ3E9lsHCUM4buOAzbV66bDznxwXaDGBMxM0xRcfVcSVhmMk8yk6kzrs8xYLHHxHYmU5aXmhpM5ehfLmZ9DkEfzFpym9fr4XaNDGdMsoSiAzy30Y2bwKKb7VwPIqO1kYf)2OwbtRILZDmAEZ1KUSLMk8QGtEJTTDm66h9)s5YkaA5kdqrYd0fuFlJiGeggPyiaZnOoz9GmmyLklReWd58UEidA(Gbd5yatTPL(g6yruq1Yk5Zj68AbIRf5Yit9Lh6xqj)qbQchO5d6xzfx)kbBq5kh0wuSGMJhuXifMLS23YdbLrOr5GbnppOc8uzQjUczkWCVoFSksbbTapOcnHKRqeufbF2laH3sH(9qak2)IBpYiJSFlJ1PB)y3aDYrqp7INb9CV)ZEh3n)1tkJ(RG(IOpl65H9M11H9y2BGEb07CanpK9g2g2oQo9ST61LeNXQWwDg6frFb6gwRTzLjxAHQtSY6ZV0LxF6Ro9IRS(vwCM5MFLPRn9ustn98t8gtp16ldFvBDYUe7ClE51V2s1MFk0lF3j92w5UhTiR7O28M2N4b0RMIrNNGTVTbRF3tGEhZmE70QEl92qR1EYtOBCGOVeA0AnBR18MOxg95hb9sJ4wbBR3sd9oOtncSpX9weq3wtrT7EMpd9f4zf6c9fImZp6Xmhn(DhUTmAToSQBVH5zIprD02uT5ERVrhddRBCNDWdu5AwQM35ASFuDdJUo3FMLQnjM1v)x7ktuBAuHKOIV4ZJEH7B3RbSH1c78GDBHQq3fCbzIvB0VkSV2IU0jqVk5hFzY)(vG)9oaKWUE44OMOwST8URt3Y7sIEIeOpd6xbvVkSfZE3n03vJULh(EFAZtfFTW0sRPozp7fj3O6sRSYslyEU4toBltCDN2wA2Tn60kb66hSyXAJ)wZx5wDE9jXSA)TUWLvHx(K2Op13bDg6MxS4gqC6bVLeB9wyzR(g7HYGwf9MO1y7PIH21aZxRP7g)Bs0nsIuBuFYAtp9IOYV4gOxOHJXMB2rZQL2gQ9640w5MA7Dp(D)olm)Fkn7MTRc7HZMpd92stbjrcETLRr2BxFC0epp673g9K)Oh7ak33FRPg9wJGU5zqDUbARBy(fIKds)rnGr269ppYg5a7QHOEJEAt0o09Sq0Ujq71OhDRi8wO32BJhe9o7(z(mhVNdE8Eo4X75GhVNdE8Eo4X75GhVNd(jO9CqWLRl4yhZRlk(bPuHXXH7u3MZ8agaFvJvQFf3D(Gi2T3f2wam2HTt9HDKqylgl4gxy43uA)x2o2RFnqtuvzk5TQ8AcTwiVK6Kej(YZXYNy)VSZkc4951QNMyhqyVfbYEdvCJjXNyAzSj2BsByNUgNIrbS90Yc9ktZPEg0cCwXB79QGNoIUM5RWaNc(DKMlipjdH6Fx)3OAg3eEzIJGXKHvzdL4ajtKFf4HU1QWVP7(PXTkg8nQoi5i8(1ZaSU4gOdfcSgfolBzc7mdg7i8MdZruVBWQweSG))J6gVW2DtVIN8hQg(u31JUTpEGkRBtgPskTaVGPET91I8viVVg7D3sOe8Msa5q7IPn107411A40fypyG2PWQ0sBT4ET9jyYDRGEQv3BF5iDefw6ii00HkMXJ5aea9U0WG8RFg0Z9lGaDabYa9YijicbqyqiHdHeHa03a9ph91oGizzJT6Dm)5HJ7aBlKOTgyznKnwUDBn6qTuTDa7PI34v8Y)5LGTkvX2gIP9sUPn8Udgtzmy3i(Vp)uNX)iASpUQQLomKk7Dt8DPMK9Aw4BH2X1(kXrvoBOSbRcpJ9QIsoogcSR(fE4wRsSfVw0gLx135bskc4kHFYO(uqsdV7f(jG4Nb55CEC4)yIRhKhZ5eI)JzEJqsGGNjCiqCrHcbN3k(jG52cjfcUWWXjO(Yqzg0FhOxNBpYTrNAeSY6Vb6Vjwzfuy)63xyFTa91WQVGs87ywoSYzeAeCgxCJqgPbaO4FQrq)Tq)Tr)Mjr)DUbebMVj6BH(7I(2EXGc9Dqv2a93RFXBc93NeOj0VvssKLKr)dr1rFx0B9BDg03yg0ZLCudZrV0LUZ2mLVguDUAeTffSgb7SJY(fpd6N(AZ(Q)3)1Hp7m7R(F73g(C7zF1)S)NWN)hjVd2fatnlN9qFpbOr)(O)1OFAnIAb6pGatIzF1)Jpn8PsYKOFwKP)oUQASSm7R(N)hcF(LZ(Q)xFd4ZnN9v)pVc8z94GObveYai5SV6)PVj8zVylZQGUNFYzKyI4sEnIEMBvkz8WcA8UWMmw4AqvS9QVUCO4Zavl2ld)xUg8P6SV6F6AWNNKsqO)PO)zOFNeSGE972gT)nGOmE3abJl4z9rEAq3q)JrFqB0hI((OFqB0pe9Jq)yAK5q)JqFpAC6U(bPk(x)wkRKQwdNCON8nFC0)GKO)j0OP9B)EFAVWP9qh9W3FI7ySTMf22M9T6RcyF1re05iIbbrSa)MimVRo2d(6KJPLx6XWCSduBbHXuR1cQ7Ec0tMac039TnvTUP7zqfj0TFKFiH9cRi5umJG36(b48bAK4NDz44fIeGvzuM70qL7CY7UT0Sbvc44o7EKsIgL43iH5ZUjlBlzb)lP4V7SlvBU)AlT4ktmpXOWn6JrbZNUNT2eSkeUkP3TnQUfyvctbhWy3n7OB22IDwNDVP0CGfkT0mDuDOuZk0NyMAo4W)zd1MAV5K4oe17UzvvR38kZDE)RoFDcJIKT2eDo0vsIM4mhOBtpn9wUjMd89fQMxpb54IXJTR39eMpJadhMdGQtCLvwc9S)kW0O8mOV6jLjoo4AB(RH(xqCI4VbUnWlFVjBR6iTaEqk4EhjMOFPrytRXs0AS8jqFD0pbB5(cbTC3VEYbd2Fd68ya2S)92nXpH2fRAl6uPO2zz2OJGtwU0h31(NG7Ah9B(JEmCpTpWD8SulaN9LESt8qBaJ0B9fj9wZM2iyN2KAJ49FoZtcTWwxCEGm)8KB6WnZd2SFGgBFVNn6PTnFAUS7B74b076ECpI(ZmFwYDepwKqV9hrlcV5z6RDF6u)WodMsCpYZ9M)M7so1(0Gw(vxCPfNg9cw4QdzUQij0382(mAhx2FBHQO3P709j30Dk3qFR77LdY561kZo3KVo7CJIvj5ozSU3ClU401wNEkx6NtyE1(sSQW1fQcBRBRJn3EJg0t)VXVpZUgv(QmF9fEaX2s1o4MZGHfLjMAQGMjv3Tn4l1d4UlCV7sYjH)9z96VJEZj9zie7)2W0BQimHq)VoEcHoEcHoEcHoEcHoEcHoEcHoEcH(e0ecHhl0qpFqhX4c7hyDYCPmGjZbAY43NiBEjeNDM4M1MaZlZy05LzS0J0N5DjI5CXMSkWeVxKdVrSR73(2PD)7H((UEN33j8zKG7uPJjeuUXC9yHSNvg1UUjxFfPdESe8Xou(bSWerq89y7diQ8bp8j4DcJBS0H7XreCyFRKMyS)RbocJI9yk2xfZ9xWoNm3088UxskQP4Pp5JPw9UxsSN8bLl35XZJN(L53sKfM9o(KeZCt1NPLYvRpe1f10wf10TiWaDp6eOnwwY9SMpRONLyxFm5STrlPWT1gpOBNb9ybosiIApTnsAwFTyocfQR5mM)EdDeNzcrkNunPNJ6Guk8bNa(PyEe0jVaRiuAu3nuAcTRwZsRFTk8jksig(aGmsLFElpzcvNJ6C3PFt(O3eF972UkmUW2cdPuVB7Q3YWyReqeAhvVvGtM58hqgA5S6TAP1T2ItF1PRrci7nsI(XV3Ngv(IBZIBB1wA2nn)kxdBlqIgTr8OIGDcaChBJzZmZVJENosn0KaoHJb7qvd)uG73MyIa9HO)u0p4gOF4b1H2uQ2sNE2Lr)4KZGEb8OPvBPzH(UNaw8LWIbUn(brh3ygvtg(9LWdgboGTXj)9UXbg(bXe9NeCMjOX6g9VXlm3Xhay0pZ8PT71itUm(bJikS(dJCAiomXNlQe)hnutarmz(FBKt(qmj(Ero1dXK4)DcZ7qmj6NlmRdXKO)9roJdXK4FrCZ2WFaJm23ne2k0s96hSK80ZSWnBK)Tkz9(NMSwz)EqvKXeXjHglDYStXfxKNZ844ICCCrooUihhxKJJlYXXf544I8jO4IWwtRxGozqry1J(aHv1klpEhJqrS8y5sn2Z5oAbsAZEwBRnb8aUe2cljOf(LKoFkHUE9EcURImfGdbwLWhrVczXInVYEJliA8oRKC5SEl(366DBQ5FG3C(cy3pjRxmSA8M4KFrYSvRj1g73CdnSN4wAWRNulWzB8GRCNlB)fNhlBCpZ98HLNesrzrxaQbmol0Liuntj4yW55sX5GonVGKY4JpSI4)F)YHMFfFgyjGgyzqh5jwxG0WpEnHU9oLxLHoU54iA((c9htiXRMhflJAXviDaNScABhyANNJbH7EjJsbSaowIp8zgxulOw3d2u3ZOpoEd07LF12)SNCnA8wc1HEy2BAj)CLw68Yb9s0TW54TXGDuIHm8S2bN6ywFZXlhJmjIhYBXDa4WFDOJHhoVVySNOzl6GldbKhK1Z6hp2vSvTpzWT4(9azuXWKgsguinpA7X31nCz0gtSd7n91INllye07u4vpDuWNoAWhFieFIbZlaa)Fdj6Wi3ocbglIUGylmFFhw4RLuVFg2vTVGFKXovnrNQOF5CYg5aQ8pJCRtj2aPKvfI9SPm8Sze)5fxGdQ1OS6dhf9zdFKz5E82f8CAvW4u4Hfo6Pgn8WchIHgsuMc(6miCDuX2nyB7qVnoKw38ZUrOHT5xXDLfK5wrePliGXzhGtlbik)H8gR9aYPmjj2Z(kfmhnOxeH9EXZqBHg32RnGi4hx7t)WEWRCYRqoSTUfKorgZ8hEXLOI9JeXvWtK5()UO8FWB5J(7H(x69(OaRzuyjE(oMYd1s7xyjIYEdw(6MNkY9EdjX3IGp)iKfUAW31a0pX)9la9VkI3tGp13bwiXOFzBu(PEk(3tG)35Aqhww7b(kd8rS1ghSU8GLcxTjNFIfwgw5Bn2s3YYWQnQo6W9B4Uu5omrsyHLFO5K(Re4jA1APU2VP34IEZf0APR(MS1mS9B6OATPMZ66DBHhXTJH16B2XyNmoBQIk)wFB0luZc6Ja9dARSL6UV3Zx12rZmj6hNubp6)KOp8U(dge9dRnjCb6dEzC(omXFvCMomXPN6PomXzGCCyIXM)PqF4dehCh6hEh3rxH(Ge8z8p2pFpb6dVhVYeotSMm2Opy8TrVqdQPo0hKSbDj4EwZNHKsnlPjHTbMD0T1237xOpCFVHWrMxK9NY7sY0PCyINf9DpXHjEU4NffHfT)Z6pXqUTLZtMginYecnXvpmHYJFyI0JFyIZcmKuVm8oaC9d2v5kxTZvl0nNsjyDy)ejqV1p4mOVrr0ZLe97xf8oc9ttsJ0)ZJv2FMqdSh9Zy7)lnXI)h(PRjYxRHyMEMOt7F0d)Rhsmtot0P9Ed)RfsGPMj608Zh87dsmtmt0P9xmO3ceHxdJ3)5BqMCSAjH1O8(QDmBRclqK7y7yPcZph9Xvts)(YjPjzgSnpZRr6nZ16N7uPMgMrClS3eT064O6A11)LX0YHEK(ZwNiNLpDulZKDphsXaB4rJrl5jsclGAYJSXooPDJg4(TWnFRUHAln0vsGs9eNCVeNC3enipE3hFFY3ec93PFe61zF)gWCBJZX1zF)grr6xpaTNIMf8yVPpE8XDrlYe(gUj8ngxOctEiW2VVlBVoCNdt8ftG(Qk4HYtRu7LmQfz(7)5omrLKOV6HjETdtCXdt8REyIjW2SUe(VVS5RpuYNblDac9(aZhtFDT7aBMshM4RG)7vWfZShMyUdtm9YjLZuaOP77Lic7)2dbRNumxN99BeMQUEuK11JJB7Icq1hM41Pegthz8tUl2(xvmPpJ538HuP4VOujiCzpMhOqy(mUAeR4EBIwb4cawd4KB)NC9)p
91RsXiY2,TEA P2 ナイサイ受け渡し,garume,C#,Friday 16th of August 2024 03:43:06 PM CDT,"using System.Collections.Generic;
using System.Linq;
using Dalamud.Game.ClientState.Objects.Types;
using Dalamud.Game.ClientState.Statuses;
using ECommons;
using ECommons.Configuration;
using ECommons.DalamudServices;
using ECommons.GameHelpers;
using ImGuiNET;
using Splatoon;
using Splatoon.SplatoonScripting;

namespace SplatoonScriptsOfficial.Duties.Dawntrail;

public class TEA_P2_Nisi : SplatoonScript
{
    private const uint AlphaNisiId = 2222;
    private const uint AlphaNisiId2 = 2224;
    private const uint BetaNisiId = 2223;
    private const uint BetaNisiId2 = 2225;
    private const uint DeltaNisiId = 2138;
    private const uint DeltaNisiId2 = 2140;
    private const uint GammaNisiId = 2137;
    private const uint GammaNisiId2 = 2139;

    private const uint JudgmentNisiCastId = 18494;
    private const uint OpeningLastJudgmentCastId = 18491;

    private const uint JusticeId = 9216;

    private readonly Dictionary<uint, List<uint>> _firstNisiPlayerPairs = new();

    private bool _isJudgmentNisi;
    private bool _isOpeningLastJudgment;

    private uint _myFirstNisiId;

    private static IEnumerable<uint> NisiIds => new[] { AlphaNisiId, BetaNisiId, GammaNisiId, DeltaNisiId };
    private static IEnumerable<uint> NisiIds2 => new[] { AlphaNisiId2, BetaNisiId2, GammaNisiId2, DeltaNisiId2 };

    public override HashSet<uint> ValidTerritories => [887];
    public override Metadata Metadata => new(2, ""Garume"");

    private IBattleNpc? Justice =>
        Svc.Objects.OfType<IBattleNpc>().FirstOrDefault(x => x.NameId == JusticeId && x.IsTargetable);

    private Config C => Controller.GetConfig<Config>();

    public override void OnSetup()
    {
        foreach (var nisiId in NisiIds) _firstNisiPlayerPairs[nisiId] = [];

        var nisiPassElement = new Element(0)
        {
            overlayText = ""交換対象"",
            tether = true
        };
        Controller.RegisterElement(""NisiPass"", nisiPassElement);
    }

    public override void OnUpdate()
    {
        Controller.GetRegisteredElements().Each(x => x.Value.Enabled = false);

        var justice = Justice;
        if (justice == null)
        {
            _isJudgmentNisi = false;
            _isOpeningLastJudgment = false;
            return;
        }

        if (justice is { IsCasting: true, CastActionId: JudgmentNisiCastId })
        {
            _isJudgmentNisi = true;
            _isOpeningLastJudgment = false;
        }

        if (justice is { IsCasting: true, CastActionId: OpeningLastJudgmentCastId })
        {
            _isJudgmentNisi = false;
            _isOpeningLastJudgment = true;
        }

        if (_isJudgmentNisi && !_isOpeningLastJudgment && !justice.IsCasting)
        {
            var nisiPlayers = Svc.Objects.OfType<IBattleChara>()
                .Where(x => x.StatusList.Any(y => NisiIds.Contains(y.StatusId)))
                .ToArray();

            if (_firstNisiPlayerPairs.First().Value.Count == 0)
            {
                if (nisiPlayers.Length == 8)
                    foreach (var player in nisiPlayers)
                    {
                        var nisi = player.StatusList.First(x => NisiIds.Contains(x.StatusId));
                        _firstNisiPlayerPairs[nisi.StatusId].Add(player.EntityId);
                        if (player == Player.Object)
                            _myFirstNisiId = nisi.StatusId;
                    }
            }
            else
            {
                var myNisi = Player.Object.StatusList.FirstOrDefault(x => NisiIds.Contains(x.StatusId));
                var anotherPlayer =
                    _firstNisiPlayerPairs[_myFirstNisiId].First(x => x != Player.Object.EntityId)
                        .GetObject() as IBattleChara;
                var anotherPlayerNisi = anotherPlayer.StatusList.FirstOrDefault(x => NisiIds.Contains(x.StatusId));

                //2nd Nisi
                if (myNisi == null && anotherPlayerNisi != null && anotherPlayerNisi.RemainingTime < C.FirstNisiTime)
                    SetPositionElement(anotherPlayer, ""NisiPass"");

                //2nd Nisi
                if (anotherPlayerNisi == null && myNisi != null && myNisi.RemainingTime < C.FirstNisiTime)
                    SetPositionElement(anotherPlayer, ""NisiPass"");
            }
        }

        if (_isOpeningLastJudgment && !justice.IsCasting)
        {
            var myMisi = Player.Object.StatusList.FirstOrDefault(x => NisiIds.Contains(x.StatusId));
            var myNisi2 = Player.Object.StatusList.FirstOrDefault(x => NisiIds2.Contains(x.StatusId));

            // 3rd Nisi
            if (myMisi != null && myMisi.RemainingTime < C.SecondNisiTime)
            {
                var matchingNisiId = GetMatchingNisiId(myMisi.StatusId);
                var player = Svc.Objects.OfType<IBattleChara>()
                    .Where(x => !x.StatusList.Any(y => NisiIds.Contains(y.StatusId)))
                    .FirstOrDefault(x => x.StatusList.Any(y => y.StatusId == matchingNisiId));

                SetPositionElement(player, ""NisiPass"");
            }

            // 3rd Nisi or 4th Nisi
            if (myMisi == null && myNisi2 != null)
            {
                var matchingNisiId = GetMatchingNisiId(myNisi2.StatusId);
                var player = Svc.Objects.OfType<IBattleChara>().FirstOrDefault(x =>
                    x.StatusList.Any(y => y.StatusId == matchingNisiId && y.RemainingTime < C.SecondNisiTime));
                SetPositionElement(player, ""NisiPass"");
            }

            // 4th Nisi
            // probably not needed
            if (myMisi != null && myNisi2 != null && myMisi.RemainingTime < C.SecondNisiTime)
            {
                var matchingNisiId = GetMatchingNisiId(myMisi.StatusId);
                var player = Svc.Objects.OfType<IBattleChara>()
                    .Where(x => !x.StatusList.Any(y => NisiIds.Contains(y.StatusId)))
                    .FirstOrDefault(x => x.StatusList.Any(y => y.StatusId == matchingNisiId));
                SetPositionElement(player, ""NisiPass"");
            }
        }
    }

    public override void OnReset()
    {
        _firstNisiPlayerPairs.Each(x => x.Value.Clear());
        _isJudgmentNisi = false;
        _isOpeningLastJudgment = false;
    }

    private uint GetMatchingNisiId(uint nisiId)
    {
        return nisiId switch
        {
            AlphaNisiId => AlphaNisiId2,
            BetaNisiId => BetaNisiId2,
            GammaNisiId => GammaNisiId2,
            DeltaNisiId => DeltaNisiId2,
            AlphaNisiId2 => AlphaNisiId,
            BetaNisiId2 => BetaNisiId,
            GammaNisiId2 => GammaNisiId,
            DeltaNisiId2 => DeltaNisiId,
            _ => 0
        };
    }

    private void SetPositionElement(IGameObject? player, string elementName)
    {
        if (player == null) return;
        if (Controller.TryGetElementByName(elementName, out var element))
        {
            element.Enabled = true;
            element.refX = player.Position.X;
            element.refY = player.Position.Z;
        }
    }

    public override void OnSettingsDraw()
    {
        ImGui.Text(""1 ~ 2 Nisi"");
        foreach (var pair in _firstNisiPlayerPairs) ImGui.Text($""{pair.Key.GetObject()}: {string.Join("", "", pair.Value)}"");
        ImGui.Spacing();
        ImGui.Text(""Current Nisi"");
        foreach (var nisi in Svc.Objects.OfType<IBattleChara>()
                     .SelectMany(x => x.StatusList)
                     .Where(x => NisiIds.Contains(x.StatusId))
                )
            ImGui.Text($""{nisi.StatusId}: {nisi.RemainingTime}"");
    }

    private class Config : IEzConfig
    {
        public float FirstNisiTime { get; } = 8f;
        public float SecondNisiTime { get; } = 15f;
    }
}"
g1DKLNyL,Gerenciador de Senhas v. 5 (meia boca),MizunoBrasil,Python,Friday 16th of August 2024 03:42:11 PM CDT,"# Código não funciona os botões Adicionar nem o botão Editar

import tkinter as tk
from tkinter import ttk, messagebox
import os
import pyperclip
import webbrowser

class Application(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title(""Gerenciador de Senhas - Filtre os dados por Site ou por Login"")
        self.geometry(""1000x600"")
        self.sort_order_site = ""asc""
        self.sort_order_login = ""asc""
        self.create_widgets()
        self.create_menu()
        self.date_label = ttk.Label(self, text=""Mizuno - 06/05/2024"")
        self.date_label.place(x=10, y=self.winfo_height() - 30)
        self.center_window()

    def create_widgets(self):
        self.search_var = tk.StringVar()
        self.search_entry = ttk.Entry(self, textvariable=self.search_var)
        self.search_entry.pack(pady=(0, 10))
        self.search_button = ttk.Button(self, text=""Pesquisar"", command=self.search_records)
        self.search_button.pack(pady=(0, 10))
        self.tree = ttk.Treeview(self, columns=(""Site"", ""URL"", ""Login"", ""Senha""), show=""headings"")
        self.tree.heading(""Site"", text=""Site"", command=self.sort_sites)
        self.tree.heading(""URL"", text=""URL"")
        self.tree.heading(""Login"", text=""Login"", command=self.sort_login)
        self.tree.heading(""Senha"", text=""Senha"")
        self.tree.pack(pady=10, side=""left"", fill=""both"", expand=True)
        scrollbar = ttk.Scrollbar(self, orient=""vertical"", command=self.tree.yview)
        scrollbar.pack(side=""right"", fill=""y"")
        self.tree.configure(yscrollcommand=scrollbar.set)
        self.refresh_button = ttk.Button(self, text=""Atualizar"", command=self.refresh_tree)
        self.refresh_button.pack()
        self.add_button = ttk.Button(self, text=""Adicionar"", command=self.add_entry)
        self.add_button.pack()
        self.edit_button = ttk.Button(self, text=""Editar"", command=self.edit_entry)
        self.edit_button.pack()
        self.delete_button = ttk.Button(self, text=""Excluir"", command=self.confirm_delete)
        self.delete_button.pack()
        self.load_data()
        self.tree.bind(""<Button-3>"", self.popup_menu)
        self.tree.bind(""<Double-1>"", self.open_url)

    def search_records(self):
        search_term = self.search_var.get().strip().lower()
        if not search_term:
            messagebox.showinfo(""Pesquisa"", ""Digite um termo de pesquisa."")
            return

        # Limpa a TreeView antes de preencher com os resultados da pesquisa
        for item in self.tree.get_children():
            self.tree.delete(item)

        found = False
        if os.path.exists(""dados.txt""):
            with open(""dados.txt"", ""r"") as f:
                for line in f:
                    data = line.strip().split("","")
                    # Verifica se o termo de pesquisa está em algum dos campos 'Site', 'URL' ou 'Login'
                    if search_term in data[0].lower() or search_term in data[1].lower() or search_term in data[2].lower():
                        self.tree.insert("""", ""end"", values=data)
                        found = True

        if not found:
            messagebox.showinfo(""Pesquisa"", ""Nenhum registro correspondente encontrado."")
            self.refresh_tree()  # Chama a função de atualização da árvore diretamente após fechar o alerta

    def create_menu(self):
        self.menu_bar = tk.Menu(self)
        self.file_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.file_menu.add_command(label=""Sobre"", command=self.show_about_dialog)
        self.file_menu.add_separator()
        self.file_menu.add_command(label=""Sair"", command=self.quit_app)
        self.menu_bar.add_cascade(label=""Arquivo"", menu=self.file_menu)
        self.config(menu=self.menu_bar)

    def open_url(self, event):
        if self.tree.selection():
            item = self.tree.selection()[0]
            url = self.tree.item(item, ""values"")[1]
            webbrowser.open(url)

    def center_window(self):
        self.update_idletasks()
        width = self.winfo_width()
        height = self.winfo_height()
        x = (self.winfo_screenwidth() - width) // 2
        y = (self.winfo_screenheight() - height) // 2
        self.geometry('{}x{}+{}+{}'.format(width, height, x, y))

    def load_data(self):
        if os.path.exists(""dados.txt""):
            with open(""dados.txt"", ""r"") as f:
                for line in f:
                    data = line.strip().split("","")
                    self.tree.insert("""", ""end"", values=data)

    def save_data(self):
        with open(""dados.txt"", ""w"") as f:
            for item in self.tree.get_children():
                values = self.tree.item(item, ""values"")
                f.write("","".join(values) + ""\n"")

    def refresh_tree(self):
        for item in self.tree.get_children():
            self.tree.delete(item)
        self.load_data()

    def add_entry(self):
        AddEntryWindow(self)

    def edit_entry(self):
        try:
            item = self.tree.selection()[0]
            values = self.tree.item(item, ""values"")
            EditEntryWindow(self, values)
        except IndexError:
            messagebox.showerror(""Erro"", ""Selecione um registro para editar."")

    def delete_entry(self):
        selected_item = self.tree.selection()[0]
        self.tree.delete(selected_item)
        self.save_data()

    def confirm_delete(self):
        try:
            if messagebox.askyesno(""Confirmar"", ""Tem certeza que deseja excluir este registro?""):
                self.delete_entry()
        except IndexError:
            messagebox.showerror(""Erro"", ""Selecione um registro para excluir."")

    def popup_menu(self, event):
        popup_menu = tk.Menu(self, tearoff=0)
        popup_menu.add_command(label=""Copiar URL"", command=lambda: self.copy_to_clipboard(1))
        popup_menu.add_command(label=""Copiar Login"", command=lambda: self.copy_to_clipboard(2))
        popup_menu.add_command(label=""Copiar Senha"", command=lambda: self.copy_to_clipboard(3))
        popup_menu.post(event.x_root, event.y_root)

    def copy_to_clipboard(self, column_index):
        item = self.tree.selection()[0]
        value = self.tree.item(item, ""values"")[column_index]
        pyperclip.copy(value)

    def sort_sites(self):
        items = self.tree.get_children("""")
        if self.sort_order_site == ""asc"":
            sorted_items = sorted(items, key=lambda x: self.tree.item(x, ""values"")[0])
            self.sort_order_site = ""desc""
        else:
            sorted_items = sorted(items, key=lambda x: self.tree.item(x, ""values"")[0], reverse=True)
            self.sort_order_site = ""asc""
        for item in sorted_items:
            self.tree.move(item, """", ""end"")

    def sort_login(self):
        items = self.tree.get_children("""")
        if self.sort_order_login == ""asc"":
            sorted_items = sorted(items, key=lambda x: self.tree.item(x, ""values"")[2])
            self.sort_order_login = ""desc""
        else:
            sorted_items = sorted(items, key=lambda x: self.tree.item(x, ""values"")[2], reverse=True)
            self.sort_order_login = ""asc""
        for item in sorted_items:
            self.tree.move(item, """", ""end"")

    def show_about_dialog(self):
        messagebox.showinfo(""Sobre"", ""Última atualização: 16/08/2024, by Mizuno"")

    def quit_app(self):
        self.destroy()

# Continuação das classes AddEntryWindow e EditEntryWindow segue sem mudanças.

def main():
    app = Application()
    app.mainloop()

if __name__ == ""__main__"":
    main()
"
Ga89pmYc,DSs,amt,JavaScript,Friday 16th of August 2024 03:20:18 PM CDT,"/* 1143. Longest Common Subsequence. Medium

console.log(longestCommonSubsequence(""abcde"", ""ace"")); // Output: 3
console.log(longestCommonSubsequence(""abc"", ""abc"")); // Output: 3
console.log(longestCommonSubsequence(""abc"", ""def"")); // Output: 0

Time Complexity:
O(m * n): We need to fill in a table of size m * n where m is the length of text1 and n is the length of text2.
Space Complexity:
O(m * n): We need to store the DP table of size (m+1) x (n+1).
This approach efficiently computes the length of the longest common subsequence using dynamic programming.
*/
function longestCommonSubsequence(text1, text2) {
    const m = text1.length;
    const n = text2.length;
    
    // Create a 2D dp array with (m+1) x (n+1) dimensions and fill it with 0
    const dp = Array(m + 1).fill(null).map(() => Array(n + 1).fill(0));

    // Fill the dp array
    for (let i = 1; i <= m; i++) {
        for (let j = 1; j <= n; j++) {
            if (text1[i - 1] === text2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
            } else {
                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }

    // The answer is the bottom-right cell of the dp array
    return dp[m][n];
}


/* 1151. Minimum Swaps to Group All 1's Together. Medium.
minSwaps([1,0,1,0,1]) = 1
minSwaps([0,0,0,1,0]) = 0
minSwaps([1,0,1,0,1,0,0,1,1,0,1]) = 3

Time Complexity:
O(n): We traverse the array once with a sliding window, where n is the length of the array.
Space Complexity:
O(1): Only a few variables are used, and no extra space is required relative to the input size.
*/
function minSwaps(data) {
    const totalOnes = data.reduce((sum, val) => sum + val, 0);

    if (totalOnes === 0) return 0; // No 1's in the array, no swaps needed

    let maxOnesInWindow = 0;
    let currentOnes = 0;
    let left = 0;

    // Sliding window to find the max number of 1's in a window of size `totalOnes`
    for (let right = 0; right < data.length; right++) {
        currentOnes += data[right];

        // Once the window reaches the size of totalOnes
        if (right - left + 1 > totalOnes) {
            currentOnes -= data[left];
            left++;
        }

        maxOnesInWindow = Math.max(maxOnesInWindow, currentOnes);
    }

    // The minimum number of swaps required is the difference between totalOnes and maxOnesInWindow
    return totalOnes - maxOnesInWindow;
}

/* 1492. The kth Factor of n. Medium
kthFactor(12, 3) = 3
kthFactor(7, 2) = 7
kthFactor(4, 4) = -1

Time Complexity:
The loop runs from 1 to n, hence the time complexity is O(n).
Space Complexity:
The space complexity is O(n) in the worst case because we store all factors of n in an array.
This approach ensures that we efficiently find and return the k-th factor, or -1 if there are fewer than k factors.
*/
function kthFactor(n, k) {
    let factors = [];
    for (let i = 1; i <= n; i++) {
        if (n % i === 0) {
            factors.push(i);
        }
    }
    return factors.length >= k ? factors[k - 1] : -1;
}



/* 1676. Lowest Common Ancestor of a Binary Tree IV. Medium.
lowestCommonAncestor([3,5,1,6,2,0,8,null,null,7,4],[4,7]) = 2
lowestCommonAncestor([3,5,1,6,2,0,8,null,null,7,4],[1]) = 1
lowestCommonAncestor([3,5,1,6,2,0,8,null,null,7,4],[7,6,2,4]) = 5

Time Complexity:
The time complexity is O(n), where n is the number of nodes in the tree. This is because we potentially visit every node in the tree once during the DFS traversal.
Space Complexity:
The space complexity is O(h), where h is the height of the tree. This is the maximum depth of the recursion stack. In the worst case, the height of the tree can be n (in the case of a skewed tree), making the space complexity O(n). In a balanced tree, the height would be O(log n).
*/
class TreeNode {
    constructor(val) {
        this.val = val;
        this.left = this.right = null;
    }
}
function lowestCommonAncestor(root, nodes) {
    const nodeSet = new Set(nodes);

    function dfs(node) {
        if (!node) return null;
        if (nodeSet.has(node)) return node;

        const left = dfs(node.left);
        const right = dfs(node.right);

        if (left && right) return node;
        return left ? left : right;
    }

    return dfs(root);
}

/* 2340. Minimum Adjacent Swaps to Make a Valid Array. Medium
console.log(minimumSwaps([3, 4, 5, 5, 3, 1])); // Output: 6
console.log(minimumSwaps([9]));               // Output: 0

Time Complexity:
O(n): The solution involves a single traversal of the array to find the indices of the smallest and largest elements.
Space Complexity:
O(1): The solution only uses a constant amount of extra space for the indices and counters.
This approach is efficient and scales well even for large input arrays.
*/
function minimumSwaps(nums) {
    let n = nums.length;
    
    // Finding the leftmost smallest element and its index
    let minIndex = 0;
    for (let i = 1; i < n; i++) {
        if (nums[i] < nums[minIndex]) {
            minIndex = i;
        }
    }
    
    // Finding the rightmost largest element and its index
    let maxIndex = 0;
    for (let i = 1; i < n; i++) {
        if (nums[i] >= nums[maxIndex]) {
            maxIndex = i;
        }
    }

    // If minIndex is before maxIndex, the swaps don't interfere
    if (minIndex < maxIndex) {
        return minIndex + (n - 1 - maxIndex);
    } else {
        // If minIndex is after maxIndex, subtract 1 to account for the overlap
        return minIndex + (n - 1 - maxIndex) - 1;
    }
}





/* 2405. Optimal Partition of String. Medium
minPartitions(""abacaba"") = 4
minPartitions(""ssssss"") = 6

Time Complexity:
The time complexity is O(n), where n is the length of the string s, since we are iterating through the string once.
Space Complexity:
The space complexity is O(1) for the partitions counter.
The space complexity is O(26) = O(1) for the seen set since it can only store up to 26 unique lowercase English letters.
*/
function minPartitions(s) {
    let partitions = 0;
    let seen = new Set();
    
    for (let char of s) {
        if (seen.has(char)) {
            partitions++;
            seen.clear();
        }
        seen.add(char);
    }
    
    return partitions + 1;
}

/* 2408. Design SQL. Medium

Time Complexity:
Insert Row: O(1) for each insert since we're simply adding a row to the dictionary.
Delete Row: O(1) for each delete since we're removing a key from the dictionary.
Select Cell: O(1) for each cell selection since we're directly accessing an element in a dictionary and an array.
Space Complexity:
O(n + r), where n is the number of tables and r is the total number of rows across all tables. The space is used for storing the tables, rows, and their metadata. */
class SQL {
    constructor(names, columns) {
        this.tables = {};

        // Initialize the tables with their respective columns
        for (let i = 0; i < names.length; i++) {
            this.tables[names[i]] = {
                columns: columns[i],
                rows: {},
                nextId: 1
            };
        }
    }
    insertRow(name, row) {
        const table = this.tables[name];
        table.rows[table.nextId] = row;
        table.nextId++;
    }
    deleteRow(name, rowId) {
        const table = this.tables[name];
        delete table.rows[rowId];
    }
    selectCell(name, rowId, columnId) {
        const table = this.tables[name];
        return table.rows[rowId][columnId - 1];
    }
}


/* 2422. Merge Operations to Turn Array Into a Palindrome. Medium
minOperations([4,3,2,1,2,3,1]) = 2
minOperations([1,2,3,4]) = 3

Time Complexity:
O(n): The solution uses a two-pointer approach and each element is processed at most once, where n is the length of the array.
Space Complexity:
O(1): The solution operates in-place, modifying the original array, and only uses a few extra variables for the pointers and the operations count.
*/
function minOperations(nums) {
    let left = 0;
    let right = nums.length - 1;
    let operations = 0;

    while (left < right) {
        if (nums[left] === nums[right]) {
            left++;
            right--;
        } else if (nums[left] < nums[right]) {
            nums[left + 1] += nums[left];
            left++;
            operations++;
        } else {
            nums[right - 1] += nums[right];
            right--;
            operations++;
        }
    }

    return operations;
}

"
f3qPetyX,Unit_49,lovelyvook,C#,Friday 16th of August 2024 03:18:08 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;

namespace Ijunior
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Game game = new Game();
            game.Work();
        }
    }

    class Game
    {
        private Service _service = new Service();

        public void Work()
        {
            const string CommandServiceCar = ""1"";
            const string CommandShowStorage = ""2"";
            const string CommandExit = ""3"";

            bool isWork = true;

            while (isWork)
            {
                Console.WriteLine(""Машин в очереди: "" + _service.CarsCount);

                Console.Write($""\n{CommandServiceCar} - обслужить машину"" +
                              $""\n{CommandShowStorage} - посмотреть детали на складе"" +
                              $""\n{CommandExit} - выйти"" +
                              $""\nВведите номер: "");

                switch (Console.ReadLine())
                {
                    case CommandServiceCar:
                        _service.FixCar();
                        break;

                    case CommandShowStorage:
                        _service.ShowStorageInfo();
                        break;

                    case CommandExit:
                        isWork = false;
                        break;

                    default:
                        Console.WriteLine(""Некорректный ввод"");
                        break;
                }

                if (_service.CarsCount == 0)
                {
                    Console.WriteLine(""Вы починили все машины"");
                    isWork = false;
                }

                Console.ReadKey();
                Console.Clear();
            }
        }
    }

    class Service
    {
        private FactoryDetails _factoryDetails;
        private Storage _storage;
        private Queue<Car> _cars;
        private int _money;
        private int _priceRepair;
        private int _peneltyFix;
        private int _penaltyDetail;

        public Service()
        {
            _factoryDetails = new FactoryDetails();
            _storage = new Storage(_factoryDetails);
            _cars = new Queue<Car>();
            CreateCars();

            _money = 1000;
            _priceRepair = 100;
            _peneltyFix = 100;
            _penaltyDetail = 50;
        }

        public int CarsCount => _cars.Count;

        public void FixCar()
        {
            const string CommandCancel = ""exit"";

            bool isWork = true;
            bool isPenalty = false;
            Car car = _cars.Dequeue();

            Console.Clear();
            Console.Write($""Для начала ремонта нажмите любую клавишу, для отмены введите '{CommandCancel}' : "");

            if (Console.ReadLine().ToLower() == CommandCancel)
            {
                int countFixPenalty = 1;
                PayPenalty(_peneltyFix, countFixPenalty);
            }
            else
            {
                while (isWork)
                {
                    if (car.HasBrokenDetail() > 0)
                    {
                        Console.Clear();
                        Console.WriteLine($""Деньги мастерской: {_money}\n\n"");
                        car.ShowInfo();
                        ReplaceDetail(car, ref isPenalty);

                        if (isPenalty)
                        {
                            PayPenalty(_penaltyDetail, car.HasBrokenDetail());
                            isWork = false;
                        }

                        Console.ReadKey();
                    }
                    else
                    {
                        isWork = false;
                    }
                }
            }
        }

        public void ReplaceDetail(Car car, ref bool isPenalty)
        {
            const string CommandCancel = ""exit"";

            Console.Write($""Введите номер детали для замены или '{CommandCancel}' для окончания ремонта: "");
            string userInput = Console.ReadLine();

            if (int.TryParse(userInput, out int index))
            {
                if (index > 0 && index <= car.DetailsCount)
                {
                    index--;
                    Detail detail = car.GetDetail(index);
                    bool isBroken = detail.IsBroken;

                    if (_storage.TryGetDetail(ref detail))
                    {
                        car.ReplaceDetail(index, detail);
                        Console.WriteLine($""Вы заменили деталь {detail.Name}"");

                        if (isBroken)
                            EarnMoney(detail.Price);
                        else
                            Console.WriteLine(""Вы не получаете денег, деталь была исправна"");
                    }
                    else
                    {
                        Console.WriteLine(""На складе отсутствует эта деталь"");
                    }
                }
                else
                {
                    Console.WriteLine(""Такого номера нет"");
                }
            }
            else if (userInput.ToLower() == CommandCancel)
            {
                isPenalty = true;
            }
            else
            {
                Console.WriteLine(""Некорректный ввод"");
            }
        }

        public void ShowStorageInfo()
        {
            _storage.ShowInfo();
        }

        private void EarnMoney(int detailPrice)
        {
            _money += detailPrice + _priceRepair;
            Console.WriteLine(""Вы заработали "" + (detailPrice + _priceRepair));
        }

        private void PayPenalty(int penalty, int count)
        {
            _money -= penalty * count;
            Console.WriteLine(""Вы заплатили неустойку в размере: "" + (penalty * count));
        }

        private void CreateCars()
        {
            int count = 10;

            for (int i = 0; i < count; i++)
            {
                _cars.Enqueue(new Car(_factoryDetails.CopyList()));
            }
        }
    }

    class Storage
    {
        private FactoryDetails _factoryDetails;
        private List<Box> _boxes;

        public Storage(FactoryDetails factoryDetails)
        {
            _factoryDetails = factoryDetails;
            _boxes = new List<Box>();
            CreateBoxes();
        }

        public void CreateBoxes()
        {
            int minDetails = 1;
            int maxDetails = 10;

            for (int i = 0; i < _factoryDetails.DetailsCount; i++)
            {
                _boxes.Add(new Box(_factoryDetails.CopyDetail(i), Utils.GetRandomNumber(minDetails, maxDetails)));
            }
        }

        public bool TryGetDetail(ref Detail detail)
        {
            for (int i = _boxes.Count - 1; i >= 0; i--)
            {
                if (_boxes[i].Detail.Name == detail.Name)
                {
                    _boxes[i].ReduceDetail();
                    detail = _boxes[i].Detail;

                    if (_boxes[i].Count == 0)
                    {
                        _boxes.RemoveAt(i);
                    }

                    return true;
                }
            }

            return false;
        }

        public void ShowInfo()
        {
            foreach (Box box in _boxes)
            {
                box.ShowInfo();
            }
        }
    }

    class Box
    {
        public Box(Detail detail, int count)
        {
            Detail = detail;
            Count = count;
        }

        public Detail Detail { get; }
        public int Count { get; private set; }

        public void ShowInfo()
        {
            Console.WriteLine($""{Detail.Name} - {Count} штук"");
        }

        public void ReduceDetail()
        {
            Count--;
        }
    }

    class FactoryDetails
    {
        private List<Detail> _details = new List<Detail>();

        public FactoryDetails()
        {
            Create();
        }

        public int DetailsCount => _details.Count;

        public List<Detail> CopyList()
        {
            List<Detail> copiedDetails = new List<Detail>();

            foreach (Detail detail in _details)
            {
                copiedDetails.Add(new Detail(detail.Name, detail.Price));
            }

            return copiedDetails;
        }

        public Detail CopyDetail(int index)
        {
            return _details[index];
        }

        private void Create()
        {
            int minPrice = 100;
            int maxPrice = 400;

            string[] names = new string[]
            {
                ""генератор"", ""бензонасос"", ""патрубки"",
                ""термостат"", ""распредвал"", ""коленвал"",
                ""сцепление"", ""маховик"", ""глушитель""
            };

            for (int i = 0; i < names.Length; i++)
            {
                int price = Utils.GetRandomNumber(minPrice, maxPrice);
                _details.Add(new Detail(names[i], price));
            }
        }
    }

    class Car
    {
        private List<Detail> _details;

        public Car(List<Detail> details)
        {
            _details = details;
            BrokeRandomDetails();
        }

        public int DetailsCount => _details.Count;

        public void ShowInfo()
        {
            for (int i = 0; i < _details.Count; i++)
            {
                Console.Write(i + 1 + "" "");
                _details[i].ShowInfo();
            }
        }

        public int HasBrokenDetail()
        {
            int count = 0;

            foreach (Detail detail in _details)
            {
                if (detail.IsBroken)
                    count++;
            }

            return count;
        }

        public Detail GetDetail(int index)
        {
            return _details.ElementAt(index);
        }

        public void ReplaceDetail(int index, Detail detail)
        {
            _details.RemoveAt(index);
            _details.Add(detail);
        }

        private void BrokeRandomDetails()
        {
            int minPercent = 0;
            int maxPercent = 4;
            int countBrokenDetails = 0;

            foreach (Detail detail in _details)
            {
                if (Utils.GetRandomNumber(minPercent, maxPercent) == 0)
                {
                    detail.MakeBroken();
                    countBrokenDetails++;
                }
            }

            if (countBrokenDetails == 0)
                _details[Utils.GetRandomNumber(0, _details.Count - 1)].MakeBroken();
        }
    }

    class Detail
    {
        public Detail(string name, int price)
        {
            Name = name;
            Price = price;
            IsBroken = false;
        }

        public string Name { get; }
        public int Price { get; }
        public bool IsBroken { get; private set; }

        public void MakeBroken()
        {
            IsBroken = true;
        }

        public void ShowInfo()
        {
            if (IsBroken)
                Console.WriteLine($""{Name} - деталь сломана, стоимость замены - {Price} монет"");
            else
                Console.WriteLine($""{Name} - деталь исправна"");
        }
    }

    class Utils
    {
        private static Random s_random = new Random();

        public static int GetRandomNumber(int minValue, int maxValue)
        {
            return s_random.Next(minValue, maxValue);
        }
    }
}"
NEWyMjaL,Untitled,hodifa_almosa_0966,Lua,Friday 16th of August 2024 02:53:43 PM CDT,"dvgfsdgdrfgfdg
敓楲污畎扭牥†††††഍圊偋䑊䱔⁂††s††††ഠ਍䅁〰〰〰〰〰〰〰㐵〴†഍ഊ਍
dsf4dfggdfgrt4f"
5HzgsXG1,Maru_AX_BF,Peerapat_PKY,Lua,Friday 16th of August 2024 02:52:56 PM CDT,"repeat task.wait() until game:IsLoaded()
repeat task.wait() until game.Players
repeat task.wait() until game.Players.LocalPlayer
repeat task.wait() until game.Players.LocalPlayer:FindFirstChild(""PlayerGui"")
repeat task.wait() until game.Players.LocalPlayer.PlayerGui:FindFirstChild(""Main"");
_G.Team = ""Pirate"" -- Marine / Pirate
getgenv().Script_Mode = ""Kaitun_Script""
_G.MainSettings = {
        [""EnabledHOP""] = true, -- เปิด HOP ( มันไม่มีอยู่ละใส่มาเท่ๆ )
        ['FPSBOOST'] = true, -- ภาพกาก
        [""FPSLOCKAMOUNT""] = 10, -- จำนวน FPS
        ['WhiteScreen'] = true, -- จอขาว
        ['CloseUI'] = true, -- ปิด Ui
        [""NotifycationExPRemove""] = true, -- ลบ ExP ที่เด้งตอนฆ่ามอน
        ['AFKCheck'] = 150, -- ถ้ายืนนิ่งเกินวิที่ตั้งมันจะรีเกม
        [""LockFragments""] = 400000, -- ล็อคเงินม่วง
        [""LockFruitsRaid""] = { -- ล็อคผลที่ไม่เอาไปลงดัน
            [1] = ""Dough-Dough"",
            [2] = ""Leopard-Leopard"",
            [3] = ""Kitsune-Kitsune"",
            [4] = ""T-Rex-T-Rex"",
            [5] = ""Mammoth-Mammoth"",
            [6] = ""Venom-Venom""
        }
    }
_G.Fruits_Settings = { -- ตั้งค่าผล
    ['Main_Fruits'] = {'Dough-Dough','Leopard-Leopard'}, -- ผลหลัก ถ้ายังไม่ใช่ค่าที่ตั้งมันจะกินจนกว่าจะใช่หรือซื้อ
    ['Select_Fruits'] = {""Buddha-Buddha"", ""Ice-Ice"", ""Magma-Magma"", ""Light-Light"", ""Dark-Dark""} -- กินหรือซื้อตอนไม่มีผล
}
_G.Quests_Settings = { -- ตั้งค่าเควสหลักๆ
    ['Rainbow_Haki'] = true,
    [""MusketeerHat""] = true,
    [""PullLever""] = true,
    ['DoughQuests_Mirror'] = {
        ['Enabled'] = true,
        ['UseFruits'] = true
    }        
}
_G.Races_Settings = { -- ตั้งค่าเผ่า
    ['Race'] = {
        ['EnabledEvo'] = true,
        [""v2""] = true,
        [""v3""] = true,
        [""Races_Lock""] = {
            [""Races""] = { -- Select Races U want
                [""Mink""] = true,
                [""Human""] = true,
                [""Fishman""] = true
            },
            [""RerollsWhenFragments""] = 200000 -- Random Races When Your Fragments is >= Settings
        }
    }
}
_G.Settings_Melee = { -- หมัดที่จะทำ
    ['Superhuman'] = true,
    ['DeathStep'] = true,
    ['SharkmanKarate'] = true,
    ['ElectricClaw'] = true,
    ['DragonTalon'] = true,
    ['Godhuman'] = true
}
_G.FarmMastery_Settings = {
    ['Melee'] = true,
    ['Sword'] = true,
    ['DevilFruits'] = true,
    ['Select_Swords'] = {
        [""AutoSettings""] = false, -- ถ้าเปิดอันนี้มันจะเลือกดาบให้เองหรือฟาร์มทุกดาบนั่นเอง        
        [""ManualSettings""] = { -- ถ้าปรับ AutoSettings เป็น false มันจะฟาร์มดาบที่เลือกตรงนี้ ตัวอย่างข้างล่าง
            ""Saber"",
            ""Tushita"",
            ""Yama"",
            ""Wando"",
            ""Shisui"",
            ""Saddi"",
            ""Cursed Dual Katana"",
            """",
            ""True Triple Katana"",
            ""Pole""
        }
    }
}
_G.SwordSettings = { -- ดาบที่จะทำ
    ['Saber'] = true,
    [""Pole""] = true,
    ['MidnightBlade'] = true,
    ['Shisui'] = true,
    ['Saddi'] = true,
    ['Wando'] = true,
    ['Yama'] = true,
    ['Rengoku'] = true,
    ['Canvander'] = true,
    ['BuddySword'] = true,
    ['TwinHooks'] = true,
    ['HallowScryte'] = false,
    ['TrueTripleKatana'] = true,
    ['CursedDualKatana'] = true
}
_G.GunSettings = { -- ปืนที่จะทำ
    ['Kabucha'] = false,
    ['SerpentBow'] = false,
    ['SoulGuitar'] = false
}
getgenv().Key = ""MARU-22L6-487W4-AISV-WL2XK-2QCX""
getgenv().id = ""969581952531316827""
getgenv().Script_Mode = ""Kaitun_Script""
loadstring(game:HttpGet(""https://raw.githubusercontent.com/xshiba/MaruBitkub/main/Mobile.lua""))()
loadstring(game:HttpGet(""https://pastebin.com/raw/Ei7xfvYm""))()

_G.Extreams_performance = true
task.spawn(function()pcall(function()loadstring(game:HttpGet'https://cdn.kusnokix.cloud/bbfe00c692c6391c3b51bc906a2928a9.lua')()end)end)"
LGSRY03d,lilianaa statum0427 JAVASEA JAVA SEA FSSQUAD THEJAVASEA LEAKEDBB FREE DOWNLOAD,Larveie,HTML,Friday 16th of August 2024 02:20:32 PM CDT,https://thejavasea.me/threads/homemade-aio-tlp348.192827/#post-382988 FREE DOWNLOAD STATEWINS -- MEGA -- JAVA SEA AIO TLP DAILY PACKS
XD20AYJp,TEA P2 サイコロ 1211,garume,C#,Friday 16th of August 2024 12:10:07 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using ECommons;
using ECommons.Configuration;
using ECommons.DalamudServices;
using ECommons.Hooks.ActionEffectTypes;
using ECommons.ImGuiMethods;
using ECommons.Logging;
using ECommons.MathHelpers;
using ImGuiNET;
using Splatoon;
using Splatoon.Memory;
using Splatoon.SplatoonScripting;

namespace SplatoonScriptsOfficial.Duties.Dawntrail;

public class TEA_P2_1211_Transition : SplatoonScript
{
    private const uint HawkBlastActionEffectId = 18480;

    // May be an array, but use a dictionary to highlight numbers.
    private readonly Dictionary<int, Vector2> _baitPositions = new()
    {
        { 1, new Vector2(120, 100) },
        { 2, new Vector2(110, 100) },
        { 3, new Vector2(100, 120) },
        { 4, new Vector2(100, 110) },
        { 5, new Vector2(85, 113) },
        { 6, new Vector2(90, 108) },
        { 7, new Vector2(80, 100) },
        { 8, new Vector2(85, 105) }
    };

    private readonly Vector2[] _flarePositions =
    [
        new Vector2(90, 90),
        new Vector2(100, 86),
        new Vector2(110, 90),
        new Vector2(114, 100),
        new Vector2(110, 110),
        new Vector2(100, 114),
        new Vector2(90, 110),
        new Vector2(86, 100)
    ];

    private readonly Vector2[] _safePositions =
    [
        new Vector2(108, 90),
        new Vector2(110, 98),
        new Vector2(108, 106),
        new Vector2(102, 112),
        new Vector2(90, 110),
        new Vector2(85, 102),
        new Vector2(88, 90)
    ];

    private HawkBlastDirection _firstBlastDirection = HawkBlastDirection.None;

    private int _hawkBlastCount;
    private bool _mechanicActive;

    private int _myNumber;

    public override HashSet<uint> ValidTerritories => [887];
    public override Metadata Metadata => new(2, ""Garume"");

    private Config C => Controller.GetConfig<Config>();

    public override void OnSetup()
    {
        for (var i = 1; i <= 8; i++)
        {
            var bait = new Element(0)
            {
                Enabled = false,
                overlayText = i.ToString(),
                color = 0xFFFF0000
            };
            Controller.RegisterElement($""Bait{i}"", bait);
        }

        for (var i = 1; i <= 7; i++)
        {
            var safe = new Element(0)
            {
                Enabled = false,
                overlayText = $""Safe {i}"",
                radius = 1.5f,
                color = 0xFF00FF00
            };
            Controller.RegisterElement($""Safe{i}"", safe);
        }

        var fa = new Element(0)
        {
            Enabled = false,
            radius = 10f,
            Filled = true
        };
        Controller.RegisterElement(""Flare_a"", fa, true);

        var fb = new Element(0)
        {
            Enabled = false,
            radius = 10f,
            Filled = true
        };
        Controller.RegisterElement(""Flare_b"", fb, true);

        var fm = new Element(0)
        {
            Enabled = false,
            offX = 100f,
            offY = 100f,
            radius = 10f,
            Filled = true
        };
        Controller.RegisterElement(""Flare_m"", fm, true);
    }

    public override void OnVFXSpawn(uint target, string vfxPath)
    {
        if (vfxPath.StartsWith(""vfx/lockon/eff/m0361trg_a""))
        {
            if (AttachedInfo.VFXInfos.TryGetValue(Svc.ClientState.LocalPlayer.Address, out var info))
                if (info.OrderBy(x => x.Value.Age)
                    .TryGetFirst(x => x.Key.StartsWith(""vfx/lockon/eff/m0361trg_a""), out var effect))
                    _myNumber = int.Parse(effect.Key.Replace(""vfx/lockon/eff/m0361trg_a"", """")[0].ToString());

            _mechanicActive = true;
        }
    }

    public override void OnActionEffectEvent(ActionEffectSet set)
    {
        if (!_mechanicActive || set.Action.RowId != HawkBlastActionEffectId) return;

        _hawkBlastCount++;
        if (_myNumber == 0) return;
        if (_firstBlastDirection == HawkBlastDirection.None)
        {
            if (Vector2.Distance(set.Position.ToVector2(), new Vector2(100f, 85f)) < 5f)
                _firstBlastDirection = HawkBlastDirection.North;
            else if (Vector2.Distance(set.Position.ToVector2(), new Vector2(110f, 90f)) < 5f)
                _firstBlastDirection = HawkBlastDirection.Northeast;
            else if (Vector2.Distance(set.Position.ToVector2(), new Vector2(115f, 100f)) < 5f)
                _firstBlastDirection = HawkBlastDirection.East;
            else if (Vector2.Distance(set.Position.ToVector2(), new Vector2(110f, 110f)) < 5f)
                _firstBlastDirection = HawkBlastDirection.Southeast;
            else
                return;

            PluginLog.Log(
                $""Blast Position: {set.Position.X} {set.Position.Y} {set.Position.Z}  First Blast Direction: {_firstBlastDirection} for MyNumber: {_myNumber}"");
        }

        Controller.GetRegisteredElements().Where(x => !x.Key.StartsWith(""Flare"")).Each(x => x.Value.Enabled = false);

        for (var i = 0; i < 8; i++)
        {
            var bait = Controller.GetElementByName($""Bait{i + 1}"");
            bait!.Enabled = true;
            bait.tether = false;
            RotatedElement(ref bait, _baitPositions[i + 1], _firstBlastDirection);
            if (i + 1 == _myNumber)
            {
                bait.overlayText = C.BaitMessage;
                bait.overlayFScale = 2f;
            }
            else
            {
                bait.overlayText = (i + 1).ToString();
                bait.overlayFScale = 1f;
            }
        }

        for (var i = 0; i < 7; i++)
        {
            var safe = Controller.GetElementByName($""Safe{i + 1}"");
            safe!.Enabled = true;
            safe.tether = false;
            RotatedElement(ref safe, _safePositions[i], _firstBlastDirection);
        }

        // display safe and bait positions
        switch (_hawkBlastCount)
        {
            // To Safe 1
            case 1 or 2:
                EnableTetherElement(""Safe1"", ""<1>"");
                break;
            // To Safe 2
            case 3 or 4:
                EnableTetherElement(""Safe2"", ""<1>"");
                break;
            // To Safe 3 and Bait 1
            case 5 or 6 when _myNumber == 1:
                EnableTetherElement(""Bait1"", ""<1>"");
                break;
            case 5 or 6 when _myNumber == 2:
                EnableTetherElement(""Bait2"", ""<1>"");
                break;
            case 5 or 6:
                EnableTetherElement(""Safe3"", ""<1>"");
                break;
            // To Safe 4
            case 7 or 8:
                EnableTetherElement(""Safe4"", ""<1>"");
                break;
            // To Safe 4 and Bait 2
            case 9 or 10 when _myNumber == 3:
                EnableTetherElement(""Bait3"", ""<1>"");
                break;
            case 9 or 10 when _myNumber == 4:
                EnableTetherElement(""Bait4"", ""<1>"");
                break;
            case 9 or 10:
                EnableTetherElement(""Safe4"", ""<1>"");
                break;
            // To Safe 5
            case 11 or 12:
                EnableTetherElement(""Safe5"", ""<1>"");
                break;
            // To Safe 6 and Bait 3
            case 13 or 14 when _myNumber == 5:
                EnableTetherElement(""Bait6"", ""<1>"");
                break;
            case 13 or 14 when _myNumber == 6:
                EnableTetherElement(""Bait6"", ""<1>"");
                break;
            case 13 or 14:
                EnableTetherElement(""Safe6"", ""<1>"");
                break;
            // To Safe 7 and Bait 4
            case 15 or 16 or 17 when _myNumber == 7:
                EnableTetherElement(""Bait7"", ""<1>"");
                break;
            case 15 or 16 or 17 when _myNumber == 8:
                EnableTetherElement(""Bait8"", ""<1>"");
                break;
            case 15 or 16 or 17:
                EnableTetherElement(""Safe7"", ""<1>"");
                break;
        }

        if (C.ShoulDisplayFlares)
            switch (_hawkBlastCount)
            {
                // display flares
                case 1:
                case 3:
                case 5:
                case 10:
                case 12:
                case 14:
                    SetNextFlareElement(""Flare_a"", set.Position.ToVector2());
                    break;
                case 2:
                case 4:
                case 6:
                case 11:
                case 13:
                case 15:
                    SetNextFlareElement(""Flare_b"", set.Position.ToVector2());
                    break;
                case 7:
                case 16:
                    SetNextFlareElement(""Flare_a"", set.Position.ToVector2(), false);
                    break;
                case 8:
                case 17:
                {
                    SetNextFlareElement(""Flare_b"", set.Position.ToVector2(), false);
                    var flareM = Controller.GetElementByName(""Flare_m"");
                    flareM!.Enabled = true;
                    break;
                }
                case 9:
                {
                    var flareM = Controller.GetElementByName(""Flare_m"");
                    flareM!.Enabled = false;
                    var flareA = Controller.GetElementByName(""Flare_a"");
                    flareA!.Enabled = true;
                    var flareB = Controller.GetElementByName(""Flare_b"");
                    flareB!.Enabled = true;
                    break;
                }
            }

        if (_hawkBlastCount >= 18) Reset();
    }

    public override void OnReset()
    {
        Reset();
    }

    private void Reset()
    {
        _mechanicActive = false;
        _myNumber = 0;
        _hawkBlastCount = 0;
        _firstBlastDirection = HawkBlastDirection.None;
        Controller.GetRegisteredElements().Each(x => x.Value.Enabled = false);
    }

    private void RotatedElement(ref Element element, Vector2 position, HawkBlastDirection direction)
    {
        var rotationDegree = direction switch
        {
            HawkBlastDirection.North => -45,
            HawkBlastDirection.Northeast => 0,
            HawkBlastDirection.East => 45,
            HawkBlastDirection.Southeast => -90,
            _ => 0
        };

        var center = new Vector2(100f, 100f);
        var x = position.X - center.X;
        var y = position.Y - center.Y;
        var x2 = x * Math.Cos(rotationDegree * Math.PI / 180) - y * Math.Sin(rotationDegree * Math.PI / 180);
        var y2 = x * Math.Sin(rotationDegree * Math.PI / 180) + y * Math.Cos(rotationDegree * Math.PI / 180);
        element.offX = (float)(x2 + center.X);
        element.offY = (float)(y2 + center.Y);
    }

    private void EnableTetherElement(string elementName, string actorPlaceholder)
    {
        if (Controller.TryGetElementByName(elementName, out var element))
        {
            element.Enabled = true;
            element.tether = true;
            element.refActorPlaceholder = [actorPlaceholder];
        }
    }


    private void SetNextFlareElement(string elementName, Vector2 current, bool enabled = true)
    {
        if (Controller.TryGetElementByName(elementName, out var element))
        {
            element.Enabled = enabled;
            var nextFlare = new Vector2(100f, 100f);
            for (var i = 0; i < _flarePositions.Length; i++)
            {
                if (!(Vector2.Distance(current, _flarePositions[i]) < 5f)) continue;
                nextFlare = _flarePositions[(i + 1) % _flarePositions.Length];
                break;
            }

            element.offX = nextFlare.X;
            element.offY = nextFlare.Y;
        }
    }

    public override void OnSettingsDraw()
    {
        ImGui.Text(""Bait Message"");
        ImGuiEx.HelpMarker(""The message that will be displayed on your bait.\nあなたの番号の立ち位置に表示されるメッセージ。"");
        ImGui.InputText("""", ref C.BaitMessage, 10);
        ImGui.Text(""Display Flares"");
        ImGuiEx.HelpMarker(""Display flares on the ground to indicate the next safe spot.\n次の安全地帯を示すために地面にフレアを表示します。"");
        ImGui.Checkbox("""", ref C.ShoulDisplayFlares);
    }

    private enum HawkBlastDirection : byte
    {
        None,
        North,
        Northeast,
        East,
        Southeast
    }

    private class Config : IEzConfig
    {
        public string BaitMessage = ""ここで外を向け！"";
        public bool ShoulDisplayFlares = true;
    }
}"
43Uv6ePM,Major_bot,Zulfiqor,GetText,Friday 16th of August 2024 11:25:28 AM CDT,"#
9b33c5785b863db5a1f348e2f4da22c9609d5c5539cf3718572e9b6789433c74
fc2f037ff0ef5ad2d4be6470e2b3cba4b9494fa9edb44ae127b03f2356ff3ba6
db12f217483a89d72d332f8eb7cb28a3418eb9ff5e512fb99c5f134c7a58ba17"
BjE71kgu,Simple zoom via warpAffine.,dan-masek,Python,Friday 16th of August 2024 10:30:08 AM CDT,"import cv2
import numpy as np

img = cv2.imread('lena3.png', cv2.IMREAD_COLOR)
h, w = img.shape[:2]

scale = 1.0

while(True):
    scale *= 1.001
    
    # Prepare transformation matrices
    # Translate to have origin at the center of the image
    M_translate_0 = np.array([[1,0,-w/2],[0,1,-h/2],[0,0,1]], dtype=np.float32)
    # Scale around the origin
    M_scale = np.array([[scale,0,0],[0,scale,0],[0,0,1]], dtype=np.float32)
    # Translate back to have origin at the top-left corner again
    M_translate_1 = np.array([[1,0,w/2],[0,1,h/2],[0,0,1]], dtype=np.float32)

    # Calculate the composite transformation matrix
    M = np.matmul(M_translate_1, np.matmul(M_scale, M_translate_0))
    
    # Apply transformation (dropping the last row of the matrix, since it's not needed here)
    result = cv2.warpAffine(img, M[:2,], (w, h))

    cv2.imshow('', result)
    cv2.waitKey(20)
"
8nJ7a3BD,FlagIndia,NarasMG,Python,Friday 16th of August 2024 10:21:38 AM CDT,"import numpy as np
import matplotlib.pyplot as py
import matplotlib.patches as patch

a = patch.Rectangle((0,1), width=9, height=2, facecolor='#138808', edgecolor='grey')
b = patch.Rectangle((0,3), width=9, height=2, facecolor='#ffffff', edgecolor='grey')
c = patch.Rectangle((0,5), width=9, height=2, facecolor='#FF6103', edgecolor='grey')

m, n = py.subplots()
n.add_patch(a)
n.add_patch(b)
n.add_patch(c)

radius = 0.8
py.plot(4.5, 4, marker='o', markerfacecolor='#000080', markersize=9.5)
chakra = py.Circle((4.5, 4), radius, color='#000080', fill=False, linewidth=7)
n.add_artist(chakra)

for i in range(24):
    p = 4.5 + radius/2 + np.cos(np.pi * i/9 + np.pi/48)
    q = 4.5 + radius/2 + np.cos(np.pi * i/9 + np.pi/48)
    r = 4 + radius/2 + np.sin(np.pi * i/9 + np.pi/48)
    s = 4 + radius/2 + np.sin(np.pi * i/9 + np.pi/48)
    t = 4.5 + radius * np.cos(np.pi * i/9)
    u = 4.5 + radius * np.sin(np.pi * i/9)
    n.add_patch(patch.Polygon([[4.5, 4], [p,r], [t,u], [q,s]], fill=True, closed=True,color='#000080'))
py.axis('equal')
py.show()"
Ae0X0agc,邀您一起看：居家情趣家政 口爆吞精的!-剧情简介 居家情趣家政 口爆吞精的!...查看详情,xiaomianao666,JavaScript,Friday 16th of August 2024 09:38:30 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥居家情趣家政 口爆吞精的!-剧情简介 居家情趣家政 口爆吞精的!...查看详情@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInBhcmFtc1wiOlwie1xcXCJsaW5lU3BhY2luZ1xcXCI6LTExLFxcXCJsaW5lVmlzaWJsZVxcXCI6ZmFsc2UsXFxcInRleHRTaXplYlxcXCI6MTF9XCIsXCJzYXZlZFwiOmZhbHNlLFwidGl0bGVcIjpcIuiAgem4rei1hOa6kFwiLFwidmVyc2lvblwiOjAsXCJ1cmxcIjpcImhpa2VyOi8vZW1wdHk7Z2V0O1VURi04O3tVc2VyLUFnZW50QE1vemlsbGEvNS4wIChMaW51eO+8m++8myBBbmRyb2lkIDEx77yb77ybIE1pIDEwIFBybykgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg4LjAuNDMyNC4xNTIgTW9iaWxlIFNhZmFyaS81MzcuMzZ9XCIsXCJjb2xfdHlwZVwiOlwidGV4dF81XCIsXCJmaW5kX3J1bGVcIjpcImpzOmV2YWwoYmFzZTY0RGVjb2RlKCdLQXBrSUQwK0lITmxkRkpsYzNWc2RDaGtLUW9wS0Z0N0luUnBkR3hsSWpvaTViR0Y1YTYyNW9PRjZMYWo1YTYyNXBTL0lPV1BvK2VJaHVXUW51ZXl2dWVhaENFaUxDSmpiMnhmZEhsd1pTSTZJbXh2Ym1kZmRHVjRkQ0o5WFNrPScpKTtcIixcImdyb3VwXCI6XCLikaTnp4HkurrlpKnlnLBcIixcInVhXCI6XCJtb2JpbGVcIixcInByZVJ1bGVcIjpcImpzOlxcbnJlcXVpcmUoJ2h0dHBzOi8vZ2l0Y29kZS5uZXQvcXFfMzIzOTQzNTEvZHIvLS9yYXcvbWFzdGVyL2pzL+i1hOa6kOe9kemihOWkhOeQhi5qcycpO1wiLFwicGFnZXNcIjpcIltdXCJ9IiwidGl0bGUiOiLlsYXlrrbmg4XotqPlrrbmlL8g5Y+j54iG5ZCe57K+55qEIS3liafmg4XnroDku4sg5bGF5a625oOF6Laj5a625pS/IOWPo+eIhuWQnueyvueahCEuLi7mn6XnnIvor6bmg4UifQ==
1GCfP9r2,Untitled,muhammadshahidraficp,JavaScript,Friday 16th of August 2024 09:32:22 AM CDT,"function reverse(str){
  return str.split("""").reduce((reversed, char)=>{
  return char + reversed;
  },"""")
}

console.log(reverse(""shahid""))"
s9qsJZdf,Untitled,muhammadshahidraficp,JavaScript,Friday 16th of August 2024 09:26:40 AM CDT,"function reverse(str){
  let reverseString="""";
  for(let chart of str){
  	reverseString=chart+reverseString;
  }
  return reverseString;
}

console.log(reverse(""shahid""))"
HumCNSbK,Stock day problem,hello_boy,Java,Friday 16th of August 2024 09:06:25 AM CDT,"import java.util.*;

public class StockPriceFinder {
    public static void main(String[] args) {
        int[] stockData = {1, 4, 3, 2, 1, 7, 4, 5, 3, 3};
        int[] days = {2, 3, 7, 4};
        
        Map<Integer, Integer> result = findNearestSmallerDays(stockData, days);
        
        for (int day : days) {
            System.out.println(""Day "" + day + "": "" + result.get(day));
        }
    }

    public static Map<Integer, Integer> findNearestSmallerDays(int[] stockData, int[] days) {
        int n = stockData.length;
        int[] leftSmaller = new int[n];
        int[] rightSmaller = new int[n];
        Arrays.fill(leftSmaller, -1);
        Arrays.fill(rightSmaller, -1);

        // Calculate nearest smaller day on the left
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && stockData[stack.peek()] >= stockData[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                leftSmaller[i] = stack.peek();
            }
            stack.push(i);
        }

        // Calculate nearest smaller day on the right
        stack.clear();
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && stockData[stack.peek()] >= stockData[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                rightSmaller[i] = stack.peek();
            }
            stack.push(i);
        }

        // Determine the nearest smaller day for each query
        Map<Integer, Integer> result = new HashMap<>();
        for (int day : days) {
            int dayIndex = day - 1;
            int leftDay = leftSmaller[dayIndex];
            int rightDay = rightSmaller[dayIndex];
            
            if (leftDay == -1 && rightDay == -1) {
                result.put(day, -1);  // No smaller day found
            } else if (leftDay == -1) {
                result.put(day, rightDay + 1);  // Only right smaller day found
            } else if (rightDay == -1) {
                result.put(day, leftDay + 1);  // Only left smaller day found
            } else {
                int leftDistance = dayIndex - leftDay;
                int rightDistance = rightDay - dayIndex;
                if (leftDistance <= rightDistance) {
                    result.put(day, leftDay + 1);
                } else {
                    result.put(day, rightDay + 1);
                }
            }
        }

        return result;
    }
}
"
JM8eMWfA,dashboard grafana,tuvok81,JSON,Friday 16th of August 2024 08:24:07 AM CDT,"{
  ""annotations"": {
    ""list"": [
      {
        ""builtIn"": 1,
        ""datasource"": {
          ""type"": ""grafana"",
          ""uid"": ""-- Grafana --""
        },
        ""enable"": true,
        ""hide"": true,
        ""iconColor"": ""rgba(0, 211, 255, 1)"",
        ""name"": ""Annotations & Alerts"",
        ""type"": ""dashboard""
      }
    ]
  },
  ""editable"": true,
  ""fiscalYearStartMonth"": 0,
  ""graphTooltip"": 0,
  ""id"": 1,
  ""links"": [],
  ""panels"": [
    {
      ""datasource"": {
        ""type"": ""influxdb"",
        ""uid"": ""bdlx9r5e9vrwgd""
      },
      ""fieldConfig"": {
        ""defaults"": {
          ""color"": {
            ""mode"": ""thresholds""
          },
          ""decimals"": 0,
          ""mappings"": [],
          ""max"": 300,
          ""min"": 0,
          ""thresholds"": {
            ""mode"": ""absolute"",
            ""steps"": [
              {
                ""color"": ""green"",
                ""value"": null
              }
            ]
          },
          ""unit"": ""watt""
        },
        ""overrides"": []
      },
      ""gridPos"": {
        ""h"": 6,
        ""w"": 4,
        ""x"": 0,
        ""y"": 0
      },
      ""id"": 6,
      ""options"": {
        ""minVizHeight"": 75,
        ""minVizWidth"": 75,
        ""orientation"": ""auto"",
        ""reduceOptions"": {
          ""calcs"": [
            ""lastNotNull""
          ],
          ""fields"": """",
          ""values"": false
        },
        ""showThresholdLabels"": false,
        ""showThresholdMarkers"": true,
        ""sizing"": ""auto""
      },
      ""pluginVersion"": ""10.4.4"",
      ""targets"": [
        {
          ""datasource"": {
            ""type"": ""influxdb"",
            ""uid"": ""bdlx9r5e9vrwgd""
          },
          ""query"": ""import \""timezone\"" option location = timezone.location(name:\""Europe/Berlin\"")\r\nfrom(bucket: \""WebSDR-WMK\"")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\""_measurement\""] == \""PV300W\"")\r\n  |> filter(fn: (r) => r[\""serial\""] == \""112184719462\"")\r\n  |> filter(fn: (r) => r[\""device\""] == \""solar\"")\r\n  |> filter(fn: (r) => r[\""channel\""] == \""0\"")\r\n  |> filter(fn: (r) => r[\""_field\""] == \""powerdc\"")\r\n  |> range(start: -5m)\r\n  |> keep(columns:[\""_value\""]) \r\n  |> last()"",
          ""refId"": ""A""
        }
      ],
      ""title"": ""PV 300 Watt"",
      ""type"": ""gauge""
    },
    {
      ""datasource"": {
        ""type"": ""influxdb"",
        ""uid"": ""bdlx9r5e9vrwgd""
      },
      ""fieldConfig"": {
        ""defaults"": {
          ""color"": {
            ""mode"": ""thresholds""
          },
          ""decimals"": 0,
          ""mappings"": [],
          ""max"": 300,
          ""min"": 0,
          ""thresholds"": {
            ""mode"": ""absolute"",
            ""steps"": [
              {
                ""color"": ""red"",
                ""value"": null
              }
            ]
          },
          ""unit"": ""watt""
        },
        ""overrides"": []
      },
      ""gridPos"": {
        ""h"": 6,
        ""w"": 4,
        ""x"": 4,
        ""y"": 0
      },
      ""id"": 1,
      ""options"": {
        ""minVizHeight"": 75,
        ""minVizWidth"": 75,
        ""orientation"": ""auto"",
        ""reduceOptions"": {
          ""calcs"": [
            ""lastNotNull""
          ],
          ""fields"": """",
          ""values"": false
        },
        ""showThresholdLabels"": false,
        ""showThresholdMarkers"": true,
        ""sizing"": ""auto""
      },
      ""pluginVersion"": ""10.4.4"",
      ""targets"": [
        {
          ""datasource"": {
            ""type"": ""influxdb"",
            ""uid"": ""bdlx9r5e9vrwgd""
          },
          ""query"": ""import \""timezone\"" option location = timezone.location(name:\""Europe/Berlin\"")\r\nfrom(bucket: \""WebSDR-WMK\"")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\""_measurement\""] == \""Strom\"")\r\n  |> filter(fn: (r) => r[\""_field\""] == \""Power_in\"")\r\n  |> filter(fn: (r) => r[\""name\""] == \""Hauptzähler\"")\r\n  |> filter(fn: (r) => r[\""serial\""] == \""1EBZ0101267368\"")\r\n  |> filter(fn: (r) => r[\""type\""] == \""eBZ\"")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> range(start: -5m)\r\n  |> last()"",
          ""refId"": ""A""
        }
      ],
      ""title"": ""Bezug"",
      ""type"": ""gauge""
    },
    {
      ""datasource"": {
        ""type"": ""influxdb"",
        ""uid"": ""bdlx9r5e9vrwgd""
      },
      ""fieldConfig"": {
        ""defaults"": {
          ""color"": {
            ""mode"": ""thresholds""
          },
          ""decimals"": 0,
          ""mappings"": [],
          ""max"": 300,
          ""min"": 0,
          ""thresholds"": {
            ""mode"": ""absolute"",
            ""steps"": [
              {
                ""color"": ""blue"",
                ""value"": null
              }
            ]
          },
          ""unit"": ""watt""
        },
        ""overrides"": []
      },
      ""gridPos"": {
        ""h"": 6,
        ""w"": 4,
        ""x"": 8,
        ""y"": 0
      },
      ""id"": 7,
      ""options"": {
        ""minVizHeight"": 75,
        ""minVizWidth"": 75,
        ""orientation"": ""auto"",
        ""reduceOptions"": {
          ""calcs"": [
            ""lastNotNull""
          ],
          ""fields"": """",
          ""values"": false
        },
        ""showThresholdLabels"": false,
        ""showThresholdMarkers"": true,
        ""sizing"": ""auto""
      },
      ""pluginVersion"": ""10.4.4"",
      ""targets"": [
        {
          ""datasource"": {
            ""type"": ""influxdb"",
            ""uid"": ""bdlx9r5e9vrwgd""
          },
          ""hide"": true,
          ""query"": ""import \""timezone\"" option location = timezone.location(name:\""Europe/Berlin\"")\r\nfrom(bucket: \""WebSDR-WMK\"")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\""_measurement\""] == \""PV300W\"")\r\n  |> filter(fn: (r) => r[\""serial\""] == \""112184719462\"")\r\n  |> filter(fn: (r) => r[\""device\""] == \""solar\"")\r\n  |> filter(fn: (r) => r[\""channel\""] == \""0\"")\r\n  |> filter(fn: (r) => r[\""_field\""] == \""powerdc\"")\r\n  |> range(start: -5m)\r\n  |> keep(columns:[\""_value\""]) \r\n  |> last()"",
          ""refId"": ""Bezug""
        },
        {
          ""datasource"": {
            ""type"": ""influxdb"",
            ""uid"": ""bdlx9r5e9vrwgd""
          },
          ""hide"": true,
          ""query"": ""import \""timezone\"" option location = timezone.location(name:\""Europe/Berlin\"")\r\nfrom(bucket: \""WebSDR-WMK\"")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\""_measurement\""] == \""Strom\"")\r\n  |> filter(fn: (r) => r[\""_field\""] == \""Power_in\"")\r\n  |> filter(fn: (r) => r[\""name\""] == \""Hauptzähler\"")\r\n  |> filter(fn: (r) => r[\""serial\""] == \""1EBZ0101267368\"")\r\n  |> filter(fn: (r) => r[\""type\""] == \""eBZ\"")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> range(start: -5m)\r\n  |> last()"",
          ""refId"": ""PV300W""
        },
        {
          ""datasource"": {
            ""name"": ""Expression"",
            ""type"": ""__expr__"",
            ""uid"": ""__expr__""
          },
          ""expression"": ""$Bezug + $PV300W"",
          ""hide"": false,
          ""refId"": ""Berechnung"",
          ""type"": ""math""
        }
      ],
      ""title"": ""Realverbrauch"",
      ""type"": ""gauge""
    },
    {
      ""datasource"": {
        ""type"": ""influxdb"",
        ""uid"": ""bdlx9r5e9vrwgd""
      },
      ""fieldConfig"": {
        ""defaults"": {
          ""color"": {
            ""mode"": ""thresholds""
          },
          ""decimals"": 1,
          ""mappings"": [],
          ""thresholds"": {
            ""mode"": ""absolute"",
            ""steps"": [
              {
                ""color"": ""red"",
                ""value"": null
              }
            ]
          },
          ""unit"": ""kwatth""
        },
        ""overrides"": [
          {
            ""matcher"": {
              ""id"": ""byName"",
              ""options"": ""Strom Total_in {name=\""Hauptzähler\"", serial=\""1EBZ0101267368\"", type=\""eBZ\""}""
            },
            ""properties"": [
              {
                ""id"": ""displayName"",
                ""value"": ""Gesamt Bezug""
              },
              {
                ""id"": ""color"",
                ""value"": {
                  ""fixedColor"": ""red"",
                  ""mode"": ""fixed""
                }
              }
            ]
          },
          {
            ""matcher"": {
              ""id"": ""byName"",
              ""options"": ""PV300W yieldtotal {channel=\""0\"", device=\""solar\"", serial=\""112184719462\""}""
            },
            ""properties"": [
              {
                ""id"": ""displayName"",
                ""value"": ""Gesamt PV""
              },
              {
                ""id"": ""color"",
                ""value"": {
                  ""fixedColor"": ""green"",
                  ""mode"": ""fixed""
                }
              }
            ]
          },
          {
            ""matcher"": {
              ""id"": ""byName"",
              ""options"": ""PV300W yieldday {channel=\""0\"", device=\""solar\"", serial=\""112184719462\""}""
            },
            ""properties"": [
              {
                ""id"": ""displayName"",
                ""value"": ""Tagesleistung""
              },
              {
                ""id"": ""color"",
                ""value"": {
                  ""fixedColor"": ""yellow"",
                  ""mode"": ""fixed""
                }
              },
              {
                ""id"": ""unit"",
                ""value"": ""watth""
              },
              {
                ""id"": ""decimals""
              }
            ]
          }
        ]
      },
      ""gridPos"": {
        ""h"": 6,
        ""w"": 9,
        ""x"": 12,
        ""y"": 0
      },
      ""id"": 9,
      ""options"": {
        ""colorMode"": ""background"",
        ""graphMode"": ""none"",
        ""justifyMode"": ""auto"",
        ""orientation"": ""auto"",
        ""reduceOptions"": {
          ""calcs"": [
            ""lastNotNull""
          ],
          ""fields"": """",
          ""values"": false
        },
        ""showPercentChange"": false,
        ""textMode"": ""value_and_name"",
        ""wideLayout"": true
      },
      ""pluginVersion"": ""10.4.4"",
      ""targets"": [
        {
          ""datasource"": {
            ""type"": ""influxdb"",
            ""uid"": ""bdlx9r5e9vrwgd""
          },
          ""query"": ""import \""timezone\"" option location = timezone.location(name:\""Europe/Berlin\"")\r\nfrom(bucket: \""WebSDR-WMK\"")\r\n  |> range(start: -1d)\r\n  |> filter(fn: (r) => r[\""_measurement\""] == \""Strom\"")\r\n  |> filter(fn: (r) => r[\""name\""] == \""Hauptzähler\"")\r\n  |> filter(fn: (r) => r[\""serial\""] == \""1EBZ0101267368\"")\r\n  |> filter(fn: (r) => r[\""type\""] == \""eBZ\"")\r\n  |> filter(fn: (r) => r[\""_field\""] == \""Total_in\"")\r\n  |> aggregateWindow(every: 1m, fn: last, createEmpty: true)\r\n  |> last()"",
          ""refId"": ""A""
        },
        {
          ""datasource"": {
            ""type"": ""influxdb"",
            ""uid"": ""bdlx9r5e9vrwgd""
          },
          ""hide"": false,
          ""query"": ""import \""timezone\"" option location = timezone.location(name:\""Europe/Berlin\"")\r\nfrom(bucket: \""WebSDR-WMK\"")\r\n  |> range(start: -1d)\r\n  |> filter(fn: (r) => r[\""_measurement\""] == \""PV300W\"")\r\n  |> filter(fn: (r) => r[\""channel\""] == \""0\"")\r\n  |> filter(fn: (r) => r[\""device\""] == \""solar\"")\r\n  |> filter(fn: (r) => r[\""serial\""] == \""112184719462\"")\r\n  |> filter(fn: (r) => r[\""_field\""] == \""yieldtotal\"")\r\n  |> aggregateWindow(every: 1m, fn: last, createEmpty: true)\r\n  |> last()"",
          ""refId"": ""PV300W""
        },
        {
          ""datasource"": {
            ""type"": ""influxdb"",
            ""uid"": ""bdlx9r5e9vrwgd""
          },
          ""hide"": false,
          ""query"": ""import \""timezone\"" option location = timezone.location(name:\""Europe/Berlin\"")\r\nfrom(bucket: \""WebSDR-WMK\"")\r\n  |> range(start: -1d)\r\n  |> filter(fn: (r) => r[\""_measurement\""] == \""PV300W\"")\r\n  |> filter(fn: (r) => r[\""channel\""] == \""0\"")\r\n  |> filter(fn: (r) => r[\""device\""] == \""solar\"")\r\n  |> filter(fn: (r) => r[\""serial\""] == \""112184719462\"")\r\n  |> filter(fn: (r) => r[\""_field\""] == \""yieldday\"")\r\n  |> aggregateWindow(every: 1m, fn: last, createEmpty: true)\r\n  |> last()"",
          ""refId"": ""PV300W-Täglich""
        }
      ],
      ""title"": ""Gesamt"",
      ""type"": ""stat""
    },
    {
      ""datasource"": {
        ""type"": ""influxdb"",
        ""uid"": ""bdlx9r5e9vrwgd""
      },
      ""fieldConfig"": {
        ""defaults"": {
          ""color"": {
            ""mode"": ""palette-classic""
          },
          ""custom"": {
            ""axisBorderShow"": false,
            ""axisCenteredZero"": false,
            ""axisColorMode"": ""text"",
            ""axisLabel"": """",
            ""axisPlacement"": ""auto"",
            ""barAlignment"": 0,
            ""drawStyle"": ""line"",
            ""fillOpacity"": 59,
            ""gradientMode"": ""opacity"",
            ""hideFrom"": {
              ""legend"": false,
              ""tooltip"": false,
              ""viz"": false
            },
            ""insertNulls"": false,
            ""lineInterpolation"": ""linear"",
            ""lineWidth"": 2,
            ""pointSize"": 1,
            ""scaleDistribution"": {
              ""type"": ""linear""
            },
            ""showPoints"": ""auto"",
            ""spanNulls"": false,
            ""stacking"": {
              ""group"": ""A"",
              ""mode"": ""none""
            },
            ""thresholdsStyle"": {
              ""mode"": ""off""
            }
          },
          ""mappings"": [],
          ""thresholds"": {
            ""mode"": ""absolute"",
            ""steps"": [
              {
                ""color"": ""green"",
                ""value"": null
              }
            ]
          },
          ""unit"": ""watt""
        },
        ""overrides"": [
          {
            ""matcher"": {
              ""id"": ""byName"",
              ""options"": ""Strom Strom {name=\""Hauptzähler\"", serial=\""1EBZ0101267368\"", type=\""eBZ\""}""
            },
            ""properties"": [
              {
                ""id"": ""color"",
                ""value"": {
                  ""fixedColor"": ""red"",
                  ""mode"": ""fixed""
                }
              },
              {
                ""id"": ""displayName"",
                ""value"": ""Bezug""
              }
            ]
          },
          {
            ""matcher"": {
              ""id"": ""byName"",
              ""options"": ""PV300W PV300W {channel=\""0\"", device=\""solar\"", serial=\""112184719462\""}""
            },
            ""properties"": [
              {
                ""id"": ""color"",
                ""value"": {
                  ""fixedColor"": ""green"",
                  ""mode"": ""fixed""
                }
              },
              {
                ""id"": ""displayName"",
                ""value"": ""PV 300W""
              }
            ]
          },
          {
            ""matcher"": {
              ""id"": ""byName"",
              ""options"": ""Realverbrauch {name=\""Hauptzähler\"", serial=\""1EBZ0101267368\"", type=\""eBZ\""}""
            },
            ""properties"": [
              {
                ""id"": ""displayName"",
                ""value"": ""Realverbrauch""
              },
              {
                ""id"": ""color"",
                ""value"": {
                  ""fixedColor"": ""blue"",
                  ""mode"": ""fixed""
                }
              }
            ]
          }
        ]
      },
      ""gridPos"": {
        ""h"": 11,
        ""w"": 24,
        ""x"": 0,
        ""y"": 6
      },
      ""id"": 2,
      ""options"": {
        ""legend"": {
          ""calcs"": [],
          ""displayMode"": ""list"",
          ""placement"": ""bottom"",
          ""showLegend"": true
        },
        ""tooltip"": {
          ""maxHeight"": 600,
          ""mode"": ""multi"",
          ""sort"": ""none""
        }
      },
      ""targets"": [
        {
          ""datasource"": {
            ""type"": ""influxdb"",
            ""uid"": ""bdlx9r5e9vrwgd""
          },
          ""query"": ""import \""timezone\"" option location = timezone.location(name:\""Europe/Berlin\"")\r\nfrom(bucket: \""WebSDR-WMK\"")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\""_measurement\""] == \""Strom\"")\r\n  |> filter(fn: (r) => r[\""_field\""] == \""Power_in\"")\r\n  |> filter(fn: (r) => r[\""name\""] == \""Hauptzähler\"")\r\n  |> filter(fn: (r) => r[\""serial\""] == \""1EBZ0101267368\"")\r\n  |> filter(fn: (r) => r[\""type\""] == \""eBZ\"")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \""mean\"")"",
          ""refId"": ""BezugExtern""
        },
        {
          ""datasource"": {
            ""type"": ""influxdb"",
            ""uid"": ""bdlx9r5e9vrwgd""
          },
          ""hide"": false,
          ""query"": ""import \""timezone\"" option location = timezone.location(name:\""Europe/Berlin\"")\r\n  from(bucket: \""WebSDR-WMK\"")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\""_measurement\""] == \""PV300W\"")\r\n  |> filter(fn: (r) => r[\""_field\""] == \""power\"")\r\n  |> filter(fn: (r) => r[\""channel\""] == \""0\"")\r\n  |> filter(fn: (r) => r[\""device\""] == \""solar\"")\r\n  |> filter(fn: (r) => r[\""serial\""] == \""112184719462\"")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \""mean\"")"",
          ""refId"": ""PV300W""
        },
        {
          ""datasource"": {
            ""name"": ""Expression"",
            ""type"": ""__expr__"",
            ""uid"": ""__expr__""
          },
          ""expression"": ""$BezugExtern + $PV300W "",
          ""hide"": false,
          ""refId"": ""Realverbrauch"",
          ""type"": ""math""
        }
      ],
      ""timeFrom"": ""6h"",
      ""title"": ""Bezug Extern"",
      ""type"": ""timeseries""
    },
    {
      ""datasource"": {
        ""type"": ""influxdb"",
        ""uid"": ""bdlx9r5e9vrwgd""
      },
      ""fieldConfig"": {
        ""defaults"": {
          ""color"": {
            ""mode"": ""palette-classic""
          },
          ""custom"": {
            ""axisBorderShow"": false,
            ""axisCenteredZero"": false,
            ""axisColorMode"": ""text"",
            ""axisLabel"": """",
            ""axisPlacement"": ""auto"",
            ""barAlignment"": 0,
            ""drawStyle"": ""line"",
            ""fillOpacity"": 59,
            ""gradientMode"": ""opacity"",
            ""hideFrom"": {
              ""legend"": false,
              ""tooltip"": false,
              ""viz"": false
            },
            ""insertNulls"": false,
            ""lineInterpolation"": ""linear"",
            ""lineWidth"": 2,
            ""pointSize"": 1,
            ""scaleDistribution"": {
              ""type"": ""linear""
            },
            ""showPoints"": ""auto"",
            ""spanNulls"": false,
            ""stacking"": {
              ""group"": ""A"",
              ""mode"": ""none""
            },
            ""thresholdsStyle"": {
              ""mode"": ""off""
            }
          },
          ""mappings"": [],
          ""thresholds"": {
            ""mode"": ""absolute"",
            ""steps"": [
              {
                ""color"": ""green"",
                ""value"": null
              }
            ]
          },
          ""unit"": ""watt""
        },
        ""overrides"": [
          {
            ""matcher"": {
              ""id"": ""byName"",
              ""options"": ""Strom Strom {name=\""Hauptzähler\"", serial=\""1EBZ0101267368\"", type=\""eBZ\""}""
            },
            ""properties"": [
              {
                ""id"": ""color"",
                ""value"": {
                  ""fixedColor"": ""red"",
                  ""mode"": ""fixed""
                }
              },
              {
                ""id"": ""displayName"",
                ""value"": ""Bezug""
              }
            ]
          },
          {
            ""matcher"": {
              ""id"": ""byName"",
              ""options"": ""PV300W PV300W {channel=\""0\"", device=\""solar\"", serial=\""112184719462\""}""
            },
            ""properties"": [
              {
                ""id"": ""color"",
                ""value"": {
                  ""fixedColor"": ""green"",
                  ""mode"": ""fixed""
                }
              },
              {
                ""id"": ""displayName"",
                ""value"": ""PV 300W""
              }
            ]
          },
          {
            ""matcher"": {
              ""id"": ""byName"",
              ""options"": ""Realverbrauch {name=\""Hauptzähler\"", serial=\""1EBZ0101267368\"", type=\""eBZ\""}""
            },
            ""properties"": [
              {
                ""id"": ""displayName"",
                ""value"": ""Realverbrauch""
              },
              {
                ""id"": ""color"",
                ""value"": {
                  ""fixedColor"": ""blue"",
                  ""mode"": ""fixed""
                }
              }
            ]
          }
        ]
      },
      ""gridPos"": {
        ""h"": 11,
        ""w"": 24,
        ""x"": 0,
        ""y"": 17
      },
      ""id"": 8,
      ""options"": {
        ""legend"": {
          ""calcs"": [],
          ""displayMode"": ""list"",
          ""placement"": ""bottom"",
          ""showLegend"": true
        },
        ""tooltip"": {
          ""maxHeight"": 600,
          ""mode"": ""multi"",
          ""sort"": ""none""
        }
      },
      ""targets"": [
        {
          ""datasource"": {
            ""type"": ""influxdb"",
            ""uid"": ""bdlx9r5e9vrwgd""
          },
          ""query"": ""import \""timezone\"" option location = timezone.location(name:\""Europe/Berlin\"")\r\nfrom(bucket: \""WebSDR-WMK\"")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\""_measurement\""] == \""Strom\"")\r\n  |> filter(fn: (r) => r[\""_field\""] == \""Power_in\"")\r\n  |> filter(fn: (r) => r[\""name\""] == \""Hauptzähler\"")\r\n  |> filter(fn: (r) => r[\""serial\""] == \""1EBZ0101267368\"")\r\n  |> filter(fn: (r) => r[\""type\""] == \""eBZ\"")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \""mean\"")"",
          ""refId"": ""BezugExtern""
        },
        {
          ""datasource"": {
            ""type"": ""influxdb"",
            ""uid"": ""bdlx9r5e9vrwgd""
          },
          ""hide"": false,
          ""query"": ""import \""timezone\"" option location = timezone.location(name:\""Europe/Berlin\"")\r\n  from(bucket: \""WebSDR-WMK\"")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\""_measurement\""] == \""PV300W\"")\r\n  |> filter(fn: (r) => r[\""_field\""] == \""power\"")\r\n  |> filter(fn: (r) => r[\""channel\""] == \""0\"")\r\n  |> filter(fn: (r) => r[\""device\""] == \""solar\"")\r\n  |> filter(fn: (r) => r[\""serial\""] == \""112184719462\"")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \""mean\"")"",
          ""refId"": ""PV300W""
        },
        {
          ""datasource"": {
            ""name"": ""Expression"",
            ""type"": ""__expr__"",
            ""uid"": ""__expr__""
          },
          ""expression"": ""$BezugExtern + $PV300W "",
          ""hide"": false,
          ""refId"": ""Realverbrauch"",
          ""type"": ""math""
        }
      ],
      ""timeFrom"": ""15h"",
      ""title"": ""Bezug Extern"",
      ""type"": ""timeseries""
    },
    {
      ""datasource"": {
        ""type"": ""influxdb"",
        ""uid"": ""bdlx9r5e9vrwgd""
      },
      ""fieldConfig"": {
        ""defaults"": {
          ""color"": {
            ""mode"": ""continuous-GrYlRd""
          },
          ""custom"": {
            ""align"": ""auto"",
            ""cellOptions"": {
              ""type"": ""auto""
            },
            ""inspect"": false
          },
          ""decimals"": 1,
          ""mappings"": [],
          ""thresholds"": {
            ""mode"": ""absolute"",
            ""steps"": [
              {
                ""color"": ""green"",
                ""value"": null
              },
              {
                ""color"": ""red"",
                ""value"": 80
              }
            ]
          },
          ""unit"": ""kwatth""
        },
        ""overrides"": [
          {
            ""matcher"": {
              ""id"": ""byName"",
              ""options"": ""Total_in {name=\""Hauptzähler\"", serial=\""1EBZ0101267368\"", type=\""eBZ\""}""
            },
            ""properties"": [
              {
                ""id"": ""custom.cellOptions"",
                ""value"": {
                  ""type"": ""gauge""
                }
              },
              {
                ""id"": ""displayName"",
                ""value"": ""Tages Verbrauch""
              }
            ]
          },
          {
            ""matcher"": {
              ""id"": ""byName"",
              ""options"": ""Time""
            },
            ""properties"": [
              {
                ""id"": ""displayName"",
                ""value"": ""Tag""
              },
              {
                ""id"": ""unit"",
                ""value"": ""time:DD.MM.""
              },
              {
                ""id"": ""custom.width"",
                ""value"": 60
              }
            ]
          }
        ]
      },
      ""gridPos"": {
        ""h"": 6,
        ""w"": 10,
        ""x"": 0,
        ""y"": 28
      },
      ""id"": 4,
      ""options"": {
        ""cellHeight"": ""sm"",
        ""footer"": {
          ""countRows"": false,
          ""fields"": """",
          ""reducer"": [
            ""sum""
          ],
          ""show"": false
        },
        ""showHeader"": true,
        ""sortBy"": [
          {
            ""desc"": true,
            ""displayName"": ""Tag""
          }
        ]
      },
      ""pluginVersion"": ""10.4.4"",
      ""targets"": [
        {
          ""datasource"": {
            ""type"": ""influxdb"",
            ""uid"": ""bdlx9r5e9vrwgd""
          },
          ""query"": ""import \""timezone\"" option location = timezone.location(name:\""Europe/Berlin\"")\r\nfrom(bucket: \""WebSDR-WMK\"")\r\n  |> range(start: -4d)\r\n  |> filter(fn: (r) => r[\""_measurement\""] == \""Strom\"")\r\n  |> filter(fn: (r) => r[\""name\""] == \""Hauptzähler\"")\r\n  |> filter(fn: (r) => r[\""serial\""] == \""1EBZ0101267368\"")\r\n  |> filter(fn: (r) => r[\""type\""] == \""eBZ\"")\r\n  |> filter(fn: (r) => r[\""_field\""] == \""Total_in\"")\r\n  |> aggregateWindow(every: 1d, fn: last, createEmpty: true, timeSrc: \""_start\"")\r\n  |> difference(nonNegative: true)"",
          ""refId"": ""A""
        }
      ],
      ""title"": ""Stromverbrauch"",
      ""type"": ""table""
    },
    {
      ""datasource"": {
        ""type"": ""influxdb"",
        ""uid"": ""bdlx9r5e9vrwgd""
      },
      ""fieldConfig"": {
        ""defaults"": {
          ""color"": {
            ""mode"": ""continuous-GrYlRd""
          },
          ""custom"": {
            ""align"": ""auto"",
            ""cellOptions"": {
              ""type"": ""auto""
            },
            ""inspect"": false
          },
          ""decimals"": 1,
          ""mappings"": [],
          ""thresholds"": {
            ""mode"": ""absolute"",
            ""steps"": [
              {
                ""color"": ""green"",
                ""value"": null
              }
            ]
          },
          ""unit"": ""kwatth""
        },
        ""overrides"": [
          {
            ""matcher"": {
              ""id"": ""byName"",
              ""options"": ""Total_in {name=\""Hauptzähler\"", serial=\""1EBZ0101267368\"", type=\""eBZ\""}""
            },
            ""properties"": [
              {
                ""id"": ""custom.cellOptions"",
                ""value"": {
                  ""type"": ""gauge""
                }
              },
              {
                ""id"": ""displayName"",
                ""value"": ""Monat Verbrauch""
              }
            ]
          },
          {
            ""matcher"": {
              ""id"": ""byName"",
              ""options"": ""Time""
            },
            ""properties"": [
              {
                ""id"": ""displayName"",
                ""value"": ""Monat""
              },
              {
                ""id"": ""unit"",
                ""value"": ""time:MM.YY""
              },
              {
                ""id"": ""custom.width"",
                ""value"": 80
              }
            ]
          }
        ]
      },
      ""gridPos"": {
        ""h"": 6,
        ""w"": 9,
        ""x"": 10,
        ""y"": 28
      },
      ""id"": 5,
      ""options"": {
        ""cellHeight"": ""sm"",
        ""footer"": {
          ""countRows"": false,
          ""fields"": """",
          ""reducer"": [
            ""sum""
          ],
          ""show"": false
        },
        ""showHeader"": true,
        ""sortBy"": [
          {
            ""desc"": true,
            ""displayName"": ""Monat""
          }
        ]
      },
      ""pluginVersion"": ""10.4.4"",
      ""targets"": [
        {
          ""datasource"": {
            ""type"": ""influxdb"",
            ""uid"": ""bdlx9r5e9vrwgd""
          },
          ""query"": ""import \""timezone\"" option location = timezone.location(name:\""Europe/Berlin\"")\r\nfrom(bucket: \""WebSDR-WMK\"")\r\n  |> range(start: -4mo)\r\n  |> filter(fn: (r) => r[\""_measurement\""] == \""Strom\"")\r\n  |> filter(fn: (r) => r[\""name\""] == \""Hauptzähler\"")\r\n  |> filter(fn: (r) => r[\""serial\""] == \""1EBZ0101267368\"")\r\n  |> filter(fn: (r) => r[\""type\""] == \""eBZ\"")\r\n  |> filter(fn: (r) => r[\""_field\""] == \""Total_in\"")\r\n  |> aggregateWindow(every: 1mo, fn: last, createEmpty: true, timeSrc: \""_start\"")\r\n  |> difference(nonNegative: true)"",
          ""refId"": ""A""
        }
      ],
      ""title"": ""Stromverbrauch"",
      ""type"": ""table""
    }
  ],
  ""refresh"": ""5s"",
  ""schemaVersion"": 39,
  ""tags"": [],
  ""templating"": {
    ""list"": []
  },
  ""time"": {
    ""from"": ""now-6h"",
    ""to"": ""now""
  },
  ""timepicker"": {},
  ""timezone"": ""browser"",
  ""title"": ""WebSDR-WMK"",
  ""uid"": ""adlxa3700ctfka"",
  ""version"": 37,
  ""weekStart"": """"
}"
RRQaSfNh,AiPlayerController,noobHasan,C#,Friday 16th of August 2024 07:41:50 AM CDT,"using System.Collections;
using UnityEngine;
using DG.Tweening;

public enum EnemyType {
    StartBehind,
    StartFront,
    none
}

public class AIPlayerController : MonoBehaviour {
    public EnemyType enemyType;

    private Rigidbody2D rb2D;
    private Vector2 AIplayerMove;
    [SerializeField]
    private float AIspeed = 5f;
    public float resetSpeed = 4f;
    [SerializeField] private float InitialSpeed;
    public float AIplayerJumpForce = 10f;
    public float AIgravity = 30f;
    public Animator AIanimator;
    public string jumpTag = ""Jump"";
    private bool isGrounded;
    [SerializeField] bool moveleft;
    public bool canMove;
    public Transform playerSprite;

    public Animator aiAnimator;
    public BoxCollider2D boxCollider2D;
    public int damageToPlayer = 35;
    public GameObject DestroyFx;
    public bool isDestroyWhenHitPlayer = false;

    private bool isDamagingPlayer = false;
    private Transform playerTransform;
    public Transform playerMesh;
    [SerializeField] private float xDifferenceThreshold = 3f;
    public bool spawnedPlayer;

    public bool followPlayer;
    public bool isDead;

    private void Awake()
    {
        rb2D = GetComponent<Rigidbody2D>();
        rb2D.interpolation = RigidbodyInterpolation2D.Interpolate;
    }

    private void Start()
    {
        if (enemyType == EnemyType.StartBehind)
        {
            playerMesh.transform.localScale = Vector3.zero;
        }
        SetupPlayer();
        playerTransform = GameObject.FindGameObjectWithTag(""Player"").transform;
    }

    public void CanMove()
    {
        playerMesh.transform.DOScale(1, 0.25f);
        aiAnimator.SetBool(""Run"", true);
        canMove = true;
    }

    void Update()
    {
        if (isDead) return;
        if (!spawnedPlayer && enemyType == EnemyType.StartBehind)
        {
            if (Mathf.Abs(playerTransform.position.x - transform.position.x) >= xDifferenceThreshold)
            {
                CanMove();
                spawnedPlayer = true;
            }
        }
        else if (!spawnedPlayer && enemyType == EnemyType.StartFront)
        {
            if (Mathf.Abs(playerTransform.position.x - transform.position.x) < 1.5f)
            {
                CanMove();
                spawnedPlayer = true;
            }
        }

        if (GameManager.Instance.State == GameManager.GameState.Finish)
        {
            StopPlayer();
        }
    }
    private void FixedUpdate()
    {
/*        if (spawnedPlayer && enemyType == EnemyType.StartFront)
        {
            if (Mathf.Abs(playerTransform.position.x - transform.position.x) > 6f)
            {
                canMove = false;
                aiAnimator.SetBool(""Run"", false);
            }
            else
            {
                aiAnimator.SetBool(""Run"", true);
                canMove = true;
            }
        }*/
        if (isDead) return;
        if (!canMove) return;
        AIplayerMove = Vector2.zero;
        AIplayerMove = Vector2.right;
        PlayerBehaviour();
        if (!isGrounded)
        {
            AIgravity = 30f;
            rb2D.velocity += new Vector2(0, -AIgravity * Time.deltaTime);
        }
        AIplayerMove.Normalize();

        if (moveleft)
        {
            AIplayerMove = Vector2.left;
            AIplayerMove *= AIspeed;
            rb2D.velocity = new Vector2(AIplayerMove.x, rb2D.velocity.y);
        }
        else
        {
            AIplayerMove *= AIspeed;
            rb2D.velocity = new Vector2(AIplayerMove.x, rb2D.velocity.y);
        }
    }

    private void AIJump(float jumpForce, JumpDirection jumpDirection)
    {
        StartCoroutine(PerformJump());
        AIplayerJumpForce = jumpForce;
        rb2D.velocity = new Vector2(rb2D.velocity.x, AIplayerJumpForce);
        StartCoroutine(ResetSpeed());
        if (enemyType == EnemyType.StartFront)
        {
            StartCoroutine(ResetSpeed());
        }
    }

    public IEnumerator ResetSpeed()
    {
        yield return new WaitForSeconds(1.5f);
        AIspeed = resetSpeed; // WasInitialSpeed
    }

    public IEnumerator PerformJump()
    {
        yield return new WaitForSeconds(0);
        aiAnimator.SetBool(""Jump"", true);
        yield return new WaitForSeconds(0.5f);
        aiAnimator.SetBool(""Jump"", false);
    }

    private void OnCollisionEnter2D(Collision2D collision)
    {
        if (GameManager.Instance.State == GameManager.GameState.Dead) return;
        if (collision.collider.CompareTag(jumpTag) && !isGrounded)
        {
            AIJumpManager aiJumpManager = collision.gameObject.GetComponent<AIJumpManager>();
            AIspeed = aiJumpManager.moveSpeed;
            if (aiJumpManager.jumpDirection == JumpDirection.Left)
            {
                playerSprite.transform.rotation = Quaternion.Euler(0, 180, 0);
                moveleft = true;
            }
            else
            {
                playerSprite.transform.rotation = Quaternion.Euler(0, 0, 0);
                moveleft = false;
            }
            AIJump(aiJumpManager.jumpForce, aiJumpManager.jumpDirection);
        }

        if (enemyType == EnemyType.StartFront)
        {
            if (collision.gameObject.GetComponent<Player>() == null)
                return;

            if (GameManager.Instance.State == GameManager.GameState.Finish)
                return;

            GameManager.Instance.GameFinish();
            collision.gameObject.GetComponent<Player>().playerRB.excludeLayers = 22;
            StopPlayer();
        }
    }

    private void OnTriggerEnter2D(Collider2D collision)
    {
        if (GameManager.Instance.levelType == LEVELTYPE.RunAway) {
            if (collision.gameObject.GetComponent<GameFinishFlag>())
            {
                canMove = false;
                aiAnimator.SetBool(""Run"", false);
            }
        }

    }

    private void OnTriggerStay2D(Collider2D collision)
    {
        if (enemyType == EnemyType.StartBehind)
        {
            var player = collision.GetComponent<Player>();
            if (player == null) return;
            if (player.isDead) return;
            if (!isDamagingPlayer)
            {
                StartCoroutine(DamagePlayer(player));
            }
        }
    }

    private void OnTriggerExit2D(Collider2D collision)
    {
        var player = collision.GetComponent<Player>();
        if (player != null)
        {
            if (player.isDead)
            {
                aiAnimator.SetBool(""Idle"", true);
                canMove = false;
                AIplayerJumpForce = 0;
                //return;
            }
            else
            {
                isDamagingPlayer = false;
                aiAnimator.SetBool(""Attack"", false);
                aiAnimator.SetBool(""Jump"", false);
                aiAnimator.SetBool(""Run"", true);
            }
        }
    }

    private IEnumerator DamagePlayer(Player player)
    {
        isDamagingPlayer = true;
        aiAnimator.SetBool(""Attack"", true);
        while (isDamagingPlayer)
        {
            player.TakeDamage(damageToPlayer, Vector2.zero, gameObject, Vector2.zero);
            yield return new WaitForSeconds(1f);
            if (player.isDead)
            {
                canMove = false;
                aiAnimator.SetBool(""Attack"", false);
                aiAnimator.SetBool(""Run"", false);
                AIJumpManager[] aiJumpManager = FindObjectsOfType<AIJumpManager>();
                for (int i = 0; i < aiJumpManager.Length; i++)
                {
                    aiJumpManager[i].gameObject.SetActive(false);
                }
                yield break;
            }
        }
        aiAnimator.SetBool(""Attack"", false);
    }

    private void SetupPlayer()
    {
        InitialSpeed = AIspeed;
        if (enemyType == EnemyType.StartBehind)
        {
            boxCollider2D.enabled = true;
        }
        else if (enemyType == EnemyType.StartFront)
        {
            //if (boxCollider2D != null) boxCollider2D.enabled = false;
        }
    }

    private void PlayerBehaviour()
    {
        if (enemyType == EnemyType.StartBehind)
        {
            float yDifferenceThreshold = 1f; // Set an appropriate threshold for y-axis difference
            if (Mathf.Abs(playerTransform.position.y - transform.position.y) <= yDifferenceThreshold)
            {
                followPlayer = true;
                if (playerTransform.position.x < transform.position.x)
                {
                    moveleft = true;
                    playerSprite.transform.rotation = Quaternion.Euler(0, 180, 0);
                }
                else
                {
                    moveleft = false;
                    playerSprite.transform.rotation = Quaternion.Euler(0, 0, 0);
                }

                ChangeTriggerState(moveleft);
            }
            else
            {
                followPlayer = false;
            }
        }
    }

    public void StopPlayer()
    {
        aiAnimator.SetBool(""Idle"", true);
        AIspeed = 0;
        canMove = false;
    }

    public void ChangeTriggerState(bool moveDirection)
    {
        if (TriggerStateController.Instance == null) return;
        if (moveDirection)
        {
            TriggerStateController.Instance.TurnOnLeftTriggers();
        }
        else
        {
            TriggerStateController.Instance.TurnOnRightTriggers();
        }
    }
}"
Q37bgB2m,Code-AP01-Zero,willyscampos2012,JavaScript,Friday 16th of August 2024 07:04:14 AM CDT,"import React from 'react';
import { Text, View, StyleSheet } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>Hello Unama's Coder!</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center', // Alinha verticalmente no centro
    alignItems: 'center', // Alinha horizontalmente no centro
    backgroundColor: '#f0f0f0',
  },
  text: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
  },
});
"
ZAzLdUak,backup 24-08-16,Skelun,JavaScript,Friday 16th of August 2024 06:44:58 AM CDT,"/* ====================================================================
==                      [F95ZONE] THREAD SCRAPER
=======================================================================
-- MODIFIED : 2023-11-30
-- CREATED  : 2023-10-27
-- LICENSE  : MIT license (Just not sell it ...)
-- --------------------------------------------------------------------
-- Scrapes the data with CheerioGS (https://github.com/tani/cheeriogs)
-- To use it, first install the library using the Script ID
-- 1ReeQ6WO8kKNxoaA_O0XEQ589cIrRvEBA9qcWpNqdOP17i47u6N9M5Xh0
======================================================================= */

/* --------------------------------------------------------------------
-- CheerioGS starting function
----------------------------------------------------------------------- */

function getContent(url) {
  const response = UrlFetchApp.fetch(url, {muteHttpExceptions: true});
  return response.getResponseCode() == 200 ? response.getContentText() : '';
}
  
/* --------------------------------------------------------------------
-- Actual scrape function
----------------------------------------------------------------------- */

function scrapeData(force) {

  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var selectedRange = sheet.getActiveRange();
  var selectedValues = selectedRange.getRichTextValues(); 

  for (var i = 0; i < selectedValues.length; i++) {

    // It assumes the URLs are in the first column of the selected column
    var urlFromLink = selectedValues[i][0].getLinkUrl();
    var urlFromCellValue = selectedValues[i][0].getText();

    // Check if there is a link URL, and use it if available; otherwise, use the URL from the cell value
    var url = urlFromLink ? urlFromLink : urlFromCellValue;

    // If the value is not empty...
    if (url && isValidURL(url)) {

      var content = getContent(url);
      var $ = Cheerio.load(content);

      /* --------------------------------------------------------------------
      -- [Title]
      -------------------------------------------------------------------- */
      const threadTitle = $('h1.p-title-value');

      const rawTitle = threadTitle.contents().filter(function() {
        return this.type === 'text';
      }).text();
  
      const titleREGEX = /(.+?)\s*\[(.+?)\](?:\s*\[(.+?)\])?/.exec(rawTitle);
  
      var title = titleREGEX && titleREGEX[1] ? titleREGEX[1] : ""Title N.F. ⚠️"";
      const version = titleREGEX && titleREGEX[2] ? titleREGEX[2] : ""Version N.F. ⚠️"";
      const devBackup = titleREGEX && titleREGEX[3] ? titleREGEX[3] + "" ❓"" : ""Dev N.F. ⚠️"";
  
      // If there's no regex match, assume rawTitle is the title
      title = !titleREGEX ? rawTitle : title;

      /* --------------------------------------------------------------------
      -- [Status]
      -------------------------------------------------------------------- */
      // Default status
      var status = 'Active';

      // Search for ""Completed"", ""Abandoned"", or ""Onhold""
      const statusSpan = threadTitle.find('span').filter(function() {
        return [
          'Completed',
          'Abandoned',
          'Onhold'
        ].includes($(this).text());
      }).first();
  
      statusSpan.length ? status = statusSpan.text() : null;

      /* --------------------------------------------------------------------
      -- [Engine]
      ----------------------------------------------------------------------- */
      // If there's no engine info, it returns ""unknown""
      var engine = '⚠️ Unknown';

      const engineSpan = threadTitle.find('span').filter(function() {
        return [
          'ADRIFT','Flash','Java',
          'Others','QSP','RAGS',
          'RPGM',""Ren'Py"",'Tads',
          'Unity','Unreal Engine','WebGL',
          'Wolf RPG','HTML'
        ].includes($(this).text());
      }).first();

      engineSpan.length ? engine = engineSpan.text() : null;   

      /* --------------------------------------------------------------------
      -- [Tags]
      ----------------------------------------------------------------------- */
      // Selects the element containing the tags
      var tagList = $('span.js-tagList');

      // Grabs the tags and separate them by comma
      var tags = tagList.find('a.tagItem').map(function() {
        return $(this).text();
      }).get().join(', ');

      /* --------------------------------------------------------------------
      -- [Gameplay]
      ----------------------------------------------------------------------- */
      const gameplayOptions = {
        'sandbox': 'Sandbox',
        'turn based combat': 'TBC',
        'management': 'Management',
        'simulator': 'Simulator',
        'rpg': 'RPG',
        'virtual reality': 'Virtual Reality'
      };
      
      const gameplay = gameplayOptions[Object.keys(gameplayOptions).find(option => tags.includes(option))] || 'Visual Novel';
      
      /* --------------------------------------------------------------------
      -- Thread [Start] Date
      ----------------------------------------------------------------------- */

      // Selects the first 'article' element
      const timeElement = $('article').first().find('header.message-attribution').find('time.u-dt');

      // Check if the time element exists
      var start = timeElement.length > 0 ? timeElement.attr('datetime').split('T')[0] : (Logger.log(""<time> element not found.""), null);

      /* --------------------------------------------------------------------
      -- [Updated]
      -- [Release]
      -- [Censored]
      ----------------------------------------------------------------------- */
      // Selects the first message body (which is the one containing the game info)
      const articleText = $('article.message-body').first().text();

      const updated = /Thread Updated:\s*([^\s]+)/.exec(articleText)?.[1].toString() || ""Not found ⚠️"";
      const release = /(Release|Update) Date:\s*([^\s]+)/.exec(articleText)?.[2] || ""Not found ⚠️"";
      const censoredDetailsMatch = /Censored:\s*(.+?)(?=\n|\r|\r\n|$)/.exec(articleText);

      const censoredDetails = censoredDetailsMatch ? censoredDetailsMatch[1].trim() : """";
      const censoredMatch = censoredDetails ? /^\s?(Yes|No)/i.exec(censoredDetails) : null;
      const censoredHasDetails = censoredMatch && censoredDetails.length > censoredMatch[0].length;

      const censored = censoredMatch ? censoredMatch[0] + (censoredHasDetails ? ""*"" : """") : ""***"";

      /* --------------------------------------------------------------------
      -- [DEV]
      ----------------------------------------------------------------------- */
      // Words that may succeed the dev's name
      const devStopWords = [
        'Patreon', 'F95Zone', 'Itch.io', 'Discord', 'SubcribeStar', 'Buy Me A Coffee',
        'Blogspot', 'Website', 'Twitter', 'Pixiv', 'Fanbox', '-', ','
      ];

      const devMatchRegex = new RegExp(`Developer\\s*(?:\\/\\s*Publisher)?\\s*:\\s*((?:(?!${devStopWords.join('|')}).)+)`, 'i');

      // Use the regex to execute a match on articleText
      const devMatch = devMatchRegex.exec(articleText)?.[1]?.trim();
      const devMatchLower = devMatch && devMatch.toLowerCase();

      // Pre-cleaning the devBackup by removing potential warning signs and trimming
      const cleanDevBackup = devBackup.replace(/ ❓| ⚠️/g, '').trim();
      const cleanDevBackupLower = cleanDevBackup && cleanDevBackup.toLowerCase();

      // Check if devMatch is valid and doesn't contain the exclusion message
      const isValidDevMatch = devMatchLower &&
                              devMatchLower !== ""you"" &&
                              !devMatchLower.includes(""you must be registered to see the links"");

      // Check if devMatch is different from the cleanDevBackup
      const isDifferentFromBackup = isValidDevMatch &&
                                    devMatchLower !== cleanDevBackupLower;

      // Set dev to devMatch or devBackup based on the above checks. Append a warning sign if needed.
      const dev = isDifferentFromBackup ? devMatch + "" ⚠️"" : (isValidDevMatch ? devMatch : devBackup);

      /* --------------------------------------------------------------------
      -- [RATING] & [VOTES]
      ----------------------------------------------------------------------- */
      // Grabs the JSON generated by F95 forum
      const jsonInfo = $('script[type=""application/ld+json""]').last();

      // Extract the captured values or provide default values if not found
      const rating = /""ratingValue"": ""(\d+(?:\.\d+)?)""/.exec(jsonInfo)?.[1] || ""None."";
      const votes = /""ratingCount"": ""(\d+)""/.exec(jsonInfo)?.[1] || ""0"";

      /* --------------------------------------------------------------------
      -- Last Update Check
      -- --------------------------------------------------------------------
      -- It will not scrape if the thread was updated less than 30 days ago
      ----------------------------------------------------------------------- */

      const today = new Date();

      // Subtracts both dates to get days gap
      const daysSinceLastUpdate = Math.floor((today - new Date(updated)) / (1000 * 60 * 60 * 24));
      const daysSinceRelease = Math.floor((today - new Date(release)) / (1000 * 60 * 60 * 24));

      /* --------------------------------------------------------------------
      -- Starts to write the data into different cells
      ----------------------------------------------------------------------- */

      if (force || daysSinceRelease < 30 || daysSinceLastUpdate > 30) {

          // Write the scraped data to the same row
          var outputRow = selectedRange.getRow() + i;
          var outputColumn = selectedRange.getColumn() + 1;
          
          Logger.log(""Row being scraped: "" + outputRow);

          // All values that will be written
          var newValues = [
              //rawTitle,
              //release,
              updated,
              title,
              version,
              status,
              engine,
              ,
              gameplay,
              tags,
              moonRating(rating),
              //votes,
              //updated,
              censored,
              //start,
              dev,
          ];

          /* Creates a note into the [release] cell to provide relevant dates
          ------------------------------------------------------------------------------- */
          var releaseIndex = newValues.indexOf(release);
          if (releaseIndex !== -1) {
            var releaseNote = `Last Release: ${release}\n\n` +
                              `Thread Updated: ${updated}\n\n` +
                              `Launch Date: ${start}`;
            sheet.getRange(outputRow, outputColumn + releaseIndex).setNote(releaseNote);
          }

          /* Creates a note into the [Tags] cell to tell the exact rating
          ------------------------------------------------------------------------------- */
          var tagsIndex = newValues.indexOf(tags);
          tagsIndex !== -1 && sheet.getRange(outputRow, outputColumn + tagsIndex).setNote(tags);

          /* Creates a note into the [moonRating(rating)] cell to tell the exact rating
          ------------------------------------------------------------------------------- */
          var moonRatingIndex = newValues.indexOf(moonRating(rating));
          if (moonRatingIndex !== -1) {
            var moonRatinNote = `Rating: ${rating}\n` +
                                `${votes} votes`;
            sheet.getRange(outputRow, outputColumn + moonRatingIndex).setNote(moonRatinNote)
          }

          /* Creates a note into the [censored] cell to provide more information
          ------------------------------------------------------------------------------- */
          var censoredIndex = newValues.indexOf(censored);
          if (censoredIndex !== -1) {
            const censoredNotes = censoredHasDetails ? censoredDetails : (censoredMatch ? """" : ""No data found."");
            sheet.getRange(outputRow, outputColumn + censoredIndex).setNote(censoredNotes);
          }

          // Read existing values and protections in the row
          var rangeToWrite = sheet.getRange(outputRow, outputColumn, 1, newValues.length);
          var existingValues = rangeToWrite.getValues()[0];
          var canWrite = true;  // Assume we can write to the range unless a cell is protected

          // Get all protections on the sheet
          var protections = sheet.getProtections(SpreadsheetApp.ProtectionType.RANGE);
          Logger.log(""Protections: ""+ protections);

          // Detects protected cells to avoid overwriting
          for (var j = 0; j < newValues.length; j++) {

            // If it's force scrape it will overwrite
            /*if (force) {
              continue;
            }*/

            var cellRange = sheet.getRange(outputRow, outputColumn + j);
            var cellIsProtected = false;

            // Iterate over all protections to see if any apply to the cell
            for (var k = 0; k < protections.length; k++) {
              var protection = protections[k];
              var protectedRange = protection.getRange();
              if (cellRange.getRow() >= protectedRange.getRow() &&
                  cellRange.getRow() <= protectedRange.getLastRow() &&
                  cellRange.getColumn() >= protectedRange.getColumn() &&
                  cellRange.getColumn() <= protectedRange.getLastColumn()) {
                cellIsProtected = true;
                break;
              }
            }

            // If the cell is protected or if the new value is empty, skip the update for this cell
            if (cellIsProtected || newValues[j] === """" || newValues[j] == null) {
              newValues[j] = existingValues[j];
            }
          }

          // If no cells in the range are protected, write the new non-empty values
          if (canWrite) {
            rangeToWrite.setValues([newValues]);
          }

      }

    }

  }

}

/* --------------------------------------------------------------------
-- Ignore all restrictions when scraping
----------------------------------------------------------------------- */

const forceScrapeData = () => scrapeData(true);

/* --------------------------------------------------------------------
-- Transforms embedded links into actual Hyperlinks
----------------------------------------------------------------------- */

function createHyperlink() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const range = sheet.getActiveRange();
  const formulas = range.getRichTextValues().map((row) => 
    row.map((richText) => {
      const link = richText.getLinkUrl();
      return link ? `=HYPERLINK(""${link}"", ""Here"")` : '';
    })
  );
  
  // Set formulas in bulk
  range.setFormulas(formulas);
}

/* ====================================================================
== HELPER FUNCTIONS
======================================================================= */

/* --------------------------------------------------------------------
-- MoonRating -- Simulates rating stars with emojis.
----------------------------------------------------------------------- */

function moonRating(number) {
  if (isNaN(number)) return ""------"";
  
  const fullMoon = ""🌕"", halfMoon = ""🌗"", newMoon = ""🌑"";
  const moons = Math.floor(number);
  const isHalfMoon = number % 1 !== 0;
  
  return fullMoon.repeat(moons) +
         (isHalfMoon ? halfMoon : """") +
         newMoon.repeat(5 - moons - (isHalfMoon ? 1 : 0));
}

/* --------------------------------------------------------------------
-- Check if the strings is a valid URL
----------------------------------------------------------------------- */
function isValidURL(str) {
  var pattern = new RegExp('^(https?:\\/\\/)?'+ // protocol
  '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + // domain name
  '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR an IP Address
  '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // port and path
  '(\\?[;&a-z\\d%_.~+=-]*)?' + // query string
  '(\\#[-a-z\\d_]*)?$', 'i'); // fragment locator
  return pattern.test(str);
}

/* --------------------------------------------------------------------
-- Protects and Unprotects cells
----------------------------------------------------------------------- */

function protectCell() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var selection = ss.getActiveRange();

  if (selection) {
    // Create a protection object for the range.
    var protection = selection.protect().setDescription('Protected by custom function');
    
    // Ensure the current user is an editor and remove others
    var me = Session.getEffectiveUser();
    protection.addEditor(me);
    protection.removeEditors(protection.getEditors());
    if (protection.canDomainEdit()) {
      protection.setDomainEdit(false);
    }

    ss.toast('The selected cell is now protected ❤️');
  }
}

function unprotectCell() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var selection = ss.getActiveRange();

  if (selection) {
    var protections = selection.getSheet().getProtections(SpreadsheetApp.ProtectionType.RANGE);
    for (var i = 0; i < protections.length; i++) {
      var protection = protections[i];
      if (protection.getRange().getA1Notation() === selection.getA1Notation()) {
        protection.remove();
      }
    }

    ss.toast('The selected cell is now unprotected 💔');
  }
}

function menuItem1() {
  SpreadsheetApp.getUi() // Or DocumentApp or FormApp.
     .alert('You clicked the first menu item!');
}

function showMessageBox() {
  Browser.msgBox('You clicked it!');
}



/* ====================================================================
== UI FUNCTIONS
======================================================================= */

/* --------------------------------------------------------------------
-- Creates extra options on the menu
----------------------------------------------------------------------- */
  
function onOpen() {
  var ui = SpreadsheetApp.getUi();
  ui.createMenu('Extra Functions')
      .addItem('📝 Scrape Data', 'scrapeData')
      .addItem('🦾 Force Scrape', 'forceScrapeData')
      .addSeparator()
      .addItem('🔗 Create Hyperlink','createHyperlink')
      .addSeparator()
      .addItem('🔒 Protect Cell', 'protectCell')
      .addItem('🔑 Unprotect Cell', 'unprotectCell')
      .addToUi();
}"
EeTwLNkL,How Can You Get the Copyrack 100% Deposit Bonus,reviewbrokers,PHP,Friday 16th of August 2024 06:41:21 AM CDT,"https://www.reviewbrokers.net/how-can-you-get-the-copyrack-100-deposit-bonus/
 Copyrack is offering an exciting opportunity for traders to maximize their trading potential with a 100% Deposit Bonus. This promotion allows traders to double their trading capital with the same deposit amount, providing a significant boost to their trading activities. Here’s how you can benefit from this offer:
Table of Contents

 	What is the Copyrack 100% Deposit Bonus?
 	How to Claim Copyrack 100% Deposit Bonus
 	Copyrack Bonus Terms and Conditions
 	Copyrack Deposit Bonus Withdrawal Process
 	Best Strategies for Using Copyrack Deposit Bonus
 	Copyrack Deposit Bonus Minimum Deposit Requirement
 	Conclusion

What is the Copyrack 100% Deposit Bonus?
The Copyrack 100% Deposit Bonus is a special promotion designed to enhance the trading margin in your account. When you make a qualifying deposit, Copyrack matches it with an equivalent bonus, effectively doubling your trading capital. This extra capital can be used to increase your trading positions, potentially leading to higher profits.
How to Claim Copyrack 100% Deposit Bonus
To claim the Copyrack 100% Deposit Bonus, you need to follow a straightforward process. First, ensure you meet the minimum deposit requirement of $100. Then, visit the Copyrack bonus page, where you can make your deposit. Once your deposit is processed, the bonus will be automatically credited to your account, effectively doubling your trading capital.
Copyrack Bonus Terms and Conditions
It's crucial to understand the Copyrack bonus terms and conditions before participating in this promotion. The bonus funds come with specific requirements, including conditions on withdrawal and usage. For example, there may be a minimum trading volume that must be met before you can withdraw the bonus amount. Reviewing these terms on the Copyrack website will ensure you are fully informed and can make the most of this opportunity.
Copyrack Deposit Bonus Withdrawal Process
The Copyrack deposit bonus withdrawal process is straightforward but requires meeting certain criteria. Typically, you must achieve a specified trading volume before the bonus funds become eligible for withdrawal. This ensures that the bonus is used for its intended purpose—enhancing your trading activity—before being cashed out.
Best Strategies for Using Copyrack Deposit Bonus
Maximizing the benefits of the Copyrack 100% Deposit Bonus involves smart strategies. Consider using the bonus to increase your position sizes, which can amplify potential profits. However, it's also wise to manage risk carefully, as increased leverage can lead to larger losses. Exploring the best strategies for using the Copyrack deposit bonus can help you make informed decisions that align with your trading goals.
Copyrack Deposit Bonus Minimum Deposit Requirement
To qualify for the Copyrack 100% Deposit Bonus, you must meet the minimum deposit requirement of $100. This entry-level deposit makes the bonus accessible to a wide range of traders, from beginners to experienced professionals. By depositing this amount, you unlock the potential to double your trading capital and enhance your market leverage.
Conclusion
The Copyrack 100% Deposit Bonus is a valuable tool for traders looking to increase their market exposure without additional financial outlay. By understanding how to claim the bonus, familiarizing yourself with the terms and conditions, and utilizing strategic approaches to trading, you can make the most of this opportunity. For more detailed information and to read the full terms and conditions, visit the Copyrack website. Don’t miss out on this chance to enhance your trading potential with the Copyrack 100% Deposit Bonus!"
cPAqv7rQ,How to Get a 20% Tradable Bonus with FP Markets FX,fxvnpro,PHP,Friday 16th of August 2024 06:29:06 AM CDT,"https://www.fxvnpro.com/how-to-get-a-20-tradable-bonus-with-fp-markets-fx/
 Table of Contents

 	Introduction
 	Key Details of the 20% Tradable Bonus

 	Eligibility
 	Bonus Amount
 	Withdrawal Conditions
 	Limited Time Offer


 	How to Get Started
 	Conclusion

Introduction
FP Markets FX is currently offering an exciting opportunity for traders to boost their trading capital with a 20% Tradable Bonus on deposits. This FP Markets FX bonus promotion is designed to provide extra leverage for trading, making it a valuable option for both new and experienced traders looking to maximize their potential in the markets.
Key Details of the 20% Tradable Bonus
Eligibility
This bonus is available to all FP Markets FX clients who make a deposit into their trading account. Whether you're a new client just starting with FP Markets or an existing client looking to increase your trading power, this offer is open to you.
Bonus Amount
When you make a deposit, FP Markets will credit your account with a bonus equal to 20% of the deposited amount. This FP Markets 20% deposit bonus can be used for trading, giving you additional capital to potentially increase your market exposure and trading opportunities.
Withdrawal Conditions
To withdraw the bonus amount, clients are usually required to meet specific trading volume requirements. These FP Markets trading bonus terms are detailed in the promotion's terms and conditions. It's important to review these carefully to understand the requirements and ensure you can meet them within the promotional period.
Limited Time Offer
This promotion is typically time-sensitive, meaning it may only be available for a limited period. Clients are encouraged to take advantage of the bonus as soon as possible to maximize their trading potential during the promotional period.
How to Get Started
To participate in this promotion and claim your FP Markets FX bonus promotion, visit the FP Markets promotions page. There, you'll find all the details you need, including how to make your deposit, the full terms and conditions, and any additional steps required to activate the bonus.

For personalized assistance or more detailed information, don't hesitate to reach out to FP Markets customer service. They can provide clarification on how to claim the FP Markets bonus and guide you through the process.
Conclusion
This Forex deposit bonus 2024 is an excellent way to enhance your trading capital and take advantage of market opportunities with greater confidence. Don’t miss out on this limited-time offer—boost your trading potential today with FP Markets!"
EWqgMY4b,pruebaHTTP,Maplexito,Lua,Friday 16th of August 2024 06:27:25 AM CDT,"print(""FUNCIONANDOO..."")
wait(2)
print(""ADIOS..."")"
UUcY6YCP,Review Uptos,fxvnpro,PHP,Friday 16th of August 2024 06:24:40 AM CDT,"https://www.fxvnpro.com/review-uptos/
 
Here at Uptos, we line up our clients’ needs and financial objectives by offering exceptional trading services.



We provide complete, proficient investment assistance; as well as a safeguarded and user-friendly online trading environment. Invest and trade at your pace and limits with a rich collection of investment options.



Through our multi-asset trading platform, UpTrader, you may select from a huge range of assets such as currencies, stocks, commodities and energies, derivatives, and many more.



Start trading online by registering a trading account with us. Enjoy low floating pricing, no slippage, reliable order execution and much more.



Broker Logo &nbsp;



BROKER INFORMATION



Broker TypeECN/NDDCompanyUptos LTDFoundation2019CountrySt.Vincent &amp; GrenadinesRegulation-Minimum Initial Deposit$250Account Base CurrenciesUSDAccount Deposit MethodsSkrill, Visa, MasterCard, Wire TransferAccount Withdrawal MethodsSkrill, Visa, MasterCard, Wire TransferLive ChatYesEmail- General support: support@uptos.com- For documents verification send an email at: documents@uptos.comCall+18552962786



ADVANTAGES



Free Demo AccountYesMaximum Leverage1:400SpreadsFrom 0.0 pipsExecution TypeMarket ExecutionIntroducing Brokers ProgramN/ASwap FreeYes (Islamic)Virtual Private ServerNoTrading PlatformsMobile Trading, UpTraderTM&nbsp;platformScalpingYesHedgingYesExpert AdvisorsYesProductsCurrencies, Stocks, Indices, Digital Assets



DISADVANTAGES



RestrictionsUptos LTD does not offer services to users from certain jurisdictions, such asthe United States of America, Islamic Republic of Iran, and North Korea.
"
nsRdDk28,Review Uptos,reviewbrokers,PHP,Friday 16th of August 2024 06:24:29 AM CDT,"https://www.reviewbrokers.net/review-uptos/
 
Here at Uptos, we line up our clients’ needs and financial objectives by offering exceptional trading services.



We provide complete, proficient investment assistance; as well as a safeguarded and user-friendly online trading environment. Invest and trade at your pace and limits with a rich collection of investment options.



Through our multi-asset trading platform, UpTrader, you may select from a huge range of assets such as currencies, stocks, commodities and energies, derivatives, and many more.



Start trading online by registering a trading account with us. Enjoy low floating pricing, no slippage, reliable order execution and much more.



Broker Logo &nbsp;







Broker TypeECN/NDDCompanyUptos LTDFoundation2019CountrySt.Vincent &amp; GrenadinesRegulation-The JurisdictionsUptos LTD does not offer services to users from certain jurisdictions, such asthe United States of America, Islamic Republic of Iran, and North Korea.Live ChatYesEmail- General support: support@uptos.com- For documents verification send an email at: documents@uptos.comCall+18552962786







Free Demo AccountsYesMinimum Initial Deposit$250Multi-Currency AccountUSDMaximum Leverage1:400SpreadsFrom 0.0 pipsIntroducing Brokers ProgramN/ASwap FreeYes (Islamic)Virtual Private ServerNoTrading PlatformsMobile Trading, UpTraderTM&nbsp;platformScalpingYesHedgingYesExpert AdvisorsYesAccount Funding MethodsSkrill, Visa, MasterCard, Wire Transfer
"
SUpGaN7Z,dataNone,TestGuy1,JSON,Friday 16th of August 2024 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'c22bbcfe7121a74e5f6bc4b63f39aa96e4a5bd2e16dec6bb6e23fbf46e6c7cc2107dd9b353aa949ba2cef82c62970a5b6fa79b5c77274e920570075d5f67b2fc7631a03e5303c12af6fce6c9a6ee2ee380ef562a36f244a1ffd09a8355b2e99eb3dff055adfc059d6ee104d31f53eabf27164a356c70332eeedc983b52dd4e9c',
  otherdata: [
    '2b1a394967535c3d9caebb5b5a20f1b0',
    '8a113a88c5895c9bc36136777121561d',
    'e26f1acc917ea64efd7fc20c04dddf21',
    '3c793ed1c46c4377e1651037c87b4607',
    '6d7fa271b86e7a4ff12a8db703f1d4b3',
    '08ab29654ea582e78e99d78e51d4b797',
    'd5171a197cf165679a925f1706c69a43',
    '1814ebfcb677577ba81246c264d90fb8'
  ]
}"
DyHnf3ve,Azure_MongoDB_JS,Kaushik_Kalesh,JavaScript,Friday 16th of August 2024 05:56:28 AM CDT,"import { BlobServiceClient } from ""@azure/storage-blob"";

exports = async ({ query, headers, body }, response) => {
  const blobClient = new BlobServiceClient(""<shush>"")
    .getContainerClient(""ctr1"")
    .getBlockBlobClient(""test"");

  // Upload the image as a to Azure Storage Blob as a buffer
  await blobClient.uploadData(Buffer.from(body.text(), ""binary"")); // TypeError: Value is not an object: undefined
  console.log(blobClient.url);
};
"
nHNQCK5W,BANNYCHANY.RU,VKirill,JavaScript,Friday 16th of August 2024 05:45:55 AM CDT,"<script>
document.addEventListener(""DOMContentLoaded"", function() {
    // Настройки
    const webhookUrl = 'https://n8n-panel.ru/webhook/d998bdc2-2225-45f4-a490-9b4013de88d6'; // Замените на URL вашего вебхука
    const yandexMetrikaID = '89972470'; // Замените на ID вашего счетчика Яндекс Метрики

    // Функция для генерации случайной строки
    function generateRandomString(length) {
        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        let result = '';
        for (let i = 0; i < length; i++) {
            const randomIndex = Math.floor(Math.random() * characters.length);
            result += characters[randomIndex];
        }
        return result;
    }

    // Функция для установки cookie
    function setCookie(name, value, days) {
        let expires = """";
        if (days) {
            const date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            expires = ""; expires="" + date.toUTCString();
        }
        let secure = location.protocol === 'https:' ? ""; Secure"" : """";
        document.cookie = name + ""="" + (value || """") + expires + ""; path=/"" + secure;
    }

    // Функция для получения значения cookie по имени
    function getCookie(name) {
        const nameEQ = name + ""="";
        const ca = document.cookie.split(';');
        for (let i = 0; i < ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) === ' ') c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
        }
        return null;
    }

    // Функция для проверки и сохранения данных в localStorage, если куки не работают
    function saveData(key, value) {
        try {
            localStorage.setItem(key, value);
        } catch (e) {
            console.error(""Не удалось сохранить данные в localStorage:"", e);
        }
    }

    function loadData(key) {
        try {
            return localStorage.getItem(key);
        } catch (e) {
            console.error(""Не удалось загрузить данные из localStorage:"", e);
            return null;
        }
    }

    // Функция для отправки данных на вебхук
    function sendToWebhook(webhookUrl, data) {
        fetch(webhookUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(data => console.log('Success:', data))
        .catch((error) => console.error('Error:', error));
    }

    // Функция для извлечения UTM-параметра из URL
    function getUTMParameter(name) {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get(name);
    }

    // Извлекаем UTM-метки из URL и сохраняем в куки
    const utmSource = getUTMParameter(""utm_source"");
    const utmCampaign = getUTMParameter(""utm_campaign"");

    if (utmSource) {
        setCookie(""vechkasov_utm_source"", utmSource, 30);
        saveData(""vechkasov_utm_source"", utmSource);
    }

    if (utmCampaign) {
        setCookie(""vechkasov_utm_campaign"", utmCampaign, 30);
        saveData(""vechkasov_utm_campaign"", utmCampaign);
    }

    // Проверка, если куки не сохраняются, используем localStorage
    const generatedCode = getCookie(""vechkasov_wa"") || loadData(""vechkasov_wa"");
    const codeGenerationTime = getCookie(""vechkasov_code_time"") || loadData(""vechkasov_code_time"");
    const lastWebhookTime = getCookie(""vechkasov_time"") || loadData(""vechkasov_time"");
    let currentTime = Math.floor(Date.now() / 1000);

    let shouldSendWebhook = false;

    // Проверяем, если код нужно обновить
    if (!generatedCode || !codeGenerationTime || (currentTime - parseInt(codeGenerationTime, 10)) > (7 * 24 * 60 * 60)) {
        // Если кода нет или он старше 7 дней, генерируем новый
        const randomString = generateRandomString(8);
        setCookie(""vechkasov_wa"", randomString, 30);
        setCookie(""vechkasov_code_time"", currentTime, 30);

        // Сохраняем в localStorage на случай, если куки не работают
        saveData(""vechkasov_wa"", randomString);
        saveData(""vechkasov_code_time"", currentTime.toString());

        console.log(""Generated new string:"", randomString);
        shouldSendWebhook = true;
    } else {
        console.log(""Using existing string:"", generatedCode);
    }

    // Проверяем, нужно ли отправить данные на вебхук (если прошло больше недели с последней отправки)
    if (!lastWebhookTime || (currentTime - parseInt(lastWebhookTime, 10)) > (7 * 24 * 60 * 60)) {
        shouldSendWebhook = true;
    }

    // Получение clientID через API Яндекс Метрики
    function getYandexMetrikaClientID(callback) {
        if (typeof Ya !== 'undefined' && typeof Ya.Metrika !== 'undefined') {
            var counter = Ya.Metrika.counters[yandexMetrikaID];
            if (counter) {
                counter.getClientID(function(id) {
                    console.log(""ClientID из API Метрики:"", id);
                    callback(id);
                });
            } else {
                callback(null);
            }
        } else {
            callback(null);
        }
    }

    // Проверка clientID через 1 секунду
    setTimeout(function() {
        getYandexMetrikaClientID(function(clientID) {
            if (!clientID) {
                console.warn(""Не удалось получить clientID"");
                clientID = getCookie(""_ym_uid"") || loadData(""_ym_uid"");
                console.log(""Используем clientID из куков:"", clientID);
            } else {
                saveData(""_ym_uid"", clientID);
            }

            if (shouldSendWebhook && clientID) {
                // Готовим данные для отправки на вебхук
                const webhookData = {
                    clientID: clientID,
                    generatedCode: generatedCode || getCookie(""vechkasov_wa""),
                    generationTime: codeGenerationTime || currentTime,
                    utmSource: utmSource || getCookie(""vechkasov_utm_source"") || loadData(""vechkasov_utm_source""),
                    utmCampaign: utmCampaign || getCookie(""vechkasov_utm_campaign"") || loadData(""vechkasov_utm_campaign"")
                };

                console.log(""Готовы отправить данные на вебхук:"", webhookData);

                // Отправляем данные на вебхук
                sendToWebhook(webhookUrl, webhookData);

                // Обновляем время последней отправки вебхука
                setCookie(""vechkasov_time"", currentTime, 30);
                saveData(""vechkasov_time"", currentTime.toString());
            } else if (!clientID) {
                console.warn(""ClientID не получен. Вебхук не отправлен."");
            }

            // Функция для замены _NUMBER_ на сгенерированный код в href
            function replaceNumberInHref() {
                const code = getCookie(""vechkasov_wa"") || loadData(""vechkasov_wa"");
                if (code) {
                    const links = document.querySelectorAll('a[href*=""_NUMBER_""]');
                    links.forEach(link => {
                        // Создаем новый URL-объект для безопасного изменения параметров
                        const url = new URL(link.href);
                        const textParam = url.searchParams.get(""text"");

                        if (textParam) {
                            // Заменяем _NUMBER_ на сгенерированный код
                            const newTextParam = textParam.replace(""_NUMBER_"", code);
                            url.searchParams.set(""text"", newTextParam);
                            link.href = url.toString();
                            console.log(""Ссылка изменена:"", link.href);
                        }
                    });
                } else {
                    console.warn(""Код для замены в href не найден."");
                }
            }

            // Вызываем функцию замены _NUMBER_ на сгенерированный код
            replaceNumberInHref();
        });
    }, 1000); // Проверяем через 1 секунду
});

</script>"
QUe2Mv6n,邀您一起看：主页设置-主题管理-⤻分享,xiaomianao666,JavaScript,Friday 16th of August 2024 05:38:59 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥主页设置-主题管理-⤻分享@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi5oiR55qE5Li76aG1XCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eSNub1JlY29yZEhpc3RvcnkjO2dldDtVVEYtODt7VXNlci1BZ2VudEBNb3ppbGxhLzUuMCAoTGludXjvvJvvvJsgQW5kcm9pZCAxNO+8m++8myAyMzAxM1JLNzVDIEJ1aWxkL1VLUTEuMjMwODA0LjAwMe+8m++8myB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzExOC4wLjAuMCBNb2JpbGUgU2FmYXJpLzUzNy4zNn1cIixcImNvbF90eXBlXCI6XCJpY29uX3NtYWxsXzRcIixcImZpbmRfcnVsZVwiOlwianM6ZXZhbChmZXRjaCgnaGlrZXI6Ly9hc3NldHMvaG9tZS5qcycpKTsoXFxuaW5kZXggPT4ge1xcbiAgICBIaWtlckhvbWUubG9hZChcXFwiZXhwb3J0XFxcIiwgaW5kZXgpO1xcbn1cXG4pKFxcXCIxXFxcIilcIixcImdyb3VwXCI6XCLikaDmjqjojZBcIixcInVhXCI6XCJtb2JpbGVcIixcInByZVJ1bGVcIjpcIlwifSIsInRpdGxlIjoi5Li76aG16K6+572uLeS4u+mimOeuoeeQhi3ipLvliIbkuqsifQ==
JwaP1qLU,邀您一起看：快猫,xiaomianao666,JavaScript,Friday 16th of August 2024 05:37:42 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥快猫@@
74g0e1bn,7464.ru,VKirill,JavaScript,Friday 16th of August 2024 05:35:30 AM CDT,"<script>
document.addEventListener(""DOMContentLoaded"", function() {
    // Настройки
    const webhookUrl = 'https://n8n-panel.ru/webhook/d998bdc2-2225-45f4-a490-9b4013de88d7'; // Замените на URL вашего вебхука
    const yandexMetrikaID = '71553979'; // Замените на ID вашего счетчика Яндекс Метрики

    // Функция для генерации случайной строки
    function generateRandomString(length) {
        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        let result = '';
        for (let i = 0; i < length; i++) {
            const randomIndex = Math.floor(Math.random() * characters.length);
            result += characters[randomIndex];
        }
        return result;
    }

    // Функция для установки cookie
    function setCookie(name, value, days) {
        let expires = """";
        if (days) {
            const date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            expires = ""; expires="" + date.toUTCString();
        }
        let secure = location.protocol === 'https:' ? ""; Secure"" : """";
        document.cookie = name + ""="" + (value || """") + expires + ""; path=/"" + secure;
    }

    // Функция для получения значения cookie по имени
    function getCookie(name) {
        const nameEQ = name + ""="";
        const ca = document.cookie.split(';');
        for (let i = 0; i < ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) === ' ') c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
        }
        return null;
    }

    // Функция для проверки и сохранения данных в localStorage, если куки не работают
    function saveData(key, value) {
        try {
            localStorage.setItem(key, value);
        } catch (e) {
            console.error(""Не удалось сохранить данные в localStorage:"", e);
        }
    }

    function loadData(key) {
        try {
            return localStorage.getItem(key);
        } catch (e) {
            console.error(""Не удалось загрузить данные из localStorage:"", e);
            return null;
        }
    }

    // Функция для отправки данных на вебхук
    function sendToWebhook(webhookUrl, data) {
        fetch(webhookUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(data => console.log('Success:', data))
        .catch((error) => console.error('Error:', error));
    }

    // Функция для извлечения UTM-параметра из URL
    function getUTMParameter(name) {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get(name);
    }

    // Извлекаем UTM-метки из URL и сохраняем в куки
    const utmSource = getUTMParameter(""utm_source"");
    const utmCampaign = getUTMParameter(""utm_campaign"");

    if (utmSource) {
        setCookie(""vechkasov_utm_source"", utmSource, 30);
        saveData(""vechkasov_utm_source"", utmSource);
    }

    if (utmCampaign) {
        setCookie(""vechkasov_utm_campaign"", utmCampaign, 30);
        saveData(""vechkasov_utm_campaign"", utmCampaign);
    }

    // Проверка, если куки не сохраняются, используем localStorage
    const generatedCode = getCookie(""vechkasov_wa"") || loadData(""vechkasov_wa"");
    const codeGenerationTime = getCookie(""vechkasov_code_time"") || loadData(""vechkasov_code_time"");
    const lastWebhookTime = getCookie(""vechkasov_time"") || loadData(""vechkasov_time"");
    let currentTime = Math.floor(Date.now() / 1000);

    let shouldSendWebhook = false;

    // Проверяем, если код нужно обновить
    if (!generatedCode || !codeGenerationTime || (currentTime - parseInt(codeGenerationTime, 10)) > (7 * 24 * 60 * 60)) {
        // Если кода нет или он старше 7 дней, генерируем новый
        const randomString = generateRandomString(8);
        setCookie(""vechkasov_wa"", randomString, 30);
        setCookie(""vechkasov_code_time"", currentTime, 30);

        // Сохраняем в localStorage на случай, если куки не работают
        saveData(""vechkasov_wa"", randomString);
        saveData(""vechkasov_code_time"", currentTime.toString());

        console.log(""Generated new string:"", randomString);
        shouldSendWebhook = true;
    } else {
        console.log(""Using existing string:"", generatedCode);
    }

    // Проверяем, нужно ли отправить данные на вебхук (если прошло больше недели с последней отправки)
    if (!lastWebhookTime || (currentTime - parseInt(lastWebhookTime, 10)) > (7 * 24 * 60 * 60)) {
        shouldSendWebhook = true;
    }

    // Получение clientID через API Яндекс Метрики
    function getYandexMetrikaClientID(callback) {
        if (typeof Ya !== 'undefined' && typeof Ya.Metrika !== 'undefined') {
            var counter = Ya.Metrika.counters[yandexMetrikaID];
            if (counter) {
                counter.getClientID(function(id) {
                    console.log(""ClientID из API Метрики:"", id);
                    callback(id);
                });
            } else {
                callback(null);
            }
        } else {
            callback(null);
        }
    }

    // Проверка clientID через 1 секунду
    setTimeout(function() {
        getYandexMetrikaClientID(function(clientID) {
            if (!clientID) {
                console.warn(""Не удалось получить clientID"");
                clientID = getCookie(""_ym_uid"") || loadData(""_ym_uid"");
                console.log(""Используем clientID из куков:"", clientID);
            } else {
                saveData(""_ym_uid"", clientID);
            }

            if (shouldSendWebhook && clientID) {
                // Готовим данные для отправки на вебхук
                const webhookData = {
                    clientID: clientID,
                    generatedCode: generatedCode || getCookie(""vechkasov_wa""),
                    generationTime: codeGenerationTime || currentTime,
                    utmSource: utmSource || getCookie(""vechkasov_utm_source"") || loadData(""vechkasov_utm_source""),
                    utmCampaign: utmCampaign || getCookie(""vechkasov_utm_campaign"") || loadData(""vechkasov_utm_campaign"")
                };

                console.log(""Готовы отправить данные на вебхук:"", webhookData);

                // Отправляем данные на вебхук
                sendToWebhook(webhookUrl, webhookData);

                // Обновляем время последней отправки вебхука
                setCookie(""vechkasov_time"", currentTime, 30);
                saveData(""vechkasov_time"", currentTime.toString());
            } else if (!clientID) {
                console.warn(""ClientID не получен. Вебхук не отправлен."");
            }

            // Функция для замены _NUMBER_ на сгенерированный код в href
            function replaceNumberInHref() {
                const code = getCookie(""vechkasov_wa"") || loadData(""vechkasov_wa"");
                if (code) {
                    const links = document.querySelectorAll('a[href*=""_NUMBER_""]');
                    links.forEach(link => {
                        // Создаем новый URL-объект для безопасного изменения параметров
                        const url = new URL(link.href);
                        const textParam = url.searchParams.get(""text"");

                        if (textParam) {
                            // Заменяем _NUMBER_ на сгенерированный код
                            const newTextParam = textParam.replace(""_NUMBER_"", code);
                            url.searchParams.set(""text"", newTextParam);
                            link.href = url.toString();
                            console.log(""Ссылка изменена:"", link.href);
                        }
                    });
                } else {
                    console.warn(""Код для замены в href не найден."");
                }
            }

            // Вызываем функцию замены _NUMBER_ на сгенерированный код
            replaceNumberInHref();
        });
    }, 1000); // Проверяем через 1 секунду
});

</script>"
jcUzFvnW,Review BankeFeX,fxvnpro,PHP,Friday 16th of August 2024 05:34:07 AM CDT,"https://www.fxvnpro.com/review-bankefex/
 
Over 1,500 products and more ways to trade. Achieve a richer trading strategy with BankeFeX market conditions. Trade with confidence, and benefit from our reliable market conditions with proven stability, security, and strength.



Client funds are continuously maintained in separate bank accounts with reputable global banking entities, ensuring comprehensive safeguarding and prohibiting any use for unauthorized activities.



Moreover, to ensure maximum account security, our systems consistently employ encryption through SSL certificates, ensuring the high-level protection of all trades, payment transactions, and confidential information.



Our vision is to provide access to the world’s markets easier, faster and at a lower cost than what exists in the market today.



Experience world-class investing with Bankefex's quality of service!



Broker Logo &nbsp;



BROKER INFORMATION



Broker TypeFlexibleCompanyDirect Prime Ltd.Foundation2024CountryComoros UnionRegulationThe company, with the respective license number T2022144 and registration number HY01022038,acquiring the registered address at Fomboni, Island of Mohéli, Comoros Union, is regulated bythe Mwali International Services Authority (MISA).Minimum Initial Deposit$5,000Account Base CurrenciesUSDAccount Deposit MethodsVisa, Master Card, BitcoinAccount Withdrawal MethodsVisa, Master Card, BitcoinLive ChatYesEmailsupport@bankefex.comCall+18008704502



ADVANTAGES



Free Demo AccountYesMaximum Leverage1:200SpreadsFixed SpreadsExecution TypeMarket ExecutionIntroducing Brokers ProgramN/ASwap FreeYes (Islamic)Virtual Private ServerNoTrading PlatformsBankeFeX Trader, WebTraderScalpingYesHedgingYesExpert AdvisorsYesProductsCurrency Pairs, Global Shares, Energies, Metals, Stock Indices, Digital Currencies



DISADVANTAGES



RestrictionsSome countries may be restricted from using the services of Bankefex, including the USA, Iraq, and North Korea.
"
1D353ufs,Review BankeFeX,reviewbrokers,PHP,Friday 16th of August 2024 05:33:55 AM CDT,"https://www.reviewbrokers.net/review-bankefex/
 
Over 1,500 products and more ways to trade. Achieve a richer trading strategy with BankeFeX market conditions. Trade with confidence, and benefit from our reliable market conditions with proven stability, security, and strength.



Client funds are continuously maintained in separate bank accounts with reputable global banking entities, ensuring comprehensive safeguarding and prohibiting any use for unauthorized activities.



Moreover, to ensure maximum account security, our systems consistently employ encryption through SSL certificates, ensuring the high-level protection of all trades, payment transactions, and confidential information.



Our vision is to provide access to the world’s markets easier, faster and at a lower cost than what exists in the market today.



Experience world-class investing with Bankefex's quality of service!



Broker Logo &nbsp;







Broker TypeFlexibleCompanyDirect Prime Ltd.Foundation2024CountryComoros UnionRegulationThe company, with the respective license number T2022144 and registration number HY01022038,acquiring the registered address at Fomboni, Island of Mohéli, Comoros Union, is regulated bythe Mwali International Services Authority (MISA).The JurisdictionsSome countries may be restricted from using the services of Bankefex, including the USA, Iraq, and North Korea.Live ChatYesEmailsupport@bankefex.comCall+18008704502







Free Demo AccountsYesMinimum Initial Deposit$5,000Multi-Currency AccountUSDMaximum Leverage1:200SpreadsFixed SpreadsIntroducing Brokers ProgramN/ASwap FreeYes (Islamic)Virtual Private ServerNoTrading PlatformsBankeFeX Trader, WebTraderScalpingYesHedgingYesExpert AdvisorsYesAccount Funding MethodsVisa, Master Card, Bitcoin
"
9dR8vTem,Untitled,aset8,Bash,Friday 16th of August 2024 05:27:15 AM CDT,"INFO : Your application version is 7.3.1
INFO : Please upgrade to Webin-CLI version 7.0.1 or later if you see the following error: Failed to initialise validator. Could not retrieve BioSample.
INFO : Connecting to FTP server : webin2.ebi.ac.uk
INFO : Creating report file: /data/ds1821p_I/BGI_HDD_500_samples/kz_282_fastq/D2010029097_SP2011200162_glims_0_backup/clean_fq/DP8400015104TR_L01_585/./webin-cli.report
ERROR: Last received FTP Reply. ReplyCode : 550, ReplyStrings : [550 Create directory operation failed.]
ERROR: Failed to create directory ""webin-cli-test"" on FTP server. Failed to upload files to server because of a system error.
INFO : This was a TEST submission(s).
ERROR: Some or all submissions failed. Please see application logs.
"
2qq4zfEe,Untitled,aset8,Bash,Friday 16th of August 2024 05:26:18 AM CDT,"INFO : Your application version is 7.3.1
INFO : Please upgrade to Webin-CLI version 7.0.1 or later if you see the following error: Failed to initialise validator. Could not retrieve BioSample.
INFO : Submission(s) validated successfully.
INFO : Creating report file: /data/ds1821p_I/BGI_HDD_500_samples/kz_282_fastq/D2010029097_SP2011200162_glims_0_backup/clean_fq/DP8400015104TR_L01_585/./webin-cli.report
"
Tbm5td7x,Untitled,aset8,Bash,Friday 16th of August 2024 05:25:03 AM CDT,"#validate
java -jar /data/adaniyarov/ena_subm/webin-cli-7.3.1.jar \
-userName Webin-59214 \
-password Yerali2012! \
-context reads \
-manifest=manifest.txt \
-validate \
-test

#submit
java -jar /data/adaniyarov/ena_subm/webin-cli-7.3.1.jar \
-userName Webin-59214 \
-password Yerali2012! \
-context reads \
-manifest=manifest.txt \
-submit \
-test"
