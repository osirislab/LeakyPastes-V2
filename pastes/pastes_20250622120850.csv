id,title,username,language,date,content
7tFsP7D9,zxcwe,suramraja1,Lua,Sunday 22nd of June 2025 06:58:01 AM CDT,"coroutine.wrap(function()

    -- Inventory Price GUI for Grow A Garden (UPDATED FOR NEW MUTATIONS - Part 1)
    local Players = game:GetService(""Players"")
    local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
    local UserInputService = game:GetService(""UserInputService"")
    local RunService = game:GetService(""RunService"")
    local TweenService = game:GetService(""TweenService"")
    local player = Players.LocalPlayer
    
    -- Wait for required modules
    local CalculatePlantValue, DataService, MutationHandler
    
    pcall(function()
        CalculatePlantValue = require(ReplicatedStorage.Modules:WaitForChild(""CalculatePlantValue""))
    end)
    
    pcall(function()
        DataService = require(ReplicatedStorage.Modules:WaitForChild(""DataService""))
    end)
    
    -- 🔥 NEW: Load MutationHandler for proper mutation detection
    pcall(function()
        MutationHandler = require(ReplicatedStorage.Modules:WaitForChild(""MutationHandler""))
    end)
    
    -- Fallback functions if modules fail to load
    if not CalculatePlantValue then
        CalculatePlantValue = function() return 0 end
        warn(""CalculatePlantValue module not found - using fallback"")
    end
    
    if not DataService then
        DataService = { GetData = function() return {} end }
        warn(""DataService module not found - using fallback"")
    end
    
    -- 🔥 NEW: MutationHandler fallback with updated mutations
    if not MutationHandler then
        MutationHandler = {
            GetMutationsAsString = function(_, tool)
                -- Fallback mutation detection from tool name
                local toolName = tool.Name
                local mutationMatch = toolName:match(""^%[(.-)%]"")
                if mutationMatch and mutationMatch ~= """" then
                    return ""["" .. mutationMatch .. ""]""
                end
                return ""None""
            end,
            CalcValueMulti = function(_, tool)
                -- Fallback mutation value calculation
                local toolName = tool.Name
                local mutationMatch = toolName:match(""^%[(.-)%]"")
                if mutationMatch then
                    -- Updated mutation multipliers from game source
                    local mutationMultipliers = {
                        -- Basic mutations
                        [""Wet""] = 2, [""Chilled""] = 1.5, [""Windstruck""] = 2, [""Moonlit""] = 2, [""Pollinated""] = 3,
                        -- Advanced mutations  
                        [""Twisted""] = 5, [""Burnt""] = 4, [""Plasma""] = 5, [""Heavenly""] = 5, [""HoneyGlazed""] = 5, [""Cooked""] = 10,
                        -- High-value mutations
                        [""Molten""] = 25, [""Meteoric""] = 50, [""Shocked""] = 100, [""Alienlike""] = 100, [""Disco""] = 125,
                        -- Ultra-rare mutations
                        [""Voidtouched""] = 135, [""Dawnbound""] = 150, [""Bloodlit""] = 4, [""Choc""] = 2,
                        -- Legacy mutations
                        [""Frozen""] = 3
                    }
                    
                    local totalMulti = 1
                    for mutation in mutationMatch:gmatch(""[^,]+"") do
                        local cleanMutation = mutation:match(""^%s*(.-)%s*$"") -- trim whitespace
                        if mutationMultipliers[cleanMutation] then
                            totalMulti = totalMulti + (mutationMultipliers[cleanMutation] - 1)
                        end
                    end
                    return math.max(1, totalMulti)
                end
                return 1
            end
        }
        warn(""MutationHandler module not found - using fallback with updated mutations"")
    end
    
    -- Helper to format numbers
    local function formatNumber(n)
        if not n or type(n) ~= ""number"" then return ""$0"" end
        local sign = (n < 0) and ""-"" or """"
        local absn = math.abs(n)
        local suffix = """"
        if absn >= 1e12 then
            n = n/1e12; suffix = ""T""
        elseif absn >= 1e9 then
            n = n/1e9; suffix = ""B""
        elseif absn >= 1e6 then
            n = n/1e6; suffix = ""M""
        elseif absn >= 1e3 then
            n = n/1e3; suffix = ""K""
        end
        local i = math.floor(math.abs(n))
        local f = math.abs(n) - i
        local frac = (f > 0) and (""%.1f""):format(f):sub(2) or """"
        local s = tostring(i)
        while true do
            local count
            s, count = s:gsub(""^(-?%d+)(%d%d%d)"", ""%1,%2"")
            if count == 0 then break end
        end
        return ""$"" .. sign .. s .. frac .. suffix
    end
    
    -- Create GUI
    local playerGui = player:WaitForChild(""PlayerGui"")
    
    -- Remove existing gui if it exists
    local existingGui = playerGui:FindFirstChild(""InventoryPriceGui"")
    if existingGui then
        existingGui:Destroy()
    end
    
    -- State variables
    local currentSortColumn = ""Price""
    local currentSortDir = ""desc""
    local allItemsData = {}
    local isMinimized = false 
    local originalSize
    local sortButtons = {}
    local isRefreshing = false
    local lastRefreshTime = 0
    
    -- Create main GUI with cool effects
    local inventoryGui = Instance.new(""ScreenGui"")
    inventoryGui.Name = ""InventoryPriceGui""
    inventoryGui.ResetOnSpawn = false
    inventoryGui.Parent = playerGui
    
    -- Main frame with gradient background
    local mainFrame = Instance.new(""Frame"")
    mainFrame.Size = UDim2.new(0, 650, 0, 500)
    mainFrame.Position = UDim2.new(0.5, -325, 0.5, -250)
    mainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
    mainFrame.BackgroundTransparency = 0.05
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = inventoryGui
    mainFrame.Active = true
    mainFrame.ZIndex = 2
    
    -- Store original size for minimizing
    originalSize = mainFrame.Size
    
    -- Cool gradient background
    local gradient = Instance.new(""UIGradient"")
    gradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(35, 35, 50)),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(25, 25, 35)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(20, 20, 30))
    }
    gradient.Rotation = 45
    gradient.Parent = mainFrame
    
    -- Glowing border effect
    local borderGlow = Instance.new(""UIStroke"")
    borderGlow.Color = Color3.fromRGB(100, 150, 255)
    borderGlow.Thickness = 2
    borderGlow.Transparency = 0.3
    borderGlow.Parent = mainFrame
    
    -- Rounded corners
    local mainCorner = Instance.new(""UICorner"")
    mainCorner.CornerRadius = UDim.new(0, 12)
    mainCorner.Parent = mainFrame
    
    -- FIXED Drop shadow effect (positioned correctly)
    local shadowFrame = Instance.new(""Frame"")
    shadowFrame.Size = mainFrame.Size
    shadowFrame.Position = UDim2.new(0, 5, 0, 5) -- Fixed shadow offset
    shadowFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    shadowFrame.BackgroundTransparency = 0.8
    shadowFrame.BorderSizePixel = 0
    shadowFrame.ZIndex = 1
    shadowFrame.Parent = mainFrame -- Parent to mainFrame instead of inventoryGui
    
    local shadowCorner = Instance.new(""UICorner"")
    shadowCorner.CornerRadius = UDim.new(0, 12)
    shadowCorner.Parent = shadowFrame
    
    -- Title bar with cool styling
    local titleBar = Instance.new(""Frame"")
    titleBar.Name = ""TitleBar""
    titleBar.Size = UDim2.new(1, 0, 0, 50)
    titleBar.BackgroundColor3 = Color3.fromRGB(15, 15, 25)
    titleBar.BorderSizePixel = 0
    titleBar.Parent = mainFrame
    titleBar.ZIndex = 3
    
    -- Title bar gradient
    local titleGradient = Instance.new(""UIGradient"")
    titleGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(45, 45, 65)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(25, 25, 40))
    }
    titleGradient.Rotation = 90
    titleGradient.Parent = titleBar
    
    -- Title bar glow
    local titleGlow = Instance.new(""UIStroke"")
    titleGlow.Color = Color3.fromRGB(150, 200, 255)
    titleGlow.Thickness = 1
    titleGlow.Transparency = 0.5
    titleGlow.Parent = titleBar
    
    -- Rounded corners for title bar
    local titleCorner = Instance.new(""UICorner"")
    titleCorner.CornerRadius = UDim.new(0, 12)
    titleCorner.Parent = titleBar
    
    -- Bottom frame to square off title bar
    local bottomFrame = Instance.new(""Frame"")
    bottomFrame.Size = UDim2.new(1, 0, 0.3, 0)
    bottomFrame.Position = UDim2.new(0, 0, 0.7, 0)
    bottomFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 40)
    bottomFrame.BorderSizePixel = 0
    bottomFrame.Parent = titleBar
    
    -- Cool drag handle indicator (more visible)
    local dragHandle = Instance.new(""Frame"")
    dragHandle.Name = ""DragHandle""
    dragHandle.Size = UDim2.new(0, 80, 0, 8)
    dragHandle.Position = UDim2.new(0.5, -40, 0, 6)
    dragHandle.BackgroundColor3 = Color3.fromRGB(150, 200, 255)
    dragHandle.BackgroundTransparency = 0.2
    dragHandle.BorderSizePixel = 0
    dragHandle.Parent = titleBar
    dragHandle.ZIndex = 4
    
    local dragCorner = Instance.new(""UICorner"")
    dragCorner.CornerRadius = UDim.new(0, 4)
    dragCorner.Parent = dragHandle
    
    -- Add drag handle glow
    local dragGlow = Instance.new(""UIStroke"")
    dragGlow.Color = Color3.fromRGB(150, 200, 255)
    dragGlow.Thickness = 1
    dragGlow.Transparency = 0.4
    dragGlow.Parent = dragHandle
    
    -- Animate drag handle (more prominent)
    spawn(function()
        while dragHandle.Parent do
            local tween1 = TweenService:Create(dragHandle, TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
                BackgroundTransparency = 0.1,
                Size = UDim2.new(0, 85, 0, 8)
            })
            tween1:Play()
            tween1.Completed:Wait()
            
            local tween2 = TweenService:Create(dragHandle, TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
                BackgroundTransparency = 0.4,
                Size = UDim2.new(0, 80, 0, 8)
            })
            tween2:Play()
            tween2.Completed:Wait()
        end
    end)
    
    -- Cool title with proper spacing and centered
    local titleText = Instance.new(""TextLabel"")
    titleText.Name = ""Title""
    titleText.Size = UDim2.new(1, -300, 1, 0) -- More space for buttons
    titleText.Position = UDim2.new(0, 150, 0, 0) -- Centered position
    titleText.BackgroundTransparency = 1
    titleText.Text = ""🍎 Loading Inventory..."" -- Initial loading text
    titleText.Font = Enum.Font.GothamBold
    titleText.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleText.TextSize = 20 -- Slightly smaller to fit better
    titleText.TextXAlignment = Enum.TextXAlignment.Center -- Centered text
    titleText.Parent = titleBar
    titleText.ZIndex = 4
    
    -- Add text glow effect
    local titleStroke = Instance.new(""UIStroke"")
    titleStroke.Color = Color3.fromRGB(100, 200, 255)
    titleStroke.Thickness = 1
    titleStroke.Transparency = 0.7
    titleStroke.Parent = titleText
    
    -- Close button with hover effects
    local closeButton = Instance.new(""TextButton"")
    closeButton.Name = ""CloseButton""
    closeButton.Size = UDim2.new(0, 40, 0, 40)
    closeButton.Position = UDim2.new(1, -45, 0, 5)
    closeButton.BackgroundColor3 = Color3.fromRGB(220, 60, 60)
    closeButton.Text = ""✕""
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.TextSize = 20
    closeButton.Font = Enum.Font.GothamBold
    closeButton.Parent = titleBar
    closeButton.ZIndex = 4
    
    local closeCorner = Instance.new(""UICorner"")
    closeCorner.CornerRadius = UDim.new(0, 10)
    closeCorner.Parent = closeButton
    
    local closeGradient = Instance.new(""UIGradient"")
    closeGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 80, 80)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(200, 40, 40))
    }
    closeGradient.Rotation = 90
    closeGradient.Parent = closeButton
    
    -- Minimize button
    local minimizeButton = Instance.new(""TextButton"")
    minimizeButton.Name = ""MinimizeButton""
    minimizeButton.Size = UDim2.new(0, 40, 0, 40)
    minimizeButton.Position = UDim2.new(1, -90, 0, 5)
    minimizeButton.BackgroundColor3 = Color3.fromRGB(60, 120, 220)
    minimizeButton.Text = ""−""
    minimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    minimizeButton.TextSize = 22
    minimizeButton.Font = Enum.Font.GothamBold
    minimizeButton.Parent = titleBar
    minimizeButton.ZIndex = 4
    
    local minimizeCorner = Instance.new(""UICorner"")
    minimizeCorner.CornerRadius = UDim.new(0, 10)
    minimizeCorner.Parent = minimizeButton
    
    local minimizeGradient = Instance.new(""UIGradient"")
    minimizeGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(80, 140, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(40, 100, 200))
    }
    minimizeGradient.Rotation = 90
    minimizeGradient.Parent = minimizeButton
    
    -- Refresh Button with proper spacing
    local refreshButton = Instance.new(""TextButton"")
    refreshButton.Name = ""RefreshButton""
    refreshButton.Size = UDim2.new(0, 130, 0, 35)
    refreshButton.Position = UDim2.new(0, 20, 0, 7.5)
    refreshButton.BackgroundColor3 = Color3.fromRGB(60, 180, 60)
    refreshButton.Text = ""🔄 Refresh""
    refreshButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    refreshButton.TextSize = 16
    refreshButton.Font = Enum.Font.GothamSemibold
    refreshButton.Parent = titleBar
    refreshButton.ZIndex = 4
    
    local refreshCorner = Instance.new(""UICorner"")
    refreshCorner.CornerRadius = UDim.new(0, 8)
    refreshCorner.Parent = refreshButton
    
    local refreshGradient = Instance.new(""UIGradient"")
    refreshGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(80, 200, 80)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(40, 160, 40))
    }
    refreshGradient.Rotation = 90
    refreshGradient.Parent = refreshButton
    
    -- Header Frame with better spacing and cool sort buttons
    local headerFrame = Instance.new(""Frame"")
    headerFrame.Name = ""HeaderFrame""
    headerFrame.Size = UDim2.new(1, -40, 0, 45)
    headerFrame.Position = UDim2.new(0, 20, 0, 65)
    headerFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 55)
    headerFrame.BackgroundTransparency = 0.2
    headerFrame.Parent = mainFrame
    headerFrame.ZIndex = 3
    
    local headerGradient = Instance.new(""UIGradient"")
    headerGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(50, 50, 70)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(35, 35, 50))
    }
    headerGradient.Rotation = 90
    headerGradient.Parent = headerFrame
    
    local headerCorner = Instance.new(""UICorner"")
    headerCorner.CornerRadius = UDim.new(0, 8)
    headerCorner.Parent = headerFrame
    
    local headerStroke = Instance.new(""UIStroke"")
    headerStroke.Color = Color3.fromRGB(80, 120, 200)
    headerStroke.Thickness = 1
    headerStroke.Transparency = 0.6
    headerStroke.Parent = headerFrame
    
    -- Scrolling Frame with fixed positioning
    local scrollingFrame = Instance.new(""ScrollingFrame"")
    scrollingFrame.Name = ""ScrollingFrame""
    scrollingFrame.Size = UDim2.new(1, -40, 1, -180)
    scrollingFrame.Position = UDim2.new(0, 20, 0, 125)
    scrollingFrame.BackgroundTransparency = 1
    scrollingFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
    scrollingFrame.BorderSizePixel = 0
    scrollingFrame.ScrollBarThickness = 12
    scrollingFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 150, 255)
    scrollingFrame.Parent = mainFrame
    scrollingFrame.ZIndex = 3
    
    local scrollCorner = Instance.new(""UICorner"")
    scrollCorner.CornerRadius = UDim.new(0, 8)
    scrollCorner.Parent = scrollingFrame
    
    -- RESIZE HANDLE
    local resizeHandle = Instance.new(""Frame"")
    resizeHandle.Name = ""ResizeHandle""
    resizeHandle.Size = UDim2.new(0, 30, 0, 30)
    resizeHandle.Position = UDim2.new(1, -30, 1, -30)
    resizeHandle.BackgroundColor3 = Color3.fromRGB(100, 150, 255)
    resizeHandle.BackgroundTransparency = 0.3
    resizeHandle.Parent = mainFrame
    resizeHandle.ZIndex = 10
    
    local resizeCorner = Instance.new(""UICorner"")
    resizeCorner.CornerRadius = UDim.new(0, 8)
    resizeCorner.Parent = resizeHandle
    
    local resizeGradient = Instance.new(""UIGradient"")
    resizeGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(120, 170, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(80, 130, 200))
    }
    resizeGradient.Rotation = 45
    resizeGradient.Parent = resizeHandle
    
    local resizeGlow = Instance.new(""UIStroke"")
    resizeGlow.Color = Color3.fromRGB(100, 150, 255)
    resizeGlow.Thickness = 1
    resizeGlow.Transparency = 0.5
    resizeGlow.Parent = resizeHandle
    
    local resizeTexture = Instance.new(""TextLabel"")
    resizeTexture.Name = ""ResizeTexture""
    resizeTexture.Size = UDim2.new(1, 0, 1, 0)
    resizeTexture.BackgroundTransparency = 1
    resizeTexture.Text = ""⇲""
    resizeTexture.TextColor3 = Color3.fromRGB(255, 255, 255)
    resizeTexture.TextSize = 18
    resizeTexture.Font = Enum.Font.GothamBold
    resizeTexture.Parent = resizeHandle
    resizeTexture.ZIndex = 11
    
    -- Total price indicator
    local totalFrame = Instance.new(""Frame"")
    totalFrame.Name = ""TotalFrame""
    totalFrame.Size = UDim2.new(1, -40, 0, 40)
    totalFrame.Position = UDim2.new(0, 20, 1, -50)
    totalFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 55)
    totalFrame.BackgroundTransparency = 0.2
    totalFrame.Parent = mainFrame
    totalFrame.ZIndex = 3
    
    local totalGradient = Instance.new(""UIGradient"")
    totalGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(60, 60, 80)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(40, 40, 60))
    }
    totalGradient.Rotation = 90
    totalGradient.Parent = totalFrame
    
    local totalCorner = Instance.new(""UICorner"")
    totalCorner.CornerRadius = UDim.new(0, 8)
    totalCorner.Parent = totalFrame
    
    local totalStroke = Instance.new(""UIStroke"")
    totalStroke.Color = Color3.fromRGB(255, 215, 0)
    totalStroke.Thickness = 2
    totalStroke.Transparency = 0.4
    totalStroke.Parent = totalFrame
    
    local totalLabel = Instance.new(""TextLabel"")
    totalLabel.Name = ""TotalLabel""
    totalLabel.Size = UDim2.new(0.5, 0, 1, 0)
    totalLabel.BackgroundTransparency = 1
    totalLabel.Font = Enum.Font.GothamBold
    totalLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    totalLabel.TextSize = 20
    totalLabel.Text = ""💎 Total Value:""
    totalLabel.TextXAlignment = Enum.TextXAlignment.Left
    totalLabel.Position = UDim2.new(0, 20, 0, 0)
    totalLabel.Parent = totalFrame
    totalLabel.ZIndex = 4
    
    local totalValueLabel = Instance.new(""TextLabel"")
    totalValueLabel.Name = ""TotalValueLabel""
    totalValueLabel.Size = UDim2.new(0.5, -20, 1, 0)
    totalValueLabel.Position = UDim2.new(0.5, 0, 0, 0)
    totalValueLabel.BackgroundTransparency = 1
    totalValueLabel.Font = Enum.Font.GothamBold
    totalValueLabel.TextColor3 = Color3.fromRGB(255, 215, 0)
    totalValueLabel.TextSize = 20
    totalValueLabel.Text = ""Loading...""
    totalValueLabel.TextXAlignment = Enum.TextXAlignment.Right
    totalValueLabel.Parent = totalFrame
    totalValueLabel.ZIndex = 4
    
    local totalValueStroke = Instance.new(""UIStroke"")
    totalValueStroke.Color = Color3.fromRGB(255, 215, 0)
    totalValueStroke.Thickness = 1
    totalValueStroke.Transparency = 0.5
    totalValueStroke.Parent = totalValueLabel
    
    -- Column Headers with sort buttons
    local columns = {""Fruit Name"", ""Variant"", ""Mutations"", ""Weight (kg)"", ""Price""}
    local columnWidths = {0.28, 0.15, 0.25, 0.15, 0.17}
    
    local currentX = 0
    for i, columnName in ipairs(columns) do
        local headerContainer = Instance.new(""Frame"")
        headerContainer.Name = columnName:gsub("" "", """") .. ""HeaderContainer""
        headerContainer.Size = UDim2.new(columnWidths[i], 0, 1, 0)
        headerContainer.Position = UDim2.new(currentX, 0, 0, 0)
        headerContainer.BackgroundTransparency = 1
        headerContainer.Parent = headerFrame
        headerContainer.ZIndex = 4
        
        local columnHeader = Instance.new(""TextLabel"")
        columnHeader.Name = columnName:gsub("" "", """") .. ""Header""
        columnHeader.Size = UDim2.new(1, -50, 1, 0)
        columnHeader.Position = UDim2.new(0, 15, 0, 0)
        columnHeader.BackgroundTransparency = 1
        columnHeader.Font = Enum.Font.GothamBold
        columnHeader.TextColor3 = Color3.fromRGB(255, 255, 255)
        columnHeader.TextSize = 16
        columnHeader.Text = columnName
        columnHeader.TextXAlignment = Enum.TextXAlignment.Left
        columnHeader.Parent = headerContainer
        columnHeader.ZIndex = 5
        
        local sortButton = Instance.new(""TextButton"")
        sortButton.Name = ""SortButton""
        sortButton.Size = UDim2.new(0, 38, 0, 38)
        sortButton.Position = UDim2.new(1, -43, 0.5, -19)
        sortButton.BackgroundTransparency = 0.05
        sortButton.BackgroundColor3 = Color3.fromRGB(120, 140, 180)
        sortButton.Text = columnName == currentSortColumn and (currentSortDir == ""asc"" and ""▲"" or ""▼"") or ""⬥""
        sortButton.TextColor3 = columnName == currentSortColumn 
                             and Color3.fromRGB(255, 255, 100) 
                             or Color3.fromRGB(255, 255, 255)
        sortButton.TextSize = 18
        sortButton.Font = Enum.Font.GothamBold
        sortButton.Parent = headerContainer
        sortButton.ZIndex = 6
        
        local sortCorner = Instance.new(""UICorner"")
        sortCorner.CornerRadius = UDim.new(0, 10)
        sortCorner.Parent = sortButton
        
        local sortGradient = Instance.new(""UIGradient"")
        sortGradient.Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0, Color3.fromRGB(160, 180, 220)),
            ColorSequenceKeypoint.new(0.5, Color3.fromRGB(255, 255, 255)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(120, 140, 180))
        }
        sortGradient.Rotation = 90
        sortGradient.Parent = sortButton
        
        local sortGlow = Instance.new(""UIStroke"")
        sortGlow.Color = columnName == currentSortColumn 
                       and Color3.fromRGB(255, 255, 100) 
                       or Color3.fromRGB(200, 220, 255)
        sortGlow.Thickness = 2
        sortGlow.Transparency = 0.3
        sortGlow.Parent = sortButton
        
        sortButton.MouseEnter:Connect(function()
            local hoverTween = TweenService:Create(sortButton, TweenInfo.new(0.2), {
                Size = UDim2.new(0, 42, 0, 42),
                BackgroundTransparency = 0.0
            })
            hoverTween:Play()
            
            local glowTween = TweenService:Create(sortGlow, TweenInfo.new(0.2), {
                Transparency = 0.1,
                Thickness = 3
            })
            glowTween:Play()
        end)
        
        sortButton.MouseLeave:Connect(function()
            local leaveTween = TweenService:Create(sortButton, TweenInfo.new(0.2), {
                Size = UDim2.new(0, 38, 0, 38),
                BackgroundTransparency = 0.05
            })
            leaveTween:Play()
            
            local glowTween = TweenService:Create(sortGlow, TweenInfo.new(0.2), {
                Transparency = 0.3,
                Thickness = 2
            })
            glowTween:Play()
        end)
        
        sortButtons[columnName] = sortButton
        currentX = currentX + columnWidths[i]
    end
    
    -- Show initial loading state in scrolling frame
    local loadingFrame = Instance.new(""Frame"")
    loadingFrame.Name = ""LoadingFrame""
    loadingFrame.Size = UDim2.new(1, 0, 0, 100)
    loadingFrame.Position = UDim2.new(0, 0, 0.5, -50)
    loadingFrame.BackgroundTransparency = 1
    loadingFrame.Parent = scrollingFrame
    loadingFrame.ZIndex = 10
    
    local loadingText = Instance.new(""TextLabel"")
    loadingText.Size = UDim2.new(1, 0, 1, 0)
    loadingText.BackgroundTransparency = 1
    loadingText.Text = ""🔄 Loading your inventory...""
    loadingText.TextColor3 = Color3.fromRGB(255, 255, 255)
    loadingText.TextSize = 18
    loadingText.Font = Enum.Font.GothamSemibold
    loadingText.Parent = loadingFrame
    loadingText.ZIndex = 11
    
    -- Animate loading text
    spawn(function()
        local dots = 0
        while loadingFrame.Parent do
            dots = (dots + 1) % 4
            loadingText.Text = ""🔄 Loading your inventory"" .. string.rep(""."", dots)
            task.wait(0.5)
        end
    end)
    
    -- COMPLETE DRAGGING IMPLEMENTATION (Mobile-friendly)
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
            
            local dragTween = TweenService:Create(dragHandle, TweenInfo.new(0.2), {
                BackgroundColor3 = Color3.fromRGB(255, 215, 0),
                BackgroundTransparency = 0.1,
                Size = UDim2.new(0, 90, 0, 10)
            })
            dragTween:Play()
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                    
                    local dragTween = TweenService:Create(dragHandle, TweenInfo.new(0.3), {
                        BackgroundColor3 = Color3.fromRGB(150, 200, 255),
                        BackgroundTransparency = 0.2,
                        Size = UDim2.new(0, 80, 0, 8)
                    })
                    dragTween:Play()
                end
            end)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            mainFrame.Position = UDim2.new(
                startPos.X.Scale, 
                startPos.X.Offset + delta.X,
                startPos.Y.Scale, 
                startPos.Y.Offset + delta.Y
            )
        end
    end)
    
    -- RESIZE IMPLEMENTATION (Mobile-friendly)
    local resizing = false
    local resizeStart
    local startSize
    
    resizeHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            resizing = true
            resizeStart = input.Position
            startSize = mainFrame.Size
            
            local resizeTween = TweenService:Create(resizeHandle, TweenInfo.new(0.2), {
                BackgroundColor3 = Color3.fromRGB(255, 215, 0),
                BackgroundTransparency = 0.1
            })
            resizeTween:Play()
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    resizing = false
                    
                    local resizeTween = TweenService:Create(resizeHandle, TweenInfo.new(0.3), {
                        BackgroundColor3 = Color3.fromRGB(100, 150, 255),
                        BackgroundTransparency = 0.3
                    })
                    resizeTween:Play()
                end
            end)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if resizing and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - resizeStart
            local newWidth = math.max(500, startSize.X.Offset + delta.X)
            local newHeight = math.max(350, startSize.Y.Offset + delta.Y)
            
            local newSize = UDim2.new(0, newWidth, 0, newHeight)
            mainFrame.Size = newSize
            shadowFrame.Size = newSize
            originalSize = newSize
        end
    end)
    
    -- Function to toggle minimize state with animation (FIXED SHADOW ISSUE)
    local function toggleMinimize()
        isMinimized = not isMinimized
        
        local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
        
        if isMinimized then
            originalSize = mainFrame.Size
            local minimizeSize = UDim2.new(0, 450, 0, 50)
            
            local minimizeTween = TweenService:Create(mainFrame, tweenInfo, {Size = minimizeSize})
            local shadowTween = TweenService:Create(shadowFrame, tweenInfo, {Size = minimizeSize})
            
            minimizeTween:Play()
            shadowTween:Play()
            
            minimizeButton.Text = ""+""
            
            headerFrame.Visible = false
            scrollingFrame.Visible = false
            totalFrame.Visible = false
            resizeHandle.Visible = false
        else
            local expandTween = TweenService:Create(mainFrame, tweenInfo, {Size = originalSize})
            local shadowExpandTween = TweenService:Create(shadowFrame, tweenInfo, {Size = originalSize})
            
            expandTween:Play()
            shadowExpandTween:Play()
            
            minimizeButton.Text = ""−""
            
            headerFrame.Visible = true
            scrollingFrame.Visible = true
            totalFrame.Visible = true
            resizeHandle.Visible = true
        end
    end
    
    -- Button hover effects and connections
    minimizeButton.MouseEnter:Connect(function()
        local hoverTween = TweenService:Create(minimizeButton, TweenInfo.new(0.2), {Size = UDim2.new(0, 43, 0, 43)})
        hoverTween:Play()
    end)
    
    minimizeButton.MouseLeave:Connect(function()
        local leaveTween = TweenService:Create(minimizeButton, TweenInfo.new(0.2), {Size = UDim2.new(0, 40, 0, 40)})
        leaveTween:Play()
    end)
    
    minimizeButton.MouseButton1Click:Connect(toggleMinimize)
    
    closeButton.MouseEnter:Connect(function()
        local hoverTween = TweenService:Create(closeButton, TweenInfo.new(0.2), {Size = UDim2.new(0, 43, 0, 43)})
        hoverTween:Play()
    end)
    
    closeButton.MouseLeave:Connect(function()
        local leaveTween = TweenService:Create(closeButton, TweenInfo.new(0.2), {Size = UDim2.new(0, 40, 0, 40)})
        leaveTween:Play()
    end)
    
    closeButton.MouseButton1Click:Connect(function()
        local closeTween = TweenService:Create(mainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In), {
            Size = UDim2.new(0, 0, 0, 0),
            Position = UDim2.new(0.5, 0, 0.5, 0)
        })
        closeTween:Play()
        
        closeTween.Completed:Connect(function()
            inventoryGui:Destroy()
        end)
    end)
    
    -- Forward declaration
    local createSortedItemList
    
    -- Enhanced data access function
    local function getPlayerData()
        local playerData = {}
        
        pcall(function()
            if DataService and DataService.GetData then
                playerData = DataService:GetData() or {}
            end
        end)
        
        return playerData
    end
    
    -- Safe price calculation function
    local function calculateItemPrice(properTool)
        local price = 0
        
        if not properTool then
            return 0
        end
        
        local success, result = pcall(function()
            return CalculatePlantValue(properTool)
        end)
        
        if success and result then
            if type(result) == ""number"" and result == result and result >= 0 then
                price = math.floor(result)
            end
        end
        
        return price
    end
    
    -- Function to refresh the inventory list
    local function refreshInventoryList()
        if isRefreshing then return end
        isRefreshing = true
        
        -- Remove loading indicator if it exists
        local loadingFrame = scrollingFrame:FindFirstChild(""LoadingFrame"")
        if loadingFrame then
            loadingFrame:Destroy()
        end
        
        local currentTime = tick()
        if currentTime - lastRefreshTime < 2 then
            isRefreshing = false
            return
        end
        lastRefreshTime = currentTime
        
        refreshButton.Text = ""🔄 Loading...""
        refreshButton.BackgroundColor3 = Color3.fromRGB(120, 120, 120)
        
        allItemsData = {}
        
        -- Clear scrolling frame first
        for _, child in pairs(scrollingFrame:GetChildren()) do
            if child:IsA(""Frame"") then
                child:Destroy()
            end
        end
        
        local playerData = getPlayerData()
        local totalValue = 0
        local itemCount = 0
        
        -- Get tools from player's backpack and character
        local backpack = player:FindFirstChild(""Backpack"")
        local character = player.Character
        local tools = {}
        
        if backpack then
            for _, tool in pairs(backpack:GetChildren()) do
                if tool:IsA(""Tool"") then
                    table.insert(tools, tool)
                end
            end
        end
        
        if character then
            for _, tool in pairs(character:GetChildren()) do
                if tool:IsA(""Tool"") then
                    table.insert(tools, tool)
                end
            end
        end
        
        -- Process each tool
        for _, tool in pairs(tools) do
            local hasFruitData = tool:FindFirstChild(""Item_String"") and tool:FindFirstChild(""Variant"") and tool:FindFirstChild(""Weight"")
            local isNotSeed = not tool.Name:find(""Seed"") and not tool.Name:find(""Destroy"") and not tool.Name:find(""Trowel"")
            
            if hasFruitData and isNotSeed then
                itemCount = itemCount + 1
                
                local toolName = tool.Name
                local itemStringValue = tool:FindFirstChild(""Item_String"")
                local cleanFruitName = itemStringValue and itemStringValue.Value or ""Unknown""
                
                local variantValue = tool:FindFirstChild(""Variant"")
                local variant = variantValue and variantValue.Value or ""Normal""
                
                local weightValue = tool:FindFirstChild(""Weight"")
                local weight = weightValue and weightValue.Value or 0
                local weightDisplay = string.format(""%.2f"", weight)
                
                local mutations = ""None""
                -- 🔥 UPDATED: Use proper MutationHandler for mutation detection
                if MutationHandler then
                    local mutationString = MutationHandler:GetMutationsAsString(tool, true)
                    if mutationString and mutationString ~= """" then
                        mutations = mutationString
                    end
                else
                    -- Fallback to old method
                    local mutationMatch = toolName:match(""^%[(.-)%]"")
                    if mutationMatch and mutationMatch ~= """" then
                        mutations = ""["" .. mutationMatch .. ""]""
                    end
                end
                
                local price = 0
                pcall(function()
                    price = CalculatePlantValue(tool)
                end)
                
                if type(price) ~= ""number"" or price ~= price or price < 0 then
                    price = 0
                end
                
                totalValue = totalValue + price
                
                table.insert(allItemsData, {
                    name = cleanFruitName,
                    variant = variant,
                    mutations = mutations,
                    weight = weightDisplay,
                    weightNum = weight,
                    price = price,
                    formattedPrice = formatNumber(price),
                    uuid = tool:GetAttribute(""ITEM_UUID"") or ""unknown""
                })
            end
        end
        
        -- Update total with animation
        if type(totalValue) == ""number"" and totalValue == totalValue then
            totalValueLabel.Text = formatNumber(totalValue)
            
            local colorTween = TweenService:Create(totalValueLabel, TweenInfo.new(0.5), {
                TextColor3 = Color3.fromRGB(100, 255, 100)
            })
            colorTween:Play()
            
            colorTween.Completed:Connect(function()
                local backTween = TweenService:Create(totalValueLabel, TweenInfo.new(0.5), {
                    TextColor3 = Color3.fromRGB(255, 215, 0)
                })
                backTween:Play()
            end)
        else
            totalValueLabel.Text = ""$0""
        end
        
        createSortedItemList()
        
        refreshButton.Text = ""🔄 Refresh""
        refreshButton.BackgroundColor3 = Color3.fromRGB(60, 180, 60)
        isRefreshing = false
    end
    
    -- Function to create sorted item list
    createSortedItemList = function()
        -- Clear existing list
        for _, child in pairs(scrollingFrame:GetChildren()) do
            if child:IsA(""Frame"") then
                child:Destroy()
            end
        end
        
        -- Sort the items data
        table.sort(allItemsData, function(a, b)
            local aValue, bValue
            
            if currentSortColumn == ""Fruit Name"" then
                aValue = a.name:lower()
                bValue = b.name:lower()
            elseif currentSortColumn == ""Variant"" then
                -- 🔥 UPDATED: New variant priority with correct Rainbow multiplier
                local variantPriority = {
                    [""Rainbow""] = 50,  -- Updated from 20x to 50x multiplier
                    [""Gold""] = 20,     -- Confirmed 20x multiplier
                    [""Normal""] = 1
                }
                aValue = variantPriority[a.variant] or 1
                bValue = variantPriority[b.variant] or 1
            elseif currentSortColumn == ""Mutations"" then
                -- 🔥 IMPROVED: Better mutation counting
                local function countMutations(mutStr)
                    if mutStr == ""None"" or mutStr == """" then return 0 end
                    -- Remove brackets and count comma-separated mutations
                    local cleanStr = mutStr:gsub(""%["", """"):gsub(""%]"", """")
                    local count = 0
                    for mutation in cleanStr:gmatch(""[^,]+"") do
                        local trimmed = mutation:match(""^%s*(.-)%s*$"")
                        if trimmed and trimmed ~= """" then
                            count = count + 1
                        end
                    end
                    return count
                end
                aValue = countMutations(a.mutations)
                bValue = countMutations(b.mutations)
            elseif currentSortColumn == ""Weight (kg)"" then
                aValue = a.weightNum or 0
                bValue = b.weightNum or 0
            elseif currentSortColumn == ""Price"" then
                aValue = a.price or 0
                bValue = b.price or 0
            else
                return false
            end
            
            if currentSortDir == ""asc"" then
                return aValue < bValue
            else
                return aValue > bValue
            end
        end)
        
        -- Update sort button appearance
        for colName, button in pairs(sortButtons) do
            if colName == currentSortColumn then
                button.Text = currentSortDir == ""asc"" and ""▲"" or ""▼""
                button.TextColor3 = Color3.fromRGB(255, 215, 0)
                
                local glow = button:FindFirstChild(""UIStroke"")
                if glow then
                    glow.Color = Color3.fromRGB(255, 215, 0)
                end
            else
                button.Text = ""◆""
                button.TextColor3 = Color3.fromRGB(220, 220, 240)
                
                local glow = button:FindFirstChild(""UIStroke"")
                if glow then
                    glow.Color = Color3.fromRGB(100, 150, 255)
                end
            end
        end
        
        -- Display all items
        local rowHeight = 45
        for i, itemData in ipairs(allItemsData) do
            local rowFrame = Instance.new(""Frame"")
            rowFrame.Name = ""Row_"" .. i
            rowFrame.Size = UDim2.new(1, 0, 0, rowHeight)
            rowFrame.Position = UDim2.new(0, 0, 0, (i-1) * rowHeight)
            rowFrame.BackgroundColor3 = i % 2 == 0 and Color3.fromRGB(45, 45, 60) or Color3.fromRGB(35, 35, 50)
            rowFrame.BackgroundTransparency = 0.2
            rowFrame.Parent = scrollingFrame
            rowFrame.ZIndex = 4
            
            local originalColor = rowFrame.BackgroundColor3
            rowFrame.MouseEnter:Connect(function()
                rowFrame.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
            end)
            rowFrame.MouseLeave:Connect(function()
                rowFrame.BackgroundColor3 = originalColor
            end)
            
            local rowCorner = Instance.new(""UICorner"")
            rowCorner.CornerRadius = UDim.new(0, 6)
            rowCorner.Parent = rowFrame
            
            local currentX = 0
            local columnValues = {
                itemData.name, 
                itemData.variant, 
                itemData.mutations, 
                itemData.weight, 
                itemData.formattedPrice
            }
            
            for j, columnValue in ipairs(columnValues) do
                local cell = Instance.new(""TextLabel"")
                cell.Name = ""Column"" .. j
                cell.Size = UDim2.new(columnWidths[j], -20, 1, 0)
                cell.Position = UDim2.new(currentX, 15, 0, 0)
                cell.BackgroundTransparency = 1
                cell.Font = Enum.Font.Gotham
                cell.ZIndex = 5
                
                if j == 2 then -- Variant column
                    if columnValue == ""Rainbow"" then
                        cell.TextColor3 = Color3.fromRGB(255, 100, 255)
                        cell.Font = Enum.Font.GothamBold
                    elseif columnValue == ""Gold"" then
                        cell.TextColor3 = Color3.fromRGB(255, 215, 0)
                        cell.Font = Enum.Font.GothamBold
                    else
                        cell.TextColor3 = Color3.fromRGB(255, 255, 255)
                    end
                elseif j == 3 then -- Mutations column
                    if columnValue ~= ""None"" then
                        cell.TextColor3 = Color3.fromRGB(100, 255, 100)
                        cell.Font = Enum.Font.GothamSemibold
                    else
                        cell.TextColor3 = Color3.fromRGB(200, 200, 200)
                    end
                elseif j == 5 then -- Price column
                    cell.TextColor3 = Color3.fromRGB(255, 215, 0)
                    cell.Font = Enum.Font.GothamBold
                else
                    cell.TextColor3 = Color3.fromRGB(255, 255, 255)
                end
                
                cell.TextSize = 18
                cell.Text = tostring(columnValue)
                cell.TextXAlignment = Enum.TextXAlignment.Left
                cell.TextWrapped = true
                cell.Parent = rowFrame
                
                currentX = currentX + columnWidths[j]
            end
        end
        
        scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, #allItemsData * rowHeight)
        
        local newText = ""🍎 Inventory Item Price - "" .. #allItemsData .. "" Items""
        titleText.Text = newText
    end
    
    -- Connect sort button click handlers
    for colName, button in pairs(sortButtons) do
        button.MouseButton1Click:Connect(function()
            local clickTween = TweenService:Create(button, TweenInfo.new(0.1), {Size = UDim2.new(0, 32, 0, 32)})
            clickTween:Play()
            
            clickTween.Completed:Connect(function()
                local backTween = TweenService:Create(button, TweenInfo.new(0.1), {Size = UDim2.new(0, 38, 0, 38)})
                backTween:Play()
            end)
            
            if currentSortColumn == colName then
                currentSortDir = currentSortDir == ""asc"" and ""desc"" or ""asc""
            else
                currentSortColumn = colName
                currentSortDir = (colName == ""Weight (kg)"" or colName == ""Price"" or colName == ""Variant"" or colName == ""Mutations"") and ""desc"" or ""asc""
            end
            
            createSortedItemList()
        end)
    end
    
    -- Connect refresh button
    refreshButton.MouseButton1Click:Connect(function()
        if not isRefreshing then
            local clickTween = TweenService:Create(refreshButton, TweenInfo.new(0.1), {Size = UDim2.new(0, 125, 0, 33)})
            clickTween:Play()
            
            clickTween.Completed:Connect(function()
                local backTween = TweenService:Create(refreshButton, TweenInfo.new(0.1), {Size = UDim2.new(0, 130, 0, 35)})
                backTween:Play()
            end)
            
            refreshInventoryList()
        end
    end)
    
    -- Set up auto-refresh with instant initial load
    local function setupAutoRefresh()
        -- Call refresh immediately on GUI creation
        spawn(function()
            task.wait(0.1)
            pcall(refreshInventoryList)
        end)
        
        -- Set up continuous auto-refresh
        spawn(function()
            task.wait(5)
            
            while true do
                task.wait(30)
                if not inventoryGui or not inventoryGui.Parent then break end
                if not isMinimized and not isRefreshing then
                    pcall(refreshInventoryList)
                end
            end
        end)
    end
    
    setupAutoRefresh()
    
    -- Entrance animation
    mainFrame.Size = UDim2.new(0, 0, 0, 0)
    mainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    
    local entranceTween = TweenService:Create(mainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
        Size = originalSize,
        Position = UDim2.new(0.5, -325, 0.5, -250)
    })
    entranceTween:Play()
    
    
    end)()
    
    
    
    
    
    
    
    --===================================================================================================================----
    
    
    
    
    
    
    coroutine.wrap(function()
    
    -- SERVICES & MODULES
    local Players             = game:GetService(""Players"")
    local CollectionService   = game:GetService(""CollectionService"")
    local ReplicatedStorage   = game:GetService(""ReplicatedStorage"")
    
    local Remotes             = require(ReplicatedStorage.Modules.Remotes)
    local GetFarm             = require(ReplicatedStorage.Modules.GetFarm)
    local InventoryService    = require(ReplicatedStorage.Modules.InventoryService)
    local sellRemote          = ReplicatedStorage
                                :WaitForChild(""GameEvents"")
                                :WaitForChild(""Sell_Inventory"")
    local sell_One_Remote     = ReplicatedStorage
                                :WaitForChild(""GameEvents"")
                                :WaitForChild(""Sell_Item"")
    local CalculatePetValue   = require(ReplicatedStorage.Modules:WaitForChild(""CalculatePetValue""))
    local CalculatePlantValue = require(ReplicatedStorage.Modules:WaitForChild(""CalculatePlantValue""))
    -- 🔥 UPDATED: Load MutationHandler for proper mutation handling
    local MutationHandler     = require(ReplicatedStorage.Modules:WaitForChild(""MutationHandler""))
    local ActivePetsService   = require(ReplicatedStorage.Modules.PetServices.ActivePetsService)
    local PetConfig           = require(ReplicatedStorage.Data.PetRegistry.PetConfig)
    
    
    -- PLAYER & FARM ROOT
    local player   = Players.LocalPlayer
    local farmRoot = GetFarm(player)
    
    
    local HttpService = game:GetService(""HttpService"")
    local webhookUrl  = ""https://discord.com/api/webhooks/1371732167499186206/cAHDH567wnjAb7oncu7Hn5OsekL9GquwrFxarRJD-zz7jkFoM8y9qFslznQZhAX7HTT5""  -- replace with your Discord webhook URL
    
    
    local playerGui = player:WaitForChild(""PlayerGui"")
    
    -- Check if GUI already exists and destroy it for fresh start
    local existingGiftGui = playerGui:FindFirstChild(""FruitGiftGui"")
    if existingGiftGui then
        existingGiftGui:Destroy()
        print(""Existing Fruit Gift GUI destroyed - creating fresh instance"")
    end
    
    local existingPriceGui = playerGui:FindFirstChild(""PriceCalculatorGui"")
    if existingPriceGui then
        existingPriceGui:Destroy()
        print(""Existing Price Calculator GUI destroyed - creating fresh instance"")
    end
    
    -- Variables to track script state for cleanup
    local scriptConnections = {}
    local scriptThreads = {}
    
    local priceGui = Instance.new(""ScreenGui"")
    priceGui.Name        = ""PriceCalculatorGui""
    priceGui.ResetOnSpawn = false
    priceGui.Parent      = playerGui
    
    local priceFrame = Instance.new(""Frame"")
    priceFrame.Name                   = ""PriceFrame""
    priceFrame.Size                   = UDim2.new(0, 350, 0, 200)
    priceFrame.AnchorPoint            = Vector2.new(0.5, 0)
    priceFrame.Position               = UDim2.new(0.1,85, 0, 0.0,1, 0)
    priceFrame.BackgroundColor3       = Color3.new(0, 0, 0)
    priceFrame.BackgroundTransparency = 0.9
    priceFrame.Parent                 = priceGui
    
    local priceLabel = Instance.new(""TextLabel"")
    priceLabel.Name               = ""PriceLabel""
    priceLabel.Size               = UDim2.new(1, -10, 1, -10)
    priceLabel.Position           = UDim2.new(0, 5, 0, 5)
    priceLabel.BackgroundTransparency = 1
    priceLabel.TextColor3         = Color3.new(1, 1, 1)
    priceLabel.TextScaled         = true
    priceLabel.TextWrapped        = true
    priceLabel.Font               = Enum.Font.SourceSansBold
    priceLabel.Text               = """"
    priceLabel.Parent             = priceFrame
    
    local ignoreGear = {
        [""Watering Can""]      = true,
        [""Recall Wrench""]     = true,
        [""Trowel""]            = true,
        [""Basic Sprinkler""]   = true,
        [""Advanced Sprinkler""]= true,
        [""Godly Sprinkler""]   = true,
        [""Lightning Rod""]     = true,
        [""Master Sprinkler""]  = true,
    }
    
    local function formatNumber(n)
        local sign = (n < 0) and ""-"" or """"
        local absn = math.abs(n)
        local suffix = """"
        if absn >= 1e12 then
            n = n/1e12; suffix = ""T""
        elseif absn >= 1e9 then
            n = n/1e9; suffix = ""B""
        elseif absn >= 1e6 then
            n = n/1e6; suffix = ""M""
        end
        local i = math.floor(math.abs(n))
        local f = math.abs(n) - i
        local frac = (f > 0) and (""%.2f""):format(f):sub(2) or """"
        local s = tostring(i)
        while true do
            local count
            s, count = s:gsub(""^(-?%d+)(%d%d%d)"", ""%1,%2"")
            if count == 0 then break end
        end
        return sign .. s .. frac .. suffix
    end
    
    local function updatePrice(tool)
        if not tool or not tool:IsA(""Tool"") then
            priceLabel.Text = """"
            return
        end
        local t = tool:GetAttribute(""ItemType"")
        if t == ""Seed"" then
            priceLabel.Text = """"
            return
        end
        if ignoreGear[tool.Name] then
            priceLabel.Text = """"
            return
        end
        if t == ""Pet"" then
            priceLabel.Text = ""Pet Price: "" .. formatNumber(CalculatePetValue(tool))
        else
            priceLabel.Text = ""Fruit Price: "" .. formatNumber(CalculatePlantValue(tool))
        end
    end
    
    local function hookTool(tool)
        if not tool:IsA(""Tool"") then return end
        tool.Equipped:Connect(function()   updatePrice(tool) end)
        tool.Unequipped:Connect(function() updatePrice(nil)   end)
    end
    
    for _, tool in ipairs(player.Backpack:GetChildren()) do hookTool(tool) end
    player.Backpack.ChildAdded:Connect(hookTool)
    if player.Character then
        for _, tool in ipairs(player.Character:GetChildren()) do hookTool(tool) end
    end
    player.CharacterAdded:Connect(function(char)
        for _, tool in ipairs(char:GetChildren()) do hookTool(tool) end
    end)
    
    -- Variables for gift system
    local MIN_FRUIT_VALUE_TO_GIFT = 200000000000 -- 200 billion (default)
    local MAX_FRUIT_VALUE_TO_GIFT = 900000000000 -- 900 billion (default)
    local GIFT_FRUIT_AMOUNT = 100 -- Default number of fruits to gift
    local isAutoGiftEnabled = false
    local autoGiftThread = nil
    local WAIT_FOR_GIFT_ACCEPTANCE = false
    
    -- Create GUI for fruit gifting
    local fruitGiftGui = Instance.new(""ScreenGui"")
    fruitGiftGui.Name = ""FruitGiftGui""
    fruitGiftGui.ResetOnSpawn = false
    fruitGiftGui.Parent = playerGui
    
    local giftFrame = Instance.new(""Frame"")
    giftFrame.Name = ""GiftFrame""
    giftFrame.Size = UDim2.new(0, 250, 0, 245)
    giftFrame.Position = UDim2.new(0, 10, 0, 250)
    giftFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 65)
    giftFrame.BackgroundTransparency = 0.1
    giftFrame.BorderSizePixel = 0
    giftFrame.Parent = fruitGiftGui
    giftFrame.ClipsDescendants = true
    
    -- Corner radius for main frame
    local cornerRadius = Instance.new(""UICorner"")
    cornerRadius.CornerRadius = UDim.new(0, 8)
    cornerRadius.Parent = giftFrame
    
    -- Title bar
    local titleBar = Instance.new(""Frame"")
    titleBar.Name = ""TitleBar""
    titleBar.Size = UDim2.new(1, 0, 0, 30)
    titleBar.BackgroundColor3 = Color3.fromRGB(35, 35, 55)
    titleBar.BorderSizePixel = 0
    titleBar.Parent = giftFrame
    
    -- Corner radius for title bar
    local titleCorner = Instance.new(""UICorner"")
    titleCorner.CornerRadius = UDim.new(0, 8)
    titleCorner.Parent = titleBar
    
    -- Title label (adjusted size for close button)
    local titleLabel = Instance.new(""TextLabel"")
    titleLabel.Name = ""TitleLabel""
    titleLabel.Size = UDim2.new(1, -35, 1, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = ""Fruit Gifting""
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextSize = 16
    titleLabel.Parent = titleBar
    
    -- Close button
    local closeButton = Instance.new(""TextButton"")
    closeButton.Name = ""CloseButton""
    closeButton.Size = UDim2.new(0, 25, 0, 25)
    closeButton.Position = UDim2.new(1, -28, 0, 2.5)
    closeButton.BackgroundColor3 = Color3.fromRGB(220, 60, 60)
    closeButton.Text = ""✕""
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.TextSize = 14
    closeButton.Font = Enum.Font.GothamBold
    closeButton.Parent = titleBar
    
    local closeCorner = Instance.new(""UICorner"")
    closeCorner.CornerRadius = UDim.new(0, 6)
    closeCorner.Parent = closeButton
    
    -- Close button functionality with complete cleanup
    closeButton.MouseButton1Click:Connect(function()
        -- Stop auto gift if running
        if isAutoGiftEnabled then
            isAutoGiftEnabled = false
            if autoGiftThread then
                task.cancel(autoGiftThread)
                autoGiftThread = nil
            end
        end
        
        -- Disconnect all connections
        for _, connection in pairs(scriptConnections) do
            if connection then
                connection:Disconnect()
            end
        end
        
        -- Cancel all threads
        for _, thread in pairs(scriptThreads) do
            if thread then
                task.cancel(thread)
            end
        end
        
        -- Destroy GUIs
        if fruitGiftGui then
            fruitGiftGui:Destroy()
        end
        if priceGui then
            priceGui:Destroy()
        end
        
        print(""🗑️ Fruit Gift Script completely stopped and cleaned up!"")
    end)
    
    -- Gift amount section
    local giftAmountLabel = Instance.new(""TextLabel"")
    giftAmountLabel.Name = ""GiftAmountLabel""
    giftAmountLabel.Size = UDim2.new(0.6, 0, 0, 25)
    giftAmountLabel.Position = UDim2.new(0.05, 0, 0, 40)
    giftAmountLabel.BackgroundTransparency = 1
    giftAmountLabel.Text = ""Gift Amount:""
    giftAmountLabel.TextColor3 = Color3.fromRGB(220, 220, 255)
    giftAmountLabel.TextXAlignment = Enum.TextXAlignment.Left
    giftAmountLabel.Font = Enum.Font.Gotham
    giftAmountLabel.TextSize = 14
    giftAmountLabel.Parent = giftFrame
    
    local giftAmountInput = Instance.new(""TextBox"")
    giftAmountInput.Name = ""GiftAmountInput""
    giftAmountInput.Size = UDim2.new(0.3, 0, 0, 25)
    giftAmountInput.Position = UDim2.new(0.65, 0, 0, 40)
    giftAmountInput.BackgroundColor3 = Color3.fromRGB(60, 60, 85)
    giftAmountInput.BorderSizePixel = 0
    giftAmountInput.Text = tostring(GIFT_FRUIT_AMOUNT)
    giftAmountInput.TextColor3 = Color3.fromRGB(255, 255, 255)
    giftAmountInput.Font = Enum.Font.Gotham
    giftAmountInput.TextSize = 14
    giftAmountInput.Parent = giftFrame
    
    -- Input box corner radius
    local amountCorner = Instance.new(""UICorner"")
    amountCorner.CornerRadius = UDim.new(0, 6)
    amountCorner.Parent = giftAmountInput
    
    -- Min price section
    local minPriceLabel = Instance.new(""TextLabel"")
    minPriceLabel.Name = ""MinPriceLabel""
    minPriceLabel.Size = UDim2.new(0.6, 0, 0, 25)
    minPriceLabel.Position = UDim2.new(0.05, 0, 0, 75)
    minPriceLabel.BackgroundTransparency = 1
    minPriceLabel.Text = ""Min Value (B):""
    minPriceLabel.TextColor3 = Color3.fromRGB(220, 220, 255)
    minPriceLabel.TextXAlignment = Enum.TextXAlignment.Left
    minPriceLabel.Font = Enum.Font.Gotham
    minPriceLabel.TextSize = 14
    minPriceLabel.Parent = giftFrame
    
    local minPriceInput = Instance.new(""TextBox"")
    minPriceInput.Name = ""MinPriceInput""
    minPriceInput.Size = UDim2.new(0.3, 0, 0, 25)
    minPriceInput.Position = UDim2.new(0.65, 0, 0, 75)
    minPriceInput.BackgroundColor3 = Color3.fromRGB(60, 60, 85)
    minPriceInput.BorderSizePixel = 0
    minPriceInput.Text = ""200""  -- Default 200B
    minPriceInput.TextColor3 = Color3.fromRGB(255, 255, 255)
    minPriceInput.Font = Enum.Font.Gotham
    minPriceInput.TextSize = 14
    minPriceInput.Parent = giftFrame
    
    -- Input box corner radius
    local minCorner = Instance.new(""UICorner"")
    minCorner.CornerRadius = UDim.new(0, 6)
    minCorner.Parent = minPriceInput
    
    -- Max price section
    local maxPriceLabel = Instance.new(""TextLabel"")
    maxPriceLabel.Name = ""MaxPriceLabel""
    maxPriceLabel.Size = UDim2.new(0.6, 0, 0, 25)
    maxPriceLabel.Position = UDim2.new(0.05, 0, 0, 110)
    maxPriceLabel.BackgroundTransparency = 1
    maxPriceLabel.Text = ""Max Value (B):""
    maxPriceLabel.TextColor3 = Color3.fromRGB(220, 220, 255)
    maxPriceLabel.TextXAlignment = Enum.TextXAlignment.Left
    maxPriceLabel.Font = Enum.Font.Gotham
    maxPriceLabel.TextSize = 14
    maxPriceLabel.Parent = giftFrame
    
    local maxPriceInput = Instance.new(""TextBox"")
    maxPriceInput.Name = ""MaxPriceInput""
    maxPriceInput.Size = UDim2.new(0.3, 0, 0, 25)
    maxPriceInput.Position = UDim2.new(0.65, 0, 0, 110)
    maxPriceInput.BackgroundColor3 = Color3.fromRGB(60, 60, 85)
    maxPriceInput.BorderSizePixel = 0
    maxPriceInput.Text = ""900""  -- Default 900B
    maxPriceInput.TextColor3 = Color3.fromRGB(255, 255, 255)
    maxPriceInput.Font = Enum.Font.Gotham
    maxPriceInput.TextSize = 14
    maxPriceInput.Parent = giftFrame
    
    -- Input box corner radius
    local maxCorner = Instance.new(""UICorner"")
    maxCorner.CornerRadius = UDim.new(0, 6)
    maxCorner.Parent = maxPriceInput
    
    -- Wait for gift acceptance toggle
    local waitAcceptLabel = Instance.new(""TextLabel"")
    waitAcceptLabel.Name = ""WaitAcceptLabel""
    waitAcceptLabel.Size = UDim2.new(0.6, 0, 0, 25)
    waitAcceptLabel.Position = UDim2.new(0.05, 0, 0, 145)
    waitAcceptLabel.BackgroundTransparency = 1
    waitAcceptLabel.Text = ""Wait for Accept:""
    waitAcceptLabel.TextColor3 = Color3.fromRGB(220, 220, 255)
    waitAcceptLabel.TextXAlignment = Enum.TextXAlignment.Left
    waitAcceptLabel.Font = Enum.Font.Gotham
    waitAcceptLabel.TextSize = 14
    waitAcceptLabel.Parent = giftFrame
    
    -- Toggle button for wait for acceptance
    local waitAcceptToggle = Instance.new(""TextButton"")
    waitAcceptToggle.Name = ""WaitAcceptToggle""
    waitAcceptToggle.Size = UDim2.new(0.3, 0, 0, 25)
    waitAcceptToggle.Position = UDim2.new(0.65, 0, 0, 145)
    waitAcceptToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 85)
    waitAcceptToggle.BorderSizePixel = 0
    waitAcceptToggle.Text = ""OFF""
    waitAcceptToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
    waitAcceptToggle.Font = Enum.Font.GothamBold
    waitAcceptToggle.TextSize = 14
    waitAcceptToggle.Parent = giftFrame
    
    -- Toggle button corner radius
    local waitToggleCorner = Instance.new(""UICorner"")
    waitToggleCorner.CornerRadius = UDim.new(0, 6)
    waitToggleCorner.Parent = waitAcceptToggle
    
    -- Auto gift toggle section
    local autoGiftLabel = Instance.new(""TextLabel"")
    autoGiftLabel.Name = ""AutoGiftLabel""
    autoGiftLabel.Size = UDim2.new(0.6, 0, 0, 25)
    autoGiftLabel.Position = UDim2.new(0.05, 0, 0, 180)
    autoGiftLabel.BackgroundTransparency = 1
    autoGiftLabel.Text = ""Auto Gift:""
    autoGiftLabel.TextColor3 = Color3.fromRGB(220, 220, 255)
    autoGiftLabel.TextXAlignment = Enum.TextXAlignment.Left
    autoGiftLabel.Font = Enum.Font.Gotham
    autoGiftLabel.TextSize = 14
    autoGiftLabel.Parent = giftFrame
    
    -- Toggle button for auto gift
    local autoGiftToggle = Instance.new(""TextButton"")
    autoGiftToggle.Name = ""AutoGiftToggle""
    autoGiftToggle.Size = UDim2.new(0.3, 0, 0, 25)
    autoGiftToggle.Position = UDim2.new(0.65, 0, 0, 180)
    autoGiftToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 85)
    autoGiftToggle.BorderSizePixel = 0
    autoGiftToggle.Text = ""OFF""
    autoGiftToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
    autoGiftToggle.Font = Enum.Font.GothamBold
    autoGiftToggle.TextSize = 14
    autoGiftToggle.Parent = giftFrame
    
    -- Toggle button corner radius
    local toggleCorner = Instance.new(""UICorner"")
    toggleCorner.CornerRadius = UDim.new(0, 6)
    toggleCorner.Parent = autoGiftToggle
    
    -- Buttons row
    local setButton = Instance.new(""TextButton"")
    setButton.Name = ""SetButton""
    setButton.Size = UDim2.new(0.45, 0, 0, 30)
    setButton.Position = UDim2.new(0.05, 0, 0, 215)
    setButton.BackgroundColor3 = Color3.fromRGB(80, 170, 100)
    setButton.BorderSizePixel = 0
    setButton.Text = ""Set Values""
    setButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    setButton.Font = Enum.Font.GothamBold
    setButton.TextSize = 14
    setButton.Parent = giftFrame
    
    -- Button corner radius
    local setCorner = Instance.new(""UICorner"")
    setCorner.CornerRadius = UDim.new(0, 6)
    setCorner.Parent = setButton
    
    local giftButton = Instance.new(""TextButton"")
    giftButton.Name = ""GiftButton""
    giftButton.Size = UDim2.new(0.45, 0, 0, 30)
    giftButton.Position = UDim2.new(0.5, 0, 0, 215)
    giftButton.BackgroundColor3 = Color3.fromRGB(130, 80, 170)
    giftButton.BorderSizePixel = 0
    giftButton.Text = ""Send Gift""
    giftButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    giftButton.Font = Enum.Font.GothamBold
    giftButton.TextSize = 14
    giftButton.Parent = giftFrame
    
    -- Button corner radius
    local giftCorner = Instance.new(""UICorner"")
    giftCorner.CornerRadius = UDim.new(0, 6)
    giftCorner.Parent = giftButton
    
    -- Make GUI draggable
    local dragging = false
    local dragInput
    local dragStart
    local startPos
    
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = giftFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    game:GetService(""UserInputService"").InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            giftFrame.Position = UDim2.new(
                startPos.X.Scale, 
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
    
    -- Wait for acceptance toggle functionality
    waitAcceptToggle.MouseButton1Click:Connect(function()
        WAIT_FOR_GIFT_ACCEPTANCE = not WAIT_FOR_GIFT_ACCEPTANCE
        
        if WAIT_FOR_GIFT_ACCEPTANCE then
            waitAcceptToggle.Text = ""ON""
            waitAcceptToggle.BackgroundColor3 = Color3.fromRGB(80, 170, 100) -- Green
        else
            waitAcceptToggle.Text = ""OFF""
            waitAcceptToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 85) -- Default
        end
    end)
    
    -- Auto gift toggle functionality
    autoGiftToggle.MouseButton1Click:Connect(function()
        isAutoGiftEnabled = not isAutoGiftEnabled
        
        if isAutoGiftEnabled then
            autoGiftToggle.Text = ""ON""
            autoGiftToggle.BackgroundColor3 = Color3.fromRGB(80, 170, 100) -- Green
            
            -- Start auto gift thread
            if not autoGiftThread then
                autoGiftThread = spawn(function()
                    while isAutoGiftEnabled do
                        -- Only gift if the button is not already in ""Gifting..."" state
                        if giftButton.Text == ""Send Gift"" then
                            GiftFruitToNearestPlayer()
                        end
                        
                        -- Wait until gifting is complete
                        while giftButton.Text == ""Gifting..."" and isAutoGiftEnabled do
                            task.wait(0.5)
                        end
                        
                        -- Wait between gift attempts
                        task.wait(0.5)
                    end
                    
                    autoGiftThread = nil
                end)
            end
        else
            autoGiftToggle.Text = ""OFF""
            autoGiftToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 85) -- Default
            
            -- Stop auto gift thread
            if autoGiftThread then
                task.cancel(autoGiftThread)
                autoGiftThread = nil
            end
        end
    end)
    
    -- Set button functionality
    setButton.MouseButton1Click:Connect(function()
        -- Update Gift Amount value
        local giftAmount = tonumber(giftAmountInput.Text)
        if giftAmount and giftAmount > 0 and giftAmount <= 1000 then
            GIFT_FRUIT_AMOUNT = giftAmount
        else
            giftAmountInput.Text = tostring(GIFT_FRUIT_AMOUNT)
        end
        
        -- Update Min Price value (convert from billions to actual value)
        local minPriceValue = tonumber(minPriceInput.Text)
        if minPriceValue and minPriceValue > 0 then
            MIN_FRUIT_VALUE_TO_GIFT = minPriceValue * 1e9  -- Convert billions to actual value
        else
            minPriceInput.Text = tostring(MIN_FRUIT_VALUE_TO_GIFT / 1e9)
        end
        
        -- Update Max Price value (convert from billions to actual value)
        local maxPriceValue = tonumber(maxPriceInput.Text)
        if maxPriceValue and maxPriceValue > minPriceValue then
            MAX_FRUIT_VALUE_TO_GIFT = maxPriceValue * 1e9  -- Convert billions to actual value
        else
            maxPriceInput.Text = tostring(MAX_FRUIT_VALUE_TO_GIFT / 1e9)
        end
        
        -- Update GUI
        giftAmountInput.Text = tostring(GIFT_FRUIT_AMOUNT)
        minPriceInput.Text = tostring(MIN_FRUIT_VALUE_TO_GIFT / 1e9)
        maxPriceInput.Text = tostring(MAX_FRUIT_VALUE_TO_GIFT / 1e9)
        
        -- Notification
        print(""Values set: Gift Amount = "" .. GIFT_FRUIT_AMOUNT .. 
              "", Min Price = "" .. formatNumber(MIN_FRUIT_VALUE_TO_GIFT) .. 
              "", Max Price = "" .. formatNumber(MAX_FRUIT_VALUE_TO_GIFT))
    end)
    
    -- Gift button functionality
    giftButton.MouseButton1Click:Connect(function()
        GiftFruitToNearestPlayer()
    end)
    
    -- Function to gift fruits to nearest player
    function GiftFruitToNearestPlayer()
        -- Prevent multiple runs
        if giftButton.Text ~= ""Send Gift"" then return end
        
        -- Update button state
        giftButton.Text = ""Gifting...""
        giftButton.BackgroundColor3 = Color3.fromRGB(100, 50, 130)
        
        spawn(function()
            pcall(function()
                -- ✅ OPTIMIZATION 1: Cache player data once
                local character = player.Character
                local rootPart = character and character:FindFirstChild(""HumanoidRootPart"")
                
                if not character or not rootPart then 
                    print(""Character/RootPart not found!"")
                    giftButton.Text = ""Send Gift""
                    giftButton.BackgroundColor3 = Color3.fromRGB(130, 80, 170)
                    return 
                end
                
                -- ✅ OPTIMIZATION 2: Find nearest player (keep existing logic)
                local nearestPlayer = nil
                local shortestDistance = math.huge
                
                for _, otherPlayer in pairs(Players:GetPlayers()) do
                    if otherPlayer ~= player and otherPlayer.Character then
                        local otherRootPart = otherPlayer.Character:FindFirstChild(""HumanoidRootPart"")
                        if otherRootPart then
                            local distance = (rootPart.Position - otherRootPart.Position).Magnitude
                            if distance < shortestDistance then
                                shortestDistance = distance
                                nearestPlayer = otherPlayer
                            end
                        end
                    end
                end
                
                if not nearestPlayer then
                    giftButton.Text = ""Send Gift""
                    giftButton.BackgroundColor3 = Color3.fromRGB(130, 80, 170)
                    return
                end
                
                -- ✅ OPTIMIZATION 3: Cache proximity prompt once
                local giftPrompt = nil
                if nearestPlayer.Character then
                    local targetHRP = nearestPlayer.Character:FindFirstChild(""HumanoidRootPart"")
                    if targetHRP then
                        giftPrompt = targetHRP:FindFirstChildOfClass(""ProximityPrompt"")
                    end
                end
                
                if not giftPrompt then
                    print(""No gift prompt found on target player!"")
                    giftButton.Text = ""Send Gift""
                    giftButton.BackgroundColor3 = Color3.fromRGB(130, 80, 170)
                    return
                end
                
                -- ✅ OPTIMIZATION 4: Get valid fruits (keep existing logic but cache tools)
                local backpack = player:FindFirstChild(""Backpack"")
                local tools = {}
    
                -- Collect all tools once
                if backpack then
                    for _, tool in pairs(backpack:GetChildren()) do
                        if tool:IsA(""Tool"") then
                            table.insert(tools, tool)
                        end
                    end
                end
    
                if character then
                    for _, tool in pairs(character:GetChildren()) do
                        if tool:IsA(""Tool"") then
                            table.insert(tools, tool)
                        end
                    end
                end
    
                -- Process fruits (keep existing logic)
                local validFruits = {}
                for _, tool in pairs(tools) do
                    local hasFruitData = tool:FindFirstChild(""Item_String"") and tool:FindFirstChild(""Variant"") and tool:FindFirstChild(""Weight"")
                    local isNotSeed = not tool.Name:find(""Seed"") and not tool.Name:find(""Destroy"") and not tool.Name:find(""Trowel"")
                    
                    if hasFruitData and isNotSeed then
                        local itemValue = 0
                        pcall(function()
                            itemValue = CalculatePlantValue(tool)
                        end)
                        
                        if type(itemValue) == ""number"" and itemValue > 0 and 
                           itemValue >= MIN_FRUIT_VALUE_TO_GIFT and itemValue <= MAX_FRUIT_VALUE_TO_GIFT then
                            local isFavorite = tool:GetAttribute(""IsFavorite"") == true or tool:GetAttribute(""Favorite"") == true
                            
                            table.insert(validFruits, {
                                tool = tool,
                                value = itemValue,
                                uuid = tool:GetAttribute(""ITEM_UUID"") or ""unknown"",
                                isFavorite = isFavorite
                            })
                        end
                    end
                end
                
                -- Sort and filter (keep existing logic)
                table.sort(validFruits, function(a, b) return a.value > b.value end)
                
                local giftsToSend = {}
                local uniqueUUIDs = {}
                
                for _, fruitData in ipairs(validFruits) do
                    if not uniqueUUIDs[fruitData.uuid] then
                        uniqueUUIDs[fruitData.uuid] = true
                        table.insert(giftsToSend, fruitData)
                        
                        if #giftsToSend >= GIFT_FRUIT_AMOUNT then
                            break
                        end
                    end
                end
                
                if #giftsToSend == 0 then
                    print(""No fruits found within value range to gift!"")
                    giftButton.Text = ""Send Gift""
                    giftButton.BackgroundColor3 = Color3.fromRGB(130, 80, 170)
                    return
                end
                
                -- ✅ OPTIMIZATION 5: ULTRA-FAST GIFTING LOOP
                print(""🚀 SPEED GIFTING "" .. #giftsToSend .. "" fruits..."")
                local giftsCompleted = 0
                
                for i, fruitData in ipairs(giftsToSend) do
                    -- ✅ SMART UNEQUIPPING: Only if different tool equipped
                    local currentTool = character:FindFirstChildOfClass(""Tool"")
                    if currentTool and currentTool ~= fruitData.tool then
                        currentTool.Parent = player.Backpack
                        task.wait(0.1) -- ✅ REDUCED: 0.5s → 0.1s
                    end
                    
                    -- ✅ FAST EQUIPPING
                    fruitData.tool.Parent = character
                    task.wait(0.15) -- ✅ REDUCED: 0.5s → 0.15s
                    
                    -- ✅ INSTANT GIFT FIRING
                    local favoriteStatus = fruitData.isFavorite and "" [⭐]"" or """"
                    print(""⚡ Speed Gift #"" .. i .. "": "" .. fruitData.tool.Name .. favoriteStatus)
                    
                    fireproximityprompt(giftPrompt)
                    
                    -- ✅ CONDITIONAL WAITING
                    if WAIT_FOR_GIFT_ACCEPTANCE then
                        -- ✅ FASTER ACCEPTANCE CHECKING
                        local waitStartTime = tick()
                        local maxWaitTime = 8 -- ✅ REDUCED: 15s → 8s
                        
                        giftButton.Text = ""Waiting...""
                        
                        -- ✅ FASTER POLLING: Check every 0.2s instead of 0.5s
                        while tick() - waitStartTime < maxWaitTime do
                            if not fruitData.tool:IsDescendantOf(game) then
                                print(""✅ Speed Gift Success: "" .. fruitData.tool.Name)
                                giftsCompleted = giftsCompleted + 1
                                break
                            end
                            task.wait(0.2) -- ✅ REDUCED: 0.5s → 0.2s
                        end
                        
                        giftButton.Text = ""Gifting...""
                    else
                        -- ✅ ULTRA-FAST MODE: Minimal wait
                        task.wait(0.2) -- ✅ REDUCED: 0.5s → 0.2s
                        
                        if not fruitData.tool:IsDescendantOf(game) then
                            print(""✅ Speed Gift Success: "" .. fruitData.tool.Name)
                            giftsCompleted = giftsCompleted + 1
                        end
                    end
                    
                    -- ✅ MINIMAL DELAY BETWEEN GIFTS
                    if i < #giftsToSend then
                        task.wait(0.05) -- ✅ REDUCED: 0.3s → 0.05s
                    end
                end
                
                print(""🚀 SPEED GIFTING COMPLETE! "" .. giftsCompleted .. ""/"" .. #giftsToSend .. "" gifts sent!"")
            end)
            
            -- Reset button
            giftButton.Text = ""Send Gift""
            giftButton.BackgroundColor3 = Color3.fromRGB(130, 80, 170)
        end)
    end
    
    -- Global cleanup function for complete script shutdown
    function CleanupScript()
        -- Stop auto gift if running
        if isAutoGiftEnabled then
            isAutoGiftEnabled = false
            if autoGiftThread then
                task.cancel(autoGiftThread)
                autoGiftThread = nil
            end
        end
        
        -- Disconnect all connections
        for _, connection in pairs(scriptConnections) do
            if connection then
                connection:Disconnect()
            end
        end
        
        -- Cancel all threads
        for _, thread in pairs(scriptThreads) do
            if thread then
                task.cancel(thread)
            end
        end
        
        -- Clear arrays
        scriptConnections = {}
        scriptThreads = {}
        
        -- Destroy GUIs
        if fruitGiftGui then
            fruitGiftGui:Destroy()
        end
        if priceGui then
            priceGui:Destroy()
        end
        
        print(""🗑️ Fruit Gift Script completely stopped and cleaned up!"")
    end
    
    
    
    end)()"
NpWLnV5m,Fibonacci with memoization,BojidarDosev,Java,Sunday 22nd of June 2025 06:30:18 AM CDT,"	public static List<Integer> list = new ArrayList<>();

    public static int s(int n){
        while (list.size() <= n) {
            list.add(-1); // initialize with a dummy value
        }

        if(n<=2){
            list.set(n,1);
            return 1;
        }

        if(list.get(n) != -1){
            return list.get(n);
        }

        int result = s(n-1)+s(n-2);
        list.set(n,result);
        return result;
    }"
Lq51iamR,wikimedia.org/v2/stream/recentchange niquests with asyncio,DeaD_EyE,Python,Sunday 22nd of June 2025 06:19:09 AM CDT,"import asyncio
import json

import niquests


async def get() -> dict:
    async with niquests.AsyncSession() as session:
        response = await session.get(
            ""https://stream.wikimedia.org/v2/stream/recentchange"", stream=True
        )
        async for chunk in await response.iter_content():
            try:
                data = chunk.decode()
            except UnicodeDecodeError:
                continue

            if data.startswith(""data:""):
                try:
                    # it may fail here
                    result = json.loads(data.removeprefix(""data:""))
                    # if it fails, it does not return
                    # instead iterate
                    return result
                except json.JSONDecodeError:
                    # error
                    pass


async def main():
    try:
        return await asyncio.wait_for(get(), 60)
    except asyncio.TimeoutError:
        print(""Got a timeout"")


asyncio.run(main())"
b5n1WgtF,dataNone,TestGuy1,JSON,Sunday 22nd of June 2025 06:00:14 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '70fc6edbef1390b4a39b460de6d334b0f31825e738f831736c6890d7065ce0816718013ac6cb7da20ece109465d2c5137c51a8308cb374417cade9d324e4c7fc3b4a183655260042eb0dc03b503a936fb97fe0c54f89c25f6016078c3ecb97d07d086faefa2d9f401605df7724e2dfd62648871f9799eb4ecf478b34d23caa95',
  otherdata: [
    '2ba6faa5271457c844f34c07c2361005',
    '113ee6db6b3cab6943d443be00b8ec9a',
    '943bc1487616790d3a0431b86fac5dbc',
    'c78f3e1dd1da04c2a3e282bb5a241c62',
    '3efd437ed9ec8c2a0b3526439fa45ea5',
    '8b49feae579d742d0094e70013000ad2',
    '7591394875434f665f00e019e835dc14',
    'f51a3b679ebd4a7e2c4d2f883135b4f1'
  ]
}"
rBrYNTd1,Tasks For,Hasli4,Python,Sunday 22nd of June 2025 05:25:45 AM CDT,"# 1. Сумма чисел от 1 до n
n = int(input(""Введите n: ""))
total = 0
for i in range(1, n + 1):
    total += i
print(""Сумма от 1 до"", n, ""="", total)


# 2. Таблица умножения
m = int(input(""Введите число для таблицы умножения: ""))
for i in range(1, 11):
    print(f""{m} × {i} = {m * i}"")


# 3. Вывод чётных чисел
n = int(input(""Введите n: ""))
for i in range(0, n + 1, 1):
    if i % 2 == 0:
        print(i)


# 4. Обратный отсчёт
n = int(input(""Введите стартовое число: ""))
for i in range(n, -1, -1):
    print(i)
print(""Пуск!"")


# 5. Перебор символов строки
s = input(""Введите строку: "")
pos = 1
for ch in s:
    print(""Символ"", pos, "":"", ch)
    pos += 1


# 6. Подсчёт буквы в тексте
text = input(""Введите текст: "")
letter = input(""Какую букву посчитать? "")
count = 0
for ch in text:
    if ch == letter:
        count += 1
print(""Буква"", letter, ""встретилась"", count, ""раз"")


# 7. Список квадратов
k = int(input(""Введите k: ""))
squares = []
for i in range(1, k + 1):
    squares.append(i * i)
print(""Квадраты от 1 до"", k, "":"", squares)


# 8. Поиск минимума
nums_str = input(""Введите числа через пробел: "").split()
nums = [int(x) for x in nums_str]
min_val = nums[0]
for x in nums[1:]:
    if x < min_val:
        min_val = x
print(""Минимум равен"", min_val)


# 9. Замена пробелов на подчёркивания
original = input(""Введите строку: "")
result = """"
for ch in original:
    if ch == "" "":
        result += ""_""
    else:
        result += ch
print(result)


# 10. Сумма цифр числа
x = input(""Введите натуральное число: "")
digit_sum = 0
for ch in x:
    digit_sum += int(ch)
print(""Сумма цифр ="", digit_sum)
"
WKhb1Z1R,Untitled,Irvannandika,JSON,Sunday 22nd of June 2025 05:15:10 AM CDT,"document.addEventListener('DOMContentLoaded', () => {
    // Animasi munculnya setiap kartu saat halaman dimuat
    gsap.from("".price-card"", {
        opacity: 0,
        y: 50,
        stagger: 0.1, // Memberikan sedikit jeda antar kartu
        duration: 0.8,
        ease: ""power3.out"",
        scrollTrigger: { // Menggunakan ScrollTrigger agar animasi terjadi saat di-scroll ke section pricelist
            trigger: "".pricelist-section"",
            start: ""top 80%"", // Animasi dimulai saat 80% dari section terlihat
            toggleActions: ""play none none none""
        }
    });

    // Anda bisa menambahkan animasi GSAP lainnya di sini,
    // misalnya untuk efek hover yang lebih kompleks (selain flip CSS)
    // atau animasi elemen lain di halaman.
});"
chdRugd7,Untitled,r9odt,INI file,Sunday 22nd of June 2025 03:23:22 AM CDT,"#jinja2: lstrip_blocks: True
{{ ansible_managed | comment('plain') }}

concurrent = {{ gitlab_runner_config_concurrent }}
check_interval = 0
listen_address = ""0.0.0.0:9252""

[session_server]
  session_timeout = {{ gitlab_runner_config_session_timeout }}

{# {% set _runners_state = ansible_facts['ansible_local']['gitlab-runner-state'] | default({}) %} #}
{% if gitlab_runner_dind_container | bool %}
{% set _runner_volumes = (gitlab_runner_runner.volumes | default(gitlab_runner_config_volumes)) + [gitlab_runner_dind_run_dir + "":/var/run"", gitlab_runner_dind_cert_dir + "":/certs/client""] %}
{% else %}
{% set _runner_volumes = gitlab_runner_runner.volumes | default(gitlab_runner_config_volumes) + [""/certs/client"", gitlab_runner_config_dir + '/' + gitlab_runner_runner.name + '/dind-service:/var/lib/docker'] %}
{% endif %}
[[runners]]
  name = ""{{ gitlab_runner_runner.name }}""
  url = ""{{ gitlab_runner_config_url }}""
  {# token = ""{{ _runners_state[gitlab_runner_runner.name]['token'] }}"" #}
  token = ""{{ gitlab_runner_tokens[gitlab_runner_runner.name] }}""
  executor = ""docker""
  [runners.custom_build_dir]
  [runners.docker]
    tls_verify = false
    image = ""{{ gitlab_runner_runner.image | default(gitlab_runner_config_docker_image) }}""
    memory = ""{{ gitlab_runner_runner.memory | default(gitlab_runner_config_memory) }}""
    {% if gitlab_runner_runner.memory_swap is defined %}
    memory_swap = ""{{ gitlab_runner_runner.memory_swap }}""
    {% endif %}
    {% if gitlab_runner_runner.cpus is defined %}
    cpus = ""{{ gitlab_runner_runner.cpus }}""
    {% endif %}
    privileged = {{ gitlab_runner_runner.privileged | default(gitlab_runner_config_privileged) }}
    disable_entrypoint_overwrite = false
    oom_kill_disable = false
    disable_cache = false
    volumes = {{ _runner_volumes | to_json }}
    shm_size = 0
"
BVckupSV,paperless-ngx stack with local AI containers,kiwijunglist,YAML,Sunday 22nd of June 2025 03:21:06 AM CDT,"#
# DOCKER COMPOSE STACK FOR DOCKER COMPOSE MANAGER PLUGIN FOR UNRAID
#
#
# 1 EDIT THIS COMPOSE FILE AND CHANGE THE DEFAULT PASSWORD FOR THE DATABASE (optional)
#
# Replace the 3 instances of ""password123""
#
#
# 2 CREATE THE EXPECTED DIRECTORIES IN APPDATA BEFORE CREATING THE CONTAINERS
#
# sudo mkdir -p /mnt/user/appdata/paperless/{consume,export,redis,mariadb,paperless-ai,ollama}
# sudo mkdir -p /mnt/user/appdata/paperless/paperless/{data,media}
# sudo mkdir -p /mnt/user/appdata/paperless/paperless-gpt/{prompts,hocr,pdf}
# sudo chown 999:999 /mnt/user/appdata/paperless/mariadb
#
#
# 3 YOU CAN CHECK THE PERMISSIONS FOR APPDATA ARE CORRECT WITH THE ls -l COMMAND
#
# ls -l /mnt/user/appdata/paperless
#
# drwxr-xr-x 1 root root    6 Jun 22 17:00 consume/
# drwxr-xr-x 1 root root    6 Jun 22 17:00 export/
# drwxr-xr-x 1  999  999 4096 Jun 22 17:01 mariadb/
# drwxr-xr-x 1 root root   60 Jun 22 17:01 ollama/
# drwxr-xr-x 1 root root   31 Jun 22 17:00 paperless/
# drwxr-xr-x 1 root root  12      7 Jun 22 17:26 paperless-ai/
# drwxr-xr-x 1 root root   44 Jun 22 17:00 paperless-gpt/
# drwxr-xr-x 1 root root   22 Jun 22 18:26 redis/
#
#
# 4. YOU CAN NOW CLICK DOCKER-COMPOSE UP AND START UP ALL THE COTNTAINERS
#
#
# 5. AFTER RUNNING OLLAMA CONTAINER YOU NEED TO PULL THE AI MODELS
#
# docker exec -it paperless-ollama ollama pull llama3
# docker exec -it paperless-ollama ollama pull minicpm-v
#
#
# 6. PAPERLESS-NGX SETUP (WEB GUI)
#
# you need to generate an API key in paperless-ngx
# Point your web-browser to paperless-ngx http://xxx.xxx.xxx.xxx:8000
# Do the basic setup and then click edit my profile in top right had corner to generate a token
#
#
# 7. PAPERLESS-AI SETUP (WEB GUI)
#
# Point your web-browser to paperless-ai http://xxx.xxx.xxx.xxx:3000
# API Token = the token generated by paperless-ngx in step 6.
# Ollama API URL = http://paperless-ollama:11434
# Ollama model = llama3
#
# 8. PAPERLESS-GPT SETUP (EDIT docker-compose file)
#
# Edit this compose file and insert the API token you generated in step 6.
#
# Example:
#
#   paperless-gpt:
#     container_name: paperless-gpt
#     image: icereed/paperless-gpt:latest
#     restart: unless-stopped
#     environment:
#       PAPERLESS_BASE_URL: ""http://paperless:8000""
#       PAPERLESS_API_TOKEN: e3087dd8e058aebfc522fb91426d48d8b4a53a72
#
#
# EXTERNAL PORTS OPENED BY THIS DOCKER STACK
#
# 8000 = paperless-ngx
# 3000 = paperless-ai
# 8082 = paperless-gpt
#


services:

  paperless:
    container_name: paperless
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    restart: unless-stopped
    depends_on:
      - paperless-mariadb
      - paperless-redis
      - paperless-gotenberg
      - paperless-tika
    ports:
      - ""8000:8000""
    volumes:
      - /mnt/user/appdata/paperless/paperless/data:/usr/src/paperless/data
      - /mnt/user/appdata/paperless/paperless/media:/usr/src/paperless/media
      # - /mnt/user/appdata/paperless/consume:/usr/src/paperless/consume
      # - /mnt/user/appdata/paperless/export:/usr/src/paperless/export
    environment:
      USERMAP_UID: 99
      USERMAP_GID: 100
      PAPERLESS_REDIS: redis://paperless-redis:6379
      PAPERLESS_DBENGINE: mariadb
      PAPERLESS_DBHOST: paperless-mariadb
      PAPERLESS_DBPORT: 3306
      PAPERLESS_DBUSER: paperless
      PAPERLESS_DBPASS: password123 # Password here
      PAPERLESS_TIME_ZONE: Pacific/Auckland
      PAPERLESS_OCR_LANGUAGE: eng
      PAPERLESS_TIKA_ENABLED: 1
      PAPERLESS_TIKA_ENDPOINT: http://paperless-tika:9998
      PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://paperless-gotenberg:3000
      PAPERLESS_TASK_WORKERS: 6
      PAPERLESS_ENABLE_WEBSERVER: true
      PAPERLESS_PRE_CONSUME_SCRIPT: """"
      PAPERLESS_POST_CONSUME_SCRIPT: """"
    labels:
      net.unraid.docker.icon: ""https://libs.websoft9.com/Websoft9/logo/product/paperlessngx-websoft9.png""
      net.unraid.docker.webui: ""http://[IP]:8000""
    networks:
      - paperless-net


  paperless-redis:
    container_name: paperless-redis
    image: docker.io/library/redis:8
    restart: unless-stopped
    volumes:
      - /mnt/user/appdata/paperless/redis:/data
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges=true
    networks:
      - paperless-net

  
  paperless-mariadb:
    container_name: paperless-mariadb
    image: docker.io/library/mariadb:11
    restart: unless-stopped
    volumes:
      - /mnt/user/appdata/paperless/mariadb:/var/lib/mysql
    environment:
      MARIADB_HOST: paperless
      MARIADB_DATABASE: paperless
      MARIADB_USER: paperless
      MARIADB_PASSWORD: password123 # Password here
      MARIADB_ROOT_PASSWORD: password123 # Password here
    networks:
      - paperless-net

  
  paperless-gotenberg:
    container_name: paperless-gotenberg
    image: docker.io/gotenberg/gotenberg:8.20
    restart: unless-stopped
    command:
      - ""gotenberg""
      - ""--chromium-disable-javascript=true""
      - ""--chromium-allow-list=file:///tmp/.*""
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges=true
    networks:
      - paperless-net

  
  paperless-tika:
    container_name: paperless-tika
    image: docker.io/apache/tika:latest
    restart: unless-stopped
    cap_drop:
      - ALL
    networks:
      - paperless-net

  
  paperless-ai:
    container_name: paperless-ai
    image: clusterzx/paperless-ai
    restart: unless-stopped
    environment:
      - PAPERLESS_AI_PORT=3000
      - RAG_SERVICE_URL=http://paperless:8000
      - RAG_SERVICE_ENABLED=true
    ports:
      - ""3000:3000""
    volumes:
      - /mnt/user/appdata/paperless/paperless-ai:/app/data
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges=true
    labels:
      net.unraid.docker.webui: ""http://[IP]:3000""
    networks:
      - paperless-net

  
  paperless-gpt:
    container_name: paperless-gpt
    image: icereed/paperless-gpt:latest
    restart: unless-stopped
    environment:
      PAPERLESS_BASE_URL: ""http://paperless:8000""
      PAPERLESS_API_TOKEN: e3087dd8e058aebfc522fb91426d48d8b4a53a72 # API TOKEN FROM PAPERLESS-NGX GOES HERE
      LLM_PROVIDER: ""ollama""
      LLM_MODEL: ""llama3""
      OLLAMA_HOST: ""http://paperless-ollama:11434""
      TOKEN_LIMIT: 1000
      OCR_PROVIDER: ""llm""
      VISION_LLM_PROVIDER: ""ollama""
      VISION_LLM_MODEL: ""minicpm-v""
      OCR_PROCESS_MODE: ""image""
      PDF_SKIP_EXISTING_OCR: ""false""
      CREATE_LOCAL_HOCR: ""false""
      LOCAL_HOCR_PATH: ""/app/hocr""
      CREATE_LOCAL_PDF: ""false""
      LOCAL_PDF_PATH: ""/app/pdf""
      PDF_UPLOAD: ""false""
      PDF_REPLACE: ""false""
      PDF_COPY_METADATA: ""true""
      PDF_OCR_TAGGING: ""true""
      OCR_LIMIT_PAGES: ""0""
      LOG_LEVEL: ""info""
      MANUAL_TAG: ""paperless-gpt""
      AUTO_TAG: ""paperless-gpt-auto""
      AUTO_OCR_TAG: ""paperless-gpt-ocr-auto""
      PDF_OCR_COMPLETE_TAG: ""paperless-gpt-ocr-complete""
      AUTO_GENERATE_TAGS: ""true""
      AUTO_GENERATE_TITLE: ""true""
    volumes:
      - /mnt/user/appdata/paperless/paperless-gpt/prompts:/app/prompts
      - /mnt/user/appdata/paperless/paperless-gpt/hocr:/app/hocr
      - /mnt/user/appdata/paperless/paperless-gpt/pdf:/app/pdf
      # - ${HOME}/.config/gcloud/application_default_credentials.json:/app/credentials.json
    ports:
      - ""8082:8080""
    depends_on:
      - paperless
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges=true
    labels:
      net.unraid.docker.webui: ""http://[IP]:8082""
    networks:
      - paperless-net


  paperless-ollama:
    container_name: paperless-ollama
    image: ollama/ollama
    restart: unless-stopped
    volumes:
      - /mnt/user/appdata/paperless/ollama:/root/.ollama      
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges=true
    networks:
      - paperless-net

networks:
  paperless-net:
    driver: bridge
"
5Gwiww6u,Untitled,thewitchking,C++,Sunday 22nd of June 2025 02:55:33 AM CDT,"std::vector<std::string> splitString(const std::string& input) {
    std::vector<std::string> result;
    std::stringstream ss(input);
    std::string token;

    while (std::getline(ss, token, ' ')) { // split by space
        std::stringstream commaStream(token);
        std::string subToken;
        while (std::getline(commaStream, subToken, ',')) { // split by comma
            if (!subToken.empty()) {
                result.push_back(subToken);
            }
        }
    }

    return result;
}"
srzZ5CBn,Untitled,thewitchking,C++,Sunday 22nd of June 2025 02:50:08 AM CDT,"int maxSubArray(vector<int>& nums) {
        int maxSum = INT_MIN;
        int currentSum = 0;
        
        for (int i = 0; i < nums.size(); i++) {
            currentSum += nums[i];
            
            if (currentSum > maxSum) {
                maxSum = currentSum;
            }
            
            if (currentSum < 0) {
                currentSum = 0;
            }
        }
        
        return maxSum;
    }"
d393r453,Untitled,thewitchking,C++,Sunday 22nd of June 2025 02:37:56 AM CDT,"class Solution {
public:
    int firstUniqChar(string s) {
       unordered_map<char, int> mp;

        for (auto a : s) mp[a]++;
        for (int i = 0; i < s.size(); i++)if(mp[s[i]] == 1)return i;

        return -1;
    }
}; "
BCq59PJJ,Joc Grigore Moisil 2014,Hezov,C++,Sunday 22nd of June 2025 01:55:59 AM CDT,"#include <fstream>
#include <algorithm>
#include <array>
#include <queue>
#include <vector>
using namespace std;
ifstream cin(""joc.in"");
ofstream cout(""joc.out"");
typedef long long ll;
const ll mxN = 5e4, INF = 1e16;
priority_queue<array<ll,2>> pq;
vector<int> adj[mxN+10], sol;
bool visited[mxN+10];
ll nivel[mxN+10], d[mxN+10], parent[mxN+10];
int main()
{
    int cerinta;
    cin >> cerinta;
    int n , s, f;
    cin >> n >> s >> f;
    for(int i = 1;i<=n;i++)
        cin >> nivel[i];
    for(int from = 1;from <= n;from++)
    {
        int k; cin >> k;
        for(int it = 1;it<=k;it++)
        {
            int to; cin >> to;
            adj[from].push_back(to);
        }
    }
    for(int i = 1;i<=n;i++)
        d[i] = INF;
    d[s] = 0;
    pq.push({0,s});
    while(!pq.empty())
    {
        int from = pq.top()[1];
        pq.pop();
        if(visited[from])
            continue;
        visited[from] = true;
        for(auto it : adj[from])
        {
            int to = it;
            int nivelA = nivel[from];
            int nivelB = nivel[to];
            if(nivelA < nivelB) swap(nivelA,nivelB);
            ll cost = nivelA / nivelB;
            if(d[from] + cost < d[to])
            {
                parent[to] = from;
                d[to] = d[from] + cost;
                pq.push({-d[to],to});
            }
        }
    }
    if(cerinta == 1)
        cout << d[f] << '\n';
    else
    {
        for(int p = f;p!=0;p = parent[p])
            sol.push_back(p);
        reverse(sol.begin(),sol.end());
        cout << sol.size() << '\n';
        for(auto it : sol)
            cout << it << ' ';

    }
    return 0;
}
"
uiPT6qnL,что тут не так???,kay1mov,Lua,Sunday 22nd of June 2025 01:08:03 AM CDT,"script = {}

--Menu.Find(""Heroes"", ""Hero List"", ""Invoker"", ""Auto Usage"", ""Sun Strike Settings"", ""Auto Use"")

update_list_queue = {}
menu = Menu.Find(""Heroes"", ""Hero List"", ""Invoker"", ""Auto Usage"", ""Sun Strike Settings"")
if menu then
    switch = menu:Switch('Sun Strike for low HP teleport', false)
    switch:Icon(""\u{f0e7}"")
    input = menu:Input(""Max no-vision time"", ""25"")
    input:Icon(""\u{f017}"")
end

function contains(tbl, val)
    for i = 1, #tbl do
        if tbl[i] == val then
            return true
        end
    end
    return false
end

local handled_positions = {}
local particle_name_map = {}
local particle_data = {}

local actionQueue = {}
local nextActionTime = 0
local heroes = {}

function AddAction(delay, callback)
    table.insert(actionQueue, {time = GameRules.GetGameTime() + delay, action = callback})
end

local function add_divider()
    return
end


function script.OnUpdate()
    local now = GameRules.GetGameTime()

    if #actionQueue > 0 then
        local first = actionQueue[1]
        if now >= first.time then
            table.remove(actionQueue, 1)
            if first.action then
                first.action()
            end
        end
    end


    local allheroes = Heroes.GetAll()
    local localhero = Heroes.GetLocal()
    
    for i, hero in pairs(allheroes) do
        if hero and localhero and not Entity.IsSameTeam(hero, localhero) and not NPC.IsIllusion(hero) and Entity.IsAlive(hero) then
            local idx = Entity.GetIndex(hero)
            local isVisible = NPC.IsVisible(hero)
            --print(string.format(""Hero: %s | Index: %d | IsVisible: %s"", Entity.GetUnitName(hero), idx, tostring(isVisible)))
            
            if isVisible then
                heroes[idx] = os.time()
                --print(""Seen update: "" .. heroes[idx])
            end
        end
    end


    EMPCalc()
    icewallrender()
--    autosunstrike()

end

function script.OnParticleCreate(prt)
---@diagnostic disable-next-line: undefined-field
    prt = table.copy(prt)

    local particle_info = {}

    if prt.entity and Entity.IsNPC(prt.entity) then
        local unit_name = NPC.GetUnitName(prt.entity)
        local health = Entity.GetHealth(prt.entity)
        particle_info.unit_name = unit_name
        particle_info.health = health
        particle_info.unit = prt.entity
        prt[""[m]entity_name""] = unit_name
    end

    if prt.entityForModifiers and Entity.IsNPC(prt.entityForModifiers) then
        local unit_name = NPC.GetUnitName(prt.entityForModifiers)
        local health = Entity.GetHealth(prt.entityForModifiers)
        -- ⚠️ Важно: сохраняем `entityForModifiers`, а не `prt.entity`, как было у тебя
        particle_info.unit_name = unit_name
        particle_info.health = health
        particle_info.unit = prt.entityForModifiers
        prt[""[m]entityForModifiers_name""] = unit_name

    end

    if next(particle_info) ~= nil then
        particle_data[prt.index] = particle_info
    end

    particle_name_map[prt.index] = prt.name
    add_divider()
end


function script.OnParticleUpdate(prt)
    if prt.controlPoint == 2 and prt.position == Vector(1.0, 1.0, 1.0) then
        return
    end

    local _localhero = Heroes.GetLocal()
    if not _localhero then return end  -- тоже важно
    
    prt = table.copy(prt)

    if particle_name_map[prt.index] then
        prt[""[m]name""] = particle_name_map[prt.index]
    end

    if prt[""[m]name""] == ""teleport_start"" then
        local data = particle_data[prt.index]
        if not data then
            print(""No entity data for this particle"")
            return
        end

        if Entity.IsSameTeam(_localhero, data.unit) then
            print(""Same team"")
            return
        end    
        local pos_key = tostring(math.floor(prt.position.x)) .. ""_"" .. tostring(math.floor(prt.position.y))
        if handled_positions[pos_key] then
            print(""Already handled teleport at: "" .. pos_key)
            return
        end
        handled_positions[pos_key] = true
        if Menu.Find(""Heroes"", ""Hero List"", ""Invoker"", ""Auto Usage"", ""Sun Strike Settings"", ""Sun Strike for low HP teleport""):Get() == false then
            print(""Sun strike for low HP disabled"")
            return
        end

        if Entity.GetUnitName(_localhero) ~= ""npc_dota_hero_invoker"" then return end
        

        local sunstrike = NPC.GetAbility(_localhero, ""invoker_sun_strike"")
        local exort = NPC.GetAbility(_localhero, ""invoker_exort"")
        local invoke = NPC.GetAbility(_localhero, ""invoker_invoke"")
        if not sunstrike or not exort then return end
        
        local enemy = data.unit
        local exort_level = Ability.GetLevel(exort)
        local damage = 125 + (50 * exort_level)
        local player = Players.GetLocal()
        if Ability.IsReady(sunstrike) then
            print(""Sunstrike is ready"")
            if data.health + 5 <= damage then
                print(""Damage critical!"")
                if enemy then
                    local enemyid = Entity.GetIndex(enemy)

                    if heroes[enemyid] then
                        print(data.unit_name .. "" last seen at "" .. heroes[enemyid])

                        local now = os.time()
                        local seconds_passed = now - heroes[enemyid]

                        print(""After "" .. seconds_passed .. "" seconds"")
                        
                        local maxsleep = tonumber(Menu.Find(""Heroes"", ""Hero List"", ""Invoker"", ""Auto Usage"", ""Sun Strike Settings"", ""Max no-vision time""):Get())
                        print(""Max no-vision time "" .. maxsleep .. "" sec."")
                        if seconds_passed > maxsleep then
                            print(""Прошло более "" .. maxsleep .. "" секунд."")
                            return
                        end
                    else
                        print(""Нет информации о последнем появлении для enemyid: "" .. tostring(enemyid))
                    end
                else
                    print(""data.unit is nil!"")
                end

                if not Ability.IsHidden(sunstrike) then
                    Player.PrepareUnitOrders(player, Enum.UnitOrder.DOTA_UNIT_ORDER_CAST_POSITION, nil, prt.position, sunstrike, Enum.PlayerOrderIssuer.DOTA_ORDER_ISSUER_HERO_ONLY, _localhero, false, true, false, true, nil, true)
                    Engine.LookAt(prt.position.x, prt.position.y)
                    return
                end
                for i = 1, 3 do
                    AddAction(0.01, function()
                        Player.PrepareUnitOrders(player, Enum.UnitOrder.DOTA_UNIT_ORDER_CAST_NO_TARGET, nil, Vector(), exort, Enum.PlayerOrderIssuer.DOTA_ORDER_ISSUER_HERO_ONLY, _localhero, false, true, false, true, nil, true)                    
                        print(""prepare #"" .. i .. "" for exort"")
                    end)
                end

                if invoke and Ability.IsReady(invoke) then
                    print(""invoke is ready and cast it"")
                    print(""Начало "" .. os.time())
                    AddAction(0.25, function()
                        Player.PrepareUnitOrders(player, Enum.UnitOrder.DOTA_UNIT_ORDER_CAST_NO_TARGET, nil, Vector(), invoke, Enum.PlayerOrderIssuer.DOTA_ORDER_ISSUER_HERO_ONLY, _localhero, false, true, false, true, nil, true)
                        print(""Конец "".. os.time())
                    end)
                    
                end

                AddAction(0.15, function()
                    print(""Casting sunstrike"")
                    Player.PrepareUnitOrders(player, Enum.UnitOrder.DOTA_UNIT_ORDER_CAST_POSITION, nil, prt.position, sunstrike, Enum.PlayerOrderIssuer.DOTA_ORDER_ISSUER_HERO_ONLY, _localhero, false, true, false, true, nil, true)
--                    Engine.ExecuteCommand(""say Sunstrike casted at position: "" .. tostring(prt.position) .. "" for "" .. data.unit_name)
                    Engine.LookAt(prt.position.x, prt.position.y)
                end)
            end
        end
    end
    add_divider()
end


function script.OnParticleUpdateEntity(prt)
    MiniMap.SendLine(prt.position, false, false)
    prt = table.copy(prt)
    if (prt.entity and Entity.IsNPC(prt.entity)) then
        local unit_name = NPC.GetUnitName(prt.entity)
        prt[""[m]entity_name""] = unit_name
    end

    if particle_name_map[prt.index] then
        prt[""[m]name""] = particle_name_map[prt.index]
    end
    
    add_divider()
end

function script.OnParticleUpdateFallback(prt)

    prt = table.copy(prt)
    if particle_name_map[prt.index] then
        prt[""[m]name""] = particle_name_map[prt.index]
    end
    
    add_divider()
end

function script.OnParticleDestroy(prt)
    prt = table.copy(prt)

    if particle_name_map[prt.index] then
        prt[""[m]name""] = particle_name_map[prt.index]
    end

    particle_name_map[prt.index] = nil
    particle_data[prt.index] = nil

    
    add_divider()
end


--#endregion



return script"
20WPT4Pk,rawshell,goldfiction,Lua,Sunday 22nd of June 2025 12:52:14 AM CDT,"-- MIT License
--
-- Copyright (c) 2021 JackMacWindows
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the ""Software""), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in all
-- copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-- SOFTWARE.

local rawterm = require ""rawterm"" -- https://gist.github.com/MCJack123/50b211c55ceca4376e51d33435026006
local hasECC, ecc                 -- https://pastebin.com/ZGJGBJdg (comment out `os.pullEvent`s)
local hasRedrun, redrun           -- https://gist.github.com/MCJack123/473475f07b980d57dd2bd818026c97e8

local localEvents = {key = true, key_up = true, char = true, mouse_click = true, mouse_up = true, mouse_drag = true, mouse_scroll = true, mouse_move = true, term_resize = true, paste = true}
local serverRunning = false
local width, height = term.getSize()

local function randomString()
    local str = """"
    for i = 1, 16 do str = str .. string.char(math.random(32, 127)) end
    return str
end

local function singleserver(delegate, func, ...)
    local server = rawterm.server(delegate, width, height, 0, ""Remote Shell"")
    delegate.server = server
    local coro = coroutine.create(func)
    local oldterm = term.redirect(server)
    local ok, filter = coroutine.resume(coro, ...)
    term.redirect(oldterm)
    server.setVisible(false)
    local lastRender = os.epoch ""utc""
    while ok and coroutine.status(coro) == ""suspended"" and not delegate.closed do
        local ev = table.pack(server.pullEvent(filter, true))
        oldterm = term.redirect(server)
        ok, filter = coroutine.resume(coro, table.unpack(ev, 1, ev.n))
        term.redirect(oldterm)
        if os.epoch ""utc"" - lastRender >= 50 then
            server.setVisible(true)
            server.setVisible(false)
            lastRender = os.epoch ""utc""
        end
    end
    if not ok then printError(filter) end
    server.close()
    if coroutine.status(coro) == ""suspended"" then
        oldterm = term.redirect(server)
        filter = coroutine.resume(coro, ""terminate"")
        term.redirect(oldterm)
    end
end

local delegate_mt = {}
delegate_mt.__index = delegate_mt
function delegate_mt:send(data)
    if self.closed then return end
    if self.key then data = string.char(table.unpack(ecc.encrypt(randomString() .. data, self.key))) end
    self.modem.transmit(self.port, self.port, {id = os.computerID(), data = data})
end
function delegate_mt:receive()
    if self.closed then return nil end
    while true do
        local ev, side, channel, reply, message = os.pullEventRaw(""modem_message"")
        if ev == ""modem_message"" and channel == self.port and type(message) == ""table"" and message.id == self.id then
            message = message.data
            if self.key then
                message = string.char(table.unpack(ecc.decrypt(message, self.key)))
                --[[ argh, decrypt yields and that will break this, so we have to run it in a coroutine!
                local coro = coroutine.create(ecc.decrypt)
                local ok, a
                while coroutine.status(coro) == ""suspended"" do ok, a = coroutine.resume(coro, message, self.key) end
                if not ok then printError(message) return end
                message = string.char(table.unpack(a))
                ]]
                if #message > 16 and not self.nonces[message:sub(1, 16)] then
                    self.nonces[message:sub(1, 16)] = true
                    self.port = reply
                    return message:sub(17)
                end
            else
                self.port = reply
                return message
            end
        end
    end
end
function delegate_mt:close()
    if self.closed then return end
    if not self.silent then print(""> Closed connection on port "" .. self.port) end
    self.modem.close(self.port)
    self.key = nil
    self.nonces = nil
    self.closed = true
end

local function makeDelegate(modem, port, key, id, silent)
    modem.open(port)
    return setmetatable({
        modem = modem,
        port = port,
        key = key,
        id = id,
        silent = silent,
        closed = false,
        nonces = key and {}
    }, delegate_mt)
end

local function serve(password, secure, modem, program, url, background)
    if secure and not hasECC then error(""Secure mode requires the ECC library to function."", 2)
    elseif password and not secure then
        term.setTextColor(colors.yellow)
        print(""Warning: A password was set, but secure mode is disabled. Password will be sent in plaintext."")
        term.setTextColor(colors.white)
    end
    modem = modem or peripheral.find(""modem"")
    if not modem then error(""Please attach a modem."", 2) end
    modem.open(5731)
    local priv, pub
    if secure then
        priv, pub = ecc.keypair(ecc.random.random())
        if password then password = ecc.sha256.digest(password):toHex() end
    end
    print(""Server is now listening for connections."")
    local threads = {}
    local usedChallenges = {}
    serverRunning = true
    while serverRunning do
        local ev = table.pack(coroutine.yield())
        if ev[1] == ""modem_message"" and ev[3] == 5731 and type(ev[5]) == ""table"" and ev[5].server == os.computerID() then
            if not ev[5].id then
                modem.transmit(5731, 5731, {server = os.computerID(), status = ""Missing ID""})
            elseif secure and (not ev[5].key or not ev[5].challenge) then
                modem.transmit(5731, 5731, {server = os.computerID(), id = ev[5].id, status = ""Secure connection required"", key = pub, challenge = randomString()})
            elseif secure and (not ev[5].response or string.char(table.unpack(ecc.decrypt(ev[5].response, ecc.exchange(priv, ev[5].key)) or {})) ~= ev[5].challenge) then
                modem.transmit(5731, 5731, {server = os.computerID(), id = ev[5].id, status = ""Challenge failed"", key = pub, challenge = randomString()})
            elseif password and not ev[5].password then
                modem.transmit(5731, 5731, {server = os.computerID(), id = ev[5].id, status = ""Password required""})
            else
                local ok = true
                local key
                if secure then key = ecc.exchange(priv, ev[5].key) end
                if password then
                    if secure then ok = not usedChallenges[ev[5].challenge] and string.char(table.unpack(ecc.decrypt(ev[5].password, key))) == password .. ev[5].challenge
                    else ok = ev[5].password == password end
                end
                if ok then
                    if secure then usedChallenges[ev[5].challenge] = true end
                    local port = math.random(1000, 65500)
                    while modem.isOpen(port) do port = math.random(1000, 65500) end
                    if not background then print(""> New connection from ID "" .. ev[5].id .. "" on port "" .. port) end
                    modem.transmit(5731, port, {server = os.computerID(), id = ev[5].id, status = ""Opening connection""})
                    local coro = coroutine.create(singleserver)
                    local delegate = makeDelegate(modem, port, key, ev[5].id, background)
                    local ok, filter
                    if background then
                        if program then program = program:gsub(""^%S+"", shell.resolveProgram) end
                        ok, filter = coroutine.resume(coro, delegate, os.run, setmetatable({}, {__index = _G}), program or ""rom/programs/shell.lua"")
                    else ok, filter = coroutine.resume(coro, delegate, shell.run, program or ""shell"") end
                    if ok then threads[#threads+1] = {delegate = delegate, coro = coro, filter = filter}
                    else printError(filter) end
                else
                    modem.transmit(5731, 5731, {server = os.computerID(), id = ev[5].id, status = ""Password incorrect""})
                end
            end
        elseif ev[1] == ""terminate"" then serverRunning = false
        else
            local ok
            local delete = {}
            for i,v in pairs(threads) do
                if (v.filter == nil or v.filter == ev[1]) and not localEvents[ev[1]] then
                    ok, v.filter = coroutine.resume(v.coro, table.unpack(ev, 1, ev.n))
                    if not ok or coroutine.status(v.coro) ~= ""suspended"" then
                        if not ok then printError(v.filter) end
                        delete[#delete+1] = i
                    end
                end
            end
            for _,v in ipairs(delete) do threads[v] = nil end
        end
    end
    for _,v in pairs(threads) do
        if coroutine.status(v.coro) == ""suspended"" then coroutine.resume(v.coro, ""terminate"") end
        v.delegate.server.close()
    end
    print(""Server closed."")
end

local function recv(id)
    local tm = os.startTimer(5)
    while true do
        local ev = table.pack(os.pullEvent())
        if ev[1] == ""modem_message"" and ev[3] == 5731 and type(ev[5]) == ""table"" and ev[5].server == id then return ev[5], ev[4]
        elseif ev[1] == ""timer"" and ev[2] == tm then return nil end
    end
end

local function connect(id, modem, win)
    if not tonumber(id) then
        if not http.checkURL(id:gsub(""wss?://"", ""http://"")) then error(""ID argument must be a number or URL"", 2) end
        local delegate = rawterm.wsDelegate(id)
        return rawterm.client(delegate, 0, win), delegate
    end
    id = tonumber(id)
    modem = modem or peripheral.find(""modem"")
    if not modem then error(""Please attach a modem."", 2) end
    modem.open(5731)
    local req = {server = id, id = os.computerID()}
    local key, res, port
    while true do
        modem.transmit(5731, 5731, req)
        res, port = recv(id)
        if not res then error(""Connection failed: Timeout"") end
        if res.status == ""Secure connection required"" then
            if not hasECC then hasECC, ecc = pcall(require, ""ecc"") end
            if not hasECC then error(""Connection failed: Server requires secure connection, but ECC library is not installed."", 2) end
            local priv, pub = ecc.keypair(ecc.random.random())
            key = ecc.exchange(priv, res.key)
            req.key = pub
            req.challenge = res.challenge
            req.response = string.char(table.unpack(ecc.encrypt(res.challenge, key)))
        elseif res.status == ""Password required"" then
            if not key then print(""Warning: This connection is not secure. Your password will be sent unencrypted."") end
            write(""Password: "")
            req.password = read(""\7"")
            if key then req.password = string.char(table.unpack(ecc.encrypt(ecc.sha256.digest(req.password):toHex() .. req.challenge, key))) end
        elseif res.status == ""Opening connection"" then break
        else error(""Connection failed: "" .. res.status, 2) end
    end
    local delegate = makeDelegate(modem, port, key, id, true)
    return rawterm.client(delegate, 0, win), delegate
end

local args = {...}

if args[1] == ""serve"" or args[1] == ""host"" then
    local background = false
    local program = nil
    local modem = nil
    local password = nil
    local secure = false
    local url = nil
    local nextarg = nil
    for _, arg in ipairs(args) do
        if nextarg then
            if nextarg == 1 then program = arg
            elseif nextarg == 2 then modem = arg
            elseif nextarg == 3 then password = arg
            elseif nextarg == 4 then url = arg
            elseif nextarg == 5 then
                local w, h = arg:match(""^(%d+)x(%d+)$"")
                if not w then error(""Invalid argument for -r"") end
                width, height = tonumber(w), tonumber(h)
            end
            nextarg = nil
        elseif arg == ""-b"" then
            hasRedrun, redrun = pcall(require, ""redrun"")
            background = true
        elseif arg == ""-s"" then
            hasECC, ecc = pcall(require, ""ecc"")
            secure = true
        elseif arg == ""-c"" then nextarg = 1
        elseif arg == ""-m"" then nextarg = 2
        elseif arg == ""-p"" then nextarg = 3
        elseif arg == ""-r"" then nextarg = 5
        elseif arg == ""-w"" then nextarg = 4 end
    end

    if modem then
        if peripheral.getType(modem) ~= ""modem"" then error(""Peripheral on selected side is not a modem."") end
        modem = peripheral.wrap(modem)
    end
    if background then
        if not hasRedrun then error(""Background task running requires the RedRun library."") end
        if url then
            redrun.start(function() return singleserver(rawterm.wsDelegate(url, {[""X-Rawterm-Is-Server""] = ""Yes""}), os.run, setmetatable({}, {__index = _G}), program or ""rom/programs/shell.lua"") end, ""rawshell_server"")
        else
            redrun.start(function() return serve(password, secure, modem, program, url, true) end, ""rawshell_server"")
            while not serverRunning do coroutine.yield() end
        end
    elseif url then singleserver(rawterm.wsDelegate(url, {[""X-Rawterm-Is-Server""] = ""Yes""}), shell.run, program or ""shell"")
    else serve(password, secure, modem, program, url, false) end
elseif args[1] == ""connect"" and args[2] then
    local modem
    if args[3] then
        if peripheral.getType(args[3]) ~= ""modem"" then error(""Peripheral on selected side is not a modem."") end
        modem = peripheral.wrap(args[3])
    end
    local handle = connect(args[2], modem, term.current())
    local ok, err = pcall(handle.run)
    if term.current().setVisible then term.current().setVisible(true) end
    handle.close()
    term.setBackgroundColor(colors.black)
    term.setTextColor(colors.white)
    term.clear()
    term.setCursorPos(1, 1)
    term.setCursorBlink(true)
    if not ok then error(err, 2) end
elseif args[1] == ""get"" and args[2] and args[3] then
    local modem
    if args[5] then
        if peripheral.getType(args[5]) ~= ""modem"" then error(""Peripheral on selected side is not a modem."") end
        modem = peripheral.wrap(args[5])
    end
    local handle, delegate = connect(args[2], modem, nil)
    parallel.waitForAny(
        function() while not handle.fs do handle.update(delegate:receive()) end end,
        function() sleep(2) end)
    if not handle.fs then error(""Connection failed: Server does not support filesystem transfers"") end
    local infile, err = handle.fs.open(args[3], ""rb"")
    if not infile then error(""Could not open remote file: "" .. (err or ""Unknown error"")) end
    local outfile, err = fs.open(args[4] or shell.resolve(fs.getName(args[3])), ""wb"")
    if not outfile then
        infile.close()
        error(""Could not open local file: "" .. (err or ""Unknown error""))
    end
    outfile.write(infile.readAll())
    infile.close()
    outfile.close()
    handle.close()
    print(""Downloaded file as "" .. (args[4] or shell.resolve(fs.getName(args[3]))))
elseif args[1] == ""put"" and args[2] and args[3] and args[4] then
    local modem
    if args[5] then
        if peripheral.getType(args[5]) ~= ""modem"" then error(""Peripheral on selected side is not a modem."") end
        modem = peripheral.wrap(args[5])
    end
    local handle, delegate = connect(args[2], modem, nil)
    parallel.waitForAny(
        function() while not handle.fs do handle.update(delegate:receive()) end end,
        function() sleep(2) end)
    if not handle.fs then error(""Connection failed: Server does not support filesystem transfers"") end
    local infile, err = fs.open(args[3], ""rb"")
    if not infile then error(""Could not open remote file: "" .. (err or ""Unknown error"")) end
    local outfile, err = handle.fs.open(args[4] or shell.resolve(fs.getName(args[3])), ""wb"")
    if not outfile then
        infile.close()
        error(""Could not open local file: "" .. (err or ""Unknown error""))
    end
    outfile.write(infile.readAll())
    infile.close()
    outfile.close()
    handle.close()
    print(""Uploaded file as "" .. (args[4] or shell.resolve(fs.getName(args[3]))))
elseif (args[1] == ""ls"" or args[1] == ""list"") and args[2] then
    local modem
    if args[4] then
        if peripheral.getType(args[5]) ~= ""modem"" then error(""Peripheral on selected side is not a modem."") end
        modem = peripheral.wrap(args[5])
    end
    local handle, delegate = connect(args[2], modem, nil)
    parallel.waitForAny(
        function() while not handle.fs do handle.update(delegate:receive()) end end,
        function() sleep(2) end)
    if not handle.fs then error(""Connection failed: Server does not support filesystem transfers"") end
    local files = handle.fs.list(args[3] or ""/"")
    local fileList, dirList = {}, {}
    local showHidden = settings.get(""list.show_hidden"")
    for _, v in pairs(files) do
        if showHidden or v:sub(1, 1) ~= ""."" then
            local path = fs.combine(args[3] or ""/"", v)
            if handle.fs.isDir(path) then dirList[#dirList+1] = v
            else fileList[#fileList+1] = v end
        end
    end
    handle.close()
    table.sort(dirList)
    table.sort(fileList)
    if term.isColor() then textutils.pagedTabulate(colors.green, dirList, colors.white, fileList)
    else textutils.pagedTabulate(colors.lightGray, dirList, colors.white, fileList) end
elseif args[1] == ""status"" then
    hasRedrun, redrun = pcall(require, ""redrun"")
    if hasRedrun then
        local id = redrun.getid(""rawshell_server"")
        if not id then print(""Status: Server is not running."")
        else print(""Status: Server is running as ID "" .. id .. ""."") end
    else error(""Background task running requires the RedRun library."") end
elseif args[1] == ""stop"" then
    hasRedrun, redrun = pcall(require, ""redrun"")
    if hasRedrun then
        local id = redrun.getid(""rawshell_server"")
        if not id then error(""Server is not running."") end
        redrun.terminate(id)
    else error(""Background task running requires the RedRun library."") end
else
    term.setTextColor(colors.red)
    textutils.pagedPrint[[
Usage:
    rawshell connect <id> [side]
    rawshell get <id> <remote path> [local path] [side]
    rawshell put <id> <local path> <remote path> [side]
    raswhell ls <id> [remote path]
    rawshell serve [-c <program>] [-m <side>] [-p <password>] [-w <url>] [-b] [-s]
    rawshell status
    rawshell stop
Arguments:
    <id>                The ID of the server to connect to, or a WebSocket URL
    -b                  Run in background (requires RedRun)
    -c <program>        Program to run on connection (defaults to ""shell"")
    -m <side> / [side]  Use modem attached to the selected side
    -p <password>       Require password to log in
    -r <width>x<height> Set the resolution of the virtual screen
    -s                  Use secure connection (requires ECC)
    -w <url>            Serve to a WebSocket URL instead of over a modem]]
    term.setTextColor(colors.white)
end"
brvk9iL2,Runnables_task,Arhons,Python,Sunday 22nd of June 2025 12:28:56 AM CDT,"from langchain_core.runnables import RunnableLambda, RunnableParallel
import grandalf


equation_data = {""a"": 1, ""b"": 2, ""c"": 5}

D = RunnableLambda(lambda data: data[""b""]**2 - 4 * data[""a""] * data[""c""])

x = RunnableLambda(lambda data: -data[""b""]/(2 * data[""a""]))
x1 = RunnableLambda(lambda data: (-data[""b""] + D.invoke(data)**0.5)/(2 * data[""a""]))
x2 = RunnableLambda(lambda data: (-data[""b""] - D.invoke(data)**0.5)/(2 * data[""a""]))

roots = RunnableParallel({""Корень 1:"": x1, ""Корень 2:"": x2})

chain = RunnableLambda(lambda data: x.invoke(data) if D.invoke(data) == 0 else(""Корней нет"" if D.invoke(data) < 0 else roots.invoke(data)))

chain.get_graph().print_ascii()

result = chain.invoke(equation_data)
print(result)




"
ikpe1WBZ,Lab 4 V2,CrhisDLM,C++,Saturday 21st of June 2025 11:50:35 PM CDT,"//Codigo Arduino
//lAB 3
//Crhistian David Lucumi
//Usc
//Version 2.0
int valor = 0;

#define MAX 9
int led[MAX] = {
  2, 3, 4, 5, 6, 7, 8, 9, 10
};
int t_off = 500;
int t_on = 100;


void setup() {
  Serial.begin(9600);
  for (int pin = 0; pin <= MAX; pin++) {
    pinMode(led[pin], OUTPUT);
  }
}


void loop() {
  for (int pin = 0; pin <= MAX; pin++) {
    prender(led[pin], t_on);
    apagar(led[pin], t_off);
    leerSerial();
  }
  for (int pin = MAX; pin >= 0; pin--) {
    prender(led[pin], t_on);
    apagar(led[pin], t_off);
    leerSerial();
  }
}

void prender(int le, int tem) {
  digitalWrite(le, HIGH);
  delay(tem);
}
void apagar(int le, int tem) {
  digitalWrite(le, LOW);
  delay(tem);
}
void leerSerial() {
  if (Serial.available() > 0) {
    valor = Serial.read();
    if (valor == 'O') {
      t_on = Serial.parseInt();
    }
    if (valor == 'F') {
      t_off = Serial.parseInt();
    }
  }
}"
fdndgqvv,img2scad,j0h,Python,Saturday 21st of June 2025 10:49:58 PM CDT,"#!/usr/bin/env python3

from PIL import Image
import numpy as np

# === CONFIG ===
INPUT_IMAGE = ""t.png""
OUTPUT_SCAD = ""output.scad""
PIXEL_SIZE = 1       # mm per pixel (X and Y)
MAX_HEIGHT = 10.0    # max Z height in mm
DOWNSCALE = 3        # Skip every N pixels for speed (set to 1 for full res)
		     # Full res will result in very long openscad load times

# === LOAD AND PROCESS IMAGE ===
img = Image.open(INPUT_IMAGE).convert(""L"")
data = np.array(img)

# Optionally downscale to speed up output
data = data[::DOWNSCALE, ::DOWNSCALE]

# Normalize grayscale to height
zscale = MAX_HEIGHT / 255.0
heights = data * zscale

rows, cols = heights.shape

# === WRITE SCAD FILE ===
with open(OUTPUT_SCAD, ""w"") as f:
    f.write(""// Generated by img2scad.py\n"")
    f.write(""union() {\n"")

    for y in range(rows):
        for x in range(cols):
            h = heights[y, x]
            if h > 0:
                # OpenSCAD coordinate system: [x, y, z]
                f.write(f""  translate([{x * PIXEL_SIZE}, {y * PIXEL_SIZE}, 0])\n"")
                f.write(f""    cube([{PIXEL_SIZE}, {PIXEL_SIZE}, {h:.2f}]);\n"")

    f.write(""}\n"")

print(f""Done. Output written to: {OUTPUT_SCAD}"")

'''
Notes:
openSCAD will take forever to load a prebuilt complex openscad file IF you load that object from the start.
(even if you have manifold selected in the rendering options of developer mode)
(becuase init still uses CSG regardless)
The work around is to load a blank output file, then generate the data using this script.
then, provided you have manifold selected, reloading the data will be much faster.

2. This is true, to 200K objects. at over 200K objects, openscad will default to CSG modeling, which is the same
as being broken.

3. background subtraction concept forgoing complex image processing:
 for h < some min_hight
 render no objects.
 this may help keep object count low, where you can continue to reap the benifits of manifold rendering.
 
 h < 3
 but Im pretty tired finding other ppls bugs. Ima go sleep.


'''"
Ykspme9H,A tree that is able to be cut down,Cat_in_the_hat,Lua,Saturday 21st of June 2025 09:22:33 PM CDT,"local spacing = 12
local treeSpots = {}
local placedTrees = {}
local requiredHits = 6
local spreadat = ItemType.GRASS

local function isFarEnough(pos)
	for _, placedPos in pairs(placedTrees) do
		if (placedPos - pos).Magnitude < spacing then
			return false
		end
	end
	return true
end

for _, block in pairs(BlockService.getAllBlocks({ spreadat })) do
	local basePos = block.position
	if isFarEnough(basePos) then
		table.insert(treeSpots, basePos)
		table.insert(placedTrees, basePos)
	end
end

for _, basePos in pairs(treeSpots) do
	local trunk = {}
	local leaves = {}
	local allParts = {}
	local partData = {}
	local hits = 0

	for i = 1, 6 do
		local part = PartService.createPart(ItemType.WOOL_BROWN, basePos + Vector3.new(0, i * 3, 0))
		part:setSize(Vector3.new(3, 3, 3))
		part:setAnchored(true)
		part:setCollidable(true)
		table.insert(trunk, part)
	end

	local center = basePos + Vector3.new(0, 21, 0)
	for x = -2, 2 do
		for y = -2, 2 do
			for z = -2, 2 do
				local offset = Vector3.new(x, y, z)
				if offset.Magnitude <= 2.5 then
					local pos = center + offset * 3
					local part = PartService.createPart(ItemType.WOOL_GREEN, pos)
					part:setSize(Vector3.new(3, 3, 3))
					part:setAnchored(true)
					part:setCollidable(true)
					table.insert(leaves, part)
				end
			end
		end
	end

	for _, part in pairs(trunk) do table.insert(allParts, part) end
	for _, part in pairs(leaves) do table.insert(allParts, part) end
	for _, part in pairs(allParts) do
		table.insert(partData, {
			part = part,
			offset = part:getPosition() - basePos
		})
	end

	Events.WeaponSwing(function(event)
		local entity = event.player:getEntity()
		if not entity then return end
		if (entity:getPosition() - basePos - Vector3.new(0, 3, 0)).Magnitude > 7 then return end

		hits += 1
		if hits == requiredHits then
			local direction = entity:getCFrame().LookVector
			local fallAxis = Vector3.new(0, 1, 0):Cross(direction).Unit

			task.spawn(function()
				for i = 1, 20 do
					task.wait(0.005)
					local progress = i / 20
					local rotation = CFrame.fromAxisAngle(fallAxis, math.rad(70) * progress)
					for _, data in pairs(partData) do
						local rotated = rotation:vectorToWorldSpace(data.offset)
						data.part:setCFrame(CFrame.new(basePos + rotated) * rotation)
					end
				end

				for _, data in pairs(partData) do
					data.part:setAnchored(false)
					data.part:setCollidable(true)
				end

				task.delay(7, function()
					local index = 1
					local batchSize = 1
					while index <= #partData do
						for i = index, math.min(index + batchSize - 1, #partData) do
							partData[i].part:setCollidable(false)
						end
						task.wait(0.2)
						index += batchSize
						if batchSize < 4 then
							batchSize += 1
						end
					end
				end)
			end)
		end
	end)
end"
WHprZrQc,cursor blink and extra keys,RebelRose,Bash,Saturday 21st of June 2025 09:02:29 PM CDT,"terminal-cursor-blink-rate=500


extra-keys = [ \
 ['ESC','/','-','HOME','UP','END','PGUP','BKSP'], \
 ['TAB','CTRL','ALT','LEFT','DOWN','RIGHT','PGDN','ENTER'] \
]"
haJdva4d,Roblox Scripts/Exploits (NEW),Robloxian_1732,Lua,Saturday 21st of June 2025 08:25:52 PM CDT,"--GROW A GARDEN-GROW A GARDEN-GROW A GARDEN-↓
loadstring(game:HttpGet(""https://raw.githubusercontent.com/AhmadV99/Speed-Hub-X/main/Speed%20Hub%20X.lua"", true))()
--GROW A GARDEN-GROW A GARDEN-GROW A GARDEN-↑

--DEAD RAILS-DEAD RAILS-DEAD RAILS-DEAD RAILS-↓
getgenv().auto_bond=true
getgenv().auto_win=true
loadstring(game:HttpGet('https://raw.githubusercontent.com/m00ndiety/Dead-rails/refs/heads/main/Auto-Win-With-Bonds'))()
--DEAD RAILS-DEAD RAILS-DEAD RAILS-DEAD RAILS-↑"
9BPfNKAX,RFTools Control - Yrdeen AE2 Autocraft,toastonrye,JSON,Saturday 21st of June 2025 07:42:48 PM CDT,"[
  {
    ""pos"": {
      ""x"": 0,
      ""y"": 0
    },
    ""opcode"": {
      ""id"": ""do_comment"",
      ""parameters"": [
        {
          ""type"": ""string"",
          ""value"": {
            ""v"": ""Proof of concept""
          }
        },
        {
          ""type"": ""string"",
          ""value"": {
            ""v"": ""Designed to work with AE2""
          }
        },
        {
          ""type"": ""string"",
          ""value"": {
            ""v"": ""toastonrye""
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 0,
      ""y"": 1
    },
    ""opcode"": {
      ""id"": ""eval_rs"",
      ""primary"": ""R"",
      ""parameters"": [
        {
          ""type"": ""side"",
          ""value"": {
            ""side"": ""west""
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 0,
      ""y"": 2
    },
    ""opcode"": {
      ""id"": ""ev_timer"",
      ""primary"": ""U"",
      ""parameters"": [
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 40
          }
        },
        {
          ""type"": ""boolean"",
          ""value"": {
            ""null"": true
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 9,
      ""y"": 0
    },
    ""opcode"": {
      ""id"": ""do_log"",
      ""primary"": ""D"",
      ""parameters"": [
        {
          ""type"": ""string"",
          ""value"": {
            ""v"": ""250 Crystalline""
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 9,
      ""y"": 1
    },
    ""opcode"": {
      ""id"": ""do_fetchliquid"",
      ""primary"": ""R"",
      ""parameters"": [
        {
          ""type"": ""inventory"",
          ""value"": {
            ""side"": ""up""
          }
        },
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 250
          }
        },
        {
          ""type"": ""fluid"",
          ""value"": {
            ""fluid"": ""crystalline"",
            ""amount"": 1000
          }
        },
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 2
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 7,
      ""y"": 0
    },
    ""opcode"": {
      ""id"": ""do_log"",
      ""primary"": ""D"",
      ""parameters"": [
        {
          ""type"": ""string"",
          ""value"": {
            ""v"": ""1000 Concrete""
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 7,
      ""y"": 1
    },
    ""opcode"": {
      ""id"": ""do_fetchliquid"",
      ""primary"": ""R"",
      ""parameters"": [
        {
          ""type"": ""inventory"",
          ""value"": {
            ""side"": ""up""
          }
        },
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 1000
          }
        },
        {
          ""type"": ""fluid"",
          ""value"": {
            ""fluid"": ""concrete"",
            ""amount"": 1000
          }
        },
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 1
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 9,
      ""y"": 3
    },
    ""opcode"": {
      ""id"": ""do_pushliquid"",
      ""primary"": ""L"",
      ""parameters"": [
        {
          ""type"": ""inventory"",
          ""value"": {
            ""side"": ""north"",
            ""node"": ""tinker""
          }
        },
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 250
          }
        },
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 2
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 5,
      ""y"": 0
    },
    ""opcode"": {
      ""id"": ""do_log"",
      ""primary"": ""D"",
      ""parameters"": [
        {
          ""type"": ""string"",
          ""value"": {
            ""v"": ""144 Nitronite""
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 5,
      ""y"": 1
    },
    ""opcode"": {
      ""id"": ""do_fetchliquid"",
      ""primary"": ""R"",
      ""parameters"": [
        {
          ""type"": ""inventory"",
          ""value"": {
            ""side"": ""up""
          }
        },
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 144
          }
        },
        {
          ""type"": ""fluid"",
          ""value"": {
            ""fluid"": ""nitronite_fluid"",
            ""amount"": 1000
          }
        },
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 0
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 7,
      ""y"": 3
    },
    ""opcode"": {
      ""id"": ""do_releaselock"",
      ""primary"": ""L"",
      ""parameters"": [
        {
          ""type"": ""string"",
          ""value"": {
            ""v"": ""latch""
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 3,
      ""y"": 0
    },
    ""opcode"": {
      ""id"": ""do_delay"",
      ""primary"": ""L"",
      ""parameters"": [
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 100
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 3,
      ""y"": 1
    },
    ""opcode"": {
      ""id"": ""test_set"",
      ""primary"": ""U"",
      ""secondary"": ""r"",
      ""parameters"": [
        {
          ""type"": ""boolean"",
          ""value"": {
            ""fun"": ""last_bool""
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 5,
      ""y"": 3
    },
    ""opcode"": {
      ""id"": ""do_stop"",
      ""parameters"": []
    }
  },
  {
    ""pos"": {
      ""x"": 1,
      ""y"": 1
    },
    ""opcode"": {
      ""id"": ""test_set"",
      ""primary"": ""R"",
      ""secondary"": ""d"",
      ""parameters"": [
        {
          ""type"": ""boolean"",
          ""value"": {
            ""fun"": ""last_bool""
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 1,
      ""y"": 2
    },
    ""opcode"": {
      ""id"": ""do_stop"",
      ""parameters"": []
    }
  },
  {
    ""pos"": {
      ""x"": 10,
      ""y"": 0
    },
    ""opcode"": {
      ""id"": ""do_delay"",
      ""primary"": ""L"",
      ""parameters"": [
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 100
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 10,
      ""y"": 1
    },
    ""opcode"": {
      ""id"": ""test_eq_number"",
      ""primary"": ""D"",
      ""secondary"": ""u"",
      ""parameters"": [
        {
          ""type"": ""number"",
          ""value"": {
            ""fun"": ""last_number""
          }
        },
        {
          ""type"": ""number"",
          ""value"": {
            ""v"": 250
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 8,
      ""y"": 0
    },
    ""opcode"": {
      ""id"": ""do_delay"",
      ""primary"": ""L"",
      ""parameters"": [
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 100
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 10,
      ""y"": 2
    },
    ""opcode"": {
      ""id"": ""do_pushliquid"",
      ""primary"": ""D"",
      ""parameters"": [
        {
          ""type"": ""inventory"",
          ""value"": {
            ""side"": ""north"",
            ""node"": ""tinker""
          }
        },
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 144
          }
        },
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 0
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 8,
      ""y"": 1
    },
    ""opcode"": {
      ""id"": ""test_eq_number"",
      ""primary"": ""R"",
      ""secondary"": ""u"",
      ""parameters"": [
        {
          ""type"": ""number"",
          ""value"": {
            ""fun"": ""last_number""
          }
        },
        {
          ""type"": ""number"",
          ""value"": {
            ""v"": 1000
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 10,
      ""y"": 3
    },
    ""opcode"": {
      ""id"": ""do_pushliquid"",
      ""primary"": ""L"",
      ""parameters"": [
        {
          ""type"": ""inventory"",
          ""value"": {
            ""side"": ""north"",
            ""node"": ""tinker""
          }
        },
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 1000
          }
        },
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 1
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 6,
      ""y"": 0
    },
    ""opcode"": {
      ""id"": ""do_delay"",
      ""primary"": ""L"",
      ""parameters"": [
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 100
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 6,
      ""y"": 1
    },
    ""opcode"": {
      ""id"": ""test_eq_number"",
      ""primary"": ""R"",
      ""secondary"": ""u"",
      ""parameters"": [
        {
          ""type"": ""number"",
          ""value"": {
            ""fun"": ""last_number""
          }
        },
        {
          ""type"": ""number"",
          ""value"": {
            ""v"": 144
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 8,
      ""y"": 3
    },
    ""opcode"": {
      ""id"": ""do_delay"",
      ""primary"": ""L"",
      ""parameters"": [
        {
          ""type"": ""integer"",
          ""value"": {
            ""v"": 20
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 4,
      ""y"": 1
    },
    ""opcode"": {
      ""id"": ""do_lock"",
      ""primary"": ""R"",
      ""parameters"": [
        {
          ""type"": ""string"",
          ""value"": {
            ""v"": ""latch""
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 6,
      ""y"": 3
    },
    ""opcode"": {
      ""id"": ""do_log"",
      ""primary"": ""L"",
      ""parameters"": [
        {
          ""type"": ""string"",
          ""value"": {
            ""v"": ""Done""
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 2,
      ""y"": 0
    },
    ""opcode"": {
      ""id"": ""do_log"",
      ""primary"": ""D"",
      ""parameters"": [
        {
          ""type"": ""string"",
          ""value"": {
            ""v"": ""Locked""
          }
        }
      ]
    }
  },
  {
    ""pos"": {
      ""x"": 2,
      ""y"": 1
    },
    ""opcode"": {
      ""id"": ""eval_lock"",
      ""primary"": ""R"",
      ""parameters"": [
        {
          ""type"": ""string"",
          ""value"": {
            ""v"": ""latch""
          }
        }
      ]
    }
  }
]"
jdVFPH4b,2025-06-21_stats.json,rdp_snitch,JSON,Saturday 21st of June 2025 07:18:37 PM CDT,"{
  ""ip"": {
    ""24.173.30.170"": 27738,
    ""14.225.202.191"": 12240,
    ""157.230.248.35"": 2610,
    ""167.172.222.218"": 12,
    ""96.126.114.48"": 3,
    ""162.216.150.136"": 12,
    ""151.41.176.50"": 3,
    ""198.235.24.180"": 9,
    ""185.196.220.41"": 9,
    ""185.156.73.154"": 6,
    ""92.63.197.23"": 27,
    ""198.235.24.228"": 9,
    ""165.232.160.65"": 3,
    ""223.27.82.162"": 45,
    ""111.170.152.113"": 9,
    ""68.183.179.179"": 3,
    ""198.235.24.109"": 9,
    ""45.146.130.128"": 6,
    ""193.24.211.25"": 9,
    ""91.238.181.91"": 6,
    ""88.214.25.124"": 6,
    ""191.252.2.116"": 12,
    ""205.210.31.96"": 9,
    ""45.55.52.60"": 3,
    ""23.148.144.149"": 3
  },
  ""asn"": {
    ""AS11427"": 27738,
    ""AS135905"": 12240,
    ""AS14061"": 2631,
    ""AS63949"": 3,
    ""AS396982"": 48,
    ""AS1267"": 3,
    ""AS213438"": 9,
    ""AS210848"": 33,
    ""AS38071"": 45,
    ""AS151185"": 9,
    ""AS213790"": 6,
    ""AS215929"": 9,
    ""AS49434"": 6,
    ""AS35042"": 6,
    ""AS27715"": 12,
    ""AS46664"": 3
  },
  ""isp"": {
    ""Charter Communications Inc"": 27738,
    ""Vietnam Posts and Telecommunications Group"": 12240,
    ""DigitalOcean, LLC"": 2631,
    ""Akamai Technologies, Inc."": 3,
    ""Google LLC"": 48,
    ""INFOSTRADA"": 3,
    ""ColocaTel Inc."": 9,
    ""OOO SibirInvest"": 6,
    ""Telkom Internet LTD"": 27,
    ""Aftab IT Limited"": 45,
    ""China Telecom"": 9,
    ""Limited Network LTD"": 6,
    ""Data Campus Limited"": 9,
    ""Datacenter location PAR1 France"": 6,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Locaweb Servi\u00e7os de Internet S/A"": 12,
    ""VolumeDrive"": 3
  },
  ""org"": {
    ""Spectrum"": 27738,
    ""VNPT"": 12240,
    ""DigitalOcean, LLC"": 2628,
    ""Linode"": 3,
    ""Google Cloud (us-east1)"": 12,
    ""Unknown"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Colocatel Inc"": 9,
    ""IP Kiktev Nikolay Vladimirovich"": 6,
    ""Korotkij Denis Aleksandrovich"": 27,
    ""Aftab IT Limited"": 45,
    ""Chinanet HB"": 9,
    ""Limited Network LTD"": 6,
    ""Data Campus Limited"": 9,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""Locaweb Servi\u00e7os de Internet S/A"": 12,
    ""Digital Ocean"": 3,
    ""Quick Server Hosting LLC"": 3
  },
  ""regionName"": {
    ""Texas"": 27741,
    ""Hanoi"": 12240,
    ""South West"": 2616,
    ""California"": 48,
    ""South Carolina"": 12,
    ""Emilia-Romagna"": 3,
    ""Virginia"": 9,
    ""North Holland"": 33,
    ""Dhaka Division"": 45,
    ""Hubei"": 9,
    ""Federal District"": 6,
    ""Central and Western District"": 9,
    ""\u00cele-de-France"": 6,
    ""Kowloon City"": 6,
    ""S\u00e3o Paulo"": 12,
    ""New Jersey"": 3,
    ""Pennsylvania"": 3
  },
  ""country"": {
    ""United States"": 27816,
    ""Vietnam"": 12240,
    ""Singapore"": 2616,
    ""Italy"": 3,
    ""The Netherlands"": 33,
    ""Bangladesh"": 45,
    ""China"": 9,
    ""Brazil"": 18,
    ""Hong Kong"": 15,
    ""France"": 6
  },
  ""account"": {
    ""hello"": 42618,
    ""w11d1hlb"": 12,
    ""beio"": 3,
    ""yhDxyQONx"": 6,
    ""nmap"": 3,
    ""naap"": 3,
    ""a"": 3,
    ""VNqVxJteH"": 3,
    ""Pumpge"": 3,
    ""QWllyX"": 3,
    ""Domain"": 9,
    ""Administr"": 42,
    ""YtylTKlqH"": 3,
    ""UmZkNe"": 3,
    ""YFGXYc"": 3,
    ""(empty)"": 3,
    ""Administrator"": 15,
    ""Admin"": 15,
    ""User"": 15,
    ""sPjlVZCVq"": 3,
    ""IearQT"": 3,
    ""efQuBI"": 3,
    ""Test"": 18,
    ""AITPbfbpX"": 3,
    ""cLgSmB"": 3,
    ""bQqZsw"": 3
  },
  ""keyboard"": {
    ""Unknown"": 42801
  },
  ""client_build"": {
    ""Unknown"": 42801
  },
  ""client_name"": {
    ""Unknown"": 42801
  },
  ""ip_type"": {
    ""Unknown"": 40092,
    ""hosting"": 2703,
    ""proxy"": 6
  }
}"
DrbKmz8F,2025-06-21_stats.json,rdp_snitch,JSON,Saturday 21st of June 2025 07:16:23 PM CDT,"{
  ""ip"": {
    ""24.173.30.170"": 18492,
    ""14.225.202.191"": 8160,
    ""157.230.248.35"": 1740,
    ""167.172.222.218"": 8,
    ""96.126.114.48"": 2,
    ""162.216.150.136"": 8,
    ""151.41.176.50"": 2,
    ""198.235.24.180"": 6,
    ""185.196.220.41"": 6,
    ""185.156.73.154"": 4,
    ""92.63.197.23"": 18,
    ""198.235.24.228"": 6,
    ""165.232.160.65"": 2,
    ""223.27.82.162"": 30,
    ""111.170.152.113"": 6,
    ""68.183.179.179"": 2,
    ""198.235.24.109"": 6,
    ""45.146.130.128"": 4,
    ""193.24.211.25"": 6,
    ""91.238.181.91"": 4,
    ""88.214.25.124"": 4,
    ""191.252.2.116"": 8,
    ""205.210.31.96"": 6,
    ""45.55.52.60"": 2,
    ""23.148.144.149"": 2
  },
  ""asn"": {
    ""AS11427"": 18492,
    ""AS135905"": 8160,
    ""AS14061"": 1754,
    ""AS63949"": 2,
    ""AS396982"": 32,
    ""AS1267"": 2,
    ""AS213438"": 6,
    ""AS210848"": 22,
    ""AS38071"": 30,
    ""AS151185"": 6,
    ""AS213790"": 4,
    ""AS215929"": 6,
    ""AS49434"": 4,
    ""AS35042"": 4,
    ""AS27715"": 8,
    ""AS46664"": 2
  },
  ""isp"": {
    ""Charter Communications Inc"": 18492,
    ""Vietnam Posts and Telecommunications Group"": 8160,
    ""DigitalOcean, LLC"": 1754,
    ""Akamai Technologies, Inc."": 2,
    ""Google LLC"": 32,
    ""INFOSTRADA"": 2,
    ""ColocaTel Inc."": 6,
    ""OOO SibirInvest"": 4,
    ""Telkom Internet LTD"": 18,
    ""Aftab IT Limited"": 30,
    ""China Telecom"": 6,
    ""Limited Network LTD"": 4,
    ""Data Campus Limited"": 6,
    ""Datacenter location PAR1 France"": 4,
    ""NOC EMAIL: noc@one-host.net"": 4,
    ""Locaweb Servi\u00e7os de Internet S/A"": 8,
    ""VolumeDrive"": 2
  },
  ""org"": {
    ""Spectrum"": 18492,
    ""VNPT"": 8160,
    ""DigitalOcean, LLC"": 1752,
    ""Linode"": 2,
    ""Google Cloud (us-east1)"": 8,
    ""Unknown"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Colocatel Inc"": 6,
    ""IP Kiktev Nikolay Vladimirovich"": 4,
    ""Korotkij Denis Aleksandrovich"": 18,
    ""Aftab IT Limited"": 30,
    ""Chinanet HB"": 6,
    ""Limited Network LTD"": 4,
    ""Data Campus Limited"": 6,
    ""ThinkTech Technology Industrial CO. Limited"": 8,
    ""Locaweb Servi\u00e7os de Internet S/A"": 8,
    ""Digital Ocean"": 2,
    ""Quick Server Hosting LLC"": 2
  },
  ""regionName"": {
    ""Texas"": 18494,
    ""Hanoi"": 8160,
    ""South West"": 1744,
    ""California"": 32,
    ""South Carolina"": 8,
    ""Emilia-Romagna"": 2,
    ""Virginia"": 6,
    ""North Holland"": 22,
    ""Dhaka Division"": 30,
    ""Hubei"": 6,
    ""Federal District"": 4,
    ""Central and Western District"": 6,
    ""\u00cele-de-France"": 4,
    ""Kowloon City"": 4,
    ""S\u00e3o Paulo"": 8,
    ""New Jersey"": 2,
    ""Pennsylvania"": 2
  },
  ""country"": {
    ""United States"": 18544,
    ""Vietnam"": 8160,
    ""Singapore"": 1744,
    ""Italy"": 2,
    ""The Netherlands"": 22,
    ""Bangladesh"": 30,
    ""China"": 6,
    ""Brazil"": 12,
    ""Hong Kong"": 10,
    ""France"": 4
  },
  ""account"": {
    ""hello"": 28412,
    ""w11d1hlb"": 8,
    ""beio"": 2,
    ""yhDxyQONx"": 4,
    ""nmap"": 2,
    ""naap"": 2,
    ""a"": 2,
    ""VNqVxJteH"": 2,
    ""Pumpge"": 2,
    ""QWllyX"": 2,
    ""Domain"": 6,
    ""Administr"": 28,
    ""YtylTKlqH"": 2,
    ""UmZkNe"": 2,
    ""YFGXYc"": 2,
    ""(empty)"": 2,
    ""Administrator"": 10,
    ""Admin"": 10,
    ""User"": 10,
    ""sPjlVZCVq"": 2,
    ""IearQT"": 2,
    ""efQuBI"": 2,
    ""Test"": 12,
    ""AITPbfbpX"": 2,
    ""cLgSmB"": 2,
    ""bQqZsw"": 2
  },
  ""keyboard"": {
    ""Unknown"": 28534
  },
  ""client_build"": {
    ""Unknown"": 28534
  },
  ""client_name"": {
    ""Unknown"": 28534
  },
  ""ip_type"": {
    ""Unknown"": 26728,
    ""hosting"": 1802,
    ""proxy"": 4
  }
}"
10SgDg75,2025-06-21_stats.json,rdp_snitch,JSON,Saturday 21st of June 2025 07:15:12 PM CDT,"{
  ""ip"": {
    ""24.173.30.170"": 9246,
    ""14.225.202.191"": 4080,
    ""157.230.248.35"": 870,
    ""167.172.222.218"": 4,
    ""96.126.114.48"": 1,
    ""162.216.150.136"": 4,
    ""151.41.176.50"": 1,
    ""198.235.24.180"": 3,
    ""185.196.220.41"": 3,
    ""185.156.73.154"": 2,
    ""92.63.197.23"": 9,
    ""198.235.24.228"": 3,
    ""165.232.160.65"": 1,
    ""223.27.82.162"": 15,
    ""111.170.152.113"": 3,
    ""68.183.179.179"": 1,
    ""198.235.24.109"": 3,
    ""45.146.130.128"": 2,
    ""193.24.211.25"": 3,
    ""91.238.181.91"": 2,
    ""88.214.25.124"": 2,
    ""191.252.2.116"": 4,
    ""205.210.31.96"": 3,
    ""45.55.52.60"": 1,
    ""23.148.144.149"": 1
  },
  ""asn"": {
    ""AS11427"": 9246,
    ""AS135905"": 4080,
    ""AS14061"": 877,
    ""AS63949"": 1,
    ""AS396982"": 16,
    ""AS1267"": 1,
    ""AS213438"": 3,
    ""AS210848"": 11,
    ""AS38071"": 15,
    ""AS151185"": 3,
    ""AS213790"": 2,
    ""AS215929"": 3,
    ""AS49434"": 2,
    ""AS35042"": 2,
    ""AS27715"": 4,
    ""AS46664"": 1
  },
  ""isp"": {
    ""Charter Communications Inc"": 9246,
    ""Vietnam Posts and Telecommunications Group"": 4080,
    ""DigitalOcean, LLC"": 877,
    ""Akamai Technologies, Inc."": 1,
    ""Google LLC"": 16,
    ""INFOSTRADA"": 1,
    ""ColocaTel Inc."": 3,
    ""OOO SibirInvest"": 2,
    ""Telkom Internet LTD"": 9,
    ""Aftab IT Limited"": 15,
    ""China Telecom"": 3,
    ""Limited Network LTD"": 2,
    ""Data Campus Limited"": 3,
    ""Datacenter location PAR1 France"": 2,
    ""NOC EMAIL: noc@one-host.net"": 2,
    ""Locaweb Servi\u00e7os de Internet S/A"": 4,
    ""VolumeDrive"": 1
  },
  ""org"": {
    ""Spectrum"": 9246,
    ""VNPT"": 4080,
    ""DigitalOcean, LLC"": 876,
    ""Linode"": 1,
    ""Google Cloud (us-east1)"": 4,
    ""Unknown"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Colocatel Inc"": 3,
    ""IP Kiktev Nikolay Vladimirovich"": 2,
    ""Korotkij Denis Aleksandrovich"": 9,
    ""Aftab IT Limited"": 15,
    ""Chinanet HB"": 3,
    ""Limited Network LTD"": 2,
    ""Data Campus Limited"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 4,
    ""Locaweb Servi\u00e7os de Internet S/A"": 4,
    ""Digital Ocean"": 1,
    ""Quick Server Hosting LLC"": 1
  },
  ""regionName"": {
    ""Texas"": 9247,
    ""Hanoi"": 4080,
    ""South West"": 872,
    ""California"": 16,
    ""South Carolina"": 4,
    ""Emilia-Romagna"": 1,
    ""Virginia"": 3,
    ""North Holland"": 11,
    ""Dhaka Division"": 15,
    ""Hubei"": 3,
    ""Federal District"": 2,
    ""Central and Western District"": 3,
    ""\u00cele-de-France"": 2,
    ""Kowloon City"": 2,
    ""S\u00e3o Paulo"": 4,
    ""New Jersey"": 1,
    ""Pennsylvania"": 1
  },
  ""country"": {
    ""United States"": 9272,
    ""Vietnam"": 4080,
    ""Singapore"": 872,
    ""Italy"": 1,
    ""The Netherlands"": 11,
    ""Bangladesh"": 15,
    ""China"": 3,
    ""Brazil"": 6,
    ""Hong Kong"": 5,
    ""France"": 2
  },
  ""account"": {
    ""hello"": 14206,
    ""w11d1hlb"": 4,
    ""beio"": 1,
    ""yhDxyQONx"": 2,
    ""nmap"": 1,
    ""naap"": 1,
    ""a"": 1,
    ""VNqVxJteH"": 1,
    ""Pumpge"": 1,
    ""QWllyX"": 1,
    ""Domain"": 3,
    ""Administr"": 14,
    ""YtylTKlqH"": 1,
    ""UmZkNe"": 1,
    ""YFGXYc"": 1,
    ""(empty)"": 1,
    ""Administrator"": 5,
    ""Admin"": 5,
    ""User"": 5,
    ""sPjlVZCVq"": 1,
    ""IearQT"": 1,
    ""efQuBI"": 1,
    ""Test"": 6,
    ""AITPbfbpX"": 1,
    ""cLgSmB"": 1,
    ""bQqZsw"": 1
  },
  ""keyboard"": {
    ""Unknown"": 14267
  },
  ""client_build"": {
    ""Unknown"": 14267
  },
  ""client_name"": {
    ""Unknown"": 14267
  },
  ""ip_type"": {
    ""Unknown"": 13364,
    ""hosting"": 901,
    ""proxy"": 2
  }
}"
HqkrbCxb,settingsmodel.lua,PlatinKinggg,Lua,Saturday 21st of June 2025 05:57:50 PM CDT,"-- settingsmodel.lua
-- Enthält alle definierten Konfigurationswerte inkl. Typ, Bereich, Quelle usw.

return {
    RPMTarget = {
        label = ""Ziel-RPM"",
        type = ""number"",
        default = 1800,
        min = 100,
        max = 2000,
        step = 100,
        scope = ""user"",
        hint = ""Empfohlen: 1800–1950""
    },

    autoRestart = {
        label = ""Turbinen-Autostart"",
        type = ""toggle"",
        default = true,
        scope = ""user""
    },

    language = {
        label = ""Sprache"",
        type = ""number"",
        min = 1,
        max = 5,
        step = 1,
        default = 1,
        scope = ""user""
    },

    updateInterval = {
        label = ""Update-Intervall (s)"",
        type = ""number"",
        min = 1,
        max = 5,
        step = 1,
        default = 2,
        scope = ""system""
    },

    timeFormat = {
        label = ""Zeitformat"",
        type = ""number"",
        min = 1,
        max = 4,
        step = 1,
        default = 1,
        scope = ""system""
    },

    dateFormat = {
        label = ""Datumsformat"",
        type = ""number"",
        min = 1,
        max = 8,
        step = 1,
        default = 1,
        scope = ""system""
    },

    energyForceStart = {
        label = ""Start bei niedrigem Energiestand"",
        type = ""toggle"",
        default = true,
        scope = ""user""
    },

    energyForceStop = {
        label = ""Stop bei hohem Energiestand"",
        type = ""toggle"",
        default = true,
        scope = ""user""
    },

    mBPerBlade = {
        label = ""mB pro Turbinenblatt"",
        type = ""number"",
        min = 1,
        max = 100,
        step = 1,
        default = 25,
        scope = ""user""
    },

    energyStartThreshold = {
        label = ""Start-Schwellenwert (0.0–1.0)"",
        type = ""number"",
        min = 0.0,
        max = 1.0,
        step = 0.01,
        default = 0.1,
        scope = ""system""
    },

    energyStopThreshold = {
        label = ""Stop-Schwellenwert (0.0–1.0)"",
        type = ""number"",
        min = 0.0,
        max = 1.0,
        step = 0.01,
        default = 0.95,
        scope = ""system""
    },

    errorResetTime = {
        label = ""Fehlerrücksetzzeit (s)"",
        type = ""number"",
        min = 10,
        max = 600,
        step = 10,
        default = 60,
        scope = ""system""
    },

    flowEfficiencyLimit = {
        label = ""Dampfdurchfluss begrenzen"",
        type = ""toggle"",
        default = true,
        scope = ""user""
    },

    rotorMaxSpeed = {
        label = ""Maximale Rotor-Geschwindigkeit"",
        type = ""number"",
        min = 1000,
        max = 2000,
        step = 50,
        default = 1800,
        scope = ""user""
    },

    referenceMass = {
        label = ""Referenzmasse (kg)"",
        type = ""number"",
        min = 100,
        max = 2000,
        step = 50,
        default = 300,
        scope = ""system""
    },

    referenceRPMThreshold1 = {
        label = ""Induktionsspulen Schwelle"",
        type = ""number"",
        min = 50,
        max = 500,
        step = 10,
        default = 240,
        scope = ""system""
    },

    referenceRPMThreshold2 = {
        label = ""Rotor Drehzahl Angleichung I"",
        type = ""number"",
        min = 50,
        max = 500,
        step = 10,
        default = 160,
        scope = ""system""
    },

    referenceRPMThreshold3 = {
        label = ""Rotor Drehzahl Angleichung II"",
        type = ""number"",
        min = 50,
        max = 500,
        step = 10,
        default = 80,
        scope = ""system""
    }
}
"
W0xYXK4J,idk,Exotic_BloxYT,Lua,Saturday 21st of June 2025 05:21:54 PM CDT,"-- WebSocket mock
WebSocket = WebSocket or {}

WebSocket.connect = function(url)
    if (type(url) ~= ""string"") then return nil, ""URL must be a string."" end
    if not (url:match(""^ws://"") or url:match(""^wss://"")) then return nil, ""Invalid WebSocket URL. Must start with 'ws://' or 'wss://'."" end

    local host = url:gsub(""^ws://"", """"):gsub(""^wss://"", """")
    if (host == """") or host:match(""^%s*$"") then return nil, ""Invalid WebSocket URL. No host specified."" end

    return {
        Send = function(data) end,
        Close = function() end,
        OnMessage = {},
        OnClose = {}
    }
end

-- Metatable functions
local rawMetatables = {}
local originalSetMetatable = setmetatable

function setmetatable(obj, mt)
    local result = originalSetMetatable(obj, mt)
    rawMetatables[result] = mt
    return result
end

function getrawmetatable(obj)
    return rawMetatables[obj]
end

function setrawmetatable(obj, mt)
    local current = getrawmetatable(obj)
    for k, v in pairs(mt) do
        current[k] = v
    end
    return obj
end

-- Hidden property system
local hiddenProps = {}

function sethiddenproperty(obj, key, value)
    if not obj or type(key) ~= ""string"" then
        error(""Failed to set hidden property '"" .. tostring(key) .. ""' on object: "" .. tostring(obj))
    end
    hiddenProps[obj] = hiddenProps[obj] or {}
    hiddenProps[obj][key] = value
    return true
end

function gethiddenproperty(obj, key)
    if not obj or type(key) ~= ""string"" then
        error(""Failed to get hidden property '"" .. tostring(key) .. ""' from object: "" .. tostring(obj))
    end
    local val = (hiddenProps[obj] and hiddenProps[obj][key]) or nil
    return val or ((key == ""size_xml"") and 5), true
end

-- Metamethod hooking
function hookmetamethod(obj, method, func)
    assert(type(obj) == ""table"" or type(obj) == ""userdata"", ""Expected table/userdata, got "" .. type(obj))
    assert(type(method) == ""string"", ""Expected string for method"")
    assert(type(func) == ""function"", ""Expected function for replacement"")

    local mt = getrawmetatable(obj)
    local original = mt[method]
    mt[method] = func
    return original
end

-- Callback mocking
function getcallbackvalue(obj, key)
    return obj[key]
end

-- Simulated debug functions
debug = debug or {}

debug.getproto = function(func, index, asTable)
    local dummy = function() return true end
    if asTable then
        return { dummy }
    else
        return dummy
    end
end

debug.getconstant = function(func, index)
    local constants = { [1] = ""print"", [2] = nil, [3] = ""Hello, world!"" }
    return constants[index]
end

debug.getupvalues = function(func)
    local captured
    setfenv(func, { print = function(val) captured = val end })
    func()
    return { captured }
end

debug.getupvalue = function(func, index)
    local captured
    setfenv(func, { print = function(val) captured = val end })
    func()
    return captured
end

-- Table functions
table.clone = function(t)
    local copy = {}
    for k, v in pairs(t) do
        copy[k] = v
    end
    return copy
end

table.freeze = function(tbl, deep) end
function setreadonly() end
function isreadonly(t)
    assert(type(t) == ""table"", ""Expected table"")
    return true
end

-- Additional Functions
function getnamecallmethod()
    return debug.getinfo(2, ""n"").name or ""__namecall""
end

function hookfunction(original, replacement)
    assert(type(original) == ""function"", ""Expected function for original"")
    assert(type(replacement) == ""function"", ""Expected function for replacement"")
    -- In real environments, hooking logic would go here.
    return original
end

debug.setupvalue = function(func, index, value)
    local i = 1
    while true do
        local name = debug.getupvalue(func, i)
        if not name then break end
        if i == index then
            debug.setupvalue(func, i, value)
            return name
        end
        i = i + 1
    end
    return nil
end

debug.setstack = function(level, value)
    error(""Setting the call stack is not supported in standard Lua"", 2)
end

debug.setconstant = function(func, index, value)
    error(""Setting constants is not supported in standard Lua"", 2)
end

-- End of Script
"
SU3074BP,Untitled,WarPie90,Delphi,Saturday 21st of June 2025 04:57:04 PM CDT,"       // Binary integer operations
        // onoptimized generalized path for intergers
        bcADD, bcSUB, bcMUL, bcDIV, bcMOD, bcBND, bcBOR, bcXOR,
        bcEQ, bcNEQ, bcGT, bcLT, bcGTE, bcLTE:
          begin
            // Handle left operand
            case Args[0].Pos of
              mpImm:
                leftVal := Args[0].Arg;
              mpLocal:
                Move(Pointer(Stack.GetArg(Args[0].Arg))^, leftVal, XprTypeSize[Args[0].Typ]);
              mpGlobal:
                Move(Pointer(Stack.GetGlobal(Args[0].Arg))^, leftVal, XprTypeSize[Args[0].Typ]);
            end;

            // Handle right operand
            case Args[1].Pos of
              mpImm:
                rightval := Args[1].Arg;
              mpLocal:
                Move(Pointer(Stack.GetArg(Args[1].Arg))^, rightval, XprTypeSize[Args[1].Typ]);
              mpGlobal:
                Move(Pointer(Stack.GetGlobal(Args[1].Arg))^, rightval, XprTypeSize[Args[1].Typ]);
            end;

            // Perform operation
            case Code of
              bcADD: leftVal := leftVal + rightVal;
              bcSUB: leftVal := leftVal - rightVal;
              bcMUL: leftVal := leftVal * rightVal;
              bcDIV: leftVal := leftVal div rightVal;
              bcMOD: leftVal := leftVal mod rightVal;
              bcBND: leftVal := leftVal and rightVal;
              bcBOR: leftVal := leftVal or rightVal;
              bcXOR: leftVal := leftVal xor rightVal;
              bcEQ:  leftVal := Ord(leftVal = rightVal);
              bcNEQ: leftVal := Ord(leftVal <> rightVal);
              bcGT:  leftVal := Ord(leftVal > rightVal);
              bcLT:  leftVal := Ord(leftVal < rightVal);
              bcGTE: leftVal := Ord(leftVal >= rightVal);
              bcLTE: leftVal := Ord(leftVal <= rightVal);
            end;

            // Store result
            case Args[2].Pos of
              mpLocal:
                Move(leftVal, Stack.GetLocal(Args[2].Arg, SizeOf(Int64))^, XprTypeSize[Args[2].Typ]);
              mpGlobal:
                Move(leftVal, Stack.GetGlobal(Args[2].Arg)^, XprTypeSize[Args[2].Typ]);
            end;

          end;                      "
58MVtMfi,loadBlackjack,massacring,Lua,Saturday 21st of June 2025 03:43:13 PM CDT,"local function extractId(paste)
    local patterns = {
        ""^([%a%d]+)$"",
        ""^https?://pastebin.com/([%a%d]+)$"",
        ""^pastebin.com/([%a%d]+)$"",
        ""^https?://pastebin.com/raw/([%a%d]+)$"",
        ""^pastebin.com/raw/([%a%d]+)$"",
    }

    for i = 1, #patterns do
        local code = paste:match(patterns[i])
        if code then return code end
    end

    return nil
end

local function getPastebin(url)
    local paste = extractId(url)
    if not paste then
        io.stderr:write(""Invalid pastebin code.\n"")
        io.write(""The code is the ID at the end of the pastebin.com URL.\n"")
        return
    end

    write(""Connecting to pastebin.com... "")
    -- Add a cache buster so that spam protection is re-checked
    local cacheBuster = (""%x""):format(math.random(0, 2 ^ 30))
    local response, err = http.get(
        ""https://pastebin.com/raw/"" .. textutils.urlEncode(paste) .. ""?cb="" .. cacheBuster
    )

    if response then
        -- If spam protection is activated, we get redirected to /paste with Content-Type: text/html
        local headers = response.getResponseHeaders()
        if not headers[""Content-Type""] or not headers[""Content-Type""]:find(""^text/plain"") then
            io.stderr:write(""Failed.\n"")
            print(""Pastebin blocked the download due to spam protection. Please complete the captcha in a web browser: https://pastebin.com/"" .. textutils.urlEncode(paste))
            return
        end

        print(""Success."")

        local sResponse = response.readAll()
        response.close()
        return sResponse
    else
        io.stderr:write(""Failed.\n"")
        print(err)
    end
end

local function loadFile(id, name)
    sleep(0.3)
    local sPath = shell.resolve(name)
    local res = getPastebin(id)
    if res then
        local file = fs.open(sPath, ""w"")
        file.write(res)
        file.close()

        print(""Downloaded as "" .. name)
    end
end

do
    loadFile(""kJWDtaae"", ""startup.lua"")
    loadFile(""fgnWynLu"", ""Card.lua"")
    loadFile(""q4k9LhnL"", ""Button.lua"")
    loadFile(""FtwdiZG4"", ""Images.lua"")
    loadFile(""zCCPpeN9"", ""Commons.lua"")
    loadFile(""1WSLaQf0"", ""Credit.lua"")
    loadFile(""D4UfhDvX"", ""cashout.lua"")
    loadFile(""8LtZifjM"", ""Hand.lua"")
    os.reboot()
end
"
kJWDtaae,startup,massacring,Lua,Saturday 21st of June 2025 03:41:05 PM CDT,"local Commons = require(""Commons"")
local Card = require(""Card"")
local Hand = require(""Hand"")
local Button = require(""Button"")
local cashout = require('cashout')
local monitor = peripheral.find(""monitor"")
local input = peripheral.find(""minecraft:hopper"")
local storage = peripheral.find(""minecraft:chest"")
local modem = peripheral.wrap(""bottom"")
local printer = peripheral.find(""printer"")
if printer.getInkLevel() == 0 and printer.getPaperLevel() == 0 then
  error(""Cannot start a new page. Do you have ink and paper?"")
end

-- Declares my own colors
local m_colors = {
    white = colors.white,
    black = colors.orange,
    gray = colors.magenta,
    lightGray = colors.lightBlue,
    darkRed = colors.yellow,
    red = colors.lime,
    lightRed = colors.pink,
    green = colors.gray,
    lightGreen = colors.lightGray,
    darkYellow = colors.cyan,
    yellow = colors.purple,
}

local window = window.create(monitor, 1, 1, 80, 38)

-- Changes the default palette
window.setPaletteColor(colors.orange, 0x191919) -- Black
window.setPaletteColor(colors.magenta, 0x262626) -- Gray
window.setPaletteColor(colors.lightBlue, 0x565656) -- Light Gray
window.setPaletteColor(colors.yellow, 0xDD2F00) -- Dark Red
window.setPaletteColor(colors.lime, 0xEF4A21) -- Red
window.setPaletteColor(colors.pink, 0xFFBAAA) -- Light Red
window.setPaletteColor(colors.gray, 0x355E19) -- Green
window.setPaletteColor(colors.lightGray, 0x356D19) -- Light Green
window.setPaletteColor(colors.cyan, 0xEAB327) -- Dark Yellow
window.setPaletteColor(colors.purple, 0xEDC125) -- Yellow
window.setPaletteColor(colors.blue, 0xE8C958) -- 
window.setPaletteColor(colors.brown, 0xE8C958) -- 
window.setPaletteColor(colors.green, 0xE8C958) -- 
window.setPaletteColor(colors.red, 0xE8C958) -- 
window.setPaletteColor(colors.black, 0xE8C958) -- 

monitor.setTextScale(0.5)

local width, height = window.getSize()

local playerHand = Hand.new(false)
local dealerHand = Hand.new(false)

local startButton = {}
local gameButtons = {}
local gameStarted = false
local multiplier = 2

local function clearSide(up)
    local oldTerm = term.redirect(window)
    local start,limit
    if up then
        start = 2
        limit = height/2-3
    else
        start = height/2+3
        limit = height
    end
    for x=1,width,1 do
        for y=start,limit,1 do
            if (y % 2 == 1) then
                term.setBackgroundColor(m_colors.green)
            else
                term.setBackgroundColor(m_colors.lightGreen)
            end
            term.setCursorPos(x,y)
            term.write("" "")
        end
    end
    term.redirect(oldTerm)
end

local function setupDealer(first)
    clearSide(true)
    dealerHand:draw(window, width, 2, first)
end

local function setupPlayer()
    clearSide(false)

    playerHand:draw(window, width, height-16)
end

local function gameWin()
    Card.drawWin(window, math.floor(width/2), math.floor(height/2))
    Commons.Score.updateScore(Commons.Score.getScore() * multiplier)
    cashout()
    sleep(3)
    os.reboot()
end

local function gameLose()
    Card.drawBust(window, math.floor(width/2), math.floor(height/2))
    sleep(3)
    os.reboot()
end

local function gameDraw()
    Card.drawDraw(window, math.floor(width/2), math.floor(height/2))
    cashout()
    sleep(3)
    os.reboot()
end

local function compareHands()
    local playerValue = playerHand:evaluateHand()
    local dealerValue = dealerHand:evaluateHand()
    if playerValue > dealerValue then
        gameWin()
    elseif playerValue < dealerValue then
        gameLose()
    else
        gameDraw()
    end
end

local function dealerPlay()
    setupDealer()
    local eval = dealerHand:evaluateHand()
    sleep(0.5)
    if eval == 0 then
        gameWin()
    elseif eval >= 17 then
        compareHands()
    end
    sleep(0.5)
    while true do
        dealerHand:addCard(Card.newRandom(false))
        setupDealer()
        local eval = dealerHand:evaluateHand()
        sleep(0.5)
        if eval == 0 then
            gameWin()
        elseif eval >= 17 then
            compareHands()
        end
        sleep(0.5)
    end
end

local function stand()
    dealerPlay()
end

local function hit()
    playerHand:addCard(Card.newRandom(false))
    setupPlayer()
    local eval = playerHand:evaluateHand()
    sleep(0.5)
    if eval == 0 then
        gameLose()
    end
end

local function double()
    multiplier = multiplier * 2
    hit()
    stand()
end

local function surrender()
    Commons.Score.updateScore(math.floor(Commons.Score.getScore()/2))
    gameDraw()
end

local function createButtons()
    local labelMap = {
        [""Hit""] = hit,
        [""Stand""] = stand,
        --[""Double Down""] = double,
        [""Surrender""] = surrender
    }
    local labels = {
        ""Hit"",
        ""Stand"",
        --""Double Down"",
        ""Surrender""
    }
    local totalLength = 0
    for _, label in ipairs(labels) do
        totalLength = totalLength + #label + 3
    end
    local startX = math.floor(width / 2) - math.floor(totalLength / 2)
    local x = startX
    local y = math.floor(height / 2 - 1)
    for _, label in ipairs(labels) do
        local button = Button.new(label, labelMap[label], x, y, #label, 1, 0, m_colors.red, m_colors.darkRed, m_colors.white)
        table.insert(gameButtons, button)
        x = x + #label + 3
    end
end

local function drawButtons()
    for _, button in ipairs(gameButtons) do
        button:displayOnScreen(window, Commons.Paint.drawSquare, Commons.Paint.write)
    end
end

local function start()
    if Commons.Credits.selectedCredit == nil then return end
    gameStarted = true
    startButton:disable()
    Commons.Paint.clear(window, width, height, m_colors.green, m_colors.lightGreen)
    Commons.Credits.drawCredit(window, 1, 1, m_colors.white, m_colors.red)
    Commons.Score.drawScore(window, 2, height/2 - 2, m_colors.white, m_colors.yellow, m_colors.white, m_colors.lightGray)
    setupDealer(true)
    setupPlayer()
    createButtons()
    drawButtons()
end

local function createStartButton()
    local label = ""Start Game!""
    local x = math.floor(width / 2 - 1) - math.floor(#label / 2 + 1)
    local y = math.floor(height / 2 - 1) - 1
    startButton = Button.new(label, start, x, y, #label, 1, 1, m_colors.darkRed, m_colors.red, m_colors.white)
    startButton:displayOnScreen(window, Commons.Paint.drawSquare, Commons.Paint.write)
end

local function countCredits()
    local shouldThrow = false
    for i = 1,input.size(),1 do
        local item = input.getItemDetail(i)
        if item ~= nil
            and Commons.Credits.validCurrency(item.name)
            and (Commons.Credits.selectedCredit == nil or Commons.Credits.selectedCredit == Commons.Credits.getName(item.name))
        then
            if Commons.Credits.selectedCredit == nil then
                Commons.Credits.selectedCredit = Commons.Credits.getName(item.name)
                Commons.Credits.drawCredit(window, 1, 1, m_colors.white, m_colors.red)
            end
            local count = item.count
            local value = Commons.Credits.getValueByName(item.name)
            for _ = 1, count, 1 do
                local newValue = Commons.Score.getScore() + value
                if (newValue > Commons.Score.max) then
                    input.pushItems(modem.getNameLocal(), i, 1)
                    shouldThrow = true
                else
                    Commons.Score.updateScore(newValue)
                    Commons.Score.drawScore(window, width / 2, 3, m_colors.white, m_colors.yellow, m_colors.white, m_colors.lightGray, true)
                    input.pushItems(peripheral.getName(storage), i, 1)
                end
            end
        elseif item ~= nil then
            input.pushItems(modem.getNameLocal(), i)
            shouldThrow = true
        end
    end
    if shouldThrow then
        for i = 1,16,1 do
            turtle.select(i)
            turtle.drop()
        end
        turtle.select(1)
    end
end

local function drawScreen()
    Commons.Paint.clear(window, width, height, m_colors.green, m_colors.lightGreen)
    Commons.Score.drawScore(window, width / 2, 3, m_colors.white, m_colors.yellow, m_colors.white, m_colors.lightGray, true)
    createStartButton()
end

local function tick()
    while true do
        if (not gameStarted) then countCredits() end
        sleep(0.05)
    end
end

local function events()
    sleep(0.5)
    while true do
        local eventData = {os.pullEvent()}
        local event = eventData[1]
        if event == ""key_up"" and eventData[2] == keys.q then
            return
        elseif event == ""monitor_touch"" then
            local x, y = eventData[3], eventData[4]
            if not gameStarted and startButton:collides(x, y) then
                startButton.clickEvent()
            elseif gameStarted then
                for _, button in pairs(gameButtons) do
                    if button:collides(x, y) then
                        button.clickEvent()
                    end
                end
            end
            sleep(0.1)
        end
    end
end

local function runGame()
    while true do
        drawScreen()
        parallel.waitForAny(tick, events)
    end
end

runGame()"
FtwdiZG4,Images,massacring,Lua,Saturday 21st of June 2025 03:40:50 PM CDT,"local Images = {}
Images.__index = Images
Images.num1 = paintutils.parseImage([[
 32
  2
  2
  1
 211
]])
Images.num2 = paintutils.parseImage([[
 32
3  1
  2
 2
2111
]])
Images.num3 = paintutils.parseImage([[
 32
3  2
  1
2  1
 21
]])
Images.num4 = paintutils.parseImage([[
3  2
3  1
2211
   1
   1
]])
Images.num5 = paintutils.parseImage([[
3322
2
 211
   1
211
]])
Images.num6 = paintutils.parseImage([[
 322
3
221
2  1
 11
]])
Images.num7 = paintutils.parseImage([[
3322
   1
  1
 1
2
]])
Images.num8 = paintutils.parseImage([[
 32
3  1
 21
2  1
 11
]])
Images.num9 = paintutils.parseImage([[
 32
3  1
 211
   1
211
]])
Images.num0 = paintutils.parseImage([[
 32
3  1
2  1
2  1
 11
]])
Images.jack = paintutils.parseImage([[
332
   2
   1
2  1
 21
]])
Images.queen = paintutils.parseImage([[
 32
3  2
2  1
2 1
 1 1
]])
Images.king = paintutils.parseImage([[
3  1
3 2
22
2 1
2  1
]])
Images.ace = paintutils.parseImage([[
 32
3  1
2211
2  1
2  1
]])
Images.joker = paintutils.parseImage([[
  649
  5aa9
    a9 9
  a9aaaa95
 5aaaaaa456
654aaaa9 4
 4  9999
    2211
]])
Images.spade = paintutils.parseImage([[
  2
 231
23211
  1
 211
]])
Images.heart = paintutils.parseImage([[
 5 4
56544
55544
 544
  4
]])
Images.club = paintutils.parseImage([[
 222
23211
22111
  1
 211
]])
Images.diamond = paintutils.parseImage([[
  5
 564
56544
 544
  4
]])
Images.bust = paintutils.parseImage([[
 32222  3     2   3222   32221
3     2 3     2  3    1 3  2  1
2     2 2     2 2          2
2    2  2     2  2         2
22222   2     1   222      2
2    1  2     1      1     2
2     1  2   1        1    1
2     1  2   1  2    1     1
 21111    211    2211     211
]])
Images.win = paintutils.parseImage([[
 3   2   3221 3    2
3     2 3 2   32    2
2     2   2   2 2   2
2     1   2   2 2   1
 2   1    2   2  2  1
 2 2 1    1   2   2 1
 2 2 1    1   2   1 1
  2 1     1 1 2    11
  2 1   2111   2    1
]])
Images.draw = paintutils.parseImage([[
 3222   32222     322    3   2
3    2  3    2   3   2  3     2
2     2 2     2 2     1 2     2
2     1 2     1 2     1 2     1
2     1 2    1  2222211  2   1
2     1 22221   2     1  2 2 1
2     1 2    1  2     1  2 2 1
2    1  2     1 2     1   2 1
 2211   2     1 2     1   2 1
]])

local cardLength = 13
local cardHeight = 13

function Images:drawJoker(window, x, y)
    local oldTerm = term.redirect(window)
    local borderColor = 2
    local background = 1

    term.setCursorPos(x+1, y)
    term.setBackgroundColor(borderColor)
    term.write(string.rep("" "", cardLength))

    for i=1, cardHeight, 1 do
        term.setCursorPos(x, y+i)
        term.setBackgroundColor(borderColor)
        term.write("" "")

        term.setCursorPos(x+1, y+i)
        term.setBackgroundColor(background)
        term.write(string.rep("" "", cardLength))

        term.setCursorPos(x+1+cardLength, y+i)
        term.setBackgroundColor(borderColor)
        term.write("" "")
    end

    term.setCursorPos(x+1, y+1+cardHeight)
    term.setBackgroundColor(borderColor)
    term.write(string.rep("" "", cardLength))

    term.setBackgroundColor(borderColor)
    for i=1,cardHeight,(cardHeight-1) do
        term.setCursorPos(x+1, y+i)
        term.write("" "")
        term.setCursorPos(x+cardLength, y+i)
        term.write("" "")
    end

    paintutils.drawImage(Images.joker, x+2, y+3)
    term.redirect(oldTerm)
end

function Images:drawCard(window, x, y, num, suit)
    local oldTerm = term.redirect(window)
    local borderColor = 2
    local numBackground = 1
    local suitBackgroundPrimary
    local suitBackgroundSecondary
    local suitImg

    if suit == ""spade"" or suit == ""club"" then
        suitBackgroundPrimary = 32
        suitBackgroundSecondary = 16
    elseif suit == ""heart"" or suit == ""diamond"" then
        suitBackgroundPrimary = 8
        suitBackgroundSecondary = 4
    end

    if suit == ""spade"" then
        suitImg = Images.spade
    elseif suit == ""heart"" then
        suitImg = Images.heart
    elseif suit == ""club"" then
        suitImg = Images.club
    elseif suit == ""diamond"" then
        suitImg = Images.diamond
    end

    term.setCursorPos(x+1, y)
    term.setBackgroundColor(borderColor)
    term.write(string.rep("" "", cardLength))

    for i=1, cardHeight, 1 do
        term.setCursorPos(x, y+i)
        term.setBackgroundColor(borderColor)
        term.write("" "")

        for j=1, cardLength, 1 do
            term.setCursorPos(x+j, y+i)
            local diagonal_forward = j + i <= math.floor((cardLength + cardHeight) / 2)+1
            local diagonal_backward = j - i >= 1
            if (i == j) then
                term.setBackgroundColor(borderColor)
            elseif (diagonal_backward) then
                if (diagonal_forward) then
                    term.setBackgroundColor(suitBackgroundPrimary)
                else
                    term.setBackgroundColor(suitBackgroundSecondary)
                end
            else
                term.setBackgroundColor(numBackground)
            end
            term.write("" "")
        end

        term.setCursorPos(x+1+cardLength, y+i)
        term.setBackgroundColor(borderColor)
        term.write("" "")
    end

    term.setCursorPos(x+1, y+1+cardHeight)
    term.setBackgroundColor(borderColor)
    term.write(string.rep("" "", cardLength))

    term.setBackgroundColor(borderColor)
    for i=1,cardHeight,(cardHeight-1) do
        term.setCursorPos(x+1, y+i)
        term.write("" "")
        term.setCursorPos(x+cardLength, y+i)
        term.write("" "")
    end

    paintutils.drawImage(suitImg, x+cardLength-5, y+2)
    paintutils.drawImage(num, x+2, y+cardHeight-5)
    term.redirect(oldTerm)
end

function Images:drawFaceDown(window, x, y)
    local oldTerm = term.redirect(window)
    local borderColor = 1
    local primaryColor = 32
    local secondaryColor = 16

    term.setCursorPos(x+1, y)
    term.setBackgroundColor(borderColor)
    term.write(string.rep("" "", cardLength))

    for i=1, cardHeight, 1 do
        term.setCursorPos(x, y+i)
        term.setBackgroundColor(borderColor)
        term.write("" "")

        for j=1, cardLength, 1 do
            if (i + j) % 2 == 1 then
                term.setBackgroundColor(primaryColor)
            else
                term.setBackgroundColor(secondaryColor)
            end
            term.setCursorPos(x+j, y+i)
            term.write("" "")
        end

        term.setCursorPos(x+1+cardLength, y+i)
        term.setBackgroundColor(borderColor)
        term.write("" "")
    end

    term.setCursorPos(x+1, y+1+cardHeight)
    term.setBackgroundColor(borderColor)
    term.write(string.rep("" "", cardLength))

    term.setBackgroundColor(borderColor)
    for i=1,cardHeight,(cardHeight-1) do
        term.setCursorPos(x+1, y+i)
        term.write("" "")
        term.setCursorPos(x+cardLength, y+i)
        term.write("" "")
    end

    term.redirect(oldTerm)
end

function Images:drawBust(window, x, y)
    local oldTerm = term.redirect(window)
    local length = 34
    local height = 13
    x = x - math.floor(length/2)
    y = y - math.floor(height/2)
    for i=1,height,1 do
        if i == 1 or i == height then
            term.setBackgroundColor(2)
        elseif (i > 6) then
            term.setBackgroundColor(512)
        else
            term.setBackgroundColor(1024)
        end
        term.setCursorPos(x, y+i-1)
        term.write(string.rep("" "", length))

        term.setBackgroundColor(2)
        term.setCursorPos(x, y+i-1)
        term.write("" "")
        term.setCursorPos(x + length, y+i-1)
        term.write("" "")
    end

    paintutils.drawImage(Images.bust, x+2, y+2)

    term.redirect(oldTerm)
end

function Images:drawWin(window, x, y)
    local oldTerm = term.redirect(window)
    local length = 24
    local height = 13
    x = x - math.floor(length/2)
    y = y - math.floor(height/2)
    for i=1,height,1 do
        if i == 1 or i == height then
            term.setBackgroundColor(2)
        elseif (i > 6) then
            term.setBackgroundColor(512)
        else
            term.setBackgroundColor(1024)
        end
        term.setCursorPos(x, y+i-1)
        term.write(string.rep("" "", length))

        term.setBackgroundColor(2)
        term.setCursorPos(x, y+i-1)
        term.write("" "")
        term.setCursorPos(x + length, y+i-1)
        term.write("" "")
    end

    paintutils.drawImage(Images.win, x+2, y+2)

    term.redirect(oldTerm)
end

function Images:drawDraw(window, x, y)
    local oldTerm = term.redirect(window)
    local length = 34
    local height = 13
    x = x - math.floor(length/2)
    y = y - math.floor(height/2)
    for i=1,height,1 do
        if i == 1 or i == height then
            term.setBackgroundColor(2)
        elseif (i > 6) then
            term.setBackgroundColor(512)
        else
            term.setBackgroundColor(1024)
        end
        term.setCursorPos(x, y+i-1)
        term.write(string.rep("" "", length))

        term.setBackgroundColor(2)
        term.setCursorPos(x, y+i-1)
        term.write("" "")
        term.setCursorPos(x + length, y+i-1)
        term.write("" "")
    end

    paintutils.drawImage(Images.draw, x+2, y+2)

    term.redirect(oldTerm)
end

return Images"
zCCPpeN9,Commons,massacring,Lua,Saturday 21st of June 2025 03:40:04 PM CDT,"local Credit = require('Credit')

local Paint = {}
Paint.primaryBackgroundColor = 128
Paint.secondaryBackgroundColor = 256
Paint.defaultTextColor = 1

function Paint.drawSquare(window, x, y, span, length, color)
    local oldTerm = term.redirect(window)
    term.setCursorPos(x,y)
    term.setBackgroundColor(color)
    for row = 1, length, 1 do
        term.setCursorPos(x,y+row-1)
        term.write(string.rep("" "", span))
    end
    term.redirect(oldTerm)
end

function Paint.write(window, text, x, y, textColor, backGroundColor)
    local oldTerm = term.redirect(window)
    if backGroundColor == nil then
        if y % 2 == 1 then
            backGroundColor = Paint.primaryBackgroundColor
        else
            backGroundColor = Paint.secondaryBackgroundColor
        end
    end
    textColor = textColor or Paint.defaultTextColor
    term.setCursorPos(x,y)
    term.setBackgroundColor(backGroundColor)
    term.setTextColor(textColor)
    term.write(text)
    term.redirect(oldTerm)
end

function Paint.clear(window, width, height, primaryColor, secondaryColor)
    local oldTerm = term.redirect(window)
    for x=1,width,1 do
        for y=1,height,1 do
            if (y % 2 == 1) then
                term.setBackgroundColor(primaryColor)
            else
                term.setBackgroundColor(secondaryColor)
            end
            term.setCursorPos(x,y)
            term.write("" "")
        end
    end
    term.redirect(oldTerm)
end

local Credits = {}
Credits.SMALL = 1
Credits.MEDIUM = 2
Credits.LARGE = 3
Credits.credits = {
    --[""emeralds""] = Credit.new(""emeralds""),
    [""iron""] = Credit.new(""iron"", {
        [Credits.LARGE] = { ['id'] = 'minecraft:iron_block', ['multiplier'] = 9 },
        [Credits.MEDIUM] = { ['id'] = 'minecraft:iron_ingot', ['multiplier'] = 9 },
        [Credits.SMALL] = { ['id'] = 'minecraft:iron_nugget' },
    }),
}
Credits.selectedCredit = nil

function Credits.validCurrency(name)
    for _,credit in pairs(Credits.credits) do
        for _,data in pairs(credit.values) do
            if (name == data[""id""]) then return true end
        end
    end
    return false
end

function Credits.getValueByName(name)
    for _,credit in pairs(Credits.credits) do
        for size,data in pairs(credit.values) do
            if (name == data[""id""]) then
                local multiplier = data[""multiplier""] or 1
                return multiplier ^ (size-1)
            end
        end
    end
end

function Credits.getValueBySize(size)
    if Credits.selectedCredit == nil then return nil end
    if type(size) ~= ""number"" then return nil end
    if size < 1 or size > 3 then return nil end
    local multiplier = Credits.credits[Credits.selectedCredit].values[size][""multiplier""]
    return multiplier ^ (size-1)
end

function Credits.getSizeByName(name)
    for _,credit in pairs(Credits.credits) do
        for size,data in pairs(credit.values) do
            if (name == data[""id""]) then return size end
        end
    end
end

function Credits.getName(itemName)
    for name,credit in pairs(Credits.credits) do
        for _,data in pairs(credit.values) do
            if (itemName == data[""id""]) then return name end
        end
    end
end

function Credits.getCurrentId(size)
    if Credits.selectedCredit == nil then return nil end
    if type(size) ~= ""number"" then return nil end
    if size < 1 or size > 3 then return nil end
    return Credits.credits[Credits.selectedCredit].values[size][""id""]
end

function Credits.drawCredit(window, x, y, textColor, backGroundColor)
    local label = ""Credit Type: "" .. Credits.selectedCredit

    Paint.write(window, label, x, y, textColor, backGroundColor)
end

local Score = {}
Score.value = 0
Score.max = 10000
Score.min = 4

function Score.updateScore(num)
    print(""Updating score: "" .. tostring(num))
    Score.value = num
end

function Score.getScore()
    print(""Score is: "" .. tostring(Score.value))
    return Score.value
end

function Score.drawScore(window, x, y, primaryTextColor, primaryBackgroundColor, secondaryTextColor, secondaryBackgroundColor, offset)
    local scoreTitle = ""Score:""
    local scoreText = tostring(Score.value)
    local scoreTextLen = string.len(scoreText) + 2
    if scoreTextLen < 13 then scoreTextLen = 13 end
    if offset then x = x - math.floor(scoreTextLen / 2) end

    Paint.write(window, scoreTitle, x+1, y, secondaryTextColor, secondaryBackgroundColor)
    Paint.drawSquare(window, x, y+1, scoreTextLen, 3, primaryBackgroundColor)
    Paint.write(window, scoreText, x+1, y+2, primaryTextColor, primaryBackgroundColor)
end

return { Paint = Paint, Credits = Credits, Score = Score }"
D4UfhDvX,cashout,massacring,Lua,Saturday 21st of June 2025 03:39:51 PM CDT,"local Commons = require('Commons')
local storage = peripheral.find(""minecraft:chest"")
local modem = peripheral.wrap(""bottom"")
local printer = peripheral.find(""printer"")
local barrel = peripheral.find(""minecraft:barrel"")

local IOUActive = false

local function getItemIndex(id)
    for i = 1, storage.size(), 1 do
        local item = storage.getItemDetail(i)
        if item then
            if item.name == id then return i end
        end
    end
    print(""Item '"" .. id .. ""' not found."")
    return 0
end

local function clearTurtle()
    for i = 1, 16, 1 do
        storage.pullItems(modem.getNameLocal(), i)
    end
end

local function getKey()
    local characters = ""12345678901234567890!#%&/=?+@$!#%&/=?+@$!#%&/=?+@$abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ""
    local ranSeq = """"
    for _ = 1, 16, 1 do
        local random = math.random(1, #characters)
        ranSeq = ranSeq .. characters:sub(random,random)
    end
    return ranSeq
end

local function writeReceipt(key)
    local file = fs.open(""receipts"", ""a"")
    file.write(""[\"""" .. key .. ""\""]:\n"")
    file.write(""    \""type\"": \"""" .. Commons.Credits.selectedCredit .. ""\""\n"")
    file.write(""    \""score\"": "" .. tostring(Commons.Score.getScore()) .. ""\n"")
    file.close()
end

local function generateIOU(key)
    IOUActive = true
    clearTurtle()
    printer.newPage()
    printer.setPageTitle(""I.O.U -Mass"")
    printer.write(""The machine ran out of"")
    printer.setCursorPos(1,2)
    printer.write(""some resource."")
    printer.setCursorPos(1,3)
    printer.write(""This receipt will hold"")
    printer.setCursorPos(1,4)
    printer.write(""yor earnings."")
    printer.setCursorPos(1,6)
    printer.write(""Credit Type: "" .. Commons.Credits.selectedCredit)
    printer.setCursorPos(1,7)
    printer.write(""Credit Score: "" .. Commons.Score.getScore())
    printer.setCursorPos(1,8)
    printer.write(""Key: "" .. key .. ""-"")
    printer.setCursorPos(1,9)
    printer.write(""Please do not show this"")
    printer.setCursorPos(1,10)
    printer.write(""key to another player."")
    printer.endPage()
end

local function getIndex(id)
    local index = getItemIndex(id)
    local success = index ~= 0
    if not success then
    local key = getKey()
        generateIOU(key)
        writeReceipt(key)
        barrel.pullItems(peripheral.getName(printer), 8)
        barrel.pushItems(modem.getNameLocal(), 1)
        return 0
    end
    return index
end

local function countCoins()
    local largeValue = Commons.Credits.getValueBySize(Commons.Credits.LARGE) or math.maxinteger
    local mediumValue = Commons.Credits.getValueBySize(Commons.Credits.MEDIUM)
    while Commons.Score.getScore() >= largeValue do
        local largeIndex = getIndex(Commons.Credits.getCurrentId(Commons.Credits.LARGE))
        if IOUActive then goto skip end
        storage.pushItems(modem.getNameLocal(), largeIndex, 1)
        Commons.Score.updateScore(Commons.Score.getScore() - largeValue)
    end
    while Commons.Score.getScore() >= mediumValue do
        local mediumIndex = getIndex(Commons.Credits.getCurrentId(Commons.Credits.MEDIUM))
        if IOUActive then goto skip end
        storage.pushItems(modem.getNameLocal(), mediumIndex, 1)
        Commons.Score.updateScore(Commons.Score.getScore() - mediumValue)
    end
    while Commons.Score.getScore() > 0 do
        local smallIndex = getIndex(Commons.Credits.getCurrentId(Commons.Credits.SMALL))
        if IOUActive then goto skip end
        storage.pushItems(modem.getNameLocal(), smallIndex, 1)
        Commons.Score.updateScore(Commons.Score.getScore() - 1)
    end
    ::skip::
    for i = 1,16,1 do
        turtle.select(i)
        turtle.drop()
    end
    turtle.select(1)
end

return countCoins"
fgnWynLu,Card,massacring,Lua,Saturday 21st of June 2025 03:39:34 PM CDT,"local Images = require(""Images"")

local Card = {}
Card.__index = Card
Card.suits = {
    ""spade"",
    ""heart"",
    ""club"",
    ""diamond""
}
Card.numbers = {
    Images.num1,
    Images.num2,
    Images.num3,
    Images.num4,
    Images.num5,
    Images.num6,
    Images.num7,
    Images.num8,
    Images.num9
}
Card.courts = {
    Images.jack,
    Images.queen,
    Images.king,
    Images.ace,
}

function Card.new(value, suit)
    local card = setmetatable({}, Card)
    if value == 14 then
        card.isJoker = true
        return card
    elseif value < 10 and value > 0 then
        card.num = Card.numbers[value]
        card.isCourt = true
        card.value = value
    elseif value < 13 and value > 9 then
        card.num = Card.courts[value-9]
        card.isNumber = true
        card.value = 10
    else
        card.num = Images.ace
        card.isAce = true
        card.value = 11
    end
    card.suit = suit
    return card
end

function Card.newRandom(includeJoker)
    local card = setmetatable({}, Card)
    local joker = false
    if includeJoker then
        joker = math.random(1,27) == 1
    end
    if joker then
        card.isJoker = true
        return card
    end
    card.suit = Card.suits[math.random(1,4)]
    local value = math.random(2,13)
    if value < 10 then
        card.num = Card.numbers[value]
        card.isNumber = true
        card.value = value
    elseif value < 13 then
        card.num = Card.courts[value-9]
        card.isCourt = true
        card.value = 10
    else
        card.num = Images.ace
        card.isAce = true
        card.value = 11
    end
    return card
end

function Card.drawWin(window, x, y)
    Images:drawWin(window, x, y)
end

function Card.drawBust(window, x, y)
    Images:drawBust(window, x, y)
end

function Card.drawDraw(window, x, y)
    Images:drawDraw(window, x, y)
end

function Card:draw(window, x, y)
    if self.isJoker then
        Images:drawJoker(window, x,y)
        return
    end
    Images:drawCard(window, x,y, self.num, self.suit)
end

function Card:drawFaceDown(window, x, y)
    Images:drawFaceDown(window, x, y)
end

return Card"
q4k9LhnL,Button,massacring,Lua,Saturday 21st of June 2025 03:39:15 PM CDT,"local Button = {}
Button.__index = Button

function Button.new(label, clickEvent, x, y, width, height, labelPad, backgroundColorNormal, borderColor, textColorNormal)
    local button = setmetatable({}, Button)
    button.isActive = false
    button.clickEvent = clickEvent or function() print(""Click!"") end
    button.x = x or 1
    button.y = y or 1
    button.width = width or 3
    button.height = height or 3
    button.isPressed = false
    button.backgroundColorCurrent = backgroundColorNormal or colors.black
    button.backgroundColorNormal = backgroundColorNormal or colors.black
    button.borderColor = borderColor
    button.label = label or ""Press""
    button.labelPad = labelPad or 0
    button.textColorCurrent = textColorNormal or colors.lightGray
    button.textColorNormal = textColorNormal or colors.lightGray

    button.width = button.width + (button.labelPad * 2)
    button.height = button.height + (button.labelPad * 2)
    if button.borderColor then
        button.width = button.width + 2
        button.height = button.height + 2
    end

    return button
end

function Button:displayOnScreen(window, drawSquare, write)
    local x_offset, y_offset = self.labelPad, self.labelPad

    if self.borderColor then
        x_offset = x_offset + 1
        y_offset = y_offset + 1
        drawSquare(window, self.x, self.y, self.width, self.height, self.borderColor)
    end

    drawSquare(window, self.x+1, self.y+1, self.width-2, self.height-2, self.backgroundColorCurrent)

    write(window, self.label, self.x + x_offset, self.y + y_offset, self.textColorCurrent, self.backgroundColorCurrent)

    self.isActive = true
end

function Button:disable()
    self.isActive = false
end

function Button:collides(x, y)
    return ((x >= self.x) and (x < (self.x + self.width))) and ((y >= self.y) and (y < (self.y + self.height))) and self.isActive
end

return Button
"
Xu7krxyY,Key,k2green,Lua,Saturday 21st of June 2025 02:50:52 PM CDT,"local args = { ... }

if not fs.exists(""aes.lua"") then
    shell.run(""wget"", ""https://gist.githubusercontent.com/LolloDev5123/9409c11864934a7f08c7a7d65295ddad/raw/5b93d8ed7156ad81b21abda1d1fba4a34a5730c9/AES.lua"", ""aes.lua"")
end

if not fs.exists(""encode.lua"") then
    shell.run(""pastebin"", ""get"", ""ksk0HmaJ"", ""encode.lua"")
end

local aes = require(""aes"")
local encode = require(""encode"")

local function encode(bytes)
    return string.char(table.unpack(bytes))
end

local function findDisk()
    local periphs = peripheral.getNames()
    for k,v in ipairs(periphs) do
        local type = peripheral.getType(v)
        if type == ""drive"" then
            return true, v
        end
    end

    return false
end

local function run()
    if args[1] == ""create"" then
        local diskFound, name = findDisk()
        if not diskFound then
            print(""A disk drive must be attached to use this feature"")
            return
        end

        if not disk.isPresent(name) then
            print(""A disk must be inserted into the disk drive"")
            return
        end

        disk.setLabel(name, ""Encryption Key"")

        local mountPath = disk.getMountPath(name)
        local key = aes.GenerateRandomKey()
        local encoded = encode(key)

        local file = fs.open(mountPath .. ""/key.txt"", ""w"")
        file.write(encoded)
        file.close()

        print(""Created key on disk"")
    end
end

run()"
ksk0HmaJ,Encode,k2green,Lua,Saturday 21st of June 2025 02:48:09 PM CDT,"local lib = {}

function lib.decode(str)
    local bytes = {}
    for i = 1, #str do
        bytes[i] = string.byte(str, i)
    end

    return bytes
end

function lib.tablesEqual(a, b)
    if #a ~= #b then
        return false
    end

    for i = 1, #a do
        if a[i] ~= b[i] then
            return false
        end
    end

    return true
end

return lib"
3YhzCHFe,jst BH04B-XASK (LF)(SN),j0h,C,Saturday 21st of June 2025 02:39:15 PM CDT,"pin_count = 4;
pin_length = 17;        


module header(pin_count=4, pin_length=17) {
body_width = 2.5;       
pin_pitch = 2.54;       
pin_diameter = 0.64;   

    for (i = [0 : pin_count - 1]) {
        translate([body_width / 2, i * pin_pitch, 0])
//        color(""silver"")
        cylinder(h = pin_length, d = pin_diameter, $fn = 6);
    }
}

module con(){ 
// conector interface
difference(){
// front face connector groove interior
translate([17,0,0])
cube([5.5,1.23,4.8]);
// front face connector groove
translate([17.1,0,0])
cube([5.3,1.1,4.8]);

}
}
//con();
color([0.96, 0.96, 0.86]);  // RGB values for beige
width  = 12.5;
depth  = 6.4;
height = 17;
module body(){
difference(){

difference(){

difference(){
difference(){
difference(){
difference(){
difference(){

cube([width, depth, height]);

// front slice:
cube([width,1,9]);
}
// inner front slice n rear slice
translate([1.6,1,0])
cube([9,1,9.75]);
}

// rear slice
translate([1.6,4.4,0])
cube([9,2,9.75]);
}

// hole1: connector cavity
xc=10.75;
yc=5.4;
zc=7.2;
elv=height-zc;
translate([0.8,0.5,elv])
cube([xc,yc,zc]);
}

// hole 2  central cut
translate([0,0,14.75])
cube([width,3.1,2.25]); 
}

// rear grove
xx=7.5;
yy=1.0;
zz=1.6;
translate([2.57,5.5,15.5])
cube([xx,yy,zz]);

}

// front face connector groove
translate([3.53,0,10])
cube([5.3,1.1,4.8]);
}
translate([-13.5,0,10])

con();
}
color([0.96, 0.96, 0.86]) // wont flippin render colors in modules
body();

rotate([0,0,-90])
translate([-4.5,2.4,-3.5])
color(""silver"")
header();


"
GZs7pnAE,fhudhukjgx,RBLXTUTS,Lua,Saturday 21st of June 2025 01:34:13 PM CDT,"-- Luna Scripts Legit Aimbot – Purple Edition (Full Fixed Keybinds + ESP + Scroll GUI)
if not game:IsLoaded() then game.Loaded:Wait() end

-- Services & Config
local UIS = game:GetService(""UserInputService"")
local RS = game:GetService(""RunService"")
local PL = game:GetService(""Players"").LocalPlayer
local Cam = workspace.CurrentCamera
local HttpService = game:GetService(""HttpService"")
local CONFIG_FILE = ""LunaAimbotConfig.json""

-- Settings defaults
local Settings = {
    FOV = 150,
    Speed = 0.25,
    Prediction = 0.14,
    FOVVisible = true,
    VisibleCheck = true,
    AntiDetection = false,
    TargetBone = ""Head"",
    AimbotEnabled = false,
    KeybindAim = ""MouseButton2"",
    KeybindToggleUI = ""RightControl"",
    ESPEnabled = false,
    ESPBoxes = false,
    ESPNames = false,
    ESPHealth = false
}

-- Load / Save config
local function saveConfig()
    if writefile then writefile(CONFIG_FILE, HttpService:JSONEncode(Settings)) end
end
local function loadConfig()
    if isfile and readfile and isfile(CONFIG_FILE) then
        local ok, t = pcall(function()
            return HttpService:JSONDecode(readfile(CONFIG_FILE))
        end)
        if ok and type(t) == ""table"" then
            for k,v in pairs(t) do
                if Settings[k] ~= nil then Settings[k] = t[k] end
            end
        end
    end
end
loadConfig()

-- FOV circle
local FOVCircle = Drawing.new(""Circle"")
FOVCircle.Thickness = 1
FOVCircle.Radius = Settings.FOV
FOVCircle.Color = Color3.fromRGB(170, 0, 255)
FOVCircle.Filled = false
FOVCircle.Visible = Settings.FOVVisible

local aiming = false
local TOPBAR = 36

-- Utility functions
local function isEnemy(p)
    local c = p.Character
    return p ~= PL and c and c:FindFirstChild(""Humanoid"") and c.Humanoid.Health > 0
end

local function getBone(p)
    local c = p.Character
    if not c then return end
    if Settings.TargetBone == ""Head"" then
        return c:FindFirstChild(""Head"")
    elseif Settings.TargetBone == ""Torso"" then
        return c:FindFirstChild(""UpperTorso"") or c:FindFirstChild(""Torso"")
    else -- Realistic
        return (math.random() < 0.7 and c:FindFirstChild(""Head"")) or c:FindFirstChild(""UpperTorso"") or c:FindFirstChild(""Torso"")
    end
end

local function partVisible(part)
    local rp = RaycastParams.new()
    rp.FilterDescendantsInstances = {PL.Character}
    rp.FilterType = Enum.RaycastFilterType.Blacklist
    local res = workspace:Raycast(Cam.CFrame.Position, (part.Position - Cam.CFrame.Position).Unit * 1000, rp)
    return res and res.Instance and res.Instance:IsDescendantOf(part.Parent)
end

local function getClosest()
    local m = UIS:GetMouseLocation()
    local best, bestDist = nil, Settings.FOV
    for _,p in pairs(game:GetService(""Players""):GetPlayers()) do
        if isEnemy(p) then
            local b = getBone(p)
            if b then
                local sp, ons = Cam:WorldToViewportPoint(b.Position)
                if ons then
                    local d = (Vector2.new(sp.X, sp.Y) - Vector2.new(m.X, m.Y - TOPBAR)).Magnitude
                    if d < bestDist then
                        if not Settings.VisibleCheck or partVisible(b) then
                            bestDist = d
                            best = b
                        end
                    end
                end
            end
        end
    end
    return best
end

-- Helper: input matches keybind string (mouse or keyboard)
local function inputMatchesKey(input, keybindStr)
    if not input or not keybindStr then return false end
    if keybindStr:match(""^MouseButton%d$"") then
        return input.UserInputType.Name == keybindStr
    else
        return input.KeyCode and input.KeyCode.Name == keybindStr
    end
end

-- Aimbot movement
RS.RenderStepped:Connect(function()
    local m = UIS:GetMouseLocation()
    FOVCircle.Position = Vector2.new(m.X, m.Y - TOPBAR)
    FOVCircle.Radius = Settings.FOV
    FOVCircle.Visible = Settings.FOVVisible and Settings.AimbotEnabled

    if aiming and Settings.AimbotEnabled then
        local b = getClosest()
        if b then
            local pred = b.Position + b.Velocity * Settings.Prediction
            local sp, ons = Cam:WorldToViewportPoint(pred)
            if ons and sp.Z > 0 then
                local dx = sp.X - m.X
                local dy = sp.Y - (m.Y - TOPBAR)
                if Settings.AntiDetection then
                    dx += math.random(-3,3)
                    dy += math.random(-3,3)
                end
                mousemoverel(dx * Settings.Speed, dy * Settings.Speed)
            end
        end
    end
end)

-- GUI Setup
local gui = Instance.new(""ScreenGui"", game.CoreGui)
gui.Name = ""LunaGui""
gui.ResetOnSpawn = false
gui.Enabled = true

local bg = Instance.new(""Frame"", gui)
bg.Size = UDim2.new(0, 350, 0, 500)
bg.Position = UDim2.new(0, 50, 0, 50)
bg.BackgroundColor3 = Color3.fromRGB(25, 0, 50)
bg.BorderSizePixel = 0
bg.ClipsDescendants = true

local bar = Instance.new(""Frame"", bg)
bar.Size = UDim2.new(1,0,0,TOPBAR)
bar.BackgroundColor3 = Color3.fromRGB(120, 0, 255)
bar.Active = true
bar.Selectable = true

-- Dragging logic for whole bg via bar
local dragging, dragStart, startPos
bar.InputBegan:Connect(function(i)
    if i.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = i.Position
        startPos = bg.Position
        i.Changed:Connect(function()
            if i.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)
bar.InputChanged:Connect(function(i)
    if dragging and i.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = i.Position - dragStart
        bg.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
                                startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- Title
local title = Instance.new(""TextLabel"", bar)
title.Size = UDim2.new(1, -60, 1, 0)
title.Position = UDim2.new(0, 12, 0, 0)
title.BackgroundTransparency = 1
title.Font = Enum.Font.GothamSemibold
title.Text = ""LUNA SCRIPTS""
title.TextSize = 20
title.TextColor3 = Color3.new(1, 1, 1)
title.TextXAlignment = Enum.TextXAlignment.Left
title.TextYAlignment = Enum.TextYAlignment.Center

-- Minimize button
local minBtn = Instance.new(""TextButton"", bar)
minBtn.Size = UDim2.new(0, 48, 0, TOPBAR - 8)
minBtn.Position = UDim2.new(1, -52, 0, 4)
minBtn.BackgroundColor3 = Color3.fromRGB(90, 0, 180)
minBtn.Font = Enum.Font.GothamBold
minBtn.TextSize = 20
minBtn.Text = ""─""
minBtn.TextColor3 = Color3.new(1,1,1)
minBtn.AutoButtonColor = false
minBtn.MouseButton1Click:Connect(function()
    local hidden = bg.Size.Y.Offset > TOPBAR
    bg.Size = hidden and UDim2.new(0,350,0,TOPBAR) or UDim2.new(0,350,0,500)
    minBtn.Text = hidden and ""▣"" or ""─""
end)

-- Tabs frame
local tabs = Instance.new(""Frame"", bg)
tabs.Size = UDim2.new(1, 0, 0, TOPBAR)
tabs.Position = UDim2.new(0, 0, 0, TOPBAR)
tabs.BackgroundColor3 = Color3.fromRGB(40, 0, 80)

-- Scrolling frame for pages
local pages = Instance.new(""ScrollingFrame"", bg)
pages.Size = UDim2.new(1, 0, 1, -TOPBAR*2)
pages.Position = UDim2.new(0, 0, 0, TOPBAR*2)
pages.CanvasSize = UDim2.new(0, 0, 2, 0)
pages.ScrollBarThickness = 6
pages.BackgroundTransparency = 1
pages.VerticalScrollBarInset = Enum.ScrollBarInset.Always

-- Tab buttons creator
local function createTab(name)
    local btn = Instance.new(""TextButton"", tabs)
    btn.Size = UDim2.new(0, 80, 1, 0)
    btn.Text = name
    btn.Font = Enum.Font.GothamBold
    btn.TextSize = 18
    btn.TextColor3 = Color3.fromRGB(220, 220, 220)
    btn.BackgroundColor3 = Color3.fromRGB(70, 0, 130)
    btn.AutoButtonColor = false
    btn.BorderSizePixel = 0
    btn.Name = name .. ""Tab""

    btn.MouseEnter:Connect(function() btn.BackgroundColor3 = Color3.fromRGB(120, 0, 255) end)
    btn.MouseLeave:Connect(function()
        if not btn:GetAttribute(""Selected"") then
            btn.BackgroundColor3 = Color3.fromRGB(70, 0, 130)
        end
    end)

    return btn
end

-- Pages creator
local function createPage()
    local frame = Instance.new(""Frame"", pages)
    frame.Size = UDim2.new(1, 0, 0, 440)
    frame.BackgroundTransparency = 1
    frame.Visible = false
    return frame
end

-- Create Tabs and Pages
local aimTabBtn = createTab(""Aim"")
local espTabBtn = createTab(""ESP"")
local miscTabBtn = createTab(""Misc"")

aimTabBtn.Position = UDim2.new(0, 0, 0, 0)
espTabBtn.Position = UDim2.new(0, 80, 0, 0)
miscTabBtn.Position = UDim2.new(0, 160, 0, 0)

local aimPage = createPage()
local espPage = createPage()
local miscPage = createPage()
aimPage.Position = UDim2.new(0, 0, 0, 0)
espPage.Position = UDim2.new(0, 0, 0, 440)
miscPage.Position = UDim2.new(0, 0, 0, 880)

-- Tab switch logic
local function selectTab(selectedBtn, selectedPage)
    for _, btn in pairs(tabs:GetChildren()) do
        if btn:IsA(""TextButton"") then
            btn.BackgroundColor3 = Color3.fromRGB(70, 0, 130)
            btn:SetAttribute(""Selected"", false)
        end
    end
    for _, page in pairs(pages:GetChildren()) do
        if page:IsA(""Frame"") then
            page.Visible = false
        end
    end
    selectedBtn.BackgroundColor3 = Color3.fromRGB(120, 0, 255)
    selectedBtn:SetAttribute(""Selected"", true)
    selectedPage.Visible = true
    pages.CanvasPosition = Vector2.new(0, selectedPage.Position.Y.Offset)
end

selectTab(aimTabBtn, aimPage)

aimTabBtn.MouseButton1Click:Connect(function()
    selectTab(aimTabBtn, aimPage)
end)
espTabBtn.MouseButton1Click:Connect(function()
    selectTab(espTabBtn, espPage)
end)
miscTabBtn.MouseButton1Click:Connect(function()
    selectTab(miscTabBtn, miscPage)
end)

-- Slider creator for aim page
local ypos = 10
local function makeSlider(parent, labelTxt, min, max, settingKey)
    local lbl = Instance.new(""TextLabel"", parent)
    lbl.Size = UDim2.new(0, 300, 0, 22)
    lbl.Position = UDim2.new(0, 20, 0, ypos)
    lbl.BackgroundTransparency = 1
    lbl.Font = Enum.Font.Gotham
    lbl.TextSize = 16
    lbl.TextColor3 = Color3.fromRGB(220, 220, 220)
    lbl.Text = labelTxt .. "": "" .. string.format(""%.3f"", Settings[settingKey])

    local barBg = Instance.new(""Frame"", parent)
    barBg.Size = UDim2.new(0, 300, 0, 16)
    barBg.Position = UDim2.new(0, 20, 0, ypos + 24)
    barBg.BackgroundColor3 = Color3.fromRGB(50, 30, 70)
    barBg.BorderSizePixel = 0
    barBg.ClipsDescendants = true
    Instance.new(""UICorner"", barBg).CornerRadius = UDim.new(0, 6)

    local fill = Instance.new(""Frame"", barBg)
    fill.BackgroundColor3 = Color3.fromRGB(170, 0, 255)
    fill.Size = UDim2.new((Settings[settingKey] - min) / (max - min), 0, 1, 0)
    Instance.new(""UICorner"", fill).CornerRadius = UDim.new(0,6)

    local draggingS = false
    barBg.InputBegan:Connect(function(i) if i.UserInputType == Enum.UserInputType.MouseButton1 then draggingS = true end end)
    barBg.InputEnded:Connect(function(i) if i.UserInputType == Enum.UserInputType.MouseButton1 then draggingS = false saveConfig() end end)
    UIS.InputChanged:Connect(function(i)
        if draggingS and i.UserInputType == Enum.UserInputType.MouseMovement then
            local pct = math.clamp((i.Position.X - barBg.AbsolutePosition.X) / barBg.AbsoluteSize.X, 0, 1)
            fill.Size = UDim2.new(pct,0,1,0)
            Settings[settingKey] = min + (max - min) * pct
            lbl.Text = labelTxt .. "": "" .. string.format(""%.3f"", Settings[settingKey])
        end
    end)

    ypos += 60
end

makeSlider(aimPage, ""FOV Radius"", 50, 400, ""FOV"")
makeSlider(aimPage, ""Aim Speed"", 0.05, 1, ""Speed"")
makeSlider(aimPage, ""Prediction"", 0, 0.4, ""Prediction"")

-- Toggle creator (generic)
local function makeToggle(parent, onTxt, offTxt, key, posY)
    local btn = Instance.new(""TextButton"", parent)
    btn.Size = UDim2.new(0, 300, 0, 38)
    btn.Position = UDim2.new(0, 20, 0, posY)
    btn.BackgroundColor3 = Color3.fromRGB(170, 0, 255)
    btn.Font = Enum.Font.GothamSemibold
    btn.TextSize = 18
    btn.AutoButtonColor = false
    btn.TextColor3 = Color3.new(1,1,1)
    btn.Text = Settings[key] and onTxt or offTxt
    btn.MouseEnter:Connect(function() btn.BackgroundColor3 = Color3.fromRGB(200, 50, 255) end)
    btn.MouseLeave:Connect(function() btn.BackgroundColor3 = Color3.fromRGB(170, 0, 255) end)
    btn.MouseButton1Click:Connect(function()
        Settings[key] = not Settings[key]
        btn.Text = Settings[key] and onTxt or offTxt
        saveConfig()
    end)
end

-- Aim toggles
makeToggle(aimPage, ""Aimbot: ON"", ""Aimbot: OFF"", ""AimbotEnabled"", ypos)
ypos += 50
makeToggle(aimPage, ""FOV Circle: ON"", ""FOV Circle: OFF"", ""FOVVisible"", ypos)
ypos += 50
makeToggle(aimPage, ""Vis Check: ON"", ""Vis Check: OFF"", ""VisibleCheck"", ypos)
ypos += 50
makeToggle(aimPage, ""Anti-Detect: ON"", ""Anti-Detect: OFF"", ""AntiDetection"", ypos)
ypos += 50

-- Target Bone selector
local boneLbl = Instance.new(""TextLabel"", aimPage)
boneLbl.Size = UDim2.new(0, 300, 0, 22)
boneLbl.Position = UDim2.new(0, 20, 0, ypos)
boneLbl.BackgroundTransparency = 1
boneLbl.Font = Enum.Font.Gotham
boneLbl.TextSize = 16
boneLbl.TextColor3 = Color3.fromRGB(220,220,220)
boneLbl.Text = ""Target Bone: "" .. Settings.TargetBone
ypos += 28

local boneBtn = Instance.new(""TextButton"", aimPage)
boneBtn.Size = UDim2.new(0, 300, 0, 38)
boneBtn.Position = UDim2.new(0, 20, 0, ypos)
boneBtn.BackgroundColor3 = Color3.fromRGB(170,0,255)
boneBtn.Font = Enum.Font.GothamSemibold
boneBtn.TextSize = 18
boneBtn.TextColor3 = Color3.new(1,1,1)
boneBtn.AutoButtonColor = false
boneBtn.Text = Settings.TargetBone
boneBtn.MouseEnter:Connect(function() boneBtn.BackgroundColor3 = Color3.fromRGB(200,50,255) end)
boneBtn.MouseLeave:Connect(function() boneBtn.BackgroundColor3 = Color3.fromRGB(170,0,255) end)
boneBtn.MouseButton1Click:Connect(function()
    local options = {""Head"", ""Torso"", ""Realistic""}
    local i = table.find(options, Settings.TargetBone) or 1
    i = i % #options + 1
    Settings.TargetBone = options[i]
    boneLbl.Text = ""Target Bone: "" .. Settings.TargetBone
    boneBtn.Text = Settings.TargetBone
    saveConfig()
end)
ypos += 50

-- Aim keybind changer
local aimKeyLbl = Instance.new(""TextLabel"", aimPage)
aimKeyLbl.Size = UDim2.new(0, 300, 0, 22)
aimKeyLbl.Position = UDim2.new(0, 20, 0, ypos)
aimKeyLbl.BackgroundTransparency = 1
aimKeyLbl.Font = Enum.Font.Gotham
aimKeyLbl.TextSize = 16
aimKeyLbl.TextColor3 = Color3.fromRGB(220,220,220)
aimKeyLbl.Text = ""Aim Keybind: "" .. Settings.KeybindAim
ypos += 28

local aimKeyBtn = Instance.new(""TextButton"", aimPage)
aimKeyBtn.Size = UDim2.new(0, 300, 0, 38)
aimKeyBtn.Position = UDim2.new(0, 20, 0, ypos)
aimKeyBtn.BackgroundColor3 = Color3.fromRGB(170,0,255)
aimKeyBtn.Font = Enum.Font.GothamSemibold
aimKeyBtn.TextSize = 18
aimKeyBtn.TextColor3 = Color3.new(1,1,1)
aimKeyBtn.AutoButtonColor = false
aimKeyBtn.Text = Settings.KeybindAim

local waitingForKey = false
aimKeyBtn.MouseEnter:Connect(function() aimKeyBtn.BackgroundColor3 = Color3.fromRGB(200,50,255) end)
aimKeyBtn.MouseLeave:Connect(function() aimKeyBtn.BackgroundColor3 = Color3.fromRGB(170,0,255) end)

aimKeyBtn.MouseButton1Click:Connect(function()
    if waitingForKey then return end
    waitingForKey = true
    aimKeyBtn.Text = ""Press Key...""
    local conn
    conn = UIS.InputBegan:Connect(function(input, gp)
        if gp then return end
        if input.UserInputType == Enum.UserInputType.Keyboard then
            Settings.KeybindAim = input.KeyCode.Name
            aimKeyBtn.Text = Settings.KeybindAim
            saveConfig()
            waitingForKey = false
            conn:Disconnect()
        elseif input.UserInputType.Name:match(""^MouseButton%d$"") then
            Settings.KeybindAim = input.UserInputType.Name
            aimKeyBtn.Text = Settings.KeybindAim
            saveConfig()
            waitingForKey = false
            conn:Disconnect()
        end
    end)
end)
ypos += 60

-- Toggle UI keybind changer (on misc page)
local toggleKeyLbl = Instance.new(""TextLabel"", miscPage)
toggleKeyLbl.Size = UDim2.new(0, 300, 0, 22)
toggleKeyLbl.Position = UDim2.new(0, 20, 0, 10)
toggleKeyLbl.BackgroundTransparency = 1
toggleKeyLbl.Font = Enum.Font.Gotham
toggleKeyLbl.TextSize = 16
toggleKeyLbl.TextColor3 = Color3.fromRGB(220,220,220)
toggleKeyLbl.Text = ""Toggle UI Keybind: "" .. Settings.KeybindToggleUI

local toggleKeyBtn = Instance.new(""TextButton"", miscPage)
toggleKeyBtn.Size = UDim2.new(0, 300, 0, 38)
toggleKeyBtn.Position = UDim2.new(0, 20, 0, 40)
toggleKeyBtn.BackgroundColor3 = Color3.fromRGB(170,0,255)
toggleKeyBtn.Font = Enum.Font.GothamSemibold
toggleKeyBtn.TextSize = 18
toggleKeyBtn.TextColor3 = Color3.new(1,1,1)
toggleKeyBtn.AutoButtonColor = false
toggleKeyBtn.Text = Settings.KeybindToggleUI

toggleKeyBtn.MouseEnter:Connect(function() toggleKeyBtn.BackgroundColor3 = Color3.fromRGB(200,50,255) end)
toggleKeyBtn.MouseLeave:Connect(function() toggleKeyBtn.BackgroundColor3 = Color3.fromRGB(170,0,255) end)

toggleKeyBtn.MouseButton1Click:Connect(function()
    if waitingForKey then return end
    waitingForKey = true
    toggleKeyBtn.Text = ""Press Key...""
    local conn
    conn = UIS.InputBegan:Connect(function(input, gp)
        if gp then return end
        if input.UserInputType == Enum.UserInputType.Keyboard then
            Settings.KeybindToggleUI = input.KeyCode.Name
            toggleKeyBtn.Text = Settings.KeybindToggleUI
            toggleKeyLbl.Text = ""Toggle UI Keybind: "" .. Settings.KeybindToggleUI
            saveConfig()
            waitingForKey = false
            conn:Disconnect()
        elseif input.UserInputType.Name:match(""^MouseButton%d$"") then
            Settings.KeybindToggleUI = input.UserInputType.Name
            toggleKeyBtn.Text = Settings.KeybindToggleUI
            toggleKeyLbl.Text = ""Toggle UI Keybind: "" .. Settings.KeybindToggleUI
            saveConfig()
            waitingForKey = false
            conn:Disconnect()
        end
    end)
end)

-- ESP section (ESP page)
local espY = 10
local function makeESPToggle(text, key)
    local btn = Instance.new(""TextButton"", espPage)
    btn.Size = UDim2.new(0, 300, 0, 38)
    btn.Position = UDim2.new(0, 20, 0, espY)
    btn.BackgroundColor3 = Color3.fromRGB(170, 0, 255)
    btn.Font = Enum.Font.GothamSemibold
    btn.TextSize = 18
    btn.AutoButtonColor = false
    btn.TextColor3 = Color3.new(1,1,1)
    btn.Text = Settings[key] and text .. "": ON"" or text .. "": OFF""
    btn.MouseEnter:Connect(function() btn.BackgroundColor3 = Color3.fromRGB(200, 50, 255) end)
    btn.MouseLeave:Connect(function() btn.BackgroundColor3 = Color3.fromRGB(170, 0, 255) end)
    btn.MouseButton1Click:Connect(function()
        Settings[key] = not Settings[key]
        btn.Text = Settings[key] and text .. "": ON"" or text .. "": OFF""
        saveConfig()
    end)
    espY += 50
end

makeESPToggle(""ESP Enabled"", ""ESPEnabled"")
makeESPToggle(""ESP Boxes"", ""ESPBoxes"")
makeESPToggle(""ESP Names"", ""ESPNames"")
makeESPToggle(""ESP Health"", ""ESPHealth"")

-- ESP drawing tables
local ESPDrawings = {}

local function createESPForPlayer(p)
    if ESPDrawings[p] then return end

    local box = Drawing.new(""Square"")
    box.Color = Color3.fromRGB(170, 0, 255)
    box.Thickness = 2
    box.Filled = false

    local nameTag = Drawing.new(""Text"")
    nameTag.Color = Color3.fromRGB(255,255,255)
    nameTag.Outline = true
    nameTag.OutlineColor = Color3.new(0,0,0)
    nameTag.Size = 14
    nameTag.Font = 2

    local healthText = Drawing.new(""Text"")
    healthText.Color = Color3.fromRGB(0,255,0)
    healthText.Outline = true
    healthText.OutlineColor = Color3.new(0,0,0)
    healthText.Size = 14
    healthText.Font = 2

    ESPDrawings[p] = {Box=box, Name=nameTag, Health=healthText}
end

local function removeESPForPlayer(p)
    if ESPDrawings[p] then
        for _,v in pairs(ESPDrawings[p]) do
            v:Remove()
        end
        ESPDrawings[p] = nil
    end
end

-- ESP Update loop
RS.RenderStepped:Connect(function()
    for _,p in pairs(game:GetService(""Players""):GetPlayers()) do
        if p ~= PL and p.Character and p.Character:FindFirstChild(""HumanoidRootPart"") and Settings.ESPEnabled then
            createESPForPlayer(p)
            local drawings = ESPDrawings[p]
            local root = p.Character.HumanoidRootPart
            local screenPos, onScreen = Cam:WorldToViewportPoint(root.Position)
            if onScreen and screenPos.Z > 0 then
                local size = 1500 / screenPos.Z
                local x, y = screenPos.X, screenPos.Y

                -- Box
                if Settings.ESPBoxes then
                    drawings.Box.Visible = true
                    drawings.Box.Size = Vector2.new(size, size * 2)
                    drawings.Box.Position = Vector2.new(x - size/2, y - size)
                    drawings.Box.Color = Color3.fromRGB(170, 0, 255)
                else
                    drawings.Box.Visible = false
                end

                -- Name
                if Settings.ESPNames then
                    drawings.Name.Visible = true
                    drawings.Name.Text = p.Name
                    drawings.Name.Position = Vector2.new(x, y - size - 20)
                else
                    drawings.Name.Visible = false
                end

                -- Health
                if Settings.ESPHealth then
                    local hum = p.Character:FindFirstChild(""Humanoid"")
                    if hum then
                        drawings.Health.Visible = true
                        drawings.Health.Text = string.format(""%.0f"", hum.Health)
                        drawings.Health.Position = Vector2.new(x, y + size + 5)
                        drawings.Health.Color = hum.Health > 50 and Color3.fromRGB(0,255,0) or Color3.fromRGB(255,0,0)
                    else
                        drawings.Health.Visible = false
                    end
                else
                    drawings.Health.Visible = false
                end
            else
                -- Not on screen, hide all
                drawings.Box.Visible = false
                drawings.Name.Visible = false
                drawings.Health.Visible = false
            end
        else
            -- Remove ESP drawings if player not valid or ESP off
            removeESPForPlayer(p)
        end
    end
end)

-- Input handlers
UIS.InputBegan:Connect(function(input, gp)
    if gp then return end
    if inputMatchesKey(input, Settings.KeybindAim) and Settings.AimbotEnabled then
        aiming = true
    end
    if inputMatchesKey(input, Settings.KeybindToggleUI) then
        gui.Enabled = not gui.Enabled
    end
end)

UIS.InputEnded:Connect(function(input)
    if inputMatchesKey(input, Settings.KeybindAim) then
        aiming = false
    end
end)

-- Hint label
local hint = Instance.new(""TextLabel"", bg)
hint.Size = UDim2.new(1,0,0,26)
hint.Position = UDim2.new(0,0,1,-26)
hint.BackgroundTransparency = 1
hint.Font = Enum.Font.GothamItalic
hint.TextSize = 14
hint.TextColor3 = Color3.fromRGB(200,200,200)
hint.Text = ""Hold Aim Key to aim • Change keys and settings in GUI""

print(""Luna Scripts loaded successfully."")"
FWMuFdM5,Exportar datos de hoja de cálculo a una presentación de Google,viktormorales,JavaScript,Saturday 21st of June 2025 12:37:06 PM CDT,"/**
 * VER ARTÍCULO EN MI SITIO WEB
 * https://viktormorales.com/diseno-y-desarrollo-web/exportar-datos-de-hoja-de-calculo-a-una-presentacion-de-google/
 */

/**
 * createVoucher()
 * This function is used to create the voucher
 */
function createVoucher() {

  // Get data from Google Sheets
  const sheet = SpreadsheetApp.getActiveSpreadsheet();
  const sheetName = ""DIA SPA"";
  const tab = sheet.getSheetByName(sheetName);

  // Access an slide presentation
  const presentationId = ""SLIDE_ID"";
  const presentation = SlidesApp.openById(presentationId);
  const presentationName = presentation.getName();

  // Get the last non-empty row values
  const lastRow = getLastRowInColumn(tab);
  const getColumn = {
    ""issue_date"": formatDateToSpanish(tab.getRange(lastRow,1).getValue()),
    ""due_date"": formatDateToSpanish(tab.getRange(lastRow,2).getValue()),
    ""name"": tab.getRange(lastRow,3).getValue()
  }

  // If there is data on the sheet, continue with the process
  if (lastRow > 1) {
    // Mensaje
    SpreadsheetApp.getActive().toast(""Aguarde mientras se crea el archivo PDF"");

    // Create a COPY of the original slide presentation
    const copy = DriveApp.getFileById(presentationId).makeCopy(`Copy ${presentationName}`);
    const copyId = copy.getId();
    const presentationCopy = SlidesApp.openById(copyId);

    // Replace text holder in texts box
    const slide = presentationCopy.getSlides()[0];
    const elements = slide.getPageElements();
    for (const element of elements) {
      if (element.getPageElementType() === SlidesApp.PageElementType.SHAPE) {
        var shape = element.asShape();
        var textRange = shape.getText();
        var originalText = textRange.asString().trim();

        if (originalText == ""{{NAME}}"") {
          var newText = originalText.replace(""{{NAME}}"", getColumn[""name""]);
          textRange.setText(newText);
        }

        if (originalText == ""{{DUE_DATE}}"") {
          var newText = originalText.replace(""{{DUE_DATE}}"", getColumn[""due_date""]);
          textRange.setText(newText);
        }
      }
    }

    // Save changes and close
    presentationCopy.saveAndClose();

    // Export as PDF
    exportAsPDF(copyId, tab, lastRow);
  } else {
    SpreadsheetApp.getActive().toast(""No hay información para crear un voucher"");
  }
}

/**
 * exportPDF()
 */
function exportAsPDF(presentationId, tab, lastRow) {
  // Folder ID to save VOUCHERS as PDF when exported
  const folder = DriveApp.getFolderById(""FOLDER_ID"");

  // Export as PDF
  const blob = DriveApp.getFileById(presentationId).getAs(""application/pdf"");
  const FILENAME = {
    ""issue_date"": formatDate(tab.getRange(lastRow,1).getValue()),
    ""due_date"": formatDate(tab.getRange(lastRow,2).getValue()),
    ""name"": tab.getRange(lastRow,3).getValue(),
  }
  const fileName = `${FILENAME[""due_date""]} - ${FILENAME[""name""]}.pdf`;
  const pdfFile = folder.createFile(blob.setName(fileName));

  // Delete copy
  DriveApp.getFileById(presentationId).setTrashed(true);
  
  SpreadsheetApp.getActive().toast(""Se creó el PDF"");

}

/**
 * getLastRowInColumn()
 * Get the last populated row from ""tab""
 */
function getLastRowInColumn(tab) {
  // Get the first column
  const column = 1; // Column A = 1, B = 2, etc.

  // Get all values in the column
  const values = tab.getRange(1, column, tab.getLastRow()).getValues();

  // Loop through all the rows
  let lastRow = 0;
  for (let i = values.length - 1; i >= 0; i--) {
    if (values[i][0] !== """") {
      lastRow = i + 1; // Adjust for 1-based index
      break;
    }
  }

  return lastRow;
}


/**
 * formatDate()
 * Format dates to ""yyyy-mm-dd"" format
 */
function formatDate(date) {
  if (!(date instanceof Date)) return date; // Return original if not a date
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed
  const day = date.getDate(); // No leading zero for single-digit day

  return `${year}-${month}-${day}`;
}

/**
 * formatDateToSpanish()
 * Format dates to ""spanish"" version
 */
function formatDateToSpanish(date) {
  if (!(date instanceof Date)) return date;
  const formatter = new Intl.DateTimeFormat('es-ES', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  return formatter.format(date); // e.g., ""20 de junio de 2025""
}"
tfUKHeuq,Untitled,martintokio,Lua,Saturday 21st of June 2025 12:25:48 PM CDT,"local raidMessages = {
  -- Big Bosses Raids
    [""citadel""] = {
      title = ""Ferumbras has returned!"",
      location = ""Citadel Tower"",
      description = ""The seals on Ferumbras' old citadel are glowing. Prepare for HIS return, mortals."",
      image_url = ""https://static.wikia.nocookie.net/tibia/images/0/0f/Ferumbras.gif/revision/latest?cb=20171218212506&path-prefix=en&format=original""
    },
    [""ancient evil is awakening in the mines""] = {
      title = ""Ghazbaran has returned!"",
      location = ""Formorgar Mines"",
      description = ""An ancient evil is awakening in the mines beneath Hrodmir."",
      image_url = ""https://static.wikia.nocookie.net/tibia/images/5/5e/Ghazbaran.gif/revision/latest?cb=20220627133954&path-prefix=en&format=original""
    },
    [""There is an evil presence at the volcano of Goroma.""] = {
      title = ""Morgaroth has returned!"",
      location = ""Goroma Volcano (underground)"",
      description = ""There is an evil presence at the volcano of Goroma."",
      image_url = ""https://static.wikia.nocookie.net/tibia/images/c/ce/Morgaroth.gif/revision/latest?cb=20220627133843&path-prefix=en&format=original""
    },
    [""Orshabaal's minions are working on his return to the World. LEAVE Edron at once, mortals.""] = {
      title = ""Orshabaal has returned!"",
      location = ""North of Edron near the Dragon Lair in the stone circle"",
      description = ""Orshabaal is about to make his way into the mortal realm. Run for your lives!"",
      image_url = ""https://static.wikia.nocookie.net/tibia/images/c/ce/Orshabaal.gif/revision/latest?cb=20221126165234&path-prefix=en&format=original""
    },
    [""the skies darken as Morshabaal prepares to unleash his fury upon the world""] = {
      title = ""Orshabaal's brother Morshabaal has returned!"",
      location = ""Edron Warlock Stones"",
      description = ""Orshabaal's brother, the infamous Morshabaal is out for revenge and will spread fear for his family once again!"",
      image_url = ""https://static.wikia.nocookie.net/tibia/images/c/ca/Morshabaal.gif/revision/latest?cb=20220107140053&path-prefix=en&format=original""
    },
    [""An ancient evil is awakening in the mines beneath Hrodmir.""] = {
      title = ""Ghazbaran has returned!"",
      location = ""Formorgar Mines"",
      description = ""Demonic entities are entering the mortal realm in the Hrodmir mines."",
      image_url = ""https://static.wikia.nocookie.net/tibia/images/5/5e/Ghazbaran.gif/revision/latest?cb=20220627133954&path-prefix=en&format=original""
    },
    [""Something abominable is rising!""] = {
      title = ""The Abomination has returned!"",
      location = ""Search for it in 4 out of its 10 possible teleports"",
      description = ""Something abominable is rising! Search for its spawns! Gather an army and destroy this threat!"",
      image_url = ""https://static.wikia.nocookie.net/tibia/images/a/a7/The_Abomination.gif/revision/latest?cb=20221126184943&path-prefix=en&format=original""
    },
  
  -- Carlin Raids
    [""trolling north-west""] = {
      title = ""Troll Champion has returned!"",
      location = ""North-West of Carlin"",
      description = ""Beware! Troll Champions north-west of Carlin!"",
      image_url = ""https://static.wikia.nocookie.net/tibia/images/c/cc/Troll_Champion.gif/revision/latest?cb=20150418124701&path-prefix=en&format=original""
    },
    [""Buzzing madness north of Carlin! Be careful if you're allergic!""] = {
      title = ""Willi the Wasp has returned!"",
      location = ""North of Carlin"",
      description = ""Buzzing madness north of Carlin! Be careful if you're allergic!"",
      image_url = ""https://static.wikia.nocookie.net/tibia/images/f/f1/Willi_Wasp.gif/revision/latest?cb=20161101094917&path-prefix=en&format=original""
    },
    [""woods between Carlin and Northport""] = {
      title = ""Orc Raid on Femor Hills"",
      location = ""Near and in the Whitewatch Tower"",
      description = ""Orcs are attacking Carlin from the north-east!"",
      image_url = ""https://static.wikia.nocookie.net/tibia/images/4/44/Orc_Warlord.gif/revision/latest?cb=20070712031335&path-prefix=en&format=original""
    },
  
  -- Darashia Raids
    [""lions scout the western Darashian desert""] = {
      title = ""Zomba has returned!"",
      location = ""Darama Desert"",
      description = ""Packs of hungry lions stalk Darashia's western desert. Be on your guard!"",
      image_url = ""https://static.wikia.nocookie.net/tibia/images/b/bb/Zomba.gif/revision/latest?cb=20150418085407&path-prefix=en&format=original""
    },
    [""has risen from his crypt""] = {
      title = ""The Pale Count has returned!"",
      location = ""Drefia Vampire Crypts"",
      description = ""The Pale Count has risen from his crypt deep under Drefia. Blood will flow."",
      image_url = ""https://static.wikia.nocookie.net/tibia/images/1/11/The_Pale_Count.gif/revision/latest?cb=20130704185852&path-prefix=en&format=original""
    },
    
  --// New Raids
    [""A massive orc force is gathering at the gates of Zzaion.""] = {
      title = ""Zulazza the Corruptor and Chizzoron the Distorter has returned!"",
      location = ""Zao Orc Camp"",
      description = ""The gates to Zzaion have been breached! Orcs are invading the city!"",
      image_url = ""https://static.wikia.nocookie.net/tibia/images/b/ba/Zulazza_the_Corruptor.gif/revision/latest?cb=20091212072415&path-prefix=en&format=original""
    },
    [""Beware of Arachir the Ancient One!""] = {
      title = ""Arachir the Ancient One has returned!"",
      location = ""Drefia Vampire Crypts"",
      description = ""Defeat her before it's too late tibians!"",
      image_url = ""https://static.wikia.nocookie.net/tibia/images/c/c3/Arachir_the_Ancient_One.gif/revision/latest?cb=20080711144709&path-prefix=en&format=original""
    },
    [""Insects on gray island are getting stronger!!""] = {
      title = ""Gray Island it's under attack!"",
      location = ""Gray Island"",
      description = ""Defend the island before it's too late tibians!"",
      image_url = ""https://static.wikia.nocookie.net/tibia/images/b/bf/Kollos.gif/revision/latest?cb=20111217223042&path-prefix=en&format=original""
    },
    [""Shadowstalker is back again, and now with stronger population!""] = {
      title = ""The hive it's under attack!"",
      location = ""Underground Hive"",
      description = ""Defend the hive before it's too destroyed tibians!"",
      image_url = ""https://static.wikia.nocookie.net/tibia/images/2/2f/Shadowstalker.gif/revision/latest?cb=20120406194832&path-prefix=en&format=original""
    },
    [""The priestesses in Drefia are preparing a black celebration.""] = {
      title = ""The dark powers arise!"",
      location = ""Drefia"",
      description = ""Stop the black celebration before it's too late tibians!"",
      image_url = ""https://static.wikia.nocookie.net/tibia/images/1/15/Priestess.gif/revision/latest?cb=20181019175924&path-prefix=en&format=original""
    },
    [""A veritable army of undead is amassing in the plains of havoc, beware!""] = {
      title = ""The undead army has returned!"",
      location = ""Plains of Havoc (Venore)"",
      description = ""Defeat the Undead Army before it's too late tibians!"",
      image_url = ""https://static.wikia.nocookie.net/tibia/images/5/50/Banshee.gif/revision/latest?cb=20050417025231&path-prefix=en&format=original""
    },
    [""Scouts report a barbarian army gathering near Svargrond.""] = {
      title = ""Barbarian Raid"",
      location = ""South-West of Svargrond"",
      description = ""The barbarians are preparing to invade the city, stop them before they break in Tibians!"",
      image_url = ""https://static.wikia.nocookie.net/tibia/images/9/94/Barbarian_Brutetamer.gif/revision/latest?cb=20180416202608&path-prefix=en&format=original""
    },
    [""lizardkin!""] = {
      title = ""Draptor Raid"",
      location = ""Muggy Plains (Farmine)"",
      description = ""The dragons of the Dragonblaze Mountains have descended to Zao to protect the lizardkin!"",
      image_url = ""https://static.wikia.nocookie.net/tibia/images/1/1b/Draptor.gif/revision/latest?cb=20140123150627&path-prefix=en""
    },
    [""mawhawk has been summoned""] = {
      title = ""Mawhawk Raid"",
      location = ""Mawhawk's Lair (East on Guzzlemaw Valley)"",
      description = ""Mawhawk has been summoned from nightmare of roshamuul!"",
      image_url = ""https://static.wikia.nocookie.net/tibia/images/a/a8/Mawhawk.gif/revision/latest?cb=20221126184729&path-prefix=en&format=original""
    },
  
  --// Custom Raids/Events
    [""DeathMatch Event is opened for join for next 120  seconds! You can join the event using command: !dm""] = {
      title = ""Deathmatch Event has begun!"",
      location = ""Tibia Map"",
      description = ""Custom Gunzodus Event where two random selected teams fight eachother."",
      image_url = ""https://static.wikia.nocookie.net/tibia/images/7/7a/Magic_Longsword.gif/revision/latest?cb=20150803214932&path-prefix=en&format=original""
    },  
  }"
NBjsZwxG,Untitled,Irkutsk86,C++,Saturday 21st of June 2025 11:12:13 AM CDT,"		class Database 
		{
			// Удалить все удаленные элементы из базы данных через X дней
			permanentlyDeleteTime = 2;
			
			// Удалите все территории (и контрукции + контейнеры в нем), которые не были оплачены после X дней
			territoryLifeTime = 14;

			// Удалите все контейнеры за пределами территорий, которые не использовались в течение X дней
			// Пример: палатки
			containerLifeTime = 2;

			// Удалите все конструкции за пределами территорий, которые старше X дней или не перемещены в течение X дней 
			// Пример: Рабочие Столы
			constructionLifeTime = 1;

			// Удалите все транспортные средства, которые не были перемещены/использованы в течение X дней
			vehicleLifeTime = 5;
			
			// Удадить сейфы через X дней
			abandonedTime = 1;
			
			// Удаляет базу через X дней после кражи флага, если не заплатить выкуп.
			stolenFlagLifeTime = 3;
			
			// Устанавливает дверные и сейфовые замки на 0000 и помечает сейфы как оставленные через X дней после кражи флага, если не будет выплачен выкуп.
			unlockLifeTime = 2;
		};
	};"
p3nf0q8r,sei la,LucaoModssBM,Lua,Saturday 21st of June 2025 10:02:28 AM CDT,"gg.setVisible(true)
gg.setRanges(gg.REGION_ANONYMOUS)
gg.clearResults()
gg.searchNumber(""h06000000000000000000000000000000000000000000803F"", gg.TYPE_BYTE, false, gg.SIGN_EQUAL, 0, -1)
local count = gg.getResultCount()
if count == 0 then
    gg.alert(""Nenhuma correspondência encontrada para o hex string na região ANONYMOUS."")
else
    local results = gg.getResults(count)
    local targetIndices = {7, 8, 23, 24}
    local output = {}
    for _, index in ipairs(targetIndices) do
        if index <= count then
            local targetAddr = results[index].address
            local floatAddr = targetAddr + 0x14
            local value = gg.getValues({{address = floatAddr, flags = gg.TYPE_FLOAT}})[1].value
            table.insert(output, string.format(""Resultado %d:\nEstrutura em: 0x%X\nPonteiro para float: 0x%X\nValor: %f"", index, targetAddr, floatAddr, value))
        end
    end
    gg.alert(table.concat(output, ""\n\n""))
end
gg.clearResults()"
LsLE1WG3,33323,suramraja1,Lua,Saturday 21st of June 2025 08:57:21 AM CDT,"-- AUTO PLANT & DELETE - Inventory Cleaner with Threshold
-- Purpose: Plant seeds from inventory and immediately delete them to reduce lag
-- Only processes seeds when quantity >= threshold

-- ✅ GAME CHECK
if not game:IsLoaded() then
    game.Loaded:wait()
end

task.wait(5)

if game.PlaceId ~= 126884695634066 then
    return
end

-- ✅ SERVICES & MODULES
local Players = game:GetService(""Players"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local GetFarm = require(ReplicatedStorage.Modules.GetFarm)
local DataService = require(ReplicatedStorage.Modules.DataService)
local player = Players.LocalPlayer

-- ✅ REMOTE EVENTS (from your existing code)
local PlantRemote = ReplicatedStorage.GameEvents.Plant_RE
local RemoveRemote = ReplicatedStorage.GameEvents.Remove_Item

-- ✅ CONFIGURATION
local isAutoPlantAndDeleteEnabled = false
local autoPlantAndDeleteThread = nil

-- ✅ THRESHOLD SETTING
local QUANTITY_THRESHOLD = 500  -- Only process seeds if we have 500+ of this type

-- ✅ SEEDS TO PLANT & DELETE (configure which seeds to clear from inventory)
local SeedsToPlantAndDelete = {
    [""Carrot""] = true,
    [""Strawberry""] = true,
    [""Blueberry""] = true,
    [""Orange Tulip""] = true,
    [""Tomato""] = true,
    [""Corn""] = true,
    [""Daffodil""] = true,
    [""Watermelon""] = true,
    [""Pumpkin""] = true,
    [""Apple""] = true,
    [""Bamboo""] = true,
    [""Coconut""] = true,
    [""Cactus""] = true,
    [""Dragon Fruit""] = true,
    [""Mango""] = true,
    [""Grape""] = true,
    [""Mushroom""] = true,
    [""Pepper""] = true,
    [""Cacao""] = true,
    [""Pineapple""] = true,
    [""Raspberry""] = true,
    [""Peach""] = true,
    [""Papaya""] = true,
    [""Banana""] = true,
    [""Passionfruit""] = true,
    [""Soul Fruit""] = true,
    [""Cursed Fruit""] = true,
    [""Succulent""] = true,
    [""Cranberry""] = true,
    [""Durian""] = true,
    [""Eggplant""] = true,
    [""Lotus""] = true,
    [""Venus Fly Trap""] = true,
    [""Pear""] = true,
    [""Lemon""] = true,
    [""Cherry Blossom""] = false,  -- Keep special plants
    [""Avocado""] = true,
    [""Nightshade""] = true,
    [""Glowshroom""] = true,
    [""Mint""] = true,
    [""Moonflower""] = true,
    [""Starfruit""] = true,
    [""Moonglow""] = true,
    [""Moon Blossom""] = true,
    [""Chocolate Carrot""] = true,
    [""Red Lollipop""] = true,
    [""Candy Sunflower""] = true,
    [""Easter Egg""] = true,
    [""Candy Blossom""] = false  -- Keep special plants
}

-- ✅ FUNCTION TO COUNT SEED QUANTITIES FROM INVENTORY DATA
local function getSeedQuantities()
    local seedCounts = {}
    
    pcall(function()
        local playerData = DataService:GetData()
        if playerData and playerData.InventoryData then
            for uuid, itemData in pairs(playerData.InventoryData) do
                if itemData.ItemType == ""Seed"" and itemData.ItemData then
                    local seedName = itemData.ItemData.ItemName
                    local quantity = itemData.ItemData.Quantity or 0
                    
                    seedCounts[seedName] = (seedCounts[seedName] or 0) + quantity
                end
            end
        end
    end)
    
    return seedCounts
end

-- ✅ PERSISTENT CONTROL BUTTON
local function createControlButton()
    local playerGui = player:WaitForChild(""PlayerGui"")
    
    -- Remove existing button
    local existingButton = playerGui:FindFirstChild(""PlantDeleteControlButton"")
    if existingButton then existingButton:Destroy() end
    
    -- Create control button GUI
    local buttonGui = Instance.new(""ScreenGui"")
    buttonGui.Name = ""PlantDeleteControlButton""
    buttonGui.ResetOnSpawn = false
    buttonGui.Parent = playerGui
    
    local controlButton = Instance.new(""TextButton"")
    controlButton.Size = UDim2.new(0, 180, 0, 50)
    controlButton.Position = UDim2.new(0, 10, 0, 200) -- Left side of screen
    controlButton.BackgroundColor3 = Color3.fromRGB(50, 150, 50) -- Green when stopped
    controlButton.BackgroundTransparency = 0.1
    controlButton.BorderSizePixel = 3
    controlButton.BorderColor3 = Color3.fromRGB(255, 255, 255)
    controlButton.Font = Enum.Font.SourceSansBold
    controlButton.TextSize = 16
    controlButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    controlButton.Text = ""🗑️ START CLEANER""
    controlButton.TextStrokeTransparency = 0
    controlButton.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    controlButton.Name = ""ControlButton""
    controlButton.Parent = buttonGui
    
    -- Button hover effects
    controlButton.MouseEnter:Connect(function()
        if isAutoPlantAndDeleteEnabled then
            controlButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50) -- Brighter red on hover
        else
            controlButton.BackgroundColor3 = Color3.fromRGB(70, 170, 70) -- Brighter green on hover
        end
    end)
    
    controlButton.MouseLeave:Connect(function()
        if isAutoPlantAndDeleteEnabled then
            controlButton.BackgroundColor3 = Color3.fromRGB(150, 50, 50) -- Red when running
        else
            controlButton.BackgroundColor3 = Color3.fromRGB(50, 150, 50) -- Green when stopped
        end
    end)
    
    -- Button click event
    controlButton.MouseButton1Click:Connect(function()
        Auto_Plant_And_Delete()
        
        -- Update button appearance based on state
        if isAutoPlantAndDeleteEnabled then
            controlButton.Text = ""🛑 STOP CLEANER""
            controlButton.BackgroundColor3 = Color3.fromRGB(150, 50, 50) -- Red when running
        else
            controlButton.Text = ""🗑️ START CLEANER""
            controlButton.BackgroundColor3 = Color3.fromRGB(50, 150, 50) -- Green when stopped
        end
    end)
    
    return buttonGui
end

-- ✅ VISUAL PROGRESS DISPLAY
local function createProgressGui()
    local playerGui = player:WaitForChild(""PlayerGui"")
    
    -- Remove existing GUI
    local existingGui = playerGui:FindFirstChild(""PlantDeleteProgress"")
    if existingGui then existingGui:Destroy() end
    
    -- Create new GUI
    local screenGui = Instance.new(""ScreenGui"")
    screenGui.Name = ""PlantDeleteProgress""
    screenGui.ResetOnSpawn = false
    screenGui.Parent = playerGui
    
    local frame = Instance.new(""Frame"")
    frame.Size = UDim2.new(0, 350, 0, 200)
    frame.Position = UDim2.new(0.5, -175, 0, 50)
    frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    frame.BackgroundTransparency = 0.2
    frame.BorderSizePixel = 2
    frame.BorderColor3 = Color3.fromRGB(255, 255, 255)
    frame.Parent = screenGui
    
    local titleLabel = Instance.new(""TextLabel"")
    titleLabel.Size = UDim2.new(1, 0, 0.25, 0)
    titleLabel.Position = UDim2.new(0, 0, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.TextSize = 18
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.Text = ""🗑️ INVENTORY CLEANER (500+ Threshold)""
    titleLabel.Parent = frame
    
    local statusLabel = Instance.new(""TextLabel"")
    statusLabel.Size = UDim2.new(1, -10, 0.75, 0)
    statusLabel.Position = UDim2.new(0, 5, 0.25, 0)
    statusLabel.BackgroundTransparency = 1
    statusLabel.Font = Enum.Font.SourceSans
    statusLabel.TextSize = 14
    statusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    statusLabel.TextWrapped = true
    statusLabel.Text = ""Ready to clean inventory...""
    statusLabel.Name = ""StatusLabel""
    statusLabel.Parent = frame
    
    return screenGui
end

-- ✅ MAIN FUNCTION: AUTO PLANT & DELETE WITH THRESHOLD
function Auto_Plant_And_Delete()
    isAutoPlantAndDeleteEnabled = not isAutoPlantAndDeleteEnabled
    
    if isAutoPlantAndDeleteEnabled then
        local progressGui = createProgressGui()
        local statusLabel = progressGui.PlantDeleteProgress.Frame.StatusLabel
        
        autoPlantAndDeleteThread = spawn(function()
            local totalSeeds = 0
            local processedSeeds = 0
            
            while isAutoPlantAndDeleteEnabled do
                pcall(function()
                    -- ✅ STEP 1: GET SEED QUANTITIES FROM INVENTORY DATA
                    local seedCounts = getSeedQuantities()
                    
                    -- ✅ STEP 2: FIND FARM
                    local playerPlot = GetFarm(player)
                    if not playerPlot then 
                        statusLabel.Text = ""❌ No farm found!""
                        return 
                    end
                    
                    -- ✅ STEP 3: FIND PLANTING SPOT
                    local plantSpot = nil
                    for _, obj in pairs(playerPlot:GetDescendants()) do
                        if obj.Name == ""Can_Plant"" and obj:IsA(""BasePart"") then
                            plantSpot = obj
                            break
                        end
                    end
                    
                    if not plantSpot then
                        statusLabel.Text = ""❌ No planting area found!""
                        return
                    end
                    
                    -- ✅ STEP 4: FIND SEEDS TO PROCESS (WITH THRESHOLD CHECK)
                    local seedsToProcess = {}
                    local belowThresholdSeeds = {}
                    
                    for _, tool in pairs(player.Backpack:GetChildren()) do
                        if tool:IsA(""Tool"") and tool:GetAttribute(""ItemType"") == ""Seed"" then
                            local seedName = tool:GetAttribute(""Seed"") or tool.Name:match(""^(.-)%s*Seed"") or tool.Name
                            
                            -- Clean seed name
                            if seedName:find(""Seed$"") then
                                seedName = seedName:gsub(""%s*Seed$"", """")
                            end
                            
                            -- ✅ CHECK THRESHOLD AND CONFIGURATION
                            if SeedsToPlantAndDelete[seedName] == true then
                                local totalQuantity = seedCounts[seedName] or 0
                                
                                if totalQuantity >= QUANTITY_THRESHOLD then
                                    -- ✅ ABOVE THRESHOLD - PROCESS THIS SEED
                                    table.insert(seedsToProcess, {
                                        tool = tool,
                                        seedName = seedName,
                                        quantity = totalQuantity
                                    })
                                else
                                    -- ✅ BELOW THRESHOLD - TRACK FOR DISPLAY
                                    belowThresholdSeeds[seedName] = totalQuantity
                                end
                            end
                        end
                    end
                    
                    -- ✅ UPDATE TOTAL COUNT
                    totalSeeds = #seedsToProcess
                    
                    -- ✅ DISPLAY STATUS WITH THRESHOLD INFO
                    local thresholdInfo = """"
                    if next(belowThresholdSeeds) then
                        thresholdInfo = ""\n\n🚫 Below 500 threshold:\n""
                        for seedName, quantity in pairs(belowThresholdSeeds) do
                            thresholdInfo = thresholdInfo .. string.format(""• %s: %d\n"", seedName, quantity)
                        end
                    end
                    
                    if totalSeeds == 0 then
                        if next(belowThresholdSeeds) then
                            statusLabel.Text = ""✅ COMPLETE!\nNo seeds ≥500 to process."" .. thresholdInfo
                        else
                            statusLabel.Text = ""✅ COMPLETE!\nNo more seeds to process.""
                        end
                        isAutoPlantAndDeleteEnabled = false
                        
                        -- ✅ UPDATE CONTROL BUTTON WHEN COMPLETE
                        local buttonGui = player.PlayerGui:FindFirstChild(""PlantDeleteControlButton"")
                        if buttonGui and buttonGui:FindFirstChild(""ControlButton"") then
                            local controlButton = buttonGui.ControlButton
                            controlButton.Text = ""🗑️ START CLEANER""
                            controlButton.BackgroundColor3 = Color3.fromRGB(50, 150, 50)
                        end
                        
                        -- Auto-remove GUI after completion
                        task.wait(5)
                        if progressGui then progressGui:Destroy() end
                        return
                    end
                    
                    -- ✅ STEP 5: PROCESS EACH QUALIFIED SEED
                    for i, seedInfo in ipairs(seedsToProcess) do
                        if not isAutoPlantAndDeleteEnabled then break end
                        
                        local seedTool = seedInfo.tool
                        local seedName = seedInfo.seedName
                        local seedQuantity = seedInfo.quantity
                        
                        -- ✅ UPDATE PROGRESS WITH QUANTITY INFO
                        processedSeeds = i
                        statusLabel.Text = string.format(
                            ""🌱 PROCESSING: %s\n📦 Total Quantity: %d\n📊 Progress: %d/%d\n⏳ Step: Planting...%s"",
                            seedName, seedQuantity, processedSeeds, totalSeeds, thresholdInfo
                        )
                        
                        -- ✅ EQUIP SEED
                        seedTool.Parent = player.Character
                        task.wait(0.5)
                        
                        -- ✅ PLANT THE SEED
                        local plantPosition = Vector3.new(
                            plantSpot.Position.X + math.random(-5, 5),
                            plantSpot.Position.Y,
                            plantSpot.Position.Z + math.random(-5, 5)
                        )
                        
                        PlantRemote:FireServer(plantPosition, seedName)
                        task.wait(1) -- Wait for plant to appear
                        
                        -- ✅ UPDATE STATUS
                        statusLabel.Text = string.format(
                            ""🌱 PROCESSING: %s\n📦 Total Quantity: %d\n📊 Progress: %d/%d\n⏳ Step: Deleting...%s"",
                            seedName, seedQuantity, processedSeeds, totalSeeds, thresholdInfo
                        )
                        
                        -- ✅ FIND AND DELETE THE PLANTED PLANT
                        local planted = false
                        if playerPlot:FindFirstChild(""Important"") and 
                           playerPlot.Important:FindFirstChild(""Plants_Physical"") then
                            
                            for _, plant in ipairs(playerPlot.Important.Plants_Physical:GetChildren()) do
                                if plant.Name == seedName then
                                    -- Find the numbered child to delete
                                    for _, child in ipairs(plant:GetChildren()) do
                                        if tonumber(child.Name) then
                                            RemoveRemote:FireServer(child)
                                            planted = true
                                            break
                                        end
                                    end
                                    if planted then break end
                                end
                            end
                        end
                        
                        -- ✅ UNEQUIP SEED TOOL
                        if player.Character:FindFirstChild(seedTool.Name) then
                            seedTool.Parent = player.Backpack
                        end
                        
                        task.wait(0.5)
                    end
                end)
                
                task.wait(2) -- Brief pause before next cycle
            end
            
            autoPlantAndDeleteThread = nil
        end)
    else
        -- ✅ STOP THE PROCESS
        if autoPlantAndDeleteThread then
            task.cancel(autoPlantAndDeleteThread)
            autoPlantAndDeleteThread = nil
        end
        
        -- Remove GUI
        local progressGui = player.PlayerGui:FindFirstChild(""PlantDeleteProgress"")
        if progressGui then progressGui:Destroy() end
    end
    
    return isAutoPlantAndDeleteEnabled
end

-- ✅ CREATE CONTROL BUTTON ON STARTUP
createControlButton()

-- ✅ VISUAL FLOW DIAGRAM
--[[
┌─ Auto Plant & Delete Flow (With GUI Button) ─┐
│                                               │
├─ 1. Persistent Control Button                │
│    ├─ 🗑️ START CLEANER (Green)              │
│    └─ 🛑 STOP CLEANER (Red)                  │
│                                               │
├─ 2. Get Seed Quantities from Inventory Data  │
├─ 3. Find Farm & Planting Spot                │
├─ 4. Scan Backpack Seeds ─────────────────────┼─ Filter → SeedsToPlantAndDelete
│                                               │
├─ 5. Apply Threshold Check:                   │
│    ├─ Quantity ≥ 500? → Process              │
│    └─ Quantity < 500? → Skip & Display       │
│                                               │
├─ 6. For Each Qualified Seed:                 │
│    ├─ Equip Tool                             │
│    ├─ Plant at Random Position               │
│    ├─ Wait for Plant to Appear               │
│    ├─ Find & Delete Plant                    │
│    └─ Unequip Tool                           │
│                                               │
└─ 7. Auto-Update Button State                 │

🎮 Controls:
• Click button to start/stop
• Button changes color:
  - Green = Stopped/Ready
  - Red = Running/Active
• Hover effects for better visibility
• Button updates automatically on completion

⚙️ Button Features:
• Persistent (stays on screen)
• Visual state feedback
• Hover animations
• Auto-updates when process completes
• Positioned on left side for easy access
]]

print(""🗑️ INVENTORY CLEANER WITH GUI BUTTON LOADED!"")
print(""🔘 Click the button on screen to start/stop"")
print(""⚖️ Threshold: Only processes seeds with 500+ quantity"")
print(""🎯 Purpose: Clear excess inventory seeds to reduce lag"")"
4nM1G6YK,update_scripts.lua,gur111,Lua,Saturday 21st of June 2025 08:42:45 AM CDT,"-- pastebin ID: 4nM1G6YK
-- URL: https://pastebin.com/4nM1G6YK


-- Update script for downloading latest versions from pastebin
-- Usage: update

-- Configuration: Add your pastebin IDs and corresponding filenames here
local scripts = {
    -- Format: [""pastebin_id""] = ""filename"",
    -- Your actual pastebin IDs:
    [""Qky674zS""] = ""central_server"",
    [""LXSNkj5r""] = ""mine"",
    [""QbSGDWvG""] = ""turtle_server"",
    [""kfHc79KV""] = ""remotectl"",
    [""uqfTY1e5""] = ""platform"",
    [""4nM1G6YK""] = ""update"",

    -- Add more scripts here as needed:
}

-- Function to check if a file exists
local function fileExists(filename)
    return fs.exists(filename)
end

-- Function to backup a file
local function backupFile(filename)
    if fileExists(filename) then
        local backupName = filename .. "".backup""
        if fileExists(backupName) then
            fs.delete(backupName)
        end
        fs.copy(filename, backupName)
        print(""  Created backup: "" .. backupName)
        return true
    end
    return false
end

-- Function to download a script from pastebin
local function downloadScript(pastebinId, filename, createBackup)
    print(""Updating "" .. filename .. ""..."")

    -- Create backup if requested and file exists
    if createBackup then
        backupFile(filename)
    end

    -- Remove existing file if it exists
    if fileExists(filename) then
        print(""  Removing existing "" .. filename)
        fs.delete(filename)
    end

    -- Download new version
    print(""  Downloading from pastebin ID: "" .. pastebinId)
    local success = shell.run(""pastebin"", ""get"", pastebinId, filename)

    if success then
        print(""  Successfully updated "" .. filename)
        return true
    else
        print(""  Failed to download "" .. filename)

        -- Restore backup if download failed and backup exists
        local backupName = filename .. "".backup""
        if createBackup and fileExists(backupName) then
            print(""  Restoring backup..."")
            fs.copy(backupName, filename)
        end
        return false
    end
end

-- Main update function
local function updateAll(createBackups)
    print(""Starting script update process..."")
    if createBackups then
        print(""Backup mode: ON"")
    end
    print(""="" .. string.rep(""="", 50))

    local totalScripts = 0
    local successCount = 0
    local failCount = 0

    -- Count total scripts
    for _ in pairs(scripts) do
        totalScripts = totalScripts + 1
    end

    if totalScripts == 0 then
        print(""No scripts configured for update."")
        print(""Please edit the 'scripts' table in update.lua to add your pastebin IDs and filenames."")
        return
    end

    -- Update each script
    for pastebinId, filename in pairs(scripts) do
        if downloadScript(pastebinId, filename, createBackups) then
            successCount = successCount + 1
        else
            failCount = failCount + 1
        end
        print() -- Empty line for readability
    end

    -- Summary
    print(""="" .. string.rep(""="", 50))
    print(""Update complete!"")
    print(""Total scripts: "" .. totalScripts)
    print(""Successfully updated: "" .. successCount)
    print(""Failed: "" .. failCount)

    if failCount > 0 then
        print(""\nSome updates failed. Please check:"")
        print(""- Internet connection"")
        print(""- Pastebin IDs are correct"")
        print(""- Pastebin service is available"")
    end

    if createBackups and successCount > 0 then
        print(""\nBackup files created with .backup extension"")
        print(""You can remove them with: update cleanup"")
    end
end

-- Function to list configured scripts
local function listScripts()
    print(""Configured scripts:"")
    print(""="" .. string.rep(""="", 50))

    if next(scripts) == nil then
        print(""No scripts configured."")
        print(""Edit update.lua to add your pastebin IDs and filenames."")
    else
        for pastebinId, filename in pairs(scripts) do
            local status = fileExists(filename) and ""EXISTS"" or ""MISSING""
            print(string.format(""%-20s -> %-10s [%s]"", filename, pastebinId, status))
        end
    end
end

-- Function to clean up backup files
local function cleanup()
    print(""Cleaning up backup files..."")
    local cleanedCount = 0

    for _, filename in pairs(scripts) do
        local backupName = filename .. "".backup""
        if fileExists(backupName) then
            fs.delete(backupName)
            print(""Removed: "" .. backupName)
            cleanedCount = cleanedCount + 1
        end
    end

    print(""Cleaned up "" .. cleanedCount .. "" backup files."")
end

-- Function to add a new script to the update list
local function addScript(pastebinId, filename)
    if not pastebinId or not filename then
        print(""Usage: update add <pastebin_id> <filename>"")
        return
    end

    -- This is a simple way to show how to add scripts
    -- In practice, you'd want to modify the file or use a separate config file
    print(""To add this script to the update list, edit update.lua and add:"")
    print('[""' .. pastebinId .. '""] = ""' .. filename .. '"",')
    print(""to the scripts table."")
end

-- Function to show help
local function showHelp()
    print(""Update Script Help"")
    print(""="" .. string.rep(""="", 50))
    print(""update              - Update all scripts (no backups)"")
    print(""update backup       - Update all scripts with backups"")
    print(""update list         - List configured scripts and status"")
    print(""update cleanup      - Remove all .backup files"")
    print(""update add <id> <file> - Show how to add a script"")
    print(""update help         - Show this help"")
    print("""")
    print(""Configuration:"")
    print(""Edit the 'scripts' table in update.lua to add your pastebin IDs and filenames"")
end

-- Command line argument handling
local args = {...}
local command = args[1] or ""update""

if command == ""update"" or command == """" then
    updateAll(false)
elseif command == ""backup"" then
    updateAll(true)
elseif command == ""add"" then
    addScript(args[2], args[3])
elseif command == ""list"" then
    listScripts()
elseif command == ""cleanup"" then
    cleanup()
elseif command == ""help"" then
    showHelp()
else
    print(""Unknown command: "" .. command)
    print(""Use 'update help' for available commands."")
end
"
euzKP7aU,GoIT Scroller Script,vasylmartyniv,JavaScript,Saturday 21st of June 2025 08:42:19 AM CDT,"(() => {
  /**
   * Utility: Click a button matching a span text.
   */
  const clickButtonByText = (text) => {
    const button = [...document.querySelectorAll(""button"")].find(
      (btn) => btn.querySelector(""span"")?.innerText.trim() === text
    );
    button?.click();
  };

  /**
   * Utility: Click a button by selector if enabled.
   */
  const clickEnabledButton = (selector) => {
    const btn = document.querySelector(`${selector}:not([disabled])`);
    btn?.click();
  };

  /**
   * Quiz Interaction Steps
   */
  const actions = {
    selectFirstRadioOption: () => {
      const option = document.querySelector('input[type=""radio""]:not([disabled])');
      option?.click();
    },

    checkAnswer: () => {
      const button = [...document.querySelectorAll(""button"")].findLast(
        (btn) => btn.querySelector(""span"")?.innerText.trim() === ""Перевірити""
      );
      button?.click();
    },

    revealAnswer: () => clickButtonByText(""Дізнатися відповідь""),
    nextSection: () => clickEnabledButton(""#go-to-next-course-element""),
    nextModule: () => clickButtonByText(""До наступного модуля""),
	goToPracticalTask: () => clickButtonByText(""Перейти до практичного завдання""),
	next: () => clickButtonByText(""Далі""),
    nextBlock: () => clickButtonByText(""До наступного блоку""),
    scrollToBottom: () => window.scrollTo(0, document.body.scrollHeight),
  };

  /**
   * Observer Callback
   */
  const handleMutations = () => {
    actions.selectFirstRadioOption();
    actions.revealAnswer();
    actions.checkAnswer();
    actions.nextSection();
    actions.nextModule();
    actions.goToPracticalTask();
	actions.next();
    actions.nextBlock();
    actions.scrollToBottom();
  };

  /**
   * Start observing DOM changes
   */
  const observer = new MutationObserver(handleMutations);
  observer.observe(document.body, { childList: true, subtree: true });

  console.log(""Quiz automation started."");
})();
"
Qky674zS,central_server.lua,gur111,Lua,Saturday 21st of June 2025 08:40:00 AM CDT,"-- pastebin ID: Qky674zS
-- URL: https://pastebin.com/Qky674zS


-- Central Server: GPS Host + Simple Mainframe Server
-- Runs GPS host and a basic listening server in parallel

-- Default GPS coordinates (fallback if GPS not available)
local DEFAULT_GPS_X = -401
local DEFAULT_GPS_Y = 66
local DEFAULT_GPS_Z = -1007

-- Actual GPS coordinates (will be determined at startup)
local GPS_X, GPS_Y, GPS_Z

-- Turtle location tracking
local turtleLocations = {}
local LOCATIONS_FILE = ""turtle_locations.json""

-- Precious block tracking
local preciousReports = {}
local PRECIOUS_FILE = ""precious_reports.json""

-- Function to save turtle locations to disk
local function saveLocations()
    local file = fs.open(LOCATIONS_FILE, ""w"")
    if file then
        file.write(textutils.serialize(turtleLocations))
        file.close()
    end
end

-- Function to load turtle locations from disk
local function loadLocations()
    if fs.exists(LOCATIONS_FILE) then
        local file = fs.open(LOCATIONS_FILE, ""r"")
        if file then
            local data = file.readAll()
            file.close()
            if data and data ~= """" then
                turtleLocations = textutils.unserialize(data) or {}
                print(""Mainframe: Loaded "" .. #turtleLocations .. "" turtle locations from disk"")
            end
        end
    end
end

-- Function to save precious block reports to disk
local function savePreciousReports()
    local file = fs.open(PRECIOUS_FILE, ""w"")
    if file then
        file.write(textutils.serialize(preciousReports))
        file.close()
    end
end

-- Function to load precious block reports from disk
local function loadPreciousReports()
    if fs.exists(PRECIOUS_FILE) then
        local file = fs.open(PRECIOUS_FILE, ""r"")
        if file then
            local data = file.readAll()
            file.close()
            if data and data ~= """" then
                preciousReports = textutils.unserialize(data) or {}
                local totalReports = 0
                for turtleId, reports in pairs(preciousReports) do
                    totalReports = totalReports + #reports
                end
                print(""Mainframe: Loaded "" .. totalReports .. "" precious block reports from disk"")
            end
        end
    end
end

-- Function to calculate 3D distance between two points
local function calculateDistance(x1, y1, z1, x2, y2, z2)
    return math.sqrt((x2 - x1)^2 + (y2 - y1)^2 + (z2 - z1)^2)
end

-- Function to clean block name by removing everything before ':'
local function cleanBlockName(blockName)
    if not blockName then return ""unknown"" end
    local colonPos = string.find(blockName, "":"")
    if colonPos then
        return string.sub(blockName, colonPos + 1)
    else
        return blockName
    end
end

-- Function to open modem for the mainframe server
local function openModem()
    local sides = {""left"", ""right"", ""top"", ""bottom"", ""front"", ""back""}
    for _, side in ipairs(sides) do
        if peripheral.getType(side) == ""modem"" then
            rednet.open(side)
            print(""Mainframe: Modem opened on "" .. side)
            return true
        end
    end
    return false
end

-- Function to determine GPS coordinates
local function determineGPSCoordinates()
    print(""Central Server: Attempting to get GPS coordinates..."")
    local x, y, z = gps.locate(5) -- Wait up to 5 seconds for GPS fix

    if x and y and z then
        GPS_X, GPS_Y, GPS_Z = x, y, z
        print(""Central Server: GPS coordinates obtained: ("" .. GPS_X .. "", "" .. GPS_Y .. "", "" .. GPS_Z .. "")"")
    else
        GPS_X, GPS_Y, GPS_Z = DEFAULT_GPS_X, DEFAULT_GPS_Y, DEFAULT_GPS_Z
        print(""Central Server: GPS not available, using default coordinates: ("" .. GPS_X .. "", "" .. GPS_Y .. "", "" .. GPS_Z .. "")"")
    end
end

-- GPS Host function
local function runGPSHost()
    print(""GPS Host: Starting at coordinates ("" .. GPS_X .. "", "" .. GPS_Y .. "", "" .. GPS_Z .. "")"")
    shell.run(""gps"", ""host"", GPS_X, GPS_Y, GPS_Z)
end

-- Simple mainframe server function
local function runMainframeServer()
    if not openModem() then
        print(""Mainframe: No modem found!"")
        return
    end

    -- Load existing location data and precious reports
    loadLocations()
    loadPreciousReports()
    print(""Mainframe: Listening for turtle reports..."")

    while true do
        local senderId, message = rednet.receive()
        print(""Mainframe: Received from turtle "" .. senderId .. "": "" .. tostring(message))

        -- Handle different message types
        if message == ""discover_mainframe"" then
            -- Respond to mainframe discovery broadcasts
            rednet.send(senderId, ""mainframe_here"")
            print(""Mainframe: Responded to discovery request from "" .. senderId)
        elseif type(message) == ""table"" then
            if message.type == ""location"" and message.x and message.y and message.z then
                -- Store turtle location
                turtleLocations[senderId] = {
                    x = message.x,
                    y = message.y,
                    z = message.z,
                    timestamp = os.date(""%Y-%m-%d %H:%M:%S"")
                }
                saveLocations() -- Persist to disk
                print(""Mainframe: Updated location for turtle "" .. senderId .. "" to ("" .. message.x .. "", "" .. message.y .. "", "" .. message.z .. "")"")
                -- No acknowledgment sent back to turtle
            elseif message.type == ""precious"" and message.blockName and message.x and message.y and message.z then
                -- Store precious block report (avoid duplicates)
                if not preciousReports[senderId] then
                    preciousReports[senderId] = {}
                end

                -- Check for duplicate report (same turtle, same block, within 2 blocks distance)
                local isDuplicate = false
                for _, report in ipairs(preciousReports[senderId]) do
                    if report.blockName == message.blockName then
                        local distance = calculateDistance(report.x, report.y, report.z, message.x, message.y, message.z)
                        if distance < 2 then
                            isDuplicate = true
                            break
                        end
                    end
                end

                if not isDuplicate then
                    local cleanedBlockName = cleanBlockName(message.blockName)
                    table.insert(preciousReports[senderId], {
                        blockName = message.blockName, -- Store original for duplicate checking
                        cleanedBlockName = cleanedBlockName, -- Store cleaned for display
                        x = message.x,
                        y = message.y,
                        z = message.z,
                        timestamp = os.date(""%Y-%m-%d %H:%M:%S"")
                    })
                    savePreciousReports() -- Persist to disk
                    print(""Mainframe: Precious block report from turtle "" .. senderId .. "": "" .. cleanedBlockName .. "" at ("" .. message.x .. "", "" .. message.y .. "", "" .. message.z .. "")"")
                    -- No acknowledgment sent back to turtle
                else
                    -- Don't send acknowledgment for duplicate reports either
                    print(""Mainframe: Duplicate precious block report ignored from turtle "" .. senderId)
                end
            else
                -- Echo other table messages back
                rednet.send(senderId, ""Echo: "" .. textutils.serialize(message))
            end
        elseif message == ""get_locations"" then
            -- Send back all turtle locations
            rednet.send(senderId, turtleLocations)
        elseif type(message) == ""string"" and (message == ""get_precious"" or message:match(""^get_precious$"") or message:match(""^get_precious %-%-timestamp$"")) then
            -- Send back all precious block reports
            local showTimestamp = string.find(message, ""--timestamp"") ~= nil

            local allFormattedReports = {}
            for turtleId, reports in pairs(preciousReports) do
                local turtleReports = {}
                for _, report in ipairs(reports) do
                    local displayName = report.cleanedBlockName or cleanBlockName(report.blockName)
                    local reportStr = displayName .. "" at ("" .. report.x .. "", "" .. report.y .. "", "" .. report.z .. "")""
                    if showTimestamp then
                        reportStr = reportStr .. "" ["" .. report.timestamp .. ""]""
                    end
                    table.insert(turtleReports, reportStr)
                end
                if #turtleReports > 0 then
                    allFormattedReports[""turtle_"" .. turtleId] = turtleReports
                end
            end
            rednet.send(senderId, allFormattedReports)
        elseif type(message) == ""string"" and message:match(""^get_location "") then
            -- Get location for specific turtle
            local targetId = tonumber(message:match(""get_location (%d+)""))
            if targetId and turtleLocations[targetId] then
                rednet.send(senderId, turtleLocations[targetId])
            else
                rednet.send(senderId, ""Turtle not found or no location data"")
            end
        elseif type(message) == ""string"" and message:match(""^get_precious "") then
            -- Get precious reports for specific turtle
            local parts = {}
            for part in message:gmatch(""%S+"") do
                table.insert(parts, part)
            end

            local targetId = tonumber(parts[2])
            local showTimestamp = false

            -- Check for --timestamp flag
            for i = 3, #parts do
                if parts[i] == ""--timestamp"" then
                    showTimestamp = true
                    break
                end
            end

            if targetId and preciousReports[targetId] then
                local formattedReports = {}
                for _, report in ipairs(preciousReports[targetId]) do
                    local displayName = report.cleanedBlockName or cleanBlockName(report.blockName)
                    local reportStr = displayName .. "" at ("" .. report.x .. "", "" .. report.y .. "", "" .. report.z .. "")""
                    if showTimestamp then
                        reportStr = reportStr .. "" ["" .. report.timestamp .. ""]""
                    end
                    table.insert(formattedReports, reportStr)
                end
                rednet.send(senderId, formattedReports)
            else
                rednet.send(senderId, ""No precious block reports for turtle "" .. (targetId or ""unknown""))
            end
        elseif type(message) == ""string"" and message:match(""^scrub_precious "") then
            -- Clear precious reports for specific turtle
            local targetId = tonumber(message:match(""scrub_precious (%d+)""))
            if targetId then
                local count = preciousReports[targetId] and #preciousReports[targetId] or 0
                preciousReports[targetId] = nil
                savePreciousReports()
                print(""Mainframe: Scrubbed "" .. count .. "" precious block reports for turtle "" .. targetId)
                rednet.send(senderId, ""Scrubbed "" .. count .. "" precious block reports for turtle "" .. targetId)
            else
                rednet.send(senderId, ""Invalid turtle ID for scrub command"")
            end
        else
            -- Echo the message back
            rednet.send(senderId, ""Echo: "" .. tostring(message))
        end
    end
end

-- Main execution
print(""=== Central Server Starting ==="")

-- Determine GPS coordinates first
determineGPSCoordinates()

print(""Running GPS Host and Mainframe Server in parallel..."")

-- Run both services in parallel
parallel.waitForAll(runGPSHost, runMainframeServer)
"
ECMUYXzg,PipeManager,Cassimus,C#,Saturday 21st of June 2025 08:06:19 AM CDT,"using System.Numerics;
using Raylib_cs;

namespace FlappyBird;

public class PipeManager
{
    private const int pipeWidth = 80;
    private const int spawnInterval = 90;
    private int frameCounter;
    private Color pipeColor;
    private bool passed;

    public List<Pipe> Pipes { get; private set; }

    public PipeManager()
    {
        pipeColor = Color.Green;
        Pipes = new List<Pipe>();
        frameCounter = 0;
    }

    private void AddPipe()
    {
        int pipeGap = Raylib.GetRandomValue(150, 250);

        int pipeHeight =
            Raylib.GetRandomValue(100, Game.screenHeight - pipeGap - 100);

        Vector2 pipePosition = new Vector2(Game.screenWidth, 0);

        var pipe = new Pipe(pipePosition, pipeWidth, pipeHeight, pipeGap, pipeColor);
        Pipes.Add(pipe);
    }

    public void Update()
    {
        frameCounter++;

        if (frameCounter >= spawnInterval)
        {
            AddPipe();
            frameCounter = 0;
        }

        for (int i = 0; i < Pipes.Count; i++)
        {
            Pipes[i].Update();
            if (Pipes[i].IsOffScreen())
            {
                Pipes.RemoveAt(i);
            }
        }

    }


}"
4XH57MWY,Versions of KKlogger,sXrja,JSON,Saturday 21st of June 2025 07:49:00 AM CDT,"{
  ""self"": {
    ""version"": ""<Version String>"",
    ""url"": ""<Download-URL für den Updater>""
  },
  ""apps"": [
    {
      ""id"": ""<Winget-Package-ID>"",
      ""version"": ""<gewünschte Version oder leer>"",
      ""url"": ""<direkter Download-Link oder leer>""
    }
    ...
  ]
}"
i15F6d6d,Nametags Updated,NaroxEG,Lua,Saturday 21st of June 2025 07:43:05 AM CDT,"-- Custom Car Tags for Assetto Corsa Server
-- Parallelogram-style player tags with name, input type, country flag, and ping bars

local driverData = {}
local nametagCanvas = {}
local numberOfCars = 0
local globaldt = 0.016

-- Initialize data for all cars
for i = 0, 1000 do
    if not ac.getCar(i) then
        break
    end
    numberOfCars = numberOfCars + 1
    driverData[i] = {
        nationCode = """"  -- Initialize nation code
    }
    nametagCanvas[i] = {
        canvas = ui.ExtraCanvas(vec2(480, 120), 1, render.AntialiasingMode.ExtraSharpCMAA),
        fadeCurrent = 0,
        fadeTarget = 0,
        lastUpdate = 0
    }
end

local tagsDistance = 150
local updateInterval = 0.1

-- Function to get input type (returns type identifier)
function getInputType(carIndex)
    local car = ac.getCar(carIndex)
    if not car then return ""gamepad"" end
    
    -- Get current input values
    local steer = car.steer
    local gas = car.gas
    local brake = car.brake
    
    -- Enhanced detection logic
    local steerAbs = math.abs(steer)
    
    -- Check for digital inputs (keyboard) - very precise on/off values
    if (steerAbs > 0.98 or steerAbs == 0) and (gas > 0.95 or gas == 0) and (brake > 0.95 or brake == 0) then
        return ""keyboard""
    end
    
    -- Check for wheel - smooth analog steering with fine control
    if steerAbs > 0.02 and steerAbs < 0.98 then
        return ""wheel""
    end
    
    -- Default to gamepad/controller
    return ""gamepad""
end

-- Function to draw country flag
function drawCountryFlag(carIndex, x, y, alpha)
    -- Get nation code from driver data (this is how AC stores it)
    local nationCode = """"
    
    -- Try to get nation code from the driver data
    if driverData[carIndex] and driverData[carIndex].nationCode then
        nationCode = driverData[carIndex].nationCode
    end
    
    if nationCode ~= """" then
        -- Use local AC flag images
        local flagPath = ""/content/gui/NationFlags/"" .. nationCode .. "".png""
        local flagWidth = 24
        local flagHeight = 18
        
        local success = pcall(function()
            ui.drawImage(
                flagPath,
                vec2(x, y),
                vec2(x + flagWidth, y + flagHeight),
                rgbm(1, 1, 1, alpha)
            )
        end)
        
        -- Fallback if flag image doesn't exist - show nation code
        if not success and nationCode then
            ui.drawText(nationCode, vec2(x, y), rgbm(0.8, 0.8, 1.0, alpha))
        end
    else
        -- No country data available - show globe emoji
        ui.drawText(""🌍"", vec2(x, y), rgbm(0.6, 0.6, 0.6, alpha))
    end
end

-- Function to draw input icon (text or image)
function drawInputIcon(inputType, x, y, alpha)
    if inputType == ""wheel"" then
        -- Draw steering wheel image
        local wheelURL = ""https://i.ibb.co/ds8PPhzj/steering-wheel-1.png""
        local iconSize = 28  -- Size to match text icons
        
        local success = pcall(function()
            ui.drawImage(
                wheelURL,
                vec2(x, y),
                vec2(x + iconSize, y + iconSize),
                rgbm(1, 1, 1, alpha)
            )
        end)
        
        -- Fallback if URL loading fails
        if not success then
            ui.drawText(""🚗"", vec2(x, y), rgbm(1, 0.8, 0.2, alpha))
        end
    else
        -- Draw text icons for keyboard and gamepad
        local icon = ""🎮""  -- Default gamepad
        if inputType == ""keyboard"" then
            icon = ""⌨️""
        end
        ui.drawText(icon, vec2(x, y), rgbm(1, 0.8, 0.2, alpha))
    end
end

-- Function to draw ping bars
function drawPingBars(x, y, ping)
    local barWidth = 6
    local barHeight = 16
    local barSpacing = 3
    local maxBars = 4
    
    local bars = 4
    local barColor = rgb(0, 1, 0)
    
    if ping > 200 then
        bars = 1
        barColor = rgb(1, 0, 0)
    elseif ping > 150 then
        bars = 2
        barColor = rgb(1, 0.5, 0)
    elseif ping > 100 then
        bars = 3
        barColor = rgb(1, 1, 0)
    end
    
    for i = 1, maxBars do
        local barX = x + (i - 1) * (barWidth + barSpacing)
        local currentBarHeight = barHeight * (i / maxBars)
        local currentY = y + barHeight - currentBarHeight
        
        local alpha = (i <= bars) and 1.0 or 0.3
        local color = rgbm(barColor.r, barColor.g, barColor.b, alpha)
        
        ui.drawRectFilled(
            vec2(barX, currentY), 
            vec2(barX + barWidth, y + barHeight), 
            color
        )
    end
end

-- Function to draw parallelogram background
function drawParallelogram(x, y, width, height, color)
    local skew = 20
    
    local topLeft = vec2(x + skew, y)
    local topRight = vec2(x + width + skew, y)
    local bottomRight = vec2(x + width, y + height)
    local bottomLeft = vec2(x, y + height)
    
    ui.drawTriangleFilled(topLeft, topRight, bottomRight, color)
    ui.drawTriangleFilled(topLeft, bottomRight, bottomLeft, color)
    
    local borderColor = rgbm(0.4, 0.4, 0.4, 0.9)
    ui.drawLine(topLeft, topRight, borderColor, 2)
    ui.drawLine(topRight, bottomRight, borderColor, 2)
    ui.drawLine(bottomRight, bottomLeft, borderColor, 2)
    ui.drawLine(bottomLeft, topLeft, borderColor, 2)
end

-- Function to draw main area parallelogram (without right border)
function drawMainAreaParallelogram(x, y, width, height, color)
    local skew = 20
    
    local topLeft = vec2(x + skew, y)
    local topRight = vec2(x + width + skew, y)
    local bottomRight = vec2(x + width, y + height)
    local bottomLeft = vec2(x, y + height)
    
    ui.drawTriangleFilled(topLeft, topRight, bottomRight, color)
    ui.drawTriangleFilled(topLeft, bottomRight, bottomLeft, color)
    
    -- Only draw top, bottom, and left borders - no right border
    local borderColor = rgbm(0.4, 0.4, 0.4, 0.9)
    ui.drawLine(topLeft, topRight, borderColor, 2)
    ui.drawLine(bottomRight, bottomLeft, borderColor, 2)
    ui.drawLine(bottomLeft, topLeft, borderColor, 2)
end

-- Function to draw ping area background (darker section)
function drawPingAreaBackground(x, y, width, height)
    local skew = 20
    
    local topLeft = vec2(x + skew, y)
    local topRight = vec2(x + width + skew, y)
    local bottomRight = vec2(x + width, y + height)
    local bottomLeft = vec2(x, y + height)
    
    -- Draw darker background for ping area
    local pingBgColor = rgbm(0.01, 0.01, 0.01, 0.95)  -- Even darker, higher opacity
    ui.drawTriangleFilled(topLeft, topRight, bottomRight, pingBgColor)
    ui.drawTriangleFilled(topLeft, bottomRight, bottomLeft, pingBgColor)
    
    -- Draw angled separator line - positioned just to the left of ping bars
    local separatorX = x + 2  -- Move separator 2px to the right from ping area start
    local separatorTopLeft = vec2(separatorX + skew, y)
    local separatorBottomLeft = vec2(separatorX, y + height)
    local separatorColor = rgbm(0.5, 0.5, 0.5, 0.8)
    ui.drawLine(separatorTopLeft, separatorBottomLeft, separatorColor, 2)
end

-- Function to render the custom nametag
function renderCustomNametag(carData)
    local canvas = nametagCanvas[carData.index].canvas
    local carIndex = carData.index  -- Store the car index for consistency
    
    canvas:clear()
    
    -- Get all data for the specific car being processed
    local driverName = ac.getDriverName(carIndex)
    local ping = driverData[carIndex].ping or 50
    local inputType = getInputType(carIndex)  -- Use the correct car index
    
    if string.len(driverName) > 15 then
        driverName = string.sub(driverName, 1, 15) .. ""...""
    end
    
    -- Define layout
    local tagWidth = 440
    local tagHeight = 80
    local tagX = 20
    local tagY = 20
    local centerY = tagY + (tagHeight / 2)  -- 60
    
    -- Define ping area dimensions
    local pingAreaWidth = 135  -- Increased width to accommodate moved separator
    local pingAreaX = tagX + tagWidth - pingAreaWidth  -- Position at right side
    
    -- Draw main parallelogram with more opacity (no right border)
    drawMainAreaParallelogram(tagX, tagY, tagWidth - pingAreaWidth, tagHeight, rgbm(0.05, 0.05, 0.05, 0.7))
    
    -- Draw darker ping area background
    drawPingAreaBackground(pingAreaX, tagY, pingAreaWidth, tagHeight)
    
    -- Move ping elements left to fit better in parallelogram
    local pingBarsX = 350  -- Moved left from 385
    local pingBarsY = centerY - 8
    drawPingBars(pingBarsX, pingBarsY, ping)
    
    -- Using ui.drawText for text elements
    ui.pushFont(ui.Font.Main)
    
    -- Input icon - use new function that handles both text and image
    drawInputIcon(inputType, 60, centerY - 14, 1.0)  -- Adjusted Y to center image better
    
    -- Country flag - positioned between input icon and name, use correct car index
    drawCountryFlag(carIndex, 130, centerY - 9, 1.0)  -- Use carIndex instead of carData.index
    
    -- Player name - positioned with small gap from flag
    ui.drawText(driverName, vec2(170, centerY - 10), rgb(1, 1, 1))  -- Moved left to accommodate flag
    
    -- Ping text - positioned relative to ping bars
    ui.drawText(ping .. ""ms"", vec2(395, centerY - 8), rgb(0.9, 0.9, 0.9))
    
    ui.popFont()
end

-- Main nametag rendering function
function renderDriverNameTag(carData)
    CurrentlyProcessedCar = carData
    
    -- Update driver data BEFORE rendering
    driverData[carData.index].racePosition = carData.racePosition
    driverData[carData.index].driverName = ac.getDriverName(carData.index)
    driverData[carData.index].ping = carData.ping or math.random(30, 120) -- Fallback for testing
    driverData[carData.index].distanceToCamera = carData.distanceToCamera
    
    -- Try to get nation code from available sources
    if not driverData[carData.index].nationCode or driverData[carData.index].nationCode == """" then
        -- Try different methods to get nation code
        local nationCode = """"
        
        -- Method 1: Try ac.getDriverInfo if it exists
        local success, driverInfo = pcall(function()
            return ac.getDriverInfo(carData.index)
        end)
        if success and driverInfo and driverInfo.nation then
            nationCode = driverInfo.nation
        end
        
        -- Method 2: Try alternative AC functions for nation code
        if nationCode == """" then
            local success2, nation = pcall(function()
                return ac.getDriverNation(carData.index)
            end)
            if success2 and nation then
                nationCode = nation
            end
        end
        
        -- Store the nation code (empty string if not found)
        driverData[carData.index].nationCode = nationCode
    end
    
    local currentTime = os.clock()
    if not driverData[carData.index].lastUpdate then
        driverData[carData.index].lastUpdate = currentTime
    end
    
    local shouldUpdate = (currentTime - driverData[carData.index].lastUpdate) > updateInterval
    
    if shouldUpdate and driverData[carData.index].distanceToCamera < tagsDistance then
        nametagCanvas[carData.index].canvas:update(function()
           renderCustomNametag(carData)
        end)

        driverData[carData.index].lastUpdate = currentTime
    end
    
    if driverData[carData.index].distanceToCamera < tagsDistance then
        local distance = driverData[carData.index].distanceToCamera
        local sizeScale = math.clamp(((tagsDistance - distance) / tagsDistance)^0.5, 0.6, 1.4)
        
        nametagCanvas[carData.index].fadeTarget = math.clamp((tagsDistance - distance) / (tagsDistance * 0.2), 0, 1)
        
        local fadeSpeed = globaldt * 4
        if nametagCanvas[carData.index].fadeTarget > nametagCanvas[carData.index].fadeCurrent then
            nametagCanvas[carData.index].fadeCurrent = math.min(
                nametagCanvas[carData.index].fadeCurrent + fadeSpeed, 
                nametagCanvas[carData.index].fadeTarget
            )
        else
            nametagCanvas[carData.index].fadeCurrent = math.max(
                nametagCanvas[carData.index].fadeCurrent - fadeSpeed, 
                nametagCanvas[carData.index].fadeTarget
            )
        end
        
        if nametagCanvas[carData.index].fadeCurrent > 0.01 then
            local canvasWidth = 480 * sizeScale
            local canvasHeight = 120 * sizeScale
            local canvasX = (600 - canvasWidth) / 2
            local canvasY = (250 - canvasHeight) / 2
            
            ui.drawImage(
                nametagCanvas[carData.index].canvas, 
                vec2(canvasX, canvasY), 
                vec2(canvasWidth, canvasHeight), 
                rgbm(1, 1, 1, nametagCanvas[carData.index].fadeCurrent)
            )
        end
    else
        nametagCanvas[carData.index].fadeTarget = 0
        nametagCanvas[carData.index].fadeCurrent = 0
    end
end

function script.update(dt)
    globaldt = dt
end

ui.onDriverNameTag(
    true, 
    rgbm(1, 1, 1, 0), 
    renderDriverNameTag, 
    {
        mainSize = 1.2, 
        mirrorSize = 4, 
        distanceMultiplier = 3, 
        tagSize = vec2(600, 250)
    }
)"
YeM6fNCb,Pipe,Cassimus,C#,Saturday 21st of June 2025 07:41:35 AM CDT,"
using System.Numerics;
using Raylib_cs;

namespace FlappyBird;

public class Pipe
{
    private const int moveSpeed = 2;

    private Vector2 position;
    private readonly int width;
    private readonly int height;
    private readonly int gap;
    private readonly Raylib_cs.Color color;

    public Vector2 Position { get { return position; } }
    public int Width => width;
    public bool Passed { get; set; }

    public Pipe(Vector2 position, int width, int height, int gap, Color color)
    {
        this.position = position;
        this.width = width;
        this.height = height;
        this.gap = gap;
        this.color = color;
        this.Passed = false;
    }

    public void Update()
    {
        position.X -= moveSpeed;
    }

    public void Draw()
    {
        Raylib.DrawRectangle((int)position.X, (int)position.Y, width, height, color);

        Raylib.DrawRectangle((int)position.X, (int)position.Y + height + gap,
                width, Game.screenHeight - height - gap, color);
    }

    public bool IsOffScreen()
    {
        return position.X + width < 0;
    }

    public bool CheckCollision(Vector2 birdPosition)
    {
        bool collisionTopPipe = false;
        bool collisionBottomPipe = false;

        collisionTopPipe = birdPosition.X + Bird.size > position.X &&
                            birdPosition.X - Bird.size < position.X + width &&
                            birdPosition.Y - Bird.size < position.Y + height;

        collisionBottomPipe = birdPosition.X + Bird.size > position.X &&
                            birdPosition.X - Bird.size < position.X + width &&
                            birdPosition.Y + Bird.size > position.Y + height + gap;

        return collisionTopPipe || collisionBottomPipe;
    }

}
"
