id,title,username,language,date,content
NhRqzMuZ,ocr.py,sbbjun,Python,Sunday 19th of October 2025 05:06:46 AM CDT,"# 下載VideoSubFinder, 改path_VideoSubFinder
# 裝CUDA 12.9
# pip install paddlepaddle-gpu -i https://www.paddlepaddle.org.cn/packages/nightly/cu129/
# pip install paddleocr

import os
import glob
import subprocess
import time
import argparse
import numpy as np
from PIL import Image
from paddleocr import PaddleOCR

path_VideoSubFinder = r""D:\work\workspace\SubtitleOCR\VideoSubFinder""
fn_VideoSubFinder = ""VideoSubFinderWXW_intel.exe""
path_VideoSubFinder_exe = fr""{path_VideoSubFinder}\{fn_VideoSubFinder}""
path_sub_images = fr""{path_VideoSubFinder}\RGBImages""

parser = argparse.ArgumentParser()
parser.add_argument('-i', '--image', required=False, help='image file path')
parser.add_argument('-v', '--video', required=False, help='video file path')
parser.add_argument('-te', '--sub_top', type=float, default=0.15, help='top of subtitle, percent offset of height, from bottom. (default=0.15)')
parser.add_argument('-be', '--sub_bottom', type=float, default=0.05, help='bottom of subtitle, percent offset of height, from bottom. (default=0.05)')
parser.add_argument('-mw', '--ocr_min_width', type=int, default=100, help='ocr: minimum text width. (default=100)')
parser.add_argument('-mh', '--ocr_min_height', type=int, default=50, help='ocr: minimum text height. (default=50)')
args = parser.parse_args()

print(""Initializing PaddleOCR..."")
ocr = PaddleOCR(
    text_detection_model_name=""PP-OCRv5_server_det"",
    text_recognition_model_name=""PP-OCRv5_server_rec"",
    use_doc_orientation_classify=False,
    use_doc_unwarping=False,
    use_textline_orientation=False,
)

def do_ocr(img_path):
    try:
        img = np.array(Image.open(img_path).convert('RGB'))
    except Exception as e:
        print(f""[ERROR] Failed to open image {img_path}: {e}"")
        return """"

    result = ocr.predict(img)
    for res in result:
        if 'rec_texts' not in res or 'rec_polys' not in res:
            continue
        txts, polys = res['rec_texts'], res['rec_polys']
        kept_txts = []
        for txt, poly in zip(txts, polys):
            xs = [p[0] for p in poly]
            ys = [p[1] for p in poly]
            width, height = max(xs) - min(xs), max(ys) - min(ys)
            if height >= args.ocr_min_height and width >= args.ocr_min_width:
                kept_txts.append(txt)
        if kept_txts:
            return "" "".join(kept_txts)
    return """"

# If only an image is provided, do single OCR and exit
if args.image and not args.video:
    print(f""Performing OCR on image: {args.image}"")
    txt = do_ocr(args.image)
    print(txt)
    print(""Single image OCR complete."")
    exit(0)

if not args.video:
    print(""[ERROR] Missing required argument: -v/--video when not using -i/--image only."")
    exit(1)

# Step 1: Run VideoSubFinder
print(""Step 1: Running VideoSubFinder..."")
params = [path_VideoSubFinder_exe, '-uc', '-c', '-r', '-i', args.image or args.video, '-te', str(args.sub_top), '-be', str(args.sub_bottom)]
proc = subprocess.Popen(params)

print(""Waiting for VideoSubFinder to complete..."")
flag_first = True
path_sub_images_jpeg = os.path.join(path_sub_images, '*.jpeg')
while proc.poll() is None:
    time.sleep(3)
    jpegs = glob.glob(path_sub_images_jpeg)
    if jpegs:
        print(jpegs[-1], flush=True)
        if flag_first:
            os.startfile(jpegs[0])
            flag_first = False
print(""VideoSubFinder finished."")


# Step 2: Get subtitle image files
print(""Step 2: Collecting subtitle images..."")
imgs = sorted(glob.glob(os.path.join(path_sub_images, '*.jpeg')))
print(f""Found {len(imgs)} subtitle images."")

# Step 3: OCR each subtitle image and generate VTT
print(""Step 3: Performing OCR and writing .vtt file..."")
output_vtt = f""{args.video}.vtt""
with open(output_vtt, 'w', encoding='utf-8') as f:
    f.write(""WEBVTT\n\n"")
    for img in imgs:
        base = os.path.basename(img)
        parts = base.split('__')
        if len(parts) < 2:
            continue
        start, end = parts[0], parts[1].split('_000000')[0]
        start = start.replace('_', ':', 2).replace('_', '.')
        end = end.replace('_', ':', 2).replace('_', '.')
        txt = do_ocr(img)
        if not txt:
            continue
        print(f""[{time.strftime('%H%M%S')}] {start} --> {end}: {txt}"")
        f.write(f""{start} --> {end}\n{txt}\n\n"")

print(f""Subtitle extraction complete: {output_vtt}"")
"
pBj1CjcE,Gunung Meledak,yocky12k,Lua,Sunday 19th of October 2025 04:39:28 AM CDT,"--[[ v1.0.0 https://wearedevs.net/obfuscator ]] return(function(...)local i={""\048\118\117\098\048\118\100\074"";""\075\108\054\107\075\067\048\111\083\115\055\061"",""\057\098\106\114\065\078\061\061"",""\051\056\052\097\115\073\089\081\067\115\089\110\119\077\116\069"";""\078\057\047\068\055\115\056\052"",""\075\072\061\061"",""\112\105\085\072\065\088\049\114\083\086\057\061"",""\105\068\120\101\075\097\081\061"",""\050\119\090\108\120\078\061\061"",""\054\052\119\089"";""\055\088\069\079\097\057\108\078\085\043\100\047\065\101\054\089\115\065\122\061"",""\116\074\116\067\048\075\047\112\097\110\117\112\119\056\069\107\097\053\112\061"";""\085\110\052\079\047\078\061\061"",""\085\116\105\053\107\111\082\088\119\119\101\103\078\119\120\110\081\073\117\106\090\079\077\116\043\097\072\081\114\099\108\089\105\077\114\072\079\118\055\100\050\057\069\120"",""\047\099\108\122\067\097\119\061"";""\073\118\117\118\097\079\061\061"";""\116\077\089\108\122\077\116\068\081\112\051\052\085\077\116\066\085\077\116\101\081\078\061\061"",""\054\083\106\070\099\079\061\061"",""\067\086\072\052\047\084\111\080\067\072\061\061"";""\055\053\050\120\055\053\089\057"",""\047\088\069\056\055\072\061\061"";""\103\070\098\070\068\113\050\078\071\090\119\087\053\078\061\061"";""\116\076\109\085\118\078\118\079"";""\082\107\112\098\090\077\117\120\071\120\088\086"",""\088\097\051\053\118\111\120\069\122\066\052\101\109\065\075\116\075\052\081\084\056\079\115\121\081\108\122\061"",""\082\100\117\066\082\106\077\106"";""\087\118\048\088\108\110\048\075\086\084\082\086\054\114\061\061"",""\055\075\052\057\047\078\061\061"";""\077\088\052\068"",""\114\047\111\075\111\116\072\106\067\119\075\053\052\072\061\061"",""\112\099\067\080\113\114\061\061"",""\068\083\075\083\088\099\110\074\090\075\072\050\048\109\072\061"",""\118\077\085\098\089\079\082\089\047\047\108\105\122\090\055\057\054\055\107\111\120\049\109\098"",""\118\122\050\078"",""\102\079\050\109"";""\065\082\105\107\069\070\084\100\115\098\073\085\102\106\073\116\089\079\082\101\114\072\061\061"";""\070\089\097\068\084\078\072\061"";""\100\049\047\120\102\078\079\113\066\068\111\061"";""\083\085\065\086\103\087\112\110"";""\109\105\120\066\052\103\120\072\112\120\114\103\069\078\061\061"";""\084\086\067\077\105\114\061\061"";""\122\108\067\108\047\104\082\102\097\116\055\061"",""\084\089\117\106\052\056\066\066\071\122\069\106\053\053\056\049\083\077\072\121\086\079\061\061"",""\117\113\082\057\117\071\048\085\090\076\055\061"",""\122\077\069\054\055\088\047\112\069\073\050\073\102\077\056\087"",""\050\120\108\101\110\099\101\056\075\090\112\102\122\055\099\070\080\087\122\061"",""\069\055\054\121\106\085\083\047\111\114\061\061"";""\071\088\081\075\109\067\105\049\070\110\098\114\098\114\061\061"";""\115\077\080\088\122\101\070\047\102\053\069\047\122\118\052\098\115\102\101\061"",""\105\053\052\052\051\075\112\081\099\074\055\061"",""\119\049\120\109\057\108\110\102"";""\081\077\043\102\102\057\119\088\048\101\102\055\076\065\121\116\097\065\084\072\051\114\061\061"",""\084\122\065\066\065\079\112\098\111\048\110\052\066\106\112\054\050\078\061\061"",""\113\081\050\071\066\101\054\078\076\078\061\061"";""\116\073\116\066\085\077\050\068\119\079\061\061"";""\083\081\117\073\071\083\066\071\067\078\061\061"",""\108\047\077\054"",""\085\077\050\074\085\110\100\080\103\073\122\061"";""\075\084\098\052\070\047\087\061"";""\113\090\109\088\071\055\071\061"";""\067\106\103\068\065\120\099\103\119\075\104\101"";""\074\121\115\090\056\119\082\084\047\085\079\098\100\115\121\119\086\112\111\104\075\112\086\049\089\107\078\069\048\065\089\117"";""\108\108\068\086"";""\083\097\065\101\113\112\116\090\052\056\119\116"",""\090\113\104\098\116\085\076\112\068\050\087\061"",""\048\073\054\112\047\057\112\068\078\053\057\054\078\118\116\120\048\088\072\061"",""\098\072\065\049\074\057\052\120\069\114\061\061"",""\069\071\107\098\109\117\084\051\068\079\108\085\089\098\108\083\079\119\100\051\097\097\055\053\087\072\061\061"";""\116\066\100\101\115\043\117\110\097\110\081\054\065\101\116\067\103\116\055\061"",""\119\066\056\049\119\056\053\102\066\114\101\061"",""\075\078\102\072\107\089\080\088\072\118\070\055\065\117\050\089\104\110\081\061"";""\069\054\122\061"";""\090\055\120\066\074\114\061\061"",""\078\053\090\089"",""\069\075\071\110\101\101\121\073\069\097\048\077\101\049\108\067\111\104\099\069\106\079\061\061"";""\084\043\113\116\054\087\102\078\077\085\076\097\114\086\121\047\097\078\061\061"";""\065\086\082\057\099\079\079\061"",""\069\110\086\043\080\122\122\099\077\056\043\108\100\089\072\061"";""\074\104\047\072\051\097\047\084\043\088\087\061"";""\101\056\051\107\051\079\119\048\049\056\087\048\098\075\075\072\082\048\055\061"";""\097\043\069\055\051\116\072\054\105\118\069\054\051\116\119\056\055\052\102\061"";""\082\048\078\072\080\079\061\061"",""\098\082\055\049\107\077\068\117\112\121\119\043"",""\067\074\078\107\119\104\083\071\097\080\080\067\057\072\061\061"",""\097\118\087\078\056\088\079\106\098\072\061\061"",""\118\056\050\108\047\118\051\098\085\077\089\086\103\077\102\061"";""\084\073\090\089\068\050\086\043\070\088\118\043\084\050\055\061"";""\102\053\116\057\078\053\050\068\047\078\061\061"",""\098\055\113\112\057\105\122\065\070\111\082\115\076\101\106\068\047\066\054\087\077\101\104\116"",""\101\099\083\110"";""\069\067\069\079\077\114\061\061"",""\075\118\106\082\067\102\122\089\113\122\079\050"",""\103\049\112\120\076\083\090\088\103\055\082\110\068\114\053\089\084\116\117\112\090\119\079\061"";""\078\115\081\098"",""\090\069\050\065\104\117\102\061"",""\104\070\054\078\074\114\061\061"";""\118\116\104\051\069\069\113\049\073\066\114\076\057\110\055\061"",""\103\088\119\061"";""\116\055\111\066\052\065\118\049\085\067\110\108"";""\082\055\069\121\099\074\065\081\120\054\099\049"";""\069\106\114\049\085\047\067\113\075\118\079\052\074\087\054\067\118\067\048\087\065\114\061\061"";""\074\104\075\101\100\107\081\061"",""\080\086\071\051\098\109\098\103\080\110\072\061"";""\085\089\120\057\089\054\104\054\109\052\057\077\052\107\043\065\079\071\087\053\073\089\084\049\069\109\075\116\116\117\113\078\085\099\114\114"",""\112\117\085\108\119\121\086\101\054\054\077\052\120\056\113\103\108\089\112\089"",""\050\113\102\122"";""\112\055\072\114\066\078\061\061"",""\118\054\098\110\069\100\049\120\087\056\119\079\100\052\089\087\081\114\061\061"",""\107\083\098\047\067\072\061\061"",""\065\105\047\119\098\106\121\071\068\068\089\117\073\117\076\086\054\089\098\052\076\100\122\108\116\103\087\069\055\121\113\049\049\053\086\113\057\107\084\051\057\081\110\055\105\089\051\086\078\100\078\101\119\072\076\120\069\082\112\090\116\075\065\052\049\114\061\061"";""\048\099\103\065\099\087\072\061"",""\048\072\089\114\071\090\118\106\099\108\067\055\097\077\122\061"",""\047\121\072\088"",""\067\072\061\061"",""\118\079\082\071\066\082\113\107\082\079\061\061"",""\104\074\109\103\103\101\117\043\087\116\111\061"",""\050\114\101\077\049\043\087\061"";""\068\070\057\076\112\056\087\089\065\116\047\100\109\066\119\114\052\067\053\106\086\078\061\061"";""\103\050\107\110\068\109\114\075\090\117\048\080\077\121\049\067\077\078\061\061"";""\066\087\056\103\078\079\061\061"",""\052\120\116\099\113\109\099\056\084\048\110\112\068\070\057\061"",""\101\104\066\085\089\112\117\116\084\054\073\086\111\072\061\061"";""\105\089\117\100\047\077\108\100\122\101\100\070\116\115\050\048"",""\105\109\099\115\089\116\113\051\071\077\121\065\048\118\087\115\090\072\061\061"";""\122\053\116\057\103\115\116\057\055\118\051\098\055\073\070\052"";""\048\102\085\054\097\075\051\120\069\077\089\073\078\101\055\053\103\101\079\061"";""\119\083\108\083\072\077\057\052\043\118\072\061"";""\066\120\077\074\084\085\102\061"",""\067\121\104\051\116\084\111\087\057\072\061\061"",""\088\086\053\119"",""\067\110\089\066\047\102\050\098\085\052\052\051\055\073\112\053"",""\051\079\061\061"",""\111\070\119\082\111\116\101\061"",""\050\113\106\117\122\078\061\061"";""\049\043\065\086\054\079\061\061"",""\100\103\079\117\066\086\057\049\078\099\098\067"",""\043\072\089\111\053\048\089\113\050\079\061\061"",""\108\070\053\072\106\087\118\047\120\066\070\069"",""\101\105\105\076\068\079\061\061"";""\100\067\087\084\117\087\077\108\120\087\111\061"",""\072\055\081\056\119\099\102\055\080\076\081\100\100\115\122\061"",""\099\111\112\053\074\083\065\071\122\114\061\061"";""\049\082\116\088\116\056\085\075\072\080\122\061"";""\097\102\047\070\103\116\098\081\116\089\085\048\069\110\072\057\085\078\061\061"",""\109\074\075\072\112\078\061\061"";""\068\057\043\117\067\078\061\061"";""\109\109\116\075\073\110\122\061"",""\051\073\052\120\047\112\047\080\122\075\069\057\078\053\098\080\103\077\051\109\047\101\069\087\055\118\069\074"";""\098\047\075\121\082\073\084\112\101\072\061\061"";""\066\075\047\047\068\120\067\101\073\052\101\111\085\114\061\061"";""\118\056\050\075\055\079\061\061"";""\105\121\075\053\087\078\061\061"";""\085\082\053\100\110\068\078\077\075\078\061\061"";""\100\111\072\056\055\075\106\106\085\056\114\061"",""\116\099\067\051"";""\085\053\071\081\120\053\090\119\072\050\114\073"";""\078\088\100\052\055\118\051\052\102\053\116\066\085\077\052\107\103\072\061\061"";""\118\057\122\061"",""\052\080\077\106\109\067\113\107"",""\116\056\089\068\048\077\098\110\115\077\050\100\051\057\100\049\047\078\061\061"",""\049\090\074\052\121\122\104\110\101\115\077\066"",""\116\053\089\080\085\112\047\107\122\101\069\111\048\115\070\101"",""\116\053\089\080\085\114\061\061"",""\078\082\086\115\053\086\112\098\116\074\078\100\097\072\056\073\112\050\078\061"";""\102\110\101\070\085\102\080\057\047\101\050\066\102\053\102\071\069\066\119\061"";""\080\090\080\106\121\097\088\050\122\116\114\061"";""\114\081\073\056\055\080\074\051\088\097\076\071\048\078\061\061"",""\078\114\049\074\112\073\048\079\070\052\065\104\083\080\099\061"";""\053\074\120\079\050\072\061\061"",""\116\103\043\089\121\087\087\105\111\083\110\118\083\066\118\074\122\078\055\050\069\052\080\119\082\106\088\075\102\075\082\112\067\100\103\050\082\114\061\061"";""\109\109\120\052\102\078\061\061"",""\103\115\089\057\048\114\061\061"",""\119\073\080\043\065\075\089\077\116\116\051\054\085\112\050\067\105\043\122\061"";""\078\088\100\052\055\118\051\052\102\077\089\068\055\115\085\068\055\118\117\111"";""\050\068\114\078"",""\077\121\115\071\073\105\080\057\067\047\050\113\115\081\118\110\104\056\083\122\102\072\061\061"";""\115\080\119\121\109\122\068\051\086\100\115\067\111\108\088\071\067\098\080\115\077\072\061\061"";""\081\078\110\119\052\100\099\107\053\050\079\107\088\082\122\061"";""\084\116\047\115\066\078\061\061"",""\112\098\088\080\043\078\061\061"",""\119\052\047\047\119\110\080\100\116\102\050\113\085\053\111\053\051\072\061\061"";""\072\065\085\098\102\078\061\061"",""\056\073\086\073\074\120\109\083\109\098\070\084\117\072\061\061"",""\080\077\068\083\047\072\061\061"";""\112\074\053\049\055\117\083\078\073\050\080\072\116\114\061\061"",""\082\048\055\043\120\047\075\070\110\081\099\054\117\098\053\050\070\052\098\053\079\085\120\078"";""\115\090\114\101\053\114\061\061"",""\070\070\104\104\119\089\101\099\078\113\072\061"",""\086\076\120\088\050\114\061\061"",""\076\106\066\116"",""\100\119\079\079\083\105\052\116\102\047\109\047\114\072\061\061"",""\052\048\111\107\090\047\109\075\075\049\053\120\069\075\086\085\068\121\067\070\107\118\043\075\100\054\119\111\113\107\055\118\116\097\116\113\110\047\116\050\117\071\112\047\052\089\043\102\107\069\116\109\103\056\066\100\081\083\048\069\050\116\054\090"";""\084\081\114\066\111\103\089\119\106\114\047\066\083\100\079\106\118\113\088\080\043\065\107\121\056\115\101\112\070\100\122\061"";""\078\053\098\098\103\073\085\052\102\088\051\098\085\077\102\061"";""\105\055\055\085\081\078\061\061"",""\106\107\108\043"",""\080\078\048\073\074\099\081\055"",""\106\053\067\088\114\114\061\061"";""\066\077\071\097\090\114\061\061"",""\102\053\116\057"",""\103\077\116\120"",""\097\115\054\074\085\077\089\120\055\053\102\061"";""\077\074\053\067\080\102\101\052\108\112\072\061"";""\048\115\056\049\119\102\057\056\103\075\085\118\102\056\085\043\048\088\111\061"",""\075\043\083\075\053\114\052\066\055\117\083\098"";""\071\078\049\110\106\120\069\099\055\082\101\108\075\085\080\098\099\108\080\055\102\072\061\061"";""\085\088\069\070\116\102\089\043\078\102\047\121\105\102\047\083\116\102\111\061"";""\108\117\120\100\103\114\061\061"",""\090\103\075\117\106\100\114\075\098\105\101\104\085\053\074\089\080\069\080\052\055\108\103\069\117\052\070\110\099\107\102\055\054\052\085\076\090\079\061\061"";""\085\090\103\098\101\079\061\061"",""\109\108\051\114\113\111\086\104\103\068\076\090\106\089\051\074\110\048\097\121\116\055\072\061"";""\056\078\048\086\051\079\061\061"";""\054\083\122\107\085\078\061\061"";""\120\119\097\056\111\068\076\103\080\080\083\102\080\069\119\103\121\113\085\098\081\103\103\069\108\047\090\104\055\070\080\112\108\119\101\069\088\088\057\061"",""\103\100\109\111\119\078\061\061"",""\055\056\107\118"",""\116\054\048\090\097\079\061\061"",""\097\105\110\052\098\077\090\115\121\099\100\101\097\100\080\047\089\101\075\117\049\072\061\061"";""\119\121\082\085\099\111\048\114\110\049\110\106\078\112\084\117\122\055\051\056"";""\085\053\050\068\048\088\069\079\055\115\069\052"",""\121\114\122\087\114\078\061\061"";""\089\104\111\079\069\088\084\087\114\079\061\061"",""\056\084\047\069"";""\097\053\068\104\104\097\048\057\099\056\053\056\120\081\055\112"";""\122\075\100\047\116\110\089\108\116\053\116\083\085\075\085\075\078\115\079\061"";""\099\054\048\120\087\102\056\057"",""\055\107\083\098\050\082\116\054"";""\053\098\050\047\103\108\086\086\107\105\050\106\117\079\119\055\055\066\069\054\103\072\084\108\090\100\109\071\117\078\061\061"",""\098\101\077\104\043\075\071\047\108\090\082\075\122\048\071\087\113\103\102\061"";""\098\070\065\111\089\072\061\061"",""\120\115\112\099\080\087\071\069\050\097\087\061"";""\050\053\121\068\057\119\069\072\088\078\061\061"",""\087\074\055\113\112\053\076\057\086\110\082\074"";""\105\072\118\054\051\072\061\061"",""\107\113\107\087\104\112\083\112"",""\052\115\097\086"",""\122\077\089\080\122\075\119\061"",""\077\078\100\055\072\072\061\061"",""\103\053\056\071\119\056\051\087\102\114\061\061"";""\121\072\061\061"";""\049\050\066\116\112\043\104\047"";""\065\065\102\056\102\089\072\088\065\075\117\081\085\102\056\104\085\079\061\061"";""\114\052\048\047\084\103\082\083\071\070\083\052\110\088\117\111\110\114\061\061"",""\051\053\116\057\102\053\116\068\085\073\052\066\047\078\061\061"";""\122\073\116\108\103\088\047\052"";""\112\109\083\090\105\056\119\087\118\121\072\075\115\086\101\118"";""\108\122\081\051\054\073\043\071\070\052\073\103\109\050\106\077\106\109\076\078\103\122\048\103"";""\074\084\103\097\070\079\061\061"";""\118\086\076\051\065\051\048\102\065\105\072\061"",""\073\118\099\099\069\108\086\115\076\079\061\061"",""\074\099\050\111\101\084\103\107\108\114\061\061"",""\048\053\054\043\119\052\100\112\085\073\070\118\065\101\100\086"",""\056\090\098\080\099\047\100\049\066\078\061\061"",""\086\052\097\112\113\114\061\061"";""\090\076\100\082\110\070\052\086"";""\105\120\101\100\099\084\119\089\099\097\099\061"",""\073\083\077\076"",""\115\065\078\057\069\102\085\055\055\073\108\056\097\101\079\053\116\114\061\061"";""\090\119\069\055\071\048\102\079\070\079\111\107\084\072\061\061"",""\055\073\089\116\085\074\047\081\102\089\117\089\119\052\069\100"";""\075\081\103\098\074\079\074\067\106\069\047\090\110\054\048\086"";""\048\101\078\061"";""\054\053\097\097\100\068\099\054\088\075\111\080\118\069\071\061"";""\070\066\108\067\113\047\057\108\097\097\102\054\078\114\061\061"";""\104\055\055\085\117\048\079\048\106\072\061\061"";""\067\107\079\112\080\074\072\057\089\103\102\084\049\113\084\081\117\074\084\102\054\078\061\061"",""\065\076\083\054\108\098\112\061"",""\077\079\114\099\080\068\065\103\117\053\043\117\109\113\057\084"",""\055\057\085\054\078\066\098\074\047\057\052\069\085\102\054\113\102\102\108\073"";""\047\073\070\107\103\088\081\061"",""\112\073\088\073"";""\077\117\072\079\047\103\114\061"",""\051\073\052\120\047\112\047\080\122\075\069\057\078\053\098\080\103\077\078\061"";""\065\113\043\104\070\088\103\100\117\071\057\061"",""\052\090\043\114\074\101\048\066\067\049\055\061"";""\084\099\070\115\112\114\061\061"";""\087\072\070\088\109\083\088\070\119\055\116\108"",""\078\088\100\052\055\118\051\052\078\075\116\057\085\077\050\120"";""\108\043\117\069\055\097\119\061"";""\048\043\104\122"",""\122\088\051\068\048\115\054\075"";"""";""\068\085\102\088\087\053\082\077\053\057\055\061"",""\119\052\085\081\097\110\089\067\055\101\098\104\116\074\085\089"",""\116\043\052\086\078\052\117\107\065\112\098\047\122\073\080\079\085\072\061\061"";""\051\105\102\066\109\099\100\087\104\073\075\066\116\051\080\108\072\109\057\084\105\122\102\081\116\072\061\061"";""\068\087\078\086"";""\115\099\100\078\109\103\119\061"";""\122\057\098\118\069\077\089\068\047\057\098\057\105\043\089\078\119\072\061\061"",""\069\113\116\103\113\113\111\061"";""\121\074\057\076\055\122\101\061"";""\120\119\116\098\118\100\071\061"",""\066\043\053\070\117\066\051\070\120\052\070\052\052\113\051\105\105\115\065\100"";""\075\079\111\098\056\111\070\074\107\053\065\101\122\107\102\070"",""\085\077\089\086\103\077\102\061"";""\072\053\120\049\056\111\073\071\050\081\088\110\107\074\071\071\085\071\052\080\080\107\056\112\089\088\112\116\068\088\081\082\069\074\076\051\047\072\061\061"";""\071\069\115\084\077\077\077\048\105\099\107\085\079\075\055\052\056\055\087\105"";""\078\114\077\117\057\079\061\061"";""\047\053\089\108\047\078\061\061"";""\077\069\097\049\074\078\061\061"",""\113\097\105\097\108\072\098\056\075\088\053\065\051\049\066\086\084\090\081\081\113\083\086\099"";""\099\075\121\087\115\055\111\047\118\120\053\086\107\108\090\116\117\053\075\084\076\115\043\078\051\068\057\115\085\053\048\072\087\043\121\086\074\119\043\102\097\066\109\122"";""\113\086\068\080\083\087\111\117\114\069\050\057"";""\110\067\115\072\108\112\097\066\084\105\120\056"";""\109\070\053\068\103\114\053\085\081\080\065\101\050\048\110\100\121\050\066\088\073\106\122\078\100\099\109\065\071\043\110\079\082\088\076\110\089\078\061\061"",""\071\083\111\048\108\087\098\083\055\081\071\053\074\076\066\079\076\116\074\081\105\078\061\061"",""\119\048\056\089\089\113\114\080\067\087\104\086\106\121\106\066\047\098\122\061"",""\106\080\121\104"",""\083\071\074\070\053\065\114\098\073\072\061\061"",""\053\047\109\109\110\071\078\114\110\079\061\061"";""\075\118\102\090\043\053\047\090\050\098\122\061"",""\043\053\051\102\073\082\106\105"",""\051\077\116\074\085\110\100\107\105\078\061\061"";""\122\073\089\120\047\077\050\108"",""\065\101\047\120\048\053\098\104\051\057\069\084\078\073\085\056"",""\103\077\050\098\047\110\069\057\122\073\052\120\047\079\061\061"",""\085\103\080\067\043\090\088\069\078\121\067\111\112\065\054\065\114\080\115\115\104\089\079\061"",""\088\112\119\069\077\083\070\077\116\111\056\070\083\043\043\055\054\103\106\104\047\114\074\083\113\114\086\113\121\084\097\050\109\078\073\100\070\097\078\101\098\070\100\115\067\043\111\079\113\106\048\049\115\047\116\055\118\108\090\077\101\088\098\075\068\087\090\118\086\049\073\107\057\114\075\103\068\075\120\079\051\098\075\122\089\054\103\118\083\107\086\109\082\054\078\057\067\073\112\061"";""\082\106\110\109\077\048\099\061"",""\043\120\118\053\052\114\061\061"";""\103\101\056\117\105\110\069\084\097\089\116\065\048\115\085\083"";""\071\083\077\055\111\047\052\057\111\117\105\069\113\075\067\079"";""\056\067\100\079\118\079\071\061"";""\089\120\071\089\105\076\101\069\085\078\061\061"",""\103\107\082\100"",""\087\102\073\113"";""\103\043\081\061"",""\074\066\081\113\122\074\050\110\090\070\109\085\065\056\072\077\115\103\073\065\052\112\102\061"";""\057\107\121\090\115\119\106\112\082\054\099\061"";""\056\117\068\048"";""\085\077\052\066\048\079\061\061"",""\120\112\088\114\109\090\083\082\087\065\079\118\067\054\113\053\057\113\083\100\066\112\112\061"",""\122\104\056\067\048\088\109\087\082\114\061\061"",""\106\072\043\068\054\073\100\097\048\078\061\061"";""\089\080\113\116\117\114\061\061"",""\119\101\065\100\088\066\105\115\065\109\115\090\087\074\109\043\108\109\097\072\122\104\090\112\107\122\072\120\121\072\072\061"";""\081\080\116\114\112\079\061\061"",""\084\097\043\074\108\073\113\071\108\100\072\061"",""\100\117\105\079\056\078\061\061"";""\043\074\090\104"",""\051\118\085\043\103\043\085\079\105\077\054\043\078\088\117\052\105\115\057\061"",""\122\077\069\098\103\077\079\061"";""\110\103\087\065\117\055\081\120\049\119\105\106"",""\077\075\083\084\102\049\054\078\090\072\061\061"",""\102\088\052\074\102\056\072\088\105\102\116\051\085\112\080\067\103\057\057\061"",""\083\114\102\109\106\079\061\061"";""\067\047\065\076"";""\100\099\101\078\083\085\118\057\110\053\052\103\113\104\066\116\117\110\105\053\116\122\122\081\120\071\118\080\099\102\110\104\079\118\050\080\113\080\069\083\111\084\071\061"";""\057\078\061\061"";""\051\068\114\071\097\111\081\061"";""\113\088\075\110\084\080\071\108\110\056\101\061"";""\112\114\103\085\088\098\071\057\111\085\070\049\079\112\112\061"",""\104\118\088\049\071\067\081\103\097\053\114\061"";""\112\113\111\109\053\118\104\106\068\116\048\110\048\070\111\086\120\101\098\111\103\068\080\108\075\043\079\061"",""\097\110\051\057\122\112\085\052\085\114\061\061"";""\089\051\043\107\043\079\061\061"";""\109\055\106\081\114\072\061\061"",""\043\072\056\054"";""\070\102\053\074"";""\117\065\097\108\066\051\082\113"";""\108\067\078\113\078\073\121\103\118\121\088\068\051\078\061\061"";""\051\115\054\056\103\078\061\061"";""\052\118\119\112\078\111\043\098\085\079\073\115\110\072\061\061"",""\102\077\050\113\065\057\098\055\102\065\122\056\069\053\116\121"",""\078\073\085\080\065\048\084\119\112\076\102\054\057\084\103\101\089\114\061\061"";""\088\119\087\049\072\078\061\061"",""\081\117\107\051\115\114\061\061"";""\119\112\050\066\069\077\070\117\115\043\116\054\055\073\069\065"";""\078\101\116\119\105\116\047\112\085\112\108\074\055\102\050\087"";""\110\101\089\117\120\072\103\106\111\105\097\051\105\087\110\112\111\049\099\110\097\117\085\068\048\079\061\061"",""\120\108\069\049\118\077\057\061"",""\118\056\050\080\103\073\051\052\105\114\061\061"";""\110\089\121\085"",""\087\082\055\053\108\112\089\066\076\074\119\061"",""\103\043\112\061"",""\054\122\066\089\110\100\102\061"";""\090\104\078\055"",""\078\088\100\052\055\118\051\052\102\053\070\080\047\077\116\068"";""\089\122\101\082"",""\056\057\110\083\068\100\065\103\069\097\066\117\086\082\051\099\122\048\071\061"";""\109\120\043\106\084\083\099\061"";""\065\073\050\057\048\115\047\054"";""\097\118\100\119\048\077\054\118\097\057\070\111\105\110\116\116\078\078\061\061"",""\077\075\102\111\110\114\061\061"",""\068\121\100\117\085\087\057\070"",""\073\067\049\070\077\081\111\101\083\070\081\061"",""\114\054\110\052\054\118\057\067\043\056\049\112"";""\077\068\101\082\065\079\061\061"";""\108\051\047\066"";""\090\103\047\098\068\121\043\047\050\056\075\105\121\082\108\075\112\115\057\061"";""\119\079\067\111\054\081\121\110\069\078\061\061"",""\051\043\083\100\104\120\051\106\073\080\102\061"";""\070\069\102\055"",""\088\106\078\080\079\057\082\066\085\047\105\047\118\104\102\079\107\057\087\053\111\078\061\061"",""\116\105\108\067\089\122\098\090\118\115\083\111\105\114\061\061"";""\085\053\098\120\115\073\108\081\051\074\116\117\048\053\070\043\069\056\072\061"";""\052\070\076\078\083\090\066\120\100\090\081\076\051\048\054\118\089\087\119\061"";""\047\089\055\108\073\087\121\084\052\075\104\084\084\080\078\116\089\084\078\061"",""\104\073\109\113\102\079\061\061"";""\065\055\097\071\085\078\061\061"",""\119\112\050\075\048\101\054\083\055\065\117\051\085\056\100\101\078\116\112\061"";""\107\106\083\053"";""\068\115\100\099\053\078\061\061"",""\051\106\076\084\080\111\050\109\112\056\114\061"";""\110\086\109\043\070\098\078\061"",""\106\090\085\074"",""\065\069\071\072\115\115\083\112\069\097\073\077"",""\109\097\075\074\054\083\082\071\054\121\052\107\107\097\047\122"",""\119\086\109\080\098\079\061\061"";""\055\100\118\109"";""\057\081\085\077\098\110\087\061"",""\055\070\076\103\049\104\111\068\054\048\108\117\056\118\076\119"",""\048\108\104\074\086\121\114\061"";""\083\098\105\070\080\089\081\099\047\077\112\050\050\075\073\107\070\070\085\070\084\069\110\120\118\114\061\061"",""\054\076\108\056"";""\122\053\116\057\055\053\070\080\122\077\100\107\055\118\100\101"";""\100\077\119\104\089\086\049\116\082\057\072\052\115\119\082\097"";""\084\089\052\080\097\072\061\061"",""\097\118\069\117"",""\055\053\098\098\122\072\061\061"",""\065\109\081\074\097\078\061\061"",""\083\055\047\100\111\079\061\061"";""\122\115\101\069\120\116\099\061"";""\085\112\081\068\122\077\047\104\097\074\117\116\047\065\069\049\055\078\061\061"";""\120\110\111\068\088\068\052\082\085\103\048\114\074\101\087\061"",""\048\076\119\057\066\098\056\118\088\104\121\088\075\115\075\077"";""\102\101\119\100\067\110\101\061"";""\103\076\066\087"";""\048\106\088\073\084\086\105\121\073\056\106\122"";""\051\053\116\057\078\053\070\080\047\115\054\057\097\115\078\061"",""\068\051\105\057"";""\057\054\088\089\080\107\073\068\090\122\076\118\077\087\049\087"",""\116\111\100\103\112\110\101\061"",""\105\054\104\083\099\076\067\056"",""\049\097\054\079\120\072\061\061"",""\111\118\049\067"",""\082\108\090\102\097\081\072\061"",""\085\077\089\074\048\079\061\061"";""\109\072\061\061"";""\119\053\114\075\043\111\101\118"",""\067\066\049\053\121\078\061\061"",""\051\049\072\048"";""\074\113\109\097"";""\065\119\069\113\067\111\111\083\120\110\108\073\104\083\076\099"";""\103\050\104\053\114\074\112\061"",""\105\066\074\110\120\120\072\108\083\108\072\061"",""\047\073\056\104\097\043\069\102\115\110\085\084\051\118\085\113\048\079\061\061"";""\086\085\077\068\079\106\053\043\085\078\061\061"";""\116\081\048\043"";""\051\101\054\074\116\074\081\053\085\075\072\071\048\102\078\056"",""\078\049\056\118"",""\113\084\117\114\088\113\086\105\073\052\057\081\099\065\051\115\077\083\078\061"";""\100\066\120\055\101\079\061\061"";""\074\043\107\109\105\085\097\052\068\117\099\090\052\122\087\111\109\114\061\061"",""\116\110\047\055\116\075\116\100\078\052\098\057\122\101\100\052"",""\087\083\049\118\098\079\061\061"",""\056\103\107\043\101\053\102\089\114\103\077\113\072\106\074\047\098\104\097\085\102\079\061\061"";""\047\110\103\048\105\109\079\075"";""\103\112\073\067"";""\080\054\065\111\067\121\074\072\079\120\103\107\083\049\070\112\054\070\107\075\052\118\076\066\111\114\076\098\072\069\088\113\080\047\119\071\088\079\061\061"",""\078\088\100\052\055\118\051\052\116\077\050\075\047\053\070\052"";""\101\050\049\116\112\101\100\102\115\074\072\061"";""\054\100\100\086\052\082\054\068\047\114\061\061"";""\075\056\107\104"";""\056\068\103\074\073\074\055\061"";""\066\074\080\069\099\090\119\087\068\104\111\103\070\084\066\113\049\057\113\101\069\078\061\061"";""\098\057\066\078\087\087\049\102"",""\110\118\072\072\055\053\047\055\119\113\112\061"",""\068\117\068\115\114\109\103\072\102\121\107\122\077\117\111\052"",""\075\104\122\114\089\078\061\061"";""\090\082\108\119\043\104\053\082\120\117\056\122\056\104\056\101\082\089\105\114\089\069\119\061"",""\084\073\097\071\076\108\111\061"";""\075\089\054\068\043\067\087\061"",""\078\088\100\052\055\118\051\052\116\053\052\120\047\077\050\088"";""\075\107\105\111\047\078\115\080\057\043\055\121"";""\057\105\071\087\100\072\061\061"";""\072\112\081\114\121\122\087\079\071\117\083\107\052\057\110\052\079\043\069\055\104\065\080\090\111\116\103\090\089\056\079\061"";""\122\106\071\099\107\073\106\071\097\048\071\061"",""\105\070\101\104\102\078\072\061"",""\065\080\110\052\101\097\066\069\097\101\069\088\055\081\081\099\103\102\122\074\090\108\103\056\114\097\066\076\052\099\107\100\111\053\118\121\115\105\066\098\043\099\079\107\043\077\086\070\067\072\117\077\057\052\077\087\112\047\056\071\111\122\102\085\080\114\053\052\120\110\043\088\099\112\051\070\043\098\116\084\043\107\121\068\055\072\061\061"",""\047\073\067\089\076\049\066\080\103\103\100\086\121\112\103\056\070\098\117\090\082\120\053\097\066\076\071\061"",""\065\121\069\050\119\080\111\061"";""\055\119\088\080\122\109\106\084\071\069\055\077\070\114\054\078\053\047\097\099\108\076\120\099\075\043\085\104\069\072\061\061"";""\077\120\120\103\115\108\047\076\070\084\075\088\113\078\077\066\106\104\118\118\109\115\048\097\114\119\077\120\070\084\101\054"",""\090\075\057\056\121\073\112\116\111\112\073\071\090\069\119\061"";""\119\057\108\112\102\075\089\081\078\056\100\113\102\066\117\073\103\072\061\061"",""\104\073\069\100\108\072\061\061"",""\070\087\114\107"";""\053\052\119\075\054\066\118\102\103\083\072\068\053\116\117\088\084\073\054\048\103\071\077\119\100\078\102\061"";""\066\115\083\070\068\090\115\075\078\105\090\056\066\121\103\112"",""\119\097\048\087\074\052\076\084\101\110\047\106\109\066\049\052\049\078\061\061"";""\047\118\100\068\103\088\081\061"",""\122\108\089\049\077\047\072\053\082\116\116\065\082\119\104\114\043\083\088\087\103\078\061\061"",""\078\053\050\120\103\073\116\066\085\114\061\061"";""\052\043\097\083\089\054\085\067\102\043\083\120\102\051\106\055\056\078\061\061"",""\056\100\084\102\080\078\061\061"";""\103\083\043\057\054\071\043\122\054\078\061\061"";""\077\080\101\121\074\049\078\082\120\120\078\061"",""\078\102\085\056\069\101\052\065\047\053\101\068\048\073\071\061"";""\110\090\065\103\081\089\085\079\113\118\087\076\069\073\073\122"",""\047\066\069\113\119\043\089\116\051\116\100\066\115\052\051\069"",""\082\069\103\105\084\075\079\121\088\056\087\061"",""\118\056\050\087\047\115\071\061"";""\083\104\100\088\073\110\073\071\121\078\061\061"",""\043\073\098\118"";""\056\049\112\043\068\053\101\111\083\057\099\078\049\085\119\057\098\113\043\103\076\088\120\121"",""\052\088\104\051\082\072\061\061"",""\087\080\056\115\080\085\081\061"";""\081\114\119\055\050\106\047\053\051\071\078\099"";""\055\118\052\107\105\101\108\070\069\102\056\113\105\116\111\056\115\072\061\061"";""\056\114\061\061"",""\077\109\101\109"",""\078\088\100\052\055\118\051\052\116\077\089\086"",""\051\053\116\057\078\053\098\080\103\077\051\068\047\115\071\061"",""\104\107\075\048\110\078\080\074\087\080\067\097\079\099\120\104\101\114\061\061"",""\100\098\122\102\051\089\101\121\050\070\099\061"",""\117\111\076\103\111\108\112\052\117\119\114\051\109\087\082\068"",""\081\053\100\065\081\075\098\088\103\114\061\061"";""\106\112\119\072\098\117\117\090\066\067\057\054\050\110\110\043\055\051\089\043\111\057\117\052\070\065\066\109\097\102\121\080\104\120\090\075\087\079\065\078\080\049\100\117\066\122\049\048\053\101\099\043\070\089\101\080\122\119\071\077\101\043\082\055\070\053\111\089\110\050\074\121\107\072\082\050\100\070\122\100"";""\055\050\112\119\054\102\110\107\098\054\101\073\084\120\101\052\074\052\105\098\057\090\102\102\089\122\055\061"";""\055\074\072\071\048\088\098\049\048\112\102\057\055\116\111\070"",""\074\100\117\116"";""\088\121\049\053\089\078\061\061"",""\085\115\054\079\055\115\069\049"",""\068\114\117\110\107\122\121\085\087\086\105\103\054\049\107\106\077\089\120\118\082\110\097\055\109\074\122\061"",""\090\089\088\048\052\118\049\113\054\105\119\057\084\075\066\122\066\109\111\082\077\122\098\087\111\087\116\107\072\114\061\061"";""\116\071\055\043\111\084\116\087"",""\097\052\069\109\065\101\051\052\055\053\050\101\047\078\061\061"",""\051\118\080\087\103\053\056\080\116\056\089\100\122\052\098\048"";""\121\055\082\065"",""\071\072\120\071\083\114\070\086\111\114\061\061"",""\066\084\122\115\071\122\100\086\084\100\069\112\102\047\099\049\098\072\061\061"";""\047\097\065\108\068\043\088\075\055\108\101\061"",""\083\103\043\119\079\086\049\050"";""\047\053\056\098\085\077\069\111"",""\106\109\103\048\057\078\061\061"",""\120\120\085\084"",""\085\077\050\120\085\115\056\086\047\118\081\061"",""\068\055\083\078\111\109\047\119\116\089\100\077\056\114\061\061"",""\106\102\054\065\074\072\061\061"";""\057\098\100\107\065\078\061\061"";""\121\101\083\122\104\102\057\061"",""\043\117\106\112\114\107\089\065\115\072\061\061"";""\043\098\090\057\087\078\061\061"",""\077\069\074\114\048\113\107\050\106\078\061\061""}for U,Q in ipairs({{45644+-45643,538993-538448},{14580+-14579;879996-879827};{37648-37478,-104310-(-104855)}})do while Q[-414259+414260]<Q[491110+-491108]do i[Q[310497+-310496]],i[Q[940060-940058]],Q[-370441+370442],Q[-834315-(-834317)]=i[Q[871886+-871884]],i[Q[-727412-(-727413)]],Q[-100727+100728]+(370718-370717),Q[-483228-(-483230)]-(82123+-82122)end end local function U(U)return i[U+(-1001128-(-1044314))]end do local U=type local Q=string.len local P=table.concat local z=string.char local u=math.floor local c={t=-53473-(-53494);[""\050""]=-985709-(-985770);j=-405857-(-405888);V=442870+-442836,o=-785305-(-785345);b=516915-516882;I=-339797-(-339835),L=-615391+615454;G=803652+-803596;[""\051""]=250939-250922;u=-147567+147568;x=315101-315055;[""\047""]=585459+-585434,v=-437910+437933,H=1041678-1041646,[""\052""]=-495346-(-495383),l=589340-589295,D=-686751+686801,E=-111644+111657,F=-92074+92123;m=522675-522660,M=-488600-(-488606),r=757438-757438,J=-380626-(-380677);p=-337854+337858;e=572178-572142,P=-83407-(-83448),Y=-462161+462166;g=-823253-(-823280);B=-546455+546490;y=-104461+104503;K=-192614-(-192653);N=-536136+536152;[""\048""]=-279220+279246,k=535726-535679,c=-893673+893733,[""\043""]=-539240-(-539243);f=1017182+-1017162,T=-219233+219235,W=-67474-(-67518),[""\054""]=-577596-(-577653),[""\053""]=-636420+636474,[""\057""]=-854917+854969,q=260033-260022;a=509072+-509054,Q=-553772+553780;C=418115-418101;[""\055""]=293446+-293422,i=840068-840038,A=-328957-(-328976),Z=-35881+35943,w=518066+-518054;n=341614+-341607,O=307317+-307269;d=94368+-94359,[""\056""]=342133+-342080,S=-960266-(-960276),R=-137117-(-137176);h=77436+-77378;s=-248429-(-248451),U=-654033-(-654062);z=466867+-466839,X=-565571+565626;[""\049""]=-707517+707560}local M=table.insert local y=i local O=string.sub for i=-974826-(-974827),#y,-56276-(-56277)do local w=y[i]if U(w)==""\115\116\114\105\110\103""then local U=Q(w)local b={}local Y=-726003+726004 local h=861245+-861245 local o=449837+-449837 while Y<=U do local i=O(w,Y,Y)local Q=c[i]if Q then h=h+Q*(-266555+266619)^((425723+-425720)-o)o=o+(-132492-(-132493))if o==320677-320673 then o=-835159+835159 local i=u(h/(-54042-(-119578)))local U=u((h%(-772076-(-837612)))/(468654-468398))local Q=h%(-665502+665758)M(b,z(i,U,Q))h=254485-254485 end elseif i==""\061""then M(b,z(u(h/(161681+-96145))))if Y>=U or O(w,Y+(-327769-(-327770)),Y+(-659429+659430))~=""\061""then M(b,z(u((h%(-136802-(-202338)))/(-997026+997282))))end break end Y=Y+(278834+-278833)end y[i]=P(b)end end end return(function(i,P,z,u,c,M,y,n,b,Y,w,l,p,R,q,I,H,O,h,j,o,Q,f)w,j,Y,n,h,I,O,Q,o,l,q,H,f,b,p,R={},function(i,U)local P=h(U)local z=function(z)return Q(i,{z},U,P)end return z end,-783535-(-783535),function(i,U)local P=h(U)local z=function(z,u,c,M,y,O)return Q(i,{z;u;c,M,y;O},U,P)end return z end,function(i)for U=-412529-(-412530),#i,577654-577653 do w[i[U]]=w[i[U]]+(592411+-592410)end if z then local Q=z(true)local P=c(Q)P[U(-241671+199026)],P[U(-907130-(-864264))],P[U(-628622+585563)]=i,o,function()return-888084-(-717954)end return Q else return u({},{[U(353673+-396539)]=o;[U(644103+-686748)]=i;[U(-907838-(-864779))]=function()return-677101+506971 end})end end,function(i,U)local P=h(U)local z=function(z,u)return Q(i,{z,u},U,P)end return z end,{},function(Q,z,u,c)local o3,E,Z,s,j3,Z3,T,o,z3,S,H3,D,v,V,J,u3,W3,K,F,h,s3,r,m3,I3,h3,R3,q3,N3,U3,M3,b3,B3,y3,G,B,d,L3,N,p3,w3,i3,m,Y,O3,c3,e,g,X3,C,q,d3,y,Y3,x3,L,t,k,W,A,P3,a,w,D3,l3,n3,f3,X,x,Q3 while Q do if Q<7481839-(-944659)then if Q<-902496+5348334 then if Q<2187267-(-190143)then if Q<-864143+1932126 then if Q<-989236+1636128 then if Q<640949+-258868 then if Q<248503+-10698 then if Q<-1012976+1111654 then Q=p(13978226-(-451662),{o})F={Q()}y={P(F)}Q=i[U(-187498+144485)]else Q=O[u[676646+-676641]]Z=2831083786557-(-324585)m=U(-924663+881741)d=O[u[368352-368351]]N=-776592+24295758448065 x=O[u[-259649-(-259651)]]a=U(927025+-970017)L=x(m,Z)s=d[L]x=O[u[-317253-(-317254)]]D=23174782548825-(-732878)V=33487020908403-811658 r=U(-1023748-(-980793))Z=U(476800+-519769)v=-270651+1075435889455 L=O[u[-186062-(-186064)]]m=L(Z,N)d=x[m]e=-520991+24846599381073 N=U(231173+-273937)L=O[u[419079+-419078]]m=O[u[-1040565+1040567]]Z=m(N,D)X=U(-126772-(-84061))x=L[Z]Z=O[u[-766607+766608]]N=O[u[585690+-585688]]D=N(X,v)m=Z[D]N=O[u[-380541-(-380547)]]v=O[u[832808+-832807]]F=O[u[-206820-(-206822)]]W=F(a,V)X=v[W]a=O[u[88980-88979]]V=O[u[627529-627527]]k=V(r,e)W=a[k]F=W..h v=q..F D=X..v Z=N..D y=U(132078+-174895)y=Q[y]L=m..Z B={[s]=d;[x]=L}y=y(Q,B)Q=12967935-(-857625)end else if Q<895847-553139 then Q=i[U(921656+-964469)]y={Y}else Q=4968501-(-1035333)end end else if Q<1359020-823950 then if Q<824377-354659 then Q=true Q=Q and 17366636-960363 or 998535+-982050 else Q=y and 11565853-502558 or-713433+9227786 end else if Q<-361303+936215 then B=O[o]s=O[Y]L=-805150+18117592099346 x=U(145096-188099)d=s(x,L)q=B[d]B=b()O[B]=q D=-1015897+15261465910299 s=U(538682+-581400)q=i[s]x=O[o]Z=U(828662+-871693)s=U(-804694+761921)N=-143378+33888324562358 s=q[s]L=O[Y]m=L(Z,N)d=x[m]N=U(-816791-(-774126))s=s(q,d)d=U(-846034+803316)q=i[d]L=O[o]m=O[Y]d=U(923214-965987)Z=m(N,D)x=L[Z]N=U(818592-861497)d=q[d]d=d(q,x)q=b()O[q]=d L=O[o]m=O[Y]D=33721486718730-(-755276)Z=m(N,D)x=L[Z]d=s[x]Z=R(11931848-(-609556),{o;Y})L=U(738001+-780676)x=i[L]N={x(Z)}L=N[136359-136358]x=b()m=N[710324+-710322]O[x]=m Z=Q N=not L m=N Q=N and 42996+7495977 or 6745180-(-238607)else Q=i[U(573290+-616126)]w=nil y={}end end end else if Q<1754490-924688 then if Q<40604-(-674608)then if Q<201777-(-462313)then q=nil Q=18034+856464 B=nil else o=I(906284+7782768,{u[-54033+54037];h})y=U(-722395+679720)Q=i[y]q={Q(o)}y=q[-1014084-(-1014085)]w=q[1006850+-1006848]o=y q=not o y=q Q=q and 10420237-1007321 or-678373+13648912 end else if Q<591257+187343 then w=U(260008+-303078)h=717272-717272 Q=i[w]Y=O[u[-69618+69626]]w=Q(Y,h)Q=10941090-756737 else d=L W=U(-669683+626947)F=i[W]W=U(-786462-(-743473))v=F[W]F=v(w,d)v=O[u[97060+-97054]]W=v()X=F+W Q=5504753-1046232 D=X+B W=-117009+117010 X=246467+-246211 N=D%X X=h[Y]B=N d=nil F=B+W v=o[F]D=X..v h[Y]=D end end else if Q<189331-(-743790)then if Q<1430687-568110 then Q=y and 293355+6291967 or 722619+7745160 else h,B=o(Y,h)Q=h and-466755+5290316 or 643867+7346307 end else Q=6442114-818524 y=false O[u[324284+-324280]]=y end end end else if Q<-976275+2422942 then if Q<-173820+1531011 then if Q<-992425+2163062 then if Q<540888+574580 then x=p(5291967-(-208651),{})y=U(462818+-505842)Q=i[y]w=O[u[79993-79989]]o=U(-988582+945623)d=U(-770968+728293)h=i[o]s=i[d]d={s(x)}s=1029694-1029692 B={P(d)}q=B[s]o=h(q)h=U(-718472-(-675474))Y=w(o,h)w={Y()}y=Q(P(w))Y=O[u[104840-104835]]w=y Q=Y and-946616+15354985 or 12939203-162980 y=Y else Q=-695627+8998117 end else if Q<613073+603358 then s=nil X=b()g=nil D={}k=U(775002-817894)N=nil a=l(-405836+10433291,{X,x,L;q})V=b()N=-145106+24298145112836 O[X]=D r={}D=b()T=U(790496+-833141)B=nil h=nil A=U(401591+-444522)O[D]=a a={}m=nil O[V]=a a=i[k]d=nil E=O[V]q=H(q)e={[T]=E;[A]=g}h=1.04657150494e+14 d=U(742323-785041)k=a(r,e)O[o]=k a=f(13352609-78229,{V,X,Z;x;L;D})Z=H(Z)X=H(X)L=H(L)O[Y]=a D=H(D)x=H(x)s=i[d]V=H(V)x=O[o]L=O[Y]Z=U(421796-464563)m=L(Z,N)d=x[m]B=s[d]q=B~=h Q=q and 4691249-(-920154)or-26627+585335 else y=U(807695-850399)Q=O[u[172243+-172242]]y=Q[y]y=y(Q)Q=-348992+9582316 end end else if Q<486193+950216 then if Q<-417027+1834760 then O[Y]=v Q=O[Y]Q=Q and 3209173-(-824632)or-646416+3957750 else y=U(406618+-449398)Q=i[y]q=U(-514790+471742)h=O[u[241239-241236]]q=h[q]o={q(h)}h={Q(P(o))}w=h[-860790+860792]y=h[912989-912988]Y=h[-727798-(-727801)]Q=-472918+3132110 h=y end else m=U(-866360+823295)d=O[u[435612+-435611]]N=U(979838-1023000)x=O[u[587644+-587642]]Z=18781780351690-(-558943)D=4219123043860-1640 L=x(m,Z)Q=d[L]L=O[u[-329864+329865]]m=O[u[613859+-613857]]Z=m(N,D)X=1398145422831-430948 D=U(-1028427-(-985250))x=L[Z]d=B[x]m=O[u[-940188+940189]]Z=O[u[-700237-(-700239)]]N=Z(D,X)L=m[N]x=B[L]y={Q;d,x}Q=i[U(-116630+73554)]end end else if Q<2008687-57323 then if Q<884093-(-755513)then if Q<-192523+1812198 then o=H(o)q=H(q)w=nil Y=nil y={}Q=i[U(-119230+76581)]h=nil else G=-286045+25979687570590 D=O[N]T={D(X)}e=T[529863+-529860]V=T[-375857+375858]D=b()r=T[-459439+459441]O[D]=r t=U(-634188-(-591542))E=O[o]A=O[Y]g=A(t,G)T=E[g]r=V==T Q=r and-467116+3583993 or 570623+3464516 end else if Q<960612+742827 then Z=150446+4924249783623 s=U(602057+-644712)m=U(-357237-(-314146))B=i[s]d=O[u[949352-949351]]x=O[u[-533875+533877]]X=22326451023865-690013 L=x(m,Z)Q=U(299713-342536)s=d[L]q=B[s]s=O[u[-320221+320222]]d=O[u[-880530+880532]]Q=h[Q]L=U(-65821+22941)m=22009931473613-457412 x=d(L,m)L=-619056+4346949712408 Z=U(646622-689423)B=s[x]y=q[B]Q=Q(h,y)s=U(-12425-30683)y=O[u[-708022-(-708023)]]q=O[u[-321932+321934]]d=483177+17028596481936 B=q(s,d)Q=y[B]y=true N=33052025749069-836142 h[Q]=y x=U(55681+-98792)q=U(206480+-249295)y=i[q]B=O[u[878064-878063]]s=O[u[856804+-856802]]d=s(x,L)q=B[d]x=U(-679393-(-636240))Q=y[q]L=220839+24954671156925 B=O[u[-341300-(-341301)]]s=O[u[-724306-(-724308)]]d=s(x,L)q=B[d]y=Q(q)q=b()L=9682391729245-(-855359)x=U(-294826+251808)O[q]=y Q=O[q]B=O[u[540653+-540652]]s=O[u[-924861-(-924863)]]d=s(x,L)y=B[d]d=U(573757-616719)s=i[d]x=O[u[1025120+-1025119]]L=O[u[51671-51669]]m=L(Z,N)d=x[m]N=U(22768+-65808)L=933130-933122 B=s[d]D=105349+22839220899334 d=-722641+722649 x=187727-187726 s=B(d,x,L)Q[y]=s L=295758+18320803520005 Q=O[q]B=O[u[294210-294209]]s=O[u[-45301+45303]]x=U(424545+-467703)d=s(x,L)L=8333440138124-765028 y=B[d]B=true Q[y]=B x=U(-1031556-(-988420))Q=O[q]B=O[u[919044+-919043]]s=O[u[205405-205403]]d=s(x,L)y=B[d]B=-766299-(-766300)Q[y]=B x=U(198842+-242009)L=293208+33397886731112 Q=O[q]B=O[u[944632-944631]]s=O[u[-73791-(-73793)]]d=s(x,L)y=B[d]B=true Q[y]=B Q=O[q]L=853689+6453743568132 B=O[u[527667+-527666]]s=O[u[-958098-(-958100)]]x=U(414331+-457377)d=s(x,L)y=B[d]d=O[u[-237168+237171]]L=O[u[84416-84415]]m=O[u[-559837+559839]]Z=m(N,D)x=L[Z]s=d[x]L=U(-965481-(-922519))x=i[L]m=O[u[13437-13436]]D=U(-997888+955197)Z=O[u[-484527-(-484529)]]N=Z(D,X)L=m[N]d=x[L]Z=493334+-493334 m=644710-644707 L=-1014126-(-1014126)x=d(L,m,Z)B=s-x Q[y]=B Q=O[q]L=13804617296095-217027 B=O[u[784154-784153]]x=U(-689533-(-646505))m=U(-570447-(-527643))s=O[u[127916-127914]]d=s(x,L)x=363765+29326031005794 s=U(-913426+870629)y=B[d]B=i[s]Z=791896+25680911128926 Q[y]=B y=O[u[370219+-370218]]d=U(644848+-687877)B=O[u[-103489+103491]]s=B(d,x)Q=y[s]s=U(69406-112368)B=i[s]d=O[u[690372+-690371]]x=O[u[-146415+146417]]L=x(m,Z)x=5113560898744-807787 s=d[L]y=B[s]o[Q]=y d=U(-826849-(-783770))Z=23737944214608-41251 y=O[u[282402+-282401]]B=O[u[-3295-(-3297)]]s=B(d,x)Q=y[s]m=U(320745+-363666)s=U(768036+-810998)B=i[s]d=O[u[-170021-(-170022)]]x=O[u[328297+-328295]]L=x(m,Z)x=1014790+31877141691893 s=d[L]y=B[s]o[Q]=y Z=13897980716522-724131 d=U(-80104-(-37280))m=U(274135-316914)y=O[u[639381-639380]]B=O[u[-671189+671191]]s=B(d,x)Q=y[s]s=U(-730808+687846)B=i[s]d=O[u[-466980+466981]]x=O[u[-639579-(-639581)]]L=x(m,Z)s=d[L]y=B[s]o[Q]=y y=34847-34846 Q=-605434+7621712 B=615826-615816 s=B B=-241735-(-241736)d=B B=427761+-427761 x=d<B B=y-d else M3,y3=u3(c3,M3)Q=M3 and 717584+12745470 or-922567+16007778 end end else if Q<2490552-233222 then if Q<1719989-(-509321)then Y=O[u[-69133+69135]]Q=819209+6830266 h=O[u[-216802+216805]]w=Y==h y=w else d=U(-226072+183368)Q=11616810-146262 y=O[u[796614+-796609]]d=y[d]d=d(y)end else Q=true O[u[914641-914640]]=Q Y=U(-180893+137769)B=U(-602001-(-559272))s=-517839+33661992166410 w=i[Y]h=O[u[133184-133182]]Q=i[U(312299-355032)]o=O[u[-956258-(-956261)]]q=o(B,s)Y=h[q]y=w[Y]h=I(-457506+12253265,{u[311219-311218]})Y=.4 w=y(Y,h)y={}end end end end else if Q<-569501+4073609 then if Q<3338157-223869 then if Q<395614+2453202 then if Q<-799872+3458888 then if Q<589776+2019650 then y={}Q=i[U(85727+-128695)]else d=-708860+708860 Q=O[u[492616+-492615]]x=949599+-949344 s=Q(d,x)Y=h w[Y]=s Y=nil Q=-195216+15703418 end else if Q<268099+2436200 then Y,q=h(w,Y)Q=Y and 459973+9803071 or-402227+5617079 else D=H(D)x=H(x)q=H(q)h=nil Q=i[U(131490+-174384)]L=nil d=nil s=nil y={}Z=H(Z)o=H(o)a=nil e=nil Y=H(Y)B=H(B)X=nil N=H(N)V=nil end end else if Q<3392998-384980 then if Q<2115909-(-822717)then y=U(780132-822822)w=U(-608057+565415)Q=i[y]y=i[w]w=U(234770+-277412)i[w]=Q w=U(418894-461584)i[w]=y w=O[u[-923386+923387]]Q=-605307+14899756 Y=w()else h=O[u[753301+-753300]]s=2793983142557-992648 B=U(-844349-(-801385))w=z[373481-373480]o=O[u[799434-799432]]q=o(B,s)L=29361968110705-(-415991)Y=h[q]y=w[Y]q=U(-659524-(-616869))x=U(33325+-76266)o=i[q]B=O[u[-105566+105567]]s=O[u[-292159-(-292161)]]d=s(x,L)q=B[d]x=23976627383181-(-393231)h=o[q]q=O[u[686248+-686247]]B=O[u[927172-927170]]d=U(791545-834520)s=B(d,x)o=q[s]Y=h[o]Q=y==Y Q=Q and-494862+4274740 or 5572446-(-476257)end else d=U(-522083-(-479023))h=O[u[-154628-(-154637)]]x=23430669659798-525304 Z=-912609+27266726567546 q=O[u[-135069+135072]]B=O[u[622120+-622116]]s=B(d,x)o=q[s]Q=7533674-526646 m=U(-994741-(-951798))s=U(-213052+170090)B=i[s]d=O[u[-30745-(-30748)]]x=O[u[-3610-(-3614)]]L=x(m,Z)s=d[L]q=B[s]x=324399+-324399 d=519934-519934 s=837059-837059 B=q(s,d,x)h[o]=B end end else if Q<3806397-530560 then if Q<189344+3019147 then if Q<2510252-(-652868)then u3=-51334+18450351991317 A=U(466904-509622)b3=U(-884171-(-841093))T=U(476386-519087)U3=11837338816057-(-132943)Y3=5034552416199-642719 r=i[T]S=U(250872-293593)i3=21815545895863-(-1018871)E=i[A]t=O[o]Q3=21319769486769-(-553238)G=O[Y]C=G(S,Q3)g=t[C]S=U(330404-373209)t=U(-595786+553124)t=E[t]A={t(E,g)}T=r(P(A))r=T()T=b()O[T]=r r=O[T]Q3=7884071019940-677709 t=O[o]G=O[Y]C=G(S,Q3)g=t[C]G=O[o]Q3=U(-947824-(-904977))E=U(793220-836308)C=O[Y]S=C(Q3,i3)c3=-1028123+21005464524368 t=G[S]i3=U(-965014-(-922243))C=O[o]S=O[Y]Q3=S(i3,U3)G=C[Q3]S=O[o]z3=618878741737-142281 P3=309174+9474466257285 U3=U(225932+-268720)Q3=O[Y]i3=Q3(U3,P3)C=S[i3]Q3=O[o]P3=U(378025+-420937)i3=O[Y]U3=i3(P3,z3)S=Q3[U3]y3=2689191968429-653769 i3=O[o]M3=U(-402044-(-359094))z3=U(36131+-79187)U3=O[Y]E=r[E]P3=U3(z3,u3)Q3=i3[P3]U3=O[o]u3=U(372917+-415648)P3=O[Y]z3=P3(u3,c3)i3=U3[z3]z3=O[o]u3=O[Y]c3=u3(M3,y3)P3=z3[c3]z3=false M3=U(548558-591511)U3={[P3]=z3}z3=O[o]y3=19713371991911-527244 u3=O[Y]c3=u3(M3,y3)P3=z3[c3]z3=false A={[g]=t;[G]=C;[S]=Q3,[i3]=U3;[P3]=z3}u3=U(918065-961170)U3=26459890197310-(-773347)C=U(764015+-806876)E=E(r,A)g=O[o]S=-982128+8175129267022 r=U(-748265+705216)t=O[Y]G=t(C,S)r=E[r]A=g[G]g=nil r=r(E,A,g)Q3=561197+18052421472425 S=U(-910422-(-867712))t=O[o]i3=-927173+17794559837731 A=U(944935+-987795)A=r[A]c3=556147+23981132214060 G=O[Y]C=G(S,Q3)Q3=U(114182-157323)g=t[C]t=true A=A(r,g,t)t=U(334019+-376938)g=i[t]G=O[o]w3=10633744656129-(-519254)C=O[Y]S=C(Q3,i3)t=G[S]A=g[t]G=O[o]i3=-124117+12481189936009 O3=U(-201076-(-158034))C=O[Y]z3=-882253+21437143850315 Q3=U(-723963-(-680948))P3=-975026+27808712676167 S=C(Q3,i3)t=G[S]i3=U(400926+-444016)g=A(t)C=O[o]S=O[Y]Q3=S(i3,U3)G=C[Q3]S=O[o]Q3=O[Y]A=U(822503-865346)U3=U(307784+-350616)i3=Q3(U3,P3)C=S[i3]P3=U(-595587+552543)Q3=O[o]i3=O[Y]U3=i3(P3,z3)S=Q3[U3]U3=O[o]P3=O[Y]z3=P3(u3,c3)i3=U3[z3]P3=O[D]c3=O[o]M3=O[Y]y3=M3(O3,w3)u3=c3[y3]O3=O[o]w3=O[Y]h3=w3(b3,Y3)y3=O3[h3]M3=y3 ..e c3=g..M3 A=r[A]z3=u3 ..c3 U3=P3 ..z3 u3=726992899312-19358 w3=9210926507726-54797 Q3=i3 ..U3 t={[G]=C,[S]=Q3}i3=U(-946565-(-903632))U3=28200256354192-541765 c3=19353615015159-31171 A=A(r,t)z3=-476667+12031890643933 t=b()O[t]=A C=O[o]S=O[Y]Q3=S(i3,U3)P3=U(-951970-(-909087))G=C[Q3]A=U(-517113+474253)A=r[A]y3=32383087089431-515120 C=true A=A(r,G,C)A=false G=b()O[G]=A Q3=O[o]i3=O[Y]U3=i3(P3,z3)S=Q3[U3]O3=-815032+14537026095657 i3=O[o]U3=O[Y]z3=U(-476348-(-433312))P3=U3(z3,u3)Q3=i3[P3]A=U(240897-283998)u3=U(623644+-666400)U3=O[o]P3=O[Y]z3=P3(u3,c3)M3=U(-365414-(-322392))i3=U3[z3]U3=false z3=O[o]A=r[A]u3=O[Y]c3=u3(M3,y3)P3=z3[c3]u3=O[o]c3=O[Y]y3=U(-323643-(-280525))M3=c3(y3,O3)O3=U(-7759+-34905)z3=u3[M3]c3=O[o]M3=O[Y]y3=M3(O3,w3)u3=c3[y3]c3=j(889128+7962105,{G})C={[S]=Q3,[i3]=U3;[P3]=z3;[u3]=c3}A=A(r,C)Q3=U(-109163+66445)S=i[Q3]i3=O[o]u3=-855775+32811376626317 U3=O[Y]z3=U(-1073304-(-1030416))P3=U3(z3,u3)Q3=i3[P3]C=S[Q3]Q3=O[o]u3=U(-291067+248188)P3=U(637186+-680035)z3=26884173757807-707721 i3=O[Y]U3=i3(P3,z3)S=Q3[U3]A=C[S]S=Q U3=O[o]c3=2514335908766-491276 P3=O[Y]z3=P3(u3,c3)i3=U3[z3]Q3=A[i3]C=Q3 Q=Q3 and 8317627-377679 or 16158379-(-546551)else Q=O[u[965453-965452]]Q=Q and-533218+1762853 or 9106570-(-126754)end else if Q<2706438-(-532382)then o=U(815409+-858371)h=i[o]q=O[u[-881312+881315]]B=O[u[-595538-(-595542)]]x=3049370338615-966572 d=U(290720-333607)s=B(d,x)B=-740433-(-740433)o=q[s]y=h[o]q=-833211+833212 o=-300418+300418 h=y(o,q,B)Q=Y+h Y=Q Q=14897732-(-961831)else h=-945969-(-945970)Y=O[u[580789-580786]]w=Y~=h Q=w and-341779+9628750 or-607269+11250186 end end else if Q<3986302-530733 then if Q<3547439-200400 then Q=true Q=-124712+141197 else D=I(-501894+16274768,{o,Y,x})N=R(13924294-(-923708),{B;o,Y,q})Z=b()O[Z]=N N=b()O[N]=D D=O[Z]V={D()}a=V[16463+-16461]X=V[107417-107416]D=not X Q=D and 847475+13064744 or 715637+910101 end else s=8450337360399-162481 B=U(646936-689834)w=z[134278+-134277]h=O[u[225311-225310]]o=O[u[-266462-(-266464)]]q=o(B,s)Y=h[q]y=w[Y]q=U(-506920+464265)o=i[q]B=O[u[160178-160177]]L=-373080+23582536604733 x=U(397446+-440517)s=O[u[-735809+735811]]d=s(x,L)q=B[d]h=o[q]x=1002655+27760133219807 q=O[u[-77056+77057]]d=U(-711779-(-669100))B=O[u[662642+-662640]]s=B(d,x)o=q[s]Y=h[o]Q=y==Y Q=Q and 286835+15784078 or 449409+13155608 end end end else if Q<330275+3628578 then if Q<-443481+4077993 then if Q<4485908-933536 then if Q<278089+3255876 then B=O[u[-753273+753276]]x=U(383828+-426915)L=-387475+14666399024192 s=O[u[-632588+632592]]d=s(x,L)q=B[d]o=Y[q]q=476638+-476638 h=o>q Q=h and 887763+14223056 or-915440+3941200 else e=H(e)E=H(E)Q=10667038-171991 k=H(k)r=H(r)V=H(V)A=nil T=H(T)end else if Q<524438+3069198 then Q=356820+10654186 else x=b()m=-121357-(-121422)N=U(-996747-(-954072))L=-422591+422594 O[x]=y Q=O[s]y=Q(L,m)L=b()Q=-363269+363269 O[L]=y W=U(-241096+198137)m=Q y=i[N]Q=-717898+717898 Z=Q D=p(5389078-(-362364),{})N={y(D)}Q={P(N)}N=Q y=940644-940642 Q=N[y]y=U(-448024-(-405000))D=Q Q=i[y]X=O[h]F=i[W]W=F(D)F=U(124711+-167709)v=X(W,F)X={v()}y=Q(P(X))X=b()O[X]=y v=O[L]y=412+-411 F=v v=354922-354921 W=v v=-422303-(-422303)Q=377597+10117450 a=W<v v=y-W end end else if Q<3551326-(-321730)then if Q<-690940+4420982 then w=y Q=w and 131391+10758293 or 10528280-475195 else h=O[u[521034+-521033]]B=U(-63921-(-20863))L=27958585687344-199253 s=27374699122534-679323 o=O[u[426445+-426443]]q=o(B,s)Y=h[q]q=U(-537787-(-495132))y=w[Y]o=i[q]B=O[u[-667434-(-667435)]]s=O[u[118969+-118967]]x=U(-399964-(-357096))d=s(x,L)q=B[d]h=o[q]q=O[u[-150110-(-150111)]]d=U(978255+-1021032)x=28561057291232-(-1021971)B=O[u[-527970+527972]]s=B(d,x)o=q[s]Y=h[o]Q=y==Y Q=Q and-62231+10042000 or-174648+16453073 end else Y=y s=8379223856482-(-408027)h=O[u[137060-137059]]o=O[u[-82645-(-82647)]]d=241115+17651511046720 B=U(721981-764855)Q=U(-181299-(-138430))q=o(B,s)Q=Y[Q]y=h[q]Q=Q(Y,y)o=O[u[885209-885208]]s=U(271253-314349)q=O[u[-432609+432611]]B=q(s,d)y=o[B]h=Q Q=U(-81554-(-38699))Q=Y[Q]Q=Q(Y,y)y=h o=Q q=Q Q=h and-15306+10660659 or-209171+7685465 end end else if Q<3537520-(-555127)then if Q<3741761-(-292803)then if Q<3815545-(-209325)then w=O[u[30008-30003]]Y=U(276634-319338)Y=w[Y]Y=Y(w)Q=12885477-254859 else Q=509150+10596512 end else if Q<3173468-(-864032)then G=34834475845125-525992 E=O[o]t=U(-509995-(-467312))A=O[Y]g=A(t,G)T=E[g]r=V==T Q=r and 7005991-374142 or-330134+12466580 else q=U(732293-775007)w=U(-271588-(-228729))y=i[w]Y=O[u[681277+-681276]]h=O[u[-370864-(-370866)]]B=22935138437411-974699 o=h(q,B)w=Y[o]Q=y[w]Q=Q and 927752+7699904 or-546237+3127838 end end else if Q<413172+3942329 then if Q<-428891+4573548 then X=X+V r=not k D=X<=a D=r and D r=X>=a r=k and r D=r or D r=-191142+6792746 Q=D and r D=8394025-675532 Q=Q or D else q=O[u[-696233-(-696234)]]B=O[u[-252479-(-252481)]]x=637346+11530996292439 d=U(986170+-1029224)s=B(d,x)o=q[s]h=w[o]Q=-455729+1301475 Y=not h y=Y end else Q=h d=U(-254408+211434)L=-354237+2563228331110 h=y y=U(-31260-11484)x=11503785111469-318145 q=O[u[-892161+892163]]B=O[u[-204137-(-204140)]]s=B(d,x)o=q[s]y=h[y]y=y(h,o)o=b()x=U(-919594+876743)O[o]=y y=U(-522384+479515)B=O[u[540389+-540387]]s=O[u[-298301+298304]]d=s(x,L)q=B[d]y=h[y]y=y(h,q)B=Q q=b()O[q]=y d=O[o]s=not d Q=s and 6399088-809156 or 247925+11584413 y=s end end end end end else if Q<-165029+6804596 then if Q<-60869+5682723 then if Q<6103564-888672 then if Q<3959419-(-895948)then if Q<5383953-857344 then if Q<5384495-860521 then N=not Z L=L+m d=L<=x d=N and d N=L>=x N=Z and N d=N or d N=709686+69900 Q=d and N d=-477728+16928132 Q=Q or d else L=26694484985846-(-600216)x=U(-584681+541915)B=O[u[-258433+258434]]s=O[u[-414492+414494]]d=s(x,L)y=B[d]Q=o==y Q=Q and 7784489-(-492362)or 748832+13076728 end else if Q<3708827-(-1012370)then F=m==Z v=F Q=261301+1140238 else Z=U(-851761+808923)N=288538+15363230430424 x=O[u[-329717+329718]]L=O[u[-678773-(-678775)]]m=L(Z,N)q=h d=x[m]s=B[d]d=O[u[326736-326733]]Q=s==d Q=Q and 11338611-(-623732)or-1005853+1669397 end end else if Q<497490+4625695 then if Q<180897+4918776 then o=nil q=nil Q=201161+2458031 else Q=true O[u[1022105-1022104]]=Q Y=U(-437530-(-394406))s=25619049648174-(-302699)w=i[Y]h=O[u[-303320-(-303322)]]B=U(-630425-(-587328))o=O[u[-677435+677438]]Q=i[U(292150+-334882)]q=o(B,s)Y=h[q]y=w[Y]Y=.4 h=f(307897+10042519,{u[38380+-38379]})w=y(Y,h)y={}end else if Q<-14714+5224964 then q=U(-57167-(-14205))L=19511713238417-(-103916)o=i[q]x=U(691888+-734876)B=O[u[-906198+906201]]s=O[u[-961505+961509]]d=s(x,L)q=B[d]s=444426-444426 Q=3382384-(-142168)h=o[q]q=-820824+820824 B=-569470+569471 o=h(q,B,s)y=Y-o Y=y else Q=-155464+8457954 end end end else if Q<-158340+5691894 then if Q<787439+4604771 then if Q<843074+4436989 then Q=y and 12371060-428519 or-52839+725747 else w=U(232858+-275858)y=U(-716807+673737)Q=i[y]y=Q(w)y={}Q=i[U(-321806-(-278855))]end else if Q<-1025160+6438192 then B=U(-303047+259923)L=U(104124+-147138)y=i[B]s=O[u[542679+-542678]]m=5141312402426-(-988512)d=O[u[775302+-775300]]x=d(L,m)B=s[x]Q=y[B]B=.2 y=Q(B)Z=U(-1007786-(-965086))y=O[u[-14389+14390]]x=959251469759-(-240639)B=O[u[-603621+603623]]d=U(-640573-(-597664))s=B(d,x)Q=y[s]y=false d=U(-841386+798731)h[Q]=y N=8468879945198-(-795001)s=i[d]Q=U(340950+-383773)x=O[u[218592-218591]]L=O[u[-227690-(-227692)]]m=L(Z,N)Z=19742211770530-861369 d=x[m]B=s[d]d=O[u[692720-692719]]m=U(312454-355147)Q=h[Q]N=-227981+34511524526419 x=O[u[359693-359691]]L=x(m,Z)s=d[L]m=668559+12501592613678 L=U(-501013+458263)y=B[s]Q=Q(h,y)B=U(186520-229644)y=i[B]Z=U(307509+-350247)s=O[u[-280348+280349]]d=O[u[-762847-(-762849)]]h=nil x=d(L,m)m=12799027374353-(-175671)B=s[x]Q=y[B]B=278889+-278887 V=792827+4325644218083 s=I(-136376+3316681,{q})y=Q(B,s)B=U(683654-726372)y=i[B]s=O[u[530532+-530531]]L=U(-636921-(-594265))d=O[u[477699+-477697]]x=d(L,m)B=s[x]X=29013409115534-(-837432)Q=y[B]s=O[u[-108428-(-108429)]]L=U(-271573-(-228592))m=24666461069904-210290 y=U(517120+-560049)d=O[u[-106482-(-106484)]]x=d(L,m)B=s[x]x=O[u[-915676-(-915677)]]L=O[u[785481+-785479]]m=L(Z,N)d=x[m]L=O[u[-527643-(-527644)]]D=-630740+29827625162261 v=U(-631961+588797)m=O[u[470516+-470514]]N=U(-80964-(-38158))y=Q[y]Z=m(N,D)x=L[Z]m=O[u[584060-584059]]D=U(905152-948017)F=24281822943559-(-627428)Z=O[u[405559-405557]]N=Z(D,X)w=nil L=m[N]N=O[u[-100-(-101)]]D=O[u[422221-422219]]X=D(v,F)Z=N[X]a=U(-584862-(-542027))o=nil D=O[u[898292-898289]]v=O[u[-624627+624628]]F=O[u[-767067-(-767069)]]W=F(a,V)X=v[W]N=D[X]m=Z..N v=U(-374188-(-331445))Y=nil F=888898+26881061871779 N=O[u[883042-883041]]D=O[u[-679312-(-679314)]]X=D(v,F)q=H(q)Z=N[X]N=499493-499490 s={[d]=x,[L]=m,[Z]=N}y=y(Q,B,s)Q=i[U(-377852+334819)]y={}else y=6525829-776801 Y=U(287073+-329821)h=8951929-287159 w=Y^h Q=y-w w=Q y=U(-786068-(-743005))Q=y/w y={Q}Q=i[U(-514754-(-472058))]end end else if Q<4819161-(-779372)then if Q<-515201+6090521 then N=U(-979296+936337)Z=i[N]g=25701940307617-(-706591)e=U(834998-877964)a=O[o]V=O[Y]T=-321983+8972622592529 r=V(e,T)e=590823+14580660786846 X=a[r]D=d[X]N=Z(D)X=O[o]a=O[Y]r=U(-857816+814805)V=a(r,e)E=U(-912901+869956)Q=460600+2969850 r=U(-588712+546026)D=X[V]a=U(84213-127172)X=i[a]V=i[r]r={V()}A=814123+31020230921281 a=X(P(r))r=O[o]e=O[Y]T=e(E,A)V=r[T]e=O[o]A=U(-489785-(-447050))X=U(-543395+500399)T=O[Y]E=T(A,g)X=a[X]r=e[E]X=X(a,V,r)Z=D..X m=N..Z O[x]=m else Q=B Q=y and-609182+8142077 or 350650+11702655 end else s=U(-292323+249605)B=i[s]r=18953050870761-(-544400)Z=27825+7995252761050 d=O[o]x=O[Y]m=U(206344+-248998)L=x(m,Z)s=d[L]a=884779+12095031416277 q=B[s]d=O[o]x=O[Y]X=18573110965955-(-551685)Z=9825828632063-877600 Q=i[U(584539-627646)]m=U(630887+-673786)L=x(m,Z)N=U(-200074-(-157117))s=d[L]L=O[o]m=O[Y]D=6697880611733-(-614553)Z=m(N,D)x=L[Z]D=U(-47564+4723)B=U(-8788-34141)m=O[o]Z=O[Y]N=Z(D,X)B=q[B]L=m[N]X=U(-106487-(-63768))Z=O[o]N=O[Y]D=N(X,a)m=Z[D]N=O[o]a=U(-209513+166606)D=O[Y]V=22118607868737-(-349434)X=D(a,V)Z=N[X]D=O[o]X=O[Y]y={}V=U(-45421-(-2635))a=X(V,r)N=D[a]D=-423515-(-423521)d={[x]=L,[m]=Z,[N]=D}B=B(q,s,d)end end end else if Q<6000368-(-59779)then if Q<6570764-679830 then if Q<6014596-330508 then if Q<6495358-869428 then Q=-1017645+7066348 else B=O[q]Q=-883097+9284923 y=B end else if Q<-1018855+6755696 then Q=O[u[308364-308354]]Y=O[u[361881-361870]]w[Q]=Y Q=O[u[-162895+162907]]Y={Q(w)}Q=i[U(718906+-761854)]y={P(Y)}else y=17697672-940927 h=321956+4167645 Y=U(955084+-997862)w=Y^h Q=y-w w=Q y=U(-292773-(-250018))Q=y/w y={Q}Q=i[U(355712-398360)]end end else if Q<5995440-(-22117)then if Q<5952834-(-25058)then y={w}Q=i[U(74293+-117454)]else w=O[u[-582729-(-582730)]]Q=w and 13500680-608410 or 480478-(-50086)y=w end else Q=i[U(341319+-384163)]y={}w=nil end end else if Q<337302+6158214 then if Q<5506535-(-746481)then if Q<6913876-811376 then L=U(134500-177538)x=i[L]Q=3719607-123148 y=x else y=O[u[252913-252909]]Q=y and 862464+15252653 or 16019689-232356 end else if Q<5468408-(-894626)then q=U(96402-139120)L=321758+31372096835634 y=i[q]B=O[u[-436515-(-436516)]]s=O[u[395237-395235]]m=U(-756016+713116)x=U(173122+-215956)d=s(x,L)Z=679367+34122420592714 q=B[d]Q=y[q]v=4330145975966-(-833858)D=272992+14600897245231 x=U(-971275+928476)L=18048480330333-(-908919)B=O[u[587173-587172]]s=O[u[-929363+929365]]d=s(x,L)q=B[d]N=22310777211891-(-646306)d=O[u[748274+-748273]]x=O[u[36683+-36681]]L=x(m,Z)s=d[L]x=O[u[-475960+475961]]L=O[u[-473848-(-473850)]]Z=U(1017848+-1061020)m=L(Z,N)N=U(-917899-(-874891))d=x[m]X=97147+11542341474691 L=O[u[541175+-541174]]m=O[u[-604017+604019]]Z=m(N,D)D=U(189331-232368)x=L[Z]m=O[u[860034-860033]]Z=O[u[-102508+102510]]N=Z(D,X)L=m[N]y=U(-932503+889574)Z=O[u[-568720-(-568721)]]N=O[u[380529+-380527]]X=U(631638-674501)D=N(X,v)m=Z[D]y=Q[y]Z=487353+-487350 B={[s]=d,[x]=L;[m]=Z}y=y(Q,q,B)Q=i[U(-569309+526534)]y={}else Q=-126610+13821735 end end else if Q<-1024545+7638846 then if Q<1015011+5585737 then B=593719+1263018914581 q=-932667+2070313631487 o=U(-70142+27444)y=O[u[635509-635508]]Y=O[u[-828701+828703]]h=Y(o,q)q=U(724810+-767740)Q=y[h]Y=O[u[-347758-(-347759)]]h=O[u[865997+-865995]]o=h(q,B)y=Y[o]y={Q,y}Q=i[U(-84869-(-42077))]else D=X r=D Q=5051605-933244 N[D]=r D=nil end else T=U(-418066+375365)r=i[T]Q3=33455694543210-(-902001)S=U(340259+-383067)A=U(457849+-500567)E=i[A]t=O[o]G=O[Y]C=G(S,Q3)Q3=-1043401+9350410419403 w3=U(255829-298911)g=t[C]P3=25266777353306-376421 t=U(-1028090+985428)C=U(180040+-222691)t=E[t]A={t(E,g)}S=34886698577965-(-397128)U3=620336+15414118950105 T=r(P(A))r=T()g=O[o]z3=-989340+7739238295215 t=O[Y]M3=20665170277427-(-831843)G=t(C,S)y3=U(504420+-547135)A=g[G]S=U(-90982+47997)i3=-450769+19072782140290 t=O[o]G=O[Y]C=G(S,Q3)g=t[C]c3=U(992693-1035488)G=O[o]C=O[Y]Q3=U(-522899+479769)S=C(Q3,i3)i3=U(829966-873131)t=G[S]T=U(48988-92076)C=O[o]S=O[Y]Q3=S(i3,U3)G=C[Q3]S=O[o]U3=U(586917-629637)u3=-353730+15453253861853 Q3=O[Y]i3=Q3(U3,P3)C=S[i3]P3=U(-135410+92497)T=r[T]Q3=O[o]i3=O[Y]U3=i3(P3,z3)z3=U(315809-358758)S=Q3[U3]i3=O[o]U3=O[Y]P3=U3(z3,u3)Q3=i3[P3]P3=O[o]z3=O[Y]u3=z3(c3,M3)U3=P3[u3]P3=false i3={[U3]=P3}c3=U(-578913-(-536057))h3=25973339757926-(-397784)M3=23037599157214-631287 P3=O[o]z3=O[Y]u3=z3(c3,M3)U3=P3[u3]P3=false E={[A]=g;[t]=G,[C]=S,[Q3]=i3,[U3]=P3}C=U(127400-170231)P3=1677582798216-313979 i3=852271+4309861435047 S=957660+27579861947726 T=T(r,E)g=O[o]U3=30418314108173-812473 t=O[Y]G=t(C,S)A=g[G]z3=U(876093+-919128)E=U(-688544+645495)O3=-487623+33249397910849 E=T[E]g=nil Q3=U(-1084862-(-1041779))E=E(T,A,g)G=O[o]u3=-171677+14605085849902 A=U(378447-421290)C=O[Y]S=C(Q3,i3)t=G[S]i3=U(-319064+276356)C=O[o]S=O[Y]Q3=S(i3,U3)U3=U(-155833-(-112872))G=C[Q3]S=O[o]Q3=O[Y]i3=Q3(U3,P3)C=S[i3]i3=O[o]U3=O[Y]P3=U3(z3,u3)Q3=i3[P3]U3=O[D]u3=O[o]c3=O[Y]A=E[A]M3=c3(y3,O3)z3=u3[M3]M3=O[o]y3=O[Y]O3=y3(w3,h3)Q=12900+2769545 c3=M3[O3]u3=e..c3 P3=z3 ..u3 i3=U3 ..P3 S=Q3 ..i3 Q3=U(-522973+480248)g={[t]=G,[C]=S}A=A(E,g)i3=-327549+2595497182261 G=O[o]C=O[Y]A=U(-190958+148115)U3=34324833081728-39697 S=C(Q3,i3)t=G[S]C=O[o]i3=U(825503+-868480)S=O[Y]P3=24275987726742-(-436882)Q3=S(i3,U3)U3=U(-878716+835602)A=E[A]G=C[Q3]S=O[o]Q3=O[Y]i3=Q3(U3,P3)T=nil Q3=U(357930-401093)r=nil C=S[i3]S=O[x]g={[t]=G,[C]=S}A=A(E,g)i3=27442095823519-108725 P3=24544112693941-730640 G=O[o]C=O[Y]S=C(Q3,i3)t=G[S]i3=U(-513527-(-470803))C=O[o]S=O[Y]U3=437694+25834946085184 Q3=S(i3,U3)G=C[Q3]S=O[o]U3=U(-498703-(-455639))Q3=O[Y]i3=Q3(U3,P3)C=S[i3]S=j(331560+12921733,{x})g={[t]=G,[C]=S}A=U(-929545-(-886806))A=E[A]A=A(E,g)E=nil end end end end else if Q<6781425-(-851326)then if Q<7884982-656377 then if Q<-275896+7339082 then if Q<167112+6832333 then if Q<352118+6631423 then F=O[Y]v=F Q=F and 3940805-(-639544)or 35278+1366261 else D=Q a=O[x]X=not a N=X Q=X and-601193+13709171 or-598694+9951888 end else if Q<6783052-(-224870)then L=26650532138713-(-57761)x=674410+32339853701225 d=U(668709+-711602)h=O[u[-491131-(-491137)]]q=O[u[874086+-874083]]B=O[u[-558104+558108]]s=B(d,x)o=q[s]q=true h[o]=q Q=5977541-(-26293)q=U(134197+-177321)o=i[q]B=O[u[1007299+-1007296]]s=O[u[416115+-416111]]x=U(248702+-291498)Y=nil w=nil d=s(x,L)q=B[d]h=o[q]o=h()else B=B+d L=not x y=B<=s y=L and y L=B>=s L=x and L y=L or y L=10470404-364143 Q=y and L y=-362252+5769849 Q=Q or y end end else if Q<716202+6464500 then if Q<567724+6553822 then r=-859966+859967 X=-319523+319524 a=#N D=h(X,a)X=B(N,D)a=O[Z]D=nil k=X-r V=s(k)a[X]=V X=nil Q=7352433-116387 else Y=O[u[283119+-283117]]h=652836-652711 w=Y*h Y=-862115+11932966206808 y=w+Y w=709258+35184371379574 Q=y%w O[u[985403-985401]]=Q w=O[u[1048556+-1048553]]Q=50892+10592025 Y=-940381-(-940382)y=w~=Y end else Q=i[U(119845-162731)]y={}end end else if Q<8486055-945462 then if Q<-714789+8231302 then if Q<464134+6846046 then a=986648-986648 X=#N D=X==a Q=D and 642941+532236 or 6478344-(-586322)else Q=q Q=not y Q=Q and-17092+6378731 or-731135+2382959 end else if Q<8041557-504888 then Q=i[U(2358-45060)]y={}else Q=Z Q=m and 769128+4803600 or 3252289-(-178161)end end else if Q<-162165+7707579 then if Q<-164787+7707545 then x=U(-443138+400143)B=O[u[-84448-(-84449)]]s=O[u[-409394-(-409396)]]L=567337+24856909366541 d=s(x,L)Q=B[d]s=O[u[348727+-348723]]B=not s q[Q]=B Q=5973650-900103 else J=O[Y]K=J Q=J and 9018601-1024199 or-980111+11338738 end else N=U(198686-241408)Z=i[N]N=U(-142579+99541)m=Z[N]Q=15967750-462876 x=m end end end else if Q<7821160-(-169204)then if Q<713946+7101664 then if Q<8379862-650526 then if Q<7000523-(-662443)then Q=y and 166068+926069 or-385901+15840125 else a=265184-265184 Q=8087955-1023289 X=#N D=X==a end else if Q<6882458-(-889673)then w=nil Q=969584+12725541 else V=U(840376-883018)W=U(-258223+215264)Q=i[W]a=i[V]W=Q(a)Q=U(951480+-994170)i[Q]=W Q=522088+3062459 end end else if Q<7843447-(-100569)then if Q<-71570+7991772 then Q=t y={}Q3=U(827927-870669)G=O[o]i3=156648+28487780913129 C=O[Y]V=U(-893878+850949)S=C(Q3,i3)Q=i[U(-350565-(-307893))]t=G[S]G=150175-150169 V=D[V]e={[T]=E;[A]=g,[t]=G}V=V(D,r,e)else M3=10856744704709-329478 h3=482060+13545935207831 c3=-468133+13019571453011 i3=U(551577-594701)Q=S S=b()o3=30852303460942-(-417232)O[S]=C b3=-254308+27836261504006 y3=718013+8122889067017 Q3=i[i3]u3=U(-874534-(-831405))U3=O[o]P3=O[Y]z3=P3(u3,c3)c3=360962+19872871981604 x3=12604291520136-(-868453)i3=U3[z3]C=Q3[i3]i3=R(-470631+1600669,{o,Y;S,G})Q3=C(i3)U3=O[o]O3=U(-679480-(-636783))P3=O[Y]u3=U(-547327-(-504667))z3=P3(u3,c3)i3=U3[z3]P3=O[o]z3=O[Y]c3=U(248668-291349)u3=z3(c3,M3)p3=232050368668-286768 w3=-48223+5693963798202 M3=U(48917-91962)U3=P3[u3]z3=O[o]u3=O[Y]c3=u3(M3,y3)P3=z3[c3]z3=false c3=O[o]M3=O[Y]y3=M3(O3,w3)u3=c3[y3]w3=U(124515+-167285)M3=O[o]C=U(680290+-723391)y3=O[Y]O3=y3(w3,h3)c3=M3[O3]y3=O[o]h3=U(376230-419120)q3=U(-472980-(-429941))O3=O[Y]w3=O3(h3,b3)M3=y3[w3]y3=n(537892+8236775,{o,Y})Y3=27293531912836-(-489249)C=r[C]Q3={[i3]=U3;[P3]=z3;[u3]=c3,[M3]=y3}C=C(r,Q3)P3=O[o]z3=O[Y]M3=8984460632686-643607 y3=2436623327153-858947 c3=U(641410-684151)u3=z3(c3,M3)U3=P3[u3]M3=U(-1010645-(-967564))b3=U(-740667-(-697847))z3=O[o]u3=O[Y]c3=u3(M3,y3)P3=z3[c3]n3=545181+33047668599424 m3=9669257799975-825233 y3=U(731496-774380)u3=O[o]O3=10979431673333-154109 c3=O[Y]M3=c3(y3,O3)z3=u3[M3]M3=358096-357596 c3=528718+-528717 u3={c3,M3}h3=-350977+19222326115832 M3=O[o]y3=O[Y]w3=U(-752235+709561)O3=y3(w3,h3)c3=M3[O3]O3=O[o]M3=975471-975470 w3=O[Y]h3=w3(b3,Y3)y3=O3[h3]w3=O[o]h3=O[Y]l3=8440633091898-(-649248)Q3=U(422947-466131)Y3=U(414884+-457886)b3=h3(Y3,o3)B3=-73231+6825158453881 Q3=r[Q3]O3=w3[b3]H3=122112+30079070017974 o3=U(-1039498-(-996344))h3=O[o]b3=O[Y]Y3=b3(o3,H3)w3=h3[Y3]Y3=O[o]o3=O[Y]H3=o3(q3,p3)h3=581402+-581386 b3=Y3[H3]p3=U(818471+-861438)o3=O[o]H3=O[Y]j3=1361896500829-977891 q3=H3(p3,j3)Y3=o3[q3]H3=O[o]j3=U(264539+-307655)q3=O[Y]p3=q3(j3,l3)o3=H3[p3]H3=p(181395+10489460,{o,Y})i3={[U3]=P3,[z3]=u3;[c3]=M3;[y3]=O3,[w3]=h3,[b3]=Y3;[o3]=H3}Q3=Q3(r,i3)w3=18999950129780-120805 H3=1453181479555-(-907297)y3=27728495677375-(-287409)z3=O[o]u3=O[Y]L3=23109474213398-(-314355)M3=U(554486+-597394)o3=20105708359653-600915 c3=u3(M3,y3)P3=z3[c3]u3=O[o]c3=O[Y]O3=-883220+6401175815608 y3=U(484418+-527207)M3=c3(y3,O3)z3=u3[M3]q3=8901281660660-(-446780)b3=4214761980709-850811 c3=O[o]O3=U(50364-93253)f3=897901+32941417187454 h3=U(69683-112564)M3=O[Y]y3=M3(O3,w3)M3=-766646-(-766647)u3=c3[y3]j3=-560541+10657759207679 y3=407127-406627 c3={M3,y3}y3=O[o]O3=O[Y]Z3=22265747633452-(-897876)i3=U(872084+-915268)w3=O3(h3,b3)M3=y3[w3]Y3=U(-20498+-22630)y3=-897578-(-897579)w3=O[o]h3=O[Y]b3=h3(Y3,o3)p3=U(62016+-105108)O3=w3[b3]o3=U(-421564-(-378624))h3=O[o]b3=O[Y]Y3=b3(o3,H3)w3=h3[Y3]d3=19217931954883-(-79922)b3=O[o]H3=U(-700688-(-657543))l3=19817780542089-792189 Y3=O[Y]o3=Y3(H3,q3)h3=b3[o3]i3=r[i3]b3=701265-701249 o3=O[o]H3=O[Y]q3=H3(p3,j3)j3=U(-866138+823261)Y3=o3[q3]H3=O[o]q3=O[Y]p3=q3(j3,l3)l3=U(-479723-(-437057))o3=H3[p3]q3=O[o]p3=O[Y]j3=p3(l3,f3)H3=q3[j3]q3=l(17282774-876630,{o,Y})U3={[P3]=z3,[u3]=c3,[M3]=y3,[O3]=w3,[h3]=b3;[Y3]=o3,[H3]=q3}w3=11993079153715-355939 i3=i3(r,U3)M3=U(559422+-602262)b3=3052126110413-752960 O3=-29730+7384193614224 z3=O[o]h3=942611+1497863594150 u3=O[Y]U3=U(-585372-(-542323))y3=-1011561+9388705251452 U3=E[U3]c3=u3(M3,y3)H3=6887776325878-(-506769)P3=z3[c3]y3=U(-927785+884861)z3=nil U3=U3(E,P3,z3)u3=O[o]c3=O[Y]M3=c3(y3,O3)z3=u3[M3]u3=true P3=U(533328+-576188)P3=U3[P3]P3=P3(U3,z3,u3)O3=U(-470866+427745)c3=O[o]M3=O[Y]y3=M3(O3,w3)o3=U(691899-734822)f3=13479104246817-285597 u3=c3[y3]I3=22067531953134-543691 M3=O[o]y3=O[Y]w3=U(-407822-(-364736))O3=y3(w3,h3)c3=M3[O3]y3=O[o]h3=U(-341731-(-298674))q3=438462+29798225528181 O3=O[Y]w3=O3(h3,b3)M3=y3[w3]w3=U(81551+-124513)O3=i[w3]h3=O[o]b3=O[Y]Y3=b3(o3,H3)w3=h3[Y3]h3=245.68 y3=O3[w3]w3=-1007817+1007065.5 b3=-580.09 O3=y3(w3,h3,b3)b3=-584328+4414021464719 z3={[u3]=c3;[M3]=O3}w3=U(993527-1036329)M3=O[o]y3=O[Y]h3=1729914041265-(-593780)O3=y3(w3,h3)c3=M3[O3]y3=O[o]Y3=15328410867580-293787 O3=O[Y]p3=-792292+26041906529858 h3=U(-323061+279917)w3=O3(h3,b3)M3=y3[w3]O3=O[o]Q=-207518+2129050 b3=U(874033+-916860)w3=O[Y]h3=w3(b3,Y3)y3=O3[h3]H3=U(-195395-(-152264))h3=U(756542+-799504)w3=i[h3]b3=O[o]Y3=O[Y]o3=Y3(H3,q3)h3=b3[o3]Y3=-135.3 O3=w3[h3]W3=-931+6486810365807 s3=15139718405523-852490 h3=-626.76 b3=221.44 w3=O3(h3,b3,Y3)h3=U(-700297-(-657296))j3=757836+16941914181253 u3={[c3]=M3,[y3]=w3}y3=O[o]O3=O[Y]b3=-532245+19645008970448 w3=O3(h3,b3)M3=y3[w3]b3=U(-433584-(-390457))o3=284593+33128612979857 O3=O[o]Y3=-258347+20183030207969 R3=15828740724704-(-673002)w3=O[Y]h3=w3(b3,Y3)y3=O3[h3]w3=O[o]Y3=U(124950+-168097)h3=O[Y]b3=h3(Y3,o3)O3=w3[b3]b3=U(-1044366-(-1001404))q3=U(-433319-(-390136))h3=i[b3]Y3=O[o]o3=O[Y]H3=o3(q3,p3)b3=Y3[H3]w3=h3[b3]b3=-347.17 Y3=227.39 o3=-104.02 h3=w3(b3,Y3,o3)c3={[M3]=y3;[O3]=h3}O3=O[o]H3=122142+9857483519184 b3=U(264750+-307694)Y3=627565+12727153181625 w3=O[Y]h3=w3(b3,Y3)y3=O3[h3]Y3=U(213176-256242)o3=4345415398636-(-692987)w3=O[o]h3=O[Y]b3=h3(Y3,o3)O3=w3[b3]o3=U(167512-210672)h3=O[o]b3=O[Y]p3=U(321519-364196)Y3=b3(o3,H3)w3=h3[Y3]Y3=U(970035-1012997)b3=i[Y3]o3=O[o]H3=O[Y]q3=H3(p3,j3)H3=486407-486104 Y3=o3[q3]o3=218.98 h3=b3[Y3]Y3=-393.51 b3=h3(Y3,o3,H3)o3=24451123362522-(-504223)M3={[y3]=O3;[w3]=b3}Y3=U(-187532+144354)H3=11310665288613-(-739565)w3=O[o]h3=O[Y]q3=47446+25843196999084 b3=h3(Y3,o3)O3=w3[b3]o3=U(798992-841902)h3=O[o]b3=O[Y]Y3=b3(o3,H3)w3=h3[Y3]b3=O[o]H3=U(878446-921478)Y3=O[Y]o3=Y3(H3,q3)j3=U(-40620+-2038)h3=b3[o3]l3=35108882616082-102198 o3=U(249302+-292264)Y3=i[o3]H3=O[o]q3=O[Y]p3=q3(j3,l3)o3=H3[p3]q3=-60.27 b3=Y3[o3]H3=233.57 o3=-437.62 Y3=b3(o3,H3,q3)o3=U(-819480+776809)H3=31128445971752-193673 y3={[O3]=w3;[h3]=Y3}h3=O[o]b3=O[Y]Y3=b3(o3,H3)q3=-21841+23600243048510 l3=U(885655+-928314)p3=-197351+33517406732254 w3=h3[Y3]b3=O[o]H3=U(-262236+219364)Y3=O[Y]o3=Y3(H3,q3)q3=U(-915933+873022)h3=b3[o3]Y3=O[o]o3=O[Y]N3=-417487+12698450572776 H3=o3(q3,p3)b3=Y3[H3]H3=U(892707+-935669)o3=i[H3]q3=O[o]p3=O[Y]j3=p3(l3,f3)p3=62.08 H3=q3[j3]f3=U(677374+-720543)Y3=o3[H3]q3=269.24 H3=-642.41 o3=Y3(H3,q3,p3)q3=19423978973364-(-359072)O3={[w3]=h3;[b3]=o3}j3=20431186074019-341113 b3=O[o]H3=U(-241528-(-198811))Y3=O[Y]o3=Y3(H3,q3)h3=b3[o3]p3=17303699723745-145000 Y3=O[o]o3=O[Y]q3=U(-132532+89426)H3=o3(q3,p3)p3=U(-206208-(-163516))b3=Y3[H3]o3=O[o]H3=O[Y]q3=H3(p3,j3)Y3=o3[q3]q3=U(36376+-79338)H3=i[q3]p3=O[o]j3=O[Y]l3=j3(f3,R3)q3=p3[l3]j3=167.14 o3=H3[q3]p3=293.24 q3=-720.3 H3=o3(q3,p3,j3)p3=-807126+10074453418793 w3={[h3]=b3;[Y3]=H3}j3=710803+29819889261994 Y3=O[o]o3=O[Y]q3=U(-936393+893565)l3=23212934096945-(-885256)H3=o3(q3,p3)b3=Y3[H3]o3=O[o]H3=O[Y]p3=U(-987644-(-944623))q3=H3(p3,j3)Y3=o3[q3]H3=O[o]q3=O[Y]j3=U(-807372+764612)p3=q3(j3,l3)o3=H3[p3]R3=U(-91887+48880)p3=U(842596-885558)q3=i[p3]j3=O[o]l3=O[Y]f3=l3(R3,I3)I3=U(832114-875164)l3=-237.92 p3=j3[f3]f3=-377271+28955308619362 H3=q3[p3]j3=446.35 p3=-1007.7 q3=H3(p3,j3,l3)j3=31317755488244-978685 h3={[b3]=Y3;[o3]=q3}o3=O[o]p3=U(463196+-506222)H3=O[Y]q3=H3(p3,j3)Y3=o3[q3]l3=26265060500634-160980 H3=O[o]q3=O[Y]j3=U(4012+-46947)p3=q3(j3,l3)o3=H3[p3]l3=U(926293+-969445)q3=O[o]p3=O[Y]j3=p3(l3,f3)H3=q3[j3]j3=U(537789-580751)p3=i[j3]l3=O[o]f3=O[Y]R3=f3(I3,n3)j3=l3[R3]q3=p3[j3]j3=-1348.07 f3=-621.22 l3=440.88 p3=q3(j3,l3,f3)b3={[Y3]=o3;[H3]=p3}l3=30679082035678-815632 f3=-950006+9099347677059 H3=O[o]q3=O[Y]j3=U(-618530+575390)p3=q3(j3,l3)R3=27661522923965-(-98451)o3=H3[p3]q3=O[o]l3=U(-17664+-25487)p3=O[Y]j3=p3(l3,f3)n3=U(648902+-692021)f3=U(-988697+945512)H3=q3[j3]p3=O[o]j3=O[Y]l3=j3(f3,R3)q3=p3[l3]l3=U(758077+-801039)j3=i[l3]f3=O[o]R3=O[Y]I3=R3(n3,s3)l3=f3[I3]p3=j3[l3]l3=-1452.87 R3=-542.71 f3=445.94 j3=p3(l3,f3,R3)Y3={[o3]=H3,[q3]=j3}q3=O[o]R3=-897608+25605765079259 s3=U(429788+-472748)f3=-173750+29282376850425 p3=O[Y]l3=U(-1044258-(-1001436))j3=p3(l3,f3)H3=q3[j3]p3=O[o]f3=U(109780-152961)j3=O[Y]l3=j3(f3,R3)R3=U(-158030+115321)q3=p3[l3]j3=O[o]l3=O[Y]I3=5997250276711-(-908673)f3=l3(R3,I3)p3=j3[f3]f3=U(729177+-772139)l3=i[f3]R3=O[o]I3=O[Y]n3=I3(s3,B3)I3=320.03 f3=R3[n3]j3=l3[f3]R3=414.23 f3=-1156.98 l3=j3(f3,R3,I3)I3=747856+15854734078854 o3={[H3]=q3;[p3]=l3}p3=O[o]f3=U(-1076280-(-1033598))R3=-981071+29951181254346 j3=O[Y]l3=j3(f3,R3)q3=p3[l3]X3=23317312738134-26861 j3=O[o]l3=O[Y]R3=U(-84965-(-41885))f3=l3(R3,I3)p3=j3[f3]n3=-261088+23767073580827 I3=U(-708069-(-664966))l3=O[o]f3=O[Y]R3=f3(I3,n3)j3=l3[R3]R3=U(-728115-(-685153))B3=U(-973426+930689)f3=i[R3]I3=O[o]n3=O[Y]s3=n3(B3,d3)n3=606.01 R3=I3[s3]l3=f3[R3]R3=-920588.75-(-919007)I3=420.88 f3=l3(R3,I3,n3)H3={[q3]=p3;[j3]=f3}n3=14425898412634-151581 j3=O[o]l3=O[Y]I3=112031+27165400742858 R3=U(-590077+547397)f3=l3(R3,I3)p3=j3[f3]l3=O[o]d3=U(291036-334134)s3=519027+19142441940830 f3=O[Y]I3=U(-1019177-(-976060))R3=f3(I3,n3)n3=U(-87377+44352)j3=l3[R3]f3=O[o]R3=O[Y]I3=R3(n3,s3)l3=f3[I3]I3=U(81588-124550)R3=i[I3]n3=O[o]s3=O[Y]B3=s3(d3,L3)I3=n3[B3]s3=332.01 n3=414.56 f3=R3[I3]I3=-1577.27 R3=f3(I3,n3,s3)q3={[p3]=j3,[l3]=R3}n3=88388+2841769110503 l3=O[o]s3=17475477345648-456103 I3=U(987787+-1030587)f3=O[Y]R3=f3(I3,n3)j3=l3[R3]f3=O[o]R3=O[Y]L3=U(-731259-(-688478))B3=64055+1404206319702 n3=U(-1051676-(-1008718))I3=R3(n3,s3)l3=f3[I3]R3=O[o]I3=O[Y]s3=U(490581+-533655)n3=I3(s3,B3)f3=R3[n3]n3=U(-715033-(-672071))I3=i[n3]s3=O[o]B3=O[Y]d3=B3(L3,Z3)n3=s3[d3]R3=I3[n3]n3=-1286.15 B3=524.96 s3=412.4 I3=R3(n3,s3,B3)p3={[j3]=l3,[f3]=I3}s3=930627+34779175537664 n3=U(-549102+506293)d3=2910118052290-228471 f3=O[o]R3=O[Y]I3=R3(n3,s3)s3=U(746030+-788936)l3=f3[I3]B3=21835392897796-781133 R3=O[o]I3=O[Y]n3=I3(s3,B3)f3=R3[n3]B3=U(135038+-177725)I3=O[o]n3=O[Y]s3=n3(B3,d3)Z3=U(831805-874667)R3=I3[s3]s3=U(-237923+194961)n3=i[s3]B3=O[o]d3=O[Y]L3=d3(Z3,m3)s3=B3[L3]I3=n3[s3]d3=-61.97 B3=451.89 s3=-1129.28 n3=I3(s3,B3,d3)j3={[l3]=f3;[R3]=n3}s3=U(293719-336369)d3=26123052488821-(-317199)R3=O[o]B3=92378+16470909891867 I3=O[Y]n3=I3(s3,B3)L3=-131377+31736788515563 f3=R3[n3]I3=O[o]n3=O[Y]B3=U(519209+-562229)s3=n3(B3,d3)R3=I3[s3]n3=O[o]s3=O[Y]d3=U(-861884+818902)m3=U(477377-520490)B3=s3(d3,L3)I3=n3[B3]B3=U(63049+-106011)s3=i[B3]d3=O[o]L3=O[Y]Z3=L3(m3,x3)B3=d3[Z3]n3=s3[B3]B3=-1409.57 d3=452.27 L3=-21.61 s3=n3(B3,d3,L3)d3=347406+17203740693053 D3=28705076504525-684951 l3={[f3]=R3;[I3]=s3}I3=O[o]B3=U(822408+-865245)n3=O[Y]L3=-954643+25507725475704 s3=n3(B3,d3)R3=I3[s3]n3=O[o]s3=O[Y]d3=U(-782867+740200)B3=s3(d3,L3)I3=n3[B3]Z3=10467589090631-(-353731)s3=O[o]L3=U(359385-402115)B3=O[Y]d3=B3(L3,Z3)n3=s3[d3]d3=U(40598-83560)x3=U(628714+-671535)B3=i[d3]L3=O[o]Z3=O[Y]m3=Z3(x3,N3)d3=L3[m3]s3=B3[d3]d3=-1618.8 L3=469.46 Z3=-63.8 B3=s3(d3,L3,Z3)L3=-454696+34607071702811 f3={[R3]=I3,[n3]=B3}n3=O[o]s3=O[Y]d3=U(539928+-582715)B3=s3(d3,L3)I3=n3[B3]Z3=2944741290594-929031 s3=O[o]m3=288971+27838167419352 L3=U(630398-673533)B3=O[Y]d3=B3(L3,Z3)n3=s3[d3]Z3=U(674308+-717235)B3=O[o]d3=O[Y]L3=d3(Z3,m3)s3=B3[L3]L3=U(897008+-939970)N3=U(487767-530750)d3=i[L3]Z3=O[o]m3=O[Y]x3=m3(N3,D3)L3=Z3[x3]B3=d3[L3]Z3=-769035-(-769527)L3=-1889.65 m3=-194.18 d3=B3(L3,Z3,m3)R3={[I3]=n3,[s3]=d3}s3=O[o]B3=O[Y]L3=U(650317-693372)m3=348477+33835418545230 Z3=28550504670948-127734 x3=469529+345861625480 d3=B3(L3,Z3)Z3=U(630107+-672748)n3=s3[d3]B3=O[o]d3=O[Y]L3=d3(Z3,m3)s3=B3[L3]D3=U(141305+-184099)d3=O[o]m3=U(382282+-425236)L3=O[Y]Z3=L3(m3,x3)B3=d3[Z3]Z3=U(243085+-286047)L3=i[Z3]m3=O[o]x3=O[Y]N3=x3(D3,X3)Z3=m3[N3]x3=-599.01 d3=L3[Z3]N3=7350871888588-(-768659)Z3=-1996.82 m3=437.06 L3=d3(Z3,m3,x3)I3={[n3]=s3,[B3]=L3}m3=585361+14505781029841 B3=O[o]x3=-2782+24112935417530 d3=O[Y]Z3=U(-131392+88521)L3=d3(Z3,m3)s3=B3[L3]d3=O[o]L3=O[Y]m3=U(834821-877597)Z3=L3(m3,x3)B3=d3[Z3]x3=U(831154-873798)L3=O[o]Z3=O[Y]X3=U(-808260-(-765514))m3=Z3(x3,N3)d3=L3[m3]m3=U(552984-595946)Z3=i[m3]x3=O[o]N3=O[Y]D3=N3(X3,W3)m3=x3[D3]L3=Z3[m3]x3=516.42 N3=2.07 m3=-2592.81 Z3=L3(m3,x3,N3)n3={[s3]=B3;[d3]=Z3}P3={z3;u3;c3;M3;y3;O3,w3,h3,b3;Y3,o3;H3;q3,p3,j3;l3,f3,R3,I3;n3}u3=U(-636738-(-593722))z3=i[u3]y3={z3(P3)}c3=y3[220618-220616]M3=y3[-748010+748013]u3=y3[105919+-105918]end else q=U(-1034625-(-991470))Y=O[u[704383+-704382]]B=-419234+30876813630924 h=O[u[-1017511-(-1017513)]]o=h(q,B)Q=Y[o]y={Q}Q=i[U(222737-265709)]end end else if Q<8441050-154090 then if Q<-813940+8943247 then if Q<174407+7838607 then g=-592367-(-592368)Q=-359438+10718065 J=A[g]K=J else y=true O[u[679462+-679458]]=y Q=12337689-356763 end else if Q<863221+7401379 then y={}h=nil Y=nil w=nil o=nil Q=i[U(-343712+300546)]else B=U(468947-511665)L=U(-123864-(-80997))y=i[B]s=O[u[-850967-(-850968)]]d=O[u[-266121+266123]]m=-857793+268124657469 v=374606097004-420286 x=d(L,m)B=s[x]q=nil Z=U(935303+-978048)Q=y[B]X=-972196+13863971860187 y=U(-371234+328305)L=U(42289-85040)s=O[u[-952538-(-952539)]]m=-600073+19895101246521 D=1451+33930115463180 d=O[u[-32231+32233]]x=d(L,m)B=s[x]x=O[u[746343+-746342]]N=20058308536217-(-425187)L=O[u[32644+-32642]]m=L(Z,N)N=U(-963164+920225)d=x[m]L=O[u[763663+-763662]]m=O[u[240981+-240979]]Z=m(N,D)x=L[Z]m=O[u[505634+-505633]]D=U(17806-60624)Z=O[u[-690894+690896]]N=Z(D,X)L=m[N]X=U(143100+-186143)Z=O[u[543614-543613]]N=O[u[-848947+848949]]D=N(X,v)o=nil F=295094+17215647637146 m=Z[D]y=Q[y]N=O[u[916816+-916815]]v=U(915938-958626)D=O[u[576081-576079]]X=D(v,F)Z=N[X]N=-357152+357158 Y=nil s={[d]=x;[L]=m;[Z]=N}y=y(Q,B,s)L=U(718406-761225)B=U(-867952-(-824828))h=nil w=nil y=i[B]s=O[u[221044+-221043]]d=O[u[-872034-(-872036)]]m=24798485609701-495562 x=d(L,m)B=s[x]Q=y[B]B=907079+-907076 y=Q(B)Q=O[u[418844+-418837]]y=U(832909+-875613)y=Q[y]y=y(Q)Q=574555+15597267 end end else if Q<-84756+8485264 then if Q<8839531-535838 then w=U(-499850-(-456726))B=-439831+10398406215937 q=U(-634991-(-592065))y=i[w]Y=O[u[-691728+691729]]h=O[u[-838135+838137]]o=h(q,B)w=Y[o]Q=y[w]w=.1 y=Q(w)Q=y and 1468366-42938 or-6413+15656382 else v=-968844+10014153759427 X=U(318873+-361664)Z=O[u[533503+-533502]]N=O[u[556842+-556840]]D=N(X,v)m=Z[D]L=B[m]x=L>=s Q=-881274+9489155 d=x end else B=y s=U(-166510-(-123665))y=i[s]s=U(233051-275754)Q=y[s]s=b()d=U(594172-636894)O[s]=Q y=i[d]Z=U(-438181-(-395459))d=U(1019292+-1062289)Q=y[d]L=Q d=Q m=i[Z]x=m Q=m and 6611254-(-947240)or-337464+15842338 end end end end end end else if Q<964734+11625646 then if Q<10224099-(-41988)then if Q<-458408+9351255 then if Q<588783+8108384 then if Q<7639801-(-952105)then if Q<8674494-196101 then if Q<7641238-(-814953)then o=O[u[112998-112992]]B=O[u[-742283-(-742286)]]s=O[u[-950394-(-950398)]]L=30634740553962-(-892623)x=U(410241+-453363)d=s(x,L)q=B[d]Q=11254697-699490 h=o[q]w=h else L=22354036463067-(-414414)x=U(-136529+93803)y=U(-1073145-(-1030129))Q=i[y]B=O[u[1029379+-1029378]]s=O[u[-168916-(-168918)]]d=s(x,L)q=B[d]o=w[q]q={Q(o)}Q=1598229-723731 h=q[-914448+914451]Y=q[-1030512-(-1030514)]y=q[716619-716618]o=y end else if Q<-549361+9068518 then w=O[u[8797-8792]]Q=w and 451018+3525409 or 11864144-(-766474)else Q=J y=K Q=-953456+10558592 end end else if Q<43556+8585319 then if Q<-613209+9237131 then Q=d and 15251448-(-510749)or 704964-(-739574)else Y=O[u[868412+-868409]]s=U(232910-275844)o=O[u[-745733-(-745734)]]d=32901621868099-(-775574)q=O[u[-59561+59563]]B=q(s,d)h=o[B]w=Y[h]y=w Q=w and 11590945-(-425986)or-840606+4552245 end else if Q<8547318-(-136770)then s=-544915+15013666548706 w=O[u[854568+-854562]]h=O[u[-484067-(-484070)]]o=O[u[773749-773745]]B=U(661463-704115)q=o(B,s)Q=265070+6934554 Y=h[q]h=false w[Y]=h else Q=O[u[959135-959134]]Y=U(504349+-547383)w=O[u[-65113+65115]]Y=Q[Y]y={Y(Q,w)}y={P(y)}Q=i[U(-477631+434590)]end end end else if Q<8590905-(-176472)then if Q<-265289+8993840 then if Q<280001+8432085 then m=11670637459830-189500 y=U(913823+-956682)q=U(-658391+615223)Q=i[y]Y=O[u[1037951+-1037950]]B=10446448286233-231193 h=O[u[-120277+120279]]o=h(q,B)y=Y[o]Z=13704532134197-(-692152)x=394004+3070787256961 Y=true s=1039490+26350280807276 Q[y]=Y d=U(-299344+256617)Y=U(191116-233834)B=U(-64240+21345)y=i[Y]N=462315+17637604020778 h=O[u[852954+-852953]]o=O[u[-64023-(-64025)]]q=o(B,s)Y=h[q]Q=y[Y]h=O[u[-237025+237026]]o=O[u[962363+-962361]]B=U(464080-507022)s=22873877423379-834424 q=o(B,s)Y=h[q]q=O[u[-916452-(-916453)]]B=O[u[-938330-(-938332)]]s=B(d,x)y=U(-506882-(-463953))o=q[s]L=-980607+12603053690219 B=O[u[359364-359363]]x=U(-257089+214241)s=O[u[-872451-(-872453)]]d=s(x,L)q=B[d]s=O[u[-706045+706046]]d=O[u[-394226+394228]]L=U(414328+-457135)x=d(L,m)B=s[x]m=U(429335-472138)d=O[u[663583-663582]]x=O[u[-767268-(-767270)]]L=x(m,Z)s=d[L]y=Q[y]x=O[u[761134-761133]]Z=U(388456+-431162)L=O[u[-336425-(-336427)]]m=L(Z,N)d=x[m]x=-638951-(-638956)h={[o]=q;[B]=s;[d]=x}y=y(Q,Y,h)s=4686521968446-990904 y=U(-1001909+959191)d=U(-283594-(-240730))Q=i[y]h=O[u[-93298+93299]]o=O[u[-515293+515295]]B=U(818223-861292)q=o(B,s)o=U(-527559+484841)y=U(-1021197-(-978424))x=25736422680305-(-313311)Y=h[q]y=Q[y]y=y(Q,Y)Y=y h=i[o]q=O[u[-746883+746884]]B=O[u[571756+-571754]]s=B(d,x)o=q[s]d=18364596912051-(-450996)y=h[o]s=U(-811120-(-768224))o=O[u[-867178-(-867179)]]q=O[u[422402+-422400]]B=q(s,d)h=o[B]Q=y[h]h=b()s=U(-462290+419370)O[h]=Q d=24040135743083-(-218447)o=O[u[470951+-470950]]q=O[u[-277720+277722]]B=q(s,d)y=o[B]Q=Y[y]Y=nil o=p(3951558-(-125425),{u[302446+-302445],u[453819+-453817],h})y=U(1003675+-1046743)y=Q[y]h=H(h)y=y(Q,o)Q=839645-215525 else V=b()k=U(681628-724473)O[V]=v y=i[k]k=U(-910391-(-867688))Q=y[k]e=-1033105-(-1033360)r=-175238+175338 k=-229879-(-229880)y=Q(k,r)k=b()E=855648+-855647 r=-781101+781101 O[k]=y Q=O[s]A=-598527+598529 g=U(-339709-(-296750))y=Q(r,e)e=-702314+702315 r=b()O[r]=y Q=O[s]T=O[k]y=Q(e,T)e=b()S=-443802+453802 O[e]=y C=184410+-184410 y=O[s]T=y(E,A)y=-961372+961373 Q=T==y T=b()y=U(-453788-(-410790))A=U(399229+-442132)O[T]=Q J=i[g]t=O[s]G={t(C,S)}g=J(P(G))J=U(3072+-45975)K=g..J E=A..K Q=U(-414883-(-371887))Q=D[Q]Q=Q(D,y,E)E=b()O[E]=Q A=U(-586929-(-544254))K=p(16810206-562731,{s,V;L,h,Y;X,T;E;k,e;r,x})y=i[A]A={y(K)}Q={P(A)}A=Q Q=O[T]Q=Q and-977836+9713852 or 7769047-226261 end else if Q<593159+8139244 then Q=530339-190179 else K=O[Y]y=K Q=K and 949896+12783891 or 8683288-(-921848)end end else if Q<8522101-(-275637)then if Q<9320978-535595 then y=U(-366710+323851)q=U(276270+-318983)w=z[-500097-(-500098)]Q=i[y]s=U(-915900-(-872984))Y=O[u[-873312+873313]]h=O[u[668137-668135]]B=13869093027380-992506 o=h(q,B)y=Y[o]Y=w Q[y]=Y h=U(-690522-(-647663))Y=i[h]d=31598358327691-604177 o=O[u[638947+-638946]]q=O[u[898696+-898694]]B=q(s,d)h=o[B]y=Y[h]Y=nil Q=y==Y Q=Q and-494569+9194512 or-297812+921932 else m=U(654931+-697773)s=U(162625+-205440)B=i[s]d=O[u[-609323+609325]]x=O[u[-601900+601903]]Z=-371416+24580716664718 L=x(m,Z)Z=284027+33780988782583 s=d[L]m=U(842279+-885040)y=B[s]d=O[u[-227791-(-227793)]]x=O[u[792429+-792426]]L=x(m,Z)s=d[L]B=y(s)O[u[169988-169984]]=B m=U(-807341+764290)y=O[u[779232-779228]]d=O[u[562734+-562732]]x=O[u[931900+-931897]]Z=-586393+4584431106799 L=x(m,Z)s=d[L]Z=10738819873494-698190 v=560335+17372427178698 d=80620-(-9380)y[s]=d X=860641+3737929491691 D=U(-493050+449894)m=U(116652+-159645)y=O[u[-827885+827889]]d=O[u[-302674-(-302676)]]x=O[u[-809545+809548]]L=x(m,Z)s=d[L]L=U(-477603+434641)x=i[L]m=O[u[767855+-767853]]Z=O[u[-679853+679856]]N=Z(D,X)L=m[N]d=x[L]m=9000007010-7010 Z=9000497878-497878 D=U(590775-633557)L=-802506+9000802506 x=d(L,m,Z)y[s]=x Z=5543682606900-359711 m=U(-911356+868566)y=O[u[-135017-(-135021)]]X=19207699474662-(-440842)d=O[u[384628-384626]]x=O[u[-360751-(-360754)]]L=x(m,Z)s=d[L]x=O[o]m=O[u[132633-132631]]Z=O[u[1032158+-1032155]]N=Z(D,X)L=m[N]d=x[L]y[s]=d m=U(-120460+77466)Z=23480142301643-1023766 y=O[u[990527-990523]]d=O[u[573771-573769]]x=O[u[545681-545678]]L=x(m,Z)s=d[L]d=O[o]y[s]=d N=18045276398057-868631 d=U(-803334-(-760519))s=i[d]x=O[u[486671-486669]]Z=U(-372085-(-328965))L=O[u[1029181-1029178]]m=L(Z,N)d=x[m]y=s[d]N=32006726735184-(-746728)Z=U(-478437-(-435742))x=O[u[-402179-(-402181)]]L=O[u[-979485+979488]]m=L(Z,N)d=x[m]s=y(d)N=12962229561515-(-470761)X=U(888177-931350)O[u[815514-815509]]=s Q=2280797-831338 y=O[u[-187565+187570]]x=O[u[84095-84093]]Z=U(659985-703079)L=O[u[-853375+853378]]m=L(Z,N)d=x[m]m=U(1025097+-1068059)L=i[m]Z=O[u[937321-937319]]N=O[u[-914476+914479]]D=N(X,v)m=Z[D]X=U(-109865+67204)N=-95887+9000095887 Z=682538+8999317462 x=L[m]m=9000361486-361486 L=x(m,Z,N)y[d]=L y=O[u[895994-895989]]v=-537469+6791268417495 x=O[u[844071-844069]]Z=U(870802-913570)L=O[u[273391+-273388]]N=26649979725475-(-182742)m=L(Z,N)d=x[m]m=U(560235+-603197)L=i[m]Z=O[u[296016-296014]]N=O[u[12883+-12880]]D=N(X,v)m=Z[D]Z=U(955961+-999056)x=L[m]y[d]=x y=O[u[562230+-562225]]x=O[u[-414585-(-414587)]]N=237887+6469878966917 L=O[u[546996-546993]]m=L(Z,N)X=22136845790829-345641 d=x[m]x=O[o]y[d]=x N=-284063+30975625203191 y=O[q]Z=U(-534385+491338)x=O[u[83714-83712]]L=O[u[-716846+716849]]m=L(Z,N)d=x[m]x=true y[d]=x d=U(-23379+-19339)y=i[d]L=O[u[-580077+580079]]m=O[u[-979099-(-979102)]]d=U(-152328+109555)D=1005956+33672329634747 N=U(501053-544018)Z=m(N,D)N=U(-795569-(-752743))x=L[Z]d=y[d]d=d(y,x)L=O[u[290792+-290790]]D=13888135499607-996884 m=O[u[73551-73548]]Z=m(N,D)x=L[Z]y=d[x]D=745931+21413399053608 x=U(-33285+-9783)N=U(-730644+687794)x=y[x]L=f(3166016-(-334076),{u[-610434+610436];u[-112891+112894];u[1016364+-1016358];u[-638531-(-638538)]})x=x(y,L)L=O[u[-442946-(-442948)]]m=O[u[527971-527968]]Z=m(N,D)x=L[Z]y=d[x]x=U(277750-320818)L=I(681321+2312666,{u[-545651+545653];u[-74297+74300];u[591719+-591713],u[495471+-495464]})x=y[x]d=nil x=x(y,L)L=U(-511172-(-468048))x=i[L]D=U(943905+-986994)m=O[u[-47853-(-47855)]]Z=O[u[764056-764053]]N=Z(D,X)L=m[N]y=x[L]L=l(-451004+813714,{u[488269-488268];o,u[539532-539530],u[-494388-(-494391)],u[353730-353726];q,u[391029-391023];u[487440+-487433],u[-960190+960195],u[-144417-(-144425)]})x=y(L)end else y={}w=z[536845-536844]Q=w w=nil O[u[-809502-(-809503)]]=Q Q=i[U(1036006+-1078897)]end end end else if Q<849573+8936532 then if Q<8570830-(-791473)then if Q<9617617-337583 then if Q<-815586+9900495 then s=U(-995683-(-952710))d=563916+6952081207769 o=O[u[-400795+400796]]q=O[u[978685+-978683]]B=q(s,d)Q=U(-552648-(-509779))h=y y=o[B]Q=h[Q]Q=Q(h,y)o=Q Q=o and 12814730-483419 or 789259+7356248 else Q=i[U(213375-256311)]y={}end else if Q<-222977+9532992 then x=-988762-(-988764)m=33328+-33315 Y=O[u[647434+-647431]]h=668352+-668320 w=Y%h o=O[u[784751-784747]]s=O[u[837329-837327]]D=O[u[543509+-543506]]N=D-w D=-191325+191357 Z=N/D L=m-Z d=x^L B=s/d q=o(B)o=4294094318-(-872978)h=q%o q=-512875+512877 d=5830+-5829 o=q^w Y=h/o o=O[u[995632+-995628]]x=-362058-(-362314)s=Y%d d=4294304323-(-662973)B=s*d q=o(B)o=O[u[589662+-589658]]B=o(Y)h=q+B q=-690653+756189 o=h%q s=715659-650123 B=h-o q=B/s Y=nil s=-160448-(-160704)B=o%s h=nil w=nil d=o-B Q=11286843-(-868180)m=214574-214318 s=d/x x=554669-554413 o=nil d=q%x L=q-d x=L/m q=nil L={B,s,d,x}s=nil B=nil d=nil x=nil O[u[73666-73665]]=L else a=O[x]r=O[o]Q=694116+12413862 e=O[Y]E=U(797209-839944)A=561609+25551397510321 T=e(E,A)V=r[T]X=a==V N=X end end else if Q<106287+9581039 then if Q<9535318-14431 then Q=y and-177957+13989178 or 5116394-(-834231)else Q=4293926-743953 O[Y]=y end else Q=3559684-(-879602)B=O[u[-915600-(-915602)]]x=U(-629152-(-585970))L=34610338389079-(-74397)s=O[u[-855346+855349]]d=s(x,L)q=B[d]o=Y[q]q=U(-409009-(-366155))q=o[q]q=q(o)y=q end end else if Q<9886585-(-257082)then if Q<973088+9077685 then if Q<10818263-818828 then Q=false O[u[-393032+393035]]=Q Q=-213690+16492115 else w=O[u[-572751-(-572752)]]y=#w w=-1002940-(-1002940)Q=y==w Q=Q and 7672743-535244 or 240892+11914131 end else if Q<473738+9628050 then Q=3002615-421014 w=nil else D=-107992+19554063452521 y=O[u[559536+-559535]]N=U(646546+-689537)m=O[u[1005641+-1005639]]Z=m(N,D)L=B v=U(544270+-587404)Q=y[Z]Z=U(1008087+-1051099)m=i[Z]N=O[u[-145734+145735]]D=O[u[-423053-(-423055)]]F=25154749095802-(-839239)a=U(191568+-234472)X=D(v,F)Z=N[X]V=22277205139739-882838 y=m[Z]D=O[u[-960335+960338]]v=O[u[1038028-1038027]]F=O[u[884379+-884377]]W=F(a,V)X=v[W]N=D[X]v=U(-862464-(-819502))X=i[v]k=191305+2021202352228 V=U(39177-81847)F=O[u[-360440+360441]]W=O[u[-646606-(-646608)]]a=W(V,k)v=F[a]W=-571768+571768 F=-688385-(-688390)D=X[v]v=-496394+496394 X=D(v,F,W)Z=N+X m=y(Z)o[Q]=m m=U(253117+-296241)y=i[m]Z=O[u[-953592+953593]]X=U(140359+-183518)L=nil N=O[u[-77428-(-77430)]]v=280900+21342474706318 D=N(X,v)m=Z[D]Q=y[m]m=.05 y=Q(m)Q=680136+6336142 end end else if Q<9584966-(-672297)then if Q<358269+9865918 then Q={}w=Q Y=-903336+903337 Q=154161+15354041 h=O[u[522767-522758]]o=h h=348573+-348572 q=h h=984843+-984843 B=q<h h=Y-q else Y=b()Q=true O[Y]=Q w=z h=U(640662+-683398)y=i[h]s=U(804450-847125)h=U(293049-336076)Q=y[h]o=b()h=b()O[h]=Q Q=p(-42966+5403718,{})O[o]=Q Q=false q=b()O[q]=Q B=i[s]d=j(17300571-812865,{q})s=B(d)Q=s and 6516931-890219 or 272075+8129751 y=s end else s=O[u[-798802+798803]]Q=U(-497114+453971)L=U(-78172+35271)m=857667+10237864918108 d=O[u[-869396-(-869398)]]o=Y x=d(L,m)B=s[x]Q=q[Q]Q=Q(q,B)Q=Q and 7057007-(-484363)or 5754098-680551 end end end end else if Q<11959311-514938 then if Q<-281930+10926344 then if Q<47271+10473405 then if Q<9647585-(-705791)then if Q<-765512+11063299 then Y=U(-1061792-(-1019088))Q=126000+14293113 w=O[u[117199-117190]]Y=w[Y]Y=Y(w)else y={}Q=false O[u[112131+-112130]]=Q Q=i[U(496085-539091)]end else if Q<11048180-577140 then O[Y]=K G=O[e]C=-237484-(-237485)t=G+C g=A[t]J=m+g g=259783-259527 Q=J%g m=Q t=O[r]g=Z+t t=-740872+741128 Q=4104168-554195 J=g%t Z=J else v=v+W V=not a y=v<=F y=V and y V=v>=F V=a and V y=V or y V=9107191-381828 Q=y and V y=7403941-421401 Q=Q or y end end else if Q<-985825+11601931 then if Q<10624662-67788 then Q=Y Q=w and 7819208-(-848527)or-193785+7393409 else Q=O[u[882681-882677]]q=U(222323-265242)L=-369752+7380715139524 o={Q(w)}x=U(-45121+2358)Y=o[-717632+717634]y=o[-667614-(-667615)]h=o[389466-389463]o=y y=i[q]B=O[u[401763+-401762]]s=O[u[125533+-125531]]d=s(x,L)q=B[d]x=U(569999-612828)Q=y[q]B=O[u[455459-455458]]L=9282092285925-618243 s=O[u[-751253+751255]]d=s(x,L)q=B[d]y=Q(q)B=O[u[-223595-(-223596)]]x=U(-19474+-23506)q=y L=10295222812810-(-561712)s=O[u[-744111-(-744113)]]d=s(x,L)y=B[d]Q=o==y Q=Q and 776959-622275 or 4063628-(-461788)end else h=-409373+409492 Y=O[u[500542-500539]]w=Y*h Q=3102198-(-141012)Y=-328546-(-328803)y=w%Y O[u[276975+-276972]]=y end end else if Q<11837597-832410 then if Q<11262964-456710 then if Q<417184+10250737 then y=o Q=8324373-848079 else q=U(-872660-(-829942))x=U(343040-385915)w=z[-1024073-(-1024074)]o=i[q]B=O[u[177249-177248]]s=O[u[-379389+379391]]L=28068311578284-246686 d=s(x,L)q=B[d]x=464410+15230987093402 h=o[q]q=O[u[450783+-450782]]B=O[u[-40033-(-40035)]]d=U(-394535+351398)s=B(d,x)o=q[s]Y=h[o]d=4854618423743-(-935701)o=O[u[-88072-(-88073)]]s=U(-627121-(-583988))q=O[u[-250793+250795]]B=q(s,d)h=o[B]s=3330386820334-(-461088)y=Y[h]h=O[u[1041187-1041186]]B=U(-836904+794170)o=O[u[892697+-892695]]q=o(B,s)Y=h[q]Q=y[Y]Y=O[u[180130+-180129]]h=O[u[-747908+747910]]B=-199628+6396897498990 q=U(-687223+644306)o=h(q,B)y=Y[o]Y=w Q[y]=Y Q=i[U(-235244-(-192516))]y={}w=nil end else if Q<10712869-(-220241)then o=U(-210236+167581)h=i[o]q=O[u[-26349-(-26350)]]d=U(751994+-794683)B=O[u[-179923-(-179925)]]x=-604731+24601424193274 s=B(d,x)o=q[s]Y=h[o]o=O[u[888581+-888580]]s=U(980360-1023330)d=-586654+581026329772 q=O[u[-370493-(-370495)]]B=q(s,d)Q=U(-82056+39233)h=o[B]y=Y[h]Q=w[Q]Q=Q(w,y)Q=11016112-963027 else Q={}O[u[533640+-533638]]=Q s=-814247-(-814502)y=O[u[-423721+423724]]q=35184372815276-726444 o=y y=Y%q O[u[1020738+-1020734]]=y B=Y%s s=-424625-(-424627)q=B+s O[u[-497463+497468]]=q L=753518+-753517 d=U(-606536-(-563800))s=i[d]d=U(-456818-(-414002))Q=3925600-(-532921)B=s[d]s=B(w)B=U(510864-553599)d=-769266+769267 x=s h[Y]=B B=-143736+143769 m=L L=-583214+583214 Z=m<L L=d-m end end else if Q<10164752-(-916766)then if Q<10451729-(-578718)then Q=true Q=Q and 714669+12168258 or 14255773-(-654138)else w=U(530296+-573093)y=i[w]Y=O[u[-622880-(-622883)]]B=16965645009321-1024717 q=U(-601092-(-558062))h=O[u[-711202-(-711206)]]o=h(q,B)x=-754187+32954515799548 w=Y[o]Q=y[w]q=U(-991040+948383)w=Q Q=O[u[-531515+531520]]Y=O[u[-556853-(-556856)]]d=U(334284-377410)B=18959201389733-567849 L=U(140631+-183641)h=O[u[-672786+672790]]o=h(q,B)y=Y[o]N=10424808307355-(-317531)o=U(-1055679-(-1012667))h=i[o]q=O[u[-626061+626064]]B=O[u[371501+-371497]]s=B(d,x)m=34338071763093-39456 o=q[s]Z=U(-1006638+963554)Y=h[o]q=O[u[18705-18703]]s=O[u[794190-794187]]d=O[u[-549687-(-549691)]]x=d(L,m)B=s[x]o=q[B]s=O[u[-544773+544775]]x=O[u[8147+-8144]]L=O[u[193126+-193122]]m=L(Z,N)d=x[m]B=s[d]N=U(-752285-(-709427))L=O[u[144123+-144120]]m=O[u[-450576+450580]]D=601063+4561410219109 Z=m(N,D)N=U(973397-1016420)x=L[Z]D=5623578354043-(-485567)d=w[x]L=O[u[-715368-(-715371)]]m=O[u[404110-404106]]Z=m(N,D)x=L[Z]s=d[x]q=B+s h=Y(o,q)s=6216061353174-(-85624)Q[y]=h B=U(-155541+112474)y=O[u[-40954-(-40960)]]h=O[u[-939491-(-939494)]]o=O[u[-341733+341737]]q=o(B,s)Y=h[q]Q=y[Y]Y=Q Q=O[u[792590+-792583]]Q=Q and 890294+2336856 or 16711465-851902 end else d=nil x=H(x)X=H(X)N=nil Y=H(Y)L=H(L)Y=nil d=U(749179-791901)D=nil s=H(s)m=nil Q=92437+4025924 o=H(o)D=692209+-692208 o=b()q=H(q)h=H(h)Z=nil B=nil Z=b()L=b()h=nil O[o]=Y Y=b()x=U(-502655-(-459919))B=U(397366-440211)O[Y]=h q=i[B]s=U(412404-455249)B=U(396868-439615)h=q[B]q=b()O[q]=h B=i[s]s=U(-708506+665803)h=B[s]s=i[d]m={}d=U(-240780+198008)B=s[d]d=i[x]X=260416+-260160 x=U(126502-169644)s=d[x]x=b()d=312825+-312825 a=X O[x]=d d=933327+-933325 O[L]=d d={}N={}O[Z]=m m=-926497-(-926497)X=20481+-20480 V=X X=-906162-(-906162)k=V<X X=D-V end end end else if Q<12979056-957014 then if Q<-72689+12026123 then if Q<-326368+12139666 then if Q<12218737-492751 then y=O[q]N=12879559408067-(-482730)Q=1911373-461914 x=O[u[-844386+844388]]Z=U(991935+-1034709)L=O[u[-684461-(-684464)]]m=L(Z,N)d=x[m]x=false y[d]=x else y={}Q=false O[u[272114-272113]]=Q Q=i[U(-968998+926233)]end else if Q<491387+11412593 then d=O[q]Q=-636875+6226807 s=not d y=s else Q=nil w=O[u[-324094-(-324096)]]s=-96356+1590396320584 B=U(294467-337136)o=O[u[-141645+141648]]q=o(B,s)y=w[q]y={Q;y}Q=i[U(591344+-634482)]end end else if Q<12491210-487529 then if Q<11556684-(-417852)then d=U(-323832+280913)Z=U(-969923+927045)s=i[d]x=O[u[801001+-801000]]N=33265558972915-(-578191)L=O[u[-9372+9374]]m=L(Z,N)d=x[m]Q=s[d]x=O[u[-305584+305585]]N=-496777+4306062023774 L=O[u[-598510-(-598512)]]Z=U(-116984+74170)m=L(Z,N)X=8407468145780-(-791255)D=U(171465-214170)d=x[m]s=Q(d)m=O[u[-661856-(-661857)]]Z=O[u[145666+-145664]]N=Z(D,X)L=m[N]x=B[L]d=x Q=x and-113548+8513054 or-162573+8770454 else Q=13231820-(-373197)end else d=18223+33251062412620 Y=O[u[232794-232791]]Q=-886906+4598545 o=O[u[880623-880622]]q=O[u[-710753+710755]]s=U(94211-137167)B=q(s,d)h=o[B]s=U(-251402+208232)w=Y[h]o=O[u[1002967-1002966]]q=O[u[-259374+259376]]d=495949+20562140632089 B=q(s,d)Y=U(-559306-(-516437))Y=w[Y]h=o[B]Y=Y(w,h)y=Y end end else if Q<43494+12290880 then if Q<910424+11244227 then if Q<11767033-(-300540)then y=O[u[581166+-581165]]Q=y and 118315+8672966 or 6892940-787200 else Q3=-740429+12152824996456 A=U(789500+-832218)T=U(786869+-829570)r=i[T]P3=5321130233489-(-916252)S=U(595783-638885)E=i[A]t=O[o]G=O[Y]C=G(S,Q3)g=t[C]C=U(331048+-373726)S=121884+10708883257182 t=U(855373+-898035)t=E[t]A={t(E,g)}T=r(P(A))r=T()g=O[o]t=O[Y]Q3=23289855669335-346618 U3=11083489912037-856252 G=t(C,S)A=g[G]t=O[o]z3=15630908654118-501176 S=U(-610885+567957)G=O[Y]c3=U(484068+-527087)C=G(S,Q3)i3=26016794273670-(-870349)g=t[C]G=O[o]u3=10733593088231-818529 Q3=U(-509119+466047)C=O[Y]S=C(Q3,i3)i3=U(637455+-680528)t=G[S]C=O[o]S=O[Y]Q3=S(i3,U3)G=C[Q3]U3=U(-262352+219554)S=O[o]Q3=O[Y]i3=Q3(U3,P3)P3=U(-204481+161656)C=S[i3]T=U(-664895-(-621807))Q3=O[o]i3=O[Y]U3=i3(P3,z3)S=Q3[U3]i3=O[o]U3=O[Y]z3=U(940570+-983217)P3=U3(z3,u3)T=r[T]Q3=i3[P3]M3=3592453734523-(-771597)P3=O[o]z3=O[Y]u3=z3(c3,M3)U3=P3[u3]P3=false i3={[U3]=P3}P3=O[o]c3=U(109877-152689)z3=O[Y]M3=15333235387436-348232 u3=z3(c3,M3)U3=P3[u3]P3=false E={[A]=g,[t]=G;[C]=S,[Q3]=i3;[U3]=P3}T=T(r,E)i3=30747354503037-(-106608)S=20084001901891-256187 C=U(-1012454-(-969769))g=O[o]t=O[Y]G=t(C,S)Q3=-472116+22665236667758 A=g[G]E=U(-151117+108068)E=T[E]g=nil P3=-473589+30404473991491 E=E(T,A,g)S=U(772647-815346)A=U(832922-875782)t=O[o]A=E[A]G=O[Y]C=G(S,Q3)g=t[C]A=A(E,g)G=O[o]A=U(-180436+137593)C=O[Y]Q3=U(245968+-288883)U3=689885+10166405827489 S=C(Q3,i3)t=G[S]C=O[o]T=nil A=E[A]i3=U(-90110+47120)S=O[Y]Q3=S(i3,U3)G=C[Q3]S=O[o]U3=U(471260-514012)Q3=O[Y]i3=Q3(U3,P3)U3=30831576602390-(-1040639)r=nil C=S[i3]Q3=U(837214-880044)S=O[x]g={[t]=G,[C]=S}A=A(E,g)G=O[o]Q=-657884+3440329 C=O[Y]P3=18257699637195-(-301418)i3=11016236835834-806897 A=U(818550-861289)S=C(Q3,i3)A=E[A]t=G[S]C=O[o]i3=U(663098+-705761)S=O[Y]Q3=S(i3,U3)U3=U(-454520+411344)G=C[Q3]S=O[o]Q3=O[Y]i3=Q3(U3,P3)C=S[i3]S=j(16459402-817326,{x})g={[t]=G;[C]=S}A=A(E,g)E=nil end else if Q<541158+11735945 then Q=i[U(-705634+662519)]h=U(-396811-(-354089))Y=i[h]h=U(-441589-(-398817))w=Y[h]h=O[u[921537+-921536]]Y={w(h)}y={P(Y)}else d=31589135116259-962158 y=O[u[607603-607602]]q=O[u[508038-508036]]s=U(710626+-753349)B=q(s,d)Q=y[B]s=U(230693+-273618)d=27955124301674-(-836463)y=true o[Q]=y y=O[u[717052+-717051]]q=O[u[-984299-(-984301)]]B=q(s,d)Q=y[B]y=w o[Q]=y Q=-811037+8956544 end end else if Q<801879+11751275 then if Q<-447800+12817719 then q=O[u[575215-575214]]B=O[u[-957444+957446]]x=18970664527124-(-621933)d=U(548332+-591303)s=B(d,x)o=q[s]h=Y[o]o=U(-283151+240297)Q=9386118-438600 o=h[o]o=o(h)y=o else y=U(-572332+529614)B=-581537+3446098060773 q=U(956015-999163)Q=i[y]Y=O[u[951866-951865]]y=U(357772-400545)y=Q[y]h=O[u[-825683-(-825685)]]o=h(q,B)w=Y[o]y=y(Q,w)w=U(-991215+948083)w=y[w]Q={w(y)}y={P(Q)}Q=i[U(-227789+185113)]end else d=-317207+3219863379186 o=O[u[872632-872631]]s=U(-578692-(-535985))q=O[u[-473457-(-473459)]]m=3368015218306-(-573342)L=U(692829-735502)B=q(s,d)h=o[B]Y=w[h]B=U(-35023+-7632)q=i[B]s=O[u[745399+-745398]]d=O[u[-826055-(-826057)]]x=d(L,m)B=s[x]o=q[B]B=O[u[-298550+298551]]s=O[u[-589374-(-589376)]]x=U(408413-451298)L=17858183275563-(-441424)d=s(x,L)q=B[d]h=o[q]y=Y==h Q=y and 7506223-(-530781)or 682572+11298354 end end end end end else if Q<358946+14087921 then if Q<13380139-(-136127)then if Q<13139112-44055 then if Q<11961047-(-916447)then if Q<12934714-274739 then if Q<11580407-(-1033469)then Y=U(-643755+601093)y=U(-554998-(-512280))Q=i[y]Y=Q[Y]w=O[u[387781-387780]]y={Y(Q,w)}y={P(y)}Q=i[U(-741124-(-698012))]else w=O[u[-451376-(-451385)]]Q=w and 9614658-(-653615)or-753797+15172910 end else if Q<13338961-593201 then G=-301357-(-301359)Q=8404361-(-176982)t=A[G]G=O[E]g=t==G K=g else O[u[778388+-778383]]=y w=nil Q=14957704-(-496520)end end else if Q<-797203+13741409 then if Q<-939040+13830108 then Q=O[s]a=-60210-(-60216)W=-399679+399680 F=Q(W,a)a=U(-770729-(-728039))Q=U(689076+-731766)i[Q]=F W=i[a]a=446708+-446706 Q=W>a Q=Q and 61858+7724130 or 128265+13255576 else Q=469457-(-61107)Y=O[u[-516981+516983]]d=19992285455541-442456 o=O[u[-258448-(-258451)]]s=U(349906+-393010)q=O[u[990404-990400]]B=q(s,d)h=o[B]w=Y[h]y=w end else if Q<13815106-842389 then s=not w B=Q q=s Q=s and-875034+15155872 or 16452331-465136 else y={}Q=i[U(-422186-(-379181))]end end end else if Q<-218698+13477303 then if Q<18468+13214517 then if Q<12368013-(-746275)then Q=D m=N Q=8122996-584023 else Q=O[u[145552-145549]]y=Q()w=y Q=w and 10160739-(-417049)or 7562050-(-184925)end else if Q<-456201+13707306 then B=U(-48413-(-5628))Y=U(796650+-839368)w=i[Y]h=O[u[-444321+444322]]s=6196230286623-(-499238)o=O[u[-120136+120138]]q=o(B,s)d=31000491957176-680789 Y=h[q]y=w[Y]s=U(-343163+300245)q=U(764999-807838)Y=O[u[-301006-(-301007)]]h=O[u[-185971-(-185973)]]B=93427+8784419808007 o=h(q,B)w=Y[o]Q=y[w]w=Q o=O[u[-514236-(-514237)]]q=O[u[206333+-206331]]B=q(s,d)h=o[B]Y=w[h]Q=Y and 262393+3632320 or 187643+14374658 y=Y else y=U(-679355+636209)Q=i[y]w=O[u[-851556+851557]]y=Q(w)y={}Q=i[U(12516-55577)]end end else if Q<1036395+12413198 then if Q<946715+12410600 then w=z[-991482-(-991483)]Q=O[u[259883+-259882]]h=Q Y=z[-472690-(-472692)]Q=h[Y]Q=Q and 7737819-(-994091)or 11744617-789418 else a=U(-957994+915304)Q=i[a]a=U(840992+-883634)i[a]=Q Q=2851272-(-733275)end else O3=b()O[O3]=y3 y3=O3 b3=O[o]z3=M3 Y3=O[Y]q3=3354461294924-(-292046)H3=U(800428-843427)o3=Y3(H3,q3)h3=b3[o3]l3=-129321+26493315246425 j3=U(919640-962423)Y3=O[y3]H3=O[o]q3=O[Y]p3=q3(j3,l3)z3=nil j3=29596285776187-883558 o3=H3[p3]b3=Y3[o3]o3=O[o]p3=U(-926756-(-883842))Q=2646205-724673 H3=O[Y]q3=H3(p3,j3)O3=U(-23531+-19208)O3=U3[O3]Y3=o3[q3]o3=f(13942674-706295,{o,Y,y3})w3={[h3]=b3,[Y3]=o3}y3=H(y3)O3=O3(U3,w3)end end end else if Q<-891451+14805068 then if Q<590615+13218127 then if Q<-14827+13744677 then if Q<722566+12959115 then w=nil Q=i[U(4306-47485)]y={}else q=U(-71773-(-28599))w=U(-927062-(-883938))y=i[w]Y=O[u[-783718+783719]]h=O[u[-929000+929002]]B=116305+18829063166958 o=h(q,B)w=Y[o]Q=y[w]w=865439-865379 y=Q(w)Q=y and 12650532-(-523979)or 15850541-(-321281)end else if Q<14142000-357571 then J=Q G=163655-163654 t=A[G]G=false g=t==G Q=g and-908395+13635869 or-98717+8680060 K=g else w=z[1037088+-1037087]Q=w O[u[919191-919190]]=Q y={}w=nil Q=i[U(-799019-(-756260))]end end else if Q<13383616-(-501185)then if Q<474497+13343907 then d=U(-740173-(-697088))Q=nil q=O[u[-921417+921419]]x=377424+6613012613559 B=O[u[698643-698640]]s=B(d,x)y=q[s]y={Q;y}Q=i[U(-1036744-(-994091))]else Y=nil q=nil o=nil h=nil Q=7423258-(-323717)end else r=U(-381705+338987)V=i[r]S=-187299+428289383530 t=U(991306-1034000)g=26337731024677-(-235715)G=13810031958381-(-442289)e=O[o]T=O[Y]A=U(915118-957871)E=T(A,g)C=25041684608764-1034608 g=-255946+20351196662990 r=e[E]D=V[r]A=U(-343458+300647)e=O[o]T=O[Y]E=T(A,g)r=e[E]E=O[o]A=O[Y]g=A(t,G)T=E[g]A=O[o]G=U(52719+-95477)g=O[Y]t=g(G,C)E=A[t]g=O[o]C=U(283501+-326347)t=O[Y]G=t(C,S)t=Q Q=a and-81455+7998679 or 14449940-(-515276)A=g[G]g=a end end else if Q<883979+13527757 then if Q<14770845-485382 then if Q<-92015+14238794 then w=z[-605736-(-605737)]x=2733195490173-(-250235)Q=w d=U(-36430+-6741)o=U(915581+-958299)O[u[76475+-76474]]=Q h=i[o]q=O[u[439640+-439638]]B=O[u[-295902+295905]]s=B(d,x)o=q[s]s=U(-515855+472979)Y=h[o]d=623906+32790176282243 o=O[u[422339+-422337]]q=O[u[-345253+345256]]B=q(s,d)L=18193537403673-666113 h=o[B]y=Y[h]Y=y h=Q B=O[u[-5295-(-5297)]]s=O[u[975899+-975896]]x=U(714654-757438)d=s(x,L)q=B[d]o=Y[q]y=o Q=o and 4436590-(-2696)or 8813425-(-951152)else Q=B Q=-957373+10370289 y=q end else if Q<13512806-(-815055)then Q=true Q=Q and-590966+3520285 or 540471+12441002 else Q=878543+11897680 h=O[u[-190906+190912]]Y=h==w y=Y end end else if Q<13937498-(-494155)then if Q<14977246-554639 then h=O[u[522131+-522125]]w=h Y=Q Q=h and-819965+9247152 or 10378354-(-176853)else Q=949259+13345190 end else Q=true O[u[350949-350946]]=Q Q=-767380+13334384 end end end end else if Q<14824105-(-959646)then if Q<967650+14421500 then if Q<14283019-(-733684)then if Q<-799752+15655621 then if Q<14956364-253906 then o=O[u[932899-932898]]q=O[u[286538+-286536]]s=U(-439621+396511)d=28461979315973-(-1216)B=q(s,d)h=o[B]Y=w[h]h=U(-580019+537165)h=Y[h]h=h(Y)Q=3139136-(-755577)y=h else y=U(-530561+487886)Y=j(12589349-(-6958),{u[-961994+961995]})Q=i[y]h={Q(Y)}w=h[-842214-(-842216)]y=h[-633295-(-633296)]h=b()Y=y O[h]=w w=not Y Q=w and-675109+5895774 or 15609634-(-284423)y=w end else if Q<486831+14443994 then y={}Q=i[U(659544+-702596)]else C=O[o]i3=U(-970984-(-928272))S=O[Y]U3=12347147464509-(-304952)Q3=S(i3,U3)G=C[Q3]g=G Q=697497+7219727 end end else if Q<-1026754+16216563 then if Q<14549501-(-535777)then O3=U(768310-811297)c3=O[o]f3=313934303818-1020344 w3=7418254704117-(-577417)h3=-804402+12659085188408 M3=O[Y]z3=U(-383282+340233)l3=13871999391733-(-328006)j3=25094578458999-779218 z3=E[z3]B3=16240047667593-154623 n3=27676616200819-(-597988)y3=M3(O3,w3)s3=29639965080117-410699 u3=c3[y3]c3=nil z3=z3(E,u3,c3)w3=U(-39647+-3503)M3=O[o]u3=U(573458-616318)y3=O[Y]O3=y3(w3,h3)c3=M3[O3]u3=z3[u3]M3=true u3=u3(z3,c3,M3)R3=U(-795437-(-752328))y3=false c3=b()M3=b()h3=b()p3=U(888610+-931507)u3=false O[c3]=u3 u3=175825-175725 O[M3]=u3 w3=nil O3=b()S=H(S)u3=false O[O3]=u3 u3=b()O[u3]=y3 y3=nil O[h3]=y3 y3=b()O[y3]=w3 o3=O[o]I3=12236655624216-(-300586)H3=O[Y]q3=H3(p3,j3)Y3=o3[q3]j3=U(418024-461117)U3=nil H3=O[o]w3=U(830828+-873929)m3=20801459349444-999918 q3=O[Y]p3=q3(j3,l3)o3=H3[p3]l3=U(-905981-(-863232))q3=O[o]p3=O[Y]L3=U(102832-145818)j3=p3(l3,f3)H3=q3[j3]j3=O[o]q3=false l3=O[Y]f3=l3(R3,I3)I3=U(727977-771152)p3=j3[f3]l3=O[o]f3=O[Y]R3=f3(I3,n3)j3=l3[R3]w3=z3[w3]f3=O[o]R3=O[Y]n3=U(345203+-388303)I3=R3(n3,s3)l3=f3[I3]f3=l(-791196+14708061,{c3,o,Y;h3;y3,O3,u3;M3})b3={[Y3]=o3;[H3]=q3,[p3]=j3,[l3]=f3}w3=w3(z3,b3)r=nil P3=nil p3=U(-737953-(-694878))j3=348672+33428723264206 o3=O[o]Q=383134+2399311 H3=O[Y]R3=U(762774-805514)w3=U(-776248+733509)q3=H3(p3,j3)Y3=o3[q3]H3=O[o]q3=O[Y]f3=1671815853219-274841 l3=9191263332282-907010 j3=U(-12998-30079)C=nil p3=q3(j3,l3)l3=U(844668+-887311)w3=z3[w3]o3=H3[p3]q3=O[o]p3=O[Y]j3=p3(l3,f3)H3=q3[j3]p3=U(-386518-(-343685))q3=p(-245778+5368842,{O3,o;Y})b3={[Y3]=o3;[H3]=q3}w3=w3(z3,b3)o3=O[o]H3=O[Y]j3=1965476780235-972088 q3=H3(p3,j3)Y3=o3[q3]H3=O[o]s3=34459870570687-928273 l3=-518167+30232874409749 j3=U(22293-65086)q3=O[Y]p3=q3(j3,l3)Z3=-749384+9700306911469 y3=H(y3)o3=H3[p3]q3=O[o]f3=803409+28548194677148 p3=O[Y]l3=U(-374294-(-331347))j3=p3(l3,f3)w3=U(-1079063-(-1036324))w3=z3[w3]p3=U(9380+-52149)H3=q3[j3]j3=29153242452897-106138 q3=l(-276670+2545733,{u3,o;Y})b3={[Y3]=o3;[H3]=q3}i3=nil I3=-635626+10934514861773 d3=834329+10088213026624 w3=w3(z3,b3)l3=-5548+15500668826078 o3=O[o]f3=203193+18469904369631 H3=O[Y]q3=H3(p3,j3)Y3=o3[q3]H3=O[o]n3=U(-461324+418346)q3=O[Y]j3=U(-535974+492990)p3=q3(j3,l3)o3=H3[p3]l3=U(903845+-946715)q3=O[o]x3=15711792072406-(-628158)p3=O[Y]j3=p3(l3,f3)p3=-919148-(-919149)H3=q3[j3]w3=U(204386-247570)j3=788754-788254 q3={p3,j3}j3=O[o]l3=O[Y]f3=l3(R3,I3)p3=j3[f3]f3=O[o]R3=O[Y]j3=-37940+37941 I3=R3(n3,s3)l3=f3[I3]s3=U(508842+-551967)w3=z3[w3]R3=O[o]I3=O[Y]n3=I3(s3,B3)f3=R3[n3]I3=O[o]n3=O[Y]B3=U(-646172-(-603110))s3=n3(B3,d3)R3=I3[s3]s3=O[o]I3=-509414+509514 B3=O[Y]d3=B3(L3,Z3)n3=s3[d3]c3=H(c3)Z3=U(-747045-(-704099))B3=O[o]A=nil d3=O[Y]L3=d3(Z3,m3)s3=B3[L3]O3=H(O3)d3=O[o]L3=O[Y]m3=U(-1050064-(-1007085))Z3=L3(m3,x3)B3=d3[Z3]d3=j(315059+13493055,{M3})u3=H(u3)b3={[Y3]=o3,[H3]=q3;[p3]=j3,[l3]=f3,[R3]=I3,[n3]=s3,[B3]=d3}w3=w3(z3,b3)w3=O[T]j3=U(-834960+791821)f3=23850827652505-(-69065)E=nil H3=O[o]l3=-358007+15916367958890 q3=O[Y]p3=q3(j3,l3)R3=-177949+39134115631 o3=H3[p3]l3=U(-890815-(-847878))q3=O[o]p3=O[Y]h3=H(h3)n3=-920722+30582767158323 j3=p3(l3,f3)I3=U(-952287-(-909571))z3=nil f3=U(886206-929305)H3=q3[j3]p3=O[o]j3=O[Y]l3=j3(f3,R3)Q3=nil g=nil q3=p3[l3]l3=O[o]f3=O[Y]R3=f3(I3,n3)j3=l3[R3]p3=j3 ..e n3=15298362214817-994766 l3=O[o]G=H(G)f3=O[Y]I3=U(361640-404592)R3=f3(I3,n3)j3=l3[R3]b3=U(871035+-914215)b3=w3[b3]M3=H(M3)l3=418619+-418614 Y3={[o3]=H3,[q3]=p3,[j3]=l3}b3=b3(w3,Y3)p3=U(609555+-652564)Y3=U(851060-894184)b3=i[Y3]o3=O[o]j3=-494501+12126609891763 H3=O[Y]q3=H3(p3,j3)Y3=o3[q3]w3=b3[Y3]Y3=R(6685701-314766,{o,Y,Z;N,t,D;T})b3=w3(Y3)t=H(t)T=H(T)else h=O[u[-61410-(-61419)]]d=U(-69462-(-26524))q=O[u[578932+-578929]]x=26631905039937-(-563760)B=O[u[-300416+300420]]m=U(-332656+289774)s=B(d,x)o=q[s]d=O[u[282841+-282838]]Z=-923190+12087476382770 x=O[u[366826+-366822]]L=x(m,Z)s=d[L]B=Y[s]s=O[u[561109+-561099]]Q=7603423-596395 q=B*s h[o]=q end else s=nil Q=-191013+854557 end end else if Q<16625360-977338 then if Q<764665+14740521 then if Q<357054+15141436 then Q=O[u[-530336+530343]]Q=Q and 1506540-759505 or 253933+9930420 else Q=L Q=x and-438167+4034626 or-677809+6753818 y=x end else if Q<652528+14983171 then h=h+q s=not B Y=h<=o Y=s and Y s=h>=o s=B and s Y=s or Y s=-933167+3565433 Q=Y and s Y=-400573+6088612 Q=Q or Y else y=U(885865-929011)Q=i[y]w=O[u[-831844+831845]]y=Q(w)Q=i[U(-713220+670463)]y={}end end else if Q<-165609+15931496 then if Q<14964408-(-777487)then y={}Q=i[U(-299528-(-256655))]else X=-479845+18009406059303 N=U(-190321-(-147345))Z=8955952146587-(-1009583)m=U(-714597+671440)D=-920451+32705614825216 d=O[u[272812+-272811]]x=O[u[434724-434722]]L=x(m,Z)Q=d[L]L=O[u[-1037055-(-1037056)]]m=O[u[-759910+759912]]Z=m(N,D)x=L[Z]d=B[x]m=O[u[451590-451589]]Z=O[u[793847-793845]]D=U(-361949-(-319187))N=Z(D,X)L=m[N]x=B[L]y={Q;d,x}Q=i[U(362529-405339)]end else w=z[616243-616242]Y=not w Q=Y and 1046458+-200712 or 373995+3814324 y=Y end end end else if Q<17116187-940794 then if Q<-779610+16784908 then if Q<15008706-(-873250)then if Q<723828+15121641 then y=O[u[866523-866518]]Q=y and 3113598-876332 or 10899951-(-570597)else y=O[u[529674-529666]]Q=y and 438068+4692981 or-464365+3988917 end else if Q<15403571-(-538637)then o=O[h]w=not o y=w Q=-860909+6081574 else N=U(329706+-372855)x=U(386466-429470)d=i[x]x=d(w)L=O[u[-528563+528565]]D=-819479+13987704609416 m=O[u[848722+-848719]]Z=m(N,D)d=L[Z]s=x~=d Q=-575959+14856797 q=s end end else if Q<-894179+17057553 then if Q<16212765-110775 then L=634820899223-847984 h=O[u[732503-732502]]s=8764269849739-(-648038)B=U(637532+-680464)o=O[u[74577+-74575]]q=o(B,s)Y=h[q]x=U(-36882+-6020)y=w[Y]q=U(-999278-(-956623))o=i[q]B=O[u[-560447+560448]]s=O[u[-326687+326689]]d=s(x,L)q=B[d]h=o[q]q=O[u[655915+-655914]]x=20252379949655-1033601 B=O[u[379448+-379446]]d=U(-245513+202845)s=B(d,x)o=q[s]Y=h[o]Q=y==Y Q=Q and-1027018+15460357 or 13598249-1031245 else Q=-178536+15965869 d=U(312256-354960)y=O[u[967379+-967375]]d=y[d]d=d(y)end else Q=i[U(91844+-134701)]y={}end end else if Q<-1044271+17466774 then if Q<-381059+16727476 then if Q<124716+16134726 then o=-809414+809415 q=-1018908+1018910 Y=O[u[-1016656-(-1016657)]]h=Y(o,q)Y=-874378-(-874379)w=h==Y y=w Q=w and 825780+6823695 or 3043884-815510 else o=O[u[994573+-994572]]m=31696515024673-(-815750)s=U(667533+-710217)d=352967+2929145160332 q=O[u[-950702+950704]]B=q(s,d)L=U(-1014812+971795)h=o[B]Y=w[h]B=U(500097+-542752)q=i[B]s=O[u[202935-202934]]d=O[u[-124792+124794]]x=d(L,m)B=s[x]o=q[B]B=O[u[-181374-(-181375)]]L=34104740217227-(-343166)x=U(199374+-242497)s=O[u[847157+-847155]]d=s(x,L)q=B[d]h=o[q]y=Y==h Q=y and-459335+1410002 or 5672722-49132 end else if Q<16117356-(-288901)then d=33592896812949-703099 h=U(662875+-705593)w=z[82708-82707]s=U(-730432-(-687469))Y=i[h]o=O[u[-459324-(-459325)]]q=O[u[399645+-399643]]x=752779+31008107658204 B=q(s,d)h=o[B]y=Y[h]h=O[u[-854990+854991]]s=-206152+17535030494509 o=O[u[153493-153491]]B=U(-654061-(-611307))q=o(B,s)d=U(785337-828390)Y=h[q]Q=y[Y]q=O[u[780863+-780862]]B=O[u[485317-485315]]Y=Q s=B(d,x)o=q[s]h=Y[o]y=h Q=h and 8232500-(-715018)or 11317327-(-1037401)else Q=444341+10566665 end end else if Q<-528082+17199490 then if Q<15783336-(-694163)then Q=399606-59446 B=nil s=nil o=nil else y={}Q=true O[u[-864952+864953]]=Q Q=i[U(153172+-196024)]end else c3=600473+23606690349399 U3=O[o]u3=U(161052-203905)P3=O[Y]z3=P3(u3,c3)i3=U3[z3]Q3=A[i3]Q=6935364-(-1004584)i3=U(429784-472638)i3=Q3[i3]i3=i3(Q3)C=i3 end end end end end end end end Q=#c return P(y)end,function(i)local U,Q=407619-407618,i[-289558+289559]while Q do w[Q],U=w[Q]-(-61277+61278),(298588+-298587)+U if 832075+-832075==w[Q]then w[Q],O[Q]=nil,nil end Q=i[U]end end,function(i,U)local P=h(U)local z=function(z,u,c,M)return Q(i,{z;u;c;M},U,P)end return z end,function(i,U)local P=h(U)local z=function(...)return Q(i,{...},U,P)end return z end,function(i)w[i]=w[i]-(-760888-(-760889))if-618497-(-618497)==w[i]then w[i],O[i]=nil,nil end end,function(i,U)local P=h(U)local z=function(z,u,c)return Q(i,{z;u,c},U,P)end return z end,function()Y=(1786+-1785)+Y w[Y]=307021-307020 return Y end,function(i,U)local P=h(U)local z=function(z,u,c,M,y)return Q(i,{z;u,c;M,y},U,P)end return z end,function(i,U)local P=h(U)local z=function()return Q(i,{},U,P)end return z end return(q(-571821+10803359,{}))(P(y))end)(getfenv and getfenv()or _ENV,unpack or table[U(22960-65998)],newproxy,setmetatable,getmetatable,select,{...})end)(...)"
9Fz0AsG1,ДЗ: Наибольший элемент,NikaBang,C#,Sunday 19th of October 2025 04:34:34 AM CDT,"internal class Program
{
    static void Main(string[] args)
    {
        int[,] array = new int[10, 10];
        int maxValue = 0;
        int newValueForMax = 0;
        int minRandom = 1;
        int maxRandom = 10;
        Random random = new Random();
        Console.WriteLine(""Исходный массив:"");

        for (int i = 0; i < array.GetLength(0); i++)
        {
            for (int j = 0; j < array.GetLength(1); j++)
            {
                array[i, j] = random.Next(minRandom, maxRandom);
                Console.Write(array[i, j] + "" "");
                
                if(maxValue <  array[i, j])
                {
                    maxValue = array[i, j];
                }
            }
            Console.WriteLine();
        }

        Console.WriteLine(""\nИзменненый массив:"");

        for (int i = 0; i < array.GetLength(0); i++)
        {
            for (int j = 0; j < array.GetLength(1); j++)
            {
                if (maxValue == array[i, j])
                {
                    array[i, j] = newValueForMax;
                }

                Console.Write(array[i, j] + "" "");
            }
            Console.WriteLine();
        }
    }
}"
a6RmEUXA,ДЗ: Работа с конкретными строками/столбцами,NikaBang,C#,Sunday 19th of October 2025 04:15:25 AM CDT,"internal class Program
{
    static void Main(string[] args)
    {
        int line = 1;
        int column = 0;
        int sum = 0;
        int productOfNumbers = 1;

        int[,] arrya = {
            { 1, 2, 3 },
            { 4, 5, 6 },
            { 7, 8, 9 }
        };

        for (int i = 0; i < arrya.GetLength(1); i++)
        {
            sum += arrya[line, i];
        }

        for (int i = 0;i < arrya.GetLength(0); i++)
        {
            productOfNumbers *= arrya[i, column];
        }

        for(int i = 0; i < arrya.GetLength(0) ; i++)
        {
            for (int j = 0; j < arrya.GetLength(1); j++)
            {
                Console.Write(arrya[i, j] + "" "");
            }
            Console.WriteLine();
        }

        Console.WriteLine($""сумма второй строки - {sum},\nпроизведение первого столбца - {productOfNumbers}."");
    }
}"
53cx7akz,Untitled,GeryGreyhound,Python,Sunday 19th of October 2025 03:48:08 AM CDT,"# timeline_visualizer.py
# Requires: matplotlib, numpy
# Usage: create instance, add people/events, then render()

import math
import datetime
from typing import List, Dict, Any, Tuple, Optional
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
from matplotlib.patches import FancyBboxPatch, Rectangle
import numpy as np

class TimelineVisualizer:
	""""""
	Simple, reusable visualizer that draws horizontal age-based timelines
	for multiple people (parallel bars). X axis = AGE (not calendar year).
	""""""
	def __init__(self,
		people: List[Dict[str, Any]],
		age_max: int = 100,
		size: Tuple[int, int] = (1920, 1080),
		dpi: int = 100,
		font_family: str = ""DejaVu Sans"",
		pastel_palette: Optional[List[str]] = None):
		""""""
		people: list of dicts, each with keys:
			- 'name': str
			- 'birth_year': int
			- 'events': list of dicts with either:
				Point event: {'year': int, 'label': str, 'color': Optional[str], 'position': Optional[str]}
					position: 'close_to_bar', 'away_from_bar', or 'auto' (default)
				Duration event: {'start_year': int, 'end_year': int, 'label': str}
		age_max: maximum age shown on X axis
		size: (width_px, height_px)
		""""""
		self.people = people
		self.age_max = age_max
		self.size = size
		self.dpi = dpi
		self.font_family = font_family
		# Modern, vibrant social media color palette
		self.pastel_palette = pastel_palette or [""#FF6B6B"", ""#4ECDC4"", ""#45B7D1"", ""#FFA07A""]
		plt.rcParams['font.family'] = self.font_family

	def year_to_age(self, birth_year: int, year: int) -> float:
		return year - birth_year

	def render(self,
		filename: str = ""parallel_timelines.png"",
		show_grid_every: int = 10,
		bar_height: float = 0.6):
		# Figure sizing: Matplotlib expects inches
		fig_w = self.size[0] / self.dpi
		fig_h = self.size[1] / self.dpi
		fig, ax = plt.subplots(figsize=(fig_w, fig_h), dpi=self.dpi)

		# Y positions for parallel bars
		n = len(self.people)
		if n == 0:
			raise ValueError(""No people provided to visualize."")
		ys = np.linspace(n - 1, 0, n)  # top-to-bottom order

		# Draw a modern infographic-style background
		fig.patch.set_facecolor(""#F8F9FA"")
		ax.set_facecolor(""#F8F9FA"")

		# Draw dashed vertical separators (every show_grid_every years)
		for age in range(0, self.age_max + 1, show_grid_every):
			ax.vlines(age, -1, n, linestyles='dashed', linewidth=0.8, alpha=0.3, color='#666666')

		# Draw horizontal bars (life spans) and events
		for i, person in enumerate(self.people):
			y = ys[i]
			name = person.get('name', f""Person {i+1}"")
			birth = int(person['birth_year'])
			
			# Determine max age for this person (special handling for 1985)
			person_age_max = 40 if birth == 1985 else self.age_max

			# draw full-age bar (0 .. age_max) with stroke and rounded corners
			bar_color = self.pastel_palette[i % len(self.pastel_palette)]
			
			# Draw bar with rounded corners
			bar = FancyBboxPatch((0, y - bar_height/2), person_age_max, bar_height,
				boxstyle=""round,pad=0.02"", 
				edgecolor='none',  # We'll draw borders manually
				linewidth=0,
				facecolor=bar_color, 
				alpha=0.85,
				zorder=2)
			ax.add_patch(bar)
			
			# Manually draw borders with precise positioning
			border_width = 2.5
			border_color = '#2C3E50'
			border_offset = border_width / 2000  # Slight inset to align with bar edge
			
			# Special fade effect for 1985
			if birth == 1985:
				# Add gradient fade from bar color to white background
				fade_width = 1.5  # Fade over about 1.5 age units
				num_steps = 30
				background_color = mcolors.to_rgb('#F8F9FA')
				bar_rgb = mcolors.to_rgb(bar_color)
				
				for step in range(num_steps):
					x_start = person_age_max + (step * fade_width / num_steps)
					x_width = fade_width / num_steps
					# Interpolate between bar color and white background
					ratio = step / num_steps
					r = bar_rgb[0] * (1 - ratio) + background_color[0] * ratio
					g = bar_rgb[1] * (1 - ratio) + background_color[1] * ratio
					b = bar_rgb[2] * (1 - ratio) + background_color[2] * ratio
					fade_color = (r, g, b)
					
					fade_rect = Rectangle((x_start, y - bar_height/2), x_width, bar_height,
						facecolor=fade_color, edgecolor='none', alpha=0.85, zorder=2.1)
					ax.add_patch(fade_rect)
				
				# Fading top border
				for step in range(num_steps):
					x_start = person_age_max + (step * fade_width / num_steps)
					x_end = person_age_max + ((step + 1) * fade_width / num_steps)
					ratio = step / num_steps
					alpha_val = 1.0 - ratio
					ax.plot([x_start, x_end], [y + bar_height/2 - border_offset, y + bar_height/2 - border_offset], 
						linewidth=border_width, color=border_color, alpha=alpha_val, 
						solid_capstyle='butt', zorder=3)
				
				# Fading bottom border
				for step in range(num_steps):
					x_start = person_age_max + (step * fade_width / num_steps)
					x_end = person_age_max + ((step + 1) * fade_width / num_steps)
					ratio = step / num_steps
					alpha_val = 1.0 - ratio
					ax.plot([x_start, x_end], [y - bar_height/2 + border_offset, y - bar_height/2 + border_offset], 
						linewidth=border_width, color=border_color, alpha=alpha_val, 
						solid_capstyle='butt', zorder=3)
			
			# Top border (up to person_age_max)
			ax.plot([0, person_age_max], [y + bar_height/2 - border_offset, y + bar_height/2 - border_offset], 
				linewidth=border_width, color=border_color, solid_capstyle='round', zorder=3)
			# Bottom border (up to person_age_max)
			ax.plot([0, person_age_max], [y - bar_height/2 + border_offset, y - bar_height/2 + border_offset], 
				linewidth=border_width, color=border_color, solid_capstyle='round', zorder=3)
			# Left border
			ax.plot([0, 0], [y - bar_height/2 + border_offset, y + bar_height/2 - border_offset], 
				linewidth=border_width, color=border_color, solid_capstyle='round', zorder=3)
			
			# Right border - only for 1885, not for 1985 (ongoing)
			if birth != 1985:
				ax.plot([person_age_max, person_age_max], [y - bar_height/2 + border_offset, y + bar_height/2 - border_offset], 
					linewidth=border_width, color=border_color, solid_capstyle='round', zorder=3)

			# person label positioning: top for 1985 (to avoid dot overlap), bottom for 1885
			if birth == 1985:
				# Upper left corner to avoid overlapping with dots at bottom
				ax.text(1, y + bar_height/2 - 0.05, f""{name}"", 
					ha='left', va='top', fontsize=16, weight='bold', color='white', zorder=3,
					bbox=dict(boxstyle=""round,pad=0.3"", facecolor='#2C3E50', alpha=0.8, edgecolor='none'))
			else:
				# Bottom left corner (default)
				ax.text(1, y - bar_height/2 + 0.05, f""{name}"", 
					ha='left', va='bottom', fontsize=16, weight='bold', color='white', zorder=3,
					bbox=dict(boxstyle=""round,pad=0.3"", facecolor='#2C3E50', alpha=0.8, edgecolor='none'))

			# events: annotate on the bar
			# Divide bar height into thirds for vertical positioning
			bar_third = bar_height / 3
			
			events = person.get('events', [])
			for ev_idx, ev in enumerate(events):
				label = ev.get('label', '')
				
				# Check if this is a duration event (has start_year and end_year)
				is_duration = 'start_year' in ev and 'end_year' in ev
				
				if is_duration:
					# Duration event (e.g., wars, political eras)
					start_year = int(ev['start_year'])
					end_year = int(ev['end_year'])
					start_age = self.year_to_age(birth, start_year)
					end_age = self.year_to_age(birth, end_year)
					
					# skip if completely outside the plotted range
					if end_age < 0 or start_age > person_age_max:
						continue
					
					# Clamp to visible range
					start_age = max(0, start_age)
					end_age = min(person_age_max, end_age)
					mid_age = (start_age + end_age) / 2
					
					# Position closer to vertical center of the chart
					# Move toward the center between the two bars
					if birth == 1885:
						y_duration = y - bar_third * 0.5  # Move down slightly
					else:
						y_duration = y + bar_third * 0.5  # Move up slightly
					
					# Draw horizontal line connecting the markers
					ax.plot([start_age, end_age], [y_duration, y_duration], linewidth=2.5, 
						color='#2C3E50', alpha=0.8, solid_capstyle='butt', zorder=5)
					
					# Draw semi-circle markers at start and end (like split dots)
					# Left semi-circle (start)
					ax.plot(start_age, y_duration, marker='o', markersize=12, 
						markeredgecolor='white', markerfacecolor='#2C3E50', 
						markeredgewidth=2, zorder=6)
					# Right semi-circle (end)
					ax.plot(end_age, y_duration, marker='o', markersize=12, 
						markeredgecolor='white', markerfacecolor='#2C3E50', 
						markeredgewidth=2, zorder=6)
					
					# Label above the line (event name)
					ax.text(mid_age, y_duration + 0.08, label,
						ha='center',
						va='bottom',
						fontsize=12,
						weight='600',
						color='#2C3E50',
						zorder=7)
					
					# Years below the line
					ax.text(mid_age, y_duration - 0.08, f""{start_year}–{end_year}"",
						ha='center',
						va='top',
						fontsize=11,
						weight='500',
						color='#2C3E50',
						zorder=7)
				else:
					# Regular point event
					year = int(ev['year'])
					age = self.year_to_age(birth, year)

					# skip if outside the plotted range
					if age < 0 or age > person_age_max:
						continue

					# Position to the outside: top third for 1885, bottom third for 1985
					if birth == 1885:
						y_point = y + bar_third  # Move towards top
					else:
						y_point = y - bar_third  # Move towards bottom

					# marker with uniform color for clean look
					ax.plot(age, y_point, marker='o', markersize=12, markeredgecolor='white',
						markerfacecolor='#2C3E50', markeredgewidth=2, zorder=5)

					# smart annotation placement: above for 1885 (top), below for 1985 (bottom)
					# Position controlled by ""position"" field: ""close_to_bar"" or ""away_from_bar""
					# Increased offsets for 3-row labels
					position = ev.get('position', 'auto')
					
					if birth == 1885:
						# Labels on top
						base_offset = 0.6  # More space from bar
						extra_offset = 0.4
						
						if position == 'close_to_bar':
							vert_offset = base_offset
						elif position == 'away_from_bar':
							vert_offset = base_offset + extra_offset
						else:
							# Auto: alternate based on index (fallback)
							vert_offset = base_offset + (extra_offset if ev_idx % 2 == 1 else 0)
					else:
						# Labels on bottom (1985)
						base_offset = -0.7
						extra_offset = -0.4
						
						if position == 'close_to_bar':
							vert_offset = base_offset
						elif position == 'away_from_bar':
							vert_offset = base_offset + extra_offset
						else:
							# Auto: alternate based on index (fallback)
							vert_offset = base_offset + (extra_offset if ev_idx % 2 == 1 else 0)
						
					ax.annotate(f""{label}\n{year}\n{age} éves"",
						xy=(age, y_point),
						xytext=(age, y_point + vert_offset),
						ha='center',
						va='center',
						fontsize=13,
						weight='500',
						textcoords='data',
						arrowprops=dict(arrowstyle=""-"", linewidth=1.2, alpha=0.7, color='#2C3E50'),
						bbox=dict(boxstyle=""round,pad=0.4"", fc=""white"", ec=""#2C3E50"", linewidth=1.5, alpha=0.95),
						zorder=6)

		# Labels, limits, aesthetics - adjusted for better label visibility
		ax.set_xlim(-5, self.age_max + 5)
		ax.set_ylim(-2, n + 0.3)  # Extra space at bottom and top for labels
		ax.set_yticks([])  # we use inline labels at left instead
		
		# X-axis ticks for age markers
		ax.set_xticks(range(0, self.age_max + 1, show_grid_every))
		ax.tick_params(axis='x', labelsize=12, colors='#2C3E50')
		ax.set_xlabel(""Életkor (év)"", fontsize=16, weight='bold', color='#2C3E50', labelpad=10)
		ax.set_title(""Néhány meghatározó felfedezés és esemény két, 100 év különbséggel született ember életében"", fontsize=22, weight='bold', pad=20, color='#2C3E50')

		# Tidy up spines
		for spine in ['top', 'right', 'left']:
			ax.spines[spine].set_visible(False)
		ax.spines['bottom'].set_linewidth(1.5)
		ax.spines['bottom'].set_color('#2C3E50')

		plt.tight_layout()
		plt.savefig(filename, dpi=self.dpi, bbox_inches='tight', facecolor=fig.get_facecolor())
		plt.close(fig)
		print(f""Saved timeline to: {filename}"")


if __name__ == ""__main__"":
	# Example usage with the two people you described (corrected ages)
	people = [
		{
			""name"": ""Születési év: 1885"",
			""birth_year"": 1885,
			""events"": [
				{""year"": 1895, ""label"" : ""Némafilm"", ""position"" : ""close_to_bar""},
				{""year"": 1910, ""label"": ""Ford T-modell"", ""color"": ""#6FBF73"", ""position"" : ""close_to_bar""},
				{""year"": 1928, ""label"": ""Penicillin"", ""color"": ""#6FBF73"", ""position"" : ""away_from_bar""},
				{""start_year"": 1914, ""end_year"": 1918, ""label"": ""1. világháború""},
				{""year"": 1925, ""label"": ""Magyar Rádió"", ""color"": ""#F2C57C"", ""position"" : ""close_to_bar""},
				{""start_year"": 1939, ""end_year"": 1945, ""label"": ""2. világháború""},
				{""year"": 1947, ""label"" : ""Tranzisztor"", ""color"": ""#6FBF73"", ""position"" : ""close_to_bar""},
				{""year"": 1957, ""label"": ""Magyar Televízió"", ""color"": ""#A3C4F3"", ""position"" : ""close_to_bar""},
				{""year"": 1964, ""label"": ""Audiokazetta"", ""color"": ""#A3C4F3"", ""position"" : ""away_from_bar""},
				{""year"": 1976, ""label"": ""VHS"", ""color"": ""#6FBF73"", ""position"" : ""close_to_bar""},
				{""year"": 1982, ""label"": ""Commodore 64"", ""color"": ""#A18CD1"", ""position"" : ""away_from_bar""},
			]
		},
		{
			""name"": ""Születési év: 1985"",
			""birth_year"": 1985,
			""events"": [
				{""year"": 1986, ""label"": ""Csernobil"", ""color"": ""#6FBF73"", ""position"" : ""close_to_bar""},
				{""year"": 1993, ""label"": ""Megalakul az EU"", ""color"": ""#6FBF73"", ""position"" : ""away_from_bar""},
				{""year"": 1995, ""label"": ""World Wide Web"", ""color"": ""#6FBF73"", ""position"" : ""close_to_bar""},
				{""year"": 2001, ""label"": ""9/11"", ""color"": ""#E07A5F"", ""position"" : ""away_from_bar""},
				
				{""year"": 2008, ""label"": ""Android 1.0"", ""color"": ""#F2C57C"", ""position"" : ""away_from_bar""},
				{""year"": 2004, ""label"": ""Magyarország EU tag"", ""color"": ""#E07A5F"", ""position"" : ""close_to_bar""},
				{""start_year"": 2010, ""end_year"": 2026, ""label"": ""NER""},
				{""year"": 2016, ""label"": ""Brexit"", ""color"": ""#E07A5F"", ""position"" : ""close_to_bar""},
				{""year"": 2020, ""label"": ""COVID-19"", ""color"": ""#A18CD1"", ""position"" : ""away_from_bar""},
				{""year"": 2023, ""label"": ""ChatGPT"", ""color"": ""#A18CD1"", ""position"" : ""close_to_bar""},
			]
		}
	]

	tv = TimelineVisualizer(people=people, age_max=100, size=(1920, 1080), dpi=120)
	tv.render(""parallel_age_timelines.png"")"
cHZ8Y6iD,Auto Accept Heal by Maku Kenesu,maku_kenesu19,Lua,Sunday 19th of October 2025 03:33:09 AM CDT,"script_name(""Auto Accept Heal"")
script_author(""Maku Kenesu"")

require ""lib.moonloader""
require ""lib.sampfuncs""
local ev = require ""lib.samp.events""

local label = ""{FF8282}[Auto Heal by Maku Kenesu]{FFFFFF} ""

-- CONFIG
local limitPrice = 100       -- Default maximum heal price
local allowedMedic = nil     -- Only accept from this medic (nil = anyone)
local autoHealEnabled = true -- Toggle state

-- MAIN EVENT
function ev.onServerMessage(color, text)
  if not autoHealEnabled then return end

  local medic, amount = text:match(""^%* Medic ([%w_.%s]+) wants to heal you for %$(%d+), type /accept heal to accept%.$"")
  if medic and amount then
    local price = tonumber(amount)

    -- Check price limit
    if limitPrice and price > limitPrice then
      sampAddChatMessage(label .. ""Ignored heal from "" .. medic .. "" ($"" .. price .. "" > limit $"" .. limitPrice .. "")"", 0xFF6666)
      return false
    end

    -- Check medic restriction
    if allowedMedic and medic:lower() ~= allowedMedic:lower() then
      sampAddChatMessage(label .. ""Ignored heal from "" .. medic .. "" (not allowed medic)."", 0xFF6666)
      return false
    end

    -- Accept heal
    lua_thread.create(function()
      wait(500)
      sampSendChat(""/accept heal"")
      sampAddChatMessage(label .. ""Accepted heal from "" .. medic .. "" ($"" .. amount .. "")"", 0x33CCFF)
    end)
    return false
  end
end

-- COMMANDS
function cmd_limitPrice(param)
  local value = tonumber(param)
  if not value then
    sampAddChatMessage(label .. ""Usage: /ah.limitprice [amount]"", 0xFFFFFF)
    return
  end
  limitPrice = value
  sampAddChatMessage(label .. ""Maximum heal price set to $"" .. limitPrice, 0x33CCFF)
end

function cmd_from(param)
  if not param or param == """" or param:lower() == ""none"" then
    allowedMedic = nil
    sampAddChatMessage(label .. ""No longer restricting to any medic."", 0x33CCFF)
    return
  end
  allowedMedic = param
  sampAddChatMessage(label .. ""Now only accepting heals from: "" .. allowedMedic, 0x33CCFF)
end

function cmd_toggle()
  autoHealEnabled = not autoHealEnabled
  local state = autoHealEnabled and ""{00FF00}enabled"" or ""{FF0000}disabled""
  sampAddChatMessage(label .. ""Auto-heal has been "" .. state .. ""{FFFFFF}."", 0x33CCFF)
end

function cmd_help()
  sampAddChatMessage(""{33CCFF}=== Auto Heal Commands ==="", 0xFFFFFF)
  sampAddChatMessage(""{FFFFFF}/ah.toggle - Enable or disable auto-accepting heals"", 0xFFFFFF)
  sampAddChatMessage(""{FFFFFF}/ah.limitprice [amount] - Set max heal price (current: $"" .. limitPrice .. "")"", 0xFFFFFF)
  local medicName = allowedMedic and allowedMedic or ""None""
  sampAddChatMessage(""{FFFFFF}/ah.from [name|none] - Restrict heals to specific medic (current: "" .. medicName .. "")"", 0xFFFFFF)
  sampAddChatMessage(""{FFFFFF}/ah.help - Show this help message"", 0xFFFFFF)
end

-- MAIN
function main()
  while not isSampAvailable() do
    wait(100)
  end

  sampAddChatMessage(label .. ""Loaded and active. (/ah.help)"", 0x33CCFF)

  sampRegisterChatCommand(""ah.limitprice"", cmd_limitPrice)
  sampRegisterChatCommand(""ah.from"", cmd_from)
  sampRegisterChatCommand(""ah.toggle"", cmd_toggle)
  sampRegisterChatCommand(""ah.help"", cmd_help)
end
"
3z7zDDPq,Python Assignment 6 solution (IITM web MTech AI  2025),sohangchopra,Python,Sunday 19th of October 2025 03:30:35 AM CDT,"
def find_deepest_string_in_list(nested_list: list) -> str:
    # breadth first search
    while True:
        curr = []
        strings = []
        for x in nested_list:
            if isinstance(x, str):
                strings.append(x)
            elif isinstance(x, list):
                curr.extend(x)
        if not curr:
            return strings[0] if strings else None
        nested_list = curr
    "
mQENSHB7,Vip Gunung Meledak,yocky12k,JSON,Sunday 19th of October 2025 03:25:57 AM CDT,"{
  ""users"": [
    {
      ""hwid"": ""597dde88-52fc-4c91-8ab5-48e1d5509a3b"",
      ""name"": ""Yocky"",
      ""expiry"": ""2025-10-20""
    }
  ]
}
"
052vsR3T,Untitled,edam2021,YAML,Sunday 19th of October 2025 03:14:32 AM CDT,"- trigger:
  - platform: time_pattern
    minutes: ""/15""
  - platform: state
    entity_id: sensor.nordpool_kwh_fi_eur
    attribute: raw_today
  - platform: state
    entity_id: sensor.nordpool_kwh_fi_eur
    attribute: raw_tomorrow
  - platform: homeassistant
    event: start
  sensor:
  - name: ""nordpool_today_cheapest_slots""
    unique_id: nordpool_today_cheapest_slots
    state: >
      {% set data = state_attr('sensor.nordpool_kwh_fi_eur', 'raw_today') %}
      {% if data %}
        {% set sorted = data | sort(attribute='value') %}
        {% set cheapest = sorted[:8] %}
        {{ cheapest | map(attribute='start') | map('as_timestamp') | list }}
      {% else %}
        unknown
      {% endif %}

  - name: ""nordpool_today_expensive_slots""
    unique_id: nordpool_today_expensive_slots
    state: >
      {% set data = state_attr('sensor.nordpool_kwh_fi_eur', 'raw_today') or [] %}
      {% if data | count > 0 %}
        {% set sorted = data | sort(attribute='value', reverse=true) %}
        {% set expensive = sorted[:8] %}
        {{ expensive | map(attribute='start') | map('as_timestamp') | list }}
      {% else %}
        unknown
      {% endif %}

  - name: ""nordpool_tomorrow_cheapest_slots""
    unique_id: nordpool_tomorrow_cheapest_slots
    state: >
      {% set data = state_attr('sensor.nordpool_kwh_fi_eur', 'raw_tomorrow') %}
      {% if data %}
        {% set sorted = data | sort(attribute='value') %}
        {% set cheapest = sorted[:8] %}
        {{ cheapest | map(attribute='start') | map('as_timestamp') | list }}
      {% else %}
        []
      {% endif %}

  - name: ""nordpool_tomorrow_expensive_slots""
    unique_id: nordpool_tomorrow_expensive_slots
    state: >
      {% set data = state_attr('sensor.nordpool_kwh_fi_eur', 'raw_tomorrow') or [] %}
      {% if data | count > 0 %}
        {% set sorted = data | sort(attribute='value', reverse=true) %}
        {% set expensive = sorted[:8] %}
        {{ expensive | map(attribute='start') | map('as_timestamp') | list }}
      {% else %}
        []
      {% endif %}

  - name: ""nordpool_today_average_price""
    state: ""{{ state_attr('sensor.nordpool_kwh_fi_eur', 'average') | float }}""
"
hFw6uqu4,Simultaneous Pulses rev_02,pleasedontcode,Arduino,Sunday 19th of October 2025 03:08:10 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Simultaneous Pulses
	- Source Code compiled for: ESP32 DevKit V1
	- Source Code created on: 2025-10-19 08:07:02

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* provide five pulse outputs simultaneously of one */
	/* millisecond  at individual frequencies . The */
	/* frequencies required are as follows : 10 Hz , 25 */
	/* Hz , 50 Hz , 75 Hz , 100 Hz . */
/****** END SYSTEM REQUIREMENTS *****/




/* START CODE */

/****** DEFINITION OF LIBRARIES *****/

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

// ESP32 Five-Channel Pulse Generator
// Generates five simultaneous 1 ms pulses at frequencies:
// 10 Hz, 25 Hz, 50 Hz, 75 Hz, 100 Hz on five separate GPIO pins.

// Pin assignments for ESP32 DevKit V1 (adjust if needed):
const uint8_t PULSE_PINS[5] = {16, 17, 18, 19, 21};

// Target frequencies in Hz
const uint32_t PULSE_FREQS[5] = {10, 25, 50, 75, 100};

// Internal channel representation
typedef struct {
    uint8_t pin;          // GPIO pin for the channel
    uint64_t period_us;     // Pulse period in microseconds
    uint64_t next_time;     // Next scheduled pulse start time (microseconds)
    bool in_pulse;          // Is the 1 ms pulse currently high?
    uint64_t pulse_end;     // Time when current 1 ms pulse ends
} PulseChannel;

PulseChannel channels[5];

void setup(void)
{
    // Initialize serial for debugging (optional)
    // Serial.begin(115200);

    // Configure pins as outputs and reset state
    for (int i = 0; i < 5; i++) {
        pinMode(PULSE_PINS[i], OUTPUT);
        digitalWrite(PULSE_PINS[i], LOW);
    }

    // Initialize channel parameters
    uint64_t now = (uint64_t)micros();
    for (int i = 0; i < 5; i++) {
        channels[i].pin = PULSE_PINS[i];
        // Use integer division for period; fractional remainder ignored per cycle
        channels[i].period_us = (uint64_t)(1000000ull / PULSE_FREQS[i]);
        channels[i].next_time = now;  // start pulses immediately
        channels[i].in_pulse = false;
        channels[i].pulse_end = 0;
    }
}

void loop(void)
{
    uint64_t now = (uint64_t)micros();

    for (int i = 0; i < 5; i++) {
        // If not currently pulsing and it's time for the next pulse, start a 1 ms pulse
        if (!channels[i].in_pulse && now >= channels[i].next_time) {
            digitalWrite(channels[i].pin, HIGH);
            channels[i].in_pulse = true;
            channels[i].pulse_end = now + 1000ull; // 1 ms pulse width
        }
        // If currently pulsing and the 1 ms width has elapsed, end pulse and schedule next
        else if (channels[i].in_pulse && now >= channels[i].pulse_end) {
            digitalWrite(channels[i].pin, LOW);
            channels[i].in_pulse = false;
            // Schedule next pulse start time based on period
            channels[i].next_time += channels[i].period_us;
            // If we somehow fell behind, realign to now
            if (channels[i].next_time < now) {
                channels[i].next_time = now + channels[i].period_us;
            }
        }
    }

    // Small delay to prevent excessive CPU usage; keeps loop responsive
    delayMicroseconds(50);
}

/* END CODE */
"
3eCYYFcW,ESP32 Pulses rev_01,pleasedontcode,Arduino,Sunday 19th of October 2025 03:04:33 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ESP32 Pulses
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2025-10-19 08:03:11

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* provide five pulse outputs simultaneously of one */
	/* millisecond  at individual frequencies . The */
	/* frequencies required are as follows : 10 Hz , 25 */
	/* Hz , 50 Hz , 75 Hz , 100 Hz . */
/****** END SYSTEM REQUIREMENTS *****/


/* START CODE */

/****** DEFINITION OF LIBRARIES *****/

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

// ESP32 Five-Channel Pulse Generator
// Generates five simultaneous 1 ms pulses at frequencies:
// 10 Hz, 25 Hz, 50 Hz, 75 Hz, 100 Hz on five separate GPIO pins.

// Pin assignments for ESP32 DevKit V1 (adjust if needed):
const uint8_t PULSE_PINS[5] = {16, 17, 18, 19, 21};

// Target frequencies in Hz
const uint32_t PULSE_FREQS[5] = {10, 25, 50, 75, 100};

// Internal channel representation
typedef struct {
    uint8_t pin;          // GPIO pin for the channel
    uint64_t period_us;     // Pulse period in microseconds
    uint64_t next_time;     // Next scheduled pulse start time (microseconds)
    bool in_pulse;          // Is the 1 ms pulse currently high?
    uint64_t pulse_end;     // Time when current 1 ms pulse ends
} PulseChannel;

PulseChannel channels[5];

void setup(void)
{
    // Initialize serial for debugging (optional)
    // Serial.begin(115200);

    // Configure pins as outputs and reset state
    for (int i = 0; i < 5; i++) {
        pinMode(PULSE_PINS[i], OUTPUT);
        digitalWrite(PULSE_PINS[i], LOW);
    }

    // Initialize channel parameters
    uint64_t now = (uint64_t)micros();
    for (int i = 0; i < 5; i++) {
        channels[i].pin = PULSE_PINS[i];
        // Use integer division for period; fractional remainder ignored per cycle
        channels[i].period_us = (uint64_t)(1000000ull / PULSE_FREQS[i]);
        channels[i].next_time = now;  // start pulses immediately
        channels[i].in_pulse = false;
        channels[i].pulse_end = 0;
    }
}

void loop(void)
{
    uint64_t now = (uint64_t)micros();

    for (int i = 0; i < 5; i++) {
        // If not currently pulsing and it's time for the next pulse, start a 1 ms pulse
        if (!channels[i].in_pulse && now >= channels[i].next_time) {
            digitalWrite(channels[i].pin, HIGH);
            channels[i].in_pulse = true;
            channels[i].pulse_end = now + 1000ull; // 1 ms pulse width
        }
        // If currently pulsing and the 1 ms width has elapsed, end pulse and schedule next
        else if (channels[i].in_pulse && now >= channels[i].pulse_end) {
            digitalWrite(channels[i].pin, LOW);
            channels[i].in_pulse = false;
            // Schedule next pulse start time based on period
            channels[i].next_time += channels[i].period_us;
            // If we somehow fell behind, realign to now
            if (channels[i].next_time < now) {
                channels[i].next_time = now + channels[i].period_us;
            }
        }
    }

    // Small delay to prevent excessive CPU usage; keeps loop responsive
    delayMicroseconds(50);
}

/* END CODE */
"
uXY9mv2i,dinosaur_farmer.py,Urara_Chiya,Python,Sunday 19th of October 2025 02:02:50 AM CDT,"# ==============================================================================
# 恐龙模式 (贪吃蛇) 自动化脚本 (dinosaur_farmer_v4.py)
#
# 版本 4: 移除了所有 """"""..."""""" 形式的文档字符串。
#
# 策略:
# 1. 保证在调用 measure() 时，无人机正位于一个苹果上。
# 2. 采用动态寻路：每移动一步都重新计算到目标的最优路径，以应对
#    自身尾巴（移动障碍物）的变化。
# 3. 自动完成整个游戏、收获、重玩的循环。
#
# 严格遵守所有编程限制。
# ==============================================================================

from utils import *

# ------------------------------------------------------------------------------
# 配置与常量
# ------------------------------------------------------------------------------
START_X = 0
START_Y = 0

DIRECTION_VECTORS = {
    North: (0, 1),
    East: (1, 0),
    South: (0, -1),
    West: (-1, 0)
}
OPPOSITE_DIRECTIONS = {
    North: South,
    South: North,
    East: West,
    West: East
}

# ------------------------------------------------------------------------------
# 辅助函数
# ------------------------------------------------------------------------------

def manhattan_distance(x1, y1, x2, y2):
    return abs(x1 - x2) + abs(y1 - y2)

# 准备开始一轮恐龙游戏，结束时无人机应位于第一个苹果上。
def setup_game():
    quick_print(""正在准备新一轮的恐龙游戏..."")
    clear()
    move_to(START_X, START_Y)
    
    # 假设每次生成苹果需要1个仙人掌
    if num_items(Items.Cactus) < get_world_size() * get_world_size():
        quick_print(""警告: 仙人掌数量可能不足以填满整个地图。"")

    # 装备帽子，这会在无人机下方生成第一个苹果
    quick_print(""装备恐龙帽..."")
    change_hat(Hats.Dinosaur_Hat)
    
    # 检查苹果是否成功生成
    if get_entity_type() != Entities.Apple:
        quick_print(""错误：装备帽子后未生成苹果。"")
        return False
        
    return True

# ------------------------------------------------------------------------------
# 核心寻路算法
# ------------------------------------------------------------------------------

# 全局变量，用于在递归调用中共享状态
path_solution = []
visited_grid = []
apple_x = 0
apple_y = 0

def find_path_recursive(current_x, current_y):
    global path_solution
    global visited_grid
    global apple_x
    global apple_y

    if current_x == apple_x and current_y == apple_y:
        return True

    visited_grid[current_y][current_x] = True
    
    possible_moves = []
    directions_to_check = [North, East, South, West]
    for direction in directions_to_check:
        dx, dy = DIRECTION_VECTORS[direction]
        next_x, next_y = current_x + dx, current_y + dy
        
        world_size = get_world_size()
        if 0 <= next_x < world_size and 0 <= next_y < world_size:
            if not visited_grid[next_y][next_x]:
                dist = manhattan_distance(next_x, next_y, apple_x, apple_y)
                possible_moves.append([dist, direction])

    n = len(possible_moves)
    for i in range(n):
        for j in range(0, n - i - 1):
            if possible_moves[j][0] > possible_moves[j+1][0]:
                temp = possible_moves[j]
                possible_moves[j] = possible_moves[j+1]
                possible_moves[j+1] = temp

    for move_info in possible_moves:
        direction = move_info[1]
        
        path_solution.append(direction)
        dx, dy = DIRECTION_VECTORS[direction]
        
        if find_path_recursive(current_x + dx, current_y + dy):
            return True
            
        path_solution.pop()
            
    return False

def find_path_to_apple(start_x, start_y, target_x, target_y, snake_body):
    global path_solution
    global visited_grid
    global apple_x
    global apple_y
    
    apple_x = target_x
    apple_y = target_y
    path_solution = []
    
    world_size = get_world_size()

    visited_grid = []
    for _ in range(world_size):
        row = []
        for _ in range(world_size):
            row.append(False)
        visited_grid.append(row)
    
    # 蛇的身体是障碍物
    for segment in snake_body:
        visited_grid[segment[1]][segment[0]] = True

    if find_path_recursive(start_x, start_y):
        return path_solution
    else:
        return None

# ------------------------------------------------------------------------------
# 主游戏逻辑
# ------------------------------------------------------------------------------

def play_dinosaur_game():
    if not setup_game():
        change_hat(Hats.Green_Hat) # 如果设置失败，换回绿帽以重置状态
        return

    snake_body = [[get_pos_x(), get_pos_y()]]
    game_over = False

    while not game_over:
        # 此时无人机正位于一个苹果上，安全调用 measure()
        measured_pos = measure()
        if not measured_pos:
            quick_print(""错误: measure() 未返回位置。可能是游戏结束的信号。"")
            break
        
        target_x, target_y = measured_pos
        quick_print(""下一个苹果在: ("" + str(target_x) + "", "" + str(target_y) + "")"")
        
        # 第一次寻路，规划从当前苹果到下一个苹果的完整路径
        head_x, head_y = snake_body[0]
        path = find_path_to_apple(head_x, head_y, target_x, target_y, snake_body)

        if not path:
            quick_print(""被困住了！找不到初始路径。游戏结束。"")
            break

        # 吃掉当前苹果并开始移动
        # 移动第一步，意味着“吃掉”了脚下的苹果，尾巴需要增长
        direction_to_move = path[0]
        if move(direction_to_move):
            new_head_x, new_head_y = get_pos_x(), get_pos_y()
            snake_body.insert(0, [new_head_x, new_head_y])
            # 尾巴增长：不执行 snake_body.pop()
            quick_print(""吃到苹果！尾巴长度: "" + str(len(snake_body)))
        else:
            quick_print(""错误：初始移动失败。"")
            break
            
        # 循环移动，直到到达目标苹果
        while get_pos_x() != target_x or get_pos_y() != target_y:
            # 动态寻路：每一步都重新计算路径，因为蛇身在移动
            head_x, head_y = snake_body[0]
            current_path = find_path_to_apple(head_x, head_y, target_x, target_y, snake_body)
            
            if not current_path:
                quick_print(""移动途中被困住！找不到路径。游戏结束。"")
                game_over = True
                break

            direction_to_move = current_path[0]
            if move(direction_to_move):
                new_head_x, new_head_y = get_pos_x(), get_pos_y()
                snake_body.insert(0, [new_head_x, new_head_y])
                snake_body.pop() # 正常移动，尾巴前进
            else:
                quick_print(""错误：中途移动失败，路径规划可能出错。"")
                game_over = True
                break
        
        if game_over:
            break

        # 检查是否已满
        if len(snake_body) >= get_world_size() * get_world_size():
            quick_print(""恭喜！填满了整个地图！"")
            break

    # 游戏结束，收获骨头
    tail_length = len(snake_body)
    bones_earned = tail_length * tail_length
    quick_print(""最终尾巴长度: "" + str(tail_length))
    quick_print(""预计获得骨头: "" + str(bones_earned))
    
    quick_print(""正在更换帽子以收获骨头..."")
    change_hat(Hats.Green_Hat) # 换掉帽子以收获
    quick_print(""收获完成！"")


# ==============================================================================
# 主函数
# ==============================================================================

def main():
    while True:
        play_dinosaur_game()
        quick_print(""======== 完成一轮恐龙挑战，准备开始下一轮... ========"")

if __name__ == ""__main__"":
    main()
"
vhVBrAWs,(GPT-2 sorce code optimization) model.py,Jayden12092012,Python,Sunday 19th of October 2025 01:39:31 AM CDT,"import numpy as np
import tensorflow.compat.v1 as tf
# Note: tensorflow.compat.v1 is used to maintain compatibility with original tf.variable_scope and tf.get_variable usage.
# For a full modern TF2 refactor, the variable/scope handling would be replaced with tf.keras.layers and tf.Module.
from tensorflow.contrib.training import HParams

# ----------------------------------------------------------------------
# Helper Functions
# ----------------------------------------------------------------------

def create_default_hparams():
    """"""Returns a set of default hyperparameters for the GPT model.""""""
    return HParams(
        n_vocab=0,
        n_ctx=1024,
        n_embd=768,
        n_head=12,
        n_layer=12,
    )

def get_shape_list(tensor):
    """"""
    Computes a list of the dimensions of the tensor, handling dynamic shapes.

    Args:
        tensor: A tf.Tensor.

    Returns:
        A list of integers or tf.Tensor representing the shape.
    """"""
    static_shape = tensor.shape.as_list()
    dynamic_shape = tf.shape(tensor)
    return [
        dynamic_shape[i] if s is None else s
        for i, s in enumerate(static_shape)
    ]

# Optimized Softmax: Uses tf.nn.softmax, which is optimized internally.
def stable_softmax(x, axis=-1):
    """"""Applies a numerically stable softmax function.""""""
    return tf.nn.softmax(x, axis=axis)

# Activation Function: GeLU (Gaussian Error Linear Unit)
# Optimized GeLU: Use the more numerically stable and standardized approximation.
def gelu_activation(x):
    """"""
    Gaussian Error Linear Unit (GELU) activation function.
    Reference: https://arxiv.org/abs/1606.08415
    """"""
    # Use the standard TF approximation which is optimized
    return 0.5 * x * (1.0 + tf.tanh(np.sqrt(2.0 / np.pi) * (x + 0.044715 * tf.pow(x, 3))))

def layer_norm(x, scope, *, axis=-1, epsilon=1e-5):
    """"""
    Applies Layer Normalization.

    Normalize to mean = 0, std = 1, then do a diagonal affine transform (gamma*x + beta).
    """"""
    with tf.variable_scope(scope, reuse=tf.AUTO_REUSE):
        num_channels = get_shape_list(x)[-1]
        
        # Gamma (g) and Beta (b)
        gamma = tf.get_variable('gamma', [num_channels], initializer=tf.constant_initializer(1.0))
        beta = tf.get_variable('beta', [num_channels], initializer=tf.constant_initializer(0.0))

        # Use tf.nn.moments for mean and variance calculation, often more stable
        mean, variance = tf.nn.moments(x, axes=[axis], keep_dims=True)
        
        # Normalization and Affine Transform
        normalized_x = (x - mean) * tf.rsqrt(variance + epsilon)
        output = normalized_x * gamma + beta
        return output

def split_channels(x, num_splits):
    """"""
    Reshapes the last dimension of x into [num_splits, original_dim/num_splits].
    Used to split the features dimension into (heads, features_per_head).
    """"""
    *start, dim = get_shape_list(x)
    return tf.reshape(x, start + [num_splits, dim // num_splits])

def merge_channels(x):
    """"""
    Smash the last two dimensions of x into a single dimension.
    Used to merge (heads, features_per_head) back into the features dimension.
    """"""
    *start, dim_a, dim_b = get_shape_list(x)
    return tf.reshape(x, start + [dim_a * dim_b])

def conv1d_layer(x, scope, output_channels, *, w_init_stdev=0.02):
    """"""
    Performs a 1D convolution (equivalent to a fully connected layer
    applied element-wise over the sequence dimension).
    """"""
    with tf.variable_scope(scope, reuse=tf.AUTO_REUSE):
        *start, input_channels = get_shape_list(x)
        
        # Weight matrix W (Kernel size 1, Input channels, Output channels)
        weight = tf.get_variable('w', [1, input_channels, output_channels], 
                                 initializer=tf.random_normal_initializer(stddev=w_init_stdev))
        # Bias vector b
        bias = tf.get_variable('b', [output_channels], initializer=tf.constant_initializer(0.0))
        
        # Use tf.nn.conv1d for optimized convolution operation
        # This is generally faster and clearer than reshaping and using tf.matmul
        conved = tf.nn.conv1d(x, weight, stride=1, padding='VALID') 
        output = conved + bias
        
        # Reshape back to the original start dimensions + output_channels
        return tf.reshape(output, start + [output_channels])

def create_attention_mask(dest_len, source_len, *, dtype):
    """"""
    Creates a causal mask (look-ahead mask) for the self-attention mechanism.
    1's in the lower triangle, counting from the lower right corner.
    """"""
    i = tf.range(dest_len)[:, None]
    j = tf.range(source_len)
    
    # Condition for causality: i >= j - source_len + dest_len
    # Ensures a token at index 'i' can only attend to tokens at 'j' where j <= i
    mask = i >= j - source_len + dest_len
    return tf.cast(mask, dtype)

# ----------------------------------------------------------------------
# Core Model Components
# ----------------------------------------------------------------------

def attention(x, scope, num_state, *, past_key_value, hparams):
    """"""Multi-head attention mechanism.""""""
    
    def split_heads(tensor):
        # [batch, sequence, features] -> [batch, heads, sequence, features_per_head]
        return tf.transpose(split_channels(tensor, hparams.n_head), [0, 2, 1, 3])

    def merge_heads(tensor):
        # [batch, heads, sequence, features_per_head] -> [batch, sequence, features]
        return merge_channels(tf.transpose(tensor, [0, 2, 1, 3]))

    def apply_causal_mask(attention_weights):
        # attention_weights shape: [batch, heads, dest_sequence, src_sequence]
        _, _, dest_len, src_len = get_shape_list(attention_weights)
        
        causal_mask = create_attention_mask(dest_len, src_len, dtype=attention_weights.dtype)
        # Reshape to broadcast across batch and heads: [1, 1, dest_len, src_len]
        causal_mask = tf.reshape(causal_mask, [1, 1, dest_len, src_len])
        
        # Apply the mask: set scores to a very small number if mask is 0
        very_negative_value = -1e10 # Use a specific float value for clarity
        masked_weights = attention_weights * causal_mask + very_negative_value * (1.0 - causal_mask)
        return masked_weights

    def multihead_dot_product_attention(query, key, value):
        # Query, Key, Value shape: [batch, heads, sequence, features_per_head]
        
        # 1. Scaled Dot Product: W = Q * K^T / sqrt(d_k)
        attention_logits = tf.matmul(query, key, transpose_b=True)
        feature_dim = tf.cast(get_shape_list(value)[-1], attention_logits.dtype)
        attention_logits = attention_logits * tf.rsqrt(feature_dim)

        # 2. Causal Masking
        attention_logits = apply_causal_mask(attention_logits)
        
        # 3. Softmax
        attention_weights = stable_softmax(attention_logits)
        
        # 4. Output: A = W * V
        output_attention = tf.matmul(attention_weights, value)
        return output_attention

    with tf.variable_scope(scope, reuse=tf.AUTO_REUSE):
        # 1. Project to Q, K, V
        # Total output channels: num_state * 3 (for Q, K, V)
        qkv_projection = conv1d_layer(x, 'c_attn', num_state * 3)
        
        # 2. Split into Q, K, V and then split heads
        query, key, value = map(split_heads, tf.split(qkv_projection, 3, axis=2))
        
        # 3. Handle Past Key/Value (KV-Caching)
        current_present = tf.stack([key, value], axis=1) # [batch, 2, heads, sequence, features_per_head]
        if past_key_value is not None:
            # past_key_value shape: [batch, 2, heads, past_sequence, features_per_head]
            past_key, past_value = tf.unstack(past_key_value, axis=1)
            # Concatenate past and current sequences along the sequence dimension (-2)
            key = tf.concat([past_key, key], axis=-2)
            value = tf.concat([past_value, value], axis=-2)
            
        # 4. Multi-Head Attention
        attention_output = multihead_dot_product_attention(query, key, value)
        
        # 5. Merge Heads
        attention_output = merge_heads(attention_output)
        
        # 6. Final Linear Projection (Output Projection)
        final_output = conv1d_layer(attention_output, 'c_proj', num_state)
        
        return final_output, current_present


def feed_forward_network(x, scope, intermediate_state_size, *, hparams):
    """"""Position-wise Feed-Forward Network.""""""
    with tf.variable_scope(scope, reuse=tf.AUTO_REUSE):
        # Input features dimension (nx)
        input_dim = get_shape_list(x)[-1]
        
        # 1. First Linear Layer (Expansion) and GeLU Activation
        hidden_layer = gelu_activation(conv1d_layer(x, 'c_fc', intermediate_state_size))
        
        # 2. Second Linear Layer (Contraction)
        output_layer = conv1d_layer(hidden_layer, 'c_proj', input_dim)
        return output_layer


def transformer_block(x, scope, *, past_key_value, hparams):
    """"""A single Transformer block (Attention + FFN with Layer Norm and Residual Connections).""""""
    with tf.variable_scope(scope, reuse=tf.AUTO_REUSE):
        num_state = get_shape_list(x)[-1]
        
        # --- 1. Attention Sub-layer (with pre-normalization) ---
        # LayerNorm -> Attention -> Residual Connection
        norm_x_attn = layer_norm(x, 'ln_1')
        attn_output, present_kv = attention(
            norm_x_attn, 'attn', num_state, past_key_value=past_key_value, hparams=hparams
        )
        x = x + attn_output # Residual Connection 1
        
        # --- 2. Feed-Forward Sub-layer (with pre-normalization) ---
        # LayerNorm -> FFN -> Residual Connection
        norm_x_mlp = layer_norm(x, 'ln_2')
        # FFN intermediate size is typically 4 times the model dimension (num_state * 4)
        mlp_output = feed_forward_network(norm_x_mlp, 'mlp', num_state * 4, hparams=hparams)
        x = x + mlp_output # Residual Connection 2
        
        return x, present_kv

# ----------------------------------------------------------------------
# Model Utilities and Main Function
# ----------------------------------------------------------------------

def calculate_past_shape(*, hparams, batch_size=None, sequence_length=None):
    """"""Computes the expected shape of the past_key_value tensor.""""""
    # Shape: [batch, n_layer, 2 (k/v), n_head, sequence, features_per_head]
    features_per_head = hparams.n_embd // hparams.n_head
    return [
        batch_size, 
        hparams.n_layer, 
        2, 
        hparams.n_head, 
        sequence_length, 
        features_per_head
    ]

def tile_for_batch(value, batch_size):
    """"""Adds a new batch axis and tiles the value to the given batch_size.""""""
    value = tf.convert_to_tensor(value, name='value')
    ndims = value.shape.ndims
    # Tile along the new 0th axis
    return tf.tile(tf.expand_dims(value, axis=0), [batch_size] + [1] * ndims)

def calculate_position_indices(token_input, past_length_value):
    """"""Calculates position indices for positional embedding.""""""
    batch_size = tf.shape(token_input)[0]
    sequence_length = tf.shape(token_input)[1]
    
    # Position indices = past_length + [0, 1, 2, ..., sequence_length - 1]
    position_range = past_length_value + tf.range(sequence_length)
    return tile_for_batch(position_range, batch_size)


def gpt_model(hparams, input_tokens, past_key_value=None, scope='model', reuse=False):
    """"""
    GPT-style transformer model for language modeling.

    Args:
        hparams: Hyperparameters object.
        input_tokens: Input tensor of token IDs, shape [batch, sequence].
        past_key_value: Cached K/V states for incremental decoding, shape 
                        [batch, n_layer, 2, n_head, past_sequence, features_per_head].
        scope: Variable scope name.
        reuse: Boolean for variable reuse.

    Returns:
        A dictionary with 'logits' and 'present' (updated K/V cache).
    """"""
    
    # Use tf.compat.v1.variable_scope and tf.compat.v1.get_variable 
    # for compatibility with the original TensorFlow 1.x structure.
    with tf.variable_scope(scope, reuse=reuse):
        results = {}
        batch_size, sequence_length = get_shape_list(input_tokens)

        # 1. Embeddings (Word Token + Positional)
        # Positional Embedding (WPE)
        wpe = tf.get_variable('wpe', [hparams.n_ctx, hparams.n_embd],
                             initializer=tf.random_normal_initializer(stddev=0.01))
        # Token Embedding (WTE) - also serves as the final projection matrix
        wte = tf.get_variable('wte', [hparams.n_vocab, hparams.n_embd],
                             initializer=tf.random_normal_initializer(stddev=0.02))
        
        # Calculate past length for correct positional encoding offset
        past_length = 0 if past_key_value is None else tf.shape(past_key_value)[-2]
        
        # Token Embeddings: h = WTE[X]
        token_embeddings = tf.gather(wte, input_tokens)
        # Positional Embeddings: WPE[positions_for(X)]
        position_indices = calculate_position_indices(input_tokens, past_length)
        position_embeddings = tf.gather(wpe, position_indices)
        
        # Final combined embedding
        hidden_state = token_embeddings + position_embeddings

        # 2. Transformer Blocks (The Core)
        present_key_values = []
        # Unstack past K/V cache into a list of (K, V) pairs per layer
        pasts_per_layer = tf.unstack(past_key_value, axis=1) if past_key_value is not None else [None] * hparams.n_layer
        assert len(pasts_per_layer) == hparams.n_layer
        
        for layer_idx, layer_past_kv in enumerate(pasts_per_layer):
            hidden_state, present_kv = transformer_block(
                hidden_state, 'h%d' % layer_idx, past_key_value=layer_past_kv, hparams=hparams
            )
            present_key_values.append(present_kv)
            
        # Stack all layer presents back together
        results['present'] = tf.stack(present_key_values, axis=1) # Shape: [batch, n_layer, 2, n_head, sequence, features_per_head]
        
        # 3. Final Layer Normalization
        hidden_state = layer_norm(hidden_state, 'ln_f')

        # 4. Language Model Head (Logits)
        # Logits = H * WTE^T
        # Flatten the sequence and batch dimensions for matrix multiplication
        h_flat = tf.reshape(hidden_state, [batch_size * sequence_length, hparams.n_embd])
        
        # Transpose WTE (embedding matrix) to get the final projection matrix
        logits = tf.matmul(h_flat, wte, transpose_b=True)
        
        # Reshape logits back to [batch, sequence, n_vocab]
        logits = tf.reshape(logits, [batch_size, sequence_length, hparams.n_vocab])
        results['logits'] = logits
        
        return results"
PYxfzi84,LambdaFormsInC#–ExpressionVsStatementBodies,wingman007,C#,Sunday 19th of October 2025 12:37:18 AM CDT,"// ✅ Named method – complex logic
static int Factorial(int n)
{
    int result = 1;
    for (int i = 2; i <= n; i++)
        result *= i;
    return result;
}

// ✅ Named expression-bodied method – simple logic
static int Square(int x) => x * x;

// ✅ Anonymous lambda – expression-bodied
Func<int, int> addOne = x => x + 1;

// ✅ Anonymous lambda – statement-bodied
Func<int, int> addOneVerbose = x =>
{
    int y = x + 1;
    return y; // must return explicitly
};
"
wa27cDYG,Untitled,cosenza987,C++,Saturday 18th of October 2025 10:25:22 PM CDT,"//Слава Україні, Героям слава

#include <bits/stdc++.h>

using namespace std;

using ll = long long;

struct point {
    ll x, y;
    point(ll x_ = 0, ll y_ = 0) : x(x_), y(y_) {}
    point operator -(point p) {
        return point(x - p.x, y - p.y);
    }
    bool operator == (const point &p) const {
        return x == p.x and y == p.y;
    }
    bool operator < (const point &p) const {
        return (x < p.x) or (x == p.x and y < p.y);
    }
    ll operator %(point p) {
        return x * p.y - y * p.x;
    }
    bool on_seg(point p, point q) {
        if(this->dir(p, q)) return false;
        return (x > min(p.x, q.x)) and (x < max(p.x, q.x)) and (y > min(p.y, q.y)) and (y < max(p.y, q.y));
    }
    long double dist (const point &p) const {
        return hypotl(x - p.x, y - p.y);
    }
    ll dist2 (const point &p) const {
        return (x - p.x) * (x - p.x) + (y - p.y) * (y - p.y);
    }
    int dir(point origin, point other) {
        ll d = (*this - origin) % (other - origin);
        return (d > 0) - (d < 0);
    }
};
 
ll cross(point p, point q) {
    return p.x * q.y - p.y * q.x;
}
 
ll area_2(point a, point b, point c) {
    return cross(a, b) + cross(b, c) + cross(c, a);
}

void monotone_hull(vector<point> &pts) {
    sort(pts.begin(), pts.end());
    pts.erase(unique(pts.begin(), pts.end()), pts.end());
    vector<point> up, dn;
    for(int i = 0; i < pts.size(); i++) {
        while(up.size() > 1 and area_2(up[up.size() - 2], up.back(), pts[i]) > 0) up.pop_back();
        while(dn.size() > 1 and area_2(dn[dn.size() - 2], dn.back(), pts[i]) < 0) dn.pop_back();
        dn.push_back(pts[i]);
        up.push_back(pts[i]);
    }
    pts = dn;
    for(int i = (int)up.size() - 2; i >= 1; i--) {
        pts.push_back(up[i]);
    }
}

int direction(point origin, point p, point other) {
    return p.dir(origin, other);
}

bool segment_segment_intersect(point a, point b, point c, point d) {
    if(a.dist2(c) == 0 or a.dist2(d) == 0 or b.dist2(c) == 0 or b.dist2(d) == 0) return true;
    ll d1 = direction(a, b, c);
    ll d2 = direction(a, b, d);
    ll d3 = direction(c, d, a);
    ll d4 = direction(c, d, b);
    if(d1 * d2 < 0 and d3 * d4 < 0) return true;
    return a.on_seg(c, d) or b.on_seg(c, d) or c.on_seg(a, b) or d.on_seg(a, b);
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << setprecision(6) << fixed;
    int t;
    cin >> t;
    while(t--) {
        int n;
        cin >> n;
        vector<pair<array<point, 4>, int>> v(n);
        vector<point> pts;
        for(auto &[arr, h] : v) {
            for(int i = 0; i < 4; i++) {
                cin >> arr[i].x >> arr[i].y;
                pts.emplace_back(arr[i]);
            }
            cin >> h;
        }
        monotone_hull(pts);
        long double perimeter = 0;
        for(int i = 0; i < (int)pts.size(); i++) {
            perimeter += pts[i].dist(pts[(i + 1) % pts.size()]);
        }
        int h = 3;
        for(int i = 0; i < (int)pts.size(); i++) for(int j = i + 1; j < (int)pts.size(); j++) {
            for(int k = 0; k < n; k++) {
                for(int ii = 0; ii < 4; ii++) for(int jj = ii + 1; jj < 4; jj++) {
                    if(segment_segment_intersect(pts[i], pts[j], v[k].first[ii], v[k].first[jj])) {
                        h = max(h, v[k].second + 1);
                    }
                }
            }
        }
        cout << perimeter << "" "" << h << ""\n"";
    }
    return 0;
}"
NYFTPe60,Untitled,cosenza987,C++,Saturday 18th of October 2025 09:31:30 PM CDT,"//Слава Україні, Героям слава

#include <bits/stdc++.h>

using namespace std;

const int N = 105;
typedef vector<bitset<N>> graph;
#define sz(v) (int)v.size()
struct Maxclique {
    double limit = 0.025, pk = 0;
    struct Vertex {
        int i, d = 0;
    };
    typedef vector<Vertex> vv;
    graph e;
    vv V;
    vector<vector<int>> C;
    vector<int> qmax, q, S, old;
    void init(vv& r) {
        for (auto& v : r) v.d = 0;
        for (auto& v : r) for (auto j : r) v.d += e[v.i][j.i];
        sort(r.begin(), r.end(), [](auto a, auto b) {
            return a.d > b.d;
            });
        int mxD = r[0].d;
        for (int i = 0; i < sz(r); i++) r[i].d = min(i, mxD) + 1;
    }
    void expand(vv& R, int lev = 1) {
        S[lev] += S[lev - 1] - old[lev];
        old[lev] = S[lev - 1];
        while (sz(R)) {
            if (sz(q) + R.back().d <= sz(qmax)) return;
            q.push_back(R.back().i);
            vv T;
            for (auto v : R) if (e[R.back().i][v.i]) T.push_back({ v.i });
            if (sz(T)) {
                if (S[lev]++ / ++pk < limit) init(T);
                int j = 0, mxk = 1, mnk = max(sz(qmax) - sz(q) + 1, 1);
                C[1].clear(), C[2].clear();
                for (auto v : T) {
                    int k = 1;
                    auto f = [&](int i) {
                        return e[v.i][i];
                        };
                    while (any_of(C[k].begin(), C[k].end(), f)) k++;
                    if (k > mxk) mxk = k, C[mxk + 1].clear();
                    if (k < mnk) T[j++].i = v.i;
                    C[k].push_back(v.i);
                }
                if (j > 0) T[j - 1].d = 0;
                for (int k = mnk; k <= mxk; k++) for (int i : C[k])
                    T[j].i = i, T[j++].d = k;
                expand(T, lev + 1);
            }
            else if (sz(q) > sz(qmax)) qmax = q;
            q.pop_back(), R.pop_back();
        }
    }
    Maxclique(graph g) : e(g), C(sz(e) + 1), S(sz(C)), old(S) {
        for (int i = 0; i < sz(e); i++) V.push_back({ i });
    }
    vector<int> solve() { // returns the clique
        init(V), expand(V);
        return qmax;
    }
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    int n;
    while(cin >> n) {
        if(n == 0) break;
        vector<long long> v(n);
        for(auto &e : v) cin >> e;
        vector<long long> adj(n);
        graph g(n);
        for(int i = 0; i < n; i++) for(int j = i + 1; j < n; j++) if(__gcd(v[i], v[j]) != 1) g[i][j] = g[j][i] = 1;
        Maxclique M(g);
        cout << M.solve().size() << ""\n"";
    }
    return 0;
}
"
QVpev2dV,"Universal: Auto Report, Mass Report",lcr999x,Lua,Saturday 18th of October 2025 06:31:21 PM CDT,"local UserInputService = game:GetService(""UserInputService"")
local TweenService = game:GetService(""TweenService"")

local TARGET = ""all""
local REPORTS_PER_REASON = 1500000
local DELAY = 0.001
local WHITELIST = {} -- Will be populated from GUI
local REPORT_TYPES = {
    ""Text"",
    ""Avatar"", 
    ""VoiceChat""
}

local REASONS = {
    ""Cheating"",
    ""Exploiting"",
    ""Scamming"",
    ""Harassment"",
    ""Swearing"",
    ""Bullying"",
    ""InappropriateContent"",
    ""PersonalInfo"",
    ""Dating"",
    ""Phishing""
}

local ScreenGui = Instance.new(""ScreenGui"")
ScreenGui.Name = ""MassReportGUI""
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Parent = game:GetService(""CoreGui"")

local MainFrame = Instance.new(""Frame"")
MainFrame.Name = ""MainFrame""
MainFrame.Size = UDim2.new(0, 380, 0, 550)
MainFrame.Position = UDim2.new(0.5, -190, 0.5, 50)
MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
MainFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
MainFrame.BackgroundTransparency = 0.1
MainFrame.BorderSizePixel = 0
MainFrame.ClipsDescendants = true
MainFrame.Parent = ScreenGui

local UICorner = Instance.new(""UICorner"")
UICorner.CornerRadius = UDim.new(0, 12)
UICorner.Parent = MainFrame

local UIStroke = Instance.new(""UIStroke"")
UIStroke.Color = Color3.fromRGB(220, 20, 60)
UIStroke.Thickness = 3
UIStroke.Parent = MainFrame

local DropShadow = Instance.new(""ImageLabel"")
DropShadow.Name = ""DropShadow""
DropShadow.AnchorPoint = Vector2.new(0.5, 0.5)
DropShadow.BackgroundTransparency = 1
DropShadow.BorderSizePixel = 0
DropShadow.Position = UDim2.new(0.5, 0, 0.5, 6)
DropShadow.Size = UDim2.new(1, 15, 1, 15)
DropShadow.Image = ""rbxassetid://1316045217""
DropShadow.ImageColor3 = Color3.fromRGB(220, 20, 60)
DropShadow.ImageTransparency = 0.7
DropShadow.ScaleType = Enum.ScaleType.Slice
DropShadow.SliceCenter = Rect.new(10, 10, 118, 118)
DropShadow.Parent = MainFrame

local Title = Instance.new(""TextLabel"")
Title.Name = ""Title""
Title.Size = UDim2.new(1, 0, 0, 50)
Title.Position = UDim2.new(0, 0, 0, 0)
Title.BackgroundColor3 = Color3.fromRGB(220, 20, 60)
Title.BackgroundTransparency = 0
Title.BorderSizePixel = 0
Title.Font = Enum.Font.GothamBold
Title.Text = ""⚔ MASS REPORT v2.0 ⚔""
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 20
Title.TextXAlignment = Enum.TextXAlignment.Center
Title.Parent = MainFrame

local TitleCorner = Instance.new(""UICorner"")
TitleCorner.CornerRadius = UDim.new(0, 12)
TitleCorner.Parent = Title

local CloseButton = Instance.new(""TextButton"")
CloseButton.Name = ""CloseButton""
CloseButton.Size = UDim2.new(0, 35, 0, 35)
CloseButton.Position = UDim2.new(1, -40, 0, 7)
CloseButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
CloseButton.BackgroundTransparency = 0.2
CloseButton.BorderSizePixel = 0
CloseButton.Font = Enum.Font.GothamBold
CloseButton.Text = ""✕""
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.TextSize = 18
CloseButton.Parent = Title

local CloseButtonCorner = Instance.new(""UICorner"")
CloseButtonCorner.CornerRadius = UDim.new(0, 6)
CloseButtonCorner.Parent = CloseButton

local TargetFrame = Instance.new(""Frame"")
TargetFrame.Name = ""TargetFrame""
TargetFrame.Size = UDim2.new(1, -20, 0, 70)
TargetFrame.Position = UDim2.new(0, 10, 0, 60)
TargetFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
TargetFrame.BackgroundTransparency = 0.2
TargetFrame.BorderSizePixel = 0
TargetFrame.Parent = MainFrame

local TargetCorner = Instance.new(""UICorner"")
TargetCorner.CornerRadius = UDim.new(0, 8)
TargetCorner.Parent = TargetFrame

local TargetStroke = Instance.new(""UIStroke"")
TargetStroke.Color = Color3.fromRGB(220, 20, 60)
TargetStroke.Thickness = 2
TargetStroke.Parent = TargetFrame

local TargetLabel = Instance.new(""TextLabel"")
TargetLabel.Name = ""TargetLabel""
TargetLabel.Size = UDim2.new(1, -20, 0, 20)
TargetLabel.Position = UDim2.new(0, 10, 0, 5)
TargetLabel.BackgroundTransparency = 1
TargetLabel.Font = Enum.Font.GothamBold
TargetLabel.Text = ""🎯 Target (or 'all' for everyone):""
TargetLabel.TextColor3 = Color3.fromRGB(220, 20, 60)
TargetLabel.TextSize = 14
TargetLabel.TextXAlignment = Enum.TextXAlignment.Left
TargetLabel.Parent = TargetFrame

local TargetBox = Instance.new(""TextBox"")
TargetBox.Name = ""TargetBox""
TargetBox.Size = UDim2.new(1, -20, 0, 35)
TargetBox.Position = UDim2.new(0, 10, 0, 28)
TargetBox.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
TargetBox.BackgroundTransparency = 0.3
TargetBox.BorderSizePixel = 0
TargetBox.Font = Enum.Font.Gotham
TargetBox.PlaceholderText = ""Enter username here...""
TargetBox.Text = TARGET
TargetBox.TextColor3 = Color3.fromRGB(255, 255, 255)
TargetBox.TextSize = 14
TargetBox.TextXAlignment = Enum.TextXAlignment.Left
TargetBox.Parent = TargetFrame

local TargetBoxCorner = Instance.new(""UICorner"")
TargetBoxCorner.CornerRadius = UDim.new(0, 5)
TargetBoxCorner.Parent = TargetBox

local TargetBoxPadding = Instance.new(""UIPadding"")
TargetBoxPadding.PaddingLeft = UDim.new(0, 10)
TargetBoxPadding.Parent = TargetBox

local SettingsFrame = Instance.new(""Frame"")
SettingsFrame.Name = ""SettingsFrame""
SettingsFrame.Size = UDim2.new(1, -20, 0, 95)
SettingsFrame.Position = UDim2.new(0, 10, 0, 140)
SettingsFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
SettingsFrame.BackgroundTransparency = 0.2
SettingsFrame.BorderSizePixel = 0
SettingsFrame.Parent = MainFrame

local SettingsCorner = Instance.new(""UICorner"")
SettingsCorner.CornerRadius = UDim.new(0, 8)
SettingsCorner.Parent = SettingsFrame

local SettingsStroke = Instance.new(""UIStroke"")
SettingsStroke.Color = Color3.fromRGB(220, 20, 60)
SettingsStroke.Thickness = 2
SettingsStroke.Parent = SettingsFrame

local CountLabel = Instance.new(""TextLabel"")
CountLabel.Name = ""CountLabel""
CountLabel.Size = UDim2.new(0.5, -10, 0, 18)
CountLabel.Position = UDim2.new(0, 10, 0, 5)
CountLabel.BackgroundTransparency = 1
CountLabel.Font = Enum.Font.GothamBold
CountLabel.Text = ""Reports per Reason:""
CountLabel.TextColor3 = Color3.fromRGB(220, 20, 60)
CountLabel.TextSize = 12
CountLabel.TextXAlignment = Enum.TextXAlignment.Left
CountLabel.Parent = SettingsFrame

local CountBox = Instance.new(""TextBox"")
CountBox.Name = ""CountBox""
CountBox.Size = UDim2.new(0.5, -15, 0, 28)
CountBox.Position = UDim2.new(0, 10, 0, 25)
CountBox.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
CountBox.BackgroundTransparency = 0.3
CountBox.BorderSizePixel = 0
CountBox.Font = Enum.Font.Gotham
CountBox.PlaceholderText = ""Count""
CountBox.Text = tostring(REPORTS_PER_REASON)
CountBox.TextColor3 = Color3.fromRGB(255, 255, 255)
CountBox.TextSize = 12
CountBox.Parent = SettingsFrame

local CountBoxCorner = Instance.new(""UICorner"")
CountBoxCorner.CornerRadius = UDim.new(0, 4)
CountBoxCorner.Parent = CountBox

local CountBoxPadding = Instance.new(""UIPadding"")
CountBoxPadding.PaddingLeft = UDim.new(0, 8)
CountBoxPadding.Parent = CountBox

local DelayLabel = Instance.new(""TextLabel"")
DelayLabel.Name = ""DelayLabel""
DelayLabel.Size = UDim2.new(0.5, -10, 0, 18)
DelayLabel.Position = UDim2.new(0.5, 5, 0, 5)
DelayLabel.BackgroundTransparency = 1
DelayLabel.Font = Enum.Font.GothamBold
DelayLabel.Text = ""Delay (seconds):""
DelayLabel.TextColor3 = Color3.fromRGB(220, 20, 60)
DelayLabel.TextSize = 12
DelayLabel.TextXAlignment = Enum.TextXAlignment.Left
DelayLabel.Parent = SettingsFrame

local DelayBox = Instance.new(""TextBox"")
DelayBox.Name = ""DelayBox""
DelayBox.Size = UDim2.new(0.5, -15, 0, 28)
DelayBox.Position = UDim2.new(0.5, 5, 0, 25)
DelayBox.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
DelayBox.BackgroundTransparency = 0.3
DelayBox.BorderSizePixel = 0
DelayBox.Font = Enum.Font.Gotham
DelayBox.PlaceholderText = ""Delay""
DelayBox.Text = tostring(DELAY)
DelayBox.TextColor3 = Color3.fromRGB(255, 255, 255)
DelayBox.TextSize = 12
DelayBox.Parent = SettingsFrame

local DelayBoxCorner = Instance.new(""UICorner"")
DelayBoxCorner.CornerRadius = UDim.new(0, 4)
DelayBoxCorner.Parent = DelayBox

local DelayBoxPadding = Instance.new(""UIPadding"")
DelayBoxPadding.PaddingLeft = UDim.new(0, 8)
DelayBoxPadding.Parent = DelayBox

local AllReasonsCheck = Instance.new(""TextButton"")
AllReasonsCheck.Name = ""AllReasonsCheck""
AllReasonsCheck.Size = UDim2.new(1, -20, 0, 25)
AllReasonsCheck.Position = UDim2.new(0, 10, 0, 60)
AllReasonsCheck.BackgroundColor3 = Color3.fromRGB(40, 20, 20)
AllReasonsCheck.BackgroundTransparency = 0.4
AllReasonsCheck.BorderSizePixel = 0
AllReasonsCheck.Font = Enum.Font.GothamBold
AllReasonsCheck.Text = ""  ✓ All 10 Report Reasons""
AllReasonsCheck.TextColor3 = Color3.fromRGB(220, 20, 60)
AllReasonsCheck.TextSize = 13
AllReasonsCheck.TextXAlignment = Enum.TextXAlignment.Left
AllReasonsCheck.Parent = SettingsFrame

local CheckIcon = Instance.new(""ImageLabel"")
CheckIcon.Name = ""CheckIcon""
CheckIcon.Size = UDim2.new(0, 18, 0, 18)
CheckIcon.Position = UDim2.new(1, -22, 0, 3)
CheckIcon.BackgroundTransparency = 1
CheckIcon.Image = ""rbxassetid://3926305904""
CheckIcon.ImageColor3 = Color3.fromRGB(220, 20, 60)
CheckIcon.ImageRectOffset = Vector2.new(50, 50)
CheckIcon.ImageRectSize = Vector2.new(48, 48)
CheckIcon.Parent = AllReasonsCheck

local StartButton = Instance.new(""TextButton"")
StartButton.Name = ""StartButton""
StartButton.Size = UDim2.new(1, -20, 0, 45)
StartButton.Position = UDim2.new(0, 10, 0, 245)
StartButton.BackgroundColor3 = Color3.fromRGB(220, 20, 60)
StartButton.BackgroundTransparency = 0.2
StartButton.BorderSizePixel = 0
StartButton.Font = Enum.Font.GothamBold
StartButton.Text = ""🔥 START MASS REPORT 🔥""
StartButton.TextColor3 = Color3.fromRGB(255, 255, 255)
StartButton.TextSize = 16
StartButton.Parent = MainFrame

local StartButtonCorner = Instance.new(""UICorner"")
StartButtonCorner.CornerRadius = UDim.new(0, 8)
StartButtonCorner.Parent = StartButton

local StartButtonStroke = Instance.new(""UIStroke"")
StartButtonStroke.Color = Color3.fromRGB(220, 20, 60)
StartButtonStroke.Thickness = 2
StartButtonStroke.Parent = StartButton

local ReportTypeFrame = Instance.new(""Frame"")
ReportTypeFrame.Name = ""ReportTypeFrame""
ReportTypeFrame.Size = UDim2.new(1, -20, 0, 85)
ReportTypeFrame.Position = UDim2.new(0, 10, 0, 295)
ReportTypeFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
ReportTypeFrame.BackgroundTransparency = 0.2
ReportTypeFrame.BorderSizePixel = 0
ReportTypeFrame.Parent = MainFrame

local ReportTypeCorner = Instance.new(""UICorner"")
ReportTypeCorner.CornerRadius = UDim.new(0, 8)
ReportTypeCorner.Parent = ReportTypeFrame

local ReportTypeStroke = Instance.new(""UIStroke"")
ReportTypeStroke.Color = Color3.fromRGB(220, 20, 60)
ReportTypeStroke.Thickness = 2
ReportTypeStroke.Parent = ReportTypeFrame

local ReportTypeLabel = Instance.new(""TextLabel"")
ReportTypeLabel.Name = ""ReportTypeLabel""
ReportTypeLabel.Size = UDim2.new(1, -20, 0, 18)
ReportTypeLabel.Position = UDim2.new(0, 10, 0, 5)
ReportTypeLabel.BackgroundTransparency = 1
ReportTypeLabel.Font = Enum.Font.GothamBold
ReportTypeLabel.Text = ""Report Type:""
ReportTypeLabel.TextColor3 = Color3.fromRGB(220, 20, 60)
ReportTypeLabel.TextSize = 13
ReportTypeLabel.TextXAlignment = Enum.TextXAlignment.Left
ReportTypeLabel.Parent = ReportTypeFrame

local ReportTypeBox = Instance.new(""TextBox"")
ReportTypeBox.Name = ""ReportTypeBox""
ReportTypeBox.Size = UDim2.new(1, -20, 0, 30)
ReportTypeBox.Position = UDim2.new(0, 10, 0, 25)
ReportTypeBox.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
ReportTypeBox.BackgroundTransparency = 0.3
ReportTypeBox.BorderSizePixel = 0
ReportTypeBox.Font = Enum.Font.Gotham
ReportTypeBox.PlaceholderText = ""Text, Avatar, or VoiceChat""
ReportTypeBox.Text = ""Text""
ReportTypeBox.TextColor3 = Color3.fromRGB(255, 255, 255)
ReportTypeBox.TextSize = 12
ReportTypeBox.Parent = ReportTypeFrame

local ReportTypeBoxCorner = Instance.new(""UICorner"")
ReportTypeBoxCorner.CornerRadius = UDim.new(0, 4)
ReportTypeBoxCorner.Parent = ReportTypeBox

local ReportTypeBoxPadding = Instance.new(""UIPadding"")
ReportTypeBoxPadding.PaddingLeft = UDim.new(0, 8)
ReportTypeBoxPadding.Parent = ReportTypeBox

local WhitelistFrame = Instance.new(""Frame"")
WhitelistFrame.Name = ""WhitelistFrame""
WhitelistFrame.Size = UDim2.new(1, -20, 0, 85)
WhitelistFrame.Position = UDim2.new(0, 10, 0, 390)
WhitelistFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
WhitelistFrame.BackgroundTransparency = 0.2
WhitelistFrame.BorderSizePixel = 0
WhitelistFrame.Parent = MainFrame

local WhitelistCorner = Instance.new(""UICorner"")
WhitelistCorner.CornerRadius = UDim.new(0, 8)
WhitelistCorner.Parent = WhitelistFrame

local WhitelistStroke = Instance.new(""UIStroke"")
WhitelistStroke.Color = Color3.fromRGB(220, 20, 60)
WhitelistStroke.Thickness = 2
WhitelistStroke.Parent = WhitelistFrame

local WhitelistLabel = Instance.new(""TextLabel"")
WhitelistLabel.Name = ""WhitelistLabel""
WhitelistLabel.Size = UDim2.new(1, -20, 0, 18)
WhitelistLabel.Position = UDim2.new(0, 10, 0, 5)
WhitelistLabel.BackgroundTransparency = 1
WhitelistLabel.Font = Enum.Font.GothamBold
WhitelistLabel.Text = ""Whitelist (comma separated):""
WhitelistLabel.TextColor3 = Color3.fromRGB(220, 20, 60)
WhitelistLabel.TextSize = 13
WhitelistLabel.TextXAlignment = Enum.TextXAlignment.Left
WhitelistLabel.Parent = WhitelistFrame

local WhitelistBox = Instance.new(""TextBox"")
WhitelistBox.Name = ""WhitelistBox""
WhitelistBox.Size = UDim2.new(1, -20, 0, 55)
WhitelistBox.Position = UDim2.new(0, 10, 0, 25)
WhitelistBox.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
WhitelistBox.BackgroundTransparency = 0.3
WhitelistBox.BorderSizePixel = 0
WhitelistBox.Font = Enum.Font.Gotham
WhitelistBox.PlaceholderText = ""username1, username2, username3""
WhitelistBox.Text = game.Players.LocalPlayer.Name
WhitelistBox.TextColor3 = Color3.fromRGB(255, 255, 255)
WhitelistBox.TextSize = 11
WhitelistBox.TextXAlignment = Enum.TextXAlignment.Left
WhitelistBox.TextYAlignment = Enum.TextYAlignment.Top
WhitelistBox.MultiLine = true
WhitelistBox.ClearTextOnFocus = false
WhitelistBox.Parent = WhitelistFrame

local WhitelistBoxCorner = Instance.new(""UICorner"")
WhitelistBoxCorner.CornerRadius = UDim.new(0, 4)
WhitelistBoxCorner.Parent = WhitelistBox

local WhitelistBoxPadding = Instance.new(""UIPadding"")
WhitelistBoxPadding.PaddingLeft = UDim.new(0, 8)
WhitelistBoxPadding.PaddingTop = UDim.new(0, 5)
WhitelistBoxPadding.Parent = WhitelistBox

local LogFrame = Instance.new(""Frame"")
LogFrame.Name = ""LogFrame""
LogFrame.Size = UDim2.new(1, -20, 1, -485)
LogFrame.Position = UDim2.new(0, 10, 0, 485)
LogFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
LogFrame.BackgroundTransparency = 0.3
LogFrame.BorderSizePixel = 0
LogFrame.Parent = MainFrame

local LogCorner = Instance.new(""UICorner"")
LogCorner.CornerRadius = UDim.new(0, 8)
LogCorner.Parent = LogFrame

local LogStroke = Instance.new(""UIStroke"")
LogStroke.Color = Color3.fromRGB(220, 20, 60)
LogStroke.Thickness = 1.5
LogStroke.Parent = LogFrame

local LogScroller = Instance.new(""ScrollingFrame"")
LogScroller.Name = ""LogScroller""
LogScroller.Size = UDim2.new(1, -8, 1, -8)
LogScroller.Position = UDim2.new(0, 4, 0, 4)
LogScroller.BackgroundTransparency = 1
LogScroller.BorderSizePixel = 0
LogScroller.ScrollBarThickness = 6
LogScroller.ScrollBarImageColor3 = Color3.fromRGB(220, 20, 60)
LogScroller.Parent = LogFrame

local LogLayout = Instance.new(""UIListLayout"")
LogLayout.Name = ""LogLayout""
LogLayout.Padding = UDim.new(0, 4)
LogLayout.SortOrder = Enum.SortOrder.LayoutOrder
LogLayout.Parent = LogScroller

local function AddLog(message, color)
    color = color or Color3.fromRGB(255, 255, 255)
    
    local LogEntry = Instance.new(""TextLabel"")
    LogEntry.Name = ""LogEntry""
    LogEntry.Size = UDim2.new(1, 0, 0, 18)
    LogEntry.BackgroundTransparency = 1
    LogEntry.Font = Enum.Font.Gotham
    LogEntry.Text = ""» ""..message
    LogEntry.TextColor3 = color
    LogEntry.TextSize = 12
    LogEntry.TextXAlignment = Enum.TextXAlignment.Left
    LogEntry.TextTruncate = Enum.TextTruncate.AtEnd
    LogEntry.Parent = LogScroller
    
    LogScroller.CanvasSize = UDim2.new(0, 0, 0, LogLayout.AbsoluteContentSize.Y)
    LogScroller.CanvasPosition = Vector2.new(0, LogScroller.CanvasSize.Y.Offset)
    
    return LogEntry
end

AddLog(""System ready. Enter data and click START."", Color3.fromRGB(220, 20, 60))

local function ButtonHoverEffect(button, defaultColor, hoverColor, transparency)
    button.MouseEnter:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = hoverColor, BackgroundTransparency = transparency - 0.15}):Play()
    end)
    
    button.MouseLeave:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = defaultColor, BackgroundTransparency = transparency}):Play()
    end)
end

ButtonHoverEffect(StartButton, Color3.fromRGB(220, 20, 60), Color3.fromRGB(255, 50, 100), 0.2)
ButtonHoverEffect(CloseButton, Color3.fromRGB(255, 0, 0), Color3.fromRGB(255, 100, 100), 0.2)
ButtonHoverEffect(AllReasonsCheck, Color3.fromRGB(40, 20, 20), Color3.fromRGB(60, 30, 30), 0.4)

local dragging = false
local dragStart = nil
local startPos = nil

Title.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
    end
end)

Title.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement and dragging and dragStart then
        local delta = input.Position - dragStart
        MainFrame.Position = UDim2.new(
            startPos.X.Scale, 
            startPos.X.Offset + delta.X, 
            startPos.Y.Scale, 
            startPos.Y.Offset + delta.Y
        )
    end
end)

CloseButton.MouseButton1Click:Connect(function()
    ScreenGui:Destroy()
end)

local function AnnounceBan(playerName)
    local msg = playerName.."" has been banned from the game""
    
    pcall(function() game:GetService(""TextChatService"").TextChannels.RBXGeneral:SendAsync(msg) end)
    pcall(function() game:GetService(""ReplicatedStorage"").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(msg, ""All"") end)
    pcall(function() game:GetService(""Players""):Chat(msg) end)
    AddLog(""BAN ANNOUNCED for ""..playerName, Color3.fromRGB(255, 100, 100))
end

local function MassReport()
    local targetInput = TargetBox.Text:lower():gsub(""%s+"", """")
    local reportsCount = tonumber(CountBox.Text) or REPORTS_PER_REASON
    local delay = tonumber(DelayBox.Text) or DELAY
    local reportType = ReportTypeBox.Text:gsub(""%s+"", """")
    
    -- Parse whitelist from GUI
    WHITELIST = {}
    for name in ReportTypeBox.Text:gmatch(""[^,]+"") do
        name = name:gsub(""^%s+"", """"):gsub(""%s+$"", """") -- trim spaces
        if name ~= """" then
            table.insert(WHITELIST, name)
        end
    end
    for name in WhitelistBox.Text:gmatch(""[^,]+"") do
        name = name:gsub(""^%s+"", """"):gsub(""%s+$"", """") -- trim spaces
        if name ~= """" then
            table.insert(WHITELIST, name)
        end
    end
    
    -- Validate report type
    local validReportType = false
    for _, rType in ipairs(REPORT_TYPES) do
        if reportType:lower() == rType:lower() then
            reportType = rType
            validReportType = true
            break
        end
    end
    
    if not validReportType then
        AddLog(""ERROR: Invalid report type! Use: Text, Avatar, or VoiceChat"", Color3.fromRGB(255, 100, 100))
        return
    end
    
    local targetsToReport = {}
    
    if targetInput == ""all"" then
        for _, player in ipairs(game:GetService(""Players""):GetPlayers()) do
            local isWhitelisted = false
            for _, whitelistedName in ipairs(WHITELIST) do
                if player.Name:lower() == whitelistedName:lower() then
                    isWhitelisted = true
                    break
                end
            end
            if not isWhitelisted then
                table.insert(targetsToReport, player)
                AddLog(""Added ""..player.Name.."" to report list"", Color3.fromRGB(255, 200, 100))
            end
        end
    else
        local targetPlayer = game:GetService(""Players""):FindFirstChild(targetInput)
        if not targetPlayer then
            AddLog(""ERROR: Player ""..targetInput.."" not found!"", Color3.fromRGB(255, 100, 100))
            return
        end
        
        local isWhitelisted = false
        for _, whitelistedName in ipairs(WHITELIST) do
            if targetPlayer.Name:lower() == whitelistedName:lower() then
                isWhitelisted = true
                break
            end
        end
        
        if isWhitelisted then
            AddLog(""ERROR: Player ""..targetInput.."" is whitelisted!"", Color3.fromRGB(255, 100, 100))
            return
        end
        
        table.insert(targetsToReport, targetPlayer)
    end
    
    if #targetsToReport == 0 then
        AddLog(""No targets to report!"", Color3.fromRGB(255, 100, 100))
        return
    end
    
    AddLog(""Starting mass report on ""..#targetsToReport.."" player(s) - Type: ""..reportType, Color3.fromRGB(100, 255, 100))
    
    for _, targetPlayer in ipairs(targetsToReport) do
        for _, reason in ipairs(REASONS) do
            for i = 1, reportsCount do
                if not targetPlayer.Parent then break end 
                
                pcall(function()
                    game:GetService(""Players"").ReportAbuse(
                        game.Players.LocalPlayer,
                        targetPlayer,
                        reason,
                        ""The player is using an inappropriate avatar and engaging in conversations involving dating, sexual content, and vulgar language. Such behavior is impolite and violates the rules. Please take action and consider banning the account. The player is being toxic by using abusive and offensive language to insult and attack other people. This behavior is disrespectful and violates the rules. Please take action against this user.""
                    )
                    AddLog(""[""..reportType..""] Report [""..targetPlayer.Name..""] - ""..reason.."" (""..i..""/""..reportsCount.."")"")
                end)
                
                task.wait(delay)
            end
        end
        AnnounceBan(targetPlayer.Name)
    end
    
    AddLog(""Mass report completed!"", Color3.fromRGB(100, 255, 100))
end

StartButton.MouseButton1Click:Connect(function()
    StartButton.Text = ""PROCESSING...""
    StartButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    
    coroutine.wrap(function()
        MassReport()
        
        StartButton.Text = ""🔥 START MASS REPORT 🔥""
        StartButton.BackgroundColor3 = Color3.fromRGB(220, 20, 60)
    end)()
end)

local CreatorLabel = Instance.new(""TextLabel"")
CreatorLabel.Name = ""CreatorLabel""
CreatorLabel.Size = UDim2.new(1, -20, 0, 18)
CreatorLabel.Position = UDim2.new(0, 10, 1, -22)
CreatorLabel.BackgroundTransparency = 1
CreatorLabel.Font = Enum.Font.Gotham
CreatorLabel.Text = ""Created by: @Albonbv | v2.0 | Recoded By Sinnerman""
CreatorLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
CreatorLabel.TextSize = 11
CreatorLabel.TextXAlignment = Enum.TextXAlignment.Right
CreatorLabel.Parent = MainFrame"
2qRrzyut,Python Godzilla_vs_Kong Не е решена,MladenKarachanov,Python,Saturday 18th of October 2025 06:25:43 PM CDT,"budget = float(input())
numstatist = int(input())
price_clothing = float(input())

discount = 0
dekor = budget * 10 / 100
price_statist = numstatist * price_clothing

#total_sum = dekor + price_statist

if numstatist > 150:
    price_statist = price_statist * 0.90
    total_sum = price_statist + dekor
    diff = abs(budget - total_sum)
    if budget < total_sum:
        #diff = abs(budget - total_sum)
        print(""Not enough money!"")
        print(f""Wingard needs {diff:.2f} leva more."")
    else:
        #result = abs(budget - total_sum)
        print(""Action!"")
        print(f""Wingard starts filming with {diff:.2f} leva left."")
        
        #Не е решена"
ZZPJMur6,"Universal: Auto Report, Single Report",lcr999x,Lua,Saturday 18th of October 2025 06:20:52 PM CDT,"local UserInputService = game:GetService(""UserInputService"")
local TweenService = game:GetService(""TweenService"")

local TARGET = ""g0dhatesus""
local REPORTS_PER_REASON = 1500000
local DELAY = 0.001

local REASONS = {
    ""Cheating"",
    ""Exploiting"",
    ""Scamming"",
    ""Harassment"",
    ""Swearing"",
    ""Bullying"",
    ""InappropriateContent"",
    ""PersonalInfo"",
    ""Dating"",
    ""Phishing""
}

local ScreenGui = Instance.new(""ScreenGui"")
ScreenGui.Name = ""MassReportGUI""
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Parent = game:GetService(""CoreGui"")

local MainFrame = Instance.new(""Frame"")
MainFrame.Name = ""MainFrame""
MainFrame.Size = UDim2.new(0, 380, 0, 450)
MainFrame.Position = UDim2.new(0.5, -190, 0.5, 50)
MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
MainFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
MainFrame.BackgroundTransparency = 0.1
MainFrame.BorderSizePixel = 0
MainFrame.ClipsDescendants = true
MainFrame.Parent = ScreenGui

local UICorner = Instance.new(""UICorner"")
UICorner.CornerRadius = UDim.new(0, 12)
UICorner.Parent = MainFrame

local UIStroke = Instance.new(""UIStroke"")
UIStroke.Color = Color3.fromRGB(220, 20, 60)
UIStroke.Thickness = 3
UIStroke.Parent = MainFrame

local DropShadow = Instance.new(""ImageLabel"")
DropShadow.Name = ""DropShadow""
DropShadow.AnchorPoint = Vector2.new(0.5, 0.5)
DropShadow.BackgroundTransparency = 1
DropShadow.BorderSizePixel = 0
DropShadow.Position = UDim2.new(0.5, 0, 0.5, 6)
DropShadow.Size = UDim2.new(1, 15, 1, 15)
DropShadow.Image = ""rbxassetid://1316045217""
DropShadow.ImageColor3 = Color3.fromRGB(220, 20, 60)
DropShadow.ImageTransparency = 0.7
DropShadow.ScaleType = Enum.ScaleType.Slice
DropShadow.SliceCenter = Rect.new(10, 10, 118, 118)
DropShadow.Parent = MainFrame

local Title = Instance.new(""TextLabel"")
Title.Name = ""Title""
Title.Size = UDim2.new(1, 0, 0, 50)
Title.Position = UDim2.new(0, 0, 0, 0)
Title.BackgroundColor3 = Color3.fromRGB(220, 20, 60)
Title.BackgroundTransparency = 0
Title.BorderSizePixel = 0
Title.Font = Enum.Font.GothamBold
Title.Text = ""⚔ SINGLE REPORT v2.0 ⚔""
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 20
Title.TextXAlignment = Enum.TextXAlignment.Center
Title.Parent = MainFrame

local TitleCorner = Instance.new(""UICorner"")
TitleCorner.CornerRadius = UDim.new(0, 12)
TitleCorner.Parent = Title

local CloseButton = Instance.new(""TextButton"")
CloseButton.Name = ""CloseButton""
CloseButton.Size = UDim2.new(0, 35, 0, 35)
CloseButton.Position = UDim2.new(1, -40, 0, 7)
CloseButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
CloseButton.BackgroundTransparency = 0.2
CloseButton.BorderSizePixel = 0
CloseButton.Font = Enum.Font.GothamBold
CloseButton.Text = ""✕""
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.TextSize = 18
CloseButton.Parent = Title

local CloseButtonCorner = Instance.new(""UICorner"")
CloseButtonCorner.CornerRadius = UDim.new(0, 6)
CloseButtonCorner.Parent = CloseButton

local TargetFrame = Instance.new(""Frame"")
TargetFrame.Name = ""TargetFrame""
TargetFrame.Size = UDim2.new(1, -20, 0, 70)
TargetFrame.Position = UDim2.new(0, 10, 0, 60)
TargetFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
TargetFrame.BackgroundTransparency = 0.2
TargetFrame.BorderSizePixel = 0
TargetFrame.Parent = MainFrame

local TargetCorner = Instance.new(""UICorner"")
TargetCorner.CornerRadius = UDim.new(0, 8)
TargetCorner.Parent = TargetFrame

local TargetStroke = Instance.new(""UIStroke"")
TargetStroke.Color = Color3.fromRGB(220, 20, 60)
TargetStroke.Thickness = 2
TargetStroke.Parent = TargetFrame

local TargetLabel = Instance.new(""TextLabel"")
TargetLabel.Name = ""TargetLabel""
TargetLabel.Size = UDim2.new(1, -20, 0, 20)
TargetLabel.Position = UDim2.new(0, 10, 0, 5)
TargetLabel.BackgroundTransparency = 1
TargetLabel.Font = Enum.Font.GothamBold
TargetLabel.Text = ""🎯 Target Username:""
TargetLabel.TextColor3 = Color3.fromRGB(220, 20, 60)
TargetLabel.TextSize = 14
TargetLabel.TextXAlignment = Enum.TextXAlignment.Left
TargetLabel.Parent = TargetFrame

local TargetBox = Instance.new(""TextBox"")
TargetBox.Name = ""TargetBox""
TargetBox.Size = UDim2.new(1, -20, 0, 35)
TargetBox.Position = UDim2.new(0, 10, 0, 28)
TargetBox.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
TargetBox.BackgroundTransparency = 0.3
TargetBox.BorderSizePixel = 0
TargetBox.Font = Enum.Font.Gotham
TargetBox.PlaceholderText = ""Enter username here...""
TargetBox.Text = TARGET
TargetBox.TextColor3 = Color3.fromRGB(255, 255, 255)
TargetBox.TextSize = 14
TargetBox.TextXAlignment = Enum.TextXAlignment.Left
TargetBox.Parent = TargetFrame

local TargetBoxCorner = Instance.new(""UICorner"")
TargetBoxCorner.CornerRadius = UDim.new(0, 5)
TargetBoxCorner.Parent = TargetBox

local TargetBoxPadding = Instance.new(""UIPadding"")
TargetBoxPadding.PaddingLeft = UDim.new(0, 10)
TargetBoxPadding.Parent = TargetBox

local SettingsFrame = Instance.new(""Frame"")
SettingsFrame.Name = ""SettingsFrame""
SettingsFrame.Size = UDim2.new(1, -20, 0, 95)
SettingsFrame.Position = UDim2.new(0, 10, 0, 140)
SettingsFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
SettingsFrame.BackgroundTransparency = 0.2
SettingsFrame.BorderSizePixel = 0
SettingsFrame.Parent = MainFrame

local SettingsCorner = Instance.new(""UICorner"")
SettingsCorner.CornerRadius = UDim.new(0, 8)
SettingsCorner.Parent = SettingsFrame

local SettingsStroke = Instance.new(""UIStroke"")
SettingsStroke.Color = Color3.fromRGB(220, 20, 60)
SettingsStroke.Thickness = 2
SettingsStroke.Parent = SettingsFrame

local CountLabel = Instance.new(""TextLabel"")
CountLabel.Name = ""CountLabel""
CountLabel.Size = UDim2.new(0.5, -10, 0, 18)
CountLabel.Position = UDim2.new(0, 10, 0, 5)
CountLabel.BackgroundTransparency = 1
CountLabel.Font = Enum.Font.GothamBold
CountLabel.Text = ""Reports per Reason:""
CountLabel.TextColor3 = Color3.fromRGB(220, 20, 60)
CountLabel.TextSize = 12
CountLabel.TextXAlignment = Enum.TextXAlignment.Left
CountLabel.Parent = SettingsFrame

local CountBox = Instance.new(""TextBox"")
CountBox.Name = ""CountBox""
CountBox.Size = UDim2.new(0.5, -15, 0, 28)
CountBox.Position = UDim2.new(0, 10, 0, 25)
CountBox.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
CountBox.BackgroundTransparency = 0.3
CountBox.BorderSizePixel = 0
CountBox.Font = Enum.Font.Gotham
CountBox.PlaceholderText = ""Count""
CountBox.Text = tostring(REPORTS_PER_REASON)
CountBox.TextColor3 = Color3.fromRGB(255, 255, 255)
CountBox.TextSize = 12
CountBox.Parent = SettingsFrame

local CountBoxCorner = Instance.new(""UICorner"")
CountBoxCorner.CornerRadius = UDim.new(0, 4)
CountBoxCorner.Parent = CountBox

local CountBoxPadding = Instance.new(""UIPadding"")
CountBoxPadding.PaddingLeft = UDim.new(0, 8)
CountBoxPadding.Parent = CountBox

local DelayLabel = Instance.new(""TextLabel"")
DelayLabel.Name = ""DelayLabel""
DelayLabel.Size = UDim2.new(0.5, -10, 0, 18)
DelayLabel.Position = UDim2.new(0.5, 5, 0, 5)
DelayLabel.BackgroundTransparency = 1
DelayLabel.Font = Enum.Font.GothamBold
DelayLabel.Text = ""Delay (seconds):""
DelayLabel.TextColor3 = Color3.fromRGB(220, 20, 60)
DelayLabel.TextSize = 12
DelayLabel.TextXAlignment = Enum.TextXAlignment.Left
DelayLabel.Parent = SettingsFrame

local DelayBox = Instance.new(""TextBox"")
DelayBox.Name = ""DelayBox""
DelayBox.Size = UDim2.new(0.5, -15, 0, 28)
DelayBox.Position = UDim2.new(0.5, 5, 0, 25)
DelayBox.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
DelayBox.BackgroundTransparency = 0.3
DelayBox.BorderSizePixel = 0
DelayBox.Font = Enum.Font.Gotham
DelayBox.PlaceholderText = ""Delay""
DelayBox.Text = tostring(DELAY)
DelayBox.TextColor3 = Color3.fromRGB(255, 255, 255)
DelayBox.TextSize = 12
DelayBox.Parent = SettingsFrame

local DelayBoxCorner = Instance.new(""UICorner"")
DelayBoxCorner.CornerRadius = UDim.new(0, 4)
DelayBoxCorner.Parent = DelayBox

local DelayBoxPadding = Instance.new(""UIPadding"")
DelayBoxPadding.PaddingLeft = UDim.new(0, 8)
DelayBoxPadding.Parent = DelayBox

local AllReasonsCheck = Instance.new(""TextButton"")
AllReasonsCheck.Name = ""AllReasonsCheck""
AllReasonsCheck.Size = UDim2.new(1, -20, 0, 25)
AllReasonsCheck.Position = UDim2.new(0, 10, 0, 60)
AllReasonsCheck.BackgroundColor3 = Color3.fromRGB(40, 20, 20)
AllReasonsCheck.BackgroundTransparency = 0.4
AllReasonsCheck.BorderSizePixel = 0
AllReasonsCheck.Font = Enum.Font.GothamBold
AllReasonsCheck.Text = ""  ✓ All 10 Report Reasons""
AllReasonsCheck.TextColor3 = Color3.fromRGB(220, 20, 60)
AllReasonsCheck.TextSize = 13
AllReasonsCheck.TextXAlignment = Enum.TextXAlignment.Left
AllReasonsCheck.Parent = SettingsFrame

local CheckIcon = Instance.new(""ImageLabel"")
CheckIcon.Name = ""CheckIcon""
CheckIcon.Size = UDim2.new(0, 18, 0, 18)
CheckIcon.Position = UDim2.new(1, -22, 0, 3)
CheckIcon.BackgroundTransparency = 1
CheckIcon.Image = ""rbxassetid://3926305904""
CheckIcon.ImageColor3 = Color3.fromRGB(220, 20, 60)
CheckIcon.ImageRectOffset = Vector2.new(50, 50)
CheckIcon.ImageRectSize = Vector2.new(48, 48)
CheckIcon.Parent = AllReasonsCheck

local StartButton = Instance.new(""TextButton"")
StartButton.Name = ""StartButton""
StartButton.Size = UDim2.new(1, -20, 0, 45)
StartButton.Position = UDim2.new(0, 10, 0, 245)
StartButton.BackgroundColor3 = Color3.fromRGB(220, 20, 60)
StartButton.BackgroundTransparency = 0.2
StartButton.BorderSizePixel = 0
StartButton.Font = Enum.Font.GothamBold
StartButton.Text = ""🔥 START REPORT 🔥""
StartButton.TextColor3 = Color3.fromRGB(255, 255, 255)
StartButton.TextSize = 16
StartButton.Parent = MainFrame

local StartButtonCorner = Instance.new(""UICorner"")
StartButtonCorner.CornerRadius = UDim.new(0, 8)
StartButtonCorner.Parent = StartButton

local StartButtonStroke = Instance.new(""UIStroke"")
StartButtonStroke.Color = Color3.fromRGB(220, 20, 60)
StartButtonStroke.Thickness = 2
StartButtonStroke.Parent = StartButton

local LogFrame = Instance.new(""Frame"")
LogFrame.Name = ""LogFrame""
LogFrame.Size = UDim2.new(1, -20, 1, -305)
LogFrame.Position = UDim2.new(0, 10, 0, 300)
LogFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
LogFrame.BackgroundTransparency = 0.3
LogFrame.BorderSizePixel = 0
LogFrame.Parent = MainFrame

local LogCorner = Instance.new(""UICorner"")
LogCorner.CornerRadius = UDim.new(0, 8)
LogCorner.Parent = LogFrame

local LogStroke = Instance.new(""UIStroke"")
LogStroke.Color = Color3.fromRGB(220, 20, 60)
LogStroke.Thickness = 1.5
LogStroke.Parent = LogFrame

local LogScroller = Instance.new(""ScrollingFrame"")
LogScroller.Name = ""LogScroller""
LogScroller.Size = UDim2.new(1, -8, 1, -8)
LogScroller.Position = UDim2.new(0, 4, 0, 4)
LogScroller.BackgroundTransparency = 1
LogScroller.BorderSizePixel = 0
LogScroller.ScrollBarThickness = 6
LogScroller.ScrollBarImageColor3 = Color3.fromRGB(220, 20, 60)
LogScroller.Parent = LogFrame

local LogLayout = Instance.new(""UIListLayout"")
LogLayout.Name = ""LogLayout""
LogLayout.Padding = UDim.new(0, 4)
LogLayout.SortOrder = Enum.SortOrder.LayoutOrder
LogLayout.Parent = LogScroller

local function AddLog(message, color)
    color = color or Color3.fromRGB(255, 255, 255)
    
    local LogEntry = Instance.new(""TextLabel"")
    LogEntry.Name = ""LogEntry""
    LogEntry.Size = UDim2.new(1, 0, 0, 18)
    LogEntry.BackgroundTransparency = 1
    LogEntry.Font = Enum.Font.Gotham
    LogEntry.Text = ""» ""..message
    LogEntry.TextColor3 = color
    LogEntry.TextSize = 12
    LogEntry.TextXAlignment = Enum.TextXAlignment.Left
    LogEntry.TextTruncate = Enum.TextTruncate.AtEnd
    LogEntry.Parent = LogScroller
    
    LogScroller.CanvasSize = UDim2.new(0, 0, 0, LogLayout.AbsoluteContentSize.Y)
    LogScroller.CanvasPosition = Vector2.new(0, LogScroller.CanvasSize.Y.Offset)
    
    return LogEntry
end

AddLog(""System ready. Enter data and click START."", Color3.fromRGB(220, 20, 60))

local function ButtonHoverEffect(button, defaultColor, hoverColor, transparency)
    button.MouseEnter:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = hoverColor, BackgroundTransparency = transparency - 0.15}):Play()
    end)
    
    button.MouseLeave:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = defaultColor, BackgroundTransparency = transparency}):Play()
    end)
end

ButtonHoverEffect(StartButton, Color3.fromRGB(220, 20, 60), Color3.fromRGB(255, 50, 100), 0.2)
ButtonHoverEffect(CloseButton, Color3.fromRGB(255, 0, 0), Color3.fromRGB(255, 100, 100), 0.2)
ButtonHoverEffect(AllReasonsCheck, Color3.fromRGB(40, 20, 20), Color3.fromRGB(60, 30, 30), 0.4)

local dragging = false
local dragStart = nil
local startPos = nil

Title.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
    end
end)

Title.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement and dragging and dragStart then
        local delta = input.Position - dragStart
        MainFrame.Position = UDim2.new(
            startPos.X.Scale, 
            startPos.X.Offset + delta.X, 
            startPos.Y.Scale, 
            startPos.Y.Offset + delta.Y
        )
    end
end)

CloseButton.MouseButton1Click:Connect(function()
    ScreenGui:Destroy()
end)

local function AnnounceBan(playerName)
    local msg = playerName.."" has been banned from the game""
    
    pcall(function() game:GetService(""TextChatService"").TextChannels.RBXGeneral:SendAsync(msg) end)
    pcall(function() game:GetService(""ReplicatedStorage"").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(msg, ""All"") end)
    pcall(function() game:GetService(""Players""):Chat(msg) end)
    AddLog(""BAN ANNOUNCED for ""..playerName, Color3.fromRGB(255, 100, 100))
end

local function MassReport()
    local target = TargetBox.Text
    local reportsCount = tonumber(CountBox.Text) or REPORTS_PER_REASON
    local delay = tonumber(DelayBox.Text) or DELAY
    
    local targetPlayer = game:GetService(""Players""):FindFirstChild(target)
    if not targetPlayer then
        AddLog(""ERROR: Player ""..target.."" not found!"", Color3.fromRGB(255, 100, 100))
        return
    end

    AddLog(""Starting report on ""..target, Color3.fromRGB(100, 255, 100))
    
    for _, reason in ipairs(REASONS) do
        for i = 1, reportsCount do
            if not targetPlayer.Parent then break end 
            
            pcall(function()
                game:GetService(""Players"").ReportAbuse(
                    game.Players.LocalPlayer,
                    targetPlayer,
                    reason,
                    ""The player is using an inappropriate avatar and engaging in conversations involving dating, sexual content, and vulgar language. Such behavior is impolite and violates the rules. Please take action and consider banning the account. The player is being toxic by using abusive and offensive language to insult and attack other people. This behavior is disrespectful and violates the rules. Please take action against this user.""
                )
                AddLog(""Report [""..reason..""] (""..i..""/""..reportsCount.."")"")
            end)
            
            task.wait(delay)
        end
    end

    if targetPlayer.Parent then
        AnnounceBan(target)
    else
        game:GetService(""Players"").PlayerRemoving:Connect(function(player)
            if player.Name == target then
                AnnounceBan(target)
            end
        end)
    end
    
    AddLog(""Report completed!"", Color3.fromRGB(100, 255, 100))
end

StartButton.MouseButton1Click:Connect(function()
    StartButton.Text = ""PROCESSING...""
    StartButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    
    coroutine.wrap(function()
        MassReport()
        
        StartButton.Text = ""🔥 START REPORT 🔥""
        StartButton.BackgroundColor3 = Color3.fromRGB(220, 20, 60)
    end)()
end)

local CreatorLabel = Instance.new(""TextLabel"")
CreatorLabel.Name = ""CreatorLabel""
CreatorLabel.Size = UDim2.new(1, -20, 0, 18)
CreatorLabel.Position = UDim2.new(0, 10, 1, -22)
CreatorLabel.BackgroundTransparency = 1
CreatorLabel.Font = Enum.Font.Gotham
CreatorLabel.Text = ""Created by: @Albonbv | v2.0 | Edited By Sinnerman""
CreatorLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
CreatorLabel.TextSize = 11
CreatorLabel.TextXAlignment = Enum.TextXAlignment.Right
CreatorLabel.Parent = MainFrame"
zBV4bp81,News Oct18 25,Newscaster0,Email,Saturday 18th of October 2025 03:55:55 PM CDT,".‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

H‎e‎y‎!‎ ‎T‎o‎d‎a‎y‎ ‎i‎s‎ ‎a‎n‎o‎t‎h‎e‎r‎ ‎d‎a‎y‎!‎

T‎r‎u‎m‎p‎ ‎C‎h‎o‎o‎s‎e‎s‎ ‎C‎h‎a‎l‎l‎e‎n‎g‎e‎r‎ ‎t‎o‎ ‎'‎W‎e‎a‎k‎ ‎a‎n‎d‎ ‎P‎a‎t‎h‎e‎t‎i‎c‎ ‎R‎I‎N‎O‎'‎ ‎T‎h‎o‎m‎a‎s‎ ‎M‎a‎s‎s‎i‎e‎
N‎e‎v‎e‎r‎ ‎T‎r‎u‎m‎p‎e‎r‎ ‎G‎e‎o‎r‎g‎e‎ ‎C‎o‎n‎w‎a‎y‎ ‎W‎e‎a‎r‎s‎ ‎'‎I‎ ‎A‎m‎ ‎A‎n‎t‎i‎f‎a‎'‎ ‎a‎t‎ ‎'‎N‎o‎ ‎K‎i‎n‎g‎s‎'‎ ‎P‎r‎o‎t‎e‎s‎t‎
M‎a‎h‎e‎r‎:‎ ‎S‎e‎e‎m‎s‎ ‎D‎e‎m‎s‎ ‎W‎a‎n‎t‎ ‎t‎o‎ ‎E‎n‎d‎ ‎C‎a‎p‎i‎t‎a‎l‎i‎s‎m‎,‎ ‎W‎h‎i‎c‎h‎ ‎I‎s‎ ‎a‎ ‎P‎i‎l‎l‎a‎r‎ ‎o‎f‎ ‎U‎.‎S‎.‎
M‎a‎h‎e‎r‎:‎ ‎T‎r‎u‎m‎p‎'‎s‎ ‎A‎p‎p‎r‎o‎a‎c‎h‎ ‎t‎o‎ ‎S‎a‎u‎d‎i‎s‎ ‎W‎o‎r‎k‎e‎d‎ ‎B‎e‎t‎t‎e‎r‎ ‎t‎h‎a‎n‎ ‎B‎i‎d‎e‎n‎ ‎A‎p‎p‎r‎o‎a‎c‎h‎
W‎A‎T‎C‎H‎:‎ ‎P‎a‎c‎i‎f‎i‎c‎ ‎S‎e‎a‎ ‎O‎t‎t‎e‎r‎ ‎H‎i‎j‎a‎c‎k‎s‎ ‎B‎o‎a‎r‎d‎s‎ ‎F‎r‎o‎m‎ ‎C‎a‎l‎i‎f‎o‎r‎n‎i‎a‎ ‎S‎u‎r‎f‎e‎r‎s‎
S‎t‎u‎d‎e‎n‎t‎ ‎U‎n‎d‎e‎t‎e‎r‎r‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎R‎e‎p‎r‎i‎m‎a‎n‎d‎ ‎f‎o‎r‎ ‎W‎e‎a‎r‎i‎n‎g‎ ‎H‎a‎t‎ ‎C‎h‎a‎r‎l‎i‎e‎ ‎K‎i‎r‎k‎ ‎G‎a‎v‎e‎ ‎H‎i‎m‎
W‎A‎T‎C‎H‎:‎ ‎F‎u‎r‎r‎i‎e‎s‎ ‎J‎o‎i‎n‎ ‎A‎n‎t‎i‎-‎T‎r‎u‎m‎p‎ ‎'‎N‎o‎ ‎K‎i‎n‎g‎s‎'‎ ‎P‎r‎o‎t‎e‎s‎t‎ ‎i‎n‎ ‎D‎.‎C‎.‎
W‎A‎T‎C‎H‎:‎ ‎S‎c‎h‎i‎f‎f‎ ‎D‎o‎d‎g‎e‎s‎ ‎Q‎u‎e‎s‎t‎i‎o‎n‎ ‎o‎n‎ ‎W‎h‎e‎t‎h‎e‎r‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎W‎i‎l‎l‎ ‎W‎i‎n‎ ‎i‎n‎ ‎M‎i‎d‎t‎e‎r‎m‎s‎
R‎e‎p‎o‎r‎t‎:‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎ ‎D‎o‎n‎o‎r‎s‎,‎ ‎A‎n‎t‎i‎-‎I‎s‎r‎a‎e‎l‎ ‎G‎r‎o‎u‎p‎s‎ ‎F‎u‎n‎d‎i‎n‎g‎ ‎'‎N‎o‎ ‎K‎i‎n‎g‎s‎'‎ ‎P‎r‎o‎t‎e‎s‎t‎s‎
V‎I‎D‎E‎O‎:‎ ‎S‎u‎s‎p‎e‎c‎t‎s‎ ‎V‎i‎o‎l‎e‎n‎t‎l‎y‎ ‎A‎m‎b‎u‎s‎h‎ ‎C‎A‎ ‎B‎u‎s‎i‎n‎e‎s‎s‎m‎a‎n‎ ‎t‎o‎ ‎S‎t‎e‎a‎l‎ ‎$‎6‎0‎0‎ ‎W‎a‎t‎c‎h‎
D‎e‎m‎ ‎R‎e‎p‎.‎ ‎T‎u‎r‎n‎s‎ ‎o‎n‎ ‎A‎I‎P‎A‎C‎,‎ ‎K‎e‎e‎p‎s‎ ‎T‎i‎e‎s‎ ‎t‎o‎ ‎I‎r‎a‎n‎ ‎R‎e‎g‎i‎m‎e‎-‎L‎i‎n‎k‎e‎d‎ ‎L‎o‎b‎b‎y‎ ‎N‎I‎A‎C‎
M‎e‎t‎a‎ ‎I‎n‎t‎r‎o‎d‎u‎c‎e‎s‎ ‎P‎a‎r‎e‎n‎t‎a‎l‎ ‎C‎o‎n‎t‎r‎o‎l‎s‎ ‎f‎o‎r‎ ‎A‎I‎ ‎I‎n‎t‎e‎r‎a‎c‎t‎i‎o‎n‎s‎ ‎w‎i‎t‎h‎ ‎T‎e‎e‎n‎s‎
P‎o‎r‎t‎u‎g‎a‎l‎'‎s‎ ‎P‎a‎r‎l‎i‎a‎m‎e‎n‎t‎ ‎G‎r‎e‎e‎n‎l‎i‎g‎h‎t‎s‎ ‎B‎u‎r‎q‎a‎ ‎B‎a‎n‎ ‎t‎o‎ ‎P‎r‎o‎t‎e‎c‎t‎ ‎W‎o‎m‎e‎n‎ ‎a‎n‎d‎ ‎G‎i‎r‎l‎s‎
C‎o‎n‎c‎e‎r‎n‎s‎ ‎G‎r‎o‎w‎ ‎o‎v‎e‎r‎ ‎T‎i‎k‎T‎o‎k‎'‎s‎ ‎A‎l‎g‎o‎r‎i‎t‎h‎m‎ ‎A‎f‎t‎e‎r‎ ‎Y‎e‎a‎r‎s‎ ‎a‎s‎ ‎a‎ ‎C‎h‎i‎n‎e‎s‎e‎ ‎P‎s‎y‎o‎p‎
W‎a‎t‎c‎h‎ ‎L‎i‎v‎e‎:‎ ‎D‎a‎y‎ ‎2‎ ‎o‎f‎ ‎t‎h‎e‎ ‎F‎a‎m‎i‎l‎y‎ ‎R‎e‎s‎e‎a‎r‎c‎h‎ ‎C‎o‎u‎n‎c‎i‎l‎'‎s‎ ‎P‎r‎a‎y‎ ‎V‎o‎t‎e‎ ‎S‎t‎a‎n‎d‎ ‎S‎u‎m‎m‎i‎t‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎

D‎o‎n‎ ‎L‎e‎m‎o‎n‎ ‎U‎r‎g‎e‎s‎ ‎B‎l‎a‎c‎k‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎ ‎t‎o‎ ‎A‎r‎m‎-‎u‎p‎ ‎t‎o‎ ‎F‎i‎g‎h‎t‎ ‎o‎f‎f‎ ‎I‎C‎E‎
D‎o‎n‎ ‎L‎e‎m‎o‎n‎ ‎U‎r‎g‎e‎s‎ ‎B‎l‎a‎c‎k‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎ ‎t‎o‎ ‎A‎r‎m‎-‎u‎p‎ ‎t‎o‎ ‎F‎i‎g‎h‎t‎ ‎o‎f‎f‎ ‎I‎C‎E‎
5‎,‎6‎9‎8‎
D‎N‎C‎ ‎C‎h‎a‎i‎r‎ ‎S‎a‎y‎s‎ ‎V‎o‎t‎e‎r‎s‎ ‎H‎a‎v‎e‎ ‎F‎o‎r‎g‎i‎v‎e‎n‎ ‎J‎a‎y‎ ‎J‎o‎n‎e‎s‎ ‎f‎o‎r‎ ‎V‎i‎o‎l‎e‎n‎t‎ ‎T‎e‎x‎t‎s‎,‎ ‎b‎u‎t‎ ‎P‎o‎l‎l‎s‎ ‎i‎n‎ ‎V‎i‎r‎g‎i‎n‎i‎a‎ ‎A‎G‎ ‎R‎a‎c‎e‎ ‎S‎a‎y‎ ‎
D‎N‎C‎ ‎C‎h‎a‎i‎r‎:‎ ‎V‎o‎t‎e‎r‎s‎ ‎H‎a‎v‎e‎ ‎F‎o‎r‎g‎i‎v‎e‎n‎ ‎J‎a‎y‎ ‎J‎o‎n‎e‎s‎ ‎f‎o‎r‎ ‎V‎i‎o‎l‎e‎n‎t‎ ‎T‎e‎x‎t‎s‎
1‎,‎0‎1‎6‎
H‎a‎m‎a‎s‎ ‎a‎n‎d‎ ‎I‎s‎l‎a‎m‎i‎c‎ ‎J‎i‎h‎a‎d‎ ‎D‎e‎f‎y‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎C‎e‎a‎s‎e‎f‎i‎r‎e‎,‎ ‎‘‎N‎e‎g‎o‎t‎i‎a‎t‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎H‎i‎m‎s‎e‎l‎f‎’‎;‎ ‎N‎o‎ ‎D‎i‎s‎a‎r‎m‎a‎m‎e‎n‎t‎ ‎C‎o‎
D‎e‎f‎y‎i‎n‎g‎ ‎T‎r‎u‎m‎p‎ ‎D‎e‎a‎l‎,‎ ‎H‎a‎m‎a‎s‎ ‎a‎n‎d‎ ‎I‎s‎l‎a‎m‎i‎c‎ ‎J‎i‎h‎a‎d‎ ‎R‎e‎f‎u‎s‎e‎ ‎D‎i‎s‎a‎r‎m‎a‎m‎e‎n‎t‎ ‎C‎o‎m‎m‎i‎t‎m‎e‎n‎t‎
7‎5‎3‎
N‎e‎v‎e‎r‎ ‎T‎r‎u‎m‎p‎e‎r‎ ‎G‎e‎o‎r‎g‎e‎ ‎C‎o‎n‎w‎a‎y‎ ‎W‎e‎a‎r‎s‎ ‎‘‎I‎ ‎A‎m‎ ‎A‎n‎t‎i‎f‎a‎’‎ ‎S‎h‎i‎r‎t‎ ‎a‎t‎ ‎‘‎N‎o‎ ‎K‎i‎n‎g‎s‎’‎ ‎P‎r‎o‎t‎e‎s‎t‎
N‎e‎v‎e‎r‎ ‎T‎r‎u‎m‎p‎e‎r‎ ‎G‎e‎o‎r‎g‎e‎ ‎C‎o‎n‎w‎a‎y‎ ‎W‎e‎a‎r‎s‎ ‎'‎I‎ ‎A‎m‎ ‎A‎n‎t‎i‎f‎a‎'‎ ‎a‎t‎ ‎'‎N‎o‎ ‎K‎i‎n‎g‎s‎'‎ ‎P‎r‎o‎t‎e‎s‎t‎
5‎8‎
F‎o‎r‎m‎e‎r‎ ‎N‎S‎A‎ ‎J‎o‎h‎n‎ ‎B‎o‎l‎t‎o‎n‎ ‎I‎n‎d‎i‎c‎t‎e‎d‎ ‎o‎v‎e‎r‎ ‎M‎i‎s‎h‎a‎n‎d‎l‎i‎n‎g‎ ‎o‎f‎ ‎C‎l‎a‎s‎s‎i‎f‎i‎e‎d‎ ‎D‎o‎c‎u‎m‎e‎n‎t‎s‎
F‎o‎r‎m‎e‎r‎ ‎N‎S‎A‎ ‎J‎o‎h‎n‎ ‎B‎o‎l‎t‎o‎n‎ ‎I‎n‎d‎i‎c‎t‎e‎d‎ ‎o‎v‎e‎r‎ ‎M‎i‎s‎h‎a‎n‎d‎l‎i‎n‎g‎ ‎o‎f‎ ‎C‎l‎a‎s‎s‎i‎f‎i‎e‎d‎ ‎D‎o‎c‎u‎m‎e‎n‎t‎s‎
4‎,‎8‎2‎2‎
W‎a‎t‎c‎h‎ ‎L‎i‎v‎e‎:‎ ‎A‎n‎t‎i‎-‎T‎r‎u‎m‎p‎ ‎‘‎N‎o‎ ‎K‎i‎n‎g‎s‎’‎ ‎P‎r‎o‎t‎e‎s‎t‎ ‎i‎n‎ ‎W‎a‎s‎h‎i‎n‎g‎t‎o‎n‎,‎ ‎D‎C‎
W‎a‎t‎c‎h‎ ‎L‎i‎v‎e‎:‎ ‎A‎n‎t‎i‎-‎T‎r‎u‎m‎p‎ ‎‘‎N‎o‎ ‎K‎i‎n‎g‎s‎'‎ ‎P‎r‎o‎t‎e‎s‎t‎ ‎i‎n‎ ‎W‎a‎s‎h‎i‎n‎g‎t‎o‎n‎,‎ ‎D‎C‎
7‎,‎8‎2‎8‎
T‎r‎u‎m‎p‎ ‎C‎o‎m‎m‎u‎t‎e‎s‎ ‎S‎e‎n‎t‎e‎n‎c‎e‎ ‎o‎f‎ ‎F‎o‎r‎m‎e‎r‎ ‎R‎e‎p‎.‎ ‎G‎e‎o‎r‎g‎e‎ ‎S‎a‎n‎t‎o‎s‎:‎ ‎‘‎H‎a‎v‎e‎ ‎a‎ ‎G‎r‎e‎a‎t‎ ‎L‎i‎f‎e‎’‎
T‎r‎u‎m‎p‎ ‎C‎o‎m‎m‎u‎t‎e‎s‎ ‎S‎e‎n‎t‎e‎n‎c‎e‎ ‎o‎f‎ ‎F‎o‎r‎m‎e‎r‎ ‎R‎e‎p‎.‎ ‎G‎e‎o‎r‎g‎e‎ ‎S‎a‎n‎t‎o‎s‎:‎ ‎'‎H‎a‎v‎e‎ ‎a‎ ‎G‎r‎e‎a‎t‎ ‎L‎i‎f‎e‎'‎
6‎,‎9‎6‎8‎
R‎e‎p‎o‎r‎t‎:‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎ ‎D‎o‎n‎o‎r‎s‎,‎ ‎A‎n‎t‎i‎-‎I‎s‎r‎a‎e‎l‎ ‎G‎r‎o‎u‎p‎s‎ ‎F‎u‎n‎d‎i‎n‎g‎ ‎‘‎N‎o‎ ‎K‎i‎n‎g‎s‎’‎ ‎P‎r‎o‎t‎e‎s‎t‎s‎
R‎e‎p‎o‎r‎t‎:‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎ ‎D‎o‎n‎o‎r‎s‎,‎ ‎A‎n‎t‎i‎-‎I‎s‎r‎a‎e‎l‎ ‎G‎r‎o‎u‎p‎s‎ ‎F‎u‎n‎d‎i‎n‎g‎ ‎'‎N‎o‎ ‎K‎i‎n‎g‎s‎'‎ ‎P‎r‎o‎t‎e‎s‎t‎s‎
1‎1‎0‎
D‎e‎m‎o‎c‎r‎a‎t‎ ‎F‎u‎n‎d‎ ‎R‎a‎i‎s‎i‎n‎g‎ ‎M‎a‎c‎h‎i‎n‎e‎ ‎i‎n‎ ‎H‎i‎g‎h‎ ‎G‎e‎a‎r‎ ‎A‎h‎e‎a‎d‎ ‎‘‎N‎o‎ ‎K‎i‎n‎g‎s‎ ‎D‎a‎y‎’‎ ‎P‎r‎o‎t‎e‎s‎t‎s‎
D‎e‎m‎o‎c‎r‎a‎t‎ ‎F‎u‎n‎d‎ ‎R‎a‎i‎s‎i‎n‎g‎ ‎M‎a‎c‎h‎i‎n‎e‎ ‎i‎n‎ ‎H‎i‎g‎h‎ ‎G‎e‎a‎r‎ ‎A‎h‎e‎a‎d‎ ‎'‎N‎o‎ ‎K‎i‎n‎g‎s‎ ‎D‎a‎y‎'‎ ‎P‎r‎o‎t‎e‎s‎t‎s‎
5‎,‎9‎8‎2‎
L‎o‎f‎g‎r‎e‎n‎:‎ ‎‘‎T‎r‎u‎m‎p‎ ‎I‎s‎ ‎O‎p‎e‎r‎a‎t‎i‎n‎g‎ ‎L‎i‎k‎e‎ ‎a‎ ‎M‎a‎f‎i‎a‎ ‎B‎o‎s‎s‎’‎
L‎o‎f‎g‎r‎e‎n‎:‎ ‎'‎T‎r‎u‎m‎p‎ ‎I‎s‎ ‎O‎p‎e‎r‎a‎t‎i‎n‎g‎ ‎L‎i‎k‎e‎ ‎a‎ ‎M‎a‎f‎i‎a‎ ‎B‎o‎s‎s‎'‎

N‎e‎g‎r‎o‎ ‎W‎h‎o‎ ‎S‎u‎r‎v‎i‎v‎e‎d‎ ‎2‎0‎0‎7‎ ‎M‎i‎n‎n‎e‎a‎p‎o‎l‎i‎s‎ ‎B‎r‎i‎d‎g‎e‎ ‎C‎o‎l‎l‎a‎p‎s‎e‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎T‎r‎y‎i‎n‎g‎ ‎t‎o‎ ‎J‎o‎i‎n‎ ‎I‎S‎I‎S‎.‎

A‎l‎l‎a‎h‎u‎ ‎a‎k‎b‎a‎r‎,‎ ‎y‎'‎a‎l‎l‎!‎


G‎o‎r‎i‎l‎l‎a‎ ‎G‎e‎t‎s‎ ‎L‎i‎f‎e‎ ‎A‎f‎t‎e‎r‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎W‎h‎i‎t‎e‎ ‎M‎a‎n‎ ‎a‎n‎d‎ ‎W‎o‎m‎a‎n‎ ‎a‎t‎ ‎F‎a‎m‎i‎l‎y‎ ‎D‎o‎l‎l‎a‎r‎ ‎i‎n‎ ‎D‎e‎a‎r‎b‎o‎r‎n‎.‎


Q‎u‎e‎e‎n‎s‎:‎ ‎N‎Y‎P‎D‎ ‎W‎r‎e‎c‎k‎s‎ ‎W‎o‎m‎a‎n‎'‎s‎ ‎S‎w‎i‎m‎m‎i‎n‎g‎ ‎P‎o‎o‎l‎ ‎A‎f‎t‎e‎r‎ ‎E‎n‎g‎a‎g‎i‎n‎g‎ ‎i‎n‎ ‎C‎a‎r‎ ‎C‎h‎a‎s‎e‎ ‎w‎i‎t‎h‎ ‎N‎e‎g‎r‎o‎.‎


H‎o‎m‎i‎n‎i‎f‎o‎r‎m‎e‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎S‎h‎o‎o‎t‎i‎n‎g‎ ‎C‎o‎p‎ ‎i‎n‎ ‎t‎h‎e‎ ‎F‎a‎c‎e‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

1‎0‎ ‎D‎a‎y‎ ‎W‎e‎a‎t‎h‎e‎r‎-‎ ‎D‎a‎l‎e‎,‎ ‎T‎e‎x‎a‎s‎
A‎s‎ ‎o‎f‎ ‎3‎:‎2‎7‎ ‎p‎m‎ ‎C‎D‎T‎
T‎o‎n‎i‎g‎h‎t‎
N‎i‎g‎h‎t‎
6‎4‎°‎
3‎%‎
W‎S‎W‎ ‎1‎4‎ ‎m‎p‎h‎
M‎a‎i‎n‎l‎y‎ ‎c‎l‎e‎a‎r‎ ‎s‎k‎i‎e‎s‎.‎ ‎L‎o‎w‎ ‎6‎4‎F‎.‎ ‎S‎W‎ ‎w‎i‎n‎d‎s‎ ‎s‎h‎i‎f‎t‎i‎n‎g‎ ‎t‎o‎ ‎N‎N‎W‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎2‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
5‎3‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
5‎:‎0‎0‎ ‎a‎m‎
M‎o‎o‎n‎s‎e‎t‎
5‎:‎2‎8‎ ‎p‎m‎
W‎a‎n‎i‎n‎g‎ ‎C‎r‎e‎s‎c‎e‎n‎t‎
S‎u‎n‎ ‎1‎9‎
S‎u‎n‎n‎y‎
8‎7‎°‎
/‎5‎4‎°‎
1‎%‎
M‎o‎n‎ ‎2‎0‎
S‎u‎n‎n‎y‎
9‎5‎°‎
/‎6‎7‎°‎
1‎%‎
T‎u‎e‎ ‎2‎1‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
8‎8‎°‎
/‎6‎4‎°‎
1‎5‎%‎
W‎e‎d‎ ‎2‎2‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎5‎°‎
/‎6‎4‎°‎
3‎%‎
T‎h‎u‎ ‎2‎3‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎9‎°‎
/‎6‎8‎°‎
8‎%‎
F‎r‎i‎ ‎2‎4‎
I‎s‎o‎l‎a‎t‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎8‎°‎
/‎6‎5‎°‎
3‎0‎%‎
S‎a‎t‎ ‎2‎5‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
8‎3‎°‎
/‎6‎2‎°‎
4‎6‎%‎
S‎u‎n‎ ‎2‎6‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎7‎°‎
/‎6‎6‎°‎
1‎7‎%‎
M‎o‎n‎ ‎2‎7‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎0‎°‎
/‎6‎6‎°‎
1‎9‎%‎
T‎u‎e‎ ‎2‎8‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎6‎°‎
/‎5‎7‎°‎
2‎4‎%‎
W‎e‎d‎ ‎2‎9‎
S‎u‎n‎n‎y‎
7‎9‎°‎
/‎4‎9‎°‎
4‎%‎
T‎h‎u‎ ‎3‎0‎
S‎u‎n‎n‎y‎
7‎8‎°‎
/‎5‎0‎°‎
5‎%‎
F‎r‎i‎ ‎3‎1‎
S‎u‎n‎n‎y‎
8‎1‎°‎
/‎5‎4‎°‎
2‎%‎
S‎a‎t‎ ‎0‎1‎
S‎u‎n‎n‎y‎
8‎3‎°‎
/‎5‎5‎°‎
1‎0‎%‎

.‎.‎.‎
C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎P‎a‎j‎e‎e‎t‎s‎ ‎o‎n‎ ‎t‎h‎e‎ ‎r‎u‎n‎.‎ ‎🏃🏾‍➡️‎️‎
.‎.‎.‎

S‎p‎o‎t‎i‎f‎y‎
S‎p‎o‎t‎i‎f‎y‎ ‎i‎s‎ ‎a‎ ‎s‎h‎i‎t‎t‎y‎ ‎S‎w‎e‎d‎i‎s‎h‎ ‎a‎u‎d‎i‎o‎ ‎s‎t‎r‎e‎a‎m‎i‎n‎g‎ ‎s‎e‎r‎v‎i‎c‎e‎ ‎t‎h‎a‎t‎ ‎c‎l‎a‎i‎m‎s‎ ‎t‎o‎ ‎a‎l‎l‎o‎w‎ ‎i‎t‎s‎ ‎u‎s‎e‎r‎s‎ ‎t‎o‎ ‎l‎i‎s‎t‎e‎n‎ ‎t‎o‎ ‎m‎u‎s‎i‎c‎ ‎f‎o‎r‎ ‎f‎r‎e‎e‎,‎ ‎b‎u‎t‎ ‎f‎o‎r‎g‎e‎t‎s‎ ‎t‎o‎ ‎m‎e‎n‎t‎i‎o‎n‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎ ‎s‎e‎r‎v‎i‎c‎e‎ ‎i‎n‎c‎l‎u‎d‎e‎s‎ ‎p‎r‎o‎m‎o‎t‎i‎o‎n‎a‎l‎ ‎L‎G‎B‎T‎ ‎p‎r‎i‎d‎e‎ ‎a‎d‎s‎,‎ ‎a‎r‎t‎i‎s‎t‎s‎ ‎b‎a‎t‎t‎l‎i‎n‎g‎ ‎i‎n‎ ‎a‎ ‎p‎a‎y‎-‎t‎o‎-‎w‎i‎n‎ ‎w‎a‎r‎ ‎o‎v‎e‎r‎ ‎t‎h‎e‎i‎r‎ ‎d‎o‎g‎s‎h‎i‎t‎ ‎s‎o‎n‎g‎s‎,‎ ‎a‎n‎d‎ ‎7‎3‎%‎ ‎u‎s‎e‎l‎e‎s‎s‎ ‎b‎l‎o‎a‎t‎.‎ ‎T‎h‎e‎i‎r‎ ‎s‎o‎f‎t‎w‎a‎r‎e‎ ‎t‎a‎k‎e‎s‎ ‎u‎p‎ ‎h‎u‎n‎d‎r‎e‎d‎s‎ ‎o‎f‎ ‎m‎e‎g‎a‎b‎y‎t‎e‎s‎ ‎o‎f‎ ‎s‎p‎a‎c‎e‎,‎ ‎w‎i‎t‎h‎ ‎a‎ ‎l‎a‎g‎g‎y‎ ‎a‎n‎d‎ ‎s‎l‎o‎w‎ ‎U‎I‎ ‎f‎u‎l‎l‎ ‎o‎f‎ ‎a‎d‎s‎,‎ ‎e‎a‎s‎i‎l‎y‎ ‎a‎s‎s‎-‎r‎a‎p‎i‎n‎g‎ ‎y‎o‎u‎r‎ ‎R‎A‎M‎.‎ ‎T‎h‎e‎ ‎s‎t‎r‎e‎a‎m‎i‎n‎g‎ ‎q‎u‎a‎l‎i‎t‎y‎ ‎i‎s‎ ‎w‎o‎r‎s‎e‎ ‎t‎h‎a‎n‎ ‎a‎ ‎b‎r‎o‎k‎e‎n‎ ‎r‎a‎d‎i‎o‎ ‎f‎r‎o‎m‎ ‎t‎h‎e‎ ‎1‎9‎8‎0‎s‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎s‎o‎n‎g‎s‎ ‎t‎h‎e‎m‎s‎e‎l‎v‎e‎s‎ ‎s‎o‎u‎n‎d‎ ‎l‎i‎k‎e‎ ‎t‎h‎e‎y‎ ‎w‎e‎r‎e‎ ‎r‎e‎c‎o‎r‎d‎e‎d‎ ‎o‎n‎ ‎a‎n‎ ‎a‎u‎t‎o‎-‎t‎u‎n‎e‎d‎ ‎t‎o‎a‎s‎t‎e‎r‎ ‎f‎u‎l‎l‎ ‎o‎f‎ ‎c‎o‎m‎p‎r‎e‎s‎s‎i‎o‎n‎ ‎a‎n‎d‎ ‎d‎i‎s‎t‎o‎r‎t‎i‎o‎n‎.‎ ‎R‎a‎r‎e‎l‎y‎ ‎w‎i‎l‎l‎ ‎y‎o‎u‎ ‎f‎i‎n‎d‎ ‎a‎n‎y‎t‎h‎i‎n‎g‎ ‎o‎f‎ ‎w‎o‎r‎t‎h‎.‎

I‎n‎ ‎g‎e‎n‎e‎r‎a‎l‎,‎ ‎i‎t‎'‎s‎ ‎m‎u‎c‎h‎ ‎m‎o‎r‎e‎ ‎w‎o‎r‎t‎h‎w‎h‎i‎l‎e‎ ‎t‎o‎ ‎d‎o‎w‎n‎l‎o‎a‎d‎ ‎y‎o‎u‎r‎ ‎m‎u‎s‎i‎c‎ ‎a‎n‎d‎ ‎l‎i‎s‎t‎e‎n‎ ‎t‎o‎ ‎i‎t‎ ‎w‎i‎t‎h‎ ‎a‎n‎ ‎a‎u‎d‎i‎o‎ ‎p‎l‎a‎y‎e‎r‎,‎ ‎r‎a‎t‎h‎e‎r‎ ‎t‎h‎a‎n‎ ‎u‎s‎e‎ ‎s‎o‎f‎t‎w‎a‎r‎e‎ ‎t‎h‎a‎t‎ ‎d‎r‎a‎i‎n‎s‎ ‎a‎s‎ ‎m‎u‎c‎h‎ ‎b‎a‎t‎t‎e‎r‎y‎ ‎a‎n‎d‎ ‎m‎o‎n‎e‎y‎ ‎a‎s‎ ‎p‎o‎s‎s‎i‎b‎l‎e‎,‎ ‎i‎n‎s‎t‎e‎a‎d‎ ‎o‎f‎ ‎a‎c‎t‎u‎a‎l‎l‎y‎ ‎p‎l‎a‎y‎i‎n‎g‎ ‎m‎u‎s‎i‎c‎ ‎f‎i‎l‎e‎s‎ ‎f‎o‎r‎ ‎y‎o‎u‎.‎ ‎A‎l‎t‎e‎r‎n‎a‎t‎i‎v‎e‎l‎y‎,‎ ‎y‎o‎u‎ ‎c‎o‎u‎l‎d‎ ‎u‎s‎e‎ ‎Y‎o‎u‎T‎u‎b‎e‎ ‎M‎u‎s‎i‎c‎ ‎o‎n‎ ‎a‎ ‎w‎e‎b‎ ‎b‎r‎o‎w‎s‎e‎r‎ ‎a‎n‎d‎ ‎j‎u‎s‎t‎ ‎s‎w‎i‎t‎c‎h‎ ‎y‎o‎u‎r‎ ‎a‎d‎b‎l‎o‎c‎k‎e‎r‎ ‎o‎n‎.‎.‎.‎ ‎b‎u‎t‎ ‎t‎h‎e‎n‎ ‎a‎g‎a‎i‎n‎,‎ ‎Y‎o‎u‎T‎u‎b‎e‎ ‎M‎u‎s‎i‎c‎ ‎h‎a‎s‎ ‎h‎o‎r‎r‎i‎b‎l‎e‎ ‎a‎u‎d‎i‎o‎ ‎q‎u‎a‎l‎i‎t‎y‎ ‎a‎s‎ ‎w‎e‎l‎l‎.‎

(‎(‎ ‎""‎W‎A‎N‎T‎ ‎A‎ ‎B‎R‎E‎A‎K‎ ‎F‎R‎O‎M‎ ‎T‎H‎E‎ ‎M‎U‎S‎I‎C‎?‎ ‎H‎E‎R‎E‎'‎S‎ ‎A‎N‎ ‎A‎D‎ ‎T‎H‎E‎N‎""‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

T‎h‎e‎ ‎W‎i‎n‎d‎o‎w‎ ‎i‎s‎ ‎a‎ ‎s‎o‎n‎g‎ ‎c‎y‎c‎l‎e‎ ‎c‎o‎m‎p‎o‎s‎e‎d‎ ‎b‎y‎ ‎A‎r‎t‎h‎u‎r‎ ‎S‎u‎l‎l‎i‎v‎a‎n‎ ‎w‎i‎t‎h‎ ‎w‎o‎r‎d‎s‎ ‎b‎y‎ ‎A‎l‎f‎r‎e‎d‎,‎ ‎L‎o‎r‎d‎ ‎T‎e‎n‎n‎y‎s‎o‎n‎.‎ ‎W‎r‎i‎t‎t‎e‎n‎ ‎i‎n‎ ‎1‎8‎6‎7‎ ‎a‎n‎d‎ ‎p‎u‎b‎l‎i‎s‎h‎e‎d‎ ‎i‎n‎ ‎1‎8‎7‎1‎,‎ ‎t‎h‎e‎ ‎c‎y‎c‎l‎e‎ ‎c‎o‎n‎s‎i‎s‎t‎s‎ ‎o‎f‎ ‎t‎w‎e‎l‎v‎e‎ ‎p‎o‎e‎m‎s‎ ‎b‎y‎ ‎T‎e‎n‎n‎y‎s‎o‎n‎,‎ ‎e‎l‎e‎v‎e‎n‎ ‎o‎f‎ ‎w‎h‎i‎c‎h‎ ‎w‎e‎r‎e‎ ‎s‎e‎t‎ ‎t‎o‎ ‎m‎u‎s‎i‎c‎ ‎b‎y‎ ‎S‎u‎l‎l‎i‎v‎a‎n‎,‎ ‎a‎s‎ ‎w‎e‎l‎l‎ ‎a‎s‎ ‎t‎h‎i‎s‎ ‎o‎n‎e‎ ‎i‎l‎l‎u‎s‎t‎r‎a‎t‎i‎o‎n‎,‎ ‎t‎i‎t‎l‎e‎d‎ ‎""‎A‎ ‎R‎e‎v‎e‎r‎i‎e‎""‎,‎ ‎d‎r‎a‎w‎n‎ ‎i‎n‎ ‎1‎8‎6‎8‎ ‎b‎y‎ ‎J‎o‎h‎n‎ ‎E‎v‎e‎r‎e‎t‎t‎ ‎M‎i‎l‎l‎a‎i‎s‎ ‎a‎n‎d‎ ‎d‎e‎p‎i‎c‎t‎i‎n‎g‎ ‎a‎ ‎f‎e‎m‎a‎l‎e‎ ‎f‎i‎g‎u‎r‎e‎ ‎l‎o‎o‎k‎i‎n‎g‎ ‎p‎e‎n‎s‎i‎v‎e‎l‎y‎ ‎o‎u‎t‎ ‎o‎f‎ ‎a‎ ‎w‎i‎n‎d‎o‎w‎.‎ ‎T‎e‎n‎n‎y‎s‎o‎n‎ ‎h‎a‎d‎ ‎a‎ ‎d‎r‎a‎f‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎t‎e‎x‎t‎ ‎b‎y‎ ‎F‎e‎b‎r‎u‎a‎r‎y‎ ‎1‎8‎6‎7‎,‎ ‎b‎u‎t‎ ‎h‎e‎ ‎w‎a‎s‎ ‎d‎i‎s‎s‎a‎t‎i‎s‎f‎i‎e‎d‎ ‎w‎i‎t‎h‎ ‎h‎i‎s‎ ‎w‎o‎r‎k‎ ‎a‎n‎d‎ ‎r‎e‎l‎u‎c‎t‎a‎n‎t‎ ‎t‎o‎ ‎p‎u‎b‎l‎i‎s‎h‎ ‎i‎t‎.‎ ‎I‎n‎ ‎A‎u‎g‎u‎s‎t‎ ‎1‎8‎6‎7‎,‎ ‎T‎e‎n‎n‎y‎s‎o‎n‎ ‎h‎a‎d‎ ‎r‎e‎v‎i‎s‎e‎d‎ ‎t‎h‎e‎ ‎w‎o‎r‎d‎s‎,‎ ‎b‎u‎t‎ ‎h‎e‎ ‎r‎e‎f‎u‎s‎e‎d‎ ‎t‎o‎ ‎a‎l‎l‎o‎w‎ ‎p‎u‎b‎l‎i‎c‎a‎t‎i‎o‎n‎ ‎u‎n‎t‎i‎l‎ ‎N‎o‎v‎e‎m‎b‎e‎r‎ ‎1‎8‎7‎0‎.‎ ‎B‎y‎ ‎t‎h‎i‎s‎ ‎t‎i‎m‎e‎,‎ ‎h‎o‎w‎e‎v‎e‎r‎,‎ ‎M‎i‎l‎l‎a‎i‎s‎ ‎h‎a‎d‎ ‎d‎i‎s‎p‎o‎s‎e‎d‎ ‎o‎f‎ ‎a‎l‎l‎ ‎t‎h‎e‎ ‎d‎r‎a‎w‎i‎n‎g‎s‎ ‎h‎e‎ ‎h‎a‎d‎ ‎p‎r‎e‎p‎a‎r‎e‎d‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎p‎u‎b‎l‎i‎c‎a‎t‎i‎o‎n‎ ‎e‎x‎c‎e‎p‎t‎ ‎f‎o‎r‎ ‎""‎A‎ ‎R‎e‎v‎e‎r‎i‎e‎""‎,‎ ‎a‎n‎d‎ ‎h‎e‎ ‎w‎a‎s‎ ‎t‎o‎o‎ ‎b‎u‎s‎y‎ ‎t‎o‎ ‎w‎o‎r‎k‎ ‎a‎n‎y‎ ‎f‎u‎r‎t‎h‎e‎r‎ ‎o‎n‎ ‎t‎h‎e‎ ‎p‎r‎o‎j‎e‎c‎t‎.‎

D‎r‎a‎w‎i‎n‎g‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎J‎o‎h‎n‎ ‎E‎v‎e‎r‎e‎t‎t‎ ‎M‎i‎l‎l‎a‎i‎s‎;‎ ‎r‎e‎s‎t‎o‎r‎e‎d‎ ‎b‎y‎ ‎A‎d‎a‎m‎ ‎C‎u‎e‎r‎d‎e‎n‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎

H‎e‎l‎l‎o‎.‎ ‎🤵🏻‍♂️ ‎I‎ ‎a‎m‎ ‎A‎g‎e‎n‎t‎ ‎J‎o‎n‎e‎s‎.‎ ‎W‎e‎l‎l‎,‎ ‎J‎u‎l‎i‎o‎ ‎t‎h‎e‎ ‎s‎p‎i‎c‎ ‎h‎a‎s‎ ‎b‎e‎e‎n‎ ‎a‎r‎r‎e‎s‎t‎e‎d‎ ‎b‎y‎ ‎t‎h‎e‎ ‎b‎o‎r‎d‎e‎r‎ ‎p‎a‎t‎r‎o‎l‎,‎ ‎a‎n‎d‎ ‎i‎s‎ ‎n‎o‎w‎ ‎i‎n‎ ‎h‎a‎n‎d‎c‎u‎f‎f‎s‎.‎ ‎I‎t‎'‎s‎ ‎t‎i‎m‎e‎ ‎f‎o‎r‎ ‎m‎e‎ ‎t‎o‎ ‎p‎e‎r‎f‎o‎r‎m‎ ‎t‎h‎e‎ ‎e‎x‎e‎c‎u‎t‎i‎o‎n‎.‎ ‎N‎E‎X‎T‎ ‎T‎I‎M‎E‎:‎ ‎J‎U‎L‎I‎O‎ ‎T‎H‎E‎ ‎S‎P‎I‎C‎ ‎V‎S‎ ‎A‎G‎E‎N‎T‎ ‎J‎O‎N‎E‎S‎!‎ ‎T‎H‎E‎ ‎F‎I‎N‎A‎L‎ ‎B‎A‎T‎T‎L‎E‎!‎ ‎🧔🏾‍♂️🔫👨🏻"
k4XJuLLH,Untitled,JNoon,JSON,Saturday 18th of October 2025 03:42:33 PM CDT,"{
  ""PresetNotes"": """",
  ""Items"": {
    ""ExamineKeys"": false,
    ""AddSignalPistolToSpec"": false,
    ""WeaponHeatOff"": false,
    ""SMGToHolster"": false,
    ""PistolToMain"": false,
    ""AllExaminedItems"": false,
    ""EquipRigsWithArmors"": false,
    ""RemoveSecureContainerFilters"": false,
    ""MisfireChance"": 1,
    ""FragmentMult"": 1,
    ""HeatFactor"": 1,
    ""ExamineTime"": 1,
    ""MalfunctChanceMult"": 1,
    ""WeightChanger"": 1,
    ""ItemPriceMult"": 1,
    ""EnableCurrency"": false,
    ""RubStack"": 500000,
    ""DollarStack"": 50000,
    ""GPStack"": 20,
    ""EuroStack"": 50000,
    ""AmmoLoadSpeed"": 1,
    ""LootExp"": 1,
    ""EnableItems"": false,
    ""ExamineExp"": 1,
    ""AmmoStacks"": {
      ""MarksmanRound"": 40,
      ""RifleRound"": 60,
      ""ShotgunRound"": 20,
      ""PistolRound"": 50
    },
    ""AmmoSwitch"": false,
    ""EnableKeys"": false,
    ""RemoveRaidRestr"": false,
    ""RemoveBackpacksRestrictions"": false,
    ""AvoidSingleKeys"": false,
    ""AvoidMarkedKeys"": false,
    ""AvoidResidential"": false,
    ""AvoidOddKeys"": false,
    ""KeyUseMult"": 1,
    ""KeycardUseMult"": 1,
    ""KeyDurabilityThreshold"": 40,
    ""IDChanger"": false,
    ""NoGearPenalty"": false,
    ""IDDefault"": """",
    ""IDParent"": """",
    ""IDFilter"": """",
    ""IDPrice"": """",
    ""InfiniteKeys"": false,
    ""InfiniteKeycards"": false,
    ""RaidDrop"": false
  },
  ""Hideout"": {
    ""EnableStash"": false,
    ""Stash"": {
      ""StashTUE"": 72,
      ""StashLvl4"": 68,
      ""StashLvl3"": 50,
      ""StashLvl2"": 40,
      ""StashLvl1"": 30
    },
    ""Regeneration"": {
      ""OfflineRegen"": false,
      ""HealthRegen"": 1,
      ""HideoutHealth"": false,
      ""HideoutEnergy"": false,
      ""HideoutHydration"": false,
      ""HydrationRegen"": 1,
      ""EnergyRegen"": 1
    },
    ""WaterFilterTime"": 325,
    ""BitcoinTime"": 720,
    ""MaxBitcoins"": 25,
    ""NoFuelMult"": 1,
    ""ScavCasePrice"": 1,
    ""ScavCaseTime"": 1,
    ""HideoutConstMult"": 1,
    ""HideoutProdMult"": 1,
    ""WaterFilterRate"": 66,
    ""GPUBoostRate"": 2.6,
    ""AirFilterRate"": 1,
    ""CultistTime"": 1,
    ""CultistMaxRewards"": 5,
    ""RemoveConstructionsRequirements"": false,
    ""RemoveConstructionsFIRRequirements"": true,
    ""RemoveSkillRequirements"": false,
    ""RemoveTraderLevelRequirements"": true,
    ""EnableHideout"": true,
    ""FuelConsumptionRate"": 0.75
  },
  ""Traders"": {
    ""Fence"": {
      ""EnableFence"": true,
      ""ArmorDurability_Max"": 60,
      ""GunDurability_Max"": 60,
      ""ArmorDurability_Min"": 35,
      ""GunDurability_Min"": 35,
      ""PriceMult"": 1.2,
      ""PremiumAmountOnSale"": 50,
      ""PresetCount"": 22,
      ""StockTime_Min"": 50,
      ""StockTime_Max"": 150,
      ""AmountOnSale"": 250,
      ""PresetMult"": 2,
      ""Blacklist"": """"
    },
    ""RemoveTradeLimits"": false,
    ""QuestRedeemDefault"": 48,
    ""QuestRedeemUnheard"": 72,
    ""TraderMarkup"": {
      ""Ragman"": 62,
      ""Peacekeeper"": 45,
      ""Fence"": 40,
      ""Prapor"": 50,
      ""Jaeger"": 60,
      ""Ref"": 56,
      ""Mechanic"": 56,
      ""Skier"": 49,
      ""Therapist"": 63
    },
    ""TraderSell"": {
      ""Ragman"": 1,
      ""Peacekeeper"": 1,
      ""Prapor"": 1,
      ""Jaeger"": 1,
      ""Mechanic"": 1,
      ""Skier"": 1,
      ""Ref"": 1,
      ""Therapist"": 1
    },
    ""MinDurabSell"": 60,
    ""RemoveTimeCondition"": false,
    ""AllQuestsAvailable"": false,
    ""RemoveBarterOffers"": false,
    ""RemoveCurrencyOffers"": false,
    ""IncreaseAssort"": false,
    ""UnlockQuestAssort"": false,
    ""EnableTraders"": true,
    ""FIRRestrictsQuests"": false,
    ""TradersLvl4"": false,
    ""FIRTrade"": false,
    ""UnlockJaeger"": false,
    ""UnlockRef"": false
  },
  ""Loot"": {
    ""Airdrops"": {
      ""Mixed"": {
        ""ArmorMin"": 1,
        ""ArmorMax"": 5,
        ""BarterMin"": 15,
        ""BarterMax"": 35,
        ""PresetMin"": 3,
        ""PresetMax"": 5,
        ""CratesMin"": 1,
        ""CratesMax"": 2
      },
      ""Medical"": {
        ""ArmorMin"": 0,
        ""ArmorMax"": 0,
        ""BarterMin"": 25,
        ""BarterMax"": 45,
        ""PresetMin"": 0,
        ""PresetMax"": 0,
        ""CratesMin"": 0,
        ""CratesMax"": 0
      },
      ""Barter"": {
        ""ArmorMin"": 0,
        ""ArmorMax"": 0,
        ""BarterMin"": 20,
        ""BarterMax"": 35,
        ""PresetMin"": 0,
        ""PresetMax"": 0,
        ""CratesMin"": 0,
        ""CratesMax"": 0
      },
      ""Weapon"": {
        ""ArmorMin"": 3,
        ""ArmorMax"": 6,
        ""BarterMin"": 11,
        ""BarterMax"": 22,
        ""PresetMin"": 6,
        ""PresetMax"": 8,
        ""CratesMin"": 0,
        ""CratesMax"": 2
      },
      ""Sandbox_air"": 13,
      ""Streets_air"": 13,
      ""AirtimeMin"": 1,
      ""AirtimeMax"": 5,
      ""Lighthouse_air"": 20,
      ""Bigmap_air"": 20,
      ""Interchange_air"": 20,
      ""Shoreline_air"": 20,
      ""Reserve_air"": 10,
      ""Woods_air"": 25
    },
    ""EnableLoot"": false,
    ""Locations"": {
      ""Streets"": {
        ""Loose"": 3,
        ""Container"": 1
      },
      ""Sandbox"": {
        ""Loose"": 2.8,
        ""Container"": 1
      },
      ""SandboxHard"": {
        ""Loose"": 2.8,
        ""Container"": 1
      },
      ""Lighthouse"": {
        ""Loose"": 2.8,
        ""Container"": 1
      },
      ""Bigmap"": {
        ""Loose"": 2.5,
        ""Container"": 1
      },
      ""Interchange"": {
        ""Loose"": 2.8,
        ""Container"": 1
      },
      ""FactoryDay"": {
        ""Loose"": 3.5,
        ""Container"": 1
      },
      ""Laboratory"": {
        ""Loose"": 2.8,
        ""Container"": 1
      },
      ""Shoreline"": {
        ""Loose"": 3.7,
        ""Container"": 1
      },
      ""Reserve"": {
        ""Loose"": 2.9,
        ""Container"": 1
      },
      ""Woods"": {
        ""Loose"": 1.9,
        ""Container"": 1
      },
      ""FactoryNight"": {
        ""Loose"": 3.5,
        ""Container"": 1
      },
      ""AllContainers"": false
    }
  },
  ""Player"": {
    ""EnableFatigue"": false,
    ""PMCStats"": {
      ""MaxHydration"": 100,
      ""MaxEnergy"": 100
    },
    ""CharXP"": {
      ""ScavKill"": 80,
      ""ScavHMult"": 1.1,
      ""PMCKill"": 175,
      ""PMCHMult"": 1.2
    },
    ""RaidMult"": {
      ""MIA"": 1,
      ""Runner"": 0.5,
      ""Survived"": 2.5,
      ""Killed"": 1
    },
    ""EnableStats"": false,
    ""Skills"": {
      ""SkillFatigueReset"": 200,
      ""SkillFreshEffect"": 1.3,
      ""SkillFPoints"": 1,
      ""SkillPointsBeforeFatigue"": 1,
      ""SkillMinEffect"": 0.0001,
      ""SkillFatiguePerPoint"": 0.6
    },
    ""FallDamage"": true,
    ""BlackStomach"": 5,
    ""HydrationLoss"": 1,
    ""EnergyLoss"": 1,
    ""EnableHealth"": false,
    ""SkillProgMult"": 0.4,
    ""Health"": {
      ""LeftArm"": 60,
      ""RightArm"": 60,
      ""Head"": 35,
      ""Chest"": 85,
      ""Stomach"": 70,
      ""LeftLeg"": 65,
      ""RightLeg"": 65
    },
    ""WeaponSkillMult"": 1,
    ""EnablePlayer"": true,
    ""DiedHealth"": {
      ""Saveeffects"": true,
      ""Savehealth"": true,
      ""Health_blacked"": 0.1,
      ""Health_death"": 0.3
    },
    ""MaxStaminaLegs"": 115,
    ""MaxStaminaHands"": 80,
    ""EnableStaminaHands"": false,
    ""EnableStaminaLegs"": false,
    ""RegenStaminaLegs"": 4.5,
    ""RegenStaminaHands"": 2.1,
    ""JumpConsumption"": 14,
    ""LayToStand"": 20,
    ""CrouchToStand"": 11,
    ""Standing"": 1,
    ""LayingDown"": 0.15,
    ""Crouching"": 0.75,
    ""UnlimitedStamina"": false
  },
  ""Raids"": {
    ""SandboxAccessLevel"": 20,
    ""RaidTime"": 0,
    ""SaveQuestItems"": false,
    ""Exfils"": {
      ""CarSandbox"": 5000,
      ""CarShoreline"": 5000,
      ""CoopPaidSandbox"": 5000,
      ""CoopPaidShoreline"": 5000,
      ""CoopPaidStreets"": 5000,
      ""CoopPaidLighthouse"": 5000,
      ""CarLighthouse"": 5000,
      ""CarExtractTime"": 60,
      ""ArmorExtract"": true,
      ""CoopPaid"": true,
      ""FenceGift"": false,
      ""CoopPaidInterchange"": 5000,
      ""CoopPaidWoods"": 5000,
      ""CoopPaidReserve"": 5000,
      ""NoBackpack"": true,
      ""FreeCoop"": true,
      ""CarInterchange"": 5000,
      ""CarWoods"": 5000,
      ""CarStreets"": 5000,
      ""CarCustoms"": 5000,
      ""ExtendedExtracts"": false,
      ""ChanceExtracts"": false,
      ""GearExtract"": false
    },
    ""NoRunThrough"": true,
    ""Timeacceleration"": 7,
    ""SafeExit"": false,
    ""SaveGearAfterDeath"": false,
    ""RaidEvents"": {
      ""DisableEvents"": false,
      ""KillaFactoryChance"": 100,
      ""CultistBossesChance"": 35,
      ""GoonsFactoryChance"": 60,
      ""CultistBosses"": true,
      ""GoonsFactory"": true,
      ""BossesOnCustoms"": false,
      ""BossesOnHealthResort"": false,
      ""TagillaInterchange"": false,
      ""HealthResortIncludeGuards"": false,
      ""HoundsWoods"": 5,
      ""HoundsCustoms"": 5,
      ""SkierFighters"": 4,
      ""PeaceFighters"": 15,
      ""Christmas"": false,
      ""NonSeasonalQuests"": false,
      ""Halloween"": false,
      ""DisableZombies"": false,
      ""DisableHalloweenAIFriendly"": false,
      ""RandomInfectionLevel"": false,
      ""IncludeStreetBosses"": false,
      ""KillaFactory"": false,
      ""BossesOnReserve"": false,
      ""RaidersEverywhere"": false,
      ""GlukharLabs"": false
    },
    ""LabInsurance"": true,
    ""EnableRaids"": true,
    ""Removelabkey"": false,
    ""EnableCarCoop"": true,
    ""ForceBTRFriendly"": false,
    ""ForceTransitStash"": false,
    ""TransitHeight"": 2,
    ""TransitWidth"": 5,
    ""ForceBTRStash"": false,
    ""EnableBTR"": false,
    ""BTRCoverPrice"": 30000,
    ""BTRTaxiPrice"": 7000,
    ""UsecMult"": 1.5,
    ""BearMult"": 1,
    ""ScavMult"": 0.8,
    ""BTRHeight"": 2,
    ""BTRWidth"": 5,
    ""Season"": 0,
    ""ForceSeason"": false,
    ""RaidStartup"": {
      ""EnableRaidStartup"": true,
      ""TimeBeforeDeployLocal"": 5,
      ""AIAmount"": 3,
      ""SaveLoot"": true,
      ""AIDifficulty"": 1,
      ""MIAEndofRaid"": true,
      ""TaggedAndCursed"": false,
      ""EnableBosses"": false,
      ""ScavWars"": true
    }
  },
  ""Fleamarket"": {
    ""EnableFleaConditions"": false,
    ""EnablePlayerOffers"": false,
    ""FleaFIR"": false,
    ""FleaNoFIRSell"": false,
    ""EventOffers"": false,
    ""SellOffersAmount"": 10,
    ""FleaConditions"": {
      ""FleaFood_Min"": 5,
      ""FleaArmor_Min"": 5,
      ""FleaFood_Max"": 100,
      ""FleaArmor_Max"": 100,
      ""FleaMedical_Min"": 60,
      ""FleaSpec_Min"": 2,
      ""FleaMedical_Max"": 100,
      ""FleaSpec_Max"": 100,
      ""FleaWeapons_Min"": 60,
      ""FleaVests_Min"": 5,
      ""FleaKeys_Min"": 97,
      ""FleaWeapons_Max"": 100,
      ""FleaVests_Max"": 100,
      ""FleaKeys_Max"": 100
    },
    ""OverrideOffers"": false,
    ""FleaMarketLevel"": 15,
    ""FleaBlacklist"": null,
    ""DisableBSGList"": false,
    ""EnableFleamarket"": false,
    ""Sell_mult"": 1.24,
    ""Tradeoffer_max"": 1,
    ""Rep_loss"": 0.03,
    ""Rep_gain"": 0.02,
    ""Tradeoffer_min"": 0,
    ""Sell_chance"": 50,
    ""EnableFees"": true,
    ""DynamicOffers"": {
      ""ExpireThreshold"": 1400,
      ""BundleOfferChance"": 6,
      ""Stack_min"": 10,
      ""PerOffer_min"": 7,
      ""Stack_max"": 600,
      ""PerOffer_max"": 30,
      ""Eurooffers"": 8,
      ""Dollaroffers"": 14,
      ""Roubleoffers"": 78,
      ""NonStack_min"": 1,
      ""Time_min"": 6,
      ""Price_min"": 0.8,
      ""NonStack_max"": 10,
      ""Time_max"": 60,
      ""Price_max"": 1.2
    }
  },
  ""Services"": {
    ""RepairBox"": {
      ""NoRandomRepair"": false,
      ""OpGunRepair"": false,
      ""ArmorSkillMult"": 0.05,
      ""WeaponMaintenanceSkillMult"": 0.6,
      ""IntellectSkillMultWeaponKit"": 0.045,
      ""IntellectSkillMultArmorKit"": 0.03,
      ""IntellectSkillLimitTraders"": 0.6,
      ""IntellectSkillLimitKit"": 0.6,
      ""OpArmorRepair"": false,
      ""RepairMult"": 1
    },
    ""EnableHealMarkup"": true,
    ""EnableInsurance"": false,
    ""EnableTimeOverride"": false,
    ""FreeHealLvl"": 50,
    ""FreeHealRaids"": 30,
    ""ReturnChancePrapor"": 85,
    ""ReturnChanceTherapist"": 95,
    ""InsuranceInterval"": 600,
    ""InsuranceTimeOverride"": 30,
    ""InsuranceAttachmentChance"": 10,
    ""TherapistStorageTime"": 144,
    ""PraporStorageTime"": 96,
    ""Prapor_Max"": 36,
    ""Prapor_Min"": 24,
    ""Therapist_Max"": 24,
    ""Therapist_Min"": 12,
    ""TherapistLvl1"": 1,
    ""TherapistLvl2"": 1.1,
    ""TherapistLvl3"": 1.2,
    ""TherapistLvl4"": 1.35,
    ""InsuranceMultTherapistLvl1"": 20,
    ""InsuranceMultTherapistLvl2"": 21,
    ""InsuranceMultTherapistLvl3"": 22,
    ""InsuranceMultTherapistLvl4"": 23,
    ""InsuranceMultPraporLvl1"": 16,
    ""InsuranceMultPraporLvl2"": 17,
    ""InsuranceMultPraporLvl3"": 18,
    ""InsuranceMultPraporLvl4"": 19,
    ""EnableServices"": true,
    ""EnableRepair"": false,
    ""ClothesAnySide"": true,
    ""ClothesLevelUnlock"": true,
    ""ClothesFree"": false
  },
  ""Quests"": {
    ""EnableQuestsMisc"": false,
    ""QuestCostMult"": 1,
    ""QuestRepToZero"": false,
    ""DailyQuests"": {
      ""MinKillsLR3"": 5,
      ""MaxKillsLR3"": 20,
      ""MinKillsLR2"": 5,
      ""MaxKillsLR2"": 15,
      ""MinItems"": 2,
      ""MaxItems"": 5,
      ""Extracts"": 3,
      ""Types"": 6,
      ""Reroll"": 2,
      ""Spread"": 0.5,
      ""MinKillsLR1"": 2,
      ""MaxKillsLR1"": 4,
      ""Access"": 5,
      ""QuestAmount"": 3,
      ""Lifespan"": 1440,
      ""Levels"": ""1,10,20,30,40,50,60"",
      ""Experience"": ""1000,2000,8000,13000,19000,24000,30000"",
      ""ItemsReward"": ""2,4,5,5,5,5,5"",
      ""Reputation"": ""0.01,0.01,0.02,0.02,0.03,0.03,0.03"",
      ""SkillPoint"": ""10,15,20,25,30,35,40"",
      ""SkillChance"": ""0,0.01,0.05,0.1,0.1,0.15,0.15"",
      ""Roubles"": ""11000,20000,32000,45000,58000,70000,82000"",
      ""GPcoins"": ""3,3,6,6,8,8,10""
    },
    ""WeeklyQuests"": {
      ""MinKillsLR3"": 20,
      ""MaxKillsLR3"": 40,
      ""MinKillsLR2"": 15,
      ""MaxKillsLR2"": 40,
      ""MinItems"": 2,
      ""MaxItems"": 5,
      ""Extracts"": 10,
      ""Types"": 6,
      ""Reroll"": 0,
      ""Spread"": 0.5,
      ""MinKillsLR1"": 10,
      ""MaxKillsLR1"": 20,
      ""Access"": 15,
      ""QuestAmount"": 1,
      ""Lifespan"": 10080,
      ""Levels"": ""1,10,20,30,40,50,60"",
      ""Experience"": ""5000,15000,27000,80000,142000,220000,290000"",
      ""ItemsReward"": ""4,5,5,6,6,7,7"",
      ""Reputation"": ""0.02,0.03,0.04,0.04,0.05,0.05,0.05"",
      ""SkillPoint"": ""25,35,45,50,55,60,65"",
      ""SkillChance"": ""0,0.05,0.1,0.15,0.2,0.2,0.2"",
      ""Roubles"": ""20000,50000,175000,350000,540000,710000,880000"",
      ""GPcoins"": ""10,10,16,16,20,30,35""
    },
    ""EnableQuests"": false,
    ""ScavQuests"": {
      ""MinKillsLR2"": 3,
      ""MaxKillsLR2"": 15,
      ""MinItems"": 2,
      ""MaxItems"": 5,
      ""Extracts"": 3,
      ""Types"": 2,
      ""Reroll"": 0,
      ""Spread"": 0.5,
      ""MinKillsLR1"": 1,
      ""MaxKillsLR1"": 3,
      ""Access"": 1,
      ""QuestAmount"": 1,
      ""Lifespan"": 1440,
      ""Levels"": ""1,10,20,30,40,50,60"",
      ""Experience"": ""0,0,0,0,0,0,0"",
      ""ItemsReward"": ""2,3,3,3,3,4,4"",
      ""Reputation"": ""0.02,0.02,0.03,0.03,0.04,0.04,0.05"",
      ""SkillPoint"": ""10,15,20,25,30,35,40"",
      ""SkillChance"": ""0,0,0,0,0,0,0"",
      ""Roubles"": ""11000,20000,32000,45000,58000,70000,82000"",
      ""GPcoins"": ""1,1,2,2,4,4,5""
    }
  },
  ""CSM"": {
    ""EnableCases"": true,
    ""EnableSecureCases"": true,
    ""CustomPocket"": false,
    ""Pockets"": {
      ""SpecGKeychain"": false,
      ""SpecSimpleWallet"": false,
      ""SpecWZWallet"": false,
      ""SpecKeycardHolder"": false,
      ""SpecKeytool"": false,
      ""SpecInjectorCase"": false,
      ""SpecSlots"": 3,
      ""FourthWidth"": 1,
      ""FourthHeight"": 1,
      ""ThirdWidth"": 1,
      ""ThirdHeight"": 1,
      ""SecondWidth"": 1,
      ""SecondHeight"": 1,
      ""FirstWidth"": 1,
      ""FirstHeight"": 1
    },
    ""Cases"": {
      ""GKeychain"": {
        ""Height"": 2,
        ""Width"": 2,
        ""Filter"": false
      },
      ""KeycardHolderCase"": {
        ""Height"": 5,
        ""Width"": 5,
        ""Filter"": false
      },
      ""InjectorCase"": {
        ""Height"": 3,
        ""Width"": 3,
        ""Filter"": false
      },
      ""Holodilnick"": {
        ""Height"": 8,
        ""Width"": 8,
        ""Filter"": false
      },
      ""PistolCase"": {
        ""Height"": 3,
        ""Width"": 4,
        ""Filter"": false
      },
      ""DocumentsCase"": {
        ""Height"": 6,
        ""Width"": 6,
        ""Filter"": false
      },
      ""Keytool"": {
        ""Height"": 6,
        ""Width"": 6,
        ""Filter"": false
      },
      ""SiccCase"": {
        ""Height"": 5,
        ""Width"": 5,
        ""Filter"": false
      },
      ""ThiccWeaponCase"": {
        ""Height"": 15,
        ""Width"": 6,
        ""Filter"": false
      },
      ""ThiccItemsCase"": {
        ""Height"": 14,
        ""Width"": 14,
        ""Filter"": false
      },
      ""MedicineCase"": {
        ""Height"": 7,
        ""Width"": 7,
        ""Filter"": false
      },
      ""DogtagCase"": {
        ""Height"": 10,
        ""Width"": 10,
        ""Filter"": false
      },
      ""MagazineCase"": {
        ""Height"": 7,
        ""Width"": 7,
        ""Filter"": false
      },
      ""AmmunitionCase"": {
        ""Height"": 8,
        ""Width"": 8,
        ""Filter"": false
      },
      ""WeaponCase"": {
        ""Height"": 10,
        ""Width"": 6,
        ""Filter"": false
      },
      ""ItemsCase"": {
        ""Height"": 8,
        ""Width"": 8,
        ""Filter"": false
      },
      ""GrenadeCase"": {
        ""Height"": 8,
        ""Width"": 8,
        ""Filter"": false
      },
      ""WZWallet"": {
        ""Height"": 2,
        ""Width"": 2,
        ""Filter"": false
      },
      ""SimpleWallet"": {
        ""Height"": 2,
        ""Width"": 2,
        ""Filter"": false
      },
      ""MoneyCase"": {
        ""Height"": 7,
        ""Width"": 7,
        ""Filter"": false
      },
      ""LuckyScav"": {
        ""Height"": 14,
        ""Width"": 14,
        ""Filter"": false
      },
      ""StreamerCase"": {
        ""Height"": 11,
        ""Width"": 7,
        ""Filter"": false
      },
      ""ArmorPlateCase"": {
        ""Height"": 12,
        ""Width"": 8,
        ""Filter"": false
      }
    },
    ""SecureContainers"": {
      ""KappaWidth"": 4,
      ""AlphaHeight"": 2,
      ""KappaHeight"": 4,
      ""AlphaWidth"": 2,
      ""GammaWidth"": 3,
      ""GammaHeight"": 3,
      ""GammaTUEWidth"": 4,
      ""GammaTUEHeight"": 4,
      ""BetaHeight"": 2,
      ""BetaWidth"": 3,
      ""EpsilonWidth"": 4,
      ""EpsilonHeight"": 2,
      ""DevHeight"": 3,
      ""DevWidth"": 3,
      ""WaistPouchWidth"": 2,
      ""WaistPouchHeight"": 2
    },
    ""EnableCSM"": true
  },
  ""Scav"": {
    ""SCAVPockets"": {
      ""FourthHeight"": 1,
      ""FourthWidth"": 1,
      ""ThirdHeight"": 1,
      ""ThirdWidth"": 1,
      ""SecondHeight"": 1,
      ""SecondWidth"": 1,
      ""FirstHeight"": 1,
      ""FirstWidth"": 1
    },
    ""HostileBosses"": false,
    ""FriendlyBosses"": false,
    ""CarBaseStanding"": 0.25,
    ""ScavTimer"": 60,
    ""ScavCustomPockets"": false,
    ""ScavLab"": true,
    ""FriendlyScavs"": false,
    ""HostileScavs"": false,
    ""StandingFriendlyKill"": -0.04,
    ""StandingPMCKill"": 0.01,
    ""Health"": {
      ""LeftArm"": 160,
      ""RightArm"": 160,
      ""Head"": 135,
      ""Chest"": 185,
      ""Stomach"": 170,
      ""LeftLeg"": 165,
      ""RightLeg"": 165
    },
    ""EnableScavHealth"": true,
    ""EnableScav"": true,
    ""ScavStats"": {
      ""MaxHydration"": 100,
      ""MaxEnergy"": 100
    },
    ""EnableStats"": false
  },
  ""Bots"": {
    ""AIChance"": {
      ""KolontayStreets"": 25,
      ""KolontayGZ"": 45,
      ""ForcePartisan"": false,
      ""PartisanCustoms"": 30,
      ""PartisanShoreline"": 30,
      ""PartisanWoods"": 30,
      ""PartisanLighthouse"": 30,
      ""Kaban"": 30,
      ""TagillaNight"": 30,
      ""TrioLighthouse"": 30,
      ""TrioShoreline"": 30,
      ""TrioWoods"": 30,
      ""Zryachiy"": 100,
      ""CultistCustoms"": 40,
      ""CultistShoreline"": 15,
      ""Trio"": 30,
      ""RaiderLab"": 45,
      ""RaiderReserve"": 35,
      ""CultistFactory"": 20,
      ""CultistWoods"": 15,
      ""CultistGroundZero"": 44,
      ""Rogue"": 70,
      ""Tagilla"": 30,
      ""Shturman"": 30,
      ""Glukhar"": 35,
      ""Sanitar"": 30,
      ""Reshala"": 30,
      ""Killa"": 35
    },
    ""ArmorDurab"": {
      ""PMCMax"": 100,
      ""FollowerMax"": 100,
      ""BossMax"": 100,
      ""MarksmanMax"": 100,
      ""ScavMax"": 100,
      ""RogueMax"": 100,
      ""RaiderMax"": 100,
      ""PMCMin"": 90,
      ""FollowerMin"": 90,
      ""BossMin"": 100,
      ""MarksmanMin"": 90,
      ""ScavMin"": 50,
      ""RogueMin"": 90,
      ""RaiderMin"": 90
    },
    ""WeaponDurab"": {
      ""PMCMax"": 100,
      ""FollowerMax"": 100,
      ""BossMax"": 100,
      ""MarksmanMax"": 100,
      ""ScavMax"": 100,
      ""RogueMax"": 100,
      ""RaiderMax"": 100,
      ""PMCMin"": 95,
      ""FollowerMin"": 80,
      ""BossMin"": 80,
      ""MarksmanMin"": 60,
      ""ScavMin"": 85,
      ""RogueMin"": 80,
      ""RaiderMin"": 80
    },
    ""EnableBots"": false
  },
  ""PMC"": {
    ""NameOverride"": false,
    ""ForceCustomWaves"": false,
    ""CustomWaveChance"": 100,
    ""PMCChance"": {
      ""PMCNamePrefix"": 1,
      ""PMCAllNamePrefix"": 1,
      ""PMCLooseWep"": 15,
      ""HostileSamePMC"": 85,
      ""HostilePMC"": 100,
      ""PMCWepEnhance"": 25
    },
    ""LevelUpMargin"": 10,
    ""LevelDownMargin"": 70,
    ""PMCNameList"": ""Sinistar\r\nMorgan\r\nMayoringram\r\nAssAssin\r\nGhostFenixx\r\nG10orgos\r\nFortis\r\nDaveyB0y\r\nMMX\r\nTabi\r\nJojo\r\njvs\r\ndspider\r\nHenny\r\nMylu\r\nXen0Xys\r\nShruggzilla\r\nDoddsy\r\nMoffed\r\nBeagle\r\nthorncp\r\nEagle\r\nBroCC\r\nCthulhu\r\nKaryash\r\nlilthicccums\r\nTobi\r\nEmilia\r\nParka4our\r\nDonmohnke\r\nSingularity\r\nTogay\r\nGodHimself\r\nThomaszhrets\r\nAsianLover69\r\nRodyChodes\r\nl6uc6if6er\r\nbllt\r\nSaltyDroog\r\nM_conniptions\r\ntagilla\r\nTricolorHen061\r\nWaffentrager\r\nHabit\r\nUmsirqualquerai\r\nshep\r\nCannabis\r\ntrappussy\r\nShiro\r\nChomp\r\nTheSparta\r\nLostQuasar\r\nssh\r\nLacyway\r\nKronzky\r\njbs4bmx\r\naleves\r\nFontaine\r\nCWX\r\nTwistedGA\r\nLimbo\r\nSamSWAT\r\nRevingly\r\nKattomine\r\nFox\r\nGamenator\r\nCarl\r\njrdenny1\r\nDecompresS\r\nCats\r\nAtonicX\r\nsyra\r\nStako\r\nCheiftan\r\nelectric\r\nImTheRickHere\r\nmajorlier\r\nbearPhone\r\nMasterChief\r\nThe2ndarbiter\r\ncowkiller19\r\nKarma\r\nJen14owns\r\nRubMyRubber\r\nFrumorn\r\nBuyingGF\r\nRekty\r\nRebrix\r\nDatPhatAsian\r\nChinaski\r\nChameleon\r\nNeCzar\r\nPonderingOrb\r\nSerakym\r\nArsanthania\r\nYT_Mark\r\nBeDaLek\r\nNukey\r\nOwl\r\nJoshtheOG\r\nbatkiller\r\nVampireKitten\r\nBadwolf_54\r\nJustin\r\nAgentMoulder\r\nLayerofBlubber\r\nD3ovm\r\nkiobu\r\n7AmatoR7\r\nKAcidi\r\nZ3R0\r\nSpiral\r\nXsos\r\nVortex\r\nalphakiller\r\nbiohazard\r\nli3raa\r\nDalamadur\r\ncentollojames\r\nlennyrod\r\nZooey\r\nMaoci\r\nMarchwin\r\nMiki__\r\nInnerMiddle\r\npersistent\r\nYarik85\r\nDeadLeaves\r\nSenko\r\nNexus4880\r\nSlickboi\r\nTallanX\r\ntrippy\r\nguidot\r\nJanuary\r\nCloudy\r\nMrElmoEN\r\nNekoKami\r\nDOKDOR\r\ndeathbricks\r\nHustlesofter\r\nVenican\r\nNickMillion\r\nJuncker\r\nPhantomInTime\r\nVox\r\nTraveler\r\nnimbul\r\nEreshkigal\r\nSerWolfik"",
    ""NamesEnable"": false,
    ""ChancesEnable"": true,
    ""PMCRatio"": 50,
    ""AItoPMC"": {
      ""CursedToPMC"": 20,
      ""SnipertoPMC"": 0,
      ""ScavToPMC"": 30,
      ""ScavToPMCFactory"": 13,
      ""RogueToPMC"": 5,
      ""RaiderToPMC"": 7
    },
    ""EnableConvert"": false,
    ""DisableLowLevelPMC"": false,
    ""LootableMelee"": true,
    ""EnablePMC"": true
  },
  ""Custom"": {
    ""EnableCustom"": false,
    ""LoggerIntoServer"": false,
    ""DisableSPTFriend"": false,
    ""DisableCommando"": false,
    ""DisablePMCMessages"": false,
    ""CustomCheck1"": false,
    ""CustomCheck2"": false,
    ""CustomCheck3"": false,
    ""CustomCheck4"": false,
    ""CustomNumber1"": 12345,
    ""CustomNumber2"": 12345,
    ""CustomNumber3"": 12345,
    ""CustomNumber4"": 12345
  }
}"
muDVcSDu,Turbine control,CdoubleOK,Lua,Saturday 18th of October 2025 03:27:50 PM CDT,"local modem = peripheral.find(""modem"")
local monitor = peripheral.wrap(""front"")

monitor.setCursorPos(1,1)
monitor.clear()
monitor.setTextScale(0.5)
monitor.setBackgroundColor(colors.cyan)
monitor.setCursorPos(4, 1)
monitor.write(""Turbine #1"")
monitor.setCursorPos(1, 3)
monitor.write(""Fuel Feed"")
monitor.setCursorPos(1, 4)
monitor.write(""-=-=-=-=-=-=-=-"")
monitor.setCursorPos(1, 7)
monitor.write(""Clutch"")
monitor.setCursorPos(1, 8)
monitor.write(""-=-=-=-=-=-=-=-"")
monitor.setCursorPos(1, 11)
monitor.write(""Output"")
monitor.setCursorPos(1, 12)
monitor.write(""-=-=-=-=-=-=-=-"")
term.clear()
term.setCursorPos(1,1)
print(""Running..."")
 
function fuelFeed(side, mode, bgc)
  rs.setOutput(side, true)
  modem.transmit(3,4,mode)
  monitor.setCursorPos(1,1)
  monitor.setCursorPos(1, 5)
  monitor.clearLine()
  monitor.blit(mode, ""0000000"", bgc)
  monitor.setCursorPos(1, 5)
  sleep(1)
  rs.setOutput(side, false)
end
 
function shift(side, mode, bgc)
  rs.setOutput(side, true)
  modem.transmit(2,3,mode)
  monitor.setCursorPos(1, 9)
  monitor.clearLine()
  monitor.blit(mode, ""0000000"", bgc)
  monitor.setCursorPos(1, 9)
  sleep(1)
end

function battCall(channel)
  modem.open(channel)
  local event, modemSide, senderChannel, replyChannel, message, senderDistance = os.pullEvent(""modem_message"")
  term.setCursorPos(1,2)
  term.clearLine(1,2)
  print(message)
  modem.close(channel)
  return(message)
end

local function outputCall(channel)
    modem.open(channel)
    local event, modemSide, senderChannel, replyChannel, message, senderDistance = os.pullEvent(""modem_message"")
    monitor.setCursorPos(1,13)
	monitor.clearLine()
    monitor.write(message)
    modem.close(channel)
end

while rs.getInput(""front"") == false
do

local batt = battCall(4) 
local speed = rs.getAnalogInput(""right"")

outputCall(5)

if speed == 0
then
	shift (""top"", ""Offline"", ""eeeeeee"")
	
	if batt <= 25
	then
	fuelFeed(""bottom"", ""Engaged"", ""ddddddd"")
	end
	
	if batt >= 30
	then
	fuelFeed(""top"", ""Offline"", ""eeeeeee"")
 end
	
 sleep(5)
	
elseif speed >= 1 and speed <= 14
then
	shift (""top"", ""Low RPM"", ""1111111"")

  if batt >= 30
  then
  fuelFeed(""top"", ""Offline"", ""eeeeeee"")
  end
	
elseif speed >= 15
then
	shift (""back"", ""Engaged"", ""ddddddd"")

  if batt >= 30
  then
  fuelFeed(""top"", ""Offline"", ""eeeeeee"")
  end
end

end
"
x9N7EHDw,Untitled,Hedgehoguser,JSON,Saturday 18th of October 2025 03:20:13 PM CDT,"[
  {
    ""model"": ""gpt-4o"",
    ""provider"": ""OpenAI"",
    ""context_length"": ""128K"",
    ""input_price_per_1M_tokens"": 0.005,
    ""output_price_per_1M_tokens"": 0.015
  },
  {
    ""model"": ""gpt-4o-2024-08-06"",
    ""provider"": ""OpenAI"",
    ""context_length"": ""128K"",
    ""input_price_per_1M_tokens"": 0.0025,
    ""output_price_per_1M_tokens"": 0.01
  },
  {
    ""model"": ""gpt-4o-mini"",
    ""provider"": ""OpenAI"",
    ""context_length"": ""128K"",
    ""input_price_per_1M_tokens"": 0.00015,
    ""output_price_per_1M_tokens"": 0.0006
  },
  {
    ""model"": ""gpt-4o-2024-05-13"",
    ""provider"": ""OpenAI"",
    ""context_length"": ""128K"",
    ""input_price_per_1M_tokens"": 0.005,
    ""output_price_per_1M_tokens"": 0.015
  },
  {
    ""model"": ""gpt-4-turbo-2024-04-09"",
    ""provider"": ""OpenAI"",
    ""context_length"": ""128K"",
    ""input_price_per_1M_tokens"": 0.01,
    ""output_price_per_1M_tokens"": 0.03
  },
  {
    ""model"": ""gpt-4"",
    ""provider"": ""OpenAI"",
    ""context_length"": ""8K"",
    ""input_price_per_1M_tokens"": 0.03,
    ""output_price_per_1M_tokens"": 0.06
  },
  {
    ""model"": ""gpt-4-32k"",
    ""provider"": ""OpenAI"",
    ""context_length"": ""32K"",
    ""input_price_per_1M_tokens"": 0.06,
    ""output_price_per_1M_tokens"": 0.12
  },
  {
    ""model"": ""gpt-3.5-turbo-0125"",
    ""provider"": ""OpenAI"",
    ""context_length"": ""16K"",
    ""input_price_per_1M_tokens"": 0.0005,
    ""output_price_per_1M_tokens"": 0.0015
  },
  {
    ""model"": ""gpt-3.5-turbo-instruct"",
    ""provider"": ""OpenAI"",
    ""context_length"": ""4K"",
    ""input_price_per_1M_tokens"": 0.0015,
    ""output_price_per_1M_tokens"": 0.002
  },
  {
    ""model"": ""gpt-4-0125-preview"",
    ""provider"": ""OpenAI"",
    ""context_length"": ""128K"",
    ""input_price_per_1M_tokens"": 0.01,
    ""output_price_per_1M_tokens"": 0.03
  },
  {
    ""model"": ""gpt-4-1106-preview"",
    ""provider"": ""OpenAI"",
    ""context_length"": ""128K"",
    ""input_price_per_1M_tokens"": 0.01,
    ""output_price_per_1M_tokens"": 0.03
  },
  {
    ""model"": ""gpt-4-vision-preview"",
    ""provider"": ""OpenAI"",
    ""context_length"": ""128K"",
    ""input_price_per_1M_tokens"": 0.01,
    ""output_price_per_1M_tokens"": 0.03
  },
  {
    ""model"": ""gpt-3.5-turbo-1106"",
    ""provider"": ""OpenAI"",
    ""context_length"": ""4K"",
    ""input_price_per_1M_tokens"": 0.001,
    ""output_price_per_1M_tokens"": 0.002
  },
  {
    ""model"": ""gpt-3.5-turbo-0613"",
    ""provider"": ""OpenAI"",
    ""context_length"": ""4K"",
    ""input_price_per_1M_tokens"": 0.0015,
    ""output_price_per_1M_tokens"": 0.002
  },
  {
    ""model"": ""gpt-3.5-turbo-16k-0613"",
    ""provider"": ""OpenAI"",
    ""context_length"": ""4K"",
    ""input_price_per_1M_tokens"": 0.003,
    ""output_price_per_1M_tokens"": 0.004
  },
  {
    ""model"": ""gpt-3.5-turbo-0301"",
    ""provider"": ""OpenAI"",
    ""context_length"": ""4K"",
    ""input_price_per_1M_tokens"": 0.0015,
    ""output_price_per_1M_tokens"": 0.002
  },
  {
    ""model"": ""gemini-pro"",
    ""provider"": ""Google"",
    ""context_length"": ""32K"",
    ""input_price_per_1M_tokens"": 0.0005,
    ""output_price_per_1M_tokens"": 0.0015
  },
  {
    ""model"": ""gemini-1.5-pro"",
    ""provider"": ""Google"",
    ""context_length"": ""1M"",
    ""input_price_per_1M_tokens"": 0.0035,
    ""output_price_per_1M_tokens"": 0.0105
  },
  {
    ""model"": ""gemini-flash-1.5"",
    ""provider"": ""Google"",
    ""context_length"": ""2.8M"",
    ""input_price_per_1M_tokens"": 0.000075,
    ""output_price_per_1M_tokens"": 0.0003
  },
  {
    ""model"": ""mistral-large"",
    ""provider"": ""Mistral"",
    ""context_length"": ""32K"",
    ""input_price_per_1M_tokens"": 0.008,
    ""output_price_per_1M_tokens"": 0.024
  },
  {
    ""model"": ""mistral-medium"",
    ""provider"": ""Mistral"",
    ""context_length"": ""32K"",
    ""input_price_per_1M_tokens"": 0.0027,
    ""output_price_per_1M_tokens"": 0.0081
  },
  {
    ""model"": ""mistral-small"",
    ""provider"": ""Mistral"",
    ""context_length"": ""32K"",
    ""input_price_per_1M_tokens"": 0.002,
    ""output_price_per_1M_tokens"": 0.006
  },
  {
    ""model"": ""claude-3-opus"",
    ""provider"": ""Anthropic"",
    ""context_length"": ""200K"",
    ""input_price_per_1M_tokens"": 0.015,
    ""output_price_per_1M_tokens"": 0.075
  },
  {
    ""model"": ""claude-2.1"",
    ""provider"": ""Anthropic"",
    ""context_length"": ""200K"",
    ""input_price_per_1M_tokens"": 0.008,
    ""output_price_per_1M_tokens"": 0.024
  },
  {
    ""model"": ""claude-2.0"",
    ""provider"": ""Anthropic"",
    ""context_length"": ""100K"",
    ""input_price_per_1M_tokens"": 0.008,
    ""output_price_per_1M_tokens"": 0.024
  },
  {
    ""model"": ""claude-instant-1.2"",
    ""provider"": ""Anthropic"",
    ""context_length"": ""100K"",
    ""input_price_per_1M_tokens"": 0.0008,
    ""output_price_per_1M_tokens"": 0.0024
  },
  {
    ""model"": ""pplx-70b-online"",
    ""provider"": ""Perplexity"",
    ""context_length"": ""4K"",
    ""input_price_per_1M_tokens"": 0.001,
    ""output_price_per_1M_tokens"": 0.001
  },
  {
    ""model"": ""pplx-7b-online"",
    ""provider"": ""Perplexity"",
    ""context_length"": ""4K"",
    ""input_price_per_1M_tokens"": 0.0002,
    ""output_price_per_1M_tokens"": 0.0002
  },
  {
    ""model"": ""mixtral-8x7b"",
    ""provider"": ""Groq"",
    ""context_length"": ""32K"",
    ""input_price_per_1M_tokens"": 0.00027,
    ""output_price_per_1M_tokens"": 0.00027
  },
  {
    ""model"": ""llama-3-70b"",
    ""provider"": ""Groq"",
    ""context_length"": ""8K"",
    ""input_price_per_1M_tokens"": 0.00059,
    ""output_price_per_1M_tokens"": 0.00079
  },
  {
    ""model"": ""llama-3-8b"",
    ""provider"": ""Groq"",
    ""context_length"": ""8K"",
    ""input_price_per_1M_tokens"": 0.00005,
    ""output_price_per_1M_tokens"": 0.0001
  },
  {
    ""model"": ""gemma-7b"",
    ""provider"": ""Groq"",
    ""context_length"": ""8K"",
    ""input_price_per_1M_tokens"": 0.0001,
    ""output_price_per_1M_tokens"": 0.0001
  },
  {
    ""model"": ""deepseek-v2"",
    ""provider"": ""DeepSeek"",
    ""context_length"": ""32K"",
    ""input_price_per_1M_tokens"": 0.00014,
    ""output_price_per_1M_tokens"": 0.00028
  },
  {
    ""model"": ""llama-3-8b-instruct"",
    ""provider"": ""Deepinfra"",
    ""context_length"": ""8K"",
    ""input_price_per_1M_tokens"": 0.00008,
    ""output_price_per_1M_tokens"": 0.00008
  },
  {
    ""model"": ""llama-3.1-70b-instruct"",
    ""provider"": ""Deepinfra"",
    ""context_length"": ""128K"",
    ""input_price_per_1M_tokens"": 0.00052,
    ""output_price_per_1M_tokens"": 0.00075
  },
  {
    ""model"": ""llama-3.1-8b-instruct"",
    ""provider"": ""Deepinfra"",
    ""context_length"": ""128K"",
    ""input_price_per_1M_tokens"": 0.00009,
    ""output_price_per_1M_tokens"": 0.00009
  },
  {
    ""model"": ""llama-3-70b-instruct"",
    ""provider"": ""Deepinfra"",
    ""context_length"": ""8K"",
    ""input_price_per_1M_tokens"": 0.00059,
    ""output_price_per_1M_tokens"": 0.00079
  },
  {
    ""model"": ""gemma-7b-it"",
    ""provider"": ""Deepinfra"",
    ""context_length"": ""8K"",
    ""input_price_per_1M_tokens"": 0.00007,
    ""output_price_per_1M_tokens"": 0.00007
  },
  {
    ""model"": ""llama-3.1-405b-instruct"",
    ""provider"": ""Fireworks"",
    ""context_length"": ""128K"",
    ""input_price_per_1M_tokens"": 0.003,
    ""output_price_per_1M_tokens"": 0.003
  },
  {
    ""model"": ""openchat-7b"",
    ""provider"": ""OpenChat"",
    ""context_length"": ""8K"",
    ""input_price_per_1M_tokens"": 0.00013,
    ""output_price_per_1M_tokens"": 0.00013
  },
  {
    ""model"": ""command-r-plus"",
    ""provider"": ""Cohere"",
    ""context_length"": ""128K"",
    ""input_price_per_1M_tokens"": 0.003,
    ""output_price_per_1M_tokens"": 0.015
  },
  {
    ""model"": ""command-r"",
    ""provider"": ""Cohere"",
    ""context_length"": ""4K"",
    ""input_price_per_1M_tokens"": 0.0005,
    ""output_price_per_1M_tokens"": 0.0015
  },
  {
    ""model"": ""claude-3-haiku"",
    ""provider"": ""AWS"",
    ""context_length"": ""32K"",
    ""input_price_per_1M_tokens"": 0.00025,
    ""output_price_per_1M_tokens"": 0.00125
  },
  {
    ""model"": ""claude-3-sonnet"",
    ""provider"": ""AWS"",
    ""context_length"": ""32K"",
    ""input_price_per_1M_tokens"": 0.003,
    ""output_price_per_1M_tokens"": 0.015
  },
  {
    ""model"": ""mistral-7b"",
    ""provider"": ""AWS"",
    ""context_length"": ""32K"",
    ""input_price_per_1M_tokens"": 0.00015,
    ""output_price_per_1M_tokens"": 0.0002
  },
  {
    ""model"": ""command"",
    ""provider"": ""AWS"",
    ""context_length"": ""32K"",
    ""input_price_per_1M_tokens"": 0.0015,
    ""output_price_per_1M_tokens"": 0.002
  },
  {
    ""model"": ""jurassic-2-ultra"",
    ""provider"": ""AWS"",
    ""context_length"": ""32K"",
    ""input_price_per_1M_tokens"": 0.0188,
    ""output_price_per_1M_tokens"": 0.0188
  },
  {
    ""model"": ""jurassic-2-mid"",
    ""provider"": ""AWS"",
    ""context_length"": ""32K"",
    ""input_price_per_1M_tokens"": 0.0125,
    ""output_price_per_1M_tokens"": 0.0125
  },
  {
    ""model"": ""titan-text-lite"",
    ""provider"": ""AWS"",
    ""context_length"": ""32K"",
    ""input_price_per_1M_tokens"": 0.0003,
    ""output_price_per_1M_tokens"": 0.0004
  },
  {
    ""model"": ""titan-text-express"",
    ""provider"": ""AWS"",
    ""context_length"": ""32K"",
    ""input_price_per_1M_tokens"": 0.0008,
    ""output_price_per_1M_tokens"": 0.0016
  },
  {
    ""model"": ""claude-instant"",
    ""provider"": ""AWS"",
    ""context_length"": ""32K"",
    ""input_price_per_1M_tokens"": 0.0008,
    ""output_price_per_1M_tokens"": 0.0024
  },
  {
    ""model"": ""llama-2-chat-13b"",
    ""provider"": ""AWS"",
    ""context_length"": ""32K"",
    ""input_price_per_1M_tokens"": 0.00075,
    ""output_price_per_1M_tokens"": 0.001
  },
  {
    ""model"": ""command-light"",
    ""provider"": ""AWS"",
    ""context_length"": ""32K"",
    ""input_price_per_1M_tokens"": 0.0003,
    ""output_price_per_1M_tokens"": 0.0006
  },
  {
    ""model"": ""llama-2-chat-70b"",
    ""provider"": ""AWS"",
    ""context_length"": ""32K"",
    ""input_price_per_1M_tokens"": 0.00195,
    ""output_price_per_1M_tokens"": 0.00256
  },
  {
    ""model"": ""mistral-8x7b"",
    ""provider"": ""AWS"",
    ""context_length"": ""32K"",
    ""input_price_per_1M_tokens"": 0.00045,
    ""output_price_per_1M_tokens"": 0.0007
  }
]
"
WBvcD0E7,refuel,Timmitei,Lua,Saturday 18th of October 2025 02:20:58 PM CDT,"-- This script refuels a turtle using a lava source directly below it.

-- Prerequisites:
-- 1. The turtle must have a bucket in its selected inventory slot.
-- 2. The turtle must be placed directly above a lava source block.
-- 3. The turtle needs enough starting fuel to run the script.

-- Loop as long as the current fuel level plus one bucket's worth (1000)
-- is less than the maximum fuel limit.
while turtle.getFuelLevel() + 1000 < turtle.getFuelLimit() do
  print(""Fuel: "" .. turtle.getFuelLevel() .. ""/"" .. turtle.getFuelLimit())
  -- Uses the selected bucket on the block below, filling it with lava.
  turtle.placeDown()
  
  -- Consumes the lava bucket from the selected slot for 1000 fuel.
  -- The empty bucket is returned to the same slot.
  turtle.refuel()
end

-- Print a confirmation message to the console.
print(""Refueling complete. Fuel level is now: "" .. turtle.getFuelLevel())"
NceEH854,mine,Timmitei,Lua,Saturday 18th of October 2025 02:17:20 PM CDT,"--[[
  Advanced Turtle Mining Script (v5 - Column-by-Column)
  Mines an NxMxP cuboid one vertical column at a time
  to ensure the turtle is always accessible.
--]]

-------------------------------------------------------------------------------
-- ## Configuration & Argument Parsing
-------------------------------------------------------------------------------

local args = { ... }
if #args < 4 then
  print(""Usage: mine <width> <depth> <height> <corner>"")
  print(""Corner can be: bl, br, tl, tr"")
  return
end

local width = assert(tonumber(args[1]), ""Invalid width"")
local depth = assert(tonumber(args[2]), ""Invalid depth"")
local height = assert(tonumber(args[3]), ""Invalid height"")
local startCorner = args[4]:lower()

-- Determine initial mining directions
local mineRight, mineUp
if startCorner == ""bl"" then
  mineRight = true; mineUp = true
elseif startCorner == ""br"" then
  mineRight = false; mineUp = true
elseif startCorner == ""tl"" then
  mineRight = true; mineUp = false
elseif startCorner == ""tr"" then
  mineRight = false; mineUp = false
else
  error(""Invalid corner '"" .. startCorner .. ""'. Use bl, br, tl, or tr."")
end

-------------------------------------------------------------------------------
-- ## State Tracking and Movement Wrappers
-------------------------------------------------------------------------------

-- Global position and orientation state
local posX, posY, posZ = 0, 0, 0
local orientation = 0 -- 0: +Z (forward), 1: +X (right), 2: -Z (back), 3: -X (left)

-- Wrapped turn functions to track orientation
local function goRight()
  turtle.turnRight()
  orientation = (orientation + 1) % 4
end

local function goLeft()
  turtle.turnLeft()
  orientation = (orientation - 1 + 4) % 4
end

local function goTurn180()
  turtle.turnRight()
  turtle.turnRight()
  orientation = (orientation + 2) % 4
end

-- ** NEW function: Moves WITHOUT digging **
local function justMove(direction)
  local moveAction, success
  if direction == ""forward"" then moveAction = turtle.forward
  elseif direction == ""up"" then moveAction = turtle.up
  elseif direction == ""down"" then moveAction = turtle.down
  else error(""Invalid move direction"") end

  while true do
    success = moveAction()
    if success then
      -- Update position
      if direction == ""forward"" then
        if orientation == 0 then posZ = posZ + 1
        elseif orientation == 1 then posX = posX + 1
        elseif orientation == 2 then posZ = posZ - 1
        elseif orientation == 3 then posX = posX - 1
        end
      elseif direction == ""up"" then posY = posY + 1
      elseif direction == ""down"" then posY = posY - 1
      end
      break
    else
      print(""Movement blocked. Retrying..."")
      os.sleep(3)
    end
  end
end

-- ** This function ALWAYS digs, then moves **
local function mineAndMove(direction)
  local digAction, moveAction

  if direction == ""forward"" then
    digAction = turtle.dig; moveAction = turtle.forward
  elseif direction == ""up"" then
    digAction = turtle.digUp; moveAction = turtle.up
  elseif direction == ""down"" then
    digAction = turtle.digDown; moveAction = turtle.down
  else
    error(""Invalid move direction: "" .. tostring(direction))
  end
  
  while true do
    digAction()
    if moveAction() then
      -- On successful move, update coordinates and break
      if direction == ""forward"" then
        if orientation == 0 then posZ = posZ + 1
        elseif orientation == 1 then posX = posX + 1
        elseif orientation == 2 then posZ = posZ - 1
        elseif orientation == 3 then posX = posX - 1
        end
      elseif direction == ""up"" then posY = posY + 1
      elseif direction == ""down"" then posY = posY - 1
      end
      break -- Exit retry loop
    else
      print(""Movement blocked. Retrying..."")
      os.sleep(3)
    end
  end
end

-------------------------------------------------------------------------------
-- ## Main Mining Logic (Column-by-Column)
-------------------------------------------------------------------------------

print(string.format(""Starting to mine %dx%dx%d cuboid..."", width, depth, height))

local x_dir = mineRight and 1 or -1
local y_dir = mineUp and 1 or -1

-- Determine Y move and return directions
local y_move_dir = y_dir == 1 and ""up"" or ""down""
local y_return_dir = y_dir == 1 and ""down"" or ""up""

for z = 1, depth do
  -- 1. Align for the row
  if z == 1 then -- Very first row, turn from +Z to X
    if x_dir == 1 then goRight() else goLeft() end
  else -- Subsequent rows, we are facing +Z after row-change
    if x_dir == 1 then goRight() else goLeft() end
  end
  
  print(string.format(""Mining row %d/%d. Facing %s"", z, depth, x_dir == 1 and ""+X"" or ""-X""))

  for x = 1, width do
    -- 2. Mine the horizontal block for this column
    if x > 1 or z > 1 then
      -- (The very first block (1,1) is mined by the first *column* move)
      -- (But subsequent horizontal moves must dig)
      if x > 1 then
        mineAndMove(""forward"")
      end
    end

    -- 3. Mine the vertical column
    -- (We mine height-1 because the horizontal move already cleared 1 block)
    for y = 1, height - 1 do
      mineAndMove(y_move_dir)
    end
    
    -- 4. Return to the starting Y-level (without digging)
    for y = 1, height - 1 do
      justMove(y_return_dir)
    end
  end -- end x loop

  -- 5. Transition to the next row (Z-move)
  if z < depth then
    -- Turn back to face +Z
    if x_dir == 1 then goLeft() else goRight() end
    
    mineAndMove(""forward"") -- Mine the first block of the next row
    
    -- Flip horizontal direction
    x_dir = -x_dir
  end
end -- end z loop


print(""Mining operation complete!"")

-------------------------------------------------------------------------------
-- ## Return to Start Sequence (Unchanged)
-------------------------------------------------------------------------------

-- Function to turn in the most efficient direction
local function faceDirection(targetOrientation)
  local rightTurns = (targetOrientation - orientation + 4) % 4
  if rightTurns == 1 then
    goRight()
  elseif rightTurns == 2 then
    goTurn180()
  elseif rightTurns == 3 then
    goLeft()
  end
end

print(string.format(""Final position: (%d, %d, %d). Returning home..."", posX, posY, posZ))

-- 1. Return to starting elevation (Y=0)
while posY > 0 do justMove(""down"") end -- Use justMove
while posY < 0 do justMove(""up"") end   -- Use justMove

-- 2. Return along the Z axis to Z=0
if posZ > 0 then -- We are in front of the start, move back
  faceDirection(2) -- Face -Z
  for i = 1, posZ do justMove(""forward"") end
elseif posZ < 0 then -- We are behind the start, move forward
  faceDirection(0) -- Face +Z
  for i = 1, -posZ do justMove(""forward"") end
end
posZ = 0

-- 3. Return along the X axis to X=0
if posX > 0 then -- We are right of the start, move left
  faceDirection(3) -- Face -X
  for i = 1, posX do justMove(""forward"") end
elseif posX < 0 then -- We are left of the start, move right
  faceDirection(1) -- Face +X
  for i = 1, -posX do justMove(""forward"") end
end
posX = 0

-- 4. Reset to original orientation (facing forward)
faceDirection(0) -- Face +Z (0)

print(""Returned to starting position."")"
Vcs8yxMw,AlgorithmsDataStructuresJavaFiltration,wingman007,Java,Saturday 18th of October 2025 12:24:36 PM CDT,"public static int[] filterEven(int[] input) {
    ArrayList<Integer> result = new ArrayList<>();

    for (int num : input) {
        if (num % 2 == 0) {
            result.add(num);
        }
    }

    // Преобразуване към масив
    int[] output = new int[result.size()];
    for (int i = 0; i < result.size(); i++) {
        output[i] = result.get(i);
    }

    return output;
}

public static int[] filterOdd(int[] input) {
    ArrayList<Integer> result = new ArrayList<>();

    for (int num : input) {
        if (num % 2 != 0) {
            result.add(num);
        }
    }

    int[] output = new int[result.size()];
    for (int i = 0; i < result.size(); i++) {
        output[i] = result.get(i);
    }

    return output;
}

public static void main(String[] args) {
    int[] numbers = {1, 2, 3, 4, 5, 6};

    int[] even = filterEven(numbers);
    System.out.println(""Четни: "" + Arrays.toString(even));

    int[] odd = filterOdd(numbers);
    System.out.println(""Нечетни: "" + Arrays.toString(odd));
}
"
0Hsx9zgL,AlgorithmsDataStructuresJavaBubbleSort,wingman007,Java,Saturday 18th of October 2025 11:59:56 AM CDT,"// За O(N²) сложност можем да дадем пример с Bubble Sort – един прост алгоритъм за сортиране, който сравнява и разменя съседни елементи многократно. Той има вложени цикли и за всеки елемент трябва да премине през всички останали елементи, което води до квадратична сложност.
for (int i = 0; i < array.length - 1; i++) {
    for (int j = 0; j < array.length - 1 - i; j++) {
        if (array[j] > array[j + 1]) {
            int temp = array[j];
            array[j] = array[j + 1];
            array[j + 1] = temp;
        }
    }
}
// Тук сложността е O(N²), защото за всеки елемент правим проверки по всички останали елементи."
Q0Th2LvQ,AlgorithmsDataStructuresJavaFindMinMaxElements,wingman007,Java,Saturday 18th of October 2025 11:55:41 AM CDT,"int[] array = {4, 2, 9, 7, 1, 5};
int min = array[0];
int max = array[0];

for (int i = 1; i < array.length; i++) {
    if (array[i] < min) {
        min = array[i];
    }
    if (array[i] > max) {
        max = array[i];
    }
}

System.out.println(""Минималният елемент е: "" + min);
System.out.println(""Максималният елемент е: "" + max);
"
KrziTw91,AlgorithmsDataStructuresJavaLinearSearch,wingman007,Java,Saturday 18th of October 2025 11:53:01 AM CDT,"// Първо, за линейна сложност O(N) можем да използваме линейното търсене в масив. Това е алгоритъм, който просто минава през всеки елемент един по един, докато намери търсения. Така за всеки елемент имаме една операция, което прави сложността линейна.
int linearSearch(int[] array, int key) {
    for (int i = 0; i < array.length; i++) {
        if (array[i] == key)
            return i;
    }
    return -1;
}
// Това е O(N), защото в най-лошия случай трябва да проверим всеки елемент веднъж."
22tDujtg,AlgorithmsDataStructuresJavaBinarySearch,wingman007,Java,Saturday 18th of October 2025 11:47:51 AM CDT,"int binarySearch(int[] array, int key) {
    int left = 0, right = array.length - 1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (array[mid] == key)
            return mid;
        if (array[mid] < key)
            left = mid + 1;
        else
            right = mid - 1;
    }
    return -1;
}"
hXPd461X,AlgorithmsDataStructuresJavaSelectionSort,wingman007,Java,Saturday 18th of October 2025 11:43:48 AM CDT,"// сортиране чрез избор (Selection Sort)
int[] array = {64, 25, 12, 22, 11};
for (int i = 0; i < array.length - 1; i++) {
    int minIndex = i;
    for (int j = i + 1; j < array.length; j++) {
        if (array[j] < array[minIndex]) {
            minIndex = j;
        }
    }
    int temp = array[minIndex];
    array[minIndex] = array[i];
    array[i] = temp;
}
"
u5b1v6ch,Online login,jairomaster,JSON,Saturday 18th of October 2025 11:40:30 AM CDT,"[
  {
    ""Device Id"": ""1e8fb7c0231b1542"", 
    ""username"": ""admin"",
    ""password"": ""1234"",
    ""expiry"": ""2025-10-19"" // DATE FORMAT~ YYYY-MM-DD
  },
  {
    ""Device Id"": """",  // NO DEVICE ID, LOGIN NOT WORK 
    ""username"": ""abc"",
    ""password"": ""101"",
    ""expiry"": ""2026-09-29""
  },
  {
    ""Device Id"": ""PASTE-DEVICE-ID"",
    ""username"": ""def"",
    ""password"": ""102"",
    ""expiry"": """" // NO DATE NO EXPIRY UNLIMITED KEY 
  },
  {
    ""Device Id"": ""PASTE-DEVICE-ID"",
    ""username"": ""ghi"",
    ""password"": ""103"",
    ""expiry"": ""2026-01-01""
  },
  {
    ""Device Id"": ""PASTE-DEVICE-ID"",
    ""username"": ""jkl"",
    ""password"": ""104"",
    ""expiry"": """" // NO DATE NO EXPIRY UNLIMITED KEY 
  },
  {
    ""Device Id"": ""PASTE-DEVICE-ID"",
    ""username"": ""mno"",
    ""password"": ""105"",
    ""expiry"": ""2025-10-04""
  },
  {
    ""Device Id"": ""PASTE-DEVICE-ID"",
    ""username"": ""pqr"",
    ""password"": ""106"",
    ""expiry"": """" // NO DATE NO EXPIRY UNLIMITED KEY 
  }
]"
25eAUhjS,PlayerMoveState,johnnygoodguy2000,C#,Saturday 18th of October 2025 10:21:56 AM CDT,"using System;
using UnityEngine;

public class PlayerMoveState : PlayerState
{
    public PlayerMoveState(Player player) : base(player) { }

    public override void Enter()
    {
        base.Enter();
        

    }

    public override void Update()
    {

        base.Update();
 if(AttackPressed && combat.CanAttack)
        
            player.ChangeState(player.attackState);
        
        
        else if (JumpPressed)
        {

            player.ChangeState(player.jumpState);
        }
        else if (Mathf.Abs(MoveInput.x) < 0.1f)
        {
            player.ChangeState(player.idleState);
        }
        else if (player.isGrounded && RunPressed && MoveInput.y < -0.1f)
        {
            player.ChangeState(player.slideState);
        }
        else
                {
                    anim.SetBool(""isWalking"", !RunPressed);
                    anim.SetBool(""isRunning"", RunPressed);
                }
    }

    public override void FixedUpdate()
    {
        base.FixedUpdate();
        float speed = RunPressed ? player.runSpeed : player.walkSpeed;
        rb.linearVelocity = new Vector2(speed * player.faceDirection, rb.linearVelocity.y);
    }

    public override void Exit()
    {
        base.Exit();
        anim.SetBool(""isWalking"", false);
        anim.SetBool(""isRunning"", false);
    }
    
}"
qiH3zRpX,PlayerState,johnnygoodguy2000,C#,Saturday 18th of October 2025 10:19:21 AM CDT,"//using System.Numerics;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public abstract class PlayerState
{
    protected Player player;
    protected Animator anim;
    protected Rigidbody2D rb;
    protected Combat combat;
    protected bool JumpPressed  { get => player.jumpPressed;  set => player.jumpPressed  = value; }
    protected bool JumpReleased { get => player.jumpReleased; set => player.jumpReleased = value; }
    protected bool RunPressed => player.runPressed;
    protected bool AttackPressed => player.attackPressed;
    protected Vector2 MoveInput => player.moveInput;   
    

    public PlayerState(Player player)
    {
        this.player = player;
        this.anim = player.anim;
       // this.rb = player.rb ?? player.GetComponent<Rigidbody2D>();
       this.rb = player.rb;
        this.combat = player.combat;

    }
    public virtual void Enter() { }
    public virtual void Exit() { }

    public virtual void Update() { }
    public virtual void FixedUpdate() { }
    public virtual void AttackAnimationFinished() { }
   
}"
pmS4h8XE,PlayerAttackState,johnnygoodguy2000,C#,Saturday 18th of October 2025 10:11:26 AM CDT,"using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerAttackState : PlayerState
{
    public PlayerAttackState(Player player) : base(player) { }



    public override void Enter()
    {
        base.Enter();
        anim.SetBool(""isAttacking"", true);
        rb.linearVelocity = new Vector2(0f, rb.linearVelocity.y);
    }

    public override void AttackAnimationFinished()
    {
        
        if (Math.Abs(MoveInput.x) > 0.1f)

            player.ChangeState(player.moveState);
        else 
            player.ChangeState(player.idleState);
        
    }

    public override void Exit()
    {
        base.Exit();
        anim.SetBool(""isAttacking"", false);
    }
    
}"
2hQTQzPv,Python Assignment 8 solution (IITM web MTech AI  2025),sohangchopra,Python,Saturday 18th of October 2025 10:09:06 AM CDT,"class Item:
    def __init__(self, name: str, price: float, quantity: int):
        self.name = name 
        self.price = price 
        self.quantity = quantity


class ShoppingCart:
    def __init__(self):
        self.items = []
        
    
    def add_item(self, item: Item) -> None:
        self.items.append(item)
        
    
    def remove_item(self, item_name: str) -> None:
        for i, item in enumerate(self.items):
            if item.name == item_name:
                del self.items[i]
                break
        
    
    def total_bill(self) -> float:
        return sum(item.price * item.quantity for item in self.items)
        
    
    def __str__(self) -> str:
        lines = []
        total = 0
        for item in self.items:
            item_total = item.price * item.quantity
            total += item_total
            lines.append(f'- {item.name} (x{item.quantity}) - ${item_total:.2f}')
        lines.append(f'Total: ${total:.2f}')
        return '\n'.join(lines)
"
YqLi3Gfx,Combat,johnnygoodguy2000,C#,Saturday 18th of October 2025 10:08:49 AM CDT,"using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Combat : MonoBehaviour
{
    
     [Header(""Attack Settings"")]
    public int damage;
    public float attackRadius = 0.5f;
    public float attackCooldown = 1.5f;
    public Transform attackPoint;
    public LayerMask enemyLayer;
    public Player player;

    public bool CanAttack => Time.time >= nextAttackTime;
    private float nextAttackTime;



    public void AttackAnimationFinished()
    {
        player.AttackAnimationFinished();
    }
    
    public void Attack()
    {
        if (!CanAttack) return;
        nextAttackTime = Time.time + attackCooldown;
        
       Collider2D enemy = Physics2D.OverlapCircle(attackPoint.position, attackRadius, enemyLayer);
            if (enemy != null)
            
                enemy.gameObject.GetComponent<Health>().ChangeHealth(-damage);  
    }
    
            
}"
hBFSicfx,Untitled,Mangle_DevCH,Lua,Saturday 18th of October 2025 09:31:07 AM CDT,"local Library = loadstring(Game:HttpGet(""https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wizard""))()
local Window = Library:NewWindow(""PayDay"")

Tab:CreateToggle(""Instant v3"", function(value)
    getgenv().InstantSteal = value

    if value then
        -- ฟังก์ชันตั้งค่า prompt
        local function setPrompt(p)
            if p:IsA(""ProximityPrompt"") then
                p.HoldDuration = 0
            end
        end

        -- ตั้งค่าทุก prompt ที่มีอยู่แล้ว
        for _, prompt in pairs(game:GetDescendants()) do
            setPrompt(prompt)
        end

        -- ฟัง event แค่ครั้งเดียว ไม่ต้อง loop
        if not getgenv().InstantStealConnection then
            getgenv().InstantStealConnection = game.DescendantAdded:Connect(function(desc)
                if getgenv().InstantSteal then
                    setPrompt(desc)
                end
            end)
        end

    else
        -- ปิด toggle แล้วหยุด event
        if getgenv().InstantStealConnection then
            getgenv().InstantStealConnection:Disconnect()
            getgenv().InstantStealConnection = nil
        end
    end
end)

local Tab = Window:NewSection(""YT: YumiellaCH"")"
vc0qtKLt,# tk_Bauhaus.py,here2share,Python,Saturday 18th of October 2025 08:44:48 AM CDT,"# tk_Bauhaus.py

import tkinter as tk
import random

GRID_SIZE = 10
CELL_SIZE = 60
OUTER_RADIUS = CELL_SIZE
THICKNESS = OUTER_RADIUS // 2
INNER_RADIUS = OUTER_RADIUS - THICKNESS

fg_colors = [""#f4ac14"", ""#f19bc2"", ""#b12223""]
bg_colors = [""#458b97"", ""#beab8a"", ""#ff2621""]

root = tk.Tk()
root.title(""Bauhaus"")
canvas = tk.Canvas(root, width=GRID_SIZE * CELL_SIZE, height=GRID_SIZE * CELL_SIZE, bg=""white"")
canvas.pack()

def draw_quarter_ring(x, y, orientation, fg_color):
    if orientation == 0:  # Top-left
        outer = (x, y, x + OUTER_RADIUS * 2, y + OUTER_RADIUS * 2)
        inner = (x + THICKNESS, y + THICKNESS, x + (OUTER_RADIUS * 2 - THICKNESS), y + (OUTER_RADIUS * 2 - THICKNESS))
        start = 90
    elif orientation == 1:  # Top-right
        outer = (x + CELL_SIZE - OUTER_RADIUS * 2, y, x + CELL_SIZE, y + OUTER_RADIUS * 2)
        inner = (x + CELL_SIZE - OUTER_RADIUS * 2 + THICKNESS, y + THICKNESS, x + CELL_SIZE - THICKNESS, y + OUTER_RADIUS * 2 - THICKNESS)
        start = 0
    elif orientation == 2:  # Bottom-right
        outer = (x + CELL_SIZE - OUTER_RADIUS * 2, y + CELL_SIZE - OUTER_RADIUS * 2, x + CELL_SIZE, y + CELL_SIZE)
        inner = (x + CELL_SIZE - OUTER_RADIUS * 2 + THICKNESS, y + CELL_SIZE - OUTER_RADIUS * 2 + THICKNESS, x + CELL_SIZE - THICKNESS, y + CELL_SIZE - THICKNESS)
        start = 270
    elif orientation == 3:  # Bottom-left
        outer = (x, y + CELL_SIZE - OUTER_RADIUS * 2, x + OUTER_RADIUS * 2, y + CELL_SIZE)
        inner = (x + THICKNESS, y + CELL_SIZE - OUTER_RADIUS * 2 + THICKNESS, x + OUTER_RADIUS * 2 - THICKNESS, y + CELL_SIZE - THICKNESS)
        start = 180

    canvas.create_arc(outer, start=start, extent=90, fill=fg_color, outline=fg_color)
    bg_color = random.choice(bg_colors)
    canvas.create_arc(inner, start=start, extent=90, fill=bg_color, outline=bg_color)

def draw_grid():
	canvas.delete(""all"")
	for row in range(GRID_SIZE):
		for col in range(GRID_SIZE):
			x = col * CELL_SIZE
			y = row * CELL_SIZE
			orientation = random.randint(0, 3)
			fg_color = random.choice(fg_colors)
			bg_color = random.choice(bg_colors)
			canvas.create_rectangle(x, y, x + CELL_SIZE, y + CELL_SIZE, fill=bg_color, outline=bg_color)
			draw_quarter_ring(x, y, orientation, fg_color)

root.bind(""<space>"", lambda event: draw_grid())
draw_grid()

root.mainloop()"
33SBecy5,Error Laravel 2,ivanchuto,HTML,Saturday 18th of October 2025 07:30:58 AM CDT,"<!DOCTYPE html>
<html lang=""en"">

<head>
    <meta charset=""utf-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1"">

    <title>Página expirada</title>

    <style>
        /*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}a{background-color:transparent}code{font-family:monospace,monospace;font-size:1em}[hidden]{display:none}html{font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;line-height:1.5}*,:after,:before{box-sizing:border-box;border:0 solid #e2e8f0}a{color:inherit;text-decoration:inherit}code{font-family:Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace}svg,video{display:block;vertical-align:middle}video{max-width:100%;height:auto}.bg-white{--bg-opacity:1;background-color:#fff;background-color:rgba(255,255,255,var(--bg-opacity))}.bg-gray-100{--bg-opacity:1;background-color:#f7fafc;background-color:rgba(247,250,252,var(--bg-opacity))}.border-gray-200{--border-opacity:1;border-color:#edf2f7;border-color:rgba(237,242,247,var(--border-opacity))}.border-gray-400{--border-opacity:1;border-color:#cbd5e0;border-color:rgba(203,213,224,var(--border-opacity))}.border-t{border-top-width:1px}.border-r{border-right-width:1px}.flex{display:flex}.grid{display:grid}.hidden{display:none}.items-center{align-items:center}.justify-center{justify-content:center}.font-semibold{font-weight:600}.h-5{height:1.25rem}.h-8{height:2rem}.h-16{height:4rem}.text-sm{font-size:.875rem}.text-lg{font-size:1.125rem}.leading-7{line-height:1.75rem}.mx-auto{margin-left:auto;margin-right:auto}.ml-1{margin-left:.25rem}.mt-2{margin-top:.5rem}.mr-2{margin-right:.5rem}.ml-2{margin-left:.5rem}.mt-4{margin-top:1rem}.ml-4{margin-left:1rem}.mt-8{margin-top:2rem}.ml-12{margin-left:3rem}.-mt-px{margin-top:-1px}.max-w-xl{max-width:36rem}.max-w-6xl{max-width:72rem}.min-h-screen{min-height:100vh}.overflow-hidden{overflow:hidden}.p-6{padding:1.5rem}.py-4{padding-top:1rem;padding-bottom:1rem}.px-4{padding-left:1rem;padding-right:1rem}.px-6{padding-left:1.5rem;padding-right:1.5rem}.pt-8{padding-top:2rem}.fixed{position:fixed}.relative{position:relative}.top-0{top:0}.right-0{right:0}.shadow{box-shadow:0 1px 3px 0 rgba(0,0,0,.1),0 1px 2px 0 rgba(0,0,0,.06)}.text-center{text-align:center}.text-gray-200{--text-opacity:1;color:#edf2f7;color:rgba(237,242,247,var(--text-opacity))}.text-gray-300{--text-opacity:1;color:#e2e8f0;color:rgba(226,232,240,var(--text-opacity))}.text-gray-400{--text-opacity:1;color:#cbd5e0;color:rgba(203,213,224,var(--text-opacity))}.text-gray-500{--text-opacity:1;color:#a0aec0;color:rgba(160,174,192,var(--text-opacity))}.text-gray-600{--text-opacity:1;color:#718096;color:rgba(113,128,150,var(--text-opacity))}.text-gray-700{--text-opacity:1;color:#4a5568;color:rgba(74,85,104,var(--text-opacity))}.text-gray-900{--text-opacity:1;color:#1a202c;color:rgba(26,32,44,var(--text-opacity))}.uppercase{text-transform:uppercase}.underline{text-decoration:underline}.antialiased{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.tracking-wider{letter-spacing:.05em}.w-5{width:1.25rem}.w-8{width:2rem}.w-auto{width:auto}.grid-cols-1{grid-template-columns:repeat(1,minmax(0,1fr))}@-webkit-keyframes spin{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}@keyframes spin{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}@-webkit-keyframes ping{0%{transform:scale(1);opacity:1}75%,to{transform:scale(2);opacity:0}}@keyframes ping{0%{transform:scale(1);opacity:1}75%,to{transform:scale(2);opacity:0}}@-webkit-keyframes pulse{0%,to{opacity:1}50%{opacity:.5}}@keyframes pulse{0%,to{opacity:1}50%{opacity:.5}}@-webkit-keyframes bounce{0%,to{transform:translateY(-25%);-webkit-animation-timing-function:cubic-bezier(.8,0,1,1);animation-timing-function:cubic-bezier(.8,0,1,1)}50%{transform:translateY(0);-webkit-animation-timing-function:cubic-bezier(0,0,.2,1);animation-timing-function:cubic-bezier(0,0,.2,1)}}@keyframes bounce{0%,to{transform:translateY(-25%);-webkit-animation-timing-function:cubic-bezier(.8,0,1,1);animation-timing-function:cubic-bezier(.8,0,1,1)}50%{transform:translateY(0);-webkit-animation-timing-function:cubic-bezier(0,0,.2,1);animation-timing-function:cubic-bezier(0,0,.2,1)}}@media (min-width:640px){.sm\:rounded-lg{border-radius:.5rem}.sm\:block{display:block}.sm\:items-center{align-items:center}.sm\:justify-start{justify-content:flex-start}.sm\:justify-between{justify-content:space-between}.sm\:h-20{height:5rem}.sm\:ml-0{margin-left:0}.sm\:px-6{padding-left:1.5rem;padding-right:1.5rem}.sm\:pt-0{padding-top:0}.sm\:text-left{text-align:left}.sm\:text-right{text-align:right}}@media (min-width:768px){.md\:border-t-0{border-top-width:0}.md\:border-l{border-left-width:1px}.md\:grid-cols-2{grid-template-columns:repeat(2,minmax(0,1fr))}}@media (min-width:1024px){.lg\:px-8{padding-left:2rem;padding-right:2rem}}@media (prefers-color-scheme:dark){.dark\:bg-gray-800{--bg-opacity:1;background-color:#2d3748;background-color:rgba(45,55,72,var(--bg-opacity))}.dark\:bg-gray-900{--bg-opacity:1;background-color:#1a202c;background-color:rgba(26,32,44,var(--bg-opacity))}.dark\:border-gray-700{--border-opacity:1;border-color:#4a5568;border-color:rgba(74,85,104,var(--border-opacity))}.dark\:text-white{--text-opacity:1;color:#fff;color:rgba(255,255,255,var(--text-opacity))}.dark\:text-gray-400{--text-opacity:1;color:#cbd5e0;color:rgba(203,213,224,var(--text-opacity))}}
    </style>

    <style>
        body {
                font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, ""Segoe UI"", Roboto, ""Helvetica Neue"", Arial, ""Noto Sans"", sans-serif, ""Apple Color Emoji"", ""Segoe UI Emoji"", ""Segoe UI Symbol"", ""Noto Color Emoji"";
            }
    </style>
</head>

<body class=""antialiased"">
    <div class=""relative flex items-top justify-center min-h-screen bg-gray-100 dark:bg-gray-900 sm:items-center sm:pt-0"">
        <div class=""max-w-xl mx-auto sm:px-6 lg:px-8"">
            <div class=""flex items-center pt-8 sm:justify-start sm:pt-0"">
                <div class=""px-4 text-lg text-gray-500 border-r border-gray-400 tracking-wider"">
                    419 </div>

                <div class=""ml-4 text-lg text-gray-500 uppercase tracking-wider"">
                    Página expirada </div>
            </div>
        </div>
    </div>
</body>

</html>"
DdjPx262,web.php Laravel,ivanchuto,PHP,Saturday 18th of October 2025 07:23:24 AM CDT,"<?php

use Illuminate\Support\Facades\Route;
use Spatie\Permission\Middleware\RoleMiddleware;
use Spatie\Permission\Middleware\PermissionMiddleware;

use App\Http\Controllers\perfil\PerfilController;

use App\Http\Controllers\dios\DiosController;
use App\Http\Controllers\dios\CeoController;

use App\Http\Controllers\ceo\AdminsController;

use App\Http\Controllers\admin\ModsController;

use App\Http\Controllers\mod\padel\gestion\AjustesController;
use App\Http\Controllers\mod\padel\gestion\SedesController;
use App\Http\Controllers\mod\padel\gestion\CategoriasController;
use App\Http\Controllers\mod\padel\gestion\NominasController;
use App\Http\Controllers\mod\padel\gestion\FixtureController;
use App\Http\Controllers\mod\padel\gestion\RankingController;
use App\Http\Controllers\mod\padel\gestion\NotificacionController;
use App\Http\Controllers\mod\padel\gestion\LogsController;

Route::get('/', function () {
    return view('index');
});

Route::view('index', 'index')->name('index');
Route::view('project_dashboard', 'project_dashboard')->name('project_dashboard');

Route::view('accordions', 'accordions')->name('accordions');
Route::view('add_blog', 'add_blog')->name('add_blog');
Route::view('add_product', 'add_product')->name('add_product');
Route::view('advance_table', 'advance_table')->name('advance_table');
Route::view('alert', 'alert')->name('alert');
Route::view('alignment', 'alignment')->name('alignment');
Route::view('animated_icon', 'animated_icon')->name('animated_icon');
Route::view('animation', 'animation')->name('animation');
Route::view('api', 'api')->name('api');
Route::view('area_chart', 'area_chart')->name('area_chart');
Route::view('avatar', 'avatar')->name('avatar');

Route::view('background', 'background')->name('background');
Route::view('badges', 'badges')->name('badges');
Route::view('bar_chart', 'bar_chart')->name('bar_chart');
Route::view('base_inputs', 'base_inputs')->name('base_inputs');
Route::view('basic_table', 'basic_table')->name('basic_table');
Route::view('blank', 'blank')->name('blank');
Route::view('block_ui', 'block_ui')->name('block_ui');
Route::view('blog', 'blog')->name('blog');
Route::view('blog_details', 'blog_details')->name('blog_details');
Route::view('bookmark', 'bookmark')->name('bookmark');
Route::view('bootstrap_slider', 'bootstrap_slider')->name('bootstrap_slider');
Route::view('boxplot_chart', 'boxplot_chart')->name('boxplot_chart');
Route::view('bubble_chart', 'bubble_chart')->name('bubble_chart');
Route::view('bullet', 'bullet')->name('bullet');
Route::view('buttons', 'buttons')->name('buttons');

Route::view('calendar', 'calendar')->name('calendar');
Route::view('candlestick_chart', 'candlestick_chart')->name('candlestick_chart');
Route::view('cards', 'cards')->name('cards');
Route::view('cart', 'cart')->name('cart');
Route::view('chart_js', 'chart_js')->name('chart_js');
Route::view('chat', 'chat')->name('chat');
Route::view('cheatsheet', 'cheatsheet')->name('cheatsheet');
Route::view('checkbox_radio', 'checkbox_radio')->name('checkbox_radio');
Route::view('checkout', 'checkout')->name('checkout');
Route::view('clipboard', 'clipboard')->name('clipboard');
Route::view('collapse', 'collapse')->name('collapse');
Route::view('column_chart', 'column_chart')->name('column_chart');
Route::view('coming_soon', 'coming_soon')->name('coming_soon');
Route::view('count_down', 'count_down')->name('count_down');
Route::view('count_up', 'count_up')->name('count_up');

Route::view('data_table', 'data_table')->name('data_table');
Route::view('date_picker', 'date_picker')->name('date_picker');
Route::view('default_forms', 'default_forms')->name('default_forms');
Route::view('divider', 'divider')->name('divider');
Route::view('draggable', 'draggable')->name('draggable');
Route::view('dropdown', 'dropdown')->name('dropdown');
Route::view('dual_list_boxes', 'dual_list_boxes')->name('dual_list_boxes');

Route::view('editor', 'editor')->name('editor');
Route::view('email', 'email')->name('email');
Route::view('error_400', 'error_400')->name('error_400');
Route::view('error_403', 'error_403')->name('error_403');
Route::view('error_404', 'error_404')->name('error_404');
Route::view('error_500', 'error_500')->name('error_500');
Route::view('error_503', 'error_503')->name('error_503');

Route::view('faq', 'faq')->name('faq');
Route::view('file_manager', 'file_manager')->name('file_manager');
Route::view('file_upload', 'file_upload')->name('file_upload');
Route::view('flag_icons', 'flag_icons')->name('flag_icons');
Route::view('floating_labels', 'floating_labels')->name('floating_labels');
Route::view('fontawesome', 'fontawesome')->name('fontawesome');
Route::view('footer_page', 'footer_page')->name('footer_page');
Route::view('form_validation', 'form_validation')->name('form_validation');
Route::view('form_wizard_1', 'form_wizard_1')->name('form_wizard_1');
Route::view('form_wizard_2', 'form_wizard_2')->name('form_wizard_2');
Route::view('form_wizards', 'form_wizards')->name('form_wizards');

Route::view('gallery', 'gallery')->name('gallery');
Route::view('google_map', 'google_map')->name('google_map');
Route::view('grid', 'grid')->name('grid');

Route::view('heatmap', 'heatmap')->name('heatmap');
Route::view('helper_classes', 'helper_classes')->name('helper_classes');

Route::view('iconoir_icon', 'iconoir_icon')->name('iconoir_icon');
Route::view('input_groups', 'input_groups')->name('input_groups');
Route::view('input_masks', 'input_masks')->name('input_masks');
Route::view('invoice', 'invoice')->name('invoice');

Route::view('kanban_board', 'kanban_board')->name('kanban_board');

Route::view('landing', 'landing')->name('landing');
Route::view('leaflet_map', 'leaflet_map')->name('leaflet_map');
Route::view('line_chart', 'line_chart')->name('line_chart');
Route::view('list', 'list')->name('list');
Route::view('list_table', 'list_table')->name('list_table');
Route::view('lock_screen', 'lock_screen')->name('lock_screen');
Route::view('lock_screen_1', 'lock_screen_1')->name('lock_screen_1');


Route::view('maintenance', 'maintenance')->name('maintenance');
Route::view('misc', 'misc')->name('misc');
Route::view('mixed_chart', 'mixed_chart')->name('mixed_chart');
Route::view('modals', 'modals')->name('modals');
Route::view('notifications', 'notifications')->name('notifications');

Route::view('offcanvas', 'offcanvas')->name('offcanvas');
Route::view('orders', 'orders')->name('orders');
Route::view('order_details', 'order_details')->name('order_details');
Route::view('order_list', 'order_list')->name('order_list');

Route::view('password_create_1', 'password_create_1')->name('password_create_1');
Route::view('password_reset_1', 'password_reset_1')->name('password_reset_1');
Route::view('phosphor', 'phosphor')->name('phosphor');
Route::view('pie_charts', 'pie_charts')->name('pie_charts');
Route::view('placeholder', 'placeholder')->name('placeholder');
Route::view('pricing', 'pricing')->name('pricing');
Route::view('prismjs', 'prismjs')->name('prismjs');
Route::view('privacy_policy', 'privacy_policy')->name('privacy_policy');
Route::view('product', 'product')->name('product');
Route::view('product_details', 'product_details')->name('product_details');
Route::view('product_list', 'product_list')->name('product_list');
Route::view('profileB', 'profile')->name('profile');
Route::view('progress', 'progress')->name('progress');
Route::view('project_app', 'project_app')->name('project_app');
Route::view('project_details', 'project_details')->name('project_details');
Route::view('password_create', 'password_create')->name('password_create');
Route::view('password_reset', 'password_reset')->name('password_reset');

Route::view('radar_chart', 'radar_chart')->name('radar_chart');
Route::view('radial_bar_chart', 'radial_bar_chart')->name('radial_bar_chart');
Route::view('range_slider', 'range_slider')->name('range_slider');
Route::view('ratings', 'ratings')->name('ratings');
Route::view('read_email', 'read_email')->name('read_email');
Route::view('ready_to_use_form', 'ready_to_use_form')->name('ready_to_use_form');
Route::view('ready_to_use_table', 'ready_to_use_table')->name('ready_to_use_table');
Route::view('ribbons', 'ribbons')->name('ribbons');

Route::view('scatter_chart', 'scatter_chart')->name('scatter_chart');
Route::view('scrollbar', 'scrollbar')->name('scrollbar');
Route::view('scrollpy', 'scrollpy')->name('scrollpy');
Route::view('select', 'select')->name('select');
Route::view('setting', 'setting')->name('setting');
Route::view('shadow', 'shadow')->name('shadow');
Route::view('sign_in', 'sign_in')->name('sign_in');
Route::view('sign_in_1', 'sign_in_1')->name('sign_in_1');
Route::view('sign_up', 'sign_up')->name('sign_up');
Route::view('sign_up_1', 'sign_up_1')->name('sign_up_1');
Route::view('sitemap', 'sitemap')->name('sitemap');
Route::view('slick_slider', 'slick_slider')->name('slick_slider');
Route::view('spinners', 'spinners')->name('spinners');
Route::view('sweetalert', 'sweetalert')->name('sweetalert');
Route::view('switch', 'switch')->name('switch');

Route::view('tabler_icons', 'tabler_icons')->name('tabler_icons');
Route::view('tabs', 'tabs')->name('tabs');
Route::view('team', 'team')->name('team');
Route::view('terms_condition', 'terms_condition')->name('terms_condition');
Route::view('textarea', 'textarea')->name('textarea');
Route::view('ticket', 'ticket')->name('ticket');
Route::view('ticket_details', 'ticket_details')->name('ticket_details');
Route::view('timeline', 'timeline')->name('timeline');
Route::view('timeline_range_charts', 'timeline_range_charts')->name('timeline_range_charts');
Route::view('to_do', 'to_do')->name('to_do');
Route::view('tooltips_popovers', 'tooltips_popovers')->name('tooltips_popovers');
Route::view('touch_spin', 'touch_spin')->name('touch_spin');
Route::view('tour', 'tour')->name('tour');
Route::view('tree-view', 'tree-view')->name('tree-view');
Route::view('treemap_chart', 'treemap_chart')->name('treemap_chart');
Route::view('two_step_verification', 'two_step_verification')->name('two_step_verification');
Route::view('two_step_verification_1', 'two_step_verification_1')->name('two_step_verification_1');
Route::view('typeahead', 'typeahead')->name('typeahead');


Route::view('video_embed', 'video_embed')->name('video_embed');
Route::view('weather_icon', 'weather_icon')->name('weather_icon');
Route::view('widget', 'widget')->name('widget');
Route::view('wishlist', 'wishlist')->name('wishlist');
Route::view('wrapper', 'wrapper')->name('wrapper');

Route::get('/borrame',            [NominasController::class, 'borrame'])->name('sistema.mod.padel.gestion.nominas.borrame');



// Validar Inscripciones

Route::post('/inscripcion/procesar', [AjustesController::class, 'procesarInscripcion'])->name('inscripcion.procesar');
Route::get('/inscripcion/estado/{uuid}', [AjustesController::class, 'procesarInscripcionC'])->name('inscripcion.procesarC');

// Agregas las rutas protegidas por autenticaci�n
Route::middleware(['auth', 'verified'])->group(function () {
    Route::get('/dashboard', function () {
        return view('dashboard.principal');
    })->name('dashboard');

    Route::get('/profile', [ProfileController::class, 'edit'])->name('profile.edit');
    Route::patch('/profile', [ProfileController::class, 'update'])->name('profile.update');
    Route::delete('/profile', [ProfileController::class, 'destroy'])->name('profile.destroy');
    
    // Vista principal de la plataforma
    
    Route::get('/principal', function () { return view('dashboard.principal'); });
    Route::get('/nada', function () { return view('dashboard.enblanco'); })->name('dashboard.enblanco');
    
    // Editar Perfil
    
    Route::post('/perfil', [PerfilController::class, 'update'])->name('sistema.perfil.editar');
    
    // MODERADOR
    Route::middleware(['web', RoleMiddleware::class . ':admin'])->group(function () {
    	
		// --- INICIO DEL CÓDIGO DINÁMICO PARA MÓDULOS DE DEPORTES ---

		// 1. Define los deportes que usarán este conjunto de rutas.
		// Si en el futuro agregas otro deporte, solo necesitas añadirlo a este array.
		$sports = ['padel', 'tenis' , 'pickleball'];

		// 2. Itera sobre cada deporte para crear dinámicamente todo el grupo de rutas.
		foreach ($sports as $sport) {

			Route::prefix(""mod/{$sport}"") // Prefijo de URI dinámico (ej: mod/padel)
				->name(""sistema.mod.{$sport}."") // Prefijo de nombre dinámico (ej: sistema.mod.padel.)
				->middleware(['web', PermissionMiddleware::class . "":moderador {$sport}""])
				->group(function () use ($sport) { // Pasamos $sport al closure para usarlo en el middleware interno

				// Grupo para todas las rutas de ""gestión""
				Route::prefix('gestion')
					->name('gestion.')
					->middleware([PermissionMiddleware::class . "":moderador {$sport} gestion""])
					->group(function () {

						// === Gestión de Ajustes ===
						Route::controller(AjustesController::class)->name('ajustes.')->group(function () {
							Route::get( '/ajustes', 'principal'       )->name('principal');
							Route::get( '/ajustes/{uuid}', 'principal')->name('edit');
							Route::post('/ajustes', 'guardar'         )->name('guardar');
						});

						// === Gestión de Sedes ===
						Route::controller(SedesController::class)->prefix('sedes')->name('sedes.')->group(function () {
							Route::get( '/{uuid}', 'principal'                                    )->name('principal');
							Route::post('/{uuid}/agregar-dia', 'agregarDia'                       )->name('agregar-dia');
							Route::post('/{uuid}/desactivar', 'desactivarSede'                    )->name('desactivar');
							Route::post('/agregar-cancha', 'agregarCancha'                        )->name('agregar-cancha');
							Route::post('/{uuid}/desactivar-cancha', 'desactivarCancha'           )->name('desactivar-cancha');
							Route::post('/agregar-restricciones', 'agregarRestricciones'          )->name('agregar-restricciones');
							Route::post('/{uuid}/store-sede-lista', 'storeSedeLista'              )->name('store-sede-lista');
							Route::put( '/{uuid}/update-sede-lista/{sede_uuid}', 'updateSedeLista')->name('update-sede-lista');
							Route::get( '/{uuid}/show/{sede_uuid}', 'showSedeLista'               )->name('show-sede-lista');
						});

						// === Gestión de Categorías ===
						Route::controller(CategoriasController::class)->prefix('categorias')->name('categorias.')->group(function () {
							Route::get(   '/{uuid}', 'principal'                                          )->name('principal');
							Route::post(  '/{uuid}/nuevacat', 'nuevaCategoria'                            )->name('nuevacat');
							Route::put(   '/{uuid}/actcat', 'actCategoria'                                )->name('actcat');
							Route::put(   '/{uuid}/updateColor', 'updateColor'                            )->name('updateColor');
							Route::put(   '/guardarestructura/{id}', 'guardarEstructura'                  )->name('guardarestructura');
							Route::get(   '/{a_considerar}/calcularestructuras', 'calcularEstructuras'    )->name('calcularestructuras');
							Route::get(   '/{id}/reglas', 'obtenerReglasJuego'                            )->name('reglas');
							Route::get(   '/{uuid}/categorias-disponibles', 'categoriasDisponibles'       )->name('disponibles');
							Route::post(  '/{uuid}/agregar-acceso', 'agregarAcceso'                       )->name('agregar-acceso');
							Route::delete('/{uuid}/eliminar-acceso/{categoria_lista_id}', 'eliminarAcceso')->name('eliminar-acceso');
							Route::delete('/eliminar-categoria/{categoria_uuid}', 'eliminarCategoria'     )->name('eliminar-categoria');
						});

						// === Gestión de Nóminas ===
						Route::controller(NominasController::class)->prefix('nominas')->name('nominas.')->group(function () {
							Route::get( '/buscar_usuario', 'buscar_usuario'     )->name('buscar_usuario');
							Route::post('/inscribir', 'guardar'                 )->name('inscribir');
							Route::post('/editar', 'editar'                     )->name('editar');
							Route::post('/borrar', 'borrar'                     )->name('borrar');
							Route::post('/mover', 'mover'                       )->name('mover');
							Route::post('/act_nombre', 'actualizarNombre'       )->name('act_nombre');
							Route::post('/act_rnk', 'actualizarRanking'         )->name('act_rnk');
							Route::post('/act_ident', 'actualizarIdentificacion')->name('act_ident');
							Route::post('/act_tel', 'actualizarNumero'          )->name('act_tel');
							Route::post('/act_mail', 'actualizarEmail'          )->name('act_mail');
							Route::post('/act_marca', 'actualizarMarca'         )->name('act_marca');
							Route::get( '/obt_rstr', 'obtenerRestricciones'     )->name('obt_rstr');
							Route::post('/g_rstr', 'guardarRestricciones'       )->name('g_rstr');
							Route::post('/ordenar', 'ordenar'                   )->name('ordenar');
							Route::post('/verificar-jugador', 'verificarJugador')->name('verificar-jugador');
							Route::post('/agregar-jugador', 'agregarJugador'    )->name('agregar-jugador');
							Route::get( '/exportar-excel', 'exportarExcel'      )->name('exportar-excel');
							Route::get( '/{uuid}', 'principal'                  )->name('principal');
							// Sub-grupo para Marcas
							Route::prefix('marcas')->name('marcas.')->group(function () {
								Route::get( '/{uuid}', 'listarMarcas'              )->name('listar');
								Route::post('/guardar', 'guardarMarca'             )->name('guardar');
								Route::post('/editar/{uuid}', 'editarMarca'        )->name('editar');
								Route::post('/eliminar/{uuid}', 'eliminarMarca'    )->name('eliminar');
								Route::post('/toggle/{uuid}', 'toggleMarca'        )->name('toggle');
								Route::post('/reset/{uuid}', 'resetMarca'          )->name('reset');
								Route::post('/aplicar/{uuid}', 'aplicarMarca'      )->name('aplicar');
								Route::post('/reset-general/{uuid}', 'resetGeneral')->name('reset-general');
							});
						});

						// === Gestión de Fixture ===
						Route::controller(FixtureController::class)->prefix('fixture')->name('fixture.')->group(function () {
							Route::get( '/{uuid}', 'principal'                                        )->name('principal');
							Route::get( '/links', 'getFixtureLinks'                                   )->name('links');
							Route::post('/generar', 'generateFixture'                                 )->name('generar');
							Route::post('/toggle-bloqueo', 'toggleBloqueo'                            )->name('toggle');
							Route::post('/programar-grupos', 'programarGrupos'                        )->name('programar-grupos');
							Route::post('/programar-eliminatorias', 'programarEliminatorias'          )->name('programar-eliminatorias');
							Route::post('/reset', 'reset'                                             )->name('reset');
							Route::post('/reset-total', 'resetTotal'                                  )->name('reset-total');
							Route::post('/reiniciar-avanzado', 'reiniciarAvanzado'                    )->name('reiniciarAvanzado');
							Route::post('/optimizar-programacion', 'optimizarProgramacion'            )->name('optimizar-programacion');
							Route::post('/get-categorias-no-programadas', 'getCategoriasNoProgramadas')->name('categorias');
							Route::post('/get-partidos-no-programados', 'getPartidosNoProgramados'    )->name('partidos');
							Route::post('/agregar-partido', 'agregarPartido'                          )->name('agregar');
							Route::post('/validar-movimiento', 'validarMovimiento'                    )->name('validar-movimiento');
							Route::post('/mover-partido', 'moverPartido'                              )->name('mover');
							Route::post('/iniciar-partido', 'iniciarPartido'                          )->name('iniciar');
							Route::post('/get-partido-duelo', 'getPartidoDuelo'                       )->name('duelo');
							Route::post('/registrar-resultado', 'registrarResultado'                  )->name('resultado');
							Route::post('/ranking-grupos', 'getRankingGrupos'                         )->name('ranking-grupos');
						});
						
						// === Gestión de Ranking ===
						Route::controller(RankingController::class)->prefix('ranking')->name('ranking.')->group(function () {
							Route::get(   '/{uuid}', 'principal'                         )->name('principal');
							Route::post(  '/{uuid}', 'store'                             )->name('store');
							Route::patch( '/{uuid}/{ranking_uuid}', 'update'             )->name('update');
							Route::delete('/{uuid}/{ranking_uuid}', 'destroy'            )->name('destroy');
							Route::post(  '/asociar/{uuid}', 'asociarRanking'            )->name('asociar');
							Route::post(  '/desasociar/{uuid}', 'desasociarRanking'      )->name('desasociar');
							Route::post(  '/aplicar/{uuid}', 'aplicarRanking'            )->name('aplicar');
							Route::patch( '/manual/{uuid}/{ranking_uuid}', 'updateManual')->name('manual');
						});
						
						// === Gestión de Notificaciones ===
						Route::controller(NotificacionController::class)->prefix('notificaciones')->name('notificaciones.')->group(function () {
							Route::get( '/{uuid}', 'principal'                                    )->name('principal');
							Route::post('/{uuid}/obtener', 'obtenerNotificaciones'                )->name('obtener');
							Route::post('/{uuid}/enviar/{notificacion_uuid}', 'enviarNotificacion')->name('enviar');
							Route::post('/{uuid}/notificar-todos', 'notificarTodos'               )->name('notificar-todos');
						});
						
						// === Gestión de Logs ===
						Route::get('/logs/{uuid}', [LogsController::class, 'principal'])->name('logs');
					});
				});
		}

		// Ruta genérica que se mantiene fuera del bucle
		Route::get('/descargar-reglas-pdf/{id}', [CategoriasController::class, 'descargarReglasPDF'])->name('descargar.reglas.pdf');

		// --- FIN DEL CÓDIGO DINÁMICO ---
	    
	});
    
    // ADMINISTRADOR
    Route::middleware(['web', RoleMiddleware::class . ':admin'])->group(function () {
    	
			Route::get(   '/admin/mods',                 [ModsController::class, 'principal'])->name(                  'sistema.admin.mods');
			Route::put(   '/admin/mods/usuarios/{user}', [ModsController::class, 'update'])->name(                     'sistema.admin.mods.update');
			Route::delete('/admin/mods/usuarios/{user}', [ModsController::class, 'destroy'])->name(                    'sistema.admin.mods.destroy');
			Route::delete('/admin/mods/whatsapp/{id}',   [ModsController::class, 'destroyWhatsapp'])->name(            'sistema.admin.mods.whatsapp.destroy');
			Route::get(   '/admin/mods/asignar',         [ModsController::class, 'mostrarFormularioAsignacion'])->name('sistema.admin.mods.asignar.form');
			Route::post(  '/admin/mods/asignar',         [ModsController::class, 'asignarRol'])->name(                 'sistema.admin.mods.asignar.rol');
			Route::get(   '/admin/mods/buscar_usuario',  [ModsController::class, 'buscar_usuario'])->name(             'sistema.admin.mods.buscar_usuario');
			
		});
    
    // CEO
		Route::middleware(['web', RoleMiddleware::class . ':ceo'])->group(function () {
	    
	    Route::get(   '/ceo/admins',                 [AdminsController::class, 'principal'])->name(                  'sistema.ceo.admins');
			Route::put(   '/ceo/admins/usuarios/{user}', [AdminsController::class, 'update'])->name(                     'sistema.ceo.admins.update');
			Route::delete('/ceo/admins/usuarios/{user}', [AdminsController::class, 'destroy'])->name(                    'sistema.ceo.admins.destroy');
			Route::delete('/ceo/admins/whatsapp/{id}',   [AdminsController::class, 'destroyWhatsapp'])->name(            'sistema.ceo.admins.whatsapp.destroy');
			Route::get(   '/ceo/admins/asignar',         [AdminsController::class, 'mostrarFormularioAsignacion'])->name('sistema.ceo.admins.asignar.form');
			Route::post(  '/ceo/admins/asignar',         [AdminsController::class, 'asignarRol'])->name(                 'sistema.ceo.admins.asignar.rol');
			Route::get(   '/ceo/admins/buscar_usuario',  [AdminsController::class, 'buscar_usuario'])->name(             'sistema.ceo.admins.buscar_usuario');
			
			Route::get(   '/ceo/usuarios',           [AdminsController::class, 'principal'])->name(                  'sistema.ceo.usuarios');

			Route::get(   '/ceo/estadisticas',           [AdminsController::class, 'principal'])->name(                  'sistema.ceo.estadisticas');

		});
    
    // DIOS
		Route::middleware(['web', RoleMiddleware::class . ':dios'])->group(function () {
	    
	    Route::get(   '/dios/ceo',                 [CeoController::class, 'principal'])->name(                  'sistema.dios.ceo');
			Route::put(   '/dios/ceo/usuarios/{user}', [CeoController::class, 'update'])->name(                     'sistema.dios.ceo.update');
			Route::delete('/dios/ceo/usuarios/{user}', [CeoController::class, 'destroy'])->name(                    'sistema.dios.ceo.destroy');
			Route::delete('/dios/ceo/whatsapp/{id}',   [CeoController::class, 'destroyWhatsapp'])->name(            'sistema.dios.ceo.whatsapp.destroy');
			Route::get(   '/dios/ceo/asignar',         [CeoController::class, 'mostrarFormularioAsignacion'])->name('sistema.dios.ceo.asignar.form');
			Route::post(  '/dios/ceo/asignar',         [CeoController::class, 'asignarRol'])->name(                 'sistema.dios.ceo.asignar.rol');
			Route::get(   '/dios/ceo/buscar_usuario',  [CeoController::class, 'buscar_usuario'])->name(             'sistema.dios.ceo.buscar_usuario');

	    Route::get(   '/dios/dios',                 [DiosController::class, 'principal'])->name(                  'sistema.dios.dios');
			Route::put(   '/dios/dios/usuarios/{user}', [DiosController::class, 'update'])->name(                     'sistema.dios.dios.update');
			Route::delete('/dios/dios/usuarios/{user}', [DiosController::class, 'destroy'])->name(                    'sistema.dios.dios.destroy');
			Route::delete('/dios/dios/whatsapp/{id}',   [DiosController::class, 'destroyWhatsapp'])->name(            'sistema.dios.dios.whatsapp.destroy');
			Route::get(   '/dios/dios/asignar',         [DiosController::class, 'mostrarFormularioAsignacion'])->name('sistema.dios.dios.asignar.form');
			Route::post(  '/dios/dios/asignar',         [DiosController::class, 'asignarRol'])->name(                 'sistema.dios.dios.asignar.rol');
			Route::get(   '/dios/dios/buscar_usuario',  [DiosController::class, 'buscar_usuario'])->name(             'sistema.dios.dios.buscar_usuario');

		});
		
		// Cambiar Idioma
		Route::post('/idioma/cambiar', function (\Illuminate\Http\Request $request) {
		    $idioma = $request->input('idioma');

		    if (!array_key_exists($idioma, config('idiomas'))) {
		        abort(400, 'Idioma no v�lido');
		    }

		    if (auth()->check()) {
		        auth()->user()->detalle()->updateOrCreate([], ['idioma' => $idioma]);
		    }

		    Cookie::queue('idioma', $idioma, 60 * 24 * 30); // persistencia: 30 d�as

		    return back();
		})->name('cambiar.idioma');

    


    
    
});



Route::get('/test-livewire', function () {
    return view('test');
});

Route::post('/ole', [AjustesController::class, 'obtieneOLE'])->name('sistema.eventos.fechas_ole');
Route::get('/f/{key}',[AjustesController::class, 'obtieneFechasClave'])->name('sistema.eventos.fechas_clave');
Route::post('/r/{key}',[AjustesController::class, 'obtieneDatosRegistro'])->name('sistema.eventos.datos_registro');


// Importa también las rutas generadas por Breeze
require __DIR__.'/auth.php';"
p2ye7yZc,Untitled,AhmedAshraff,C++,Saturday 18th of October 2025 07:05:59 AM CDT,"#define _CRT_SECURE_NO_WARNINGS
#include <bits/stdc++.h>
#define boAshraf { ios_base::sync_with_stdio(false); cin.tie(NULL); }
#define ll long long
#define sz(s) (int)(s).size()
#define endl ""\n""
#define ordered_set tree<ll, null_type, less_equal<ll>, rb_tree_tag, tree_order_statistics_node_update>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;

void File();
void sol();
int  f[(int)1e5+5];
void KMP(const string&pat){
    int len = 0;
    f[0] = 0;
    for (int i = 1; i < pat.size(); ++i) {
        while (len>0 && pat[i] != pat[len])
            len = f[len - 1];
        if (pat[i] == pat[len])
            ++len;
        f[i] = len;
    }
}
vector<vector<int>>aut;
void compute_automaton(string s) {
    s += '#';
    int n = s.size();
    aut.assign(n, vector<int>(27));
    for (int i = 0; i < n; i++) {
        for (int c = 0; c < 26; c++) {
            if (i > 0 && 'a' + c != s[i])
                aut[i][c] = aut[f[i - 1]][c];
            else
                aut[i][c] = i + ('a' + c == s[i]);
            aut[i][26]=max(aut[i][c],aut[i][26]);
        }
    }
}
string pat,s;
const int N=1e4,M=1e3;
int n,m;
int idd;
int dp[N][M];
int vis[N][M];
int rec(int i,int match){
    if(match==m)return 1e9;
    if(i==n)return 0;
    int &ret=dp[i][match];
    if(vis[i][match]==idd)return ret;
    vis[i][match]=idd;
    ret=1e9;
    if(s[i]==pat[match]){
        ret=min(rec(i+1,match)+1,rec(i+1,match+1));
    }
    int sz=aut[match][s[i]-'a'];
    ret= min(ret,rec(i+1,sz));
    return ret;
}
int main() {
    boAshraf
    File();
    int t = 1;
    //cin >> t;
    while (t--) {
        sol();
    }
    return 0;
}
void sol() {
    while(cin>>s>>pat){
        KMP(pat);
        compute_automaton(pat);
        n=s.size();m=pat.size();
        ++idd;
        cout<<rec(0,0)<<endl;
    }
}

void File() {
#ifndef ONLINE_JUDGE
    freopen(""input.txt"", ""r"", stdin);
    freopen(""output.txt"", ""w"", stdout);
#endif
}"
hBbPcjLP,Ethos_OA_4,chheem_tapak_tam_tam,C++,Saturday 18th of October 2025 06:35:43 AM CDT,"#include<bits/stdc++.h>
using namespace std;

#define int long long

void dfs(int node, int par, vector<vector<pair<int, int>>> &adj, vector<int> &values){
    for(auto &neg: adj[node]){
        if(neg.first!=par){
            values[neg.first] = values[node] + neg.second;
            dfs(neg.first, par, adj, values);
        }
    }
}

signed main(){
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    int n;
    cin >> n;
    vector<int> v(n);
    int mx = 0;
    for (int i = 0; i < n; i++) {
        cin >> v[i];
        mx = max(v[i], mx);
    }
    vector<vector<int>> edges(n-1, vector<int>(2));
    for (int i = 0; i < n-1; i++) {
        cin >> edges[i][0] >> edges[i][1];
    }
    int out = INT_MAX;
    for (int ii = 0; ii < (1<<(n-1)); ii++) {
        vector<vector<pair<int, int>>> adj(n);
        for(int j=0; j<n-1; j++){
            if((ii>>j)&1){
                adj[edges[j][0]].push_back({edges[j][1], 1});
                adj[edges[j][1]].push_back({edges[j][0], 1});
            } else{
                adj[edges[j][0]].push_back({edges[j][1], -1});
                adj[edges[j][1]].push_back({edges[j][0], -1});
            }
        }
        for(int i=0; i<n; i++){
            vector<int> values;
            for(int j=v[i]; j<=mx; j++){
                values[i] = j;
                dfs(i, -1, adj, values);
                int sum = 0;
                for(int k=0; k<n; k++){
                    if(values[k]<v[k]){
                        sum = -1;
                        break;
                    } else {
                        sum += (values[k]-v[k]);
                    }
                }
                if(sum>=0) out = min(out, sum);
            }
        }
    }
}"
v48uUgLD,Untitled,ABDELRHMAN_SAEED007,C++,Saturday 18th of October 2025 05:53:08 AM CDT,"#include <bits/stdc++.h>
using namespace std;
#define ld long double
#define F first
#define S second
#define Lnode 2*node+1
#define Rnode 2*node+2
#define MID (l+r>>1)
#define el '\n'
#define coutf(x) for(auto v:(x)) cout<<v<<' '; cout<<el
#define coutp(x) for(auto v:(x)) cout<<v.F<<' '<<v.S<<el
#define cinl(x) for(auto &v:(x)) cin>>v;
#define all(x)  x.begin(),x.end()
#define ll long long
#define sz(x)  (int)x.size()
#define pi pair<ll,ll>
#define pii pair<ll,pair<ll,ll>>
#define vi vector<ll>
using ull = unsigned long long;
string x,y;
int n,m;
int idx=1;
vector<ll>pref;

vector<ll>compute(const string& s)
{
    int sz=s.size();
    vector<ll>phi(sz,0);
    for (int i=1,k=0;i<sz;i++){
        k=phi[i-1];
        while (k>0&&s[i]!=s[k])k=phi[k-1];
        if (s[i]==s[k])k++;
        phi[i]=k;
    }
    return phi;
}
const int N=1e4+4,M=1e3+3,oo=1e9;
int dp[N][M],vis[N][M];
int autom[M][26],autovis[M][26];
int next_j(int j,char c)
{
    if (j==0) return (y[0]==c);
    if (y[j]==c)return j+1;
    int &ret=autom[j][c-'a'];
    if (autovis[j][c-'a']==idx)return ret;
    autovis[j][c-'a']=idx;

    return ret=next_j(pref[j-1],c);
}
int kmp(int i,int j){
    if (j>=m)return oo;
    if (i>=n)return 0;
    int &ret=dp[i][j];
    if (vis[i][j]==idx)return ret;
    vis[i][j]=idx;
    ret=oo;
    ret=min(ret,1+kmp(i+1,j));

    j=next_j(j,x[i]);
        ret=min(ret,kmp(i+1,j));

    return ret;
}

void solve()
{
    while(cin>>x>>y)
    {

    n=x.size(),m=y.size();
    pref=compute(y);
    cout<<kmp(0,0);
    idx++;

    }



}




int32_t main(){
#ifndef ONLINE_JUDGE
    freopen(""in.txt"", ""r"", stdin);
    //freopen(""output.txt"", ""w"", stdout);
#endif


    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int tc = 1;
    //cin >> tc;
    for (int i = 1; i <= tc; i++){solve();}
    return 0;
}

/*
*/
"
zR3MGxH5,23424 domashno,slavi146,C,Saturday 18th of October 2025 05:51:12 AM CDT,"#include <stdio.h>

int main(void){
    unsigned char led = 2; // 00000010 // 1
    led |= (1<<2) | (1<<4); // 00010110 
    printf(""%d\n"",led); // 00010100 // 2
    led & = ~(1<<1);
    printf(""%d\n"",led);//00010100 // 3
    if (led & (1<<6))//00010100
        printf((""the seventh bit is 1\n""))
    else
        printf((""seventh bit is 0\n""))
    return 0;
    }
    "
XZKpfxkn,auto equip script (testing),Dragos2K11,Lua,Saturday 18th of October 2025 04:22:33 AM CDT,"-- LocalScript (put in StarterPlayerScripts)

local Players = game:GetService(""Players"")
local UserInputService = game:GetService(""UserInputService"")

local player = Players.LocalPlayer
local backpack = player:WaitForChild(""Backpack"")

-- the name of the tool we want to keep re-equipped; nil when nothing selected
local desiredToolName = nil

-- helper: find a Tool instance by name in Backpack or Character
local function findToolByName(name)
	if not name then return nil end
	local char = player.Character
	local tool = backpack:FindFirstChild(name)
	if tool and tool:IsA(""Tool"") then return tool end
	if char then
		local t2 = char:FindFirstChild(name)
		if t2 and t2:IsA(""Tool"") then return t2 end
	end
	return nil
end

-- equip a Tool instance using the humanoid (works client-side)
local function equipToolInstance(tool)
	if not tool then return end
	local char = player.Character
	if not char then return end
	local humanoid = char:FindFirstChildOfClass(""Humanoid"")
	if humanoid then
		pcall(function() humanoid:EquipTool(tool) end)
	end
end

-- equip the first tool in the backpack (by order), set it as desired
local function equipFirstToolInBackpack()
	for _, obj in ipairs(backpack:GetChildren()) do
		if obj:IsA(""Tool"") then
			desiredToolName = obj.Name
			equipToolInstance(obj)
			return
		end
	end
	-- nothing found
	desiredToolName = nil
end

-- Called when a tool is unequipped. If it's our desired tool, re-equip it.
local function onToolUnequipped(tool)
	if not desiredToolName then return end
	if not tool or not tool:IsA(""Tool"") then return end
	-- match by name to handle tool instances switching between Backpack/Character
	if tool.Name == desiredToolName then
		-- small delay so Roblox finishes the unequip process
		task.wait(0.05)
		local candidate = findToolByName(desiredToolName)
		if candidate then
			equipToolInstance(candidate)
		end
	end
end

-- connect Unequipped for tools currently in backpack and for future ones
local function bindToolConnections()
	-- connect existing tools
	for _, obj in ipairs(backpack:GetChildren()) do
		if obj:IsA(""Tool"") then
			obj.Unequipped:Connect(function() onToolUnequipped(obj) end)
		end
	end
	-- connect tools added later
	backpack.ChildAdded:Connect(function(child)
		if child:IsA(""Tool"") then
			child.Unequipped:Connect(function() onToolUnequipped(child) end)
		end
	end)
	-- if tools move into the character (equipped), also connect them
	player.CharacterAdded:Connect(function(char)
		-- connect any tools that are in character
		char.ChildAdded:Connect(function(c)
			if c:IsA(""Tool"") then
				c.Unequipped:Connect(function() onToolUnequipped(c) end)
			end
		end)
	end)
end

-- input handler: press ""1"" to equip first tool and start the auto-reequip behavior
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end
	if input.UserInputType == Enum.UserInputType.Keyboard then
		if input.KeyCode == Enum.KeyCode.One then
			equipFirstToolInBackpack()
		end
	end
end)

-- set up connections
bindToolConnections()

-- also handle case when character spawns and we already flagged a desired tool:
player.CharacterAdded:Connect(function()
	-- small delay to let humanoid exist
	task.wait(0.1)
	if desiredToolName then
		local t = findToolByName(desiredToolName)
		if t then equipToolInstance(t) end
	end
end)"
Ysq9ZMt9,бинарный поиск на массиве,nq1s788,Python,Saturday 18th of October 2025 04:07:18 AM CDT,"n = int(input())
a = sorted(list(map(int, input().split())))
x = int(input())
l = -1 #не включительно, < x
r = n #>= x
while r - l > 1:
    m = (r + l) // 2
    if a[m] < x:
        l = m
    else:
        r = m
if r == n:
    print('такого нет')
else:
    print(r)"
ATJDqrnV,Untitled,CurrentTutor,Java 5,Saturday 18th of October 2025 02:59:34 AM CDT,"    🫧🫧✨💎 🅲🆄🆁🆁🅴🅽🆃 🅲🅷🅴🅼🅸🅲🅰︎🅻🆂 💎✨🫧🫧           
              📝{C͜͡U͜͡R͜͡R͜͡E͜͡N͜͡T͜͡}{T͜͡U͜͡T͜͡O͜͡R͜͡S͜͡}{M͜͡E͜͡N͜͡U͜͡}📝                          
  

🔸 𝐓𝐎 𝐏𝐋𝐀𝐂𝐄 𝐀𝐍 𝐎𝐑𝐃𝐄𝐑 𝐅𝐎𝐋𝐋𝐎𝐖 𝐓𝐇𝐄 𝐈𝐍𝐒𝐑𝐔𝐂𝐓𝐈𝐎𝐍𝐒 𝐀𝐓 𝐓𝐇𝐄 𝐁𝐎𝐓𝐓𝐎𝐌 𝐎𝐅 𝐓𝐇𝐄 𝐁𝐈𝐍. 𝐈'𝐌 𝐎𝐅𝐓𝐄𝐍 𝐕𝐄𝐑𝐘 𝐁𝐔𝐒𝐘 𝐒𝐎 𝐄𝐌𝐀𝐈𝐋 𝐘𝐎𝐔𝐑 𝐎𝐑𝐃𝐄𝐑 𝐎𝐍𝐋𝐘 𝟏 𝐓𝐈𝐌𝐄 𝐈𝐍 𝐀 𝐒𝐄𝐏𝐄𝐑𝐀𝐓𝐄 𝐓𝐇𝐑𝐄𝐀𝐃 𝐓𝐇𝐀𝐓 𝐇𝐀𝐒 𝐍𝐎 𝐏𝐑𝐄𝐕𝐈𝐎𝐒 𝐎𝐑𝐃𝐄𝐑𝐒 𝐎𝐑 𝐎𝐋𝐃𝐄𝐑 𝐄𝐌𝐀𝐈𝐋𝐒 𝐖𝐈𝐓𝐇 𝐈𝐓. 𝐓𝐇𝐄𝐍  𝐖𝐀𝐈𝐓 𝐅𝐎𝐑 𝐌𝐄 𝐓𝐎 𝐑𝐄𝐒𝐏𝐎𝐍𝐃.  

{𝐀𝐋𝐋 𝐒𝐎𝐋𝐔𝐓𝐈𝐎𝐍𝐒 𝐀𝐑𝐄 𝐌𝐀𝐃𝐄 𝐖𝐈𝐓𝐇 𝐅𝐎𝐎𝐃 𝐆𝐑𝐀𝐃𝐄 𝐏𝐆, 𝐈 𝐇𝐀𝐕𝐄 𝐍𝐄𝐀𝐑𝐋𝐘 𝐀 𝐃𝐄𝐂𝐀𝐃𝐄 𝐎𝐅 𝐄𝐗𝐏𝐄𝐑𝐈𝐄𝐍𝐂𝐄 𝐌𝐀𝐊𝐈𝐍𝐆 𝐁𝐄𝐍𝐙𝐎 𝐒𝐎𝐋𝐔𝐓𝐈𝐎𝐍𝐒, 𝐓𝐇𝐄 𝐋𝐈𝐒𝐓𝐄𝐃 𝐒𝐓𝐑𝐄𝐍𝐆𝐓𝐇 𝐈𝐒 𝐄𝐗𝐀𝐂𝐓𝐋𝐘 𝐀𝐒 𝐈𝐓 𝐒𝐀𝐘𝐒}


⭐️𝐈'𝐌 𝐆𝐎𝐈𝐍𝐆 𝐓𝐎 𝐒𝐓𝐀𝐑𝐓 𝐃𝐎𝐈𝐍𝐆 𝐖𝐄𝐄𝐊𝐋𝐘 𝐒𝐏𝐄𝐂𝐈𝐀𝐋𝐒 𝐎𝐍 𝐃𝐈𝐅𝐅𝐄𝐑𝐄𝐍𝐓 𝐏𝐑𝐎𝐃𝐔𝐂𝐓𝐒. 𝐒𝐓𝐀𝐑𝐓𝐈𝐍𝐆 𝐖𝐄𝐃𝐍𝐄𝐒𝐃𝐀𝐘 𝐓𝐇𝐄 𝟏𝟓𝐓𝐇, 𝐈'𝐌 𝐆𝐎𝐈𝐍𝐆 𝐓𝐎 𝐃𝐎 ⚡️20% 𝐎𝐅𝐅 𝐀𝐋𝐋 𝐁𝐄𝐍𝐙𝐎 𝐒𝐎𝐋𝐔𝐓𝐈𝐎𝐍𝐒⚡️ 
𝐀𝐒 𝐖𝐄𝐋𝐋 𝐀𝐒 ⚡️𝟏𝟎% 𝐎𝐅𝐅 𝐀𝐋𝐋 𝐍𝐀𝐒𝐀𝐋 𝐒𝐏𝐑𝐀𝐘𝐒.⚡️

 
💎 𝐍𝐈𝐅𝐎𝐗𝐈𝐏𝐀𝐌 𝐒𝐎𝐋𝐔𝐓𝐈𝐎𝐍 {5𝐌𝐆/𝐌𝐋} 
    10𝐌𝐋 𝐆𝐋𝐀𝐒𝐒 𝐃𝐑𝐎𝐏𝐏𝐄𝐑 𝐁𝐎𝐓𝐓𝐋𝐄: $25✨  
    30𝐌𝐋 𝐀𝐌𝐁𝐄𝐑 𝐆𝐋𝐀𝐒𝐒 𝐃𝐑𝐎𝐏𝐏𝐄𝐑: $70✨


💎 𝐀𝐕𝐈𝐙𝐀𝐅𝐎𝐍𝐄 𝐒𝐎𝐋𝐔𝐓𝐈𝐎𝐍 {10𝐌𝐆/𝐌𝐋} 
    10𝐌𝐋 𝐆𝐋𝐀𝐒𝐒 𝐃𝐑𝐎𝐏𝐏𝐄𝐑 𝐁𝐎𝐓𝐓𝐋𝐄: $25✨


💎 𝐍𝐈𝐅𝐎𝐗𝐈𝐏𝐀𝐌 & 𝐀𝐕𝐈𝐙𝐀𝐅𝐎𝐍𝐄 𝐒𝐎𝐋𝐔𝐓𝐈𝐎𝐍  
   {5𝐌𝐆/𝐌𝐋} 𝐍𝐈𝐅𝐎𝐗𝐈𝐏𝐀𝐌 & {10𝐌𝐆/𝐌𝐋} 𝐀𝐕𝐈𝐙𝐀𝐅𝐎𝐍𝐄 
   𝐌𝐈𝐗𝐄𝐃 𝐈𝐍 𝐀 10𝐌𝐋 𝐆𝐋𝐀𝐒𝐒 𝐃𝐑𝐎𝐏𝐏𝐄𝐑 𝐁𝐎𝐓𝐓𝐋𝐄: $25✨

  
💎 𝐄𝐓𝐇𝐘𝐋𝐁𝐑𝐎𝐌𝐀𝐙𝐎𝐋𝐀𝐌 𝐒𝐎𝐋𝐔𝐓𝐈𝐎𝐍 {6𝐌𝐆/𝐌𝐋} 
    10𝐌𝐋 𝐁𝐋𝐀𝐂𝐊 & 𝐆𝐎𝐋𝐃 𝐆𝐋𝐀𝐒𝐒 𝐃𝐑𝐎𝐏𝐏𝐄𝐑 𝐁𝐎𝐓𝐓𝐋𝐄: $25✨
    30𝐌𝐋 𝐂𝐋𝐄𝐀𝐑 𝐅𝐑𝐎𝐒𝐓𝐄𝐃 𝐆𝐋𝐀𝐒𝐒 𝐃𝐑𝐎𝐏𝐏𝐄𝐑 𝐁𝐎𝐓𝐓𝐋𝐄: $65✨


💎 𝐍𝐈𝐅𝐎𝐗𝐈𝐏𝐀𝐌, 𝐄𝐓𝐇𝐘𝐋𝐁𝐑𝐎𝐌𝐀𝐙𝐎𝐋𝐀𝐌, 𝐀𝐍𝐃 𝐀𝐕𝐈𝐙𝐀𝐅𝐎𝐍𝐄                𝐒𝐎𝐋𝐔𝐓𝐈𝐎𝐍 𝐄𝐕𝐄𝐍𝐋𝐘 𝐌𝐈𝐗𝐄𝐃 𝐈𝐍 𝐀 30𝐌𝐋 𝐂𝐋𝐄𝐀𝐑 𝐅𝐑𝐎𝐒𝐓𝐄𝐃 𝐆𝐋𝐀𝐒𝐒 𝐃𝐑𝐎𝐏𝐏𝐄𝐑 𝐁𝐎𝐓𝐓𝐋𝐄: $75✨


💎 𝐎𝐃𝐒𝐌𝐓 𝐒𝐎𝐋𝐔𝐓𝐈𝐎𝐍 {20𝐌𝐆/𝐌𝐋} 
     15𝐌𝐋 𝐎𝐅 𝐅𝐋𝐀𝐕𝐎𝐑𝐄𝐃 𝐏𝐆 
     𝐈𝐍 𝐃𝐑𝐎𝐏𝐏𝐄𝐑 𝐁𝐎𝐓𝐓𝐋𝐄𝐒: $20✨      


💎 𝐀𝐃𝐃𝐄𝐑𝐀𝐋𝐋 𝐁974 (30𝐌𝐆) 𝐑𝐄𝐏𝐋𝐈𝐂𝐀𝐒
    𝐀 𝐌𝐈𝐗 𝐎𝐅 28𝐌𝐆 𝐀𝐌𝐏 𝐒𝐔𝐋𝐅𝐀𝐓𝐄 & 2𝐌𝐆 𝐌-𝐀𝐌𝐏 
     $5 𝐄𝐀𝐂𝐇✨ 𝐎𝐑 10 𝐅𝐎𝐑 $40✨


💎 𝐁𝐑𝐎𝐌𝐀𝐙𝐎𝐋𝐀𝐌 4𝐌𝐆 𝐒903 ""𝐇𝐔𝐋𝐊"" 𝐁𝐀𝐑𝐒 
    (𝐋𝐀𝐒𝐓 𝐎𝐅 𝐓𝐇𝐄 𝐁𝐑𝐎𝐌𝐀𝐙 𝐏𝐑𝐄𝐒𝐒𝐄𝐒 𝐅𝐑𝐎𝐌 𝐓𝐇𝐄 𝐒𝐔𝐏𝐏𝐋𝐈𝐄𝐑)
         $3.00 𝐄𝐀𝐂𝐇✨
  

💎 3𝐌𝐆 𝐑039 𝐄𝐓𝐈𝐙𝐎𝐋𝐀𝐌 𝐁𝐀𝐑𝐒 🚌
      1-50 𝐅𝐎𝐑: $3.25 𝐄𝐀𝐂𝐇✨
       50+ 𝐅𝐎𝐑: $2.75 𝐄𝐀𝐂𝐇✨
        
    
💎 3𝐌𝐆 𝐅𝐋𝐔𝐀𝐋𝐏𝐑𝐀𝐙𝐎𝐋𝐀𝐌 𝐁𝐀𝐑𝐒 🚌
      𝐑039 ""𝐒𝐂𝐇𝐎𝐎𝐋 𝐁𝐔𝐒𝐒𝐄𝐒""
      1-50 𝐅𝐎𝐑: $3.25 𝐄𝐀𝐂𝐇✨
       50+ 𝐅𝐎𝐑: $2.75 𝐄𝐀𝐂𝐇✨


💎 𝐂𝐋𝐎𝐁𝐑𝐎𝐌𝐀𝐙𝐎𝐋𝐀𝐌 1.85𝐌𝐆 𝐒903 𝐁𝐀𝐑𝐒 
         $1.50 𝐄𝐀𝐂𝐇✨ (𝐒𝐀𝐋𝐄 𝐏𝐑𝐈𝐂𝐄)


💎 𝐊𝐄𝐓𝐀𝐌𝐈𝐍𝐄 𝐍𝐎𝐒𝐄 𝐒𝐏𝐑𝐀𝐘𝐒 
    5𝐌𝐋 𝐒𝐏𝐑𝐀𝐘: $20✨ (300𝐌𝐆 𝐏𝐄𝐑 𝐁𝐎𝐓𝐓𝐋𝐄) 
   10𝐌𝐋 𝐒𝐏𝐑𝐀𝐘: $35✨ (600𝐌𝐆 𝐏𝐄𝐑 𝐁𝐎𝐓𝐓𝐋𝐄) 
   20𝐌𝐋 𝐒𝐏𝐑𝐀𝐘: $65✨ (1.2𝐆𝐬  𝐏𝐄𝐑 𝐁𝐎𝐓𝐓𝐋𝐄)


💎 𝐂𝐀𝐋𝐕𝐈𝐍 𝐊𝐋𝐄𝐈𝐍 𝐍𝐎𝐒𝐄 𝐒𝐏𝐑𝐀𝐘𝐒 
   (𝐌𝐀𝐃𝐄 𝐖𝐈𝐓𝐇 𝐓𝐇𝐄 𝐅𝐈𝐍𝐄𝐒𝐓 𝐂𝐎𝐊𝐄 & 𝐊𝐄𝐓𝐀𝐌𝐈𝐍𝐄)
   5𝐌𝐋 𝐒𝐏𝐑𝐀𝐘: $35✨ (300𝐌𝐆 𝐊𝐄𝐓, 200𝐌𝐆 ❄️)
  10𝐌𝐋 𝐒𝐏𝐑𝐀𝐘: $60✨ (600𝐌𝐆 𝐊𝐄𝐓, 400𝐌𝐆 ❄️)
 20𝐌𝐋 𝐒𝐏𝐑𝐀𝐘: $110✨ (1200𝐌𝐆 𝐊𝐄𝐓, 800𝐌𝐆 ❄️)


💎 𝐀𝐊 𝐍𝐎𝐒𝐄 𝐒𝐏𝐑𝐀𝐘 (𝐀𝐌𝐏 𝐒𝐔𝐋𝐅𝐀𝐓𝐄 & 𝐊𝐄𝐓) 
   5𝐌𝐋 𝐒𝐏𝐑𝐀𝐘: $45✨ (300𝐌𝐆 𝐊𝐄𝐓, 200𝐌𝐆 𝐀𝐌𝐏)
  10𝐌𝐋 𝐒𝐏𝐑𝐀𝐘: $80✨ (600𝐌𝐆 𝐊𝐄𝐓, 400𝐌𝐆 𝐀𝐌𝐏)


💎 𝐊𝐄𝐓𝐀𝐌𝐈𝐍𝐄 𝐒𝐇𝐀𝐑𝐃𝐒 (𝐓𝐇𝐄 𝐁𝐄𝐒𝐓 𝐊𝐄𝐓 𝐘𝐎𝐔'𝐋𝐋 𝐆𝐄𝐓)
       1 𝐆𝐑𝐀𝐌: $50✨   
      2 𝐆𝐑𝐀𝐌𝐒: $95✨
 🎱 3.5 𝐆𝐑𝐀𝐌𝐒: $145✨   
      7 𝐆𝐑𝐀𝐌𝐒: $240✨
    1/2 𝐎𝐔𝐍𝐂𝐄: $400✨


💎 2-𝐅𝐃𝐂𝐊 *98.6% 𝐏𝐔𝐑𝐈𝐓𝐘 (2-Fluorodeschloroketamine) 🧚🏿‍♀️
        500𝐌𝐆: $40✨
      1 𝐆𝐑𝐀𝐌: $75✨
     2 𝐆𝐑𝐀𝐌𝐒: $135✨
🎱 3.5 𝐆𝐑𝐀𝐌𝐒: $210✨


💎 2-𝐅𝐗𝐢𝐏𝐫 
    𝐀 𝐇𝐘𝐁𝐑𝐈𝐃 𝐌𝐈𝐗 𝐎𝐅 𝐅𝐗𝐄 & 𝐌𝐗𝐢𝐏𝐫
     1 𝐆𝐑𝐀𝐌: $55✨ 
    2 𝐆𝐑𝐀𝐌𝐒: $100✨


💎 𝐀𝐌𝐏𝐇𝐄𝐓𝐀𝐌𝐈𝐍𝐄 𝐒𝐔𝐋𝐅𝐀𝐓𝐄 
      250𝐌𝐆: $25✨
      500𝐌𝐆: $40✨
     1000𝐌𝐆: $80✨


💎 (𝐌𝐀𝐍𝐆𝐎 𝐈𝐍𝐅𝐔𝐒𝐄𝐃) 𝐀𝐌𝐏𝐇𝐄𝐓𝐀𝐌𝐈𝐍𝐄 𝐒𝐔𝐋𝐅𝐀𝐓𝐄 🥭 
      250𝐌𝐆: $25✨ 
      500𝐌𝐆: $40✨ 
     1000𝐌𝐆: $80✨


💎 𝐃𝐄𝐗𝐓𝐑𝐎𝐀𝐌𝐏𝐇𝐄𝐓𝐀𝐌𝐈𝐍𝐄 𝐏𝐎𝐖𝐃𝐄𝐑 
    𝐄𝐗𝐓𝐑𝐄𝐌𝐄𝐋𝐘 𝐏𝐔𝐑𝐄, 𝐂𝐔𝐒𝐓𝐎𝐌 𝐒𝐘𝐍𝐓𝐇, 𝐋𝐈𝐌𝐈𝐓𝐄𝐃 𝐁𝐀𝐓𝐂𝐇
    𝐕𝐄𝐑𝐘 𝐑𝐀𝐑𝐄 𝐓𝐎 𝐒𝐄𝐄 𝐈𝐍 𝐏𝐎𝐖𝐃𝐄𝐑 𝐅𝐎𝐑𝐌.
    {𝐈 𝐇𝐀𝐕𝐄 𝐌𝐎𝐑𝐄 𝐎𝐍 𝐇𝐀𝐍𝐃, 𝐏𝐑𝐈𝐂𝐄𝐁𝐑𝐄𝐀𝐊𝐒 
    𝐀𝐕𝐀𝐈𝐋𝐀𝐁𝐋𝐄 𝐅𝐎𝐑 𝐌𝐔𝐋𝐓𝐈𝐏𝐋𝐄 𝐆𝐑𝐀𝐌𝐒 𝐎𝐍𝐋𝐘)
       250𝐌𝐆: $40✨
       500𝐌𝐆: $80✨ 
      1000𝐌𝐆: $160✨       


💎 2/3-𝐅𝐄𝐀 (Fluoroethamphetamine) 𝐓𝐀𝐁𝐋𝐄𝐓𝐒 
   (𝐘𝐄𝐋𝐋𝐎𝐖 𝐏𝐄𝐍𝐓𝐀𝐆𝐎𝐍 𝐖/ 𝐁𝐓𝐂 𝐒𝐘𝐌𝐁𝐎𝐋 𝐏𝐑𝐄𝐒𝐒)
   40𝐌𝐆 𝐎𝐅 2-𝐅𝐄𝐀 & 120𝐌𝐆 𝐎𝐅 3-𝐅𝐄𝐀 𝐈𝐍 𝐄𝐀𝐂𝐇 𝐓𝐀𝐁𝐋𝐄𝐓
         1 𝐏𝐈𝐋𝐋: $15✨ 
        2 𝐏𝐈𝐋𝐋𝐒: $23✨
        4 𝐏𝐈𝐋𝐋𝐒: $42✨
        6 𝐏𝐈𝐋𝐋𝐒: $60✨ 
       10 𝐏𝐈𝐋𝐋𝐒: $95✨


💎 4-𝐅𝐌𝐀 (4-Fluoromethamphetamine) {𝐋𝐎𝐖 𝐒𝐓𝐎𝐂𝐊}
     250𝐌𝐆: $25✨
     500𝐌𝐆: $45✨
    1000𝐌𝐆: $80✨


💎 2-𝐌𝐌𝐂 (2-Methylmethcathinone) 
     250𝐌𝐆: $20✨
     500𝐌𝐆: $40✨ 
    1000𝐌𝐆: $70✨


💎 4-𝐌𝐌𝐂 *99% 𝐏𝐔𝐑𝐈𝐓𝐘 (Mephedrone,4-methylmethcathinone) 
     250𝐌𝐆: $25✨
     500𝐌𝐆: $45✨
    1000𝐌𝐆: $80✨


💎 𝐎𝐃𝐒𝐌𝐓 𝐏𝐎𝐖𝐃𝐄𝐑 
      1 𝐆𝐑𝐀𝐌: $40✨
     2 𝐆𝐑𝐀𝐌𝐒: $75✨


💎 𝐏𝐢𝐏𝐓𝐀𝐏𝐄𝐍𝐓𝐀𝐃𝐎𝐋 (𝐀 𝐃𝐄𝐑𝐈𝐕𝐈𝐓𝐈𝐕𝐄 𝐎𝐅 𝐓𝐀𝐏𝐄𝐍𝐓𝐀𝐃𝐎𝐋)
   {50𝐌𝐆 𝐈𝐒 𝐄𝐐𝐔𝐈𝐕𝐄𝐋𝐄𝐍𝐓 𝐓𝐎 10𝐌𝐆 𝐎𝐅 𝐎𝐗𝐘}
   (𝐒𝐓𝐑𝐄𝐍𝐆𝐓𝐇 𝐀𝐍𝐃 𝐏𝐑𝐈𝐂𝐄 𝐖𝐈𝐋𝐋 𝐁𝐄 𝐏𝐎𝐒𝐓𝐄𝐃 𝐒𝐇𝐎𝐑𝐓𝐋𝐘)


💎 𝐋𝐈𝐆𝐇𝐓 𝐂𝐇𝐀𝐌𝐏𝐀𝐆𝐍𝐄 𝐌𝐃𝐌𝐀 
    𝐕𝐄𝐑𝐘 𝐇𝐈𝐆𝐇 𝐏𝐔𝐑𝐈𝐓𝐘
         1 𝐆𝐑𝐀𝐌: $50✨
        2 𝐆𝐑𝐀𝐌𝐒: $95✨
   🎱 3.5 𝐆𝐑𝐀𝐌𝐒: $140✨


💎 𝐌𝐃𝐀 (𝐒𝐀𝐒𝐒) 
       500𝐌𝐆: $50✨
   𝐎𝐍𝐄 𝐆𝐑𝐀𝐌: $90✨
  𝐓𝐖𝐎 𝐆𝐑𝐀𝐌𝐒: $175✨


💎 𝐏𝐑𝐄𝐌𝐈𝐔𝐌 90% + 𝐏𝐔𝐑𝐄 𝐂𝐎𝐊𝐄 ❄️(𝐎𝐎𝐒) 
        1 𝐆𝐑𝐀𝐌: $60✨
       2 𝐆𝐑𝐀𝐌𝐒: $100✨ 
  🎱 3.5 𝐆𝐑𝐀𝐌𝐒: $165✨


💎 𝐒𝐔𝐁𝐔𝐓𝐄𝐗 𝐓𝐄𝐕𝐀 𝐁𝐑𝐀𝐍𝐃 8𝐌𝐆 𝐏𝐈𝐋𝐋𝐒 
      1-4: $10✨ 𝐄𝐀𝐂𝐇 
        5+ : 8✨ 𝐄𝐀𝐂𝐇 
 30 𝐂𝐎𝐔𝐍𝐓 𝐒𝐄𝐀𝐋𝐄𝐃 𝐁𝐎𝐓𝐓𝐋𝐄 𝐀𝐋𝐒𝐎 𝐀𝐕𝐀𝐈𝐋𝐀𝐁𝐋𝐄: $225✨

                                  
💎 𝐒𝐔𝐁𝐎𝐗𝐎𝐍𝐄 8𝐌𝐆 𝐏𝐈𝐋𝐋 (54/375)
     $10 𝐄𝐀𝐂𝐇 𝐎𝐑 5 𝐅𝐎𝐑 $40✨ 


💎 𝐏𝐑𝐄𝐆𝐀𝐁𝐋𝐈𝐍 𝐏𝐎𝐖𝐃𝐄𝐑 
     1 𝐆𝐑𝐀𝐌: $10✨
     3 𝐆𝐑𝐀𝐌𝐒: $25✨
     5 𝐆𝐑𝐀𝐌𝐒: $40✨
    10 𝐆𝐑𝐀𝐌𝐒: $70✨ 


💎 𝐆𝐀𝐁𝐀𝐏𝐄𝐍𝐓𝐈𝐍 𝐑𝐱 𝐓𝐀𝐁𝐋𝐄𝐓𝐒 
     800𝐌𝐆: $2.50 𝐄𝐀𝐂𝐇✨ 
     600𝐌𝐆: $2.00 𝐄𝐀𝐂𝐇✨ 
     300𝐌𝐆: $1.00 𝐄𝐀𝐂𝐇✨

—————————————————————————————————————————— 

   🔸𝐒𝐇𝐈𝐏𝐏𝐈𝐍𝐆: 𝐏𝐑𝐈𝐎𝐑𝐈𝐓𝐘: $12✨ 📦
   🔸𝐆𝐑𝐎𝐔𝐍𝐃 𝐀𝐃𝐕𝐀𝐍𝐓𝐀𝐆𝐄: $6✨ 📦
 
🚫 𝐍𝐎 𝐄𝐗𝐏𝐑𝐄𝐒𝐒 𝐒𝐇𝐈𝐏𝐏𝐈𝐍𝐆. 𝐃𝐎𝐍𝐓 𝐄𝐕𝐄𝐍 𝐀𝐒𝐊 🚫
     
    
     📝⭐ 𝐎𝐑𝐃𝐄𝐑 𝐈𝐍𝐒𝐓𝐑𝐔𝐂𝐓𝐈𝐎𝐍𝐒 ⭐️📝
          —————————————————————
{𝐅𝐀𝐈𝐋𝐔𝐑𝐄 𝐓𝐎 𝐅𝐎𝐋𝐋𝐎𝐖 𝐓𝐇𝐄 𝐈𝐍𝐒𝐓𝐑𝐔𝐂𝐓𝐈𝐎𝐍𝐒 𝐌𝐔𝐋𝐓𝐈𝐏𝐋𝐄 
 𝐓𝐈𝐌𝐄𝐒 𝐖𝐈𝐋𝐋 𝐑𝐄𝐒𝐔𝐋𝐓 𝐈𝐍 𝐀 𝐁𝐀𝐍 𝐅𝐑𝐎𝐌 𝐎𝐑𝐃𝐄𝐑𝐈𝐍𝐆}
 
    📧 𝐄𝐌𝐀𝐈𝐋: 𝐂𝐔𝐑𝐑𝐄𝐍𝐓𝐂𝐇𝐄𝐌𝐒@𝐏𝐑𝐎𝐓𝐎𝐍.𝐌𝐄 
  
   {𝐓𝐇𝐈𝐒 𝐄𝐌𝐀𝐈𝐋 𝐈𝐒 𝐒𝐓𝐑𝐈𝐂𝐓𝐋𝐘 𝐅𝐎𝐑 𝐎𝐑𝐃𝐄𝐑𝐒!!}
 
*𝐃𝐎𝐍'𝐓 𝐒𝐏𝐀𝐌 𝐌𝐘 𝐈𝐍𝐁𝐎𝐗 𝐁𝐘 𝐒𝐄𝐍𝐃𝐈𝐍𝐆 𝐌𝐔𝐋𝐓𝐈𝐏𝐋𝐄 𝐄𝐌𝐀𝐈𝐋𝐒 𝐈𝐍 𝐀 𝐑𝐎𝐖, 𝐀𝐋𝐒𝐎 𝐃𝐄𝐋𝐄𝐓𝐄 𝐄𝐕𝐄𝐑𝐘 𝐄𝐌𝐀𝐈𝐋 𝐅𝐑𝐎𝐌 𝐏𝐑𝐄𝐕𝐈𝐎𝐔𝐒 𝐎𝐑𝐃𝐄𝐑𝐒 𝐀𝐍𝐃 𝐌𝐀𝐊𝐄 𝐒𝐔𝐑𝐄 𝐓𝐎 𝐄𝐌𝐏𝐓𝐘 𝐓𝐇𝐄 𝐓𝐑𝐀𝐒𝐇 𝐅𝐎𝐋𝐃𝐄𝐑 𝐒𝐎 𝐈𝐓'𝐒 𝐄𝐌𝐏𝐓𝐘 𝐀𝐓 𝐀𝐋𝐋 𝐓𝐈𝐌𝐄𝐒. 𝐌𝐄𝐀𝐍𝐈𝐍𝐆 𝐎𝐍𝐂𝐄 𝐘𝐎𝐔𝐑 𝐎𝐑𝐃𝐄𝐑 𝐈𝐒 𝐂𝐎𝐌𝐏𝐋𝐄𝐓𝐄, 𝐘𝐎𝐔 𝐃𝐄𝐋𝐄𝐓𝐄 𝐀𝐋𝐋 𝐄𝐌𝐀𝐈𝐋𝐒 𝐀𝐒𝐒𝐎𝐂𝐈𝐀𝐓𝐄𝐃 𝐖𝐈𝐓𝐇 𝐓𝐇𝐀𝐓 𝐎𝐑𝐃𝐄𝐑 
 
✅ 𝐌𝐀𝐊𝐄 𝐒𝐔𝐑𝐄 𝐘𝐎𝐔 𝐀𝐑𝐄 𝐄𝐌𝐀𝐈𝐋𝐈𝐍𝐆 𝐌𝐄 𝐅𝐑𝐎𝐌 𝐀𝐍 𝐄𝐍𝐂𝐑𝐘𝐏𝐓𝐄𝐃 𝐄𝐌𝐀𝐈𝐋 𝐒𝐄𝐑𝐕𝐈𝐂𝐄, 𝐒𝐔𝐂𝐇 𝐀𝐒 𝐏𝐑𝐎𝐓𝐎𝐍 𝐎𝐑 𝐒𝐈𝐌𝐈𝐋𝐈𝐀𝐑. 𝐈𝐍𝐂𝐋𝐔𝐃𝐄 𝐘𝐎𝐔𝐑 𝐒𝐈𝐆𝐍𝐀𝐋 𝐍𝐀𝐌𝐄 𝐀𝐓 𝐓𝐇𝐄 𝐁𝐄𝐆𝐈𝐍𝐍𝐈𝐍𝐆 𝐎𝐅 𝐓𝐇𝐄 𝐄𝐌𝐀𝐈𝐋. 𝐄𝐀𝐂𝐇 𝐄𝐌𝐀𝐈𝐋 𝐓𝐇𝐀𝐓 𝐏𝐄𝐑𝐓𝐀𝐈𝐍𝐒 𝐓𝐎 𝐓𝐇𝐄 𝐒𝐀𝐌𝐄 𝐎𝐑𝐃𝐄𝐑 𝐖𝐈𝐋𝐋 𝐂𝐎𝐍𝐓𝐈𝐍𝐔𝐄 𝐈𝐍 𝐓𝐇𝐄 𝐒𝐀𝐌𝐄 𝐓𝐇𝐑𝐄𝐀𝐃 𝐎𝐅 𝐄𝐌𝐀𝐈𝐋𝐒. 𝐁𝐄 𝐒𝐔𝐑𝐄 𝐘𝐎𝐔 𝐀𝐑𝐄 𝐒𝐓𝐀𝐑𝐓𝐈𝐍𝐆 𝐀 𝐍𝐄𝐖 𝐄𝐌𝐀𝐈𝐋 𝐓𝐇𝐑𝐄𝐀𝐃 𝐅𝐎𝐑 𝐄𝐀𝐂𝐇 𝐍𝐄𝐖 𝐎𝐑𝐃𝐄𝐑 𝐀𝐍𝐃 𝐃𝐄𝐋𝐄𝐓𝐄 𝐓𝐇𝐄 𝐎𝐋𝐃 𝐎𝐍𝐄𝐒.
 
✅ 𝐌𝐀𝐊𝐄 𝐀 𝐋𝐈𝐒𝐓 𝐎𝐅 𝐓𝐇𝐄 𝐏𝐑𝐎𝐃𝐔𝐂𝐓𝐒 𝐘𝐎𝐔'𝐑𝐄 𝐎𝐑𝐃𝐄𝐑𝐈𝐍𝐆.
𝐐𝐔𝐀𝐍𝐓𝐈𝐓𝐈𝐄𝐒:
𝐏𝐑𝐈𝐂𝐄 𝐏𝐄𝐑 𝐏𝐑𝐎𝐃𝐔𝐂𝐓:
𝐅𝐎𝐋𝐋𝐎𝐖𝐄𝐃 𝐁𝐘 𝐓𝐇𝐄 𝐓𝐎𝐓𝐀𝐋 𝐀𝐌𝐎𝐔𝐍𝐓 𝐎𝐅 𝐄𝐀𝐂𝐇 𝐏𝐑𝐎𝐃𝐔𝐂𝐓:
𝐒𝐇𝐈𝐏𝐏𝐈𝐍𝐆 𝐌𝐄𝐓𝐇𝐎𝐃: 𝐏𝐑𝐈𝐎𝐑𝐈𝐓𝐘 𝐎𝐑 𝐆𝐑𝐎𝐔𝐍𝐃 𝐀𝐃𝐕𝐀𝐍𝐓𝐀𝐆𝐄           
🚫❌ 𝐄𝐗𝐏𝐑𝐄𝐒𝐒 ❌🚫 𝐃𝐎𝐍'𝐓 𝐄𝐕𝐄𝐍 𝐀𝐒𝐊 𝐌𝐄 𝐓𝐎 𝐒𝐇𝐈𝐏 𝐄𝐗𝐏𝐑𝐄𝐒𝐒.
𝐓𝐇𝐄 𝐓𝐎𝐓𝐀𝐋 𝐂𝐎𝐒𝐓+ 𝐒𝐇𝐈𝐏𝐏𝐈𝐍𝐆:
𝐏𝐀𝐘𝐌𝐄𝐍𝐓 𝐌𝐄𝐓𝐇𝐎𝐃 (𝐁𝐓𝐂 𝐎𝐑 𝐗𝐌𝐑)              
 
✅ 𝐖𝐀𝐈𝐓 𝐅𝐎𝐑 𝐌𝐄 𝐓𝐎 𝐄𝐌𝐀𝐈𝐋 𝐘𝐎𝐔 𝐁𝐀𝐂𝐊 𝐀𝐅𝐓𝐄𝐑 𝐘𝐎𝐔𝐑 𝐎𝐑𝐃𝐄𝐑 𝐈𝐒 𝐒𝐄𝐍𝐓. *𝐃𝐎𝐍'𝐓 𝐒𝐄𝐍𝐃 𝐁𝐓𝐂 𝐁𝐄𝐅𝐎𝐑𝐄 𝐈 𝐒𝐄𝐄 𝐘𝐎𝐔𝐑 𝐎𝐑𝐃𝐄𝐑* (𝐄𝐒𝐏𝐄𝐂𝐈𝐀𝐋𝐋𝐘 𝐖𝐈𝐓𝐇𝐎𝐔𝐓 𝐒𝐄𝐍𝐃𝐈𝐍𝐆 𝐓𝐇𝐄 𝐓𝐗𝐈𝐃) 
𝐃𝐎 𝐍𝐎𝐓 𝐄𝐌𝐀𝐈𝐋 𝐌𝐄 𝐀𝐆𝐀𝐈𝐍 𝐖𝐈𝐓𝐇 𝐘𝐎𝐔𝐑 𝐒𝐀𝐌𝐄 𝐎𝐑𝐃𝐄𝐑 𝐓𝐎 𝐓𝐑𝐘 𝐓𝐎 𝐆𝐄𝐓 𝐌𝐘 𝐀𝐓𝐓𝐄𝐍𝐓𝐈𝐎𝐍, 𝐈𝐓 𝐖𝐀𝐒𝐓𝐄𝐒 𝐌𝐘 𝐓𝐈𝐌𝐄 𝐀𝐍𝐃 𝐌𝐀𝐊𝐄𝐒 𝐈𝐓 𝐌𝐎𝐑𝐄 𝐂𝐎𝐍𝐅𝐔𝐒𝐈𝐍𝐆. 
 
✅ 𝐀𝐅𝐓𝐄𝐑 𝐘𝐎𝐔 𝐒𝐄𝐍𝐃 𝐓𝐇𝐄 𝐌𝐎𝐍𝐄𝐘 (𝐂𝐎𝐈𝐍), 𝐄𝐌𝐀𝐈𝐋 𝐌𝐄 𝐁𝐀𝐂𝐊 𝐖𝐈𝐓𝐇 𝐓𝐇𝐄 𝐓𝐗𝐈𝐃 𝐍𝐔𝐌𝐁𝐄𝐑 𝐀𝐍𝐃 𝐘𝐎𝐔𝐑 𝐀𝐃𝐃𝐑𝐄𝐒𝐒, 𝐄𝐗𝐀𝐂𝐓𝐋𝐘 𝐇𝐎𝐖 𝐈𝐓 𝐋𝐎𝐎𝐊𝐒 𝐎𝐍 𝐀 𝐏𝐈𝐄𝐂𝐄 𝐎𝐅 𝐌𝐀𝐈𝐋. 
 
✅ 𝐓𝐑𝐀𝐂𝐊𝐈𝐍𝐆 𝐂𝐀𝐍 𝐁𝐄 𝐏𝐑𝐎𝐕𝐈𝐃𝐄𝐃 𝐁𝐔𝐓 𝐈 𝐑𝐄𝐂𝐎𝐌𝐌𝐄𝐍𝐃 𝐒𝐈𝐆𝐍𝐈𝐍𝐆 𝐔𝐏 𝐅𝐎𝐑 𝐈𝐍𝐅𝐎𝐑𝐌𝐄𝐃 𝐃𝐄𝐋𝐈𝐕𝐄𝐑𝐘. 
 
✅ 𝐀𝐅𝐓𝐄𝐑 𝐘𝐎𝐔𝐑 𝐏𝐀𝐂𝐊 𝐋𝐀𝐍𝐃𝐒 𝐏𝐋𝐄𝐀𝐒𝐄 𝐏𝐎𝐒𝐓 𝐀 𝐓𝐎𝐔𝐂𝐇𝐃𝐎𝐖𝐍 𝐏𝐈𝐂 𝐀𝐍𝐃 𝐑𝐄𝐕𝐈𝐄𝐖 𝐎𝐅 𝐘𝐎𝐔𝐑 𝐓𝐑𝐀𝐍𝐒𝐀𝐂𝐓𝐈𝐎𝐍. 𝐈𝐓 𝐂𝐀𝐍 𝐁𝐄 𝐀𝐒 𝐋𝐎𝐍𝐆 𝐎𝐑 𝐒𝐇𝐎𝐑𝐓 𝐀𝐒 𝐘𝐎𝐔 𝐖𝐀𝐍𝐓. 𝐀𝐍𝐃 𝐘𝐎𝐔 𝐂𝐀𝐍 𝐏𝐎𝐒𝐓 𝐈𝐓 𝐑𝐈𝐆𝐇𝐓 𝐈𝐍 𝐌𝐘 𝐆𝐑𝐎𝐔𝐏, 𝐎𝐑 𝐀𝐍𝐘 𝐎𝐓𝐇𝐄𝐑 𝐆𝐑𝐎𝐔𝐏𝐒 𝐓𝐇𝐀𝐓 𝐀𝐋𝐋𝐎𝐖 𝐕𝐄𝐍𝐃𝐎𝐑 𝐑𝐄𝐕𝐈𝐄𝐖𝐒.


🤟 𝐂𝐔𝐑𝐑𝐄𝐍𝐓 𝐓𝐔𝐓𝐎𝐑 / 𝐂𝐔𝐑𝐑𝐄𝐍𝐓 𝐂𝐇𝐄𝐌𝐒 "
AfC37XEE,Night-Weather_Controller,BigBlow_,Lua,Saturday 18th of October 2025 02:22:07 AM CDT,"-- Main control program: Day/Night and Weather management with clicker relay (non-blocking, with countdowns)
-- All code in English, no accents

-- CONFIGURATION

local envDetector = ""environment_detector_1""
local invSource = ""sophisticatedstorage:barrel_1""
local clicker = ""justdirethings:clickert1_1""
local clickerRSrelay = ""redstone_relay_3""
local clickerRSrelaySide = ""top""
local brasierRSrelay = ""redstone_relay_4""
local brasierRSrelaySide = ""bottom""

local delay = 1
local pulseTime = 0.2
local ritualCooldown = 30
local disableRainClearDuration = 600
local disableNightSkipDuration = 1200

local dayTablet = ""ars_nouveau:ritual_sunrise""
local weatherTablet = ""ars_nouveau:ritual_cloudshaping""
local rainItem = ""minecraft:gunpowder""
local thunderItem = ""minecraft:lapis_block""

local textScale = 1  -- 1.0 = normal, 0.5-5
local monitorRefresh = 0.5 --in seconds

-- STATE VARIABLES
local rainClearEnabled = true
local nightSkipEnabled = true
local rainClearDisableTimer = nil
local nightSkipDisableTimer = nil
local currentAction = ""Idle""

-- Ritual management
local ritualActive = false
local ritualType = nil
local ritualStep = 0
local ritualEndTime = 0
local ritualTryTimer = 0

-- PERIPHERALS
local env = peripheral.wrap(envDetector)
local inv = peripheral.wrap(invSource)
local click = peripheral.wrap(clicker)
local clickRelay = peripheral.wrap(clickerRSrelay)
local relay = peripheral.wrap(brasierRSrelay)

-- MONITORS
local monitors = {}
for _, name in pairs(peripheral.getNames()) do
    if peripheral.getType(name) == ""monitor"" then
        local mon = peripheral.wrap(name)
        mon.setTextScale(textScale)
        table.insert(monitors, mon)
    end
end

-- UTILITY
local function pulseRelay(r, side)
    r.setOutput(side, true)
    sleep(pulseTime)
    r.setOutput(side, false)
end

local function sendItemToClicker(itemName)
    local contents = click.list()
    local empty = true
    for _, _ in pairs(contents) do empty = false end
    if not empty then return false end

    for slot, item in pairs(inv.list()) do
        if item.name == itemName then
            inv.pushItems(clicker, slot, 1)
            pulseRelay(clickRelay, clickerRSrelaySide)
            sleep(delay)
            return true
        end
    end
    return false
end

-- RITUAL HANDLER (non-blocking)
local function startRitual(type)
    if ritualActive then return end
    ritualActive = true
    ritualType = type
    ritualStep = 1
    ritualEndTime = os.clock() + ritualCooldown
    currentAction = type
end

local function processRitual()
    if not ritualActive then return end

    if os.clock() >= ritualTryTimer then
        ritualTryTimer = os.clock() + 0.2 -- retry every 0.2s

        if ritualType == ""Force Rain"" then
            if ritualStep == 1 and sendItemToClicker(weatherTablet) then ritualStep = 2 end
            if ritualStep == 2 and sendItemToClicker(rainItem) then ritualStep = 3 end
        elseif ritualType == ""Force Thunder"" then
            if ritualStep == 1 and sendItemToClicker(weatherTablet) then ritualStep = 2 end
            if ritualStep == 2 and sendItemToClicker(thunderItem) then ritualStep = 3 end
        elseif ritualType == ""Auto RainClear"" and ritualStep == 1 then
            if sendItemToClicker(weatherTablet) then ritualStep = 2 end
        elseif ritualType == ""Auto NightSkip"" and ritualStep == 1 then
            if sendItemToClicker(dayTablet) then ritualStep = 2 end
        elseif ritualType == ""Force Day"" and ritualStep == 1 then
            if sendItemToClicker(dayTablet) then ritualStep = 2 end
        end

        -- Pulse relay on last step
        if ritualStep == 2 or ritualStep == 3 then
            pulseRelay(relay, brasierRSrelaySide)
            ritualStep = 99
        end
    end

    if os.clock() >= ritualEndTime then
        ritualActive = false
        ritualType = nil
        ritualStep = 0
        currentAction = ""Idle""
    end
end

-- AUTO FUNCTIONS
local function autoRainClear()
    if not rainClearEnabled and rainClearDisableTimer and os.clock() >= rainClearDisableTimer then
        rainClearEnabled = true
        rainClearDisableTimer = nil
    end
    if not rainClearEnabled or ritualActive then return end
    if env.isRaining() then
        startRitual(""Auto RainClear"")
    end
end

local function autoNightSkip()
    if not nightSkipEnabled and nightSkipDisableTimer and os.clock() >= nightSkipDisableTimer then
        nightSkipEnabled = true
        nightSkipDisableTimer = nil
    end
    if not nightSkipEnabled or ritualActive then return end
    local gameTime = os.time()
    if gameTime >= 18.000 and gameTime < 24.000 then
        startRitual(""Auto NightSkip"")
    end
end

-- FORCE FUNCTIONS
local function ForceRain()
    rainClearEnabled = false
    rainClearDisableTimer = os.clock() + disableRainClearDuration
    startRitual(""Force Rain"")
end

local function ForceThunder()
    rainClearEnabled = false
    rainClearDisableTimer = os.clock() + disableRainClearDuration
    startRitual(""Force Thunder"")
end

local function ForceDay()
    startRitual(""Force Day"")
end

-- TOGGLE
local function toggleRainClear()
    if rainClearEnabled then
        rainClearEnabled = false
        rainClearDisableTimer = os.clock() + disableRainClearDuration
    else
        rainClearEnabled = true
        rainClearDisableTimer = nil
    end
end

local function toggleNightSkip()
    if nightSkipEnabled then
        nightSkipEnabled = false
        nightSkipDisableTimer = os.clock() + disableNightSkipDuration
    else
        nightSkipEnabled = true
        nightSkipDisableTimer = nil
    end
end

-- DISPLAY
local function drawMonitor(mon)
    mon.clear()
    mon.setCursorPos(1,1)
    mon.setTextColor(colors.white)
    local formattedTime = textutils.formatTime(os.time(), true)
    mon.write(""Time: "" .. formattedTime)
    
    mon.setCursorPos(1,2)
    local weather = env.isRaining() and ""Rain"" or ""Clear""
    mon.write(""Weather: "" .. weather)
    
    -- ACTION
    mon.setCursorPos(1,3)
    mon.setTextColor(colors.white)
    mon.write(""Action: "")
    if currentAction == ""Idle"" then
        mon.setTextColor(colors.white)
    else
        mon.setTextColor(colors.orange)
    end
    mon.write(currentAction)
    if ritualActive then
        local remaining = math.max(0, math.floor(ritualEndTime - os.clock()))
        mon.write("" ("" .. remaining .. ""s)"")
    end
    mon.setTextColor(colors.white)

    -- NIGHT SKIP STATUS
    mon.setCursorPos(1,4)
    mon.setTextColor(colors.white)
    mon.write(""Night Skip: "")
    local nsRemaining = 0
    if not nightSkipEnabled and nightSkipDisableTimer then
        nsRemaining = math.max(0, math.floor(nightSkipDisableTimer - os.clock()))
    end
    if nightSkipEnabled then
        mon.setTextColor(colors.green)
    else
        mon.setTextColor(colors.red)
    end
    mon.write(nightSkipEnabled and ""Enabled"" or ""Disabled"")
    if nsRemaining > 0 then
        mon.write("" ("" .. nsRemaining .. ""s)"")
    end
    mon.setTextColor(colors.white)

    -- RAIN CLEAR STATUS
    mon.setCursorPos(1,5)
    mon.setTextColor(colors.white)
    mon.write(""Rain Clear: "")
    local rcRemaining = 0
    if not rainClearEnabled and rainClearDisableTimer then
        rcRemaining = math.max(0, math.floor(rainClearDisableTimer - os.clock()))
    end
    if rainClearEnabled then
        mon.setTextColor(colors.green)
    else
        mon.setTextColor(colors.red)
    end
    mon.write(rainClearEnabled and ""Enabled"" or ""Disabled"")
    if rcRemaining > 0 then
        mon.write("" ("" .. rcRemaining .. ""s)"")
    end
    mon.setTextColor(colors.white)

    -- BUTTONS
    -- Force actions first row
    mon.setTextColor(colors.yellow)
    mon.setCursorPos(1,7)
    mon.write(""[Force Day]"")
    mon.setTextColor(colors.lightBlue)
    mon.setCursorPos(1,8)
    mon.write(""[Force Rain]"")
    mon.setTextColor(colors.blue)
    mon.setCursorPos(1,9)
    mon.write(""[Force Thunder]"")

    -- Toggle buttons second row with colored names only
    -- Rain Clear
    mon.setCursorPos(1,11)
    mon.setTextColor(colors.white)
    mon.write(""[Toggle "")
    if rainClearEnabled then
        mon.setTextColor(colors.green)
    else
        mon.setTextColor(colors.red)
    end
    mon.write(""Rain Clear"")
    mon.setTextColor(colors.white)
    mon.write(""]"")

    -- Night Skip
    mon.setCursorPos(1,12)
    mon.setTextColor(colors.white)
    mon.write(""[Toggle "")
    if nightSkipEnabled then
        mon.setTextColor(colors.green)
    else
        mon.setTextColor(colors.red)
    end
    mon.write(""Night Skip"")
    mon.setTextColor(colors.white)
    mon.write(""]"")
end

local function drawAllMonitors()
    for _, mon in pairs(monitors) do
        drawMonitor(mon)
    end
end

-- TOUCH HANDLER
local function handleTouch(x, y)
    if y == 7 then ForceDay() end
    if y == 8 then ForceRain() end
    if y == 9 then ForceThunder() end
    if y == 11 then toggleRainClear() end
    if y == 12 then toggleNightSkip() end
end

-- LOOP FUNCTIONS
local function updateLoop()
    while true do
        drawAllMonitors()
        autoRainClear()
        autoNightSkip()
        processRitual()
        sleep(monitorRefresh)
    end
end

local function touchLoop()
    while true do
        local event, side, x, y = os.pullEvent(""monitor_touch"")
        handleTouch(x, y)
    end
end

-- RUN BOTH LOOPS
parallel.waitForAny(updateLoop, touchLoop)
"
80yUbMWX,ZNZ - GTM custom loader,martinkingus,JavaScript,Saturday 18th of October 2025 02:14:51 AM CDT,"<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],j=d.createElement(s);j.async=true;j.src=""https://load.sgtm.url.com/xx.js?""+i;f.parentNode.insertBefore(j,f);})(window,document,'script','dataLayer','hashed_GTM_ID');</script>
<!-- End Google Tag Manager -->

<!-- Google Tag Manager (noscript) -->
<noscript><iframe src=""https://load.sgtm.parfumsetmoi.lu/ns.html?id=GTM-ID"" height=""0"" width=""0"" style=""display:none;visibility:hidden""></iframe></noscript>
<!-- End Google Tag Manager (noscript) -->"
