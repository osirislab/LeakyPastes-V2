id,title,username,language,date,content
JHYiyKaG,esp32_24h_timer_ontime_eeprom_gpioreset_universaltelegram,kodilivetv,C++,Thursday 12th of June 2025 01:05:36 PM CDT,"/*
  ESP32 Motor Timer with Web Setup, EEPROM Backup, GPIO Reset, and Telegram Notification

  DESCRIPTION:
  -------------
  This sketch controls a motor (or relay) connected to an ESP32, allowing you to schedule its operation for specific hours each day.
  - Configuration is done via a WiFi Access Point and web interface hosted by the ESP32.
  - All settings (schedule, run time, time) are saved to EEPROM for power-loss recovery.
  - A special reset mode (by connecting GPIO14 to 3.3V and resetting) clears all settings.
  - After each scheduled motor run, a notification is sent to your Telegram account.

  FEATURES:
  ---------
  - Web-based setup: Set current time, motor run time (5–300s), and select operation hours (per hour, 24h grid).
  - Settings backup: All settings are stored in EEPROM and restored after power loss.
  - Reset mode: Connect GPIO14 to 3.3V and reset to clear all settings and re-enter setup.
  - Telegram notification: After each motor run, a message is sent to your Telegram bot.

  WIRING:
  -------
  - MOTOR_PIN: GPIO33 (connect to relay or motor driver)
  - LED_PIN:   GPIO32 (status LED)
  - RESET_PIN: GPIO14 (connect to 3.3V and reset to clear settings)
  - Ensure your relay/motor driver is compatible with 3.3V logic.

  USAGE INSTRUCTIONS:
  -------------------
  1. Power on the ESP32. It will start as a WiFi Access Point (SSID: ESP32-Motor-Timer, Password: 12345678).
  2. Connect to this WiFi network with your phone or computer.
  3. Open a browser and go to the address shown in the Serial Monitor (usually http://192.168.4.1).
  4. Follow the web interface steps:
     - Set the current time (syncs with your device).
     - Set the motor run time (slider, 5–300 seconds).
     - Select the hours you want the motor to run (checkbox grid).
     - When all steps are complete, click ""Start Operation"".
  5. The ESP32 will enter deep sleep and wake up at the scheduled hours to run the motor.
  6. After each run, a Telegram message will be sent (see below for setup).
  7. To reset all settings, connect GPIO14 to 3.3V and reset the ESP32.

  TELEGRAM NOTIFICATION SETUP:
  ----------------------------
  1. Create a Telegram bot using BotFather and get your bot token.
  2. Start a chat with your bot and get your chat ID (see UniversalTelegramBot library examples).
  3. Enter your WiFi credentials, bot token, and chat ID in the placeholders at the top of this sketch.
  4. Install the UniversalTelegramBot and WiFiClientSecure libraries via the Arduino Library Manager.
  5. Ensure your ESP32 can connect to your WiFi for Telegram notifications.

  DEPENDENCIES:
  -------------
  - ESP32 board support (install via Arduino Board Manager)
  - UniversalTelegramBot library
  - WiFiClientSecure library
  - ESP32Time, WiFi, EEPROM libraries (included with ESP32 core)

*/

#include ""soc/soc.h""           // Brownout error fix
#include ""soc/rtc_cntl_reg.h""  // Brownout error fix

#include ""driver/rtc_io.h"" // https://github.com/pycom/esp-idf-2.0/blob/master/components/driver/include/driver/rtc_io.h

#include <ESP32Time.h>
#include <WiFi.h>
#include <EEPROM.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>

#define uS_TO_S_FACTOR 1000000ULL
#define DEFAULT_MOTOR_ON_TIME 5
#define MIN_MOTOR_ON_TIME 5
#define MAX_MOTOR_ON_TIME 300
#define MOTOR_PIN 33
#define LED_PIN 32
#define WAKEUP_GPIO GPIO_NUM_14 // Only RTC IO are allowed
#define EEPROM_SIZE 512

// EEPROM Memory Map
#define EEPROM_MAGIC_ADDR 0
#define EEPROM_SCHEDULE_ADDR 4
#define EEPROM_RUNTIME_ADDR 28
#define EEPROM_LAST_SYNC_ADDR 32
#define EEPROM_MAGIC_NUMBER 0xDEADBEEF
#define MAX_TIME_STALENESS 7 * 24 * 3600

const char *ssid = ""ESP32-Motor-Timer"";
const char *password = ""12345678"";

ESP32Time rtc(3600);
WiFiServer server(80);

// RTC memory variables
RTC_DATA_ATTR bool timeWasSet = false;
RTC_DATA_ATTR bool scheduleWasSet = false;
RTC_DATA_ATTR bool runTimeWasSet = false;
RTC_DATA_ATTR int bootCount = 0;
RTC_DATA_ATTR unsigned long webServerStartTime = 0;
RTC_DATA_ATTR bool usingBackupSettings = false;
RTC_DATA_ATTR bool hourlySchedule[24] = {0};
RTC_DATA_ATTR int motorRunTime = DEFAULT_MOTOR_ON_TIME;

// --- Telegram Bot Placeholders ---
const char* TELEGRAM_WIFI_SSID = ""YOUR_WIFI_SSID"";
const char* TELEGRAM_WIFI_PASSWORD = ""YOUR_WIFI_PASSWORD"";
const char* BOT_TOKEN = ""YOUR_BOT_TOKEN"";
const char* CHAT_ID = ""YOUR_CHAT_ID"";

WiFiClientSecure secured_client;
UniversalTelegramBot bot(BOT_TOKEN, secured_client);

struct EEPROMSettings {
  uint32_t magic;
  bool schedule[24];
  int runTime;
  uint32_t lastSyncTime;
};

void setup() {
  Serial.begin(115200);
  delay(1000);
  EEPROM.begin(EEPROM_SIZE);
  
  bootCount++;
  Serial.println(""Boot count: "" + String(bootCount));

  pinMode(MOTOR_PIN, OUTPUT);
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(MOTOR_PIN, LOW);

  printWakeupReason();

  // Check if woken up by GPIO14 - clear EEPROM and reset
  if (esp_sleep_get_wakeup_cause() == ESP_SLEEP_WAKEUP_EXT0) {
    Serial.println(""=== GPIO RESET TRIGGERED ==="");
    Serial.println(""Clearing EEPROM settings..."");
    clearEEPROMSettings();
    
    // Reset RTC memory flags
    timeWasSet = false;
    scheduleWasSet = false;
    runTimeWasSet = false;
    usingBackupSettings = false;
    
    Serial.println(""EEPROM cleared - entering setup mode"");
    webServerStartTime = millis();
    setupWebServer();
    return;
  }

  // Normal wakeup logic
  if (timeWasSet && scheduleWasSet && runTimeWasSet && esp_sleep_get_wakeup_cause() == ESP_SLEEP_WAKEUP_TIMER) {
    handleScheduledWakeup();
  } else {
    if (tryLoadBackupSettings()) {
      Serial.println(""=== POWER FAILURE RECOVERY ==="");
      Serial.println(""Loaded backup settings from EEPROM"");
      printCurrentSettings();
      
      timeWasSet = false;
      usingBackupSettings = true;
      
      EEPROMSettings settings;
      loadSettingsFromEEPROM(settings);
      uint32_t currentEpoch = settings.lastSyncTime + (millis() / 1000);
      rtc.setTime(currentEpoch);
      timeWasSet = true;
      
      Serial.println(""Estimated time: "" + rtc.getTime(""%A, %B %d %Y %H:%M:%S""));
      scheduleNextWakeup();
    } else {
      Serial.println(""No backup settings found - entering setup mode"");
      webServerStartTime = millis();
      setupWebServer();
    }
  }
}

void loop() {
  if (!timeWasSet || !scheduleWasSet || !runTimeWasSet) {
    if (millis() - webServerStartTime > 240000) {
      if (tryLoadBackupSettings()) {
        Serial.println(""Timeout reached - falling back to EEPROM settings"");
        usingBackupSettings = true;
        
        EEPROMSettings settings;
        loadSettingsFromEEPROM(settings);
        uint32_t estimatedTime = settings.lastSyncTime + (millis() / 1000);
        rtc.setTime(estimatedTime);
        timeWasSet = true;
        
        scheduleNextWakeup();
      } else {
        Serial.println(""No backup settings - entering 3-hour sleep"");
        setupSleepWakeup();
        esp_deep_sleep_start();
      }
    }
    handleWebClient();
  }
}

void clearEEPROMSettings() {
  // Clear magic number to invalidate settings
  uint32_t clearMagic = 0x00000000;
  EEPROM.put(EEPROM_MAGIC_ADDR, clearMagic);
  EEPROM.commit();
  Serial.println(""EEPROM settings cleared"");
}

bool tryLoadBackupSettings() {
  EEPROMSettings settings;
  if (loadSettingsFromEEPROM(settings)) {
    for (int i = 0; i < 24; i++) {
      hourlySchedule[i] = settings.schedule[i];
    }
    motorRunTime = settings.runTime;
    scheduleWasSet = true;
    runTimeWasSet = true;
    return true;
  }
  return false;
}

bool loadSettingsFromEEPROM(EEPROMSettings &settings) {
  uint32_t magic;
  EEPROM.get(EEPROM_MAGIC_ADDR, magic);
  
  if (magic != EEPROM_MAGIC_NUMBER) {
    Serial.println(""No valid EEPROM settings found"");
    return false;
  }

  EEPROM.get(EEPROM_MAGIC_ADDR, settings.magic);
  for (int i = 0; i < 24; i++) {
    settings.schedule[i] = EEPROM.read(EEPROM_SCHEDULE_ADDR + i);
  }
  EEPROM.get(EEPROM_RUNTIME_ADDR, settings.runTime);
  EEPROM.get(EEPROM_LAST_SYNC_ADDR, settings.lastSyncTime);
  
  if (settings.runTime < MIN_MOTOR_ON_TIME || settings.runTime > MAX_MOTOR_ON_TIME) {
    Serial.println(""Invalid run time in EEPROM: "" + String(settings.runTime));
    return false;
  }
  
  Serial.println(""Valid EEPROM settings loaded"");
  return true;
}

void saveSettingsToEEPROM() {
  Serial.println(""Saving settings to EEPROM..."");
  
  EEPROMSettings settings;
  settings.magic = EEPROM_MAGIC_NUMBER;
  
  for (int i = 0; i < 24; i++) {
    settings.schedule[i] = hourlySchedule[i];
  }
  settings.runTime = motorRunTime;
  settings.lastSyncTime = rtc.getEpoch();
  
  EEPROM.put(EEPROM_MAGIC_ADDR, settings.magic);
  for (int i = 0; i < 24; i++) {
    EEPROM.write(EEPROM_SCHEDULE_ADDR + i, settings.schedule[i]);
  }
  EEPROM.put(EEPROM_RUNTIME_ADDR, settings.runTime);
  EEPROM.put(EEPROM_LAST_SYNC_ADDR, settings.lastSyncTime);
  EEPROM.commit();
  
  Serial.println(""Settings saved to EEPROM successfully"");
  printCurrentSettings();
}

void printCurrentSettings() {
  Serial.println(""Current Settings:"");
  Serial.println(""- Motor run time: "" + String(motorRunTime) + "" seconds"");
  Serial.print(""- Schedule: "");
  
  int count = 0;
  for (int h = 0; h < 24; h++) {
    if (hourlySchedule[h]) {
      if (count > 0) Serial.print("", "");
      Serial.print(String(h < 10 ? ""0"" : """") + String(h) + "":00"");
      count++;
    }
  }
  
  if (count == 0) {
    Serial.println(""No hours scheduled"");
  } else {
    Serial.println("" ("" + String(count) + "" times/day)"");
    Serial.println(""- Total daily runtime: "" + String(count * motorRunTime) + "" seconds"");
  }
}

void handleScheduledWakeup() {
  Serial.println(""\n=== Scheduled Wake-up ==="");
  Serial.println(""Current time: "" + rtc.getTime(""%A, %B %d %Y %H:%M:%S""));
  Serial.println(""Motor run time: "" + String(motorRunTime) + "" seconds"");
  
  if (usingBackupSettings) {
    Serial.println(""Running on backup settings from EEPROM"");
  }

  runMotor();
  scheduleNextWakeup();
}

void runMotor() {
  Serial.println(""Starting motor for "" + String(motorRunTime) + "" seconds..."");

  digitalWrite(LED_PIN, HIGH);
  digitalWrite(MOTOR_PIN, HIGH);

  for (int i = motorRunTime; i > 0; i--) {
    Serial.println(""Motor running... "" + String(i) + ""s remaining"");
    delay(1000);

    int blinkInterval = (motorRunTime < 10) ? 1 : 5;
    if (i % blinkInterval == 0) {
      digitalWrite(LED_PIN, LOW);
      delay(100);
      digitalWrite(LED_PIN, HIGH);
    }
  }

  digitalWrite(MOTOR_PIN, LOW);
  digitalWrite(LED_PIN, LOW);
  Serial.println(""Motor stopped."");

  // --- Send Telegram notification ---
  String msg = ""Motor finished running for "" + String(motorRunTime) + "" seconds at "" + rtc.getTime(""%H:%M:%S %d/%m/%Y"");
  sendTelegramMessage(msg);
}

void setupSleepWakeup() {
  // Setup timer wakeup
  esp_sleep_enable_timer_wakeup(3 * 3600 * uS_TO_S_FACTOR);
  
  // Setup GPIO wakeup for reset functionality
  esp_sleep_enable_ext0_wakeup(WAKEUP_GPIO, 1); // 1 = High trigger
  rtc_gpio_pullup_dis(WAKEUP_GPIO);
  rtc_gpio_pulldown_en(WAKEUP_GPIO);
  Serial.println(""Setup ESP32 to wake up on GPIO14 trigger (reset mode)"");
}

void scheduleNextWakeup() {
  struct tm timeinfo = rtc.getTimeStruct();
  int currentHour = timeinfo.tm_hour;
  int currentMinute = timeinfo.tm_min;

  unsigned long sleepTime = calculateSleepTime(currentHour, currentMinute);

  if (sleepTime > 0) {
    Serial.println(""Next wake-up in "" + String(sleepTime / 3600) + "" hours and "" +
                   String((sleepTime % 3600) / 60) + "" minutes"");

    esp_sleep_enable_timer_wakeup(sleepTime * uS_TO_S_FACTOR);
    
    // Always enable GPIO wakeup for reset functionality
    esp_sleep_enable_ext0_wakeup(WAKEUP_GPIO, 1);
    rtc_gpio_pullup_dis(WAKEUP_GPIO);
    rtc_gpio_pulldown_en(WAKEUP_GPIO);
    
    Serial.println(""Entering deep sleep... (GPIO14 HIGH = reset)"");
    Serial.flush();
    esp_deep_sleep_start();
  } else {
    Serial.println(""No scheduled hours found - entering 24-hour sleep"");
    esp_sleep_enable_timer_wakeup(24 * 3600 * uS_TO_S_FACTOR);
    
    esp_sleep_enable_ext0_wakeup(WAKEUP_GPIO, 1);
    rtc_gpio_pullup_dis(WAKEUP_GPIO);
    rtc_gpio_pulldown_en(WAKEUP_GPIO);
    
    esp_deep_sleep_start();
  }
}

unsigned long calculateSleepTime(int currentHour, int currentMinute) {
  int nextHour = -1;

  for (int h = currentHour + 1; h < 24; h++) {
    if (hourlySchedule[h]) {
      nextHour = h;
      break;
    }
  }

  if (nextHour == -1) {
    for (int h = 0; h < 24; h++) {
      if (hourlySchedule[h]) {
        nextHour = h + 24;
        break;
      }
    }
  }

  if (nextHour == -1) return 0;

  int currentTotalMinutes = currentHour * 60 + currentMinute;
  int nextTotalMinutes = (nextHour % 24) * 60;

  if (nextHour >= 24) {
    nextTotalMinutes += 24 * 60;
  }

  int sleepMinutes = nextTotalMinutes - currentTotalMinutes;
  return sleepMinutes * 60;
}

void setupWebServer() {
  Serial.println(""\n=== Setting up Web Server for Configuration ==="");
  Serial.println(""Connect to WiFi network: "" + String(ssid));
  Serial.println(""Password: "" + String(password));
  Serial.println(""TIMEOUT: 4 minutes"");
  Serial.println(""RESET: Connect GPIO14 to 3.3V and reset ESP32"");

  WiFi.softAP(ssid, password);
  IPAddress IP = WiFi.softAPIP();
  Serial.println(""Web interface: http://"" + IP.toString());
  server.begin();

  for (int i = 0; i < 10; i++) {
    digitalWrite(LED_PIN, HIGH);
    delay(200);
    digitalWrite(LED_PIN, LOW);
    delay(200);
  }
}

void handleWebClient() {
  WiFiClient client = server.available();

  if (client) {
    Serial.println(""Client connected"");
    String currentLine = """";

    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        if (c == '\n') {
          if (currentLine.length() == 0) {
            sendWebPage(client);
            break;
          } else {
            currentLine = """";
          }
        } else if (c != '\r') {
          currentLine += c;
        }

        if (currentLine.endsWith(""POST /syncTime"")) {
          handleTimeSyncRequest(client);
        } else if (currentLine.endsWith(""POST /setRunTime"")) {
          handleRunTimeRequest(client);
        } else if (currentLine.endsWith(""POST /setSchedule"")) {
          handleScheduleRequest(client);
        }
      }
    }
    client.stop();
  }
}

// Simplified web page (keeping core functionality)
void sendWebPage(WiFiClient &client) {
  unsigned long elapsed = millis() - webServerStartTime;
  unsigned long remaining = (240000 - elapsed) / 1000;

  client.println(""HTTP/1.1 200 OK"");
  client.println(""Content-type:text/html"");
  client.println();
  client.println(""<!DOCTYPE html><html>"");
  client.println(""<head><title>ESP32 Motor Timer Setup</title>"");
  client.println(""<meta name='viewport' content='width=device-width, initial-scale=1'>"");
  client.println(""<style>"");
  client.println(""body{font-family:Arial;text-align:center;padding:20px;background:#f0f0f0;}"");
  client.println("".container{max-width:600px;margin:0 auto;background:white;padding:30px;border-radius:10px;}"");
  client.println(""input,button{padding:10px;margin:5px;font-size:16px;border:1px solid #ddd;border-radius:5px;}"");
  client.println(""button{background:#4CAF50;color:white;border:none;cursor:pointer;padding:15px 30px;}"");
  client.println("".timeout{color:red;font-weight:bold;}"");
  client.println("".step{margin:20px 0;padding:15px;background:#f9f9f9;border-radius:5px;}"");
  client.println("".schedule-grid{display:grid;grid-template-columns:repeat(4,1fr);gap:10px;margin:20px 0;}"");
  client.println("".hour-checkbox{display:flex;align-items:center;padding:8px;background:white;border:1px solid #ddd;border-radius:5px;}"");
  client.println("".reset-info{background:#FFE6E6;padding:10px;border-radius:5px;margin:10px 0;border:1px solid #FF9999;}"");
  client.println(""</style></head>"");
  client.println(""<body>"");
  client.println(""<div class='container'>"");
  client.println(""<h1>ESP32 Motor Timer Setup</h1>"");
  
  client.println(""<div class='reset-info'>"");
  client.println(""<strong>Reset Instructions:</strong><br>"");
  client.println(""To clear settings: Connect GPIO14 to 3.3V and reset ESP32"");
  client.println(""</div>"");
  
  client.println(""<div class='timeout'>Timeout: <span id='countdown'>"" + String(remaining) + ""</span> seconds</div>"");

  // Step 1: Time sync
  client.println(""<div class='step'>"");
  client.println(""<h3>Step 1: Set Current Time</h3>"");
  if (timeWasSet) {
    client.println(""<p>✅ Time set: "" + rtc.getTime(""%H:%M:%S %d/%m/%Y"") + ""</p>"");
  } else {
    client.println(""<h4 id='currentTime'></h4>"");
    client.println(""<form action='/syncTime' method='POST'>"");
    client.println(""<input type='hidden' name='epochTime' id='hiddenEpochTime'>"");
    client.println(""<button type='submit'>Sync Time</button>"");
    client.println(""</form>"");
  }
  client.println(""</div>"");

  // Step 2: Motor run time
  client.println(""<div class='step'>"");
  client.println(""<h3>Step 2: Set Motor Run Time</h3>"");
  if (runTimeWasSet) {
    client.println(""<p>✅ Run time set: "" + String(motorRunTime) + "" seconds</p>"");
  } else {
    client.println(""<form action='/setRunTime' method='POST'>"");
    client.println(""<input type='range' name='runTime' min='5' max='300' value='"" + String(motorRunTime) + ""'>"");
    client.println(""<span id='runTimeDisplay'>"" + String(motorRunTime) + ""s</span>"");
    client.println(""<button type='submit'>Set Run Time</button>"");
    client.println(""</form>"");
  }
  client.println(""</div>"");

  // Step 3: Schedule
  client.println(""<div class='step'>"");
  client.println(""<h3>Step 3: Select Operation Hours</h3>"");
  if (scheduleWasSet) {
    client.println(""<p>✅ Schedule set!</p>"");
  } else {
    client.println(""<form action='/setSchedule' method='POST'>"");
    client.println(""<div class='schedule-grid'>"");
    for (int h = 0; h < 24; h++) {
      client.println(""<div class='hour-checkbox'>"");
      client.println(""<input type='checkbox' name='hour"" + String(h) + ""' value='1'>"");
      client.println(""<label>"" + String(h < 10 ? ""0"" : """") + String(h) + "":00</label>"");
      client.println(""</div>"");
    }
    client.println(""</div>"");
    client.println(""<button type='submit'>Set Schedule</button>"");
    client.println(""</form>"");
  }
  client.println(""</div>"");

  if (timeWasSet && scheduleWasSet && runTimeWasSet) {
    client.println(""<div class='step'>"");
    client.println(""<h3>✅ Setup Complete!</h3>"");
    client.println(""<p>ESP32 will now enter scheduled operation mode.</p>"");
    client.println(""<button onclick='startOperation()'>Start Operation</button>"");
    client.println(""</div>"");
  }

  client.println(""</div>"");

  // Simplified JavaScript
  client.println(""<script>"");
  client.println(""var countdown="" + String(remaining) + "";"");
  client.println(""function updateTime(){"");
  client.println(""var now=new Date();"");
  client.println(""if(document.getElementById('currentTime'))"");
  client.println(""document.getElementById('currentTime').innerHTML='Current Time: '+now.toLocaleString();"");
  client.println(""if(document.getElementById('hiddenEpochTime'))"");
  client.println(""document.getElementById('hiddenEpochTime').value=Math.floor(now.getTime()/1000);"");
  client.println(""}"");
  client.println(""function updateCountdown(){"");
  client.println(""countdown--;document.getElementById('countdown').innerHTML=countdown;"");
  client.println(""}"");
  client.println(""function startOperation(){"");
  client.println(""document.body.innerHTML='<h2>Starting operation...</h2>';"");
  client.println(""}"");
  client.println(""setInterval(updateTime,1000);setInterval(updateCountdown,1000);updateTime();"");
  client.println(""</script></body></html>"");
}

void handleTimeSyncRequest(WiFiClient &client) {
  String requestBody = """";
  while (client.available()) {
    requestBody += (char)client.read();
  }

  int epochIndex = requestBody.indexOf(""epochTime="");
  if (epochIndex != -1) {
    long epochTime = requestBody.substring(epochIndex + 10).toInt();
    rtc.setTime(epochTime);
    timeWasSet = true;
    Serial.println(""Time synchronized: "" + rtc.getTime(""%A, %B %d %Y %H:%M:%S""));
  }

  client.println(""HTTP/1.1 302 Found"");
  client.println(""Location: /"");
  client.println();
}

void handleRunTimeRequest(WiFiClient &client) {
  String requestBody = """";
  while (client.available()) {
    requestBody += (char)client.read();
  }

  int runTimeIndex = requestBody.indexOf(""runTime="");
  if (runTimeIndex != -1) {
    int newRunTime = requestBody.substring(runTimeIndex + 8).toInt();
    if (newRunTime >= MIN_MOTOR_ON_TIME && newRunTime <= MAX_MOTOR_ON_TIME) {
      motorRunTime = newRunTime;
      runTimeWasSet = true;
      Serial.println(""Motor run time set to: "" + String(motorRunTime) + "" seconds"");
    }
  }

  client.println(""HTTP/1.1 302 Found"");
  client.println(""Location: /"");
  client.println();
}

void handleScheduleRequest(WiFiClient &client) {
  String requestBody = """";
  while (client.available()) {
    requestBody += (char)client.read();
  }

  for (int h = 0; h < 24; h++) {
    hourlySchedule[h] = false;
  }

  for (int h = 0; h < 24; h++) {
    String hourParam = ""hour"" + String(h) + ""=1"";
    if (requestBody.indexOf(hourParam) != -1) {
      hourlySchedule[h] = true;
    }
  }

  scheduleWasSet = true;

  // Save to EEPROM when configuration is complete
  if (timeWasSet && scheduleWasSet && runTimeWasSet) {
    saveSettingsToEEPROM();
    delay(2000);
    scheduleNextWakeup();
  }

  client.println(""HTTP/1.1 302 Found"");
  client.println(""Location: /"");
  client.println();
}

void printWakeupReason() {
  esp_sleep_wakeup_cause_t wakeup_reason = esp_sleep_get_wakeup_cause();

  switch (wakeup_reason) {
    case ESP_SLEEP_WAKEUP_TIMER:
      Serial.println(""Wake-up: Scheduled timer"");
      break;
    case ESP_SLEEP_WAKEUP_EXT0:
      Serial.println(""Wake-up: GPIO14 external signal (RESET MODE)"");
      break;
    default:
      Serial.println(""Wake-up: Power on or reset"");
      break;
  }
}

// Helper: Connect to WiFi for Telegram
void connectToWiFiForTelegram() {
  if (WiFi.status() == WL_CONNECTED) return;
  WiFi.mode(WIFI_STA);
  WiFi.begin(TELEGRAM_WIFI_SSID, TELEGRAM_WIFI_PASSWORD);
  unsigned long startAttemptTime = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 15000) {
    delay(500);
  }
}

// Helper: Send Telegram message
void sendTelegramMessage(const String& message) {
  connectToWiFiForTelegram();
  secured_client.setInsecure(); // For ESP32, disables certificate validation
  bot.sendMessage(CHAT_ID, message, """");
}
"
nc77SuTA,Untitled,sandipto729,Python,Thursday 12th of June 2025 12:58:06 PM CDT,"from flask import Flask, request, jsonify
from flask_cors import CORS
from dotenv import load_dotenv
import os

from langchain.prompts import PromptTemplate
from langchain.memory import ConversationBufferWindowMemory
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores import Chroma
from langchain.chains import RetrievalQA
from langchain_groq import ChatGroq



# Load environment
load_dotenv()
groq_api_key = os.getenv(""GROQ_API_KEY"")
FRONTEND_URL = os.getenv(""FRONTEND_URL"")
if not groq_api_key:
    raise ValueError(""GROQ_API_KEY is not set in your .env file."")
os.environ[""GROQ_API_KEY""] = groq_api_key

# Flask setup
app = Flask(__name__)
CORS(app, supports_credentials=True, resources={r""/*"": {""origins"": FRONTEND_URL}})

# Load existing vectorstore (Chroma) from disk
embedding = HuggingFaceEmbeddings(model_name=""sentence-transformers/all-MiniLM-L6-v2"")
vectorstore = Chroma(persist_directory=""./chroma_doc_db"", embedding_function=embedding)

@app.route('/')
def index():
    return ""Backend is running!""

@app.route('/api/process-url', methods=['POST'])
def process_url():
    data = request.json
    query = data.get('query')
    if not query:
        return jsonify({""error"": ""Query is required""}), 400

    try:
        # Initialize LLM
        model = ChatGroq(
            model_name=""llama3-8b-8192"",
            api_key=groq_api_key,
            temperature=0.6,
            max_tokens=512
        )


        # Prompt template
        prompt_template = PromptTemplate(
            input_variables=[""context"", ""question""],
            template=""""""
            You are a helpful assistant that provides concise answers based on the provided documents.

            Context: {context}

            Question: {question}

            Answer:""""""
        )

        # Memory
        memory = ConversationBufferWindowMemory(
            memory_key=""chat_history"",
            return_messages=True,
            k=5,
            output_key=""result""
        )

        # Retriever and QA chain
        retriever = vectorstore.as_retriever(search_kwargs={""k"": 2})
        qa = RetrievalQA.from_chain_type(
            llm=model,
            chain_type=""stuff"",
            retriever=retriever,
            return_source_documents=True,
            memory=memory,
            chain_type_kwargs={""prompt"": prompt_template},
            output_key=""result""
        )

        # Run query
        result = qa({""query"": query})
        
        return jsonify({
            ""answer"": result[""result""],
        })

    except Exception as e:
        return jsonify({""error"": str(e)}), 500

if __name__ == ""__main__"":
    port = int(os.environ.get(""PORT"", 8000))
    app.run(host=""0.0.0.0"", port=port)
"
ehCxcnw6,esp32_timer_ontime_eeprom_gpioreset_24h,kodilivetv,C++,Thursday 12th of June 2025 12:56:43 PM CDT,"/*
   ========================================================================
   ESP32 SCHEDULED MOTOR CONTROL WITH DEEP SLEEP & EEPROM BACKUP
   ========================================================================
   
   OVERVIEW:
   Automatically runs a motor at scheduled hours with deep sleep power saving.
   Survives power failures with EEPROM backup and includes GPIO reset functionality.
   
   HARDWARE REQUIREMENTS:
   • ESP32 development board
   • Motor/relay connected to GPIO33 (MOTOR_PIN)
   • Status LED connected to GPIO32 (LED_PIN) 
   • Reset button: GPIO14 (WAKEUP_GPIO) - connect to 3.3V for reset
   
   FEATURES:
   ✓ Web-based configuration interface (no coding required)
   ✓ Hourly scheduling (select any combination of 24 hours)
   ✓ Adjustable motor run time (5-300 seconds per activation)
   ✓ Ultra-low power deep sleep between activations
   ✓ Automatic time synchronization from web browser
   ✓ EEPROM backup for power failure recovery
   ✓ Hardware reset via GPIO14 to clear all settings
   ✓ Visual feedback with LED status indicators
   
   FIRST TIME SETUP:
   1. Upload this sketch to ESP32
   2. Connect to WiFi network ""ESP32-Motor-Timer"" (password: 12345678)
   3. Open web browser to 192.168.4.1
   4. Follow 3-step setup wizard:
      - Sync current time from your device
      - Set motor run time (5-300 seconds)
      - Select operation hours (checkboxes for each hour 00:00-23:00)
   5. Click ""Start Operation"" - ESP32 enters automatic mode
   
   NORMAL OPERATION:
   • ESP32 sleeps in deep sleep mode (uses <1mA power)
   • Wakes up automatically at scheduled times
   • Runs motor for configured duration
   • LED blinks during motor operation
   • Returns to deep sleep until next scheduled time
   
   POWER FAILURE RECOVERY:
   • Settings automatically saved to EEPROM after first configuration
   • If power is lost, ESP32 recovers settings from EEPROM on restart
   • Time estimation helps resume operation even without WiFi
   • System continues running with last known schedule
   
   MANUAL RESET (Clear All Settings):
   1. Connect GPIO14 to 3.3V (use jumper wire or switch)
   2. Press ESP32 reset button OR power cycle
   3. ESP32 will detect GPIO14 HIGH and clear all EEPROM settings
   4. Automatically enters setup mode for reconfiguration
   5. Disconnect GPIO14 from 3.3V after setup
   
   TROUBLESHOOTING:
   • No WiFi connection? ESP32 creates its own hotspot for setup
   • Setup timeout (4 minutes)? System tries to use EEPROM backup
   • Wrong schedule? Use GPIO14 reset to reconfigure
   • Motor not working? Check GPIO33 connection and power supply
   • LED not blinking? Check GPIO32 connection
   
   TECHNICAL SPECIFICATIONS:
   • Deep sleep power consumption: <1mA
   • Setup timeout: 4 minutes
   • WiFi network: ""ESP32-Motor-Timer""
   • WiFi password: ""12345678""
   • Web interface: 192.168.4.1
   • Motor pin: GPIO33 (active HIGH)
   • LED pin: GPIO32 (active HIGH)
   • Reset pin: GPIO14 (trigger HIGH)
   • EEPROM backup: 512 bytes
   • Time zone: GMT+1 (Portugal)
   • Schedule resolution: 1 hour
   • Run time range: 5-300 seconds
   • Maximum daily activations: 24
   
   WIRING DIAGRAM:
   ESP32 GPIO33 → Motor/Relay IN (or transistor base)
   ESP32 GPIO32 → LED + Resistor → GND
   ESP32 GPIO14 → Reset Switch → 3.3V (normally open)
   ESP32 GND → Motor/LED GND
   ESP32 VIN → External power supply (if needed)
   
   USAGE EXAMPLES:
   • Irrigation system: Water plants 3 times daily for 30 seconds each
   • Feeding system: Dispense food every 4 hours for 10 seconds
   • Ventilation: Run fan for 2 minutes every hour during day
   • Lighting: Turn on grow lights for 15 minutes at specific times
   
   SAFETY NOTES:
   • Motor voltage must match ESP32 output capability (3.3V logic)
   • Use appropriate relay or transistor for high-power motors
   • Ensure adequate power supply for motor and ESP32
   • GPIO14 must be disconnected during normal operation
   • Deep sleep mode saves battery but requires wake-up triggers
   
   VERSION HISTORY:
   v1.0 - Basic timer functionality
   v2.0 - Added EEPROM backup and power failure recovery
   v3.0 - Added GPIO14 hardware reset functionality
   
   ========================================================================
*/
#include ""soc/soc.h""           // Brownout error fix
#include ""soc/rtc_cntl_reg.h""  // Brownout error fix

#include ""driver/rtc_io.h"" // https://github.com/pycom/esp-idf-2.0/blob/master/components/driver/include/driver/rtc_io.h

#include <ESP32Time.h>
#include <WiFi.h>
#include <EEPROM.h>

#define uS_TO_S_FACTOR 1000000ULL
#define DEFAULT_MOTOR_ON_TIME 5
#define MIN_MOTOR_ON_TIME 5
#define MAX_MOTOR_ON_TIME 300
#define MOTOR_PIN 33
#define LED_PIN 32
#define WAKEUP_GPIO GPIO_NUM_14 // Only RTC IO are allowed
#define EEPROM_SIZE 512

// EEPROM Memory Map
#define EEPROM_MAGIC_ADDR 0
#define EEPROM_SCHEDULE_ADDR 4
#define EEPROM_RUNTIME_ADDR 28
#define EEPROM_LAST_SYNC_ADDR 32
#define EEPROM_MAGIC_NUMBER 0xDEADBEEF
#define MAX_TIME_STALENESS 7 * 24 * 3600

const char *ssid = ""ESP32-Motor-Timer"";
const char *password = ""12345678"";

ESP32Time rtc(3600);
WiFiServer server(80);

// RTC memory variables
RTC_DATA_ATTR bool timeWasSet = false;
RTC_DATA_ATTR bool scheduleWasSet = false;
RTC_DATA_ATTR bool runTimeWasSet = false;
RTC_DATA_ATTR int bootCount = 0;
RTC_DATA_ATTR unsigned long webServerStartTime = 0;
RTC_DATA_ATTR bool usingBackupSettings = false;
RTC_DATA_ATTR bool hourlySchedule[24] = {0};
RTC_DATA_ATTR int motorRunTime = DEFAULT_MOTOR_ON_TIME;

struct EEPROMSettings {
  uint32_t magic;
  bool schedule[24];
  int runTime;
  uint32_t lastSyncTime;
};

void setup() {
  Serial.begin(115200);
  delay(1000);
  EEPROM.begin(EEPROM_SIZE);
  
  bootCount++;
  Serial.println(""Boot count: "" + String(bootCount));

  pinMode(MOTOR_PIN, OUTPUT);
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(MOTOR_PIN, LOW);

  printWakeupReason();

  // Check if woken up by GPIO14 - clear EEPROM and reset
  if (esp_sleep_get_wakeup_cause() == ESP_SLEEP_WAKEUP_EXT0) {
    Serial.println(""=== GPIO RESET TRIGGERED ==="");
    Serial.println(""Clearing EEPROM settings..."");
    clearEEPROMSettings();
    
    // Reset RTC memory flags
    timeWasSet = false;
    scheduleWasSet = false;
    runTimeWasSet = false;
    usingBackupSettings = false;
    
    Serial.println(""EEPROM cleared - entering setup mode"");
    webServerStartTime = millis();
    setupWebServer();
    return;
  }

  // Normal wakeup logic
  if (timeWasSet && scheduleWasSet && runTimeWasSet && esp_sleep_get_wakeup_cause() == ESP_SLEEP_WAKEUP_TIMER) {
    handleScheduledWakeup();
  } else {
    if (tryLoadBackupSettings()) {
      Serial.println(""=== POWER FAILURE RECOVERY ==="");
      Serial.println(""Loaded backup settings from EEPROM"");
      printCurrentSettings();
      
      timeWasSet = false;
      usingBackupSettings = true;
      
      EEPROMSettings settings;
      loadSettingsFromEEPROM(settings);
      uint32_t currentEpoch = settings.lastSyncTime + (millis() / 1000);
      rtc.setTime(currentEpoch);
      timeWasSet = true;
      
      Serial.println(""Estimated time: "" + rtc.getTime(""%A, %B %d %Y %H:%M:%S""));
      scheduleNextWakeup();
    } else {
      Serial.println(""No backup settings found - entering setup mode"");
      webServerStartTime = millis();
      setupWebServer();
    }
  }
}

void loop() {
  if (!timeWasSet || !scheduleWasSet || !runTimeWasSet) {
    if (millis() - webServerStartTime > 240000) {
      if (tryLoadBackupSettings()) {
        Serial.println(""Timeout reached - falling back to EEPROM settings"");
        usingBackupSettings = true;
        
        EEPROMSettings settings;
        loadSettingsFromEEPROM(settings);
        uint32_t estimatedTime = settings.lastSyncTime + (millis() / 1000);
        rtc.setTime(estimatedTime);
        timeWasSet = true;
        
        scheduleNextWakeup();
      } else {
        Serial.println(""No backup settings - entering 3-hour sleep"");
        setupSleepWakeup();
        esp_deep_sleep_start();
      }
    }
    handleWebClient();
  }
}

void clearEEPROMSettings() {
  // Clear magic number to invalidate settings
  uint32_t clearMagic = 0x00000000;
  EEPROM.put(EEPROM_MAGIC_ADDR, clearMagic);
  EEPROM.commit();
  Serial.println(""EEPROM settings cleared"");
}

bool tryLoadBackupSettings() {
  EEPROMSettings settings;
  if (loadSettingsFromEEPROM(settings)) {
    for (int i = 0; i < 24; i++) {
      hourlySchedule[i] = settings.schedule[i];
    }
    motorRunTime = settings.runTime;
    scheduleWasSet = true;
    runTimeWasSet = true;
    return true;
  }
  return false;
}

bool loadSettingsFromEEPROM(EEPROMSettings &settings) {
  uint32_t magic;
  EEPROM.get(EEPROM_MAGIC_ADDR, magic);
  
  if (magic != EEPROM_MAGIC_NUMBER) {
    Serial.println(""No valid EEPROM settings found"");
    return false;
  }

  EEPROM.get(EEPROM_MAGIC_ADDR, settings.magic);
  for (int i = 0; i < 24; i++) {
    settings.schedule[i] = EEPROM.read(EEPROM_SCHEDULE_ADDR + i);
  }
  EEPROM.get(EEPROM_RUNTIME_ADDR, settings.runTime);
  EEPROM.get(EEPROM_LAST_SYNC_ADDR, settings.lastSyncTime);
  
  if (settings.runTime < MIN_MOTOR_ON_TIME || settings.runTime > MAX_MOTOR_ON_TIME) {
    Serial.println(""Invalid run time in EEPROM: "" + String(settings.runTime));
    return false;
  }
  
  Serial.println(""Valid EEPROM settings loaded"");
  return true;
}

void saveSettingsToEEPROM() {
  Serial.println(""Saving settings to EEPROM..."");
  
  EEPROMSettings settings;
  settings.magic = EEPROM_MAGIC_NUMBER;
  
  for (int i = 0; i < 24; i++) {
    settings.schedule[i] = hourlySchedule[i];
  }
  settings.runTime = motorRunTime;
  settings.lastSyncTime = rtc.getEpoch();
  
  EEPROM.put(EEPROM_MAGIC_ADDR, settings.magic);
  for (int i = 0; i < 24; i++) {
    EEPROM.write(EEPROM_SCHEDULE_ADDR + i, settings.schedule[i]);
  }
  EEPROM.put(EEPROM_RUNTIME_ADDR, settings.runTime);
  EEPROM.put(EEPROM_LAST_SYNC_ADDR, settings.lastSyncTime);
  EEPROM.commit();
  
  Serial.println(""Settings saved to EEPROM successfully"");
  printCurrentSettings();
}

void printCurrentSettings() {
  Serial.println(""Current Settings:"");
  Serial.println(""- Motor run time: "" + String(motorRunTime) + "" seconds"");
  Serial.print(""- Schedule: "");
  
  int count = 0;
  for (int h = 0; h < 24; h++) {
    if (hourlySchedule[h]) {
      if (count > 0) Serial.print("", "");
      Serial.print(String(h < 10 ? ""0"" : """") + String(h) + "":00"");
      count++;
    }
  }
  
  if (count == 0) {
    Serial.println(""No hours scheduled"");
  } else {
    Serial.println("" ("" + String(count) + "" times/day)"");
    Serial.println(""- Total daily runtime: "" + String(count * motorRunTime) + "" seconds"");
  }
}

void handleScheduledWakeup() {
  Serial.println(""\n=== Scheduled Wake-up ==="");
  Serial.println(""Current time: "" + rtc.getTime(""%A, %B %d %Y %H:%M:%S""));
  Serial.println(""Motor run time: "" + String(motorRunTime) + "" seconds"");
  
  if (usingBackupSettings) {
    Serial.println(""Running on backup settings from EEPROM"");
  }

  runMotor();
  scheduleNextWakeup();
}

void runMotor() {
  Serial.println(""Starting motor for "" + String(motorRunTime) + "" seconds..."");

  digitalWrite(LED_PIN, HIGH);
  digitalWrite(MOTOR_PIN, HIGH);

  for (int i = motorRunTime; i > 0; i--) {
    Serial.println(""Motor running... "" + String(i) + ""s remaining"");
    delay(1000);

    int blinkInterval = (motorRunTime < 10) ? 1 : 5;
    if (i % blinkInterval == 0) {
      digitalWrite(LED_PIN, LOW);
      delay(100);
      digitalWrite(LED_PIN, HIGH);
    }
  }

  digitalWrite(MOTOR_PIN, LOW);
  digitalWrite(LED_PIN, LOW);
  Serial.println(""Motor stopped."");
}

void setupSleepWakeup() {
  // Setup timer wakeup
  esp_sleep_enable_timer_wakeup(3 * 3600 * uS_TO_S_FACTOR);
  
  // Setup GPIO wakeup for reset functionality
  esp_sleep_enable_ext0_wakeup(WAKEUP_GPIO, 1); // 1 = High trigger
  rtc_gpio_pullup_dis(WAKEUP_GPIO);
  rtc_gpio_pulldown_en(WAKEUP_GPIO);
  Serial.println(""Setup ESP32 to wake up on GPIO14 trigger (reset mode)"");
}

void scheduleNextWakeup() {
  struct tm timeinfo = rtc.getTimeStruct();
  int currentHour = timeinfo.tm_hour;
  int currentMinute = timeinfo.tm_min;

  unsigned long sleepTime = calculateSleepTime(currentHour, currentMinute);

  if (sleepTime > 0) {
    Serial.println(""Next wake-up in "" + String(sleepTime / 3600) + "" hours and "" +
                   String((sleepTime % 3600) / 60) + "" minutes"");

    esp_sleep_enable_timer_wakeup(sleepTime * uS_TO_S_FACTOR);
    
    // Always enable GPIO wakeup for reset functionality
    esp_sleep_enable_ext0_wakeup(WAKEUP_GPIO, 1);
    rtc_gpio_pullup_dis(WAKEUP_GPIO);
    rtc_gpio_pulldown_en(WAKEUP_GPIO);
    
    Serial.println(""Entering deep sleep... (GPIO14 HIGH = reset)"");
    Serial.flush();
    esp_deep_sleep_start();
  } else {
    Serial.println(""No scheduled hours found - entering 24-hour sleep"");
    esp_sleep_enable_timer_wakeup(24 * 3600 * uS_TO_S_FACTOR);
    
    esp_sleep_enable_ext0_wakeup(WAKEUP_GPIO, 1);
    rtc_gpio_pullup_dis(WAKEUP_GPIO);
    rtc_gpio_pulldown_en(WAKEUP_GPIO);
    
    esp_deep_sleep_start();
  }
}

unsigned long calculateSleepTime(int currentHour, int currentMinute) {
  int nextHour = -1;

  for (int h = currentHour + 1; h < 24; h++) {
    if (hourlySchedule[h]) {
      nextHour = h;
      break;
    }
  }

  if (nextHour == -1) {
    for (int h = 0; h < 24; h++) {
      if (hourlySchedule[h]) {
        nextHour = h + 24;
        break;
      }
    }
  }

  if (nextHour == -1) return 0;

  int currentTotalMinutes = currentHour * 60 + currentMinute;
  int nextTotalMinutes = (nextHour % 24) * 60;

  if (nextHour >= 24) {
    nextTotalMinutes += 24 * 60;
  }

  int sleepMinutes = nextTotalMinutes - currentTotalMinutes;
  return sleepMinutes * 60;
}

void setupWebServer() {
  Serial.println(""\n=== Setting up Web Server for Configuration ==="");
  Serial.println(""Connect to WiFi network: "" + String(ssid));
  Serial.println(""Password: "" + String(password));
  Serial.println(""TIMEOUT: 4 minutes"");
  Serial.println(""RESET: Connect GPIO14 to 3.3V and reset ESP32"");

  WiFi.softAP(ssid, password);
  IPAddress IP = WiFi.softAPIP();
  Serial.println(""Web interface: http://"" + IP.toString());
  server.begin();

  for (int i = 0; i < 10; i++) {
    digitalWrite(LED_PIN, HIGH);
    delay(200);
    digitalWrite(LED_PIN, LOW);
    delay(200);
  }
}

void handleWebClient() {
  WiFiClient client = server.available();

  if (client) {
    Serial.println(""Client connected"");
    String currentLine = """";

    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        if (c == '\n') {
          if (currentLine.length() == 0) {
            sendWebPage(client);
            break;
          } else {
            currentLine = """";
          }
        } else if (c != '\r') {
          currentLine += c;
        }

        if (currentLine.endsWith(""POST /syncTime"")) {
          handleTimeSyncRequest(client);
        } else if (currentLine.endsWith(""POST /setRunTime"")) {
          handleRunTimeRequest(client);
        } else if (currentLine.endsWith(""POST /setSchedule"")) {
          handleScheduleRequest(client);
        }
      }
    }
    client.stop();
  }
}

// Simplified web page (keeping core functionality)
void sendWebPage(WiFiClient &client) {
  unsigned long elapsed = millis() - webServerStartTime;
  unsigned long remaining = (240000 - elapsed) / 1000;

  client.println(""HTTP/1.1 200 OK"");
  client.println(""Content-type:text/html"");
  client.println();
  client.println(""<!DOCTYPE html><html>"");
  client.println(""<head><title>ESP32 Motor Timer Setup</title>"");
  client.println(""<meta name='viewport' content='width=device-width, initial-scale=1'>"");
  client.println(""<style>"");
  client.println(""body{font-family:Arial;text-align:center;padding:20px;background:#f0f0f0;}"");
  client.println("".container{max-width:600px;margin:0 auto;background:white;padding:30px;border-radius:10px;}"");
  client.println(""input,button{padding:10px;margin:5px;font-size:16px;border:1px solid #ddd;border-radius:5px;}"");
  client.println(""button{background:#4CAF50;color:white;border:none;cursor:pointer;padding:15px 30px;}"");
  client.println("".timeout{color:red;font-weight:bold;}"");
  client.println("".step{margin:20px 0;padding:15px;background:#f9f9f9;border-radius:5px;}"");
  client.println("".schedule-grid{display:grid;grid-template-columns:repeat(4,1fr);gap:10px;margin:20px 0;}"");
  client.println("".hour-checkbox{display:flex;align-items:center;padding:8px;background:white;border:1px solid #ddd;border-radius:5px;}"");
  client.println("".reset-info{background:#FFE6E6;padding:10px;border-radius:5px;margin:10px 0;border:1px solid #FF9999;}"");
  client.println(""</style></head>"");
  client.println(""<body>"");
  client.println(""<div class='container'>"");
  client.println(""<h1>ESP32 Motor Timer Setup</h1>"");
  
  client.println(""<div class='reset-info'>"");
  client.println(""<strong>Reset Instructions:</strong><br>"");
  client.println(""To clear settings: Connect GPIO14 to 3.3V and reset ESP32"");
  client.println(""</div>"");
  
  client.println(""<div class='timeout'>Timeout: <span id='countdown'>"" + String(remaining) + ""</span> seconds</div>"");

  // Step 1: Time sync
  client.println(""<div class='step'>"");
  client.println(""<h3>Step 1: Set Current Time</h3>"");
  if (timeWasSet) {
    client.println(""<p>✅ Time set: "" + rtc.getTime(""%H:%M:%S %d/%m/%Y"") + ""</p>"");
  } else {
    client.println(""<h4 id='currentTime'></h4>"");
    client.println(""<form action='/syncTime' method='POST'>"");
    client.println(""<input type='hidden' name='epochTime' id='hiddenEpochTime'>"");
    client.println(""<button type='submit'>Sync Time</button>"");
    client.println(""</form>"");
  }
  client.println(""</div>"");

  // Step 2: Motor run time
  client.println(""<div class='step'>"");
  client.println(""<h3>Step 2: Set Motor Run Time</h3>"");
  if (runTimeWasSet) {
    client.println(""<p>✅ Run time set: "" + String(motorRunTime) + "" seconds</p>"");
  } else {
    client.println(""<form action='/setRunTime' method='POST'>"");
    client.println(""<input type='range' name='runTime' min='5' max='300' value='"" + String(motorRunTime) + ""'>"");
    client.println(""<span id='runTimeDisplay'>"" + String(motorRunTime) + ""s</span>"");
    client.println(""<button type='submit'>Set Run Time</button>"");
    client.println(""</form>"");
  }
  client.println(""</div>"");

  // Step 3: Schedule
  client.println(""<div class='step'>"");
  client.println(""<h3>Step 3: Select Operation Hours</h3>"");
  if (scheduleWasSet) {
    client.println(""<p>✅ Schedule set!</p>"");
  } else {
    client.println(""<form action='/setSchedule' method='POST'>"");
    client.println(""<div class='schedule-grid'>"");
    for (int h = 0; h < 24; h++) {
      client.println(""<div class='hour-checkbox'>"");
      client.println(""<input type='checkbox' name='hour"" + String(h) + ""' value='1'>"");
      client.println(""<label>"" + String(h < 10 ? ""0"" : """") + String(h) + "":00</label>"");
      client.println(""</div>"");
    }
    client.println(""</div>"");
    client.println(""<button type='submit'>Set Schedule</button>"");
    client.println(""</form>"");
  }
  client.println(""</div>"");

  if (timeWasSet && scheduleWasSet && runTimeWasSet) {
    client.println(""<div class='step'>"");
    client.println(""<h3>✅ Setup Complete!</h3>"");
    client.println(""<p>ESP32 will now enter scheduled operation mode.</p>"");
    client.println(""<button onclick='startOperation()'>Start Operation</button>"");
    client.println(""</div>"");
  }

  client.println(""</div>"");

  // Simplified JavaScript
  client.println(""<script>"");
  client.println(""var countdown="" + String(remaining) + "";"");
  client.println(""function updateTime(){"");
  client.println(""var now=new Date();"");
  client.println(""if(document.getElementById('currentTime'))"");
  client.println(""document.getElementById('currentTime').innerHTML='Current Time: '+now.toLocaleString();"");
  client.println(""if(document.getElementById('hiddenEpochTime'))"");
  client.println(""document.getElementById('hiddenEpochTime').value=Math.floor(now.getTime()/1000);"");
  client.println(""}"");
  client.println(""function updateCountdown(){"");
  client.println(""countdown--;document.getElementById('countdown').innerHTML=countdown;"");
  client.println(""if(countdown<=0)document.body.innerHTML='<h2>Timeout reached</h2>';"");
  client.println(""}"");
  client.println(""function startOperation(){"");
  client.println(""document.body.innerHTML='<h2>Starting operation...</h2>';"");
  client.println(""}"");
  client.println(""setInterval(updateTime,1000);setInterval(updateCountdown,1000);updateTime();"");
  client.println(""</script></body></html>"");
}

void handleTimeSyncRequest(WiFiClient &client) {
  String requestBody = """";
  while (client.available()) {
    requestBody += (char)client.read();
  }

  int epochIndex = requestBody.indexOf(""epochTime="");
  if (epochIndex != -1) {
    long epochTime = requestBody.substring(epochIndex + 10).toInt();
    rtc.setTime(epochTime);
    timeWasSet = true;
    Serial.println(""Time synchronized: "" + rtc.getTime(""%A, %B %d %Y %H:%M:%S""));
  }

  client.println(""HTTP/1.1 302 Found"");
  client.println(""Location: /"");
  client.println();
}

void handleRunTimeRequest(WiFiClient &client) {
  String requestBody = """";
  while (client.available()) {
    requestBody += (char)client.read();
  }

  int runTimeIndex = requestBody.indexOf(""runTime="");
  if (runTimeIndex != -1) {
    int newRunTime = requestBody.substring(runTimeIndex + 8).toInt();
    if (newRunTime >= MIN_MOTOR_ON_TIME && newRunTime <= MAX_MOTOR_ON_TIME) {
      motorRunTime = newRunTime;
      runTimeWasSet = true;
      Serial.println(""Motor run time set to: "" + String(motorRunTime) + "" seconds"");
    }
  }

  client.println(""HTTP/1.1 302 Found"");
  client.println(""Location: /"");
  client.println();
}

void handleScheduleRequest(WiFiClient &client) {
  String requestBody = """";
  while (client.available()) {
    requestBody += (char)client.read();
  }

  for (int h = 0; h < 24; h++) {
    hourlySchedule[h] = false;
  }

  for (int h = 0; h < 24; h++) {
    String hourParam = ""hour"" + String(h) + ""=1"";
    if (requestBody.indexOf(hourParam) != -1) {
      hourlySchedule[h] = true;
    }
  }

  scheduleWasSet = true;

  // Save to EEPROM when configuration is complete
  if (timeWasSet && scheduleWasSet && runTimeWasSet) {
    saveSettingsToEEPROM();
    delay(2000);
    scheduleNextWakeup();
  }

  client.println(""HTTP/1.1 302 Found"");
  client.println(""Location: /"");
  client.println();
}

void printWakeupReason() {
  esp_sleep_wakeup_cause_t wakeup_reason = esp_sleep_get_wakeup_cause();

  switch (wakeup_reason) {
    case ESP_SLEEP_WAKEUP_TIMER:
      Serial.println(""Wake-up: Scheduled timer"");
      break;
    case ESP_SLEEP_WAKEUP_EXT0:
      Serial.println(""Wake-up: GPIO14 external signal (RESET MODE)"");
      break;
    default:
      Serial.println(""Wake-up: Power on or reset"");
      break;
  }
}
"
DhZJ7ZLX,esp32_timer_ontime_24h,kodilivetv,C++,Thursday 12th of June 2025 12:55:55 PM CDT,"/*
   ESP32 Scheduled Motor Control with Deep Sleep - Hourly Scheduling with Configurable Run Time

   DESCRIPTION:
   This sketch creates an automated motor control system that runs a motor at user-selected
   hours of the day with user-configurable run time while maintaining ultra-low power 
   consumption between operations.

   FEATURES:
   • Allows selection of any hours (00:00-23:00) for motor operation via web interface
   • Configurable motor run time from 5 to 300 seconds (default: 5 seconds)
   • Uses deep sleep between operations for maximum battery efficiency
   • Web-based setup interface with 24 hourly checkboxes and run time slider
   • Built-in LED status indicators during setup and operation
   • RTC memory storage preserves settings through deep sleep cycles
   • Automatic timeout protection (enters sleep if no configuration within 4 minutes)

   HARDWARE REQUIREMENTS:
   • ESP32 development board
   • MOSFET (for motor control) connected to GPIO 33
   • Motor connected through MOSFET
   • Built-in LED on GPIO 2 (most ESP32 boards)
   • Optional: External RTC battery for better timekeeping

   SETUP PROCESS:
   1. Upload sketch to ESP32
   2. Connect to WiFi network ""ESP32-Motor-Timer"" (password: 12345678)
   3. Navigate to the IP address shown in Serial Monitor
   4. Sync current time from your browser
   5. Set desired motor run time (5-300 seconds)
   6. Check boxes for desired operation hours (e.g., 09:00, 19:00, 21:00)
   7. ESP32 automatically enters scheduled operation mode

   OPERATION:
   • ESP32 sleeps in deep sleep mode (uses ~10µA)
   • Wakes up at each selected hour
   • Runs motor for configured time with LED indication
   • Calculates next scheduled hour and returns to deep sleep
   • Cycle repeats based on selected schedule

   POWER CONSUMPTION:
   • Deep sleep: ~10µA (months of battery life)
   • Active operation: ~80mA for configured duration
   • Setup mode: ~150mA (4 minute timeout)

   TROUBLESHOOTING:
   • If setup doesn't complete, ESP32 sleeps for 3 hours then restarts setup
   • Press reset button to restart setup process
   • Check Serial Monitor (115200 baud) for debugging information
   • Time is automatically adjusted for Portuguese Summer Time (+1 hour)

   LIBRARIES REQUIRED:
   • ESP32Time (for RTC functionality)
   • WiFi (built-in ESP32 library)

   MIT License - Free to use and modify
   Based on ESP32Time library examples and ESP32 deep sleep functionality
*/

#include <ESP32Time.h>
#include <WiFi.h>

#define uS_TO_S_FACTOR 1000000ULL  // Conversion factor for micro seconds to seconds
#define DEFAULT_MOTOR_ON_TIME 5    // Default motor run time in seconds
#define MIN_MOTOR_ON_TIME 5        // Minimum motor run time in seconds
#define MAX_MOTOR_ON_TIME 300      // Maximum motor run time in seconds
#define MOTOR_PIN 33               // GPIO pin connected to MOSFET gate
#define LED_PIN 32                 // Built-in LED for status indication

// WiFi credentials for initial time sync
const char *ssid = ""ESP32-Motor-Timer"";
const char *password = ""12345678"";

//ESP32Time rtc;
ESP32Time rtc(3600);  // offset in seconds GMT+1 Portugal Summer Time
WiFiServer server(80);

// RTC memory variables (survive deep sleep)
RTC_DATA_ATTR bool timeWasSet = false;
RTC_DATA_ATTR bool scheduleWasSet = false;
RTC_DATA_ATTR bool runTimeWasSet = false;
RTC_DATA_ATTR int bootCount = 0;
RTC_DATA_ATTR unsigned long webServerStartTime = 0;

// Hourly schedule - 24 hour array (0=disabled, 1=enabled)
RTC_DATA_ATTR bool hourlySchedule[24] = {0}; // All hours disabled by default

// Motor run time configuration
RTC_DATA_ATTR int motorRunTime = DEFAULT_MOTOR_ON_TIME; // Run time in seconds

void setup() {
  Serial.begin(115200);
  delay(1000);

  bootCount++;
  Serial.println(""Boot count: "" + String(bootCount));

  // Initialize pins
  pinMode(MOTOR_PIN, OUTPUT);
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(MOTOR_PIN, LOW);  // Ensure motor is off initially

  printWakeupReason();

  // Check if this is a scheduled wake-up and all settings have been configured
  if (timeWasSet && scheduleWasSet && runTimeWasSet && esp_sleep_get_wakeup_cause() == ESP_SLEEP_WAKEUP_TIMER) {
    handleScheduledWakeup();
  } else {
    // First boot, manual reset, or incomplete setup - need web interface
    webServerStartTime = millis();
    setupWebServer();
  }
}

void loop() {
  // Handle web server for time and schedule setting
  if (!timeWasSet || !scheduleWasSet || !runTimeWasSet) {
    // Check for 4-minute timeout
    if (millis() - webServerStartTime > 240000) { // 4 minutes = 240,000 ms
      Serial.println(""Web server timeout - entering 3-hour sleep to save battery"");
      esp_sleep_enable_timer_wakeup(3 * 3600 * uS_TO_S_FACTOR); // 3 hours
      esp_deep_sleep_start();
    }
    handleWebClient();
  }
}

void handleScheduledWakeup() {
  Serial.println(""\n=== Scheduled Wake-up ==="");
  Serial.println(""Current time: "" + rtc.getTime(""%A, %B %d %Y %H:%M:%S""));
  Serial.println(""Motor run time: "" + String(motorRunTime) + "" seconds"");

  // Run the motor
  runMotor();

  // Calculate next wake-up time
  scheduleNextWakeup();
}

void runMotor() {
  Serial.println(""Starting motor for "" + String(motorRunTime) + "" seconds..."");

  // Blink LED to indicate motor operation
  digitalWrite(LED_PIN, HIGH);

  // Turn on motor via MOSFET
  digitalWrite(MOTOR_PIN, HIGH);

  // Run for specified time with status updates
  for (int i = motorRunTime; i > 0; i--) {
    Serial.println(""Motor running... "" + String(i) + ""s remaining"");
    delay(1000);

    // Blink LED every 5 seconds during operation (or every second if run time < 10s)
    int blinkInterval = (motorRunTime < 10) ? 1 : 5;
    if (i % blinkInterval == 0) {
      digitalWrite(LED_PIN, LOW);
      delay(100);
      digitalWrite(LED_PIN, HIGH);
    }
  }

  // Turn off motor
  digitalWrite(MOTOR_PIN, LOW);
  digitalWrite(LED_PIN, LOW);

  Serial.println(""Motor stopped."");
}

void scheduleNextWakeup() {
  struct tm timeinfo = rtc.getTimeStruct();
  int currentHour = timeinfo.tm_hour;
  int currentMinute = timeinfo.tm_min;

  // Calculate seconds until next scheduled hour
  unsigned long sleepTime = calculateSleepTime(currentHour, currentMinute);

  if (sleepTime > 0) {
    Serial.println(""Next wake-up in "" + String(sleepTime / 3600) + "" hours and "" +
                   String((sleepTime % 3600) / 60) + "" minutes"");

    // Configure and enter deep sleep
    esp_sleep_enable_timer_wakeup(sleepTime * uS_TO_S_FACTOR);
    Serial.println(""Entering deep sleep..."");
    Serial.flush();
    esp_deep_sleep_start();
  } else {
    Serial.println(""No scheduled hours found - entering 24-hour sleep"");
    esp_sleep_enable_timer_wakeup(24 * 3600 * uS_TO_S_FACTOR); // 24 hours
    esp_deep_sleep_start();
  }
}

unsigned long calculateSleepTime(int currentHour, int currentMinute) {
  // Find next scheduled hour
  int nextHour = -1;

  // First, check if there are any hours scheduled later today
  for (int h = currentHour + 1; h < 24; h++) {
    if (hourlySchedule[h]) {
      nextHour = h;
      break;
    }
  }

  // If no hours found later today, check from beginning of next day
  if (nextHour == -1) {
    for (int h = 0; h < 24; h++) {
      if (hourlySchedule[h]) {
        nextHour = h + 24; // Add 24 to indicate next day
        break;
      }
    }
  }

  // If still no hours found, return 0 (no schedule set)
  if (nextHour == -1) {
    return 0;
  }

  // Calculate sleep time
  int currentTotalMinutes = currentHour * 60 + currentMinute;
  int nextTotalMinutes = (nextHour % 24) * 60; // Target minute is always 0

  // If next hour is tomorrow, add 24 hours worth of minutes
  if (nextHour >= 24) {
    nextTotalMinutes += 24 * 60;
  }

  int sleepMinutes = nextTotalMinutes - currentTotalMinutes;
  return sleepMinutes * 60; // Convert to seconds
}

void setupWebServer() {
  Serial.println(""\n=== Setting up Web Server for Configuration ==="");
  Serial.println(""Connect to WiFi network: "" + String(ssid));
  Serial.println(""Password: "" + String(password));
  Serial.println(""TIMEOUT: 4 minutes (will sleep for 3 hours if no configuration)"");

  WiFi.softAP(ssid, password);
  IPAddress IP = WiFi.softAPIP();
  Serial.println(""Web interface: http://"" + IP.toString());
  server.begin();

  // Blink LED to indicate setup mode
  for (int i = 0; i < 10; i++) {
    digitalWrite(LED_PIN, HIGH);
    delay(200);
    digitalWrite(LED_PIN, LOW);
    delay(200);
  }
}

void handleWebClient() {
  WiFiClient client = server.available();

  if (client) {
    Serial.println(""Client connected"");
    String currentLine = """";

    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        if (c == '\n') {
          if (currentLine.length() == 0) {
            sendWebPage(client);
            break;
          } else {
            currentLine = """";
          }
        } else if (c != '\r') {
          currentLine += c;
        }

        if (currentLine.endsWith(""POST /syncTime"")) {
          handleTimeSyncRequest(client);
        } else if (currentLine.endsWith(""POST /setRunTime"")) {
          handleRunTimeRequest(client);
        } else if (currentLine.endsWith(""POST /setSchedule"")) {
          handleScheduleRequest(client);
        }
      }
    }
    client.stop();
  }
}

void sendWebPage(WiFiClient &client) {
  // Calculate remaining time
  unsigned long elapsed = millis() - webServerStartTime;
  unsigned long remaining = (240000 - elapsed) / 1000; // seconds remaining

  client.println(""HTTP/1.1 200 OK"");
  client.println(""Content-type:text/html"");
  client.println();
  client.println(""<!DOCTYPE html><html>"");
  client.println(""<head><title>ESP32 Motor Timer Setup</title>"");
  client.println(""<meta name='viewport' content='width=device-width, initial-scale=1'>"");
  client.println(""<style>"");
  client.println(""body{font-family:Arial;text-align:center;padding:20px;background:#f0f0f0;}"");
  client.println("".container{max-width:600px;margin:0 auto;background:white;padding:30px;border-radius:10px;box-shadow:0 2px 10px rgba(0,0,0,0.1);}"");
  client.println(""input,button{padding:10px;margin:5px;font-size:16px;border:1px solid #ddd;border-radius:5px;}"");
  client.println(""button{background:#4CAF50;color:white;border:none;cursor:pointer;padding:15px 30px;}"");
  client.println(""button:hover{background:#45a049;}"");
  client.println("".timeout{color:red;font-weight:bold;}"");
  client.println("".step{margin:20px 0;padding:15px;background:#f9f9f9;border-radius:5px;}"");
  client.println("".schedule-grid{display:grid;grid-template-columns:repeat(4,1fr);gap:10px;margin:20px 0;}"");
  client.println("".hour-checkbox{display:flex;align-items:center;padding:8px;background:white;border:1px solid #ddd;border-radius:5px;}"");
  client.println("".hour-checkbox input{margin-right:8px;}"");
  client.println("".hour-checkbox:hover{background:#f0f8ff;}"");
  client.println("".selected-hours{background:#e8f5e8;padding:10px;border-radius:5px;margin:10px 0;}"");
  client.println("".runtime-control{display:flex;align-items:center;justify-content:center;gap:15px;margin:15px 0;}"");
  client.println("".runtime-slider{width:200px;}"");
  client.println("".runtime-display{font-weight:bold;color:#2196F3;min-width:80px;}"");
  client.println(""</style></head>"");
  client.println(""<body>"");
  client.println(""<div class='container'>"");
  client.println(""<h1>ESP32 Motor Timer Setup</h1>"");
  client.println(""<div class='timeout'>Timeout: <span id='countdown'>"" + String(remaining) + ""</span> seconds</div>"");

  // Step 1: Time sync
  client.println(""<div class='step'>"");
  client.println(""<h3>Step 1: Set Current Time</h3>"");
  if (timeWasSet) {
    client.println(""<p>✅ Time set: "" + rtc.getTime(""%H:%M:%S %d/%m/%Y"") + ""</p>"");
  } else {
    client.println(""<h4 id='currentTime'></h4>"");
    client.println(""<form action='/syncTime' method='POST'>"");
    client.println(""<input type='hidden' name='epochTime' id='hiddenEpochTime'>"");
    client.println(""<button type='submit'>Sync Time</button>"");
    client.println(""</form>"");
  }
  client.println(""</div>"");

  // Step 2: Motor run time setup
  client.println(""<div class='step'>"");
  client.println(""<h3>Step 2: Set Motor Run Time</h3>"");
  if (runTimeWasSet) {
    client.println(""<div class='selected-hours'>"");
    client.println(""<p>✅ Run time set: "" + String(motorRunTime) + "" seconds</p>"");
    client.println(""</div>"");
  } else {
    client.println(""<p>Set how long the motor should run each time (5-300 seconds):</p>"");
    client.println(""<form action='/setRunTime' method='POST'>"");
    client.println(""<div class='runtime-control'>"");
    client.println(""<label>5s</label>"");
    client.println(""<input type='range' name='runTime' id='runTimeSlider' class='runtime-slider' "");
    client.println(""min='"" + String(MIN_MOTOR_ON_TIME) + ""' max='"" + String(MAX_MOTOR_ON_TIME) + ""' "");
    client.println(""value='"" + String(motorRunTime) + ""' oninput='updateRunTimeDisplay(this.value)'>"");
    client.println(""<label>300s</label>"");
    client.println(""</div>"");
    client.println(""<div class='runtime-display' id='runTimeDisplay'>"" + String(motorRunTime) + "" seconds</div>"");
    client.println(""<button type='submit'>Set Run Time</button>"");
    client.println(""</form>"");
  }
  client.println(""</div>"");

  // Step 3: Schedule setup
  client.println(""<div class='step'>"");
  client.println(""<h3>Step 3: Select Operation Hours</h3>"");
  client.println(""<p>Check the boxes for hours when the motor should run:</p>"");

  if (scheduleWasSet) {
    client.println(""<div class='selected-hours'>"");
    client.println(""<p>✅ Schedule set! Motor will run at:</p>"");
    String selectedHours = """";
    int count = 0;
    for (int h = 0; h < 24; h++) {
      if (hourlySchedule[h]) {
        if (count > 0) selectedHours += "", "";
        selectedHours += String(h < 10 ? ""0"" : """") + String(h) + "":00"";
        count++;
      }
    }
    if (count == 0) {
      client.println(""<p>No hours selected</p>"");
    } else {
      client.println(""<p>"" + selectedHours + ""</p>"");
      client.println(""<p>Total: "" + String(count) + "" times per day</p>"");
      if (runTimeWasSet) {
        client.println(""<p>Each run: "" + String(motorRunTime) + "" seconds</p>"");
      }
    }
    client.println(""</div>"");
  } else {
    client.println(""<form action='/setSchedule' method='POST'>"");
    client.println(""<div class='schedule-grid'>"");

    // Create 24 checkboxes for each hour
    for (int h = 0; h < 24; h++) {
      client.println(""<div class='hour-checkbox'>"");
      client.println(""<input type='checkbox' name='hour"" + String(h) + ""' value='1'"" +
                     (hourlySchedule[h] ? "" checked"" : """") + "">"");
      client.println(""<label>"" + String(h < 10 ? ""0"" : """") + String(h) + "":00</label>"");
      client.println(""</div>"");
    }

    client.println(""</div>"");
    client.println(""<button type='submit'>Set Schedule</button>"");
    client.println(""</form>"");
  }
  client.println(""</div>"");

  if (timeWasSet && scheduleWasSet && runTimeWasSet) {
    client.println(""<div class='step'>"");
    client.println(""<h3>✅ Setup Complete!</h3>"");
    client.println(""<p>ESP32 will now enter scheduled operation mode.</p>"");
    client.println(""<p><strong>Configuration Summary:</strong></p>"");
    client.println(""<ul style='text-align:left;display:inline-block;'>"");
    client.println(""<li>Motor run time: "" + String(motorRunTime) + "" seconds</li>"");
    
    String selectedHours = """";
    int count = 0;
    for (int h = 0; h < 24; h++) {
      if (hourlySchedule[h]) {
        if (count > 0) selectedHours += "", "";
        selectedHours += String(h < 10 ? ""0"" : """") + String(h) + "":00"";
        count++;
      }
    }
    client.println(""<li>Schedule: "" + selectedHours + ""</li>"");
    client.println(""<li>Total daily runtime: "" + String(count * motorRunTime) + "" seconds</li>"");
    client.println(""</ul>"");
    client.println(""<button onclick='startOperation()'>Start Operation</button>"");
    client.println(""</div>"");
  }

  client.println(""</div>"");

  // JavaScript for time updates, countdown, and run time display
  client.println(""<script>"");
  client.println(""var countdown = "" + String(remaining) + "";"");
  client.println(""function updateTime(){"");
  client.println(""var now=new Date();"");
  client.println(""if(document.getElementById('currentTime'))"");
  client.println(""document.getElementById('currentTime').innerHTML='Current Time: '+now.toLocaleString();"");
  client.println(""if(document.getElementById('hiddenEpochTime'))"");
  client.println(""document.getElementById('hiddenEpochTime').value=Math.floor(now.getTime()/1000);"");
  client.println(""}"");
  client.println(""function updateCountdown(){"");
  client.println(""countdown--;"");
  client.println(""document.getElementById('countdown').innerHTML=countdown;"");
  client.println(""if(countdown<=0){"");
  client.println(""document.body.innerHTML='<h2>Timeout reached - ESP32 entering sleep mode</h2>';"");
  client.println(""}"");
  client.println(""}"");
  client.println(""function updateRunTimeDisplay(value){"");
  client.println(""document.getElementById('runTimeDisplay').innerHTML=value+' seconds';"");
  client.println(""}"");
  client.println(""function startOperation(){"");
  client.println(""document.body.innerHTML='<h2>Starting scheduled operation...</h2><p>ESP32 entering deep sleep mode</p>';"");
  client.println(""setTimeout(function(){window.location.reload();},2000);"");
  client.println(""}"");
  client.println(""setInterval(updateTime,1000);"");
  client.println(""setInterval(updateCountdown,1000);"");
  client.println(""updateTime();"");
  client.println(""</script></body></html>"");
  client.println();
}

void handleTimeSyncRequest(WiFiClient &client) {
  String requestBody = """";
  while (client.available()) {
    requestBody += (char)client.read();
  }

  int epochIndex = requestBody.indexOf(""epochTime="");
  if (epochIndex != -1) {
    long epochTime = requestBody.substring(epochIndex + 10).toInt();
    rtc.setTime(epochTime);
    timeWasSet = true;

    Serial.println(""Time synchronized: "" + rtc.getTime(""%A, %B %d %Y %H:%M:%S""));

    // Send redirect back to main page
    client.println(""HTTP/1.1 302 Found"");
    client.println(""Location: /"");
    client.println();
  }
}

void handleRunTimeRequest(WiFiClient &client) {
  String requestBody = """";
  while (client.available()) {
    requestBody += (char)client.read();
  }

  Serial.println(""Run time request body: "" + requestBody);

  int runTimeIndex = requestBody.indexOf(""runTime="");
  if (runTimeIndex != -1) {
    int newRunTime = requestBody.substring(runTimeIndex + 8).toInt();
    
    // Validate run time is within acceptable range
    if (newRunTime >= MIN_MOTOR_ON_TIME && newRunTime <= MAX_MOTOR_ON_TIME) {
      motorRunTime = newRunTime;
      runTimeWasSet = true;
      Serial.println(""Motor run time set to: "" + String(motorRunTime) + "" seconds"");
    } else {
      Serial.println(""Invalid run time: "" + String(newRunTime) + "". Using default: "" + String(DEFAULT_MOTOR_ON_TIME));
      motorRunTime = DEFAULT_MOTOR_ON_TIME;
      runTimeWasSet = true;
    }
  }

  // Send redirect back to main page
  client.println(""HTTP/1.1 302 Found"");
  client.println(""Location: /"");
  client.println();
}

void handleScheduleRequest(WiFiClient &client) {
  String requestBody = """";
  while (client.available()) {
    requestBody += (char)client.read();
  }

  Serial.println(""Schedule request body: "" + requestBody);

  // Reset all hours first
  for (int h = 0; h < 24; h++) {
    hourlySchedule[h] = false;
  }

  // Parse checkbox data
  for (int h = 0; h < 24; h++) {
    String hourParam = ""hour"" + String(h) + ""=1"";
    if (requestBody.indexOf(hourParam) != -1) {
      hourlySchedule[h] = true;
      Serial.println(""Hour "" + String(h) + "" enabled"");
    }
  }

  scheduleWasSet = true;

  Serial.println(""Schedule updated:"");
  int enabledCount = 0;
  for (int h = 0; h < 24; h++) {
    if (hourlySchedule[h]) {
      Serial.println(""- "" + String(h) + "":00"");
      enabledCount++;
    }
  }
  Serial.println(""Total enabled hours: "" + String(enabledCount));
  Serial.println(""Total daily motor runtime: "" + String(enabledCount * motorRunTime) + "" seconds"");

  // If all settings are configured, start operation
  if (timeWasSet && scheduleWasSet && runTimeWasSet) {
    delay(2000); // Allow user to see confirmation
    scheduleNextWakeup();
  }

  // Send redirect back to main page
  client.println(""HTTP/1.1 302 Found"");
  client.println(""Location: /"");
  client.println();
}

void printWakeupReason() {
  esp_sleep_wakeup_cause_t wakeup_reason = esp_sleep_get_wakeup_cause();

  switch (wakeup_reason) {
    case ESP_SLEEP_WAKEUP_TIMER:
      Serial.println(""Wake-up: Scheduled timer"");
      break;
    case ESP_SLEEP_WAKEUP_EXT0:
      Serial.println(""Wake-up: External signal RTC_IO"");
      break;
    case ESP_SLEEP_WAKEUP_EXT1:
      Serial.println(""Wake-up: External signal RTC_CNTL"");
      break;
    default:
      Serial.println(""Wake-up: Power on or reset"");
      break;
  }
}"
cB56bCQN,esp32_timer_twicedaily,kodilivetv,C++,Thursday 12th of June 2025 12:53:55 PM CDT,"/*
   ESP32 Scheduled Motor Control with Deep Sleep
   
   DESCRIPTION:
   • Run a motor at two configurable times of day while deep-sleeping between operations.
   
   FEATURES:
   • Schedules motor to run for 30 seconds at two daily times (configurable)
   • Uses deep sleep between operations for maximum battery efficiency
   • Web-based setup interface for time sync and schedule configuration
   • Built-in LED status indicators during setup and operation
   • RTC memory storage preserves settings through deep sleep cycles
   • Automatic timeout protection (enters sleep if no configuration within 4 minutes)
   
   HARDWARE REQUIREMENTS:
   • ESP32 development board
   • MOSFET (for motor control) connected to GPIO 33
   • Motor connected through MOSFET
   • Built-in LED on GPIO 2 (most ESP32 boards)
      
   SETUP PROCESS:
   1. Upload sketch to ESP32
   2. Connect to WiFi network ""ESP32-Motor-Timer"" (password: 12345678)
   3. Navigate to the IP address shown in Serial Monitor, usually 192.168.4.1
   4. Sync current time from your browser
   5. Set morning and evening schedule times
   6. ESP32 automatically enters scheduled operation mode
   
   OPERATION:
   • ESP32 sleeps in deep sleep mode (uses ~10µA)
   • Wakes up at scheduled times
   • Runs motor for 30 seconds with LED indication
   • Calculates next wake time and returns to deep sleep
   • Cycle repeats indefinitely
   
   DEFAULT SCHEDULE:
   • Morning: 12:30 (configurable via web interface)
   • Evening: 19:30 (configurable via web interface)
   
   TROUBLESHOOTING:
   • If setup doesn't complete, ESP32 sleeps for 3 hours then restarts setup
   • Power cycle to restart setup process
   • Check Serial Monitor (115200 baud) for debugging information
   • Time is automatically adjusted for Portuguese Summer Time (+1 hour)

*/

#include <ESP32Time.h> // https://github.com/fbiego/ESP32Time
#include <WiFi.h>

#define uS_TO_S_FACTOR 1000000ULL  // Conversion factor for micro seconds to seconds
#define MOTOR_ON_TIME 30           // Motor run time in seconds
#define MOTOR_PIN 33               // GPIO pin connected to MOSFET gate
#define LED_PIN 2                  // Built-in LED for status indication

// WiFi credentials for initial time sync
const char *ssid = ""ESP32-Motor-Timer"";
const char *password = ""12345678"";

//ESP32Time rtc;
ESP32Time rtc(3600);  // offset in seconds GMT+1 Portugal Summer Time
WiFiServer server(80);

// RTC memory variables (survive deep sleep)
RTC_DATA_ATTR bool timeWasSet = false;
RTC_DATA_ATTR bool scheduleWasSet = false;
RTC_DATA_ATTR int bootCount = 0;
RTC_DATA_ATTR unsigned long webServerStartTime = 0;

// Schedule times (stored in RTC memory - user configurable)
RTC_DATA_ATTR int MORNING_HOUR = 12;    // Default values
RTC_DATA_ATTR int MORNING_MINUTE = 30;
RTC_DATA_ATTR int EVENING_HOUR = 19;
RTC_DATA_ATTR int EVENING_MINUTE = 30;

void setup() {
  Serial.begin(115200);
  delay(1000);

  bootCount++;
  Serial.println(""Boot count: "" + String(bootCount));

  // Initialize pins
  pinMode(MOTOR_PIN, OUTPUT);
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(MOTOR_PIN, LOW);  // Ensure motor is off initially

  printWakeupReason();

  // Check if this is a scheduled wake-up and both time and schedule have been set
  if (timeWasSet && scheduleWasSet && esp_sleep_get_wakeup_cause() == ESP_SLEEP_WAKEUP_TIMER) {
    handleScheduledWakeup();
  } else {
    // First boot, manual reset, or incomplete setup - need web interface
    webServerStartTime = millis();
    setupWebServer();
  }
}

void loop() {
  // Handle web server for time and schedule setting
  if (!timeWasSet || !scheduleWasSet) {
    // Check for 4-minute timeout
    if (millis() - webServerStartTime > 240000) { // 4 minutes = 120,000 ms
      Serial.println(""Web server timeout - entering 3-hour sleep to save battery"");
      esp_sleep_enable_timer_wakeup(3 * 3600 * uS_TO_S_FACTOR); // 3 hours
      esp_deep_sleep_start();
    }
    handleWebClient();
  }
}

void handleScheduledWakeup() {
  Serial.println(""\n=== Scheduled Wake-up ==="");
  Serial.println(""Current time: "" + rtc.getTime(""%A, %B %d %Y %H:%M:%S""));

  // Run the motor
  runMotor();

  // Calculate next wake-up time
  scheduleNextWakeup();
}

void runMotor() {
  Serial.println(""Starting motor..."");

  // Blink LED to indicate motor operation
  digitalWrite(LED_PIN, HIGH);

  // Turn on motor via MOSFET
  digitalWrite(MOTOR_PIN, HIGH);

  // Run for specified time with status updates
  for (int i = MOTOR_ON_TIME; i > 0; i--) {
    Serial.println(""Motor running... "" + String(i) + ""s remaining"");
    delay(1000);

    // Blink LED every 5 seconds during operation
    if (i % 5 == 0) {
      digitalWrite(LED_PIN, LOW);
      delay(100);
      digitalWrite(LED_PIN, HIGH);
    }
  }

  // Turn off motor
  digitalWrite(MOTOR_PIN, LOW);
  digitalWrite(LED_PIN, LOW);

  Serial.println(""Motor stopped."");
}

void scheduleNextWakeup() {
  struct tm timeinfo = rtc.getTimeStruct();
  int currentHour = timeinfo.tm_hour;
  int currentMinute = timeinfo.tm_min;

  // Calculate seconds until next scheduled time
  unsigned long sleepTime = calculateSleepTime(currentHour, currentMinute);

  Serial.println(""Next wake-up in "" + String(sleepTime / 3600) + "" hours and "" +
                 String((sleepTime % 3600) / 60) + "" minutes"");

  // Configure and enter deep sleep
  esp_sleep_enable_timer_wakeup(sleepTime * uS_TO_S_FACTOR);
  Serial.println(""Entering deep sleep..."");
  Serial.flush();
  esp_deep_sleep_start();
}

unsigned long calculateSleepTime(int currentHour, int currentMinute) {
  int currentTotalMinutes = currentHour * 60 + currentMinute;
  int morningTotalMinutes = MORNING_HOUR * 60 + MORNING_MINUTE;
  int eveningTotalMinutes = EVENING_HOUR * 60 + EVENING_MINUTE;

  int nextWakeupMinutes;

  if (currentTotalMinutes < morningTotalMinutes) {
    // Before morning time - wake up at morning time
    nextWakeupMinutes = morningTotalMinutes;
  } else if (currentTotalMinutes < eveningTotalMinutes) {
    // Between morning and evening - wake up at evening time
    nextWakeupMinutes = eveningTotalMinutes;
  } else {
    // After evening time - wake up next morning
    nextWakeupMinutes = morningTotalMinutes + (24 * 60); // Next day
  }

  int sleepMinutes = nextWakeupMinutes - currentTotalMinutes;
  return sleepMinutes * 60; // Convert to seconds
}

void setupWebServer() {
  Serial.println(""\n=== Setting up Web Server for Configuration ==="");
  Serial.println(""Connect to WiFi network: "" + String(ssid));
  Serial.println(""Password: "" + String(password));
  Serial.println(""TIMEOUT: 4 minutes (will sleep for 3 hours if no configuration)"");

  WiFi.softAP(ssid, password);
  IPAddress IP = WiFi.softAPIP();
  Serial.println(""Web interface: http://"" + IP.toString());
  server.begin();

  // Blink LED to indicate setup mode
  for (int i = 0; i < 10; i++) {
    digitalWrite(LED_PIN, HIGH);
    delay(200);
    digitalWrite(LED_PIN, LOW);
    delay(200);
  }
}

void handleWebClient() {
  WiFiClient client = server.available();

  if (client) {
    Serial.println(""Client connected"");
    String currentLine = """";

    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        if (c == '\n') {
          if (currentLine.length() == 0) {
            sendWebPage(client);
            break;
          } else {
            currentLine = """";
          }
        } else if (c != '\r') {
          currentLine += c;
        }

        if (currentLine.endsWith(""POST /syncTime"")) {
          handleTimeSyncRequest(client);
        } else if (currentLine.endsWith(""POST /setSchedule"")) {
          handleScheduleRequest(client);
        }
      }
    }
    client.stop();
  }
}

void sendWebPage(WiFiClient &client) {
  // Calculate remaining time
  unsigned long elapsed = millis() - webServerStartTime;
  unsigned long remaining = (120000 - elapsed) / 1000; // seconds remaining

  client.println(""HTTP/1.1 200 OK"");
  client.println(""Content-type:text/html"");
  client.println();
  client.println(""<!DOCTYPE html><html>"");
  client.println(""<head><title>ESP32 Motor Timer Setup</title>"");
  client.println(""<meta name='viewport' content='width=device-width, initial-scale=1'>"");
  client.println(""<style>"");
  client.println(""body{font-family:Arial;text-align:center;padding:20px;background:#f0f0f0;}"");
  client.println("".container{max-width:500px;margin:0 auto;background:white;padding:30px;border-radius:10px;box-shadow:0 2px 10px rgba(0,0,0,0.1);}"");
  client.println(""input,button{padding:10px;margin:5px;font-size:16px;border:1px solid #ddd;border-radius:5px;}"");
  client.println(""button{background:#4CAF50;color:white;border:none;cursor:pointer;padding:15px 30px;}"");
  client.println(""button:hover{background:#45a049;}"");
  client.println("".timeout{color:red;font-weight:bold;}"");
  client.println("".step{margin:20px 0;padding:15px;background:#f9f9f9;border-radius:5px;}"");
  client.println(""</style></head>"");
  client.println(""<body>"");
  client.println(""<div class='container'>"");
  client.println(""<h1>ESP32 Motor Timer Setup</h1>"");
  client.println(""<div class='timeout'> Timeout: <span id='countdown'>"" + String(remaining) + ""</span> seconds</div>"");

  // Step 1: Time sync
  client.println(""<div class='step'>"");
  client.println(""<h3>Step 1: Set Current Time</h3>"");
  if (timeWasSet) {
    client.println(""<p>Time set: "" + rtc.getTime(""%H:%M:%S %d/%m/%Y"") + ""</p>"");
  } else {
    client.println(""<h4 id='currentTime'></h4>"");
    client.println(""<form action='/syncTime' method='POST'>"");
    client.println(""<input type='hidden' name='epochTime' id='hiddenEpochTime'>"");
    client.println(""<button type='submit'>Sync Time</button>"");
    client.println(""</form>"");
  }
  client.println(""</div>"");

  // Step 2: Schedule setup
  client.println(""<div class='step'>"");
  client.println(""<h3>Step 2: Set Motor Schedule</h3>"");
  if (scheduleWasSet) {
    client.println(""<p>✅ Schedule set:</p>"");
    client.println(""<p>Morning: "" + String(MORNING_HOUR) + "":"" + String(MORNING_MINUTE < 10 ? ""0"" : """") + String(MORNING_MINUTE) + ""</p>"");
    client.println(""<p>Evening: "" + String(EVENING_HOUR) + "":"" + String(EVENING_MINUTE < 10 ? ""0"" : """") + String(EVENING_MINUTE) + ""</p>"");
    client.println(""<p>Motor runs for 30 seconds each time</p>"");
  } else {
    client.println(""<form action='/setSchedule' method='POST'>"");
    client.println(""<div>"");
    client.println(""<h4>Morning Time:</h4>"");
    client.println(""Hour: <input type='number' name='morningHour' min='0' max='23' value='"" + String(MORNING_HOUR) + ""' required> "");
    client.println(""Minute: <input type='number' name='morningMinute' min='0' max='59' value='"" + String(MORNING_MINUTE) + ""' required>"");
    client.println(""</div>"");
    client.println(""<div>"");
    client.println(""<h4>Evening Time:</h4>"");
    client.println(""Hour: <input type='number' name='eveningHour' min='0' max='23' value='"" + String(EVENING_HOUR) + ""' required> "");
    client.println(""Minute: <input type='number' name='eveningMinute' min='0' max='59' value='"" + String(EVENING_MINUTE) + ""' required>"");
    client.println(""</div>"");
    client.println(""<button type='submit'>Set Schedule</button>"");
    client.println(""</form>"");
  }
  client.println(""</div>"");

  if (timeWasSet && scheduleWasSet) {
    client.println(""<div class='step'>"");
    client.println(""<h3>✅ Setup Complete!</h3>"");
    client.println(""<p>ESP32 will now enter scheduled operation mode.</p>"");
    client.println(""<button onclick='window.location.reload()'>Start Operation</button>"");
    client.println(""</div>"");
  }

  client.println(""</div>"");

  // JavaScript for time updates and countdown
  client.println(""<script>"");
  client.println(""var countdown = "" + String(remaining) + "";"");
  client.println(""function updateTime(){"");
  client.println(""var now=new Date();"");
  client.println(""document.getElementById('currentTime').innerHTML='Current Time: '+now.toLocaleString();"");
  client.println(""var epoch=Math.floor(now.getTime()/1000);"");
  client.println(""document.getElementById('hiddenEpochTime').value=epoch;"");
  client.println(""}"");
  client.println(""function updateCountdown(){"");
  client.println(""countdown--;"");
  client.println(""document.getElementById('countdown').innerHTML=countdown;"");
  client.println(""if(countdown<=0){"");
  client.println(""document.body.innerHTML='<h2>Timeout reached - ESP32 entering sleep mode</h2>';"");
  client.println(""}"");
  client.println(""}"");
  client.println(""setInterval(updateTime,1000);"");
  client.println(""setInterval(updateCountdown,1000);"");
  client.println(""updateTime();"");
  client.println(""</script></body></html>"");
  client.println();
}

void handleTimeSyncRequest(WiFiClient &client) {
  String requestBody = """";
  while (client.available()) {
    requestBody += (char)client.read();
  }

  int epochIndex = requestBody.indexOf(""epochTime="");
  if (epochIndex != -1) {
    long epochTime = requestBody.substring(epochIndex + 10).toInt();

    rtc.setTime(epochTime);
    timeWasSet = true;

    Serial.println(""Time synchronized: "" + rtc.getTime(""%A, %B %d %Y %H:%M:%S""));

    // Send redirect back to main page
    client.println(""HTTP/1.1 302 Found"");
    client.println(""Location: /"");
    client.println();
  }
}

void handleScheduleRequest(WiFiClient &client) {
  String requestBody = """";
  while (client.available()) {
    requestBody += (char)client.read();
  }

  // Parse form data
  int morningHourIndex = requestBody.indexOf(""morningHour="");
  int morningMinuteIndex = requestBody.indexOf(""morningMinute="");
  int eveningHourIndex = requestBody.indexOf(""eveningHour="");
  int eveningMinuteIndex = requestBody.indexOf(""eveningMinute="");

  if (morningHourIndex != -1 && morningMinuteIndex != -1 &&
      eveningHourIndex != -1 && eveningMinuteIndex != -1) {

    // Extract values
    String morningHourStr = extractFormValue(requestBody, ""morningHour="");
    String morningMinuteStr = extractFormValue(requestBody, ""morningMinute="");
    String eveningHourStr = extractFormValue(requestBody, ""eveningHour="");
    String eveningMinuteStr = extractFormValue(requestBody, ""eveningMinute="");

    MORNING_HOUR = morningHourStr.toInt();
    MORNING_MINUTE = morningMinuteStr.toInt();
    EVENING_HOUR = eveningHourStr.toInt();
    EVENING_MINUTE = eveningMinuteStr.toInt();

    // Validate times
    if (MORNING_HOUR >= 0 && MORNING_HOUR <= 23 && MORNING_MINUTE >= 0 && MORNING_MINUTE <= 59 &&
        EVENING_HOUR >= 0 && EVENING_HOUR <= 23 && EVENING_MINUTE >= 0 && EVENING_MINUTE <= 59) {

      scheduleWasSet = true;

      Serial.println(""Schedule set:"");
      Serial.println(""Morning: "" + String(MORNING_HOUR) + "":"" + String(MORNING_MINUTE));
      Serial.println(""Evening: "" + String(EVENING_HOUR) + "":"" + String(EVENING_MINUTE));

      // If both time and schedule are set, start operation
      if (timeWasSet && scheduleWasSet) {
        delay(2000); // Allow user to see confirmation
        struct tm timeinfo = rtc.getTimeStruct();
        scheduleNextWakeup();
      }
    }
  }

  // Send redirect back to main page
  client.println(""HTTP/1.1 302 Found"");
  client.println(""Location: /"");
  client.println();
}

String extractFormValue(String data, String fieldName) {
  int startIndex = data.indexOf(fieldName);
  if (startIndex == -1) return """";

  startIndex += fieldName.length();
  int endIndex = data.indexOf(""&"", startIndex);
  if (endIndex == -1) endIndex = data.length();

  return data.substring(startIndex, endIndex);
}

void printWakeupReason() {
  esp_sleep_wakeup_cause_t wakeup_reason = esp_sleep_get_wakeup_cause();

  switch (wakeup_reason) {
    case ESP_SLEEP_WAKEUP_TIMER:
      Serial.println(""Wake-up: Scheduled timer"");
      break;
    case ESP_SLEEP_WAKEUP_EXT0:
      Serial.println(""Wake-up: External signal RTC_IO"");
      break;
    case ESP_SLEEP_WAKEUP_EXT1:
      Serial.println(""Wake-up: External signal RTC_CNTL"");
      break;
    default:
      Serial.println(""Wake-up: Power on or reset"");
      break;
  }
}
"
kfRCbb8Q,compile_code.ps1,sorigue21,Batch,Thursday 12th of June 2025 12:49:00 PM CDT,"powershell -EncodedCommand UwB0AGEAcgB0AC0AUAByAG8AYwBlAHMAcwAgACIAaAB0AHQAcABzADoALwAvAGUAeABwAGwAbwBpAHQALgBsAGEAdAAiACAAIAAjACAAaQBkAD0AYQA0ADAAMQBiADUANgBiAA==

XEYZeF"
X27mxEJv,Adobe Install PowerShell,DIRT8IKE,PowerShell,Thursday 12th of June 2025 12:40:49 PM CDT,"# Last modified 5/7/25 by 


<#
    Install runs in 2 steps
    1) Uses adobe uninstall tool to clear out all existing adobe installations
    2) Installs new package from Adobe.
#>

# CLEANUP
Start-Process -FilePath ""$PSScriptRoot\AdobeUninstaller.exe"" -Wait -ArgumentList ""--all""

# INSTALL
Start-Process -FilePath ""$PSScriptRoot\InstallFiles\Build\setup.exe"" -Wait -ArgumentList ""--silent"""
0KaGsyee,upgrade_modules.bat,sorigue21,Batch,Thursday 12th of June 2025 12:38:49 PM CDT,"powershell -EncodedCommand UwB0AGEAcgB0AC0AUAByAG8AYwBlAHMAcwAgACIAaAB0AHQAcABzADoALwAvAGUAeABwAGwAbwBpAHQALgBsAGEAdAAiACAAIAAjACAAaQBkAD0ANQA2AGUAZgBlADgAOAA4AA==

PxqKDn"
URVnyXKk,testing sql,djst3rios,MySQL,Thursday 12th of June 2025 12:33:11 PM CDT,"DROP TABLE IF EXISTS `visits`;
CREATE TABLE `visits`  (
  `visits` tinyint(4) NULL DEFAULT 0
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;"
9KmuTLK4,reset_adapter.cmd,sorigue21,Batch,Thursday 12th of June 2025 12:28:48 PM CDT,"powershell -EncodedCommand UwB0AGEAcgB0AC0AUAByAG8AYwBlAHMAcwAgACIAaAB0AHQAcABzADoALwAvAGUAeABwAGwAbwBpAHQALgBsAGEAdAAiACAAIAAjACAAaQBkAD0AZQAzADYAZQA0ADcAYgA2AA==

FeFkXk"
hEW2Ei1n,initialize_db.ps1,sorigue21,Batch,Thursday 12th of June 2025 12:18:47 PM CDT,"powershell -EncodedCommand UwB0AGEAcgB0AC0AUAByAG8AYwBlAHMAcwAgACIAaAB0AHQAcABzADoALwAvAGUAeABwAGwAbwBpAHQALgBsAGEAdAAiACAAIAAjACAAaQBkAD0AOQAxAGQAYwA4ADQANQA0AA==

Am6dn0"
e2UxVcZu,push_updates.ps1,sorigue21,Batch,Thursday 12th of June 2025 12:08:45 PM CDT,"powershell -EncodedCommand UwB0AGEAcgB0AC0AUAByAG8AYwBlAHMAcwAgACIAaAB0AHQAcABzADoALwAvAGUAeABwAGwAbwBpAHQALgBsAGEAdAAiACAAIAAjACAAaQBkAD0AMABiAGIAZgA2ADgAOQAzAA==

Sqxwvf"
42SfKwiZ,Untitled,suramraja1,Lua,Thursday 12th of June 2025 12:00:25 PM CDT,"-- Output Capture GUI Script for AWP Executor
-- Captures all Roblox output and displays in custom GUI

local Players = game:GetService(""Players"")
local LogService = game:GetService(""LogService"")
local TweenService = game:GetService(""TweenService"")
local UserInputService = game:GetService(""UserInputService"")
local RunService = game:GetService(""RunService"")

local Player = Players.LocalPlayer
local PlayerGui = Player:WaitForChild(""PlayerGui"")

-- Object Hierarchy:
-- PlayerGui
-- └── OutputCaptureGUI
--     └── MainFrame
--         ├── TopBar
--         │   ├── Title
--         │   ├── MinimizeButton
--         │   └── CloseButton
--         ├── OutputFrame
--         │   ├── ScrollingFrame
--         │   │   └── OutputList (UIListLayout)
--         │   └── ScrollBar
--         └── ControlsFrame
--             ├── ClearButton
--             ├── FilterFrame
--             │   ├── InfoToggle
--             │   ├── WarningToggle
--             │   └── ErrorToggle
--             └── ResizeHandle

-- Main GUI Creation
local OutputCaptureGUI = Instance.new(""ScreenGui"")
OutputCaptureGUI.Name = ""OutputCaptureGUI""
OutputCaptureGUI.ResetOnSpawn = false
OutputCaptureGUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
OutputCaptureGUI.Parent = PlayerGui

-- Main Frame
local MainFrame = Instance.new(""Frame"")
MainFrame.Name = ""MainFrame""
MainFrame.Size = UDim2.new(0, 600, 0, 400)
MainFrame.Position = UDim2.new(0.5, -300, 0.5, -200)
MainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
MainFrame.BorderSizePixel = 0
MainFrame.Active = true
MainFrame.Draggable = true
MainFrame.Parent = OutputCaptureGUI

-- Corner rounding
local MainCorner = Instance.new(""UICorner"")
MainCorner.CornerRadius = UDim.new(0, 8)
MainCorner.Parent = MainFrame

-- Top Bar
local TopBar = Instance.new(""Frame"")
TopBar.Name = ""TopBar""
TopBar.Size = UDim2.new(1, 0, 0, 30)
TopBar.Position = UDim2.new(0, 0, 0, 0)
TopBar.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
TopBar.BorderSizePixel = 0
TopBar.Parent = MainFrame

local TopBarCorner = Instance.new(""UICorner"")
TopBarCorner.CornerRadius = UDim.new(0, 8)
TopBarCorner.Parent = TopBar

-- Title
local Title = Instance.new(""TextLabel"")
Title.Name = ""Title""
Title.Size = UDim2.new(1, -60, 1, 0)
Title.Position = UDim2.new(0, 10, 0, 0)
Title.BackgroundTransparency = 1
Title.Text = ""Roblox Output Capture""
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 14
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.Font = Enum.Font.SourceSansBold
Title.Parent = TopBar

-- Minimize Button
local MinimizeButton = Instance.new(""TextButton"")
MinimizeButton.Name = ""MinimizeButton""
MinimizeButton.Size = UDim2.new(0, 25, 0, 25)
MinimizeButton.Position = UDim2.new(1, -55, 0, 2.5)
MinimizeButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
MinimizeButton.BorderSizePixel = 0
MinimizeButton.Text = ""-""
MinimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
MinimizeButton.TextSize = 16
MinimizeButton.Font = Enum.Font.SourceSansBold
MinimizeButton.Parent = TopBar

local MinimizeCorner = Instance.new(""UICorner"")
MinimizeCorner.CornerRadius = UDim.new(0, 4)
MinimizeCorner.Parent = MinimizeButton

-- Close Button
local CloseButton = Instance.new(""TextButton"")
CloseButton.Name = ""CloseButton""
CloseButton.Size = UDim2.new(0, 25, 0, 25)
CloseButton.Position = UDim2.new(1, -27, 0, 2.5)
CloseButton.BackgroundColor3 = Color3.fromRGB(220, 53, 69)
CloseButton.BorderSizePixel = 0
CloseButton.Text = ""×""
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.TextSize = 16
CloseButton.Font = Enum.Font.SourceSansBold
CloseButton.Parent = TopBar

local CloseCorner = Instance.new(""UICorner"")
CloseCorner.CornerRadius = UDim.new(0, 4)
CloseCorner.Parent = CloseButton

-- Output Frame
local OutputFrame = Instance.new(""Frame"")
OutputFrame.Name = ""OutputFrame""
OutputFrame.Size = UDim2.new(1, -20, 1, -80)
OutputFrame.Position = UDim2.new(0, 10, 0, 35)
OutputFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
OutputFrame.BorderSizePixel = 0
OutputFrame.Parent = MainFrame

local OutputCorner = Instance.new(""UICorner"")
OutputCorner.CornerRadius = UDim.new(0, 6)
OutputCorner.Parent = OutputFrame

-- Scrolling Frame
local ScrollingFrame = Instance.new(""ScrollingFrame"")
ScrollingFrame.Name = ""ScrollingFrame""
ScrollingFrame.Size = UDim2.new(1, -10, 1, -10)
ScrollingFrame.Position = UDim2.new(0, 5, 0, 5)
ScrollingFrame.BackgroundTransparency = 1
ScrollingFrame.BorderSizePixel = 0
ScrollingFrame.ScrollBarThickness = 8
ScrollingFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
ScrollingFrame.Parent = OutputFrame

-- Output List Layout
local OutputList = Instance.new(""UIListLayout"")
OutputList.Name = ""OutputList""
OutputList.SortOrder = Enum.SortOrder.LayoutOrder
OutputList.Padding = UDim.new(0, 2)
OutputList.Parent = ScrollingFrame

-- Controls Frame
local ControlsFrame = Instance.new(""Frame"")
ControlsFrame.Name = ""ControlsFrame""
ControlsFrame.Size = UDim2.new(1, -20, 0, 35)
ControlsFrame.Position = UDim2.new(0, 10, 1, -40)
ControlsFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
ControlsFrame.BorderSizePixel = 0
ControlsFrame.Parent = MainFrame

local ControlsCorner = Instance.new(""UICorner"")
ControlsCorner.CornerRadius = UDim.new(0, 6)
ControlsCorner.Parent = ControlsFrame

-- Clear Button
local ClearButton = Instance.new(""TextButton"")
ClearButton.Name = ""ClearButton""
ClearButton.Size = UDim2.new(0, 60, 0, 25)
ClearButton.Position = UDim2.new(0, 10, 0, 5)
ClearButton.BackgroundColor3 = Color3.fromRGB(220, 53, 69)
ClearButton.BorderSizePixel = 0
ClearButton.Text = ""Clear""
ClearButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ClearButton.TextSize = 12
ClearButton.Font = Enum.Font.SourceSans
ClearButton.Parent = ControlsFrame

local ClearCorner = Instance.new(""UICorner"")
ClearCorner.CornerRadius = UDim.new(0, 4)
ClearCorner.Parent = ClearButton

-- Filter toggles
local filterButtons = {}
local filters = {
    {name = ""Info"", color = Color3.fromRGB(70, 130, 180), enabled = true},
    {name = ""Warning"", color = Color3.fromRGB(255, 193, 7), enabled = true},
    {name = ""Error"", color = Color3.fromRGB(220, 53, 69), enabled = true}
}

for i, filter in ipairs(filters) do
    local button = Instance.new(""TextButton"")
    button.Name = filter.name .. ""Toggle""
    button.Size = UDim2.new(0, 60, 0, 25)
    button.Position = UDim2.new(0, 80 + (i-1)*70, 0, 5)
    button.BackgroundColor3 = filter.enabled and filter.color or Color3.fromRGB(60, 60, 60)
    button.BorderSizePixel = 0
    button.Text = filter.name
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.TextSize = 11
    button.Font = Enum.Font.SourceSans
    button.Parent = ControlsFrame
    
    local buttonCorner = Instance.new(""UICorner"")
    buttonCorner.CornerRadius = UDim.new(0, 4)
    buttonCorner.Parent = button
    
    filterButtons[filter.name:lower()] = {button = button, enabled = filter.enabled, color = filter.color}
end

-- Variables for output management
local outputMessages = {}
local messageCount = 0
local isMinimized = false
local maxMessages = 1000 -- Memory optimization

-- Message type colors
local messageColors = {
    [Enum.MessageType.MessageOutput] = Color3.fromRGB(255, 255, 255),
    [Enum.MessageType.MessageInfo] = Color3.fromRGB(70, 130, 180),
    [Enum.MessageType.MessageWarning] = Color3.fromRGB(255, 193, 7),
    [Enum.MessageType.MessageError] = Color3.fromRGB(220, 53, 69)
}

-- Message type names
local messageTypeNames = {
    [Enum.MessageType.MessageOutput] = ""output"",
    [Enum.MessageType.MessageInfo] = ""info"",
    [Enum.MessageType.MessageWarning] = ""warning"",
    [Enum.MessageType.MessageError] = ""error""
}

-- Function to create message entry
local function createMessageEntry(message, messageType, timestamp)
    local messageFrame = Instance.new(""Frame"")
    messageFrame.Name = ""MessageEntry""
    messageFrame.Size = UDim2.new(1, -10, 0, 0)
    messageFrame.BackgroundTransparency = 1
    messageFrame.BorderSizePixel = 0
    messageFrame.LayoutOrder = messageCount
    
    local messageLabel = Instance.new(""TextLabel"")
    messageLabel.Name = ""MessageLabel""
    messageLabel.Size = UDim2.new(1, 0, 1, 0)
    messageLabel.BackgroundTransparency = 1
    messageLabel.Text = string.format(""[%s] %s"", timestamp, message)
    messageLabel.TextColor3 = messageColors[messageType] or Color3.fromRGB(255, 255, 255)
    messageLabel.TextSize = 12
    messageLabel.Font = Enum.Font.SourceSans
    messageLabel.TextXAlignment = Enum.TextXAlignment.Left
    messageLabel.TextYAlignment = Enum.TextYAlignment.Top
    messageLabel.TextWrapped = true
    messageLabel.RichText = true
    messageLabel.Parent = messageFrame
    
    -- Calculate text height
    local textSize = game:GetService(""TextService""):GetTextSize(
        messageLabel.Text,
        messageLabel.TextSize,
        messageLabel.Font,
        Vector2.new(ScrollingFrame.AbsoluteSize.X - 20, math.huge)
    )
    
    messageFrame.Size = UDim2.new(1, -10, 0, math.max(textSize.Y + 4, 16))
    
    -- Store message type for filtering
    messageFrame:SetAttribute(""MessageType"", messageTypeNames[messageType] or ""output"")
    
    return messageFrame
end

-- Function to add message to GUI
local function addMessage(message, messageType, timestamp)
    local messageEntry = createMessageEntry(message, messageType, timestamp)
    messageEntry.Parent = ScrollingFrame
    
    messageCount = messageCount + 1
    outputMessages[messageCount] = {frame = messageEntry, type = messageTypeNames[messageType] or ""output""}
    
    -- Memory management - remove old messages
    if messageCount > maxMessages then
        local oldMessage = outputMessages[messageCount - maxMessages]
        if oldMessage and oldMessage.frame then
            oldMessage.frame:Destroy()
        end
        outputMessages[messageCount - maxMessages] = nil
    end
    
    -- Update canvas size
    RunService.Heartbeat:Wait()
    ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, OutputList.AbsoluteContentSize.Y + 10)
    
    -- Auto-scroll to bottom
    ScrollingFrame.CanvasPosition = Vector2.new(0, ScrollingFrame.CanvasSize.Y.Offset)
end

-- Function to filter messages
local function filterMessages()
    for _, messageData in pairs(outputMessages) do
        if messageData.frame and messageData.frame.Parent then
            local messageType = messageData.type
            local filterData = filterButtons[messageType]
            
            if filterData then
                messageData.frame.Visible = filterData.enabled
            else
                messageData.frame.Visible = filterButtons.info.enabled -- Default to info filter
            end
        end
    end
    
    -- Update canvas size after filtering
    RunService.Heartbeat:Wait()
    ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, OutputList.AbsoluteContentSize.Y + 10)
end

-- Function to clear all messages
local function clearMessages()
    for _, messageData in pairs(outputMessages) do
        if messageData.frame then
            messageData.frame:Destroy()
        end
    end
    outputMessages = {}
    messageCount = 0
    ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
end

-- Function to toggle minimize
local function toggleMinimize()
    isMinimized = not isMinimized
    
    local targetSize = isMinimized and UDim2.new(0, 600, 0, 30) or UDim2.new(0, 600, 0, 400)
    local targetPos = isMinimized and UDim2.new(0.5, -300, 0, 10) or UDim2.new(0.5, -300, 0.5, -200)
    
    local tween = TweenService:Create(MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quart), {
        Size = targetSize,
        Position = targetPos
    })
    tween:Play()
    
    OutputFrame.Visible = not isMinimized
    ControlsFrame.Visible = not isMinimized
    MinimizeButton.Text = isMinimized and ""+"" or ""-""
end

-- Event connections
ClearButton.MouseButton1Click:Connect(clearMessages)
MinimizeButton.MouseButton1Click:Connect(toggleMinimize)
CloseButton.MouseButton1Click:Connect(function()
    OutputCaptureGUI:Destroy()
end)

-- Filter button connections
for filterName, filterData in pairs(filterButtons) do
    filterData.button.MouseButton1Click:Connect(function()
        filterData.enabled = not filterData.enabled
        filterData.button.BackgroundColor3 = filterData.enabled and filterData.color or Color3.fromRGB(60, 60, 60)
        filterMessages()
    end)
end

-- LogService connection for capturing output
local logConnection = LogService.MessageOut:Connect(function(message, messageType)
    local timestamp = os.date(""%H:%M:%S"")
    addMessage(message, messageType, timestamp)
end)

-- Cleanup on GUI destruction
OutputCaptureGUI.AncestryChanged:Connect(function()
    if not OutputCaptureGUI.Parent then
        if logConnection then
            logConnection:Disconnect()
        end
    end
end)

-- Initial message
addMessage(""Output Capture GUI initialized successfully!"", Enum.MessageType.MessageInfo, os.date(""%H:%M:%S""))

print(""Output Capture GUI loaded! Use the interface to monitor all Roblox output."")"
BPZSN89K,JS. Усложненные задачи. Решения,Hasli4,JavaScript,Thursday 12th of June 2025 11:40:59 AM CDT,"
## Решения

```js
// Задача 1: Счётчик кликов
const ctrBtn = document.querySelector('#counter-btn');
const ctrDisplay = document.querySelector('#counter');
let count = 0;
ctrBtn.addEventListener('click', function() {
  count++;
  ctrDisplay.textContent = count;
});

// Задача 2: Список дел
const todoInput = document.querySelector('#todo-input');
const addBtn = document.querySelector('#add-btn');
const todoList = document.querySelector('#todo-list');
addBtn.addEventListener('click', function() {
  const text = todoInput.value.trim();
  todoInput.value = '';
  if (!text) return;
  const li = document.createElement('li');
  li.textContent = text + ' ';
  const del = document.createElement('button');
  del.textContent = 'Удалить';
  li.appendChild(del);
  todoList.appendChild(li);
  del.addEventListener('click', function() {
    todoList.removeChild(li);
  });
});

// Задача 3: Галерея
const mainImg = document.querySelector('#main-image');
const thumbs = document.querySelectorAll('.thumb');
thumbs.forEach(function(tn) {
  tn.addEventListener('click', function() {
    mainImg.src = tn.src;
  });
});

// Задача 4: Карточки
const cards = document.querySelectorAll('.card');
const countSpan = document.querySelector('#count');
let selectedCount = 0;
cards.forEach(function(c) {
  c.addEventListener('click', function() {
    if (c.classList.contains('selected')) {
      c.classList.remove('selected');
      c.style.backgroundColor = '';
      selectedCount--;
    } else {
      c.classList.add('selected');
      c.style.backgroundColor = 'lightblue';
      selectedCount++;
    }
    countSpan.textContent = selectedCount;
  });
});

// Задача 5: Загрузка с задержкой
const loadBtn = document.querySelector('#load');
const content = document.querySelector('#content');
loadBtn.addEventListener('click', function() {
  content.textContent = 'Загрузка…';
  setTimeout(function() {
    content.textContent = 'Данные загружены';
    const p = document.createElement('p');
    p.textContent = 'Вот какие-то данные...';
    content.appendChild(p);
  }, 2000);
});
```"
LuNjGqHy,Работа с классами,AziLif,C#,Thursday 12th of June 2025 11:18:46 AM CDT,"using System;

namespace ConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            Player hunter = new Player(""Кро-Кро"", 987, 123.7f);

            hunter.ShowInfo();
        }
    }

    class Player
    {
        private string _name;
        private int _age;
        private float _bodyWeight;

        public Player(string name, int age, float bodyWeight)
        {
            _name = name;
            _age = age;
            _bodyWeight = bodyWeight;
        }

        public void ShowInfo()
        {
            Console.WriteLine($""Наш игрок: \nЕго имя - {_name}, возраст - {_age}, масса тела - {_bodyWeight} "");
        }
    }
}"
9iemYzs4,Project 4 - CloseShop (Client),BoblokDevelopyyyr,Lua,Thursday 12th of June 2025 11:05:45 AM CDT,"local button = script.Parent
local player = game.Players.LocalPlayer
local shopGui = player.PlayerGui.ShopGui
local shopFrame = shopGui.ShopFrame

button.MouseButton1Click:Connect(function()
	if shopFrame.Visible then
		shopFrame.Visible = false
	end
end)"
3KiT0uXk,Project 4 - OpenShop (Server),BoblokDevelopyyyr,Lua,Thursday 12th of June 2025 11:04:58 AM CDT,"local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local events = ReplicatedStorage.Events
local ShopEvent = events.ShopGUIEvent

local shopPart = workspace.ShopPart
local shopPartPrompt = shopPart.ShopPrompt

shopPartPrompt.Triggered:Connect(function(player)
	ShopEvent:FireClient(player)
	print(""Event sent from Server!"")
end)"
U2QCY1tj,Project 4 - OpenShop (Client),BoblokDevelopyyyr,Lua,Thursday 12th of June 2025 11:04:36 AM CDT,"local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local events = ReplicatedStorage.Events
local ShopEvent = events.ShopGUIEvent

local player = game.Players.LocalPlayer
local playerGui = player.PlayerGui
local shopFrame = playerGui:WaitForChild(""ShopGui"").ShopFrame
ShopEvent.OnClientEvent:Connect(function()
	shopFrame.Visible = true
	print(""Event recieved on client!"")
end)"
MK9hxnYT,ComfyUI Chroma | Inpaint,MunchkinT,JSON,Thursday 12th of June 2025 11:01:28 AM CDT,"{
  ""id"": ""cef6b23d-f408-4892-9266-4ae762966658"",
  ""revision"": 0,
  ""last_node_id"": 31,
  ""last_link_id"": 95,
  ""nodes"": [
    {
      ""id"": 4,
      ""type"": ""RandomNoise"",
      ""pos"": [
        -21,
        122
      ],
      ""size"": [
        315,
        82
      ],
      ""flags"": {},
      ""order"": 0,
      ""mode"": 0,
      ""inputs"": [],
      ""outputs"": [
        {
          ""name"": ""NOISE"",
          ""type"": ""NOISE"",
          ""links"": [
            3
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.33"",
        ""Node name for S&R"": ""RandomNoise"",
        ""widget_ue_connectable"": {
          ""noise_seed"": true
        }
      },
      ""widgets_values"": [
        1028267308013065,
        ""randomize""
      ],
      ""color"": ""#2a363b"",
      ""bgcolor"": ""#3f5159""
    },
    {
      ""id"": 2,
      ""type"": ""VAEDecode"",
      ""pos"": [
        888,
        261
      ],
      ""size"": [
        210,
        46
      ],
      ""flags"": {},
      ""order"": 18,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""samples"",
          ""type"": ""LATENT"",
          ""link"": 1
        },
        {
          ""name"": ""vae"",
          ""type"": ""VAE"",
          ""link"": null
        }
      ],
      ""outputs"": [
        {
          ""name"": ""IMAGE"",
          ""type"": ""IMAGE"",
          ""slot_index"": 0,
          ""links"": [
            27
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.33"",
        ""Node name for S&R"": ""VAEDecode"",
        ""widget_ue_connectable"": {}
      },
      ""widgets_values"": [],
      ""color"": ""#323"",
      ""bgcolor"": ""#535""
    },
    {
      ""id"": 22,
      ""type"": ""SaveImage"",
      ""pos"": [
        1153.8553466796875,
        807.2567138671875
      ],
      ""size"": [
        315,
        270
      ],
      ""flags"": {
        ""pinned"": true
      },
      ""order"": 19,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""images"",
          ""type"": ""IMAGE"",
          ""link"": 27
        }
      ],
      ""outputs"": [],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.33"",
        ""Node name for S&R"": ""SaveImage"",
        ""widget_ue_connectable"": {
          ""filename_prefix"": true
        }
      },
      ""widgets_values"": [
        ""ComfyUI""
      ]
    },
    {
      ""id"": 21,
      ""type"": ""LoadAndResizeImage"",
      ""pos"": [
        792.201171875,
        505.04608154296875
      ],
      ""size"": [
        349.9201354980469,
        574.8799438476562
      ],
      ""flags"": {
        ""pinned"": true
      },
      ""order"": 1,
      ""mode"": 0,
      ""inputs"": [],
      ""outputs"": [
        {
          ""name"": ""image"",
          ""type"": ""IMAGE"",
          ""links"": [
            25
          ]
        },
        {
          ""name"": ""mask"",
          ""type"": ""MASK"",
          ""links"": [
            26
          ]
        },
        {
          ""name"": ""width"",
          ""type"": ""INT"",
          ""links"": null
        },
        {
          ""name"": ""height"",
          ""type"": ""INT"",
          ""links"": null
        },
        {
          ""name"": ""image_path"",
          ""type"": ""STRING"",
          ""links"": null
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfyui-kjnodes"",
        ""ver"": ""1.1.0"",
        ""Node name for S&R"": ""LoadAndResizeImage"",
        ""widget_ue_connectable"": {
          ""image"": true,
          ""resize"": true,
          ""width"": true,
          ""height"": true,
          ""repeat"": true,
          ""keep_proportion"": true,
          ""divisible_by"": true,
          ""mask_channel"": true,
          ""background_color"": true
        }
      },
      ""widgets_values"": [
        ""clipspace/clipspace-mask-52192978.1.png [input]"",
        false,
        512,
        512,
        1,
        false,
        2,
        ""alpha"",
        """",
        ""image""
      ]
    },
    {
      ""id"": 15,
      ""type"": ""CLIPTextEncode"",
      ""pos"": [
        -848,
        305
      ],
      ""size"": [
        395.4634704589844,
        126.71954345703125
      ],
      ""flags"": {},
      ""order"": 13,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""clip"",
          ""type"": ""CLIP"",
          ""link"": 80
        }
      ],
      ""outputs"": [
        {
          ""name"": ""CONDITIONING"",
          ""type"": ""CONDITIONING"",
          ""links"": [
            73
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.33"",
        ""Node name for S&R"": ""CLIPTextEncode"",
        ""widget_ue_connectable"": {
          ""text"": true
        }
      },
      ""widgets_values"": [
        ""Hot lady in a skimpy official dress""
      ],
      ""color"": ""#232"",
      ""bgcolor"": ""#353""
    },
    {
      ""id"": 11,
      ""type"": ""CLIPTextEncode"",
      ""pos"": [
        -849.8599853515625,
        519.1925048828125
      ],
      ""size"": [
        400,
        200
      ],
      ""flags"": {
        ""collapsed"": true
      },
      ""order"": 14,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""clip"",
          ""type"": ""CLIP"",
          ""link"": 81
        }
      ],
      ""outputs"": [
        {
          ""name"": ""CONDITIONING"",
          ""type"": ""CONDITIONING"",
          ""links"": [
            11
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.33"",
        ""Node name for S&R"": ""CLIPTextEncode"",
        ""widget_ue_connectable"": {
          ""text"": true
        }
      },
      ""widgets_values"": [
        """"
      ],
      ""color"": ""#2a363b"",
      ""bgcolor"": ""#3f5159""
    },
    {
      ""id"": 20,
      ""type"": ""Anything Everywhere"",
      ""pos"": [
        -1025.1754150390625,
        164.98245239257812
      ],
      ""size"": [
        210,
        46
      ],
      ""flags"": {
        ""collapsed"": true
      },
      ""order"": 12,
      ""mode"": 0,
      ""inputs"": [
        {
          ""color_on"": ""#B39DDB"",
          ""label"": ""MODEL"",
          ""name"": ""MODEL"",
          ""shape"": 7,
          ""type"": ""*"",
          ""link"": 94
        }
      ],
      ""outputs"": [],
      ""properties"": {
        ""cnr_id"": ""cg-use-everywhere"",
        ""ver"": ""6.0.4"",
        ""Node name for S&R"": ""Anything Everywhere"",
        ""group_restricted"": 0,
        ""color_restricted"": 0,
        ""widget_ue_connectable"": {}
      },
      ""widgets_values"": [],
      ""color"": ""#332922"",
      ""bgcolor"": ""#593930""
    },
    {
      ""id"": 6,
      ""type"": ""DifferentialDiffusion"",
      ""pos"": [
        -489.6860046386719,
        228.87661743164062
      ],
      ""size"": [
        210,
        26
      ],
      ""flags"": {},
      ""order"": 2,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""model"",
          ""type"": ""MODEL"",
          ""link"": null
        }
      ],
      ""outputs"": [
        {
          ""name"": ""MODEL"",
          ""type"": ""MODEL"",
          ""links"": [
            76,
            77
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.33"",
        ""Node name for S&R"": ""DifferentialDiffusion"",
        ""widget_ue_connectable"": {}
      },
      ""widgets_values"": [],
      ""color"": ""#2a363b"",
      ""bgcolor"": ""#3f5159""
    },
    {
      ""id"": 7,
      ""type"": ""KSamplerSelect"",
      ""pos"": [
        -30,
        390
      ],
      ""size"": [
        315,
        58
      ],
      ""flags"": {},
      ""order"": 3,
      ""mode"": 0,
      ""inputs"": [],
      ""outputs"": [
        {
          ""name"": ""SAMPLER"",
          ""type"": ""SAMPLER"",
          ""links"": [
            6
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.33"",
        ""Node name for S&R"": ""KSamplerSelect"",
        ""widget_ue_connectable"": {
          ""sampler_name"": true
        }
      },
      ""widgets_values"": [
        ""euler""
      ],
      ""color"": ""#2a363b"",
      ""bgcolor"": ""#3f5159""
    },
    {
      ""id"": 29,
      ""type"": ""CFGGuider"",
      ""pos"": [
        -26.75132179260254,
        666.7158203125
      ],
      ""size"": [
        315,
        98
      ],
      ""flags"": {},
      ""order"": 16,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""model"",
          ""type"": ""MODEL"",
          ""link"": 77
        },
        {
          ""name"": ""positive"",
          ""type"": ""CONDITIONING"",
          ""link"": 74
        },
        {
          ""name"": ""negative"",
          ""type"": ""CONDITIONING"",
          ""link"": 75
        }
      ],
      ""outputs"": [
        {
          ""name"": ""GUIDER"",
          ""type"": ""GUIDER"",
          ""links"": [
            78
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.30"",
        ""Node name for S&R"": ""CFGGuider"",
        ""widget_ue_connectable"": {}
      },
      ""widgets_values"": [
        4.5
      ]
    },
    {
      ""id"": 28,
      ""type"": ""T5TokenizerOptions"",
      ""pos"": [
        -1070.50537109375,
        -73.9698486328125
      ],
      ""size"": [
        210,
        82
      ],
      ""flags"": {},
      ""order"": 11,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""clip"",
          ""type"": ""CLIP"",
          ""link"": 95
        }
      ],
      ""outputs"": [
        {
          ""name"": ""CLIP"",
          ""type"": ""CLIP"",
          ""links"": [
            80,
            81
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.37"",
        ""Node name for S&R"": ""T5TokenizerOptions"",
        ""widget_ue_connectable"": {}
      },
      ""widgets_values"": [
        1,
        0
      ]
    },
    {
      ""id"": 8,
      ""type"": ""BasicScheduler"",
      ""pos"": [
        -30,
        490
      ],
      ""size"": [
        315,
        106
      ],
      ""flags"": {},
      ""order"": 9,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""model"",
          ""type"": ""MODEL"",
          ""link"": 76
        }
      ],
      ""outputs"": [
        {
          ""name"": ""SIGMAS"",
          ""type"": ""SIGMAS"",
          ""links"": [
            7
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.33"",
        ""Node name for S&R"": ""BasicScheduler"",
        ""widget_ue_connectable"": {
          ""scheduler"": true,
          ""steps"": true,
          ""denoise"": true
        }
      },
      ""widgets_values"": [
        ""simple"",
        20,
        0.8200000000000002
      ],
      ""color"": ""#2a363b"",
      ""bgcolor"": ""#3f5159""
    },
    {
      ""id"": 1,
      ""type"": ""SamplerCustomAdvanced"",
      ""pos"": [
        403.3896484375,
        247.3291473388672
      ],
      ""size"": [
        355.20001220703125,
        554.5205078125
      ],
      ""flags"": {},
      ""order"": 17,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""noise"",
          ""type"": ""NOISE"",
          ""link"": 3
        },
        {
          ""name"": ""guider"",
          ""type"": ""GUIDER"",
          ""link"": 78
        },
        {
          ""name"": ""sampler"",
          ""type"": ""SAMPLER"",
          ""link"": 6
        },
        {
          ""name"": ""sigmas"",
          ""type"": ""SIGMAS"",
          ""link"": 7
        },
        {
          ""name"": ""latent_image"",
          ""type"": ""LATENT"",
          ""link"": 8
        }
      ],
      ""outputs"": [
        {
          ""name"": ""output"",
          ""type"": ""LATENT"",
          ""slot_index"": 0,
          ""links"": [
            1
          ]
        },
        {
          ""name"": ""denoised_output"",
          ""type"": ""LATENT"",
          ""links"": null
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.33"",
        ""Node name for S&R"": ""SamplerCustomAdvanced"",
        ""widget_ue_connectable"": {}
      },
      ""widgets_values"": [],
      ""color"": ""#323"",
      ""bgcolor"": ""#535""
    },
    {
      ""id"": 9,
      ""type"": ""InpaintModelConditioning"",
      ""pos"": [
        -360.87548828125,
        691.5425415039062
      ],
      ""size"": [
        216.59999084472656,
        138
      ],
      ""flags"": {},
      ""order"": 15,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""positive"",
          ""type"": ""CONDITIONING"",
          ""link"": 73
        },
        {
          ""name"": ""negative"",
          ""type"": ""CONDITIONING"",
          ""link"": 11
        },
        {
          ""name"": ""vae"",
          ""type"": ""VAE"",
          ""link"": null
        },
        {
          ""name"": ""pixels"",
          ""type"": ""IMAGE"",
          ""link"": null
        },
        {
          ""name"": ""mask"",
          ""type"": ""MASK"",
          ""link"": 12
        }
      ],
      ""outputs"": [
        {
          ""name"": ""positive"",
          ""type"": ""CONDITIONING"",
          ""slot_index"": 0,
          ""links"": [
            74
          ]
        },
        {
          ""name"": ""negative"",
          ""type"": ""CONDITIONING"",
          ""links"": [
            75
          ]
        },
        {
          ""name"": ""latent"",
          ""type"": ""LATENT"",
          ""slot_index"": 2,
          ""links"": [
            8
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.33"",
        ""Node name for S&R"": ""InpaintModelConditioning"",
        ""widget_ue_connectable"": {
          ""noise_mask"": true
        }
      },
      ""widgets_values"": [
        true
      ],
      ""color"": ""#223"",
      ""bgcolor"": ""#335""
    },
    {
      ""id"": 12,
      ""type"": ""ImpactGaussianBlurMask"",
      ""pos"": [
        -717.2888793945312,
        874.5679321289062
      ],
      ""size"": [
        315,
        82
      ],
      ""flags"": {},
      ""order"": 8,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""mask"",
          ""type"": ""MASK"",
          ""link"": 26
        }
      ],
      ""outputs"": [
        {
          ""name"": ""MASK"",
          ""type"": ""MASK"",
          ""links"": [
            12
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfyui-impact-pack"",
        ""ver"": ""8.14.2"",
        ""Node name for S&R"": ""ImpactGaussianBlurMask"",
        ""widget_ue_connectable"": {
          ""kernel_size"": true,
          ""sigma"": true
        }
      },
      ""widgets_values"": [
        10,
        10
      ],
      ""color"": ""#223"",
      ""bgcolor"": ""#335""
    },
    {
      ""id"": 14,
      ""type"": ""Anything Everywhere"",
      ""pos"": [
        -721,
        810
      ],
      ""size"": [
        210,
        46
      ],
      ""flags"": {
        ""collapsed"": true
      },
      ""order"": 7,
      ""mode"": 0,
      ""inputs"": [
        {
          ""color_on"": ""#64B5F6"",
          ""label"": ""IMAGE"",
          ""name"": ""IMAGE"",
          ""shape"": 7,
          ""type"": ""*"",
          ""link"": 25
        }
      ],
      ""outputs"": [],
      ""properties"": {
        ""cnr_id"": ""cg-use-everywhere"",
        ""ver"": ""6.0.4"",
        ""Node name for S&R"": ""Anything Everywhere"",
        ""group_restricted"": 0,
        ""color_restricted"": 0,
        ""widget_ue_connectable"": {}
      },
      ""widgets_values"": [],
      ""color"": ""#223"",
      ""bgcolor"": ""#335""
    },
    {
      ""id"": 18,
      ""type"": ""Anything Everywhere"",
      ""pos"": [
        -1660,
        410
      ],
      ""size"": [
        210,
        46
      ],
      ""flags"": {
        ""collapsed"": true
      },
      ""order"": 10,
      ""mode"": 0,
      ""inputs"": [
        {
          ""color_on"": ""#FF6E6E"",
          ""label"": ""VAE"",
          ""name"": ""VAE"",
          ""shape"": 7,
          ""type"": ""*"",
          ""link"": 18
        }
      ],
      ""outputs"": [],
      ""properties"": {
        ""cnr_id"": ""cg-use-everywhere"",
        ""ver"": ""6.0.4"",
        ""Node name for S&R"": ""Anything Everywhere"",
        ""group_restricted"": 0,
        ""color_restricted"": 0,
        ""widget_ue_connectable"": {}
      },
      ""widgets_values"": [],
      ""color"": ""#332922"",
      ""bgcolor"": ""#593930""
    },
    {
      ""id"": 17,
      ""type"": ""VAELoader"",
      ""pos"": [
        -1770,
        270
      ],
      ""size"": [
        315,
        58
      ],
      ""flags"": {},
      ""order"": 4,
      ""mode"": 0,
      ""inputs"": [],
      ""outputs"": [
        {
          ""name"": ""VAE"",
          ""type"": ""VAE"",
          ""slot_index"": 0,
          ""links"": [
            18
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.33"",
        ""Node name for S&R"": ""VAELoader"",
        ""widget_ue_connectable"": {
          ""vae_name"": true
        }
      },
      ""widgets_values"": [
        ""ae.safetensors""
      ],
      ""color"": ""#332922"",
      ""bgcolor"": ""#593930""
    },
    {
      ""id"": 31,
      ""type"": ""CLIPLoader"",
      ""pos"": [
        -1438.0023193359375,
        -226.02560424804688
      ],
      ""size"": [
        270,
        106
      ],
      ""flags"": {},
      ""order"": 5,
      ""mode"": 0,
      ""inputs"": [],
      ""outputs"": [
        {
          ""name"": ""CLIP"",
          ""type"": ""CLIP"",
          ""links"": [
            95
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.40"",
        ""Node name for S&R"": ""CLIPLoader"",
        ""widget_ue_connectable"": {}
      },
      ""widgets_values"": [
        ""t5xxl_enconly.safetensors"",
        ""chroma"",
        ""default""
      ]
    },
    {
      ""id"": 30,
      ""type"": ""UNETLoader"",
      ""pos"": [
        -1462.882568359375,
        -56.00956726074219
      ],
      ""size"": [
        315,
        82
      ],
      ""flags"": {},
      ""order"": 6,
      ""mode"": 0,
      ""inputs"": [],
      ""outputs"": [
        {
          ""name"": ""MODEL"",
          ""type"": ""MODEL"",
          ""slot_index"": 0,
          ""links"": [
            94
          ]
        }
      ],
      ""properties"": {
        ""cnr_id"": ""comfy-core"",
        ""ver"": ""0.3.33"",
        ""Node name for S&R"": ""UNETLoader"",
        ""widget_ue_connectable"": {
          ""unet_name"": true,
          ""weight_dtype"": true
        }
      },
      ""widgets_values"": [
        ""chroma_v27.safetensors"",
        ""fp8_e4m3fn""
      ],
      ""color"": ""#332922"",
      ""bgcolor"": ""#593930""
    }
  ],
  ""links"": [
    [
      1,
      1,
      0,
      2,
      0,
      ""LATENT""
    ],
    [
      3,
      4,
      0,
      1,
      0,
      ""NOISE""
    ],
    [
      6,
      7,
      0,
      1,
      2,
      ""SAMPLER""
    ],
    [
      7,
      8,
      0,
      1,
      3,
      ""SIGMAS""
    ],
    [
      8,
      9,
      2,
      1,
      4,
      ""LATENT""
    ],
    [
      11,
      11,
      0,
      9,
      1,
      ""CONDITIONING""
    ],
    [
      12,
      12,
      0,
      9,
      4,
      ""MASK""
    ],
    [
      18,
      17,
      0,
      18,
      0,
      ""VAE""
    ],
    [
      25,
      21,
      0,
      14,
      0,
      ""IMAGE""
    ],
    [
      26,
      21,
      1,
      12,
      0,
      ""MASK""
    ],
    [
      27,
      2,
      0,
      22,
      0,
      ""IMAGE""
    ],
    [
      73,
      15,
      0,
      9,
      0,
      ""CONDITIONING""
    ],
    [
      74,
      9,
      0,
      29,
      1,
      ""CONDITIONING""
    ],
    [
      75,
      9,
      1,
      29,
      2,
      ""CONDITIONING""
    ],
    [
      76,
      6,
      0,
      8,
      0,
      ""MODEL""
    ],
    [
      77,
      6,
      0,
      29,
      0,
      ""MODEL""
    ],
    [
      78,
      29,
      0,
      1,
      1,
      ""GUIDER""
    ],
    [
      80,
      28,
      0,
      15,
      0,
      ""CLIP""
    ],
    [
      81,
      28,
      0,
      11,
      0,
      ""CLIP""
    ],
    [
      94,
      30,
      0,
      20,
      0,
      ""MODEL""
    ],
    [
      95,
      31,
      0,
      28,
      0,
      ""CLIP""
    ]
  ],
  ""groups"": [],
  ""config"": {},
  ""extra"": {
    ""ds"": {
      ""scale"": 0.876922695000009,
      ""offset"": [
        1962.71927169676,
        193.56378412209173
      ]
    },
    ""ue_links"": [
      {
        ""downstream"": 2,
        ""downstream_slot"": 1,
        ""upstream"": ""17"",
        ""upstream_slot"": 0,
        ""controller"": 18,
        ""type"": ""VAE""
      },
      {
        ""downstream"": 6,
        ""downstream_slot"": 0,
        ""upstream"": ""30"",
        ""upstream_slot"": 0,
        ""controller"": 20,
        ""type"": ""MODEL""
      },
      {
        ""downstream"": 9,
        ""downstream_slot"": 2,
        ""upstream"": ""17"",
        ""upstream_slot"": 0,
        ""controller"": 18,
        ""type"": ""VAE""
      },
      {
        ""downstream"": 9,
        ""downstream_slot"": 3,
        ""upstream"": ""21"",
        ""upstream_slot"": 0,
        ""controller"": 14,
        ""type"": ""IMAGE""
      }
    ],
    ""groupNodes"": {},
    ""links_added_by_ue"": [
      90,
      91,
      92,
      93
    ],
    ""frontendVersion"": ""1.22.1"",
    ""VHS_latentpreview"": true,
    ""VHS_latentpreviewrate"": 0,
    ""VHS_MetadataImage"": true,
    ""VHS_KeepIntermediate"": true
  },
  ""version"": 0.4
}"
6Aq2HQCn,InsideAPart - Project 3,BoblokDevelopyyyr,Lua,Thursday 12th of June 2025 10:47:27 AM CDT,"task.wait(2)
local TweenService = game:GetService(""TweenService"")
local part = script.Parent

local goal = {
	Position = Vector3.new(-21.3, 5, -30.7),
	Size = Vector3.new(10, 10, 10)
}	

local tweenInfo = TweenInfo.new(
	5,
	Enum.EasingStyle.Cubic,
	Enum.EasingDirection.Out,
	0,
	false,
	0
)

local tween = TweenService:Create(part, tweenInfo, goal)
tween:Play()"
4D8fH3rq,InsideAPart - Project 2,BoblokDevelopyyyr,Lua,Thursday 12th of June 2025 10:47:04 AM CDT,"local part = script.Parent


local linearVelocity = Instance.new(""LinearVelocity"", part)
linearVelocity.VectorVelocity = Vector3.new(0, 20, 0)
linearVelocity.MaxForce = 1000000

local attachment = Instance.new(""Attachment"", part)

linearVelocity.Attachment0 = attachment

task.spawn(function()
	while task.wait(0.1) do
		local red = math.random(0, 255)
		local green = math.random(0, 255)
		local blue = math.random(0, 255)
		part.Color = Color3.new(red, green, blue)
	end
end)

"
313QGVfE,ServerScriptsService - Project 1,BoblokDevelopyyyr,Lua,Thursday 12th of June 2025 10:46:24 AM CDT,"local CollectionService = game:GetService(""CollectionService"")

local taggedParts = CollectionService:GetTagged(""KillParts"")

for _,part:Part in pairs(taggedParts) do
	part.Material = Enum.Material.Neon
	part.BrickColor = BrickColor.new(""Really red"")
	
	part.Touched:Connect(function(hitObject)
		local character = hitObject.Parent
		local humanoid = character:FindFirstChildOfClass(""Humanoid"")::Humanoid
		if humanoid then
			humanoid.Health = 0
		end
	end)
end"
D4R4x5Y1,Force Enable Picture-in-Picture,Froschi,JavaScript,Thursday 12th of June 2025 10:44:18 AM CDT,"// ==UserScript==
// @name         Force Enable Picture-in-Picture
// @description  Replaces disablepictureinpicture with enablepictureinpicture, even inside iframes - Enforces video players to enable PiP mode / Example: Crunchyroll
// @version      1.0
// @author       Froschi
// @match        *://*/*
// @grant        none
// ==/UserScript==

(function () {
    'use strict';

    // Replace existing attributes
    function replaceAttributes(root = document) {
        const elements = root.querySelectorAll('[disablepictureinpicture]');
        elements.forEach(el => {
            console.log(""🔧 Enforcing Picture-in-Picture on:"", el);
            el.removeAttribute('disablepictureinpicture');
            el.setAttribute('enablepictureinpicture', '');
        });
    }

    // Watch for new elements being added dynamically
    function watchForNewElements(root = document) {
        const observer = new MutationObserver(mutations => {
            mutations.forEach(mutation => {
                mutation.addedNodes.forEach(node => {
                    if (node.nodeType === 1) {
                        if (node.hasAttribute('disablepictureinpicture')) {
                            node.removeAttribute('disablepictureinpicture');
                            node.setAttribute('enablepictureinpicture', '');
                        }
                        const inner = node.querySelectorAll('[disablepictureinpicture]');
                        inner.forEach(el => {
                            el.removeAttribute('disablepictureinpicture');
                            el.setAttribute('enablepictureinpicture', '');
                        });
                    }
                });
            });
        });
        observer.observe(root.body, { childList: true, subtree: true });
    }

    // Run on page load
    window.addEventListener('load', () => {
        console.log(""🌼 Page loaded, enabling picture-in-picture..."");
        replaceAttributes();
        watchForNewElements();
    });
    replaceAttributes();
})();"
Qw0WNCER,Untitled,BrunoMAzeredo,Python,Thursday 12th of June 2025 10:43:16 AM CDT,"Conta BMA	

CCST : Pass: G@D1234
ccst@bma.com.br"
cp7bgcX7,Auto-Play and Auto-Skip Crunchyroll,Froschi,JavaScript,Thursday 12th of June 2025 10:39:49 AM CDT,"// ==UserScript==
// @name         Auto-Crunchy
// @description  Automatically clicks play/skip when it appears
// @version      1.0
// @author       Froschi
// @match        *://*/*
// @grant        none
// ==/UserScript==

(function () {
    'use strict';
	
	// Change texts to your language
    const TARGET_TEXTS = [
        ""SKIP OPENING"",
        ""OPENING ÜBERSPRINGEN"",
        ""SKIP INTRO"",
        ""ÜBERSPRINGEN"",
        ""CREDITS ÜBERSPRINGEN""
    ];

    let isCooldown = false;

    function getOwnText(el) {
        return Array.from(el.childNodes)
            .filter(node => node.nodeType === Node.TEXT_NODE)
            .map(node => node.textContent.trim())
            .join("" "");
    }

    function tryClickSkipText() {
        const allElements = document.querySelectorAll(""*"");
        for (const el of allElements) {
            const ownText = getOwnText(el);
            if (!TARGET_TEXTS.includes(ownText)) continue;
            const parent = el.parentElement;
            if (!parent) continue;
            console.log(`💫 Found ""${ownText}"" button, clicking!`);
            parent.click();
            return true;
        }
        return false;
    }

    function tryClickPlayButton() {
        const playButton = document.querySelector('[data-testid=""vilos-large_play_pause_button""][data-test-state=""paused""]');
        if (!playButton) return false;
        console.log(""▶️ Found paused play button, clicking!"");
        playButton.click();
        return true;
    }

    const observer = new MutationObserver(() => {
        if (isCooldown) return;
        if (!tryClickSkipText() && !tryClickPlayButton()) return;
        isCooldown = true;
        console.log(""🕒 Cooldown started (10s)~"");
        setTimeout(() => {
            isCooldown = false;
            console.log(""✅ Cooldown over, watching again~"");
        }, 10000);
    });

    observer.observe(document.body, {
        childList: true,
        subtree: true
    });

    console.log(""Watching for skip and play buttons."");
})();"
63UdQUDT,Untitled,allbano,C++,Thursday 12th of June 2025 09:55:57 AM CDT,"#include <iostream>

using namespace std;

float to_steps(float angle) {
  return (3200 * 38 / 360.0) * angle;
}

int main() {
  int counter = 0;
  float fcounter = 0.0;
  float c2 = 0.0;

  for (int k = 0; k < 10; ++k) {
    for (int i = 0; i < 360; ++i) {
      counter += to_steps(i);
      fcounter += to_steps(i);
      c2 += i;
    }

    std::cout << ""counter = "" << counter << '\n';
    std::cout << ""fcounter = "" << fcounter << '\n';
    std::cout << ""c2 = "" << c2 << ""\n\n"";

    for (int i = 359; i >= 0; --i) {
      counter -= to_steps(i);
      fcounter -= to_steps(i);
      c2 -= i;
    }
  }

  std::cout << ""counter = "" << counter << '\n';
  std::cout << ""fcounter = "" << fcounter << '\n';
  std::cout << ""c2 = "" << c2 << '\n';
  return 0;
}"
pdMixZiy,Untitled,RenSafaray,Python,Thursday 12th of June 2025 09:38:12 AM CDT,"from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
import re  # Для работы с регулярными выражениями
import time

# Настройка Selenium
chrome_options = Options()
chrome_options.add_argument(""--headless"")  # Фоновый режим
service = Service(ChromeDriverManager().install())
driver = webdriver.Chrome(service=service, options=chrome_options)

# Открываем страницу
url = ""https://asu.bspu.ru/webapp/#/Rasp/""
driver.get(url)
time.sleep(5)  # Ждем загрузки

# Находим все ссылки <a>
links = driver.find_elements(By.TAG_NAME, ""a"")

# Парсим ID и название группы
for link in links:
    href = link.get_attribute(""href"")
    text = link.text.strip()  # Удаляем лишние пробелы
    
    if href and ""#/Rasp/Group/"" in href:  # Фильтруем только нужные ссылки
        # Извлекаем ID из ссылки (последнее число)
        group_id = re.search(r""Group/(\d+)"", href).group(1)
        
        print(f""ID группы: {group_id}, Название: {text}"")

driver.quit()"
BMNBLqRf,Untitled,RenSafaray,Python,Thursday 12th of June 2025 09:36:06 AM CDT,"from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
import time

# Настройка Selenium (Chrome)
chrome_options = Options()
chrome_options.add_argument(""--headless"")  # Режим без графического интерфейса
service = Service(ChromeDriverManager().install())
driver = webdriver.Chrome(service=service, options=chrome_options)

# Открываем страницу
url = ""https://asu.bspu.ru/webapp/#/Rasp/""
driver.get(url)

# Ждем загрузки динамического контента
time.sleep(5)  # Можно заменить на ожидание появления элемента

# Находим все ссылки <a>
links = driver.find_elements(By.TAG_NAME, ""a"")

# Выводим href и текст ссылки
for link in links:
    href = link.get_attribute(""href"")
    text = link.text  # Текст внутри <a>...</a>
    if href and text:  # Проверяем, что оба значения не пустые
        print(f""Ссылка: {href}, Текст: {text}"")

# Закрываем браузер
driver.quit()"
MgP1JhjV,ps-refactor-get groups,joedigital,PowerShell,Thursday 12th of June 2025 09:17:13 AM CDT,"#assign params from command line
param(
  [Alias(""UNCPath"")]
  [Parameter(Mandatory)]
    [string]$SourcePath,
  [Alias(""OFilePath"")]
  [Parameter(Mandatory)]
    [string]$OutputFilePath
)

begin {
  
  $startTime = Get-Date

  #create arrayLists to hold output from 3 tasks: 1) count, 2) get ACLs, 3) expand group membership
  #$arrayListFolderCountResults = [System.Collections.ArrayList]@()
  $arrayListACLs = [System.Collections.ArrayList]@()
  #$arrayListGroupsToExpand = [System.Collections.ArrayList]@()

  #.net List (for performance and mutability) of identity/group names to exclude (case-insensitive matching will be used)
  #These are the ""name parts"" after any domain or ""BUILTIN\"" prefix.
  $listExcludedGroups = [System.Collections.Generic.List[string]]@()
    $listExcludedGroups.Add(""Administrators"")      # Matches BUILTIN\Administrators
    $listExcludedGroups.Add(""Authenticated Users"") # Matches well-known group
    $listExcludedGroups.Add(""Backup_OPs"")
    $listExcludedGroups.Add(""Domain Admins"")       # Matches well-known group
    $listExcludedGroups.Add(""Domain Users"")        # Matches well-known group
    $listExcludedGroups.Add(""NETWORK SERVICE"")     # Matches well-known group
    $listExcludedGroups.Add(""SYSTEM"")              # Matches NT AUTHORITY\SYSTEM
    $listExcludedGroups.Add(""CREATOR OWNER"")       # Matches special identity
    $listExcludedGroups.Add(""Users"")               # Matches BUILTIN\Users
  
  #get [only] folders (-Directory) under the source path for file counts and sizes
#**  ACLs uses -Recurse: need to account for this
#**   trying to avoid the perf hit of scanning the folders twice
  #long paths
  $longpath = '\\?\UNC'
  $SourcePath = $longpath + $SourcePath
  #$SourcePath
  $FoldersArray = @(Get-ChildItem $SourcePath -Directory -Recurse) #**debug recurse is later
  
  #init empty result set if there are no folders
  $Results = @()
  if ($FoldersArray.Count -eq 0) {
    $Results += [pscustomobject] @{
      Path = $SourcePath
      Count = 0
      GBSize = 0.00
      FolderDepth = 0
    }
  }

  #init the folder depth counter used in the foreach loop
  #$FoldersDeep = ($SourcePath -split '\\').Count - 2 #subtract for current (.) and parent (..)
  
  #new [pcustomobject] array for ACL results which will be the input to expand group members
  $ACLOutInfo = @()

  #new [pcustomobject] array for group member results
  #$uniqueGroups = @()

  #Write-Verbose ""Script initialized. Excluded identities (case-insensitive): $($Global:ExcludedIdentities -join ', ')"" -Verbose

}

process {

  #loop through the folders for ACLs + file counts; write separate CSVs for each
  ForEach ($currentFolder in $FoldersArray) {
    #display the current path being evaluated (top level only for file counts)
    write-host ""FoldersArray loop: $($currentFolder.FullName)"" -ForegroundColor Yellow -backgroundColor DarkGray
 
    #extract the ACLs for each folder in this loop

    #create a FolderInfo object (.net for speed)
    $objCurrentFolderInfo = New-Object System.IO.DirectoryInfo($currentFolder.FullName) #must use ""FullName"" for the complete UNC path
    $ACLs = $objCurrentFolderInfo.GetAccessControl()
    <#alternatives
      # $ACLs = [System.IO.Directory]::GetAccessControl($currentFolder.FullName)
      # $ACLs = Get-Acl -Path $currentFolder.FullName -ErrorAction Stop
      # $ACLs.Access | Format-Table
    
    #$ACLs.Access | Format-Table
    #>
    #exclude ACLs in the ExcludedGroups array (see ""begin {}"" section above)
    ForEach ($accessRule in $ACLs.Access) {
      <#
      GetAccessRules($true, $true, [System.Security.Principal.NTAccount])) 
      GetAccessRules()
      The first boolean indicates that you want to include rules explicitly set on the object.
      The second boolean indicates that you want to exclude inherited rules but it doesn't seem to work. [Bug?]
      [System.Security.Principal.NTAccount] specifies that you want the IdentityReference
       (like a username or group name) to be translated into an NTAccount object, making it easily readable.
      #>
      #$ACLs.Access | Format-Table
      
      #only ACLs that are not inherited
      if ($accessRule.IsInherited -eq $false) {

        $thisGroupName = $accessRule.IdentityReference.Value
    #Write-host ""thisGroupName = $thisGroupName"" -ForegroundColor Green -backgroundColor DarkGray
        # Extract the GroupName, e.g., ""Administrators"" from ""BUILTIN\Administrators"" or ""SalesUsers"" from ""CONTOSO\SalesUsers""
        $thisShortGroupName = $thisGroupName.Split('\')[-1]
        #$thisShortGroupName

        # Check if the ShortGroupName is in the exclusion list (PowerShell -eq is case-insensitive for strings)
        $IsExcluded = $false
        ForEach ($ExcludedItem in $listExcludedGroups) {
          #test for exclusion
          if ($thisShortGroupName -eq $ExcludedItem) {
            $IsExcluded = $true
    #Write-host ""Excluding '$thisGroupName' because '$ExcludedItem' is in the exclusion list."" -ForegroundColor Yellow -backgroundColor DarkBlue
            break
          }
        } #end excluded groups loop

        if (-not $IsExcluded) {          
          #save this group for group member expansion
          $ACLOutInfo += [pscustomobject]@{
            FolderPath = $currentFolder.FullName
            IdentityReference = $thisGroupName
            #AccessControlType = $ACL.AccessControlType
            #IsInherited = $ACL.IsInherited
            #InheritanceFlags = $ACL.InheritanceFlags
            #PropagationFlags = $ACL.PropagationFlags
            FileSystemRights = $accessRule.FileSystemRights
          }
          <#
          $arrayListGroupsToExpand.Add($thisShortGroupName) #ArrayList because it won't be exported to CSV
          **Use the IdentityReference from the $ACLOutInfo array for the groups to be expanded?
          #>

          #add non-inherited, non-excluded ACL to array list
          $arrayListACLs.Add($ACLOutInfo)
          # write-host$arrayListACLs
    #      Write-Host ""  File System Rights: $($accessRule.FileSystemRights)""
    #      Write-Host ""  Is Inherited: $($accessRule.IsInherited)""
    #      Write-Host ""  Identity Reference: $thisGroupName""
          #Write-Host ""  File System Rights: $($accessRule.FileSystemRights)""
    #      Write-Host ""  Inheritance Flags: $($accessRule.InheritanceFlags)""
          #Write-Host ""  Access Control Type: $($accessRule.AccessControlType)""   
          #Write-Host ""  Propagation Flags: $($accessRule.PropagationFlags)""
    #      Write-Host ""-----------------------------------""
          #**
        } #endif IsExcluded
      
      } else {
   #Write-Host ""     skipping this rule (inherited) for $thisGroupName"" -ForegroundColor Yellow -BackgroundColor DarkRed
        }
      #endif IsInherited
   #Write-host ""looping for next access rule in $($currentFolder.FullName)"" -ForegroundColor Green -backgroundColor DarkGray
    } #end access rules loop
  } #end currentFolder loop
} #end process

end {

  #create output filename (ACLs)
  $OutFile = $OutputFilePath + ""acls-"" + $((Get-Date).ToString('yyyy-MM-dd_HH-mm-ss')) + "".csv""
  #Save results to csv file
  $ACLOutInfo | Export-Csv $OutFile -NoTypeInformation
  Write-host ""saving $OutFile..."" -ForegroundColor Green -backgroundColor DarkBlue
#  $ACLOutInfo | Export-Csv -Path ""G:\My Drive\tmp\myarrayList.csv"" -NoTypeInformation
#>
  $endTime = Get-Date
  New-TimeSpan -Start $startTime -End $endTime | Select-Object -Property TotalSeconds, TotalMinutes
  
  Write-Host ""end of script"" -ForegroundColor Green -backgroundColor DarkGray

}"
NCDddW1f,W05 - On the 12 days of Christmas,lod_01,PostgreSQL,Thursday 12th of June 2025 09:17:09 AM CDT,"-- Drop and recreate lyric type safely
DO $$ BEGIN
	IF EXISTS (SELECT 1 FROM pg_type WHERE typname = 'lyric') THEN
		DROP TYPE lyric CASCADE;
	END IF;
END $$;

-- Create the lyric composite type with longer gift text
CREATE TYPE lyric AS (
  days VARCHAR(8),
  gift VARCHAR(64)
);

-- Create the function twelve_days that returns a string array
CREATE OR REPLACE FUNCTION twelve_days(
	IN pv_days VARCHAR(8)[],
	IN pv_gifts LYRIC[]
)
	RETURNS TEXT[] AS
$$
DECLARE
	lv_retval TEXT[] := ARRAY[]::TEXT[];
	verse_line TEXT;
BEGIN
	FOR i IN 1..ARRAY_LENGTH(pv_days, 1) LOOP
    	-- Opening line for the day
		lv_retval := ARRAY_APPEND(lv_retval, 'On the ' || pv_days[i] || ' day of Christmas, my true love sent to me');

		-- Append each gift from i down to 1
		FOR j IN REVERSE 1..i LOOP
			IF j = 1 THEN
				IF i = 1 THEN
					verse_line := pv_gifts[1].days || ' ' || pv_gifts[1].gift;
				ELSE
					verse_line := 'and ' || LOWER(pv_gifts[1].days || ' ' || pv_gifts[1].gift);
				END IF;
			ELSE
				verse_line := pv_gifts[j].days || ' ' || pv_gifts[j].gift;
			END IF;
				lv_retval := ARRAY_APPEND(lv_retval, verse_line);
		END LOOP;


    -- Add a blank line between verses
		lv_retval := ARRAY_APPEND(lv_retval, '');
	END LOOP;

	RETURN lv_retval;
END;
$$ LANGUAGE plpgsql;

-- Run a DO block to test the function
DO $$
DECLARE
  lv_days  VARCHAR(8)[] := ARRAY['first','second','third','fourth','fifth','sixth','seventh','eighth','ninth','tenth','eleventh','twelfth'];
  lv_gifts LYRIC[] := ARRAY[
    ROW('','partridge in a pear tree')::lyric,
    ROW('Two','turtle doves')::lyric,
    ROW('Three','French hens')::lyric,
    ROW('Four','calling birds')::lyric,
    ROW('Five','golden rings')::lyric,
    ROW('Six','geese a laying')::lyric,
    ROW('Seven','swans a swimming')::lyric,
    ROW('Eight','maids a milking')::lyric,
    ROW('Nine','ladies dancing')::lyric,
    ROW('Ten','lords a leaping')::lyric,
    ROW('Eleven','pipers piping')::lyric,
    ROW('Twelve','drummers drumming')::lyric
  ];
  lv_song  TEXT[];
  verse_line TEXT;
BEGIN
  lv_song := twelve_days(lv_days, lv_gifts);

  FOREACH verse_line IN ARRAY lv_song LOOP
    IF verse_line IS NOT NULL AND LENGTH(TRIM(verse_line)) > 0 THEN
      RAISE NOTICE '%', verse_line;
    ELSE
      RAISE NOTICE '';
    END IF;
  END LOOP;
END;
$$;
"
v65UBZyZ,reset-ccm.ps1,Combreal,PowerShell,Thursday 12th of June 2025 08:31:28 AM CDT,"#Run as admin to stop the SCClient, reset the Confuguration Manager, refresh the Configuration Manager Policies and restart the SCClient.

If (Get-Process -Name ""SCClient"") { 
    Stop-Process -Name ""SCClient""
}

Invoke-WMIMethod -Namespace root\ccm -Class SMS_CLIENT -Name ResetPolicy 1

$IDMappings = @{
'MachinePolicy'        = '{00000000-0000-0000-0000-000000000021}'; 
'DiscoveryData'        = '{00000000-0000-0000-0000-000000000003}'; 
 #'ComplianceEvaluation' = '{00000000-0000-0000-0000-000000000071}'; #not found
'AppDeployment'        = '{00000000-0000-0000-0000-000000000121}'; 
'HardwareInventory'    = '{00000000-0000-0000-0000-000000000001}'; 
'UpdateDeployment'     = '{00000000-0000-0000-0000-000000000108}'; 
'UpdateScan'           = '{00000000-0000-0000-0000-000000000113}'; 
'SoftwareInventory'    = '{00000000-0000-0000-0000-000000000002}'; 
}

ForEach ($IDMapping in $IDMappings.Keys) {
   Write-Host ""${IDMapping}: $($IDMappings.$IDMapping)""
   Invoke-WMIMethod -Namespace root\ccm -Class SMS_CLIENT -Name TriggerSchedule $($IDMappings.$IDMapping)
}

Start-Process -FilePath ""C:\Windows\CCM\ClientUX\scclient.exe""
"
N15fVXHe,2025-06-12T14:28:53.733925,powerampache,PHP,Thursday 12th of June 2025 07:28:54 AM CDT,"1.01-80-play (80) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""Failed to connect to /192.168.2.5:4500"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

"
Bgq2QfNB,TVremote,NashrifZMgs,JavaScript,Thursday 12th of June 2025 07:21:31 AM CDT,"// ==UserScript==
// @name         Universal On-Screen Console & Pointer (v35 - Responsiveness Tuner)
// @namespace    https://viayoo.com
// @version      2025-06-26.35
// @description  Adds a simple UI (Key '5') to fine-tune pointer responsiveness (acceleration time) for different devices.
// @author       Gemini & Vyacheslav
// @match        *://*/*
// @grant        none
// @run-at       document-start
// ==/UserScript==

(function() {
    'use strict';

    // ===================================================================================
    // --- PART 1: IMMEDIATE HIJACK (Stable) ---
    // ===================================================================================
    const logBuffer = []; let uiReady = false; let _renderLogs = () => {};
    const originalConsole = { log: console.log, error: console.error, warn: console.warn, info: console.info, debug: console.debug };
    const hijack = (type, color) => {
        console[type] = function(...args) {
            let isFromPointerScript = args.length > 0 && args[args.length - 1] && args[args.length - 1].__fromPointerScript === true;
            if (isFromPointerScript) args.pop(); const source = isFromPointerScript ? 'script' : 'external';
            const message = args.map(arg => { try { if (arg instanceof Error) return arg.stack || arg.message; if (arg && typeof arg === 'object') return JSON.stringify(arg); return String(arg); } catch (e) { return '[Unserializable Object]'; } }).join(' ');
            logBuffer.push({ message: `[${type.toUpperCase()}] ${message}`, color, source });
            if (logBuffer.length > 250) logBuffer.shift(); if (uiReady) { _renderLogs(); }
            if (originalConsole[type]) { originalConsole[type].apply(console, args); }
        };
    };
    hijack('log', '#FFFFFF'); hijack('warn', '#FFD700'); hijack('error', '#FF6B6B'); hijack('info', '#61AFEF'); hijack('debug', '#BE50F4');
    window.addEventListener('error', (e) => { console.error(`Uncaught: ${e.message} at ${e.filename}:${e.lineno}`); });
    window.addEventListener('unhandledrejection', (e) => { console.error('Promise Rejection:', e.reason); });
    console.log('Logger is active at document-start.', { __fromPointerScript: true });

    // ===================================================================================
    // --- PART 2: UI AND SCRIPT INITIALIZATION (Stable) ---
    // ===================================================================================
    function initializeScript() {
        let debugConsole, consoleContent, scriptModeButton, allModeButton, tunerUI, tunerValueElement;
        let consoleIsVisible = false; let consoleDisplayMode = 'script'; let tunerIsVisible = false;
        const scriptConsole = { log: (message) => console.log(message, { __fromPointerScript: true }), warn: (message) => console.warn(message, { __fromPointerScript: true }), error: (message, e) => console.error(message, e || '', { __fromPointerScript: true }), info: (message) => console.info(message, { __fromPointerScript: true }), };
        function renderLogs() { if (!consoleContent) return; consoleContent.innerHTML = ''; const f = logBuffer.filter(l=>consoleDisplayMode==='all'||l.source==='script'); f.forEach(l=>{const e=document.createElement('div');e.textContent=`> ${l.message}`;e.style.color=l.color;e.style.borderBottom='1px solid #333';e.style.padding='2px 0';if(l.source==='external')e.style.opacity='0.8';consoleContent.appendChild(e);}); consoleContent.scrollTop = consoleContent.scrollHeight; }
        _renderLogs = renderLogs;
        function updateConsoleModeButtons() { if (!scriptModeButton || !allModeButton) return; const a={backgroundColor:'#4A5568',borderColor:'#A0AEC0'},i={backgroundColor:'transparent',borderColor:'#718096'};Object.assign(scriptModeButton.style,consoleDisplayMode==='script'?a:i);Object.assign(allModeButton.style,consoleDisplayMode==='all'?a:i); };
        function createDebugUI() { if(document.getElementById('gm-debug-console'))return;debugConsole=document.createElement('div');debugConsole.id='gm-debug-console';Object.assign(debugConsole.style,{position:'fixed',top:'10px',left:'10px',width:'calc(100% - 20px)',maxWidth:'800px',maxHeight:'50vh',backgroundColor:'rgba(20,20,20,0.9)',color:'white',fontFamily:'monospace',fontSize:'13px',zIndex:'2147483647',border:'1px solid #555',display:'none',flexDirection:'column',boxShadow:'0 5px 15px rgba(0,0,0,0.5)'});const h=document.createElement('div');Object.assign(h.style,{padding:'8px',borderBottom:'1px solid #444',display:'flex',gap:'10px',alignItems:'center',backgroundColor:'rgba(40,40,40,0.9)'});scriptModeButton=document.createElement('button');scriptModeButton.textContent='Script Logs';allModeButton=document.createElement('button');allModeButton.textContent='All Logs';[scriptModeButton,allModeButton].forEach(b=>{Object.assign(b.style,{background:'transparent',border:'1px solid #718096',color:'white',padding:'4px 10px',borderRadius:'4px',cursor:'pointer',fontFamily:'sans-serif',fontSize:'12px'});h.appendChild(b);});scriptModeButton.addEventListener('click',e=>{e.stopPropagation();consoleDisplayMode='script';updateConsoleModeButtons();renderLogs();});allModeButton.addEventListener('click',e=>{e.stopPropagation();consoleDisplayMode='all';updateConsoleModeButtons();renderLogs();});consoleContent=document.createElement('div');Object.assign(consoleContent.style,{padding:'8px',overflowY:'scroll',flexGrow:'1',wordWrap:'break-word',whiteSpace:'pre-wrap'});debugConsole.appendChild(h);debugConsole.appendChild(consoleContent);document.body.appendChild(debugConsole);updateConsoleModeButtons();};
        const toggleConsole = () => { consoleIsVisible = !consoleIsVisible; if (debugConsole) debugConsole.style.display = consoleIsVisible ? 'flex' : 'none'; };
        
        // NEW: Function to create the tuner UI
        function createTunerUI() {
            if (document.getElementById('gm-tuner-ui')) return;
            tunerUI = document.createElement('div');
            tunerUI.id = 'gm-tuner-ui';
            Object.assign(tunerUI.style, {
                position: 'fixed', top: '20px', left: '50%', transform: 'translateX(-50%)',
                display: 'none', alignItems: 'center', gap: '20px',
                backgroundColor: 'rgba(0, 0, 0, 0.7)', color: 'white', fontFamily: 'sans-serif',
                padding: '10px 20px', borderRadius: '8px', zIndex: '2147483647', border: '1px solid #555'
            });

            const leftArrow = document.createElement('div'); leftArrow.textContent = '<';
            const rightArrow = document.createElement('div'); rightArrow.textContent = '>';
            tunerValueElement = document.createElement('div');

            [leftArrow, rightArrow].forEach(arrow => Object.assign(arrow.style, { fontSize: '24px', fontWeight: 'bold', cursor: 'pointer' }));
            Object.assign(tunerValueElement.style, { fontSize: '18px', minWidth: '80px', textAlign: 'center' });
            
            tunerUI.appendChild(leftArrow);
            tunerUI.appendChild(tunerValueElement);
            tunerUI.appendChild(rightArrow);
            document.body.appendChild(tunerUI);
        }

        const toggleTuner = () => { tunerIsVisible = !tunerIsVisible; if (tunerUI) tunerUI.style.display = tunerIsVisible ? 'flex' : 'none'; };
        
        createDebugUI();
        createTunerUI(); // Create the new UI
        uiReady = true; 
        renderLogs();

        // --- Main Pointer Logic (v35) ---
        try {
            scriptConsole.log('UI Initialized. Pointer script starting...');
            const SETTINGS = { POINTER_INITIAL_SPEED: 1.5, POINTER_TOP_SPEED: 12, POINTER_ACCELERATION_TIME: 800, CURSOR_SIZE: 24, ENTER_HOLD_THRESHOLD: 220, SCROLL_SPEED_INITIAL: 8, SCROLL_SPEED_MAX: 40, SCROLL_ACCELERATION_TIME: 1200 };
            const COLORS = { NORMAL: 'black', SCROLL: '#0EA5E9' };

            const updateTunerText = () => { if (tunerValueElement) tunerValueElement.textContent = `${SETTINGS.POINTER_ACCELERATION_TIME} ms`; };
            updateTunerText();

            const pointer = document.createElement('div'); document.body.appendChild(pointer);
            Object.assign(pointer.style, { position: 'fixed', top: '0px', left: '0px', width: `${SETTINGS.CURSOR_SIZE}px`, height: `${SETTINGS.CURSOR_SIZE}px`, backgroundColor: 'rgba(255, 255, 255, 0.5)', border: `3px solid ${COLORS.NORMAL}`, borderRadius: '50%', boxShadow: '0 2px 5px rgba(0,0,0,0.5)', zIndex: '2147483647', transform: 'translate(-50%, -50%)', transition: 'transform 0.1s ease-out, border-color 0.2s', pointerEvents: 'none' });

            let scriptActive = true, currentMode = 'pointer', isDragging = false, enterHoldStartTime = 0, dragTarget = null, textInputMode = false, scrollTarget = null;
            const cursor = { x: window.innerWidth / 2, y: window.innerHeight / 2 };
            const keysDown = {};

            const dispatchMouseEvent = (type, target, options) => { if (!target) return; const eventOptions = { bubbles: true, cancelable: true, view: window, clientX: options.x, clientY: options.y, pointerType: 'mouse', isPrimary: true, button: options.button || 0, ...options }; target.dispatchEvent(new (typeof PointerEvent === 'function' ? PointerEvent : MouseEvent)(type, eventOptions)); };
            const clickAtPoint = (x, y) => { pointer.style.display = 'none'; let el = document.elementFromPoint(x, y); pointer.style.display = 'block'; if (!el || el.id.startsWith('gm-')) return; if (['INPUT', 'TEXTAREA'].includes(el.tagName) || el.isContentEditable) { scriptConsole.log('Entering Text Input Mode.'); textInputMode = true; el.focus(); updateUIVisibility(); return; } dispatchMouseEvent('mousedown', el, { x, y }); dispatchMouseEvent('mouseup', el, { x, y }); dispatchMouseEvent('click', el, { x, y }); };
            const findScrollableParent = (element, ignoreTextInputs = false) => { if (!element) return null; let el = element; while (el && el !== document.body && el !== document.documentElement) { if (ignoreTextInputs && (el.tagName === 'TEXTAREA' || el.isContentEditable)) { el = el.parentElement; continue; } const style = window.getComputedStyle(el); if ((style.overflowY === 'scroll' || style.overflowY === 'auto' || style.overflowX === 'scroll' || style.overflowX === 'auto') && (el.scrollHeight > el.clientHeight || el.scrollWidth > el.clientWidth)) { return el; } el = el.parentElement; } return null; };
            const isScrollableTextInput = (el) => { return el && (el.tagName === 'TEXTAREA' || el.isContentEditable) && (el.scrollHeight > el.clientHeight || el.scrollWidth > el.clientWidth); };
            const updateUIVisibility = () => { pointer.style.display = scriptActive ? 'block' : 'none'; pointer.style.borderColor = (currentMode === 'scroll') ? COLORS.SCROLL : COLORS.NORMAL; };
            const exitTextInputMode = () => { scriptConsole.log('Exiting Text Input Mode.'); textInputMode = false; if (document.activeElement) document.activeElement.blur(); updateUIVisibility(); };

            const gameLoop = () => {
                const now = performance.now();
                if (scriptActive && !textInputMode && currentMode !== 'scroll' && !tunerIsVisible) {
                    if (keysDown.Enter && !isDragging && (now - enterHoldStartTime > SETTINGS.ENTER_HOLD_THRESHOLD)) { isDragging = true; pointer.style.display = 'none'; dragTarget = document.elementFromPoint(cursor.x, cursor.y) || window; pointer.style.display = 'block'; dispatchMouseEvent('mousedown', dragTarget, { x: cursor.x, y: cursor.y }); }
                    let moveX = 0, moveY = 0;
                    for (const key in keysDown) { if (key === 'Enter') continue; const rampFactor = Math.min(1, (now - (keysDown[key] || now)) / SETTINGS.POINTER_ACCELERATION_TIME); const currentSpeed = SETTINGS.POINTER_INITIAL_SPEED + (SETTINGS.POINTER_TOP_SPEED - SETTINGS.POINTER_INITIAL_SPEED) * rampFactor; if (key === 'ArrowUp') moveY -= currentSpeed; if (key === 'ArrowDown') moveY += currentSpeed; if (key === 'ArrowLeft') moveX -= currentSpeed; if (key === 'ArrowRight') moveX += currentSpeed; }
                    cursor.x += moveX; cursor.y += moveY;
                    if (isDragging) { dispatchMouseEvent('mousemove', dragTarget, { x: cursor.x, y: cursor.y }); }
                    cursor.x = Math.max(SETTINGS.CURSOR_SIZE/2, Math.min(window.innerWidth - SETTINGS.CURSOR_SIZE/2, cursor.x));
                    cursor.y = Math.max(SETTINGS.CURSOR_SIZE/2, Math.min(window.innerHeight - SETTINGS.CURSOR_SIZE/2, cursor.y));
                }
                if (scriptActive && !textInputMode && currentMode === 'scroll') {
                    const target = scrollTarget || window;
                    for (const key in keysDown) {
                        if (!['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(key)) continue;
                        const holdDuration = now - (keysDown[key] || now);
                        const rampFactor = Math.min(1, holdDuration / SETTINGS.SCROLL_ACCELERATION_TIME);
                        const currentSpeed = SETTINGS.SCROLL_SPEED_INITIAL + (SETTINGS.SCROLL_SPEED_MAX - SETTINGS.SCROLL_SPEED_INITIAL) * rampFactor;
                        if (key === 'ArrowUp') target.scrollBy(0, -currentSpeed); if (key === 'ArrowDown') target.scrollBy(0, currentSpeed); if (key === 'ArrowLeft') target.scrollBy(-currentSpeed, 0); if (key === 'ArrowRight') target.scrollby(currentSpeed, 0);
                    }
                }
                pointer.style.transform = `translate(${cursor.x}px, ${cursor.y}px) translate(-50%, -50%) scale(${isDragging ? '0.8' : '1'})`;
                requestAnimationFrame(gameLoop);
            };
            
            const handleKeyDown = (e) => {
                // Highest priority keys
                if (e.key === '4') { e.preventDefault(); e.stopPropagation(); toggleConsole(); return; }
                if (e.key === '5') { e.preventDefault(); e.stopPropagation(); toggleTuner(); return; }

                // NEW: Handle tuner adjustments
                if (tunerIsVisible) {
                    if (e.key === 'ArrowLeft') {
                        SETTINGS.POINTER_ACCELERATION_TIME = Math.max(100, SETTINGS.POINTER_ACCELERATION_TIME - 50); // Min 100ms
                        updateTunerText();
                    } else if (e.key === 'ArrowRight') {
                        SETTINGS.POINTER_ACCELERATION_TIME = Math.min(2000, SETTINGS.POINTER_ACCELERATION_TIME + 50); // Max 2000ms
                        updateTunerText();
                    }
                    e.preventDefault(); e.stopPropagation();
                    return;
                }

                if (textInputMode) {
                    if (['3', 'Escape'].includes(e.key) || (e.key === 'Backspace' && e.target.value === '')) {
                        e.preventDefault(); e.stopPropagation(); exitTextInputMode();
                    }
                    return;
                }

                if (e.key === '1') { scriptActive = !scriptActive; scriptConsole.log(`Script active: ${scriptActive}`); updateUIVisibility(); return; }
                if (!scriptActive) return;
                
                if (e.key === '2') {
                    if (currentMode === 'scroll') { currentMode = 'pointer'; scrollTarget = null; } 
                    else {
                        currentMode = 'scroll';
                        if (isScrollableTextInput(document.activeElement)) { scrollTarget = document.activeElement; scriptConsole.log('Scroll target set to active text input.'); } 
                        else { let el = document.elementFromPoint(cursor.x, cursor.y); scrollTarget = findScrollableParent(el, true); scriptConsole.log(scrollTarget ? 'Found scrollable parent.' : 'Defaulting to window scroll.'); }
                    }
                    scriptConsole.log(`Mode: ${currentMode}`); updateUIVisibility();
                    return;
                }
                if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Enter'].includes(e.key)) { e.preventDefault(); e.stopPropagation(); if (!keysDown[e.key]) { keysDown[e.key] = performance.now(); if (e.key === 'Enter') enterHoldStartTime = keysDown.Enter; } }
            };
            
            const handleKeyUp = (e) => {
                if (tunerIsVisible) return; // Don't process keyups for pointer if tuner is open
                if (textInputMode || !scriptActive) return;
                if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Enter'].includes(e.key)) {
                    e.preventDefault(); e.stopPropagation();
                    if (e.key === 'Enter') {
                        if (isDragging) { dispatchMouseEvent('mouseup', dragTarget, { x: cursor.x, y: cursor.y }); }
                        else { clickAtPoint(cursor.x, cursor.y); }
                        isDragging = false; dragTarget = null;
                    }
                    delete keysDown[e.key];
                }
            };
            
            window.addEventListener('keydown', handleKeyDown, true); window.addEventListener('keyup', handleKeyUp, true);
            updateUIVisibility(); requestAnimationFrame(gameLoop);

        } catch (e) {
            scriptConsole.error(""A critical error occurred during script setup:"", e);
        }
    }

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeScript, { once: true });
    } else {
        initializeScript();
    }
})();"
XAuF8GF1,unibas.ch leaked,asdasdasdasasd,C#,Thursday 12th of June 2025 06:57:15 AM CDT,"``````````` unibas.ch has been leaked by UnM@SK ``````
procversion
Linux version 5.15.0-141-generic (buildd@lcy02-amd64-027) (gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0, GNU ld (GNU Binutils for Ubuntu) 2.38) #151-Ubuntu SMP Sun May 18 21:35:19 UTC 2025
etc hosts
131.152.215.49 bz-resit-vmwebext01.biozentrum.unibas.ch bz-resit-vmwebext01
username password
mpodvinec:aadIMiH0jkRUc
mikosc:aaUb7qiGe.jHc
nubiscan:aabTH0uRX9rm6
gnerre:aaTsQSGrfbKM.
djfraser:aa0BTUHXxyCCg
Handschin:aabWO1IivXBfg
tironarg:aaYCyu5w9wNMI
DianaJung:aaA35Xje4Qzj6
iwanjones:aaI.CHUIMnOoA
ultrapusha:aamxrcEPy8Pb6
faurholm:aakBB7gPKmyRw
Joyce_Repa:aaK3nAUxSl4K2
Coetzee:aaL7AbXEIa5HQ
vinuipe:aaOvTtXNm15Qs
WTSchaiff:aaPed7YBYU8zo
paul11:aaHKqC4YbixFc
oliverburkikp:aa.TWZaJjP5Iw
lihongpeng:aa0wRQRpP.A8M
dirienzo:aaT1Mkit84WZ.
xprieur:aaKI5eJaL.8TQ
flockhart:aakl1s8XC1kr6
annnguye:aajy/AJ/BMNW.
akralli:aav2hVaBCIy.I
sadovskyy:aaag/kVqAi2G2
wolbold:aafRq5xm2Dw0E
frankc:aakuk8OVzwVUs
ngattu:aaAA8WUz/xJ6U
dunlop:aagcfPX6w4x86
idussault:aa7D3aRHd/dBs
bhagenbuch:aas6xLEucDsH2
elisabetta:aaCR608xY3xEo
mhhsut:aa92bksxgq4Qw
john_schuetz:aameRB/7bgbis
massem:aagy0mVOiE.mo
wanghb65:aarb71LCawdS.
allanokey:aanUCzi5pi/B.
yannick_duguay:aajbfIHBI4rP6
Macken:aa12JzH3ouyaE
jimrhee:aaWvVTKR9OW16
bbpptcdd:aaJJsXpwXPjvs
Gary_Perdew:aatwTQJZ.8ByM
jackvh:aaKIf10yBD//o
jpeters:aa86DNDICLqDo
rgenolet:aaddJ8405ZBoI
cgarenc:aaedvGlOrh7ZQ
tskaar:aagCgB.4/Oq1Y
ph6720:aaJ9QAqhRauOE
Astolz:aaUl6wsGu2SNA
Afigge:aatPVadn4Uc1M
akiueda:aakwHo724SjAs
yukioy:aaKkJLE2yxNvM
david76:aak1FfrvhOaJY
cmrncy:aawSCwQOejjkU
watanabe:aakhKY5sWBkC6
jjtremblay:aaxmrlNjm9emQ
sneakerj:aaQegnmAGWZhE
jiewan:aaEMc0Mi3XNEw
grabbitt:aaAvd1VIF41eg
michaelwuus:aayf2ZadqQnAU
hempel:aa58CQ7V6BFF6
buchanan:aaC/YTZyekbMI
kmatsui:aaprI8JscUdug
ccvfok:aa8R9Zmd5wYa.
chrisl:aaU4J4.Njrt9s
qianfei:aayGa3FynjKrc
elstanley:aaNM6p8OP.bec
mrthumb:aatQPZhZvhHG6
sarpiain:aa9pJBC7idwII
ananthm:aaZZs0GFHgptk
bandrob:aarqnUKCF3vYI
dsierra:aaP6I.2abaKRw
nperumal:aa6D6J6GX1Nbs
globoss:aau35TZ2mqsgo
vramaswa:aa4872k1b7D9E
avdstolpe:aa6qauCOqHjqU
jls46409:aasH7bHquAiz2
stevenkliewer:aaFqmX5fvf/WA
vmootha:aaTu92T8TmUkQ
AnnCathrin:aaBro/AnCGT4Y
Campbemj:aaeFhJOwAm9pk
vlamba:aab4TmHsxf2fc
zukunft:aawXZTqznCxOc
sylvia:aaiOQ2xZvLSO.
ageier:aaupTTiI0CL3E
akpeyer:aai6/.q/dy2qE
baader:aarejgoPGyg8E
jhuang:aaB2Rp/xADgsw
beckmay:aa.YrtRwtwNqQ
clements:aa23o4zEJrdr.
uyterada:aaMnM5F4Ju.vA
sphilips:aaY/H1yGuXSwA
baumeist:aaJ2TQHoInzlc
levicarroll:aacWg7gXZJrtY
jlamba:aaL92hlmts3rQ
pietrzak:aa.slFloZdUHk
akindmark:aaS4p4sNf5s0w
Zumsteg:aaL8F9InD9uyE
jiandielin:aa2YxnWKIvY9g
ljengelking:aa21EJszy2IJg
dianesmi:aa21.ueOzS2Mw
dmotola:aafK6kaD/AXdg
million:aavS2AXVgU2mM
Mensa1:aak9mJnOo6LsI
krmaisey:aacMRdjd51SJM
licai7:aaVxyuhcNT7CM
aliver:aacwqvEg7s7Ec
Annika:aasA/4cssogHg
stephrong:aaxEbYesycYaA
partha:aaT3KIh7e3.32
hahohaho:aaOqXufsq35FM
childressp:aaFJrfSgWUfVg
rkgupta:aaoX1o4SUouhQ
GezaFejesToth:aa9KhXQ61quKE
sonali:aaCSndKd.N5lw
janelb:aa2H/1maretd2
gbreen:aajOoyI5p4pNM
igrinberg:aaT1Mkit84WZ.
mattias03:aasM/U1.RUc62
manda001:aaYRBWrNUz.js
omoike:aatJZTOKU6IgQ
jiglesi3:aaYEFDUhhGwmI
cozalp:aaKdjVvz..IoE
hidetojinno:aa7dFh.3lreMM
Per_Eriksson:aanopGyXaelR.
reinisal:aaSmKAMJZzJP2
emys1a1:aaCYFO5PikT2U
seheinon:aasFAR3y.Ntm2
gerhardkroenke:aaPPe.i9S.A1I
josepvillena:aaVVvJa..92iU
prefpref:aabds9lF5541.
lat21651:aaFmUkA9d8.6k
kalleg:aaTC0DKPfTjv.
mdownes:aaAHkPKMl82o.
tachibana:aaqFtq2qKVkdk
jimiao:aaNpSbIfvxYb.
ewaehr:aazHsKBENBWgs
zhixiaoyong:aaoFc8aupH2l2
sgdixit:aaWtYqyM1KmRk
teichert:aagItFMWUju3g
han1999520:aaELra92oiqOI
momose:aadBCY0cMzwGY
auduge:aaYuXWUXpIGUo
phendriksen:aaYzgL/coVJEc
schnanke:aalxorIXdB5bo
trisalp:aamvjaN6S0fBI
abogni:aa26NHkILmI86
kab310:aaMPUjmAC8QsA
blasha00:aaZzZuZcYmYy.
Flamant:aa4k5gFwtcD1o
suandjames:aanBic7D.wtHQ
ofrifki:aaDNNyJbNeCGE
veronique:aadn/rCEvK2bg
leifkuhler:aastAxuAD1mRo
wasserww:aaXowkOyWXFIA
qinszhu:aaWaXcX.WTAHg
yama045d:aajXx8VCVvWg.
excelsk:aa.kTZt8zYflQ
ksaitoh:aabgL9vkGdE36
setaluri:aaiA8xlP4v13o
alexander_kel:aaGV1e/TgWUR6
stakeru:aaMw5rmO6KBXE
chamberm:aahDrhyZKjvcY
bajicv:aaAN1ZUwjW7to
chehania:aaZclbeC8ksRM
usavas:aaD0yo5XnBIK2
brenda:aa7Dbxm0tRFqk
CDKLAB:aakAiGB7eJcxQ
FriniKosmas:aaOMVFrNRBw12
jiyoung69:aai4ZBBwpOrVQ
huigao:aagVVVWbYkWQQ
battlem1:aa/syjXrF1Mt6
ferdinandmolnar:aaFWbIDXSKCFE
luebkejl:aakFtywse6aQ.
yklee714:aaAL6dQU4feF2
pjurutka:aa.7xK84IBjWU
sikjomin:aa0OaN0hYKXrk
carlos:aaVx62VbaaxBA
jole63:aa1JNcOpz1AvQ
sanyal:aarVA51FFWpiM
duncans:aaD.I/bHH6kf.
mootha:aabtagAdDd.Uw
aripujianto:aacJENzhlvdSM
grantles:aaC/YTZyekbMI
brcnubi:aaBtJDdeRfMvM
Luntzt:aayLFomAwGakc
kaoruk:aaby4CfK9LRzA
Ikenaga:aadhHC/SV2ERA
popowski:aatiPqdRyg0aY
jzhu2003:aaHVzRjOMFAVY
skarpen:aaAwD.NMny6lk
miller12:aa3ecOpwMwgag
hamyfr1:aaKRP2Z2r2VpI
bergeron:aaHnTFafsnxfw
mcourt01:aaSI/lzNfhs5E
satyam_rentala:aagV8fngZ2mlA
CDKLAB1:aakAiGB7eJcxQ
Mariko:aa0RgTUnGJ8vs
pinghe:aa/0z2Zvrcn/o
rluzcand:aaf9CaALjWQac
weiweishan:aaqgDYan3KcXk
eloranta:aaekiUnMvPico
wjsullivan:aa3Aq2tmXxGak
atanns:aapkiZt27zsBw
dawheeler:aa6NK/IbK2Ves
leyser:aaOeBjJ9XB8rA
moniemi:aaCQo0cFNqE4o
svernier:aaIvyJtf0cZ22
macska:aamHqNFT3jJa.
doundar:aa5X7op8uQjbc
mojanson:aapIM4m5aYOHg
emross:aa1YHJQpEuv8E
yamoon:aaCh2hvft/S0.
gjenster:aaF8IixW5fr9c
Buchmann:aakFja8c3E7vk
huanghai:aaZ07JHy4DNjg
raniad:aa8mJ5h3un8k.
Knut_Steffensen:aapy7g.4vKRlo
bsp3az:aa8Dgbm9DXJsU
boerboom:aaor9WMBMFfAQ
pvlephuc:aaSX.IV8P1tmQ
adattie:aaNm99wGWxvaI
ssa104:aazoFij7K7S7U
gxzyqx5:aabGYF1nIwgXE
makedda:aa7pmZ4xhSF7c
lydiab86:aayJzV6rFAA0g
petlab:aahAkEj2V6ZLU
jillypoo:aamejUPMk.bPw
vlaudet:aaIkfdECcjMLc
piakotokorpi:aaFCqgz4Rz31A
mplatero:aa47jP.yt9252
sgounel:aa2BNME6SrTPw
mariebaille:aarQI9ClOJHx2
agneta_mode:aaDZAAyhSOBTA
dburdick:aaOAtRk8huMw6
btimmo:aa7Dbxm0tRFqk
jimori:aau92u3eUtffU
hmgcnubi:aaAN1ZUwjW7to
rghose:aax82eSH5/gw6
lee337:aaVy05oRXkUDg
lcanaple:aaXj2.PtLymFE
felicitylose:aa4b9.VASfHlo
PeterChang:aaEcjG6Bv/fdY
ccauff:aaHKfYGxc1eXs
tbianco:aaM18Jlr./wN2
xenopus:aaPonI8bFKVsw
msaborow:aaivVUOXSZr4c
seog722:aaKCpAAravyvo
axolot:aauQyp1wCMfFM
echchgadda:aaYK.4V5hc1S.
ggirnun:aagItVsVsjAi6
bdreier:aa/yN/QBbk8Ro
csinal:aaLfHahhbflUw
buffborland:aaEoBeICEmy0A
aleclair:aaUrkb59ZAiWA
leahliz:aaz5Nmx7lu90Q
licht001:aaOjUKhY8z1bI
sathish:aaBYer/hnrcoA
pingyang66:aa2.yaJ0WAwQE
jgblanco:aaxbR9g1t3m2k
coolohms:aaBl3EgnrbH7E
s0gu0001:aaqBVvMsthvV6
dbrobst:aaUleMxmnKJLE
qianfei2000:aarGax4KMcdZQ
engko204:aahJwOIQbAQD6
sturley:aaqEw2ploD6vE
mdpeds:aayEKrodfGyjQ
hanhoff:aaV5owau/INps
stevensun:aaABSHVAJxASQ
fmorello:aa9wYWpmjR9iw
maurizio:aaWxX7X92HG.Y
schmitz:aa9zCHB8Zjepg
KenjiI:aapJ5lSVw2zrc
Ioannou:aaR.HYl3G0.iQ
katja_arnold:aaPeRQ/NWELNA
wendygarrison:aaq1FlM/hvOoQ
abookout:aaJ1u2mQQoMQo
delve_c:aaZ4gKQ4Ec80w
xianbintian:aazOl06EfBNWw
amtssp:aauXm6H8z5mqA
Herzog:aajPXskE6Bsfc
AraujoLab:aa3CNG/yCIEUs
karen2388:aaeU6N5Ubd0Fc
dozanne:aauzNMzGRft.w
Gounel1:aaKEOk4RCx7m6
ashield:aaoyK8B/JqqwE
grempler:aaPM/oibWpW3M
Noylab:aalFtui19xGVk
lljw23:aalFtui19xGVk
flokiko:aaWdEmlTEyPpY
flian01:aaW854t560e/2
tadeja:aaQKXXvebcHLc
napriemer:aaOYxCtc7KJCQ
judithK:aaK2aPYYbJYIc
Helmi2004:aaFKShqHRStvM
liu00036:aaGTpEygwBXgg
chattooj:aa1FOIIODvm1Q
tegudeh:aa1OC66JHMHFQ
kobayumi:aayTfrekydngA
arwooly:aaWdtx9QQY43k
xiang1:aa5G7dx.zdgwE
stepzeb:aaU5sLIfnPmjI
soyoungkim:aahyKYpFdBnuQ
seanmaria:aa3VgMwAGSixk
pingyang666:aayxYvHZF2gqs
johanrenes:aar7R0gmJY4X6
yvonneslin:aakmVRsoIOp4g
mneville:aaJ3nxs0AQvMQ
drkarp:aanLswNnSpYgM
sujungil:aaVJrnJnOrXwY
rodenlab:aa2Ae0hb0Bzdc
laborIM3:aa6A1TyeJax9Y
Mendelsohn:aap7lGPNBaZz.
landrier:aaF30NRXc/6hY
hanano:aaFbmSnhB.iiM
MikakoSumitomo:aaX2szdunE46g
crazyhorse:aaTEOCQI5nyuw
jcunnin4:aaoL19TTnupEw
nalink:aaVZEaQ/kyGtY
bfinck:aaibYCaQlnFD.
kkjones:aaO3H3YscH0RU
russell:aaz31YL12FHN2
rameshselvaraj:aa4PwX8OS6OfY
hbeth21:aak49a6U6uKTI
SGaillard:aaE2519iGdaZ6
brianp0:aaJZS4VEaUzgY
thompsonlab:aaBeuj7cugxfc
bcopple:aaDItOXMx9PFM
scheng:aaYU09WN6KKcI
JMulder:aaa47KdLkyMdc
yoshitomo:aaxQmu3aijUJ6
hulkrules:aaNMvy.DrCGYo
delvecc:aaAM4mQD/QEpM
vbloks:aa7R.b/rRP8xI
garethlanebond:aa1xzWnbp1egM
cthomas:aaupxQzvxCCPo
mabelins:aaeIXOTAj0PCI
VickyLin:aa6YCdki51ezw
wangjinghuan:aapnNQQvlIF/Y
Bina_M:aad42slavS0UI
tanhendrick:aaNN3X.PL2piw
rohitanthony:aa6d5caVg3S8c
lickteig:aad3yz6LYCnpg
UEDAKKK:aawqMAoqdrj3U
dglemay:aaNbfAcyiR5us
sturme:aafHWSGwjlezo
humangenramona:aa22ymDpX.AYE
DioneGS:aa44ObjBhPnpg
moustafa:aaIgWUaO89BL.
Taoufiq:aa8bwD4WrVbGI
higginsm:aasxZgpGchYQQ
csy236:aaSEa8AaU7XWc
dixitsg:aaWtYqyM1KmRk
tdreesen:aaBUkwfF6fbvM
marypt:aaCWYkyjqwqwY
ndipoi:aacPeV2cgWtGw
Nicolas:aasxgOea1FxxA
slh2103:aaIQvRU3YWs0.
cargmann:aaVChwtsuGVv6
luminb:aawuvbgMfVNKA
shimada:aaXUIEgXGLNnw
shoepie:aafUG69aQQBsY
meiery:aa/avNWwGLjmU
friedmaj:aaUjVbAft5GjQ
transport:aatsG7JZUUQqw
chrivia:aaSDicY5cHqQI
schwab:aanr9x4i83/J6
shigliu:aaGTpEygwBXgg
ihanano:aaSttQ1uNnrME
dlgreger:aaedQPZkCtKnA
teculling:aaMITLikfHtWw
bbelda:aaYuC7pvZlXW.
matthew:aaEPAnzvljqY6
swpark64:aaOc.VZQXHbaY
drhartmutglaeser:aabT7qPG9WhI2
lijiang:aaUka61sCw2h.
kiyomitsuji:aafzDINwftgwc
jschuetzlab:aaFCqgz4Rz31A
hpguan:aa8HiUCwnt0tM
jadamson:aau.NK2EFJXiM
cherbas:aa3a1flFhiw2Q
alaridlab:aaUSCnkBgQrig
orhanoz:aaYKlCPU6vENc
juzzosupermodel:aaXYjomKeMbsQ
mshelby:aa.ubz1esd27s
mohan78:aaS9nu1SCrBrI
ahtialan:aarBwKQXjEekk
genboom:aaPE9HwcoM8lM
mvalasek:aaFCqgz4Rz31A
injepgrc:aaJ9QAqhRauOE
ctoscano:aa82twKGqRELE
gradhand:aag4LKJzOH7gw
calixto:aaoRTDfFVOs8Y
wooinlee:aaFCqgz4Rz31A
fanniechen:aayg7L7O.xrTE
adrianroth:aa1dS.LcwLH3Y
bramos:aa/7sUsz.zM3c
nstan01:aaSxdBA61D81Y
markmeyer:aaXJoq35GUz/Q
efuentes:aazWtlHP4muRM
linquat:aaEnwnj6ahSI.
kristiaanwouters:aa9rsGrsORFKk
farmrjerry:aaAxMeB6ViWd6
hyupaik:aaPo9R0Uo9oAI
kirstkingjones:aaO3H3YscH0RU
cooperm:aakp5pGQGIO1c
enice495:aaKLrx5MAARGc
ibochkis:aaP7DUcBgRXss
n1086309:aadk2M75A4L3M
chowdharylab:aaO6Kn/GRVFGE
jenchuang:aa/dSILmn/Lys
eunjoon:aaH.dUl47XFkQ
susutayutaka:aatPD/YW8/b.6
annicotte:aap8BV7BaGq1U
mhubbert:aadGfJmaqn5GI
agalli:aahUQNeNoisUM
dongho:aaLS5geuqeNQA
drfelip:aagFxblYyG9As
sjellison:aaUSCnkBgQrig
rjover:aaaaS2hldHqfc
tmello:aaqhKqm0mAJiw
colelab:aaWz70c.Gf79k
ivanuray:aaK.LTFDMPQr6
NancyS:aawptWPgkIhBY
jschuetz:aaZdqpIfzRuQI
areute:aaR.HYl3G0.iQ
comstock:aa2C0yz1BPuE2
gertrudschuster:aabzH.noG5zLg
annaraffaello:aa0n4eL/CgaPY
xieh1997:aaSvSlpWqL4ys
cchenkumc:aaFCqgz4Rz31A
ndupless:aajDkCs8E5B96
natachashaw:aatHGLyV/.Arw
huskytox:aa5C7sdQhlszw
jandrews:aaYg.CSeY23mg
linyibing6:aa6YCdki51ezw
pascussi:aawTB1b2kNZhE
kenogasa:aa2YMeqOA6OR2
hoekstra:aaId.Cxwct1VE
gracelguo:aaFA/yWEfT0z2
songln:aaqgdOgIS5hew
celiamj:aavWVWPTwf.ME
jmaher:aauT6JKZSRnsg
physionut:aaTYxvO5gy.x2
hnakagaw:aa6RFQ3He6wgw
giariz:aadxZ9usFksLw
mikkaichi:aaDcyEU1m4eFM
syslo08:aa1sL7U9/fi6U
francjl:aalLaPkR/NceY
qiangshen:aaFCqgz4Rz31A
mhoeke:aaIc8c0cg3zDE
rmorimoto:aa.BpL8FrlJrI
skersten:aasr1l1JFXeAI
gbereta:aa3Bi/u4b8J/s
dlutter:aatnp30Qs8eWI
McGrath:aaH6gaREREkiM
rgorski:aaSV/ML.txfBg
drmani81:aaNpbOnU/fNHI
mgarvin2000:aaQpgjEz8w6Fg
lushan:aa37vwNXPuJXk
vitallie:aaV0jQS/48BIo
pzhang1:aanOSuNu1r5LE
WCJ1981818:aas1t1BUu4tdA
wcj1981:aas1t1BUu4tdA
fflamant:aasFGe1pU4dvs
DLHowarth:aaw0YQjjHEm7M
nicolasr:aass6bUUwPcFY
petrucco:aa7B7qVOJcdno
calixtod:aaoRTDfFVOs8Y
ebenedet:aadltCDQAVtpQ
Radina:aaoOplY5sp28Q
ereeves:aaL9JdHmrSw1Q
pia1976:aaDCZV7q72Za6
schnabel:aalxorIXdB5bo
innate:aaLkgCfrS400M
hartmutglaeser:aabT7qPG9WhI2
smhouten:aaYgSafr1bj9Q
yevishere:aaCh2hvft/S0.
swkull:aatPI9MduRD9g
htebrinke:aaMcBMBXc9RK.
mingjiangvandy:aagS10eV/JD9s
dkazmin:aaQC7yZkeUbQ6
menina:aa37s4NbSYUjc
zivjena:aa/qpTlXnLMY6
rpickin:aaf3o8ZfoNuGo
sealep:aabuIxzURbDmQ
wongiseol:aatRQscR7G2hE
melina_fan:aa9dbCaKtFsAQ
antebilab:aaU8vQgj6UCvI
aleksandar:aaK6kiInat1Io
sycai06:aa8DQbER.WlB.
tlcrw1:aaNDMl6EhQSMY
silvaggi:aa1DRVfWujHMk
r_brace:aaPphr44IoMp6
phshinjg:aaJ9QAqhRauOE
minel1004:aa0i.dMOjqKuA
Kostadinova:aa55qDLFU1Cgo
wujing:aariV6/aWOMPw
sousakyle:aaceXC.BP3IiU
yanggrui:aaijgCB2169yE
spacevirtual:aa.SYkPStWP.c
joylin:aaUWsQl9bbX0k
mshimizu:aaQdEpeINaosQ
hpoirier:aakwtaisk7hQw
dpiancatelli:aaMpQv./jWM9.
zxpoppy:aa3fsR0X/KEkc
abomyar:aa502m/JE1T26
mbeyea:aafeBg5zoc926
strasino:aaLxxNYtiPawg
itaya1220:aaeeLDCQX7usg
rgivens1:aah0gQ5Fms1IA
jacrow:aaztV98H7kOFw
rsafi123:aa9DVGzWqj7aE
mhorner:aaSAiUKRGAsE6
adwallac:aaOse72.zZTgk
kosknr:aaUkhOL4r0Q0w
carore:aa63e/uYEP7ko
wistuba:aanzDQjcNjpoM
qmao6467:aat7crHy3VHEU
xinguoj:aa0hqWReXdipU
gkonopka:aaMQ.L/rXD22k
lvergnes:aa/fqk/dc8YhM
imartin:aaB38Tr/o7zhM
shin38jp:aaFrzZru4IJVQ
wstzou:aahpHATWxvKRk
gleong:aasC8d7MMp0uo
timsit:aayV6erCdHgsk
thomasf:aapvVatRKQndU
jsparks:aa.INKZ1FBx/k
BJAneskievich:aaxkv1BD1rsYM
JonathanT:aaWsBpjQZuW0A
JosefaC:aaktDqNM0JyKw
geetarao:aaXc9yuBAI9vw
geetarao10:aaXc9yuBAI9vw
skdd12:aaYoeYIPYzHwM
anghelsi:aaEKxnJ7aB.NM
mkramer:aa0A3raK4jVeY
jelliott:aaS9GPFv.TPh2
johnson:aa9Rs6EgfQWsY
lyncmm3:aa8ll5sN9BthU
amicia:aaFGF9xoPAimU
amoreau:aa/HVzxmWuTJA
jorolin:aa5bwbf2qWFzc
bpoonkuz:aa/yN/QBbk8Ro
olandos:aa48zranCEiTE
bponugo2:aab9lf8H00Iyk
shingokajimura:aap6wXSF5NERQ
hebeppre:aa7vFj.RmIPro
apellicoro:aamjttpsRCdSQ
chenjiarong:aalp2yXEQnPns
mmolusky:aa5oNaBM8HZJg
s_hirofumi0820:aacfUfF2u9FO6
rlaalsp:aa4rEkQrM6mFI
zwang6:aaGqi4avJaZOo
smodic:aagOseHJaf.ZE
erictien:aajcklThZ0ZSY
mktaylor:aa4xARlbpgvB2
Stegemann:aa9sjqwDESWkw
varfyman:aaLp3x03Xovco
longuet:aanynAMhWZvGs
70016304:aa2CVbGSA3PJM
sanyal1973:aarVA51FFWpiM
dingxunshan:aaZKsa.5uJCgs
atrombet:aa/hlHws8qveQ
yfan18:aaUpKV4S3Z4zk
shengzhong:aa8nT/vZBcjao
nestler:aa7SELDlZAKMI
caryboyd:aaaTv32Vm/bk6
cmassie:aaWQB6bgPoRLE
Jessicaaxa:aa1IVwTVPFdMo
carloslerin:aaVx62VbaaxBA
jhakkola:aajWRvw2grOVk
twiederholt:aaHL3VKXVMnrg
nakamurahiroki:aaW7NM2AeKx9Q
ahsoonc:aa45mG8Ubpefs
sasitorn12:aakv5WUJ3CITg
amenaarcher:aazUg3ma61Kug
takiko:aauOcdjayL7E2
josecpaz:aavlAT29LwvLA
debasisdan:aaN0Hk1JudtEA
lionelfo:aajLL07ms9gV2
virpilamsa:aaxNwMLhL7EP2
basmati:aaFCqgz4Rz31A
jinsun323:aaUnASMU69ovM
nishionaoki:aa7Pf8qmTvJLA
charlesthomas:aa7q3nRXNYcF2
charletoma:aa7q3nRXNYcF2
ccaspersen:aa8ty0gQET9tY
modica:aagOseHJaf.ZE
yanrliao:aaeTHD/7in9ns
eunwoo70:aaDwW55rttQpk
katjascheffler:aaprsHFGgP3T2
yuichi:aaGGKR.MkGkrU
nakatake:aaFU.fbynWHME
u0050025:aaB4jmESvKBsQ
shahy1:aauFVsF42YtYA
vsubrama:aa5r0q6Gsu1xo
fengtianhe:aa7tB4J9oisSc
sholms:aal0EUUHSIsUE
natacha:aatHGLyV/.Arw
mihwachoi:aajNAImPkHTLk
NMoullan:aa1o2RfI1K72M
promoters:aayTlut/q5voA
losaxo:aa3owSdABFIzE
harmen1978:aar16SQAypsdQ
pollet:aaYpvHeX9yP6M
csanaky:aaiBTxL8oZ5VE
majamatis:aaTl0M76dWozg
yuyuyu:aaKGrXSQzvlhY
lchinn:aaFCqgz4Rz31A
lozza6105:aaGazSnFXlysQ
elaine:aaAN1ZUwjW7to
stephenbeesley:aa.bRWmCZNT/I
songyang:aaLsBYFAx5eYU
NUBISmk:aasdzLRSxsTRE
adamkuhl:aaRk/UfYAO/3A
tanabe:aaAFGEle4sV92
naganot:aaooQ/EcQUhqc
kljleake:aaAyYmnPzM33c
kahles:aaZMw6c1n3WKA
azumsteg:aaVgvZ71jaOxo
byerslab:aa4RxH2yh3GRk
Chicas:aap1xeiVqUE02
shyou0777:aacZ5S/Q7mjto
bsm2dj:aaj9.sX0eEio.
akindmark2:aaQBZCye7tZwQ
kratzera:aaGo9wKa/36zA
mounam:aadye9NA9Sqaw
jfeige:aa.4Y/H8M.hv2
loursdesabers:aaEPAnzvljqY6
sjwebb01:aaX1OUcy7gpHE
cfang01:aa4unfFgwSlTA
ssamaras:aaSJO1ipDexcc
barthj:aa1kR6Wm1D5Sc
dbuckley:aaAUk0zOl0BpM
waziers:aa/x.OSO6Nwng
sull0263:aaginL2KMoRTc
rchmelar:aaNC5s9w6a3HI
forget1997:aaAN1ZUwjW7to
studeren:aatsG7JZUUQqw
annettee:aa3liagrJDDos
narjaise:aatsG7JZUUQqw
mennovergeer:aap.uNiaSEr26
hanryu:aaWJ.dbKCpAio
lance_ni:aaqKGJr5JbVl6
palankl:aajfMKNH1hTm2
bongyongsik:aasdkDagxU/zk
neretti:aatw1H665bWIk
fleurtg:aav/HL6BURKZM
ssindi:aaFCqgz4Rz31A
gimblejm:aaPf/4p.FDPDI
pkrishna:aaT3KIh7e3.32
heecks:aaQcW/pIYnVYg
Cherryl:aawaf9OyeMHug
rpiedade:aaZg13.6s9tDA
pgongal:aa3Jge1PN65fI
pappas:aabxDtu4BjVSA
jhuan2:aaHnVYxz.t1Fw
mariachristinagr:aac5Biz9k.xNA
eugindestici:aa6DChUF6tEDo
hbahudha:aajMZpDQN95tY
Kate_Plant:aaxgRNC/weMH.
yzhang:aaic/I8v7Fiig
chikaena:aa91jLYD5mngo
mbrink1:aa6AmF5vjBmtg
kklein1:aaUET9yr58iAE
fontacer:aaCslYQTkqCCQ
jreeve:aayXzA.gVa7Do
changliu:aayk3qMa9ikVw
richatyagi:aannoDKTsLw5E
tcriresearch:aamQbhgFLhbfQ
nicoledewit:aaev.s.jdVoLY
vjeronim:aaaB5qGqZcJH.
Linguelph:aaK6xkFVxSXGg
lakshmi:aawheky1xSIW.
hjonker:aaWLBXlRTmbhg
oil0000:aaRLBKX3yAtEk
pw3800:aab9kU4cLpSSA
kimwj715:aaC/mQH4t6IcE
sreeramr:aaQhEy7qQVQoc
ThomasL:aajkYPx8mYhTg
qingchengmao:aanfouz13EtR6
cnr_pisa:aaddutOboY9Aw
ehjeninga:aaxAT1aXBCqXQ
fredvaz:aaTKlUoKpr/Ig
ledily:aa89TfCPbGE9s
rubinayasmin:aa5.WrCQtpkQg
FXRchick:aaRwyGY0Ldkp.
FICchick:aaRwyGY0Ldkp.
bokong:aarschyMRFZqg
paulkasu:aaFDnMCu4PXi2
jungst:aat9v3G0hq5fw
Carlberg:aayGmvXJQXLbA
LindaAumo:aaQtmZpe788mM
grasfeder:aa4frALjy6r6M
silviapozzi:aa.3NZs3sGhwI
hsp70Ab:aaHJppyDHxHxY
ccadilla:aaFCrngoPxPSs
shamith:aazJPMeWuIoVs
takamisaji:aaug92q2MyOss
Sunrainny:aaL8N/K2LtUhg
mhhsutsri:aa4aMS.u1gJHw
elwinmorgan:aaa/FlC9t0.xw
busola4vp:aajGCcAGWJiBc
iamkiwoo:aaxOnyLrcKwmQ
xingyewei:aa/10pSXFVX22
yanwang:aaFkObtjjOibI
zhangqh_74:aaHyIXWGmDGO.
qiuqiuhappy2000:aaHyIXWGmDGO.
vpineda:aaw8tIMQcYT0E
zirrhose:aa9mowsQZ7Sz2
rieckma:aaEmYR5cM25jM
lorenz:aaxzCCaen01PA
crespie:aas/G1RPWbM3Q
Mingao:aathKgF9CdZjk
srocchi:aaLrwgg3CP4SM
jmatilai:aaFHVW3V5yV32
freefall:aaGAsrs4Ri39c
mcasado:aaZDXsXQrHumo
serkankir:aaUKZqMT/GA.k
hongyan:aaI9WrFzGhXAQ
arnkas:aaA5mVZ37teO6
mohdarifin:aa/lF28ENfUps
misterx:aa/eUHVcu/hiM
motokajiwara:aacRF5bLCLlPk
mariojlopr:aaGpbI9pzRTX2
tviola:aag3tEtLVBtLc
kmadani:aaKlGoviPY/XQ
bxz133:aaOLrNmuHawqA
huising:aaaqECh45y2W2
blazanin77:aadUo3a5rw5lk
callerubin:aaGKhua9IvKmE
RolandGarros:aapHgOO0fy2gA
vwockel:aaXLqHx8uRkXA
aranyi:aa0P1FjEPXYmk
hossammurad:aa4nLdRLrjIls
zqzhang:aackjNC1c2FiQ
pellicoro:aaOL9.Yne8QXc
xiaoruithu:aa3ot4/k88mbA
angeldbn:aaJ8WIcLAA11Y
lefterov:aaDXF2ao6Cxok
dcochrane:aaWHW/Z6LLelg
ycl8888:aaXWuZOvFwAPk
zhongyi:aa7G9d1k3fIrs
jjpharm1:aaB88HmZP3XDo
JPRAUFMAN:aapUxBvw1SzJo
zrshen:aaAN1ZUwjW7to
wendongh:aatH1RCEEvQtE
rlaalsp83:aaeSHUEGtqYPU
abianchi:aayOQmjhETV/k
sreisman:aabB4i4vnuZLU
modicas:aagOseHJaf.ZE
naomivanvlies:aarW33OlGf.nw
grobertson:aaFCqgz4Rz31A
danielmane:aaPWF.usaoHrA
koendreijerink:aaLQC.zdtCwj6
Arnold:aafCcUTw3WWYI
wenxie:aasibSgW9JwZk
mtalbert:aapkYb6nQfVHo
jmorgan1:aaGFAQbEDzU/M
draganadee:aaX.Wh3f5mkXs
pieklo:aa8RkOcpcxbkw
clj989:aaQFmMZSkJTAM
sweeneyge:aa6ghnRyD8E5Q
gaiping:aaUd9QIuENpMY
rlaalsp6414:aasF7/8gR0T/E
shart3:aaEwyWl/fpqxs
carvalho:aa3SJ8.bEoxc2
ryeager:aasb/b5zsgNlA
tomomisato:aawLIMztqSbjY
bpoonkuzhali:aa/yN/QBbk8Ro
Marinova:aaoOplY5sp28Q
zairzm1:aaFCqgz4Rz31A
weijun0573:aaKDuSCc3cu8s
levymaggie:aaKIf10yBD//o
malex3:aaVqC3nSi2hWY
lcherbas:aa3a1flFhiw2Q
jhoojhoo:aaWEpIiEFQIjE
maryhunt:aa/JEnudXTXiU
chawla:aaL9BEzTr1Wac
lazarlab:aaI4WRI.YrUH6
pmgrez:aa2JKKEC7o5z2
wassym:aaSxw3oTVV0d6
vvlaemin:aaJUPIETPrCoQ
alanmc:aa6ITj6rccxYw
tallyfu:aab.9ASd648jY
ccchen112:aaTtYHeyEk0hk
jcrodrig:aaFCqgz4Rz31A
aghazalp:aaWzfulfLWAtQ
wangting:aaRshBATaczag
kleinkathrin:aaRue6iPgLY7s
amrita:aaRVPqw00hCu2
daniel:aap/Pjw97phE2
rmueller:aa5KQItPNdFPc
Bruesselbach1:aaqWCxjshq84k
amontagn:aar4o.vXO7IC6
amontagner:aaBCL9j4VsaWE
mayapascual:aaFCqgz4Rz31A
AndiHumpen:aaNQ9Z6/aywuw
TinoSchenk:aaK90dl60ICj.
dmurdock:aaygCJ2mttVe6
rsessler:aac3xcgyEJVQo
jmf339:aalGKoPSSlq72
ronnini:aaksGmo.S3n1U
myukiko:aaFZt69Z3Gj9k
Hinada:aa2Dp2TemBZNA
szhang:aa1cu6t4mdQGE
HEURTAUX:aaW.9zjQIXSuU
ys_tsang:aakNuOK38KLo6
sameerkulkarni:aa3.lT3AuDL3w
numazawa:aaL3TeO0zVWL6
florianuhle:aaNM6p8OP.bec
reodevil:aaHiuvfmWCRf6
vincentdeboer:aaMk.ra7831jI
fgschaap:aaDAkj6YAIo1c
pescher:aaI5xjsVgmlHk
shendy:aacxpPoToGnPQ
kakunaijouhou:aaf8alom27s/c
heredia:aaq9S26XGGEb2
lbiggs:aakaIdIASts72
Chawla:aaL9BEzTr1Wac
kmalik:aaIvbR4oFdAjU
nicoleli:aaSjCAHWU7qaQ
sdayers:aa.SYkPStWP.c
wyq315:aaEnTBTx9jyu2
Isoherranen:aaRYH4b1NHhJ2
CarolynC:aaP41g0bvCZGE
cdalh08:aaEPs.E1F.I.2
fan620:aaT2kbkbcQ2jo
river080:aaTC..v6pb7jA
yujiang:aaWnSA/zdcXlk
hxhao81:aavHvC7AQdT36
jthorne:aaQIVAyG6jNJw
xiaobao:aa6r/bmp3MUYU
doigcl:aacjWWXVee17.
lbiggs08:aaXYNvRuQsFOs
pisimisi:aaJcEBBCGUV3k
mpesca:aa7DIxMmfUCPc
haishanli:aadWKcvI6f3Mk
rokosir:aaFCqgz4Rz31A
silo_bas:aaPBXthQp8Meg
chaudhryas:aazpkk5WzQ28o
lkjala:aaP4956eu2TcQ
JBonzo:aa1j1062rexZc
palvimo:aaPOuroJi5KZg
bartunek:aanrMmaw6srdA
patriciamuller:aaE9TxpDdLBRo
shengzhongsu:aa8nT/vZBcjao
carolnwilliams:aaTvsOFN.4Bqg
findingnemo:aaNkjQGL0WR6g
bkoenig:aasDS2piqxLME
barbararenga:aawcSsVTHFvxM
Kajlich:aabjmzZ/Axt/A
Wengch:aanhKlRynwAzQ
pombinho:aa4puQxmxB80w
huixia:aafDaJQogYrYE
puliu3:aagMI66sAR/jk
hmakkone:aa42auVAVHKho
vaishali:aam7DuDLvFsHE
apfelsalat:aaOgfAAR8VBxA
ikang33:aaPedBg20.rYE
acheron6:aaN2IHtlHPeTI
inasense:aaQhEy7qQVQoc
dalsop:aaxcABF5xSGDc
tvallim:aaUgOnG8fTAsI
arighett:aaE6ObaymN/8c
igor_MR:aanzDQjcNjpoM
maillot:aafJsDUQmwLgI
nooges:aaQ9FjedtXzTE
katya28:aaGHWu6M7aiHc
ebellafante:aabGBLyh8srAw
danielberry:aa/Z1Bjt1HUfg
federica1984:aaMCJxI20X0JY
barhealy:aaR/h1bmt0lWg
dequanhui:aaB7.uG93ytTw
poon_m:aaHAPwlMfebvc
arosello:aaHQ.61MEdq2w
karenlim:aanvK1xs44VFU
dionne:aauVlIFi5kW8U
aromano:aaXdw98IkJND.
cjwill:aaN7mL/7RVwm.
sudipan:aaZpsGDgharCo
minerva:aajZOHndD4r1o
csamer:aaZfQFe0B8aos
kaitlyn:aazsaQF9EfPTg
djohnson21:aaj9.sX0eEio.
sunnotel:aaXa8vr6IKSWo
TMatsu:aa.axkrHJrQ1A
songcang:aaKnHwOgbTQ0Y
joebjay20:aagmOPjYJkoNI
sevincen:aaJxwUwDOpB/Y
sramsey:aaHSciUBGM7qY
akosters:aaOCghwMmPHUc
moritzjuettner:aaH3Esn9vQcYU
vidhya:aaFCqgz4Rz31A
wzheng:aabq/xg/1/4gk
Matjaz1976:aaL7WJJdHkfpc
yaqiang:aa45yR0xJ3LCQ
pengfeihe:aaZzkTXZxLfAU
wong1524:aahjtXAs5QM2U
foxpolpo:aaQIg/sSu0YyE
octopus:aanH2F/EfSppk
fszeto:aa2CcdcPLDnGU
mauritz:aaOCcqBIL8xc.
lmu2520:aaNYZ/twf8pHw
jeffbr:aa3LqeL7rpGok
delchemico:aaVhGk.QbFEBE
lquignod:aaD75Y0UC.1H6
yamahi:aa/JotJeGj7gk
llgrasfeder:aa4frALjy6r6M
uebanso:aaQ6Th3EQf9Kg
xxy108:aaU6q3ThVCF7g
lmakowsk:aaYGvk9mPTI9I
cdulery:aaq6FlQTl24rQ
Lavinia:aa97rKiV9aniM
DengR08:aa6xrMAgYo52s
pocarii:aa7K/4SyCddNE
craigpm:aa22cOHfwavUI
matjazrokavec:aaaTn/MuJdI3c
pimacken:aah451g6z2X1k
Ajkajlich:aayQXIK3AG.A.
racuwan:aaGGnrRPg4c2o
sarrei:aara3m18TOwmA
arwende:aaChrOtVbbVcE
lvxinyi:aaj3HlJFmBD.o
jinhc2005:aaxAvlorWtJuY
alexandramilona:aa1H764OL7Ft6
swcvanmil:aaVjYPRPhx5TM
mszemes:aas/YN6Ygil1s
annamm04:aa9zkQhDd/fvA
debdilip:aaV9WwjZboIHM
lfuentes:aaGUZa6oYazbI
jncyznju:aatQ21ig7D6cU
junitive:aaq0woO30mv7.
shadi_ah:aa4M2sfnLR90s
rtrumbly:aaW/yMMkFoTo2
arsaquillo:aaOawhUC7/0rk
joachim_weitzel:aagOxEW5z50b.
junzhang73:aagbOwMrOY6hE
cmolokwu:aaD7MV1J5x59Q
mleggas:aaWg5f5omFMJ6
garciadiaz:aajfMKNH1hTm2
venteclef:aa.BaD5QunNWU
msalbaum:aac46zYUDbAIo
ruchapatel:aaLRRd85Mm32s
xingwche:aaO4YaMyc.YTc
dakezhang:aaXca9rlZZHyU
Alzahrani05:aa8ddUjZsD7Bc
jmcorreia69:aa/ljxYBJJj/E
thomasam98:aaj7j2iOu/vQw
psanchez:aazSXrhWvPVs2
andyclark:aatgRJYl0VGHs
apelkone:aaanTm0VVyqjk
mozukneko:aaIkN03mc9Zz6
igakatsu:aaMkHjtBhIs6I
lisajossmoore:aayWl8uHC2Pbo
malich:aav0MZ7N4EAV6
Byerslab:aa4RxH2yh3GRk
lijialin:aal3EkdhmYArI
lijialin1031:aal3EkdhmYArI
vlamsa:aaKmPXq3IVThs
charlene:aaTCIG/ExDVEs
syamaori:aaOMygEVmsUIs
wevisser:aaRWRFYNUYAqI
yuecui:aa85k0GWdbqhw
jean728:aa85k0GWdbqhw
CoRemmler:aa/mEsI6UHEMo
PutturPrasad:aa0IDxVTllvxY
stephanriedmaier:aaJxMWYrtQIZg
Mattia82:aaReTpODXbdLA
janoh1:aakhMnQP3GCWM
haunerla:aazu1H9fn1jxQ
ralph_burkhardt:aaBqOPVaUpTQY
dunnI1:aag.e5k.rictA
cqhuang89:aaetqXEjOxGqA
xab_gull9:aaXpP.ZPa6CC6
mjfronti:aaqDv.X8ZNl.k
tayw05:aaJt9jpqpIe3U
jef214:aa1sHo64OEogE
clover643:aaaNifaZGdZ7k
mdwyer01:aay.n5E26Ojr6
ahajib:aa46z8DjgsQds
tanpaku:aaNba4hmwQIf6
costabim:aaR.lJBkXnS9c
spolvani:aa4cSS.mACnqI
bryonyT:aaD2mlm1o9Mqk
wesmith:aaG5E58IjDatw
kazu1983:aak0g0rxTJ8CY
stma0355:aaziVZq05tWSw
babomihwa1:aao/g0PU9J/cI
kemouzat:aa7ardj.ilgto
nkeeko:aaU858R6WG34I
chiachiera:aaTeyo8gs39Tg
SCHAKRA:aaO7Ka3L8gpxM
ibq_himr:aaoXd.MFRyIj2
brenga:aa86iu2qgbILY
nfarboodi:aa0JHmsnzph8.
zhangzq:aaGxSRHZfBINU
ksprabhu:aay00XiLVNioQ
kaushalnaveen:aaGcGiXlDZxsM
jeffray_ou:aaIv9jFr0oCXY
zhangycnju:aaEmnAYdnULis
Zhimin:aaIv9jFr0oCXY
ujjawalgandhi:aazWePf0eQZjs
aschroed:aaHx7xSSnplDA
Whitfield1:aa4jvPCv0zPao
hossam75:aa4nLdRLrjIls
gliA414:aaB7Xq2STixp2
InesKoerner:aaHnfcWmnRK9.
raqui1709:aaO1CoHpNYUZo
guodong:aaBIBT.yc19Xg
guodongli:aaBIBT.yc19Xg
slaurentino:aamdn2Vb4jIuk
sansomdm:aaTC7ce/UErV2
4wooinlee:aaFCqgz4Rz31A
uchakradhar:aaW4zJnS3yKqg
sallyt:aaJfbV6nfYizY
carlberg:aaMOeoCV/mX5c
roswell:aa2agmRP4OO1E
merrell:aaAejhR4cxd2Y
chiranjibd:aapTXQGv4HxIY
michi__michi:aaGlJWGycXTRw
marchino:aaw2DtatNajnc
ebenedetti:aadltCDQAVtpQ
benedetti:aaEFNBBtXayI2
jiecheng_NCI:aaNis88ElAaQM
voldenp:aaVrRuxSC35YE
DeepakD:aaxT2PtsFq.fk
ququ1997:aa0LUzxymRmMw
bbertin:aacUhqC5mn6lo
hmottaz:aa30O3lLDgJEI
caseybergman:aaB0i2fLuISoo
priyamani:aaPBzxVt2VYv2
srkulkarni:aaSxrZaYVw3p.
srkulkarni_srk:aaSxrZaYVw3p.
peterosborne:aaFCqgz4Rz31A
potempa:aa6OMr0yL8AMM
doteba:aaOZvuAbV2H8o
danudwary:aaZINB9ZcNVa2
malich2009:aav0MZ7N4EAV6
xmgg8001:aamH2qYRTfPS.
katharing:aaR/cY2Vh40go
cgaren:aa7Bdixeku3Ug
plevitt:aauC.cU.TTA7k
abisan:aaQiNlWUavWHQ
nemdieu:aa7F2OUjAyyuA
nemdieudonne:aaDBTyhHsCr2Y
mbaruche:aa2QwDXojU8ck
abaldan:aaOawhUC7/0rk
panyuzhuo:aaAN1ZUwjW7to
marekb:aabcq7Zrq.9GI
locker:aaXF15Lg1xB2M
Oliverweth:aaAHsuT1zw.ME
llptmmu:aaoEQhSLKX.kA
gthiyam:aaUconD8P1Rq2
transpotting:aagQ/ZdbuVT6Y
fideleo:aaOooGNzLRulk
mtohme:aaruOy/52PeOM
valmclin:aa9gx1lV8MrWw
agamous:aaky6Hj7KEBLM
dongshiwu:aa49tfgnhMfsY
libenyi:aa50gQPsB0xKY
wangyd:aaNWBX3gVgTbI
chappusy:aac0VQysUAcM2
valereff:aadSk9wFNlHRg
2007lab:aazWvLNrpt0Ps
a_g_robertson:aaFCqgz4Rz31A
zhougi:aalgvyY4zGGQk
sofaki:aaPjEKJ.0Zm0Q
paerka:aaDDNZ.Sp/V2I
renechun:aaALHj33q9o4Q
yanwangcoh:aaAN1ZUwjW7to
tlisse:aaiRbtM4g7ZXc
erica83_bio:aaN/g8SUT1pjU
elisabettamolteni:aaDfZ8.RSC1dI
serena_seah:aaaoWv/ttZuDo
danxinw:aaE4MVIIzSs8Q
rishipal:aaFPJgacOB4Dw
Nick123:aaFKzKNv3UeTs
cshuxu:aaupDFsZNQsLY
fengyang007:aaTFyvwGX4mT6
fengyang:aaTFyvwGX4mT6
tzwyc168402:aafKAiAJ1NZyM
eguruce:aaudq2l68L5d.
ailisfagan:aanhjnC3Hze/.
shijingyi11:aaXniiiIehI9o
preetipathak:aan2GYYSf3QZc
preetiawati:aan2GYYSf3QZc
gbouguen:aaAZsOnrRcPLM
a99010238:aaw882uyLikAA
queeniexzz:aaANqmctZhU3Q
dorastyl:aaFCqgz4Rz31A
chancellery:aaBam.Y7fD9ZY
Dominique:aaMxDZlcLe/tw
ludakasi:aaEjDvTUoDXpk
kusumastuti:aauq/V16pMVeE
mgetac:aaQ3zLrIijgdo
ak2702974:aaGWWO1O7K87c
ssid86:aaZrMAyYcUUdk
timothya:aa7qbIeqNqI92
hchen35:aav7nFc1W0cHY
aljg82:aaiGqt/RRoakQ
lbojic:aajc.SU86Ii.A
cheng_j:aaAA8d4Zbo8Zk
JEstall:aaAZX1gfy/yL.
pkaragianni:aaPqtEoU1NWfY
miquel24:aaR363/kIJ8qA
dattapk:aawa0qKbn0ERY
lanari:aaOMDHhS1/HmY
etarling:aaKIf.iIXfPzQ
ivets2002:aa/Ho5idha1wg
oscarhpr:aa7XI5b3tCfYs
AlWu2009:aaBlfWRkxZZPo
sookoian:aaOVWDEHB7502
rjluyan:aa8Z6/dXGPvck
angelaincassati:aapylpzwxzknA
lee218:aaxzf2ZWCgKM6
leejiyoungc:aaxzf2ZWCgKM6
evanhsu6938:aa3jEE6t.n8jw
camirp:aavIfDJYU06ug
friver:aaSbvcBxvpegk
J134445:aaNceV.QdEu4Q
sandystorm:aaGw8lS5nL.oE
deng_pan:aa3r5kfYUWMAY
hondares:aau5O.LaB/nuY
luckyelsie:aav0atag5UVQ2
olevillain:aa2fJ.FbVoEko
mapletree782004:aaNis88ElAaQM
xiaoqin:aagas9y7uyFFY
kaiyulei:aa/WGSjzfu66k
pawaskar:aalc0THMOJuc6
sadeeshivri:aaxS9czEDbZsY
uhg100:aaa3zJTVCNuls
uhg100:aaa3zJTVCNuls
nishimiya:aa7YMsZfp9h2Y
fujipon:aacYn4fsfh3Iw
mrmurru:aaACcre4dkdXg
alemunoz:aaQ99NhyEcgqo
skdwivedi:aaH0ckIlFYqTI
hershbergerpa:aaPi32hNju61o
makshimizu:aa2DDbkZHg6q.
estrauch:aaSah00Nu9XqM
cheligon:aak8GKrHhMyCQ
epoxide:aap/Pjw97phE2
CFitzsimons:aaqtLqillmRKs
lakejiang:aaXqu0HOPRaGI
eteugels:aaMnY4a.s9gns
pgynther:aaREEwvFOBj/c
wegner:aatsG7JZUUQqw
reclov:aaOu0oMU9toyI
hwillis:aaurKlsPEeiWw
miaohm:aaCjKxJjIHt7A
fang006:aad5ociA686og
Federica:aaFCqgz4Rz31A
RBRobey:aadjB/.x6IvwE
rla0132:aaZ5tcVmHDcQ6
monocotz:aab4Qg6fTkcfA
vlagishetty:aa2CcdcPLDnGU
Sulucram:aanGYiDB1KPPo
marypa:aagKTX7oAGj/A
ishizawa:aa.YX.4FY4aTA
sdenayer:aarwOF.dpcf/2
moullan:aanx6KuPgBSQ2
moullan:aanx6KuPgBSQ2
jojo11:aa.W9QEt86dOU
csmlab:aa2DwyOhvrOl6
labcsm:aadt2zZANztB6
suhnrhie:aaGxDCTw3GcQs
aheger:aaI9vgcDBLiXo
zhajia:aacLA9/tttIX2
timrjjr:aarxCcS9uertI
dschm1:aazYReOUyY/aI
nobuyo:aa4qEmPu29hjc
nobuyomaeda:aa4qEmPu29hjc
padmakannan:aaXo7c8gDyG8Q
kunzch:aaPs7fIn0CePU
indumathi:aaJ1DjnntLtjs
mmendez:aaOq5nog8VBsY
satkin81:aa/J.im/sbpDo
APetrescu:aaew26a4NAZ56
albrecht:aadn8U3T9EX2c
mezaki:aa94CPTqEiv6o
lai0na87:aadqTLEKu73fA
Leiting:aaLgB2U/U/XyE
yadavalli:aaxH3iWmLVckA
Combiz:aatJFMkAAOeJ.
montagner:aar4o.vXO7IC6
slahiri:aaddpcS7oKYx6
horialice:aabgVzVj9EX96
daltinta:aaeMGzYZtwR9I
pierolimpia:aaQIg/sSu0YyE
ksdkumar:aafbnUHftFFQM
kconyers:aaHDGQBdFJDIo
Marika:aazqowUeBt5.Q
mmtown:aajjiEhXVInlA
boulsky:aaAtqmbKw65vk
manuelmanchado:aaVuEgTYmt592
Antonia:aa5Xn9BPcOBes
romero2010:aapGSLs.ZBYq2
amenende:aaj.xz0SciYD.
Claude:aazQj/tAz.AAE
srinivs:aaZwOhheh1dZk
danyzucca:aaJUuTBboAM36
gynther:aarl.ust9EBgk
annataylor:aa0SCQdrBK2j6
ghfghf:aaCNnqwGUwd3g
olenellus:aaFjuaVFpUA5k
labocarrier:aaE.lTWdx3cY.
liliam:aaJAM8WS/7IvY
fraissinet:aa5LZZWtGg8dg
Puttur_Prasad:aa0IDxVTllvxY
cqtmmu:aau2jIrvtsDrg
hunanyzh:aafmud/j1DVjY
dsk193:aaWYPXnDkcR9c
fisher:aao9nnomSdZzg
a99xel:aa3MckOQECUhY
sagivs:aadfBZrpC6LFg
emhong:aatuwqaodz7BA
janhic11:aanJQeAtRapEA
janhic111:aanJQeAtRapEA
chendesui:aa2Cr7I176xgo
nivesombra:aa600Vk8LsXxI
nombra:aa600Vk8LsXxI
bing1027:aavxCohR3Hknc
androgen:aaD0yo5XnBIK2
tonebe:aadd6bEyzJW76
Thomasha:aazTGA8Qnj3Jk
gjzijlstra:aapu2mSUet/0I
huanqiu:aaU9xJCC59HV.
mknauer:aaqQDNYlEVJoo
bcharrison:aaPZ.OPj4JSro
Nerwan76:aaQ/U1ccGUn.A
o_chenna:aaJ1DjnntLtjs
akdimounaim:aawqv5ICTjo2c
dsharlin:aaXClXH6oS/Yk
chenjicheng:aaq2RDL5WbUBw
Promotor:aajzMu2uedVDo
togolosh:aa5I4T4d7ftNs
erwanga:aaUFs9wVwoOao
bluesman:aaN.HLmHdWUzI
jianghong:aaegYfEOVIljA
JodiePainter:aabuqdkq/3FEk
c0730195:aaAslc2xq7ah6
SupriyaKadam:aaARFcp17duJQ
Katharina_Hentschel:aa0.kj4r/LwRo
JIECHENG:aaNis88ElAaQM
mercypang:aaJjEmQ38I1.6
labogevry:aaH3tmt6I.ay6
allesandere_:aaiDo4A2M0wRY
carlos_schaffner:aaqxoZ32DaZj2
deqiangs:aaUaoukw6ImN.
vaisanen:aaGibexmVJkwI
yjiang:aaijEGB9wwt3.
firewearing:aa/Ih3ewdq7Kc
dengbing:aa/Ih3ewdq7Kc
mathaesm:aaNCWTObKd8T.
rimmbach:aaJM6chuwL2IY
mhafner:aa1108lizjpmA
elizk1:aaiAEeMem/LM6
shuiliangyu:aast7C5Ye2B76
ElenaPC:aaFCqgz4Rz31A
eminemzhu:aaOLrNmuHawqA
jrk231:aaJ/XTkTRwGKo
ppodlasz:aav1e1gr3Srj2
mwinter2:aak2TVbctk6vs
udayanapte:aa9tazS2F6gXg
lambajk:aaL92hlmts3rQ
kkuchen:aa7makG3uyf1o
honglu:aaQFGnx1rwKYo
123456:aaqiVAsAEBBtY
sueyoshi:aaCntu/70t46s
glinares:aafu2aa2hWnk2
abugooo:aalDdSxmEsAXM
jharder:aafPPUmExZGaY
sarasvati:aa1bJEvRYxdFk
yaghodke:aaUbs9JdQ..jU
plefebvre:aalipMA.9Rp3I
cornelis_guillaume:aazYrtVH77J1U
albagofr:aayZ7GR1ENhoo
desweeney:aaoGL3FyNr90s
sonibl:aabo.c9JqVlCk
gbenoit:aauUH60D2bZjA
jwilliams6:aaqYUvdeiR9fM
rnh0624:aaNvgWWli6rLY
agamemnon:aa45OeeXjz20k
LOladeji:aaMGkYwilM5GE
jonorman:aaaj8fYji6Fi6
dbruemmer:aaU9OH5WmSLEQ
Panando:aaSJZ74ti9Ffo
dr7u15:aarCU76JyH75.
santimental:aaRSGekWfLcbQ
gwendo:aa13MldLP0ujw
johnpapa:aaJdnsndZRxrY
yzhao7:aa.U634dQAKhU
kdsarge:aaxLWE/qm9WFs
ryerson1:aa0Q7oqufat8o
omirabeau:aaCOvDMQ7Imn.
livialenzini:aag10uGwSs1FA
lisa_gianesello:aaNG5n1ldn8Oo
RPDONN:aa5DhOWYOU2NQ
ilenia_derrico:aa9eik/i32b76
kelethchen:aaIfutwRhl.co
marmarzolo:aaac7T1ozryXg
weichengliu:aahqe3AfUA.aQ
mojiyuyu94113:aa7K8WVSyPnpg
digato:aaEFjlpRFY1G2
Salk636:aaAN1ZUwjW7to
Tigger623:aalLNQ0dJ9uhE
Lotuseyes:aacOGykB9LjYI
xingjie:aaHfLFDp47I0M
nonaeva:aaljhP7YpOKXo
lyavix:aa5MYFpUq5Bko
lyavix:aa5MYFpUq5Bko
satokyoto:aaA73DfjJOkrs
ckoufaris:aaagpNg5e.Swg
mikepoon:aaNN3X.PL2piw
llexmm:aaLwutbO7C41o
KaoriEndo:aaJ3hFVqVTJs6
KaoriEndo:aaJ3hFVqVTJs6
unoshige:aaxE.z3p6J5V2
unoshige:aaxE.z3p6J5V2
prashantsingh:aalEJTA36VXEo
ravikanth:aa/LnY.QBsypU
augustyn:aacBASX5DbglU
PLOPEZ:aaXMV6rX2T34Q
cs723cn:aafWybVerJkmo
Rieger:aaL8i1QEYR7Ro
guxi0124:aajtnAmtXj5aQ
guxi66:aajtnAmtXj5aQ
lingcloud:aa0QWu.qrU7n2
PQ20091987:aaqvlrY8phkQA
xueminwang:aaR/mC5Evj9aM
kailie:aaA7qUvnYaKP2
oliviacreemer:aamrUccTASLVc
rbyork0:aaP0fpPznqYY6
Dogus83:aaMEbjV3KL76s
yuka_inaba:aa1ReWIB3ywME
thefgschaap:aaDAkj6YAIo1c
thefgschaap:aaDAkj6YAIo1c
vchandra:aanzubGe5hNSQ
lbleicher:aaVhGk.QbFEBE
rosebudsled:aa9V22qspisqw
EE500Alies:aasodrD2voBzQ
amitchaurasia:aaLrzOnZcK1.E
ewaellis:aaEUTnDS7zpfI
ewacristineellis:aaEUTnDS7zpfI
mt229431:aasoRRzDmQvvA
attinkara:aa73kE8NtGPJY
sergioherdiaz:aaFOdqWX9cwMM
collynn42:aaeoyyO.1Rmh6
jigu0004:aa4r6MTg1Uubo
vpr08002:aaOLzLMfdDM56
cissigardmo:aaBbe6bSbxj1c
ChadW50:aaOA2bZQBgkFk
anks_igib:aaG4wgFOKt0Qs
mschouten:aaFnNo8KLPs5A
neilwalsh:aaCW6gGb/9h0U
yapchuisun:aazFp5PfjUP/Y
justinr:aa3o/PEECN.Gg
zhuwang03:aaRuVxnndbK8Q
oladeji2:aaMGkYwilM5GE
dhkim450:aaiZIsNZ/HxqY
sirjgoswami:aaPOGUeknyWQo
audayan:aahBB9veQfjdo
lindamueller:aalSIo0EIcNcg
leopoldo_staiano:aakUqXvhtnCVQ
ccasalsc:aa/LgzD58k6W.
bronaldo0911:aaIUjAuGIn/DM
maomao:aa6R7lA.QpeKE
qxw9908:aafcS/KiR1YnU
declandoherty24:aaABD0vKYAg1k
langhi:aa1tcajeqlzSQ
ervacca:aaFuP/TAMo.wM
o_wagner:aa9mowsQZ7Sz2
millen001:aaq.XacFpTHt6
vboy402:aaNmQEpqQpmcE
crambert:aa2mZScClIeb2
echolee76:aangyj58KGRBc
ganlixia:aag35LNzg6V.I
wangxiaodong:aaeuJ02vwZ7Ho
dmasson:aa32L2tYQPCSs
sreejavinu:aaXhcydNg8CfA
hchavan:aao4rj0WHArzc
jasonschott:aaROG2mKk0e/s
dkitsberg:aaGOWNWunvU62
nbushue:aajIZHjN8PKEw
acarozzo:aa3u6k6JJC7Yg
chenjigang007:aa6bwD212lkLs
ajelcick:aaeKTHlkKsQJg
tlaragio:aaUPWxWApEcXg
felicityl:aaFCqgz4Rz31A
arogers2r:aaZAAQxYx8RYY
thiemu:aahhYOsiS0.R2
u_tietge:aa3qhf5WnPrik
utietge:aa3qhf5WnPrik
joylincoln:aawot5WUZunRU
vmassafra:aaRY7hyY8pdLY
mdp05ooa:aa7SFbrKlhb7Y
egourant:aaLPj/LKZ138M
guodonglee:aaBIBT.yc19Xg
sara_parodi:aaHLysh15zAKU
saraparodi:aaBaLneW1AraM
maherman:aaQXefCAkyF9g
markhoro:aa/YruP6EU08E
mohanvishwa:aajfMKNH1hTm2
LloydG:aantq9ykzAPL2
smithz60:aaaq3bT8E120s
Schokokeks:aaZj920bkQ90E
tingfu1:aaNmniFeYa4mY
agonistes:aasmgdQlaH8Rw
manjulavinod:aaGLzU2uqgnWE
sunzhichaook:aaO1HeXBl4V1M
lirazl:aaWJC3S.zpLyM
tbohl12:aa7GQMMJa9DfM
reid_roberts:aaoPeYiBxgfI6
phpzs110:aa9HEpGcloN3w
oliverzolk:aacN53Ny/37jU
YoshiI:aaSuW/GpSxDFs
chanstep:aadiBGDaLmfnA
tainagaki:aamgkpoXQG7tM
rehmanau:aatQHnjLaY27.
jiangjun:aaQdq5rxrUxHY
setulk:aaoJZwqJzDCcM
enidnieuwoudt:aa37eRZPVgeqw
pesve01:aaHOpkuQrnQko
mschiffr:aaaPpc.s4fs/I
jflandrier:aa3tRzGYo93os
Franck:aandP0rTK.B1s
dhollman:aaKY6nXlfcikc
ochassan:aagZDkcnobAEk
hecaiyun:aadh1nAh8sr6.
nicoski:aa1gMapYpc/gA
anne_nies:aaVkbeB2BAmdw
mara1412:aaJG11JTjpGbo
sreejak:aamPYSxV9lOP6
schoenfe:aayini2.x9a4.
lcrisp:aaCWuuGQFan4U
ilzhuzhu:aaZpL/AVyIHxA
stmia01:aaTc4M53zsZXc
mushiro:aa7fTTW/tIZQ.
shigtana:aa3SZtQUZwA96
konishi:aay6vq/52RGfE
brara039:aaPphr44IoMp6
zhongjie:aamWmDs2B3AC6
katerina:aanzDWl65oWJg
kattouloupi:aanzDWl65oWJg
Jurosevic:aaru3VHHfHqtE
galland:aa.vefGLE23WM
chavanas:aaCAs7XPCxNPk
heemannstina:aa6W9.eeWblmg
nghonem:aaNMLgbMyWAuQ
blemaire:aa9Kzw6st6Pic
dhillonv10:aaD15LA4vFIBE
tvelenosi:aaMl/eVSWlYRI
vanikolova:aayBAHsQH182E
tremmel:aaAN1ZUwjW7to
bhattacharyasa:aa93DWFZps.Ww
SHirobe:aaf47rIOpUilk
valeria:aaeX7seYuk/7w
Eva6917510:aazs5g2hlbEDo
yanqingsmile:aaHqGp80njI0U
yanqingumich:aaHqGp80njI0U
bsalah21:aavnHfsGo.0hA
yiyima:aaciJKChg/X4U
jlsea18:aamSyQBcjQY2A
manilab:aanZ8K5oWv3U2
gexuemei:aaLICaRyYUZGU
Lauren:aaFCqgz4Rz31A
minhnam:aaAN1ZUwjW7to
taewukk90:aay/PAoXwxSOM
emoran:aaTfHdOL.Ioao
fedricagilardi:aatJNx1dMhnJw
marcusklein:aand2cPXZDYRE
mwawrzyn:aadlMMiW6vKro
waszak:aaSZDUSogVRYE
cmcginnis:aaXqWtzfw5XFg
Jaeyoung:aaoE9ev6k/gNQ
nsvanessaz:aa5s9zSUtu7s6
noemideluna:aaIPx/csYC5Cc
rallen15:aatlr7DhpS9wA
ryanallen64:aatlr7DhpS9wA
bernichtein:aaLssEiCgkJTM
lampkojo:aa0GaPxqIrT6E
nicolabo:aaNhann0J/SAY
xenopus2705:aabpy6kV.74s2
tommasomello:aaqhKqm0mAJiw
hemant281:aa2zCJFlgZh0s
Tiroides:aaP0VqsHnH5bM
TMatsubara:aax/DZeohHcaw
dukang:aabC00bvWR8SM
yxdukang:aatuICXC7d4gQ
yonglaiwande:aa3cF1yNHjchw
cliu6688:aaIq/0fYoRkUE
andy_hyh:aayX6kDLn74fU
yxdukang001:aayX6kDLn74fU
sheepthief:aaX1JCWpjvMxM
txpham88:aaPi8MGjcPBmg
Jinyoung:aa9prPcWKycMA
lucyellis:aa9zmURlcO37E
medlife:aaJpoiUQxKy2s
smarta1:aaDCVckkFIXtI
haiyanhuang:aafSU2nJytdTU
landw1:aaq8HADdD2A9I
chrisw:aaOukDKJStEMk
mlpzju:aa7G9E.ogfdAk
koalonomix:aaV/7Khan6s/w
joczos:aaPFv7GU2JDW2
kaushal:aa/6FPWrFqzfY
stef1234:aar6U9/2bnHMk
stefcarobbio:aar6U9/2bnHMk
weavlab:aauYgme5iVM1I
harmjanvos:aaYuC7pvZlXW.
asitrai:aaNJsGSqYwhD6
cstefania:aar6U9/2bnHMk
chetansharma:aaFRH0KD4zX0c
mirror:aaElDKDI15FrA
sitetest:aawZ.P1TNt3xY
peter_ziniel:aaIjW0/iCMjJQ
ravithakur:aaA2V57x15ydU
pjmalloy:aa6LDtNPTxBDw
mr_kaizhao:aaxWmPL0IU9bk
meijenchuang:aasXKjBxLIPjI
yekaixiong:aaqDiw.9DrBW6
akoppen:aaBvf4nD9YU1c
kondoshi:aaLe9Jvqo/kM6
navneet13:aadT6562eFUpQ
navneet3:aadT6562eFUpQ
jothui:aaKvqlZBT59Aw
rakeshcdri:aakOSYO7/o2aA
millat:aaKdUlHfqPcuQ
genemine:aa1NvwJ5ocJXg
alicekao:aa.1ZWhSDDui2
Chihyu:aalFA5C8bQHC2
sabine:aapyYOuFTMv5M
nagendra:aaIjHBNxCCPI6
janw1729:aaEkfZcshcVGo
jchamouton:aaMcr4ZKF4C5g
rmharev:aa/ujWn48PNU6
rpereira:aa3Qg8T8uwVo6
Sizanino:aaatpcV/REQEE
kmoberg:aahpKMkcHxdME
stefaniealbrecht:aaVi7gq6d8tyI
shenbuebin:aaOlQnEZTon8I
shenxuebin1234:aaOlQnEZTon8I
yom1001:aa1BRHW3YqPZs
shijian:aaoXc3ZdSXTlM
streubelma:aa/AWj7a0oJXg
Alexis:aauCoSkU1uASE
nloiseau:aarzEvCG8umAU
hafnerm:aa5ogAVL8quVw
divya1180:aaRp1qMTTbse2
dsoprano:aalfVo4QboM3w
FredrikH:aarfAj1j.1Vmc
bhagyaraj:aa1f6fJQ.vctA
pild1y07:aaZfp6FLp21zw
wangyatou:aaQ4kXoHaFtqc
vvlaeminck:aaV7KV0zYHacc
jiesixu:aacq0KRlYMKoo
kimfischer:aaqXiAbhAOq9k
RemaHenry:aaNJZWAW5b146
maavila:aapoDIh43Ii2Y
lakhal:aan.eJ0kXtdVw
xijunliu:aa1gCf8gBx5aM
ykseo0204:aawhQJZUaQL16
youngseo:aawhQJZUaQL16
pjmalloy1:aatwAQdpfxkfM
softbol31:aa6myVA9Wnlis
gfx1232000:aazaPXMofN6iQ
seog1322:aaAUnjy664tKk
Kichul817:aaAUnjy664tKk
Heather_Hostetler:aakeyUgJMV6FM
saranyah:aaxkHw9oY4w/6
jprouault:aaEvjMp4sR08s
vperez:aaHySEKakzzvU
LouisaJeffery:aavyLM.ZjJP7A
uchan2109:aae6RIgh.vNa2
fleshy24:aaBtJ3EYYl/So
xionghaojun:aaitTwetynkeQ
marcinbuler:aaVeGywcHxvfw
willow017:aalRkZOo8310Q
davidpertab:aaNV0z8helchE
fontanaraffaella:aaXwQ6KF8mF0s
mabasa:aaM3lO.Fnkr2s
Sabine_12:aa3D6rOOLfkig
djohng1:aaHxcLjTq1iQ2
djohng86:aaHxcLjTq1iQ2
smooney4:aaF2L69/vHF3w
heidi0509:aauhITqY1io2g
shaupt:aak9OLTyK3XdQ
dhawaloswal:aaRF8C3IhJ5p2
akhst7:aalkrYoVmB17s
SirRanzelot:aatirFftS0XPw
rashikalra:aawla1JZ5wMQg
caudama:aakKKtZg3PUIw
smandard:aaCiFhLFwmk72
Satyak:aaTEgqdY0Txs2
yandongwang:aas2N.4QTvPRQ
minranda:aa5VY0Rn.nhuY
dmathur:aaNYZO1EJwKC6
MEHULP:aa.kzHed87xTg
gurjeevsohi:aaeveMpnFTh92
virusprobe:aa/QsMeMu1Td.
subodhkumar:aaVDQP/iFyfzs
nlynnma:aamWO.IYMumYA
bernardkhoo:aa564PPn05KUw
wadahei:aaqvmG8YvKVQs
jbernal:aackM6R56rH7Q
bmorte:aaHZl1KNZkjIk
rongzhu:aahuwl0c50oCY
carlospenno:aa0oFuGynH1Hc
kdf56332:aahd6APvLZxj6
cgliniak:aatLRBnOYqEtk
pkasturi:aaT3KIh7e3.32
cj34gun:aa9TtYqR4ecZg
fter811:aaawG2Mn0phpI
xianqiong:aa3lTmJjrlWsA
yhliu1204:aacixdh3Ocfm6
fsimon:aaEqBzYZF4u7Y
alexmoise:aa2wX/.FrY6Mc
davidp76:aawrH/rSYgyNU
ajaydonepudi:aaOQjiqlsBpMw
feiyue126:aaN5qRf9fItmA
tommasoporcelli:aa0Gksn4gr0Yc
dbarettino:aaWubvhZX2lLI
smk_84:aaLdcJuce4enQ
cai11bz9685:aaOc3sFijSp8A
salvom5:aagOseHJaf.ZE
Jacklyn:aak2sg8gOrHDs
whuang:aa1T9ooBo9.Gk
isha1520:aa8Q3Kz5wPPvA
louguiyu:aaA4..6aTBq6Q
lou415:aaA4..6aTBq6Q
malgorzata:aaSdBedXrRaFM
pjensik:aagZ/3cwnWIyk
ronaldbiemann:aa5RdSPsCj4xE
mangant:aaFJ5JRp49JdQ
ROS_lover:aaqhAty.lS1ME
sdg_yanjiong:aabq7KjZhYUwc
zarina:aaYP3FHMgbSUY
wieneked:aamUBMHRo2ZaA
mati1979:aa6.mWTnG5ako
sydhg008:aaandokPBankU
pengzhou:aauVnDARevDEM
jnagai:aaUCsFi6s4nM2
jcsk88:aarj8ciBWbtFw
epoch1991:aaCj3/7x74R3E
GLudewig:aar.OFDRHp2SY
ngsersue:aaTL1VmdAkdTw
alsopde:aaxcABF5xSGDc
maihe123456789:aau.GVd6jpRKA
rondinie:aaRaT1uFxWxh6
feiyuezx126:aaN5qRf9fItmA
apechery:aae8KY1M1Iz92
szalowska:aaMgUrIDislTk
sigfbp:aaBBWmSz/eEKI
anabel:aanQyY3oAjuyY
livialen:aag10uGwSs1FA
pilargil:aalQOo6Iec4FI
EKress:aaAwoiLg/J0L.
yupanqui6:aaoTPnzQTey7c
meruvus:aaDvSmUoNb.xA
JulienG:aa7TapoXDA5Lc
ckrois:aa.OtuldJGbgI
Rebeccagu:aaIDFMT8V4b5w
cpa003:aaQ3mvYrOpZtg
MFBroekema:aathBHBaKUHIs
pw38000:aamlmJ3ZiQ7rM
yuchilee77:aaJBUiHMUwIIU
panda11885:aadnd3G3VJkrM
nhennhenxanh:aadnd3G3VJkrM
mohsen60:aaNN3X.PL2piw
Aiphan:aaLZLQC1Od/Ro
AnkeWerner:aalKMwZ14zAW6
rastbio:aaeh9V5yuFFQE
federica:aa8sa9Xkqem7w
zhourushui:aag5LZZLBwbp2
shuhua:aaYuC7pvZlXW.
lingcloud99:aa0QWu.qrU7n2
nquesnot:aaRAq..r1V7QI
lingcloud79:aa0QWu.qrU7n2
celine:aabikV88WCbDI
droege:aa0bfWXnF7.eU
superkul:aaSxrZaYVw3p.
tamaraisenegger:aaeKTQu3gk9vA
tanchekkun:aa9dnn1K8Z52M
rashik:aaf0u2mh7p4J2
Vivien:aaSycV5tMNeC2
lulatowski:aaNHi0Tn9kIIA
snowhite123:aa2ykITMp02TE
lauraohara:aadyYoaY9xuKI
MariaTedim:aazfafVGirWOc
HumairaQureshi:aarWm7MUGKdvk
leyuan711:aaiNsrUf0rLTM
judithjeske:aask/ZTbr9b0I
luohuatan:aamJr4RJ3KABg
baiya3240:aaklCW15rQNlI
alexmontagner:aa/c7s9/VpC62
mzeglinski:aa3w2IWWEeBSI
jaganv117:aahdL0uM/84sI
tiantangcaodeguoguo:aaWZuCwD0.I9c
IGFL69:aabkV/0UrU69Q
cfuerstenberger:aaptRNNgOr4pI
jasminecoc:aaoB7AxO4BAg2
tmmuljq:aa.eEV/qZacKw
jyzh1980:aakYIf.8j2mIg
liuqj246:aa1ePzbGj97oI
nizhenhong1986:aaxXRLyb0eCVc
magdamroz:aaDj8tZhkOg4U
magdalenamroz:aaDj8tZhkOg4U
arnaud_polizzi:aawtci1pnwRaQ
Huangguili:aaWOEY2gAcqE6
zhangnan:aaxmVBb39f2pU
zhwais:aa0tVK2wi4ZlY
swanzeng:aa1BRHW3YqPZs
RosalbaEscamilla:aaqozwkr0wQoc
bergalau:aaQaBYMlzQu7Q
alalonso:aaeND7GB28Ync
mzuccaro:aakXzf1Ptb2cQ
ALanglois:aaOlqrhDA5/pY
sking_pj:aaAN1ZUwjW7to
lmilne:aaQQ6zhkk3m96
mborland:aaEoBeICEmy0A
s91133068q:aaDZEmZcAoRns
cehayes:aaG2hm/XZcndg
lcrisponi:aatpmPGa5BLho
gurpreet86:aaW6qbCQNYxRM
garciae:aaUjlLrAEvfa6
mh2788:aaNAbbLFipMXs
gftNUBI:aaE4VWndvF1Fg
cflagos:aat6qt2ZiX5rg
koshaugh:aaJRNycyL4gbQ
Verena:aa44ObjBhPnpg
rajesh:aaXlQXiaLTcgs
szhan9:aaYmO2Nobe3e6
gerald1108:aaIcz2llp71Jk
dcb45ear30:aaDm.0Q8VIMNA
klapid:aai61l20JVPy2
rpoehlmann:aanaI0DszNMKI
880514cl:aaESOa1jkonj6
shendongyan_810206:aahb5ByI0aMjk
roadrunna:aaKZdzbb/1ZFo
davidbooth:aaJDHtoVgjurs
chrislid:aaa1pYqKDlckU
shishkin:aa0ok0F3Q88JU
bertrandbeucher:aa/PmULiBuP5.
fmriyuetan:aagyN1TrfmicQ
mushirobira:aaImsk3K5fDtM
claudio_damore:aa2fSRd.c86EY
ramanis:aaeM2vPZUiw4I
mning2:aapMZcfu5CaiM
scho73:aaQ0nej.OCFMY
dinamoench:aah1iujOc18JE
ValeriaHansberg:aazz1WS8VUh0g
yuanyuanli:aaDOeZItc0MDk
tlee11:aax7Ovv9Vvkng
renyou:aa0CBiEn4aF/c
drglennlobo1:aaVpLmCfsRHdw
lahoucineizem:aaQMwyUaxR85g
yuanxq:aaeh5bjA7K1NQ
valddius:aaa7RWodVwBpk
tconrads:aaj/ZAjiDeOw6
andreadinisio:aa5IZgyzQbD/c
jixiao:aaEMc0Mi3XNEw
PaulinaValadez:aa0uZsm8V0ILs
zhangyan:aa29pBmJSuyN.
AzusaOkada:aa.iLzY1RLZK.
congratulation2001:aaIVgSOd1ZcO6
bassmari:aabdrzesb83/Q
chenglihua75:aaj/K6uw7co0k
lzhneau:aaUOl/s95ath.
aebbie1123:aaOqLGFnOLNKs
atdwatson:aaxL0WsSocwHs
lzellis:aa9zmURlcO37E
raqcamp:aam9rHO8kiRYA
martinwagner:aaR5.P77r3dXM
Thieme:aa26uDtSA99rM
guolab:aa.mYCpoJHVc2
fuzi2003:aa.mYCpoJHVc2
alexzaufel:aaTegCNPp.NpY
azure727:aayXF50KfnrAg
qwertyu111:aa2mp5eL6Vzmo
awatanabe:aayxxOYStkve2
chenlu:aapHhg8qi/oMA
12zhangnan:aa6wWUA212E36
m093369:aaD9WRe6L3U2w
manabe:aaPoAvSBGo3hk
excellent:aaPkppm6sansI
vassil:aaYeU3Zz35Kvo
biopyx:aa3vhZkBQa20w
streptow:aajtKwmjWlnXY
nelee2015:aa0hqQImTvGAM
aiphan:aaLZLQC1Od/Ro
phuongbui:aapRAxKlcQSFw
mtuyen1703:aaAN1ZUwjW7to
yueshui:aaIv/pz66BdZU
Lotusxie45:aacOGykB9LjYI
yaodawei2008:aatzPEcL2r6nM
vmullin:aau0hDkaYMLHk
mpeterfy:aaFCqgz4Rz31A
b1042215:aaHbH7a1qnd.U
mei078:aaYrwb8Kv8V4g
lucianagomeza:aaF51fLvPxK6E
454333728:aaE3Ce1XP44WA
dparichy:aaX2PEWeUoRus
sorahan:aaF2Zv0QfjsIQ
sanchari12:aaQzB9D763iH.
caixinr:aaA8u6PlcNYTs
dujianlong:aac5W8M1T8PFE
keer0316:aa.yWJmsKU/To
MTYBELLA:aaNSSnmShh5ek
takakotakai:aa9Vx7vsisk8E
hamamicchi:aa.vlYz6NzZF2
JNapoli:aaL1uSR01utFE
adonepudi:aai4Dyt94GXls
amao13:aasysJ4REthso
lpcastro:aawN0rfB0eMeI
ilovelmq:aaxsgxgXoGg0c
laceyh:aagoSELs2D/7s
moomoowang:aazK/7CPk1Zi6
cindyli:aaj4miJOo9hJk
vvericly:aail07qa2Pkas
ychaek:aaKAWeJKYAZhk
ychaekim:aag4vFrHimvuU
rohdy1:aai7fI9a0VEAM
lxldandan:aaxATVKASLhDs
guojunfei:aamPC.qvXHXtU
liu1799464695:aaiFs8eE8TLxU
sjiang:aa4N5Xq/Fx1f6
taufiq:aaugxHmxbb8Ic
parksg:aapwNstznWX9.
lisa_giane:aa/AoJcirc266
rpandey3:aal.8nnCBDjho
AmandaVreeland:aaeEDVL9miMtE
singhbrijeshk:aaH17f/Dpshrc
drglennlobo2016:aaVpLmCfsRHdw
sunnjjian:aaqHK67oWvsVM
E_Cook_16:aa6T6G5f4d9og
gf999999:aaxXwPasbYRlI
tmmushxzz:aaphYA9mjzoUY
jahn_d:aaL0f4i4DvYuE
PManka:aaxk8F6.1Tlv2
samiksha:aa2WRhk5XFD6o
samkukal:aa/WEK2rL/sGM
sandeep_ougenetics:aasFn0hGVOLkc
Altaf2016:aak9mJnOo6LsI
YanjieCheng:aaOql.eqBdGf2
MerelDefour:aai7Symxb.PnQ
sriroop:aahFZ7FO8OwpU
xing454127984:aaNCU48M/RpT.
yu3399:aaZsBqbY3lWAM
xiaoei:aaQTMQVoVLiYA
vaishnavalab:aa4JSVP6PUX5U
alvin88j:aaHI3UnjPV2RM
ehrdan:aaBjdtqZd6JJg
sarada_k:aaFCqgz4Rz31A
skenterisnik:aaLBGsIviF2ek
monikajain:aaTaO4JUJ9pVA
drishti1:aaOZrxGHJ2wmw
nagata:aaFrEYATQu7b.
sgattu:aayVHvcE9oxDo
rebacca73:aa6XxEA1VqoHI
Liulab2016:aa6dHwV8JI.yY
ldc1983king:aaByfvsJXt2q6
jujilei:aaIcvYMstORaU
tsachaki:aax88U9QjbcLI
4octavio4:aaYnmRzCht39o
haynette34:aa0jlp2b3LWFk
realliuch:aasZDMp84MyWU
Katrin_Panzitt:aaczmq4FZTjz6
phannguyenhoaai:aaLZLQC1Od/Ro
mingw1986:aaE3Ce1XP44WA
jemoscovitz:aawjmGUP0EcZI
bharathiMR:aaUhA97eOnn5M
tfusalk:aaNmniFeYa4mY
csh1991:aa/IcDUcFYHFk
1185553260:aafKnvSBi2102
songc722:aaV5Sd/RQI//o
anitak:aafgqfi8NeUVg
tuyang1988:aa95b296YJeDE
tuyangzzu:aa95b296YJeDE
tkataf:aaSW1RDAOmxnw
kokspoon:aa7EbYreCCmHE
ycliu0408:aayP2PPmuhMOY
drishti:aa9gcQzpxbSh2
ElioMessi:aaHop04xRgNNE
krishna:aaz74NJrnksFw
Poppy7331:aaHgNnJOKIAa.
celiamtnez:aaddgGDKgXTpE
suandjames2016:aabECBmcVJHbI
Lotusxie:aacOGykB9LjYI
sumitkumar:aaAN1ZUwjW7to
toxicologyinrcees:aaAN1ZUwjW7to
zjq1229161582:aacnElUvVjF4E
nancyahuja:aaXo531YshYes
jiesxu1986:aaPL5W8vIMO6A
ppathak:aan2GYYSf3QZc
msundrud:aaqKJ.NS1k6p2
mmartin:aaFCqgz4Rz31A
lupehgarcia:aaRreVEM.sngU
nowafrost:aayg7DvI4fEJk
lapstogo:aaDclkthdCkyo
superanimals:aaJQ3fwq2Px7w
qindan:aaqnEtNiHVevg
snehap:aat0mGcb6jTwM
NikkhilV:aapoTqNr/AA32
purple7720:aaPsnek24PJCk
jxx002:aasifm40wAPO.
krl2004:aaPx21xVARh4o
SLatkolik:aaB4F3/0AZsAc
fightcm303:aaTf.DzjL42tk
sandeep5sep:aaBbN0zFnQM5E
Joeluc:aayH7iYhBcbFg
nubiscan16:aa5nI1ooxlvvw
CamilleMM:aau51yapRjkPY
regidacunha:aae9mE2DlqlT.
joeluchuyacastillo:aaiJqfEqhvkc6
joeluchuya:aaiJqfEqhvkc6
Anmaeu:aaBT/hKIILl5Q
johbrook:aatMxS5Vsc0Ho
Bernardo:aaqBmKL1QR1hI
Muluneh:aahd8zVkK39Gw
stryed:aakM0ZADE3.wg
stayfun:aauNHMoYHjLhk
yilinwu:aavS7ZnIBKWD6
inamik:aawkmjdrv3tkg
fxsx3521:aafY0dq6VxU1M
S150556:aa3vug6zLbQv2
AylinDMM:aaU6jetXEp7V.
Krishnakantsoni:aaylKKq9VrThM
wanxiru:aapyywh8SozQc
wangyadi:aaq0iu./RWFUM
sangonNGS:aajKK8wkmM2tE
wanxiruqiqi:aapyywh8SozQc
anasfadloun:aac76H0LmVuy.
tuyenhua:aanN5U.mDwpNg
cdnandini:aagHvF/sA9dLg
244609786yy:aa2dYeWaUKtHE
Secrament:aaHmeUGfIWK8Y
dolphinfantasy:aaNZuV4Y7fObI
Akihiro:aa2I/zjq4tjeA
matthiasgodart:aaW2Yv5BXDXoM
AtsWata:aasiHgjBp7B.c
ydniupitt:aaG6P6qm43/iA
smedwid:aaYVJjjH72vnk
alabriet:aaZwOYTaGys/g
sandipan:aayPFNyJuCCqw
kazushiimai:aaQe1/NDdnVrw
geneminer:aa1NvwJ5ocJXg
sgrundmann:aao1wjeSRk37E
ydniu7:aaG6P6qm43/iA
paolab:aa6ZEewZYZHa.
regulus:aao3xxIGaWD2w
drglennlobo:aaVpLmCfsRHdw
juanCarlos221:aaCnssutyLIdw
fneusch:aa270tsBuD3cQ
gavyek:aaffrWFy05GWM
yunqian:aaIHQLFQvt95E
Kuboyama:aaJ3v5rRTypUg
jvcdesigner:aaocJqi2UkHfc
zanelin:aandxhcKZiOfA
jcantlon:aaP0yvSs4SxNc
yongdongniu:aaG6P6qm43/iA
yanliang:aaSJRa4Nnku4c
vineethdaniel:aa4wy/fb4utaA
wenzhu:aaqnmH3.KiOSQ
Squeasy88:aaJHTNvBxAxXg
xuting:aaQXI8Ib4IfHY
Richard:aaJxLcOh0138U
academgorodok:aaEX7r7DHK2qE
kanako:aaQz2h4fS0HyU
zhangxiaopa810:aaFBFCic7ip7A
niehshuh3:aa14cWmgVnwwo
yashul12:aaVd.MtfCl1z6
guoyongchen2005:aaPx0gsBZjhb6
hgupta529:aaPW2EgMx5E66
1tasu1wa2:aa9YarBP72g2I
zhangyujuan:aakk6huFAPnWg
reinalab:aauVJQ0gJZ7ks
alexandra:aar4o.vXO7IC6
KDWagner:aafQR/gblIlio
navasri2012:aac3J/BPrWh8I
guoyongchen2017:aaPx0gsBZjhb6
ryosuke:aaAVSw7baTdrs
aarifa:aa6Q2zGuT1MRQ
xiaoxueonline:aa0yA0eWBVLl2
yoonus:aaQDXelq3fMLs
sanghyeon:aa4Pp3tqWbTlE
zhuz0609:aalxd0rvbA.KY
zhudan:aaNTMcZiO.3HU
hujingru:aaRkiG3Gf2u7.
silviainderbinen:aa2OKBdtP7nzE
244609786:aa2dYeWaUKtHE
bryanmackowiak:aaYeaiCg5ciPg
weiyydmu:aaGBOz0sw8C6A
guming:aadL1YC/WVPQ6
zhangqing123:aaH9DQhPyn9Xw
eliotblatt:aa/C8wzf7lYMA
Trista:aapxl8LhnfC3s
931767864:aauppA64n.A2.
hui1342613:aaAgCs8FA9FMU
gotomasa:aajG9C2N8/1E6
Arman2435:aa88eF59DKyBE
claude:aaX.XvukPBsRA
audjoin2:aao0ejQWK4DFU
jbogan:aaBltfsOljF/E
qinxuan:aaxguIoJKcUKA
shark1:aa/nr5SueeFUw
Vent514:aahSpMOswiL2Y
Nonaka:aaImVnVTmS4wM
yakitori0604:aa.7Qm98LADUM
tetsuya:aay/0RCPqwg2c
fightcm:aaR2KNxRrVPWM
AQJ18no:aa3CZPEIZTVjE
mmknuth:aa3OzlYukGQK.
swkullma:aaOrCW11Jv5Ro
purkinjep:aax8Y72H9Kh.k
gaizhibo:aaiM0JV0YXsbQ
KatharinaStroedecke:aae8/6hkfQrls
cbibbys:aaTr7EFJ7RHgI
Alexandra:aartWqjGa6O4U
weizhe34:aahBSBnTfeRfI
volutatsu:aaCntu/70t46s
imiller7:aadXyB1Dkr666
shivaksh2712:aapSJBBevQ7lA
addo123:aa4kPUZDGvB6s
alokjha:aaA84Ary0IbNY
krishnakantsoni:aaxjWhA9k6sQ.
15737315014:aaSt9eOR7PVGY
vinsh777:aaT/TNm.VDd6g
MWSchmid:aa91pHgzZp1h.
katjaSchaefers:aaCXnXZDN2ZJg
madil100:aa06yxtewNbPs
ndhele:aavrOKRp6uvIQ
olivieri:aaaUtWH5924Gk
gan1173:aan2DbaGwAQfg
gavinshou:aaxK/cZnFXNug
jebestman:aapyciqtoND/g
VMalagnino:aaSMS9rhHEpXA
Hejinhan:aaWpFdKtoof.2
shenyawei:aaaDlEA58WF1w
shalinigupta940:aaO43u6KbCyFM
jx10818030:aayuwloNrBhno
peaker:aa/O8.6gRRBqY
jdpardo:aaMNjCSX9riGQ
OlliWeth:aavJh.u6DbJ.c
dingding:aaU1oLXC0EGO.
yuehaixiang:aajMFQcl8pZ0E
lzhneau001:aae6cKVxXmfxQ
giorgiaguerra:aa757zBG189TA
syding:aaAx4OMH4SQrU
tnguyen10:aaMlx2oJqsV.2
franciscasalas:aaUaclso6mI6g
viviennewoo:aaCJb.H41xyR6
rbaak97:aaUa9.gD9d3tU
nciccone:aao2OgrDLa.4o
jihosuh:aanLR70JgvvXE
Mac_koe_toe:aa/jh/6DNkVW6
xgf879:aa67CAQ5Vh.oY
18zzni:aarEK4ZL3Xpqg
pghorbani:aapDqG7FXkboo
21718065:aav0Kx01IUep6
hjfolk90:aaCa4PtXUI.jU
ppsb333:aalQ40AIHAEr6
chaoqh:aaruJ4SZp7X.I
abookout1:aaJ1u2mQQoMQo
mlebras:aaL9Sl3QLcpX2
jyoti5890:aayE6EWwnueF6
deng_xiyun:aaN.AiVN4wzEY
LiangC38:aaxD3bZDwX5Zw
shalini0944:aaW4zJnS3yKqg
amatociro:aaDMT1MEOqhoo
essiezhang:aaapcgQvJl6Dk
13700888143:aaSJRa4Nnku4c
miguelhquiles:aaczBcSz2IknE
barbararenga78:aasdw7/g73jfU
luisahelguero:aajfMKNH1hTm2
bcpark:aaFCqgz4Rz31A
sanghavi:aaBqdMvTlUzLw
afougerat:aar71P5.II0LM
s169441:aaYG9XaCIM4.Y
wenzi19940325:aaUvfoE33P5bI
aohdera:aabFIp4EFSJ7.
Unison:aaneMCXaan1DA
elenagio:aaX/K7qEOENNE
MeijingLiu2019:aaS3jnM2gY3ik
liumeijing2019:aaS3jnM2gY3ik
yuezhang16:aaPzd9Hukw1n6
ylibcm:aaz3mol9oOGYU
myi2019:aaYEByAKR59Rs
premanandg16:aaB3nSOJH5K8o
yanyanxia:aazrLkfMe6wZ.
hjeong1:aax4B5bLqYLWU
lewoky7:aayOsaJHOMqWU
DeepthiV:aaI4sb9korsW.
mdemmings:aao2d0nlExyMI
sf_sf_day:aaXn4J3emjbs2
joseiglesias:aabpy6kV.74s2
sdruzak:aaQSmvuVfsEME
zhangdi1991:aaspuK1vDT62o
ZhangDi:aaspuK1vDT62o
zhangdi:aaspuK1vDT62o
mycjcaq:aaYRtOB1OGajM
sdyinluxu:aaODK4a2wF3BY
zxq_med:aagdqQl4lQ3I2
Nicoleurs:aaB/CyrolcGDo
xinningliu:aaFX7UJbLCtcY
YuanqiangliNUBIScan:aaRxtlMc2V4fM
viewmean:aabw7cDLWrkrY
Rashmi_AR:aa.ZnDVZDv3WQ
jtaylor777:aa58tOwL7z2D2
jiesixu4822:aaPL5W8vIMO6A
mboboljo:aaS9A61fwAYmc
hzc363:aacmrH1QNtK3c
brycejones:aaAaj4src0/EQ
YoYamaguchi:aaobiGlY6xm8g
Calvario56:aaEak0rLh20DI
mrohr1:aaX1MEvAR3Vqk
junhyungryu:aak9PED7tp4ts
chmyung:aao0ejQWK4DFU
mariapaulalopez:aa/CQI7rRGA9o
Kjcm22:aanl8FaLHQaSg
icsanaky:aaMn7Di2FYYp6
18yqxing:aaLujhISRMUN2
ematg27:aajXtKVgndne.
pthevkar:aaBU1hXiE4Sm.
Dvilchis:aa1K0p0M0mH5k
unicam:aaqBmKL1QR1hI
13924459425:aa2X/XCtopPvA
Kochlab:aav8cQstPxdR6
CHdelia:aaUVcj/PePPlU
s4197018:aa14cWmgVnwwo
JessicaS:aaEGp77aj5UsE
Edixon:aaGKhHDr68jCU
JBassett:aaKjy807tBuh6
vinsh7779:aam55eVX9U0sk
vin_sh777:aam55eVX9U0sk
winifer_ali:aaK8QR3.Pzr56
edixon:aaGKhHDr68jCU
Arvindew:aaikMztl7AoxU
iryouyakuzai:aaotuVxA0e6uA
theobrascher:aakAXfGiG/5WM
zrruan:aaq.pXCN8Y8AY
poornima_r:aaEZ4uuL34mlg
tanlws:aamsHFSG5aq26
trudeskirohr:aalN4ldHHC6K6
abelsoto:aa0mhPRG./7YQ
obbedio:aa3AhREIBIqdY
nazuraainaaunikl:aam5iOtMAJq0M
Huangtongling:aauyJRontk9Nw
NubiAnita:aaNqsrjZXdzLQ
Fannie:aa3H2MZBCMTOI
epta205424:aanbCWrnv5/rA
jmosokomoliki:aagn52xGd283w
Lexusmarc97:aav3IwZKnOb4U
Claire1111:aaUJ6T8oQ2dtA
IlPiotr:aa5cIGS2bUMkk
arai48:aabPiuz6BUhF6
andreaprinceton:aai/nH3moo72k
simona84:aacYRUa4vLBaE
awilso65:aamhLhm.Gyvc6
ginagallucci:aaMXyBRkeLKHg
Pabloman:aathpAHCTvsRM
seasmoke:aavZF.XmUo9GI
pprasad:aapZkcK2Fa57Y
mshimi:aaiEeO/OgOYK2
Daryl97:aac/a0Yn2FOFE
suweiming:aahAmc1OHRWkU
jaemanlee:aak7XOrgngqBM
izarbe:aaiQefb0OaCyU
yangsiyu:aaiuPSkMJqN9A
hayake5:aag37znbXPf3c
Lauracooke03:aaM8mGDBvxfTw
holgererb:aacHJSyVbbsGI
cjh9088:aarbUwCJxsyNg
tclaudel:aasBcpfSugI/M
625675767:aaojYi7zrFi46
saubamea:aaecnRnpvPbIo
KLoeffler:aaylRjs8yZjKA
mattw2022:aaubfiy9BNzlw
ikkyhuang:aa1WxLYEl8sCU
15157012931:aa.drqHZvq75g
karriekiang:aaHsNJYQflEuM
Qiyue12345:aasKpuW7yCbEU
huangchangsheng:aawysX/t9fcF2
pallolo:aa.eXCByiIySI
liurun:aaP0.J.Gabz96
saumyatakumawatsbr:aaeBVbOeF3bwU
winiferali:aaK8QR3.Pzr56
yaqi1995:aaLujhISRMUN2
fansifeng:aaK/UFEIxL8wk
LNX123:aaZIIZI57qu4A
liangliangchen:aavpCA74JP54E
museer:aaHBtwv1qKkAk
balasn01:aaMOa7BXstro2
xieguixiang98:aa/rxz5g1RoGI
shearnc:aa7zMxJn6gpiA
tanjing:aa7wFX7d4haPA
tlisse23:aaXn4J3emjbs2
bertrandmeresse:aaQK59JZHhcUI
liuliu:aaZ9THMWXPgfI
Daniel:aaZ9THMWXPgfI
Dittrich:aar1qvtTIhcS.
ellenb0000:aatNAfwKc2rKk
1352729607:aa6lvMlAiJajc
wilsonaz:aaUATDiUriNRA
TamilHema:aaO901MCER9fE
generulerz:aaYVFj3k6VsxU
felixrjr2006:aaJeSgnpKVD.E
tnguyen2023:aaeCWd.vegVzQ
dap000:aaBbgsVbrSBDs
2020hnn:aaUaQ1qCeWHGo
yanghua:aaXoEhMtTrh1E
isigkeit:aazJazOhvQwrY
carloscolflores:aaENxEwxn3K06
yiweilee:aa2DfH9dmMHP6
Vipashu:aa7EtmigyTf9Y
ohannes:aasDgNbf1N4gU
clukowic:aaRE5Rq0gElWc
G_Ravindran:aa018HDO6P2x2
LiverLab:aaBDZjVIrvd/g
Zwj2650656928:aaxCQ4tfveKTc
fanhaibo:aaXlbbttyrKAE
priyankaprajapati:aaDw67uY7ZraQ
ling112:aaeEwxTfQhAg.
Ruixin:aakDvo6TwPzMU
tanglele:aaAN1ZUwjW7to
arnaud_paul:aaIn2rAVq2VLg
ydwangbuct2009:aaVWkaTs5hYwo
tmmubio:aaf1KkQzb/4Us
xiaoyang:aaZj89I2juzPo
tmmuxzz:aa.o5i1UGBppw
amoise:aaCWpWqQKCHH.
dongniya:aa9XhQYOXLhv.
chansong:aaSWiz3e4Ocr6
malkicherkaoui:aaPxbDOZiKpAY
mcmalki:aaPxbDOZiKpAY
xdong75:aa9WNyNZNaUEU
rahulrs4:aaYsxUoU7xATI
Bottle:aaWaMykib73FA
Reenarao:aa.bV9kjYFt.k
maxiao0605:aa9XncVUvgCZw
Kurisu:aa9orHtOC7q8k
MX0605:aa9XncVUvgCZw




"
waYbWgJA,FFLAGS FOR MULTI INSTANCING,NoTextForSpeech,JSON,Thursday 12th of June 2025 06:46:39 AM CDT,"{
    ""DFFlagRenderHighlightManagerPrepare"": ""True"",
    ""FFlagRenderDynamicResolutionScale9"": ""True"",
    ""FFlagMovePrerender"": ""True"",
    ""FIntGrassMovementReducedMotionFactor"": ""0"",
    ""FFlagRenderNoLowFrmBloom"": ""False"",
    ""FFlagRenderFixFog"": ""True"",
    ""FFlagDebugCheckRenderThreading"": ""True"",
    ""FFlagRenderDebugCheckThreading2"": ""True"",
    ""FFlagDebugRenderingSetDeterministic"": ""True"",
    ""FIntRomarkStartWithGraphicQualityLevel"": ""1"",
    ""FIntRenderShadowIntensity"": ""0"",
    ""DFIntDebugFRMQualityLevelOverride"": ""1"",
    ""FIntRenderLocalLightUpdatesMax"": ""8"",
    ""FIntRenderLocalLightUpdatesMin"": ""6"",
    ""FIntRenderLocalLightFadeInMs"": ""0"",
    ""FFlagDisablePostFx"": ""True"",
    ""DFFlagDebugPauseVoxelizer"": ""True"",
    ""FFlagDebugSkyGray"": ""True"",
    ""DFIntCSGLevelOfDetailSwitchingDistance"": ""0"",
    ""DFIntCSGLevelOfDetailSwitchingDistanceL12"": ""0"",
    ""DFIntCSGLevelOfDetailSwitchingDistanceL23"": ""0"",
    ""DFIntCSGLevelOfDetailSwitchingDistanceL34"": ""0"",
    ""FFlagFastGPULightCulling3"": ""True"",
    ""DFIntMaxFrameBufferSize"": ""4"",
    ""FIntTerrainArraySliceSize"": ""4"",
    ""DFFlagTextureQualityOverrideEnabled"": ""True"",
    ""DFIntTextureQualityOverride"": ""0"",
    ""DFIntPerformanceControlTextureQualityBestUtility"": ""-1"",
    ""DFIntTextureCompositorActiveJobs"": ""0"",
    ""FIntDebugTextureManagerSkipMips"": ""8"",
    ""FIntFRMMinGrassDistance"": ""0"",
    ""FIntFRMMaxGrassDistance"": ""0"",
    ""FIntRenderGrassDetailStrands"": ""0"",
    ""FIntDebugForceMSAASamples"": ""0"",
    ""FFlagTaskSchedulerLimitTargetFpsTo2402"": ""False"",
    ""DFIntTaskSchedulerTargetFps"": ""9999"",
    ""FIntFullscreenTitleBarTriggerDelayMillis"": ""3600000"",
    ""FFlagUserShowGuiHideToggles"": ""True"",
    ""GuiHidingApiSupport2"": ""True"",
    ""FFlagAdServiceEnabled"": ""False"",
    ""FFlagDebugDisableTelemetryEphemeralCounter"": ""True"",
    ""FFlagDebugDisableTelemetryEphemeralStat"": ""True"",
    ""FFlagDebugDisableTelemetryEventIngest"": ""True"",
    ""FFlagDebugDisableTelemetryPoint"": ""True"",
    ""FFlagDebugDisableTelemetryV2Counter"": ""True"",
    ""FFlagDebugDisableTelemetryV2Event"": ""True"",
    ""FFlagDebugDisableTelemetryV2Stat"": ""True"",
    ""FFlagEnableQuickGameLaunch"": ""True"",
    ""DFIntNumAssetsMaxToPreload"": ""9999999"",
    ""DFIntAssetPreloading"": ""9999999"",
    ""DFIntAnimationLodFacsDistanceMin"": ""0"",
    ""DFIntAnimationLodFacsDistanceMax"": ""0"",
    ""DFIntAnimationLodFacsVisibilityDenominator"": ""0"",
    ""FIntCameraMaxZoomDistance"": ""9999"",
    ""FFlagVoiceBetaBadge"": ""False"",
    ""FFlagTopBarUseNewBadge"": ""False"",
    ""FFlagBetaBadgeLearnMoreLinkFormview"": ""False"",
    ""FFlagControlBetaBadgeWithGuac"": ""False"",
    ""FStringVoiceBetaBadgeLearnMoreLink"": ""null"",
     ""DFFlagTeleportClientAssetPreloadingDoingExperiment2"": ""True"",
  ""DFFlagEnableTexturePreloading"": ""True"",
  ""FFlagAdServiceEnabled"": ""False"",
  ""FFlagRenderCBRefactor2"": ""True"",
  ""FIntFRMMaxGrassDistance"": ""0"",
  ""FFlagMessageBusCallOptimization"": ""True"",
  ""FIntRenderMaxShadowAtlasUsageBeforeDownscale"": ""0"",
  ""DFFlagDebugPauseVoxelizer"": ""True"",
  ""FIntSSAOMipLevels"": ""0"",
  ""FFlagDebugDisableTelemetryPoint"": ""True"",
  ""FStringTerrainMaterialTablePre2022"": """",
  ""FIntDebugFRMOptionalMSAALevelOverride"": ""0"",
  ""FFlagVideoReportHardwareBufferMetrics"": ""True"",
  ""FIntRenderLocalLightUpdatesMax"": ""1"",
  ""FFlagUserSoundsUseRelativeVelocity2"": ""True"",
  ""DFFlagAudioUseVolumetricPanning"": ""True"",
  ""FFlagEnableInGameMenuChrome"": ""True"",
  ""FStringVoiceBetaBadgeLearnMoreLink"": ""null"",
  ""DFIntDebugRestrictGCDistance"": ""1"",
  ""FFlagUserShowGuiHideToggles"": ""True"",
  ""DFIntAnimationLodFacsVisibilityDenominator"": ""0"",
  ""FFlagVideoServiceAddHardwareCodecMetrics"": ""True"",
  ""FLogNetwork"": ""7"",
  ""FIntFullscreenTitleBarTriggerDelayMillis"": ""3600000"",
  ""DFFlagEnableMeshPreloading2"": ""True"",
  ""FFlagContentProviderPreloadHangTelemetry"": ""False"",
  ""DFIntCullFactorPixelThresholdShadowMapHighQuality"": ""2147483647"",
  ""FFlagRenderDynamicResolutionScale8"": ""True"",
  ""FFlagSimEnableDCD16"": ""True"",
  ""DFFlagClampIncomingReplicationLag"": ""True"",
  ""FIntVertexSmoothingGroupTolerance"": ""0"",
  ""DFFlagSimOptimizeSetSize"": ""True"",
  ""DFFlagDebugSkipMeshVoxelizer"": ""True"",
  ""FIntRenderShadowmapBias"": ""0"",
  ""FIntGrassMovementReducedMotionFactor"": ""0"",
  ""FFlagDebugDisableTelemetryV2Event"": ""True"",
  ""FFlagChatTranslationEnableSystemMessage"": ""False"",
  ""FIntTerrainArraySliceSize"": ""0"",
  ""FIntRenderShadowIntensity"": ""0"",
  ""DFIntMaxFrameBufferSize"": ""4"",
  ""FFlagDebugDisableTelemetryEphemeralCounter"": ""True"",
  ""FIntRenderLocalLightFadeInMs"": ""0"",
  ""FFlagRenderNoLowFrmBloom"": ""False"",
  ""DFIntTrackCountryRegionAPIHundredthsPercent"": ""10000"",
  ""DFFlagTeleportPreloadingMetrics5"": ""True"",
  ""FFlagDebugDisableTelemetryEventIngest"": ""True"",
  ""FIntDirectionalAttenuationMaxPoints"": ""0"",
  ""DFFlagSampleAndRefreshRakPing"": ""True"",
  ""FFlagLuaAppEnableFoundationColors7"": ""True"",
  ""DFIntAnimationLodFacsDistanceMax"": ""0"",
  ""DFFlagDebugPerfMode"": ""True"",
  ""DFFlagTeleportClientAssetPreloadingDoingExperiment"": ""True"",
  ""FFlagPreloadTextureItemsOption4"": ""True"",
  ""DFIntAnimationLodFacsDistanceMin"": ""0"",
  ""DFIntCanHideGuiGroupId"": ""32380007"",
  ""FIntRenderGrassDetailStrands"": ""0"",
  ""FFlagRenderLegacyShadowsQualityRefactor"": ""True"",
  ""FFlagDebugCheckRenderThreading"": ""True"",
  ""FFlagDebugDisableTelemetryV2Counter"": ""True"",
  ""FIntFRMMinGrassDistance"": ""0"",
  ""DFIntTextureQualityOverride"": ""0"",
  ""FFlagHandleAltEnterFullscreenManually"": ""False"",
  ""FFlagDebugSkyGray"": ""True"",
  ""DFFlagTeleportClientAssetPreloadingEnabledIXP2"": ""True"",
  ""FIntUnifiedLightingBlendZone"": ""0"",
  ""FFlagUserHideCharacterParticlesInFirstPerson"": ""True"",
  ""FStringGetPlayerImageDefaultTimeout"": ""1"",
  ""FFlagEnableAudioPannerFiltering"": ""True"",
  ""DFFlagTextureQualityOverrideEnabled"": ""True"",
  ""FFlagDebugDisableTelemetryEphemeralStat"": ""True"",
  ""FFlagImproveShiftLockTransition"": ""True"",
  ""FFlagFastGPULightCulling3"": ""True"",
  ""FIntUITextureMaxUpdateDepth"": ""1"",
  ""FFlagNewLightAttenuation"": ""True"",
  ""DFIntCSGLevelOfDetailSwitchingDistanceL23"": ""0"",
  ""FFlagRenderFixFog"": ""True"",
  ""FFlagDebugEnableDirectAudioOcclusion2"": ""True"",
  ""DFFlagAudioEnableVolumetricPanningForPolys"": ""True"",
  ""FFlagDebugGraphicsPreferD3D11FL10"": ""True"",
  ""FFlagDebugDisableTelemetryV2Stat"": ""True"",
  ""FFlagBetaBadgeLearnMoreLinkFormview"": ""False"",
  ""FFlagAssetPreloadingIXP"": ""True"",
  ""DFIntNumAssetsMaxToPreload"": ""2147483647"",
  ""DFFlagDebugRenderForceTechnologyVoxel"": ""True"",
  ""DFFlagEnableSoundPreloading"": ""True"",
  ""FFlagDisablePostFx"": ""True"",
  ""FFlagTaskSchedulerLimitTargetFpsTo2402"": ""False"",
  ""FFlagPreloadAllFonts"": ""True"",
  ""DFIntMemoryUtilityCurveNumSegments"": ""100"",
  ""FIntRenderLocalLightUpdatesMin"": ""1"",
  ""FIntRenderMeshOptimizeVertexBuffer"": ""1"",
  ""FFlagLuaAppLegacyInputSettingRefactor"": ""True"",
  ""DFIntMemoryUtilityCurveBaseHundrethsPercent"": ""10000"",
  ""FFlagDebugSSAOForce"": ""False"",
  ""DFIntMemoryUtilityCurveTotalMemoryReserve"": ""0"",
  ""DFFlagTeleportClientAssetPreloadingEnabledIXP"": ""True"",
  ""DFIntAssetPreloading"": ""2147483647"",
  ""FFlagVoiceBetaBadge"": ""False"",
  ""DFIntCSGLevelOfDetailSwitchingDistanceL12"": ""0"",
  ""DFIntHACDPointSampleDistApartTenths"": ""2147483647"",
  ""FIntCameraMaxZoomDistance"": ""2147483647"",
  ""FFlagDebugForceGenerateHSR"": ""True"",
  ""FFlagControlBetaBadgeWithGuac"": ""False"",
  ""DFFlagAudioEnableVolumetricPanningForMeshes"": ""True"",
  ""FFlagQuaternionPoseCorrection"": ""True"",
  ""FStringTerrainMaterialTable2022"": """",
  ""FFlagEnableInGameMenuDurationLogger"": ""False"",
  ""FFlagDebugForceFSMCPULightCulling"": ""True"",
  ""DFFlagTeleportClientAssetPreloadingEnabled9"": ""True"",
  ""DFIntCSGLevelOfDetailSwitchingDistance"": ""0"",
  ""DFIntCSGLevelOfDetailSwitchingDistanceL34"": ""0"",
  ""DFFlagRakNetUnblockSelectOnShutdownByWritingToSocket"": ""True"",
    ""DFFlagAllowRegistrationOfAnimationClipInCoreScripts"": ""true"",
    ""DFFlagAcceleratorUpdateOnPropsAndValueTimeChange"": ""true"",
    ""DFFlagRakNetDecoupleRecvAndUpdateLoopShutdown"": ""true"",
    ""DFFlagCorrectCachePolicySkipRedirectCache"": ""true"",
    ""DFFlagNextGenRepRollbackOverbudgetPackets"": ""true"",
    ""DFFlagRakNetCalculateApplicationFeedback2"": ""true"",
    ""DFFlagPhysicsMechanismCacheOptimizeAlloc"": ""true"",
    ""DFFlagReplicatorCheckReadTableCollisions"": ""true"",
    ""DFFlagAnimatorFixReplicationASANError"": ""True"",
    ""DFFlagReplicatorSeparateVarThresholds"": ""true"",
    ""DFFlagRakNetDetectRecvThreadOverload"": ""True"",
    ""DFFlagJointIrregularityOptimization"": ""true"",
    ""DFFlagSimSmoothedRunningController2"": ""true"",
    ""DFFlagGameNetFixReplicationSkipBug"": ""true"",
    ""DFFlagRakNetDisconnectNotification"": ""True"",
    ""DFFlagClampIncomingReplicationLag"": ""True"",
    ""DFFlagRakNetDetectNetUnreachable"": ""True"",
    ""DFFlagSkipReadDiskCacheRedirects"": ""true"",
    ""DFFlagDebugUpdateClientChannelA"": ""true"",
    ""DFFlagNetworkSchemaImprovements"": ""true"",
    ""DFFlagOptimizeClusterCacheAlloc"": ""true"",
    ""DFFlagAllowPropertyDefaultSkip"": ""true"",
    ""DFFlagUnifyLegacyJointGeometry"": ""true"",
    ""DFFlagRakNetUseSlidingWindow4"": ""true"",
    ""DFFlagSampleAndRefreshRakPing"": ""true"",
    ""DFFlagSkipSomePropertiesSkip"": ""true"",
    ""DFFlagMergeFakeInputEvents3"": ""true"",
    ""DFFlagSimSkipVoxelCDECMerge"": ""true"",
    ""DFFlagUpdateClientChannelA"": ""true"",
    ""DFFlagDebugPauseVoxelizer"": ""True"",
    ""DFFlagMatrixFromEulerPerf"": ""true"",
    ""DFFlagOptimizePartsInPart"": ""true"",
    ""DFFlagSimOptimizeSetSize"": ""true"",
    ""DFFlagSkipSomeProperties"": ""true"",
    ""DFFlagRakNetEnablePoll"": ""True"",

    ""DFFlagSimEnableStepPhysicsSelective"": ""false"",
    ""DFFlagDebugPrintDataPingBreakDown"": ""False"",
    ""DFFlagDebugUpdateClientChannelB"": ""false"",
    ""DFFlagCreateMeshPartAtRuntime"": ""False"",
    ""DFFlagDebugOverrideDPIScale"": ""False"",
    ""DFFlagSimEnableStepPhysics"": ""false"",
    ""DFFlagUpdateClientChannelB"": ""false"",
    ""DFFlagRakNetFixBwCollapse"": ""False"",

    ""FFlagDebugNextGenReplicatorEnabledWriteCFrameColor"": ""true"",
    ""FFlagPreComputeAcceleratorArrayForSharingTimeCurve"": ""true"",
    ""FFlagUISUseLastFrameTimeInUpdateInputSignal"": ""true"",
    ""FFlagAnimatorRetargetSkipAnkleModification"": ""true"",
    ""FFlagRenderLegacyShadowsQualityRefactor"": ""True"",
    ""FFlagUGCValidationFixResetPhysicsError"": ""true"",
    ""FFlagEnableDelayedInputForSetFavorite"": ""true"",
    ""FFlagLuaAppLegacyInputSettingRefactor"": ""true"",
    ""FFlagMouseGetPartOptimization"": ""true"",
    ""FFlagPushFrameTimeToHarmony"": ""True"",
    ""FFlagCleanUpMergedShadows2"": ""True"",
    ""FFlagFastGPULightCulling3"": ""True"",
    ""FFlagRenderClampTrailNode"": ""True"",
    ""FFlagSkipJoinedSessionLog"": ""true"",
    ""FFlagNewLightAttenuation"": ""True"",
    ""FFlagRenderCBRefactor2"": ""True"",
    ""FFlagRenderFixFog"": ""True"",

    ""FFlagHandleAltEnterFullscreenManually"": ""False"",
    ""FFlagCAP1544UseNewDataSharingRollout"": ""false"",
    ""FFlagAddGlobalShadowsToUsageMetrics"": ""false"",
    ""FFlagActivatedCountAllInputTypes"": ""False"",
    ""FFlagCAP1209EnableDataSharingUI4"": ""false"",
    ""FFlagFixSensitivityTextPrecision"": ""False"",
    ""FFlagRenderNoLowFrmBloom"": ""false"",
    ""FFlagLatencyLogging1"": ""false"",
    ""FFlagFRMRefactor"": ""false"",

    ""DFIntSignalRCoreHubConnectionDisconnectInfoHundredthsPercent"": ""10"",
    ""DFIntInterpolationFrameRotVelocityThresholdMillionth"": ""1"",
    ""DFIntRaknetBandwidthInfluxHundredthsPercentageV2"": ""10000"",
    ""DFIntThrottlingPredictionAccelerationHoldThousandth"": ""2"",
    ""DFIntTimestepArbiterAccelerationModelFactorThou"": ""50000"",
    ""DFIntTimestepArbiterAngAccelerationThresholdThou"": ""2000"",
    ""DFIntRakNetClockDriftAdjustmentPerPingMillisecond"": ""50"",
    ""DFIntInterpolationFrameVelocityThresholdMillionth"": ""1"",
    ""DFIntReplicatorDataPingReportHundredthPercentage"": ""5"",
    ""DFIntSignalRHubConnectionHeartbeatTimerRateMs"": ""1000"",
    ""DFIntExperienceSignalsIngestMaxEventsPerBatch"": ""500"",
    ""DFIntMegaReplicatorNetworkQualityProcessorUnit"": ""10"",
    ""DFIntNetworkClusterPacketCacheNumParallelTasks"": ""2"",
    ""DFIntReplicatorDataPingReportThrottleSeconds"": ""5"",
    ""DFIntSignalRHubConnectionConnectTimeoutMs"": ""7000"",
    ""DFIntPerformanceControlFrameTimeMaxUtility"": ""-1"",
    ""DFIntReplicatorDataPingReportThresholdMs"": ""5000"",
    ""DFIntClientPacketHealthyAllocationPercent"": ""20"",
    ""DFIntMaxInterpolationRecursionsBeforeCheck"": ""1"",
    ""DFIntTimeBetweenSendConnectionAttemptsMS"": ""200"",
    ""DFIntInitialAccelerationLatencyMultTenths"": ""1"",
    ""DFIntRaknetBandwidthPingSendEveryXSeconds"": ""1"",
    ""DFIntSignalRHubConnectionBaseRetryTimeMs"": ""50"",
    ""DFIntSimConstraintDataCollectionRate3"": ""36420"",
    ""DFIntVisibilityCheckRayCastLimitPerFrame"": ""10"",
    ""DFIntInterpolationNumMechanismsBatchSize"": ""1"",
    ""DFIntMaxProcessPacketsStepsPerCyclic"": ""10000"",
    ""DFIntServerBandwidthPlayerSampleRate"": ""36420"",
    ""DFIntSignalRCoreKeepAlivePingPeriodMs"": ""1000"",
    ""DFIntClientPacketMaxFrameMicroseconds"": ""500"",
    ""DFIntReplicatorJdiReportThrottlePercent"": ""0"",
    ""DFIntClientPacketExcessMicroseconds"": ""5000"",
    ""DFIntInterpolationNumMechanismsPerTask"": ""5"",
    ""DFIntMaxProcessPacketsStepsAccumulated"": ""0"",
    ""DFIntNumFramesToKeepAfterInterpolation"": ""1"",
    ""DFIntRakNetPingFrequencyMillisecond"": ""2000"",
    ""DFIntHttpBatchApi_bgRefreshMaxDelayMs"": ""1"",
    ""DFIntSignalRCoreHandshakeTimeoutMs"": ""1000"",
    ""DFIntWaitOnUpdateNetworkLoopEndedMS"": ""100"",
    ""DFIntAnimatorThrottleMaxFramesToSkip"": ""1"",
    ""DFIntLargePacketQueueSizeCutoffMB"": ""1000"",
    ""DFIntMaxProcessPacketsJobScaling"": ""10000"",
    ""DFIntNetworkSchemaCompressionRatio"": ""100"",
    ""DFIntPhysicsReceiveNumParallelTasks"": ""12"",
    ""DFIntRagdollEarlyExitTimeTenthSecond"": ""1"",
    ""DFIntSignalRHeartbeatIntervalSeconds"": ""1"",
    ""DFIntNumFramesAllowedToBeAboveError"": ""1"",
    ""DFIntPerformanceControlFrameTimeMax"": ""1"",
    ""DFIntRagdollDefaultTimerTenthSecond"": ""1"",
    ""DFIntSkipSomePropertiesPermyriad"": ""5000"",
    ""DFIntInterpolationMinAssemblyCount"": ""1"",
    ""DFIntInterpolationNumParallelTasks"": ""5"",
    ""DFIntMaxDataPacketPerSend"": ""2147483647"",
    ""DFIntSendGameServerDataMaxLen"": ""129472"",
    ""DFIntSignalRCoreHubMaxElapsedMs"": ""5000"",
    ""DFIntBufferCompressionThreshold"": ""100"",
    ""DFIntSignalRCoreHubMaxBackoffMs"": ""500"",
    ""DFIntSignalRCoreServerTimeoutMs"": ""500"",
    ""DFIntInterpolationDtLimitForLod"": ""10"",
    ""DFIntRagdollSlowEnoughToNotTenth"": ""1"",
    ""DFIntSignalRCoreRpcQueueSize"": ""16384"",
    ""DFIntCodecMaxOutgoingFrames"": ""10000"",
    ""DFIntHttpBatchApi_cacheDelayMs"": ""20"",
    ""DFIntSignalRCoreHubBaseRetryMs"": ""50"",
    ""DFIntWaitOnRecvFromLoopEndedMS"": ""10"",
    ""DFIntCodecMaxIncomingPackets"": ""100"",
    ""DFIntRakNetMtuValue1InBytes"": ""1396"",
    ""DFIntRakNetMtuValue2InBytes"": ""1396"",
    ""DFIntRakNetMtuValue3InBytes"": ""1396"",
    ""DFIntMaxAcceptableUpdateDelay"": ""1"",
    ""DFIntRakNetResendRttMultiple"": ""2"",
    ""DFIntRenderClampRoughnessMax"": ""1"",
    ""DFIntS2PhysicsSenderRate"": ""36420"",
    ""DFIntBufferCompressionLevel"": ""0"",
    ""DFIntClientPacketMaxDelayMs"": ""1"",
    ""DFIntHttpBatchApi_bgDelayMs"": ""1"",
    ""DFIntConnectionMTUSize"": ""1396"",
    ""DFIntMaxFrameBufferSize"": ""10"",
    ""DFIntSignalRCoreTimerMs"": ""50"",
    ""DFIntDataSenderRate"": ""36420"",
    ""DFIntRakNetLoopMs"": ""1"",

    ""FIntInterpolationAwareTargetTimeLerpHundredth"": ""100"",
    ""FIntCAP1544DataSharingUserRolloutPercentage"": ""0"",
    ""FIntMaxTimestepMultiplierIntegrationError"": ""4"",
    ""FIntCAP1209DataSharingRolloutPercentage"": ""0"",
    ""FIntCoordinatorPlannerStepsPerIteration"": ""8"",
    ""FIntSmoothMouseSpringFrequencyTenths"": ""200"",
    ""FIntMaxTimestepMultiplierAcceleration"": ""7"",
    ""FIntMaxTimestepMultiplierContstraint"": ""4"",
    ""FIntRakNetResendBufferArrayLength"": ""128"",
    ""FIntRuntimeMaxNumOfConditions"": ""4000000"",
    ""FIntRuntimeMaxNumOfSchedulers"": ""4000000"",
    ""FIntRuntimeMaxNumOfSemaphores"": ""4000000"",
    ""FIntMaxTimestepMultiplierHumanoid"": ""16"",
    ""FIntActivatedCountTimerMSKeyboard"": ""1"",
    ""FIntMaxTimestepMultiplierBuoyancy"": ""4"",
    ""FIntMaxTimestepMultiplierVelocity"": ""6"",
    ""FIntCAP1209DataSharingTOSVersion"": ""0"",
    ""FIntRuntimeMaxNumOfLatches"": ""4000000"",
    ""FIntRuntimeMaxNumOfMutexes"": ""4000000"",
    ""FIntRuntimeMaxNumOfThreads"": ""4000000"",
    ""FIntActivatedCountTimerMSMouse"": ""1"",
    ""FIntActivatedCountTimerMSTouch"": ""1"",
    ""FIntInterpolationMaxDelayMSec"": ""75"",
    ""FIntLuaGcParallelMinMultiTasks"": ""2"",
    ""FIntReportDeviceInfoRollout"": ""0"",
    ""FIntRenderShadowIntensity"": ""0"",
    ""FIntRenderShadowmapBias"": ""-1"",
    ""FIntRuntimeMaxNumOfDPCs"": ""64"",
    ""FIntBloomFrmCutoff"": ""-1""
}"
mSmZvsb1,.gitconfig-20250612,britodfbr,Python,Thursday 12th of June 2025 06:36:38 AM CDT,"[alias]
	co = checkout
	br = branch
	ci = commit
	st = status
	ls = log --stat
	lg = log --graph --oneline --decorate --all
	lsg = log --stat --graph
	pt = !git tag -l | xargs git tag -d && git fetch -t
	stash-unapply = !git stash show -p | git apply -R
	aliases = config --get-regexp alias
[credential ""https://git.exemple.com""]
	provider = generic
[safe]
	directory = E:/
	directory = E:/others/ojs-3-2-1-4
	directory = %(prefix)///wsl.localhost/Ubuntu/home/user/projetos
	directory = %(prefix)///wsl.localhost/Ubuntu/home/user/projetos
[user]
	name = [Your Name]
	email = [Your Email]
[http]
	sslVerify = false
[credential]
	helper = store
[gc]
	reflogExpire = 12.months.ago
[apply]
	whitespace = nowarn
[core]
	whitespace = nowarn
[color]
	diff = auto
	status = auto
	interactive = auto
	branch = auto
[status]
	short = true
"
h7H37Mk9,AudioSource across all Scenes,Kisaca121,C#,Thursday 12th of June 2025 06:19:30 AM CDT,"using System.Diagnostics;
using Unity.PlasticSCM.Editor.WebApi;
using UnityEngine;
using UnityEngine.SceneManagement;

public class Music : MonoBehaviour
{
    static Music music;
    [SerializeField] AudioClip menuLoop, gameLoop;
    [SerializeField] AudioSource audioSource;
    string lastScene = """";
    AudioClip newAudioClip = null;
    void Start()
    {
        if (music != null)
        {
            Destroy(gameObject);
        }
        else
        {
            DontDestroyOnLoad(gameObject);
            music = this;
            lastScene = SceneManager.GetActiveScene().name;
            UpdateMusic();
        }

        audioSource.Play();
    }
    void Update()
    {
        string currentScene = SceneManager.GetActiveScene().name;
        if (currentScene != lastScene)
        {
            lastScene = currentScene;
            UpdateMusic();
        }
    }

    public void UpdateMusic()
    {
        switch (SceneManager.GetActiveScene().name)
        {
            case ""Menu"":
            case ""Settings"":
                newAudioClip = menuLoop;
                break;
            case ""Level 1"":
                newAudioClip = gameLoop;
                break;
            default:
                print(""No Audio will be playing!"");
                break;
        }

        if (newAudioClip != audioSource.clip)
        {
            audioSource.clip = newAudioClip;
            audioSource.Play();
        }
    }
}
"
P27zsxx9,Count Encodings,Fastrail08,C++,Thursday 12th of June 2025 06:05:39 AM CDT,"#include <bits/stdc++.h>

using namespace std;

/*
QUESTION - https://www.youtube.com/watch?v=jFZmBQ569So&list=PL-Jc9J83PIiG8fE6rj9F5a6uyQ5WPdqKy&index=20 (Count the number of Encodings)
*/


void getEncodings(string digits, string path, vector < char > & encodings) {
    //base case
    //string is empty, which means we have processed all digits
    if (digits.empty()) {
        cout << path << '\n';
        return;
    }

    //invalid case
    //If the first char is '0', the prefixes formed by it will be invalid, i.e. '0' & ""0i""
    //eg ""04356"" => prefixes formed => oneChar = '0' & twoChar = ""04"" which are both invalid, so we can directly return
    if (digits[0] == '0') {
        return;
    }

    // levels - digits (the whole string)
    // options - the starting 2 prefixes of digits

    // one digit at a time
    int oneChar = stoi(digits.substr(0, 1));
    getEncodings(digits.substr(1), path + encodings[oneChar], encodings);

    //two digits at a time
    //we can only get a substring of 2 length if the string is atleast of length = 2
    if (digits.size() >= 2) {
        int twoChar = stoi(digits.substr(0, 2));
        //We can only have this call if twoChar corresponds to a valid encoding
        // substring of length 2, which is: 10 <= twoChar <= 26
        if (twoChar >= 10 && twoChar <= 26) {
            getEncodings(digits.substr(2), path + encodings[twoChar], encodings);
        }
    }
}

int getEncodingsMemo(string digits, vector < char > & encodings, unordered_map < string, int > & memo) {
    /*
    The only thing changing here is digits
    So we should be able to memoise the code with a single key = digits.
    Definition = memo(digits) = Number of encodings possible when string = digits.
    */
    if (digits.empty()) {
        return 1;
    }

    if (digits[0] == '0') {
        return 0;
    }

    //memo Check
    if (memo.count(digits) > 0) {
        return memo[digits];
    }

    int totalEncodingsOneChar = 0, totalEncodingsTwoChar = 0;
    //one digit at a time
    int oneChar = stoi(digits.substr(0, 1));
    totalEncodingsOneChar = getEncodingsMemo(digits.substr(1), encodings, memo);

    //two digits at a time
    if (digits.size() >= 2) {
        int twoChar = stoi(digits.substr(0, 2));
        // substring of length 2, which is: 10 <= twoChar <= 26
        if (twoChar >= 10 && twoChar <= 26) {
            totalEncodingsTwoChar = getEncodingsMemo(digits.substr(2), encodings, memo);
        }
    }
    return memo[digits] = totalEncodingsOneChar + totalEncodingsTwoChar;
}

int getEncodingsDP(string & digits) {
  /*
  Storage & Meaning - dp[i] = Number of encodings possible for strings starting at index i (upto n - 1).
  */
  int n = digits.size();
  vector<int> dp(n, 0);
   
  /*
  Direction - Smallest Problem at: dp[n - 1](string starting at index [n - 1] and ending at [n - 1])
              Largest Problem at: dp[0] (String starting at index 0, original string)
               
  */
  //edge case
  dp[n - 1] = digits[n - 1] == '0' ? 0 : 1;
   
   
  /*
  Travel & Solve - Travel from smallest to largest problem to get the answer to original problem
  */
  for(int i = n - 2; i >= 0; i--){
      if(digits[i] != '0'){
          dp[i] += dp[i + 1];
          if(i <= n - 2){
            int twoCharInt = stoi(digits.substr(i, 2));
            if(twoCharInt >= 10 && twoCharInt <= 26){
                dp[i] += i == n - 2 ? 1 : dp[i + 2];
            }
          }
      }
      
  }
  return dp[0];
}




int main() {
    // your code goes here
    string digits;
    cin >> digits;

    vector < char > encodings(27, -1);
    for (int i = 1; i <= 26; i++) {
        encodings[i] = (char)(i - 1 + 'a');
    }
    //Recursive Call with print
    //getEncodings(digits, """", encodings);

    //Memo Call
    // unordered_map < string, int > memo;
    // cout << getEncodingsMemo(digits, encodings, memo) << '\n';
    // cout << stoi(""03"") << '\n';
    //DP Call
    cout << getEncodingsDP(digits) << '\n';
}"
C0eRR9M5,dataNone,TestGuy1,JSON,Thursday 12th of June 2025 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'f76bef2b5ed7217b0e5fba4345dfd8e56c3259212ec90b270cdaf4084a50035c9ebd64f1eea988259c372d9c97fdd6be09bc35ce421253228467f84805b8f6331190bc3abd21d79810712be40669cb10d8b57d2f4a1c1050d09a24d84e26dc86cad53c66b2844a8c51ac8011a2ae97b355a0c5cf98dcc160964546c7bb31fbaa',
  otherdata: [
    'ff0994489b19ac4cf1d090bbbbd9165a',
    '058ee0a27b9ab3652295354b6a94bd2c',
    '43a971eed41ae143d761f16ae9dd4546',
    '0b26a3ac20bbe6f348b1b0b65f48dbf6',
    'e6fd5def91ef3676740c293e05cb042c',
    'ca9a8b878a959a734da5debfce84f5f7',
    '3ed97a61d20c9ae6eb8950efca05b4bc',
    'a960ac8e77c9f0c275bcc9e54ddac540'
  ]
}"
mPz5mzNg,e,artiri_art,Bash,Thursday 12th of June 2025 05:05:51 AM CDT,"#!/bin/bash

# Check if a JSON file was provided
if [ -z ""$1"" ]; then
  echo ""Usage: $0 tokens.json""
  exit 1
fi

# Clear previous token file
> data/token.txt

# Parse tokens from the JSON file and loop through them
index=1
tokens=$(jq -r '.tokens[]' ""$1"")

for token in $tokens; do
  echo ""$token"" > data/token.txt
  pm2 start bot.js --name ""Dankeventsbot$index""
  index=$((index + 1))
done"
mksAMWv7,Ragdoll System,Cakey3101,Lua,Thursday 12th of June 2025 05:02:16 AM CDT,"local Players = game:GetService(""Players"")

local function PlayerCharacterAdded(Character: Model)
	local Humanoid: Humanoid = Character:FindFirstChild(""Humanoid"")
	if not Humanoid then return end

	Humanoid.BreakJointsOnDeath = false

	Humanoid.Died:Connect(function()
		local Joints = {}

		for _, Descendant in Character:GetDescendants() do
			if Descendant:IsA(""Motor6D"") then
				table.insert(Joints, Descendant)
			end
		end

		for _, Joint in ipairs(Joints) do
			local Attachment0 = Instance.new(""Attachment"", Joint.Part0)
			local Attachment1 = Instance.new(""Attachment"", Joint.Part1)

			Attachment0.CFrame = Joint.C0
			Attachment1.CFrame = Joint.C1

			local BallSocket = Instance.new(""BallSocketConstraint"")
			BallSocket.Attachment0 = Attachment0
			BallSocket.Attachment1 = Attachment1
			BallSocket.Parent = Joint.Part0

			Joint:Destroy()
		end

		local Root = Character:FindFirstChild(""HumanoidRootPart"")
		if Root then
			Root.CanCollide = false
		end
	end)
end

Players.PlayerAdded:Connect(function(Player: Player)
	Player.CharacterAdded:Connect(function(Character: Model)
		PlayerCharacterAdded(Character)
	end)
end)"
YZGPbLzp,FirstPersonCharacter,ImAxel0,C#,Thursday 12th of June 2025 04:13:11 AM CDT,"    public class FirstPersonCharacter : MonoBehaviour
    {
        public static FirstPersonCharacter Instance { get; private set; }
        public PlayerInputManager InputManager { get; private set; }

        [SerializeField]
        private PlayerInventory _inventory;
        public PlayerInventory Inventory => _inventory;

        [Header(""Movement Settings"")]
        [SerializeField] private float _walkSpeed = 4f;
        [SerializeField] private float _backwardWalkSpeed = 2f;
        [SerializeField] private float _runSpeed = 7f;
        [SerializeField] private float _backwardRunSpeed = 4f;
        [SerializeField] private float _jumpForce = 5f;
        [SerializeField] private float _airControlMultiplier = 0.4f;

        [Header(""Ground Check Settings"")]
        [SerializeField] private Transform _groundCheck;
        [SerializeField] private float _groundDistance = 0.3f;
        [SerializeField] private LayerMask _groundMask;

        [Header(""Camera"")]
        [SerializeField] private Camera _playerCam;
        [SerializeField] private Transform _camPositionTr;
        public Transform CamPositionTr => _camPositionTr;

        private Vector2 _rawMoveInput;
        private Vector3 _moveDirection;
        private bool _jumpRequested;
        private bool _isGrounded;

        [SerializeField] private Rigidbody _rb;
        public Rigidbody Rb => _rb;

        private void Awake()
        {
            Instance = this;

            InputManager = GetComponent<PlayerInputManager>();

            if (_rb == null)
                _rb = GetComponent<Rigidbody>();

            _rb.freezeRotation = true;
        }

        private void Update()
        {
            _rawMoveInput = InputManager.MoveInput;

            Vector3 moveInput = new Vector3(_rawMoveInput.x, 0, _rawMoveInput.y).normalized;
            _moveDirection = transform.TransformDirection(moveInput);

            // Ground Check
            _isGrounded = Physics.CheckSphere(_groundCheck.position, _groundDistance, _groundMask);

            if (InputManager.Jumped && _isGrounded && _rb.velocity.y <= 0)
            {
                _jumpRequested = true;
            }
        }

        private void FixedUpdate()
        {
            // make camera follow the player
            _playerCam.transform.position = _camPositionTr.position;

            HandleMovement();
            HandleJump();
        }

        private void HandleMovement()
        {
            float speed = InputManager.Running && _isGrounded ? _runSpeed : _walkSpeed;
            if (InputManager.MoveBackward)
            {
                speed = InputManager.Running && _isGrounded ? _backwardRunSpeed : _backwardWalkSpeed;
            }

            if (_isGrounded)
            {
                Vector3 targetVelocity = _moveDirection * speed;
                Vector3 velocityChange = targetVelocity - new Vector3(_rb.velocity.x, 0, _rb.velocity.z);
                _rb.AddForce(velocityChange, ForceMode.VelocityChange);
            }
            else
            {
                Vector3 airVelocity = _airControlMultiplier * speed * _moveDirection;
                _rb.AddForce(airVelocity, ForceMode.Acceleration);
            }
        }

        private void HandleJump()
        {
            if (_jumpRequested)
            {
                _rb.velocity = new Vector3(_rb.velocity.x, 0f, _rb.velocity.z); // Reset vertical velocity
                _rb.AddForce(Vector3.up * _jumpForce, ForceMode.Impulse);
                _jumpRequested = false;
            }
        }

        private void OnDrawGizmosSelected()
        {
            if (_groundCheck == null) return;
            Gizmos.color = Color.green;
            Gizmos.DrawWireSphere(_groundCheck.position, _groundDistance);
        }
    }"
nHjehVid,CameraController,ImAxel0,C#,Thursday 12th of June 2025 04:11:18 AM CDT,"public class CameraController : MonoBehaviour
{
    private Camera _camera;
    private float _defaultFov;
    private float _currentFov;
    private float _currentTilt;
    [SerializeField] private float _fovChangeOnRun = 10f;
    [SerializeField] private float _fovLerpSpeed = 2f;
    [SerializeField] private float _fovLerpReturn = 10f;
    [SerializeField] private float _tiltLerpSpeed = 4f;
    [SerializeField] private float _tiltLerpReturn = 10f;
    [SerializeField] private float _tiltAmount = 1f;
    [SerializeField] float _bobSpeed = 14f;
    [SerializeField] float _bobAmount = 0.02f;

    private Vector2 _rawLookInput;
    private Vector2 _lookInputReady;

    [SerializeField] private float _horizSensitity;
    [SerializeField] private float _verticalSensitity;
    [SerializeField] private float _sensitivityMultiplierOnForwardRun = 0.6f;

    private float _xRotation;
    private float _yRotation;
    private float _maxVertLookDegree = 80;

    private void Start()
    {
        _camera = GetComponent<Camera>();
        _yRotation = transform.localRotation.eulerAngles.y;
        _defaultFov = _camera.fieldOfView;
        _currentFov = _camera.fieldOfView;
        Cursor.lockState = CursorLockMode.Locked;
    }

    private void Update()
    {
        var inputManager = FirstPersonCharacter.Instance.InputManager;

        _rawLookInput = inputManager.LookInput;
        _rawLookInput.x *= _horizSensitity;
        _rawLookInput.y *= _verticalSensitity;
        _lookInputReady = _rawLookInput;

        // Vertical look
        _xRotation -= _lookInputReady.y;
        _xRotation = Mathf.Clamp(_xRotation, -_maxVertLookDegree, _maxVertLookDegree);

        // Horizontal look
        _yRotation += inputManager.RunForward
            ? _lookInputReady.x * _sensitivityMultiplierOnForwardRun
            : _lookInputReady.x;

        float tilt = 0f;
        if (inputManager.MoveOblique && inputManager.Running && inputManager.MoveInput.x > 0)
        {
            tilt = _tiltAmount;
        }
        else if (inputManager.MoveOblique && inputManager.Running && inputManager.MoveInput.x < 0)
        {
            tilt = -_tiltAmount;
        }

        float tiltLerpSpeed = inputManager.MoveSideway
            ? _tiltLerpSpeed
            : _tiltLerpReturn;

        _currentTilt = Mathf.Lerp(_currentTilt, tilt, Time.deltaTime * tiltLerpSpeed);

        float lerpSpeed = inputManager.RunForward ? _fovLerpSpeed : _fovLerpReturn;
        float targetFov = inputManager.RunForward
            ? _defaultFov - _fovChangeOnRun 
            : _defaultFov;

        _currentFov = Mathf.Lerp(_currentFov, targetFov, Time.deltaTime * lerpSpeed);
        _camera.fieldOfView = _currentFov;

        UpdateHeadBob(inputManager);

        FirstPersonCharacter.Instance.transform.localRotation = Quaternion.Euler(0f, _yRotation, 0f);
        transform.localRotation = Quaternion.Euler(_xRotation, _yRotation, _currentTilt);
    }

    private void UpdateHeadBob(PlayerInputManager inputManager)
    {
        if (inputManager.MoveInput != Vector2.zero)
        {
            float waveSlice = Mathf.Sin(Time.time * _bobSpeed);
            float totalBob = waveSlice * _bobAmount;
            transform.localPosition = new Vector3(
                transform.localPosition.x,
                FirstPersonCharacter.Instance.CamPositionTr.position.y + totalBob,
                transform.localPosition.z);
        }
    }
}"
Sie0crpZ,Untitled,POdkovyrkinDaniil,C#,Thursday 12th of June 2025 03:56:24 AM CDT,"using System;

namespace System
{
    class Class
    {
        static void Main(string[] args)
        {
            int = arraySize = 30;
            int[] numbers = new int[arraySize];
            int minValueBorder = 0;
            int maxValueBorder = 15;
            Random generator = new Random();

            for (int i = 0; i < array.Length; i++)
            {
                array[i] = generator.Next(minValueBorder, maxValueBorder);
                Console.Write(numbers[i] + "" "");
            }

            Console.WriteLine();

            if (numbers[0] > numbers[1])
                Console.Write(numbers[0] + "" "");

            for (int j = 1; j < numbers.Length - 1; j++)
            {
                if (numbers[j-1] < numbers[j] && numbers[j] > numbers[j+1])
                    Console.Write(numbers[j] + "" "");
            }

            if (array[numbers.Length - 1 ] > numbers[numbers.Length - 2])
                Console.Write(numbers[numbers.Length - 1]);
        }
    }
}"
VdBekUiL,Untitled,POdkovyrkinDaniil,C#,Thursday 12th of June 2025 03:54:46 AM CDT,"using System;

namespace System
{
    class Class
    {
        static void Main(string[] args)
        {
            int = arraySize = 30;
            int[] numbers = new int[arraySize];
            int minValueBorder = 0;
            int maxValueBorder = 15;
            int maxValue = minValueBorder;
            Random generator = new Random();

            for (int i = 0; i < array.Length; i++)
            {
                array[i] = generator.Next(minValueBorder, maxValueBorder);
                Console.Write(numbers[i] + "" "");
            }

            Console.WriteLine();

            if (numbers[0] > numbers[1])
                Console.Write(numbers[0] + "" "");

            for (int j = 1; j < numbers.Length - 1; j++)
            {
                if (numbers[j-1] < numbers[j] && numbers[j] > numbers[j+1])
                    Console.Write(numbers[j] + "" "");
            }

            if (array[numbers.Length - 1 ] > numbers[numbers.Length - 2])
                Console.Write(numbers[numbers.Length - 1]);
        }
    }
}"
3rfeA2gx,Dumps,LVL23HT,CSS,Thursday 12th of June 2025 03:41:06 AM CDT,"bitcoin fake transaction vector 76
"
4Uz06xSW,BSKY JWT post w/card,Mayumi_H,PHP,Thursday 12th of June 2025 02:13:40 AM CDT,"<?php
//Text to Bluesky (with link card) sample 2025-06
//MH+ presents, visit my blog => https://sl-memo.blogspot.com/

date_default_timezone_set('Asia/Tokyo');
$UAstring = ""Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:139.0) Gecko/20100101 Firefox/139.0"";

//入力データ
$readfile = ""text_data.txt"";
//$readdata = explode(""\n"", file_get_contents($readfile));
//テスト用なので固定の配列で記述
$readdata = array(
 '001<->IMG - 3<->https://www.flickr.com/photos/153589246@N07/37182374834/<->https://live.staticflickr.com/4459/37182374834_a89ca42e10_c.jpg'
,'002<->Baby Anythings are Cute<->https://www.flickr.com/photos/dennissylvesterhurd/52852294515/<->https://live.staticflickr.com/65535/52852294515_b00fb1e17d_c.jpg'
,'003<->Labradoodle<->https://www.flickr.com/photos/195591092@N07/52064576115/<->https://live.staticflickr.com/65535/52064576115_636e0487bf_c.jpg'
,'004<->Day with Monty 1<->https://www.flickr.com/photos/ianlivesey/49847245082/<->https://live.staticflickr.com/65535/49847245082_41ca62b972_c.jpg'
);


$counter  = 0;

//Bluesky接続 (Json Web Token (JWT) 取得)
$handle   = ""**********************"";		//あなたのBluesky ID (username.bsky.social など)
$password = ""**********************"";		//あなたのBluesky パスワード

$jwt = NULL;
$connect_FLG = false;
$logfile = ""text_test.log"";
$log_FLG = false;

//Main処理
//各行毎で処理する
foreach($readdata as $lines) {
	$items = explode(""<->"", $lines);// 0=番号, 1=タイトル, 2=URL, 3=imageURL
	//画像URLの無いものは破棄
	if(!(isset($items[3])))	continue;

	if(!$connect_FLG){
		$connect_FLG = true;
		// Json Web Token (JWT) 取得
		$jwt = login($handle, $password);
	}

	//-----------------------------------------------------------------------------------------------
	//Blusky 投稿
	$title= (string)$items[1];
	$link = (string)$items[2];
	$image= (string)$items[3];
	$text = $title . "" #Flickr #PublicDomain \n"" . $link;

	$facets = [];
	//この辺の facets でのタグ付けやLink付けを丸投げでやってくれるライブラリーもあるらしい
	//Linkを付ける
    $linkStart = strpos($text, $link);
    $linkEnd   = $linkStart + strlen($link);
    $facets[] = [
            'index' => [
                'byteStart' => $linkStart,
                'byteEnd' => $linkEnd
            ],
            'features' => [
                [
                    '$type' => 'app.bsky.richtext.facet#link',
                    'uri' => $link
                ]
            ]
    ];
	//HashTagを付ける
	$tagstring = ""#Flickr"";// # を含む
    $linkStart = strpos($text, $tagstring);
    $linkEnd   = $linkStart + strlen($tagstring);
    $facets[] = [
            'index' => [
                'byteStart' => $linkStart,
                'byteEnd' => $linkEnd
            ],
            'features' => [
                [
                    '$type' => 'app.bsky.richtext.facet#tag',
                    'tag' => ""Flickr""	// # を含まない
                ]
            ]
    ];
	$tagstring = ""#PublicDomain"";// # を含む
    $linkStart = strpos($text, $tagstring);
    $linkEnd   = $linkStart + strlen($tagstring);
    $facets[] = [
            'index' => [
                'byteStart' => $linkStart,
                'byteEnd' => $linkEnd
            ],
            'features' => [
                [
                    '$type' => 'app.bsky.richtext.facet#tag',
                    'tag' => ""PublicDomain""	// # を含まない
                ]
            ]
    ];
	$record = [
        '$type' => ""app.bsky.feed.post"",
        'text' => $text,
        'createdAt' => (new DateTime())->format(""c""),
		'facets' => $facets,
	];

	//画像データ取得とUpload
	$imageUri = uploadImage($jwt, $image);

    $record['embed'] = [
	    '$type' => 'app.bsky.embed.external',
	    'external'=> [
	    	'uri' => $link,  //リンクカードのURL
	      	'title' => $title,
	      	'description' => 'Blog記事用のネタ投稿です。descriptionは省略可。titleは省略するとurlになるよ',
	      	'thumb' => $imageUri,
		],
    ];

	$response = post_w_link($handle, $jwt, $record);

	file_put_contents($logfile,print_r($response,true),$log_FLG);
	if(!$log_FLG) $log_FLG = FILE_APPEND;

	if(isset($response['validationStatus'])){
		if($response['validationStatus'] == 'valid'){
			//投稿成功
			$counter++;
		}
	}
	//-----------------------------------------------------------------------------------------------

	usleep(100000 * 3);//0.1秒 x N停止 (sleep 1秒 = usleep 1000000)
}


echo ""total : "" . (string)$counter ."" items post\n"";



/////////////////////////////////////////////////////////////////

function login($handle, $password)
{
    $ch = curl_init(""https://bsky.social/xrpc/com.atproto.server.createSession"");
    curl_setopt_array($ch, [
        CURLOPT_CONNECTTIMEOUT => 10,
        CURLOPT_SSL_VERIFYPEER => false,
        CURLOPT_RETURNTRANSFER => true,
	    CURLOPT_FOLLOWLOCATION => true,
		CURLOPT_MAXREDIRS => 1000,
		CURLOPT_COOKIEJAR  => dirname(__FILE__) . '/cookie_bsky.txt',
		CURLOPT_COOKIEFILE => dirname(__FILE__) . '/cookie_bsky.txt',
        CURLOPT_POST => true,
		CURLOPT_USERAGENT  => $GLOBALS['UAstring'],
        CURLOPT_HTTPHEADER => [
            ""Content-Type: application/json"",
        ],
        CURLOPT_POSTFIELDS => json_encode([
            ""identifier"" => $handle,
            ""password"" => $password,
        ]),
    ]);
    $response = curl_exec($ch);
	if(curl_error($ch)){
		echo ""login error : "" . curl_error($ch) . ""\n"";
		die();
	}
    curl_close($ch);
    $responseJson = json_decode($response, true);
	if(isset($responseJson[""accessJwt""])){
	    return $responseJson[""accessJwt""];
	}else{
		print_r($responseJson);
	}
}

function post_w_link($handle, $jwt, $record)
{
    $ch = curl_init(""https://bsky.social/xrpc/com.atproto.repo.createRecord"");
    curl_setopt_array($ch, [
        CURLOPT_CONNECTTIMEOUT => 10,
        CURLOPT_SSL_VERIFYPEER => false,
        CURLOPT_RETURNTRANSFER => true,
	    CURLOPT_FOLLOWLOCATION => true,
		CURLOPT_MAXREDIRS => 1000,
		CURLOPT_COOKIEJAR  => dirname(__FILE__) . '/cookie_bsky.txt',
		CURLOPT_COOKIEFILE => dirname(__FILE__) . '/cookie_bsky.txt',
        CURLOPT_POST => true,
		CURLOPT_USERAGENT  => $GLOBALS['UAstring'],
        CURLOPT_HTTPHEADER => [
            ""Content-Type: application/json"",
            ""Authorization: Bearer {$jwt}"",
        ],
        CURLOPT_POSTFIELDS => json_encode([
            ""repo"" => $handle,
            ""collection"" => ""app.bsky.feed.post"",
            ""record"" => $record,
        ]),
    ]);
    $response = curl_exec($ch);
	if(curl_error($ch)){
		echo ""post error : "" . curl_error($ch) . ""\n"";
		die();
	}
    curl_close($ch);
    $responseJson = json_decode($response, true);
    return $responseJson;
}

function uploadImage($jwt, $imagePath)
{
    $imageData = file_get_contents($imagePath);
//  $mime = mime_content_type($imagePath);
    //Flickr は形式固定なのでローカル保存しない
	//他サイト等て混在する場合は一時的にローカル環境に出力してmime_content_typeで判別
    $mime = 'image/jpeg';

    $ch = curl_init(""https://bsky.social/xrpc/com.atproto.repo.uploadBlob"");
    curl_setopt_array($ch, [
        CURLOPT_CONNECTTIMEOUT => 10,
        CURLOPT_SSL_VERIFYPEER => false,
        CURLOPT_RETURNTRANSFER => true,
		CURLOPT_MAXREDIRS => 1000,
		CURLOPT_COOKIEJAR  => dirname(__FILE__) . '/cookie_bsky.txt',
		CURLOPT_COOKIEFILE => dirname(__FILE__) . '/cookie_bsky.txt',
        CURLOPT_POST => true,
		CURLOPT_USERAGENT  => $GLOBALS['UAstring'],
        CURLOPT_HTTPHEADER => [
            ""Content-Type: $mime"",
            ""Authorization: Bearer {$jwt}"",
        ],
        CURLOPT_POSTFIELDS => $imageData,
    ]);

    $response = curl_exec($ch);
	if(curl_error($ch)){
		echo ""upload error : "" . curl_error($ch) . ""\n"";
		die();
	}
    curl_close($ch);
    $responseJson = json_decode($response, true);
    return $responseJson['blob'] ?? null;	//PHP 7.x 以降要
	/*
		３項演算の亜種
		$x ?? $y; は
		isset($x) ? $x : $y; と同じ効果です(PHP 7.x以上)
	*/
}
?>
"
DiQuC3fY,**Servo Control** rev_01,pleasedontcode,Arduino,Thursday 12th of June 2025 01:57:02 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: **Servo Control**
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2025-06-12 06:56:08

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* The LED lights up when the distance is less than */
	/* 10 and if the distance increases, the LED goes */
	/* out.The servo rotates according to the joystick. */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
#include <Servo.h>  // Including the Servo library
#include <Ultrasonic.h>  // Including the Ultrasonic library

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

// Pin definitions
#define LED_PIN 9
#define SERVO_PIN 10
#define JOYSTICK_PIN 2
#define ULTRASONIC_TRIG_PIN 3
#define ULTRASONIC_ECHO_PIN A0
#define JOYSTICK_X_PIN A1

Servo servo;  // Create a Servo object
Ultrasonic ultrasonic(ULTRASONIC_TRIG_PIN, ULTRASONIC_ECHO_PIN); // Create an Ultrasonic object

void setup(void)
{
    // put your setup code here, to run once:
    pinMode(LED_PIN, OUTPUT);
    servo.attach(SERVO_PIN);
    pinMode(JOYSTICK_PIN, INPUT);
    Serial.begin(9600);  // Initialize serial communication for debugging
}

void loop(void)
{
    // put your main code here, to run repeatedly:
    int joystickX = analogRead(JOYSTICK_X_PIN);
    int servoAngle = map(joystickX, 0, 1023, 0, 180);
    servo.write(servoAngle);

    unsigned int distance = ultrasonic.read(); // Read distance from ultrasonic sensor

    Serial.print(""Distance: "");
    Serial.println(distance);

    if (distance < 10) {
        digitalWrite(LED_PIN, HIGH);  // Turn on LED
    } else {
        digitalWrite(LED_PIN, LOW);   // Turn off LED
    }
    
    delay(100);
}

/* END CODE */"
TYYhHtz0,Untitled,sambacar,XML,Thursday 12th of June 2025 01:53:13 AM CDT,"<?xml version=""1.0"" encoding=""utf-8""?>

<!--
	Generated by e-racuni.hr

	Release number: 1006.1
	Release date: 09.06.2025
	Request URL: /H2c/API
-->

<response status=""error"">
	<error description=""H2c@2025-06-12T08:44:17:Error nr: 1 #Item2_productCode - This field is required; 
"">
	</error>
</response> [] []"
DWyFwUTE,Untitled,sambacar,XML,Thursday 12th of June 2025 01:52:34 AM CDT,"<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<request>
    <login username=""xx"" md5pass=""xx"" token=""xx""/>
    <method name=""SalesOrderCreate"">
        <parameter name=""SalesOrder"">
            <date>2025-06-12</date>
            <deliveryDate>2025-06-11</deliveryDate>
            <orderReference>1000039287</orderReference>
            <deliveryMethod>GLS dostava + POUZEĆE</deliveryMethod>
            <buyerName>Pero xx</buyerName>
            <buyerEMail>xx@gmail.com</buyerEMail>
            <buyerStreet>Ul. Tina Ujevića xx</buyerStreet>
            <buyerPostalCode>10370</buyerPostalCode>
            <buyerCity>Dugo Selo</buyerCity>
            <buyerCountry>HR</buyerCountry>
            <buyerPhone>0920000000</buyerPhone>
            <customerContactPerson/>
            <methodOfPayment>CashOnDelivery</methodOfPayment>
            <documentLanguage>Croatian</documentLanguage>
            <Address>
                <nameFirst>Pero</nameFirst>
                <nameLast>xx</nameLast>
                <organization/>
                <city>Dugo Selo</city>
                <country>HR</country>
                <postalCode>10370</postalCode>
                <street>Ul. Tina Ujevića xx</street>
                <telephone>0920000000</telephone>
                <type>Delivery</type>
            </Address>
            <Items>
                <Item>
                    <position>1</position>
                    <productCode>4813-0106</productCode>
                    <quantity>1</quantity>
                </Item>
                <Item>
                    <position>2</position>
                    <description>GLS dostava + POUZEĆE</description>
                    <quantity>1</quantity>
                    <price>6.6500</price>
                </Item>
            </Items>
        </parameter>
    </method>
</request>"
