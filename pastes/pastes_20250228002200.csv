id,title,username,language,date,content
cEZ3MBJv,2025-02-27_stats.json,rdp_snitch,JSON,Thursday 27th of February 2025 06:18:04 PM CDT,"{
  ""ip"": {
    ""82.129.226.38"": 186,
    ""137.184.144.90"": 12,
    ""173.255.227.161"": 3,
    ""146.190.33.55"": 12,
    ""103.15.222.151"": 3,
    ""205.210.31.101"": 9,
    ""104.152.52.199"": 3,
    ""187.190.60.112"": 6,
    ""183.97.131.43"": 3,
    ""147.45.112.184"": 12,
    ""185.7.214.7"": 12,
    ""80.94.95.90"": 6,
    ""198.235.24.185"": 9,
    ""193.142.146.227"": 9,
    ""185.196.220.41"": 9,
    ""157.245.104.150"": 9,
    ""198.235.24.125"": 9,
    ""148.251.86.62"": 3,
    ""74.207.233.50"": 12,
    ""45.79.210.61"": 3,
    ""152.32.156.50"": 3,
    ""88.214.25.123"": 6,
    ""45.227.254.155"": 6,
    ""92.51.2.47"": 9,
    ""68.183.128.96"": 12,
    ""134.209.79.31"": 3,
    ""143.198.116.101"": 3,
    ""109.242.78.158"": 3,
    ""205.210.31.60"": 9,
    ""107.173.219.241"": 12
  },
  ""asn"": {
    ""AS24835"": 186,
    ""AS14061"": 51,
    ""AS63949"": 18,
    ""AS149137"": 3,
    ""AS396982"": 36,
    ""AS14987"": 3,
    ""AS22884"": 6,
    ""AS4766"": 3,
    ""AS209132"": 12,
    ""AS207566"": 12,
    ""AS204428"": 6,
    ""AS208046"": 18,
    ""AS24940"": 3,
    ""AS135377"": 3,
    ""AS35042"": 6,
    ""AS267784"": 6,
    ""AS209588"": 9,
    ""AS25472"": 3,
    ""AS36352"": 12
  },
  ""isp"": {
    ""Vodafone Data - Egypt"": 186,
    ""DigitalOcean, LLC"": 51,
    ""Akamai Technologies, Inc."": 18,
    ""TAN Thanh AN International Trade Development Company Limited"": 3,
    ""Google LLC"": 36,
    ""Rethem Hosting LLC"": 3,
    ""Total Play Telecomunicaciones SA De CV"": 6,
    ""Korea Telecom"": 3,
    ""Alviva Holding Limited"": 12,
    ""Chang Way Technologies Co. Limited"": 12,
    ""SS-Net"": 6,
    ""ColocationX Ltd."": 18,
    ""Hetzner Online GmbH"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Flyservers S.A."": 15,
    ""Tellas S.A"": 3,
    ""ColoCrossing"": 12
  },
  ""org"": {
    ""Vodafone Data"": 186,
    ""DigitalOcean, LLC"": 51,
    ""Linode"": 18,
    ""TANTHANHAN"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Rethem Hosting LLC"": 3,
    ""Total Play Telecomunicaciones SA De CV"": 6,
    ""Kornet"": 3,
    ""Alviva Holding Limited"": 21,
    ""Chang Way Technologies Co. Limited"": 12,
    ""Unmanaged LTD"": 6,
    ""ColocationX Ltd"": 18,
    ""Hetzner"": 3,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""Xwin Universal LTD"": 6,
    ""Tellas S.A."": 3,
    ""New Wave NetConnect, LLC"": 12
  },
  ""regionName"": {
    ""Cairo Governorate"": 186,
    ""New Jersey"": 33,
    ""California"": 48,
    ""Hanoi"": 3,
    ""Illinois"": 3,
    ""Mexico City"": 6,
    ""Gyeonggi-do"": 3,
    ""Shefa Province"": 12,
    ""Moscow"": 21,
    ""Sofia-Capital"": 6,
    ""North Holland"": 9,
    ""Virginia"": 9,
    ""Karnataka"": 9,
    ""Saxony"": 3,
    ""Georgia"": 15,
    ""Maharashtra"": 3,
    ""Kowloon City"": 6,
    ""Vilnius"": 6,
    ""Central Macedonia"": 3,
    ""New York"": 12
  },
  ""country"": {
    ""Egypt"": 186,
    ""United States"": 120,
    ""Vietnam"": 3,
    ""Mexico"": 6,
    ""South Korea"": 3,
    ""Vanuatu"": 12,
    ""Russia"": 21,
    ""Bulgaria"": 6,
    ""The Netherlands"": 9,
    ""India"": 12,
    ""Germany"": 3,
    ""Hong Kong"": 6,
    ""Lithuania"": 6,
    ""Greece"": 3
  },
  ""account"": {
    ""hello"": 228,
    ""c30hdkuc"": 12,
    ""beio"": 12,
    ""olMrnNPJs"": 3,
    ""VWnPWD"": 3,
    ""ZismNZ"": 3,
    ""nmap"": 3,
    ""xSrEpCO"": 3,
    ""Test"": 36,
    ""Administr"": 6,
    ""FrKSPsZSb"": 3,
    ""yaaWoV"": 3,
    ""lXqAli"": 3,
    ""Domain"": 27,
    ""dSIlYvDIo"": 3,
    ""cVBHtm"": 3,
    ""AhzvvB"": 3,
    ""oywcsalf"": 12,
    ""Administrator"": 3,
    ""bh62ri2f"": 12,
    ""(empty)"": 3,
    ""pmCfXlAEt"": 3,
    ""TwpCTE"": 3,
    ""GVouDP"": 3,
    ""IocIhTg"": 3
  },
  ""keyboard"": {
    ""Unknown"": 396
  },
  ""client_build"": {
    ""Unknown"": 396
  },
  ""client_name"": {
    ""Unknown"": 396
  },
  ""ip_type"": {
    ""Unknown"": 258,
    ""hosting"": 117,
    ""proxy"": 12,
    ""hosting & proxy"": 9
  }
}"
2gPXTRis,🔥 Make $1000+ FREE SO,MegaDroid2019,JavaScript,Thursday 27th of February 2025 06:17:30 PM CDT,"
 
Guide: https://lc.cx/TdWX2V 
 
PAS #1MJDMxGkQm

"
AH5YLxib,2025-02-27_stats.json,rdp_snitch,JSON,Thursday 27th of February 2025 06:16:15 PM CDT,"{
  ""ip"": {
    ""82.129.226.38"": 124,
    ""137.184.144.90"": 8,
    ""173.255.227.161"": 2,
    ""146.190.33.55"": 8,
    ""103.15.222.151"": 2,
    ""205.210.31.101"": 6,
    ""104.152.52.199"": 2,
    ""187.190.60.112"": 4,
    ""183.97.131.43"": 2,
    ""147.45.112.184"": 8,
    ""185.7.214.7"": 8,
    ""80.94.95.90"": 4,
    ""198.235.24.185"": 6,
    ""193.142.146.227"": 6,
    ""185.196.220.41"": 6,
    ""157.245.104.150"": 6,
    ""198.235.24.125"": 6,
    ""148.251.86.62"": 2,
    ""74.207.233.50"": 8,
    ""45.79.210.61"": 2,
    ""152.32.156.50"": 2,
    ""88.214.25.123"": 4,
    ""45.227.254.155"": 4,
    ""92.51.2.47"": 6,
    ""68.183.128.96"": 8,
    ""134.209.79.31"": 2,
    ""143.198.116.101"": 2,
    ""109.242.78.158"": 2,
    ""205.210.31.60"": 6,
    ""107.173.219.241"": 8
  },
  ""asn"": {
    ""AS24835"": 124,
    ""AS14061"": 34,
    ""AS63949"": 12,
    ""AS149137"": 2,
    ""AS396982"": 24,
    ""AS14987"": 2,
    ""AS22884"": 4,
    ""AS4766"": 2,
    ""AS209132"": 8,
    ""AS207566"": 8,
    ""AS204428"": 4,
    ""AS208046"": 12,
    ""AS24940"": 2,
    ""AS135377"": 2,
    ""AS35042"": 4,
    ""AS267784"": 4,
    ""AS209588"": 6,
    ""AS25472"": 2,
    ""AS36352"": 8
  },
  ""isp"": {
    ""Vodafone Data - Egypt"": 124,
    ""DigitalOcean, LLC"": 34,
    ""Akamai Technologies, Inc."": 12,
    ""TAN Thanh AN International Trade Development Company Limited"": 2,
    ""Google LLC"": 24,
    ""Rethem Hosting LLC"": 2,
    ""Total Play Telecomunicaciones SA De CV"": 4,
    ""Korea Telecom"": 2,
    ""Alviva Holding Limited"": 8,
    ""Chang Way Technologies Co. Limited"": 8,
    ""SS-Net"": 4,
    ""ColocationX Ltd."": 12,
    ""Hetzner Online GmbH"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""NOC EMAIL: noc@one-host.net"": 4,
    ""Flyservers S.A."": 10,
    ""Tellas S.A"": 2,
    ""ColoCrossing"": 8
  },
  ""org"": {
    ""Vodafone Data"": 124,
    ""DigitalOcean, LLC"": 34,
    ""Linode"": 12,
    ""TANTHANHAN"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Rethem Hosting LLC"": 2,
    ""Total Play Telecomunicaciones SA De CV"": 4,
    ""Kornet"": 2,
    ""Alviva Holding Limited"": 14,
    ""Chang Way Technologies Co. Limited"": 8,
    ""Unmanaged LTD"": 4,
    ""ColocationX Ltd"": 12,
    ""Hetzner"": 2,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""ThinkTech Technology Industrial CO. Limited"": 4,
    ""Xwin Universal LTD"": 4,
    ""Tellas S.A."": 2,
    ""New Wave NetConnect, LLC"": 8
  },
  ""regionName"": {
    ""Cairo Governorate"": 124,
    ""New Jersey"": 22,
    ""California"": 32,
    ""Hanoi"": 2,
    ""Illinois"": 2,
    ""Mexico City"": 4,
    ""Gyeonggi-do"": 2,
    ""Shefa Province"": 8,
    ""Moscow"": 14,
    ""Sofia-Capital"": 4,
    ""North Holland"": 6,
    ""Virginia"": 6,
    ""Karnataka"": 6,
    ""Saxony"": 2,
    ""Georgia"": 10,
    ""Maharashtra"": 2,
    ""Kowloon City"": 4,
    ""Vilnius"": 4,
    ""Central Macedonia"": 2,
    ""New York"": 8
  },
  ""country"": {
    ""Egypt"": 124,
    ""United States"": 80,
    ""Vietnam"": 2,
    ""Mexico"": 4,
    ""South Korea"": 2,
    ""Vanuatu"": 8,
    ""Russia"": 14,
    ""Bulgaria"": 4,
    ""The Netherlands"": 6,
    ""India"": 8,
    ""Germany"": 2,
    ""Hong Kong"": 4,
    ""Lithuania"": 4,
    ""Greece"": 2
  },
  ""account"": {
    ""hello"": 152,
    ""c30hdkuc"": 8,
    ""beio"": 8,
    ""olMrnNPJs"": 2,
    ""VWnPWD"": 2,
    ""ZismNZ"": 2,
    ""nmap"": 2,
    ""xSrEpCO"": 2,
    ""Test"": 24,
    ""Administr"": 4,
    ""FrKSPsZSb"": 2,
    ""yaaWoV"": 2,
    ""lXqAli"": 2,
    ""Domain"": 18,
    ""dSIlYvDIo"": 2,
    ""cVBHtm"": 2,
    ""AhzvvB"": 2,
    ""oywcsalf"": 8,
    ""Administrator"": 2,
    ""bh62ri2f"": 8,
    ""(empty)"": 2,
    ""pmCfXlAEt"": 2,
    ""TwpCTE"": 2,
    ""GVouDP"": 2,
    ""IocIhTg"": 2
  },
  ""keyboard"": {
    ""Unknown"": 264
  },
  ""client_build"": {
    ""Unknown"": 264
  },
  ""client_name"": {
    ""Unknown"": 264
  },
  ""ip_type"": {
    ""Unknown"": 172,
    ""hosting"": 78,
    ""proxy"": 8,
    ""hosting & proxy"": 6
  }
}"
GVKczbLt,2025-02-27_stats.json,rdp_snitch,JSON,Thursday 27th of February 2025 06:15:09 PM CDT,"{
  ""ip"": {
    ""82.129.226.38"": 62,
    ""137.184.144.90"": 4,
    ""173.255.227.161"": 1,
    ""146.190.33.55"": 4,
    ""103.15.222.151"": 1,
    ""205.210.31.101"": 3,
    ""104.152.52.199"": 1,
    ""187.190.60.112"": 2,
    ""183.97.131.43"": 1,
    ""147.45.112.184"": 4,
    ""185.7.214.7"": 4,
    ""80.94.95.90"": 2,
    ""198.235.24.185"": 3,
    ""193.142.146.227"": 3,
    ""185.196.220.41"": 3,
    ""157.245.104.150"": 3,
    ""198.235.24.125"": 3,
    ""148.251.86.62"": 1,
    ""74.207.233.50"": 4,
    ""45.79.210.61"": 1,
    ""152.32.156.50"": 1,
    ""88.214.25.123"": 2,
    ""45.227.254.155"": 2,
    ""92.51.2.47"": 3,
    ""68.183.128.96"": 4,
    ""134.209.79.31"": 1,
    ""143.198.116.101"": 1,
    ""109.242.78.158"": 1,
    ""205.210.31.60"": 3,
    ""107.173.219.241"": 4
  },
  ""asn"": {
    ""AS24835"": 62,
    ""AS14061"": 17,
    ""AS63949"": 6,
    ""AS149137"": 1,
    ""AS396982"": 12,
    ""AS14987"": 1,
    ""AS22884"": 2,
    ""AS4766"": 1,
    ""AS209132"": 4,
    ""AS207566"": 4,
    ""AS204428"": 2,
    ""AS208046"": 6,
    ""AS24940"": 1,
    ""AS135377"": 1,
    ""AS35042"": 2,
    ""AS267784"": 2,
    ""AS209588"": 3,
    ""AS25472"": 1,
    ""AS36352"": 4
  },
  ""isp"": {
    ""Vodafone Data - Egypt"": 62,
    ""DigitalOcean, LLC"": 17,
    ""Akamai Technologies, Inc."": 6,
    ""TAN Thanh AN International Trade Development Company Limited"": 1,
    ""Google LLC"": 12,
    ""Rethem Hosting LLC"": 1,
    ""Total Play Telecomunicaciones SA De CV"": 2,
    ""Korea Telecom"": 1,
    ""Alviva Holding Limited"": 4,
    ""Chang Way Technologies Co. Limited"": 4,
    ""SS-Net"": 2,
    ""ColocationX Ltd."": 6,
    ""Hetzner Online GmbH"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""NOC EMAIL: noc@one-host.net"": 2,
    ""Flyservers S.A."": 5,
    ""Tellas S.A"": 1,
    ""ColoCrossing"": 4
  },
  ""org"": {
    ""Vodafone Data"": 62,
    ""DigitalOcean, LLC"": 17,
    ""Linode"": 6,
    ""TANTHANHAN"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Rethem Hosting LLC"": 1,
    ""Total Play Telecomunicaciones SA De CV"": 2,
    ""Kornet"": 1,
    ""Alviva Holding Limited"": 7,
    ""Chang Way Technologies Co. Limited"": 4,
    ""Unmanaged LTD"": 2,
    ""ColocationX Ltd"": 6,
    ""Hetzner"": 1,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""ThinkTech Technology Industrial CO. Limited"": 2,
    ""Xwin Universal LTD"": 2,
    ""Tellas S.A."": 1,
    ""New Wave NetConnect, LLC"": 4
  },
  ""regionName"": {
    ""Cairo Governorate"": 62,
    ""New Jersey"": 11,
    ""California"": 16,
    ""Hanoi"": 1,
    ""Illinois"": 1,
    ""Mexico City"": 2,
    ""Gyeonggi-do"": 1,
    ""Shefa Province"": 4,
    ""Moscow"": 7,
    ""Sofia-Capital"": 2,
    ""North Holland"": 3,
    ""Virginia"": 3,
    ""Karnataka"": 3,
    ""Saxony"": 1,
    ""Georgia"": 5,
    ""Maharashtra"": 1,
    ""Kowloon City"": 2,
    ""Vilnius"": 2,
    ""Central Macedonia"": 1,
    ""New York"": 4
  },
  ""country"": {
    ""Egypt"": 62,
    ""United States"": 40,
    ""Vietnam"": 1,
    ""Mexico"": 2,
    ""South Korea"": 1,
    ""Vanuatu"": 4,
    ""Russia"": 7,
    ""Bulgaria"": 2,
    ""The Netherlands"": 3,
    ""India"": 4,
    ""Germany"": 1,
    ""Hong Kong"": 2,
    ""Lithuania"": 2,
    ""Greece"": 1
  },
  ""account"": {
    ""hello"": 76,
    ""c30hdkuc"": 4,
    ""beio"": 4,
    ""olMrnNPJs"": 1,
    ""VWnPWD"": 1,
    ""ZismNZ"": 1,
    ""nmap"": 1,
    ""xSrEpCO"": 1,
    ""Test"": 12,
    ""Administr"": 2,
    ""FrKSPsZSb"": 1,
    ""yaaWoV"": 1,
    ""lXqAli"": 1,
    ""Domain"": 9,
    ""dSIlYvDIo"": 1,
    ""cVBHtm"": 1,
    ""AhzvvB"": 1,
    ""oywcsalf"": 4,
    ""Administrator"": 1,
    ""bh62ri2f"": 4,
    ""(empty)"": 1,
    ""pmCfXlAEt"": 1,
    ""TwpCTE"": 1,
    ""GVouDP"": 1,
    ""IocIhTg"": 1
  },
  ""keyboard"": {
    ""Unknown"": 132
  },
  ""client_build"": {
    ""Unknown"": 132
  },
  ""client_name"": {
    ""Unknown"": 132
  },
  ""ip_type"": {
    ""Unknown"": 86,
    ""hosting"": 39,
    ""proxy"": 4,
    ""hosting & proxy"": 3
  }
}"
fsnGrrMg,🔥 Make $500+ from APE AIRDROP 🔥,itxrxchh,JavaScript,Thursday 27th of February 2025 06:15:03 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#Bh60Z81Ioh"
XeggbcNq,ᴍᴇᴋᴜsᴍᴇᴋᴜs,jcel024,Lua,Thursday 27th of February 2025 06:11:55 PM CDT,"《7ᴅᴀʏs》VIP7D《7ᴅᴀʏs》
《ғʀᴇᴇ》nice《ғʀᴇᴇ》
《sᴏʟᴏ》ken《sᴏʟᴏ》"
LWkRmtp1,🚨 FINAL CALL - $APE AIRDROP 🚨,itxrxchh,JavaScript,Thursday 27th of February 2025 06:04:58 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#G054e8ja2U"
etsaRb5H,🔥 MAKE $1000+ FREE 77,MegaDroid2019,JavaScript,Thursday 27th of February 2025 06:00:44 PM CDT,"
 
Guide: https://lc.cx/TdWX2V 
 
PAS #Wzjw5ky0Zc

"
qDHpQ0cu,Computer Craft Strip mine Algorithm,nice_looks,Lua,Thursday 27th of February 2025 05:58:36 PM CDT,"-- Strip mining script for ComputerCraft Turtle

-- Ask user for dimensions
print(""Enter tunnel length:"")
local tunnelLength = tonumber(read()) or 50
print(""Enter strip branch spacing:"")
local stripSpacing = tonumber(read()) or 2
print(""Main tunnel size is set to 3x3 by default."")
local tunnelWidth = 3
local tunnelHeight = 3

-- Ensure the turtle has fuel
if turtle.getFuelLevel() == ""unlimited"" then
    print(""Turtle has unlimited fuel."")
elif turtle.getFuelLevel() == 0 then
    print(""Turtle needs fuel! Attempting to refuel..."")
    turtle.select(1) -- Select first slot for fuel
    if turtle.refuel(1) then
        print(""Turtle refueled successfully."")
    else
        print(""Refuel failed! Please add fuel."")
        return
    end
end

-- Function to mine in front
local function mineForward()
    while turtle.detect() do
        turtle.dig()
    end
    turtle.forward()
end

-- Function to mine upwards
local function mineUp()
    if turtle.detectUp() then turtle.digUp() end
end

-- Function to mine downwards
local function mineDown()
    if turtle.detectDown() then turtle.digDown() end
end

-- Function to check if inventory is full and return to chest
local function returnToChest()
    print(""Inventory full, returning to chest..."")
    for l = 1, tunnelLength do
        turtle.back()
    end
    turtle.turnRight()
    turtle.back()
    turtle.turnLeft()
    
    -- Dump items into chest
    for i = 2, 16 do
        turtle.select(i)
        turtle.drop()
    end
    
    print(""Returning to mine..."")
    -- Return to mining position
    turtle.turnLeft()
    turtle.forward()
    turtle.turnRight()
    for l = 1, tunnelLength do
        turtle.forward()
    end
end

-- Function to check inventory space
local function checkInventory()
    for i = 2, 16 do
        if turtle.getItemCount(i) == 0 then
            return false
        end
    end
    return true
end

-- Function to mine a 3x3 tunnel
local function mineTunnelSegment()
    -- Start in the middle-bottom of the tunnel
    mineForward()
    mineUp()
    mineDown()
    
    -- Mine left side
    turtle.turnLeft()
    mineForward()
    mineUp()
    mineDown()
    turtle.turnRight()
    
    -- Mine right side
    turtle.turnRight()
    mineForward()
    mineUp()
    mineDown()
    turtle.turnLeft()
end

-- Strip mining logic
local function stripMine()
    for l = 1, tunnelLength do
        mineTunnelSegment()
        
        -- Check inventory and return if full
        if checkInventory() then
            returnToChest()
        end
    end
end

-- Start mining
stripMine()
print(""Mining complete!"")"
GzqDbjbe,Your Bitcoin Wallet Credentials have been reset,direcsensa_56,GetText,Thursday 27th of February 2025 05:48:32 PM CDT,"Dear User
We have received a request to reset the login information for your BTC wallet. If you did not make this request, please ignore this message.
Your new login credentials are 
Username: avsetabn
Password: Ztdz4V
Ip: 87.106.162.209 on port 22 (SSH)
Regards"
rEGRaGGx,🔥 FREE 500$ GIFTCODES METHOD WK,MegaDroid2019,JavaScript,Thursday 27th of February 2025 05:43:55 PM CDT,"
 
Guide: https://lc.cx/TdWX2V 
 
PAS #OJlvqRuNKQ

"
NgRkVn3m,🚨 LAST CHANCE TO CLAIM APE COINS 🚨,yinyin99,JavaScript,Thursday 27th of February 2025 05:39:31 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#kHQSiw3LqS"
t8XaYYQP,FREE CRYPTO,yinyin99,JavaScript,Thursday 27th of February 2025 05:27:35 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#tz7VbDZrH6"
kJbAbeW6,🔥 FREE BTC METHOD T6,MegaDroid2019,JavaScript,Thursday 27th of February 2025 05:27:09 PM CDT,"
 
Guide: https://lc.cx/TdWX2V 
 
PAS #4UozIRQiWU

"
YNYVWN5z,🔥 Make $500+ from APE AIRDROP 🔥,yinyin99,JavaScript,Thursday 27th of February 2025 05:17:10 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#3noFaRWUek"
mN498eTY,🚨 FINAL CALL - $APE AIRDROP 🚨,yinyin99,JavaScript,Thursday 27th of February 2025 05:06:18 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#LXEUGz2Jev"
0CMnvvuM,🚨 LAST CHANCE TO CLAIM APE COINS 🚨,yinyin99,JavaScript,Thursday 27th of February 2025 04:56:16 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#tumSALXP9e"
f0fERwey,FREE CRYPTO,yinyin99,JavaScript,Thursday 27th of February 2025 04:46:14 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#tDD8mylEx3"
3uMnvEHz,🔥 Make $500+ from APE AIRDROP 🔥,yinyin99,JavaScript,Thursday 27th of February 2025 04:36:12 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#YQLesoCN9i"
D33SjEkD,🚨 FINAL CALL - $APE AIRDROP 🚨,yinyin99,JavaScript,Thursday 27th of February 2025 04:26:10 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#Bz9U2HVvCu"
CeEmq1Dd,🚨 LAST CHANCE TO CLAIM APE COINS 🚨,yinyin99,JavaScript,Thursday 27th of February 2025 04:16:08 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#vChHyqqRZv"
bYS8H3nM,FREE CRYPTO,yinyin99,JavaScript,Thursday 27th of February 2025 04:05:42 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#8bNexwTth7"
t9n35crS,🔥 Make $500+ from APE AIRDROP 🔥,yinyin99,JavaScript,Thursday 27th of February 2025 03:55:20 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#KrNER2otxG"
e1sm07eV,🚨 FINAL CALL - $APE AIRDROP 🚨,yinyin99,JavaScript,Thursday 27th of February 2025 03:45:15 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#wPqnf7Qw3Z"
zPmmDwRs,testDampick,Dampick,Lua,Thursday 27th of February 2025 03:42:15 PM CDT,"local ScreenGui = Instance.new(""ScreenGui"")
local Frame = Instance.new(""Frame"")
local TextBox = Instance.new(""TextBox"")
local TextButton = Instance.new(""TextButton"")
local MessageCountBox = Instance.new(""TextBox"")
local UserInputService = game:GetService(""UserInputService"")
local Label = Instance.new(""TextLabel"")

ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild(""PlayerGui"")

Frame.Parent = ScreenGui
Frame.Size = UDim2.new(0, 200, 0, 140)
Frame.Position = UDim2.new(0.5, -100, 0.5, -70)
Frame.BackgroundColor3 = Color3.fromRGB(0, 102, 204)
Frame.Active = true
Frame.Draggable = true

Label.Parent = Frame
Label.Size = UDim2.new(1, 0, 0.15, 0)
Label.Position = UDim2.new(0, 0, 0, 0)
Label.BackgroundColor3 = Color3.fromRGB(0, 51, 153)
Label.TextColor3 = Color3.fromRGB(255, 255, 255)
Label.Text = ""BY DAMPICK""

MessageCountBox.Parent = Frame
MessageCountBox.Size = UDim2.new(1, 0, 0.2, 0)
MessageCountBox.Position = UDim2.new(0, 0, 0.15, 0)
MessageCountBox.BackgroundColor3 = Color3.fromRGB(173, 216, 230)
MessageCountBox.TextColor3 = Color3.fromRGB(0, 0, 0)
MessageCountBox.Text = ""Quantity: 0""
MessageCountBox.ClearTextOnFocus = false
MessageCountBox.TextEditable = false

TextBox.Parent = Frame
TextBox.Size = UDim2.new(1, 0, 0.3, 0)
TextBox.Position = UDim2.new(0, 0, 0.35, 0)
TextBox.BackgroundColor3 = Color3.fromRGB(173, 216, 230)
TextBox.TextColor3 = Color3.fromRGB(0, 0, 0)
TextBox.PlaceholderText = ""Write the name of the fish...""

TextButton.Parent = Frame
TextButton.Size = UDim2.new(1, 0, 0.3, 0)
TextButton.Position = UDim2.new(0, 0, 0.65, 0)
TextButton.Text = ""Dupe-Fish""
TextButton.BackgroundColor3 = Color3.fromRGB(0, 51, 153)
TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)

local MessageCount = 0
TextButton.MouseButton1Click:Connect(function()
    local message = TextBox.Text
    if message ~= """" then
        MessageCount = MessageCount + 1
        MessageCountBox.Text = ""Quantity: "" .. MessageCount
        game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(""Все было сделано!"", ""All"")
        TextBox.Text = """"
    end
end)

-- Добавление возможности перемещения меню
local dragging, dragInput, dragStart, startPos
Frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = Frame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

Frame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        Frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)"
h7pehhV3,Untitled,Nicklaj,C#,Thursday 27th of February 2025 03:41:47 PM CDT,"using System.Collections.Generic;
using UnityEngine;

[System.Serializable]
public class ElementStack
{
    /// <summary>
    /// Note about the stack system: while it is called stack, the under-the-hood implementation is actually a queue.
    /// This is because the entity is limited to a certain amount of elements in their reserve, and when there are too many
    /// elements, the queue allows to easily remove the oldest element and insert the newest.
    /// </summary>
    [SerializeField] public Queue<StackItem> CurrentElementStack { get; private set; }
    [SerializeField] public int MaxStackSize { get; set; }

    ElementStack(int maxStackSize)
    {
        CurrentElementStack = new Queue<StackItem>();
        this.MaxStackSize = maxStackSize;
    }

    /// <summary>
    /// Adds specified element to the stack. If the stack is already full, the oldest element is removed.
    /// </summary>
    /// <param name=""elementType"">Type of the element to add to the stack.</param>
    public void AddElementToStack(ElementType elementType)
    {
        if (CurrentElementStack.Count == MaxStackSize)
            CurrentElementStack.Dequeue();
        CurrentElementStack.Enqueue(new StackItem(elementType, 1));
    }

    /// <summary>
    /// Returns the element at the specified index in the stack.
    /// </summary>
    /// <param name=""index"">The index of the stack to check</param>
    /// <returns>
    /// The return is a tuple that contains, as first attribute whether an Item was found at the specified index;
    /// The second parameter instead is the actual StackItem.
    /// </returns>
    public (bool IsAvailable, StackItem Item) GetElementInStack(int index)
    {
        if (index >= CurrentElementStack.Count)
            return (false, new StackItem());
        return (true, CurrentElementStack.ToArray()[index]);
    }
}

/// <summary>
/// Item that is stored in the ElementStack.
/// </summary>
public struct StackItem
{
    /// <summary>
    /// Type of the element.
    /// </summary>
    public ElementType ElementType;

    /// <summary>
    /// Quantity of the element. This is supposed to be between 0 and 1, allowing for partial usage down the road.
    /// Eg. Perk points that allow you to use half an element to cast the spell, allowing you to cast it twice with the same amount of elements.
    /// </summary>
    public float Quantity;

    public StackItem(ElementType elementType, float quantity)
    {
        ElementType = elementType;
        Quantity = quantity;
    }
}"
W1Bi19hg,🚨 LAST CHANCE TO CLAIM APE COINS 🚨,yinyin99,JavaScript,Thursday 27th of February 2025 03:34:09 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#PbQ9lu1j2K"
BWXC5ut9,clientes.js,losvilos,Python,Thursday 27th of February 2025 03:25:00 PM CDT,"document.addEventListener('DOMContentLoaded', function() {


    // Función para cargar avenidas (se mantiene sin cambios)
    function cargarAvenidas(zonaId, avenidaSelectId, avenidaSeleccionada = null) {
        let avenidaSelect = document.getElementById(avenidaSelectId);
        if (!avenidaSelect || !zonaId) return;

        avenidaSelect.innerHTML = ""<option value=''>Cargando avenidas...</option>"";

        fetch(`/get_avenidas/${zonaId}/`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Error ${response.status}: No se pudo obtener las avenidas`);
                }
                return response.json();
            })
            .then(data => {
                avenidaSelect.innerHTML = ""<option value=''>Selecciona una avenida</option>"";

                if (!data.avenidas || data.avenidas.length === 0) {
                    avenidaSelect.innerHTML = ""<option value=''>No hay avenidas disponibles</option>"";
                    return;
                }

                data.avenidas.forEach(avenida => {
                    let option = document.createElement(""option"");
                    option.value = avenida.id;
                    option.textContent = avenida.nombre;
                    if (avenidaSeleccionada && avenida.id == avenidaSeleccionada) {
                        option.selected = true;
                    }
                    avenidaSelect.appendChild(option);
                });
            })
            .catch(error => {
                console.error(""❌ Error al cargar avenidas:"", error);
                avenidaSelect.innerHTML = ""<option value=''>Error al cargar</option>"";
            });
    }

    // Eventos para cargar avenidas (se combinan los listeners repetidos)
    const zonaSelect = document.getElementById(""id_zona"");
    const editZonaSelect = document.getElementById(""edit_zona"");

    if (zonaSelect) {
        zonaSelect.addEventListener(""change"", function () {
            let zonaId = this.value;
            console.log("" Cargando avenidas para la zona seleccionada:"", zonaId);
            cargarAvenidas(zonaId, ""id_avenida"");
        });
    }

    if (editZonaSelect) {
        editZonaSelect.addEventListener(""change"", function () {
            let zonaId = this.value;
            console.log("" Cargando avenidas para zona en edición:"", zonaId);
            cargarAvenidas(zonaId, ""edit_avenida"");
        });
    }

// --- EDICIÓN DE CLIENTE ---
document.querySelectorAll("".btn-editar"").forEach(button => {
    button.addEventListener(""click"", function () {
        let clienteId = this.getAttribute(""data-id"");

        fetch(`/clientes/${clienteId}/`, { method: ""GET"" })
        .then(response => {
            if (!response.ok) {
                throw new Error(`Error ${response.status}: No se pudo obtener la información del cliente.`);
            }
            return response.json();
        })
        .then(data => {
            console.log(""Datos recibidos del cliente:"", data);

            // Llenar los campos del formulario de edición
            document.getElementById(""edit_id"").value = data.id;
            document.getElementById(""edit_documento"").value = data.documento;
            document.getElementById(""edit_nombre"").value = data.nombre;
            document.getElementById(""edit_apellido_paterno"").value = data.apellido_paterno;
            document.getElementById(""edit_apellido_materno"").value = data.apellido_materno;
            document.getElementById(""edit_fecha_nacimiento"").value = data.fecha_nacimiento;
            document.getElementById(""edit_sexo"").value = data.sexo;
            document.getElementById(""edit_telefono"").value = data.telefono;
            document.getElementById(""edit_email"").value = data.email;

            // Cargar la dirección, zona y avenida desde el array ""direcciones""
            if (data.direcciones && data.direcciones.length > 0) {
                document.getElementById(""edit_direccion"").value = data.direcciones[0].direccion;
                document.getElementById(""edit_zona"").value = data.direcciones[0].zona_id || """";
                // Si tienes la función cargarAvenidas, la llamas para actualizar el select de avenidas:
                cargarAvenidas(data.direcciones[0].zona_id, ""edit_avenida"", data.direcciones[0].avenida_id);
            } else {
                document.getElementById(""edit_direccion"").value = """";
                document.getElementById(""edit_zona"").value = """";
                document.getElementById(""edit_avenida"").value = """";
            }

            // Manejo del campo 'edit_estatus' (cambiar esta línea)
            const estatusElement = document.getElementById(""edit_estatus"");
            if (estatusElement) {
                console.log(""Elemento 'edit_estatus' encontrado."");
                estatusElement.value = data.estatus ? ""1"" : ""0""; // Establecer el valor del <select>
            } else {
                console.error(""El elemento 'edit_estatus' no fue encontrado."");
            }

            // Mostrar el modal de edición
            $(""#modalEditarCliente"").modal(""show"");

            // Configurar el submit del formulario de edición
            const formEditarCliente = document.getElementById('formEditarCliente');
            formEditarCliente.action = `/clientes/${clienteId}/`; // URL correcta

            formEditarCliente.onsubmit = function(event) {
                event.preventDefault();
                const formData = new FormData(formEditarCliente);

                fetch(formEditarCliente.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => {throw new Error(err.error || `Error ${response.status}: No se pudo guardar los cambios del cliente.`)});
                    }
                    return response.json();
                })
                .then(data => {
                    console.log(""Respuesta del servidor:"", data);
                    $('#modalEditarCliente').modal('hide');
                    Swal.fire(""Éxito"", data.mensaje, ""success"").then(() => {
                        window.location.reload();
                    });
                })
                .catch(error => {
                    console.error(""Error al guardar los cambios del cliente:"", error);
                    Swal.fire(""Error"", error.message, ""error"");
                });
            };
        })
        .catch(error => {
            console.error(""Error al obtener datos del cliente:"", error);
            Swal.fire(""Error"", error.message, ""error"");
        });
    });
});


    

function editarCliente(clienteId) {
    // Nota: Asegúrate de tener definida ""formData"" si la usas aquí; 
    // de lo contrario, si lo usas sólo en el submit del modal, elimina esta línea.
    fetch(`/clientes/${clienteId}/`, { // URL corregida
        method: 'POST',
        body: formData, // Asegúrate de definir ""formData"" si es necesario o elimínalo
        headers: {
          'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value
        }
      })
    .then(response => {
        if (!response.ok) {
            return response.json().then(err => {throw new Error(err.error || `Error ${response.status}: No se pudo obtener la información del cliente.`)});
        }
        return response.json();
    })
    .then(data => {
        console.log(""Datos recibidos del cliente:"", data);

        document.getElementById(""edit_documento"").value = data.documento;
        document.getElementById(""edit_nombre"").value = data.nombre;
        document.getElementById(""edit_apellido_paterno"").value = data.apellido_paterno;
        document.getElementById(""edit_apellido_materno"").value = data.apellido_materno;
        document.getElementById(""edit_fecha_nacimiento"").value = data.fecha_nacimiento;
        document.getElementById(""edit_sexo"").value = data.sexo;
        document.getElementById(""edit_telefono"").value = data.telefono;
        document.getElementById(""edit_email"").value = data.email;
        
        // Reemplazamos la antigua asignación de data.direccion por la lectura del array ""direcciones""
        if (data.direcciones && data.direcciones.length > 0) {
            document.getElementById(""edit_direccion"").value = data.direcciones[0].direccion;
            // Asumiendo que tu vista ahora incluye zona_id y avenida_id en cada dirección
            document.getElementById(""edit_zona"").value = data.direcciones[0].zona_id || """";
            document.getElementById(""edit_avenida"").value = data.direcciones[0].avenida_id || """";
        } else {
            document.getElementById(""edit_direccion"").value = """";
            document.getElementById(""edit_zona"").value = """";
            document.getElementById(""edit_avenida"").value = """";
        }

        // Manejo de data.estatus (si es numérico)
        const editEstatusCheckbox = document.getElementById(""edit_estatus"");
        if (typeof data.estatus === 'number') {
            editEstatusCheckbox.checked = data.estatus === 1;
        } else {
            editEstatusCheckbox.checked = data.estatus;
        }

        const formEditarCliente = document.getElementById('formEditarCliente');
        formEditarCliente.action = `/clientes/${clienteId}/`; // URL corregida

        formEditarCliente.onsubmit = function(event) {
            event.preventDefault();
            const formData = new FormData(formEditarCliente);
            fetch(formEditarCliente.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value
                }
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => {throw new Error(err.error || `Error ${response.status}: No se pudo guardar los cambios del cliente.`)});
                }
                return response.json();
            })
            .then(data => {
                console.log(""Respuesta del servidor:"", data);
                $('#modalEditarCliente').modal('hide');
                window.location.reload();
                Swal.fire(""Éxito"", data.message, ""success"");
            })
            .catch(error => {
                console.error(""Error al guardar los cambios del cliente:"", error);
                Swal.fire(""Error"", error.message, ""error"");
            });
        };

        $('#modalEditarCliente').modal('show');
    })
    .catch(error => {
        console.error(""Error al obtener datos del cliente:"", error);
        Swal.fire(""Error"", error.message, ""error"");
    });
}

    
    
   // --- ELIMINACIÓN DE CLIENTE ---
   document.querySelectorAll("".btn-eliminar"").forEach(btn => {
    btn.addEventListener(""click"", async function () {
        let clienteId = this.getAttribute(""data-id"");

        Swal.fire({
            title: ""¿Estás seguro?"",
            text: ""Esta acción no se puede deshacer."",
            icon: ""warning"",
            showCancelButton: true,
            confirmButtonColor: ""#d33"",
            cancelButtonColor: ""#3085d6"",
            confirmButtonText: ""Sí, eliminar"",
            cancelButtonText: ""Cancelar""
        }).then(async (result) => {
            if (result.isConfirmed) {
                try {
                    let response = await fetch(`/clientes/eliminar/${clienteId}/`, {
                        method: ""DELETE""
                    });

                    let data = await response.json();

                    if (response.ok) {
                        Swal.fire(""Eliminado"", ""El cliente ha sido eliminado."", ""success"");

                        //  Eliminar fila de la tabla sin recargar la página
                        let fila = document.querySelector(`tr[data-id=""${clienteId}""]`);
                        if (fila) {
                            fila.remove();
                        }
                    } else {
                        Swal.fire(""Error"", ""No se pudo eliminar el cliente."", ""error"");
                    }
                } catch (error) {
                    console.error(""❌ Error en la solicitud:"", error);
                    Swal.fire(""Error"", ""No se pudo eliminar el cliente."", ""error"");
                }
            }
        });
    });
});
    


document.addEventListener(""DOMContentLoaded"", function () {
    const formNuevoCliente = document.getElementById(""formNuevoCliente"");

    if (formNuevoCliente) {
        formNuevoCliente.addEventListener(""submit"", async function (event) {
            event.preventDefault(); // Evita el envío tradicional del formulario

            try {
                // Mostrar un indicador de carga
                Swal.fire({
                    title: ""Procesando..."",
                    html: ""Por favor, espere."",
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    },
                });

                // Crear un FormData con los datos del formulario
                const formData = new FormData(this);

                // Enviar la solicitud al servidor
                const response = await fetch(""/clientes/agregar/"", {
                    method: ""POST"",
                    body: formData,
                    headers: {
                        ""X-CSRFToken"": ""{{ csrf_token }}"", // Asegúrate de incluir el token CSRF
                    },
                });

                // Verificar si la respuesta es exitosa
                if (response.ok) {
                    const data = await response.json();

                    // Mostrar mensaje de éxito
                    Swal.fire({
                        icon: ""success"",
                        title: ""Éxito"",
                        text: data.mensaje || ""Cliente agregado correctamente."",
                    }).then(() => {
                        // Construir la nueva fila para la tabla
                        const nuevaFila = `
                            <tr data-id=""${data.id}"">
                                <td class=""documento"">${data.documento}</td>
                                <td class=""nombre"">${data.nombre} ${data.apellido_paterno} ${
                            data.apellido_materno || """"
                        }</td>
                                <td class=""telefono"">${data.telefono}</td>
                                <td class=""email"">${data.email || """"}</td>
                                <td>
                                    <span class=""badge estatus ${
                                        data.estatus ? ""bg-success"" : ""bg-danger""
                                    }"">
                                        ${data.estatus ? ""Activo"" : ""Inactivo""}
                                    </span>
                                </td>
                                <td>
                                    <a class=""btn btn-sm btn-primary"" href=""/clientes/${data.id}/"">Ver detalle</a>
                                    <button class=""btn btn-info btn-sm btn-editar"" data-id=""${data.id}"">
                                        <i class=""fa fa-edit""></i> Editar
                                    </button>
                                    <button class=""btn btn-danger btn-sm btn-eliminar"" data-id=""${data.id}"">
                                        <i class=""fa fa-trash""></i> Eliminar
                                    </button>
                                </td>
                            </tr>
                        `;

                        // Insertar la nueva fila en la tabla
                        document.querySelector(""table tbody"").insertAdjacentHTML(""beforeend"", nuevaFila);

                        // Cerrar el modal y limpiar el formulario
                        $(""#modalAgregarCliente"").modal(""hide"");
                        formNuevoCliente.reset();

                        // Enfocar un elemento visible (opcional)
                        document.querySelector(""body"").focus();
                    });
                } else {
                    // Manejar errores de la respuesta
                    const errorData = await response.json();
                    const errorMessage =
                        errorData.error || errorData.message || ""No se pudo agregar el cliente."";
                    Swal.fire({
                        icon: ""error"",
                        title: ""Error"",
                        text: errorMessage,
                    });
                }
            } catch (error) {
                // Manejar errores inesperados
                console.error(""❌ Error en la solicitud:"", error);
                Swal.fire({
                    icon: ""error"",
                    title: ""Error"",
                    text: ""Ocurrió un error inesperado. Por favor, inténtalo de nuevo."",
                });
            }
        });
    } else {
        console.error(""El formulario 'formNuevoCliente' no fue encontrado."");
    }
});





});"
zHs2M8Qs,FREE CRYPTO,yinyin99,JavaScript,Thursday 27th of February 2025 03:22:50 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#hgws9WCtGo"
Ncqi3Nuz,views,losvilos,Python,Thursday 27th of February 2025 03:22:13 PM CDT,"from django.contrib import messages
from django.views.decorators.http import require_http_methods
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required, user_passes_test
from django.http import HttpResponse, JsonResponse, HttpResponseNotAllowed
from django.shortcuts import get_object_or_404, render, redirect
from django.views.decorators.csrf import csrf_exempt
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import random, json
import traceback  # Importa traceback una sola vez
from .models import Cliente, Contrato, Servicio, Usuario, Rol, Empleado, Zona, Avenida, Direccion # Importa todos los modelos en una línea
from .forms import ClienteForm, ContratoForm # Importa los formularios
from django.core.paginator import Paginator
from django.db.models import Q  # Importa Q para consultas OR
from .forms import ContratoForm










def login_view(request):
    if request.method == ""POST"":
        username = request.POST['username']
        password = request.POST['password']
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            return redirect('dashboard')  # Redirigir al dashboard si el login es exitoso
        else:
            messages.error(request, ""Usuario o contraseña incorrectos"")
    return render(request, 'usuarios/login.html')

def logout_view(request):
    logout(request)
    return redirect('login')  # Redirigir al login después de cerrar sesión

@login_required
def dashboard(request):
    return render(request, 'usuarios/dashboard.html')

### CRUD USUARIOS ###

@login_required
def lista_usuarios(request):
    usuarios = Usuario.objects.all()
    roles = Rol.objects.all()  # ✅ Asegurar que los roles estén disponibles en la plantilla
    return render(request, 'usuarios/lista_usuarios.html', {'usuarios': usuarios, 'roles': roles})

@login_required
def editar_usuario(request, user_id):
    usuario = get_object_or_404(Usuario, id=user_id)

    if request.method == 'POST':
        usuario.username = request.POST['username']
        usuario.first_name = request.POST['first_name']
        usuario.last_name = request.POST['last_name']
        usuario.email = request.POST['email']
        usuario.rol_id = request.POST.get('rol')
        usuario.estatus = 'estatus' in request.POST  # Checkbox activo/inactivo
        usuario.save()
        messages.success(request, ""Usuario actualizado correctamente."")
        return redirect('lista_usuarios')

    roles = Rol.objects.all()
    return render(request, 'usuarios/editar_usuario.html', {'usuario': usuario, 'roles': roles})

@login_required
def eliminar_usuario(request, user_id):
    usuario = get_object_or_404(Usuario, id=user_id)
    usuario.delete()
    messages.success(request, ""Usuario eliminado correctamente."")
    return redirect('lista_usuarios')

@login_required
def crear_usuario(request):
    if request.method == ""POST"":
        username = request.POST.get('username').strip()
        first_name = request.POST.get('first_name').strip()
        last_name = request.POST.get('last_name').strip()
        email = request.POST.get('email').strip()
        password = request.POST.get('password')
        rol_id = request.POST.get('rol')

        # Validar que no haya campos vacíos
        if not username or not first_name or not last_name or not email or not password or not rol_id:
            messages.error(request, ""Todos los campos son obligatorios."")
            return redirect('lista_usuarios')

        # Validar si el usuario ya existe
        if Usuario.objects.filter(username=username).exists():
            messages.error(request, ""El nombre de usuario ya está en uso."")
            return redirect('lista_usuarios')

        # Verificar si el rol existe en la base de datos
        try:
            rol = Rol.objects.get(id=rol_id)
        except Rol.DoesNotExist:
            messages.error(request, ""El rol seleccionado no es válido."")
            return redirect('lista_usuarios')

        # Crear usuario y cifrar la contraseña
        nuevo_usuario = Usuario(
            username=username,
            first_name=first_name,
            last_name=last_name,
            email=email,
            rol=rol
        )
        nuevo_usuario.set_password(password)  # 🔐 Cifra la contraseña
        nuevo_usuario.save()

        messages.success(request, f""Usuario '{username}' creado correctamente."")
        return redirect('lista_usuarios')

    # Si el método no es POST, regresar la lista de usuarios
    usuarios = Usuario.objects.all()
    roles = Rol.objects.all()
    return render(request, 'usuarios/lista_usuarios.html', {'usuarios': usuarios, 'roles': roles})


### CRUD EMPLEADOS ###

@login_required
def lista_empleados(request):
    empleados = Empleado.objects.all()
    return render(request, 'usuarios/lista_empleados.html', {'empleados': empleados})

@login_required
def crear_empleado(request):
    if request.method == ""POST"":
        nombre = request.POST['nombre']
        apellido = request.POST['apellido']
        dni = request.POST['dni']
        rol_id = request.POST.get('rol')
        rol = Rol.objects.get(id=rol_id)

        Empleado.objects.create(nombre=nombre, apellido=apellido, dni=dni, rol=rol)
        messages.success(request, ""Empleado agregado correctamente."")
        return redirect('lista_empleados')

    roles = Rol.objects.all()
    return render(request, 'usuarios/crear_empleado.html', {'roles': roles})

@login_required
def editar_empleado(request, emp_id):
    empleado = get_object_or_404(Empleado, id=emp_id)

    if request.method == ""POST"":
        empleado.nombre = request.POST['nombre']
        empleado.apellido = request.POST['apellido']
        empleado.dni = request.POST['dni']
        empleado.rol_id = request.POST.get('rol')
        empleado.save()
        messages.success(request, ""Empleado actualizado correctamente."")
        return redirect('lista_empleados')

    roles = Rol.objects.all()
    return render(request, 'usuarios/editar_empleado.html', {'empleado': empleado, 'roles': roles})

@login_required
def eliminar_empleado(request, emp_id):
    empleado = get_object_or_404(Empleado, id=emp_id)
    empleado.delete()
    messages.success(request, ""Empleado eliminado correctamente."")
    return redirect('lista_empleados')

### CRUD ROLES ###

@login_required
def lista_roles(request):
    roles = Rol.objects.all()
    return render(request, 'usuarios/lista_roles.html', {'roles': roles})

@login_required
def crear_rol(request):
    if request.method == ""POST"":
        nombre = request.POST['nombre']
        Rol.objects.create(nombre=nombre)
        messages.success(request, ""Rol creado correctamente."")
        return redirect('lista_roles')

    return render(request, 'usuarios/crear_rol.html')

@login_required
def editar_rol(request, rol_id):
    rol = get_object_or_404(Rol, id=rol_id)

    if request.method == ""POST"":
        rol.nombre = request.POST['nombre']
        rol.save()
        messages.success(request, ""Rol actualizado correctamente."")
        return redirect('lista_roles')

    return render(request, 'usuarios/editar_rol.html', {'rol': rol})

@login_required
def eliminar_rol(request, rol_id):
    rol = get_object_or_404(Rol, id=rol_id)
    rol.delete()
    messages.success(request, ""Rol eliminado correctamente."")
    return redirect('lista_roles')



@login_required
def editar_usuario(request, user_id):
    usuario = get_object_or_404(Usuario, id=user_id)

    if request.method == ""POST"":
        usuario.username = request.POST.get('username').strip()
        usuario.first_name = request.POST.get('first_name').strip()
        usuario.last_name = request.POST.get('last_name').strip()
        usuario.email = request.POST.get('email').strip()
        rol_id = request.POST.get('rol')
        usuario.estatus = 'estatus' in request.POST  # Checkbox para activar/desactivar usuario

        # Validar si el usuario ya existe con otro ID
        if Usuario.objects.exclude(id=user_id).filter(username=usuario.username).exists():
            messages.error(request, ""El nombre de usuario ya está en uso por otro usuario."")
            return redirect('lista_usuarios')

        # Verificar si el rol existe
        try:
            usuario.rol = Rol.objects.get(id=rol_id)
        except Rol.DoesNotExist:
            messages.error(request, ""El rol seleccionado no es válido."")
            return redirect('lista_usuarios')

        usuario.save()
        messages.success(request, f""Usuario '{usuario.username}' actualizado correctamente."")
        return redirect('lista_usuarios')

    roles = Rol.objects.all()
    return render(request, 'usuarios/editar_usuario.html', {'usuario': usuario, 'roles': roles})


@login_required
def eliminar_usuario(request, user_id):
    usuario = get_object_or_404(Usuario, id=user_id)
    usuario.delete()
    messages.success(request, f""Usuario '{usuario.username}' eliminado correctamente."")
    return redirect('lista_usuarios')



# Función para verificar si el usuario es administrador
def es_admin(user):
    return user.is_authenticated and user.is_superuser

### RESTRINGIR VISTAS A ADMINISTRADORES ###

@login_required
@user_passes_test(es_admin, login_url='/dashboard/')  # Redirigir si no es admin
def lista_usuarios(request):
    usuarios = Usuario.objects.all()
    roles = Rol.objects.all()
    return render(request, 'usuarios/lista_usuarios.html', {'usuarios': usuarios, 'roles': roles})

@login_required
@user_passes_test(es_admin, login_url='/dashboard/')
def crear_usuario(request):
    if request.method == ""POST"":
        username = request.POST.get('username').strip()
        first_name = request.POST.get('first_name').strip()
        last_name = request.POST.get('last_name').strip()
        email = request.POST.get('email').strip()
        password = request.POST.get('password')
        rol_id = request.POST.get('rol')

        if Usuario.objects.filter(username=username).exists():
            messages.error(request, ""El nombre de usuario ya está en uso."")
            return redirect('lista_usuarios')

        try:
            rol = Rol.objects.get(id=rol_id)
        except Rol.DoesNotExist:
            messages.error(request, ""El rol seleccionado no es válido."")
            return redirect('lista_usuarios')

        nuevo_usuario = Usuario(
            username=username,
            first_name=first_name,
            last_name=last_name,
            email=email,
            rol=rol
        )
        nuevo_usuario.set_password(password)
        nuevo_usuario.save()

        messages.success(request, f""Usuario '{username}' creado correctamente."")
        return redirect('lista_usuarios')

    return redirect('lista_usuarios')

@login_required
@user_passes_test(es_admin, login_url='/dashboard/')
def eliminar_usuario(request, user_id):
    usuario = get_object_or_404(Usuario, id=user_id)
    usuario.delete()
    messages.success(request, f""Usuario '{usuario.username}' eliminado correctamente."")
    return redirect('lista_usuarios')

@login_required
@user_passes_test(es_admin, login_url='/dashboard/')
def lista_roles(request):
    roles = Rol.objects.all()
    return render(request, 'usuarios/lista_roles.html', {'roles': roles})

@login_required
@user_passes_test(es_admin, login_url='/dashboard/')
def crear_rol(request):
    if request.method == ""POST"":
        nombre = request.POST['nombre']
        Rol.objects.create(nombre=nombre)
        messages.success(request, ""Rol creado correctamente."")
        return redirect('lista_roles')

    return render(request, 'usuarios/crear_rol.html')

@login_required
@user_passes_test(es_admin, login_url='/dashboard/')
def eliminar_rol(request, rol_id):
    rol = get_object_or_404(Rol, id=rol_id)
    rol.delete()
    messages.success(request, ""Rol eliminado correctamente."")
    return redirect('lista_roles')


def lista_zonas(request):
    zonas = Zona.objects.all()
    return render(request, ""usuarios/lista_zonas.html"", {""zonas"": zonas})

def crear_zona(request):
    if request.method == ""POST"":
        nombre = request.POST[""nombre""]
        Zona.objects.create(nombre=nombre)
        messages.success(request, ""Zona creada correctamente."")
        return redirect(""lista_zonas"")
    return redirect(""lista_zonas"")

def editar_zona(request, zona_id):
    zona = get_object_or_404(Zona, id=zona_id)
    if request.method == ""POST"":
        zona.nombre = request.POST[""nombre""]
        zona.save()
        messages.success(request, ""Zona actualizada correctamente."")
        return redirect(""lista_zonas"")
    return redirect(""lista_zonas"")

def eliminar_zona(request, zona_id):
    zona = get_object_or_404(Zona, id=zona_id)
    zona.delete()
    messages.success(request, ""Zona eliminada correctamente."")
    return redirect(""lista_zonas"")


def lista_avenidas(request):
    avenidas = Avenida.objects.select_related(""zona"").order_by(""zona_id"")
    zonas = Zona.objects.all()  # Enviar zonas al template para el formulario

    return render(request, ""usuarios/lista_avenidas.html"", {""avenidas"": avenidas, ""zonas"": zonas})


def crear_avenida(request):
    if request.method == ""POST"":
        nombre = request.POST[""nombre""]
        zona_id = request.POST[""zona""]
        zona = get_object_or_404(Zona, id=zona_id)
        Avenida.objects.create(nombre=nombre, zona=zona)
        messages.success(request, ""Avenida creada correctamente."")
        return redirect(""lista_avenidas"")
    return redirect(""lista_avenidas"")

def editar_avenida(request, avenida_id):
    avenida = get_object_or_404(Avenida, id=avenida_id)
    if request.method == ""POST"":
        avenida.nombre = request.POST[""nombre""]
        zona_id = request.POST[""zona""]
        avenida.zona = get_object_or_404(Zona, id=zona_id)
        avenida.save()
        messages.success(request, ""Avenida actualizada correctamente."")
        return redirect(""lista_avenidas"")
    return redirect(""lista_avenidas"")

def eliminar_avenida(request, avenida_id):
    avenida = get_object_or_404(Avenida, id=avenida_id)
    avenida.delete()
    messages.success(request, ""Avenida eliminada correctamente."")
    return redirect(""lista_avenidas"")

def lista_clientes(request):
    clientes_list = Cliente.objects.all().order_by('id')

    query = request.GET.get('q')  # Obtiene el término de búsqueda del formulario

    if query:
        # Filtra clientes por nombre, documento o cualquier otro campo que desees
        clientes_list = clientes_list.filter(
            Q(nombre__icontains=query) | Q(documento__icontains=query)
        )

    paginator = Paginator(clientes_list, 6)
    page_number = request.GET.get('page')
    clientes = paginator.get_page(page_number)

    zonas = Zona.objects.all()
    return render(request, 'usuarios/lista_clientes.html', {'clientes': clientes, 'zonas': zonas})



from django.http import JsonResponse
from .models import Cliente, Direccion, Zona, Avenida

def registrar_cliente(request):
    """""" Registra un nuevo cliente y su dirección """"""
    if request.method == ""POST"":
        try:
            # Capturar datos del formulario
            nombre = request.POST.get(""nombre"")
            apellido_paterno = request.POST.get(""apellido_paterno"")
            apellido_materno = request.POST.get(""apellido_materno"")
            documento = request.POST.get(""documento"")
            telefono = request.POST.get(""telefono"")
            email = request.POST.get(""email"", """")
            fecha_nacimiento = request.POST.get(""fecha_nacimiento"")
            sexo = request.POST.get(""sexo"")
            zona_id = request.POST.get(""zona_id"")
            avenida_id = request.POST.get(""avenida_id"")
            direccion_texto = request.POST.get(""direccion"")

            # 📌 Verificar si los datos están llegando correctamente
            print(f""Datos recibidos: {request.POST}"")

            # Crear el cliente
            cliente = Cliente.objects.create(
                nombre=nombre,
                apellido_paterno=apellido_paterno,
                apellido_materno=apellido_materno,
                documento=documento,
                telefono=telefono,
                email=email,
                fecha_nacimiento=fecha_nacimiento,
                sexo=sexo
            )
            print(f""Cliente registrado: {cliente}"")

            # 📌 Verificar si los datos de dirección están llegando bien
            print(f""Zona ID: {zona_id}, Avenida ID: {avenida_id}, Dirección: {direccion_texto}"")

            if direccion_texto and zona_id and avenida_id:
                try:
                    zona = Zona.objects.get(id=zona_id)
                    avenida = Avenida.objects.get(id=avenida_id)

                    print(f""Zona encontrada: {zona}, Avenida encontrada: {avenida}"")

                    direccion = Direccion.objects.create(
                        cliente=cliente, 
                        direccion=direccion_texto, 
                        zona=zona, 
                        avenida=avenida
                    )

                    print(f""Dirección guardada correctamente: {direccion}"")

                except Zona.DoesNotExist:
                    print(""❌ Error: La zona no existe"")
                except Avenida.DoesNotExist:
                    print(""❌ Error: La avenida no existe"")
                except Exception as e:
                    print(f""❌ Error al guardar dirección: {e}"")

            return JsonResponse({""message"": ""Cliente registrado exitosamente"", ""id"": cliente.id}, status=201)

        except Exception as e:
            print(f""❌ Error al registrar cliente: {e}"")
            return JsonResponse({""error"": f""Ocurrió un error: {str(e)}""}, status=500)

    return JsonResponse({""error"": ""Método no permitido""}, status=405)










def obtener_cliente(request, id):
    """"""Devuelve datos del cliente en JSON para edición""""""
    cliente = get_object_or_404(Cliente, id=id)
    data = {
        ""id"": cliente.id,
        ""documento"": cliente.documento,
        ""nombre"": cliente.nombre,
        ""apellido_paterno"": cliente.apellido_paterno,
        ""apellido_materno"": cliente.apellido_materno,
        ""fecha_nacimiento"": cliente.fecha_nacimiento.strftime(""%Y-%m-%d""),
        ""sexo"": cliente.sexo,
        ""telefono"": cliente.telefono,
        ""email"": cliente.email,
        ""direccion"": cliente.direccion,
        ""estatus"": cliente.estatus,
        ""zona_id"": cliente.zona.id,
        ""avenida_id"": cliente.avenida.id,
    }
    return JsonResponse(data)

def get_avenidas(request, zona_id):
    avenidas = Avenida.objects.filter(zona_id=zona_id).values('id', 'nombre')
    return JsonResponse({'avenidas': list(avenidas)})

def get_zonas(request):
    zonas = list(Zona.objects.values('id', 'nombre'))
    return JsonResponse({'zonas': zonas})



@require_http_methods([""GET"", ""POST""])
def editar_cliente(request, cliente_id):
    cliente = get_object_or_404(Cliente, id=cliente_id)

    if request.method == ""GET"":
        # Devolver los datos del cliente en formato JSON
        data = {
            ""id"": cliente.id,
            ""documento"": cliente.documento,
            ""nombre"": cliente.nombre,
            ""apellido_paterno"": cliente.apellido_paterno,
            ""apellido_materno"": cliente.apellido_materno,
            ""fecha_nacimiento"": cliente.fecha_nacimiento.strftime(""%Y-%m-%d"") if cliente.fecha_nacimiento else None,
            ""sexo"": cliente.sexo,
            ""telefono"": cliente.telefono,
            ""email"": cliente.email,
            ""direccion"": cliente.direccion,
            ""estatus"": cliente.estatus,
            ""zona_id"": cliente.zona.id if cliente.zona else None,
            ""avenida_id"": cliente.avenida.id if cliente.avenida else None,
        }
        return JsonResponse(data, safe=False)

    elif request.method == ""POST"":
        try:
            # Procesar el formulario de edición
            form = ClienteForm(request.POST, instance=cliente)
            if form.is_valid():
                cliente = form.save(commit=False)
                
                # Procesar el campo 'estatus' manualmente
                estatus = request.POST.get(""estatus"", ""1"")  # Por defecto, ""1"" (Activo)
                cliente.estatus = estatus == ""1""  # Convertir a booleano
                
                # Guardar los cambios en la base de datos
                cliente.save()

                # Devolver una respuesta JSON con el mensaje de éxito
                return JsonResponse({
                    ""message"": ""Cliente actualizado correctamente"",
                    ""id"": cliente.id,
                    ""estatus"": cliente.estatus,  # Devolver el estado actualizado
                }, status=200)
            else:
                # Si el formulario no es válido, devolver los errores
                return JsonResponse({
                    ""error"": ""Error en el formulario"",
                    ""detalles"": form.errors,
                }, status=400)
        except Exception as e:
            # Manejar errores inesperados
            return JsonResponse({
                ""error"": ""Error interno del servidor"",
                ""detalles"": str(e),
            }, status=500)

    return JsonResponse({""error"": ""Método no permitido""}, status=405)



@csrf_exempt
def eliminar_cliente(request, cliente_id):
    if request.method == ""DELETE"":  # Verifica que el método sea DELETE
        cliente = get_object_or_404(Cliente, id=cliente_id)
        cliente.delete()
        return JsonResponse({""mensaje"": ""Cliente eliminado correctamente""}, status=200)
    
    return JsonResponse({""error"": ""Método no permitido""}, status=405)





from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from .models import Cliente
from .forms import ClienteForm

@csrf_exempt
def agregar_cliente(request):
    if request.method == ""POST"":
        form = ClienteForm(request.POST)
        if form.is_valid():
            # Guardar el cliente, pero sin commit para poder modificar campos manualmente
            cliente = form.save(commit=False)
            
            # Procesar el campo 'estatus' manualmente
            estatus = request.POST.get(""estatus"", ""1"")  # Por defecto, ""1"" (Activo)
            cliente.estatus = estatus == ""1""  # Convertir a booleano (True si es ""1"", False si es ""0"")
            
            # Guardar el cliente en la base de datos
            cliente.save()

            # Devolver una respuesta JSON con los datos del cliente
            return JsonResponse({
                ""mensaje"": ""Cliente agregado correctamente."",
                ""id"": cliente.id,
                ""documento"": cliente.documento,
                ""nombre"": cliente.nombre,
                ""apellido_paterno"": cliente.apellido_paterno,
                ""apellido_materno"": cliente.apellido_materno,
                ""telefono"": cliente.telefono,
                ""email"": cliente.email,
                ""estatus"": cliente.estatus,  # Devolver el estado actualizado
            }, status=200)
        else:
            # Si el formulario no es válido, devolver errores
            return JsonResponse({
                ""error"": ""Error en el formulario"",
                ""detalles"": form.errors,
            }, status=400)
    else:
        # Si el método no es POST, devolver un error
        return JsonResponse({
            ""error"": ""Método no permitido"",
        }, status=405)


def cliente_detail(request, cliente_id):
    cliente = get_object_or_404(Cliente, pk=cliente_id)
    if request.method == ""GET"":
        data = {
            'id': cliente.id,
            'documento': cliente.documento,
            'nombre': cliente.nombre,
            'apellido_paterno': cliente.apellido_paterno,
            'apellido_materno': cliente.apellido_materno,
            'fecha_nacimiento': cliente.fecha_nacimiento.strftime('%Y-%m-%d'),
            'sexo': cliente.sexo,
            'telefono': cliente.telefono,
            'email': cliente.email,
            'estatus': cliente.estatus,
            'numero_cliente': cliente.numero_cliente,
            # Se devuelven todas las direcciones asociadas al cliente, incluyendo los IDs para zona y avenida
            'direcciones': [
                {
                    'id': d.id,
                    'zona': d.zona.nombre if d.zona else None,
                    'zona_id': d.zona.id if d.zona else None,
                    'avenida': d.avenida.nombre if d.avenida else None,
                    'avenida_id': d.avenida.id if d.avenida else None,
                    'direccion': d.direccion,
                } for d in cliente.direcciones.all()
            ]
        }
        return JsonResponse(data)
    elif request.method == ""POST"":
        # Aquí procesa la actualización de los datos del cliente
        return JsonResponse({'mensaje': 'Cliente actualizado correctamente.'})
    else:
        return HttpResponseNotAllowed(['GET', 'POST'])


def detalle_cliente(request, cliente_id):
    cliente = get_object_or_404(Cliente, pk=cliente_id)
    return render(request, 'cliente_detail.html', {'cliente': cliente})



def detalle_cliente_html(request, cliente_id):
    # Obtener el cliente (y sus direcciones) como ya lo haces en cliente_detail
    cliente = get_object_or_404(Cliente, pk=cliente_id)
    return render(request, 'usuarios/detalle_cliente.html', {'cliente': cliente})



# --- Agregado de Reportes y Generación de PDF ---
def generar_pdf_clientes(request):
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = 'attachment; filename=""reporte_clientes.pdf""'
    pdf = canvas.Canvas(response, pagesize=letter)
    pdf.setTitle(""Reporte de Clientes"")
    pdf.setFont(""Helvetica-Bold"", 14)
    pdf.drawString(200, 750, ""Reporte de Clientes"")
    pdf.setFont(""Helvetica"", 10)
    clientes = Cliente.objects.all()
    y = 720
    for cliente in clientes:
        pdf.drawString(50, y, f""{cliente.documento} - {cliente.nombre} - {cliente.telefono} - {cliente.email}"")
        y -= 20
    pdf.showPage()
    pdf.save()
    return response


# Vista para listar servicios
def lista_servicios(request):
    servicios = Servicio.objects.all()
    return render(request, 'usuarios/lista_servicios.html', {'servicios': servicios})

# Vista para agregar un servicio
def agregar_servicio(request):
    if request.method == ""POST"":
        nombre = request.POST.get(""nombre"")
        costo = request.POST.get(""costo"")

        if nombre and costo:
            Servicio.objects.create(nombre=nombre, costo=int(costo))
            messages.success(request, ""Servicio agregado correctamente"")
            return redirect(""servicios"")  # Redirige a la lista de servicios

    return render(request, ""usuarios/lista_servicios.html"")

# Vista para editar un servicio
def editar_servicio(request, servicio_id):
    servicio = get_object_or_404(Servicio, id=servicio_id)

    if request.method == ""GET"":
        # Retornar datos del servicio en formato JSON
        return JsonResponse({
            ""id"": servicio.id,
            ""nombre"": servicio.nombre,
            ""costo"": servicio.costo
        })

    elif request.method == ""POST"":
        try:
            servicio.nombre = request.POST.get(""nombre"")
            servicio.costo = int(request.POST.get(""costo""))
            servicio.save()
            messages.success(request, ""Servicio actualizado correctamente"")
            return JsonResponse({""mensaje"": ""Servicio actualizado correctamente""})
        except Exception as e:
            return JsonResponse({""error"": f""Error al actualizar el servicio: {str(e)}""}, status=400)

    return JsonResponse({""error"": ""Método no permitido""}, status=405)


# Vista para eliminar un servicio
def eliminar_servicio(request, servicio_id):
    servicio = get_object_or_404(Servicio, id=servicio_id)
    servicio.delete()
    messages.success(request, ""Servicio eliminado correctamente"")
    return JsonResponse({""mensaje"": ""Servicio eliminado correctamente""})


    
# Vista para listar contratos
def lista_contratos(request):
    contratos = Contrato.objects.all()
    form = ContratoForm()
    return render(request, ""usuarios/lista_contratos.html"", {""contratos"": contratos, ""form"": form})


# Vista para generar número de abonado único
def generar_numero_abonado():
    return ""C"" + str(random.randint(100000, 999999))

def obtener_servicio(request, servicio_id):
    """""" Obtiene información de un servicio específico """"""
    try:
        servicio = get_object_or_404(Servicio, pk=servicio_id)
        return JsonResponse({""id"": servicio.id, ""nombre"": servicio.nombre, ""costo"": servicio.costo})
    except Exception as e:
        return JsonResponse({'error': f'Ocurrió un error al obtener el servicio: {e}'}, status=500)







# Vista para obtener los datos de un contrato
def obtener_contrato(request, id):
    try:
        contrato = get_object_or_404(Contrato, id=id)

        # Construir el nombre completo correctamente
        cliente = contrato.cliente
        cliente_nombre = f""{cliente.nombre} {cliente.apellido_paterno} {cliente.apellido_materno or ''}"".strip()

        return JsonResponse({
            ""success"": True,
            ""contrato"": {
                ""id"": contrato.id,
                ""cliente"": cliente.id,
                ""cliente_nombre"": cliente_nombre,  # ✅ Usa apellido_paterno y apellido_materno
                ""numero_abonado"": contrato.numero_abonado,
                ""descripcion"": contrato.descripcion,
                ""total"": contrato.total
            }
        })
    except Exception as e:
        return JsonResponse({""success"": False, ""message"": f""Error en el servidor: {str(e)}""}, status=500)


# Vista para editar un registrar_contrato
@csrf_exempt
def obtener_cliente(request, cliente_id):
    """""" Devuelve los datos de un cliente en formato JSON. """"""
    cliente = get_object_or_404(Cliente, id=cliente_id)
    data = {
        ""id"": cliente.id,
        ""documento"": cliente.documento,
        ""nombre"": cliente.nombre,
        ""apellido_paterno"": cliente.apellido_paterno,
        ""apellido_materno"": cliente.apellido_materno,
        ""telefono"": cliente.telefono,
        ""email"": cliente.email,
        ""direccion"": cliente.direccion,
        ""estatus"": cliente.estatus,
    }
    return JsonResponse(data)

@csrf_exempt
def editar_cliente(request, cliente_id):
    """""" Actualiza un cliente existente. """"""
    if request.method == ""POST"":
        try:
            cliente = get_object_or_404(Cliente, id=cliente_id)
            for key, value in request.POST.items():
                setattr(cliente, key, value)
            cliente.save()
            return JsonResponse({""mensaje"": ""Cliente actualizado correctamente""}, status=200)
        except Exception as e:
            return JsonResponse({""error"": f""Error interno: {str(e)}""}, status=500)
    return JsonResponse({""error"": ""Método no permitido""}, status=405)







# Vista para eliminar contrato
def eliminar_contrato(request, id):
    if request.method == ""DELETE"":
        contrato = get_object_or_404(Contrato, id=id)
        contrato.delete()
        return JsonResponse({""success"": True})
    return JsonResponse({""success"": False, ""error"": ""Método no permitido""}, status=405)


# Buscar clientes por nombre o documento
def buscar_clientes(request):
    query = request.GET.get(""query"", """").strip()
    if query:
        clientes = Cliente.objects.filter(nombre__icontains=query) | Cliente.objects.filter(documento__icontains=query)
        data = list(clientes.values(""id"", ""nombre"", ""documento""))
        return JsonResponse(data, safe=False)
    return JsonResponse([], safe=False)




            

@csrf_exempt
def agregar_contrato(request):
    """""" Agrega un nuevo contrato con sus servicios asociados. """"""
    if request.method == ""POST"":
        form = ContratoForm(request.POST)
        if form.is_valid():
            contrato = form.save(commit=False)
            contrato.total = contrato.calcular_total()
            contrato.save()
            form.save_m2m()
            return JsonResponse({""mensaje"": ""Contrato agregado correctamente""}, status=201)
        return JsonResponse({""error"": ""Formulario inválido"", ""detalles"": form.errors}, status=400)
    return JsonResponse({""error"": ""Método no permitido""}, status=405)

@csrf_exempt
def editar_contrato(request, id):
    """""" Edita los detalles de un contrato existente. """"""
    contrato = get_object_or_404(Contrato, id=id)
    if request.method == ""POST"":
        try:
            data = json.loads(request.body.decode(""utf-8""))
            for key, value in data.items():
                setattr(contrato, key, value)
            contrato.save()
            return JsonResponse({""mensaje"": ""Contrato actualizado correctamente""}, status=200)
        except Exception as e:
            return JsonResponse({""error"": f""Error interno: {str(e)}""}, status=500)
    return JsonResponse({""error"": ""Método no permitido""}, status=405)


       
def generar_numero_abonado(request):
    """"""
    Genera un número de abonado único basado en el último contrato registrado.editar_cliente
    """"""
    ultimo_contrato = Contrato.objects.order_by('-numero_abonado').first()
    nuevo_numero = (ultimo_contrato.numero_abonado + 1) if ultimo_contrato and ultimo_contrato.numero_abonado else 1000
    return JsonResponse({""numero_abonado"": nuevo_numero})


def get_zonas(request):
    zonas = list(Zona.objects.values('id', 'nombre'))
    return JsonResponse({'zonas': zonas})

def obtener_avenidas(request):
    """""" Devuelve la lista de avenidas filtradas por zona. """"""
    zona_id = request.GET.get(""zona_id"")
    avenidas = list(Avenida.objects.filter(zona_id=zona_id).values(""id"", ""nombre"")) if zona_id else []
    return JsonResponse({""avenidas"": avenidas})





def obtener_direcciones_cliente(request, cliente_id):
    """""" Devuelve las direcciones de un cliente en formato JSON """"""
    try:
        print(f""Buscando direcciones para el cliente ID: {cliente_id}"")  # Depuración

        # Filtramos las direcciones del cliente
        direcciones = Direccion.objects.filter(cliente_id=cliente_id).values(""id"", ""direccion"")

        if not direcciones:
            return JsonResponse({""direcciones"": [], ""message"": ""No hay direcciones registradas para este cliente.""})

        # Formateamos la respuesta
        data = [{""id"": d[""id""], ""direccion"": d[""direccion""]} for d in direcciones]

        return JsonResponse({""direcciones"": data}, safe=False)

    except Exception as e:
        print(f""Error en obtener_direcciones_cliente: {e}"")  # Depuración
        return JsonResponse({""error"": f""Ocurrió un error: {str(e)}""}, status=500)



def obtener_estado_cliente(request, cliente_id):
    try:
        cliente = Cliente.objects.get(id=cliente_id)
        return JsonResponse({'estatus': cliente.estatus})  # Ajusta según el nombre del campo en el modelo
    except Cliente.DoesNotExist:
        return JsonResponse({'error': 'Cliente no encontrado'}, status=404)
    
    
    
"
g0aib4CS,Untitled,losvilos,HTML,Thursday 27th of February 2025 03:20:15 PM CDT,"{% extends 'base.html' %}
{% block content %}


<div class=""container mt-4"">
<!-- Campos ocultos para contrato.js -->
<input type=""hidden"" id=""id_cliente"" name=""id_cliente"">
<input type=""hidden"" id=""id_direccion_instalacion"" name=""id_direccion_instalacion"">
    <h2>Mantenimiento de Clientes</h2>
    <button class=""btn btn-primary mb-3"" data-toggle=""modal"" data-target=""#modalAgregarCliente"">
        <i class=""fa fa-plus""></i> Nuevo Registro
    </button>
    <form method=""get"">
        <input type=""text"" name=""q"" placeholder=""Buscar clientes..."" value=""{{ request.GET.q }}"">
        <button type=""submit"">Buscar</button>
    </form>
    <table class=""table table-striped"">
        <thead>
            <tr>
                <th>N° Documento</th>
                <th>Cliente</th>
                <th>Móvil</th>
                <th>Email</th>
                <th>Estado</th>
                <th>Acción</th>
            </tr>
        </thead>
        <tbody>
            {% for cliente in clientes %}
            <tr data-id=""{{ cliente.id }}"">
                <td class=""documento"">{{ cliente.documento }}</td>
                <td class=""nombre"">
                    {{ cliente.nombre }} {{ cliente.apellido_paterno }}{% if cliente.apellido_materno %} {{ cliente.apellido_materno }}{% endif %}
                </td>
                <td class=""telefono"">{{ cliente.telefono }}</td>
                <td class=""email"">{{ cliente.email }}</td>
                <td>
                    <span class=""badge estatus {% if cliente.estatus %}bg-success{% else %}bg-danger{% endif %}"">
                        {% if cliente.estatus %}Activo{% else %}Inactivo{% endif %}
                    </span>
                </td>
                <td>
                    <!-- Botón para ver detalle -->
                    <a class=""btn btn-sm btn-primary"" href=""{% url 'detalle_cliente_html' cliente.id %}"">
                        Ver detalle
                    </a>
                    <!-- Botón para editar -->
                    <button class=""btn btn-info btn-sm btn-editar"" data-id=""{{ cliente.id }}"">
                        <i class=""fa fa-edit""></i> Editar
                    </button>
                    <!-- Botón para eliminar -->
                    <button class=""btn btn-danger btn-sm btn-eliminar"" data-id=""{{ cliente.id }}"">
                        <i class=""fa fa-trash""></i> Eliminar
                    </button>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
    <nav>
        <ul class=""pagination"">
            {% if clientes.has_previous %}
            <li class=""page-item"">
                <a class=""page-link"" href=""?{{ querystring.urlencode }}&page=1"">&laquo; Primera</a>
            </li>
            <li class=""page-item"">
                <a class=""page-link"" href=""?{{ querystring.urlencode }}&page={{ clientes.previous_page_number }}"">Anterior</a>
            </li>
            {% endif %}

            {% for page in clientes.paginator.page_range %}
            <li class=""page-item {% if clientes.number == page %}active{% endif %}"">
                <a class=""page-link"" href=""?{{ querystring.urlencode }}&page={{ page }}"">{{ page }}</a>
            </li>
            {% endfor %}

            {% if clientes.has_next %}
            <li class=""page-item"">
                <a class=""page-link"" href=""?{{ querystring.urlencode }}&page={{ clientes.next_page_number }}"">Siguiente</a>
            </li>
            <li class=""page-item"">
                <a class=""page-link"" href=""?{{ querystring.urlencode }}&page={{ clientes.paginator.num_pages }}"">Última &raquo;</a>
            </li>
            {% endif %}
        </ul>
    </nav>
</div>

<!-- Modal para Registrar Cliente -->
<div class=""modal fade"" id=""modalAgregarCliente"" tabindex=""-1"" aria-labelledby=""modalAgregarClienteLabel"" aria-hidden=""true"">
    <div class=""modal-dialog modal-xl"">
      <div class=""modal-content"">
        <div class=""modal-header"">
          <h5 class=""modal-title"">Registrar Cliente</h5>
          <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
            <span aria-hidden=""true"">&times;</span>
          </button>
        </div>
        <form id=""formNuevoCliente"" method=""POST"">
          {% csrf_token %}
          <div class=""modal-body"">
            <div class=""container-fluid"">
              <div class=""row"">
                <!-- Primera columna -->
                <div class=""col-md-4 col-sm-6"">
                  <div class=""form-group"">
                    <label for=""documento"">N° Documento (*)</label>
                    <input type=""text"" class=""form-control"" name=""documento"" id=""documento"" required>
                  </div>
                  <div class=""form-group"">
                    <label for=""apellido_paterno"">Apellido Paterno (*)</label>
                    <input type=""text"" class=""form-control"" name=""apellido_paterno"" id=""apellido_paterno"" required>
                  </div>
                  <div class=""form-group"">
                    <label for=""fecha_nacimiento"">Fecha de Nacimiento (*)</label>
                    <input type=""date"" class=""form-control"" name=""fecha_nacimiento"" id=""fecha_nacimiento"" required>
                  </div>
                  <div class=""form-group"">
                    <label for=""zona"">Zona (*)</label>
                    <select id=""id_zona"" name=""zona"" class=""form-control"" required>
                      <option value="""">Selecciona una zona</option>
                      {% for zona in zonas %}
                      <option value=""{{ zona.id }}"">{{ zona.nombre }}</option>
                      {% endfor %}
                    </select>
                  </div>
                </div>
                <!-- Segunda columna -->
                <div class=""col-md-4 col-sm-6"">
                  <div class=""form-group"">
                    <label for=""estatus"">Estatus</label>
                    <select name=""estatus"" id=""estatus"" class=""form-control"">
                      <option value=""1"">Activo</option>
                      <option value=""0"">Inactivo</option>
                    </select>
                  </div>
                  <div class=""form-group"">
                    <label for=""apellido_materno"">Apellido Materno (*)</label>
                    <input type=""text"" class=""form-control"" name=""apellido_materno"" id=""apellido_materno"">
                  </div>
                  <div class=""form-group"">
                    <label for=""movil"">Móvil (*)</label>
                    <input type=""text"" class=""form-control"" name=""telefono"" id=""telefono"" required>
                  </div>
                  <div class=""form-group"">
                    <label for=""avenida"">Avenidas (*)</label>
                    <select id=""id_avenida"" name=""avenida"" class=""form-control"" required>
                      <option value="""">Selecciona una avenida</option>
                      {% for avenida in avenidas %}
                      <option value=""{{ avenida.id }}"">{{ avenida.nombre }}</option>
                      {% endfor %}
                    </select>
                  </div>
                </div>
                <!-- Tercera columna -->
                <div class=""col-md-4 col-sm-6"">
                  <div class=""form-group"">
                    <label for=""nombre"">Nombre (*)</label>
                    <input type=""text"" class=""form-control"" name=""nombre"" id=""nombre"" required>
                  </div>
                  <div class=""form-group"">
                    <label for=""sexo"">Sexo (*)</label>
                    <select name=""sexo"" id=""sexo"" class=""form-control"" required>
                      <option value="""">Seleccionar</option>
                      <option value=""M"">Masculino</option>
                      <option value=""F"">Femenino</option>
                    </select>
                  </div>
                  <div class=""form-group"">
                    <label for=""email"">Email</label>
                    <input type=""email"" class=""form-control"" name=""email"" id=""email"">
                  </div>
                  <!-- Campo para la dirección, que se creará en el modelo Direccion -->
                  <div class=""form-group"">
                    <label for=""direccion"">Dirección (*)</label>
                    <input type=""text"" class=""form-control"" name=""direccion"" id=""direccion"" required>
                  </div>
                </div>
              </div> <!-- /.row -->
            </div> <!-- /.container-fluid -->
          </div> <!-- /.modal-body -->
          <div class=""modal-footer"">
            <button type=""submit"" class=""btn btn-success"">Guardar</button>
            <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Cancelar</button>
          </div>
        </form>
      </div> <!-- /.modal-content -->
    </div> <!-- /.modal-dialog -->
  </div> <!-- /.modal -->
  

<!-- Modal para Editar Cliente -->
<div class=""modal fade"" id=""modalEditarCliente"" tabindex=""-1"" aria-labelledby=""modalEditarClienteLabel"" aria-hidden=""true"">
    <div class=""modal-dialog modal-xl"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"">Editar Cliente</h5>
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <form id=""formEditarCliente"" method=""POST"" action="""">
                {% csrf_token %}
                <!-- Campo oculto para almacenar el ID del cliente -->
                <input type=""hidden"" id=""edit_id"" name=""id"">
                
                <div class=""modal-body"">
                    <div class=""container-fluid"">
                        <div class=""row"">
                            <!-- Primera columna -->
                            <div class=""col-md-4 col-sm-6"">
                                <div class=""form-group"">
                                    <label for=""edit_documento"">N° Documento (*)</label>
                                    <input type=""text"" class=""form-control"" name=""documento"" id=""edit_documento"" required>
                                </div>
                                <div class=""form-group"">
                                    <label for=""edit_apellido_paterno"">Apellido Paterno (*)</label>
                                    <input type=""text"" class=""form-control"" name=""apellido_paterno"" id=""edit_apellido_paterno"" required>
                                </div>
                                <div class=""form-group"">
                                    <label for=""edit_fecha_nacimiento"">Fecha de Nacimiento (*)</label>
                                    <input type=""date"" class=""form-control"" name=""fecha_nacimiento"" id=""edit_fecha_nacimiento"" required>
                                </div>
                                <div class=""form-group"">
                                    <label for=""edit_zona"">Zona (*)</label>
                                    <select id=""edit_zona"" name=""zona"" class=""form-control"" required>
                                        <option value="""">Selecciona una zona</option>
                                        {% for zona in zonas %}
                                        <option value=""{{ zona.id }}"">{{ zona.nombre }}</option>
                                        {% endfor %}
                                    </select>
                                </div>
                            </div>
                            <!-- Segunda columna -->
                            <div class=""col-md-4 col-sm-6"">
                              <div class=""form-group"">
                                <label for=""edit_estatus"">Estatus</label>
                                <select name=""estatus"" id=""edit_estatus"" class=""form-control"" required>
                                    <option value=""1"" {% if cliente.estatus %}selected{% endif %}>Activo</option>
                                    <option value=""0"" {% if not cliente.estatus %}selected{% endif %}>Inactivo</option>
                                </select>
                            </div>
                                <div class=""form-group"">
                                    <label for=""edit_apellido_materno"">Apellido Materno (*)</label>
                                    <input type=""text"" class=""form-control"" name=""apellido_materno"" id=""edit_apellido_materno"">
                                </div>
                                <div class=""form-group"">
                                    <label for=""edit_telefono"">Móvil (*)</label>
                                    <input type=""text"" class=""form-control"" name=""telefono"" id=""edit_telefono"" required>
                                </div>
                                <div class=""form-group"">
                                    <label for=""edit_avenida"">Avenidas (*)</label>
                                    <select id=""edit_avenida"" name=""avenida"" class=""form-control"" required>
                                        <option value="""">Selecciona una avenida</option>
                                        {% for avenida in avenidas %}
                                        <option value=""{{ avenida.id }}"">{{ avenida.nombre }}</option>
                                        {% endfor %}
                                    </select>
                                </div>
                            </div>
                            <!-- Tercera columna -->
                            <div class=""col-md-4 col-sm-6"">
                                <div class=""form-group"">
                                    <label for=""edit_nombre"">Nombre (*)</label>
                                    <input type=""text"" class=""form-control"" name=""nombre"" id=""edit_nombre"" required>
                                </div>
                                <div class=""form-group"">
                                    <label for=""edit_sexo"">Sexo (*)</label>
                                    <select name=""sexo"" id=""edit_sexo"" class=""form-control"" required>
                                        <option value="""">Seleccionar</option>
                                        <option value=""M"">Masculino</option>
                                        <option value=""F"">Femenino</option>
                                    </select>
                                </div>
                                <div class=""form-group"">
                                    <label for=""edit_email"">Email</label>
                                    <input type=""email"" class=""form-control"" name=""email"" id=""edit_email"">
                                </div>
                                <!-- Campo para la dirección, que se actualizará en el modelo Direccion -->
                                <div class=""form-group"">
                                    <label for=""edit_direccion"">Dirección (*)</label>
                                    <input type=""text"" class=""form-control"" name=""direccion"" id=""edit_direccion"" required>
                                </div>
                            </div>
                        </div> <!-- /.row -->
                    </div> <!-- /.container-fluid -->
                </div> <!-- /.modal-body -->
                <div class=""modal-footer"">
                    <button type=""submit"" class=""btn btn-success"">Guardar</button>
                    <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Cancelar</button>
                </div>
            </form>
        </div> <!-- /.modal-content -->
    </div> <!-- /.modal-dialog -->
</div> <!-- /.modal fade -->



<script>
  document.getElementById('formNuevoCliente').addEventListener('submit', function(event) {
      event.preventDefault();  // Evita que el formulario se envíe de manera tradicional
  
      const formData = new FormData(this);
  
      fetch(""{% url 'agregar_cliente' %}"", {
          method: 'POST',
          body: formData,
          headers: {
              'X-CSRFToken': '{{ csrf_token }}'
          }
      })
      .then(response => response.json())
      .then(data => {
          if (data.mensaje) {
              alert(data.mensaje);  // Muestra el mensaje de éxito
              $('#modalAgregarCliente').modal('hide');  // Cierra el modal
              location.reload();  // Recarga la página para actualizar la lista
          } else if (data.error) {
              alert(data.error);  // Muestra el mensaje de error
          }
      })
      .catch(error => {
          console.error('Error:', error);
      });
  });
  </script>





{% endblock %}
"
01LP4PEn,🔥 Make $500+ from APE AIRDROP 🔥,yinyin99,JavaScript,Thursday 27th of February 2025 03:12:47 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#xC9xwlkR1t"
TwpGMJGq,🚨 FINAL CALL - $APE AIRDROP 🚨,yinyin99,JavaScript,Thursday 27th of February 2025 03:02:46 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#SWucFTOuiQ"
iwJ9eSV7,🚨 LAST CHANCE TO CLAIM APE COINS 🚨,yinyin99,JavaScript,Thursday 27th of February 2025 02:52:44 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#yLfLCjPV22"
svp4HBDF,FREE CRYPTO,yinyin99,JavaScript,Thursday 27th of February 2025 02:42:31 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#9Htlti6UQA"
VMCV3J4j,News Feb26 25,Newscaster_Ned,Email,Thursday 27th of February 2025 02:38:22 PM CDT,"‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎T‎‎e‎‎s‎‎t‎‎ ‎‎1‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎
‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎T‎‎e‎‎s‎‎t‎‎ ‎‎2‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎
‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎T‎‎e‎‎s‎‎t‎‎ ‎‎3‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎
‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎ ‎‎T‎‎e‎‎s‎‎t‎‎ ‎‎c‎‎o‎‎m‎‎p‎‎l‎‎e‎‎t‎‎e‎‎.‎

‎H‎‎e‎‎y‎‎,‎‎ ‎‎g‎‎u‎‎y‎‎s‎‎.‎‎ ‎‎I‎‎t‎‎'‎‎s‎‎ ‎‎m‎‎e‎‎.‎‎ ‎‎T‎‎h‎‎e‎‎ ‎‎c‎‎h‎‎i‎‎l‎‎d‎‎ ‎‎p‎‎o‎‎r‎‎n‎‎ ‎‎g‎‎u‎‎y‎‎.‎

‎T‎‎r‎‎u‎‎m‎‎p‎‎:‎‎ ‎‎E‎‎m‎‎p‎‎l‎‎o‎‎y‎‎e‎‎e‎‎s‎‎ ‎‎W‎‎h‎‎o‎‎ ‎‎D‎‎i‎‎d‎‎n‎‎'‎‎t‎‎ ‎‎R‎‎e‎‎s‎‎p‎‎o‎‎n‎‎d‎‎ ‎‎t‎‎o‎‎ ‎‎E‎‎l‎‎o‎‎n‎‎'‎‎s‎‎ ‎‎E‎‎m‎‎a‎‎i‎‎l‎‎ ‎‎'‎‎A‎‎r‎‎e‎‎ ‎‎o‎‎n‎‎ ‎‎t‎‎h‎‎e‎‎ ‎‎B‎‎u‎‎b‎‎b‎‎l‎‎e‎‎'‎
‎W‎‎a‎‎t‎‎c‎‎h‎‎ ‎‎L‎‎i‎‎v‎‎e‎‎:‎‎ ‎‎S‎‎e‎‎n‎‎a‎‎t‎‎e‎‎ ‎‎H‎‎e‎‎a‎‎r‎‎i‎‎n‎‎g‎‎ ‎‎o‎‎n‎‎ ‎‎C‎‎o‎‎m‎‎b‎‎a‎‎t‎‎t‎‎i‎‎n‎‎g‎‎ ‎‎A‎‎m‎‎e‎‎r‎‎i‎‎c‎‎a‎‎'‎‎s‎‎ ‎‎O‎‎p‎‎i‎‎o‎‎i‎‎d‎‎ ‎‎E‎‎p‎‎i‎‎d‎‎e‎‎m‎‎i‎‎c‎
‎P‎‎r‎‎e‎‎s‎‎i‎‎d‎‎e‎‎n‎‎t‎‎ ‎‎T‎‎r‎‎u‎‎m‎‎p‎‎ ‎‎T‎‎r‎‎o‎‎l‎‎l‎‎s‎‎ ‎‎w‎‎i‎‎t‎‎h‎‎ ‎‎A‎‎I‎‎ ‎‎V‎‎i‎‎d‎‎e‎‎o‎‎ ‎‎o‎‎f‎‎ ‎‎V‎‎i‎‎s‎‎i‎‎o‎‎n‎‎ ‎‎f‎‎o‎‎r‎‎ ‎‎G‎‎a‎‎z‎‎a‎
‎'‎‎H‎‎e‎‎'‎‎s‎‎ ‎‎S‎‎p‎‎e‎‎n‎‎t‎‎'‎‎:‎‎ ‎‎'‎‎D‎‎e‎‎a‎‎d‎‎p‎‎o‎‎o‎‎l‎‎'‎‎ ‎‎C‎‎r‎‎e‎‎a‎‎t‎‎o‎‎r‎‎ ‎‎U‎‎r‎‎g‎‎e‎‎s‎‎ ‎‎M‎‎a‎‎r‎‎v‎‎e‎‎l‎‎ ‎‎t‎‎o‎‎ ‎‎D‎‎u‎‎m‎‎p‎‎ ‎‎M‎‎a‎‎s‎‎t‎‎e‎‎r‎‎m‎‎i‎‎n‎‎d‎‎ ‎‎K‎‎e‎‎v‎‎i‎‎n‎‎ ‎‎F‎‎e‎‎i‎‎g‎
‎C‎‎o‎‎l‎‎o‎‎m‎‎b‎‎i‎‎a‎‎'‎‎s‎‎ ‎‎L‎‎e‎‎f‎‎t‎‎i‎‎s‎‎t‎‎ ‎‎P‎‎r‎‎e‎‎s‎‎i‎‎d‎‎e‎‎n‎‎t‎‎ ‎‎S‎‎l‎‎a‎‎m‎‎s‎‎ ‎‎'‎‎Z‎‎e‎‎l‎‎e‎‎n‎‎s‎‎k‎‎y‎‎'‎‎s‎‎ ‎‎S‎‎t‎‎u‎‎p‎‎i‎‎d‎‎i‎‎t‎‎y‎‎'‎‎ ‎‎f‎‎o‎‎r‎‎ ‎‎T‎‎r‎‎u‎‎m‎‎p‎‎ ‎‎D‎‎e‎‎a‎‎l‎
‎G‎‎e‎‎t‎‎ ‎‎A‎‎l‎‎l‎‎ ‎‎B‎‎r‎‎e‎‎i‎‎t‎‎b‎‎a‎‎r‎‎t‎‎ ‎‎N‎‎e‎‎w‎‎s‎‎ ‎‎H‎‎e‎‎r‎‎e‎
‎H‎‎o‎‎m‎‎e‎‎P‎‎a‎‎g‎‎e‎
‎M‎‎i‎‎c‎‎h‎‎a‎‎e‎‎l‎‎ ‎‎M‎‎o‎‎o‎‎r‎‎e‎‎ ‎‎M‎‎e‎‎l‎‎t‎‎d‎‎o‎‎w‎‎n‎‎ ‎‎o‎‎f‎‎ ‎‎T‎‎h‎‎e‎‎ ‎‎A‎‎g‎‎e‎‎s‎

‎D‎‎e‎‎p‎‎o‎‎r‎‎t‎‎e‎‎d‎‎ ‎‎I‎‎l‎‎l‎‎e‎‎g‎‎a‎‎l‎‎s‎‎ ‎‎C‎‎o‎‎u‎‎l‎‎d‎‎ ‎‎C‎‎u‎‎r‎‎e‎‎ ‎‎C‎‎a‎‎n‎‎c‎‎e‎‎r‎‎—‎
‎o‎‎r‎‎ ‎‎S‎‎t‎‎o‎‎p‎‎ ‎‎A‎‎s‎‎t‎‎e‎‎r‎‎o‎‎i‎‎d‎‎!‎
‎m‎‎i‎‎c‎‎h‎‎a‎‎e‎‎l‎‎m‎‎o‎‎o‎‎r‎‎e‎‎p‎‎o‎‎l‎‎i‎‎c‎‎e‎‎1‎
‎M‎‎i‎‎c‎‎h‎‎a‎‎e‎‎l‎‎ ‎‎M‎‎o‎‎o‎‎r‎‎e‎‎ ‎‎i‎‎s‎‎ ‎‎e‎‎x‎‎p‎‎r‎‎e‎‎s‎‎s‎‎i‎‎n‎‎g‎‎ ‎‎c‎‎o‎‎n‎‎c‎‎e‎‎r‎‎n‎‎ ‎‎t‎‎h‎‎a‎‎t‎‎ ‎‎P‎‎r‎‎e‎‎s‎‎i‎‎d‎‎e‎‎n‎‎t‎‎ ‎‎D‎‎o‎‎n‎‎a‎‎l‎‎d‎‎ ‎‎T‎‎r‎‎u‎‎m‎‎p‎‎’‎‎s‎‎ ‎‎a‎‎d‎‎m‎‎i‎‎n‎‎i‎‎s‎‎t‎‎r‎‎a‎‎t‎‎i‎‎o‎‎n‎‎ ‎‎m‎‎a‎‎y‎‎ ‎‎b‎‎e‎‎ ‎‎d‎‎e‎‎p‎‎o‎‎r‎‎t‎‎i‎‎n‎‎g‎‎ ‎‎i‎‎l‎‎l‎‎e‎‎g‎‎a‎‎l‎‎ ‎‎i‎‎m‎‎m‎‎i‎‎g‎‎r‎‎a‎‎n‎‎t‎‎s‎‎ ‎‎w‎‎i‎‎t‎‎h‎‎ ‎‎t‎‎h‎‎e‎‎ ‎‎p‎‎o‎‎t‎‎e‎‎n‎‎t‎‎i‎‎a‎‎l‎‎ ‎‎t‎‎o‎‎ ‎‎m‎‎a‎‎k‎‎e‎‎ ‎‎h‎‎u‎‎g‎‎e‎‎ ‎‎s‎‎c‎‎i‎‎e‎‎n‎‎t‎‎i‎‎f‎‎i‎‎c‎‎ ‎‎b‎‎r‎‎e‎‎a‎‎k‎‎t‎‎h‎‎r‎‎o‎‎u‎‎g‎‎h‎‎s‎‎,‎‎ ‎‎l‎‎i‎‎k‎‎e‎‎ ‎‎c‎‎u‎‎r‎‎i‎‎n‎‎g‎‎ ‎‎c‎‎a‎‎n‎‎c‎‎e‎‎r‎‎ ‎‎o‎‎r‎‎ ‎‎s‎‎t‎‎o‎‎p‎‎p‎‎i‎‎n‎‎g‎‎ ‎‎a‎‎n‎‎ ‎‎a‎‎s‎‎t‎‎e‎‎r‎‎o‎‎i‎‎d‎‎ ‎‎o‎‎n‎‎ ‎‎a‎‎ ‎‎p‎‎a‎‎t‎‎h‎‎ ‎‎t‎‎o‎‎ ‎‎d‎‎e‎‎c‎‎i‎‎m‎‎a‎‎t‎‎e‎‎ ‎‎E‎‎a‎‎r‎‎t‎‎h‎‎.‎

‎S‎‎h‎‎o‎‎c‎‎k‎‎ ‎‎P‎‎o‎‎l‎‎l‎‎:‎‎ ‎‎7‎‎5‎‎ ‎‎P‎‎e‎‎r‎‎c‎‎e‎‎n‎‎t‎‎ ‎‎o‎‎f‎‎ ‎‎D‎‎e‎‎m‎‎o‎‎c‎‎r‎‎a‎‎t‎‎s‎‎ ‎‎S‎‎a‎‎y‎‎ ‎‎J‎‎o‎‎e‎‎ ‎‎B‎‎i‎‎d‎‎e‎‎n‎‎’‎‎s‎‎ ‎‎M‎‎i‎‎g‎‎r‎‎a‎‎t‎‎i‎‎o‎‎n‎‎ ‎‎F‎‎l‎‎o‎‎o‎‎d‎‎ ‎‎W‎‎a‎‎s‎‎ ‎‎a‎‎n‎‎ ‎‎A‎‎c‎‎c‎‎i‎‎d‎‎e‎‎n‎‎t‎
‎P‎‎o‎‎l‎‎l‎‎:‎‎ ‎‎7‎‎5‎‎ ‎‎P‎‎e‎‎r‎‎c‎‎e‎‎n‎‎t‎‎ ‎‎o‎‎f‎‎ ‎‎D‎‎e‎‎m‎‎o‎‎c‎‎r‎‎a‎‎t‎‎s‎‎ ‎‎S‎‎a‎‎y‎‎ ‎‎B‎‎i‎‎d‎‎e‎‎n‎‎'‎‎s‎‎ ‎‎M‎‎i‎‎g‎‎r‎‎a‎‎t‎‎i‎‎o‎‎n‎‎ ‎‎W‎‎a‎‎s‎‎ ‎‎a‎‎n‎‎ ‎‎A‎‎c‎‎c‎‎i‎‎d‎‎e‎‎n‎‎t‎
‎5‎‎,‎‎7‎‎5‎‎7‎
‎D‎‎o‎‎n‎‎ ‎‎L‎‎e‎‎m‎‎o‎‎n‎‎ ‎‎t‎‎o‎‎ ‎‎M‎‎e‎‎g‎‎y‎‎n‎‎ ‎‎K‎‎e‎‎l‎‎l‎‎y‎‎:‎‎ ‎‎‘‎‎G‎‎o‎‎ ‎‎F‎‎*‎‎c‎‎k‎‎ ‎‎Y‎‎o‎‎u‎‎r‎‎s‎‎e‎‎l‎‎f‎‎,‎‎ ‎‎R‎‎a‎‎c‎‎i‎‎s‎‎t‎‎’‎
‎D‎‎o‎‎n‎‎ ‎‎L‎‎e‎‎m‎‎o‎‎n‎‎ ‎‎t‎‎o‎‎ ‎‎M‎‎e‎‎g‎‎y‎‎n‎‎ ‎‎K‎‎e‎‎l‎‎l‎‎y‎‎:‎‎ ‎‎'‎‎G‎‎o‎‎ ‎‎F‎‎*‎‎c‎‎k‎‎ ‎‎Y‎‎o‎‎u‎‎r‎‎s‎‎e‎‎l‎‎f‎‎,‎‎ ‎‎R‎‎a‎‎c‎‎i‎‎s‎‎t‎‎'‎
‎3‎‎,‎‎5‎‎7‎‎3‎
‎‘‎‎H‎‎a‎‎r‎‎r‎‎i‎‎e‎‎t‎‎ ‎‎t‎‎h‎‎e‎‎ ‎‎S‎‎p‎‎y‎‎’‎‎ ‎‎A‎‎c‎‎t‎‎r‎‎e‎‎s‎‎s‎‎ ‎‎M‎‎i‎‎c‎‎h‎‎e‎‎l‎‎l‎‎e‎‎ ‎‎T‎‎r‎‎a‎‎c‎‎h‎‎t‎‎e‎‎n‎‎b‎‎e‎‎r‎‎g‎‎ ‎‎D‎‎i‎‎e‎‎s‎‎ ‎‎A‎‎t‎‎ ‎‎3‎‎9‎
‎'‎‎H‎‎a‎‎r‎‎r‎‎i‎‎e‎‎t‎‎ ‎‎t‎‎h‎‎e‎‎ ‎‎S‎‎p‎‎y‎‎'‎‎ ‎‎A‎‎c‎‎t‎‎r‎‎e‎‎s‎‎s‎‎ ‎‎M‎‎i‎‎c‎‎h‎‎e‎‎l‎‎l‎‎e‎‎ ‎‎T‎‎r‎‎a‎‎c‎‎h‎‎t‎‎e‎‎n‎‎b‎‎e‎‎r‎‎g‎‎ ‎‎D‎‎i‎‎e‎‎s‎‎ ‎‎A‎‎t‎‎ ‎‎3‎‎9‎
‎1‎‎0‎‎7‎
‎B‎‎r‎‎i‎‎t‎‎a‎‎i‎‎n‎‎’‎‎s‎‎ ‎‎L‎‎e‎‎a‎‎d‎‎i‎‎n‎‎g‎‎ ‎‎L‎‎G‎‎B‎‎T‎‎Q‎‎+‎‎ ‎‎C‎‎h‎‎a‎‎r‎‎i‎‎t‎‎y‎‎ ‎‎S‎‎t‎‎o‎‎n‎‎e‎‎w‎‎a‎‎l‎‎l‎‎ ‎‎t‎‎o‎‎ ‎‎C‎‎u‎‎t‎‎ ‎‎H‎‎a‎‎l‎‎f‎‎ ‎‎S‎‎t‎‎a‎‎f‎‎f‎‎ ‎‎o‎‎v‎‎e‎‎r‎‎ ‎‎T‎‎r‎‎u‎‎m‎‎p‎‎ ‎‎F‎‎o‎‎r‎‎e‎‎i‎‎g‎‎n‎‎ ‎‎A‎‎i‎‎d‎‎ ‎‎F‎‎r‎‎e‎‎e‎‎z‎‎e‎‎:‎‎ ‎‎R‎
‎U‎‎K‎‎ ‎‎L‎‎G‎‎B‎‎T‎‎Q‎‎+‎‎ ‎‎C‎‎h‎‎a‎‎r‎‎i‎‎t‎‎y‎‎ ‎‎t‎‎o‎‎ ‎‎C‎‎u‎‎t‎‎ ‎‎H‎‎a‎‎l‎‎f‎‎ ‎‎S‎‎t‎‎a‎‎f‎‎f‎‎ ‎‎o‎‎v‎‎e‎‎r‎‎ ‎‎T‎‎r‎‎u‎‎m‎‎p‎‎ ‎‎F‎‎o‎‎r‎‎e‎‎i‎‎g‎‎n‎‎ ‎‎A‎‎i‎‎d‎‎ ‎‎F‎‎r‎‎e‎‎e‎‎z‎‎e‎‎:‎‎ ‎‎R‎‎e‎‎p‎‎o‎‎r‎‎t‎
‎1‎‎,‎‎0‎‎2‎‎1‎
‎M‎‎i‎‎c‎‎h‎‎a‎‎e‎‎l‎‎ ‎‎M‎‎o‎‎o‎‎r‎‎e‎‎:‎‎ ‎‎T‎‎r‎‎u‎‎m‎‎p‎‎ ‎‎M‎‎i‎‎g‎‎h‎‎t‎‎ ‎‎B‎‎e‎‎ ‎‎D‎‎e‎‎p‎‎o‎‎r‎‎t‎‎i‎‎n‎‎g‎‎ ‎‎I‎‎l‎‎l‎‎e‎‎g‎‎a‎‎l‎‎s‎‎ ‎‎W‎‎h‎‎o‎‎ ‎‎C‎‎o‎‎u‎‎l‎‎d‎‎ ‎‎‘‎‎C‎‎u‎‎r‎‎e‎‎ ‎‎C‎‎a‎‎n‎‎c‎‎e‎‎r‎‎’‎‎ ‎‎o‎‎r‎‎ ‎‎S‎‎t‎‎o‎‎p‎‎ ‎‎a‎‎n‎‎ ‎‎A‎‎s‎‎t‎
‎M‎‎i‎‎c‎‎h‎‎a‎‎e‎‎l‎‎ ‎‎M‎‎o‎‎o‎‎r‎‎e‎‎:‎‎ ‎‎T‎‎r‎‎u‎‎m‎‎p‎‎ ‎‎M‎‎i‎‎g‎‎h‎‎t‎‎ ‎‎B‎‎e‎‎ ‎‎D‎‎e‎‎p‎‎o‎‎r‎‎t‎‎i‎‎n‎‎g‎‎ ‎‎I‎‎l‎‎l‎‎e‎‎g‎‎a‎‎l‎‎s‎‎ ‎‎W‎‎h‎‎o‎‎ ‎‎C‎‎o‎‎u‎‎l‎‎d‎‎ ‎‎'‎‎C‎‎u‎‎r‎‎e‎‎ ‎‎C‎‎a‎‎n‎‎c‎‎e‎‎r‎‎'‎
‎2‎‎,‎‎3‎‎2‎‎7‎
‎S‎‎c‎‎h‎‎o‎‎o‎‎l‎‎-‎‎A‎‎g‎‎e‎‎ ‎‎C‎‎h‎‎i‎‎l‎‎d‎‎ ‎‎D‎‎i‎‎e‎‎s‎‎ ‎‎i‎‎n‎‎ ‎‎F‎‎i‎‎r‎‎s‎‎t‎‎ ‎‎U‎‎.‎‎S‎‎.‎‎ ‎‎M‎‎e‎‎a‎‎s‎‎l‎‎e‎‎s‎‎ ‎‎F‎‎a‎‎t‎‎a‎‎l‎‎i‎‎t‎‎y‎‎ ‎‎i‎‎n‎‎ ‎‎Y‎‎e‎‎a‎‎r‎‎s‎‎ ‎‎a‎‎s‎‎ ‎‎W‎‎e‎‎s‎‎t‎‎ ‎‎T‎‎e‎‎x‎‎a‎‎s‎‎ ‎‎O‎‎u‎‎t‎‎b‎‎r‎‎e‎‎a‎‎k‎‎ ‎‎G‎‎r‎‎o‎‎w‎‎s‎
‎F‎‎i‎‎r‎‎s‎‎t‎‎ ‎‎M‎‎e‎‎a‎‎s‎‎l‎‎e‎‎s‎‎ ‎‎D‎‎e‎‎a‎‎t‎‎h‎‎ ‎‎R‎‎e‎‎p‎‎o‎‎r‎‎t‎‎e‎‎d‎‎ ‎‎i‎‎n‎‎ ‎‎W‎‎e‎‎s‎‎t‎‎ ‎‎T‎‎e‎‎x‎‎a‎‎s‎‎ ‎‎a‎‎s‎‎ ‎‎O‎‎u‎‎t‎‎b‎‎r‎‎e‎‎a‎‎k‎‎ ‎‎G‎‎r‎‎o‎‎w‎‎s‎
‎7‎‎0‎‎0‎
‎U‎‎S‎‎D‎‎A‎‎ ‎‎S‎‎e‎‎c‎‎’‎‎y‎‎:‎‎ ‎‎W‎‎e‎‎’‎‎r‎‎e‎‎ ‎‎S‎‎t‎‎a‎‎r‎‎t‎‎i‎‎n‎‎g‎‎ ‎‎t‎‎o‎‎ ‎‎I‎‎m‎‎p‎‎o‎‎r‎‎t‎‎ ‎‎E‎‎g‎‎g‎‎s‎‎ ‎‎t‎‎o‎‎ ‎‎H‎‎e‎‎l‎‎p‎‎ ‎‎S‎‎h‎‎o‎‎r‎‎t‎‎a‎‎g‎‎e‎‎,‎‎ ‎‎W‎‎e‎‎’‎‎l‎‎l‎‎ ‎‎A‎‎l‎‎s‎‎o‎‎ ‎‎L‎‎i‎‎f‎‎t‎‎ ‎‎R‎‎e‎‎g‎‎u‎‎l‎
‎U‎‎S‎‎D‎‎A‎‎ ‎‎S‎‎e‎‎c‎‎'‎‎y‎‎:‎‎ ‎‎W‎‎e‎‎'‎‎r‎‎e‎‎ ‎‎I‎‎m‎‎p‎‎o‎‎r‎‎t‎‎i‎‎n‎‎g‎‎ ‎‎E‎‎g‎‎g‎‎s‎‎ ‎‎t‎‎o‎‎ ‎‎H‎‎e‎‎l‎‎p‎‎ ‎‎S‎‎u‎‎p‎‎p‎‎l‎‎y‎‎,‎‎ ‎‎W‎‎i‎‎l‎‎l‎‎ ‎‎A‎‎l‎‎s‎‎o‎‎ ‎‎L‎‎i‎‎f‎‎t‎‎ ‎‎R‎‎e‎‎g‎‎u‎‎l‎‎a‎‎t‎‎i‎‎o‎‎n‎‎s‎
‎7‎‎8‎‎6‎
‎E‎‎x‎‎c‎‎l‎‎u‎‎s‎‎i‎‎v‎‎e‎‎ ‎‎—‎‎ ‎‎R‎‎u‎‎b‎‎i‎‎o‎‎:‎‎ ‎‎N‎‎o‎‎t‎‎ ‎‎‘‎‎a‎‎ ‎‎S‎‎e‎‎r‎‎i‎‎o‎‎u‎‎s‎‎ ‎‎O‎‎f‎‎f‎‎e‎‎r‎‎’‎‎ ‎‎f‎‎o‎‎r‎‎ ‎‎U‎‎k‎‎r‎‎a‎‎i‎‎n‎‎e‎‎ ‎‎t‎‎o‎‎ ‎‎A‎‎s‎‎k‎‎ ‎‎f‎‎o‎‎r‎‎ ‎‎N‎‎u‎‎c‎‎l‎‎e‎‎a‎‎r‎‎ ‎‎W‎‎e‎‎a‎‎p‎‎o‎‎n‎‎s‎‎ ‎‎i‎‎n‎‎ ‎‎P‎‎e‎‎a‎‎c‎‎e‎‎ ‎‎T‎‎a‎‎l‎‎k‎
‎E‎‎x‎‎c‎‎l‎‎u‎‎s‎‎i‎‎v‎‎e‎‎ ‎‎—‎‎ ‎‎R‎‎u‎‎b‎‎i‎‎o‎‎:‎‎ ‎‎N‎‎o‎‎t‎‎ ‎‎‘‎‎a‎‎ ‎‎S‎‎e‎‎r‎‎i‎‎o‎‎u‎‎s‎‎ ‎‎O‎‎f‎‎f‎‎e‎‎r‎‎’‎‎ ‎‎f‎‎o‎‎r‎‎ ‎‎U‎‎k‎‎r‎‎a‎‎i‎‎n‎‎e‎‎ ‎‎t‎‎o‎‎ ‎‎A‎‎s‎‎k‎‎ ‎‎f‎‎o‎‎r‎‎ ‎‎N‎‎u‎‎k‎‎e‎‎s‎
‎4‎‎,‎‎6‎‎4‎‎8‎
‎N‎‎Y‎‎ ‎‎P‎‎o‎‎s‎‎t‎‎:‎‎ ‎‎A‎‎s‎‎h‎‎l‎‎e‎‎y‎‎ ‎‎S‎‎t‎‎.‎‎ ‎‎C‎‎l‎‎a‎‎i‎‎r‎‎ ‎‎B‎‎r‎‎a‎‎g‎‎g‎‎e‎‎d‎‎ ‎‎t‎‎h‎‎a‎‎t‎‎ ‎‎S‎‎h‎‎e‎‎ ‎‎H‎‎a‎‎d‎‎ ‎‎E‎‎l‎‎o‎‎n‎‎ ‎‎M‎‎u‎‎s‎‎k‎‎ ‎‎‘‎‎W‎‎r‎‎a‎‎p‎‎p‎‎e‎‎d‎‎ ‎‎A‎‎r‎‎o‎‎u‎‎n‎‎d‎‎ ‎‎H‎‎e‎‎r‎‎ ‎‎F‎‎i‎‎n‎‎g‎‎e‎‎r‎‎’‎
‎A‎‎s‎‎h‎‎l‎‎e‎‎y‎‎ ‎‎S‎‎t‎‎.‎‎ ‎‎C‎‎l‎‎a‎‎i‎‎r‎‎ ‎‎B‎‎r‎‎a‎‎g‎‎g‎‎e‎‎d‎‎ ‎‎t‎‎h‎‎a‎‎t‎‎ ‎‎S‎‎h‎‎e‎‎ ‎‎H‎‎a‎‎d‎‎ ‎‎E‎‎l‎‎o‎‎n‎‎ ‎‎M‎‎u‎‎s‎‎k‎‎ ‎‎'‎‎W‎‎r‎‎a‎‎p‎‎p‎‎e‎‎d‎‎ ‎‎A‎‎r‎‎o‎‎u‎‎n‎‎d‎‎ ‎‎H‎‎e‎‎r‎‎ ‎‎F‎‎i‎‎n‎‎g‎‎e‎‎r‎‎'‎
‎1‎‎8‎‎9‎
‎R‎‎e‎‎p‎‎o‎‎r‎‎t‎‎:‎‎ ‎‎M‎‎e‎‎d‎‎i‎‎a‎‎’‎‎s‎‎ ‎‎‘‎‎P‎‎r‎‎o‎‎o‎‎f‎‎’‎‎ ‎‎o‎‎f‎‎ ‎‎D‎‎O‎‎G‎‎E‎‎ ‎‎B‎‎a‎‎c‎‎k‎‎l‎‎a‎‎s‎‎h‎‎ ‎‎a‎‎t‎‎ ‎‎T‎‎o‎‎w‎‎n‎‎ ‎‎H‎‎a‎‎l‎‎l‎‎s‎‎ ‎‎W‎‎a‎‎s‎‎ ‎‎O‎‎r‎‎g‎‎a‎‎n‎‎i‎‎z‎‎e‎‎d‎‎ ‎‎b‎‎y‎‎ ‎‎L‎‎e‎‎f‎‎t‎‎i‎‎s‎‎t‎‎s‎
‎R‎‎e‎‎p‎‎o‎‎r‎‎t‎‎:‎‎ ‎‎L‎‎e‎‎f‎‎t‎‎i‎‎s‎‎t‎‎s‎‎ ‎‎O‎‎r‎‎g‎‎a‎‎n‎‎i‎‎z‎‎e‎‎d‎‎ ‎‎M‎‎e‎‎d‎‎i‎‎a‎‎’‎‎s‎‎ ‎‎‘‎‎P‎‎r‎‎o‎‎o‎‎f‎‎’‎‎ ‎‎o‎‎f‎‎ ‎‎D‎‎O‎‎G‎‎E‎‎ ‎‎B‎‎a‎‎c‎‎k‎‎l‎‎a‎‎s‎‎h‎‎ ‎‎a‎‎t‎‎ ‎‎T‎‎o‎‎w‎‎n‎‎ ‎‎H‎‎a‎‎l‎‎l‎‎s‎

‎S‎‎t‎‎o‎‎r‎‎e‎‎ ‎‎M‎‎a‎‎n‎‎a‎‎g‎‎e‎‎r‎‎ ‎‎F‎‎i‎‎g‎‎h‎‎t‎‎s‎‎ ‎‎o‎‎f‎‎f‎‎ ‎‎B‎‎a‎‎b‎‎o‎‎o‎‎n‎‎ ‎‎W‎‎h‎‎o‎‎ ‎‎B‎‎r‎‎o‎‎k‎‎e‎‎ ‎‎i‎‎n‎‎t‎‎o‎‎ ‎‎H‎‎e‎‎r‎‎ ‎‎B‎‎r‎‎o‎‎o‎‎k‎‎l‎‎y‎‎n‎‎ ‎‎S‎‎t‎‎o‎‎r‎‎e‎‎.‎

‎H‎‎e‎‎ ‎‎t‎‎h‎‎r‎‎e‎‎a‎‎t‎‎e‎‎n‎‎e‎‎d‎‎ ‎‎t‎‎o‎‎ ‎‎s‎‎h‎‎o‎‎o‎‎t‎‎ ‎‎h‎‎e‎‎r‎‎ ‎‎a‎‎s‎‎ ‎‎s‎‎h‎‎e‎‎ ‎‎h‎‎a‎‎n‎‎d‎‎e‎‎d‎‎ ‎‎h‎‎i‎‎m‎‎ ‎‎h‎‎e‎‎r‎‎ ‎‎m‎‎o‎‎n‎‎e‎‎y‎‎.‎


‎P‎‎o‎‎l‎‎i‎‎c‎‎e‎‎ ‎‎S‎‎e‎‎a‎‎r‎‎c‎‎h‎‎i‎‎n‎‎g‎‎ ‎‎f‎‎o‎‎r‎‎ ‎‎N‎‎i‎‎g‎‎g‎‎a‎‎r‎‎d‎‎ ‎‎W‎‎h‎‎o‎‎ ‎‎R‎‎a‎‎p‎‎e‎‎d‎‎ ‎‎W‎‎o‎‎m‎‎a‎‎n‎‎ ‎‎i‎‎n‎‎ ‎‎C‎‎a‎‎m‎‎d‎‎e‎‎n‎‎.‎


‎N‎‎e‎‎g‎‎r‎‎o‎‎ ‎‎M‎‎u‎‎s‎‎l‎‎i‎‎m‎‎ ‎‎S‎‎t‎‎a‎‎b‎‎s‎‎ ‎‎H‎‎i‎‎s‎‎ ‎‎M‎‎u‎‎d‎‎s‎‎h‎‎a‎‎r‎‎k‎‎ ‎‎G‎‎i‎‎r‎‎l‎‎f‎‎r‎‎i‎‎e‎‎n‎‎d‎‎ ‎‎1‎‎0‎‎0‎‎ ‎‎T‎‎i‎‎m‎‎e‎‎s‎‎.‎


‎D‎‎e‎‎l‎‎a‎‎w‎‎a‎‎r‎‎e‎‎ ‎‎M‎‎o‎‎n‎‎k‎‎e‎‎y‎‎ ‎‎G‎‎e‎‎t‎‎s‎‎ ‎‎7‎‎t‎‎h‎‎ ‎‎D‎‎U‎‎I‎‎.‎

‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎ ‎‎W‎‎e‎‎a‎‎t‎‎h‎‎e‎‎r‎‎.‎

‎W‎‎e‎‎d‎‎ ‎‎2‎‎6‎‎ ‎‎|‎‎ ‎‎D‎‎a‎‎y‎
‎8‎‎1‎‎°‎
‎1‎‎%‎
‎S‎
‎1‎‎4‎
‎ ‎
‎m‎‎p‎‎h‎
‎P‎‎a‎‎r‎‎t‎‎l‎‎y‎‎ ‎‎c‎‎l‎‎o‎‎u‎‎d‎‎y‎‎.‎‎ ‎‎H‎‎i‎‎g‎‎h‎‎ ‎‎8‎‎1‎‎F‎‎.‎‎ ‎‎W‎‎i‎‎n‎‎d‎‎s‎‎ ‎‎S‎‎ ‎‎a‎‎t‎‎ ‎‎1‎‎0‎‎ ‎‎t‎‎o‎‎ ‎‎2‎‎0‎‎ ‎‎m‎‎p‎‎h‎‎.‎

‎H‎‎u‎‎m‎‎i‎‎d‎‎i‎‎t‎‎y‎
‎4‎‎4‎‎%‎
‎U‎‎V‎‎ ‎‎I‎‎n‎‎d‎‎e‎‎x‎
‎6‎‎ ‎‎o‎‎f‎‎ ‎‎1‎‎1‎
‎S‎‎u‎‎n‎‎r‎‎i‎‎s‎‎e‎
‎6‎‎:‎‎5‎‎8‎‎ ‎‎a‎‎m‎
‎S‎‎u‎‎n‎‎s‎‎e‎‎t‎
‎6‎‎:‎‎2‎‎7‎‎ ‎‎p‎‎m‎
‎W‎‎e‎‎d‎‎ ‎‎2‎‎6‎‎ ‎‎|‎‎ ‎‎N‎‎i‎‎g‎‎h‎‎t‎
‎5‎‎7‎‎°‎
‎2‎‎2‎‎%‎
‎E‎
‎1‎‎1‎
‎ ‎
‎m‎‎p‎‎h‎
‎C‎‎o‎‎n‎‎s‎‎i‎‎d‎‎e‎‎r‎‎a‎‎b‎‎l‎‎e‎‎ ‎‎c‎‎l‎‎o‎‎u‎‎d‎‎i‎‎n‎‎e‎‎s‎‎s‎‎.‎‎ ‎‎L‎‎o‎‎w‎‎ ‎‎5‎‎7‎‎F‎‎.‎‎ ‎‎S‎‎S‎‎E‎‎ ‎‎w‎‎i‎‎n‎‎d‎‎s‎‎ ‎‎s‎‎h‎‎i‎‎f‎‎t‎‎i‎‎n‎‎g‎‎ ‎‎t‎‎o‎‎ ‎‎N‎‎ ‎‎a‎‎t‎‎ ‎‎1‎‎0‎‎ ‎‎t‎‎o‎‎ ‎‎1‎‎5‎‎ ‎‎m‎‎p‎‎h‎‎.‎

‎H‎‎u‎‎m‎‎i‎‎d‎‎i‎‎t‎‎y‎
‎8‎‎3‎‎%‎
‎U‎‎V‎‎ ‎‎I‎‎n‎‎d‎‎e‎‎x‎
‎0‎‎ ‎‎o‎‎f‎‎ ‎‎1‎‎1‎
‎M‎‎o‎‎o‎‎n‎‎r‎‎i‎‎s‎‎e‎
‎6‎‎:‎‎1‎‎4‎‎ ‎‎a‎‎m‎
‎W‎‎a‎‎n‎‎i‎‎n‎‎g‎‎ ‎‎C‎‎r‎‎e‎‎s‎‎c‎‎e‎‎n‎‎t‎
‎M‎‎o‎‎o‎‎n‎‎s‎‎e‎‎t‎
‎5‎‎:‎‎1‎‎3‎‎ ‎‎p‎‎m‎
‎T‎‎h‎‎u‎‎ ‎‎2‎‎7‎
‎C‎‎l‎‎o‎‎u‎‎d‎‎y‎
‎6‎‎9‎‎°‎
‎/‎‎4‎‎4‎‎°‎
‎6‎‎%‎
‎N‎‎N‎‎E‎‎ ‎‎1‎‎7‎‎ ‎‎m‎‎p‎‎h‎
‎F‎‎r‎‎i‎‎ ‎‎2‎‎8‎
‎S‎‎u‎‎n‎‎n‎‎y‎
‎7‎‎7‎‎°‎
‎/‎‎4‎‎9‎‎°‎
‎3‎‎%‎
‎S‎‎S‎‎E‎‎ ‎‎6‎‎ ‎‎m‎‎p‎‎h‎
‎S‎‎a‎‎t‎‎ ‎‎0‎‎1‎
‎P‎‎a‎‎r‎‎t‎‎l‎‎y‎‎ ‎‎C‎‎l‎‎o‎‎u‎‎d‎‎y‎
‎8‎‎4‎‎°‎
‎/‎‎5‎‎0‎‎°‎
‎7‎‎%‎
‎N‎‎N‎‎W‎‎ ‎‎6‎‎ ‎‎m‎‎p‎‎h‎
‎S‎‎u‎‎n‎‎ ‎‎0‎‎2‎
‎P‎‎a‎‎r‎‎t‎‎l‎‎y‎‎ ‎‎C‎‎l‎‎o‎‎u‎‎d‎‎y‎
‎8‎‎0‎‎°‎
‎/‎‎6‎‎1‎‎°‎
‎1‎‎1‎‎%‎
‎S‎‎S‎‎E‎‎ ‎‎1‎‎8‎‎ ‎‎m‎‎p‎‎h‎
‎M‎‎o‎‎n‎‎ ‎‎0‎‎3‎
‎M‎‎o‎‎s‎‎t‎‎l‎‎y‎‎ ‎‎C‎‎l‎‎o‎‎u‎‎d‎‎y‎
‎7‎‎8‎‎°‎
‎/‎‎6‎‎5‎‎°‎
‎2‎‎4‎‎%‎
‎S‎‎S‎‎E‎‎ ‎‎1‎‎6‎‎ ‎‎m‎‎p‎‎h‎
‎T‎‎u‎‎e‎‎ ‎‎0‎‎4‎
‎A‎‎M‎‎ ‎‎T‎‎h‎‎u‎‎n‎‎d‎‎e‎‎r‎‎s‎‎t‎‎o‎‎r‎‎m‎‎s‎
‎7‎‎9‎‎°‎
‎/‎‎5‎‎2‎‎°‎
‎4‎‎1‎‎%‎
‎W‎‎S‎‎W‎‎ ‎‎1‎‎4‎‎ ‎‎m‎‎p‎‎h‎
‎W‎‎e‎‎d‎‎ ‎‎0‎‎5‎
‎S‎‎u‎‎n‎‎n‎‎y‎
‎7‎‎3‎‎°‎
‎/‎‎4‎‎4‎‎°‎
‎1‎‎%‎
‎N‎‎N‎‎W‎‎ ‎‎1‎‎4‎‎ ‎‎m‎‎p‎‎h‎
‎T‎‎h‎‎u‎‎ ‎‎0‎‎6‎
‎P‎‎a‎‎r‎‎t‎‎l‎‎y‎‎ ‎‎C‎‎l‎‎o‎‎u‎‎d‎‎y‎
‎7‎‎3‎‎°‎
‎/‎‎5‎‎0‎‎°‎
‎1‎‎%‎
‎S‎‎E‎‎ ‎‎1‎‎2‎‎ ‎‎m‎‎p‎‎h‎
‎F‎‎r‎‎i‎‎ ‎‎0‎‎7‎
‎P‎‎a‎‎r‎‎t‎‎l‎‎y‎‎ ‎‎C‎‎l‎‎o‎‎u‎‎d‎‎y‎
‎7‎‎6‎‎°‎
‎/‎‎4‎‎9‎‎°‎
‎1‎‎5‎‎%‎
‎S‎‎W‎‎ ‎‎1‎‎4‎‎ ‎‎m‎‎p‎‎h‎
‎S‎‎a‎‎t‎‎ ‎‎0‎‎8‎
‎P‎‎a‎‎r‎‎t‎‎l‎‎y‎‎ ‎‎C‎‎l‎‎o‎‎u‎‎d‎‎y‎
‎7‎‎4‎‎°‎
‎/‎‎4‎‎2‎‎°‎
‎3‎‎%‎
‎N‎‎N‎‎W‎‎ ‎‎1‎‎3‎‎ ‎‎m‎‎p‎‎h‎
‎S‎‎u‎‎n‎‎ ‎‎0‎‎9‎
‎S‎‎u‎‎n‎‎n‎‎y‎
‎7‎‎1‎‎°‎
‎/‎‎4‎‎6‎‎°‎
‎2‎‎%‎
‎S‎‎S‎‎W‎‎ ‎‎1‎‎1‎‎ ‎‎m‎‎p‎‎h‎
‎M‎‎o‎‎n‎‎ ‎‎1‎‎0‎
‎M‎‎o‎‎s‎‎t‎‎l‎‎y‎‎ ‎‎S‎‎u‎‎n‎‎n‎‎y‎
‎7‎‎7‎‎°‎
‎/‎‎5‎‎8‎‎°‎
‎6‎‎%‎
‎S‎‎ ‎‎1‎‎6‎‎ ‎‎m‎‎p‎‎h‎
‎T‎‎u‎‎e‎‎ ‎‎1‎‎1‎
‎P‎‎a‎‎r‎‎t‎‎l‎‎y‎‎ ‎‎C‎‎l‎‎o‎‎u‎‎d‎‎y‎
‎8‎‎0‎‎°‎
‎/‎‎5‎‎8‎‎°‎
‎1‎‎2‎‎%‎
‎S‎‎S‎‎W‎‎ ‎‎1‎‎5‎‎ ‎‎m‎‎p‎‎h‎
‎W‎‎e‎‎d‎‎ ‎‎1‎‎2‎
‎M‎‎o‎‎s‎‎t‎‎l‎‎y‎‎ ‎‎S‎‎u‎‎n‎‎n‎‎y‎
‎8‎‎0‎‎°‎
‎/‎‎5‎‎3‎‎°‎
‎1‎‎6‎‎%‎
‎S‎‎W‎‎ ‎‎1‎‎3‎‎ ‎‎m‎‎p‎‎h‎

‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎
‎C‎‎u‎‎r‎‎r‎‎e‎‎n‎‎t‎‎ ‎‎t‎‎h‎‎r‎‎e‎‎a‎‎t‎‎:‎‎ ‎‎L‎‎a‎‎s‎‎t‎‎ ‎‎B‎‎l‎‎a‎‎s‎‎t‎‎ ‎‎O‎‎'‎‎ ‎‎W‎‎i‎‎n‎‎t‎‎e‎‎r‎‎.‎‎ ‎‎☃️‎‎️‎
‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎

‎M‎‎i‎‎k‎‎e‎‎m‎‎i‎‎k‎‎e‎‎v‎
‎M‎‎i‎‎c‎‎h‎‎a‎‎e‎‎l‎‎ ‎‎C‎‎o‎‎o‎‎m‎‎b‎‎s‎‎卐‎‎ ‎‎(‎‎a‎‎k‎‎a‎‎ ‎‎M‎‎i‎‎k‎‎e‎‎m‎‎i‎‎k‎‎e‎‎v‎‎,‎‎ ‎‎A‎‎n‎‎t‎‎i‎‎f‎‎u‎‎n‎‎g‎‎a‎‎l‎‎1‎‎6‎‎)‎‎ ‎‎i‎‎s‎‎ ‎‎a‎‎ ‎‎p‎‎a‎‎e‎‎d‎‎o‎‎p‎‎h‎‎i‎‎l‎‎e‎‎ ‎‎N‎‎e‎‎o‎‎-‎‎N‎‎a‎‎z‎‎i‎‎ ‎‎f‎‎a‎‎g‎‎g‎‎o‎‎t‎‎,‎‎ ‎‎v‎‎i‎‎r‎‎u‎‎l‎‎e‎‎n‎‎t‎‎ ‎‎a‎‎n‎‎t‎‎i‎‎-‎‎S‎‎e‎‎m‎‎i‎‎t‎‎e‎‎ ‎‎a‎‎n‎‎d‎‎ ‎‎p‎‎r‎‎o‎‎p‎‎o‎‎n‎‎e‎‎n‎‎t‎‎ ‎‎o‎‎f‎‎ ‎‎s‎‎c‎‎i‎‎e‎‎n‎‎t‎‎i‎‎f‎‎i‎‎c‎‎ ‎‎r‎‎a‎‎c‎‎i‎‎s‎‎m‎‎.‎‎ ‎‎W‎‎h‎‎e‎‎n‎‎ ‎‎n‎‎o‎‎t‎‎ ‎‎p‎‎o‎‎s‎‎t‎‎i‎‎n‎‎g‎‎ ‎‎r‎‎a‎‎c‎‎i‎‎s‎‎m‎‎ ‎‎o‎‎n‎‎l‎‎i‎‎n‎‎e‎‎ ‎‎—‎‎ ‎‎M‎‎i‎‎c‎‎h‎‎a‎‎e‎‎l‎‎ ‎‎i‎‎s‎‎ ‎‎a‎‎ ‎‎b‎‎i‎‎g‎‎ ‎‎s‎‎h‎‎i‎‎t‎‎p‎‎o‎‎s‎‎t‎‎e‎‎r‎‎ ‎‎(‎‎e‎‎m‎‎p‎‎h‎‎a‎‎s‎‎i‎‎s‎‎ ‎‎o‎‎n‎‎ ‎‎s‎‎h‎‎i‎‎t‎‎)‎‎ ‎‎w‎‎h‎‎o‎‎ ‎‎s‎‎p‎‎e‎‎n‎‎d‎‎s‎‎ ‎‎h‎‎i‎‎s‎‎ ‎‎t‎‎i‎‎m‎‎e‎‎ ‎‎t‎‎y‎‎p‎‎i‎‎n‎‎g‎‎ ‎‎d‎‎r‎‎i‎‎b‎‎b‎‎l‎‎e‎‎ ‎‎o‎‎n‎‎ ‎‎l‎‎o‎‎w‎‎-‎‎b‎‎r‎‎o‎‎w‎‎ ‎‎M‎‎a‎‎n‎‎o‎‎s‎‎p‎‎h‎‎e‎‎r‎‎e‎‎ ‎‎f‎‎o‎‎r‎‎u‎‎m‎‎s‎‎,‎‎ ‎‎i‎‎n‎‎c‎‎l‎‎u‎‎d‎‎i‎‎n‎‎g‎‎ ‎‎T‎‎h‎‎e‎‎ ‎‎B‎‎e‎‎e‎‎r‎‎ ‎‎B‎‎a‎‎r‎‎r‎‎e‎‎l‎‎.‎‎ ‎‎H‎‎e‎‎ ‎‎a‎‎l‎‎s‎‎o‎‎ ‎‎h‎‎a‎‎s‎‎ ‎‎m‎‎a‎‎n‎‎a‎‎g‎‎e‎‎d‎‎ ‎‎t‎‎o‎‎ ‎‎g‎‎e‎‎t‎‎ ‎‎o‎‎v‎‎e‎‎r‎‎ ‎‎a‎‎ ‎‎h‎‎u‎‎n‎‎d‎‎r‎‎e‎‎d‎‎ ‎‎o‎‎f‎‎ ‎‎h‎‎i‎‎s‎‎ ‎‎s‎‎o‎‎c‎‎k‎‎p‎‎u‎‎p‎‎p‎‎e‎‎t‎‎s‎‎ ‎‎b‎‎l‎‎o‎‎c‎‎k‎‎e‎‎d‎‎ ‎‎a‎‎t‎‎ ‎‎W‎‎i‎‎k‎‎i‎‎p‎‎e‎‎d‎‎i‎‎a‎‎ ‎‎a‎‎f‎‎t‎‎e‎‎r‎‎ ‎‎c‎‎a‎‎l‎‎l‎‎i‎‎n‎‎g‎‎ ‎‎T‎‎O‎‎W‎‎ ‎‎a‎‎d‎‎m‎‎i‎‎n‎‎s‎‎ ‎‎J‎‎e‎‎w‎‎s‎‎ ‎‎a‎‎n‎‎d‎‎ ‎‎p‎‎o‎‎s‎‎t‎‎i‎‎n‎‎g‎‎ ‎‎n‎‎o‎‎n‎‎-‎‎s‎‎t‎‎o‎‎p‎‎ ‎‎a‎‎b‎‎o‎‎u‎‎t‎‎ ‎‎b‎‎i‎‎o‎‎l‎‎o‎‎g‎‎i‎‎c‎‎a‎‎l‎‎ ‎‎r‎‎a‎‎c‎‎e‎‎,‎‎ ‎‎h‎‎i‎‎s‎‎ ‎‎s‎‎p‎‎e‎‎r‎‎g‎‎-‎‎o‎‎b‎‎s‎‎e‎‎s‎‎s‎‎i‎‎o‎‎n‎‎.‎‎ ‎‎A‎‎ ‎‎f‎‎o‎‎r‎‎m‎‎e‎‎r‎‎ ‎‎M‎‎e‎‎t‎‎a‎‎p‎‎e‎‎d‎‎i‎‎a‎‎ ‎‎s‎‎y‎‎s‎‎o‎‎p‎‎,‎‎ ‎‎M‎‎i‎‎c‎‎h‎‎a‎‎e‎‎l‎‎ ‎‎w‎‎a‎‎s‎‎ ‎‎b‎‎a‎‎n‎‎n‎‎e‎‎d‎‎ ‎‎t‎‎h‎‎e‎‎r‎‎e‎‎ ‎‎i‎‎n‎‎ ‎‎2‎‎0‎‎1‎‎4‎‎ ‎‎f‎‎o‎‎r‎‎ ‎‎b‎‎e‎‎i‎‎n‎‎g‎‎ ‎‎""‎‎a‎‎ ‎‎d‎‎r‎‎u‎‎n‎‎k‎‎e‎‎n‎‎ ‎‎t‎‎r‎‎o‎‎u‎‎b‎‎l‎‎e‎‎ ‎‎c‎‎a‎‎u‎‎s‎‎e‎‎r‎‎""‎‎,‎‎ ‎‎h‎‎e‎‎ ‎‎n‎‎o‎‎w‎‎ ‎‎a‎‎d‎‎m‎‎i‎‎n‎‎i‎‎s‎‎t‎‎r‎‎a‎‎t‎‎e‎‎s‎‎ ‎‎R‎‎i‎‎g‎‎h‎‎t‎‎p‎‎e‎‎d‎‎i‎‎a‎‎.‎

‎(‎‎(‎‎ ‎‎W‎‎e‎‎ ‎‎s‎‎t‎‎i‎‎l‎‎l‎‎ ‎‎l‎‎o‎‎v‎‎e‎‎ ‎‎y‎‎o‎‎u‎‎ ‎‎)‎‎)‎

‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎

‎W‎‎a‎‎n‎‎g‎‎a‎‎t‎‎h‎‎ ‎‎t‎‎e‎‎m‎‎p‎‎l‎‎e‎‎ ‎‎c‎‎o‎‎m‎‎p‎‎l‎‎e‎‎x‎‎ ‎‎i‎‎s‎‎ ‎‎a‎‎ ‎‎g‎‎r‎‎o‎‎u‎‎p‎‎ ‎‎o‎‎f‎‎ ‎‎H‎‎i‎‎n‎‎d‎‎u‎‎ ‎‎t‎‎e‎‎m‎‎p‎‎l‎‎e‎‎ ‎‎m‎‎o‎‎n‎‎u‎‎m‎‎e‎‎n‎‎t‎‎s‎‎ ‎‎i‎‎n‎‎ ‎‎W‎‎a‎‎n‎‎g‎‎a‎‎t‎‎h‎‎,‎‎ ‎‎c‎‎l‎‎o‎‎s‎‎e‎‎ ‎‎t‎‎o‎‎ ‎‎N‎‎a‎‎r‎‎a‎‎n‎‎a‎‎g‎‎,‎‎ ‎‎J‎‎a‎‎m‎‎m‎‎u‎‎ ‎‎a‎‎n‎‎d‎‎ ‎‎K‎‎a‎‎s‎‎h‎‎m‎‎i‎‎r‎‎,‎‎ ‎‎I‎‎n‎‎d‎‎i‎‎a‎‎.‎‎ ‎‎T‎‎h‎‎e‎‎ ‎‎c‎‎u‎‎r‎‎r‎‎e‎‎n‎‎t‎‎ ‎‎s‎‎t‎‎r‎‎u‎‎c‎‎t‎‎u‎‎r‎‎e‎‎ ‎‎w‎‎a‎‎s‎‎ ‎‎b‎‎u‎‎i‎‎l‎‎t‎‎ ‎‎b‎‎y‎‎ ‎‎L‎‎a‎‎l‎‎i‎‎t‎‎a‎‎d‎‎i‎‎t‎‎y‎‎a‎‎ ‎‎M‎‎u‎‎k‎‎t‎‎a‎‎p‎‎i‎‎d‎‎a‎‎ ‎‎o‎‎f‎‎ ‎‎t‎‎h‎‎e‎‎ ‎‎K‎‎a‎‎r‎‎k‎‎o‎‎t‎‎a‎‎ ‎‎d‎‎y‎‎n‎‎a‎‎s‎‎t‎‎y‎‎ ‎‎i‎‎n‎‎ ‎‎t‎‎h‎‎e‎‎ ‎‎8‎‎t‎‎h‎‎ ‎‎c‎‎e‎‎n‎‎t‎‎u‎‎r‎‎y‎‎ ‎‎C‎‎E‎‎ ‎‎b‎‎u‎‎t‎‎ ‎‎a‎‎r‎‎e‎‎ ‎‎n‎‎o‎‎w‎‎ ‎‎r‎‎u‎‎i‎‎n‎‎s‎‎.‎‎ ‎‎T‎‎h‎‎e‎‎ ‎‎t‎‎e‎‎m‎‎p‎‎l‎‎e‎‎ ‎‎i‎‎s‎‎ ‎‎c‎‎o‎‎n‎‎s‎‎t‎‎r‎‎u‎‎c‎‎t‎‎e‎‎d‎‎ ‎‎o‎‎u‎‎t‎‎ ‎‎o‎‎f‎‎ ‎‎l‎‎o‎‎c‎‎a‎‎l‎‎ ‎‎g‎‎r‎‎e‎‎y‎‎ ‎‎g‎‎r‎‎a‎‎n‎‎i‎‎t‎‎e‎‎ ‎‎a‎‎n‎‎d‎‎ ‎‎c‎‎o‎‎n‎‎s‎‎i‎‎s‎‎t‎‎s‎‎ ‎‎o‎‎f‎‎ ‎‎t‎‎w‎‎o‎‎ ‎‎c‎‎o‎‎m‎‎p‎‎l‎‎e‎‎x‎‎e‎‎s‎‎,‎‎ ‎‎d‎‎e‎‎d‎‎i‎‎c‎‎a‎‎t‎‎e‎‎d‎‎ ‎‎r‎‎e‎‎s‎‎p‎‎e‎‎c‎‎t‎‎i‎‎v‎‎e‎‎l‎‎y‎‎ ‎‎t‎‎o‎‎ ‎‎S‎‎h‎‎i‎‎v‎‎a‎‎ ‎‎J‎‎y‎‎e‎‎s‎‎h‎‎t‎‎h‎‎e‎‎s‎‎a‎‎ ‎‎a‎‎n‎‎d‎‎ ‎‎S‎‎h‎‎i‎‎v‎‎a‎‎ ‎‎B‎‎h‎‎u‎‎t‎‎e‎‎s‎‎h‎‎w‎‎a‎‎r‎‎a‎‎,‎‎ ‎‎w‎‎i‎‎t‎‎h‎‎ ‎‎a‎‎ ‎‎c‎‎e‎‎n‎‎t‎‎r‎‎a‎‎l‎‎ ‎‎p‎‎a‎‎v‎‎i‎‎l‎‎i‎‎o‎‎n‎‎ ‎‎i‎‎n‎‎ ‎‎b‎‎e‎‎t‎‎w‎‎e‎‎e‎‎n‎‎.‎‎ ‎‎T‎‎h‎‎e‎‎ ‎‎t‎‎e‎‎m‎‎p‎‎l‎‎e‎‎ ‎‎m‎‎a‎‎r‎‎k‎‎s‎‎ ‎‎t‎‎h‎‎e‎‎ ‎‎s‎‎t‎‎a‎‎r‎‎t‎‎i‎‎n‎‎g‎‎ ‎‎p‎‎o‎‎i‎‎n‎‎t‎‎ ‎‎o‎‎f‎‎ ‎‎p‎‎i‎‎l‎‎g‎‎r‎‎i‎‎m‎‎a‎‎g‎‎e‎‎s‎‎ ‎‎t‎‎o‎‎ ‎‎t‎‎h‎‎e‎‎ ‎‎G‎‎a‎‎n‎‎g‎‎a‎‎b‎‎a‎‎l‎‎ ‎‎L‎‎a‎‎k‎‎e‎‎,‎‎ ‎‎a‎‎ ‎‎h‎‎i‎‎g‎‎h‎‎-‎‎a‎‎l‎‎t‎‎i‎‎t‎‎u‎‎d‎‎e‎‎ ‎‎a‎‎l‎‎p‎‎i‎‎n‎‎e‎‎ ‎‎l‎‎a‎‎k‎‎e‎‎ ‎‎i‎‎n‎‎ ‎‎t‎‎h‎‎e‎‎ ‎‎H‎‎i‎‎m‎‎a‎‎l‎‎a‎‎y‎‎a‎‎s‎‎ ‎‎c‎‎o‎‎n‎‎s‎‎i‎‎d‎‎e‎‎r‎‎e‎‎d‎‎ ‎‎b‎‎y‎‎ ‎‎K‎‎a‎‎s‎‎h‎‎m‎‎i‎‎r‎‎i‎‎ ‎‎H‎‎i‎‎n‎‎d‎‎u‎‎s‎‎ ‎‎t‎‎o‎‎ ‎‎b‎‎e‎‎ ‎‎a‎‎n‎‎ ‎‎a‎‎b‎‎o‎‎d‎‎e‎‎ ‎‎o‎‎f‎‎ ‎‎S‎‎h‎‎i‎‎v‎‎a‎‎.‎‎ ‎‎T‎‎h‎‎i‎‎s‎‎ ‎‎p‎‎h‎‎o‎‎t‎‎o‎‎g‎‎r‎‎a‎‎p‎‎h‎‎ ‎‎s‎‎h‎‎o‎‎w‎‎s‎‎ ‎‎t‎‎h‎‎e‎‎ ‎‎m‎‎a‎‎i‎‎n‎‎ ‎‎t‎‎e‎‎m‎‎p‎‎l‎‎e‎‎ ‎‎o‎‎f‎‎ ‎‎t‎‎h‎‎e‎‎ ‎‎s‎‎i‎‎t‎‎e‎‎'‎‎s‎‎ ‎‎w‎‎e‎‎s‎‎t‎‎e‎‎r‎‎n‎‎ ‎‎c‎‎o‎‎m‎‎p‎‎l‎‎e‎‎x‎‎.‎

‎P‎‎h‎‎o‎‎t‎‎o‎‎g‎‎r‎‎a‎‎p‎‎h‎‎ ‎‎c‎‎r‎‎e‎‎d‎‎i‎‎t‎‎:‎‎ ‎‎B‎‎a‎‎s‎‎a‎‎v‎‎a‎‎r‎‎a‎‎j‎‎ ‎‎K‎‎.‎‎ ‎‎K‎‎o‎‎r‎‎k‎‎a‎‎r‎‎;‎‎ ‎‎e‎‎d‎‎i‎‎t‎‎e‎‎d‎‎ ‎‎b‎‎y‎‎ ‎‎U‎‎n‎‎p‎‎e‎‎t‎‎i‎‎t‎‎p‎‎r‎‎o‎‎l‎‎e‎‎X‎

‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎‎.‎

‎W‎‎e‎‎l‎‎l‎‎ ‎‎J‎‎e‎‎e‎‎z‎‎o‎‎r‎‎z‎‎,‎‎ ‎‎I‎‎ ‎‎g‎‎u‎‎e‎‎s‎‎s‎‎ ‎‎t‎‎h‎‎a‎‎t‎‎'‎‎s‎‎ ‎‎i‎‎t‎‎.‎‎ ‎‎A‎‎n‎‎o‎‎t‎‎h‎‎e‎‎r‎‎ ‎‎n‎‎e‎‎w‎‎s‎‎ ‎‎i‎‎s‎‎ ‎‎d‎‎o‎‎n‎‎e‎‎ ‎‎f‎‎o‎‎r‎‎ ‎‎t‎‎h‎‎e‎‎ ‎‎d‎‎a‎‎y‎‎.‎‎ ‎‎I‎‎t‎‎ ‎‎a‎‎l‎‎l‎‎ ‎‎h‎‎a‎‎p‎‎p‎‎e‎‎n‎‎s‎‎ ‎‎s‎‎o‎‎ ‎‎f‎‎a‎‎s‎‎t‎‎.‎‎ ‎‎I‎‎ ‎‎d‎‎o‎‎n‎‎'‎‎t‎‎ ‎‎h‎‎a‎‎v‎‎e‎‎ ‎‎a‎‎n‎‎y‎‎t‎‎h‎‎i‎‎n‎‎g‎‎ ‎‎t‎‎o‎‎ ‎‎s‎‎a‎‎y‎‎ ‎‎f‎‎o‎‎r‎‎ ‎‎y‎‎o‎‎u‎‎ ‎‎l‎‎o‎‎s‎‎e‎‎r‎‎s‎‎,‎‎ ‎‎I‎‎ ‎‎g‎‎u‎‎e‎‎s‎‎s‎‎ ‎‎I‎‎'‎‎l‎‎l‎‎ ‎‎b‎‎e‎‎ ‎‎b‎‎a‎‎c‎‎k‎‎ ‎‎t‎‎o‎‎m‎‎o‎‎r‎‎r‎‎o‎‎w‎‎ ‎‎f‎‎o‎‎r‎‎ ‎‎m‎‎o‎‎r‎‎e‎‎ ‎‎o‎‎f‎‎ ‎‎t‎‎h‎‎e‎‎ ‎‎s‎‎a‎‎m‎‎e‎‎ ‎‎b‎‎u‎‎l‎‎l‎‎s‎‎h‎‎i‎‎t‎‎.‎‎ ‎‎U‎‎n‎‎t‎‎i‎‎l‎‎ ‎‎t‎‎h‎‎e‎‎n‎‎ ‎‎I‎‎'‎‎l‎‎l‎‎ ‎‎b‎‎e‎‎ ‎‎r‎‎u‎‎b‎‎b‎‎i‎‎n‎‎g‎‎ ‎‎m‎‎y‎‎ ‎‎d‎‎i‎‎c‎‎k‎‎ ‎‎a‎‎g‎‎a‎‎i‎‎n‎‎s‎‎t‎‎ ‎‎s‎‎o‎‎m‎‎e‎‎ ‎‎b‎‎a‎‎b‎‎i‎‎e‎‎s‎‎.‎"
Brsk3wTZ,model.h,topkedi,C++,Thursday 27th of February 2025 02:35:19 PM CDT,"#ifndef __MODEL_H__
#define __MODEL_H__

#include <vector>
#include ""tgaimage.h""
#include ""geometry.h""
#include ""SimpleMath.h""

using namespace DirectX::SimpleMath;

class Model {
private:
	std::vector<Vector3> verts_;
	std::vector<std::vector<Vec3i> > faces_; // attention, this Vec3i means vertex/uv/normal
	std::vector<Vector3> norms_;
	std::vector<Vector2> uv_;
	TGAImage diffusemap_;
	TGAImage specularmap_;
	TGAImage normalmap_;
	void load_texture(std::string filename, const char* suffix, TGAImage& img);
public:
	Model(const char* filename);
	~Model();
	int nverts();
	int nfaces();
	Vector3 vert(int i);
	Vec2i uv(int iface, int nvert);
	TGAColor diffuse(Vec2i uv);
	std::vector<int> face(int idx);
	float specular(Vector3 uvf);
	Vector3 normal(int iface, int nthvert);
	Vector3 vert(int iface, int nthvert);
};

#endif //__MODEL_H__"
dXQbgNV0,lab3.cpp,topkedi,C++,Thursday 27th of February 2025 02:34:33 PM CDT,"#define _USE_MATH_DEFINES
#include<iostream>
#include<cmath>
#include<algorithm>
#include <optional>
#define NOMINMAX
#include <d3d12.h>
#include ""SimpleMath.h""
#include ""tgaimage.h""
#include ""model.h""
#include ""Camera.h""
#include ""string""
using namespace DirectX::SimpleMath;

std::ostream& operator<< (std::ostream& a, Vector3& v) {
    return a << v.x << "" "" << v.y << "" "" << v.z << ""  "";
}

std::ostream& operator<< (std::ostream& a, Vector4& v) {
    return a << v.x << "" "" << v.y << "" "" << v.z << "" "" << v.w << ""  "";
}

const TGAColor white = TGAColor(255, 255, 255, 255);
const TGAColor red = TGAColor(255, 0, 0, 255);

Vector3 barycentric(Vector2 A, Vector2 B, Vector2 C, Vector2 P) {
    Vector3 s[2];
    s[0].x = C.x - A.x;
    s[0].y = B.x - A.x;
    s[0].z = A.x - P.x;
    s[1].x = C.y - A.y;
    s[1].y = B.y - A.y;
    s[1].z = A.y - P.y;
    Vector3 u = s[0].Cross(s[1]);
    if (std::abs(u.z) > 1e-2) return Vector3(1.f - (u.x + u.y) / u.z, u.y / u.z, u.x / u.z);
    return Vector3(-1, 1, 1);
}

Model* model = NULL;
Vector3 light_dir(1, 0, 1);
Camera camera;

struct IShader {
    virtual ~IShader() {};
    virtual Vector3 vertex(int iface, int nthvert, Matrix world) = 0;
    virtual bool fragment(Vector3 bar, TGAColor& color) = 0;
};

struct Shader : public IShader {
    Vector3 varying_intensity;
    mat<2, 3, float> varying_uv;

    virtual Vector3 vertex(int iface, int nthvert, Matrix world) {
        varying_uv.set_col(nthvert, model->uv(iface, nthvert));
        float light_coeff = model->normal(iface, nthvert).Dot(light_dir);
        float val = std::max(0.f, light_coeff);
        if (nthvert == 0) varying_intensity.x = val;
        else if (nthvert == 1) varying_intensity.y = val;
        else if (nthvert == 2) varying_intensity.z = val;
        Vector3 vert = model->vert(iface, nthvert);
        Vector4 gl_Vertex(vert);
        gl_Vertex.w = 1;
        gl_Vertex = Vector4::Transform(gl_Vertex, world);
        Vector4 camera_coordinates = camera.ProjectToCamera(gl_Vertex);
        return Vector3(camera_coordinates.x / camera_coordinates.w,
            camera_coordinates.y / camera_coordinates.w,
            camera_coordinates.z / camera_coordinates.w);
    }

    virtual bool fragment(Vector3 bar, TGAColor& color) {
        auto uv = varying_uv * vec<3, float>(bar.x, bar.y, bar.z);
        float intensity = varying_intensity.Dot(bar);
        intensity = std::max(0.f, std::min(intensity, 1.f));
        color = model->diffuse(uv) * intensity;
        return false;
    }
};

void line(int x0, int y0, int x1, int y1, TGAImage& image, TGAColor color) {
    bool steep = false;
    if (std::abs(x0 - x1) < std::abs(y0 - y1)) {
        std::swap(x0, y0);
        std::swap(x1, y1);
        steep = true;
    }
    if (x0 > x1) {
        std::swap(x0, x1);
        std::swap(y0, y1);
    }
    int dx = x1 - x0;
    int dy = y1 - y0;
    float derror = std::abs(dy / float(dx));
    float error = 0;
    int y = y0;
    for (int x = x0; x <= x1; x++) {
        if (steep) image.set(y, x, color);
        else image.set(x, y, color);
        error += derror;
        if (error > .5) {
            y += (y1 > y0 ? 1 : -1);
            error -= 1.;
        }
    }
}



void triangle(Vector3* pts, IShader& shader, TGAImage& image, TGAImage& zbuffer) {
    Vector2 bboxmin(std::numeric_limits<float>::max(), std::numeric_limits<float>::max());
    Vector2 bboxmax(-std::numeric_limits<float>::max(), -std::numeric_limits<float>::max());
    for (int i = 0; i < 3; i++) {
        bboxmin.x = std::min(bboxmin.x, pts[i].x);
        bboxmax.x = std::max(bboxmax.x, pts[i].x);
        bboxmin.y = std::min(bboxmin.y, pts[i].y);
        bboxmax.y = std::max(bboxmax.y, pts[i].y);
    }
    Vec2i P;
    TGAColor color;
    for (P.x = bboxmin.x; P.x <= bboxmax.x; P.x++) {
        for (P.y = bboxmin.y; P.y <= bboxmax.y; P.y++) {
            Vector3 c = barycentric(Vector2(pts[0].x, pts[0].y),
                Vector2(pts[1].x, pts[1].y),
                Vector2(pts[2].x, pts[2].y),
                Vector2(static_cast<float>(P.x), static_cast<float>(P.y)));
            float z = pts[0].z * c.x + pts[1].z * c.y + pts[2].z * c.z;
            int frag_depth = std::max(0, std::min(255, int(z + .5)));
            if (c.x < 0 || c.y < 0 || c.z < 0) continue;
            if (zbuffer.get(P.x, P.y)[0] >= frag_depth) continue;
            bool discard = shader.fragment(c, color);
            if (!discard) {
                zbuffer.set(P.x, P.y, TGAColor(frag_depth));
                image.set(P.x, P.y, color);
            }
        }
    }
}

void drawImage() {
    int width = 1000;
    int height = 1000;

    for (int a = 0;a <= 10;a++)
    {
        TGAImage image(width, height, TGAImage::RGB);
        TGAImage* zbuffer = new TGAImage(width, height, TGAImage::Format::GRAYSCALE);
        light_dir.Normalize();

        Vector3 eye(0, 0, 3);
        Vector3 center(0, 0, 0);
        Vector3 up(0, 1, 0);
        camera = Camera(eye, center, up, 1, 0.5, width, height);
        Shader shader;
        Matrix world = Matrix::Identity;
        model = new Model(R""(african_head.obj)"");
        for (int i = 0; i < model->nfaces(); i++) {
            if (i % 100 == 0) {
                std::cout << i << '\r' << std::flush;
            }
            std::vector<int> face = model->face(i);
            Vector3 screen_coords[3];
            Vector3 model_coords[3];
            for (int j = 0; j < 3; j++) {
                Vector3 v = model->vert(face[j]);
                model_coords[j] = v;
                screen_coords[j] = shader.vertex(i, j, world);
            }
            triangle(screen_coords, shader, image, *zbuffer);
        }

        model = new Model(R""(african_head_eye_inner.obj)"");
        for (int i = 0; i < model->nfaces(); i++) {
            if (i % 100 == 0) {
                std::cout << i << '\r' << std::flush;
            }
            std::vector<int> face = model->face(i);
            Vector3 screen_coords[3];
            Vector3 model_coords[3];
            for (int j = 0; j < 3; j++) {
                Vector3 v = model->vert(face[j]);
                model_coords[j] = v;
                screen_coords[j] = shader.vertex(i, j, Matrix::CreateRotationZ(a * 6.28 / 10));
            }
            triangle(screen_coords, shader, image, *zbuffer);

        }

        std::string name = ""output"" + std::to_string(a) + "".tga"";
        image.flip_vertically();
        image.write_tga_file(name.c_str());
        system(name.c_str());
    }
}

int main() {
    drawImage();
    return 0;
}"
Dxvy5Jxu,🔥 Make $500+ from APE AIRDROP 🔥,yinyin99,JavaScript,Thursday 27th of February 2025 02:31:58 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#EL9QSDBj2f"
dKy5ZTPc,Untitled,Enlight432,Python,Thursday 27th of February 2025 02:29:09 PM CDT,"import ctypes
import time
from threading import Timer

# دسترسی به توابع ویندوز
user32 = ctypes.windll.user32
kernel32 = ctypes.windll.kernel32

# ثابت‌ها برای انواع نشانگرهای سیستمی
SYSTEM_CURSORS = [
    32512,  # IDC_ARROW
    32513,  # IDC_IBEAM
    32514,  # IDC_WAIT
    32515,  # IDC_CROSS
    32516,  # IDC_UPARROW
    32642,  # IDC_SIZENWSE
    32643,  # IDC_SIZENESW
    32644,  # IDC_SIZEWE
    32645,  # IDC_SIZENS
    32646,  # IDC_SIZEALL
    32648,  # IDC_NO
    32649,  # IDC_HAND
    32650,  # IDC_APPSTARTING
]

# دیکشنری برای ذخیره دسته‌های نشانگر
cursors = {}

# متغیر برای ردیابی وضعیت نشانگر
visible = True
hidden = False

# متغیرهای مربوط به موقعیت ماوس
last_mouse_pos = None
last_move_time = time.time()

def system_cursor(cmd):
    global visible, cursors

    if cmd == ""Reload"" or not cursors:
        # بارگذاری و ذخیره نشانگرهای پیش‌فرض و خالی
        for cursor_id in SYSTEM_CURSORS:
            # بارگذاری نشانگر پیش‌فرض
            h_cursor = user32.LoadCursorW(0, cursor_id)
            h_default = user32.CopyImage(h_cursor, 2, 0, 0, 0)

            # ایجاد نشانگر خالی (32x32 پیکسل)
            and_mask = b'\xFF' * (32 * 4)  # ماسک AND (همه 1)
            xor_mask = b'\x00' * (32 * 4)  # ماسک XOR (همه 0)
            h_blank = user32.CreateCursor(0, 0, 0, 32, 32,
                                        and_mask, xor_mask)

            cursors[cursor_id] = {
                'default': h_default,
                'blank': h_blank
            }

    # تغییر وضعیت نشانگر
    if cmd == ""Show"":
        visible = True
    elif cmd == ""Hide"":
        visible = False
    elif cmd == ""Toggle"":
        visible = not visible
    else:
        return

    # اعمال تغییرات به تمام نشانگرهای سیستمی
    for cursor_id, handles in cursors.items():
        h_cursor = user32.CopyImage(
            handles['default'] if visible else handles['blank'],
            2, 0, 0, 0
        )
        user32.SetSystemCursor(h_cursor, cursor_id)

def get_mouse_position():
    # ساختار برای دریافت موقعیت ماوس
    class POINT(ctypes.Structure):
        _fields_ = [(""x"", ctypes.c_long), (""y"", ctypes.c_long)]

    pt = POINT()
    user32.GetCursorPos(ctypes.byref(pt))
    return (pt.x, pt.y)

def check_mouse():
    global hidden, last_mouse_pos, last_move_time

    # دریافت موقعیت فعلی ماوس
    current_pos = get_mouse_position()
    current_time = time.time()

    # اگر موقعیت ماوس تغییر کرده باشد
    if last_mouse_pos is None:
        last_mouse_pos = current_pos
    elif current_pos != last_mouse_pos:
        last_move_time = current_time
        last_mouse_pos = current_pos

    # محاسبه زمان بی‌فعالیتی ماوس (بر اساس آخرین حرکت)
    idle_time = current_time - last_move_time

    # اگر ماوس بیش از 2 ثانیه بی‌حرکت باشد و نشانگر قابل مشاهده باشد
    if idle_time > 2 and not hidden:
        system_cursor(""Hide"")
        hidden = True
    # اگر ماوس حرکت کرده و نشانگر مخفی باشد
    elif idle_time < 2 and hidden:
        system_cursor(""Show"")
        hidden = False

    # تنظیم تایمر برای بررسی بعدی
    Timer(0.1, check_mouse).start()

def main():
    # اطمینان از نمایش نشانگر هنگام خروج
    import atexit
    atexit.register(lambda: system_cursor(""Show""))

    # بارگذاری اولیه نشانگرها
    system_cursor(""Reload"")

    # شروع بررسی ماوس
    check_mouse()

    # نگه داشتن برنامه در حال اجرا
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        pass

if __name__ == ""__main__"":
    main()"
RbSS7h5a,🚨 FINAL CALL - $APE AIRDROP 🚨,yinyin99,JavaScript,Thursday 27th of February 2025 02:21:39 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#BZoceBwAvZ"
aAijhkaX,🚨 LAST CHANCE TO CLAIM APE COINS 🚨,herrderringe,JavaScript,Thursday 27th of February 2025 02:09:13 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#fDcxsfym4X"
PAi0EC7p,FREE CRYPTO,herrderringe,JavaScript,Thursday 27th of February 2025 01:57:14 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#vT4OZsxzQ7"
zVgC9LPR,🔥 Make $500+ from APE AIRDROP 🔥,herrderringe,JavaScript,Thursday 27th of February 2025 01:45:18 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#zeXlp0cmEe"
SqhsTuV8,HW 2_10_2,rukvir,C#,Thursday 27th of February 2025 01:37:50 PM CDT,"using System;

namespace HW_2025
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int gradeCounter = 0;
            int degreeNumber = 2;
            int minGradeNumber = 1;
            int startNumber = 0;
            int endhNumber = 100;

            Random random = new Random();
            int userRandomNumber = random.Next(startNumber, endhNumber + 1);

            Console.WriteLine($""Сгенерированное число: {userRandomNumber}"");
            Console.WriteLine(""----------------------------"");

            while(minGradeNumber <= userRandomNumber)
            {
                gradeCounter++;
                minGradeNumber *= degreeNumber;  
            }      

            Console.WriteLine($""Минимальная степень двойки, превосходящая {userRandomNumber}: {degreeNumber}^{gradeCounter} = {minGradeNumber}"");
            Console.ReadKey();
        }
    }
}"
gN45ewdA,🚨 FINAL CALL - $APE AIRDROP 🚨,herrderringe,JavaScript,Thursday 27th of February 2025 01:34:48 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#U2NsIj7QpG"
zzB8G4XJ,Emily MEGA XENPASTE FSSQUAD THEJAVASEA THOTBB FREE DOWNLOAD,Larveie,HTML,Thursday 27th of February 2025 01:33:31 PM CDT,https://xenforo.be/ New Domain TheJavasea.net https://thejavasea.me/forums/s.30/ FREE DOWNLOAD STATEWINS -- MEGA -- JAVA SEA AIO TLP DAILY PACKS - CHECK XENFORO.BE XENPASTE TOP PASTELINK
D1Jaycyh,🚨 LAST CHANCE TO CLAIM APE COINS 🚨,herrderringe,JavaScript,Thursday 27th of February 2025 01:24:45 PM CDT,"https://claimdrop.my/?g=2PSGWUKRS99HLEYFKIHAZZ8AAYB2A3ADCFJQNVWFQMUSD

There is just one hour left to claim new APE coins - you can get between $400 to $800

If you claim them from my reflink we both gonna get 10% more. To claim it just connect your active wallet and accept the incoming transaction with coins.

#UemV64I8ru"
ST5FvJ03,LPT_01,dllbridge,C,Thursday 27th of February 2025 01:18:08 PM CDT,"//  Ниже приведён пример программы, которая записывает и читает данные через LPT-порт в режиме EPP/ECP. 
//                                                        Для этого используется API Windows.

#include <windows.h>
#include   <stdio.h>

#define LPT_PORT 0x378                                  // Адрес LPT-порта (888 в десятичном)

int main() 
{
    HANDLE hLPT;
    char dataToSend = 0x55;                                              // Данные для записи
    char dataReceived;
  
    hLPT = CreateFile(""LPT1"", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL);
    if (hLPT == INVALID_HANDLE_VALUE)                                   // Открываем LPT-порт
    {
        printf(""Ошибка открытия LPT-порта!\n"");
        return 1;
    }

    if (!WriteFile(hLPT, &dataToSend, 1, NULL, NULL))                 // Запись данных в порт
    {
        printf(""Ошибка записи в порт!\n"");
        CloseHandle(hLPT);
        return 1;
    }
    printf(""Данные записаны: 0x%02X\n"", dataToSend);

    if (!ReadFile(hLPT, &dataReceived, 1, NULL, NULL))              // Чтение данных из порта
    {
        printf(""Ошибка чтения из порта!\n"");
        CloseHandle(hLPT);
        return 1;
    }
    printf(""Данные прочитаны: 0x%02X\n"", dataReceived);
    CloseHandle(hLPT);                                                      // Закрываем порт
return 0;
}









//   Альтернативный подход:
//   Если режим EPP/ECP недоступен, можно использовать библиотеку inpout32 или inpoutx64 для прямого доступа к порту. 
//   Эта библиотека позволяет читать и записывать данные в порт даже в стандартном режиме.

//   Пример использования inpout32:







#include <windows.h>
#include <stdio.h>
#include ""inpout32.h""                    // Подключите заголовочный файл inpout32

#define LPT_PORT 0x378                       // Адрес LPT-порта (888 в десятичном)

//////////////////////////////////////////////////
int main() 
{

    char dataToSend = 0x55;                                   // Данные для записи
    char dataReceived;

    Out32(LPT_PORT, dataToSend);                           // Запись данных в порт
    printf(""Данные записаны: 0x%02X\n"", dataToSend);
                                                         // Чтение данных из порта
    dataReceived = Inp32(LPT_PORT + 1);                    // Чтение линий статуса
    printf(""Данные прочитаны: 0x%02X\n"", dataReceived);

return 0;
}"
yAdDxUFV,Untitled,Onesible,JavaScript,Thursday 27th of February 2025 01:15:25 PM CDT,"function solve(text) {
    console.log(text.split(/(?=[A-Z])/).join(', '))
}
"
