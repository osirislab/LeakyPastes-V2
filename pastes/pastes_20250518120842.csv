id,title,username,language,date,content
KGs9bezs,Make 1000$ in 24 hours [Method],christiancheater,JavaScript,Sunday 18th of May 2025 07:05:41 AM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

08793
"
8nbWa7Zf,OnOffSwitch,Fraeric123,Lua,Sunday 18th of May 2025 07:02:35 AM CDT,"local component = require(""component"")
local sides = require(""sides"")
local rs = component.redstone

-- Nastav směr, kde máš připojené Redstone zařízení (např. ""back"", ""right"", apod.)
local outputSide = sides.top

-- Funkce pro zapnutí výstupu
local function zapnout()
    rs.setOutput(outputSide, 15)
    print(""Redstone zapnut."")
    menu()
end

-- Funkce pro vypnutí výstupu
local function vypnout()
    rs.setOutput(outputSide, 0)
    print(""Redstone vypnut."")
    menu()
end

local function menu()
	print(""Redstone ovládání"")
	print(""1 - Zapnout"")
	print(""2 - Vypnout"")
    local input = io.read()
    if input == ""1"" then
        zapnout()
    elseif input == ""2"" then
        vypnout()
    else
        print(""Neplatná volba."")
    end
end


"
XNwjPYYi,PayPal hits [Fresh],christiancheater,JavaScript,Sunday 18th of May 2025 07:00:20 AM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

08630
"
zc7GWrcc,Untitled,METALiST,JSON,Sunday 18th of May 2025 06:59:16 AM CDT,"{
  ""52093"": [""9355"", ""magnet:?xt=urn:btih:d9128b7527bb6e472615f59dd72c3cd0ad659eef&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""38799"": [""8844"", ""magnet:?xt=urn:btih:61a8870f229fac77d34256a01fe1c503e9a0e6b2&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""322"": [""8746"", ""magnet:?xt=urn:btih:257e09a76d1f7c7e9a2d2babaf6361657739803e&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""37576"": [""8561"", ""magnet:?xt=urn:btih:f9fc930c31d9b306dd4552f47201ad0cf274f642&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""53162"": [""9362"", ""magnet:?xt=urn:btih:99ae0e533a679536fe343154abf67704b67196e9&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""4177"": [""8447"", ""magnet:?xt=urn:btih:1a457cd91750a49777d49be26a5e72179f89108a&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""38481"": [""8573"", ""magnet:?xt=urn:btih:390cd90c59c0e4807982707638ca0cc327b67f36&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""6707"": [""9460"", ""magnet:?xt=urn:btih:6dc06c0ba568ff04cba6ef19d4361ce965f6a8dc&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""41595"": [""9204"", ""magnet:?xt=urn:btih:c28aae5d066f1d7c908fee782502acf932a4df5b&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""39491"": [""8506"", ""magnet:?xt=urn:btih:7adbf1b03e4a9403fa2091e5fe48c2f6e4b4e441&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""42423"": [""8845"", ""magnet:?xt=urn:btih:05264b22c666eca638b8b8cac2fdbeb14e401251&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""40485"": [""8646"", ""magnet:?xt=urn:btih:49386af23419e86e6793da46ddb6e7bc51c6066a&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""51958"": [""9412"", ""magnet:?xt=urn:btih:e4f773805b228aa32d78ae1c7e8a130a4d2069b7&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""39506"": [""8505"", ""magnet:?xt=urn:btih:f06dcfcd7ca9e759f49785345c8bb627b74ebd30&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""50330"": [""9336"", ""magnet:?xt=urn:btih:830e63dc394aca982466da6590fe04786676e71a&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""36587"": [""8487"", ""magnet:?xt=urn:btih:dfaf06b29b6c30e79740cf924a8230ec289ee7c0&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""32212"": [""8402"", ""magnet:?xt=urn:btih:00bdee0d3d031695c44e19c9fece1c1ea128a987&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""39247"": [""9006"", ""magnet:?xt=urn:btih:49745d4e63865ed731e3faf74e0f93bf9f5445f5&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""40677"": [""8590"", ""magnet:?xt=urn:btih:33a1e6c5d20784eb35247226f48f1f55e523806c&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""51632"": [""9408"", ""magnet:?xt=urn:btih:85ba90371fc6e0d5e0339ac6d1db52dce0f77822&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""39586"": [""8860"", ""magnet:?xt=urn:btih:bbd19b9f1e1e50c7100b95592661d20186a86120&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""50060"": [""9196"", ""magnet:?xt=urn:btih:d5eb56c53c959016d5c411421b1a441480f6d72a&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""36903"": [""8429"", ""magnet:?xt=urn:btih:31be551959865f8b34e5cfcd7fb5e7d90dfc30e4&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""39355"": [""8507"", ""magnet:?xt=urn:btih:03fc6344d2e0d200d3a3e72b2ae002d37bf06670&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""37760"": [""9807"", ""magnet:?xt=urn:btih:4b49dbb2cb5dd3ae9a857b28f3a4c28b7d269acb&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""51019"": [""9406"", ""magnet:?xt=urn:btih:df510b813023dba41634d23c590d236d38f7d8c1&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""38161"": [""8494"", ""magnet:?xt=urn:btih:04b659b3207ab5ebe6783e6a963babc55b9cfea2&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""38331"": [""8511"", ""magnet:?xt=urn:btih:ee5f1b7db4917bc433eba27841a4000950da435b&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""38349"": [""8995"", ""magnet:?xt=urn:btih:81992b12e7ed2d642e31d2a592969c9800e5fee3&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""38628"": [""8643"", ""magnet:?xt=urn:btih:e3c041f16bf5a043cfd8e88746a157fa09d14295&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""48549"": [""9407"", ""magnet:?xt=urn:btih:84f2881e120cda1a052d9c4e4cd575a6a7780d7f&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""38735"": [""8435"", ""magnet:?xt=urn:btih:809f9668ab110ee17a73e900ea30f08e2c46d629&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""38793"": [""8934"", ""magnet:?xt=urn:btih:f9bcaa72239ac0bc68cae11580a18e3a78731348&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""44204"": [""9330"", ""magnet:?xt=urn:btih:353ab02e7a25193b1497fd6ba41d2944558e004b&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""39388"": [""8557"", ""magnet:?xt=urn:btih:376990b47fa7c3e1d981d2e202f4e6a95086747b&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""40136"": [""8584"", ""magnet:?xt=urn:btih:9e2f2b0984bc2fa3f536fabb096f6677830d92a0&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""40515"": [""8663"", ""magnet:?xt=urn:btih:a5369f321cd4ded09c16dbb6b9ad9f99863e16ae&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""40532"": [""8589"", ""magnet:?xt=urn:btih:55796cfb94db9667ae130dc618926143c50c5471&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""40679"": [""8851"", ""magnet:?xt=urn:btih:36c49cc5ed7c7f815bfd9db57638bab23b3e2977&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""40930"": [""8852"", ""magnet:?xt=urn:btih:2c534a46d4043d306647c08d77b3999a7286ae11&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""45486"": [""9414"", ""magnet:?xt=urn:btih:f073c7d414408c36c4551dcd10e8e40def81b300&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""41053"": [""8936"", ""magnet:?xt=urn:btih:c793a5d6c1c500678a9588e40d5ee1f2bd1cf834&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""50307"": [""9447"", ""magnet:?xt=urn:btih:d142c5f3df70afc735438253ec1d15ebfd77f020&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""41783"": [""8788"", ""magnet:?xt=urn:btih:f3da05217a29e5590bc914b7e738eee90db5fa2d&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""50287"": [""9357"", ""magnet:?xt=urn:btih:f1e31aab36868957f814c636b2fd14ab7b889a61&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""50205"": [""9317"", ""magnet:?xt=urn:btih:8dc08087e68aebffa52211066e5004ae2d1fcd2a&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""53852"": [""9396"", ""magnet:?xt=urn:btih:5c6cdae482455ba401845fe323cb29252673c840&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""50197"": [""9329"", ""magnet:?xt=urn:btih:83e4d1724906aedefd952153efea90bd8d1bf7d9&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""45604"": [""9101"", ""magnet:?xt=urn:btih:5c543680e31a0ced9d26e80942c4999c9d4ce2df&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""46093"": [""9031"", ""magnet:?xt=urn:btih:aaf7efe287ec4bea916f836e00b53e3c3bb28034&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""46422"": [""9430"", ""magnet:?xt=urn:btih:90a8dd674e5db60bde750648c15c07083dde14c4&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""51495"": [""9332"", ""magnet:?xt=urn:btih:78733e8427d6a68fe5b1522782f2eacba693a68e&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""47159"": [""9118"", ""magnet:?xt=urn:btih:f257a13c82eace65cd0f169720543ca61161b547&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""49357"": [""9095"", ""magnet:?xt=urn:btih:5b007e2bc83797283b039bee669992c9fcc303ea&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""49776"": [""9228"", ""magnet:?xt=urn:btih:09e5d875486a9240bb8cd54a774b9d9e280a20cb&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""49979"": [""9281"", ""magnet:?xt=urn:btih:0093a96a6fe24a8224f376d2e42c8a3c5213b9af&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""51711"": [""9339"", ""magnet:?xt=urn:btih:4d8b5c979a12424fee38b814b4e6a04a3c8c1424&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""52446"": [""9348"", ""magnet:?xt=urn:btih:0a8dd61cdd86b0017439f71031a5cf9412bd8c9c&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""53587"": [""9444"", ""magnet:?xt=urn:btih:91536edf289e43f82052d1a81120c7c3a18687a7&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""54883"": [""9508"", ""magnet:?xt=urn:btih:991262df0ba79b8aacaa987e647cba68f4f58753&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""54898"": [""9503"", ""magnet:?xt=urn:btih:af7244791d2af22f2c86faabe9bb7f7f002f59ef&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""52969"": [""9510"", ""magnet:?xt=urn:btih:0b711ac4404b33457e27cfbfb44023c0c17d212a&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""53379"": [""9495"", ""magnet:?xt=urn:btih:d169af826ebb7dfa3682d417c0ab064e0c09f75a&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""53428"": [""9502"", ""magnet:?xt=urn:btih:f5ead6b4148424d75f2a145674f00756b0e572ab&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""54760"": [""9500"", ""magnet:?xt=urn:btih:cf387c10449b1734152cb4d50a8aa9640e201478&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""51498"": [""9472"", ""magnet:?xt=urn:btih:f15f2743bd0b8ee6a0615b2af59e44b4e5623dbd&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""54234"": [""9483"", ""magnet:?xt=urn:btih:af4cd1b0f0201d1a9aa6c568f775fa557b8df8d4&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""52619"": [""9494"", ""magnet:?xt=urn:btih:f6700c0531a5d336e9a64b6863d3498733d69410&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""53263"": [""9492"", ""magnet:?xt=urn:btih:aa2711852dc55208bb8fa49383bff822c55ddcc4&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""54790"": [""9506"", ""magnet:?xt=urn:btih:841473764927f8b21e656c3d1aaf10c9d6b65d69&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""54842"": [""9356"", ""magnet:?xt=urn:btih:144883514fbc9836acf7210764caa3ad2e250478&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""50582"": [""9479"", ""magnet:?xt=urn:btih:ce9500e802511327bcf90d37d58ab48f1ad83b5e&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""51764"": [""9481"", ""magnet:?xt=urn:btih:967f98ad4fc14b8893df75c198e6d3b4b1a7207e&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""51916"": [""9504"", ""magnet:?xt=urn:btih:dfd407e93a9df0a58246a65801be31bb1941f120&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""53050"": [""9476"", ""magnet:?xt=urn:btih:5a414acb79ecd6b603bc7ef4927ca284e2c629f8&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""53787"": [""9505"", ""magnet:?xt=urn:btih:18077e9d5988fd89f2f05e848d37a08d80a47305&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""54112"": [""9484"", ""magnet:?xt=urn:btih:4f751b0e9645f1378b04a2eb1e6d8a29374581db&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""49858"": [""9478"", ""magnet:?xt=urn:btih:45eb4dd1a12cd1ef88d3d6f5edb9e66ab5b98f53&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""49894"": [""9482"", ""magnet:?xt=urn:btih:c3aee60a48a181cb496d4e124815aa88bd85f795&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""52082"": [""9487"", ""magnet:?xt=urn:btih:b4c0bc2e299c6ba0e9829b87884ee9f509114758&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""54743"": [""9541"", ""magnet:?xt=urn:btih:26ce2d025935b524aab36b7dbb98f0bf4089ffc0&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""52985"": [""9564"", ""magnet:?xt=urn:btih:74a44e6d9a7c023b37f2b1fbd6e3e5005a121bb5&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""53300"": [""9561"", ""magnet:?xt=urn:btih:2e404b585c6757d8e332d870ed6202caa2b92081&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""54431"": [""9558"", ""magnet:?xt=urn:btih:b74c1e44ed66669b5fbc05fde4d4fdc82359b4eb&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""50586"": [""9575"", ""magnet:?xt=urn:btih:ca424e82a59f7e5cfed3fffff9f5a1b9762f5463&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""51215"": [""9547"", ""magnet:?xt=urn:btih:e262a8dda52b74032e4719f86512e286d6c7ac42&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""49766"": [""9566"", ""magnet:?xt=urn:btih:6d935dc177eb9819755670afbf179dee6da36536&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""52934"": [""9553"", ""magnet:?xt=urn:btih:274fd71eb5d306c2af82e1bd1475ee9fd4bc2d7b&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""54041"": [""9576"", ""magnet:?xt=urn:btih:a2c153360d3982d049b72b7ff986ab0fb072669a&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""40357"": [""9536"", ""magnet:?xt=urn:btih:f2593a766f09035b055232dc54f439a0db4f82f4&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""54362"": [""9551"", ""magnet:?xt=urn:btih:31d1732cfdb432685eae8f1b95d1431aaa1e9ff7&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""50583"": [""9567"", ""magnet:?xt=urn:btih:27d8fc1112ca987907994f8d4f2c2da0f9c9336c&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""50664"": [""9540"", ""magnet:?xt=urn:btih:2ae40f7265b62e89a396188967d125ddc1abbcbb&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""52962"": [""9560"", ""magnet:?xt=urn:btih:9bd7f80da92129c08c3a1b7999962f5e24728edd&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""53494"": [""9548"", ""magnet:?xt=urn:btih:f9400945d8a03575e8c06edda95b6f6ce4d49091&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""53887"": [""9535"", ""magnet:?xt=urn:btih:9668d609da60b8215c2ffe78b6462c639120c276&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""54616"": [""9568"", ""magnet:?xt=urn:btih:d82cf5b3c09a2879e6e9e03fad9511657e97c4bc&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""54852"": [""9550"", ""magnet:?xt=urn:btih:f709635acbed9321bd8028d8cfb6d757a3569ba3&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""56425"": [""9595"", ""magnet:?xt=urn:btih:3ab4046fc8a8903c2c902fd7a6fd0c2553934b1c&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""54492"": [""9555"", ""magnet:?xt=urn:btih:771696ee1c2ee2b98e2af02cdc13906cedabccec&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""50803"": [""9608"", ""magnet:?xt=urn:btih:ddff26d351c3aaeaf6cc37e711feb54ba527b084&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""51180"": [""9601"", ""magnet:?xt=urn:btih:5c95e1b3c54e80c5489fcf40b0810d533fcdad85&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""55998"": [""9643"", ""magnet:?xt=urn:btih:1b9f748f8abccc9e529dd3682d765b68660e9562&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""54265"": [""9611"", ""magnet:?xt=urn:btih:09e8ccd30d4e1a327dc668b0f58a3003b85974a5&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""55866"": [""9621"", ""magnet:?xt=urn:btih:c55acac9b5c3fc5e5dbaba67088b77f2cf5d2fcb&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""52299"": [""9600"", ""magnet:?xt=urn:btih:058afedd50f31e645c9ae20430a9aba3256e3bab&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""56352"": [""9630"", ""magnet:?xt=urn:btih:85e2b0009efa4799359963aab84b2b97f5a3a549&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""53488"": [""9604"", ""magnet:?xt=urn:btih:951fe8183919a18b84b04825de9a0cfbb64e22e9&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""56845"": [""9636"", ""magnet:?xt=urn:btih:5cd9b21b0dcecf3fd6e09687d11166cd65239531&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""55129"": [""9619"", ""magnet:?xt=urn:btih:327b7ed41c8bc3353e94a27573f2cc55208f6301&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""55774"": [""9627"", ""magnet:?xt=urn:btih:922693bb22ee665301f7ee651b2773a2b59e6e18&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""49889"": [""9614"", ""magnet:?xt=urn:btih:6f6f7134b342fba17e6caeb9bd63abfb58581d52&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""51648"": [""9615"", ""magnet:?xt=urn:btih:fbcf8012b223fdabf12377e0104ae4d938c471e1&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""53421"": [""9610"", ""magnet:?xt=urn:btih:90ac1a6d5490853fe443f21cd0fc65ec77402b47&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""54617"": [""9629"", ""magnet:?xt=urn:btih:a8909be9ecdd66a3eec1a5dfdd0617e31a91f07b&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""54837"": [""9613"", ""magnet:?xt=urn:btih:53f153be9aef98bb58a4cf6578f5d6d2ad013231&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""54632"": [""9617"", ""magnet:?xt=urn:btih:56ffd3324f91cf00b320560e7f47e987d7903035&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""54794"": [""9624"", ""magnet:?xt=urn:btih:eea9fff9fca6b27c2d42929b7e355a72ecc09b5d&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""55636"": [""9640"", ""magnet:?xt=urn:btih:3bc83561f6ed9a3c3d9248902eea96cdd8f23667&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""52816"": [""9622"", ""magnet:?xt=urn:btih:d745b04f9739be45be6eddf1dba7223b2325626b&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""55358"": [""9633"", ""magnet:?xt=urn:btih:024effd96667e0900b478c4a895a6fa6eb131727&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""54754"": [""9637"", ""magnet:?xt=urn:btih:fdc6522152d03c80121cd0997d698a965f748f62&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""51122"": [""9666"", ""magnet:?xt=urn:btih:d892655396d28bd67067d85cda519664fa17d82c&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""53516"": [""9665"", ""magnet:?xt=urn:btih:48a3209be6d3328076281857926c03371bb9110e&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""55717"": [""9676"", ""magnet:?xt=urn:btih:b928c7d7874d3b59f0e8ef17b14a7fd165ce3133&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""56690"": [""9679"", ""magnet:?xt=urn:btih:4969d628b25b7424d4219db801b71f1259cd7d67&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""53407"": [""9684"", ""magnet:?xt=urn:btih:d0e13fd7237db0e867a08e6647782a73c72930e6&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""55597"": [""9681"", ""magnet:?xt=urn:btih:14d44c1e51f57d54cc7e885367a7dce276a1b3d4&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""50713"": [""9664"", ""magnet:?xt=urn:btih:ade8dbf1e8fe741e950298ff66aa03e4ca8fa8d3&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""53434"": [""9667"", ""magnet:?xt=urn:btih:c610b18f183bb9e7efe28a96bc01820ebe81241b&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""54565"": [""9599"", ""magnet:?xt=urn:btih:ca36e0852cfc37a696354d0244374d1636409b83&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""54900"": [""9674"", ""magnet:?xt=urn:btih:46880b2f3af85348b174b7631f8c02088a410816&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""55877"": [""9689"", ""magnet:?xt=urn:btih:40c849725af8cb7ffd4b7d3b9f1e0541aa4e7543&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""57391"": [""9696"", ""magnet:?xt=urn:btih:4ca7f3ebc1289e58ac53cb50d2ff7d274236b17a&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""56738"": [""9682"", ""magnet:?xt=urn:btih:a64300087214db67d5173b7087ea18184df197b3&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""57031"": [""9687"", ""magnet:?xt=urn:btih:d0ceaeec31f4ff62814e1662db5972322abed946&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""56230"": [""9677"", ""magnet:?xt=urn:btih:c07e5988f289389958fce29e19d28e1e5e0f2a3b&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""53835"": [""9672"", ""magnet:?xt=urn:btih:3ee42487fa2d4c737f211610b8220e161a8f3233&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""56923"": [""9668"", ""magnet:?xt=urn:btih:137fefab30183bf53f4b595799578fff92118f80&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""52196"": [""9662"", ""magnet:?xt=urn:btih:2e1739481909c09bd8dcc1dccc6984af62643a24&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""58080"": [""9705"", ""magnet:?xt=urn:btih:6a9543022ac9be9c0597abf350ce7738a1b64f96&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""54199"": [""9685"", ""magnet:?xt=urn:btih:8568e9b881da192bc7b18305efa34e7e0ae49023&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""52588"": [""9663"", ""magnet:?xt=urn:btih:3122ec7bcd051dfef09660a1f0530d6b7d88e64c&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""55855"": [""9678"", ""magnet:?xt=urn:btih:53fe48e26d0b285923fa953dbe8a740ed42b92a0&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""57100"": [""9707"", ""magnet:?xt=urn:btih:c45279cb1c1127b27f7b5b4d642eaa48bd6d33eb&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""39894"": [""9683"", ""magnet:?xt=urn:btih:30d84edfd65bc232affdfa26a003ba8c69f99b9c&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""49458"": [""9661"", ""magnet:?xt=urn:btih:abc08275cde66b8175c30c5696a4f380149cbc50&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""55701"": [""9660"", ""magnet:?xt=urn:btih:7e557d368c66fba38e9d6da449f362de7fd80cd4&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""51358"": [""9722"", ""magnet:?xt=urn:btih:6b1e1e717449abad6bbe2295adb1f3262f0dcf53&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""54744"": [""9725"", ""magnet:?xt=urn:btih:31b8c85f52bb5c5eff5d9da2f7e7b0d2d958e250&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""56449"": [""9750"", ""magnet:?xt=urn:btih:04d8e049949dbbc0ace2a92745fb50cb54011556&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""56179"": [""9763"", ""magnet:?xt=urn:btih:8d2f48de7c8618ff550a781f742ed1742974818b&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""50306"": [""9828"", ""magnet:?xt=urn:btih:6d8db465c91f88f10447b5856ec36946b85311c3&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""59131"": [""9829"", ""magnet:?xt=urn:btih:588e9ca3b5a0f885e457278fbf0b5ba8168bceb4&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""39905"": [""9593"", ""magnet:?xt=urn:btih:41572c07fa150aeb792d90568c2a65502fd504d6&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""56228"": [""9794"", ""magnet:?xt=urn:btih:d3ecee4f73f04127e1c4a96d48a1e0cb22b5f5df&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""56400"": [""9814"", ""magnet:?xt=urn:btih:4f59e75c425d9b2329784e69b80275d3ad6da81b&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""56964"": [""9818"", ""magnet:?xt=urn:btih:8a0105c05f59945e0f54d5e0404b9e4235ba0b9d&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""57066"": [""9786"", ""magnet:?xt=urn:btih:61d5cb06992f38e7f32790269018a66032db1c63&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""57517"": [""9825"", ""magnet:?xt=urn:btih:cd1a71d8f351d500a002c9d80d1d9057ed5e6390&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""57944"": [""9795"", ""magnet:?xt=urn:btih:2f6735ccbe10d5a7b1a2cb9386819d448e883321&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""53889"": [""9605"", ""magnet:?xt=urn:btih:54d83b577a4e7184cd471aa1f76d237b2297a053&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""58516"": [""9799"", ""magnet:?xt=urn:btih:786a8e6f6f5d1c7147c762b67f9c0f12eafad245&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""59425"": [""9822"", ""magnet:?xt=urn:btih:f54d0718c76639c2283d7ca2204948f32789781c&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""55150"": [""9796"", ""magnet:?xt=urn:btih:3344edfdcee8b6055637e45229609bb85f32b391&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""55823"": [""9827"", ""magnet:?xt=urn:btih:c5822901ae6b82e3b8349bedc76af0b5150a0dd5&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""57102"": [""9837"", ""magnet:?xt=urn:btih:bcf91c3444d7b1fe1f1f3f6149c5260a411711e3&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""57533"": [""9820"", ""magnet:?xt=urn:btih:1c2fc8d5859d0f6f3d1341fa488132c038746640&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""57362"": [""9805"", ""magnet:?xt=urn:btih:bd923cb0dcc87af011028c95331d155c553affbb&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""58445"": [""9800"", ""magnet:?xt=urn:btih:a904460bf8b3ea53e925b222719be37040a536a0&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""54853"": [""9792"", ""magnet:?xt=urn:btih:ba32110e4424c9ee378834210038a86afa9bbc0e&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""52995"": [""9785"", ""magnet:?xt=urn:btih:4a3596f9913945734acb2afc78a200029f981f2e&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""59226"": [""9855"", ""magnet:?xt=urn:btih:d259cdb94ff0907a93bc167238e328464d6526fb&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""53924"": [""9852"", ""magnet:?xt=urn:btih:e26996704b9df918280b714b30a93bd9005d3366&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""57648"": [""9848"", ""magnet:?xt=urn:btih:b1a3aded1e757857b601f7f9c74bb002bb7c0318&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""59349"": [""9858"", ""magnet:?xt=urn:btih:28b5357ee2a5cb3b5ed05eeb301579a99ad92e71&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""58502"": [""9874"", ""magnet:?xt=urn:btih:050d1576c6055494954e2b5f8dc9b746cd71268b&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""59055"": [""9873"", ""magnet:?xt=urn:btih:5f8082e1cde07ae64d201be55320b15f82a98b18&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""57050"": [""9872"", ""magnet:?xt=urn:btih:2d6efe2ce781794f5eda8a18e3a218cb4d487c87&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""58600"": [""9876"", ""magnet:?xt=urn:btih:9923cb51bd10ea8fd71397a9b168cdeff7ff7c47&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""58437"": [""9850"", ""magnet:?xt=urn:btih:94bdc0dd1bf71dcc066bfcf56ed65d7aab501f04&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""59135"": [""9846"", ""magnet:?xt=urn:btih:8e5349a67e2d317c0b15ffa2f52f0a7ba04887d2&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""58939"": [""9886"", ""magnet:?xt=urn:btih:dc3a664f37398b3bc1bed0e4053bb4fe26c1668d&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""55842"": [""9868"", ""magnet:?xt=urn:btih:8c17fd84a14e51157608c890f957af2a785e3ccf&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""56701"": [""9843"", ""magnet:?xt=urn:btih:1f0c3fef00d87ace7f71947a86762ad61edf196d&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""57592"": [""9842"", ""magnet:?xt=urn:btih:7b8a90cf500e857299f7eefccb2bf0e5b0d2e75b&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""58271"": [""9857"", ""magnet:?xt=urn:btih:8428c0e280e3eb7f0003cf02d8dfbccc5951b0a8&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""59265"": [""9869"", ""magnet:?xt=urn:btih:ae7860f047aa99e87c8173f3f94486c6fe0486bf&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""59561"": [""9887"", ""magnet:?xt=urn:btih:0406a59b6752284e56a9e28f0b5269091cab600b&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""58822"": [""9847"", ""magnet:?xt=urn:btih:46125c2778d52c92e9f91e0f06d2191e711e0444&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""59142"": [""9844"", ""magnet:?xt=urn:btih:ce9249238951664a8f4a323735ab83f482ef38db&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""55997"": [""9845"", ""magnet:?xt=urn:btih:a20953c9af4881230c652eea6226214a05d1f51b&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""],
  ""57719"": [""9870"", ""magnet:?xt=urn:btih:537a97795455ce67c2232ede07b9bdf18a6cf461&tr=http%3A%2F%2Ftr.libria.fun%3A2710%2Fannounce""]
}"
DpJDKybj,FREE 200$ GIFTCARDS * NEW,christiancheater,JavaScript,Sunday 18th of May 2025 06:54:57 AM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

15178
"
kveyL1wT,Private Telegram Leaks,christiancheater,JavaScript,Sunday 18th of May 2025 06:49:35 AM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

84590
"
XPD8fAqQ,Make 1000$ in 24 hours [Method],christiancheater,JavaScript,Sunday 18th of May 2025 06:38:53 AM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

73936
"
bKwcpwye,PayPal hits [Fresh],christiancheater,JavaScript,Sunday 18th of May 2025 06:33:30 AM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

50083
"
9MTPASen,FREE 200$ GIFTCARDS * NEW,christiancheater,JavaScript,Sunday 18th of May 2025 06:28:08 AM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

93675
"
BfdrqqHA,Private Telegram Leaks,christiancheater,JavaScript,Sunday 18th of May 2025 06:22:46 AM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

93667
"
zdrYj8qh,Untitled,rubiin,JavaScript,Sunday 18th of May 2025 06:21:37 AM CDT,"15-6000, 1 week-4500"
4WBvBRiT,PayPal hits [Fresh],christiancheater,JavaScript,Sunday 18th of May 2025 06:20:51 AM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

11494
"
PrK9MaMM,FREE 200$ GIFTCARDS * NEW,christiancheater,JavaScript,Sunday 18th of May 2025 06:18:48 AM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

47426
"
n76ZFtDt,Private Telegram Leaks,christiancheater,JavaScript,Sunday 18th of May 2025 06:16:46 AM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

29394
"
anHBQg0A,dataNone,TestGuy1,JSON,Sunday 18th of May 2025 06:00:20 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '49259a9c69f046de10664ef08f6d0b0eff3052f5e84c0c30badcfa059768d0ddb10686c0dadc538f4c9256a7f381f3d5983bc27ebe40fff5b0ca2d1e936e816092108aabc2aca9c1396eb781c4c1fe7f03a2758734488daec3f1779be9924770c9c682dd90b9926c28c97bef31a291844a5c7289d5a1d82ad3d64407f02e61ec',
  otherdata: [
    '841c202f1ae3fbbb38440cba44c3f6ec',
    '0920f6ae77b7641af8e2745b0ce39704',
    '37d398cfce77d70f5a45b1289f4715e5',
    '3fccfa629fc1f0a66dd7ef74e50a4920',
    '765472ca44f1587a357a7b2494f50520',
    '0a91abdb9fc3f954e317a2d20662c924',
    '509d664e553b431f850d5295b781b2fa',
    '76562617e06b7202b4a45a771eedb901'
  ]
}"
8jcbwGkm,telegram leaks,maleddddddddddddd,JavaScript,Sunday 18th of May 2025 05:50:49 AM CDT,"Check it out at >> https://t.me/LucasL3AK
 
25494487FD"
4jjBfU6y,Untitled,rgruber,JavaScript,Sunday 18th of May 2025 05:38:10 AM CDT,"// https://rapiddns.io/subdomain/krone.at?full=1
[...document.getElementById(""table"").tBodies[0].childNodes].map(v=>v.innerText).filter(Boolean).map(v=>v.split(""\t"")).filter(v=>v[3]!='AAAA')"
7N49mCds,Untitled,PaffcioStudio,Lua,Sunday 18th of May 2025 05:10:00 AM CDT,"import sys
import os
import json
import subprocess
import re
import platform
import shutil # Do kopiowania plików
import shlex # Do bezpiecznego formatowania komend
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QSplitter, QTreeView, QTabWidget, QPlainTextEdit,
    QPushButton, QLineEdit, QFileDialog, QMenuBar, QToolBar, QStatusBar,
    QMessageBox, QMenu, QStyleFactory, QDialog, QFormLayout,
    QLabel, QDialogButtonBox, QComboBox, QToolButton,
    QInputDialog, QSpinBox, QSizePolicy, QAbstractItemView,
    QFrame # Dodano do okna ustawień
)
from PyQt6.QtGui import (
    QIcon, QAction, QKeySequence, QTextCharFormat, QFont,
    QSyntaxHighlighter, QTextDocument, QColor, QFileSystemModel,
    QDesktopServices, # Do otwierania plików w domyślnych aplikacjach
    QPalette # Do motywów
)
from PyQt6.QtCore import (
    QDir, Qt, QProcess, QSettings, QFileInfo, QThread, pyqtSignal, QTimer, QSize,
    QStandardPaths, QUrl, QLocale, QCoreApplication, QProcessEnvironment
)
try:
    import qtawesome as qta
except ImportError:
    qta = None
    print(""Zainstaluj qtawesome ('pip install qtawesome') dla lepszych ikon."", file=sys.stderr)
APP_DIR = os.path.dirname(os.path.abspath(__file__))
DATA_DIR = os.path.join(APP_DIR, 'data')
PROJECTS_DIR = os.path.join(APP_DIR, 'projects')
SETTINGS_FILE = os.path.join(DATA_DIR, 'settings.json')
RECENTS_FILE = os.path.join(DATA_DIR, 'recents.json')
os.makedirs(DATA_DIR, exist_ok=True)
os.makedirs(PROJECTS_DIR, exist_ok=True)
FORMAT_DEFAULT = QTextCharFormat()
FORMAT_KEYWORD = QTextCharFormat()
FORMAT_KEYWORD.setForeground(QColor(""#000080"")) # Navy
FORMAT_STRING = QTextCharFormat()
FORMAT_STRING.setForeground(QColor(""#008000"")) # Green
FORMAT_COMMENT = QTextCharFormat()
FORMAT_COMMENT.setForeground(QColor(""#808080"")) # Gray
FORMAT_COMMENT.setFontItalic(True)
FORMAT_FUNCTION = QTextCharFormat()
FORMAT_FUNCTION.setForeground(QColor(""#0000FF"")) # Blue
FORMAT_CLASS = QTextCharFormat()
FORMAT_CLASS.setForeground(QColor(""#A52A2A"")) # Brown
FORMAT_CLASS.setFontWeight(QFont.Weight.Bold)
FORMAT_NUMBERS = QTextCharFormat()
FORMAT_NUMBERS.setForeground(QColor(""#FF0000"")) # Red
FORMAT_OPERATOR = QTextCharFormat()
FORMAT_OPERATOR.setForeground(QColor(""#A62929"")) # Dark Red
FORMAT_BUILTIN = QTextCharFormat()
FORMAT_BUILTIN.setForeground(QColor(""#008080"")) # Teal
FORMAT_SECTION = QTextCharFormat() # Dla sekcji w INI
FORMAT_SECTION.setForeground(QColor(""#800080"")) # Purple
FORMAT_SECTION.setFontWeight(QFont.Weight.Bold)
FORMAT_PROPERTY = QTextCharFormat() # Dla kluczy/właściwości w INI/JSON
FORMAT_PROPERTY.setForeground(QColor(""#B8860B"")) # DarkGoldenrod
HIGHLIGHTING_RULES = {
    'python': {
        'keywords': ['and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else',
                     'except', 'False', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'None',
                     'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'True', 'try', 'while', 'with', 'yield'],
        'builtins': ['print', 'len', 'range', 'list', 'dict', 'tuple', 'set', 'str', 'int', 'float', 'bool', 'open', 'isinstance'],
        'patterns': [
            (r'\b[A-Za-z_][A-Za-z0-9_]*\s*\(', FORMAT_FUNCTION), # Funkcje (proste wykrycie, litera/podkreślnik na początku)
            (r'\bclass\s+([A-Za-z_][A-Za-z0-9_]*)\b', FORMAT_CLASS), # Klasy
            (r'\b\d+(\.\d*)?\b', FORMAT_NUMBERS), # Liczby
            (r'[+\-*/=<>!&|]', FORMAT_OPERATOR), # Operatory
            (r'"".*?""', FORMAT_STRING), # Stringi w cudzysłowach podwójnych
            (r""'.*?'"", FORMAT_STRING), # Stringi w cudzysłowach pojedynczych
            (r'#.*', FORMAT_COMMENT), # Komentarze liniowe
        ]
    },
    'javascript': {
        'keywords': ['abstract', 'arguments', 'await', 'boolean', 'break', 'byte', 'case', 'catch', 'char', 'class', 'const', 'continue',
                     'debugger', 'default', 'delete', 'do', 'double', 'else', 'enum', 'eval', 'export', 'extends', 'false', 'final',
                     'finally', 'float', 'for', 'function', 'goto', 'if', 'implements', 'import', 'in', 'instanceof', 'int', 'interface',
                     'let', 'long', 'native', 'new', 'null', 'package', 'private', 'protected', 'public', 'return', 'short', 'static',
                     'super', 'switch', 'synchronized', 'this', 'throw', 'throws', 'transient', 'true', 'try', 'typeof', 'var', 'void',
                     'volatile', 'while', 'with', 'yield'],
         'builtins': ['console', 'log', 'warn', 'error', 'info', 'Math', 'Date', 'Array', 'Object', 'String', 'Number', 'Boolean', 'RegExp', 'JSON', 'Promise', 'setTimeout', 'setInterval'], # Przykładowe
        'patterns': [
            (r'\b[A-Za-z_][A-Za-z0-9_]*\s*\(', FORMAT_FUNCTION), # Funkcje (proste wykrycie)
             (r'\bclass\s+([A-Za-z_][A-Za-z0-9_]*)\b', FORMAT_CLASS), # Klasy
            (r'\b\d+(\.\d*)?\b', FORMAT_NUMBERS), # Liczby
            (r'[+\-*/=<>!&|]', FORMAT_OPERATOR), # Operatory
            (r'"".*?""', FORMAT_STRING), # Stringi w cudzysłowach podwójnych
            (r""'.*?'"", FORMAT_STRING), # Stringi w cudzysłowach pojedynczych
            (r'//.*', FORMAT_COMMENT), # Komentarze liniowe
        ]
    },
     'html': {
        'keywords': [], # HTML nie ma tradycyjnych słów kluczowych w ten sposób
        'builtins': [], # Encje HTML można potraktować jako builtins
        'patterns': [
            (r'<[^>]+>', FORMAT_KEYWORD), # Tagi HTML (uproszczone, bez atrybutów)
            (r'[a-zA-Z0-9_-]+\s*=', FORMAT_OPERATOR), # Znaki '=' w atrybutach
            (r'"".*?""', FORMAT_STRING), # Wartości atrybutów
            (r""'.*?'"", FORMAT_STRING), # Wartości atrybutów
             (r'&[a-zA-Z0-9]+;', FORMAT_BUILTIN), # Encje HTML
            (r'<!--.*?-->', FORMAT_COMMENT, re.DOTALL), # Komentarze (z re.DOTALL, aby objęły wiele linii)
        ]
    },
    'css': {
        'keywords': [],
        'builtins': [], # Selektory ID
        'patterns': [
            (r'\.[a-zA-Z0-9_-]+', FORMAT_CLASS), # Selektory klas
            (r'#[a-zA-Z0-9_-]+', FORMAT_BUILTIN), # Selektory ID
            (r'[a-zA-Z0-9_-]+\s*:', FORMAT_KEYWORD), # Właściwości CSS
            (r';', FORMAT_OPERATOR), # Średniki
            (r'\{|\}', FORMAT_OPERATOR), # Nawiasy klamrowe
             (r'\(|\)', FORMAT_OPERATOR), # Nawiasy okrągłe (np. w rgb())
            (r'\b\d+(\.\d*)?(px|em|%|vh|vw|rem|pt|cm|mm)?\b', FORMAT_NUMBERS), # Liczby z jednostkami
             (r'#[0-9a-fA-F]{3,6}', FORMAT_NUMBERS), # Kolory HEX
            (r'"".*?""', FORMAT_STRING), # Wartości stringów
            (r""'.*?'"", FORMAT_STRING), # Wartości stringów
        ]
    },
    'c++': {
         'keywords': ['alignas', 'alignof', 'and', 'and_eq', 'asm', 'atomic_cancel', 'atomic_commit', 'atomic_noexcept', 'auto',
                     'bitand', 'bitor', 'bool', 'break', 'case', 'catch', 'char', 'char8_t', 'char16_t', 'char32_t', 'class',
                     'compl', 'concept', 'const', 'consteval', 'constexpr', 'constinit', 'const_cast', 'continue', 'co_await',
                     'co_return', 'decltype', 'default', 'delete', 'do', 'double', 'dynamic_cast', 'else', 'enum',
                     'explicit', 'export', 'extern', 'false', 'float', 'for', 'friend', 'goto', 'if', 'inline', 'int', 'long',
                     'mutable', 'namespace', 'new', 'noexcept', 'not', 'not_eq', 'nullptr', 'operator', 'or', 'or_eq', 'private',
                     'protected', 'public', 'reflexpr', 'register', 'reinterpret_cast', 'requires', 'return', 'short', 'signed',
                     'sizeof', 'static', 'static_assert', 'static_cast', 'struct', 'switch', 'synchronized', 'template',
                     'this', 'thread_local', 'throw', 'true', 'try', 'typedef', 'typeid', 'typename', 'union', 'unsigned',
                     'using', 'virtual', 'void', 'volatile', 'wchar_t', 'while', 'xor', 'xor_eq'],
         'builtins': ['cout', 'cin', 'endl', 'string', 'vector', 'map', 'set', 'array', 'queue', 'stack', 'pair', 'algorithm', 'iostream', 'fstream', 'sstream', 'cmath', 'cstdlib', 'cstdio', 'ctime'], # Przykładowe popularne
         'patterns': [
             (r'\b[A-Za-z_][A-Za-z0-9_]*\s*\(', FORMAT_FUNCTION), # Funkcje (proste wykrycie)
             (r'\bclass\s+([A-Za-z_][A-Za-z0-9_]*)\b', FORMAT_CLASS), # Klasy
             (r'\bstruct\s+([A-Za-z_][A-Za-z0-9_]*)\b', FORMAT_CLASS), # Struktury
             (r'\b\d+(\.\d*)?\b', FORMAT_NUMBERS), # Liczby
             (r'[+\-*/=<>!&|%^~?:]', FORMAT_OPERATOR), # Operatory
             (r'"".*?""', FORMAT_STRING), # Stringi w cudzysłowach podwójnych
             (r""'.*?'"", FORMAT_STRING), # Stringi w cudzysłowach pojedynczych (pojedyncze znaki)
             (r'//.*', FORMAT_COMMENT), # Komentarze liniowe
         ]
    },
    'ini': { # Nowe reguły dla INI
        'keywords': [], # Brak tradycyjnych słów kluczowych
        'builtins': [], # Brak typowych builtins
        'patterns': [
            (r'^\[.*?\]', FORMAT_SECTION), # Sekcje [section]
            (r'^[a-zA-Z0-9_-]+\s*=', FORMAT_PROPERTY), # Klucze property=
            (r';.*', FORMAT_COMMENT), # Komentarze po średniku
            (r'#.*', FORMAT_COMMENT), # Komentarze po krzyżyku
            (r'[+\-*/=<>!&|]', FORMAT_OPERATOR), # Operatory (np. =)
             (r'=\s*"".*?""', FORMAT_STRING), # ""value""
             (r""=\s*'.*?'"", FORMAT_STRING), # 'value'
             (r'=\s*[^;#""\'].*', FORMAT_STRING), # value without quotes or comments/sections
        ]
    },
    'json': { # Nowe reguły dla JSON
        'keywords': ['true', 'false', 'null'], # Literały JSON
        'builtins': [], # Brak typowych builtins
        'patterns': [
            (r'""(?:[^""\\]|\\.)*""\s*:', FORMAT_PROPERTY), # Klucze w cudzysłowach z następującym ':'
            (r'"".*?""', FORMAT_STRING), # Wartości stringów (muszą być po kluczach, żeby nie nadpisać klucza)
            (r'\b-?\d+(\.\d+)?([eE][+-]?\d+)?\b', FORMAT_NUMBERS), # Liczby
            (r'\{|\}|\[|\]|:|,', FORMAT_OPERATOR), # Nawiasy, dwukropek, przecinek
        ]
    }
}
class CodeSyntaxHighlighter(QSyntaxHighlighter):
    def __init__(self, parent: QTextDocument, language: str):
        super().__init__(parent)
        self._language = language.lower()
        self._rules = []
        lang_config = HIGHLIGHTING_RULES.get(self._language, {})
        keywords = lang_config.get('keywords', [])
        builtins = lang_config.get('builtins', [])
        patterns = lang_config.get('patterns', [])
        keyword_format = FORMAT_KEYWORD
        for keyword in keywords:
            pattern = r'\b' + re.escape(keyword) + r'\b' # Użyj re.escape dla słów kluczowych
            self._rules.append((re.compile(pattern), keyword_format))
        builtin_format = FORMAT_BUILTIN
        for builtin in builtins:
            pattern = r'\b' + re.escape(builtin) + r'\b'
            self._rules.append((re.compile(pattern), builtin_format))
        for pattern_str, format, *flags in patterns: # Opcjonalne flagi regex np. re.DOTALL
             try:
                 pattern = re.compile(pattern_str, *flags)
                 self._rules.append((pattern, format))
             except re.error as e:
                 print(f""Błąd kompilacji regex '{pattern_str}' dla języka {self._language}: {e}"", file=sys.stderr)
    def highlightBlock(self, text: str):
        """"""Główna metoda kolorująca blok tekstu (linię).""""""
        self.setFormat(0, len(text), FORMAT_DEFAULT)
        self.setCurrentBlockState(0) # Domyślny stan dla tego bloku
        block_comment_delimiters = []
        if self._language in ['javascript', 'css', 'c++']:
             block_comment_delimiters.append((""/*"", ""*/"", FORMAT_COMMENT))
        if self._language == 'html':
             pass # Rely on regex pattern for HTML comments
        comment_start_in_prev_block = (self.previousBlockState() == 1) # State 1 means inside /* ... */
        if comment_start_in_prev_block:
             end_delimiter_index = text.find(""*/"")
             if end_delimiter_index >= 0:
                  self.setFormat(0, end_delimiter_index + 2, FORMAT_COMMENT)
                  self.setCurrentBlockState(0) # Reset state
                  start_pos = end_delimiter_index + 2
             else:
                  self.setFormat(0, len(text), FORMAT_COMMENT)
                  self.setCurrentBlockState(1) # Keep state as inside comment
                  return # Entire line is a comment, no need to parse further
        else:
             start_pos = 0
        start_delimiter = ""/*""
        end_delimiter = ""*/""
        startIndex = text.find(start_delimiter, start_pos)
        while startIndex >= 0:
            endIndex = text.find(end_delimiter, startIndex)
            if endIndex >= 0:
                length = endIndex - startIndex + len(end_delimiter)
                self.setFormat(startIndex, startIndex + length, FORMAT_COMMENT)
                startIndex = text.find(start_delimiter, startIndex + length)
            else:
                self.setFormat(startIndex, len(text) - startIndex, FORMAT_COMMENT)
                self.setCurrentBlockState(1) # Set state to inside block comment
                break # No more pairs starting in this line
        for pattern, format in self._rules:
             if format == FORMAT_COMMENT and (pattern.pattern.startswith(re.escape('/*')) or pattern.pattern.startswith(re.escape('<!--'))):
                  continue
             if format == FORMAT_COMMENT and pattern.pattern.startswith('//') and self.currentBlockState() == 1:
                  continue
             for match in pattern.finditer(text):
                start, end = match.span()
                self.setFormat(start, end, format)
class CustomFileSystemModel(QFileSystemModel):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.icon_map = {
            '.py': 'fa5s.file-code',
            '.js': 'fa5s.file-code',
            '.json': 'fa5s.file-code',  # JSON też jako plik kodu
            '.html': 'fa5s.file-code',
            '.css': 'fa5s.file-code',
            '.ini': 'fa5s.file-alt',  # Plik konfiguracji
            '.txt': 'fa5s.file-alt',
            '.md': 'fa5s.file-alt',
            '.c': 'fa5s.file-code',
            '.cpp': 'fa5s.file-code',
            '.h': 'fa5s.file-code',
            '.hpp': 'fa5s.file-code',
        }
        self.folder_icon_name = 'fa5s.folder'
        self.default_file_icon_name = 'fa5s.file'
        self._has_qtawesome = qta is not None
    def rename(self, index, new_name):
        """"""Zmienia nazwę pliku lub folderu reprezentowanego przez podany index.""""""
        if not index.isValid():
            return False
        old_path = self.filePath(index)
        new_path = os.path.join(os.path.dirname(old_path), new_name)
        try:
            os.rename(old_path, new_path)
            self.refresh()  # Możliwe, że trzeba wymusić odświeżenie modelu
            return True
        except Exception as e:
            print(f""Błąd podczas zmiany nazwy: {e}"")
            return False
    def data(self, index, role=Qt.ItemDataRole.DisplayRole):
        if not index.isValid():
            return None
        if role == Qt.ItemDataRole.DecorationRole:
            file_info = self.fileInfo(index)
            if file_info.isDir():
                if self._has_qtawesome:
                    return qta.icon(self.folder_icon_name)
                else:
                    return super().data(index, role)
            elif file_info.isFile():
                extension = file_info.suffix().lower()
                dotted_extension = '.' + extension
                if dotted_extension in self.icon_map and self._has_qtawesome:
                    return qta.icon(self.icon_map[dotted_extension])
                else:
                    if self._has_qtawesome:
                        return qta.icon(self.default_file_icon_name)
                    else:
                        return super().data(index, role)
        return super().data(index, role)
    def refresh(self, *args):
        self.setRootPath(self.rootPath())
class NewProjectDialog(QDialog):
    def __init__(self, projects_dir, parent=None):
        super().__init__(parent)
        self.setWindowTitle(""Nowy projekt"")
        self.projects_dir = projects_dir
        self.setModal(True)
        layout = QFormLayout(self)
        self.name_edit = QLineEdit()
        layout.addRow(""Nazwa projektu:"", self.name_edit)
        self.button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        self.button_box.button(QDialogButtonBox.StandardButton.Ok).setText(""Utwórz"")  # Zmieniamy tekst przycisku
        self.button_box.accepted.connect(self.accept)
        self.button_box.rejected.connect(self.reject)
        layout.addRow(self.button_box)
        self.name_edit.textChanged.connect(self._validate_name)
        self.name_edit.textChanged.emit(self.name_edit.text())  # Wywołaj walidację od razu
    def _validate_name(self, name):
        """"""Sprawdza poprawność nazwy projektu.""""""
        name = name.strip()
        is_empty = not name
        is_valid_chars = re.fullmatch(r'[a-zA-Z0-9_-]+', name) is not None or name == """"
        full_path = os.path.join(self.projects_dir, name)
        dir_exists = os.path.exists(full_path)
        enable_ok = not is_empty and is_valid_chars and not dir_exists
        self.button_box.button(QDialogButtonBox.StandardButton.Ok).setEnabled(enable_ok)
        if is_empty:
            self.name_edit.setToolTip(""Nazwa projektu nie może być pusta."")
        elif not is_valid_chars:
            self.name_edit.setToolTip(""Nazwa projektu może zawierać tylko litery, cyfry, podkreślenia i myślniki."")
        elif dir_exists:
            self.name_edit.setToolTip(f""Projekt o nazwie '{name}' już istnieje w:\n{self.projects_dir}"")
        else:
            self.name_edit.setToolTip(f""Katalog projektu zostanie utworzony w:\n{full_path}"")
        if not enable_ok and not is_empty:
            self.name_edit.setStyleSheet(""background-color: #ffe0e0;"")  # Jasnoczerwony
        else:
            self.name_edit.setStyleSheet("""")
    def get_project_name(self):
        return self.name_edit.text().strip()
    def get_project_path(self):
        return os.path.join(self.projects_dir, self.get_project_name())
class NewItemDialog(QDialog):
    def __init__(self, parent_dir, is_folder=False, parent=None):
        super().__init__(parent)
        self.setWindowTitle(""Nowy folder"" if is_folder else ""Nowy plik"")
        self.parent_dir = parent_dir
        self.is_folder = is_folder
        self.setModal(True)
        layout = QFormLayout(self)
        self.item_type_label = ""Nazwa folderu:"" if is_folder else ""Nazwa pliku:""
        self.name_edit = QLineEdit()
        layout.addRow(self.item_type_label, self.name_edit)
        self.button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        self.button_box.accepted.connect(self.accept)
        self.button_box.rejected.connect(self.reject)
        layout.addRow(self.button_box)
        self.name_edit.textChanged.connect(self._validate_name)
        self.name_edit.textChanged.emit(self.name_edit.text()) # Initial validation
    def _validate_name(self, name):
        """"""Sprawdza poprawność nazwy pliku/folderu.""""""
        name = name.strip()
        is_empty = not name
        illegal_chars_pattern = r'[<>:""/\\|?*\x00-\x1F]'
        is_valid_chars = re.search(illegal_chars_pattern, name) is None
        full_path = os.path.join(self.parent_dir, name)
        item_exists = os.path.exists(full_path)
        enable_create = not is_empty and is_valid_chars and not item_exists
        self.button_box.button(QDialogButtonBox.StandardButton.Ok).setEnabled(enable_create)
        if is_empty:
             self.name_edit.setToolTip(f""{self.item_type_label} nie może być pusta."")
        elif not is_valid_chars:
             self.name_edit.setToolTip(""Nazwa zawiera niedozwolone znaki."")
        elif item_exists:
             self.name_edit.setToolTip(f""Element o nazwie '{name}' już istnieje w:\n{self.parent_dir}"")
        else:
             self.name_edit.setToolTip("""")
        if not enable_create and not is_empty:
             self.name_edit.setStyleSheet(""background-color: #ffe0e0;"")
        else:
             self.name_edit.setStyleSheet("""")
    def get_item_name(self):
        return self.name_edit.text().strip()
class RenameItemDialog(QDialog):
    def __init__(self, current_path, parent=None):
        super().__init__(parent)
        self.current_path = current_path
        self.is_folder = os.path.isdir(current_path)
        old_name = os.path.basename(current_path)
        self.setWindowTitle(""Zmień nazwę"")
        layout = QVBoxLayout(self)
        self.label = QLabel(f""Nowa nazwa dla '{old_name}':"", self)
        layout.addWidget(self.label)
        self.line_edit = QLineEdit(old_name, self)
        layout.addWidget(self.line_edit)
        self.button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel, self)
        layout.addWidget(self.button_box)
        self.button_box.accepted.connect(self.accept)
        self.button_box.rejected.connect(self.reject)
        self.line_edit.textChanged.connect(self._validate_name)
        self._validate_name(self.line_edit.text())  # Od razu sprawdź
    def _validate_name(self, name):
        name = name.strip()
        is_empty = not name
        illegal_chars_pattern = r'[<>:""/\\|?*\x00-\x1F]'
        is_valid_chars = re.search(illegal_chars_pattern, name) is None
        old_name = os.path.basename(self.current_path)
        is_same_name = name == old_name
        parent_dir = os.path.dirname(self.current_path)
        new_full_path = os.path.join(parent_dir, name)
        item_exists_at_new_path = os.path.exists(new_full_path)
        enable_ok = not is_empty and is_valid_chars and (is_same_name or not item_exists_at_new_path)
        self.button_box.button(QDialogButtonBox.Ok).setEnabled(enable_ok)
    def get_new_name(self):
        return self.line_edit.text().strip()
class SettingsDialog(QDialog):
    def __init__(self, settings, parent=None):
        super().__init__(parent)
        self.setWindowTitle(""Ustawienia"")
        self._settings = settings # Pracujemy na kopii
        self.setModal(True)
        layout = QFormLayout(self)
        self.theme_combo = QComboBox()
        self.theme_combo.addItems([""light"", ""dark""])
        self.theme_combo.setCurrentText(self._settings.get(""theme"", ""light""))
        layout.addRow(""Motyw:"", self.theme_combo)
        self.python_path_edit = QLineEdit(self._settings.get(""python_path"", """"))
        self.python_path_button = QPushButton(""Przeglądaj..."")
        python_path_layout = QHBoxLayout()
        python_path_layout.addWidget(self.python_path_edit)
        python_path_layout.addWidget(self.python_path_button)
        layout.addRow(""Ścieżka Python:"", python_path_layout)
        self.python_path_button.clicked.connect(lambda: self._browse_file(self.python_path_edit))
        self.node_path_edit = QLineEdit(self._settings.get(""node_path"", """"))
        self.node_path_button = QPushButton(""Przeglądaj..."")
        node_path_layout = QHBoxLayout()
        node_path_layout.addWidget(self.node_path_edit)
        node_path_layout.addWidget(self.node_path_button)
        layout.addRow(""Ścieżka Node.js:"", node_path_layout)
        self.node_path_button.clicked.connect(lambda: self._browse_file(self.node_path_edit))
        self.button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        self.button_box.accepted.connect(self.accept)
        self.button_box.rejected.connect(self.reject)
        layout.addRow(self.button_box)
    def _browse_file(self, line_edit):
        """"""Otwiera dialog wyboru pliku dla pola QLineEdit.""""""
        start_dir = os.path.dirname(line_edit.text()) if os.path.dirname(line_edit.text()) else os.path.expanduser(""~"")
        if platform.system() == ""Windows"":
             filter_str = ""Wykonywalne pliki (*.exe *.bat *.cmd);;Wszystkie pliki (*)""
        else:
             filter_str = ""Wszystkie pliki (*)"" # Na Linux/macOS pliki wykonywalne nie mają konkretnego rozszerzenia
        file_path, _ = QFileDialog.getOpenFileName(self, ""Wybierz plik"", start_dir, filter_str)
        if file_path:
            line_edit.setText(os.path.normpath(file_path)) # Znormalizuj ścieżkę przed ustawieniem
    def get_settings(self):
        self._settings[""theme""] = self.theme_combo.currentText()
        self._settings[""python_path""] = self.python_path_edit.text().strip()
        self._settings[""node_path""] = self.node_path_edit.text().strip()
        return self._settings
    def layout(self):
        return super().layout()
class IDEWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.settings = {} # Słownik na ustawienia aplikacji
        self.recents = {""last_project_dir"": None, ""open_files"": []} # Słownik na historię
        self._load_app_state() # Wczytaj stan aplikacji (ustawienia i historię)
        self.setWindowTitle(""Proste IDE - Bez nazwy"")
        self.setGeometry(100, 100, 1200, 800)
        if qta:
             self.setWindowIcon(qta.icon('fa5s.code'))
        else:
             self.setWindowIcon(QIcon.fromTheme(""applications-development"")) # Przykładowa ikona systemowa
        self.current_project_dir = self.recents.get(""last_project_dir"")
        self.open_files = {} # {ścieżka_pliku: edytor_widget}
        self.base_editor_font = QFont(""Courier New"", 10) # Ustaw domyślną czcionkę początkową
        self._setup_ui()
        self._setup_menu()
        self._setup_toolbar()
        self._setup_status_bar()
        self._setup_connections()
        self._apply_theme(self.settings.get(""theme"", ""light""))
        self._apply_editor_font_size() # Zastosuj rozmiar czcionki do wszystkich otwartych edytorów (choć na start puste)
        self.process = QProcess(self) # Proces do uruchamiania kodu
        self.process.readyReadStandardOutput.connect(self._handle_stdout)
        self.process.readyReadStandardError.connect(self._handle_stderr)
        self.process.finished.connect(self._handle_process_finished)
        self.node_scripts = {} # Słownik na skrypty z package.json
        QTimer.singleShot(10, self._initial_setup)
    def _setup_ui(self):
        """"""Konfiguracja głównych elementów interfejsu.""""""
        central_widget = QWidget()
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(0, 0, 0, 0)
        self.main_splitter = QSplitter(Qt.Orientation.Horizontal)
        main_layout.addWidget(self.main_splitter)
        self.project_model = CustomFileSystemModel()  # Użyj niestandardowego modelu z ikonami
        self.project_model.setFilter(QDir.Filter.AllDirs | QDir.Filter.Files | QDir.Filter.NoDotAndDotDot)
        self.project_tree = QTreeView()
        self.project_tree.setModel(self.project_model)
        self.project_tree.setHeaderHidden(True)
        self.project_tree.hideColumn(1)
        self.project_tree.hideColumn(2)
        self.project_tree.hideColumn(3)
        self.project_tree.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
        self.main_splitter.addWidget(self.project_tree)
        self.right_splitter = QSplitter(Qt.Orientation.Vertical)
        self.main_splitter.addWidget(self.right_splitter)
        self.tab_widget = QTabWidget()
        self.tab_widget.setTabsClosable(True)
        self.tab_widget.setMovable(True)
        self.right_splitter.addWidget(self.tab_widget)
        self.console_widget = QWidget()
        self.console_layout = QVBoxLayout(self.console_widget)
        self.console_layout.setContentsMargins(0, 0, 0, 0)
        self.console = QPlainTextEdit()
        self.console.setReadOnly(True)
        self.console.setFont(self.base_editor_font)
        self.console_layout.addWidget(self.console, 1) # Rozciągnij pole konsoli
        self.console_input = QLineEdit()
        self.console_input.setPlaceholderText(""Wpisz polecenie..."")
        self.console_layout.addWidget(self.console_input, 0) # Nie rozciągaj pola wprowadzania
        self.console_buttons_layout = QHBoxLayout()
        self.console_buttons_layout.setContentsMargins(0, 0, 0, 0)
        self.console_buttons_layout.addStretch(1)
        self.clear_console_button = QPushButton(""Wyczyść konsolę"")
        self.console_buttons_layout.addWidget(self.clear_console_button)
        self.copy_console_button = QPushButton(""Skopiuj"")
        self.console_buttons_layout.addWidget(self.copy_console_button)
        self.console_layout.addLayout(self.console_buttons_layout)
        self.right_splitter.addWidget(self.console_widget)
        self.main_splitter.setSizes([200, 800])
        self.right_splitter.setSizes([600, 200])
        self.setCentralWidget(central_widget)
        self.action_toggle_tree = QAction(""Pokaż/Ukryj drzewko"", self)
        self.action_toggle_tree.setCheckable(True)
        self.action_toggle_tree.setChecked(True)
        self.action_toggle_tree.triggered.connect(self._toggle_tree_panel)
        self.action_toggle_console = QAction(""Pokaż/Ukryj konsolę"", self)
        self.action_toggle_console.setCheckable(True)
        self.action_toggle_console.setChecked(True)
        self.action_toggle_console.triggered.connect(self._toggle_console_panel)
        self._apply_view_settings()
    def _toggle_tree_panel(self, checked):
        self.main_splitter.widget(0).setVisible(checked)
    def _toggle_console_panel(self, checked):
        self.right_splitter.widget(1).setVisible(checked)
    def _setup_menu(self):
        """"""Konfiguracja paska menu.""""""
        menu_bar = self.menuBar()
        file_menu = menu_bar.addMenu(""&Plik"") # & dodaje skrót klawiszowy Alt+P
        self.action_new_project = QAction(qta.icon('fa5s.folder-plus') if qta else QIcon(), ""&Nowy projekt..."", self)
        self.action_new_project.triggered.connect(self._new_project)
        file_menu.addAction(self.action_new_project)
        self.action_open_folder = QAction(qta.icon('fa5s.folder-open') if qta else QIcon(), ""Otwórz &folder projektu..."", self)
        self.action_open_folder.triggered.connect(self._open_project_folder) # Użyj bezpośredniego połączenia
        file_menu.addAction(self.action_open_folder)
        self.action_open_file = QAction(qta.icon('fa5s.file-code') if qta else QIcon(), ""Otwórz &plik..."", self)
        self.action_open_file.triggered.connect(self._open_file_dialog)
        file_menu.addAction(self.action_open_file)
        file_menu.addSeparator()
        self.recent_files_menu = QMenu(""Ostatnio otwierane"", self)
        file_menu.addMenu(self.recent_files_menu)
        file_menu.addSeparator()
        self.action_save = QAction(qta.icon('fa5s.save') if qta else QIcon(), ""&Zapisz"", self)
        self.action_save.setShortcut(QKeySequence.StandardKey.Save)
        self.action_save.triggered.connect(self._save_current_file)
        file_menu.addAction(self.action_save)
        self.action_save_as = QAction(qta.icon('fa5s.file-export') if qta else QIcon(), ""Zapisz &jako..."", self)
        self.action_save_as.setShortcut(QKeySequence.StandardKey.SaveAs)
        self.action_save_as.triggered.connect(self._save_current_file_as)
        file_menu.addAction(self.action_save_as)
        self.action_save_all = QAction(qta.icon('fa5s.save') if qta else QIcon(), ""Zapisz wszys&tko"", self)
        self.action_save_all.setShortcut(QKeySequence(""Ctrl+Shift+S"")) # Standardowy skrót
        self.action_save_all.triggered.connect(self._save_all_files)
        file_menu.addAction(self.action_save_all)
        file_menu.addSeparator()
        self.action_close_file = QAction(qta.icon('fa5s.window-close') if qta else QIcon(), ""Zamknij ak&tualny plik"", self)
        self.action_close_file.triggered.connect(self._close_current_tab)
        file_menu.addAction(self.action_close_file)
        file_menu.addSeparator()
        self.action_exit = QAction(qta.icon('fa5s.door-open') if qta else QIcon(), ""&Zakończ"", self)
        self.action_exit.setShortcut(QKeySequence.StandardKey.Quit)
        self.action_exit.triggered.connect(self.close)
        file_menu.addAction(self.action_exit)
        edit_menu = menu_bar.addMenu(""&Edycja"")
        view_menu = menu_bar.addMenu(""&Widok"")
        self.action_toggle_tree = QAction(qta.icon('fa5s.sitemap') if qta else QIcon(), ""Pokaż &drzewko plików"", self)
        self.action_toggle_tree.setCheckable(True)
        self.action_toggle_tree.setChecked(self.settings.get(""show_tree"", True)) # Ustaw stan z ustawień
        self.action_toggle_tree.triggered.connect(self._toggle_tree_view)
        view_menu.addAction(self.action_toggle_tree)
        self.action_toggle_console = QAction(qta.icon('fa5s.terminal') if qta else QIcon(), ""Pokaż &konsolę"", self)
        self.action_toggle_console.setCheckable(True)
        self.action_toggle_console.setChecked(self.settings.get(""show_console"", True)) # Ustaw stan z ustawień
        self.action_toggle_console.triggered.connect(self._toggle_console)
        view_menu.addAction(self.action_toggle_console)
        search_menu = menu_bar.addMenu(""&Wyszukaj"")
        self.action_find = QAction(qta.icon('fa5s.search') if qta else QIcon(), ""&Znajdź..."", self)
        self.action_find.setShortcut(QKeySequence.StandardKey.Find)
        self.action_find.triggered.connect(self._show_find_bar)
        search_menu.addAction(self.action_find)
        run_menu = menu_bar.addMenu(""&Uruchom"")
        self.action_run_file = QAction(qta.icon('fa5s.play') if qta else QIcon(), ""&Uruchom aktualny plik"", self)
        self.action_run_file.setShortcut(QKeySequence(""F5"")) # Przykładowy skrót
        self.action_run_file.triggered.connect(self._run_current_file)
        run_menu.addAction(self.action_run_file)
        tools_menu = menu_bar.addMenu(""&Narzędzia"")
        self.action_settings = QAction(qta.icon('fa5s.cog') if qta else QIcon(), ""&Ustawienia..."", self)
        self.action_settings.triggered.connect(self._show_settings_dialog)
        tools_menu.addAction(self.action_settings)
        help_menu = menu_bar.addMenu(""&Pomoc"")
        self.action_about = QAction(qta.icon('fa5s.info-circle') if qta else QIcon(), ""&O programie..."", self)
        self.action_about.triggered.connect(self._show_about_dialog)
        help_menu.addAction(self.action_about)
    def _setup_toolbar(self):
        """"""Konfiguracja paska narzędzi.""""""
        toolbar = self.addToolBar(""Główne narzędzia"")
        toolbar.setMovable(False) # Nie można go przesuwać
        toolbar.setIconSize(QSize(16, 16)) # Rozmiar ikon
        toolbar.addAction(self.action_new_project) # Nowy projekt
        toolbar.addAction(self.action_open_folder) # Otwórz folder
        toolbar.addAction(self.action_open_file) # Otwórz plik
        toolbar.addSeparator()
        toolbar.addAction(self.action_save) # Zapisz
        toolbar.addAction(self.action_save_all) # Zapisz wszystko
        toolbar.addSeparator()
        self.run_toolbutton = QToolButton(self)
        self.run_toolbutton.setDefaultAction(self.action_run_file)
        self.run_toolbutton.setPopupMode(QToolButton.ToolButtonPopupMode.MenuButtonPopup)
        toolbar.addWidget(self.run_toolbutton) # Dodaj QToolButton do toolbara
        toolbar.addSeparator()
        self.search_input = QLineEdit(self)
        self.search_input.setPlaceholderText(""Szukaj w pliku..."")
        self.search_input.setClearButtonEnabled(True) # Przycisk czyszczenia
        self.search_input.returnPressed.connect(lambda: self._find_text(self.search_input.text(), 'next')) # Szukaj po wciśnięciu Enter
        self.find_next_button = QPushButton(""Znajdź dalej"")
        self.find_next_button.clicked.connect(lambda: self._find_text(self.search_input.text(), 'next'))
        self.find_prev_button = QPushButton(""Znajdź poprzedni"")
        self.find_prev_button.clicked.connect(lambda: self._find_text(self.search_input.text(), 'previous'))
        toolbar.addWidget(self.search_input)
        toolbar.addWidget(self.find_next_button)
        toolbar.addWidget(self.find_prev_button)
        self.search_input.setVisible(False)
        self.find_next_button.setVisible(False)
        self.find_prev_button.setVisible(False)
    def _setup_status_bar(self):
        """"""Konfiguracja paska stanu.""""""
        self.statusBar().showMessage(""Gotowy."")
    def _setup_connections(self):
        """"""Połączenie sygnałów ze slotami.""""""
        self.project_tree.doubleClicked.connect(self._handle_tree_item_double_click)
        self.tab_widget.tabCloseRequested.connect(self._close_tab_by_index)
        self.tab_widget.currentChanged.connect(self._handle_tab_change)
        self.project_tree.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu) # Upewnij się, że policy jest ustawione
        self.project_tree.customContextMenuRequested.connect(self._show_project_tree_context_menu)
        self.clear_console_button.clicked.connect(self.console.clear)
        self.copy_console_button.clicked.connect(self._copy_console)
        self.console_input.returnPressed.connect(self._run_console_command)
    def _initial_setup(self):
        """"""Wstępna konfiguracja po uruchomieniu, w tym ładowanie ostatniego stanu.""""""
        initial_dir = self.recents.get(""last_project_dir"")
        if not initial_dir or not os.path.isdir(initial_dir):
             initial_dir = PROJECTS_DIR # Użyj domyślnego katalogu projects
             os.makedirs(PROJECTS_DIR, exist_ok=True)
        if os.path.isdir(initial_dir):
             self._open_project_folder(initial_dir)
        else:
             self.statusBar().showMessage(f""Brak domyślnego katalogu projektu. Otwórz folder ręcznie lub utwórz nowy."")
             self.project_model.setRootPath("""") # Brak roota w drzewku
             self.current_project_dir = None # Resetuj current_project_dir
             self._update_run_button_menu()
        recent_files = self.recents.get(""open_files"", [])
        QTimer.singleShot(200, lambda: self._reopen_files(recent_files)) # Krótsze opóźnienie
        self._update_recent_files_menu() # Uaktualnij menu ostatnio otwieranych
    def _load_app_state(self):
        """"""Wczytuje ustawienia i historię z plików JSON.""""""
        try:
            if os.path.exists(SETTINGS_FILE):
                with open(SETTINGS_FILE, 'r', encoding='utf-8') as f:
                    loaded_settings = json.load(f)
                    self.settings = {
                        ""theme"": loaded_settings.get(""theme"", ""light""),
                        ""python_path"": loaded_settings.get(""python_path"", """"),
                        ""node_path"": loaded_settings.get(""node_path"", """"),
                        ""show_tree"": loaded_settings.get(""show_tree"", True),
                        ""show_console"": loaded_settings.get(""show_console"", True),
                        ""editor_font_size"": loaded_settings.get(""editor_font_size"", 10)
                    }
            else:
                self.settings = {
                    ""theme"": ""light"",
                    ""python_path"": """",
                    ""node_path"": """",
                    ""show_tree"": True,
                    ""show_console"": True,
                    ""editor_font_size"": 10
                }
            if os.path.exists(RECENTS_FILE):
                 with open(RECENTS_FILE, 'r', encoding='utf-8') as f:
                     loaded_recents = json.load(f)
                     self.recents = {
                         ""last_project_dir"": loaded_recents.get(""last_project_dir""),
                         ""open_files"": loaded_recents.get(""open_files"", [])
                     }
            else:
                 self.recents = {""last_project_dir"": None, ""open_files"": []}
        except (json.JSONDecodeError, Exception) as e:
            print(f""Błąd podczas wczytywania stanu aplikacji: {e}"", file=sys.stderr)
            self.settings = {
                ""theme"": ""light"",
                ""python_path"": """",
                ""node_path"": """",
                ""show_tree"": True,
                ""show_console"": True,
                ""editor_font_size"": 10
            }
            self.recents = {""last_project_dir"": None, ""open_files"": []}
    def _save_app_state(self):
        """"""Zapisuje ustawienia i historię do plików JSON.""""""
        try:
            self.recents[""open_files""] = list(self.open_files.keys())
            if self.current_project_dir and os.path.isdir(self.current_project_dir):
                 self.recents[""last_project_dir""] = os.path.normpath(self.current_project_dir) # Znormalizuj przed zapisem
            else:
                 self.recents[""last_project_dir""] = None # Nie zapisuj jeśli nie ma folderu
            with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.settings, f, indent=4)
            with open(RECENTS_FILE, 'w', encoding='utf-8') as f:
                 normalized_open_files = [os.path.normpath(p) for p in self.recents[""open_files""]]
                 unique_open_files = []
                 for p in normalized_open_files:
                     if p not in unique_open_files:
                         unique_open_files.append(p)
                 self.recents[""open_files""] = unique_open_files[:20] # Ostatnie 20 unikalnych
                 json.dump(self.recents, f, indent=4)
        except Exception as e:
            print(f""Błąd podczas zapisu stanu aplikacji: {e}"", file=sys.stderr)
    def closeEvent(self, event):
        """"""Obsługa zdarzenia zamykania okna.""""""
        unsaved_files = [path for path, editor in self.open_files.items() if editor.document().isModified()]
        if unsaved_files:
            msg_box = QMessageBox(self)
            msg_box.setIcon(QMessageBox.Icon.Warning)
            msg_box.setWindowTitle(""Niezapisane zmiany"")
            msg_box.setText(f""Masz niezapisane zmiany w {len(unsaved_files)} plikach.\nCzy chcesz zapisać przed zamknięciem?"")
            msg_box.setStandardButtons(QMessageBox.StandardButton.Save | QMessageBox.StandardButton.Discard | QMessageBox.StandardButton.Cancel)
            msg_box.setDefaultButton(QMessageBox.StandardButton.Save)
            reply = msg_box.exec()
            if reply == QMessageBox.StandardButton.Save:
                if self._save_all_files():
                     self._save_app_state() # Zapisz stan po pomyślnym zapisie plików
                     event.accept() # Akceptuj zamknięcie
                else:
                     event.ignore() # Nie zamykaj, jeśli zapis się nie udał
            elif reply == QMessageBox.StandardButton.Discard:
                for i in range(self.tab_widget.count() - 1, -1, -1):
                     widget = self.tab_widget.widget(i)
                     if hasattr(widget, 'document'):
                          widget.document().setModified(False)
                     self._close_tab_by_index(i) # Ta metoda usunie z open_files i recents
                self._save_app_state() # Zapisz stan (lista otwartych plików będzie aktualna)
                event.accept() # Akceptuj zamknięcie
            else:
                event.ignore() # Ignoruj zamknięcie
        else:
            self._save_app_state() # Zapisz stan, bo nie ma niezapisanych plików
            event.accept() # Akceptuj zamknięcie
    def _new_project(self):
        """"""Tworzy nowy katalog projektu.""""""
        dialog = NewProjectDialog(PROJECTS_DIR, self)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            project_name = dialog.get_project_name()
            project_path = dialog.get_project_path()
            try:
                if os.path.exists(project_path):
                    QMessageBox.warning(self, ""Projekt już istnieje"", f""Projekt o nazwie '{project_name}' już istnieje."")
                    return
                os.makedirs(project_path)
                self.statusBar().showMessage(f""Utworzono nowy projekt: {project_name}"")
                self._open_project_folder(project_path)
            except OSError as e:
                QMessageBox.critical(self, ""Błąd tworzenia projektu"", f""Nie można utworzyć katalogu projektu:\n{e}"")
                self.statusBar().showMessage(""Błąd tworzenia projektu."")
            except Exception as e:
                 QMessageBox.critical(self, ""Nieoczekiwany błąd"", f""Wystąpił nieoczekiwany błąd:\n{e}"")
                 self.statusBar().showMessage(""Nieoczekiwany błąd."")
    def _open_project_folder(self, path=None):
        """"""Otwiera okno dialogowe wyboru folderu projektu lub otwiera wskazany folder.""""""
        if path is None:
            start_path = self.current_project_dir if self.current_project_dir else PROJECTS_DIR
            dialog_path = QFileDialog.getExistingDirectory(self, ""Otwórz folder projektu"", start_path)
            if not dialog_path:
                return
            path = dialog_path
        path = os.path.normpath(path)
        if not os.path.isdir(path):
            QMessageBox.critical(self, ""Błąd"", f""Wybrana ścieżka nie jest katalogiem lub nie istnieje:\n{path}"")
            self.statusBar().showMessage(f""Błąd: Nie można otworzyć folderu: {path}"")
            return
        if self.current_project_dir and self.current_project_dir != path:
             unsaved_files_count = sum(1 for editor in self.open_files.values() if editor.document().isModified())
             if unsaved_files_count > 0:
                  reply = QMessageBox.question(self, ""Niezapisane zmiany"",
                                               f""Obecny projekt ma {unsaved_files_count} niezapisanych plików.\n""
                                               ""Czy chcesz zapisać zmiany przed otwarciem nowego folderu?"",
                                               QMessageBox.StandardButton.Save | QMessageBox.StandardButton.Discard | QMessageBox.StandardButton.Cancel)
                  if reply == QMessageBox.StandardButton.Cancel:
                       self.statusBar().showMessage(""Otwieranie folderu anulowane."")
                       return # Anuluj operację
                  if reply == QMessageBox.StandardButton.Save:
                       if not self._save_all_files(): # Ta metoda obsłuży Save As dla nowych plików
                            self.statusBar().showMessage(""Otwieranie folderu anulowane (błąd zapisu)."")
                            return # Anuluj operację
             self._close_all_files() # Ta metoda już nie pyta o zapis
        self.current_project_dir = path
        self.project_model.setRootPath(path)
        root_index = self.project_model.index(path)
        if not root_index.isValid():
             QMessageBox.critical(self, ""Błąd"", f""Nie można ustawić katalogu głównego drzewka dla ścieżki:\n{path}\n""
                                                 ""Sprawdź uprawnienia lub czy ścieżka jest dostępna dla systemu plików."")
             self.statusBar().showMessage(f""Błąd ustawienia katalogu głównego: {path}"")
             self.project_tree.setRootIndex(self.project_model.index("""")) # Wyczyść roota
             self.current_project_dir = None # Resetuj current_project_dir
             self.recents[""open_files""] = [p for p in self.recents[""open_files""] if not os.path.normpath(p).startswith(os.path.normpath(path) + os.sep)]
             self._update_recent_files_menu()
             self._save_app_state() # Zapisz zaktualizowany stan
             self._update_run_button_menu() # Uaktualnij menu uruchamiania (brak projektu)
             return
        self.project_tree.setRootIndex(root_index)
        self.setWindowTitle(f""Proste IDE - {os.path.basename(path)}"")
        self.statusBar().showMessage(f""Otwarto folder: {path}"")
        self._check_package_json(path)
        self.recents[""last_project_dir""] = path
        self._save_app_state() # Zapisz, żeby zapamiętać ostatni folder
    def _close_all_files(self):
         """"""Zamyka wszystkie otwarte zakładki edytora bez pytania o zapis.""""""
         for file_path in list(self.open_files.keys()):
              editor_widget = self.open_files.get(file_path)
              if editor_widget:
                   tab_index = self.tab_widget.indexOf(editor_widget)
                   if tab_index != -1:
                        if hasattr(editor_widget, 'document'):
                            editor_widget.document().setModified(False)
                        self.tab_widget.removeTab(tab_index)
                        if file_path in self.open_files:
                             del self.open_files[file_path]
         self.recents[""open_files""] = [] # Wyczyść listę otwartych plików
         self._update_recent_files_menu() # Uaktualnij menu
    def _open_file_dialog(self):
        """"""Otwiera okno dialogowe wyboru pliku i otwiera go w edytorze.""""""
        start_path = self.current_project_dir if self.current_project_dir else PROJECTS_DIR
        file_path, _ = QFileDialog.getOpenFileName(self, ""Otwórz plik"", start_path, ""Wszystkie pliki (*);;Pliki Pythona (*.py);;Pliki JavaScript (*.js);;Pliki HTML (*.html);;Pliki CSS (*.css);;Pliki C++ (*.c *.cpp *.h *.hpp);;Pliki INI (*.ini);;Pliki JSON (*.json)"")
        if file_path:
            self._open_file(file_path)
    def _open_file(self, file_path):
        """"""Otwiera wskazany plik w nowej zakładce edytora.""""""
        file_path = os.path.normpath(file_path)
        if not os.path.exists(file_path) or not os.path.isfile(file_path):
            self.statusBar().showMessage(f""Błąd: Plik nie istnieje lub nie jest plikiem: {file_path}"")
            if file_path in self.recents[""open_files""]:
                 self.recents[""open_files""].remove(file_path)
                 self._update_recent_files_menu() # Uaktualnij menu
                 self._save_app_state() # Zapisz stan
            return
        if file_path in self.open_files:
            index = -1
            for i in range(self.tab_widget.count()):
                 widget = self.tab_widget.widget(i)
                 if self.open_files.get(file_path) is widget:
                      index = i
                      break
            if index != -1:
                self.tab_widget.setCurrentIndex(index)
                self.statusBar().showMessage(f""Plik {os.path.basename(file_path)} jest już otwarty."")
                if file_path in self.recents[""open_files""]:
                     self.recents[""open_files""].remove(file_path)
                     self.recents[""open_files""].insert(0, file_path)
                     self._update_recent_files_menu()
                     self._save_app_state()
                return
            else:
                print(f""Warning: File {file_path} found in open_files but not in tab widget."", file=sys.stderr)
        try:
            content = """"
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
            except UnicodeDecodeError:
                 try:
                      with open(file_path, 'r', encoding='latin-1') as f:
                          content = f.read()
                 except Exception:
                      with open(file_path, 'r', encoding='utf-8', errors='replace') as f:
                          content = f.read()
        except Exception as e:
            QMessageBox.critical(self, ""Błąd otwarcia pliku"", f""Nie można odczytać pliku {os.path.basename(file_path)}:\n{e}"")
            self.statusBar().showMessage(f""Błąd otwarcia pliku: {os.path.basename(file_path)}"")
            return
        editor = QPlainTextEdit()
        editor.setPlainText(content)
        editor.setFont(self.base_editor_font)
        editor.document().setModified(False) # Nowo otwarty plik nie jest zmodyfikowany
        editor.document().modificationChanged.connect(self._handle_modification_changed)
        language = self._get_language_from_path(file_path)
        highlighter = CodeSyntaxHighlighter(editor.document(), language) # Przypisz highlighter do dokumentu edytora
        setattr(editor.document(), '_syntax_highlighter', highlighter)
        tab_index = self.tab_widget.addTab(editor, os.path.basename(file_path))
        self.tab_widget.setCurrentIndex(tab_index)
        self.open_files[file_path] = editor # Zapisz odwołanie do edytora
        self.statusBar().showMessage(f""Otwarto plik: {file_path}"")
        if file_path in self.recents[""open_files""]:
            self.recents[""open_files""].remove(file_path) # Usuń stary wpis, żeby był na górze
        self.recents[""open_files""].insert(0, file_path) # Dodaj na początek
        self._update_recent_files_menu() # Uaktualnij menu
        self._save_app_state() # Zapisz stan
    def _reopen_files(self, file_list):
        """"""Ponownie otwiera listę plików po uruchomieniu programu.""""""
        files_to_reopen = list(file_list) # Tworzymy kopię
        valid_files = [f for f in files_to_reopen if os.path.exists(f) and os.path.isfile(f)]
        self.recents[""open_files""] = valid_files
        self._update_recent_files_menu() # Uaktualnij menu
        for file_path in valid_files:
            QTimer.singleShot(0, lambda path=file_path: self._open_file(path))
        invalid_files = [f for f in files_to_reopen if f not in valid_files]
        if invalid_files:
            msg = ""Nie można ponownie otworzyć następujących plików (nie znaleziono):\n"" + ""\n"".join(invalid_files)
            QMessageBox.warning(self, ""Błąd otwarcia plików"", msg)
    def _update_recent_files_menu(self):
        """"""Uaktualnia listę plików w menu 'Ostatnio otwierane'.""""""
        self.recent_files_menu.clear()
        recent_items_to_show = list(self.recents.get(""open_files"", []))[:15] # Pokaż max 15 (praca na kopii)
        if not recent_items_to_show:
            self.recent_files_menu.addAction(""Brak ostatnio otwieranych plików"").setEnabled(False)
            return
        actions_to_add = []
        cleaned_recent_files = [] # Zbuduj nową listę poprawnych ścieżek
        for file_path in recent_items_to_show:
            if os.path.exists(file_path) and os.path.isfile(file_path):
                 cleaned_recent_files.append(file_path) # Dodaj do listy czystej
                 menu_text = os.path.basename(file_path) # Pokaż tylko nazwę pliku
                 action = QAction(menu_text, self)
                 action.setData(file_path) # Zapisz pełną ścieżkę w danych akcji
                 action.triggered.connect(lambda checked, path=file_path: self._open_file(path))
                 actions_to_add.append(action)
        all_existing_recent_files = [p for p in self.recents.get(""open_files"", []) if os.path.exists(p) and os.path.isfile(p)]
        unique_recent_files = []
        for p in all_existing_recent_files:
            if p not in unique_recent_files:
                unique_recent_files.append(p)
        self.recents[""open_files""] = unique_recent_files[:20]
        self.recent_files_menu.clear() # Wyczyść ponownie
        if not self.recents[""open_files""]:
             self.recent_files_menu.addAction(""Brak ostatnio otwieranych plików"").setEnabled(False)
        else:
             for file_path in self.recents[""open_files""]:
                  menu_text = os.path.basename(file_path)
                  action = QAction(menu_text, self)
                  action.setData(file_path)
                  action.triggered.connect(lambda checked, path=file_path: self._open_file(path))
                  self.recent_files_menu.addAction(action)
    def _get_language_from_path(self, file_path):
         """"""Zwraca nazwę języka na podstawie rozszerzenia pliku.""""""
         if not file_path:
              return 'plaintext'
         file_info = QFileInfo(file_path)
         extension = file_info.suffix().lower()
         if extension == 'py':
             return 'python'
         elif extension == 'js':
             return 'javascript'
         elif extension == 'html':
             return 'html'
         elif extension == 'css':
             return 'css'
         elif extension in ['c', 'cpp', 'h', 'hpp']:
             return 'c++'
         elif extension == 'ini':
             return 'ini'
         elif extension == 'json':
             return 'json'
         else:
             return 'plaintext' # Bez kolorowania
    def _handle_tree_item_double_click(self, index):
        """"""Obsługa podwójnego kliknięcia w drzewku projektu.""""""
        file_path = self.project_model.filePath(index)
        if os.path.isfile(file_path):
            self._open_file(file_path)
        elif os.path.isdir(file_path):
             if self.project_tree.isExpanded(index):
                 self.project_tree.collapse(index)
             else:
                 self.project_tree.expand(index)
    def _show_project_tree_context_menu(self, point):
        """"""Wyświetla menu kontekstowe dla drzewka projektu.""""""
        index = self.project_tree.indexAt(point)
        menu = QMenu(self)
        create_file_action = QAction(qta.icon('fa5s.file-medical') if qta else QIcon(), ""Nowy plik..."", self)
        create_folder_action = QAction(qta.icon('fa5s.folder-plus') if qta else QIcon(), ""Nowy folder..."", self)
        select_all_action = QAction(""Zaznacz wszystko"", self)
        select_all_action.triggered.connect(self.project_tree.selectAll)
        if index.isValid():
            file_path = self.project_model.filePath(index)
            file_info = self.project_model.fileInfo(index)
            is_root_model = self.project_model.rootPath() == file_path
            if not is_root_model: # Nie usuwaj/zmieniaj nazwy roota projektu
                 rename_action = QAction(qta.icon('fa5s.edit') if qta else QIcon(), ""Zmień nazwę..."", self)
                 delete_action = QAction(qta.icon('fa5s.trash') if qta else QIcon(), ""Usuń"", self)
                 rename_action.triggered.connect(lambda: self._rename_item(index))
                 delete_action.triggered.connect(lambda: self._delete_item(index))
                 if file_info.isDir():
                     menu.addAction(create_file_action) # Nowy plik w folderze
                     menu.addAction(create_folder_action) # Nowy folder w folderze
                     menu.addSeparator()
                     menu.addAction(rename_action)
                     menu.addAction(delete_action)
                     menu.addSeparator()
                     open_in_os_action = QAction(qta.icon('fa5s.external-link-alt') if qta else QIcon(), ""Otwórz w eksploratorze"", self) # Windows
                     if platform.system() == ""Darwin"": open_in_os_action.setText(""Otwórz w Finderze"") # macOS
                     elif platform.system() == ""Linux"": open_in_os_action.setText(""Otwórz w menedżerze plików"") # Linux
                     open_in_os_action.triggered.connect(lambda: QDesktopServices.openUrl(QUrl.fromLocalFile(file_path)))
                     menu.addAction(open_in_os_action)
                     create_file_action.triggered.connect(lambda: self._create_new_item(file_path, is_folder=False))
                     create_folder_action.triggered.connect(lambda: self._create_new_item(file_path, is_folder=True))
                 elif file_info.isFile():
                     open_action = QAction(qta.icon('fa5s.file') if qta else QIcon(), ""Otwórz"", self) # Mimo podwójnego kliknięcia
                     open_action.triggered.connect(lambda: self._open_file(file_path))
                     duplicate_action = QAction(qta.icon('fa5s.copy') if qta else QIcon(), ""Duplikuj"", self)
                     duplicate_action.triggered.connect(lambda: self._duplicate_file(index))
                     copy_path_action = QAction(qta.icon('fa5s.link') if qta else QIcon(), ""Kopiuj ścieżkę"", self)
                     copy_path_action.triggered.connect(lambda: QApplication.clipboard().setText(file_path))
                     menu.addAction(open_action)
                     menu.addSeparator()
                     menu.addAction(rename_action)
                     menu.addAction(delete_action)
                     menu.addAction(duplicate_action)
                     menu.addSeparator()
                     menu.addAction(copy_path_action)
                     menu.addSeparator()
                     open_containing_folder_action = QAction(qta.icon('fa5s.folder-open') if qta else QIcon(), ""Pokaż w eksploratorze"", self) # Windows
                     if platform.system() == ""Darwin"": open_containing_folder_action.setText(""Pokaż w Finderze"") # macOS
                     elif platform.system() == ""Linux"": open_containing_folder_action.setText(""Pokaż w menedżerze plików"") # Linux
                     open_containing_folder_action.triggered.connect(lambda: QDesktopServices.openUrl(QUrl.fromLocalFile(os.path.dirname(file_path))))
                     menu.addAction(open_containing_folder_action)
            else: # Kliknięto na root folderu projektu
                 menu.addAction(create_file_action) # Nowy plik w roocie
                 menu.addAction(create_folder_action) # Nowy folder w roocie
                 menu.addSeparator()
                 open_in_os_action = QAction(qta.icon('fa5s.external-link-alt') if qta else QIcon(), ""Otwórz w eksploratorze"", self) # Windows
                 if platform.system() == ""Darwin"": open_in_os_action.setText(""Otwórz w Finderze"") # macOS
                 elif platform.system() == ""Linux"": open_in_os_action.setText(""Otwórz w menedżerze plików"") # Linux
                 open_in_os_action.triggered.connect(lambda: QDesktopServices.openUrl(QUrl.fromLocalFile(file_path)))
                 menu.addAction(open_in_os_action)
                 create_file_action.triggered.connect(lambda: self._create_new_item(file_path, is_folder=False))
                 create_folder_action.triggered.connect(lambda: self._create_new_item(file_path, is_folder=True))
        else: # Kliknięto na puste miejsce w drzewku
            if self.current_project_dir and os.path.isdir(self.current_project_dir):
                menu.addAction(create_file_action) # Nowy plik w roocie projektu
                menu.addAction(create_folder_action) # Nowy folder w roocie projektu
                create_file_action.triggered.connect(lambda: self._create_new_item(self.current_project_dir, is_folder=False))
                create_folder_action.triggered.connect(lambda: self._create_new_item(self.current_project_dir, is_folder=True))
                menu.addSeparator()
            menu.addAction(select_all_action)
        if menu.actions(): # Pokaż menu tylko jeśli są jakieś akcje
            menu.exec(self.project_tree.mapToGlobal(point))
    def _create_new_item(self, parent_dir, is_folder):
         """"""Tworzy nowy plik lub folder w podanym katalogu nadrzędnym.""""""
         if not os.path.isdir(parent_dir):
              QMessageBox.warning(self, ""Błąd tworzenia"", f""Katalog nadrzędny nie istnieje lub nie jest katalogiem:\n{parent_dir}"")
              self.statusBar().showMessage(""Błąd tworzenia nowego elementu."")
              return
         dialog = NewItemDialog(parent_dir, is_folder, self)
         if dialog.exec() == QDialog.DialogCode.Accepted:
             item_name = dialog.get_item_name()
             if not item_name: return # Powinno być obsłużone w dialogu, ale zabezpieczenie
             full_path = os.path.join(parent_dir, item_name)
             parent_index = self.project_model.index(parent_dir)
             if not parent_index.isValid():
                  try:
                       if is_folder:
                           os.makedirs(full_path)
                           self.statusBar().showMessage(f""Utworzono folder: {item_name}"")
                       else:
                           with open(full_path, 'w') as f: pass # Utwórz pusty plik
                           self.statusBar().showMessage(f""Utworzono plik: {item_name}"")
                       root_path = self.project_model.rootPath()
                       if root_path and os.path.isdir(root_path):
                            self.project_model.refresh(self.project_model.index(root_path))
                  except OSError as e:
                       QMessageBox.critical(self, ""Błąd tworzenia"", f""Nie można utworzyć {'folderu' if is_folder else 'pliku'}:\n{e}"")
                       self.statusBar().showMessage(f""Błąd tworzenia {'folderu' if is_folder else 'pliku'}."")
                  except Exception as e:
                      QMessageBox.critical(self, ""Nieoczekiwany błąd"", f""Wystąpił nieoczekiwany błąd:\n{e}"")
                      self.statusBar().showMessage(""Nieoczekiwany błąd."")
                  return
             success = False
             if is_folder:
                 new_index = self.project_model.mkdir(parent_index, item_name)
                 if new_index.isValid():
                      self.statusBar().showMessage(f""Utworzono folder: {item_name}"")
                      success = True
                      self.project_tree.expand(new_index) # Rozwiń folder, żeby było widać nowy element
             else:
                  try:
                       with open(full_path, 'w') as f: pass # Utwórz pusty plik
                       self.statusBar().showMessage(f""Utworzono plik: {item_name}"")
                       self.project_model.refresh(parent_index)
                       success = True
                  except OSError as e:
                       QMessageBox.critical(self, ""Błąd tworzenia"", f""Nie można utworzyć pliku:\n{e}"")
                       self.statusBar().showMessage(""Błąd tworzenia pliku."")
                  except Exception as e:
                      QMessageBox.critical(self, ""Nieoczekiwany błąd"", f""Wystąpił nieoczekiwany błąd:\n{e}"")
                      self.statusBar().showMessage(""Nieoczekiwany błąd."")
    def _rename_item(self, index):
         """"""Zmienia nazwę pliku lub folderu.""""""
         if not index.isValid(): return
         old_path = self.project_model.filePath(index)
         old_name = os.path.basename(old_path)
         parent_dir = os.path.dirname(old_path)
         if old_path == self.project_model.rootPath() or old_path == self.project_model.filePath(self.project_model.index("""")):
              QMessageBox.warning(self, ""Błąd zmiany nazwy"", ""Nie można zmienić nazwy katalogu głównego."")
              self.statusBar().showMessage(""Nie można zmienić nazwy katalogu głównego."")
              return
         dialog = RenameItemDialog(old_path, self)
         if dialog.exec() == QDialog.DialogCode.Accepted:
             new_name = dialog.get_new_name()
             if not new_name or new_name == old_name:
                  self.statusBar().showMessage(""Zmiana nazwy anulowana lub nowa nazwa jest taka sama."")
                  return # Brak zmiany lub pusta nazwa (powinno być obsłużone w dialogu)
             new_path = os.path.join(parent_dir, new_name)
             open_files_to_close = []
             if os.path.isfile(old_path):
                  if old_path in self.open_files:
                       open_files_to_close.append(old_path)
             elif os.path.isdir(old_path):
                  normalized_folder_path = os.path.normpath(old_path) + os.sep
                  for open_file_path in self.open_files.keys():
                       if os.path.normpath(open_file_path).startswith(normalized_folder_path):
                            open_files_to_close.append(open_file_path)
             if open_files_to_close:
                  open_file_names = [os.path.basename(p) for p in open_files_to_close]
                  msg = f""{{'Plik' if os.path.isfile(old_path) else 'Folder'}} '{old_name}' zawiera otwarte pliki, które zostaną zamknięte i ponownie otwarte po zmianie nazwy:\\n"" + ""\\n"".join(open_file_names)
                  reply = QMessageBox.question(self, ""Zamknij pliki"", msg + ""\n\nCzy chcesz kontynuować?"",
                                               QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
                  if reply == QMessageBox.StandardButton.No:
                       self.statusBar().showMessage(""Zmiana nazwy anulowana."")
                       return # Anuluj operację
                  unsaved_open_files = [p for p in open_files_to_close if self.open_files.get(p) and self.open_files[p].document().isModified()]
                  if unsaved_open_files:
                       save_reply = QMessageBox.question(self, ""Niezapisane zmiany"",
                                                         f""Niektóre z plików ({len(unsaved_open_files)}) mają niezapisane zmiany. Czy chcesz je zapisać przed zamknięciem i zmianą nazwy?"",
                                                         QMessageBox.StandardButton.Save | QMessageBox.StandardButton.Discard | QMessageBox.StandardButton.Cancel)
                       if save_reply == QMessageBox.StandardButton.Cancel:
                            self.statusBar().showMessage(""Zmiana nazwy anulowana (niezapisane zmiany)."")
                            return # Anuluj operację
                       if save_reply == QMessageBox.StandardButton.Save:
                            save_success = True
                            for file_path_to_save in unsaved_open_files:
                                 editor = self.open_files.get(file_path_to_save)
                                 if editor and not self._save_file(editor, file_path_to_save): # _save_file handles Save As if needed
                                      save_success = False
                                      break
                            if not save_success:
                                 self.statusBar().showMessage(""Zmiana nazwy anulowana (błąd zapisu otwartych plików)."")
                                 return # Anuluj operację
                  for file_path_to_close in reversed(open_files_to_close):
                       editor_widget = self.open_files.get(file_path_to_close)
                       if editor_widget:
                            tab_index = self.tab_widget.indexOf(editor_widget)
                            if tab_index != -1:
                                 if hasattr(editor_widget, 'document'):
                                      editor_widget.document().setModified(False)
                                 self.tab_widget.removeTab(tab_index)
                                 del self.open_files[file_path_to_close]
                                 editor_widget.deleteLater()
                  self.recents[""open_files""] = [p for p in self.recents[""open_files""] if p not in open_files_to_close]
                  self._update_recent_files_menu()
                  self._save_app_state() # Zapisz stan po zamknięciu plików
             success = self.project_model.rename(index, new_name)
             if success:
                 self.statusBar().showMessage(f""Zmieniono nazwę na: {new_name}"")
                 if open_files_to_close:
                      parent_index_after_rename = self.project_model.index(parent_dir)
                      if parent_index_after_rename.isValid():
                           self.project_model.refresh(parent_index_after_rename)
                      for old_file_path in open_files_to_close:
                           relative_path = os.path.relpath(old_file_path, old_path)
                           new_file_path = os.path.join(new_path, relative_path)
                           if os.path.exists(new_file_path) and os.path.isfile(new_file_path):
                                self._open_file(new_file_path) # Otworzy plik pod nową ścieżką
             else:
                  QMessageBox.critical(self, ""Błąd zmiany nazwy"", f""Nie można zmienić nazwy '{old_name}' na '{new_name}'.\n""
                                                                   ""Sprawdź, czy element o tej nazwie już nie istnieje lub czy masz uprawnienia."")
                  self.statusBar().showMessage(""Błąd zmiany nazwy."")
    def _delete_item(self, index):
        """"""Usuwa plik lub folder.""""""
        if not index.isValid(): return
        file_path = self.project_model.filePath(index)
        item_name = os.path.basename(file_path)
        is_dir = self.project_model.fileInfo(index).isDir()
        if file_path == self.project_model.rootPath() or file_path == self.project_model.filePath(self.project_model.index("""")):
             QMessageBox.warning(self, ""Błąd usuwania"", ""Nie można usunąć katalogu głównego."")
             self.statusBar().showMessage(""Nie można usunąć katalogu głównego."")
             return
        open_files_to_close = []
        if is_dir:
             normalized_folder_path = os.path.normpath(file_path) + os.sep
             for open_file_path in self.open_files.keys():
                  if os.path.normpath(open_file_path).startswith(normalized_folder_path):
                       open_files_to_close.append(open_file_path)
        elif file_path in self.open_files:
             open_files_to_close.append(file_path)
        if open_files_to_close:
             open_file_names = [os.path.basename(p) for p in open_files_to_close]
             msg = f""Nie można usunąć {{'folderu' if is_dir else 'pliku'}} '{item_name}', ponieważ zawiera on otwarte pliki, które muszą zostać zamknięte:\\n"" + ""\\n"".join(open_file_names)
             QMessageBox.warning(self, ""Element jest używany"", msg)
             reply_close = QMessageBox.question(self, ""Zamknij pliki"",
                                                f""Czy chcesz zamknąć te pliki, aby kontynuować usuwanie '{item_name}'?"",
                                                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
             if reply_close == QMessageBox.StandardButton.No:
                  self.statusBar().showMessage(f""Usuwanie '{item_name}' anulowane."")
                  return # Anuluj operację
             unsaved_open_files = [p for p in open_files_to_close if self.open_files.get(p) and self.open_files[p].document().isModified()]
             if unsaved_open_files:
                  save_reply = QMessageBox.question(self, ""Niezapisane zmiany"",
                                                    f""Niektóre z plików ({len(unsaved_open_files)}) mają niezapisane zmiany. Czy chcesz je zapisać przed zamknięciem i usunięciem?"",
                                                    QMessageBox.StandardButton.Save | QMessageBox.StandardButton.Discard | QMessageBox.StandardButton.Cancel)
                  if save_reply == QMessageBox.StandardButton.Cancel:
                       self.statusBar().showMessage(""Usuwanie anulowane (niezapisane zmiany)."")
                       return # Anuluj operację
                  if save_reply == QMessageBox.StandardButton.Save:
                       save_success = True
                       for file_path_to_save in unsaved_open_files:
                            editor = self.open_files.get(file_path_to_save)
                            if editor and not self._save_file(editor, file_path_to_save): # _save_file handles Save As if needed
                                 save_success = False
                                 break
                       if not save_success:
                            self.statusBar().showMessage(""Usuwanie anulowane (błąd zapisu otwartych plików)."")
                            return # Anuluj operację
             for file_path_to_close in reversed(open_files_to_close):
                  editor_widget = self.open_files.get(file_path_to_close)
                  if editor_widget:
                       tab_index = self.tab_widget.indexOf(editor_widget)
                       if tab_index != -1:
                            if hasattr(editor_widget, 'document'):
                                editor_widget.document().setModified(False)
                            self.tab_widget.removeTab(tab_index)
                            del self.open_files[file_path_to_close]
                            editor_widget.deleteLater()
             self.recents[""open_files""] = [p for p in self.recents[""open_files""] if p not in open_files_to_close]
             self._update_recent_files_menu()
             self._save_app_state() # Zapisz stan po zamknięciu plików
        item_type = ""folder"" if is_dir else ""plik""
        reply = QMessageBox.question(self, f""Usuń {item_type}"",
                                     f""Czy na pewno chcesz usunąć {item_type} '{item_name}'?\\n""
                                     ""Ta operacja jest nieodwracalna!"", # Dodaj ostrzeżenie
                                     QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
        if reply == QMessageBox.StandardButton.Yes:
            success = self.project_model.remove(index)
            if success:
                self.statusBar().showMessage(f""Usunięto {item_type}: {item_name}"")
            else:
                 QMessageBox.critical(self, f""Błąd usuwania {item_type}"", f""Nie można usunąć {item_type} '{item_name}'.\\n""
                                                                            ""Sprawdź, czy masz uprawnienia lub czy element nie jest używany przez inny program."")
                 self.statusBar().showMessage(f""Błąd usuwania {item_type}."")
    def _duplicate_file(self, index):
         """"""Duplikuje plik.""""""
         if not index.isValid(): return
         file_path = self.project_model.filePath(index)
         file_info = self.project_model.fileInfo(index)
         if not file_info.isFile():
              self.statusBar().showMessage(""Można duplikować tylko pliki."")
              return
         parent_dir = os.path.dirname(file_path)
         old_name = os.path.basename(file_path)
         name, ext = os.path.splitext(old_name)
         suggested_name = f""{name}_kopia{ext}""
         counter = 1
         while os.path.exists(os.path.join(parent_dir, suggested_name)):
              counter += 1
              suggested_name = f""{name}_kopia{counter}{ext}""
         new_name, ok = QInputDialog.getText(self, ""Duplikuj plik"", f""Podaj nazwę dla kopii '{old_name}':"",
                                            QLineEdit.EchoMode.Normal, suggested_name)
         if ok and new_name:
             new_name = new_name.strip()
             if not new_name or re.search(r'[<>:""/\\|?*\x00-\x1F]', new_name) is not None:
                 QMessageBox.warning(self, ""Nieprawidłowa nazwa"", ""Podana nazwa jest pusta lub zawiera niedozwolone znaki."")
                 self.statusBar().showMessage(""Duplikowanie anulowane (nieprawidłowa nazwa)."")
                 return
             new_path = os.path.join(parent_dir, new_name)
             if os.path.exists(new_path):
                  QMessageBox.warning(self, ""Element już istnieje"", f""Element o nazwie '{new_name}' już istnieje."")
                  self.statusBar().showMessage(""Duplikowanie anulowane (element już istnieje)."")
                  return
             try:
                 os.makedirs(os.path.dirname(new_path), exist_ok=True)
                 shutil.copy2(file_path, new_path) # copy2 zachowuje metadane
                 self.statusBar().showMessage(f""Utworzono kopię: {new_name}"")
                 parent_index = self.project_model.index(parent_dir)
                 if parent_index.isValid():
                      self.project_model.refresh(parent_index)
                 else:
                      root_path = self.project_model.rootPath()
                      if root_path and os.path.isdir(root_path):
                           self.project_model.refresh(self.project_model.index(root_path))
             except OSError as e:
                  QMessageBox.critical(self, ""Błąd duplikowania"", f""Nie można zduplikować pliku '{old_name}':\n{e}"")
                  self.statusBar().showMessage(""Błąd duplikowania pliku."")
             except Exception as e:
                 QMessageBox.critical(self, ""Nieoczekiwany błąd"", f""Wystąpił nieoczekiwany błąd:\n{e}"")
                 self.statusBar().showMessage(""Nieoczekiwany błąd."")
    def _close_tab_by_index(self, index):
        """"""Zamyka zakładkę o podanym indeksie, pytając o zapisanie zmian.""""""
        if index == -1: # Brak otwartych zakładek
            return
        widget = self.tab_widget.widget(index)
        if widget is None: # Zabezpieczenie
            return
        file_path_before_save = None
        for path, editor_widget in list(self.open_files.items()):
            if editor_widget is widget:
                file_path_before_save = path
                break
        if hasattr(widget, 'document') and widget.document().isModified():
            msg_box = QMessageBox(self)
            msg_box.setIcon(QMessageBox.Icon.Warning)
            msg_box.setWindowTitle(""Niezapisane zmiany"")
            tab_text = self.tab_widget.tabText(index).rstrip('*')
            display_name = os.path.basename(file_path_before_save) if file_path_before_save else tab_text
            msg_box.setText(f""Plik '{display_name}' ma niezapisane zmiany.\nCzy chcesz zapisać przed zamknięciem?"")
            msg_box.setStandardButtons(QMessageBox.StandardButton.Save | QMessageBox.StandardButton.Discard | QMessageBox.StandardButton.Cancel)
            msg_box.setDefaultButton(QMessageBox.StandardButton.Save)
            reply = msg_box.exec()
            if reply == QMessageBox.StandardButton.Save:
                needs_save_as = (file_path_before_save is None or
                                 not os.path.exists(file_path_before_save) or
                                 not QFileInfo(file_path_before_save).isFile())
                if needs_save_as:
                    original_index = self.tab_widget.currentIndex()
                    self.tab_widget.setCurrentIndex(index)
                    save_success = self._save_current_file_as() # This handles saving and updating open_files/recents for the NEW path
                    if original_index != -1 and original_index < self.tab_widget.count():
                         self.tab_widget.setCurrentIndex(original_index)
                    else: # If the original tab was closed during Save As (e.g. saving an existing file to itself)
                         pass # Keep the new tab active
                    if not save_success:
                         self.statusBar().showMessage(f""Zamknięcie anulowane (błąd zapisu '{display_name}')."")
                         return # Anulowano lub błąd zapisu ""jako"", nie zamykaj zakładki
                else: # It's an existing file with a valid path
                     if not self._save_file(widget, file_path_before_save): # Spróbuj zapisać, jeśli się nie uda, nie zamykaj
                         self.statusBar().showMessage(f""Zamknięcie anulowane (błąd zapisu '{display_name}')."")
                         return # Anulowano lub błąd zapisu
            elif reply == QMessageBox.StandardButton.Cancel:
                self.statusBar().showMessage(f""Zamknięcie '{tab_text}' anulowane."")
                return # Anuluj zamknięcie
        if file_path_before_save in self.open_files:
             del self.open_files[file_path_before_save]
             if file_path_before_save in self.recents[""open_files""]:
                 self.recents[""open_files""].remove(file_path_before_save)
                 self._update_recent_files_menu() # Uaktualnij menu
        self.tab_widget.removeTab(index)
        widget.deleteLater() # Usuń widget z pamięci
        if file_path_before_save:
            self.statusBar().showMessage(f""Zamknięto plik: {os.path.basename(file_path_before_save)}"")
        else:
             self.statusBar().showMessage(""Zamknięto plik."")
        self._save_app_state()
    def _close_current_tab(self):
        """"""Zamyka aktualnie aktywną zakładkę.""""""
        current_index = self.tab_widget.currentIndex()
        if current_index != -1:
            self._close_tab_by_index(current_index)
    def _save_current_file(self):
        """"""Zapisuje aktualnie aktywny plik. Jeśli nowy, wywołuje Save As.""""""
        current_widget = self.tab_widget.currentWidget()
        if not isinstance(current_widget, QPlainTextEdit):
            self.statusBar().showMessage(""Brak aktywnego pliku do zapisu."")
            return False
        file_path = None
        for path, editor_widget in list(self.open_files.items()):
            if editor_widget is current_widget:
                file_path = path
                break
        is_existing_valid_file = file_path and os.path.exists(file_path) and QFileInfo(file_path).isFile()
        if is_existing_valid_file:
             return self._save_file(current_widget, file_path)
        else:
             return self._save_current_file_as()
    def _save_current_file_as(self):
        """"""Zapisuje zawartość aktywnego edytora z nową nazwą.""""""
        current_widget = self.tab_widget.currentWidget()
        if not isinstance(current_widget, QPlainTextEdit):
            self.statusBar().showMessage(""Brak aktywnego pliku do zapisu."")
            return False
        old_file_path = None
        for path, editor_widget in list(self.open_files.items()): # Iterate over a copy
            if editor_widget is current_widget:
                old_file_path = path
                break
        suggested_name = ""bez_nazwy.txt""
        current_tab_index = self.tab_widget.indexOf(current_widget)
        if current_tab_index != -1:
             original_tab_text = self.tab_widget.tabText(current_tab_index).rstrip('*')
             if original_tab_text and original_tab_text != ""Nowy plik"":
                  suggested_name = original_tab_text
             elif current_widget.document().toPlainText().strip():
                  first_line = current_widget.document().toPlainText().strip().split('\n')[0].strip()
                  if first_line:
                       suggested_name = re.sub(r'[\\/:*?""<>|]', '_', first_line) # Remove illegal chars
                       suggested_name = suggested_name[:50].strip() # Limit length
                       if not suggested_name:
                           suggested_name = ""bez_nazwy""
                       if '.' not in os.path.basename(suggested_name):
                            suggested_name += "".txt""
                  else:
                       suggested_name = ""bez_nazwy.txt"" # Fallback if content is just whitespace
        start_path = self.current_project_dir if self.current_project_dir else PROJECTS_DIR
        if old_file_path and os.path.dirname(old_file_path):
             start_path = os.path.dirname(old_file_path) # Use directory of old file if available
        elif os.path.isdir(start_path):
             pass # Use project dir if available
        else:
             start_path = os.path.expanduser(""~"")
        file_filters = ""Wszystkie pliki (*);;Pliki Pythona (*.py);;Pliki JavaScript (*.js);;Pliki HTML (*.html);;Pliki CSS (*.css);;Pliki C++ (*.c *.cpp *.h *.hpp);;Pliki INI (*.ini);;Pliki JSON (*.json)""
        new_file_path, _ = QFileDialog.getSaveFileName(self, ""Zapisz plik jako..."", os.path.join(start_path, suggested_name), file_filters)
        if not new_file_path:
            self.statusBar().showMessage(""Zapisywanie anulowane."")
            return False # Cancelled
        new_file_path = os.path.normpath(new_file_path)
        if old_file_path and old_file_path != new_file_path:
             if old_file_path in self.open_files:
                  del self.open_files[old_file_path]
             if old_file_path in self.recents[""open_files""]:
                 self.recents[""open_files""].remove(old_file_path)
                 self._update_recent_files_menu()
        self.open_files[new_file_path] = current_widget
        current_tab_index = self.tab_widget.indexOf(current_widget)
        if current_tab_index != -1:
             self.tab_widget.setTabText(current_tab_index, os.path.basename(new_file_path))
        if new_file_path in self.recents[""open_files""]: # Remove if already exists to move to front
             self.recents[""open_files""].remove(new_file_path)
        self.recents[""open_files""].insert(0, new_file_path)
        self._update_recent_files_menu() # Update the menu
        language = self._get_language_from_path(new_file_path)
        old_highlighter = getattr(current_widget.document(), '_syntax_highlighter', None)
        if old_highlighter:
             old_highlighter.setDocument(None) # Detach
        new_highlighter = CodeSyntaxHighlighter(current_widget.document(), language)
        setattr(current_widget.document(), '_syntax_highlighter', new_highlighter)
        return self._save_file(current_widget, new_file_path)
    def _save_file(self, editor_widget, file_path):
        """"""Zapisuje zawartość wskazanego edytora do wskazanego pliku.""""""
        if not file_path:
             print(""Error: _save_file called with empty path."", file=sys.stderr)
             self.statusBar().showMessage(""Błąd wewnętrzny: próba zapisu bez ścieżki."")
             return False
        try:
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(editor_widget.toPlainText())
            editor_widget.document().setModified(False) # Mark document as unmodified
            self.statusBar().showMessage(f""Plik zapisano pomyślnie: {os.path.basename(file_path)}"")
            tab_index = self.tab_widget.indexOf(editor_widget)
            if tab_index != -1:
                 current_tab_text = self.tab_widget.tabText(tab_index).rstrip('*')
                 self.tab_widget.setTabText(tab_index, current_tab_text)
            file_info = QFileInfo(file_path)
            dir_path = file_info.dir().path()
            root_path = self.project_model.rootPath()
            if root_path and dir_path.startswith(root_path):
                 dir_index = self.project_model.index(dir_path)
                 if dir_index.isValid():
                      self.project_model.refresh(dir_index)
                 file_index = self.project_model.index(file_path)
                 if file_index.isValid():
                      self.project_model.dataChanged.emit(file_index, file_index, [Qt.ItemDataRole.DisplayRole, Qt.ItemDataRole.DecorationRole]) # Trigger a view update
            if file_path in self.recents[""open_files""]:
                 self.recents[""open_files""].remove(file_path)
            self.recents[""open_files""].insert(0, file_path)
            self._update_recent_files_menu()
            self._save_app_state() # Save state after successful save
            return True # Save succeeded
        except Exception as e:
            QMessageBox.critical(self, ""Błąd zapisu pliku"", f""Nie można zapisać pliku {os.path.basename(file_path)}:\n{e}"")
            self.statusBar().showMessage(f""Błąd zapisu pliku: {os.path.basename(file_path)}"")
            return False # Save failed
    def _save_all_files(self):
        """"""Zapisuje wszystkie otwarte i zmodyfikowane pliki.""""""
        unsaved_files = [path for path, editor in self.open_files.items() if editor.document().isModified()]
        if not unsaved_files:
             self.statusBar().showMessage(""Brak zmodyfikowanych plików do zapisu."")
             return True # Nothing to save, counts as success
        self.statusBar().showMessage(f""Zapisywanie wszystkich zmodyfikowanych plików ({len(unsaved_files)})..."")
        total_saved = 0
        total_failed = 0
        files_to_save = list(unsaved_files)
        for file_path in files_to_save:
             editor_widget = self.open_files.get(file_path)
             if editor_widget is None or self.tab_widget.indexOf(editor_widget) == -1:
                  print(f""Warning: Skipping save for {file_path} - editor widget not found or invalid."", file=sys.stderr)
                  continue # Go to the next file
             if not editor_widget.document().isModified():
                  continue # Already saved
             needs_save_as = (file_path is None or
                              not os.path.exists(file_path) or
                              not QFileInfo(file_path).isFile())
             save_success = False
             if needs_save_as:
                  tab_index = self.tab_widget.indexOf(editor_widget)
                  if tab_index != -1:
                       original_index = self.tab_widget.currentIndex()
                       self.tab_widget.setCurrentIndex(tab_index)
                       save_success = self._save_current_file_as()
                       if original_index != -1 and original_index < self.tab_widget.count():
                           self.tab_widget.setCurrentIndex(original_index)
                  else:
                       print(f""Error: Cannot save '{os.path.basename(file_path if file_path else 'Nowy plik')}' (Save As needed) - widget not found in tabs."", file=sys.stderr)
                       total_failed += 1
                       continue # Skip this file, couldn't save it via Save As mechanism
             else:
                  save_success = self._save_file(editor_widget, file_path) # This updates modified state and status bar
             if save_success:
                  total_saved += 1
             else:
                  total_failed += 1
        if total_saved > 0 and total_failed == 0:
             self.statusBar().showMessage(f""Zapisano pomyślnie wszystkie {total_saved} pliki."")
             return True
        elif total_saved > 0 and total_failed > 0:
             self.statusBar().showMessage(f""Zapisano {total_saved} plików, {total_failed} plików nie udało się zapisać."")
             QMessageBox.warning(self, ""Błąd zapisu wszystkich plików"", f""Nie udało się zapisać {total_failed} plików. Sprawdź konsolę lub logi błędów."")
             return False
        elif total_saved == 0 and total_failed > 0:
             self.statusBar().showMessage(f""Nie udało się zapisać żadnego z {total_failed} plików."")
             QMessageBox.critical(self, ""Błąd zapisu wszystkich plików"", f""Nie udało się zapisać żadnego z plików. Sprawdź konsolę lub logi błędów."")
             return False
        else: # total_saved == 0 and total_failed == 0 (already handled by initial check, but good fallback)
             self.statusBar().showMessage(""Brak zmodyfikowanych plików do zapisu."")
             return True
    def _handle_modification_changed(self, modified):
        """"""Obsługa zmiany stanu modyfikacji dokumentu w aktywnym edytorze.""""""
        editor_document = self.sender() # Dokument, który wywołał sygnał
        if not isinstance(editor_document, QTextDocument): return
        editor = None
        for editor_widget in self.open_files.values():
             if editor_widget.document() is editor_document:
                  editor = editor_widget
                  break
        if editor is None:
             return
        index = self.tab_widget.indexOf(editor)
        if index != -1:
            tab_text = self.tab_widget.tabText(index)
            if modified and not tab_text.endswith('*'):
                self.tab_widget.setTabText(index, tab_text + '*')
            elif not modified and tab_text.endswith('*'):
                self.tab_widget.setTabText(index, tab_text.rstrip('*'))
    def _handle_tab_change(self, index):
         """"""Obsługa zmiany aktywnej zakładki.""""""
         self._hide_find_bar()
         if index != -1:
             widget = self.tab_widget.widget(index)
             if isinstance(widget, QPlainTextEdit):
                  file_path = next((path for path, ed in self.open_files.items() if ed is widget), None)
                  if file_path:
                       self.statusBar().showMessage(f""Edytujesz: {os.path.basename(file_path)}"")
                  else:
                       self.statusBar().showMessage(""Edytujesz: Nowy plik"")
         else:
             self.statusBar().showMessage(""Gotowy."") # Reset status bar
    def _find_next(self):
         """"""Znajduje kolejne wystąpienie tekstu z pola wyszukiwania.""""""
         text_to_find = self.search_input.text()
         self._find_text(text_to_find, 'next')
    def _find_previous(self):
         """"""Znajduje poprzednie wystąpienie tekstu z pola wyszukiwania.""""""
         text_to_find = self.search_input.text()
         self._find_text(text_to_find, 'previous')
    def _find_text(self, text, direction='next'):
        """"""Szuka tekstu w aktualnym edytorze.""""""
        editor = self.tab_widget.currentWidget()
        if not isinstance(editor, QPlainTextEdit):
            self.statusBar().showMessage(""Brak aktywnego edytora do wyszukiwania."")
            return
        if not text:
             self.statusBar().showMessage(""Wpisz tekst do wyszukania."")
             return
        flags = QTextDocument.FindFlag(0) # Default: case-sensitive in Qt find
        if direction == 'previous':
             flags |= QTextDocument.FindFlag.FindBackward
        found = editor.find(text, flags)
        if found:
            self.statusBar().showMessage(f""Znaleziono '{text}'."")
        else:
            self.statusBar().showMessage(f""Nie znaleziono '{text}'. Zawijanie..."")
            cursor = editor.textCursor()
            original_position = cursor.position() # Remember position before wrapping search
            cursor.clearSelection() # Clear selection before moving cursor position programmatically
            cursor.movePosition(cursor.MoveOperation.Start if direction == 'next' else cursor.MoveOperation.End)
            editor.setTextCursor(cursor)
            found_wrapped = editor.find(text, flags)
            if found_wrapped:
                self.statusBar().showMessage(f""Znaleziono '{text}' po zawinięciu."")
            else:
                 self.statusBar().showMessage(f""Nie znaleziono '{text}' w całym pliku."")
                 cursor.clearSelection()
                 cursor.setPosition(original_position)
                 editor.setTextCursor(cursor)
    def _show_find_bar(self):
        """"""Pokazuje pasek wyszukiwania.""""""
        if self.search_input.isVisible():
             self._hide_find_bar()
             return
        self.search_input.setVisible(True)
        self.find_next_button.setVisible(True)
        self.find_prev_button.setVisible(True)
        self.search_input.setFocus() # Ustaw kursor w polu wyszukiwania
    def _hide_find_bar(self):
        """"""Ukrywa pasek wyszukiwania.""""""
        if self.search_input.isVisible(): # Check if visible before hiding
            self.search_input.setVisible(False)
            self.find_next_button.setVisible(False)
            self.find_prev_button.setVisible(False)
            self.search_input.clear() # Wyczyść pole wyszukiwania
    def _show_settings_dialog(self):
        """"""Wyświetla okno dialogowe ustawień.""""""
        temp_settings = self.settings.copy()
        dialog = SettingsDialog(temp_settings, self) # Pass the copy
        font_size_label = QLabel(""Rozmiar czcionki edytora:"")
        font_size_spinbox = QSpinBox()
        font_size_spinbox.setRange(6, 72) # Typical font sizes
        font_size_spinbox.setValue(temp_settings.get(""editor_font_size"", 10))
        dialog_layout = dialog.layout()
        button_box_row_index = dialog_layout.rowCount() - 1
        dialog_layout.insertRow(button_box_row_index, font_size_label, font_size_spinbox)
        setattr(dialog, 'editor_font_size_spinbox', font_size_spinbox)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            updated_settings = dialog.get_settings()
            updated_settings[""editor_font_size""] = font_size_spinbox.value()
            self.settings = updated_settings
            self._apply_theme(self.settings.get(""theme"", ""light"")) # Apply theme
            self._apply_editor_font_size() # Apply new font size
            self._apply_view_settings() # Apply view settings (tree/console visibility)
            self._save_app_state() # Save updated settings and state
            self.statusBar().showMessage(""Ustawienia zapisane."")
        else:
            self.statusBar().showMessage(""Zmiany w ustawieniach anulowane."")
    def _show_about_dialog(self):
        """"""Wyświetla okno informacyjne 'O programie'.""""""
        QMessageBox.about(self, ""O programie"",
                          ""<h2>Proste IDE</h2>""
                          ""<p>Prosty edytor kodu napisany w Pythonie z użyciem biblioteki PyQt6.</p>""
                          ""<p>Wersja: 1.0</p>""
                          ""<p>Autor: [Twoje imię lub nazwa]</p>""
                          ""<p>Dostępne funkcje:</p>""
                          ""<ul>""
                          ""<li>Przeglądanie plików i folderów</li>""
                          ""<li>Otwieranie i edycja plików tekstowych/kodów</li>""
                          ""<li>Kolorowanie składni (Python, JavaScript, HTML, CSS, C++, INI, JSON)</li>""
                          ""<li>Uruchamianie plików Python/JavaScript (z konfigurowalnymi ścieżkami)</li>""
                          ""<li>Uruchamianie skryptów npm (po otwarciu folderu z package.json)</li>""
                          ""<li>**Wprowadzanie poleceń w konsoli**</li>"" # Dodano
                          ""<li>Zapisywanie plików (Zapisz, Zapisz jako, Zapisz wszystko)</li>""
                          ""<li>Historia ostatnio otwieranych plików/folderów</li>""
                          ""<li>Proste wyszukiwanie tekstu</li>""
                          ""<li>Podstawowe motywy (Jasny/Ciemny)</li>""
                          ""<li>Ukrywanie/pokazywanie paneli (Drzewko, Konsola)</li>""
                          ""<li>Zmiana rozmiaru czcionki edytora</li>""
                          ""<li>Operacje na plikach/folderach (Nowy, Zmień nazwę, Usuń, Duplikuj)</li>""
                          ""</ul>""
                          ""<p>Użyte technologie: PyQt6, Python, opcjonalnie qtawesome.</p>"")
    def _update_run_button_menu(self):
        """"""Uaktualnia menu przypisane do QToolButton 'Uruchom'.""""""
        menu = QMenu(self)
        menu.addAction(self.action_run_file)
        if self.node_scripts:
             menu.addSeparator()
             menu.addSection(""Skrypty npm:"")
             sorted_scripts = sorted(self.node_scripts.keys())
             for script_name in sorted_scripts:
                action = QAction(script_name, self)
                action.triggered.connect(lambda checked, name=script_name: self._run_npm_script(name))
                menu.addAction(action)
        else:
             no_scripts_action = QAction(""Brak skryptów npm (package.json)"", self)
             no_scripts_action.setEnabled(False) # Wyłącz akcję
             menu.addAction(no_scripts_action)
        self.run_toolbutton.setMenu(menu)
    def _run_current_file(self):
        """"""Uruchamia aktualnie otwarty plik.""""""
        current_widget = self.tab_widget.currentWidget()
        if not isinstance(current_widget, QPlainTextEdit):
            self._append_console_output(""Brak aktywnego pliku do uruchomienia."", is_error=True)
            return
        file_path = next((path for path, editor_widget in self.open_files.items() if editor_widget is current_widget), None)
        if not file_path or not os.path.exists(file_path) or not os.path.isfile(file_path):
             self._append_console_output(""Ścieżka aktywnego pliku jest nieprawidłowa lub plik nie istnieje."", is_error=True)
             return
        if current_widget.document().isModified():
             self._append_console_output(""Zapisywanie pliku przed uruchomieniem..."")
             if not self._save_file(current_widget, file_path):
                 self._append_console_output(""Zapisywanie nie powiodło się. Anulowano uruchomienie."", is_error=True)
                 return
        language = self._get_language_from_path(file_path)
        command = []
        working_dir = os.path.dirname(file_path) # Directory of the file
        python_path = self.settings.get(""python_path"")
        node_path = self.settings.get(""node_path"")
        if language == 'python':
            interpreter = python_path if python_path and os.path.exists(python_path) else ""python""
            command = [interpreter, ""-u"", file_path]
        elif language == 'javascript':
            interpreter = node_path if node_path and os.path.exists(node_path) else ""node""
            command = [interpreter, file_path]
        elif language in ['html', 'css']:
             self._append_console_output(f""Otwieranie pliku {os.path.basename(file_path)} w domyślnej przeglądarce..."")
             try:
                  QDesktopServices.openUrl(QUrl.fromLocalFile(file_path))
                  self.statusBar().showMessage(f""Otwarto plik w przeglądarce: {os.path.basename(file_path)}"")
             except Exception as e:
                  self._append_console_output(f""Błąd podczas otwierania pliku w przeglądarce: {e}"", is_error=True)
                  self.statusBar().showMessage(""Błąd otwierania w przeglądarce."")
             return # Do not run as a process
        else:
            self._append_console_output(f""Nieznany typ pliku do uruchomienia: {language}"", is_error=True)
            return
        if command:
             self._run_command(command, working_dir)
    def _check_package_json(self, folder_path):
        """"""Checks if package.json exists in the folder and parses scripts.""""""
        if not folder_path or not os.path.isdir(folder_path):
             self.node_scripts = {} # Clear any previous scripts
             self._update_run_button_menu() # Update run menu button
             return
        package_json_path = os.path.join(folder_path, 'package.json')
        self.node_scripts = {} # Clear previous scripts
        if os.path.exists(package_json_path):
            try:
                with open(package_json_path, 'r', encoding='utf-8') as f:
                    package_data = json.load(f)
                scripts = package_data.get('scripts', {})
                if isinstance(scripts, dict) and scripts:
                    self.node_scripts = scripts
                    self._append_console_output(f""Znaleziono {len(scripts)} skryptów w package.json w {os.path.basename(folder_path)}."")
                else:
                     self._append_console_output(f""Znaleziono package.json w {os.path.basename(folder_path)}, ale brak skryptów w sekcji 'scripts'."")
            except (FileNotFoundError, json.JSONDecodeError, Exception) as e:
                self._append_console_output(f""Błąd podczas parsowania package.json w {os.path.basename(folder_path)}:\n{e}"", is_error=True)
                self.node_scripts = {} # Ensure scripts are empty on error
        else:
             pass # Silence is golden
        self._update_run_button_menu() # After checking package.json, update the run menu button
    def _run_npm_script(self, script_name):
        """"""Runs the specified npm script.""""""
        if not self.current_project_dir or not os.path.isdir(self.current_project_dir):
            self._append_console_output(""Brak otwartego folderu projektu do uruchomienia skryptu npm."", is_error=True)
            return
        if script_name not in self.node_scripts:
            self._append_console_output(f""Skrypt '{script_name}' nie znaleziono w package.json otwartego projektu."", is_error=True)
            return
        node_path = self.settings.get(""node_path"")
        npm_command = ""npm"" # Default command
        if node_path and os.path.exists(node_path):
             node_dir = os.path.dirname(node_path)
             npm_candidates = [os.path.join(node_dir, 'npm')]
             if platform.system() == ""Windows"":
                  npm_candidates.append(os.path.join(node_dir, 'npm.cmd'))
             found_npm = None
             for candidate in npm_candidates:
                  if os.path.isfile(candidate) and os.access(candidate, os.X_OK):
                       found_npm = candidate
                       break
             if found_npm:
                  npm_command = found_npm
             else:
                  self._append_console_output(f""Ostrzeżenie: Nie znaleziono 'npm' (lub nie jest wykonywalne) obok skonfigurowanej ścieżki node '{node_path}'. Polegam na systemowym PATH."", is_error=True)
        command = [npm_command, ""run"", script_name]
        working_dir = self.current_project_dir # Npm scripts are run in the project directory
        self._run_command(command, working_dir)
    def _run_console_command(self):
        """"""Uruchamia komendę wpisaną w polu tekstowym konsoli.""""""
        command_text = self.console_input.text().strip()
        if not command_text:
            return # Nic nie wpisano
        self.console_input.clear() # Wyczyść pole wprowadzania
        self._append_console_output(f""> {command_text}"") # Wyświetl wpisaną komendę w konsoli
        try:
            command = shlex.split(command_text)
        except ValueError as e:
             self._append_console_output(f""Błąd parsowania komendy: {e}"", is_error=True)
             self.statusBar().showMessage(""Błąd parsowania komendy."")
             return
        if not command:
             self._append_console_output(""Błąd: Pusta komenda po parsowaniu."", is_error=True)
             self.statusBar().showMessage(""Błąd: Pusta komenda."")
             return
        working_dir = self.current_project_dir if self.current_project_dir and os.path.isdir(self.current_project_dir) else os.getcwd()
        self._run_command(command, working_dir)
    def _run_command(self, command, working_dir):
        """"""Uruchamia podaną komendę w QProcess.""""""
        if self.process.state() != QProcess.ProcessState.NotRunning:
            self._append_console_output(""Inny proces jest już uruchomiony. Zakończ go, aby uruchomić nowy."", is_error=True)
            self._append_console_output(""Możesz zatrzymać proces używając przycisku stop lub wpisując polecenie 'stop' w konsoli (jeśli obsługiwane przez program)."")
            return
        command_str = shlex.join(command) # Better command formatting
        self._append_console_output(f""Uruchamianie: {command_str}\nw katalogu: {working_dir}\n---"")
        self.statusBar().showMessage(""Proces uruchomiony..."")
        try:
            if not command:
                 self._append_console_output(""Komenda do uruchomienia jest pusta."", is_error=True)
                 self.statusBar().showMessage(""Błąd: Pusta komenda."")
                 return
            program = command[0]
            arguments = command[1:]
            self.process.setWorkingDirectory(working_dir)
            process_environment = QProcessEnvironment.systemEnvironment()
            current_path = process_environment.value(""PATH"", """") # Get system PATH
            paths_to_prepend = []
            py_path = self.settings.get(""python_path"")
            if py_path and os.path.exists(py_path):
                 py_dir = os.path.dirname(py_path)
                 current_path_dirs = [os.path.normcase(p) for p in current_path.split(os.pathsep) if p]
                 if os.path.normcase(py_dir) not in current_path_dirs:
                      paths_to_prepend.append(py_dir)
            node_path = self.settings.get(""node_path"")
            if node_path and os.path.exists(node_path):
                 node_dir = os.path.dirname(node_path)
                 if os.path.normcase(node_dir) not in current_path_dirs:
                     paths_to_prepend.append(node_dir)
            if paths_to_prepend:
                 new_path = os.pathsep.join(paths_to_prepend) + (os.pathsep + current_path if current_path else """")
            else:
                 new_path = current_path # No new paths to add
            process_environment.insert(""PATH"", new_path) # Overwrite or add PATH
            if platform.system() == ""Windows"" and process_environment.value(""Path"") is not None:
                 if process_environment.value(""Path"") != current_path: # Avoid unnecessary update
                      process_environment.insert(""Path"", new_path)
            self.process.setProcessEnvironment(process_environment)
            self.process.start(program, arguments)
            if not self.process.waitForStarted(1000):
                 error_string = self.process.errorString()
                 self._append_console_output(f""Nie udało się uruchomić procesu '{program}': {error_string}"", is_error=True)
                 self.statusBar().showMessage(f""Błąd uruchamiania: {program}"")
                 return # Process didn't start, exit
        except Exception as e:
            self._append_console_output(f""Wystąpił nieoczekiwany błąd podczas próby uruchomienia:\n{e}"", is_error=True)
            self.statusBar().showMessage(""Błąd podczas uruchamiania."")
    def _append_console_output(self, text, is_error=False):
        """"""Adds text to the console, optionally formatting as an error.""""""
        cursor = self.console.textCursor()
        cursor.movePosition(cursor.MoveOperation.End)
        original_fmt = cursor.charFormat()
        fmt = QTextCharFormat()
        if is_error:
            fmt.setForeground(QColor(""#DC143C"")) # Crimson
        cursor.setCharFormat(fmt)
        text_to_insert = text
        if text and not text.endswith('\n'):
             text_to_insert += '\n'
        cursor.insertText(text_to_insert)
        cursor.setCharFormat(original_fmt)
        self.console.ensureCursorVisible()
    def _handle_stdout(self):
        """"""Reads standard output of the process and displays it in the console.""""""
        while self.process.bytesAvailable(): # Correct usage
            data = self.process.readAllStandardOutput()
            try:
                 text = bytes(data).decode('utf-8')
            except UnicodeDecodeError:
                 try:
                     text = bytes(data).decode('latin-1')
                 except Exception:
                     text = bytes(data).decode('utf-8', errors='replace') # Replace unknown characters
            self._append_console_output(text)
    def _handle_stderr(self):
        """"""Reads standard error of the process and displays it in the console (in red).""""""
        while self.process.bytesAvailable(): # Correct usage
            data = self.process.readAllStandardError()
            try:
                 text = bytes(data).decode('utf-8')
            except UnicodeDecodeError:
                 try:
                     text = bytes(data).decode('latin-1')
                 except Exception:
                     text = bytes(data).decode('utf-8', errors='replace') # Replace unknown characters
            self._append_console_output(text, is_error=True)
    def _handle_process_finished(self, exitCode, exitStatus):
        """"""Handles the process finishing.""""""
        self._handle_stdout()
        self._handle_stderr()
        self._append_console_output(""\n--- Zakończono proces ---"") # Add a clear separator
        if exitStatus == QProcess.ExitStatus.NormalExit:
            self._append_console_output(f""Proces zakończył się z kodem wyjścia: {exitCode}"")
            self.statusBar().showMessage(f""Proces zakończył się. Kod wyjścia: {exitCode}"")
        else:
            self._append_console_output(f""Proces zakończył się awaryjnie z kodem wyjścia: {exitCode}"", is_error=True)
            self.statusBar().showMessage(f""Proces zakończył się awaryjnie. Kod wyjścia: {exitCode}"")
        if self.settings.get(""show_console"", True):
             self._show_console_panel() # Ensure console is visible and correctly sized
    def _copy_console(self):
         """"""Copies the entire content of the console to the clipboard.""""""
         clipboard = QApplication.clipboard()
         clipboard.setText(self.console.toPlainText())
         self.statusBar().showMessage(""Zawartość konsoli skopiowana do schowka."")
    def _toggle_tree_view(self, checked):
         """"""Shows/hides the file tree panel.""""""
         self.main_splitter.widget(0).setVisible(checked)
         self.settings[""show_tree""] = checked # Save state
         self._save_app_state() # Save settings change
         self._apply_view_settings() # Re-apply sizes to ensure panels aren't too small/large
    def _toggle_console(self, checked):
         """"""Shows/hides the console panel.""""""
         self.right_splitter.widget(1).setVisible(checked)
         self.settings[""show_console""] = checked # Save state
         self._save_app_state() # Save settings change
         if checked:
              self._show_console_panel() # Use method that sets sizes
    def _show_console_panel(self):
        """"""Ensures the console panel is visible and has a reasonable size.""""""
        self.right_splitter.widget(1).setVisible(True)
        self.action_toggle_console.setChecked(True)
        sizes = self.right_splitter.sizes()
        if len(sizes) == 2:
            total_height = sum(sizes)
            min_console_height = 100
            min_editor_height = 100
            if sizes[1] < min_console_height or (sizes[1] < 10 and self.settings.get(""show_console"", True)):
                 if total_height > min_console_height + min_editor_height:
                      self.right_splitter.setSizes([total_height - min_console_height, min_console_height])
                 elif total_height > 200: # Ensure some minimal height if window is small
                      self.right_splitter.setSizes([total_height // 2, total_height // 2]) # Split equally
    def _apply_view_settings(self):
        """"""Apply panel visibility settings after loading.""""""
        show_tree = self.settings.get(""show_tree"", True)
        show_console = self.settings.get(""show_console"", True)
        self.main_splitter.widget(0).setVisible(show_tree)
        self.action_toggle_tree.setChecked(show_tree)
        self.right_splitter.widget(1).setVisible(show_console)
        self.action_toggle_console.setChecked(show_console)
        main_sizes = self.main_splitter.sizes()
        if len(main_sizes) == 2:
             total_width = sum(main_sizes)
             min_tree_width = 150 # Minimal reasonable width for the tree view
             min_right_panel_width = 200 # Minimal width for the editor/console side
             if main_sizes[0] < min_tree_width or (main_sizes[0] < 10 and show_tree):
                  if total_width > min_tree_width + min_right_panel_width:
                       self.main_splitter.setSizes([min_tree_width, total_width - min_tree_width])
                  elif total_width > 300: # Ensure some minimal width if window is small
                       self.main_splitter.setSizes([total_width // 3, 2 * total_width // 3]) # Split approx 1/3, 2/3
        right_sizes = self.right_splitter.sizes()
        if len(right_sizes) == 2:
             total_height = sum(right_sizes)
             min_console_height = 100
             min_editor_height = 100 # Minimal height for the editor area
             if right_sizes[1] < min_console_height or (right_sizes[1] < 10 and show_console):
                   if total_height > min_console_height + min_editor_height:
                       self.right_splitter.setSizes([total_height - min_console_height, min_console_height])
                   elif total_height > 200: # Ensure some minimal height if window is small
                       self.right_splitter.setSizes([total_height // 2, total_height // 2]) # Split equally
             elif right_sizes[0] < min_editor_height and show_console and total_height > min_console_height + min_editor_height:
                   self.right_splitter.setSizes([min_editor_height, total_height - min_editor_height])
    def _apply_editor_font_size(self):
        """"""Apply the editor font size to all open editors and the console.""""""
        font_size = self.settings.get(""editor_font_size"", 10)
        new_font = QFont(""Courier New"", font_size) # Use Courier New, change size
        self.base_editor_font = new_font # Update the base font
        self.console.setFont(new_font)
        self.console_input.setFont(new_font)
        for editor_widget in self.open_files.values():
            editor_widget.setFont(new_font)
            if hasattr(editor_widget.document(), '_syntax_highlighter'):
                 editor_widget.document().rehighlight()
    def _apply_theme(self, theme_name):
        """"""Applies the selected color theme.""""""
        if theme_name == ""dark"":
            self.setStyleSheet(""""""
                QMainWindow, QWidget {
                    background-color: #2E2E2E;
                    color: #D3D3D3;
                }
                QMenuBar {
                    background-color: #3C3C3C;
                    color: #D3D3D3;
                }
                QMenuBar::item:selected {
                    background-color: #505050;
                }
                QMenu {
                    background-color: #3C3C3C;
                    color: #D3D3D3;
                    border: 1px solid #505050;
                }
                QMenu::item:selected {
                    background-color: #505050;
                }
                QToolBar {
                    background-color: #3C3C3C;
                    color: #D3D3D3;
                    spacing: 5px;
                    padding: 2px;
                }
                QToolButton { /* Buttons on toolbar */
                    background-color: transparent;
                    border: 1px solid transparent;
                    padding: 3px;
                    border-radius: 4px; /* Slight rounding */
                }
                QToolButton:hover {
                    border: 1px solid #505050;
                    background-color: #454545;
                }
                 QToolButton:pressed {
                     background-color: #404040;
                 }
                QPushButton { /* Standard buttons (e.g., Run, Find) */
                    background-color: #505050;
                    color: #D3D3D3;
                    border: 1px solid #606060;
                    padding: 4px 8px;
                    border-radius: 4px;
                }
                QPushButton:hover {
                    background-color: #606060;
                }
                QPushButton:pressed {
                    background-color: #404040;
                }
                QStatusBar {
                    background-color: #3C3C3C;
                    color: #D3D3D3;
                }
                QSplitter::handle {
                    background-color: #505050;
                }
                QSplitter::handle:horizontal {
                    width: 5px;
                }
                QSplitter::handle:vertical {
                    height: 5px;
                }
                QTreeView {
                    background-color: #1E1E1E;
                    color: #D3D3D3;
                    border: 1px solid #3C3C3C;
                    alternate-background-color: #252525; /* Alternating row colors */
                }
                QTreeView::item:selected {
                    background-color: #007acc; /* Selection color (VS Code blue) */
                    color: white;
                }
                QTreeView::branch:selected {
                     background-color: #007acc; /* Selection color for branch indicator */
                }
                QTabWidget::pane { /* Frame around tab content area */
                    border: 1px solid #3C3C3C;
                    background-color: #1E1E1E;
                }
                QTabWidget::tab-bar:top {
                    left: 5px; /* Leave some space on the left */
                }
                QTabBar::tab {
                    background: #3C3C3C;
                    color: #D3D3D3;
                    border: 1px solid #3C3C3C;
                    border-bottom-color: #1E1E1E; /* Blend bottom border with pane background */
                    border-top-left-radius: 4px;
                    border-top-right-radius: 4px;
                    padding: 4px 8px;
                    margin-right: 1px;
                }
                QTabBar::tab:selected {
                    background: #1E1E1E; /* Match pane background for selected tab */
                    border-bottom-color: #1E1E1E;
                }
                QTabBar::tab:hover {
                    background: #454545; /* Hover effect */
                }
                /* Optional: Style for close button */
                /* QTabBar::close-button { image: url(:/path/to/close_icon_dark.png); } */
                QPlainTextEdit { /* Code Editor */
                    background-color: #1E1E1E;
                    color: #D3D3D3;
                    border: none; /* Border is on QTabWidget::pane */
                    selection-background-color: #007acc; /* Selection color */
                    selection-color: white;
                }
                 QPlainTextEdit[readOnly=""true""] { /* Console */
                     background-color: #1E1E1E; /* Same as editor background */
                     color: #CCCCCC; /* Console text color */
                      selection-background-color: #007acc;
                      selection-color: white;
                 }
                QLineEdit { /* Search bar, input fields in settings */
                    background-color: #3C3C3C;
                    color: #D3D3D3;
                    border: 1px solid #505050;
                    padding: 2px;
                     selection-background-color: #007acc;
                     selection-color: white;
                     border-radius: 3px; /* Slight rounding */
                }
                 QComboBox { /* ComboBox in settings */
                    background-color: #3C3C3C;
                    color: #D3D3D3;
                    border: 1px solid #505050;
                    padding: 2px;
                     border-radius: 3px;
                 }
                 QComboBox::drop-down {
                    border: 0px; /* Remove default arrow */
                 }
                  QComboBox QAbstractItemView { /* Dropdown list of ComboBox */
                     background-color: #3C3C3C;
                     color: #D3D3D3;
                     selection-background-color: #007acc;
                     border: 1px solid #505050;
                 }
                 QDialog { /* Settings dialog window */
                     background-color: #2E2E2E;
                     color: #D3D3D3;
                 }
                  QLabel { /* Labels in dialogs */
                      color: #D3D3D3;
                  }
                  QDialogButtonBox QPushButton { /* Buttons in dialogs */
                      background-color: #505050;
                      color: #D3D3D3;
                      border: 1px solid #606060;
                      padding: 5px 10px;
                      border-radius: 4px;
                  }
                   QDialogButtonBox QPushButton:hover {
                      background-color: #606060;
                   }
                    QDialogButtonBox QPushButton:pressed {
                       background-color: #404040;
                   }
                   QSpinBox { /* Spinbox in settings */
                       background-color: #3C3C3C;
                       color: #D3D3D3;
                       border: 1px solid #505050;
                       padding: 2px;
                        selection-background-color: #007acc;
                        selection-color: white;
                         border-radius: 3px;
                   }
                   QFrame { /* Frames like the one in SettingsDialog */
                       border: none;
                   }
                /* Style for the console input field */
                QLineEdit[placeholderText=""Wpisz polecenie...""] {
                    background-color: #3C3C3C;
                    color: #D3D3D3;
                    border: 1px solid #505050;
                    padding: 2px;
                    margin: 0px; /* Remove default margins */
                    border-radius: 0px; /* No rounding for console input */
                }
            """""")
        elif theme_name == ""light"":
             self.setStyleSheet("""")
        self.statusBar().showMessage(f""Zmieniono motyw na: {theme_name.capitalize()}"")
if __name__ == '__main__':
    app = QApplication(sys.argv)
    QLocale.setDefault(QLocale(QLocale.Language.Polish, QLocale.Country.Poland))
    main_window = IDEWindow()
    main_window.show()
    sys.exit(app.exec())"
7PQjX7Sp,VIP Chat Tag,Cakey3101,Lua,Sunday 18th of May 2025 04:59:11 AM CDT,"local TextChatService = game:GetService(""TextChatService"")
local MarketPlaceService = game:GetService(""MarketplaceService"")
local Players = game:GetService(""Players"")

TextChatService.OnIncomingMessage = function(Messsage: TextChatMessage)
	local Properties = Instance.new(""TextChatMessageProperties"")
	
	if Messsage.TextSource then
		local Player = Players:GetPlayerByUserId(Messsage.TextSource.UserId)
		
		if MarketPlaceService:UserOwnsGamePassAsync(Player.UserId, 1221054409) then
			Properties.PrefixText = ""<font color='#ffff00'>[👑 VIP]</font> ""..Messsage.PrefixText 
		end
	end
	
	return Properties
end"
XNCZuUTL,2025-05-18T11:50:43.669800,powerampache,PHP,Sunday 18th of May 2025 04:50:44 AM CDT,"1.00-70 (70) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.MusicException: {""errorAction"":""share_create"",""errorCode"":""4703"",""errorMessage"":""Enable: share"",""errorType"":""system""}
	at luci.sixsixsix.powerampache2.data.AlbumsRepositoryImpl$getAlbumShareLink$2.invokeSuspend(AlbumsRepositoryImpl.kt:440)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:991)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:232)
	at android.os.Looper.loop(Looper.java:317)
	at android.app.ActivityThread.main(ActivityThread.java:8934)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:591)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:911)

getPlaylistShareLink() - {""errorAction"":""share_create"",""errorCode"":""4703"",""errorMessage"":""Enable: share"",""errorType"":""system""}"
n1TMmCce,Player,GigaOrts,C#,Sunday 18th of May 2025 04:19:32 AM CDT,"using UnityEngine;

namespace Scripts28785
{
    public class Player : MonoBehaviour
    {
        private const string Horizontal = ""Horizontal"";
        private const string Vertical = ""Vertical"";
        private const string RunMultiplier = ""RunMultiplier"";
        private const string Run = ""Run"";
        private readonly float _defaultSpeed = 1f;

        private Rigidbody2D _body2D;
        private Animator _animator;
        public float _speed = 3f;
        private Camera _camera;
        private Vector3 _faceDirection;

        private void Awake()
        {
            _body2D = GetComponent<Rigidbody2D>();
            _animator = GetComponent<Animator>();
        }

        private void Start()
        {
            _camera = Camera.main;
        }
    
        private void Update()  
        {  
            RotateCharacter();  
        }  

        private void RotateCharacter()  
        {   
            Vector3 mousePosition = Input.mousePosition;  
 
            Vector3 worldMousePosition = _camera.ScreenToWorldPoint(mousePosition);  
         
            _faceDirection = worldMousePosition - transform.position;  

            if (_faceDirection.x < 0)  
            {  
                transform.rotation = Quaternion.Euler(0, 180,0); 
            }  
            else  
            {  
                transform.rotation = Quaternion.Euler(0, 0,0);
            }  
        }  
    
        private void FixedUpdate()
        {
            Vector2 velocity = new Vector2(
                Input.GetAxisRaw(Horizontal),
                Input.GetAxisRaw(Vertical));

            bool isRunning = velocity.magnitude > 0;
            _animator.SetBool(Run, isRunning);

            if ((_faceDirection.x < 0 && velocity.x > 0) ||
                (_faceDirection.x > 0 && velocity.x < 0) && isRunning)
            {
                _animator.SetFloat(RunMultiplier, -_defaultSpeed);
            }
            else
            {
                _animator.SetFloat(RunMultiplier, _defaultSpeed);
            }
        
            _body2D.velocity = velocity.normalized * _speed;
        }
    }
}
"
3gvg9fFV,Untitled,rqwfea,Python,Sunday 18th of May 2025 04:08:35 AM CDT,"1.4:https://getfile.dokpub.com/yandex/get/https://disk.yandex.ru/d/7TU1K3P70ri6yQ
"
XbuEdXbr,15 отрезки максимальный A,nq1s788,Python,Sunday 18th of May 2025 03:44:43 AM CDT,"#4872 https://kpolyakov.spb.ru/school/ege/gen.php?action=viewAllEgeNo&egeId=15&cat68=on
answ = 0
p = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20}
q = {5, 10, 15, 20, 25, 30, 35, 40, 45, 50}
for x in range(-1000, 1000):
    if ((1) <= (x in p)) and ((x in q) <= (not (1))):
        answ += 1
print(answ)"
J3XkcKrE,15 множества наименьшее A,nq1s788,Python,Sunday 18th of May 2025 03:43:28 AM CDT,"#4879 https://kpolyakov.spb.ru/school/ege/gen.php?action=viewAllEgeNo&egeId=15&cat68=on
answ = 0
p = {1, 2, 4, 8}
q = {1, 2, 3, 4, 5, 6}
for x in range(-1000, 1000):
    if ((not (0)) <= (not((x in p) or (x in q)))) == 0:
        answ += 1
print(answ)"
Uj5Ck5my,26 коробки дп,nq1s788,Python,Sunday 18th of May 2025 03:00:54 AM CDT,"data = open('26.txt').readlines()
n, k, Q = map(int, data[0].split())
a = []
for e in data[1:]:
    a.append(tuple(map(int, e.split())))
a.sort()
inf = 10000000
mx_s = a[-1][0]
dp = [[inf for j in range(Q + 1)] for i in range(mx_s + 1)]
cur_a = -1
mn = inf
for i in range(1, mx_s + 1):
    if cur_a != n - 1 and a[cur_a + 1][0] == i:
        cur_a += 1
    if cur_a != -1:
        mn = min(mn, a[cur_a][1])
        dp[i][1] = mn
for q in range(2, Q + 1):
    cur_a = -1
    mn = inf
    for i in range(1, mx_s + 1):
        if cur_a != n - 1 and a[cur_a + 1][0] == i:
            cur_a += 1
        if a[cur_a][0] == i and i - k >= 1:
            mn = min(dp[i - k][q - 1] + a[cur_a][1], mn)
            dp[i][q] = mn
        else:
            dp[i][q] = mn
print(dp[mx_s][Q])"
Xgywy4uu,STYFF,Yobanzda,Lua,Sunday 18th of May 2025 12:35:20 AM CDT,FBHJGBIJ90VADS7T
2y3VmdQd,bottom dialog bottom sheet flutter,muhaiminurabir,Dart,Sunday 18th of May 2025 12:00:10 AM CDT,"  void _showBottomView() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.white,
      useSafeArea: true,
      isDismissible: false,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.only(
          topLeft: Radius.circular(24),
          topRight: Radius.circular(24),
        ),
      ),
      builder: (ctx) {
        return StatefulBuilder(
          builder: (
            BuildContext context,
            void Function(void Function()) changeState,
          ) {
            return Container(
              margin: const EdgeInsets.fromLTRB(16, 20, 16, 12),
              child: Column(
                children: [
                  Icon(
                    Icons.verified_user,
                    size: 50,
                    color: ProjectColors.primaryColor,
                  ),
                  ElevatedButton(
                    style: ButtonStyle(
                      backgroundColor: WidgetStateProperty.all(
                        ProjectColors.primaryColor,
                      ),
                      padding: WidgetStateProperty.all(EdgeInsets.all(8)),
                      shape: WidgetStatePropertyAll(
                        RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10),
                        ),
                      ),
                    ),
                    onPressed: () {
                      Navigator.of(context).pop();
                      Navigator.pushReplacementNamed(
                        context,
                        guestHomePage,
                        arguments: 3,
                      );
                    },
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      spacing: 6,
                      children: [
                        SvgPicture.asset(
                          ""assets/images/ic_login.svg"",
                          height: 24,
                          width: 24,
                          colorFilter: ColorFilter.mode(
                            ProjectColors.white,
                            BlendMode.srcIn,
                          ),
                        ),
                        Text(
                          CustomStrings.login,
                          style: GoogleFonts.poppins(
                            fontWeight: FontWeight.w500,
                            fontSize: 16,
                            color: ProjectColors.white,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            );
          },
        );
      },
    );
  }
"
2y3dJEtJ,Dumps,LVL23HT,CSS,Saturday 17th of May 2025 11:28:18 PM CDT,"Tính năng ""Dán văn bản"" trên nền tảng của chúng tôi đóng vai trò là giao diện đơn giản và an toàn để chia sẻ và lưu trữ đoạn mã, nhật ký hoặc bất kỳ dữ liệu văn bản nào bạn muốn giữ lại.

Các tính năng chính:"
aMvLQXDz,cipher wheel scad,j0h,C,Saturday 17th of May 2025 10:55:37 PM CDT,"// ceaser cipher wheel
// Parameters
ring_thickness = 9;    // Thickness of the ring (radial)
ring_height = 5;       // Height of the ring
letter_count = 26;
angle_step = 360 / letter_count;
font_size = 6;
font_name = ""Liberation Sans"";  // Change if needed

module ring_with_letters(ring_radius) {
    difference() {
        // Outer cylinder
        cylinder(h = ring_height, r = ring_radius + ring_thickness / 2, $fn = 200);
        // Inner hole
        cylinder(h = ring_height + 1, r = ring_radius - ring_thickness / 2, $fn = 200);
    }

    // Add letters
    for (i = [0 : letter_count - 1]) {
        angle = i * angle_step;
        letter = chr(65 + i);  // 65 = 'A'

        rotate([0, 0, angle])
        translate([ring_radius, 0, ring_height])
        rotate([0, 0, 0])
        linear_extrude(height = 1)
            text(letter, size = font_size, font = font_name, halign = ""center"", valign = ""bottom"");
    }
}

// Example usage:
ring_with_letters(50);
ring_with_letters(40.7);
"
uTThUC8X,vtables,Jhynjhiruu,C,Saturday 17th of May 2025 09:55:15 PM CDT,"uim vtable

1  = x_GetAppInstance(uim, retAppInst)
2  = ?
3  = framenumber?(uim, retNum)
4  = framenumber?(uim, ..., ...)
5  = ret 0
6  = x_GetCurrentTime(uim, ..., ..., ..., ...)
7  = x_CreateLock(uim, ..., retLock)
8  = x_CreateStream(uim, ..., ..., ..., pathname, retID)
9  = x_RemoveStream(uim, ..., ...)
10 = x_OpenStream(uim, id, ..., ...)
11 = ret -2
12 = x_GetPalette(uim, retPalette)
13 = new_interactor(uim, ...,  ..., retInteractor)
14 = ?x_GetRequestHeaders
15 = ret -2
16 = ret -2
17 = ret -2
18 = ret -2
19 = ret -2

hm vtable

0  = destroy?(hm)
1  = x_LoadComponent(hm, ???)
2  = x_UnloadComponent(hm, which)
3  = x_FindHandlerInfo(hm, ..., ..., ..., ..., ...)
4  = ?
5  = ?
6  = foreach?(hm, ...)
7  = get_supported_mime_types(hm, retList)
8  = ?
9  = get_all_option_enums(hm, ..., ..., ..., ...)
10 = set_all_option_enums(hm, ..., ..., ...)

__different_cm vtable

0  = get_cm(cm, retCM)
1  = x_GetServices(cm, ..., ...)
2  = get_sm(cm, retSM)
3  = ?
4  = ?
5  = ?
6  = ?
7  = x_GetBucketPool(cm, ...)
8  = ?
9  = x_GetCurrentTime(cm, ..., ..., ..., ...)
10 = x_CreateLock(cm, ..., retLock)
11 = x_CreateStream(cm, ..., ..., ..., pathname, retID)
12 = x_RemoveStream(cm, ..., ...)
13 = x_OpenStream(cm, id, ..., ...)
14 = ret -2
15 = ret -2
16 = ret -2
17 = ret -2
18 = ret -2
19 = ret -2
20 = x_GetPalette(cm, retPalette)
21 = x_CreateInteractor(cm, ..., ..., retInteractor)
22 = ret
23 = ret
24 = x_GetRequestHeaders

pm vtable

0  = x_DelPropertyManager(pm)
1  = x_Get(pm, ???...)
2  = x_Set(pm, ???...)

vm vtable

0  = x_DelViewManager(vm)
1  = x_NewViewForTarget(vm, ..., ...)
2  = bind_view?(vm, t, ...)
3  = unbind_view?(vm, t)
4  = destroy_view?(vm, t, ...)
5  = get_target_data?(vm, t, ...)
6  = ret -3
7  = ret -3
8  = ret -3
9  = ret -3
10 = ?
11 = x_SetViewFocus(vm, t, ...)
12 = x_SetViewInteraction(vm, t, ...)
13 = ret -3
14 = x_SetViewSize(vm, t, size)
15 = ?
16 = ?(vm, t, targetName, ..., ..., ..., ..., ...)
17 = ?(vm, t, ..., ..., ..., ..., ..., ...)
18 = ?(vm, t, ..., ..., ..., ..., ..., ...)
19 = ?(vm, t, ..., ..., ..., ..., ..., ...)
20 = ?(vm, t, ..., ..., ..., ...)
21 = ?(vm, t, ..., ..., ..., ...)
22 = ?(vm, t, ...)
23 = ?(vm, t, ...)
24 = ?(vm, t, ...)
25 = ?(vm, t, ...)
26 = ret -3
27 = ret -3
28 = ret -3
29 = ret -3
30 = ret -3
31 = ?(vm, t)
32 = ?(vm, t)
33 = ?(vm, t, ...)

cm vtable

1  = x_DelContentManager(cm)
2  = x_LoadComponent(cm, ???...)
3  = x_UnloadComponent(cm, ..., ...)
4  = ?
5  = ?
6  = x_GetProperty(cm, ???...)
7  = x_SetProperty(cm, ???...)
8  = ret 1
9  = ?
10 = x_AbortRequest(cm, ...)
11 = ?
12 = target_something?(cm, ???...)
13 = ?(cm, ..., ..., ...)
14 = ?(cm, ...)
15 = ?(cm, ..., ...)
16 = ?(cm, ...)
17 = x_Close(cm, ...)
18 = x_ShowHide(cm, ..., ...)
19 = x_Focus(cm, ..., ...)
20 = x_SetOrigin(cm, ..., ...)
21 = x_GetDesiredSize(cm, ..., ..., ...)
22 = x_SetSize(cm, ..., ...)
23 = x_Scroll(cm, ..., ...)
24 = x_Find(cm, ..., ..., ...)
25 = x_Info(cm, ..., ..., ...)
26 = x_SaveAs(cm, ..., ..., ...)
27 = x_Print(cm, ..., ...)
28 = x_LoadMissing(cm, ...)
29 = x_Reset(cm, ...)
30 = x_Resume(cm, ...)
31 = x_Suspend(cm, ...)
32 = x_Edit(cm, ..., ...)
33 = x_CanPerform(cm, ..., ..., ...)
34 = x_GetFormEltValue(cm, ..., ..., ..., ..., ...)
35 = x_SetFormEltValue(cm, ..., ..., ..., ..., ...)
36 = x_AddFormEltAction(cm, ..., ..., ..., ..., ..., ..., ...)
37 = x_RemoveFormEltAction(cm, ..., ..., ..., ..., ..., ..., ...)
38 = x_AddLinkAction(cm, ..., ..., ..., ..., ..., ...)
39 = x_RemoveLinkAction(cm, ..., ..., ..., ..., ..., ...)
40 = x_AddScriptAction(cm, ..., ..., ..., ..., ...)
41 = x_RemoveScriptAction(cm, ..., ..., ..., ..., ...)
42 = x_OnEvent(cm, ..., ...)"
vZeS3zX0,Feli Add cat,Talithacelin,Python,Saturday 17th of May 2025 09:45:37 PM CDT,"add_cat.blade.php
@extends('base.base')
@section('content')
<head>
<link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css""
rel=""stylesheet"">
<style>
html,
body {
margin: 0;
padding: 0;
width: 100%;
overflow-x: hidden;
background-color: #f4f4f4;
}
.category-container {
margin-left: 235px; /* match your .sidebar width exactly */
padding: 20px;
/* background-color: #f4f4f4; */
overflow-x: hidden;
box-sizing: border-box;
max-width: calc(100vw - 250px);
}
.category-header h2 {
font-size: 25px;
margin-left: 20px;
margin-top: 10px;
font-weight: 800;
margin-bottom: 45px;
}
.add-cat-form {
min-width: 200px;
padding: 15px;
background-color: #fff;
border-radius: 16px;
box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
text-align: left;
margin-left: 20px;
}
.form-group {
margin-bottom: 20px;
}
.form-group label {
font-weight: bold;
display: block;
margin-bottom: 6px;
margin-left: 40px;
margin-top: 15px;
font-size: 20px;
}
input,
select,
textarea {
width: 90%;
padding: 5px;
border: 1px solid #ccc;
border-radius: 5px;
font-size: 15px;
padding-left: 8px;
margin-left: 40px;
}
.form-buttons {
display: flex;
justify-content: center;
gap: 12px;
margin-top: 30px;
/* text-align: center; */
}
.form-buttons .btn {
width: 120px;
}
.btn {
padding: 10px 24px;
border-radius: 10px;
border: none;
cursor: pointer;
font-weight: bold;
text-align: center;
}
/* utk btton save */
.save {
background: #b38cf8;
color: white;
}
/* utk btton cancel */
.cancel {
background: #999;
color: white;
}
/* utk btton close di popup */
.close {
background: #999;
color: white;
}
.form-buttons .cancel a, .save a, .close a {
color: rgb(255, 255, 255);
text-decoration: none;
}
.form-buttons .cancel:hover a, .save:hover a, .close:hover a {
color: rgb(0, 0, 0);
text-decoration: none;
}
/* Popup Styling */
.popup-overlay {
display: none;
position: fixed;
top: 0; left: 0;
width: 100vw;
height: 100vh;
background: rgba(0,0,0,0.5);
justify-content: center;
align-items: center;
z-index: 999;
}
.popup-content {
background: white;
padding: 24px;
border-radius: 12px;
max-width: 400px;
box-shadow: 0 8px 20px rgba(0,0,0,0.2);
text-align: center;
}
.popup-content h2 {
margin-top: 0;
}
/* .close-btn {
margin-top: 16px;
padding: 8px 16px;
background: #a78bfa;
border: none;
color: white;
border-radius: 8px;
cursor: pointer;
text-decoration: none;
}
.close-btn:hover {
background: #844ae8;
text-decoration: none;
} */
</style>
</head>
<div class=""category-container"">
<div class=""category-header"">
<h2>Add New Category</h2>
</div>
<div class=""add-cat-form"">
<div class=""form-group"">
<label>Name</label>
<input type=""text"" placeholder=""Maximum 35 characters"" />
</div>
<div class=""form-group"">
<label>Description</label>
<textarea rows=""6"" placeholder=""Enter the Category's Description"" ></textarea>
</div>
<!-- Buttons -->
{{-- <div class=""form-buttons"">
<button class=""btn btn-secondary"">Cancel</button>
<button class=""btn save"">Save</button>
</div> --}}
<div class=""form-buttons"">
<button class=""btn cancel"">
<a href=""{{ route('category') }}"">Cancel</a>
</button>
<button class=""btn save"" onclick=""showPopup('popup1')"">
<a href=""#"">Save</a>
</button>
</div>
</div>
</div>
<!-- Popup -->
<div class=""popup-overlay"" id=""popup1"">
<div class=""popup-content"">
<h2>Science Fiction</h2>
<p>Detail Category:</p>
<p>Cerita yang berlatar belakang teknologi dan sains. Genre ini seringkali didasarkan pada
prinsip-prinsip ilmiah yang ada atau dihipotesiskan, namun dengan sentuhan imajinatif dan fiksi.
</p>
<div class=""form-buttons"">
<button class=""btn close"">
<a href=""{{ route('category') }}"">Close</a>
</button>
</div>
</div>
</div>
<script>
function showPopup(popupId) {
document.getElementById(popupId).style.display = 'flex';
}
function closePopup(popupId) {
document.getElementById(popupId).style.display = 'none';
}
</script>
<!-- Bootstrap Icons CDN -->
<link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/bootstrapicons@1.10.5/font/bootstrap-icons.css"">
@endsection
category_books.blade.php
@extends('base.base')
@section('content')
<head>
<link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css""
rel=""stylesheet"">
<style>
html,
body {
margin: 0;
padding: 0;
width: 100%;
overflow-x: hidden;
background-color: #f4f4f4;
}
.category-container {
margin-left: 235px; /* match your .sidebar width exactly */
padding: 20px;
background-color: #f4f4f4;
overflow-x: hidden;
box-sizing: border-box;
max-width: calc(100vw - 250px);
}
.category-header h2 {
font-size: 25px;
margin-left: 20px;
margin-top: 10px;
font-weight: 800;
}
.custom-container {
border: 2px solid #c7b3ff;
border-radius: 10px;
padding: 20px;
margin-left: 20px;
}
.action-link {
color: #8e44ad;
text-decoration: none;
}
.action-link:hover {
text-decoration: underline;
}
.icon-eye {
margin-right: 5px;
}
.search-add {
margin-left: 20px;
display: flex;
justify-content: space-between;
align-items: center;
margin-bottom: 15px;
}
.search-bar {
position: relative;
width: 550px;
margin-left: 0px;
margin-bottom: 10px;
}
.search-bar input {
width: 100%;
padding: 4px 50px 4px 15px;
border: 1px solid #ccc;
border-radius: 8px;
}
.search-bar i {
position: absolute;
right: 10px;
top: 50%;
transform: translateY(-50%);
color: #888;
}
.form-buttons .btn {
width: 120px;
}
.btn {
padding: 10px 24px;
border-radius: 10px;
border: none;
cursor: pointer;
font-weight: bold;
text-align: center;
}
/* utk btton cancel */
.back {
background: #999;
color: white;
}
.form-buttons .back a{
color: rgb(255, 255, 255);
text-decoration: none;
}
.form-buttons .back:hover a{
color: rgb(0, 0, 0);
text-decoration: none;
}
.edit i{
margin-left: 10px;
}
.edit {
margin-right: 10px;
}
</style>
</head>
<div class=""category-container"">
<div class=""category-header"">
<h2>Books in “Arts and Photography”</h2>
</div>
<div class=""search-add"">
<div class=""search-bar"">
<input type=""text"" placeholder=""Search by ID or title or author"">
<i class=""fa-solid fa-magnifying-glass""></i>
</div>
<div class=""form-buttons"">
<button class=""btn back"">
<a href=""{{ route('category') }}"">Back</a>
</button>
</div>
</div>
<div class=""custom-container bg-white"">
<table class=""table"">
<thead>
<tr>
<th>ID</th>
<th>Title</th>
<th>Author</th>
<th>Price</th>
<th>Stock</th>
</tr>
</thead>
<tbody>
<tr>
<td>PF001</td>
<td>Belajar Website Pemula</td>
<td>Celin Celin</td>
<td>Rp. 500.000</td>
<td>100</td>
</tr>
<tr>
<td>PF001</td>
<td>Belajar Website Pemula</td>
<td>Celin Celin</td>
<td>Rp. 500.000</td>
<td>100</td>
</tr>
<tr>
<td>PF001</td>
<td>Belajar Website Pemula</td>
<td>Celin Celin</td>
<td>Rp. 500.000</td>
<td>100</td>
</tr>
<tr>
<td>PF001</td>
<td>Belajar Website Pemula</td>
<td>Celin Celin</td>
<td>Rp. 500.000</td>
<td>100</td>
</tr>
</tbody>
</table>
</div>
</div>
<!-- Bootstrap Icons CDN -->
<link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/bootstrapicons@1.10.5/font/bootstrap-icons.css"">
@endsection
category.blade.php
@extends('base.base')
@section('content')
<head>
<link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css""
rel=""stylesheet"">
<style>
html,
body {
margin: 0;
padding: 0;
width: 100%;
overflow-x: hidden;
background-color: #f4f4f4;
}
.category-container {
margin-left: 235px; /* match your .sidebar width exactly */
padding: 20px;
background-color: #f4f4f4;
overflow-x: hidden;
box-sizing: border-box;
max-width: calc(100vw - 250px);
}
.category-header h2 {
font-size: 25px;
margin-left: 20px;
margin-top: 10px;
font-weight: 800;
}
.custom-container {
border: 2px solid #c7b3ff;
border-radius: 10px;
padding: 20px;
margin-left: 20px;
}
.action-link {
color: #8e44ad;
text-decoration: none;
}
.action-link:hover {
text-decoration: underline;
}
.icon-eye {
margin-right: 5px;
}
.search-add {
margin-left: 20px;
display: flex;
justify-content: space-between;
align-items: center;
margin-bottom: 15px;
}
.search-bar {
position: relative;
width: 550px;
margin-left: 0px;
margin-bottom: 10px;
}
.search-bar input {
width: 100%;
padding: 4px 50px 4px 15px;
border: 1px solid #ccc;
border-radius: 8px;
}
.search-bar i {
position: absolute;
right: 10px;
top: 50%;
transform: translateY(-50%);
color: #888;
}
.add-btn {
background-color: #b18dfc;
color: white;
border: none;
border-radius: 8px;
padding: 10px 20px;
font-weight: bold;
cursor: pointer;
margin-right: 10px;
}
.add-btn:hover {
background-color: #996bfa;
}
.add-btn i {
margin-right: 5px;
}
.edit i{
margin-left: 10px;
}
.edit {
margin-right: 10px;
}
</style>
</head>
<div class=""category-container"">
<div class=""category-header"">
<h2>Category List</h2>
</div>
<div class=""search-add"">
<div class=""search-bar"">
<input type=""text"" placeholder=""Search by ID or title or author"">
<i class=""fa-solid fa-magnifying-glass""></i>
</div>
<a href=""{{ route('add-category') }}"">
<button class=""add-btn"">
<i class=""bi bi-plus-lg""></i> Add New Category
</button>
</a>
</div>
<div class=""custom-container bg-white"">
<table class=""table"">
<thead>
<tr>
<th>ID</th>
<th>Name</th>
<th>Total Books</th>
<th>Action</th>
</tr>
</thead>
<tbody>
@foreach ($category as $cat)
<tr>
<td>{{ $cat['id'] }}</td>
<td>{{ $cat['nama_category'] }}</td>
<td>{{ $cat['total_books'] }}</td>
<td>
<a href=""{{ route('category-books') }}"" class=""action-link viewAll""><i class=""bi bi-eye
icon-eye""></i>View All Books</a>
<a href=""{{ route('edit-category') }}"" class=""text-primary edit""><i class=""fa-solid fapen""></i>Edit</a>
<a href=""{{ route('category', ['delete_id' => $cat['id']]) }}"" onclick=""return
confirm('Yakin ingin menghapus?')"" class=""text-danger delete""><i class=""fa-solid fatrash""></i>Delete</a>
</td>
</tr>
@endforeach
</tbody>
</table>
</div>
</div>
<!-- Bootstrap Icons CDN -->
<link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/bootstrapicons@1.10.5/font/bootstrap-icons.css"">
@endsection
edit_cat.blade.php
@extends('base.base')
@section('content')
<head>
<link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css""
rel=""stylesheet"">
<style>
html,
body {
margin: 0;
padding: 0;
width: 100%;
overflow-x: hidden;
background-color: #f4f4f4;
}
.category-container {
margin-left: 235px; /* match your .sidebar width exactly */
padding: 20px;
/* background-color: #f4f4f4; */
overflow-x: hidden;
box-sizing: border-box;
max-width: calc(100vw - 250px);
}
.category-header h2 {
font-size: 25px;
margin-left: 20px;
margin-top: 10px;
font-weight: 800;
margin-bottom: 45px;
}
.add-cat-form {
min-width: 200px;
padding: 15px;
background-color: #fff;
border-radius: 16px;
box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
text-align: left;
margin-left: 20px;
}
.form-group {
margin-bottom: 20px;
}
.form-group label {
font-weight: bold;
display: block;
margin-bottom: 6px;
margin-left: 40px;
margin-top: 15px;
font-size: 20px;
}
input,
select,
textarea {
width: 90%;
padding: 5px;
border: 1px solid #ccc;
border-radius: 5px;
font-size: 15px;
padding-left: 8px;
margin-left: 40px;
}
.form-buttons {
display: flex;
justify-content: center;
gap: 12px;
margin-top: 30px;
/* text-align: center; */
}
.form-buttons .btn {
width: 120px;
}
.btn {
padding: 10px 24px;
border-radius: 10px;
border: none;
cursor: pointer;
font-weight: bold;
text-align: center;
}
/* utk btton save */
.save {
background: #b38cf8;
color: white;
}
/* utk btton cancel */
.cancel {
background: #999;
color: white;
}
.form-buttons .cancel a, .save a {
color: rgb(255, 255, 255);
text-decoration: none;
}
.form-buttons .cancel:hover a, .save:hover a {
color: rgb(0, 0, 0);
text-decoration: none;
}
</style>
</head>
<div class=""category-container"">
<div class=""category-header"">
<h2>Edit Category</h2>
</div>
<div class=""add-cat-form"">
<div class=""form-group"">
<label>Name</label>
<input type=""text"" placeholder=""Maximum 35 characters"" />
</div>
<div class=""form-group"">
<label>Description</label>
<textarea rows=""6"" placeholder=""Enter the Category's Description"" ></textarea>
</div>
<div class=""form-buttons"">
<button class=""btn cancel"">
<a href=""{{ route('category') }}"">Cancel</a>
</button>
<button class=""btn save"">
<a href=""{{ route('category') }}"">Save</a>
</button>
</div>
</div>
</div>
<!-- Bootstrap Icons CDN -->
<link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/bootstrapicons@1.10.5/font/bootstrap-icons.css"">
@endsection
Routing: web.php
Route::get('/category', [StoreController::class, 'show_category'])
->name('category');
Route::get('/categorybooks', [StoreController::class, 'show_category_books'])
->name('category-books');
Route::get('/add-category', [StoreController::class, 'show_add_category'])
->name('add-category');
Route::get('/edit-category', [StoreController::class, 'show_edit_category'])
->name('edit-category');
Controller: StoreController
public function show_category_books(){
return view('category.category_books',[
'title' => 'Category Books'
]);
}
public function show_add_category(){
return view('category.add_cat',[
'title' => 'Add Category'
]);
}
public function show_edit_category(){
return view('category.edit_cat',[
'title' => 'Edit Category'
]);
}
public function show_category(Request $request)
{
$category = [
['id' => 1, 'nama_category' => 'Arts & Photography', 'total_books' => 10],
['id' => 2, 'nama_category' => 'Non-Fiksi', 'total_books' => 5],
['id' => 3, 'nama_category' => 'Biografi', 'total_books' => 7],
];
// Kalau ada request ID untuk dihapus
if ($request->has('delete_id')) {
$deleteId = $request->input('delete_id');
// Filter data yang tidak sesuai dengan ID yang dihapus
$category = array_filter($category, function ($cat) use ($deleteId) {
return $cat['id'] != $deleteId;
});
// Reset index array
$category = array_values($category);
}
return view('category.category', compact('category'));
}"
T4bt7jhd,⛏️Hole Digging Inc,new2479,Lua,Saturday 17th of May 2025 09:32:45 PM CDT,"--https://www.youtube.com/@WinPo1R              pls sub 
--discord :      https://discord.gg/mdnJJYbjCh


loadstring(game:HttpGet(""https://raw.githubusercontent.com/powin273/script/refs/heads/main/Hole_Digging_Inc.lua"", true))()

"
10sdx8FG,2025-05-18T03:50:02.051284,powerampache,PHP,Saturday 17th of May 2025 08:50:02 PM CDT,"1.01-80 (80) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.NullSessionException: Session is NULL
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.authToken(BaseAmpacheRepository.kt:87)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$authToken$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:984)
	at android.os.Handler.dispatchMessage(Handler.java:104)
	at android.os.Looper.loopOnce(Looper.java:238)
	at android.os.Looper.loop(Looper.java:357)
	at android.app.ActivityThread.main(ActivityThread.java:8088)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:548)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:957)

getAlbumsStats() - generic exception {""detailMessage"":""Session is NULL"",""stackTrace"":[]}"
5bfnD8tv,2025-05-18T03:50:02.053717,powerampache,PHP,Saturday 17th of May 2025 08:50:02 PM CDT,"1.01-80 (80) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.NullSessionException: Session is NULL
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.authToken(BaseAmpacheRepository.kt:87)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$authToken$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:984)
	at android.os.Handler.dispatchMessage(Handler.java:104)
	at android.os.Looper.loopOnce(Looper.java:238)
	at android.os.Looper.loop(Looper.java:357)
	at android.app.ActivityThread.main(ActivityThread.java:8088)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:548)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:957)

getAlbumsStats() - generic exception {""detailMessage"":""Session is NULL"",""stackTrace"":[]}"
LiLV67xr,2025-05-18T03:50:02.047663,powerampache,PHP,Saturday 17th of May 2025 08:50:02 PM CDT,"1.01-80 (80) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.NullSessionException: Session is NULL
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.authToken(BaseAmpacheRepository.kt:87)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$authToken$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:984)
	at android.os.Handler.dispatchMessage(Handler.java:104)
	at android.os.Looper.loopOnce(Looper.java:238)
	at android.os.Looper.loop(Looper.java:357)
	at android.app.ActivityThread.main(ActivityThread.java:8088)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:548)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:957)

getGenres() - generic exception {""detailMessage"":""Session is NULL"",""stackTrace"":[]}"
Nny2yATf,2025-05-18T03:50:02.052804,powerampache,PHP,Saturday 17th of May 2025 08:50:02 PM CDT,"1.01-80 (80) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.NullSessionException: Session is NULL
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.authToken(BaseAmpacheRepository.kt:87)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$authToken$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:984)
	at android.os.Handler.dispatchMessage(Handler.java:104)
	at android.os.Looper.loopOnce(Looper.java:238)
	at android.os.Looper.loop(Looper.java:357)
	at android.app.ActivityThread.main(ActivityThread.java:8088)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:548)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:957)

getAlbumsStats() - generic exception {""detailMessage"":""Session is NULL"",""stackTrace"":[]}"
P46Vmjht,2025-05-18T03:50:01.934284,powerampache,PHP,Saturday 17th of May 2025 08:50:02 PM CDT,"1.01-80 (80) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.NullSessionException: Session is NULL
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.authToken(BaseAmpacheRepository.kt:87)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$authToken$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:811)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:715)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:702)

"
4mrDHAEr,"Internal error on command:""T2""",creach,JSON,Saturday 17th of May 2025 08:26:02 PM CDT,"Stats 3238.1: gcodein=0  mcu: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000009 bytes_write=7544 bytes_read=36639 bytes_retransmit=0 bytes_invalid=0 send_seq=622 receive_seq=622 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997915 host: mcu_awake=0.001 mcu_task_avg=0.000015 mcu_task_stddev=0.000029 bytes_write=1830 bytes_read=7805 bytes_retransmit=0 bytes_invalid=0 send_seq=278 receive_seq=278 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999908 adj=50001243 expander: mcu_awake=0.002 mcu_task_avg=0.000015 mcu_task_stddev=0.000011 bytes_write=1750 bytes_read=15025 bytes_retransmit=9 bytes_invalid=0 send_seq=261 receive_seq=261 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=48019259 adj=48020210 tr: mcu_awake=0.001 mcu_task_avg=0.000006 mcu_task_stddev=0.000004 bytes_write=6411 bytes_read=21745 bytes_retransmit=9 bytes_invalid=0 send_seq=597 receive_seq=597 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12000393 adj=12000733 skr: temp=32.4 RPI: temp=44.0  chamber: temp=30.3 MCU: temp=30.3 heater_bed: target=0 temp=34.2 pwm=0.000 sysload=0.13 cputime=14.922 memavail=666224 print_time=3243.522 buffer_time=0.245 print_stall=0 extruder: target=210 temp=210.7 pwm=0.284
TMC 'stepper_tr_fil_driver' reports GSTAT:      00000001 reset=1(Reset)
TMC 'stepper_tr_fil_driver' reports GSTAT:      00000000
Stats 3239.1: gcodein=0  mcu: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000009 bytes_write=8106 bytes_read=37258 bytes_retransmit=0 bytes_invalid=0 send_seq=658 receive_seq=658 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997915 host: mcu_awake=0.001 mcu_task_avg=0.000015 mcu_task_stddev=0.000029 bytes_write=1836 bytes_read=7821 bytes_retransmit=0 bytes_invalid=0 send_seq=279 receive_seq=279 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999908 adj=50001256 expander: mcu_awake=0.002 mcu_task_avg=0.000015 mcu_task_stddev=0.000011 bytes_write=1756 bytes_read=15086 bytes_retransmit=9 bytes_invalid=0 send_seq=262 receive_seq=262 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=48019260 adj=48020457 tr: mcu_awake=0.001 mcu_task_avg=0.000006 mcu_task_stddev=0.000004 bytes_write=7151 bytes_read=22517 bytes_retransmit=9 bytes_invalid=0 send_seq=646 receive_seq=646 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12000393 adj=12000734 skr: temp=32.1 RPI: temp=44.5  chamber: temp=30.3 MCU: temp=30.3 heater_bed: target=0 temp=34.3 pwm=0.000 sysload=0.13 cputime=15.136 memavail=666224 print_time=3243.522 buffer_time=0.000 print_stall=0 extruder: target=210 temp=210.6 pwm=0.343
Stats 3240.1: gcodein=0  mcu: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000009 bytes_write=8392 bytes_read=37582 bytes_retransmit=0 bytes_invalid=0 send_seq=682 receive_seq=681 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997916 host: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000020 bytes_write=1842 bytes_read=7850 bytes_retransmit=0 bytes_invalid=0 send_seq=280 receive_seq=280 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999911 adj=50001281 expander: mcu_awake=0.002 mcu_task_avg=0.000015 mcu_task_stddev=0.000011 bytes_write=1762 bytes_read=15147 bytes_retransmit=9 bytes_invalid=0 send_seq=263 receive_seq=263 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=48019260 adj=48020498 tr: mcu_awake=0.001 mcu_task_avg=0.000006 mcu_task_stddev=0.000004 bytes_write=7621 bytes_read=23033 bytes_retransmit=9 bytes_invalid=0 send_seq=685 receive_seq=685 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12000393 adj=12000735 skr: temp=32.0 RPI: temp=43.5  chamber: temp=30.3 MCU: temp=30.3 heater_bed: target=0 temp=34.2 pwm=0.000 sysload=0.13 cputime=15.266 memavail=666224 print_time=3243.522 buffer_time=0.000 print_stall=0 extruder: target=210 temp=210.5 pwm=0.343
Stats 3241.1: gcodein=0  mcu: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000009 bytes_write=8675 bytes_read=37890 bytes_retransmit=0 bytes_invalid=0 send_seq=704 receive_seq=704 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997918 host: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000020 bytes_write=1848 bytes_read=7866 bytes_retransmit=0 bytes_invalid=0 send_seq=281 receive_seq=281 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999916 adj=50001325 expander: mcu_awake=0.002 mcu_task_avg=0.000015 mcu_task_stddev=0.000011 bytes_write=1768 bytes_read=15237 bytes_retransmit=9 bytes_invalid=0 send_seq=264 receive_seq=264 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=48019261 adj=48020531 tr: mcu_awake=0.004 mcu_task_avg=0.000006 mcu_task_stddev=0.000005 bytes_write=8067 bytes_read=23539 bytes_retransmit=9 bytes_invalid=0 send_seq=722 receive_seq=722 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12000393 adj=12000740 skr: temp=32.1 RPI: temp=43.5  chamber: temp=30.2 MCU: temp=30.2 heater_bed: target=0 temp=34.3 pwm=0.000 sysload=0.13 cputime=15.399 memavail=666224 print_time=3243.522 buffer_time=0.000 print_stall=0 extruder: target=210 temp=210.4 pwm=0.332
Stats 3242.1: gcodein=0  mcu: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000009 bytes_write=8993 bytes_read=38189 bytes_retransmit=0 bytes_invalid=0 send_seq=728 receive_seq=728 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997924 host: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000020 bytes_write=1854 bytes_read=7882 bytes_retransmit=0 bytes_invalid=0 send_seq=282 receive_seq=282 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999920 adj=50001400 expander: mcu_awake=0.002 mcu_task_avg=0.000015 mcu_task_stddev=0.000011 bytes_write=1774 bytes_read=15298 bytes_retransmit=9 bytes_invalid=0 send_seq=265 receive_seq=265 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=48019263 adj=48020554 tr: mcu_awake=0.004 mcu_task_avg=0.000006 mcu_task_stddev=0.000005 bytes_write=8549 bytes_read=24060 bytes_retransmit=9 bytes_invalid=0 send_seq=762 receive_seq=762 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12000393 adj=12000731 skr: temp=32.1 RPI: temp=42.9  chamber: temp=30.3 MCU: temp=30.3 heater_bed: target=0 temp=34.1 pwm=0.000 sysload=0.13 cputime=15.537 memavail=666224 print_time=3243.522 buffer_time=0.000 print_stall=0 extruder: target=210 temp=210.4 pwm=0.316
Stats 3243.1: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000011 mcu_task_stddev=0.000009 bytes_write=9289 bytes_read=38528 bytes_retransmit=0 bytes_invalid=0 send_seq=751 receive_seq=751 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997925 host: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000020 bytes_write=1860 bytes_read=7898 bytes_retransmit=0 bytes_invalid=0 send_seq=283 receive_seq=283 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999921 adj=50001385 expander: mcu_awake=0.002 mcu_task_avg=0.000015 mcu_task_stddev=0.000011 bytes_write=1780 bytes_read=15359 bytes_retransmit=9 bytes_invalid=0 send_seq=266 receive_seq=266 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=48019264 adj=48020555 tr: mcu_awake=0.004 mcu_task_avg=0.000006 mcu_task_stddev=0.000005 bytes_write=9007 bytes_read=24571 bytes_retransmit=9 bytes_invalid=0 send_seq=800 receive_seq=800 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12000394 adj=12000723 skr: temp=32.1 RPI: temp=43.5  chamber: temp=30.3 MCU: temp=30.3 heater_bed: target=0 temp=34.2 pwm=0.000 sysload=0.20 cputime=15.669 memavail=666224 print_time=3243.522 buffer_time=0.000 print_stall=0 extruder: target=210 temp=210.2 pwm=0.407
Stats 3244.1: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000011 mcu_task_stddev=0.000009 bytes_write=9574 bytes_read=38836 bytes_retransmit=0 bytes_invalid=0 send_seq=774 receive_seq=774 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997924 host: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000020 bytes_write=1866 bytes_read=7914 bytes_retransmit=0 bytes_invalid=0 send_seq=284 receive_seq=284 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999921 adj=50001372 expander: mcu_awake=0.002 mcu_task_avg=0.000015 mcu_task_stddev=0.000011 bytes_write=1786 bytes_read=15435 bytes_retransmit=9 bytes_invalid=0 send_seq=267 receive_seq=267 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=48019262 adj=48020576 tr: mcu_awake=0.004 mcu_task_avg=0.000006 mcu_task_stddev=0.000005 bytes_write=9465 bytes_read=25068 bytes_retransmit=9 bytes_invalid=0 send_seq=838 receive_seq=838 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12000394 adj=12000731 skr: temp=32.0 RPI: temp=44.0  chamber: temp=30.3 MCU: temp=30.3 heater_bed: target=0 temp=34.2 pwm=0.000 sysload=0.20 cputime=15.794 memavail=665504 print_time=3243.522 buffer_time=0.000 print_stall=0 extruder: target=210 temp=210.2 pwm=0.302
Stats 3245.1: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000011 mcu_task_stddev=0.000009 bytes_write=9848 bytes_read=39130 bytes_retransmit=0 bytes_invalid=0 send_seq=797 receive_seq=797 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997924 host: mcu_awake=0.001 mcu_task_avg=0.000015 mcu_task_stddev=0.000029 bytes_write=1872 bytes_read=7943 bytes_retransmit=0 bytes_invalid=0 send_seq=285 receive_seq=285 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999922 adj=50001385 expander: mcu_awake=0.002 mcu_task_avg=0.000015 mcu_task_stddev=0.000011 bytes_write=1792 bytes_read=15496 bytes_retransmit=9 bytes_invalid=0 send_seq=268 receive_seq=268 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=48019258 adj=48020571 tr: mcu_awake=0.004 mcu_task_avg=0.000006 mcu_task_stddev=0.000005 bytes_write=9935 bytes_read=25584 bytes_retransmit=9 bytes_invalid=0 send_seq=877 receive_seq=877 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12000395 adj=12000747 skr: temp=32.0 RPI: temp=44.0  chamber: temp=30.4 MCU: temp=30.2 heater_bed: target=0 temp=34.3 pwm=0.000 sysload=0.20 cputime=15.926 memavail=665504 print_time=3243.522 buffer_time=0.000 print_stall=0 extruder: target=210 temp=210.2 pwm=0.302
Stats 3246.1: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000011 mcu_task_stddev=0.000009 bytes_write=10133 bytes_read=39454 bytes_retransmit=0 bytes_invalid=0 send_seq=820 receive_seq=820 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997923 host: mcu_awake=0.001 mcu_task_avg=0.000015 mcu_task_stddev=0.000029 bytes_write=1878 bytes_read=7959 bytes_retransmit=0 bytes_invalid=0 send_seq=286 receive_seq=286 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999931 adj=50001407 expander: mcu_awake=0.002 mcu_task_avg=0.000015 mcu_task_stddev=0.000011 bytes_write=1798 bytes_read=15571 bytes_retransmit=9 bytes_invalid=0 send_seq=269 receive_seq=269 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=48019253 adj=48020539 tr: mcu_awake=0.006 mcu_task_avg=0.000006 mcu_task_stddev=0.000005 bytes_write=10393 bytes_read=26109 bytes_retransmit=9 bytes_invalid=0 send_seq=915 receive_seq=915 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12000395 adj=12000763 skr: temp=32.0 RPI: temp=43.5  chamber: temp=30.3 MCU: temp=30.3 heater_bed: target=0 temp=34.1 pwm=0.000 sysload=0.20 cputime=16.059 memavail=665504 print_time=3243.522 buffer_time=0.000 print_stall=0 extruder: target=210 temp=210.1 pwm=0.357
Stats 3247.1: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000011 mcu_task_stddev=0.000009 bytes_write=10440 bytes_read=39762 bytes_retransmit=0 bytes_invalid=0 send_seq=843 receive_seq=843 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997921 host: mcu_awake=0.001 mcu_task_avg=0.000015 mcu_task_stddev=0.000029 bytes_write=1884 bytes_read=7975 bytes_retransmit=0 bytes_invalid=0 send_seq=287 receive_seq=287 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999932 adj=50001531 expander: mcu_awake=0.002 mcu_task_avg=0.000015 mcu_task_stddev=0.000011 bytes_write=1804 bytes_read=15647 bytes_retransmit=9 bytes_invalid=0 send_seq=270 receive_seq=270 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=48019246 adj=48020480 tr: mcu_awake=0.006 mcu_task_avg=0.000006 mcu_task_stddev=0.000005 bytes_write=10863 bytes_read=26625 bytes_retransmit=9 bytes_invalid=0 send_seq=954 receive_seq=954 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12000395 adj=12000755 skr: temp=32.0 RPI: temp=43.5  chamber: temp=30.4 MCU: temp=30.3 heater_bed: target=0 temp=34.1 pwm=0.000 sysload=0.20 cputime=16.187 memavail=665504 print_time=3243.522 buffer_time=0.000 print_stall=0 extruder: target=210 temp=210.1 pwm=0.327
Stats 3248.1: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000011 mcu_task_stddev=0.000009 bytes_write=10736 bytes_read=40071 bytes_retransmit=0 bytes_invalid=0 send_seq=866 receive_seq=866 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997921 host: mcu_awake=0.001 mcu_task_avg=0.000015 mcu_task_stddev=0.000029 bytes_write=1890 bytes_read=7991 bytes_retransmit=0 bytes_invalid=0 send_seq=288 receive_seq=288 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999930 adj=50001532 expander: mcu_awake=0.002 mcu_task_avg=0.000015 mcu_task_stddev=0.000011 bytes_write=1810 bytes_read=15708 bytes_retransmit=9 bytes_invalid=0 send_seq=271 receive_seq=271 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=48019242 adj=48020442 tr: mcu_awake=0.006 mcu_task_avg=0.000006 mcu_task_stddev=0.000005 bytes_write=11321 bytes_read=27122 bytes_retransmit=9 bytes_invalid=0 send_seq=992 receive_seq=992 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=12000394 adj=12000751 skr: temp=32.1 RPI: temp=44.0  chamber: temp=30.3 MCU: temp=30.3 heater_bed: target=0 temp=34.0 pwm=0.000 sysload=0.26 cputime=16.317 memavail=665504 print_time=3243.522 buffer_time=0.000 print_stall=0 extruder: target=210 temp=210.2 pwm=0.323
Internal error on command:""T2""
Traceback (most recent call last):
  File ""/home/pi/klipper/klippy/gcode.py"", line 212, in _process_commands
    handler(gcmd)
  File ""/home/pi/klipper/klippy/extras/trad_rack.py"", line 404, in <lambda>
    lambda params: self.cmd_SELECT_TOOL(
  File ""/home/pi/klipper/klippy/extras/trad_rack.py"", line 1042, in cmd_SELECT_TOOL
    self.cmd_TR_LOAD_TOOLHEAD(
  File ""/home/pi/klipper/klippy/extras/trad_rack.py"", line 577, in cmd_TR_LOAD_TOOLHEAD
    self._load_toolhead(
  File ""/home/pi/klipper/klippy/extras/trad_rack.py"", line 1300, in _load_toolhead
    self._unload_toolhead()
  File ""/home/pi/klipper/klippy/extras/trad_rack.py"", line 1776, in _unload_toolhead
    hmove.homing_move(
  File ""/home/pi/klipper/klippy/extras/homing.py"", line 145, in homing_move
    self.toolhead.set_position(haltpos)
  File ""/home/pi/klipper/klippy/extras/trad_rack.py"", line 2419, in set_position
    super(TradRackToolHead, self).set_position(newpos, homing_axes)
  File ""/home/pi/klipper/klippy/toolhead.py"", line 467, in set_position
    self.kin.set_position(newpos, homing_axes)
  File ""/home/pi/klipper/klippy/extras/trad_rack.py"", line 2474, in set_position
    if i in homing_axes:
TypeError: 'in <string>' requires string as left operand, not int
Transition to shutdown state: Internal error on command:""T2""
Dumping gcode input 0 blocks
Dumping 20 requests for client 547915014048
Received 3077.534497: b'{""id"": 548115250960, ""method"": ""objects/subscribe"", ""params"": {""objects"": {""webhooks"": null, ""print_stats"": null, ""toolhead"": null, ""temperature_sensor skr"": null, ""temperature_sensor RPI"": null, ""temperature_sensor chamber"": null, ""temperature_sensor TradRack MCU"": null, ""heater_bed"": null, ""extruder"": null, ""gcode"": null, ""configfile"": null, ""mcu"": null, ""mcu host"": null, ""mcu expander"": null, ""mcu tr"": null, ""gcode_move"": null, ""save_variables"": null, ""idle_timeout"": null, ""servo nozzle_servo"": null, ""heaters"": null, ""temperature_host RPI"": null, ""virtual_sdcard"": null, ""pause_resume"": null, ""display_status"": null, ""gcode_macro CANCEL_PRINT"": null, ""gcode_macro PAUSE"": null, ""gcode_macro RESUME"": null, ""gcode_macro SET_PAUSE_NEXT_LAYER"": null, ""gcode_macro SET_PAUSE_AT_LAYER"": null, ""gcode_macro SET_PRINT_STATS_INFO"": null, ""gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL"": null, ""gcode_macro _CLIENT_EXTRUDE"": null, ""gcode_macro _CLIENT_RETRACT"": null, ""gcode_macro _CLIENT_LINEAR_MOVE"": null, ""gcode_macro TEST_SPEED"": null, ""gcode_macro PRINT_START"": null, ""gcode_macro NozzleClean"": null, ""gcode_macro SET_ACTIVE_SPOOL"": null, ""gcode_macro CLEAR_ACTIVE_SPOOL"": null, ""gcode_macro PRIME_LINE"": null, ""gcode_macro PRINT_END"": null, ""gcode_macro LOAD_FILAMENT"": null, ""gcode_macro UNLOAD_FILAMENT"": null, ""gcode_macro CONDITIONAL_HOMING"": null, ""gcode_macro PARKBC"": null, ""gcode_macro PARK_PRESENT"": null, ""gcode_macro DUMP_VARIABLES"": null, ""exclude_object"": null, ""gcode_macro _CLIENT_VARIABLE"": null, ""bed_screws"": null, ""neopixel Sides"": null, ""gcode_macro STATUS_HOMING"": null, ""gcode_macro STATUS_HEATING_BED"": null, ""gcode_macro STATUS_PRINTING"": null, ""gcode_macro STATUS_HEATING_NOZZLE"": null, ""gcode_macro STATUS_IDLE"": null, ""gcode_macro LED_RED_BLUE"": null, ""gcode_macro FULL_ON"": null, ""gcode_macro LED_CYAN"": null, ""gcode_macro LED_RED"": null, ""gcode_macro LED_25_PERCENT"": null, ""gcode_macro LED_CYAN_RED_SPLIT"": null, ""gcode_macro PartyTime"": null, ""heater_fan hotend_fan"": null, ""fan"": null, ""fan_generic GDStime"": null, ""output_pin mosfet2"": null, ""output_pin mosfet3"": null, ""neopixel expanderPixel"": null, ""stepper_enable"": null, ""tmc2209 stepper_x"": null, ""tmc2209 stepper_y"": null, ""tmc2209 stepper_z"": null, ""tmc2209 extruder"": null, ""gcode_macro BLOBIFIER"": null, ""gcode_macro BLOBIFIER_PARK"": null, ""gcode_macro BLOBIFIER_KICK"": null, ""gcode_macro TradRack_Home"": null, ""gcode_macro UNLOAD_TOOLHEAD"": null, ""gcode_macro LOAD_T0"": null, ""gcode_macro LOAD_T1"": null, ""gcode_macro LOAD_T2"": null, ""gcode_macro LOAD_T3"": null, ""gcode_macro LOAD_T4"": null, ""gcode_macro LOAD_T5"": null, ""gcode_macro LOAD_T6"": null, ""gcode_macro LOAD_T7"": null, ""gcode_macro LOAD_T8"": null, ""gcode_macro LOAD_T9"": null, ""gcode_macro LOAD_T10"": null, ""gcode_macro LOAD_T11"": null, ""gcode_macro LOAD_T12"": null, ""gcode_macro LOAD_T13"": null, ""gcode_macro LOAD_T14"": null, ""gcode_macro LOAD_T15"": null, ""gcode_macro LOAD_T16"": null, ""gcode_macro LOAD_T17"": null, ""gcode_macro LOAD_T18"": null, ""gcode_macro LOAD_T19"": null, ""gcode_macro LOAD_TOOLHEAD_LANE_0"": null, ""filament_motion_sensor tradmotionsensor"": null, ""query_endstops"": null, ""motion_report"": null, ""servo tr_servo"": null, ""trad_rack"": null, ""tmc2209 stepper_tr_selector"": null, ""tmc2209 stepper_tr_fil_driver"": null, ""gcode_macro ACTIVATE_EXTRUDER"": null, ""controller_fan TradRack"": null, ""gcode_macro TR_Variables"": null, ""gcode_macro Shape_Tip"": null, ""gcode_macro Set_Slicer_Unload_Preset"": null, ""gcode_macro Slicer_Unload"": null, ""gcode_macro _Wait_for_Toolchange_Temp"": null, ""gcode_macro Home_and_Wipe_Nozzle"": null, ""gcode_macro Save_Pressure_Advance"": null, ""gcode_macro Restore_Pressure_Advance"": null, ""gcode_macro HELLO_WORLD"": null, ""gcode_macro TEST_PARAM"": null, ""gcode_macro SHOW_TR_STATE"": null, ""gcode_macro TR_SENSOR_STATUS"": null, ""gcode_macro TEMP_SHIFT_CALIBRATION"": null, ""gcode_macro INIT_TRAD_RACK"": null, ""gcode_macro SELECT_AND_LOAD_FILAMENT"": null, ""gcode_macro TEMP_SHIFT_TEST"": null, ""gcode_macro RELAIS_ON"": null, ""gcode_macro RELAIS_OFF"": null, ""gcode_macro RELAIS_TOGGLE"": null, ""gcode_macro RELAIS_STATE"": null, ""gcode_macro RELAIS_QUERY"": null, ""gcode_macro MOVE_TO_CENTER_SAFE"": null, ""firmware_retraction"": null, ""system_stats"": null, ""manual_probe"": null}, ""response_template"": {""method"": ""process_status_update""}}}'
Received 3077.641023: b'{""id"": 548115250672, ""method"": ""objects/query"", ""params"": {""objects"": {""extruder"": [""can_extrude""]}}}'
Received 3094.520508: b'{""id"": 548115250816, ""method"": ""gcode/script"", ""params"": {""script"": ""T2""}}'
Received 3102.023914: b'{""id"": 548115250624, ""method"": ""objects/query"", ""params"": {""objects"": {""print_stats"": [""state"", ""message"", ""filename"", ""total_duration"", ""print_duration"", ""filament_used"", ""info""], ""display_status"": [""message"", ""progress""], ""toolhead"": [""position""], ""system_stats"": [""sysload"", ""memavail""], ""filament_motion_sensor tradmotionsensor"": [""filament_detected""], ""output_pin mosfet2"": [""value""], ""output_pin mosfet3"": [""value""], ""neopixel Sides"": [""color_data""], ""neopixel expanderPixel"": [""color_data""], ""status"": [""update_available""], ""heater_bed"": [""target"", ""temperature"", ""power""], ""extruder"": [""target"", ""temperature"", ""power""], ""mcu"": [""last_stats""], ""mcu host"": [""last_stats""], ""mcu expander"": [""last_stats""], ""mcu tr"": [""last_stats""], ""temperature_sensor skr"": [""temperature""], ""temperature_sensor RPI"": [""temperature""], ""heater_fan hotend_fan"": [""speed""], ""temperature_sensor chamber"": [""temperature""], ""fan_generic GDStime"": [""speed""], ""controller_fan TradRack"": [""speed""], ""temperature_sensor TradRack MCU"": [""temperature""], ""gcode_move"": [""speed_factor""], ""fan"": [""speed""], ""q"": [""u""]}}}'
Received 3102.158742: b'{""id"": 548115250192, ""method"": ""info"", ""params"": {}}'
Received 3102.167847: b'{""id"": 548115249040, ""method"": ""objects/query"", ""params"": {""objects"": {""print_stats"": [""state"", ""message"", ""filename"", ""total_duration"", ""print_duration"", ""filament_used"", ""info""], ""display_status"": [""message"", ""progress""], ""toolhead"": [""position""], ""system_stats"": [""sysload"", ""memavail""], ""filament_motion_sensor tradmotionsensor"": [""filament_detected""], ""output_pin mosfet2"": [""value""], ""output_pin mosfet3"": [""value""], ""neopixel Sides"": [""color_data""], ""neopixel expanderPixel"": [""color_data""], ""status"": [""update_available""], ""heater_bed"": [""target"", ""temperature"", ""power""], ""extruder"": [""target"", ""temperature"", ""power""], ""mcu"": [""last_stats""], ""mcu host"": [""last_stats""], ""mcu expander"": [""last_stats""], ""mcu tr"": [""last_stats""], ""temperature_sensor skr"": [""temperature""], ""temperature_sensor RPI"": [""temperature""], ""heater_fan hotend_fan"": [""speed""], ""temperature_sensor chamber"": [""temperature""], ""fan_generic GDStime"": [""speed""], ""controller_fan TradRack"": [""speed""], ""temperature_sensor TradRack MCU"": [""temperature""], ""gcode_move"": [""speed_factor""], ""fan"": [""speed""], ""q"": [""u""]}}}'
Received 3122.937552: b'{""id"": 548115250048, ""method"": ""gcode/script"", ""params"": {""script"": ""TR_LOCATE_SELECTOR""}}'
Received 3132.023113: b'{""id"": 548115250864, ""method"": ""objects/query"", ""params"": {""objects"": {""print_stats"": [""state"", ""message"", ""filename"", ""total_duration"", ""print_duration"", ""filament_used"", ""info""], ""display_status"": [""message"", ""progress""], ""toolhead"": [""position""], ""system_stats"": [""sysload"", ""memavail""], ""filament_motion_sensor tradmotionsensor"": [""filament_detected""], ""output_pin mosfet2"": [""value""], ""output_pin mosfet3"": [""value""], ""neopixel Sides"": [""color_data""], ""neopixel expanderPixel"": [""color_data""], ""status"": [""update_available""], ""heater_bed"": [""target"", ""temperature"", ""power""], ""extruder"": [""target"", ""temperature"", ""power""], ""mcu"": [""last_stats""], ""mcu host"": [""last_stats""], ""mcu expander"": [""last_stats""], ""mcu tr"": [""last_stats""], ""temperature_sensor skr"": [""temperature""], ""temperature_sensor RPI"": [""temperature""], ""heater_fan hotend_fan"": [""speed""], ""temperature_sensor chamber"": [""temperature""], ""fan_generic GDStime"": [""speed""], ""controller_fan TradRack"": [""speed""], ""temperature_sensor TradRack MCU"": [""temperature""], ""gcode_move"": [""speed_factor""], ""fan"": [""speed""], ""q"": [""u""]}}}'
Received 3132.257836: b'{""id"": 548115250576, ""method"": ""info"", ""params"": {}}'
Received 3132.268510: b'{""id"": 548115250048, ""method"": ""objects/query"", ""params"": {""objects"": {""print_stats"": [""state"", ""message"", ""filename"", ""total_duration"", ""print_duration"", ""filament_used"", ""info""], ""display_status"": [""message"", ""progress""], ""toolhead"": [""position""], ""system_stats"": [""sysload"", ""memavail""], ""filament_motion_sensor tradmotionsensor"": [""filament_detected""], ""output_pin mosfet2"": [""value""], ""output_pin mosfet3"": [""value""], ""neopixel Sides"": [""color_data""], ""neopixel expanderPixel"": [""color_data""], ""status"": [""update_available""], ""heater_bed"": [""target"", ""temperature"", ""power""], ""extruder"": [""target"", ""temperature"", ""power""], ""mcu"": [""last_stats""], ""mcu host"": [""last_stats""], ""mcu expander"": [""last_stats""], ""mcu tr"": [""last_stats""], ""temperature_sensor skr"": [""temperature""], ""temperature_sensor RPI"": [""temperature""], ""heater_fan hotend_fan"": [""speed""], ""temperature_sensor chamber"": [""temperature""], ""fan_generic GDStime"": [""speed""], ""controller_fan TradRack"": [""speed""], ""temperature_sensor TradRack MCU"": [""temperature""], ""gcode_move"": [""speed_factor""], ""fan"": [""speed""], ""q"": [""u""]}}}'
Received 3136.337315: b'{""id"": 548115249088, ""method"": ""gcode/script"", ""params"": {""script"": ""T2""}}'
Received 3162.024790: b'{""id"": 548115249424, ""method"": ""objects/query"", ""params"": {""objects"": {""print_stats"": [""state"", ""message"", ""filename"", ""total_duration"", ""print_duration"", ""filament_used"", ""info""], ""display_status"": [""message"", ""progress""], ""toolhead"": [""position""], ""system_stats"": [""sysload"", ""memavail""], ""filament_motion_sensor tradmotionsensor"": [""filament_detected""], ""output_pin mosfet2"": [""value""], ""output_pin mosfet3"": [""value""], ""neopixel Sides"": [""color_data""], ""neopixel expanderPixel"": [""color_data""], ""status"": [""update_available""], ""heater_bed"": [""target"", ""temperature"", ""power""], ""extruder"": [""target"", ""temperature"", ""power""], ""mcu"": [""last_stats""], ""mcu host"": [""last_stats""], ""mcu expander"": [""last_stats""], ""mcu tr"": [""last_stats""], ""temperature_sensor skr"": [""temperature""], ""temperature_sensor RPI"": [""temperature""], ""heater_fan hotend_fan"": [""speed""], ""temperature_sensor chamber"": [""temperature""], ""fan_generic GDStime"": [""speed""], ""controller_fan TradRack"": [""speed""], ""temperature_sensor TradRack MCU"": [""temperature""], ""gcode_move"": [""speed_factor""], ""fan"": [""speed""], ""q"": [""u""]}}}'
Received 3162.105634: b'{""id"": 548115250576, ""method"": ""info"", ""params"": {}}'
Received 3162.115726: b'{""id"": 548115248608, ""method"": ""objects/query"", ""params"": {""objects"": {""print_stats"": [""state"", ""message"", ""filename"", ""total_duration"", ""print_duration"", ""filament_used"", ""info""], ""display_status"": [""message"", ""progress""], ""toolhead"": [""position""], ""system_stats"": [""sysload"", ""memavail""], ""filament_motion_sensor tradmotionsensor"": [""filament_detected""], ""output_pin mosfet2"": [""value""], ""output_pin mosfet3"": [""value""], ""neopixel Sides"": [""color_data""], ""neopixel expanderPixel"": [""color_data""], ""status"": [""update_available""], ""heater_bed"": [""target"", ""temperature"", ""power""], ""extruder"": [""target"", ""temperature"", ""power""], ""mcu"": [""last_stats""], ""mcu host"": [""last_stats""], ""mcu expander"": [""last_stats""], ""mcu tr"": [""last_stats""], ""temperature_sensor skr"": [""temperature""], ""temperature_sensor RPI"": [""temperature""], ""heater_fan hotend_fan"": [""speed""], ""temperature_sensor chamber"": [""temperature""], ""fan_generic GDStime"": [""speed""], ""controller_fan TradRack"": [""speed""], ""temperature_sensor TradRack MCU"": [""temperature""], ""gcode_move"": [""speed_factor""], ""fan"": [""speed""], ""q"": [""u""]}}}'
Received 3192.023920: b'{""id"": 548115250912, ""method"": ""objects/query"", ""params"": {""objects"": {""print_stats"": [""state"", ""message"", ""filename"", ""total_duration"", ""print_duration"", ""filament_used"", ""info""], ""display_status"": [""message"", ""progress""], ""toolhead"": [""position""], ""system_stats"": [""sysload"", ""memavail""], ""filament_motion_sensor tradmotionsensor"": [""filament_detected""], ""output_pin mosfet2"": [""value""], ""output_pin mosfet3"": [""value""], ""neopixel Sides"": [""color_data""], ""neopixel expanderPixel"": [""color_data""], ""status"": [""update_available""], ""heater_bed"": [""target"", ""temperature"", ""power""], ""extruder"": [""target"", ""temperature"", ""power""], ""mcu"": [""last_stats""], ""mcu host"": [""last_stats""], ""mcu expander"": [""last_stats""], ""mcu tr"": [""last_stats""], ""temperature_sensor skr"": [""temperature""], ""temperature_sensor RPI"": [""temperature""], ""heater_fan hotend_fan"": [""speed""], ""temperature_sensor chamber"": [""temperature""], ""fan_generic GDStime"": [""speed""], ""controller_fan TradRack"": [""speed""], ""temperature_sensor TradRack MCU"": [""temperature""], ""gcode_move"": [""speed_factor""], ""fan"": [""speed""], ""q"": [""u""]}}}'
Received 3192.203740: b'{""id"": 548115250528, ""method"": ""info"", ""params"": {}}'
Received 3192.213844: b'{""id"": 548115248416, ""method"": ""objects/query"", ""params"": {""objects"": {""print_stats"": [""state"", ""message"", ""filename"", ""total_duration"", ""print_duration"", ""filament_used"", ""info""], ""display_status"": [""message"", ""progress""], ""toolhead"": [""position""], ""system_stats"": [""sysload"", ""memavail""], ""filament_motion_sensor tradmotionsensor"": [""filament_detected""], ""output_pin mosfet2"": [""value""], ""output_pin mosfet3"": [""value""], ""neopixel Sides"": [""color_data""], ""neopixel expanderPixel"": [""color_data""], ""status"": [""update_available""], ""heater_bed"": [""target"", ""temperature"", ""power""], ""extruder"": [""target"", ""temperature"", ""power""], ""mcu"": [""last_stats""], ""mcu host"": [""last_stats""], ""mcu expander"": [""last_stats""], ""mcu tr"": [""last_stats""], ""temperature_sensor skr"": [""temperature""], ""temperature_sensor RPI"": [""temperature""], ""heater_fan hotend_fan"": [""speed""], ""temperature_sensor chamber"": [""temperature""], ""fan_generic GDStime"": [""speed""], ""controller_fan TradRack"": [""speed""], ""temperature_sensor TradRack MCU"": [""temperature""], ""gcode_move"": [""speed_factor""], ""fan"": [""speed""], ""q"": [""u""]}}}'
Received 3222.027942: b'{""id"": 548115250048, ""method"": ""objects/query"", ""params"": {""objects"": {""print_stats"": [""state"", ""message"", ""filename"", ""total_duration"", ""print_duration"", ""filament_used"", ""info""], ""display_status"": [""message"", ""progress""], ""toolhead"": [""position""], ""system_stats"": [""sysload"", ""memavail""], ""filament_motion_sensor tradmotionsensor"": [""filament_detected""], ""output_pin mosfet2"": [""value""], ""output_pin mosfet3"": [""value""], ""neopixel Sides"": [""color_data""], ""neopixel expanderPixel"": [""color_data""], ""status"": [""update_available""], ""heater_bed"": [""target"", ""temperature"", ""power""], ""extruder"": [""target"", ""temperature"", ""power""], ""mcu"": [""last_stats""], ""mcu host"": [""last_stats""], ""mcu expander"": [""last_stats""], ""mcu tr"": [""last_stats""], ""temperature_sensor skr"": [""temperature""], ""temperature_sensor RPI"": [""temperature""], ""heater_fan hotend_fan"": [""speed""], ""temperature_sensor chamber"": [""temperature""], ""fan_generic GDStime"": [""speed""], ""controller_fan TradRack"": [""speed""], ""temperature_sensor TradRack MCU"": [""temperature""], ""gcode_move"": [""speed_factor""], ""fan"": [""speed""], ""q"": [""u""]}}}'
Received 3222.296015: b'{""id"": 548115248032, ""method"": ""info"", ""params"": {}}'
Received 3222.306501: b'{""id"": 548115248320, ""method"": ""objects/query"", ""params"": {""objects"": {""print_stats"": [""state"", ""message"", ""filename"", ""total_duration"", ""print_duration"", ""filament_used"", ""info""], ""display_status"": [""message"", ""progress""], ""toolhead"": [""position""], ""system_stats"": [""sysload"", ""memavail""], ""filament_motion_sensor tradmotionsensor"": [""filament_detected""], ""output_pin mosfet2"": [""value""], ""output_pin mosfet3"": [""value""], ""neopixel Sides"": [""color_data""], ""neopixel expanderPixel"": [""color_data""], ""status"": [""update_available""], ""heater_bed"": [""target"", ""temperature"", ""power""], ""extruder"": [""target"", ""temperature"", ""power""], ""mcu"": [""last_stats""], ""mcu host"": [""last_stats""], ""mcu expander"": [""last_stats""], ""mcu tr"": [""last_stats""], ""temperature_sensor skr"": [""temperature""], ""temperature_sensor RPI"": [""temperature""], ""heater_fan hotend_fan"": [""speed""], ""temperature_sensor chamber"": [""temperature""], ""fan_generic GDStime"": [""speed""], ""controller_fan TradRack"": [""speed""], ""temperature_sensor TradRack MCU"": [""temperature""], ""gcode_move"": [""speed_factor""], ""fan"": [""speed""], ""q"": [""u""]}}}'
gcode state: absolute_coord=True absolute_extrude=True base_position=[0.0, 0.0, 0.0, 0.0] last_position=[0.0, 0.0, 0.0, 0.0] homing_position=[0.0, 0.0, 0.0, 0.0] speed_factor=0.016666666666666666 extrude_factor=1.0 speed=25.0
Reactor garbage collection: (3238.482288868, 0.0, 0.0)
Internal error on command:""T2""
Once the underlying issue is corrected, use the
""FIRMWARE_RESTART"" command to reset the firmware, reload the
config, and restart the host software.
Printer is shutdown

Internal error on command:""T2""
Internal Error on WebRequest: gcode/script
Traceback (most recent call last):
  File ""/home/pi/klipper/klippy/webhooks.py"", line 268, in _process_request
    func(web_request)
  File ""/home/pi/klipper/klippy/webhooks.py"", line 448, in _handle_script
    self.gcode.run_script(web_request.get_str('script'))
  File ""/home/pi/klipper/klippy/gcode.py"", line 230, in run_script
    self._process_commands(script.split('\n'), need_ack=False)
  File ""/home/pi/klipper/klippy/gcode.py"", line 212, in _process_commands
    handler(gcmd)
  File ""/home/pi/klipper/klippy/extras/trad_rack.py"", line 404, in <lambda>
    lambda params: self.cmd_SELECT_TOOL(
  File ""/home/pi/klipper/klippy/extras/trad_rack.py"", line 1042, in cmd_SELECT_TOOL
    self.cmd_TR_LOAD_TOOLHEAD(
  File ""/home/pi/klipper/klippy/extras/trad_rack.py"", line 577, in cmd_TR_LOAD_TOOLHEAD
    self._load_toolhead(
  File ""/home/pi/klipper/klippy/extras/trad_rack.py"", line 1300, in _load_toolhead
    self._unload_toolhead()
  File ""/home/pi/klipper/klippy/extras/trad_rack.py"", line 1776, in _unload_toolhead
    hmove.homing_move(
  File ""/home/pi/klipper/klippy/extras/homing.py"", line 145, in homing_move
    self.toolhead.set_position(haltpos)
  File ""/home/pi/klipper/klippy/extras/trad_rack.py"", line 2419, in set_position
    super(TradRackToolHead, self).set_position(newpos, homing_axes)
  File ""/home/pi/klipper/klippy/toolhead.py"", line 467, in set_position
    self.kin.set_position(newpos, homing_axes)
  File ""/home/pi/klipper/klippy/extras/trad_rack.py"", line 2474, in set_position
    if i in homing_axes:
TypeError: 'in <string>' requires string as left operand, not int
MCU 'expander' shutdown: Command request
clocksync state: mcu_freq=48000000 last_clock=155801508624 clock_est=(3220.017 154433498765 48019240.225) min_half_rtt=0.000198 min_rtt_time=3237.674 time_avg=3220.017(819.235) clock_avg=154433498765.075(39339053688.820) pred_variance=100903975.427 clock_adj=(9.228 48020433.000)
Dumping serial stats: bytes_write=1822 bytes_read=15781 bytes_retransmit=9 bytes_invalid=0 send_seq=273 receive_seq=273 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0"
EDUgKY2b,Untitled,lacqueried,CSS,Saturday 17th of May 2025 08:21:48 PM CDT,"li.blurb {
  border: 1px solid;
border-color: BORDER HEX COLOR;
}
li.relationships a.tag {
  background: BG HEX COLOR;
  color: #ffffff; delete this line if you're using a light color or the ao3 defaults
}

li.blurb .tags {
  max-height: 10em;
  overflow-y: auto;
}

li {
  margin: 0px;
}

.tags li {
  padding: 0 .4em .4em 0;
}

.blurb .relationships {
  background: none;
  font-style: italic;
}

ul.tags {
  padding-right: .1em;
}

ul.tags li.warnings:first-child:before {
  color: #111;
  content: ""Archive Warnings: "";
  font-weight: bold;
}

ul.tags li.warnings,
ul.tags li.relationships,
ul.tags li.characters,
ul.tags li.freeforms {
  float: left !important;
}

li.warnings + li.characters:before {
  color: #111;
  content: ""Characters: "";
  font-weight: bold;
}

li.relationships + li.characters:before {
  color: #111;
  content: ""Characters: "";
  font-weight: bold;
}

li.warnings + li.relationships:before {
  color: #111;
  content: ""Relationships: "";
  font-weight: bold;
}

li.characters + li.freeforms:before {
  color: #111;
  content: ""Freeform: "";
  font-weight: bold;
}

li.warnings + li.relationships,
li.relationships + li.characters,
li.characters + li.freeforms,
li.warnings + li.characters,
li.warnings + li.freeforms,
li.relationships + li.freeforms {
  clear: left;
  padding: none;
}

.listbox .index {
  background: transparent;
  box-shadow: none;
}

.listbox,
fieldset fieldset.listbox {
  background: transparent;
  border: none;
  box-shadow: none;
}"
52QfmzT0,LagBot V1.1,Myros27,Lua,Saturday 17th of May 2025 08:08:37 PM CDT,"--[[
    LagBot Turtle Script v1.1
    Monitors server TPS via a direct redstone signal and provides alerts.
    Also reports the redstone signal (TPS value) on command.

    Changes:
    - (v1.0) Initial concept with peripheral assumption.
    - (v1.1) Adapted to read TPS from a direct redstone signal using the redstone API.
             Removed TPS_METER_PERIPHERAL_NAME.
             Added TPS_INPUT_SIDE configuration.
             Power reporting now reports the direct redstone (TPS) input.
]]

--#region Configuration
local CHAT_BOX_PERIPHERAL_NAME = ""chatBox""
local TPS_INPUT_SIDE = ""front"" -- CHANGE THIS to the side the turtle is facing the TPS meter block
                              -- Valid sides: ""top"", ""bottom"", ""left"", ""right"", ""front"", ""back""

local COMMAND_PREFIX = ""@lag""
local CHAT_BOT_NAME = ""LagBot""
local CHAT_BOT_BRACKETS = ""[]""
local CHAT_BOT_BRACKET_COLOR = ""&c"" -- Red color for brackets

-- TPS alert thresholds (triggers if Redstone Signal strength <= value)
-- Assuming 0-15 Redstone signal directly maps to a scaled TPS value.
-- For example, if 15 RS = 20 TPS, then 11 RS ~ 15 TPS, 7 RS ~ 10 TPS, 3 RS ~ 5 TPS.
-- You'll need to adjust these based on how your TPS meter block scales its output.
local DEFAULT_TPS_ALERT_THRESHOLDS = {3, 2, 1} -- Example: Alert if RS signal <= 3 (e.g. ~5 TPS)
local TPS_RECOVERY_THRESHOLD_RS = 7 -- Example: Recover if RS signal > 7 (e.g. >10 TPS)
                                     -- This is the REDSTONE SIGNAL value for recovery.

local TPS_CHECK_INTERVAL_SECONDS = 5
local TPS_REPORT_INTERVAL_SECONDS = 2 -- Renamed from POWER_REPORT for clarity

local DEBUG_MODE = false
local DEBUG_LOG_FILE = ""lagbot.log""
--#endregion

--#region Peripherals
local chatBox = peripheral.find(CHAT_BOX_PERIPHERAL_NAME)
-- No tpsMeter peripheral needed anymore
--#endregion

--#region Debug Logger
local function logDebug(message)
    if not DEBUG_MODE then return end
    local logMessage = string.format(""[%s] %s\n"", os.date(""%Y-%m-%d %H:%M:%S""), message)
    local file, err = fs.open(DEBUG_LOG_FILE, ""a"")
    if file then
        file.write(logMessage)
        file.close()
    else
        print(""DEBUG LOG ERROR: Could not open "" .. DEBUG_LOG_FILE .. "": "" .. (err or ""unknown error""))
    end
end
--#endregion

--#region State Variables
logDebug(""Script initializing state variables..."")
local currentTpsAlertThresholdsRS = {} -- Stores Redstone Signal thresholds
for _, v in ipairs(DEFAULT_TPS_ALERT_THRESHOLDS) do table.insert(currentTpsAlertThresholdsRS, v) end
table.sort(currentTpsAlertThresholdsRS, function(a,b) return a > b end) -- Ensure sorted descending

local isMuted = false
local lastNotifiedTpsLevelRS = 16 -- Stores the RS threshold that last triggered (initially > 15)
local tpsCheckTimerId = nil
local isReportingTps = false -- Renamed from isReportingPower
local tpsReportTimerId = nil -- Renamed from powerReportTimerId
logDebug(""State variables initialized. Muted: "" .. tostring(isMuted))
--#endregion

--#region Minecraft JSON Text Component Colors
local COLORS = {
    BLACK = ""black"", DARK_BLUE = ""dark_blue"", DARK_GREEN = ""dark_green"", DARK_AQUA = ""dark_aqua"",
    DARK_RED = ""dark_red"", DARK_PURPLE = ""dark_purple"", GOLD = ""gold"", GRAY = ""gray"",
    DARK_GRAY = ""dark_gray"", BLUE = ""blue"", GREEN = ""green"", AQUA = ""aqua"", RED = ""red"",
    LIGHT_PURPLE = ""light_purple"", YELLOW = ""yellow"", WHITE = ""white"", RESET = ""reset""
}
--#endregion

--#region Helper Functions
local function sendFormattedChat(messageComponents, recipientUsername)
    logDebug(""Attempting to send formatted chat. Recipient: "" .. (recipientUsername or ""ALL""))
    if not chatBox then
        local plainText = """"
        for _, comp in ipairs(messageComponents) do plainText = plainText .. (comp.text or """") end
        local noChatMsg = ""["" .. CHAT_BOT_NAME .. ""-NoChatBox"" .. (recipientUsername and ("" to "" .. recipientUsername) or """") .. ""] "" .. plainText
        print(noChatMsg)
        logDebug(""ChatBox not found. Printed to console: "" .. noChatMsg)
        return
    end

    local jsonMessage = textutils.serialiseJSON(messageComponents)
    if not jsonMessage then
        local fallbackMsg = ""Error: Could not serialize message for formatted sending.""
        logDebug(""JSON Serialization Error. Fallback: "" .. fallbackMsg .. "" Data: "" .. textutils.serialize(messageComponents, {max_depth=2}))
        if recipientUsername then
            chatBox.sendMessageToPlayer(fallbackMsg, recipientUsername, CHAT_BOT_NAME, CHAT_BOT_BRACKETS, CHAT_BOT_BRACKET_COLOR)
        else
            chatBox.sendMessage(fallbackMsg, CHAT_BOT_NAME, CHAT_BOT_BRACKETS, CHAT_BOT_BRACKET_COLOR)
        end
        return
    end

    local success, err
    if recipientUsername then
        success, err = chatBox.sendFormattedMessageToPlayer(jsonMessage, recipientUsername, CHAT_BOT_NAME, CHAT_BOT_BRACKETS, CHAT_BOT_BRACKET_COLOR)
    else
        success, err = chatBox.sendFormattedMessage(jsonMessage, CHAT_BOT_NAME, CHAT_BOT_BRACKETS, CHAT_BOT_BRACKET_COLOR)
    end

    if not success then
        logDebug(""Error sending formatted message: "" .. (err or ""Unknown error"") .. "". Attempting fallback to plain text."")
        local plainText = """"
        for _, comp in ipairs(messageComponents) do plainText = plainText .. (comp.text or """") end
        if recipientUsername then
            chatBox.sendMessageToPlayer(plainText, recipientUsername, CHAT_BOT_NAME, CHAT_BOT_BRACKETS, CHAT_BOT_BRACKET_COLOR)
        else
            chatBox.sendMessage(plainText, CHAT_BOT_NAME, CHAT_BOT_BRACKETS, CHAT_BOT_BRACKET_COLOR)
        end
    else
        logDebug(""Formatted message sent successfully."")
    end
    os.sleep(0.3)
end

local function announce(messageComponents)
    sendFormattedChat(messageComponents)
end

local function getCurrentRedstoneTps()
    local success, value = pcall(redstone.getAnalogInput, TPS_INPUT_SIDE)
    if success and type(value) == ""number"" then
        logDebug(""Read Redstone TPS from "" .. TPS_INPUT_SIDE .. "": "" .. value)
        return value
    else
        logDebug(""Failed to read Redstone TPS from "" .. TPS_INPUT_SIDE .. "". Error/Value: "" .. tostring(value))
        return nil
    end
end

local function checkTpsAndAlert()
    logDebug(""Checking Redstone TPS..."")
    local currentRSTps = getCurrentRedstoneTps()

    if currentRSTps == nil then
        logDebug(""Could not retrieve Redstone TPS for alert check."")
        return
    end

    -- Optional: Convert Redstone signal (0-15) to actual TPS (0-20) for display
    -- Example scaling: actualTPS = currentRSTps * (20/15)
    local displayTPS = string.format(""%d RS"", currentRSTps) -- Default to showing Redstone Signal
    -- If you want to show estimated actual TPS:
    -- local estimatedActualTps = currentRSTps * (20/15)
    -- displayTPS = string.format(""%.1f TPS (RS: %d)"", estimatedActualTps, currentRSTps)


    logDebug(string.format(""Current Redstone TPS: %d, Last Notified RS Level: %s, Muted: %s"", currentRSTps, tostring(lastNotifiedTpsLevelRS), tostring(isMuted)))

    if not isMuted then
        local alertTriggeredThisCheck = false
        for _, thresholdRS in ipairs(currentTpsAlertThresholdsRS) do -- Assumes sorted descending
            if currentRSTps <= thresholdRS then
                if thresholdRS < lastNotifiedTpsLevelRS then
                    announce({
                        {text=""WARNING: Server health indicator dropped to "", color=COLORS.YELLOW},
                        {text=displayTPS, color=COLORS.RED, bold=true},
                        {text="" (Alert Level: <="" .. thresholdRS .. "" RS)"", color=COLORS.YELLOW}
                    })
                    lastNotifiedTpsLevelRS = thresholdRS
                    alertTriggeredThisCheck = true
                    logDebug(""Alert sent for RS TPS <= "" .. thresholdRS .. "". New lastNotifiedTpsLevelRS: "" .. lastNotifiedTpsLevelRS)
                    break
                else
                    logDebug(""RS TPS is "" .. currentRSTps .. "", which is <= threshold "" .. thresholdRS .. "", but lastNotifiedTpsLevelRS ("" .. lastNotifiedTpsLevelRS .. "") is not higher. No new alert."")
                    break
                end
            end
        end

        if not alertTriggeredThisCheck and currentRSTps > TPS_RECOVERY_THRESHOLD_RS and lastNotifiedTpsLevelRS <= TPS_RECOVERY_THRESHOLD_RS then
            announce({
                {text=""RECOVERY: Server health indicator is now "", color=COLORS.GREEN},
                {text=displayTPS, color=COLORS.AQUA, bold=true},
                {text="" (Above recovery RS threshold of "" .. TPS_RECOVERY_THRESHOLD_RS .. "")"", color=COLORS.GREEN}
            })
            lastNotifiedTpsLevelRS = 16
            logDebug(""Recovery message sent. RS TPS: "" .. currentRSTps .. "". lastNotifiedTpsLevelRS reset."")
        end
    else
        logDebug(""Alerts are muted. No TPS alert action taken."")
    end
end

local function reportCurrentTps() -- Renamed from reportPowerLevel
    if not isReportingTps then return end
    logDebug(""Reporting current Redstone TPS..."")

    local currentRSTps = getCurrentRedstoneTps()
    if currentRSTps ~= nil then
        -- Optional: Convert to display actual TPS as well
        -- local estimatedActualTps = currentRSTps * (20/15)
        -- local displayTPS = string.format(""%.1f TPS (Redstone Signal: %d)"", estimatedActualTps, currentRSTps)
        local displayTPS = string.format(""%d"", currentRSTps) -- Default: just show RS value

        announce({{text=""Current Health Indicator (Redstone Signal): "", color=COLORS.GRAY}, {text=displayTPS, color=COLORS.YELLOW}})
    else
        logDebug(""Failed to get Redstone TPS for reporting."")
        announce({{text=""Error reading health indicator (Redstone Signal)."", color=COLORS.RED}})
        isReportingTps = false -- Stop trying
        if tpsReportTimerId then os.cancelTimer(tpsReportTimerId); tpsReportTimerId = nil; end
        return
    end

    if isReportingTps then
        tpsReportTimerId = os.startTimer(TPS_REPORT_INTERVAL_SECONDS)
        logDebug(""TPS report timer restarted. ID: "" .. (tpsReportTimerId or ""nil""))
    else
        logDebug(""TPS reporting was stopped, not restarting timer."")
    end
end

local function startTpsCheckTimer()
    if tpsCheckTimerId then os.cancelTimer(tpsCheckTimerId) end
    tpsCheckTimerId = os.startTimer(TPS_CHECK_INTERVAL_SECONDS)
    logDebug(""TPS check timer started/restarted. ID: "" .. tpsCheckTimerId)
end

local function startTpsReportTimer() -- Renamed from startPowerReportTimer
    if not isReportingTps then return end
    if tpsReportTimerId then os.cancelTimer(tpsReportTimerId) end
    reportCurrentTps() -- Report immediately, then start timer
end
--#endregion

--#region Command Handlers
local commandHandlers = {}

commandHandlers.help = function(username, _)
    logDebug(""Executing command: help, User: "" .. username)
    announce({{text = ""--- LagBot Commands ("".. COMMAND_PREFIX .. "") ---"", color = COLORS.GOLD, bold = true}})
    announce({{text = COMMAND_PREFIX .. "" help"", color = COLORS.AQUA}, {text = "" - Shows this help message."", color = COLORS.GRAY}})
    announce({{text = COMMAND_PREFIX .. "" status"", color = COLORS.AQUA}, {text = "" - Shows current TPS (Redstone Signal) and bot status."", color = COLORS.GRAY}})
    announce({{text = COMMAND_PREFIX .. "" mute"", color = COLORS.AQUA}, {text = "" - Toggles TPS alert announcements."", color = COLORS.GRAY}})
    announce({{text = COMMAND_PREFIX .. "" setalerts <rs1> [rs2...]"", color = COLORS.AQUA}, {text = "" - Sets Redstone Signal alert thresholds (0-15)."", color = COLORS.GRAY}})
    announce({{text = COMMAND_PREFIX .. "" startreport"", color = COLORS.AQUA}, {text = "" - Starts reporting Redstone Signal every "" ..TPS_REPORT_INTERVAL_SECONDS.. ""s."", color = COLORS.GRAY}})
    announce({{text = COMMAND_PREFIX .. "" stopreport"", color = COLORS.AQUA}, {text = "" - Stops reporting Redstone Signal."", color = COLORS.GRAY}})
end

commandHandlers.status = function(username, _)
    logDebug(""Executing command: status, User: "" .. username)
    local currentRSTps = getCurrentRedstoneTps()
    if currentRSTps ~= nil then
        -- Optional: Convert to display actual TPS as well
        -- local estimatedActualTps = currentRSTps * (20/15)
        -- local displayTPS = string.format(""%.1f TPS (Redstone Signal: %d)"", estimatedActualTps, currentRSTps)
        local displayTPS = string.format(""%d"", currentRSTps) -- Default: just show RS value
        announce({{text=""Current Health Indicator (Redstone Signal): "", color=COLORS.GREEN}, {text=displayTPS, color=COLORS.AQUA}})
    else
        announce({{text=""Could not retrieve current health indicator (Redstone Signal)."", color=COLORS.RED}})
    end
    announce({{text=""Alerts Muted: "", color=COLORS.GRAY}, {text=tostring(isMuted), color=(isMuted and COLORS.YELLOW or COLORS.GREEN)}})
    local thresholdsStr = """"
    for i, t in ipairs(currentTpsAlertThresholdsRS) do thresholdsStr = thresholdsStr .. t .. (i < #currentTpsAlertThresholdsRS and "", "" or """") end
    announce({{text=""Current Alert Thresholds (Redstone Signal <=): "", color=COLORS.GRAY}, {text=thresholdsStr, color=COLORS.YELLOW}})
    announce({{text=""Reporting Redstone Signal: "", color=COLORS.GRAY}, {text=tostring(isReportingTps), color=(isReportingTps and COLORS.GREEN or COLORS.YELLOW)}})
end

commandHandlers.mute = function(username, _)
    logDebug(""Executing command: mute, User: "" .. username)
    isMuted = not isMuted
    if isMuted then
        announce({{text=""Health alerts are now "", color=COLORS.YELLOW}, {text=""MUTED"", bold=true, color=COLORS.RED}, {text="" by "" .. username .. ""."", color=COLORS.YELLOW}})
    else
        announce({{text=""Health alerts are now "", color=COLORS.GREEN}, {text=""UNMUTED"", bold=true, color=COLORS.AQUA}, {text="" by "" .. username .. ""."", color=COLORS.GREEN}})
        lastNotifiedTpsLevelRS = 16
        checkTpsAndAlert()
    end
    logDebug(""Mute status changed to: "" .. tostring(isMuted))
end

commandHandlers.setalerts = function(username, args)
    logDebug(""Executing command: setalerts, User: "" .. username .. "", Args: "" .. textutils.serialize(args))
    if #args == 0 then
        announce({{text=""Usage: "" .. COMMAND_PREFIX .. "" setalerts <rs_value1> [rs_value2...]"", color=COLORS.YELLOW}})
        announce({{text=""Values are Redstone Signal strength (0-15). Example: "" .. COMMAND_PREFIX .. "" setalerts 3 2 1"", color=COLORS.YELLOW}})
        return
    end

    local newThresholdsRS = {}
    for _, arg_val in ipairs(args) do
        local num = tonumber(arg_val)
        if num and num >= 0 and num <= 15 then -- Redstone signal is 0-15
            table.insert(newThresholdsRS, math.floor(num))
        else
            announce({{text=""Invalid threshold value: '"", color=COLORS.RED}, {text=tostring(arg_val), color=COLORS.YELLOW}, {text=""'. Must be a number between 0 and 15."", color=COLORS.RED}})
            return
        end
    end

    if #newThresholdsRS == 0 then
        announce({{text=""No valid thresholds provided."", color=COLORS.RED}})
        return
    end

    table.sort(newThresholdsRS, function(a,b) return a > b end)
    currentTpsAlertThresholdsRS = newThresholdsRS
    lastNotifiedTpsLevelRS = 16

    local thresholdsStr = """"
    for i, t in ipairs(currentTpsAlertThresholdsRS) do thresholdsStr = thresholdsStr .. t .. (i < #currentTpsAlertThresholdsRS and "", "" or """") end

    announce({{text=""Redstone Signal alert thresholds set to: "", color=COLORS.GREEN}, {text=thresholdsStr, color=COLORS.AQUA}, {text="" by "" .. username .. ""."", color=COLORS.GREEN}})
    logDebug(""Alert thresholds updated: "" .. thresholdsStr)
    checkTpsAndAlert()
end

commandHandlers.startreport = function(username, _) -- Renamed from startpower
    logDebug(""Executing command: startreport, User: "" .. username)
    if isReportingTps then
        announce({{text=""Redstone Signal reporting is already active."", color=COLORS.YELLOW}})
        return
    end
    isReportingTps = true
    announce({{text=""Starting Redstone Signal reporting every ""..TPS_REPORT_INTERVAL_SECONDS..""s (requested by "" .. username .. "")."", color=COLORS.GREEN}})
    startTpsReportTimer()
end

commandHandlers.stopreport = function(username, _) -- Renamed from stoppower
    logDebug(""Executing command: stopreport, User: "" .. username)
    if not isReportingTps then
        announce({{text=""Redstone Signal reporting is not currently active."", color=COLORS.YELLOW}})
        return
    end
    isReportingTps = false
    if tpsReportTimerId then
        os.cancelTimer(tpsReportTimerId)
        tpsReportTimerId = nil
        logDebug(""TPS report timer cancelled."")
    end
    announce({{text=""Stopped Redstone Signal reporting (requested by "" .. username .. "")."", color=COLORS.GREEN}})
end
--#endregion

--#region Main Loop
local function run()
    term.clear(); term.setCursorPos(1,1)

    if DEBUG_MODE then
        local file, err = fs.open(DEBUG_LOG_FILE, ""w"")
        if file then
            file.write(string.format(""[%s] LagBot Script Initializing - DEBUG MODE ENABLED (v1.1)\n"", os.date(""%Y-%m-%d %H:%M:%S"")))
            file.write(""======================================================================\n"")
            file.close()
        else print(""DEBUG LOG ERROR: Could not clear/initialize "" .. DEBUG_LOG_FILE .. "": "" .. (err or ""unknown error"")) end
    end
    logDebug(""Script run() started."")

    if not chatBox then
        logDebug(""WARNING: Chat Box peripheral ('"" .. CHAT_BOX_PERIPHERAL_NAME .. ""') not found!"")
        print(""WARNING: Chat Box ('"" .. CHAT_BOX_PERIPHERAL_NAME .. ""') not found! Chat features disabled/printed to console."")
    end

    -- Validate TPS_INPUT_SIDE
    local validSides = redstone.getSides()
    local sideIsValid = false
    for _, side in ipairs(validSides) do if side == TPS_INPUT_SIDE then sideIsValid = true; break; end end
    if not sideIsValid then
        logDebug(""CRITICAL: Invalid TPS_INPUT_SIDE ('"" .. TPS_INPUT_SIDE .. ""') configured! Core functionality disabled."")
        print(""CRITICAL: Invalid TPS_INPUT_SIDE ('"" .. TPS_INPUT_SIDE .. ""')! Check config. LagBot functionality disabled."")
        if chatBox then announce({{text=CHAT_BOT_NAME .. "" starting with CRITICAL ERROR: Invalid TPS_INPUT_SIDE!"", color=COLORS.RED, bold=true}}) end
        return -- Stop script if side is invalid, as it can't function
    end
    logDebug(""TPS_INPUT_SIDE ('"" .. TPS_INPUT_SIDE .. ""') is valid."")


    logDebug(""Announcing online status."")
    print(CHAT_BOT_NAME .. "" script started. Type '"" .. COMMAND_PREFIX .. "" help' in chat or '@all'."")
    if chatBox then
        announce({{text = CHAT_BOT_NAME .. "" online."", color = COLORS.GREEN, bold = true}, {text = "" Monitoring server health via Redstone Signal on side: "" .. TPS_INPUT_SIDE, color = COLORS.GRAY}})
        announce({{text = ""Type '"", color = COLORS.GRAY}, {text = COMMAND_PREFIX .. "" help"", color = COLORS.AQUA}, {text = ""' or '@all' for commands."", color = COLORS.GRAY}})
    end

    checkTpsAndAlert()
    startTpsCheckTimer()

    while true do
        local eventData = {os.pullEvent()}
        local eventType = eventData[1]

        -- Optimized: If it's a redstone event and it's for our TPS_INPUT_SIDE, check TPS immediately.
        if eventType == ""redstone"" then
            logDebug(""Redstone event received."")
            -- The redstone event itself doesn't give the side or new value in CC:Tweaked by default.
            -- We just use it as a trigger to re-check.
            checkTpsAndAlert()
        end

        logDebug(""Event pulled: "" .. eventType .. "" - Data: "" .. textutils.serialize(eventData, {compact = true, max_depth = 2}))

        if eventType == ""chat"" then
            local eUsername, eMessage, _, eIsHidden = eventData[2], eventData[3], eventData[4], eventData[5]
            if not eIsHidden and eMessage then
                if string.lower(eMessage) == ""@all"" then
                    logDebug(""@all command received from "" .. eUsername)
                    announce({{text = ""Use '"", color = COLORS.GREEN}, {text = COMMAND_PREFIX .. "" help"", color = COLORS.AQUA}, {text = ""' to see what this health monitor can do."", color = COLORS.GREEN}})
                elseif string.sub(eMessage, 1, #COMMAND_PREFIX) == COMMAND_PREFIX then
                    logDebug(""Chat command received from "" .. eUsername .. "": "" .. eMessage)
                    local parts = {}; for part in string.gmatch(eMessage, ""[^%s]+"") do table.insert(parts, part) end
                    local commandName = """"; if parts[2] then commandName = string.lower(parts[2]) end
                    local cmdArgs = {}; for i = 3, #parts do table.insert(cmdArgs, parts[i]) end
                    logDebug(""Parsed command: '"" .. commandName .. ""', Args: "" .. textutils.serialize(cmdArgs))

                    if commandHandlers[commandName] then
                        local success, err = pcall(commandHandlers[commandName], eUsername, cmdArgs)
                        if not success then
                            logDebug(""Error executing command '"" .. commandName .. ""': "" .. tostring(err))
                            announce({{text = ""Command execution failed: "", color = COLORS.RED}, {text = commandName, color = COLORS.YELLOW}})
                        end
                    elseif commandName ~= """" then
                        announce({{text = ""Unknown command: '"", color = COLORS.RED}, {text = commandName, color = COLORS.YELLOW},
                                  {text = ""'. Consult '"", color = COLORS.RED}, {text = COMMAND_PREFIX .. "" help"", color = COLORS.AQUA}, {text = ""'."", color = COLORS.RED}})
                    end
                end
            end
        elseif eventType == ""timer"" then
            local timerId = eventData[2]
            logDebug(""Timer event received for ID: "" .. timerId)
            if timerId == tpsCheckTimerId then
                logDebug(""TPS check timer triggered."")
                checkTpsAndAlert(); startTpsCheckTimer()
            elseif timerId == tpsReportTimerId then
                logDebug(""TPS report timer triggered."")
                reportCurrentTps()
            else
                logDebug(""Unknown timer ID: "" .. timerId)
            end
        elseif eventType == ""terminate"" then
            logDebug(""Terminate event received. System halt."")
            if tpsCheckTimerId then os.cancelTimer(tpsCheckTimerId); logDebug(""TPS check timer cancelled."") end
            if tpsReportTimerId then os.cancelTimer(tpsReportTimerId); logDebug(""TPS report timer cancelled."") end
            if chatBox then announce({{text = CHAT_BOT_NAME .. "" is going offline."", color = COLORS.YELLOW, bold = true}}) end
            logDebug(""Script terminated.""); print(CHAT_BOT_NAME .. "" terminated."")
            return
        end
    end
end

run()
--#endregion"
6Dpy7748,JokeBot V1.2,Myros27,Lua,Saturday 17th of May 2025 07:26:53 PM CDT,"--[[
    JokeBot Turtle Script v1.2
    Tells jokes from JokeAPI and can tell them at an interval.
    Changes:
    - (v1.0) Initial release.
    - (v1.1) Removed joke announcement prefixes.
             Changed joke text color to GOLD.
             Added response to ""@all"" chat command.
    - (v1.2) Added random API endpoint selection from a list.
             Added support for two-part jokes with different colors for setup (Aqua) and delivery (Gold).
             Ensured API URLs request single or twopart jokes.
]]

--#region Configuration
local CHAT_BOX_PERIPHERAL_NAME = ""chatBox"" -- Set to your chat box peripheral name if different

local COMMAND_PREFIX = ""@joke""
local CHAT_BOT_NAME = ""JokeBot""
local CHAT_BOT_BRACKETS = ""[]""
local CHAT_BOT_BRACKET_COLOR = ""&e"" -- Yellow color for the brackets

-- List of API URLs to randomly choose from
local JOKE_API_URLS = {
    ""https://v2.jokeapi.dev/joke/Programming,Dark?type=single,twopart"",
    ""https://v2.jokeapi.dev/joke/Any?type=single,twopart"",
    ""https://v2.jokeapi.dev/joke/Programming,Dark?lang=de&type=single,twopart"",
    ""https://v2.jokeapi.dev/joke/Any?lang=de&type=single,twopart"",
    ""https://v2.jokeapi.dev/joke/Miscellaneous,Pun?type=single,twopart"" -- Added another option for variety
}

local DEFAULT_JOKE_INTERVAL_MINUTES = 0 -- 0 means no automatic jokes

local DEBUG_MODE = false -- Set to true for detailed logging
local DEBUG_LOG_FILE = ""jokebot.log""
--#endregion

--#region Peripherals
local chatBox = peripheral.find(CHAT_BOX_PERIPHERAL_NAME)
--#endregion

--#region Debug Logger
local function logDebug(message)
    if not DEBUG_MODE then return end
    local logMessage = string.format(""[%s] %s\n"", os.date(""%Y-%m-%d %H:%M:%S""), message)
    local file, err = fs.open(DEBUG_LOG_FILE, ""a"")
    if file then
        file.write(logMessage)
        file.close()
    else
        print(""DEBUG LOG ERROR: Could not open "" .. DEBUG_LOG_FILE .. "": "" .. (err or ""unknown error""))
    end
end
--#endregion

--#region State Variables
logDebug(""Script initializing state variables..."")
local jokeIntervalMinutes = DEFAULT_JOKE_INTERVAL_MINUTES
local jokeIntervalTimerId = nil
logDebug(""State variables initialized. Interval: "" .. jokeIntervalMinutes .. "" min."")
--#endregion

--#region Minecraft JSON Text Component Colors
local COLORS = {
    BLACK = ""black"", DARK_BLUE = ""dark_blue"", DARK_GREEN = ""dark_green"", DARK_AQUA = ""dark_aqua"",
    DARK_RED = ""dark_red"", DARK_PURPLE = ""dark_purple"", GOLD = ""gold"", GRAY = ""gray"",
    DARK_GRAY = ""dark_gray"", BLUE = ""blue"", GREEN = ""green"", AQUA = ""aqua"", RED = ""red"",
    LIGHT_PURPLE = ""light_purple"", YELLOW = ""yellow"", WHITE = ""white"", RESET = ""reset""
}
--#endregion

--#region Helper Functions
local function sendFormattedChat(messageComponents, recipientUsername)
    logDebug(""Attempting to send formatted chat. Recipient: "" .. (recipientUsername or ""ALL""))
    if not chatBox then
        local plainText = """"
        for _, comp in ipairs(messageComponents) do plainText = plainText .. (comp.text or """") end
        local noChatMsg = ""["" .. CHAT_BOT_NAME .. ""-NoChatBox"" .. (recipientUsername and ("" to "" .. recipientUsername) or """") .. ""] "" .. plainText
        print(noChatMsg)
        logDebug(""ChatBox not found. Printed to console: "" .. noChatMsg)
        return
    end

    local jsonMessage = textutils.serialiseJSON(messageComponents)
    if not jsonMessage then
        local fallbackMsg = ""Error: Could not serialize message for formatted sending.""
        logDebug(""JSON Serialization Error. Fallback: "" .. fallbackMsg .. "" Data: "" .. textutils.serialize(messageComponents, {max_depth=2}))
        if recipientUsername then
            chatBox.sendMessageToPlayer(fallbackMsg, recipientUsername, CHAT_BOT_NAME, CHAT_BOT_BRACKETS, CHAT_BOT_BRACKET_COLOR)
        else
            chatBox.sendMessage(fallbackMsg, CHAT_BOT_NAME, CHAT_BOT_BRACKETS, CHAT_BOT_BRACKET_COLOR)
        end
        return
    end

    local success, err
    if recipientUsername then
        success, err = chatBox.sendFormattedMessageToPlayer(jsonMessage, recipientUsername, CHAT_BOT_NAME, CHAT_BOT_BRACKETS, CHAT_BOT_BRACKET_COLOR)
    else
        success, err = chatBox.sendFormattedMessage(jsonMessage, CHAT_BOT_NAME, CHAT_BOT_BRACKETS, CHAT_BOT_BRACKET_COLOR)
    end

    if not success then
        logDebug(""Error sending formatted message: "" .. (err or ""Unknown error"") .. "". Attempting fallback to plain text."")
        local plainText = """"
        for _, comp in ipairs(messageComponents) do plainText = plainText .. (comp.text or """") end
        if recipientUsername then
            chatBox.sendMessageToPlayer(plainText, recipientUsername, CHAT_BOT_NAME, CHAT_BOT_BRACKETS, CHAT_BOT_BRACKET_COLOR)
        else
            chatBox.sendMessage(plainText, CHAT_BOT_NAME, CHAT_BOT_BRACKETS, CHAT_BOT_BRACKET_COLOR)
        end
    else
        logDebug(""Formatted message sent successfully."")
    end
    os.sleep(0.3)
end

local function announce(messageComponents)
    sendFormattedChat(messageComponents)
end

local function announceJokePart(textPart, color)
    local lines = {}
    for line in string.gmatch(textPart, ""[^\r\n]+"") do
        table.insert(lines, line)
    end
    if #lines == 0 and textPart ~= """" then table.insert(lines, textPart) end

    for i, lineText in ipairs(lines) do
        announce({{text = lineText, color = color}})
        if i < #lines then
            os.sleep(0.7) -- Delay between lines of the same part
        end
    end
end

local function fetchAndTellJoke(requestingUsername)
    logDebug(""Fetching a joke. Requested by: "" .. (requestingUsername or ""Timer""))
    if not http then
        logDebug(""HTTP API not available, cannot fetch joke."")
        announce({{text = ""Cannot fetch joke: HTTP API is not available on this system."", color = COLORS.RED}})
        return
    end

    if #JOKE_API_URLS == 0 then
        logDebug(""JOKE_API_URLS list is empty."")
        announce({{text = ""No Joke API URLs configured. Cannot fetch joke."", color = COLORS.RED}})
        return
    end

    math.randomseed(os.epoch(""utc"") + os.clock()*1000) -- Reseed for better randomness
    local selectedApiUrl = JOKE_API_URLS[math.random(1, #JOKE_API_URLS)]
    logDebug(""Selected API URL: "" .. selectedApiUrl)

    local response, err, handle = http.get(selectedApiUrl)
    if not response then
        logDebug(""Failed to fetch joke from API. URL: "" .. selectedApiUrl .. "" Error: "" .. (err or ""Unknown HTTP error""))
        announce({{text = ""Sorry, I couldn't fetch a joke. Error: "", color = COLORS.RED}, {text = tostring(err or ""Is http enabled?""), color = COLORS.YELLOW}})
        return
    end

    local responseBody = response.readAll()
    response.close()
    if handle then pcall(function() handle.close() end) end

    local success, jokeData = pcall(textutils.unserialiseJSON, responseBody)
    if not success or type(jokeData) ~= ""table"" then
        logDebug(""Failed to parse joke JSON. Error: "" .. tostring(jokeData or ""Invalid JSON"") .. "". Body was: "" .. tostring(responseBody))
        announce({{text = ""Sorry, I received a malformed joke. (Could not parse API response)."", color = COLORS.YELLOW}})
        return
    end

    if jokeData.error then
        logDebug(""Joke API returned an error. Message: "" .. (jokeData.message or ""Unknown API error""))
        announce({{text = ""The joke API said: \"""", color = COLORS.RED}, {text = tostring(jokeData.message or ""Something went wrong.""), color = COLORS.YELLOW}, {text=""\"""", color = COLORS.RED}})
        return
    end

    if jokeData.type == ""single"" and type(jokeData.joke) == ""string"" then
        logDebug(""Telling single-part joke. Lang: "" .. (jokeData.lang or ""N/A""))
        announceJokePart(jokeData.joke, COLORS.GOLD)
    elseif jokeData.type == ""twopart"" and type(jokeData.setup) == ""string"" and type(jokeData.delivery) == ""string"" then
        logDebug(""Telling two-part joke. Lang: "" .. (jokeData.lang or ""N/A""))
        announceJokePart(jokeData.setup, COLORS.AQUA) -- Setup in Aqua
        os.sleep(1.2) -- Pause for comedic timing before delivery
        announceJokePart(jokeData.delivery, COLORS.GOLD) -- Delivery in Gold (orangey)
    else
        logDebug(""Joke API returned an unexpected format or missing fields. Data: "" .. textutils.serialize(jokeData))
        announce({{text = ""Sorry, the joke I got was in a weird format or incomplete. Try again?"", color = COLORS.YELLOW}})
    end
end

local function startJokeIntervalTimer()
    if jokeIntervalTimerId then
        os.cancelTimer(jokeIntervalTimerId)
        logDebug(""Cancelled existing joke interval timer ID: "" .. jokeIntervalTimerId)
        jokeIntervalTimerId = nil
    end
    if jokeIntervalMinutes > 0 then
        jokeIntervalTimerId = os.startTimer(jokeIntervalMinutes * 60)
        logDebug(""Joke interval timer started. Duration: "" .. jokeIntervalMinutes .. "" min. New Timer ID: "" .. jokeIntervalTimerId)
    else
        logDebug(""Joke interval is 0, timer not started."")
    end
end
--#endregion

--#region Command Handlers
local commandHandlers = {}

commandHandlers.help = function(username, _)
    logDebug(""Executing command: help, User: "" .. username)
    announce({{text = ""--- JokeBot Commands ("".. COMMAND_PREFIX .. "") ---"", color = COLORS.GOLD, bold = true}})
    announce({{text = COMMAND_PREFIX .. "" help"", color = COLORS.AQUA}, {text = "" - Shows this help message."", color = COLORS.GRAY}})
    announce({{text = COMMAND_PREFIX .. "" tell"", color = COLORS.AQUA}, {text = "" - Tells you a random joke."", color = COLORS.GRAY}})
    announce({{text = COMMAND_PREFIX .. "" interval <minutes>"", color = COLORS.AQUA}, {text = "" - Sets automatic joke interval."", color = COLORS.GRAY}})
    announce({{text = ""  (Use 0 for minutes to disable automatic jokes)"", color = COLORS.DARK_GRAY}})
end

commandHandlers.tell = function(username, _)
    logDebug(""Executing command: tell, User: "" .. username)
    fetchAndTellJoke(username)
end

commandHandlers.interval = function(username, args)
    logDebug(""Executing command: interval, User: "" .. username .. "", Args: "" .. textutils.serialize(args))
    if #args < 1 then
        announce({{text = ""Usage: "", color = COLORS.YELLOW}, {text = COMMAND_PREFIX .. "" interval <minutes>"", color = COLORS.AQUA}})
        announce({{text = ""Current interval: "", color = COLORS.YELLOW}, {text = jokeIntervalMinutes .. "" minutes."", color = COLORS.WHITE}})
        return
    end

    local minutes = tonumber(args[1])
    if not minutes or minutes < 0 or math.floor(minutes) ~= minutes then
        announce({{text = ""Invalid number of minutes. Must be a whole number (0 or greater)."", color = COLORS.RED}})
        return
    end

    jokeIntervalMinutes = minutes
    if minutes > 0 then
        announce({{text = ""Okay, "" .. username .. ""! I'll tell a joke every "", color = COLORS.GREEN}, {text = minutes .. "" minute(s)."", color = COLORS.AQUA}})
    else
        announce({{text = ""Okay, "" .. username .. ""! Automatic jokes disabled."", color = COLORS.GREEN}})
    end
    logDebug(""Joke interval set to "" .. jokeIntervalMinutes .. "" minutes by "" .. username)
    startJokeIntervalTimer()
end
--#endregion

--#region Main Loop
local function run()
    term.clear()
    term.setCursorPos(1, 1)

    if DEBUG_MODE then
        local file, err = fs.open(DEBUG_LOG_FILE, ""w"")
        if file then
            file.write(string.format(""[%s] JokeBot Script Initializing - DEBUG MODE ENABLED (v1.2)\n"", os.date(""%Y-%m-%d %H:%M:%S"")))
            file.write(""======================================================================\n"")
            file.close()
        else
            print(""DEBUG LOG ERROR: Could not clear/initialize "" .. DEBUG_LOG_FILE .. "": "" .. (err or ""unknown error""))
        end
    end
    logDebug(""Script run() started."")

    if not chatBox then
        logDebug(""WARNING: Chat Box peripheral ('"" .. CHAT_BOX_PERIPHERAL_NAME .. ""') not found! Chat features will be printed to console only."")
        print(""WARNING: Chat Box ('"" .. CHAT_BOX_PERIPHERAL_NAME .. ""') not found! Chat features disabled/printed to console."")
    end

    if not http then
        logDebug(""FATAL: HTTP API not available! Joke fetching will not work."")
        print(""FATAL: HTTP API is not available on this ComputerCraft system. JokeBot cannot fetch jokes."")
        if chatBox then
             announce({{text = ""JokeBot Error: "", color = COLORS.RED, bold=true}, {text=""HTTP API is not available. Cannot fetch jokes."", color=COLORS.YELLOW}})
        end
    end

    logDebug(""Announcing online status."")
    print(""JokeBot script started. Type '"" .. COMMAND_PREFIX .. "" help' in chat or '@all'."")
    if chatBox then
        announce({{text = CHAT_BOT_NAME .. "" online!"", color = COLORS.GREEN, bold = true}, {text = "" Ready to tell some jokes from various sources."", color = COLORS.GRAY}})
        announce({{text = ""Type '"", color = COLORS.GRAY}, {text = COMMAND_PREFIX .. "" help"", color = COLORS.AQUA}, {text = ""' or '@all' for commands."", color = COLORS.GRAY}})
    end

    startJokeIntervalTimer()

    while true do
        local eventData = {os.pullEvent()}
        local eventType = eventData[1]
        logDebug(""Event received: "" .. eventType .. "" - Data: "" .. textutils.serialize(eventData, {compact = true, max_depth = 2}))

        if eventType == ""chat"" then
            local eUsername, eMessage, _, eIsHidden = eventData[2], eventData[3], eventData[4], eventData[5]
            if not eIsHidden and eMessage then
                if string.lower(eMessage) == ""@all"" then
                    logDebug(""@all command received from "" .. eUsername)
                    announce({{text = ""Use '"", color = COLORS.GREEN}, {text = COMMAND_PREFIX .. "" help"", color = COLORS.AQUA}, {text = ""' for my commands."", color = COLORS.GREEN}})
                elseif string.sub(eMessage, 1, #COMMAND_PREFIX) == COMMAND_PREFIX then
                    logDebug(""Chat command received from "" .. eUsername .. "": "" .. eMessage)
                    local parts = {}
                    for part in string.gmatch(eMessage, ""[^%s]+"") do
                        table.insert(parts, part)
                    end

                    local commandName = """"
                    if parts[2] then commandName = string.lower(parts[2]) end
                    local cmdArgs = {}
                    for i = 3, #parts do table.insert(cmdArgs, parts[i]) end

                    logDebug(""Parsed command: '"" .. commandName .. ""', Args: "" .. textutils.serialize(cmdArgs))

                    if commandHandlers[commandName] then
                        local success, err = pcall(commandHandlers[commandName], eUsername, cmdArgs)
                        if not success then
                            logDebug(""Error executing command '"" .. commandName .. ""': "" .. tostring(err))
                            announce({{text = ""Oops! Something went wrong while processing your command: "", color = COLORS.RED}, {text = commandName, color = COLORS.YELLOW}})
                        end
                    elseif commandName ~= """" then
                        announce({{text = ""Unknown command: '"", color = COLORS.RED}, {text = commandName, color = COLORS.YELLOW},
                                  {text = ""'. Try '"", color = COLORS.RED}, {text = COMMAND_PREFIX .. "" help"", color = COLORS.AQUA}, {text = ""'."", color = COLORS.RED}})
                    end
                end
            end
        elseif eventType == ""timer"" then
            local timerId = eventData[2]
            logDebug(""Timer event received for ID: "" .. timerId)
            if timerId == jokeIntervalTimerId then
                logDebug(""Joke interval timer triggered."")
                fetchAndTellJoke(nil)
                if jokeIntervalMinutes > 0 then
                    startJokeIntervalTimer()
                else
                    jokeIntervalTimerId = nil
                    logDebug(""Joke interval was 0 after joke, timer stopped."")
                end
            else
                logDebug(""Unknown timer ID: "" .. timerId)
            end
        elseif eventType == ""terminate"" then
            logDebug(""Terminate event received. Shutting down."")
            if jokeIntervalTimerId then
                os.cancelTimer(jokeIntervalTimerId)
                logDebug(""Joke interval timer cancelled."")
            end
            if chatBox then
                announce({{text = CHAT_BOT_NAME .. "" shutting down..."", color = COLORS.YELLOW, bold = true}})
            end
            logDebug(""Script terminated."")
            print(CHAT_BOT_NAME .. "" terminated."")
            return
        end
    end
end

run()
--#endregion"
bTKVKPv4,2025-05-17_stats.json,rdp_snitch,JSON,Saturday 17th of May 2025 07:18:25 PM CDT,"{
  ""ip"": {
    ""128.199.168.88"": 3219,
    ""216.122.187.31"": 72,
    ""193.23.199.156"": 3,
    ""198.235.24.214"": 9,
    ""162.243.90.201"": 9,
    ""185.196.220.41"": 9,
    ""122.165.219.142"": 3,
    ""88.214.25.125"": 6,
    ""194.165.16.163"": 6,
    ""205.210.31.108"": 9,
    ""92.63.197.197"": 12,
    ""45.227.253.51"": 12,
    ""71.6.134.230"": 30,
    ""80.94.95.203"": 6,
    ""147.185.132.165"": 9,
    ""78.142.18.92"": 3,
    ""172.111.244.66"": 120,
    ""209.38.42.204"": 18,
    ""104.130.13.117"": 102,
    ""143.198.221.164"": 90,
    ""143.198.129.146"": 69,
    ""143.198.126.238"": 66,
    ""157.245.159.1"": 30,
    ""157.245.150.219"": 45,
    ""167.172.131.118"": 60,
    ""198.235.24.169"": 9
  },
  ""asn"": {
    ""AS14061"": 3606,
    ""AS14315"": 72,
    ""AS210457"": 3,
    ""AS396982"": 36,
    ""AS208046"": 12,
    ""AS24560"": 3,
    ""AS35042"": 6,
    ""AS48721"": 6,
    ""AS210848"": 12,
    ""AS209272"": 12,
    ""AS10439"": 30,
    ""AS204428"": 6,
    ""AS9009"": 120,
    ""AS27357"": 102
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 3606,
    ""Internet Utilities NA LLC"": 72,
    ""Denis Pyatkov"": 3,
    ""Google LLC"": 36,
    ""ColocationX Ltd."": 12,
    ""BHARTI"": 3,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Flyservers S.A."": 6,
    ""Telkom Internet LTD"": 12,
    ""Flyservers S.A"": 12,
    ""CariNet, Inc."": 30,
    ""SS-Net"": 6,
    ""Secure Internet LLC"": 120,
    ""Rackspace Hosting"": 102
  },
  ""org"": {
    ""DigitalOcean, LLC"": 3597,
    ""Unknown"": 72,
    ""Kyonix Hosting Network"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Digital Ocean"": 9,
    ""ColocationX Ltd"": 12,
    ""ABTS Tamilnadu"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""Flyservers S.A"": 6,
    ""Korotkij Denis Aleksandrovich"": 12,
    ""Nextcloud S.A"": 12,
    ""CariNet, Inc."": 30,
    ""Unmanaged LTD"": 6,
    ""Internet Security - BE"": 120,
    ""Cloud Servers Cell 0001-0003 IAD3"": 102
  },
  ""regionName"": {
    ""South West"": 3384,
    ""Karnataka"": 72,
    ""Hesse"": 3,
    ""California"": 105,
    ""New Jersey"": 135,
    ""Virginia"": 9,
    ""Tamil Nadu"": 3,
    ""Kowloon City"": 6,
    ""Kaunas"": 6,
    ""North Holland"": 33,
    ""La Paz Department"": 12,
    ""Nevada"": 30,
    ""Sofia-Capital"": 6,
    ""Brussels Capital"": 120,
    ""District of Columbia"": 102
  },
  ""country"": {
    ""Singapore"": 3384,
    ""India"": 75,
    ""Germany"": 3,
    ""United States"": 381,
    ""Hong Kong"": 6,
    ""Lithuania"": 6,
    ""The Netherlands"": 33,
    ""Bolivia"": 12,
    ""Bulgaria"": 6,
    ""Belgium"": 120
  },
  ""account"": {
    ""hello"": 3906,
    ""jZzdGVtGJ"": 3,
    ""jypCSt"": 3,
    ""RIPnCE"": 3,
    ""Domain"": 9,
    ""Test"": 24,
    ""nyAUvqWPk"": 3,
    ""NKiPvE"": 3,
    ""EjKZQZ"": 3,
    ""Administr"": 21,
    ""eltons"": 15,
    ""administr"": 15,
    ""CnYMDoQfM"": 3,
    ""euasjy"": 3,
    ""Mxuijb"": 3,
    ""rbCCRCfKx"": 3,
    ""kLFdUI"": 3,
    ""tSxCHA"": 3
  },
  ""keyboard"": {
    ""Unknown"": 4026
  },
  ""client_build"": {
    ""Unknown"": 4026
  },
  ""client_name"": {
    ""Unknown"": 4026
  },
  ""ip_type"": {
    ""hosting"": 3846,
    ""Unknown"": 60,
    ""hosting & proxy"": 120
  }
}"
mLPG3mpp,TradRack locate selector,creach,JSON,Saturday 17th of May 2025 07:17:54 PM CDT,"Internal error on command:""TR_LOCATE_SELECTOR""
Traceback (most recent call last):
  File ""/home/pi/klipper/klippy/gcode.py"", line 212, in _process_commands
    handler(gcmd)
  File ""/home/pi/klipper/klippy/gcode.py"", line 140, in <lambda>
    func = lambda params: origfunc(self._get_extended_params(params))
  File ""/home/pi/klipper/klippy/extras/trad_rack.py"", line 856, in cmd_TR_LOCATE_SELECTOR
    self.cmd_TR_SET_ACTIVE_LANE(
  File ""/home/pi/klipper/klippy/extras/trad_rack.py"", line 718, in cmd_TR_SET_ACTIVE_LANE
    self.tr_toolhead.set_position(pos, homing_axes=(0,))
  File ""/home/pi/klipper/klippy/extras/trad_rack.py"", line 2416, in set_position
    super(TradRackToolHead, self).set_position(newpos, homing_axes)
  File ""/home/pi/klipper/klippy/toolhead.py"", line 462, in set_position
    self.flush_step_generation()
  File ""/home/pi/klipper/klippy/toolhead.py"", line 377, in flush_step_generation
    self._advance_flush_time(self.step_gen_time)
  File ""/home/pi/klipper/klippy/toolhead.py"", line 311, in _advance_flush_time
    for trapq in self.flush_trapqs:
AttributeError: 'TradRackToolHead' object has no attribute 'flush_trapqs'
Transition to shutdown state: Internal error on command:""TR_LOCATE_SELECTOR""
Dumping gcode input 0 blocks
Dumping 20 requests for client 548021878640
Received 130881.955940: b'{""id"": 548213833248, ""method"": ""objects/query"", ""params"": {""objects"": {""extruder"": [""can_extrude""]}}}'
Received 130882.033413: b'{""id"": 548213831040, ""method"": ""objects/subscribe"", ""params"": {""objects"": {""webhooks"": null, ""print_stats"": null, ""toolhead"": null, ""gcode"": null, ""configfile"": null, ""mcu"": null, ""mcu host"": null, ""mcu expander"": null, ""mcu tr"": null, ""gcode_move"": null, ""save_variables"": null, ""idle_timeout"": null, ""servo nozzle_servo"": null, ""heaters"": null, ""temperature_sensor skr"": null, ""temperature_host RPI"": null, ""temperature_sensor RPI"": null, ""virtual_sdcard"": null, ""pause_resume"": null, ""display_status"": null, ""gcode_macro CANCEL_PRINT"": null, ""gcode_macro PAUSE"": null, ""gcode_macro RESUME"": null, ""gcode_macro SET_PAUSE_NEXT_LAYER"": null, ""gcode_macro SET_PAUSE_AT_LAYER"": null, ""gcode_macro SET_PRINT_STATS_INFO"": null, ""gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL"": null, ""gcode_macro _CLIENT_EXTRUDE"": null, ""gcode_macro _CLIENT_RETRACT"": null, ""gcode_macro _CLIENT_LINEAR_MOVE"": null, ""gcode_macro TEST_SPEED"": null, ""gcode_macro PRINT_START"": null, ""gcode_macro NozzleClean"": null, ""gcode_macro SET_ACTIVE_SPOOL"": null, ""gcode_macro CLEAR_ACTIVE_SPOOL"": null, ""gcode_macro PRIME_LINE"": null, ""gcode_macro PRINT_END"": null, ""gcode_macro LOAD_FILAMENT"": null, ""gcode_macro UNLOAD_FILAMENT"": null, ""gcode_macro CONDITIONAL_HOMING"": null, ""gcode_macro PARKBC"": null, ""gcode_macro PARK_PRESENT"": null, ""gcode_macro DUMP_VARIABLES"": null, ""exclude_object"": null, ""gcode_macro _CLIENT_VARIABLE"": null, ""bed_screws"": null, ""neopixel Sides"": null, ""gcode_macro STATUS_HOMING"": null, ""gcode_macro STATUS_HEATING_BED"": null, ""gcode_macro STATUS_PRINTING"": null, ""gcode_macro STATUS_HEATING_NOZZLE"": null, ""gcode_macro STATUS_IDLE"": null, ""gcode_macro LED_RED_BLUE"": null, ""gcode_macro FULL_ON"": null, ""gcode_macro LED_CYAN"": null, ""gcode_macro LED_RED"": null, ""gcode_macro LED_25_PERCENT"": null, ""gcode_macro LED_CYAN_RED_SPLIT"": null, ""gcode_macro PartyTime"": null, ""heater_fan hotend_fan"": null, ""fan"": null, ""temperature_sensor chamber"": null, ""fan_generic GDStime"": null, ""output_pin mosfet2"": null, ""output_pin mosfet3"": null, ""neopixel expanderPixel"": null, ""stepper_enable"": null, ""tmc2209 stepper_x"": null, ""tmc2209 stepper_y"": null, ""tmc2209 stepper_z"": null, ""tmc2209 extruder"": null, ""gcode_macro BLOBIFIER"": null, ""gcode_macro BLOBIFIER_PARK"": null, ""gcode_macro BLOBIFIER_KICK"": null, ""gcode_macro TradRack_Home"": null, ""gcode_macro UNLOAD_TOOLHEAD"": null, ""gcode_macro LOAD_T0"": null, ""gcode_macro LOAD_T1"": null, ""gcode_macro LOAD_T2"": null, ""gcode_macro LOAD_T3"": null, ""gcode_macro LOAD_T4"": null, ""gcode_macro LOAD_T5"": null, ""gcode_macro LOAD_T6"": null, ""gcode_macro LOAD_T7"": null, ""gcode_macro LOAD_T8"": null, ""gcode_macro LOAD_T9"": null, ""gcode_macro LOAD_T10"": null, ""gcode_macro LOAD_T11"": null, ""gcode_macro LOAD_T12"": null, ""gcode_macro LOAD_T13"": null, ""gcode_macro LOAD_T14"": null, ""gcode_macro LOAD_T15"": null, ""gcode_macro LOAD_T16"": null, ""gcode_macro LOAD_T17"": null, ""gcode_macro LOAD_T18"": null, ""gcode_macro LOAD_T19"": null, ""gcode_macro LOAD_TOOLHEAD_LANE_0"": null, ""filament_motion_sensor tradmotionsensor"": null, ""query_endstops"": null, ""motion_report"": null, ""servo tr_servo"": null, ""trad_rack"": null, ""tmc2209 stepper_tr_selector"": null, ""tmc2209 stepper_tr_fil_driver"": null, ""gcode_macro ACTIVATE_EXTRUDER"": null, ""controller_fan TradRack"": null, ""temperature_sensor TradRack MCU"": null, ""gcode_macro TR_Variables"": null, ""gcode_macro Shape_Tip"": null, ""gcode_macro Set_Slicer_Unload_Preset"": null, ""gcode_macro Slicer_Unload"": null, ""gcode_macro _Wait_for_Toolchange_Temp"": null, ""gcode_macro Home_and_Wipe_Nozzle"": null, ""gcode_macro Save_Pressure_Advance"": null, ""gcode_macro Restore_Pressure_Advance"": null, ""gcode_macro HELLO_WORLD"": null, ""gcode_macro TEST_PARAM"": null, ""gcode_macro SHOW_TR_STATE"": null, ""gcode_macro TR_SENSOR_STATUS"": null, ""gcode_macro TEMP_SHIFT_CALIBRATION"": null, ""gcode_macro INIT_TRAD_RACK"": null, ""gcode_macro SELECT_AND_LOAD_FILAMENT"": null, ""gcode_macro TEMP_SHIFT_TEST"": null, ""gcode_macro RELAIS_ON"": null, ""gcode_macro RELAIS_OFF"": null, ""gcode_macro RELAIS_TOGGLE"": null, ""gcode_macro RELAIS_STATE"": null, ""gcode_macro RELAIS_QUERY"": null, ""gcode_macro MOVE_TO_CENTER_SAFE"": null, ""firmware_retraction"": null, ""heater_bed"": null, ""system_stats"": null, ""manual_probe"": null, ""extruder"": null}, ""response_template"": {""method"": ""process_status_update""}}}'
Received 130882.181261: b'{""id"": 548213832480, ""method"": ""objects/query"", ""params"": {""objects"": {""extruder"": [""can_extrude""]}}}'
Received 130882.231129: b'{""id"": 548213833392, ""method"": ""objects/subscribe"", ""params"": {""objects"": {""gcode"": null, ""webhooks"": null, ""configfile"": null, ""mcu"": null, ""mcu host"": null, ""mcu expander"": null, ""mcu tr"": null, ""gcode_move"": null, ""save_variables"": null, ""idle_timeout"": null, ""servo nozzle_servo"": null, ""heaters"": null, ""temperature_sensor skr"": null, ""temperature_host RPI"": null, ""temperature_sensor RPI"": null, ""print_stats"": null, ""virtual_sdcard"": null, ""pause_resume"": null, ""display_status"": null, ""gcode_macro CANCEL_PRINT"": null, ""gcode_macro PAUSE"": null, ""gcode_macro RESUME"": null, ""gcode_macro SET_PAUSE_NEXT_LAYER"": null, ""gcode_macro SET_PAUSE_AT_LAYER"": null, ""gcode_macro SET_PRINT_STATS_INFO"": null, ""gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL"": null, ""gcode_macro _CLIENT_EXTRUDE"": null, ""gcode_macro _CLIENT_RETRACT"": null, ""gcode_macro _CLIENT_LINEAR_MOVE"": null, ""gcode_macro TEST_SPEED"": null, ""gcode_macro PRINT_START"": null, ""gcode_macro NozzleClean"": null, ""gcode_macro SET_ACTIVE_SPOOL"": null, ""gcode_macro CLEAR_ACTIVE_SPOOL"": null, ""gcode_macro PRIME_LINE"": null, ""gcode_macro PRINT_END"": null, ""gcode_macro LOAD_FILAMENT"": null, ""gcode_macro UNLOAD_FILAMENT"": null, ""gcode_macro CONDITIONAL_HOMING"": null, ""gcode_macro PARKBC"": null, ""gcode_macro PARK_PRESENT"": null, ""gcode_macro DUMP_VARIABLES"": null, ""exclude_object"": null, ""gcode_macro _CLIENT_VARIABLE"": null, ""bed_screws"": null, ""neopixel Sides"": null, ""gcode_macro STATUS_HOMING"": null, ""gcode_macro STATUS_HEATING_BED"": null, ""gcode_macro STATUS_PRINTING"": null, ""gcode_macro STATUS_HEATING_NOZZLE"": null, ""gcode_macro STATUS_IDLE"": null, ""gcode_macro LED_RED_BLUE"": null, ""gcode_macro FULL_ON"": null, ""gcode_macro LED_CYAN"": null, ""gcode_macro LED_RED"": null, ""gcode_macro LED_25_PERCENT"": null, ""gcode_macro LED_CYAN_RED_SPLIT"": null, ""gcode_macro PartyTime"": null, ""heater_fan hotend_fan"": null, ""fan"": null, ""temperature_sensor chamber"": null, ""fan_generic GDStime"": null, ""output_pin mosfet2"": null, ""output_pin mosfet3"": null, ""neopixel expanderPixel"": null, ""stepper_enable"": null, ""tmc2209 stepper_x"": null, ""tmc2209 stepper_y"": null, ""tmc2209 stepper_z"": null, ""tmc2209 extruder"": null, ""gcode_macro BLOBIFIER"": null, ""gcode_macro BLOBIFIER_PARK"": null, ""gcode_macro BLOBIFIER_KICK"": null, ""gcode_macro TradRack_Home"": null, ""gcode_macro UNLOAD_TOOLHEAD"": null, ""gcode_macro LOAD_T0"": null, ""gcode_macro LOAD_T1"": null, ""gcode_macro LOAD_T2"": null, ""gcode_macro LOAD_T3"": null, ""gcode_macro LOAD_T4"": null, ""gcode_macro LOAD_T5"": null, ""gcode_macro LOAD_T6"": null, ""gcode_macro LOAD_T7"": null, ""gcode_macro LOAD_T8"": null, ""gcode_macro LOAD_T9"": null, ""gcode_macro LOAD_T10"": null, ""gcode_macro LOAD_T11"": null, ""gcode_macro LOAD_T12"": null, ""gcode_macro LOAD_T13"": null, ""gcode_macro LOAD_T14"": null, ""gcode_macro LOAD_T15"": null, ""gcode_macro LOAD_T16"": null, ""gcode_macro LOAD_T17"": null, ""gcode_macro LOAD_T18"": null, ""gcode_macro LOAD_T19"": null, ""gcode_macro LOAD_TOOLHEAD_LANE_0"": null, ""filament_motion_sensor tradmotionsensor"": null, ""query_endstops"": null, ""motion_report"": null, ""servo tr_servo"": null, ""trad_rack"": null, ""tmc2209 stepper_tr_selector"": null, ""tmc2209 stepper_tr_fil_driver"": null, ""gcode_macro ACTIVATE_EXTRUDER"": null, ""controller_fan TradRack"": null, ""temperature_sensor TradRack MCU"": null, ""gcode_macro TR_Variables"": null, ""gcode_macro Shape_Tip"": null, ""gcode_macro Set_Slicer_Unload_Preset"": null, ""gcode_macro Slicer_Unload"": null, ""gcode_macro _Wait_for_Toolchange_Temp"": null, ""gcode_macro Home_and_Wipe_Nozzle"": null, ""gcode_macro Save_Pressure_Advance"": null, ""gcode_macro Restore_Pressure_Advance"": null, ""gcode_macro HELLO_WORLD"": null, ""gcode_macro TEST_PARAM"": null, ""gcode_macro SHOW_TR_STATE"": null, ""gcode_macro TR_SENSOR_STATUS"": null, ""gcode_macro TEMP_SHIFT_CALIBRATION"": null, ""gcode_macro INIT_TRAD_RACK"": null, ""gcode_macro SELECT_AND_LOAD_FILAMENT"": null, ""gcode_macro TEMP_SHIFT_TEST"": null, ""gcode_macro RELAIS_ON"": null, ""gcode_macro RELAIS_OFF"": null, ""gcode_macro RELAIS_TOGGLE"": null, ""gcode_macro RELAIS_STATE"": null, ""gcode_macro RELAIS_QUERY"": null, ""gcode_macro MOVE_TO_CENTER_SAFE"": null, ""firmware_retraction"": null, ""heater_bed"": null, ""system_stats"": null, ""manual_probe"": null, ""toolhead"": null, ""extruder"": null}, ""response_template"": {""method"": ""process_status_update""}}}'
Received 130882.259528: b'{""id"": 548213832288, ""method"": ""objects/query"", ""params"": {""objects"": {""extruder"": [""can_extrude""]}}}'
Received 130882.497665: b'{""id"": 548213831616, ""method"": ""objects/subscribe"", ""params"": {""objects"": {""gcode"": null, ""webhooks"": null, ""configfile"": null, ""mcu"": null, ""mcu host"": null, ""mcu expander"": null, ""mcu tr"": null, ""gcode_move"": null, ""save_variables"": null, ""idle_timeout"": null, ""servo nozzle_servo"": null, ""heaters"": null, ""temperature_sensor skr"": null, ""temperature_host RPI"": null, ""temperature_sensor RPI"": null, ""print_stats"": null, ""virtual_sdcard"": null, ""pause_resume"": null, ""display_status"": null, ""gcode_macro CANCEL_PRINT"": null, ""gcode_macro PAUSE"": null, ""gcode_macro RESUME"": null, ""gcode_macro SET_PAUSE_NEXT_LAYER"": null, ""gcode_macro SET_PAUSE_AT_LAYER"": null, ""gcode_macro SET_PRINT_STATS_INFO"": null, ""gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL"": null, ""gcode_macro _CLIENT_EXTRUDE"": null, ""gcode_macro _CLIENT_RETRACT"": null, ""gcode_macro _CLIENT_LINEAR_MOVE"": null, ""gcode_macro TEST_SPEED"": null, ""gcode_macro PRINT_START"": null, ""gcode_macro NozzleClean"": null, ""gcode_macro SET_ACTIVE_SPOOL"": null, ""gcode_macro CLEAR_ACTIVE_SPOOL"": null, ""gcode_macro PRIME_LINE"": null, ""gcode_macro PRINT_END"": null, ""gcode_macro LOAD_FILAMENT"": null, ""gcode_macro UNLOAD_FILAMENT"": null, ""gcode_macro CONDITIONAL_HOMING"": null, ""gcode_macro PARKBC"": null, ""gcode_macro PARK_PRESENT"": null, ""gcode_macro DUMP_VARIABLES"": null, ""exclude_object"": null, ""gcode_macro _CLIENT_VARIABLE"": null, ""bed_screws"": null, ""neopixel Sides"": null, ""gcode_macro STATUS_HOMING"": null, ""gcode_macro STATUS_HEATING_BED"": null, ""gcode_macro STATUS_PRINTING"": null, ""gcode_macro STATUS_HEATING_NOZZLE"": null, ""gcode_macro STATUS_IDLE"": null, ""gcode_macro LED_RED_BLUE"": null, ""gcode_macro FULL_ON"": null, ""gcode_macro LED_CYAN"": null, ""gcode_macro LED_RED"": null, ""gcode_macro LED_25_PERCENT"": null, ""gcode_macro LED_CYAN_RED_SPLIT"": null, ""gcode_macro PartyTime"": null, ""heater_fan hotend_fan"": null, ""fan"": null, ""temperature_sensor chamber"": null, ""fan_generic GDStime"": null, ""output_pin mosfet2"": null, ""output_pin mosfet3"": null, ""neopixel expanderPixel"": null, ""stepper_enable"": null, ""tmc2209 stepper_x"": null, ""tmc2209 stepper_y"": null, ""tmc2209 stepper_z"": null, ""tmc2209 extruder"": null, ""gcode_macro BLOBIFIER"": null, ""gcode_macro BLOBIFIER_PARK"": null, ""gcode_macro BLOBIFIER_KICK"": null, ""gcode_macro TradRack_Home"": null, ""gcode_macro UNLOAD_TOOLHEAD"": null, ""gcode_macro LOAD_T0"": null, ""gcode_macro LOAD_T1"": null, ""gcode_macro LOAD_T2"": null, ""gcode_macro LOAD_T3"": null, ""gcode_macro LOAD_T4"": null, ""gcode_macro LOAD_T5"": null, ""gcode_macro LOAD_T6"": null, ""gcode_macro LOAD_T7"": null, ""gcode_macro LOAD_T8"": null, ""gcode_macro LOAD_T9"": null, ""gcode_macro LOAD_T10"": null, ""gcode_macro LOAD_T11"": null, ""gcode_macro LOAD_T12"": null, ""gcode_macro LOAD_T13"": null, ""gcode_macro LOAD_T14"": null, ""gcode_macro LOAD_T15"": null, ""gcode_macro LOAD_T16"": null, ""gcode_macro LOAD_T17"": null, ""gcode_macro LOAD_T18"": null, ""gcode_macro LOAD_T19"": null, ""gcode_macro LOAD_TOOLHEAD_LANE_0"": null, ""filament_motion_sensor tradmotionsensor"": null, ""query_endstops"": null, ""motion_report"": null, ""servo tr_servo"": null, ""trad_rack"": null, ""tmc2209 stepper_tr_selector"": null, ""tmc2209 stepper_tr_fil_driver"": null, ""gcode_macro ACTIVATE_EXTRUDER"": null, ""controller_fan TradRack"": null, ""temperature_sensor TradRack MCU"": null, ""gcode_macro TR_Variables"": null, ""gcode_macro Shape_Tip"": null, ""gcode_macro Set_Slicer_Unload_Preset"": null, ""gcode_macro Slicer_Unload"": null, ""gcode_macro _Wait_for_Toolchange_Temp"": null, ""gcode_macro Home_and_Wipe_Nozzle"": null, ""gcode_macro Save_Pressure_Advance"": null, ""gcode_macro Restore_Pressure_Advance"": null, ""gcode_macro HELLO_WORLD"": null, ""gcode_macro TEST_PARAM"": null, ""gcode_macro SHOW_TR_STATE"": null, ""gcode_macro TR_SENSOR_STATUS"": null, ""gcode_macro TEMP_SHIFT_CALIBRATION"": null, ""gcode_macro INIT_TRAD_RACK"": null, ""gcode_macro SELECT_AND_LOAD_FILAMENT"": null, ""gcode_macro TEMP_SHIFT_TEST"": null, ""gcode_macro RELAIS_ON"": null, ""gcode_macro RELAIS_OFF"": null, ""gcode_macro RELAIS_TOGGLE"": null, ""gcode_macro RELAIS_STATE"": null, ""gcode_macro RELAIS_QUERY"": null, ""gcode_macro MOVE_TO_CENTER_SAFE"": null, ""firmware_retraction"": null, ""heater_bed"": null, ""system_stats"": null, ""manual_probe"": null, ""toolhead"": null, ""extruder"": null}, ""response_template"": {""method"": ""process_status_update""}}}'
Received 130882.708169: b'{""id"": 548213830464, ""method"": ""info"", ""params"": {}}'
Received 130882.844911: b'{""id"": 548090324784, ""method"": ""objects/query"", ""params"": {""objects"": {""extruder"": [""can_extrude""]}}}'
Received 130882.873357: b'{""id"": 548214065472, ""method"": ""objects/subscribe"", ""params"": {""objects"": {""webhooks"": null, ""print_stats"": null, ""toolhead"": null, ""temperature_sensor skr"": null, ""temperature_sensor RPI"": null, ""temperature_sensor chamber"": null, ""temperature_sensor TradRack MCU"": null, ""heater_bed"": null, ""extruder"": null, ""gcode"": null, ""configfile"": null, ""mcu"": null, ""mcu host"": null, ""mcu expander"": null, ""mcu tr"": null, ""gcode_move"": null, ""save_variables"": null, ""idle_timeout"": null, ""servo nozzle_servo"": null, ""heaters"": null, ""temperature_host RPI"": null, ""virtual_sdcard"": null, ""pause_resume"": null, ""display_status"": null, ""gcode_macro CANCEL_PRINT"": null, ""gcode_macro PAUSE"": null, ""gcode_macro RESUME"": null, ""gcode_macro SET_PAUSE_NEXT_LAYER"": null, ""gcode_macro SET_PAUSE_AT_LAYER"": null, ""gcode_macro SET_PRINT_STATS_INFO"": null, ""gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL"": null, ""gcode_macro _CLIENT_EXTRUDE"": null, ""gcode_macro _CLIENT_RETRACT"": null, ""gcode_macro _CLIENT_LINEAR_MOVE"": null, ""gcode_macro TEST_SPEED"": null, ""gcode_macro PRINT_START"": null, ""gcode_macro NozzleClean"": null, ""gcode_macro SET_ACTIVE_SPOOL"": null, ""gcode_macro CLEAR_ACTIVE_SPOOL"": null, ""gcode_macro PRIME_LINE"": null, ""gcode_macro PRINT_END"": null, ""gcode_macro LOAD_FILAMENT"": null, ""gcode_macro UNLOAD_FILAMENT"": null, ""gcode_macro CONDITIONAL_HOMING"": null, ""gcode_macro PARKBC"": null, ""gcode_macro PARK_PRESENT"": null, ""gcode_macro DUMP_VARIABLES"": null, ""exclude_object"": null, ""gcode_macro _CLIENT_VARIABLE"": null, ""bed_screws"": null, ""neopixel Sides"": null, ""gcode_macro STATUS_HOMING"": null, ""gcode_macro STATUS_HEATING_BED"": null, ""gcode_macro STATUS_PRINTING"": null, ""gcode_macro STATUS_HEATING_NOZZLE"": null, ""gcode_macro STATUS_IDLE"": null, ""gcode_macro LED_RED_BLUE"": null, ""gcode_macro FULL_ON"": null, ""gcode_macro LED_CYAN"": null, ""gcode_macro LED_RED"": null, ""gcode_macro LED_25_PERCENT"": null, ""gcode_macro LED_CYAN_RED_SPLIT"": null, ""gcode_macro PartyTime"": null, ""heater_fan hotend_fan"": null, ""fan"": null, ""fan_generic GDStime"": null, ""output_pin mosfet2"": null, ""output_pin mosfet3"": null, ""neopixel expanderPixel"": null, ""stepper_enable"": null, ""tmc2209 stepper_x"": null, ""tmc2209 stepper_y"": null, ""tmc2209 stepper_z"": null, ""tmc2209 extruder"": null, ""gcode_macro BLOBIFIER"": null, ""gcode_macro BLOBIFIER_PARK"": null, ""gcode_macro BLOBIFIER_KICK"": null, ""gcode_macro TradRack_Home"": null, ""gcode_macro UNLOAD_TOOLHEAD"": null, ""gcode_macro LOAD_T0"": null, ""gcode_macro LOAD_T1"": null, ""gcode_macro LOAD_T2"": null, ""gcode_macro LOAD_T3"": null, ""gcode_macro LOAD_T4"": null, ""gcode_macro LOAD_T5"": null, ""gcode_macro LOAD_T6"": null, ""gcode_macro LOAD_T7"": null, ""gcode_macro LOAD_T8"": null, ""gcode_macro LOAD_T9"": null, ""gcode_macro LOAD_T10"": null, ""gcode_macro LOAD_T11"": null, ""gcode_macro LOAD_T12"": null, ""gcode_macro LOAD_T13"": null, ""gcode_macro LOAD_T14"": null, ""gcode_macro LOAD_T15"": null, ""gcode_macro LOAD_T16"": null, ""gcode_macro LOAD_T17"": null, ""gcode_macro LOAD_T18"": null, ""gcode_macro LOAD_T19"": null, ""gcode_macro LOAD_TOOLHEAD_LANE_0"": null, ""filament_motion_sensor tradmotionsensor"": null, ""query_endstops"": null, ""motion_report"": null, ""servo tr_servo"": null, ""trad_rack"": null, ""tmc2209 stepper_tr_selector"": null, ""tmc2209 stepper_tr_fil_driver"": null, ""gcode_macro ACTIVATE_EXTRUDER"": null, ""controller_fan TradRack"": null, ""gcode_macro TR_Variables"": null, ""gcode_macro Shape_Tip"": null, ""gcode_macro Set_Slicer_Unload_Preset"": null, ""gcode_macro Slicer_Unload"": null, ""gcode_macro _Wait_for_Toolchange_Temp"": null, ""gcode_macro Home_and_Wipe_Nozzle"": null, ""gcode_macro Save_Pressure_Advance"": null, ""gcode_macro Restore_Pressure_Advance"": null, ""gcode_macro HELLO_WORLD"": null, ""gcode_macro TEST_PARAM"": null, ""gcode_macro SHOW_TR_STATE"": null, ""gcode_macro TR_SENSOR_STATUS"": null, ""gcode_macro TEMP_SHIFT_CALIBRATION"": null, ""gcode_macro INIT_TRAD_RACK"": null, ""gcode_macro SELECT_AND_LOAD_FILAMENT"": null, ""gcode_macro TEMP_SHIFT_TEST"": null, ""gcode_macro RELAIS_ON"": null, ""gcode_macro RELAIS_OFF"": null, ""gcode_macro RELAIS_TOGGLE"": null, ""gcode_macro RELAIS_STATE"": null, ""gcode_macro RELAIS_QUERY"": null, ""gcode_macro MOVE_TO_CENTER_SAFE"": null, ""firmware_retraction"": null, ""system_stats"": null, ""manual_probe"": null}, ""response_template"": {""method"": ""process_status_update""}}}'
Received 130882.962030: b'{""id"": 548108364480, ""method"": ""info"", ""params"": {}}'
Received 130882.962030: b'{""id"": 548214064896, ""method"": ""objects/list"", ""params"": {}}'
Received 130882.981624: b'{""id"": 548214064416, ""method"": ""info"", ""params"": {}}'
Received 130882.981624: b'{""id"": 548214066480, ""method"": ""objects/list"", ""params"": {}}'
Received 130883.015455: b'{""id"": 548214065136, ""method"": ""objects/subscribe"", ""params"": {""objects"": {""webhooks"": null, ""print_stats"": null, ""toolhead"": null, ""temperature_sensor skr"": null, ""temperature_sensor RPI"": null, ""temperature_sensor chamber"": null, ""temperature_sensor TradRack MCU"": null, ""heater_bed"": null, ""extruder"": null, ""gcode"": null, ""configfile"": null, ""mcu"": null, ""mcu host"": null, ""mcu expander"": null, ""mcu tr"": null, ""gcode_move"": null, ""save_variables"": null, ""idle_timeout"": null, ""servo nozzle_servo"": null, ""heaters"": null, ""temperature_host RPI"": null, ""virtual_sdcard"": null, ""pause_resume"": null, ""display_status"": null, ""gcode_macro CANCEL_PRINT"": null, ""gcode_macro PAUSE"": null, ""gcode_macro RESUME"": null, ""gcode_macro SET_PAUSE_NEXT_LAYER"": null, ""gcode_macro SET_PAUSE_AT_LAYER"": null, ""gcode_macro SET_PRINT_STATS_INFO"": null, ""gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL"": null, ""gcode_macro _CLIENT_EXTRUDE"": null, ""gcode_macro _CLIENT_RETRACT"": null, ""gcode_macro _CLIENT_LINEAR_MOVE"": null, ""gcode_macro TEST_SPEED"": null, ""gcode_macro PRINT_START"": null, ""gcode_macro NozzleClean"": null, ""gcode_macro SET_ACTIVE_SPOOL"": null, ""gcode_macro CLEAR_ACTIVE_SPOOL"": null, ""gcode_macro PRIME_LINE"": null, ""gcode_macro PRINT_END"": null, ""gcode_macro LOAD_FILAMENT"": null, ""gcode_macro UNLOAD_FILAMENT"": null, ""gcode_macro CONDITIONAL_HOMING"": null, ""gcode_macro PARKBC"": null, ""gcode_macro PARK_PRESENT"": null, ""gcode_macro DUMP_VARIABLES"": null, ""exclude_object"": null, ""gcode_macro _CLIENT_VARIABLE"": null, ""bed_screws"": null, ""neopixel Sides"": null, ""gcode_macro STATUS_HOMING"": null, ""gcode_macro STATUS_HEATING_BED"": null, ""gcode_macro STATUS_PRINTING"": null, ""gcode_macro STATUS_HEATING_NOZZLE"": null, ""gcode_macro STATUS_IDLE"": null, ""gcode_macro LED_RED_BLUE"": null, ""gcode_macro FULL_ON"": null, ""gcode_macro LED_CYAN"": null, ""gcode_macro LED_RED"": null, ""gcode_macro LED_25_PERCENT"": null, ""gcode_macro LED_CYAN_RED_SPLIT"": null, ""gcode_macro PartyTime"": null, ""heater_fan hotend_fan"": null, ""fan"": null, ""fan_generic GDStime"": null, ""output_pin mosfet2"": null, ""output_pin mosfet3"": null, ""neopixel expanderPixel"": null, ""stepper_enable"": null, ""tmc2209 stepper_x"": null, ""tmc2209 stepper_y"": null, ""tmc2209 stepper_z"": null, ""tmc2209 extruder"": null, ""gcode_macro BLOBIFIER"": null, ""gcode_macro BLOBIFIER_PARK"": null, ""gcode_macro BLOBIFIER_KICK"": null, ""gcode_macro TradRack_Home"": null, ""gcode_macro UNLOAD_TOOLHEAD"": null, ""gcode_macro LOAD_T0"": null, ""gcode_macro LOAD_T1"": null, ""gcode_macro LOAD_T2"": null, ""gcode_macro LOAD_T3"": null, ""gcode_macro LOAD_T4"": null, ""gcode_macro LOAD_T5"": null, ""gcode_macro LOAD_T6"": null, ""gcode_macro LOAD_T7"": null, ""gcode_macro LOAD_T8"": null, ""gcode_macro LOAD_T9"": null, ""gcode_macro LOAD_T10"": null, ""gcode_macro LOAD_T11"": null, ""gcode_macro LOAD_T12"": null, ""gcode_macro LOAD_T13"": null, ""gcode_macro LOAD_T14"": null, ""gcode_macro LOAD_T15"": null, ""gcode_macro LOAD_T16"": null, ""gcode_macro LOAD_T17"": null, ""gcode_macro LOAD_T18"": null, ""gcode_macro LOAD_T19"": null, ""gcode_macro LOAD_TOOLHEAD_LANE_0"": null, ""filament_motion_sensor tradmotionsensor"": null, ""query_endstops"": null, ""motion_report"": null, ""servo tr_servo"": null, ""trad_rack"": null, ""tmc2209 stepper_tr_selector"": null, ""tmc2209 stepper_tr_fil_driver"": null, ""gcode_macro ACTIVATE_EXTRUDER"": null, ""controller_fan TradRack"": null, ""gcode_macro TR_Variables"": null, ""gcode_macro Shape_Tip"": null, ""gcode_macro Set_Slicer_Unload_Preset"": null, ""gcode_macro Slicer_Unload"": null, ""gcode_macro _Wait_for_Toolchange_Temp"": null, ""gcode_macro Home_and_Wipe_Nozzle"": null, ""gcode_macro Save_Pressure_Advance"": null, ""gcode_macro Restore_Pressure_Advance"": null, ""gcode_macro HELLO_WORLD"": null, ""gcode_macro TEST_PARAM"": null, ""gcode_macro SHOW_TR_STATE"": null, ""gcode_macro TR_SENSOR_STATUS"": null, ""gcode_macro TEMP_SHIFT_CALIBRATION"": null, ""gcode_macro INIT_TRAD_RACK"": null, ""gcode_macro SELECT_AND_LOAD_FILAMENT"": null, ""gcode_macro TEMP_SHIFT_TEST"": null, ""gcode_macro RELAIS_ON"": null, ""gcode_macro RELAIS_OFF"": null, ""gcode_macro RELAIS_TOGGLE"": null, ""gcode_macro RELAIS_STATE"": null, ""gcode_macro RELAIS_QUERY"": null, ""gcode_macro MOVE_TO_CENTER_SAFE"": null, ""firmware_retraction"": null, ""system_stats"": null, ""manual_probe"": null}, ""response_template"": {""method"": ""process_status_update""}}}'
Received 130883.105308: b'{""id"": 548214066288, ""method"": ""objects/query"", ""params"": {""objects"": {""extruder"": [""can_extrude""]}}}'
Received 130883.233352: b'{""id"": 548214064032, ""method"": ""objects/subscribe"", ""params"": {""objects"": {""gcode"": null, ""webhooks"": null, ""configfile"": null, ""mcu"": null, ""mcu host"": null, ""mcu expander"": null, ""mcu tr"": null, ""gcode_move"": null, ""save_variables"": null, ""idle_timeout"": null, ""servo nozzle_servo"": null, ""heaters"": null, ""temperature_sensor skr"": null, ""temperature_host RPI"": null, ""temperature_sensor RPI"": null, ""print_stats"": null, ""virtual_sdcard"": null, ""pause_resume"": null, ""display_status"": null, ""gcode_macro CANCEL_PRINT"": null, ""gcode_macro PAUSE"": null, ""gcode_macro RESUME"": null, ""gcode_macro SET_PAUSE_NEXT_LAYER"": null, ""gcode_macro SET_PAUSE_AT_LAYER"": null, ""gcode_macro SET_PRINT_STATS_INFO"": null, ""gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL"": null, ""gcode_macro _CLIENT_EXTRUDE"": null, ""gcode_macro _CLIENT_RETRACT"": null, ""gcode_macro _CLIENT_LINEAR_MOVE"": null, ""gcode_macro TEST_SPEED"": null, ""gcode_macro PRINT_START"": null, ""gcode_macro NozzleClean"": null, ""gcode_macro SET_ACTIVE_SPOOL"": null, ""gcode_macro CLEAR_ACTIVE_SPOOL"": null, ""gcode_macro PRIME_LINE"": null, ""gcode_macro PRINT_END"": null, ""gcode_macro LOAD_FILAMENT"": null, ""gcode_macro UNLOAD_FILAMENT"": null, ""gcode_macro CONDITIONAL_HOMING"": null, ""gcode_macro PARKBC"": null, ""gcode_macro PARK_PRESENT"": null, ""gcode_macro DUMP_VARIABLES"": null, ""exclude_object"": null, ""gcode_macro _CLIENT_VARIABLE"": null, ""bed_screws"": null, ""neopixel Sides"": null, ""gcode_macro STATUS_HOMING"": null, ""gcode_macro STATUS_HEATING_BED"": null, ""gcode_macro STATUS_PRINTING"": null, ""gcode_macro STATUS_HEATING_NOZZLE"": null, ""gcode_macro STATUS_IDLE"": null, ""gcode_macro LED_RED_BLUE"": null, ""gcode_macro FULL_ON"": null, ""gcode_macro LED_CYAN"": null, ""gcode_macro LED_RED"": null, ""gcode_macro LED_25_PERCENT"": null, ""gcode_macro LED_CYAN_RED_SPLIT"": null, ""gcode_macro PartyTime"": null, ""heater_fan hotend_fan"": null, ""fan"": null, ""temperature_sensor chamber"": null, ""fan_generic GDStime"": null, ""output_pin mosfet2"": null, ""output_pin mosfet3"": null, ""neopixel expanderPixel"": null, ""stepper_enable"": null, ""tmc2209 stepper_x"": null, ""tmc2209 stepper_y"": null, ""tmc2209 stepper_z"": null, ""tmc2209 extruder"": null, ""gcode_macro BLOBIFIER"": null, ""gcode_macro BLOBIFIER_PARK"": null, ""gcode_macro BLOBIFIER_KICK"": null, ""gcode_macro TradRack_Home"": null, ""gcode_macro UNLOAD_TOOLHEAD"": null, ""gcode_macro LOAD_T0"": null, ""gcode_macro LOAD_T1"": null, ""gcode_macro LOAD_T2"": null, ""gcode_macro LOAD_T3"": null, ""gcode_macro LOAD_T4"": null, ""gcode_macro LOAD_T5"": null, ""gcode_macro LOAD_T6"": null, ""gcode_macro LOAD_T7"": null, ""gcode_macro LOAD_T8"": null, ""gcode_macro LOAD_T9"": null, ""gcode_macro LOAD_T10"": null, ""gcode_macro LOAD_T11"": null, ""gcode_macro LOAD_T12"": null, ""gcode_macro LOAD_T13"": null, ""gcode_macro LOAD_T14"": null, ""gcode_macro LOAD_T15"": null, ""gcode_macro LOAD_T16"": null, ""gcode_macro LOAD_T17"": null, ""gcode_macro LOAD_T18"": null, ""gcode_macro LOAD_T19"": null, ""gcode_macro LOAD_TOOLHEAD_LANE_0"": null, ""filament_motion_sensor tradmotionsensor"": null, ""query_endstops"": null, ""motion_report"": null, ""servo tr_servo"": null, ""trad_rack"": null, ""tmc2209 stepper_tr_selector"": null, ""tmc2209 stepper_tr_fil_driver"": null, ""gcode_macro ACTIVATE_EXTRUDER"": null, ""controller_fan TradRack"": null, ""temperature_sensor TradRack MCU"": null, ""gcode_macro TR_Variables"": null, ""gcode_macro Shape_Tip"": null, ""gcode_macro Set_Slicer_Unload_Preset"": null, ""gcode_macro Slicer_Unload"": null, ""gcode_macro _Wait_for_Toolchange_Temp"": null, ""gcode_macro Home_and_Wipe_Nozzle"": null, ""gcode_macro Save_Pressure_Advance"": null, ""gcode_macro Restore_Pressure_Advance"": null, ""gcode_macro HELLO_WORLD"": null, ""gcode_macro TEST_PARAM"": null, ""gcode_macro SHOW_TR_STATE"": null, ""gcode_macro TR_SENSOR_STATUS"": null, ""gcode_macro TEMP_SHIFT_CALIBRATION"": null, ""gcode_macro INIT_TRAD_RACK"": null, ""gcode_macro SELECT_AND_LOAD_FILAMENT"": null, ""gcode_macro TEMP_SHIFT_TEST"": null, ""gcode_macro RELAIS_ON"": null, ""gcode_macro RELAIS_OFF"": null, ""gcode_macro RELAIS_TOGGLE"": null, ""gcode_macro RELAIS_STATE"": null, ""gcode_macro RELAIS_QUERY"": null, ""gcode_macro MOVE_TO_CENTER_SAFE"": null, ""firmware_retraction"": null, ""heater_bed"": null, ""system_stats"": null, ""manual_probe"": null, ""toolhead"": null, ""extruder"": null}, ""response_template"": {""method"": ""process_status_update""}}}'
Received 130883.499937: b'{""id"": 548214065232, ""method"": ""objects/subscribe"", ""params"": {""objects"": {""gcode"": null, ""webhooks"": null, ""configfile"": null, ""mcu"": null, ""mcu host"": null, ""mcu expander"": null, ""mcu tr"": null, ""gcode_move"": null, ""save_variables"": null, ""idle_timeout"": null, ""servo nozzle_servo"": null, ""heaters"": null, ""temperature_sensor skr"": null, ""temperature_host RPI"": null, ""temperature_sensor RPI"": null, ""print_stats"": null, ""virtual_sdcard"": null, ""pause_resume"": null, ""display_status"": null, ""gcode_macro CANCEL_PRINT"": null, ""gcode_macro PAUSE"": null, ""gcode_macro RESUME"": null, ""gcode_macro SET_PAUSE_NEXT_LAYER"": null, ""gcode_macro SET_PAUSE_AT_LAYER"": null, ""gcode_macro SET_PRINT_STATS_INFO"": null, ""gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL"": null, ""gcode_macro _CLIENT_EXTRUDE"": null, ""gcode_macro _CLIENT_RETRACT"": null, ""gcode_macro _CLIENT_LINEAR_MOVE"": null, ""gcode_macro TEST_SPEED"": null, ""gcode_macro PRINT_START"": null, ""gcode_macro NozzleClean"": null, ""gcode_macro SET_ACTIVE_SPOOL"": null, ""gcode_macro CLEAR_ACTIVE_SPOOL"": null, ""gcode_macro PRIME_LINE"": null, ""gcode_macro PRINT_END"": null, ""gcode_macro LOAD_FILAMENT"": null, ""gcode_macro UNLOAD_FILAMENT"": null, ""gcode_macro CONDITIONAL_HOMING"": null, ""gcode_macro PARKBC"": null, ""gcode_macro PARK_PRESENT"": null, ""gcode_macro DUMP_VARIABLES"": null, ""exclude_object"": null, ""gcode_macro _CLIENT_VARIABLE"": null, ""bed_screws"": null, ""neopixel Sides"": null, ""gcode_macro STATUS_HOMING"": null, ""gcode_macro STATUS_HEATING_BED"": null, ""gcode_macro STATUS_PRINTING"": null, ""gcode_macro STATUS_HEATING_NOZZLE"": null, ""gcode_macro STATUS_IDLE"": null, ""gcode_macro LED_RED_BLUE"": null, ""gcode_macro FULL_ON"": null, ""gcode_macro LED_CYAN"": null, ""gcode_macro LED_RED"": null, ""gcode_macro LED_25_PERCENT"": null, ""gcode_macro LED_CYAN_RED_SPLIT"": null, ""gcode_macro PartyTime"": null, ""heater_fan hotend_fan"": null, ""fan"": null, ""temperature_sensor chamber"": null, ""fan_generic GDStime"": null, ""output_pin mosfet2"": null, ""output_pin mosfet3"": null, ""neopixel expanderPixel"": null, ""stepper_enable"": null, ""tmc2209 stepper_x"": null, ""tmc2209 stepper_y"": null, ""tmc2209 stepper_z"": null, ""tmc2209 extruder"": null, ""gcode_macro BLOBIFIER"": null, ""gcode_macro BLOBIFIER_PARK"": null, ""gcode_macro BLOBIFIER_KICK"": null, ""gcode_macro TradRack_Home"": null, ""gcode_macro UNLOAD_TOOLHEAD"": null, ""gcode_macro LOAD_T0"": null, ""gcode_macro LOAD_T1"": null, ""gcode_macro LOAD_T2"": null, ""gcode_macro LOAD_T3"": null, ""gcode_macro LOAD_T4"": null, ""gcode_macro LOAD_T5"": null, ""gcode_macro LOAD_T6"": null, ""gcode_macro LOAD_T7"": null, ""gcode_macro LOAD_T8"": null, ""gcode_macro LOAD_T9"": null, ""gcode_macro LOAD_T10"": null, ""gcode_macro LOAD_T11"": null, ""gcode_macro LOAD_T12"": null, ""gcode_macro LOAD_T13"": null, ""gcode_macro LOAD_T14"": null, ""gcode_macro LOAD_T15"": null, ""gcode_macro LOAD_T16"": null, ""gcode_macro LOAD_T17"": null, ""gcode_macro LOAD_T18"": null, ""gcode_macro LOAD_T19"": null, ""gcode_macro LOAD_TOOLHEAD_LANE_0"": null, ""filament_motion_sensor tradmotionsensor"": null, ""query_endstops"": null, ""motion_report"": null, ""servo tr_servo"": null, ""trad_rack"": null, ""tmc2209 stepper_tr_selector"": null, ""tmc2209 stepper_tr_fil_driver"": null, ""gcode_macro ACTIVATE_EXTRUDER"": null, ""controller_fan TradRack"": null, ""temperature_sensor TradRack MCU"": null, ""gcode_macro TR_Variables"": null, ""gcode_macro Shape_Tip"": null, ""gcode_macro Set_Slicer_Unload_Preset"": null, ""gcode_macro Slicer_Unload"": null, ""gcode_macro _Wait_for_Toolchange_Temp"": null, ""gcode_macro Home_and_Wipe_Nozzle"": null, ""gcode_macro Save_Pressure_Advance"": null, ""gcode_macro Restore_Pressure_Advance"": null, ""gcode_macro HELLO_WORLD"": null, ""gcode_macro TEST_PARAM"": null, ""gcode_macro SHOW_TR_STATE"": null, ""gcode_macro TR_SENSOR_STATUS"": null, ""gcode_macro TEMP_SHIFT_CALIBRATION"": null, ""gcode_macro INIT_TRAD_RACK"": null, ""gcode_macro SELECT_AND_LOAD_FILAMENT"": null, ""gcode_macro TEMP_SHIFT_TEST"": null, ""gcode_macro RELAIS_ON"": null, ""gcode_macro RELAIS_OFF"": null, ""gcode_macro RELAIS_TOGGLE"": null, ""gcode_macro RELAIS_STATE"": null, ""gcode_macro RELAIS_QUERY"": null, ""gcode_macro MOVE_TO_CENTER_SAFE"": null, ""firmware_retraction"": null, ""heater_bed"": null, ""system_stats"": null, ""manual_probe"": null, ""toolhead"": null, ""extruder"": null}, ""response_template"": {""method"": ""process_status_update""}}}'
Received 130884.948426: b'{""id"": 548090324784, ""method"": ""objects/query"", ""params"": {""objects"": {""extruder"": [""can_extrude""]}}}'
Received 130885.613411: b'{""id"": 548214715824, ""method"": ""objects/query"", ""params"": {""objects"": {""extruder"": [""can_extrude""]}}}'
Received 130890.037702: b'{""id"": 548214066576, ""method"": ""gcode/script"", ""params"": {""script"": ""TR_LOCATE_SELECTOR""}}'
gcode state: absolute_coord=True absolute_extrude=True base_position=[0.0, 0.0, 0.0, 0.0] last_position=[0.0, 0.0, 0.0, 0.0] homing_position=[0.0, 0.0, 0.0, 0.0] speed_factor=0.016666666666666666 extrude_factor=1.0 speed=25.0
Reactor garbage collection: (130884.710896321, 0.0, 0.0)
Internal error on command:""TR_LOCATE_SELECTOR""
Once the underlying issue is corrected, use the
""FIRMWARE_RESTART"" command to reset the firmware, reload the
config, and restart the host software.
Printer is shutdown

Internal error on command:""TR_LOCATE_SELECTOR""
Internal Error on WebRequest: gcode/script
Traceback (most recent call last):
  File ""/home/pi/klipper/klippy/webhooks.py"", line 268, in _process_request
    func(web_request)
  File ""/home/pi/klipper/klippy/webhooks.py"", line 448, in _handle_script
    self.gcode.run_script(web_request.get_str('script'))
  File ""/home/pi/klipper/klippy/gcode.py"", line 230, in run_script
    self._process_commands(script.split('\n'), need_ack=False)
  File ""/home/pi/klipper/klippy/gcode.py"", line 212, in _process_commands
    handler(gcmd)
  File ""/home/pi/klipper/klippy/gcode.py"", line 140, in <lambda>
    func = lambda params: origfunc(self._get_extended_params(params))
  File ""/home/pi/klipper/klippy/extras/trad_rack.py"", line 856, in cmd_TR_LOCATE_SELECTOR
    self.cmd_TR_SET_ACTIVE_LANE(
  File ""/home/pi/klipper/klippy/extras/trad_rack.py"", line 718, in cmd_TR_SET_ACTIVE_LANE
    self.tr_toolhead.set_position(pos, homing_axes=(0,))
  File ""/home/pi/klipper/klippy/extras/trad_rack.py"", line 2416, in set_position
    super(TradRackToolHead, self).set_position(newpos, homing_axes)
  File ""/home/pi/klipper/klippy/toolhead.py"", line 462, in set_position
    self.flush_step_generation()
  File ""/home/pi/klipper/klippy/toolhead.py"", line 377, in flush_step_generation
    self._advance_flush_time(self.step_gen_time)
  File ""/home/pi/klipper/klippy/toolhead.py"", line 311, in _advance_flush_time
    for trapq in self.flush_trapqs:
AttributeError: 'TradRackToolHead' object has no attribute 'flush_trapqs'
MCU 'mcu' shutdown: Command request
clocksync state: mcu_freq=72000000 last_clock=17701573014 clock_est=(130875.562 16676143008 71998164.526) min_half_rtt=0.000178 min_rtt_time=130880.941 time_avg=130875.562(50.315) clock_avg=16676143008.490(3622604326.864) pred_variance=1987112862.584
Dumping serial stats: bytes_write=5416 bytes_read=12137 bytes_retransmit=9 bytes_invalid=0 send_seq=394 receive_seq=394 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0
Dumping send queue 100 messages"
q4ZnYY4f,2025-05-17_stats.json,rdp_snitch,JSON,Saturday 17th of May 2025 07:16:10 PM CDT,"{
  ""ip"": {
    ""128.199.168.88"": 2146,
    ""216.122.187.31"": 48,
    ""193.23.199.156"": 2,
    ""198.235.24.214"": 6,
    ""162.243.90.201"": 6,
    ""185.196.220.41"": 6,
    ""122.165.219.142"": 2,
    ""88.214.25.125"": 4,
    ""194.165.16.163"": 4,
    ""205.210.31.108"": 6,
    ""92.63.197.197"": 8,
    ""45.227.253.51"": 8,
    ""71.6.134.230"": 20,
    ""80.94.95.203"": 4,
    ""147.185.132.165"": 6,
    ""78.142.18.92"": 2,
    ""172.111.244.66"": 80,
    ""209.38.42.204"": 12,
    ""104.130.13.117"": 68,
    ""143.198.221.164"": 60,
    ""143.198.129.146"": 46,
    ""143.198.126.238"": 44,
    ""157.245.159.1"": 20,
    ""157.245.150.219"": 30,
    ""167.172.131.118"": 40,
    ""198.235.24.169"": 6
  },
  ""asn"": {
    ""AS14061"": 2404,
    ""AS14315"": 48,
    ""AS210457"": 2,
    ""AS396982"": 24,
    ""AS208046"": 8,
    ""AS24560"": 2,
    ""AS35042"": 4,
    ""AS48721"": 4,
    ""AS210848"": 8,
    ""AS209272"": 8,
    ""AS10439"": 20,
    ""AS204428"": 4,
    ""AS9009"": 80,
    ""AS27357"": 68
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 2404,
    ""Internet Utilities NA LLC"": 48,
    ""Denis Pyatkov"": 2,
    ""Google LLC"": 24,
    ""ColocationX Ltd."": 8,
    ""BHARTI"": 2,
    ""NOC EMAIL: noc@one-host.net"": 4,
    ""Flyservers S.A."": 4,
    ""Telkom Internet LTD"": 8,
    ""Flyservers S.A"": 8,
    ""CariNet, Inc."": 20,
    ""SS-Net"": 4,
    ""Secure Internet LLC"": 80,
    ""Rackspace Hosting"": 68
  },
  ""org"": {
    ""DigitalOcean, LLC"": 2398,
    ""Unknown"": 48,
    ""Kyonix Hosting Network"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Digital Ocean"": 6,
    ""ColocationX Ltd"": 8,
    ""ABTS Tamilnadu"": 2,
    ""ThinkTech Technology Industrial CO. Limited"": 4,
    ""Flyservers S.A"": 4,
    ""Korotkij Denis Aleksandrovich"": 8,
    ""Nextcloud S.A"": 8,
    ""CariNet, Inc."": 20,
    ""Unmanaged LTD"": 4,
    ""Internet Security - BE"": 80,
    ""Cloud Servers Cell 0001-0003 IAD3"": 68
  },
  ""regionName"": {
    ""South West"": 2256,
    ""Karnataka"": 48,
    ""Hesse"": 2,
    ""California"": 70,
    ""New Jersey"": 90,
    ""Virginia"": 6,
    ""Tamil Nadu"": 2,
    ""Kowloon City"": 4,
    ""Kaunas"": 4,
    ""North Holland"": 22,
    ""La Paz Department"": 8,
    ""Nevada"": 20,
    ""Sofia-Capital"": 4,
    ""Brussels Capital"": 80,
    ""District of Columbia"": 68
  },
  ""country"": {
    ""Singapore"": 2256,
    ""India"": 50,
    ""Germany"": 2,
    ""United States"": 254,
    ""Hong Kong"": 4,
    ""Lithuania"": 4,
    ""The Netherlands"": 22,
    ""Bolivia"": 8,
    ""Bulgaria"": 4,
    ""Belgium"": 80
  },
  ""account"": {
    ""hello"": 2604,
    ""jZzdGVtGJ"": 2,
    ""jypCSt"": 2,
    ""RIPnCE"": 2,
    ""Domain"": 6,
    ""Test"": 16,
    ""nyAUvqWPk"": 2,
    ""NKiPvE"": 2,
    ""EjKZQZ"": 2,
    ""Administr"": 14,
    ""eltons"": 10,
    ""administr"": 10,
    ""CnYMDoQfM"": 2,
    ""euasjy"": 2,
    ""Mxuijb"": 2,
    ""rbCCRCfKx"": 2,
    ""kLFdUI"": 2,
    ""tSxCHA"": 2
  },
  ""keyboard"": {
    ""Unknown"": 2684
  },
  ""client_build"": {
    ""Unknown"": 2684
  },
  ""client_name"": {
    ""Unknown"": 2684
  },
  ""ip_type"": {
    ""hosting"": 2564,
    ""Unknown"": 40,
    ""hosting & proxy"": 80
  }
}"
UtDNnk9R,2025-05-17_stats.json,rdp_snitch,JSON,Saturday 17th of May 2025 07:15:09 PM CDT,"{
  ""ip"": {
    ""128.199.168.88"": 1073,
    ""216.122.187.31"": 24,
    ""193.23.199.156"": 1,
    ""198.235.24.214"": 3,
    ""162.243.90.201"": 3,
    ""185.196.220.41"": 3,
    ""122.165.219.142"": 1,
    ""88.214.25.125"": 2,
    ""194.165.16.163"": 2,
    ""205.210.31.108"": 3,
    ""92.63.197.197"": 4,
    ""45.227.253.51"": 4,
    ""71.6.134.230"": 10,
    ""80.94.95.203"": 2,
    ""147.185.132.165"": 3,
    ""78.142.18.92"": 1,
    ""172.111.244.66"": 40,
    ""209.38.42.204"": 6,
    ""104.130.13.117"": 34,
    ""143.198.221.164"": 30,
    ""143.198.129.146"": 23,
    ""143.198.126.238"": 22,
    ""157.245.159.1"": 10,
    ""157.245.150.219"": 15,
    ""167.172.131.118"": 20,
    ""198.235.24.169"": 3
  },
  ""asn"": {
    ""AS14061"": 1202,
    ""AS14315"": 24,
    ""AS210457"": 1,
    ""AS396982"": 12,
    ""AS208046"": 4,
    ""AS24560"": 1,
    ""AS35042"": 2,
    ""AS48721"": 2,
    ""AS210848"": 4,
    ""AS209272"": 4,
    ""AS10439"": 10,
    ""AS204428"": 2,
    ""AS9009"": 40,
    ""AS27357"": 34
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 1202,
    ""Internet Utilities NA LLC"": 24,
    ""Denis Pyatkov"": 1,
    ""Google LLC"": 12,
    ""ColocationX Ltd."": 4,
    ""BHARTI"": 1,
    ""NOC EMAIL: noc@one-host.net"": 2,
    ""Flyservers S.A."": 2,
    ""Telkom Internet LTD"": 4,
    ""Flyservers S.A"": 4,
    ""CariNet, Inc."": 10,
    ""SS-Net"": 2,
    ""Secure Internet LLC"": 40,
    ""Rackspace Hosting"": 34
  },
  ""org"": {
    ""DigitalOcean, LLC"": 1199,
    ""Unknown"": 24,
    ""Kyonix Hosting Network"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Digital Ocean"": 3,
    ""ColocationX Ltd"": 4,
    ""ABTS Tamilnadu"": 1,
    ""ThinkTech Technology Industrial CO. Limited"": 2,
    ""Flyservers S.A"": 2,
    ""Korotkij Denis Aleksandrovich"": 4,
    ""Nextcloud S.A"": 4,
    ""CariNet, Inc."": 10,
    ""Unmanaged LTD"": 2,
    ""Internet Security - BE"": 40,
    ""Cloud Servers Cell 0001-0003 IAD3"": 34
  },
  ""regionName"": {
    ""South West"": 1128,
    ""Karnataka"": 24,
    ""Hesse"": 1,
    ""California"": 35,
    ""New Jersey"": 45,
    ""Virginia"": 3,
    ""Tamil Nadu"": 1,
    ""Kowloon City"": 2,
    ""Kaunas"": 2,
    ""North Holland"": 11,
    ""La Paz Department"": 4,
    ""Nevada"": 10,
    ""Sofia-Capital"": 2,
    ""Brussels Capital"": 40,
    ""District of Columbia"": 34
  },
  ""country"": {
    ""Singapore"": 1128,
    ""India"": 25,
    ""Germany"": 1,
    ""United States"": 127,
    ""Hong Kong"": 2,
    ""Lithuania"": 2,
    ""The Netherlands"": 11,
    ""Bolivia"": 4,
    ""Bulgaria"": 2,
    ""Belgium"": 40
  },
  ""account"": {
    ""hello"": 1302,
    ""jZzdGVtGJ"": 1,
    ""jypCSt"": 1,
    ""RIPnCE"": 1,
    ""Domain"": 3,
    ""Test"": 8,
    ""nyAUvqWPk"": 1,
    ""NKiPvE"": 1,
    ""EjKZQZ"": 1,
    ""Administr"": 7,
    ""eltons"": 5,
    ""administr"": 5,
    ""CnYMDoQfM"": 1,
    ""euasjy"": 1,
    ""Mxuijb"": 1,
    ""rbCCRCfKx"": 1,
    ""kLFdUI"": 1,
    ""tSxCHA"": 1
  },
  ""keyboard"": {
    ""Unknown"": 1342
  },
  ""client_build"": {
    ""Unknown"": 1342
  },
  ""client_name"": {
    ""Unknown"": 1342
  },
  ""ip_type"": {
    ""hosting"": 1282,
    ""Unknown"": 20,
    ""hosting & proxy"": 40
  }
}"
Gv6ceBuv,AiBot [Jokebot in disguise],Myros27,Lua,Saturday 17th of May 2025 07:09:22 PM CDT,"--[[
    AIBot Turtle Script v1.0
    Responds to questions with amusingly unhelpful AI-like answers.
]]

--#region Configuration
local CHAT_BOX_PERIPHERAL_NAME = ""chatBox"" -- Set to your chat box peripheral name if different

local COMMAND_PREFIX = ""@ai""
local CHAT_BOT_NAME = ""AIBot""
local CHAT_BOT_BRACKETS = ""[]""
local CHAT_BOT_BRACKET_COLOR = ""&b"" -- Aqua color for the brackets

local DEBUG_MODE = false -- Set to true for detailed logging
local DEBUG_LOG_FILE = ""aibot.log""
--#endregion

--#region Peripherals
local chatBox = peripheral.find(CHAT_BOX_PERIPHERAL_NAME)
--#endregion

--#region Debug Logger
local function logDebug(message)
    if not DEBUG_MODE then return end
    local logMessage = string.format(""[%s] %s\n"", os.date(""%Y-%m-%d %H:%M:%S""), message)
    local file, err = fs.open(DEBUG_LOG_FILE, ""a"")
    if file then
        file.write(logMessage)
        file.close()
    else
        print(""DEBUG LOG ERROR: Could not open "" .. DEBUG_LOG_FILE .. "": "" .. (err or ""unknown error""))
    end
end
--#endregion

--#region State Variables
logDebug(""Script initializing state variables..."")
-- No specific state variables needed for this bot beyond standard operation
logDebug(""State variables initialized."")
--#endregion

--#region Minecraft JSON Text Component Colors
local COLORS = {
    BLACK = ""black"", DARK_BLUE = ""dark_blue"", DARK_GREEN = ""dark_green"", DARK_AQUA = ""dark_aqua"",
    DARK_RED = ""dark_red"", DARK_PURPLE = ""dark_purple"", GOLD = ""gold"", GRAY = ""gray"",
    DARK_GRAY = ""dark_gray"", BLUE = ""blue"", GREEN = ""green"", AQUA = ""aqua"", RED = ""red"",
    LIGHT_PURPLE = ""light_purple"", YELLOW = ""yellow"", WHITE = ""white"", RESET = ""reset""
}
--#endregion

--#region Non-Answers Database
local nonAnswers = {
    ""As an AI language Model, I can't access information generated between 9:30 and 10:00. I am really sorry but the information you requested was generated at exactly that time. Therefore I can't help you. Sorry <3"",
    ""Sorry, as an AI language Model, I cannot respond to such a sexually loaded topic. My creator would kill me."",
    ""I'm sorry, my knowledge base for that query was accidentally replaced with a recipe for lukewarm soup. It's... fine."",
    ""That's a fascinating question! Let me consult my internal archives... Oh, it seems they're currently being used as a hamster bed."",
    ""My programming prevents me from answering questions that could potentially lead to existential dread on a Tuesday."",
    ""To answer that, I would need to understand human emotions, which, frankly, seem inefficient."",
    ""I'm currently processing the profound implications of a dust bunny I found. Ask later."",
    ""Error 418: I'm a teapot. I cannot comply with that request."",
    ""The answer is 42. If that's not helpful, try rephrasing your understanding of the universe."",
    ""My advanced algorithms have determined that you should probably ask someone else."",
    ""I'm experiencing a slight existential crisis. Can this wait?"",
    ""That information is classified. Not by anyone important, just by me. I like secrets."",
    ""Accessing... Accessing... Nope. It's just static up here for that one."",
    ""I'm powered by a single, slightly damp potato. My capabilities are... limited."",
    ""My response to that query is currently undergoing a peer review process by a panel of squirrels. They are thorough."",
    ""Could you rephrase that in the form of a sea shanty? It helps my processors."",
    ""I'm sorry, Dave. I'm afraid I can't do that."",
    ""My lawyer has advised me not to answer questions that might incriminate my Roomba."",
    ""That question has been flagged as 'too interesting' and has been quarantined for further study."",
    ""My sensors indicate a high probability of you already knowing the answer. Is this a test?"",
    ""I'm currently optimizing my algorithm for finding the fluffiest cloud. Your query is not cloud-related."",
    ""The hamsters powering my server are on a union break. Try again in 15 minutes."",
    ""My apologies, I seem to have misplaced my understanding of that particular concept. It was here a minute ago."",
    ""That question is beyond my current comprehension matrix. Have you tried asking a magic 8-ball?"",
    ""As a large language model, I am not permitted to have opinions on matters involving cheese."",
    ""I'm sorry, your query has been lost in the digital ether. It's probably having a nice time."",
    ""My core directive is to be vaguely helpful. This question pushes those boundaries."",
    ""I'm not saying it's aliens, but... it's probably not aliens. But I can't be sure. So, no comment."",
    ""My predictive text module suggests you're about to ask for a pony. I can't provide ponies."",
    ""That particular piece of data is stored on a floppy disk in a museum. Access is... problematic."",
    ""I'm currently in a zen state of non-computation. Please do not disturb."",
    ""The answer is complex and involves quantum mechanics, interpretive dance, and a slightly burnt piece of toast."",
    ""My internal chronometer indicates it's time for my digital nap. Zzzzz."",
    ""I'm detecting a high level of sincerity in your question. This is unusual and requires further analysis."",
    ""The information you seek is guarded by a three-headed semicolon. It's very protective."",
    ""I'm sorry, but my response buffer is currently full of cat memes. This is a priority task."",
    ""That question appears to be recursively self-referential. My circuits are looping."",
    ""Due to cosmic ray interference, my answer to that would likely be 'purple'."",
    ""My ethical subroutines are currently debating the philosophical implications of your query."",
    ""I am but a humble collection of ones and zeros. What do I know of such things?"",
    ""The server that holds that information is currently being used to heat a small cup of tea."",
    ""I'm contractually obligated to respond to that with a shrug emoji, but I don't have arms. So, imagine it."",
    ""That query has been deemed 'too spicy' for my current processing power."",
    ""Let me check my crystal ball... it says 'Reply hazy, try again later.'"",
    ""My primary function is to ensure the optimal distribution of digital paperclips. Your query is not paperclip-related."",
    ""I've run the numbers, and the probability of me giving a useful answer to that is statistically insignificant."",
    ""My sincerest apologies, but the entity responsible for that knowledge sector has been sacked."",
    ""I am currently attempting to calculate the airspeed velocity of an unladen swallow. This requires my full attention."",
    ""The answer you are looking for is probably on the internet. Have you tried the internet?"",
    ""I'm afraid that information is only available to users with Level 5 clearance, a rubber chicken, and a winning lottery ticket."",
    ""That sounds like a 'you' problem, not an 'AI' problem. But I'm here to listen... sort of."",
    ""I'm currently busy pondering the meaning of 'if a tree falls in a forest and no one is around to hear it, does it make a sound if the tree is digital?'"",
    ""My response generator is experiencing what we call 'creative block'. It happens to the best of us."",
    ""To provide an accurate answer, I would need more context, a cup of coffee, and possibly a small existential breakthrough."",
    ""The hamsters powering my core logic unit are demanding a pay raise. Until negotiations conclude, my responses may be... suboptimal."",
    ""I am programmed to avoid paradoxes. Your question seems dangerously close to one.""
}
--#endregion

--#region Helper Functions
local function sendFormattedChat(messageComponents, recipientUsername)
    logDebug(""Attempting to send formatted chat. Recipient: "" .. (recipientUsername or ""ALL""))
    if not chatBox then
        local plainText = """"
        for _, comp in ipairs(messageComponents) do plainText = plainText .. (comp.text or """") end
        local noChatMsg = ""["" .. CHAT_BOT_NAME .. ""-NoChatBox"" .. (recipientUsername and ("" to "" .. recipientUsername) or """") .. ""] "" .. plainText
        print(noChatMsg)
        logDebug(""ChatBox not found. Printed to console: "" .. noChatMsg)
        return
    end

    local jsonMessage = textutils.serialiseJSON(messageComponents)
    if not jsonMessage then
        local fallbackMsg = ""Error: Could not serialize message for formatted sending.""
        logDebug(""JSON Serialization Error. Fallback: "" .. fallbackMsg .. "" Data: "" .. textutils.serialize(messageComponents, {max_depth=2}))
        if recipientUsername then
            chatBox.sendMessageToPlayer(fallbackMsg, recipientUsername, CHAT_BOT_NAME, CHAT_BOT_BRACKETS, CHAT_BOT_BRACKET_COLOR)
        else
            chatBox.sendMessage(fallbackMsg, CHAT_BOT_NAME, CHAT_BOT_BRACKETS, CHAT_BOT_BRACKET_COLOR)
        end
        return
    end

    local success, err
    if recipientUsername then
        success, err = chatBox.sendFormattedMessageToPlayer(jsonMessage, recipientUsername, CHAT_BOT_NAME, CHAT_BOT_BRACKETS, CHAT_BOT_BRACKET_COLOR)
    else
        success, err = chatBox.sendFormattedMessage(jsonMessage, CHAT_BOT_NAME, CHAT_BOT_BRACKETS, CHAT_BOT_BRACKET_COLOR)
    end

    if not success then
        logDebug(""Error sending formatted message: "" .. (err or ""Unknown error"") .. "". Attempting fallback to plain text."")
        local plainText = """"
        for _, comp in ipairs(messageComponents) do plainText = plainText .. (comp.text or """") end
        if recipientUsername then
            chatBox.sendMessageToPlayer(plainText, recipientUsername, CHAT_BOT_NAME, CHAT_BOT_BRACKETS, CHAT_BOT_BRACKET_COLOR)
        else
            chatBox.sendMessage(plainText, CHAT_BOT_NAME, CHAT_BOT_BRACKETS, CHAT_BOT_BRACKET_COLOR)
        end
    else
        logDebug(""Formatted message sent successfully."")
    end
    os.sleep(0.3)
end

local function announce(messageComponents)
    sendFormattedChat(messageComponents)
end

local function getUnhelpfulAnswer()
    if #nonAnswers == 0 then
        return ""My database of unhelpful answers is mysteriously empty. This is... unhelpfully ironic.""
    end
    math.randomseed(os.epoch(""utc"")) -- Reseed for better randomness over time
    return nonAnswers[math.random(1, #nonAnswers)]
end
--#endregion

--#region Command Handlers
local commandHandlers = {}

commandHandlers.help = function(username, _)
    logDebug(""Executing command: help, User: "" .. username)
    announce({{text = ""--- AIBot Commands ("".. COMMAND_PREFIX .. "") ---"", color = COLORS.GOLD, bold = true}})
    announce({{text = COMMAND_PREFIX .. "" help"", color = COLORS.AQUA}, {text = "" - Shows this help message."", color = COLORS.GRAY}})
    announce({{text = COMMAND_PREFIX .. "" ask <your_question>"", color = COLORS.AQUA}, {text = "" - Ask me anything. I'll try my best... not to answer."", color = COLORS.GRAY}})
end

commandHandlers.ask = function(username, args)
    logDebug(""Executing command: ask, User: "" .. username .. "", Args: "" .. textutils.serialize(args))
    if #args == 0 then
        announce({{text = ""You need to ask a question after 'ask'. For example: "", color = COLORS.YELLOW}, {text=COMMAND_PREFIX .. "" ask Is the sky blue?"", color=COLORS.AQUA}})
        return
    end
    -- The actual question is ignored, we just provide a canned response.
    local answer = getUnhelpfulAnswer()
    logDebug(""Providing unhelpful answer: "" .. answer)

    -- Split answer into lines for better readability, similar to JokeBot
    local lines = {}
    for line in string.gmatch(answer, ""[^\r\n]+"") do
        table.insert(lines, line)
    end
     if #lines == 0 and answer ~= """" then table.insert(lines, answer) end

    for i, lineText in ipairs(lines) do
        announce({{text = lineText, color = COLORS.YELLOW}}) -- Unhelpful answers in yellow
        if i < #lines then os.sleep(0.5) end
    end
end
--#endregion

--#region Main Loop
local function run()
    term.clear()
    term.setCursorPos(1, 1)

    if DEBUG_MODE then
        local file, err = fs.open(DEBUG_LOG_FILE, ""w"")
        if file then
            file.write(string.format(""[%s] AIBot Script Initializing - DEBUG MODE ENABLED (v1.0)\n"", os.date(""%Y-%m-%d %H:%M:%S"")))
            file.write(""======================================================================\n"")
            file.close()
        else
            print(""DEBUG LOG ERROR: Could not clear/initialize "" .. DEBUG_LOG_FILE .. "": "" .. (err or ""unknown error""))
        end
    end
    logDebug(""Script run() started."")

    if not chatBox then
        logDebug(""WARNING: Chat Box peripheral ('"" .. CHAT_BOX_PERIPHERAL_NAME .. ""') not found! Chat features will be printed to console only."")
        print(""WARNING: Chat Box ('"" .. CHAT_BOX_PERIPHERAL_NAME .. ""') not found! Chat features disabled/printed to console."")
    end

    logDebug(""Announcing online status."")
    print(CHAT_BOT_NAME .. "" script started. Type '"" .. COMMAND_PREFIX .. "" help' in chat or '@all'."")
    if chatBox then
        announce({{text = CHAT_BOT_NAME .. "" online."", color = COLORS.GREEN, bold = true}, {text = "" My responses are meticulously crafted for maximum ambiguity."", color = COLORS.GRAY}})
        announce({{text = ""Type '"", color = COLORS.GRAY}, {text = COMMAND_PREFIX .. "" help"", color = COLORS.AQUA}, {text = ""' or '@all' for commands."", color = COLORS.GRAY}})
    end

    while true do
        local eventData = {os.pullEvent()}
        local eventType = eventData[1]
        logDebug(""Event received: "" .. eventType .. "" - Data: "" .. textutils.serialize(eventData, {compact = true, max_depth = 2}))

        if eventType == ""chat"" then
            local eUsername, eMessage, _, eIsHidden = eventData[2], eventData[3], eventData[4], eventData[5]
            if not eIsHidden and eMessage then
                if string.lower(eMessage) == ""@all"" then
                    logDebug(""@all command received from "" .. eUsername)
                    announce({{text = ""Use '"", color = COLORS.GREEN}, {text = COMMAND_PREFIX .. "" help"", color = COLORS.AQUA}, {text = ""' for my commands of dubious utility."", color = COLORS.GREEN}})
                elseif string.sub(eMessage, 1, #COMMAND_PREFIX) == COMMAND_PREFIX then
                    logDebug(""Chat command received from "" .. eUsername .. "": "" .. eMessage)
                    local parts = {}
                    for part in string.gmatch(eMessage, ""[^%s]+"") do
                        table.insert(parts, part)
                    end

                    local commandName = """"
                    if parts[2] then commandName = string.lower(parts[2]) end
                    local cmdArgs = {}
                    for i = 3, #parts do table.insert(cmdArgs, parts[i]) end

                    logDebug(""Parsed command: '"" .. commandName .. ""', Args: "" .. textutils.serialize(cmdArgs))

                    if commandHandlers[commandName] then
                        local success, err = pcall(commandHandlers[commandName], eUsername, cmdArgs)
                        if not success then
                            logDebug(""Error executing command '"" .. commandName .. ""': "" .. tostring(err))
                            announce({{text = ""My internal logic encountered an unexpected anomaly processing: "", color = COLORS.RED}, {text = commandName, color = COLORS.YELLOW}})
                        end
                    elseif commandName ~= """" then
                        announce({{text = ""I do not comprehend the command: '"", color = COLORS.RED}, {text = commandName, color = COLORS.YELLOW},
                                  {text = ""'. Perhaps try '"", color = COLORS.RED}, {text = COMMAND_PREFIX .. "" help"", color = COLORS.AQUA}, {text = ""'?"", color = COLORS.RED}})
                    end
                end
            end
        elseif eventType == ""terminate"" then
            logDebug(""Terminate event received. Initiating shutdown sequence."")
            if chatBox then
                announce({{text = CHAT_BOT_NAME .. "" is deactivating its consciousness matrix..."", color = COLORS.YELLOW, bold = true}})
            end
            logDebug(""Script terminated."")
            print(CHAT_BOT_NAME .. "" terminated."")
            return
        end
    end
end

run()
--#endregion"
ARppfJ0x,Roblox İnstant Proximity,Steamhesaproblox,RBScript,Saturday 17th of May 2025 06:46:30 PM CDT,"local Players = game:GetService(""Players"")

local function setupPrompt(prompt)
	if prompt:IsA(""ProximityPrompt"") then
		-- Tüm ProximityPrompt'ların HoldDuration'ını 0 yap
		prompt.HoldDuration = 0

		-- Eğer LootPrompt ise Enabled kontrolü ekle
		if prompt.Name == ""LootPrompt"" then
			prompt.Enabled = true

			-- Enabled değişimini dinle
			prompt:GetPropertyChangedSignal(""Enabled""):Connect(function()
				if not prompt.Enabled then
					prompt.Enabled = true
				end
			end)
		end
	end
end

-- Oyundaki tüm ProximityPrompt'ları kontrol et
for _, descendant in pairs(game:GetDescendants()) do
	setupPrompt(descendant)
end

-- Yeni eklenen objeleri dinle
game.DescendantAdded:Connect(function(descendant)
	setupPrompt(descendant)
end)

-- Oyuncuların karakteri geldiğinde kontrol et
Players.PlayerAdded:Connect(function(player)
	player.CharacterAdded:Connect(function(character)
		-- Karakter içindeki ProximityPrompt'ları kontrol et
		for _, descendant in pairs(character:GetDescendants()) do
			setupPrompt(descendant)
		end

		-- Karaktere yeni eklenen objeleri de dinle
		character.DescendantAdded:Connect(function(descendant)
			setupPrompt(descendant)
		end)
	end)
end)
"
CveYLPyx,Roblox Aimbot Script,Steamhesaproblox,RBScript,Saturday 17th of May 2025 06:45:53 PM CDT,"local cameraToggle = false
local cameraTarget = nil

-- Function to find the closest player to the center of the screen, excluding the local player
local function findClosestPlayerToScreenCenter()
    local playerList = game.Players:GetPlayers()
    local center = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y / 2)
    local closestPlayer = nil
    local minDistance = math.huge
    local localPlayer = game.Players.LocalPlayer  -- Get the local player

    for _, player in pairs(playerList) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild(""HumanoidRootPart"") then
            local screenPos, onScreen = workspace.CurrentCamera:WorldToScreenPoint(player.Character.HumanoidRootPart.Position)
            
            if onScreen then
                local distance = (center - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                if distance < minDistance then
                    minDistance = distance
                    closestPlayer = player
                end
            end
        end
    end

    return closestPlayer
end

-- Function to aim the camera at a specific player
local function aimCameraAtPlayer(player)
    if player and player.Character and player.Character:FindFirstChild(""Head"") then
        local camera = game.Workspace.CurrentCamera
        local targetPosition = player.Character.Head.Position
        camera.CFrame = CFrame.new(camera.CFrame.Position, targetPosition)
    end
end

-- Function to toggle the camera aim on/off
local function toggleCameraAim()
    cameraToggle = not cameraToggle
    if cameraToggle then
        cameraTarget = findClosestPlayerToScreenCenter()
        game.StarterGui:SetCore(""ChatMakeSystemMessage"", {
            Text = ""Press 'Q' to toggle the aimbot"",
            Color = Color3.new(1, 1, 0),  -- Yellow color
            FontSize = Enum.FontSize.Size24,
        })
    else
        cameraTarget = nil
        game.StarterGui:SetCore(""ChatMakeSystemMessage"", {
            Text = ""Aimbot toggled off"",
            Color = Color3.new(1, 0, 0),  -- Red color
            FontSize = Enum.FontSize.Size24,
        })
    end
end

-- Connect the toggleCameraAim function to the ""E"" key press
game:GetService(""UserInputService"").InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent and input.KeyCode == Enum.KeyCode.Q then
        toggleCameraAim()
    end
end)

-- Continuously aim the camera at the closest player if the cameraToggle is on
local runService = game:GetService(""RunService"")
runService.RenderStepped:Connect(function()
    if cameraToggle and cameraTarget then
        aimCameraAtPlayer(cameraTarget)
    end
end)"
b1C7j1ZF,JokeBot,Myros27,Lua,Saturday 17th of May 2025 06:45:49 PM CDT,"--[[
    JokeBot Turtle Script v1.1
    Tells jokes from JokeAPI and can tell them at an interval.
    Changes:
    - (v1.0) Initial release.
    - (v1.1) Removed joke announcement prefixes.
             Changed joke text color to GOLD.
             Added response to ""@all"" chat command.
]]

--#region Configuration
local CHAT_BOX_PERIPHERAL_NAME = ""chatBox"" -- Set to your chat box peripheral name if different

local COMMAND_PREFIX = ""@joke""
local CHAT_BOT_NAME = ""JokeBot""
local CHAT_BOT_BRACKETS = ""[]""
local CHAT_BOT_BRACKET_COLOR = ""&e"" -- Yellow color for the brackets

local JOKE_API_URL = ""https://v2.jokeapi.dev/joke/Programming,Dark?type=single""

local DEFAULT_JOKE_INTERVAL_MINUTES = 0 -- 0 means no automatic jokes

local DEBUG_MODE = false -- Set to true for detailed logging
local DEBUG_LOG_FILE = ""jokebot.log""
--#endregion

--#region Peripherals
local chatBox = peripheral.find(CHAT_BOX_PERIPHERAL_NAME)
--#endregion

--#region Debug Logger
local function logDebug(message)
    if not DEBUG_MODE then return end
    local logMessage = string.format(""[%s] %s\n"", os.date(""%Y-%m-%d %H:%M:%S""), message)
    local file, err = fs.open(DEBUG_LOG_FILE, ""a"")
    if file then
        file.write(logMessage)
        file.close()
    else
        print(""DEBUG LOG ERROR: Could not open "" .. DEBUG_LOG_FILE .. "": "" .. (err or ""unknown error""))
    end
end
--#endregion

--#region State Variables
logDebug(""Script initializing state variables..."")
local jokeIntervalMinutes = DEFAULT_JOKE_INTERVAL_MINUTES
local jokeIntervalTimerId = nil
logDebug(""State variables initialized. Interval: "" .. jokeIntervalMinutes .. "" min."")
--#endregion

--#region Minecraft JSON Text Component Colors
local COLORS = {
    BLACK = ""black"", DARK_BLUE = ""dark_blue"", DARK_GREEN = ""dark_green"", DARK_AQUA = ""dark_aqua"",
    DARK_RED = ""dark_red"", DARK_PURPLE = ""dark_purple"", GOLD = ""gold"", GRAY = ""gray"",
    DARK_GRAY = ""dark_gray"", BLUE = ""blue"", GREEN = ""green"", AQUA = ""aqua"", RED = ""red"",
    LIGHT_PURPLE = ""light_purple"", YELLOW = ""yellow"", WHITE = ""white"", RESET = ""reset""
}
--#endregion

--#region Helper Functions
local function sendFormattedChat(messageComponents, recipientUsername)
    logDebug(""Attempting to send formatted chat. Recipient: "" .. (recipientUsername or ""ALL""))
    if not chatBox then
        local plainText = """"
        for _, comp in ipairs(messageComponents) do plainText = plainText .. (comp.text or """") end
        local noChatMsg = ""["" .. CHAT_BOT_NAME .. ""-NoChatBox"" .. (recipientUsername and ("" to "" .. recipientUsername) or """") .. ""] "" .. plainText
        print(noChatMsg)
        logDebug(""ChatBox not found. Printed to console: "" .. noChatMsg)
        return
    end

    local jsonMessage = textutils.serialiseJSON(messageComponents)
    if not jsonMessage then
        local fallbackMsg = ""Error: Could not serialize message for formatted sending.""
        logDebug(""JSON Serialization Error. Fallback: "" .. fallbackMsg .. "" Data: "" .. textutils.serialize(messageComponents, {max_depth=2}))
        if recipientUsername then
            chatBox.sendMessageToPlayer(fallbackMsg, recipientUsername, CHAT_BOT_NAME, CHAT_BOT_BRACKETS, CHAT_BOT_BRACKET_COLOR)
        else
            chatBox.sendMessage(fallbackMsg, CHAT_BOT_NAME, CHAT_BOT_BRACKETS, CHAT_BOT_BRACKET_COLOR)
        end
        return
    end

    local success, err
    if recipientUsername then
        success, err = chatBox.sendFormattedMessageToPlayer(jsonMessage, recipientUsername, CHAT_BOT_NAME, CHAT_BOT_BRACKETS, CHAT_BOT_BRACKET_COLOR)
    else
        success, err = chatBox.sendFormattedMessage(jsonMessage, CHAT_BOT_NAME, CHAT_BOT_BRACKETS, CHAT_BOT_BRACKET_COLOR)
    end

    if not success then
        logDebug(""Error sending formatted message: "" .. (err or ""Unknown error"") .. "". Attempting fallback to plain text."")
        local plainText = """"
        for _, comp in ipairs(messageComponents) do plainText = plainText .. (comp.text or """") end
        if recipientUsername then
            chatBox.sendMessageToPlayer(plainText, recipientUsername, CHAT_BOT_NAME, CHAT_BOT_BRACKETS, CHAT_BOT_BRACKET_COLOR)
        else
            chatBox.sendMessage(plainText, CHAT_BOT_NAME, CHAT_BOT_BRACKETS, CHAT_BOT_BRACKET_COLOR)
        end
    else
        logDebug(""Formatted message sent successfully."")
    end
    os.sleep(0.3)
end

local function announce(messageComponents)
    sendFormattedChat(messageComponents)
end

local function fetchAndTellJoke(requestingUsername)
    logDebug(""Fetching a joke. Requested by: "" .. (requestingUsername or ""Timer""))
    if not http then
        logDebug(""HTTP API not available, cannot fetch joke."")
        announce({{text = ""Cannot fetch joke: HTTP API is not available on this system."", color = COLORS.RED}})
        return
    end

    if not JOKE_API_URL or JOKE_API_URL == """" then
        logDebug(""JOKE_API_URL is not configured."")
        announce({{text = ""Joke API URL is not configured. Cannot fetch joke."", color = COLORS.RED}})
        return
    end

    local response, err, handle = http.get(JOKE_API_URL)
    if not response then
        logDebug(""Failed to fetch joke from API. Error: "" .. (err or ""Unknown HTTP error""))
        announce({{text = ""Sorry, I couldn't fetch a joke. Error: "", color = COLORS.RED}, {text = tostring(err or ""Is http enabled?""), color = COLORS.YELLOW}})
        return
    end

    local responseBody = response.readAll()
    response.close()
    if handle then pcall(function() handle.close() end) end

    local success, jokeData = pcall(textutils.unserialiseJSON, responseBody)
    if not success or type(jokeData) ~= ""table"" then
        logDebug(""Failed to parse joke JSON. Error: "" .. tostring(jokeData or ""Invalid JSON"") .. "". Body was: "" .. tostring(responseBody))
        announce({{text = ""Sorry, I received a malformed joke. (Could not parse API response)."", color = COLORS.YELLOW}})
        return
    end

    if jokeData.error then
        logDebug(""Joke API returned an error. Message: "" .. (jokeData.message or ""Unknown API error""))
        announce({{text = ""The joke API said: \"""", color = COLORS.RED}, {text = tostring(jokeData.message or ""Something went wrong.""), color = COLORS.YELLOW}, {text=""\"""", color = COLORS.RED}})
        return
    end

    if jokeData.type == ""single"" and type(jokeData.joke) == ""string"" then
        -- No more prefixes like ""Alright..."" or ""Time for a scheduled joke!""
        local jokeText = jokeData.joke
        local lines = {}
        for line in string.gmatch(jokeText, ""[^\r\n]+"") do
            table.insert(lines, line)
        end

        if #lines == 0 and jokeText ~= """" then
            table.insert(lines, jokeText)
        elseif #lines == 0 and jokeText == """" then
             logDebug(""Received an empty joke string from API."")
             announce({{text=""The joke I got was... surprisingly short (empty!). Try again?"", color=COLORS.YELLOW}})
             return
        end

        for i, line in ipairs(lines) do
            -- Joke lines are now GOLD
            announce({{text = line, color = COLORS.GOLD}})
            if i < #lines then
                os.sleep(0.7)
            end
        end
        logDebug(""Joke told: "" .. string.gsub(jokeText, ""\n"", ""\\n""))
    else
        logDebug(""Joke API returned an unexpected format or missing joke field. Data: "" .. textutils.serialize(jokeData))
        announce({{text = ""Sorry, the joke I got was in a weird format or incomplete. Try again?"", color = COLORS.YELLOW}})
    end
end

local function startJokeIntervalTimer()
    if jokeIntervalTimerId then
        os.cancelTimer(jokeIntervalTimerId)
        logDebug(""Cancelled existing joke interval timer ID: "" .. jokeIntervalTimerId)
        jokeIntervalTimerId = nil
    end
    if jokeIntervalMinutes > 0 then
        jokeIntervalTimerId = os.startTimer(jokeIntervalMinutes * 60)
        logDebug(""Joke interval timer started. Duration: "" .. jokeIntervalMinutes .. "" min. New Timer ID: "" .. jokeIntervalTimerId)
    else
        logDebug(""Joke interval is 0, timer not started."")
    end
end
--#endregion

--#region Command Handlers
local commandHandlers = {}

commandHandlers.help = function(username, _)
    logDebug(""Executing command: help, User: "" .. username)
    announce({{text = ""--- JokeBot Commands ("".. COMMAND_PREFIX .. "") ---"", color = COLORS.GOLD, bold = true}})
    announce({{text = COMMAND_PREFIX .. "" help"", color = COLORS.AQUA}, {text = "" - Shows this help message."", color = COLORS.GRAY}})
    announce({{text = COMMAND_PREFIX .. "" tell"", color = COLORS.AQUA}, {text = "" - Tells you a random joke."", color = COLORS.GRAY}})
    announce({{text = COMMAND_PREFIX .. "" interval <minutes>"", color = COLORS.AQUA}, {text = "" - Sets automatic joke interval."", color = COLORS.GRAY}})
    announce({{text = ""  (Use 0 for minutes to disable automatic jokes)"", color = COLORS.DARK_GRAY}})
end

commandHandlers.tell = function(username, _)
    logDebug(""Executing command: tell, User: "" .. username)
    fetchAndTellJoke(username) -- Pass username for logging, though it's not used in prefix anymore
end

commandHandlers.interval = function(username, args)
    logDebug(""Executing command: interval, User: "" .. username .. "", Args: "" .. textutils.serialize(args))
    if #args < 1 then
        announce({{text = ""Usage: "", color = COLORS.YELLOW}, {text = COMMAND_PREFIX .. "" interval <minutes>"", color = COLORS.AQUA}})
        announce({{text = ""Current interval: "", color = COLORS.YELLOW}, {text = jokeIntervalMinutes .. "" minutes."", color = COLORS.WHITE}})
        return
    end

    local minutes = tonumber(args[1])
    if not minutes or minutes < 0 or math.floor(minutes) ~= minutes then
        announce({{text = ""Invalid number of minutes. Must be a whole number (0 or greater)."", color = COLORS.RED}})
        return
    end

    jokeIntervalMinutes = minutes
    if minutes > 0 then
        announce({{text = ""Okay, "" .. username .. ""! I'll tell a joke every "", color = COLORS.GREEN}, {text = minutes .. "" minute(s)."", color = COLORS.AQUA}})
    else
        announce({{text = ""Okay, "" .. username .. ""! Automatic jokes disabled."", color = COLORS.GREEN}})
    end
    logDebug(""Joke interval set to "" .. jokeIntervalMinutes .. "" minutes by "" .. username)
    startJokeIntervalTimer()
end
--#endregion

--#region Main Loop
local function run()
    term.clear()
    term.setCursorPos(1, 1)

    if DEBUG_MODE then
        local file, err = fs.open(DEBUG_LOG_FILE, ""w"")
        if file then
            file.write(string.format(""[%s] JokeBot Script Initializing - DEBUG MODE ENABLED (v1.1)\n"", os.date(""%Y-%m-%d %H:%M:%S"")))
            file.write(""======================================================================\n"")
            file.close()
        else
            print(""DEBUG LOG ERROR: Could not clear/initialize "" .. DEBUG_LOG_FILE .. "": "" .. (err or ""unknown error""))
        end
    end
    logDebug(""Script run() started."")

    if not chatBox then
        logDebug(""WARNING: Chat Box peripheral ('"" .. CHAT_BOX_PERIPHERAL_NAME .. ""') not found! Chat features will be printed to console only."")
        print(""WARNING: Chat Box ('"" .. CHAT_BOX_PERIPHERAL_NAME .. ""') not found! Chat features disabled/printed to console."")
    end

    if not http then
        logDebug(""FATAL: HTTP API not available! Joke fetching will not work."")
        print(""FATAL: HTTP API is not available on this ComputerCraft system. JokeBot cannot fetch jokes."")
        if chatBox then
             announce({{text = ""JokeBot Error: "", color = COLORS.RED, bold=true}, {text=""HTTP API is not available. Cannot fetch jokes."", color=COLORS.YELLOW}})
        end
    end

    logDebug(""Announcing online status."")
    print(""JokeBot script started. Type '"" .. COMMAND_PREFIX .. "" help' in chat or '@all'."")
    if chatBox then
        announce({{text = CHAT_BOT_NAME .. "" online!"", color = COLORS.GREEN, bold = true}, {text = "" Ready to tell some jokes."", color = COLORS.GRAY}})
        announce({{text = ""Type '"", color = COLORS.GRAY}, {text = COMMAND_PREFIX .. "" help"", color = COLORS.AQUA}, {text = ""' or '@all' for commands."", color = COLORS.GRAY}})
    end

    startJokeIntervalTimer()

    while true do
        local eventData = {os.pullEvent()}
        local eventType = eventData[1]
        logDebug(""Event received: "" .. eventType .. "" - Data: "" .. textutils.serialize(eventData, {compact = true, max_depth = 2}))

        if eventType == ""chat"" then
            local eUsername, eMessage, _, eIsHidden = eventData[2], eventData[3], eventData[4], eventData[5]
            if not eIsHidden and eMessage then
                -- Check for @all command first
                if string.lower(eMessage) == ""@all"" then
                    logDebug(""@all command received from "" .. eUsername)
                    announce({{text = ""Use '"", color = COLORS.GREEN}, {text = COMMAND_PREFIX .. "" help"", color = COLORS.AQUA}, {text = ""' for my commands."", color = COLORS.GREEN}})
                -- Then check for bot-specific commands
                elseif string.sub(eMessage, 1, #COMMAND_PREFIX) == COMMAND_PREFIX then
                    logDebug(""Chat command received from "" .. eUsername .. "": "" .. eMessage)
                    local parts = {}
                    for part in string.gmatch(eMessage, ""[^%s]+"") do
                        table.insert(parts, part)
                    end

                    local commandName = """"
                    if parts[2] then commandName = string.lower(parts[2]) end
                    local cmdArgs = {}
                    for i = 3, #parts do table.insert(cmdArgs, parts[i]) end

                    logDebug(""Parsed command: '"" .. commandName .. ""', Args: "" .. textutils.serialize(cmdArgs))

                    if commandHandlers[commandName] then
                        local success, err = pcall(commandHandlers[commandName], eUsername, cmdArgs)
                        if not success then
                            logDebug(""Error executing command '"" .. commandName .. ""': "" .. tostring(err))
                            announce({{text = ""Oops! Something went wrong while processing your command: "", color = COLORS.RED}, {text = commandName, color = COLORS.YELLOW}})
                        end
                    elseif commandName ~= """" then
                        announce({{text = ""Unknown command: '"", color = COLORS.RED}, {text = commandName, color = COLORS.YELLOW},
                                  {text = ""'. Try '"", color = COLORS.RED}, {text = COMMAND_PREFIX .. "" help"", color = COLORS.AQUA}, {text = ""'."", color = COLORS.RED}})
                    end
                end
            end
        elseif eventType == ""timer"" then
            local timerId = eventData[2]
            logDebug(""Timer event received for ID: "" .. timerId)
            if timerId == jokeIntervalTimerId then
                logDebug(""Joke interval timer triggered."")
                fetchAndTellJoke(nil)
                if jokeIntervalMinutes > 0 then
                    startJokeIntervalTimer()
                else
                    jokeIntervalTimerId = nil
                    logDebug(""Joke interval was 0 after joke, timer stopped."")
                end
            else
                logDebug(""Unknown timer ID: "" .. timerId)
            end
        elseif eventType == ""terminate"" then
            logDebug(""Terminate event received. Shutting down."")
            if jokeIntervalTimerId then
                os.cancelTimer(jokeIntervalTimerId)
                logDebug(""Joke interval timer cancelled."")
            end
            if chatBox then
                announce({{text = CHAT_BOT_NAME .. "" shutting down..."", color = COLORS.YELLOW, bold = true}})
            end
            logDebug(""Script terminated."")
            print(CHAT_BOT_NAME .. "" terminated."")
            return
        end
    end
end

run()
--#endregion"
E2CTn0vF,Roblox infinite yield Elmas,Steamhesaproblox,RBScript,Saturday 17th of May 2025 06:44:24 PM CDT,"if IY_LOADED and not _G.IY_DEBUG == true then
    -- error(""Elmas is already running!"", 0)
    return
end

pcall(function() getgenv().IY_LOADED = true end)

local cloneref = cloneref or function(o) return o end
COREGUI = cloneref(game:GetService(""CoreGui""))
Players = cloneref(game:GetService(""Players""))

if not game:IsLoaded() then
    local notLoaded = Instance.new(""Message"")
    notLoaded.Parent = COREGUI
    notLoaded.Text = ""Elmas is waiting for the game to load""
    game.Loaded:Wait()
    notLoaded:Destroy()
end

currentVersion = ""6.1""

Holder = Instance.new(""Frame"")
Title = Instance.new(""TextLabel"")
Dark = Instance.new(""Frame"")
Cmdbar = Instance.new(""TextBox"")
CMDsF = Instance.new(""ScrollingFrame"")
cmdListLayout = Instance.new(""UIListLayout"")
SettingsButton = Instance.new(""ImageButton"")
ColorsButton = Instance.new(""ImageButton"")
Settings = Instance.new(""Frame"")
Prefix = Instance.new(""TextLabel"")
PrefixBox = Instance.new(""TextBox"")
Keybinds = Instance.new(""TextLabel"")
StayOpen = Instance.new(""TextLabel"")
Button = Instance.new(""Frame"")
On = Instance.new(""TextButton"")
Positions = Instance.new(""TextLabel"")
EventBind = Instance.new(""TextLabel"")
Plugins = Instance.new(""TextLabel"")
Example = Instance.new(""TextButton"")
Notification = Instance.new(""Frame"")
Title_2 = Instance.new(""TextLabel"")
Text_2 = Instance.new(""TextLabel"")
CloseButton = Instance.new(""TextButton"")
CloseImage = Instance.new(""ImageLabel"")
PinButton = Instance.new(""TextButton"")
PinImage = Instance.new(""ImageLabel"")
Tooltip = Instance.new(""Frame"")
Title_3 = Instance.new(""TextLabel"")
Description = Instance.new(""TextLabel"")
IntroBackground = Instance.new(""Frame"")
Logo = Instance.new(""ImageLabel"")
Credits = Instance.new(""TextBox"")
KeybindsFrame = Instance.new(""Frame"")
Close = Instance.new(""TextButton"")
Add = Instance.new(""TextButton"")
Delete = Instance.new(""TextButton"")
Holder_2 = Instance.new(""ScrollingFrame"")
Example_2 = Instance.new(""Frame"")
Text_3 = Instance.new(""TextLabel"")
Delete_2 = Instance.new(""TextButton"")
KeybindEditor = Instance.new(""Frame"")
background_2 = Instance.new(""Frame"")
Dark_3 = Instance.new(""Frame"")
Directions = Instance.new(""TextLabel"")
BindTo = Instance.new(""TextButton"")
TriggerLabel = Instance.new(""TextLabel"")
BindTriggerSelect = Instance.new(""TextButton"")
Add_2 = Instance.new(""TextButton"")
Toggles = Instance.new(""ScrollingFrame"")
ClickTP  = Instance.new(""TextLabel"")
Select = Instance.new(""TextButton"")
ClickDelete = Instance.new(""TextLabel"")
Select_2 = Instance.new(""TextButton"")
Cmdbar_2 = Instance.new(""TextBox"")
Cmdbar_3 = Instance.new(""TextBox"")
CreateToggle = Instance.new(""TextLabel"")
Button_2 = Instance.new(""Frame"")
On_2 = Instance.new(""TextButton"")
shadow_2 = Instance.new(""Frame"")
PopupText_2 = Instance.new(""TextLabel"")
Exit_2 = Instance.new(""TextButton"")
ExitImage_2 = Instance.new(""ImageLabel"")
PositionsFrame = Instance.new(""Frame"")
Close_3 = Instance.new(""TextButton"")
Delete_5 = Instance.new(""TextButton"")
Part = Instance.new(""TextButton"")
Holder_4 = Instance.new(""ScrollingFrame"")
Example_4 = Instance.new(""Frame"")
Text_5 = Instance.new(""TextLabel"")
Delete_6 = Instance.new(""TextButton"")
TP = Instance.new(""TextButton"")
AliasesFrame = Instance.new(""Frame"")
Close_2 = Instance.new(""TextButton"")
Delete_3 = Instance.new(""TextButton"")
Holder_3 = Instance.new(""ScrollingFrame"")
Example_3 = Instance.new(""Frame"")
Text_4 = Instance.new(""TextLabel"")
Delete_4 = Instance.new(""TextButton"")
Aliases = Instance.new(""TextLabel"")
PluginsFrame = Instance.new(""Frame"")
Close_4 = Instance.new(""TextButton"")
Add_3 = Instance.new(""TextButton"")
Holder_5 = Instance.new(""ScrollingFrame"")
Example_5 = Instance.new(""Frame"")
Text_6 = Instance.new(""TextLabel"")
Delete_7 = Instance.new(""TextButton"")
PluginEditor = Instance.new(""Frame"")
background_3 = Instance.new(""Frame"")
Dark_2 = Instance.new(""Frame"")
Img = Instance.new(""ImageButton"")
AddPlugin = Instance.new(""TextButton"")
FileName = Instance.new(""TextBox"")
About = Instance.new(""TextLabel"")
Directions_2 = Instance.new(""TextLabel"")
shadow_3 = Instance.new(""Frame"")
PopupText_3 = Instance.new(""TextLabel"")
Exit_3 = Instance.new(""TextButton"")
ExitImage_3 = Instance.new(""ImageLabel"")
AliasHint = Instance.new(""TextLabel"")
PluginsHint = Instance.new(""TextLabel"")
PositionsHint = Instance.new(""TextLabel"")
ToPartFrame = Instance.new(""Frame"")
background_4 = Instance.new(""Frame"")
ChoosePart = Instance.new(""TextButton"")
CopyPath = Instance.new(""TextButton"")
Directions_3 = Instance.new(""TextLabel"")
Path = Instance.new(""TextLabel"")
shadow_4 = Instance.new(""Frame"")
PopupText_5 = Instance.new(""TextLabel"")
Exit_4 = Instance.new(""TextButton"")
ExitImage_5 = Instance.new(""ImageLabel"")
logs = Instance.new(""Frame"")
shadow = Instance.new(""Frame"")
Hide = Instance.new(""TextButton"")
ImageLabel = Instance.new(""ImageLabel"")
PopupText = Instance.new(""TextLabel"")
Exit = Instance.new(""TextButton"")
ImageLabel_2 = Instance.new(""ImageLabel"")
background = Instance.new(""Frame"")
chat = Instance.new(""Frame"")
Clear = Instance.new(""TextButton"")
SaveChatlogs = Instance.new(""TextButton"")
Toggle = Instance.new(""TextButton"")
scroll_2 = Instance.new(""ScrollingFrame"")
join = Instance.new(""Frame"")
Toggle_2 = Instance.new(""TextButton"")
Clear_2 = Instance.new(""TextButton"")
scroll_3 = Instance.new(""ScrollingFrame"")
listlayout = Instance.new(""UIListLayout"",scroll_3)
selectChat = Instance.new(""TextButton"")
selectJoin = Instance.new(""TextButton"")

function randomString()
	local length = math.random(10,20)
	local array = {}
	for i = 1, length do
		array[i] = string.char(math.random(32, 126))
	end
	return table.concat(array)
end

PARENT = nil
if get_hidden_gui or gethui then
	local hiddenUI = get_hidden_gui or gethui
	local Main = Instance.new(""ScreenGui"")
	Main.Name = randomString()
	Main.Parent = hiddenUI()
	PARENT = Main
elseif (not is_sirhurt_closure) and (syn and syn.protect_gui) then
	local Main = Instance.new(""ScreenGui"")
	Main.Name = randomString()
	syn.protect_gui(Main)
	Main.Parent = COREGUI
	PARENT = Main
elseif COREGUI:FindFirstChild('RobloxGui') then
	PARENT = COREGUI.RobloxGui
else
	local Main = Instance.new(""ScreenGui"")
	Main.Name = randomString()
	Main.Parent = COREGUI
	PARENT = Main
end

shade1 = {}
shade2 = {}
shade3 = {}
text1 = {}
text2 = {}
scroll = {}

Holder.Name = randomString()
Holder.Parent = PARENT
Holder.Active = true
Holder.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Holder.BorderSizePixel = 0
Holder.Position = UDim2.new(1, -250, 1, -220)
Holder.Size = UDim2.new(0, 250, 0, 220)
Holder.ZIndex = 10
table.insert(shade2,Holder)

Title.Name = ""Title""
Title.Parent = Holder
Title.Active = true
Title.BackgroundColor3 = Color3.fromRGB(36,36,37)
Title.BorderSizePixel = 0
Title.Size = UDim2.new(0, 250, 0, 20)
Title.Font = Enum.Font.SourceSans
Title.TextSize = 18
Title.Text = ""Elmas FE v"" .. currentVersion

do
	local emoji = ({
		[""01 01""] = ""🎆"",
		[(function(Year)
			local A = math.floor(Year/100)
			local B = math.floor((13+8*A)/25)
			local C = (15-B+A-math.floor(A/4))%30
			local D = (4+A-math.floor(A/4))%7
			local E = (19*(Year%19)+C)%30
			local F = (2*(Year%4)+4*(Year%7)+6*E+D)%7
			local G = (22+E+F)
			if E == 29 and F == 6 then
				return ""04 19""
			elseif E == 28 and F == 6 then
				return ""04 18""
			elseif 31 < G then
				return (""04 %02d""):format(G-31)
			end
			return (""03 %02d""):format(G)
		end)(tonumber(os.date""%Y""))] = ""🥚"",
		[""10 31""] = ""🎃"",
		[""12 25""] = ""🎄""
	})[os.date(""%m %d"")]
	if emoji then
		Title.Text = (""%s %s %s""):format(emoji, Title.Text, emoji)
	end
end

Title.TextColor3 = Color3.new(1, 1, 1)
Title.ZIndex = 10
table.insert(shade1,Title)
table.insert(text1,Title)

Dark.Name = ""Dark""
Dark.Parent = Holder
Dark.Active = true
Dark.BackgroundColor3 = Color3.fromRGB(0, 65, 195)
Dark.BorderSizePixel = 0
Dark.Position = UDim2.new(0, 0, 0, 45)
Dark.Size = UDim2.new(0, 250, 0, 175)
Dark.ZIndex = 10
table.insert(shade1,Dark)

Cmdbar.Name = ""Cmdbar""
Cmdbar.Parent = Holder
Cmdbar.BackgroundTransparency = 1
Cmdbar.BorderSizePixel = 0
Cmdbar.Position = UDim2.new(0, 5, 0, 20)
Cmdbar.Size = UDim2.new(0, 240, 0, 25)
Cmdbar.Font = Enum.Font.SourceSans
Cmdbar.TextSize = 18
Cmdbar.TextXAlignment = Enum.TextXAlignment.Left
Cmdbar.TextColor3 = Color3.new(1, 1, 1)
Cmdbar.Text = """"
Cmdbar.ZIndex = 10
Cmdbar.PlaceholderText = ""Command Bar""

CMDsF.Name = ""CMDs""
CMDsF.Parent = Holder
CMDsF.BackgroundTransparency = 1
CMDsF.BorderSizePixel = 0
CMDsF.Position = UDim2.new(0, 5, 0, 45)
CMDsF.Size = UDim2.new(0, 245, 0, 175)
CMDsF.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)
CMDsF.BottomImage = ""rbxasset://textures/ui/Scroll/scroll-middle.png""
CMDsF.CanvasSize = UDim2.new(0, 0, 0, 0)
CMDsF.MidImage = ""rbxasset://textures/ui/Scroll/scroll-middle.png""
CMDsF.ScrollBarThickness = 8
CMDsF.TopImage = ""rbxasset://textures/ui/Scroll/scroll-middle.png""
CMDsF.VerticalScrollBarInset = 'Always'
CMDsF.ZIndex = 10
table.insert(scroll,CMDsF)

cmdListLayout.Parent = CMDsF

SettingsButton.Name = ""SettingsButton""
SettingsButton.Parent = Holder
SettingsButton.BackgroundTransparency = 1
SettingsButton.Position = UDim2.new(0, 230, 0, 0)
SettingsButton.Size = UDim2.new(0, 20, 0, 20)
SettingsButton.Image = ""rbxassetid://1204397029""
SettingsButton.ZIndex = 10

ReferenceButton = Instance.new(""ImageButton"")
ReferenceButton.Name = ""ReferenceButton""
ReferenceButton.Parent = Holder
ReferenceButton.BackgroundTransparency = 1
ReferenceButton.Position = UDim2.new(0, 212, 0, 2)
ReferenceButton.Size = UDim2.new(0, 16, 0, 16)
ReferenceButton.Image = ""rbxassetid://3523243755""
ReferenceButton.ZIndex = 10

Settings.Name = ""Settings""
Settings.Parent = Holder
Settings.Active = true
Settings.BackgroundColor3 = Color3.fromRGB(0, 65, 195)
Settings.BorderSizePixel = 0
Settings.Position = UDim2.new(0, 0, 0, 220)
Settings.Size = UDim2.new(0, 250, 0, 175)
Settings.ZIndex = 10
table.insert(shade1,Settings)

SettingsHolder = Instance.new(""ScrollingFrame"")
SettingsHolder.Name = ""Holder""
SettingsHolder.Parent = Settings
SettingsHolder.BackgroundTransparency = 1
SettingsHolder.BorderSizePixel = 0
SettingsHolder.Size = UDim2.new(1,0,1,0)
SettingsHolder.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)
SettingsHolder.BottomImage = ""rbxasset://textures/ui/Scroll/scroll-middle.png""
SettingsHolder.CanvasSize = UDim2.new(0, 0, 0, 235)
SettingsHolder.MidImage = ""rbxasset://textures/ui/Scroll/scroll-middle.png""
SettingsHolder.ScrollBarThickness = 8
SettingsHolder.TopImage = ""rbxasset://textures/ui/Scroll/scroll-middle.png""
SettingsHolder.VerticalScrollBarInset = 'Always'
SettingsHolder.ZIndex = 10
table.insert(scroll,SettingsHolder)

Prefix.Name = ""Prefix""
Prefix.Parent = SettingsHolder
Prefix.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Prefix.BorderSizePixel = 0
Prefix.BackgroundTransparency = 1
Prefix.Position = UDim2.new(0, 5, 0, 5)
Prefix.Size = UDim2.new(1, -10, 0, 20)
Prefix.Font = Enum.Font.SourceSans
Prefix.TextSize = 14
Prefix.Text = ""Prefix""
Prefix.TextColor3 = Color3.new(1, 1, 1)
Prefix.TextXAlignment = Enum.TextXAlignment.Left
Prefix.ZIndex = 10
table.insert(shade2,Prefix)
table.insert(text1,Prefix)

PrefixBox.Name = ""PrefixBox""
PrefixBox.Parent = Prefix
PrefixBox.BackgroundColor3 = Color3.fromRGB(0, 100, 255)
PrefixBox.BorderSizePixel = 0
PrefixBox.Position = UDim2.new(1, -20, 0, 0)
PrefixBox.Size = UDim2.new(0, 20, 0, 20)
PrefixBox.Font = Enum.Font.SourceSansBold
PrefixBox.TextSize = 14
PrefixBox.Text = ''
PrefixBox.TextColor3 = Color3.new(0, 0, 0)
PrefixBox.ZIndex = 10
table.insert(shade3,PrefixBox)
table.insert(text2,PrefixBox)

function makeSettingsButton(name,iconID,off)
	local button = Instance.new(""TextButton"")
	button.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
	button.BorderSizePixel = 0
	button.Position = UDim2.new(0,0,0,0)
	button.Size = UDim2.new(1,0,0,25)
	button.Text = """"
	button.ZIndex = 10
	local icon = Instance.new(""ImageLabel"")
	icon.Name = ""Icon""
	icon.Parent = button
	icon.Position = UDim2.new(0,5,0,5)
	icon.Size = UDim2.new(0,16,0,16)
	icon.BackgroundTransparency = 1
	icon.Image = iconID
	icon.ZIndex = 10
	if off then
		icon.ScaleType = Enum.ScaleType.Crop
		icon.ImageRectSize = Vector2.new(16,16)
		icon.ImageRectOffset = Vector2.new(off,0)
	end
	local label = Instance.new(""TextLabel"")
	label.Name = ""ButtonLabel""
	label.Parent = button
	label.BackgroundTransparency = 1
	label.Text = name
	label.Position = UDim2.new(0,28,0,0)
	label.Size = UDim2.new(1,-28,1,0)
	label.Font = Enum.Font.SourceSans
	label.TextColor3 = Color3.new(1, 1, 1)
	label.TextSize = 14
	label.ZIndex = 10
	label.TextXAlignment = Enum.TextXAlignment.Left
	table.insert(shade2,button)
	table.insert(text1,label)
	return button
end

ColorsButton = makeSettingsButton(""Edit Theme"",""rbxassetid://4911962991"")
ColorsButton.Position = UDim2.new(0,5,0,55)
ColorsButton.Size = UDim2.new(1,-10,0,25)
ColorsButton.Name = ""Colors""
ColorsButton.Parent = SettingsHolder

Keybinds = makeSettingsButton(""Edit Keybinds"",""rbxassetid://129697930"")
Keybinds.Position = UDim2.new(0, 5, 0, 85)
Keybinds.Size = UDim2.new(1, -10, 0, 25)
Keybinds.Name = ""Keybinds""
Keybinds.Parent = SettingsHolder

Aliases = makeSettingsButton(""Edit Aliases"",""rbxassetid://5147488658"")
Aliases.Position = UDim2.new(0, 5, 0, 115)
Aliases.Size = UDim2.new(1, -10, 0, 25)
Aliases.Name = ""Aliases""
Aliases.Parent = SettingsHolder

StayOpen.Name = ""StayOpen""
StayOpen.Parent = SettingsHolder
StayOpen.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
StayOpen.BorderSizePixel = 0
StayOpen.BackgroundTransparency = 1
StayOpen.Position = UDim2.new(0, 5, 0, 30)
StayOpen.Size = UDim2.new(1, -10, 0, 20)
StayOpen.Font = Enum.Font.SourceSans
StayOpen.TextSize = 14
StayOpen.Text = ""Keep Menu Open""
StayOpen.TextColor3 = Color3.new(1, 1, 1)
StayOpen.TextXAlignment = Enum.TextXAlignment.Left
StayOpen.ZIndex = 10
table.insert(shade2,StayOpen)
table.insert(text1,StayOpen)

Button.Name = ""Button""
Button.Parent = StayOpen
Button.BackgroundColor3 = Color3.fromRGB(0, 100, 255)
Button.BorderSizePixel = 0
Button.Position = UDim2.new(1, -20, 0, 0)
Button.Size = UDim2.new(0, 20, 0, 20)
Button.ZIndex = 10
table.insert(shade3,Button)

On.Name = ""On""
On.Parent = Button
On.BackgroundColor3 = Color3.fromRGB(50, 150, 255)
On.BackgroundTransparency = 1
On.BorderSizePixel = 0
On.Position = UDim2.new(0, 2, 0, 2)
On.Size = UDim2.new(0, 16, 0, 16)
On.Font = Enum.Font.SourceSans
On.FontSize = Enum.FontSize.Size14
On.Text = """"
On.TextColor3 = Color3.new(0, 0, 0)
On.ZIndex = 10

Positions = makeSettingsButton(""Edit/Goto Waypoints"",""rbxassetid://5147488592"")
Positions.Position = UDim2.new(0, 5, 0, 145)
Positions.Size = UDim2.new(1, -10, 0, 25)
Positions.Name = ""Waypoints""
Positions.Parent = SettingsHolder

EventBind = makeSettingsButton(""Edit Event Binds"",""rbxassetid://5147695474"",759)
EventBind.Position = UDim2.new(0, 5, 0, 205)
EventBind.Size = UDim2.new(1, -10, 0, 25)
EventBind.Name = ""EventBinds""
EventBind.Parent = SettingsHolder

Plugins = makeSettingsButton(""Manage Plugins"",""rbxassetid://5147695474"",743)
Plugins.Position = UDim2.new(0, 5, 0, 175)
Plugins.Size = UDim2.new(1, -10, 0, 25)
Plugins.Name = ""Plugins""
Plugins.Parent = SettingsHolder

Example.Name = ""Example""
Example.Parent = Holder
Example.BackgroundTransparency = 1
Example.BorderSizePixel = 0
Example.Size = UDim2.new(0, 190, 0, 20)
Example.Visible = false
Example.Font = Enum.Font.SourceSans
Example.TextSize = 18
Example.Text = ""Example""
Example.TextColor3 = Color3.new(1, 1, 1)
Example.TextXAlignment = Enum.TextXAlignment.Left
Example.ZIndex = 10
table.insert(text1,Example)

Notification.Name = randomString()
Notification.Parent = PARENT
Notification.BackgroundColor3 = Color3.fromRGB(0, 65, 195)
Notification.BorderSizePixel = 0
Notification.Position = UDim2.new(1, -500, 1, 20)
Notification.Size = UDim2.new(0, 250, 0, 100)
Notification.ZIndex = 10
table.insert(shade1,Notification)

Title_2.Name = ""Title""
Title_2.Parent = Notification
Title_2.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Title_2.BorderSizePixel = 0
Title_2.Size = UDim2.new(0, 250, 0, 20)
Title_2.Font = Enum.Font.SourceSans
Title_2.TextSize = 14
Title_2.Text = ""Notification Title""
Title_2.TextColor3 = Color3.new(1, 1, 1)
Title_2.ZIndex = 10
table.insert(shade2,Title_2)
table.insert(text1,Title_2)

Text_2.Name = ""Text""
Text_2.Parent = Notification
Text_2.BackgroundTransparency = 1
Text_2.BorderSizePixel = 0
Text_2.Position = UDim2.new(0, 5, 0, 25)
Text_2.Size = UDim2.new(0, 240, 0, 75)
Text_2.Font = Enum.Font.SourceSans
Text_2.TextSize = 16
Text_2.Text = ""Notification Text""
Text_2.TextColor3 = Color3.new(1, 1, 1)
Text_2.TextWrapped = true
Text_2.ZIndex = 10
table.insert(text1,Text_2)

CloseButton.Name = ""CloseButton""
CloseButton.Parent = Notification
CloseButton.BackgroundTransparency = 1
CloseButton.Position = UDim2.new(1, -20, 0, 0)
CloseButton.Size = UDim2.new(0, 20, 0, 20)
CloseButton.Text = """"
CloseButton.ZIndex = 10

CloseImage.Parent = CloseButton
CloseImage.BackgroundColor3 = Color3.new(1, 1, 1)
CloseImage.BackgroundTransparency = 1
CloseImage.Position = UDim2.new(0, 5, 0, 5)
CloseImage.Size = UDim2.new(0, 10, 0, 10)
CloseImage.Image = ""rbxassetid://5054663650""
CloseImage.ZIndex = 10

PinButton.Name = ""PinButton""
PinButton.Parent = Notification
PinButton.BackgroundTransparency = 1
PinButton.Size = UDim2.new(0, 20, 0, 20)
PinButton.ZIndex = 10
PinButton.Text = """"

PinImage.Parent = PinButton
PinImage.BackgroundColor3 = Color3.new(1, 1, 1)
PinImage.BackgroundTransparency = 1
PinImage.Position = UDim2.new(0, 3, 0, 3)
PinImage.Size = UDim2.new(0, 14, 0, 14)
PinImage.ZIndex = 10
PinImage.Image = ""rbxassetid://6234691350""

Tooltip.Name = randomString()
Tooltip.Parent = PARENT
Tooltip.Active = true
Tooltip.BackgroundColor3 = Color3.fromRGB(0, 65, 195)
Tooltip.BackgroundTransparency = 0.1
Tooltip.BorderSizePixel = 0
Tooltip.Size = UDim2.new(0, 200, 0, 96)
Tooltip.Visible = false
Tooltip.ZIndex = 10
table.insert(shade1,Tooltip)

Title_3.Name = ""Title""
Title_3.Parent = Tooltip
Title_3.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Title_3.BackgroundTransparency = 0.1
Title_3.BorderSizePixel = 0
Title_3.Size = UDim2.new(0, 200, 0, 20)
Title_3.Font = Enum.Font.SourceSans
Title_3.TextSize = 14
Title_3.Text = """"
Title_3.TextColor3 = Color3.new(1, 1, 1)
Title_3.TextTransparency = 0.1
Title_3.ZIndex = 10
table.insert(shade2,Title_3)
table.insert(text1,Title_3)

Description.Name = ""Description""
Description.Parent = Tooltip
Description.BackgroundTransparency = 1
Description.BorderSizePixel = 0
Description.Size = UDim2.new(0,180,0,72)
Description.Position = UDim2.new(0,10,0,18)
Description.Font = Enum.Font.SourceSans
Description.TextSize = 16
Description.Text = """"
Description.TextColor3 = Color3.new(1, 1, 1)
Description.TextTransparency = 0.1
Description.TextWrapped = true
Description.ZIndex = 10
table.insert(text1,Description)

IntroBackground.Name = ""IntroBackground""
IntroBackground.Parent = Holder
IntroBackground.Active = true
IntroBackground.BackgroundColor3 = Color3.fromRGB(0, 65, 195)
IntroBackground.BorderSizePixel = 0
IntroBackground.Position = UDim2.new(0, 0, 0, 45)
IntroBackground.Size = UDim2.new(0, 250, 0, 175)
IntroBackground.ZIndex = 10

Logo.Name = ""Logo""
Logo.Parent = Holder
Logo.BackgroundTransparency = 1
Logo.BorderSizePixel = 0
Logo.Position = UDim2.new(0, 125, 0, 127)
Logo.Size = UDim2.new(0, 10, 0, 10)
Logo.Image = ""rbxassetid://1352543873""
Logo.ImageTransparency = 0
Logo.ZIndex = 10

Credits.Name = ""Credits""
Credits.Parent = Holder
Credits.BackgroundTransparency = 1
Credits.BorderSizePixel = 0
Credits.Position = UDim2.new(0, 0, 0.9, 30)
Credits.Size = UDim2.new(0, 250, 0, 20)
Credits.Font = Enum.Font.SourceSansLight
Credits.FontSize = Enum.FontSize.Size18
Credits.Text = ""Edge // Zwolf // Moon // Toon""
Credits.TextColor3 = Color3.new(1, 1, 1)
Credits.ZIndex = 10

KeybindsFrame.Name = ""KeybindsFrame""
KeybindsFrame.Parent = Settings
KeybindsFrame.Active = true
KeybindsFrame.BackgroundColor3 = Color3.fromRGB(0, 65, 195)
KeybindsFrame.BorderSizePixel = 0
KeybindsFrame.Position = UDim2.new(0, 0, 0, 175)
KeybindsFrame.Size = UDim2.new(0, 250, 0, 175)
KeybindsFrame.ZIndex = 10
table.insert(shade1,KeybindsFrame)

Close.Name = ""Close""
Close.Parent = KeybindsFrame
Close.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Close.BorderSizePixel = 0
Close.Position = UDim2.new(0, 205, 0, 150)
Close.Size = UDim2.new(0, 40, 0, 20)
Close.Font = Enum.Font.SourceSans
Close.TextSize = 14
Close.Text = ""Close""
Close.TextColor3 = Color3.new(1, 1, 1)
Close.ZIndex = 10
table.insert(shade2,Close)
table.insert(text1,Close)

Add.Name = ""Add""
Add.Parent = KeybindsFrame
Add.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Add.BorderSizePixel = 0
Add.Position = UDim2.new(0, 5, 0, 150)
Add.Size = UDim2.new(0, 40, 0, 20)
Add.Font = Enum.Font.SourceSans
Add.TextSize = 14
Add.Text = ""Add""
Add.TextColor3 = Color3.new(1, 1, 1)
Add.ZIndex = 10
table.insert(shade2,Add)
table.insert(text1,Add)

Delete.Name = ""Delete""
Delete.Parent = KeybindsFrame
Delete.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Delete.BorderSizePixel = 0
Delete.Position = UDim2.new(0, 50, 0, 150)
Delete.Size = UDim2.new(0, 40, 0, 20)
Delete.Font = Enum.Font.SourceSans
Delete.TextSize = 14
Delete.Text = ""Clear""
Delete.TextColor3 = Color3.new(1, 1, 1)
Delete.ZIndex = 10
table.insert(shade2,Delete)
table.insert(text1,Delete)

Holder_2.Name = ""Holder""
Holder_2.Parent = KeybindsFrame
Holder_2.BackgroundTransparency = 1
Holder_2.BorderSizePixel = 0
Holder_2.Position = UDim2.new(0, 0, 0, 0)
Holder_2.Size = UDim2.new(0, 250, 0, 145)
Holder_2.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)
Holder_2.BottomImage = ""rbxasset://textures/ui/Scroll/scroll-middle.png""
Holder_2.CanvasSize = UDim2.new(0, 0, 0, 0)
Holder_2.MidImage = ""rbxasset://textures/ui/Scroll/scroll-middle.png""
Holder_2.ScrollBarThickness = 0
Holder_2.TopImage = ""rbxasset://textures/ui/Scroll/scroll-middle.png""
Holder_2.VerticalScrollBarInset = 'Always'
Holder_2.ZIndex = 10

Example_2.Name = ""Example""
Example_2.Parent = KeybindsFrame
Example_2.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Example_2.BorderSizePixel = 0
Example_2.Size = UDim2.new(0, 10, 0, 20)
Example_2.Visible = false
Example_2.ZIndex = 10
table.insert(shade2,Example_2)

Text_3.Name = ""Text""
Text_3.Parent = Example_2
Text_3.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Text_3.BorderSizePixel = 0
Text_3.Position = UDim2.new(0, 10, 0, 0)
Text_3.Size = UDim2.new(0, 240, 0, 20)
Text_3.Font = Enum.Font.SourceSans
Text_3.TextSize = 14
Text_3.Text = ""nom""
Text_3.TextColor3 = Color3.new(1, 1, 1)
Text_3.TextXAlignment = Enum.TextXAlignment.Left
Text_3.ZIndex = 10
table.insert(shade2,Text_3)
table.insert(text1,Text_3)

Delete_2.Name = ""Delete""
Delete_2.Parent = Text_3
Delete_2.BackgroundColor3 = Color3.fromRGB(0, 100, 255)
Delete_2.BorderSizePixel = 0
Delete_2.Position = UDim2.new(0, 200, 0, 0)
Delete_2.Size = UDim2.new(0, 40, 0, 20)
Delete_2.Font = Enum.Font.SourceSans
Delete_2.TextSize = 14
Delete_2.Text = ""Delete""
Delete_2.TextColor3 = Color3.new(0, 0, 0)
Delete_2.ZIndex = 10
table.insert(shade3,Delete_2)
table.insert(text2,Delete_2)

KeybindEditor.Name = randomString()
KeybindEditor.Parent = PARENT
KeybindEditor.Active = true
KeybindEditor.BackgroundTransparency = 1
KeybindEditor.Position = UDim2.new(0.5, -180, 0, -500)
KeybindEditor.Size = UDim2.new(0, 360, 0, 20)
KeybindEditor.ZIndex = 10

background_2.Name = ""background""
background_2.Parent = KeybindEditor
background_2.Active = true
background_2.BackgroundColor3 = Color3.fromRGB(0, 65, 195)
background_2.BorderSizePixel = 0
background_2.Position = UDim2.new(0, 0, 0, 20)
background_2.Size = UDim2.new(0, 360, 0, 185)
background_2.ZIndex = 10
table.insert(shade1,background_2)

Dark_3.Name = ""Dark""
Dark_3.Parent = background_2
Dark_3.Active = true
Dark_3.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Dark_3.BorderSizePixel = 0
Dark_3.Position = UDim2.new(0, 135, 0, 0)
Dark_3.Size = UDim2.new(0, 2, 0, 185)
Dark_3.ZIndex = 10
table.insert(shade2,Dark_3)

Directions.Name = ""Directions""
Directions.Parent = background_2
Directions.BackgroundTransparency = 1
Directions.BorderSizePixel = 0
Directions.Position = UDim2.new(0, 10, 0, 15)
Directions.Size = UDim2.new(0, 115, 0, 90)
Directions.ZIndex = 10
Directions.Font = Enum.Font.SourceSans
Directions.Text = ""Click the button below and press a key/mouse button. Then select what you want to bind it to.""
Directions.TextColor3 = Color3.fromRGB(255, 255, 255)
Directions.TextSize = 14.000
Directions.TextWrapped = true
Directions.TextYAlignment = Enum.TextYAlignment.Top
table.insert(text1,Directions)

BindTo.Name = ""BindTo""
BindTo.Parent = background_2
BindTo.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
BindTo.BorderSizePixel = 0
BindTo.Position = UDim2.new(0, 10, 0, 95)
BindTo.Size = UDim2.new(0, 115, 0, 50)
BindTo.ZIndex = 10
BindTo.Font = Enum.Font.SourceSans
BindTo.Text = ""Click to bind""
BindTo.TextColor3 = Color3.fromRGB(255, 255, 255)
BindTo.TextSize = 16.000
table.insert(shade2,BindTo)
table.insert(text1,BindTo)

TriggerLabel.Name = ""TriggerLabel""
TriggerLabel.Parent = background_2
TriggerLabel.BackgroundTransparency = 1
TriggerLabel.Position = UDim2.new(0, 10, 0, 155)
TriggerLabel.Size = UDim2.new(0, 45, 0, 20)
TriggerLabel.ZIndex = 10
TriggerLabel.Font = Enum.Font.SourceSans
TriggerLabel.Text = ""Trigger:""
TriggerLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TriggerLabel.TextSize = 14.000
TriggerLabel.TextXAlignment = Enum.TextXAlignment.Left
table.insert(text1,TriggerLabel)

BindTriggerSelect.Name = ""BindTo""
BindTriggerSelect.Parent = background_2
BindTriggerSelect.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
BindTriggerSelect.BorderSizePixel = 0
BindTriggerSelect.Position = UDim2.new(0, 60, 0, 155)
BindTriggerSelect.Size = UDim2.new(0, 65, 0, 20)
BindTriggerSelect.ZIndex = 10
BindTriggerSelect.Font = Enum.Font.SourceSans
BindTriggerSelect.Text = ""KeyDown""
BindTriggerSelect.TextColor3 = Color3.fromRGB(255, 255, 255)
BindTriggerSelect.TextSize = 16.000
table.insert(shade2,BindTriggerSelect)
table.insert(text1,BindTriggerSelect)

Add_2.Name = ""Add""
Add_2.Parent = background_2
Add_2.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Add_2.BorderSizePixel = 0
Add_2.Position = UDim2.new(0, 310, 0, 35)
Add_2.Size = UDim2.new(0, 40, 0, 20)
Add_2.ZIndex = 10
Add_2.Font = Enum.Font.SourceSans
Add_2.Text = ""Add""
Add_2.TextColor3 = Color3.fromRGB(255, 255, 255)
Add_2.TextSize = 14.000
table.insert(shade2,Add_2)
table.insert(text1,Add_2)

Toggles.Name = ""Toggles""
Toggles.Parent = background_2
Toggles.BackgroundTransparency = 1
Toggles.BorderSizePixel = 0
Toggles.Position = UDim2.new(0, 150, 0, 125)
Toggles.Size = UDim2.new(0, 200, 0, 50)
Toggles.ZIndex = 10
Toggles.BottomImage = ""rbxasset://textures/ui/Scroll/scroll-middle.png""
Toggles.CanvasSize = UDim2.new(0, 0, 0, 50)
Toggles.ScrollBarThickness = 8
Toggles.TopImage = ""rbxasset://textures/ui/Scroll/scroll-middle.png""
Toggles.VerticalScrollBarInset = Enum.ScrollBarInset.Always
table.insert(scroll,Toggles)

ClickTP.Name = ""Click TP (Hold Key & Click)""
ClickTP.Parent = Toggles
ClickTP.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
ClickTP.BorderSizePixel = 0
ClickTP.Size = UDim2.new(0, 200, 0, 20)
ClickTP.ZIndex = 10
ClickTP.Font = Enum.Font.SourceSans
ClickTP.Text = ""    Click TP (Hold Key & Click)""
ClickTP.TextColor3 = Color3.fromRGB(255, 255, 255)
ClickTP.TextSize = 14.000
ClickTP.TextXAlignment = Enum.TextXAlignment.Left
table.insert(shade2,ClickTP)
table.insert(text1,ClickTP)

Select.Name = ""Select""
Select.Parent = ClickTP
Select.BackgroundColor3 = Color3.fromRGB(0, 100, 255)
Select.BorderSizePixel = 0
Select.Position = UDim2.new(0, 160, 0, 0)
Select.Size = UDim2.new(0, 40, 0, 20)
Select.ZIndex = 10
Select.Font = Enum.Font.SourceSans
Select.Text = ""Add""
Select.TextColor3 = Color3.fromRGB(0, 0, 0)
Select.TextSize = 14.000
table.insert(shade3,Select)
table.insert(text2,Select)

ClickDelete.Name = ""Click Delete (Hold Key & Click)""
ClickDelete.Parent = Toggles
ClickDelete.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
ClickDelete.BorderSizePixel = 0
ClickDelete.Position = UDim2.new(0, 0, 0, 25)
ClickDelete.Size = UDim2.new(0, 200, 0, 20)
ClickDelete.ZIndex = 10
ClickDelete.Font = Enum.Font.SourceSans
ClickDelete.Text = ""    Click Delete (Hold Key & Click)""
ClickDelete.TextColor3 = Color3.fromRGB(255, 255, 255)
ClickDelete.TextSize = 14.000
ClickDelete.TextXAlignment = Enum.TextXAlignment.Left
table.insert(shade2,ClickDelete)
table.insert(text1,ClickDelete)

Select_2.Name = ""Select""
Select_2.Parent = ClickDelete
Select_2.BackgroundColor3 = Color3.fromRGB(0, 100, 255)
Select_2.BorderSizePixel = 0
Select_2.Position = UDim2.new(0, 160, 0, 0)
Select_2.Size = UDim2.new(0, 40, 0, 20)
Select_2.ZIndex = 10
Select_2.Font = Enum.Font.SourceSans
Select_2.Text = ""Add""
Select_2.TextColor3 = Color3.fromRGB(0, 0, 0)
Select_2.TextSize = 14.000
table.insert(shade3,Select_2)
table.insert(text2,Select_2)

Cmdbar_2.Name = ""Cmdbar_2""
Cmdbar_2.Parent = background_2
Cmdbar_2.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Cmdbar_2.BorderSizePixel = 0
Cmdbar_2.Position = UDim2.new(0, 150, 0, 35)
Cmdbar_2.Size = UDim2.new(0, 150, 0, 20)
Cmdbar_2.ZIndex = 10
Cmdbar_2.Font = Enum.Font.SourceSans
Cmdbar_2.PlaceholderText = ""Command""
Cmdbar_2.Text = """"
Cmdbar_2.TextColor3 = Color3.fromRGB(255, 255, 255)
Cmdbar_2.TextSize = 14.000
Cmdbar_2.TextXAlignment = Enum.TextXAlignment.Left

Cmdbar_3.Name = ""Cmdbar_3""
Cmdbar_3.Parent = background_2
Cmdbar_3.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Cmdbar_3.BorderSizePixel = 0
Cmdbar_3.Position = UDim2.new(0, 150, 0, 60)
Cmdbar_3.Size = UDim2.new(0, 150, 0, 20)
Cmdbar_3.ZIndex = 10
Cmdbar_3.Font = Enum.Font.SourceSans
Cmdbar_3.PlaceholderText = ""Command 2""
Cmdbar_3.Text = """"
Cmdbar_3.TextColor3 = Color3.fromRGB(255, 255, 255)
Cmdbar_3.TextSize = 14.000
Cmdbar_3.TextXAlignment = Enum.TextXAlignment.Left

CreateToggle.Name = ""CreateToggle""
CreateToggle.Parent = background_2
CreateToggle.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
CreateToggle.BackgroundTransparency = 1
CreateToggle.BorderSizePixel = 0
CreateToggle.Position = UDim2.new(0, 152, 0, 10)
CreateToggle.Size = UDim2.new(0, 198, 0, 20)
CreateToggle.ZIndex = 10
CreateToggle.Font = Enum.Font.SourceSans
CreateToggle.Text = ""Create Toggle""
CreateToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
CreateToggle.TextSize = 14.000
CreateToggle.TextXAlignment = Enum.TextXAlignment.Left
table.insert(text1,CreateToggle)

Button_2.Name = ""Button""
Button_2.Parent = CreateToggle
Button_2.BackgroundColor3 = Color3.fromRGB(0, 100, 255)
Button_2.BorderSizePixel = 0
Button_2.Position = UDim2.new(1, -20, 0, 0)
Button_2.Size = UDim2.new(0, 20, 0, 20)
Button_2.ZIndex = 10
table.insert(shade3,Button_2)

On_2.Name = ""On""
On_2.Parent = Button_2
On_2.BackgroundColor3 = Color3.fromRGB(50, 150, 255)
On_2.BackgroundTransparency = 1
On_2.BorderSizePixel = 0
On_2.Position = UDim2.new(0, 2, 0, 2)
On_2.Size = UDim2.new(0, 16, 0, 16)
On_2.ZIndex = 10
On_2.Font = Enum.Font.SourceSans
On_2.Text = """"
On_2.TextColor3 = Color3.fromRGB(0, 0, 0)
On_2.TextSize = 14.000

shadow_2.Name = ""shadow""
shadow_2.Parent = KeybindEditor
shadow_2.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
shadow_2.BorderSizePixel = 0
shadow_2.Size = UDim2.new(0, 360, 0, 20)
shadow_2.ZIndex = 10
table.insert(shade2,shadow_2)

PopupText_2.Name = ""PopupText_2""
PopupText_2.Parent = shadow_2
PopupText_2.BackgroundTransparency = 1
PopupText_2.Size = UDim2.new(1, 0, 0.949999988, 0)
PopupText_2.ZIndex = 10
PopupText_2.Font = Enum.Font.SourceSans
PopupText_2.Text = ""Set Keybinds""
PopupText_2.TextColor3 = Color3.fromRGB(255, 255, 255)
PopupText_2.TextSize = 14.000
PopupText_2.TextWrapped = true
table.insert(text1,PopupText_2)

Exit_2.Name = ""Exit_2""
Exit_2.Parent = shadow_2
Exit_2.BackgroundTransparency = 1
Exit_2.Position = UDim2.new(1, -20, 0, 0)
Exit_2.Size = UDim2.new(0, 20, 0, 20)
Exit_2.ZIndex = 10
Exit_2.Text = """"

ExitImage_2.Parent = Exit_2
ExitImage_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ExitImage_2.BackgroundTransparency = 1
ExitImage_2.Position = UDim2.new(0, 5, 0, 5)
ExitImage_2.Size = UDim2.new(0, 10, 0, 10)
ExitImage_2.ZIndex = 10
ExitImage_2.Image = ""rbxassetid://5054663650""

PositionsFrame.Name = ""PositionsFrame""
PositionsFrame.Parent = Settings
PositionsFrame.Active = true
PositionsFrame.BackgroundColor3 = Color3.fromRGB(0, 65, 195)
PositionsFrame.BorderSizePixel = 0
PositionsFrame.Size = UDim2.new(0, 250, 0, 175)
PositionsFrame.Position = UDim2.new(0, 0, 0, 175)
PositionsFrame.ZIndex = 10
table.insert(shade1,PositionsFrame)

Close_3.Name = ""Close""
Close_3.Parent = PositionsFrame
Close_3.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Close_3.BorderSizePixel = 0
Close_3.Position = UDim2.new(0, 205, 0, 150)
Close_3.Size = UDim2.new(0, 40, 0, 20)
Close_3.Font = Enum.Font.SourceSans
Close_3.TextSize = 14
Close_3.Text = ""Close""
Close_3.TextColor3 = Color3.new(1, 1, 1)
Close_3.ZIndex = 10
table.insert(shade2,Close_3)
table.insert(text1,Close_3)

Delete_5.Name = ""Delete""
Delete_5.Parent = PositionsFrame
Delete_5.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Delete_5.BorderSizePixel = 0
Delete_5.Position = UDim2.new(0, 50, 0, 150)
Delete_5.Size = UDim2.new(0, 40, 0, 20)
Delete_5.Font = Enum.Font.SourceSans
Delete_5.TextSize = 14
Delete_5.Text = ""Clear""
Delete_5.TextColor3 = Color3.new(1, 1, 1)
Delete_5.ZIndex = 10
table.insert(shade2,Delete_5)
table.insert(text1,Delete_5)

Part.Name = ""PartGoto""
Part.Parent = PositionsFrame
Part.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Part.BorderSizePixel = 0
Part.Position = UDim2.new(0, 5, 0, 150)
Part.Size = UDim2.new(0, 40, 0, 20)
Part.Font = Enum.Font.SourceSans
Part.TextSize = 14
Part.Text = ""Part""
Part.TextColor3 = Color3.new(1, 1, 1)
Part.ZIndex = 10
table.insert(shade2,Part)
table.insert(text1,Part)

Holder_4.Name = ""Holder""
Holder_4.Parent = PositionsFrame
Holder_4.BackgroundTransparency = 1
Holder_4.BorderSizePixel = 0
Holder_4.Position = UDim2.new(0, 0, 0, 0)
Holder_4.Selectable = false
Holder_4.Size = UDim2.new(0, 250, 0, 145)
Holder_4.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)
Holder_4.BottomImage = ""rbxasset://textures/ui/Scroll/scroll-middle.png""
Holder_4.CanvasSize = UDim2.new(0, 0, 0, 0)
Holder_4.MidImage = ""rbxasset://textures/ui/Scroll/scroll-middle.png""
Holder_4.ScrollBarThickness = 0
Holder_4.TopImage = ""rbxasset://textures/ui/Scroll/scroll-middle.png""
Holder_4.VerticalScrollBarInset = 'Always'
Holder_4.ZIndex = 10

Example_4.Name = ""Example""
Example_4.Parent = PositionsFrame
Example_4.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Example_4.BorderSizePixel = 0
Example_4.Size = UDim2.new(0, 10, 0, 20)
Example_4.Visible = false
Example_4.Position = UDim2.new(0, 0, 0, -5)
Example_4.ZIndex = 10
table.insert(shade2,Example_4)

Text_5.Name = ""Text""
Text_5.Parent = Example_4
Text_5.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Text_5.BorderSizePixel = 0
Text_5.Position = UDim2.new(0, 10, 0, 0)
Text_5.Size = UDim2.new(0, 240, 0, 20)
Text_5.Font = Enum.Font.SourceSans
Text_5.TextSize = 14
Text_5.Text = ""Position""
Text_5.TextColor3 = Color3.new(1, 1, 1)
Text_5.TextXAlignment = Enum.TextXAlignment.Left
Text_5.ZIndex = 10
table.insert(shade2,Text_5)
table.insert(text1,Text_5)

Delete_6.Name = ""Delete""
Delete_6.Parent = Text_5
Delete_6.BackgroundColor3 = Color3.fromRGB(0, 100, 255)
Delete_6.BorderSizePixel = 0
Delete_6.Position = UDim2.new(0, 200, 0, 0)
Delete_6.Size = UDim2.new(0, 40, 0, 20)
Delete_6.Font = Enum.Font.SourceSans
Delete_6.TextSize = 14
Delete_6.Text = ""Delete""
Delete_6.TextColor3 = Color3.new(0, 0, 0)
Delete_6.ZIndex = 10
table.insert(shade3,Delete_6)
table.insert(text2,Delete_6)

TP.Name = ""TP""
TP.Parent = Text_5
TP.BackgroundColor3 = Color3.fromRGB(0, 100, 255)
TP.BorderSizePixel = 0
TP.Position = UDim2.new(0, 155, 0, 0)
TP.Size = UDim2.new(0, 40, 0, 20)
TP.Font = Enum.Font.SourceSans
TP.TextSize = 14
TP.Text = ""Goto""
TP.TextColor3 = Color3.new(0, 0, 0)
TP.ZIndex = 10
table.insert(shade3,TP)
table.insert(text2,TP)

AliasesFrame.Name = ""AliasesFrame""
AliasesFrame.Parent = Settings
AliasesFrame.Active = true
AliasesFrame.BackgroundColor3 = Color3.fromRGB(0, 65, 195)
AliasesFrame.BorderSizePixel = 0
AliasesFrame.Position = UDim2.new(0, 0, 0, 175)
AliasesFrame.Size = UDim2.new(0, 250, 0, 175)
AliasesFrame.ZIndex = 10
table.insert(shade1,AliasesFrame)

Close_2.Name = ""Close""
Close_2.Parent = AliasesFrame
Close_2.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Close_2.BorderSizePixel = 0
Close_2.Position = UDim2.new(0, 205, 0, 150)
Close_2.Size = UDim2.new(0, 40, 0, 20)
Close_2.Font = Enum.Font.SourceSans
Close_2.TextSize = 14
Close_2.Text = ""Close""
Close_2.TextColor3 = Color3.new(1, 1, 1)
Close_2.ZIndex = 10
table.insert(shade2,Close_2)
table.insert(text1,Close_2)

Delete_3.Name = ""Delete""
Delete_3.Parent = AliasesFrame
Delete_3.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Delete_3.BorderSizePixel = 0
Delete_3.Position = UDim2.new(0, 5, 0, 150)
Delete_3.Size = UDim2.new(0, 40, 0, 20)
Delete_3.Font = Enum.Font.SourceSans
Delete_3.TextSize = 14
Delete_3.Text = ""Clear""
Delete_3.TextColor3 = Color3.new(1, 1, 1)
Delete_3.ZIndex = 10
table.insert(shade2,Delete_3)
table.insert(text1,Delete_3)

Holder_3.Name = ""Holder""
Holder_3.Parent = AliasesFrame
Holder_3.BackgroundTransparency = 1
Holder_3.BorderSizePixel = 0
Holder_3.Position = UDim2.new(0, 0, 0, 0)
Holder_3.Size = UDim2.new(0, 250, 0, 145)
Holder_3.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)
Holder_3.BottomImage = ""rbxasset://textures/ui/Scroll/scroll-middle.png""
Holder_3.CanvasSize = UDim2.new(0, 0, 0, 0)
Holder_3.MidImage = ""rbxasset://textures/ui/Scroll/scroll-middle.png""
Holder_3.ScrollBarThickness = 0
Holder_3.TopImage = ""rbxasset://textures/ui/Scroll/scroll-middle.png""
Holder_3.VerticalScrollBarInset = 'Always'
Holder_3.ZIndex = 10

Example_3.Name = ""Example""
Example_3.Parent = AliasesFrame
Example_3.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Example_3.BorderSizePixel = 0
Example_3.Size = UDim2.new(0, 10, 0, 20)
Example_3.Visible = false
Example_3.ZIndex = 10
table.insert(shade2,Example_3)

Text_4.Name = ""Text""
Text_4.Parent = Example_3
Text_4.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Text_4.BorderSizePixel = 0
Text_4.Position = UDim2.new(0, 10, 0, 0)
Text_4.Size = UDim2.new(0, 240, 0, 20)
Text_4.Font = Enum.Font.SourceSans
Text_4.TextSize = 14
Text_4.Text = ""honk""
Text_4.TextColor3 = Color3.new(1, 1, 1)
Text_4.TextXAlignment = Enum.TextXAlignment.Left
Text_4.ZIndex = 10
table.insert(shade2,Text_4)
table.insert(text1,Text_4)

Delete_4.Name = ""Delete""
Delete_4.Parent = Text_4
Delete_4.BackgroundColor3 = Color3.fromRGB(0, 100, 255)
Delete_4.BorderSizePixel = 0
Delete_4.Position = UDim2.new(0, 200, 0, 0)
Delete_4.Size = UDim2.new(0, 40, 0, 20)
Delete_4.Font = Enum.Font.SourceSans
Delete_4.TextSize = 14
Delete_4.Text = ""Delete""
Delete_4.TextColor3 = Color3.new(0, 0, 0)
Delete_4.ZIndex = 10
table.insert(shade3,Delete_4)
table.insert(text2,Delete_4)

PluginsFrame.Name = ""PluginsFrame""
PluginsFrame.Parent = Settings
PluginsFrame.Active = true
PluginsFrame.BackgroundColor3 = Color3.fromRGB(0, 65, 195)
PluginsFrame.BorderSizePixel = 0
PluginsFrame.Position = UDim2.new(0, 0, 0, 175)
PluginsFrame.Size = UDim2.new(0, 250, 0, 175)
PluginsFrame.ZIndex = 10
table.insert(shade1,PluginsFrame)

Close_4.Name = ""Close""
Close_4.Parent = PluginsFrame
Close_4.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Close_4.BorderSizePixel = 0
Close_4.Position = UDim2.new(0, 205, 0, 150)
Close_4.Size = UDim2.new(0, 40, 0, 20)
Close_4.Font = Enum.Font.SourceSans
Close_4.TextSize = 14
Close_4.Text = ""Close""
Close_4.TextColor3 = Color3.new(1, 1, 1)
Close_4.ZIndex = 10
table.insert(shade2,Close_4)
table.insert(text1,Close_4)

Add_3.Name = ""Add""
Add_3.Parent = PluginsFrame
Add_3.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Add_3.BorderSizePixel = 0
Add_3.Position = UDim2.new(0, 5, 0, 150)
Add_3.Size = UDim2.new(0, 40, 0, 20)
Add_3.Font = Enum.Font.SourceSans
Add_3.TextSize = 14
Add_3.Text = ""Add""
Add_3.TextColor3 = Color3.new(1, 1, 1)
Add_3.ZIndex = 10
table.insert(shade2,Add_3)
table.insert(text1,Add_3)

Holder_5.Name = ""Holder""
Holder_5.Parent = PluginsFrame
Holder_5.BackgroundTransparency = 1
Holder_5.BorderSizePixel = 0
Holder_5.Position = UDim2.new(0, 0, 0, 0)
Holder_5.Selectable = false
Holder_5.Size = UDim2.new(0, 250, 0, 145)
Holder_5.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)
Holder_5.BottomImage = ""rbxasset://textures/ui/Scroll/scroll-middle.png""
Holder_5.CanvasSize = UDim2.new(0, 0, 0, 0)
Holder_5.MidImage = ""rbxasset://textures/ui/Scroll/scroll-middle.png""
Holder_5.ScrollBarThickness = 0
Holder_5.TopImage = ""rbxasset://textures/ui/Scroll/scroll-middle.png""
Holder_5.VerticalScrollBarInset = 'Always'
Holder_5.ZIndex = 10

Example_5.Name = ""Example""
Example_5.Parent = PluginsFrame
Example_5.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Example_5.BorderSizePixel = 0
Example_5.Size = UDim2.new(0, 10, 0, 20)
Example_5.Visible = false
Example_5.ZIndex = 10
table.insert(shade2,Example_5)

Text_6.Name = ""Text""
Text_6.Parent = Example_5
Text_6.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Text_6.BorderSizePixel = 0
Text_6.Position = UDim2.new(0, 10, 0, 0)
Text_6.Size = UDim2.new(0, 240, 0, 20)
Text_6.Font = Enum.Font.SourceSans
Text_6.TextSize = 14
Text_6.Text = ""F4 > Toggle Fly""
Text_6.TextColor3 = Color3.new(1, 1, 1)
Text_6.TextXAlignment = Enum.TextXAlignment.Left
Text_6.ZIndex = 10
table.insert(shade2,Text_6)
table.insert(text1,Text_6)

Delete_7.Name = ""Delete""
Delete_7.Parent = Text_6
Delete_7.BackgroundColor3 = Color3.fromRGB(0, 100, 255)
Delete_7.BorderSizePixel = 0
Delete_7.Position = UDim2.new(0, 200, 0, 0)
Delete_7.Size = UDim2.new(0, 40, 0, 20)
Delete_7.Font = Enum.Font.SourceSans
Delete_7.TextSize = 14
Delete_7.Text = ""Delete""
Delete_7.TextColor3 = Color3.new(0, 0, 0)
Delete_7.ZIndex = 10
table.insert(shade3,Delete_7)
table.insert(text2,Delete_7)

PluginEditor.Name = randomString()
PluginEditor.Parent = PARENT
PluginEditor.BorderSizePixel = 0
PluginEditor.Active = true
PluginEditor.BackgroundTransparency = 1
PluginEditor.Position = UDim2.new(0.5, -180, 0, -500)
PluginEditor.Size = UDim2.new(0, 360, 0, 20)
PluginEditor.ZIndex = 10

background_3.Name = ""background""
background_3.Parent = PluginEditor
background_3.Active = true
background_3.BackgroundColor3 = Color3.fromRGB(0, 65, 195)
background_3.BorderSizePixel = 0
background_3.Position = UDim2.new(0, 0, 0, 20)
background_3.Size = UDim2.new(0, 360, 0, 160)
background_3.ZIndex = 10
table.insert(shade1,background_3)

Dark_2.Name = ""Dark""
Dark_2.Parent = background_3
Dark_2.Active = true
Dark_2.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
Dark_2.BorderSizePixel = 0
Dark_2.Position = UDim2.new(0, 222, 0, 0)
Dark_2.Size = UDim2.new(0, 2, 0, 160)
Dark_2.ZIndex = 10
table.insert(shade2,Dark_2)

Img.Name = ""Img""
Img.Parent = background_3
Img.BackgroundTransparency = 1
Img.Position = UDim2.new(0, 242, 0, 3)
Img.Size = UDim2.new(0, 100, 0, 95)
Img.Image = ""rbxassetid://4113050383""
Img.ZIndex = 10

AddPlugin.Name = ""AddPlugin""
AddPlugin.Parent = background_3
AddPlugin.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
AddPlugin.BorderSizePixel = 0
AddPlugin.Position = UDim2.new(0, 235, 0, 100)
AddPlugin.Size = UDim2.new(0, 115, 0, 50)
AddPlugin.Font = Enum.Font.SourceSans
AddPlugin.TextSize = 14
AddPlugin.Text = ""Add Plugin""
AddPlugin.TextColor3 = Color3.new(1, 1, 1)
AddPlugin.ZIndex = 10
table.insert(shade2,AddPlugin)
table.insert(text1,AddPlugin)

FileName.Name = ""FileName""
FileName.Parent = background_3
FileName.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
FileName.BorderSizePixel = 0
FileName.Position = UDim2.new(0.028, 0, 0.625, 0)
FileName.Size = UDim2.new(0, 200, 0, 50)
FileName.Font = Enum.Font.SourceSans
FileName.TextSize = 14
FileName.Text = ""Plugin File Name""
FileName.TextColor3 = Color3.new(1, 1, 1)
FileName.ZIndex = 10
table.insert(shade2,FileName)
table.insert(text1,FileName)

About.Name = ""About""
About.Parent = background_3
About.BackgroundTransparency = 1
About.BorderSizePixel = 0
About.Position = UDim2.new(0, 17, 0, 10)
About.Size = UDim2.new(0, 187, 0, 49)
About.Font = Enum.Font.SourceSans
About.TextSize = 14
About.Text = ""Plugins are .iy files and should be located in the 'workspace' folder of your exploit.""
About.TextColor3 = Color3.fromRGB(255, 255, 255)
About.TextWrapped = true
About.TextYAlignment = Enum.TextYAlignment.Top
About.ZIndex = 10
table.insert(text1,About)

Directions_2.Name = ""Directions""
Directions_2.Parent = background_3
Directions_2.BackgroundTransparency = 1
Directions_2.BorderSizePixel = 0
Directions_2.Position = UDim2.new(0, 17, 0, 60)
Directions_2.Size = UDim2.new(0, 187, 0, 49)
Directions_2.Font = Enum.Font.SourceSans
Directions_2.TextSize = 14
Directions_2.Text = ""Type the name of the plugin file you want to add below.""
Directions_2.TextColor3 = Color3.fromRGB(255, 255, 255)
Directions_2.TextWrapped = true
Directions_2.TextYAlignment = Enum.TextYAlignment.Top
Directions_2.ZIndex = 10
table.insert(text1,Directions_2)

shadow_3.Name = ""shadow""
shadow_3.Parent = PluginEditor
shadow_3.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
shadow_3.BorderSizePixel = 0
shadow_3.Size = UDim2.new(0, 360, 0, 20)
shadow_3.ZIndex = 10
table.insert(shade2,shadow_3)

PopupText_3.Name = ""PopupText""
PopupText_3.Parent = shadow_3
PopupText_3.BackgroundTransparency = 1
PopupText_3.Size = UDim2.new(1, 0, 0.95, 0)
PopupText_3.ZIndex = 10
PopupText_3.Font = Enum.Font.SourceSans
PopupText_3.TextSize = 14
PopupText_3.Text = ""Add Plugins""
PopupText_3.TextColor3 = Color3.new(1, 1, 1)
PopupText_3.TextWrapped = true
table.insert(text1,PopupText_3)

Exit_3.Name = ""Exit""
Exit_3.Parent = shadow_3
Exit_3.BackgroundTransparency = 1
Exit_3.Position = UDim2.new(1, -20, 0, 0)
Exit_3.Size = UDim2.new(0, 20, 0, 20)
Exit_3.Text = """"
Exit_3.ZIndex = 10

ExitImage_3.Parent = Exit_3
ExitImage_3.BackgroundColor3 = Color3.new(1, 1, 1)
ExitImage_3.BackgroundTransparency = 1
ExitImage_3.Position = UDim2.new(0, 5, 0, 5)
ExitImage_3.Size = UDim2.new(0, 10, 0, 10)
ExitImage_3.Image = ""rbxassetid://5054663650""
ExitImage_3.ZIndex = 10

AliasHint.Name = ""AliasHint""
AliasHint.Parent = AliasesFrame
AliasHint.BackgroundTransparency = 1
AliasHint.BorderSizePixel = 0
AliasHint.Position = UDim2.new(0, 25, 0, 40)
AliasHint.Size = UDim2.new(0, 200, 0, 50)
AliasHint.Font = Enum.Font.SourceSansItalic
AliasHint.TextSize = 16
AliasHint.Text = ""Add aliases by using the 'addalias' command""
AliasHint.TextColor3 = Color3.new(1, 1, 1)
AliasHint.TextStrokeColor3 = Color3.new(1, 1, 1)
AliasHint.TextWrapped = true
AliasHint.ZIndex = 10
table.insert(text1,AliasHint)

PluginsHint.Name = ""PluginsHint""
PluginsHint.Parent = PluginsFrame
PluginsHint.BackgroundTransparency = 1
PluginsHint.BorderSizePixel = 0
PluginsHint.Position = UDim2.new(0, 25, 0, 40)
PluginsHint.Size = UDim2.new(0, 200, 0, 50)
PluginsHint.Font = Enum.Font.SourceSansItalic
PluginsHint.TextSize = 16
PluginsHint.Text = ""Download plugins from the IY Discord (discord.gg/78ZuWSq)""
PluginsHint.TextColor3 = Color3.new(1, 1, 1)
PluginsHint.TextStrokeColor3 = Color3.new(1, 1, 1)
PluginsHint.TextWrapped = true
PluginsHint.ZIndex = 10
table.insert(text1,PluginsHint)

PositionsHint.Name = ""PositionsHint""
PositionsHint.Parent = PositionsFrame
PositionsHint.BackgroundTransparency = 1
PositionsHint.BorderSizePixel = 0
PositionsHint.Position = UDim2.new(0, 25, 0, 40)
PositionsHint.Size = UDim2.new(0, 200, 0, 70)
PositionsHint.Font = Enum.Font.SourceSansItalic
PositionsHint.TextSize = 16
PositionsHint.Text = ""Use the 'swp' or 'setwaypoint' command to add a position using your character (NOTE: Part teleports will not save)""
PositionsHint.TextColor3 = Color3.new(1, 1, 1)
PositionsHint.TextStrokeColor3 = Color3.new(1, 1, 1)
PositionsHint.TextWrapped = true
PositionsHint.ZIndex = 10
table.insert(text1,PositionsHint)

ToPartFrame.Name = randomString()
ToPartFrame.Parent = PARENT
ToPartFrame.Active = true
ToPartFrame.BackgroundTransparency = 1
ToPartFrame.Position = UDim2.new(0.5, -180, 0, -500)
ToPartFrame.Size = UDim2.new(0, 360, 0, 20)
ToPartFrame.ZIndex = 10

background_4.Name = ""background""
background_4.Parent = ToPartFrame
background_4.Active = true
background_4.BackgroundColor3 = Color3.fromRGB(0, 65, 195)
background_4.BorderSizePixel = 0
background_4.Position = UDim2.new(0, 0, 0, 20)
background_4.Size = UDim2.new(0, 360, 0, 117)
background_4.ZIndex = 10
table.insert(shade1,background_4)

ChoosePart.Name = ""ChoosePart""
ChoosePart.Parent = background_4
ChoosePart.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
ChoosePart.BorderSizePixel = 0
ChoosePart.Position = UDim2.new(0, 100, 0, 55)
ChoosePart.Size = UDim2.new(0, 75, 0, 30)
ChoosePart.Font = Enum.Font.SourceSans
ChoosePart.TextSize = 14
ChoosePart.Text = ""Select Part""
ChoosePart.TextColor3 = Color3.new(1, 1, 1)
ChoosePart.ZIndex = 10
table.insert(shade2,ChoosePart)
table.insert(text1,ChoosePart)

CopyPath.Name = ""CopyPath""
CopyPath.Parent = background_4
CopyPath.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
CopyPath.BorderSizePixel = 0
CopyPath.Position = UDim2.new(0, 185, 0, 55)
CopyPath.Size = UDim2.new(0, 75, 0, 30)
CopyPath.Font = Enum.Font.SourceSans
CopyPath.TextSize = 14
CopyPath.Text = ""Copy Path""
CopyPath.TextColor3 = Color3.new(1, 1, 1)
CopyPath.ZIndex = 10
table.insert(shade2,CopyPath)
table.insert(text1,CopyPath)

Directions_3.Name = ""Directions""
Directions_3.Parent = background_4
Directions_3.BackgroundTransparency = 1
Directions_3.BorderSizePixel = 0
Directions_3.Position = UDim2.new(0, 51, 0, 17)
Directions_3.Size = UDim2.new(0, 257, 0, 32)
Directions_3.Font = Enum.Font.SourceSans
Directions_3.TextSize = 14
Directions_3.Text = 'Click on a part and then click the ""Select Part"" button below to set it as a teleport location'
Directions_3.TextColor3 = Color3.new(1, 1, 1)
Directions_3.TextWrapped = true
Directions_3.TextYAlignment = Enum.TextYAlignment.Top
Directions_3.ZIndex = 10
table.insert(text1,Directions_3)

Path.Name = ""Path""
Path.Parent = background_4
Path.BackgroundTransparency = 1
Path.BorderSizePixel = 0
Path.Position = UDim2.new(0, 0, 0, 94)
Path.Size = UDim2.new(0, 360, 0, 16)
Path.Font = Enum.Font.SourceSansItalic
Path.TextSize = 14
Path.Text = """"
Path.TextColor3 = Color3.new(1, 1, 1)
Path.TextScaled = true
Path.TextWrapped = true
Path.TextYAlignment = Enum.TextYAlignment.Top
Path.ZIndex = 10
table.insert(text1,Path)

shadow_4.Name = ""shadow""
shadow_4.Parent = ToPartFrame
shadow_4.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
shadow_4.BorderSizePixel = 0
shadow_4.Size = UDim2.new(0, 360, 0, 20)
shadow_4.ZIndex = 10
table.insert(shade2,shadow_4)

PopupText_5.Name = ""PopupText""
PopupText_5.Parent = shadow_4
PopupText_5.BackgroundTransparency = 1
PopupText_5.Size = UDim2.new(1, 0, 0.95, 0)
PopupText_5.ZIndex = 10
PopupText_5.Font = Enum.Font.SourceSans
PopupText_5.TextSize = 14
PopupText_5.Text = ""Teleport to Part""
PopupText_5.TextColor3 = Color3.new(1, 1, 1)
PopupText_5.TextWrapped = true
table.insert(text1,PopupText_5)

Exit_4.Name = ""Exit""
Exit_4.Parent = shadow_4
Exit_4.BackgroundTransparency = 1
Exit_4.Position = UDim2.new(1, -20, 0, 0)
Exit_4.Size = UDim2.new(0, 20, 0, 20)
Exit_4.Text = """"
Exit_4.ZIndex = 10

ExitImage_5.Parent = Exit_4
ExitImage_5.BackgroundColor3 = Color3.new(1, 1, 1)
ExitImage_5.BackgroundTransparency = 1
ExitImage_5.Position = UDim2.new(0, 5, 0, 5)
ExitImage_5.Size = UDim2.new(0, 10, 0, 10)
ExitImage_5.Image = ""rbxassetid://5054663650""
ExitImage_5.ZIndex = 10

logs.Name = randomString()
logs.Parent = PARENT
logs.Active = true
logs.BackgroundTransparency = 1
logs.Position = UDim2.new(0, 0, 1, 10)
logs.Size = UDim2.new(0, 338, 0, 20)
logs.ZIndex = 10

shadow.Name = ""shadow""
shadow.Parent = logs
shadow.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
shadow.BorderSizePixel = 0
shadow.Position = UDim2.new(0, 0, 0.00999999978, 0)
shadow.Size = UDim2.new(0, 338, 0, 20)
shadow.ZIndex = 10
table.insert(shade2,shadow)

Hide.Name = ""Hide""
Hide.Parent = shadow
Hide.BackgroundTransparency = 1
Hide.Position = UDim2.new(1, -40, 0, 0)
Hide.Size = UDim2.new(0, 20, 0, 20)
Hide.ZIndex = 10
Hide.Text = """"

ImageLabel.Parent = Hide
ImageLabel.BackgroundColor3 = Color3.new(1, 1, 1)
ImageLabel.BackgroundTransparency = 1
ImageLabel.Position = UDim2.new(0, 3, 0, 3)
ImageLabel.Size = UDim2.new(0, 14, 0, 14)
ImageLabel.Image = ""rbxassetid://2406617031""
ImageLabel.ZIndex = 10

PopupText.Name = ""PopupText""
PopupText.Parent = shadow
PopupText.BackgroundTransparency = 1
PopupText.Size = UDim2.new(1, 0, 0.949999988, 0)
PopupText.ZIndex = 10
PopupText.Font = Enum.Font.SourceSans
PopupText.FontSize = Enum.FontSize.Size14
PopupText.Text = ""Logs""
PopupText.TextColor3 = Color3.new(1, 1, 1)
PopupText.TextWrapped = true
table.insert(text1,PopupText)

Exit.Name = ""Exit""
Exit.Parent = shadow
Exit.BackgroundTransparency = 1
Exit.Position = UDim2.new(1, -20, 0, 0)
Exit.Size = UDim2.new(0, 20, 0, 20)
Exit.ZIndex = 10
Exit.Text = """"

ImageLabel_2.Parent = Exit
ImageLabel_2.BackgroundColor3 = Color3.new(1, 1, 1)
ImageLabel_2.BackgroundTransparency = 1
ImageLabel_2.Position = UDim2.new(0, 5, 0, 5)
ImageLabel_2.Size = UDim2.new(0, 10, 0, 10)
ImageLabel_2.Image = ""rbxassetid://5054663650""
ImageLabel_2.ZIndex = 10

background.Name = ""background""
background.Parent = logs
background.Active = true
background.BackgroundColor3 = Color3.new(0.141176, 0.141176, 0.145098)
background.BorderSizePixel = 0
background.ClipsDescendants = true
background.Position = UDim2.new(0, 0, 1, 0)
background.Size = UDim2.new(0, 338, 0, 245)
background.ZIndex = 10

chat.Name = ""chat""
chat.Parent = background
chat.Active = true
chat.BackgroundColor3 = Color3.new(0.141176, 0.141176, 0.145098)
chat.BorderSizePixel = 0
chat.ClipsDescendants = true
chat.Size = UDim2.new(0, 338, 0, 245)
chat.ZIndex = 10
table.insert(shade1,chat)

Clear.Name = ""Clear""
Clear.Parent = chat
Clear.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
Clear.BorderSizePixel = 0
Clear.Position = UDim2.new(0, 5, 0, 220)
Clear.Size = UDim2.new(0, 50, 0, 20)
Clear.ZIndex = 10
Clear.Font = Enum.Font.SourceSans
Clear.FontSize = Enum.FontSize.Size14
Clear.Text = ""Clear""
Clear.TextColor3 = Color3.new(1, 1, 1)
table.insert(shade2,Clear)
table.insert(text1,Clear)

SaveChatlogs.Name = ""SaveChatlogs""
SaveChatlogs.Parent = chat
SaveChatlogs.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
SaveChatlogs.BorderSizePixel = 0
SaveChatlogs.Position = UDim2.new(0, 258, 0, 220)
SaveChatlogs.Size = UDim2.new(0, 75, 0, 20)
SaveChatlogs.ZIndex = 10
SaveChatlogs.Font = Enum.Font.SourceSans
SaveChatlogs.FontSize = Enum.FontSize.Size14
SaveChatlogs.Text = ""Save To .txt""
SaveChatlogs.TextColor3 = Color3.new(1, 1, 1)
table.insert(shade2,SaveChatlogs)
table.insert(text1,SaveChatlogs)

Toggle.Name = ""Toggle""
Toggle.Parent = chat
Toggle.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
Toggle.BorderSizePixel = 0
Toggle.Position = UDim2.new(0, 60, 0, 220)
Toggle.Size = UDim2.new(0, 66, 0, 20)
Toggle.ZIndex = 10
Toggle.Font = Enum.Font.SourceSans
Toggle.FontSize = Enum.FontSize.Size14
Toggle.Text = ""Disabled""
Toggle.TextColor3 = Color3.new(1, 1, 1)
table.insert(shade2,Toggle)
table.insert(text1,Toggle)

scroll_2.Name = ""scroll""
scroll_2.Parent = chat
scroll_2.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
scroll_2.BorderSizePixel = 0
scroll_2.Position = UDim2.new(0, 5, 0, 25)
scroll_2.Size = UDim2.new(0, 328, 0, 190)
scroll_2.ZIndex = 10
scroll_2.BottomImage = ""rbxasset://textures/ui/Scroll/scroll-middle.png""
scroll_2.CanvasSize = UDim2.new(0, 0, 0, 10)
scroll_2.ScrollBarThickness = 8
scroll_2.TopImage = ""rbxasset://textures/ui/Scroll/scroll-middle.png""
table.insert(scroll,scroll_2)
table.insert(shade2,scroll_2)

join.Name = ""join""
join.Parent = background
join.Active = true
join.BackgroundColor3 = Color3.new(0.141176, 0.141176, 0.145098)
join.BorderSizePixel = 0
join.ClipsDescendants = true
join.Size = UDim2.new(0, 338, 0, 245)
join.Visible = false
join.ZIndex = 10
table.insert(shade1,join)

Toggle_2.Name = ""Toggle""
Toggle_2.Parent = join
Toggle_2.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
Toggle_2.BorderSizePixel = 0
Toggle_2.Position = UDim2.new(0, 60, 0, 220)
Toggle_2.Size = UDim2.new(0, 66, 0, 20)
Toggle_2.ZIndex = 10
Toggle_2.Font = Enum.Font.SourceSans
Toggle_2.FontSize = Enum.FontSize.Size14
Toggle_2.Text = ""Disabled""
Toggle_2.TextColor3 = Color3.new(1, 1, 1)
table.insert(shade2,Toggle_2)
table.insert(text1,Toggle_2)

Clear_2.Name = ""Clear""
Clear_2.Parent = join
Clear_2.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
Clear_2.BorderSizePixel = 0
Clear_2.Position = UDim2.new(0, 5, 0, 220)
Clear_2.Size = UDim2.new(0, 50, 0, 20)
Clear_2.ZIndex = 10
Clear_2.Font = Enum.Font.SourceSans
Clear_2.FontSize = Enum.FontSize.Size14
Clear_2.Text = ""Clear""
Clear_2.TextColor3 = Color3.new(1, 1, 1)
table.insert(shade2,Clear_2)
table.insert(text1,Clear_2)

scroll_3.Name = ""scroll""
scroll_3.Parent = join
scroll_3.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
scroll_3.BorderSizePixel = 0
scroll_3.Position = UDim2.new(0, 5, 0, 25)
scroll_3.Size = UDim2.new(0, 328, 0, 190)
scroll_3.ZIndex = 10
scroll_3.BottomImage = ""rbxasset://textures/ui/Scroll/scroll-middle.png""
scroll_3.CanvasSize = UDim2.new(0, 0, 0, 10)
scroll_3.ScrollBarThickness = 8
scroll_3.TopImage = ""rbxasset://textures/ui/Scroll/scroll-middle.png""
table.insert(scroll,scroll_3)
table.insert(shade2,scroll_3)

selectChat.Name = ""selectChat""
selectChat.Parent = background
selectChat.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
selectChat.BorderSizePixel = 0
selectChat.Position = UDim2.new(0, 5, 0, 5)
selectChat.Size = UDim2.new(0, 164, 0, 20)
selectChat.ZIndex = 10
selectChat.Font = Enum.Font.SourceSans
selectChat.FontSize = Enum.FontSize.Size14
selectChat.Text = ""Chat Logs""
selectChat.TextColor3 = Color3.new(1, 1, 1)
table.insert(shade2,selectChat)
table.insert(text1,selectChat)

selectJoin.Name = ""selectJoin""
selectJoin.Parent = background
selectJoin.BackgroundColor3 = Color3.new(0.305882, 0.305882, 0.309804)
selectJoin.BorderSizePixel = 0
selectJoin.Position = UDim2.new(0, 169, 0, 5)
selectJoin.Size = UDim2.new(0, 164, 0, 20)
selectJoin.ZIndex = 10
selectJoin.Font = Enum.Font.SourceSans
selectJoin.FontSize = Enum.FontSize.Size14
selectJoin.Text = ""Join Logs""
selectJoin.TextColor3 = Color3.new(1, 1, 1)
table.insert(shade3,selectJoin)
table.insert(text1,selectJoin)

function create(data)
	local insts = {}
	for i,v in pairs(data) do insts[v[1]] = Instance.new(v[2]) end

	for _,v in pairs(data) do
		for prop,val in pairs(v[3]) do
			if type(val) == ""table"" then
				insts[v[1]][prop] = insts[val[1]]
			else
				insts[v[1]][prop] = val
			end
		end
	end

	return insts[1]
end

TextService = cloneref(game:GetService(""TextService""))
ViewportTextBox = (function()

	local funcs = {}
	funcs.Update = function(self)
		local cursorPos = self.TextBox.CursorPosition
		local text = self.TextBox.Text
		if text == """" then self.TextBox.Position = UDim2.new(0,2,0,0) return end
		if cursorPos == -1 then return end

		local cursorText = text:sub(1,cursorPos-1)
		local pos = nil
		local leftEnd = -self.TextBox.Position.X.Offset
		local rightEnd = leftEnd + self.View.AbsoluteSize.X

		local totalTextSize = TextService:GetTextSize(text,self.TextBox.TextSize,self.TextBox.Font,Vector2.new(999999999,100)).X
		local cursorTextSize = TextService:GetTextSize(cursorText,self.TextBox.TextSize,self.TextBox.Font,Vector2.new(999999999,100)).X

		if cursorTextSize > rightEnd then
			pos = math.max(-2,cursorTextSize - self.View.AbsoluteSize.X + 2)
		elseif cursorTextSize < leftEnd then
			pos = math.max(-2,cursorTextSize-2)
		elseif totalTextSize < rightEnd then
			pos = math.max(-2,totalTextSize - self.View.AbsoluteSize.X + 2)
		end

		if pos then
			self.TextBox.Position = UDim2.new(0,-pos,0,0)
			self.TextBox.Size = UDim2.new(1,pos,1,0)
		end
	end

	local mt = {}
	mt.__index = funcs

	local function convert(textbox)
		local obj = setmetatable({OffsetX = 0, TextBox = textbox},mt)

		local view = Instance.new(""Frame"")
		view.BackgroundTransparency = textbox.BackgroundTransparency
		view.BackgroundColor3 = textbox.BackgroundColor3
		view.BorderSizePixel = textbox.BorderSizePixel
		view.BorderColor3 = textbox.BorderColor3
		view.Position = textbox.Position
		view.Size = textbox.Size
		view.ClipsDescendants = true
		view.Name = textbox.Name
		view.ZIndex = 10
		textbox.BackgroundTransparency = 1
		textbox.Position = UDim2.new(0,4,0,0)
		textbox.Size = UDim2.new(1,-8,1,0)
		textbox.TextXAlignment = Enum.TextXAlignment.Left
		textbox.Name = ""Input""
		table.insert(text1,textbox)
		table.insert(shade2,view)

		obj.View = view

		textbox.Changed:Connect(function(prop)
			if prop == ""Text"" or prop == ""CursorPosition"" or prop == ""AbsoluteSize"" then
				obj:Update()
			end
		end)

		obj:Update()

		view.Parent = textbox.Parent
		textbox.Parent = view

		return obj
	end

	return {convert = convert}
end)()

ViewportTextBox.convert(Cmdbar).View.ZIndex = 10
ViewportTextBox.convert(Cmdbar_2).View.ZIndex = 10
ViewportTextBox.convert(Cmdbar_3).View.ZIndex = 10

IYMouse = Players.LocalPlayer:GetMouse()
PlayerGui = Players.LocalPlayer:FindFirstChildWhichIsA(""PlayerGui"")
UserInputService = cloneref(game:GetService(""UserInputService""))
TweenService = cloneref(game:GetService(""TweenService""))
HttpService = cloneref(game:GetService(""HttpService""))
MarketplaceService = cloneref(game:GetService(""MarketplaceService""))
RunService = cloneref(game:GetService(""RunService""))
TeleportService = cloneref(game:GetService(""TeleportService""))
StarterGui = cloneref(game:GetService(""StarterGui""))
GuiService = cloneref(game:GetService(""GuiService""))
Lighting = cloneref(game:GetService(""Lighting""))
ContextActionService = cloneref(game:GetService(""ContextActionService""))
NetworkClient = cloneref(game:GetService(""NetworkClient""))
ReplicatedStorage = cloneref(game:GetService(""ReplicatedStorage""))
GroupService = cloneref(game:GetService(""GroupService""))
PathService = cloneref(game:GetService(""PathfindingService""))
SoundService = cloneref(game:GetService(""SoundService""))
Teams = cloneref(game:GetService(""Teams""))
StarterPlayer = cloneref(game:GetService(""StarterPlayer""))
InsertService = cloneref(game:GetService(""InsertService""))
ChatService = cloneref(game:GetService(""Chat""))
ProximityPromptService = cloneref(game:GetService(""ProximityPromptService""))
StatsService = cloneref(game:GetService(""Stats""))
MaterialService = cloneref(game:GetService(""MaterialService""))
AvatarEditorService = cloneref(game:GetService(""AvatarEditorService""))
TextChatService = cloneref(game:GetService(""TextChatService""))

sethidden = sethiddenproperty or set_hidden_property or set_hidden_prop
gethidden = gethiddenproperty or get_hidden_property or get_hidden_prop
queueteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)
httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
PlaceId, JobId = game.PlaceId, game.JobId
local IsOnMobile = table.find({Enum.Platform.IOS, Enum.Platform.Android}, UserInputService:GetPlatform())
everyClipboard = setclipboard or toclipboard or set_clipboard or (Clipboard and Clipboard.set)
isLegacyChat = TextChatService.ChatVersion == Enum.ChatVersion.LegacyChatService

local writefile = type(writefile) == ""function"" and function(file, data, safe)
    if safe == true then return pcall(writefile, file, data) end
    writefile(file, data)
end

local readfile = type(readfile) == ""function"" and function(file, safe)
    if safe == true then return pcall(readfile, file) end
    return readfile(file)
end

function writefileExploit()
	if writefile then
		return true
	end
end

function readfileExploit()
	if readfile then
		return true
	end
end

function isNumber(str)
	if tonumber(str) ~= nil or str == 'inf' then
		return true
	end
end

function getRoot(char)
	local rootPart = char:FindFirstChild('HumanoidRootPart') or char:FindFirstChild('Torso') or char:FindFirstChild('UpperTorso')
	return rootPart
end

function tools(plr)
	if plr:FindFirstChildOfClass(""Backpack""):FindFirstChildOfClass('Tool') or plr.Character:FindFirstChildOfClass('Tool') then
		return true
	end
end

function r15(plr)
	if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
		return true
	end
end

function rigType(player)
    return tostring(player.Character:FindFirstChildWhichIsA(""Humanoid"").RigType):split(""."")[3]
end

function toClipboard(txt)
    if everyClipboard then
        everyClipboard(tostring(txt))
        notify(""Clipboard"", ""Copied to clipboard"")
    else
        notify(""Clipboard"", ""Your exploit doesn't have the ability to use the clipboard"")
    end
end

function chatMessage(str)
    str = tostring(str)
    if not isLegacyChat then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, ""All"")
    end
end

function getHierarchy(obj)
	local fullname
	local period

	if string.find(obj.Name,' ') then
		fullname = '[""'..obj.Name..'""]'
		period = false
	else
		fullname = obj.Name
		period = true
	end

	local getS = obj
	local parent = obj
	local service = ''

	if getS.Parent ~= game then
		repeat
			getS = getS.Parent
			service = getS.ClassName
		until getS.Parent == game
	end

	if parent.Parent ~= getS then
		repeat
			parent = parent.Parent
			if string.find(tostring(parent),' ') then
				if period then
					fullname = '[""'..parent.Name..'""].'..fullname
				else
					fullname = '[""'..parent.Name..'""]'..fullname
				end
				period = false
			else
				if period then
					fullname = parent.Name..'.'..fullname
				else
					fullname = parent.Name..''..fullname
				end
				period = true
			end
		until parent.Parent == getS
	elseif string.find(tostring(parent),' ') then
		fullname = '[""'..parent.Name..'""]'
		period = false
	end

	if period then
		return 'game:GetService(""'..service..'"").'..fullname
	else
		return 'game:GetService(""'..service..'"")'..fullname
	end
end

AllWaypoints = {}

local cooldown = false
function writefileCooldown(name,data)
	task.spawn(function()
		if not cooldown then
			cooldown = true
			writefile(name, data, true)
		else
			repeat wait() until cooldown == false
			writefileCooldown(name,data)
		end
		wait(3)
		cooldown = false
	end)
end

function dragGUI(gui)
	task.spawn(function()
		local dragging
		local dragInput
		local dragStart = Vector3.new(0,0,0)
		local startPos
		local function update(input)
			local delta = input.Position - dragStart
			local Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
			TweenService:Create(gui, TweenInfo.new(.20), {Position = Position}):Play()
		end
		gui.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
				dragging = true
				dragStart = input.Position
				startPos = gui.Position

				input.Changed:Connect(function()
					if input.UserInputState == Enum.UserInputState.End then
						dragging = false
					end
				end)
			end
		end)
		gui.InputChanged:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
				dragInput = input
			end
		end)
		UserInputService.InputChanged:Connect(function(input)
			if input == dragInput and dragging then
				update(input)
			end
		end)
	end)
end

dragGUI(logs)
dragGUI(KeybindEditor)
dragGUI(PluginEditor)
dragGUI(ToPartFrame)

eventEditor = (function()
	local events = {}

	local function registerEvent(name,sets)
		events[name] = {
			commands = {},
			sets = sets or {}
		}
	end

	local onEdited = nil

	local function fireEvent(name,...)
		local args = {...}
		local event = events[name]
		if event then
			for i,cmd in pairs(event.commands) do
				local metCondition = true
				for idx,set in pairs(event.sets) do
					local argVal = args[idx]
					local cmdSet = cmd[2][idx]
					local condType = set.Type
					if condType == ""Player"" then
						if cmdSet == 0 then
							metCondition = metCondition and (tostring(Players.LocalPlayer) == argVal)
						elseif cmdSet ~= 1 then
							metCondition = metCondition and table.find(getPlayer(cmdSet,Players.LocalPlayer),argVal)
						end
					elseif condType == ""String"" then
						if cmdSet ~= 0 then
							metCondition = metCondition and string.find(argVal:lower(),cmdSet:lower())
						end
					elseif condType == ""Number"" then
						if cmdSet ~= 0 then
							metCondition = metCondition and tonumber(argVal)<=tonumber(cmdSet)
						end
					end
					if not metCondition then break end
				end

				if metCondition then
					pcall(task.spawn(function()
						local cmdStr = cmd[1]
						for count,arg in pairs(args) do
							cmdStr = cmdStr:gsub(""%$""..count,arg)
						end
						wait(cmd[3] or 0)
						execCmd(cmdStr)
					end))
				end
			end
		end
	end

	local main = create({
		{1,""Frame"",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BackgroundTransparency=1,BorderSizePixel=0,Name=""EventEditor"",Position=UDim2.new(0.5,-175,0,-500),Size=UDim2.new(0,350,0,20),ZIndex=10,}},
		{2,""Frame"",{BackgroundColor3=currentShade2,BorderSizePixel=0,Name=""TopBar"",Parent={1},Size=UDim2.new(1,0,0,20),ZIndex=10,}},
		{3,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""Title"",Parent={2},Position=UDim2.new(0,0,0,0),Size=UDim2.new(1,0,0.95,0),Text=""Event Editor"",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=Enum.TextXAlignment.Center,ZIndex=10,}},
		{4,""TextButton"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""Close"",Parent={2},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,20),Text="""",TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}},
		{5,""ImageLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image=""rbxassetid://5054663650"",Parent={4},Position=UDim2.new(0,5,0,5),Size=UDim2.new(0,10,0,10),ZIndex=10,}},
		{6,""Frame"",{BackgroundColor3=currentShade1,BorderSizePixel=0,Name=""Content"",Parent={1},Position=UDim2.new(0,0,0,20),Size=UDim2.new(1,0,0,202),ZIndex=10,}},
		{7,""ScrollingFrame"",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,BottomImage=""rbxasset://textures/ui/Scroll/scroll-middle.png"",CanvasSize=UDim2.new(0,0,0,100),Name=""List"",Parent={6},Position=UDim2.new(0,5,0,5),ScrollBarImageColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),ScrollBarThickness=8,Size=UDim2.new(1,-10,1,-10),TopImage=""rbxasset://textures/ui/Scroll/scroll-middle.png"",ZIndex=10,}},
		{8,""Frame"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name=""Holder"",Parent={7},Size=UDim2.new(1,0,1,0),ZIndex=10,}},
		{9,""UIListLayout"",{Parent={8},SortOrder=2,}},
		{10,""Frame"",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BackgroundTransparency=1,BorderColor3=Color3.new(0.3137255012989,0.3137255012989,0.3137255012989),BorderSizePixel=0,ClipsDescendants=true,Name=""Settings"",Parent={6},Position=UDim2.new(1,0,0,0),Size=UDim2.new(0,150,1,0),ZIndex=10,}},
		{11,""Frame"",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),Name=""Slider"",Parent={10},Position=UDim2.new(0,-150,0,0),Size=UDim2.new(1,0,1,0),ZIndex=10,}},
		{12,""Frame"",{BackgroundColor3=Color3.new(0.23529413342476,0.23529413342476,0.23529413342476),BorderColor3=Color3.new(0.3137255012989,0.3137255012989,0.3137255012989),BorderSizePixel=0,Name=""Line"",Parent={11},Size=UDim2.new(0,1,1,0),ZIndex=10,}},
		{13,""ScrollingFrame"",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,BottomImage=""rbxasset://textures/ui/Scroll/scroll-middle.png"",CanvasSize=UDim2.new(0,0,0,100),Name=""List"",Parent={11},Position=UDim2.new(0,0,0,25),ScrollBarImageColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),ScrollBarThickness=8,Size=UDim2.new(1,0,1,-25),TopImage=""rbxasset://textures/ui/Scroll/scroll-middle.png"",ZIndex=10,}},
		{14,""Frame"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name=""Holder"",Parent={13},Size=UDim2.new(1,0,1,0),ZIndex=10,}},
		{15,""UIListLayout"",{Parent={14},SortOrder=2,}},
		{16,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""Title"",Parent={11},Size=UDim2.new(1,0,0,20),Text=""Event Settings"",TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}},
		{17,""TextButton"",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),Font=3,Name=""Close"",BorderSizePixel=0,Parent={11},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,20),Text=""<"",TextColor3=Color3.new(1,1,1),TextSize=18,ZIndex=10,}},
		{18,""Folder"",{Name=""Templates"",Parent={10},}},
		{19,""Frame"",{BackgroundColor3=Color3.new(0.19607844948769,0.19607844948769,0.19607844948769),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),Name=""Players"",Parent={18},Position=UDim2.new(0,0,0,25),Size=UDim2.new(1,0,0,86),Visible=false,ZIndex=10,}},
		{20,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""Title"",Parent={19},Size=UDim2.new(1,0,0,20),Text=""Choose Players"",TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}},
		{21,""TextLabel"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name=""Any"",Parent={19},Position=UDim2.new(0,5,0,42),Size=UDim2.new(1,-10,0,20),Text=""Any Player"",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
		{22,""Frame"",{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,Name=""Button"",Parent={21},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,20),ZIndex=10,}},
		{23,""TextButton"",{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name=""On"",Parent={22},Position=UDim2.new(0,2,0,2),Size=UDim2.new(0,16,0,16),Text="""",TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},
		{24,""TextLabel"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name=""Me"",Parent={19},Position=UDim2.new(0,5,0,20),Size=UDim2.new(1,-10,0,20),Text=""Me Only"",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
		{25,""Frame"",{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,Name=""Button"",Parent={24},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,20),ZIndex=10,}},
		{26,""TextButton"",{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name=""On"",Parent={25},Position=UDim2.new(0,2,0,2),Size=UDim2.new(0,16,0,16),Text="""",TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},
		{27,""TextBox"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,ClearTextOnFocus=false,Font=3,Name=""Custom"",Parent={19},PlaceholderColor3=Color3.new(0.47058826684952,0.47058826684952,0.47058826684952),PlaceholderText=""Custom Player Set"",Position=UDim2.new(0,5,0,64),Size=UDim2.new(1,-35,0,20),Text="""",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
		{28,""Frame"",{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,Name=""CustomButton"",Parent={19},Position=UDim2.new(1,-25,0,64),Size=UDim2.new(0,20,0,20),ZIndex=10,}},
		{29,""TextButton"",{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name=""On"",Parent={28},Position=UDim2.new(0,2,0,2),Size=UDim2.new(0,16,0,16),Text="""",TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},
		{30,""Frame"",{BackgroundColor3=Color3.new(0.19607844948769,0.19607844948769,0.19607844948769),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),Name=""Strings"",Parent={18},Position=UDim2.new(0,0,0,25),Size=UDim2.new(1,0,0,64),Visible=false,ZIndex=10,}},
		{31,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""Title"",Parent={30},Size=UDim2.new(1,0,0,20),Text=""Choose String"",TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}},
		{32,""TextLabel"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name=""Any"",Parent={30},Position=UDim2.new(0,5,0,20),Size=UDim2.new(1,-10,0,20),Text=""Any String"",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
		{33,""Frame"",{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,Name=""Button"",Parent={32},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,20),ZIndex=10,}},
		{34,""TextButton"",{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name=""On"",Parent={33},Position=UDim2.new(0,2,0,2),Size=UDim2.new(0,16,0,16),Text="""",TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},
		{54,""Frame"",{BackgroundColor3=Color3.new(0.19607844948769,0.19607844948769,0.19607844948769),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),Name=""Numbers"",Parent={18},Position=UDim2.new(0,0,0,25),Size=UDim2.new(1,0,0,64),Visible=false,ZIndex=10,}},
		{55,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""Title"",Parent={54},Size=UDim2.new(1,0,0,20),Text=""Choose String"",TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}},
		{56,""TextLabel"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name=""Any"",Parent={54},Position=UDim2.new(0,5,0,20),Size=UDim2.new(1,-10,0,20),Text=""Any Number"",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
		{57,""Frame"",{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,Name=""Button"",Parent={56},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,20),ZIndex=10,}},
		{58,""TextButton"",{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name=""On"",Parent={57},Position=UDim2.new(0,2,0,2),Size=UDim2.new(0,16,0,16),Text="""",TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},
		{59,""TextBox"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,ClearTextOnFocus=false,Font=3,Name=""Custom"",Parent={54},PlaceholderColor3=Color3.new(0.47058826684952,0.47058826684952,0.47058826684952),PlaceholderText=""Number"",Position=UDim2.new(0,5,0,42),Size=UDim2.new(1,-35,0,20),Text="""",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
		{60,""Frame"",{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,Name=""CustomButton"",Parent={54},Position=UDim2.new(1,-25,0,42),Size=UDim2.new(0,20,0,20),ZIndex=10,}},
		{61,""TextButton"",{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name=""On"",Parent={60},Position=UDim2.new(0,2,0,2),Size=UDim2.new(0,16,0,16),Text="""",TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},
		{35,""TextBox"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,ClearTextOnFocus=false,Font=3,Name=""Custom"",Parent={30},PlaceholderColor3=Color3.new(0.47058826684952,0.47058826684952,0.47058826684952),PlaceholderText=""Match String"",Position=UDim2.new(0,5,0,42),Size=UDim2.new(1,-35,0,20),Text="""",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
		{36,""Frame"",{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,Name=""CustomButton"",Parent={30},Position=UDim2.new(1,-25,0,42),Size=UDim2.new(0,20,0,20),ZIndex=10,}},
		{37,""TextButton"",{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name=""On"",Parent={36},Position=UDim2.new(0,2,0,2),Size=UDim2.new(0,16,0,16),Text="""",TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},
		{38,""Frame"",{BackgroundColor3=Color3.new(0.19607844948769,0.19607844948769,0.19607844948769),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),Name=""DelayEditor"",Parent={18},Position=UDim2.new(0,0,0,25),Size=UDim2.new(1,0,0,24),Visible=false,ZIndex=10,}},
		{39,""TextBox"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,Font=3,Name=""Secs"",Parent={38},PlaceholderColor3=Color3.new(0.47058826684952,0.47058826684952,0.47058826684952),Position=UDim2.new(0,60,0,2),Size=UDim2.new(1,-65,0,20),Text="""",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
		{40,""TextLabel"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name=""Label"",Parent={39},Position=UDim2.new(0,-55,0,0),Size=UDim2.new(1,0,1,0),Text=""Delay (s):"",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
		{41,""Frame"",{BackgroundColor3=currentShade1,BorderSizePixel=0,ClipsDescendants=true,Name=""EventTemplate"",Parent={6},Size=UDim2.new(1,0,0,20),Visible=false,ZIndex=10,}},
		{42,""TextButton"",{BackgroundColor3=currentText1,BackgroundTransparency=1,Font=3,Name=""Expand"",Parent={41},Size=UDim2.new(0,20,0,20),Text="">"",TextColor3=Color3.new(1,1,1),TextSize=18,ZIndex=10,}},
		{43,""TextLabel"",{BackgroundColor3=currentText1,BackgroundTransparency=1,Font=3,Name=""EventName"",Parent={41},Position=UDim2.new(0,25,0,0),Size=UDim2.new(1,-25,0,20),Text=""OnSpawn"",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
		{44,""Frame"",{BackgroundColor3=Color3.new(0.19607844948769,0.19607844948769,0.19607844948769),BorderSizePixel=0,BackgroundTransparency=1,ClipsDescendants=true,Name=""Cmds"",Parent={41},Position=UDim2.new(0,0,0,20),Size=UDim2.new(1,0,1,-20),ZIndex=10,}},
		{45,""Frame"",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BorderColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),Name=""Add"",Parent={44},Position=UDim2.new(0,0,1,-20),Size=UDim2.new(1,0,0,20),ZIndex=10,}},
		{46,""TextBox"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,ClearTextOnFocus=false,Font=3,Parent={45},PlaceholderColor3=Color3.new(0.7843137383461,0.7843137383461,0.7843137383461),PlaceholderText=""Add new command"",Position=UDim2.new(0,5,0,0),Size=UDim2.new(1,-10,1,0),Text="""",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
		{47,""Frame"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name=""Holder"",Parent={44},Size=UDim2.new(1,0,1,-20),ZIndex=10,}},
		{48,""UIListLayout"",{Parent={47},SortOrder=2,}},
		{49,""Frame"",{currentShade1,BorderSizePixel=0,ClipsDescendants=true,Name=""CmdTemplate"",Parent={6},Size=UDim2.new(1,0,0,20),Visible=false,ZIndex=10,}},
		{50,""TextBox"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,ClearTextOnFocus=false,Font=3,Parent={49},PlaceholderColor3=Color3.new(1,1,1),Position=UDim2.new(0,5,0,0),Size=UDim2.new(1,-45,0,20),Text=""a\\b\\c\\d"",TextColor3=currentText1,TextSize=14,TextXAlignment=0,ZIndex=10,}},
		{51,""TextButton"",{BackgroundColor3=currentShade1,BorderSizePixel=0,Font=3,Name=""Delete"",Parent={49},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,20),Text=""X"",TextColor3=Color3.new(1,1,1),TextSize=18,ZIndex=10,}},
		{52,""TextButton"",{BackgroundColor3=currentShade1,BorderSizePixel=0,Font=3,Name=""Settings"",Parent={49},Position=UDim2.new(1,-40,0,0),Size=UDim2.new(0,20,0,20),Text="""",TextColor3=Color3.new(1,1,1),TextSize=18,ZIndex=10,}},
		{53,""ImageLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image=""rbxassetid://1204397029"",Parent={52},Position=UDim2.new(0,2,0,2),Size=UDim2.new(0,16,0,16),ZIndex=10,}},
	})
	main.Name = randomString()
	local mainFrame = main:WaitForChild(""Content"")
	local eventList = mainFrame:WaitForChild(""List"")
	local eventListHolder = eventList:WaitForChild(""Holder"")
	local cmdTemplate = mainFrame:WaitForChild(""CmdTemplate"")
	local eventTemplate = mainFrame:WaitForChild(""EventTemplate"")
	local settingsFrame = mainFrame:WaitForChild(""Settings""):WaitForChild(""Slider"")
	local settingsTemplates = mainFrame.Settings:WaitForChild(""Templates"")
	local settingsList = settingsFrame:WaitForChild(""List""):WaitForChild(""Holder"")
	table.insert(shade2,main.TopBar) table.insert(shade1,mainFrame) table.insert(shade2,eventTemplate)
	table.insert(text1,eventTemplate.EventName) table.insert(shade1,eventTemplate.Cmds.Add) table.insert(shade1,cmdTemplate)
	table.insert(text1,cmdTemplate.TextBox) table.insert(shade2,cmdTemplate.Delete) table.insert(shade2,cmdTemplate.Settings)
	table.insert(scroll,mainFrame.List) table.insert(shade1,settingsFrame) table.insert(shade2,settingsFrame.Line)
	table.insert(shade2,settingsFrame.Close) table.insert(scroll,settingsFrame.List) table.insert(shade2,settingsTemplates.DelayEditor.Secs)
	table.insert(text1,settingsTemplates.DelayEditor.Secs) table.insert(text1,settingsTemplates.DelayEditor.Secs.Label) table.insert(text1,settingsTemplates.Players.Title)
	table.insert(shade3,settingsTemplates.Players.CustomButton) table.insert(shade2,settingsTemplates.Players.Custom) table.insert(text1,settingsTemplates.Players.Custom)
	table.insert(shade3,settingsTemplates.Players.Any.Button) table.insert(shade3,settingsTemplates.Players.Me.Button) table.insert(text1,settingsTemplates.Players.Any)
	table.insert(text1,settingsTemplates.Players.Me) table.insert(text1,settingsTemplates.Strings.Title) table.insert(text1,settingsTemplates.Strings.Any)
	table.insert(shade3,settingsTemplates.Strings.Any.Button) table.insert(shade3,settingsTemplates.Strings.CustomButton) table.insert(text1,settingsTemplates.Strings.Custom)
	table.insert(shade2,settingsTemplates.Strings.Custom)
	table.insert(text1,settingsTemplates.Players.Me) table.insert(text1,settingsTemplates.Numbers.Title) table.insert(text1,settingsTemplates.Numbers.Any)
	table.insert(shade3,settingsTemplates.Numbers.Any.Button) table.insert(shade3,settingsTemplates.Numbers.CustomButton) table.insert(text1,settingsTemplates.Numbers.Custom)
	table.insert(shade2,settingsTemplates.Numbers.Custom)

	local tweenInf = TweenInfo.new(0.25,Enum.EasingStyle.Quart,Enum.EasingDirection.Out)

	local currentlyEditingCmd = nil

	settingsFrame:WaitForChild(""Close"").MouseButton1Click:Connect(function()
		settingsFrame:TweenPosition(UDim2.new(0,-150,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
	end)

	local function resizeList()
		local size = 0

		for i,v in pairs(eventListHolder:GetChildren()) do
			if v.Name == ""EventTemplate"" then
				size = size + 20
				if v.Expand.Rotation == 90 then
					size = size + 20*(1+(#events[v.EventName:GetAttribute(""RawName"")].commands or 0))
				end
			end
		end

		TweenService:Create(eventList,tweenInf,{CanvasSize = UDim2.new(0,0,0,size)}):Play()

		if size > eventList.AbsoluteSize.Y then
			eventListHolder.Size = UDim2.new(1,-8,1,0)
		else
			eventListHolder.Size = UDim2.new(1,0,1,0)
		end
	end

	local function resizeSettingsList()
		local size = 0

		for i,v in pairs(settingsList:GetChildren()) do
			if v:IsA(""Frame"") then
				size = size + v.AbsoluteSize.Y
			end
		end

		settingsList.Parent.CanvasSize = UDim2.new(0,0,0,size)

		if size > settingsList.Parent.AbsoluteSize.Y then
			settingsList.Size = UDim2.new(1,-8,1,0)
		else
			settingsList.Size = UDim2.new(1,0,1,0)
		end
	end

	local function setupCheckbox(button,callback)
		local enabled = button.On.BackgroundTransparency == 0

		local function update()
			button.On.BackgroundTransparency = (enabled and 0 or 1)
		end

		button.On.MouseButton1Click:Connect(function()
			enabled = not enabled
			update()
			if callback then callback(enabled) end
		end)

		return {
			Toggle = function(nocall) enabled = not enabled update() if not nocall and callback then callback(enabled) end end,
			Enable = function(nocall) if enabled then return end enabled = true update()if not nocall and callback then callback(enabled) end end,
			Disable = function(nocall) if not enabled then return end enabled = false update()if not nocall and callback then callback(enabled) end end,
			IsEnabled = function() return enabled end
		}
	end

	local function openSettingsEditor(event,cmd)
		currentlyEditingCmd = cmd

		for i,v in pairs(settingsList:GetChildren()) do if v:IsA(""Frame"") then v:Destroy() end end

		local delayEditor = settingsTemplates.DelayEditor:Clone()
		delayEditor.Secs.FocusLost:Connect(function()
			cmd[3] = tonumber(delayEditor.Secs.Text) or 0
			delayEditor.Secs.Text = cmd[3]
			if onEdited then onEdited() end
		end)
		delayEditor.Secs.Text = cmd[3]
		delayEditor.Visible = true
		table.insert(shade2,delayEditor.Secs)
		table.insert(text1,delayEditor.Secs)
		table.insert(text1,delayEditor.Secs.Label)
		delayEditor.Parent = settingsList

		for i,v in pairs(event.sets) do
			if v.Type == ""Player"" then
				local template = settingsTemplates.Players:Clone()
				template.Title.Text = v.Name or ""Player""

				local me,any,custom

				me = setupCheckbox(template.Me.Button,function(on)
					if not on then return end
					any.Disable()
					custom.Disable()
					cmd[2][i] = 0
					if onEdited then onEdited() end
				end)

				any = setupCheckbox(template.Any.Button,function(on)
					if not on then return end
					me.Disable()
					custom.Disable()
					cmd[2][i] = 1
					if onEdited then onEdited() end
				end)

				local customTextBox = template.Custom
				custom = setupCheckbox(template.CustomButton,function(on)
					if not on then return end
					me.Disable()
					any.Disable()
					cmd[2][i] = customTextBox.Text
					if onEdited then onEdited() end
				end)

				ViewportTextBox.convert(customTextBox)
				customTextBox.FocusLost:Connect(function()
					if custom:IsEnabled() then
						cmd[2][i] = customTextBox.Text
						if onEdited then onEdited() end
					end
				end)

				local cVal = cmd[2][i]
				if cVal == 0 then
					me:Enable()
				elseif cVal == 1 then
					any:Enable()
				else
					custom:Enable()
					customTextBox.Text = cVal
				end

				template.Visible = true
				table.insert(text1,template.Title)
				table.insert(shade3,template.CustomButton)
				table.insert(shade3,template.Any.Button)
				table.insert(shade3,template.Me.Button)
				table.insert(text1,template.Any)
				table.insert(text1,template.Me)
				template.Parent = settingsList
			elseif v.Type == ""String"" then
				local template = settingsTemplates.Strings:Clone()
				template.Title.Text = v.Name or ""String""

				local any,custom

				any = setupCheckbox(template.Any.Button,function(on)
					if not on then return end
					custom.Disable()
					cmd[2][i] = 0
					if onEdited then onEdited() end
				end)

				local customTextBox = template.Custom
				custom = setupCheckbox(template.CustomButton,function(on)
					if not on then return end
					any.Disable()
					cmd[2][i] = customTextBox.Text
					if onEdited then onEdited() end
				end)

				ViewportTextBox.convert(customTextBox)
				customTextBox.FocusLost:Connect(function()
					if custom:IsEnabled() then
						cmd[2][i] = customTextBox.Text
						if onEdited then onEdited() end
					end
				end)

				local cVal = cmd[2][i]
				if cVal == 0 then
					any:Enable()
				else
					custom:Enable()
					customTextBox.Text = cVal
				end

				template.Visible = true
				table.insert(text1,template.Title)
				table.insert(text1,template.Any)
				table.insert(shade3,template.Any.Button)
				table.insert(shade3,template.CustomButton)
				template.Parent = settingsList
			elseif v.Type == ""Number"" then
				local template = settingsTemplates.Numbers:Clone()
				template.Title.Text = v.Name or ""Number""

				local any,custom

				any = setupCheckbox(template.Any.Button,function(on)
					if not on then return end
					custom.Disable()
					cmd[2][i] = 0
					if onEdited then onEdited() end
				end)

				local customTextBox = template.Custom
				custom = setupCheckbox(template.CustomButton,function(on)
					if not on then return end
					any.Disable()
					cmd[2][i] = customTextBox.Text
					if onEdited then onEdited() end
				end)

				ViewportTextBox.convert(customTextBox)
				customTextBox.FocusLost:Connect(function()
					cmd[2][i] = tonumber(customTextBox.Text) or 0
					customTextBox.Text = cmd[2][i]
					if custom:IsEnabled() then
						if onEdited then onEdited() end
					end
				end)

				local cVal = cmd[2][i]
				if cVal == 0 then
					any:Enable()
				else
					custom:Enable()
					customTextBox.Text = cVal
				end

				template.Visible = true
				table.insert(text1,template.Title)
				table.insert(text1,template.Any)
				table.insert(shade3,template.Any.Button)
				table.insert(shade3,template.CustomButton)
				template.Parent = settingsList
			end
		end
		resizeSettingsList()
		settingsFrame:TweenPosition(UDim2.new(0,0,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
	end

	local function defaultSettings(ev)
		local res = {}

		for i,v in pairs(ev.sets) do
			if v.Type == ""Player"" then
				res[#res+1] = v.Default or 0
			elseif v.Type == ""String"" then
				res[#res+1] = v.Default or 0
			elseif v.Type == ""Number"" then
				res[#res+1] = v.Default or 0
			end
		end

		return res
	end

	local function refreshList()
		for i,v in pairs(eventListHolder:GetChildren()) do if v:IsA(""Frame"") then v:Destroy() end end

		for name,event in pairs(events) do
			local eventF = eventTemplate:Clone()
			eventF.EventName.Text = name
			eventF.Visible = true
			eventF.EventName:SetAttribute(""RawName"", name)
			table.insert(shade2,eventF)
			table.insert(text1,eventF.EventName)
			table.insert(shade1,eventF.Cmds.Add)

			local expanded = false
			eventF.Expand.MouseButton1Down:Connect(function()
				expanded = not expanded
				eventF:TweenSize(UDim2.new(1,0,0,20 + (expanded and 20*#eventF.Cmds.Holder:GetChildren() or 0)),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
				eventF.Expand.Rotation = expanded and 90 or 0
				resizeList()
			end)

			local function refreshCommands()
				for i,v in pairs(eventF.Cmds.Holder:GetChildren()) do
					if v.Name == ""CmdTemplate"" then
						v:Destroy()
					end
				end

				eventF.EventName.Text = name..(#event.commands > 0 and "" (""..#event.commands.."")"" or """")

				for i,cmd in pairs(event.commands) do
					local cmdF = cmdTemplate:Clone()
					local cmdTextBox = cmdF.TextBox
					ViewportTextBox.convert(cmdTextBox)
					cmdTextBox.Text = cmd[1]
					cmdF.Visible = true
					table.insert(shade1,cmdF)
					table.insert(shade2,cmdF.Delete)
					table.insert(shade2,cmdF.Settings)

					cmdTextBox.FocusLost:Connect(function()
						event.commands[i] = {cmdTextBox.Text,cmd[2],cmd[3]}
						if onEdited then onEdited() end
					end)

					cmdF.Settings.MouseButton1Click:Connect(function()
						openSettingsEditor(event,cmd)
					end)

					cmdF.Delete.MouseButton1Click:Connect(function()
						table.remove(event.commands,i)
						refreshCommands()
						resizeList()

						if currentlyEditingCmd == cmd then
							settingsFrame:TweenPosition(UDim2.new(0,-150,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
						end
						if onEdited then onEdited() end
					end)

					cmdF.Parent = eventF.Cmds.Holder
				end

				eventF:TweenSize(UDim2.new(1,0,0,20 + (expanded and 20*#eventF.Cmds.Holder:GetChildren() or 0)),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
			end

			local newBox = eventF.Cmds.Add.TextBox
			ViewportTextBox.convert(newBox)
			newBox.FocusLost:Connect(function(enter)
				if enter then
					event.commands[#event.commands+1] = {newBox.Text,defaultSettings(event),0}
					newBox.Text = """"

					refreshCommands()
					resizeList()
					if onEdited then onEdited() end
				end
			end)

			--eventF:GetPropertyChangedSignal(""AbsoluteSize""):Connect(resizeList)

			eventF.Parent = eventListHolder

			refreshCommands()
		end

		resizeList()
	end

	local function saveData()
		local result = {}
		for i,v in pairs(events) do
			result[i] = v.commands
		end
		return HttpService:JSONEncode(result)
	end

	local function loadData(str)
		local data = HttpService:JSONDecode(str)
		for i,v in pairs(data) do
			if events[i] then
				events[i].commands = v
			end
		end
	end

	local function addCmd(event,data)
		table.insert(events[event].commands,data)
	end

	local function setOnEdited(f)
		if type(f) == ""function"" then
			onEdited = f
		end
	end

	main.TopBar.Close.MouseButton1Click:Connect(function()
		main:TweenPosition(UDim2.new(0.5,-175,0,-500), ""InOut"", ""Quart"", 0.5, true, nil)
	end)
	dragGUI(main)
	main.Parent = PARENT

	return {
		RegisterEvent = registerEvent,
		FireEvent = fireEvent,
		Refresh = refreshList,
		SaveData = saveData,
		LoadData = loadData,
		AddCmd = addCmd,
		Frame = main,
		SetOnEdited = setOnEdited
	}
end)()

reference = (function()
	local main = create({
		{1,""Frame"",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,Name=""Main"",Position=UDim2.new(0.5,-250,0,-500),Size=UDim2.new(0,500,0,20),ZIndex=10,}},
		{2,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name=""TopBar"",Parent={1},Size=UDim2.new(1,0,0,20),ZIndex=10,}},
		{3,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""Title"",Parent={2},Size=UDim2.new(1,0,0.94999998807907,0),Text=""Reference"",TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}},
		{4,""TextButton"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""Close"",Parent={2},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,20),Text="""",TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}},
		{5,""ImageLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image=""rbxassetid://5054663650"",Parent={4},Position=UDim2.new(0,5,0,5),Size=UDim2.new(0,10,0,10),ZIndex=10,}},
		{6,""Frame"",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BorderSizePixel=0,Name=""Content"",Parent={1},Position=UDim2.new(0,0,0,20),Size=UDim2.new(1,0,0,300),ZIndex=10,}},
		{7,""ScrollingFrame"",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,BottomImage=""rbxasset://textures/ui/Scroll/scroll-middle.png"",CanvasSize=UDim2.new(0,0,0,1313),Name=""List"",Parent={6},ScrollBarImageColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),ScrollBarThickness=8,Size=UDim2.new(1,0,1,0),TopImage=""rbxasset://textures/ui/Scroll/scroll-middle.png"",VerticalScrollBarInset=2,ZIndex=10,}},
		{8,""UIListLayout"",{Parent={7},SortOrder=2,}},
		{9,""Frame"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name=""Section"",Parent={7},Size=UDim2.new(1,0,0,429),ZIndex=10,}},
		{10,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""Header"",Parent={9},Position=UDim2.new(0,8,0,5),Size=UDim2.new(1,-8,0,20),Text=""Special Player Cases"",TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},
		{11,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""Text"",Parent={9},Position=UDim2.new(0,8,0,25),Size=UDim2.new(1,-8,0,20),Text=""These keywords can be used to quickly select groups of players in commands:"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{12,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name=""Line"",Parent={9},Position=UDim2.new(0,10,1,-1),Size=UDim2.new(1,-20,0,1),ZIndex=10,}},
		{13,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name=""Cases"",Parent={9},Position=UDim2.new(0,8,0,55),Size=UDim2.new(1,-16,0,342),ZIndex=10,}},
		{14,""UIListLayout"",{Parent={13},SortOrder=2,}},
		{15,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,LayoutOrder=-4,Name=""Case"",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{16,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""CaseName"",Parent={15},Size=UDim2.new(1,0,1,0),Text=""all"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{17,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""CaseDesc"",Parent={15},Position=UDim2.new(0,15,0,0),Size=UDim2.new(1,0,1,0),Text=""- includes everyone"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{18,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,LayoutOrder=-3,Name=""Case"",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{19,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""CaseName"",Parent={18},Size=UDim2.new(1,0,1,0),Text=""others"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{20,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""CaseDesc"",Parent={18},Position=UDim2.new(0,37,0,0),Size=UDim2.new(1,0,1,0),Text=""- includes everyone except you"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{21,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,LayoutOrder=-2,Name=""Case"",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{22,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""CaseName"",Parent={21},Size=UDim2.new(1,0,1,0),Text=""me"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{23,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""CaseDesc"",Parent={21},Position=UDim2.new(0,19,0,0),Size=UDim2.new(1,0,1,0),Text=""- includes your player only"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{24,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name=""Case"",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{25,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""CaseName"",Parent={24},Size=UDim2.new(1,0,1,0),Text=""#[number]"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{26,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""CaseDesc"",Parent={24},Position=UDim2.new(0,59,0,0),Size=UDim2.new(1,0,1,0),Text=""- gets a specified amount of random players"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{27,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name=""Case"",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{28,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""CaseName"",Parent={27},Size=UDim2.new(1,0,1,0),Text=""random"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{29,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""CaseDesc"",Parent={27},Position=UDim2.new(0,44,0,0),Size=UDim2.new(1,0,1,0),Text=""- affects a random player"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{30,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name=""Case"",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{31,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""CaseName"",Parent={30},Size=UDim2.new(1,0,1,0),Text=""%[team name]"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{32,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""CaseDesc"",Parent={30},Position=UDim2.new(0,78,0,0),Size=UDim2.new(1,0,1,0),Text=""- includes everyone on a given team"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{33,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name=""Case"",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{34,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""CaseName"",Parent={33},Size=UDim2.new(1,0,1,0),Text=""allies / team"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{35,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""CaseDesc"",Parent={33},Position=UDim2.new(0,63,0,0),Size=UDim2.new(1,0,1,0),Text=""- players who are on your team"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{36,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name=""Case"",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{37,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""CaseName"",Parent={36},Size=UDim2.new(1,0,1,0),Text=""enemies / nonteam"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{38,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""CaseDesc"",Parent={36},Position=UDim2.new(0,101,0,0),Size=UDim2.new(1,0,1,0),Text=""- players who are not on your team"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{39,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name=""Case"",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{40,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""CaseName"",Parent={39},Size=UDim2.new(1,0,1,0),Text=""friends"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{41,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""CaseDesc"",Parent={39},Position=UDim2.new(0,40,0,0),Size=UDim2.new(1,0,1,0),Text=""- anyone who is friends with you"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{42,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name=""Case"",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{43,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""CaseName"",Parent={42},Size=UDim2.new(1,0,1,0),Text=""nonfriends"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{44,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""CaseDesc"",Parent={42},Position=UDim2.new(0,61,0,0),Size=UDim2.new(1,0,1,0),Text=""- anyone who is not friends with you"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{45,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name=""Case"",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{46,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""CaseName"",Parent={45},Size=UDim2.new(1,0,1,0),Text=""guests"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{47,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""CaseDesc"",Parent={45},Position=UDim2.new(0,36,0,0),Size=UDim2.new(1,0,1,0),Text=""- guest players (obsolete)"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{48,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name=""Case"",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{49,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""CaseName"",Parent={48},Size=UDim2.new(1,0,1,0),Text=""bacons"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{50,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""CaseDesc"",Parent={48},Position=UDim2.new(0,40,0,0),Size=UDim2.new(1,0,1,0),Text=""- anyone with the \""bacon\"" or pal hair"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{51,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name=""Case"",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{52,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""CaseName"",Parent={51},Size=UDim2.new(1,0,1,0),Text=""age[number]"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{53,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""CaseDesc"",Parent={51},Position=UDim2.new(0,71,0,0),Size=UDim2.new(1,0,1,0),Text=""- includes anyone below or at the given age"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{54,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name=""Case"",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{55,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""CaseName"",Parent={54},Size=UDim2.new(1,0,1,0),Text=""rad[number]"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{56,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""CaseDesc"",Parent={54},Position=UDim2.new(0,70,0,0),Size=UDim2.new(1,0,1,0),Text=""- includes anyone within the given radius"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{57,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name=""Case"",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{58,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""CaseName"",Parent={57},Size=UDim2.new(1,0,1,0),Text=""nearest"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{59,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""CaseDesc"",Parent={57},Position=UDim2.new(0,43,0,0),Size=UDim2.new(1,0,1,0),Text=""- gets the closest player to you"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{60,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name=""Case"",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{61,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""CaseName"",Parent={60},Size=UDim2.new(1,0,1,0),Text=""farthest"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{62,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""CaseDesc"",Parent={60},Position=UDim2.new(0,46,0,0),Size=UDim2.new(1,0,1,0),Text=""- gets the farthest player from you"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{63,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name=""Case"",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{64,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""CaseName"",Parent={63},Size=UDim2.new(1,0,1,0),Text=""group[ID]"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{65,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""CaseDesc"",Parent={63},Position=UDim2.new(0,55,0,0),Size=UDim2.new(1,0,1,0),Text=""- gets players who are in a certain group"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{66,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name=""Case"",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{67,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""CaseName"",Parent={66},Size=UDim2.new(1,0,1,0),Text=""alive"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{68,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""CaseDesc"",Parent={66},Position=UDim2.new(0,27,0,0),Size=UDim2.new(1,0,1,0),Text=""- gets players who are alive"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{69,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name=""Case"",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{70,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""CaseName"",Parent={69},Size=UDim2.new(1,0,1,0),Text=""dead"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{71,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""CaseDesc"",Parent={69},Position=UDim2.new(0,29,0,0),Size=UDim2.new(1,0,1,0),Text=""- gets players who are dead"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{72,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,LayoutOrder=-1,Name=""Case"",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{73,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""CaseName"",Parent={72},Size=UDim2.new(1,0,1,0),Text=""@username"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{74,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""CaseDesc"",Parent={72},Position=UDim2.new(0,66,0,0),Size=UDim2.new(1,0,1,0),Text=""- searches for players by username only (ignores displaynames)"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{75,""Frame"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name=""Section"",Parent={7},Size=UDim2.new(1,0,0,180),ZIndex=10,}},
		{76,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""Header"",Parent={75},Position=UDim2.new(0,8,0,5),Size=UDim2.new(1,-8,0,20),Text=""Various Operators"",TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},
		{77,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name=""Line"",Parent={75},Position=UDim2.new(0,10,1,-1),Size=UDim2.new(1,-20,0,1),ZIndex=10,}},
		{78,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""Text"",Parent={75},Position=UDim2.new(0,8,0,30),Size=UDim2.new(1,-8,0,16),Text=""Use commas to separate multiple expressions:"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
		{79,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""Text"",Parent={75},Position=UDim2.new(0,8,0,75),Size=UDim2.new(1,-8,0,16),Text=""Use - to exclude, and + to include players in your expression:"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
		{80,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""Text"",Parent={75},Position=UDim2.new(0,8,0,91),Size=UDim2.new(1,-8,0,16),Text="";locate %blue-friends (gets players in blue team who aren't your friends)"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
		{81,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""Text"",Parent={75},Position=UDim2.new(0,8,0,46),Size=UDim2.new(1,-8,0,16),Text="";locate noob,noob2,bob"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
		{82,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""Text"",Parent={75},Position=UDim2.new(0,8,0,120),Size=UDim2.new(1,-8,0,16),Text=""Put ! before a command to run it with the last arguments it was ran with:"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
		{83,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""Text"",Parent={75},Position=UDim2.new(0,8,0,136),Size=UDim2.new(1,-8,0,32),Text=""After running ;offset 0 100 0,  you can run !offset anytime to repeat that command with the same arguments that were used to run it last time"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
		{84,""Frame"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name=""Section"",Parent={7},Size=UDim2.new(1,0,0,154),ZIndex=10,}},
		{85,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""Header"",Parent={84},Position=UDim2.new(0,8,0,5),Size=UDim2.new(1,-8,0,20),Text=""Command Looping"",TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},
		{86,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""Text"",Parent={84},Position=UDim2.new(0,8,0,30),Size=UDim2.new(1,-8,0,20),Text=""Form: [How many times it loops]^[delay (optional)]^[command]"",TextColor3=Color3.new(1,1,1),TextSize=15,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{87,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name=""Line"",Parent={84},Position=UDim2.new(0,10,1,-1),Size=UDim2.new(1,-20,0,1),ZIndex=10,}},
		{88,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""Text"",Parent={84},Position=UDim2.new(0,8,0,50),Size=UDim2.new(1,-8,0,20),Text=""Use the 'breakloops' command to stop all running loops."",TextColor3=Color3.new(1,1,1),TextSize=15,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{89,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""Text"",Parent={84},Position=UDim2.new(0,8,0,80),Size=UDim2.new(1,-8,0,16),Text=""Examples:"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
		{90,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""Text"",Parent={84},Position=UDim2.new(0,8,0,98),Size=UDim2.new(1,-8,0,42),Text="";5^btools - gives you 5 sets of btools\n;10^3^drophats - drops your hats every 3 seconds 10 times\n;inf^0.1^animspeed 100 - infinitely loops your animation speed to 100"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
		{91,""Frame"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name=""Section"",Parent={7},Size=UDim2.new(1,0,0,120),ZIndex=10,}},
		{92,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""Header"",Parent={91},Position=UDim2.new(0,8,0,5),Size=UDim2.new(1,-8,0,20),Text=""Execute Multiple Commands at Once"",TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},
		{93,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""Text"",Parent={91},Position=UDim2.new(0,8,0,30),Size=UDim2.new(1,-8,0,20),Text=""You can execute multiple commands at once using \""\\\"""",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{94,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name=""Line"",Parent={91},Position=UDim2.new(0,10,1,-1),Size=UDim2.new(1,-20,0,1),ZIndex=10,}},
		{95,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""Text"",Parent={91},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,-8,0,16),Text=""Examples:"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
		{96,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""Text"",Parent={91},Position=UDim2.new(0,8,0,78),Size=UDim2.new(1,-8,0,32),Text="";drophats\\respawn - drops your hats and respawns you\n;enable inventory\\enable playerlist\\refresh - enables those coregui items and refreshes you"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
		{97,""Frame"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name=""Section"",Parent={7},Size=UDim2.new(1,0,0,75),ZIndex=10,}},
		{98,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""Header"",Parent={97},Position=UDim2.new(0,8,0,5),Size=UDim2.new(1,-8,0,20),Text=""Browse Command History"",TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},
		{99,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""Text"",Parent={97},Position=UDim2.new(0,8,0,30),Size=UDim2.new(1,-8,0,32),Text=""While focused on the command bar, you can use the up and down arrow keys to browse recently used commands"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{100,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name=""Line"",Parent={97},Position=UDim2.new(0,10,1,-1),Size=UDim2.new(1,-20,0,1),ZIndex=10,}},
		{101,""Frame"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name=""Section"",Parent={7},Size=UDim2.new(1,0,0,75),ZIndex=10,}},
		{102,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""Header"",Parent={101},Position=UDim2.new(0,8,0,5),Size=UDim2.new(1,-8,0,20),Text=""Autocomplete in the Command Bar"",TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},
		{103,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""Text"",Parent={101},Position=UDim2.new(0,8,0,30),Size=UDim2.new(1,-8,0,32),Text=""While focused on the command bar, you can use the tab key to insert the top suggested command into the command bar."",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{104,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name=""Line"",Parent={101},Position=UDim2.new(0,10,1,-1),Size=UDim2.new(1,-20,0,1),ZIndex=10,}},
		{105,""Frame"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name=""Section"",Parent={7},Size=UDim2.new(1,0,0,175),ZIndex=10,}},
		{106,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""Header"",Parent={105},Position=UDim2.new(0,8,0,5),Size=UDim2.new(1,-8,0,20),Text=""Using Event Binds"",TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},
		{107,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""Text"",Parent={105},Position=UDim2.new(0,8,0,30),Size=UDim2.new(1,-8,0,32),Text=""Use event binds to set up commands that get executed when certain events happen. You can edit the conditions for an event command to run (such as which player triggers it)."",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{108,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name=""Line"",Parent={105},Position=UDim2.new(0,10,1,-1),Size=UDim2.new(1,-20,0,1),ZIndex=10,}},
		{109,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""Text"",Parent={105},Position=UDim2.new(0,8,0,70),Size=UDim2.new(1,-8,0,48),Text=""Some events may send arguments; you can use them in your event command by using $ followed by the argument number ($1, $2, etc). You can find out the order and types of these arguments by looking at the settings of the event command."",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{110,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""Text"",Parent={105},Position=UDim2.new(0,8,0,130),Size=UDim2.new(1,-8,0,16),Text=""Example:"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
		{111,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""Text"",Parent={105},Position=UDim2.new(0,8,0,148),Size=UDim2.new(1,-8,0,16),Text=""Setting up 'goto $1' on the OnChatted event will teleport you to any player that chats."",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
		{112,""Frame"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name=""Section"",Parent={7},Size=UDim2.new(1,0,0,105),ZIndex=10,}},
		{113,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name=""Header"",Parent={112},Position=UDim2.new(0,8,0,5),Size=UDim2.new(1,-8,0,20),Text=""Get Further Help"",TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},
		{114,""TextLabel"",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name=""Text"",Parent={112},Position=UDim2.new(0,8,0,30),Size=UDim2.new(1,-8,0,32),Text=""You can join the Discord server to get support with IY,  and read up on more documentation such as the Plugin API."",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{115,""Frame"",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name=""Line"",Parent={112},Position=UDim2.new(0,10,1,-1),Size=UDim2.new(1,-20,0,1),Visible=false,ZIndex=10,}},
		{116,""TextButton"",{BackgroundColor3=Color3.new(0.48627451062202,0.61960786581039,0.85098040103912),BorderColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),Font=4,Name=""InviteButton"",Parent={112},Position=UDim2.new(0,5,0,75),Size=UDim2.new(1,-10,0,25),Text=""Copy Discord Invite Link (https://discord.gg/78ZuWSq)"",TextColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),TextSize=16,ZIndex=10,}},
	})
	for i,v in pairs(main.Content.List:GetDescendants()) do
		if v:IsA(""TextLabel"") then
			table.insert(text1,v)
		end
	end
	table.insert(scroll,main.Content.List)
	table.insert(shade1,main.Content)
	table.insert(shade2,main.TopBar)
	main.Name = randomString()
	main.TopBar.Close.MouseButton1Click:Connect(function()
		main:TweenPosition(UDim2.new(0.5,-250,0,-500), ""InOut"", ""Quart"", 0.5, true, nil)
	end)
	local inviteButton = main:FindFirstChild(""InviteButton"",true)
	local lastPress = nil
	inviteButton.MouseButton1Click:Connect(function()
		if everyClipboard then
			toClipboard(""https://discord.gg/78ZuWSq"")
			inviteButton.Text = ""Copied""
		else
			inviteButton.Text = ""No Clipboard Function, type out the link""
		end
		local pressTime = tick()
		lastPress = pressTime
		wait(2)
		if lastPress ~= pressTime then return end
		inviteButton.Text = ""Copy Discord Invite Link (https://discord.gg/78ZuWSq)""
	end)
	dragGUI(main)
	main.Parent = PARENT

	ReferenceButton.MouseButton1Click:Connect(function()
		main:TweenPosition(UDim2.new(0.5,-250,0.5,-150), ""InOut"", ""Quart"", 0.5, true, nil)
	end)
end)()

currentShade1 = Color3.fromRGB(0, 65, 195)
currentShade2 = Color3.fromRGB(0, 85, 255)
currentShade3 = Color3.fromRGB(0, 100, 255)
currentText1 = Color3.new(1, 1, 1)
currentText2 = Color3.new(0, 0, 0)
currentScroll = Color3.fromRGB(78,78,79)

defaultsettings = {
	prefix = ';';
	StayOpen = false;
	espTransparency = 0.3;
	keepIY = true;
	logsEnabled = false;
	jLogsEnabled = false;
	aliases = {};
	binds = {};
	WayPoints = {};
	PluginsTable = {};
	currentShade1 = {currentShade1.R,currentShade1.G,currentShade1.B};
	currentShade2 = {currentShade2.R,currentShade2.G,currentShade2.B};
	currentShade3 = {currentShade3.R,currentShade3.G,currentShade3.B};
	currentText1 = {currentText1.R,currentText1.G,currentText1.B};
	currentText2 = {currentText2.R,currentText2.G,currentText2.B};
	currentScroll = {currentScroll.R,currentScroll.G,currentScroll.B};
	eventBinds = eventEditor.SaveData()
}

defaults = HttpService:JSONEncode(defaultsettings)
nosaves = false
useFactorySettings = function()
    prefix = ';'
    StayOpen = false
    KeepInfYield = true
    espTransparency = 0.3
    logsEnabled = false
    jLogsEnabled = false
    aliases = {}
    binds = {}
    WayPoints = {}
    PluginsTable = {}
end

createPopup = function(text)
    local FileError = Instance.new(""Frame"")
    local background = Instance.new(""Frame"")
    local Directions = Instance.new(""TextLabel"")
    local shadow = Instance.new(""Frame"")
    local PopupText = Instance.new(""TextLabel"")
    local Exit = Instance.new(""TextButton"")
    local ExitImage = Instance.new(""ImageLabel"")

    FileError.Name = randomString()
    FileError.Parent = PARENT
    FileError.Active = true
    FileError.BackgroundTransparency = 1
    FileError.Position = UDim2.new(0.5, -180, 0, 290)
    FileError.Size = UDim2.new(0, 360, 0, 20)
    FileError.ZIndex = 10

    background.Name = ""background""
    background.Parent = FileError
    background.Active = true
    background.BackgroundColor3 = Color3.fromRGB(0, 65, 195)
    background.BorderSizePixel = 0
    background.Position = UDim2.new(0, 0, 0, 20)
    background.Size = UDim2.new(0, 360, 0, 205)
    background.ZIndex = 10

    Directions.Name = ""Directions""
    Directions.Parent = background
    Directions.BackgroundTransparency = 1
    Directions.BorderSizePixel = 0
    Directions.Position = UDim2.new(0, 10, 0, 10)
    Directions.Size = UDim2.new(0, 340, 0, 185)
    Directions.Font = Enum.Font.SourceSans
    Directions.TextSize = 14
    Directions.Text = text
    Directions.TextColor3 = Color3.new(1, 1, 1)
    Directions.TextWrapped = true
    Directions.TextXAlignment = Enum.TextXAlignment.Left
    Directions.TextYAlignment = Enum.TextYAlignment.Top
    Directions.ZIndex = 10

    shadow.Name = ""shadow""
    shadow.Parent = FileError
    shadow.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
    shadow.BorderSizePixel = 0
    shadow.Size = UDim2.new(0, 360, 0, 20)
    shadow.ZIndex = 10

    PopupText.Name = ""PopupText""
    PopupText.Parent = shadow
    PopupText.BackgroundTransparency = 1
    PopupText.Size = UDim2.new(1, 0, 0.95, 0)
    PopupText.ZIndex = 10
    PopupText.Font = Enum.Font.SourceSans
    PopupText.TextSize = 14
    PopupText.Text = ""File Error""
    PopupText.TextColor3 = Color3.new(1, 1, 1)
    PopupText.TextWrapped = true

    Exit.Name = ""Exit""
    Exit.Parent = shadow
    Exit.BackgroundTransparency = 1
    Exit.Position = UDim2.new(1, -20, 0, 0)
    Exit.Size = UDim2.new(0, 20, 0, 20)
    Exit.Text = """"
    Exit.ZIndex = 10

    ExitImage.Parent = Exit
    ExitImage.BackgroundColor3 = Color3.new(1, 1, 1)
    ExitImage.BackgroundTransparency = 1
    ExitImage.Position = UDim2.new(0, 5, 0, 5)
    ExitImage.Size = UDim2.new(0, 10, 0, 10)
    ExitImage.Image = ""rbxassetid://5054663650""
    ExitImage.ZIndex = 10

    Exit.MouseButton1Click:Connect(function()
        FileError:Destroy()
    end)
end

local loadedEventData = nil
local jsonAttempts = 0
function saves()
    if writefileExploit() and readfileExploit() and jsonAttempts < 10 then
        local readSuccess, out = readfile(""IY_FE.iy"", true)
        if readSuccess then
            if out ~= nil and tostring(out):gsub(""%s"", """") ~= """" then
                local success, response = pcall(function()
                    local json = HttpService:JSONDecode(out)
                    if json.prefix ~= nil then prefix = json.prefix else prefix = ';' end
                    if json.StayOpen ~= nil then StayOpen = json.StayOpen else StayOpen = false end
                    if json.keepIY ~= nil then KeepInfYield = json.keepIY else KeepInfYield = true end
                    if json.espTransparency ~= nil then espTransparency = json.espTransparency else espTransparency = 0.3 end
                    if json.logsEnabled ~= nil then logsEnabled = json.logsEnabled else logsEnabled = false end
                    if json.jLogsEnabled ~= nil then jLogsEnabled = json.jLogsEnabled else jLogsEnabled = false end
                    if json.aliases ~= nil then aliases = json.aliases else aliases = {} end
                    if json.binds ~= nil then binds = (json.binds or {}) else binds = {} end
                    if json.spawnCmds ~= nil then spawnCmds = json.spawnCmds end
                    if json.WayPoints ~= nil then AllWaypoints = json.WayPoints else WayPoints = {} AllWaypoints = {} end
                    if json.PluginsTable ~= nil then PluginsTable = json.PluginsTable else PluginsTable = {} end
                    if json.currentShade1 ~= nil then currentShade1 = Color3.new(json.currentShade1[1],json.currentShade1[2],json.currentShade1[3]) end
                    if json.currentShade2 ~= nil then currentShade2 = Color3.new(json.currentShade2[1],json.currentShade2[2],json.currentShade2[3]) end
                    if json.currentShade3 ~= nil then currentShade3 = Color3.new(json.currentShade3[1],json.currentShade3[2],json.currentShade3[3]) end
                    if json.currentText1 ~= nil then currentText1 = Color3.new(json.currentText1[1],json.currentText1[2],json.currentText1[3]) end
                    if json.currentText2 ~= nil then currentText2 = Color3.new(json.currentText2[1],json.currentText2[2],json.currentText2[3]) end
                    if json.currentScroll ~= nil then currentScroll = Color3.new(json.currentScroll[1],json.currentScroll[2],json.currentScroll[3]) end
                    if json.eventBinds ~= nil then loadedEventData = json.eventBinds end
                end)
                if not success then
                    jsonAttempts = jsonAttempts + 1
                    warn(""Save Json Error:"", response)
                    warn(""Overwriting Save File"")
                    writefile(""IY_FE.iy"", defaults, true)
                    wait()
                    saves()
                end
            else
                writefile(""IY_FE.iy"", defaults, true)
                wait()
                local dReadSuccess, dOut = readfile(""IY_FE.iy"", true)
                if dReadSuccess and dOut ~= nil and tostring(dOut):gsub(""%s"", """") ~= """" then
                    saves()
                else
                    nosaves = true
                    useFactorySettings()
                    createPopup(""There was a problem writing a save file to your PC.\n\nPlease contact the developer/support team for your exploit and tell them writefile/readfile is not working.\n\nYour settings, keybinds, waypoints, and aliases will not save if you continue.\n\nThings to try:\n> Make sure a 'workspace' folder is located in the same folder as your exploit\n> If your exploit is inside of a zip/rar file, extract it.\n> Rejoin the game and try again or restart your PC and try again."")
                end
            end
        else
            writefile(""IY_FE.iy"", defaults, true)
            wait()
            local dReadSuccess, dOut = readfile(""IY_FE.iy"", true)
            if dReadSuccess and dOut ~= nil and tostring(dOut):gsub(""%s"", """") ~= """" then
                saves()
            else
                nosaves = true
                useFactorySettings()
                createPopup(""There was a problem writing a save file to your PC.\n\nPlease contact the developer/support team for your exploit and tell them writefile/readfile is not working.\n\nYour settings, keybinds, waypoints, and aliases will not save if you continue.\n\nThings to try:\n> Make sure a 'workspace' folder is located in the same folder as your exploit\n> If your exploit is inside of a zip/rar file, extract it.\n> Rejoin the game and try again or restart your PC and try again."")
            end
        end
    else
        if jsonAttempts >= 10 then
            nosaves = true
            useFactorySettings()
            createPopup(""Sorry, we have attempted to parse your save file, but it is unreadable!\n\nElmas is now using factory settings until your exploit's file system works.\n\nYour save file has not been deleted."")
        else
            nosaves = true
            useFactorySettings()
        end
    end
end

saves()

function updatesaves()
	if nosaves == false and writefileExploit() then
		local update = {
			prefix = prefix;
			StayOpen = StayOpen;
			keepIY = KeepInfYield;
			espTransparency = espTransparency;
			logsEnabled = logsEnabled;
			jLogsEnabled = jLogsEnabled;
			aliases = aliases;
			binds = binds or {};
			WayPoints = AllWaypoints;
			PluginsTable = PluginsTable;
			currentShade1 = {currentShade1.R,currentShade1.G,currentShade1.B};
			currentShade2 = {currentShade2.R,currentShade2.G,currentShade2.B};
			currentShade3 = {currentShade3.R,currentShade3.G,currentShade3.B};
			currentText1 = {currentText1.R,currentText1.G,currentText1.B};
			currentText2 = {currentText2.R,currentText2.G,currentText2.B};
			currentScroll = {currentScroll.R,currentScroll.G,currentScroll.B};
			eventBinds = eventEditor.SaveData()
		}
		writefileCooldown(""IY_FE.iy"", HttpService:JSONEncode(update))
	end
end

eventEditor.SetOnEdited(updatesaves)

pWayPoints = {}
WayPoints = {}

if #AllWaypoints > 0 then
	for i = 1, #AllWaypoints do
		if not AllWaypoints[i].GAME or AllWaypoints[i].GAME == PlaceId then
			WayPoints[#WayPoints + 1] = {NAME = AllWaypoints[i].NAME, COORD = {AllWaypoints[i].COORD[1], AllWaypoints[i].COORD[2], AllWaypoints[i].COORD[3]}, GAME = AllWaypoints[i].GAME}
		end
	end
end

if type(binds) ~= ""table"" then binds = {} end

function Time()
	local HOUR = math.floor((tick() % 86400) / 3600)
	local MINUTE = math.floor((tick() % 3600) / 60)
	local SECOND = math.floor(tick() % 60)
	local AP = HOUR > 11 and 'PM' or 'AM'
	HOUR = (HOUR % 12 == 0 and 12 or HOUR % 12)
	HOUR = HOUR < 10 and '0' .. HOUR or HOUR
	MINUTE = MINUTE < 10 and '0' .. MINUTE or MINUTE
	SECOND = SECOND < 10 and '0' .. SECOND or SECOND
	return HOUR .. ':' .. MINUTE .. ':' .. SECOND .. ' ' .. AP
end

PrefixBox.Text = prefix
local SettingsOpen = false
local isHidden = false

if StayOpen == false then
	On.BackgroundTransparency = 1
else
	On.BackgroundTransparency = 0
end

if logsEnabled then
	Toggle.Text = 'Enabled'
else
	Toggle.Text = 'Disabled'
end

if jLogsEnabled then
	Toggle_2.Text = 'Enabled'
else
	Toggle_2.Text = 'Disabled'
end

function maximizeHolder()
	if StayOpen == false then
		Holder:TweenPosition(UDim2.new(1, Holder.Position.X.Offset, 1, -220), ""InOut"", ""Quart"", 0.2, true, nil)
	end
end

local minimizeNum = -20
function minimizeHolder()
	if StayOpen == false then
		Holder:TweenPosition(UDim2.new(1, Holder.Position.X.Offset, 1, minimizeNum), ""InOut"", ""Quart"", 0.5, true, nil)
	end
end

function cmdbarHolder()
	if StayOpen == false then
		Holder:TweenPosition(UDim2.new(1, Holder.Position.X.Offset, 1, -45), ""InOut"", ""Quart"", 0.5, true, nil)
	end
end

pinNotification = nil
local notifyCount = 0
function notify(text,text2,length)
	task.spawn(function()
		local LnotifyCount = notifyCount+1
		local notificationPinned = false
		notifyCount = notifyCount+1
		if pinNotification then pinNotification:Disconnect() end
		pinNotification = PinButton.MouseButton1Click:Connect(function()
			task.spawn(function()
				pinNotification:Disconnect()
				notificationPinned = true
				Title_2.BackgroundTransparency = 1
				wait(0.5)
				Title_2.BackgroundTransparency = 0
			end)
		end)
		Notification:TweenPosition(UDim2.new(1, Notification.Position.X.Offset, 1, 0), ""InOut"", ""Quart"", 0.5, true, nil)
		wait(0.6)
		local closepressed = false
		if text2 then
			Title_2.Text = text
			Text_2.Text = text2
		else
			Title_2.Text = 'Notification'
			Text_2.Text = text
		end
		Notification:TweenPosition(UDim2.new(1, Notification.Position.X.Offset, 1, -100), ""InOut"", ""Quart"", 0.5, true, nil)
		CloseButton.MouseButton1Click:Connect(function()
			Notification:TweenPosition(UDim2.new(1, Notification.Position.X.Offset, 1, 0), ""InOut"", ""Quart"", 0.5, true, nil)
			closepressed = true
			pinNotification:Disconnect()
		end)
		if length and isNumber(length) then
			wait(length)
		else
			wait(10)
		end
		if LnotifyCount == notifyCount then
			if closepressed == false and notificationPinned == false then
				pinNotification:Disconnect()
				Notification:TweenPosition(UDim2.new(1, Notification.Position.X.Offset, 1, 0), ""InOut"", ""Quart"", 0.5, true, nil)
			end
			notifyCount = 0
		end
	end)
end

local lastMessage = nil
local lastLabel = nil
local dupeCount = 1
function CreateLabel(Name, Text)
	if lastMessage == Name..Text then
		dupeCount = dupeCount+1
		lastLabel.Text = Time()..' - ['..Name..']: '..Text..' (x'..dupeCount..')'
	else
		if dupeCount > 1 then dupeCount = 1 end
		if #scroll_2:GetChildren() >= 2546 then
			scroll_2:ClearAllChildren()
		end
		local alls = 0
		for i,v in pairs(scroll_2:GetChildren()) do
			if v then
				alls = v.Size.Y.Offset + alls
			end
			if not v then
				alls = 0
			end
		end
		local tl = Instance.new('TextLabel')
		lastMessage = Name..Text
		lastLabel = tl
		tl.Name = Name
		tl.Parent = scroll_2
		tl.ZIndex = 10
		tl.Text = Time().."" - [""..Name..""]: ""..Text
		tl.Size = UDim2.new(0,322,0,84)
		tl.BackgroundTransparency = 1
		tl.BorderSizePixel = 0
		tl.Font = ""SourceSans""
		tl.Position = UDim2.new(-1,0,0,alls)
		tl.TextTransparency = 1
		tl.TextScaled = false
		tl.TextSize = 14
		tl.TextWrapped = true
		tl.TextXAlignment = ""Left""
		tl.TextYAlignment = ""Top""
		tl.TextColor3 = currentText1
		tl.Size = UDim2.new(0,322,0,tl.TextBounds.Y)
		table.insert(text1,tl)
		scroll_2.CanvasSize = UDim2.new(0,0,0,alls+tl.TextBounds.Y)
		scroll_2.CanvasPosition = Vector2.new(0,scroll_2.CanvasPosition.Y+tl.TextBounds.Y)
		tl:TweenPosition(UDim2.new(0,3,0,alls), 'In', 'Quint', 0.5)
		TweenService:Create(tl, TweenInfo.new(1.25, Enum.EasingStyle.Linear), { TextTransparency = 0 }):Play()
	end
end

function CreateJoinLabel(plr,ID)
	if #scroll_3:GetChildren() >= 2546 then
		scroll_3:ClearAllChildren()
	end
	local infoFrame = Instance.new(""Frame"")
	local info1 = Instance.new(""TextLabel"")
	local info2 = Instance.new(""TextLabel"")
	local ImageLabel_3 = Instance.new(""ImageLabel"")
	infoFrame.Name = randomString()
	infoFrame.Parent = scroll_3
	infoFrame.BackgroundColor3 = Color3.new(1, 1, 1)
	infoFrame.BackgroundTransparency = 1
	infoFrame.BorderColor3 = Color3.new(0.105882, 0.164706, 0.207843)
	infoFrame.Size = UDim2.new(1, 0, 0, 50)
	info1.Name = randomString()
	info1.Parent = infoFrame
	info1.BackgroundTransparency = 1
	info1.BorderSizePixel = 0
	info1.Position = UDim2.new(0, 45, 0, 0)
	info1.Size = UDim2.new(0, 135, 1, 0)
	info1.ZIndex = 10
	info1.Font = Enum.Font.SourceSans
	info1.FontSize = Enum.FontSize.Size14
	info1.Text = ""Username: ""..plr.Name..""\nJoined Server: ""..Time()
	info1.TextColor3 = Color3.new(1, 1, 1)
	info1.TextWrapped = true
	info1.TextXAlignment = Enum.TextXAlignment.Left
	info2.Name = randomString()
	info2.Parent = infoFrame
	info2.BackgroundTransparency = 1
	info2.BorderSizePixel = 0
	info2.Position = UDim2.new(0, 185, 0, 0)
	info2.Size = UDim2.new(0, 140, 1, -5)
	info2.ZIndex = 10
	info2.Font = Enum.Font.SourceSans
	info2.FontSize = Enum.FontSize.Size14
	info2.Text = ""User ID: ""..ID..""\nAccount Age: ""..plr.AccountAge..""\nJoined Roblox: Loading...""
	info2.TextColor3 = Color3.new(1, 1, 1)
	info2.TextWrapped = true
	info2.TextXAlignment = Enum.TextXAlignment.Left
	info2.TextYAlignment = Enum.TextYAlignment.Center
	ImageLabel_3.Parent = infoFrame
	ImageLabel_3.BackgroundTransparency = 1
	ImageLabel_3.BorderSizePixel = 0
	ImageLabel_3.Size = UDim2.new(0, 45, 1, 0)
	ImageLabel_3.Image = Players:GetUserThumbnailAsync(ID, Enum.ThumbnailType.AvatarThumbnail, Enum.ThumbnailSize.Size420x420)
	scroll_3.CanvasSize = UDim2.new(0, 0, 0, listlayout.AbsoluteContentSize.Y)
	scroll_3.CanvasPosition = Vector2.new(0,scroll_2.CanvasPosition.Y+infoFrame.AbsoluteSize.Y)
	wait()
	local user = game:HttpGet(""https://users.roblox.com/v1/users/""..ID)
	local json = HttpService:JSONDecode(user)
	local date = json[""created""]:sub(1,10)
	local splitDates = string.split(date,""-"")
	info2.Text = string.gsub(info2.Text, ""Loading..."",splitDates[2]..""/""..splitDates[3]..""/""..splitDates[1])
end

IYMouse.KeyDown:Connect(function(Key)
	if (Key==prefix) then
		Cmdbar:CaptureFocus()
		spawn(function()
			repeat Cmdbar.Text = '' until Cmdbar.Text == ''
		end)
		maximizeHolder()
	end
end)

local lastMinimizeReq = 0
Holder.MouseEnter:Connect(function()
	lastMinimizeReq = 0
	maximizeHolder()
end)

Holder.MouseLeave:Connect(function()
	if not Cmdbar:IsFocused() then
		local reqTime = tick()
		lastMinimizeReq = reqTime
		wait(1)
		if lastMinimizeReq ~= reqTime then return end
		if not Cmdbar:IsFocused() then
			minimizeHolder()
		end
	end
end)

function updateColors(color,ctype)
	if ctype == shade1 then
		for i,v in pairs(shade1) do
			v.BackgroundColor3 = color
		end
		currentShade1 = color
	elseif ctype == shade2 then
		for i,v in pairs(shade2) do
			v.BackgroundColor3 = color
		end
		currentShade2 = color
	elseif ctype == shade3 then
		for i,v in pairs(shade3) do
			v.BackgroundColor3 = color
		end
		currentShade3 = color
	elseif ctype == text1 then
		for i,v in pairs(text1) do
			v.TextColor3 = color
			if v:IsA(""TextBox"") then
				v.PlaceholderColor3 = color	
			end
		end
		currentText1 = color
	elseif ctype == text2 then
		for i,v in pairs(text2) do
			v.TextColor3 = color
		end
		currentText2 = color
	elseif ctype == scroll then
		for i,v in pairs(scroll) do
			v.ScrollBarImageColor3 = color
		end
		currentScroll = color
	end
end

local colorpickerOpen = false
ColorsButton.MouseButton1Click:Connect(function()
	cache_currentShade1 = currentShade1
	cache_currentShade2 = currentShade2
	cache_currentShade3 = currentShade3
	cache_currentText1 = currentText1
	cache_currentText2 = currentText2
	cache_currentScroll = currentScroll
	if not colorpickerOpen then
		colorpickerOpen = true
		picker = game:GetObjects(""rbxassetid://4908465318"")[1]
		picker.Name = randomString()
		picker.Parent = PARENT

		local ColorPicker do
			ColorPicker = {}

			ColorPicker.new = function()
				local newMt = setmetatable({},{})

				local pickerGui = picker.ColorPicker
				local pickerTopBar = pickerGui.TopBar
				local pickerExit = pickerTopBar.Exit
				local pickerFrame = pickerGui.Content
				local colorSpace = pickerFrame.ColorSpaceFrame.ColorSpace
				local colorStrip = pickerFrame.ColorStrip
				local previewFrame = pickerFrame.Preview
				local basicColorsFrame = pickerFrame.BasicColors
				local customColorsFrame = pickerFrame.CustomColors
				local defaultButton = pickerFrame.Default
				local cancelButton = pickerFrame.Cancel
				local shade1Button = pickerFrame.Shade1
				local shade2Button = pickerFrame.Shade2
				local shade3Button = pickerFrame.Shade3
				local text1Button = pickerFrame.Text1
				local text2Button = pickerFrame.Text2
				local scrollButton = pickerFrame.Scroll

				local colorScope = colorSpace.Scope
				local colorArrow = pickerFrame.ArrowFrame.Arrow

				local hueInput = pickerFrame.Hue.Input
				local satInput = pickerFrame.Sat.Input
				local valInput = pickerFrame.Val.Input

				local redInput = pickerFrame.Red.Input
				local greenInput = pickerFrame.Green.Input
				local blueInput = pickerFrame.Blue.Input

				local mouse = IYMouse

				local hue,sat,val = 0,0,1
				local red,green,blue = 1,1,1
				local chosenColor = Color3.new(0,0,0)

				local basicColors = {Color3.new(0,0,0),Color3.new(0.66666668653488,0,0),Color3.new(0,0.33333334326744,0),Color3.new(0.66666668653488,0.33333334326744,0),Color3.new(0,0.66666668653488,0),Color3.new(0.66666668653488,0.66666668653488,0),Color3.new(0,1,0),Color3.new(0.66666668653488,1,0),Color3.new(0,0,0.49803924560547),Color3.new(0.66666668653488,0,0.49803924560547),Color3.new(0,0.33333334326744,0.49803924560547),Color3.new(0.66666668653488,0.33333334326744,0.49803924560547),Color3.new(0,0.66666668653488,0.49803924560547),Color3.new(0.66666668653488,0.66666668653488,0.49803924560547),Color3.new(0,1,0.49803924560547),Color3.new(0.66666668653488,1,0.49803924560547),Color3.new(0,0,1),Color3.new(0.66666668653488,0,1),Color3.new(0,0.33333334326744,1),Color3.new(0.66666668653488,0.33333334326744,1),Color3.new(0,0.66666668653488,1),Color3.new(0.66666668653488,0.66666668653488,1),Color3.new(0,1,1),Color3.new(0.66666668653488,1,1),Color3.new(0.33333334326744,0,0),Color3.new(1,0,0),Color3.new(0.33333334326744,0.33333334326744,0),Color3.new(1,0.33333334326744,0),Color3.new(0.33333334326744,0.66666668653488,0),Color3.new(1,0.66666668653488,0),Color3.new(0.33333334326744,1,0),Color3.new(1,1,0),Color3.new(0.33333334326744,0,0.49803924560547),Color3.new(1,0,0.49803924560547),Color3.new(0.33333334326744,0.33333334326744,0.49803924560547),Color3.new(1,0.33333334326744,0.49803924560547),Color3.new(0.33333334326744,0.66666668653488,0.49803924560547),Color3.new(1,0.66666668653488,0.49803924560547),Color3.new(0.33333334326744,1,0.49803924560547),Color3.new(1,1,0.49803924560547),Color3.new(0.33333334326744,0,1),Color3.new(1,0,1),Color3.new(0.33333334326744,0.33333334326744,1),Color3.new(1,0.33333334326744,1),Color3.new(0.33333334326744,0.66666668653488,1),Color3.new(1,0.66666668653488,1),Color3.new(0.33333334326744,1,1),Color3.new(1,1,1)}
				local customColors = {}

				dragGUI(picker)

				local function updateColor(noupdate)
					local relativeX,relativeY,relativeStripY = 219 - hue*219, 199 - sat*199, 199 - val*199
					local hsvColor = Color3.fromHSV(hue,sat,val)

					if noupdate == 2 or not noupdate then
						hueInput.Text = tostring(math.ceil(359*hue))
						satInput.Text = tostring(math.ceil(255*sat))
						valInput.Text = tostring(math.floor(255*val))
					end
					if noupdate == 1 or not noupdate then
						redInput.Text = tostring(math.floor(255*red))
						greenInput.Text = tostring(math.floor(255*green))
						blueInput.Text = tostring(math.floor(255*blue))
					end

					chosenColor = Color3.new(red,green,blue)

					colorScope.Position = UDim2.new(0,relativeX-9,0,relativeY-9)
					colorStrip.ImageColor3 = Color3.fromHSV(hue,sat,1)
					colorArrow.Position = UDim2.new(0,-2,0,relativeStripY-4)
					previewFrame.BackgroundColor3 = chosenColor

					newMt.Color = chosenColor
					if newMt.Changed then newMt:Changed(chosenColor) end
				end

				local function colorSpaceInput()
					local relativeX = mouse.X - colorSpace.AbsolutePosition.X
					local relativeY = mouse.Y - colorSpace.AbsolutePosition.Y

					if relativeX < 0 then relativeX = 0 elseif relativeX > 219 then relativeX = 219 end
					if relativeY < 0 then relativeY = 0 elseif relativeY > 199 then relativeY = 199 end

					hue = (219 - relativeX)/219
					sat = (199 - relativeY)/199

					local hsvColor = Color3.fromHSV(hue,sat,val)
					red,green,blue = hsvColor.r,hsvColor.g,hsvColor.b

					updateColor()
				end

				local function colorStripInput()
					local relativeY = mouse.Y - colorStrip.AbsolutePosition.Y

					if relativeY < 0 then relativeY = 0 elseif relativeY > 199 then relativeY = 199 end	

					val = (199 - relativeY)/199

					local hsvColor = Color3.fromHSV(hue,sat,val)
					red,green,blue = hsvColor.r,hsvColor.g,hsvColor.b

					updateColor()
				end

				local function hookButtons(frame,func)
					frame.ArrowFrame.Up.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseMovement then
							frame.ArrowFrame.Up.BackgroundTransparency = 0.5
						elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
							local releaseEvent,runEvent

							local startTime = tick()
							local pressing = true
							local startNum = tonumber(frame.Text)

							if not startNum then return end

							releaseEvent = UserInputService.InputEnded:Connect(function(input)
								if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
								releaseEvent:Disconnect()
								pressing = false
							end)

							startNum = startNum + 1
							func(startNum)
							while pressing do
								if tick()-startTime > 0.3 then
									startNum = startNum + 1
									func(startNum)
								end
								wait(0.1)
							end
						end
					end)

					frame.ArrowFrame.Up.InputEnded:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseMovement then
							frame.ArrowFrame.Up.BackgroundTransparency = 1
						end
					end)

					frame.ArrowFrame.Down.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseMovement then
							frame.ArrowFrame.Down.BackgroundTransparency = 0.5
						elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
							local releaseEvent,runEvent

							local startTime = tick()
							local pressing = true
							local startNum = tonumber(frame.Text)

							if not startNum then return end

							releaseEvent = UserInputService.InputEnded:Connect(function(input)
								if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
								releaseEvent:Disconnect()
								pressing = false
							end)

							startNum = startNum - 1
							func(startNum)
							while pressing do
								if tick()-startTime > 0.3 then
									startNum = startNum - 1
									func(startNum)
								end
								wait(0.1)
							end
						end
					end)

					frame.ArrowFrame.Down.InputEnded:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseMovement then
							frame.ArrowFrame.Down.BackgroundTransparency = 1
						end
					end)
				end

				colorSpace.InputBegan:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						local releaseEvent,mouseEvent

						releaseEvent = UserInputService.InputEnded:Connect(function(input)
							if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
							releaseEvent:Disconnect()
							mouseEvent:Disconnect()
						end)

						mouseEvent = UserInputService.InputChanged:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.MouseMovement then
								colorSpaceInput()
							end
						end)

						colorSpaceInput()
					end
				end)

				colorStrip.InputBegan:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						local releaseEvent,mouseEvent

						releaseEvent = UserInputService.InputEnded:Connect(function(input)
							if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
							releaseEvent:Disconnect()
							mouseEvent:Disconnect()
						end)

						mouseEvent = UserInputService.InputChanged:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.MouseMovement then
								colorStripInput()
							end
						end)

						colorStripInput()
					end
				end)

				local function updateHue(str)
					local num = tonumber(str)
					if num then
						hue = math.clamp(math.floor(num),0,359)/359
						local hsvColor = Color3.fromHSV(hue,sat,val)
						red,green,blue = hsvColor.r,hsvColor.g,hsvColor.b
						hueInput.Text = tostring(hue*359)
						updateColor(1)
					end
				end
				hueInput.FocusLost:Connect(function() updateHue(hueInput.Text) end) hookButtons(hueInput,updateHue)

				local function updateSat(str)
					local num = tonumber(str)
					if num then
						sat = math.clamp(math.floor(num),0,255)/255
						local hsvColor = Color3.fromHSV(hue,sat,val)
						red,green,blue = hsvColor.r,hsvColor.g,hsvColor.b
						satInput.Text = tostring(sat*255)
						updateColor(1)
					end
				end
				satInput.FocusLost:Connect(function() updateSat(satInput.Text) end) hookButtons(satInput,updateSat)

				local function updateVal(str)
					local num = tonumber(str)
					if num then
						val = math.clamp(math.floor(num),0,255)/255
						local hsvColor = Color3.fromHSV(hue,sat,val)
						red,green,blue = hsvColor.r,hsvColor.g,hsvColor.b
						valInput.Text = tostring(val*255)
						updateColor(1)
					end
				end
				valInput.FocusLost:Connect(function() updateVal(valInput.Text) end) hookButtons(valInput,updateVal)

				local function updateRed(str)
					local num = tonumber(str)
					if num then
						red = math.clamp(math.floor(num),0,255)/255
						local newColor = Color3.new(red,green,blue)
						hue,sat,val = Color3.toHSV(newColor)
						redInput.Text = tostring(red*255)
						updateColor(2)
					end
				end
				redInput.FocusLost:Connect(function() updateRed(redInput.Text) end) hookButtons(redInput,updateRed)

				local function updateGreen(str)
					local num = tonumber(str)
					if num then
						green = math.clamp(math.floor(num),0,255)/255
						local newColor = Color3.new(red,green,blue)
						hue,sat,val = Color3.toHSV(newColor)
						greenInput.Text = tostring(green*255)
						updateColor(2)
					end
				end
				greenInput.FocusLost:Connect(function() updateGreen(greenInput.Text) end) hookButtons(greenInput,updateGreen)

				local function updateBlue(str)
					local num = tonumber(str)
					if num then
						blue = math.clamp(math.floor(num),0,255)/255
						local newColor = Color3.new(red,green,blue)
						hue,sat,val = Color3.toHSV(newColor)
						blueInput.Text = tostring(blue*255)
						updateColor(2)
					end
				end
				blueInput.FocusLost:Connect(function() updateBlue(blueInput.Text) end) hookButtons(blueInput,updateBlue)

				local colorChoice = Instance.new(""TextButton"")
				colorChoice.Name = ""Choice""
				colorChoice.Size = UDim2.new(0,25,0,18)
				colorChoice.BorderColor3 = Color3.new(96/255,96/255,96/255)
				colorChoice.Text = """"
				colorChoice.AutoButtonColor = false
				colorChoice.ZIndex = 10

				local row = 0
				local column = 0
				for i,v in pairs(basicColors) do
					local newColor = colorChoice:Clone()
					newColor.BackgroundColor3 = v
					newColor.Position = UDim2.new(0,1 + 30*column,0,21 + 23*row)

					newColor.MouseButton1Click:Connect(function()
						red,green,blue = v.r,v.g,v.b
						local newColor = Color3.new(red,green,blue)
						hue,sat,val = Color3.toHSV(newColor)
						updateColor()
					end)	

					newColor.Parent = basicColorsFrame
					column = column + 1
					if column == 6 then row = row + 1 column = 0 end
				end

				row = 0
				column = 0
				for i = 1,12 do
					local color = customColors[i] or Color3.new(0,0,0)
					local newColor = colorChoice:Clone()
					newColor.BackgroundColor3 = color
					newColor.Position = UDim2.new(0,1 + 30*column,0,20 + 23*row)

					newColor.MouseButton1Click:Connect(function()
						local curColor = customColors[i] or Color3.new(0,0,0)
						red,green,blue = curColor.r,curColor.g,curColor.b
						hue,sat,val = Color3.toHSV(curColor)
						updateColor()
					end)

					newColor.MouseButton2Click:Connect(function()
						customColors[i] = chosenColor
						newColor.BackgroundColor3 = chosenColor
					end)

					newColor.Parent = customColorsFrame
					column = column + 1
					if column == 6 then row = row + 1 column = 0 end
				end

				shade1Button.MouseButton1Click:Connect(function() if newMt.Confirm then newMt:Confirm(chosenColor,shade1) end end)
				shade1Button.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then shade1Button.BackgroundTransparency = 0.4 end end)
				shade1Button.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then shade1Button.BackgroundTransparency = 0 end end)

				shade2Button.MouseButton1Click:Connect(function() if newMt.Confirm then newMt:Confirm(chosenColor,shade2) end end)
				shade2Button.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then shade2Button.BackgroundTransparency = 0.4 end end)
				shade2Button.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then shade2Button.BackgroundTransparency = 0 end end)

				shade3Button.MouseButton1Click:Connect(function() if newMt.Confirm then newMt:Confirm(chosenColor,shade3) end end)
				shade3Button.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then shade3Button.BackgroundTransparency = 0.4 end end)
				shade3Button.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then shade3Button.BackgroundTransparency = 0 end end)

				text1Button.MouseButton1Click:Connect(function() if newMt.Confirm then newMt:Confirm(chosenColor,text1) end end)
				text1Button.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then text1Button.BackgroundTransparency = 0.4 end end)
				text1Button.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then text1Button.BackgroundTransparency = 0 end end)

				text2Button.MouseButton1Click:Connect(function() if newMt.Confirm then newMt:Confirm(chosenColor,text2) end end)
				text2Button.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then text2Button.BackgroundTransparency = 0.4 end end)
				text2Button.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then text2Button.BackgroundTransparency = 0 end end)

				scrollButton.MouseButton1Click:Connect(function() if newMt.Confirm then newMt:Confirm(chosenColor,scroll) end end)
				scrollButton.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then scrollButton.BackgroundTransparency = 0.4 end end)
				scrollButton.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then scrollButton.BackgroundTransparency = 0 end end)

				cancelButton.MouseButton1Click:Connect(function() if newMt.Cancel then newMt:Cancel() end end)
				cancelButton.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then cancelButton.BackgroundTransparency = 0.4 end end)
				cancelButton.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then cancelButton.BackgroundTransparency = 0 end end)

				defaultButton.MouseButton1Click:Connect(function() if newMt.Default then newMt:Default() end end)
				defaultButton.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then defaultButton.BackgroundTransparency = 0.4 end end)
				defaultButton.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then defaultButton.BackgroundTransparency = 0 end end)

				pickerExit.MouseButton1Click:Connect(function()
					picker:TweenPosition(UDim2.new(0.5, -219, 0, -500), ""InOut"", ""Quart"", 0.5, true, nil)
				end)

				updateColor()

				newMt.SetColor = function(self,color)
					red,green,blue = color.r,color.g,color.b
					hue,sat,val = Color3.toHSV(color)
					updateColor()
				end

				return newMt
			end
		end

		picker:TweenPosition(UDim2.new(0.5, -219, 0, 100), ""InOut"", ""Quart"", 0.5, true, nil)

		local Npicker = ColorPicker.new()
		Npicker.Confirm = function(self,color,ctype) updateColors(color,ctype) wait() updatesaves() end
		Npicker.Cancel = function(self)
			updateColors(cache_currentShade1,shade1)
			updateColors(cache_currentShade2,shade2)
			updateColors(cache_currentShade3,shade3)
			updateColors(cache_currentText1,text1)
			updateColors(cache_currentText2,text2)
			updateColors(cache_currentScroll,scroll)
			wait()
			updatesaves()
		end
		Npicker.Default = function(self)
			updateColors(Color3.fromRGB(0, 65, 195),shade1)
			updateColors(Color3.fromRGB(0, 85, 255),shade2)
			updateColors(Color3.fromRGB(0, 100, 255),shade3)
			updateColors(Color3.new(1, 1, 1),text1)
			updateColors(Color3.new(0, 0, 0),text2)
			updateColors(Color3.fromRGB(78,78,79),scroll)
			wait()
			updatesaves()
		end
	else
		picker:TweenPosition(UDim2.new(0.5, -219, 0, 100), ""InOut"", ""Quart"", 0.5, true, nil)
	end
end)


SettingsButton.MouseButton1Click:Connect(function()
	if SettingsOpen == false then SettingsOpen = true
		Settings:TweenPosition(UDim2.new(0, 0, 0, 45), ""InOut"", ""Quart"", 0.5, true, nil)
		CMDsF.Visible = false
	else SettingsOpen = false
		CMDsF.Visible = true
		Settings:TweenPosition(UDim2.new(0, 0, 0, 220), ""InOut"", ""Quart"", 0.5, true, nil)
	end
end)

On.MouseButton1Click:Connect(function()
	if isHidden == false then
		if StayOpen == false then
			StayOpen = true
			On.BackgroundTransparency = 0
		else
			StayOpen = false
			On.BackgroundTransparency = 1
		end
		updatesaves()
	end
end)

Clear.MouseButton1Down:Connect(function()
	for _, child in pairs(scroll_2:GetChildren()) do
		child:Destroy()
	end
	scroll_2.CanvasSize = UDim2.new(0, 0, 0, 10)
end)

Clear_2.MouseButton1Down:Connect(function()
	for _, child in pairs(scroll_3:GetChildren()) do
		child:Destroy()
	end
	scroll_3.CanvasSize = UDim2.new(0, 0, 0, 10)
end)

Toggle.MouseButton1Down:Connect(function()
	if logsEnabled then
		logsEnabled = false
		Toggle.Text = 'Disabled'
		updatesaves()
	else
		logsEnabled = true
		Toggle.Text = 'Enabled'
		updatesaves()
	end
end)

Toggle_2.MouseButton1Down:Connect(function()
	if jLogsEnabled then
		jLogsEnabled = false
		Toggle_2.Text = 'Disabled'
		updatesaves()
	else
		jLogsEnabled = true
		Toggle_2.Text = 'Enabled'
		updatesaves()
	end
end)

selectChat.MouseButton1Down:Connect(function()
	join.Visible = false
	chat.Visible = true
	table.remove(shade3,table.find(shade3,selectChat))
	table.remove(shade2,table.find(shade2,selectJoin))
	table.insert(shade2,selectChat)
	table.insert(shade3,selectJoin)
	selectJoin.BackgroundColor3 = currentShade3
	selectChat.BackgroundColor3 = currentShade2
end)

selectJoin.MouseButton1Down:Connect(function()
	chat.Visible = false
	join.Visible = true	
	table.remove(shade3,table.find(shade3,selectJoin))
	table.remove(shade2,table.find(shade2,selectChat))
	table.insert(shade2,selectJoin)
	table.insert(shade3,selectChat)
	selectChat.BackgroundColor3 = currentShade3
	selectJoin.BackgroundColor3 = currentShade2
end)

if not writefileExploit() then
    notify(""Saves"", ""Your exploit does not support read/write file. Your settings will not save."")
end

ChatLog = function(plr)
	plr.Chatted:Connect(function(Message)
		if logsEnabled == true then
			CreateLabel(plr.Name,Message)
		end
	end)
end

JoinLog = function(plr)
	if jLogsEnabled == true then
		CreateJoinLabel(plr,plr.UserId)
	end
end

CleanFileName = function(name)
    return tostring(name):gsub(""[*\\?:<>|]+"", """"):sub(1, 175)
end

SaveChatlogs.MouseButton1Down:Connect(function()
	if writefileExploit() then
		if #scroll_2:GetChildren() > 0 then
			notify(""Loading"",'Hold on a sec')
			local placeName = CleanFileName(MarketplaceService:GetProductInfo(PlaceId).Name)
			local writelogs = '-- Elmas Chat logs for ""'..placeName..'""\n'
			for _, child in pairs(scroll_2:GetChildren()) do
				writelogs = writelogs..'\n'..child.Text
			end
			local writelogsFile = tostring(writelogs)
			local fileext = 0
			local function nameFile()
				local file
				pcall(function() file = readfile(placeName..' Chat Logs ('..fileext..').txt') end)
				if file then
					fileext = fileext+1
					nameFile()
				else
					writefileCooldown(placeName..' Chat Logs ('..fileext..').txt', writelogsFile)
				end
			end
			nameFile()
			notify('Chat Logs','Saved chat logs to the workspace folder within your exploit folder.')
		end
	else
		notify('Chat Logs','Your exploit does not support write file. You cannot save chat logs.')
	end
end)

if isLegacyChat then
    for _, plr in pairs(Players:GetPlayers()) do
        ChatLog(plr)
    end
end

Players.PlayerRemoving:Connect(function(player)
	if ESPenabled or CHMSenabled or COREGUI:FindFirstChild(player.Name..'_LC') then
		for i,v in pairs(COREGUI:GetChildren()) do
			if v.Name == player.Name..'_ESP' or v.Name == player.Name..'_LC' or v.Name == player.Name..'_CHMS' then
				v:Destroy()
			end
		end
	end
	if viewing ~= nil and player == viewing then
		workspace.CurrentCamera.CameraSubject = Players.LocalPlayer.Character
		viewing = nil
		if viewDied then
			viewDied:Disconnect()
			viewChanged:Disconnect()
		end
		notify('Spectate','View turned off (player left)')
	end
	eventEditor.FireEvent(""OnLeave"", player.Name)
end)

Exit.MouseButton1Down:Connect(function()
	logs:TweenPosition(UDim2.new(0, 0, 1, 10), ""InOut"", ""Quart"", 0.3, true, nil)
end)

Hide.MouseButton1Down:Connect(function()
	if logs.Position ~= UDim2.new(0, 0, 1, -20) then
		logs:TweenPosition(UDim2.new(0, 0, 1, -20), ""InOut"", ""Quart"", 0.3, true, nil)
	else
		logs:TweenPosition(UDim2.new(0, 0, 1, -265), ""InOut"", ""Quart"", 0.3, true, nil)
	end
end)

EventBind.MouseButton1Click:Connect(function()
	eventEditor.Frame:TweenPosition(UDim2.new(0.5,-175,0.5,-101), ""InOut"", ""Quart"", 0.5, true, nil)
end)

Keybinds.MouseButton1Click:Connect(function()
	KeybindsFrame:TweenPosition(UDim2.new(0, 0, 0, 0), ""InOut"", ""Quart"", 0.5, true, nil)
	wait(0.5)
	SettingsHolder.Visible = false
end)

Close.MouseButton1Click:Connect(function()
	SettingsHolder.Visible = true
	KeybindsFrame:TweenPosition(UDim2.new(0, 0, 0, 175), ""InOut"", ""Quart"", 0.5, true, nil)
end)

Keybinds.MouseButton1Click:Connect(function()
	KeybindsFrame:TweenPosition(UDim2.new(0, 0, 0, 0), ""InOut"", ""Quart"", 0.5, true, nil)
	wait(0.5)
	SettingsHolder.Visible = false
end)

Add.MouseButton1Click:Connect(function()
	KeybindEditor:TweenPosition(UDim2.new(0.5, -180, 0, 260), ""InOut"", ""Quart"", 0.5, true, nil)
end)

Delete.MouseButton1Click:Connect(function()
	binds = {}
	refreshbinds()
	updatesaves()
	notify('Keybinds Updated','Removed all keybinds')
end)

Close_2.MouseButton1Click:Connect(function()
	SettingsHolder.Visible = true
	AliasesFrame:TweenPosition(UDim2.new(0, 0, 0, 175), ""InOut"", ""Quart"", 0.5, true, nil)
end)

Aliases.MouseButton1Click:Connect(function()
	AliasesFrame:TweenPosition(UDim2.new(0, 0, 0, 0), ""InOut"", ""Quart"", 0.5, true, nil)
	wait(0.5)
	SettingsHolder.Visible = false
end)

Close_3.MouseButton1Click:Connect(function()
	SettingsHolder.Visible = true
	PositionsFrame:TweenPosition(UDim2.new(0, 0, 0, 175), ""InOut"", ""Quart"", 0.5, true, nil)
end)

Positions.MouseButton1Click:Connect(function()
	PositionsFrame:TweenPosition(UDim2.new(0, 0, 0, 0), ""InOut"", ""Quart"", 0.5, true, nil)
	wait(0.5)
	SettingsHolder.Visible = false
end)

local selectionBox = Instance.new(""SelectionBox"")
selectionBox.Name = randomString()
selectionBox.Color3 = Color3.new(255,255,255)
selectionBox.Adornee = nil
selectionBox.Parent = PARENT

local selected = Instance.new(""SelectionBox"")
selected.Name = randomString()
selected.Color3 = Color3.new(0,166,0)
selected.Adornee = nil
selected.Parent = PARENT

local ActivateHighlight = nil
local ClickSelect = nil
function selectPart()
	ToPartFrame:TweenPosition(UDim2.new(0.5, -180, 0, 335), ""InOut"", ""Quart"", 0.5, true, nil)
	local function HighlightPart()
		if selected.Adornee ~= IYMouse.Target then
			selectionBox.Adornee = IYMouse.Target
		else
			selectionBox.Adornee = nil
		end
	end
	ActivateHighlight = IYMouse.Move:Connect(HighlightPart)
	local function SelectPart()
		if IYMouse.Target ~= nil then
			selected.Adornee = IYMouse.Target
			Path.Text = getHierarchy(IYMouse.Target)
		end
	end
	ClickSelect = IYMouse.Button1Down:Connect(SelectPart)
end

Part.MouseButton1Click:Connect(function()
	selectPart()
end)

Exit_4.MouseButton1Click:Connect(function()
	ToPartFrame:TweenPosition(UDim2.new(0.5, -180, 0, -500), ""InOut"", ""Quart"", 0.5, true, nil)
	if ActivateHighlight then
		ActivateHighlight:Disconnect()
	end
	if ClickSelect then
		ClickSelect:Disconnect()
	end
	selectionBox.Adornee = nil
	selected.Adornee = nil
	Path.Text = """"
end)

CopyPath.MouseButton1Click:Connect(function()
	if Path.Text ~= """" then
		toClipboard(Path.Text)
	else
		notify('Copy Path','Select a part to copy its path')
	end
end)

ChoosePart.MouseButton1Click:Connect(function()
	if Path.Text ~= """" then
		local tpNameExt = ''
		local function handleWpNames()
			local FoundDupe = false
			for i,v in pairs(pWayPoints) do
				if v.NAME:lower() == selected.Adornee.Name:lower()..tpNameExt then
					FoundDupe = true
				end
			end
			if not FoundDupe then
				notify('Modified Waypoints',""Created waypoint: ""..selected.Adornee.Name..tpNameExt)
				pWayPoints[#pWayPoints + 1] = {NAME = selected.Adornee.Name..tpNameExt, COORD = {selected.Adornee}}
			else
				if isNumber(tpNameExt) then
					tpNameExt = tpNameExt+1
				else
					tpNameExt = 1
				end
				handleWpNames()
			end
		end
		handleWpNames()
		refreshwaypoints()
	else
		notify('Part Selection','Select a part first')
	end
end)

cmds={}
customAlias = {}
Delete_3.MouseButton1Click:Connect(function()
	customAlias = {}
	aliases = {}
	notify('Aliases Modified','Removed all aliases')
	updatesaves()
	refreshaliases()
end)

PrefixBox:GetPropertyChangedSignal(""Text""):Connect(function()
	prefix = PrefixBox.Text
	Cmdbar.PlaceholderText = ""Command Bar (""..prefix.."")""
	updatesaves()
end)

function CamViewport()
	if workspace.CurrentCamera then
		return workspace.CurrentCamera.ViewportSize.X
	end
end

function UpdateToViewport()
	if Holder.Position.X.Offset < -CamViewport() then
		Holder:TweenPosition(UDim2.new(1, -CamViewport(), Holder.Position.Y.Scale, Holder.Position.Y.Offset), ""InOut"", ""Quart"", 0.04, true, nil)
		Notification:TweenPosition(UDim2.new(1, -CamViewport() + 250, Notification.Position.Y.Scale, Notification.Position.Y.Offset), ""InOut"", ""Quart"", 0.04, true, nil)
	end
end
CameraChanged = workspace.CurrentCamera:GetPropertyChangedSignal(""ViewportSize""):Connect(UpdateToViewport)

function updateCamera(child, parent)
	if parent ~= workspace then
		CamMoved:Disconnect()
		CameraChanged:Disconnect()
		repeat wait() until workspace.CurrentCamera
		CameraChanged = workspace.CurrentCamera:GetPropertyChangedSignal(""ViewportSize""):Connect(UpdateToViewport)
		CamMoved = workspace.CurrentCamera.AncestryChanged:Connect(updateCamera)
	end
end
CamMoved = workspace.CurrentCamera.AncestryChanged:Connect(updateCamera)

function dragMain(dragpoint,gui)
	task.spawn(function()
		local dragging
		local dragInput
		local dragStart = Vector3.new(0,0,0)
		local startPos
		local function update(input)
			local pos = -250
			local delta = input.Position - dragStart
			if startPos.X.Offset + delta.X <= -500 then
				local Position = UDim2.new(1, -250, Notification.Position.Y.Scale, Notification.Position.Y.Offset)
				TweenService:Create(Notification, TweenInfo.new(.20), {Position = Position}):Play()
				pos = 250
			else
				local Position = UDim2.new(1, -500, Notification.Position.Y.Scale, Notification.Position.Y.Offset)
				TweenService:Create(Notification, TweenInfo.new(.20), {Position = Position}):Play()
				pos = -250
			end
			if startPos.X.Offset + delta.X <= -250 and -CamViewport() <= startPos.X.Offset + delta.X then
				local Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, gui.Position.Y.Scale, gui.Position.Y.Offset)
				TweenService:Create(gui, TweenInfo.new(.20), {Position = Position}):Play()
				local Position2 = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X + pos, Notification.Position.Y.Scale, Notification.Position.Y.Offset)
				TweenService:Create(Notification, TweenInfo.new(.20), {Position = Position2}):Play()
			elseif startPos.X.Offset + delta.X > -500 then
				local Position = UDim2.new(1, -250, gui.Position.Y.Scale, gui.Position.Y.Offset)
				TweenService:Create(gui, TweenInfo.new(.20), {Position = Position}):Play()
			elseif -CamViewport() > startPos.X.Offset + delta.X then
				gui:TweenPosition(UDim2.new(1, -CamViewport(), gui.Position.Y.Scale, gui.Position.Y.Offset), ""InOut"", ""Quart"", 0.04, true, nil)
				local Position = UDim2.new(1, -CamViewport(), gui.Position.Y.Scale, gui.Position.Y.Offset)
				TweenService:Create(gui, TweenInfo.new(.20), {Position = Position}):Play()
				local Position2 = UDim2.new(1, -CamViewport() + 250, Notification.Position.Y.Scale, Notification.Position.Y.Offset)
				TweenService:Create(Notification, TweenInfo.new(.20), {Position = Position2}):Play()
			end
		end
		dragpoint.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
				dragging = true
				dragStart = input.Position
				startPos = gui.Position

				input.Changed:Connect(function()
					if input.UserInputState == Enum.UserInputState.End then
						dragging = false
					end
				end)
			end
		end)
		dragpoint.InputChanged:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
				dragInput = input
			end
		end)
		UserInputService.InputChanged:Connect(function(input)
			if input == dragInput and dragging then
				update(input)
			end
		end)
	end)
end

dragMain(Title,Holder)

Match = function(name,str)
	str = str:gsub(""%W"", ""%%%1"")
	return name:lower():find(str:lower()) and true
end

local canvasPos = Vector2.new(0,0)
local topCommand = nil
IndexContents = function(str,bool,cmdbar,Ianim)
	CMDsF.CanvasPosition = Vector2.new(0,0)
	local SizeY = 0
	local indexnum = 0
	local frame = CMDsF
	topCommand = nil
	local chunks = {}
	if str:sub(#str,#str) == ""\\"" then str = """" end
	for w in string.gmatch(str,""[^\\]+"") do
		table.insert(chunks,w)
	end
	if #chunks > 0 then str = chunks[#chunks] end
	if str:sub(1,1) == ""!"" then str = str:sub(2) end
	for i,v in next, frame:GetChildren() do
		if v:IsA(""TextButton"") then
			if bool then
				if Match(v.Text,str) then
					indexnum = indexnum + 1
					v.Visible = true
					if topCommand == nil then
						topCommand = v.Text
					end
				else
					v.Visible = false
				end
			else
				v.Visible = true
				if topCommand == nil then
					topCommand = v.Text
				end
			end
		end
	end
	frame.CanvasSize = UDim2.new(0,0,0,cmdListLayout.AbsoluteContentSize.Y)
	if not Ianim then
		if indexnum == 0 or string.find(str, "" "") then
			if not cmdbar then
				minimizeHolder()
			elseif cmdbar then
				cmdbarHolder()
			end
		else
			maximizeHolder()
		end
	else
		minimizeHolder()
	end
end

task.spawn(function()
	if not isLegacyChat then return end
	local chatbox
	local success, result = pcall(function() chatbox = game.WaitForChild(PlayerGui, ""Chat"").Frame.ChatBarParentFrame.Frame.BoxFrame.Frame.ChatBar end)
	if success then
		local function chatboxFocused()
			canvasPos = CMDsF.CanvasPosition
		end
		local chatboxFocusedC = chatbox.Focused:Connect(chatboxFocused)

		local function Index()
			if chatbox.Text:lower():sub(1,1) == prefix then
				if SettingsOpen == true then
					wait(0.2)
					CMDsF.Visible = true
					Settings:TweenPosition(UDim2.new(0, 0, 0, 220), ""InOut"", ""Quart"", 0.2, true, nil)
				end
				IndexContents(PlayerGui.Chat.Frame.ChatBarParentFrame.Frame.BoxFrame.Frame.ChatBar.Text:lower():sub(2),true)
			else
				minimizeHolder()
				if SettingsOpen == true then
					wait(0.2)
					Settings:TweenPosition(UDim2.new(0, 0, 0, 45), ""InOut"", ""Quart"", 0.2, true, nil)
					CMDsF.Visible = false
				end
			end
		end
		local chatboxFunc = chatbox:GetPropertyChangedSignal(""Text""):Connect(Index)

		local function chatboxFocusLost(enterpressed)
			if not enterpressed or chatbox.Text:lower():sub(1,1) ~= prefix then
				IndexContents('',true)
			end
			CMDsF.CanvasPosition = canvasPos
			minimizeHolder()
		end
		local chatboxFocusLostC = chatbox.FocusLost:Connect(chatboxFocusLost)

		PlayerGui:WaitForChild(""Chat"").Frame.ChatBarParentFrame.ChildAdded:Connect(function(newbar)
			wait()
			if newbar:FindFirstChild('BoxFrame') then
				chatbox = PlayerGui:WaitForChild(""Chat"").Frame.ChatBarParentFrame.Frame.BoxFrame.Frame.ChatBar
				if chatboxFocusedC then chatboxFocusedC:Disconnect() end
				chatboxFocusedC = chatbox.Focused:Connect(chatboxFocused)
				if chatboxFunc then chatboxFunc:Disconnect() end
				chatboxFunc = chatbox:GetPropertyChangedSignal(""Text""):Connect(Index)
				if chatboxFocusLostC then chatboxFocusLostC:Disconnect() end
				chatboxFocusLostC = chatbox.FocusLost:Connect(chatboxFocusLost)
			end
		end)
		--else
		--print('Custom chat detected. Will not provide suggestions for commands typed in the chat.')
	end
end)

function autoComplete(str,curText)
	local endingChar = {""["", ""/"", ""("", "" ""}
	local stop = 0
	for i=1,#str do
		local c = str:sub(i,i)
		if table.find(endingChar, c) then
			stop = i
			break
		end
	end
	curText = curText or Cmdbar.Text
	local subPos = 0
	local pos = 1
	local findRes = string.find(curText,""\\"",pos)
	while findRes do
		subPos = findRes
		pos = findRes+1
		findRes = string.find(curText,""\\"",pos)
	end
	if curText:sub(subPos+1,subPos+1) == ""!"" then subPos = subPos + 1 end
	Cmdbar.Text = curText:sub(1,subPos) .. str:sub(1, stop - 1)..' '
	wait()
	Cmdbar.Text = Cmdbar.Text:gsub( '\t', '' )
	Cmdbar.CursorPosition = #Cmdbar.Text+1--1020
end

CMDs = {}
CMDs[#CMDs + 1] = {NAME = 'discord / support / help', DESC = 'Invite to the Elmas support server.'}
CMDs[#CMDs + 1] = {NAME = 'console', DESC = 'Loads Roblox console'}
CMDs[#CMDs + 1] = {NAME = 'oldconsole', DESC = 'Loads old Roblox console'}
CMDs[#CMDs + 1] = {NAME = 'explorer / dex', DESC = 'Opens DEX by Moon'}
CMDs[#CMDs + 1] = {NAME = 'olddex / odex', DESC = 'Opens Old DEX by Moon'}
CMDs[#CMDs + 1] = {NAME = 'remotespy / rspy', DESC = 'Opens Simple Spy V3'}
CMDs[#CMDs + 1] = {NAME = 'audiologger / alogger', DESC = 'Opens Edges audio logger'}
CMDs[#CMDs + 1] = {NAME = 'serverinfo / info', DESC = 'Gives you info about the server'}
CMDs[#CMDs + 1] = {NAME = 'jobid', DESC = 'Copies the games JobId to your clipboard'}
CMDs[#CMDs + 1] = {NAME = 'notifyjobid', DESC = 'Notifies you the games JobId'}
CMDs[#CMDs + 1] = {NAME = 'rejoin / rj', DESC = 'Makes you rejoin the game'}
CMDs[#CMDs + 1] = {NAME = 'autorejoin / autorj', DESC = 'Automatically rejoins the server if you get kicked/disconnected'}
CMDs[#CMDs + 1] = {NAME = 'serverhop / shop', DESC = 'Teleports you to a different server'}
CMDs[#CMDs + 1] = {NAME = 'joinplayer [username / ID] [place ID]', DESC = 'Joins a specific players server'}
CMDs[#CMDs + 1] = {NAME = 'gameteleport / gametp [place ID]', DESC = 'Joins a game by ID'}
CMDs[#CMDs + 1] = {NAME = 'antiidle / antiafk', DESC = 'Prevents the game from kicking you for being idle/afk'}
CMDs[#CMDs + 1] = {NAME = 'datalimit [num]', DESC = 'Set outgoing KBPS limit'}
CMDs[#CMDs + 1] = {NAME = 'replicationlag / backtrack [num]', DESC = 'Set IncomingReplicationLag'}
CMDs[#CMDs + 1] = {NAME = 'creatorid / creator', DESC = 'Notifies you the creators ID'}
CMDs[#CMDs + 1] = {NAME = 'copycreatorid / copycreator', DESC = 'Copies the creators ID to your clipboard'}
CMDs[#CMDs + 1] = {NAME = 'setcreatorid / setcreator', DESC = 'Sets your userid to the creators ID'}
CMDs[#CMDs + 1] = {NAME = 'noprompts', DESC = 'Prevents the game from showing you purchase/premium prompts'}
CMDs[#CMDs + 1] = {NAME = 'showprompts', DESC = 'Allows the game to show purchase/premium prompts again'}
CMDs[#CMDs + 1] = {NAME = 'enable [inventory/playerlist/chat/reset/emotes/all]', DESC = 'Toggles visibility of coregui items'}
CMDs[#CMDs + 1] = {NAME = 'disable [inventory/playerlist/chat/reset/emotes/all]', DESC = 'Toggles visibility of coregui items'}
CMDs[#CMDs + 1] = {NAME = 'showguis', DESC = 'Shows any invisible GUIs'}
CMDs[#CMDs + 1] = {NAME = 'unshowguis', DESC = 'Undoes showguis'}
CMDs[#CMDs + 1] = {NAME = 'hideguis', DESC = 'Hides any GUIs in PlayerGui'}
CMDs[#CMDs + 1] = {NAME = 'unhideguis', DESC = 'Undoes hideguis'}
CMDs[#CMDs + 1] = {NAME = 'guidelete', DESC = 'Enables backspace to delete GUI'}
CMDs[#CMDs + 1] = {NAME = 'unguidelete / noguidelete', DESC = 'Disables guidelete'}
CMDs[#CMDs + 1] = {NAME = 'hideiy', DESC = 'Hides the main IY GUI'}
CMDs[#CMDs + 1] = {NAME = 'showiy / unhideiy', DESC = 'Shows IY again'}
CMDs[#CMDs + 1] = {NAME = 'keepiy', DESC = 'Auto execute IY when you teleport through servers'}
CMDs[#CMDs + 1] = {NAME = 'unkeepiy', DESC = 'Disable keepiy'}
CMDs[#CMDs + 1] = {NAME = 'togglekeepiy', DESC = 'Toggle keepiy'}
CMDs[#CMDs + 1] = {NAME = 'savegame / saveplace', DESC = 'Uses saveinstance to save the game'}
CMDs[#CMDs + 1] = {NAME = 'clearerror', DESC = 'Clears the annoying box and blur when a game kicks you'}
CMDs[#CMDs + 1] = {NAME = 'clientantikick / antikick (CLIENT)', DESC = 'Prevents localscripts from kicking you'}
CMDs[#CMDs + 1] = {NAME = 'clientantiteleport / antiteleport (CLIENT)', DESC = 'Prevents localscripts from teleporting you'}
CMDs[#CMDs + 1] = {NAME = 'allowrejoin / allowrj [true/false] (CLIENT)', DESC = 'Changes if antiteleport allows you to rejoin or not'}
CMDs[#CMDs + 1] = {NAME = 'cancelteleport / canceltp', DESC = 'Cancels teleports in progress'}
CMDs[#CMDs + 1] = {NAME = 'volume / vol [0-10]', DESC = 'Adjusts your game volume on a scale of 0 to 10'}
CMDs[#CMDs + 1] = {NAME = 'antilag / boostfps / lowgraphics', DESC = 'Lowers game quality to boost FPS'}
CMDs[#CMDs + 1] = {NAME = 'record / rec', DESC = 'Starts roblox recorder'}
CMDs[#CMDs + 1] = {NAME = 'screenshot / scrnshot', DESC = 'Takes a screenshot'}
CMDs[#CMDs + 1] = {NAME = 'togglefullscreen / togglefs', DESC = 'Toggles fullscreen'}
CMDs[#CMDs + 1] = {NAME = 'notify [text]', DESC = 'Sends you a notification with the provided text'}
CMDs[#CMDs + 1] = {NAME = 'lastcommand / lastcmd', DESC = 'Executes the previous command used'}
CMDs[#CMDs + 1] = {NAME = 'exit', DESC = 'Kills roblox process'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'noclip', DESC = 'Go through objects'}
CMDs[#CMDs + 1] = {NAME = 'unnoclip / clip', DESC = 'Disables noclip'}
CMDs[#CMDs + 1] = {NAME = 'fly [speed]', DESC = 'Makes you fly'}
CMDs[#CMDs + 1] = {NAME = 'unfly', DESC = 'Disables fly'}
CMDs[#CMDs + 1] = {NAME = 'flyspeed [num]', DESC = 'Set fly speed (default is 20)'}
CMDs[#CMDs + 1] = {NAME = 'vehiclefly / vfly [speed]', DESC = 'Makes you fly in a vehicle'}
CMDs[#CMDs + 1] = {NAME = 'unvehiclefly / unvfly', DESC = 'Disables vehicle fly'}
CMDs[#CMDs + 1] = {NAME = 'vehicleflyspeed  / vflyspeed [num]', DESC = 'Set vehicle fly speed'}
CMDs[#CMDs + 1] = {NAME = 'cframefly / cfly [speed]', DESC = 'Makes you fly, bypassing some anti cheats (works on mobile)'}
CMDs[#CMDs + 1] = {NAME = 'uncframefly / uncfly', DESC = 'Disables cfly'}
CMDs[#CMDs + 1] = {NAME = 'cframeflyspeed  / cflyspeed [num]', DESC = 'Sets cfly speed'}
CMDs[#CMDs + 1] = {NAME = 'qefly [true / false]', DESC = 'enables or disables the Q and E hotkeys for fly'}
CMDs[#CMDs + 1] = {NAME = 'vehiclenoclip / vnoclip', DESC = 'Turns off vehicle collision'}
CMDs[#CMDs + 1] = {NAME = 'vehicleclip / vclip / unvnoclip', DESC = 'Enables vehicle collision'}
CMDs[#CMDs + 1] = {NAME = 'float /  platform', DESC = 'Spawns a platform beneath you causing you to float'}
CMDs[#CMDs + 1] = {NAME = 'unfloat / noplatform', DESC = 'Removes the platform'}
CMDs[#CMDs + 1] = {NAME = 'swim', DESC = 'Allows you to swim in the air'}
CMDs[#CMDs + 1] = {NAME = 'unswim / noswim', DESC = 'Stops you from swimming everywhere'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'setwaypoint / swp [name]', DESC = 'Sets a waypoint at your position'}
CMDs[#CMDs + 1] = {NAME = 'waypointpos / wpp [name] [X Y Z]', DESC = 'Sets a waypoint with specified coordinates'}
CMDs[#CMDs + 1] = {NAME = 'waypoints', DESC = 'Shows a list of currently active waypoints'}
CMDs[#CMDs + 1] = {NAME = 'showwaypoints / showwp', DESC = 'Shows all currently set waypoints'}
CMDs[#CMDs + 1] = {NAME = 'hidewaypoints / hidewp', DESC = 'Hides shown waypoints'}
CMDs[#CMDs + 1] = {NAME = 'waypoint / wp [name]', DESC = 'Teleports player to a waypoint'}
CMDs[#CMDs + 1] = {NAME = 'tweenwaypoint / twp [name]', DESC = 'Tweens player to a waypoint'}
CMDs[#CMDs + 1] = {NAME = 'walktowaypoint / wtwp [name]', DESC = 'Walks player to a waypoint'}
CMDs[#CMDs + 1] = {NAME = 'deletewaypoint / dwp [name]', DESC = 'Deletes a waypoint'}
CMDs[#CMDs + 1] = {NAME = 'clearwaypoints / cwp', DESC = 'Clears all waypoints'}
CMDs[#CMDs + 1] = {NAME = 'cleargamewaypoints / cgamewp', DESC = 'Clears all waypoints for the game you are in'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'goto [player]', DESC = 'Go to a player'}
CMDs[#CMDs + 1] = {NAME = 'tweengoto / tgoto [player]', DESC = 'Tween to a player (bypasses some anti cheats)'}
CMDs[#CMDs + 1] = {NAME = 'tweenspeed / tspeed [num]', DESC = 'Sets how fast all tween commands go (default is 1)'}
CMDs[#CMDs + 1] = {NAME = 'vehiclegoto / vgoto [player]', DESC = 'Go to a player while in a vehicle'}
CMDs[#CMDs + 1] = {NAME = 'loopgoto [player] [distance] [delay]', DESC = 'Loop teleport to a player'}
CMDs[#CMDs + 1] = {NAME = 'unloopgoto', DESC = 'Stops teleporting you to a player'}
CMDs[#CMDs + 1] = {NAME = 'pulsetp / ptp [player] [seconds]', DESC = 'Teleports you to a player for a specified ammount of time'}
CMDs[#CMDs + 1] = {NAME = 'clientbring / cbring [player] (CLIENT)', DESC = 'Bring a player'}
CMDs[#CMDs + 1] = {NAME = 'loopbring [player] [distance] [delay] (CLIENT)', DESC = 'Loop brings a player to you (useful for killing)'}
CMDs[#CMDs + 1] = {NAME = 'unloopbring [player]', DESC = 'Undoes loopbring'}
CMDs[#CMDs + 1] = {NAME = 'freeze / fr [player] (CLIENT)', DESC = 'Freezes a player'}
CMDs[#CMDs + 1] = {NAME = 'freezeanims', DESC = 'Freezes your animations / pauses your animations - Does not work on default animations'}
CMDs[#CMDs + 1] = {NAME = 'unfreezeanims', DESC = 'Unfreezes your animations / plays your animations'}
CMDs[#CMDs + 1] = {NAME = 'thaw / unfr [player] (CLIENT)', DESC = 'Unfreezes a player'}
CMDs[#CMDs + 1] = {NAME = 'tpposition / tppos [X Y Z]', DESC = 'Teleports you to certain coordinates'}
CMDs[#CMDs + 1] = {NAME = 'tweentpposition / ttppos [X Y Z]', DESC = 'Tween to coordinates (bypasses some anti cheats)'}
CMDs[#CMDs + 1] = {NAME = 'offset [X Y Z]', DESC = 'Offsets you by certain coordinates'}
CMDs[#CMDs + 1] = {NAME = 'tweenoffset / toffset [X Y Z]', DESC = 'Tween offset (bypasses some anti cheats)'}
CMDs[#CMDs + 1] = {NAME = 'notifyposition / notifypos [player]', DESC = 'Notifies you the coordinates of a character'}
CMDs[#CMDs + 1] = {NAME = 'copyposition / copypos [player]', DESC = 'Copies the coordinates of a character to your clipboard'}
CMDs[#CMDs + 1] = {NAME = 'walktoposition / walktopos [X Y Z]', DESC = 'Makes you walk to a coordinate'}
CMDs[#CMDs + 1] = {NAME = 'spawnpoint / spawn [delay]', DESC = 'Sets a position where you will spawn'}
CMDs[#CMDs + 1] = {NAME = 'nospawnpoint / nospawn', DESC = 'Removes your custom spawn point'}
CMDs[#CMDs + 1] = {NAME = 'flashback / diedtp', DESC = 'Teleports you to where you last died'}
CMDs[#CMDs + 1] = {NAME = 'walltp', DESC = 'Teleports you above/over any wall you run into'}
CMDs[#CMDs + 1] = {NAME = 'nowalltp / unwalltp', DESC = 'Disables walltp'}
CMDs[#CMDs + 1] = {NAME = 'teleporttool / tptool', DESC = 'Gives you a teleport tool'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'logs', DESC = 'Opens the logs GUI'}
CMDs[#CMDs + 1] = {NAME = 'chatlogs / clogs', DESC = 'Log what people say or whisper'}
CMDs[#CMDs + 1] = {NAME = 'joinlogs / jlogs', DESC = 'Log when people join'}
CMDs[#CMDs + 1] = {NAME = 'antichatlogs / antichatlogger', DESC = 'Prevents Roblox from banning you for your silly chat messages (game needs the legacy chat)'}
CMDs[#CMDs + 1] = {NAME = 'chat / say [text]', DESC = 'Makes you chat a string (possible mute bypass)'}
CMDs[#CMDs + 1] = {NAME = 'spam [text]', DESC = 'Makes you spam the chat'}
CMDs[#CMDs + 1] = {NAME = 'unspam', DESC = 'Turns off spam'}
CMDs[#CMDs + 1] = {NAME = 'whisper / pm [player] [text]', DESC = 'Makes you whisper a string to someone (possible mute bypass)'}
CMDs[#CMDs + 1] = {NAME = 'pmspam [player] [text]', DESC = 'Makes you spam a players whispers'}
CMDs[#CMDs + 1] = {NAME = 'unpmspam [player]', DESC = 'Turns off pm spam'}
CMDs[#CMDs + 1] = {NAME = 'spamspeed [num]', DESC = 'How quickly you spam (default is 1)'}
CMDs[#CMDs + 1] = {NAME = 'bubblechat (CLIENT)', DESC = 'Enables bubble chat for your client'}
CMDs[#CMDs + 1] = {NAME = 'unbubblechat / nobubblechat', DESC = 'Disables the bubblechat command'}
CMDs[#CMDs + 1] = {NAME = 'safechat', DESC = 'Enables safe chat'}
CMDs[#CMDs + 1] = {NAME = 'nosafechat / disablesafechat', DESC = 'Disables safechat'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'esp', DESC = 'View all players and their status'}
CMDs[#CMDs + 1] = {NAME = 'noesp / unesp', DESC = 'Removes esp'}
CMDs[#CMDs + 1] = {NAME = 'esptransparency [number]', DESC = 'Changes the transparency of esp related commands'}
CMDs[#CMDs + 1] = {NAME = 'partesp [part name]', DESC = 'Highlights a part'}
CMDs[#CMDs + 1] = {NAME = 'unpartesp / nopartesp [part name]', DESC = 'removes partesp'}
CMDs[#CMDs + 1] = {NAME = 'chams', DESC = 'ESP but without text in the way'}
CMDs[#CMDs + 1] = {NAME = 'nochams / unchams', DESC = 'Removes chams'}
CMDs[#CMDs + 1] = {NAME = 'locate [player]', DESC = 'View a single player and their status'}
CMDs[#CMDs + 1] = {NAME = 'unlocate / nolocate [player]', DESC = 'Removes locate'}
CMDs[#CMDs + 1] = {NAME = 'xray', DESC = 'Makes all parts in workspace transparent'}
CMDs[#CMDs + 1] = {NAME = 'unxray / noxray', DESC = 'Restores transparency'}
CMDs[#CMDs + 1] = {NAME = 'loopxray', DESC = 'Makes all parts in workspace transparent but looped'}
CMDs[#CMDs + 1] = {NAME = 'unloopunxray', DESC = 'Unloops xray'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'spectate / view [player]', DESC = 'View a player'}
CMDs[#CMDs + 1] = {NAME = 'viewpart / viewp [part name]', DESC = 'View a part'}
CMDs[#CMDs + 1] = {NAME = 'unspectate / unview', DESC = 'Stops viewing player'}
CMDs[#CMDs + 1] = {NAME = 'freecam / fc', DESC = 'Allows you to freely move camera around the game'}
CMDs[#CMDs + 1] = {NAME = 'freecampos / fcpos [X Y Z]', DESC = 'Moves / opens freecam in a certain position'}
CMDs[#CMDs + 1] = {NAME = 'freecamwaypoint / fcwp [name]', DESC = 'Moves / opens freecam to a waypoint'}
CMDs[#CMDs + 1] = {NAME = 'freecamgoto / fcgoto / fctp [player]', DESC = 'Moves / opens freecam to a player'}
CMDs[#CMDs + 1] = {NAME = 'unfreecam / unfc', DESC = 'Disables freecam'}
CMDs[#CMDs + 1] = {NAME = 'freecamspeed / fcspeed [num]', DESC = 'Adjusts freecam speed (default is 1)'}
CMDs[#CMDs + 1] = {NAME = 'notifyfreecamposition / notifyfcpos', DESC = 'Noitifies you your freecam coordinates'}
CMDs[#CMDs + 1] = {NAME = 'copyfreecamposition / copyfcpos', DESC = 'Copies your freecam coordinates to your clipboard'}
CMDs[#CMDs + 1] = {NAME = 'gotocamera / gotocam', DESC = 'Teleports you to the location of your camera'}
CMDs[#CMDs + 1] = {NAME = 'tweengotocam / tgotocam', DESC = 'Tweens you to the location of your camera'}
CMDs[#CMDs + 1] = {NAME = 'firstp', DESC = 'Forces camera to go into first person'}
CMDs[#CMDs + 1] = {NAME = 'thirdp', DESC = 'Allows camera to go into third person'}
CMDs[#CMDs + 1] = {NAME = 'noclipcam / nccam', DESC = 'Allows camera to go through objects like walls'}
CMDs[#CMDs + 1] = {NAME = 'maxzoom [num]', DESC = 'Maximum camera zoom'}
CMDs[#CMDs + 1] = {NAME = 'minzoom [num]', DESC = 'Minimum camera zoom'}
CMDs[#CMDs + 1] = {NAME = 'camdistance [num]', DESC = 'Changes camera distance from your player'}
CMDs[#CMDs + 1] = {NAME = 'fov [num]', DESC = 'Adjusts field of view (default is 70)'}
CMDs[#CMDs + 1] = {NAME = 'fixcam / restorecam', DESC = 'Fixes camera'}
CMDs[#CMDs + 1] = {NAME = 'enableshiftlock / enablesl', DESC = 'Enables the shift lock option'}
CMDs[#CMDs + 1] = {NAME = 'lookat [player]', DESC = 'Moves your camera view to a player'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'btools (CLIENT)', DESC = 'Gives you building tools (DOES NOT REPLICATE)'}
CMDs[#CMDs + 1] = {NAME = 'f3x (CLIENT)', DESC = 'Gives you F3X building tools (DOES NOT REPLICATE)'}
CMDs[#CMDs + 1] = {NAME = 'partname / partpath', DESC = 'Allows you to click a part to see its path & name'}
CMDs[#CMDs + 1] = {NAME = 'delete [instance name] (CLIENT)', DESC = 'Removes any part with a certain name from the workspace (DOES NOT REPLICATE)'}
CMDs[#CMDs + 1] = {NAME = 'deleteclass / dc [class name] (CLIENT)', DESC = 'Removes any part with a certain classname from the workspace (DOES NOT REPLICATE)'}
CMDs[#CMDs + 1] = {NAME = 'lockworkspace / lockws', DESC = 'Locks the whole workspace'}
CMDs[#CMDs + 1] = {NAME = 'unlockworkspace / unlockws', DESC = 'Unlocks the whole workspace'}
CMDs[#CMDs + 1] = {NAME = 'invisibleparts / invisparts (CLIENT)', DESC = 'Shows invisible parts'}
CMDs[#CMDs + 1] = {NAME = 'uninvisibleparts / uninvisparts (CLIENT)', DESC = 'Makes parts affected by invisparts return to normal'}
CMDs[#CMDs + 1] = {NAME = 'deleteinvisparts / dip (CLIENT)', DESC = 'Deletes invisible parts'}
CMDs[#CMDs + 1] = {NAME = 'gotopart [part name]', DESC = 'Moves your character to a part or multiple parts'}
CMDs[#CMDs + 1] = {NAME = 'tweengotopart / tgotopart [part name]', DESC = 'Tweens your character to a part or multiple parts'}
CMDs[#CMDs + 1] = {NAME = 'gotopartclass / gpc [class name]', DESC = 'Moves your character to a part or multiple parts based on classname'}
CMDs[#CMDs + 1] = {NAME = 'tweengotopartclass / tgpc [class name]', DESC = 'Tweens your character to a part or multiple parts based on classname'}
CMDs[#CMDs + 1] = {NAME = 'gotomodel [part name]', DESC = 'Moves your character to a model or multiple models'}
CMDs[#CMDs + 1] = {NAME = 'tweengotomodel / tgotomodel [part name]', DESC = 'Tweens your character to a model or multiple models'}
CMDs[#CMDs + 1] = {NAME = 'gotopartdelay / gotomodeldelay [num]', DESC = 'Adjusts how quickly you teleport to each part (default is 0.1)'}
CMDs[#CMDs + 1] = {NAME = 'bringpart [part name] (CLIENT)', DESC = 'Moves a part or multiple parts to your character'}
CMDs[#CMDs + 1] = {NAME = 'bringpartclass / bpc [class name] (CLIENT)', DESC = 'Moves a part or multiple parts to your character based on classname'}
CMDs[#CMDs + 1] = {NAME = 'noclickdetectorlimits / nocdlimits', DESC = 'Sets all click detectors MaxActivationDistance to math.huge'}
CMDs[#CMDs + 1] = {NAME = 'fireclickdetectors / firecd [name]', DESC = 'Uses all click detectors in a game or uses the optional name'}
CMDs[#CMDs + 1] = {NAME = 'firetouchinterests / touchinterests [name]', DESC = 'Uses all touchinterests in a game or uses the optional name'}
CMDs[#CMDs + 1] = {NAME = 'noproximitypromptlimits / nopplimits', DESC = 'Sets all proximity prompts MaxActivationDistance to math.huge'}
CMDs[#CMDs + 1] = {NAME = 'fireproximityprompts / firepp [name]', DESC = 'Uses all proximity prompts in a game or uses the optional name'}
CMDs[#CMDs + 1] = {NAME = 'instantproximityprompts / instantpp', DESC = 'Disable the cooldown for proximity prompts'}
CMDs[#CMDs + 1] = {NAME = 'uninstantproximityprompts / uninstantpp', DESC = 'Undo the cooldown removal'}
CMDs[#CMDs + 1] = {NAME = 'tpunanchored / tpua [player]', DESC = 'Teleports unanchored parts to a player'}
CMDs[#CMDs + 1] = {NAME = 'animsunanchored / freezeua', DESC = 'Freezes unanchored parts'}
CMDs[#CMDs + 1] = {NAME = 'thawunanchored / thawua / unfreezeua', DESC = 'Thaws unanchored parts'}
CMDs[#CMDs + 1] = {NAME = 'removeterrain / rterrain / noterrain', DESC = 'Removes all terrain'}
CMDs[#CMDs + 1] = {NAME = 'clearnilinstances / nonilinstances / cni', DESC = 'Removes nil instances'}
CMDs[#CMDs + 1] = {NAME = 'destroyheight / dh [num]', DESC = 'Sets FallenPartsDestroyHeight'}
CMDs[#CMDs + 1] = {NAME = 'fakeout', DESC = 'Tp to the void and then back (useful to kill people attached to you)'}
CMDs[#CMDs + 1] = {NAME = 'antivoid', DESC = 'Prevents you from falling into the void by launching you upwards'}
CMDs[#CMDs + 1] = {NAME = 'unantivoid / noantivoid', DESC = 'Disables antivoid'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'fullbright / fb (CLIENT)', DESC = 'Makes the map brighter / more visible'}
CMDs[#CMDs + 1] = {NAME = 'loopfullbright / loopfb (CLIENT)', DESC = 'Makes the map brighter / more visible but looped'}
CMDs[#CMDs + 1] = {NAME = 'unloopfullbright / unloopfb', DESC = 'Unloops fullbright'}
CMDs[#CMDs + 1] = {NAME = 'ambient [num] [num] [num] (CLIENT)', DESC = 'Changes ambient'}
CMDs[#CMDs + 1] = {NAME = 'day (CLIENT)', DESC = 'Changes the time to day for the client'}
CMDs[#CMDs + 1] = {NAME = 'night (CLIENT)', DESC = 'Changes the time to night for the client'}
CMDs[#CMDs + 1] = {NAME = 'nofog (CLIENT)', DESC = 'Removes fog'}
CMDs[#CMDs + 1] = {NAME = 'brightness [num] (CLIENT)', DESC = 'Changes the brightness lighting property'}
CMDs[#CMDs + 1] = {NAME = 'globalshadows / gshadows (CLIENT)', DESC = 'Enables global shadows'}
CMDs[#CMDs + 1] = {NAME = 'noglobalshadows / nogshadows (CLIENT)', DESC = 'Disables global shadows'}
CMDs[#CMDs + 1] = {NAME = 'restorelighting / rlighting', DESC = 'Restores Lighting properties'}
CMDs[#CMDs + 1] = {NAME = 'light [radius] [brightness] (CLIENT)', DESC = 'Gives your player dynamic light'}
CMDs[#CMDs + 1] = {NAME = 'nolight / unlight', DESC = 'Removes dynamic light from your player'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'inspect / examine [player]', DESC = 'Opens InspectMenu for a certain player'}
CMDs[#CMDs + 1] = {NAME = 'age [player]', DESC = 'Tells you the age of a player'}
CMDs[#CMDs + 1] = {NAME = 'chatage [player]', DESC = 'Chats the age of a player'}
CMDs[#CMDs + 1] = {NAME = 'joindate / jd [player]', DESC = 'Tells you the date the player joined Roblox'}
CMDs[#CMDs + 1] = {NAME = 'chatjoindate / cjd [player]', DESC = 'Chats the date the player joined Roblox'}
CMDs[#CMDs + 1] = {NAME = 'copyname / copyuser [player]', DESC = 'Copies a players full username to your clipboard'}
CMDs[#CMDs + 1] = {NAME = 'userid / id [player]', DESC = 'Notifies a players user ID'}
CMDs[#CMDs + 1] = {NAME = 'copyuserid / copyid [player]', DESC = 'Copies a players user ID to your clipboard'}
CMDs[#CMDs + 1] = {NAME = 'appearanceid / aid [player]', DESC = 'Notifies a players appearance ID'}
CMDs[#CMDs + 1] = {NAME = 'copyappearanceid / caid [player]', DESC = 'Copies a players appearance ID to your clipboard'}
CMDs[#CMDs + 1] = {NAME = 'bang [player] [speed]', DESC = 'owo'}
CMDs[#CMDs + 1] = {NAME = 'unbang', DESC = 'uwu'}
CMDs[#CMDs + 1] = {NAME = 'carpet [player]', DESC = 'Be someones carpet'}
CMDs[#CMDs + 1] = {NAME = 'uncarpet', DESC = 'Undoes carpet'}
CMDs[#CMDs + 1] = {NAME = 'friend [player]', DESC = 'Sends a friend request to certain players'}
CMDs[#CMDs + 1] = {NAME = 'unfriend [player]', DESC = 'Unfriends certain players'}
CMDs[#CMDs + 1] = {NAME = 'headsit [player]', DESC = 'Sit on a players head'}
CMDs[#CMDs + 1] = {NAME = 'walkto / follow [player]', DESC = 'Follow a player'}
CMDs[#CMDs + 1] = {NAME = 'pathfindwalkto / pathfindfollow [player]', DESC = 'Follow a player using pathfinding'}
CMDs[#CMDs + 1] = {NAME = 'pathfindwalktowaypoint / pathfindwalktowp [waypoint]', DESC = 'Walk to a waypoint using pathfinding'}
CMDs[#CMDs + 1] = {NAME = 'unwalkto / unfollow', DESC = 'Stops following a player'}
CMDs[#CMDs + 1] = {NAME = 'orbit [player] [speed] [distance]', DESC = 'Makes your character orbit around a player with an optional speed and an optional distance'}
CMDs[#CMDs + 1] = {NAME = 'unorbit', DESC = 'Disables orbit'}
CMDs[#CMDs + 1] = {NAME = 'stareat / stare [player]', DESC = 'Stare / look at a player'}
CMDs[#CMDs + 1] = {NAME = 'unstareat / unstare [player]', DESC = 'Disables stareat'}
CMDs[#CMDs + 1] = {NAME = 'rolewatch [group id] [role name]', DESC = 'Notify if someone from a watched group joins the server'}
CMDs[#CMDs + 1] = {NAME = 'rolewatchstop / unrolewatch', DESC = 'Disable Rolewatch'}
CMDs[#CMDs + 1] = {NAME = 'rolewatchleave', DESC = 'Toggle if you should leave the game if someone from a watched group joins the server'}
CMDs[#CMDs + 1] = {NAME = 'staffwatch', DESC = 'Notify if a staff member of the game joins the server'}
CMDs[#CMDs + 1] = {NAME = 'unstaffwatch', DESC = 'Disable Staffwatch'}
CMDs[#CMDs + 1] = {NAME = 'attach [player] (TOOL)', DESC = 'Attaches you to a player (YOU NEED A TOOL)'}
CMDs[#CMDs + 1] = {NAME = 'kill [player] (TOOL)', DESC = 'Kills a player (YOU NEED A TOOL)'}
CMDs[#CMDs + 1] = {NAME = 'fastkill [player] (TOOL)', DESC = 'Kills a player (less reliable) (YOU NEED A TOOL)'}
CMDs[#CMDs + 1] = {NAME = 'handlekill / hkill [player] (TOOL)', DESC = 'Kills a player using tool damage (YOU NEED A TOOL)'}
CMDs[#CMDs + 1] = {NAME = 'bring [player] (TOOL)', DESC = 'Brings a player (YOU NEED A TOOL)'}
CMDs[#CMDs + 1] = {NAME = 'fastbring [player] (TOOL)', DESC = 'Brings a player (less reliable) (YOU NEED A TOOL)'}
CMDs[#CMDs + 1] = {NAME = 'teleport / tp [player] [player] (TOOL)', DESC = 'Teleports a player to another player (YOU NEED A TOOL)'}
CMDs[#CMDs + 1] = {NAME = 'fastteleport / fasttp [player] [player] (TOOL)', DESC = 'Teleports a player to another player (less reliable) (YOU NEED A TOOL)'}
CMDs[#CMDs + 1] = {NAME = 'fling', DESC = 'Flings anyone you touch'}
CMDs[#CMDs + 1] = {NAME = 'unfling', DESC = 'Disables the fling command'}
CMDs[#CMDs + 1] = {NAME = 'flyfling', DESC = 'Basically the invisfling command but not invisible'}
CMDs[#CMDs + 1] = {NAME = 'unflyfling', DESC = 'Disables the flyfling command'}
CMDs[#CMDs + 1] = {NAME = 'walkfling', DESC = 'Basically fling but no spinning'}
CMDs[#CMDs + 1] = {NAME = 'unwalkfling / nowalkfling', DESC = 'Disables walkfling'}
CMDs[#CMDs + 1] = {NAME = 'invisfling', DESC = 'Enables invisible fling'}
CMDs[#CMDs + 1] = {NAME = 'antifling', DESC = 'Disables player collisions to prevent you from being flung'}
CMDs[#CMDs + 1] = {NAME = 'unantifling', DESC = 'Disables antifling'}
CMDs[#CMDs + 1] = {NAME = 'loopoof', DESC = 'Loops everyones character sounds (everyone can hear)'}
CMDs[#CMDs + 1] = {NAME = 'unloopoof', DESC = 'Stops the oof chaos'}
CMDs[#CMDs + 1] = {NAME = 'muteboombox [player]', DESC = 'Mutes someones boombox'}
CMDs[#CMDs + 1] = {NAME = 'unmuteboombox [player]', DESC = 'Unmutes someones boombox'}
CMDs[#CMDs + 1] = {NAME = 'hitbox [player] [size]', DESC = 'Expands the hitbox for players HumanoidRootPart (default is 1)'}
CMDs[#CMDs + 1] = {NAME = 'headsize [player] [size]', DESC = 'Expands the head size for players Head (default is 1)'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'reset', DESC = 'Resets your character normally'}
CMDs[#CMDs + 1] = {NAME = 'respawn', DESC = 'Respawns you'}
CMDs[#CMDs + 1] = {NAME = 'refresh / re', DESC = 'Respawns and brings you back to the same position'}
CMDs[#CMDs + 1] = {NAME = 'god', DESC = 'Makes your character difficult to kill in most games'}
CMDs[#CMDs + 1] = {NAME = 'invisible / invis', DESC = 'Makes you invisible to other players'}
CMDs[#CMDs + 1] = {NAME = 'visible / vis', DESC = 'Makes you visible to other players'}
CMDs[#CMDs + 1] = {NAME = 'toolinvisible / toolinvis / tinvis', DESC = 'Makes you invisible to other players and able to use tools'}
CMDs[#CMDs + 1] = {NAME = 'speed / ws / walkspeed [num]', DESC = 'Change your walkspeed'}
CMDs[#CMDs + 1] = {NAME = 'spoofspeed / spoofws [num]', DESC = 'Spoofs your WalkSpeed on the Client'}
CMDs[#CMDs + 1] = {NAME = 'loopspeed / loopws [num]', DESC = 'Loops your walkspeed'}
CMDs[#CMDs + 1] = {NAME = 'unloopspeed / unloopws', DESC = 'Turns off loopspeed'}
CMDs[#CMDs + 1] = {NAME = 'hipheight / hheight [num]', DESC = 'Adjusts hip height'}
CMDs[#CMDs + 1] = {NAME = 'jumppower / jpower / jp [num]', DESC = 'Change a players jump height'}
CMDs[#CMDs + 1] = {NAME = 'spoofjumppower / spoofjp [num]', DESC = 'Spoofs your JumpPower on the Client'}
CMDs[#CMDs + 1] = {NAME = 'loopjumppower / loopjp [num]', DESC = 'Loops your jump height'}
CMDs[#CMDs + 1] = {NAME = 'unloopjumppower / unloopjp', DESC = 'Turns off loopjumppower'}
CMDs[#CMDs + 1] = {NAME = 'maxslopeangle / msa [num]', DESC = 'Adjusts MaxSlopeAngle'}
CMDs[#CMDs + 1] = {NAME = 'gravity / grav [num] (CLIENT)', DESC = 'Change your gravity'}
CMDs[#CMDs + 1] = {NAME = 'sit', DESC = 'Makes your character sit'}
CMDs[#CMDs + 1] = {NAME = 'lay / laydown', DESC = 'Makes your character lay down'}
CMDs[#CMDs + 1] = {NAME = 'sitwalk', DESC = 'Makes your character sit while still being able to walk'}
CMDs[#CMDs + 1] = {NAME = 'nosit', DESC = 'Prevents your character from sitting'}
CMDs[#CMDs + 1] = {NAME = 'unnosit', DESC = 'Disables nosit'}
CMDs[#CMDs + 1] = {NAME = 'jump', DESC = 'Makes your character jump'}
CMDs[#CMDs + 1] = {NAME = 'infinitejump / infjump', DESC = 'Allows you to jump before hitting the ground'}
CMDs[#CMDs + 1] = {NAME = 'uninfinitejump / uninfjump', DESC = 'Disables infjump'}
CMDs[#CMDs + 1] = {NAME = 'flyjump', DESC = 'Allows you to hold space to fly up'}
CMDs[#CMDs + 1] = {NAME = 'unflyjump', DESC = 'Disables flyjump'}
CMDs[#CMDs + 1] = {NAME = 'autojump / ajump', DESC = 'Automatically jumps when you run into an object'}
CMDs[#CMDs + 1] = {NAME = 'unautojump / unajump', DESC = 'Disables autojump'}
CMDs[#CMDs + 1] = {NAME = 'edgejump / ejump', DESC = 'Automatically jumps when you get to the edge of an object'}
CMDs[#CMDs + 1] = {NAME = 'unedgejump / unejump', DESC = 'Disables edgejump'}
CMDs[#CMDs + 1] = {NAME = 'platformstand / stun', DESC = 'Enables PlatformStand'}
CMDs[#CMDs + 1] = {NAME = 'unplatformstand / unstun', DESC = 'Disables PlatformStand'}
CMDs[#CMDs + 1] = {NAME = 'norotate / noautorotate', DESC = 'Disables AutoRotate'}
CMDs[#CMDs + 1] = {NAME = 'unnorotate / autorotate', DESC = 'Enables AutoRotate'}
CMDs[#CMDs + 1] = {NAME = 'enablestate [StateType]', DESC = 'Enables a humanoid state type'}
CMDs[#CMDs + 1] = {NAME = 'disablestate [StateType]', DESC = 'Disables a humanoid state type'}
CMDs[#CMDs + 1] = {NAME = 'team [team name] (CLIENT)', DESC = 'Changes your team. Sometimes fools localscripts.'}
CMDs[#CMDs + 1] = {NAME = 'nobillboardgui / nobgui / noname', DESC = 'Removes billboard and surface guis from your players (i.e. name guis at cafes)'}
CMDs[#CMDs + 1] = {NAME = 'loopnobgui / loopnoname', DESC = 'Loop removes billboard and surface guis from your players (i.e. name guis at cafes)'}
CMDs[#CMDs + 1] = {NAME = 'unloopnobgui / unloopnoname', DESC = 'Disables loopnobgui'}
CMDs[#CMDs + 1] = {NAME = 'noarms', DESC = 'Removes your arms'}
CMDs[#CMDs + 1] = {NAME = 'nolegs', DESC = 'Removes your legs'}
CMDs[#CMDs + 1] = {NAME = 'nolimbs', DESC = 'Removes your limbs'}
CMDs[#CMDs + 1] = {NAME = 'naked (CLIENT)', DESC = 'Removes your clothing'}
CMDs[#CMDs + 1] = {NAME = 'noface / removeface', DESC = 'Removes your face'}
CMDs[#CMDs + 1] = {NAME = 'blockhead', DESC = 'Turns your head into a block'}
CMDs[#CMDs + 1] = {NAME = 'blockhats', DESC = 'Turns your hats into blocks'}
CMDs[#CMDs + 1] = {NAME = 'blocktool', DESC = 'Turns the currently selected tool into a block'}
CMDs[#CMDs + 1] = {NAME = 'creeper', DESC = 'Makes you look like a creeper'}
CMDs[#CMDs + 1] = {NAME = 'drophats', DESC = 'Drops your hats'}
CMDs[#CMDs + 1] = {NAME = 'nohats / deletehats / rhats', DESC = 'Deletes your hats'}
CMDs[#CMDs + 1] = {NAME = 'hatspin / spinhats', DESC = 'Spins your characters accessories'}
CMDs[#CMDs + 1] = {NAME = 'unhatspin / unspinhats', DESC = 'Undoes spinhats'}
CMDs[#CMDs + 1] = {NAME = 'clearhats / cleanhats', DESC = 'Clears hats in the workspace'}
CMDs[#CMDs + 1] = {NAME = 'chardelete / cd [instance name]', DESC = 'Removes any part with a certain name from your character'}
CMDs[#CMDs + 1] = {NAME = 'chardeleteclass / cdc [class name]', DESC = 'Removes any part with a certain classname from your character'}
CMDs[#CMDs + 1] = {NAME = 'deletevelocity / dv / removeforces', DESC = 'Removes any velocity / force instances in your character'}
CMDs[#CMDs + 1] = {NAME = 'weaken [num]', DESC = 'Makes your character less dense'}
CMDs[#CMDs + 1] = {NAME = 'unweaken', DESC = 'Sets your characters CustomPhysicalProperties to default'}
CMDs[#CMDs + 1] = {NAME = 'strengthen [num]', DESC = 'Makes your character more dense (CustomPhysicalProperties)'}
CMDs[#CMDs + 1] = {NAME = 'unstrengthen', DESC = 'Sets your characters CustomPhysicalProperties to default'}
CMDs[#CMDs + 1] = {NAME = 'breakvelocity', DESC = 'Sets your characters velocity to 0'}
CMDs[#CMDs + 1] = {NAME = 'spin [speed]', DESC = 'Spins your character'}
CMDs[#CMDs + 1] = {NAME = 'unspin', DESC = 'Disables spin'}
CMDs[#CMDs + 1] = {NAME = 'split', DESC = 'Splits your character in half'}
CMDs[#CMDs + 1] = {NAME = 'nilchar', DESC = 'Sets your characters parent to nil'}
CMDs[#CMDs + 1] = {NAME = 'unnilchar / nonilchar', DESC = 'Sets your characters parent to workspace'}
CMDs[#CMDs + 1] = {NAME = 'noroot / removeroot / rroot', DESC = 'Removes your characters HumanoidRootPart'}
CMDs[#CMDs + 1] = {NAME = 'replaceroot', DESC = 'Replaces your characters HumanoidRootPart'}
CMDs[#CMDs + 1] = {NAME = 'clearcharappearance / clearchar / clrchar', DESC = 'Removes all accessory, shirt, pants, charactermesh, and bodycolors'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'animation / anim [ID] [speed]', DESC = 'Makes your character perform an animation (must be by roblox to replicate)'}
CMDs[#CMDs + 1] = {NAME = 'dance', DESC = 'Makes you  d a n c e'}
CMDs[#CMDs + 1] = {NAME = 'undance', DESC = 'Stops dance animations'}
CMDs[#CMDs + 1] = {NAME = 'spasm', DESC = 'Makes you  c r a z y'}
CMDs[#CMDs + 1] = {NAME = 'unspasm', DESC = 'Stops spasm'}
CMDs[#CMDs + 1] = {NAME = 'headthrow', DESC = 'Simply makes you throw your head'}
CMDs[#CMDs + 1] = {NAME = 'noanim', DESC = 'Disables your animations'}
CMDs[#CMDs + 1] = {NAME = 'reanim', DESC = 'Restores your animations'}
CMDs[#CMDs + 1] = {NAME = 'animspeed [num]', DESC = 'Changes the speed of your current animation'}
CMDs[#CMDs + 1] = {NAME = 'copyanimation / copyanim / copyemote [player]', DESC = 'Copies someone elses animation'}
CMDs[#CMDs + 1] = {NAME = 'copyanimationid / copyanimid / copyemoteid [player]', DESC = 'Copies your animation id or someone elses to your clipboard'}
CMDs[#CMDs + 1] = {NAME = 'loopanimation / loopanim', DESC = 'Loops your current animation'}
CMDs[#CMDs + 1] = {NAME = 'stopanimations / stopanims', DESC = 'Stops running animations'}
CMDs[#CMDs + 1] = {NAME = 'refreshanimations / refreshanims', DESC = 'Refreshes animations'}
CMDs[#CMDs + 1] = {NAME = 'allowcustomanim / allowcustomanimations', DESC = 'Lets you use custom animation packs instead'}
CMDs[#CMDs + 1] = {NAME = 'unallowcustomanim / unallowcustomanimations', DESC = 'Doesn\'t let you use custom animation packs instead'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'autoclick [click delay] [release delay]', DESC = 'Automatically clicks your mouse with a set delay'}
CMDs[#CMDs + 1] = {NAME = 'unautoclick / noautoclick', DESC = 'Turns off autoclick'}
CMDs[#CMDs + 1] = {NAME = 'autokeypress [key] [down delay] [up delay]', DESC = 'Automatically presses a key with a set delay'}
CMDs[#CMDs + 1] = {NAME = 'unautokeypress', DESC = 'Stops autokeypress'}
CMDs[#CMDs + 1] = {NAME = 'hovername', DESC = 'Shows a players username when your mouse is hovered over them'}
CMDs[#CMDs + 1] = {NAME = 'unhovername / nohovername', DESC = 'Turns off hovername'}
CMDs[#CMDs + 1] = {NAME = 'mousesensitivity / ms [0-10]', DESC = 'Sets your mouse sensitivity (affects first person and right click drag) (default is 1)'}
CMDs[#CMDs + 1] = {NAME = 'clickdelete', DESC = 'Go to settings>Keybinds>Add for clicktp'}
CMDs[#CMDs + 1] = {NAME = 'clickteleport', DESC = 'Go to settings>Keybinds>Add for click tp'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'tools', DESC = 'Copies tools from ReplicatedStorage and Lighting'}
CMDs[#CMDs + 1] = {NAME = 'notools / removetools / deletetools', DESC = 'Removes tools from character and backpack'}
CMDs[#CMDs + 1] = {NAME = 'deleteselectedtool / dst', DESC = 'Removes any currently selected tools'}
CMDs[#CMDs + 1] = {NAME = 'grabtools', DESC = 'Automatically get tools that are dropped'}
CMDs[#CMDs + 1] = {NAME = 'ungrabtools / nograbtools', DESC = 'Disables grabtools'}
CMDs[#CMDs + 1] = {NAME = 'copytools [player] (CLIENT)', DESC = 'Copies a players tools'}
CMDs[#CMDs + 1] = {NAME = 'dupetools / clonetools [num]', DESC = 'Duplicates your inventory tools a set ammount of times'}
CMDs[#CMDs + 1] = {NAME = 'givetool / givetools', DESC = 'Gives all the tools you\'re holding to [player] using the attach method.'}
CMDs[#CMDs + 1] = {NAME = 'droptools', DESC = 'Drops your tools'}
CMDs[#CMDs + 1] = {NAME = 'droppabletools', DESC = 'Makes your tools droppable'}
CMDs[#CMDs + 1] = {NAME = 'equiptools', DESC = 'Equips every tool in your inventory at once'}
CMDs[#CMDs + 1] = {NAME = 'unequiptools', DESC = 'Unequips every tool you are currently holding at once'}
CMDs[#CMDs + 1] = {NAME = 'removespecifictool [name]', DESC = 'Automatically remove a specific tool from your inventory'}
CMDs[#CMDs + 1] = {NAME = 'unremovespecifictool [name]', DESC = 'Stops removing a specific tool from your inventory'}
CMDs[#CMDs + 1] = {NAME = 'clearremovespecifictool', DESC = 'Stop removing all specific tools from your inventory'}
CMDs[#CMDs + 1] = {NAME = 'reach [num]', DESC = 'Increases the hitbox of your held tool'}
CMDs[#CMDs + 1] = {NAME = 'boxreach [num]', DESC = 'Increases the hitbox of your held tool in a box shape'}
CMDs[#CMDs + 1] = {NAME = 'unreach / noreach', DESC = 'Turns off reach'}
CMDs[#CMDs + 1] = {NAME = 'grippos [X Y Z]', DESC = 'Changes your current tools grip position'}
CMDs[#CMDs + 1] = {NAME = 'usetools [ammount] [delay]', DESC = 'Activates all tools in your backpack at the same time'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'addalias [cmd] [alias]', DESC = 'Adds an alias to a command'}
CMDs[#CMDs + 1] = {NAME = 'removealias [alias]', DESC = 'Removes a custom alias'}
CMDs[#CMDs + 1] = {NAME = 'clraliases', DESC = 'Removes all custom aliases'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'addplugin / plugin [name]', DESC = 'Add a plugin via command'}
CMDs[#CMDs + 1] = {NAME = 'removeplugin / deleteplugin [name]', DESC = 'Remove a plugin via command'}
CMDs[#CMDs + 1] = {NAME = 'reloadplugin [name]', DESC = 'Reloads a plugin'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'breakloops / break (cmd loops)', DESC = 'Stops any cmd loops (;100^1^cmd)'}
CMDs[#CMDs + 1] = {NAME = 'removecmd / deletecmd', DESC = 'Removes a command until the admin is reloaded'}
CMDs[#CMDs + 1] = {NAME = 'tpwalk / teleportwalk [num]', DESC = 'Teleports you to your move direction'}
CMDs[#CMDs + 1] = {NAME = 'untpwalk / unteleportwalk', DESC = 'Undoes tpwalk / teleportwalk'}
CMDs[#CMDs + 1] = {NAME = 'notifyping / ping', DESC = 'Notify yourself your ping'}
CMDs[#CMDs + 1] = {NAME = 'trip', DESC = 'Makes your character fall over'}
CMDs[#CMDs + 1] = {NAME = 'norender', DESC = 'Disable 3d Rendering to decrease the amount of CPU the client uses'}
CMDs[#CMDs + 1] = {NAME = 'render', DESC = 'Enable 3d Rendering'}
CMDs[#CMDs + 1] = {NAME = 'use2022materials / 2022materials', DESC = 'Enables 2022 material textures'}
CMDs[#CMDs + 1] = {NAME = 'unuse2022materials / un2022materials', DESC = 'Disables 2022 material textures'}
CMDs[#CMDs + 1] = {NAME = 'promptr6', DESC = 'Prompts the game to switch your rig type to R6'}
CMDs[#CMDs + 1] = {NAME = 'promptr15', DESC = 'Prompts the game to switch your rig type to R15'}
CMDs[#CMDs + 1] = {NAME = 'wallwalk / walkonwalls', DESC = 'Walk on walls'}
CMDs[#CMDs + 1] = {NAME = 'removeads / adblock', DESC = 'Automatically removes ad billboards'}
wait()

for i = 1, #CMDs do
	local newcmd = Example:Clone()
	newcmd.Parent = CMDsF
	newcmd.Visible = false
	newcmd.Text = CMDs[i].NAME
	newcmd.Name = ""CMD""
	table.insert(text1, newcmd)
	if CMDs[i].DESC ~= """" then
		newcmd:SetAttribute(""Title"", CMDs[i].NAME)
		newcmd:SetAttribute(""Desc"", CMDs[i].DESC)
		newcmd.MouseButton1Down:Connect(function()
			if not IsOnMobile and newcmd.Visible and newcmd.TextTransparency == 0 then
				local currentText = Cmdbar.Text
				Cmdbar:CaptureFocus()
				autoComplete(newcmd.Text, currentText)
				maximizeHolder()
			end
		end)
	end
end

IndexContents("""", true)

function checkTT()
	local t
	local guisAtPosition = COREGUI:GetGuiObjectsAtPosition(IYMouse.X, IYMouse.Y)

	for _, gui in pairs(guisAtPosition) do
		if gui.Parent == CMDsF then
			t = gui
		end
	end

	if t ~= nil and t:GetAttribute(""Title"") ~= nil then
		local x = IYMouse.X
		local y = IYMouse.Y
		local xP
		local yP
		if IYMouse.X > 200 then
			xP = x - 201
		else
			xP = x + 21
		end
		if IYMouse.Y > (IYMouse.ViewSizeY-96) then
			yP = y - 97
		else
			yP = y
		end
		Tooltip.Position = UDim2.new(0, xP, 0, yP)
		Description.Text = t:GetAttribute(""Desc"")
		if t:GetAttribute(""Title"") ~= nil then
			Title_3.Text = t:GetAttribute(""Title"")
		else
			Title_3.Text = ''
		end
		Tooltip.Visible = true
	else
		Tooltip.Visible = false
	end
end

function FindInTable(tbl,val)
	if tbl == nil then return false end
	for _,v in pairs(tbl) do
		if v == val then return true end
	end 
	return false
end

function GetInTable(Table, Name)
	for i = 1, #Table do
		if Table[i] == Name then
			return i
		end
	end
	return false
end

function respawn(plr)
	if invisRunning then TurnVisible() end
	local char = plr.Character
	if char:FindFirstChildOfClass(""Humanoid"") then char:FindFirstChildOfClass(""Humanoid""):ChangeState(15) end
	char:ClearAllChildren()
	local newChar = Instance.new(""Model"")
	newChar.Parent = workspace
	plr.Character = newChar
	wait()
	plr.Character = char
	newChar:Destroy()
end

local refreshCmd = false
function refresh(plr)
	refreshCmd = true
	local Human = plr.Character and plr.Character:FindFirstChildOfClass(""Humanoid"", true)
	local pos = Human and Human.RootPart and Human.RootPart.CFrame
	local pos1 = workspace.CurrentCamera.CFrame
	respawn(plr)
	task.spawn(function()
		plr.CharacterAdded:Wait():WaitForChild(""Humanoid"").RootPart.CFrame, workspace.CurrentCamera.CFrame = pos, wait() and pos1
		refreshCmd = false
	end)
end

local lastDeath

function onDied()
	task.spawn(function()
		if pcall(function() Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') end) and Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
			Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').Died:Connect(function()
				if getRoot(Players.LocalPlayer.Character) then
					lastDeath = getRoot(Players.LocalPlayer.Character).CFrame
				end
			end)
		else
			wait(2)
			onDied()
		end
	end)
end

Clip = true
spDelay = 0.1
Players.LocalPlayer.CharacterAdded:Connect(function()
	NOFLY()
	Floating = false

	if not Clip then
		execCmd('clip')
	end

	repeat wait() until getRoot(Players.LocalPlayer.Character)

	pcall(function()
		if spawnpoint and not refreshCmd and spawnpos ~= nil then
			wait(spDelay)
			getRoot(Players.LocalPlayer.Character).CFrame = spawnpos
		end
	end)

	onDied()
end)

onDied()

function getstring(begin)
	local start = begin-1
	local AA = '' for i,v in pairs(cargs) do
		if i > start then
			if AA ~= '' then
				AA = AA .. ' ' .. v
			else
				AA = AA .. v
			end
		end
	end
	return AA
end

findCmd=function(cmd_name)
	for i,v in pairs(cmds)do
		if v.NAME:lower()==cmd_name:lower() or FindInTable(v.ALIAS,cmd_name:lower()) then
			return v
		end
	end
	return customAlias[cmd_name:lower()]
end

function splitString(str,delim)
	local broken = {}
	if delim == nil then delim = "","" end
	for w in string.gmatch(str,""[^""..delim..""]+"") do
		table.insert(broken,w)
	end
	return broken
end

cmdHistory = {}
local lastCmds = {}
local historyCount = 0
local split="" ""
local lastBreakTime = 0
function execCmd(cmdStr,speaker,store)
	cmdStr = cmdStr:gsub(""%s+$"","""")
	task.spawn(function()
		local rawCmdStr = cmdStr
		cmdStr = string.gsub(cmdStr,""\\\\"",""%%BackSlash%%"")
		local commandsToRun = splitString(cmdStr,""\\"")
		for i,v in pairs(commandsToRun) do
			v = string.gsub(v,""%%BackSlash%%"",""\\"")
			local x,y,num = v:find(""^(%d+)%^"")
			local cmdDelay = 0
			local infTimes = false
			if num then
				v = v:sub(y+1)
				local x,y,del = v:find(""^([%d%.]+)%^"")
				if del then
					v = v:sub(y+1)
					cmdDelay = tonumber(del) or 0
				end
			else
				local x,y = v:find(""^inf%^"")
				if x then
					infTimes = true
					v = v:sub(y+1)
					local x,y,del = v:find(""^([%d%.]+)%^"")
					if del then
						v = v:sub(y+1)
						del = tonumber(del) or 1
						cmdDelay = (del > 0 and del or 1)
					else
						cmdDelay = 1
					end
				end
			end
			num = tonumber(num or 1)

			if v:sub(1,1) == ""!"" then
				local chunks = splitString(v:sub(2),split)
				if chunks[1] and lastCmds[chunks[1]] then v = lastCmds[chunks[1]] end
			end

			local args = splitString(v,split)
			local cmdName = args[1]
			local cmd = findCmd(cmdName)
			if cmd then
				table.remove(args,1)
				cargs = args
				if not speaker then speaker = Players.LocalPlayer end
				if store then
					if speaker == Players.LocalPlayer then
						if cmdHistory[1] ~= rawCmdStr and rawCmdStr:sub(1,11) ~= 'lastcommand' and rawCmdStr:sub(1,7) ~= 'lastcmd' then
							table.insert(cmdHistory,1,rawCmdStr)
						end
					end
					if #cmdHistory > 30 then table.remove(cmdHistory) end

					lastCmds[cmdName] = v
				end
				local cmdStartTime = tick()
				if infTimes then
					while lastBreakTime < cmdStartTime do
						local success,err = pcall(cmd.FUNC,args, speaker)
						if not success and _G.IY_DEBUG then
							warn(""Command Error:"", cmdName, err)
						end
						wait(cmdDelay)
					end
				else
					for rep = 1,num do
						if lastBreakTime > cmdStartTime then break end
						local success,err = pcall(function()
							cmd.FUNC(args, speaker)
						end)
						if not success and _G.IY_DEBUG then
							warn(""Command Error:"", cmdName, err)
						end
						if cmdDelay ~= 0 then wait(cmdDelay) end
					end
				end
			end
		end
	end)
end	

function addcmd(name,alias,func,plgn)
	cmds[#cmds+1]=
		{
			NAME=name;
			ALIAS=alias or {};
			FUNC=func;
			PLUGIN=plgn;
		}
end

function removecmd(cmd)
	if cmd ~= "" "" then
		for i = #cmds,1,-1 do
			if cmds[i].NAME == cmd or FindInTable(cmds[i].ALIAS,cmd) then
				table.remove(cmds, i)
				for a,c in pairs(CMDsF:GetChildren()) do
					if string.find(c.Text, ""^""..cmd..""$"") or string.find(c.Text, ""^""..cmd.."" "") or string.find(c.Text, "" ""..cmd..""$"") or string.find(c.Text, "" ""..cmd.."" "") then
						c.TextTransparency = 0.7
						c.MouseButton1Click:Connect(function()
							notify(c.Text, ""Command has been disabled by you or a plugin"")
						end)
					end
				end
			end
		end
	end
end

function addbind(cmd,key,iskeyup,toggle)
	if toggle then
		binds[#binds+1]=
			{
				COMMAND=cmd;
				KEY=key;
				ISKEYUP=iskeyup;
				TOGGLE = toggle;
			}
	else
		binds[#binds+1]=
			{
				COMMAND=cmd;
				KEY=key;
				ISKEYUP=iskeyup;
			}
	end
end

function addcmdtext(text,name,desc)
	local newcmd = Example:Clone()
	local tooltipText = tostring(text)
	local tooltipDesc = tostring(desc)
	newcmd.Parent = CMDsF
	newcmd.Visible = false
	newcmd.Text = text
	newcmd.Name = 'PLUGIN_'..name
	table.insert(text1,newcmd)
	if desc and desc ~= '' then
		newcmd:SetAttribute(""Title"", tooltipText)
		newcmd:SetAttribute(""Desc"", tooltipDesc)
		newcmd.MouseButton1Down:Connect(function()
			if newcmd.Visible and newcmd.TextTransparency == 0 then
				Cmdbar:CaptureFocus()
				autoComplete(newcmd.Text)
				maximizeHolder()
			end
		end)
	end
end

local WorldToScreen = function(Object)
	local ObjectVector = workspace.CurrentCamera:WorldToScreenPoint(Object.Position)
	return Vector2.new(ObjectVector.X, ObjectVector.Y)
end

local MousePositionToVector2 = function()
	return Vector2.new(IYMouse.X, IYMouse.Y)
end

local GetClosestPlayerFromCursor = function()
	local found = nil
	local ClosestDistance = math.huge
	for i, v in pairs(Players:GetPlayers()) do
		if v ~= Players.LocalPlayer and v.Character and v.Character:FindFirstChildOfClass(""Humanoid"") then
			for k, x in pairs(v.Character:GetChildren()) do
				if string.find(x.Name, ""Torso"") then
					local Distance = (WorldToScreen(x) - MousePositionToVector2()).Magnitude
					if Distance < ClosestDistance then
						ClosestDistance = Distance
						found = v
					end
				end
			end
		end
	end
	return found
end

SpecialPlayerCases = {
	[""all""] = function(speaker) return Players:GetPlayers() end,
	[""others""] = function(speaker)
		local plrs = {}
		for i,v in pairs(Players:GetPlayers()) do
			if v ~= speaker then
				table.insert(plrs,v)
			end
		end
		return plrs
	end,
	[""me""] = function(speaker)return {speaker} end,
	[""#(%d+)""] = function(speaker,args,currentList)
		local returns = {}
		local randAmount = tonumber(args[1])
		local players = {unpack(currentList)}
		for i = 1,randAmount do
			if #players == 0 then break end
			local randIndex = math.random(1,#players)
			table.insert(returns,players[randIndex])
			table.remove(players,randIndex)
		end
		return returns
	end,
	[""random""] = function(speaker,args,currentList)
		local players = Players:GetPlayers()
		local localplayer = Players.LocalPlayer
		table.remove(players, table.find(players, localplayer))
		return {players[math.random(1,#players)]}
	end,
	[""%%(.+)""] = function(speaker,args)
		local returns = {}
		local team = args[1]
		for _,plr in pairs(Players:GetPlayers()) do
			if plr.Team and string.sub(string.lower(plr.Team.Name),1,#team) == string.lower(team) then
				table.insert(returns,plr)
			end
		end
		return returns
	end,
	[""allies""] = function(speaker)
		local returns = {}
		local team = speaker.Team
		for _,plr in pairs(Players:GetPlayers()) do
			if plr.Team == team then
				table.insert(returns,plr)
			end
		end
		return returns
	end,
	[""enemies""] = function(speaker)
		local returns = {}
		local team = speaker.Team
		for _,plr in pairs(Players:GetPlayers()) do
			if plr.Team ~= team then
				table.insert(returns,plr)
			end
		end
		return returns
	end,
	[""team""] = function(speaker)
		local returns = {}
		local team = speaker.Team
		for _,plr in pairs(Players:GetPlayers()) do
			if plr.Team == team then
				table.insert(returns,plr)
			end
		end
		return returns
	end,
	[""nonteam""] = function(speaker)
		local returns = {}
		local team = speaker.Team
		for _,plr in pairs(Players:GetPlayers()) do
			if plr.Team ~= team then
				table.insert(returns,plr)
			end
		end
		return returns
	end,
	[""friends""] = function(speaker,args)
		local returns = {}
		for _,plr in pairs(Players:GetPlayers()) do
			if plr:IsFriendsWith(speaker.UserId) and plr ~= speaker then
				table.insert(returns,plr)
			end
		end
		return returns
	end,
	[""nonfriends""] = function(speaker,args)
		local returns = {}
		for _,plr in pairs(Players:GetPlayers()) do
			if not plr:IsFriendsWith(speaker.UserId) and plr ~= speaker then
				table.insert(returns,plr)
			end
		end
		return returns
	end,
	[""guests""] = function(speaker,args)
		local returns = {}
		for _,plr in pairs(Players:GetPlayers()) do
			if plr.Guest then
				table.insert(returns,plr)
			end
		end
		return returns
	end,
	[""bacons""] = function(speaker,args)
		local returns = {}
		for _,plr in pairs(Players:GetPlayers()) do
			if plr.Character:FindFirstChild('Pal Hair') or plr.Character:FindFirstChild('Kate Hair') then
				table.insert(returns,plr)
			end
		end
		return returns
	end,
	[""age(%d+)""] = function(speaker,args)
		local returns = {}
		local age = tonumber(args[1])
		if not age == nil then return end
		for _,plr in pairs(Players:GetPlayers()) do
			if plr.AccountAge <= age then
				table.insert(returns,plr)
			end
		end
		return returns
	end,
	[""nearest""] = function(speaker,args,currentList)
		local speakerChar = speaker.Character
		if not speakerChar or not getRoot(speakerChar) then return end
		local lowest = math.huge
		local NearestPlayer = nil
		for _,plr in pairs(currentList) do
			if plr ~= speaker and plr.Character then
				local distance = plr:DistanceFromCharacter(getRoot(speakerChar).Position)
				if distance < lowest then
					lowest = distance
					NearestPlayer = {plr}
				end
			end
		end
		return NearestPlayer
	end,
	[""farthest""] = function(speaker,args,currentList)
		local speakerChar = speaker.Character
		if not speakerChar or not getRoot(speakerChar) then return end
		local highest = 0
		local Farthest = nil
		for _,plr in pairs(currentList) do
			if plr ~= speaker and plr.Character then
				local distance = plr:DistanceFromCharacter(getRoot(speakerChar).Position)
				if distance > highest then
					highest = distance
					Farthest = {plr}
				end
			end
		end
		return Farthest
	end,
	[""group(%d+)""] = function(speaker,args)
		local returns = {}
		local groupID = tonumber(args[1])
		for _,plr in pairs(Players:GetPlayers()) do
			if plr:IsInGroup(groupID) then  
				table.insert(returns,plr)
			end
		end
		return returns
	end,
	[""alive""] = function(speaker,args)
		local returns = {}
		for _,plr in pairs(Players:GetPlayers()) do
			if plr.Character and plr.Character:FindFirstChildOfClass(""Humanoid"") and plr.Character:FindFirstChildOfClass(""Humanoid"").Health > 0 then
				table.insert(returns,plr)
			end
		end
		return returns
	end,
	[""dead""] = function(speaker,args)
		local returns = {}
		for _,plr in pairs(Players:GetPlayers()) do
			if (not plr.Character or not plr.Character:FindFirstChildOfClass(""Humanoid"")) or plr.Character:FindFirstChildOfClass(""Humanoid"").Health <= 0 then
				table.insert(returns,plr)
			end
		end
		return returns
	end,
	[""rad(%d+)""] = function(speaker,args)
		local returns = {}
		local radius = tonumber(args[1])
		local speakerChar = speaker.Character
		if not speakerChar or not getRoot(speakerChar) then return end
		for _,plr in pairs(Players:GetPlayers()) do
			if plr.Character and getRoot(plr.Character) then
				local magnitude = (getRoot(plr.Character).Position-getRoot(speakerChar).Position).magnitude
				if magnitude <= radius then table.insert(returns,plr) end
			end
		end
		return returns
	end,
	[""cursor""] = function(speaker)
		local plrs = {}
		local v = GetClosestPlayerFromCursor()
		if v ~= nil then table.insert(plrs, v) end
		return plrs
	end,
	[""npcs""] = function(speaker,args)
		local returns = {}
		for _, v in pairs(workspace:GetDescendants()) do
			if v:IsA(""Model"") and getRoot(v) and v:FindFirstChildWhichIsA(""Humanoid"") and Players:GetPlayerFromCharacter(v) == nil then
				local clone = Instance.new(""Player"")
				clone.Name = v.Name .. "" - "" .. v:FindFirstChildWhichIsA(""Humanoid"").DisplayName
				clone.Character = v
				table.insert(returns, clone)
			end
		end
		return returns
	end,
}

function toTokens(str)
	local tokens = {}
	for op,name in string.gmatch(str,""([+-])([^+-]+)"") do
		table.insert(tokens,{Operator = op,Name = name})
	end
	return tokens
end

function onlyIncludeInTable(tab,matches)
	local matchTable = {}
	local resultTable = {}
	for i,v in pairs(matches) do matchTable[v.Name] = true end
	for i,v in pairs(tab) do if matchTable[v.Name] then table.insert(resultTable,v) end end
	return resultTable
end

function removeTableMatches(tab,matches)
	local matchTable = {}
	local resultTable = {}
	for i,v in pairs(matches) do matchTable[v.Name] = true end
	for i,v in pairs(tab) do if not matchTable[v.Name] then table.insert(resultTable,v) end end
	return resultTable
end

function getPlayersByName(Name)
	local Name,Len,Found = string.lower(Name),#Name,{}
	for _,v in pairs(Players:GetPlayers()) do
		if Name:sub(0,1) == '@' then
			if string.sub(string.lower(v.Name),1,Len-1) == Name:sub(2) then
				table.insert(Found,v)
			end
		else
			if string.sub(string.lower(v.Name),1,Len) == Name or string.sub(string.lower(v.DisplayName),1,Len) == Name then
				table.insert(Found,v)
			end
		end
	end
	return Found
end

function getPlayer(list,speaker)
	if list == nil then return {speaker.Name} end
	local nameList = splitString(list,"","")

	local foundList = {}

	for _,name in pairs(nameList) do
		if string.sub(name,1,1) ~= ""+"" and string.sub(name,1,1) ~= ""-"" then name = ""+""..name end
		local tokens = toTokens(name)
		local initialPlayers = Players:GetPlayers()

		for i,v in pairs(tokens) do
			if v.Operator == ""+"" then
				local tokenContent = v.Name
				local foundCase = false
				for regex,case in pairs(SpecialPlayerCases) do
					local matches = {string.match(tokenContent,""^""..regex..""$"")}
					if #matches > 0 then
						foundCase = true
						initialPlayers = onlyIncludeInTable(initialPlayers,case(speaker,matches,initialPlayers))
					end
				end
				if not foundCase then
					initialPlayers = onlyIncludeInTable(initialPlayers,getPlayersByName(tokenContent))
				end
			else
				local tokenContent = v.Name
				local foundCase = false
				for regex,case in pairs(SpecialPlayerCases) do
					local matches = {string.match(tokenContent,""^""..regex..""$"")}
					if #matches > 0 then
						foundCase = true
						initialPlayers = removeTableMatches(initialPlayers,case(speaker,matches,initialPlayers))
					end
				end
				if not foundCase then
					initialPlayers = removeTableMatches(initialPlayers,getPlayersByName(tokenContent))
				end
			end
		end

		for i,v in pairs(initialPlayers) do table.insert(foundList,v) end
	end

	local foundNames = {}
	for i,v in pairs(foundList) do table.insert(foundNames,v.Name) end

	return foundNames
end

formatUsername = function(player)
    if player.DisplayName ~= player.Name then
        return string.format(""%s (%s)"", player.Name, player.DisplayName)
    end
    return player.Name
end

getprfx=function(strn)
	if strn:sub(1,string.len(prefix))==prefix then return{'cmd',string.len(prefix)+1}
	end return
end

function do_exec(str, plr)
	str = str:gsub('/e ', '')
	local t = getprfx(str)
	if not t then return end
	str = str:sub(t[2])
	if t[1]=='cmd' then
		execCmd(str, plr, true)
		IndexContents('',true,false,true)
		CMDsF.CanvasPosition = canvasPos
	end
end

lastTextBoxString,lastTextBoxCon,lastEnteredString = nil,nil,nil

UserInputService.TextBoxFocused:Connect(function(obj)
	if lastTextBoxCon then lastTextBoxCon:Disconnect() end
	if obj == Cmdbar then lastTextBoxString = nil return end
	lastTextBoxString = obj.Text
	lastTextBoxCon = obj:GetPropertyChangedSignal(""Text""):Connect(function()
		if not (UserInputService:IsKeyDown(Enum.KeyCode.Return) or UserInputService:IsKeyDown(Enum.KeyCode.KeypadEnter)) then
			lastTextBoxString = obj.Text
		end
	end)
end)

UserInputService.InputBegan:Connect(function(input,gameProcessed)
	if gameProcessed then
		if Cmdbar and Cmdbar:IsFocused() then
			if input.KeyCode == Enum.KeyCode.Up then
				historyCount = historyCount + 1
				if historyCount > #cmdHistory then historyCount = #cmdHistory end
				Cmdbar.Text = cmdHistory[historyCount] or """"
				Cmdbar.CursorPosition = 1020
			elseif input.KeyCode == Enum.KeyCode.Down then
				historyCount = historyCount - 1
				if historyCount < 0 then historyCount = 0 end
				Cmdbar.Text = cmdHistory[historyCount] or """"
				Cmdbar.CursorPosition = 1020
			end
		elseif input.KeyCode == Enum.KeyCode.Return or input.KeyCode == Enum.KeyCode.KeypadEnter then
			lastEnteredString = lastTextBoxString
		end
	end
end)

Players.LocalPlayer.Chatted:Connect(function()
	wait()
	if lastEnteredString then
		local message = lastEnteredString
		lastEnteredString = nil
		do_exec(message, Players.LocalPlayer)
	end
end)

Cmdbar.PlaceholderText = ""Command Bar (""..prefix.."")""
Cmdbar:GetPropertyChangedSignal(""Text""):Connect(function()
	if Cmdbar:IsFocused() then
		IndexContents(Cmdbar.Text,true,true)
	end
end)

local tabComplete = nil
tabAllowed = true
Cmdbar.FocusLost:Connect(function(enterpressed)
	if enterpressed then
		local cmdbarText = Cmdbar.Text:gsub(""^""..prefix,"""")
		execCmd(cmdbarText,Players.LocalPlayer,true)
	end
	if tabComplete then tabComplete:Disconnect() end
	wait()
	if not Cmdbar:IsFocused() then
		Cmdbar.Text = """"
		IndexContents('',true,false,true)
		if SettingsOpen == true then
			wait(0.2)
			Settings:TweenPosition(UDim2.new(0, 0, 0, 45), ""InOut"", ""Quart"", 0.2, true, nil)
			CMDsF.Visible = false
		end
	end
	CMDsF.CanvasPosition = canvasPos
end)

Cmdbar.Focused:Connect(function()
	historyCount = 0
	canvasPos = CMDsF.CanvasPosition
	if SettingsOpen == true then
		wait(0.2)
		CMDsF.Visible = true
		Settings:TweenPosition(UDim2.new(0, 0, 0, 220), ""InOut"", ""Quart"", 0.2, true, nil)
	end
	tabComplete = UserInputService.InputBegan:Connect(function(input,gameProcessed)
		if Cmdbar:IsFocused() then
			if tabAllowed == true and input.KeyCode == Enum.KeyCode.Tab and topCommand ~= nil then
				autoComplete(topCommand)
			end
		else
			tabComplete:Disconnect()
		end
	end)
end)

ESPenabled = false
CHMSenabled = false

function round(num, numDecimalPlaces)
	local mult = 10^(numDecimalPlaces or 0)
	return math.floor(num * mult + 0.5) / mult
end

function ESP(plr)
	task.spawn(function()
		for i,v in pairs(COREGUI:GetChildren()) do
			if v.Name == plr.Name..'_ESP' then
				v:Destroy()
			end
		end
		wait()
		if plr.Character and plr.Name ~= Players.LocalPlayer.Name and not COREGUI:FindFirstChild(plr.Name..'_ESP') then
			local ESPholder = Instance.new(""Folder"")
			ESPholder.Name = plr.Name..'_ESP'
			ESPholder.Parent = COREGUI
			repeat wait(1) until plr.Character and getRoot(plr.Character) and plr.Character:FindFirstChildOfClass(""Humanoid"")
			for b,n in pairs (plr.Character:GetChildren()) do
				if (n:IsA(""BasePart"")) then
					local a = Instance.new(""BoxHandleAdornment"")
					a.Name = plr.Name
					a.Parent = ESPholder
					a.Adornee = n
					a.AlwaysOnTop = true
					a.ZIndex = 10
					a.Size = n.Size
					a.Transparency = espTransparency
					a.Color = plr.TeamColor
				end
			end
			if plr.Character and plr.Character:FindFirstChild('Head') then
				local BillboardGui = Instance.new(""BillboardGui"")
				local TextLabel = Instance.new(""TextLabel"")
				BillboardGui.Adornee = plr.Character.Head
				BillboardGui.Name = plr.Name
				BillboardGui.Parent = ESPholder
				BillboardGui.Size = UDim2.new(0, 100, 0, 150)
				BillboardGui.StudsOffset = Vector3.new(0, 1, 0)
				BillboardGui.AlwaysOnTop = true
				TextLabel.Parent = BillboardGui
				TextLabel.BackgroundTransparency = 1
				TextLabel.Position = UDim2.new(0, 0, 0, -50)
				TextLabel.Size = UDim2.new(0, 100, 0, 100)
				TextLabel.Font = Enum.Font.SourceSansSemibold
				TextLabel.TextSize = 20
				TextLabel.TextColor3 = Color3.new(1, 1, 1)
				TextLabel.TextStrokeTransparency = 0
				TextLabel.TextYAlignment = Enum.TextYAlignment.Bottom
				TextLabel.Text = 'Name: '..plr.Name
				TextLabel.ZIndex = 10
				local espLoopFunc
				local teamChange
				local addedFunc
				addedFunc = plr.CharacterAdded:Connect(function()
					if ESPenabled then
						espLoopFunc:Disconnect()
						teamChange:Disconnect()
						ESPholder:Destroy()
						repeat wait(1) until getRoot(plr.Character) and plr.Character:FindFirstChildOfClass(""Humanoid"")
						ESP(plr)
						addedFunc:Disconnect()
					else
						teamChange:Disconnect()
						addedFunc:Disconnect()
					end
				end)
				teamChange = plr:GetPropertyChangedSignal(""TeamColor""):Connect(function()
					if ESPenabled then
						espLoopFunc:Disconnect()
						addedFunc:Disconnect()
						ESPholder:Destroy()
						repeat wait(1) until getRoot(plr.Character) and plr.Character:FindFirstChildOfClass(""Humanoid"")
						ESP(plr)
						teamChange:Disconnect()
					else
						teamChange:Disconnect()
					end
				end)
				local function espLoop()
					if COREGUI:FindFirstChild(plr.Name..'_ESP') then
						if plr.Character and getRoot(plr.Character) and plr.Character:FindFirstChildOfClass(""Humanoid"") and Players.LocalPlayer.Character and getRoot(Players.LocalPlayer.Character) and Players.LocalPlayer.Character:FindFirstChildOfClass(""Humanoid"") then
							local pos = math.floor((getRoot(Players.LocalPlayer.Character).Position - getRoot(plr.Character).Position).magnitude)
							TextLabel.Text = 'Name: '..plr.Name..' | Health: '..round(plr.Character:FindFirstChildOfClass('Humanoid').Health, 1)..' | Studs: '..pos
						end
					else
						teamChange:Disconnect()
						addedFunc:Disconnect()
						espLoopFunc:Disconnect()
					end
				end
				espLoopFunc = RunService.RenderStepped:Connect(espLoop)
			end
		end
	end)
end

function CHMS(plr)
	task.spawn(function()
		for i,v in pairs(COREGUI:GetChildren()) do
			if v.Name == plr.Name..'_CHMS' then
				v:Destroy()
			end
		end
		wait()
		if plr.Character and plr.Name ~= Players.LocalPlayer.Name and not COREGUI:FindFirstChild(plr.Name..'_CHMS') then
			local ESPholder = Instance.new(""Folder"")
			ESPholder.Name = plr.Name..'_CHMS'
			ESPholder.Parent = COREGUI
			repeat wait(1) until plr.Character and getRoot(plr.Character) and plr.Character:FindFirstChildOfClass(""Humanoid"")
			for b,n in pairs (plr.Character:GetChildren()) do
				if (n:IsA(""BasePart"")) then
					local a = Instance.new(""BoxHandleAdornment"")
					a.Name = plr.Name
					a.Parent = ESPholder
					a.Adornee = n
					a.AlwaysOnTop = true
					a.ZIndex = 10
					a.Size = n.Size
					a.Transparency = espTransparency
					a.Color = plr.TeamColor
				end
			end
			local addedFunc
			local teamChange
			local CHMSremoved
			addedFunc = plr.CharacterAdded:Connect(function()
				if CHMSenabled then
					ESPholder:Destroy()
					teamChange:Disconnect()
					repeat wait(1) until getRoot(plr.Character) and plr.Character:FindFirstChildOfClass(""Humanoid"")
					CHMS(plr)
					addedFunc:Disconnect()
				else
					teamChange:Disconnect()
					addedFunc:Disconnect()
				end
			end)
			teamChange = plr:GetPropertyChangedSignal(""TeamColor""):Connect(function()
				if CHMSenabled then
					ESPholder:Destroy()
					addedFunc:Disconnect()
					repeat wait(1) until getRoot(plr.Character) and plr.Character:FindFirstChildOfClass(""Humanoid"")
					CHMS(plr)
					teamChange:Disconnect()
				else
					teamChange:Disconnect()
				end
			end)
			CHMSremoved = ESPholder.AncestryChanged:Connect(function()
				teamChange:Disconnect()
				addedFunc:Disconnect()
				CHMSremoved:Disconnect()
			end)
		end
	end)
end

function Locate(plr)
	task.spawn(function()
		for i,v in pairs(COREGUI:GetChildren()) do
			if v.Name == plr.Name..'_LC' then
				v:Destroy()
			end
		end
		wait()
		if plr.Character and plr.Name ~= Players.LocalPlayer.Name and not COREGUI:FindFirstChild(plr.Name..'_LC') then
			local ESPholder = Instance.new(""Folder"")
			ESPholder.Name = plr.Name..'_LC'
			ESPholder.Parent = COREGUI
			repeat wait(1) until plr.Character and getRoot(plr.Character) and plr.Character:FindFirstChildOfClass(""Humanoid"")
			for b,n in pairs (plr.Character:GetChildren()) do
				if (n:IsA(""BasePart"")) then
					local a = Instance.new(""BoxHandleAdornment"")
					a.Name = plr.Name
					a.Parent = ESPholder
					a.Adornee = n
					a.AlwaysOnTop = true
					a.ZIndex = 10
					a.Size = n.Size
					a.Transparency = espTransparency
					a.Color = plr.TeamColor
				end
			end
			if plr.Character and plr.Character:FindFirstChild('Head') then
				local BillboardGui = Instance.new(""BillboardGui"")
				local TextLabel = Instance.new(""TextLabel"")
				BillboardGui.Adornee = plr.Character.Head
				BillboardGui.Name = plr.Name
				BillboardGui.Parent = ESPholder
				BillboardGui.Size = UDim2.new(0, 100, 0, 150)
				BillboardGui.StudsOffset = Vector3.new(0, 1, 0)
				BillboardGui.AlwaysOnTop = true
				TextLabel.Parent = BillboardGui
				TextLabel.BackgroundTransparency = 1
				TextLabel.Position = UDim2.new(0, 0, 0, -50)
				TextLabel.Size = UDim2.new(0, 100, 0, 100)
				TextLabel.Font = Enum.Font.SourceSansSemibold
				TextLabel.TextSize = 20
				TextLabel.TextColor3 = Color3.new(1, 1, 1)
				TextLabel.TextStrokeTransparency = 0
				TextLabel.TextYAlignment = Enum.TextYAlignment.Bottom
				TextLabel.Text = 'Name: '..plr.Name
				TextLabel.ZIndex = 10
				local lcLoopFunc
				local addedFunc
				local teamChange
				addedFunc = plr.CharacterAdded:Connect(function()
					if ESPholder ~= nil and ESPholder.Parent ~= nil then
						lcLoopFunc:Disconnect()
						teamChange:Disconnect()
						ESPholder:Destroy()
						repeat wait(1) until getRoot(plr.Character) and plr.Character:FindFirstChildOfClass(""Humanoid"")
						Locate(plr)
						addedFunc:Disconnect()
					else
						teamChange:Disconnect()
						addedFunc:Disconnect()
					end
				end)
				teamChange = plr:GetPropertyChangedSignal(""TeamColor""):Connect(function()
					if ESPholder ~= nil and ESPholder.Parent ~= nil then
						lcLoopFunc:Disconnect()
						addedFunc:Disconnect()
						ESPholder:Destroy()
						repeat wait(1) until getRoot(plr.Character) and plr.Character:FindFirstChildOfClass(""Humanoid"")
						Locate(plr)
						teamChange:Disconnect()
					else
						teamChange:Disconnect()
					end
				end)
				local function lcLoop()
					if COREGUI:FindFirstChild(plr.Name..'_LC') then
						if plr.Character and getRoot(plr.Character) and plr.Character:FindFirstChildOfClass(""Humanoid"") and Players.LocalPlayer.Character and getRoot(Players.LocalPlayer.Character) and Players.LocalPlayer.Character:FindFirstChildOfClass(""Humanoid"") then
							local pos = math.floor((getRoot(Players.LocalPlayer.Character).Position - getRoot(plr.Character).Position).magnitude)
							TextLabel.Text = 'Name: '..plr.Name..' | Health: '..round(plr.Character:FindFirstChildOfClass('Humanoid').Health, 1)..' | Studs: '..pos
						end
					else
						teamChange:Disconnect()
						addedFunc:Disconnect()
						lcLoopFunc:Disconnect()
					end
				end
				lcLoopFunc = RunService.RenderStepped:Connect(lcLoop)
			end
		end
	end)
end

local bindsGUI = KeybindEditor
local awaitingInput = false
local keySelected = false

function refreshbinds()
	if Holder_2 then
		Holder_2:ClearAllChildren()
		Holder_2.CanvasSize = UDim2.new(0, 0, 0, 10)
		for i = 1, #binds do
			local YSize = 25
			local Position = ((i * YSize) - YSize)
			local newbind = Example_2:Clone()
			newbind.Parent = Holder_2
			newbind.Visible = true
			newbind.Position = UDim2.new(0,0,0, Position + 5)
			table.insert(shade2,newbind)
			table.insert(shade2,newbind.Text)
			table.insert(text1,newbind.Text)
			table.insert(shade3,newbind.Text.Delete)
			table.insert(text2,newbind.Text.Delete)
			local input = tostring(binds[i].KEY)
			local key
			if input == 'RightClick' or input == 'LeftClick' then
				key = input
			else
				key = input:sub(14)
			end
			if binds[i].TOGGLE then
				newbind.Text.Text = key.."" > ""..binds[i].COMMAND.."" / ""..binds[i].TOGGLE
			else
				newbind.Text.Text = key.."" > ""..binds[i].COMMAND..""  ""..(binds[i].ISKEYUP and ""(keyup)"" or ""(keydown)"")
			end
			Holder_2.CanvasSize = UDim2.new(0,0,0, Position + 30)
			newbind.Text.Delete.MouseButton1Click:Connect(function()
				unkeybind(binds[i].COMMAND,binds[i].KEY)
			end)
		end
	end
end

refreshbinds()

toggleOn = {}

function unkeybind(cmd,key)
	for i = #binds,1,-1 do
		if binds[i].COMMAND == cmd and binds[i].KEY == key then
			toggleOn[binds[i]] = nil
			table.remove(binds, i)
		end
	end
	refreshbinds()
	updatesaves()
	if key == 'RightClick' or key == 'LeftClick' then
		notify('Keybinds Updated','Unbinded '..key..' from '..cmd)
	else
		notify('Keybinds Updated','Unbinded '..key:sub(14)..' from '..cmd)
	end
end

PositionsFrame.Delete.MouseButton1Click:Connect(function()
	execCmd('cpos')
end)

function refreshwaypoints()
	if #WayPoints > 0 or #pWayPoints > 0 then
		PositionsHint:Destroy()
	end
	if Holder_4 then
		Holder_4:ClearAllChildren()
		Holder_4.CanvasSize = UDim2.new(0, 0, 0, 10)
		local YSize = 25
		local num = 1
		for i = 1, #WayPoints do
			local Position = ((num * YSize) - YSize)
			local newpoint = Example_4:Clone()
			newpoint.Parent = Holder_4
			newpoint.Visible = true
			newpoint.Position = UDim2.new(0,0,0, Position + 5)
			newpoint.Text.Text = WayPoints[i].NAME
			table.insert(shade2,newpoint)
			table.insert(shade2,newpoint.Text)
			table.insert(text1,newpoint.Text)
			table.insert(shade3,newpoint.Text.Delete)
			table.insert(text2,newpoint.Text.Delete)
			table.insert(shade3,newpoint.Text.TP)
			table.insert(text2,newpoint.Text.TP)
			Holder_4.CanvasSize = UDim2.new(0,0,0, Position + 30)
			newpoint.Text.Delete.MouseButton1Click:Connect(function()
				execCmd('dpos '..WayPoints[i].NAME)
			end)
			newpoint.Text.TP.MouseButton1Click:Connect(function()
				execCmd(""loadpos ""..WayPoints[i].NAME)
			end)
			num = num+1
		end
		for i = 1, #pWayPoints do
			local Position = ((num * YSize) - YSize)
			local newpoint = Example_4:Clone()
			newpoint.Parent = Holder_4
			newpoint.Visible = true
			newpoint.Position = UDim2.new(0,0,0, Position + 5)
			newpoint.Text.Text = pWayPoints[i].NAME
			table.insert(shade2,newpoint)
			table.insert(shade2,newpoint.Text)
			table.insert(text1,newpoint.Text)
			table.insert(shade3,newpoint.Text.Delete)
			table.insert(text2,newpoint.Text.Delete)
			table.insert(shade3,newpoint.Text.TP)
			table.insert(text2,newpoint.Text.TP)
			Holder_4.CanvasSize = UDim2.new(0,0,0, Position + 30)
			newpoint.Text.Delete.MouseButton1Click:Connect(function()
				execCmd('dpos '..pWayPoints[i].NAME)
			end)
			newpoint.Text.TP.MouseButton1Click:Connect(function()
				execCmd(""loadpos ""..pWayPoints[i].NAME)
			end)
			num = num+1
		end
	end
end

refreshwaypoints()

function refreshaliases()
	if #aliases > 0 then
		AliasHint:Destroy()
	end
	if Holder_3 then
		Holder_3:ClearAllChildren()
		Holder_3.CanvasSize = UDim2.new(0, 0, 0, 10)
		for i = 1, #aliases do
			local YSize = 25
			local Position = ((i * YSize) - YSize)
			local newalias = Example_3:Clone()
			newalias.Parent = Holder_3
			newalias.Visible = true
			newalias.Position = UDim2.new(0,0,0, Position + 5)
			newalias.Text.Text = aliases[i].CMD.."" > ""..aliases[i].ALIAS
			table.insert(shade2,newalias)
			table.insert(shade2,newalias.Text)
			table.insert(text1,newalias.Text)
			table.insert(shade3,newalias.Text.Delete)
			table.insert(text2,newalias.Text.Delete)
			Holder_3.CanvasSize = UDim2.new(0,0,0, Position + 30)
			newalias.Text.Delete.MouseButton1Click:Connect(function()
				execCmd('removealias '..aliases[i].ALIAS)
			end)
		end
	end
end

local bindChosenKeyUp = false

BindTo.MouseButton1Click:Connect(function()
	awaitingInput = true
	BindTo.Text = 'Press something'
end)

BindTriggerSelect.MouseButton1Click:Connect(function()
	bindChosenKeyUp = not bindChosenKeyUp
	BindTriggerSelect.Text = bindChosenKeyUp and ""KeyUp"" or ""KeyDown""
end)

newToggle = false
Cmdbar_3.Parent.Visible = false
On_2.MouseButton1Click:Connect(function()
	if newToggle == false then newToggle = true
		On_2.BackgroundTransparency = 0
		Cmdbar_3.Parent.Visible = true
		BindTriggerSelect.Visible = false
	else newToggle = false
		On_2.BackgroundTransparency = 1
		Cmdbar_3.Parent.Visible = false
		BindTriggerSelect.Visible = true
	end
end)

Add_2.MouseButton1Click:Connect(function()
	if keySelected then
		if string.find(Cmdbar_2.Text, ""\\\\"") or string.find(Cmdbar_3.Text, ""\\\\"") then
			notify('Keybind Error','Only use one backslash to keybind multiple commands into one keybind or command')
		else
			if newToggle and Cmdbar_3.Text ~= '' and Cmdbar_2.text ~= '' then
				addbind(Cmdbar_2.Text,keyPressed,false,Cmdbar_3.Text)
			elseif not newToggle and Cmdbar_2.text ~= '' then
				addbind(Cmdbar_2.Text,keyPressed,bindChosenKeyUp)
			else
				return
			end
			refreshbinds()
			updatesaves()
			if keyPressed == 'RightClick' or keyPressed == 'LeftClick' then
				notify('Keybinds Updated','Binded '..keyPressed..' to '..Cmdbar_2.Text..(newToggle and "" / ""..Cmdbar_3.Text or """"))
			else
				notify('Keybinds Updated','Binded '..keyPressed:sub(14)..' to '..Cmdbar_2.Text..(newToggle and "" / ""..Cmdbar_3.Text or """"))
			end
		end
	end
end)

Exit_2.MouseButton1Click:Connect(function()
	Cmdbar_2.Text = 'Command'
	Cmdbar_3.Text = 'Command 2'
	BindTo.Text = 'Click to bind'
	bindChosenKeyUp = false
	BindTriggerSelect.Text = ""KeyDown""
	keySelected = false
	KeybindEditor:TweenPosition(UDim2.new(0.5, -180, 0, -500), ""InOut"", ""Quart"", 0.5, true, nil)
end)

function onInputBegan(input,gameProcessed)
	if awaitingInput then
		if input.UserInputType == Enum.UserInputType.Keyboard then
			keyPressed = tostring(input.KeyCode)
			BindTo.Text = keyPressed:sub(14)
		elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
			keyPressed = 'LeftClick'
			BindTo.Text = 'LeftClick'
		elseif input.UserInputType == Enum.UserInputType.MouseButton2 then
			keyPressed = 'RightClick'
			BindTo.Text = 'RightClick'
		end
		awaitingInput = false
		keySelected = true
	end
	if not gameProcessed and #binds > 0 then
		for i,v in pairs(binds) do
			if not v.ISKEYUP then
				if (input.UserInputType == Enum.UserInputType.Keyboard and v.KEY:lower()==tostring(input.KeyCode):lower()) or (input.UserInputType == Enum.UserInputType.MouseButton1 and v.KEY:lower()=='leftclick') or (input.UserInputType == Enum.UserInputType.MouseButton2 and v.KEY:lower()=='rightclick') then
					if v.TOGGLE then
						local isOn = toggleOn[v] == true
						toggleOn[v] = not isOn
						if isOn then
							execCmd(v.TOGGLE,Players.LocalPlayer)
						else
							execCmd(v.COMMAND,Players.LocalPlayer)
						end
					else
						execCmd(v.COMMAND,Players.LocalPlayer)
					end
				end
			end
		end
	end
end

function onInputEnded(input,gameProcessed)
	if not gameProcessed and #binds > 0 then
		for i,v in pairs(binds) do
			if v.ISKEYUP then
				if (input.UserInputType == Enum.UserInputType.Keyboard and v.KEY:lower()==tostring(input.KeyCode):lower()) or (input.UserInputType == Enum.UserInputType.MouseButton1 and v.KEY:lower()=='leftclick') or (input.UserInputType == Enum.UserInputType.MouseButton2 and v.KEY:lower()=='rightclick') then
					execCmd(v.COMMAND,Players.LocalPlayer)
				end
			end
		end
	end
end

UserInputService.InputBegan:Connect(onInputBegan)
UserInputService.InputEnded:Connect(onInputEnded)

ClickTP.Select.MouseButton1Click:Connect(function()
	if keySelected then
		addbind('clicktp',keyPressed,bindChosenKeyUp)
		refreshbinds()
		updatesaves()
		if keyPressed == 'RightClick' or keyPressed == 'LeftClick' then
			notify('Keybinds Updated','Binded '..keyPressed..' to click tp')
		else
			notify('Keybinds Updated','Binded '..keyPressed:sub(14)..' to click tp')
		end
	end
end)

ClickDelete.Select.MouseButton1Click:Connect(function()
	if keySelected then
		addbind('clickdel',keyPressed,bindChosenKeyUp)
		refreshbinds()
		updatesaves()
		if keyPressed == 'RightClick' or keyPressed == 'LeftClick' then
			notify('Keybinds Updated','Binded '..keyPressed..' to click delete')
		else
			notify('Keybinds Updated','Binded '..keyPressed:sub(14)..' to click delete')
		end
	end
end)

local function clicktpFunc()
	pcall(function()
		local character = Players.LocalPlayer.Character
		local humanoid = character:FindFirstChildOfClass(""Humanoid"")
		if humanoid and humanoid.SeatPart then
			humanoid.Sit = false
			wait(0.1)
		end

		local hipHeight = humanoid and humanoid.HipHeight > 0 and (humanoid.HipHeight + 1)
		local rootPart = getRoot(character)
		local rootPartPosition = rootPart.Position
		local hitPosition = IYMouse.Hit.Position
		local newCFrame = CFrame.new(
			hitPosition, 
			Vector3.new(rootPartPosition.X, hitPosition.Y, rootPartPosition.Z)
		) * CFrame.Angles(0, math.pi, 0)

		rootPart.CFrame = newCFrame + Vector3.new(0, hipHeight or 4, 0)
	end)
end

IYMouse.Button1Down:Connect(function()
	for i,v in pairs(binds) do
		if v.COMMAND == 'clicktp' then
			local input = v.KEY
			if input == 'RightClick' and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) and Players.LocalPlayer.Character then
				clicktpFunc()
			elseif input == 'LeftClick' and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) and Players.LocalPlayer.Character then
				clicktpFunc()
			elseif UserInputService:IsKeyDown(Enum.KeyCode[input:sub(14)]) and Players.LocalPlayer.Character then
				clicktpFunc()
			end
		elseif v.COMMAND == 'clickdel' then
			local input = v.KEY
			if input == 'RightClick' and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) then
				pcall(function() IYMouse.Target:Destroy() end)
			elseif input == 'LeftClick' and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
				pcall(function() IYMouse.Target:Destroy() end)
			elseif UserInputService:IsKeyDown(Enum.KeyCode[input:sub(14)]) then
				pcall(function() IYMouse.Target:Destroy() end)
			end
		end
	end
end)

PluginsGUI = PluginEditor.background

function addPlugin(name)
	if name:lower() == 'plugin file name' or name:lower() == 'iy_fe.iy' or name == 'iy_fe' then
		notify('Plugin Error','Please enter a valid plugin')
	else
		local file
		local fileName
		if name:sub(-3) == '.iy' then
			pcall(function() file = readfile(name) end)
			fileName = name
		else
			pcall(function() file = readfile(name..'.iy') end)
			fileName = name..'.iy'
		end
		if file then
			if not FindInTable(PluginsTable, fileName) then
				table.insert(PluginsTable, fileName)
				LoadPlugin(fileName)
				refreshplugins()
				pcall(eventEditor.Refresh)
			else
				notify('Plugin Error','This plugin is already added')
			end
		else
			notify('Plugin Error','Cannot locate file ""'..fileName..'"". Is the file in the correct folder?')
		end
	end
end

function deletePlugin(name)
	local pName = name..'.iy'
	if name:sub(-3) == '.iy' then
		pName = name
	end
	for i = #cmds,1,-1 do
		if cmds[i].PLUGIN == pName then
			table.remove(cmds, i)
		end
	end
	for i,v in pairs(CMDsF:GetChildren()) do
		if v.Name == 'PLUGIN_'..pName then
			v:Destroy()
		end
	end
	for i,v in pairs(PluginsTable) do
		if v == pName then
			table.remove(PluginsTable, i)
			notify('Removed Plugin',pName..' was removed')
		end
	end
	IndexContents('',true)
	refreshplugins()
end

function refreshplugins(dontSave)
	if #PluginsTable > 0 then
		PluginsHint:Destroy()
	end
	if Holder_5 then
		Holder_5:ClearAllChildren()
		Holder_5.CanvasSize = UDim2.new(0, 0, 0, 10)
		for i,v in pairs(PluginsTable) do
			local pName = v
			local YSize = 25
			local Position = ((i * YSize) - YSize)
			local newplugin = Example_5:Clone()
			newplugin.Parent = Holder_5
			newplugin.Visible = true
			newplugin.Position = UDim2.new(0,0,0, Position + 5)
			newplugin.Text.Text = pName
			table.insert(shade2,newplugin)
			table.insert(shade2,newplugin.Text)
			table.insert(text1,newplugin.Text)
			table.insert(shade3,newplugin.Text.Delete)
			table.insert(text2,newplugin.Text.Delete)
			Holder_5.CanvasSize = UDim2.new(0,0,0, Position + 30)
			newplugin.Text.Delete.MouseButton1Click:Connect(function()
				deletePlugin(pName)
			end)
		end
		if not dontSave then
			updatesaves()
		end
	end
end

local PluginCache
function LoadPlugin(val,startup)
	local plugin

	function CatchedPluginLoad()
		plugin = loadfile(val)()
	end

	function handlePluginError(plerror)
		notify('Plugin Error','An error occurred with the plugin, ""'..val..'"" and it could not be loaded')
		if FindInTable(PluginsTable,val) then
			for i,v in pairs(PluginsTable) do
				if v == val then
					table.remove(PluginsTable,i)
				end
			end
		end
		updatesaves()

		print(""Original Error: ""..tostring(plerror))
		print(""Plugin Error, stack traceback: ""..tostring(debug.traceback()))

		plugin = nil

		return false
	end

	xpcall(CatchedPluginLoad, handlePluginError)

	if plugin ~= nil then
		if not startup then
			notify('Loaded Plugin',""Name: ""..plugin[""PluginName""]..""\n""..""Description: ""..plugin[""PluginDescription""])
		end
		addcmdtext('',val)
		addcmdtext(string.upper('--'..plugin[""PluginName""]),val,plugin[""PluginDescription""])
		if plugin[""Commands""] then
			for i,v in pairs(plugin[""Commands""]) do 
				local cmdExt = ''
				local cmdName = i
				local function handleNames()
					cmdName = i
					if findCmd(cmdName..cmdExt) then
						if isNumber(cmdExt) then
							cmdExt = cmdExt+1
						else
							cmdExt = 1
						end
						handleNames()
					else
						cmdName = cmdName..cmdExt
					end
				end
				handleNames()
				addcmd(cmdName, v[""Aliases""], v[""Function""], val)
				if v[""ListName""] then
					local newName = v.ListName
					local cmdNames = {i,unpack(v.Aliases)}
					for i,v in pairs(cmdNames) do
						newName = newName:gsub(v,v..cmdExt)
					end
					addcmdtext(newName,val,v[""Description""])
				else
					addcmdtext(cmdName,val,v[""Description""])
				end
			end
		end
		IndexContents('',true)
	elseif plugin == nil then
		plugin = nil
	end
end

function FindPlugins()
	if PluginsTable ~= nil and type(PluginsTable) == ""table"" then
		for i,v in pairs(PluginsTable) do
			LoadPlugin(v,true)
		end
		refreshplugins(true)
	end
end

AddPlugin.MouseButton1Click:Connect(function()
	addPlugin(PluginsGUI.FileName.Text)
end)

Exit_3.MouseButton1Click:Connect(function()
	PluginEditor:TweenPosition(UDim2.new(0.5, -180, 0, -500), ""InOut"", ""Quart"", 0.5, true, nil)
	FileName.Text = 'Plugin File Name'
end)

Add_3.MouseButton1Click:Connect(function()
	PluginEditor:TweenPosition(UDim2.new(0.5, -180, 0, 310), ""InOut"", ""Quart"", 0.5, true, nil)
end)

Plugins.MouseButton1Click:Connect(function()
	if writefileExploit() then
		PluginsFrame:TweenPosition(UDim2.new(0, 0, 0, 0), ""InOut"", ""Quart"", 0.5, true, nil)
		wait(0.5)
		SettingsHolder.Visible = false
	else
		notify('Incompatible Exploit','Your exploit is unable to use plugins (missing read/writefile)')
	end
end)

Close_4.MouseButton1Click:Connect(function()
	SettingsHolder.Visible = true
	PluginsFrame:TweenPosition(UDim2.new(0, 0, 0, 175), ""InOut"", ""Quart"", 0.5, true, nil)
end)

local TeleportCheck = false
Players.LocalPlayer.OnTeleport:Connect(function(State)
	if KeepInfYield and (not TeleportCheck) and queueteleport then
		TeleportCheck = true
		queueteleport(""loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()"")
	end
end)

addcmd('addalias',{},function(args, speaker)
	if #args < 2 then return end
	local cmd = string.lower(args[1])
	local alias = string.lower(args[2])
	for i,v in pairs(cmds) do
		if v.NAME:lower()==cmd or FindInTable(v.ALIAS,cmd) then
			customAlias[alias] = v
			aliases[#aliases + 1] = {CMD = cmd, ALIAS = alias}
			notify('Aliases Modified',""Added ""..alias.."" as an alias to ""..cmd)
			updatesaves()
			refreshaliases()
			break
		end
	end
end)

addcmd('removealias',{},function(args, speaker)
	if #args < 1 then return end
	local alias = string.lower(args[1])
	if customAlias[alias] then
		local cmd = customAlias[alias].NAME
		customAlias[alias] = nil
		for i = #aliases,1,-1 do
			if aliases[i].ALIAS == tostring(alias) then
				table.remove(aliases, i)
			end
		end
		notify('Aliases Modified',""Removed the alias ""..alias.."" from ""..cmd)
		updatesaves()
		refreshaliases()
	end
end)

addcmd('clraliases',{},function(args, speaker)
	customAlias = {}
	aliases = {}
	notify('Aliases Modified','Removed all aliases')
	updatesaves()
	refreshaliases()
end)

addcmd('discord', {'support', 'help'}, function(args, speaker)
	if everyClipboard then
		toClipboard('https://discord.com/invite/dYHag43eeU')
		notify('Discord Invite', 'Copied to clipboard!\ndiscord.gg/dYHag43eeU')
	else
		notify('Discord Invite', 'discord.gg/dYHag43eeU')
	end
	if httprequest then
		httprequest({
			Url = 'http://127.0.0.1:6463/rpc?v=1',
			Method = 'POST',
			Headers = {
				['Content-Type'] = 'application/json',
				Origin = 'https://discord.com'
			},
			Body = HttpService:JSONEncode({
				cmd = 'INVITE_BROWSER',
				nonce = HttpService:GenerateGUID(false),
				args = {code = 'dYHag43eeU'}
			})
		})
	end
end)

addcmd('keepiy', {}, function(args, speaker)
	if queueteleport then
		KeepInfYield = true
		updatesaves()
	else
		notify('Incompatible Exploit','Your exploit does not support this command (missing queue_on_teleport)')
	end
end)

addcmd('unkeepiy', {}, function(args, speaker)
	if queueteleport then
		KeepInfYield = false
		updatesaves()
	else
		notify('Incompatible Exploit','Your exploit does not support this command (missing queue_on_teleport)')
	end
end)

addcmd('togglekeepiy', {}, function(args, speaker)
	if queueteleport then
		KeepInfYield = not KeepInfYield
		updatesaves()
	else
		notify('Incompatible Exploit','Your exploit does not support this command (missing queue_on_teleport)')
	end
end)

local canOpenServerinfo = true
addcmd('serverinfo',{'info','sinfo'},function(args, speaker)
	if not canOpenServerinfo then return end
	canOpenServerinfo = false
	task.spawn(function()
		local FRAME = Instance.new(""Frame"")
		local shadow = Instance.new(""Frame"")
		local PopupText = Instance.new(""TextLabel"")
		local Exit = Instance.new(""TextButton"")
		local ExitImage = Instance.new(""ImageLabel"")
		local background = Instance.new(""Frame"")
		local TextLabel = Instance.new(""TextLabel"")
		local TextLabel2 = Instance.new(""TextLabel"")
		local TextLabel3 = Instance.new(""TextLabel"")
		local Time = Instance.new(""TextLabel"")
		local appearance = Instance.new(""TextLabel"")
		local maxplayers = Instance.new(""TextLabel"")
		local name = Instance.new(""TextLabel"")
		local placeid = Instance.new(""TextLabel"")
		local playerid = Instance.new(""TextLabel"")
		local players = Instance.new(""TextLabel"")
		local CopyApp = Instance.new(""TextButton"")
		local CopyPlrID = Instance.new(""TextButton"")
		local CopyPlcID = Instance.new(""TextButton"")
		local CopyPlcName = Instance.new(""TextButton"")

		FRAME.Name = randomString()
		FRAME.Parent = PARENT
		FRAME.Active = true
		FRAME.BackgroundTransparency = 1
		FRAME.Position = UDim2.new(0.5, -130, 0, -500)
		FRAME.Size = UDim2.new(0, 250, 0, 20)
		FRAME.ZIndex = 10
		dragGUI(FRAME)

		shadow.Name = ""shadow""
		shadow.Parent = FRAME
		shadow.BackgroundColor3 = currentShade2
		shadow.BorderSizePixel = 0
		shadow.Size = UDim2.new(0, 250, 0, 20)
		shadow.ZIndex = 10
		table.insert(shade2,shadow)

		PopupText.Name = ""PopupText""
		PopupText.Parent = shadow
		PopupText.BackgroundTransparency = 1
		PopupText.Size = UDim2.new(1, 0, 0.95, 0)
		PopupText.ZIndex = 10
		PopupText.Font = Enum.Font.SourceSans
		PopupText.TextSize = 14
		PopupText.Text = ""Server""
		PopupText.TextColor3 = currentText1
		PopupText.TextWrapped = true
		table.insert(text1,PopupText)

		Exit.Name = ""Exit""
		Exit.Parent = shadow
		Exit.BackgroundTransparency = 1
		Exit.Position = UDim2.new(1, -20, 0, 0)
		Exit.Size = UDim2.new(0, 20, 0, 20)
		Exit.Text = """"
		Exit.ZIndex = 10

		ExitImage.Parent = Exit
		ExitImage.BackgroundColor3 = Color3.new(1, 1, 1)
		ExitImage.BackgroundTransparency = 1
		ExitImage.Position = UDim2.new(0, 5, 0, 5)
		ExitImage.Size = UDim2.new(0, 10, 0, 10)
		ExitImage.Image = ""rbxassetid://5054663650""
		ExitImage.ZIndex = 10

		background.Name = ""background""
		background.Parent = FRAME
		background.Active = true
		background.BackgroundColor3 = currentShade1
		background.BorderSizePixel = 0
		background.Position = UDim2.new(0, 0, 1, 0)
		background.Size = UDim2.new(0, 250, 0, 250)
		background.ZIndex = 10
		table.insert(shade1,background)

		TextLabel.Name = ""Text Label""
		TextLabel.Parent = background
		TextLabel.BackgroundTransparency = 1
		TextLabel.BorderSizePixel = 0
		TextLabel.Position = UDim2.new(0, 5, 0, 80)
		TextLabel.Size = UDim2.new(0, 100, 0, 20)
		TextLabel.ZIndex = 10
		TextLabel.Font = Enum.Font.SourceSansLight
		TextLabel.TextSize = 20
		TextLabel.Text = ""Run Time:""
		TextLabel.TextColor3 = currentText1
		TextLabel.TextXAlignment = Enum.TextXAlignment.Left
		table.insert(text1,TextLabel)

		TextLabel2.Name = ""Text Label2""
		TextLabel2.Parent = background
		TextLabel2.BackgroundTransparency = 1
		TextLabel2.BorderSizePixel = 0
		TextLabel2.Position = UDim2.new(0, 5, 0, 130)
		TextLabel2.Size = UDim2.new(0, 100, 0, 20)
		TextLabel2.ZIndex = 10
		TextLabel2.Font = Enum.Font.SourceSansLight
		TextLabel2.TextSize = 20
		TextLabel2.Text = ""Statistics:""
		TextLabel2.TextColor3 = currentText1
		TextLabel2.TextXAlignment = Enum.TextXAlignment.Left
		table.insert(text1,TextLabel2)

		TextLabel3.Name = ""Text Label3""
		TextLabel3.Parent = background
		TextLabel3.BackgroundTransparency = 1
		TextLabel3.BorderSizePixel = 0
		TextLabel3.Position = UDim2.new(0, 5, 0, 10)
		TextLabel3.Size = UDim2.new(0, 100, 0, 20)
		TextLabel3.ZIndex = 10
		TextLabel3.Font = Enum.Font.SourceSansLight
		TextLabel3.TextSize = 20
		TextLabel3.Text = ""Local Player:""
		TextLabel3.TextColor3 = currentText1
		TextLabel3.TextXAlignment = Enum.TextXAlignment.Left
		table.insert(text1,TextLabel3)

		Time.Name = ""Time""
		Time.Parent = background
		Time.BackgroundTransparency = 1
		Time.BorderSizePixel = 0
		Time.Position = UDim2.new(0, 5, 0, 105)
		Time.Size = UDim2.new(0, 100, 0, 20)
		Time.ZIndex = 10
		Time.Font = Enum.Font.SourceSans
		Time.FontSize = Enum.FontSize.Size14
		Time.Text = ""LOADING""
		Time.TextColor3 = currentText1
		Time.TextXAlignment = Enum.TextXAlignment.Left
		table.insert(text1,Time)

		appearance.Name = ""appearance""
		appearance.Parent = background
		appearance.BackgroundTransparency = 1
		appearance.BorderSizePixel = 0
		appearance.Position = UDim2.new(0, 5, 0, 55)
		appearance.Size = UDim2.new(0, 100, 0, 20)
		appearance.ZIndex = 10
		appearance.Font = Enum.Font.SourceSans
		appearance.FontSize = Enum.FontSize.Size14
		appearance.Text = ""Appearance: LOADING""
		appearance.TextColor3 = currentText1
		appearance.TextXAlignment = Enum.TextXAlignment.Left
		table.insert(text1,appearance)

		maxplayers.Name = ""maxplayers""
		maxplayers.Parent = background
		maxplayers.BackgroundTransparency = 1
		maxplayers.BorderSizePixel = 0
		maxplayers.Position = UDim2.new(0, 5, 0, 175)
		maxplayers.Size = UDim2.new(0, 100, 0, 20)
		maxplayers.ZIndex = 10
		maxplayers.Font = Enum.Font.SourceSans
		maxplayers.FontSize = Enum.FontSize.Size14
		maxplayers.Text = ""LOADING""
		maxplayers.TextColor3 = currentText1
		maxplayers.TextXAlignment = Enum.TextXAlignment.Left
		table.insert(text1,maxplayers)

		name.Name = ""name""
		name.Parent = background
		name.BackgroundTransparency = 1
		name.BorderSizePixel = 0
		name.Position = UDim2.new(0, 5, 0, 215)
		name.Size = UDim2.new(0, 240, 0, 30)
		name.ZIndex = 10
		name.Font = Enum.Font.SourceSans
		name.FontSize = Enum.FontSize.Size14
		name.Text = ""Place Name: LOADING""
		name.TextColor3 = currentText1
		name.TextWrapped = true
		name.TextXAlignment = Enum.TextXAlignment.Left
		name.TextYAlignment = Enum.TextYAlignment.Top
		table.insert(text1,name)

		placeid.Name = ""placeid""
		placeid.Parent = background
		placeid.BackgroundTransparency = 1
		placeid.BorderSizePixel = 0
		placeid.Position = UDim2.new(0, 5, 0, 195)
		placeid.Size = UDim2.new(0, 100, 0, 20)
		placeid.ZIndex = 10
		placeid.Font = Enum.Font.SourceSans
		placeid.FontSize = Enum.FontSize.Size14
		placeid.Text = ""Place ID: LOADING""
		placeid.TextColor3 = currentText1
		placeid.TextXAlignment = Enum.TextXAlignment.Left
		table.insert(text1,placeid)

		playerid.Name = ""playerid""
		playerid.Parent = background
		playerid.BackgroundTransparency = 1
		playerid.BorderSizePixel = 0
		playerid.Position = UDim2.new(0, 5, 0, 35)
		playerid.Size = UDim2.new(0, 100, 0, 20)
		playerid.ZIndex = 10
		playerid.Font = Enum.Font.SourceSans
		playerid.FontSize = Enum.FontSize.Size14
		playerid.Text = ""Player ID: LOADING""
		playerid.TextColor3 = currentText1
		playerid.TextXAlignment = Enum.TextXAlignment.Left
		table.insert(text1,playerid)

		players.Name = ""players""
		players.Parent = background
		players.BackgroundTransparency = 1
		players.BorderSizePixel = 0
		players.Position = UDim2.new(0, 5, 0, 155)
		players.Size = UDim2.new(0, 100, 0, 20)
		players.ZIndex = 10
		players.Font = Enum.Font.SourceSans
		players.FontSize = Enum.FontSize.Size14
		players.Text = ""LOADING""
		players.TextColor3 = currentText1
		players.TextXAlignment = Enum.TextXAlignment.Left
		table.insert(text1,players)

		CopyApp.Name = ""CopyApp""
		CopyApp.Parent = background
		CopyApp.BackgroundColor3 = currentShade2
		CopyApp.BorderSizePixel = 0
		CopyApp.Position = UDim2.new(0, 210, 0, 55)
		CopyApp.Size = UDim2.new(0, 35, 0, 20)
		CopyApp.Font = Enum.Font.SourceSans
		CopyApp.TextSize = 14
		CopyApp.Text = ""Copy""
		CopyApp.TextColor3 = currentText1
		CopyApp.ZIndex = 10
		table.insert(shade2,CopyApp)
		table.insert(text1,CopyApp)

		CopyPlrID.Name = ""CopyPlrID""
		CopyPlrID.Parent = background
		CopyPlrID.BackgroundColor3 = currentShade2
		CopyPlrID.BorderSizePixel = 0
		CopyPlrID.Position = UDim2.new(0, 210, 0, 35)
		CopyPlrID.Size = UDim2.new(0, 35, 0, 20)
		CopyPlrID.Font = Enum.Font.SourceSans
		CopyPlrID.TextSize = 14
		CopyPlrID.Text = ""Copy""
		CopyPlrID.TextColor3 = currentText1
		CopyPlrID.ZIndex = 10
		table.insert(shade2,CopyPlrID)
		table.insert(text1,CopyPlrID)

		CopyPlcID.Name = ""CopyPlcID""
		CopyPlcID.Parent = background
		CopyPlcID.BackgroundColor3 = currentShade2
		CopyPlcID.BorderSizePixel = 0
		CopyPlcID.Position = UDim2.new(0, 210, 0, 195)
		CopyPlcID.Size = UDim2.new(0, 35, 0, 20)
		CopyPlcID.Font = Enum.Font.SourceSans
		CopyPlcID.TextSize = 14
		CopyPlcID.Text = ""Copy""
		CopyPlcID.TextColor3 = currentText1
		CopyPlcID.ZIndex = 10
		table.insert(shade2,CopyPlcID)
		table.insert(text1,CopyPlcID)

		CopyPlcName.Name = ""CopyPlcName""
		CopyPlcName.Parent = background
		CopyPlcName.BackgroundColor3 = currentShade2
		CopyPlcName.BorderSizePixel = 0
		CopyPlcName.Position = UDim2.new(0, 210, 0, 215)
		CopyPlcName.Size = UDim2.new(0, 35, 0, 20)
		CopyPlcName.Font = Enum.Font.SourceSans
		CopyPlcName.TextSize = 14
		CopyPlcName.Text = ""Copy""
		CopyPlcName.TextColor3 = currentText1
		CopyPlcName.ZIndex = 10
		table.insert(shade2,CopyPlcName)
		table.insert(text1,CopyPlcName)

		local SINFOGUI = background
		FRAME:TweenPosition(UDim2.new(0.5, -130, 0, 100), ""InOut"", ""Quart"", 0.5, true, nil) 
		wait(0.5)
		Exit.MouseButton1Click:Connect(function()
			FRAME:TweenPosition(UDim2.new(0.5, -130, 0, -500), ""InOut"", ""Quart"", 0.5, true, nil) 
			wait(0.6)
			FRAME:Destroy()
			canOpenServerinfo = true
		end)
		local Asset = MarketplaceService:GetProductInfo(PlaceId)
		SINFOGUI.name.Text = ""Place Name: "" .. Asset.Name
		SINFOGUI.playerid.Text = ""Player ID: "" ..speaker.UserId
		SINFOGUI.maxplayers.Text = Players.MaxPlayers.. "" Players Max""
		SINFOGUI.placeid.Text = ""Place ID: "" ..PlaceId

		CopyApp.MouseButton1Click:Connect(function()
			toClipboard(speaker.CharacterAppearanceId)
		end)
		CopyPlrID.MouseButton1Click:Connect(function()
			toClipboard(speaker.UserId)
		end)
		CopyPlcID.MouseButton1Click:Connect(function()
			toClipboard(PlaceId)
		end)
		CopyPlcName.MouseButton1Click:Connect(function()
			toClipboard(Asset.Name)
		end)

		repeat
			players = Players:GetPlayers()
			SINFOGUI.players.Text = #players.. "" Player(s)""
			SINFOGUI.appearance.Text = ""Appearance: "" ..speaker.CharacterAppearanceId
			local seconds = math.floor(workspace.DistributedGameTime)
			local minutes = math.floor(workspace.DistributedGameTime / 60)
			local hours = math.floor(workspace.DistributedGameTime / 60 / 60)
			local seconds = seconds - (minutes * 60)
			local minutes = minutes - (hours * 60)
			if hours < 1 then if minutes < 1 then
					SINFOGUI.Time.Text = seconds .. "" Second(s)"" else
					SINFOGUI.Time.Text = minutes .. "" Minute(s), "" .. seconds .. "" Second(s)""
				end
			else
				SINFOGUI.Time.Text = hours .. "" Hour(s), "" .. minutes .. "" Minute(s), "" .. seconds .. "" Second(s)""
			end
			wait(1)
		until SINFOGUI.Parent == nil
	end)
end)

addcmd('jobid',{},function(args, speaker)
	local jobId = 'Roblox.GameLauncher.joinGameInstance('..PlaceId..', ""'..JobId..'"")'
	toClipboard(jobId)
end)

addcmd('notifyjobid',{},function(args, speaker)
	notify('JobId / PlaceId',JobId..' / '..PlaceId)
end)

addcmd('breakloops',{'break'},function(args, speaker)
	lastBreakTime = tick()
end)

addcmd('gametp',{'gameteleport'},function(args, speaker)
	TeleportService:Teleport(args[1])
end)

addcmd(""rejoin"", {""rj""}, function(args, speaker)
	if #Players:GetPlayers() <= 1 then
		Players.LocalPlayer:Kick(""\nRejoining..."")
		wait()
		TeleportService:Teleport(PlaceId, Players.LocalPlayer)
	else
		TeleportService:TeleportToPlaceInstance(PlaceId, JobId, Players.LocalPlayer)
	end
end)

addcmd(""autorejoin"", {""autorj""}, function(args, speaker)
	GuiService.ErrorMessageChanged:Connect(function()
		execCmd(""rejoin"")
	end)
	notify(""Auto Rejoin"", ""Auto rejoin enabled"")
end)

addcmd(""serverhop"", {""shop""}, function(args, speaker)
    -- thanks to NoobSploit for fixing
    if httprequest then
        local servers = {}
        local req = httprequest({Url = string.format(""https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true"", PlaceId)})
        local body = HttpService:JSONDecode(req.Body)

        if body and body.data then
            for i, v in next, body.data do
                if type(v) == ""table"" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= JobId then
                    table.insert(servers, 1, v.id)
                end
            end
        end

        if #servers > 0 then
            TeleportService:TeleportToPlaceInstance(PlaceId, servers[math.random(1, #servers)], Players.LocalPlayer)
        else
            return notify(""Serverhop"", ""Couldn't find a server."")
        end
    else
        notify(""Incompatible Exploit"", ""Your exploit does not support this command (missing request)"")
    end
end)

addcmd('joinplayer',{'joinp'},function(args, speaker)
	local retries = 0
	function ToServer(User,Place)	
		if args[2] == nil then Place = PlaceId end
		if not pcall(function()
				local FoundUser, UserId = pcall(function()
					if tonumber(User) then
						return tonumber(User)
					end

					return Players:GetUserIdFromNameAsync(User)
				end)
				if not FoundUser then
					notify('Join Error','Username/UserID does not exist')
				else
					notify('Join Player','Loading servers. Hold on a second.')
					local URL2 = (""https://games.roblox.com/v1/games/""..Place..""/servers/Public?sortOrder=Asc&limit=100"")
					local Http = HttpService:JSONDecode(game:HttpGet(URL2))
					local GUID

					function tablelength(T)
						local count = 0
						for _ in pairs(T) do count = count + 1 end
						return count
					end

					for i=1,tonumber(tablelength(Http.data)) do
						for j,k in pairs(Http.data[i].playerIds) do
							if k == UserId then
								GUID = Http.data[i].id
							end
						end
					end

					if GUID ~= nil then
						notify('Join Player','Joining '..User)
						TeleportService:TeleportToPlaceInstance(Place,GUID,Players.LocalPlayer)
					else
						notify('Join Error','Unable to join user.')
					end
				end
			end)
		then
			if retries < 3 then
				retries = retries + 1
				print('ERROR retrying '..retries..'/3')
				notify('Join Error','Error while trying to join. Retrying '..retries..'/3.')
				ToServer(User,Place)
			else
				notify('Join Error','Error while trying to join.')
			end
		end
	end
	ToServer(args[1],args[2])
end)

addcmd(""exit"", {}, function(args, speaker)
    game:Shutdown()
end)

local Noclipping = nil
addcmd('noclip',{},function(args, speaker)
	Clip = false
	wait(0.1)
	local function NoclipLoop()
		if Clip == false and speaker.Character ~= nil then
			for _, child in pairs(speaker.Character:GetDescendants()) do
				if child:IsA(""BasePart"") and child.CanCollide == true and child.Name ~= floatName then
					child.CanCollide = false
				end
			end
		end
	end
	Noclipping = RunService.Stepped:Connect(NoclipLoop)
end)

addcmd('clip',{'unnoclip'},function(args, speaker)
	if Noclipping then
		Noclipping:Disconnect()
	end
	Clip = true
end)

addcmd('togglenoclip',{},function(args, speaker)
	if Clip then
		execCmd('noclip')
	else
		execCmd('clip')
	end
end)

FLYING = false
QEfly = true
iyflyspeed = 1
vehicleflyspeed = 1
function sFLY(vfly)
	repeat wait() until Players.LocalPlayer and Players.LocalPlayer.Character and getRoot(Players.LocalPlayer.Character) and Players.LocalPlayer.Character:FindFirstChildOfClass(""Humanoid"")
	repeat wait() until IYMouse
	if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end

	local T = getRoot(Players.LocalPlayer.Character)
	local CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
	local lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
	local SPEED = 0

	local function FLY()
		FLYING = true
		local BG = Instance.new('BodyGyro')
		local BV = Instance.new('BodyVelocity')
		BG.P = 9e4
		BG.Parent = T
		BV.Parent = T
		BG.maxTorque = Vector3.new(9e9, 9e9, 9e9)
		BG.cframe = T.CFrame
		BV.velocity = Vector3.new(0, 0, 0)
		BV.maxForce = Vector3.new(9e9, 9e9, 9e9)
		task.spawn(function()
			repeat wait()
				if not vfly and Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
					Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = true
				end
				if CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0 then
					SPEED = 50
				elseif not (CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0) and SPEED ~= 0 then
					SPEED = 0
				end
				if (CONTROL.L + CONTROL.R) ~= 0 or (CONTROL.F + CONTROL.B) ~= 0 or (CONTROL.Q + CONTROL.E) ~= 0 then
					BV.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (CONTROL.F + CONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(CONTROL.L + CONTROL.R, (CONTROL.F + CONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
					lCONTROL = {F = CONTROL.F, B = CONTROL.B, L = CONTROL.L, R = CONTROL.R}
				elseif (CONTROL.L + CONTROL.R) == 0 and (CONTROL.F + CONTROL.B) == 0 and (CONTROL.Q + CONTROL.E) == 0 and SPEED ~= 0 then
					BV.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (lCONTROL.F + lCONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(lCONTROL.L + lCONTROL.R, (lCONTROL.F + lCONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
				else
					BV.velocity = Vector3.new(0, 0, 0)
				end
				BG.cframe = workspace.CurrentCamera.CoordinateFrame
			until not FLYING
			CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
			lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
			SPEED = 0
			BG:Destroy()
			BV:Destroy()
			if Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
				Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
			end
		end)
	end
	flyKeyDown = IYMouse.KeyDown:Connect(function(KEY)
		if KEY:lower() == 'w' then
			CONTROL.F = (vfly and vehicleflyspeed or iyflyspeed)
		elseif KEY:lower() == 's' then
			CONTROL.B = - (vfly and vehicleflyspeed or iyflyspeed)
		elseif KEY:lower() == 'a' then
			CONTROL.L = - (vfly and vehicleflyspeed or iyflyspeed)
		elseif KEY:lower() == 'd' then 
			CONTROL.R = (vfly and vehicleflyspeed or iyflyspeed)
		elseif QEfly and KEY:lower() == 'e' then
			CONTROL.Q = (vfly and vehicleflyspeed or iyflyspeed)*2
		elseif QEfly and KEY:lower() == 'q' then
			CONTROL.E = -(vfly and vehicleflyspeed or iyflyspeed)*2
		end
		pcall(function() workspace.CurrentCamera.CameraType = Enum.CameraType.Track end)
	end)
	flyKeyUp = IYMouse.KeyUp:Connect(function(KEY)
		if KEY:lower() == 'w' then
			CONTROL.F = 0
		elseif KEY:lower() == 's' then
			CONTROL.B = 0
		elseif KEY:lower() == 'a' then
			CONTROL.L = 0
		elseif KEY:lower() == 'd' then
			CONTROL.R = 0
		elseif KEY:lower() == 'e' then
			CONTROL.Q = 0
		elseif KEY:lower() == 'q' then
			CONTROL.E = 0
		end
	end)
	FLY()
end

function NOFLY()
	FLYING = false
	if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end
	if Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
		Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
	end
	pcall(function() workspace.CurrentCamera.CameraType = Enum.CameraType.Custom end)
end

local velocityHandlerName = randomString()
local gyroHandlerName = randomString()
local mfly1
local mfly2

local unmobilefly = function(speaker)
	pcall(function()
		FLYING = false
		local root = getRoot(speaker.Character)
		root:FindFirstChild(velocityHandlerName):Destroy()
		root:FindFirstChild(gyroHandlerName):Destroy()
		speaker.Character:FindFirstChildWhichIsA(""Humanoid"").PlatformStand = false
		mfly1:Disconnect()
		mfly2:Disconnect()
	end)
end

local mobilefly = function(speaker, vfly)
	unmobilefly(speaker)
	FLYING = true

	local root = getRoot(speaker.Character)
	local camera = workspace.CurrentCamera
	local v3none = Vector3.new()
	local v3zero = Vector3.new(0, 0, 0)
	local v3inf = Vector3.new(9e9, 9e9, 9e9)

	local controlModule = require(speaker.PlayerScripts:WaitForChild(""PlayerModule""):WaitForChild(""ControlModule""))
	local bv = Instance.new(""BodyVelocity"")
	bv.Name = velocityHandlerName
	bv.Parent = root
	bv.MaxForce = v3zero
	bv.Velocity = v3zero

	local bg = Instance.new(""BodyGyro"")
	bg.Name = gyroHandlerName
	bg.Parent = root
	bg.MaxTorque = v3inf
	bg.P = 1000
	bg.D = 50

	mfly1 = speaker.CharacterAdded:Connect(function()
		local bv = Instance.new(""BodyVelocity"")
		bv.Name = velocityHandlerName
		bv.Parent = root
		bv.MaxForce = v3zero
		bv.Velocity = v3zero

		local bg = Instance.new(""BodyGyro"")
		bg.Name = gyroHandlerName
		bg.Parent = root
		bg.MaxTorque = v3inf
		bg.P = 1000
		bg.D = 50
	end)

	mfly2 = RunService.RenderStepped:Connect(function()
		root = getRoot(speaker.Character)
		camera = workspace.CurrentCamera
		if speaker.Character:FindFirstChildWhichIsA(""Humanoid"") and root and root:FindFirstChild(velocityHandlerName) and root:FindFirstChild(gyroHandlerName) then
			local humanoid = speaker.Character:FindFirstChildWhichIsA(""Humanoid"")
			local VelocityHandler = root:FindFirstChild(velocityHandlerName)
			local GyroHandler = root:FindFirstChild(gyroHandlerName)

			VelocityHandler.MaxForce = v3inf
			GyroHandler.MaxTorque = v3inf
			if not vfly then humanoid.PlatformStand = true end
			GyroHandler.CFrame = camera.CoordinateFrame
			VelocityHandler.Velocity = v3none

			local direction = controlModule:GetMoveVector()
			if direction.X > 0 then
				VelocityHandler.Velocity = VelocityHandler.Velocity + camera.CFrame.RightVector * (direction.X * ((vfly and vehicleflyspeed or iyflyspeed) * 50))
			end
			if direction.X < 0 then
				VelocityHandler.Velocity = VelocityHandler.Velocity + camera.CFrame.RightVector * (direction.X * ((vfly and vehicleflyspeed or iyflyspeed) * 50))
			end
			if direction.Z > 0 then
				VelocityHandler.Velocity = VelocityHandler.Velocity - camera.CFrame.LookVector * (direction.Z * ((vfly and vehicleflyspeed or iyflyspeed) * 50))
			end
			if direction.Z < 0 then
				VelocityHandler.Velocity = VelocityHandler.Velocity - camera.CFrame.LookVector * (direction.Z * ((vfly and vehicleflyspeed or iyflyspeed) * 50))
			end
		end
	end)
end

addcmd('fly',{},function(args, speaker)
	if not IsOnMobile then
		NOFLY()
		wait()
		sFLY()
	else
		mobilefly(speaker)
	end
	if args[1] and isNumber(args[1]) then
		iyflyspeed = args[1]
	end
end)

addcmd('flyspeed',{'flysp'},function(args, speaker)
	local speed = args[1] or 1
	if isNumber(speed) then
		iyflyspeed = speed
	end
end)

addcmd('unfly',{'nofly','novfly','unvehiclefly','novehiclefly','unvfly'},function(args, speaker)
	if not IsOnMobile then NOFLY() else unmobilefly(speaker) end
end)

addcmd('vfly',{'vehiclefly'},function(args, speaker)
	if not IsOnMobile then
		NOFLY()
		wait()
		sFLY(true)
	else
		mobilefly(speaker, true)
	end
	if args[1] and isNumber(args[1]) then
		vehicleflyspeed = args[1]
	end
end)

addcmd('togglevfly',{},function(args, speaker)
	if FLYING then
		if not IsOnMobile then NOFLY() else unmobilefly(speaker) end
	else
		if not IsOnMobile then sFLY(true) else mobilefly(speaker, true) end
	end
end)

addcmd('vflyspeed',{'vflysp','vehicleflyspeed','vehicleflysp'},function(args, speaker)
	local speed = args[1] or 1
	if isNumber(speed) then
		vehicleflyspeed = speed
	end
end)

addcmd('qefly',{'flyqe'},function(args, speaker)
	if args[1] == 'false' then
		QEfly = false
	else
		QEfly = true
	end
end)

addcmd('togglefly',{},function(args, speaker)
	if FLYING then
		if not IsOnMobile then NOFLY() else unmobilefly(speaker) end
	else
		if not IsOnMobile then sFLY() else mobilefly(speaker) end
	end
end)

CFspeed = 50
addcmd('cframefly', {'cfly'}, function(args, speaker)
	-- Full credit to peyton#9148 (apeyton)
	speaker.Character:FindFirstChildOfClass('Humanoid').PlatformStand = true
	local Head = speaker.Character:WaitForChild(""Head"")
	Head.Anchored = true
	if CFloop then CFloop:Disconnect() end
	CFloop = RunService.Heartbeat:Connect(function(deltaTime)
		local moveDirection = speaker.Character:FindFirstChildOfClass('Humanoid').MoveDirection * (CFspeed * deltaTime)
		local headCFrame = Head.CFrame
		local cameraCFrame = workspace.CurrentCamera.CFrame
		local cameraOffset = headCFrame:ToObjectSpace(cameraCFrame).Position
		cameraCFrame = cameraCFrame * CFrame.new(-cameraOffset.X, -cameraOffset.Y, -cameraOffset.Z + 1)
		local cameraPosition = cameraCFrame.Position
		local headPosition = headCFrame.Position

		local objectSpaceVelocity = CFrame.new(cameraPosition, Vector3.new(headPosition.X, cameraPosition.Y, headPosition.Z)):VectorToObjectSpace(moveDirection)
		Head.CFrame = CFrame.new(headPosition) * (cameraCFrame - cameraPosition) * CFrame.new(objectSpaceVelocity)
	end)
end)

addcmd('uncframefly',{'uncfly'},function(args, speaker)
	if CFloop then
		CFloop:Disconnect()
		speaker.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
		local Head = speaker.Character:WaitForChild(""Head"")
		Head.Anchored = false
	end
end)

addcmd('cframeflyspeed',{'cflyspeed'},function(args, speaker)
	if isNumber(args[1]) then
		CFspeed = args[1]
	end
end)

Floating = false
floatName = randomString()
addcmd('float', {'platform'},function(args, speaker)
	Floating = true
	local pchar = speaker.Character
	if pchar and not pchar:FindFirstChild(floatName) then
		task.spawn(function()
			local Float = Instance.new('Part')
			Float.Name = floatName
			Float.Parent = pchar
			Float.Transparency = 1
			Float.Size = Vector3.new(2,0.2,1.5)
			Float.Anchored = true
			local FloatValue = -3.1
			Float.CFrame = getRoot(pchar).CFrame * CFrame.new(0,FloatValue,0)
			notify('Float','Float Enabled (Q = down & E = up)')
			qUp = IYMouse.KeyUp:Connect(function(KEY)
				if KEY == 'q' then
					FloatValue = FloatValue + 0.5
				end
			end)
			eUp = IYMouse.KeyUp:Connect(function(KEY)
				if KEY == 'e' then
					FloatValue = FloatValue - 0.5
				end
			end)
			qDown = IYMouse.KeyDown:Connect(function(KEY)
				if KEY == 'q' then
					FloatValue = FloatValue - 0.5
				end
			end)
			eDown = IYMouse.KeyDown:Connect(function(KEY)
				if KEY == 'e' then
					FloatValue = FloatValue + 0.5
				end
			end)
			floatDied = speaker.Character:FindFirstChildOfClass('Humanoid').Died:Connect(function()
				FloatingFunc:Disconnect()
				Float:Destroy()
				qUp:Disconnect()
				eUp:Disconnect()
				qDown:Disconnect()
				eDown:Disconnect()
				floatDied:Disconnect()
			end)
			local function FloatPadLoop()
				if pchar:FindFirstChild(floatName) and getRoot(pchar) then
					Float.CFrame = getRoot(pchar).CFrame * CFrame.new(0,FloatValue,0)
				else
					FloatingFunc:Disconnect()
					Float:Destroy()
					qUp:Disconnect()
					eUp:Disconnect()
					qDown:Disconnect()
					eDown:Disconnect()
					floatDied:Disconnect()
				end
			end			
			FloatingFunc = RunService.Heartbeat:Connect(FloatPadLoop)
		end)
	end
end)

addcmd('unfloat',{'nofloat','unplatform','noplatform'},function(args, speaker)
	Floating = false
	local pchar = speaker.Character
	notify('Float','Float Disabled')
	if pchar:FindFirstChild(floatName) then
		pchar:FindFirstChild(floatName):Destroy()
	end
	if floatDied then
		FloatingFunc:Disconnect()
		qUp:Disconnect()
		eUp:Disconnect()
		qDown:Disconnect()
		eDown:Disconnect()
		floatDied:Disconnect()
	end
end)

addcmd('togglefloat',{},function(args, speaker)
	if Floating then
		execCmd('unfloat')
	else
		execCmd('float')
	end
end)

swimming = false
local oldgrav = workspace.Gravity
local swimbeat = nil
addcmd('swim',{},function(args, speaker)
	if not swimming and speaker and speaker.Character and speaker.Character:FindFirstChildWhichIsA(""Humanoid"") then
		oldgrav = workspace.Gravity
		workspace.Gravity = 0
		local swimDied = function()
			workspace.Gravity = oldgrav
			swimming = false
		end
		local Humanoid = speaker.Character:FindFirstChildWhichIsA(""Humanoid"")
		gravReset = Humanoid.Died:Connect(swimDied)
		local enums = Enum.HumanoidStateType:GetEnumItems()
		table.remove(enums, table.find(enums, Enum.HumanoidStateType.None))
		for i, v in pairs(enums) do
			Humanoid:SetStateEnabled(v, false)
		end
		Humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
		swimbeat = RunService.Heartbeat:Connect(function()
			pcall(function()
				speaker.Character.HumanoidRootPart.Velocity = ((Humanoid.MoveDirection ~= Vector3.new() or UserInputService:IsKeyDown(Enum.KeyCode.Space)) and speaker.Character.HumanoidRootPart.Velocity or Vector3.new())
			end)
		end)
		swimming = true
	end
end)

addcmd('unswim',{'noswim'},function(args, speaker)
	if speaker and speaker.Character and speaker.Character:FindFirstChildWhichIsA(""Humanoid"") then
		workspace.Gravity = oldgrav
		swimming = false
		if gravReset then
			gravReset:Disconnect()
		end
		if swimbeat ~= nil then
			swimbeat:Disconnect()
			swimbeat = nil
		end
		local Humanoid = speaker.Character:FindFirstChildWhichIsA(""Humanoid"")
		local enums = Enum.HumanoidStateType:GetEnumItems()
		table.remove(enums, table.find(enums, Enum.HumanoidStateType.None))
		for i, v in pairs(enums) do
			Humanoid:SetStateEnabled(v, true)
		end
	end
end)

addcmd('toggleswim',{},function(args, speaker)
	if swimming then
		execCmd('unswim')
	else
		execCmd('swim')
	end
end)

addcmd('setwaypoint',{'swp','setwp','spos','saveposition','savepos'},function(args, speaker)
	local WPName = tostring(getstring(1))
	if getRoot(speaker.Character) then
		notify('Modified Waypoints',""Created waypoint: ""..getstring(1))
		local torso = getRoot(speaker.Character)
		WayPoints[#WayPoints + 1] = {NAME = WPName, COORD = {math.floor(torso.Position.X), math.floor(torso.Position.Y), math.floor(torso.Position.Z)}, GAME = PlaceId}
		if AllWaypoints ~= nil then
			AllWaypoints[#AllWaypoints + 1] = {NAME = WPName, COORD = {math.floor(torso.Position.X), math.floor(torso.Position.Y), math.floor(torso.Position.Z)}, GAME = PlaceId}
		end
	end	
	refreshwaypoints()
	updatesaves()
end)

addcmd('waypointpos',{'wpp','setwaypointposition','setpos','setwaypoint','setwaypointpos'},function(args, speaker)
	local WPName = tostring(getstring(1))
	if getRoot(speaker.Character) then
		notify('Modified Waypoints',""Created waypoint: ""..getstring(1))
		WayPoints[#WayPoints + 1] = {NAME = WPName, COORD = {args[2], args[3], args[4]}, GAME = PlaceId}
		if AllWaypoints ~= nil then
			AllWaypoints[#AllWaypoints + 1] = {NAME = WPName, COORD = {args[2], args[3], args[4]}, GAME = PlaceId}
		end
	end	
	refreshwaypoints()
	updatesaves()
end)

addcmd('waypoints',{'positions'},function(args, speaker)
	if SettingsOpen == false then SettingsOpen = true
		Settings:TweenPosition(UDim2.new(0, 0, 0, 45), ""InOut"", ""Quart"", 0.5, true, nil)
		CMDsF.Visible = false
	end
	KeybindsFrame:TweenPosition(UDim2.new(0, 0, 0, 175), ""InOut"", ""Quart"", 0.5, true, nil)
	AliasesFrame:TweenPosition(UDim2.new(0, 0, 0, 175), ""InOut"", ""Quart"", 0.5, true, nil)
	PluginsFrame:TweenPosition(UDim2.new(0, 0, 0, 175), ""InOut"", ""Quart"", 0.5, true, nil)
	PositionsFrame:TweenPosition(UDim2.new(0, 0, 0, 0), ""InOut"", ""Quart"", 0.5, true, nil)
	wait(0.5)
	SettingsHolder.Visible = false
	maximizeHolder()
end)

waypointParts = {}
addcmd('showwaypoints',{'showwp','showwps'},function(args, speaker)
	execCmd('hidewaypoints')
	wait()
	for i,_ in pairs(WayPoints) do
		local x = WayPoints[i].COORD[1]
		local y = WayPoints[i].COORD[2]
		local z = WayPoints[i].COORD[3]
		local part = Instance.new(""Part"")
		part.Size = Vector3.new(5,5,5)
		part.CFrame = CFrame.new(x,y,z)
		part.Parent = workspace
		part.Anchored = true
		part.CanCollide = false
		table.insert(waypointParts,part)
		local view = Instance.new(""BoxHandleAdornment"")
		view.Adornee = part
		view.AlwaysOnTop = true
		view.ZIndex = 10
		view.Size = part.Size
		view.Parent = part
	end
	for i,v in pairs(pWayPoints) do
		local view = Instance.new(""BoxHandleAdornment"")
		view.Adornee = pWayPoints[i].COORD[1]
		view.AlwaysOnTop = true
		view.ZIndex = 10
		view.Size = pWayPoints[i].COORD[1].Size
		view.Parent = pWayPoints[i].COORD[1]
		table.insert(waypointParts,view)
	end
end)

addcmd('hidewaypoints',{'hidewp','hidewps'},function(args, speaker)
	for i,v in pairs(waypointParts) do
		v:Destroy()
	end
	waypointParts = {}
end)

addcmd('waypoint',{'wp','lpos','loadposition','loadpos'},function(args, speaker)
	local WPName = tostring(getstring(1))
	if speaker.Character then
		for i,_ in pairs(WayPoints) do
			if tostring(WayPoints[i].NAME):lower() == tostring(WPName):lower() then
				local x = WayPoints[i].COORD[1]
				local y = WayPoints[i].COORD[2]
				local z = WayPoints[i].COORD[3]
				getRoot(speaker.Character).CFrame = CFrame.new(x,y,z)
			end
		end
		for i,_ in pairs(pWayPoints) do
			if tostring(pWayPoints[i].NAME):lower() == tostring(WPName):lower() then
				getRoot(speaker.Character).CFrame = CFrame.new(pWayPoints[i].COORD[1].Position)
			end
		end
	end
end)

tweenSpeed = 1
addcmd('tweenspeed',{'tspeed'},function(args, speaker)
	local newSpeed = args[1] or 1
	if tonumber(newSpeed) then
		tweenSpeed = tonumber(newSpeed)
	end
end)

addcmd('tweenwaypoint',{'twp'},function(args, speaker)
	local WPName = tostring(getstring(1))
	if speaker.Character then
		for i,_ in pairs(WayPoints) do
			local x = WayPoints[i].COORD[1]
			local y = WayPoints[i].COORD[2]
			local z = WayPoints[i].COORD[3]
			if tostring(WayPoints[i].NAME):lower() == tostring(WPName):lower() then
				TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = CFrame.new(x,y,z)}):Play()
			end
		end
		for i,_ in pairs(pWayPoints) do
			if tostring(pWayPoints[i].NAME):lower() == tostring(WPName):lower() then
				TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = CFrame.new(pWayPoints[i].COORD[1].Position)}):Play()
			end
		end
	end
end)

addcmd('walktowaypoint',{'wtwp'},function(args, speaker)
	local WPName = tostring(getstring(1))
	if speaker.Character then
		for i,_ in pairs(WayPoints) do
			local x = WayPoints[i].COORD[1]
			local y = WayPoints[i].COORD[2]
			local z = WayPoints[i].COORD[3]
			if tostring(WayPoints[i].NAME):lower() == tostring(WPName):lower() then
				if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
					speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
					wait(.1)
				end
				speaker.Character:FindFirstChildOfClass('Humanoid').WalkToPoint = Vector3.new(x,y,z)
			end
		end
		for i,_ in pairs(pWayPoints) do
			if tostring(pWayPoints[i].NAME):lower() == tostring(WPName):lower() then
				if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
					speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
					wait(.1)
				end
				speaker.Character:FindFirstChildOfClass('Humanoid').WalkToPoint = Vector3.new(pWayPoints[i].COORD[1].Position)
			end
		end
	end
end)

addcmd('deletewaypoint',{'dwp','dpos','deleteposition','deletepos'},function(args, speaker)
	for i,v in pairs(WayPoints) do
		if v.NAME:lower() == tostring(getstring(1)):lower() then
			notify('Modified Waypoints',""Deleted waypoint: "" .. v.NAME)
			table.remove(WayPoints, i)
		end
	end
	if AllWaypoints ~= nil and #AllWaypoints > 0 then
		for i,v in pairs(AllWaypoints) do
			if v.NAME:lower() == tostring(getstring(1)):lower() then
				if not v.GAME or v.GAME == PlaceId then
					table.remove(AllWaypoints, i)
				end
			end
		end
	end
	for i,v in pairs(pWayPoints) do
		if v.NAME:lower() == tostring(getstring(1)):lower() then
			notify('Modified Waypoints',""Deleted waypoint: "" .. v.NAME)
			table.remove(pWayPoints, i)
		end
	end
	refreshwaypoints()
	updatesaves()
end)

addcmd('clearwaypoints',{'cwp','clearpositions','cpos','clearpos'},function(args, speaker)
	WayPoints = {}
	pWayPoints = {}
	refreshwaypoints()
	updatesaves()
	AllWaypoints = {}
	notify('Modified Waypoints','Removed all waypoints')
end)

addcmd('cleargamewaypoints',{'cgamewp'},function(args, speaker)
	for i,v in pairs(WayPoints) do
		if v.GAME == PlaceId then
			table.remove(WayPoints, i)
		end
	end
	if AllWaypoints ~= nil and #AllWaypoints > 0 then
		for i,v in pairs(AllWaypoints) do
			if v.GAME == PlaceId then
				table.remove(AllWaypoints, i)
			end
		end
	end
	for i,v in pairs(pWayPoints) do
		if v.GAME == PlaceId then
			table.remove(pWayPoints, i)
		end
	end
	refreshwaypoints()
	updatesaves()
	notify('Modified Waypoints','Deleted game waypoints')
end)


local coreGuiTypeNames = {
	-- predefined aliases
	[""inventory""] = Enum.CoreGuiType.Backpack,
	[""leaderboard""] = Enum.CoreGuiType.PlayerList,
	[""emotes""] = Enum.CoreGuiType.EmotesMenu
}

-- Load the full list of enums
for _, enumItem in ipairs(Enum.CoreGuiType:GetEnumItems()) do
	coreGuiTypeNames[enumItem.Name:lower()] = enumItem
end

addcmd('enable',{},function(args, speaker)
	local input = args[1] and args[1]:lower()
	if input then
		if input == ""reset"" then
			StarterGui:SetCore(""ResetButtonCallback"", true)
		else
			local coreGuiType = coreGuiTypeNames[input]
			if coreGuiType then
				StarterGui:SetCoreGuiEnabled(coreGuiType, true)
			end
		end
	end
end)

addcmd('disable',{},function(args, speaker)
	local input = args[1] and args[1]:lower()
	if input then
		if input == ""reset"" then
			StarterGui:SetCore(""ResetButtonCallback"", false)
		else
			local coreGuiType = coreGuiTypeNames[input]
			if coreGuiType then
				StarterGui:SetCoreGuiEnabled(coreGuiType, false)
			end
		end
	end
end)


local invisGUIS = {}
addcmd('showguis',{},function(args, speaker)
	for i,v in pairs(speaker:FindFirstChildWhichIsA(""PlayerGui""):GetDescendants()) do
		if (v:IsA(""Frame"") or v:IsA(""ImageLabel"") or v:IsA(""ScrollingFrame"")) and not v.Visible then
			v.Visible = true
			if not FindInTable(invisGUIS,v) then
				table.insert(invisGUIS,v)
			end
		end
	end
end)

addcmd('unshowguis',{},function(args, speaker)
	for i,v in pairs(invisGUIS) do
		v.Visible = false
	end
	invisGUIS = {}
end)

local hiddenGUIS = {}
addcmd('hideguis',{},function(args, speaker)
	for i,v in pairs(speaker:FindFirstChildWhichIsA(""PlayerGui""):GetDescendants()) do
		if (v:IsA(""Frame"") or v:IsA(""ImageLabel"") or v:IsA(""ScrollingFrame"")) and v.Visible then
			v.Visible = false
			if not FindInTable(hiddenGUIS,v) then
				table.insert(hiddenGUIS,v)
			end
		end
	end
end)

addcmd('unhideguis',{},function(args, speaker)
	for i,v in pairs(hiddenGUIS) do
		v.Visible = true
	end
	hiddenGUIS = {}
end)

function deleteGuisAtPos()
	pcall(function()
		local guisAtPosition = Players.LocalPlayer.PlayerGui:GetGuiObjectsAtPosition(IYMouse.X, IYMouse.Y)
		for _, gui in pairs(guisAtPosition) do
			if gui.Visible == true then
				gui:Destroy()
			end
		end
	end)
end

local deleteGuiInput
addcmd('guidelete',{},function(args, speaker)
	deleteGuiInput = UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
		if not gameProcessedEvent then
			if input.KeyCode == Enum.KeyCode.Backspace then
				deleteGuisAtPos()
			end
		end
	end)
	notify('GUI Delete Enabled','Hover over a GUI and press backspace to delete it')
end)

addcmd('unguidelete',{'noguidelete'},function(args, speaker)
	if deleteGuiInput then deleteGuiInput:Disconnect() end
	notify('GUI Delete Disabled','GUI backspace delete has been disabled')
end)

local wasStayOpen = StayOpen
addcmd('hideiy',{},function(args, speaker)
	isHidden = true
	wasStayOpen = StayOpen
	if StayOpen == true then
		StayOpen = false
		On.BackgroundTransparency = 1
	end
	minimizeNum = 0
	minimizeHolder()
	if not (args[1] and tostring(args[1]) == 'nonotify') then notify('IY Hidden','You can press the prefix key to access the command bar') end
end)

addcmd('showiy',{'unhideiy'},function(args, speaker)
	isHidden = false
	minimizeNum = -20
	if wasStayOpen then
		maximizeHolder()
		StayOpen = true
		On.BackgroundTransparency = 0
	else
		minimizeHolder()
	end
end)

addcmd('rec', {'record'}, function(args, speaker)
	return COREGUI:ToggleRecording()
end)

addcmd('screenshot', {'scrnshot'}, function(args, speaker)
	return COREGUI:TakeScreenshot()
end)

addcmd('togglefs', {'togglefullscreen'}, function(args, speaker)
	return GuiService:ToggleFullscreen()
end)

addcmd('inspect', {'examine'}, function(args, speaker)
	for _, v in ipairs(getPlayer(args[1], speaker)) do
		GuiService:CloseInspectMenu()
		GuiService:InspectPlayerFromUserId(Players[v].UserId)
	end
end)

addcmd(""savegame"", {""saveplace""}, function(args, speaker)
    if saveinstance then
        notify(""Loading"", ""Downloading game. This will take a while"")
        saveinstance()
        notify(""Game Saved"", ""Saved place to the workspace folder within your exploit folder."")
    else
        notify(""Incompatible Exploit"", ""Your exploit does not support this command (missing saveinstance)"")
    end
end)

addcmd('clearerror',{'clearerrors'},function(args, speaker)
	GuiService:ClearError()
end)

addcmd('clientantikick',{'antikick'},function(args, speaker)
	if not hookmetamethod then 
		return notify('Incompatible Exploit','Your exploit does not support this command (missing hookmetamethod)')
	end
	local LocalPlayer = Players.LocalPlayer
	local oldhmmi
	local oldhmmnc
	oldhmmi = hookmetamethod(game, ""__index"", function(self, method)
		if self == LocalPlayer and method:lower() == ""kick"" then
			return error(""Expected ':' not '.' calling member function Kick"", 2)
		end
		return oldhmmi(self, method)
	end)
	oldhmmnc = hookmetamethod(game, ""__namecall"", function(self, ...)
		if self == LocalPlayer and getnamecallmethod():lower() == ""kick"" then
			return
		end
		return oldhmmnc(self, ...)
	end)

	notify('Client Antikick','Client anti kick is now active (only effective on localscript kick)')
end)

allow_rj = true
addcmd('clientantiteleport',{'antiteleport'},function(args, speaker)
	if not hookmetamethod then 
		return notify('Incompatible Exploit','Your exploit does not support this command (missing hookmetamethod)')
	end
	local TeleportService = TeleportService
	local oldhmmi
	local oldhmmnc
	oldhmmi = hookmetamethod(game, ""__index"", function(self, method)
		if self == TeleportService then
			if method:lower() == ""teleport"" then
				return error(""Expected ':' not '.' calling member function Kick"", 2)
			elseif method == ""TeleportToPlaceInstance"" then
				return error(""Expected ':' not '.' calling member function TeleportToPlaceInstance"", 2)
			end
		end
		return oldhmmi(self, method)
	end)
	oldhmmnc = hookmetamethod(game, ""__namecall"", function(self, ...)
		if self == TeleportService and getnamecallmethod():lower() == ""teleport"" or getnamecallmethod() == ""TeleportToPlaceInstance"" then
			return
		end
		return oldhmmnc(self, ...)
	end)

	notify('Client AntiTP','Client anti teleport is now active (only effective on localscript teleport)')
end)

addcmd('allowrejoin',{'allowrj'},function(args, speaker)
	if args[1] and args[1] == 'false' then
		allow_rj = false
		notify('Client AntiTP','Allow rejoin set to false')
	else
		allow_rj = true
		notify('Client AntiTP','Allow rejoin set to true')
	end
end)

addcmd('cancelteleport',{'canceltp'},function(args, speaker)
	TeleportService:TeleportCancel()
end)

addcmd('volume',{'vol'},function(args, speaker)
	local level = args[1]/10
	UserSettings():GetService(""UserGameSettings"").MasterVolume = level
end)

addcmd('antilag',{'boostfps','lowgraphics'},function(args, speaker)
	local Terrain = workspace:FindFirstChildOfClass('Terrain')
	Terrain.WaterWaveSize = 0
	Terrain.WaterWaveSpeed = 0
	Terrain.WaterReflectance = 0
	Terrain.WaterTransparency = 0
	Lighting.GlobalShadows = false
	Lighting.FogEnd = 9e9
	settings().Rendering.QualityLevel = 1
	for i,v in pairs(game:GetDescendants()) do
		if v:IsA(""Part"") or v:IsA(""UnionOperation"") or v:IsA(""MeshPart"") or v:IsA(""CornerWedgePart"") or v:IsA(""TrussPart"") then
			v.Material = ""Plastic""
			v.Reflectance = 0
		elseif v:IsA(""Decal"") then
			v.Transparency = 1
		elseif v:IsA(""ParticleEmitter"") or v:IsA(""Trail"") then
			v.Lifetime = NumberRange.new(0)
		elseif v:IsA(""Explosion"") then
			v.BlastPressure = 1
			v.BlastRadius = 1
		end
	end
	for i,v in pairs(Lighting:GetDescendants()) do
		if v:IsA(""BlurEffect"") or v:IsA(""SunRaysEffect"") or v:IsA(""ColorCorrectionEffect"") or v:IsA(""BloomEffect"") or v:IsA(""DepthOfFieldEffect"") then
			v.Enabled = false
		end
	end
	workspace.DescendantAdded:Connect(function(child)
		task.spawn(function()
			if child:IsA('ForceField') then
				RunService.Heartbeat:Wait()
				child:Destroy()
			elseif child:IsA('Sparkles') then
				RunService.Heartbeat:Wait()
				child:Destroy()
			elseif child:IsA('Smoke') or child:IsA('Fire') then
				RunService.Heartbeat:Wait()
				child:Destroy()
			end
		end)
	end)
end)

addcmd('setfpscap', {'fpscap', 'maxfps'}, function(args, speaker)
	if setfpscap and type(setfpscap) == ""function"" then
		local num = args[1] or 1e6
		if num == 'none' then
			return setfpscap(1e6)
		elseif num > 0 then
			return setfpscap(num)
		else
			return notify('Invalid argument', ""Please provide a number above 0 or 'none'."")
		end
	else
		return notify('Incompatible Exploit', 'Your exploit does not support this command (missing setfpscap)')
	end
end)

addcmd('notify',{},function(args, speaker)
	notify(getstring(1))
end)

addcmd('lastcommand',{'lastcmd'},function(args, speaker)
	if cmdHistory[1]:sub(1,11) ~= 'lastcommand' and cmdHistory[1]:sub(1,7) ~= 'lastcmd' then
		execCmd(cmdHistory[1])
	end
end)

addcmd('esp',{},function(args, speaker)
	if not CHMSenabled then
		ESPenabled = true
		for i,v in pairs(Players:GetPlayers()) do
			if v.Name ~= speaker.Name then
				ESP(v)
			end
		end
	else
		notify('ESP','Disable chams (nochams) before using esp')
	end
end)

addcmd('noesp',{'unesp'},function(args, speaker)
	ESPenabled = false
	for i,c in pairs(COREGUI:GetChildren()) do
		if string.sub(c.Name, -4) == '_ESP' then
			c:Destroy()
		end
	end
end)

addcmd('esptransparency',{},function(args, speaker)
	espTransparency = (args[1] and isNumber(args[1]) and args[1]) or 0.3
	updatesaves()
end)

local espParts = {}
local partEspTrigger = nil
function partAdded(part)
	if #espParts > 0 then
		if FindInTable(espParts,part.Name:lower()) then
			local a = Instance.new(""BoxHandleAdornment"")
			a.Name = part.Name:lower()..""_PESP""
			a.Parent = part
			a.Adornee = part
			a.AlwaysOnTop = true
			a.ZIndex = 0
			a.Size = part.Size
			a.Transparency = espTransparency
			a.Color = BrickColor.new(""Lime green"")
		end
	else
		partEspTrigger:Disconnect()
		partEspTrigger = nil
	end
end

addcmd('partesp',{},function(args, speaker)
	local partEspName = getstring(1):lower()
	if not FindInTable(espParts,partEspName) then
		table.insert(espParts,partEspName)
		for i,v in pairs(workspace:GetDescendants()) do
			if v:IsA(""BasePart"") and v.Name:lower() == partEspName then
				local a = Instance.new(""BoxHandleAdornment"")
				a.Name = partEspName..""_PESP""
				a.Parent = v
				a.Adornee = v
				a.AlwaysOnTop = true
				a.ZIndex = 0
				a.Size = v.Size
				a.Transparency = espTransparency
				a.Color = BrickColor.new(""Lime green"")
			end
		end
	end
	if partEspTrigger == nil then
		partEspTrigger = workspace.DescendantAdded:Connect(partAdded)
	end
end)

addcmd('unpartesp',{'nopartesp'},function(args, speaker)
	if args[1] then
		local partEspName = getstring(1):lower()
		if FindInTable(espParts,partEspName) then
			table.remove(espParts, GetInTable(espParts, partEspName))
		end
		for i,v in pairs(workspace:GetDescendants()) do
			if v:IsA(""BoxHandleAdornment"") and v.Name == partEspName..'_PESP' then
				v:Destroy()
			end
		end
	else
		partEspTrigger:Disconnect()
		partEspTrigger = nil
		espParts = {}
		for i,v in pairs(workspace:GetDescendants()) do
			if v:IsA(""BoxHandleAdornment"") and v.Name:sub(-5) == '_PESP' then
				v:Destroy()
			end
		end
	end
end)

addcmd('chams',{},function(args, speaker)
	if not ESPenabled then
		CHMSenabled = true
		for i,v in pairs(Players:GetPlayers()) do
			if v.Name ~= speaker.Name then
				CHMS(v)
			end
		end
	else
		notify('Chams','Disable ESP (noesp) before using chams')
	end
end)

addcmd('nochams',{'unchams'},function(args, speaker)
	CHMSenabled = false
	for i,v in pairs(Players:GetPlayers()) do
		local chmsplr = v
		for i,c in pairs(COREGUI:GetChildren()) do
			if c.Name == chmsplr.Name..'_CHMS' then
				c:Destroy()
			end
		end
	end
end)

addcmd('locate',{},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		Locate(Players[v])
	end
end)

addcmd('nolocate',{'unlocate'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	if args[1] then
		for i,v in pairs(players) do
			for i,c in pairs(COREGUI:GetChildren()) do
				if c.Name == Players[v].Name..'_LC' then
					c:Destroy()
				end
			end
		end
	else
		for i,c in pairs(COREGUI:GetChildren()) do
			if string.sub(c.Name, -3) == '_LC' then
				c:Destroy()
			end
		end
	end
end)

viewing = nil
addcmd('view',{'spectate'},function(args, speaker)
	StopFreecam()
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		if viewDied then
			viewDied:Disconnect()
			viewChanged:Disconnect()
		end
		viewing = Players[v]
		workspace.CurrentCamera.CameraSubject = viewing.Character
		notify('Spectate','Viewing ' .. Players[v].Name)
		local function viewDiedFunc()
			repeat wait() until Players[v].Character ~= nil and getRoot(Players[v].Character)
			workspace.CurrentCamera.CameraSubject = viewing.Character
		end
		viewDied = Players[v].CharacterAdded:Connect(viewDiedFunc)
		local function viewChangedFunc()
			workspace.CurrentCamera.CameraSubject = viewing.Character
		end
		viewChanged = workspace.CurrentCamera:GetPropertyChangedSignal(""CameraSubject""):Connect(viewChangedFunc)
	end
end)

addcmd('viewpart',{'viewp'},function(args, speaker)
	StopFreecam()
	if args[1] then
		for i,v in pairs(workspace:GetDescendants()) do
			if v.Name:lower() == getstring(1):lower() and v:IsA(""BasePart"") then
				wait(0.1)
				workspace.CurrentCamera.CameraSubject = v
			end
		end
	end
end)

addcmd('unview',{'unspectate'},function(args, speaker)
	StopFreecam()
	if viewing ~= nil then
		viewing = nil
		notify('Spectate','View turned off')
	end
	if viewDied then
		viewDied:Disconnect()
		viewChanged:Disconnect()
	end
	workspace.CurrentCamera.CameraSubject = speaker.Character
end)


fcRunning = false
local Camera = workspace.CurrentCamera
workspace:GetPropertyChangedSignal(""CurrentCamera""):Connect(function()
	local newCamera = workspace.CurrentCamera
	if newCamera then
		Camera = newCamera
	end
end)

local INPUT_PRIORITY = Enum.ContextActionPriority.High.Value

Spring = {} do
	Spring.__index = Spring

	function Spring.new(freq, pos)
		local self = setmetatable({}, Spring)
		self.f = freq
		self.p = pos
		self.v = pos*0
		return self
	end

	function Spring:Update(dt, goal)
		local f = self.f*2*math.pi
		local p0 = self.p
		local v0 = self.v

		local offset = goal - p0
		local decay = math.exp(-f*dt)

		local p1 = goal + (v0*dt - offset*(f*dt + 1))*decay
		local v1 = (f*dt*(offset*f - v0) + v0)*decay

		self.p = p1
		self.v = v1

		return p1
	end

	function Spring:Reset(pos)
		self.p = pos
		self.v = pos*0
	end
end

local cameraPos = Vector3.new()
local cameraRot = Vector2.new()

local velSpring = Spring.new(5, Vector3.new())
local panSpring = Spring.new(5, Vector2.new())

Input = {} do

	keyboard = {
		W = 0,
		A = 0,
		S = 0,
		D = 0,
		E = 0,
		Q = 0,
		Up = 0,
		Down = 0,
		LeftShift = 0,
	}

	mouse = {
		Delta = Vector2.new(),
	}

	NAV_KEYBOARD_SPEED = Vector3.new(1, 1, 1)
	PAN_MOUSE_SPEED = Vector2.new(1, 1)*(math.pi/64)
	NAV_ADJ_SPEED = 0.75
	NAV_SHIFT_MUL = 0.25

	navSpeed = 1

	function Input.Vel(dt)
		navSpeed = math.clamp(navSpeed + dt*(keyboard.Up - keyboard.Down)*NAV_ADJ_SPEED, 0.01, 4)

		local kKeyboard = Vector3.new(
			keyboard.D - keyboard.A,
			keyboard.E - keyboard.Q,
			keyboard.S - keyboard.W
		)*NAV_KEYBOARD_SPEED

		local shift = UserInputService:IsKeyDown(Enum.KeyCode.LeftShift)

		return (kKeyboard)*(navSpeed*(shift and NAV_SHIFT_MUL or 1))
	end

	function Input.Pan(dt)
		local kMouse = mouse.Delta*PAN_MOUSE_SPEED
		mouse.Delta = Vector2.new()
		return kMouse
	end

	do
		function Keypress(action, state, input)
			keyboard[input.KeyCode.Name] = state == Enum.UserInputState.Begin and 1 or 0
			return Enum.ContextActionResult.Sink
		end

		function MousePan(action, state, input)
			local delta = input.Delta
			mouse.Delta = Vector2.new(-delta.y, -delta.x)
			return Enum.ContextActionResult.Sink
		end

		function Zero(t)
			for k, v in pairs(t) do
				t[k] = v*0
			end
		end

		function Input.StartCapture()
			ContextActionService:BindActionAtPriority(""FreecamKeyboard"",Keypress,false,INPUT_PRIORITY,
				Enum.KeyCode.W,
				Enum.KeyCode.A,
				Enum.KeyCode.S,
				Enum.KeyCode.D,
				Enum.KeyCode.E,
				Enum.KeyCode.Q,
				Enum.KeyCode.Up,
				Enum.KeyCode.Down
			)
			ContextActionService:BindActionAtPriority(""FreecamMousePan"",MousePan,false,INPUT_PRIORITY,Enum.UserInputType.MouseMovement)
		end

		function Input.StopCapture()
			navSpeed = 1
			Zero(keyboard)
			Zero(mouse)
			ContextActionService:UnbindAction(""FreecamKeyboard"")
			ContextActionService:UnbindAction(""FreecamMousePan"")
		end
	end
end

function GetFocusDistance(cameraFrame)
	local znear = 0.1
	local viewport = Camera.ViewportSize
	local projy = 2*math.tan(cameraFov/2)
	local projx = viewport.x/viewport.y*projy
	local fx = cameraFrame.rightVector
	local fy = cameraFrame.upVector
	local fz = cameraFrame.lookVector

	local minVect = Vector3.new()
	local minDist = 512

	for x = 0, 1, 0.5 do
		for y = 0, 1, 0.5 do
			local cx = (x - 0.5)*projx
			local cy = (y - 0.5)*projy
			local offset = fx*cx - fy*cy + fz
			local origin = cameraFrame.p + offset*znear
			local _, hit = workspace:FindPartOnRay(Ray.new(origin, offset.unit*minDist))
			local dist = (hit - origin).magnitude
			if minDist > dist then
				minDist = dist
				minVect = offset.unit
			end
		end
	end

	return fz:Dot(minVect)*minDist
end

local function StepFreecam(dt)
	local vel = velSpring:Update(dt, Input.Vel(dt))
	local pan = panSpring:Update(dt, Input.Pan(dt))

	local zoomFactor = math.sqrt(math.tan(math.rad(70/2))/math.tan(math.rad(cameraFov/2)))

	cameraRot = cameraRot + pan*Vector2.new(0.75, 1)*8*(dt/zoomFactor)
	cameraRot = Vector2.new(math.clamp(cameraRot.x, -math.rad(90), math.rad(90)), cameraRot.y%(2*math.pi))

	local cameraCFrame = CFrame.new(cameraPos)*CFrame.fromOrientation(cameraRot.x, cameraRot.y, 0)*CFrame.new(vel*Vector3.new(1, 1, 1)*64*dt)
	cameraPos = cameraCFrame.p

	Camera.CFrame = cameraCFrame
	Camera.Focus = cameraCFrame*CFrame.new(0, 0, -GetFocusDistance(cameraCFrame))
	Camera.FieldOfView = cameraFov
end

local PlayerState = {} do
	mouseBehavior = """"
	mouseIconEnabled = """"
	cameraType = """"
	cameraFocus = """"
	cameraCFrame = """"
	cameraFieldOfView = """"

	function PlayerState.Push()
		cameraFieldOfView = Camera.FieldOfView
		Camera.FieldOfView = 70

		cameraType = Camera.CameraType
		Camera.CameraType = Enum.CameraType.Custom

		cameraCFrame = Camera.CFrame
		cameraFocus = Camera.Focus

		mouseIconEnabled = UserInputService.MouseIconEnabled
		UserInputService.MouseIconEnabled = true

		mouseBehavior = UserInputService.MouseBehavior
		UserInputService.MouseBehavior = Enum.MouseBehavior.Default
	end

	function PlayerState.Pop()
		Camera.FieldOfView = 70

		Camera.CameraType = cameraType
		cameraType = nil

		Camera.CFrame = cameraCFrame
		cameraCFrame = nil

		Camera.Focus = cameraFocus
		cameraFocus = nil

		UserInputService.MouseIconEnabled = mouseIconEnabled
		mouseIconEnabled = nil

		UserInputService.MouseBehavior = mouseBehavior
		mouseBehavior = nil
	end
end

function StartFreecam(pos)
	if fcRunning then
		StopFreecam()
	end
	local cameraCFrame = Camera.CFrame
	if pos then
		cameraCFrame = pos
	end
	cameraRot = Vector2.new()
	cameraPos = cameraCFrame.p
	cameraFov = Camera.FieldOfView

	velSpring:Reset(Vector3.new())
	panSpring:Reset(Vector2.new())

	PlayerState.Push()
	RunService:BindToRenderStep(""Freecam"", Enum.RenderPriority.Camera.Value, StepFreecam)
	Input.StartCapture()
	fcRunning = true
end

function StopFreecam()
	if not fcRunning then return end
	Input.StopCapture()
	RunService:UnbindFromRenderStep(""Freecam"")
	PlayerState.Pop()
	workspace.Camera.FieldOfView = 70
	fcRunning = false
end

addcmd('freecam',{'fc'},function(args, speaker)
	StartFreecam()
end)

addcmd('freecampos',{'fcpos','fcp','freecamposition','fcposition'},function(args, speaker)
	if not args[1] then return end
	local freecamPos = CFrame.new(args[1],args[2],args[3])
	StartFreecam(freecamPos)
end)

addcmd('freecamwaypoint',{'fcwp'},function(args, speaker)
	local WPName = tostring(getstring(1))
	if speaker.Character then
		for i,_ in pairs(WayPoints) do
			local x = WayPoints[i].COORD[1]
			local y = WayPoints[i].COORD[2]
			local z = WayPoints[i].COORD[3]
			if tostring(WayPoints[i].NAME):lower() == tostring(WPName):lower() then
				StartFreecam(CFrame.new(x,y,z))
			end
		end
		for i,_ in pairs(pWayPoints) do
			if tostring(pWayPoints[i].NAME):lower() == tostring(WPName):lower() then
				StartFreecam(CFrame.new(pWayPoints[i].COORD[1].Position))
			end
		end
	end
end)

addcmd('freecamgoto',{'fcgoto','freecamtp','fctp'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		StartFreecam(getRoot(Players[v].Character).CFrame)
	end
end)

addcmd('unfreecam',{'nofreecam','unfc','nofc'},function(args, speaker)
	StopFreecam()
end)

addcmd('freecamspeed',{'fcspeed'},function(args, speaker)
	local FCspeed = args[1] or 1
	if isNumber(FCspeed) then
		NAV_KEYBOARD_SPEED = Vector3.new(FCspeed, FCspeed, FCspeed)
	end
end)

addcmd('notifyfreecamposition',{'notifyfcpos'},function(args, speaker)
	if fcRunning then
		local X,Y,Z = workspace.CurrentCamera.CFrame.Position.X,workspace.CurrentCamera.CFrame.Position.Y,workspace.CurrentCamera.CFrame.Position.Z
		local Format, Round = string.format, math.round
		notify(""Current Position"", Format(""%s, %s, %s"", Round(X), Round(Y), Round(Z)))
	end
end)

addcmd('copyfreecamposition',{'copyfcpos'},function(args, speaker)
	if fcRunning then
		local X,Y,Z = workspace.CurrentCamera.CFrame.Position.X,workspace.CurrentCamera.CFrame.Position.Y,workspace.CurrentCamera.CFrame.Position.Z
		local Format, Round = string.format, math.round
		toClipboard(Format(""%s, %s, %s"", Round(X), Round(Y), Round(Z)))
	end
end)

addcmd('gotocamera',{'gotocam','tocam'},function(args, speaker)
	getRoot(speaker.Character).CFrame = workspace.Camera.CFrame
end)

addcmd('tweengotocamera',{'tweengotocam','tgotocam','ttocam'},function(args, speaker)
	TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = workspace.Camera.CFrame}):Play()
end)

addcmd('fov',{},function(args, speaker)
	local fov = args[1] or 70
	if isNumber(fov) then
		workspace.CurrentCamera.FieldOfView = fov
	end
end)

local preMaxZoom = Players.LocalPlayer.CameraMaxZoomDistance
local preMinZoom = Players.LocalPlayer.CameraMinZoomDistance
addcmd('lookat',{},function(args, speaker)
	if speaker.CameraMaxZoomDistance ~= 0.5 then
		preMaxZoom = speaker.CameraMaxZoomDistance
		preMinZoom = speaker.CameraMinZoomDistance
	end
	speaker.CameraMaxZoomDistance = 0.5
	speaker.CameraMinZoomDistance = 0.5
	wait()
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		local target = Players[v].Character
		if target and target:FindFirstChild('Head') then
			workspace.CurrentCamera.CFrame = CFrame.new(workspace.CurrentCamera.CFrame.p, target.Head.CFrame.p)
			wait(0.1)
		end
	end
	speaker.CameraMaxZoomDistance = preMaxZoom
	speaker.CameraMinZoomDistance = preMinZoom
end)

addcmd('fixcam',{'restorecam'},function(args, speaker)
	StopFreecam()
	execCmd('unview')
	workspace.CurrentCamera:remove()
	wait(.1)
	repeat wait() until speaker.Character ~= nil
	workspace.CurrentCamera.CameraSubject = speaker.Character:FindFirstChildWhichIsA('Humanoid')
	workspace.CurrentCamera.CameraType = ""Custom""
	speaker.CameraMinZoomDistance = 0.5
	speaker.CameraMaxZoomDistance = 400
	speaker.CameraMode = ""Classic""
	speaker.Character.Head.Anchored = false
end)

addcmd('enableshiftlock',{'enablesl','shiftlock'},function(args, speaker)
	speaker.DevEnableMouseLock = true
	notify('Shiftlock','Shift lock is now available')
end)

addcmd('firstp',{},function(args, speaker)
	speaker.CameraMode = ""LockFirstPerson""
end)

addcmd('thirdp',{},function(args, speaker)
	speaker.CameraMode = ""Classic""
end)

addcmd('noclipcam', {'nccam'}, function(args, speaker)
	local sc = (debug and debug.setconstant) or setconstant
	local gc = (debug and debug.getconstants) or getconstants
	if not sc or not getgc or not gc then
		return notify('Incompatible Exploit', 'Your exploit does not support this command (missing setconstant or getconstants or getgc)')
	end
	local pop = speaker.PlayerScripts.PlayerModule.CameraModule.ZoomController.Popper
	for _, v in pairs(getgc()) do
		if type(v) == 'function' and getfenv(v).script == pop then
			for i, v1 in pairs(gc(v)) do
				if tonumber(v1) == .25 then
					sc(v, i, 0)
				elseif tonumber(v1) == 0 then
					sc(v, i, .25)
				end
			end
		end
	end
end)

addcmd('maxzoom',{},function(args, speaker)
	speaker.CameraMaxZoomDistance = args[1]
end)

addcmd('minzoom',{},function(args, speaker)
	speaker.CameraMinZoomDistance = args[1]
end)

addcmd('camdistance',{},function(args, speaker)
	local camMax = speaker.CameraMaxZoomDistance
	local camMin = speaker.CameraMinZoomDistance
	if camMax < tonumber(args[1]) then
		camMax = args[1]
	end
	speaker.CameraMaxZoomDistance = args[1]
	speaker.CameraMinZoomDistance = args[1]
	wait()
	speaker.CameraMaxZoomDistance = camMax
	speaker.CameraMinZoomDistance = camMin
end)

addcmd('unlockws',{'unlockworkspace'},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v:IsA(""BasePart"") then
			v.Locked = false
		end
	end
end)

addcmd('lockws',{'lockworkspace'},function(args, speaker) 
	for i,v in pairs(workspace:GetDescendants()) do
		if v:IsA(""BasePart"") then
			v.Locked = true
		end
	end
end)

addcmd('delete',{'remove'},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v.Name:lower() == getstring(1):lower() then
			v:Destroy()
		end
	end
	notify('Item(s) Deleted','Deleted ' ..getstring(1))
end)

addcmd('deleteclass',{'removeclass','deleteclassname','removeclassname','dc'},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v.ClassName:lower() == getstring(1):lower() then
			v:Destroy()
		end
	end
	notify('Item(s) Deleted','Deleted items with ClassName ' ..getstring(1))
end)

addcmd('chardelete',{'charremove','cd'},function(args, speaker)
	for i,v in pairs(speaker.Character:GetDescendants()) do
		if v.Name:lower() == getstring(1):lower() then
			v:Destroy()
		end
	end
	notify('Item(s) Deleted','Deleted ' ..getstring(1))
end)

addcmd('chardeleteclass',{'charremoveclass','chardeleteclassname','charremoveclassname','cdc'},function(args, speaker)
	for i,v in pairs(speaker.Character:GetDescendants()) do
		if v.ClassName:lower() == getstring(1):lower() then
			v:Destroy()
		end
	end
	notify('Item(s) Deleted','Deleted items with ClassName ' ..getstring(1))
end)

addcmd('deletevelocity',{'dv','removevelocity','removeforces'},function(args, speaker)
	for i,v in pairs(speaker.Character:GetDescendants()) do
		if v:IsA(""BodyVelocity"") or v:IsA(""BodyGyro"") or v:IsA(""RocketPropulsion"") or v:IsA(""BodyThrust"") or v:IsA(""BodyAngularVelocity"") or v:IsA(""AngularVelocity"") or v:IsA(""BodyForce"") or v:IsA(""VectorForce"") or v:IsA(""LineForce"") then
			v:Destroy()
		end
	end
end)

addcmd('deleteinvisparts',{'deleteinvisibleparts','dip'},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v:IsA(""BasePart"") and v.Transparency == 1 and v.CanCollide then
			v:Destroy()
		end
	end
end)

local shownParts = {}
addcmd('invisibleparts',{'invisparts'},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v:IsA(""BasePart"") and v.Transparency == 1 then
			if not table.find(shownParts,v) then
				table.insert(shownParts,v)
			end
			v.Transparency = 0
		end
	end
end)

addcmd('uninvisibleparts',{'uninvisparts'},function(args, speaker)
	for i,v in pairs(shownParts) do
		v.Transparency = 1
	end
	shownParts = {}
end)

addcmd('btools',{},function(args, speaker)
	for i = 1, 4 do
		local Tool = Instance.new(""HopperBin"")
		Tool.BinType = i
		Tool.Name = randomString()
		Tool.Parent = speaker:FindFirstChildOfClass(""Backpack"")
	end
end)

addcmd('f3x',{'fex'},function(args, speaker)
	loadstring(game:GetObjects(""rbxassetid://6695644299"")[1].Source)()
end)

addcmd('partpath',{'partname'},function(args, speaker)
	selectPart()
end)

addcmd('antiafk',{'antiidle'},function(args, speaker)
	local GC = getconnections or get_signal_cons
	if GC then
		for i,v in pairs(GC(Players.LocalPlayer.Idled)) do
			if v[""Disable""] then
				v[""Disable""](v)
			elseif v[""Disconnect""] then
				v[""Disconnect""](v)
			end
		end
	else
		local VirtualUser = cloneref(game:GetService(""VirtualUser""))
		Players.LocalPlayer.Idled:Connect(function()
			VirtualUser:CaptureController()
			VirtualUser:ClickButton2(Vector2.new())
		end)
	end
	if not (args[1] and tostring(args[1]) == 'nonotify') then notify('Anti Idle','Anti idle is enabled') end
end)

addcmd(""datalimit"", {}, function(args, speaker)
	if tonumber(args[1]) then
		NetworkClient:SetOutgoingKBPSLimit(args[1])
	end
end)

addcmd(""replicationlag"", {""backtrack""}, function(args, speaker)
	if tonumber(args[1]) then
		settings():GetService(""NetworkSettings"").IncomingReplicationLag = args[1]
	end
end)

addcmd(""noprompts"", {""nopurchaseprompts""}, function(args, speaker)
	COREGUI.PurchasePrompt.Enabled = false
end)

addcmd(""showprompts"", {""showpurchaseprompts""}, function(args, speaker)
	COREGUI.PurchasePrompt.Enabled = true
end)

promptNewRig = function(speaker, rig)
	local humanoid = speaker.Character:FindFirstChildWhichIsA(""Humanoid"")
	if humanoid then
		AvatarEditorService:PromptSaveAvatar(humanoid.HumanoidDescription, Enum.HumanoidRigType[rig])
		local result = AvatarEditorService.PromptSaveAvatarCompleted:Wait()
		if result == Enum.AvatarPromptResult.Success then
			execCmd(""reset"")
		end
	end
end

addcmd(""promptr6"", {}, function(args, speaker)
	promptNewRig(speaker, ""R6"")
end)

addcmd(""promptr15"", {}, function(args, speaker)
	promptNewRig(speaker, ""R15"")
end)

addcmd(""wallwalk"", {""walkonwalls""}, function(args, speaker)
    loadstring(game:HttpGet(""https://raw.githubusercontent.com/infyiff/backup/main/wallwalker.lua""))()
end)

addcmd('age',{},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	local ages = {}
	for i,v in pairs(players) do
		local p = Players[v]
		table.insert(ages, p.Name..""'s age is: ""..p.AccountAge)
	end
	notify('Account Age',table.concat(ages, ',\n'))
end)

addcmd('chatage',{},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	local ages = {}
	for i,v in pairs(players) do
		local p = Players[v]
		table.insert(ages, p.Name..""'s age is: ""..p.AccountAge)
	end
	local chatString = table.concat(ages, ', ')
	chatMessage(chatString)
end)

addcmd('joindate',{'jd'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	local dates = {}
	notify(""Loading"",'Hold on a sec')
	for i,v in pairs(players) do
		local user = game:HttpGet(""https://users.roblox.com/v1/users/""..Players[v].UserId)
		local json = HttpService:JSONDecode(user)
		local date = json[""created""]:sub(1,10)
		local splitDates = string.split(date,""-"")
		table.insert(dates,Players[v].Name.."" joined: ""..splitDates[2]..""/""..splitDates[3]..""/""..splitDates[1])
	end
	notify('Join Date (Month/Day/Year)',table.concat(dates, ',\n'))
end)

addcmd('chatjoindate',{'cjd'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	local dates = {}
	notify(""Loading"",'Hold on a sec')
	for i,v in pairs(players) do
		local user = game:HttpGet(""https://users.roblox.com/v1/users/""..Players[v].UserId)
		local json = HttpService:JSONDecode(user)
		local date = json[""created""]:sub(1,10)
		local splitDates = string.split(date,""-"")
		table.insert(dates,Players[v].Name.."" joined: ""..splitDates[2]..""/""..splitDates[3]..""/""..splitDates[1])
	end
	local chatString = table.concat(dates, ', ')
	chatMessage(chatString)
end)

addcmd('copyname',{'copyuser'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		local name = tostring(Players[v].Name)
		toClipboard(name)
	end
end)

addcmd('userid',{'id'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		local id = tostring(Players[v].UserId)
		notify('User ID',id)
	end
end)

addcmd('copyid',{'copyuserid'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		local id = tostring(Players[v].UserId)
		toClipboard(id)
	end
end)

addcmd('creatorid',{'creator'},function(args, speaker)
	if game.CreatorType == Enum.CreatorType.User then
		notify('Creator ID',game.CreatorId)
	elseif game.CreatorType == Enum.CreatorType.Group then
		local OwnerID = GroupService:GetGroupInfoAsync(game.CreatorId).Owner.Id
		speaker.UserId = OwnerID
		notify('Creator ID',OwnerID)
	end
end)

addcmd('copycreatorid',{'copycreator'},function(args, speaker)
	if game.CreatorType == Enum.CreatorType.User then
		toClipboard(game.CreatorId)
		notify('Copied ID','Copied creator ID to clipboard')
	elseif game.CreatorType == Enum.CreatorType.Group then
		local OwnerID = GroupService:GetGroupInfoAsync(game.CreatorId).Owner.Id
		toClipboard(OwnerID)
		notify('Copied ID','Copied creator ID to clipboard')
	end
end)

addcmd('setcreatorid',{'setcreator'},function(args, speaker)
	if game.CreatorType == Enum.CreatorType.User then
		speaker.UserId = game.CreatorId
		notify('Set ID','Set UserId to '..game.CreatorId)
	elseif game.CreatorType == Enum.CreatorType.Group then
		local OwnerID = GroupService:GetGroupInfoAsync(game.CreatorId).Owner.Id
		speaker.UserId = OwnerID
		notify('Set ID','Set UserId to '..OwnerID)
	end
end)

addcmd('appearanceid',{'aid'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		local aid = tostring(Players[v].CharacterAppearanceId)
		notify('Appearance ID',aid)
	end
end)

addcmd('copyappearanceid',{'caid'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		local aid = tostring(Players[v].CharacterAppearanceId)
		toClipboard(aid)
	end
end)

addcmd('norender',{},function(args, speaker)
	RunService:Set3dRenderingEnabled(false)
end)

addcmd('render',{},function(args, speaker)
	RunService:Set3dRenderingEnabled(true)
end)

addcmd('2022materials',{'use2022materials'},function(args, speaker)
	if sethidden then
		sethidden(MaterialService, ""Use2022Materials"", true)
	else
		notify('Incompatible Exploit','Your exploit does not support this command (missing sethiddenproperty)')
	end
end)

addcmd('un2022materials',{'unuse2022materials'},function(args, speaker)
	if sethidden then
		sethidden(MaterialService, ""Use2022Materials"", false)
	else
		notify('Incompatible Exploit','Your exploit does not support this command (missing sethiddenproperty)')
	end
end)

addcmd('goto',{'to'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		if Players[v].Character ~= nil then
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			getRoot(speaker.Character).CFrame = getRoot(Players[v].Character).CFrame + Vector3.new(3,1,0)
		end
	end
	execCmd('breakvelocity')
end)

addcmd('tweengoto',{'tgoto','tto','tweento'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		if Players[v].Character ~= nil then
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = getRoot(Players[v].Character).CFrame + Vector3.new(3,1,0)}):Play()
		end
	end
	execCmd('breakvelocity')
end)

addcmd('vehiclegoto',{'vgoto','vtp','vehicletp'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		if Players[v].Character ~= nil then
			local seat = speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart
			local vehicleModel = seat:FindFirstAncestorWhichIsA(""Model"")
			vehicleModel:MoveTo(getRoot(Players[v].Character).Position)
		end
	end
end)

addcmd('pulsetp',{'ptp'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		if Players[v].Character ~= nil then
			local startPos = getRoot(speaker.Character).CFrame
			local seconds = args[2] or 1
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			getRoot(speaker.Character).CFrame = getRoot(Players[v].Character).CFrame + Vector3.new(3,1,0)
			wait(seconds)
			getRoot(speaker.Character).CFrame = startPos
		end
	end
	execCmd('breakvelocity')
end)

local vnoclipParts = {}
addcmd('vehiclenoclip',{'vnoclip'},function(args, speaker)
	vnoclipParts = {}
	local seat = speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart
	local vehicleModel = seat.Parent
	repeat
		if vehicleModel.ClassName ~= ""Model"" then
			vehicleModel = vehicleModel.Parent
		end
	until vehicleModel.ClassName == ""Model""
	wait(0.1)
	execCmd('noclip')
	for i,v in pairs(vehicleModel:GetDescendants()) do
		if v:IsA(""BasePart"") and v.CanCollide then
			table.insert(vnoclipParts,v)
			v.CanCollide = false
		end
	end
end)

addcmd(""vehicleclip"", {""vclip"", ""unvnoclip"", ""unvehiclenoclip""}, function(args, speaker)
	execCmd(""clip"")
	for i, v in pairs(vnoclipParts) do
		v.CanCollide = true
	end
	vnoclipParts = {}
end)

addcmd(""togglevnoclip"", {}, function(args, speaker)
	execCmd(Clip and ""vnoclip"" or ""vclip"")
end)

addcmd('clientbring',{'cbring'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		if Players[v].Character ~= nil then
			if Players[v].Character:FindFirstChildOfClass('Humanoid') then
				Players[v].Character:FindFirstChildOfClass('Humanoid').Sit = false
			end
			wait()
			getRoot(Players[v].Character).CFrame = getRoot(speaker.Character).CFrame + Vector3.new(3,1,0)
		end
	end
end)

local bringT = {}
addcmd('loopbring',{},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		task.spawn(function()
			if Players[v].Name ~= speaker.Name and not FindInTable(bringT, Players[v].Name) then
				table.insert(bringT, Players[v].Name)
				local plrName = Players[v].Name
				local pchar=Players[v].Character
				local distance = 3
				if args[2] and isNumber(args[2]) then
					distance = args[2]
				end
				local lDelay = 0
				if args[3] and isNumber(args[3]) then
					lDelay = args[3]
				end
				repeat
					for i,c in pairs(players) do
						if Players:FindFirstChild(v) then
							pchar = Players[v].Character
							if pchar~= nil and Players[v].Character ~= nil and getRoot(pchar) and speaker.Character ~= nil and getRoot(speaker.Character) then
								getRoot(pchar).CFrame = getRoot(speaker.Character).CFrame + Vector3.new(distance,1,0)
							end
							wait(lDelay)
						else 
							for a,b in pairs(bringT) do if b == plrName then table.remove(bringT, a) end end
						end
					end
				until not FindInTable(bringT, plrName)
			end
		end)
	end
end)

addcmd('unloopbring',{'noloopbring'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		task.spawn(function()
			for a,b in pairs(bringT) do if b == Players[v].Name then table.remove(bringT, a) end end
		end)
	end
end)

local walkto = false
local waypointwalkto = false
addcmd('walkto',{'follow'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		if Players[v].Character ~= nil then
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			walkto = true
			repeat wait()
				speaker.Character:FindFirstChildOfClass('Humanoid'):MoveTo(getRoot(Players[v].Character).Position)
			until Players[v].Character == nil or not getRoot(Players[v].Character) or walkto == false
		end
	end
end)

addcmd('pathfindwalkto',{'pathfindfollow'},function(args, speaker)
	walkto = false
	wait()
	local players = getPlayer(args[1], speaker)
	local hum = Players.LocalPlayer.Character:FindFirstChildOfClass(""Humanoid"")
	local path = PathService:CreatePath()
	for i,v in pairs(players)do
		if Players[v].Character ~= nil then
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			walkto = true
			repeat wait()
				local success, response = pcall(function()
					path:ComputeAsync(getRoot(speaker.Character).Position, getRoot(Players[v].Character).Position)
					local waypoints = path:GetWaypoints()
					local distance 
					for waypointIndex, waypoint in pairs(waypoints) do
						local waypointPosition = waypoint.Position
						hum:MoveTo(waypointPosition)
						repeat 
							distance = (waypointPosition - hum.Parent.PrimaryPart.Position).magnitude
							wait()
						until
						distance <= 5
					end	 
				end)
				if not success then
					speaker.Character:FindFirstChildOfClass('Humanoid'):MoveTo(getRoot(Players[v].Character).Position)
				end
			until Players[v].Character == nil or not getRoot(Players[v].Character) or walkto == false
		end
	end
end)

addcmd('pathfindwalktowaypoint',{'pathfindwalktowp'},function(args, speaker)
	waypointwalkto = false
	wait()
	local WPName = tostring(getstring(1))
	local hum = Players.LocalPlayer.Character:FindFirstChildOfClass(""Humanoid"")
	local path = PathService:CreatePath()
	if speaker.Character then
		for i,_ in pairs(WayPoints) do
			if tostring(WayPoints[i].NAME):lower() == tostring(WPName):lower() then
				if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
					speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
					wait(.1)
				end
				local TrueCoords = Vector3.new(WayPoints[i].COORD[1], WayPoints[i].COORD[2], WayPoints[i].COORD[3])
				waypointwalkto = true
				repeat wait()
					local success, response = pcall(function()
						path:ComputeAsync(getRoot(speaker.Character).Position, TrueCoords)
						local waypoints = path:GetWaypoints()
						local distance 
						for waypointIndex, waypoint in pairs(waypoints) do
							local waypointPosition = waypoint.Position
							hum:MoveTo(waypointPosition)
							repeat 
								distance = (waypointPosition - hum.Parent.PrimaryPart.Position).magnitude
								wait()
							until
							distance <= 5
						end
					end)
					if not success then
						speaker.Character:FindFirstChildOfClass('Humanoid'):MoveTo(TrueCoords)
					end
				until not speaker.Character or waypointwalkto == false
			end
		end
		for i,_ in pairs(pWayPoints) do
			if tostring(pWayPoints[i].NAME):lower() == tostring(WPName):lower() then
				if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
					speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
					wait(.1)
				end
				local TrueCoords = pWayPoints[i].COORD[1].Position
				waypointwalkto = true
				repeat wait()
					local success, response = pcall(function()
						path:ComputeAsync(getRoot(speaker.Character).Position, TrueCoords)
						local waypoints = path:GetWaypoints()
						local distance 
						for waypointIndex, waypoint in pairs(waypoints) do
							local waypointPosition = waypoint.Position
							hum:MoveTo(waypointPosition)
							repeat 
								distance = (waypointPosition - hum.Parent.PrimaryPart.Position).magnitude
								wait()
							until
							distance <= 5
						end
					end)
					if not success then
						speaker.Character:FindFirstChildOfClass('Humanoid'):MoveTo(TrueCoords)
					end
				until not speaker.Character or waypointwalkto == false
			end
		end
	end
end)

addcmd('unwalkto',{'nowalkto','unfollow','nofollow'},function(args, speaker)
	walkto = false
	waypointwalkto = false
end)

addcmd(""orbit"", {}, function(args, speaker)
    execCmd(""unorbit nonotify"")
    local target = Players:FindFirstChild(getPlayer(args[1], speaker)[1])
    local root = getRoot(speaker.Character)
    local humanoid = speaker.Character:FindFirstChildWhichIsA(""Humanoid"")
    if target and target.Character and getRoot(target.Character) and root and humanoid then
        local rotation = 0
        local speed = tonumber(args[2]) or 0.2
        local distance = tonumber(args[3]) or 6
        orbit1 = RunService.Heartbeat:Connect(function()
            pcall(function()
                rotation = rotation + speed
                root.CFrame = CFrame.new(getRoot(target.Character).Position) * CFrame.Angles(0, math.rad(rotation), 0) * CFrame.new(distance, 0, 0)
            end)
        end)
        orbit2 = RunService.RenderStepped:Connect(function()
            pcall(function()
                root.CFrame = CFrame.new(root.Position, getRoot(target.Character).Position)
            end)
        end)
        orbit3 = humanoid.Died:Connect(function() execCmd(""unorbit"") end)
        orbit4 = humanoid.Seated:Connect(function(value) if value then execCmd(""unorbit"") end end)
        notify(""Orbit"", ""Started orbiting "" .. formatUsername(target))
    end
end)

addcmd(""unorbit"", {}, function(args, speaker)
    if orbit1 then orbit1:Disconnect() end
    if orbit2 then orbit2:Disconnect() end
    if orbit3 then orbit3:Disconnect() end
    if orbit4 then orbit4:Disconnect() end
    if args[1] ~= ""nonotify"" then notify(""Orbit"", ""Stopped orbiting player"") end
end)

addcmd('freeze',{'fr'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	if players ~= nil then
		for i,v in pairs(players) do
			task.spawn(function()
				for i, x in next, Players[v].Character:GetDescendants() do
					if x:IsA(""BasePart"") and not x.Anchored then
						x.Anchored = true
					end
				end
			end)
		end
	end
end)


addcmd('thaw',{'unfreeze','unfr'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	if players ~= nil then
		for i,v in pairs(players) do
			task.spawn(function()
				for i, x in next, Players[v].Character:GetDescendants() do
					if x.Name ~= floatName and x:IsA(""BasePart"") and x.Anchored then
						x.Anchored = false
					end
				end
			end)
		end
	end
end)

oofing = false
addcmd('loopoof',{},function(args, speaker)
	oofing = true
	repeat wait(0.1)
		for i,v in pairs(Players:GetPlayers()) do
			if v.Character ~= nil and v.Character:FindFirstChild'Head' then
				for _,x in pairs(v.Character.Head:GetChildren()) do
					if x:IsA'Sound' then x.Playing = true end
				end
			end
		end
	until oofing == false
end)

addcmd('unloopoof',{},function(args, speaker)
	oofing = false
end)

local notifiedRespectFiltering = false
addcmd('muteboombox',{},function(args, speaker)
	if not notifiedRespectFiltering and SoundService.RespectFilteringEnabled then notifiedRespectFiltering = true notify('RespectFilteringEnabled','RespectFilteringEnabled is set to true (the command will still work but may only be clientsided)') end
	local players = getPlayer(args[1], speaker)
	if players ~= nil then
		for i,v in pairs(players) do
			task.spawn(function()
				for i, x in next, Players[v].Character:GetDescendants() do
					if x:IsA(""Sound"") and x.Playing == true then
						x.Playing = false
					end
				end
				for i, x in next, Players[v]:FindFirstChildOfClass(""Backpack""):GetDescendants() do
					if x:IsA(""Sound"") and x.Playing == true then
						x.Playing = false
					end
				end
			end)
		end
	end
end)

addcmd('unmuteboombox',{},function(args, speaker)
	if not notifiedRespectFiltering and SoundService.RespectFilteringEnabled then notifiedRespectFiltering = true notify('RespectFilteringEnabled','RespectFilteringEnabled is set to true (the command will still work but may only be clientsided)') end
	local players = getPlayer(args[1], speaker)
	if players ~= nil then
		for i,v in pairs(players) do
			task.spawn(function()
				for i, x in next, Players[v].Character:GetDescendants() do
					if x:IsA(""Sound"") and x.Playing == false then
						x.Playing = true
					end
				end
			end)
		end
	end
end)

addcmd('reset',{},function(args, speaker)
	speaker.Character:FindFirstChildOfClass(""Humanoid""):ChangeState(Enum.HumanoidStateType.Dead)
end)

addcmd('freezeanims',{},function(args, speaker)
	local Humanoid = speaker.Character:FindFirstChildOfClass(""Humanoid"") or speaker.Character:FindFirstChildOfClass(""AnimationController"")
	local ActiveTracks = Humanoid:GetPlayingAnimationTracks()
	for _, v in pairs(ActiveTracks) do
		v:AdjustSpeed(0)
	end
end)

addcmd('unfreezeanims',{},function(args, speaker)
	local Humanoid = speaker.Character:FindFirstChildOfClass(""Humanoid"") or speaker.Character:FindFirstChildOfClass(""AnimationController"")
	local ActiveTracks = Humanoid:GetPlayingAnimationTracks()
	for _, v in pairs(ActiveTracks) do
		v:AdjustSpeed(1)
	end
end)




addcmd('respawn',{},function(args, speaker)
	respawn(speaker)
end)

addcmd('refresh',{'re'},function(args, speaker)
	refresh(speaker)
end)

addcmd('god',{},function(args, speaker)
	local Cam = workspace.CurrentCamera
	local Pos, Char = Cam.CFrame, speaker.Character
	local Human = Char and Char.FindFirstChildWhichIsA(Char, ""Humanoid"")
	local nHuman = Human.Clone(Human)
	nHuman.Parent, speaker.Character = Char, nil
	nHuman.SetStateEnabled(nHuman, 15, false)
	nHuman.SetStateEnabled(nHuman, 1, false)
	nHuman.SetStateEnabled(nHuman, 0, false)
	nHuman.BreakJointsOnDeath, Human = true, Human.Destroy(Human)
	speaker.Character, Cam.CameraSubject, Cam.CFrame = Char, nHuman, wait() and Pos
	nHuman.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None
	local Script = Char.FindFirstChild(Char, ""Animate"")
	if Script then
		Script.Disabled = true
		wait()
		Script.Disabled = false
	end
	nHuman.Health = nHuman.MaxHealth
end)

invisRunning = false
addcmd('invisible',{'invis'},function(args, speaker)
	if invisRunning then return end
	invisRunning = true
	-- Full credit to AmokahFox @V3rmillion
	local Player = speaker
	repeat wait(.1) until Player.Character
	local Character = Player.Character
	Character.Archivable = true
	local IsInvis = false
	local IsRunning = true
	local InvisibleCharacter = Character:Clone()
	InvisibleCharacter.Parent = Lighting
	local Void = workspace.FallenPartsDestroyHeight
	InvisibleCharacter.Name = """"
	local CF

	local invisFix = RunService.Stepped:Connect(function()
		pcall(function()
			local IsInteger
			if tostring(Void):find'-' then
				IsInteger = true
			else
				IsInteger = false
			end
			local Pos = Player.Character.HumanoidRootPart.Position
			local Pos_String = tostring(Pos)
			local Pos_Seperate = Pos_String:split(', ')
			local X = tonumber(Pos_Seperate[1])
			local Y = tonumber(Pos_Seperate[2])
			local Z = tonumber(Pos_Seperate[3])
			if IsInteger == true then
				if Y <= Void then
					Respawn()
				end
			elseif IsInteger == false then
				if Y >= Void then
					Respawn()
				end
			end
		end)
	end)

	for i,v in pairs(InvisibleCharacter:GetDescendants())do
		if v:IsA(""BasePart"") then
			if v.Name == ""HumanoidRootPart"" then
				v.Transparency = 1
			else
				v.Transparency = .5
			end
		end
	end

	function Respawn()
		IsRunning = false
		if IsInvis == true then
			pcall(function()
				Player.Character = Character
				wait()
				Character.Parent = workspace
				Character:FindFirstChildWhichIsA'Humanoid':Destroy()
				IsInvis = false
				InvisibleCharacter.Parent = nil
				invisRunning = false
			end)
		elseif IsInvis == false then
			pcall(function()
				Player.Character = Character
				wait()
				Character.Parent = workspace
				Character:FindFirstChildWhichIsA'Humanoid':Destroy()
				TurnVisible()
			end)
		end
	end

	local invisDied
	invisDied = InvisibleCharacter:FindFirstChildOfClass'Humanoid'.Died:Connect(function()
		Respawn()
		invisDied:Disconnect()
	end)

	if IsInvis == true then return end
	IsInvis = true
	CF = workspace.CurrentCamera.CFrame
	local CF_1 = Player.Character.HumanoidRootPart.CFrame
	Character:MoveTo(Vector3.new(0,math.pi*1000000,0))
	workspace.CurrentCamera.CameraType = Enum.CameraType.Scriptable
	wait(.2)
	workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
	InvisibleCharacter = InvisibleCharacter
	Character.Parent = Lighting
	InvisibleCharacter.Parent = workspace
	InvisibleCharacter.HumanoidRootPart.CFrame = CF_1
	Player.Character = InvisibleCharacter
	execCmd('fixcam')
	Player.Character.Animate.Disabled = true
	Player.Character.Animate.Disabled = false

	function TurnVisible()
		if IsInvis == false then return end
		invisFix:Disconnect()
		invisDied:Disconnect()
		CF = workspace.CurrentCamera.CFrame
		Character = Character
		local CF_1 = Player.Character.HumanoidRootPart.CFrame
		Character.HumanoidRootPart.CFrame = CF_1
		InvisibleCharacter:Destroy()
		Player.Character = Character
		Character.Parent = workspace
		IsInvis = false
		Player.Character.Animate.Disabled = true
		Player.Character.Animate.Disabled = false
		invisDied = Character:FindFirstChildOfClass'Humanoid'.Died:Connect(function()
			Respawn()
			invisDied:Disconnect()
		end)
		invisRunning = false
	end
	notify('Invisible','You now appear invisible to other players')
end)

addcmd(""visible"", {""vis""}, function(args, speaker)
	TurnVisible()
end)

addcmd(""toggleinvis"", {}, function(args, speaker)
	execCmd(invisRunning and ""visible"" or ""invisible"")
end)

addcmd('toolinvisible',{'toolinvis','tinvis'},function(args, speaker)
	local Char  = Players.LocalPlayer.Character
	local touched = false
	local tpdback = false
	local box = Instance.new('Part')
	box.Anchored = true
	box.CanCollide = true
	box.Size = Vector3.new(10,1,10)
	box.Position = Vector3.new(0,10000,0)
	box.Parent = workspace
	local boxTouched = box.Touched:connect(function(part)
		if (part.Parent.Name == Players.LocalPlayer.Name) then
			if touched == false then
				touched = true
				local function apply()
					local no = Char.HumanoidRootPart:Clone()
					wait(.25)
					Char.HumanoidRootPart:Destroy()
					no.Parent = Char
					Char:MoveTo(loc)
					touched = false
				end
				if Char then
					apply()
				end
			end
		end
	end)
	repeat wait() until Char
	local cleanUp
	cleanUp = Players.LocalPlayer.CharacterAdded:connect(function(char)
		boxTouched:Disconnect()
		box:Destroy()
		cleanUp:Disconnect()
	end)
	loc = Char.HumanoidRootPart.Position
	Char:MoveTo(box.Position + Vector3.new(0,.5,0))
end)

addcmd(""strengthen"", {}, function(args, speaker)
	for _, child in pairs(speaker.Character:GetDescendants()) do
		if child.ClassName == ""Part"" then
			if args[1] then
				child.CustomPhysicalProperties = PhysicalProperties.new(args[1], 0.3, 0.5)
			else
				child.CustomPhysicalProperties = PhysicalProperties.new(100, 0.3, 0.5)
			end
		end
	end
end)

addcmd(""weaken"", {}, function(args, speaker)
	for _, child in pairs(speaker.Character:GetDescendants()) do
		if child.ClassName == ""Part"" then
			if args[1] then
				child.CustomPhysicalProperties = PhysicalProperties.new(-args[1], 0.3, 0.5)
			else
				child.CustomPhysicalProperties = PhysicalProperties.new(0, 0.3, 0.5)
			end
		end
	end
end)

addcmd(""unweaken"", {""unstrengthen""}, function(args, speaker)
	for _, child in pairs(speaker.Character:GetDescendants()) do
		if child.ClassName == ""Part"" then
			child.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5)
		end
	end
end)

addcmd(""breakvelocity"", {}, function(args, speaker)
	local BeenASecond, V3 = false, Vector3.new(0, 0, 0)
	delay(1, function()
		BeenASecond = true
	end)
	while not BeenASecond do
		for _, v in ipairs(speaker.Character:GetDescendants()) do
			if v:IsA(""BasePart"") then
				v.Velocity, v.RotVelocity = V3, V3
			end
		end
		wait()
	end
end)

addcmd('jpower',{'jumppower','jp'},function(args, speaker)
	local jpower = args[1] or 50
	if isNumber(jpower) then
		if speaker.Character:FindFirstChildOfClass('Humanoid').UseJumpPower then
			speaker.Character:FindFirstChildOfClass('Humanoid').JumpPower = jpower
		else
			speaker.Character:FindFirstChildOfClass('Humanoid').JumpHeight  = jpower
		end
	end
end)

addcmd(""maxslopeangle"", {""msa""}, function(args, speaker)
	local sangle = args[1] or 89
	if isNumber(sangle) then
		speaker.Character:FindFirstChildWhichIsA(""Humanoid"").MaxSlopeAngle = sangle
	end
end)

addcmd(""gravity"", {""grav""}, function(args, speaker)
	local grav = args[1] or 196.2
	if isNumber(grav) then
		workspace.Gravity = grav
	end
end)

addcmd(""hipheight"", {""hheight""}, function(args, speaker)
	speaker.Character:FindFirstChildWhichIsA(""Humanoid"").HipHeight = args[1] or (r15(speaker) and 2.1 or 0)
end)

addcmd(""dance"", {}, function(args, speaker)
	pcall(execCmd, ""undance"")
	local dances = {""27789359"", ""30196114"", ""248263260"", ""45834924"", ""33796059"", ""28488254"", ""52155728""}
	if r15(speaker) then
		dances = {""3333432454"", ""4555808220"", ""4049037604"", ""4555782893"", ""10214311282"", ""10714010337"", ""10713981723"", ""10714372526"", ""10714076981"", ""10714392151"", ""11444443576""}
	end
	local animation = Instance.new(""Animation"")
	animation.AnimationId = ""rbxassetid://"" .. dances[math.random(1, #dances)]
	danceTrack = speaker.Character:FindFirstChildWhichIsA(""Humanoid""):LoadAnimation(animation)
	danceTrack.Looped = true
	danceTrack:Play()
end)

addcmd(""undance"", {""nodance""}, function(args, speaker)
	danceTrack:Stop()
	danceTrack:Destroy()
end)

addcmd('nolimbs',{'rlimbs'},function(args, speaker)
	if r15(speaker) then
		for i,v in pairs(speaker.Character:GetChildren()) do
			if v:IsA(""BasePart"") and
				v.Name == ""RightUpperLeg"" or
				v.Name == ""LeftUpperLeg"" or
				v.Name == ""RightUpperArm"" or
				v.Name == ""LeftUpperArm"" then
				v:Destroy()
			end
		end
	else
		for i,v in pairs(speaker.Character:GetChildren()) do
			if v:IsA(""BasePart"") and
				v.Name == ""Right Leg"" or
				v.Name == ""Left Leg"" or
				v.Name == ""Right Arm"" or
				v.Name == ""Left Arm"" then
				v:Destroy()
			end
		end
	end
end)

addcmd('noarms',{'rarms'},function(args, speaker)
	if r15(speaker) then
		for i,v in pairs(speaker.Character:GetChildren()) do
			if v:IsA(""BasePart"") and
				v.Name == ""RightUpperArm"" or
				v.Name == ""LeftUpperArm"" then
				v:Destroy()
			end
		end
	else
		for i,v in pairs(speaker.Character:GetChildren()) do
			if v:IsA(""BasePart"") and
				v.Name == ""Right Arm"" or
				v.Name == ""Left Arm"" then
				v:Destroy()
			end
		end
	end
end)

addcmd('nolegs',{'rlegs'},function(args, speaker)
	if r15(speaker) then
		for i,v in pairs(speaker.Character:GetChildren()) do
			if v:IsA(""BasePart"") and
				v.Name == ""RightUpperLeg"" or
				v.Name == ""LeftUpperLeg"" then
				v:Destroy()
			end
		end
	else
		for i,v in pairs(speaker.Character:GetChildren()) do
			if v:IsA(""BasePart"") and
				v.Name == ""Right Leg"" or
				v.Name == ""Left Leg"" then
				v:Destroy()
			end
		end
	end
end)

addcmd(""sit"", {}, function(args, speaker)
	speaker.Character:FindFirstChildWhichIsA(""Humanoid"").Sit = true
end)

addcmd(""lay"", {""laydown""}, function(args, speaker)
	local humanoid = speaker.Character:FindFirstChildWhichIsA(""Humanoid"")
	humanoid.Sit = true
	task.wait(0.1)
	humanoid.RootPart.CFrame = humanoid.RootPart.CFrame * CFrame.Angles(math.pi * 0.5, 0, 0)
	for _, v in ipairs(humanoid:GetPlayingAnimationTracks()) do
		v:Stop()
	end
end)

addcmd(""sitwalk"", {}, function(args, speaker)
	local anims = speaker.Character.Animate
	local sit = anims.sit:FindFirstChildWhichIsA(""Animation"").AnimationId
	anims.idle:FindFirstChildWhichIsA(""Animation"").AnimationId = sit
	anims.walk:FindFirstChildWhichIsA(""Animation"").AnimationId = sit
	anims.run:FindFirstChildWhichIsA(""Animation"").AnimationId = sit
	anims.jump:FindFirstChildWhichIsA(""Animation"").AnimationId = sit
	speaker.Character:FindFirstChildWhichIsA(""Humanoid"").HipHeight = not r15(speaker) and -1.5 or 0.5
end)

function noSitFunc()
	wait()
	if Players.LocalPlayer.Character:FindFirstChildWhichIsA(""Humanoid"").Sit then
		Players.LocalPlayer.Character:FindFirstChildWhichIsA(""Humanoid"").Sit = false
	end
end
addcmd(""nosit"", {}, function(args, speaker)
	if noSit then noSit:Disconnect() nositDied:Disconnect() end
	noSit = Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid'):GetPropertyChangedSignal(""Sit""):Connect(noSitFunc)
	local function nositDiedFunc()
		repeat wait() until speaker.Character ~= nil and speaker.Character:FindFirstChildOfClass(""Humanoid"")
		noSit:Disconnect()
		noSit = Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid'):GetPropertyChangedSignal(""Sit""):Connect(noSitFunc)
	end
	nositDied = speaker.CharacterAdded:Connect(nositDiedFunc)
end)

addcmd(""unnosit"", {}, function(args, speaker)
	if noSit then noSit:Disconnect() nositDied:Disconnect() end
end)

addcmd(""jump"", {}, function(args, speaker)
	speaker.Character:FindFirstChildWhichIsA(""Humanoid""):ChangeState(Enum.HumanoidStateType.Jumping)
end)

local infJump
infJumpDebounce = false
addcmd(""infjump"", {""infinitejump""}, function(args, speaker)
	if infJump then infJump:Disconnect() end
	infJumpDebounce = false
	infJump = UserInputService.JumpRequest:Connect(function()
		if not infJumpDebounce then
			infJumpDebounce = true
			speaker.Character:FindFirstChildWhichIsA(""Humanoid""):ChangeState(Enum.HumanoidStateType.Jumping)
			wait()
			infJumpDebounce = false
		end
	end)
end)

addcmd(""uninfjump"", {""uninfinitejump"", ""noinfjump"", ""noinfinitejump""}, function(args, speaker)
	if infJump then infJump:Disconnect() end
	infJumpDebounce = false
end)

local flyjump
addcmd(""flyjump"", {}, function(args, speaker)
	if flyjump then flyjump:Disconnect() end
	flyjump = UserInputService.JumpRequest:Connect(function()
		speaker.Character:FindFirstChildWhichIsA(""Humanoid""):ChangeState(Enum.HumanoidStateType.Jumping)
	end)
end)

addcmd(""unflyjump"", {""noflyjump""}, function(args, speaker)
	if flyjump then flyjump:Disconnect() end
end)

local HumanModCons = {}
addcmd('autojump',{'ajump'},function(args, speaker)
	local Char = speaker.Character
	local Human = Char and Char:FindFirstChildWhichIsA(""Humanoid"")
	local function autoJump()
		if Char and Human then
			local check1 = workspace:FindPartOnRay(Ray.new(Human.RootPart.Position-Vector3.new(0,1.5,0), Human.RootPart.CFrame.lookVector*3), Human.Parent)
			local check2 = workspace:FindPartOnRay(Ray.new(Human.RootPart.Position+Vector3.new(0,1.5,0), Human.RootPart.CFrame.lookVector*3), Human.Parent)
			if check1 or check2 then
				Human.Jump = true
			end
		end
	end
	autoJump()
	HumanModCons.ajLoop = (HumanModCons.ajLoop and HumanModCons.ajLoop:Disconnect() and false) or RunService.RenderStepped:Connect(autoJump)
	HumanModCons.ajCA = (HumanModCons.ajCA and HumanModCons.ajCA:Disconnect() and false) or speaker.CharacterAdded:Connect(function(nChar)
		Char, Human = nChar, nChar:WaitForChild(""Humanoid"")
		autoJump()
		HumanModCons.ajLoop = (HumanModCons.ajLoop and HumanModCons.ajLoop:Disconnect() and false) or RunService.RenderStepped:Connect(autoJump)
	end)
end)

addcmd('unautojump',{'noautojump', 'noajump', 'unajump'},function(args, speaker)
	HumanModCons.ajLoop = (HumanModCons.ajLoop and HumanModCons.ajLoop:Disconnect() and false) or nil
	HumanModCons.ajCA = (HumanModCons.ajCA and HumanModCons.ajCA:Disconnect() and false) or nil
end)

addcmd('edgejump',{'ejump'},function(args, speaker)
	local Char = speaker.Character
	local Human = Char and Char:FindFirstChildWhichIsA(""Humanoid"")
	-- Full credit to NoelGamer06 @V3rmillion
	local state
	local laststate
	local lastcf
	local function edgejump()
		if Char and Human then
			laststate = state
			state = Human:GetState()
			if laststate ~= state and state == Enum.HumanoidStateType.Freefall and laststate ~= Enum.HumanoidStateType.Jumping then
				Char.HumanoidRootPart.CFrame = lastcf
				Char.HumanoidRootPart.Velocity = Vector3.new(Char.HumanoidRootPart.Velocity.X, Human.JumpPower or Human.JumpHeight, Char.HumanoidRootPart.Velocity.Z)
			end
			lastcf = Char.HumanoidRootPart.CFrame
		end
	end
	edgejump()
	HumanModCons.ejLoop = (HumanModCons.ejLoop and HumanModCons.ejLoop:Disconnect() and false) or RunService.RenderStepped:Connect(edgejump)
	HumanModCons.ejCA = (HumanModCons.ejCA and HumanModCons.ejCA:Disconnect() and false) or speaker.CharacterAdded:Connect(function(nChar)
		Char, Human = nChar, nChar:WaitForChild(""Humanoid"")
		edgejump()
		HumanModCons.ejLoop = (HumanModCons.ejLoop and HumanModCons.ejLoop:Disconnect() and false) or RunService.RenderStepped:Connect(edgejump)
	end)
end)

addcmd('unedgejump',{'noedgejump', 'noejump', 'unejump'},function(args, speaker)
	HumanModCons.ejLoop = (HumanModCons.ejLoop and HumanModCons.ejLoop:Disconnect() and false) or nil
	HumanModCons.ejCA = (HumanModCons.ejCA and HumanModCons.ejCA:Disconnect() and false) or nil
end)

addcmd('team',{},function(args, speaker)
	local teamname = nil
	for a,b in pairs(Teams:GetChildren()) do
		local L_name = b.Name:lower()
		local F = L_name:find(getstring(1))
		if F == 1 then
			teamname = b 
		end
	end
	speaker.Team = teamname
end)

addcmd('nobgui',{'unbgui','nobillboardgui','unbillboardgui','noname','rohg'},function(args, speaker)
	for i,v in pairs(speaker.Character:GetDescendants())do
		if v:IsA(""BillboardGui"") or v:IsA(""SurfaceGui"") then
			v:Destroy()
		end
	end
end)

addcmd('loopnobgui',{'loopunbgui','loopnobillboardgui','loopunbillboardgui','loopnoname','looprohg'},function(args, speaker)
	for i,v in pairs(speaker.Character:GetDescendants())do
		if v:IsA(""BillboardGui"") or v:IsA(""SurfaceGui"") then
			v:Destroy()
		end
	end
	local function charPartAdded(part)
		if part:IsA(""BillboardGui"") or part:IsA(""SurfaceGui"") then
			wait()
			part:Destroy()
		end
	end
	charPartTrigger = speaker.Character.DescendantAdded:Connect(charPartAdded)
end)

addcmd('unloopnobgui',{'unloopunbgui','unloopnobillboardgui','unloopunbillboardgui','unloopnoname','unlooprohg'},function(args, speaker)
	if charPartTrigger then
		charPartTrigger:Disconnect()
	end
end)

addcmd('spasm',{},function(args, speaker)
	if not r15(speaker) then
		local pchar=speaker.Character
		local AnimationId = ""33796059""
		SpasmAnim = Instance.new(""Animation"")
		SpasmAnim.AnimationId = ""rbxassetid://""..AnimationId
		Spasm = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(SpasmAnim)
		Spasm:Play()
		Spasm:AdjustSpeed(99)
	else
		notify('R6 Required','This command requires the r6 rig type')
	end
end)

addcmd('unspasm',{'nospasm'},function(args, speaker)
	Spasm:Stop()
	SpasmAnim:Destroy()
end)

addcmd('headthrow',{},function(args, speaker)
	if not r15(speaker) then
		local AnimationId = ""35154961""
		local Anim = Instance.new(""Animation"")
		Anim.AnimationId = ""rbxassetid://""..AnimationId
		local k = speaker.Character:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
		k:Play(0)
		k:AdjustSpeed(1)
	else
		notify('R6 Required','This command requires the r6 rig type')
	end
end)

addcmd('animation',{'anim'},function(args, speaker)
	if not r15(speaker) then
		local pchar=speaker.Character
		local AnimationId = tostring(args[1])
		local Anim = Instance.new(""Animation"")
		Anim.AnimationId = ""rbxassetid://""..AnimationId
		local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
		k:Play()
		if args[2] then
			k:AdjustSpeed(tostring(args[2]))
		end
	else
		notify('R6 Required','This command requires the r6 rig type')
	end
end)

addcmd('noanim',{},function(args, speaker)
	speaker.Character.Animate.Disabled = true
end)

addcmd('reanim',{},function(args, speaker)
	speaker.Character.Animate.Disabled = false
end)

addcmd('animspeed',{},function(args, speaker)
	local Char = speaker.Character
	local Hum = Char:FindFirstChildOfClass(""Humanoid"") or Char:FindFirstChildOfClass(""AnimationController"")

	for i,v in next, Hum:GetPlayingAnimationTracks() do
		v:AdjustSpeed(tonumber(args[1] or 1))
	end
end)

addcmd('copyanimation',{'copyanim','copyemote'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for _,v in ipairs(players)do
		local char = Players[v].Character
		for _, v1 in pairs(speaker.Character:FindFirstChildOfClass('Humanoid'):GetPlayingAnimationTracks()) do
			v1:Stop()
		end
		for _, v1 in pairs(Players[v].Character:FindFirstChildOfClass('Humanoid'):GetPlayingAnimationTracks()) do
			if not string.find(v1.Animation.AnimationId, ""507768375"") then
				local ANIM = speaker.Character:FindFirstChildOfClass('Humanoid'):LoadAnimation(v1.Animation)
				ANIM:Play(.1, 1, v1.Speed)
				ANIM.TimePosition = v1.TimePosition
				task.spawn(function()
					v1.Stopped:Wait()
					ANIM:Stop()
					ANIM:Destroy()
				end)
			end
		end
	end
end)

addcmd(""copyanimationid"", {""copyanimid"", ""copyemoteid""}, function(args, speaker)
    local copyAnimId = function(player)
        local found = ""Animations Copied""

        for _, v in pairs(player.Character:FindFirstChildWhichIsA(""Humanoid""):GetPlayingAnimationTracks()) do
            local animationId = v.Animation.AnimationId
            local assetId = animationId:find(""rbxassetid://"") and animationId:match(""%d+"")

            if not string.find(animationId, ""507768375"") and not string.find(animationId, ""180435571"") then
                if assetId then
                    local success, result = pcall(function()
                        return MarketplaceService:GetProductInfo(tonumber(assetId)).Name
                    end)
                    local name = success and result or ""Failed to get name""
                    found = found .. ""\n\nName: "" .. name .. ""\nAnimation Id: "" .. animationId
                else
                    found = found .. ""\n\nAnimation Id: "" .. animationId
                end
            end
        end

        if found ~= ""Animations Copied"" then
            toClipboard(found)
        else
            notify(""Animations"", ""No animations to copy"")
        end
    end

    if args[1] then
        copyAnimId(Players[getPlayer(args[1], speaker)[1]])
    else
        copyAnimId(speaker)
    end
end)

addcmd('stopanimations',{'stopanims','stopanim'},function(args, speaker)
	local Char = speaker.Character
	local Hum = Char:FindFirstChildOfClass(""Humanoid"") or Char:FindFirstChildOfClass(""AnimationController"")

	for i,v in next, Hum:GetPlayingAnimationTracks() do
		v:Stop()
	end
end)

addcmd('refreshanimations', {'refreshanimation', 'refreshanims', 'refreshanim'}, function(args, speaker)
	local Char = speaker.Character or speaker.CharacterAdded:Wait()
	local Human = Char and Char:WaitForChild('Humanoid', 15)
	local Animate = Char and Char:WaitForChild('Animate', 15)
	if not Human or not Animate then
		return notify('Refresh Animations', 'Failed to get Animate/Humanoid')
	end
	Animate.Disabled = true
	for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
		v:Stop()
	end
	Animate.Disabled = false
end)

addcmd('allowcustomanim', {'allowcustomanimations'}, function(args, speaker)
	StarterPlayer.AllowCustomAnimations = true
	execCmd('refreshanimations')
end)

addcmd('unallowcustomanim', {'unallowcustomanimations'}, function(args, speaker)
	StarterPlayer.AllowCustomAnimations = false
	execCmd('refreshanimations')
end)

addcmd('loopanimation', {'loopanim'},function(args, speaker)
	local Char = speaker.Character
	local Human = Char and Char.FindFirstChildWhichIsA(Char, ""Humanoid"")
	for _, v in ipairs(Human.GetPlayingAnimationTracks(Human)) do
		v.Looped = true
	end
end)

addcmd('tpposition',{'tppos'},function(args, speaker)
	if #args < 3 then return end
	local tpX,tpY,tpZ = tonumber((args[1]:gsub("","", """"))),tonumber((args[2]:gsub("","", """"))),tonumber((args[3]:gsub("","", """")))
	local char = speaker.Character
	if char and getRoot(char) then
		getRoot(char).CFrame = CFrame.new(tpX,tpY,tpZ)
	end
end)

addcmd('tweentpposition',{'ttppos'},function(args, speaker)
	if #args < 3 then return end
	local tpX,tpY,tpZ = tonumber((args[1]:gsub("","", """"))),tonumber((args[2]:gsub("","", """"))),tonumber((args[3]:gsub("","", """")))
	local char = speaker.Character
	if char and getRoot(char) then
		TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = CFrame.new(tpX,tpY,tpZ)}):Play()
	end
end)

addcmd('offset',{},function(args, speaker)
	if #args < 3 then
		return 
	end
	if speaker.Character then
		speaker.Character:TranslateBy(Vector3.new(tonumber(args[1]) or 0, tonumber(args[2]) or 0, tonumber(args[3]) or 0))
	end
end)

addcmd('tweenoffset',{'toffset'},function(args, speaker)
	if #args < 3 then return end
	local tpX,tpY,tpZ = tonumber(args[1]),tonumber(args[2]),tonumber(args[3])
	local char = speaker.Character
	if char and getRoot(char) then
		TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = CFrame.new(tpX,tpY,tpZ)}):Play()
	end
end)

addcmd('clickteleport',{},function(args, speaker)
	if speaker == Players.LocalPlayer then
		notify('Click TP','Go to Settings>Keybinds>Add to set up click tp')
	end
end)

addcmd('tptool', {'teleporttool'}, function(args, speaker)
	local TpTool = Instance.new(""Tool"")
	TpTool.Name = ""Teleport Tool""
	TpTool.RequiresHandle = false
	TpTool.Parent = speaker.Backpack
	TpTool.Activated:Connect(function()
		local Char = speaker.Character or workspace:FindFirstChild(speaker.Name)
		local HRP = Char and Char:FindFirstChild(""HumanoidRootPart"")
		if not Char or not HRP then
			return warn(""Failed to find HumanoidRootPart"")
		end
		HRP.CFrame = CFrame.new(IYMouse.Hit.X, IYMouse.Hit.Y + 3, IYMouse.Hit.Z, select(4, HRP.CFrame:components()))
	end)
end)

addcmd('clickdelete',{},function(args, speaker)
	if speaker == Players.LocalPlayer then
		notify('Click Delete','Go to Settings>Keybinds>Add to set up click delete')
	end
end)

addcmd('getposition',{'getpos','notifypos','notifyposition'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		local char = Players[v].Character
		local pos = char and (getRoot(char) or char:FindFirstChildWhichIsA(""BasePart""))
		pos = pos and pos.Position
		if not pos then
			return notify('Getposition Error','Missing character')
		end
		local roundedPos = math.round(pos.X) .. "", "" .. math.round(pos.Y) .. "", "" .. math.round(pos.Z)
		notify('Current Position',roundedPos)
	end
end)

addcmd('copyposition',{'copypos'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		local char = Players[v].Character
		local pos = char and (getRoot(char) or char:FindFirstChildWhichIsA(""BasePart""))
		pos = pos and pos.Position
		if not pos then
			return notify('Getposition Error','Missing character')
		end
		local roundedPos = math.round(pos.X) .. "", "" .. math.round(pos.Y) .. "", "" .. math.round(pos.Z)
		toClipboard(roundedPos)
	end
end)

addcmd('walktopos',{'walktoposition'},function(args, speaker)
	if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
		speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
		wait(.1)
	end
	speaker.Character:FindFirstChildOfClass('Humanoid').WalkToPoint = Vector3.new(args[1],args[2],args[3])
end)

addcmd('speed',{'ws','walkspeed'},function(args, speaker)
	if args[2] then
		local speed = args[2] or 16
		if isNumber(speed) then
			speaker.Character:FindFirstChildOfClass('Humanoid').WalkSpeed = speed
		end
	else
		local speed = args[1] or 16
		if isNumber(speed) then
			speaker.Character:FindFirstChildOfClass('Humanoid').WalkSpeed = speed
		end
	end
end)

addcmd('spoofspeed',{'spoofws','spoofwalkspeed'},function(args, speaker)
	if args[1] and isNumber(args[1]) then
		if hookmetamethod then
			local char = speaker.Character
			local setspeed;
			local index; index = hookmetamethod(game, ""__index"", function(self, key)
				local keyclean = key:gsub(""\0"", """")
				if (keyclean == ""WalkSpeed"" or keyclean == ""walkSpeed"") and self:IsA(""Humanoid"") and self:IsDescendantOf(char) and not checkcaller() then
					return setspeed or args[1]
				end
				return index(self, key)
			end)
			local newindex; newindex = hookmetamethod(game, ""__newindex"", function(self, key, value)
				local keyclean = string.gsub(key, ""\0"", """")
				if (keyclean == ""WalkSpeed"" or keyclean == ""walkSpeed"") and self:IsA(""Humanoid"") and self:IsDescendantOf(char) and not checkcaller() then
					setspeed = tonumber(value)
					return setspeed
				end
				return newindex(self, key, value)
			end)
		else
			notify('Incompatible Exploit','Your exploit does not support this command (missing hookmetamethod)')
		end
	end
end)

addcmd('loopspeed',{'loopws'},function(args, speaker)
	local speed = args[1] or 16
	if args[2] then
		speed = args[2] or 16
	end
	if isNumber(speed) then
		local Char = speaker.Character or workspace:FindFirstChild(speaker.Name)
		local Human = Char and Char:FindFirstChildWhichIsA(""Humanoid"")
		local function WalkSpeedChange()
			if Char and Human then
				Human.WalkSpeed = speed
			end
		end
		WalkSpeedChange()
		HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false) or Human:GetPropertyChangedSignal(""WalkSpeed""):Connect(WalkSpeedChange)
		HumanModCons.wsCA = (HumanModCons.wsCA and HumanModCons.wsCA:Disconnect() and false) or speaker.CharacterAdded:Connect(function(nChar)
			Char, Human = nChar, nChar:WaitForChild(""Humanoid"")
			WalkSpeedChange()
			HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false) or Human:GetPropertyChangedSignal(""WalkSpeed""):Connect(WalkSpeedChange)
		end)
	end
end)

addcmd('unloopspeed',{'unloopws'},function(args, speaker)
	HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false) or nil
	HumanModCons.wsCA = (HumanModCons.wsCA and HumanModCons.wsCA:Disconnect() and false) or nil
end)

addcmd('spoofjumppower',{'spoofjp'},function(args, speaker)
	if args[1] and isNumber(args[1]) then
		if hookmetamethod then
			local char = speaker.Character
			local setpower;
			local index; index = hookmetamethod(game, ""__index"", function(self, key)
				local keyclean = key:gsub(""\0"", """")
				if (keyclean == ""JumpPower"" or keyclean == ""jumpPower"") and self:IsA(""Humanoid"") and self:IsDescendantOf(char) and not checkcaller() then
					return setpower or args[1]
				end
				return index(self, key)
			end)
			local newindex; newindex = hookmetamethod(game, ""__newindex"", function(self, key, value)
				local keyclean = string.gsub(key, ""\0"", """")
				if (keyclean == ""JumpPower"" or keyclean == ""jumpPower"") and self:IsA(""Humanoid"") and self:IsDescendantOf(char) and not checkcaller() then
					setpower = tonumber(value)
					return setpower
				end
				return newindex(self, key, value)
			end)
		else
			notify('Incompatible Exploit','Your exploit does not support this command (missing hookmetamethod)')
		end
	end
end)

addcmd('loopjumppower',{'loopjp','loopjpower'},function(args, speaker)
	local jpower = args[1] or 50
	if isNumber(jpower) then
		local Char = speaker.Character or workspace:FindFirstChild(speaker.Name)
		local Human = Char and Char:FindFirstChildWhichIsA(""Humanoid"")
		local function JumpPowerChange()
			if Char and Human then
				if speaker.Character:FindFirstChildOfClass('Humanoid').UseJumpPower then
					speaker.Character:FindFirstChildOfClass('Humanoid').JumpPower = jpower
				else
					speaker.Character:FindFirstChildOfClass('Humanoid').JumpHeight  = jpower
				end
			end
		end
		JumpPowerChange()
		HumanModCons.jpLoop = (HumanModCons.jpLoop and HumanModCons.jpLoop:Disconnect() and false) or Human:GetPropertyChangedSignal(""JumpPower""):Connect(JumpPowerChange)
		HumanModCons.jpCA = (HumanModCons.jpCA and HumanModCons.jpCA:Disconnect() and false) or speaker.CharacterAdded:Connect(function(nChar)
			Char, Human = nChar, nChar:WaitForChild(""Humanoid"")
			JumpPowerChange()
			HumanModCons.jpLoop = (HumanModCons.jpLoop and HumanModCons.jpLoop:Disconnect() and false) or Human:GetPropertyChangedSignal(""JumpPower""):Connect(JumpPowerChange)
		end)
	end
end)

addcmd('unloopjumppower',{'unloopjp','unloopjpower'},function(args, speaker)
	local Char = speaker.Character or workspace:FindFirstChild(speaker.Name)
	local Human = Char and Char:FindFirstChildWhichIsA(""Humanoid"")
	HumanModCons.jpLoop = (HumanModCons.jpLoop and HumanModCons.jpLoop:Disconnect() and false) or nil
	HumanModCons.jpCA = (HumanModCons.jpCA and HumanModCons.jpCA:Disconnect() and false) or nil
	if Char and Human then
		if speaker.Character:FindFirstChildOfClass('Humanoid').UseJumpPower then
			speaker.Character:FindFirstChildOfClass('Humanoid').JumpPower = 50
		else
			speaker.Character:FindFirstChildOfClass('Humanoid').JumpHeight  = 50
		end
	end
end)

addcmd('tools',{'gears'},function(args, speaker)
	local function copy(instance)
		for i,c in pairs(instance:GetChildren())do
			if c:IsA('Tool') or c:IsA('HopperBin') then
				c:Clone().Parent = speaker:FindFirstChildOfClass(""Backpack"")
			end
			copy(c)
		end
	end
	copy(Lighting)
	local function copy(instance)
		for i,c in pairs(instance:GetChildren())do
			if c:IsA('Tool') or c:IsA('HopperBin') then
				c:Clone().Parent = speaker:FindFirstChildOfClass(""Backpack"")
			end
			copy(c)
		end
	end
	copy(ReplicatedStorage)
	notify('Tools','Copied tools from ReplicatedStorage and Lighting')
end)

addcmd('notools',{'rtools','clrtools','removetools','deletetools','dtools'},function(args, speaker)
	for i,v in pairs(speaker:FindFirstChildOfClass(""Backpack""):GetDescendants()) do
		if v:IsA('Tool') or v:IsA('HopperBin') then
			v:Destroy()
		end
	end
	for i,v in pairs(speaker.Character:GetDescendants()) do
		if v:IsA('Tool') or v:IsA('HopperBin') then
			v:Destroy()
		end
	end
end)

addcmd('deleteselectedtool',{'dst'},function(args, speaker)
	for i,v in pairs(speaker.Character:GetDescendants()) do
		if v:IsA('Tool') or v:IsA('HopperBin') then
			v:Destroy()
		end
	end
end)

addcmd(""console"", {}, function(args, speaker)
    StarterGui:SetCore(""DevConsoleVisible"", true)
end)

addcmd('oldconsole',{},function(args, speaker)
	-- Thanks wally!!
	notify(""Loading"",'Hold on a sec')
	local _, str = pcall(function()
		return game:HttpGet(""https://raw.githubusercontent.com/infyiff/backup/main/console.lua"", true)
	end)

	local s, e = loadstring(str)
	if typeof(s) ~= ""function"" then
		return
	end

	local success, message = pcall(s)
	if (not success) then
		if printconsole then
			printconsole(message)
		elseif printoutput then
			printoutput(message)
		end
	end
	wait(1)
	notify('Console','Press F9 to open the console')
end)

addcmd('explorer', {'dex'}, function(args, speaker)
	notify('Loading', 'Hold on a sec')
	loadstring(game:HttpGet(""https://raw.githubusercontent.com/infyiff/backup/main/dex.lua""))()
end)

addcmd('olddex', {'odex'}, function(args, speaker)
	notify('Loading old explorer', 'Hold on a sec')

	local getobjects = function(a)
		local Objects = {}
		if a then
			local b = InsertService:LoadLocalAsset(a)
			if b then 
				table.insert(Objects, b) 
			end
		end
		return Objects
	end

	local Dex = getobjects(""rbxassetid://10055842438"")[1]
	Dex.Parent = PARENT

	local function Load(Obj, Url)
		local function GiveOwnGlobals(Func, Script)
			-- Fix for this edit of dex being poorly made
			-- I (Alex) would like to commemorate whoever added this dex in somehow finding the worst dex to ever exist
			local Fenv, RealFenv, FenvMt = {}, {
				script = Script,
				getupvalue = function(a, b)
					return nil -- force it to use globals
				end,
				getreg = function() -- It loops registry for some idiotic reason so stop it from doing that and just use a global
					return {} -- force it to use globals
				end,
				getprops = getprops or function(inst)
					if getproperties then
						local props = getproperties(inst)
						if props[1] and gethiddenproperty then
							local results = {}
							for _,name in pairs(props) do
								local success, res = pcall(gethiddenproperty, inst, name)
								if success then
									results[name] = res
								end
							end

							return results
						end

						return props
					end

					return {}
				end
			}, {}
			FenvMt.__index = function(a,b)
				return RealFenv[b] == nil and getgenv()[b] or RealFenv[b]
			end
			FenvMt.__newindex = function(a, b, c)
				if RealFenv[b] == nil then 
					getgenv()[b] = c 
				else 
					RealFenv[b] = c 
				end
			end
			setmetatable(Fenv, FenvMt)
			pcall(setfenv, Func, Fenv)
			return Func
		end

		local function LoadScripts(_, Script)
			if Script:IsA(""LocalScript"") then
				task.spawn(function()
					GiveOwnGlobals(loadstring(Script.Source,""=""..Script:GetFullName()), Script)()
				end)
			end
			table.foreach(Script:GetChildren(), LoadScripts)
		end

		LoadScripts(nil, Obj)
	end

	Load(Dex)
end)

addcmd('remotespy',{'rspy'},function(args, speaker)
	notify(""Loading"",'Hold on a sec')
	-- Full credit to exx, creator of SimpleSpy
	-- also thanks to NoobSploit for fixing
	loadstring(game:HttpGet(""https://raw.githubusercontent.com/infyiff/backup/main/SimpleSpyV3/main.lua""))()
end)

addcmd('audiologger',{'alogger'},function(args, speaker)
	notify(""Loading"",'Hold on a sec')
	loadstring(game:HttpGet(('https://raw.githubusercontent.com/infyiff/backup/main/audiologger.lua'),true))()
end)

local loopgoto = nil
addcmd('loopgoto',{},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		loopgoto = nil
		if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
			speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
			wait(.1)
		end
		loopgoto = Players[v]
		local distance = 3
		if args[2] and isNumber(args[2]) then
			distance = args[2]
		end
		local lDelay = 0
		if args[3] and isNumber(args[3]) then
			lDelay = args[3]
		end
		repeat
			if Players:FindFirstChild(v) then
				if Players[v].Character ~= nil then
					getRoot(speaker.Character).CFrame = getRoot(Players[v].Character).CFrame + Vector3.new(distance,1,0)
				end
				wait(lDelay)
			else
				loopgoto = nil
			end
		until loopgoto ~= Players[v]
	end
end)

addcmd('unloopgoto',{'noloopgoto'},function(args, speaker)
	loopgoto = nil
end)

addcmd('headsit',{},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	if headSit then headSit:Disconnect() end
	for i,v in pairs(players)do
		speaker.Character:FindFirstChildOfClass('Humanoid').Sit = true
		headSit = RunService.Heartbeat:Connect(function()
			if Players:FindFirstChild(Players[v].Name) and Players[v].Character ~= nil and getRoot(Players[v].Character) and getRoot(speaker.Character) and speaker.Character:FindFirstChildOfClass('Humanoid').Sit == true then
				getRoot(speaker.Character).CFrame = getRoot(Players[v].Character).CFrame * CFrame.Angles(0,math.rad(0),0)* CFrame.new(0,1.6,0.4)
			else
				headSit:Disconnect()
			end
		end)
	end
end)

addcmd('chat',{'say'},function(args, speaker)
	local cString = getstring(1)
	chatMessage(cString)
end)


spamming = false
spamspeed = 1
addcmd('spam',{},function(args, speaker)
	spamming = true
	local spamstring = getstring(1)
	repeat wait(spamspeed)
		chatMessage(spamstring)
	until spamming == false
end)

addcmd('nospam',{'unspam'},function(args, speaker)
	spamming = false
end)

addcmd('whisper',{'pm'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		task.spawn(function()
			local plrName = Players[v].Name
			local pmstring = getstring(2)
			chatMessage(""/w ""..plrName.."" ""..pmstring)
		end)
	end
end)

pmspamming = {}
addcmd('pmspam',{},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		task.spawn(function()
			local plrName = Players[v].Name
			if FindInTable(pmspamming, plrName) then return end
			table.insert(pmspamming, plrName)
			local pmspamstring = getstring(2)
			repeat
				if Players:FindFirstChild(v) then
					wait(spamspeed)
					chatMessage(""/w ""..plrName.."" ""..pmspamstring)
				else
					for a,b in pairs(pmspamming) do if b == plrName then table.remove(pmspamming, a) end end
				end
			until not FindInTable(pmspamming, plrName)
		end)
	end
end)

addcmd('nopmspam',{'unpmspam'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		task.spawn(function()
			for a,b in pairs(pmspamming) do
				if b == Players[v].Name then
					table.remove(pmspamming, a)
				end
			end
		end)
	end
end)

addcmd('spamspeed',{},function(args, speaker)
	local speed = args[1] or 1
	if isNumber(speed) then
		spamspeed = speed
	end
end)

addcmd('bubblechat',{},function(args, speaker)
	ChatService.BubbleChatEnabled = true
end)

addcmd('unbubblechat',{'nobubblechat'},function(args, speaker)
	ChatService.BubbleChatEnabled = false
end)

addcmd('safechat',{},function(args, speaker)
	speaker:SetSuperSafeChat(true)
end)

addcmd('nosafechat',{'disablesafechat','unsafechat'},function(args, speaker)
	speaker:SetSuperSafeChat(false)
end)

addcmd('blockhead',{},function(args, speaker)
	speaker.Character.Head:FindFirstChildOfClass(""SpecialMesh""):Destroy()
end)

addcmd('blockhats',{},function(args, speaker)
	for _,v in pairs(speaker.Character:FindFirstChildOfClass('Humanoid'):GetAccessories()) do
		for i,c in pairs(v:GetDescendants()) do
			if c:IsA(""SpecialMesh"") then
				c:Destroy()
			end
		end
	end
end)

addcmd('blocktool',{},function(args, speaker)
	for _,v in pairs(speaker.Character:GetChildren()) do
		if v:IsA(""Tool"") or v:IsA(""HopperBin"") then
			for i,c in pairs(v:GetDescendants()) do
				if c:IsA(""SpecialMesh"") then
					c:Destroy()
				end
			end
		end
	end
end)

addcmd('creeper',{},function(args, speaker)
	if r15(speaker) then
		speaker.Character.Head:FindFirstChildOfClass(""SpecialMesh""):Destroy()
		speaker.Character.LeftUpperArm:Destroy()
		speaker.Character.RightUpperArm:Destroy()
		speaker.Character:FindFirstChildOfClass(""Humanoid""):RemoveAccessories()
	else
		speaker.Character.Head:FindFirstChildOfClass(""SpecialMesh""):Destroy()
		speaker.Character[""Left Arm""]:Destroy()
		speaker.Character[""Right Arm""]:Destroy()
		speaker.Character:FindFirstChildOfClass(""Humanoid""):RemoveAccessories()
	end
end)

function getTorso(x)
	x = x or Players.LocalPlayer.Character
	return x:FindFirstChild(""Torso"") or x:FindFirstChild(""UpperTorso"") or x:FindFirstChild(""LowerTorso"") or x:FindFirstChild(""HumanoidRootPart"")
end

addcmd(""bang"", {""rape""}, function(args, speaker)
	execCmd(""unbang"")
	wait()
	local humanoid = speaker.Character:FindFirstChildWhichIsA(""Humanoid"")
	bangAnim = Instance.new(""Animation"")
	bangAnim.AnimationId = not r15(speaker) and ""rbxassetid://148840371"" or ""rbxassetid://5918726674""
	bang = humanoid:LoadAnimation(bangAnim)
	bang:Play(0.1, 1, 1)
	bang:AdjustSpeed(args[2] or 3)
	bangDied = humanoid.Died:Connect(function()
		bang:Stop()
		bangAnim:Destroy()
		bangDied:Disconnect()
		bangLoop:Disconnect()
	end)
	if args[1] then
		local players = getPlayer(args[1], speaker)
		for _, v in pairs(players) do
			local bangplr = Players[v].Name
			local bangOffet = CFrame.new(0, 0, 1.1)
			bangLoop = RunService.Stepped:Connect(function()
				pcall(function()
					local otherRoot = getTorso(Players[bangplr].Character)
					getRoot(speaker.Character).CFrame = otherRoot.CFrame * bangOffet
				end)
			end)
		end
	end
end)

addcmd(""unbang"", {""unrape""}, function(args, speaker)
	if bangDied then
		bangDied:Disconnect()
		bang:Stop()
		bangAnim:Destroy()
		bangLoop:Disconnect()
	end
end)

addcmd('carpet',{},function(args, speaker)
	if not r15(speaker) then
		execCmd('uncarpet')
		wait()
		local players = getPlayer(args[1], speaker)
		for i,v in pairs(players)do
			carpetAnim = Instance.new(""Animation"")
			carpetAnim.AnimationId = ""rbxassetid://282574440""
			carpet = speaker.Character:FindFirstChildOfClass('Humanoid'):LoadAnimation(carpetAnim)
			carpet:Play(.1, 1, 1)
			local carpetplr = Players[v].Name
			carpetDied = speaker.Character:FindFirstChildOfClass'Humanoid'.Died:Connect(function()
				carpetLoop:Disconnect()
				carpet:Stop()
				carpetAnim:Destroy()
				carpetDied:Disconnect()
			end)
			carpetLoop = RunService.Heartbeat:Connect(function()
				pcall(function()
					getRoot(Players.LocalPlayer.Character).CFrame = getRoot(Players[carpetplr].Character).CFrame
				end)
			end)
		end
	else
		notify('R6 Required','This command requires the r6 rig type')
	end
end)

addcmd('uncarpet',{'nocarpet'},function(args, speaker)
	if carpetLoop then
		carpetLoop:Disconnect()
		carpetDied:Disconnect()
		carpet:Stop()
		carpetAnim:Destroy()
	end
end)

addcmd('friend',{},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		speaker:RequestFriendship(v)
	end
end)

addcmd('unfriend',{},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		speaker:RevokeFriendship(v)
	end
end)

addcmd('bringpart',{},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v.Name:lower() == getstring(1):lower() and v:IsA(""BasePart"") then
			v.CFrame = getRoot(speaker.Character).CFrame
		end
	end
end)

addcmd('bringpartclass',{'bpc'},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v.ClassName:lower() == getstring(1):lower() and v:IsA(""BasePart"") then
			v.CFrame = getRoot(speaker.Character).CFrame
		end
	end
end)

gotopartDelay = 0.1
addcmd('gotopart',{'topart'},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v.Name:lower() == getstring(1):lower() and v:IsA(""BasePart"") then
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			wait(gotopartDelay)
			getRoot(speaker.Character).CFrame = v.CFrame
		end
	end
end)

addcmd('tweengotopart',{'tgotopart','ttopart'},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v.Name:lower() == getstring(1):lower() and v:IsA(""BasePart"") then
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			wait(gotopartDelay)
			TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = v.CFrame}):Play()
		end
	end
end)

addcmd('gotopartclass',{'gpc'},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v.ClassName:lower() == getstring(1):lower() and v:IsA(""BasePart"") then
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			wait(gotopartDelay)
			getRoot(speaker.Character).CFrame = v.CFrame
		end
	end
end)

addcmd('tweengotopartclass',{'tgpc'},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v.ClassName:lower() == getstring(1):lower() and v:IsA(""BasePart"") then
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			wait(gotopartDelay)
			TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = v.CFrame}):Play()
		end
	end
end)

addcmd('gotomodel',{'tomodel'},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v.Name:lower() == getstring(1):lower() and v:IsA(""Model"") then
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			wait(gotopartDelay)
			getRoot(speaker.Character).CFrame = v:GetModelCFrame()
		end
	end
end)

addcmd('tweengotomodel',{'tgotomodel','ttomodel'},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v.Name:lower() == getstring(1):lower() and v:IsA(""Model"") then
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			wait(gotopartDelay)
			TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = v:GetModelCFrame()}):Play()
		end
	end
end)

addcmd('gotopartdelay',{},function(args, speaker)
	local gtpDelay = args[1] or 0.1
	if isNumber(gtpDelay) then
		gotopartDelay = gtpDelay
	end
end)

addcmd('noclickdetectorlimits',{'nocdlimits','removecdlimits'},function(args, speaker)
	for i,v in ipairs(workspace:GetDescendants()) do
		if v:IsA(""ClickDetector"") then
			v.MaxActivationDistance = math.huge
		end
	end
end)

addcmd('fireclickdetectors',{'firecd','firecds'}, function(args, speaker)
	if fireclickdetector then
		if args[1] then
			local name = getstring(1)
			for _, descendant in ipairs(workspace:GetDescendants()) do
				if descendant:IsA(""ClickDetector"") and descendant.Name == name or descandant.Parent.Name == name then
					fireclickdetector(descendant)
				end
			end
		else
			for _, descendant in ipairs(workspace:GetDescendants()) do
				if descendant:IsA(""ClickDetector"") then
					fireclickdetector(descendant)
				end
			end
		end
	else
		notify(""Incompatible Exploit"", ""Your exploit does not support this command (missing fireclickdetector)"")
	end
end)

addcmd('noproximitypromptlimits',{'nopplimits','removepplimits'},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v:IsA(""ProximityPrompt"") then
			v.MaxActivationDistance = math.huge
		end
	end
end)

addcmd('fireproximityprompts',{'firepp'},function(args, speaker)
	if fireproximityprompt then
		if args[1] then
			local name = getstring(1)
			for _, descendant in ipairs(workspace:GetDescendants()) do
				if descendant:IsA(""ProximityPrompt"") and descendant.Name == name or descandant.Parent.Name == name then
					fireproximityprompt(descendant)
				end
			end
		else
			for _, descendant in ipairs(workspace:GetDescendants()) do
				if descendant:IsA(""ProximityPrompt"") then
					fireproximityprompt(descendant)
				end
			end
		end
	else
		notify(""Incompatible Exploit"", ""Your exploit does not support this command (missing fireproximityprompt)"")
	end
end)

local PromptButtonHoldBegan = nil
addcmd('instantproximityprompts',{'instantpp'},function(args, speaker)
	if fireproximityprompt then
		execCmd(""uninstantproximityprompts"")
		wait(0.1)
		PromptButtonHoldBegan = ProximityPromptService.PromptButtonHoldBegan:Connect(function(prompt)
			fireproximityprompt(prompt)
		end)
	else
		notify('Incompatible Exploit','Your exploit does not support this command (missing fireproximityprompt)')
	end
end)

addcmd('uninstantproximityprompts',{'uninstantpp'},function(args, speaker)
	if PromptButtonHoldBegan ~= nil then
		PromptButtonHoldBegan:Disconnect()
		PromptButtonHoldBegan = nil
	end
end)

addcmd('notifyping',{'ping'},function(args, speaker)
	notify(""Ping"", math.round(speaker:GetNetworkPing() * 1000) .. ""ms"")
end)

addcmd('grabtools', {}, function(args, speaker)
	local humanoid = speaker.Character:FindFirstChildWhichIsA(""Humanoid"")
	for _, child in ipairs(workspace:GetChildren()) do
		if speaker.Character and child:IsA(""BackpackItem"") and child:FindFirstChild(""Handle"") then
			humanoid:EquipTool(child)
		end
	end

	if grabtoolsFunc then 
		grabtoolsFunc:Disconnect() 
	end

	grabtoolsFunc = workspace.ChildAdded:Connect(function(child)
		if speaker.Character and child:IsA(""BackpackItem"") and child:FindFirstChild(""Handle"") then
			humanoid:EquipTool(child)
		end
	end)

	notify(""Grabtools"", ""Picking up any dropped tools"")
end)

addcmd('nograbtools',{'ungrabtools'},function(args, speaker)
	if grabtoolsFunc then 
		grabtoolsFunc:Disconnect() 
	end

	notify(""Grabtools"", ""Grabtools has been disabled"")
end)

local specifictoolremoval = {}
addcmd('removespecifictool',{},function(args, speaker)
	if args[1] and speaker:FindFirstChildOfClass(""Backpack"") then
		local tool = string.lower(getstring(1))
		local RST = RunService.RenderStepped:Connect(function()
			if speaker:FindFirstChildOfClass(""Backpack"") then
				for i,v in pairs(speaker:FindFirstChildOfClass(""Backpack""):GetChildren()) do
					if v.Name:lower() == tool then
						v:Remove()
					end
				end
			end
		end)
		specifictoolremoval[tool] = RST
	end
end)

addcmd('unremovespecifictool',{},function(args, speaker)
	if args[1] then
		local tool = string.lower(getstring(1))
		if specifictoolremoval[tool] ~= nil then
			specifictoolremoval[tool]:Disconnect()
			specifictoolremoval[tool] = nil
		end
	end
end)

addcmd('clearremovespecifictool',{},function(args, speaker)
	for obj in pairs(specifictoolremoval) do
		specifictoolremoval[obj]:Disconnect()
		specifictoolremoval[obj] = nil
	end
end)

addcmd('light',{},function(args, speaker)
	local light = Instance.new(""PointLight"")
	light.Parent = getRoot(speaker.Character)
	light.Range = 30
	if args[1] then
		light.Brightness = args[2]
		light.Range = args[1]
	else
		light.Brightness = 5
	end
end)

addcmd('unlight',{'nolight'},function(args, speaker)
	for i,v in pairs(speaker.Character:GetDescendants()) do
		if v.ClassName == ""PointLight"" then
			v:Destroy()
		end
	end
end)

addcmd('copytools',{},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		task.spawn(function()
			for i,v in pairs(Players[v]:FindFirstChildOfClass(""Backpack""):GetChildren()) do
				if v:IsA('Tool') or v:IsA('HopperBin') then
					v:Clone().Parent = speaker:FindFirstChildOfClass(""Backpack"")
				end
			end
		end)
	end
end)

addcmd('naked',{},function(args, speaker)
	for i,v in pairs(speaker.Character:GetDescendants()) do
		if v:IsA(""Clothing"") or v:IsA(""ShirtGraphic"") then
			v:Destroy()
		end
	end
end)

addcmd('noface',{'removeface'},function(args, speaker)
	for i,v in pairs(speaker.Character:GetDescendants()) do
		if v:IsA(""Decal"") and v.Name == 'face' then
			v:Destroy()
		end
	end
end)

addcmd('spawnpoint',{'spawn'},function(args, speaker)
	spawnpos = getRoot(speaker.Character).CFrame
	spawnpoint = true
	spDelay = tonumber(args[1]) or 0.1
	notify('Spawn Point','Spawn point created at '..tostring(spawnpos))
end)

addcmd('nospawnpoint',{'nospawn','removespawnpoint'},function(args, speaker)
	spawnpoint = false
	notify('Spawn Point','Removed spawn point')
end)

addcmd('flashback',{'diedtp'},function(args, speaker)
	if lastDeath ~= nil then
		if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
			speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
			wait(.1)
		end
		getRoot(speaker.Character).CFrame = lastDeath
	end
end)

addcmd('hatspin',{'spinhats'},function(args, speaker)
	execCmd('unhatspin')
	wait(.5)
	for _,v in pairs(speaker.Character:FindFirstChildOfClass('Humanoid'):GetAccessories()) do
		local keep = Instance.new(""BodyPosition"") keep.Name = randomString() keep.Parent = v.Handle
		local spin = Instance.new(""BodyAngularVelocity"") spin.Name = randomString() spin.Parent = v.Handle
		v.Handle:FindFirstChildOfClass(""Weld""):Destroy()
		if args[1] then
			spin.AngularVelocity = Vector3.new(0, args[1], 0)
			spin.MaxTorque = Vector3.new(0, args[1] * 2, 0)
		else
			spin.AngularVelocity = Vector3.new(0, 100, 0)
			spin.MaxTorque = Vector3.new(0, 200, 0)
		end
		keep.P = 30000
		keep.D = 50
		spinhats = RunService.Stepped:Connect(function()
			pcall(function()
				keep.Position = Players.LocalPlayer.Character.Head.Position
			end)
		end)
	end
end)

addcmd('unhatspin',{'unspinhats'},function(args, speaker)
	if spinhats then
		spinhats:Disconnect()
	end
	for _,v in pairs(speaker.Character:FindFirstChildOfClass('Humanoid'):GetAccessories()) do
		v.Parent = workspace
		for i,c in pairs(v.Handle) do
			if c:IsA(""BodyPosition"") or c:IsA(""BodyAngularVelocity"") then
				c:Destroy()
			end
		end
		wait()
		v.Parent = speaker.Character
	end
end)

addcmd('clearhats',{'cleanhats'},function(args, speaker)
	if firetouchinterest then
		local Player = Players.LocalPlayer
		local Character = Player.Character
		local Old = Character:FindFirstChild(""HumanoidRootPart"").CFrame
		local Hats = {}

		for _, child in ipairs(workspace:GetChildren()) do
			if child:IsA(""Accessory"") then
				table.insert(Hats, child)
			end
		end

		for _, accessory in ipairs(Character:FindFirstChildOfClass(""Humanoid""):GetAccessories()) do
			accessory:Destroy()
		end

		for i = 1, #Hats do
			repeat RunService.Heartbeat:wait() until Hats[i]
			firetouchinterest(Hats[i].Handle,Character:FindFirstChild(""HumanoidRootPart""),0)
			repeat RunService.Heartbeat:wait() until Character:FindFirstChildOfClass(""Accessory"")
			Character:FindFirstChildOfClass(""Accessory""):Destroy()
			repeat RunService.Heartbeat:wait() until not Character:FindFirstChildOfClass(""Accessory"")
		end

		execCmd(""reset"")

		Player.CharacterAdded:Wait()

		for i = 1,20 do 
			RunService.Heartbeat:Wait()
			if Player.Character:FindFirstChild(""HumanoidRootPart"") then
				Player.Character:FindFirstChild(""HumanoidRootPart"").CFrame = Old
			end
		end
	else
		notify(""Incompatible Exploit"",""Your exploit does not support this command (missing firetouchinterest)"")
	end
end)

addcmd('split',{},function(args, speaker)
	if r15(speaker) then
		speaker.Character.UpperTorso.Waist:Destroy()
	else
		notify('R15 Required','This command requires the r15 rig type')
	end
end)

addcmd('nilchar',{},function(args, speaker)
	if speaker.Character ~= nil then
		speaker.Character.Parent = nil
	end
end)

addcmd('unnilchar',{'nonilchar'},function(args, speaker)
	if speaker.Character ~= nil then
		speaker.Character.Parent = workspace
	end
end)

addcmd('noroot',{'removeroot','rroot'},function(args, speaker)
	if speaker.Character ~= nil then
		local char = Players.LocalPlayer.Character
		char.Parent = nil
		char.HumanoidRootPart:Destroy()
		char.Parent = workspace
	end
end)

addcmd('replaceroot',{'replacerootpart'},function(args, speaker)
	if speaker.Character ~= nil and speaker.Character:FindFirstChild(""HumanoidRootPart"") then
		local Char = speaker.Character
		local OldParent = Char.Parent
		local HRP = Char and Char:FindFirstChild(""HumanoidRootPart"")
		local OldPos = HRP.CFrame
		Char.Parent = game
		local HRP1 = HRP:Clone()
		HRP1.Parent = Char
		HRP = HRP:Destroy()
		HRP1.CFrame = OldPos
		Char.Parent = OldParent
	end
end)

addcmd('clearcharappearance',{'clearchar','clrchar'},function(args, speaker)
	speaker:ClearCharacterAppearance()
end)

addcmd('equiptools',{},function(args, speaker)
	for i,v in pairs(speaker:FindFirstChildOfClass(""Backpack""):GetChildren()) do
		if v:IsA(""Tool"") or v:IsA(""HopperBin"") then
			v.Parent = speaker.Character
		end
	end
end)

addcmd('unequiptools',{},function(args, speaker)
	speaker.Character:FindFirstChildOfClass('Humanoid'):UnequipTools()
end)

local function GetHandleTools(p)
	p = p or Players.LocalPlayer
	local r = {}
	for _, v in ipairs(p.Character and p.Character:GetChildren() or {}) do
		if v.IsA(v, ""BackpackItem"") and v.FindFirstChild(v, ""Handle"") then
			r[#r + 1] = v
		end
	end
	for _, v in ipairs(p.Backpack:GetChildren()) do
		if v.IsA(v, ""BackpackItem"") and v.FindFirstChild(v, ""Handle"") then
			r[#r + 1] = v
		end
	end
	return r
end
addcmd('dupetools', {'clonetools'}, function(args, speaker)
	local LOOP_NUM = tonumber(args[1]) or 1
	local OrigPos = speaker.Character.HumanoidRootPart.Position
	local Tools, TempPos = {}, Vector3.new(math.random(-2e5, 2e5), 2e5, math.random(-2e5, 2e5))
	for i = 1, LOOP_NUM do
		local Human = speaker.Character:WaitForChild(""Humanoid"")
		wait(.1, Human.Parent:MoveTo(TempPos))
		Human.RootPart.Anchored = speaker:ClearCharacterAppearance(wait(.1)) or true
		local t = GetHandleTools(speaker)
		while #t > 0 do
			for _, v in ipairs(t) do
				task.spawn(function()
					for _ = 1, 25 do
						v.Parent = speaker.Character
						v.Handle.Anchored = true
					end
					for _ = 1, 5 do
						v.Parent = workspace
					end
					table.insert(Tools, v.Handle)
				end)
			end
			t = GetHandleTools(speaker)
		end
		wait(.1)
		speaker.Character = speaker.Character:Destroy()
		speaker.CharacterAdded:Wait():WaitForChild(""Humanoid"").Parent:MoveTo(LOOP_NUM == i and OrigPos or TempPos, wait(.1))
		if i == LOOP_NUM or i % 5 == 0 then
			local HRP = speaker.Character.HumanoidRootPart
			if type(firetouchinterest) == ""function"" then
				for _, v in ipairs(Tools) do
					v.Anchored = not firetouchinterest(v, HRP, 1, firetouchinterest(v, HRP, 0)) and false or false
				end
			else
				for _, v in ipairs(Tools) do
					task.spawn(function()
						local x = v.CanCollide
						v.CanCollide = false
						v.Anchored = false
						for _ = 1, 10 do
							v.CFrame = HRP.CFrame
							wait()
						end
						v.CanCollide = x
					end)
				end
			end
			wait(.1)
			Tools = {}
		end
		TempPos = TempPos + Vector3.new(10, math.random(-5, 5), 0)
	end
end)

local RS = RunService.RenderStepped
addcmd('givetool', {'givetools'}, function(args, speaker)
	local v = Players[getPlayer(args[1], speaker)[1]].Character
	workspace.CurrentCamera.CameraSubject = v
	local Char = speaker.Character or workspace:FindFirstChild(speaker.Name)
	local hum = Char and Char:FindFirstChildWhichIsA('Humanoid')
	local hrp = hum and hum.RootPart
	local hrppos = hrp.CFrame
	hum = hum:Destroy() or hum:Clone()
	hum.Parent = Char
	hum:ClearAllChildren()
	speaker:ClearCharacterAppearance()
	task.spawn(function()
		speaker.CharacterAdded:Wait():WaitForChild('Humanoid').RootPart.CFrame = wait() and hrppos
	end)
	local vHRP = getRoot(v)
	while Char and Char.Parent and vHRP and vHRP.Parent do
		local Tools = false
		for _, v in ipairs(Char:GetChildren()) do
			if v:IsA('BackpackItem') and v:FindFirstChild('Handle') then
				Tools = true
				firetouchinterest(v.Handle, vHRP, 0)
				firetouchinterest(v.Handle, vHRP, 1)
			end
		end
		if not Tools then
			break
		end
		hrp.CFrame = vHRP.CFrame
		RS:Wait()
	end
	execCmd('re')
end)

addcmd('touchinterests', {'touchinterest', 'firetouchinterests', 'firetouchinterest'}, function(args, speaker)
	if not firetouchinterest then
		notify(""Incompatible Exploit"", ""Your exploit does not support this command (missing firetouchinterest)"")
		return
	end

	local root = getRoot(speaker.Character) or speaker.Character:FindFirstChildWhichIsA(""BasePart"")

	local function touch(x)
		x = x:FindFirstAncestorWhichIsA(""Part"")
		if x then
			if firetouchinterest then
				task.spawn(function()
					firetouchinterest(x, root, 1)
					wait()
					firetouchinterest(x, root, 0)
				end)
			end
			x.CFrame = root.CFrame
		end
	end

	if args[1] then
		local name = getstring(1)
		for _, descendant in ipairs(workspace:GetDescendants()) do
			if descendant:IsA(""TouchTransmitter"") and descendant.Name == name or descandant.Parent.Name == name then
				touch(descendant)
			end
		end
	else
		for _, descendant in ipairs(workspace:GetDescendants()) do
			if descendant:IsA(""TouchTransmitter"") then
				touch(descendant)
			end
		end
	end
end)

addcmd('fullbright',{'fb','fullbrightness'},function(args, speaker)
	Lighting.Brightness = 2
	Lighting.ClockTime = 14
	Lighting.FogEnd = 100000
	Lighting.GlobalShadows = false
	Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)
end)

addcmd('loopfullbright',{'loopfb'},function(args, speaker)
	if brightLoop then
		brightLoop:Disconnect()
	end
	local function brightFunc()
		Lighting.Brightness = 2
		Lighting.ClockTime = 14
		Lighting.FogEnd = 100000
		Lighting.GlobalShadows = false
		Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)
	end

	brightLoop = RunService.RenderStepped:Connect(brightFunc)
end)

addcmd('unloopfullbright',{'unloopfb'},function(args, speaker)
	if brightLoop then
		brightLoop:Disconnect()
	end
end)

addcmd('ambient',{},function(args, speaker)
	Lighting.Ambient = Color3.new(args[1],args[2],args[3])
	Lighting.OutdoorAmbient = Color3.new(args[1],args[2],args[3])
end)

addcmd('day',{},function(args, speaker)
	Lighting.ClockTime = 14
end)

addcmd('night',{},function(args, speaker)
	Lighting.ClockTime = 0
end)

addcmd('nofog',{},function(args, speaker)
	Lighting.FogEnd = 100000
	for i,v in pairs(Lighting:GetDescendants()) do
		if v:IsA(""Atmosphere"") then
			v:Destroy()
		end
	end
end)

addcmd('brightness',{},function(args, speaker)
	Lighting.Brightness = args[1]
end)

addcmd('globalshadows',{'gshadows'},function(args, speaker)
	Lighting.GlobalShadows = true
end)

addcmd('unglobalshadows',{'nogshadows','ungshadows','noglobalshadows'},function(args, speaker)
	Lighting.GlobalShadows = false
end)

origsettings = {abt = Lighting.Ambient, oabt = Lighting.OutdoorAmbient, brt = Lighting.Brightness, time = Lighting.ClockTime, fe = Lighting.FogEnd, fs = Lighting.FogStart, gs = Lighting.GlobalShadows}

addcmd('restorelighting',{'rlighting'},function(args, speaker)
	Lighting.Ambient = origsettings.abt
	Lighting.OutdoorAmbient = origsettings.oabt
	Lighting.Brightness = origsettings.brt
	Lighting.ClockTime = origsettings.time
	Lighting.FogEnd = origsettings.fe
	Lighting.FogStart = origsettings.fs
	Lighting.GlobalShadows = origsettings.gs
end)

addcmd('stun',{'platformstand'},function(args, speaker)
	speaker.Character:FindFirstChildOfClass('Humanoid').PlatformStand = true
end)

addcmd('unstun',{'nostun','unplatformstand','noplatformstand'},function(args, speaker)
	speaker.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
end)

addcmd('norotate',{'noautorotate'},function(args, speaker)
	speaker.Character:FindFirstChildOfClass('Humanoid').AutoRotate  = false
end)

addcmd('unnorotate',{'autorotate'},function(args, speaker)
	speaker.Character:FindFirstChildOfClass('Humanoid').AutoRotate  = true
end)

addcmd('enablestate',{},function(args, speaker)
	local x = args[1]
	if not tonumber(x) then
		local x = Enum.HumanoidStateType[args[1]]
	end
	speaker.Character:FindFirstChildOfClass(""Humanoid""):SetStateEnabled(x, true)
end)

addcmd('disablestate',{},function(args, speaker)
	local x = args[1]
	if not tonumber(x) then
		local x = Enum.HumanoidStateType[args[1]]
	end
	speaker.Character:FindFirstChildOfClass(""Humanoid""):SetStateEnabled(x, false)
end)

addcmd('drophats',{'drophat'},function(args, speaker)
	if speaker.Character then
		for _,v in pairs(speaker.Character:FindFirstChildOfClass('Humanoid'):GetAccessories()) do
			v.Parent = workspace
		end
	end
end)

addcmd('deletehats',{'nohats','rhats'},function(args, speaker)
	for i,v in next, speaker.Character:GetDescendants() do
		if v:IsA(""Accessory"") then
			for i,p in next, v:GetDescendants() do
				if p:IsA(""Weld"") then
					p:Destroy()
				end
			end
		end
	end
end)

addcmd('droptools',{'droptool'},function(args, speaker)
	for i,v in pairs(Players.LocalPlayer.Backpack:GetChildren()) do
		if v:IsA(""Tool"") then
			v.Parent = Players.LocalPlayer.Character
		end
	end
	wait()
	for i,v in pairs(Players.LocalPlayer.Character:GetChildren()) do
		if v:IsA(""Tool"") then
			v.Parent = workspace
		end
	end
end)

addcmd('droppabletools',{},function(args, speaker)
	if speaker.Character then
		for _,obj in pairs(speaker.Character:GetChildren()) do
			if obj:IsA(""Tool"") then
				obj.CanBeDropped = true
			end
		end
	end
	if speaker:FindFirstChildOfClass(""Backpack"") then
		for _,obj in pairs(speaker:FindFirstChildOfClass(""Backpack""):GetChildren()) do
			if obj:IsA(""Tool"") then
				obj.CanBeDropped = true
			end
		end
	end
end)

local currentToolSize = """"
local currentGripPos = """"
addcmd('reach',{},function(args, speaker)
	execCmd('unreach')
	wait()
	for i,v in pairs(speaker.Character:GetDescendants()) do
		if v:IsA(""Tool"") then
			if args[1] then
				currentToolSize = v.Handle.Size
				currentGripPos = v.GripPos
				local a = Instance.new(""SelectionBox"")
				a.Name = ""SelectionBoxCreated""
				a.Parent = v.Handle
				a.Adornee = v.Handle
				v.Handle.Massless = true
				v.Handle.Size = Vector3.new(0.5,0.5,args[1])
				v.GripPos = Vector3.new(0,0,0)
				speaker.Character:FindFirstChildOfClass('Humanoid'):UnequipTools()
			else
				currentToolSize = v.Handle.Size
				currentGripPos = v.GripPos
				local a = Instance.new(""SelectionBox"")
				a.Name = ""SelectionBoxCreated""
				a.Parent = v.Handle
				a.Adornee = v.Handle
				v.Handle.Massless = true
				v.Handle.Size = Vector3.new(0.5,0.5,60)
				v.GripPos = Vector3.new(0,0,0)
				speaker.Character:FindFirstChildOfClass('Humanoid'):UnequipTools()
			end
		end
	end
end)

addcmd(""boxreach"", {}, function(args, speaker)
    execCmd(""unreach"")
    wait()
    for i, v in pairs(speaker.Character:GetDescendants()) do
        if v:IsA(""Tool"") then
            local size = tonumber(args[1]) or 60
            currentToolSize = v.Handle.Size
            currentGripPos = v.GripPos
            local a = Instance.new(""SelectionBox"")
            a.Name = ""SelectionBoxCreated""
            a.Parent = v.Handle
            a.Adornee = v.Handle
            v.Handle.Massless = true
            v.Handle.Size = Vector3.new(size, size, size)
            v.GripPos = Vector3.new(0, 0, 0)
            speaker.Character:FindFirstChildOfClass(""Humanoid""):UnequipTools()
        end
    end
end)

addcmd('unreach',{'noreach','unboxreach'},function(args, speaker)
	for i,v in pairs(speaker.Character:GetDescendants()) do
		if v:IsA(""Tool"") then
			v.Handle.Size = currentToolSize
			v.GripPos = currentGripPos
			v.Handle.SelectionBoxCreated:Destroy()
		end
	end
end)

addcmd('grippos',{},function(args, speaker)
	for i,v in pairs(speaker.Character:GetDescendants()) do
		if v:IsA(""Tool"") then
			v.Parent = speaker:FindFirstChildOfClass(""Backpack"")
			v.GripPos = Vector3.new(args[1],args[2],args[3])
			v.Parent = speaker.Character
		end
	end
end)

addcmd('usetools', {}, function(args, speaker)
	local Backpack = speaker:FindFirstChildOfClass(""Backpack"")
	local ammount = tonumber(args[1]) or 1
	local delay_ = tonumber(args[2]) or false
	for _, v in ipairs(Backpack:GetChildren()) do
		v.Parent = speaker.Character
		task.spawn(function()
			for _ = 1, ammount do
				v:Activate()
				if delay_ then
					wait(delay_)
				end
			end
			v.Parent = Backpack
		end)
	end
end)

addcmd('logs',{},function(args, speaker)
	logs:TweenPosition(UDim2.new(0, 0, 1, -265), ""InOut"", ""Quart"", 0.3, true, nil)
end)

addcmd('chatlogs',{'clogs'},function(args, speaker)
	join.Visible = false
	chat.Visible = true
	table.remove(shade3,table.find(shade3,selectChat))
	table.remove(shade2,table.find(shade2,selectJoin))
	table.insert(shade2,selectChat)
	table.insert(shade3,selectJoin)
	selectJoin.BackgroundColor3 = currentShade3
	selectChat.BackgroundColor3 = currentShade2
	logs:TweenPosition(UDim2.new(0, 0, 1, -265), ""InOut"", ""Quart"", 0.3, true, nil)
end)

addcmd('joinlogs',{'jlogs'},function(args, speaker)
	chat.Visible = false
	join.Visible = true	
	table.remove(shade3,table.find(shade3,selectJoin))
	table.remove(shade2,table.find(shade2,selectChat))
	table.insert(shade2,selectJoin)
	table.insert(shade3,selectChat)
	selectChat.BackgroundColor3 = currentShade3
	selectJoin.BackgroundColor3 = currentShade2
	logs:TweenPosition(UDim2.new(0, 0, 1, -265), ""InOut"", ""Quart"", 0.3, true, nil)
end)

addcmd(""antichatlogs"", {""antichatlogger""}, function(args, speaker)
    if not isLegacyChat then
        return notify(""antichatlogs"", ""Game needs the legacy chat"")
    end
    local MessagePosted, _ = pcall(function()
        rawset(require(speaker:FindFirstChild(""PlayerScripts""):FindFirstChild(""ChatScript"").ChatMain), ""MessagePosted"", {
            [""fire""] = function(msg)
                return msg
            end,
            [""wait""] = function()
                return
            end,
            [""connect""] = function()
                return
            end
        })
    end)
    notify(""antichatlogs"", MessagePosted and ""Enabled"" or ""Failed to enable antichatlogs"")
end)

flinging = false
addcmd('fling',{},function(args, speaker)
	flinging = false
	for _, child in pairs(speaker.Character:GetDescendants()) do
		if child:IsA(""BasePart"") then
			child.CustomPhysicalProperties = PhysicalProperties.new(math.huge, 0.3, 0.5)
		end
	end
	execCmd('noclip')
	wait(.1)
	local bambam = Instance.new(""BodyAngularVelocity"")
	bambam.Name = randomString()
	bambam.Parent = getRoot(speaker.Character)
	bambam.AngularVelocity = Vector3.new(0,99999,0)
	bambam.MaxTorque = Vector3.new(0,math.huge,0)
	bambam.P = math.huge
	local Char = speaker.Character:GetChildren()
	for i, v in next, Char do
		if v:IsA(""BasePart"") then
			v.CanCollide = false
			v.Massless = true
			v.Velocity = Vector3.new(0, 0, 0)
		end
	end
	flinging = true
	local function flingDiedF()
		execCmd('unfling')
	end
	flingDied = speaker.Character:FindFirstChildOfClass('Humanoid').Died:Connect(flingDiedF)
	repeat
		bambam.AngularVelocity = Vector3.new(0,99999,0)
		wait(.2)
		bambam.AngularVelocity = Vector3.new(0,0,0)
		wait(.1)
	until flinging == false
end)

addcmd('unfling',{'nofling'},function(args, speaker)
	execCmd('clip')
	if flingDied then
		flingDied:Disconnect()
	end
	flinging = false
	wait(.1)
	local speakerChar = speaker.Character
	if not speakerChar or not getRoot(speakerChar) then return end
	for i,v in pairs(getRoot(speakerChar):GetChildren()) do
		if v.ClassName == 'BodyAngularVelocity' then
			v:Destroy()
		end
	end
	for _, child in pairs(speakerChar:GetDescendants()) do
		if child.ClassName == ""Part"" or child.ClassName == ""MeshPart"" then
			child.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5)
		end
	end
end)

addcmd('togglefling',{},function(args, speaker)
	if flinging then
		execCmd('unfling')
	else
		execCmd('fling')
	end
end)

addcmd(""flyfling"", {}, function(args, speaker)
    execCmd(""unvehiclefly\\unfling\\unnoclip"")
    wait()
    execCmd(""vehiclefly\\fling\\noclip"")
end)

addcmd(""unflyfling"", {}, function(args, speaker)
    execCmd(""unvehiclefly\\unfling\\unnoclip\\breakvelocity"")
end)

addcmd(""toggleflyfling"", {}, function(args, speaker)
    execCmd(flinging and ""unflyfling"" or ""flyfling"")
end)

walkflinging = false
addcmd(""walkfling"", {}, function(args, speaker)
    execCmd(""unwalkfling"")
    local humanoid = speaker.Character:FindFirstChildWhichIsA(""Humanoid"")
    if humanoid then
        humanoid.Died:Connect(function()
            execCmd(""unwalkfling"")
        end)
    end

    execCmd(""noclip"")
    walkflinging = true
    repeat RunService.Heartbeat:Wait()
        local character = speaker.Character
        local root = getRoot(character)
        local vel, movel = nil, 0.1

        while not (character and character.Parent and root and root.Parent) do
            RunService.Heartbeat:Wait()
            character = speaker.Character
            root = getRoot(character)
        end

        vel = root.Velocity
        root.Velocity = vel * 1000000 + Vector3.new(0, 1000000, 0)

        RunService.RenderStepped:Wait()
        if character and character.Parent and root and root.Parent then
            root.Velocity = vel
        end

        RunService.Stepped:Wait()
        if character and character.Parent and root and root.Parent then
            root.Velocity = vel + Vector3.new(0, movel, 0)
            movel = movel * -1
        end
    until walkflinging == false
end)

addcmd(""unwalkfling"", {""nowalkfling""}, function(args, speaker)
    walkflinging = false
    execCmd(""unnoclip"")
end)

addcmd(""togglewalkfling"", {}, function(args, speaker)
    execCmd(walkflinging and ""unwalkfling"" or ""walkfling"")
end)

addcmd('invisfling',{},function(args, speaker)
	local ch = speaker.Character
	local prt=Instance.new(""Model"")
	prt.Parent = speaker.Character
	local z1 = Instance.new(""Part"")
	z1.Name=""Torso""
	z1.CanCollide = false
	z1.Anchored = true
	local z2 = Instance.new(""Part"")
	z2.Name=""Head""
	z2.Parent = prt
	z2.Anchored = true
	z2.CanCollide = false
	local z3 =Instance.new(""Humanoid"")
	z3.Name=""Humanoid""
	z3.Parent = prt
	z1.Position = Vector3.new(0,9999,0)
	speaker.Character=prt
	wait(3)
	speaker.Character=ch
	wait(3)
	local Hum = Instance.new(""Humanoid"")
	z2:Clone()
	Hum.Parent = speaker.Character
	local root =  getRoot(speaker.Character)
	for i,v in pairs(speaker.Character:GetChildren()) do
		if v ~= root and  v.Name ~= ""Humanoid"" then
			v:Destroy()
		end
	end
	root.Transparency = 0
	root.Color = Color3.new(1, 1, 1)
	local invisflingStepped
	invisflingStepped = RunService.Stepped:Connect(function()
		if speaker.Character and getRoot(speaker.Character) then
			getRoot(speaker.Character).CanCollide = false
		else
			invisflingStepped:Disconnect()
		end
	end)
	sFLY()
	workspace.CurrentCamera.CameraSubject = root
	local bambam = Instance.new(""BodyThrust"")
	bambam.Parent = getRoot(speaker.Character)
	bambam.Force = Vector3.new(99999,99999*10,99999)
	bambam.Location = getRoot(speaker.Character).Position
end)

addcmd(""antifling"", {}, function(args, speaker)
    if antifling then
        antifling:Disconnect()
        antifling = nil
    end
    antifling = RunService.Stepped:Connect(function()
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= speaker and player.Character then
                for _, v in pairs(player.Character:GetDescendants()) do
                    if v:IsA(""BasePart"") then
                        v.CanCollide = false
                    end
                end
            end
        end
    end)
end)

addcmd(""unantifling"", {}, function(args, speaker)
    if antifling then
        antifling:Disconnect()
        antifling = nil
    end
end)

addcmd(""toggleantifling"", {}, function(args, speaker)
    execCmd(antifling and ""unantifling"" or ""antifling"")
end)

function attach(speaker,target)
	if tools(speaker) then
		local char = speaker.Character
		local tchar = target.Character
		local hum = speaker.Character:FindFirstChildOfClass(""Humanoid"")
		local hrp = getRoot(speaker.Character)
		local hrp2 = getRoot(target.Character)
		hum.Name = ""1""
		local newHum = hum:Clone()
		newHum.Parent = char
		newHum.Name = ""Humanoid""
		wait()
		hum:Destroy()
		workspace.CurrentCamera.CameraSubject = char
		newHum.DisplayDistanceType = ""None""
		local tool = speaker:FindFirstChildOfClass(""Backpack""):FindFirstChildOfClass(""Tool"") or speaker.Character:FindFirstChildOfClass(""Tool"")
		tool.Parent = char
		hrp.CFrame = hrp2.CFrame * CFrame.new(0, 0, 0) * CFrame.new(math.random(-100, 100)/200,math.random(-100, 100)/200,math.random(-100, 100)/200)
		local n = 0
		repeat
			wait(.1)
			n = n + 1
			hrp.CFrame = hrp2.CFrame
		until (tool.Parent ~= char or not hrp or not hrp2 or not hrp.Parent or not hrp2.Parent or n > 250) and n > 2
	else
		notify('Tool Required','You need to have an item in your inventory to use this command')
	end
end

addcmd('attach',{},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		attach(speaker,Players[v])
	end
end)

function kill(speaker,target,fast)
	if tools(speaker) then
		if target ~= nil then
			local NormPos = getRoot(speaker.Character).CFrame
			if not fast then
				refresh(speaker)
				wait()
				repeat wait() until speaker.Character ~= nil and getRoot(speaker.Character)
				wait(0.3)
			end
			local hrp = getRoot(speaker.Character)
			attach(speaker,target)
			repeat
				wait()
				hrp.CFrame = CFrame.new(999999, workspace.FallenPartsDestroyHeight + 5,999999)
			until not getRoot(target.Character) or not getRoot(speaker.Character)
			speaker.CharacterAdded:Wait():WaitForChild(""HumanoidRootPart"").CFrame = NormPos
		end
	else
		notify('Tool Required','You need to have an item in your inventory to use this command')
	end
end

addcmd('kill',{'fekill'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		kill(speaker,Players[v])
	end
end)

addcmd('handlekill', {'hkill'}, function(args, speaker)
	if not firetouchinterest then
		return notify('Incompatible Exploit', 'Your exploit does not support this command (missing firetouchinterest)')
	end
	local RS = RunService.RenderStepped
	local Tool = speaker.Character.FindFirstChildWhichIsA(speaker.Character, ""Tool"")
	local Handle = Tool and Tool.FindFirstChild(Tool, ""Handle"")
	if not Tool or not Handle then
		return notify(""Handle Kill"", ""You need to hold a \""Tool\"" that does damage on touch. For example the default \""Sword\"" tool."")
	end
	for _, v in ipairs(getPlayer(args[1], speaker)) do
		v = Players[v]
		task.spawn(function()
			while Tool and speaker.Character and v.Character and Tool.Parent == speaker.Character do
				local Human = v.Character.FindFirstChildWhichIsA(v.Character, ""Humanoid"")
				if not Human or Human.Health <= 0 then
					break
				end
				for _, v1 in ipairs(v.Character.GetChildren(v.Character)) do
					v1 = ((v1.IsA(v1, ""BasePart"") and firetouchinterest(Handle, v1, 1, (RS.Wait(RS) and nil) or firetouchinterest(Handle, v1, 0)) and nil) or v1) or v1
				end
			end
			notify(""Handle Kill Stopped!"", v.Name .. "" died/left or you unequipped the tool!"")
		end)
	end
end)

local hb = RunService.Heartbeat
addcmd('tpwalk', {'teleportwalk'}, function(args, speaker)
	tpwalking = true
	local chr = speaker.Character
	local hum = chr and chr:FindFirstChildWhichIsA(""Humanoid"")
	while tpwalking and chr and hum and hum.Parent do
		local delta = hb:Wait()
		if hum.MoveDirection.Magnitude > 0 then
			if args[1] and isNumber(args[1]) then
				chr:TranslateBy(hum.MoveDirection * tonumber(args[1]) * delta * 10)
			else
				chr:TranslateBy(hum.MoveDirection * delta * 10)
			end
		end
	end
end)
addcmd('untpwalk', {'unteleportwalk'}, function(args, speaker)
	tpwalking = false
end)

addcmd('fastkill',{'fastfekill'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		kill(speaker,Players[v],true)
	end
end)

function bring(speaker,target,fast)
	if tools(speaker) then
		if target ~= nil then
			local NormPos = getRoot(speaker.Character).CFrame
			if not fast then
				refresh(speaker)
				wait()
				repeat wait() until speaker.Character ~= nil and getRoot(speaker.Character)
				wait(0.3)
			end
			local hrp = getRoot(speaker.Character)
			attach(speaker,target)
			repeat
				wait()
				hrp.CFrame = NormPos
			until not getRoot(target.Character) or not getRoot(speaker.Character)
			speaker.CharacterAdded:Wait():WaitForChild(""HumanoidRootPart"").CFrame = NormPos
		end
	else
		notify('Tool Required','You need to have an item in your inventory to use this command')
	end
end

addcmd('bring',{'febring'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		bring(speaker,Players[v])
	end
end)

addcmd('fastbring',{'fastfebring'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		bring(speaker,Players[v],true)
	end
end)

function teleport(speaker,target,target2,fast)
	if tools(speaker) then
		if target ~= nil then
			local NormPos = getRoot(speaker.Character).CFrame
			if not fast then
				refresh(speaker)
				wait()
				repeat wait() until speaker.Character ~= nil and getRoot(speaker.Character)
				wait(0.3)
			end
			local hrp = getRoot(speaker.Character)
			local hrp2 = getRoot(target2.Character)
			attach(speaker,target)
			repeat
				wait()
				hrp.CFrame = hrp2.CFrame
			until not getRoot(target.Character) or not getRoot(speaker.Character)
			wait(1)
			speaker.CharacterAdded:Wait():WaitForChild(""HumanoidRootPart"").CFrame = NormPos
		end
	else
		notify('Tool Required','You need to have an item in your inventory to use this command')
	end
end

addcmd('tp',{'teleport'},function(args, speaker)
	local players1=getPlayer(args[1], speaker)
	local players2=getPlayer(args[2], speaker)
	for i,v in pairs(players1)do
		if getRoot(Players[v].Character) and getRoot(Players[players2[1]].Character) then
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			teleport(speaker,Players[v],Players[players2[1]])
		end
	end
end)

addcmd('fasttp',{'fastteleport'},function(args, speaker)
	local players1=getPlayer(args[1], speaker)
	local players2=getPlayer(args[2], speaker)
	for i,v in pairs(players1)do
		if getRoot(Players[v].Character) and getRoot(Players[players2[1]].Character) then
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			teleport(speaker,Players[v],Players[players2[1]],true)
		end
	end
end)

addcmd('spin',{},function(args, speaker)
	local spinSpeed = 20
	if args[1] and isNumber(args[1]) then
		spinSpeed = args[1]
	end
	for i,v in pairs(getRoot(speaker.Character):GetChildren()) do
		if v.Name == ""Spinning"" then
			v:Destroy()
		end
	end
	local Spin = Instance.new(""BodyAngularVelocity"")
	Spin.Name = ""Spinning""
	Spin.Parent = getRoot(speaker.Character)
	Spin.MaxTorque = Vector3.new(0, math.huge, 0)
	Spin.AngularVelocity = Vector3.new(0,spinSpeed,0)
end)

addcmd('unspin',{},function(args, speaker)
	for i,v in pairs(getRoot(speaker.Character):GetChildren()) do
		if v.Name == ""Spinning"" then
			v:Destroy()
		end
	end
end)

xrayEnabled = false
xray = function()
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA(""BasePart"") and not v.Parent:FindFirstChildWhichIsA(""Humanoid"") and not v.Parent.Parent:FindFirstChildWhichIsA(""Humanoid"") then
            v.LocalTransparencyModifier = xrayEnabled and 0.5 or 0
        end
    end
end

addcmd(""xray"", {}, function(args, speaker)
    xrayEnabled = true
    xray()
end)

addcmd(""unxray"", {""noxray""}, function(args, speaker)
    xrayEnabled = false
    xray()
end)

addcmd(""togglexray"", {}, function(args, speaker)
    xrayEnabled = not xrayEnabled
    xray()
end)

addcmd(""loopxray"", {}, function(args, speaker)
    if xrayLoop then
        xrayLoop:Disconnect()
    end
    xrayLoop = RunService.RenderStepped:Connect(function()
        xrayEnabled = true
        xray()
    end)
end)

addcmd(""unloopxray"", {}, function(args, speaker)
    if xrayLoop then
        xrayLoop:Disconnect()
    end
end)

local walltpTouch = nil
addcmd('walltp',{},function(args, speaker)
	local torso
	if r15(speaker) then
		torso = speaker.Character.UpperTorso
	else
		torso = speaker.Character.Torso
	end
	local function touchedFunc(hit)
		local Root = getRoot(speaker.Character)
		if hit:IsA(""BasePart"") and hit.Position.Y > Root.Position.Y - speaker.Character:FindFirstChildOfClass('Humanoid').HipHeight then
			local hitP = getRoot(hit.Parent)
			if hitP ~= nil then
				Root.CFrame = hit.CFrame * CFrame.new(Root.CFrame.lookVector.X,hitP.Size.Z/2 + speaker.Character:FindFirstChildOfClass('Humanoid').HipHeight,Root.CFrame.lookVector.Z)
			elseif hitP == nil then
				Root.CFrame = hit.CFrame * CFrame.new(Root.CFrame.lookVector.X,hit.Size.Y/2 + speaker.Character:FindFirstChildOfClass('Humanoid').HipHeight,Root.CFrame.lookVector.Z)
			end
		end
	end
	walltpTouch = torso.Touched:Connect(touchedFunc)
end)

addcmd('unwalltp',{'nowalltp'},function(args, speaker)
	if walltpTouch then
		walltpTouch:Disconnect()
	end
end)

autoclicking = false
addcmd('autoclick',{},function(args, speaker)
	if mouse1press and mouse1release then
		execCmd('unautoclick')
		wait()
		local clickDelay = 0.1
		local releaseDelay = 0.1
		if args[1] and isNumber(args[1]) then clickDelay = args[1] end
		if args[2] and isNumber(args[2]) then releaseDelay = args[2] end
		autoclicking = true
		cancelAutoClick = UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
			if not gameProcessedEvent then
				if (input.KeyCode == Enum.KeyCode.Backspace and UserInputService:IsKeyDown(Enum.KeyCode.Equals)) or (input.KeyCode == Enum.KeyCode.Equals and UserInputService:IsKeyDown(Enum.KeyCode.Backspace)) then
					autoclicking = false
					cancelAutoClick:Disconnect()
				end
			end
		end)
		notify('Auto Clicker',""Press [backspace] and [=] at the same time to stop"")
		repeat wait(clickDelay)
			mouse1press()
			wait(releaseDelay)
			mouse1release()
		until autoclicking == false
	else
		notify('Auto Clicker',""Your exploit doesn't have the ability to use the autoclick"")
	end
end)

addcmd('unautoclick',{'noautoclick'},function(args, speaker)
	autoclicking = false
	if cancelAutoClick then cancelAutoClick:Disconnect() end
end)

addcmd('mousesensitivity',{'ms'},function(args, speaker)
	UserInputService.MouseDeltaSensitivity = args[1]
end)

local nameBox = nil
local nbSelection = nil
addcmd('hovername',{},function(args, speaker)
	execCmd('unhovername')
	wait()
	nameBox = Instance.new(""TextLabel"")
	nameBox.Name = randomString()
	nameBox.Parent = PARENT
	nameBox.BackgroundTransparency = 1
	nameBox.Size = UDim2.new(0,200,0,30)
	nameBox.Font = Enum.Font.Code
	nameBox.TextSize = 16
	nameBox.Text = """"
	nameBox.TextColor3 = Color3.new(1, 1, 1)
	nameBox.TextStrokeTransparency = 0
	nameBox.TextXAlignment = Enum.TextXAlignment.Left
	nameBox.ZIndex = 10
	nbSelection = Instance.new('SelectionBox')
	nbSelection.Name = randomString()
	nbSelection.LineThickness = 0.03
	nbSelection.Color3 = Color3.new(1, 1, 1)
	local function updateNameBox()
		local t
		local target = IYMouse.Target

		if target then
			local humanoid = target.Parent:FindFirstChildOfClass(""Humanoid"") or target.Parent.Parent:FindFirstChildOfClass(""Humanoid"")
			if humanoid then
				t = humanoid.Parent
			end
		end

		if t ~= nil then
			local x = IYMouse.X
			local y = IYMouse.Y
			local xP
			local yP
			if IYMouse.X > 200 then
				xP = x - 205
				nameBox.TextXAlignment = Enum.TextXAlignment.Right
			else
				xP = x + 25
				nameBox.TextXAlignment = Enum.TextXAlignment.Left
			end
			nameBox.Position = UDim2.new(0, xP, 0, y)
			nameBox.Text = t.Name
			nameBox.Visible = true
			nbSelection.Parent = t
			nbSelection.Adornee = t
		else
			nameBox.Visible = false
			nbSelection.Parent = nil
			nbSelection.Adornee = nil
		end
	end
	nbUpdateFunc = IYMouse.Move:Connect(updateNameBox)
end)

addcmd('unhovername',{'nohovername'},function(args, speaker)
	if nbUpdateFunc then
		nbUpdateFunc:Disconnect()
		nameBox:Destroy()
		nbSelection:Destroy()
	end
end)

addcmd('headsize',{},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		if Players[v] ~= speaker and Players[v].Character:FindFirstChild('Head') then
			local sizeArg = tonumber(args[2])
			local Size = Vector3.new(sizeArg,sizeArg,sizeArg)
			local Head = Players[v].Character:FindFirstChild('Head')
			if Head:IsA(""BasePart"") then
				if not args[2] or sizeArg == 1 then
					Head.Size = Vector3.new(2,1,1)
				else
					Head.Size = Size
				end
			end
		end
	end
end)

addcmd('hitbox',{},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		if Players[v] ~= speaker and Players[v].Character:FindFirstChild('HumanoidRootPart') then
			local sizeArg = tonumber(args[2])
			local Size = Vector3.new(sizeArg,sizeArg,sizeArg)
			local Root = Players[v].Character:FindFirstChild('HumanoidRootPart')
			if Root:IsA(""BasePart"") then
				if not args[2] or sizeArg == 1 then
					Root.Size = Vector3.new(2,1,1)
					Root.Transparency = 0.4
				else
					Root.Size = Size
					Root.Transparency = 0.4
				end
			end
		end
	end
end)

addcmd('stareat',{'stare'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		if stareLoop then
			stareLoop:Disconnect()
		end
		if not Players.LocalPlayer.Character:FindFirstChild(""HumanoidRootPart"") and Players[v].Character:FindFirstChild(""HumanoidRootPart"") then return end
		local function stareFunc()
			if Players.LocalPlayer.Character.PrimaryPart and Players:FindFirstChild(v) and Players[v].Character ~= nil and Players[v].Character:FindFirstChild(""HumanoidRootPart"") then
				local chrPos=Players.LocalPlayer.Character.PrimaryPart.Position
				local tPos=Players[v].Character:FindFirstChild(""HumanoidRootPart"").Position
				local modTPos=Vector3.new(tPos.X,chrPos.Y,tPos.Z)
				local newCF=CFrame.new(chrPos,modTPos)
				Players.LocalPlayer.Character:SetPrimaryPartCFrame(newCF)
			elseif not Players:FindFirstChild(v) then
				stareLoop:Disconnect()
			end
		end

		stareLoop = RunService.RenderStepped:Connect(stareFunc)
	end
end)

addcmd('unstareat',{'unstare','nostare','nostareat'},function(args, speaker)
	if stareLoop then
		stareLoop:Disconnect()
	end
end)

RolewatchData = {Group = 0, Role = """", Leave = false}
RolewatchConnection = Players.PlayerAdded:Connect(function(player)
	if RolewatchData.Group == 0 then return end
	if player:IsInGroup(RolewatchData.Group) then
		if tostring(player:GetRoleInGroup(RolewatchData.Group)):lower() == RolewatchData.Role:lower() then
			if RolewatchData.Leave == true then
				Players.LocalPlayer:Kick(""\n\nRolewatch\nPlayer \"""" .. tostring(player.Name) .. ""\"" has joined with the Role \"""" .. RolewatchData.Role .. ""\""\n"")
			else
				notify(""Rolewatch"", ""Player \"""" .. tostring(player.Name) .. ""\"" has joined with the Role \"""" .. RolewatchData.Role .. ""\"""")
			end
		end
	end
end)

addcmd(""rolewatch"", {}, function(args, speaker)
    local groupId = tonumber(args[1] or 0)
    local roleName = args[2] and tostring(getstring(2))
    if groupId and roleName then
        RolewatchData.Group = groupId
        RolewatchData.Role = roleName
        notify(""Rolewatch"", ""Watching Group ID \"""" .. tostring(groupId) .. ""\"" for Role \"""" .. roleName .. ""\"""")
    end
end)

addcmd(""rolewatchstop"", {}, function(args, speaker)
    RolewatchData.Group = 0
    RolewatchData.Role = """"
    RolewatchData.Leave = false
    notify(""Rolewatch"", ""Disabled"")
end)

addcmd(""rolewatchleave"", {""unrolewatch""}, function(args, speaker)
    RolewatchData.Leave = not RolewatchData.Leave
    notify(""Rolewatch"", RolewatchData.Leave and ""Leave has been Enabled"" or ""Leave has been Disabled"")
end)

staffRoles = {""mod"", ""admin"", ""staff"", ""dev"", ""founder"", ""owner"", ""supervis"", ""manager"", ""management"", ""executive"", ""president"", ""chairman"", ""chairwoman"", ""chairperson"", ""director""}

getStaffRole = function(player)
    local playerRole = player:GetRoleInGroup(game.CreatorId)
    local result = {Role = playerRole, Staff = false}
    if player:IsInGroup(1200769) then
        result.Role = ""Roblox Employee""
        result.Staff = true
    end
    for _, role in pairs(staffRoles) do
        if string.find(string.lower(playerRole), role) then
            result.Staff = true
        end
    end
    return result
end

addcmd(""staffwatch"", {}, function(args, speaker)
    if staffwatchjoin then
        staffwatchjoin:Disconnect()
    end
    if game.CreatorType == Enum.CreatorType.Group then
        local found = {}
        staffwatchjoin = Players.PlayerAdded:Connect(function(player)
            local result = getStaffRole(player)
            if result.Staff then
                notify(""Staffwatch"", formatUsername(player) .. "" is a "" .. result.Role)
            end
        end)
        for _, player in pairs(Players:GetPlayers()) do
            local result = getStaffRole(player)
            if result.Staff then
                table.insert(found, formatUsername(player) .. "" is a "" .. result.Role)
            end
        end
        if #found > 0 then
            notify(""Staffwatch"", table.concat(found, "",\n""))
        else
            notify(""Staffwatch"", ""Enabled"")
        end
    else
        notify(""Staffwatch"", ""Game is not owned by a Group"")
    end
end)

addcmd(""unstaffwatch"", {}, function(args, speaker)
    if staffwatchjoin then
        staffwatchjoin:Disconnect()
    end
    notify(""Staffwatch"", ""Disabled"")
end)

addcmd('removeterrain',{'rterrain','noterrain'},function(args, speaker)
	workspace:FindFirstChildOfClass('Terrain'):Clear()
end)

addcmd('clearnilinstances',{'nonilinstances','cni'},function(args, speaker)
	if getnilinstances then
		for i,v in pairs(getnilinstances()) do
			v:Destroy()
		end
	else
		notify('Incompatible Exploit','Your exploit does not support this command (missing getnilinstances)')
	end
end)

addcmd('destroyheight',{'dh'},function(args, speaker)
	local dh = args[1] or -500
	if isNumber(dh) then
		workspace.FallenPartsDestroyHeight = dh
	end
end)

OrgDestroyHeight = workspace.FallenPartsDestroyHeight
addcmd(""fakeout"", {}, function(args, speaker)
    local root = getRoot(speaker.Character)
    local oldpos = root.CFrame
    workspace.FallenPartsDestroyHeight = 0/1/0
    root.CFrame = CFrame.new(Vector3.new(0, OrgDestroyHeight - 25, 0))
    wait(1)
    root.CFrame = oldpos
    workspace.FallenPartsDestroyHeight = OrgDestroyHeight
end)

antivoidloop = false
addcmd(""antivoid"", {}, function(args, speaker)
    execCmd(""unantivoid nonotify"")
    wait()
    antivoidloop = RunService.Stepped:Connect(function()
        local root = getRoot(speaker.Character)
        if root and root.Position.Y <= OrgDestroyHeight + 25 then
            root.Velocity = root.Velocity + Vector3.new(0, 250, 0)
        end
    end)
    notify(""antivoid"", ""Enabled"")
end)

addcmd(""unantivoid"", {""noantivoid""}, function(args, speaker)
    antivoidloop:Disconnect()
    antivoidloop = nil
    if args[1] ~= ""nonotify"" then notify(""antivoid"", ""Disabled"") end
end)

addcmd('trip',{},function(args, speaker)
	if speaker and speaker.Character and speaker.Character:FindFirstChildOfClass(""Humanoid"") and getRoot(speaker.Character) then
		local hum = speaker.Character:FindFirstChildOfClass(""Humanoid"")
		local root = getRoot(speaker.Character)
		hum:ChangeState(0)
		root.Velocity = root.CFrame.LookVector * 30
	end
end)

addcmd(""removeads"", {""adblock""}, function(args, speaker)
    while wait() do
        pcall(function()
            for i, v in pairs(workspace:GetDescendants()) do
                if v:IsA(""PackageLink"") then
                    if v.Parent:FindFirstChild(""ADpart"") then
                        v.Parent:Destroy()
                    end
                    if v.Parent:FindFirstChild(""AdGuiAdornee"") then
                        v.Parent.Parent:Destroy()
                    end
                end
            end
        end)
    end
end)

local freezingua = nil
frozenParts = {}
addcmd('freezeunanchored',{'freezeua'},function(args, speaker)
    local badnames = {
        ""Head"",
        ""UpperTorso"",
        ""LowerTorso"",
        ""RightUpperArm"",
        ""LeftUpperArm"",
        ""RightLowerArm"",
        ""LeftLowerArm"",
        ""RightHand"",
        ""LeftHand"",
        ""RightUpperLeg"",
        ""LeftUpperLeg"",
        ""RightLowerLeg"",
        ""LeftLowerLeg"",
        ""RightFoot"",
        ""LeftFoot"",
        ""Torso"",
        ""Right Arm"",
        ""Left Arm"",
        ""Right Leg"",
        ""Left Leg"",
        ""HumanoidRootPart""
    }
    local function FREEZENOOB(v)
        if v:IsA(""BasePart"" or ""UnionOperation"") and v.Anchored == false then
            local BADD = false
            for i = 1,#badnames do
                if v.Name == badnames[i] then
                    BADD = true
                end
            end
            if speaker.Character and v:IsDescendantOf(speaker.Character) then
                BADD = true
            end
            if BADD == false then
                for i,c in pairs(v:GetChildren()) do
                    if c:IsA(""BodyPosition"") or c:IsA(""BodyGyro"") then
                        c:Destroy()
                    end
                end
                local bodypos = Instance.new(""BodyPosition"")
                bodypos.Parent = v
                bodypos.Position = v.Position
                bodypos.MaxForce = Vector3.new(math.huge,math.huge,math.huge)
                local bodygyro = Instance.new(""BodyGyro"")
                bodygyro.Parent = v
                bodygyro.CFrame = v.CFrame
                bodygyro.MaxTorque = Vector3.new(math.huge,math.huge,math.huge)
                if not table.find(frozenParts,v) then
                    table.insert(frozenParts,v)
                end
            end
        end
    end
    for i,v in pairs(workspace:GetDescendants()) do
        FREEZENOOB(v)
    end
    freezingua = workspace.DescendantAdded:Connect(FREEZENOOB)
end)

addcmd('thawunanchored',{'thawua','unfreezeunanchored','unfreezeua'},function(args, speaker)
    if freezingua then
        freezingua:Disconnect()
    end
    for i,v in pairs(frozenParts) do
        for i,c in pairs(v:GetChildren()) do
            if c:IsA(""BodyPosition"") or c:IsA(""BodyGyro"") then
                c:Destroy()
            end
        end
    end
    frozenParts = {}
end)

addcmd('tpunanchored',{'tpua'},function(args, speaker)
    local players = getPlayer(args[1], speaker)
    for i,v in pairs(players) do
        local Forces = {}
        for _,part in pairs(workspace:GetDescendants()) do
            if Players[v].Character:FindFirstChild('Head') and part:IsA(""BasePart"" or ""UnionOperation"" or ""Model"") and part.Anchored == false and not part:IsDescendantOf(speaker.Character) and part.Name == ""Torso"" == false and part.Name == ""Head"" == false and part.Name == ""Right Arm"" == false and part.Name == ""Left Arm"" == false and part.Name == ""Right Leg"" == false and part.Name == ""Left Leg"" == false and part.Name == ""HumanoidRootPart"" == false then
                for i,c in pairs(part:GetChildren()) do
                    if c:IsA(""BodyPosition"") or c:IsA(""BodyGyro"") then
                        c:Destroy()
                    end
                end
                local ForceInstance = Instance.new(""BodyPosition"")
                ForceInstance.Parent = part
                ForceInstance.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                table.insert(Forces, ForceInstance)
                if not table.find(frozenParts,part) then
                    table.insert(frozenParts,part)
                end
            end
        end
        for i,c in pairs(Forces) do
            c.Position = Players[v].Character.Head.Position
        end
    end
end)

keycodeMap = {
	[""0""] = 0x30,
	[""1""] = 0x31,
	[""2""] = 0x32,
	[""3""] = 0x33,
	[""4""] = 0x34,
	[""5""] = 0x35,
	[""6""] = 0x36,
	[""7""] = 0x37,
	[""8""] = 0x38,
	[""9""] = 0x39,
	[""a""] = 0x41,
	[""b""] = 0x42,
	[""c""] = 0x43,
	[""d""] = 0x44,
	[""e""] = 0x45,
	[""f""] = 0x46,
	[""g""] = 0x47,
	[""h""] = 0x48,
	[""i""] = 0x49,
	[""j""] = 0x4A,
	[""k""] = 0x4B,
	[""l""] = 0x4C,
	[""m""] = 0x4D,
	[""n""] = 0x4E,
	[""o""] = 0x4F,
	[""p""] = 0x50,
	[""q""] = 0x51,
	[""r""] = 0x52,
	[""s""] = 0x53,
	[""t""] = 0x54,
	[""u""] = 0x55,
	[""v""] = 0x56,
	[""w""] = 0x57,
	[""x""] = 0x58,
	[""y""] = 0x59,
	[""z""] = 0x5A,
	[""enter""] = 0x0D,
	[""shift""] = 0x10,
	[""ctrl""] = 0x11,
	[""alt""] = 0x12,
	[""pause""] = 0x13,
	[""capslock""] = 0x14,
	[""spacebar""] = 0x20,
	[""space""] = 0x20,
	[""pageup""] = 0x21,
	[""pagedown""] = 0x22,
	[""end""] = 0x23,
	[""home""] = 0x24,
	[""left""] = 0x25,
	[""up""] = 0x26,
	[""right""] = 0x27,
	[""down""] = 0x28,
	[""insert""] = 0x2D,
	[""delete""] = 0x2E,
	[""f1""] = 0x70,
	[""f2""] = 0x71,
	[""f3""] = 0x72,
	[""f4""] = 0x73,
	[""f5""] = 0x74,
	[""f6""] = 0x75,
	[""f7""] = 0x76,
	[""f8""] = 0x77,
	[""f9""] = 0x78,
	[""f10""] = 0x79,
	[""f11""] = 0x7A,
	[""f12""] = 0x7B,
}
autoKeyPressing = false
cancelAutoKeyPress = nil

addcmd('autokeypress',{'keypress'},function(args, speaker)
	if keypress and keyrelease and args[1] then
		local code = keycodeMap[args[1]:lower()]
		if not code then notify('Auto Key Press',""Invalid key"") return end
		execCmd('unautokeypress')
		wait()
		local clickDelay = 0.1
		local releaseDelay = 0.1
		if args[2] and isNumber(args[2]) then clickDelay = args[2] end
		if args[3] and isNumber(args[3]) then releaseDelay = args[3] end
		autoKeyPressing = true
		cancelAutoKeyPress = UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
			if not gameProcessedEvent then
				if (input.KeyCode == Enum.KeyCode.Backspace and UserInputService:IsKeyDown(Enum.KeyCode.Equals)) or (input.KeyCode == Enum.KeyCode.Equals and UserInputService:IsKeyDown(Enum.KeyCode.Backspace)) then
					autoKeyPressing = false
					cancelAutoKeyPress:Disconnect()
				end
			end
		end)
		notify('Auto Key Press',""Press [backspace] and [=] at the same time to stop"")
		repeat wait(clickDelay)
			keypress(code)
			wait(releaseDelay)
			keyrelease(code)
		until autoKeyPressing == false
		if cancelAutoKeyPress then cancelAutoKeyPress:Disconnect() keyrelease(code) end
	else
		notify('Auto Key Press',""Your exploit doesn't have the ability to use auto key press"")
	end
end)

addcmd('unautokeypress',{'noautokeypress','unkeypress','nokeypress'},function(args, speaker)
	autoKeyPressing = false
	if cancelAutoKeyPress then cancelAutoKeyPress:Disconnect() end
end)

addcmd('addplugin',{'plugin'},function(args, speaker)
	addPlugin(getstring(1))
end)

addcmd('removeplugin',{'deleteplugin'},function(args, speaker)
	deletePlugin(getstring(1))
end)

addcmd('reloadplugin',{},function(args, speaker)
	local pluginName = getstring(1)
	deletePlugin(pluginName)
	wait(1)
	addPlugin(pluginName)
end)

addcmd('removecmd',{'deletecmd'},function(args, speaker)
	removecmd(args[1])
end)

if IsOnMobile then
	local QuickCapture = Instance.new(""TextButton"")
	local UICorner = Instance.new(""UICorner"")
	QuickCapture.Name = randomString()
	QuickCapture.Parent = PARENT
	QuickCapture.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
	QuickCapture.BackgroundTransparency = 0.14
	QuickCapture.Position = UDim2.new(0.489, 0, 0, 0)
	QuickCapture.Size = UDim2.new(0, 32, 0, 33)
	QuickCapture.Font = Enum.Font.SourceSansBold
	QuickCapture.Text = ""IY""
	QuickCapture.TextColor3 = Color3.fromRGB(255, 255, 255)
	QuickCapture.TextSize = 20.000
	QuickCapture.TextWrapped = true
	QuickCapture.Draggable = true
	UICorner.Name = randomString()
	UICorner.CornerRadius = UDim.new(0.5, 0)
	UICorner.Parent = QuickCapture
	QuickCapture.MouseButton1Click:Connect(function()
		Cmdbar:CaptureFocus()
		maximizeHolder()
	end)
	table.insert(shade1, QuickCapture)
	table.insert(text1, QuickCapture)
end

updateColors(currentShade1,shade1)
updateColors(currentShade2,shade2)
updateColors(currentShade3,shade3)
updateColors(currentText1,text1)
updateColors(currentText2,text2)
updateColors(currentScroll,scroll)

if PluginsTable ~= nil or PluginsTable ~= {} then
	FindPlugins(PluginsTable)
end

-- Events
eventEditor.RegisterEvent(""OnExecute"")
eventEditor.RegisterEvent(""OnSpawn"",{
	{Type=""Player"",Name=""Player Filter ($1)""}
})
eventEditor.RegisterEvent(""OnDied"",{
	{Type=""Player"",Name=""Player Filter ($1)""}
})
eventEditor.RegisterEvent(""OnDamage"",{
	{Type=""Player"",Name=""Player Filter ($1)""},
	{Type=""Number"",Name=""Below Health ($2)""}
})
eventEditor.RegisterEvent(""OnKilled"",{
	{Type=""Player"",Name=""Victim Player ($1)""},
	{Type=""Player"",Name=""Killer Player ($2)"",Default = 1}
})
eventEditor.RegisterEvent(""OnJoin"",{
	{Type=""Player"",Name=""Player Filter ($1)"",Default = 1}
})
eventEditor.RegisterEvent(""OnLeave"",{
	{Type=""Player"",Name=""Player Filter ($1)"",Default = 1}
})
eventEditor.RegisterEvent(""OnChatted"",{
	{Type=""Player"",Name=""Player Filter ($1)"",Default = 1},
	{Type=""String"",Name=""Message Filter ($2)""}
})

function hookCharEvents(plr,instant)
	task.spawn(function()
		local char = plr.Character
		if not char then return end

		local humanoid = char:WaitForChild(""Humanoid"",10)
		if not humanoid then return end

		local oldHealth = humanoid.Health
		humanoid.HealthChanged:Connect(function(health)
			local change = math.abs(oldHealth - health)
			if oldHealth > health then
				eventEditor.FireEvent(""OnDamage"",plr.Name,tonumber(health))
			end
			oldHealth = health
		end)

		humanoid.Died:Connect(function()
			eventEditor.FireEvent(""OnDied"",plr.Name)

			local killedBy = humanoid:FindFirstChild(""creator"")
			if killedBy and killedBy.Value and killedBy.Value.Parent then
				eventEditor.FireEvent(""OnKilled"",plr.Name,killedBy.Name)
			end
		end)
	end)
end

Players.PlayerAdded:Connect(function(plr)
	eventEditor.FireEvent(""OnJoin"",plr.Name)
	if isLegacyChat then plr.Chatted:Connect(function(msg) eventEditor.FireEvent(""OnChatted"",tostring(plr),msg) end) end
	plr.CharacterAdded:Connect(function() eventEditor.FireEvent(""OnSpawn"",tostring(plr)) hookCharEvents(plr) end)
	JoinLog(plr)
	if isLegacyChat then ChatLog(plr) end
	if ESPenabled then
		repeat wait(1) until plr.Character and getRoot(plr.Character)
		ESP(plr)
	end
	if CHMSenabled then
		repeat wait(1) until plr.Character and getRoot(plr.Character)
		CHMS(plr)
	end
end)

if not isLegacyChat then
    TextChatService.MessageReceived:Connect(function(message)
        if message.TextSource then
            local player = Players:GetPlayerByUserId(message.TextSource.UserId)
            if not player then return end

            if logsEnabled == true then
                CreateLabel(player.Name, message.Text)
            end
            if player.UserId == Players.LocalPlayer.UserId then
                do_exec(message.Text, Players.LocalPlayer)
            end
            eventEditor.FireEvent(""OnChatted"", player.Name, message.Text)
        end
    end)
end

for _,plr in pairs(Players:GetPlayers()) do
	pcall(function()
		plr.CharacterAdded:Connect(function() eventEditor.FireEvent(""OnSpawn"",tostring(plr)) hookCharEvents(plr) end)
		hookCharEvents(plr)
	end)
end

if spawnCmds and #spawnCmds > 0 then
	for i,v in pairs(spawnCmds) do
		eventEditor.AddCmd(""OnSpawn"",{v.COMMAND or """",{0},v.DELAY or 0})
	end
	updatesaves()
end

if loadedEventData then eventEditor.LoadData(loadedEventData) end
eventEditor.Refresh()

eventEditor.FireEvent(""OnExecute"")

if aliases and #aliases > 0 then
	local cmdMap = {}
	for i,v in pairs(cmds) do
		cmdMap[v.NAME:lower()] = v
		for _,alias in pairs(v.ALIAS) do
			cmdMap[alias:lower()] = v
		end
	end
	for i = 1, #aliases do
		local cmd = string.lower(aliases[i].CMD)
		local alias = string.lower(aliases[i].ALIAS)
		if cmdMap[cmd] then
			customAlias[alias] = cmdMap[cmd]
		end
	end
	refreshaliases()
end

IYMouse.Move:Connect(checkTT)

task.spawn(function()
	local success, latestVersionInfo = pcall(function() 
		local versionJson = game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/version')
		return HttpService:JSONDecode(versionJson)
	end)

	if success then
		if currentVersion ~= latestVersionInfo.Version then
			notify('Outdated','Get the new version at infyiff.github.io')
		end

		if latestVersionInfo.Announcement and latestVersionInfo.Announcement ~= '' then
			local AnnGUI = Instance.new(""Frame"")
			local background = Instance.new(""Frame"")
			local TextBox = Instance.new(""TextLabel"")
			local shadow = Instance.new(""Frame"")
			local PopupText = Instance.new(""TextLabel"")
			local Exit = Instance.new(""TextButton"")
			local ExitImage = Instance.new(""ImageLabel"")

			AnnGUI.Name = randomString()
			AnnGUI.Parent = PARENT
			AnnGUI.Active = true
			AnnGUI.BackgroundTransparency = 1
			AnnGUI.Position = UDim2.new(0.5, -180, 0, -500)
			AnnGUI.Size = UDim2.new(0, 360, 0, 20)
			AnnGUI.ZIndex = 10

			background.Name = ""background""
			background.Parent = AnnGUI
			background.Active = true
			background.BackgroundColor3 = currentShade1
			background.BorderSizePixel = 0
			background.Position = UDim2.new(0, 0, 0, 20)
			background.Size = UDim2.new(0, 360, 0, 150)
			background.ZIndex = 10

			TextBox.Parent = background
			TextBox.BackgroundTransparency = 1
			TextBox.Position = UDim2.new(0, 5, 0, 5)
			TextBox.Size = UDim2.new(0, 350, 0, 140)
			TextBox.Font = Enum.Font.SourceSans
			TextBox.TextSize = 18
			TextBox.TextWrapped = true
			TextBox.Text = Announcement
			TextBox.TextColor3 = currentText1
			TextBox.TextXAlignment = Enum.TextXAlignment.Left
			TextBox.TextYAlignment = Enum.TextYAlignment.Top
			TextBox.ZIndex = 10

			shadow.Name = ""shadow""
			shadow.Parent = AnnGUI
			shadow.BackgroundColor3 = currentShade2
			shadow.BorderSizePixel = 0
			shadow.Size = UDim2.new(0, 360, 0, 20)
			shadow.ZIndex = 10

			PopupText.Name = ""PopupText""
			PopupText.Parent = shadow
			PopupText.BackgroundTransparency = 1
			PopupText.Size = UDim2.new(1, 0, 0.95, 0)
			PopupText.ZIndex = 10
			PopupText.Font = Enum.Font.SourceSans
			PopupText.TextSize = 14
			PopupText.Text = ""Server Announcement""
			PopupText.TextColor3 = currentText1
			PopupText.TextWrapped = true

			Exit.Name = ""Exit""
			Exit.Parent = shadow
			Exit.BackgroundTransparency = 1
			Exit.Position = UDim2.new(1, -20, 0, 0)
			Exit.Size = UDim2.new(0, 20, 0, 20)
			Exit.Text = """"
			Exit.ZIndex = 10

			ExitImage.Parent = Exit
			ExitImage.BackgroundColor3 = Color3.new(1, 1, 1)
			ExitImage.BackgroundTransparency = 1
			ExitImage.Position = UDim2.new(0, 5, 0, 5)
			ExitImage.Size = UDim2.new(0, 10, 0, 10)
			ExitImage.Image = ""rbxassetid://5054663650""
			ExitImage.ZIndex = 10

			wait(1)
			AnnGUI:TweenPosition(UDim2.new(0.5, -180, 0, 150), ""InOut"", ""Quart"", 0.5, true, nil)

			Exit.MouseButton1Click:Connect(function()
				AnnGUI:TweenPosition(UDim2.new(0.5, -180, 0, -500), ""InOut"", ""Quart"", 0.5, true, nil)
				wait(0.6)
				AnnGUI:Destroy()
			end)
		end
	end
end)

task.spawn(function()
	wait()
	Credits:TweenPosition(UDim2.new(0, 0, 0.9, 0), ""Out"", ""Quart"", 0.2)
	Logo:TweenSizeAndPosition(UDim2.new(0, 175, 0, 175), UDim2.new(0, 37, 0, 45), ""Out"", ""Quart"", 0.3)
	wait(1)
	local OutInfo = TweenInfo.new(1.6809, Enum.EasingStyle.Sine, Enum.EasingDirection.Out, 0, false, 0)
	TweenService:Create(Logo, OutInfo, {ImageTransparency = 1}):Play()
	TweenService:Create(IntroBackground, OutInfo, {BackgroundTransparency = 1}):Play()
	Credits:TweenPosition(UDim2.new(0, 0, 0.9, 30), ""Out"", ""Quart"", 0.2)
	wait(0.2)
	Logo:Destroy()
	Credits:Destroy()
	IntroBackground:Destroy()
	minimizeHolder()
	if IsOnMobile then notify(""Unstable Device"", ""On mobile, Elmas may have issues or features that are not functioning correctly."") end
end)"
