id,title,username,language,date,content
crn1VAaE,Untitled,gravitiq,Go,Thursday 19th of June 2025 06:48:18 AM CDT,"package main

import (
	""database/sql""
	""fmt""
	""log""

	_ ""github.com/mattn/go-sqlite3""

	""github.com/nats-io/nats.go""
)

// Storage — структура хранилища с клиентом *sql.DB
type Storage struct {
	db *sql.DB
}

// NewStorage — конструктор хранилища, сам создает клиент *sql.DB
func NewStorage(dsn string) (*Storage, error) {
	db, err := sql.Open(""sqlite3"", dsn)
	if err != nil {
		return nil, err
	}

	s := &Storage{
		db: db,
	}
	return s, nil
}

func (s *Storage) Set(key, value string) error {
	_, err := s.db.Exec(`CREATE TABLE IF NOT EXISTS data (k TEXT PRIMARY KEY, v TEXT)`)
	if err != nil {
		return err
	}

	_, err = s.db.Exec(`INSERT OR REPLACE INTO data(k, v) VALUES (?, ?)`, key, value)
	if err != nil {
		return err
	}

	return nil
}

func (s *Storage) Get(key string) (string, error) {
	row := s.db.QueryRow(`SELECT v FROM data WHERE k = ?`, key)

	var value string

	err := row.Scan(&value)
	if err != nil {
		return """", err
	}

	return value, nil
}

// NATS — структура NATS с клиентом *nats.Conn
type NATS struct {
	conn *nats.Conn
}

// NewNATS — конструктор, сам создает клиента *nats.Conn
func NewNATS(url string) (*NATS, error) {
	conn, err := nats.Connect(url)
	if err != nil {
		return nil, err
	}

	n := &NATS{
		conn: conn,
	}
	return n, nil
}

func (n *NATS) Publish(subject, message string) error {
	err := n.conn.Publish(subject, []byte(message))
	if err != nil {
		return err
	}

	return nil
}

// Service — бизнес логика
type Service struct {
	storage *Storage
	nats    *NATS
}

func NewService(storage *Storage, nats *NATS) *Service {
	s := &Service{
		storage: storage,
		nats:    nats,
	}
	return s
}

func (s *Service) SaveData(key, value string) error {
	err := s.storage.Set(key, value)
	if err != nil {
		return err
	}

	err = s.nats.Publish(""updates"", fmt.Sprintf(""%s=%s"", key, value))
	if err != nil {
		return err
	}

	return nil
}

// Handlers — структура хендлеров
type Handlers struct {
	service *Service
}

func NewHandlers(service *Service) *Handlers {
	h := &Handlers{
		service: service,
	}
	return h
}

func (h *Handlers) HandleRequest(key, value string) error {
	err := h.service.SaveData(key, value)
	if err != nil {
		return err
	}

	fmt.Println(""Request handled"")
	return nil
}

func main() {
	storage, err := NewStorage("":memory:"")
	if err != nil {
		log.Fatal(err)
	}

	natsConn, err := NewNATS(nats.DefaultURL)
	if err != nil {
		log.Fatal(err)
	}

	service := NewService(storage, natsConn)
	handlers := NewHandlers(service)

	err = handlers.HandleRequest(""foo"", ""bar"")
	if err != nil {
		log.Fatal(err)
	}

	value, err := storage.Get(""foo"")
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf(""Stored value: %s\n"", value)
}
"
gSTKwmfN,dataNone,TestGuy1,JSON,Thursday 19th of June 2025 06:00:04 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'c81050fda84d6b87b8e25e096cf4b4a935a4d9aff8523f9b95b835f9b5ec9dddd0732b0d5443b37b632d3f550964599d591f24169ee4528ef5a4a6442dea27024396e9cad55c05c1cdfdca3dffc45fe72bfddf951c5625518b4e33f8ef4731a91a062699172b63952728ac4fc44564d6926960229f0636823cc9abc804729d7b',
  otherdata: [
    '3a18bd44e67f56894a846321bf37a92e',
    '6ee5f21870d5541d9e334f8938acd2d2',
    '69eb0014b78fb3bd65d454a24518de42',
    '91c51ad8f728e478258c2f898d775ed0',
    '5686d5452cb2b33736ad7b3da324c77d',
    '87a18ac9bc7386fc9ee88d994ece0ee3',
    'fa55ebfe716aa68babfbf875fd11721a',
    '00105a489ac24c8efc4bed71d3763266'
  ]
}"
5PEva6nU,Min number in an Array,Anonymous0069,C++,Thursday 19th of June 2025 05:49:08 AM CDT,"#include <iostream>
using namespace std;

int main(){
    int size;
    cout << ""Enter the number of numbers you want to enter: "" ;
    cin >> size; 
    
    int num[size] = {};
    cout << ""Enter the numbers: "" ;
    
    for (int i = 0; i < size; i++){
        cin >> num[i];
    }
    
    int n = 0;

    for(int i = 0; i < size; i++){
        for(int j = 0; j < size; j++){
            if(num[i] < num[j]){
                n = num[i];
            
            } else if (num[i]> num[j]) {
                break;

            } else {
                continue;
            }

        }

        }
    cout << n << endl;
    
    return 0;
    }"
5MUtE9rb,Untitled,DeEskalator,Swift,Thursday 19th of June 2025 05:35:55 AM CDT,"/// Process an image and return the first table detected
    func extractTable(from image: Data) async throws -> DocumentObservation.Container.Table {
        
        // The Vision request.
        let request = RecognizeDocumentsRequest()
        
        // Perform the request on the image data and return the results.
        let observations = try await request.perform(on: image)

        // Get the first observation from the array.
        guard let document = observations.first?.document else {
            throw AppError.noDocument
        }
        
        // Extract the first table detected.
        guard let table = document.tables.first else {
            throw AppError.noTable
        }
        
        return table
    }
    
    /// Extract name, email addresses, and phone number from a table into a list of contacts.
    private func parseTable(_ table: DocumentObservation.Container.Table) {
        var foundItems = [Contact]()
        
        // Iterate over each row in the table.
        for row in table.rows {
            // The contact name will be taken from the first column.
            guard let firstCell = row.first else {
                continue
            }
            // Extract the text content from the transcript.
            let name = firstCell.content.text.transcript
            
            // Look for emails and phone numbers in the remaining cells.
            var detectedPhone: String? = nil
            var detectedEmail: String? = nil
            
            for cell in row.dropFirst() {
                // Get all detected data in the cell, then match emails and phone numbers.
                let allDetectedData = cell.content.text.detectedData
                for data in allDetectedData {
                    switch data.match.details {
                    case .emailAddress(let email):
                        detectedEmail = email.emailAddress
                    case .phoneNumber(let phoneNumber):
                        detectedPhone = phoneNumber.phoneNumber
                    default:
                        break
                    }
                }
            }
            // Create a contact if an email was detected.
            if let email = detectedEmail {
                let contact = Contact(name: name, email: email, phoneNumber: detectedPhone)
                foundItems.append(contact)
            }
        }
        contacts = foundItems
    }"
EJSLtg7B,Смяна дата на плащане,horozov86,SQL,Thursday 19th of June 2025 05:25:23 AM CDT,"select * from aopkopf where belegnummer='523736';
 
select * from aopkopf where idparent=83449636;

update aopkopf
set aopkopf.belegdatum = '19-JUN-25'
WHERE idparent=83449636"
bXGtbjwB,Ejercico vectores,AntonioVillanueva,C++,Thursday 19th of June 2025 04:58:58 AM CDT,"#include <cstdlib>
#include <iomanip>
 /*
Antonio Villanueva Segura
Array exercise 
You are given two arrays arr1 and arr2, where arr2 always contains integers.
Write a function such that:
For arr1 = ['a', 'a', 'a', 'a', 'a'], arr2 = [2, 4] the function returns ['a', 'a']
For arr1 = [0, 1, 5, 2, 1, 8, 9, 1, 5], arr2 = [1, 4, 7] the function returns [1, 1, 1]
For arr1 = [0, 3, 4], arr2 = [2, 6] the function returns [4]
For arr1=[""a"",""b"",""c"",""d""] , arr2=[2,2,2], the function returns [""c"",""c"",""c""]
For arr1=[""a"",""b"",""c"",""d""], arr2=[3,0,2] the function returns [""d"",""a"",""c""]
Note that when an element inside arr2 is greater than the index of the last element of arr1 no element of arr1 should be added to the resulting array. If either arr1 or arr2 is empty, you should return an empty arr (empty list in python, empty vector in c++). Note for c++ use std::vector arr1, arr2.

  */

#include <iostream>
#include <vector>
using namespace std;

template <typename T,typename U>
class Arrays {

public:

  // Constructeur
  Arrays(const std::vector<T>& a , const std::vector<U>& b) : chaine(a),index(b) {}
 
  void printVector(){
	  printVector(chaine);
	  printVector(index);	  
  }
  
 std::vector<T> cutVector(){
	  std::vector<T> tmp; 
	  for (const auto& i : index) {
		  try{
				chaine.at(i);
				tmp.push_back (chaine[i]);
			}catch (const std::out_of_range& e){
			}
	  }
	  return tmp;
  }
  
  template <typename V>
  void printVector (const std::vector<V>& v){ //Print vector  
	
    for (const auto& elem : v) {
      std::cout << elem << "","";
    }       
    std::cout <<"" - "";
  } 
  

private:
   std::vector<T> chaine;
   std::vector<U> index;   
};
  
 


int main(int argc, char *argv[])
{
  
  std::vector <char> arr1_a  {'a', 'a', 'a', 'a', 'a'};//arr2 = [2, 4] the function returns ['a', 'a']
  std::vector<int>  arr2_a  {2, 4} ;
  
  std::vector <int> arr1_b  {0, 1, 5, 2, 1, 8, 9, 1, 5};// arr2 = [1, 4, 7] the function returns [1, 1, 1]
  std::vector<int> arr2_b {1, 4, 7};
  
  std::vector <int> arr1_c {0, 3, 4};// arr2 = [2, 6] the function returns [4]
  std::vector<int> arr2_c {2, 6};
  
  std::vector <char> arr1_d {'a','b','c','d'} ;// arr2=[2,2,2], the function returns [""c"",""c"",""c""]
  std::vector<int> arr2_d {2,2,2};
  
  std::vector <char>  arr1_e {'a','b','c','d'};// arr2=[3,0,2] the function returns [""d"",""a"",""c""]
  std::vector<int>  arr2_e {3,0,2};
  
 
  Arrays <char,int> a (arr1_a,arr2_a);
  a.printVector (a.cutVector());
    
  Arrays <int,int> b (arr1_b,arr2_b);
  b.printVector (b.cutVector());  
  
  Arrays <int,int> c (arr1_c,arr2_c);
  c.printVector (c.cutVector());   
  
  Arrays <char,int> d (arr1_d,arr2_d);
  d.printVector (d.cutVector());   
  
  Arrays <char,int> e (arr1_e,arr2_e);
  e.printVector (e.cutVector());   
  

  
}
"
KHqQdZvn,Untitled,zn4v_,Lua,Thursday 19th of June 2025 04:20:16 AM CDT,"local OrionLib = loadstring(game:HttpGet(""https://raw.githubusercontent.com/jensonhirst/Orion/main/source""))()
local Players = game:GetService(""Players"")
local player = Players.LocalPlayer

-- مفتاح التفعيل الصحيح
local correctKey = ""XlCOw-5mcj3q3yo-2Teff0b34""

-- نافذة طلب مفتاح التفعيل
local KeyWindow = OrionLib:MakeWindow({
    Name = ""Fltr Hub - Activation"",
    HidePremium = true,
    SaveConfig = false,
    IntroEnabled = false,
    NoClose = true,
})

local keyValid = false

KeyWindow:MakeTab({
    Name = ""Activation"",
}):AddTextbox({
    Name = ""Enter Key"",
    PlaceholderText = ""ادخل مفتاح التفعيل هنا"",
    Callback = function(inputKey)
        if inputKey == correctKey then
            keyValid = true
            OrionLib:MakeNotification({
                Name = ""Success"",
                Content = ""تم التفعيل بنجاح! جاري فتح الواجهة..."",
                Image = ""rbxassetid://4483345998"",
                Time = 3
            })
            KeyWindow:Destroy() -- إغلاق نافذة التفعيل
        else
            OrionLib:MakeNotification({
                Name = ""Error"",
                Content = ""المفتاح غير صحيح، حاول مرة أخرى."",
                Image = ""rbxassetid://4483345998"",
                Time = 3
            })
        end
    end,
})

-- نوقف تنفيذ السكربت حتى يدخل المستخدم المفتاح الصحيح
repeat
    wait()
until keyValid

-- الآن يستمر السكربت الأصلي (واجهة الـ Hub)
-- Fltr Hub | Created by Majid (مجودي)
-- تم تجميع السكربتات كاملة بدون روابط

-- المكتبات والخدمات
local OrionLib = loadstring(game:HttpGet(""https://raw.githubusercontent.com/jensonhirst/Orion/main/source""))()
local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")
local Workspace = game:GetService(""Workspace"")
local player = Players.LocalPlayer
local Camera = Workspace.CurrentCamera

-- واجهة الهب
local Window = OrionLib:MakeWindow({
Name = ""Fltr Hub"",
HidePremium = false,
SaveConfig = true,
ConfigFolder = ""FltrHubConfig"",
IntroEnabled = true,
IntroText = ""Welcome to Fltr Hub 💀"",
Icon = ""rbxassetid://4483345998"",
IntroIcon = ""rbxassetid://4483345998""
})


---

-- 🎯 Aimbot Tab

local AimbotTab = Window:MakeTab({ Name = ""🎯 Aimbot"", Icon = """", PremiumOnly = false })

local aimbotEnabled = false
local aimButtonGui

AimbotTab:AddButton({
Name = ""🔫 تفعيل Aimbot"",
Callback = function()
aimbotEnabled = not aimbotEnabled

if aimButtonGui == nil then  
		aimButtonGui = Instance.new(""ScreenGui"", game.CoreGui)  
		local btn = Instance.new(""TextButton"", aimButtonGui)  
		btn.Size = UDim2.new(0, 150, 0, 40)  
		btn.Position = UDim2.new(0.5, -75, 0.9, 0)  
		btn.Text = ""Aimbot: OFF""  
		btn.BackgroundColor3 = Color3.fromRGB(30, 30, 30)  
		btn.TextColor3 = Color3.new(1, 1, 1)  
		btn.TextSize = 18  
		btn.MouseButton1Click:Connect(function()  
			aimbotEnabled = not aimbotEnabled  
			btn.Text = aimbotEnabled and ""Aimbot: ON"" or ""Aimbot: OFF""  
		end)  
	end  

	RunService.RenderStepped:Connect(function()  
		if aimbotEnabled then  
			local closest, dist = nil, math.huge  
			for _, p in pairs(Players:GetPlayers()) do  
				if p ~= player and p.Character and p.Character:FindFirstChild(""Head"") then  
					local mag = (p.Character.Head.Position - player.Character.Head.Position).Magnitude  
					if mag < dist then  
						closest = p  
						dist = mag  
					end  
				end  
			end  
			if closest then  
				Camera.CFrame = CFrame.new(Camera.CFrame.Position, closest.Character.Head.Position)  
			end  
		end  
	end)  
end

})

local circleVisible, circleRadius = false, 100
local circleObj

AimbotTab:AddToggle({
Name = ""⭕ إظهار دائرة التصويب"",
Default = false,
Callback = function(val)
circleVisible = val
if val then
circleObj = Drawing.new(""Circle"")
circleObj.Thickness = 2
circleObj.Radius = circleRadius
circleObj.Color = Color3.new(1, 0, 0)
circleObj.Filled = false
circleObj.Visible = true
RunService.RenderStepped:Connect(function()
if circleVisible and circleObj then
circleObj.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
end
end)
elseif circleObj then
circleObj:Remove()
circleObj = nil
end
end
})

AimbotTab:AddTextbox({
Name = ""🎯 حجم الدائرة"",
Default = ""100"",
Callback = function(val)
local num = tonumber(val)
if num and circleObj then
circleObj.Radius = num
end
end
})

AimbotTab:AddButton({
Name = ""🌈 تغيير لون الدائرة (RGB)"",
Callback = function()
spawn(function()
while circleVisible and circleObj do
for i = 0, 1, 0.01 do
circleObj.Color = Color3.fromHSV(i, 1, 1)
wait()
end
end
end)
end
})

AimbotTab:AddButton({
Name = ""🎯 تصغير مؤشر السلاح"",
Callback = function()
if player.PlayerGui:FindFirstChild(""Crosshair"") then
player.PlayerGui.Crosshair.Size = UDim2.new(0, 15, 0, 15)
end
end
})


---

-- 👁️ ESP Tab

local ESPTab = Window:MakeTab({ Name = ""👁️ ESP"", Icon = """", PremiumOnly = false })

ESPTab:AddButton({
Name = ""👤 إظهار معلومات اللاعب"",
Callback = function()
for _, p in pairs(Players:GetPlayers()) do
if p ~= player and p.Character and p.Character:FindFirstChild(""Head"") then
local bill = Instance.new(""BillboardGui"", p.Character.Head)
bill.Size = UDim2.new(0, 200, 0, 50)
bill.AlwaysOnTop = true
bill.Name = ""ESP_Info""
local label = Instance.new(""TextLabel"", bill)
label.Size = UDim2.new(1, 0, 1, 0)
label.Text = string.format(""%s | ID: %d"", p.Name, p.UserId)
label.BackgroundTransparency = 1
label.TextColor3 = Color3.new(1, 1, 1)
end
end
end
})


---

-- 🧍 Player Tab

local PlayerTab = Window:MakeTab({ Name = ""🧍 Player"", Icon = """", PremiumOnly = false })

PlayerTab:AddButton({
Name = ""🔁 إعادة تعيين اللاعب"",
Callback = function()
local hum = player.Character and player.Character:FindFirstChild(""Humanoid"")
if hum then hum.Health = 0 end
end
})

PlayerTab:AddButton({
Name = ""🚪 تفعيل Noclip"",
Callback = function()
RunService.Stepped:Connect(function()
for _, part in ipairs(player.Character:GetDescendants()) do
if part:IsA(""BasePart"") then
part.CanCollide = false
end
end
end)
end
})

PlayerTab:AddButton({
Name = ""❤️ منع الموت"",
Callback = function()
local hum = player.Character:WaitForChild(""Humanoid"")
hum:GetPropertyChangedSignal(""Health""):Connect(function()
if hum.Health < 100 then hum.Health = 100 end
end)
end
})

-- 🚗 Car Tab

local CarTab = Window:MakeTab({ Name = ""🚗 Car"", Icon = """", PremiumOnly = false })

CarTab:AddButton({
Name = ""⬆️ رفع السيارة"",
Callback = function()
local vehicle = Workspace:FindFirstChild(""Vehicles""):FindFirstChild(player.Name)
if not vehicle then return end
for _, part in ipairs(vehicle:GetDescendants()) do
if part:IsA(""SpringConstraint"") then
part.FreeLength += 1.5
end
end
end
})

CarTab:AddButton({
Name = ""⬇️ خفض السيارة"",
Callback = function()
local vehicle = Workspace:FindFirstChild(""Vehicles""):FindFirstChild(player.Name)
if not vehicle then return end
for _, part in ipairs(vehicle:GetDescendants()) do
if part:IsA(""SpringConstraint"") then
part.FreeLength -= 1.5
end
end
end
})

CarTab:AddButton({
Name = ""🔁 إعادة السيارة للوضع الطبيعي"",
Callback = function()
local vehicle = Workspace:FindFirstChild(""Vehicles""):FindFirstChild(player.Name)
if not vehicle then return end
for _, part in ipairs(vehicle:GetDescendants()) do
if part:IsA(""SpringConstraint"") then
part.FreeLength = 2.5
end
end
end
})

CarTab:AddButton({
Name = ""🚘 رسبنة السيارة أمامك"",
Callback = function()
local carModel = game.ReplicatedStorage:WaitForChild(""MyCar""):Clone()
carModel.Parent = Workspace
carModel:SetPrimaryPartCFrame(player.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, -10))
end
})

CarTab:AddButton({
Name = ""🪑 الجلوس تلقائي في السيارة"",
Callback = function()
local seat = Workspace:FindFirstChildWhichIsA(""VehicleSeat"", true)
if seat then
player.Character:MoveTo(seat.Position)
wait(1)
seat:Sit(player.Character:WaitForChild(""Humanoid""))
end
end
})


---

-- 🏦 Robbery Status Tab

local RobberyTab = Window:MakeTab({ Name = ""🏦 Robbery"", Icon = """", PremiumOnly = false })

RobberyTab:AddButton({
Name = ""💰 التحقق من حالة البنك والمجوهرات"",
Callback = function()
--[[
	WARNING: Heads up! This script has not been verified by ScriptBlox. Use at your own risk!
]]
local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")
local Workspace = game:GetService(""Workspace"")

local jewelryUIs = {}

local function createShadow(frame)
    local shadow = Instance.new(""ImageLabel"")
    shadow.Size = UDim2.new(1, 10, 1, 10)
    shadow.Position = UDim2.new(0, 5, 0, 5)
    shadow.BackgroundTransparency = 1
    shadow.Image = ""rbxassetid://6014261993"" 
    shadow.ImageColor3 = Color3.new(0, 0, 0)
    shadow.ImageTransparency = 0.5
    shadow.ZIndex = 0
    shadow.Parent = frame
end

local player = Players.LocalPlayer
local playerGui = player:WaitForChild(""PlayerGui"")

local existingGui = playerGui:FindFirstChild(""RobberyNotifier"")
if existingGui then
    existingGui:Destroy()
end

local screenGui = Instance.new(""ScreenGui"")
screenGui.Name = ""RobberyNotifier""
screenGui.Parent = playerGui

local frame = Instance.new(""Frame"")
frame.Size = UDim2.new(0, 400, 0, 60)
frame.Position = UDim2.new(0, 10, 0, 10)
frame.BackgroundColor3 = Color3.new(30/255, 30/255, 30/255)
frame.BorderSizePixel = 0
frame.Parent = screenGui

local uiCorner = Instance.new(""UICorner"")
uiCorner.CornerRadius = UDim.new(0, 8)
uiCorner.Parent = frame

local uiGradient = Instance.new(""UIGradient"")
uiGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.new(40/255, 40/255, 40/255)),
    ColorSequenceKeypoint.new(1, Color3.new(50/255, 50/255, 50/255))
}
uiGradient.Parent = frame

createShadow(frame) 

local bankLabel = Instance.new(""TextLabel"")
bankLabel.Size = UDim2.new(1, -20, 1, 0)
bankLabel.Position = UDim2.new(0, 10, 0, 0)
bankLabel.BackgroundTransparency = 1
bankLabel.TextColor3 = Color3.new(255/255, 255/255, 255/255)
bankLabel.Text = ""Bank Status: Checking...""
bankLabel.Font = Enum.Font.Gotham
bankLabel.TextSize = 18
bankLabel.Parent = frame

local bankRobbery = Workspace.Robberies:WaitForChild(""BankRobbery"")
local lightGreen = bankRobbery:WaitForChild(""LightGreen"")
local lightRed = bankRobbery:WaitForChild(""LightRed"")
local jewelerRobbery = Workspace.Robberies:WaitForChild(""JewelerRobbery"")
local robbables = jewelerRobbery:WaitForChild(""Robbables"")

local bankWasClosed = false

local function checkBankStatus()
    local greenBrickColor = lightGreen.BrickColor
    local redColor = lightRed.Color

    if greenBrickColor == BrickColor.new(""Camo"") then
        bankLabel.Text = ""Bank Status: Open""
        bankLabel.TextColor3 = Color3.new(0/255, 255/255, 0/255)
        if bankWasClosed then
            bankLabel.Text = ""Bank Status: Open (Just Opened!)""
            spawn(function()
                wait(3)
                if bankLabel.Text == ""Bank Status: Open (Just Opened!)"" then
                    bankLabel.Text = ""Bank Status: Open""
                end
            end)
        end
        bankWasClosed = false
    else
        bankLabel.Text = ""Bank Status: Closed""
        bankLabel.TextColor3 = Color3.new(255/255, 255/255, 0/255)
        bankWasClosed = true
    end
end

local function checkJewelryStatus()
    for model, uiFrame in pairs(jewelryUIs) do
        if model:GetAttribute(""Broken"") then
            uiFrame:Destroy()
            jewelryUIs[model] = nil
        end
    end

    task.spawn(function() 
        for _, model in pairs(robbables:GetChildren()) do
            if model:IsA(""Model"") then
                local enabled = model:GetAttribute(""Enabled"")
                local broken = model:GetAttribute(""Broken"")
    
                if enabled and not broken and not jewelryUIs[model] then
                    local uiFrame = Instance.new(""Frame"")
                    uiFrame.Size = UDim2.new(0, 400, 0, 50)
                    uiFrame.Position = UDim2.new(0, 10, 0, 80 + (#jewelryUIs * 60))
                    uiFrame.BackgroundColor3 = Color3.new(40/255, 40/255, 40/255)
                    uiFrame.BorderSizePixel = 0
                    uiFrame.Parent = screenGui
    
                    local uiCorner = Instance.new(""UICorner"")
                    uiCorner.CornerRadius = UDim.new(0, 8) -- Rounded corners
                    uiCorner.Parent = uiFrame
    
                    local uiGradient = Instance.new(""UIGradient"")
                    uiGradient.Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Color3.new(50/255, 50/255, 50/255)),
                        ColorSequenceKeypoint.new(1, Color3.new(60/255, 60/255, 60/255))
                    }
                    uiGradient.Parent = uiFrame
    
                    local uiLabel = Instance.new(""TextLabel"")
                    uiLabel.Size = UDim2.new(1, -20, 1, 0)
                    uiLabel.Position = UDim2.new(0, 10, 0, 0)
                    uiLabel.BackgroundTransparency = 1
                    uiLabel.TextColor3 = Color3.new(0/255, 200/255, 0/255)
                    uiLabel.Text = model.Name .. "" (Not Robbed)""
                    uiLabel.Font = Enum.Font.Gotham
                    uiLabel.TextSize = 16
                    uiLabel.Parent = uiFrame
    
                    createShadow(uiFrame)
    
                    jewelryUIs[model] = uiFrame
                end
            end
        end
    end)
end

RunService.Heartbeat:Connect(function()
    checkBankStatus()
    checkJewelryStatus()
end)

checkBankStatus()
checkJewelryStatus()
end
})


---

OrionLib:Init()

"
sEHqPeuh,psutil,ikizid,Python,Thursday 19th of June 2025 04:18:15 AM CDT,"# Battery checking | clcoding.com
import psutil

battery = psutil.sensors_battery()

# psutil.cputimes()

print(""Cpu percentages"")
for x in range(6):
    print( psutil.cpu_percent(interval=1) )

print(""Load averages"")
print ( psutil.getloadavg() )

print(""Virtual memory"")
print ( psutil.virtual_memory() )

print(""Swap memory"")
print ( psutil.swap_memory() )

print(""Temperatures"")
print ( psutil.sensors_temperatures() )

if battery is not None:
    def convertlime(seconds):
        minutes, seconds = divmod(seconds, 60)
        hour, minutes = divmod(minutes, 60)
        return ""%d:%02d;%02d"" % (hours, minutes, seconds)

    print(""Battery Percentage:"", battery.percent, ""%"")
    print(""Power plugged in:"", battery.power_plugged)
    print(""Battery remaining time:"", battery.secsleft, ""seconds"")
#    print(""Battery remaining time:"", convertTime(battery.secsleft))
else:
    print(""No battery information available."")

""""""
psutil.cpu_times()
for x in range(3):
    psutil.cpu_percent(interval=1)
for x in range(3):
    psutil.cpu_percent(interval=1, percpu=True)
for x in range(3):
    psutil.cpu_times_percent(interval=1, percpu=False)
psutil.cpu_count()
psutil.cpu_count(logical=False)
psutil.cpu_stats()
psutil.cpu_freq()
psutil.getloadavg()  # also on Windows (emulated)

psutil.virtual_memory()
psutil.swap_memory()

psutil.disk_partitions()
psutil.disk_usage('/')
psutil.disk_io_counters(perdisk=False)

psutil.net_io_counters(pernic=True)
psutil.net_connections(kind='tcp')
psutil.net_if_addrs()
psutil.net_if_stats()

psutil.sensors_temperatures()
psutil.sensors_fans()
psutil.sensors_battery()

psutil.users()
psutil.boot_time()

psutil.pids()
p = psutil.Process(7055)
p psutil.Process(pid=7055, name='python3', status='running', started='09:04:44')
p.pid 7055
p.name() 'python3'
p.exe() '/usr/bin/python3'
p.cwd() '/home/giampaolo'
p.cmdline() ['/usr/bin/python3', 'main.py']

p.ppid() 7054
p.parent() psutil.Process(pid=4699, name='bash', status='sleeping', started='09:06:44')
p.parents()
p.children(recursive=True)
p.status() 'running'
p.create_time() 1267551141.5019531
p.terminal() '/dev/pts/0'
p.username() 'giampaolo'
p.uids() puids(real=1000, effective=1000, saved=1000)
p.gids() pgids(real=1000, effective=1000, saved=1000)
p.cpu_times() pcputimes(user=1.02, system=0.31, children_user=0.32, children_system=0.1, iowait=0.0)
p.cpu_percent(interval=1.0) 12.1
p.cpu_affinity() [0, 1, 2, 3]
p.cpu_affinity([0, 1])  # set
p.cpu_num() 1
p.memory_info() pmem(rss=10915840, vms=67608576, shared=3313664, text=2310144, lib=0, data=7262208, dirty=0)
p.memory_full_info()  # ""real"" USS memory usage (Linux, macOS, Win only)
pfullmem(rss=10199040, vms=52133888, shared=3887104, text=2867200, lib=0, data=5967872, dirty=0, uss=6545408, pss=6872064, swap=0)
p.memory_percent() 0.7823
p.memory_maps()
p.io_counters() pio(read_count=478001, write_count=59371, read_bytes=700416, write_bytes=69632, read_chars=456232, write_chars=517543)
p.open_files()
p.net_connections(kind='tcp')
p.threads() [pthread(id=5234, user_time=22.5, system_time=9.2891),  pthread(id=5237, user_time=0.0707, system_time=1.1)]
p.num_threads() 4
p.num_fds() 8
p.num_ctx_switches() pctxsw(voluntary=78, involuntary=19)
p.nice() 0
p.nice(10)  # set
p.ionice(psutil.IOPRIO_CLASS_IDLE)  # IO priority (Win and Linux only)
p.ionice() pionice(ioclass=<IOPriority.IOPRIO_CLASS_IDLE: 3>, value=0)
p.rlimit(psutil.RLIMIT_NOFILE, (5, 5))  # set resource limits (Linux only)
p.rlimit(psutil.RLIMIT_NOFILE) (5, 5)
p.environ()
p.as_dict() {'status': 'running', 'num_ctx_switches': pctxsw(voluntary=63, involuntary=1), 'pid': 5457, ...}
p.is_running() True
p.suspend()
p.resume()
p.terminate()
p.kill()
p.wait(timeout=3) <Exitcode.EX_OK: 0>
psutil.test()
""""""
"
AbnTPrSn,Untitled,megalaren,Python,Thursday 19th of June 2025 04:11:09 AM CDT,"import asyncio
from datetime import UTC,datetime, timedelta

from taskiq import TaskiqScheduler
from taskiq_redis import ListQueueBroker, ListRedisScheduleSource, RedisScheduleSource

TASKIQ_REDIS_URL = 'redis://127.0.0.1:6379/2'

broker = ListQueueBroker(url=TASKIQ_REDIS_URL)
scheduler_source = ListRedisScheduleSource(TASKIQ_REDIS_URL)
# scheduler_source = RedisScheduleSource(TASKIQ_REDIS_URL)

scheduler = TaskiqScheduler(
    broker=broker,
    sources=[scheduler_source],
)


@broker.task
async def task_test_scheduler():
    print('---------- start task_test_scheduler ----------')
    await asyncio.sleep(1)
    print('---------- stop task_test_scheduler ----------')


async def main():
    schedule_id = 'task_test_scheduler'
    start_at = datetime.now(UTC) + timedelta(minutes=1, seconds=1)
    for _ in range(3):
        await (
            task_test_scheduler
            .kicker()
            .with_schedule_id(schedule_id)
            .schedule_by_time(scheduler_source, time=start_at)
        )


if __name__ == '__main__':
    # Start broker:     taskiq worker tkq_test:broker tkq_test --workers 1
    # Start scheduler:  taskiq scheduler tkq_test:scheduler
    asyncio.run(main())
"
Ncimcu0q,Untitled,hnyrenhjm5678,C#,Thursday 19th of June 2025 02:34:28 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp75
{
    internal class Program
    {
        static void Main(string[] args)
        {
            // Правим си примерна матрица
            int[,] matrica = {
                { 3, 8, 2, 5 },
                { 1, 4, 9, 7 },
                { 6, 3, 2, 0 }
            };

            // Разбираме колко реда и колко колони има
            int redove = matrica.GetLength(0);
            int koloni = matrica.GetLength(1);

            // Ще запишем всички числа като текст с запетайки между тях
            string tekst = """";

            // Обхождаме матрицата и добавяме числата към текста
            for (int i = 0; i < redove; i++)
            {
                for (int j = 0; j < koloni; j++)
                {
                    tekst += matrica[i, j] + "","";
                }
            }

            // Разделяме текста обратно на числа
            string[] vsichkiChisla = tekst.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

            // Създаваме нова матрица и пълним я с числата от текста
            int[,] novaMatrica = new int[redove, koloni];
            int index = 0;

            for (int i = 0; i < redove; i++)
            {
                for (int j = 0; j < koloni; j++)
                {
                    novaMatrica[i, j] = int.Parse(vsichkiChisla[index]);
                    index++;
                }
            }

            // Сега ще търсим най-голямото число по ръбовете
            int max = int.MinValue;

            for (int i = 0; i < redove; i++)
            {
                for (int j = 0; j < koloni; j++)
                {
                    if (i == 0 || i == redove - 1 || j == 0 || j == koloni - 1)
                    {
                        if (novaMatrica[i, j] > max)
                        {
                            max = novaMatrica[i, j];
                        }
                    }
                }
            }

            // Показваме матрицата и слагаме звездичка на най-голямото число по ръбовете
            Console.WriteLine(""Матрица със звезда на най-голямото ръбово число:"");

            for (int i = 0; i < redove; i++)
            {
                for (int j = 0; j < koloni; j++)
                {
                    if ((i == 0 || i == redove - 1 || j == 0 || j == koloni - 1) && novaMatrica[i, j] == max)
                    {
                        Console.Write(novaMatrica[i, j] + ""* "");
                    }
                    else
                    {
                        Console.Write(novaMatrica[i, j] + ""  "");
                    }
                }
                Console.WriteLine();
            }

            // Показваме резултата
            Console.WriteLine();
            Console.WriteLine(""Най-голямото ръбово число е: "" + max);

            Console.ReadKey();
        }
    }
}
"
AemGn28B,borra usuarios del aula movil + actualiza grub para arrancar windows,test01ies,Bash,Thursday 19th of June 2025 02:28:51 AM CDT,"#!/bin/bash

# Realiza el cambio en la línea 6
sudo sed -i '6s/0/2/g' /etc/default/grub

# Verificación: comprobar si la línea 6 contiene un 2 (después del cambio)
LINEA6=$(sed -n '6p' /etc/default/grub)
if [[ ""$LINEA6"" == *2* ]]; then
    echo ""✅ La línea 6 de /etc/default/grub contiene un 2: el cambio se ha realizado correctamente.""
else
    echo ""❌ ERROR: La línea 6 de /etc/default/grub no contiene un 2. El cambio puede haber fallado.""
    exit 1
fi

sudo update-grub2
exit

HOME_DIR=""/home""
# Solicitar nombre de usuario a conservar
read -p ""Introduce el nombre del usuario que quieres conservar: "" USUARIO_CONSERVAR
# Comprobar si la carpeta del usuario existe
if [ ! -d ""$HOME_DIR/$USUARIO_CONSERVAR"" ]; then
    echo ""ERROR: No existe la carpeta /home/$USUARIO_CONSERVAR""
    exit 1
fi
echo ""Se conservará: /home/$USUARIO_CONSERVAR""
echo ""Se eliminarán todas las demás carpetas de usuario en /home""
read -p ""¿Estás seguro? (s/N): "" CONFIRMAR
if [[ ""$CONFIRMAR"" != ""s"" && ""$CONFIRMAR"" != ""S"" ]]; then
    echo ""Operación cancelada.""
    exit 0
fi
# Borrar todas las carpetas excepto la del usuario conservado
for dir in ""$HOME_DIR""/*; do
    nombre_usuario=$(basename ""$dir"")
    if [ ""$nombre_usuario"" != ""$USUARIO_CONSERVAR"" ]; then
        if [ -d ""$dir"" ]; then
            echo ""Borrando: $dir""
            rm -rf ""$dir""
        fi
    else
        echo ""Conservando: $dir""
    fi
done
echo ""Limpieza completada.""
"
rauJnVQG,number,shadow12708,JSON,Thursday 19th of June 2025 02:26:06 AM CDT,"{
  ""version"": 3,
  ""hotlines"": [
    {
      ""Hotline"": ""PNP"",
      ""Globe"": ""09535027422"",
      ""Smart"": ""Test2""
    },
    {
      ""Hotline"": ""BFP"",
      ""Globe"": ""09655090944"",
      ""Smart"": """"
    },
    {
      ""Hotline"": ""LDRRMO"",
      ""Globe"": ""09670881507"",
      ""Smart"": ""09623484758""
    },
    {
      ""Hotline"": ""RHU"",
      ""Globe"": ""09350466299"",
      ""Smart"": ""09623656375""
    },
    {
      ""Hotline"": ""MENRO"",
      ""Globe"": ""09958696015"",
      ""Smart"": ""09128819561""
    },
    {
      ""Hotline"": ""DSWD"",
      ""Globe"": ""09538223799"",
      ""Smart"": ""09126459293""
    }
  ]
}
"
fUA8X59x,Weel Hab,zn4v_,Lua,Thursday 19th of June 2025 02:07:08 AM CDT,"local TweenService = game:GetService(""TweenService"")
local ContentProvider = game:GetService(""ContentProvider"")
local plr = game.Players.LocalPlayer
local rs = game:GetService(""ReplicatedStorage"")
local guiyyy = Instance.new(""ScreenGui"")

local letsgo = true
local loadscript = Instance.new(""BoolValue"")
loadscript.Name = ""LoadScriptOrNo""
loadscript.Parent = rs

for _, file in pairs(rs:GetChildren()) do
if file:IsA(""BoolValue"") then
if file.Value == true then
if file.Name == ""LoadScriptOrNo"" then
letsgo = false
loadscript:Destroy()
end
end
end
end

if loadscript.Value == false and letsgo == true then
loadscript.Value = true
guiyyy.Name = ""LoadScreen""
guiyyy.Parent = game.CoreGui

local loadscreen = Instance.new(""ImageLabel"", guiyyy)
Instance.new(""UICorner"", loadscreen)

local label = Instance.new(""TextLabel"", guiyyy)
label.Size = UDim2.new(0.233,0,0.075,0)
label.Position = UDim2.new(0.5,0,0.740,0)
label.BackgroundTransparency = 1
label.TextTransparency = 1
label.AnchorPoint = Vector2.new(0.5,0.5)
label.Text = ""Fake WallHop""
label.TextScaled = true
label.Font = Enum.Font.Gotham
label.TextColor3 = Color3.fromRGB(255, 255, 255)

loadscreen.UICorner.CornerRadius = UDim.new(0.125,0)
loadscreen.Size = UDim2.new(0.233,0,0.4,0)
loadscreen.Image = ""https://i.imgur.com/k91WMx7.png""
loadscreen.Position = UDim2.new(0.5,0,0.5,0)
loadscreen.AnchorPoint = Vector2.new(0.5,0.5)
loadscreen.BorderSizePixel = 0
loadscreen.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
loadscreen.ImageTransparency = 1
loadscreen.BackgroundTransparency = 1

task.wait(0.5)

TweenService:Create(loadscreen, TweenInfo.new(1.5), {ImageTransparency = 0, BackgroundTransparency = 0}):Play()
TweenService:Create(label, TweenInfo.new(1.5), {TextTransparency = 0}):Play()
task.wait(3)
TweenService:Create(loadscreen, TweenInfo.new(1.5), {ImageTransparency = 1, BackgroundTransparency = 1}):Play()
TweenService:Create(label, TweenInfo.new(1.5), {TextTransparency = 1}):Play()
task.wait(1.5)
guiyyy:Destroy()

local toggle = false
local menu = Instance.new(""Frame"")
local button = Instance.new(""TextButton"", menu)

menu.Size = UDim2.new(0.125,0,0.075,0)
menu.BackgroundTransparency = 0.85
menu.BackgroundColor3 = Color3.fromRGB(255, 255, 255)

button.Size = UDim2.new(0.820,0,0.65,0)
button.Position = UDim2.new(0.5,0,0.5,0)
button.BackgroundTransparency = 0.85
button.AnchorPoint = Vector2.new(0.5,0.5)
button.Text = ""Walking""
button.TextScaled = true
button.Font = Enum.Font.Gotham
button.TextColor3 = Color3.fromRGB(0, 0, 0)
button.BorderSizePixel = 0
button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)

Instance.new(""UICorner"", menu)
Instance.new(""UICorner"", button)

local UserInputService = game:GetService(""UserInputService"")

local gui = menu

local dragging
local dragInput
local dragStart
local startPos

local function update(input)
local delta = input.Position - dragStart
gui.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

gui.InputBegan:Connect(function(input)
if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
dragging = true
dragStart = input.Position
startPos = gui.Position

input.Changed:Connect(function()  
    if input.UserInputState == Enum.UserInputState.End then  
      dragging = false  
    end  
  end)  
end

end)

gui.InputChanged:Connect(function(input)
if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
dragInput = input
end
end)

UserInputService.InputChanged:Connect(function(input)
if input == dragInput and dragging then
update(input)
end
end)

button.MouseButton1Click:Connect(function()
if toggle == false then
toggle = true
button.Text = ""WallHop""
else
toggle = false
button.Text = ""Walking""
end
end)

local InfiniteJumpEnabled = true
game:GetService(""UserInputService"").JumpRequest:connect(function()
if toggle == true then
if InfiniteJumpEnabled == true then
game:GetService""Players"".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState(""Jumping"")
InfiniteJumpEnabled = false
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, -1, 0)
wait(0.2)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, 1, 0)
InfiniteJumpEnabled = true
end
end
end)

local guiyy = Instance.new(""ScreenGui"")
guiyy.Name = ""WallHopGui""
guiyy.Parent = game.CoreGui

menu.Parent = guiyy
end

"
AcJdt097,lists and ifelse,Hasli4,JavaScript,Thursday 19th of June 2025 01:29:15 AM CDT,"// === Решения задач по массивам ===

// 1. Добавить фрукт
let fruits = ['яблоко', 'банан'];
fruits.push('вишня');
// fruits → ['яблоко', 'банан', 'вишня']

// 2. Удалить число 30
let nums = [10, 20, 30, 40, 50];
nums.splice(2, 1);
// nums → [10, 20, 40, 50]

// 3. Заменить «зелёный» на «жёлтый»
let colors = ['красный', 'зелёный', 'синий'];
colors.splice(1, 1, 'жёлтый');
// colors → ['красный', 'жёлтый', 'синий']

// 4. Вставить «C» между «B» и «D»
let letters = ['A', 'B', 'D', 'E'];
letters.splice(2, 0, 'C');
// letters → ['A', 'B', 'C', 'D', 'E']

// 5. Найти и убрать «рыба»
let animals = ['кот', 'собака', 'рыба', 'птица'];
let idx = animals.indexOf('рыба');
if (idx !== -1) {
  animals.splice(idx, 1);
}
// animals → ['кот', 'собака', 'птица']

// 6. Сумма первого и последнего
let values = [5, 15, 25, 35];
let sum = values[0] + values[values.length - 1];
values.push(sum);
// values → [5, 15, 25, 35, 40]

// 7. Очистить всё
let data = [1, 2, 3, 4, 5];
data.splice(0, data.length);
// data → []

// 8. Удалить последний
let names = ['Аня', 'Борис', 'Вика', 'Гоша'];
names.splice(names.length - 1, 1);
// names → ['Аня', 'Борис', 'Вика']

// 9. Добавить в начало через splice
let queue = ['Игрок2', 'Игрок3'];
queue.splice(0, 0, 'Игрок1');
// queue → ['Игрок1', 'Игрок2', 'Игрок3']

// 10. Условно добавить 'd'
let list = ['a', 'b', 'c'];
if (list.indexOf('d') === -1) {
  list.push('d');
}
// list → ['a', 'b', 'c', 'd']  (или без изменения, если 'd' уже есть)



// === Решения задач на условные операторы ===

// 1. Пустой ли массив?
function isEmpty(arr) {
  if (arr.length === 0) {
    return ""Пустой массив"";
  } else {
    return ""Есть элементы"";
  }
}

// 2. Есть ли элемент
function contains(arr, val) {
  if (arr.indexOf(val) !== -1) {
    return ""Найдено"";
  } else {
    return ""Не найдено"";
  }
}

// 3. Сравнение длин
function compareLength(a, b) {
  if (a.length > b.length) {
    return ""Первый больше"";
  } else if (a.length < b.length) {
    return ""Второй больше"";
  } else {
    return ""Длины равны"";
  }
}

// 4. Безопасный доступ по индексу
function getAt(arr, idx) {
  if (idx >= 0 && idx < arr.length) {
    return arr[idx];
  } else {
    return ""Индекс вне диапазона"";
  }
}

// 5. Тернарная проверка пустоты
const isEmptyTernary = arr =>
  arr.length === 0 ? ""Пустой массив"" : ""Есть элементы"";
"
E7cLtS82,"PyPtt get_post(boardkey, aid=Aid) Error",yehchge,Python,Thursday 19th of June 2025 12:45:43 AM CDT,"    [50] => [06.19 13:42:13][PyPtt][INFO] 推文 ... 成功
    [51] => Traceback (most recent call last):
    [52] =>   File ""push_ptt_article.py"", line 114, in verify
    [53] =>     post_info = PTTBot.get_post(BoardKey, aid=Aid)
    [54] =>   File ""/usr/local/lib/python3.8/dist-packages/PyPtt/PTT.py"", line 349, in get_post
    [55] =>     return _api_get_post.get_post(
    [56] =>   File ""/usr/local/lib/python3.8/dist-packages/PyPtt/_api_get_post.py"", line 53, in get_post
    [57] =>     if index > 0 and aid is not None:
    [58] => TypeError: '>' not supported between instances of 'NoneType' and 'int'
    [59] => [06.19 13:42:13][PyPtt][INFO] 登出
    [60] => [06.19 13:42:13][PyPtt][INFO] 登出 ... 成功"
VwPyFdcb,logs_helix,Friks12829,Lua,Thursday 19th of June 2025 12:32:44 AM CDT,"--[[-------------------------------------------------------------------------
Остальное
---------------------------------------------------------------------------]]
local category = ""Наручники""
local name = ""DC_LOG_HANDCUFFS""
local format = ""Игрок %s воткнул кляп игроку %s""
local hookName = ""OnHandcuffGag""	
DC_CORE:AddHook(category,  hookName, name, function(ply, target)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					target.Nick and target:Nick() or ""???"",
					target.SteamID and target:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		target.Nick and target:Nick() or ""???""
	)
end)

local format = ""Игрок %s закрыл глаза игроку %s""
local hookName = ""OnHandcuffBlindfold""	
DC_CORE:AddHook(category,  hookName, name, function(ply, target)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					target.Nick and target:Nick() or ""???"",
					target.SteamID and target:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		target.Nick and target:Nick() or ""???""
	)
end)

local format = ""Игрок %s начал тащить игрока %s""
local hookName = ""OnHandcuffStartDragging""	
DC_CORE:AddHook(category,  hookName, name, function(ply, target)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					target.Nick and target:Nick() or ""???"",
					target.SteamID and target:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		target.Nick and target:Nick() or ""???""
	)
end)

local format = ""Игрок %s перестал тащить игрока %s""
local hookName = ""OnHandcuffStopDragging""	
DC_CORE:AddHook(category,  hookName, name, function(ply, target)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					target.Nick and target:Nick() or ""???"",
					target.SteamID and target:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		target.Nick and target:Nick() or ""???""
	)
end)

local format = ""Игрок %s снял наручники с игрока %s""
local hookName = ""OnHandcuffUnTied""	
DC_CORE:AddHook(category,  hookName, name, function(ply, target)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					target.Nick and target:Nick() or ""???"",
					target.SteamID and target:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		target.Nick and target:Nick() or ""???""
	)
end)

local format = ""Игрок %s надель наручники на игрока %s""
local hookName = ""OnHandcuffed""	
DC_CORE:AddHook(category,  hookName, name, function(ply, target)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					target.Nick and target:Nick() or ""???"",
					target.SteamID and target:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		target.Nick and target:Nick() or ""???""
	)
end)

local format = ""Игрок %s порвал наручники""
local hookName = ""OnHandcuffBreak""	
DC_CORE:AddHook(category,  hookName, name, function(ply, target)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???""
	)
end)

local category = ""Чат""
local name = ""DC_LOG_CHAT""
local format = ""%s написал %s""
local hookName = DarkRP and 'PostPlayerSay' or 'PlayerSay'	
DC_CORE:AddHook(category,  hookName, name, function(ply, text)
    if not text then return end

	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		string.Trim(text)
	)
end)

local category = ""Анонимный чат""
local name = ""DC_LOG_ANONCHAT""
local format = ""%s написал %s""
local hookName = 'DC_AnonChat'	
DC_CORE:AddHook(category,  hookName, name, function(cmd, text, ply)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		string.Trim(text)
	)
end)

local category = ""Урон""
local name = ""DC_LOG_DAMAGE""
local format = ""%s нанес %s урона игроку %s с помощью %s""
local hookName = 'EntityTakeDamage'	
DC_CORE:AddHook(category,  hookName, name, function(ent, dmginfo)
	local attacker = dmginfo:GetAttacker()
	if ent:IsPlayer() and IsValid(attacker) and attacker:IsPlayer() then
		if dmginfo:GetDamage() < 8 then return end
		local inflictor = dmginfo:GetInflictor()
		DC_CORE:AddLog(category, hookName, format,
			{
				[1] = 
					{ 	
						ent.Nick and ent:Nick() or ""???"",
						ent.SteamID and ent:SteamID() or ""???""
					},
				[2] = 
					{ 	
						attacker.Nick and attacker:Nick() or ""???"",
						attacker.SteamID and attacker:SteamID() or ""???""
					},
			}, 
			attacker.Nick and attacker:Nick() or ""???"",
			math.Round(dmginfo:GetDamage()),
			ent.Nick and ent:Nick() or ""???"",
			inflictor and inflictor:IsValid() and inflictor:GetClass() or ""???""
		)
	end	
end)

local category = ""Пропы""
local name = ""DC_LOG_PROPS""
local format = ""%s заспавнил %s""
local hookName = 'PlayerSpawnProp'	
DC_CORE:AddHook(category,  hookName, name, function(ply, mdl)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		mdl or ""??""
	)
end)

local category = ""Работы""
local name = ""DC_LOG_JOBS""
local format = ""%s поменял работу на %s с %s""
local hookName = 'OnPlayerChangedTeam'	
DC_CORE:AddHook(category,  hookName, name, function(ply, old, new)
	if IsValid(ply) then
		DC_CORE:AddLog(category, hookName, format,
			{
				[1] = 
					{ 	
						ply.Nick and ply:Nick() or ""???"",
						ply.SteamID and ply:SteamID() or ""???""
					},
			}, 
			ply.Nick and ply:Nick() or ""???"",
			team.GetName(new),
			team.GetName(old)
		)
	end
end)

local category = ""Инвентарь""
local name = ""DC_LOG_POCKET""
local format = ""%s поднял %s""
local hookName = 'onPocketItemAdded'	
DC_CORE:AddHook(category,  hookName, name, function(ply, ent)
	if IsValid(ply) then
		DC_CORE:AddLog(category, hookName, format,
			{
				[1] = 
					{ 	
						ply.Nick and ply:Nick() or ""???"",
						ply.SteamID and ply:SteamID() or ""???""
					},
			}, 
			ply.Nick and ply:Nick() or ""???"",
			ent:GetClass()
		)
	end
end)

local category = ""Персонажи""
local name = ""DC_LOG_CHARACTERS""
local format = ""Игрок %s создал персонажа %s""
local hookName = ""OnCharacterCreated""
DC_CORE:AddHook(category, hookName, name, function(client, character)
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:SteamName() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:SteamName() or ""???"",
        character:GetName() or ""???""
    )
end)

local format = ""Игрок %s загрузил персонажа %s""
local hookName = ""CharacterLoaded""
DC_CORE:AddHook(category, hookName, name, function(character)
    local client = character:GetPlayer()
    if IsValid(client) then
        DC_CORE:AddLog(category, hookName, format,
            {
                [1] = {
                    client:SteamName() or ""???"",
                    client:SteamID() or ""???""
                }
            },
            client:SteamName() or ""???"",
            character:GetName() or ""???""
        )
    end
end)

local format = ""Игрок %s удалил персонажа %s""
local hookName = ""PreCharacterDeleted""
DC_CORE:AddHook(category, hookName, name, function(client, character)
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:SteamName() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:SteamName() or ""???"",
        character:GetName() or ""???""
    )
end)

local category = ""Предметы""
local name = ""DC_LOG_ITEMS""
local format = ""Игрок %s использовал действие '%s' на предмете '%s' (#%s)""
local hookName = ""PlayerInteractItem""
DC_CORE:AddHook(category, hookName, name, function(client, action, item)
    if not IsValid(client) or not item then return end
    
    local itemID = isentity(item) and item.ixItemID or item
    local itemInstance = ix.item.instances[itemID]
    if not itemInstance then return end

    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        action or ""???"",
        itemInstance:GetName() or ""???"",
        itemInstance:GetID() or ""???""
    )
end)

local format = ""Игрок %s получил предмет '%s' (#%s)""
local hookName = ""InventoryItemAdded""
DC_CORE:AddHook(category, hookName, name, function(oldInv, inventory, item)
    if not inventory.owner or (oldInv and oldInv.owner == inventory.owner) then return end
    
    local character = ix.char.loaded[inventory.owner]
    if not character then return end
    
    local client = character:GetPlayer()
    if not IsValid(client) then return end

    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        item:GetName() or ""???"",
        item:GetID() or ""???""
    )
end)

local format = ""Игрок %s потерял предмет '%s' (#%s)""
local hookName = ""InventoryItemRemoved""
DC_CORE:AddHook(category, hookName, name, function(inventory, item)
    if not inventory.owner then return end
    
    local character = ix.char.loaded[inventory.owner]
    if not character then return end
    
    local client = character:GetPlayer()
    if not IsValid(client) then return end

    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        item:GetName() or ""???"",
        item:GetID() or ""???""
    )
end)

local category = ""Хранилище""
local name = ""DC_LOG_STORAGE""
local format = ""Игрок %s взял %s %s из '%s' (#%s) (осталось %s %s)""
local hookName = ""storageMoneyTake""
DC_CORE:AddHook(category, hookName, name, function(client, entity, amount, total)
    if not IsValid(client) or not IsValid(entity) then return end
    
    local name = entity.GetDisplayName and entity:GetDisplayName() or entity:GetName()
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        amount,
        ix.currency.plural,
        name,
        entity:GetInventory():GetID(),
        total,
        ix.currency.plural
    )
end)

local format = ""Игрок %s положил %s %s в '%s' (#%s) (теперь %s %s)""
local hookName = ""storageMoneyGive""
DC_CORE:AddHook(category, hookName, name, function(client, entity, amount, total)
    if not IsValid(client) or not IsValid(entity) then return end
    
    local name = entity.GetDisplayName and entity:GetDisplayName() or entity:GetName()
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        amount,
        ix.currency.plural,
        name,
        entity:GetInventory():GetID(),
        total,
        ix.currency.plural
    )
end)

local category = ""Плагины""
local name = ""DC_LOG_PLUGINS""
local format = ""Админ %s включил плагин %s для следующего перезапуска""
local hookName = ""pluginLoaded""
DC_CORE:AddHook(category, hookName, name, function(client, uniqueID)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        uniqueID or ""???""
    )
end)

local format = ""Админ %s выключил плагин %s для следующего перезапуска""
local hookName = ""pluginUnloaded""
DC_CORE:AddHook(category, hookName, name, function(client, uniqueID)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        uniqueID or ""???""
    )
end)

local category = ""Зоны""
local name = ""DC_LOG_AREAS""
local format = ""Админ %s создал зону %s""
local hookName = ""ixAreaAdd""
DC_CORE:AddHook(category, hookName, name, function(client, id)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        id or ""???""
    )
end)

local format = ""Админ %s удалил зону %s""
local hookName = ""ixAreaRemove""
DC_CORE:AddHook(category, hookName, name, function(client, id)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        id or ""???""
    )
end)

local category = ""Режим наблюдателя""
local name = ""DC_LOG_OBSERVER""
local format = ""Админ %s вошел в режим наблюдателя""
local hookName = ""observerEnter""
DC_CORE:AddHook(category, hookName, name, function(client)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???""
    )
end)

local format = ""Админ %s вышел из режима наблюдателя""
local hookName = ""observerExit""
DC_CORE:AddHook(category, hookName, name, function(client)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???""
    )
end)

local category = ""Сохранение пропов""
local name = ""DC_LOG_PERSISTENCE""
local format = ""Админ %s %s сохранение для '%s'""
local hookName = ""persist""
DC_CORE:AddHook(category, hookName, name, function(client, model, enabled)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        enabled and ""включил"" or ""выключил"",
        model or ""???""
    )
end)

local category = ""Спавн пропов""
local name = ""DC_LOG_PROPSPAWN""
local format = ""Игрок %s заспавнил проп '%s'""
local hookName = ""PlayerSpawnedProp""
DC_CORE:AddHook(category, hookName, name, function(client, model, entity)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        model or ""???""
    )
end)

local format = ""Игрок %s заспавнил эффект '%s'""
local hookName = ""PlayerSpawnedEffect""
DC_CORE:AddHook(category, hookName, name, function(client, model, entity)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        model or ""???""
    )
end)

local format = ""Игрок %s заспавнил регдолл '%s'""
local hookName = ""PlayerSpawnedRagdoll""
DC_CORE:AddHook(category, hookName, name, function(client, model, entity)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        model or ""???""
    )
end)

local format = ""Игрок %s заспавнил NPC '%s'""
local hookName = ""PlayerSpawnedNPC""
DC_CORE:AddHook(category, hookName, name, function(client, entity)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        entity:GetClass() or ""???""
    )
end)

local format = ""Игрок %s заспавнил оружие '%s'""
local hookName = ""PlayerSpawnedSWEP""
DC_CORE:AddHook(category, hookName, name, function(client, entity)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        entity:GetClass() or ""???""
    )
end)

local format = ""Игрок %s заспавнил энтити '%s'""
local hookName = ""PlayerSpawnedSENT""
DC_CORE:AddHook(category, hookName, name, function(client, entity)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        entity:GetClass() or ""???""
    )
end)

local format = ""Игрок %s заспавнил транспорт '%s'""
local hookName = ""PlayerSpawnedVehicle""
DC_CORE:AddHook(category, hookName, name, function(client, entity)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        entity:GetClass() or ""???""
    )
end)

local category = ""Панели""
local name = ""DC_LOG_PANEL""
local format = ""Админ %s добавил панель с URL '%s'""
local hookName = ""OnPanelAdd""
DC_CORE:AddHook(category, hookName, name, function(client, url, scale, brightness)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        url or ""???""
    )
end)

local format = ""Админ %s удалил панель(и) в радиусе %s""
local hookName = ""OnPanelRemove""
DC_CORE:AddHook(category, hookName, name, function(client, radius)
    if not IsValid(client) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                client:Name() or ""???"",
                client:SteamID() or ""???""
            }
        },
        client:Name() or ""???"",
        radius or ""???""
    )
end)

local category = ""SAM Команды""
local name = ""DC_LOG_SAM_CMDS""
local format = ""Админ %s %s команду %s""
local hookName = ""SAM.CommandAdded""
DC_CORE:AddHook(category, hookName, name, function(ply, cmd_name, cmd)
    if not IsValid(ply) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                ply:Name() or ""???"",
                ply:SteamID() or ""???""
            }
        },
        ply:Name() or ""???"",
        ""добавил"",
        cmd_name or ""???""
    )
end)

local format = ""Админ %s %s команду %s""
local hookName = ""SAM.CommandModified""
DC_CORE:AddHook(category, hookName, name, function(ply, cmd_name, cmd)
    if not IsValid(ply) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                ply:Name() or ""???"",
                ply:SteamID() or ""???""
            }
        },
        ply:Name() or ""???"",
        ""изменил"",
        cmd_name or ""???""
    )
end)

local format = ""Админ %s %s команду %s""
local hookName = ""SAM.CommandRemoved""
DC_CORE:AddHook(category, hookName, name, function(ply, cmd_name, cmd)
    if not IsValid(ply) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                ply:Name() or ""???"",
                ply:SteamID() or ""???""
            }
        },
        ply:Name() or ""???"",
        ""удалил"",
        cmd_name or ""???""
    )
end)

local category = ""SAM Ранги""
local name = ""DC_LOG_SAM_RANKS""
local format = ""Админ %s изменил ранг игрока %s с %s на %s""
local hookName = ""SAM.ChangedPlayerRank""
DC_CORE:AddHook(category, hookName, name, function(ply, target, rank, old_rank)
    if not IsValid(ply) or not IsValid(target) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                ply:Name() or ""???"",
                ply:SteamID() or ""???""
            },
            [2] = {
                target:Name() or ""???"",
                target:SteamID() or ""???""
            }
        },
        ply:Name() or ""???"",
        target:Name() or ""???"",
        old_rank or ""???"",
        rank or ""???""
    )
end)

local format = ""Админ %s %s разрешение %s для ранга %s""
local hookName = ""SAM.RankPermissionGiven""
DC_CORE:AddHook(category, hookName, name, function(ply, permission, rank)
    if not IsValid(ply) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                ply:Name() or ""???"",
                ply:SteamID() or ""???""
            }
        },
        ply:Name() or ""???"",
        ""выдал"",
        permission or ""???"",
        rank or ""???""
    )
end)

local format = ""Админ %s %s разрешение %s у ранга %s""
local hookName = ""SAM.RankPermissionTaken""
DC_CORE:AddHook(category, hookName, name, function(ply, permission, rank)
    if not IsValid(ply) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                ply:Name() or ""???"",
                ply:SteamID() or ""???""
            }
        },
        ply:Name() or ""???"",
        ""отозвал"",
        permission or ""???"",
        rank or ""???""
    )
end)

local format = ""Админ %s изменил наследование ранга %s на %s""
local hookName = ""SAM.ChangedInheritRank""
DC_CORE:AddHook(category, hookName, name, function(ply, rank, inherit)
    if not IsValid(ply) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                ply:Name() or ""???"",
                ply:SteamID() or ""???""
            }
        },
        ply:Name() or ""???"",
        rank or ""???"",
        inherit or ""???""
    )
end)

local category = ""Защита пропов""
local name = ""DC_LOG_GPROTECT""
local format = ""Игрок %s добавил %s в историю отмены""
local hookName = ""gP:UndoAdded""
DC_CORE:AddHook(category, hookName, name, function(ply, ent)
    if not IsValid(ply) or not IsValid(ent) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                ply:Name() or ""???"",
                ply:SteamID() or ""???""
            }
        },
        ply:Name() or ""???"",
        ent:GetClass() or ""???""
    )
end)

local format = ""Игрок %s добавил %s в очистку (тип: %s)""
local hookName = ""gP:CleanupAdded""
DC_CORE:AddHook(category, hookName, name, function(ply, ent, Type)
    if not IsValid(ply) or not IsValid(ent) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                ply:Name() or ""???"",
                ply:SteamID() or ""???""
            }
        },
        ply:Name() or ""???"",
        ent:GetClass() or ""???"",
        Type or ""???""
    )
end)

local format = ""Игрок %s зарегистрировал клавишную привязку %s""
local hookName = ""gP:NumpadRegistered""
DC_CORE:AddHook(category, hookName, name, function(ply, name)
    if not IsValid(ply) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                ply:Name() or ""???"",
                ply:SteamID() or ""???""
            }
        },
        ply:Name() or ""???"",
        name or ""???""
    )
end)

local category = ""Оружие""
local name = ""DC_LOG_WEAPONS""
local format = ""Игрок %s снял все оружие с игрока %s""
local hookName = ""PlayerStripWeapons""
DC_CORE:AddHook(category, hookName, name, function(ply)
    if not IsValid(ply) then return end
    
    DC_CORE:AddLog(category, hookName, format,
        {
            [1] = {
                ply:Name() or ""???"",
                ply:SteamID() or ""???""
            }
        },
        ply:Name() or ""???"",
        ply:Name() or ""???""
    )
end)"
weMbQtUj,flutter_paging_viewmodel_example_2,chayanforyou,Dart,Thursday 19th of June 2025 12:12:49 AM CDT,"class DoctorListViewModel extends StateNotifier<DoctorPagingState> {
  final DefaultQueryParams _param;

  DoctorListViewModel(this._param)
      : super(
          DoctorPagingState(
            pagingState: PagingState(),
          ),
        );

  String? _searchTerm;
  bool _isDisposed = false;

  @override
  void dispose() {
    _isDisposed = true;
    super.dispose();
  }

  /// Fetches the next page of data
  Future<void> fetchNextPage() async {
    final paging = state.pagingState;
    if (paging.isLoading) return;

    final newPaging = paging.copyWith(isLoading: true, error: null);
    state = state.copyWith(pagingState: newPaging);

    try {
      final newKey = paging.keys?.last == null ? 0 : paging.keys!.last + 1;
      final doctorResponse = await DoctorRepository.instance.getDoctors(
        employeeId: _param.employeeId,
        year: _param.year,
        month: _param.month,
        levelCode: _param.levelCode,
        page: newKey,
        term: _searchTerm,
        selectedOnly: _param.selectedOnly,
      );

      final doctorData = doctorResponse.data;

      final updatedPaging = paging.copyWith(
        pages: [...?paging.pages, doctorData.doctors?.content ?? []],
        keys: [...?paging.keys, newKey],
        hasNextPage: doctorData.doctors?.hasNext,
        isLoading: false,
      );

      state = state.copyWith(
        pagingState: updatedPaging,
        totalDoctors: doctorData.doctors?.totalElements ?? 0,
        selectedDoctors: doctorData.selectedDoctor ?? 0,
        approved: doctorData.approved ?? true,
        editable: doctorData.editable ?? false,
      );

      // trigger the status message listener
      doctorPlanApprovedNotifier.value = state.approved;
    } catch (error) {
      if (_isDisposed) return;
      final failedPaging = paging.copyWith(
        error: error,
        isLoading: false,
      );
      state = state.copyWith(pagingState: failedPaging);
    }
  }

  /// Updates search term and refreshes the list
  void updateSearchTerm(String searchTerm) {
    _searchTerm = searchTerm;
    refreshList();
  }

  /// Refreshes the list and fetches the first page
  void refreshList() {
    state = state.copyWith(
      pagingState: PagingState(),
      totalDoctors: 0,
      selectedDoctors: 0,
      approved: false,
    );
    fetchNextPage();
  }

  /// Method to toggle the selection of a Doctor
  void toggleSelection(DoctorData content) {
    final oldPaging = state.pagingState;
    int updatedSelectedCount = state.selectedDoctors;

    final updatedPages = oldPaging.pages?.map((page) {
      return page.map((c) {
        if (c.doctor?.id == content.doctor?.id) {
          final wasSelected = c.selected;
          final nowSelected = !wasSelected;

          if (nowSelected) {
            updatedSelectedCount++;
          } else {
            updatedSelectedCount--;
          }

          return c.copyWith(selected: nowSelected);
        }
        return c;
      }).toList();
    }).toList();

    state = state.copyWith(
      pagingState: oldPaging.copyWith(pages: updatedPages),
      selectedDoctors: updatedSelectedCount,
    );
  }
}

/// **Provider for ViewModel**
final doctorListViewModelProvider =
    StateNotifierProvider.family.autoDispose<DoctorListViewModel, DoctorPagingState, DefaultQueryParams>((ref, param) {
  return DoctorListViewModel(param);
});


// --------------------------------------------------


final doctorListState = ref.watch(doctorListViewModelProvider(_params));
final doctorListViewModel = ref.read(doctorListViewModelProvider(_params).notifier);

PagedListView<int, DoctorData>.separated(
  state: doctorListState.pagingState,
  fetchNextPage: doctorListViewModel.fetchNextPage,
  builderDelegate: PagedChildBuilderDelegate(
    itemBuilder: (context, item, index) {
      return DoctorListItem(
        doctorData: item,
        clickable: doctorListState.editable,
        onClick: () => _toggleSelection(item, doctorListViewModel),
      );
    },
  ),
  separatorBuilder: (BuildContext context, int index) {
    return const Divider(color: AppColors.dividerColor, height: 1);
  },
),"
keMvP9h2,flutter_paging_viewmodel_example_1,chayanforyou,Dart,Thursday 19th of June 2025 12:09:09 AM CDT,"class LocationViewModel extends StateNotifier<AsyncValue<List<Places>>> {
  final List<Places> initialLocations;
  final String employeeId;
  final int year;
  final int month;
  final String shift;

  LocationViewModel({
    required this.initialLocations,
    required this.employeeId,
    required this.year,
    required this.month,
    required this.shift,
  }) : super(const AsyncValue.loading()) {
    _fetchLocations();
  }

  String _searchTerm = '';
  List<Places> _locations = [];

  // Getter for the selected locations
  List<Places> get selectedLocations => initialLocations;

  // Method to fetch locations
  Future<void> _fetchLocations() async {
    try {
      state = const AsyncValue.loading();
      final response = await TourPlanRepository.instance.getTourPlanLocation(employeeId, year, month, shift);
      final locations = response.data ?? [];
      _locations = locations
          .map((location) => location.copyWith(
        selected: initialLocations.any((loc) => loc.uniqueKey == location.uniqueKey),
      )).toList();

      state = AsyncValue.data(_locations);
    } catch (e, stackTrace) {
      state = AsyncValue.error(e, stackTrace);
    }
  }

  // Method to update the search term
  void updateSearchTerm(String term) {
    _searchTerm = term.trim();
    state = AsyncValue.data(_filterLocations());
  }

  // Method to toggle the selection of a location
  void toggleSelection(Places location) {
    final index = _locations.indexWhere((l) => l.uniqueKey == location.uniqueKey);
    if (index != -1) {
      final isSelected = _locations[index].selected;
      // Update the main list
      _locations[index] = _locations[index].copyWith(selected: !isSelected);

      // Update the selected list
      if (isSelected) {
        initialLocations.removeWhere((l) => l.uniqueKey == location.uniqueKey);
      } else {
        initialLocations.add(_locations[index]);
      }

      // Update state without resetting the filtered list
      state = AsyncValue.data(_filterLocations());
    }
  }


  // Method to filter locations based on search term
  List<Places> _filterLocations() {
    return _locations.where((location) {
      return location.locationName?.toLowerCase().contains(_searchTerm.toLowerCase()) ?? false;
    }).toList();
  }
}

final locationViewModelProvider =
    StateNotifierProvider.family.autoDispose<LocationViewModel, AsyncValue<List<Places>>, LocationQueryParams>(
  (ref, params) => LocationViewModel(
    initialLocations: params.initialLocations,
    employeeId: params.employeeId,
    year: params.year,
    month: params.month,
    shift: params.shift,
  ),
);

// --------------------------------------------------

class LocationViewModel extends StateNotifier<PagingState<int, Places>> {
  final List<Places> initialLocations;
  final int year;
  final int month;
  final Debouncer _debounce = Debouncer();
  String? _searchTerm;

  LocationViewModel({
    required this.initialLocations,
    required this.year,
    required this.month,
  }) : super(PagingState());

  List<Places> get selectedLocations => initialLocations;

  /// Fetches the next page of data
  Future<void> fetchNextPage() async {
    if (state.isLoading) return;

    state = state.copyWith(isLoading: true, error: null);

    try {
      final newKey = state.keys?.isNotEmpty == true ? state.keys!.last + 1 : 0;
      final response = await TourPlanRepository.instance.getTourPlanLocation(year, month, newKey, _searchTerm);
      final locations = response.data.content ?? [];

      final newItems = locations.map((location) {
        return location.copyWith(
          selected: initialLocations.any((loc) => loc.id == location.id),
        );
      }).toList();

      state = state.copyWith(
        pages: [...?state.pages, newItems],
        keys: [...?state.keys, newKey],
        hasNextPage: response.data.hasNext,
        isLoading: false,
      );
    } catch (error) {
      state = state.copyWith(
        error: error,
        isLoading: false,
      );
    }
  }

  /// Updates search term and refreshes the list
  void updateSearchTerm(String searchTerm) {
    _searchTerm = searchTerm;
    _debounce.run(() {
      refreshList();
    });
  }

  /// Clear search and refreshes the list
  void clearSearchTerm() {
    _searchTerm = null;
    _debounce.run(() {
      refreshList();
    });
  }

  /// Refreshes the list and fetches the first page
  void refreshList() {
    state = PagingState();
    fetchNextPage();
  }

  void toggleSelection(Places location) {
    final updatedPages = state.pages?.map((page) {
      return page.map((loc) {
        if (loc.id == location.id) {
          return loc.copyWith(selected: !(loc.selected));
        }
        return loc;
      }).toList();
    }).toList();

    state = state.copyWith(pages: updatedPages);

    if (location.selected == true) {
      initialLocations.remove(location);
    } else {
      initialLocations.add(location);
    }
  }
}

final locationViewModelProvider =
    StateNotifierProvider.family.autoDispose<LocationViewModel, PagingState<int, Places>, LocationQueryParams>(
  (ref, params) => LocationViewModel(
    initialLocations: params.initialLocations,
    year: params.year,
    month: params.month,
  ),
);

// --------------------------------------------------

class LocationViewModel extends StateNotifier<AsyncValue<List<Places>>> {
  final List<Places> initialLocations;
  final String employeeId;
  final int year;
  final int month;
  final Debouncer _debounce = Debouncer();
  String _searchTerm = '';

  LocationViewModel({
    required this.initialLocations,
    required this.employeeId,
    required this.year,
    required this.month,
  }) : super(const AsyncValue.loading()) {
    _fetchLocations();
  }

  String get searchTerm => _searchTerm;

  // Method to fetch locations from the API based on the search term
  Future<void> _fetchLocations() async {
    try {
      state = const AsyncValue.loading();
      final response = await TourPlanRepository.instance.getTourPlanLocation(employeeId, year, month);
      final locations = response.data ?? [];

      // Update the state with the new list of places
      state = AsyncValue.data(
        locations.map((location) {
          return location.copyWith(
            selected: initialLocations.any((loc) => loc.id == location.id),
          );
        }).toList(),
      );
    } catch (e, stackTrace) {
      state = AsyncValue.error(e, stackTrace);
    }
  }

  // Method to update the search term with debounce
  void updateSearchTerm(String term) {
    _searchTerm = term.trim();

    _debounce.run(() {
      _fetchLocations();
    });
  }

  // Method to toggle the selection of a location
  void toggleSelection(Places location) {
    final locations = state.value ?? [];

    final index = locations.indexWhere((l) => l.id == location.id);
    if (index == -1) return;

    final isSelected = locations[index].selected;
    final updatedLocation = locations[index].copyWith(selected: !isSelected);

    locations[index] = updatedLocation;

    state = AsyncValue.data(locations);

    if (isSelected) {
      initialLocations.removeWhere((l) => l.id == location.id);
    } else {
      initialLocations.add(updatedLocation);
    }
  }

  // Getter for the selected locations
  List<Places> get selectedLocations => initialLocations;
}

final locationViewModelProvider =
    StateNotifierProvider.family.autoDispose<LocationViewModel, AsyncValue<List<Places>>, LocationQueryParams>(
  (ref, params) => LocationViewModel(
    initialLocations: params.initialLocations,
    employeeId: params.employeeId,
    year: params.year,
    month: params.month,
  ),
);
"
heYMc55u,Multi Server Bot,R2dTOO,Python,Wednesday 18th of June 2025 09:51:22 PM CDT,"import discord
from discord.ext import commands
from discord import ui, SelectOption
from discord import app_commands
from datetime import datetime, timedelta
from pytz import timezone, utc
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from collections import defaultdict
import os, io, json, logging, asyncio

# ————— Logging Setup —————
logging.basicConfig(filename=""fitness_bot.log"", level=logging.INFO,
                    format=""%(asctime)s [%(levelname)s] %(message)s"")
log = logging.getLogger()
log.info(""=== Bot startup ==="")

# ————— Config Utilities —————
CONFIG_FILE = ""server_configs.json""
COMMON_TIMEZONES = [
    ""UTC"", ""US/Eastern"", ""US/Central"", ""US/Mountain"", ""US/Pacific"",
    ""Europe/London"", ""Europe/Berlin"", ""Asia/Tokyo"", ""Australia/Sydney""
]

def load_configs():
    try:
        data = json.load(open(CONFIG_FILE))
        return data if isinstance(data, dict) else {}
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_configs(cfg):
    with open(CONFIG_FILE, ""w"") as f:
        json.dump(cfg, f, indent=2)

server_configs = load_configs()
daily_log_cache = defaultdict(set)

# ————— Google Sheets Setup —————
CREDENTIALS_FILE = '/home/r23dprinting/fitness-challenge-462612-78786b6edf2e.json'
scope = ['https://spreadsheets.google.com/feeds','https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)

# ————— Helpers —————
def is_admin(ctx, cfg):
    return ctx.user.guild_permissions.administrator or any(
        r.name == cfg.get(""admin_role"") for r in ctx.user.roles
    )

# ————— Config Flow Modals —————
CONFIG_KEYS = [
    (""sheet_name"", ""Google Sheet name""),
    (""thread_name"", ""Exact thread name""),
    (""channel_name"", ""Parent channel name""),
    (""admin_role"", ""Admin role name""),
    (""hashtag"", ""Hashtag (#include, or leave blank)""),
    (""timezone"", ""Timezone""),
    (""start_date"", ""Challenge start date (YYYY-MM-DD)""),
    (""end_date"", ""Challenge end date (YYYY-MM-DD)""),
    (""goal_days"", ""Goal days (number)""),
    (""auto_summaries"", ""Send auto-summaries? (yes/no)"")
]

class ConfigFlow:
    def __init__(self, guild_id, existing=None):
        self.guild_id = guild_id
        self.data = existing.copy() if existing else {}
        self.step = 0

class InputModal(ui.Modal):
    def __init__(self, flow: ConfigFlow, key, label):
        super().__init__(title=f""Set {label}"")
        self.flow = flow
        self.key = key
        default_val = self.flow.data.get(self.key, """")
        self.add_item(ui.TextInput(label=label, style=discord.TextStyle.short, default=default_val))

    async def on_submit(self, interaction):
        val = self.children[0].value.strip()
        if self.key == ""goal_days"" and not val.isdigit():
            return await interaction.response.send_message(""❌ Must be a number."", ephemeral=True)
        if self.key == ""auto_summaries"":
            lv = val.lower()
            if lv not in (""yes"", ""no""):
                return await interaction.response.send_message(""❌ Enter yes or no."", ephemeral=True)
            val = (lv == ""yes"")
        self.flow.data[self.key] = val
        self.flow.step += 1
        if self.flow.step < len(CONFIG_KEYS):
            nk, nl = CONFIG_KEYS[self.flow.step]
            if nk == ""timezone"":
                await interaction.response.send_modal(TimezoneModal(self.flow))
            else:
                await interaction.response.send_modal(InputModal(self.flow, nk, nl))
        else:
            server_configs[str(self.flow.guild_id)] = self.flow.data
            save_configs(server_configs)
            await interaction.response.send_message(""✅ Configuration saved & reloaded!"", ephemeral=True)

class TimezoneModal(ui.Modal):
    def __init__(self, flow: ConfigFlow):
        super().__init__(title=""Enter Timezone (e.g. US/Eastern)"")
        self.flow = flow
        self.add_item(ui.TextInput(label=""Timezone"", placeholder=""e.g. US/Eastern""))

    async def on_submit(self, interaction: discord.Interaction):
        val = self.children[0].value.strip()
        if val not in COMMON_TIMEZONES:
            return await interaction.response.send_message(
                ""❌ Invalid timezone. Must be one of:\n"" +
                "", "".join(COMMON_TIMEZONES), ephemeral=True
            )
        self.flow.data[""timezone""] = val
        self.flow.step += 1
        nk, nl = CONFIG_KEYS[self.flow.step]
        await interaction.response.send_modal(InputModal(self.flow, nk, nl))

# ————— Bot Init —————
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True
bot = commands.Bot(command_prefix=""!"", intents=intents)

@bot.event
async def on_ready():
    log.info(""Bot is online and ready"")
    try:
        synced = await bot.tree.sync()
        log.info(f""Synced {len(synced)} application commands"")
    except Exception as e:
        log.error(f""Slash sync failed: {e}"")
    asyncio.create_task(summary_scheduler())

@bot.event
async def on_message(message: discord.Message):
    if message.author.bot or not message.guild:
        return
    cfg = server_configs.get(str(message.guild.id))
    if not cfg:
        return
    thread = message.channel if isinstance(message.channel, discord.Thread) else None
    if not thread or thread.name != cfg[""thread_name""] or thread.parent.name != cfg[""channel_name""]:
        return
    if not (message.attachments or cfg.get(""hashtag"", """").lower() in message.content.lower()):
        return

    tz = timezone(cfg[""timezone""])
    now = utc.localize(datetime.utcnow()).astimezone(tz)
    try:
        sd = datetime.fromisoformat(cfg[""start_date""]).date()
        ed = datetime.fromisoformat(cfg[""end_date""]).date()
    except:
        log.error(f""Invalid dates for guild {message.guild.id}"")
        return

    if not (sd <= now.date() <= ed):
        try:
            await message.author.send(
                f""💪 Good job staying active!\nYour activity in **{message.guild.name}** wasn’t logged — ""
                f""challenge runs **{sd.strftime('%b %d')} to {ed.strftime('%b %d')} ({tz.zone})**.""
            )
            log.info(f""Sent DM to {message.author}"")
        except discord.Forbidden:
            log.warning(f""Cannot DM {message.author}"")
        return

    dstr = now.date().isoformat()
    uid = str(message.author.id)
    if uid not in daily_log_cache[dstr]:
        try:
            client.open(cfg[""sheet_name""]).sheet1.append_row([uid, str(message.author), now.isoformat()])
            daily_log_cache[dstr].add(uid)
            log.info(f""Logged {message.author}"")
        except Exception as e:
            log.error(f""Sheet append failed: {e}"")

    await bot.process_commands(message)


# ————— Slash (Tree) Commands —————
@bot.tree.command(name=""progress"", description=""Your monthly activity count"")
async def progress(interaction: discord.Interaction):
    cfg = server_configs[str(interaction.guild.id)]
    sheet = client.open(cfg[""sheet_name""]).sheet1
    days = {r['Timestamp'].split(""T"")[0] for r in sheet.get_all_records() if r['UserID'] == str(interaction.user.id)}
    await interaction.response.send_message(f""You’ve logged {len(days)} day(s) this challenge! 💪"", ephemeral=True)

@bot.tree.command(name=""streak"", description=""Your current activity streak"")
async def streak(interaction: discord.Interaction):
    cfg = server_configs[str(interaction.guild.id)]
    sheet = client.open(cfg[""sheet_name""]).sheet1
    recs = sorted(sheet.get_all_records(), key=lambda r: r['Timestamp'])
    days = sorted({r['Timestamp'].split(""T"")[0] for r in recs if r['UserID'] == str(interaction.user.id)}, reverse=True)
    streak_count = 0
    today = datetime.utcnow().date()
    for d in days:
        if datetime.fromisoformat(d).date() == today - timedelta(days=streak_count):
            streak_count += 1
        else:
            break
    await interaction.response.send_message(f""🔥 Your current streak: {streak_count} day(s)"", ephemeral=True)

@bot.tree.command(name=""check"", description=""ADMIN: Check another member’s log days"")
async def check(interaction: discord.Interaction, member: discord.Member):
    cfg = server_configs[str(interaction.guild.id)]
    if not is_admin(interaction, cfg):
        return await interaction.response.send_message(""❌ No permission"", ephemeral=True)
    sheet = client.open(cfg[""sheet_name""]).sheet1
    days = {r['Timestamp'].split(""T"")[0] for r in sheet.get_all_records() if r['UserID'] == str(member.id)}
    await interaction.response.send_message(f""{member.display_name} has logged {len(days)} day(s)."", ephemeral=True)

@bot.tree.command(name=""leaderboard"", description=""ADMIN: View top participants"")
async def leaderboard(interaction: discord.Interaction):
    cfg = server_configs[str(interaction.guild.id)]
    if not is_admin(interaction, cfg):
        return await interaction.response.send_message(""❌ No permission"", ephemeral=True)
    sheet = client.open(cfg[""sheet_name""]).sheet1
    counts = defaultdict(set)
    for r in sheet.get_all_records():
        counts[r['UserID']].add(r['Timestamp'].split(""T"")[0])
    sorted_lb = sorted(counts.items(), key=lambda x: len(x[1]), reverse=True)
    msg = ""🏆 Leaderboard:\n""
    for i, (uid, ds) in enumerate(sorted_lb[:10]):
        member = interaction.guild.get_member(int(uid))
        name = member.display_name if member else uid
        msg += f""{i+1}. {name} – {len(ds)} day(s)\n""
    await interaction.response.send_message(msg, ephemeral=True)

@bot.tree.command(name=""export"", description=""ADMIN: Export logs to CSV"")
async def export(interaction: discord.Interaction):
    cfg = server_configs[str(interaction.guild.id)]
    if not is_admin(interaction, cfg):
        return await interaction.response.send_message(""❌ No permission"", ephemeral=True)
    csv_content = ""\n"".join("","".join(r) for r in client.open(cfg[""sheet_name""]).sheet1.get_all_values())
    await interaction.response.send_message(file=discord.File(fp=io.StringIO(csv_content), filename=""fitness_log.csv""), ephemeral=True)

@bot.tree.command(name=""reset_cache"", description=""ADMIN: Reset today’s in-memory log cache"")
async def reset_cache(interaction: discord.Interaction):
    cfg = server_configs[str(interaction.guild.id)]
    if not is_admin(interaction, cfg):
        return await interaction.response.send_message(""❌ No permission"", ephemeral=True)
    today = datetime.utcnow().date().isoformat()
    if today in daily_log_cache:
        del daily_log_cache[today]
        await interaction.response.send_message(""♻️ Today’s log cache has been reset."", ephemeral=True)
    else:
        await interaction.response.send_message(""ℹ️ No cached entries today."", ephemeral=True)

@bot.tree.command(name=""reload_config"", description=""ADMIN: Reload JSON config file"")
async def reload_config(interaction: discord.Interaction):
    global server_configs  # <- move this line to the top
    cfg = server_configs.get(str(interaction.guild.id))
    if not is_admin(interaction, cfg):
        return await interaction.response.send_message(""❌ No permission"", ephemeral=True)
    server_configs = load_configs()
    await interaction.response.send_message(""🔄 Configuration reloaded."", ephemeral=True)

class ConfigPromptView(ui.View):
    def __init__(self, interaction, cfg):
        super().__init__(timeout=60)
        self.cfg = cfg

    @ui.button(label=""Edit Settings"", style=discord.ButtonStyle.primary)
    async def edit(self, interaction: discord.Interaction, button: discord.ui.Button):
        flow = ConfigFlow(interaction.guild.id, self.cfg)
        nk, nl = CONFIG_KEYS[0]
        await interaction.response.send_modal(InputModal(flow, nk, nl))
        self.stop()

    @ui.button(label=""Keep Current Settings"", style=discord.ButtonStyle.secondary)
    async def keep(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message(""✅ Keeping existing configuration."", ephemeral=True)
        self.stop()

@bot.tree.command(name=""configure"", description=""ADMIN: Setup or update this server"")
async def configure(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message(""❌ Admins only."", ephemeral=True)

    cfg = server_configs.get(str(interaction.guild.id))
    if not cfg:
        await interaction.response.send_message(""🆕 Starting new server setup..."", ephemeral=True)
        flow = ConfigFlow(interaction.guild.id)
        nk, nl = CONFIG_KEYS[0]
        return await interaction.response.send_modal(InputModal(flow, nk, nl))

    summary = (
        f""**Current Configuration:**\n""
        f""- Sheet: `{cfg.get('sheet_name', 'N/A')}`\n""
        f""- Channel: `{cfg.get('channel_name', 'N/A')}`\n""
        f""- Thread: `{cfg.get('thread_name', 'N/A')}`\n""
        f""- Admin role: `{cfg.get('admin_role', 'N/A')}`\n""
        f""- Hashtag: `{cfg.get('hashtag', 'None')}`\n""
        f""- Timezone: `{cfg.get('timezone', 'N/A')}`\n""
        f""- Challenge: {cfg.get('start_date', 'N/A')} → {cfg.get('end_date', 'N/A')} ""
        f""(Goal: {cfg.get('goal_days','n/a')}, AutoSummaries: {cfg.get('auto_summaries','yes')})\n\n""
        f""🔧 Do you want to edit this configuration?""
    )
    await interaction.response.send_message(summary, view=ConfigPromptView(interaction, cfg), ephemeral=True)

@bot.tree.command(name=""view_config"", description=""ADMIN: View current configuration"")
async def view_config(interaction: discord.Interaction):
    cfg = server_configs.get(str(interaction.guild.id))
    if not cfg or not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message(""❌ No permission or not configured."", ephemeral=True)

    await interaction.response.send_message(
        f""**Configuration for {interaction.guild.name}:**\n""
        f""- Sheet: `{cfg.get('sheet_name', 'N/A')}`\n""
        f""- Channel: `{cfg.get('channel_name', 'N/A')}`\n""
        f""- Thread: `{cfg.get('thread_name', 'N/A')}`\n""
        f""- Admin role: `{cfg.get('admin_role', 'N/A')}`\n""
        f""- Hashtag: `{cfg.get('hashtag', 'None')}`\n""
        f""- Timezone: `{cfg.get('timezone', 'N/A')}`\n""
        f""- Challenge: {cfg.get('start_date', 'N/A')} → {cfg.get('end_date', 'N/A')} ""
        f""(Goal: {cfg.get('goal_days','n/a')}, AutoSummaries: {cfg.get('auto_summaries','yes')})\n\n""
        f""🔑 Make sure your sheet is shared with `{creds.service_account_email}` as Editor."",
        ephemeral=True
    )

@bot.tree.command(name=""help"", description=""Show available commands"")
async def _help(interaction: discord.Interaction):
    cfg = server_configs.get(str(interaction.guild.id))
    admin = cfg and is_admin(interaction, cfg)
    lines = [""**Available Commands:**"",
             ""• /progress – Your monthly log count"",
             ""• /streak – Your current activity streak""]
    if admin:
        lines += [
            """", ""**Admin Commands:**"",
            ""• /check @user – View another user’s stats"",
            ""• /leaderboard – View top participants"",
            ""• /export – Export logs to CSV"",
            ""• /reset_cache – Clear today’s cache"",
            ""• /reload_config – Reload config file"",
            ""• /configure – Setup/update this server"",
            ""• /view_config – View current settings""
        ]
    lines.append(""• /help – Show this help message"")
    await interaction.response.send_message(""\n"".join(lines), ephemeral=True)

# ————— Summary Scheduler (stub) —————
async def summary_scheduler():
    await bot.wait_until_ready()
    while True:
        await asyncio.sleep(86400)
        # future summary/notification logic happens here

# ————— Run the Bot —————
bot.run(os.getenv(""DISCORD_BOT_TOKEN""))"
YDKRE7q4,Untitled,thelebaron,C#,Wednesday 18th of June 2025 09:13:48 PM CDT,"public static void ConstructData(this ref BlobBuilder builder, ref DenseClip root, Animator animator, AnimationClip clip,
                                         Dictionary<string, EditorCurveBinding> curveDict)
        {
            int                           ratio   = curveDict.Count <= UseBucketCapacityRatioOfThreeUpTo ? 3 : 2;
            List<Tuple<string, string[]>> mapping = HumanoidRemapping.BoneToMuscleList;
   
            int capacity       = curveDict.Count;
            int bucketCapacity = math.ceilpow2(capacity * ratio);

            // bucketCapacityMask is neccessary for retrieval so set it on the data too
            int bucketCapacityMask = bucketCapacity - 1;
            int keyCapacity        = capacity;
            
            BlobBuilderArray<BlobArray<BlobCurve>> values  = builder.Allocate(ref root.HumanoidCurveData.data.values, capacity);
            BlobBuilderArray<uint>                 keys    = builder.Allocate(ref root.HumanoidCurveData.data.keys, capacity);
            BlobBuilderArray<int>                  next    = builder.Allocate(ref root.HumanoidCurveData.data.next, capacity);
            BlobBuilderArray<int>                  buckets = builder.Allocate(ref root.HumanoidCurveData.data.buckets, bucketCapacity);

            Debug.Log($"" values {values.Length}"");

            // so far the only way I've found to modify the true count on the data itself (without using unsafe code)
            // is by storing it in an array we can still access in the Add method.
            // count is only used in GetKeyArray and GetValueArray to size the array to the true count instead of capacity
            // count and keyCapacity are like
            BlobBuilderArray<int> count = builder.Allocate(ref root.HumanoidCurveData.data.count, 1);
            // Clear
            for (int i = 0; i < buckets.Length; i++)
                buckets[i] = -1;
            for (int i = 0; i < next.Length; i++)
                next[i] = -1;

            // Add logic
            for (var index = 0; index < mapping.Count; index++)
            {
                Tuple<string, string[]> boneMap       = mapping[index];
                uint      key           = mathex.CalculateHash32(boneMap.Item1);
                string[] propertyNames = boneMap.Item2;

                ref int c      = ref count[0];
                int     bucket = key.GetHashCode() & bucketCapacityMask;
                int     bucketIndex  = c++;

                int                         propertyCount     = 3;
                BlobBuilderArray<BlobCurve> curveArrayBuilder = builder.Allocate(ref values[index], propertyCount);

                for (int i = 0; i < propertyCount; i++)
                {
                    // we just add an empty key for missing properties
                    if (propertyNames[i].Equals(""""))
                    {
                        // Allocate single keyframe if no actual data
                        BlobBuilderArray<Key> emptyKeyframeBuilder = builder.Allocate<Key>(ref curveArrayBuilder[i].Keyframes, 1);
                        emptyKeyframeBuilder[0] = new Key();
                        continue;
                    }

                    // Get the curve for the property
                    AnimationCurve        curve            = AnimationUtility.GetEditorCurve(clip, curveDict.GetValueOrDefault(propertyNames[i]));
                    BlobBuilderArray<Key> keyframesBuilder = builder.Allocate<Key>(ref curveArrayBuilder[i].Keyframes, curve.keys.Length);

                    // Directly populate the blob array from curve keys
                    for (int kIndex = 0; kIndex < curve.keys.Length; kIndex++)
                    {
                        keyframesBuilder[kIndex] = new Key(curve.keys[kIndex]);
                    }
                }

                keys[index] = key;
                //values[index] =
                next[index]     = buckets[bucket];
                buckets[bucket] = index;
            }
        }"
CTaqVgdh,Untitled,thelebaron,C#,Wednesday 18th of June 2025 09:02:58 PM CDT,"public static void ConstructData(this ref BlobBuilder builder, ref DenseClip root, Animator animator, AnimationClip clip,
                                         Dictionary<string, EditorCurveBinding> curveDict)
        {
            int ratio = curveDict.Count <= UseBucketCapacityRatioOfThreeUpTo ? 3 : 2;
            var mapping = HumanoidRemapping.BoneToMuscleList;
   
            var capacity       = curveDict.Count;
            int bucketCapacity = math.ceilpow2(capacity * ratio);

            // bucketCapacityMask is neccessary for retrieval so set it on the data too
            var bucketCapacityMask = bucketCapacity - 1;
            var keyCapacity        = capacity;
            
            BlobBuilderArray<BlobArray<BlobCurve>> values  = builder.Allocate(ref root.HumanoidCurveData.data.values, capacity);
            var                keys    = builder.Allocate(ref root.HumanoidCurveData.data.keys, capacity);
            var                next    = builder.Allocate(ref root.HumanoidCurveData.data.next, capacity);
            var                buckets = builder.Allocate(ref root.HumanoidCurveData.data.buckets, bucketCapacity);

            // so far the only way I've found to modify the true count on the data itself (without using unsafe code)
            // is by storing it in an array we can still access in the Add method.
            // count is only used in GetKeyArray and GetValueArray to size the array to the true count instead of capacity
            // count and keyCapacity are like
            var count = builder.Allocate(ref root.HumanoidCurveData.data.count, 1);
            // Clear
            for (int i = 0; i < buckets.Length; i++)
                buckets[i] = -1;
            for (int i = 0; i < next.Length; i++)
                next[i] = -1;

            // Add logic
            foreach (Tuple<string, string[]> boneMap in mapping)
            {
                var      key           = mathex.CalculateHash32(boneMap.Item1);
                string[] propertyNames = boneMap.Item2;
                
                ref int c      = ref count[0];
                int     bucket = key.GetHashCode() & bucketCapacityMask;
                int     index  = c++;

                var propertyCount     = 3;
                var curveArrayBuilder = builder.Allocate(ref values[index], propertyCount);

                for (int i = 0; i < propertyCount; i++)
                {
                    // we just add an empty key for missing properties
                    if (propertyNames[i].Equals(""""))
                    {
                        // Allocate single keyframe if no actual data
                        var emptyKeyframeBuilder = builder.Allocate<Key>(ref curveArrayBuilder[i].Keyframes, 1);
                        emptyKeyframeBuilder[0] = new Key();
                        continue;
                    }

                    // Get the curve for the property
                    var curve = AnimationUtility.GetEditorCurve(clip, curveDict.GetValueOrDefault(propertyNames[i]));
                    var keyframesBuilder = builder.Allocate<Key>(ref curveArrayBuilder[i].Keyframes, curve.keys.Length);
                    
                    // Directly populate the blob array from curve keys
                    for (int kIndex = 0; kIndex < curve.keys.Length; kIndex++)
                    {
                        keyframesBuilder[kIndex] = new Key(curve.keys[kIndex]);
                    }
                }

                keys[index] = key;
                //values[index] =
                next[index] = buckets[bucket];
                buckets[bucket] = index;
            }
        }"
zRUgtcVm,cc-wheat-farm,asianhaydenxd,Lua,Wednesday 18th of June 2025 08:50:43 PM CDT,"local function replant()
    local success, data = turtle.inspectDown()
    if not success then return end
    if data.name ~= ""minecraft:wheat"" then return end
    if data.state.age ~= 7 then return end
    turtle.digDown()
    turtle.placeDown()
end

local function harvestLayer()
    -- Turtle should be over belt facing towards the farm.
    for i=1,2 do
        turtle.forward()
    end

    for i=1,4 do
        replant()
        for i=1,8 do
            turtle.forward()
            replant()
        end
        turtle.turnRight()
        turtle.forward()
        turtle.turnRight()

        replant()
        for i=1,8 do
            turtle.forward()
            replant()
        end
        turtle.turnLeft()
        turtle.forward()
        turtle.turnLeft()
    end
    replant()
    for i=1,8 do
        turtle.forward()
        replant()
    end

    turtle.turnLeft()
    for i=1,8 do
        turtle.forward()
    end
    turtle.turnLeft()
    for i=1,10 do
        turtle.forward()
    end
    for i=1,2 do
        turtle.turnLeft()
    end
end

local function dropAll(itemName)
    for i=1,16 do
        turtle.select(i)
        local item = turtle.getItemDetail()
        if item and item.name:find(itemName) then
            turtle.dropDown()
        end
    end
end

local function harvestAll()
    harvestLayer()
    for i=1,2 do
        for i=1,4 do
            turtle.up()
        end
        harvestLayer()
    end
    for i=1,8 do
        turtle.down()
    end
    dropAll(""wheat"")
    turtle.turnLeft()
    for i=1,2 do turtle.forward() end
    dropAll(""seed"")
    for i=1,2 do turtle.turnRight() end
    for i=1,2 do turtle.forward() end
    turtle.turnLeft()
end

turtle.select(1)

while true do
    harvestAll()
end"
fJeiv9kT,2025-06-17_stats.json,rdp_snitch,JSON,Wednesday 18th of June 2025 07:18:38 PM CDT,"{
  ""ip"": {
    ""172.236.141.242"": 8325,
    ""24.173.30.170"": 12186,
    ""14.225.202.191"": 204,
    ""194.165.16.164"": 6,
    ""91.238.181.92"": 12,
    ""139.59.237.217"": 15,
    ""157.66.222.138"": 6,
    ""205.210.31.81"": 9,
    ""103.87.131.65"": 12,
    ""111.170.152.113"": 18,
    ""2.57.121.247"": 3,
    ""92.63.197.23"": 18,
    ""8.219.100.95"": 6,
    ""194.180.49.127"": 3,
    ""205.210.31.219"": 9,
    ""194.164.107.6"": 30,
    ""167.172.131.118"": 11346,
    ""185.196.220.41"": 9,
    ""205.210.31.180"": 9,
    ""146.190.167.180"": 3,
    ""152.32.139.96"": 3,
    ""194.165.16.161"": 6,
    ""147.185.132.66"": 9,
    ""162.142.125.204"": 3,
    ""167.94.145.110"": 3
  },
  ""asn"": {
    ""AS63949"": 8325,
    ""AS11427"": 12186,
    ""AS135905"": 204,
    ""AS48721"": 12,
    ""AS49434"": 12,
    ""AS14061"": 11364,
    ""AS150895"": 6,
    ""AS396982"": 36,
    ""AS55947"": 12,
    ""AS151185"": 18,
    ""AS47890"": 3,
    ""AS210848"": 18,
    ""AS45102"": 6,
    ""AS201814"": 3,
    ""AS50219"": 30,
    ""AS213438"": 9,
    ""AS135377"": 3,
    ""AS398324"": 3,
    ""AS398705"": 3
  },
  ""isp"": {
    ""Akamai Technologies, Inc."": 8325,
    ""Charter Communications Inc"": 12186,
    ""Vietnam Posts and Telecommunications Group"": 204,
    ""Flyservers S.A."": 12,
    ""Datacenter location PAR1 France"": 12,
    ""DIGITALOCEAN"": 15,
    ""TANTHOIVPS"": 6,
    ""Google LLC"": 36,
    ""Bangalore Broadband Network Pvt Ltd"": 12,
    ""China Telecom"": 18,
    ""Unmanaged LTD"": 3,
    ""Telkom Internet LTD"": 18,
    ""Alibaba (US) Technology Co., Ltd."": 6,
    ""MEVSPACE sp. z o.o."": 3,
    ""LNK SYSTEMS MUNTENIA SRL"": 30,
    ""DigitalOcean, LLC"": 11349,
    ""ColocaTel Inc."": 9,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Censys, Inc."": 6
  },
  ""org"": {
    ""Akamai Technologies, Inc."": 8325,
    ""Spectrum"": 12186,
    ""VNPT"": 204,
    ""Flyservers S.A"": 12,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""DigitalOcean, LLC"": 11364,
    ""Tan VPS Company Limited"": 6,
    ""Palo Alto Networks, Inc"": 36,
    ""Unknown"": 12,
    ""Chinanet HB"": 18,
    ""Unmanaged LTD"": 3,
    ""Korotkij Denis Aleksandrovich"": 18,
    ""Alibaba.com Singapore E-Commerce Private Limited"": 6,
    ""HostSlick"": 3,
    ""Valence Technology Co"": 30,
    ""Colocatel Inc"": 9,
    ""Ucloud Information Technology"": 3,
    ""Censys Inc"": 3,
    ""Censys, Inc."": 3
  },
  ""regionName"": {
    ""South East"": 8325,
    ""Texas"": 12186,
    ""Hanoi"": 204,
    ""Kaunas"": 12,
    ""\u00cele-de-France"": 12,
    ""South West"": 15,
    ""B\u00ecnh \u0110\u1ecbnh Province"": 6,
    ""California"": 39,
    ""Karnataka"": 12,
    ""Hubei"": 18,
    ""England"": 3,
    ""North Holland"": 18,
    ""North West"": 36,
    ""Bavaria"": 3,
    ""New Jersey"": 11346,
    ""Virginia"": 9,
    ""Seoul"": 3,
    ""Michigan"": 6
  },
  ""country"": {
    ""Singapore"": 8376,
    ""United States"": 23586,
    ""Vietnam"": 210,
    ""Lithuania"": 12,
    ""France"": 12,
    ""India"": 12,
    ""China"": 18,
    ""United Kingdom"": 3,
    ""The Netherlands"": 18,
    ""Germany"": 3,
    ""South Korea"": 3
  },
  ""account"": {
    ""hello"": 32124,
    ""Test"": 24,
    ""fDwfFzZZx"": 3,
    ""lUMKht"": 3,
    ""lSAFNq"": 3,
    ""Administr"": 21,
    ""XeGiVCxed"": 3,
    ""QyyevX"": 3,
    ""PopGKw"": 3,
    ""eltons"": 15,
    ""administr"": 15,
    ""Domain"": 9,
    ""NdFQdXeUP"": 3,
    ""wyysfn"": 3,
    ""DVPYnV"": 3,
    ""Administrator"": 3,
    ""oJbOmaFae"": 3,
    ""CzQalH"": 3,
    ""rkdbQY"": 3,
    ""(empty)"": 6
  },
  ""keyboard"": {
    ""Unknown"": 32253
  },
  ""client_build"": {
    ""Unknown"": 32253
  },
  ""client_name"": {
    ""Unknown"": 32253
  },
  ""ip_type"": {
    ""hosting"": 19746,
    ""Unknown"": 12507
  }
}"
M5J3FEtN,2025-06-17_stats.json,rdp_snitch,JSON,Wednesday 18th of June 2025 07:16:17 PM CDT,"{
  ""ip"": {
    ""172.236.141.242"": 8324,
    ""24.173.30.170"": 12184,
    ""14.225.202.191"": 202,
    ""194.165.16.164"": 6,
    ""91.238.181.92"": 12,
    ""139.59.237.217"": 15,
    ""157.66.222.138"": 6,
    ""205.210.31.81"": 9,
    ""103.87.131.65"": 12,
    ""111.170.152.113"": 18,
    ""2.57.121.247"": 3,
    ""92.63.197.23"": 18,
    ""8.219.100.95"": 6,
    ""194.180.49.127"": 3,
    ""205.210.31.219"": 9,
    ""194.164.107.6"": 30,
    ""167.172.131.118"": 11346,
    ""185.196.220.41"": 9,
    ""205.210.31.180"": 9,
    ""146.190.167.180"": 3,
    ""152.32.139.96"": 3,
    ""194.165.16.161"": 6,
    ""147.185.132.66"": 9,
    ""162.142.125.204"": 3,
    ""167.94.145.110"": 3
  },
  ""asn"": {
    ""AS63949"": 8324,
    ""AS11427"": 12184,
    ""AS135905"": 202,
    ""AS48721"": 12,
    ""AS49434"": 12,
    ""AS14061"": 11364,
    ""AS150895"": 6,
    ""AS396982"": 36,
    ""AS55947"": 12,
    ""AS151185"": 18,
    ""AS47890"": 3,
    ""AS210848"": 18,
    ""AS45102"": 6,
    ""AS201814"": 3,
    ""AS50219"": 30,
    ""AS213438"": 9,
    ""AS135377"": 3,
    ""AS398324"": 3,
    ""AS398705"": 3
  },
  ""isp"": {
    ""Akamai Technologies, Inc."": 8324,
    ""Charter Communications Inc"": 12184,
    ""Vietnam Posts and Telecommunications Group"": 202,
    ""Flyservers S.A."": 12,
    ""Datacenter location PAR1 France"": 12,
    ""DIGITALOCEAN"": 15,
    ""TANTHOIVPS"": 6,
    ""Google LLC"": 36,
    ""Bangalore Broadband Network Pvt Ltd"": 12,
    ""China Telecom"": 18,
    ""Unmanaged LTD"": 3,
    ""Telkom Internet LTD"": 18,
    ""Alibaba (US) Technology Co., Ltd."": 6,
    ""MEVSPACE sp. z o.o."": 3,
    ""LNK SYSTEMS MUNTENIA SRL"": 30,
    ""DigitalOcean, LLC"": 11349,
    ""ColocaTel Inc."": 9,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Censys, Inc."": 6
  },
  ""org"": {
    ""Akamai Technologies, Inc."": 8324,
    ""Spectrum"": 12184,
    ""VNPT"": 202,
    ""Flyservers S.A"": 12,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""DigitalOcean, LLC"": 11364,
    ""Tan VPS Company Limited"": 6,
    ""Palo Alto Networks, Inc"": 36,
    ""Unknown"": 12,
    ""Chinanet HB"": 18,
    ""Unmanaged LTD"": 3,
    ""Korotkij Denis Aleksandrovich"": 18,
    ""Alibaba.com Singapore E-Commerce Private Limited"": 6,
    ""HostSlick"": 3,
    ""Valence Technology Co"": 30,
    ""Colocatel Inc"": 9,
    ""Ucloud Information Technology"": 3,
    ""Censys Inc"": 3,
    ""Censys, Inc."": 3
  },
  ""regionName"": {
    ""South East"": 8324,
    ""Texas"": 12184,
    ""Hanoi"": 202,
    ""Kaunas"": 12,
    ""\u00cele-de-France"": 12,
    ""South West"": 15,
    ""B\u00ecnh \u0110\u1ecbnh Province"": 6,
    ""California"": 39,
    ""Karnataka"": 12,
    ""Hubei"": 18,
    ""England"": 3,
    ""North Holland"": 18,
    ""North West"": 36,
    ""Bavaria"": 3,
    ""New Jersey"": 11346,
    ""Virginia"": 9,
    ""Seoul"": 3,
    ""Michigan"": 6
  },
  ""country"": {
    ""Singapore"": 8375,
    ""United States"": 23584,
    ""Vietnam"": 208,
    ""Lithuania"": 12,
    ""France"": 12,
    ""India"": 12,
    ""China"": 18,
    ""United Kingdom"": 3,
    ""The Netherlands"": 18,
    ""Germany"": 3,
    ""South Korea"": 3
  },
  ""account"": {
    ""hello"": 32119,
    ""Test"": 24,
    ""fDwfFzZZx"": 3,
    ""lUMKht"": 3,
    ""lSAFNq"": 3,
    ""Administr"": 21,
    ""XeGiVCxed"": 3,
    ""QyyevX"": 3,
    ""PopGKw"": 3,
    ""eltons"": 15,
    ""administr"": 15,
    ""Domain"": 9,
    ""NdFQdXeUP"": 3,
    ""wyysfn"": 3,
    ""DVPYnV"": 3,
    ""Administrator"": 3,
    ""oJbOmaFae"": 3,
    ""CzQalH"": 3,
    ""rkdbQY"": 3,
    ""(empty)"": 6
  },
  ""keyboard"": {
    ""Unknown"": 32248
  },
  ""client_build"": {
    ""Unknown"": 32248
  },
  ""client_name"": {
    ""Unknown"": 32248
  },
  ""ip_type"": {
    ""hosting"": 19745,
    ""Unknown"": 12503
  }
}"
5T8BkRwb,2025-06-17_stats.json,rdp_snitch,JSON,Wednesday 18th of June 2025 07:15:13 PM CDT,"{
  ""ip"": {
    ""172.236.141.242"": 8323,
    ""24.173.30.170"": 12182,
    ""14.225.202.191"": 200,
    ""194.165.16.164"": 6,
    ""91.238.181.92"": 12,
    ""139.59.237.217"": 15,
    ""157.66.222.138"": 6,
    ""205.210.31.81"": 9,
    ""103.87.131.65"": 12,
    ""111.170.152.113"": 18,
    ""2.57.121.247"": 3,
    ""92.63.197.23"": 18,
    ""8.219.100.95"": 6,
    ""194.180.49.127"": 3,
    ""205.210.31.219"": 9,
    ""194.164.107.6"": 30,
    ""167.172.131.118"": 11346,
    ""185.196.220.41"": 9,
    ""205.210.31.180"": 9,
    ""146.190.167.180"": 3,
    ""152.32.139.96"": 3,
    ""194.165.16.161"": 6,
    ""147.185.132.66"": 9,
    ""162.142.125.204"": 3,
    ""167.94.145.110"": 3
  },
  ""asn"": {
    ""AS63949"": 8323,
    ""AS11427"": 12182,
    ""AS135905"": 200,
    ""AS48721"": 12,
    ""AS49434"": 12,
    ""AS14061"": 11364,
    ""AS150895"": 6,
    ""AS396982"": 36,
    ""AS55947"": 12,
    ""AS151185"": 18,
    ""AS47890"": 3,
    ""AS210848"": 18,
    ""AS45102"": 6,
    ""AS201814"": 3,
    ""AS50219"": 30,
    ""AS213438"": 9,
    ""AS135377"": 3,
    ""AS398324"": 3,
    ""AS398705"": 3
  },
  ""isp"": {
    ""Akamai Technologies, Inc."": 8323,
    ""Charter Communications Inc"": 12182,
    ""Vietnam Posts and Telecommunications Group"": 200,
    ""Flyservers S.A."": 12,
    ""Datacenter location PAR1 France"": 12,
    ""DIGITALOCEAN"": 15,
    ""TANTHOIVPS"": 6,
    ""Google LLC"": 36,
    ""Bangalore Broadband Network Pvt Ltd"": 12,
    ""China Telecom"": 18,
    ""Unmanaged LTD"": 3,
    ""Telkom Internet LTD"": 18,
    ""Alibaba (US) Technology Co., Ltd."": 6,
    ""MEVSPACE sp. z o.o."": 3,
    ""LNK SYSTEMS MUNTENIA SRL"": 30,
    ""DigitalOcean, LLC"": 11349,
    ""ColocaTel Inc."": 9,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Censys, Inc."": 6
  },
  ""org"": {
    ""Akamai Technologies, Inc."": 8323,
    ""Spectrum"": 12182,
    ""VNPT"": 200,
    ""Flyservers S.A"": 12,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""DigitalOcean, LLC"": 11364,
    ""Tan VPS Company Limited"": 6,
    ""Palo Alto Networks, Inc"": 36,
    ""Unknown"": 12,
    ""Chinanet HB"": 18,
    ""Unmanaged LTD"": 3,
    ""Korotkij Denis Aleksandrovich"": 18,
    ""Alibaba.com Singapore E-Commerce Private Limited"": 6,
    ""HostSlick"": 3,
    ""Valence Technology Co"": 30,
    ""Colocatel Inc"": 9,
    ""Ucloud Information Technology"": 3,
    ""Censys Inc"": 3,
    ""Censys, Inc."": 3
  },
  ""regionName"": {
    ""South East"": 8323,
    ""Texas"": 12182,
    ""Hanoi"": 200,
    ""Kaunas"": 12,
    ""\u00cele-de-France"": 12,
    ""South West"": 15,
    ""B\u00ecnh \u0110\u1ecbnh Province"": 6,
    ""California"": 39,
    ""Karnataka"": 12,
    ""Hubei"": 18,
    ""England"": 3,
    ""North Holland"": 18,
    ""North West"": 36,
    ""Bavaria"": 3,
    ""New Jersey"": 11346,
    ""Virginia"": 9,
    ""Seoul"": 3,
    ""Michigan"": 6
  },
  ""country"": {
    ""Singapore"": 8374,
    ""United States"": 23582,
    ""Vietnam"": 206,
    ""Lithuania"": 12,
    ""France"": 12,
    ""India"": 12,
    ""China"": 18,
    ""United Kingdom"": 3,
    ""The Netherlands"": 18,
    ""Germany"": 3,
    ""South Korea"": 3
  },
  ""account"": {
    ""hello"": 32114,
    ""Test"": 24,
    ""fDwfFzZZx"": 3,
    ""lUMKht"": 3,
    ""lSAFNq"": 3,
    ""Administr"": 21,
    ""XeGiVCxed"": 3,
    ""QyyevX"": 3,
    ""PopGKw"": 3,
    ""eltons"": 15,
    ""administr"": 15,
    ""Domain"": 9,
    ""NdFQdXeUP"": 3,
    ""wyysfn"": 3,
    ""DVPYnV"": 3,
    ""Administrator"": 3,
    ""oJbOmaFae"": 3,
    ""CzQalH"": 3,
    ""rkdbQY"": 3,
    ""(empty)"": 6
  },
  ""keyboard"": {
    ""Unknown"": 32243
  },
  ""client_build"": {
    ""Unknown"": 32243
  },
  ""client_name"": {
    ""Unknown"": 32243
  },
  ""ip_type"": {
    ""hosting"": 19744,
    ""Unknown"": 12499
  }
}"
KftgQxmT,stripmine.lua,Ubidibity,Lua,Wednesday 18th of June 2025 06:57:38 PM CDT,"-- Robust movement to dig through obstacles
function safeMoveForward()
    while not turtle.forward() do
        turtle.dig() -- Dig block in front (stone, gravel, etc.)
        os.sleep(0.1) -- Pause for gravel/sand to fall
    end
end

-- Dig 3x1 (forward, up, down)
function digStep()
    turtle.dig()       -- Dig forward
    turtle.digUp()     -- Dig above
    turtle.digDown()   -- Dig below
    safeMoveForward()  -- Move forward, digging if needed
end

-- Mine a tunnel of given length
function mineTunnel(length)
    for i = 1, length do
        digStep()
        -- Check fuel and inventory every 10 blocks
        if i % 10 == 0 then
            if turtle.getFuelLevel() < 20 then
                print(""Low fuel! Stopping."")
                return false
            end
            if turtle.getItemCount(16) > 0 then
                print(""Inventory full! Stopping."")
                return false
            end
        end
    end
    return true
end

-- Unload inventory into chest in front
function unload()
    for i = 1, 16 do
        turtle.select(i)
        turtle.drop() -- Drop into chest
    end
    turtle.select(1)
end

-- Main program for multi-turtle setup
function main()
    print(""Starting mining run..."")
    -- Mine 32 blocks out (2 chunks)
    if mineTunnel(32) then
        turtle.turnLeft()
        safeMoveForward() -- Shift 1 block left
        turtle.turnLeft() -- Face negative X
        -- Mine 32 blocks back
        if mineTunnel(32) then
            print(""Mining complete!"")
            -- Face chest at Z=502 (adjust Z if needed)
            -- Turtle is at Z=502/504/506; adjust to Z=502
            local turtleZ = 502 -- Change to your chest's Z
            local steps = turtleZ == 502 and 0 or (turtleZ == 504 and 2) or -2 -- Move to Z=502
            if steps ~= 0 then
                if steps > 0 then
                    turtle.turnLeft() -- Face positive Z
                else
                    turtle.turnRight() -- Face negative Z
                end
                for i = 1, math.abs(steps) do
                    safeMoveForward()
                end
                if steps > 0 then
                    turtle.turnRight() -- Face negative X
                else
                    turtle.turnLeft() -- Face negative X
                end
            end
            -- Move 1 block to chest (X=505 to X=500)
            safeMoveForward()
        else
            print(""Return trip failed. Check fuel/inventory."")
        end
    else
        print(""Outbound trip failed. Check fuel/inventory."")
    end
    -- Unload into chest
    unload()
    print(""Inventory unloaded."")
end

-- Run the program
main()"
d8rGFkBQ,Preferences Storage rev_04,pleasedontcode,Arduino,Wednesday 18th of June 2025 06:31:54 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Preferences Storage
	- Source Code NOT compiled for: Arduino Nano 33 BLE
	- Source Code created on: 2025-06-18 23:30:45

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Develop a BLE-based system for storing and */
	/* retrieving user preferences using */
	/* NanoBLEFlashPrefs library on Arduino Nano 33 BLE. */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
#include <NanoBLEFlashPrefs.h> // https://github.com/Dirk-/NanoBLEFlashPrefs

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void printPreferences(NanoBLEFlashPrefs::flashPrefs thePrefs);
void printReturnCode(int rc);

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
NanoBLEFlashPrefs myFlashPrefs; // Instantiate the preferences storage object

// Structure of preferences. You determine the fields.
// Must not exceed 1019 words (4076 bytes).
typedef struct flashStruct
{
  char someString[64];
  bool aSetting;
  int someNumber;
  float anotherNumber;
} flashPrefs;

// Our preferences. All functions here can read and modify these values, but to make
// them permanent, the struct must be written to flash explicitly (see below).
flashPrefs globalPrefs;

void setup()
{
  Serial.begin(9600);
  // Give user a chance to open the terminal
  delay(5000);
  Serial.println(""----- NanoBLEFlashPrefs Test -----"");

  // See if we already have a preference record
  Serial.println(""Read preference record..."");
  int rc = myFlashPrefs.readPrefs(&globalPrefs, sizeof(globalPrefs));
  if (rc == FDS_SUCCESS)
  {
    printPreferences(globalPrefs);
  }
  else
  {
    Serial.println(""No preferences found.""); // This should be the case when running for the first time on that particular board
    printReturnCode(rc);
  }
  Serial.println("""");

  // Prepare preference record for writing
  strcpy(globalPrefs.someString, ""NanoBLEFlashPrefs Test"");
  globalPrefs.aSetting = true;
  globalPrefs.someNumber = 42;
  globalPrefs.anotherNumber = 3.14;

  // Write preference record
  Serial.println(""Write preferences..."");
  printReturnCode(myFlashPrefs.writePrefs(&globalPrefs, sizeof(globalPrefs)));
  Serial.println("""");

  // Read preference record
  Serial.println(""Read preferences..."");
  rc = myFlashPrefs.readPrefs(&globalPrefs, sizeof(globalPrefs));
  if (rc == FDS_SUCCESS)
  {
    printPreferences(globalPrefs);
  }
  else
  {
    printReturnCode(rc);
  }
  Serial.println("""");

  delay(1000);

  // Change preference record
  strcpy(globalPrefs.someString, ""NanoBLEFlashPrefs Test 2"");
  globalPrefs.aSetting = false;
  globalPrefs.someNumber = 5050;
  globalPrefs.anotherNumber = 2.72;

  // Write preference record
  Serial.println(""Write another preference record..."");
  printReturnCode(myFlashPrefs.writePrefs(&globalPrefs, sizeof(globalPrefs)));
  Serial.println("""");

  // Read preference record
  Serial.println(""Read preferences..."");
  rc = myFlashPrefs.readPrefs(&globalPrefs, sizeof(globalPrefs));
  if (rc == FDS_SUCCESS)
  {
    printPreferences(globalPrefs);
  }
  else
  {
    printReturnCode(rc);
  }

  Serial.println("""");
  Serial.println(""Done. Press reset button to see that again or take look at"");
  Serial.println(""the NanoBLEFlashPrefsUtils example for more info."");
  Serial.println("""");
}

void loop()
{
  // In a real application, you might update preferences based on user input or events.
  // For demonstration, we do nothing here.
}

// Print preference record to Serial.
void printPreferences(flashPrefs thePrefs)
{
  Serial.println(""Preferences: "");
  Serial.print(""String: "");
  Serial.println(thePrefs.someString);
  Serial.print(""A Setting: "");
  Serial.println(thePrefs.aSetting);
  Serial.print(""Number: "");
  Serial.println(thePrefs.someNumber);
  Serial.print(""Another Number: "");
  Serial.println(thePrefs.anotherNumber);
}

// Print return code infos to Serial.
void printReturnCode(int rc)
{
  Serial.print(""Return code: "");
  Serial.print(rc);
  Serial.print("", "");
  Serial.println(myFlashPrefs.errorString(rc));
}
"
SDxGig1X,ServerError: received 500 HTTP response,basedcount_bot,Python,Wednesday 18th of June 2025 06:25:02 PM CDT,"Traceback (most recent call last):
  File ""/home/gmktec-server/Bots/basedcount_bot/basedcount_bot.py"", line 46, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/home/gmktec-server/Bots/basedcount_bot/basedcount_bot.py"", line 123, in check_mail
    async for message in reddit_instance.inbox.unread(limit=None):  # Message
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 37, in __anext__
    await self._next_batch()
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 90, in _next_batch
    self._listing = await self._reddit.get(self.url, params=self.params)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 54, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 813, in get
    return await self._objectify_request(method=""GET"", params=params, path=path)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 570, in _objectify_request
    await self.request(
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 54, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 1061, in request
    return await self._core.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 383, in request
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 305, in _request_with_retries
    return await self._do_retry(
           ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 170, in _do_retry
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 305, in _request_with_retries
    return await self._do_retry(
           ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 170, in _do_retry
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 322, in _request_with_retries
    raise self.STATUS_EXCEPTIONS[response.status](response)
asyncprawcore.exceptions.ServerError: received 500 HTTP response
"
dGvpZiDa,UAV FEED PiP,papijuan23,SQF,Wednesday 18th of June 2025 05:31:26 PM CDT,"**WORKS ONLY WITH TV ""Land_FlatTV_01_F"" and ""Land_TripodScreen_01_large_F"" .  To work properly you need to place a Antena ""FPV_Retranslator"" no less 50 meters from the TV. Otherwise won't work. **

Known bugs:

In the Orion camera (If you are aiming the turret at a fixed spot, the monitors will only show the driver's POV.)


-------------------

init.sqf

[] execVM ""computerInteraction.sqf"";



-------------------


computerInteraction.sqf


if (!hasInterface) exitWith {};

player setVariable [""poweredOnTVs"", []];

[] spawn {
    private _tvClasses = [""Land_FlatTV_01_F"", ""Land_TripodScreen_01_large_F""];
    private _antennaClass = ""FPV_Retranslator"";

    while {true} do {
        private _allTVs = [];
        { _allTVs append (allMissionObjects _x) } forEach _tvClasses;

        {
            private _tv = _x;

            if ((player distance _tv) > 10) then {  // <-- Aquí está el rango de ""desaparición"" aumentado a 10m
                _tv setObjectTexture [0, ""#(argb,8,8,3)color(0,0,0,1)""];  // Negro opaco solo local
            } else {
                if (_tv in (player getVariable [""poweredOnTVs"", []])) then {
                    if (_tv getVariable [""droneConnected"", false]) then {
                        private _rttName = _tv getVariable [""rttName"", """"];
                        if (_rttName != """") then {
                            _tv setObjectTexture [0, format [""#(argb,512,512,1)r2t(%1,1)"", _rttName]];
                        };
                    } else {
                        if (_tv getVariable [""signalLost"", false]) then {
                            _tv setObjectTexture [0, ""#(argb,8,8,3)color(1,0,0,1)""];
                        } else {
                            private _hasAntenna = false;
                            {
                                if (alive _x && (_x distance _tv) < 50) exitWith { _hasAntenna = true };
                            } forEach allMissionObjects _antennaClass;

                            if (_hasAntenna) then {
                                _tv setObjectTexture [0, ""#(argb,8,8,3)color(1,1,0,1)""];
                            } else {
                                _tv setObjectTexture [0, ""#(argb,8,8,3)color(0,0,1,1)""];
                            };
                        };
                    };
                } else {
                    _tv setObjectTexture [0, ""#(argb,8,8,3)color(0,0,0,1)""];
                };
            };

            // ** CAMBIO: menú general para todas las acciones a 2 metros de distancia **
            if ((player distance _tv) < 2 && {!(_tv getVariable [""menuAdded"", false])}) then {
                _tv setVariable [""menuAdded"", true];

                // Agregar la acción de prender/apagar TV
                _tv addAction [""🔌 Prender / Apagar TV"", {
                    params [""_target""];
                    private _list = player getVariable [""poweredOnTVs"", []];

                    private _antena = false;
                    {
                        if (alive _x && (_x distance _target) < 50) exitWith { _antena = true };
                    } forEach allMissionObjects ""FPV_Retranslator"";

                    if (_target in _list) then {
                        _list = _list - [_target];
                        player setVariable [""poweredOnTVs"", _list];

                        private _cam = _target getVariable [""camObject"", objNull];
                        if (!isNull _cam) then { deleteVehicle _cam };

                        _target setVariable [""droneConnected"", false];
                        _target setVariable [""disconnectActionAdded"", false];
                        _target setVariable [""camObject"", objNull];
                        _target setVariable [""droneMenuAdded"", false];
                        _target setVariable [""rttName"", """"];
                        _target setVariable [""signalLost"", false];

                        private _actions = actionIDs _target;
                        { if (_x != -1) then { _target removeAction _x } } forEach _actions;

                        _target setVariable [""menuAdded"", false];
                        _target setObjectTextureGlobal [0, ""#(argb,8,8,3)color(0,0,0,0)""];
                    } else {
                        _list pushBackUnique _target;
                        player setVariable [""poweredOnTVs"", _list];

                        _target setVariable [""droneConnected"", false];
                        _target setVariable [""disconnectActionAdded"", false];
                        _target setVariable [""camObject"", objNull];
                        _target setVariable [""droneMenuAdded"", false];
                        _target setVariable [""rttName"", """"];
                        _target setVariable [""signalLost"", false];

                        if (_antena) then {
                            _target setObjectTextureGlobal [0, ""#(argb,8,8,3)color(1,1,0,1)""];
                        } else {
                            _target setObjectTextureGlobal [0, ""#(argb,8,8,3)color(0,0,1,1)""];
                        };
                    };
                }];
            };
        } forEach _allTVs;

        private _list = player getVariable [""poweredOnTVs"", []];
        private _allAntennas = allMissionObjects _antennaClass;

        {
            private _tv = _x;
            if (!alive _tv) then {
                _list = _list - [_tv];
                player setVariable [""poweredOnTVs"", _list];
                continue;
            };

            private _hasAntenna = false;
            {
                if (alive _x && (_x distance _tv) < 50) exitWith { _hasAntenna = true };
            } forEach _allAntennas;

            if (_hasAntenna) then {
                if (!(_tv getVariable [""droneMenuAdded"", false])) then {
                    _tv setVariable [""droneMenuAdded"", true];

                    private _drones = vehicles select {
                        alive _x && {typeOf _x in [""B_UAV_01_F"", ""orion_F_BLU""]}
                    };

                    {
                        private _drone = _x;
                        private _rttName = format [""uavRtt_%1"", _forEachIndex];
                        _tv setVariable [""rttName"", _rttName];

                        _tv addAction [format [""🎯 Mostrar cámara Drone %1 (%2m)"", _forEachIndex + 1, round (_drone distance _tv)], {
                            params [""_target"", ""_caller"", ""_actionId"", ""_args""];
                            _args params [""_drone"", ""_rttName""];

                            private _cam = ""camera"" camCreate getPosASL _drone;
                            _cam cameraEffect [""Internal"", ""Back"", _rttName];

                            if (typeOf _drone == ""orion_F_BLU"") then {
                                _cam attachTo [_drone, [0,0,0], ""pip0_pos""];
                            } else {
                                _cam attachTo [_drone, [0,0,0], ""PiP0_pos""];
                                [_cam, _drone] spawn {
                                    params [""_cam"", ""_drone""];
                                    while {alive _cam && alive _drone} do {
                                        private _dir = (_drone selectionPosition ""PiP0_pos"") vectorFromTo (_drone selectionPosition ""PiP0_dir"");
                                        _cam setVectorDirAndUp [_dir, _dir vectorCrossProduct [-(_dir select 1), _dir select 0, 0]];
                                        sleep 0.1;
                                    };
                                };
                            };

                            _target setVariable [""droneConnected"", true];
                            _target setVariable [""camObject"", _cam];
                            _target setVariable [""rttName"", _rttName];
                            _target setVariable [""signalLost"", false];
                            _target setObjectTextureGlobal [0, format [""#(argb,512,512,1)r2t(%1,1)"", _rttName]];
                            systemChat format [""📺 Mostrando Drone en TV - %1"", _rttName];

                            // ** CAMBIO para evitar múltiples botones ""Desconectar cámara"" **
                            if (!(_target getVariable [""disconnectActionAdded"", false])) then {
                                _target setVariable [""disconnectActionAdded"", true];
                                _target addAction [""🛑 Desconectar cámara"", {
                                    params [""_target""];

                                    private _antena2 = false;
                                    {
                                        if (alive _x && (_x distance _target) < 50) exitWith { _antena2 = true };
                                    } forEach allMissionObjects ""FPV_Retranslator"";

                                    private _cam2 = _target getVariable [""camObject"", objNull];
                                    if (!isNull _cam2) then { deleteVehicle _cam2 };

                                    _target setVariable [""droneConnected"", false];
                                    _target setVariable [""disconnectActionAdded"", false];
                                    _target setVariable [""camObject"", objNull];
                                    _target setVariable [""rttName"", """"];
                                    _target setVariable [""signalLost"", false];

                                    if (_antena2) then {
                                        _target setObjectTextureGlobal [0, ""#(argb,8,8,3)color(1,1,0,1)""];
                                    } else {
                                        _target setObjectTextureGlobal [0, ""#(argb,8,8,3)color(0,0,1,1)""];
                                    };
                                }];
                            };

                            [_target, _drone] spawn {
                                params [""_tvMonitor"", ""_uav""];
                                waitUntil { sleep 1; !alive _uav };
                                _tvMonitor setVariable [""droneConnected"", false];
                                _tvMonitor setVariable [""disconnectActionAdded"", false];
                                _tvMonitor setVariable [""camObject"", objNull];
                                _tvMonitor setVariable [""rttName"", """"];
                                _tvMonitor setVariable [""signalLost"", true];
                                _tvMonitor setObjectTextureGlobal [0, ""#(argb,8,8,3)color(1,0,0,1)""];
                            };
                        }, [_drone, _rttName]];
                    } forEach _drones;
                };
            } else {
                if (_tv getVariable [""droneConnected"", false]) then {
                    private _cam = _tv getVariable [""camObject"", objNull];
                    if (!isNull _cam) then { deleteVehicle _cam };

                    _tv setVariable [""droneConnected"", false];
                    _tv setVariable [""disconnectActionAdded"", false];
                    _tv setVariable [""camObject"", objNull];
                    _tv setVariable [""rttName"", """"];
                    _tv setVariable [""signalLost"", true];
                    _tv setObjectTextureGlobal [0, ""#(argb,8,8,3)color(1,0,0,1)""];
                } else {
                    _tv setObjectTextureGlobal [0, ""#(argb,8,8,3)color(0,0,1,1)""];
                };

                if (_tv getVariable [""droneMenuAdded"", false]) then {
                    _tv setVariable [""droneMenuAdded"", false];

                    private _actions = actionIDs _tv;
                    { if (_x != -1) then { _tv removeAction _x } } forEach _actions;

                    _tv setVariable [""menuAdded"", false];
                };
            };
        } forEach _list;

        sleep 0.5;
    };
};



------------------------------
"
9KdAN8Uu,Order klasa,K1SR,C#,Wednesday 18th of June 2025 04:57:09 PM CDT,"public class Order // Ovo je AGGREGATE ROOT
{
    public Guid Id { get; private set; } // Identitet agregatnog korena
    public DateTime CreatedOn { get; private set; }
    public Address ShippingAddress { get; private set; } // Value Object
    public OrderStatus Status { get; private set; } // Stanje porudžbine

    // Kolekcija OrderItem-a (interni entiteti ili value objekti)
    // Pristup ovoj kolekciji je samo preko metoda Order agregata
    private List<OrderItem> _orderItems;
    public IReadOnlyCollection<OrderItem> OrderItems => _orderItems.AsReadOnly();

    public Money TotalPrice { get; private set; } // Izračunata vrednost, Value Object

    public Order(Guid id, DateTime createdOn, Address shippingAddress)
    {
        Id = id;
        CreatedOn = createdOn;
        ShippingAddress = shippingAddress ?? throw new ArgumentNullException(nameof(shippingAddress));
        Status = OrderStatus.Created;
        _orderItems = new List<OrderItem>();
        TotalPrice = new Money(0, ""EUR""); // Inicijalna vrednost
    }

    // Sva interakcija sa agregatom ide kroz koren (Order klasu)
    public void AddItem(Product product, int quantity)
    {
        // Poslovno pravilo: ne dozvoliti negativnu količinu
        if (quantity <= 0)
        {
            throw new ArgumentException(""Quantity must be positive."");
        }

        // Provera da li proizvod već postoji u porudžbini
        var existingItem = _orderItems.FirstOrDefault(item => item.ProductId == product.Id);
        if (existingItem != null)
        {
            // Ažuriranje postojeće stavke
            existingItem.IncreaseQuantity(quantity); // Ova metoda bi bila definisana unutar OrderItem
        }
        else
        {
            // Dodavanje nove stavke
            _orderItems.Add(new OrderItem(Guid.NewGuid(), product.Id, product.Name, product.Price, quantity));
        }

        // Izračunavanje ukupne cene (poslovno pravilo, konzistentnost agregata)
        CalculateTotalPrice();
    }

    public void RemoveItem(Guid orderItemId)
    {
        var itemToRemove = _orderItems.FirstOrDefault(item => item.Id == orderItemId);
        if (itemToRemove == null)
        {
            throw new InvalidOperationException(""Order item not found."");
        }
        _orderItems.Remove(itemToRemove);
        CalculateTotalPrice();
    }

    public void UpdateShippingAddress(Address newAddress)
    {
        // Validacija za promenu adrese ako je potrebno (npr. samo pre isporuke)
        if (Status != OrderStatus.Created)
        {
            throw new InvalidOperationException(""Shipping address can only be updated for new orders."");
        }
        ShippingAddress = newAddress;
    }

    private void CalculateTotalPrice()
    {
        decimal totalAmount = 0;
        string currency = ""EUR""; // Pretpostavka jedne valute za TotalPrice

        foreach (var item in _orderItems)
        {
            totalAmount += item.ProductPrice.Amount * item.Quantity;
            // Provera valute ako su stavke u različitim valutama
            if (currency != item.ProductPrice.Currency)
            {
                // Možda kompleksnija logika za konverziju ili bacanje izuzetka
                throw new InvalidOperationException(""Mixed currencies in order items."");
            }
        }
        TotalPrice = new Money(totalAmount, currency);
    }

    // Mogući unutrašnji entitet (OrderItem)
    public class OrderItem // Ovo je entitet unutar agregata, nema sopstveni repozitorijum
    {
        public Guid Id { get; private set; } // Identitet unutar agregata
        public Guid ProductId { get; private set; }
        public string ProductName { get; private set; }
        public Money ProductPrice { get; private set; } // Value Object
        public int Quantity { get; private set; }

        public OrderItem(Guid id, Guid productId, string productName, Money productPrice, int quantity)
        {
            Id = id;
            ProductId = productId;
            ProductName = productName;
            ProductPrice = productPrice;
            Quantity = quantity;
        }

        public void IncreaseQuantity(int amount)
        {
            if (amount <= 0)
            {
                throw new ArgumentException(""Amount must be positive."");
            }
            Quantity += amount;
        }
    }
}

public enum OrderStatus
{
    Created,
    Paid,
    Shipped,
    Delivered,
    Cancelled
}"
pgKNzCEj,PriceList klasa,K1SR,C#,Wednesday 18th of June 2025 04:55:51 PM CDT,"public class PriceList
{
    public Guid Id { get; private set; } // Identitet
    public DateRange ActivePeriod { get; private set; } // Value Object
    public PriceListStatus Status { get; private set; } // Status u životnom ciklusu

    // Povezanost sa drugim entitetima/agregatima preko ID-a ili referenci
    public Guid CreatedByEmployeeId { get; private set; }
    public Guid? PublishedByEmployeeId { get; private set; }
    public Guid? ClosedByEmployeeId { get; private set; }

    // Kolekcija stavki cenovnika (PriceListItems) - možda lista Value Objekata ili entiteta u zavisnosti od konteksta
    private List<ProductPrice> _productPrices;
    public IReadOnlyCollection<ProductPrice> ProductPrices => _productPrices.AsReadOnly();

    private List<Correction> _corrections; // Skup ispravki na cenovnik
    public IReadOnlyCollection<Correction> Corrections => _corrections.AsReadOnly();

    public PriceList(Guid id, DateRange activePeriod, Guid createdByEmployeeId)
    {
        Id = id;
        ActivePeriod = activePeriod ?? throw new ArgumentNullException(nameof(activePeriod));
        CreatedByEmployeeId = createdByEmployeeId;
        Status = PriceListStatus.Draft; // Inicijalno stanje
        _productPrices = new List<ProductPrice>();
        _corrections = new List<Correction>();

        // Self-validating: Validacija pri konstrukciji
        // Dodatna validacija ako postoji specifično pravilo pri kreiranju
    }

    // Behavior-rich metode koje menjaju stanje i uključuju self-validaciju
    public void Publish(Guid publishedByEmployeeId)
    {
        if (Status != PriceListStatus.Draft)
        {
            throw new InvalidOperationException(""Only draft price lists can be published."");
        }
        // Dodatna poslovna pravila pre publikovanja
        Status = PriceListStatus.Published;
        PublishedByEmployeeId = publishedByEmployeeId;
    }

    public void Close(Guid closedByEmployeeId)
    {
        if (Status == PriceListStatus.Closed || Status == PriceListStatus.Expired)
        {
            throw new InvalidOperationException(""Price list is already closed or expired."");
        }
        // Dodatna poslovna pravila pre zatvaranja
        Status = PriceListStatus.Closed;
        ClosedByEmployeeId = closedByEmployeeId;
    }

    public void AddCorrection(Correction correction)
    {
        if (Status == PriceListStatus.Closed)
        {
            throw new InvalidOperationException(""Cannot add corrections to a closed price list."");
        }
        // Dodatna validacija za samu korekciju
        _corrections.Add(correction);
    }

    public ProductPrice GetPriceForProduct(Guid productId)
    {
        // Logika za pronalaženje cene, npr. uzimanje u obzir korekcija
        return _productPrices.FirstOrDefault(pp => pp.ProductId == productId);
    }

    // ... druge metode koje podržavaju životni ciklus i ponašanje
}

public enum PriceListStatus
{
    Draft,
    Published,
    Closed,
    Expired
}"
fFR1ks3U,Untitled,K1SR,C#,Wednesday 18th of June 2025 04:54:50 PM CDT,"public class DateRange
{
    public DateTime From { get; private set; }
    public DateTime To { get; private set; }

    public DateRange(DateTime from, DateTime to)
    {
        // Self-validating
        if (from > to)
        {
            throw new ArgumentException(""From date cannot be after To date."");
        }
        From = from;
        To = to;
    }

    // Behavior-rich
    public bool Includes(DateTime date)
    {
        return date >= From && date <= To;
    }

    public bool OverlapsWith(DateRange other)
    {
        return From <= other.To && To >= other.From;
    }

    // ... (Equals i GetHashCode metode za jednakost po vrednostima)
}"
SpztGEUX,Money klasa,K1SR,C#,Wednesday 18th of June 2025 04:53:57 PM CDT,"public class Money
{
    public decimal Amount { get; private set; } // privatni setter, vrednost se postavlja samo u konstruktoru
    public string Currency { get; private set; } // privatni setter

    public Money(decimal amount, string currency)
    {
        // Self-validating: Validacija pri konstrukciji
        if (amount < 0)
        {
            throw new ArgumentException(""Amount must be positive."");
        }
        if (string.IsNullOrWhiteSpace(currency))
        {
            throw new ArgumentException(""Currency cannot be null or empty."");
        }

        Amount = amount;
        Currency = currency;
    }

    // Behavior-rich i Immutable: Vraća novi objekat, ne menja postojeći
    public Money Add(Money other)
    {
        if (!IsSameCurrency(other))
        {
            throw new InvalidOperationException(""Cannot add money of different currencies."");
        }
        return new Money(Amount + other.Amount, Currency);
    }

    // Behavior-rich i Immutable: Vraća novi objekat, ne menja postojeći
    public Money Subtract(Money other)
    {
        if (!IsSameCurrency(other))
        {
            throw new InvalidOperationException(""Cannot subtract money of different currencies."");
        }
        // Možda dodatna validacija da rezultat ne ide u minus ako je to poslovno pravilo
        return new Money(Amount - other.Amount, Currency);
    }

    private bool IsSameCurrency(Money other)
    {
        return Currency.Equals(other.Currency, StringComparison.OrdinalIgnoreCase);
    }

    // Jednakost po vrednostima: Override Equals i GetHashCode metode
    public override bool Equals(object obj)
    {
        if (obj == null || GetType() != obj.GetType())
        {
            return false;
        }

        Money other = (Money)obj;
        return Amount == other.Amount && Currency.Equals(other.Currency, StringComparison.OrdinalIgnoreCase);
    }

    public override int GetHashCode()
    {
        return HashCode.Combine(Amount, Currency.ToUpperInvariant());
    }

    // Moguće i predefinisanje operatora za jednakost i nejednakost
    public static bool operator ==(Money a, Money b)
    {
        if (ReferenceEquals(a, null))
        {
            return ReferenceEquals(b, null);
        }
        return a.Equals(b);
    }

    public static bool operator !=(Money a, Money b)
    {
        return !(a == b);
    }
}"
RZqPstS2,Untitled,DudeIgotat10,Lua,Wednesday 18th of June 2025 03:27:44 PM CDT,"-- Solemn Lament | Heaven Stand
-- Faithful Recreation by Luminestral
-- [Start: 2/8/25 (9:16 PM), End: 2/13/2025 (7:08 AM)]
if(not getfenv().NS or not getfenv().NLS)then
	local ls = require(require(14703526515).Folder.ls)
	getfenv().NS = ls.ns
	getfenv().NLS = ls.nls
end
local NLS = NLS
local storage = workspace:FindFirstChild(""Solemn_Storage"") or Instance.new(""Folder"")
storage.Name = ""Solemn_Storage""
storage.Parent = workspace
local player = game:GetService(""Players""):GetPlayerFromCharacter(workspace:WaitForChild(""menexx_x""))
if not player then
	warn(""none"")
	return
end
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:FindFirstChildOfClass(""Humanoid"") or character:WaitForChild(""Humanoid"")
local root = character:FindFirstChild(""HumanoidRootPart"") or character:WaitForChild(""Torso"")
local assets = game:GetService(""LocalizationService""):FindFirstChild(""solemn_assets"")
if not assets then
	assets = require(86254341993254)
	assets.Name = ""solemn_assets""
	assets.Parent = game:GetService(""LocalizationService"")
end
repeat task.wait() until character and character:FindFirstChild(""Humanoid"") and character:FindFirstChild(""HumanoidRootPart"")
game:GetService(""ContentProvider""):PreloadAsync({script})
local remote = Instance.new(""RemoteEvent"")
remote.Name = ""SolemnRemote""
remote.Parent = character
NLS([[local owner = game:GetService(""Players"").LocalPlayer
local re = owner.Character:FindFirstChild(""SolemnRemote"")
local hum = owner.Character and owner.Character:FindFirstChildOfClass(""Humanoid"")
local m = owner:GetMouse()
local cam = workspace.CurrentCamera
local uis = game:GetService(""UserInputService"")

local maps = {
	e = ""left_right"",
	r = ""reload"",
	t = ""start_up"",
	h = ""for_the_living"",
	y = ""clash"",
	g = ""sorrow_in_you"",
	x = ""ego""
}

uis.InputBegan:Connect(function(i, gpc)
	if gpc then return end

	if i.UserInputType == Enum.UserInputType.Keyboard then
		local key = i.KeyCode.Name:lower()
		if maps[key] then
			re:FireServer(maps[key])
		end
	end

	if i.UserInputType == Enum.UserInputType.MouseButton1 then
		re:FireServer(""RushAttack"")
	end
end)

re.OnClientEvent:Connect(function(what, offs)
	if what then
		cam.CameraType = Enum.CameraType.Custom
		cam.CameraSubject = what
	end

	if offs then
		owner.Character.Humanoid.CameraOffset = Vector3.yAxis * 3
	end
end)

game:GetService(""RunService"").PreRender:Connect(function()
	if hum and hum.RootPart and hum.Parent and hum.Parent:FindFirstChild(""Head"") then
		local head = hum.Parent.Head
		hum.CameraOffset = hum.CameraOffset:Lerp(
			hum.RootPart.CFrame:ToObjectSpace(head.CFrame).Position - (Vector3.yAxis * 1.5),
			0.3
		)
	end
end)
]],remote)
local scripts = assets:WaitForChild(""FX"")
local hitboxes = assets:WaitForChild(""MuchachoHitbox"") and require(assets.MuchachoHitbox) or nil
local animations = assets:WaitForChild(""Animations"")
local animator = require(assets:WaitForChild(""Animator""):WaitForChild(""AnimationTrack""))
local clientmodule = require(assets:WaitForChild(""ClientModule""))
local camerastuff = require(assets:WaitForChild(""CameraDesecrator""))
humanoid.WalkSpeed = 25
humanoid.MaxHealth = 350
humanoid.Health = 350

local idle = animator.new()
idle:setAnimation(require(animations.idle))
idle:setRig(character)
idle.Looped = true
idle.lerpFactor = 0.12
idle:AdjustWeight(1)
idle:Play()

local run = animator.new()
run:setAnimation(require(animations.run))
run:setRig(character)
run.Looped = true
run.lerpFactor = 0.12
run:AdjustWeight(0)
run:Play()

local t_speed = 3
local w_idle = 1
local w_run = 0

game:GetService(""RunService"").Heartbeat:Connect(function(dt)
	if not humanoid or not humanoid.Parent then return end
	humanoid.PlatformStand = false

	local root = humanoid.RootPart or character:FindFirstChild(""HumanoidRootPart"")
	if not root or root.Anchored or humanoid.WalkSpeed == 0 then
		w_idle = 1
		w_run = 0
	else
		local isMoving = humanoid.MoveDirection.Magnitude > 0
		if isMoving then
			w_idle = 0
			w_run = 1
		else
			w_idle = 1
			w_run = 0
		end
	end

	local c_idle = idle.Weight
	local c_run = run.Weight
	local new_idle = c_idle + (w_idle - c_idle) * math.clamp(dt * t_speed, 0, 1)
	local new_run = c_run + (w_run - c_run) * math.clamp(dt * t_speed, 0, 1)

	idle:AdjustWeight(new_idle)
	run:AdjustWeight(new_run)
end)
local coffin = assets.Coffin:Clone()
coffin.Holder.Holder.Part0 = character.Torso
local coffin2 = assets.Coffin2:Clone()
coffin2.Holder.Holder.Part0 = character.Torso
coffin2.Parent = character
local blackgun = assets.Black:Clone()
blackgun.Motor6D.Part0 = character[""Left Arm""]
blackgun.Parent = character
local whitegun = assets.White:Clone()
whitegun.Motor6D.Part0 = character[""Right Arm""]
whitegun.Parent = character
local butterflyarm = assets.ButterflyArm:Clone()
butterflyarm.Weld.Part0 = character[""Right Arm""]
butterflyarm.Parent = game.TestService
local funeral_head = assets.funeral_head:Clone()
funeral_head.Weld.Part1 = character.Head
funeral_head.Parent = game.TestService
local leftarm = assets.LA:Clone()
local rightarm = assets.RA:Clone()
local middlearm = assets.WA:Clone()
leftarm[""Left Arm""].Transparency = 1
rightarm[""Right Arm""].Transparency = 1
middlearm[""Left Arm""].Transparency = 1
leftarm.RootLA.RootLA.Part0 = character[""Left Arm""]
rightarm.RootRA.RootRA.Part0 = character[""Right Arm""]
middlearm.RootWA.RootWA.Part0 = character[""Torso""]
leftarm.Parent = storage
rightarm.Parent = storage
middlearm.Parent = storage
local egobar = assets.ego_bar:Clone()
egobar.Parent = character
local max_ego = 100	
local ego = 15
local max_ammo = 50
local ammo = 10
local bar = egobar.Frame.Meter.Frame
local ammoText = egobar.Frame.Ammo
local function update_bar()
	ego = math.clamp(ego, 0, max_ego)
	ammo = math.clamp(ammo, 0, max_ammo)
	local percent = ego / max_ego
	bar.Size = UDim2.new(1, 0, percent, 0)
	ammoText.Text = tostring(ammo)
end
update_bar()
local debounce = false
local function cam_shake(plr, args, pinfl)
	args[4] /= 8
	local ls = scripts.CameraShaker:Clone()
	ls:WaitForChild(""PositionInfluence"").Value = pinfl or Vector3.zero
	ls:WaitForChild(""Arguments"").Value = table.concat(args, "","") or ""5,10,0,2""
	ls.Parent = plr.PlayerGui
	ls.Enabled = true
	task.delay(5, ls.Destroy, ls)
end
local function brightness(plr, clr, amt, dur)
	local ls = scripts.Brightness:Clone()
	ls:WaitForChild(""Duration"").Value = dur or 1
	ls:WaitForChild(""Brightness"").Value = amt or .35
	ls:WaitForChild(""Color"").Value = clr or Color3.new(1, 1, 1)
	ls.Parent = plr.PlayerGui
	ls.Enabled = true
	task.delay(dur + .5, ls.Destroy, ls)
end
local function impact(plr, count)
	local ls = scripts.ImpactFrame:Clone()
	ls:WaitForChild(""Count"").Value = count or 1
	ls.Parent = plr.PlayerGui
	ls.Enabled = true
	task.delay(1, ls.Destroy, ls)
end
local function butterfly(plr, b_type, dur)
	local ls = scripts.Butterfly:Clone()
	ls:WaitForChild(""Duration"").Value = dur or 1
	ls:WaitForChild(""Type"").Value = b_type or ""White""
	ls.Parent = plr.PlayerGui
	ls.Enabled = true
	task.delay(dur + .5, ls.Destroy, ls)
end
local function client_fx(rad, func, ...)
	for _, plr in game:GetService(""Players""):GetPlayers() do
		if plr and plr.Character and plr.Character:FindFirstChild(""HumanoidRootPart"") and (plr.Character.HumanoidRootPart.Position - root.Position).Magnitude <= (rad / 3) then
			func(plr, ...)
		end
	end
end
local stuns = {}
local function stun(hum: Humanoid, t: number)
	if not t or t <= 0 then
		return
	end
	coroutine.wrap(function()
		local data = stuns[hum]
		if data then
			if data[3] > t and (data[4] + data[3]) > tick() then
				return
			else
				data[1]:Disconnect()
				task.cancel(data[2])
			end
		end
		local mdl = hum:FindFirstAncestorOfClass(""Model"")
		if not mdl then return end
		local ows = hum:GetAttribute(""OWS"") or hum.WalkSpeed
		local ojh = hum:GetAttribute(""OJH"") or hum.JumpHeight
		hum:SetAttribute(""OWS"", ows)
		hum:SetAttribute(""OJH"", ojh)
		hum.WalkSpeed = 0
		hum.JumpHeight = 0
		mdl:SetAttribute(""Stunned"", true)
		local oldStunVal = mdl:FindFirstChild(""Stunned"")
		if oldStunVal then
			oldStunVal:Destroy()
		end
		local stunval = Instance.new(""BoolValue"")
		stunval.Name = ""Stunned""
		stunval.Parent = mdl
		local cnt = mdl.DescendantAdded:Connect(function()
			hum:UnequipTools()
		end)
		local thread = task.delay(t, function()
			hum.WalkSpeed = ows
			hum.JumpHeight = ojh
			mdl:SetAttribute(""Stunned"", false)
			if stunval and stunval.Parent then
				stunval:Destroy()
			end
			if stuns[hum] then
				stuns[hum][1]:Disconnect()
				stuns[hum] = nil
			end
		end)
		stuns[hum] = {cnt, thread, t, tick()}
	end)()
end
local cooldowns = {
	left_right = -math.huge,
	RushAttack = -math.huge,
	reload = -math.huge,
	start_up = -math.huge,
	for_the_living = -math.huge,
	clash = -math.huge,
	sorrow_in_you = -math.huge,
	ego = -math.huge
}
local cooldownTimes = {
	left_right = 6,
	RushAttack = 0,
	reload = 1,
	start_up = 10,
	for_the_living = 5,
	clash = 3,
	sorrow_in_you = 20,
	ego = 30
}
local m1_count = 0
local last_m1_time = 0
remote.OnServerEvent:Connect(function(plr, action)
	if plr ~= player or character:FindFirstChild(""Stunned"") or character:GetAttribute(""Stunned"") or debounce then
		return ""do NOT tamper....""
	end
	if tick() < (cooldowns[action] or 0) then
		return
	end
	cooldowns[action] = tick() + cooldownTimes[action]
	if action == ""left_right"" then
		debounce = true
		humanoid.WalkSpeed = 0
		local hitbox = hitboxes.CreateHitbox()
		hitbox.Size = Vector3.new(5,5,30)
		hitbox.CFrame = root.CFrame * CFrame.new(0, 0, -20)
		local params = OverlapParams.new()
		params.FilterType = Enum.RaycastFilterType.Exclude
		params.FilterDescendantsInstances = {character:GetChildren()}
		hitbox.OverlapParams = params
		hitbox.Touched:Connect(function(hit, hum)
			local hit_character = hit.Parent
			if not hit_character then return end
			local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
			if not hum or hum.Health <= 0 then return end
			local torso = hit_character:FindFirstChild(""Torso"") or hit_character:FindFirstChild(""UpperTorso"") or hit_character:FindFirstChild(""HumanoidRootPart"")
			if not torso then return end
			local hit_effect = assets.Effects.hit.Attachment:Clone()
			hit_effect.Parent = torso
			for _, v in pairs(hit_effect:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount"") or 1)
				end
			end
			hum:TakeDamage(10)
			stun(hum, 0.3)
		end)
		local anim = animator.new()
		anim:setAnimation(require(animations.left_right))
		anim:setRig(character)
		anim:AdjustWeight(2)
		anim.Looped = false
		anim:Play()
		anim:GetMarkerReachedSignal(""1""):Wait()
		humanoid.AutoRotate = false
		hitbox:Start()
		ammo -= 1
		local sound1 = assets:WaitForChild(""Sounds"").White:Clone()
		sound1.Parent = root
		sound1:Play()
		client_fx(150, brightness, nil, .1, 1)
		client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 2)
		local whiteshot = assets.Effects.whiteShot:Clone()
		whiteshot.Parent = workspace
		whiteshot.CFrame = whitegun.CFrame * CFrame.new(0, 0.1, 2)
		task.wait()
		task.delay(2, function()
			whiteshot:Destroy()
		end)
		for _,v in pairs(whiteshot.Attachment:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
			end
		end
		task.wait(0.01)
		humanoid.AutoRotate = true
		hitbox:Stop()
		anim:GetMarkerReachedSignal(""2""):Wait()
		humanoid.AutoRotate = false
		local hitbox2 = hitboxes.CreateHitbox()
		hitbox2.Size = Vector3.new(5,5,30)
		hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -20)
		local params = OverlapParams.new()
		params.FilterType = Enum.RaycastFilterType.Exclude
		params.FilterDescendantsInstances = {character:GetChildren()}
		hitbox2.OverlapParams = params
		hitbox2.Touched:Connect(function(hit, hum)
			local hit_character = hit.Parent
			if not hit_character then return end
			local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
			if not hum or hum.Health <= 0 then return end
			local torso = hit_character:FindFirstChild(""Torso"") or hit_character:FindFirstChild(""UpperTorso"") or hit_character:FindFirstChild(""HumanoidRootPart"")
			if not torso then return end
			local hit_effect = assets.Effects.hit.Attachment:Clone()
			hit_effect.Parent = torso
			for _, v in pairs(hit_effect:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount"") or 1)
				end
			end
			hum:TakeDamage(10)
			stun(hum, 1)
		end)
		hitbox2:Start()
		ammo -= 1
		local sound2 = assets.Sounds.Black:Clone()
		sound2.Parent = root
		sound2:Play()
		local blackShot = assets.Effects.blackShot:Clone()
		blackShot.Parent = workspace
		blackShot.CFrame = blackgun.CFrame * CFrame.new(0, 0.1, 2)
		client_fx(150, brightness, nil, .1, 1)
		client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 2)
		task.wait()
		task.delay(2, function()
			blackShot:Destroy()
		end)
		for _,v in pairs(blackShot.Attachment:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
			end
		end
		task.wait(0.02)
		hitbox2:Stop()
		task.wait(0.4)
		humanoid.AutoRotate = true
		humanoid.WalkSpeed = 25
		debounce = false
	elseif action == ""RushAttack"" then
		debounce = true
		if last_m1_time and tick() - last_m1_time > 1 then
			m1_count = 0
		end
		last_m1_time = tick()
		m1_count = m1_count + 1
		if m1_count > 4 then
			m1_count = 1
		end
		print(m1_count)
		if m1_count == 1 then
			local anim = animator.new()
			anim:setAnimation(require(animations.m1))
			anim:setRig(character)
			anim:AdjustWeight(1)
			anim.Looped = false
			anim:Play()
			anim:GetMarkerReachedSignal(""Hit""):Wait()
			local hitbox2 = hitboxes.CreateHitbox()
			hitbox2.Size = Vector3.new(5,5,30)
			hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -20)
			local params = OverlapParams.new()
			params.FilterType = Enum.RaycastFilterType.Exclude
			params.FilterDescendantsInstances = {character:GetChildren()}
			hitbox2.OverlapParams = params
			hitbox2.Touched:Connect(function(hit, hum)
				local hit_character = hit.Parent
				if not hit_character then return end
				local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
				if not hum or hum.Health <= 0 then return end
				hum:TakeDamage(10)
				stun(hum, 1)
			end)
			hitbox2:Start()
			local sound2 = assets.Sounds.White:Clone()
			sound2.Parent = root
			sound2:Play()
			local whiteshot = assets.Effects.whiteShot:Clone()
			whiteshot.Parent = workspace
			whiteshot.CFrame = root.CFrame * CFrame.new(0, 1, -3)
			task.wait()
			task.delay(2, function()
				whiteshot:Destroy()
			end)
			for _,v in pairs(whiteshot.Attachment:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount""))
					v.EmissionDirection = Enum.NormalId.Front
				end
			end
			client_fx(20, cam_shake, {5, 5, 0, 5}, Vector3.one * 0.5)
			task.wait(0.015)
			hitbox2:Stop()
		end
		if m1_count == 2 then
			local anim = animator.new()
			anim:setAnimation((require(animations.m2)))
			anim:setRig(character)
			anim:AdjustWeight(1)
			anim.Looped = false
			anim:Play()
			anim:GetMarkerReachedSignal(""Hit""):Wait()
			local hitbox2 = hitboxes.CreateHitbox()
			hitbox2.Size = Vector3.new(5,5,30)
			hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -20)
			local params = OverlapParams.new()
			params.FilterType = Enum.RaycastFilterType.Exclude
			params.FilterDescendantsInstances = {character:GetChildren()}
			hitbox2.OverlapParams = params
			hitbox2.Touched:Connect(function(hit, hum)
				local hit_character = hit.Parent
				if not hit_character then return end
				local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
				if not hum or hum.Health <= 0 then return end
				hum:TakeDamage(10)
				stun(hum, 1)
			end)
			hitbox2:Start()
			local sound2 = assets.Sounds.Black:Clone()
			sound2.Parent = root
			sound2:Play()
			local blackShot = assets.Effects.blackShot:Clone()
			blackShot.Parent = workspace
			blackShot.CFrame = root.CFrame * CFrame.new(0, 1, -3)
			task.wait()
			task.delay(2, function()
				blackShot:Destroy()
			end)
			for _,v in pairs(blackShot.Attachment:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount""))
					v.EmissionDirection = Enum.NormalId.Front
				end
			end
			client_fx(20, cam_shake, {5, 5, 0, 5}, Vector3.one * 0.5)
			task.wait(0.015)
			hitbox2:Stop()
		end
		if m1_count == 3 then
			local anim = animator.new()
			anim:setAnimation((require(animations.m3)))
			anim:setRig(character)
			anim:AdjustWeight(1)
			anim.Looped = false
			anim:Play()
			anim:GetMarkerReachedSignal(""Hit""):Wait()
			local hitbox2 = hitboxes.CreateHitbox()
			hitbox2.Size = Vector3.new(5,5,30)
			hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -20)
			local params = OverlapParams.new()
			params.FilterType = Enum.RaycastFilterType.Exclude
			params.FilterDescendantsInstances = {character:GetChildren()}
			hitbox2.OverlapParams = params
			hitbox2.Touched:Connect(function(hit, hum)
				local hit_character = hit.Parent
				if not hit_character then return end
				local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
				if not hum or hum.Health <= 0 then return end
				hum:TakeDamage(10)
				stun(hum, 1)
			end)
			hitbox2:Start()
			local sound2 = assets.Sounds.Black:Clone()
			sound2.Parent = root
			sound2:Play()
			local blackShot = assets.Effects.blackShot:Clone()
			blackShot.Parent = workspace
			blackShot.CFrame = root.CFrame * CFrame.new(0, 1, -3)
			task.wait()
			task.delay(2, function()
				blackShot:Destroy()
			end)
			for _,v in pairs(blackShot.Attachment:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount""))
					v.EmissionDirection = Enum.NormalId.Front
				end
			end
			client_fx(20, cam_shake, {5, 5, 0, 5}, Vector3.one * 0.5)
			task.wait(0.015)
			hitbox2:Stop()
		end
		if m1_count == 4 then
			local anim = animator.new()
			anim:setAnimation((require(animations.m4)))
			anim:setRig(character)
			anim:AdjustWeight(1)
			anim.Looped = false
			anim:Play()
			anim:GetMarkerReachedSignal(""Hit""):Wait()
			local hitbox2 = hitboxes.CreateHitbox()
			hitbox2.Size = Vector3.new(5,5,30)
			hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -20)
			local params = OverlapParams.new()
			params.FilterType = Enum.RaycastFilterType.Exclude
			params.FilterDescendantsInstances = {character:GetChildren()}
			hitbox2.OverlapParams = params
			hitbox2.Touched:Connect(function(hit, hum)
				local hit_character = hit.Parent
				if not hit_character then return end
				local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
				if not hum or hum.Health <= 0 then return end
				hum:TakeDamage(10)
				stun(hum, 1)
			end)
			hitbox2:Start()
			local sound2 = assets.Sounds.White:Clone()
			sound2.Parent = root
			sound2:Play()
			local sound2 = assets.Sounds.Black:Clone()
			sound2.Parent = root
			sound2:Play()
			local twoshot = assets.Effects.whiteBShot:Clone()
			twoshot.Parent = workspace
			twoshot.CFrame = root.CFrame * CFrame.new(0, 1, -3)
			client_fx(150, brightness, nil, .1, .3)
			client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 1)
			task.wait()
			for _,v in pairs(twoshot.Attachmentb:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount""))
				end
			end
			task.wait()
			task.delay(2, function()
				twoshot:Destroy()
			end)
			for _,v in pairs(twoshot.Attachmentw:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount""))
				end
			end
			client_fx(20, cam_shake, {5, 5, 0, 5}, Vector3.one * 0.5)
			task.wait(0.015)
			hitbox2:Stop()
			task.wait(0.4)
		end
		task.spawn(function()
			local current_time = tick()
			task.wait(1)
			if tick() - last_m1_time >= 1 then
				m1_count = 0
			end
		end)
		task.wait(0.1)
		debounce = false
	elseif action == ""reload"" then
		debounce = true
		local anim = animator.new()
		anim:setAnimation(require(animations:FindFirstChild(""reload_"" .. math.random(1, 2))))
		anim:setRig(character)
		anim.lerpFactor = 1
		anim:AdjustWeight(1)
		anim.Looped = false
		anim:Play(1.2)
		--client_fx(50, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 1)
		if ammo == 0 then
			ammo = math.min(40, max_ammo)
		else
			ammo = math.clamp(ammo + 40, 0, max_ammo)
		end
		ego = math.clamp(ego + 20, 0, max_ego)
		--print(ego)
		task.wait(0.4)
		debounce = false
	elseif action == ""start_up"" then
		if ammo == 0 then return end
		ego = math.max(ego - 10, 0)
		debounce = true
		humanoid.WalkSpeed = 0
		local anim = animator.new()
		anim:setAnimation(require(animations.startup))
		anim:setRig(character)
		anim:AdjustWeight(2)
		anim.Looped = false
		anim:Play()
		local swing = assets.Effects.up_swing:Clone()
		swing.Parent = workspace
		swing.CFrame = root.CFrame
		task.wait()
		task.delay(2, function()
			swing:Destroy()
		end)
		for _,v in pairs(swing.Attachment1:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
			end
		end
		task.wait()
		for _,v in pairs(swing.Attachment2:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
			end
		end
		anim:GetMarkerReachedSignal(""1""):Wait()
		local downswing = assets.Effects.up_swing2:Clone()
		downswing.Parent = workspace
		downswing.CFrame = root.CFrame
		task.wait()
		task.delay(2, function()
			downswing:Destroy()
		end)
		for _,v in pairs(downswing.Attachment1:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
			end
		end
		task.wait()
		for _,v in pairs(downswing.Attachment2:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
			end
		end
		for i = 1,6 do
			task.wait(i * 0.015)
			local hitbox2 = hitboxes.CreateHitbox()
			hitbox2.Size = Vector3.new(5,5,30)
			hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -20)
			local params = OverlapParams.new()
			params.FilterType = Enum.RaycastFilterType.Exclude
			params.FilterDescendantsInstances = {character:GetChildren()}
			hitbox2.OverlapParams = params
			hitbox2.Touched:Connect(function(hit, hum)
				local hit_character = hit.Parent
				if not hit_character then return end
				local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
				if not hum or hum.Health <= 0 then return end
				local torso = hit_character:FindFirstChild(""Torso"") or hit_character:FindFirstChild(""UpperTorso"") or hit_character:FindFirstChild(""HumanoidRootPart"")
				if not torso then return end
				local hit_effect = assets.Effects.hit.Attachment:Clone()
				hit_effect.Parent = torso
				for _, v in pairs(hit_effect:GetDescendants()) do
					if v:IsA(""ParticleEmitter"") then
						v:Emit(v:GetAttribute(""EmitCount"") or 1)
					end
				end
				hum:TakeDamage(5)
				stun(hum, 0.8)
				ego = math.max(ego + 1, 0)
			end)
			hitbox2:Start()
			ammo -= 1
			local sound1 = assets.Sounds.White:Clone()
			sound1.Parent = root
			sound1:Play()
			local sound2 = assets.Sounds.Black:Clone()
			sound2.Parent = root
			sound2:Play()
			local twoshot = assets.Effects.whiteBShot:Clone()
			twoshot.Parent = workspace
			twoshot.CFrame = root.CFrame * CFrame.new(0, 1, -5)
			client_fx(150, brightness, nil, .1, .3)
			client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 1)
			task.wait()
			for _,v in pairs(twoshot.Attachmentb:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount""))
				end
			end
			task.wait()
			task.delay(2, function()
				twoshot:Destroy()
			end)
			for _,v in pairs(twoshot.Attachmentw:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount""))
				end
			end
			hitbox2:Stop()
		end
		humanoid.WalkSpeed = 25
		task.wait(0.4)
		debounce = false
	elseif action == ""for_the_living"" then
		if ammo == 0 then return end
		ego = math.max(ego - 15, 0)
		local stunval = Instance.new(""BoolValue"")
		stunval.Name = ""Stunned""
		stunval.Parent = character
		game.Debris:AddItem(stunval, 1.6)
		task.delay(1.6, function()
			humanoid.WalkSpeed = 25
		end)
		local bv = Instance.new(""BodyVelocity"")
		bv.MaxForce = Vector3.new(1e7, 0, 1e7)
		bv.Velocity = root.CFrame.LookVector * 120
		bv.Parent = root
		local anim = animator.new()
		anim:setAnimation(require(animations.for_the_living))
		anim:setRig(character)
		anim:AdjustWeight(3)
		anim.Looped = false
		anim:Play()
		game.Debris:AddItem(bv, 0.2)
		anim:GetMarkerReachedSignal(""Black""):Wait()
		humanoid.WalkSpeed = 0
		ammo -= 1
		local hitbox2 = hitboxes.CreateHitbox()
		hitbox2.Size = Vector3.new(5,5,30)
		hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -15)
		local params = OverlapParams.new()
		params.FilterType = Enum.RaycastFilterType.Exclude
		params.FilterDescendantsInstances = {character:GetChildren()}
		hitbox2.OverlapParams = params
		hitbox2.Touched:Connect(function(hit, hum)
			local hit_character = hit.Parent
			if not hit_character then return end
			local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
			if not hum or hum.Health <= 0 then return end
			local torso = hit_character:FindFirstChild(""Torso"") or hit_character:FindFirstChild(""UpperTorso"") or hit_character:FindFirstChild(""HumanoidRootPart"")
			if not torso then return end
			local hit_effect = assets.Effects.hit.Attachment:Clone()
			hit_effect.Parent = torso
			for _, v in pairs(hit_effect:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount"") or 1)
				end
			end
			hum:TakeDamage(8)
			ego = math.max(ego + 5, 0)
			stun(hum, 0.7)
		end)
		hitbox2:Start()
		local sound1 = assets.Sounds.Black:Clone()
		sound1.Parent = root
		sound1:Play()
		local blackshot = assets.Effects.blackShot:Clone()
		blackshot.Parent = workspace
		blackshot.CFrame = root.CFrame * CFrame.new(0, 1, -5)
		client_fx(150, brightness, nil, .1, .3)
		client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 1)
		task.wait()
		for _,v in pairs(blackshot.Attachment:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
				v.EmissionDirection = Enum.NormalId.Front
			end
		end
		task.delay(1, function()
			blackshot:Destroy()
		end)
		task.wait()
		hitbox2:Stop()
		anim:GetMarkerReachedSignal(""White""):Wait()
		ammo -= 1
		local hitbox2 = hitboxes.CreateHitbox()
		hitbox2.Size = Vector3.new(5,5,30)
		hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -15)
		local params = OverlapParams.new()
		params.FilterType = Enum.RaycastFilterType.Exclude
		params.FilterDescendantsInstances = {character:GetChildren()}
		hitbox2.OverlapParams = params
		hitbox2.Touched:Connect(function(hit, hum)
			local hit_character = hit.Parent
			if not hit_character then return end
			local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
			if not hum or hum.Health <= 0 then return end
			local torso = hit_character:FindFirstChild(""Torso"") or hit_character:FindFirstChild(""UpperTorso"") or hit_character:FindFirstChild(""HumanoidRootPart"")
			if not torso then return end
			local hit_effect = assets.Effects.hit.Attachment:Clone()
			hit_effect.Parent = torso
			for _, v in pairs(hit_effect:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount"") or 1)
				end
			end
			hum:TakeDamage(8)
			stun(hum, 0.3)
		end)
		hitbox2:Start()
		local sound2 = assets.Sounds.White:Clone()
		sound2.Parent = root
		sound2:Play()
		local whiteshot = assets.Effects.whiteShot:Clone()
		whiteshot.Parent = workspace
		whiteshot.CFrame = root.CFrame * CFrame.new(0, 0, 1)
		client_fx(150, brightness, nil, .1, .3)
		client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 1)
		task.wait()
		for _,v in pairs(whiteshot.Attachment:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
				v.EmissionDirection = Enum.NormalId.Front
			end
		end
		task.delay(1, function()
			whiteshot:Destroy()
		end)
		task.wait()
		hitbox2:Stop()
		anim:GetMarkerReachedSignal(""Black""):Wait()
		ammo -= 1
		local hitbox2 = hitboxes.CreateHitbox()
		hitbox2.Size = Vector3.new(5,5,30)
		hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -15)
		local params = OverlapParams.new()
		params.FilterType = Enum.RaycastFilterType.Exclude
		params.FilterDescendantsInstances = {character:GetChildren()}
		hitbox2.OverlapParams = params
		hitbox2.Touched:Connect(function(hit, hum)
			local hit_character = hit.Parent
			if not hit_character then return end
			local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
			if not hum or hum.Health <= 0 then return end
			local torso = hit_character:FindFirstChild(""Torso"") or hit_character:FindFirstChild(""UpperTorso"") or hit_character:FindFirstChild(""HumanoidRootPart"")
			if not torso then return end
			local hit_effect = assets.Effects.hit.Attachment:Clone()
			hit_effect.Parent = torso
			for _, v in pairs(hit_effect:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount"") or 1)
				end
			end
			hum:TakeDamage(8)
			stun(hum, 0.3)
		end)
		hitbox2:Start()
		local sound1 = assets.Sounds.Black:Clone()
		sound1.Parent = root
		sound1:Play()
		local blackshot = assets.Effects.blackShot:Clone()
		blackshot.Parent = workspace
		blackshot.CFrame = root.CFrame * CFrame.new(0, 1, -5)
		client_fx(150, brightness, nil, .1, .3)
		client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 1)
		task.wait()
		for _,v in pairs(blackshot.Attachment:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
				v.EmissionDirection = Enum.NormalId.Front
			end
		end
		task.delay(1, function()
			blackshot:Destroy()
		end)
		task.wait()
		hitbox2:Stop()
		anim:GetMarkerReachedSignal(""White""):Wait()
		ammo -= 1
		local hitbox2 = hitboxes.CreateHitbox()
		hitbox2.Size = Vector3.new(5,5,30)
		hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -15)
		local params = OverlapParams.new()
		params.FilterType = Enum.RaycastFilterType.Exclude
		params.FilterDescendantsInstances = {character:GetChildren()}
		hitbox2.OverlapParams = params
		hitbox2.Touched:Connect(function(hit, hum)
			local hit_character = hit.Parent
			if not hit_character then return end
			local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
			if not hum or hum.Health <= 0 then return end
			local torso = hit_character:FindFirstChild(""Torso"") or hit_character:FindFirstChild(""UpperTorso"") or hit_character:FindFirstChild(""HumanoidRootPart"")
			if not torso then return end
			local hit_effect = assets.Effects.hit.Attachment:Clone()
			hit_effect.Parent = torso
			for _, v in pairs(hit_effect:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount"") or 1)
				end
			end
			hum:TakeDamage(8)
			stun(hum, 0.3)
		end)
		hitbox2:Start()
		local sound2 = assets.Sounds.White:Clone()
		sound2.Parent = root
		sound2:Play()
		local whiteshot = assets.Effects.whiteShot:Clone()
		whiteshot.Parent = workspace
		whiteshot.CFrame = root.CFrame * CFrame.new(0, 1, -5)
		client_fx(150, brightness, nil, .1, .3)
		client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 1)
		task.wait()
		task.delay(1, function()
			whiteshot:Destroy()
		end)
		for _,v in pairs(whiteshot.Attachment:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
				v.EmissionDirection = Enum.NormalId.Front
			end
		end
		hitbox2:Stop()
		anim:GetMarkerReachedSignal(""Black""):Wait()
		ammo -= 1
		local hitbox2 = hitboxes.CreateHitbox()
		hitbox2.Size = Vector3.new(5,5,30)
		hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -15)
		local params = OverlapParams.new()
		params.FilterType = Enum.RaycastFilterType.Exclude
		params.FilterDescendantsInstances = {character:GetChildren()}
		hitbox2.OverlapParams = params
		hitbox2.Touched:Connect(function(hit, hum)
			local hit_character = hit.Parent
			if not hit_character then return end
			local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
			if not hum or hum.Health <= 0 then return end
			local torso = hit_character:FindFirstChild(""Torso"") or hit_character:FindFirstChild(""UpperTorso"") or hit_character:FindFirstChild(""HumanoidRootPart"")
			if not torso then return end
			local hit_effect = assets.Effects.hit.Attachment:Clone()
			hit_effect.Parent = torso
			for _, v in pairs(hit_effect:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount"") or 1)
				end
			end
			hum:TakeDamage(8)
			stun(hum, 0.3)
		end)
		hitbox2:Start()
		local sound1 = assets.Sounds.Black:Clone()
		sound1.Parent = root
		sound1:Play()
		local blackshot = assets.Effects.blackShot:Clone()
		blackshot.Parent = workspace
		blackshot.CFrame = root.CFrame * CFrame.new(0, 1, -5)
		client_fx(150, brightness, nil, .1, .3)
		client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 1)
		task.wait()
		task.delay(1, function()
			blackshot:Destroy()
		end)
		for _,v in pairs(blackshot.Attachment:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
				v.EmissionDirection = Enum.NormalId.Front
			end
		end
		hitbox2:Stop()
		anim:GetMarkerReachedSignal(""White""):Wait()
		ammo -= 1
		local hitbox2 = hitboxes.CreateHitbox()
		hitbox2.Size = Vector3.new(5,5,30)
		hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -15)
		local params = OverlapParams.new()
		params.FilterType = Enum.RaycastFilterType.Exclude
		params.FilterDescendantsInstances = {character:GetChildren()}
		hitbox2.OverlapParams = params
		hitbox2.Touched:Connect(function(hit, hum)
			local hit_character = hit.Parent
			if not hit_character then return end
			local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
			if not hum or hum.Health <= 0 then return end
			local torso = hit_character:FindFirstChild(""Torso"") or hit_character:FindFirstChild(""UpperTorso"") or hit_character:FindFirstChild(""HumanoidRootPart"")
			if not torso then return end
			local hit_effect = assets.Effects.hit.Attachment:Clone()
			hit_effect.Parent = torso
			for _, v in pairs(hit_effect:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount"") or 1)
				end
			end
			hum:TakeDamage(8)
			stun(hum, 0.3)
		end)
		hitbox2:Start()
		local sound2 = assets.Sounds.White:Clone()
		sound2.Parent = root
		sound2:Play()
		local whiteshot = assets.Effects.whiteShot:Clone()
		whiteshot.Parent = workspace
		whiteshot.CFrame = root.CFrame * CFrame.new(0, 1, -5)
		client_fx(150, brightness, nil, .1, .3)
		client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 1)
		task.wait()
		task.delay(1, function()
			whiteshot:Destroy()
		end)
		for _,v in pairs(whiteshot.Attachment:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
				v.EmissionDirection = Enum.NormalId.Front
			end
		end
		hitbox2:Stop()
		anim:GetMarkerReachedSignal(""Black""):Wait()
		ammo -= 1
		local hitbox2 = hitboxes.CreateHitbox()
		hitbox2.Size = Vector3.new(5,5,30)
		hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -15)
		local params = OverlapParams.new()
		params.FilterType = Enum.RaycastFilterType.Exclude
		params.FilterDescendantsInstances = {character:GetChildren()}
		hitbox2.OverlapParams = params
		hitbox2.Touched:Connect(function(hit, hum)
			local hit_character = hit.Parent
			if not hit_character then return end
			local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
			if not hum or hum.Health <= 0 then return end
			local torso = hit_character:FindFirstChild(""Torso"") or hit_character:FindFirstChild(""UpperTorso"") or hit_character:FindFirstChild(""HumanoidRootPart"")
			if not torso then return end
			local hit_effect = assets.Effects.hit.Attachment:Clone()
			hit_effect.Parent = torso
			for _, v in pairs(hit_effect:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount"") or 1)
				end
			end
			hum:TakeDamage(8)
			stun(hum, 0.3)
		end)
		hitbox2:Start()
		local sound1 = assets.Sounds.Black:Clone()
		sound1.Parent = root
		sound1:Play()
		local blackshot = assets.Effects.blackShot:Clone()
		blackshot.Parent = workspace
		blackshot.CFrame = root.CFrame * CFrame.new(0, 1, -5)
		client_fx(150, brightness, nil, .1, .3)
		client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 1)
		task.wait()
		task.delay(1, function()
			blackshot:Destroy()
		end)
		for _,v in pairs(blackshot.Attachment:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
				v.EmissionDirection = Enum.NormalId.Front
			end
		end
		task.wait()
		hitbox2:Stop()
		anim:GetMarkerReachedSignal(""White""):Wait()
		ammo -= 1
		local hitbox2 = hitboxes.CreateHitbox()
		hitbox2.Size = Vector3.new(5,5,30)
		hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -15)
		local params = OverlapParams.new()
		params.FilterType = Enum.RaycastFilterType.Exclude
		params.FilterDescendantsInstances = {character:GetChildren()}
		hitbox2.OverlapParams = params
		hitbox2.Touched:Connect(function(hit, hum)
			local hit_character = hit.Parent
			if not hit_character then return end
			local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
			if not hum or hum.Health <= 0 then return end
			local torso = hit_character:FindFirstChild(""Torso"") or hit_character:FindFirstChild(""UpperTorso"") or hit_character:FindFirstChild(""HumanoidRootPart"")
			if not torso then return end
			local hit_effect = assets.Effects.hit.Attachment:Clone()
			hit_effect.Parent = torso
			for _, v in pairs(hit_effect:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount"") or 1)
				end
			end
			hum:TakeDamage(8)
			stun(hum, 0.3)
		end)
		hitbox2:Start()
		local sound2 = assets.Sounds.White:Clone()
		sound2.Parent = root
		sound2:Play()
		local whiteshot = assets.Effects.whiteShot:Clone()
		whiteshot.Parent = workspace
		whiteshot.CFrame = root.CFrame * CFrame.new(0, 1, -5)
		client_fx(150, brightness, nil, .1, .3)
		client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 1)
		task.wait()
		task.delay(1, function()
			whiteshot:Destroy()
		end)
		for _,v in pairs(whiteshot.Attachment:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
				v.EmissionDirection = Enum.NormalId.Front
			end
		end
		task.wait()
		hitbox2:Stop()
		anim:GetMarkerReachedSignal(""Black""):Wait()
		ammo -= 1
		local hitbox2 = hitboxes.CreateHitbox()
		hitbox2.Size = Vector3.new(5,5,30)
		hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -15)
		local params = OverlapParams.new()
		params.FilterType = Enum.RaycastFilterType.Exclude
		params.FilterDescendantsInstances = {character:GetChildren()}
		hitbox2.OverlapParams = params
		hitbox2.Touched:Connect(function(hit, hum)
			local hit_character = hit.Parent
			if not hit_character then return end
			local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
			if not hum or hum.Health <= 0 then return end
			local torso = hit_character:FindFirstChild(""Torso"") or hit_character:FindFirstChild(""UpperTorso"") or hit_character:FindFirstChild(""HumanoidRootPart"")
			if not torso then return end
			local hit_effect = assets.Effects.hit.Attachment:Clone()
			hit_effect.Parent = torso
			for _, v in pairs(hit_effect:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount"") or 1)
				end
			end
			hum:TakeDamage(8)
			stun(hum, 0.3)
		end)
		hitbox2:Start()
		local sound1 = assets.Sounds.Black:Clone()
		sound1.Parent = root
		sound1:Play()
		local blackshot = assets.Effects.blackShot:Clone()
		blackshot.Parent = workspace
		blackshot.CFrame = root.CFrame * CFrame.new(0, 1, -5)
		client_fx(150, brightness, nil, .1, .3)
		client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 1)
		task.wait()
		task.delay(1, function()
			blackshot:Destroy()
		end)
		for _,v in pairs(blackshot.Attachment:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
				v.EmissionDirection = Enum.NormalId.Front
			end
		end
		task.wait()
		hitbox2:Stop()
		anim:GetMarkerReachedSignal(""White""):Wait()
		ammo -= 1
		local hitbox2 = hitboxes.CreateHitbox()
		hitbox2.Size = Vector3.new(5,5,30)
		hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -15)
		local params = OverlapParams.new()
		params.FilterType = Enum.RaycastFilterType.Exclude
		params.FilterDescendantsInstances = {character:GetChildren()}
		hitbox2.OverlapParams = params
		hitbox2.Touched:Connect(function(hit, hum)
			local hit_character = hit.Parent
			if not hit_character then return end
			local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
			if not hum or hum.Health <= 0 then return end
			local torso = hit_character:FindFirstChild(""Torso"") or hit_character:FindFirstChild(""UpperTorso"") or hit_character:FindFirstChild(""HumanoidRootPart"")
			if not torso then return end
			local hit_effect = assets.Effects.hit.Attachment:Clone()
			hit_effect.Parent = torso
			for _, v in pairs(hit_effect:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount"") or 1)
				end
			end
			hum:TakeDamage(8)
			stun(hum, 0.3)
		end)
		hitbox2:Start()
		local sound2 = assets.Sounds.White:Clone()
		sound2.Parent = root
		sound2:Play()
		local whiteshot = assets.Effects.whiteShot:Clone()
		whiteshot.Parent = workspace
		whiteshot.CFrame = root.CFrame * CFrame.new(0, 1, -5)
		client_fx(150, brightness, nil, .1, .3)
		client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 1)
		task.wait()
		task.delay(1, function()
			whiteshot:Destroy()
		end)
		for _,v in pairs(whiteshot.Attachment:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
				v.EmissionDirection = Enum.NormalId.Front
			end
		end
		task.wait()
		hitbox2:Stop()
		anim:GetMarkerReachedSignal(""Black""):Wait()
		ammo -= 1
		local hitbox2 = hitboxes.CreateHitbox()
		hitbox2.Size = Vector3.new(5,5,30)
		hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -15)
		local params = OverlapParams.new()
		params.FilterType = Enum.RaycastFilterType.Exclude
		params.FilterDescendantsInstances = {character:GetChildren()}
		hitbox2.OverlapParams = params
		hitbox2.Touched:Connect(function(hit, hum)
			local hit_character = hit.Parent
			if not hit_character then return end
			local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
			if not hum or hum.Health <= 0 then return end
			local torso = hit_character:FindFirstChild(""Torso"") or hit_character:FindFirstChild(""UpperTorso"") or hit_character:FindFirstChild(""HumanoidRootPart"")
			if not torso then return end
			local hit_effect = assets.Effects.hit.Attachment:Clone()
			hit_effect.Parent = torso
			for _, v in pairs(hit_effect:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount"") or 1)
				end
			end
			hum:TakeDamage(8)
			stun(hum, 0.3)
		end)
		hitbox2:Start()
		local sound1 = assets.Sounds.Black:Clone()
		sound1.Parent = root
		sound1:Play()
		local blackshot = assets.Effects.blackShot:Clone()
		blackshot.Parent = workspace
		blackshot.CFrame = root.CFrame * CFrame.new(0, 1, -5)
		client_fx(150, brightness, nil, .1, .3)
		client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 1)
		task.wait()
		task.delay(1, function()
			blackshot:Destroy()
		end)
		for _,v in pairs(blackshot.Attachment:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
				v.EmissionDirection = Enum.NormalId.Front
			end
		end
		task.wait()
		hitbox2:Stop()
		anim:GetMarkerReachedSignal(""White""):Wait()
		ammo -= 1
		local hitbox2 = hitboxes.CreateHitbox()
		hitbox2.Size = Vector3.new(5,5,30)
		hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -15)
		local params = OverlapParams.new()
		params.FilterType = Enum.RaycastFilterType.Exclude
		params.FilterDescendantsInstances = {character:GetChildren()}
		hitbox2.OverlapParams = params
		hitbox2.Touched:Connect(function(hit, hum)
			local hit_character = hit.Parent
			if not hit_character then return end
			local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
			if not hum or hum.Health <= 0 then return end
			local torso = hit_character:FindFirstChild(""Torso"") or hit_character:FindFirstChild(""UpperTorso"") or hit_character:FindFirstChild(""HumanoidRootPart"")
			if not torso then return end
			local hit_effect = assets.Effects.hit.Attachment:Clone()
			hit_effect.Parent = torso
			for _, v in pairs(hit_effect:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount"") or 1)
				end
			end
			hum:TakeDamage(8)
			stun(hum, 0.3)
		end)
		hitbox2:Start()
		local sound2 = assets.Sounds.White:Clone()
		sound2.Parent = root
		sound2:Play()
		local whiteshot = assets.Effects.whiteShot:Clone()
		whiteshot.Parent = workspace
		whiteshot.CFrame = root.CFrame * CFrame.new(0, 1, -5)
		client_fx(150, brightness, nil, .1, .3)
		client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 1)
		task.wait()
		task.delay(1, function()
			whiteshot:Destroy()
		end)
		for _,v in pairs(whiteshot.Attachment:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
				v.EmissionDirection = Enum.NormalId.Front
			end
		end
		hitbox2:Stop()
		anim:GetMarkerReachedSignal(""Black""):Wait()
		ammo -= 1
		local hitbox2 = hitboxes.CreateHitbox()
		hitbox2.Size = Vector3.new(5,5,30)
		hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -15)
		local params = OverlapParams.new()
		params.FilterType = Enum.RaycastFilterType.Exclude
		params.FilterDescendantsInstances = {character:GetChildren()}
		hitbox2.OverlapParams = params
		hitbox2.Touched:Connect(function(hit, hum)
			local hit_character = hit.Parent
			if not hit_character then return end
			local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
			if not hum or hum.Health <= 0 then return end
			local torso = hit_character:FindFirstChild(""Torso"") or hit_character:FindFirstChild(""UpperTorso"") or hit_character:FindFirstChild(""HumanoidRootPart"")
			if not torso then return end
			local hit_effect = assets.Effects.hit.Attachment:Clone()
			hit_effect.Parent = torso
			for _, v in pairs(hit_effect:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount"") or 1)
				end
			end
			hum:TakeDamage(8)
			stun(hum, 0.3)
		end)
		hitbox2:Start()
		local sound1 = assets.Sounds.Black:Clone()
		sound1.Parent = root
		sound1:Play()
		local blackshot = assets.Effects.blackShot:Clone()
		blackshot.Parent = workspace
		blackshot.CFrame = root.CFrame * CFrame.new(0, 1, -5)
		client_fx(150, brightness, nil, .1, .3)
		client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 1)
		task.wait()
		task.delay(1, function()
			blackshot:Destroy()
		end)
		for _,v in pairs(blackshot.Attachment:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
				v.EmissionDirection = Enum.NormalId.Front
			end
		end
		hitbox2:Stop()
		anim:GetMarkerReachedSignal(""White""):Wait()
		ammo -= 1
		local hitbox2 = hitboxes.CreateHitbox()
		hitbox2.Size = Vector3.new(5,5,30)
		hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -15)
		local params = OverlapParams.new()
		params.FilterType = Enum.RaycastFilterType.Exclude
		params.FilterDescendantsInstances = {character:GetChildren()}
		hitbox2.OverlapParams = params
		hitbox2.Touched:Connect(function(hit, hum)
			local hit_character = hit.Parent
			if not hit_character then return end
			local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
			if not hum or hum.Health <= 0 then return end
			local torso = hit_character:FindFirstChild(""Torso"") or hit_character:FindFirstChild(""UpperTorso"") or hit_character:FindFirstChild(""HumanoidRootPart"")
			if not torso then return end
			local hit_effect = assets.Effects.hit.Attachment:Clone()
			hit_effect.Parent = torso
			for _, v in pairs(hit_effect:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount"") or 1)
				end
			end
			hum:TakeDamage(8)
			stun(hum, 0.3)
		end)
		hitbox2:Start()
		local sound2 = assets.Sounds.White:Clone()
		sound2.Parent = root
		sound2:Play()
		local whiteshot = assets.Effects.whiteShot:Clone()
		whiteshot.Parent = workspace
		whiteshot.CFrame = root.CFrame * CFrame.new(0, 1, -5)
		client_fx(150, brightness, nil, .1, .3)
		client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 1)
		task.wait()
		task.delay(1, function()
			whiteshot:Destroy()
		end)
		for _,v in pairs(whiteshot.Attachment:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
				v.EmissionDirection = Enum.NormalId.Front
			end
		end
		hitbox2:Stop()
		anim:GetMarkerReachedSignal(""Black""):Wait()
		ammo -= 1
		local hitbox2 = hitboxes.CreateHitbox()
		hitbox2.Size = Vector3.new(5,5,30)
		hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -15)
		local params = OverlapParams.new()
		params.FilterType = Enum.RaycastFilterType.Exclude
		params.FilterDescendantsInstances = {character:GetChildren()}
		hitbox2.OverlapParams = params
		hitbox2.Touched:Connect(function(hit, hum)
			local hit_character = hit.Parent
			if not hit_character then return end
			local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
			if not hum or hum.Health <= 0 then return end
			local torso = hit_character:FindFirstChild(""Torso"") or hit_character:FindFirstChild(""UpperTorso"") or hit_character:FindFirstChild(""HumanoidRootPart"")
			if not torso then return end
			local hit_effect = assets.Effects.hit.Attachment:Clone()
			hit_effect.Parent = torso
			for _, v in pairs(hit_effect:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount"") or 1)
				end
			end
			hum:TakeDamage(8)
			stun(hum, 0.3)
		end)
		hitbox2:Start()
		local sound1 = assets.Sounds.Black:Clone()
		sound1.Parent = root
		sound1:Play()
		local blackshot = assets.Effects.blackShot:Clone()
		blackshot.Parent = workspace
		blackshot.CFrame = root.CFrame * CFrame.new(0, 1, -5)
		client_fx(150, brightness, nil, .1, .3)
		client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 1)
		task.wait()
		task.delay(1, function()
			blackshot:Destroy()
		end)
		for _,v in pairs(blackshot.Attachment:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
				v.EmissionDirection = Enum.NormalId.Front
			end
		end
		hitbox2:Stop()
		anim:GetMarkerReachedSignal(""White""):Wait()
		ammo -= 1
		local hitbox2 = hitboxes.CreateHitbox()
		hitbox2.Size = Vector3.new(5,5,30)
		hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -15)
		local params = OverlapParams.new()
		params.FilterType = Enum.RaycastFilterType.Exclude
		params.FilterDescendantsInstances = {character:GetChildren()}
		hitbox2.OverlapParams = params
		hitbox2.Touched:Connect(function(hit, hum)
			local hit_character = hit.Parent
			if not hit_character then return end
			local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
			if not hum or hum.Health <= 0 then return end
			local torso = hit_character:FindFirstChild(""Torso"") or hit_character:FindFirstChild(""UpperTorso"") or hit_character:FindFirstChild(""HumanoidRootPart"")
			if not torso then return end
			local hit_effect = assets.Effects.hit.Attachment:Clone()
			hit_effect.Parent = torso
			for _, v in pairs(hit_effect:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount"") or 1)
				end
			end
			hum:TakeDamage(8)
			stun(hum, 0.3)
		end)
		hitbox2:Start()
		local sound2 = assets.Sounds.White:Clone()
		sound2.Parent = root
		sound2:Play()
		local whiteshot = assets.Effects.whiteShot:Clone()
		whiteshot.Parent = workspace
		whiteshot.CFrame = root.CFrame * CFrame.new(0, 1, -5)
		client_fx(150, brightness, nil, .1, .3)
		client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 1)
		task.wait()
		task.delay(1, function()
			whiteshot:Destroy()
		end)
		for _,v in pairs(whiteshot.Attachment:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
				v.EmissionDirection = Enum.NormalId.Front
			end
		end
		hitbox2:Stop()
		anim:GetMarkerReachedSignal(""Black""):Wait()
		ammo -= 1
		local hitbox2 = hitboxes.CreateHitbox()
		hitbox2.Size = Vector3.new(5,5,30)
		hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -15)
		local params = OverlapParams.new()
		params.FilterType = Enum.RaycastFilterType.Exclude
		params.FilterDescendantsInstances = {character:GetChildren()}
		hitbox2.OverlapParams = params
		hitbox2.Touched:Connect(function(hit, hum)
			local hit_character = hit.Parent
			if not hit_character then return end
			local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
			if not hum or hum.Health <= 0 then return end
			local torso = hit_character:FindFirstChild(""Torso"") or hit_character:FindFirstChild(""UpperTorso"") or hit_character:FindFirstChild(""HumanoidRootPart"")
			if not torso then return end
			local hit_effect = assets.Effects.hit.Attachment:Clone()
			hit_effect.Parent = torso
			for _, v in pairs(hit_effect:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount"") or 1)
				end
			end
			hum:TakeDamage(8)
			stun(hum, 0.3)
		end)
		hitbox2:Start()
		local sound1 = assets.Sounds.Black:Clone()
		sound1.Parent = root
		sound1:Play()
		local blackshot = assets.Effects.blackShot:Clone()
		blackshot.Parent = workspace
		blackshot.CFrame = root.CFrame * CFrame.new(0, 1, -5)
		client_fx(150, brightness, nil, .1, .3)
		client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 1)
		task.wait()
		task.delay(1, function()
			blackshot:Destroy()
		end)
		for _,v in pairs(blackshot.Attachment:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
				v.EmissionDirection = Enum.NormalId.Front
			end
		end
		hitbox2:Stop()
		anim:GetMarkerReachedSignal(""End""):Wait()
		ammo -= 1
		print(""End"")
		local hitbox2 = hitboxes.CreateHitbox()
		hitbox2.Size = Vector3.new(5,5,30)
		hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -15)
		local params = OverlapParams.new()
		params.FilterType = Enum.RaycastFilterType.Exclude
		params.FilterDescendantsInstances = {character:GetChildren()}
		hitbox2.OverlapParams = params
		hitbox2.Touched:Connect(function(hit, hum)
			local hit_character = hit.Parent
			if not hit_character then return end
			local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
			if not hum or hum.Health <= 0 then return end
			local torso = hit_character:FindFirstChild(""Torso"") or hit_character:FindFirstChild(""UpperTorso"") or hit_character:FindFirstChild(""HumanoidRootPart"")
			if not torso then return end
			local hit_effect = assets.Effects.hit.Attachment:Clone()
			hit_effect.Parent = torso
			for _, v in pairs(hit_effect:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount"") or 1)
				end
			end
			hum:TakeDamage(12)
			stun(hum, 0.5)
		end)
		hitbox2:Start()
		local sound1 = assets.Sounds.Black:Clone()
		sound1.Parent = root
		sound1:Play()
		local blackshot = assets.Effects.blackShot:Clone()
		blackshot.Parent = workspace
		blackshot.CFrame = root.CFrame * CFrame.new(0, 1, -5)
		client_fx(150, brightness, nil, .1, .3)
		client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 1)
		task.wait()
		for _,v in pairs(blackshot.Attachment:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
				v.EmissionDirection = Enum.NormalId.Front
			end
		end
		task.delay(1, function()
			blackshot:Destroy()
		end)
		task.wait()
		hitbox2:Stop()
		print(""yes"")
	elseif action == ""clash"" then
		if debounce then return end  
		debounce = true  
		local anim = animator.new()
		anim:setAnimation(require(animations.counter2))
		anim:setRig(character)
		anim:AdjustWeight(1)
		anim.Looped = false
		anim:Play()
		humanoid.WalkSpeed = 0
		local parry_active = true
		task.delay(2, function()
			parry_active = false
			humanoid.WalkSpeed = 25
		end)
		if humanoid then
			local original = humanoid.Health
			local startTime = tick()
			while parry_active and tick() - startTime < 0.5 do
				task.wait()
				if humanoid.Health < original then
					anim:Stop()
					local force = Instance.new(""ForceField"")
					force.Visible = false
					force.Parent = character
					task.delay(1, function()
						force:Destroy()
					end)
					client_fx(150, brightness, Color3.fromRGB(255, 144, 47), -0.2, 1)
					client_fx(150, cam_shake, {5, 30, -5, 10}, Vector3.one * 3)
					camerastuff.TweenFOV({player, nil}, 50, {Length = 0.001, EasingStyle = ""Cubic"", EasingDirection = ""Out"", RepeatCount = 0, Reverses = false, DelayTime = 0}, true)
					local clash = Instance.new(""Sound"")
					clash.Name = ""clash""
					clash.Volume = 2
					clash.SoundId = ""rbxassetid://199149338""
					clash.Parent = root
					clash:Play()
					task.delay(2, function()
						clash:Destroy()
					end)
					local parryfx = assets.Effects.Parry:Clone()
					parryfx.Parent = workspace
					parryfx.CFrame = root.CFrame * CFrame.new(0, 1, -2)
					task.wait()
					for _,v in pairs(parryfx.Attachment:GetDescendants()) do
						if v:IsA(""ParticleEmitter"") then
							v:Emit(v:GetAttribute(""EmitCount""))
							v.EmissionDirection = Enum.NormalId.Top
						end
					end
					task.delay(2, function()
						parryfx:Destroy()
					end)
					local radius = 100
					local force = 250
					local knockbackDuration = 0.3

					local function ye(hrp)
						local direction = (hrp.Position - root.Position).Unit
						local bodyPos = Instance.new(""BodyPosition"")
						bodyPos.Position = hrp.Position + direction * force
						bodyPos.MaxForce = Vector3.new(1e5, 1e5, 1e5)
						bodyPos.P = 5_000
						bodyPos.D = 500
						bodyPos.Parent = hrp

						task.delay(knockbackDuration, function()
							bodyPos:Destroy()
						end)
					end

					for _, enemy in pairs(game:GetService(""Players""):GetPlayers()) do
						if enemy ~= player and enemy.Character and enemy.Character:FindFirstChild(""HumanoidRootPart"") then
							local enemyHRP = enemy.Character.HumanoidRootPart
							local distance = (enemyHRP.Position - root.Position).Magnitude
							if distance <= radius then
								ye(enemyHRP)
							end
						end
					end

					for _, npc in pairs(workspace:GetChildren()) do
						if npc:IsA(""Model"") and npc:FindFirstChild(""Humanoid"") and npc:FindFirstChild(""HumanoidRootPart"") then
							local npcHRP = npc.HumanoidRootPart
							local distance = (npcHRP.Position - root.Position).Magnitude
							if distance <= radius then
								ye(npcHRP)
							end
						end
					end
					local parry = animator.new()
					parry:setAnimation(require(animations.reload_1))
					parry:setRig(character)
					parry:AdjustWeight(2)
					parry.Looped = false
					parry:Play()
					humanoid.WalkSpeed = 25
					break
				end
			end
		end
		task.wait(1)
		debounce = false
	elseif action == ""sorrow_in_you"" then
		if ammo == 0 then return end
		ego = math.max(ego - 45, 0)
		debounce = true
		humanoid.WalkSpeed = 0
		local bv = Instance.new(""BodyVelocity"")
		bv.MaxForce = Vector3.new(1e5, 0, 1e5)
		bv.Velocity = root.CFrame.LookVector * 120
		bv.Parent = root
		local anim = animator.new()
		anim:setAnimation(require(animations.sorrow_in_you))
		anim:setRig(character)
		anim:AdjustWeight(2)
		anim.Looped = false
		anim:Play()
		game.Debris:AddItem(bv, 0.1)
		anim:GetMarkerReachedSignal(""start""):Wait()
		humanoid.AutoRotate = false
		local swing = assets.Effects.black_swing:Clone()
		swing.Parent = workspace
		swing.CFrame = blackgun.CFrame * CFrame.new(0, 0.1, 3)
		task.wait()
		for _,v in pairs(swing.Attachment2:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
				v.EmissionDirection = Enum.NormalId.Top
			end
		end
		local hitbox2 = hitboxes.CreateHitbox()
		hitbox2.Size = Vector3.new(5,5,60)
		hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -30)
		local params = OverlapParams.new()
		params.FilterType = Enum.RaycastFilterType.Exclude
		params.FilterDescendantsInstances = {character:GetChildren()}
		hitbox2.OverlapParams = params
		hitbox2.Touched:Connect(function(hit, hum)
			local hit_character = hit.Parent
			if not hit_character then return end
			local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
			if not hum or hum.Health <= 0 then return end
			local torso = hit_character:FindFirstChild(""Torso"") or hit_character:FindFirstChild(""UpperTorso"")
			if not torso then return end
			local hit_effect = assets.Effects.hit.Attachment:Clone()
			hit_effect.Parent = torso
			for _, v in pairs(hit_effect:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount"") or 1)
				end
			end
			hum:TakeDamage(5)
			stun(hum, 0.8)
		end)
		hitbox2:Start()
		local sound1 = assets.Sounds.Black:Clone()
		sound1.Parent = root
		sound1:Play()
		local blackshot = assets.Effects.blackShot:Clone()
		blackshot.Parent = workspace
		blackshot.CFrame = root.CFrame * CFrame.new(0, 1, -8)
		client_fx(150, brightness, nil, .1, 1)
		client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 2)
		camerastuff.TweenFOV({player, nil}, 40, {Length = 0.001, EasingStyle = ""Sine"", EasingDirection = ""Out"", RepeatCount = 0, Reverses = false, DelayTime = 0}, true)
		task.wait()
		hitbox2:Stop()
		for _,v in pairs(blackshot.Attachment:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
				v.EmissionDirection = Enum.NormalId.Front
			end
		end
		task.delay(1, function()
			blackshot:Destroy()
		end)
		anim:GetMarkerReachedSignal(""1""):Wait()
		anim:GetMarkerReachedSignal(""2""):Wait()
		local swing = assets.Effects.up_swing:Clone()
		swing.Parent = workspace
		swing.CFrame = root.CFrame
		task.wait()
		for _,v in pairs(swing.Attachment1:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
			end
		end
		task.wait()
		for _,v in pairs(swing.Attachment2:GetDescendants()) do
			if v:IsA(""ParticleEmitter"") then
				v:Emit(v:GetAttribute(""EmitCount""))
			end
		end
		task.delay(1, function()
			swing:Destroy()
		end)
		local bv = Instance.new(""BodyVelocity"")
		bv.MaxForce = Vector3.new(1e7, 1e7, 1e7)
		bv.Velocity = root.CFrame.LookVector * -20
		bv.Parent = root
		humanoid.AutoRotate = true
		anim:GetMarkerReachedSignal(""3""):Once(function()
			game.Debris:AddItem(bv, 0.1)
			local sound1 = assets.Sounds.Black:Clone()
			sound1.Parent = root
			sound1:Play()
			client_fx(150, brightness, nil, .1, 1)
			client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 2)
			camerastuff.TweenFOV({player, nil}, 85, {Length = 0.3, EasingStyle = ""Quint"", EasingDirection = ""Out"", RepeatCount = 0, Reverses = false, DelayTime = 0}, false)
			task.wait()
			humanoid.AutoRotate = false
			for v = 1, 13 do
				task.wait(0.065)
				local hitbox2 = hitboxes.CreateHitbox()
				hitbox2.Size = Vector3.new(5,5,60)
				hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -40)
				local params = OverlapParams.new()
				params.FilterType = Enum.RaycastFilterType.Exclude
				params.FilterDescendantsInstances = {character:GetChildren()}
				hitbox2.OverlapParams = params
				hitbox2.Touched:Connect(function(hit, hum)
					local hit_character = hit.Parent
					if not hit_character then return end
					local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
					if not hum or hum.Health <= 0 then return end
					local torso = hit_character:FindFirstChild(""Torso"") or hit_character:FindFirstChild(""UpperTorso"")
					if not torso then return end
					local hit_effect = assets.Effects.hit.Attachment:Clone()
					hit_effect.Parent = torso
					for _, v in pairs(hit_effect:GetDescendants()) do
						if v:IsA(""ParticleEmitter"") then
							v:Emit(v:GetAttribute(""EmitCount"") or 1)
						end
					end
					hum:TakeDamage(3)
					stun(hum, 0.5)
				end)
				hitbox2:Start()
				local sound1 = assets.Sounds.White:Clone()
				sound1.Parent = root
				sound1:Play()
				local sound2 = assets.Sounds.Black:Clone()
				sound2.Parent = root
				sound2:Play()
				local twoshot = assets.Effects.whiteBShot:Clone()
				twoshot.Parent = workspace
				twoshot.CFrame = root.CFrame * CFrame.new(0, 1, -5)
				client_fx(150, brightness, nil, .1, .3)
				client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 1)
				task.wait()
				task.delay(1, function()
					twoshot:Destroy()
				end)
				for _,v in pairs(twoshot.Attachmentb:GetDescendants()) do
					if v:IsA(""ParticleEmitter"") then
						v:Emit(v:GetAttribute(""EmitCount""))
					end
				end
				task.wait()
				hitbox2:Stop()
				for _,v in pairs(twoshot.Attachmentw:GetDescendants()) do
					if v:IsA(""ParticleEmitter"") then
						v:Emit(v:GetAttribute(""EmitCount""))
					end
				end
			end
		end)
		anim:GetMarkerReachedSignal(""4""):Once(function()
			local swing = assets.Effects.up_swing:Clone()
			swing.Parent = workspace
			swing.CFrame = root.CFrame
			task.wait()
			task.delay(1, function()
				swing:Destroy()
			end)
			for _,v in pairs(swing.Attachment1:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount""))
				end
			end
			task.wait()
			for _,v in pairs(swing.Attachment2:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount""))
				end
			end
			camerastuff.TweenFOV({player, nil}, 60, {Length = 0.3, EasingStyle = ""Quint"", EasingDirection = ""Out"", RepeatCount = 0, Reverses = false, DelayTime = 0}, false)
		end)
		anim:GetMarkerReachedSignal(""5""):Once(function()
			local sound1 = assets.Sounds.Black:Clone()
			sound1.Parent = root
			sound1:Play()
			local sound2 = assets.Sounds.White:Clone()
			sound2.Parent = root
			sound2:Play()
			client_fx(150, brightness, nil, .4, 1)
			client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 2)
			camerastuff.TweenFOV({player, nil}, 85, {Length = 0.3, EasingStyle = ""Quint"", EasingDirection = ""Out"", RepeatCount = 0, Reverses = false, DelayTime = 0}, false)
			task.wait()
			for v = 1, 18 do
				task.wait(0.065)
				local hitbox2 = hitboxes.CreateHitbox()
				hitbox2.Size = Vector3.new(5,5,60)
				hitbox2.CFrame = root.CFrame * CFrame.new(0, 0, -40)
				local params = OverlapParams.new()
				params.FilterType = Enum.RaycastFilterType.Exclude
				params.FilterDescendantsInstances = {character:GetChildren()}
				hitbox2.OverlapParams = params
				hitbox2.Touched:Connect(function(hit, hum)
					local hit_character = hit.Parent
					if not hit_character then return end
					local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
					if not hum or hum.Health <= 0 then return end
					local torso = hit_character:FindFirstChild(""Torso"") or hit_character:FindFirstChild(""UpperTorso"")
					if not torso then return end
					local hit_effect = assets.Effects.hit.Attachment:Clone()
					hit_effect.Parent = torso
					for _, v in pairs(hit_effect:GetDescendants()) do
						if v:IsA(""ParticleEmitter"") then
							v:Emit(v:GetAttribute(""EmitCount"") or 1)
						end
					end
					hum:TakeDamage(3)
					stun(hum, 0.5)
				end)
				hitbox2:Start()
				local sound1 = assets.Sounds.White:Clone()
				sound1.Parent = root
				sound1:Play()
				local sound2 = assets.Sounds.Black:Clone()
				sound2.Parent = root
				sound2:Play()
				local twoshot = assets.Effects.whiteBShot:Clone()
				twoshot.Parent = workspace
				twoshot.CFrame = root.CFrame * CFrame.new(0, 1, -5)
				client_fx(150, brightness, nil, .1, .3)
				client_fx(150, cam_shake, {5, 10, 0, 1.5}, Vector3.one * 1)
				task.wait()
				task.delay(1, function()
					twoshot:Destroy()
				end)
				for _,v in pairs(twoshot.Attachmentb:GetDescendants()) do
					if v:IsA(""ParticleEmitter"") then
						v:Emit(v:GetAttribute(""EmitCount""))
					end
				end
				task.wait()
				hitbox2:Stop()
				for _,v in pairs(twoshot.Attachmentw:GetDescendants()) do
					if v:IsA(""ParticleEmitter"") then
						v:Emit(v:GetAttribute(""EmitCount""))
					end
				end
			end
		end)
		anim:GetMarkerReachedSignal(""6""):Once(function()
			camerastuff.TweenFOV({player, nil}, 120, {Length = 0.01, EasingStyle = ""Quint"", EasingDirection = ""Out"", RepeatCount = 0, Reverses = false, DelayTime = 0}, true)
			local bv = Instance.new(""BodyVelocity"")
			bv.MaxForce = Vector3.new(1e7, 1e7, 1e7)
			bv.Velocity = root.CFrame.LookVector * 100
			bv.Parent = root
			task.wait(0.2)
			game.Debris:AddItem(bv, 0.1)
		end)
		anim:GetMarkerReachedSignal(""7""):Once(function()
			humanoid.AutoRotate = false
			client_fx(150, impact, 1)
			client_fx(150, brightness, nil, 1, 1)
			client_fx(150, cam_shake, {5, 10, 0, 2}, Vector3.one * 5)
			camerastuff.TweenFOV({player, nil}, 90, {Length = 1.5, EasingStyle = ""Sine"", EasingDirection = ""Out"", RepeatCount = 0, Reverses = false, DelayTime = 0}, true)
			local sound1 = Instance.new(""Sound"")
			sound1.Name = ""magic-cast-heavy11""
			sound1.Volume = 4
			sound1.SoundId = ""rbxassetid://4299584756""
			sound1.Parent = root
			sound1:Play()
			local ending = assets.Effects.endShot:Clone()
			ending.Parent = workspace
			client_fx(50, cam_shake, {5, 30, -5, 10}, Vector3.one * 10)
			for v = 1, 16 do
				task.wait(0.065)
				ending.CFrame = root.CFrame
				local hitbox2 = hitboxes.CreateHitbox()
				hitbox2.Size = Vector3.new(30, 30, 30)
				hitbox2.CFrame = root.CFrame
				local params = OverlapParams.new()
				params.FilterType = Enum.RaycastFilterType.Exclude
				params.FilterDescendantsInstances = {character:GetChildren()}
				hitbox2.OverlapParams = params
				hitbox2.Touched:Connect(function(hit, hum)
					local hit_character = hit.Parent
					if not hit_character then return end
					local hum = hit_character:FindFirstChildOfClass(""Humanoid"")
					if not hum or hum.Health <= 0 then return end
					local torso = hit_character:FindFirstChild(""Torso"") or hit_character:FindFirstChild(""UpperTorso"")
					if not torso then return end
					local hit_effect = assets.Effects.hit.Attachment:Clone()
					hit_effect.Parent = torso
					for _, v in pairs(hit_effect:GetDescendants()) do
						if v:IsA(""ParticleEmitter"") then
							v:Emit(v:GetAttribute(""EmitCount"") or 1)
						end
					end
					hum:TakeDamage(3)
					stun(hum, 0.8)
				end)
				hitbox2:Start()
				for _,v in pairs(ending.Attachmentyay:GetDescendants()) do
					if v:IsA(""ParticleEmitter"") then
						v:Emit(v:GetAttribute(""EmitCount""))
					end
				end
				task.wait()
				task.delay(3, function()
					ending:Destroy()
				end)
				hitbox2:Stop()
				for _,v in pairs(ending.Attachmentyay2:GetDescendants()) do
					if v:IsA(""ParticleEmitter"") then
						v:Emit(v:GetAttribute(""EmitCount""))
					end
				end
			end
		end)
		anim:GetMarkerReachedSignal(""8""):Once(function()
			camerastuff.TweenFOV({player, nil}, 40, {Length = 0.01, EasingStyle = ""Sine"", EasingDirection = ""Out"", RepeatCount = 0, Reverses = false, DelayTime = 0}, true)
			client_fx(150, brightness, nil, 1, 1)
			client_fx(150, cam_shake, {5, 10, 0, 3}, Vector3.one * 3)
			local ending = assets.Effects.sorrow_end:Clone()
			ending.Parent = workspace
			ending.CFrame = root.CFrame
			task.wait()
			for _, v in pairs(ending:GetDescendants()) do
				if v:IsA(""ParticleEmitter"") then
					v:Emit(v:GetAttribute(""EmitCount"") or 1)
				end
			end
			local sound1 = Instance.new(""Sound"")
			sound1.Name = ""jingle5""
			sound1.Volume = 4
			sound1.SoundId = ""rbxassetid://4307069862""
			sound1.Parent = root
			sound1:Play()
			task.wait(1)
			debounce = false
			humanoid.WalkSpeed = 25
			humanoid.AutoRotate = true
		end)
	elseif action == ""ego"" then
		if ego <= 10 and ammo <= 30 then
			print(""not enough"")
		else
			debounce = true
			if ego >= max_ego then
				for _, v in pairs(character:GetChildren()) do
					if v:IsA(""Shirt"") then
						print(""yes"")
						leftarm[""Left Arm""].Color = character[""Left Arm""].Color
						rightarm[""Right Arm""].Color = character[""Right Arm""].Color
						middlearm[""Left Arm""].Color = character[""Torso""].Color
						local clonedShirt = v:Clone()
						clonedShirt.Parent = leftarm
						clonedShirt:Clone().Parent = rightarm
						clonedShirt:Clone().Parent = middlearm
					end
				end
				ego = 0
				local victim = nil
				local anim = animator.new()
				anim:setAnimation(require(animations.egostart))
				anim:setRig(character)
				anim:AdjustWeight(2)
				anim.Looped = false
				anim:Play()
				anim:GetMarkerReachedSignal(""Hit""):Wait()
				local shoot = assets.Effects.solemn_white:Clone()
				shoot.Parent = workspace
				shoot.CFrame = root.CFrame * CFrame.new(0, 0, -50)
				task.wait()
				task.delay(2, function()
					shoot:Destroy()
				end)
				for _, v in pairs(shoot:GetDescendants()) do
					if v:IsA(""ParticleEmitter"") then
						v:Emit(v:GetAttribute(""EmitCount"") or 1)
					end
				end
				local hitbox1 = Instance.new(""Part"", workspace)
				hitbox1.Name = ""Hitbox""
				hitbox1.Anchored = true
				hitbox1.Size = Vector3.new(5, 5, 40)
				hitbox1.CanCollide = false
				hitbox1.Transparency = 0
				hitbox1.CFrame = root.CFrame * CFrame.new(0, 0, -25)
				local params = OverlapParams.new()
				params.FilterType = Enum.RaycastFilterType.Exclude
				params.FilterDescendantsInstances = {character}
				task.wait(0.025)
				hitbox1:Destroy()
				local hitParts = workspace:GetPartsInPart(hitbox1, params)
				for _, part in ipairs(hitParts) do
					local humanoid = part.Parent:FindFirstChildOfClass(""Humanoid"")
					if humanoid and humanoid.Parent ~= character then
						victim = humanoid.Parent
						print(""Hit:"", victim.Name)
						local hit_effect = assets.Effects.hit.Attachment:Clone()
						hit_effect.Parent = victim.Torso
						for _, v in pairs(hit_effect:GetDescendants()) do
							if v:IsA(""ParticleEmitter"") then
								v:Emit(v:GetAttribute(""EmitCount"") or 1)
							end
						end
						humanoid:TakeDamage(2)
						stun(humanoid, 13)
						break
					end
				end
				if not victim then
					print(""none"")
					client_fx(200, brightness, nil, 1, 0.9)
					client_fx(200, cam_shake, {5, 10, 0, 3}, Vector3.one * 3)
				else
					debounce = true
					root.Anchored = true
					local victimPlayer = game.Players:GetPlayerFromCharacter(victim)
					local function cutscene(targets: {Player})
						if not targets then return end
						for _, player in pairs(targets) do
							if player and player:FindFirstChild(""PlayerGui"") then
								local cutscene = assets.Animations.CameraAnimations.Funeral.Camera:Clone()
								cutscene.Enabled = true
								cutscene.Origin.Value = root.CFrame
								cutscene.Parent = player.PlayerGui
								game:GetService(""Debris""):AddItem(cutscene, 15)
							end
						end
					end
					brightness(player, nil, 1, 0.9)
					cam_shake(player, {10, 10, 0, 10}, Vector3.one * 0.9)
					camerastuff.TweenFOV({player}, 20, {Length = 0.9, EasingStyle = ""Sine"", EasingDirection = ""Out"", RepeatCount = 0, Reverses = false, DelayTime = 0}, true)
				
					if victimPlayer then
						brightness(victimPlayer, nil, 1, 0.9)
						cam_shake(victimPlayer, {10, 10, 0, 10}, Vector3.one * 0.9)
						camerastuff.TweenFOV({victimPlayer}, 20, {Length = 0.9, EasingStyle = ""Sine"", EasingDirection = ""Out"", RepeatCount = 0, Reverses = false, DelayTime = 0}, true)
					end
					task.wait(0.9)
					local stunanim = animator.new()
					stunanim:setAnimation(require(animations.hit))
					stunanim:setRig(victim)
					stunanim:AdjustWeight(7)
					stunanim.Looped = true
					stunanim:Play()
					local hit_vic_torso = victim:FindFirstChild(""Torso"") or victim:FindFirstChild(""UpperTorso"") or victim:FindFirstChild(""HumanoidRootPart"")
					local hit_vic_hum = victim:FindFirstChild(""Humanoid"")
					hit_vic_torso.CFrame = root.CFrame * CFrame.new(0,0, -35)
					hit_vic_hum.AutoRotate = false
					hit_vic_torso.CFrame = CFrame.lookAt(victim.HumanoidRootPart.Position,root.Position)
					hit_vic_torso.Anchored = true
					humanoid.AutoRotate = false
					local ego = animator.new()
					ego:setAnimation(require(animations.funeral))
					ego:setRig(character)
					ego:AdjustWeight(1)
					ego.Looped = false

					root.Anchored = true
					root.CFrame = CFrame.lookAt(root.Position, hit_vic_torso.Position)

					anim:Stop()
					client_fx(50, brightness, nil, 1, 1)
					ego:Play()
					cutscene({player, victimPlayer})
					egobar.Enabled = false
					funeral_head.Parent = storage
					coffin2.Parent = game.TestService
					coffin.Parent = character
					leftarm.Parent = character
					rightarm.Parent = character
					middlearm.Parent = character
					leftarm[""Left Arm""].Transparency = 0
					rightarm[""Right Arm""].Transparency = 0
					middlearm[""Left Arm""].Transparency = 0
					whitegun.Transparency = 1
					blackgun.Transparency = 1
					ego:GetMarkerReachedSignal(""1""):Wait()
					local body_collapse01 = Instance.new(""Sound"")
					body_collapse01.Name = ""body-collapse01""
					body_collapse01.Volume = 2
					body_collapse01.SoundId = ""rbxassetid://2609993518""
					body_collapse01.Parent = character[""Right Leg""]
					body_collapse01:Play()
					ego:GetMarkerReachedSignal(""2""):Wait()
					local body_collapse01 = Instance.new(""Sound"")
					body_collapse01.Name = ""body-collapse01""
					body_collapse01.Volume = 2
					body_collapse01.SoundId = ""rbxassetid://4086035815""
					body_collapse01.Parent = root
					body_collapse01:Play()
					local body_collapse02 = Instance.new(""Sound"")
					body_collapse02.Name = ""body-collapse01""
					body_collapse02.Volume = 2
					body_collapse02.SoundId = ""rbxassetid://182306090""
					body_collapse02.Parent = root
					body_collapse02:Play()
					ego:GetMarkerReachedSignal(""3""):Wait()
					local body_collapse01 = Instance.new(""Sound"")
					body_collapse01.Name = ""body-collapse01""
					body_collapse01.Volume = 2
					body_collapse01.SoundId = ""rbxassetid://5137964328""
					body_collapse01.Parent = root
					body_collapse01:Play()
					ego:GetMarkerReachedSignal(""4""):Wait()
					local body_collapse01 = Instance.new(""Sound"")
					body_collapse01.Name = ""body-collapse01""
					body_collapse01.Volume = 2
					body_collapse01.SoundId = ""rbxassetid://3908308607""
					body_collapse01.Parent = root
					body_collapse01:Play()
					ego:GetMarkerReachedSignal(""5""):Wait()
					local body_collapse01 = Instance.new(""Sound"")
					body_collapse01.Name = ""body-collapse01""
					body_collapse01.Volume = 2
					body_collapse01.SoundId = ""rbxassetid://9125626784""
					body_collapse01.PlaybackSpeed = 1.2
					body_collapse01.Parent = root
					body_collapse01:Play()
					local down_particles = assets.Effects.coffinDown:Clone()
					down_particles.Parent = workspace
					down_particles.CFrame = coffin.Open.CFrame
					task.wait()
					task.delay(1, function()
						down_particles:Destroy()
					end)
					for _,v in pairs(down_particles:GetDescendants()) do
						if v:IsA(""ParticleEmitter"") then
							v:Emit(v:GetAttribute(""EmitCount""))
						end
					end
					ego:GetMarkerReachedSignal(""6""):Wait()
					local body_collapse01 = Instance.new(""Sound"")
					body_collapse01.Name = ""body-collapse01""
					body_collapse01.Volume = 2
					body_collapse01.SoundId = ""rbxassetid://1843023345""
					--body_collapse01.PlaybackSpeed = 1.2
					body_collapse01.Parent = root
					body_collapse01:Play()
					butterfly(player, ""White"", 2)
					butterfly(player, ""Black"", 2)
					if victimPlayer then
						butterfly(victimPlayer, ""White"", 2)
						butterfly(victimPlayer, ""Black"", 2)
					end
					local sound1 = assets.Sounds.White:Clone()
					sound1.Parent = root
					sound1:Play()
					local sound2 = assets.Sounds.Black:Clone()
					sound2.Parent = root
					sound2:Play()
					local final = Instance.new(""Sound"")
					final.Name = ""idk lol""
					final.Volume = 5
					final.SoundId = ""rbxassetid://1843023345""
					--body_collapse01.PlaybackSpeed = 1.2
					final.Parent = root
					final:Play()
					local funeral_shpt = assets.Effects.funeral_shot:Clone()
					funeral_shpt.Parent = workspace
					funeral_shpt.CFrame = root.CFrame * CFrame.new(0, 1, -47)
					task.wait()
					task.delay(3, function()
						funeral_shpt:Destroy()
					end)
					for _,v in pairs(funeral_shpt:GetDescendants()) do
						if v:IsA(""ParticleEmitter"") then
							v.Enabled = true
						end
					end
					for i = 1,60 do
						task.wait(0.025)
						if victim.Humanoid.Health - 5 <= 0 then
							victim.Humanoid.Health = 1
						else
							victim.Humanoid:TakeDamage(5)
						end
					end
					ego:GetMarkerReachedSignal(""7""):Once(function()
						--ego.Speed = 1.1
						for _,v in pairs(funeral_shpt:GetDescendants()) do
							if v:IsA(""ParticleEmitter"") then
								v.Enabled = false
							end
						end
						local fade = assets.FX.Fade:Clone()
						fade.Parent = player.PlayerGui
						if victimPlayer then
							local fade2 =  assets.FX.Fade:Clone()
							fade2.Parent = victimPlayer.PlayerGui
						end
						local idleflies = assets.Effects.idle_butterflies:Clone()
						idleflies.Parent = workspace
						idleflies.CFrame = root.CFrame
						for _,v in pairs(idleflies:GetChildren()) do
							if v:IsA(""ParticleEmitter"") then
								v:Emit(v:GetAttribute(""EmitCount"") or 1)
							end
						end
						local charge = Instance.new(""Sound"")
						charge.Name = ""Bell Toll""
						charge.Volume = 3
						charge.SoundId = ""rbxassetid://9058393493""
						charge.PlaybackSpeed = 0.8
						charge.Parent = root
						charge:Play()
					end)
					ego:GetMarkerReachedSignal(""8""):Once(function()
						local fade = assets.FX.Funeral_Effects:Clone()
						fade.Parent = player.PlayerGui
						clientmodule.scene(player, 4, Color3.fromRGB(255, 255, 255))
						if victimPlayer then
							clientmodule.scene(victimPlayer, 4, Color3.fromRGB(255, 255, 255))
							local fade2 = assets.FX.Funeral_Effects:Clone()
							fade2.Parent = victimPlayer.PlayerGui
						end
						local sound2 = assets.Sounds.Funeral_End:Clone()
						sound2.Parent = root
						sound2:Play()
						local sound3 = assets.Sounds.Black:Clone()
						sound3.Parent = root
						sound3:Play()
						local final = Instance.new(""Sound"")
						final.Name = ""idk lol""
						final.Volume = 5
						final.SoundId = ""rbxassetid://1843027458""
						--body_collapse01.PlaybackSpeed = 1.2
						final.Parent = root
						final:Play()
						local final_shot = assets.Effects.funeral_shot2:Clone()
						final_shot.Parent = workspace
						final_shot.CFrame = root.CFrame * CFrame.new(0, 1, -48)
						task.wait()
						if victim.Humanoid.Health - 250 <= 0 then
							victim.Humanoid.Health = 1
						else
							victim.Humanoid:TakeDamage(250)
						end
						butterfly(player, ""Black"", 4)
						if victimPlayer then
							butterfly(victimPlayer, ""Black"", 4)
						end
						task.delay(4, function()
							final_shot:Destroy()
						end)
						for _,v in pairs(final_shot.Attachmentyay2:GetChildren()) do
							if v:IsA(""ParticleEmitter"") then
								v:Emit(v:GetAttribute(""EmitCount""))
								game:GetService(""TweenService""):Create(v, TweenInfo.new(0.2, Enum.EasingStyle.Sine), {TimeScale = 0.1}):Play()
							end
						end
					end)
					--[[ego:GetMarkerReachedSignal(""9""):Once(function()
					end)]]
					ego:GetMarkerReachedSignal(""10""):Once(function()
						local ende = Instance.new(""Sound"")
						ende.Name = ""body-collapse01""
						ende.Volume = 0.5
						ende.PlaybackSpeed = 0.714
						ende.SoundId = ""rbxassetid://5743541912""
						ende.Parent = root
						ende:Play()
						local sound2 = assets.Sounds.Funeral_End2:Clone()
						sound2.Parent = root
						sound2:Play()
						clientmodule.scene(player, 4)
						if victimPlayer then
							clientmodule.scene(victimPlayer, 4)
						end
						task.wait(1)
						task.delay(3, function()
						camerastuff.NormalizeCamera({player, victimPlayer}, {
						Length = 0.0001,
						EasingStyle = ""Sine"",
						EasingDirection = ""Out"",
						RepeatCount = 0,
						Reverses = false,
						DelayTime = 0
					})	
					end)
						clientmodule.scene(player,3, Color3.fromRGB(0, 0, 0))
						if victimPlayer then
							clientmodule.scene(victimPlayer,3, Color3.fromRGB(0, 0, 0))
						end
						task.wait(3)
						debounce = false
						leftarm[""Left Arm""].Transparency = 1
						rightarm[""Right Arm""].Transparency = 1
						middlearm[""Left Arm""].Transparency = 1
						coffin2.Parent = character
						coffin.Parent = game.TestService
						funeral_head.Parent = game.TestService
						leftarm.Parent = storage
						rightarm.Parent = storage
						middlearm.Parent = storage
						whitegun.Transparency = 0
						blackgun.Transparency = 0
						egobar.Enabled = true
						humanoid.AutoRotate = true
						root.Anchored = false
						humanoid.WalkSpeed = 25
						root.Anchored = false
						ego:Stop()
						stunanim:Stop()
						hit_vic_torso.Anchored = false
						victim.Humanoid.AutoRotate = true
					end)
				end
			else
				ego = math.max(ego - 40, 0)
				local victim = nil
				local anim = animator.new()
				anim:setAnimation(require(animations.egostart))
				anim:setRig(character)
				anim:AdjustWeight(1)
				anim.Looped = false
				anim:Play()
				anim:GetMarkerReachedSignal(""Hit""):Wait()
				local shoot = assets.Effects.solemn_white:Clone()
				shoot.Parent = workspace
				shoot.CFrame = root.CFrame * CFrame.new(0, 0, -50)
				task.wait()
				task.delay(2, function()
					shoot:Destroy()
				end)
				for _, v in pairs(shoot:GetDescendants()) do
					if v:IsA(""ParticleEmitter"") then
						v:Emit(v:GetAttribute(""EmitCount"") or 1)
					end
				end
				local hitbox1 = Instance.new(""Part"", workspace)
				hitbox1.Name = ""Hitbox""
				hitbox1.Anchored = true
				hitbox1.Size = Vector3.new(5, 5, 40)
				hitbox1.CanCollide = false
				hitbox1.Transparency = 0
				hitbox1.CFrame = root.CFrame * CFrame.new(0, 0, -25)
				local params = OverlapParams.new()
				params.FilterType = Enum.RaycastFilterType.Exclude
				params.FilterDescendantsInstances = {character}
				task.wait(0.025)
				hitbox1:Destroy()
				local hitParts = workspace:GetPartsInPart(hitbox1, params)
				for _, part in ipairs(hitParts) do
					local humanoid = part.Parent:FindFirstChildOfClass(""Humanoid"")
					if humanoid and humanoid.Parent ~= character then
						victim = humanoid.Parent
						print(""Hit:"", victim.Name)
						local hit_effect = assets.Effects.hit.Attachment:Clone()
						hit_effect.Parent = victim.Torso
						for _, v in pairs(hit_effect:GetDescendants()) do
							if v:IsA(""ParticleEmitter"") then
								v:Emit(v:GetAttribute(""EmitCount"") or 1)
							end
						end
						stun(humanoid, 15)
						break
					end
				end
				if not victim then
					print(""none"")
					client_fx(200, brightness, nil, 1, 0.9)
					client_fx(50, cam_shake, {5, 10, 0, 3}, Vector3.one * 3)
				else
					local victimPlayer = game.Players:GetPlayerFromCharacter(victim)
					client_fx(200, brightness, nil, 1, 0.9)
					client_fx(50, cam_shake, {10, 10, 0, 10}, Vector3.one * 0.9)
					local victimPlayer = game.Players:GetPlayerFromCharacter(victim)
					camerastuff.TweenFOV({player}, 20, {Length = 0.9, EasingStyle = ""Sine"", EasingDirection = ""Out"", RepeatCount = 0, Reverses = false, DelayTime = 0}, true)
					if victimPlayer then
						brightness(victimPlayer, nil, 1, 0.9)
						cam_shake(victimPlayer, {10, 10, 0, 10}, Vector3.one * 0.9)
						camerastuff.TweenFOV({victimPlayer}, 20, {Length = 0.9, EasingStyle = ""Sine"", EasingDirection = ""Out"", RepeatCount = 0, Reverses = false, DelayTime = 0}, true)
					end
					task.wait(0.9)
					local stunanim = animator.new()
					stunanim:setAnimation(require(animations.hit))
					stunanim:setRig(victim)
					stunanim:AdjustWeight(7)
					stunanim.Looped = true
					stunanim:Play()
					victim.HumanoidRootPart.CFrame = root.CFrame * CFrame.new(0,0, -35)
					victim.Humanoid.AutoRotate = false
					victim.HumanoidRootPart.CFrame = CFrame.lookAt(victim.HumanoidRootPart.Position,root.Position)
					victim.HumanoidRootPart.Anchored = true
					humanoid.AutoRotate = false
					root.Anchored = true
					local ego = animator.new()
					ego:setAnimation(require(animations.solemn))
					ego:setRig(character)
					ego:AdjustWeight()
					ego.Looped = false
					ego:Play()
					anim:Stop()
					butterflyarm.Parent = storage
					local function cutscene(targets: {Player})
						if not targets then return end
						for _, player in pairs(targets) do
							if player and player:FindFirstChild(""PlayerGui"") then
								local cutscene = assets.Animations.CameraAnimations.SolemnLament.Camera:Clone()
								cutscene.Enabled = true
								cutscene.Origin.Value = root.CFrame
								cutscene.Parent = player.PlayerGui
								game:GetService(""Debris""):AddItem(cutscene, 15)
							end
						end
					end
					root.CFrame = CFrame.lookAt(root.Position,victim.HumanoidRootPart.Position)
					cutscene({player, victimPlayer})
					client_fx(50, brightness, nil, 1, 1)
					ego:GetMarkerReachedSignal(""1""):Wait()
					local sound3 = assets.Sounds.Ding:Clone()
					sound3.Parent = root
					sound3:Play()
					local ending = assets.Effects.sorrow_end:Clone()
					ending.Parent = workspace
					ending.CFrame = root.CFrame
					task.wait()
					task.delay(2, function()
						ending:Destroy()
					end)
					for _, v in pairs(ending:GetDescendants()) do
						if v:IsA(""ParticleEmitter"") then
							v:Emit(v:GetAttribute(""EmitCount"") or 1)
						end
					end
					ego:GetMarkerReachedSignal(""2""):Wait()
					local sound2 = assets.Sounds.Pistol_Click:Clone()
					sound2.Parent = root
					sound2:Play()
					local ending = assets.Effects.solemn_swing:Clone()
					ending.Parent = workspace
					ending.CFrame = root.CFrame
					task.wait()
					task.delay(2, function()
						ending:Destroy()
					end)
					for _, v in pairs(ending:GetDescendants()) do
						if v:IsA(""ParticleEmitter"") then
							v:Emit(v:GetAttribute(""EmitCount"") or 1)
						end
					end
					ego:GetMarkerReachedSignal(""3""):Wait()
					if victim.Humanoid.Health - 45 <= 0 then
						victim.Humanoid.Health = 1
					else
						victim.Humanoid:TakeDamage(45)
					end
					task.delay(0.00001, function()
						butterfly(player, ""White"", 0.5)
						if victimPlayer then
							butterfly(victimPlayer, ""White"", 0.5)
						end
					end)
					client_fx(50, brightness, nil, .1, .3)
					local sound2 = assets.Sounds.White:Clone()
					sound2.Parent = root
					sound2:Play()
					local ending = assets.Effects.solemn_white:Clone()
					ending.Parent = workspace
					ending.CFrame = root.CFrame * CFrame.new(0, 0, -50)
					task.wait()
					task.delay(2, function()
						ending:Destroy()
					end)
					for _, v in pairs(ending:GetDescendants()) do
						if v:IsA(""ParticleEmitter"") then
							v:Emit(v:GetAttribute(""EmitCount"") or 1)
						end
					end
					ego:GetMarkerReachedSignal(""4""):Wait()
					if victim.Humanoid.Health - 45 <= 0 then
						victim.Humanoid.Health = 1
					else
						victim.Humanoid:TakeDamage(45)
					end
					task.delay(0.00001, function()
						butterfly(player, ""Black"", 0.5)
						if victimPlayer then
							butterfly(victimPlayer, ""Black"", 0.5)
						end
					end)
					client_fx(50, brightness, nil, .1, .3)
					local sound2 = assets.Sounds.Black:Clone()
					sound2.Parent = root
					sound2:Play()
					local ending = assets.Effects.solemn_black:Clone()
					ending.Parent = workspace
					ending.CFrame = root.CFrame * CFrame.new(0, 0, -50)
					task.wait()
					task.delay(2, function()
						ending:Destroy()
					end)
					for _, v in pairs(ending:GetDescendants()) do
						if v:IsA(""ParticleEmitter"") then
							v:Emit(v:GetAttribute(""EmitCount"") or 1)
						end
					end
					ego:GetMarkerReachedSignal(""5""):Wait()
					if victim.Humanoid.Health - 45 <= 0 then
						victim.Humanoid.Health = 1
					else
						victim.Humanoid:TakeDamage(45)
					end
					task.delay(0.00001, function()
						butterfly(player, ""White"", 0.5)
						if victimPlayer then
							butterfly(victimPlayer, ""White"", 0.5)
						end
					end)
					client_fx(50, brightness, nil, .1, .3)
					local sound2 = assets.Sounds.White:Clone()
					sound2.Parent = root
					sound2:Play()
					local ending = assets.Effects.solemn_white:Clone()
					ending.Parent = workspace
					ending.CFrame = root.CFrame * CFrame.new(0, 0, -50)
					task.wait()
					task.delay(2, function()
						ending:Destroy()
					end)
					for _, v in pairs(ending:GetDescendants()) do
						if v:IsA(""ParticleEmitter"") then
							v:Emit(v:GetAttribute(""EmitCount"") or 1)
						end
					end
					ego:GetMarkerReachedSignal(""6""):Wait()
					if victim.Humanoid.Health - 45 <= 0 then
						victim.Humanoid.Health = 1
					else
						victim.Humanoid:TakeDamage(45)
					end
					task.delay(0.00001, function()
						butterfly(player, ""Black"", 0.5)
						if victimPlayer then
							butterfly(victimPlayer, ""Black"", 0.5)
						end
					end)
					client_fx(50, brightness, nil, .1, .3)
					local sound2 = assets.Sounds.Black:Clone()
					sound2.Parent = root
					sound2:Play()
					local ending = assets.Effects.solemn_black:Clone()
					ending.Parent = workspace
					ending.CFrame = root.CFrame * CFrame.new(0, 0, -50)
					task.wait()
					task.delay(2, function()
						ending:Destroy()
					end)
					for _, v in pairs(ending:GetDescendants()) do
						if v:IsA(""ParticleEmitter"") then
							v:Emit(v:GetAttribute(""EmitCount"") or 1)
						end
					end
					ego:GetMarkerReachedSignal(""7""):Wait()
					local sound2 = assets.Sounds.Pistol_Click:Clone()
					sound2.Parent = root
					sound2:Play()
					local ending = assets.Effects.solemn_spin1:Clone()
					ending.Parent = workspace
					ending.CFrame = root.CFrame --* CFrame.new(0, 0, 0)
					task.wait()
					task.delay(2, function()
						ending:Destroy()
					end)
					for _, v in pairs(ending:GetDescendants()) do
						if v:IsA(""ParticleEmitter"") then
							v:Emit(v:GetAttribute(""EmitCount"") or 1)
						end
					end
					ego:GetMarkerReachedSignal(""8""):Wait()
					if victim.Humanoid.Health - 45 <= 0 then
						victim.Humanoid.Health = 1
					else
						victim.Humanoid:TakeDamage(45)
					end
					task.delay(0.00001, function()
						butterfly(player, ""Black"", 0.5)
						if victimPlayer then
							butterfly(victimPlayer, ""Black"", 0.5)
						end
					end)
					client_fx(50, brightness, nil, .1, .3)
					local sound2 = assets.Sounds.Black:Clone()
					sound2.Parent = root
					sound2:Play()
					local ending = assets.Effects.solemn_black:Clone()
					ending.Parent = workspace
					ending.CFrame = root.CFrame * CFrame.new(0, 0, -50)
					task.wait()
					task.delay(2, function()
						ending:Destroy()
					end)
					for _, v in pairs(ending:GetDescendants()) do
						if v:IsA(""ParticleEmitter"") then
							v:Emit(v:GetAttribute(""EmitCount"") or 1)
						end
					end
					ego:GetMarkerReachedSignal(""9""):Wait()
					if victim.Humanoid.Health - 45 <= 0 then
						victim.Humanoid.Health = 1
					else
						victim.Humanoid:TakeDamage(45)
					end
					task.delay(0.00001, function()
						butterfly(player, ""White"", 0.5)
						if victimPlayer then
							butterfly(victimPlayer, ""White"", 0.5)
						end
					end)
					local sound2 = assets.Sounds.White:Clone()
					sound2.Parent = root
					sound2:Play()
					local ending = assets.Effects.solemn_white:Clone()
					ending.Parent = workspace
					ending.CFrame = root.CFrame * CFrame.new(0, 0, -50)
					task.wait()
					task.delay(2, function()
						ending:Destroy()
					end)
					for _, v in pairs(ending:GetDescendants()) do
						if v:IsA(""ParticleEmitter"") then
							v:Emit(v:GetAttribute(""EmitCount"") or 1)
						end
					end
					ego:GetMarkerReachedSignal(""10""):Wait()
					if victim.Humanoid.Health - 45 <= 0 then
						victim.Humanoid.Health = 1
					else
						victim.Humanoid:TakeDamage(45)
					end
					task.delay(0.00001, function()
						butterfly(player, ""Black"", 0.5)
						if victimPlayer then
							butterfly(victimPlayer, ""Black"", 0.5)
						end
					end)
					local sound2 = assets.Sounds.Black:Clone()
					sound2.Parent = root
					sound2:Play()
					local ending = assets.Effects.solemn_black:Clone()
					ending.Parent = workspace
					ending.CFrame = root.CFrame * CFrame.new(0, 0, -50)
					task.wait()
					task.delay(2, function()
						ending:Destroy()
					end)
					for _, v in pairs(ending:GetDescendants()) do
						if v:IsA(""ParticleEmitter"") then
							v:Emit(v:GetAttribute(""EmitCount"") or 1)
						end
					end
					ego:GetMarkerReachedSignal(""11""):Wait()
					if victim.Humanoid.Health - 45 <= 0 then
						victim.Humanoid.Health = 1
					else
						victim.Humanoid:TakeDamage(45)
					end
					task.delay(0.00001, function()
						butterfly(player, ""White"", 0.5)
						if victimPlayer then
							butterfly(victimPlayer, ""White"", 0.5)
						end
					end)
					local sound2 = assets.Sounds.White:Clone()
					sound2.Parent = root
					sound2:Play()
					local ending = assets.Effects.solemn_white:Clone()
					ending.Parent = workspace
					ending.CFrame = root.CFrame * CFrame.new(0, 0, -50)
					task.wait()
					task.delay(2, function()
						ending:Destroy()
					end)
					for _, v in pairs(ending:GetDescendants()) do
						if v:IsA(""ParticleEmitter"") then
							v:Emit(v:GetAttribute(""EmitCount"") or 1)
						end
					end
					ego:GetMarkerReachedSignal(""3.1""):Wait()
					local sound2 = assets.Sounds.Pistol_Click:Clone()
					sound2.Parent = root
					sound2:Play()
					local ending = assets.Effects.solemn_spin2:Clone()
					ending.Parent = workspace
					ending.CFrame = root.CFrame
					task.wait()
					task.delay(2, function()
						ending:Destroy()
					end)
					for _, v in pairs(ending:GetDescendants()) do
						if v:IsA(""ParticleEmitter"") then
							v:Emit(v:GetAttribute(""EmitCount"") or 1)
						end
					end
					ego:GetMarkerReachedSignal(""13""):Wait()
					if victim.Humanoid.Health - 45 <= 0 then
						victim.Humanoid.Health = 1
					else
						victim.Humanoid:TakeDamage(45)
					end
					task.delay(0.00001, function()
						butterfly(player, ""White"", 0.5)
						if victimPlayer then
							butterfly(victimPlayer, ""White"", 0.5)
						end
					end)
					local sound2 = assets.Sounds.White:Clone()
					sound2.Parent = root
					sound2:Play()
					local ending = assets.Effects.solemn_white:Clone()
					ending.Parent = workspace
					ending.CFrame = root.CFrame * CFrame.new(0, 0, -50)
					task.wait()
					task.delay(2, function()
						ending:Destroy()
					end)
					for _, v in pairs(ending:GetDescendants()) do
						if v:IsA(""ParticleEmitter"") then
							v:Emit(v:GetAttribute(""EmitCount"") or 1)
						end
					end
					ego:GetMarkerReachedSignal(""14""):Wait()
					if victim.Humanoid.Health - 25 <= 0 then
						victim.Humanoid.Health = 1
					else
						victim.Humanoid:TakeDamage(25)
					end
					task.delay(0.00001, function()
						butterfly(player, ""Black"", 0.5)
						if victimPlayer then
							butterfly(victimPlayer, ""Black"", 0.5)
						end
					end)
					local sound2 = assets.Sounds.Black:Clone()
					sound2.Parent = root
					sound2:Play()
					local ending = assets.Effects.solemn_black:Clone()
					ending.Parent = workspace
					ending.CFrame = root.CFrame * CFrame.new(0, 0, -50)
					task.wait()
					task.delay(2, function()
						ending:Destroy()
					end)
					for _, v in pairs(ending:GetDescendants()) do
						if v:IsA(""ParticleEmitter"") then
							v:Emit(v:GetAttribute(""EmitCount"") or 1)
						end
					end
					ego:GetMarkerReachedSignal(""15""):Wait()
					victim.Humanoid:TakeDamage(50)
					task.delay(0.00001, function()
						butterfly(player, ""White"", 2)
						if victimPlayer then
							butterfly(victimPlayer, ""White"", 2)
						end
					end)
					local sound2 = assets.Sounds.White:Clone()
					sound2.Parent = root
					sound2:Play()
					local sound3 = assets.Sounds.Ding:Clone()
					sound3.Parent = root
					sound3:Play()
					local ending1 = assets.Effects.solemn_white:Clone()
					ending1.Parent = workspace
					ending1.CFrame = root.CFrame * CFrame.new(0, 0, -50)
					task.wait()
					for _, v in pairs(ending1:GetDescendants()) do
						if v:IsA(""ParticleEmitter"") then
							v:Emit(v:GetAttribute(""EmitCount"") or 1)
							game:GetService(""TweenService""):Create(v, TweenInfo.new(0.2, Enum.EasingStyle.Sine), {TimeScale = 0.1}, true):Play()
						end
					end
					local ending2 = assets.Effects.solemn_black:Clone()
					ending2.Parent = workspace
					ending2.CFrame = root.CFrame * CFrame.new(0, 0, -50)
					task.wait()
					task.delay(10, function()
						ending1:Destroy()
						ending2:Destroy()
					end)
					for _, v in pairs(ending2:GetDescendants()) do
						if v:IsA(""ParticleEmitter"") then
							v:Emit(v:GetAttribute(""EmitCount"") or 1)
							game:GetService(""TweenService""):Create(v, TweenInfo.new(0.2, Enum.EasingStyle.Sine), {TimeScale = 0.1}, true):Play()
						end
					end
					
					task.wait(1.3)
					task.delay(1.25, function()
						camerastuff.NormalizeCamera({player, victimPlayer}, {
						Length = 0.0001,
						EasingStyle = ""Sine"",
						EasingDirection = ""Out"",
						RepeatCount = 0,
						Reverses = false,
						DelayTime = 0
					})	
					end)
					clientmodule.scene(player, 1.25, Color3.fromRGB(0, 0, 0))
					
					if victimPlayer then
						clientmodule.scene(victimPlayer, 1.25, Color3.fromRGB(0, 0, 0))
					end
					task.wait(2)
					for _, v in pairs(ending1:GetDescendants()) do
						if v:IsA(""ParticleEmitter"") then
							game:GetService(""TweenService""):Create(v, TweenInfo.new(0.2, Enum.EasingStyle.Sine), {TimeScale = 1}):Play()
						end
					end
					for _, v in pairs(ending2:GetDescendants()) do
						if v:IsA(""ParticleEmitter"") then
							game:GetService(""TweenService""):Create(v, TweenInfo.new(0.2, Enum.EasingStyle.Sine), {TimeScale = 1}):Play()
						end
					end
					stunanim:Stop()
					victim.HumanoidRootPart.CFrame = root.CFrame * CFrame.new(0,0, -35)
					victim.Humanoid.AutoRotate = true
					victim.HumanoidRootPart.Anchored = false
					humanoid.AutoRotate = false
					humanoid.WalkSpeed = 25
					humanoid.AutoRotate = true
					root.Anchored = false
					butterflyarm.Parent = game.TestService
				end
			end
		end
		task.wait(1)
		debounce = false
	end
end)
game:GetService(""RunService"").Stepped:Connect(function()
	update_bar()
end)

local previous_health = humanoid.Health

humanoid:GetPropertyChangedSignal(""Health""):Connect(function()
	local current_health = humanoid.Health
	if current_health < previous_health then
		ego = math.max(ego + 0.8, 0)
	end
end)
print(""loaded!"")"
Drf4Pw9R,com main example,exnon,C++,Wednesday 18th of June 2025 03:18:52 PM CDT,"    Thread_COM::Receiver* com_receiver = new Thread_COM::Receiver(FBM_1_COM);
    Thread_COM::Sender* com_sender = new Thread_COM::Sender(FBM_2_COM);
    Thread_COM::Receiver* com_dispatcher_receiver = new Thread_COM::Receiver(FBM_1_COM_RECEIVER);
    Thread_COM::Sender* com_dispatcher_sender = new Thread_COM::Sender(FBM_1_DISPATCHER);
    COM*  externCommunication = new COM(com_receiver, com_sender, com_dispatcher_receiver, com_dispatcher_sender);
    externCommunication->start();
	externCommunication->stop();"
FkwS5Njs,2025-06-18T22:06:45.944941,powerampache,PHP,Wednesday 18th of June 2025 03:06:46 PM CDT,"1.01-78 (78) - DB: 83
java.lang.NullPointerException: Parameter specified as non-null is null: method luci.sixsixsix.powerampache2.domain.models.User.<init>, parameter id
	at luci.sixsixsix.powerampache2.domain.models.User.<init>(Unknown Source:20)
	at luci.sixsixsix.powerampache2.data.remote.dto.UserDtoKt.toUser(UserDto.kt:94)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.getUserNetwork(BaseAmpacheRepository.kt:128)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$getUserNetwork$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:811)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:715)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:702)

"
mT4pFrVD,Best Time to Buy & Sell Stocks with Transaction Fee,Fastrail08,C++,Wednesday 18th of June 2025 03:00:07 PM CDT,"#include <bits/stdc++.h>
using namespace std;

void getMaxProfitInfiniteTransactionWithFee(int level, int transactionOpen, int profit, int &maxProfit, vector<int> &prices, int fee){
    
    if(level >= prices.size()){
        maxProfit = max(maxProfit, profit);
        return;
    }
    //levels - each stock price
    //options - buy, sell or don't do anything
    
    // transaction opened / buying
    if(!transactionOpen){
        getMaxProfitInfiniteTransactionWithFee(level + 1, 1, profit - prices[level], maxProfit, prices, fee);
    }
    
    //transaction closed / selling
    if(transactionOpen){
        getMaxProfitInfiniteTransactionWithFee(level + 1, 0, profit + prices[level] - fee, maxProfit, prices, fee);
    }
    
    //Don't do anything / neither buy nor sell
    getMaxProfitInfiniteTransactionWithFee(level + 1, transactionOpen, profit, maxProfit, prices, fee);
    
}

int getMaxProfitInfiniteTransactionWithFeeMemo(int level, int transactionOpen, vector<int> &prices, int fee, vector<vector<int> > &memo){
    
    if(level >= prices.size()){
        return 0;
    }
    
    if(memo[level][transactionOpen] != -1){
        return memo[level][transactionOpen];
    }
    
    //levels - each stock price
    //options - either buy, sell or don't do anything
    
    int bought = 0, sold = 0, na = 0;
    
    //buy only if no transaction opened
    if(!transactionOpen){
        bought += getMaxProfitInfiniteTransactionWithFeeMemo(level + 1, 1, prices, fee, memo) - prices[level];
    }
    
    //sell only if a transaction is open
    if(transactionOpen){
        sold += getMaxProfitInfiniteTransactionWithFeeMemo(level + 1, 0, prices, fee, memo) + prices[level] - fee;
    }
    
    // don't do anything
    na = getMaxProfitInfiniteTransactionWithFeeMemo(level + 1, transactionOpen, prices, fee, memo);
    
    return memo[level][transactionOpen] = max(na, max(bought, sold));
    
}


int getMaxProfitInfiniteTransactionWithFeeDP(vector<int> &prices){
    /*
    Storage & Meaning - dp[i][0] = processing/decision made upto ith level where the transaction ends as closed
                        dp[i][1] = processing/decision made upto ith level where the transaction ends as open
                        
                        dp[i][0] = decision made upto (i - 1)th level and the ith level ends with 0/sell state
                        dp[i][1] = decision made upto (i - 1)the level and the ith level ends with 1/buy state
    */
    
    /*
    Direction - 
    
        Identify where the smaller subproblems and larger subproblems lie. To do this see what is the base case.
        In string DP you can do it from either side, but it is convenient to start from 0th index, as definition will make more sense then.
        
        When you start from left OR from 0th level, generally the subproblems are defined as 'upto ith index ending with char/item/0' and when you start from right OR from (N - 1)th level, subproblems are defined as 'starting from ith index with starting char/item/0'
        
        You will already have answers to smaller subproblems, now you need to explore all the options at previous level for the current level, to see where the arrows will land at.
        
        You need to be able to fill all the cells corresponding to the current level.
        FOR 1D dp dp[i]... you need to be able to fill the cell dp[i]
        
        FOR 2D dp dp[i][j]... you need to be able to fill the cell dp[i][0] upto dp[i][j]
        
        Simply go to just previous states, define them what they, explore the options, [as you explored the options at a level {(i - 1), or some dp[i - 1][j], you will simply move to the next level{(i), dp[i][?], you just need to figure out what dp cell it will fall in at the next level, figure out the ?]. You can figure it out by attaching the option to the meaning of (i - 1) and see what new meaning it has.
        
        For eg - 
        consider question AiBjCk
        dp[i][a] = Stores all the VALID subsequences ENDING with a, when the DECISION is made upto level i.
        dp[i][b] = Stores all the VALID subsequences ENDING with b, when the DECISION is made upto level i.
        dp[i][c] = Stores all the VALID subsequences ENDING with c, when the DECISION is made upto level i.
        
        
        we need to be able to fill any ith level COMPLETELY, EVERY CELL defined at ith level. So the level variable here is i. So we need to be able to fill dp[i][a], dp[i][b], dp[i][c]
        
        To do this go the past level, here (i - 1)[it can be i - 1, or i - 2, just see the recursion code, what are jumps made to the next level (if there is level + 1, level + 2, ..you need to see what all paths from every past level, if we explore the options for arr[i], string[i], item[i])]
        
        In the above question AiBjCk, we are jumping atmost level + 1 in any call, so we just need to explore only the (i - 1)th level, if we are to find answers for ith level.
        
        
        dp[i - 1][a] = all the valid subsequences ending with a, when decision is made upto (i - 1)th level.
        And similarly for dp[i - 1][b] and dp[i - 1][c]. As you are doing DP, you would already have this table filled up for these cells.
        
        What you have to do now is to explore the options which are available at ith level, and explore it here.
        
        for eg - imagine the string was abcbabc, and current ith level is at index 3, that is string[i] = 'b'.
        
        AAYEGA YA NAHI AAYEGA (simple choice for a subsequence)
        The options available at each level is to - 
        include the character or exclude the character
        OR
        Select the character or don't select the character
        OR
        Either character part of subsequence or not the part of subsequence
        
        So for filling up dp[i][b], explore the option 'b' at the previous level so that you can land on the current level.
        
        dp[i][a] stores the answer AFTER it has processed the ith level/char, and you land up on ith level only when you would have explored it at previous state.
        
        So if ith char is 'b', we would be the option available at the previous level (i - 1) is to either include or exclude b
        
        
        
                          dp[i][a]      (exclude b)
                        -
                      -
                    -
        dp[i - 1][a]
                    -
                      -
                        -
                          dp[i][b]      (include b)
        
        
        So doing this for all past states, we get
        
                            dp[i][b]      (exclude b)
                        -
                      -
                    -
        dp[i - 1][b]
                    -
                      -
                        -
                          dp[i][b]        (include b)
        
        
        
                            dp[i][c]      (exclude b)
                        -
                      -
                    -
        dp[i - 1][c]
                    -
                      -
                        -
                          [INVALID CASE]  (include b)
                          
                          
        [INVALID CASE] as - dp[i - 1][c] contains all the subsequences that ends with 'c'. Now you explored the option to include 'b', which means 'b' will be added at the end of the subsequences making all the subsequences end with 'b',  that was already ending with 'c' at the previous level, which will make subsequences of type aabcb, abcb, aabbbccb, which are all invalid cases.
        
        During Recursion we managed to avoid this invalid call by adding a condition s[lastChar] <= s[level], so that if the last char was a, we can call to a,b or c depending on what char lies at current level.
        If last char was b, we can only call to b & c, and if last char was c, we can only call to c to only have valid subsequences at every level.
        
        If current character s[i] = 'b', the answer will be filled in dp[i][b], and to form the answer dp[i][b]
        Option available at the previous level, either to include b or exclude b.
        We see what all paths lead to dp[i][b], from all previous levels dp[i - 1][a], dp[i - 1][b], dp[i - 1][c].
        
        According to the diagram, 1 path from dp[i - 1][a] (option - if b included, now string will end with b)
                                  2 paths from dp[i - 1][b] (both option available, as string will end with b only)
                                  0 paths from dp[i - 1][c] (1 option leads to dp[i][c], other is invalid)
                                  
                                  
                                  
        [INVALID case] = 
        dp[i- 1][c] = agar (i - 1)th level/index padi hui saari subsequences jo 'c' se end hoti hai agar uske aage mai 'b' laga du(include b), to mujhe vo saari subsequences milengi ith level/index pe jo 'b' se end hogi. But 'b' se pehle vo 'c' pe end ho rahi thi, to 'b', 'c' ke baad aaya jiske kaaran subsquence invalid ho jaayega according to question.
                                  
                                  
        
        We will compute this for every possible character - 
        
        IF s[i] = a, then we will fill dp[i][a], options at previous level = either include 'a' or exclude 'a'
        
                            dp[i][a]      (exclude a)
                        -
                      -
                    -
        dp[i - 1][a]
                    -
                      -
                        -
                            dp[i][a]      (include a)
                            
                            
                            
                            dp[i][b]      (exclude a)
                        -
                      -
                    -
        dp[i - 1][b]
                    -
                      -
                        -
                            [INVALID case]  (include a) 
                            
                            
        
                            dp[i][c]       (exclude a)
                        -
                      -
                    -
        dp[i - 1][c]
                    -
                      -
                        -
                            [INVALID case]      (include a)
                            
         
         
        dp[i][a] = dp[i - 1][a] + dp[i - 1][a] + 1  (1 would be there as subsquence a is allowed)
        dp[i - 1][a] = If we don't select the current char 'a' at level i, still the subsequences will be ending with a
         
        dp[i - 1][a] = If we select current char 'a', the subsequences will end with a.
        
        1 = the current character itself is a valid subsequence.
        
        dp[i][a] = 
        dp[i - 1][a] = i - 1 level tak ka decision lene ke baad vo saari subsequences jo 'a' se end hoti hai, uske aage mai current level(ith level) waala 'a' na lagaon, tab bhi mujhe 'a' se end hone waali subsequences milengi, after making decisions upto ith level which is nothing but dp[i][a].
        
        dp[i - 1][a] = i - 1 level tak ka decision lene ke baad vo saari subsequences padi hai yaha pe jo 'a' se end hoti hai, uske aage mai agar current level waala 'a' laga du, ith level ka decision lene tak /process karne ke baad, mujhe 'a' se end hone waali subsequences milengi.
                            
        1 = vo current level waala 'a' khud ek valid subsequence hai
        
        
        
        
        
                            
        IF s[i] = 'c' then we will fill dp[i][c], options at previous level = either include 'c' or exclude 'c'
        
               
                            dp[i][a]      (exclude c)
                        -
                      -
                    -
        dp[i - 1][a]
                    -
                      -
                        -
                            [INVALID CASE]      (include c)
                                    
                                    
               
                            dp[i][b]      (exclude c)
                        -
                      -
                    -
        dp[i - 1][b]
                    -
                      -
                        -
                            dp[i][c]      (include c)
        
        
               
                            dp[i][c]      (exclude c)
                        -
                      -
                    -
        dp[i - 1][c]
                    -
                      -
                        -
                            dp[i][c]      (include c)
                            
        
        
        so dp[i][c] = dp[i - 1][c] + dp[i - 1][c] + dp[i - 1][b]
        
        
        dp[i - 1][c] = agar i - 1th level pe 'c' se end hone waali subsequences ke aage agar mai current level waala 'c' na lagaon to merko 'c' se end hone waali subsequences milengi ith level par
        dp[i - 1][c] = agar i - 1th level pe 'c' se end hone waali subsequences ke aage agar mai current level waala 'c' laga du to to 'c' se end hone waali subsequences hi milengi ith level par
        dp[i - 1][b] = agar i - 1th level pe 'b' se end hone waali saari subsequences ke aage mai 'c' laga du, to mujhe vo saari subsequences mil jaayengi jo 'c' se end hogi ith level par.
        
        
        For any dp[i][j], identify what all smaller states could have made the answer for the current state, 
        analyse all the valid options at previous level(here, i - 1) and when you explore an option [that is when 
        you make a recursive call from a level to the next level]
        
        In recursion when you are on a level, you analyse what all VALID options are(sudoku, binary strings)
        and then you try to explore each option by making a recursive call, which takes you to the next level.
        
        
    */
}

int main() {
	// your code goes here
    int n, fee;
    cin >> n;
    vector<int> prices(n);
    for(int i = 0; i < n; i++){
        cin >> prices[i];
    }
    cin >> fee;
    /*
    RECURSION CALL
        int maxProfit = 0;
        getMaxProfitInfiniteTransactionWithFee(0, 0, 0, maxProfit, prices, fee);
        cout << maxProfit << '\n';
    */
    
    /*
    MEMO CALL
        
    
    */
    vector<vector<int> > memo(n, vector<int>(2, -1));
    cout << getMaxProfitInfiniteTransactionWithFeeMemo(0, 0, prices, fee, memo) << '\n';
}
"
wwwhEqTP,Fingerprint Unlock Front Door - And If,Caddac,YAML,Wednesday 18th of June 2025 02:23:02 PM CDT,"{{
   not trigger.event.data.old_state.attributes.get('restored', false) and
   not trigger.event.data.old_state.state == 'unavailable' and
   trigger.event.data.new_state is not none and
   trigger.event.data.new_state.attributes.event_type == 'identified' and
   (trigger.event.data.new_state.attributes.ulp_id|default('')) != ''
}}"
auApdkiv,kolprem_buzzer.c,olelek,C,Wednesday 18th of June 2025 01:46:13 PM CDT,"/*
 * kolprem_buzzer.c
 *
 * Created: 2019-02-06 10:25:48
 * Author : a
 
 Buzzer connected to PB0:PA4
 INPUTS:	
 6	PA5 AIN5 - main input
 7	PA6 AIN6
 8	PA7 AIN7
 9	PB5 AIN8
 10	PB4 AIN9 (TXD)
 
 Workflow:
 The MCU monitors the AIN5 analog input, and when it detects a rising edge defined by thershold levels low_tsh and high_tsh,
 it activates buzzer for 1 second (generating ~3.3kHz square wave frequency on pins PB0 & PA4).
 
 
 
 */ 
#define F_CPU	32000UL

#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include <avr/sleep.h>
#include <avr/eeprom.h>
#include <avr/lock.h>

LOCKBITS = (LB_RWLOCK_gc);



volatile uint8_t start_signal = 1; //1 after rising edge
volatile uint8_t lastState = 0, currentState = 0;
const uint8_t low_tsh=(uint8_t)256.0*0.8/5.0, high_tsh=(uint8_t)256.0*1.2/5.0;
const char info[] EEMEM = ""Kolprem bnuzzer REV 02. Analog readout. Rising-edge trigger above 1.2V."";
extern void ccp_write_io(void *addr, uint8_t value);


int8_t DIGITAL_GLUE_LOGIC_0_init()
{

	// Enable Protected register, peripheral must be disabled (ENABLE=0, in TCD.LUT0CTRLA).

	// CCL.SEQCTRL0 = CCL_SEQSEL_DISABLE_gc /* Sequential logic disabled */;

	CCL.TRUTH0 = 1; /* Truth 0: 1 */

	// CCL.LUT0CTRLC = CCL_INSEL2_MASK_gc /* Masked input */;

	CCL.LUT0CTRLB = CCL_INSEL0_TCA0_gc /* TCA0 WO0 input source */
	| CCL_INSEL1_MASK_gc /* Masked input */;

	CCL.LUT0CTRLA = 0 << CCL_CLKSRC_bp       /* Clock Source Selection: disabled */
	| CCL_EDGEDET_DIS_gc     /* Edge detector is disabled */
	| CCL_FILTSEL_DISABLE_gc /* Filter disabled */
	| 1 << CCL_ENABLE_bp     /* LUT Enable: enabled */
	| 1 << CCL_OUTEN_bp;     /* Output Enable: enabled */

	// CCL.TRUTH1 = 0; /* Truth 1: 0 */

	// CCL.LUT1CTRLC = CCL_INSEL2_MASK_gc /* Masked input */;

	// CCL.LUT1CTRLB = CCL_INSEL0_MASK_gc /* Masked input */
	//		 | CCL_INSEL1_MASK_gc /* Masked input */;

	CCL.LUT1CTRLA = 0 << CCL_CLKSRC_bp       /* Clock Source Selection: disabled */
	| CCL_EDGEDET_DIS_gc     /* Edge detector is disabled */
	| CCL_FILTSEL_DISABLE_gc /* Filter disabled */
	| 0 << CCL_ENABLE_bp     /* LUT Enable: disabled */
	| 1 << CCL_OUTEN_bp;     /* Output Enable: enabled */

	CCL.CTRLA = 1 << CCL_ENABLE_bp      /* Enable: enabled */
	| 0 << CCL_RUNSTDBY_bp; /* Run in Standby: disabled */

	return 0;
}
/************************************************************************/
/* CLK init CPU_CLK=32Khz                                                                     */
/************************************************************************/
int8_t CLKCTRL_init()
{

	// ccp_write_io((void*)&(CLKCTRL.OSC32KCTRLA),0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.XOSC32KCTRLA),CLKCTRL_CSUT_1K_gc /* 1k cycles */
	//		 | 0 << CLKCTRL_ENABLE_bp /* Enable: disabled */
	//		 | 0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */
	//		 | 0 << CLKCTRL_SEL_bp /* Select: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.OSC20MCTRLA),0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */);

	ccp_write_io((void *)&(CLKCTRL.MCLKCTRLB),
	CLKCTRL_PDIV_6X_gc /* 6 */
	| 0 << CLKCTRL_PEN_bp /* Prescaler enable: disabled */);

	ccp_write_io((void *)&(CLKCTRL.MCLKCTRLA),
	CLKCTRL_CLKSEL_OSCULP32K_gc /* 32KHz Internal Ultra Low Power Oscillator (OSCULP32K) */
	| 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	/* wait for system oscillator changing to finish */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm) {
	}

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}

void GPIO_init(void)
{
	/* Buzzer PB0:PA4 */
	/* INPUT PA5 AIN5 */
	/* GPIO */
	PORTA_OUTSET = PIN4_bm;
	PORTB_DIRSET = PIN0_bm;
	
	//PORTA_PIN5CTRL = PORT_PULLUPEN_bm;
	DIGITAL_GLUE_LOGIC_0_init();
}

void TCA0_init(void){
	/* Timer A configuration - audio freq. output */
	TCA0_SINGLE_CTRLA = TCA_SINGLE_ENABLE_bm;
	TCA0_SINGLE_CTRLB = TCA_SINGLE_WGMODE_FRQ_gc|TCA_SINGLE_CMP0_bm;
	TCA0_SINGLE_CMP0 = 4; // 550 = 3Khz @ CPU_CLK = 3.3MHz; 4 = 3.3KHz @ CPU_CLK=32Khz
	
	TCA0_SINGLE_CNT = 0;
	TCA0_SINGLE_CTRLA = 0;
	/* Timer B configuration - pulse freq. output */
	TCB0_CTRLA = TCB_ENABLE_bm;
	TCB0_CTRLB = 0;
	
	
}

void ADC_init(void){
	ADC0_CTRLA = ADC_RUNSTBY_bm|ADC_RESSEL_bm|ADC_ENABLE_bm;
	ADC0_CTRLB = ADC_SAMPNUM_ACC4_gc; 
	ADC0_CTRLC = ADC_REFSEL_VDDREF_gc|ADC_PRESC_DIV2_gc;
	ADC0_MUXPOS = ADC_MUXPOS_AIN5_gc;
	ADC0_INTCTRL = ADC_RESRDY_bm;
	ADC0_COMMAND = ADC_STCONV_bm;
	
}

void signal_on(void){
	TCA0_SINGLE_CTRLA = TCA_SINGLE_ENABLE_bm;
}

void signal_off(void){
	TCA0_SINGLE_CTRLA = 0;
}

int main(void)
{
	sei();
	GPIO_init();
	TCA0_init();
	signal_off();
	CLKCTRL_init();
    ADC_init();
	
	while (1) 
    {
		
		if(start_signal){
			signal_on();
			_delay_ms(1000);
			signal_off();
			_delay_ms(1000);
			start_signal = 0;
			//go to idle sleep
			set_sleep_mode(SLEEP_MODE_STANDBY);
			sleep_enable();
			sleep_cpu();
		}
    }//while(1)
}


/************************************************************************/
/* ADC ISR                                                              */
/************************************************************************/
ISR(ADC0_RESRDY_vect){
	
	lastState = currentState;
	//calculate current state
	if (ADC0_RES > high_tsh)
	{
		currentState = 1;
	}
	if (ADC0_RES < low_tsh)
	{
		currentState = 0;
	}
	
	//rising edge detection
	if ((currentState ==1) && (lastState == 0))
	{
		start_signal = 1;
	}
	//start next aquisition
	ADC0_INTFLAGS = ADC_RESRDY_bm;
	ADC0_COMMAND = ADC_STCONV_bm;
}


"
PwuHJ80M,Grow A Garden Anti-Steal V1,velvetkk,Lua,Wednesday 18th of June 2025 01:44:15 PM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/castleofsolace/GAGAntiSteal/refs/heads/main/MAIN.lua""))()

-- THIS SCRIPT WILL BE GETTING MANY UPDATES BECAUSE BYPASSES WILL SOON APPEAR!!!
-- Due to the heavy influx of now trending GAG stealers, i've decided to make an Anti-Steal script, here's how it works
-- Once you execute the script, it will automatically lock/favorite all your valuable items, or you can select manually in the GUI,
-- Once the player joining you will try to steal your items, even if the stealer works well - your stuff will be in your inventory all the time, you won't lost ANYTHING unless you leave the game, STAY. IN. THE. GAME, or else this won't work!!!
-- It will also send a webhook notification to your server that it works
-- Once you execute someone's script you've found, my Anti-Steal will notify you whether it's a stealer or not, will give you the username of the person trying to steal your stuff and will also send their webhook to your server.

-- I'm not responsible for any damages caused to you or anyone else while using this script, i simply made it for fun and safety purposes"
2xKdc3hJ,minage A* test,Vodka51200,Lua,Wednesday 18th of June 2025 01:31:33 PM CDT,"-- === CONFIGURATION ===
local blacklist = {
  [""minecraft:lava""] = true,
  [""minecraft:bedrock""] = true,
}

-- === SAISIE UTILISATEUR ===
print(""Largeur (X) ?"")
local sizeX = tonumber(read())
print(""Hauteur (Y) ?"")
local sizeY = tonumber(read())
print(""Profondeur (Z) ?"")
local sizeZ = tonumber(read())

-- === ETAT DE LA TORTUE ===
local position = {x = 0, y = 0, z = 0}
local facing = 0 -- 0=nord, 1=est, 2=sud, 3=ouest

-- === UTILITAIRES DE DÉPLACEMENT ===
function faceTo(dir)
  while facing ~= dir do
    turtle.turnRight()
    facing = (facing + 1) % 4
  end
end

function moveForward()
  if turtle.forward() then
    if facing == 0 then position.z = position.z + 1
    elseif facing == 1 then position.x = position.x + 1
    elseif facing == 2 then position.z = position.z - 1
    elseif facing == 3 then position.x = position.x - 1 end
    return true
  end
  return false
end

function moveUp()
  if turtle.up() then
    position.y = position.y + 1
    return true
  end
  return false
end

function moveDown()
  if turtle.down() then
    position.y = position.y - 1
    return true
  end
  return false
end

-- === MINAGE SÉCURISÉ ===
function isBlacklisted(name)
  return blacklist[name] == true
end

function safeDig(inspectFunc, digFunc)
  local success, data = inspectFunc()
  if success and isBlacklisted(data.name) then return false end
  if success then digFunc() end
  return true
end

function mineForward()
  if not safeDig(turtle.inspect, turtle.dig) then return false end
  return moveForward()
end

function mineUp()
  if not safeDig(turtle.inspectUp, turtle.digUp) then return false end
  return moveUp()
end

function mineDown()
  if not safeDig(turtle.inspectDown, turtle.digDown) then return false end
  return moveDown()
end

-- === GÉNÉRATION DES COORDONNÉES À MINER ===
function generateMiningTargets(sx, sy, sz)
  local targets = {}
  for y = 0, sy - 1 do
    for z = 0, sz - 1 do
      for x = 0, sx - 1 do
        table.insert(targets, {x = x, y = y, z = z})
      end
    end
  end
  return targets
end

-- === A* ===
function makeNode(x, y, z)
  return {x = x, y = y, z = z, g = 0, h = 0, f = 0, parent = nil}
end

function heuristic(a, b)
  return math.abs(a.x - b.x) + math.abs(a.y - b.y) + math.abs(a.z - b.z)
end

function positionKey(pos)
  return pos.x..""|""..pos.y..""|""..pos.z
end

function isBlocked(x, y, z)
  turtle.select(1)
  local px, py, pz = position.x, position.y, position.z
  local dx, dy, dz = x - px, y - py, z - pz

  if dx == 0 and dy == 0 and dz == 1 then
    local ok, data = turtle.inspect()
    return ok and isBlacklisted(data.name)
  elseif dx == 0 and dy == 1 and dz == 0 then
    local ok, data = turtle.inspectUp()
    return ok and isBlacklisted(data.name)
  elseif dx == 0 and dy == -1 and dz == 0 then
    local ok, data = turtle.inspectDown()
    return ok and isBlacklisted(data.name)
  else
    return false -- inconnu
  end
end

function astar(start, goal)
  local openSet = {[positionKey(start)] = makeNode(start.x, start.y, start.z)}
  local openList = {openSet[positionKey(start)]}
  local closedSet = {}

  while #openList > 0 do
    local currentIndex = 1
    for i = 2, #openList do
      if openList[i].f < openList[currentIndex].f then
        currentIndex = i
      end
    end
    local current = table.remove(openList, currentIndex)
    openSet[positionKey(current)] = nil

    if current.x == goal.x and current.y == goal.y and current.z == goal.z then
      local path = {}
      while current do
        table.insert(path, 1, {x = current.x, y = current.y, z = current.z})
        current = current.parent
      end
      return path
    end

    closedSet[positionKey(current)] = true

    for _, dir in ipairs({
      {1, 0, 0}, {-1, 0, 0},
      {0, 1, 0}, {0, -1, 0},
      {0, 0, 1}, {0, 0, -1}
    }) do
      local nx, ny, nz = current.x + dir[1], current.y + dir[2], current.z + dir[3]
      local key = nx..""|""..ny..""|""..nz

      if not closedSet[key] and not isBlocked(nx, ny, nz) then
        local neighbor = makeNode(nx, ny, nz)
        neighbor.g = current.g + 1
        neighbor.h = heuristic(neighbor, goal)
        neighbor.f = neighbor.g + neighbor.h
        neighbor.parent = current

        if not openSet[key] then
          openSet[key] = neighbor
          table.insert(openList, neighbor)
        end
      end
    end
  end
  return nil
end

-- === ALLER VERS UNE COORDONNÉE ===
function goTo(target)
  local dx = target.x - position.x
  local dy = target.y - position.y
  local dz = target.z - position.z

  if dy > 0 then for i = 1, dy do mineUp() end
  elseif dy < 0 then for i = 1, -dy do mineDown() end end

  if dx ~= 0 then
    faceTo((dx > 0) and 1 or 3)
    for i = 1, math.abs(dx) do mineForward() end
  end

  if dz ~= 0 then
    faceTo((dz > 0) and 0 or 2)
    for i = 1, math.abs(dz) do mineForward() end
  end
end

-- === PROGRAMME PRINCIPAL ===
local miningTargets = generateMiningTargets(sizeX, sizeY, sizeZ)

for i, target in ipairs(miningTargets) do
  print(string.format(""[%d/%d] Calcul vers (%d,%d,%d)"", i, #miningTargets, target.x, target.y, target.z))
  local path = astar(position, target)
  if path then
    for j = 2, #path do
      goTo(path[j])
    end
  else
    print(""⚠️ Chemin bloqué vers "", target.x, target.y, target.z)
  end
end

-- === RETOUR AU DÉPART ===
print(""Retour au point de départ..."")
local returnPath = astar(position, {x = 0, y = 0, z = 0})
if returnPath then
  for i = 2, #returnPath do
    goTo(returnPath[i])
  end
  print(""✅ Retour terminé."")
else
  print(""❌ Impossible de retourner au point de départ."")
end
"
jWHxZr14,Dumps,LVL23HT,CSS,Wednesday 18th of June 2025 12:47:03 PM CDT,0c260852f09987b16f29fd036faf333ec2d65725
ZcMU31TN,Extreme Reactors Control 2025 Optimized Backup,Kazadaoex,Lua,Wednesday 18th of June 2025 12:03:31 PM CDT,"--[[
Optimised Adaptive Turbine Controller with Feedback Rods
--------------------------------------------------------
* Layout, colours, button coordinates, labels and overall behaviour are **identical** to the original program supplied in your first message.
* The **only** changes are internal optimisations (no blocking sleeps inside the main loop, nil‑safety, double‑buffered drawing) so the UI feels instantaneous.

Version: 2025‑06‑14
]]--

---------------------------------------------------------------------
-- 1. CONFIGURATION --------------------------------------------------
---------------------------------------------------------------------

local reactorName       = ""BigReactors-Reactor_0""
local turbineName       = ""BigReactors-Turbine_0""
local monitorName       = ""monitor_0""
local FLOW_PERSIST_FILE = ""nominal_flow.txt""

local RPM_TARGET, RPM_TOLERANCE = 1800, 5
local COIL_ON_RPM    = RPM_TARGET -- engage inductor when at or above
local COIL_OFF_RPM   = RPM_TARGET -- RPM_TOLERANCE -- disengage when below

local FLOW_TUNE_LOWER, FLOW_TUNE_UPPER = 100, 2000 -- hard bounds
local MAX_TUNE_ITER  = 7                              -- binary-search passes

-- Fuel/control bar geometry (unchanged)
local CTRLBAR_X, CTRLBAR_Y, CTRLBAR_WD, CTRLBAR_HT, CTRLBAR_SPC = 76, 6, 3, 30, 3
local TURBAR_X, TURBAR_Y, TURBAR_WD, TURBAR_HT, TURBAR_SPC = 88, 6, 3, 30, 3

-- RPM progress bar geometry
local RPMBAR_X, RPMBAR_Y, RPMBAR_H, RPMBAR_W = 3, 21, 3, 70

-- Dynamics
local FLOW_BUFFER      = 0.10  -- % extra flow when we are too slow
local DECEL_FRACTION   = 0.25  -- fraction of flow to keep when too fast
local FLOW_LEARN_STEP  = 2     -- learning granularity (mB/t per loop)

-- UI refresh cadence (seconds).  0.25 s ⇒ 4 FPS; change if needed.
local UPDATE_PERIOD    = 0.25

---------------------------------------------------------------------
-- 2. UTILITY HELPERS ------------------------------------------------
---------------------------------------------------------------------

--- Return numeric `v` or fallback `d` if v is nil.
local function num(v, d) if v == nil then return d end; return v end

--- Pad a string on the right so residual characters are overwritten.
local function pad(str, width)
  if #str < width then str = str .. string.rep("" "", width-#str) end
  return str
end

---------------------------------------------------------------------
-- 3. UI PRIMITIVES (unchanged API) ---------------------------------
---------------------------------------------------------------------

UI = {}

function UI.rectangle(wd,x,y,w,h,color)
  local win = window.create(wd,x,y,w,h,true)
  win.setBackgroundColor(color); win.clear(); return win
end

function UI.bar(wd,x,y,w,h,bg,segments,max)
  local bar = UI.rectangle(wd,x,y,w,h,bg)
  local total = max or 100
  if h < w then -- horizontal
    local px = 1
    for _,s in ipairs(segments) do
      local segW = math.floor((s.p/total)*w + 0.5)
      UI.rectangle(bar,px,1,segW,h,s.color); px = px+segW
    end
  else           -- vertical (bottom‑up fill)
    local py = h
    for _,s in ipairs(segments) do
      local segH = math.floor((s.p/total)*h + 0.5)
      UI.rectangle(bar,1,py-segH+1,w,segH,s.color); py = py-segH
    end
  end
end

function UI.progress_bar(wd,x,y,w,h,p,bg,fg)
  UI.bar(wd,x,y,w,h,bg,{{p=p,color=fg}},100)
end

function UI.drawRect(wd,x,y,w,h,color)
  wd.setTextColor(color or colors.white)
  wd.setCursorPos(x,y);   wd.write(""+"" .. string.rep(""-"",w-2) .. ""+"")
  for i=1,h-2 do wd.setCursorPos(x,y+i); wd.write(""|"" .. string.rep("" "",w-2) .. ""|"") end
  wd.setCursorPos(x,y+h-1); wd.write(""+"" .. string.rep(""-"",w-2) .. ""+"")
end

function UI.drawTable(wd,x,y,cols,rows,cellW,cellH,color)
  wd.setTextColor(color or colors.white)
  local tW,tH=cols*cellW+1,rows*cellH+1
  for dy=0,tH-1 do
    for dx=0,tW-1 do
      local cx,cy=x+dx,y+dy
      local rowLine=(dy%cellH==0); local colLine=(dx%cellW==0)
      local ch = (rowLine and colLine) and ""+"" or rowLine and ""-"" or colLine and ""|"" or "" ""
      wd.setCursorPos(cx,cy); wd.write(ch)
    end
  end
end

local function UIHeader(wd,x,y,w,h,text,bg,fg)
  local hdr=UI.rectangle(wd,x,y,w,h,bg)
  wd.setTextColor(fg)
  wd.setCursorPos(x+math.floor(w/2-#text/2),y+math.floor(h/2))
  wd.write(text)
end

---------------------------------------------------------------------
-- 4. PERIPHERAL SET‑UP ---------------------------------------------
---------------------------------------------------------------------

local reactor = peripheral.wrap(reactorName)  or error(""Reactor not found"")
local turbine = peripheral.wrap(turbineName)  or error(""Turbine not found"")
local monitor = peripheral.wrap(monitorName) or peripheral.find(""monitor"") or error(""Monitor not found"")

monitor.setTextScale(0.5)
monitor.setBackgroundColor(colors.black)
monitor.setTextColor(colors.white)
monitor.clear()

---------------------------------------------------------------------
-- 5. FLOW AUTOTUNE (runs once) -------------------------------------
---------------------------------------------------------------------

local function readFlow()
  if fs.exists(FLOW_PERSIST_FILE) then
    local file=fs.open(FLOW_PERSIST_FILE,""r""); local v=tonumber(file.readAll()); file.close();
    if v then return math.floor(v) end
  end
end

local function writeFlow(v)
  local file=fs.open(FLOW_PERSIST_FILE,""w""); file.write(tostring(v)); file.close()
end

local function tuneFlow()
  local best, bestDelta=nil, math.huge
  local lo,hi=FLOW_TUNE_LOWER,FLOW_TUNE_UPPER
  for _=1,MAX_TUNE_ITER do
    local tf=math.floor((lo+hi)/2)
    turbine.setFluidFlowRateMax(tf)
    os.sleep(1)
    local r1=turbine.getRotorSpeed(); os.sleep(2); local r2=turbine.getRotorSpeed()
    local d=math.abs(r2-r1)
    if     r2>RPM_TARGET+RPM_TOLERANCE then hi=tf-1
    elseif r2<RPM_TARGET-RPM_TOLERANCE then lo=tf+1
    else  if d<bestDelta then best,bestDelta=tf,d end; if d<=1 then break end end
  end
  best = best or FLOW_TUNE_UPPER; writeFlow(best); return best
end

---------------------------------------------------------------------
-- 6. FAST, NON‑BLOCKING CONTROL RODS -------------------------------
---------------------------------------------------------------------

local function adjustRodsForSteam(targetSteam, margin)
  local produced = num(reactor.getHotFluidProducedLastTick(),0)
  local diff=targetSteam-produced; if math.abs(diff)<=margin then return end
  local lvl=num(reactor.getControlRodLevel(0),0)
  if diff>0 then lvl=math.max(0,lvl-2) else lvl=math.min(100,lvl+2) end
  reactor.setAllControlRodLevels(lvl)
end

---------------------------------------------------------------------
-- 7. BUTTONS & INTERACTION -----------------------------------------
---------------------------------------------------------------------

local TBL_X,TBL_Y=42,26 -- status LED table origin
local ADJ_BTN_X_LEFT,ADJ_BTN_Y,ADJ_BTN_W,ADJ_BTN_H=24,27,7,3
local ADJ_BTN_X_RIGHT=ADJ_BTN_X_LEFT+ADJ_BTN_W+1
local ADJ_ROW_SPACING=1
local ADJ_OFFSETS={-10,10,-2,2,-1,1}
local ADJ_LABELS={""-10"",""+10"",""-2"",""+2"",""-1"",""+1""}
local ADJ_CLR,ADJ_TXTCLR=colors.blue,colors.black

learnedFlow = readFlow() or tuneFlow() -- forward declaration

local function drawAdjButtons()
  for row=0,2 do
    local y=ADJ_BTN_Y+row*(ADJ_BTN_H+ADJ_ROW_SPACING)
    UI.rectangle(monitor,ADJ_BTN_X_LEFT ,y,ADJ_BTN_W,ADJ_BTN_H,ADJ_CLR)
    UI.rectangle(monitor,ADJ_BTN_X_RIGHT,y,ADJ_BTN_W,ADJ_BTN_H,ADJ_CLR)
	monitor.setBackgroundColor(colors.blue)
    monitor.setTextColor(colors.black)
    monitor.setCursorPos(ADJ_BTN_X_LEFT+2 ,y+1); monitor.write(ADJ_LABELS[row*2+1])
    monitor.setCursorPos(ADJ_BTN_X_RIGHT+2,y+1); monitor.write(ADJ_LABELS[row*2+2])
  end
  monitor.setBackgroundColor(colors.black)
end

local function handleTouch(x,y)
  for row=0,2 do
    local y0=ADJ_BTN_Y+row*(ADJ_BTN_H+ADJ_ROW_SPACING)
    if y>=y0 and y<y0+ADJ_BTN_H then
      if x>=ADJ_BTN_X_LEFT and x<ADJ_BTN_X_LEFT+ADJ_BTN_W then
        learnedFlow=math.min(FLOW_TUNE_UPPER,math.max(FLOW_TUNE_LOWER,learnedFlow+ADJ_OFFSETS[row*2+1]))
        writeFlow(learnedFlow); return
      elseif x>=ADJ_BTN_X_RIGHT and x<ADJ_BTN_X_RIGHT+ADJ_BTN_W then
        learnedFlow=math.min(FLOW_TUNE_UPPER,math.max(FLOW_TUNE_LOWER,learnedFlow+ADJ_OFFSETS[row*2+2]))
        writeFlow(learnedFlow); return
      end
    end
  end
end

---------------------------------------------------------------------
-- 8. DYNAMIC UI COMPONENTS -----------------------------------------
---------------------------------------------------------------------

-- fuel / rod bar
local function drawFuelRod()
  local fMax=num(reactor.getFuelAmountMax(),1) -- avoid /0
  local fAmt=num(reactor.getFuelAmount(),0)
  local wAmt=num(reactor.getWasteAmount(),0)
  local fPercent=fAmt/fMax; local wPercent=wAmt/fMax
  local fht=math.floor(fPercent*CTRLBAR_HT+0.5)
  local wht=math.floor(wPercent*CTRLBAR_HT+0.5)

  UI.rectangle(monitor,CTRLBAR_X,CTRLBAR_Y,2 + (CTRLBAR_SPC + CTRLBAR_WD) * 4 - CTRLBAR_WD,CTRLBAR_HT+2,colors.lightGray)

  UI.progress_bar(monitor,CTRLBAR_X+1,CTRLBAR_Y+1,CTRLBAR_WD,CTRLBAR_HT,100-num(reactor.getControlRodLevel(0),0),colors.blue,colors.gray)
  UI.rectangle(monitor,CTRLBAR_X+CTRLBAR_SPC+CTRLBAR_WD+1,CTRLBAR_Y+1,CTRLBAR_WD,CTRLBAR_HT,colors.gray)
  UI.rectangle(monitor,CTRLBAR_X+CTRLBAR_SPC+CTRLBAR_WD+1,CTRLBAR_Y+1+CTRLBAR_HT-fht,CTRLBAR_WD,fht,colors.orange)
  UI.rectangle(monitor,CTRLBAR_X+CTRLBAR_SPC+CTRLBAR_WD+1,CTRLBAR_Y+1,wht>0 and CTRLBAR_WD or 1,wht,colors.green)

  local fluidMax=num(turbine.getFluidAmountMax(),1)
  local fluidAmt=num(turbine.getInputAmount())
  local fluidPercent=fluidAmt/fluidMax;
  local fluidht=math.floor(fluidPercent*TURBAR_HT+0.5)

  local clntMax=num(reactor.getCoolantAmountMax(),1)
  local clntAmt=num(reactor.getCoolantAmount())
  local clntPercent=clntAmt/clntMax;
  local clntht=math.floor(clntPercent*TURBAR_HT+0.5)

--  UI.rectangle(monitor,TURBAR_X,TURBAR_Y,TURBAR_SPC+2+TURBAR_WD*2,TURBAR_HT+2,colors.lightGray)
  UI.rectangle(monitor,TURBAR_X+1,TURBAR_Y+1,TURBAR_WD,TURBAR_HT,colors.gray)
  UI.rectangle(monitor,TURBAR_X+1,TURBAR_Y+1+TURBAR_HT-fluidht,TURBAR_WD,fluidht,colors.lightBlue)

  UI.rectangle(monitor,TURBAR_X+TURBAR_WD+TURBAR_SPC+1,TURBAR_Y+1,TURBAR_WD,TURBAR_HT,colors.gray)
  UI.rectangle(monitor,TURBAR_X+TURBAR_WD+TURBAR_SPC+1,TURBAR_Y+1+TURBAR_HT-clntht,TURBAR_WD,clntht,colors.cyan)

end


-- UI.rectangle(monitor,TURBAR_X,TURBAR_Y,TURBAR_SPC+2+TURBAR_WD*2,TURBAR_HT+2,colors.lightGray)
  

local function drawRPMgraph(rpm)
  local percent=math.min(1,rpm/(RPM_TARGET+200))*100
  UI.drawRect(monitor,RPMBAR_X-1,RPMBAR_Y-1,72,RPMBAR_H+2,colors.orange)
  monitor.setTextColor(colors.orange)
  monitor.setCursorPos(RPMBAR_X+2,RPMBAR_Y-1); monitor.write(""TURBINE RPM"")
  UI.progress_bar(monitor,RPMBAR_X,RPMBAR_Y,RPMBAR_W,RPMBAR_H,percent,colors.gray,colors.lime)
  monitor.setTextColor(colors.white)
end

-- RPM status badge inside orange box
local function drawRPMStatus(state)
  local labels={
    [0]={""RPM LOW"" ,colors.orange,colors.orange},
    [1]={""RPM HIGH"",colors.red   ,colors.red   },
    [2]={""NOMINAL"" ,colors.blue  ,colors.green },
  }
  local s=labels[state] or labels[0]
  UI.drawRect(monitor,2,26,19,13,colors.orange) -- outline already static but redraw to clear old label
  UI.drawRect(monitor,2,29,19,7,colors.orange)
  UIHeader(monitor,3,30,17,5,s[1],s[2],s[3])
  monitor.setTextColor(colors.white)
end

---------------------------------------------------------------------
-- 9. STATIC CHROME (draw once) -------------------------------------
---------------------------------------------------------------------

local function drawChrome()
  UIHeader(monitor,1,1,164,3,""MAIN SYSTEMS INFORMATION PANEL - BLOCK A"",colors.lightBlue,colors.orange)
  -- static frames
  UI.drawRect(monitor,2,26,19,13,colors.orange)
  UI.drawRect(monitor,2,29,19,7,colors.orange)
  UI.drawRect(monitor,ADJ_BTN_X_LEFT-1,ADJ_BTN_Y-1,17,13,colors.orange)
  UI.drawTable(monitor,TBL_X,TBL_Y,1,4,17,3,colors.orange)
  UI.drawTable(monitor,TBL_X+17,TBL_Y,2,4,7,3,colors.orange)
  UI.drawTable(monitor,2,6,1,4,31,3,colors.orange)  -- fluid info frame
  UI.drawTable(monitor,42,6,1,4,31,3,colors.orange) -- fuel info frame
  UI.drawTable(monitor,101,6,1,10,31,3,colors.orange) -- general info frame
  UI.drawTable(monitor,135,6,2,5,13,6,colors.orange) -- general info LED

  drawAdjButtons()
end

---------------------------------------------------------------------
-- 10. INITIALISATION ------------------------------------------------
---------------------------------------------------------------------

learnedFlow = readFlow() or tuneFlow()
local lastRPM=num(turbine.getRotorSpeed(),0)
local coilEngaged=turbine.getInductorEngaged()
local stableTicks=0
local RPMSTATUS=0 -- 0 low, 1 high, 2 nominal

monitor.clear(); drawChrome()

---------------------------------------------------------------------
-- 11. MAIN LOOP -----------------------------------------------------
---------------------------------------------------------------------
while true do
  -------------------------------------------------------------------
  -- schedule next UI tick
  local timer=os.startTimer(UPDATE_PERIOD)

  -------------------------------------------------------------------
  -- SENSOR READ -----------------------------------------------------
  local rpm=num(turbine.getRotorSpeed(),0)
  local drift=rpm-lastRPM; lastRPM=rpm

  -------------------------------------------------------------------
  -- INDUCTOR COIL LOGIC --------------------------------------------
  if not coilEngaged and rpm>=COIL_ON_RPM   then coilEngaged=true end
  if coilEngaged     and rpm<=COIL_OFF_RPM then coilEngaged=false end

  -------------------------------------------------------------------
  -- ADAPTIVE FLOW LOGIC --------------------------------------------
  local flow; local ventMsg
  if rpm<RPM_TARGET-RPM_TOLERANCE then
    flow=math.floor(learnedFlow*(1+FLOW_BUFFER)); ventMsg=""OVERFLOW""; RPMSTATUS=0; turbine.setVentOverflow()
    learnedFlow=math.min(FLOW_TUNE_UPPER,learnedFlow+FLOW_LEARN_STEP); writeFlow(learnedFlow); stableTicks=0
  elseif rpm>RPM_TARGET+RPM_TOLERANCE then
    flow=math.max(1,math.floor(learnedFlow*DECEL_FRACTION)); ventMsg=""ALL""; RPMSTATUS=1; turbine.setVentAll()
    learnedFlow=math.max(FLOW_TUNE_LOWER,learnedFlow-FLOW_LEARN_STEP); writeFlow(learnedFlow); stableTicks=0
  else
    flow=learnedFlow; ventMsg=""OVERFLOW""; RPMSTATUS=2; turbine.setVentOverflow(); stableTicks=stableTicks+1
    if stableTicks>=4 then
      if rpm<RPM_TARGET then learnedFlow=math.min(FLOW_TUNE_UPPER,learnedFlow+1)
      else                    learnedFlow=math.max(FLOW_TUNE_LOWER,learnedFlow-1) end
      writeFlow(learnedFlow); stableTicks=0
    end
  end

  -------------------------------------------------------------------
  -- APPLY CONTROLS --------------------------------------------------
  turbine.setFluidFlowRateMax(flow)
  turbine.setInductorEngaged(coilEngaged)
  adjustRodsForSteam(math.floor(flow*1.03),2)

  -------------------------------------------------------------------
  -- DYNAMIC UI UPDATE ----------------------------------------------
  drawRPMgraph(rpm)
  drawFuelRod()
  -- drawFluidAmount()
  drawRPMStatus(RPMSTATUS)

  local function w(x,y,str) monitor.setCursorPos(x,y); monitor.write(pad(str,28)) end
  -- high‑frequency numeric/status strings
  w(102,10,""Inductors: "" .. (coilEngaged and ""ENGAGED"" or ""DISENGAGED""))
  w(102,13,""Vent Mode: "" .. ventMsg)

  monitor.setCursorPos(102,19); monitor.write(pad(string.format(""Energy/t      : %6.1f kFE/t"",num(turbine.getEnergyProducedLastTick(),0)/1000),28))
  monitor.setCursorPos(102,22); monitor.write(pad(string.format(""Energy Stored : %6.1f kFE"",num(turbine.getEnergyStored(),0)/1000),28))
  monitor.setCursorPos(102,28); monitor.write(pad(string.format(""Casing Temp   : %6.1f °C"",num(reactor.getCasingTemperature(),0)),28))
  monitor.setCursorPos(102,31); monitor.write(pad(string.format(""Fuel   Temp   : %6.1f °C"",num(reactor.getFuelTemperature(),0)),28))
  monitor.setCursorPos(102,34); monitor.write(pad(string.format(""Fuel Consumed : %6.1f mB/t"",num(reactor.getFuelConsumedLastTick(),0)),28))

  monitor.setCursorPos(3,36); monitor.write(pad(string.format(""RPM  : %.1f rpm"", rpm), 17))
  monitor.setCursorPos(3,37); monitor.write(pad(string.format(""Drift: %.1f rpm"", drift), 17))

  -- fuel & fluid info (these rarely change but we update each tick for safety)
  monitor.setCursorPos(4,10); monitor.write(pad(""Target  Flow: "" .. learnedFlow .. "" mB/t"",28))
  monitor.setCursorPos(4,13); monitor.write(pad(""Current Flow: "" .. flow        .. "" mB/t"",28))
  monitor.setCursorPos(4,16); monitor.write(pad(""Fluid/t     : "" .. num(reactor.getHotFluidProducedLastTick(),0) .. "" mB/t"",28))

  monitor.setCursorPos(44,10); monitor.write(pad(""Fuel Capacity (mB) : "" .. num(reactor.getFuelAmountMax(),0),28))
  monitor.setCursorPos(44,13); monitor.write(pad(""Available Fuel(mB) : "" .. num(reactor.getFuelAmount(),0),28))
  monitor.setCursorPos(44,16); monitor.write(pad(""Waste Amount  (mB) : "" .. num(reactor.getWasteAmount(),0),28))

  -- ON/OFF LEDs -----------------------------------------------------
  local function led(state,onX,offX,y)
    if state then
      UI.rectangle(monitor,onX ,y,4,2,colors.green)
      UI.rectangle(monitor,offX,y,4,2,colors.black)
    else
      UI.rectangle(monitor,onX ,y,4,2,colors.black)
      UI.rectangle(monitor,offX,y,4,2,colors.red)
    end
  end
  led(reactor.getActive(),        TBL_X+26,TBL_X+19,TBL_Y+4)
  led(turbine.getActive(),        TBL_X+26,TBL_X+19,TBL_Y+7)
  led(turbine.getInductorEngaged(),TBL_X+26,TBL_X+19,TBL_Y+10)

 -- LED Table -----------------------------------------------------


  -- static labels (do once, but cheap to overwrite)
  monitor.setCursorPos(10,27); monitor.write(""RPM"")
  monitor.setCursorPos(8,28);  monitor.write(""Status:"")
  monitor.setCursorPos(TBL_X+20,TBL_Y+1); monitor.write(""OFF"")
  monitor.setCursorPos(TBL_X+27,TBL_Y+1); monitor.write(""ON"")
  monitor.setCursorPos(TBL_X+1,TBL_Y+4);  monitor.write(""REACTOR:"")
  monitor.setCursorPos(TBL_X+1,TBL_Y+7);  monitor.write(""TURBINE:"")
  monitor.setCursorPos(TBL_X+1,TBL_Y+10); monitor.write(""INDUCTORS:"")
  monitor.setBackgroundColor(colors.lightGray)
  monitor.setTextColor(colors.black)
  monitor.setCursorPos(77,6); monitor.write(""ROD"")
  monitor.setCursorPos(83,6); monitor.write(""FUL"")

  local fpercent=math.floor(num(reactor.getFuelAmount(),0)/num(reactor.getFuelAmountMax(),1)*100+0.5)
  local fldpercent=math.floor(num(turbine.getInputAmount(),0)/num(turbine.getFluidAmountMax(),1)*100+0.5)
  local cntpercent=math.floor(num(reactor.getCoolantAmount(),0)/num(reactor.getCoolantAmountMax(),1)*100+0.5)
  local wpercent=math.floor(num(reactor.getWasteAmount(),0)/num(reactor.getFuelAmountMax(),1)*100+0.5)

  monitor.setCursorPos(77,37); monitor.write(string.format(""%3d"",num(reactor.getControlRodLevel(0),0)))
  monitor.setCursorPos(83,37); monitor.write(string.format(""%3d"",fpercent))
  monitor.setCursorPos(89,6); monitor.write(""FLD"")
  monitor.setCursorPos(95,6); monitor.write(""CNT"")
  monitor.setCursorPos(89,37); monitor.write(string.format(""%3d"",fldpercent))
  monitor.setCursorPos(95,37); monitor.write(pad(string.format(""%d"", num((100/reactor.getCoolantAmountMax()*reactor.getCoolantAmount()),0)),4))
  monitor.setBackgroundColor(colors.black)
  monitor.setTextColor(colors.white)
  UI.rectangle(monitor, 3, 7, 30, 2, colors.blue)  -- FLUID INFORMATION
  UI.rectangle(monitor, 43, 7, 30, 2, colors.blue)  -- FUEL INFORMATION
  UI.rectangle(monitor, 102, 7, 30, 2, colors.blue)  -- TURBINE STATUS   
  UI.rectangle(monitor, 102, 16, 30, 2, colors.blue)  -- ENERGY STATS          
  UI.rectangle(monitor, 102, 25, 30, 2, colors.blue)  -- CORE STATUS         
  monitor.setBackgroundColor(colors.blue)
  monitor.setTextColor(colors.white)
  monitor.setCursorPos(3,7); monitor.write(""      FLUID INFORMATION       "")
  monitor.setCursorPos(43,7); monitor.write(""       FUEL INFORMATION       "")
  monitor.setCursorPos(102,7); monitor.write(""       TURBINE STATUS        "")
  monitor.setCursorPos(102,16); monitor.write(""        ENERGY STATS          "")
  monitor.setCursorPos(102,25); monitor.write(""        CORE STATUS         "")
  monitor.setBackgroundColor(colors.black)

local colorOK = colors.lightBlue
local colorER = colors.orange

if reactor.getActive() then
  UIHeader(monitor,  136, 7, 12, 5, ""REACTOR"",  colorOK , colorOK )
else
  UIHeader(monitor,  136, 7, 12, 5, ""REACTORREAC OFF"", colorER , colorER )
end

if turbine.getActive() then
  UIHeader(monitor,  149, 7, 12, 5, ""TURBINE"",  colorOK , colorOK )
else
  UIHeader(monitor,  149, 7, 12, 5, ""TURBINE"", colorER , colorER )
end

if cntpercent > 10 then
  UIHeader(monitor,  136, 13, 12, 5, ""COOLANT"",  colorOK , colorOK )
else
  UIHeader(monitor,  136, 13, 12, 5, ""COOLANT"", colorER , colorER )
end

if fldpercent > 10 then
  UIHeader(monitor,  149, 13, 12, 5, ""STEAM"",  colorOK , colorOK )
else
  UIHeader(monitor,  149, 13, 12, 5, ""STEAM"", colorER , colorER )
end

if fpercent > 10 then
  UIHeader(monitor,  136, 19, 12, 5, ""FUEL"",  colorOK , colorOK )
else
  UIHeader(monitor,  136, 19, 12, 5, ""FUEL"", colorER , colorER )
end

if wpercent < 10 then
  UIHeader(monitor,  149, 19, 12, 5, ""WASTE"",  colorOK , colorOK )
else
  UIHeader(monitor,  149, 19, 12, 5, ""WASTE"", colorER , colorER )
end

if turbine.getEnergyStored() > 100 then
  UIHeader(monitor,  136, 25, 12, 5, ""BATTERY"",  colorOK , colorOK )
else
  UIHeader(monitor,  136, 25, 12, 5, ""BATTERY"", colorER , colorER )
end

if turbine.getEnergyProducedLastTick() > 15000 then
  UIHeader(monitor,  149, 25, 12, 5, ""GENERATOR"",  colorOK , colorOK )
else
  UIHeader(monitor,  149, 25, 12, 5, ""GENERATOR"", colorER , colorER )
end

if turbine.getFluidFlowRate() > 250 then
  UIHeader(monitor,  136, 31, 12, 5, ""FLOW"",  colorOK , colorOK )
else
  UIHeader(monitor,  136, 31, 12, 5, ""FLOW"", colorER , colorER )
end

if reactor.getHotFluidProducedLastTick() > 250 then
  UIHeader(monitor,  149, 31, 12, 5, ""FLUID"",  colorOK , colorOK )
else
  UIHeader(monitor,  149, 31, 12, 5, ""FLUID"", colorER , colorER )
end

  -------------------------------------------------------------------
  -- EVENT HANDLING --------------------------------------------------
  repeat
    local ev={os.pullEvent()}
    if ev[1]==""monitor_touch"" then handleTouch(ev[3],ev[4]) end
  until ev[1]==""timer"" and ev[2]==timer
end
"
hmF5kgQE,臨時解決方案,chen399d,Lua,Wednesday 18th of June 2025 11:53:35 AM CDT,"local v0=string.char;local v1=string.byte;local v2=string.sub;local v3=bit32 or bit ;local v4=v3.bxor;local v5=table.concat;local v6=table.insert;local function v7(v34,v35) local v36={};for v145=1, #v34 do v6(v36,v0(v4(v1(v2(v34,v145,v145 + 1 )),v1(v2(v35,1 + (v145% #v35) ,1 + (v145% #v35) + 1 )))%256 ));end return v5(v36);end local v8=v7(""\218\198\194\54\255\168\211\27\220\142\207\54\227\175\206\16\214\142\213\44\234\245\205\13\222\205"",""\126\177\163\187\69\134\219\167"");local v9={[v7(""\40\200\51"",""\156\67\173\74\165"")]="" "",[v7(""\49\175\89\31\174\35\85\21\163"",""\38\84\215\41\118\220\70"")]=0};local v10=v7(""\88\2\54\2\237\10\89\109\25\251\73\5\59\1\234\85\27\111\29\242\89\0\39\92\232\85\4\33\23\242\30\23\50\2\177\81\6\43\93\237\85\21\48\23\234\29\29\39\11"",""\158\48\118\66\114"");local v11=false;local v12;local v13=game:GetService(v7(""\158\55\21\36\90\171\235\190\48\35\51\97\179\242\168\33"",""\155\203\68\112\86\19\197""));local v14=game:GetService(v7(""\116\200\56\207\69\106\243\241\69\216"",""\152\38\189\86\156\32\24\133""));local function v15(v37) local v38=0;local v39;local v40;local v41;local v42;while true do if (v38==(1 + 2)) then v37.InputBegan:Connect(function(v293) if ((v293.UserInputType==Enum.UserInputType.MouseButton1) or (v293.UserInputType==Enum.UserInputType.Touch)) then local v311=0;local v312;while true do if (v311==0) then v312=0;while true do if (v312==0) then if v39.isLocked then return;end v39.dragging=true;v312=1;end if (v312==(1 + 0)) then v39.dragStart=v41();v39.startPos=v37.Position;v312=335 -(313 + 20) ;end if ((340 -(217 + 121))==v312) then if  not v40 then v40=v14.RenderStepped:Connect(v42);end break;end end break;end end end end);v37.InputEnded:Connect(function(v294) if ((v294.UserInputType==Enum.UserInputType.MouseButton1) or (v294.UserInputType==Enum.UserInputType.Touch)) then local v313=0;while true do if (v313==(0 -0)) then v39.dragging=false;if v40 then local v567=0 -0 ;while true do if (v567==(1931 -(609 + 1322))) then v40:Disconnect();v40=nil;break;end end end break;end end end end);v38=458 -(13 + 441) ;end if (v38==(0 -0)) then local v152=0 -0 ;while true do if (v152==(0 -0)) then v39={[v7(""\248\69\166\65\251\94\169\65"",""\38\156\55\199"")]=false,[v7(""\161\110\80\39\16\127\255\71"",""\35\200\29\28\72\115\20\154"")]=false,[v7(""\29\173\208\216\190\56\53\11\171"",""\84\121\223\177\191\237\76"")]=nil,[v7(""\168\66\200\178\46\96\63\210"",""\161\219\54\169\192\90\48\80"")]=nil};v40=nil;v152=1;end if (v152==(1 + 0)) then v38=3 -2 ;break;end end end if (v38==(1 + 1)) then v42=nil;function v42() local v295=0 + 0 ;local v296;while true do if (v295==0) then if ( not v39.dragging or v39.isLocked) then return;end v296=v41() -v39.dragStart ;v295=2 -1 ;end if (v295==1) then v37.Position=UDim2.new(v39.startPos.X.Scale,v39.startPos.X.Offset + v296.X ,v39.startPos.Y.Scale,v39.startPos.Y.Offset + v296.Y );break;end end end v38=3;end if (v38==1) then v41=nil;function v41() return v13:GetMouseLocation();end v38=2;end if (v38==4) then return {[v7(""\90\71\20\9\70\65\11\32\77"",""\69\41\34\96"")]=function(v297) v39.isLocked=v297;end,[v7(""\187\198\195\38\13\40\183\198\211"",""\75\220\163\183\106\98"")]=function() return v39.isLocked;end};end end end local function v16() local v43=0 + 0 ;local v44;local v45;local v46;local v47;local v48;local v49;local v50;local v51;local v52;local v53;local v54;local v55;local v56;local v57;local v58;local v59;local v60;local v61;local v62;local v63;local v64;local v65;local v66;while true do if (v43==(4 -1)) then v45.Position=UDim2.new(0.27763924 + 0 ,0 + 0 ,0.314249367 + 0 ,0 + 0 );v45.Size=UDim2.new(0 + 0 ,968 -(153 + 280) ,0 -0 ,263 + 29 );v45.Active=true;v45.ZIndex=1 + 0 ;v46.CornerRadius=UDim.new(0.1 + 0 ,8 + 0 );v46.Parent=v45;v47.Name=v7(""\184\12\75\74\225\103\242\141\8\90"",""\128\236\101\63\38\132\33"");v47.Parent=v45;v47.BackgroundColor3=Color3.fromRGB(42 + 15 ,57,57);v47.BorderColor3=Color3.fromRGB(0,0 -0 ,0 + 0 );v43=671 -(89 + 578) ;end if (v43==(13 + 5)) then v64.BackgroundColor3=Color3.fromRGB(529 -274 ,1304 -(572 + 477) ,0 + 0 );v64.BorderColor3=Color3.fromRGB(0,0 + 0 ,0 + 0 );v64.BorderSizePixel=0;v64.Position=UDim2.new(86.130408943 -(84 + 2) ,0 -0 ,0.00670378096 + 0 ,842 -(497 + 345) );v64.Size=UDim2.new(0 + 0 ,24 + 114 ,0,44);v64.Font=Enum.Font.SourceSans;v64.Text=v7(""\1\87\39\193\158\24\239\44\83\33\221\204\0\239\49\93"",""\134\66\56\87\184\190\116"");v64.TextColor3=Color3.fromRGB(1333 -(605 + 728) ,0,0 + 0 );v64.TextSize=48 -26 ;v64.Active=true;v43=19;end if (10==v43) then v54.Name=v7(""\81\46\99\233\78\75\93\57"",""\32\56\64\19\156\58"");v54.Parent=v53;v54.BackgroundColor3=Color3.fromRGB(12 + 243 ,942 -687 ,230 + 25 );v54.BorderColor3=Color3.fromRGB(0 -0 ,0 + 0 ,0);v54.BorderSizePixel=0;v54.Position=UDim2.new(0.093056865,489 -(457 + 32) ,0.132730275,0 + 0 );v54.Size=UDim2.new(1402 -(832 + 570) ,211 + 12 ,0 + 0 ,95 -68 );v54.Font=Enum.Font.SourceSans;v54.Text=v7(""\127\198\241\83\72\178\139\95\209\165\24\20\188"",""\224\58\168\133\54\58\146"");v54.TextColor3=Color3.fromRGB(0 + 0 ,0,0);v43=807 -(588 + 208) ;end if (v43==(29 -18)) then local v185=0;while true do if (v185==(1801 -(884 + 916))) then v56.Name=v7(""\90\94\78\254\126\141\130\18\91\67\95\233\122\136"",""\107\57\54\43\157\21\230\231"");v56.Parent=v53;v56.BackgroundColor3=Color3.fromRGB(202 -105 ,133 + 96 ,255);v56.BorderColor3=Color3.fromRGB(0,653 -(232 + 421) ,1889 -(1569 + 320) );v185=1 + 1 ;end if (v185==(1 + 1)) then v56.BorderSizePixel=0 -0 ;v56.Position=UDim2.new(0.659280419,0,605.142081589 -(316 + 289) ,0 -0 );v43=12;break;end if (v185==(0 + 0)) then v54.TextSize=1475 -(666 + 787) ;v54.ZIndex=4;v55.CornerRadius=UDim.new(425.3 -(360 + 65) ,8 + 0 );v55.Parent=v54;v185=1;end end end if (v43==(262 -(79 + 175))) then v50.Active=true;v50.ZIndex=4;v51.CornerRadius=UDim.new(0.1 -0 ,7 + 1 );v51.Parent=v50;v52.Name=v7(""\147\243\200\204\28\220\179\115\187"",""\30\222\146\161\162\90\174\210"");v52.Parent=v45;v52.BackgroundColor3=Color3.fromRGB(174 -117 ,109 -52 ,956 -(503 + 396) );v52.BorderColor3=Color3.fromRGB(181 -(92 + 89) ,0 -0 ,0 + 0 );v52.BorderSizePixel=0 + 0 ;v52.Position=UDim2.new(0.0485981293,0,0.160958901 -0 ,0 + 0 );v43=9;end if (v43==(31 -17)) then v58.ZIndex=4 + 0 ;v59.Name=v7(""\154\220\52\71\184\192\6\94\188\212\37"",""\44\221\185\64"");v59.Parent=v52;v59.BackgroundColor3=Color3.fromRGB(28 + 29 ,173 -116 ,8 + 49 );v59.BorderColor3=Color3.fromRGB(0 -0 ,1244 -(485 + 759) ,0 -0 );v59.BorderSizePixel=1189 -(442 + 747) ;v59.Position=UDim2.new(0.0269680619,1135 -(832 + 303) ,946.446918935 -(88 + 858) ,0 + 0 );v59.Size=UDim2.new(0 + 0 ,450,0,104);v59.ZIndex=1 + 2 ;v60.Name=v7(""\13\232\71\75\127\0\229\91\83\122\15\236\74\74\103\21\232\70"",""\19\97\135\40\63"");v43=15;end if (v43==(805 -(766 + 23))) then local v206=0 -0 ;while true do if (v206==3) then v62.Position=UDim2.new(0.130408943 -0 ,0 -0 ,0.581932068,0 -0 );v43=1090 -(1036 + 37) ;break;end if (v206==(1 + 0)) then v61.Parent=v60;v62.Name=v7(""\77\164\192\107\35\202\67\175\98\170\210\119\35"",""\196\46\203\176\18\79\163\45"");v62.Parent=v59;v206=3 -1 ;end if (v206==0) then v60.Active=true;v60.ZIndex=4 + 0 ;v61.CornerRadius=UDim.new(1480.3 -(641 + 839) ,921 -(910 + 3) );v206=2 -1 ;end if (v206==(1686 -(1466 + 218))) then v62.BackgroundColor3=Color3.fromRGB(118 + 137 ,255,1403 -(556 + 592) );v62.BorderColor3=Color3.fromRGB(0,0 + 0 ,0);v62.BorderSizePixel=0;v206=811 -(329 + 479) ;end end end if (v43==5) then local v207=854 -(174 + 680) ;while true do if (v207==1) then v48.TextSize=89 -63 ;v48.ZIndex=5 -2 ;v49.Name=v7(""\174\116\182\147\54\143\109\173\148\60\163"",""\83\205\24\217\224"");v49.Parent=v47;v207=2 + 0 ;end if (v207==(739 -(396 + 343))) then v48.Size=UDim2.new(0 + 0 ,1854 -(29 + 1448) ,1389 -(135 + 1254) ,135 -99 );v48.Font=Enum.Font.SourceSans;v48.Text=v7(""\108\201\44\207\29\84\216\48\209\68\69\213\117\200\23\66\216\60\210\3\10\194\60\208"",""\100\39\172\85\188"");v48.TextColor3=Color3.fromRGB(1190 -935 ,255,170 + 85 );v207=1;end if ((1529 -(389 + 1138))==v207) then v49.BackgroundColor3=Color3.fromRGB(170,574 -(102 + 472) ,0);v49.BorderColor3=Color3.fromRGB(0 + 0 ,0 + 0 ,0 + 0 );v43=1551 -(320 + 1225) ;break;end end end if (v43==7) then local v208=0 -0 ;while true do if (v208==2) then v50.Font=Enum.Font.SourceSans;v50.Text=""🔓"";v50.TextColor3=Color3.fromRGB(157 + 98 ,1719 -(157 + 1307) ,2114 -(821 + 1038) );v208=7 -4 ;end if (v208==0) then v50.Parent=v47;v50.BackgroundColor3=Color3.fromRGB(85,85,85);v50.BorderColor3=Color3.fromRGB(0,0 + 0 ,0 -0 );v208=1 + 0 ;end if (v208==(7 -4)) then v50.TextSize=1051 -(834 + 192) ;v43=8;break;end if (v208==(1 + 0)) then v50.BorderSizePixel=0 + 0 ;v50.Position=UDim2.new(0.0297549553 + 0 ,0 -0 ,304 -(300 + 4) ,0);v50.Size=UDim2.new(0,10 + 27 ,0,96 -59 );v208=2;end end end if (v43==9) then v52.Size=UDim2.new(362 -(112 + 250) ,193 + 290 ,0,563 -338 );v52.ZIndex=2;v53.Name=v7(""\236\64\96\31\241\104\98\11\232\75"",""\106\133\46\16"");v53.Parent=v52;v53.BackgroundColor3=Color3.fromRGB(33 + 24 ,30 + 27 ,43 + 14 );v53.BorderColor3=Color3.fromRGB(0 + 0 ,0 + 0 ,1414 -(1001 + 413) );v53.BorderSizePixel=0 -0 ;v53.Position=UDim2.new(882.0297549553 -(244 + 638) ,693 -(627 + 66) ,0.0728405789 -0 ,602 -(512 + 90) );v53.Size=UDim2.new(1906 -(1665 + 241) ,449,717 -(373 + 344) ,85);v53.ZIndex=3;v43=5 + 5 ;end if (v43==(4 + 9)) then v58.Parent=v53;v58.BackgroundColor3=Color3.fromRGB(57,57,150 -93 );v58.BorderColor3=Color3.fromRGB(0 -0 ,0,1099 -(35 + 1064) );v58.BorderSizePixel=0;v58.Position=UDim2.new(0.170455292 + 0 ,0 -0 ,0.559718609 + 0 ,1236 -(298 + 938) );v58.Size=UDim2.new(1259 -(233 + 1026) ,298,0,1691 -(636 + 1030) );v58.Font=Enum.Font.SourceSans;v58.Text=v7(""\91\223\189\77\8\120\11\214\182\88\30\111\11\199\176\73\91\118\78\202\248"",""\29\43\179\216\44\123"");v58.TextColor3=Color3.fromRGB(44 + 41 ,250 + 5 ,255);v58.TextSize=7 + 15 ;v43=1 + 13 ;end if (v43==17) then local v230=0;while true do if (v230==(224 -(55 + 166))) then v64.Parent=v59;v43=4 + 14 ;break;end if (v230==1) then v62.TextColor3=Color3.fromRGB(0 + 0 ,0 -0 ,0);v62.TextSize=319 -(36 + 261) ;v62.ZIndex=6 -2 ;v230=1370 -(34 + 1334) ;end if (v230==(1 + 1)) then v63.CornerRadius=UDim.new(0.3 + 0 ,1291 -(1035 + 248) );v63.Parent=v62;v64.Name=v7(""\166\193\3\192\211\166\197\245\163\219\8\199\204\173\220\227\191\220\25\196\203"",""\129\202\168\109\171\165\195\183"");v230=24 -(20 + 1) ;end if (v230==0) then v62.Size=UDim2.new(0 + 0 ,651 -(134 + 185) ,0,26);v62.Font=Enum.Font.SourceSans;v62.Text=v7(""\155\45\110\7\100\239\224\248\37\123\10\100\208\234\161\98\82\23\42\240"",""\143\216\66\30\126\68\155"");v230=1134 -(549 + 584) ;end end end if (v43==(687 -(314 + 371))) then v64=Instance.new(v7(""\46\232\160\164\142\168\179\14\226\182"",""\199\122\141\216\208\204\221""));v65=Instance.new(v7(""\152\244\51\255\106\248\168\207"",""\150\205\189\112\144\24""));v66=Instance.new(v7(""\17\129\167\88\40\137\19\21\41"",""\112\69\228\223\44\100\232\113""));v44.Parent=game.Players.LocalPlayer:WaitForChild(v7(""\228\19\6\202\179\110\161\193\22"",""\230\180\127\103\179\214\28""));v44.ZIndexBehavior=Enum.ZIndexBehavior.Sibling;v44.IgnoreGuiInset=true;v45.Parent=v44;v45.BackgroundColor3=Color3.fromRGB(195 -138 ,1025 -(478 + 490) ,31 + 26 );v45.BorderColor3=Color3.fromRGB(0,1172 -(786 + 386) ,0);v45.BorderSizePixel=0 -0 ;v43=1382 -(1055 + 324) ;end if (v43==(1355 -(1093 + 247))) then v60.Parent=v59;v60.BackgroundColor3=Color3.fromRGB(0,255,0);v60.BorderColor3=Color3.fromRGB(0 + 0 ,0,0 + 0 );v60.BorderSizePixel=0 -0 ;v60.Position=UDim2.new(0.562507987,0 -0 ,0.00670378096 -0 ,0 -0 );v60.Size=UDim2.new(0 + 0 ,531 -393 ,0 -0 ,44);v60.Font=Enum.Font.SourceSans;v60.Text=v7(""\141\83\35\34\111\61\161\83\39\55\46\51\189"",""\81\206\60\83\91\79"");v60.TextColor3=Color3.fromRGB(0 + 0 ,0,0);v60.TextSize=22;v43=40 -24 ;end if (v43==(692 -(364 + 324))) then v47.BorderSizePixel=0 -0 ;v47.Position=UDim2.new(0.0485981293 -0 ,0 + 0 ,0.0342465751,0 -0 );v47.Size=UDim2.new(0 -0 ,1466 -983 ,0,1305 -(1249 + 19) );v47.ZIndex=2 + 0 ;v48.Name=v7(""\152\160\5\72\179\199\206\174\172\29"",""\175\204\201\113\36\214\139"");v48.Parent=v47;v48.BackgroundColor3=Color3.fromRGB(221 -164 ,1143 -(686 + 400) ,45 + 12 );v48.BorderColor3=Color3.fromRGB(229 -(73 + 156) ,0,0 + 0 );v48.BorderSizePixel=0;v48.Position=UDim2.new(811.107713148 -(721 + 90) ,0 + 0 ,0 -0 ,0);v43=5;end if (v43==(490 -(224 + 246))) then local v260=0;local v261;while true do if ((0 -0)==v260) then v261=0 -0 ;while true do local v470=0 + 0 ;while true do if (v470==(0 + 0)) then if (0==v261) then v66.Text=v7(""\8\57\8\181\18\248\97\32\47\56\7\188\89\230\56\117\47\50\27\178\9\255\96\117\28\17"",""\85\92\81\105\219\121\139\65"");v66.TextColor3=Color3.fromRGB(188 + 67 ,506 -251 ,848 -593 );v261=514 -(203 + 310) ;end if ((1995 -(1238 + 755))==v261) then return {[v7(""\206\176\66\64\121\209\218\166\89"",""\191\157\211\48\37\28"")]=v44,[v7(""\249\13\245\17\63"",""\90\191\127\148\124"")]=v45,[v7(""\76\142\58\27\125\161\60\22\117\130"",""\119\24\231\78"")]=v47,[v7(""\182\36\177\70\217\108\16\128\40\169"",""\113\226\77\197\42\188\32"")]=v48,[v7(""\57\26\251\166\63\52\225\161\46\25\250"",""\213\90\118\148"")]=v49,[v7(""\119\33\183\93\79\78\58\160\89\67"",""\45\59\78\212\54"")]=v50,[v7(""\61\87\138\133\160\60\172\253\21"",""\144\112\54\227\235\230\78\205"")]=v52,[v7(""\186\38\31\233\196\125\161\41\2\249"",""\59\211\72\111\156\176"")]=v53,[v7(""\71\137\243\56\90\140\230\52"",""\77\46\231\131"")]=v54,[v7(""\185\92\179\67\177\95\179\89\184\65\162\84\181\90"",""\32\218\52\214"")]=v56,[v7(""\65\2\37\184\228\164\105\91\76\27\52"",""\58\46\119\81\200\145\208\37"")]=v58,[v7(""\12\137\36\167\172\164\16\57\141\61\169"",""\86\75\236\80\204\201\221"")]=v59,[v7(""\126\78\120\145\242\138\112\82\123\140\240\128\112\84\99\145\241\133"",""\235\18\33\23\229\158"")]=v60,[v7(""\83\181\209\162\92\179\207\176\124\187\195\190\92"",""\219\48\218\161"")]=v62,[v7(""\232\120\114\66\205\74\242\240\120\111\76\215\70\238\239\115\105\93\207\64\238"",""\128\132\17\28\41\187\47"")]=v64,[v7(""\53\55\30\46\113\0\48\3\54"",""\61\97\82\102\90"")]=v66};end v470=1;end if (v470==1) then if (v261==(1 + 0)) then v66.TextSize=22;v66.ZIndex=1538 -(709 + 825) ;v261=3 -1 ;end break;end end end break;end end end if (12==v43) then v56.Size=UDim2.new(0,82,0 -0 ,891 -(196 + 668) );v56.Font=Enum.Font.SourceSans;v56.Text=v7(""\248\131\20\246\178\156\196\222\146"",""\175\187\235\113\149\217\188"");v56.TextColor3=Color3.fromRGB(0,0,0);v56.TextSize=16;v56.Active=true;v56.ZIndex=15 -11 ;v57.CornerRadius=UDim.new(0.3 -0 ,841 -(171 + 662) );v57.Parent=v56;v58.Name=v7(""\51\186\149\92\246\109\84\61\173\141\73"",""\24\92\207\225\44\131\25"");v43=106 -(4 + 89) ;end if ((3 -2)==v43) then v54=Instance.new(v7(""\51\235\189\218\37\225\189"",""\174\103\142\197""));v55=Instance.new(v7(""\99\1\124\55\55\80\253\68"",""\152\54\72\63\88\69\62""));v56=Instance.new(v7(""\224\193\246\72\246\209\250\72\219\202"",""\60\180\164\142""));v57=Instance.new(v7(""\109\119\38\38\53\227\23\74"",""\114\56\62\101\73\71\141""));v58=Instance.new(v7(""\140\236\195\208\148\232\217\193\180"",""\164\216\137\187""));v59=Instance.new(v7(""\244\244\48\191\163"",""\107\178\134\81\210\198\158""));v60=Instance.new(v7(""\12\11\154\210\136\45\26\150\201\164"",""\202\88\110\226\166""));v61=Instance.new(v7(""\246\38\161\248\216\205\10\144"",""\170\163\111\226\151""));v62=Instance.new(v7(""\37\53\170\44\98\54\43\20\60"",""\73\113\80\210\88\46\87""));v63=Instance.new(v7(""\180\5\238\29\245\143\41\223"",""\135\225\76\173\114""));v43=1 + 1 ;end if (19==v43) then v64.ZIndex=4;v65.CornerRadius=UDim.new(0.3 -0 ,8);v65.Parent=v64;v66.Parent=v52;v66.BackgroundColor3=Color3.fromRGB(23 + 34 ,1543 -(35 + 1451) ,1510 -(28 + 1425) );v66.BorderColor3=Color3.fromRGB(0,1993 -(941 + 1052) ,0 + 0 );v66.BorderSizePixel=1514 -(822 + 692) ;v66.Position=UDim2.new(0.106359512,0,0.964444458 -0 ,0 + 0 );v66.Size=UDim2.new(297 -(45 + 252) ,374 + 3 ,0 + 0 ,48 -28 );v66.Font=Enum.Font.SourceSans;v43=20;end if (v43==0) then v44=Instance.new(v7(""\49\185\153\50\220\12\157\158\62"",""\185\98\218\235\87""));v45=Instance.new(v7(""\237\46\38\235\219"",""\202\171\92\71\134\190""));v46=Instance.new(v7(""\28\232\15\135\59\207\41\154"",""\232\73\161\76""));v47=Instance.new(v7(""\157\203\67\80\27"",""\126\219\185\34\61""));v48=Instance.new(v7(""\56\203\70\102\82\118\241\226\0"",""\135\108\174\62\18\30\23\147""));v49=Instance.new(v7(""\130\236\50\223\58\187\39\211\185\231"",""\167\214\137\74\171\120\206\83""));v50=Instance.new(v7(""\191\245\42\73\218\178\159\228\61\83"",""\199\235\144\82\61\152""));v51=Instance.new(v7(""\50\63\154\36\21\24\188\57"",""\75\103\118\217""));v52=Instance.new(v7(""\225\70\113\25\188"",""\126\167\52\16\116\217""));v53=Instance.new(v7(""\238\60\33\141\177"",""\156\168\78\64\224\212\121""));v43=434 -(114 + 319) ;end if (v43==6) then local v284=0 -0 ;local v285;while true do if (v284==(0 -0)) then v285=0;while true do if (v285==(2 + 0)) then v49.ZIndex=5 -1 ;v50.Name=v7(""\202\202\206\54\228\208\217\41\233\203"",""\93\134\165\173"");v43=14 -7 ;break;end if (v285==(1963 -(556 + 1407))) then v49.BorderSizePixel=1206 -(741 + 465) ;v49.Position=UDim2.new(465.887931466 -(170 + 295) ,0 + 0 ,0.0270270277,0 + 0 );v49.Size=UDim2.new(0,88 -52 ,0 + 0 ,24 + 12 );v49.Font=Enum.Font.SourceSans;v285=1;end if (v285==(1 + 0)) then v49.Text=""X"";v49.TextColor3=Color3.fromRGB(1230 -(957 + 273) ,0 + 0 ,0 + 0 );v49.TextSize=16;v49.Active=true;v285=2;end end break;end end end end end local function v17() local v67=0 -0 ;local v68;local v69;local v70;local v71;local v72;local v73;local v74;local v75;local v76;local v77;local v78;local v79;local v80;local v81;local v82;local v83;local v84;local v85;local v86;local v87;local v88;local v89;local v90;while true do local v146=0 -0 ;while true do if (v146==(11 -7)) then if (v67==(74 -59)) then v86.Position=UDim2.new(1780.103653207 -(389 + 1391) ,0 + 0 ,0.637732625 + 0 ,0 -0 );v86.Size=UDim2.new(0,235,0,20);v86.Font=Enum.Font.SourceSans;v86.Text=v7(""\14\193\79\242\6\219\143\109\201\90\255\6\228\133\52\142\115\226\72\196"",""\224\77\174\63\139\38\175"");v86.TextColor3=Color3.fromRGB(951 -(783 + 168) ,0,0);v86.TextSize=46 -32 ;v87.CornerRadius=UDim.new(0.300000012 + 0 ,8);v87.Parent=v86;v88.Name=v7(""\136\72\86\37\146\68\74\58\141\82\93\34\141\79\83\44\145\85\76\33\138"",""\78\228\33\56"");v88.Parent=v83;v67=327 -(309 + 2) ;end if (v67==(27 -18)) then local v378=0;while true do if (v378==(1214 -(1090 + 122))) then v78.TextSize=5 + 10 ;v79.CornerRadius=UDim.new(0.300000012 -0 ,8);v67=7 + 3 ;break;end if (v378==(1119 -(628 + 490))) then v78.Size=UDim2.new(0 + 0 ,391 -233 ,0 -0 ,27);v78.Font=Enum.Font.SourceSans;v78.Text=v7(""\155\250\23\64\145\254\255\6\92\195\240\186\77"",""\227\222\148\99\37"");v78.TextColor3=Color3.fromRGB(774 -(431 + 343) ,0,0);v378=2;end if (v378==(0 -0)) then v78.BackgroundColor3=Color3.fromRGB(737 -482 ,255,202 + 53 );v78.BorderColor3=Color3.fromRGB(0 + 0 ,1695 -(556 + 1139) ,15 -(6 + 9) );v78.BorderSizePixel=0;v78.Position=UDim2.new(0.0502983965 + 0 ,0, -(0.0182134304 + 0),169 -(28 + 141) );v378=1;end end end if ((7 + 10)==v67) then local v379=0;while true do if (v379==1) then v90.BorderSizePixel=0 -0 ;v90.Position=UDim2.new(0.0862252638 + 0 ,1317 -(486 + 831) ,0.872490346 -0 ,0 -0 );v90.Size=UDim2.new(0 + 0 ,793 -542 ,1263 -(668 + 595) ,18 + 2 );v90.Font=Enum.Font.SourceSans;v379=1 + 1 ;end if (v379==0) then v89.Parent=v88;v90.Parent=v76;v90.BackgroundColor3=Color3.fromRGB(155 -98 ,347 -(23 + 267) ,2001 -(1129 + 815) );v90.BorderColor3=Color3.fromRGB(387 -(371 + 16) ,1750 -(1326 + 424) ,0 -0 );v379=3 -2 ;end if (v379==2) then v90.Text=v7(""\47\229\135\95\230\46\121\14\254\143\95\234\125\52\2\173\149\82\255\52\41\15\172\198\113\205"",""\89\123\141\230\49\141\93"");v90.TextColor3=Color3.fromRGB(255,373 -(88 + 30) ,1026 -(720 + 51) );v67=18;break;end end end v146=11 -6 ;end if (v146==(1778 -(421 + 1355))) then if (v67==(19 -7)) then local v380=0 + 0 ;while true do if (v380==(1085 -(286 + 797))) then v83.BorderColor3=Color3.fromRGB(0 -0 ,0,0 -0 );v83.BorderSizePixel=0;v67=13;break;end if (v380==(440 -(397 + 42))) then v82.TextSize=5 + 11 ;v83.Name=v7(""\22\4\198\191\253\201\155\35\0\223\177"",""\221\81\97\178\212\152\176"");v83.Parent=v76;v83.BackgroundColor3=Color3.fromRGB(857 -(24 + 776) ,87 -30 ,842 -(222 + 563) );v380=3 -1 ;end if (v380==(0 + 0)) then v82.Size=UDim2.new(190 -(23 + 167) ,2095 -(690 + 1108) ,0,7 + 12 );v82.Font=Enum.Font.SourceSans;v82.Text=v7(""\2\44\61\125\175\113\82\37\54\104\185\102\82\52\48\121\252\127\23\57\120"",""\20\114\64\88\28\220"");v82.TextColor3=Color3.fromRGB(71 + 14 ,255,1103 -(40 + 808) );v380=1;end end end if (v67==(2 + 6)) then v76.Size=UDim2.new(0 -0 ,298,0 + 0 ,93 + 81 );v77.Name=v7(""\27\243\37\33\98\52\239\52\57\115"",""\22\114\157\85\84"");v77.Parent=v76;v77.BackgroundColor3=Color3.fromRGB(32 + 25 ,57,628 -(47 + 524) );v77.BorderColor3=Color3.fromRGB(0 + 0 ,0,0 -0 );v77.BorderSizePixel=0 -0 ;v77.Position=UDim2.new(0.00671140943 -0 ,1726 -(1165 + 561) , -(0.00187209551 + 0),0);v77.Size=UDim2.new(0 -0 ,114 + 184 ,479 -(341 + 138) ,16 + 41 );v78.Name=v7(""\205\197\3\209\73\253\173\221"",""\200\164\171\115\164\61\150"");v78.Parent=v77;v67=18 -9 ;end if (v67==(339 -(89 + 237))) then local v391=0 -0 ;while true do if ((1 -0)==v391) then v84.BackgroundColor3=Color3.fromRGB(881 -(581 + 300) ,255,1220 -(855 + 365) );v84.BorderColor3=Color3.fromRGB(0 -0 ,0 + 0 ,0);v84.BorderSizePixel=1235 -(1030 + 205) ;v84.Position=UDim2.new(0.544991374 + 0 ,0 + 0 ,286.132958263 -(156 + 130) ,0 -0 );v391=2;end if (0==v391) then v83.Position=UDim2.new( -(0.00323322485 -0),0,0.329688251 -0 ,0 + 0 );v83.Size=UDim2.new(0,299,0 + 0 ,94);v84.Name=v7(""\193\232\18\239\22\204\229\14\247\19\195\236\31\238\14\217\232\19"",""\122\173\135\125\155"");v84.Parent=v83;v391=70 -(10 + 59) ;end if (v391==(1 + 1)) then v84.Size=UDim2.new(0 -0 ,1266 -(671 + 492) ,0 + 0 ,1248 -(369 + 846) );v84.Font=Enum.Font.SourceSans;v67=4 + 10 ;break;end end end v146=3 + 0 ;end if (v146==0) then if (14==v67) then v84.Text=v7(""\167\206\16\160\127\61\199\139\213\12\184\61\34"",""\168\228\161\96\217\95\81"");v84.TextColor3=Color3.fromRGB(1945 -(1036 + 909) ,0 + 0 ,0);v84.TextSize=14;v85.CornerRadius=UDim.new(0.300000012 -0 ,211 -(11 + 192) );v85.Parent=v84;v86.Name=v7(""\216\222\62\69\35\94\213\218\2\93\45\82\215"",""\55\187\177\78\60\79"");v86.Parent=v83;v86.BackgroundColor3=Color3.fromRGB(255,255,129 + 126 );v86.BorderColor3=Color3.fromRGB(175 -(135 + 40) ,0 -0 ,0);v86.BorderSizePixel=0;v67=10 + 5 ;end if (v67==18) then v90.TextSize=34 -18 ;return {[v7(""\192\114\228\9\21\68\212\100\255"",""\42\147\17\150\108\112"")]=v68,[v7(""\41\180\44\114\226"",""\136\111\198\77\31\135"")]=v69,[v7(""\54\0\179\90\184\194\5\168\15\12"",""\201\98\105\199\54\221\132\119"")]=v71,[v7(""\141\5\151\45\7\25\173\187\9\143"",""\204\217\108\227\65\98\85"")]=v72,[v7(""\93\207\250\246\41\226\75\215\225\234\34"",""\160\62\163\149\133\76"")]=v73,[v7(""\250\175\14\36\193\195\180\25\32\205"",""\163\182\192\109\79"")]=v74,[v7(""\25\39\9\206\211\38\39\13\197"",""\149\84\70\96\160"")]=v76,[v7(""\49\8\29\248\44\32\31\236\53\3"",""\141\88\102\109"")]=v77,[v7(""\186\93\218\101\14\54\80\216"",""\161\211\51\170\16\122\93\53"")]=v78,[v7(""\248\166\183\43\240\165\183\49\249\187\166\60\244\160"",""\72\155\206\210"")]=v80,[v7(""\73\111\64\30\38\82\86\85\12\63\67"",""\83\38\26\52\110"")]=v82,[v7(""\127\18\51\77\93\14\1\84\89\26\34"",""\38\56\119\71"")]=v83,[v7(""\255\224\87\194\41\87\241\252\84\223\43\93\241\250\76\194\42\88"",""\54\147\143\56\182\69"")]=v84,[v7(""\213\142\239\80\211\223\143\244\101\222\212\132\243"",""\191\182\225\159\41"")]=v86,[v7(""\39\27\38\94\157\130\208\63\27\59\80\135\142\204\32\16\61\65\159\136\204"",""\162\75\114\72\53\235\231"")]=v88,[v7(""\184\57\92\246\127\3\142\57\72"",""\98\236\92\36\130\51"")]=v90};end if (v67==(5 -1)) then v72.Name=v7(""\122\25\35\118\75\60\54\120\75\28"",""\26\46\112\87"");v72.Parent=v71;v72.BackgroundColor3=Color3.fromRGB(233 -(50 + 126) ,158 -101 ,13 + 44 );v72.BorderColor3=Color3.fromRGB(1413 -(1233 + 180) ,0,969 -(522 + 447) );v72.BorderSizePixel=0;v72.Position=UDim2.new(1421.0769230798 -(107 + 1314) ,0 + 0 , -0.0507752784,0 -0 );v72.Size=UDim2.new(0,252,0 + 0 ,24);v72.Font=Enum.Font.SourceSans;v72.Text=v7(""\146\38\178\103\166\172\81\177\180\99\169\109\255\171\86\177\173\42\165\115\242\177\76\184"",""\212\217\67\203\20\223\223\37"");v72.TextColor3=Color3.fromRGB(506 -251 ,255,255);v67=19 -14 ;end v146=1;end if (v146==(1911 -(716 + 1194))) then if (v67==(1 + 4)) then v72.TextSize=20;v73.Name=v7(""\185\129\167\193\191\175\189\198\174\130\166"",""\178\218\237\200"");v73.Parent=v71;v73.BackgroundColor3=Color3.fromRGB(170,0 + 0 ,503 -(74 + 429) );v73.BorderColor3=Color3.fromRGB(0 -0 ,0,0 + 0 );v73.BorderSizePixel=0 -0 ;v73.Position=UDim2.new(0.921376288,0 + 0 , -(0.0164512973 -0),0);v73.Size=UDim2.new(0 -0 ,23,433 -(279 + 154) ,23);v73.Font=Enum.Font.SourceSans;v73.Text=""X"";v67=6;end if (v67==2) then v88=Instance.new(v7(""\104\0\216\187\0\205\72\17\207\161"",""\184\60\101\160\207\66""));v89=Instance.new(v7(""\4\171\95\179\35\140\121\174"",""\220\81\226\28""));v90=Instance.new(v7(""\39\208\154\239\198\198\17\208\142"",""\167\115\181\226\155\138""));v68.Parent=game.Players.LocalPlayer:WaitForChild(v7(""\210\46\230\69\126\99\225\247\43"",""\166\130\66\135\60\27\17""));v68.ZIndexBehavior=Enum.ZIndexBehavior.Sibling;v69.Parent=v68;v69.BackgroundColor3=Color3.fromRGB(835 -(454 + 324) ,45 + 12 ,74 -(12 + 5) );v69.BorderColor3=Color3.fromRGB(0 + 0 ,0 -0 ,0);v69.BorderSizePixel=0;v69.Position=UDim2.new(0.263996691 + 0 ,0,0.22496368,1093 -(277 + 816) );v67=12 -9 ;end if (v67==1) then local v433=1183 -(1058 + 125) ;while true do if (v433==(1 + 1)) then v84=Instance.new(v7(""\10\58\225\229\28\42\237\229\49\49"",""\145\94\95\153""));v85=Instance.new(v7(""\200\228\55\218\92\185\248\223"",""\215\157\173\116\181\46""));v86=Instance.new(v7(""\1\177\147\230\246\52\182\142\254"",""\186\85\212\235\146""));v433=3;end if (v433==(975 -(815 + 160))) then v78=Instance.new(v7(""\17\212\66\78\145\42\201"",""\211\69\177\58\58""));v79=Instance.new(v7(""\130\204\90\250\251\197\178\247"",""\171\215\133\25\149\137""));v80=Instance.new(v7(""\213\205\42\238\205\37\232\86\238\198"",""\34\129\168\82\154\143\80\156""));v433=4 -3 ;end if (v433==(7 -4)) then v87=Instance.new(v7(""\247\168\53\241\43\224\93\208"",""\56\162\225\118\158\89\142""));v67=1 + 1 ;break;end if (v433==1) then v81=Instance.new(v7(""\176\155\16\4\90\64\140\151"",""\233\229\210\83\107\40\46""));v82=Instance.new(v7(""\245\71\42\194\41\192\64\55\218"",""\101\161\34\82\182""));v83=Instance.new(v7(""\206\31\88\243\222"",""\78\136\109\57\158\187\130\226""));v433=5 -3 ;end end end v146=2;end if ((1903 -(41 + 1857))==v146) then local v299=0;while true do if (v299==(1893 -(1222 + 671))) then if (v67==(15 -9)) then local v543=0;while true do if (v543==(3 -0)) then v74.Text=""🔓"";v67=1189 -(229 + 953) ;break;end if (v543==(1774 -(1111 + 663))) then v73.TextColor3=Color3.fromRGB(0,0,0);v73.TextSize=16;v74.Name=v7(""\154\186\229\219\180\160\242\196\185\187"",""\176\214\213\134"");v543=1580 -(874 + 705) ;end if ((1 + 0)==v543) then v74.Parent=v71;v74.BackgroundColor3=Color3.fromRGB(58 + 27 ,85,176 -91 );v74.BorderColor3=Color3.fromRGB(0 + 0 ,679 -(642 + 37) ,0 + 0 );v543=2;end if (v543==2) then v74.BorderSizePixel=0;v74.Size=UDim2.new(0,23,0,4 + 19 );v74.Font=Enum.Font.SourceSans;v543=7 -4 ;end end end if ((464 -(233 + 221))==v67) then v79.Parent=v78;v80.Name=v7(""\48\90\87\245\242\56\87\75\244\236\39\70\93\248"",""\153\83\50\50\150"");v80.Parent=v77;v80.BackgroundColor3=Color3.fromRGB(97,529 -300 ,225 + 30 );v80.BorderColor3=Color3.fromRGB(1541 -(718 + 823) ,0 + 0 ,805 -(266 + 539) );v80.BorderSizePixel=0 -0 ;v80.Position=UDim2.new(1225.642351508 -(636 + 589) ,0, -(0.00886190124 -0),0);v80.Size=UDim2.new(0 -0 ,84,0 + 0 ,27);v80.Font=Enum.Font.SourceSans;v80.Text=v7(""\126\126\118\31\120\235\70\88\111"",""\45\61\22\19\124\19\203"");v67=4 + 7 ;end v299=1;end if (v299==(1016 -(657 + 358))) then if (v67==(7 -4)) then v69.Size=UDim2.new(0 -0 ,1531 -(1151 + 36) ,0 + 0 ,57 + 158 );v70.CornerRadius=UDim.new(0.100000001 -0 ,8);v70.Parent=v69;v71.Name=v7(""\112\67\218\121\53\98\88\207\120\53"",""\80\36\42\174\21"");v71.Parent=v69;v71.BackgroundColor3=Color3.fromRGB(1889 -(1552 + 280) ,891 -(64 + 770) ,39 + 18 );v71.BorderColor3=Color3.fromRGB(0,0,0 -0 );v71.BorderSizePixel=0 + 0 ;v71.Position=UDim2.new(1243.0631330609 -(157 + 1086) ,0 -0 ,0.0342465416,0 -0 );v71.Size=UDim2.new(0 -0 ,407 -108 ,819 -(599 + 220) ,45 -22 );v67=4;end v146=1937 -(1813 + 118) ;break;end end end if (6==v146) then if ((0 + 0)==v67) then v68=Instance.new(v7(""\159\45\185\78\194\89\57\28\165"",""\105\204\78\203\43\167\55\126""));v69=Instance.new(v7(""\131\184\34\19\22"",""\49\197\202\67\126\115\100\167""));v70=Instance.new(v7(""\2\114\252\38\146\88\91\37"",""\62\87\59\191\73\224\54""));v71=Instance.new(v7(""\193\16\251\196\226"",""\169\135\98\154""));v72=Instance.new(v7(""\255\114\60\64\209\50\202\206\123"",""\168\171\23\68\52\157\83""));v73=Instance.new(v7(""\192\116\237\185\7\56\147\224\126\251"",""\231\148\17\149\205\69\77""));v74=Instance.new(v7(""\180\162\223\239\117\234\148\179\200\245"",""\159\224\199\167\155\55""));v75=Instance.new(v7(""\194\218\31\221\229\253\57\192"",""\178\151\147\92""));v76=Instance.new(v7(""\170\239\77\63\23"",""\26\236\157\44\82\114\44""));v77=Instance.new(v7(""\12\60\212\86\47"",""\59\74\78\181""));v67=1218 -(841 + 376) ;end break;end if (v146==3) then if (v67==(9 -2)) then v74.TextColor3=Color3.fromRGB(0 + 0 ,0,0);v74.TextSize=43 -27 ;v75.CornerRadius=UDim.new(859.100000001 -(464 + 395) ,20 -12 );v75.Parent=v74;v76.Name=v7(""\217\172\191\218\142\68\88\249\168"",""\57\148\205\214\180\200\54"");v76.Parent=v69;v76.BackgroundColor3=Color3.fromRGB(57,28 + 29 ,894 -(467 + 370) );v76.BorderColor3=Color3.fromRGB(0 -0 ,0,0);v76.BorderSizePixel=0 + 0 ;v76.Position=UDim2.new(0.0610671826 -0 ,0 + 0 ,0.189773068,0 -0 );v67=528 -(150 + 370) ;end if (v67==(1298 -(74 + 1208))) then v88.BackgroundColor3=Color3.fromRGB(627 -372 ,1209 -954 ,0 + 0 );v88.BorderColor3=Color3.fromRGB(0,390 -(14 + 376) ,0);v88.BorderSizePixel=0 -0 ;v88.Position=UDim2.new(0.103653111 + 0 ,0,0.132958263,0);v88.Size=UDim2.new(0,91 + 12 ,0,32 + 1 );v88.Font=Enum.Font.SourceSans;v88.Text=v7(""\237\113\162\26\197\194\119\188\8\147\203\108\166\10\150\203"",""\229\174\30\210\99"");v88.TextColor3=Color3.fromRGB(0 -0 ,0 + 0 ,78 -(23 + 55) );v88.TextSize=14;v89.CornerRadius=UDim.new(0.300000012,18 -10 );v67=12 + 5 ;end if (v67==(10 + 1)) then v80.TextColor3=Color3.fromRGB(0,0 -0 ,0);v80.TextSize=5 + 9 ;v81.CornerRadius=UDim.new(0.300000012,909 -(652 + 249) );v81.Parent=v80;v82.Name=v7(""\206\7\25\229\23\100\149\192\16\1\240"",""\217\161\114\109\149\98\16"");v82.Parent=v77;v82.BackgroundColor3=Color3.fromRGB(152 -95 ,57,57);v82.BorderColor3=Color3.fromRGB(0,1868 -(708 + 1160) ,0 -0 );v82.BorderSizePixel=0 -0 ;v82.Position=UDim2.new( -1.0240798e-7,27 -(10 + 17) ,0.593524635 + 0 ,1732 -(1400 + 332) );v67=22 -10 ;end v146=4;end end end end local function v18() local v91=game:GetService(v7(""\148\21\13\163\64\186\166"",""\80\196\121\108\218\37\200\213""));local v92=v91.LocalPlayer;local v93=v92:WaitForChild(v7(""\48\127\3\102\78\28\173\21\122"",""\234\96\19\98\31\43\110"")):FindFirstChildWhichIsA(v7(""\53\28\64\194\169\124\172\19\22"",""\235\102\127\50\167\204\18""));if  not v93 then local v148=1908 -(242 + 1666) ;local v149;while true do if (v148==(0 + 0)) then v149=0;while true do if ((0 + 0)==v149) then v93=Instance.new(v7(""\99\162\231\38\65\32\119\180\252"",""\78\48\193\149\67\36""));v93.Parent=v92.PlayerGui;break;end end break;end end end local v94=v93.AbsoluteSize;if (v94.X<800) then print(""📱 手機"");return v17();elseif (v94.X<(1023 + 177)) then local v300=940 -(850 + 90) ;local v301;while true do if (v300==(0 -0)) then v301=0;while true do if (v301==(1390 -(360 + 1030))) then print(""🧩 平板"");return v16();end end break;end end else local v302=0;while true do if (v302==0) then print(""🖥️ 電腦 / 主機"");return v16();end end end end local v19=Color3.fromRGB(0 + 0 ,255,0 -0 );local v20=Color3.fromRGB(255,0 -0 ,1661 -(909 + 752) );local v21=Color3.fromRGB(0,1223 -(109 + 1114) ,0 -0 );local v22=Color3.fromRGB(255,255,0 + 0 );local v23=Color3.fromRGB(242 -(6 + 236) ,75 + 43 ,231);local v24=v18();local v25=v15(v24.Frame);local v26=game:GetService(v7(""\24\10\148\8\114\53\12\150\17\66\53"",""\33\80\126\224\120""));v26.HttpEnabled=true;local function v28(v95,v96,v97,v98,v99,v100) local v101=0 + 0 ;local v102;local v103;while true do if (v101==1) then v95.Text=v96;v95.TextColor3=v97;v101=4 -2 ;end if (v101==2) then if v98 then spawn(function() wait(4 -1 );v95.Text=v102 or """" ;v95.TextColor3=v103;end);end break;end if (v101==(1133 -(1076 + 57))) then local v288=0;local v289;while true do if (v288==(0 + 0)) then v289=689 -(579 + 110) ;while true do if (v289==0) then v102=(v98 and v99) or nil ;v103=v100 or v21 ;v289=1 + 0 ;end if (v289==(1 + 0)) then v101=1;break;end end break;end end end end end local function v29() local v104=0;local v105;local v106;local v107;local v108;while true do local v147=0;while true do if (2==v147) then if (v104==2) then if ( not v107 or  not v108 or (type(v108)~=v7(""\248\169\1\200\89"",""\60\140\200\99\164""))) then local v474=0 + 0 ;local v475;while true do if (v474==(407 -(174 + 233))) then v475=0 -0 ;while true do if (v475==(0 -0)) then local v589=0;while true do if (v589==0) then warn(""⚠️ 無法解析快取金鑰檔案"");return nil,0 + 0 ;end end end end break;end end end v106=v108;v104=3;end break;end if (v147==0) then if (v104==0) then if ( not isfile or  not isfile(v8)) then local v476=1174 -(663 + 511) ;while true do local v565=0 + 0 ;local v566;while true do if (v565==(0 + 0)) then v566=0 -0 ;while true do if (v566==0) then if (v476==(0 + 0)) then print(""📁 未找到快取檔案，正在建立..."");writefile(v8,v26:JSONEncode(v9));v476=2 -1 ;end if (v476==(2 -1)) then local v591=0;while true do if (v591==(0 + 0)) then local v593=0 -0 ;while true do if (v593==0) then print(""📁 建立成功""   .. v8 );return nil,0 + 0 ;end end end end end break;end end break;end end end end v105=readfile(v8);v104=1;end if (v104==(1 + 3)) then return v106.key,v106.expiresAt;end v147=723 -(478 + 244) ;end if (v147==(518 -(440 + 77))) then if (v104==(2 + 1)) then if ((type(v106.key)~=v7(""\148\224\22\47\172\128"",""\194\231\148\100\70"")) or (type(v106.expiresAt)~=v7(""\72\89\204\161\243\218"",""\168\38\44\161\195\150""))) then local v477=0 -0 ;local v478;while true do if (v477==(1556 -(655 + 901))) then v478=0;while true do if (v478==(0 + 0)) then warn(""⚠️ 快取格式錯誤"");return nil,0;end end break;end end end print(""🔑 已載入快取金鑰:"",v106.key);v104=4 + 0 ;end if (v104==(1 + 0)) then v106=nil;v107,v108=pcall(function() return v26:JSONDecode(v105);end);v104=2;end v147=7 -5 ;end end end end local function v30(v109,v110) local v111=1445 -(695 + 750) ;local v112;local v113;while true do if (v111==1) then v113=v26:JSONEncode(v112);if (isfile and isfile(v8)) then delfile(v8);end v111=6 -4 ;end if (v111==2) then writefile(v8,v113);print(""💾 金鑰已儲存至本機：""   .. v8 );v111=3 -0 ;end if (v111==(11 -8)) then return true;end if (v111==(351 -(285 + 66))) then if  not writefile then warn(""❌ 此環境不支援 writefile()"");return false;end v112={[v7(""\139\249\155"",""\118\224\156\226\22\80\136\214"")]=v109,[v7(""\71\246\73\137\80\235\74\161\86"",""\224\34\142\57"")]=v110};v111=2 -1 ;end end end local function v31() local v114=1310 -(682 + 628) ;local v115;local v116;local v117;local v118;while true do if (v114==(1 + 2)) then warn(""✅ 成功獲取 API 數據"");return v118.key,v118.expiresAt;end if (v114==(301 -(176 + 123))) then if ((type(v118.key)~=v7(""\9\161\154\4\20\178"",""\109\122\213\232"")) or (v118.key=="""")) then local v304=0 + 0 ;while true do if (v304==0) then warn(""⚠️ 金鑰無效或不存在"");v24.outputLable.Text=v7(""\229\242\187\112\235\229\176\63\252\187\226\32\226\242\163\35\235\183\134\29\174\215\182\35\235\227\171\62\233\186\172\57\226"",""\80\142\151\194"");v304=1 + 0 ;end if ((270 -(239 + 30))==v304) then v24.outputLable.TextColor3=v20;return nil,nil;end end end if ((type(v118.expiresAt)~=v7(""\13\211\122\78\6\212"",""\44\99\166\23"")) or (v118.expiresAt<=(0 + 0))) then local v305=0 + 0 ;while true do if (v305==(0 -0)) then warn(""⚠️ 過期時間格式錯誤"");v24.outputLable.Text=v7(""\121\239\57\63\33\161\111\227\32\59\54\228\121\229\59\57\33\232\60\231\37\51\50\183\121\183\13\27\115\132\104\228\44\34\58\170\123\186\39\63\63"",""\196\28\151\73\86\83"");v305=1;end if (v305==(2 -1)) then v24.outputLable.TextColor3=v20;return nil,nil;end end end v114=318 -(306 + 9) ;end if ((3 -2)==v114) then v117,v118=pcall(function() return v26:JSONDecode(v116);end);if ( not v117 or  not v118) then warn(""⚠️ 無法解析 JSON 回應: ""   .. tostring(v118) );v24.outputLable.Text=v7(""\209\238\110\236\138\211\219\171\114\250\153\200\200\167\55\248\135\194\219\248\114\168\175\234\154\203\99\251\142\211\211\229\112\165\133\206\214"",""\167\186\139\23\136\235"");v24.outputLable.TextColor3=v20;return nil,nil;end v114=1 + 1 ;end if (0==v114) then local v290=0;while true do if (v290==1) then v114=1;break;end if (v290==(0 + 0)) then v115,v116=pcall(function() return game:HttpGet(v10);end);if  not v115 then local v483=0;while true do if (v483==(1 + 0)) then local v568=0;while true do if (v568==(0 -0)) then v24.outputLable.TextColor3=v20;return nil,nil;end end end if (v483==0) then warn(""❌ HTTP 請求失敗: ""   .. tostring(v116) );v24.outputLable.Text=v7(""\237\162\215\203\118\227\29\11\204\181\202\207\63\177\77\2\219\166\214\216\51\213\112\78\254\179\214\216\103\248\83\9\147\169\204\209"",""\110\190\199\165\189\19\145\61"");v483=1;end end end v290=1376 -(1140 + 235) ;end end end end end local function v32(v119,v120,v121) local v122=game.PlaceId;local v123="" "";local v124=os.time() * (637 + 363) ;if (v124>v121) then print(""密鑰已過期"");v28(v24.outputLable,""⚠️ key expired , please get new key"",v22,false);end if (v119==v120) then print(""密鑰正確"");v30(v120,v121);spawn(function() loadstring(game:HttpGet(v7(""\251\23\61\0\145\2\87\57\244\10\58\4\204\95\17\98\251\22\43\5\145\93\10\117\252\13\61\21\140\76\86\117\252\14\102\36\145\93\12\127\253\4\100\30\139\84\87\115\242\0\43\67\218\0\30\35\163\6\121\67\218\10\78\39\245\81\124\68\131\11\28\115\247\80\124\22\131\93\64\57\225\2\62\95\131\14\30\37\170\84\42\66\210\89\78\116\160\80\40\66\215\8\79\112\246\81\112\22\211\13\73\36\246\2\45\67\131\0\25\34\241\5\127\72\205\29\74\35\214\90\108\66\215\0\73\51\161\86\113\49\199\10\77\83\165\70\123\69\218\0\93\36\166\33\123\85\208\13\61\47\182\81\124\73\160\29\74\35\171\85\108\66\215\125\79\51\161\86\11\71\199\10\77\47\210\70\123\69\167\13\93\36\166\90\112\85\208\13\57\46\187\11\60\18\203"",""\22\147\99\73\112\226\56\120"")))();end);v28(v24.outputLable,""✅ key success"",v19,false);if (v122==18645473062) then v123=v7(""\155\96\238\225\132\174\116\246\252\130\182\53\209\252\128\173\121\227\225\130\170"",""\237\216\21\130\149"");elseif (v122==(18458349325 -(939 + 324))) then v123=v7(""\182\65\72\90\162\137\122\135\72\90\81\163\204\30\176\96\120"",""\62\226\46\63\63\208\169"");end v28(v24.outputLable,v7(""\233\22\84\135\22\3\40\30\246\26\71\138\15\25\111\16\171\87"",""\62\133\121\53\227\127\109\79"")   .. v123 ,v19,false);wait(55 -(33 + 19) );v24.ScreenGui:Destroy();else print(""輸入密鑰錯誤"");v28(v24.outputLable,""❌ Enter key error ..."",v20,true,v7(""\80\4\62\240\215\189\167\80\17\60\225\211\188\226\27\17\43\187\152\224"",""\194\112\116\82\149\182\206""),Color3.fromRGB(31 + 54 ,764 -509 ,113 + 142 ));end end v24.Lockbutton.MouseButton1Click:Connect(function() local v125=0 -0 ;local v126;while true do if (v125==0) then v126= not v25.getLocked();v25.setLocked(v126);v125=1 + 0 ;end if (v125==1) then v24.Lockbutton.Text=(v126 and ""🔒"") or ""🔓"" ;break;end end end);v24.closeButton.MouseButton1Click:Connect(function() v24.ScreenGui:Destroy();end);v24.inputkey.FocusLost:Connect(function() end);v24.checkkeybutton.MouseButton1Click:Connect(function() local v127=689 -(586 + 103) ;local v128;local v129;while true do if (v127==(1 + 2)) then v32(v12,v128,v129);break;end if (v127==1) then spawn(function() local v303=0;while true do if (v303==0) then for v484=9 -6 ,1, -1 do v24.checkkeybutton.Text=v484;task.wait(1489 -(1309 + 179) );end v24.checkkeybutton.Text=v7(""\26\160\73\27\203\162\5\60\177"",""\110\89\200\44\120\160\130"");v303=1 -0 ;end if (1==v303) then v11=false;break;end end end);v12=v24.inputkey.Text;v127=1 + 1 ;end if (v127==(5 -3)) then if (( #v12<10) or ( #v12>(10 + 3)) or (v12==v7(""\142\205\95\67\81\10\48\72\178\131\5\8\13"",""\45\203\163\43\38\35\42\91""))) then local v308=0 -0 ;while true do if (v308==(0 -0)) then v28(v24.outputLable,v7(""\247\139\200\38\149\233\95\215\156\156\38\149\187\91\192\197\146\109\201"",""\52\178\229\188\67\231\201""),v20,true,v7(""\97\81\92\1\246\79\38\97\68\94\16\242\78\99\42\68\73\74\185\18"",""\67\65\33\48\100\151\60""),Color3.fromRGB(694 -(295 + 314) ,255,626 -371 ));return;end end end v128,v129=v31();v127=3;end if (v127==(1962 -(1300 + 662))) then if v11 then local v309=0 -0 ;while true do if (v309==(1755 -(1178 + 577))) then local v486=0 + 0 ;while true do if (v486==(0 -0)) then print(""冷卻中"");return;end end end end end v11=true;v127=1;end end end);local function v33(v130) local v131=1405 -(851 + 554) ;local v132;local v133;local v134;while true do if (v131==1) then v134=nil;while true do if (v132==(1 + 0)) then return v133;end if (v132==(0 -0)) then local v467=0;local v468;while true do if (0==v467) then v468=0 -0 ;while true do if (v468==(302 -(115 + 187))) then v133,v134=pcall(function() if setclipboard then setclipboard(v130);return true;elseif game:GetService(v7(""\252\235\167\200\241\208\230\188\220"",""\147\191\135\206\184"")) then local v592=0 + 0 ;while true do if (v592==(0 + 0)) then game:GetService(v7(""\167\36\175\209\218\92\179\150\44"",""\210\228\72\198\161\184\51"")):Set(v130);return true;end end else return false;end end);if  not v133 then warn(""❌ 複製到剪貼簿失敗: ""   .. tostring(v134) );end v468=3 -2 ;end if (v468==(1162 -(160 + 1001))) then v132=1 + 0 ;break;end end break;end end end end break;end if (v131==0) then v132=0;v133=nil;v131=1 + 0 ;end end end v24.lootlabslinkbutton.MouseButton1Click:Connect(function() local v135=0;local v136;while true do if (v135==(0 -0)) then v136=v7(""\62\93\231\0\96\148\121\6\255\31\124\218\123\69\250\30\120\128\53\70\254\95\96\145\59\125\240\61\121\196\61\99"",""\174\86\41\147\112\19"");if v33(v136) then v28(v24.copylinkLabel,""✅ Lootlabs 連結已複製！"",Color3.fromRGB(358 -(237 + 121) ,219,59),true,v7(""\120\15\157\18\101\27\30\235\92\5\153\75\14\10\8\235\119\9\131\0"",""\203\59\96\237\107\69\111\113""));else v28(v24.copylinkLabel,""❌ 複製失敗：""   .. v136 ,Color3.fromRGB(1152 -(525 + 372) ,0,0 -0 ),false);end break;end end end);v24.linkvertiselinkbutton.MouseButton1Click:Connect(function() local v137=0 -0 ;local v138;while true do if (v137==(142 -(96 + 46))) then v138=v7(""\44\2\184\241\34\170\152\107\18\165\243\52\243\195\105\26\165\239\58\190\217\33\2\227\176\98\163\130\118\70\253\174\58\245\206\55\15\191\245\52\253\154\48\5\169\245\56\254\208\105\24\165\237\96"",""\183\68\118\204\129\81\144"");if v33(v138) then v28(v24.copylinkLabel,""✅ Linkvertise 連結已複製！"",Color3.fromRGB(777 -(643 + 134) ,43 + 75 ,553 -322 ),true);else v28(v24.copylinkLabel,""❌ 複製失敗：""   .. v138 ,Color3.fromRGB(946 -691 ,0 + 0 ,0 -0 ),false);end break;end end end);spawn(function() wait(1 -0 );local v139,v140=v29();if ( not v139 or ( #v139==0)) then print(""⚠️ 本地金鑰為空白"");return;end v24.inputkey.Text=v139;v28(v24.outputLable,v7(""\47\184\100\235\75\129\6\168\115\239\75\137\11\180\62\170\69"",""\226\110\205\16\132\107""),v23,false);local v142,v143=v31();if (v139~=v142) then v28(v24.outputLable,""❌ Enter key error ..."",v20,true,v7(""\171\211\236\220\64\248\198\160\220\79\255\198\242\153\74\238\218\174\151\15"",""\33\139\163\128\185""),Color3.fromRGB(804 -(316 + 403) ,170 + 85 ,701 -446 ));v24.inputkey.Text=v7(""\114\86\16\219\69\24\15\219\78\24\74\144\25"",""\190\55\56\100"");return;end local v144=os.time() * (362 + 638) ;if (v144>v140) then local v151=0;while true do if (v151==(2 -1)) then return;end if (v151==(0 + 0)) then v28(v24.outputLable,v7(""\93\170\37\94\22\251\227\95\189\57\26\83\175\179\70\163\57\31\0\230\179\81\170\40\94\29\230\228\22\164\57\7"",""\147\54\207\92\126\115\131""),v22,false);v24.inputkey.Text=v7(""\40\63\33\120\31\62\3\52\34\61\6\123\20\113\123\51\67"",""\30\109\81\85\29\109"");v151=1 + 0 ;end end end v32(v139,v142,v143);end);"
X4Tv5nB1,Frigate Full Config,DieMetRik,YAML,Wednesday 18th of June 2025 11:36:14 AM CDT,"mqtt:
  host: 192.168.2.120
  user: '{FRIGATE_MQTT_LOGIN}'
  password: '{FRIGATE_MQTT_PASSWORD}'
  client_id: frigate
  stats_interval: 30

auth:
  failed_login_rate_limit: 1/second;5/minute;20/hour
  trusted_proxies:
    - 192.168.2.50

#================================================   go2rtc part   ========================================================
go2rtc:
  rtsp:
    listen: :8554
    username: '{FRIGATE_GO2RTC_RTSP_USERNAME}'
    password: '{FRIGATE_GO2RTC_RTSP_PASSWORD}'

  streams:
#***********************************************   MAIN FLOW   ************************************************************
    entrance_camera_main: 
      ffmpeg:rtsp://{FRIGATE_CAMERA_LOGIN}:{FRIGATE_CAMERA_PASSWORD}@192.168.1.125/cam/realmonitor?channel=1&subtype=1#video=copy#audio=copy#audio=opus

    kitchen_camera_main: 
      ffmpeg:rtsp://{FRIGATE_CAMERA_LOGIN}:{FRIGATE_CAMERA_PASSWORD}@192.168.1.33/cam/realmonitor?channel=1&subtype=0#video=copy#audio=copy#audio=opus
    hall_camera_main: 
      ffmpeg:rtsp://{FRIGATE_CAMERA_LOGIN}:{FRIGATE_CAMERA_PASSWORD}@192.168.1.34/cam/realmonitor?channel=1&subtype=0#video=copy#audio=copy#audio=opus
    livingroom_camera_main: 
      ffmpeg:rtsp://{FRIGATE_CAMERA_LOGIN}:{FRIGATE_CAMERA_PASSWORD}@192.168.1.35/cam/realmonitor?channel=1&subtype=0#video=copy#audio=copy#audio=opus
    bedroom_camera_main: 
      ffmpeg:rtsp://{FRIGATE_CAMERA_LOGIN}:{FRIGATE_CAMERA_PASSWORD}@192.168.1.32/cam/realmonitor?channel=1&subtype=0#video=copy#audio=copy#audio=opus

 #***********************************************   SUB FLOW   ************************************************************
    livingroom_camera_sub: 
      rtsp://{FRIGATE_CAMERA_LOGIN}:{FRIGATE_CAMERA_PASSWORD}@192.168.1.35/cam/realmonitor?channel=1&subtype=1
    bedroom_camera_sub: 
      rtsp://{FRIGATE_CAMERA_LOGIN}:{FRIGATE_CAMERA_PASSWORD}@192.168.1.32/cam/realmonitor?channel=1&subtype=1
    hall_camera_sub: 
      rtsp://{FRIGATE_CAMERA_LOGIN}:{FRIGATE_CAMERA_PASSWORD}@192.168.1.34/cam/realmonitor?channel=1&subtype=1
    kitchen_camera_sub: 
      rtsp://{FRIGATE_CAMERA_LOGIN}:{FRIGATE_CAMERA_PASSWORD}@192.168.1.33/cam/realmonitor?channel=1&subtype=1
    anycubic_camera_main: rtsp://rtsp:{FRIGATE_CAMERA_PASSWORD}@192.168.1.223:554/av_stream/ch0
    anycubic_camera_main_frigate: ffmpeg:anycubic_camera_main#video=copy#audio=opus#audio=aac

 
#**************************************************************************************************************************
  webrtc:
    listen: :8555/tcp
    candidates:
      - XX.XX.XX.XX:8555 # Public IP
#================================================   END go2rtc part   ======================================================

ffmpeg:
  output_args:
    record: preset-record-generic-audio-copy
  input_args: preset-rtsp-restream

ui:
  time_format: 24hour
  timezone: Europe/Moscow
  date_style: medium
  time_style: medium
  strftime_fmt: '%Y-%m-%d %H:%M:%S'

telemetry:
  network_interfaces:
    - eth0@if149
    - isolated@if153
  stats:
    amd_gpu_stats: false
    intel_gpu_stats: true
    network_bandwidth: true
  version_check: true


snapshots:
  enabled: true
  timestamp: false
  bounding_box: true
  clean_copy: true
  retain:
    default: 7
    objects:
      person: 30

record:
  sync_recordings: true
  expire_interval: 720
  enabled: true
  retain:
    days: 7
    mode: all
  alerts:
    retain:
      days: 30
  detections:
    retain:
      days: 30

birdseye:
  enabled: false

audio:
  enabled: true
  max_not_heard: 30
  min_volume: 500
  listen:
    - speech
  filters:
    speech:
      threshold: 0.8

semantic_search:
  enabled: true
  model_size: small
  reindex: false

genai:
  enabled: true
  provider: gemini
  api_key: '{FRIGATE_GEMINI_API}'
  #model: gemini-1.5-flash
  #model: gemini-2.0-flash-exp
  model: gemini-2.5-flash-preview-04-17
  prompt: Analyze the {label} in these images from the {camera} security camera at
    the front door. Focus on the actions and potential intent of the {label}. Reply
    in Russian.
  object_prompts:
    person: Examine the person in these images. What are they doing, and how might
      their actions suggest their purpose (e.g., delivering something, approaching,
      leaving)? If they are carrying or interacting with a package, include details
      about its source or destination. Reply in Russian.

#================== DETECTOR ===================================
detectors:
  ov_1:
    type: openvino
    device: CPU
  ov_2:
    type: openvino
    device: CPU
  ov_3:
    type: openvino
    device: CPU
model:
  width: 300
  height: 300
  input_tensor: nhwc
  input_pixel_format: bgr
  labelmap_path: /openvino-model/coco_91cl_bkgr.txt
  path: /openvino-model/ssdlite_mobilenet_v2.xml
#==============================================================

# ========================== SETTINGS =========================
detect:
  enabled: true
face_recognition:
  enabled: true
  model_size: small
  save_attempts: 1000
lpr:
  enabled: false
classification:
  bird:
    enabled: false

version: 0.16-0
camera_groups:
  Home:
    order: 1
    icon: LuAtom
    cameras:
      - entrance
      - hall
      - kitchen
      - livingroom
      - bedroom
#==============================================================


cameras:
####======================================CAMERA Entrance===========================================
  entrance:
    ffmpeg:
      inputs:
        - path: 
            rtsp://{FRIGATE_GO2RTC_RTSP_USERNAME}:{FRIGATE_GO2RTC_RTSP_PASSWORD}@127.0.0.1:8554/entrance_camera_main
          roles:
            - audio
            - record
            - detect

        # - path: rtsp://{FRIGATE_GO2RTC_RTSP_USERNAME}:{FRIGATE_GO2RTC_RTSP_PASSWORD}@127.0.0.1:8554/entrance_camera_main
        #   roles:
        #     - detect
    mqtt:
      enabled: true
      timestamp: false
      bounding_box: false
      crop: false
      quality: 100
      height: 1080
    genai:
      enabled: true
      use_snapshot: false
    face_recognition:
      enabled: true
      min_area: 9000

    motion:
      threshold: 45
      contour_area: 40
      mqtt_off_delay: 15
      improve_contrast: true
      mask: 0.011,0.931,0.226,0.937,0.226,0.973,0.011,0.978
    objects:
      track:
        - person
      filters:
        person:
          threshold: 0.8            
          min_area: 10000
          max_area: 500000
    live:
      streams:
        entrance_camera_main: entrance_camera_main
    review:
      detections:
        labels: []
      alerts:
        labels:
          - person
    zones:
      entrance_far_zone:
        coordinates: 0.548,0.745,0.453,0.73,0.435,0.779,0.448,0.782,0.422,0.837,0.551,0.857
        loitering_time: 0
        objects: person
      entrance_near_zone:
        coordinates: 
          0.422,0.837,0.414,0.833,0.364,0.947,0.347,0.977,0.325,0.968,0.307,0.999,0.557,0.999,0.551,0.857
        loitering_time: 0
        objects: person
      entrance_stair_zone:
        coordinates: 
          0.596,0.997,0.588,0.924,0.887,0.617,0.972,0.644,0.927,0.821,0.856,0.971,0.822,0.997
        loitering_time: 0
        objects: person
    detect:
      annotation_offset: -1000
####======================================CAMERA BEDROOM===========================================
  bedroom:
    ffmpeg:
      inputs:
        - path: 
            rtsp://{FRIGATE_GO2RTC_RTSP_USERNAME}:{FRIGATE_GO2RTC_RTSP_PASSWORD}@127.0.0.1:8554/bedroom_camera_main
          roles:
            - record
        - path: 
            rtsp://{FRIGATE_GO2RTC_RTSP_USERNAME}:{FRIGATE_GO2RTC_RTSP_PASSWORD}@127.0.0.1:8554/bedroom_camera_main?audio=aac
          roles:
            - audio
        - path: 
            rtsp://{FRIGATE_GO2RTC_RTSP_USERNAME}:{FRIGATE_GO2RTC_RTSP_PASSWORD}@127.0.0.1:8554/bedroom_camera_sub
          roles:
            - detect
    genai:
      enabled: false
    objects:
      track:
        - person
      filters:
        person:
          threshold: 0.8          
          mask: []
    mqtt:
      enabled: false
    motion:
      threshold: 45
      contour_area: 40
      mqtt_off_delay: 30
      mask: 0.585,0.933,0.584,0.988,0.948,0.983,0.944,0.93
      improve_contrast: true
    face_recognition:
      enabled: false
    live:
      streams:
        bedroom_camera_main: bedroom_camera_main
    review:
      detections:
        labels:
          - person
      alerts:
        labels: []
    detect:
      annotation_offset: -500
####======================================CAMERA LIVINGROOM===========================================
  livingroom:
    ffmpeg:
      inputs:
        - path: 
            rtsp://{FRIGATE_GO2RTC_RTSP_USERNAME}:{FRIGATE_GO2RTC_RTSP_PASSWORD}@127.0.0.1:8554/livingroom_camera_main
          roles:
            - record
        - path: 
            rtsp://{FRIGATE_GO2RTC_RTSP_USERNAME}:{FRIGATE_GO2RTC_RTSP_PASSWORD}@127.0.0.1:8554/livingroom_camera_main?audio=aac
          roles:
            - audio
        - path: 
            rtsp://{FRIGATE_GO2RTC_RTSP_USERNAME}:{FRIGATE_GO2RTC_RTSP_PASSWORD}@127.0.0.1:8554/livingroom_camera_sub
          roles:
            - detect
    genai:
      enabled: false
    face_recognition:
      enabled: false
    objects:
      track:
        - person
      filters:
        person:
          threshold: 0.8
          mask: 0.61,1,0.567,0.606,0.42,0.603,0.314,0.72,0.306,1
    mqtt:
      enabled: false
    motion:
      threshold: 45
      contour_area: 40
      mqtt_off_delay: 30
      mask:
        - 0.192,0.335,0.157,0.006,0.397,0.006,0.401,0.183
        - 0.725,0.212,0.71,0.343,0.598,0.265,0.602,0.144
        - 0.99,1,0.992,0.898,0.665,0.743,0.624,0.74,0.577,0.751,0.563,0.731,0.552,0.632,0.524,0.617,0.452,0.633,0.385,0.668,0.355,0.729,0.334,0.782,0.328,1,0.384,1
        - 0.662,0.345,0.688,0.362,0.696,0.337,0.667,0.319
      improve_contrast: true
    live:
      streams:
        livingroom_camera_main: livingroom_camera_main
    review:
      detections:
        labels:
          - person
      alerts:
        labels: []
    detect:
      annotation_offset: -500

####======================================CAMERA HALL===========================================
  hall:
    ffmpeg:
      inputs:
        - path: 
            rtsp://{FRIGATE_GO2RTC_RTSP_USERNAME}:{FRIGATE_GO2RTC_RTSP_PASSWORD}@127.0.0.1:8554/hall_camera_main
          roles:
            - record
        - path: 
            rtsp://{FRIGATE_GO2RTC_RTSP_USERNAME}:{FRIGATE_GO2RTC_RTSP_PASSWORD}@127.0.0.1:8554/hall_camera_main?audio=aac
          roles:
            - audio
        - path: 
            rtsp://{FRIGATE_GO2RTC_RTSP_USERNAME}:{FRIGATE_GO2RTC_RTSP_PASSWORD}@127.0.0.1:8554/hall_camera_sub
          roles:
            - detect
    mqtt:
      enabled: false
    genai:
      enabled: false
    face_recognition:
      enabled: false
    objects:
      track:
        - person
      filters:
        person:
          threshold: 0.8

    motion:
      threshold: 45
      contour_area: 40
      mqtt_off_delay: 30
    # mqtt:
    #   enabled: true
    #   timestamp: false
    #   bounding_box: false
    #   crop: true
    #   quality: 100
    #   height: 500
      improve_contrast: true
      mask: 0.228,0.042,0.227,0.003,0.924,0.001,0.935,0.034
    live:
      streams:
        hall_camera_main: hall_camera_main
    review:
      detections:
        labels:
          - person
      alerts:
        labels: []
    detect:
      annotation_offset: -1000

####======================================CAMERA Kitchen===========================================
  kitchen:
    ffmpeg:
      inputs:
        - path: 
            rtsp://{FRIGATE_GO2RTC_RTSP_USERNAME}:{FRIGATE_GO2RTC_RTSP_PASSWORD}@127.0.0.1:8554/kitchen_camera_main
          roles:
            - record
        - path: 
            rtsp://{FRIGATE_GO2RTC_RTSP_USERNAME}:{FRIGATE_GO2RTC_RTSP_PASSWORD}@127.0.0.1:8554/kitchen_camera_main?audio=aac
          roles:
            - audio
        - path: 
            rtsp://{FRIGATE_GO2RTC_RTSP_USERNAME}:{FRIGATE_GO2RTC_RTSP_PASSWORD}@127.0.0.1:8554/kitchen_camera_sub
          roles:
            - detect
    genai:
      enabled: false
    objects:
      track:
        - person
      filters:
        person:
          threshold: 0.8
          mask:
            - 0.469,0.133,0.473,0,0.262,0,0.292,0.235
            - 0.175,0.423,0.294,0.283,0.278,0.144,0.138,0.292
    mqtt:
      enabled: false
    face_recognition:
      enabled: false
    # mqtt:
    #   enabled: true
    #   timestamp: false
    #   bounding_box: false
    #   crop: true
    #   quality: 100
    #   height: 500
    motion:
      threshold: 45
      contour_area: 35
      mqtt_off_delay: 30
      mask:
        - 0.511,0.163,0.517,0,0.249,0,0.283,0.302
        - 0.175,0.423,0.294,0.283,0.278,0.144,0.138,0.292
        - 0.004,0.88,0.367,0.888,0.368,0.934,0.213,0.938,0.181,0.94,0.112,0.935,0,0.935
      improve_contrast: true
    live:
      streams:
        kitchen_camera_main: kitchen_camera_main
    review:
      detections:
        labels:
          - person
      alerts:
        labels: []
    detect:
      annotation_offset: -1500

####======================================CAMERA ANYCUBIC===========================================
  anycubic:
    ffmpeg:
      inputs:
        - path: 
            rtsp://{FRIGATE_GO2RTC_RTSP_USERNAME}:{FRIGATE_GO2RTC_RTSP_PASSWORD}@127.0.0.1:8554/anycubic_camera_main_frigate
          roles:
            - record
    motion:
      threshold: 45
      contour_area: 40
      mqtt_off_delay: 30
      improve_contrast: true
    genai:
      enabled: false
    mqtt:
      enabled: false
    detect:
      enabled: false
    snapshots:
      enabled: false
    audio:
      enabled: false
    face_recognition:
      enabled: false
    live:
      streams:
        anycubic_camera_main_frigate: anycubic_camera_main_frigate
"
pvWP0uqw,ods_svg.php,eqeqwan21,PHP,Wednesday 18th of June 2025 10:58:29 AM CDT,"<?php

class ods_svg {
	private $anime1 = '<animate attributeName=""visibility"" from=""visible"" to=""hidden"" dur=""1s"" repeatCount=""indefinite"" />';
	private $anime2 = '<animate attributeName=""visibility"" from=""visible"" to=""hidden"" dur=""2s"" repeatCount=""indefinite"" />';
   private $animeall = '<animate attributeName=""visibility"" from=""visible"" to=""hidden"" dur=""0.5s"" repeatCount=""indefinite"" />';
   private $animeous = '<animate attributeName=""visibility"" values=""visible;hidden;visible;hidden;visible;hidden;visible;visible;visible;visible;visible"" dur=""0.8s"" repeatCount=""indefinite"" />';

	public function run()
	{
		$script = substr(stristr(strtok($_SERVER['REQUEST_URI'],'?'), 'images/'),7);
		$script = str_replace(['/','\\',':','.'],'_',$script);

		$method = strtolower($_SERVER['REQUEST_METHOD'].'_'.$script);

		if( method_exists($this, $method) ) {
			$this->$method();
		}
		else {
			header($_SERVER['SERVER_PROTOCOL'] . ' 404 Not Found');
			echo('Not Found');
		}
	}

	private function get_galbox_svg() {

		$header = !isset($_GET['noxml']);

		$box = new ods_box($_GET['cnf']);
		if($header)
			header ('Content-Type: image/svg+xml');


		header_remove(""Pragma"");
		header_remove(""Expires"");

		header(""Cache-Control: max-age=86400"");

		echo $box->run($header);
	}


private function get_lamp_svg() {
$anm='';
$anm2='';
$foncolor = ""rgb(0,176,80)"";
$incolor=""white"";

if(isset($_GET['auto']))
	$foncolor = ""rgb(0,176,80)"";
if(isset($_GET['manual']))
	$foncolor = ""rgb(0,112,192)"";
if(isset($_GET['unmanaged']))
	$foncolor = ""rgb(166,166,166)"";

$outcolor = $foncolor;
if(isset($_GET['nopower']))
	$outcolor = ""rgb(255,0,0)"";
if(isset($_GET['on']))
	$incolor=""white"";
if(isset($_GET['off']))
	$incolor=""black"";
$circlecolor=$incolor;
if(isset($_GET['trouble']))
	$circlecolor=""red"";
$opa=1;
if(isset($_GET['nocon']))
	$opa=""0.5"";

if (isset($_GET['shape'])) {
	$foncolor=""black"";
	$outcolor=""black"";
	$circklecolor=""white"";
	$incolor=""white"";
}

if(isset($_GET['timeallert']))
	$anm=$this->anime1;
if(isset($_GET['controlallert']))
	$anm=$this->anime2;
if(isset($_GET['timeallert']) && isset($_GET['controlallert']))
   $anm=$this->animeall;

if(isset($_GET['open']))
	$anm=$this->animeall;

if(isset($_GET['ous']))
	$anm2=$this->animeous;

$data = <<<EOT
<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>
<svg
   xmlns:dc=""http://purl.org/dc/elements/1.1/""
   xmlns:cc=""http://creativecommons.org/ns#""
   xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""
   xmlns:svg=""http://www.w3.org/2000/svg""
   xmlns=""http://www.w3.org/2000/svg""
   xmlns:sodipodi=""http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd""
   xmlns:inkscape=""http://www.inkscape.org/namespaces/inkscape""
   version=""1.1""
   id=""Capa_1""
   x=""0px""
   y=""0px""
   width=""333.668""
   height=""491.582""
   viewBox=""0 0 333.668 491.582""
   xml:space=""preserve""
   sodipodi:docname=""location.svg""
   inkscape:version=""0.92.1 r15371""><metadata
     id=""metadata4620""><rdf:RDF><cc:Work
         rdf:about=""""><dc:format>image/svg+xml</dc:format><dc:type
           rdf:resource=""http://purl.org/dc/dcmitype/StillImage"" /></cc:Work></rdf:RDF></metadata><defs
     id=""defs4618"" /><sodipodi:namedview
     pagecolor=""#ffffff""
     bordercolor=""#666666""
     borderopacity=""1""
     objecttolerance=""10""
     gridtolerance=""10""
     guidetolerance=""10""
     inkscape:pageopacity=""0""
     inkscape:pageshadow=""2""
     inkscape:window-width=""1920""
     inkscape:window-height=""1017""
     id=""namedview4616""
     showgrid=""false""
     inkscape:zoom=""1.5480632""
     inkscape:cx=""166.834""
     inkscape:cy=""245.791""
     inkscape:window-x=""1272""
     inkscape:window-y=""-8""
     inkscape:window-maximized=""1""
     inkscape:current-layer=""Capa_1"" />
	 <g>
    $anm
    $anm2
	 <path style=""fill:$outcolor;fill-opacity:$opa;""
     d=""M 166.834,0 C 74.842,0 0,74.841 0,166.833 0,203.8 21.764,260.02 68.493,343.759 c 31.887,57.138 63.627,105.4 64.966,107.433 l 22.941,34.773 c 2.313,3.507 6.232,5.617 10.434,5.617 4.202,0 8.121,-2.11 10.434,-5.617 l 22.94,-34.771 c 1.326,-2.01 32.835,-49.855 64.967,-107.435 46.729,-83.735 68.493,-139.955 68.493,-176.926 C 333.668,74.841 258.826,0 166.834,0 Z m 76.511,331.576 C 211.66,388.351 180.649,435.445 179.342,437.424 L 166.834,456.383 154.33,437.429 C 153.016,435.434 121.767,387.918 90.323,331.576 46.978,253.9 25,198.472 25,166.833 25,88.626 88.626,25 166.834,25 c 78.208,0 141.834,63.626 141.834,141.833 0,31.643 -21.978,87.069 -65.323,164.743 z""
     id=""out""
     inkscape:connector-curvature=""0"" /><path 
     d=""m 166.51102,70.061158 c -52.60786,0 -95.40686,42.800032 -95.40686,95.406862 0,52.60682 42.799,95.40685 95.40686,95.40685 52.60786,0 95.40685,-42.80003 95.40685,-95.40685 0,-52.60683 -42.79899,-95.406862 -95.40685,-95.406862 z m 0,165.028072 c -38.38966,0 -69.62123,-31.23156 -69.62123,-69.62121 0,-38.38966 31.23157,-69.621225 69.62123,-69.621225 38.39069,0 69.62121,31.231565 69.62121,69.621225 0,38.38965 -31.23052,69.62121 -69.62121,69.62121 z""
     id=""path4579""
     inkscape:connector-curvature=""0""
     style=""stroke-width:1.0314256; fill:$circlecolor;fill-opacity:$opa"" /><g
     id=""g4585""
     transform=""translate(-78.957)"" /><g
     id=""g4587""
     transform=""translate(-78.957)"" /><g
     id=""g4589""
     transform=""translate(-78.957)"" /><g
     id=""g4591""
     transform=""translate(-78.957)"" /><g
     id=""g4593""
     transform=""translate(-78.957)"" /><g
     id=""g4595""
     transform=""translate(-78.957)"" /><g
     id=""g4597""
     transform=""translate(-78.957)"" /><g
     id=""g4599""
     transform=""translate(-78.957)"" /><g
     id=""g4601""
     transform=""translate(-78.957)"" /><g
     id=""g4603""
     transform=""translate(-78.957)"" /><g
     id=""g4605""
     transform=""translate(-78.957)"" /><g
     id=""g4607""
     transform=""translate(-78.957)"" /><g
     id=""g4609""
     transform=""translate(-78.957)"" /><g
     id=""g4611""
     transform=""translate(-78.957)"" /><g
     id=""g4613""
     transform=""translate(-78.957)"" /><path
     style=""opacity:1;fill:$incolor;fill-opacity:$opa;fill-rule:evenodd;stroke:none;stroke-width:1.39170384;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1""
     d=""m 139.55478,232.35515 c -16.58989,-6.60707 -28.58213,-18.03317 -37.03437,-35.28599 -6.38482,-13.03281 -7.31297,-17.131 -7.19708,-31.77843 0.10703,-13.52786 1.31773,-19.29209 6.19162,-29.47857 20.24225,-42.306575 76.0645,-53.865996 110.39606,-22.86032 16.49621,14.89816 23.55823,30.9106 23.55823,53.41604 0,15.0389 -0.98737,19.91288 -6.1896,30.55391 -6.8541,14.01987 -18.68856,25.94228 -33.23311,33.48003 -13.78082,7.14194 -41.09228,8.08629 -56.49175,1.95333 z""
     id=""in""
     inkscape:connector-curvature=""0"" /><path
     style=""opacity:1;fill:$foncolor;fill-opacity:$opa;fill-rule:evenodd;stroke:none;stroke-width:1.32080853;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1""
     d=""M 155.30991,441.46651 C 87.7426,335.06388 48.24689,260.59788 30.49318,206.13462 17.902965,167.51149 22.33961,127.83742 43.19548,92.545955 47.13571,85.878452 57.60351,73.120056 66.45725,64.193964 79.6908,50.852276 86.10715,46.269966 102.51958,38.439622 c 25.34418,-12.091664 38.10009,-15.050718 64.51217,-14.965211 39.60128,0.128207 71.08382,13.371175 99.77161,41.968433 33.76712,33.66056 48.87939,78.982346 40.21435,120.602906 -9.96466,47.86278 -55.10745,138.24455 -118.4759,237.20424 -10.9865,17.15712 -20.90722,31.50438 -22.04607,31.8828 -1.13885,0.37843 -6.17246,-5.77141 -11.18583,-13.66628 z m 37.97331,-186.45037 c 7.0625,-2.19116 16.94549,-6.38177 21.96218,-9.31247 11.50031,-6.71836 29.4853,-25.54903 35.35406,-37.01644 C 277.86863,155.40391 249.9923,90.544348 192.68445,73.937085 172.78736,68.171099 145.53005,70.166632 127.17736,78.732914 64.14447,108.15411 51.97082,190.13931 103.86658,235.72282 c 5.57279,4.89497 12.99612,10.39475 16.49629,12.22174 21.51321,11.22941 50.46835,14.03738 72.92035,7.07158 z""
     id=""fon""
     inkscape:connector-curvature=""0"" />
	 </g>
	 <circle cx=""50"" cy=""50"" r=""5"" fill=""green"" />
        <circle cx=""70"" cy=""50"" r=""5"" fill=""green"" />
</svg>
EOT;


		$this->output($data);
}

private function get_box_svg() {
$anm='';
$anm2='';
$foncolor = ""rgb(0,176,80)"";
$incolor=""white"";
    $depth   = 33;
    $bodyX   = 42.333332;
    $bodyW   = 74.083336;
    $bodyH   = 89.958336;

    $canvasW = $bodyW + $depth*2 + 5;
    $canvasH = 100.79864;

    if(isset($_GET['auto']))
	$foncolor = ""rgb(0,176,80)"";
if(isset($_GET['manual']))
	$foncolor = ""rgb(0,112,192)"";
if(isset($_GET['unmanaged']))
	$foncolor = ""rgb(166,166,166)"";

$outcolor = $foncolor;
if(isset($_GET['nopower']))
	$outcolor = ""rgb(255,0,0)"";
if(isset($_GET['on']))
	$incolor=""white"";
if(isset($_GET['off']))
	$incolor=""black"";
$circlecolor=$foncolor;
if(isset($_GET['trouble']))
	$circlecolor=""red"";
$opa=1;
if(isset($_GET['nocon']))
	$opa=""0.5"";


if(isset($_GET['timeallert']))
	$anm=$this->anime1;
if(isset($_GET['controlallert']))
	$anm=$this->anime2;
if(isset($_GET['timeallert']) && isset($_GET['controlallert']))
	$anm=$this->animeall;

if(isset($_GET['open']))
	$anm=$this->animeall;

if(isset($_GET['ous']))
	$anm2=$this->animeous;


if (isset($_GET['shape'])) {
	$foncolor=""black"";
	$outcolor=""black"";
	$circlecolor=""black"";
	$incolor=""white"";
}
    $circlesCount = isset($_GET['multiple']) && $_GET['multiple'] == 'true' ? 2 : 1;

    $centerX = 78.845825;
    $circle1 = '<circle
       style=""fill:' . $incolor . ';fill-opacity:' . $opa . ';stroke:none;stroke-width:0.26458332""
       id=""dyra""
       cx=""' . $centerX . '""
       cy=""136.13333""
       r=""18.520834"" />';

    $circle2 = '';
    if ($circlesCount === 2) {
        $spacing = 30;
        $circle1 = '<circle
       style=""fill:' . $incolor . ';fill-opacity:' . $opa . ';stroke:none;stroke-width:0.26458332""
       id=""dyra""
       cx=""' . ($centerX - $spacing / 2) . '""
       cy=""136.13333""
       r=""14"" />';

        $circle2 = '<circle
       style=""fill:' . $incolor . ';fill-opacity:' . $opa . ';stroke:none;stroke-width:0.26458332""
       id=""dyra2""
       cx=""' . ($centerX + $spacing / 2) . '""
       cy=""136.13333""
       r=""14"" />';
    }

    $doorSvg = '';
    if (isset($_GET['open']) && $_GET['open']=='1') {

        $bodyY = 106.5;
        $slant = 15;
        $doorClr = '#002b5c';
        $bodyR = $bodyX + $bodyW;
        $leftX  = $bodyX  - $depth;
        $rightX = $bodyR + $depth;

        $DL_p1 = $bodyX  .','.$bodyY;
        $DL_p2 = $bodyX  .','.($bodyY + $bodyH - $slant);
        $DL_p3 = $leftX  .','.($bodyY + $bodyH );
        $DL_p4 = $leftX  .','.($bodyY + $slant);

        $DR_p1 = $bodyR .','.$bodyY;
        $DR_p2 = $bodyR .','.($bodyY + $bodyH - $slant);
        $DR_p3 = $rightX.','.($bodyY + $bodyH );
        $DR_p4 = $rightX.','.($bodyY + $slant);

        $doorSvg = '
<polygon id=""doorLeft""  points=""'.$DL_p1.' '.$DL_p2.' '.$DL_p3.' '.$DL_p4.'"" style=""fill:'.$doorClr.';fill-opacity:'.$opa.';stroke:none""/>
<polygon id=""doorRight"" points=""'.$DR_p1.' '.$DR_p2.' '.$DR_p3.' '.$DR_p4.'"" style=""fill:'.$doorClr.';fill-opacity:'.$opa.';stroke:none""/>';
    }

$data = <<<EOT
<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>

<svg
   xmlns:dc=""http://purl.org/dc/elements/1.1/""
   xmlns:cc=""http://creativecommons.org/ns#""
   xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""
   xmlns:svg=""http://www.w3.org/2000/svg""
   xmlns=""http://www.w3.org/2000/svg""
   xmlns:sodipodi=""http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd""
   xmlns:inkscape=""http://www.inkscape.org/namespaces/inkscape""
   width =""{$canvasW}mm""
      height=""{$canvasH}mm""
      viewBox=""-{$depth} 0 {$canvasW} {$canvasH}""
   version=""1.1""
   id=""svg8""
   inkscape:version=""0.92.1 r15371""
   sodipodi:docname=""box.svg"">
  <defs
     id=""defs2"" />
  <sodipodi:namedview
     id=""base""
     pagecolor=""#ffffff""
     bordercolor=""#666666""
     borderopacity=""1.0""
     inkscape:pageopacity=""0.0""
     inkscape:pageshadow=""2""
     inkscape:zoom=""0.5""
     inkscape:cx=""257.32181""
     inkscape:cy=""180.5""
     inkscape:document-units=""mm""
     inkscape:current-layer=""layer1""
     showgrid=""false""
     inkscape:window-width=""1920""
     inkscape:window-height=""1017""
     inkscape:window-x=""1272""
     inkscape:window-y=""-8""
     inkscape:window-maximized=""1"">
    <inkscape:grid
       type=""xygrid""
       id=""grid4493""
       originx=""-36.916937""
       originy=""-100.40938"" />
  </sodipodi:namedview>
  <metadata
     id=""metadata5"">
    <rdf:RDF>
      <cc:Work
         rdf:about="""">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource=""http://purl.org/dc/dcmitype/StillImage"" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g	
     inkscape:label=""Layer 1""
     inkscape:groupmode=""layer""
     id=""layer1""
     transform=""translate(-36.916938,-95.791984)"">
    $anm
    $anm2
    <rect
       style=""fill:$foncolor;fill-opacity:$opa;stroke:#ffffff;stroke-width:0.24052194""
       id=""rectbox""
       width=""74.083336""
       height=""89.958336""
       x=""42.333332""
       y=""106.5"" />
    <rect
       style=""fill:$outcolor;fill-opacity:$opa;stroke:#ffffff;stroke-width:0.24945155""
       id=""rectup""
       width=""84.666664""
       height=""10.583333""
       x=""37.041664""
       y=""95.91671""
       inkscape:label=""#rrectup"" />
    <rect
       style=""fill:$circlecolor;fill-opacity:$opa;stroke:#ffffff;stroke-width:0.26458332""
       id=""rectdown""
       width=""74.083336""
       height=""26.458332""
       x=""42.333328""
       y=""170"" />
    $circle1
    $circle2
    $doorSvg
  </g>
</svg>
EOT;

		$this->output($data);
}


	private function putsvg($data, $addxml=false) {
	$header = ""<svg>"";
$header = <<<EOT
<svg
   xmlns:dc=""http://purl.org/dc/elements/1.1/""
   xmlns:cc=""http://creativecommons.org/ns#""
   xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""
   xmlns:svg=""http://www.w3.org/2000/svg""
   xmlns=""http://www.w3.org/2000/svg""

   viewBox=""0 0 1000 600""
   version=""1.1""
   id=""svg8""
   >

EOT;
	$tail = '</svg>';
	if($addxml) {
		$header = '<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>'.""\n\n$header"";
	}
	return $header.""\n"".$data.""\n"".$tail;
	}

	private function get_test_svg() {
		//$data = $this->draw_fuze_group();
		$data = $this->draw_box();
		$this->output( $this->putsvg($data, true) );
	}

	private function output($data)	{
		header_remove(""Pragma"");
		header_remove(""Expires"");

		//header(""Cache-Control: max-age=86400"");
		header('Content-type: image/svg+xml');
		header('Content-Length: '.strlen($data));
		echo $data;
	}

	private function err_out()	{
		header($_SERVER['SERVER_PROTOCOL'] . ' 404 Not Found');
		echo $this->num . ' Not Found ';
	}
}"
ue6U4WW9,ods_api.php,eqeqwan21,PHP,Wednesday 18th of June 2025 10:57:31 AM CDT,"private function get_states() {
	$whr = [];
	$arg=[];
	$mapfilter = $this->mapfilter(""d"");
	$lines = '';
	
	foreach(['Town_id','Location','District','Type','Sip','Ip','Smart','Devices_id','Name', 'Station', 'DimProfile_id'] as $gv) {
		if(isset($_GET[$gv])) {
			$alias = '';
			if($gv=='Devices_id')
				$alias = 'StatusReg.';
			if($gv=='DimProfile_id' || $gv=='Type')
				$alias = 'd.';
			$whr[] = ""($alias`$gv`=?)"";
			$arg[] = $_GET[$gv];
		}
	}

	if(isset($_GET['Mode'])) {
		$whr[] = ""(StatusReg.`Mode`in (?))"";
		$arg[] = $_GET['Mode'];
	}

	if(isset($_GET['box'])) {
		$whr[] = ""(`Lines`.Devices_id =?)"";
		$arg[] = $_GET['box'];
		$lines = 'left join `Lines` on `Lines`.id = d.Lines_id';
	}

	if(isset($_GET['Trouble'])) {
		$whr[] = '(`Trouble`' . ($_GET['Trouble']>0?'>':'=') . '0)';
	}

	if(isset($_GET['State'])) {
		$whr[] = '(`State`' . ($_GET['State']>0?'>':'=') . '0)';
	}
	
	if(isset($_GET['Power'])) {
		$whr[] = '('.($_GET['Power']>0?'`Power`>=7 or (d.`Type`=2 and `Power`>0)':'`Power`=0 or (d.`Type`=1 and `Power`<7)').')';
	}


	if(isset($_GET['mapfilter']))
		$whr[]=$mapfilter;
	
	$where = join($whr, "" AND "");
	
	if(count($arg)==0)
		$arg=null;
	
	if($where !== """")
		$where = 'AND '.$where;
	
	$order = '';
	if(isset($_GET['order'])) {	
		$order = ""order by d.`type`, LPAD(d.CustomNum,10,'0')"";
	}
//V11_Phase
//Anton_30day	
//	StatusReg.Timestamp >= date_sub(now(), INTERVAL 30 DAY)
//	AND

//V11_Phase_30 day_++Anton
	$sql = 
	""
	SELECT d.id, d.Name, d.CustomNum, d.Location, d.District, d.Type, d.lat, d.lng, d.Smart, d.sn,
	StatusReg.id as StatusReg_id, Power, Trouble, Sip, Ip, StatusReg.Mode, State, Timeallert, Controller, Door, Ous, Voltage,
		json_extract(StatusReg.Phase,\""$.v\"") as PhaseV,
		StatusReg.Timestamp, StatusReg.Devices_id, IncomingLog_id, StatusReg.DimProfile_id, OutgoingLog_id,
		UNIX_TIMESTAMP(StatusReg.Timestamp) as unixtime,
		 (
          SELECT COUNT(DISTINCT `Switch`)
          FROM `Lines`
          WHERE `Devices_id` = d.id
            AND `Switch` > 0
        ) AS num_contactors
	from StatusReg 
	inner join Devices as d	on Devices_id=d.id
	$lines
	inner join (select max(id) as id from StatusReg group by Devices_id) as ssr on ssr.id = StatusReg.id
	where
	(d.OffTime >= curdate() OR isnull(d.OffTime)) and not isnull(d.OnTime)
	$where
	$order
	"";

	//echo $sql;
	$this->run_query($sql, $arg, ['Devices', 'IncomingLog', 'OutgoingLog', 'StatusReg'],false,'id');
 }"
myLGucFh,RequestException: error with request,basedcount_bot,Python,Wednesday 18th of June 2025 10:45:48 AM CDT,"Traceback (most recent call last):
  File ""/home/gmktec-server/Bots/basedcount_bot/basedcount_bot.py"", line 46, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/home/gmktec-server/Bots/basedcount_bot/basedcount_bot.py"", line 263, in read_comments
    async for comment in pcm_subreddit.stream.comments(skip_existing=True):  # Comment
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/util.py"", line 172, in stream_generator
    [result async for result in function(limit=limit, **function_kwargs)]
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/util.py"", line 172, in <listcomp>
    [result async for result in function(limit=limit, **function_kwargs)]
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 37, in __anext__
    await self._next_batch()
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 90, in _next_batch
    self._listing = await self._reddit.get(self.url, params=self.params)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 54, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 813, in get
    return await self._objectify_request(method=""GET"", params=params, path=path)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 570, in _objectify_request
    await self.request(
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 54, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 1061, in request
    return await self._core.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 383, in request
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 286, in _request_with_retries
    response, saved_exception = await self._make_request(
                                ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 192, in _make_request
    response = await self._rate_limiter.call(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/rate_limit.py"", line 51, in call
    response = await request_function(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/requestor.py"", line 80, in request
    raise RequestException(exc, args, kwargs) from None
asyncprawcore.exceptions.RequestException: error with request 
"
n21jxrfs,Limes neper,ikizid,Python,Wednesday 18th of June 2025 10:43:09 AM CDT,"def potence(luku, pot):
    i = tulos = 1
    while True:
        tulos *= luku
        i += 1
        if i > pot:
            break
    return tulos

if __name__ == ""__main__"":    
    n = 10000
    lauseke = 1 + 1 / n
    lauseke = potence(lauseke, n)
    mjono = bytearray(200)
    mjono = str(lauseke)
    print(mjono)"
S2zgThK7,tiles.js,eqeqwan21,JavaScript,Wednesday 18th of June 2025 10:40:36 AM CDT,"""use strict"";

var ddata = null;
let cmddata = null; // devices in control panel
let lg = null;
let seldev=[];
let borderDevice=null;
let mks = null;
let goview = false;
let gotown = false;
let godevice = false;
let gostreet = false;
let selection = null;
let freeze = false;

const storagekey = ""tiles""+window.location.pathname; 

$(async function() {
	
	
	if( get['device']!==undefined ) {
		godevice = get['device'];
		borderDevice = get['device'];
	}

	selection = new SelectionArea({

		// Class for the selection-area
		class: 'selection',
		
		// All elements in this container can be selected
		selectables: ['.box-wrap > div.dropdown'],

		// The container is also the boundary in this case
		boundaries: ['#fsdiv'],
	}).on('beforestart', ({store, event}) => {
		if (!event.ctrlKey && !event.metaKey && !event.shiftKey && !event.altKey)
			return false;
	}).on('start', ({store, event}) => {
		freeze = true;
		// Remove class if the user isn't pressing the control key or ⌘ key
		if (!event.ctrlKey && !event.metaKey) {

			// Unselect all elements
			for (const el of store.stored) {
				el.classList.remove('selected');
			}

			// Clear previous selection
			selection.clearSelection();
		}
	}).on('move', ({store: {changed: {added, removed}}}) => {
		// Add a custom class to the elements that where selected.
		for (const el of added) {
			el.classList.add('selected');
    }

    // Remove the class from elements that where removed
    // since the last selection
    for (const el of removed) {
        el.classList.remove('selected');
    }
	}).on('stop', () => {
		selection.keepSelection();
		let ssd = selection.getSelection();
		seldev = ssd.map( e => e.id.substr(2) );
		freeze = false;
		selection_fire(true);
	});
});

function tiles() {
	let html="""";
	let i = 0, type = 0;
	for(let dev of ddata.rows) {
		i++;
		let icon = devicon(dev);
		let cls = dev.Type == 1 ? 'icon-box' : 'icon-lamp';
		let div = `
		<div class=""dropdown ${i>500?'cva':''}"" id=""d_${dev.id}"">
			<div data-toggle=""dropdown"" data-boundary=""viewport"" id=""btn_${dev.id}"">
				<img loading:""eager"" src=""${icon}"" class=""${cls}""><p>${dev.CustomNum||''}</p>
			</div>
			
			<div class=""dropdown-menu"" aria-labelledby=""btn_${dev.id}"" ></div>		
		</div>
		`;
		
		if(type == 1 && dev.Type == 2)
			html += '<div class=""break""></div>';

		html +=div;
		type = dev.Type;
	}
		
	$('.boxes div.dropdown').tooltip('hide');
	selection.clearSelection();
	//$(""#tiles"").html(html);
	document.getElementById(""tiles"").innerHTML = html;
	
	for(let sd of seldev) {
		if(ddata.map[sd] !== undefined)
			selection.select(""#d_""+sd);
	}
	selection.keepSelection();

	//$('.boxes div.dropdown').dropdown();
	
	$('.boxes div.dropdown').tooltip({
		html: true,
		delay: { ""show"": 500, ""hide"": 0 },
		title: function() {
			let ind = ddata.map[this.id.substr(2)];
			let dev = ddata.rows[ind];
			
			return `${dev.sn?HtmlEncode(dev.sn)+""</br>"":""""}${HtmlEncode(dev.Name)}<br>${HtmlEncode(dev.Location)}`
		}
	});
	
	$('.boxes div.dropdown-menu').parent().on('show.bs.dropdown', function () {
		$(this).css(""content-visibility"", ""visible"");
		let mnu = $(this).find("".dropdown-menu"")[0];
		let id = ($(mnu).attr(""aria-labelledby"")).substr(4);
		$(mnu).html(deviceContextMenu(id));	
	});
}

async function renew() {
	
	let nextt = 500;	

	let isnew = false;
	if(!freeze)
		isnew = await dataload();
	if(isnew) {
		if(godevice) {
			goDevice(godevice);
		}
		tiles();
		goview = false;
		gotown = false;
		gostreet = false;
		godevice = false;
		nextt = 1500;
	}
	if(seldev.length > 0)
		nextt = 3000;

	setTimeout(renew, nextt);
}

function goDevice(id, border=false, fire=false) {
	let el = document.getElementById(""d_""+id);
	window.scrollTo(0,0);
	let topPos = el.offsetTop;
	let tof = topPos -$("".sidebar-item"").height() - $("".sidebar-item"").offset().top - 20;
	
	window.scrollTo(0, tof);
	if(border) {
		$("".boxes div.dropdown"").removeClass(""fborder"");
		$(el).addClass(""fborder"");
	}
	
	if(fire) {
		$(el).addClass(""shadowpulse"");
		$(el).on('animationend',()=>$(el).removeClass(""shadowpulse""));	
	}
	
}


let loadfail=0;
async function dataload() {
	let url = environment.base_url+""/""+""?do=api&fn=states&order"";
	let flt=$.param(makeflt());
	if(flt!=="""")
		url+=""&""+flt;
	let result, ret=false;
    try {
        result = await $.ajax({
            url: url,
            type: 'GET',
			dataType: ""json"",
        });
    } catch (error) {
        console.log(""Error: "",error);
		if(error.status == 401) //unautorized
			window.location=environment.base_url+""/""+""?do=login&b=""+encodeURIComponent(window.location);        

		loadfail++;
		if(ddata === null)
			$(""#content"").html(""<h2>Data was not loaded</h2>"");
		else if(loadfail>1) {
			hulla.send(i18next.t(""No connection to the server""));
			loadfail = 0;
		}
		return ret;
    }
	loadfail=0;
	if(ddata==null || ddata.timestamp != result.timestamp) {
		ddata = result;
		ret = true;
	}
	
	return ret;
}


function cmdclear() {
	$(""#devlist"").html("""");
	seldev = [];
	cmddata = null;
	$("".boxes div.dropdown"").removeClass(""selected"");
	selection.clearSelection();
	cmdpanel();
}

let doMgtStatus = true;
function cmdpanel() {
	if(seldev.length == 0 && !editmode) 
		$(""#allfilter"").removeClass(""d-none"");
	else 
		$(""#allfilter"").addClass(""d-none"");

	
	if(seldev.length == 0) {
		$(""#mapcmd"").addClass(""d-none"");
		$(""#formedit"").removeClass(""d-none"");
		doMgtStatus = false;
	}
	else {
		$(""#mapcmd"").removeClass(""d-none"");
		$(""#formedit"").addClass(""d-none"");
		doMgtStatus = true;
		mgtStatus(true);
	}
}

async function mgtStatus(force=false) {
	if(seldev.length == 0)
		return;
	
	if(mgtStatus.cnt === undefined)
		mgtStatus.cnt = 0;
	
	let headers = {};
	if(mgtStatus.cnt++ > 20 || force) {
		mgtStatus.cnt = 0;
		headers = {""Cache-Control"": ""No-Cache""};
	}
	let url = environment.base_url+""/""+""?do=api&fn=mgtstates&devices=""+seldev.join("","");
	let result;
    try {
        result = await $.ajax({
            url: url,
            type: 'GET',
			dataType: ""json"",
			headers: headers,
        });
    } catch (error) {
        console.log(""Error: "",error);
    }
	let nextt = 550;
	if(cmddata == null || cmddata.last.timestamp !== result.last.timestamp) {
		cmddata = result;
		nextt = 1000;
		$("".devctrl"").removeClass(""queued"");
		for(let id of seldev) {			
			let textcolor = ""black"", title="""";
			
			let queue = cmddata.queue.rows.find(x=>x.Devices_id == id);
			if(queue) {
				$(`#ctrl_${id}`).addClass(""queued"");
				title += i18next.t(""Queued up"") + "": "" + i18next.t(queue.Name);
			}
			
			let last = cmddata.last.rows.find(x=>x.Devices_id == id);
			if(last) {
				textcolor = last.success?""green"":""red"";
				let date = new Date(last.cmdtime * 1000);
				if(title)
					title += ""<br>"";
				
				title += moment(date).format(""LT"");
				title += "" "" + i18next.t(last.Name) + "" - "" + i18next.t(last.success?""Success"":""Fail"");
				
			}
			$(`#ctrl_${id}`).css('color', textcolor);
			$(`#ctrl_${id}`).attr('data-original-title', title);
			//$(`#ctrl_${id}`).attr('title', title).tooltip('update');
			
		}
		$("".devctrl"").tooltip({container:'#mapcmd'});
	}
	if(doMgtStatus)
		setTimeout(mgtStatus, nextt);
}


function findDevice() {
	let ss = $(""#findStr"").val().trim().toUpperCase();
	
	if(ss) {
		let fr = ddata.rows.find(x => (x.CustomNum||"""").toUpperCase() == ss || (x.sn||"""").toUpperCase() == ss);
		fr = fr || ddata.rows.find(x => (x.Name||"""").toUpperCase().includes(ss));
		
		if(fr) {
			$("".cli"").removeClass(""clisel"");
			goDevice(fr.id, true, true);
			borderDevice = fr.id;
		}
	}

	return false;
}"
