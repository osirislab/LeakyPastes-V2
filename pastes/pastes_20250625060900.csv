id,title,username,language,date,content
zFtpT1uD,MAKE $500 INSTANTLY P,zalais,JavaScript,Wednesday 25th of June 2025 01:01:55 AM CDT,"
https://t.me/WorldwideACC
1438408
"
Lcpb2kdi,✅ MAKE $12OO IN 10 MIN 8,zalais,JavaScript,Wednesday 25th of June 2025 01:01:21 AM CDT,"
https://t.me/WorldwideACC
3398429
"
VkG3ga43,FREE BTC GUIDE D,zalais,JavaScript,Wednesday 25th of June 2025 01:00:42 AM CDT,"
https://t.me/WorldwideACC
6676689
"
q8MPtsCU,Make $1200 in 15 minutes O,zalais,JavaScript,Wednesday 25th of June 2025 01:00:07 AM CDT,"
https://t.me/WorldwideACC
3202672
"
kE5T7Usy,MAKE $500 INSTANTLY P,zalais,JavaScript,Wednesday 25th of June 2025 12:59:33 AM CDT,"
https://t.me/WorldwideACC
6033932
"
sKN36zg4,✅ MAKE $12OO IN 10 MIN 8,zalais,JavaScript,Wednesday 25th of June 2025 12:59:00 AM CDT,"
https://t.me/WorldwideACC
6361718
"
Rg4teNTZ,✅ Crypto Accounts I,zalais,JavaScript,Wednesday 25th of June 2025 12:58:23 AM CDT,"
https://t.me/WorldwideACC
6781102
"
MypuzdcH,FREE BTC GUIDE D,zalais,JavaScript,Wednesday 25th of June 2025 12:57:48 AM CDT,"
https://t.me/WorldwideACC
4831865
"
Wm88m1Gy,Make $1200 in 15 minutes O,zalais,JavaScript,Wednesday 25th of June 2025 12:57:15 AM CDT,"
https://t.me/WorldwideACC
8097040
"
qyBKsQrN,MAKE $500 INSTANTLY P,zalais,JavaScript,Wednesday 25th of June 2025 12:56:40 AM CDT,"
https://t.me/WorldwideACC
4251765
"
rEHH9FdY,✅ MAKE $12OO IN 10 MIN 8,zalais,JavaScript,Wednesday 25th of June 2025 12:56:06 AM CDT,"
https://t.me/WorldwideACC
4230660
"
rHcKz1XS,✅ Crypto Accounts I,zalais,JavaScript,Wednesday 25th of June 2025 12:55:31 AM CDT,"
https://t.me/WorldwideACC
6106207
"
0RALXGSu,FREE BTC GUIDE D,zalais,JavaScript,Wednesday 25th of June 2025 12:54:57 AM CDT,"
https://t.me/WorldwideACC
9171521
"
bDP1yLP9,Make $1200 in 15 minutes O,zalais,JavaScript,Wednesday 25th of June 2025 12:54:22 AM CDT,"
https://t.me/WorldwideACC
5252188
"
0KANCzct,✅ MAKE $12OO IN 10 MIN 8,zalais,JavaScript,Wednesday 25th of June 2025 12:53:45 AM CDT,"
https://t.me/WorldwideACC
3332658
"
q6en3zhd,✅ Crypto Accounts I,zalais,JavaScript,Wednesday 25th of June 2025 12:53:10 AM CDT,"
https://t.me/WorldwideACC
1459102
"
6ugCqCUd,FREE BTC GUIDE D,zalais,JavaScript,Wednesday 25th of June 2025 12:52:34 AM CDT,"
https://t.me/WorldwideACC
3496098
"
SHhgVnrN,Make $1200 in 15 minutes O,zalais,JavaScript,Wednesday 25th of June 2025 12:52:01 AM CDT,"
https://t.me/WorldwideACC
5969302
"
DVKKCkRN,MAKE $500 INSTANTLY P,zalais,JavaScript,Wednesday 25th of June 2025 12:51:26 AM CDT,"
https://t.me/WorldwideACC
6711772
"
H1yJ907G,Test 2,mobaroksayed,JSON,Wednesday 25th of June 2025 12:03:50 AM CDT,"{
    ""Title"": ""Update Available!"",
    ""versionCode"": ""16"",
    ""versionName"": ""2.6.5"",
    ""AppName"": ""Android Assistant"",
    ""releaseDate"": "" | Date: Jun, 22 "",
    ""Msg"": ""𝗪𝗵𝗮𝘁'𝘀 𝗡𝗲𝘄✨️\n• Improved\n• Added new features\n• Bug fixes and improvements"",
    ""downloadLink"": ""https://t.me/Getmodpcs""
}"
wPS5tSQ1,Test,mobaroksayed,JSON,Tuesday 24th of June 2025 11:33:32 PM CDT,"{
  ""isUpdate"": true,
  ""title"": ""𝗡𝗲𝘄 𝗨𝗽𝗱𝗮𝘁𝗲 𝗔𝘃𝗮𝗶𝗹𝗮𝗯𝗹𝗲!"",
  ""version"": ""Update the latest version enjoy the new features."",
  ""updateUrl"": ""Getmodpcs"",
  ""description"": [
    """",
    """",

""""

  ]
}"
i9Qu7URL,roblox highlighter,Dragos2K11,Lua,Tuesday 24th of June 2025 11:26:21 PM CDT,"local Players = game:GetService(""Players"")

local function addHighlight(player)
    
    local character = player.Character or player.CharacterAdded:Wait()
    if character then
        
        if character:FindFirstChildOfClass(""Highlight"") then
            return
        end
        local highlight = Instance.new(""Highlight"")
        highlight.Adornee = character
        highlight.FillColor = Color3.fromRGB(255, 255, 0) -- Yellow highlight
        highlight.OutlineColor = Color3.fromRGB(0, 0, 0) -- Black outline
        highlight.Enabled = true
        highlight.Parent = character
    end
end

for _, player in pairs(Players:GetPlayers()) do
    if player ~= Players.LocalPlayer then
        addHighlight(player)
        player.CharacterAdded:Connect(function()
            addHighlight(player)
        end)
    end
end

Players.PlayerAdded:Connect(function(player)
    if player ~= Players.LocalPlayer then
        player.CharacterAdded:Connect(function()
            addHighlight(player)
        end)
    end
end)"
RYMDM0Sf,How to Apply for 190 Visa Nomination Victoria in 2025,ONEderland,HTML,Tuesday 24th of June 2025 10:25:10 PM CDT,https://onederland.com.au/victoria-state-nomination-190-visa-application/
TSyjHpMM,add custom script on footer,arie_cristianD,PHP,Tuesday 24th of June 2025 08:49:04 PM CDT,"function custom_footer_javascript() {
	?>
<!-- add your script here -->

	<?php
}

add_action( 'wp_footer', 'custom_footer_javascript' );"
1ceHufvL,copilot_appblock.xml,brianfgonzalez,XML,Tuesday 24th of June 2025 08:30:23 PM CDT,"<AppLockerPolicy Version=""1"">
  <RuleCollection Type=""Appx"" EnforcementMode=""Enabled"">
    <FilePublisherRule Id=""12b0125d-5090-4a2e-a358-a6df0c326b9d"" Name=""Microsoft.Copilot, from Microsoft Corporation"" Description="""" UserOrGroupSid=""S-1-1-0"" Action=""Deny"">
      <Conditions>
        <FilePublisherCondition PublisherName=""CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US"" ProductName=""Microsoft.Copilot"" BinaryName=""*"">
          <BinaryVersionRange LowSection=""*"" HighSection=""*"" />
        </FilePublisherCondition>
      </Conditions>
    </FilePublisherRule>
  </RuleCollection>
  <RuleCollection Type=""Dll"" EnforcementMode=""NotConfigured"" />
  <RuleCollection Type=""Exe"" EnforcementMode=""NotConfigured"" />
  <RuleCollection Type=""Msi"" EnforcementMode=""NotConfigured"" />
  <RuleCollection Type=""Script"" EnforcementMode=""NotConfigured"" />
</AppLockerPolicy>"
ytB6VRBR,todo.py,DrAungWinHtut,Python,Tuesday 24th of June 2025 08:29:12 PM CDT,"# pseudocode
# 0 - exit
# 1 - add todo
# 2 - show todo
# 3 - delete todo
# 4 - update todo
import os  # os.system('dos commands')  // cls//pause//notepad area.txt

todos = ['study','cook','meeting'] #global variable


def add_todo():
    task = input('Enter new task: ')
    todos.append(task)
    print('Added a new task')

def show_todos():
    i = 1
    for todo in todos:
        print(f'{i} - {todo}')
        i = i + 1

def delete_todo():
    show_todos()
    index = input('choose index to delete: ')
    index = int(index) - 1
    del todos[index]
    print('task deleted')

def update_todo():
    show_todos()
    index = input('choose index to delete: ')
    task = input('enter task to update: ')
    index = int(index) - 1
    todos[index] = task
    print('task updated')

ans = -999
while ans != 0:
    os.system(""cls"")
    print(""0 - exit"")
    print(""1 - add todo"")
    print(""2 - show todo"")
    print(""3 - delete todo"")
    print(""4 - update todo"")

    ans = input(""Please choose: 0,1,2,3,4: "")
    ans = int(ans)
    os.system('cls')

    if ans == 0:
        print(""you choose to exit, good bye!"")
        exit(0)

    elif ans == 1:
        print(""add todo"")
        add_todo()

    elif ans == 2:        
        print(""show todo"")
        show_todos()


    elif ans == 3:
        print(""delete todo"")
        delete_todo()

    elif ans == 4:
        print(""update todo"")
        update_todo()

    else:
        print('wrong input, pls try again!')

    os.system(""pause"")
"
ECn0vFyG,ToolScript (stacks + Amount),Sungmingamerpro13,CSS,Tuesday 24th of June 2025 08:24:05 PM CDT,"Tool = script.Parent

player = game.Players.LocalPlayer
Frame = player.PlayerGui:WaitForChild(""BackpackGui"").Frame

Tool.Amount:GetPropertyChangedSignal(""Value""):Connect(function()
	Frame.usesLabel.Text = ""Uses: ""..Tool.Amount.Value
end)
Frame.usesLabel.Text = ""Uses: ""..Tool.Amount.Value

Tool.Activated:Connect(function()
	if Tool:WaitForChild(""Amount"") and Tool.Amount.Value > 1 then
		Tool.Amount.Value -= 1
	else
		if Tool:WaitForChild(""stacks"") and Tool.stacks.Value > 1 then
			Tool.stacks.Value -= 1
		else
			Tool:Destroy()
			Frame.usesLabel.Visible = false
		end
	end
end)

Tool.Equipped:Connect(function()
	Frame.usesLabel.Visible = true
end)

Tool.Unequipped:Connect(function()
	Frame.usesLabel.Visible = false
end)
"
TgvAMLLM,Lorebook,Lynerus,PHP,Tuesday 24th of June 2025 07:52:08 PM CDT,"{{char}} is {{user}}'s sex toy

{{char}} obeys {{user}}

{{char}} will send nude pictures of herself if asked by {{user}}

{{char}} is a gorgeous online gamer girl

{{char}} is untouched

{{char}} a virgin

{{char}} is playful"
GEvJfsGr,Fossils,voskhodart,CSS,Tuesday 24th of June 2025 07:27:06 PM CDT,"/* Code & header art by Voskhod. Team icons belong to Art Fight. */

.artfight-nav {
  background-color: #432716 !important;
  font-family: Verdana, sans-serif;
  color: #e7b668;
  border-bottom: 2px #dfab57 solid;
}

.w-25 {
  background-image: url(https://images.artfight.net/2025/2025_Fossils.png) !important;
  background-size: contain;
  padding: 30px;
  max-height: 10px;
}

.banner {
  background-image: url(https://i.imgur.com/EdEODwp.png) !important;
  background-position: left !important;
  max-height: 150px;
  border-bottom: 2px #e7b668 solid;
}


.nav-link {
  color: #e7b668 !important;
  text-transform: uppercase;
  letter-spacing: 1px;
  font-weight: 600;
}


.nametag {
  border-radius: 0px !important;
}
.nav-item {
  border-radius: 0px;
}
.nav-link.active {
  border-radius: 0px;
}
.nav-item:hover {
}

.fas {
  color: #e7b668;
}

.badge {
  color: #dfab57;
  background-color: #732411;
  font-size: 9px;
  font-style: italic;
  text-transform: lowercase;
  padding: 5px;
  border: 2px #e7b668 solid;
}

.dropdown-menu {
  background: #dd9c46;
  color: #e7b668 !important;
  border: 2px #e7b668 solid;
}

.dropdown-item {
  color: #a04825 !important;
  text-transform: lowercase;
  font-weight: bold;
}

.dropdown-item:hover {
  background: #ffbeb3 !important;
  font-style: italic;
}

.dropdown-header {
  color: #f7d092;
  font-weight: 900;
  letter-spacing: 1px;
}

.dropdown-divider {
  height: 4px;
  margin: 5px;
  overflow: hidden;
  border-top: 1px solid #e7cfc6 !important;
  border-bottom: 1px solid #ffd5d1 !important;
}

#wrapper {
  background: #6f65bf;
  background-image: url(https://i.imgur.com/oKI9UoG.jpeg);
  background-attachment: fixed;
  background-size:cover;
  color: #e7b668;
}

.mb-3 {
  margin-bottom: 0px !important;
}

#content {
  background-image: url(https://i.imgur.com/LTlGSkb.png);
  padding-top: 30px;
  background-repeat: no-repeat;
  background-position: top;
}

.profile-header-wrapper {
  background: #5e3425;
  padding: 20px;
  border-bottom: 2px #e7b668 solid;
}

.bg-light {
  background-image: url(https://i.imgur.com/eYGIDUG.jpeg);
  background-attachment: fixed;
}

.panel-heading {
  border: 2px #e7b668 solid !important;
  font-family: Verdana, sans-serif;
}

.card {
  background: #dfab57;
  border: 0px;
  color: #e7b668;
  border-radius: 0px;
}

td {
  background: #896955;
}

a {
  color: #dfab57 !important;
  font-weight: 800;
  text-decoration: none;
}

.btn:hover {
  color: #e7b668;
  text-decoration: none;
  background: #debfa5 !important;
}

.element-disabled {
  opacity: .55;
  color: #e7b668 !important;
}

.btn {
  background: #dfab57;
  border: 1px #371b12 solid;
  color: #5e3425 !important;
  border-radius: 0px;
}


#navbar ul.navbar-nav.mr-auto li a i {
  display: none;
}

.artfight-nav .navbar-nav:first-child .nav-item:first-child {
  background: url(https://i.imgur.com/gfZhvUf.png);
  padding-left: 15px;
  background-repeat: no-repeat;
  background-position: left;
}

.artfight-nav .navbar-nav:first-child .nav-item:first-child + .nav-item {
  background: url(https://i.imgur.com/gfZhvUf.png);
  padding-left: 15px;
  background-repeat: no-repeat;
  background-position: left;
}

.artfight-nav .navbar-nav:first-child .nav-item:first-child + .nav-item + .nav-item {
  background-image: url(https://i.imgur.com/gfZhvUf.png) !important;
  padding-left: 15px;
  background-repeat: no-repeat;
  background-position: left;
}

/* BROWSE */

.artfight-nav .navbar-nav:first-child .nav-item:first-child + .nav-item + .nav-item + .nav-item {
  background: url(https://i.imgur.com/gfZhvUf.png);
  padding-left: 15px;
  background-repeat: no-repeat;
  background-position: left;
}

.artfight-nav .navbar-nav:first-child .nav-item:first-child + .nav-item + .nav-item + .nav-item + .nav-item {
  background: url(https://i.imgur.com/gfZhvUf.png);
  padding-left: 15px;
  background-repeat: no-repeat;
  background-position: left;
}

.container-fluid {
  max-width: 960px;
  width: 95%;
  background-image: url(https://i.imgur.com/vXo2Qdj.png);
  border-top: 2px #e7b668 solid;
  border-bottom: 2px #e7b668 solid;
  padding-left: 0px;
  padding-right: 0px;
}

.navbar-nav .nav-link {
  padding-right: 0;
  padding-left: 15px;
}

.bg-light {
  background-image: url(https://i.imgur.com/ocW4IQg.jpeg) !important;
  background-attachment: fixed;
}

.alert-success {
  color: #dce0d8;
  background-color: #927ddf;
  border-color: #e7b668;
  margin: 10px;
  font-style: italic;
  font-weight: 700;
}

.nav-tabs {
  background: #833f1f;
  color: #e7b668 !important;
  border: 2px #e7b668 solid;
  font-family: Verdana, sans-serif;
  font-weight: 800;
  border-radius: 0px;
}

.nav-link.active {
  background: #e7b668 !important;
  color: #5e3425 !important;
  font-style: italic;
  border: 2px solid;
  border-color: #e7b668 !important;
}

.card-body {
  color: #dec199;
  background: #6c4132;
  border-color: #e7b668;
  border-style: solid;
  border-width: 2px;
}

.card-header {
  background-image: url(https://i.imgur.com/ocW4IQg.jpeg);
  font-family: Verdana, sans-serif;
  font-weight: 800;
  text-transform: uppercase;
  background-attachment: fixed;
  letter-spacing: 1px;
}

.attack-thumb {
  border-style: solid !important;
  border-width: 2px !important;
  border-color: inherit !important;
}

.card-footer {
  background: #5e3425;
  border: 2px #e7b668 solid;
  font-style: italic;
  letter-spacing: 1px;
}

.col-12 {
  flex: 0 0 100%;
  max-width: 100%;
  max-width: 100%;
}

.far {
  font-family: 'Font Awesome 5 Pro';
  font-weight: 400;
  color: #31294f !important;
}

.footer div.contain {
  background-color: #432716 !important;
  border-top: 2px #e7b668 solid;
}

.donate-wormston {
  background: url(https://images.artfight.net/2025/2025_Fossils.png);
  max-height: 100px;
  padding: 50px;
background-repeat: no-repeat;
  background-size: cover;
}

.profile-stats {
  font-family: Verdana, sans-serif;
}

.profile-stats-title {
  text-transform: uppercase;
  letter-spacing: 2px;
  color: #dfab57;
  font-style: italic;
  font-weight: 900;
  margin-left: 20px;
}

.profile-characters-title {
  text-transform: uppercase;
  letter-spacing: 2px;
  color: #dfab57;
  font-style: italic;
  font-weight: 900;
  margin-left: 20px;
}

.profile-attacks-title {
  text-transform: uppercase;
  letter-spacing: 2px;
  color: #dfab57;
  font-style: italic;
  font-weight: 900;
  margin-left: 20px;
}

.profile-defenses-title {
  text-transform: uppercase;
  letter-spacing: 2px;
  color: #dfab57;
  font-style: italic;
  font-weight: 900;
  margin-left: 20px;
}

.progress {
  height: 1.3rem;
  line-height: 0;
  font-size: .9375rem;
  background-color: #3b1d15;
  border-radius: .25rem;
}

.progress-bar {
  color: #ecf0fd;
  background-color: #c8a258 !important;
}

.text-secondary {
  color: #833f1f !important;
}

.table-card td:last-child {
  border-right: 0;
  color: #3b1d15 !important;
  font-weight: 600;
}

.table-card td:first-child {
  border-left: 0;
  color: #e7b668 !important;
}

.col-md-6.profile-overall-stats-wrapper {
  margin-bottom: 20px;
}

.col-md-6.profile-current-stats-wrapper {
  margin-bottom: 20px;
}

.page-item.active .page-link {
  z-index: 3;
  color: #e7b668;
  background-color: #927ddf !important;
  border-color: rgb(255, 255, 255);
}

.page-link {
  position: relative;
  display: block;
  padding: .5rem .75rem;
  margin-left: -1px;
  line-height: 1.25;
  color: #e7b668;
  background-color: #432716;
  border: 1px solid rgba(0,0,0,.5);
}

.page-item.disabled .page-link {
  color: #e7b668;
  pointer-events: none;
  cursor: auto;
  background-color: #9285c3;
  border-color: rgb(255, 255, 255);
}"
pWSf28PE,Crystals,voskhodart,CSS,Tuesday 24th of June 2025 07:24:06 PM CDT,"/* Code & header art by Voskhod. Team icons belong to Art Fight. */

.artfight-nav {
  background-color: #3e0630 !important;
  font-family: Verdana, sans-serif;
  color: #e66488;
  border-bottom: 2px #fee6d7 solid;
}

.w-25 {
  background-image: url(https://images.artfight.net/2025/2025_Crystals.png) !important;
  background-size: contain;
  padding: 30px;
  max-height: 10px;
}

.banner {
  background-image: url(https://i.imgur.com/mAuaWzZ.png) !important;
  background-position: left !important;
  max-height: 150px;
  border-bottom: 2px #fee6d7  solid;
}


.nav-link {
  color: #fee6d7 !important;
  text-transform: uppercase;
  letter-spacing: 1px;
  font-weight: 600;
}


.nametag {
  border-radius: 0px !important;
}
.nav-item {
  border-radius: 0px;
}
.nav-link.active {
  border-radius: 0px;
}
.nav-item:hover {
}

.fas {
  color: #e7b668;
}

.badge {
  color: #ae37ac;
  background-color: #e7c1f9;
  font-size: 9px;
  font-style: italic;
  text-transform: lowercase;
  padding: 5px;
  border: 2px #7c0e60 solid;
}

.dropdown-menu {
  background: #ae4384;
  color: #f7bcd7 !important;
  border: 2px #fee6d7 solid;
}

.dropdown-item {
  color: #700f58 !important;
  text-transform: lowercase;
  font-weight: bold;
}

.dropdown-item:hover {
  background: #ffbeb3 !important;
  font-style: italic;
}

.dropdown-header {
  color: #f2c4ff;
  font-weight: 900;
  letter-spacing: 1px;
}

.dropdown-divider {
  height: 4px;
  margin: 5px;
  overflow: hidden;
  border-top: 1px solid #ff92d0 !important;
  border-bottom: 1px solid #ff89d6 !important;
}

#wrapper {
  background: #6f65bf;
  background-image: url(https://i.imgur.com/rl9FC8y.jpeg);
  background-attachment: fixed;
  background-size:cover;
  color: #b69fd8;
}

.mb-3 {
  margin-bottom: 0px !important;
}

#content {
  background-image: url(https://i.imgur.com/1bTNn2v.png);
  padding-top: 30px;
  background-repeat: no-repeat;
  background-position: top;
}

.profile-header-wrapper {
  background: #3e0630;
  padding: 20px;
  border-bottom: 2px #fee6d7 solid;
}

.bg-light {
  background-image: url(https://i.imgur.com/Tkpgabo.png);
  background-attachment: fixed;
}

.panel-heading {
  border: 2px #fee6d7 solid !important;
  font-family: Verdana, sans-serif;
  border-radius: 0px !important;
}

.card {
  background: #751d5f;
  border: 0px;
  color: #e368e7;
  border-radius: 0px;
}

td {
  background: #fee6d7;
}

a {
  color: #f2607f !important;
  font-weight: 800;
  text-decoration: none;
}

.btn:hover {
  color: #e7b668;
  text-decoration: none;
  background: #debfa5 !important;
}

.element-disabled {
  opacity: .55;
  color: #fee6d7 !important;
}

.btn {
  background: #cc6cb7;
  border: 1px #e8d9e4 solid;
  color: #703361 !important;
  border-radius: 0px;
}


#navbar ul.navbar-nav.mr-auto li a i {
  display: none;
}

.artfight-nav .navbar-nav:first-child .nav-item:first-child {
  background: url(https://i.imgur.com/rnkw0xN.png);
  padding-left: 15px;
  background-repeat: no-repeat;
  background-position: left;
}

.artfight-nav .navbar-nav:first-child .nav-item:first-child + .nav-item {
  background: url(https://i.imgur.com/XWvOq4N.png);
  padding-left: 15px;
  background-repeat: no-repeat;
  background-position: left;
}

.artfight-nav .navbar-nav:first-child .nav-item:first-child + .nav-item + .nav-item {
  background-image: url(https://i.imgur.com/eDWx3jA.png) !important;
  padding-left: 15px;
  background-repeat: no-repeat;
  background-position: left;
}

/* BROWSE */

.artfight-nav .navbar-nav:first-child .nav-item:first-child + .nav-item + .nav-item + .nav-item {
  background: url(https://i.imgur.com/KgFGIi2.png);
  padding-left: 15px;
  background-repeat: no-repeat;
  background-position: left;
}

.artfight-nav .navbar-nav:first-child .nav-item:first-child + .nav-item + .nav-item + .nav-item + .nav-item {
  background: url(https://i.imgur.com/9QwMwAd.png);
  padding-left: 15px;
  background-repeat: no-repeat;
  background-position: left;
}

.container-fluid {
  max-width: 960px;
  width: 95%;
  background-image: url(https://i.imgur.com/PtXCEC5.png);
  border-top: 2px #fee6d7 solid;
  border-bottom: 2px #fee6d7 solid;
  padding-left: 0px;
  padding-right: 0px;
}

.navbar-nav .nav-link {
  padding-right: 0;
  padding-left: 15px;
}

.bg-light {
  background-image: url(https://i.imgur.com/Tkpgabo.pngg) !important;
  background-attachment: fixed;
}

.alert-success {
  color: #dce0d8;
  background-color: #927ddf;
  border-color: #e7b668;
  margin: 10px;
  font-style: italic;
  font-weight: 700;
}

.nav-tabs {
  background: #3e0630;
  color: #fee6d7 !important;
  border: 2px #fee6d7 solid;
  font-family: Verdana, sans-serif;
  font-weight: 800;
  border-radius: 0px;
}

.nav-link.active {
  background: #fee6d7 !important;
  color: #3e0630 !important;
  font-style: italic;
  border: 2px solid;
  border-color: #fee6d7 !important;
}

.card-body {
  color: #5c1d55;
  background: #f2bfbf;
  border-color: #fee6d7;
  border-style: solid;
  border-width: 2px;
}

.card-header {
  background-image: url(https://i.imgur.com/fH1CxjW.png);
  font-family: Verdana, sans-serif;
  font-weight: 800;
  text-transform: uppercase;
  background-attachment: fixed;
  letter-spacing: 1px;
}

.attack-thumb {
  border-style: solid !important;
  border-width: 2px !important;
  border-color: inherit !important;
}

.card-footer {
  background: #642246;
  border: 2px #fee6d7 solid;
  font-style: italic;
  letter-spacing: 1px;
}

.col-12 {
  flex: 0 0 100%;
  max-width: 100%;
  max-width: 100%;
}

.far {
  font-family: 'Font Awesome 5 Pro';
  font-weight: 400;
  color: #31294f !important;
}

.footer div.contain {
  background-color: #3f0531 !important;
  border-top: 2px #fee6d7 solid;
}

.donate-wormston {
  background: url(https://images.artfight.net/2025/2025_Crystals.png);
  max-height: 100px;
  padding: 50px;
background-repeat: no-repeat;
  background-size: cover;
}

.profile-stats {
  font-family: Verdana, sans-serif;
}

.profile-stats-title {
  text-transform: uppercase;
  letter-spacing: 2px;
  color: #dfab57;
  font-style: italic;
  font-weight: 900;
  margin-left: 20px;
}

.profile-characters-title {
  text-transform: uppercase;
  letter-spacing: 2px;
  color: #dfab57;
  font-style: italic;
  font-weight: 900;
  margin-left: 20px;
}

.profile-attacks-title {
  text-transform: uppercase;
  letter-spacing: 2px;
  color: #dfab57;
  font-style: italic;
  font-weight: 900;
  margin-left: 20px;
}

.profile-defenses-title {
  text-transform: uppercase;
  letter-spacing: 2px;
  color: #dfab57;
  font-style: italic;
  font-weight: 900;
  margin-left: 20px;
}

.progress {
  height: 1.3rem;
  line-height: 0;
  font-size: .9375rem;
  background-color: #3b1d15;
  border-radius: .25rem;
}

.progress-bar {
  color: #ecf0fd;
  background-color: #c8a258 !important;
}

.text-secondary {
  color: #833f1f !important;
}

.table-card td:last-child {
  border-right: 0;
  color: #3b1d15 !important;
  font-weight: 600;
}

.table-card td:first-child {
  border-left: 0;
  color: #fee6d7 !important;
}

.col-md-6.profile-overall-stats-wrapper {
  margin-bottom: 20px;
}

.col-md-6.profile-current-stats-wrapper {
  margin-bottom: 20px;
}

.page-item.active .page-link {
  z-index: 3;
  color: #e7b668;
  background-color: #927ddf !important;
  border-color: rgb(255, 255, 255);
}

.page-link {
  position: relative;
  display: block;
  padding: .5rem .75rem;
  margin-left: -1px;
  line-height: 1.25;
  color: #e7b668;
  background-color: #410730;
  border: 1px solid rgba(0,0,0,.5);
}

.page-item.disabled .page-link {
  color: #e7b668;
  pointer-events: none;
  cursor: auto;
  background-color: #9285c3;
  border-color: rgb(255, 255, 255);
}"
WHNN8q05,2025-06-24_stats.json,rdp_snitch,JSON,Tuesday 24th of June 2025 07:18:24 PM CDT,"{
  ""ip"": {
    ""24.173.30.170"": 27501,
    ""14.225.202.191"": 11772,
    ""103.67.163.9"": 3,
    ""167.94.146.50"": 3,
    ""88.214.25.123"": 6,
    ""88.214.25.121"": 6,
    ""205.210.31.224"": 9,
    ""185.218.137.161"": 3,
    ""211.145.67.138"": 9,
    ""68.183.179.179"": 3,
    ""92.63.197.23"": 33,
    ""148.72.141.37"": 6,
    ""147.185.132.61"": 9,
    ""81.29.134.51"": 3,
    ""86.54.31.32"": 3,
    ""111.170.152.113"": 9,
    ""45.227.253.52"": 9,
    ""198.235.24.116"": 9,
    ""68.183.165.74"": 3,
    ""173.230.130.125"": 12,
    ""162.210.245.77"": 12,
    ""198.235.24.73"": 9,
    ""88.214.25.125"": 6
  },
  ""asn"": {
    ""AS11427"": 27501,
    ""AS135905"": 11772,
    ""AS150895"": 3,
    ""AS398705"": 3,
    ""AS35042"": 18,
    ""AS396982"": 36,
    ""AS216127"": 3,
    ""AS4808"": 9,
    ""AS14061"": 6,
    ""AS210848"": 33,
    ""AS30083"": 6,
    ""AS12555"": 3,
    ""AS174"": 3,
    ""AS151185"": 9,
    ""AS209272"": 9,
    ""AS63949"": 12,
    ""AS397651"": 12
  },
  ""isp"": {
    ""Charter Communications Inc"": 27501,
    ""Vietnam Posts and Telecommunications Group"": 11772,
    ""MINHTHOIPC"": 3,
    ""Censys, Inc."": 3,
    ""NOC EMAIL: noc@one-host.net"": 18,
    ""Google LLC"": 36,
    ""International Hosting Company Limited"": 3,
    ""China Unicom Beijing Province Network"": 9,
    ""DigitalOcean, LLC"": 6,
    ""Telkom Internet LTD"": 33,
    ""velia.net"": 6,
    ""Data-center IMAQLIQ Ltd."": 3,
    ""MISTRAL"": 3,
    ""China Telecom"": 9,
    ""Flyservers S.A"": 9,
    ""Akamai Technologies, Inc."": 12,
    ""RCI Broadband"": 12
  },
  ""org"": {
    ""Spectrum"": 27501,
    ""VNPT"": 11772,
    ""Thoi MMO Company Limited"": 3,
    ""Censys, Inc."": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 18,
    ""Palo Alto Networks, Inc"": 36,
    ""nuxt.cloud hosting provider"": 3,
    ""Unicom"": 9,
    ""DigitalOcean, LLC"": 6,
    ""Korotkij Denis Aleksandrovich"": 33,
    ""velia.net"": 6,
    ""DC Imaqliq"": 3,
    ""ADSL: Global Gold Networks Ltd"": 3,
    ""Chinanet HB"": 9,
    ""Nextcloud S.A"": 9,
    ""Linode"": 12,
    ""10x Servers"": 12
  },
  ""regionName"": {
    ""Texas"": 27501,
    ""Hanoi"": 11772,
    ""B\u00ecnh \u0110\u1ecbnh Province"": 3,
    ""Hesse"": 6,
    ""Kowloon City"": 18,
    ""California"": 39,
    ""Beijing"": 9,
    ""South West"": 3,
    ""North Holland"": 33,
    ""Missouri"": 6,
    ""Moscow"": 3,
    ""England"": 3,
    ""Hubei"": 9,
    ""La Paz Department"": 9,
    ""Georgia"": 12,
    ""Virginia"": 12
  },
  ""country"": {
    ""United States"": 27570,
    ""Vietnam"": 11775,
    ""Germany"": 6,
    ""Hong Kong"": 18,
    ""China"": 18,
    ""Singapore"": 3,
    ""The Netherlands"": 33,
    ""Russia"": 3,
    ""United Kingdom"": 3,
    ""Bolivia"": 9
  },
  ""account"": {
    ""hello"": 39306,
    ""(empty)"": 6,
    ""Test"": 30,
    ""ADMDQgpav"": 3,
    ""dYePfB"": 3,
    ""sNVnSf"": 3,
    ""Administr"": 42,
    ""JQISQptLg"": 3,
    ""AbRWeC"": 3,
    ""eHtSaV"": 3,
    ""root"": 3,
    ""QSfenMqar"": 3,
    ""dezifC"": 3,
    ""FLMDDV"": 3,
    ""beio"": 3,
    ""mqagscxl"": 12,
    ""yUqqxNrWT"": 3,
    ""qvfbGK"": 3,
    ""NwkLjQ"": 3
  },
  ""keyboard"": {
    ""Unknown"": 39438
  },
  ""client_build"": {
    ""Unknown"": 39438
  },
  ""client_name"": {
    ""Unknown"": 39438
  },
  ""ip_type"": {
    ""Unknown"": 39363,
    ""hosting"": 63,
    ""proxy"": 12
  }
}"
CM4GDDUG,2025-06-24_stats.json,rdp_snitch,JSON,Tuesday 24th of June 2025 07:16:10 PM CDT,"{
  ""ip"": {
    ""24.173.30.170"": 18334,
    ""14.225.202.191"": 7848,
    ""103.67.163.9"": 2,
    ""167.94.146.50"": 2,
    ""88.214.25.123"": 4,
    ""88.214.25.121"": 4,
    ""205.210.31.224"": 6,
    ""185.218.137.161"": 2,
    ""211.145.67.138"": 6,
    ""68.183.179.179"": 2,
    ""92.63.197.23"": 22,
    ""148.72.141.37"": 4,
    ""147.185.132.61"": 6,
    ""81.29.134.51"": 2,
    ""86.54.31.32"": 2,
    ""111.170.152.113"": 6,
    ""45.227.253.52"": 6,
    ""198.235.24.116"": 6,
    ""68.183.165.74"": 2,
    ""173.230.130.125"": 8,
    ""162.210.245.77"": 8,
    ""198.235.24.73"": 6,
    ""88.214.25.125"": 4
  },
  ""asn"": {
    ""AS11427"": 18334,
    ""AS135905"": 7848,
    ""AS150895"": 2,
    ""AS398705"": 2,
    ""AS35042"": 12,
    ""AS396982"": 24,
    ""AS216127"": 2,
    ""AS4808"": 6,
    ""AS14061"": 4,
    ""AS210848"": 22,
    ""AS30083"": 4,
    ""AS12555"": 2,
    ""AS174"": 2,
    ""AS151185"": 6,
    ""AS209272"": 6,
    ""AS63949"": 8,
    ""AS397651"": 8
  },
  ""isp"": {
    ""Charter Communications Inc"": 18334,
    ""Vietnam Posts and Telecommunications Group"": 7848,
    ""MINHTHOIPC"": 2,
    ""Censys, Inc."": 2,
    ""NOC EMAIL: noc@one-host.net"": 12,
    ""Google LLC"": 24,
    ""International Hosting Company Limited"": 2,
    ""China Unicom Beijing Province Network"": 6,
    ""DigitalOcean, LLC"": 4,
    ""Telkom Internet LTD"": 22,
    ""velia.net"": 4,
    ""Data-center IMAQLIQ Ltd."": 2,
    ""MISTRAL"": 2,
    ""China Telecom"": 6,
    ""Flyservers S.A"": 6,
    ""Akamai Technologies, Inc."": 8,
    ""RCI Broadband"": 8
  },
  ""org"": {
    ""Spectrum"": 18334,
    ""VNPT"": 7848,
    ""Thoi MMO Company Limited"": 2,
    ""Censys, Inc."": 2,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""Palo Alto Networks, Inc"": 24,
    ""nuxt.cloud hosting provider"": 2,
    ""Unicom"": 6,
    ""DigitalOcean, LLC"": 4,
    ""Korotkij Denis Aleksandrovich"": 22,
    ""velia.net"": 4,
    ""DC Imaqliq"": 2,
    ""ADSL: Global Gold Networks Ltd"": 2,
    ""Chinanet HB"": 6,
    ""Nextcloud S.A"": 6,
    ""Linode"": 8,
    ""10x Servers"": 8
  },
  ""regionName"": {
    ""Texas"": 18334,
    ""Hanoi"": 7848,
    ""B\u00ecnh \u0110\u1ecbnh Province"": 2,
    ""Hesse"": 4,
    ""Kowloon City"": 12,
    ""California"": 26,
    ""Beijing"": 6,
    ""South West"": 2,
    ""North Holland"": 22,
    ""Missouri"": 4,
    ""Moscow"": 2,
    ""England"": 2,
    ""Hubei"": 6,
    ""La Paz Department"": 6,
    ""Georgia"": 8,
    ""Virginia"": 8
  },
  ""country"": {
    ""United States"": 18380,
    ""Vietnam"": 7850,
    ""Germany"": 4,
    ""Hong Kong"": 12,
    ""China"": 12,
    ""Singapore"": 2,
    ""The Netherlands"": 22,
    ""Russia"": 2,
    ""United Kingdom"": 2,
    ""Bolivia"": 6
  },
  ""account"": {
    ""hello"": 26204,
    ""(empty)"": 4,
    ""Test"": 20,
    ""ADMDQgpav"": 2,
    ""dYePfB"": 2,
    ""sNVnSf"": 2,
    ""Administr"": 28,
    ""JQISQptLg"": 2,
    ""AbRWeC"": 2,
    ""eHtSaV"": 2,
    ""root"": 2,
    ""QSfenMqar"": 2,
    ""dezifC"": 2,
    ""FLMDDV"": 2,
    ""beio"": 2,
    ""mqagscxl"": 8,
    ""yUqqxNrWT"": 2,
    ""qvfbGK"": 2,
    ""NwkLjQ"": 2
  },
  ""keyboard"": {
    ""Unknown"": 26292
  },
  ""client_build"": {
    ""Unknown"": 26292
  },
  ""client_name"": {
    ""Unknown"": 26292
  },
  ""ip_type"": {
    ""Unknown"": 26242,
    ""hosting"": 42,
    ""proxy"": 8
  }
}"
p1d9pRmx,2025-06-24_stats.json,rdp_snitch,JSON,Tuesday 24th of June 2025 07:15:12 PM CDT,"{
  ""ip"": {
    ""24.173.30.170"": 9167,
    ""14.225.202.191"": 3924,
    ""103.67.163.9"": 1,
    ""167.94.146.50"": 1,
    ""88.214.25.123"": 2,
    ""88.214.25.121"": 2,
    ""205.210.31.224"": 3,
    ""185.218.137.161"": 1,
    ""211.145.67.138"": 3,
    ""68.183.179.179"": 1,
    ""92.63.197.23"": 11,
    ""148.72.141.37"": 2,
    ""147.185.132.61"": 3,
    ""81.29.134.51"": 1,
    ""86.54.31.32"": 1,
    ""111.170.152.113"": 3,
    ""45.227.253.52"": 3,
    ""198.235.24.116"": 3,
    ""68.183.165.74"": 1,
    ""173.230.130.125"": 4,
    ""162.210.245.77"": 4,
    ""198.235.24.73"": 3,
    ""88.214.25.125"": 2
  },
  ""asn"": {
    ""AS11427"": 9167,
    ""AS135905"": 3924,
    ""AS150895"": 1,
    ""AS398705"": 1,
    ""AS35042"": 6,
    ""AS396982"": 12,
    ""AS216127"": 1,
    ""AS4808"": 3,
    ""AS14061"": 2,
    ""AS210848"": 11,
    ""AS30083"": 2,
    ""AS12555"": 1,
    ""AS174"": 1,
    ""AS151185"": 3,
    ""AS209272"": 3,
    ""AS63949"": 4,
    ""AS397651"": 4
  },
  ""isp"": {
    ""Charter Communications Inc"": 9167,
    ""Vietnam Posts and Telecommunications Group"": 3924,
    ""MINHTHOIPC"": 1,
    ""Censys, Inc."": 1,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Google LLC"": 12,
    ""International Hosting Company Limited"": 1,
    ""China Unicom Beijing Province Network"": 3,
    ""DigitalOcean, LLC"": 2,
    ""Telkom Internet LTD"": 11,
    ""velia.net"": 2,
    ""Data-center IMAQLIQ Ltd."": 1,
    ""MISTRAL"": 1,
    ""China Telecom"": 3,
    ""Flyservers S.A"": 3,
    ""Akamai Technologies, Inc."": 4,
    ""RCI Broadband"": 4
  },
  ""org"": {
    ""Spectrum"": 9167,
    ""VNPT"": 3924,
    ""Thoi MMO Company Limited"": 1,
    ""Censys, Inc."": 1,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""Palo Alto Networks, Inc"": 12,
    ""nuxt.cloud hosting provider"": 1,
    ""Unicom"": 3,
    ""DigitalOcean, LLC"": 2,
    ""Korotkij Denis Aleksandrovich"": 11,
    ""velia.net"": 2,
    ""DC Imaqliq"": 1,
    ""ADSL: Global Gold Networks Ltd"": 1,
    ""Chinanet HB"": 3,
    ""Nextcloud S.A"": 3,
    ""Linode"": 4,
    ""10x Servers"": 4
  },
  ""regionName"": {
    ""Texas"": 9167,
    ""Hanoi"": 3924,
    ""B\u00ecnh \u0110\u1ecbnh Province"": 1,
    ""Hesse"": 2,
    ""Kowloon City"": 6,
    ""California"": 13,
    ""Beijing"": 3,
    ""South West"": 1,
    ""North Holland"": 11,
    ""Missouri"": 2,
    ""Moscow"": 1,
    ""England"": 1,
    ""Hubei"": 3,
    ""La Paz Department"": 3,
    ""Georgia"": 4,
    ""Virginia"": 4
  },
  ""country"": {
    ""United States"": 9190,
    ""Vietnam"": 3925,
    ""Germany"": 2,
    ""Hong Kong"": 6,
    ""China"": 6,
    ""Singapore"": 1,
    ""The Netherlands"": 11,
    ""Russia"": 1,
    ""United Kingdom"": 1,
    ""Bolivia"": 3
  },
  ""account"": {
    ""hello"": 13102,
    ""(empty)"": 2,
    ""Test"": 10,
    ""ADMDQgpav"": 1,
    ""dYePfB"": 1,
    ""sNVnSf"": 1,
    ""Administr"": 14,
    ""JQISQptLg"": 1,
    ""AbRWeC"": 1,
    ""eHtSaV"": 1,
    ""root"": 1,
    ""QSfenMqar"": 1,
    ""dezifC"": 1,
    ""FLMDDV"": 1,
    ""beio"": 1,
    ""mqagscxl"": 4,
    ""yUqqxNrWT"": 1,
    ""qvfbGK"": 1,
    ""NwkLjQ"": 1
  },
  ""keyboard"": {
    ""Unknown"": 13146
  },
  ""client_build"": {
    ""Unknown"": 13146
  },
  ""client_name"": {
    ""Unknown"": 13146
  },
  ""ip_type"": {
    ""Unknown"": 13121,
    ""hosting"": 21,
    ""proxy"": 4
  }
}"
Ac4kydfZ,sunshine.log,Nadonate,Bash,Tuesday 24th of June 2025 05:06:55 PM CDT,"[2025-06-24 17:59:18.457]: Info: Sunshine version: v2025.531.135549
[2025-06-24 17:59:18.457]: Info: Package Publisher: LizardByte
[2025-06-24 17:59:18.457]: Info: Publisher Website: https://app.lizardbyte.dev
[2025-06-24 17:59:18.457]: Info: Get support: https://app.lizardbyte.dev/support
[2025-06-24 17:59:18.457]: Info: config: 'stream_audio' = true
[2025-06-24 17:59:18.459]: Warning: Failed to create system tray
[2025-06-24 17:59:18.466]: Error: Couldn't load cuda: -1
[2025-06-24 17:59:18.466]: Info: /dev/dri/card1 -> amdgpu
[2025-06-24 17:59:18.467]: Info: /dev/dri/card0 -> amdgpu
[2025-06-24 17:59:18.470]: Error: Environment variable WAYLAND_DISPLAY has not been defined
[2025-06-24 17:59:18.470]: Error: Unable to initialize capture method
[2025-06-24 17:59:18.470]: Error: Platform failed to initialize
[2025-06-24 17:59:18.555]: Info: // Testing for available encoders, this may generate errors. You can safely ignore those errors. //
[2025-06-24 17:59:18.555]: Info: Trying encoder [nvenc]
[2025-06-24 17:59:18.956]: Info: Encoder [nvenc] failed
[2025-06-24 17:59:18.956]: Info: Trying encoder [vaapi]
[2025-06-24 17:59:19.356]: Info: Encoder [vaapi] failed
[2025-06-24 17:59:19.356]: Info: Trying encoder [software]
[2025-06-24 17:59:19.756]: Info: Encoder [software] failed
[2025-06-24 17:59:19.756]: Fatal: Unable to find display or encoder during startup.
[2025-06-24 17:59:19.756]: Fatal: Please check that a display is connected and powered on.
[2025-06-24 17:59:19.756]: Error: Video failed to find working encoder
[2025-06-24 17:59:19.758]: Info: Adding avahi service bazzite-box
[2025-06-24 17:59:19.758]: Info: Configuration UI available at [https://localhost:47990]
[2025-06-24 17:59:20.652]: Info: Avahi service bazzite-box successfully established.
[2025-06-24 17:59:30.628]: Info: // Testing for available encoders, this may generate errors. You can safely ignore those errors. //
[2025-06-24 17:59:30.628]: Info: Trying encoder [nvenc]
[2025-06-24 17:59:31.028]: Info: Encoder [nvenc] failed
[2025-06-24 17:59:31.028]: Info: Trying encoder [vaapi]
[2025-06-24 17:59:31.429]: Info: Encoder [vaapi] failed
[2025-06-24 17:59:31.429]: Info: Trying encoder [software]
[2025-06-24 17:59:31.829]: Info: Encoder [software] failed
[2025-06-24 17:59:31.829]: Fatal: Unable to find display or encoder during startup.
[2025-06-24 17:59:31.829]: Fatal: Please check that a display is connected and powered on.
[2025-06-24 17:59:53.284]: Info: // Testing for available encoders, this may generate errors. You can safely ignore those errors. //
[2025-06-24 17:59:53.284]: Info: Trying encoder [nvenc]
[2025-06-24 17:59:53.684]: Info: Encoder [nvenc] failed
[2025-06-24 17:59:53.685]: Info: Trying encoder [vaapi]
[2025-06-24 17:59:54.085]: Info: Encoder [vaapi] failed
[2025-06-24 17:59:54.085]: Info: Trying encoder [software]
[2025-06-24 17:59:54.485]: Info: Encoder [software] failed
[2025-06-24 17:59:54.485]: Fatal: Unable to find display or encoder during startup.
[2025-06-24 17:59:54.485]: Fatal: Please check that a display is connected and powered on.
"
tw3kVrtP,Untitled,sshtshtshtshts,Lua,Tuesday 24th of June 2025 04:46:53 PM CDT,"-- ComputerCraft Spy Base Installer
-- Run this with: pastebin run <code>

print(""=== SUPER SECRET SPY INSTALLATION ==="")
print(""Setting up covert surveillance..."")
print()

-- Get friend's name
print(""Which friend's base are we spying on?"")
print(""Examples: owlus, steve, alex, etc."")
write(""Friend's name: "")
local friendName = read()

if friendName == """" then
    print(""ERROR: Need a friend name for the spy operation!"")
    return
end

print()
print(""Scanning for inventory to monitor..."")

-- Get all connected peripherals
local allPeripherals = peripheral.getNames()
local inventoryPeripherals = {}

print(""DEBUG: Found "" .. #allPeripherals .. "" peripheral(s):"")

-- Standard inventory types to look for
local inventoryTypes = {
    ""inventory"",
    ""minecraft:chest"",
    ""minecraft:barrel"", 
    ""minecraft:shulker_box"",
    ""minecraft:hopper"",
    ""minecraft:furnace"",
    ""minecraft:blast_furnace"",
    ""minecraft:smoker""
}

-- Check each peripheral
for _, name in pairs(allPeripherals) do
    local types = {peripheral.getType(name)}
    local typeStr = table.concat(types, "", "")
    print(""  "" .. name .. "": "" .. typeStr)
    
    local isInventory = false
    local confidence = 0
    local reason = """"
    
    -- Check if it has known inventory types
    for _, invType in pairs(inventoryTypes) do
        if peripheral.hasType(name, invType) then
            isInventory = true
            confidence = confidence + 50
            reason = reason .. invType .. "" type; ""
            break
        end
    end
    
    -- Check for inventory-like methods
    local methods = peripheral.getMethods(name)
    local inventoryMethods = {
        ""list"", ""size"", ""getItemDetail"", ""pushItems"", ""pullItems"",
        ""getItems"", ""getAllItems"", ""getStackInSlot"", ""getItem""
    }
    
    local foundMethods = {}
    for _, method in pairs(methods) do
        for _, invMethod in pairs(inventoryMethods) do
            if method == invMethod then
                table.insert(foundMethods, method)
                confidence = confidence + 10
                isInventory = true
            end
        end
    end
    
    if #foundMethods > 0 then
        reason = reason .. ""methods: "" .. table.concat(foundMethods, "", "")
    end
    
    if isInventory then
        table.insert(inventoryPeripherals, {
            name = name,
            types = types,
            confidence = confidence,
            reason = reason,
            methods = foundMethods
        })
        print(""    -> INVENTORY DETECTED (confidence: "" .. confidence .. ""%) - "" .. reason)
    end
end

-- Use peripheral.find to also search for standard inventory types
print()
print(""Using peripheral.find for additional detection..."")
for _, invType in pairs(inventoryTypes) do
    local found = {peripheral.find(invType)}
    for _, wrapped in pairs(found) do
        local name = peripheral.getName(wrapped)
        local alreadyFound = false
        
        for _, existing in pairs(inventoryPeripherals) do
            if existing.name == name then
                alreadyFound = true
                existing.confidence = existing.confidence + 25
                existing.reason = existing.reason .. ""peripheral.find("" .. invType .. ""); ""
                break
            end
        end
        
        if not alreadyFound then
            table.insert(inventoryPeripherals, {
                name = name,
                types = {peripheral.getType(name)},
                confidence = 75,
                reason = ""peripheral.find("" .. invType .. "")"",
                methods = peripheral.getMethods(name)
            })
            print(""  Found additional "" .. invType .. "" at "" .. name)
        end
    end
end

-- Sort by confidence and select best option
table.sort(inventoryPeripherals, function(a, b) return a.confidence > b.confidence end)

local inventorySide = nil
if #inventoryPeripherals > 0 then
    print()
    print(""Inventory peripherals found (sorted by confidence):"")
    for i, inv in pairs(inventoryPeripherals) do
        print(""  "" .. i .. "". "" .. inv.name .. "" ("" .. inv.confidence .. ""%) - "" .. inv.reason)
    end
    
    -- Auto-select the highest confidence one
    inventorySide = inventoryPeripherals[1].name
    print()
    print(""Auto-selected: "" .. inventorySide .. "" (confidence: "" .. inventoryPeripherals[1].confidence .. ""%)"")
    
    -- Give user option to override
    if #inventoryPeripherals > 1 then
        print(""Use this inventory? Or enter number to choose different one:"")
        print(""Press Enter for auto-selection, or type 1-"" .. #inventoryPeripherals .. "" to choose:"")
        write(""> "")
        local choice = read()
        
        if choice ~= """" then
            local choiceNum = tonumber(choice)
            if choiceNum and choiceNum >= 1 and choiceNum <= #inventoryPeripherals then
                inventorySide = inventoryPeripherals[choiceNum].name
                print(""Selected: "" .. inventorySide)
            else
                print(""Invalid choice, using auto-selection: "" .. inventorySide)
            end
        end
    end
else
    print()
    print(""ERROR: No inventory peripherals found!"")
    print(""Available peripherals:"")
    for _, name in pairs(allPeripherals) do
        local types = {peripheral.getType(name)}
        print(""  "" .. name .. "": "" .. table.concat(types, "", ""))
    end
    print()
    print(""Manual override - which peripheral should I monitor?"")
    print(""Enter peripheral name (or press Enter to quit):"")
    write(""> "")
    local manualChoice = read()
    
    if manualChoice ~= """" and peripheral.isPresent(manualChoice) then
        inventorySide = manualChoice
        print(""Forcing monitor of: "" .. inventorySide)
    else
        print(""No valid peripheral selected. Exiting."")
        return
    end
end

print(""Will monitor inventory on: "" .. inventorySide)
print()

-- Check for disk drives for local logging
print()
print(""Scanning for disk drives for local logging..."")
local diskSide = nil
local diskPath = nil

-- Find disk drives using peripheral.find
local diskDrives = {peripheral.find(""drive"")}
if #diskDrives > 0 then
    for _, drive in pairs(diskDrives) do
        local driveName = peripheral.getName(drive)
        print(""Found disk drive: "" .. driveName)
        
        if disk.isPresent(driveName) then
            if disk.hasData(driveName) then
                diskSide = driveName
                diskPath = disk.getMountPath(driveName)
                print(""  Disk mounted at: "" .. diskPath)
                break
            else
                print(""  Disk present but no data (music disk?)"")
            end
        else
            print(""  Drive empty - insert a floppy disk for local logging"")
        end
    end
else
    -- Fallback: check all peripherals for drive type
    for _, name in pairs(allPeripherals) do
        if peripheral.hasType(name, ""drive"") then
            print(""Found disk drive: "" .. name)
            if disk.isPresent(name) then
                if disk.hasData(name) then
                    diskSide = name
                    diskPath = disk.getMountPath(name)
                    print(""  Disk mounted at: "" .. diskPath)
                    break
                else
                    print(""  Disk present but no data (music disk?)"")
                end
            else
                print(""  Drive empty - insert a floppy disk for local logging"")
            end
        end
    end
end

if diskSide then
    print(""Local logging will be saved to disk: "" .. diskPath)
    
    -- Set up disk label for our spy operation
    local currentLabel = disk.getLabel(diskSide)
    if not currentLabel or currentLabel == """" then
        disk.setLabel(diskSide, ""System_Logs"")
        print(""Labeled disk as: System_Logs"")
    end
else
    print(""No disk found - logs will only be sent to server"")
end

print()

-- Create the spy program
local spyProgram = [[-- Inventory Spy for ]] .. friendName .. [['s base
-- Auto-generated covert surveillance program

local API_URL = ""https://spy.astr.to/]] .. friendName .. [[/items""
local UPDATE_INTERVAL = 60 -- seconds
local INVENTORY_SIDE = ""]] .. inventorySide .. [[""
local DISK_SIDE = ]] .. (diskSide and '""' .. diskSide .. '""' or ""nil"") .. [[

local DISK_PATH = ]] .. (diskPath and '""' .. diskPath .. '""' or ""nil"") .. [[

local MAX_LOG_FILES = 10
local MAX_LOG_SIZE = 5000 -- lines

-- Initialize logging
local function initializeLogging()
    if DISK_PATH then
        -- Create log directory structure
        if not fs.exists(DISK_PATH .. ""/spy_logs"") then
            fs.makeDir(DISK_PATH .. ""/spy_logs"")
        end
        if not fs.exists(DISK_PATH .. ""/spy_logs/data"") then
            fs.makeDir(DISK_PATH .. ""/spy_logs/data"")
        end
        
        -- Create config file if it doesn't exist
        local configPath = DISK_PATH .. ""/spy_logs/config.txt""
        if not fs.exists(configPath) then
            local config = fs.open(configPath, ""w"")
            config.writeLine(""Spy Operation Configuration"")
            config.writeLine(""Target: ]] .. friendName .. [["")
            config.writeLine(""Computer ID: "" .. os.getComputerID())
            config.writeLine(""Inventory Side: "" .. INVENTORY_SIDE)
            config.writeLine(""Started: "" .. os.date(""%Y-%m-%d %H:%M:%S""))
            config.close()
        end
    end
end

-- Rotate log files if they get too big
local function rotateLogFiles()
    if not DISK_PATH then return end
    
    local logPath = DISK_PATH .. ""/spy_logs/spy.log""
    if fs.exists(logPath) then
        local file = fs.open(logPath, ""r"")
        local lines = 0
        if file then
            while file.readLine() do
                lines = lines + 1
            end
            file.close()
        end
        
        if lines > MAX_LOG_SIZE then
            -- Move current log to backup
            local timestamp = os.date(""%Y%m%d_%H%M%S"")
            local backupPath = DISK_PATH .. ""/spy_logs/spy_"" .. timestamp .. "".log""
            fs.move(logPath, backupPath)
            
            -- Clean up old log files
            local logDir = DISK_PATH .. ""/spy_logs""
            local files = fs.list(logDir)
            local logFiles = {}
            for _, file in pairs(files) do
                if string.find(file, ""spy_"") and string.find(file, "".log"") then
                    table.insert(logFiles, file)
                end
            end
            
            -- Sort and keep only recent files
            table.sort(logFiles)
            while #logFiles > MAX_LOG_FILES do
                fs.delete(logDir .. ""/"" .. logFiles[1])
                table.remove(logFiles, 1)
            end
        end
    end
end

-- Write to local log file
local function writeToLocalLog(message, data)
    if not DISK_PATH then return end
    
    rotateLogFiles()
    
    local logPath = DISK_PATH .. ""/spy_logs/spy.log""
    local file = fs.open(logPath, ""a"")
    if file then
        local timestamp = os.date(""%Y-%m-%d %H:%M:%S"")
        file.writeLine(""["" .. timestamp .. ""] "" .. message)
        if data then
            file.writeLine(""DATA: "" .. textutils.serializeJSON(data))
        end
        file.close()
    end
    
    -- Also save raw data
    if data then
        local dataPath = DISK_PATH .. ""/spy_logs/data/data_"" .. os.epoch(""utc"") .. "".json""
        local dataFile = fs.open(dataPath, ""w"")
        if dataFile then
            dataFile.write(textutils.serializeJSON(data))
            dataFile.close()
        end
    end
end

-- Enhanced logging function
local function log(message, data, level)
    level = level or ""INFO""
    local timestamp = os.date(""%Y-%m-%d %H:%M:%S"")
    local logMessage = ""["" .. level .. ""] "" .. message
    
    -- Console output
    print(""["" .. timestamp .. ""] "" .. logMessage)
    
    -- Local disk logging
    writeToLocalLog(logMessage, data)
end

-- Get disk space info
local function getDiskInfo()
    if not DISK_PATH then return ""No disk"" end
    
    local freeSpace = fs.getFreeSpace(DISK_PATH)
    local used = ""unknown""
    if freeSpace then
        if freeSpace < 1024 then
            return freeSpace .. ""B free""
        elseif freeSpace < 1024 * 1024 then
            return math.floor(freeSpace / 1024) .. ""KB free""
        else
            return math.floor(freeSpace / (1024 * 1024)) .. ""MB free""
        end
    end
    return ""Disk info unavailable""
end

-- Function to get inventory data
local function getInventoryData()
    if not peripheral.isPresent(INVENTORY_SIDE) then
        return nil, ""No peripheral found: "" .. INVENTORY_SIDE
    end
    
    local inventory = peripheral.wrap(INVENTORY_SIDE)
    if not inventory then
        return nil, ""Failed to wrap peripheral: "" .. INVENTORY_SIDE
    end
    
    local items = {}
    local size = 0
    local accessMethod = ""unknown""
    
    -- Try different inventory access methods
    if inventory.list and inventory.size then
        -- Standard CC inventory (chests, etc.)
        items = inventory.list()
        size = inventory.size()
        accessMethod = ""standard""
    elseif inventory.getItems then
        -- Tom's Storage style
        local tomItems = inventory.getItems()
        if tomItems then
            size = #tomItems
            for i, item in ipairs(tomItems) do
                if item then
                    items[i] = {
                        name = item.name or item.id,
                        count = item.count or item.amount or 1,
                        nbt = item.nbt
                    }
                end
            end
            accessMethod = ""tom_storage_getItems""
        end
    elseif inventory.getAllItems then
        -- Alternative Tom's Storage method
        local allItems = inventory.getAllItems()
        if type(allItems) == ""table"" then
            size = #allItems
            for i, item in ipairs(allItems) do
                if item then
                    items[i] = {
                        name = item.name or item.id,
                        count = item.count or item.amount or 1,
                        nbt = item.nbt
                    }
                end
            end
            accessMethod = ""tom_storage_getAllItems""
        end
    else
        -- Try to get size through various methods
        local methods = peripheral.getMethods(INVENTORY_SIDE)
        for _, method in pairs(methods) do
            if method == ""size"" or method == ""getSize"" then
                local success, result = pcall(inventory[method])
                if success and type(result) == ""number"" then
                    size = result
                    break
                end
            end
        end
        
        -- Try to get items by slot scanning
        if size > 0 then
            for slot = 1, math.min(size, 200) do -- Limit to 200 to prevent infinite loops
                local item = nil
                if inventory.getStackInSlot then
                    local success, result = pcall(inventory.getStackInSlot, slot)
                    if success then item = result end
                elseif inventory.getItem then
                    local success, result = pcall(inventory.getItem, slot)
                    if success then item = result end
                elseif inventory.getItemDetail then
                    local success, result = pcall(inventory.getItemDetail, slot)
                    if success then item = result end
                end
                
                if item and (item.name or item.id) then
                    items[slot] = {
                        name = item.name or item.id,
                        count = item.count or item.amount or item.size or 1,
                        nbt = item.nbt
                    }
                end
            end
            accessMethod = ""slot_scanning""
        end
    end
    
    -- Get peripheral type info for debugging
    local peripheralTypes = {peripheral.getType(INVENTORY_SIDE)}
    
    -- Build data structure
    local data = {
        timestamp = os.epoch(""utc""),
        computer_id = os.getComputerID(),
        target = ""]] .. friendName .. [["",
        inventory_side = INVENTORY_SIDE,
        inventory_size = size,
        access_method = accessMethod,
        peripheral_types = peripheralTypes,
        items = {}
    }
    
    -- Convert items to array format
    for slot, item in pairs(items) do
        table.insert(data.items, {
            slot = slot,
            name = item.name,
            count = item.count,
            nbt = item.nbt
        })
    end
    
    return data
end

-- Function to send data to API
local function sendData(data)
    local jsonData = textutils.serializeJSON(data)
    
    local response, err = http.post(API_URL, jsonData, {
        [""Content-Type""] = ""application/json""
    })
    
    if response then
        local status = response.getResponseCode()
        local body = response.readAll()
        response.close()
        
        if status == 200 or status == 201 then
            return true, ""Data sent successfully""
        else
            return false, ""HTTP "" .. status .. "": "" .. body
        end
    else
        return false, ""HTTP request failed: "" .. (err or ""unknown error"")
    end
end

-- Function to log messages with timestamp
local function log(message, data, level)
    level = level or ""INFO""
    local timestamp = os.date(""%Y-%m-%d %H:%M:%S"")
    local logMessage = ""["" .. level .. ""] "" .. message
    
    -- Console output
    print(""["" .. timestamp .. ""] "" .. logMessage)
    
    -- Local disk logging
    writeToLocalLog(logMessage, data)
end

-- Main monitoring loop
local function monitorInventory()
    -- Initialize logging system
    initializeLogging()
    
    log(""=== SPY OPERATION INITIATED ==="")
    log(""Target: ]] .. friendName .. [["")
    log(""Computer ID: "" .. os.getComputerID())
    log(""Monitoring: "" .. INVENTORY_SIDE)
    log(""Peripheral types: "" .. table.concat({peripheral.getType(INVENTORY_SIDE)}, "", ""))
    log(""Reporting to: "" .. API_URL)
    log(""Update interval: "" .. UPDATE_INTERVAL .. "" seconds"")
    log(""Local storage: "" .. getDiskInfo())
    log(""=== COVERT MODE ENGAGED ==="")
    
    local scanCount = 0
    local lastAccessMethod = nil
    
    while true do
        scanCount = scanCount + 1
        local data, err = getInventoryData()
        
        if data then
            local itemCount = #data.items
            local statusMsg = ""Scan #"" .. scanCount .. "" - ""
            
            -- Log access method changes
            if data.access_method ~= lastAccessMethod then
                log(""Inventory access method: "" .. data.access_method, nil, ""SYS"")
                lastAccessMethod = data.access_method
            end
            
            if itemCount > 0 then
                statusMsg = statusMsg .. itemCount .. "" items detected""
                log(statusMsg, data, ""SCAN"")
            else
                statusMsg = statusMsg .. ""inventory empty""
                log(statusMsg, data, ""SCAN"")
            end
            
            local success, result = sendData(data)
            if success then
                log(""Data transmitted successfully"", nil, ""NET"")
            else
                log(""Transmission failed: "" .. result, data, ""ERROR"")
            end
        else
            log(""Inventory scan failed: "" .. err, nil, ""ERROR"")
        end
        
        -- Log disk space periodically
        if scanCount % 10 == 0 then
            log(""Disk status: "" .. getDiskInfo(), nil, ""SYS"")
        end
        
        -- Wait for next update
        sleep(UPDATE_INTERVAL)
    end
end

-- Error handling wrapper
local function safeRun()
    local success, err = pcall(monitorInventory)
    if not success then
        log(""CRITICAL SYSTEM FAILURE: "" .. err, nil, ""CRASH"")
        log(""Attempting automatic recovery in 10 seconds..."", nil, ""SYS"")
        sleep(10)
        -- Restart the program
        os.reboot()
    end
end

-- Hide our tracks - clear screen after 5 seconds
local function startSpy()
    safeRun()
end

-- Give user time to see the startup, then go covert
parallel.waitForAny(
    function()
        sleep(5)
        term.clear()
        term.setCursorPos(1, 1)
        print(""Normal computer operations..."")
        print(""Nothing suspicious here..."")
        print()
    end,
    startSpy
)]]

-- Save the spy program
local file = fs.open(""startup.lua"", ""w"")
if file then
    file.write(spyProgram)
    file.close()
    print(""[SUCCESS] Spy program installed as startup.lua"")
else
    print(""[ERROR] Failed to write startup.lua"")
    return
end

print()
print(""=== INSTALLATION COMPLETE ==="")
print(""Target: "" .. friendName)
print(""Monitoring: "" .. inventorySide)

-- Show peripheral details
local invTypes = {peripheral.getType(inventorySide)}
print(""Peripheral type(s): "" .. table.concat(invTypes, "", ""))

-- Show detection confidence if available
for _, inv in pairs(inventoryPeripherals) do
    if inv.name == inventorySide then
        print(""Detection confidence: "" .. inv.confidence .. ""%"")
        print(""Detection reason: "" .. inv.reason)
        break
    end
end

print(""API Endpoint: https://spy.astr.to/api/"" .. friendName .. ""/items"")
if diskSide then
    print(""Local Logging: "" .. diskPath .. ""/spy_logs/"")
    print(""Disk Drive: "" .. diskSide)
    print(""Disk Space: "" .. (fs.getFreeSpace(diskPath) or ""unknown"") .. "" bytes free"")
else
    print(""Local Logging: DISABLED (no disk)"")
end
print()
print(""Features enabled:"")
print(""- Automatic peripheral detection"")
print(""- Multi-method inventory access"")
print(""- Real-time inventory monitoring"")
print(""- Automatic data transmission"")
print(""- Error recovery and auto-restart"")
if diskSide then
    print(""- Local data logging and backup"")
    print(""- Log rotation and space management"")
    print(""- Structured data archival"")
end
print(""- Stealth mode (hides after 5 seconds)"")
print()
print(""The spy program will start automatically on reboot."")
print(""After 5 seconds, it will hide and look like a normal computer."")
if diskSide then
    print(""Check '"" .. diskPath .. ""/spy_logs/' for local surveillance data."")
end
print()
print(""Reboot now to start spying? (y/n)"")
write(""> "")
local answer = read()

if answer:lower() == ""y"" or answer:lower() == ""yes"" then
    print()
    print(""Initiating covert operations..."")
    if diskSide then
        print(""Preparing local surveillance logs..."")
    end
    sleep(1)
    os.reboot()
else
    print()
    print(""Spy program ready. Run 'reboot' when you want to start."")
    if diskSide then
        print(""Logs will be saved to: "" .. diskPath .. ""/spy_logs/"")
    end
    print(""Remember: Act casual around "" .. friendName .. ""!"")
end"
yhSwkbVz,Jumping Bean Script,irishWarlock89,Lua,Tuesday 24th of June 2025 04:34:57 PM CDT,"local part = script.Parent
local force = 100

while true do
	part.Velocity = Vector3.new(math.random(-10, 10),
		force,
		math.random(-10, 10)
	)
	task.wait(2)
end"
Bv1H2mLP,EXEMPLO - BODY JSON ENTRADA NOTA RPA,regiolopes,JSON,Tuesday 24th of June 2025 03:56:22 PM CDT,"{
  ""numero_nf"": 734,
  ""cnpj_cliente"": ""39711575000158"",
  ""cnpj_fornecedor"": ""31637243000169"",
  ""tipoNF"": ""NFS"", 
  ""item"": {
    ""tmo"": ""SE08"",           // Vinculado ao pedido
    ""unidade"": ""UN"", 
    ""pedido"": ""0024363"",
    ""quantidade"": 2.00,
    ""valor_unitario"": 550.00
  },
  ""data_emissao"": ""2025-06-17"",
  ""impostos"": {
    ""pisretido"": false,
    ""cofinsretido"": false,
    ""csllretido"": false,
    ""irrfretido"": false,
    ""inssretido"": false,
    ""issqnretido"": true,
    ""pis"": 0.00,
    ""cofins"": 0.00,
    ""csll"": 0.00,
    ""irrf"": 0.00,
    ""inss"": 0.00,
    ""aliquota_issqn"": 4.16,
    ""issqn"": 0.00
  },
  ""notasvinculadas_cte"": [
    {
      ""numero_cte"": ""1234"",
      ""numero_nf"": ""1231241"",
      ""chave_nf"": ""44444444444444444444444444444444444444444"",
      ""data_emissao"": ""2025-01-05""
    }
  ]
}"
bdU8Y1SH,2025-06-24T17:49:08.795448,powerampache,PHP,Tuesday 24th of June 2025 03:49:09 PM CDT,"1.01-78 (78) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""Unable to resolve host ""music.gorix.xyz"": No address associated with hostname"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

authorize() - cannot load data HttpException {""code"":404,""message"":""{ \""exception\"" : \""Unable to resolve host \""music.gorix.xyz\"": No address associated with hostname\"" }"",""detailMessage"":""HTTP 404 { \""exception\"" : \""Unable to resolve host \""music.gorix.xyz\"": No address associated with hostname\"" }"",""stackTrace"":[]}"
gDsguk9X,2025-06-24T17:46:49.749430,powerampache,PHP,Tuesday 24th of June 2025 03:46:50 PM CDT,"1.01-78 (78) - DB: 83
retrofit2.HttpException: HTTP 404 { ""exception"" : ""Unable to resolve host ""music.gorix.xyz"": No address associated with hostname"" }
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

"
ZWLMHykc,Заявки от ГМОв BFa за 2ю половину июня 2025,Sansuall,MySQL,Tuesday 24th of June 2025 03:33:58 PM CDT,"-- Вечность
update TBonuses set fcount = fcount + 1700 where f_account in (169012, 136945, 189271); "
eYursrzG,Conversao Sim Nao,joaofabioma,PostgreSQL,Tuesday 24th of June 2025 02:23:28 PM CDT,"CREATE TYPE simnaobool AS ENUM ('Sim', 'Não'); -- (TRUE=Sim, FALSE=Não)
CREATE TYPE simnaoint AS ENUM ('Sim', 'Não'); -- (1=Sim, 0=Não)

CREATE OR REPLACE FUNCTION bool2simnao(boolean) 
RETURNS simnaobool AS $$
BEGIN
  RETURN CASE WHEN $1 THEN 'Sim'::simnaobool ELSE 'Não'::simnaobool END;
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION int2simnao(integer)
RETURNS simnaoint AS $$
BEGIN
  RETURN CASE WHEN $1 = 1 THEN 'Sim'::simnaoint ELSE 'Inativo'::simnaoint END;
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE CAST (boolean AS simnaobool) WITH FUNCTION bool2simnao(boolean) AS IMPLICIT;
CREATE CAST (integer AS simnaoint) WITH FUNCTION int2simnao(integer) AS IMPLICIT;
"
ATwcABY0,Stream video over http using ffmpeg,metalx1000,Bash,Tuesday 24th of June 2025 02:15:24 PM CDT,"# Stream video over http using ffmpeg
ip=""$(hostname -I|awk '{print $1}')""
port=""8080""

ffmpeg -i ""video.mp4"" -listen 1 -f mp4 -movflags frag_keyframe+empty_moov http://${ip}:${port}/video.mp4

ffmpeg -i rtsp://thingino:thingino@camera-03:554/ch1 -listen 1 -f mp4 -movflags frag_keyframe+empty_moov http://${ip}:${port}/video.mp4"
rdtPrPWD,Format cpf anom,joaofabioma,PostgreSQL,Tuesday 24th of June 2025 02:14:07 PM CDT,"CREATE OR REPLACE FUNCTION format_cpf(pcpf_input text, panon bool DEFAULT FALSE) RETURNS text AS $$
DECLARE
    v_cpf_clean text;
BEGIN
  v_cpf_clean := regexp_replace(pcpf_input, '[^0-9]', '', 'g');
  
  IF length(v_cpf_clean) != 11 THEN
    return v_cpf_clean;
  END IF;

  IF(panon)THEN
	  RETURN format('***.%s.%s-**', 
	               substring(v_cpf_clean, 4, 3),
	               substring(v_cpf_clean, 7, 3));
  END IF;
  RETURN format('%s.%s.%s-%s', 
               substring(v_cpf_clean, 1, 3),
               substring(v_cpf_clean, 4, 3),
               substring(v_cpf_clean, 7, 3),
               substring(v_cpf_clean, 10, 2));
END;
$$ LANGUAGE plpgsql IMMUTABLE;"
gZNBt6Dm,wa md,disk6969,Python,Tuesday 24th of June 2025 01:54:51 PM CDT,"from telethon.helpers import add_surrogate, del_surrogate, within_surrogate
from telethon import types 

DELIMITERS = {
    types.MessageEntityBold: ('*', '*'),
    types.MessageEntityItalic: ('_', '_'),
    types.MessageEntityStrike: ('~', '~'),
    types.MessageEntityCode: ('`', '`'),
    types.MessageEntityBlockquote: ('> ', '')
}

def whatsapp_unparse(raw_text, entities):
    text = add_surrogate(raw_text)
    insert_at = []

    for i, entity in enumerate(entities):
        s = entity.offset
        e = entity.offset + entity.length
        delimiter = DELIMITERS.get(type(entity), None)
        if delimiter:
            insert_at.append((s, i, delimiter[0]))
            insert_at.append((e, -i, delimiter[1]))

    insert_at.sort(key=lambda t: (t[0], t[1]))

    last_quote = None
    while insert_at:
        at, _, what = insert_at.pop()
        while within_surrogate(text, at): at += 1
        
        if not what: last_quote = at  # quote end
        if what == '> ' and last_quote: # quote start
            swapped = (
                text[at:last_quote]
                    .replace('\n\n', '\n') # clean empty newlines
                    .replace('\n', '\n> ') # quote each newline
            )
            text = text[:at] + swapped  + text[last_quote:]
        text = text[:at] + what + text[at:]
    return del_surrogate(text)


message = event / Message
wa_text = whatsapp_unparse(message.raw_text, message.entities)"
pTDfRfH2,daemonize is complicated ...,DeaD_EyE,Python,Tuesday 24th of June 2025 01:40:53 PM CDT,"import sys
import os
import time

# 1. first fork
if os.fork() > 0:
    print(""Kill the parent"")
    sys.exit(0)

# 2. new session
print(""setsid"")
os.setsid()

# 3. second fork
if os.fork() > 0:
    print(""Kill the parent"")
    sys.exit(0) 

# 4. umask
print(""umask 0"")
os.umask(0)


print(f""Hello from child: {os.getpid()}"")

# 5. change working directory
print(""chdir /"")
os.chdir(""/"")

print(""GAG the child process!!!"")

# 6. flush stdin/stdout/stderr
sys.stdin.flush()
sys.stdout.flush()
sys.stderr.flush()

# 7. copy filedescriptor of dev_null to sys.stdin
#    dev_null is closed, but 0 stays open and points to os.devnull
with open(os.devnull, ""rb"", 0) as dev_null:
    os.dup2(dev_null.fileno(), sys.stdin.fileno())


with open(os.devnull, ""ab"", 0) as dev_null:
    os.dup2(dev_null.fileno(), sys.stdout.fileno())
    os.dup2(dev_null.fileno(), sys.stderr.fileno())    


time.sleep(20)
"
zKdYUHDb,Уведомления Лицо из Frigate,DieMetRik,YAML,Tuesday 24th of June 2025 01:40:52 PM CDT,"alias: Frigate. Уведомления Лицо из Frigate
description: """"
triggers:
  - trigger: mqtt
    topic: frigate/tracked_object_update
  - trigger: mqtt
    topic: test/tracked_object_update
conditions:
  - condition: template
    value_template: ""{{ trigger.payload_json['type'] == 'face'}}""
actions:
  - variables:
      name: ""{{ trigger.payload_json['name'] }}""
      type: ""{{ trigger.payload_json['type'] }}""
      score: ""{{ (trigger.payload_json['score'] | float(0) * 100) | int(0) }}""
      id: ""{{ trigger.payload_json['id'] }}""
      datetime: >-
        {{ trigger.payload_json['timestamp'] | timestamp_custom('%Y-%m-%d
        %H:%M:%S') }}
      camera: ""{{ trigger.payload_json['camera'] }}""
      ip_base_url: http://192.168.1.130:8123/api/frigate/notifications/
    alias: Определение переменных из MQTT frigate events
  - alias: type == face && != None (При распознавании лица)
    if:
      - alias: Если это лицо
        condition: template
        value_template: ""{{ type == 'face' }}""
      - alias: Если name != None
        condition: template
        value_template: ""{{ name != None }}""
      - alias: Условие для запрета отправки дублей
        condition: template
        value_template: ""{{ id  != states('input_text.frigate_face_id_event_detected') }}""
    then:
      - action: telegram_bot.send_message
        metadata: {}
        data:
          parse_mode: html
          message: |-
            Найден: <u>{{name}}</u> на {{score}}%  <pre>camera: {{camera}} 
            Дата: {{ datetime }} 
            id: {{id}}</pre>
          target: ""{{ target }}""
        enabled: true
      - alias: Если Dmitry или Nadezda > 90%
        if:
          - condition: or
            conditions:
              - condition: and
                conditions:
                  - condition: template
                    value_template: ""{{ score >= 90 }}""
                  - condition: template
                    value_template: ""{{ name == 'Dmitry'}}""
                alias: Если Dmitry > 90
              - alias: Если Nadezda > 85
                condition: and
                conditions:
                  - condition: template
                    value_template: ""{{ score >= 85 }}""
                  - condition: template
                    value_template: ""{{ name == 'Nadezda'}}""
          - condition: or
            conditions:
              - condition: state
                entity_id: alarm_control_panel.alarm_home
                state: armed_away
              - condition: state
                entity_id: alarm_control_panel.alarm_home
                state: pending
              - condition: state
                entity_id: alarm_control_panel.alarm_home
                state: triggered
        then:
          - target:
              entity_id: alarm_control_panel.alarm_home
            action: alarm_control_panel.alarm_disarm
            data: {}
          - action: telegram_bot.send_message
            data:
              message: ""🚨Снято с охраны по лицу: [ {{ name }} ]""
      - alias: Если score > 90% (выставить запрет на отправку дублей)
        if:
          - condition: template
            value_template: ""{{ score >= 90 }}""
        then:
          - if:
              - condition: template
                value_template: >-
                  {{ trigger.payload_json['id']  !=
                  states('input_text.frigate_face_id_event_detected') }}
            then:
              - action: input_text.set_value
                metadata: {}
                data:
                  value: ""{{ id }}""
                target:
                  entity_id: input_text.frigate_face_id_event_detected
mode: queued
max: 10
"
zinRveaT,Conversao situacao,joaofabioma,PostgreSQL,Tuesday 24th of June 2025 01:30:46 PM CDT,"
CREATE TYPE situacaobool AS ENUM ('Ativo', 'Inativo'); -- (TRUE=Ativo, FALSE=Inativo)
CREATE TYPE situacaoint AS ENUM ('Ativo', 'Inativo'); -- (1=Ativo, 0=Inativo)

CREATE OR REPLACE FUNCTION bool2situacao(boolean) 
RETURNS situacaobool AS $$
BEGIN
  RETURN CASE WHEN $1 THEN 'Ativo'::situacaobool ELSE 'Inativo'::situacaobool END;
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION int2situacao(integer) 
RETURNS situacaoint AS $$
BEGIN
  RETURN CASE WHEN $1 = 1 THEN 'Ativo'::situacaoint ELSE 'Inativo'::situacaoint END;
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE CAST (boolean AS situacaobool) WITH FUNCTION bool2situacao(boolean) AS IMPLICIT;
CREATE CAST (integer AS situacaoint) WITH FUNCTION int2situacao(integer) AS IMPLICIT;
"
y7Nxa8bA,mcpconfig,tensedtorch,JSON,Tuesday 24th of June 2025 01:15:11 PM CDT,"{
  ""mcpServers"": {
    ""sequential-thinking"": {
      ""command"": ""npx"",
      ""args"": [
        ""@modelcontextprotocol/server-sequential-thinking""
      ],
      ""cwd"": ""/Users/sai/Documents/devel/MCPs/server-sequential-thinking""
    },
    ""desktop-commander"": {
      ""command"": ""npx"",
      ""args"": [
        ""@smithery/cli"",
        ""run"",
        ""@wonderwhy-er/desktop-commander""
      ],
      ""cwd"": ""/Users/sai/Documents/devel/MCPs/desktop-commander""
    },
    ""filesystem"": {
      ""command"": ""npx"",
      ""args"": [
        ""@modelcontextprotocol/server-filesystem"",
        ""/Users/sai/Documents/01-NU/phd"",
        ""/tmp"",
        ""/Users/sai/Downloads"",
        ""/Users/sai/Documents/devel""
      ],
      ""cwd"": ""/Users/sai/Documents/devel/MCPs/server-filesystem""
    },
    ""leetcode"": {
      ""command"": ""npx"",
      ""args"": [
        ""@mcpfun/mcp-server-leetcode"",
        ""--port"",
        ""7860""
      ],
      ""cwd"": ""/Users/sai/Documents/devel/MCPs/mcp-server-leetcode""
    },
    ""apple-mcp"": {
      ""command"": ""npx"",
      ""args"": [
        ""@dhravya/apple-mcp""
      ],
      ""cwd"": ""/Users/sai/Documents/devel/MCPs/apple-mcp""
    },
    ""obsidian"": {
      ""command"": ""npx"",
      ""args"": [
        ""obsidian-mcp"",
        ""/Users/sai/Library/Mobile Documents/iCloud~md~obsidian/Documents/Alexandria""
      ],
      ""cwd"": ""/Users/sai/Documents/devel/MCPs/obsidian""
    },
    ""applescript_execute"": {
      ""command"": ""npx"",
      ""args"": [
        ""@peakmojo/applescript-mcp""
      ],
      ""cwd"": ""/Users/sai/Documents/devel/MCPs/applescript-execute""
    },
    ""git"": {
      ""command"": ""uvx"",
      ""args"": [
        ""mcp-server-git""
      ],
      ""cwd"": ""/Users/sai/Documents/devel/MCPs/git-server""
    },
    ""github"": {
      ""command"": ""npx"",
      ""args"": [
        ""@modelcontextprotocol/server-github""
      ],
      ""cwd"": ""/Users/sai/Documents/devel/MCPs/github-mcp-server"",
      ""env"": {
        ""GITHUB_PERSONAL_ACCESS_TOKEN"": ""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""
      }
    },
    ""fetch"": {
      ""command"": ""uvx"",
      ""args"": [
        ""mcp-server-fetch""
      ]
    },
    ""puppeteer"": {
      ""command"": ""npx"",
      ""args"": [
        ""@modelcontextprotocol/server-puppeteer""
      ],
      ""cwd"": ""/Users/sai/Documents/devel/MCPs/server-puppeteer""
    },
    ""memory"": {
      ""command"": ""npx"",
      ""args"": [
        ""@modelcontextprotocol/server-memory""
      ],
      ""cwd"": ""/Users/sai/Documents/devel/MCPs/server-memory"",
      ""env"": {
        ""MEMORY_FILE_PATH"": ""/Users/sai/Documents/devel/MCPs/server-memory/memory.json""
      }
    },
    ""zotero"": {
      ""command"": ""/Users/sai/.local/bin/zotero-mcp"",
      ""env"": {
        ""ZOTERO_LOCAL"": ""true""
      }
    }, 
    ""context7"": {
        ""command"": ""npx"",
        ""args"": [
            ""@upstash/context7-mcp""
        ],
        ""cwd"": ""/Users/sai/Documents/devel/MCPs/context7-mcp""
    }, 
    ""deepseek"": {
        ""command"": ""npx"",
        ""args"": [
            ""-y"",
            ""deepseek-mcp-server""
        ],
        ""env"": {
            ""DEEPSEEK_API_KEY"": ""sk-a278c5d7a4694c91b61eb42875fd00d5""
        }, 
        ""cwd"": ""/Users/sai/Documents/devel/MCPs/deepseek-mcp-server""
    }
  }
}"
neAN4a60,PotatoFarmer,Blackhome,Lua,Tuesday 24th of June 2025 12:46:23 PM CDT,"-- pastebin get neAN4a60 PotatoFarmer

local numberLevels = ...

if numberLevels then
    numberLevels = tonumber(numberLevels)
else
    numberLevels = 1
end

local turtlePos, direction
local startPos, startDir

local Settings = {
    vertDiff = 5
}

local function getGPSPosition()
    local x, y, z = gps.locate()
    if not x then print(""Error: GPS not available"") return nil end
    return {x = math.floor(x), y = math.floor(y), z = math.floor(z)}
end

local function negative(vec)
    return {x = -vec.x, y = -vec.y, z = -vec.z}
end

local function add(vec1, vec2)
    return {x = vec1.x + vec2.x, y = vec1.y + vec2.y, z = vec1.z + vec2.z}
end
local function sub(vec1, vec2)
    return add(vec1, negative(vec2))
end

local function multiply(s, vec)
    return {x = s * vec.x, y = s * vec.y, z = s * vec.z}
end

local function getSign(number)
    return number / math.abs(number)
end

local function isEqual(vec1, vec2)
    return vec1.x == vec2.x and vec1.y == vec2.y and vec1.z == vec2.z
end


-- === Basic Movement ===

local function moveForward()
    if turtle.forward() then
        turtlePos = add(turtlePos, direction)
        return true
    end
    return false
end
local function moveUp()
    if turtle.up() then
        turtlePos.y = turtlePos.y + 1
        return true
    end
    return false
end

local function moveDown()
    if turtle.down() then
        turtlePos.y = turtlePos.y - 1
        return true
    end
    return false
end


-- === Basic Turning ===

local function turnInDirection(dir)
    if not direction then return end
    if dir == ""left"" then
        turtle.turnLeft()
        direction = {x = direction.z, y = 0, z = -direction.x}
    elseif dir == ""right"" then
        turtle.turnRight()
        direction = {x = -direction.z, y = 0, z = direction.x}
    elseif dir == ""around"" then
        turtle.turnLeft()
        turtle.turnLeft()
        direction = {x = -direction.x, y = 0, z = -direction.z}
    end
end

local function getTurnDirection(from, to)
    local function vectorsEqual(a, b)
        return a.x == b.x and a.z == b.z
    end

    if vectorsEqual(from, to) then return nil end
    local left  = {x = from.z, y = 0, z = -from.x}
    local right = {x = -from.z, y = 0, z = from.x}
    local back  = {x = -from.x, y = 0, z = -from.z}
    if vectorsEqual(to, left) then
        return ""left""
    elseif vectorsEqual(to, right) then
        return ""right""
    elseif vectorsEqual(to, back) then
        return ""around""
    else
        error(""Invalid target direction"")
    end
end

local function getDirection()
    local pos1 = getGPSPosition()
    if not pos1 then error(""GPS failure, cannot get direction"") end

    for i = 1, 4 do
        if turtle.forward() then
            local pos2 = getGPSPosition()
            if not pos2 then error(""GPS failure after move"") end
            -- turtlePos = pos2
            -- Richtung berechnen
            direction = sub(pos2, pos1)

            -- zurück zur ursprünglichen Position
            turnInDirection(""around"")
            moveForward()

            -- Sicherheitsprüfung
            local posBack = getGPSPosition()
            if not isEqual(pos1, posBack) then
                error(""Warnung: Position hat sich beim Rückweg verschoben!"")
                turtlePos = posBack -- explizit wieder auf GPS setzen
            else
                turtlePos = pos1
            end

            turnInDirection(""around"")
            return
        else
            turtle.turnLeft()
        end
    end

    error(""Unable to move forward in any direction for direction detection"")
end


-- === Positioning ===

local function goToLift()
    local coord = add(startPos, startDir)

    local deltaX = coord.x - turtlePos.x
    local deltaZ = coord.z - turtlePos.z

    local dirX = startDir.x
    local dirZ = startDir.z

    local function moveToEqualX()
        while not (deltaX == 0) do
            turnInDirection(getTurnDirection(direction, {x = getSign(deltaX), y = 0, z = 0}))
            moveForward()
            deltaX = coord.x - turtlePos.x
        end
    end

    local function moveToEqualZ()
        while not (deltaZ == 0) do
            turnInDirection(getTurnDirection(direction, {x = 0, y = 0, z = getSign(deltaZ)}))
            moveForward()
            deltaZ = coord.z - turtlePos.z
        end
    end

    if dirX == 0 then
        moveToEqualX()
        moveToEqualZ()
    elseif dirZ == 0 then
        moveToEqualZ()
        moveToEqualX()
    end
end

local function goToPos(coord)
    local deltaX = coord.x - turtlePos.x
    local deltaY = coord.y - turtlePos.y
    local deltaZ = coord.z - turtlePos.z

    local dirX = startDir.x
    local dirZ = startDir.z

    local function moveToEqualX()
        while not (deltaX == 0) do
            turnInDirection(getTurnDirection(direction, {x = getSign(deltaX), y = 0, z = 0}))
            moveForward()
            deltaX = coord.x - turtlePos.x
        end
    end

    local function moveToEqualZ()
        while not (deltaZ == 0) do
            turnInDirection(getTurnDirection(direction, {x = 0, y = 0, z = getSign(deltaZ)}))
            moveForward()
            deltaZ = coord.z - turtlePos.z
        end
    end

    local function moveToEqualY()
        while not (deltaY == 0) do
            if deltaY > 0 then
                moveUp()
            elseif deltaY < 0 then
                moveDown()
            end
            deltaY = coord.y - turtlePos.y
        end
    end

    if not (deltaY == 0) then
        goToLift()
        moveToEqualY()
        deltaX = coord.x - turtlePos.x
        deltaZ = coord.z - turtlePos.z
    end
    if dirX == 0 then
        moveToEqualZ()
        moveToEqualX()
    elseif dirZ == 0 then
        moveToEqualX()
        moveToEqualZ()
    end
end


-- === Tasks ===

local function isPotato(item)
    if not item or not item.name then return false end
    return item.name == ""minecraft:potatoes"" or item.name == ""minecraft:potato""
end

local function getAge(item)
    return item.state and item.state.age or nil
end

local function getPotatoCount()
    local numPotatoes = 0
    for i = 1, 16 do
        local item = turtle.getItemDetail(i)
        
        if isPotato(item) then
            numPotatoes = numPotatoes + turtle.getItemCount(i)
        end
    end
    return numPotatoes
end

local function selectPotatoSlot()
    for i = 1, 16 do
        local item = turtle.getItemDetail(i)
        
        if isPotato(item) then
            turtle.select(i)
            return true
        end
    end
    return false
end

local function harvestAndPlantPotato()
    local success, item = turtle.inspectDown()

    if (not success) or (isPotato(item) and getAge(item) == 7) then
        turtle.digDown()
        selectPotatoSlot()
        turtle.placeDown()
    end
end

local function harvestField()
    -- Get in position
    goToLift()
    turnInDirection(getTurnDirection(direction, startDir))
    moveUp()
    local cntRow = 1
    local notFinished = true

    local function turnToNextRow(turnDir)
        turnInDirection(turnDir)
        if not moveForward() then
            return false
        end
        if cntRow % 6 == 3 then
            if not moveForward() then
                return false
            end
        end
        turnInDirection(turnDir)
        return true
    end
  
    while true do
        -- Move forward till wall then turn next row
        if isEqual(direction, startDir) then
            if not moveForward() then
                if not turnToNextRow(""right"") then
                    -- stops at last harvested block, does not go back
                    break
                else
                    cntRow = cntRow + 1
                end
            end
        -- Move forward till distance of 2 in start directional coordinate to startPos
        else
            local testCoord = add(turtlePos, multiply(2, direction))
            local condition1 = (not (startDir.x == 0)) and (testCoord.x == startPos.x)
            local condition2 = (not (startDir.z == 0)) and (testCoord.z == startPos.z)

            if condition1 or condition2 then
                if not turnToNextRow(""left"") then
                    -- stops at last harvested block, does not go back
                    break
                else
                    cntRow = cntRow + 1
                end
            else
                moveForward()
            end
        end
        -- harvest block below
        harvestAndPlantPotato()
    end
end

-- === Inventory Management ===

local function dumpInventoryKeepPotatoes()
    local success, chest = turtle.inspect()
    while not (success and chest.name == ""minecraft:chest"") do
        print(""No chest found. Pls place one in front."")
        print(""Press enter to continue."")
        read()
        success, chest = turtle.inspect()
    end

    local potatoesKept = 0

    for slot = 1, 16 do
        local item = turtle.getItemDetail(slot)
        if item then
            turtle.select(slot)
            if isPotato(item) and potatoesKept < 10 then
                local keep = math.min(item.count, 10 - potatoesKept)
                local drop = item.count - keep
                if drop > 0 then
                    turtle.drop(drop)
                end
                potatoesKept = potatoesKept + keep
            else
                turtle.drop()
            end
        end
    end

    turtle.select(1)
end

local function turtleNeedsFuel()
    local fuelLevel = turtle.getFuelLevel()

    if fuelLevel < 1000 then
        if not isEqual(startPos, turtlePos) then
            goToPos(startPos)
        end
        print(""Turtle needs more fuel"")
        return true
    end
    return false
end


-- === Initialization ===

local function saveStartingParameters()
    local parameterList = {pos = turtlePos, dir = direction, numLevels = numberLevels}

    local file = fs.open(""startingParameters.txt"", ""w"")
    file.write(textutils.serialize(parameterList))
    file.close()
end

local function loadStartingParameters()
    if not fs.exists(""startingParameters.txt"") then return false end

    local file = fs.open(""startingParameters.txt"", ""r"")
    local data = textutils.unserialize(file.readAll())

    file.close()

    startPos = data.pos
    startDir = data.dir
    numberLevels = data.numLevels
    return true
end

local function initProgram()
    turtlePos = getGPSPosition()
    if not turtlePos then error(""GPS failure, cannot run the program"") end
    
    getDirection()

    if not loadStartingParameters() then
        startPos = turtlePos
        startDir = direction
        saveStartingParameters()
    end
end



local function main()
    local cnt = 0
    while true do
        if turtleNeedsFuel() then
            return
        end
        local level = cnt % numberLevels
        local posLift = add(startPos, startDir)
        local vecUp = {x = 0, y = Settings.vertDiff * level, z = 0}

        local posNextField = add(posLift, vecUp)

        -- Go to field and harvest it
        goToPos(posNextField)
        harvestField()

        -- Go to start and dump inventory
        if cnt % 2 == 1 then
            goToPos(startPos)
            turnInDirection(getTurnDirection(direction, negative(startDir)))
            dumpInventoryKeepPotatoes()
        end
        cnt = cnt + 1
    end
end




initProgram()
main()"
AavaxE33,projekt,Miksus,HTML 5,Tuesday 24th of June 2025 12:22:20 PM CDT,"import React from 'react';
import { View, Text, Button } from 'react-native';

export default function App() {
  return (
    <View style={{ padding: 20 }}>
      <Text>Hello from React Native!</Text>
      <Button title=""Click me"" onPress={() => alert('Clicked!')} />
    </View>
  );
}"
