id,title,username,language,date,content
LPYvmiqW,✅ MAKE $1200 IN 15 MIN,void13374,JavaScript,Thursday 26th of June 2025 12:56:55 AM CDT,"We just posted new leaks.

Join the channel: https://t.me/luk4sl3aks

Accounts: 27246"
sUqC234H,✅ Crypto Accounts,void13374,JavaScript,Thursday 26th of June 2025 12:56:23 AM CDT,"We just posted new leaks.

Join the channel: https://t.me/luk4sl3aks

Accounts: 58983"
h4HqZMr3,GMAIL Logs (2FA disabled),void13374,JavaScript,Thursday 26th of June 2025 12:55:52 AM CDT,"We just posted new leaks.

Join the channel: https://t.me/luk4sl3aks

Accounts: 73552"
mydVLMCH,Netflix Premium UHD Hits,void13374,JavaScript,Thursday 26th of June 2025 12:55:20 AM CDT,"We just posted new leaks.

Join the channel: https://t.me/luk4sl3aks

Accounts: 52549"
jLuYPEZi,MAKE $500 INSTANTLY,void13374,JavaScript,Thursday 26th of June 2025 12:54:48 AM CDT,"We just posted new leaks.

Join the channel: https://t.me/luk4sl3aks

Accounts: 15466"
nC3ASkk3,✅ Account Leaks,void13374,JavaScript,Thursday 26th of June 2025 12:54:16 AM CDT,"We just posted new leaks.

Join the channel: https://t.me/luk4sl3aks

Accounts: 58481"
tu0FterB,✅ PayPal Hits,void13374,JavaScript,Thursday 26th of June 2025 12:53:23 AM CDT,"We just posted new leaks.

Join the channel: https://t.me/luk4sl3aks

Accounts: 75931"
5Ri1jkTA,FREE BTC GUIDE,void13374,JavaScript,Thursday 26th of June 2025 12:52:52 AM CDT,"We just posted new leaks.

Join the channel: https://t.me/luk4sl3aks

Accounts: 25973"
xwgZ4ffg,Make $1200 in 15 minutes,void13374,JavaScript,Thursday 26th of June 2025 12:52:20 AM CDT,"We just posted new leaks.

Join the channel: https://t.me/luk4sl3aks

Accounts: 13525"
sun9y3n3,Application,KrnlBypasser,Lua,Wednesday 25th of June 2025 11:49:15 PM CDT,"-- hai :3

--// Services
local UserInputService = game:GetService(""UserInputService"")
local ContextActionService = game:GetService(""ContextActionService"")
local RunService = game:GetService(""RunService"")
local Players = game:GetService(""Players"")

--// Player and Character
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild(""Humanoid"")
local rootPart = character:WaitForChild(""HumanoidRootPart"")

--// Configuration
local SWING_FORCE = 50
local JUMP_BOOST = 50

--// State Management 
local GrapplingHook = {}
GrapplingHook.__index = GrapplingHook

function GrapplingHook.new()
    local self = setmetatable({}, GrapplingHook)
    self.state = ""Idle""
    self.hookPart = nil
    self.beam = nil
    self.attachment0 = nil
    self.attachment1 = nil
    self.alignPosition = nil
    self.alignOrientation = nil
    return self
end

function GrapplingHook:setState(newState)
    if self.state == newState then return end
    print(""Grappling Hook State:"", newState)
    self.state = newState
end

--// Grappling Hook Instance
local hook = GrapplingHook.new()

--// Creating hook visual :P
function createHookPart()
    local part = Instance.new(""Part"")
    part.Size = Vector3.new(1, 1, 1)
    part.BrickColor = BrickColor.new(""Gray"")
    part.Material = Enum.Material.Metal
    part.Anchored = true
    part.CanCollide = false
    part.Name = ""HookPart""
    part.Parent = workspace
    return part
end

--// Fire the grappling hook
function fireHook()
    if hook.state ~= ""Idle"" then return end

    local mouse = player:GetMouse()
    local targetPosition = mouse.Hit.p
    local originPosition = rootPart.Position

    local direction = (targetPosition - originPosition).Unit * 10000 

    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    local raycastResult = workspace:Raycast(originPosition, direction, raycastParams)

    if not raycastResult or not raycastResult.Instance then
        return
    end

    hook:setState(""Attached"")
    hook.hookPart = createHookPart()
    hook.hookPart.Position = raycastResult.Position

    -- Create attachments
    hook.attachment0 = Instance.new(""Attachment"", rootPart)
    hook.attachment1 = Instance.new(""Attachment"", hook.hookPart)


    -- Create the beam but start it as disabled
    hook.beam = Instance.new(""Beam"")
    hook.beam.Enabled = false 

    -- Assign attachments and visual properties
    hook.beam.Attachment0 = hook.attachment0
    hook.beam.Attachment1 = hook.attachment1
    hook.beam.Color = ColorSequence.new(Color3.new(0.8, 0.8, 0.8))
    hook.beam.FaceCamera = true
    hook.beam.Width0 = 0.1
    hook.beam.Width1 = 0.1


    hook.beam.Parent = hook.hookPart 


    hook.beam.Enabled = true


    attachPlayer()
end

--// Attach the player and start swinging around :D
function attachPlayer()
    if hook.state ~= ""Attached"" then return end

    hook:setState(""Swinging"")
    humanoid.Sit = true -- must be a rock to simple not jump on the platform

    -- Physics constraints for swinging
    hook.alignPosition = Instance.new(""AlignPosition"")
    hook.alignPosition.Attachment0 = hook.attachment0
    hook.alignPosition.Attachment1 = hook.attachment1
    hook.alignPosition.Responsiveness = 20
    hook.alignPosition.Parent = rootPart

    hook.alignOrientation = Instance.new(""AlignOrientation"")
    hook.alignOrientation.Attachment0 = hook.attachment0
    hook.alignOrientation.Attachment1 = hook.attachment1
    hook.alignOrientation.Responsiveness = 10
    hook.alignOrientation.Parent = rootPart
end

--// Handle player input for swinging
function onUpdate(dt)
    if hook.state ~= ""Swinging"" then return end

    local moveDirection = humanoid.MoveDirection
    if moveDirection.Magnitude > 0 then
        local force = rootPart.CFrame:VectorToWorldSpace(moveDirection) * SWING_FORCE
        rootPart:ApplyImpulse(force)
    end
end

--// Release the grappling hook
function releaseHook()
    if hook.state == ""Idle"" then return end

    if hook.state == ""Swinging"" then
        local jumpForce = rootPart.CFrame.UpVector * JUMP_BOOST
        rootPart.Velocity = rootPart.Velocity + jumpForce
    end

    cleanup()
end

--// Cleanup resources
function cleanup()
    hook:setState(""Idle"")
    if hook.hookPart then
        hook.hookPart:Destroy()
        hook.hookPart = nil
    end
    if hook.beam then
        hook.beam:Destroy() 
        hook.beam = nil
    end
    if hook.attachment0 then
        hook.attachment0:Destroy()
        hook.attachment0 = nil
    end
    -- No need to handle attachment1, it gets destroyed with hookPart
    hook.attachment1 = nil
    if hook.alignPosition then
        hook.alignPosition:Destroy()
        hook.alignPosition = nil
    end
    if hook.alignOrientation then
        hook.alignOrientation:Destroy()
        hook.alignOrientation = nil
    end
    humanoid.Sit = false
end

--// Input Handling -- THIS FUNCTION ALLOWS THE USER TO JUMP WHEN WALKING AROUND
function onAction(actionName, inputState, inputObject)
    if actionName == ""Grapple"" and inputState == Enum.UserInputState.Begin then
        fireHook()
        return Enum.ContextActionResult.Sink -- Prevents mouse click from doing other things
    end

    if actionName == ""Release"" and inputState == Enum.UserInputState.Begin then
        -- Only release the hook if it's currently active
        if hook.state ~= ""Idle"" then
            releaseHook()
            -- Sink the input so we don't also do a normal jump
            return Enum.ContextActionResult.Sink
        else
            -- If the hook is idle, pass the input so the default jump can happen
            return Enum.ContextActionResult.Pass
        end
    end

    -- For any other input, let the game handle it normally
    return Enum.ContextActionResult.Pass
end

--// Bind actions and update loop
ContextActionService:BindAction(""Grapple"", onAction, true, Enum.UserInputType.MouseButton1)
ContextActionService:BindAction(""Release"", onAction, true, Enum.KeyCode.Space)
RunService.Heartbeat:Connect(onUpdate)

print(""Grappling Hook system initialized."")"
3wzTdBDM,ServerError: received 500 HTTP response,basedcount_bot,Python,Wednesday 25th of June 2025 09:59:39 PM CDT,"Traceback (most recent call last):
  File ""/home/gmktec-server/Bots/basedcount_bot/basedcount_bot.py"", line 46, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/home/gmktec-server/Bots/basedcount_bot/basedcount_bot.py"", line 123, in check_mail
    async for message in reddit_instance.inbox.unread(limit=None):  # Message
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 37, in __anext__
    await self._next_batch()
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 90, in _next_batch
    self._listing = await self._reddit.get(self.url, params=self.params)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 54, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 813, in get
    return await self._objectify_request(method=""GET"", params=params, path=path)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 570, in _objectify_request
    await self.request(
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 54, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 1061, in request
    return await self._core.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 383, in request
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 305, in _request_with_retries
    return await self._do_retry(
           ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 170, in _do_retry
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 305, in _request_with_retries
    return await self._do_retry(
           ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 170, in _do_retry
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec-server/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 322, in _request_with_retries
    raise self.STATUS_EXCEPTIONS[response.status](response)
asyncprawcore.exceptions.ServerError: received 500 HTTP response
"
UgicbmnT,change mobile sidebar menu to full width,arie_cristianD,CSS,Wednesday 25th of June 2025 09:27:31 PM CDT,"
a.jeg_menu_close {
    z-index : 99999999;
    color: #212121;  /* close button color */
    padding : 20px; 
    top : 0;
}

a.jeg_menu_close:hover {
        color : red; /* close button hover color */
}
a.jeg_menu_close i{
    height : 40px;
    display: flex;
    align-items: center;
}


.jeg_mobile_wrapper {
    width : 100%;
}

.jeg_aside_item.jeg_search_wrapper form{
margin-right : 60px

}"
mjY40QvS,jawaban uas,yudiwibisono,Python,Wednesday 25th of June 2025 08:37:47 PM CDT,"# %%
print(""hello"")

# %%
import sqlite3
conn = sqlite3.connect('uas2.db')
cursor = conn.cursor()

# %%
cursor.execute('DROP TABLE IF EXISTS siswa')

cursor.execute('''
    CREATE TABLE  IF NOT EXISTS siswa (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nim TEXT UNIQUE NOT NULL,
        nama TEXT NOT NULL,
        skor INTEGER
    )
''')
conn.commit()

# %%
users_data = [
    ('0501', 'Budi'),
    ('0502', 'Tita'),
]
cursor.executemany(""INSERT INTO siswa (nim, nama) VALUES (?, ?)"", users_data)
conn.commit()

# %%
cursor.execute('DROP TABLE IF EXISTS soal')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS soal (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        deskripsi TEXT UNIQUE NOT NULL,
        tingkat_kesulitan integer NOT NULL -- 1:mudah, 2:sedang, 3:sulit       
    )
''')
conn.commit()


# %%
data_soal = [
    ('Ibu kota Jawa Barat', 1),
    ('Ibu kota Jawa Tengah', 2),
    ('Ibu kota Maluku Utara', 3),
]
cursor.executemany(""INSERT INTO soal (deskripsi, tingkat_kesulitan) VALUES (?, ?)"", data_soal)
conn.commit

# %%
cursor.execute('DROP TABLE IF EXISTS pilihan')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS pilihan (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        id_soal INTEGER NOT NULL,
        is_benar BOOLEAN NOT NULL,
        deskripsi TEXT UNIQUE NOT NULL
    )
''')
conn.commit()

# %%
data_pilihan_soal = [
    ( 1,""Bandung"",1),
    ( 1,""Jakarta"", 0),
    ( 1,""Banten"",0),    
    ( 2,""Semarang"",1),
    ( 2,""Yogyakarta"",0),
    ( 2,""Solo"",0),
    ( 3,""Sofifi"",1),
    ( 3,""Tidore"",0),
    ( 3,""Maluku"",0),
]
cursor.executemany(""INSERT INTO pilihan (id_soal,deskripsi, is_benar) VALUES (?, ?, ?)"", data_pilihan_soal)
conn.commit()


# %%


# %%


# %%
cursor.execute('DROP TABLE IF EXISTS jawaban')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS jawaban (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        id_siswa INTEGER NOT NULL,
        id_soal INTEGER NOT NULL,   
        jawaban_id_pilihan  INTEGER NOT NULL       
    )
''')
conn.commit()

# %%
def proses_test(id):
    
    conn = sqlite3.connect('uas2.db')
    cursor = conn.cursor()
    
    cursor.execute(""SELECT nama FROM siswa WHERE id=?"", (id,))
    siswa = cursor.fetchone()
    print(f""Selamat datang {siswa[0]}"")

    cursor.execute(""SELECT id, deskripsi, tingkat_kesulitan FROM soal ORDER BY RANDOM()"")
    soal = cursor.fetchall()

    cc = 0
    for s in soal:
        cc = cc + 1
        print(f""No: {cc}"")
        print(f""{s[1]}"")

        cursor.execute(""SELECT id, deskripsi, is_benar FROM pilihan WHERE id_soal=? ORDER BY RANDOM()"", (s[0],))
        pilihan = cursor.fetchall()
        
        cc2 = 1        
        peta = []
        for p in pilihan:
            print(f""{cc2} {p[1]}"")
            peta.append(p[0]) # simpan id pilihan
            cc2 = cc2 + 1
        
        print(peta)
        jawaban = int(input(""Jawaban anda: ""))  
        jawab_id = peta[jawaban-1] #jawab akan berisi id pilihan, harus seperti ini karena random   
        print(jawab_id)
        cursor.execute(""INSERT INTO jawaban (id_siswa, id_soal, jawaban_id_pilihan) VALUES (?, ?, ?)"", (id, s[0], jawab_id))
    
    conn.commit()

# %%
def hitung_skor(id):
    conn = sqlite3.connect('uas2.db')
    cursor = conn.cursor()
    
    cursor.execute(""SELECT id, nama FROM siswa WHERE id=?"", (id,))
    siswa = cursor.fetchone()
    print(f""Hitung skor {siswa[1]}"")

    cursor.execute(""SELECT id_soal, jawaban_id_pilihan FROM jawaban WHERE id_siswa=?"", (id,))
    jawaban = cursor.fetchall()

    skor = 0
    for j in jawaban:
        cursor.execute(""SELECT id, is_benar FROM pilihan WHERE id_soal=? and is_benar"", (j[0],))
        jawab_benar = cursor.fetchone()
        if jawab_benar[0] == j[1]:
            skor += 1
        # if is_benar[0] == 1:
        #     skor += 1

    print(f""Skor: {skor}"")
    cursor.execute(""UPDATE siswa SET skor=? WHERE id=?"", (skor, id))
    conn.commit()

# %%
hitung_skor(1)

# %%


# %%
conn = sqlite3.connect('uas2.db')
cursor = conn.cursor()
    
print(""Masukkan NIM siswa : "")
nim = input()
cursor.execute(""SELECT id FROM siswa WHERE nim = ?"", (nim,))    
result = cursor.fetchone()
if result:
    id = result[0]
    print(""ID siswa dengan NIM"", nim, ""adalah"", id)
    proses_test(id)
    hitung_skor(id)
else:
    print(""NIM tidak ditemukan"")
conn.close()



"
dx9UyCwE,todo_fileio.py,DrAungWinHtut,Python,Wednesday 25th of June 2025 08:12:32 PM CDT,"# pseudocode
# 0 - exit
# 1 - add todo
# 2 - show todo
# 3 - delete todo
# 4 - update todo
import os  # os.system('dos commands')  // cls//pause//notepad area.txt

todos = []  # global variable

def save_todos():
    fo = open('todos.data','w')
    for todo in todos:
        fo.write(f'{todo}\n')
    fo.close()

def load_todos():
    fi = open('todos.data','r')
    for line in fi:
        todos.append(line.strip())
    fi.close()

def add_todo():
    task = input(""Enter new task: "")
    todos.append(task)
    print(""Added a new task"")


def show_todos():
    i = 1
    for todo in todos:
        print(f""{i} - {todo}"")
        i = i + 1


def delete_todo():
    show_todos()
    index = input(""choose index to delete: "")
    index = int(index) - 1
    del todos[index]
    print(""task deleted"")


def update_todo():
    show_todos()
    index = input(""choose index to delete: "")
    task = input(""enter task to update: "")
    index = int(index) - 1
    todos[index] = task
    print(""task updated"")


ans = -999
load_todos()
while ans != 0:
    os.system(""cls"")
    print(""0 - exit"")
    print(""1 - add todo"")
    print(""2 - show todo"")
    print(""3 - delete todo"")
    print(""4 - update todo"")

    ans = input(""Please choose: 0,1,2,3,4: "")
    ans = int(ans)
    os.system(""cls"")

    if ans == 0:
        print(""you choose to exit, good bye!"")
        exit(0)

    elif ans == 1:
        print(""add todo"")
        add_todo()

    elif ans == 2:
        print(""show todo"")
        show_todos()

    elif ans == 3:
        print(""delete todo"")
        delete_todo()

    elif ans == 4:
        print(""update todo"")
        update_todo()

    else:
        print(""wrong input, pls try again!"")

    save_todos()
    os.system(""pause"")
"
P92vf3EY,2025-06-25_stats.json,rdp_snitch,JSON,Wednesday 25th of June 2025 07:18:15 PM CDT,"{
  ""ip"": {
    ""14.225.202.191"": 11751,
    ""24.173.30.170"": 27192,
    ""91.238.181.91"": 6,
    ""167.94.145.104"": 3,
    ""194.187.178.7"": 3,
    ""211.145.67.138"": 6,
    ""2.57.121.247"": 3,
    ""147.185.132.252"": 9,
    ""68.183.179.179"": 3,
    ""92.63.197.23"": 36,
    ""206.168.34.37"": 3,
    ""185.218.137.161"": 3,
    ""205.210.31.181"": 9,
    ""45.227.254.130"": 9,
    ""193.142.146.227"": 9,
    ""148.72.141.37"": 3,
    ""111.170.152.113"": 9,
    ""146.190.167.180"": 3,
    ""147.185.132.129"": 9,
    ""152.32.202.244"": 3,
    ""165.154.172.108"": 3,
    ""194.165.16.166"": 6,
    ""194.165.16.162"": 6,
    ""47.254.242.72"": 3,
    ""205.210.31.87"": 9
  },
  ""asn"": {
    ""AS135905"": 11751,
    ""AS11427"": 27192,
    ""AS49434"": 6,
    ""AS398705"": 3,
    ""AS208843"": 3,
    ""AS4808"": 6,
    ""AS47890"": 3,
    ""AS396982"": 36,
    ""AS14061"": 6,
    ""AS210848"": 36,
    ""AS398324"": 3,
    ""AS216127"": 3,
    ""AS267784"": 9,
    ""AS213438"": 9,
    ""AS30083"": 3,
    ""AS151185"": 9,
    ""AS135377"": 6,
    ""AS48721"": 12,
    ""AS45102"": 3
  },
  ""isp"": {
    ""Vietnam Posts and Telecommunications Group"": 11751,
    ""Charter Communications Inc"": 27192,
    ""Datacenter location PAR1 France"": 6,
    ""Censys, Inc."": 6,
    ""Alpha Strike Labs GmbH"": 3,
    ""China Unicom Beijing Province Network"": 6,
    ""Unmanaged LTD"": 3,
    ""Google LLC"": 36,
    ""DigitalOcean, LLC"": 6,
    ""Telkom Internet LTD"": 36,
    ""International Hosting Company Limited"": 3,
    ""Flyservers S.A."": 21,
    ""ColocaTel Inc."": 9,
    ""velia.net"": 3,
    ""China Telecom"": 9,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""Alibaba (US) Technology Co., Ltd."": 3
  },
  ""org"": {
    ""VNPT"": 11751,
    ""Spectrum"": 27192,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""Censys, Inc."": 6,
    ""Alpha Strike Labs GmbH"": 3,
    ""Unicom"": 6,
    ""Unmanaged LTD"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""DigitalOcean, LLC"": 6,
    ""Korotkij Denis Aleksandrovich"": 36,
    ""nuxt.cloud hosting provider"": 3,
    ""Xwin Universal LTD"": 9,
    ""ColocaTel Inc"": 9,
    ""velia.net"": 3,
    ""Chinanet HB"": 9,
    ""Ucloud Information Technology"": 6,
    ""Flyservers S.A"": 12,
    ""Alibaba.com LLC"": 3
  },
  ""regionName"": {
    ""Hanoi"": 11751,
    ""Texas"": 27192,
    ""\u00cele-de-France"": 6,
    ""Michigan"": 3,
    ""State of Berlin"": 3,
    ""Beijing"": 6,
    ""England"": 3,
    ""California"": 42,
    ""South West"": 3,
    ""North Holland"": 45,
    ""Illinois"": 3,
    ""Hesse"": 3,
    ""Vilnius"": 9,
    ""Missouri"": 3,
    ""Hubei"": 9,
    ""Tokyo"": 3,
    ""Kaunas"": 12,
    ""Kuala Lumpur"": 3
  },
  ""country"": {
    ""Vietnam"": 11751,
    ""United States"": 27243,
    ""France"": 6,
    ""Germany"": 6,
    ""China"": 15,
    ""United Kingdom"": 3,
    ""Singapore"": 3,
    ""The Netherlands"": 45,
    ""Lithuania"": 21,
    ""Japan"": 3,
    ""Malaysia"": 3
  },
  ""account"": {
    ""hello"": 38970,
    ""Test"": 18,
    ""(empty)"": 6,
    ""user"": 3,
    ""Administr"": 39,
    ""zENHYVXDl"": 3,
    ""YhDiFt"": 3,
    ""nyPSjX"": 3,
    ""awYThsPYG"": 3,
    ""sajKMg"": 3,
    ""FSUxSy"": 3,
    ""Domain"": 18,
    ""TJoELRdOc"": 3,
    ""ulMBbw"": 3,
    ""JjdMIr"": 3,
    ""Administrator"": 6,
    ""Almaz"": 3,
    ""qkRaQQPRj"": 3,
    ""ERuDEd"": 3,
    ""UwQRTT"": 3
  },
  ""keyboard"": {
    ""Unknown"": 39099
  },
  ""client_build"": {
    ""Unknown"": 39099
  },
  ""client_name"": {
    ""Unknown"": 39099
  },
  ""ip_type"": {
    ""Unknown"": 39039,
    ""hosting"": 60
  }
}"
uYyHLZqZ,2025-06-25_stats.json,rdp_snitch,JSON,Wednesday 25th of June 2025 07:16:13 PM CDT,"{
  ""ip"": {
    ""14.225.202.191"": 7834,
    ""24.173.30.170"": 18128,
    ""91.238.181.91"": 4,
    ""167.94.145.104"": 2,
    ""194.187.178.7"": 2,
    ""211.145.67.138"": 4,
    ""2.57.121.247"": 2,
    ""147.185.132.252"": 6,
    ""68.183.179.179"": 2,
    ""92.63.197.23"": 24,
    ""206.168.34.37"": 2,
    ""185.218.137.161"": 2,
    ""205.210.31.181"": 6,
    ""45.227.254.130"": 6,
    ""193.142.146.227"": 6,
    ""148.72.141.37"": 2,
    ""111.170.152.113"": 6,
    ""146.190.167.180"": 2,
    ""147.185.132.129"": 6,
    ""152.32.202.244"": 2,
    ""165.154.172.108"": 2,
    ""194.165.16.166"": 4,
    ""194.165.16.162"": 4,
    ""47.254.242.72"": 2,
    ""205.210.31.87"": 6
  },
  ""asn"": {
    ""AS135905"": 7834,
    ""AS11427"": 18128,
    ""AS49434"": 4,
    ""AS398705"": 2,
    ""AS208843"": 2,
    ""AS4808"": 4,
    ""AS47890"": 2,
    ""AS396982"": 24,
    ""AS14061"": 4,
    ""AS210848"": 24,
    ""AS398324"": 2,
    ""AS216127"": 2,
    ""AS267784"": 6,
    ""AS213438"": 6,
    ""AS30083"": 2,
    ""AS151185"": 6,
    ""AS135377"": 4,
    ""AS48721"": 8,
    ""AS45102"": 2
  },
  ""isp"": {
    ""Vietnam Posts and Telecommunications Group"": 7834,
    ""Charter Communications Inc"": 18128,
    ""Datacenter location PAR1 France"": 4,
    ""Censys, Inc."": 4,
    ""Alpha Strike Labs GmbH"": 2,
    ""China Unicom Beijing Province Network"": 4,
    ""Unmanaged LTD"": 2,
    ""Google LLC"": 24,
    ""DigitalOcean, LLC"": 4,
    ""Telkom Internet LTD"": 24,
    ""International Hosting Company Limited"": 2,
    ""Flyservers S.A."": 14,
    ""ColocaTel Inc."": 6,
    ""velia.net"": 2,
    ""China Telecom"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 4,
    ""Alibaba (US) Technology Co., Ltd."": 2
  },
  ""org"": {
    ""VNPT"": 7834,
    ""Spectrum"": 18128,
    ""ThinkTech Technology Industrial CO. Limited"": 4,
    ""Censys, Inc."": 4,
    ""Alpha Strike Labs GmbH"": 2,
    ""Unicom"": 4,
    ""Unmanaged LTD"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""DigitalOcean, LLC"": 4,
    ""Korotkij Denis Aleksandrovich"": 24,
    ""nuxt.cloud hosting provider"": 2,
    ""Xwin Universal LTD"": 6,
    ""ColocaTel Inc"": 6,
    ""velia.net"": 2,
    ""Chinanet HB"": 6,
    ""Ucloud Information Technology"": 4,
    ""Flyservers S.A"": 8,
    ""Alibaba.com LLC"": 2
  },
  ""regionName"": {
    ""Hanoi"": 7834,
    ""Texas"": 18128,
    ""\u00cele-de-France"": 4,
    ""Michigan"": 2,
    ""State of Berlin"": 2,
    ""Beijing"": 4,
    ""England"": 2,
    ""California"": 28,
    ""South West"": 2,
    ""North Holland"": 30,
    ""Illinois"": 2,
    ""Hesse"": 2,
    ""Vilnius"": 6,
    ""Missouri"": 2,
    ""Hubei"": 6,
    ""Tokyo"": 2,
    ""Kaunas"": 8,
    ""Kuala Lumpur"": 2
  },
  ""country"": {
    ""Vietnam"": 7834,
    ""United States"": 18162,
    ""France"": 4,
    ""Germany"": 4,
    ""China"": 10,
    ""United Kingdom"": 2,
    ""Singapore"": 2,
    ""The Netherlands"": 30,
    ""Lithuania"": 14,
    ""Japan"": 2,
    ""Malaysia"": 2
  },
  ""account"": {
    ""hello"": 25980,
    ""Test"": 12,
    ""(empty)"": 4,
    ""user"": 2,
    ""Administr"": 26,
    ""zENHYVXDl"": 2,
    ""YhDiFt"": 2,
    ""nyPSjX"": 2,
    ""awYThsPYG"": 2,
    ""sajKMg"": 2,
    ""FSUxSy"": 2,
    ""Domain"": 12,
    ""TJoELRdOc"": 2,
    ""ulMBbw"": 2,
    ""JjdMIr"": 2,
    ""Administrator"": 4,
    ""Almaz"": 2,
    ""qkRaQQPRj"": 2,
    ""ERuDEd"": 2,
    ""UwQRTT"": 2
  },
  ""keyboard"": {
    ""Unknown"": 26066
  },
  ""client_build"": {
    ""Unknown"": 26066
  },
  ""client_name"": {
    ""Unknown"": 26066
  },
  ""ip_type"": {
    ""Unknown"": 26026,
    ""hosting"": 40
  }
}"
jhRdGQPZ,2025-06-25_stats.json,rdp_snitch,JSON,Wednesday 25th of June 2025 07:15:11 PM CDT,"{
  ""ip"": {
    ""14.225.202.191"": 3917,
    ""24.173.30.170"": 9064,
    ""91.238.181.91"": 2,
    ""167.94.145.104"": 1,
    ""194.187.178.7"": 1,
    ""211.145.67.138"": 2,
    ""2.57.121.247"": 1,
    ""147.185.132.252"": 3,
    ""68.183.179.179"": 1,
    ""92.63.197.23"": 12,
    ""206.168.34.37"": 1,
    ""185.218.137.161"": 1,
    ""205.210.31.181"": 3,
    ""45.227.254.130"": 3,
    ""193.142.146.227"": 3,
    ""148.72.141.37"": 1,
    ""111.170.152.113"": 3,
    ""146.190.167.180"": 1,
    ""147.185.132.129"": 3,
    ""152.32.202.244"": 1,
    ""165.154.172.108"": 1,
    ""194.165.16.166"": 2,
    ""194.165.16.162"": 2,
    ""47.254.242.72"": 1,
    ""205.210.31.87"": 3
  },
  ""asn"": {
    ""AS135905"": 3917,
    ""AS11427"": 9064,
    ""AS49434"": 2,
    ""AS398705"": 1,
    ""AS208843"": 1,
    ""AS4808"": 2,
    ""AS47890"": 1,
    ""AS396982"": 12,
    ""AS14061"": 2,
    ""AS210848"": 12,
    ""AS398324"": 1,
    ""AS216127"": 1,
    ""AS267784"": 3,
    ""AS213438"": 3,
    ""AS30083"": 1,
    ""AS151185"": 3,
    ""AS135377"": 2,
    ""AS48721"": 4,
    ""AS45102"": 1
  },
  ""isp"": {
    ""Vietnam Posts and Telecommunications Group"": 3917,
    ""Charter Communications Inc"": 9064,
    ""Datacenter location PAR1 France"": 2,
    ""Censys, Inc."": 2,
    ""Alpha Strike Labs GmbH"": 1,
    ""China Unicom Beijing Province Network"": 2,
    ""Unmanaged LTD"": 1,
    ""Google LLC"": 12,
    ""DigitalOcean, LLC"": 2,
    ""Telkom Internet LTD"": 12,
    ""International Hosting Company Limited"": 1,
    ""Flyservers S.A."": 7,
    ""ColocaTel Inc."": 3,
    ""velia.net"": 1,
    ""China Telecom"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Alibaba (US) Technology Co., Ltd."": 1
  },
  ""org"": {
    ""VNPT"": 3917,
    ""Spectrum"": 9064,
    ""ThinkTech Technology Industrial CO. Limited"": 2,
    ""Censys, Inc."": 2,
    ""Alpha Strike Labs GmbH"": 1,
    ""Unicom"": 2,
    ""Unmanaged LTD"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""DigitalOcean, LLC"": 2,
    ""Korotkij Denis Aleksandrovich"": 12,
    ""nuxt.cloud hosting provider"": 1,
    ""Xwin Universal LTD"": 3,
    ""ColocaTel Inc"": 3,
    ""velia.net"": 1,
    ""Chinanet HB"": 3,
    ""Ucloud Information Technology"": 2,
    ""Flyservers S.A"": 4,
    ""Alibaba.com LLC"": 1
  },
  ""regionName"": {
    ""Hanoi"": 3917,
    ""Texas"": 9064,
    ""\u00cele-de-France"": 2,
    ""Michigan"": 1,
    ""State of Berlin"": 1,
    ""Beijing"": 2,
    ""England"": 1,
    ""California"": 14,
    ""South West"": 1,
    ""North Holland"": 15,
    ""Illinois"": 1,
    ""Hesse"": 1,
    ""Vilnius"": 3,
    ""Missouri"": 1,
    ""Hubei"": 3,
    ""Tokyo"": 1,
    ""Kaunas"": 4,
    ""Kuala Lumpur"": 1
  },
  ""country"": {
    ""Vietnam"": 3917,
    ""United States"": 9081,
    ""France"": 2,
    ""Germany"": 2,
    ""China"": 5,
    ""United Kingdom"": 1,
    ""Singapore"": 1,
    ""The Netherlands"": 15,
    ""Lithuania"": 7,
    ""Japan"": 1,
    ""Malaysia"": 1
  },
  ""account"": {
    ""hello"": 12990,
    ""Test"": 6,
    ""(empty)"": 2,
    ""user"": 1,
    ""Administr"": 13,
    ""zENHYVXDl"": 1,
    ""YhDiFt"": 1,
    ""nyPSjX"": 1,
    ""awYThsPYG"": 1,
    ""sajKMg"": 1,
    ""FSUxSy"": 1,
    ""Domain"": 6,
    ""TJoELRdOc"": 1,
    ""ulMBbw"": 1,
    ""JjdMIr"": 1,
    ""Administrator"": 2,
    ""Almaz"": 1,
    ""qkRaQQPRj"": 1,
    ""ERuDEd"": 1,
    ""UwQRTT"": 1
  },
  ""keyboard"": {
    ""Unknown"": 13033
  },
  ""client_build"": {
    ""Unknown"": 13033
  },
  ""client_name"": {
    ""Unknown"": 13033
  },
  ""ip_type"": {
    ""Unknown"": 13013,
    ""hosting"": 20
  }
}"
VbwKBTCe,Untitled,dmitryEfremov,C#,Wednesday 25th of June 2025 04:01:12 PM CDT,"using System;

namespace ConsoleApp1
{
    internal class Program
    {
        static void Main(string[] args)
        {
            //1
            Console.WriteLine(1);
            var person = new Person(""Дима"", ""Ефремов"", 22);
            var p1 = person;
            var p2 = person;
            Console.WriteLine(p1);
            Console.WriteLine(p2);
            Mhetod(p1);
            Console.WriteLine(p1);
            Console.WriteLine(p2);
            Mhetod2(ref p1);
            Console.WriteLine(p1);
            Console.WriteLine(p2);
            //2
            Console.WriteLine(2);
            Mhetod3(out Person person3);
            Console.WriteLine(person3);
            //3-

            //4
            Console.WriteLine(4);
            Mhetod5(1, 2);
            Mhetod5(1, 2, 3, 4);
            Mhetod5(1, 2, d: 10);
            Mhetod5(1, 2, d: 10, c: 15);

            //6
            Console.WriteLine(6);
            string userType = UserType.Friend.ToString();
            Console.WriteLine(userType);
            Console.WriteLine((byte)Mhetod6(userType));

            //8
            Console.WriteLine(8);
            UserType userTypes = UserType.Friend | UserType.Admin | UserType.Owner;

            //9
            Console.WriteLine(9);
            Mhetod9(userTypes, UserType.Annonim);
            //10
            Console.WriteLine(10);
            var personn = new Personn(""a"", ""b"", 15, null);
            Personn a = personn;
            Personn b = personn;
            Console.WriteLine(a);
            Console.WriteLine(b);
            a.Age = 10;
            Console.WriteLine(a);
            Console.WriteLine(b);
            //11
            Console.WriteLine(11);
            Mhetod11(a);
            Console.WriteLine(a);
            //12
            var person12 = new Personn(""a"", ""b"", 15, new Person(""Dima"", ""Drim3"", 10));
            Console.WriteLine(12);
            var pDeepCopy = person12.DeepCopy();
            Console.WriteLine(pDeepCopy);
            var pCopy = person12.Copy();
            Console.WriteLine(pCopy);

            person12.Person.Age = 15;
            Console.WriteLine(""deep:"" + pDeepCopy);
            Console.WriteLine(""copy"" + pCopy);
        }
        //1
        static void Mhetod(Person person)
        {
            person.FirstName = ""1"";
        }
        //1
        static void Mhetod2(ref Person person)
        {
            person = new Person(""2"", person.LastName, person.Age);
        }
        //2
        static void Mhetod3(out Person person)
        {
            person = new Person(""Данил"", ""Данилов"", 15);
        }
        //4
        static void Mhetod5(int a, int b, int c = 5, int d = 6)
        {
            Console.WriteLine($""{a} {b} {c} {d}"");
        }
        //6
        static UserType Mhetod6(string userType)
        {
            return (UserType)Enum.Parse(typeof(UserType), userType);
        }

        //9
        static void Mhetod9(UserType userType, UserType check)
        {
            Console.WriteLine($""{check}? {(userType | check) == check}"");
        }
        //11
        static void Mhetod11(Personn personn)
        {
            personn.Age = 10111;
        }

    }
    //7
    [Flags]
    //5
    public enum UserType : byte
    {
        Owner = 1,
        Admin = 2,
        Friend = 3,
        Annonim = 4,
    }

    public class Person
    {
        public string FirstName;
        public string LastName;
        public int Age;

        public Person(string firstName, string lastName, int age)
        {
            FirstName = firstName;
            LastName = lastName;
            Age = age;
        }

        public override string ToString()
        {
            return ""FirstName:"" + FirstName + ""\n"" +
                ""LastName:"" + LastName + ""\n"" +
                ""Age:"" + Age + ""\n"";
        }
    }


    public struct Personn
    {
        public string FirstName;
        public string LastName;
        public int Age;
        public Person Person;

        public Personn(string firstName, string lastName, int age, Person person)
        {
            FirstName = firstName;
            LastName = lastName;
            Age = age;
            Person = person;
        }

        public Personn Copy()
        {
            return (Personn)this.MemberwiseClone();
        }
        public Personn DeepCopy()
        {
            Person newPerson = new Person(Person.FirstName, Person.LastName, Person.Age);
            return new Personn(FirstName, LastName, Age, newPerson);
        }

        public override string ToString()
        {
            return ""FirstName:"" + FirstName + ""\n"" +
                ""LastName:"" + LastName + ""\n"" +
                ""Age:"" + Age + ""\n"" +
                ""Person"" + Person + ""\n"";
        }
    }
}
"
mR93i09Q,Untitled,swaggboi,Bash,Wednesday 25th of June 2025 03:30:31 PM CDT,"root:/usr/pkg/sbin:162# certbot-3.13 --apache renew
Saving debug log to /var/letsencrypt/log/letsencrypt.log

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Processing /usr/pkg/etc/letsencrypt/renewal/library.netbsd.club.conf
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Failed to renew certificate library.netbsd.club with error: The apache plugin is not working; there may be problems with your existing configuration.
The error was: NoInstallationError('Could not find configuration root')

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Processing /usr/pkg/etc/letsencrypt/renewal/netbsd.club.conf
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Certificate not yet due for renewal

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Processing /usr/pkg/etc/letsencrypt/renewal/netman.netbsd.club.conf
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Failed to renew certificate netman.netbsd.club with error: The apache plugin is not working; there may be problems with your existing configuration.
The error was: NoInstallationError('Could not find configuration root')

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
The following certificates are not due for renewal yet:
  /usr/pkg/etc/letsencrypt/live/netbsd.club/fullchain.pem expires on 2025-09-23 (skipped)
All renewals failed. The following certificates could not be renewed:
  /usr/pkg/etc/letsencrypt/live/library.netbsd.club/fullchain.pem (failure)
  /usr/pkg/etc/letsencrypt/live/netman.netbsd.club/fullchain.pem (failure)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
2 renew failure(s), 0 parse failure(s)
Ask for help or search for solutions at https://community.letsencrypt.org. See the logfile /var/letsencrypt/log/letsencrypt.log or re-run Certbot with -v for more details."
vYF12nMJ,Parkour System --Crouching and Vaulting,Tornado681041,Lua,Wednesday 25th of June 2025 02:35:11 PM CDT,"--|| Services ||--
local Workspace = game:GetService(""Workspace"")

local Players = game:GetService(""Players"")
local UserInputService = game:GetService(""UserInputService"")
local RunService = game:GetService(""RunService"")
local TweenService = game:GetService(""TweenService"")
local Debris = game:GetService(""Debris"")

--|| Directories ||--
local Player = Players.LocalPlayer :: Player
local Character = script.Parent :: Model
local Humanoid = Character:WaitForChild(""Humanoid"") :: Humanoid
local Root = Character:WaitForChild(""HumanoidRootPart"")
local Head = Character:WaitForChild(""Head"")

local CurrentCamera = Workspace.CurrentCamera

local AnimationFolder = script.Animations
local Actions = script.Actions

--|| Types ||--
type RaycastProps = {--ensures raycast parameters are fully passed through 
	origin: Vector3, 
	dir: Vector3,
	
	whitelist: table?,
	blacklist: table?,
	
	visualizer: boolean?,
	visDuration: boolean?
}

--|| Tables ||--
local Settings = {--Values for this script that I can easily edit here
	OriginalFOV = CurrentCamera.FieldOfView, 
	
	WalkSpeed = Humanoid.WalkSpeed,
	JumpHeight = Humanoid.JumpHeight,
	
	Raycast = {
		Transparency = 0.75,
		Color = Color3.fromRGB(0, 255, 72),
		Size = Vector3.new(1,1,1),
		
		Duration = 5,
	},
	Crouch = {
		FailCases = {""Crouch"", ""Moving""},
		
		Speed = 12, 
		FOVChange = 10,
		FOVDuration = 0.5,
		Animation = ""Crouch_Idle"",
	},
	Vault = {
		FailCases = {""Vault"", ""Standing""},
		
		Animation1 = ""Vault_1"",
		Animation2 = ""Vault_2"",
		
		RaycastDistance = 2,
		TimeoutHeight = 10,
	}
}

local InputTable = {--Easy way to find the skills without redundant if-statements
	[Enum.KeyCode.C] = ""Crouch"",
}

local AnimationTable = {}--Holds and preloads animations when they're called, makes access easier
for _,anim : Animation in pairs(AnimationFolder:GetChildren()) do
	AnimationTable[anim.Name] = Humanoid:LoadAnimation(anim)
end

--|| Variables ||--
local OnGround = false
local Moving = false

local Animation_Warning = ""Animation Not Found!""
local Raycast_Warning = ""Raycast Properties Insufficient!""

--|| Local Functions ||--
local function traceDistance(origin : Vector3, destination : Vector3, duration : number)
	local initCFrame = CFrame.new(origin, destination)--has boxes point in the direction of the destination

	for x = 0, (origin - destination).Magnitude, 2--[[Incriment]] do
		local box = Instance.new(""BoxHandleAdornment"") --low maintinence parts, since we don't need any physics
		box.CFrame = initCFrame * CFrame.new(0,0,-x) --incriments CFrame position now that it's facing the destination
		box.Adornee = Workspace.Terrain
		box.Size = Settings.Raycast.Size

		box.Transparency = Settings.Raycast.Transparency
		box.Color3 = Settings.Raycast.Color

		box.Parent = Workspace.Terrain
		Debris:AddItem(box, (duration or Settings.Raycast.Duration))
	end
end

local function raycast(args : RaycastProps) : Ray? 
	if not args then warn(Raycast_Warning) return end  --having a custom type saves me line space from having to individually check if each neccecary value is present
	
	local params = RaycastParams.new()
	params.FilterType = Enum.RaycastFilterType.Exclude
	params.FilterDescendantsInstances = { Character }

	if args.whitelist then
		params.FilterType = Enum.RaycastFilterType.Exclude
		params.FilterDescendantsInstances = args.whitelist
	elseif args.blacklist then 
		params.FilterType = Enum.RaycastFilterType.Include
		params.FilterDescendantsInstances = args.blacklist
	end
	
	local rayResult = workspace:Raycast(args.origin, args.dir, params)
	
	if args.visualizer then --creates a visualization of the raycast for testing purposes
		traceDistance(args.origin, (rayResult and rayResult.Position) or (args.origin + args.dir), args.visDuration)
	end
		
	return rayResult
end

local function createFOVTween(duration : number?, finalFOV : number?) : Tween
	return TweenService:Create(
		CurrentCamera, 
		TweenInfo.new(duration or 0), --Instant tween, (no duration = action had no FOV value)
		{FieldOfView = finalFOV or Settings.OriginalFOV} --FOV set to default if no finalFOV is passed for neatness
	)
end

local function checkFailCases(newAction : string) : boolean
	local failCases = Settings[newAction] and Settings[newAction].FailCases --Fail Cases are the actions that must not be running for you to use your next action
	if not failCases then return true end --No fail cases = action always can be used
	
	for _,case : string in pairs(failCases) do 
		if Actions:FindFirstChild(case) then
			return false
		end
	end
	return true
end

local function destroyAction(action : string) --saves time from redundancy
	while Actions:FindFirstChild(action) do --Loops through all actions under the folder in case there were multiples somehow
		Actions[action]:Destroy() 
	end
end

local function createAction(action : string, value : string?)
	if Actions:FindFirstChild(action) then return end
	
	local ActionInstance = Instance.new(""StringValue"") --Instance based actions because I like using the .childremoved and .added functions
	ActionInstance.Name = action
	ActionInstance.Value = value or """"
	ActionInstance.Parent = Actions
end

local function stopAnims()
	for _,anim : AnimationTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
		anim:Stop()
	end
end

local function playAnim(animName : string?) : AnimationTrack
	if not animName then return end
	
	local anim : AnimationTrack = AnimationTable[animName]
	if not anim then warn(Animation_Warning) return end
	
	if not anim.IsPlaying then --Makes sure anims don't play twice
		stopAnims() --Stops other animations from playing so it doesn't look clunky
		anim:Play()
	end
	
	return anim
end

--|| Functions ||--
function Vault()
	local rayParameters = {
		origin = Root.Position + Vector3.new(0,-0.5,0), --Minimum vault height
		dir = Root.CFrame.LookVector * Settings.Vault.RaycastDistance,
	}
	local rayResult = raycast(rayParameters)
	if not rayResult then return end
	
	for x = 0, Settings.Vault.TimeoutHeight, .5 do --finds the height of what we will be vaulting
		local newRayResult = raycast({
			origin = rayParameters.origin + Vector3.new(0,x,0),
			dir = rayParameters.dir,
		})
		if newRayResult then
			rayResult = newRayResult
		else 
			break
		end
	end
	traceDistance(rayParameters.origin, rayResult.Position) --visualizer to make sure the raycast is accurate
	if (rayResult.Position - rayParameters.origin).Magnitude > 5 then return end --needed to find maximum vault height so you don't vault super high walls
	
	local randAnim = playAnim(Settings.Vault[`Animation{math.random(1,2)}`])
	
	createAction(""Vault"")
	Humanoid:ChangeState(Enum.HumanoidStateType.Jumping) --this is the vault action, since the player is already moving forward they just need to go up
	
	randAnim.Stopped:Once(function() --two events to end the vault action 
		destroyAction(""Vault"")
	end)
	
	local connection; connection = Humanoid.StateChanged:Connect(function(oldState, newState)
		if newState == Enum.HumanoidStateType.Landed then --need to check if you land before animation ends
			connection:Disconnect()
			destroyAction(""Vault"")
		end
	end)
end

--|| Connections ||--
RunService.Heartbeat:Connect(function()		
	local WalkSpeed = Settings.WalkSpeed
	local JumpHeight = Settings.JumpHeight
	local Animation = nil --could play an animation at the end of each frame, this is why we need the .IsPlaying 
	
	local Crouch = Actions:FindFirstChild(""Crouch"") --helpful in the future
	local Vaulting = Actions:FindFirstChild(""Vault"")
	
	OnGround = (Humanoid.FloorMaterial ~= Enum.Material.Air)
	Moving = (Humanoid.MoveDirection.Magnitude > 0)
	
	if Moving then
		destroyAction(""Standing"") --these functions needed, because it would be super redundant
		createAction(""Moving"")
	else 
		destroyAction(""Moving"")
		createAction(""Standing"")
	end
	
	if Crouch then
		if Moving then
			destroyAction(""Crouch"")
		else 
			WalkSpeed = Settings.Crouch.Speed
			JumpHeight = 0
			
			Animation = Settings.Crouch.Animation --crouch anim plays here, but won't play if alr running cuz playAnim function is smart
		end
	end
	
	if checkFailCases(""Vault"") then
		Vault()
	end
	
	Humanoid.WalkSpeed = WalkSpeed --allows me to have priority in the future and not need to change the walkspeed every time in this loop.
	Humanoid.JumpHeight = JumpHeight
	
	playAnim(Animation) --if animation is nil, won't play anything. Convienent
end)

Actions.ChildAdded:Connect(function(child)
	local Action = child.Name

	local ActionSettings = Settings[Action]
	if not ActionSettings then return end
	--Tweens for each new action, currently only applies to crouching
	createFOVTween(ActionSettings.FOVDuration, Settings.OriginalFOV-(ActionSettings.FOVChange or 0)):Play()
end)

Actions.ChildRemoved:Connect(function(child)
	local Action = child.Name
	
	local ActionSettings = Settings[Action]
	if not ActionSettings then return end
	--Tweens for each new action, currently only applies to crouching
	stopAnims()
	createFOVTween(ActionSettings.FOVDuration):Play()
end)

UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
	if gameProcessedEvent then return end --can't type
	
	local KeyEvaluation = InputTable[input.KeyCode] --matches keybind to action
	if not KeyEvaluation then return end
	
	local ActionSettings = Settings[KeyEvaluation] --find setting for action
	if not checkFailCases(KeyEvaluation) then return end --makes sure action can be used
	
	createAction(KeyEvaluation) --coded this in an ambiguous way to reduce if statements
end)

UserInputService.InputEnded:Connect(function(input, gameProcessedEvent)
	if gameProcessedEvent then return end
	
	local KeyEvaluation = InputTable[input.KeyCode]
	if not KeyEvaluation then return end
	
	local ActionSettings = Settings[KeyEvaluation]
	if not ActionSettings then return end
	
	destroyAction(KeyEvaluation) --not needed to check for fail cases because action ends here
end)"
SDVNrrRA,EvoMex tweakdefs,Deathkebab,Lua,Wednesday 25th of June 2025 02:20:45 PM CDT,"-- EvoMexes tweakdefs
local t1Mex = {""armmex"", ""cormex"", ""legmex""}
local t2Mex = {""armmoho"", ""cormoho"", ""legmoho""}
local t2MexNaval = {""coruwmme"",""armuwmme""}
local specialMex = {""armamex"", ""cormexp"", ""corexp"", ""legmext15""}
local baseT1Mex = ""cormex""
local baseT2Mex = ""armmoho""
local baseT2MexNaval = ""coruwmme""

function contains(list, element)
    for _, value in ipairs(list) do
        if value == element then
            return true
        end
    end
    return false
end

for name, ud in pairs(UnitDefs) do
    if ud.builder and ud.buildoptions then
        for i, option in ipairs(ud.buildoptions) do
            if contains(t1Mex, option) then
                ud.buildoptions[i] = baseT1Mex
            elseif contains(t2Mex, option) then
                ud.buildoptions[i] = baseT2Mex
            elseif contains(t2MexNaval, option) then
                ud.buildoptions[i] = baseT2MexNaval
            elseif contains(specialMex, option) then
                ud.buildoptions[i] = nil
            end
        end
    end
end

!bset tweakdefs LS0gRXZvTWV4ZXMgdHdlYWtkZWZzCmxvY2FsIHQxTWV4ID0geyJhcm1tZXgiLCAiY29ybWV4IiwgImxlZ21leCJ9CmxvY2FsIHQyTWV4ID0geyJhcm1tb2hvIiwgImNvcm1vaG8iLCAibGVnbW9obyJ9CmxvY2FsIHQyTWV4TmF2YWwgPSB7ImNvcnV3bW1lIiwiYXJtdXdtbWUifQpsb2NhbCBzcGVjaWFsTWV4ID0geyJhcm1hbWV4IiwgImNvcm1leHAiLCAiY29yZXhwIiwgImxlZ21leHQxNSJ9CmxvY2FsIGJhc2VUMU1leCA9ICJjb3JtZXgiCmxvY2FsIGJhc2VUMk1leCA9ICJhcm1tb2hvIgpsb2NhbCBiYXNlVDJNZXhOYXZhbCA9ICJjb3J1d21tZSIKCmZ1bmN0aW9uIGNvbnRhaW5zKGxpc3QsIGVsZW1lbnQpCiAgICBmb3IgXywgdmFsdWUgaW4gaXBhaXJzKGxpc3QpIGRvCiAgICAgICAgaWYgdmFsdWUgPT0gZWxlbWVudCB0aGVuCiAgICAgICAgICAgIHJldHVybiB0cnVlCiAgICAgICAgZW5kCiAgICBlbmQKICAgIHJldHVybiBmYWxzZQplbmQKCmZvciBuYW1lLCB1ZCBpbiBwYWlycyhVbml0RGVmcykgZG8KICAgIGlmIHVkLmJ1aWxkZXIgYW5kIHVkLmJ1aWxkb3B0aW9ucyB0aGVuCiAgICAgICAgZm9yIGksIG9wdGlvbiBpbiBpcGFpcnModWQuYnVpbGRvcHRpb25zKSBkbwogICAgICAgICAgICBpZiBjb250YWlucyh0MU1leCwgb3B0aW9uKSB0aGVuCiAgICAgICAgICAgICAgICB1ZC5idWlsZG9wdGlvbnNbaV0gPSBiYXNlVDFNZXgKICAgICAgICAgICAgZWxzZWlmIGNvbnRhaW5zKHQyTWV4LCBvcHRpb24pIHRoZW4KICAgICAgICAgICAgICAgIHVkLmJ1aWxkb3B0aW9uc1tpXSA9IGJhc2VUMk1leAogICAgICAgICAgICBlbHNlaWYgY29udGFpbnModDJNZXhOYXZhbCwgb3B0aW9uKSB0aGVuCiAgICAgICAgICAgICAgICB1ZC5idWlsZG9wdGlvbnNbaV0gPSBiYXNlVDJNZXhOYXZhbAogICAgICAgICAgICBlbHNlaWYgY29udGFpbnMoc3BlY2lhbE1leCwgb3B0aW9uKSB0aGVuCiAgICAgICAgICAgICAgICB1ZC5idWlsZG9wdGlvbnNbaV0gPSBuaWwKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCg==
"
Sa70DHgC,Number_without_3_and_6,zyulfi,Python,Wednesday 25th of June 2025 01:54:35 PM CDT,"curr_num = input(""Please enter a integer: "")
new_num = """"

while True:
    if curr_num.isdigit():
        for element in curr_num:
            if element == ""3"" or element == ""6"":
                continue
            else:
                new_num += element
        break
    else:
        curr_num = input(""You must enter a integer: "")

print(new_num)"
mZYFfa69,ViGGO,NewBestPastebins,JavaScript,Wednesday 25th of June 2025 01:34:08 PM CDT,"// ==UserScript==
// @name         ViGGO Sletter - Endelige Version 2
// @namespace    http://tampermonkey.net/
// @version      2025-06-26
// @description  Sletter overflødige ViGGO beskeder lynhurtigt!
// @author       Oliver AAE 24-25
// @match        https://aae.viggo.dk/Basic*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=viggo.dk
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    const addStyles = () => {
        const style = document.createElement('style');
        style.textContent = `
            .trash-icon {
                position: absolute;
                top: 8px;
                right: 8px;
                width: 18px;
                height: 18px;
                background-color: #f44336;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                color: white;
                font-size: 10px;
                font-weight: bold;
                z-index: 10;
                box-shadow: 0 0 3px rgba(0,0,0,0.5);
            }

            .trash-icon::after {
                content: ""🗑️"";
            }

            .help-popup {
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                width: 90%;
                max-width: 600px;
                max-height: 90vh;
                background: #1a1a1a;
                color: #f1f1f1;
                padding: 25px;
                border-radius: 15px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.5);
                z-index: 10001;
                overflow-y: auto;
                font-family: 'Arial', sans-serif;
                display: none;
            }

            .help-overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.7);
                backdrop-filter: blur(5px);
                z-index: 10000;
                display: none;
            }

            .help-popup h2 {
                color: #007BFF;
                margin-top: 0;
                border-bottom: 1px solid #333;
                padding-bottom: 10px;
            }

            .help-popup ol {
                text-align: left;
                padding-left: 20px;
            }

            .help-popup li {
                margin-bottom: 15px;
                line-height: 1.5;
            }

            .close-help {
                position: absolute;
                top: 15px;
                right: 15px;
                background: #555;
                border: none;
                color: white;
                width: 30px;
                height: 30px;
                border-radius: 50%;
                cursor: pointer;
                font-size: 18px;
            }
        `;
        document.head.appendChild(style);
    };

    (() => {
        addStyles();

        let lastFolderId = null;
        let markedForDeletion = new Set();

        const monitorFolderChange = () => {
            setInterval(() => {
                const urlParams = new URLSearchParams(window.location.search);
                const currentFolderId = urlParams.get('folder');

                if (currentFolderId !== lastFolderId) {
                    lastFolderId = currentFolderId;
                    markedForDeletion.clear();

                    const notificationBanner = document.getElementById('viggo-folder-notification');
                    if (notificationBanner) notificationBanner.remove();

                    if (currentFolderId === '0') {
                        const banner = document.createElement('div');
                        banner.id = 'viggo-folder-notification';
                        banner.textContent = '📨 Du er nu i ""Sendt post"" mappen!';
                        banner.style.position = 'fixed';
                        banner.style.top = '0';
                        banner.style.left = '0';
                        banner.style.width = '100%';
                        banner.style.padding = '12px';
                        banner.style.backgroundColor = '#ff9800';
                        banner.style.color = 'black';
                        banner.style.textAlign = 'center';
                        banner.style.zIndex = '9999';
                        banner.style.fontWeight = 'bold';
                        banner.style.fontSize = '16px';
                        banner.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.3)';
                        document.body.appendChild(banner);
                    }
                }
            }, 1000);
        };

 let cancelRequested = false;

        const styleButton = (button, bgColor) => {
            button.style.padding = '12px 18px';
            button.style.width = '100%';
            button.style.backgroundColor = bgColor;
            button.style.border = 'none';
            button.style.color = 'white';
            button.style.borderRadius = '10px';
            button.style.cursor = 'pointer';
            button.style.fontSize = '16px';
            button.style.transition = 'background-color 0.3s ease-in-out';
            button.style.marginBottom = '10px';
        };

        const styleInput = (input) => {
            input.style.width = '100%';
            input.style.padding = '10px';
            input.style.marginBottom = '15px';
            input.style.borderRadius = '10px';
            input.style.border = '1px solid #333';
            input.style.backgroundColor = '#2b2b2b';
            input.style.color = '#f1f1f1';
            input.style.fontSize = '16px';
        };

        const extractMessageIds = () => {
            const isSentFolder = window.location.pathname.includes(""/Folder/0"");
            markedForDeletion.clear();

            if (isSentFolder) {
                const messageList = document.querySelector(""ul.list-messages"");
                if (!messageList) return [];

                const checkboxes = messageList.querySelectorAll('input[type=""checkbox""][name=""MessageId""]');
                return Array.from(checkboxes)
                    .map(cb => cb.value)
                    .filter(id => /^\d{5,6}$/.test(id)); // Accept 5 or 6 digit IDs
            } else {
                const messageElements = document.querySelectorAll('li[data-drag-id]');
                return Array.from(messageElements)
                    .map(el => el.getAttribute('data-drag-id'))
                    .filter(id => /^\d{5,6}$/.test(id));
            }
        };

        const markMessagesForDeletion = (idsToDelete) => {
            // Remove existing trash icons
            document.querySelectorAll('.trash-icon').forEach(icon => icon.remove());

            if (window.location.pathname.includes(""/Folder/0"")) {
                // Sent messages
                idsToDelete.forEach(id => {
                    const checkbox = document.querySelector(`input[type=""checkbox""][value=""${id}""]`);
                    if (checkbox) {
                        const listItem = checkbox.closest('li');
                        if (listItem) {
                            const trashIcon = document.createElement('div');
                            trashIcon.className = 'trash-icon';
                            listItem.appendChild(trashIcon);
                        }
                    }
                });
            } else {
                idsToDelete.forEach(id => {
                    const message = document.querySelector(`li[data-drag-id=""${id}""]`);
                    if (message) {
                        const trashIcon = document.createElement('div');
                        trashIcon.className = 'trash-icon';
                        message.appendChild(trashIcon);
                    }
                });
            }
        };

        const showLoadingEffect = () => {
            const messageList = document.getElementById('message-list');
            if (messageList) {
                messageList.style.filter = 'blur(5px)';
                messageList.style.transition = 'filter 0.3s ease';
                document.getElementById(""message-list"").style.pointerEvents = ""none"";
                document.getElementById(""message-list"").style.userSelect = ""none"";
                document.getElementById(""message-list"").style.opacity = ""0.6"";
            }

            const loadingContainer = document.createElement('div');
            loadingContainer.classList.add('custom-loading-container');
            loadingContainer.innerHTML = `
                <style>
                    .custom-loading-container {
                        position: fixed;
                        top: 50vh;
                        left: 50%;
                        transform: translate(-250%, -50%);
                        z-index: 9999;
                        text-align: center;
                        font-family: sans-serif;
                        color: #333;
                    }

                    .spinner {
                        width: 40px;
                        height: 40px;
                        margin: 10px auto 0;
                        border-radius: 50%;
                        border: 5px solid #ccc;
                        border-top-color: #007bff;
                        animation: spin 1s linear infinite;
                    }

                    @keyframes spin {
                        to { transform: rotate(360deg); }
                    }

                    .checkmark {
                        width: 40px;
                        height: 40px;
                        display: inline-block;
                        border-radius: 50%;
                        background-color: #28a745;
                        position: relative;
                        animation: fadeIn 0.5s ease-in-out forwards;
                    }

                    .checkmark::after {
                        content: '';
                        position: absolute;
                        left: 12px;
                        top: 6px;
                        width: 10px;
                        height: 20px;
                        border: solid white;
                        border-width: 0 4px 4px 0;
                        transform: rotate(45deg);
                    }

                    @keyframes fadeIn {
                        from { opacity: 0; transform: scale(0.8); }
                        to { opacity: 1; transform: scale(1); }
                    }
                </style>
                <div id=""loading-text"">Sletter</div>
                <div class=""spinner"" id=""spinner""></div>
            `;
            document.body.appendChild(loadingContainer);
            return loadingContainer;
        };

        const finishLoadingEffect = (container) => {
            const spinner = container.querySelector('#spinner');
            const text = container.querySelector('#loading-text');

            if (spinner) spinner.remove();
            if (text) text.textContent = 'Sådan!';

            const checkmark = document.createElement('div');
            checkmark.className = 'checkmark';
            container.appendChild(checkmark);

            const audio = new Audio('https://notificationsounds.com/storage/sounds/file-sounds-1085-definite.mp3');
            audio.volume = 0.6;
            audio.play().catch(err => console.warn('Audio failed to play:', err));

            setTimeout(() => location.reload(), 1500);
        };

        const deleteMessages = async (messageIds, statusText, progressBar, loadingContainer) => {
            let url;
            if (window.location.href.includes(""/Folder/0"")) {
                url = 'https://aae.viggo.dk/Basic/Message/DeleteMessages/?folderId=0';
            } else {
                url = 'https://aae.viggo.dk/Basic/Message/DeleteMessages/?folderId=11';
            }

            let deleted = 0;
            let i = 0;

            while (i < messageIds.length) {
                if (cancelRequested) {
                    statusText.textContent = `Annulleret efter ${deleted} / ${messageIds.length} beskeder.`;
                    return;
                }

                const bulkSize = Math.floor(Math.random() * (175 - 75 + 1)) + 75;
                const chunk = messageIds.slice(i, i + bulkSize);
                const payload = chunk.map(id => `MessageId=${encodeURIComponent(id)}`).join('&');

                try {
                    const res = await fetch(url, {
                        method: 'DELETE',
                        headers: {
                            'Accept': '*/*',
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: payload,
                        credentials: 'include'
                    });

                    if (res.ok) {
                        deleted += chunk.length;
                        progressBar.value = (deleted / messageIds.length) * 100;
                        statusText.textContent = `Sletter ${deleted} / ${messageIds.length}`;
                    } else {
                        console.error('Sletning fejlede:', res.statusText);
                    }
                } catch (err) {
                    console.error('Netværksfejl ved sletning:', err);
                }

                i += bulkSize;
            }

            statusText.textContent = 'Sletning færdig - opdaterer siden...';
            finishLoadingEffect(loadingContainer);
        };

        const showConfirmation = (count, onConfirm) => {
            const overlay = document.createElement('div');
            overlay.style.position = 'fixed';
            overlay.style.top = 0;
            overlay.style.left = 0;
            overlay.style.width = '100%';
            overlay.style.height = '100%';
            overlay.style.backgroundColor = 'rgba(0, 0, 0, 0)';
            overlay.style.backdropFilter = 'blur(0px)';
            overlay.style.transition = 'background-color 300ms ease, backdrop-filter 300ms ease';
            overlay.style.zIndex = '9999';
            overlay.style.pointerEvents = 'auto';
            document.body.appendChild(overlay);

            requestAnimationFrame(() => {
                overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.3)';
                overlay.style.backdropFilter = 'blur(5px)';
            });

            const confirmBox = document.createElement('div');
            confirmBox.style.position = 'fixed';
            confirmBox.style.top = '50%';
            confirmBox.style.left = '50%';
            confirmBox.style.transform = 'translate(-50%, -50%) scale(0.9)';
            confirmBox.style.opacity = '0';
            confirmBox.style.transition = 'transform 250ms ease, opacity 250ms ease';
            confirmBox.style.background = '#1a1a1a';
            confirmBox.style.color = '#fff';
            confirmBox.style.padding = '20px';
            confirmBox.style.borderRadius = '12px';
            confirmBox.style.boxShadow = '0 0 15px rgba(0,0,0,0.5)';
            confirmBox.style.zIndex = '10000';
            confirmBox.innerHTML = `<p style=""font-size:16px;margin-bottom:15px;"">Er du sikker på, at du vil slette <strong>${count}</strong> besked(er)?</p>`;

            const btnYes = document.createElement('button');
            btnYes.textContent = '✅ Ja, slet';
            styleButton(btnYes, '#f44336');
            btnYes.style.width = '45%';
            btnYes.style.marginRight = '10%';

            const btnNo = document.createElement('button');
            btnNo.textContent = '❌ Annuller';
            styleButton(btnNo, '#555');
            btnNo.style.width = '45%';

            [btnYes, btnNo].forEach(btn => {
                btn.style.transition = 'transform 150ms ease';
                btn.addEventListener('mouseenter', () => btn.style.transform = 'scale(1.05)');
                btn.addEventListener('mouseleave', () => btn.style.transform = 'scale(1)');
            });

            const removePopup = () => {
                overlay.style.backgroundColor = 'rgba(0, 0, 0, 0)';
                overlay.style.backdropFilter = 'blur(0px)';
                confirmBox.style.opacity = '0';
                confirmBox.style.transform = 'translate(-50%, -50%) scale(0.9)';
                setTimeout(() => {
                    confirmBox.remove();
                    overlay.remove();
                }, 250);
            };

            btnYes.addEventListener('click', () => {
                removePopup();
                onConfirm();
            });

            btnNo.addEventListener('click', () => {
                removePopup();
            });

            confirmBox.appendChild(btnYes);
            confirmBox.appendChild(btnNo);
            document.body.appendChild(confirmBox);

            requestAnimationFrame(() => {
                confirmBox.style.opacity = '1';
                confirmBox.style.transform = 'translate(-50%, -50%) scale(1)';
            });
        };

        const createUI = () => {
            setInterval(() => {
                const isSentView = window.location.href.includes(""/Folder/0"");
                const existingBanner = document.getElementById('sent-mode-banner');

                if (isSentView && !existingBanner) {
                    const sentModeBanner = document.createElement('div');
                    sentModeBanner.id = 'sent-mode-banner';
                    sentModeBanner.textContent = '📤 Du ser sendte beskeder';
                    sentModeBanner.style.backgroundColor = '#444';
                    sentModeBanner.style.color = '#ffc107';
                    sentModeBanner.style.padding = '8px';
                    sentModeBanner.style.borderRadius = '8px';
                    sentModeBanner.style.marginBottom = '10px';
                    sentModeBanner.style.textAlign = 'center';
                    uiContainer.appendChild(sentModeBanner);
                } else if (!isSentView && existingBanner) {
                    existingBanner.remove();
                }
            }, 1000);

            // Create help popup elements
            const helpOverlay = document.createElement('div');
            helpOverlay.className = 'help-overlay';

            const helpPopup = document.createElement('div');
            helpPopup.className = 'help-popup';
            helpPopup.innerHTML = `
                <h2>Brugsanvisning</h2>
                <ol>
                    <li>Klik ""🔎 Find alle besked ID(er)"" for at samle ID'erne.</li>
                    <li>Udfyld antallet af beskeder, du vil beholde fra toppen af indbakken.</li>
                    <li>Klik ""🗑️ Slet Beskeder"" for at starte sletningen.</li>
                    <li>Du kan manuelt fjerne ID(er) på enkelte beskeder fra bunden eller midten af mængden, hvis du ønsker det. Rækkefølgen på ID(erne) i tekstfeltet er den samme som i indbakken.</li>
                    <li>⛔ Du kan afbryde sletningen med ""Annuller"".</li>
                    <li>✅ Når sletningen er færdig, genindlæses siden automatisk.</li>
                </ol>
                <button class=""close-help"">×</button>
            `;

            document.body.appendChild(helpOverlay);
            document.body.appendChild(helpPopup);

            // Help popup controls
            document.querySelector('.close-help').addEventListener('click', () => {
                helpOverlay.style.display = 'none';
                helpPopup.style.display = 'none';
            });

            helpOverlay.addEventListener('click', (e) => {
                if (e.target === helpOverlay) {
                    helpOverlay.style.display = 'none';
                    helpPopup.style.display = 'none';
                }
            });

            const uiContainer = document.createElement('div');
            uiContainer.style.width = '300px';
            uiContainer.style.position = 'fixed';
            uiContainer.style.top = '85px';
            uiContainer.style.right = '2px';
            uiContainer.style.backgroundColor = '#1a1a1a';
            uiContainer.style.color = '#f1f1f1';
            uiContainer.style.padding = '20px';
            uiContainer.style.borderRadius = '15px';
            uiContainer.style.boxShadow = '0 6px 12px rgba(0, 0, 0, 0.3)';
            uiContainer.style.zIndex = '9999';
            uiContainer.style.fontFamily = ""'Arial', sans-serif"";
            uiContainer.style.display = 'none';

            const header = document.createElement('div');
            header.innerHTML = '🗑️ <strong>Viggo Besked Sletter</strong>';
            header.style.marginBottom = '15px';
            header.style.fontSize = '18px';
            uiContainer.appendChild(header);

            const label = document.createElement('label');
            label.textContent = 'Skriv Besked ID(er) (komma-separeret):';
            label.style.display = 'block';
            label.style.marginBottom = '5px';

            const textarea = document.createElement('textarea');
            textarea.style.width = '100%';
            textarea.style.height = '100px';
            textarea.style.padding = '10px';
            textarea.style.borderRadius = '10px';
            textarea.style.border = '1px solid #333';
            textarea.style.marginBottom = '15px';
            textarea.style.backgroundColor = '#2b2b2b';
            textarea.style.color = '#f1f1f1';
            textarea.style.resize = 'none';

            const extractButton = document.createElement('button');
            extractButton.textContent = '🔎 Find alle besked ID(er)';
            styleButton(extractButton, '#4CAF50');
            extractButton.addEventListener('click', () => {
                document.getElementById(""message-list"").style.pointerEvents = ""none"";
                document.getElementById(""message-list"").style.userSelect = ""none"";
                document.getElementById(""message-list"").style.opacity = ""0.6"";

                (function autoScrollMessageList() {
                    const element = document.getElementById('message-list');
                    if (!element) return console.warn('Element #message-list not found');

                    const interval = setInterval(() => {
                        const maxScroll = element.scrollHeight - element.clientHeight;
                        const currentScroll = element.scrollTop;

                        element.scrollTop += 10;

                        if (currentScroll >= maxScroll - 1) {
                            clearInterval(interval);
                            const messageIds = extractMessageIds();
                            textarea.value = messageIds.join(', ');
                            console.log('Reached bottom of #message-list');
                            document.getElementById(""message-list"").style.pointerEvents = ""auto"";
                            document.getElementById(""message-list"").style.userSelect = ""auto"";
                            document.getElementById(""message-list"").style.opacity = ""1"";

                            // Update deletion marks
                            const topCount = parseInt(topExclusionInput.value) || 0;
                            const allIds = textarea.value.split(',').map(id => id.trim()).filter(Boolean);
                            const idsToDelete = topCount > 0 ? allIds.slice(topCount) : allIds;
                            markMessagesForDeletion(idsToDelete);
                        }
                    }, 1);
                })();
            });

            const topExclusionLabel = document.createElement('label');
            topExclusionLabel.textContent = 'Antal beskeder der skal beholdes fra toppen:';
            topExclusionLabel.style.display = 'block';
            topExclusionLabel.style.marginBottom = '5px';

            const topExclusionInput = document.createElement('input');
            topExclusionInput.type = 'number';
            styleInput(topExclusionInput);
            topExclusionInput.addEventListener('input', () => {
                const topCount = parseInt(topExclusionInput.value) || 0;
                const allIds = textarea.value.split(',').map(id => id.trim()).filter(Boolean);
                const idsToDelete = topCount > 0 ? allIds.slice(topCount) : allIds;
                markMessagesForDeletion(idsToDelete);
            });

            const statusText = document.createElement('div');
            statusText.style.marginBottom = '10px';

            const progressBar = document.createElement('progress');
            progressBar.style.width = '100%';
            progressBar.max = 100;
            progressBar.value = 0;

            const cancelButton = document.createElement('button');
            cancelButton.textContent = '⛔ Annuller';
            styleButton(cancelButton, '#555');
            cancelButton.style.marginTop = '10px';
            cancelButton.addEventListener('click', () => {
                cancelRequested = true;
            });

            const deleteButton = document.createElement('button');
            deleteButton.textContent = '🗑️ Slet Beskeder';
            styleButton(deleteButton, '#f44336');
            deleteButton.addEventListener('click', () => {
                cancelRequested = false;
                const topCount = parseInt(topExclusionInput.value) || 0;
                const allIds = textarea.value.split(',').map(id => id.trim()).filter(Boolean);
                const idsToDelete = topCount > 0 ? allIds.slice(topCount) : allIds;

                if (idsToDelete.length === 0) {
                    statusText.textContent = 'Ingen beskeder valgt.';
                    return;
                }

                showConfirmation(idsToDelete.length, async () => {
                    deleteButton.disabled = true;
                    deleteButton.style.opacity = '0.5';
                    deleteButton.textContent = '⏳ Sletter...';
                    statusText.textContent = `Sletter 0 / ${idsToDelete.length}`;
                    const loadingContainer = showLoadingEffect();
                    await deleteMessages(idsToDelete, statusText, progressBar, loadingContainer);
                    deleteButton.disabled = false;
                    deleteButton.style.opacity = '1';
                    deleteButton.textContent = '🗑️ Slet Beskeder';
                });
            });

            const helpButton = document.createElement('button');
            helpButton.textContent = '📘 Brugsanvisning';
            styleButton(helpButton, '#007BFF');
            helpButton.addEventListener('click', () => {
                helpOverlay.style.display = 'block';
                helpPopup.style.display = 'block';
            });

            uiContainer.appendChild(label);
            uiContainer.appendChild(textarea);
            uiContainer.appendChild(extractButton);
            uiContainer.appendChild(topExclusionLabel);
            uiContainer.appendChild(topExclusionInput);
            uiContainer.appendChild(deleteButton);
            uiContainer.appendChild(cancelButton);
            uiContainer.appendChild(statusText);
            uiContainer.appendChild(progressBar);
            uiContainer.appendChild(helpButton);

            document.body.appendChild(uiContainer);

            const toggleButton = document.createElement('button');
            toggleButton.textContent = '🔽 Åben Sletter';
            toggleButton.id = 'customToggleButton';
            toggleButton.style.position = 'fixed';
            toggleButton.style.top = '41px';
            toggleButton.style.right = '-2px';
            toggleButton.style.backgroundColor = '#2b2a2d';
            toggleButton.style.color = '#f1f1f1';
            toggleButton.style.padding = '8px 14px';
            toggleButton.style.border = 'none';
            toggleButton.style.cursor = 'pointer';
            toggleButton.style.width = '164px';
            toggleButton.style.fontSize = '18px';
            toggleButton.style.zIndex = '10000';

            toggleButton.addEventListener('click', () => {
                const isVisible = uiContainer.style.display === 'block';
                uiContainer.style.display = isVisible ? 'none' : 'block';
                toggleButton.textContent = isVisible ? '🔽 Åben Sletter' : '🔼 Luk Sletter';
                toggleButton.classList.toggle('active');
            });

            document.body.appendChild(toggleButton);

            const style = document.createElement('style');
            style.textContent = `
                #customToggleButton {
                    border-radius: 0 0 0 5px;
                    position: relative;
                    overflow: hidden;
                    background-color: rgba(43, 42, 45, 1);
                }

                #customToggleButton::after {
                    content: '';
                    position: absolute;
                    bottom: 0;
                    left: 50%;
                    height: 2px;
                    width: 0%;
                    background-color: #f1f1f1;
                    transition: width 0.3s ease, left 0.3s ease;
                    transform: translateX(-50%);
                }

                #customToggleButton::after {
                    content: '';
                    position: absolute;
                    bottom: 0;
                    left: 50%;
                    height: 2px;
                    width: 0%;
                    background-color: #f1f1f1;
                    transform: translateX(-50%);
                    transition: none;
                }

                #customToggleButton:hover::after {
                    width: 100%;
                    left: 0;
                    transform: none;
                    transition: width 0.3s ease, left 0.3s ease;
                }

                #customToggleButton:hover {
                  background-color: rgba(43, 42, 45, 0.1);
                }

                #customToggleButton:focus {
                    outline: none;
                    box-shadow: none;
                }

                #customToggleButton:hover::after {
                    width: 100%;
                    left: 0;
                    transform: none;
                }

                #customToggleButton.active::after {
                    background-color: #117596;
                    height: 4px;
                }
            `;
            document.head.appendChild(style);
        };


        createUI();
        monitorFolderChange();
    })();
})();"
hZVXXs5M,"C#, Libikóka",kijato,C#,Wednesday 25th of June 2025 01:22:55 PM CDT,"/*

Feladatkiírás:
    30. Rajzoljunk egy libikókát (vizszintes egyenes, középen forgásponttal, ami egy kis kör). Mindkét vége
    felett egy-egy textboxba beirjuk a gyerek súlyát, aki ráült. Ha azonos a két súly, a libikóka
    vizszintes marad, ha valamelyik nehezebb, abba az irányba lesüllyed, miközben a forgáspont a helyén marad.

    // csc.exe -debug+ -target:winexe -r:System.Windows.Forms.dll -r:System.Drawing.dll program.cs

*/

using System;
using System.Drawing;
using System.Windows.Forms;

public class Program
{

    static int formWidth = 600, formHeight = 400;
    static int angle;

    static Form f = new Form()
        {
            Size = new Size(formWidth, formHeight),
            FormBorderStyle = FormBorderStyle.FixedSingle,
            Text = ""Libikóka""
        };
    static TextBox tbLeft  = new TextBox()
        {
            Location = new Point(100, 80)
        };
	static TextBox tbRight = new TextBox()
        {
            Location = new Point(400, 80)
        };
    static Label l = new Label()
    {
        Location = new Point(5, formHeight-60),
        Size = new Size(formWidth-10, 20),
    };
	
	[STAThread]
    static void Main()
    {
        f.Paint += new PaintEventHandler(Form1_Paint);
        f.Controls.Add(tbLeft);
        f.Controls.Add(tbRight);
        f.Controls.Add(l);

        tbLeft.TextChanged += new System.EventHandler(TextChanged);
        tbRight.TextChanged += new System.EventHandler(TextChanged);

        Application.Run(f);
    }


    static void TextChanged(object sender, EventArgs e)
    {
        int t1 = 0, t2 = 0;
        //int max_angle = 20;

        try
        {
            t1 = tbLeft.Text.Trim().Equals("""")  ? 0 : int.Parse(tbLeft.Text.Trim());
            t2 = tbRight.Text.Trim().Equals("""") ? 0 : int.Parse(tbRight.Text.Trim());

            if (t1 < t2) angle = 15;
            else if (t1 > t2) angle = -15;
            else angle = 0;
            //angle = Math.Max(-max_angle, Math.Min(max_angle, (t2 - t1) * 2));

            l.Text = """";
        }
        catch (Exception ex)
        {
            l.Text = ex.Message;
            angle = 0;
        }

        f.Invalidate();

    }


    static void Form1_Paint(object sender, PaintEventArgs e) 
	{

		{ 
            e.Graphics.TranslateTransform(formWidth/2, formHeight/2);
            e.Graphics.RotateTransform(angle);
            e.Graphics.DrawLine(new Pen(Color.Red, 5), -200, 0, 200, 0);

            e.Graphics.ResetTransform();
            e.Graphics.DrawEllipse(new Pen(Color.Black, 3), formWidth / 2, formHeight / 2, 10, 10);
        }

    }
	
} "
qLrx0suR,fields,Wassaa,Lua,Wednesday 25th of June 2025 01:19:27 PM CDT,"-- inspectField.lua

-- Read optional field argument
local fieldName = ...

-- Wrap the chest on the right
local chest = peripheral.wrap(""right"")                                          -- :contentReference[oaicite:0]{index=0} :contentReference[oaicite:1]{index=1}
if not chest then
  error(""No chest peripheral on the right side"")
end

-- Always inspect slot 1
local slot = 1
local item = chest.getItemDetail(slot)                                          -- :contentReference[oaicite:2]{index=2}
if not item then
  print(""No item in slot "" .. slot)
  return
end

-- If no field requested, list all keys
if not fieldName then
  print(""Fields in item slot "" .. slot .. "":"")
  for key in pairs(item) do                                                      -- :contentReference[oaicite:3]{index=3}
    print(""– "" .. key)
  end
  return
end

-- Attempt to fetch the requested field
local value = item[fieldName]
if value == nil then
  error(""Field '"" .. fieldName .. ""' not found on item"")
end

-- Helper to pretty-print nested tables
local function dump(v, indent)
  indent = indent or """"
  if type(v) == ""table"" then
    for k, x in pairs(v) do                                                       -- :contentReference[oaicite:4]{index=4}
      -- If it’s an array-like subtable, use ipairs for numeric indices
      if type(x) == ""table"" then
        print(indent .. k .. "":"")
        dump(x, indent .. ""  "")
      else
        print(indent .. k .. "": "" .. tostring(x))
      end
    end
  else
    -- Fallback for numbers/strings/booleans
    print(tostring(v))
  end
end

-- Print the requested field
print(""Contents of field '"" .. fieldName .. ""':"")
dump(value) "
1cG1xf9F,Untitled,yurghie,YAML,Wednesday 25th of June 2025 01:07:57 PM CDT,"script:
  tazerface_wake: #yes, that is its name :)
    sequence:
      - condition: 
        - ""{{ states('binary_sensor.tazerface_located_at_home') == 'on' }}"" # teslemetry thinks the car is home
        - ""{{ states('binary_sensor.tazerface_status') == 'off' }}"" # ...and that it is sleeping
      - service: button.press
        target:
          entity_id: button.tesla_ble_1d8b34_wake_up  #bluetooth button
      - wait_for_trigger:
          - platform: state
            entity_id: binary_sensor.tazerface_status  #teslemetry sensor
            to: ""on""
        timeout: ""00:02:00""  # it's way less than 2 minutes...
        continue_on_timeout: true
      - delay: '00:00:15' #allow teslemetry to be certain the car is awake
    mode: single
    max_exceeded: silent"
UxhKgfW8,printFields,Wassaa,Lua,Wednesday 25th of June 2025 12:46:15 PM CDT,"local chest = peripheral.wrap(""right"")
local item = chest.getItemDetail(1)
if not item then
  print(""No item"")
  return
end

print(""Fields in item slot 1:"")
for key in pairs(item) do
  print(""– ""..key)
end"
EFavZhMw,meta.yml formatted for Reddit,smeech,YAML,Wednesday 25th of June 2025 11:36:28 AM CDT,"    global_vars:
      - name: ""f""
        type: ""form""
        params:
          layout: ""trigger: [[t]]\nreplace: [[r]]""

      - name: ""tr""
        type: ""echo""
        params:
          echo: ""  - trigger: \""{{f.t}}\""\n    replace: \""{{f.r}}\""\n""

      - name: ""w""
        type: ""echo""
        params:
          echo: ""    word: true\n""

      - name: ""p""
        type: ""echo""
        params:
          echo: ""    propagate_case: true\n""

      - name: ""m""
        type: ""echo""
        params:
          echo: ""matches:\n{{tr}}""

      - name: ""m1""
        type: ""choice""
        params:
          values: 
            - label: ""matches, trigger and replace""
              id: ""{{m}}""
        
            - label: ""matches, trigger, replace and word""
              id: ""{{m}}{{w}}""

            - label: ""matches, trigger, replace, propagate_case""
              id: ""{{m}}{{p}}""

            - label: ""matches, trigger, replace, word, and propagate_case""
              id: ""{{m}}{{w}}{{p}}""


      - name: ""t1""
        type: ""choice""
        params:
          values: 
            - label: ""trigger and replace""
              id: ""{{tr}}""
      
            - label: ""trigger, replace and word""
              id: ""{{tr}}{{w}}""

            - label: ""trigger, replace, propagate_case""
              id: ""{{tr}}{{p}}""

            - label: ""trigger, replace, word, and propagate_case""
              id: ""{{tr}}{{w}}{{p}}"""
dSWgQAL5,pushtest,Wassaa,Lua,Wednesday 25th of June 2025 11:34:08 AM CDT,"-- pushTest.lua

-- 1) Find all adjacent chests
local chests = { peripheral.find(""minecraft:chest"") }
if #chests < 2 then
  print(""❌ Need at least two chests attached to test pushItems"")
  return
end

-- 2) Pick the first two
local chestA = chests[1]
local chestB = chests[2]
local nameA  = peripheral.getName(chestA)
local nameB  = peripheral.getName(chestB)
print((""Testing push from %q → %q""):format(nameA, nameB))

-- 3) Verify pushItems exists
local methodsA = peripheral.getMethods(nameA)
local hasPush = false
for _, m in ipairs(methodsA) do
  if m == ""pushItems"" then hasPush = true break end
end
if not hasPush then
  print(""⚠️  pushItems not supported on this chest peripheral."")
  return
end

-- 4) Attempt to move one item from slot 1
--    This will throw an error if something’s wrong
local moved = chestA.pushItems(nameB, 1, 1)
if moved == 0 then
  print(""ℹ️  pushItems succeeded but moved 0 items (slot 1 empty?)"")
else
  print((""✅ pushItems moved %d item(s) from slot 1""):format(moved))
end"
xYFPByTp,VDP Grass Map,XQL,Lua,Wednesday 25th of June 2025 11:32:15 AM CDT,"x���Qk�0���!�iM�Ĥrq&h��m��-i�d��������y��o�2��Q��(�c��.�2p�G��|X��jg��֣�����q�4�`�d��lc�YlR��2�P��YS.N�(E$"".����l�l��ϓ)��*qYYgE�u��Q�t�b����:��<�,����5��=u�����^$|�I�A}E����N&��آ�I�q�e�ַO�A��""�!��Cx0�V���o�[\�T-��|�2|'����g��Sr�Tr�C))І��.$�D>�heSW$��xj�n6�m��~�@�5�`�k.=2A�������p�:�)Ŵ�_9@�c�]�����H��\��B���Q`�"
JtuqPzJa,kolejka,black_duck11,Python,Wednesday 25th of June 2025 11:15:57 AM CDT,"#Kolejka - queue
#działa na zasadzie FIFO - first in first out
class Queue:
    def __init__(self):
        self.kolejka=[]
    def dodanie_do_kolejki(self,element):
        self.kolejka.append(element)
    def is_empty(self):
        return len(self.kolejka)==0
    def usun_z_kolejki(self):
        if not self.is_empty():
            return self.kolejka.pop(0)"
qUjna46M,tests,Wassaa,Lua,Wednesday 25th of June 2025 11:13:25 AM CDT,"-- enchantSorter.lua
-- Sorts items from an input chest into three outputs and logs to a monitor.

-----------------------------------------------------------
-- ░█  CONFIG
-----------------------------------------------------------
local INPUT_CHEST     = ""minecraft:chest_25""
local ENCHANTED_CHEST = ""minecraft:chest_29""
local NORMAL_CHEST    = ""minecraft:chest_30""
local OVERFLOW_CHEST  = ""minecraft:chest_31""
local MONITOR_NAME    = ""monitor_4""      -- wrapped below

-----------------------------------------------------------
-- ░█  WRAP PERIPHERALS
-----------------------------------------------------------
local inputChest = peripheral.wrap(INPUT_CHEST)
local monitor    = peripheral.wrap(MONITOR_NAME)

if not inputChest then error(""Input chest not found: ""..INPUT_CHEST) end
if not monitor   then error(""Monitor not found: ""..MONITOR_NAME) end

-----------------------------------------------------------
-- ░█  MONITOR INITIALISATION
-----------------------------------------------------------
monitor.setTextScale(0.5)            -- 1 = readable but roomy  :contentReference[oaicite:0]{index=0}
monitor.setBackgroundColor(colors.black)
monitor.setTextColor(colors.white)
monitor.clear()
monitor.setCursorPos(1,1)

local monW, monH = monitor.getSize()    -- width/height of the monitor  :contentReference[oaicite:1]{index=1}
local line = 1                          -- current cursor Y on the monitor

local function log(msg)
  -- print to computer terminal
  print(msg)

  -- print to monitor, scrolling when needed
  monitor.setCursorPos(1, line)
  monitor.clearLine()
  monitor.write(msg)
  line = line + 1
  if line > monH then
    monitor.scroll(1)                   -- scroll display up one line  :contentReference[oaicite:2]{index=2}
    line = monH
  end
end

-----------------------------------------------------------
-- ░█  HELPER FUNCTIONS
-----------------------------------------------------------
local chestLabels = {
  [ENCHANTED_CHEST] = ""Enchanted Chest"",
  [NORMAL_CHEST]    = ""Normal Chest"",
  [OVERFLOW_CHEST]  = ""Overflow Chest"",
}

local function moveStack(fromChest, slot, destName, itemDetail)
  local moved = fromChest.pushItems(destName, slot)  -- move whole stack  :contentReference[oaicite:3]{index=3}
  log(string.format(
    ""Moved %-3d %-30s -> %s"",
    moved, itemDetail.displayName, chestLabels[destName] or destName
  ))
end

local function isStackable(item)      -- multi-stack items go to overflow
  return item.maxCount and item.maxCount > 1
end

local function isEnchanted(item)
  return item.enchantments and #item.enchantments > 0
end

-----------------------------------------------------------
-- ░█  MAIN SORT LOOP
-----------------------------------------------------------
local function sortOnce()
  local totalSlots = inputChest.size()                           -- :contentReference[oaicite:4]{index=4}
  for slot = 1, totalSlots do
    local detail = inputChest.getItemDetail(slot)
    if detail then
      if isStackable(detail) then
        moveStack(inputChest, slot, OVERFLOW_CHEST, detail)
      else
        if isEnchanted(detail) then
          moveStack(inputChest, slot, ENCHANTED_CHEST, detail)
        else
          moveStack(inputChest, slot, NORMAL_CHEST, detail)
        end
      end
    end
  end
end

-----------------------------------------------------------
-- ░█  CONTINUOUS RUN
-----------------------------------------------------------
log(""=== enchantSorter started ==="")
while true do
  sortOnce()
  os.sleep(5)
end"
PrdC8YXH,stos,black_duck11,Python,Wednesday 25th of June 2025 11:09:40 AM CDT,"#Niestandardowe struktury danych
lista=[1,2,3,'tekst'] # - lista
#append
#pop()-usuwa z listy ostatni element
#pop(2) - usuwa z listy element pod indeksem 2

#Stos (ang Stack)
#LIFO - last in first out- ostatni element dodany wychodzi pierwszym
#implementacja stosu w pythonie-użycie list(metody append i pop)
stack=[]
stack.append('a')
stack.append('b')
stack.append('c')
print(stack)
stack.pop()
print(stack)
class Stos:
    def __init__(self):
        self.stos=[]
    def push(self,item):
        self.stos.append(item)
    def is_empty(self):
        return len(self.stos)==0
    def pop(self):
        if not self.is_empty():
            return self.stos.pop()
'''1. Utwórz symulator przeglądarki gdzie historia przeglądania będzie zapisywana w formie stosu. Użytkownik może wchodzić na różne strony w programie i cofać się w historii przeglądania.Klasa BrowserHistory przechowuje aktualną stronę (current_page) oraz historię
przeglądania (history). Metoda go_to_page dodaje aktualną stronę do historii i ustawia bieżącą stronę na podaną. Metoda go_back pobiera poprzednią stronę z historii i ustawia ją jako bieżącą, jeśli jest dostępna. Metoda print_history drukuje aktualną stronę i całą historię przeglądania, zaczynając od najnowszej strony.'''
class BrowserHistory:
    def __init__(self):
        self.history=Stos()#utworzenie obiektu z klasy Stos
        self.current_page=None
    def go_to_page(self,url):
        if self.current_page is not None:
            self.history.push(self.current_page)
        self.current_page=url
    def go_back(self):
        previous_page=self.history.pop()
        if previous_page is not None:
            self.current_page=previous_page
    def print_history(self):
        print(f'Current page: {self.current_page}')
        print(f'History: {self.history.stos}')
history=BrowserHistory()
history.go_to_page('https://onet.pl')
history.go_to_page('https://giganciprogramowania.edu.pl')
history.print_history()
    





    


    

"
aYx0HLBj,Finn - White Stone House,Kelly-B9978,HTML,Wednesday 25th of June 2025 10:46:48 AM CDT,"<!--
[คู่มือการแก้ไขโคด]
สีพื้นหลัง : --whitestone-bgcolor: #ddd5c8;
สีตัวอักษร : --whitestone-txt: #000;
สีกล่องข้อความ : --whitestone-box: #d7cfc1;
สีขอบ : --whitestone-border: #f8eede;

ภาพพื้นหลังด้านบน : --whitestone-bg: url(https://iili.io/FuEgj2t.png);
ปรับตำแหน่งภาพพื้นหลัง : --whitestone-pos: 50% 0%;
 - เลขตัวแรกคือการขยับซ้าย - ขวา โดย 0% = ชิดซ้าย 100% = ชิดขวา
 - เลขตัวแรกคือการขยับขึ้น - ลง โดย 0% = ชิดบน 100% = ชิดล่าง

ปรับขนาดภาพพื้นหลัง : --whitestone-size: 167.667%;
 - cover คือ ขยายเต็มพื้นที่
 - 100% คือ กว้างเท่า div
 - มากกว่า 100% คือ ขนาดใหญ่ขึ้น
 - น้อยกว่า 100% คือ ขนาดเล็กลง

กรอบรูป 1 ขนาด 1200 x 605
กรอบรูป 2 ขนาด 1200 x 410
-->

<link href=""https://dl.dropbox.com/scl/fi/a2yqnbrp50ih8mfjpjxvp/whitestone.css?rlkey=lkf7xc4xfso2ea0fhqhqt89a1&st=lryjlt1c"" rel=""stylesheet"">
<div id=""WhiteStone""><a href=""https://discord.com/users/625292873914515456/""></a><div class=""whitestone-box"" style=""--whitestone-bgcolor: #ddd5c8;--whitestone-txt: #000;--whitestone-box: #d7cfc1;--whitestone-border: #f8eede;--whitestone-bg: url(https://iili.io/FuEgj2t.png);--whitestone-pos: 50% 0%;--whitestone-size: 167.667%;"">
<div class=""whitestone-frame1"" style=""--whitestone-frame: url(https://iili.io/FuEiyk7.png);""></div>
<h1 class=""whitestone-h1"">White Stone House</h1>
<div class=""whitestone-textbox"">กราวนด์ฮัลโลวีนจิตเภทบรรพชนโบ้ย โฟมมาร์เก็ตติ้งบาร์บี้ฟอยล์ บลูเบอร์รี่ เทรนด์ บัลลาสต์แจ๊กพอตซัมเมอร์วาฟเฟิลสเตย์ ชัวร์อีสต์ ซ้อเห่ยภูมิทัศน์ฮัมดาวน์ เชอร์รี่คอร์สเรซินพิซซ่า โยเกิร์ตอัลตราไฟแนนซ์ราชานุญาต เอ๋อตัวตน ธัมโม แชมพูสเปกไฟแนนซ์ม้านั่งไดเอ็ต ฟลุทแดนเซอร์ ดยุคบัลลาสต์ร็อคคำตอบกีวี ครัวซองต์เซาท์ โบตั๋นเป็นไงแอสเตอร์ฟรังก์บุญคุณ</div>
<div class=""whitestone-frame2"" style=""--whitestone-frame: url(https://iili.io/FuGhirJ.png);""></div>
<h1 class=""whitestone-h1"">White Stone House</h1>
<div class=""whitestone-textbox"">กราวนด์ฮัลโลวีนจิตเภทบรรพชนโบ้ย โฟมมาร์เก็ตติ้งบาร์บี้ฟอยล์ บลูเบอร์รี่ เทรนด์ บัลลาสต์แจ๊กพอตซัมเมอร์วาฟเฟิลสเตย์ ชัวร์อีสต์ ซ้อเห่ยภูมิทัศน์ฮัมดาวน์ เชอร์รี่คอร์สเรซินพิซซ่า โยเกิร์ตอัลตราไฟแนนซ์ราชานุญาต เอ๋อตัวตน ธัมโม แชมพูสเปกไฟแนนซ์ม้านั่งไดเอ็ต ฟลุทแดนเซอร์ ดยุคบัลลาสต์ร็อคคำตอบกีวี ครัวซองต์เซาท์ โบตั๋นเป็นไงแอสเตอร์ฟรังก์บุญคุณ</div>
</div></div>"
17NUriR0,enchComputer,Wassaa,Lua,Wednesday 25th of June 2025 10:25:54 AM CDT,"-- enchantSorter.lua
-- Sorts items from an input chest into three outputs and logs to a monitor.

-----------------------------------------------------------
-- ░█  CONFIG
-----------------------------------------------------------
local INPUT_CHEST     = ""ironchests:crystal_chest_3""
local ENCHANTED_CHEST = ""ironchests:crystal_chest_0""
local NORMAL_CHEST    = ""ironchests:crystal_chest_1""
local OVERFLOW_CHEST  = ""ironchests:crystal_chest_2""
local MONITOR_NAME    = ""monitor_4""

-----------------------------------------------------------
-- ░█  WRAP PERIPHERALS
-----------------------------------------------------------
local inputChest = peripheral.wrap(INPUT_CHEST)
local monitor    = peripheral.wrap(MONITOR_NAME)

if not inputChest then error(""Input chest not found: ""..INPUT_CHEST) end
if not monitor   then error(""Monitor not found: ""..MONITOR_NAME) end

-----------------------------------------------------------
-- ░█  MONITOR INITIALISATION
-----------------------------------------------------------
monitor.setTextScale(0.5)                                            -- fine-grained text size :contentReference[oaicite:2]{index=2}
monitor.setBackgroundColor(colors.black)
monitor.setTextColor(colors.white)
monitor.clear()
monitor.setCursorPos(1,1)

local monW, monH = monitor.getSize()                                 -- fetch width/height :contentReference[oaicite:3]{index=3}
local line = 1                                                       -- current Y cursor

-----------------------------------------------------------
-- ░█  COLOUR MAP + LOGGER
-----------------------------------------------------------
local chestLabels = {
  [ENCHANTED_CHEST] = ""Enchanted"",
  [NORMAL_CHEST]    = ""Normal"",
  [OVERFLOW_CHEST]  = ""Overflow"",
}
local chestColours = {                                               -- colour constants :contentReference[oaicite:4]{index=4}
  [ENCHANTED_CHEST] = colors.green,
  [NORMAL_CHEST]    = colors.red,
  [OVERFLOW_CHEST]  = colors.blue,
}

--- Print to PC *and* monitor, colouring the whole line on the monitor.
---@param msg string
---@param dest string  network name of destination chest
local function log(msg, dest)
  -- console
  print(msg)

  -- monitor
  monitor.setTextColour(chestColours[dest] or colors.white)
  monitor.setCursorPos(1, line)
  monitor.clearLine()
  monitor.write(msg)
  line = line + 1
  if line > monH then
    monitor.scroll(1)                                               -- keep newest line visible :contentReference[oaicite:5]{index=5}
    line = monH
  end
  monitor.setTextColour(colors.white)                               -- reset for safety
end

-----------------------------------------------------------
-- ░█  HELPER FUNCTIONS
-----------------------------------------------------------
local function moveStack(fromChest, slot, destName, itemDetail, moved)
  log(string.format(
        ""%3d %-20.20s -> %s"",
        moved, itemDetail.displayName, chestLabels[destName]),
      destName)
end

local function isStackable(item)      return item.maxCount and item.maxCount > 1 end
local function isEnchanted(item)      return item.enchantments and #item.enchantments > 0 end

-----------------------------------------------------------
-- ░█  MAIN SORT PASS
-----------------------------------------------------------
local function sortOnce()
  local totalSlots = inputChest.size()                              -- slot count API :contentReference[oaicite:6]{index=6}
  for slot = 1, totalSlots do
    local detail = inputChest.getItemDetail(slot)
    if detail then
      local moved, dest = 0, nil
      if isStackable(detail) then
        dest   = OVERFLOW_CHEST
        moved  = inputChest.pushItems(dest, slot)                  -- inventory transfer :contentReference[oaicite:7]{index=7}
      else
        if isEnchanted(detail) then
          dest  = ENCHANTED_CHEST
        else
          dest  = NORMAL_CHEST
        end
        moved = inputChest.pushItems(dest, slot)
      end
      moveStack(inputChest, slot, dest, detail, moved)
    end
  end
end

-----------------------------------------------------------
-- ░█  CONTINUOUS RUN
-----------------------------------------------------------
log(""=== enchantSorter started ==="", nil)
while true do
  sortOnce()
  os.sleep(5)
end
"
6km6vUiW,Discord API Request to reopen closed DM,krixko,JavaScript,Wednesday 25th of June 2025 10:20:00 AM CDT,"fetch(""https://discord.com/api/v9/users/@me/channels"", {

method: ""POST"",

headers: {
""Authorization"": ""YOUR_DISCORD_AUTHORIZATION_KEY"",
""Content-Type"": ""application/json""
},

body: JSON.stringify({
recipient_id: ""USE_ID_OF_ACCOUNT_THAT_BLOCKED_YOU""

})
})

.then(res => res.json())
.then(data => console.log(""DM Channel:"", data))
.catch(err => console.error(""Error:"", err));"
DtMU6BzB,index.js,Gonpaman,JavaScript,Wednesday 25th of June 2025 09:53:47 AM CDT,"import pkg from 'discord.js';
import fs from 'fs';
import dotenv from 'dotenv';
import winston from 'winston';
import Database from 'better-sqlite3';

dotenv.config();

const {
  Client,
  GatewayIntentBits,
  REST,
  Routes,
  SlashCommandBuilder,
  EmbedBuilder,
  PermissionFlagsBits,
  ButtonBuilder,
  ActionRowBuilder,
  ButtonStyle,
  ChannelType,
  PermissionsBitField
} = pkg;

// -----------------------
// Mapa para transformar gameid a nombre bonito
const gamesMap = {
  repo: ""R.E.P.O."",
  fifa17: ""EA Sports FIFA 17"",
  lethalcompany: ""Lethal Company"",
  iamfish: ""I Am Fish"",
  planetzoo: ""Planet Zoo"",
  arbs: ""Animal Revolt Battle Simulator"",
  poppy2: ""Poppy Playtime - Chapter 2 [DLC]""
};

// -----------------------
// Logging con Winston
const logger = winston.createLogger({
  level: process.env.NODE_ENV === 'production' ? 'info' : 'debug',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'bot-error.log', level: 'error' }),
    new winston.transports.File({ filename: 'bot-combined.log' })
  ],
});

process.on('uncaughtException', (err) => {
  logger.error('uncaughtException', { error: err.stack || err });
});
process.on('unhandledRejection', (reason) => {
  logger.error('unhandledRejection', { reason });
});

// -----------------------
// Base de datos SQLite
const dbPath = process.env.DB_FILE || './botdata.db';
const db = new Database(dbPath);
db.pragma('journal_mode = WAL');

// Tabla códigos de compra
db.exec(`
  CREATE TABLE IF NOT EXISTS codes (
    code TEXT PRIMARY KEY,
    userId TEXT NOT NULL,
    channelId TEXT NOT NULL,
    messageId TEXT NOT NULL,
    gameid TEXT NOT NULL,
    used INTEGER NOT NULL DEFAULT 0,
    createdAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
  );
`);

// Tabla puntos usuarios
db.exec(`
  CREATE TABLE IF NOT EXISTS user_points (
    userId TEXT PRIMARY KEY,
    points INTEGER NOT NULL DEFAULT 0
  );
`);

// Tabla configuración del sistema de puntos y setup
db.exec(`
  CREATE TABLE IF NOT EXISTS setup_config (
    guildId TEXT PRIMARY KEY,
    messages_needed INTEGER NOT NULL DEFAULT 10,
    points INTEGER NOT NULL DEFAULT 1,
    no_repetir INTEGER NOT NULL DEFAULT 0,
    banco_channel_id TEXT DEFAULT NULL,
    leaderboard_message_id TEXT DEFAULT NULL
  );
`);

// -----------------------
// Cargar puntos en memoria
const pointsMap = new Map();
try {
  const rows = db.prepare('SELECT userId, points FROM user_points').all();
  for (const row of rows) {
    pointsMap.set(row.userId, row.points);
  }
  logger.info('Puntos cargados desde DB', { count: pointsMap.size });
} catch (e) {
  logger.error('Error cargando puntos desde DB', { error: e });
}

// -----------------------
// Variables para control de mensajes para dar puntos
// Por guildId: { messages_needed, points, no_repetir, banco_channel_id, leaderboard_message_id }
const guildConfigs = new Map();

// Para guardar el último mensaje por usuario para comprobar repetidos si no_repetir=true
// Estructura: Map<guildId, Map<userId, { lastMessage: string, countMessages: int }>>
const userMessageTrack = new Map();

// -----------------------
// Cliente Discord
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers
  ]
});

// -----------------------
// Función generar código tipo XXXX-XXXX-XXXX-XXXX
function generateCode() {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  function part() {
    let s = '';
    for (let i = 0; i < 4; i++) {
      s += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return s;
  }
  return `${part()}-${part()}-${part()}-${part()}`;
}

// -----------------------
// Gestión puntos usuario
function setUserPoints(userId, points) {
  pointsMap.set(userId, points);
  try {
    db.prepare('INSERT OR REPLACE INTO user_points (userId, points) VALUES (?, ?)').run(userId, points);
    logger.debug('Puntos guardados en DB', { userId, points });
  } catch (e) {
    logger.error('Error guardando puntos en DB', { error: e, userId, points });
  }
}

function addUserPoints(userId, delta) {
  const prev = pointsMap.get(userId) || 0;
  const updated = prev + delta;
  setUserPoints(userId, updated);
  return updated;
}

// -----------------------
// Guardar código en DB (ahora con gameid)
function storeCodeInDb(code, userId, channelId, messageId, gameid) {
  try {
    const stmt = db.prepare('INSERT INTO codes (code, userId, channelId, messageId, gameid) VALUES (?, ?, ?, ?, ?)');
    stmt.run(code, userId, channelId, messageId, gameid);
    logger.debug('Código almacenado en DB', { code, userId, channelId, messageId, gameid });
  } catch (err) {
    logger.error('Error almacenando código en DB', { error: err, code });
  }
}

// -----------------------
// Funciones para setup config
function getSetupConfig(guildId) {
  let cfg = guildConfigs.get(guildId);
  if (cfg) return cfg;
  try {
    const row = db.prepare('SELECT * FROM setup_config WHERE guildId = ?').get(guildId);
    if (row) {
      row.no_repetir = Boolean(row.no_repetir);
      guildConfigs.set(guildId, row);
      return row;
    }
  } catch (e) {
    logger.error('Error leyendo setup config', { error: e, guildId });
  }
  // Defaults:
  const defaultCfg = { guildId, messages_needed: 10, points: 1, no_repetir: false, banco_channel_id: null, leaderboard_message_id: null };
  guildConfigs.set(guildId, defaultCfg);
  return defaultCfg;
}

function saveSetupConfig(cfg) {
  try {
    db.prepare(`
      INSERT OR REPLACE INTO setup_config (guildId, messages_needed, points, no_repetir, banco_channel_id, leaderboard_message_id)
      VALUES (?, ?, ?, ?, ?, ?)
    `).run(cfg.guildId, cfg.messages_needed, cfg.points, cfg.no_repetir ? 1 : 0, cfg.banco_channel_id, cfg.leaderboard_message_id);
    guildConfigs.set(cfg.guildId, cfg);
  } catch (e) {
    logger.error('Error guardando setup config', { error: e, guildId: cfg.guildId });
  }
}

// -----------------------
// Función para crear o actualizar embed leaderboard en canal #banco
async function updateLeaderboardEmbed(guild) {
  try {
    const cfg = getSetupConfig(guild.id);
    if (!cfg.banco_channel_id) {
      logger.warn('No banco_channel_id configurado para leaderboard', { guildId: guild.id });
      return;
    }
    const channel = guild.channels.cache.get(cfg.banco_channel_id);
    if (!channel) {
      logger.warn('Canal banco_channel_id no encontrado', { guildId: guild.id, channelId: cfg.banco_channel_id });
      return;
    }

    // Obtener usuarios con puntos, ordenar por puntos descendente
    const usersWithPoints = Array.from(pointsMap.entries())
      .filter(([userId]) => guild.members.cache.has(userId))
      .map(([userId, pts]) => ({ userId, pts }))
      .sort((a, b) => b.pts - a.pts);

    if (usersWithPoints.length === 0) {
      // Si no hay usuarios, manda embed con mensaje vacío
      const embed = new EmbedBuilder()
        .setTitle('Leaderboard')
        .setDescription('No hay usuarios con puntos aún.')
        .setColor('Blue')
        .setTimestamp();

      if (cfg.leaderboard_message_id) {
        try {
          const msg = await channel.messages.fetch(cfg.leaderboard_message_id);
          await msg.edit({ embeds: [embed] });
          return;
        } catch {
          // si no se puede editar, eliminar id para forzar crear de nuevo
          cfg.leaderboard_message_id = null;
          saveSetupConfig(cfg);
          return;
        }
      } else {
        const msg = await channel.send({ embeds: [embed] });
        cfg.leaderboard_message_id = msg.id;
        saveSetupConfig(cfg);
        return;
      }
    }

    // Construir texto de leaderboard (top 25 máximo)
    const fields = [];
    let position = 1;
    for (const { userId, pts } of usersWithPoints.slice(0, 25)) {
      const member = guild.members.cache.get(userId);
      if (!member) continue;
      fields.push({
        name: `#${position} - ${member.user.tag}`,
        value: `${pts} puntos`,
        inline: false
      });
      position++;
    }

    const embed = new EmbedBuilder()
      .setTitle('🏆 Leaderboard de Puntos')
      .setColor('Gold')
      .addFields(fields)
      .setTimestamp();

    if (cfg.leaderboard_message_id) {
      // Editar mensaje existente
      try {
        const msg = await channel.messages.fetch(cfg.leaderboard_message_id);
        await msg.edit({ embeds: [embed] });
      } catch {
        // Si no existe o no se puede editar, crear mensaje nuevo
        const msg = await channel.send({ embeds: [embed] });
        cfg.leaderboard_message_id = msg.id;
        saveSetupConfig(cfg);
      }
    } else {
      // Crear mensaje nuevo y guardar id
      const msg = await channel.send({ embeds: [embed] });
      cfg.leaderboard_message_id = msg.id;
      saveSetupConfig(cfg);
    }

  } catch (e) {
    logger.error('Error actualizando leaderboard', { error: e, guildId: guild.id });
  }
}

// -----------------------
// Función para crear canal #banco si no existe y darle permisos de lectura/escritura al bot
async function ensureBancoChannel(guild) {
  const cfg = getSetupConfig(guild.id);
  if (cfg.banco_channel_id) {
    const ch = guild.channels.cache.get(cfg.banco_channel_id);
    if (ch) return ch;
  }
  // Crear canal texto llamado 'banco'
  const ch = await guild.channels.create({
    name: 'banco',
    type: ChannelType.GuildText,
    permissionOverwrites: [
      {
        id: guild.roles.everyone,
        deny: [PermissionsBitField.Flags.SendMessages]
      },
      {
        id: client.user.id,
        allow: [PermissionsBitField.Flags.SendMessages, PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.EmbedLinks]
      }
    ]
  });
  const cfgNew = getSetupConfig(guild.id);
  cfgNew.banco_channel_id = ch.id;
  saveSetupConfig(cfgNew);
  return ch;
}

// -----------------------
// Función para chequear si el usuario es owner
function isOwner(userId) {
  const owners = (process.env.OWNER_IDS || '').split(',');
  return owners.includes(userId);
}

// -----------------------
// Función para manejar mensaje nuevo y contar para puntos
async function handleNewMessage(message) {
  if (message.author.bot) return;
  if (!message.guild) return;
  const guildId = message.guild.id;
  const userId = message.author.id;

  // Cargar configuración
  const cfg = getSetupConfig(guildId);

  // Inicializar estructura para trackeo de mensajes por usuario en ese guild
  if (!userMessageTrack.has(guildId)) userMessageTrack.set(guildId, new Map());
  const userTrack = userMessageTrack.get(guildId);

  let userData = userTrack.get(userId);
  if (!userData) {
    userData = { lastMessage: null, countMessages: 0 };
    userTrack.set(userId, userData);
  }

  // Condiciones no_repetir
  if (cfg.no_repetir) {
    const content = message.content.trim().toLowerCase();
    if (content.length < 4) return; // Mensajes muy cortos no cuentan
    if (content === userData.lastMessage) return; // Repetición exacta, no cuenta
    userData.lastMessage = content;
  }

  userData.countMessages++;

  if (userData.countMessages >= cfg.messages_needed) {
    // Dar puntos
    const newPoints = addUserPoints(userId, cfg.points);
    userData.countMessages = 0;

    // Actualizar leaderboard
    try {
      const guild = message.guild;
      await updateLeaderboardEmbed(guild);
    } catch (e) {
      logger.error('Error actualizando leaderboard tras sumar puntos', { error: e, guildId });
    }
  }
}

// -----------------------
// Comandos slash que registrarás con /setup
let commands = [
  new SlashCommandBuilder()
    .setName('botinfo')
    .setDescription('Muestra información del bot con su icono'),

  new SlashCommandBuilder()
    .setName('createembed')
    .setDescription('Crea un embed comprable (solo owners)')
    .addStringOption(opt =>
      opt.setName('title')
        .setDescription('Título del embed')
        .setRequired(true))
    .addIntegerOption(opt =>
      opt.setName('pointsneeded')
        .setDescription('Puntos necesarios para comprar')
        .setRequired(true))
    .addStringOption(opt =>
      opt.setName('gameid')
        .setDescription('ID del juego (ejemplo: repo)')
        .setRequired(true))
    .addStringOption(opt =>
      opt.setName('description')
        .setDescription('Descripción del embed')
        .setRequired(false))
    .addStringOption(opt =>
      opt.setName('color')
        .setDescription('Color en hexadecimal o nombre')
        .setRequired(false))
    .addStringOption(opt =>
      opt.setName('footer')
        .setDescription('Texto de footer')
        .setRequired(false))
    .addStringOption(opt =>
      opt.setName('thumbnail_url')
        .setDescription('URL miniatura')
        .setRequired(false))
    .addStringOption(opt =>
      opt.setName('image_url')
        .setDescription('URL imagen grande')
        .setRequired(false)),

  new SlashCommandBuilder()
    .setName('givepoints')
    .setDescription('Dar puntos a un usuario (solo owners)')
    .addUserOption(opt =>
      opt.setName('usuario')
        .setDescription('Usuario a quien dar puntos')
        .setRequired(true))
    .addIntegerOption(opt =>
      opt.setName('puntos')
        .setDescription('Cantidad de puntos a dar (puede ser negativo)')
        .setRequired(true)),

  new SlashCommandBuilder()
    .setName('setup')
    .setDescription('Configura y registra comandos del bot (solo owners)')
    .addIntegerOption(opt =>
      opt.setName('messages_needed')
        .setDescription('Número de mensajes para ganar puntos')
        .setRequired(true))
    .addIntegerOption(opt =>
      opt.setName('points')
        .setDescription('Cantidad de puntos que se dan')
        .setRequired(true))
    .addBooleanOption(opt =>
      opt.setName('no_repetir')
        .setDescription('Evitar repetir mensajes cortos para puntuar')
        .setRequired(true))
];

// Convertir a JSON para registro
commands = commands.map(cmd => cmd.toJSON());

// -----------------------
// Función para registrar comandos (llamada por /setup)
async function registerCommands(guildId) {
  const rest = new REST({ version: '10' }).setToken(process.env.DISCORD_TOKEN);
  try {
    logger.info('Registrando comandos slash en guild', { guild: guildId });
    await rest.put(Routes.applicationGuildCommands(process.env.CLIENT_ID, guildId), { body: [] });
    logger.info('Comandos anteriores eliminados');
    await rest.put(
      Routes.applicationGuildCommands(process.env.CLIENT_ID, guildId),
      { body: commands }
    );
    logger.info('Comandos registrados correctamente.');
  } catch (err) {
    logger.error('Error registrando comandos:', { error: err });
    throw err;
  }
}

client.on('ready', async () => {
  logger.info('Bot listo', { tag: client.user.tag });
  // Al iniciar, cargar configuración de todos los guilds
  try {
    const rows = db.prepare('SELECT * FROM setup_config').all();
    for (const row of rows) {
      row.no_repetir = Boolean(row.no_repetir);
      guildConfigs.set(row.guildId, row);
    }
  } catch (e) {
    logger.error('Error cargando setup configs al iniciar', { error: e });
  }
});

// -----------------------
// Manejo de interacciones
client.on('interactionCreate', async interaction => {
  try {
    if (interaction.isChatInputCommand()) {
      const cmd = interaction.commandName;

      if (cmd === 'botinfo') {
        const embed = new EmbedBuilder()
          .setTitle(`¡Hola! Soy ${client.user.username}`)
          .setThumbnail(client.user.displayAvatarURL({ format: 'png', size: 512 }));
        await interaction.reply({ embeds: [embed], ephemeral: true });
        logger.info('Ejecutado /botinfo', { user: interaction.user.id });
      }

      else if (cmd === 'createembed') {
        if (!isOwner(interaction.user.id)) {
          return interaction.reply({ content: 'No tienes permisos para usar este comando.', ephemeral: true });
        }

        const title = interaction.options.getString('title');
        const needed = interaction.options.getInteger('pointsneeded');
        const gameid = interaction.options.getString('gameid').toLowerCase();
        const description = interaction.options.getString('description') || null;
        const color = interaction.options.getString('color') || null;
        const footer = interaction.options.getString('footer') || null;
        const thumbnail = interaction.options.getString('thumbnail_url') || null;
        const image = interaction.options.getString('image_url') || null;

        const embed = new EmbedBuilder().setTitle(title);
        if (description) embed.setDescription(description);
        if (color) {
          try { embed.setColor(color); } catch {}
        }
        if (footer) embed.setFooter({ text: footer });
        if (thumbnail) embed.setThumbnail(thumbnail);
        if (image) embed.setImage(image);

        // Botón con puntos y gameid
        const customId = `buy_embed_${needed}_${gameid}`;
        const button = new ButtonBuilder()
          .setCustomId(customId)
          .setLabel(`💰 ${needed}`)
          .setStyle(ButtonStyle.Success);
        const row = new ActionRowBuilder().addComponents(button);

        const sent = await interaction.reply({ embeds: [embed], components: [row], fetchReply: true, ephemeral: false });

        logger.info('Embed comprable creado', { user: interaction.user.id, messageId: sent.id, needed, gameid });
      }

      else if (cmd === 'givepoints') {
        if (!isOwner(interaction.user.id)) {
          return interaction.reply({ content: 'No tienes permisos para usar este comando.', ephemeral: true });
        }

        const targetUser = interaction.options.getUser('usuario');
        const pointsToAdd = interaction.options.getInteger('puntos');

        if (!targetUser) {
          return interaction.reply({ content: 'Usuario inválido.', ephemeral: true });
        }
        if (isNaN(pointsToAdd)) {
          return interaction.reply({ content: 'Cantidad de puntos inválida.', ephemeral: true });
        }

        const newPoints = addUserPoints(targetUser.id, pointsToAdd);
        await interaction.reply({ content: `✅ Ahora ${targetUser.tag} tiene ${newPoints} puntos.`, ephemeral: false });
        logger.info('Puntos asignados', { from: interaction.user.id, to: targetUser.id, points: pointsToAdd });

        // Actualizar leaderboard
        try {
          const guild = interaction.guild;
          await updateLeaderboardEmbed(guild);
        } catch (e) {
          logger.error('Error actualizando leaderboard tras givepoints', { error: e, guildId: guild.id });
        }
      }

      else if (cmd === 'setup') {
        if (!isOwner(interaction.user.id)) {
          return interaction.reply({ content: 'No tienes permisos para usar este comando.', ephemeral: true });
        }

        // Leer opciones
        const messages_needed = interaction.options.getInteger('messages_needed');
        const points = interaction.options.getInteger('points');
        const no_repetir = interaction.options.getBoolean('no_repetir');

        // Guardar configuración en DB y memoria
        const cfg = getSetupConfig(interaction.guildId);
        cfg.messages_needed = messages_needed;
        cfg.points = points;
        cfg.no_repetir = no_repetir;

        // Crear o asegurar canal banco
        const bancoChannel = await ensureBancoChannel(interaction.guild);
        cfg.banco_channel_id = bancoChannel.id;

        saveSetupConfig(cfg);

        // Actualizar leaderboard embed (crearlo o actualizarlo)
        await updateLeaderboardEmbed(interaction.guild);

        await interaction.reply({
          content: `✅ Setup completado.\n- messages_needed: ${messages_needed}\n- points: ${points}\n- no_repetir: ${no_repetir}\nLeaderboard creado/actualizado en ${bancoChannel.toString()}`,
          ephemeral: true
        });
        logger.info('Setup completado', { guildId: interaction.guildId, user: interaction.user.id });
      }
    }
    else if (interaction.isButton()) {
      const customId = interaction.customId;

      if (customId.startsWith('buy_embed_')) {
        // customId = buy_embed_<points>_<gameid>
        const parts = customId.split('_');
        const needed = parseInt(parts[2]);
        const gameid = parts.slice(3).join('_'); // para gameid con guiones

        const userId = interaction.user.id;
        const currentPoints = pointsMap.get(userId) || 0;

        if (currentPoints < needed) {
          return interaction.reply({ content: `❌ No tienes suficientes puntos. Necesitas ${needed}, tienes ${currentPoints}.`, ephemeral: true });
        }

        // Restar puntos
        const after = addUserPoints(userId, -needed);

        // Generar código único
        let code;
        do {
          code = generateCode();
          const exists = db.prepare('SELECT 1 FROM codes WHERE code = ?').get(code);
          if (!exists) break;
        } while (true);

        // Guardar código con gameid
        const msg = interaction.message;
        storeCodeInDb(code, userId, msg.channelId, msg.id, gameid);

        // Obtener nombre bonito o fallback
        const gameName = gamesMap[gameid] || gameid.toUpperCase();

        // Enviar código por DM
        try {
          const dm = await interaction.user.createDM();
          await dm.send(`🎉 Gracias por tu compra. Aquí está tu código de uso único para el juego **${gameName}**:\n\`${code}\``);
          logger.info('Código de compra enviado por DM', { to: userId, code, gameid });
        } catch (e) {
          logger.warn('No se pudo enviar DM al usuario', { userId, error: e });
          return interaction.reply({ content: '❌ No pude enviarte un DM. Por favor, habilita tus mensajes directos.', ephemeral: true });
        }

        await interaction.reply({ content: `✅ Compra exitosa. Te quedan ${after} puntos. Código enviado por DM.`, ephemeral: true });
        logger.info('Compra realizada', { user: userId, pointsSpent: needed, remaining: after, gameid });
      }
    }
  } catch (err) {
    logger.error('Error en interactionCreate', { error: err.stack || err });
    if (!interaction.replied && !interaction.deferred) {
      await interaction.reply({ content: 'Ocurrió un error al procesar la interacción.', ephemeral: true });
    }
  }
});

// -----------------------
// Contar mensajes para puntos (listener)
client.on('messageCreate', async message => {
  try {
    await handleNewMessage(message);
  } catch (e) {
    logger.error('Error en messageCreate', { error: e });
  }
});
// Lógica para la WEB de GitHub
import express from 'express';

const app = express();
app.use(express.json());

// Ruta POST para validar código
app.post('/check-code', (req, res) => {
  const { code } = req.body;
  if (!code) {
    return res.status(400).json({ success: false, message: 'Código requerido' });
  }
  try {
    const row = db.prepare('SELECT used, gameid FROM codes WHERE code = ?').get(code);
    if (!row) {
      return res.json({ success: false, message: 'Código no válido' });
    }
    if (row.used) {
      return res.json({ success: false, message: 'Código ya usado' });
    }
    // Si quieres devolver también el gameid o nombre bonito:
    const gameid = row.gameid;
    const gameName = gamesMap[gameid] || gameid.toUpperCase();
    return res.json({
      success: true,
      message: 'Código válido y sin usar',
      gameid,
      gameName
    });
  } catch (err) {
    logger.error('Error en /check-code', { error: err });
    return res.status(500).json({ success: false, message: 'Error interno del servidor' });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  logger.info(`API HTTP escuchando en puerto ${PORT}`);
});

// -----------------------
client.login(process.env.DISCORD_TOKEN)
  .then(() => {
    logger.info('login exitoso');
  })
  .catch(err => {
    logger.error('Error al iniciar sesión en Discord', { error: err });
  });

process.on('SIGINT', async () => {
  console.log('Recibido SIGINT. Cerrando cliente Discord...');
  try {
    await client.destroy();
    console.log('Cliente Discord desconectado.');
    process.exit(0);
  } catch (e) {
    console.error('Error al desconectar cliente Discord:', e);
    process.exit(1);
  }
});
"
de2zhvrL,http metho,joaofabioma,PostgreSQL,Wednesday 25th of June 2025 09:00:13 AM CDT,"CREATE TYPE http_method AS ENUM (
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'OPTIONS',
    'HEAD',
    'TRACE',
    'CONNECT'
);
"
s7Cse9x2,funny rock velocity,ZB0BBY,Lua,Wednesday 25th of June 2025 08:33:24 AM CDT,"local tweenService = game:GetService(""TweenService"")

local module = {
	[""Accretion""] = function(player, params)
		local root = params.player.Character.HumanoidRootPart
		local round = 0
		
		local model = Instance.new(""Model"")
		model.Parent = workspace.Fx
		
		local rockCenter = Instance.new(""Part"")
		rockCenter.Size = Vector3.one
		rockCenter.CanCollide = false
		rockCenter.Transparency = 1
		rockCenter.Position = (root.Position + root.CFrame.LookVector * 7) + Vector3.new(-2, 0,0)
		rockCenter.Anchored = false
		rockCenter.Massless = false
		rockCenter.Parent = model
		
		local weld = Instance.new(""WeldConstraint"")
		weld.Part0 = root
		weld.Part1 = rockCenter
		weld.Parent = rockCenter
		
		while wait(0.01) do
			if round == 10 then round = 0 return end
			local offset = Vector3.new(math.random(-30, 30), math.random(-2, 5), -math.random(-30, 30))
			local randomScale = math.random(2, 4) 
			local ranSize = Vector3.new(randomScale, randomScale, randomScale)
			local worldPos = (root.CFrame * CFrame.new(offset)).Position
			
			local part = Instance.new(""Part"")
			part.Position = worldPos
			part.Size = ranSize
			part.Anchored = true
			part.CanCollide = false
			part.Massless = true
			--part.Orientation = math.random()
			part.Parent = model
			model.PrimaryPart = rockCenter
			
			
			
			local raycastOrigin = part.Position
			local rayDirect = Vector3.new(0, -100, 0)
			local raycastParams = RaycastParams.new()
			raycastParams.FilterDescendantsInstances = {part}
			raycastParams.FilterType = Enum.RaycastFilterType.Exclude
			local rayReseult = workspace:Raycast(raycastOrigin, rayDirect, raycastParams)
			
			if rayReseult then
				local hitPart = rayReseult.Instance
				if hitPart and hitPart:IsA(""BasePart"") then
					part.Material = rayReseult.Material
					part.Color = hitPart.Color
				end
			else 
				part.Material = Enum.Material.SmoothPlastic
			end
			
			local goal = {}
			goal.Position = rockCenter.Position + Vector3.new(math.random(1, 3), math.random(1, 2), math.random(1, 3))
			local tw = tweenService:Create(part, TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), goal)
			tw:Play()
			
			local weld2 = Instance.new(""WeldConstraint"")
			weld2.Part0 = rockCenter
			weld2.Part1 = part
			weld2.Parent = part
			
			tw.Completed:Connect(function()
				part.Anchored = false
				weld.Part0 = nil -- comment out this line for funny

				local attach = Instance.new(""Attachment"")
				attach.Parent = part

				local lv = Instance.new(""LinearVelocity"")
				lv.Attachment0 = attach
				--lv.VelocityConstraintMode = Enum.VelocityConstraintMode.Vector
				lv.MaxForce = 999999

				-- Launch direction (in front of the player)
				local direction = root.CFrame.LookVector * 5 -- adjust speed here
				lv.VectorVelocity = direction

				lv.Parent = part -- 👈 parent the LinearVelocity to the part as well
			end)
			
			round += 1
		end

		
	end,
}

return module
"
1fgUjcuv,Untitled,jdelano,VisualBasic,Wednesday 25th of June 2025 08:29:36 AM CDT,"Private Sub btnGetInfo_Click()

    ' loop the table to find the information for eac registration
    Dim sheetRow As Long
    Dim siteURL As String
    Dim registration As String
    Dim lastRow As Long
    
    Dim listDIVs As WebElements  ' all the div elements inside where the Registration / Fleet Number info is
    Dim listDiv As WebElement    ' each div
    Dim anchorElement As WebElement  ' the element that contains the anchor to click (its text equals col A in the sheet)
    
    Dim subDIVs As WebElements   ' all the div elements showing the data after clicking the registration
    
    Dim cDriver As ChromeDriver
    
    ' create a chomedriver object
    Set cDriver = New ChromeDriver
    siteURL = ""https://www.planespotters.net/search?q=""
    
    lastRow = Sheet1.Cells(Sheet1.Rows.Count, ""A"").End(xlUp).Row ' which row is the last one used
    
    ' loop the data on the sheet - change the 5 to whatever the data starts in the future
    For sheetRow = 5 To lastRow
        registration = Sheet1.Cells(sheetRow, ""A"").Value
        
        ' open Chrome and go to the specified address
        cDriver.Get siteURL & registration
        cDriver.Wait 2000 ' wait 2 seconds for the page to load
        
        ' find where the registration anchor is (clickable link), this is found by using
        ' the inspect option in the right click menu in chrome when viewing the webpage
        Set listDIVs = cDriver.FindElementsByClass(""dt-tr"")(2).FindElementsByTag(""div"")
        
        For Each listDiv In listDIVs
            If listDiv.FindElementByTag(""a"").Text <> """" Then
                ' this is a div that contains a link to click
                Set anchorElement = listDiv.FindElementByTag(""a"")
                
                ' if the link text matches the registration info from teh sheet then leave the loop
                If anchorElement.Text = registration Then Exit For
            End If
        
        Next listDiv
        
        ' click the link that was found above
        anchorElement.Click
        cDriver.Wait 2000 ' wait 2 seconds for the page to load
       
        ' get the divs that make up the location of the data in the page
        On Error Resume Next
        Set subDIVs = cDriver.FindElementByClass(""flex-column"").FindElementsByClass(""dt-tr"")
        
        If Err <> 0 Then
            ' there may be an advert infront of the data that needs to be cleared before moving on
            MsgBox ""The webpage isn't displaying corrently. Click close on the advertisement then click OK on this message to continue"", vbOKOnly, ""Page Issue""
            Set subDIVs = cDriver.FindElementByClass(""flex-column"").FindElementsByClass(""dt-tr"")
        End If
        Err = 0
        On Error GoTo 0
        
        Sheet1.Cells(sheetRow, ""D"").Value = SearchDIVs(""MSN"", subDIVs)                           ' MSN
        Sheet1.Cells(sheetRow, ""C"").Value = SearchDIVs(""Line Number"", subDIVs)                   ' Line Number
        Sheet1.Cells(sheetRow, ""B"").Value = SearchDIVs(""Aircraft Type"", subDIVs)                 ' aircraft type
        Sheet1.Cells(sheetRow, ""E"").Value = cDriver.FindElementByTag(""h1"").Text                  ' airline/company
        
        ' remove the aircraft type from the airline company text at the top of the page
        Sheet1.Cells(sheetRow, ""E"").Value = Replace(Sheet1.Cells(sheetRow, ""E"").Value, UCase(Sheet1.Cells(sheetRow, ""B"").Value), """")
        
        Set subDIVs = Nothing
        
        DoEvents
    Next sheetRow
    
    Set listDIVs = Nothing
    
    cDriver.Close
    Set cDriver = Nothing
    
    MsgBox ""Done.""
    
End Sub

Private Function SearchDIVs(valueTitle As String, subDIVs As WebElements) As String

    ' go through each div text in the list of divs passed.
    ' find the value associated to the title
    
    Dim subDiv As WebElement
    Dim titleDiv As WebElement
    Dim valueDiv As WebElement
    
    For Each subDiv In subDIVs
        ' get the data from the 2 divs inside the list div
        Set titleDiv = subDiv.FindElementsByTag(""div"")(1)
        Set valueDiv = subDiv.FindElementsByTag(""div"")(2)
        
        If InStr(titleDiv.Text, valueTitle) > 0 Then
            If valueTitle = ""Aircraft Type"" Then
                ' the aircraft type has an unordered list with a list element inside it
                ' unlike the other items wanted from the web page
                SearchDIVs = subDiv.FindElementsByTag(""li"")(2).Text
            Else
                SearchDIVs = valueDiv.Text
            End If
            
            Exit Function
        End If
    
    Next subDiv

    SearchDIVs = """"
End Function
"
XhrB2QEx,Utils,supinus,Lua,Wednesday 25th of June 2025 07:46:07 AM CDT,
fdNcdqmD,Police,supinus,Lua,Wednesday 25th of June 2025 07:44:50 AM CDT,"ac.log('Script: Police')
local sim = ac.getSim()
local car = ac.getCar(0) or error()
if not car then return end
local wheels = car.wheels or error()
local uiState = ac.getUI()

ui.setAsynchronousImagesLoading(true)

local localTesting = ac.dirname() == 'C:\\Program Files (x86)\\Steam\\steamapps\\common\\assettocorsa\\extension\\lua\\online'
local initialisation = true

-- Constants --
local STEAMID = const(ac.getUserSteamID())
local CSP_VERSION = const(ac.getPatchVersionCode())
local CSP_MIN_VERSION = const(3116)

local SHARED_PLAYER_DATA = const('__ACP_SHARED_PLAYER_DATA')
local SHARED_EVENT_KEY = const('__ACP_PLAYER_SHARED_UPDATE')

local CAR_ID = const(ac.getCarID(0))
local CAR_NAME = const(ac.getCarName(0))
local POLICE_CAR = const({ ""ids_2022_ford_crown"", ""r34police_acp24"" })

local DRIVER_NAME = const(ac.getDriverName(0))
---@param carID string
local function isPoliceCar(carID)
	for _, carName in ipairs(POLICE_CAR) do
		if carID == carName then
			return true
		end
	end
	return false
end

if CSP_VERSION < CSP_MIN_VERSION or not isPoliceCar(CAR_ID) then return end

local DRIVER_NATION_CODE = const(ac.getDriverNationCode(0))
local UNIT = ""km/h""
local UNIT_MULT = 1
if DRIVER_NATION_CODE == ""USA"" or DRIVER_NATION_CODE == ""GBR"" then
	UNIT = ""mph""
	UNIT_MULT = 0.621371
end

-- URL --
local FIREBASE_URL = const('https://acp-server-97674-default-rtdb.firebaseio.com/')

-- UI --
local WINDOW_WIDTH = const(sim.windowWidth / uiState.uiScale)
local WIDTH_DIV = const({
	_2 = WINDOW_WIDTH / 2,
	_3 = WINDOW_WIDTH / 3,
	_4 = WINDOW_WIDTH / 4,
	_5 = WINDOW_WIDTH / 5,
	_6 = WINDOW_WIDTH / 6,
	_10 = WINDOW_WIDTH / 10,
	_12 = WINDOW_WIDTH / 12,
	_15 = WINDOW_WIDTH / 15,
	_20 = WINDOW_WIDTH / 20,
	_25 = WINDOW_WIDTH / 25,
	_32 = WINDOW_WIDTH / 32,
})

local WINDOW_HEIGHT = const(sim.windowHeight / uiState.uiScale)
local HEIGHT_DIV = const({
	_2 = WINDOW_HEIGHT / 2,
	_3 = WINDOW_HEIGHT / 3,
	_4 = WINDOW_HEIGHT / 4,
	_12 = WINDOW_HEIGHT / 12,
	_20 = WINDOW_HEIGHT / 20,
	_40 = WINDOW_HEIGHT / 40,
	_50 = WINDOW_HEIGHT / 50,
	_60 = WINDOW_HEIGHT / 60,
	_70 = WINDOW_HEIGHT / 70,
	_80 = WINDOW_HEIGHT / 80,
})

local FONT_MULT = const(WINDOW_HEIGHT / 1440)

local HUD_IMG = {}

local IMAGES = const({
	police = {
		url = ""https://github.com/ele-sage/ACP-apps/raw/refs/heads/master/images/police.zip"",
		hud = {
			""base.png"",
			""arrest.png"",
			""cams.png"",
			""logs.png"",
			""lost.png"",
			""menu.png"",
			""radar.png"",
		},
	},
})

---@param key string
local function loadImages(key)
	web.loadRemoteAssets(IMAGES[key].url, function(err, data)
		if err then
			ac.error('Failed to load welcome images:', err)
			return
		end
		local path = data .. '/' .. key .. '/'
		local files = io.scanDir(path, ""*"")

		for i, file in ipairs(files) do
			if table.contains(IMAGES.police.hud, file) then
				local k = file:match('(.+)%..+')
				HUD_IMG[k] = path .. file
			end
		end
	end)
end

loadImages(""police"")

local CAMERAS = const({
	{
		name = ""BOBs SCRAPYARD"",
		pos = vec3(-3564, 31.5, -103),
		dir = -8,
		fov = 60,
	},
	{
		name = ""ARENA"",
		pos = vec3(-2283, 115.5, 3284),
		dir = 128,
		fov = 70,
	},
	{
		name = ""BANK"",
		pos = vec3(-716, 151, 3556.4),
		dir = 12,
		fov = 95,
	},
	{
		name = ""STREET RUNNERS"",
		pos = vec3(-57.3, 103.5, 2935.5),
		dir = 16,
		fov = 67,
	},
	{
		name = ""ROAD CRIMINALS"",
		pos = vec3(-2332, 101.1, 3119.2),
		dir = 121,
		fov = 60,
	},
	{
		name = ""RECKLESS RENEGADES"",
		pos = vec3(-2993.7, -24.4, -601.7),
		dir = -64,
		fov = 60,
	},
	{
		name = ""MOTION MASTERS"",
		pos = vec3(-2120.4, -11.8, -1911.5),
		dir = 102,
		fov = 60,
	},
})

local MSG_ARREST = const({
	""`NAME` has been arrested for Speeding. The individual was driving a `CAR`."",
	""We have apprehended `NAME` for Speeding. The suspect was behind the wheel of a `CAR`."",
	""The driver of a `CAR`, identified as `NAME`, has been arrested for Speeding."",
	""`NAME` has been taken into custody for Illegal Racing. The suspect was driving a `CAR`."",
	""We have successfully apprehended `NAME` for Illegal Racing. The individual was operating a `CAR`."",
	""The driver of a `CAR`, identified as `NAME`, has been arrested for Illegal Racing."",
	""`NAME` has been apprehended for Speeding. The suspect was operating a `CAR` at the time of the arrest."",
	""We have successfully detained `NAME` for Illegal Racing. The individual was driving a `CAR`."",
	""`NAME` driving a `CAR` has been arrested for Speeding"",
	""`NAME` driving a `CAR` has been arrested for Illegal Racing.""
})

local MSG_LOST = const({
	""We've lost sight of the suspect. The vehicle involved is described as a `CAR` driven by `NAME`."",
	""Attention all units, we have lost visual contact with the suspect. The vehicle involved is a `CAR` driven by `NAME`."",
	""We have temporarily lost track of the suspect. The vehicle description is a `CAR` with `NAME` as the driver."",
	""Visual contact with the suspect has been lost. The suspect is driving a `CAR` and identified as `NAME`."",
	""We have lost the suspect's visual trail. The vehicle in question is described as a `CAR` driven by `NAME`."",
	""Suspect have been lost, Vehicle Description:`CAR` driven by `NAME`"",
	""Visual contact with the suspect has been lost. The suspect is driving a `CAR` and identified as `NAME`."",
	""We have lost the suspect's visual trail. The vehicle in question is described as a `CAR` driven by `NAME`."",
})

local MSG_ENGAGE = const({
	""Control! I am engaging on a `CAR` traveling at `SPEED`"",
	""Pursuit in progress! I am chasing a `CAR` exceeding `SPEED`"",
	""Control, be advised! Pursuit is active on a `CAR` driving over `SPEED`"",
	""Attention! Pursuit initiated! Im following a `CAR` going above `SPEED`"",
	""Pursuit engaged! `CAR` driving at a high rate of speed over `SPEED`"",
	""Attention all units, we have a pursuit in progress! Suspect driving a `CAR` exceeding `SPEED`"",
	""Attention units! We have a suspect fleeing in a `CAR` at high speed, pursuing now at `SPEED`"",
	""Engaging on a high-speed chase! Suspect driving a `CAR` exceeding `SPEED`!"",
	""Attention all units! we have a pursuit in progress! Suspect driving a `CAR` exceeding `SPEED`"",
	""High-speed chase underway, suspect driving `CAR` over `SPEED`"",
	""Control, `CAR` exceeding `SPEED`, pursuit active."",
	""Engaging on a `CAR` exceeding `SPEED`, pursuit initiated.""
})

local dataLoaded = {}
dataLoaded['Settings'] = false
dataLoaded['PlayerData'] = false

---@param key string
local function removeUtf8Char(key)
	local newKey = ''
	for i = 1, #key do
		local c = key:sub(i, i)
		if c:byte() < 128 then
			newKey = newKey .. c
		end
	end
	newKey = newKey:match('^%s*(.-)%s*$')
	return newKey
end

local CAR_NAME_NO_UTF8 = removeUtf8Char(CAR_NAME)

--------- Utils ------------
---@param keys string[]
---@param t table
local function hasKeys(keys, t)
	for i = 1, #keys do
		if not t[keys[i]] then
			ac.error('Missing key:', keys[i])
			return false
		end
	end
	return true
end

---@param number number
---@param decimal integer
---@return number
local function truncate(number, decimal)
	local power = 10 ^ decimal
	return math.floor(number * power) / power
end


---@param t table
local function tableToVec3(t)
	return vec3(t[1], t[2], t[3])
end

---@param t table
local function tableToVec2(t)
	return vec2(t[1], t[2])
end

---@param t table
local function tableToRGBM(t)
	return rgbm(t[1], t[2], t[3], t[4])
end

---@param err string
---@param response WebResponse
---@return boolean
local function canProcessRequest(err, response)
	if err then
		ac.error('Failed to process request:', err)
		return false
	end
	return response.status == 200 and response.body ~= ''
end

---@param response WebResponse
---@return boolean
local function hasExistingData(response)
	return response.status == 200 and response.body ~= 'null'
end

---@param v vec3
---@return vec3
local function snapToTrack(v)
	if physics.raycastTrack(v, vDown, 20, v) == -1 then
		physics.raycastTrack(v, vUp, 20, v)
	end
	return v
end

---@param time number
---@return string
local function formatTime(time)
	local minutes = math.floor(time / 60)
	local seconds = math.floor(time % 60)
	local milliseconds = math.floor((time % 1) * 1000)
	return ('%02d:%02d.%03d'):format(minutes, seconds, milliseconds)
end

local DEFAULT_SETTINGS = const({
	essentialSize = 20,
	policeSize = 20,
	hudOffset = vec2(0, 0),
	fontSize = 20,
	current = 1,
	colorHud = rgbm(1, 0, 0, 1),
	timeMsg = 10,
	msgOffset = vec2(WIDTH_DIV._2, 10),
	fontSizeMSG = 30,
	menuPos = vec2(0, 0),
	unit = UNIT,
	unitMult = UNIT_MULT,
	starsSize = 20,
	starsPos = vec2(WINDOW_WIDTH, 0),
})

---@class Settings
---@field essentialSize number
---@field policeSize number
---@field hudOffset vec2
---@field fontSize number
---@field current number
---@field colorHud rgbm
---@field timeMsg number
---@field msgOffset vec2
---@field fontSizeMSG number
---@field menuPos vec2
---@field unit string
---@field unitMult number
---@field starsSize number
---@field starsPos vec2
local Settings = class('Settings')

---@return Settings
function Settings.new()
	local settings = table.clone(DEFAULT_SETTINGS, true)
	setmetatable(settings, { __index = Settings })
	return settings
end

---@param data table
---@return Settings
function Settings.tryParse(data)
	local hudOffset = data.hudOffset and tableToVec2(data.hudOffset) or vec2(0, 0)
	local colorHud = data.colorHud and tableToRGBM(data.colorHud) or rgbm(1, 0, 0, 1)
	local msgOffset = data.msgOffset and tableToVec2(data.msgOffset) or vec2(WIDTH_DIV._2, 10)
	local menuPos = data.menuPos and tableToVec2(data.menuPos) or vec2(0, 0)
	local starsPos = data.starsPos and tableToVec2(data.starsPos) or vec2(WINDOW_WIDTH, 0)
	local settings = {
		essentialSize = data.essentialSize or 20,
		policeSize = data.policeSize or 20,
		hudOffset = hudOffset,
		fontSize = data.fontSize or 20,
		current = data.current or 1,
		colorHud = colorHud,
		timeMsg = data.timeMsg or 10,
		msgOffset = msgOffset,
		fontSizeMSG = data.fontSizeMSG or 30,
		menuPos = menuPos,
		unit = data.unit or UNIT,
		unitMult = data.unitMult or UNIT_MULT,
		starsSize = data.starsSize or 20,
		starsPos = starsPos,
	}
	setmetatable(settings, { __index = Settings })
	return settings
end

---@param url string
---@param callback function
function Settings.fetch(url, callback)
	if localTesting then
		local currentPath = ac.getFolder(ac.FolderID.ScriptOrigin)
		local file = io.open(currentPath .. '/response/settingsResponse.json', 'r')
		if not file then
			ac.error('Failed to open response.json')
			callback(Settings.new())
			return
		end
		local data = JSON.parse(file:read('*a'))
		file:close()
		local settings = Settings.tryParse(data)
		callback(settings)
	else
		web.get(url, function(err, response)
			if canProcessRequest(err, response) then
				if hasExistingData(response) then
					local data = JSON.parse(response.body)
					if data then
						local settings = Settings.tryParse(data)
						callback(settings)
					else
						ac.error('Failed to parse settings data.')
						callback(Settings.new())
					end
				else
					callback(Settings.new())
				end
			else
				ac.error('Failed to fetch settings:', err)
				callback(Settings.new())
			end
		end)
	end
end

---@param callback function
function Settings.allocate(callback)
	local url = FIREBASE_URL .. 'Settings/' .. STEAMID .. '.json'
	ac.log('Loading settings')
	Settings.fetch(url, function(settings)
		callback(settings)
	end)
end

---@return table
function Settings:export()
	local data = {}
	if self.essentialSize ~= DEFAULT_SETTINGS.essentialSize then
		data.essentialSize = self.essentialSize
	end
	if self.policeSize ~= DEFAULT_SETTINGS.policeSize then
		data.policeSize = self.policeSize
	end
	if self.hudOffset ~= DEFAULT_SETTINGS.hudOffset then
		data.hudOffset = { self.hudOffset.x, self.hudOffset.y }
	end
	if self.fontSize ~= DEFAULT_SETTINGS.fontSize then
		data.fontSize = self.fontSize
	end
	if self.current ~= DEFAULT_SETTINGS.current then
		data.current = self.current
	end
	if self.colorHud ~= DEFAULT_SETTINGS.colorHud then
		data.colorHud = { self.colorHud.r, self.colorHud.g, self.colorHud.b, self.colorHud.mult }
	end
	if self.timeMsg ~= DEFAULT_SETTINGS.timeMsg then
		data.timeMsg = self.timeMsg
	end
	if self.msgOffset ~= DEFAULT_SETTINGS.msgOffset then
		data.msgOffset = { self.msgOffset.x, self.msgOffset.y }
	end
	if self.fontSizeMSG ~= DEFAULT_SETTINGS.fontSizeMSG then
		data.fontSizeMSG = self.fontSizeMSG
	end
	if self.menuPos ~= DEFAULT_SETTINGS.menuPos then
		data.menuPos = { self.menuPos.x, self.menuPos.y }
	end
	if self.unit ~= DEFAULT_SETTINGS.unit then
		data.unit = self.unit
	end
	if self.unitMult ~= DEFAULT_SETTINGS.unitMult then
		data.unitMult = self.unitMult
	end
	if self.starsSize ~= DEFAULT_SETTINGS.starsSize then
		data.starsSize = self.starsSize
	end
	if self.starsPos ~= DEFAULT_SETTINGS.starsPos then
		data.starsPos = { self.starsPos.x, self.starsPos.y }
	end
	return data
end

function Settings:save()
	if localTesting then return end
	local str = '{""' .. STEAMID .. '"": ' .. JSON.stringify(self:export()) .. '}'
	web.request('PATCH', FIREBASE_URL .. ""Settings.json"", str, function(err, response)
		if err then
			ac.error(err)
			return
		end
	end)
end

local patchCount = 0


---@class SectorStats
---@field name string
---@field records table<string, number>
local SectorStats = class('SectorStats')

---@param name string
---@param data table
---@return SectorStats
function SectorStats.tryParse(name, data)
	local records = {}
	for carName, time in pairs(data) do
		local nameWithoutUtf8 = removeUtf8Char(carName)
		records[nameWithoutUtf8] = time
	end
	local sectorStats = {
		name = name,
		records = records,
	}
	setmetatable(sectorStats, { __index = SectorStats })
	return sectorStats
end

---@param name string
---@param data table
---@return SectorStats|nil
function SectorStats.allocate(name, data)
	if type(data) == 'table' then
		local sectorStats = SectorStats.tryParse(name, data)
		if not sectorStats then
			ac.error('Failed to allocate sector stat')
			return nil
		end
		return sectorStats
	end
	if type(data) == 'number' then
		local records = {}
		records[CAR_NAME_NO_UTF8] = data
		local sectorStats = {
			name = name,
			records = records,
		}
		setmetatable(sectorStats, { __index = SectorStats })
		return sectorStats
	end
	ac.error('Failed to allocate sector stat')
	return nil
end

---@param time number
---@return boolean
function SectorStats:addRecord(time)
	if not self.records[CAR_NAME_NO_UTF8] or self.records[CAR_NAME_NO_UTF8] > time then
		self.records[CAR_NAME_NO_UTF8] = time
		return true
	end
	return false
end

---@return table
function SectorStats:export()
	local records = {}
	for carName, time in pairs(self.records) do
		records[carName] = truncate(time, 3)
	end
	return {
		[self.name] = records
	}
end

local lastRegister = {
	kms = 0,
	time = os.clock(),
}

---@class Player
---@field name string
---@field sectors SectorStats[]
---@field sectorsFormated table<string, table<string, string>>
---@field arrests integer
---@field getaways integer
---@field thefts integer
---@field heists integer
---@field deliveries integer
---@field overtake integer
---@field wins integer
---@field losses integer
---@field elo integer
---@field kms number
---@field time number
local Player = class('Player')

---@type Player | nil
local player = nil

local sharedPlayerLayout = {
	ac.StructItem.key(SHARED_PLAYER_DATA),
	hudColor = ac.StructItem.rgbm(),
	name = ac.StructItem.string(24),
	sectorsFormated = ac.StructItem.array(ac.StructItem.struct({
		name = ac.StructItem.string(16),
		records = ac.StructItem.array(ac.StructItem.string(50), 20)
	}), 5),
	arrests = ac.StructItem.uint16(),
	getaways = ac.StructItem.uint16(),
	thefts = ac.StructItem.uint16(),
	heists = ac.StructItem.uint16(),
	deliveries = ac.StructItem.uint16(),
	overtake = ac.StructItem.uint32(),
	wins = ac.StructItem.uint16(),
	losses = ac.StructItem.uint16(),
	elo = ac.StructItem.uint16(),
	kms = ac.StructItem.float(),
	time = ac.StructItem.float(),
}

---@type Settings | nil
local settings = nil

local sharedPlayerData = ac.connect(sharedPlayerLayout, true, ac.SharedNamespace.ServerScript)

local function updateSharedPlayerData()
	if not player then return end
	local hudC = rgbm.colors.red
	if settings then
		hudC = settings.colorHud
	end
	sharedPlayerData.hudColor = hudC
	sharedPlayerData.name = player.name
	sharedPlayerData.arrests = player.arrests
	sharedPlayerData.getaways = player.getaways
	sharedPlayerData.thefts = player.thefts
	sharedPlayerData.heists = player.heists
	sharedPlayerData.deliveries = player.deliveries
	sharedPlayerData.overtake = player.overtake
	sharedPlayerData.wins = player.wins
	sharedPlayerData.losses = player.losses
	sharedPlayerData.elo = player.elo
	sharedPlayerData.kms = player.kms
	sharedPlayerData.time = player.time
	sharedPlayerData.sectorsFormated = {}
	local i = 1
	table.forEach(player.sectorsFormated, function(v, k)
		sharedPlayerData.sectorsFormated[i].name = k .. '\0'
		for j, entry in ipairs(v) do
			local carName = string.sub(entry[1], 1, 45)
			sharedPlayerData.sectorsFormated[i].records[j] = carName .. ' - ' .. entry[2] .. '\0'
		end
		i = i + 1
	end)
end

---@return Player
function Player.new()
	local _player = {
		name = DRIVER_NAME,
		sectors = {},
		sectorsFormated = {},
		arrests = 0,
		getaways = 0,
		thefts = 0,
		heists = 0,
		deliveries = 0,
		overtake = 0,
		wins = 0,
		losses = 0,
		elo = 1200,
		kms = 0,
		time = 0,
	}
	setmetatable(_player, { __index = Player })
	return _player
end

---@param data table
---@return Player
function Player.tryParse(data)
	if not data then
		return Player.new()
	end
	local sectors = {}
	if data.sectors then
		for sectorName, sectorData in pairs(data.sectors) do
			local sector = SectorStats.allocate(sectorName, sectorData)
			if sector then
				table.insert(sectors, sector)
			end
		end
	end
	local _player = {
		name = DRIVER_NAME,
		sectors = sectors,
		sectorsFormated = {},
		arrests = data.arrests or 0,
		getaways = data.getaways or 0,
		thefts = data.thefts or 0,
		heists = data.heists or 0,
		deliveries = data.deliveries or 0,
		overtake = data.overtake or 0,
		wins = data.wins or 0,
		losses = data.losses or 0,
		elo = data.elo or 1200,
		kms = data.kms or 0,
		time = data.time or 0,
	}
	setmetatable(_player, { __index = Player })
	return _player
end

---@param url string
---@param callback function
function Player.fetch(url, callback)
	if localTesting then
		local currentPath = ac.getFolder(ac.FolderID.ScriptOrigin)
		local file = io.open(currentPath .. '/response/playerResponse.json', 'r')
		if not file then
			ac.error('Failed to open playerResponse.json')
			callback(Player.new())
			return
		end
		local data = JSON.parse(file:read('*a'))
		file:close()
		local _player = Player.tryParse(data)
		callback(_player)
	else
		web.get(url, function(err, response)
			if canProcessRequest(err, response) then
				if hasExistingData(response) then
					local data = JSON.parse(response.body)
					if data then
						local _player = Player.tryParse(data)
						callback(_player)
					else
						ac.error('Failed to parse player data.')
						callback(Player.new())
					end
				else
					callback(Player.new())
				end
			else
				ac.error('Failed to fetch player:', err)
				callback(Player.new())
			end
		end)
	end
end

---@param callback function
function Player.allocate(callback)
	local url = FIREBASE_URL .. 'Players/' .. STEAMID .. '.json'
	Player.fetch(url, function(_player)
		callback(_player)
	end)
end

function Player:sortSectors()
	for _, sector in ipairs(self.sectors) do
		local entries = {}
		for carName, time in pairs(sector.records) do
			table.insert(entries, { carName, time })
		end
		table.sort(entries, function(a, b)
			return a[2] < b[2]
		end)
		for i, entry in ipairs(entries) do
			entries[i][2] = formatTime(entry[2])
		end
		self.sectorsFormated[sector.name] = entries
	end
end

---@return table
function Player:export()
	local kms = truncate(car.distanceDrivenSessionKm - lastRegister.kms + self.kms, 3)
	local time = math.round(os.clock() - lastRegister.time + self.time, 0)
	local data = { name = self.name }

	if self.arrests > 0 then
		data.arrests = self.arrests
	end
	if self.getaways > 0 then
		data.getaways = self.getaways
	end
	if self.thefts > 0 then
		data.thefts = self.thefts
	end
	if self.heists > 0 then
		data.heists = self.heists
	end
	if self.deliveries > 0 then
		data.deliveries = self.deliveries
	end
	if self.overtake > 0 then
		data.overtake = self.overtake
	end
	if self.wins > 0 then
		data.wins = self.wins
	end
	if self.losses > 0 then
		data.losses = self.losses
	end
	if self.elo ~= 1200 then
		data.elo = self.elo
	end
	if kms > 0 then
		data.kms = kms
	end
	if time > 0 then
		data.time = time
	end

	lastRegister.kms = car.distanceDrivenSessionKm
	lastRegister.time = os.clock()

	local sectors = {}
	for _, sector in ipairs(self.sectors) do
		if not sector then
			break
		end
		local sectorData = sector:export()
		for k, v in pairs(sectorData) do
			sectors[k] = v
		end
	end
	if next(sectors) then
		data.sectors = sectors
	end
	self:sortSectors()
	updateSharedPlayerData()
	return data
end

function Player:save()
	local str = '{""' .. STEAMID .. '"": ' .. JSON.stringify(self:export()) .. '}'
	if localTesting or patchCount > 40 then return end
	patchCount = patchCount + 1
	web.request('PATCH', FIREBASE_URL .. ""Players.json"", str, function(err, response)
		if err then
			ac.error(err)
			return
		end
	end)
end

local canRun = false
local function shouldRun()
	if canRun then return true end
	local isDataLoaded = dataLoaded['Settings'] and dataLoaded['PlayerData']
	local hasNecessaryData = settings and player
	local hasMinVersion = CSP_VERSION >= CSP_MIN_VERSION
	if isDataLoaded and hasMinVersion and hasNecessaryData and isPoliceCar(CAR_ID) then
		canRun = true
	end
	return canRun
end

local settingsOpen = false
local arrestLogsOpen = false
local camerasOpen = false

local imageSize = vec2(0,0)

local pursuit = {
	suspect = nil,
	enable = false,
	maxDistance = 250000,
	minDistance = 40000,
	nextMessage = 30,
	level = 1,
	id = -1,
	timerArrest = 0,
	hasArrested = false,
	startedTime = 0,
	timeLostSight = 0,
	lostSight = false,
	engage = false,
}

local arrestations = {}

local playerInRangeUI = {
	fontSize = {
		div_2 = 20 / 2,
		div_2_5 = 20 / 2.5,
		div_3 = 20 / 3,
		div_1_5 = 20 / 1.5,
		div_1_2 = 20 / 1.2,
	},
	window = {
		pos = vec2(0, 0),
		size = vec2(0, 0),
	},
	box = {
		pos1 = vec2(0, 0),
		pos2 = vec2(0, 0),
		offsetY = 0,
	},
	text = {
		pos = vec2(0, 0),
		size = vec2(0, 0),
		offsetY = 0,
	},
	header = {
		radar = {
			pos = vec2(0, 0),
		},
		nearby = {
			pos = vec2(0, 0),
		},
	},
	color = rgbm(1, 1, 1, 0.5),
}

local iconPos = {}

local function onSettingsChange()
	settings:save()
	ac.log('Settings updated')
end

---------------------------------------------------------------------------------------------- Firebase ----------------------------------------------------------------------------------------------

local acpPolice = ac.OnlineEvent({
    message = ac.StructItem.string(110),
	messageType = ac.StructItem.int16(),
	yourIndex = ac.StructItem.int16(),
}, function (sender, data)
	if data.yourIndex == car.sessionID and data.messageType == 0 and pursuit.suspect ~= nil and sender == pursuit.suspect then
		pursuit.hasArrested = true
	end
end)

local starsUI = {
	starsPos = vec2(0, 0),
	starsSize = vec2(0, 0),
	startSpace = 0,
	full = ""https://acstuff.ru/images/icons_24/star_full.png"",
	empty = ""https://acstuff.ru/images/icons_24/star_empty.png"",
}

local function updateStarsPos()
	starsUI.starsPos = vec2(settings.starsPos.x - settings.starsSize / 2, settings.starsPos.y + settings.starsSize / 2)
	starsUI.starsSize = vec2(settings.starsPos.x - settings.starsSize * 2, settings.starsPos.y + settings.starsSize * 2)
	starsUI.startSpace = settings.starsSize / 1.5
end

local function updateHudPos()
	imageSize = vec2(WINDOW_HEIGHT/80 * settings.policeSize, WINDOW_HEIGHT/80 * settings.policeSize)
	iconPos.arrest1 = vec2(imageSize.x - imageSize.x/12, imageSize.y/3.2)
	iconPos.arrest2 = vec2(imageSize.x/1.215, imageSize.y/5)
	iconPos.lost1 = vec2(imageSize.x - imageSize.x/12, imageSize.y/2.35)
	iconPos.lost2 = vec2(imageSize.x/1.215, imageSize.y/3.2)
	iconPos.logs1 = vec2(imageSize.x/1.215, imageSize.y/1.88)
	iconPos.logs2 = vec2(imageSize.x/1.39, imageSize.y/2.35)
	iconPos.menu1 = vec2(imageSize.x - imageSize.x/12, imageSize.y/1.88)
	iconPos.menu2 = vec2(imageSize.x/1.215, imageSize.y/2.35)
	iconPos.cams1 = vec2(imageSize.x/1.215, imageSize.y/2.35)
	iconPos.cams2 = vec2(imageSize.x/1.39, imageSize.y/3.2)

	settings.fontSize = settings.policeSize * FONT_MULT
	playerInRangeUI.fontSize.div_2 = settings.fontSize / 2
	playerInRangeUI.fontSize.div_2_5 = settings.fontSize / 2.5
	playerInRangeUI.fontSize.div_3 = settings.fontSize / 3
	playerInRangeUI.fontSize.div_1_5 = settings.fontSize / 1.5
	playerInRangeUI.fontSize.div_1_2 = settings.fontSize / 1.2

	playerInRangeUI.window.pos = vec2(settings.hudOffset.x + imageSize.x / 9.5, settings.hudOffset.y + imageSize.y / 5.3)
	playerInRangeUI.window.size = vec2(imageSize.x * 3 / 5, imageSize.y / 2.8)
	playerInRangeUI.box.pos1 = vec2(playerInRangeUI.window.size.x / 20, playerInRangeUI.window.size.y / 20)
	playerInRangeUI.box.pos2 = vec2(playerInRangeUI.window.size.x - playerInRangeUI.window.size.x / 20, playerInRangeUI.window.size.y / 20)
	playerInRangeUI.box.offsetY = playerInRangeUI.window.size.y / 10 + playerInRangeUI.box.pos2.y
	ui.pushDWriteFont(""Orbitron;Weight=Bold"")
	playerInRangeUI.header.radar.pos = vec2((playerInRangeUI.window.size.x - ui.measureDWriteText(""RADAR ACTIVE"", playerInRangeUI.fontSize.div_1_5).x) / 2, 0)
	ui.popDWriteFont()
	ui.pushDWriteFont(""Orbitron;Weight=Regular"")
	playerInRangeUI.header.nearby.pos = vec2((playerInRangeUI.window.size.x - ui.measureDWriteText(""NEARBY VEHICULE SPEED SCANNING"", playerInRangeUI.fontSize.div_2_5).x) / 2, playerInRangeUI.fontSize.div_1_2)
	ui.popDWriteFont()
	playerInRangeUI.text.pos = vec2(playerInRangeUI.window.size.x / 20, 0)
	playerInRangeUI.text.size = vec2(playerInRangeUI.window.size.x - playerInRangeUI.window.size.x / 10, playerInRangeUI.window.size.y / 5)
	ui.pushDWriteFont(""Orbitron;Weight=Regular"")
	playerInRangeUI.text.offsetY = (playerInRangeUI.window.size.y / 20 - ui.measureDWriteText(""Player In Range"", settings.fontSize / 20).y) / 2
	ui.popDWriteFont()
end

local function showStarsPursuit()
	local starsColor = rgbm(1, 1, 1, os.clock()%2 + 0.3)
	updateStarsPos()
	for i = 1, 5 do
		if i > pursuit.level/2 then
			ui.drawIcon(ui.Icons.StarEmpty, starsUI.starsPos, starsUI.starsSize, rgbm(1, 1, 1, 0.2))
		else
			ui.drawIcon(ui.Icons.StarFull, starsUI.starsPos, starsUI.starsSize, starsColor)
		end
		starsUI.starsPos.x = starsUI.starsPos.x - settings.starsSize - starsUI.startSpace
		starsUI.starsSize.x = starsUI.starsSize.x - settings.starsSize - starsUI.startSpace
	end
end

local showPreviewMsg = false
local showPreviewStars = false
COLORSMSGBG = rgbm(0.5,0.5,0.5,0.5)

local function initsettings()
	imageSize = vec2(WINDOW_HEIGHT/80 * settings.policeSize, WINDOW_HEIGHT/80 * settings.policeSize)
	updateHudPos()
	updateStarsPos()
end

local function previewMSG()
	ui.beginTransparentWindow(""previewMSG"", vec2(0, 0), vec2(WINDOW_WIDTH, WINDOW_HEIGHT))
	ui.pushDWriteFont(""Orbitron;Weight=800"")
	local tSize = ui.measureDWriteText(""Messages from Police when being chased"", settings.fontSizeMSG)
	local uiOffsetX = settings.msgOffset.x - tSize.x/2
	local uiOffsetY = settings.msgOffset.y
	ui.drawRectFilled(vec2(uiOffsetX - 5, uiOffsetY-5), vec2(uiOffsetX + tSize.x + 5, uiOffsetY + tSize.y + 5), COLORSMSGBG)
	ui.dwriteDrawText(""Messages from Police when being chased"", settings.fontSizeMSG, vec2(uiOffsetX, uiOffsetY), rgbm.colors.cyan)
	ui.popDWriteFont()
	ui.endTransparentWindow()
end

local function previewStars()
	ui.beginTransparentWindow(""previewStars"", vec2(0, 0), vec2(WINDOW_WIDTH, WINDOW_HEIGHT))
	showStarsPursuit()
	ui.endTransparentWindow()
end

local function uiTab()
	ui.text('On Screen Message : ')
	settings.timeMsg = ui.slider('##' .. 'Time Msg On Screen', settings.timeMsg, 1, 15, 'Time Msg On Screen' .. ': %.0fs')
	settings.fontSizeMSG = ui.slider('##' .. 'Font Size MSG', settings.fontSizeMSG, 10, 50, 'Font Size' .. ': %.0f')
	ui.text('Stars : ')
	settings.starsPos.x = ui.slider('##' .. 'Stars Offset X', settings.starsPos.x, 0, WINDOW_WIDTH, 'Stars Offset X' .. ': %.0f')
	settings.starsPos.y = ui.slider('##' .. 'Stars Offset Y', settings.starsPos.y, 0, WINDOW_HEIGHT, 'Stars Offset Y' .. ': %.0f')
	settings.starsSize = ui.slider('##' .. 'Stars Size', settings.starsSize, 10, 50, 'Stars Size' .. ': %.0f')
	ui.newLine()
	ui.text('Offset : ')
	settings.msgOffset.y = ui.slider('##' .. 'Msg On Screen Offset Y', settings.msgOffset.y, 0, WINDOW_HEIGHT, 'Msg On Screen Offset Y' .. ': %.0f')
	settings.msgOffset.x = ui.slider('##' .. 'Msg On Screen Offset X', settings.msgOffset.x, 0, WINDOW_WIDTH, 'Msg On Screen Offset X' .. ': %.0f')
    ui.newLine()
	ui.text('Preview : ')
	ui.sameLine()
    if ui.button('Message') then
		showPreviewMsg = not showPreviewMsg
		showPreviewStars = false
	end
	ui.sameLine()
	if ui.button('Stars') then
		showPreviewStars = not showPreviewStars
		showPreviewMsg = false
	end
    if showPreviewMsg then previewMSG()
	elseif showPreviewStars then previewStars() end
	if ui.button('Offset X to center') then settings.msgOffset.x = WINDOW_WIDTH/2 end
	ui.newLine()
end

local function settingsWindow()
	imageSize = vec2(WINDOW_HEIGHT/80 * settings.policeSize, WINDOW_HEIGHT/80 * settings.policeSize)
	ui.dwriteTextAligned(""settings"", 40, ui.Alignment.Center, ui.Alignment.Center, vec2(WINDOW_WIDTH/6.5,60), false, rgbm.colors.white)
	ui.drawLine(vec2(0,60), vec2(WINDOW_WIDTH/6.5,60), rgbm.colors.white, 1)
	ui.newLine(20)
	ui.sameLine(10)
	ui.beginGroup()
	ui.text('Unit : ')
	ui.sameLine(160)
	if ui.selectable('mph', settings.unit == 'mph',_, ui.measureText('km/h')) then
		settings.unit = 'mph'
		settings.unitMult = 0.621371
	end
	ui.sameLine(200)
	if ui.selectable('km/h', settings.unit == 'km/h',_, ui.measureText('km/h')) then
		settings.unit = 'km/h'
		settings.unitMult = 1
	end
	ui.sameLine(WINDOW_WIDTH/6.5 - 120)
	if ui.button('Close', vec2(100, WINDOW_HEIGHT/50)) then
		settingsOpen = false
		onSettingsChange()
	end
	ui.text('HUD : ')
	settings.hudOffset.x = ui.slider('##' .. 'HUD Offset X', settings.hudOffset.x, 0, WINDOW_WIDTH, 'HUD Offset X' .. ': %.0f')
	settings.hudOffset.y = ui.slider('##' .. 'HUD Offset Y', settings.hudOffset.y, 0, WINDOW_HEIGHT, 'HUD Offset Y' .. ': %.0f')
	settings.policeSize = ui.slider('##' .. 'HUD Size', settings.policeSize, 10, 50, 'HUD Size' .. ': %.0f')
	settings.fontSize = settings.policeSize * FONT_MULT
    ui.setNextItemWidth(300)
    ui.newLine()
    uiTab()
	updateHudPos()
	ui.endGroup()
end

---------------------------------------------------------------------------------------------- Utils ----------------------------------------------------------------------------------------------

local function formatMessage(message)
	local msgToSend = message
	if pursuit.suspect == nil then
		msgToSend = string.gsub(msgToSend,""`CAR`"", ""No Car"")
		msgToSend = string.gsub(msgToSend,""`NAME`"", ""No Name"")
		msgToSend = string.gsub(msgToSend,""`SPEED`"", ""No Speed"")
		return msgToSend
	end
	msgToSend = string.gsub(msgToSend,""`CAR`"", string.gsub(string.gsub(ac.getCarName(pursuit.suspect.index), ""%W"", "" ""), ""  "", """"))
	msgToSend = string.gsub(msgToSend,""`NAME`"", ""@"" .. ac.getDriverName(pursuit.suspect.index))
	msgToSend = string.gsub(msgToSend,""`SPEED`"", string.format(""%d "", ac.getCarSpeedKmh(pursuit.suspect.index) * settings.unitMult) .. settings.unit)
	return msgToSend
end

---------------------------------------------------------------------------------------------- HUD ----------------------------------------------------------------------------------------------

local policeLightsPos = {
	vec2(0,0),
	vec2(WINDOW_WIDTH/10,WINDOW_HEIGHT),
	vec2(WINDOW_WIDTH-WINDOW_WIDTH/10,0),
	vec2(WINDOW_WIDTH,WINDOW_HEIGHT)
}

local function showPoliceLights()
	local timing = math.floor(os.clock()*2 % 2)
	if timing == 0 then
		ui.drawRectFilledMultiColor(policeLightsPos[1], policeLightsPos[2], rgbm(1,0,0,0.5), rgbm(0,0,0,0), rgbm(0,0,0,0), rgbm(1,0,0,0.5))
		ui.drawRectFilledMultiColor(policeLightsPos[3], policeLightsPos[4], rgbm(0,0,0,0), rgbm(0,0,1,0.5), rgbm(0,0,1,0.5), rgbm(0,0,0,0))
	else
		ui.drawRectFilledMultiColor(policeLightsPos[1], policeLightsPos[2], rgbm(0,0,1,0.5), rgbm(0,0,0,0), rgbm(0,0,0,0), rgbm(0,0,1,0.5))
		ui.drawRectFilledMultiColor(policeLightsPos[3], policeLightsPos[4], rgbm(0,0,0,0), rgbm(1,0,0,0.5), rgbm(1,0,0,0.5), rgbm(0,0,0,0))
	end
end

local chaseLVL = {
	message = """",
	messageTimer = 0,
	color = rgbm.colors.white,
}

local function resetChase()
	pursuit.enable = false
	pursuit.nextMessage = 30
	pursuit.lostSight = false
	pursuit.timeLostSight = 2
end

local function lostSuspect()
	resetChase()
	pursuit.lostSight = false
	pursuit.timeLostSight = 0
	pursuit.level = 1
	ac.sendChatMessage(formatMessage(MSG_LOST[math.random(#MSG_LOST)]))
	pursuit.suspect = nil
	ac.setExtraSwitch(0, false)
end

local iconsColorOn = {
	[1] = rgbm.colors.red,
	[2] = rgbm.colors.white,
	[3] = rgbm.colors.white,
	[4] = rgbm.colors.white,
	[5] = rgbm.colors.white,
	[6] = rgbm.colors.white,
}

local playersInRange = {}

local function drawImage()
	iconsColorOn[2] = rgbm.colors.white
	iconsColorOn[3] = rgbm.colors.white
	iconsColorOn[4] = rgbm.colors.white
	iconsColorOn[5] = rgbm.colors.white
	iconsColorOn[6] = rgbm.colors.white

	if ui.rectHovered(iconPos.arrest2, iconPos.arrest1) then
		iconsColorOn[2] = rgbm.colors.red
		if pursuit.suspect and pursuit.suspect.speedKmh < 50 and car.speedKmh < 20 and uiState.isMouseLeftKeyClicked then
			pursuit.hasArrested = true
		end
	elseif ui.rectHovered(iconPos.cams2, iconPos.cams1) then
		iconsColorOn[3] = rgbm.colors.red
		if uiState.isMouseLeftKeyClicked then
			if camerasOpen then camerasOpen = false
			else
				camerasOpen = true
				arrestLogsOpen = false
				if settingsOpen then
					onSettingsChange()
					settingsOpen = false
				end
			end
		end
	elseif ui.rectHovered(iconPos.lost2, iconPos.lost1) then
		iconsColorOn[4] = rgbm.colors.red
		if pursuit.suspect and uiState.isMouseLeftKeyClicked then
			lostSuspect()
		end
	elseif ui.rectHovered(iconPos.logs2, iconPos.logs1) then
		iconsColorOn[5] = rgbm.colors.red
		if uiState.isMouseLeftKeyClicked then
			if arrestLogsOpen then arrestLogsOpen = false
			else
				arrestLogsOpen = true
				camerasOpen = false
				if settingsOpen then
					onSettingsChange()
					settingsOpen = false
				end
			end
		end
	elseif ui.rectHovered(iconPos.menu2, iconPos.menu1) then
		iconsColorOn[6] = rgbm.colors.red
		if uiState.isMouseLeftKeyClicked then
			if settingsOpen then
				onSettingsChange()
				settingsOpen = false
			else
				settingsOpen = true
				arrestLogsOpen = false
				camerasOpen = false
			end
		end
	end
	ui.image(HUD_IMG.base, imageSize, rgbm.colors.white)
	ui.drawImage(HUD_IMG.radar, vec2(0,0), imageSize, iconsColorOn[1])
	ui.drawImage(HUD_IMG.arrest, vec2(0,0), imageSize, iconsColorOn[2])
	ui.drawImage(HUD_IMG.cams, vec2(0,0), imageSize, iconsColorOn[3])
	ui.drawImage(HUD_IMG.lost, vec2(0,0), imageSize, iconsColorOn[4])
	ui.drawImage(HUD_IMG.logs, vec2(0,0), imageSize, iconsColorOn[5])
	ui.drawImage(HUD_IMG.menu, vec2(0,0), imageSize, iconsColorOn[6])
end

local function playerSelected(suspect)
	if suspect.speedKmh > 50 then
		pursuit.suspect = suspect
		pursuit.nextMessage = 30
		pursuit.level = 1
		local msgToSend = ""Officer "" .. DRIVER_NAME .. "" is chasing you. Run! ""
		pursuit.startedTime = settings.timeMsg
		pursuit.engage = true
		acpPolice{message = msgToSend, messageType = 0, yourIndex = ac.getCar(pursuit.suspect.index).sessionID}
		ac.setExtraSwitch(0, true)
	end
end

local function hudInChase()
	ui.pushDWriteFont(""Orbitron;Weight=Black"")
	ui.sameLine(20)
	ui.beginGroup()
	ui.newLine(1)
	local textPursuit = ""LVL : "" .. math.floor(pursuit.level/2)
	ui.dwriteTextWrapped(ac.getDriverName(pursuit.suspect.index) .. '\n'
						.. string.gsub(string.gsub(ac.getCarName(pursuit.suspect.index), ""%W"", "" ""), ""  "", """")
						.. '\n' .. string.format(""Speed: %d "", pursuit.suspect.speedKmh * settings.unitMult) .. settings.unit
						.. '\n' .. textPursuit, settings.fontSize/2, rgbm.colors.white)
	ui.dummy(vec2(imageSize.x/5,imageSize.y/20))
	ui.newLine(30)
	ui.sameLine()
	if ui.button('Cancel Chase', vec2(imageSize.x/5, imageSize.y/20)) then
		lostSuspect()
	end
	ui.endGroup()
	ui.popDWriteFont()
end

local function drawText()
	ui.pushDWriteFont(""Orbitron;Weight=Bold"")
	ui.dwriteDrawText(""RADAR ACTIVE"", playerInRangeUI.fontSize.div_1_5, playerInRangeUI.header.radar.pos, rgbm.colors.red)
	ui.popDWriteFont()
	ui.pushDWriteFont(""Orbitron;Weight=Regular"")
	ui.dwriteDrawText(""NEARBY VEHICULE SPEED SCANNING"", playerInRangeUI.fontSize.div_2_5, playerInRangeUI.header.nearby.pos, rgbm.colors.white)

	playerInRangeUI.box.pos1.y = playerInRangeUI.header.nearby.pos.y + playerInRangeUI.fontSize.div_1_2
	playerInRangeUI.box.pos2.y = playerInRangeUI.box.pos1.y + playerInRangeUI.box.offsetY
	for i = 1, #playersInRange do
		playerInRangeUI.color = rgbm(1,1,1,0.7)
		ui.drawRect(playerInRangeUI.box.pos1, playerInRangeUI.box.pos2, rgbm(1,1,1,0.1), 1)
		if ui.rectHovered(playerInRangeUI.box.pos1, playerInRangeUI.box.pos2) then
			playerInRangeUI.color = rgbm(1,0,0,1)
			if ui.mouseClicked(0) then
				playerSelected(playersInRange[i].player)
			end
		end
		playerInRangeUI.text.pos.x = (playerInRangeUI.window.size.x - ui.measureDWriteText(playersInRange[i].text, playerInRangeUI.fontSize.div_2).x) / 2
		playerInRangeUI.text.pos.y = playerInRangeUI.box.pos1.y + playerInRangeUI.text.offsetY
		ui.dwriteDrawText(playersInRange[i].text, settings.fontSize/2, vec2(playerInRangeUI.text.pos), playerInRangeUI.color)
		playerInRangeUI.box.pos1.y = playerInRangeUI.box.pos1.y + playerInRangeUI.box.offsetY
		playerInRangeUI.box.pos2.y = playerInRangeUI.box.pos1.y + playerInRangeUI.box.offsetY
	end
	ui.dummy(playerInRangeUI.box.pos1)
	ui.popDWriteFont()
end

local function radarUI()
	ui.toolWindow('radarText', playerInRangeUI.window.pos, playerInRangeUI.window.size, true, true, function ()
		if pursuit.suspect then hudInChase()
		else drawText() end
	end)
	ui.transparentWindow('radar', vec2(settings.hudOffset.x, settings.hudOffset.y), imageSize, true, function ()
		drawImage()
	end)
end

local function hidePlayers()
	local hideRange = 500
	for i = ac.getSim().carsCount - 1, 0, -1 do
		local playerCar = ac.getCar(i)
		if playerCar and playerCar.isConnected and ac.getCarBrand(i) ~= ""DZST traffic"" then
			if not isPoliceCar(ac.getCarID(i)) then
				if playerCar.position.x > car.position.x - hideRange and playerCar.position.z > car.position.z - hideRange and playerCar.position.x < car.position.x + hideRange and playerCar.position.z < car.position.z + hideRange then
					ac.hideCarLabels(i, false)
				else
					ac.hideCarLabels(i, true)
				end
			end
		end
	end
end

local RADAR_RANGE = 250

local function radarUpdate()
	local previousSize = #playersInRange
	local j = 1
	for i, c in ac.iterateCars.serverSlots() do
	  if not c.isHidingLabels and c.isConnected and not isPoliceCar(c:id()) then
			if c.position.x > car.position.x - RADAR_RANGE and c.position.z > car.position.z - RADAR_RANGE and c.position.x < car.position.x + RADAR_RANGE and c.position.z < car.position.z + RADAR_RANGE then
				playersInRange[j] = {}
				playersInRange[j].player = c
				playersInRange[j].text = string.sub(ac.getDriverName(c.index), 1, 20) .. string.format("" - %d "", c.speedKmh * settings.unitMult) .. settings.unit
				j = j + 1
				if j == 9 then break end
			end
		end
	end
	for i = j, previousSize do playersInRange[i] = nil end
end

---------------------------------------------------------------------------------------------- Chase ----------------------------------------------------------------------------------------------

local function inRange()
	local distance_x = pursuit.suspect.position.x - car.position.x
	local distance_z = pursuit.suspect.position.z - car.position.z
	local distanceSquared = distance_x * distance_x + distance_z * distance_z
	if(distanceSquared < pursuit.minDistance) then
		pursuit.enable = true
		pursuit.lostSight = false
		pursuit.timeLostSight = 2
	elseif (distanceSquared < pursuit.maxDistance) then resetChase()
	else
		if not pursuit.lostSight then
			pursuit.lostSight = true
			pursuit.timeLostSight = 2
		else
			pursuit.timeLostSight = pursuit.timeLostSight - ui.deltaTime()
			if pursuit.timeLostSight < 0 then lostSuspect() end
		end
	end
end

local function sendChatToSuspect()
	if pursuit.enable then
		if 0 < pursuit.nextMessage then
			pursuit.nextMessage = pursuit.nextMessage - ui.deltaTime()
		elseif pursuit.nextMessage < 0 then
			local nb = tostring(pursuit.level)
			acpPolice{message = nb, messageType = 1, yourIndex = ac.getCar(pursuit.suspect.index).sessionID}
			if pursuit.level < 10 then
				pursuit.level = pursuit.level + 1
				chaseLVL.messageTimer = settings.timeMsg
				chaseLVL.message = ""CHASE LEVEL "" .. math.floor(pursuit.level/2)
				if pursuit.level > 8 then
					chaseLVL.color = rgbm.colors.red
				elseif pursuit.level > 6 then
					chaseLVL.color = rgbm.colors.orange
				elseif pursuit.level > 4 then
					chaseLVL.color = rgbm.colors.yellow
				else
					chaseLVL.color = rgbm.colors.white
				end
			end
			pursuit.nextMessage = 30
		end
	end
end

local function showPursuitMsg()
	local text = """"
	if chaseLVL.messageTimer > 0 then
		chaseLVL.messageTimer = chaseLVL.messageTimer - ui.deltaTime()
		text = chaseLVL.message
	end
	if pursuit.startedTime > 0 then
		if pursuit.suspect then
			text = ""You are chasing "" .. ac.getDriverName(pursuit.suspect.index) .. "" driving a "" .. string.gsub(string.gsub(ac.getCarName(pursuit.suspect.index), ""%W"", "" ""), ""  "", """") .. "" ! Get him! ""
		end
		if pursuit.startedTime > 6 then showPoliceLights() end
		if pursuit.engage and pursuit.startedTime < 8 then
			ac.sendChatMessage(formatMessage(MSG_ENGAGE[math.random(#MSG_ENGAGE)]))
			pursuit.engage = false
		end
	end
	if text ~= """" then
		local textLenght = ui.measureDWriteText(text, settings.fontSizeMSG)
		local rectPos1 = vec2(settings.msgOffset.x - textLenght.x/2, settings.msgOffset.y)
		local rectPos2 = vec2(settings.msgOffset.x + textLenght.x/2, settings.msgOffset.y + settings.fontSizeMSG)
		local rectOffset = vec2(10, 10)
		if ui.time() % 1 < 0.5 then
			ui.drawRectFilled(rectPos1 - vec2(10,0), rectPos2 + rectOffset, COLORSMSGBG, 10)
		else
			ui.drawRectFilled(rectPos1 - vec2(10,0), rectPos2 + rectOffset, rgbm(0,0,0,0.5), 10)
		end
		ui.dwriteDrawText(text, settings.fontSizeMSG, rectPos1, chaseLVL.color)
	end
end

local function arrestSuspect()
	if pursuit.hasArrested and pursuit.suspect then
		local msgToSend = formatMessage(MSG_ARREST[math.random(#MSG_ARREST)])
		table.insert(arrestations, msgToSend .. os.date(""\nDate of the Arrestation: %c""))
		ac.sendChatMessage(msgToSend .. ""\nPlease Get Back Pit, GG!"")
		pursuit.id = pursuit.suspect.sessionID
		player.arrests = player.arrests and player.arrests + 1 or 1
		pursuit.startedTime = 0
		pursuit.suspect = nil
		pursuit.timerArrest = 1
		player:save()
	elseif pursuit.hasArrested then
		if pursuit.timerArrest > 0 then
			pursuit.timerArrest = pursuit.timerArrest - ui.deltaTime()
		else
			acpPolice{message = ""BUSTED!"", messageType = 2, yourIndex = pursuit.id}
			pursuit.timerArrest = 0
			pursuit.suspect = nil
			pursuit.id = -1
			pursuit.hasArrested = false
			pursuit.startedTime = 0
			pursuit.enable = false
			pursuit.level = 1
			pursuit.nextMessage = 20
			pursuit.lostSight = false
			pursuit.timeLostSight = 0
		end
	end
end

local function chaseUpdate()
	if pursuit.startedTime > 0 then pursuit.startedTime = pursuit.startedTime - ui.deltaTime()
	else pursuit.startedTime = 0 end
	if pursuit.suspect then
		sendChatToSuspect()
		inRange()
	end
	arrestSuspect()
end

---------------------------------------------------------------------------------------------- Menu ----------------------------------------------------------------------------------------------

local function arrestLogsUI()
	ui.dwriteTextAligned(""Arrestation Logs"", 40, ui.Alignment.Center, ui.Alignment.Center, vec2(WINDOW_WIDTH/4,60), false, rgbm.colors.white)
	ui.drawLine(vec2(0,60), vec2(WINDOW_WIDTH/4,60), rgbm.colors.white, 1)
	ui.newLine(15)
	ui.sameLine(10)
	ui.beginGroup()
	local allMsg = """"
	ui.dwriteText(""Click on the button next to the message you want to copy."", 15, rgbm.colors.white)
	ui.sameLine(WINDOW_WIDTH/4 - 120)
	if ui.button('Close', vec2(100, WINDOW_HEIGHT/50)) then arrestLogsOpen = false end
	for i = 1, #arrestations do
		if ui.smallButton(""#"" .. i .. "": "") then
			ui.setClipboardText(arrestations[i])
		end
		ui.sameLine()
		ui.dwriteTextWrapped(arrestations[i], 15, rgbm.colors.white)
	end
	if #arrestations == 0 then
		ui.dwriteText(""No arrestation logs yet."", 15, rgbm.colors.white)
	end
	ui.newLine()
	if ui.button(""Set all messages to ClipBoard"") then
		for i = 1, #arrestations do
			allMsg = allMsg .. arrestations[i] .. ""\n\n""
		end
		ui.setClipboardText(allMsg)
	end
	ui.endGroup()
end

local buttonPos = WINDOW_WIDTH/65

local function camerasUI()
	ui.dwriteTextAligned(""Surveillance Cameras"", 40, ui.Alignment.Center, ui.Alignment.Center, vec2(WINDOW_WIDTH/6.5,60), false, rgbm.colors.white)
	ui.drawLine(vec2(0,60), vec2(WINDOW_WIDTH/6.5,60), rgbm.colors.white, 1)
	ui.newLine(20)
	ui.beginGroup()
	ui.sameLine(buttonPos)
	if ui.button('Close', vec2(WINDOW_WIDTH/6.5 - buttonPos*2,30)) then camerasOpen = false end
	ui.newLine()
	for i = 1, #CAMERAS do
		local h = math.rad(CAMERAS[i].dir + ac.getCompassAngle(vec3(0, 0, 1)))
		ui.newLine()
		ui.sameLine(buttonPos)
		if ui.button(CAMERAS[i].name, vec2(WINDOW_WIDTH/6.5 - buttonPos*2,30)) then
			ac.setCurrentCamera(ac.CameraMode.Free)
			ac.setCameraPosition(CAMERAS[i].pos)
			ac.setCameraDirection(vec3(math.sin(h), 0, math.cos(h))) 
			ac.setCameraFOV(CAMERAS[i].fov)
		end
	end
	if ac.getSim().cameraMode == ac.CameraMode.Free then
		ui.newLine()
		ui.newLine()
		ui.sameLine(buttonPos)
        if ui.button('Police car camera', vec2(WINDOW_WIDTH/6.5 - buttonPos*2,30)) then ac.setCurrentCamera(ac.CameraMode.Cockpit) end
    end
end


local menuSize = {vec2(WINDOW_WIDTH/4, WINDOW_HEIGHT/3), vec2(WINDOW_WIDTH/6.4, WINDOW_HEIGHT/2.2)}
local buttonPressed = false

local function moveMenu()
	if ui.windowHovered() and ui.mouseDown() then buttonPressed = true end
	if ui.mouseReleased() then buttonPressed = false end
	if buttonPressed then settings.menuPos = settings.menuPos + ui.mouseDelta() end
end

---------------------------------------------------------------------------------------------- updates ----------------------------------------------------------------------------------------------

local initUiSize = false

function script.drawUI()
	if not shouldRun() then return end
	if not initUiSize then
		initsettings()
		initUiSize = true
	end
	radarUI()
	if pursuit.suspect then showStarsPursuit() end
	showPursuitMsg()
	if settingsOpen then
		ui.toolWindow('settings', settings.menuPos, menuSize[2], true, function ()
			ui.childWindow('childsettings', menuSize[2], true, function () settingsWindow() moveMenu() end)
		end)
	elseif arrestLogsOpen then
		ui.toolWindow('ArrestLogs', settings.menuPos, menuSize[1], true, function ()
			ui.childWindow('childArrestLogs', menuSize[1], true, function () arrestLogsUI() moveMenu() end)
		end)
	elseif camerasOpen then
		ui.toolWindow('Cameras', settings.menuPos, menuSize[2], true, function ()
			ui.childWindow('childCameras', menuSize[2], true, function () camerasUI() moveMenu() end)
		end)
	end
end

local function loadSettings()
	Settings.allocate(function(allocatedSetting)
		ac.log(""Settings Allocated"")
		settings = allocatedSetting
		dataLoaded['Settings'] = true
	end)
end

local function loadPlayerData()
	Player.allocate(function(allocatedPlayer)
		if allocatedPlayer then
			player = allocatedPlayer
			player:sortSectors()
			dataLoaded['PlayerData'] = true
			updateSharedPlayerData()
			ac.log(player.arrests)
		end
	end)
end

local delay = 1

function script.update(dt)
	if initialisation then
		initialisation = false
		loadSettings()
		loadPlayerData()
	end
	if not shouldRun() then return end
	if delay > 0 then delay = delay - dt end
	if delay < 0 then
		delay = 0
		updateSharedPlayerData()
		ac.broadcastSharedEvent(SHARED_EVENT_KEY, 'update')
	end
	radarUpdate()
	chaseUpdate()
end

ac.onCarJumped(0, function (carIndex)
	if isPoliceCar(CAR_ID) then
		if pursuit.suspect then lostSuspect() end
	end
end)

ui.registerOnlineExtra(ui.Icons.Settings, ""Settings"", nil, settingsWindow, nil, ui.OnlineExtraFlags.Tool, 'ui.WindowFlags.AlwaysAutoResize')"
Nyi9w9sb,Essential,supinus,Lua,Wednesday 25th of June 2025 07:43:39 AM CDT,"ac.log('Script: Essential')
local sim = ac.getSim()
local car = ac.getCar(0) or error()
if not car then return end
local wheels = car.wheels or error()
local uiState = ac.getUI()

ui.setAsynchronousImagesLoading(true)

local localTesting = ac.dirname() == 'C:\\Program Files (x86)\\Steam\\steamapps\\common\\assettocorsa\\extension\\lua\\online'
local initialisation = true

-- Constants --
local STEAMID = const(ac.getUserSteamID())
local CSP_VERSION = const(ac.getPatchVersionCode())
local CSP_MIN_VERSION = const(3044)
local CAR_ID = const(ac.getCarID(0))
local CAR_NAME = const(ac.getCarName(0))
local DRIVER_NAME = const(ac.getDriverName(0))
if CSP_VERSION < CSP_MIN_VERSION then return end

local SHARED_PLAYER_DATA = const('__ACP_SHARED_PLAYER_DATA')
local SHARED_EVENT_KEY = const('__ACP_PLAYER_SHARED_UPDATE')

local DRIVER_NATION_CODE = const(ac.getDriverNationCode(0))
local UNIT = ""km/h""
local UNIT_MULT = 1
if DRIVER_NATION_CODE == ""USA"" or DRIVER_NATION_CODE == ""GBR"" then
	UNIT = ""mph""
	UNIT_MULT = 0.621371
end

local STATS_FONT_SIZE = const({
	header = 30 / uiState.uiScale,
	stats = 20 / uiState.uiScale,
})

SECTORS_DATA = const({
	[1] = {
		name = ""H1"",
		timeLimit = 0,
		addTimeLimit = { 0, 0, 0 },
		length = 26.5,
		gates = {
			{ pos = { -753.56, 138.82, 3541.54 }, dir = { -0.9, 0, -0.43 }, width = 14.75, id = 1 },
			{ pos = { 3001.98, 72.4, 1027.23 }, dir = { -0.85, 0, 0.52 }, width = 15.65, id = 2 },
		},
	},
	[2] = {
		name = ""DOUBLE TROUBLE"",
		timeLimit = 200,
		addTimeLimit = { 0, 5, 15 },
		length = 8.25,
		discordLink = ""https://discord.com/channels/358562025032646659/1300231481095880725"",
		video = ""https://www.youtube.com/watch?v=FMUogCkQ1qw"",
		gates = {
			{ pos = { 767.34, 95.8, 2262.69 }, dir = { -0.82, 0, 0.56 }, width = 14.7, id = 1 },
			{ pos = { -3541.52, 23.48, -206.67 }, dir = { -0.87, 0, 0.49 }, width = 10.27, id = 2 },
		},
	},
	[3] = {
		name = ""BOBs SCRAPYARD"",
		timeLimit = 200,
		addTimeLimit = { 0, 5, 130 },
		length = 8.25,
		discordLink = ""https://discord.com/channels/358562025032646659/1300207647873695755"",
		video = ""https://www.youtube.com/watch?v=FMUogCkQ1qw"",
		gates = {
			{ pos = { 767.34, 95.8, 2262.69 }, dir = { -0.82, 0, 0.56 }, width = 14.7, id = 1 },
			{ pos = { -3541.52, 23.48, -206.67 }, dir = { -0.87, 0, 0.49 }, width = 10.27, id = 2 },
		},
	},
	[4] = {
		name = ""BANK HEIST"",
		timeLimit = 475,
		addTimeLimit = { 0, 40, 245 },
		length = 21.5,
		discordLink = ""https://discord.com/channels/358562025032646659/1300207698280841266"",
		video = ""https://www.youtube.com/watch?v=U7Kr5E_ImGI"",
		gates = {
			{ pos = { -700.04, 137.72, 3540.75 }, dir = { -1.67, 0, 1.02 }, width = 12.1, id = 1 },
			{ pos = { 5188.14, 58.22, -1640.53 }, dir = { -0.07, 0, -1 }, width = 5.56, id = 2 },
		},
	},
	[5] = {
		name = ""DRUG DELIVERY"",
		timeLimit = 315,
		addTimeLimit = { 0, 25, 195 },
		length = 14,
		discordLink = ""https://discord.com/channels/358562025032646659/1300207870515744869"",
		video = ""https://www.youtube.com/watch?v=7YKganFmzNA"",
		gates = {
			{ pos = { -395.08, 127.66, 3392.71 }, dir = { -0.7, 0, -0.72 }, width = 35.95, id = 1 },
			{ pos = { 585.71, -115.77, -3439.67 }, dir = { 0.99, 0, 0.03 }, width = 6.78, id = 2 },
		},
	},
})

local POLICE_CAR = const({ ""ids_2022_ford_crown"", ""r34police_acp24"" })

local LEADERBOARDS = const({
	time = {""H1"", ""BOBs SCRAPYARD"", ""DOUBLE TROUBLE"", ""DRUG DELIVERY"", ""BANK HEIST"" },
	score = { ""arrests"", ""getaways"", ""overtake"", ""thefts"", ""heists"", ""deliveries"", ""elo"" }, --, ""kms"", ""time"" },
})
local LEADERBOARD_NAMES = const({
	{ ""Your Stats"", ""H1"", ""BOBs SCRAPYARD"", ""DOUBLE TROUBLE"", ""DRUG DELIVERY"", ""BANK HEIST"", ""arrests"", ""getaways"", ""overtake"", ""thefts"", ""heists"", ""deliveries"", ""elo"" }, --, ""kms"", ""time"" },
	{ ""Your Stats"", ""H1"", ""Bobs Scrapyard"", ""Double Trouble"", ""Drug Delivery"", ""Bank Heist"", ""Arrestations"", ""Getaways"", ""Overtake"", ""Car thefts"", ""Bank Heists"", ""Drug Deliveries"", ""Racing"" }, --, ""Distance Driven"", ""Time Played"" },
})
local patchCount = 0

-- URL --
local GOOGLE_APP_SCRIPT_URL = const(
	'https://script.google.com/macros/s/AKfycbwenxjCAbfJA-S90VlV0y7mEH75qt3TuqAmVvlGkx-Y1TX8z5gHtvf5Vb8bOVNOA_9j/exec')
local FIREBASE_URL = const('https://acp-server-97674-default-rtdb.firebaseio.com/')

-- UI --
local WINDOW_WIDTH = const(sim.windowWidth / uiState.uiScale)
local WIDTH_DIV = const({
	_2 = WINDOW_WIDTH / 2,
	_3 = WINDOW_WIDTH / 3,
	_4 = WINDOW_WIDTH / 4,
	_5 = WINDOW_WIDTH / 5,
	_6 = WINDOW_WIDTH / 6,
	_8 = WINDOW_WIDTH / 8,
	_10 = WINDOW_WIDTH / 10,
	_12 = WINDOW_WIDTH / 12,
	_15 = WINDOW_WIDTH / 15,
	_20 = WINDOW_WIDTH / 20,
	_25 = WINDOW_WIDTH / 25,
	_32 = WINDOW_WIDTH / 32,
	_40 = WINDOW_WIDTH / 40,
	_50 = WINDOW_WIDTH / 50,
	_80 = WINDOW_WIDTH / 80,
	_100 = WINDOW_WIDTH / 100,
	_320 = WINDOW_WIDTH / 320,
})

local WINDOW_HEIGHT = const(sim.windowHeight / uiState.uiScale)
local HEIGHT_DIV = const({
	_2 = WINDOW_HEIGHT / 2,
	_3 = WINDOW_HEIGHT / 3,
	_4 = WINDOW_HEIGHT / 4,
	_12 = WINDOW_HEIGHT / 12,
	_14 = WINDOW_HEIGHT / 14,
	_20 = WINDOW_HEIGHT / 20,
	_24 = WINDOW_HEIGHT / 24,
	_40 = WINDOW_HEIGHT / 40,
	_50 = WINDOW_HEIGHT / 50,
	_60 = WINDOW_HEIGHT / 60,
	_70 = WINDOW_HEIGHT / 70,
	_80 = WINDOW_HEIGHT / 80,
	_100 = WINDOW_HEIGHT / 100,
	_320 = WINDOW_HEIGHT / 320,
})

local FONT_MULT = const(WINDOW_HEIGHT / 1440)

local HUD_IMG = {}
local WELCOME_NAV_IMG = {}
local WELCOME_CARD_IMG = {}

local welcomeCardsToDisplayed = { 1, 2, 3, 4, 5, 6, 7 }
local welcomeNavImgToDraw = {}

local IMAGES = const({
	welcome = {
		url = ""https://github.com/ele-sage/ACP-apps/raw/refs/heads/master/images/welcome.zip"",
		card = {
			""cartheft.jpg"",
			""drugdealer.jpg"",
			""bankheist.jpg"",
			-- ""aboutacp.jpg"",
			""earnmoney.jpg"",
			-- ""leaderboard.jpg"",
			""bank.jpg"",
			""police.jpg"",
			""buycars.jpg"",
			-- ""tuning.jpg"",
		},
		nav = {
			""base.png"",
			""logo.png"",
			""leftBoxOff.png"",
			""leftBoxOn.png"",
			""centerBoxOff.png"",
			""centerBoxOn.png"",
			""rightBoxOff.png"",
			""rightBoxOn.png"",
			""leftArrowOff.png"",
			""leftArrowOn.png"",
			""rightArrowOff.png"",
			""rightArrowOn.png"",
		},
	},
	essential = {
		url = ""https://github.com/ele-sage/ACP-apps/raw/refs/heads/master/images/essential.zip"",
		hud = {
			""base.png"",
			""center.png"",
			""left.png"",
			""right.png"",
			""countdown.png"",
			""menu.png"",
			""ranks.png"",
			""theft.png"",
		},
	},
})

---@param key string
local function loadImages(key)
	ac.log(IMAGES[key].url)
	web.loadRemoteAssets(IMAGES[key].url, function(err, data)
		if err then
			ac.error('Failed to load welcome images:', err)
			return
		end
		local path = data .. '\\' .. key .. '\\'
		local files = io.scanDir(path, ""*"")
		if key == ""welcome"" then
			for i, file in ipairs(files) do
				local cardIndex = table.indexOf(IMAGES.welcome.card, file)
				if cardIndex ~= nil then
					WELCOME_CARD_IMG[cardIndex] = path .. file
				elseif table.contains(IMAGES.welcome.nav, file) then
					local k = file:match('(.+)%..+')
					WELCOME_NAV_IMG[k] = path .. file
				end
			end
		elseif key == ""essential"" then
			for i, file in ipairs(files) do
				if table.contains(IMAGES.essential.hud, file) then
					local k = file:match('(.+)%..+')
					HUD_IMG[k] = path .. file
				end
			end
		end
	end)
end

loadImages(""welcome"")
loadImages(""essential"")

local WELCOME_CARD_LINK = const({
	""https://www.youtube.com/watch?v=FMUogCkQ1qw"", --car thefts
	""https://www.youtube.com/watch?v=7YKganFmzNA"", --drug dealer
	""https://www.youtube.com/watch?v=U7Kr5E_ImGI"", --bank heist
	""https://discord.com/channels/358562025032646659/1299309514088120370"", --earn
	""https://discord.com/channels/358562025032646659/1299335101187883100"", --bank done
	""https://discord.com/channels/358562025032646659/1299310323253252117"", --police done
	""https://discord.com/channels/358562025032646659/1299310123482611812"", --car done
})

---@param format string
---@param time number
---@return string
local function formatTime(time, format)
	if format == 'time played' then
		local hours = math.floor(time / 3600)
		local minutes = math.floor(time % 3600 / 60)
		local seconds = math.floor(time % 60)
		local formattedTime = ''
		if hours > 0 then formattedTime = hours .. 'h ' end
		if minutes > 0 then formattedTime = formattedTime .. minutes .. 'm ' end
		formattedTime = formattedTime .. seconds .. 's'
		return formattedTime
	else
		local minutes = math.floor(time / 60)
		local seconds = math.floor(time % 60)
		local milliseconds = math.floor((time % 1) * 1000)
		return ('%02d:%02d.%03d'):format(minutes, seconds, milliseconds)
	end
end

local MISSIONS = const({
	[1] = {
		name = ""BOBs SCRAPYARD"",
		start = { ""Steal :"", ""Gas Station 1 TP"" },
		finish = { ""Deliver :"", ""Red Car (Map)"" },
		levels = {
			formatTime(SECTORS_DATA[3].timeLimit + SECTORS_DATA[3].addTimeLimit[3], ''),
			formatTime(SECTORS_DATA[3].timeLimit + SECTORS_DATA[3].addTimeLimit[2], ''),
			formatTime(SECTORS_DATA[3].timeLimit + SECTORS_DATA[3].addTimeLimit[1], ''),
		},
		tp= {
			[1] = { pos = vec3(785.519, 95.8002, 2235.53), dir = vec3(0.51, -0.03, -0.86) },
			[2] = { pos = vec3(787.707, 95.5171, 2240.88), dir = vec3(0.58, -0.03, -0.81) },
			[3] = { pos = vec3(790.921, 95.1569, 2247.45), dir = vec3(0.8, -0.01, -0.60) },
		},
	},
	[2] = {
		name = ""DRUG DELIVERY"",
		start = { ""Pick Up :"", ""Drug Delivery TP"" },
		finish = { ""Drop Off :"", ""Pink House (Map)"" },
		levels = {
			formatTime(SECTORS_DATA[5].timeLimit + SECTORS_DATA[5].addTimeLimit[3], ''),
			formatTime(SECTORS_DATA[5].timeLimit + SECTORS_DATA[5].addTimeLimit[2], ''),
			formatTime(SECTORS_DATA[5].timeLimit + SECTORS_DATA[5].addTimeLimit[1], ''),
		},
		tp = {
			[1] = { pos = vec3(-369.367, 127.557, 3405.47), dir = vec3(0.8, -0.01, 0.61) },
			[2] = { pos = vec3(-374.729, 127.558, 3413.13), dir = vec3(0.69, -0.01, 0.73) },
			[3] = { pos = vec3(-380.176, 127.557, 3419.49), dir = vec3(0.59, -0.01, 0.81) },
		},
	},
	[3] = {
		name = ""BANK HEIST"",
		start = { ""Rob :"", ""Bank TP"" },
		finish = { ""Deliver :"", ""Yellow BHL (Map)"" },
		levels = {
			formatTime(SECTORS_DATA[4].timeLimit + SECTORS_DATA[4].addTimeLimit[3], ''),
			formatTime(SECTORS_DATA[4].timeLimit + SECTORS_DATA[4].addTimeLimit[2], ''),
			formatTime(SECTORS_DATA[4].timeLimit + SECTORS_DATA[4].addTimeLimit[1], ''),
		},
		tp = {
			[1] = { pos = vec3(-626.316, 135.37, 3509.81), dir = vec3(0.91, 0.03, -0.4) },
			[2] = { pos = vec3(-635.369, 135.786, 3514.6), dir = vec3(0.92, 0.04, -0.39) },
			[3] = { pos = vec3(-645.117, 136.215, 3518.99), dir = vec3(0.91, 0.03, -0.42) },
		},
	},
})

local MISSION_NAMES = const({""DRUG DELIVERY"", ""BANK HEIST"", ""BOBs SCRAPYARD""})
local MISSION_TEXT = const({
	[""DRUG DELIVERY""] = {
		chat = ""* Picking up drugs *"",
		-- intro = { ""You have "", "" minutes to deliver up the drugs. Deliver the drugs to the Pink House!"" },
		intro = {""The deal's done! The drugs are in the car. You have "", "" to drop the package at the Villa! No mistakes!""},
		failed = {
			""You're late! Even the drugs expired waiting for you."",
			""The drugs ran out of patience, unlike your slow driving."",
			""Looks like the drug deal went cold—literally."",
			""Looks like the drug deal's off... thanks to you."",
			""Even the cops stopped chasing—they got bored."",
			""You just set a new record… for being the slowest criminal ever."",
			""Hope you like walking, because you just lost your getaway ride."",
			""Maybe next time, use the GPS… or learn to drive."",
			""They say crime doesn't pay. Guess they were right."",
			""You're late... Even the cops went home."",
			""Hope you enjoyed the scenic route. Too bad it cost you the mission."",
			""Crime waits for no one... except you, apparently."",
			""Time's up, slowpoke! The loot's long gone."",
			""I hope you enjoyed your leisurely failure."",
			""You missed the mark by a mile—literally."",
			""At this speed, you might as well walk."",
		},
	},
	[""BOBs SCRAPYARD""] = {
		chat = ""* Stealing a "" .. string.gsub(CAR_NAME, ""%W"", "" "") .. "" *"",
		-- intro = { ""You have "", "" minutes to steal the car. Deliver the car to Bobs Scrapyard!"" },
		intro = { ""You cracked the car! Now you've got "", "" to get it to Bob's Scrapyard! Don't stop, don't get caught!"" },
		failed = {
			""Missed the car heist? Might as well try carpool karaoke next time."",
			""Car theft? More like car borrowing… indefinitely."",
			""Looks like the getaway car forgot to show up... oh wait, that's you."",
			""You've got the speed of a parked car. Try again."",
			""You've officially been overtaken... by a granny in a Prius."",
			""Getaway driver? More like get-a-way-slower driver."",
			""Looks like the car heist was a bust. Maybe try stealing a bike next time."",
			""Time's up! Maybe you should consider Uber as a career choice."",
			""Need For Speed? More like Need For a Nap."",
			""You drive like my grandma, and she doesn't drive."",
			""Criminal mastermind? More like criminally slow."",
			""Even the cops are laughing at you."",
			""Oops, looks like you lost track of time. Literally."",
			""You missed the deadline… again."",
			""Slow and steady doesn't win the race in this game."",
			""You just got smoked—by your own bad driving."",
		},
	},
	[""DOUBLE TROUBLE""] = {
		chat = ""* Stealing a "" .. string.gsub(CAR_NAME, ""%W"", "" "") .. "" *"",
		-- intro = { ""You have "", "" minutes to steal the car. Deliver the car to Bobs Scrapyard!"" },
		intro = { ""You cracked the car! Now you've got "", "" to get it to Bob's Scrapyard! Don't stop, don't get caught!"" },
		failed = {
			""Missed the car heist? Might as well try carpool karaoke next time."",
			""Car theft? More like car borrowing… indefinitely."",
			""Looks like the getaway car forgot to show up... oh wait, that's you."",
			""You've got the speed of a parked car. Try again."",
			""You've officially been overtaken... by a granny in a Prius."",
			""Getaway driver? More like get-a-way-slower driver."",
			""Looks like the car heist was a bust. Maybe try stealing a bike next time."",
			""Time's up! Maybe you should consider Uber as a career choice."",
			""Need For Speed? More like Need For a Nap."",
			""You drive like my grandma, and she doesn't drive."",
			""Criminal mastermind? More like criminally slow."",
			""Even the cops are laughing at you."",
			""Oops, looks like you lost track of time. Literally."",
			""You missed the deadline… again."",
			""Slow and steady doesn't win the race in this game."",
			""You just got smoked—by your own bad driving."",
		},
	},
	[""BANK HEIST""] = {
		chat = ""* Robbing the bank *"",
		-- intro = { ""You have "", "" minutes to rob the bank. Deliver the loot to the Yellow BHL!"" },
		intro = { ""The bank's hit, the crew's in ! You've got "", "" to get them and the loot to the BHL. Go, go, go!"" },
		failed = {
			""At this rate, you'll be robbing piggy banks, not actual banks."",
			""The bank called—they said thanks for not bothering."",
			""Bank job? More like a piggy bank job."",
			""You're so slow, the bank restocked its vault."",
			""You've mastered the art of being fashionably late... for a robbery"",
			""The only thing you're robbing is your own time."",
			""You'd make a great escape artist… if the art was staying put."",
			""If slow and steady wins the race, you still wouldn't win."",
			""That's a record! A record for being the slowest."",
			""Time's up! The cops are laughing at you from the station."",
			""You ran out of time... and talent."",
			""Mission: Failed. Maybe consider a desk job?"",
			""I hope your backup plan is better than your driving."",
			""You should should stick to your day job, losser."",
			""Maybe you should have think before lighting up that joint."",
			""You should have stayed in bed today, we would have been better off... Seriously."",
		}
	},
});

local WELCOME_CARD_IMG_POS = const({
	{ vec2(70, 650),   vec2(320, 910) },
	{ vec2(2230, 650), vec2(2490, 910) },
	{ vec2(357, 325),  vec2(920, 1234) },
	{ vec2(993, 325),  vec2(1557, 1234) },
	{ vec2(1633, 325), vec2(2195, 1234) },
	{ vec2(31, 106),   vec2(2535, 1370) },
	{ vec2(2437, 48),  vec2(2510, 100) },
	{ vec2(2447, 58),  vec2(2500, 90) },
})

local GATE_HEIGHT_OFFSET = const(0.2)
local white = const(rgbm.colors.white)
local gateColor = const(rgbm(0, 100, 0, 10))

local vUp = const(vec3(0, 1, 0))
local vDown = const(vec3(0, -1, 0))

local menuStates = {
	welcome = true,
	main = false,
	leaderboard = false,
}

local duo = {
	teammate = nil,
	request = false,
	onlineSender = nil,
	teammateHasFinished = false,
	waiting = false,
	playerName = ""Online Players"",
	sentFinish = false,
}

local missionManager = {
	msgTime = 0,
	showIntro = false,
	msgFailedIndex = os.time() % 16 + 1,
	level = 3,
	tp = false
}

local function resetMissionManager()
	if not missionManager.tp then
		missionManager.msgTime = 0
		missionManager.showIntro = false
	else
		missionManager.tp = false
	end
	missionManager.msgFailedIndex = os.time() % 16 + 1
	missionManager.level = 3
end

local menuSize = { vec2(WIDTH_DIV._5, HEIGHT_DIV._4), vec2(WIDTH_DIV._6, WINDOW_HEIGHT * 2 / 3), vec2(WIDTH_DIV._2, HEIGHT_DIV._2) }
local playerStatsSubWindow = vec2(WIDTH_DIV._4 - 10, HEIGHT_DIV._2 - HEIGHT_DIV._20 - 10)

local currentTab = 1

local dataLoaded = {}
dataLoaded['Settings'] = false
dataLoaded['Leaderboard'] = false
dataLoaded['PlayerData'] = false
dataLoaded['Sectors'] = false

local openMenuKeyBind = ac.ControlButton('__ACP_OPEN_MENU_KEY_BIND', ui.KeyIndex.M)

---@param carID string
local function isPoliceCar(carID)
	for _, carName in ipairs(POLICE_CAR) do
		if carID == carName then
			return true
		end
	end
	return false
end

---@param key string
local function removeUtf8Char(key)
	local newKey = ''
	for i = 1, #key do
		local c = key:sub(i, i)
		if c:byte() < 128 then
			newKey = newKey .. c
		end
	end
	newKey = newKey:match('^%s*(.-)%s*$')
	return newKey
end

local CAR_NAME_NO_UTF8 = removeUtf8Char(CAR_NAME)

if isPoliceCar(CAR_ID) then return end

--------- Utils ------------
---@param keys string[]
---@param t table
local function hasKeys(keys, t)
	for i = 1, #keys do
		if not t[keys[i]] then
			ac.error('Missing key:', keys[i])
			return false
		end
	end
	return true
end

---@param number number
---@param decimal integer
---@return number
local function truncate(number, decimal)
	local power = 10 ^ decimal
	return math.floor(number * power) / power
end


---@param t table
local function tableToVec3(t)
	return vec3(t[1], t[2], t[3])
end

---@param t table
local function tableToVec2(t)
	return vec2(t[1], t[2])
end

---@param t table
local function tableToRGBM(t)
	return rgbm(t[1], t[2], t[3], t[4])
end

---@param err string
---@param response WebResponse
---@return boolean
local function canProcessRequest(err, response)
	if err then
		ac.error('Failed to process request:', err)
		return false
	end
	return response.status == 200 and response.body ~= ''
end

---@param response WebResponse
---@return boolean
local function hasExistingData(response)
	return response.status == 200 and response.body ~= 'null'
end

---@param v vec3
---@return vec3
local function snapToTrack(v)
	if physics.raycastTrack(v, vDown, 20, v) == -1 then
		physics.raycastTrack(v, vUp, 20, v)
	end
	return v
end

---@param category string
---@param rows LeaderboardRow[]
---@return LeaderboardRow[]
local function sortLeaderboard(category, rows)
	if category == ""time"" then
		table.sort(rows, function(a, b)
			return a[2] < b[2]
		end)
		for i, row in ipairs(rows) do
			row[2] = formatTime(row[2], '')
		end
	else
		table.sort(rows, function(a, b)
			return a[2] > b[2]
		end)
	end
	return rows
end

---@type Leaderboard[]
local leaderboards = {}
---@type Leaderboard | Player
local currentLeaderboard = nil

---@class LeaderboardRow
---@field infos string[]
local LeaderboardRow = class('LeaderboardRow')

---@param category string
---@param data table
---@return LeaderboardRow
function LeaderboardRow.allocate(category, data)
	local infos = {}
	if category == ""time"" then
		table.insert(infos, data.Driver)
		table.insert(infos, data.Time)
		table.insert(infos, data.Car)
	else
		table.insert(infos, data.Driver)
		table.insert(infos, data.Score)
	end
	setmetatable(infos, { __index = LeaderboardRow })
	return infos
end

---@class Leaderboard
---@field name string
---@field category string
---@field header string[]
---@field rows LeaderboardRow[]
---@field rowCount integer
---@field nbCols integer
local Leaderboard = class('Leaderboard')

---@param name string
function Leaderboard.noData(name)
	local category = ""score""
	local header = { ""Driver"", ""Score"" }
	local row = { ""No Data"", ""No Data"" }
	for _, cat in ipairs(LEADERBOARDS.time) do
		if cat == name then
			header = { ""Driver"", ""Time"", ""Car"" }
			category = ""time""
			row = { ""No Data"", ""No Data"", ""No Data"" }
			break
		end
	end
	local leaderboard = {
		name = name,
		category = category,
		header = header,
		rows = { row },
		rowCount = 1,
		nbCols = category == ""time"" and 3 or 2,
	}
	setmetatable(leaderboard, { __index = Leaderboard })
	return leaderboard
end

---@param name string
---@param data table
---@return Leaderboard
function Leaderboard.tryParse(name, data)
	local rowCount = 0
	local category = ""score""
	local header = { ""Driver"", ""Score"" }
	for _, cat in ipairs(LEADERBOARDS.time) do
		if cat == name then
			header = { ""Driver"", ""Time"", ""Car"" }
			category = ""time""
			break
		end
	end
	local rows = {}
	for steamID, record in pairs(data) do
		local row = LeaderboardRow.allocate(category, record)
		table.insert(rows, row)
		rowCount = rowCount + 1
	end
	rows = sortLeaderboard(category, rows)
	local leaderboard = {
		name = name,
		category = category,
		header = header,
		rows = rows,
		rowCount = rowCount,
		nbCols = category == ""time"" and 3 or 2,
	}
	setmetatable(leaderboard, { __index = Leaderboard })
	return leaderboard
end

---@param name string
function Leaderboard.fetch(name)
	if leaderboards[name] then
		currentLeaderboard = leaderboards[name]
		return
	end
	if localTesting then
		local currentPath = ac.getFolder(ac.FolderID.ScriptOrigin)
		local file = io.open(currentPath .. '/response/leaderboardsResponse.json', 'r')
		if not file then
			ac.error('Failed to open leaderboardResponse.json')
			return
		end
		local data = JSON.parse(file:read('*a'))
		file:close()
		data = data[name]
		if data then
			local leaderboard = Leaderboard.tryParse(name, data)
			if leaderboard then
				leaderboards[name] = leaderboard
				currentLeaderboard = leaderboard
				return
			end
		end
		local leaderboard = Leaderboard.noData(name)
		leaderboards[name] = leaderboard
		currentLeaderboard = leaderboard
		ac.error('Failed to parse leaderboard data.')
	else
		local url = FIREBASE_URL .. 'Leaderboards/' .. name .. '.json'
		web.get(url, function(err, response)
			if canProcessRequest(err, response) then
				local data = JSON.parse(response.body)
				if data then
					local leaderboard = Leaderboard.tryParse(name, data)
					if leaderboard then
						leaderboards[name] = leaderboard
						currentLeaderboard = leaderboard
						return
					end
				end
			end
			local leaderboard = Leaderboard.noData(name)
			leaderboards[name] = leaderboard
			currentLeaderboard = leaderboard
			ac.error('No leaderboard data found:', name)
		end)
	end
end

---@param name string
function Leaderboard.allocate(name)
	Leaderboard.fetch(name)
end

local DEFAULT_SETTINGS = const({
	essentialSize = 20,
	policeSize = 20,
	hudOffset = vec2(0, 0),
	fontSize = 20 / uiState.uiScale,
	current = 1,
	colorHud = rgbm(1, 0, 0, 1),
	colorHudInverted = rgbm(0, 1, 1, 1),
	timeMsg = 10,
	msgOffset = vec2(WIDTH_DIV._2, 10),
	fontSizeMSG = 30 / uiState.uiScale,
	menuPos = vec2(0, 0),
	unit = UNIT,
	unitMult = UNIT_MULT,
	starsSize = 20,
	starsPos = vec2(WIDTH_DIV._2, 0),
	leaderboardWrapWidth = 20 / 1.5,
})

---@class Settings
---@field essentialSize number
---@field policeSize number
---@field hudOffset vec2
---@field fontSize number
---@field current number
---@field colorHud rgbm
---@field colorHudInverted rgbm
---@field timeMsg number
---@field msgOffset vec2
---@field fontSizeMSG number
---@field menuPos vec2
---@field unit string
---@field unitMult number
---@field starsSize number
---@field starsPos vec2
local Settings = class('Settings')

---@return Settings
function Settings.new()
	local settings = table.clone(DEFAULT_SETTINGS, true)
	setmetatable(settings, { __index = Settings })
	return settings
end

---@param data table
---@return Settings
function Settings.tryParse(data)
	local hudOffset = data.hudOffset and tableToVec2(data.hudOffset) or vec2(0, 0)
	local colorHud = data.colorHud and tableToRGBM(data.colorHud) or rgbm(1, 0, 0, 1)
	local msgOffset = data.msgOffset and tableToVec2(data.msgOffset) or vec2(WIDTH_DIV._2, 10)
	local menuPos = data.menuPos and tableToVec2(data.menuPos) or vec2(0, 0)
	local starsPos = data.starsPos and tableToVec2(data.starsPos) or vec2(WINDOW_WIDTH, 0)
	local settings = {
		essentialSize = data.essentialSize or 20,
		policeSize = data.policeSize or 20,
		hudOffset = hudOffset,
		fontSize = data.fontSize or (20 / uiState.uiScale),
		current = data.current or 1,
		colorHud = colorHud,
		colorHudInverted = rgbm(1 - colorHud.r, 1 - colorHud.g, 1 - colorHud.b, 1),
		timeMsg = data.timeMsg or 10,
		msgOffset = msgOffset,
		fontSizeMSG = data.fontSizeMSG or (30 / uiState.uiScale),
		menuPos = menuPos,
		unit = data.unit or UNIT,
		unitMult = data.unitMult or UNIT_MULT,
		starsSize = data.starsSize or 20,
		starsPos = starsPos,
		leaderboardWrapWidth = (data.fontSize or DEFAULT_SETTINGS.fontSize) / 1.5,
	}
	setmetatable(settings, { __index = Settings })
	return settings
end

---@param url string
---@param callback function
function Settings.fetch(url, callback)
	if localTesting then
		local currentPath = ac.getFolder(ac.FolderID.ScriptOrigin)
		local file = io.open(currentPath .. '/response/settingsResponse.json', 'r')
		if not file then
			ac.error('Failed to open settingsResponse.json')
			callback(Settings.new())
			return
		end
		local data = JSON.parse(file:read('*a'))
		file:close()
		local settings = Settings.tryParse(data)
		callback(settings)
	else
		web.get(url, function(err, response)
			if canProcessRequest(err, response) then
				if hasExistingData(response) then
					local data = JSON.parse(response.body)
					if data then
						local settings = Settings.tryParse(data)
						callback(settings)
					else
						ac.error('Failed to parse settings data.')
						callback(Settings.new())
					end
				else
					callback(Settings.new())
				end
			else
				ac.error('Failed to fetch settings:', err)
				callback(Settings.new())
			end
		end)
	end
end

---@param callback function
function Settings.allocate(callback)
	local url = FIREBASE_URL .. 'Settings/' .. STEAMID .. '.json'
	Settings.fetch(url, function(settings)
		callback(settings)
	end)
end

---@return table
function Settings:export()
	local data = {}
	if self.essentialSize ~= DEFAULT_SETTINGS.essentialSize then
		data.essentialSize = self.essentialSize
	end
	if self.policeSize ~= DEFAULT_SETTINGS.policeSize then
		data.policeSize = self.policeSize
	end
	if self.hudOffset ~= DEFAULT_SETTINGS.hudOffset then
		data.hudOffset = { self.hudOffset.x, self.hudOffset.y }
	end
	if self.fontSize ~= DEFAULT_SETTINGS.fontSize then
		data.fontSize = self.fontSize
	end
	if self.current ~= DEFAULT_SETTINGS.current then
		data.current = self.current
	end
	if self.colorHud ~= DEFAULT_SETTINGS.colorHud then
		data.colorHud = { self.colorHud.r, self.colorHud.g, self.colorHud.b, self.colorHud.mult }
	end
	if self.timeMsg ~= DEFAULT_SETTINGS.timeMsg then
		data.timeMsg = self.timeMsg
	end
	if self.msgOffset ~= DEFAULT_SETTINGS.msgOffset then
		data.msgOffset = { self.msgOffset.x, self.msgOffset.y }
	end
	if self.fontSizeMSG ~= DEFAULT_SETTINGS.fontSizeMSG then
		data.fontSizeMSG = self.fontSizeMSG
	end
	if self.menuPos ~= DEFAULT_SETTINGS.menuPos then
		data.menuPos = { self.menuPos.x, self.menuPos.y }
	end
	if self.unit ~= DEFAULT_SETTINGS.unit then
		data.unit = self.unit
	end
	if self.unitMult ~= DEFAULT_SETTINGS.unitMult then
		data.unitMult = self.unitMult
	end
	if self.starsSize ~= DEFAULT_SETTINGS.starsSize then
		data.starsSize = self.starsSize
	end
	if self.starsPos ~= DEFAULT_SETTINGS.starsPos then
		data.starsPos = { self.starsPos.x, self.starsPos.y }
	end
	return data
end

function Settings:save()
	if localTesting or patchCount > 20 then return end
	patchCount = patchCount + 1
	local str = '{""' .. STEAMID .. '"": ' .. JSON.stringify(self:export()) .. '}'
	web.request('PATCH', FIREBASE_URL .. ""Settings.json"", str, function(err, response)
		if err then
			ac.error(err)
			return
		end
	end)
end

---@class Gate
---@field pos vec3
---@field dir vec3
---@field point1 vec3
---@field point2 vec3
---@field width number
---@field cross vec3
---@field id integer
local Gate = class('Gate')

---@param data table
---@return Gate|nil
function Gate.tryParse(data)
	local keys = { 'pos', 'dir', 'width', 'id' }
	if not hasKeys(keys, data) then
		ac.log('Missing required keys in gate data.')
		return nil
	end

	local pos = tableToVec3(data.pos)
	local dir = tableToVec3(data.dir)
	local cross = vec3(dir.z, 0, -dir.x)
	local point1 = pos + cross * data.width / 2
	local point2 = pos - cross * data.width / 2
	return {
		pos = pos,
		dir = dir,
		cross = cross,
		point1 = snapToTrack(point1) + vec3(0, GATE_HEIGHT_OFFSET, 0),
		point2 = snapToTrack(point2) + vec3(0, GATE_HEIGHT_OFFSET, 0),
		width = data.width,
		id = data.id,
	}
end

---@param data table
---@return Gate|nil
function Gate.allocate(data)
	local gate = Gate.tryParse(data)
	if not gate then
		ac.error('Failed to allocate gate')
		return nil
	end
	return gate
end

function Gate:print()
	ac.error('Gate:\npos:', self.pos, 'dir:', self.dir)
end

---@return boolean
function Gate:isTooFar()
	return self.pos:distanceSquared(car.position) > self.width * 3
end

---@return boolean
function Gate:isCrossed()
	if self:isTooFar() then
		return false
	end
	local carHalfWidth = car.aabbSize.z / 2

	local isCrossing = vec2.intersect(vec2(self.point1.x, self.point1.z), vec2(self.point2.x, self.point2.z),
		vec2(car.position.x - carHalfWidth, car.position.z - carHalfWidth),
		vec2(car.position.x + carHalfWidth, car.position.z + carHalfWidth))
	local goingThrough = self.dir:dot(car.look) > 0
	if isCrossing and goingThrough then
		return true
	end
	return false
end

---@class Sector
---@field name string
---@field startTime number
---@field time string
---@field timeLimit number
---@field addTimeLimit number[]
---@field timeColor rgbm
---@field finalTime number
---@field startDistance number
---@field lenght number
---@field gateCount integer
---@field gateIndex integer
---@field gates Gate[]
local Sector = class('Sector')

---@param data table
---@return Sector|nil
function Sector.tryParse(data)
	local keys = { 'timeLimit', 'length', 'gates' }
	if not hasKeys(keys, data) then
		ac.error('Missing required keys in sector data.')
		return nil
	end
	local gates = {}
	for i, gateData in ipairs(data.gates) do
		local gate = Gate(gateData)
		if not gate then
			ac.error('Failed to parse gate:', i)
			return nil
		end
		table.insert(gates, gate)
	end

	local sector = {
		name = data.name,
		gateCount = #gates,
		gateIndex = 1,
		startTime = 0,
		time = 'Time 00:00.000',
		timeLimit = data.timeLimit,
		addTimeLimit = data.addTimeLimit,
		timeColor = white,
		startDistance = 0,
		lenght = data.length,
		gates = gates,
	}
	setmetatable(sector, { __index = Sector })
	return sector
end

---@param url string
---@param callback function
function Sector.fetch(url, callback)
	if localTesting then
		local currentPath = ac.getFolder(ac.FolderID.ScriptOrigin)
		local filename = url:match('.+/(.+)$')
		local file = io.open(currentPath .. '/response/sector' .. filename, 'r')
		if not file then
			ac.error('Failed to open response.json')
			callback(nil)
			return
		end
		local data = JSON.parse(file:read('*a'))
		file:close()
		local sector = Sector.tryParse(data)
		callback(sector)
	else
		web.get(url, function(err, response)
			if canProcessRequest(err, response) then
				local data = JSON.parse(response.body)
				if data then
					local sector = Sector.tryParse(data)
					callback(sector)
				else
					ac.error('Failed to parse sector data.')
					callback(nil)
				end
			else
				callback(nil)
			end
		end)
	end
end

---@param name string
---@param callback function
function Sector.allocate(name, callback)
	local url = FIREBASE_URL .. 'Sectors/' .. name .. '.json'
	Sector.fetch(url, function(sector)
		if not sector then
			ac.error('Failed to allocate sector:', name)
		else
			sector.name = name
		end
		callback(sector)
	end)
end

function Sector:reset()
	self.gateIndex = 1
	self.startTime = 0
	self.time = 'Time - 00:00.000'
	if self.timeLimit > 0 then
		self.time = 'lvl 3 - ' .. formatTime(self.timeLimit + self.addTimeLimit[3], '')
	end
	self.timeColor = white
	self.startDistance = 0
	self.finalTime = 0
end

function Sector:starting()
	if self.gateIndex == 2 then
		self.time = 'Time - 00:00.000'
		if self.timeLimit > 0 then
			self.time = 'lvl 3 - ' .. formatTime(self.timeLimit + self.addTimeLimit[3], '')
		end
		self.startTime = os.preciseClock()
		self.startDistance = car.distanceDrivenTotalKm
	end
end

---@return boolean
function Sector:isFinished()
	return self.gateIndex > self.gateCount and car.distanceDrivenTotalKm - self.startDistance > self.lenght
end

---@return boolean
function Sector:hasStarted()
	return self.startTime > 0
end

function Sector:updateTime()
	if self.startTime > 0 then
		local time = os.preciseClock() - self.startTime
		local lvl = 'Time'
		if self.timeLimit ~= 0 then
			time = self.timeLimit + self.addTimeLimit[3] - time
			lvl = 'lvl' .. missionManager.level
			if time < 0 then
				time = 0
				lvl = 'FAIL'
			end
		end
		local minutes = math.floor(time / 60)
		local seconds = math.floor(time % 60)
		local milliseconds = math.floor((time % 1) * 1000)
		self.time = lvl .. (' - %02d:%02d.%03d'):format(minutes, seconds, milliseconds)
	end
end

---@return integer
function Sector:isUnderTimeLimit()
	if self.timeLimit > 0 then
		local time = os.preciseClock() - self.startTime
		if time < self.timeLimit + self.addTimeLimit[1] then
			return 3
		elseif time < self.timeLimit + self.addTimeLimit[2] then
			return 2
		elseif time < self.timeLimit + self.addTimeLimit[3] then
			return 1
		end
		missionManager.level = 0
		return 0
	end
	return 1
end

function Sector:updateTimeColor()
	if self:hasStarted() then
		local underTimeLimit = self:isUnderTimeLimit()
		if underTimeLimit ~= missionManager.level then
			missionManager.level = underTimeLimit
			missionManager.msgTime = 20
		end
		if underTimeLimit == 3 or self.timeLimit == 0 then
			if self:isFinished() then
				self.timeColor = rgbm.colors.green
			else
				self.timeColor = rgbm.colors.white
			end
		elseif underTimeLimit == 2 then
			self.timeColor = rgbm.colors.yellow
		elseif underTimeLimit == 1 then
			self.timeColor = rgbm.colors.orange
		else
			self.timeColor = rgbm.colors.red
		end
	end
end

function Sector:update()
	self:updateTime()
	self:updateTimeColor()
	if self.gateIndex > self.gateCount then
		return
	end
	if self.gates[self.gateIndex]:isCrossed() then
		self.gateIndex = self.gateIndex + 1
		self:starting()
		self:updateTimeColor()
		if self:isFinished() then
			local finalTime = os.preciseClock() - self.startTime
			if finalTime < 1 then return end
			self.finalTime = finalTime
			local time = finalTime
			local lvl = 'Time'
			if self.timeLimit ~= 0 then
				time = self.timeLimit + self.addTimeLimit[3] - time
				lvl = 'lvl' .. missionManager.level
				if time < 0 then
					time = 0
					lvl = 'FAIL'
				end
			end
			self.time = lvl .. (' - %02d:%02d.%03d'):format(math.floor(self.finalTime / 60), math.floor(self.finalTime % 60),
				math.floor((self.finalTime % 1) * 1000))
		end
	end
end

---@class SectorStats
---@field name string
---@field records table<string, number>
local SectorStats = class('SectorStats')

---@param name string
---@param data table
---@return SectorStats
function SectorStats.tryParse(name, data)
	local records = {}
	for carName, time in pairs(data) do
		local nameWithoutUtf8 = removeUtf8Char(carName)
		records[nameWithoutUtf8] = time
	end
	local sectorStats = {
		name = name,
		records = records,
	}
	setmetatable(sectorStats, { __index = SectorStats })
	return sectorStats
end

---@param name string
---@param data table
---@return SectorStats|nil
function SectorStats.allocate(name, data)
	if type(data) == 'table' then
		local sectorStats = SectorStats.tryParse(name, data)
		if not sectorStats then
			ac.error('Failed to allocate sector stat')
			return nil
		end
		return sectorStats
	end
	if type(data) == 'number' then
		local records = {}
		records[CAR_NAME_NO_UTF8] = data
		local sectorStats = {
			name = name,
			records = records,
		}
		setmetatable(sectorStats, { __index = SectorStats })
		return sectorStats
	end
	ac.error('Failed to allocate sector stat')
	return nil
end

---@param time number
---@return boolean
function SectorStats:addRecord(time)
	if not self.records[CAR_NAME_NO_UTF8] or self.records[CAR_NAME_NO_UTF8] > time then
		self.records[CAR_NAME_NO_UTF8] = time
		return true
	end
	return false
end

---@return table
function SectorStats:export()
	local records = {}
	for carName, time in pairs(self.records) do
		records[carName] = truncate(time, 3)
	end
	return {
		[self.name] = records
	}
end

local lastRegister = {
	kms = 0,
	time = os.clock(),
}

---@class Player
---@field name string
---@field sectors SectorStats[]
---@field sectorsFormated table<string, table<string, string>>
---@field arrests integer
---@field getaways integer
---@field thefts integer
---@field heists integer
---@field deliveries integer
---@field overtake integer
---@field wins integer
---@field losses integer
---@field elo integer
---@field kms number
---@field time number
---@field timePlayed string
local Player = class('Player')

---@type Player | nil
local player = nil

local sharedPlayerLayout = {
	ac.StructItem.key(SHARED_PLAYER_DATA),
	hudColor = ac.StructItem.rgbm(),
	name = ac.StructItem.string(24),
	sectorsFormated = ac.StructItem.array(ac.StructItem.struct({
		name = ac.StructItem.string(16),
		records = ac.StructItem.array(ac.StructItem.string(50), 20)
	}), 5),
	arrests = ac.StructItem.uint16(),
	getaways = ac.StructItem.uint16(),
	thefts = ac.StructItem.uint16(),
	heists = ac.StructItem.uint16(),
	deliveries = ac.StructItem.uint16(),
	overtake = ac.StructItem.uint32(),
	wins = ac.StructItem.uint16(),
	losses = ac.StructItem.uint16(),
	elo = ac.StructItem.uint16(),
	kms = ac.StructItem.float(),
	time = ac.StructItem.float(),
}

---@type Settings | nil
local settings = nil

local sharedPlayerData = ac.connect(sharedPlayerLayout, true, ac.SharedNamespace.ServerScript)

local function updateSharedPlayerData()
	if not player then return end
	local hudC = rgbm.colors.red
	if settings then
		hudC = settings.colorHud
	end
	sharedPlayerData.hudColor = hudC
	sharedPlayerData.name = player.name
	sharedPlayerData.arrests = player.arrests
	sharedPlayerData.getaways = player.getaways
	sharedPlayerData.thefts = player.thefts
	sharedPlayerData.heists = player.heists
	sharedPlayerData.deliveries = player.deliveries
	sharedPlayerData.overtake = player.overtake
	sharedPlayerData.wins = player.wins
	sharedPlayerData.losses = player.losses
	sharedPlayerData.elo = player.elo
	sharedPlayerData.kms = player.kms
	sharedPlayerData.time = player.time
	sharedPlayerData.sectorsFormated = {}
	local i = 1
	table.forEach(player.sectorsFormated, function(v, k)
		sharedPlayerData.sectorsFormated[i].name = k .. '\0'
		for j, entry in ipairs(v) do
			local carName = string.sub(entry[1], 1, 45)
			sharedPlayerData.sectorsFormated[i].records[j] = carName .. ' - ' .. entry[2] .. '\0'
		end
		i = i + 1
	end)
end

---@return Player
function Player.new()
	local _player = {
		name = DRIVER_NAME,
		sectors = {},
		sectorsFormated = {},
		arrests = 0,
		getaways = 0,
		thefts = 0,
		heists = 0,
		deliveries = 0,
		overtake = 0,
		wins = 0,
		losses = 0,
		elo = 1200,
		kms = 0,
		time = 0,
		timePlayed = formatTime(0, 'time played'),
	}
	setmetatable(_player, { __index = Player })
	return _player
end

---@param data table
---@return Player
function Player.tryParse(data)
	if not data then
		return Player.new()
	end
	local sectors = {}
	if data.sectors then
		for sectorName, sectorData in pairs(data.sectors) do
			local sector = SectorStats.allocate(sectorName, sectorData)
			if sector then
				table.insert(sectors, sector)
			end
		end
	end
	local _player = {
		name = DRIVER_NAME,
		sectors = sectors,
		sectorsFormated = {},
		arrests = data.arrests or 0,
		getaways = data.getaways or 0,
		thefts = data.thefts or 0,
		heists = data.heists or 0,
		deliveries = data.deliveries or 0,
		overtake = data.overtake or 0,
		wins = data.wins or 0,
		losses = data.losses or 0,
		elo = data.elo or 1200,
		kms = data.kms or 0,
		time = data.time or 0,
		timePlayed = formatTime(data.time or 0, 'time played'),
	}
	setmetatable(_player, { __index = Player })
	return _player
end

---@param url string
---@param callback function
function Player.fetch(url, callback)
	if localTesting then
		local currentPath = ac.getFolder(ac.FolderID.ScriptOrigin)
		local file = io.open(currentPath .. '/response/playerResponse.json', 'r')
		if not file then
			ac.error('Failed to open playerResponse.json')
			callback(Player.new())
			return
		end
		local data = JSON.parse(file:read('*a'))
		file:close()
		local _player = Player.tryParse(data)
		callback(_player)
	else
		web.get(url, function(err, response)
			if canProcessRequest(err, response) then
				if hasExistingData(response) then
					local data = JSON.parse(response.body)
					if data then
						local _player = Player.tryParse(data)
						callback(_player)
					else
						ac.error('Failed to parse player data.')
						callback(Player.new())
					end
				else
					callback(Player.new())
				end
			else
				ac.error('Failed to fetch player:', err)
				callback(Player.new())
			end
		end)
	end
end

---@param callback function
function Player.allocate(callback)
	local url = FIREBASE_URL .. 'Players/' .. STEAMID .. '.json'
	Player.fetch(url, function(_player)
		callback(_player)
	end)
end

function Player:sortSectors()
	for _, sector in ipairs(self.sectors) do
		local entries = {}
		for carName, time in pairs(sector.records) do
			table.insert(entries, { carName, time })
		end
		table.sort(entries, function(a, b)
			return a[2] < b[2]
		end)
		for i, entry in ipairs(entries) do
			entries[i][2] = formatTime(entry[2], '')
		end
		self.sectorsFormated[sector.name] = entries
	end
end

---@return table
function Player:export()
	local kms = truncate(car.distanceDrivenSessionKm - lastRegister.kms + self.kms, 3)
	local time = math.round(os.clock() - lastRegister.time + self.time, 0)
	local data = { name = self.name }

	if self.arrests > 0 then
		data.arrests = self.arrests
	end
	if self.getaways > 0 then
		data.getaways = self.getaways
	end
	if self.thefts > 0 then
		data.thefts = self.thefts
	end
	if self.heists > 0 then
		data.heists = self.heists
	end
	if self.deliveries > 0 then
		data.deliveries = self.deliveries
	end
	if self.overtake > 0 then
		data.overtake = self.overtake
	end
	if self.wins > 0 then
		data.wins = self.wins
	end
	if self.losses > 0 then
		data.losses = self.losses
	end
	if self.elo ~= 1200 then
		data.elo = self.elo
	end
	if kms > 0 then
		data.kms = kms
	end
	if time > 0 then
		data.time = time
	end

	lastRegister.kms = car.distanceDrivenSessionKm
	lastRegister.time = os.clock()

	local sectors = {}
	for _, sector in ipairs(self.sectors) do
		if not sector then
			break
		end
		local sectorData = sector:export()
		for k, v in pairs(sectorData) do
			sectors[k] = v
		end
	end
	if next(sectors) then
		data.sectors = sectors
	end
	self:sortSectors()
	updateSharedPlayerData()
	ac.broadcastSharedEvent(SHARED_EVENT_KEY, 'update')
	return data
end

function Player:save()
	local str = '{""' .. STEAMID .. '"": ' .. JSON.stringify(self:export()) .. '}'
	if localTesting or patchCount > 40 then return end
	patchCount = patchCount + 1
	web.request('PATCH', FIREBASE_URL .. ""Players.json"", str, function(err, response)
		if err then
			ac.error(err)
			return
		end
	end)
end

---@param sectorName string
---@param time number
---@return boolean
function Player:addSectorRecord(sectorName, time)
	---@type SectorStats | nil
	local sector = nil
	for _, s in ipairs(self.sectors) do
		if s.name == sectorName then
			sector = s
			break
		end
	end
	if not sector then
		sector = SectorStats.allocate(sectorName, time)
		if not sector then return false end
		table.insert(self.sectors, sector)
		return true
	end
	return sector:addRecord(time)
end

---@type Sector[]
local sectors = {}

local function getSectorByName(name)
	for _, sector in ipairs(sectors) do
		if sector.name == name then
			return sector
		end
	end
	return nil
end

---@class SectorManager
---@field sector Sector
---@field started boolean
---@field finished boolean
local SectorManager = class('SectorManager')

---@return SectorManager
function SectorManager.new()
	local sm = {
		sector = nil,
		started = false,
		finished = false,
	}
	setmetatable(sm, { __index = SectorManager })
	return sm
end

---@return SectorManager
function SectorManager.allocate()
	return SectorManager.new()
end

function SectorManager:reset()
	duo.teammateHasFinished = false
	duo.sentFinish = false
	duo.waiting = false
	duo.request = false
	duo.onlineSender = nil
	self.started = false
	self.finished = false
	self.sector:reset()
end

---@param name string
function SectorManager:setSector(name)
	local sector = getSectorByName(name)
	if sector then
		self.sector = sector
		self:reset()
	end
end

---@type SectorManager
local sectorManager = SectorManager()

local acpEvent = ac.OnlineEvent({
	message = ac.StructItem.string(110),
	messageType = ac.StructItem.int16(),
	yourIndex = ac.StructItem.int16(),
}, function(sender, data)
	if not sender then return end
	if data.yourIndex == car.sessionID and data.messageType == 5 and data.message == ""Request"" then
		duo.request = true
		duo.onlineSender = sender
	elseif data.yourIndex == car.sessionID and data.messageType == 5 and data.message == ""Accept"" then
		duo.teammate = sender
		duo.request = false
	elseif duo.teammate and data.yourIndex == car.sessionID and sender.index == duo.teammate.index and data.messageType == 5 and data.message == ""Finished"" then
		duo.teammateHasFinished = true
	elseif duo.teammate and data.yourIndex == car.sessionID and sender.index == duo.teammate.index and data.messageType == 5 and data.message == ""Cancel"" then
		duo.teammate = nil
		duo.request = false
		sectorManager:setSector('BOBs SCRAPYARD')
	end
end)

function SectorManager:resetDuo()
	duo.teammate = nil
	duo.request = false
	duo.onlineSender = nil
	duo.teammateHasFinished = false
	duo.waiting = false
end

function SectorManager:hasTeammateFinished()
	if duo.teammate and duo.teammateHasFinished then
		if not duo.sentFinish then
			acpEvent{message = ""Finished"", messageType = 5, yourIndex = ac.getCar(duo.teammate.index).sessionID}
			duo.sentFinish = true
		end
		return true
	end
	return false
end

local canRun = false
local function shouldRun()
	if canRun then return true end
	local isDataLoaded = dataLoaded['Settings'] and dataLoaded['PlayerData'] and dataLoaded['Sectors']
	local hasNecessaryData = settings and player and sectors and sectorManager.sector
	local hasMinVersion = CSP_VERSION >= CSP_MIN_VERSION
	if isDataLoaded and hasMinVersion and hasNecessaryData and not isPoliceCar(CAR_ID) then
		canRun = true
	end
	return canRun
end

local hud = {
	size = vec2(0, 0),
	pos = {
		countdown1 = vec2(0, 0),
		countdown2 = vec2(0, 0),
		menu1 = vec2(0, 0),
		menu2 = vec2(0, 0),
		ranks1 = vec2(0, 0),
		ranks2 = vec2(0, 0),
		theft1 = vec2(0, 0),
		theft2 = vec2(0, 0),
		left1 = vec2(0, 0),
		left2 = vec2(0, 0),
		right1 = vec2(0, 0),
		right2 = vec2(0, 0),
	},
}

----------------------------------------------------------------------------------------------- Math -----------------------------------------------------------------------------------------------

local function calculateElo(opponentElo, youWon)
	local k = 32
	local expectedScore = 1 / (1 + 10 ^ ((opponentElo - player.elo) / 400))
	local score = youWon and 1 or 0
	local newElo = player.elo + k * (score - expectedScore)
	return math.floor(newElo)
end

local function cross(vector1, vector2)
	return vec2(vector1.x + vector2.x, vector1.y + vector2.y)
end

local function isPointInCircle(point, circle, radius)
	if math.distanceSquared(point, circle) <= radius then
		return true
	end
	return false
end

-------------------------------------------------------------------------------------------- Init --------------------------------------------------------------------------------------------

local starsUI = {
	starsPos = vec2(0, 0),
	starsSize = vec2(0, 0),
	startSpace = 0,
	full = ""https://acstuff.ru/images/icons_24/star_full.png"",
	empty = ""https://acstuff.ru/images/icons_24/star_empty.png"",
}

local function updateStarsPos()
	starsUI.starsPos = vec2(settings.starsPos.x - settings.starsSize / 2, settings.starsPos.y + settings.starsSize / 2)
	starsUI.starsSize = vec2(settings.starsPos.x - settings.starsSize * 2, settings.starsPos.y + settings.starsSize * 2)
	starsUI.startSpace = settings.starsSize / 1.5
end

local function updateHudPos()
	hud.size = vec2(HEIGHT_DIV._80 * settings.essentialSize, HEIGHT_DIV._80 * settings.essentialSize)
	hud.pos.theftPos1 = vec2(hud.size.x - hud.size.x / 1.56, hud.size.y / 1.9)
	hud.pos.theftPos2 = vec2(hud.size.x / 4.6, hud.size.y / 2.65)
	hud.pos.ranksPos1 = vec2(hud.size.x / 1.97, hud.size.y / 1.9)
	hud.pos.ranksPos2 = vec2(hud.size.x - hud.size.x / 1.56, hud.size.y / 2.65)
	hud.pos.countdownPos1 = vec2(hud.size.x / 1.53, hud.size.y / 1.9)
	hud.pos.countdownPos2 = vec2(hud.size.x - hud.size.x / 2.04, hud.size.y / 2.65)
	hud.pos.menuPos1 = vec2(hud.size.x - hud.size.x / 4.9, hud.size.y / 1.9)
	hud.pos.menuPos2 = vec2(hud.size.x / 1.53, hud.size.y / 2.65)
	hud.pos.leftPos1 = vec2(hud.size.x / 8, hud.size.y / 2.8)
	hud.pos.leftPos2 = vec2(0, hud.size.y / 4.3)
	hud.pos.rightPos1 = vec2(hud.size.x, hud.size.y / 2.8)
	hud.pos.rightPos2 = vec2(hud.size.x - hud.size.x / 8, hud.size.y / 4.3)
	settings.fontSize = settings.essentialSize * FONT_MULT
end

local function textWithBackground(text, sizeMult, height)
	ui.pushDWriteFont(""Orbitron"")
	local textSize = ui.measureDWriteText(text, settings.fontSizeMSG * sizeMult)
	local rectPos1 = settings.msgOffset - vec2(textSize.x / 2, 0)
	local rectPos2 = textSize + rectPos1
	local rectOffset = vec2(WIDTH_DIV._320, HEIGHT_DIV._320)
	if ui.time() % 1 < 0.5 then
		ui.drawRectFilled(rectPos1 - rectOffset, rectPos2 + rectOffset, COLOR_MSG_BG, 10)
	else
		ui.drawRectFilled(rectPos1 - rectOffset, rectPos2 + rectOffset, rgbm(0, 0, 0, 0.5), 10)
	end
	ui.dwriteDrawText(text, settings.fontSizeMSG * sizeMult, rectPos1, white)
	ui.popDWriteFont()
end

local function displayInGrid()
	local box1 = vec2(WIDTH_DIV._32, HEIGHT_DIV._70)
	local colWidth = (menuSize[currentTab].x - WIDTH_DIV._32) / currentLeaderboard.nbCols
	ui.pushDWriteFont(""Orbitron;Weight=Black"")
	ui.newLine()
	ui.dwriteTextWrapped(""Pos"", settings.leaderboardWrapWidth, settings.colorHud)
	for i = 1, #currentLeaderboard.header do
		local textLenght = ui.measureDWriteText(currentLeaderboard.header[i], settings.leaderboardWrapWidth).x
		ui.sameLine(box1.x + colWidth / 2 + colWidth * (i - 1) - textLenght / 2)
		ui.dwriteTextWrapped(currentLeaderboard.header[i], settings.leaderboardWrapWidth, settings.colorHud)
	end
	local linePos = ui.getMaxCursorY() + HEIGHT_DIV._100
	ui.drawSimpleLine(vec2(0, linePos), vec2(menuSize[currentTab].x, linePos), white, 2)
	ui.newLine()
	ui.popDWriteFont()
	ui.pushDWriteFont(""Orbitron;Weight=Regular"")
	for i = 1, #currentLeaderboard.rows do
		ui.dwriteTextWrapped(i, settings.leaderboardWrapWidth, white)
		for j = 1, #currentLeaderboard.rows[1] do
			local textLenght = ui.measureDWriteText(currentLeaderboard.rows[i][j], settings.leaderboardWrapWidth).x
			ui.sameLine(box1.x + colWidth / 2 + colWidth * (j - 1) - textLenght / 2)
			ui.dwriteTextWrapped(currentLeaderboard.rows[i][j], settings.leaderboardWrapWidth, white)
		end
	end
	ui.popDWriteFont()
	local lineHeight = math.max(ui.itemRectMax().y + box1.y)
	local lineOffset = box1.x * 1.5
	ui.drawSimpleLine(vec2(lineOffset, HEIGHT_DIV._20), vec2(lineOffset, lineHeight), white, 2)
	for i = 1, currentLeaderboard.nbCols - 1 do
		ui.drawSimpleLine(vec2(box1.x + colWidth * i, HEIGHT_DIV._20), vec2(box1.x + colWidth * i, lineHeight), white, 2)
	end
end

local function playerScores()
	ui.dwriteTextWrapped(""Scores: "", STATS_FONT_SIZE.header, settings.colorHud)
	ui.newLine()
	ui.sameLine(WIDTH_DIV._100)
	ui.beginGroup()
	ui.dwriteTextWrapped(""Arrests: "", STATS_FONT_SIZE.stats, settings.colorHudInverted)
	ui.sameLine(WIDTH_DIV._10)
	ui.dwriteTextWrapped(player.arrests, STATS_FONT_SIZE.stats, rgbm.colors.white)
	ui.dwriteTextWrapped(""Getaways: "", STATS_FONT_SIZE.stats, settings.colorHudInverted)
	ui.sameLine(WIDTH_DIV._10)
	ui.dwriteTextWrapped(player.getaways, STATS_FONT_SIZE.stats, rgbm.colors.white)
	ui.dwriteTextWrapped(""Car Thefts: "", STATS_FONT_SIZE.stats, settings.colorHudInverted)
	ui.sameLine(WIDTH_DIV._10)
	ui.dwriteTextWrapped(player.thefts, STATS_FONT_SIZE.stats, rgbm.colors.white)
	ui.dwriteTextWrapped(""Bank Heists: "", STATS_FONT_SIZE.stats, settings.colorHudInverted)
	ui.sameLine(WIDTH_DIV._10)
	ui.dwriteTextWrapped(player.heists, STATS_FONT_SIZE.stats, rgbm.colors.white)
	ui.dwriteTextWrapped(""Drug Deliveries: "", STATS_FONT_SIZE.stats, settings.colorHudInverted)
	ui.sameLine(WIDTH_DIV._10)
	ui.dwriteTextWrapped(player.deliveries, STATS_FONT_SIZE.stats, rgbm.colors.white)
	ui.dwriteTextWrapped(""Overtake: "", STATS_FONT_SIZE.stats, settings.colorHudInverted)
	ui.sameLine(WIDTH_DIV._10)
	ui.dwriteTextWrapped(player.overtake, STATS_FONT_SIZE.stats, rgbm.colors.white)
	ui.dwriteTextWrapped(""Race Wins: "", STATS_FONT_SIZE.stats, settings.colorHudInverted)
	ui.sameLine(WIDTH_DIV._10)
	ui.dwriteTextWrapped(player.wins, STATS_FONT_SIZE.stats, rgbm.colors.white)
	ui.dwriteTextWrapped(""Race Losses: "", STATS_FONT_SIZE.stats, settings.colorHudInverted)
	ui.sameLine(WIDTH_DIV._10)
	ui.dwriteTextWrapped(player.losses, STATS_FONT_SIZE.stats, rgbm.colors.white)
	ui.dwriteTextWrapped(""Racing Elo: "", STATS_FONT_SIZE.stats, settings.colorHudInverted)
	ui.sameLine(WIDTH_DIV._10)
	ui.dwriteTextWrapped(player.elo .. ' pts', STATS_FONT_SIZE.stats, rgbm.colors.white)
	ui.dwriteTextWrapped(""Distance Driven: "", STATS_FONT_SIZE.stats, settings.colorHudInverted)
	ui.sameLine(WIDTH_DIV._10)
	ui.dwriteTextWrapped(player.kms .. ' kms', STATS_FONT_SIZE.stats, rgbm.colors.white)
	ui.dwriteTextWrapped(""Time Played: "", STATS_FONT_SIZE.stats, settings.colorHudInverted)
	ui.sameLine(WIDTH_DIV._10)
	ui.dwriteTextWrapped(player.timePlayed, STATS_FONT_SIZE.stats, rgbm.colors.white)
	ui.endGroup()
end

local function playerTimes()
	-- ui.newLine()
	ui.dwriteTextWrapped(""Sectors: "", STATS_FONT_SIZE.header, settings.colorHud)
	ui.newLine()
	ui.sameLine(WIDTH_DIV._100)
	ui.beginGroup()
	for sectorName, times in pairs(player.sectorsFormated) do
		ui.dwriteTextWrapped(sectorName .. "": "", STATS_FONT_SIZE.stats, settings.colorHud)
		ui.beginSubgroup(WIDTH_DIV._50)
		for i = 1, #times do
			ui.dwriteTextWrapped(times[i][1] .. "": "", STATS_FONT_SIZE.stats, settings.colorHudInverted)
			ui.sameLine(WIDTH_DIV._8)
			ui.dwriteTextWrapped(times[i][2], STATS_FONT_SIZE.stats, white)
		end
		ui.endSubgroup()
		ui.newLine()
	end
	ui.dummy(vec2(WIDTH_DIV._50, HEIGHT_DIV._50))
	ui.endGroup()
end

local function playerStats()
	ui.separator()
	ui.pushDWriteFont(""Orbitron;Weight=Black"")
	local topPosY = ui.getCursorY() - 5
	ui.childWindow('playerTimes', playerStatsSubWindow, true, ui.WindowFlags.ThinScrollbar, function()
		playerTimes()
	end)
	ui.drawSimpleLine(vec2(playerStatsSubWindow.x + WIDTH_DIV._100, topPosY), vec2(playerStatsSubWindow.x + WIDTH_DIV._100, ui.getCursorY()), rgbm(0.1, 0.1, 0.1, 0.3), 2)
	ui.sameLine(playerStatsSubWindow.x + WIDTH_DIV._50)
	ui.childWindow('playerScores', playerStatsSubWindow, true, ui.WindowFlags.ThinScrollbar, function()
		playerScores()
	end)
	ui.popDWriteFont()
end

local function showLeaderboard()
	ui.setNextItemWidth(WIDTH_DIV._12)
	ui.combo(""leaderboard"", currentLeaderboard.name, function()
		for i = 1, #LEADERBOARD_NAMES[2] do
			if ui.selectable(LEADERBOARD_NAMES[2][i], currentLeaderboard.name == LEADERBOARD_NAMES[2][i]) then
				if LEADERBOARD_NAMES[1][i] == ""Your Stats"" then
					currentLeaderboard = player
				else
					Leaderboard.allocate(LEADERBOARD_NAMES[1][i])
				end
			end
		end
	end)
	ui.sameLine(menuSize[currentTab].x - 64)
	if ui.modernButton('', vec2(48, 32), ui.ButtonFlags.PressedOnRelease, 'EXIT', 24, nil) then menuStates.leaderboard = false end
	if not currentLeaderboard then return 3 end
	if currentLeaderboard.name == player.name then
		playerStats()
	else
		displayInGrid()
	end
	return 3
end

----------------------------------------------------------------------------------------------- settings -----------------------------------------------------------------------------------------------
local PREVIEWS = const({ 'Message', 'Distance Bar', 'Stars' })

local preview = {
	msg = false,
	distanceBar = false,
	stars = false,
}
---@param buttonClicked string
local function updatePreviewState(buttonClicked)
	if buttonClicked == 'Message' then
		preview.msg = not preview.msg
		preview.distanceBar = false
		preview.stars = false
	elseif buttonClicked == 'Distance Bar' then
		preview.distanceBar = not preview.distanceBar
		preview.msg = false
		preview.stars = false
	elseif buttonClicked == 'Stars' then
		preview.stars = not preview.stars
		preview.msg = false
		preview.distanceBar = false
	end
end

COLOR_MSG_BG = rgbm(0.5, 0.5, 0.5, 0.5)

local online = {
	message = """",
	messageTimer = 0,
	type = 1,
	chased = false,
	officer = nil,
	level = 0,
}

local function showStarsPursuit()
	local starsColor = rgbm(1, 1, 1, os.clock() % 2 + 0.3)
	updateStarsPos()
	for i = 1, 5 do
		if i > online.level / 2 then
			ui.drawImage(starsUI.empty, starsUI.starsPos, starsUI.starsSize, rgbm(1, 1, 1, 0.2))
		else
			ui.drawImage(starsUI.full, starsUI.starsPos, starsUI.starsSize, starsColor)
		end
		starsUI.starsPos.x = starsUI.starsPos.x - settings.starsSize - starsUI.startSpace
		starsUI.starsSize.x = starsUI.starsSize.x - settings.starsSize - starsUI.startSpace
	end
end

local function distanceBarPreview()
	ui.transparentWindow(""progressBar"", vec2(0, 0), vec2(WINDOW_WIDTH, WINDOW_HEIGHT), function()
		local playerInFront = ""You are in front""
		local text = math.floor(50) .. ""m""
		local textLenght = ui.measureDWriteText(text, 30)
		ui.newLine()
		ui.dummy(vec2(WIDTH_DIV._3, HEIGHT_DIV._40))
		ui.sameLine()
		ui.beginRotation()
		ui.progressBar(125 / 250, vec2(WIDTH_DIV._3, HEIGHT_DIV._60), playerInFront)
		ui.endRotation(90, vec2(settings.msgOffset.x - WIDTH_DIV._2 - textLenght.x / 2, settings.msgOffset.y + textLenght.y / 3))
		ui.dwriteDrawText(text, 30, vec2(settings.msgOffset.x - textLenght.x / 2, settings.msgOffset.y), white)
	end)
end

local function previewMSG()
	ui.transparentWindow(""previewMSG"", vec2(0, 0), vec2(WINDOW_WIDTH, WINDOW_HEIGHT), function()
		ui.pushDWriteFont(""Orbitron;Weight=Black"")
		local textSize = ui.measureDWriteText(""Messages from Police when being chased"", settings.fontSizeMSG)
		local uiOffsetX = settings.msgOffset.x - textSize.x / 2
		local uiOffsetY = settings.msgOffset.y
		ui.drawRectFilled(vec2(uiOffsetX - 5, uiOffsetY - 5), vec2(uiOffsetX + textSize.x + 5, uiOffsetY + textSize.y + 5), COLOR_MSG_BG)
		ui.dwriteDrawText(""Messages from Police when being chased"", settings.fontSizeMSG, vec2(uiOffsetX, uiOffsetY), settings.colorHud)
		ui.popDWriteFont()
	end)
end

local function previewStars()
	ui.transparentWindow(""PreviewStars"", vec2(0, 0), vec2(WINDOW_WIDTH, WINDOW_HEIGHT), function()
		showStarsPursuit()
	end)
end

local function uiTab()
	ui.text('On Screen Message : ')
	settings.timeMsg = ui.slider('##' .. 'Time Msg On Screen', settings.timeMsg, 1, 15, 'Time Msg On Screen' .. ': %.0fs')
	settings.fontSizeMSG = ui.slider('##' .. 'Font Size MSG', settings.fontSizeMSG, 10, 50, 'Font Size' .. ': %.0f')
	settings.msgOffset.y = ui.slider('##' .. 'Msg On Screen Offset Y', settings.msgOffset.y, 0, WINDOW_HEIGHT, 'Msg On Screen Offset Y' .. ': %.0f')
	settings.msgOffset.x = ui.slider('##' .. 'Msg On Screen Offset X', settings.msgOffset.x, 0, WINDOW_WIDTH, 'Msg On Screen Offset X' .. ': %.0f')
	if ui.button('MSG Offset X to center') then settings.msgOffset.x = WIDTH_DIV._2 end
	ui.newLine()
	ui.text('Stars : ')
	settings.starsPos.x = ui.slider('##' .. 'Stars Offset X', settings.starsPos.x, 0, WINDOW_WIDTH, 'Stars Offset X' .. ': %.0f')
	settings.starsPos.y = ui.slider('##' .. 'Stars Offset Y', settings.starsPos.y, 0, WINDOW_HEIGHT, 'Stars Offset Y' .. ': %.0f')
	settings.starsSize = ui.slider('##' .. 'Stars Size', settings.starsSize, 10, 50, 'Stars Size' .. ': %.0f')
	ui.newLine()
	ui.text('Preview : ')
	for i = 1, #PREVIEWS do
		if ui.button(PREVIEWS[i]) then
			updatePreviewState(PREVIEWS[i])
		end
		ui.sameLine()
	end
	if preview.msg then previewMSG() end
	if preview.distanceBar then distanceBarPreview() end
	if preview.stars then previewStars() end
	ui.newLine()
end

local function settingsWindow()
	hud.size = vec2(HEIGHT_DIV._80 * settings.essentialSize, HEIGHT_DIV._80 * settings.essentialSize)
	ui.sameLine(10)
	ui.beginGroup()
	ui.newLine(15)

	ui.text('Unit : ')
	ui.sameLine(160)
	if ui.selectable('mph', settings.unit == 'mph',_, ui.measureText('km/h')) then
		settings.unit = 'mph'
		settings.unitMult = 0.621371
	end
	ui.sameLine(200)
	if ui.selectable('km/h', settings.unit == 'km/h',_, ui.measureText('km/h')) then
		settings.unit = 'km/h'
		settings.unitMult = 1
	end
	ui.sameLine(menuSize[currentTab].x - 64)
	if ui.modernButton('', vec2(48, 32), ui.ButtonFlags.PressedOnRelease, 'EXIT', 24, nil) then
		menuStates.main = false
		settings:save()
	end
	ui.text('Welcome Menu Keybind : ')
	ui.sameLine()
	openMenuKeyBind:control(vec2(120, 0))
	ui.newLine()
	settings.hudOffset.x = ui.slider('##' .. 'HUD Offset X', settings.hudOffset.x, 0, WINDOW_WIDTH,'HUD Offset X' .. ': %.0f')
	settings.hudOffset.y = ui.slider('##' .. 'HUD Offset Y', settings.hudOffset.y, 0, WINDOW_HEIGHT,'HUD Offset Y' .. ': %.0f')
	settings.essentialSize = ui.slider('##' .. 'HUD Size', settings.essentialSize, 10, 50, 'HUD Size' .. ': %.0f')
	settings.fontSize = settings.essentialSize * FONT_MULT
	ui.setNextItemWidth(300)
	local colorHud = settings.colorHud
	settings.colorHudInverted = rgbm(1 - colorHud.r, 1 - colorHud.g, 1 - colorHud.b, 1)
	ui.colorPicker('Theme Color', colorHud, ui.ColorPickerFlags.AlphaBar)
	ui.newLine()
	uiTab()
	ui.endGroup()
	updateHudPos()
	return 2
end

local function discordLinks()
	ui.newLine(50)
	if sectorManager.sector.name ~= 'H1' then
		ui.dwriteTextWrapped(""For more info about the challenge click on the Discord link :"", 15, white)
		if ui.textHyperlink(""Discord Channel"") then
			for i = 1, #SECTORS_DATA do
				if SECTORS_DATA[i].name == sectorManager.sector.name then
					os.openURL(SECTORS_DATA[i].discordLink)
				end
			end
		end
		ui.newLine()
		ui.dwriteTextWrapped(""Here's a video of the challenge :"", 15, white)
		if ui.textHyperlink(""Demo Video"") then
			for i = 1, #SECTORS_DATA do
				if SECTORS_DATA[i].name == sectorManager.sector.name then
					os.openURL(SECTORS_DATA[i].video)
				end
			end
		end
	end
	ui.newLine(10)
end

local function doubleTrouble()
	local players = {}
	for i = ac.getSim().carsCount - 1, 0, -1 do
		local carPlayer = ac.getCar(i)
		if carPlayer and carPlayer.isConnected and (not carPlayer.isHidingLabels) then
			if carPlayer.index ~= car.index and not isPoliceCar(carPlayer:id()) then
				table.insert(players, carPlayer)
			end
		end
	end
	if #players == 0 then
		ui.newLine()
		ui.dwriteTextWrapped(""There is no other players connected"", 15, white)
		ui.dwriteTextWrapped(""You can't steal a car"", 15, white)
	else
		if duo.teammate == nil then
			ui.setNextItemWidth(150)
			ui.combo(""Teammate"", duo.playerName, function()
				for i = 1, #players do
					if ui.selectable(ac.getDriverName(players[i].index), duo.teammate == players[i].index) then
						acpEvent { message = ""Request"", messageType = 5, yourIndex = ac.getCar(players[i].index).sessionID }
						duo.playerName = ac.getDriverName(players[i].index)
						duo.waiting = true
					end
				end
			end)
			if duo.waiting then
				ui.dwriteTextWrapped(""duo.waiting for "" .. duo.playerName .. "" response ..."", 15, rgbm.colors.yellow)
			end
		else
			ui.newLine()
			ui.dwriteTextWrapped(""teammate : "", 15, white)
			ui.sameLine()
			ui.dwriteTextWrapped(ac.getDriverName(duo.teammate.index), 15, rgbm.colors.purple)
			ui.sameLine()
			if ui.button(""Cancel"") then
				acpEvent { message = ""Cancel"", messageType = 5, yourIndex = ac.getCar(duo.teammate.index).sessionID }
				duo.teammate = nil
			end
			duo.waiting = false
		end
	end
end

local function sectorSelect()
	ui.setNextItemWidth(150)
	ui.combo(""Sector"", sectorManager.sector.name, function()
		for i = 1, #sectors do
			if ui.selectable(sectors[i].name, sectorManager.sector == sectors[i]) then
				sectorManager.sector = sectors[i]
				sectorManager.sector:reset()
			end
		end
	end)
	ui.sameLine(menuSize[currentTab].x - 64)
	if ui.modernButton('', vec2(48, 32), ui.ButtonFlags.PressedOnRelease, 'EXIT', 24, nil) then
		menuStates.main = false
		settings:save()
	end
end

local function sectorUI()
	ui.sameLine(10)
	ui.beginGroup()
	ui.newLine(15)
	sectorSelect()
	if sectorManager.sector.name == 'DOUBLE TROUBLE' then doubleTrouble() end
	if duo.request then
		ui.newLine()
		ui.dwriteTextWrapped((ac.getDriverName(duo.onlineSender.index) .. "" want to steal a car with you!""), 15, rgbm.colors.purple)
		if ui.button(""Accept"") then
			duo.teammate = duo.onlineSender
			acpEvent{message = ""Accept"", messageType = 5, yourIndex = ac.getCar(duo.teammate.index).sessionID}
			duo.request = false
			sectorManager:setSector('DOUBLE TROUBLE')
		end
		ui.sameLine()
		if ui.button(""Decline"") then
			duo.request = false
		end
	end
	discordLinks()
	ui.newLine()
	ui.endGroup()
	return 1
end

--------------------------------------------------------------------------------------- Race Opponent -----------------------------------------------------------------------------------------------

local horn = {
	lastState = false,
	stateChangedCount = 0,
	time = 0,
	active = false,
	resquestTime = 0,
	opponentName = """",
}

local raceState = {
	inRace = false,
	opponent = nil,
	inFront = nil,
	distance = 0,
	message = false,
	time = 0,
	opponentElo = 1200,
}

local raceFinish = {
	winner = nil,
	finished = false,
	time = 0,
	opponentName = 'None',
	messageSent = false,
}

local function resetHorn()
	horn.active = false
	horn.stateChangedCount = 0
	horn.time = 0
end

local function resetRequest()
	horn.resquestTime = 0
	raceState.opponent = nil
	raceState.opponentElo = 1200
	horn.opponentName = """"
	resetHorn()
end

local timeStartRace = 0

local function showRaceLights()
	local timing = os.clock() % 1
	if timing > 0.5 then
		ui.drawRectFilledMultiColor(vec2(0, 0), vec2(WIDTH_DIV._10, WINDOW_HEIGHT), settings.colorHud, rgbm.colors.transparent,
			rgbm.colors.transparent, settings.colorHud)
		ui.drawRectFilledMultiColor(vec2(WINDOW_WIDTH - WIDTH_DIV._10, 0), vec2(WINDOW_WIDTH, WINDOW_HEIGHT),
			rgbm.colors.transparent, settings.colorHud, settings.colorHud, rgbm.colors.transparent)
	else
		ui.drawRectFilledMultiColor(vec2(0, 0), vec2(WIDTH_DIV._10, WINDOW_HEIGHT), rgbm.colors.transparent, rgbm.colors.transparent,
			rgbm.colors.transparent, rgbm.colors.transparent)
		ui.drawRectFilledMultiColor(vec2(WINDOW_WIDTH - WIDTH_DIV._10, 0), vec2(WINDOW_WIDTH, WINDOW_HEIGHT),
			rgbm.colors.transparent, rgbm.colors.transparent, rgbm.colors.transparent, rgbm.colors.transparent)
	end
end

local function hasWonRace(winner)
	raceFinish.winner = winner
	raceFinish.finished = true
	raceFinish.time = 10
	raceState.inRace = false
	if winner == car then
		player.wins = player.wins + 1
		raceFinish.opponentName = ac.getDriverName(raceState.opponent.index)
		raceFinish.messageSent = false
	else
		player.losses = player.losses + 1
	end
	player.elo = calculateElo(raceState.opponentElo, winner == car)
	player:save()
	raceState.opponent = nil
end

local acpRace = ac.OnlineEvent({
	targetSessionID = ac.StructItem.int16(),
	messageType = ac.StructItem.int16(),
	elo = ac.StructItem.int16(),
}, function(sender, data)
	if data.targetSessionID == car.sessionID and data.messageType == 1 then
		raceState.opponent = sender
		raceState.opponentElo = data.elo
		horn.resquestTime = 7
	elseif data.targetSessionID == car.sessionID and data.messageType == 2 then
		raceState.opponent = sender
		raceState.opponentElo = data.elo
		raceState.inRace = true
		resetHorn()
		horn.resquestTime = 0
		raceState.message = true
		raceState.time = 2
		timeStartRace = 7
	elseif data.targetSessionID == car.sessionID and data.messageType == 3 then
		hasWonRace(car)
	end
end)

local function whosInFront()
	if raceState.opponent == nil then return end
	local direction = cross(vec2(car.velocity.x, car.velocity.z),
		vec2(raceState.opponent.velocity.x, raceState.opponent.velocity.z))
	local midBetweenPlayers = vec2((car.position.x + raceState.opponent.position.x) / 2,
		(car.position.z + raceState.opponent.position.z) / 2)
	local midPlusDirection = vec2(midBetweenPlayers.x + direction.x, midBetweenPlayers.y + direction.y)
	local youDistanceSquared = vec2(car.position.x, car.position.z):distanceSquared(midPlusDirection)
	local opponentDistanceSquared = vec2(raceState.opponent.position.x, raceState.opponent.position.z):distanceSquared(midPlusDirection)
	if youDistanceSquared < opponentDistanceSquared then
		raceState.inFront = car
	else
		raceState.inFront = raceState.opponent
	end
end

local function hasPit()
	if not raceState.opponent or raceState.opponent and not raceState.opponent.isConnected then
		hasWonRace(car)
		return false
	end
	if car.isInPit then
		acpRace { targetSessionID = raceState.opponent.sessionID, messageType = 3 }
		hasWonRace(raceState.opponent)
		return false
	end
	return true
end

local function inRace()
	if raceState.opponent == nil then return end
	raceState.distance = vec2(car.position.x, car.position.z):distance(vec2(raceState.opponent.position.x, raceState.opponent.position.z))
	if raceState.distance < 50 then
		whosInFront()
	elseif raceState.distance > 250 then
		hasWonRace(raceState.inFront)
	end
end

local function hornUsage()
	if horn.time < 2 then
		horn.time = horn.time + ui.deltaTime()
		if horn.lastState ~= car.hornActive then
			horn.stateChangedCount = horn.stateChangedCount + 1
			horn.lastState = car.hornActive
		end
		if horn.stateChangedCount > 3 then
			horn.active = true
			horn.stateChangedCount = 0
			horn.time = 0
		end
	else
		resetHorn()
	end
end

local function dot(vector1, vector2)
	return vector1.x * vector2.x + vector1.y * vector2.y
end

local function resquestRace()
	local opponent = ac.getCar(ac.getCarIndexInFront(0))
	if not opponent then return end
	horn.opponentName = ac.getDriverName(opponent.index)
	if opponent and (not opponent.isHidingLabels) then
		if dot(vec2(car.look.x, car.look.z), vec2(opponent.look.x, opponent.look.z)) > 0 then
			if isPoliceCar(ac.getCarID(opponent.index)) then return end
			acpRace { targetSessionID = opponent.sessionID, messageType = 1, elo = player.elo }
			horn.resquestTime = 10
		end
	end
end

local function acceptingRace()
	if dot(vec2(car.look.x, car.look.z), vec2(raceState.opponent.look.x, raceState.opponent.look.z)) > 0 then
		acpRace { targetSessionID = raceState.opponent.sessionID, messageType = 2, elo = player.elo }
		raceState.inRace = true
		horn.resquestTime = 0
		timeStartRace = 7
		resetHorn()
	end
end

local function raceUpdate(dt)
	if raceState.inRace and hasPit() then
		inRace()
		if raceState.time > 0 then
			raceState.time = raceState.time - dt
		elseif raceState.time < 0 then
			raceState.time = 0
		end
		if raceState.message and raceState.time == 0 then
			if raceState.opponent then
				ac.sendChatMessage(DRIVER_NAME ..
					"" has started an illegal race against "" .. ac.getDriverName(raceState.opponent.index) .. ""!"")
				raceState.message = false
			end
		end
	else
		if raceFinish.finished then
			raceFinish.time = raceFinish.time - dt
			if raceFinish.time < 0 then
				raceFinish.finished = false
				raceFinish.winner = nil
			end
		else
			hornUsage()
			if horn.resquestTime > 0 then
				horn.resquestTime = horn.resquestTime - dt
				if horn.resquestTime < 0 then resetRequest() end
				if horn.active and raceState.opponent then acceptingRace() end
			else
				if horn.active then resquestRace() end
			end
		end
	end
end

-------------------------------------------------------------------------------- overtake --------------------------------------------------------------------------------

local REQUIRED_SPEED = const(80)

function script.prepare(dt)
	return car.speedKmh > 60
end

local overtake = {
	damage = {},
	timePassed = 0,
	totalScore = 0,
	comboMeter = 1,
	dangerouslySlowTimer = 0,
}

local carsState = {}

local function resetOvertake()
	for i = 0, 4 do overtake.damage[i] = car.damage[i] end
	if overtake.totalScore > player.overtake then
		player.overtake = math.floor(overtake.totalScore)
		if player.overtake > 10000 then
			ac.sendChatMessage(""New highest Overtake score: "" .. player.overtake .. "" pts !"")
			player:save()
		end
	end
	overtake.totalScore = 0
	overtake.comboMeter = 1
end

local function initOverTake()
	for i = 0, 4 do overtake.damage[i] = car.damage[i] end
end

local function overtakeUpdate(dt)
	if car.engineLifeLeft < 1 then
		resetOvertake()
		return
	end
	for i = 0, 4 do
		if car.damage[i] > overtake.damage[i] then
			resetOvertake()
			break
		end
	end
	overtake.timePassed = overtake.timePassed + dt

	local comboFadingRate = 0.5 * math.lerp(1, 0.1, math.lerpInvSat(car.speedKmh, 80, 200)) + car.wheelsOutside
	overtake.comboMeter = math.max(1, overtake.comboMeter - dt * comboFadingRate)

	while sim.carsCount > #carsState do
		carsState[#carsState + 1] = {}
	end

	if car.speedKmh < REQUIRED_SPEED then
		if overtake.dangerouslySlowTimer > 3 then
			resetOvertake()
			return
		end
		overtake.dangerouslySlowTimer = overtake.dangerouslySlowTimer + dt
		overtake.comboMeter = 1
		return
	else
		overtake.dangerouslySlowTimer = 0
	end

	for i = 1, ac.getSim().carsCount - 1 do
		local state = carsState[i]
		local otherCar = ac.getCar(i)
		if otherCar.isConnected and otherCar.position:closerToThan(car.position, 10) then
			local drivingAlong = math.dot(otherCar.look, car.look) > 0.2
			if not drivingAlong then
				state.drivingAlong = false

				if not state.nearMiss and otherCar.position:closerToThan(car.position, 3) then
					state.nearMiss = true

					if otherCar.position:closerToThan(car.position, 2.5) then
						overtake.comboMeter = overtake.comboMeter + 3
					else
						overtake.comboMeter = overtake.comboMeter + 1
					end
				end
			end

			if otherCar.collidedWith == 0 then
				state.collided = true
				resetOvertake()
				return
			end

			if not state.overtaken and not state.collided and state.drivingAlong then
				local posDir = (otherCar.position - car.position):normalize()
				local posDot = math.dot(posDir, otherCar.look)
				state.maxPosDot = math.max(state.maxPosDot, posDot)
				if posDot < -0.5 and state.maxPosDot > 0.5 then
					overtake.totalScore = overtake.totalScore + math.ceil(10 * overtake.comboMeter)
					overtake.comboMeter = overtake.comboMeter + 1
					state.overtaken = true
				end
			end
		else
			state.maxPosDot = -1
			state.overtaken = false
			state.collided = false
			state.drivingAlong = true
			state.nearMiss = false
		end
	end
end

local function overtakeUI(textOffset)
	local text
	local colorCombo

	if overtake.totalScore > 0 then
		text = overtake.totalScore .. "" pts - "" .. string.format(""%d"", overtake.comboMeter) .. ""x""
		colorCombo = rgbm(0, 1, 0, 0.9)
	else
		text = ""PB: "" .. player.overtake .. ""pts""
		colorCombo = rgbm(1, 1, 1, 0.9)
	end
	local textSize = ui.measureDWriteText(text, settings.fontSize)
	ui.dwriteDrawText(text, settings.fontSize, textOffset - vec2(textSize.x / 2, -hud.size.y / 13), colorCombo)
end

local function flashingAlert(intensity)
	local timing = os.clock() % 1
	if timing > 0.5 then
		ui.drawRectFilledMultiColor(vec2(0, 0), vec2(WINDOW_WIDTH / intensity, WINDOW_HEIGHT), rgbm(1, 0, 0, 0.5),
			rgbm.colors.transparent, rgbm.colors.transparent, rgbm(1, 0, 0, 0.5))
		ui.drawRectFilledMultiColor(vec2(WINDOW_WIDTH - WINDOW_WIDTH / intensity, 0), vec2(WINDOW_WIDTH, WINDOW_HEIGHT),
			rgbm.colors.transparent, rgbm(1, 0, 0, 0.5), rgbm(1, 0, 0, 0.5), rgbm.colors.transparent)
	else
		ui.drawRectFilledMultiColor(vec2(0, 0), vec2(WINDOW_WIDTH / intensity, WINDOW_HEIGHT), rgbm.colors.transparent,
			rgbm.colors.transparent, rgbm.colors.transparent, rgbm.colors.transparent)
		ui.drawRectFilledMultiColor(vec2(WINDOW_WIDTH - WINDOW_WIDTH / intensity, 0), vec2(WINDOW_WIDTH, WINDOW_HEIGHT),
			rgbm.colors.transparent, rgbm.colors.transparent, rgbm.colors.transparent, rgbm.colors.transparent)
	end
end

local function distanceBar()
	local playerInFront
	if raceState.inFront == car then
		playerInFront = ""You are in front""
	else
		playerInFront = ac.getDriverName(raceState.inFront.index) .. "" is in front""
	end
	local text = math.floor(raceState.distance) .. ""m""
	local textLenght = ui.measureDWriteText(text, 30)
	ui.newLine()
	ui.dummy(vec2(WIDTH_DIV._3, HEIGHT_DIV._40))
	ui.sameLine()
	ui.beginRotation()
	ui.progressBar(raceState.distance / 250, vec2(WIDTH_DIV._3, HEIGHT_DIV._60), playerInFront)
	ui.endRotation(90, vec2(settings.msgOffset.x - WIDTH_DIV._2 - textLenght.x / 2, settings.msgOffset.y))
	ui.dwriteDrawText(text, 30, vec2(settings.msgOffset.x - textLenght.x / 2, settings.msgOffset.y), white)
end

local function raceUI()
	ui.pushDWriteFont(""Orbitron;Weight=Black"")
	local displayText = false
	local text

	if timeStartRace > 0 then
		timeStartRace = timeStartRace - ui.deltaTime()
		if raceState.opponent and timeStartRace - 5 > 0 then
			text = ""Align yourself with "" .. ac.getDriverName(raceState.opponent.index) .. "" to start the race!""
			textWithBackground(text, 1, 1)
		else
			local number = math.floor(timeStartRace - 1)
			if number <= 0 then
				text = ""GO!""
			else
				text = number .. "" ...""
			end
			textWithBackground(text, 3, 1)
		end
		if timeStartRace - 6 > 0 then showRaceLights() end
		if timeStartRace < 0 then timeStartRace = 0 end
	elseif raceState.inRace and raceState.inFront then
		distanceBar()
		if raceState.inFront == raceState.opponent then
			if raceState.distance > 190 then
				flashingAlert(math.floor((190 - raceState.distance) / 10) + 10)
			end
		end
	elseif raceFinish.finished then
		text = ac.getDriverName(raceFinish.winner.index) .. "" has won the race""
		displayText = true
		if not raceFinish.messageSent and raceFinish.winner == car then
			ac.sendChatMessage(DRIVER_NAME ..
				"" has just beaten "" ..
				raceFinish.opponentName ..
				string.format("" in an illegal race. [Win rate: %d"",
					player.wins * 100 / (player.wins + player.losses)) .. ""%]"")
			raceFinish.messageSent = true
			local data = {
				[""Wins""] = player.wins,
				[""Losses""] = player.losses,
			}
		end
	elseif horn.resquestTime > 0 and raceState.opponent then
		text = ac.getDriverName(raceState.opponent.index) ..
			"" wants to challenge you to a race. To accept activate your horn twice quickly""
		displayText = true
	elseif horn.resquestTime > 0 and raceState.opponent == nil then
		text = ""Waiting for "" .. horn.opponentName .. "" to accept the challenge""
		displayText = true
	end
	if displayText then textWithBackground(text, 1, 1) end
	ui.popDWriteFont()
end

--------------------------------------------------------------------------------------- Police Chase --------------------------------------------------------------------------------------------------

local policeLightsPos = {
	vec2(0, 0),
	vec2(WIDTH_DIV._15, WINDOW_HEIGHT),
	vec2(WINDOW_WIDTH - WIDTH_DIV._15, 0),
	vec2(WINDOW_WIDTH, WINDOW_HEIGHT)
}

local acpPolice = ac.OnlineEvent({
	message = ac.StructItem.string(110),
	messageType = ac.StructItem.int16(),
	yourIndex = ac.StructItem.int16(),
}, function(sender, data)
	online.type = data.messageType
	if data.yourIndex == car.sessionID and data.messageType == 0 then
		online.message = data.message
		online.chased = true
		online.officer = sender
		online.messageTimer = settings.timeMsg
		policeLightsPos[2] = vec2(WIDTH_DIV._10, WINDOW_HEIGHT)
		policeLightsPos[3] = vec2(WINDOW_WIDTH - WIDTH_DIV._10, 0)
	elseif data.yourIndex == car.sessionID and data.messageType == 1 then
		online.level = tonumber(data.message)
		online.messageTimer = settings.timeMsg
		online.message = ""CHASE LEVEL "" .. data.message
		if online.level > 8 then
			online.color = rgbm.colors.red
		elseif online.level > 6 then
			online.color = rgbm.colors.orange
		elseif online.level > 4 then
			online.color = rgbm.colors.yellow
		else
			online.color = white
		end
	elseif data.yourIndex == car.sessionID and data.messageType == 2 then
		physics.teleportCarTo(0, ac.SpawnSet.Pits)
		online.message = data.message
		online.messageTimer = settings.timeMsg
		online.chased = false
		online.officer = nil
		online.level = 0
		policeLightsPos[2] = vec2(WIDTH_DIV._6, WINDOW_HEIGHT)
		policeLightsPos[3] = vec2(WINDOW_WIDTH - WIDTH_DIV._6, 0)
	end
end)

local function showPoliceLights()
	local timing = math.floor(os.clock() * 2 % 2)
	if timing == 0 then
		ui.drawRectFilledMultiColor(policeLightsPos[1], policeLightsPos[2], rgbm(1, 0, 0, 0.5), rgbm.colors.transparent,
			rgbm.colors.transparent, rgbm(1, 0, 0, 0.5))
		ui.drawRectFilledMultiColor(policeLightsPos[3], policeLightsPos[4], rgbm.colors.transparent, rgbm(0, 0, 1, 0.5),
			rgbm(0, 0, 1, 0.5), rgbm.colors.transparent)
	else
		ui.drawRectFilledMultiColor(policeLightsPos[1], policeLightsPos[2], rgbm(0, 0, 1, 0.5), rgbm.colors.transparent,
			rgbm.colors.transparent, rgbm(0, 0, 1, 0.5))
		ui.drawRectFilledMultiColor(policeLightsPos[3], policeLightsPos[4], rgbm.colors.transparent, rgbm(1, 0, 0, 0.5),
			rgbm(1, 0, 0, 0.5), rgbm.colors.transparent)
	end
end

local function showArrestMSG()
	ui.pushDWriteFont(""Orbitron;Weight=Black"")
	local textArrest1 = ""BUSTED!""
	local textArrest2 = ""GGs! Please Go Back To Pits.""
	local textArrestLenght1 = ui.measureDWriteText(textArrest1, settings.fontSizeMSG * 3)
	local textArrestLenght2 = ui.measureDWriteText(textArrest2, settings.fontSizeMSG * 3)
	ui.drawRectFilled(vec2(0, 0), vec2(WINDOW_WIDTH, WINDOW_HEIGHT), rgbm(0, 0, 0, 0.5))
	ui.dwriteDrawText(textArrest1, settings.fontSizeMSG * 3,
		vec2(WIDTH_DIV._2 - textArrestLenght1.x / 2, HEIGHT_DIV._4 - textArrestLenght1.y / 2), rgbm(1, 0, 0, 1))
	ui.dwriteDrawText(textArrest2, settings.fontSizeMSG * 3,
		vec2(WIDTH_DIV._2 - textArrestLenght2.x / 2, HEIGHT_DIV._4 + textArrestLenght2.y / 2), white)
	ui.popDWriteFont()
end


local function onlineEventMessageUI()
	if online.messageTimer > 0 then
		online.messageTimer = online.messageTimer - ui.deltaTime()
		local text = online.message
		if online.message ~= ""BUSTED!"" then textWithBackground(text, 1, 1) end
		if online.type == 2 then
			if online.message == ""BUSTED!"" then showArrestMSG() end
			showPoliceLights()
		end
		if online.type == 1 and online.messageTimer < 3 then
			showPoliceLights()
		end
	elseif online.messageTimer < 0 then
		online.message = """"
		online.messageTimer = 0
	end
end

-------------------------------------------------------------------------------------------- HUD -------------------------------------------------------------------------------------------------------

local statOn = {
	[1] = ""Distance Driven"",
	[2] = ""Races"",
	[3] = ""Overtake"",
	[4] = ""Sector"",
}

local iconsColorOn = {
	[1] = white,
	[2] = white,
	[3] = white,
	[4] = white,
}

local countdownTime = 0
local cooldownTime = 0
local countDownState = {
	countdownOn = false,
	ready = true,
	set = true,
	go = true
}

local function countdown()
	if countDownState.countdownOn then
		if countdownTime > 0 then countdownTime = countdownTime - ui.deltaTime() end
		cooldownTime = cooldownTime - ui.deltaTime()
		if cooldownTime < 0 then
			cooldownTime = 0
			countDownState.countdownOn = false
		end
		if countdownTime < 5 and countDownState.ready == true then
			ac.sendChatMessage('***GET READY***')
			countDownState.ready = false
		elseif countdownTime < 3 and countDownState.set == true then
			ac.sendChatMessage('**SET**')
			countDownState.set = false
		elseif countdownTime < 0 and countDownState.go == true then
			ac.sendChatMessage('*GO*GO*GO*')
			countDownState.go = false
		end
	end
end

local function drawHudText()
	ui.pushDWriteFont(""Orbitron;Weight=BOLD"")
	local textOffset = vec2(hud.size.x / 2, hud.size.y / 4.5)
	local textSize = ui.measureDWriteText(statOn[settings.current], settings.fontSize)
	if settings.current ~= 4 then
		ui.dwriteDrawText(statOn[settings.current], settings.fontSize,
			textOffset - vec2(textSize.x / 2, 0), settings.colorHud)
	end
	if settings.current == 1 then
		local drivenKm = car.distanceDrivenSessionKm
		if drivenKm < 0.01 then drivenKm = 0 end
		textSize = ui.measureDWriteText(string.format(""%.2f"", drivenKm) .. "" km"", settings.fontSize)
		ui.dwriteDrawText(string.format(""%.2f"", drivenKm) .. "" km"", settings.fontSize,
			textOffset - vec2(textSize.x / 2, -hud.size.y / 13), rgbm(1, 1, 1, 0.9))
	elseif settings.current == 2 then
		textSize = ui.measureDWriteText(player.wins .. ""Win  -  Lost"" .. player.losses, settings.fontSize / 1.1)
		ui.dwriteDrawText(""Win "" .. player.wins .. "" - Lost "" .. player.losses, settings.fontSize / 1.1,
			textOffset - vec2(textSize.x / 2, -hud.size.y / 12.5), rgbm(1, 1, 1, 0.9))
	elseif settings.current == 3 then
		overtakeUI(textOffset)
	elseif settings.current == 4 then
		textSize = ui.measureDWriteText(sectorManager.sector.name, settings.fontSize)
		ui.dwriteDrawText(sectorManager.sector.name, settings.fontSize, textOffset - vec2(textSize.x / 2, 0), settings.colorHud)
		textSize = ui.measureDWriteText('Time - 00:00.000', settings.fontSize)
		ui.dwriteDrawText(sectorManager.sector.time, settings.fontSize, textOffset - vec2(textSize.x / 2, -hud.size.y / 12.5), sectorManager.sector.timeColor)
	end
	ui.popDWriteFont()
end

local function getClosestMission()
	local closestMission = nil
	local closestDistance = 500
	for i = 1, #sectors do
		for j = 1, #MISSION_NAMES do
			if sectors[i].name == MISSION_NAMES[j] then
				if car.position:distance(sectors[i].gates[1].pos) < closestDistance then
					closestMission = sectors[i]
					closestDistance = car.position:distance(sectors[i].gates[1].pos)
				end
				break
			end
		end
	end
	return closestMission
end

local function drawHudImages()
	iconsColorOn[1] = white
	iconsColorOn[2] = white
	iconsColorOn[3] = white
	iconsColorOn[4] = white
	local toolTipOn = false
	ui.drawImage(HUD_IMG.center, vec2(0, 0), hud.size)
	if ui.rectHovered(vec2(0, 0), vec2(hud.size.x, hud.size.y / 2)) then toolTipOn = true end
	if ui.rectHovered(hud.pos.leftPos2, hud.pos.leftPos1) then
		ui.image(HUD_IMG.left, hud.size, settings.colorHud)
		if uiState.isMouseLeftKeyClicked then
			if settings.current == 1 then settings.current = #statOn else settings.current = settings.current - 1 end
		end
	elseif ui.rectHovered(hud.pos.rightPos2, hud.pos.rightPos1) then
		ui.image(HUD_IMG.right, hud.size, settings.colorHud)
		if uiState.isMouseLeftKeyClicked then
			if settings.current == #statOn then settings.current = 1 else settings.current = settings.current + 1 end
		end
	elseif ui.rectHovered(hud.pos.theftPos2, hud.pos.theftPos1) then
		iconsColorOn[1] = settings.colorHud
		if uiState.isMouseLeftKeyClicked then
			if missionManager.msgTime == 0 then
				local closestMission = getClosestMission()
				if not closestMission then
					menuStates.welcome = true
					menuStates.main = false
					menuStates.leaderboard = false
					return
				end
				ac.sendChatMessage(MISSION_TEXT[closestMission.name].chat)
				missionManager.msgTime = 10
				missionManager.showIntro = true
				if sectorManager.sector.name ~= ""DOUBLE TROUBLE"" then
					sectorManager:setSector(closestMission.name)
				elseif closestMission.name == ""BOBs SCRAPYARD"" then
					sectorManager:setSector(""DOUBLE TROUBLE"")
				end
				settings.current = 4
			end
		end
	elseif ui.rectHovered(hud.pos.ranksPos2, hud.pos.ranksPos1) then
		iconsColorOn[2] = settings.colorHud
		if uiState.isMouseLeftKeyClicked then
			if menuStates.leaderboard then
				menuStates.leaderboard = false
			else
				if menuStates.main then
					menuStates.main = false
				end
				menuStates.leaderboard = true
			end
		end
	elseif ui.rectHovered(hud.pos.countdownPos2, hud.pos.countdownPos1) then
		iconsColorOn[3] = settings.colorHud
		if not countDownState.countdownOn and uiState.isMouseLeftKeyClicked then
			if cooldownTime == 0 then
				countdownTime = 5
				cooldownTime = 30
				countDownState.countdownOn = true
				countDownState.ready = true
				countDownState.set = true
				countDownState.go = true
			end
			settings.current = 2
		end
	elseif ui.rectHovered(hud.pos.menuPos2, hud.pos.menuPos1) then
		iconsColorOn[4] = settings.colorHud
		if uiState.isMouseLeftKeyClicked then
			if menuStates.main then
				menuStates.main = false
			else
				if menuStates.leaderboard then menuStates.leaderboard = false end
				menuStates.main = true
			end
		end
	end
	ui.image(HUD_IMG.base, hud.size, settings.colorHud)
	ui.drawImage(HUD_IMG.theft, vec2(0, 0), hud.size, iconsColorOn[1])
	ui.drawImage(HUD_IMG.ranks, vec2(0, 0), hud.size, iconsColorOn[2])
	ui.drawImage(HUD_IMG.countdown, vec2(0, 0), hud.size, iconsColorOn[3])
	ui.drawImage(HUD_IMG.menu, vec2(0, 0), hud.size, iconsColorOn[4])
	if countDownState.countdownOn then countdown() end
	if toolTipOn then
		ui.tooltip(function()
			ui.text(""Click "" .. openMenuKeyBind:boundTo() .. "" to Bring up\nThe Welcome Menu"")
		end)
	end
end

local lvlMSG = const(""You're late! Don't even think about getting the full payout.\nLook at the new time limit and finish it, or don't bother showing up again!"")

local function missionMsgOnScreen()
	if sectorManager.sector == nil or sectorManager.sector.name == ""H1"" then return end
	if sectorManager.started and missionManager.level == 0 then
		textWithBackground(MISSION_TEXT[sectorManager.sector.name].failed[missionManager.msgFailedIndex], 1, 1)
		missionManager.msgTime = 0
	elseif missionManager.msgTime > 0 then
		if missionManager.showIntro then
			textWithBackground(MISSION_TEXT[sectorManager.sector.name].intro[1] .. formatTime(sectorManager.sector.timeLimit + sectorManager.sector.addTimeLimit[3], '') .. MISSION_TEXT[sectorManager.sector.name].intro[2], 1, 1)
		else
			if not sectorManager.finished then
				textWithBackground(lvlMSG,1,2)
			end
		end
		missionManager.msgTime = missionManager.msgTime - ui.deltaTime()
		if missionManager.msgTime < 0 then
			missionManager.msgTime = 0
			missionManager.showIntro = false
		end
	end
end

local function hudUI()
	missionMsgOnScreen()
	ui.transparentWindow(""HUD"", settings.hudOffset, hud.size, true, function()
		drawHudImages()
		drawHudText()
	end)
end

-------------------------------------------------------------------------------------------- Menu --------------------------------------------------------------------------------------------

local function menu()
	ui.tabBar('MainTabBar', ui.TabBarFlags.Reorderable, function()
		ui.tabItem('Sectors', function() currentTab = sectorUI() end)
		ui.tabItem('settings', function() currentTab = settingsWindow() end)
	end)
end

local windowAction = 0
local leftClickDown = false
local function moveMenu()
	if ui.windowHovered(ui.HoveredFlags.ChildWindows) then
		local mousePos = ui.mouseLocalPos()
		if not leftClickDown and ui.mouseDown() then
			leftClickDown = true
			windowAction = 3
			if mousePos.y > menuSize[currentTab].y - 50 then
				if mousePos.x < 50 then
					windowAction = 1
				elseif mousePos.x > menuSize[currentTab].x - 50 then
					windowAction = 2
				end
			end
		end
		if mousePos.y > menuSize[currentTab].y - 50 then
			if mousePos.x < 50 then
				ui.setMouseCursor(ui.MouseCursor.ResizeNESW)
			elseif mousePos.x > menuSize[currentTab].x - 50 then
				ui.setMouseCursor(ui.MouseCursor.ResizeNWSE)
			end
		end
	end
	if ui.mouseReleased() then
		leftClickDown = false
		windowAction = 0
	end

	if leftClickDown then
		if windowAction == 1 then
			menuSize[currentTab].x = menuSize[currentTab].x - ui.mouseDelta().x
			menuSize[currentTab].y = menuSize[currentTab].y + ui.mouseDelta().y
			settings.menuPos.x = settings.menuPos.x + ui.mouseDelta().x
		elseif windowAction == 2 then
			menuSize[currentTab] = menuSize[currentTab] + ui.mouseDelta()
			if currentTab == 3 then
				playerStatsSubWindow.x = menuSize[currentTab].x / 2
				playerStatsSubWindow.y = menuSize[currentTab].y - HEIGHT_DIV._20 - 10
			end
		elseif windowAction == 3 then
			settings.menuPos = settings.menuPos + ui.mouseDelta()
		end
	end
end


local function leaderboardWindow()
	ui.toolWindow('LeaderboardWindow', settings.menuPos, menuSize[currentTab], false, true, function()
		currentTab = showLeaderboard()
		moveMenu()
	end)
end

--------------------------------------------------------------------------------- Welcome Menu ---------------------------------------------------------------------------------

local cardOutline = {
	white,
	white,
	white,
	white,
	white,
	white,
	white,
}

local welcomeWindow = {
	size = vec2(16 * WINDOW_HEIGHT / 9, WINDOW_HEIGHT),
	topLeft = vec2(0, 0),
	topRight = vec2(WINDOW_WIDTH, 0),
	offset = vec2(0, 0),
	scale = 0.9,
	fontBold = ui.DWriteFont(""Orbitron;Weight=BLACK""),
	font = ui.DWriteFont(""Orbitron;Weight=REGULAR""),
	closeIMG = ""https://acstuff.ru/images/icons_24/cancel.png"",
	fontSize = WINDOW_HEIGHT / 35,
	missionInfoFontSize = (WINDOW_HEIGHT / 35) * 0.6,
}


local function scaleWelcomeMenu()
	local aspectRatio = WINDOW_WIDTH / WINDOW_HEIGHT < 16 / 9
	local xScale = WINDOW_WIDTH / 2560
	local yScale = WINDOW_HEIGHT / 1440
	local minScale = aspectRatio and math.max(xScale, yScale) or math.min(xScale, yScale)

	welcomeWindow.size = welcomeWindow.size * welcomeWindow.scale
	welcomeWindow.offset = vec2((WINDOW_WIDTH - welcomeWindow.size.x) / 2, (WINDOW_HEIGHT - welcomeWindow.size.y) / 2)
	minScale = minScale * welcomeWindow.scale
	for i = 1, #WELCOME_CARD_IMG_POS do
		WELCOME_CARD_IMG_POS[i][1] = WELCOME_CARD_IMG_POS[i][1] * minScale
		WELCOME_CARD_IMG_POS[i][2] = WELCOME_CARD_IMG_POS[i][2] * minScale
	end
	welcomeWindow.topLeft = WELCOME_CARD_IMG_POS[6][1] + welcomeWindow.offset + welcomeWindow.size / 100
	welcomeWindow.topRight = vec2(WELCOME_CARD_IMG_POS[6][2].x - welcomeWindow.size.x / 100,
		WELCOME_CARD_IMG_POS[6][1].y + welcomeWindow.size.y / 100) + welcomeWindow.offset
end

local timeLevelsOffset = vec2(0,0)

local function showMissionInfo(i, id)
	local leftCorner = vec2(WELCOME_CARD_IMG_POS[i + 2][1].x, WELCOME_CARD_IMG_POS[i + 2][1].y) +
		vec2(welcomeWindow.size.x / 100, welcomeWindow.size.y / 10)
	local textPos = leftCorner + welcomeWindow.size / 100
	local margin = welcomeWindow.size.x / 100
	ui.drawRectFilled(leftCorner, vec2(WELCOME_CARD_IMG_POS[i + 2][2].x - margin, WELCOME_CARD_IMG_POS[i + 2][2].y - margin), rgbm(0, 0, 0, 0.8))
	ui.popDWriteFont()
	ui.pushDWriteFont(""Orbitron;Weight=BLACK"")
	local textOffsetY = ui.measureDWriteText(""TEXT"", welcomeWindow.missionInfoFontSize).y * 2
	local textOffsetX = ui.measureDWriteText(""LEVEL 3:---"", welcomeWindow.missionInfoFontSize).x
	ui.dwriteDrawText(MISSIONS[id].start[1], welcomeWindow.missionInfoFontSize, textPos, settings.colorHud)
	textPos.x = textPos.x + textOffsetX
	ui.dwriteDrawText(MISSIONS[id].start[2], welcomeWindow.missionInfoFontSize, textPos, white)
	textPos.y = textPos.y + textOffsetY
	textPos.x = textPos.x - textOffsetX
	ui.dwriteDrawText(MISSIONS[id].finish[1], welcomeWindow.missionInfoFontSize, textPos, settings.colorHud)
	textPos.x = textPos.x + textOffsetX
	ui.dwriteDrawText(MISSIONS[id].finish[2], welcomeWindow.missionInfoFontSize, textPos, white)
	textPos.y = textPos.y + textOffsetY
	textPos.x = textPos.x - textOffsetX
	ui.dwriteDrawText(""Time Limits :"", welcomeWindow.fontSize * 0.8, textPos, settings.colorHud)
	textPos.y = textPos.y + textOffsetY
	for j = 1, #MISSIONS[id].levels do
		ui.dwriteDrawText(""LEVEL "" .. j .. "" :"" , welcomeWindow.missionInfoFontSize, textPos, settings.colorHud)
		timeLevelsOffset.y = textPos.y
		timeLevelsOffset.x = textOffsetX + textPos.x
		ui.dwriteDrawText(MISSIONS[id].levels[j], welcomeWindow.missionInfoFontSize, timeLevelsOffset, white)
		textPos.y = textPos.y + textOffsetY
	end
	ui.popDWriteFont()
end

local function drawWelcomeText()
	ui.popDWriteFont()
	ui.pushDWriteFont(welcomeWindow.font)
	ui.dwriteDrawText(""WELCOME BACK,"", welcomeWindow.missionInfoFontSize, welcomeWindow.topLeft, white)
	ui.popDWriteFont()
	ui.pushDWriteFont(welcomeWindow.fontBold)
	ui.dwriteDrawText(DRIVER_NAME, welcomeWindow.fontSize,
		vec2(welcomeWindow.topLeft.x,
			welcomeWindow.topLeft.y + ui.measureDWriteText(""WELCOME BACK,"", welcomeWindow.missionInfoFontSize).y),
		settings.colorHud)
	ui.popDWriteFont()
	ui.pushDWriteFont(welcomeWindow.font)
	ui.dwriteDrawText(""CURRENT CAR"", welcomeWindow.missionInfoFontSize,
		vec2(welcomeWindow.topRight.x - ui.measureDWriteText(""CURRENT CAR"", welcomeWindow.missionInfoFontSize).x,
			welcomeWindow.topRight.y), white)
	ui.popDWriteFont()
	ui.pushDWriteFont(welcomeWindow.fontBold)
	ui.dwriteDrawText(string.gsub(string.gsub(CAR_NAME_NO_UTF8, ""%W"", "" ""), ""  "", """"), welcomeWindow.fontSize,
		vec2(
			welcomeWindow.topRight.x -
			ui.measureDWriteText(string.gsub(string.gsub(CAR_NAME_NO_UTF8, ""%W"", "" ""), ""  "", """"), welcomeWindow.fontSize).x,
			welcomeWindow.topRight.y + ui.measureDWriteText(""CURRENT CAR"", welcomeWindow.missionInfoFontSize).y),
		settings.colorHud)
	ui.popDWriteFont()
end

---@param tpPos vec3
local function willCollide(tpPos)
	for i, c in ac.iterateCars.ordered() do
		if c.position:distanceSquared(tpPos) < 4 then
			return true
		end
	end
	return false
end

local function tpToMission(i)
	if i < 4 and car.speedKmh < 30 then
		for j = 1, #MISSIONS[i].tp do
			if not willCollide(MISSIONS[i].tp[j].pos) then
				physics.setCarPosition(0, MISSIONS[i].tp[j].pos, MISSIONS[i].tp[j].dir)
				settings.current = 4
				menuStates.welcome = false
				missionManager.tp = true
				missionManager.msgTime = 10
				missionManager.showIntro = true
				if sectorManager.sector.name ~= ""DOUBLE TROUBLE"" then
					sectorManager:setSector(MISSIONS[i].name)
				elseif MISSIONS[i].name == ""BOBs SCRAPYARD"" then
					sectorManager:setSector(""DOUBLE TROUBLE"")
				end
				break
			end
		end
	end
end

local function drawWelcomeImg()
	local iconCloseColor = white
	local toolTipOn = false
	for i = 1, #cardOutline - 1 do
		if i == #cardOutline - 1 then
			cardOutline[i] = settings.colorHud
		else
			cardOutline[i] = white
		end
	end
	welcomeNavImgToDraw[1] = WELCOME_NAV_IMG.leftArrowOff
	welcomeNavImgToDraw[2] = WELCOME_NAV_IMG.rightArrowOff
	welcomeNavImgToDraw[3] = WELCOME_NAV_IMG.leftBoxOff
	welcomeNavImgToDraw[4] = WELCOME_NAV_IMG.centerBoxOff
	welcomeNavImgToDraw[5] = WELCOME_NAV_IMG.rightBoxOff
	welcomeNavImgToDraw[6] = WELCOME_NAV_IMG.base
	welcomeNavImgToDraw[7] = WELCOME_NAV_IMG.logo
	ui.transparentWindow('WELCOME_NAV_IMG', welcomeWindow.offset, welcomeWindow.size, true, function()
		ui.childWindow('welcomeNavIMGChild', welcomeWindow.size, true, function()
			ui.drawRectFilled(WELCOME_CARD_IMG_POS[6][1], WELCOME_CARD_IMG_POS[6][2], rgbm(0, 0, 0, 0.6))
			ui.drawRectFilled(WELCOME_CARD_IMG_POS[7][1], WELCOME_CARD_IMG_POS[7][2], rgbm(0, 0, 0, 0.6))
			if ui.rectHovered(WELCOME_CARD_IMG_POS[1][1], WELCOME_CARD_IMG_POS[1][2]) then
				cardOutline[1] = settings.colorHud
				welcomeNavImgToDraw[1] = WELCOME_NAV_IMG.leftArrowOn
				if uiState.isMouseLeftKeyClicked then
					for i = 1, #welcomeCardsToDisplayed do
						if welcomeCardsToDisplayed[i] == 1 then
							welcomeCardsToDisplayed[i] = #WELCOME_CARD_IMG
						else
							welcomeCardsToDisplayed[i] = welcomeCardsToDisplayed[i] - 1
						end
					end
				end
			elseif ui.rectHovered(WELCOME_CARD_IMG_POS[2][1], WELCOME_CARD_IMG_POS[2][2]) then
				cardOutline[2] = settings.colorHud
				welcomeNavImgToDraw[2] = WELCOME_NAV_IMG.rightArrowOn
				if uiState.isMouseLeftKeyClicked then
					for i = 1, #welcomeCardsToDisplayed do
						if welcomeCardsToDisplayed[i] == #WELCOME_CARD_IMG then
							welcomeCardsToDisplayed[i] = 1
						else
							welcomeCardsToDisplayed[i] = welcomeCardsToDisplayed[i] + 1
						end
					end
				end
			elseif ui.rectHovered(WELCOME_CARD_IMG_POS[3][1], WELCOME_CARD_IMG_POS[3][2]) then
				toolTipOn = true
				cardOutline[3] = settings.colorHud
				welcomeNavImgToDraw[3] = WELCOME_NAV_IMG.leftBoxOn
				if uiState.isMouseLeftKeyClicked then
					if uiState.ctrlDown then
						os.openURL(SECTORS_DATA[welcomeCardsToDisplayed[1] + 1].video)
					else
						tpToMission(welcomeCardsToDisplayed[1])
					end
				end
			elseif ui.rectHovered(WELCOME_CARD_IMG_POS[4][1], WELCOME_CARD_IMG_POS[4][2]) then
				toolTipOn = true
				cardOutline[4] = settings.colorHud
				welcomeNavImgToDraw[4] = WELCOME_NAV_IMG.centerBoxOn
				if uiState.isMouseLeftKeyClicked then
					if uiState.ctrlDown then
						os.openURL(SECTORS_DATA[welcomeCardsToDisplayed[2] + 1].video)
					else
						tpToMission(welcomeCardsToDisplayed[2])
					end
				end
			elseif ui.rectHovered(WELCOME_CARD_IMG_POS[5][1], WELCOME_CARD_IMG_POS[5][2]) then
				toolTipOn = true
				cardOutline[5] = settings.colorHud
				welcomeNavImgToDraw[5] = WELCOME_NAV_IMG.rightBoxOn
				if uiState.isMouseLeftKeyClicked then
					if uiState.ctrlDown then
						os.openURL(SECTORS_DATA[welcomeCardsToDisplayed[3] + 1].video)
					else
						tpToMission(welcomeCardsToDisplayed[3])
					end
				end
			elseif ui.rectHovered(WELCOME_CARD_IMG_POS[7][1], WELCOME_CARD_IMG_POS[7][2]) then
				iconCloseColor = settings.colorHud
				if uiState.isMouseLeftKeyClicked then menuStates.welcome = false end
			end
			ui.drawImage(welcomeWindow.closeIMG, WELCOME_CARD_IMG_POS[8][1], WELCOME_CARD_IMG_POS[8][2], iconCloseColor)
			for i = 1, #welcomeNavImgToDraw do
				ui.drawImage(welcomeNavImgToDraw[i], vec2(0, 0), welcomeWindow.size, cardOutline[i])
			end
			for i = 1, 3 do
				if welcomeCardsToDisplayed[i] < 4 then
					ui.drawImage(WELCOME_CARD_IMG[welcomeCardsToDisplayed[i]], WELCOME_CARD_IMG_POS[i + 2][1], WELCOME_CARD_IMG_POS[i + 2][2], white)
					showMissionInfo(i, welcomeCardsToDisplayed[i])
				else
					ui.drawImage(WELCOME_CARD_IMG[welcomeCardsToDisplayed[i]], WELCOME_CARD_IMG_POS[i + 2][1], WELCOME_CARD_IMG_POS[i + 2][2], white)
				end
			end
		end)
	end)
	if toolTipOn then
		for i = 1, 3 do
			if welcomeCardsToDisplayed[i] < 4 then
				ui.tooltip(function()
					ui.text(""Left Click to teleport to the mission\nCTRL + Left Click to watch the DEMO"")
				end)
			end
		end
	end
end

local function drawWelcomeMenu()
	drawWelcomeImg()
	drawWelcomeText()
end

-------------------------------------------------------------------------------- UPDATE --------------------------------------------------------------------------------

local function missionFinishedWindow()
	ui.transparentWindow('MissionFinished', vec2(0, 0), vec2(WINDOW_WIDTH, HEIGHT_DIV._12), false, true, function()
		ui.pushDWriteFont(""Orbitron;Weight=Black"")
		local timeMsg = ""FAILED""
		if missionManager.level ~= 0 then timeMsg = ""LEVEL "" .. missionManager.level end
		local text = sectorManager.sector.name .. "" - "" .. timeMsg .. os.date("" - %x"")
		local textLenght = ui.measureDWriteText(text, settings.fontSizeMSG * 2)
		ui.drawRectFilled(vec2(0, 0), vec2(WINDOW_WIDTH, HEIGHT_DIV._12), rgbm(0, 0, 0, 0.5))
		ui.dwriteDrawText(text, settings.fontSizeMSG * 2, vec2(WIDTH_DIV._2 - textLenght.x / 2, HEIGHT_DIV._60), settings.colorHud)
		ui.popDWriteFont()
	end)
end

-- https://i.postimg.cc/DyKfkgBG/Boost-Meter.png V1
-- https://i.postimg.cc/pTrNt9n3/Boost-Meter.png V2
local BOOST_FRAME = const(""https://i.postimg.cc/zvm1SzVM/Boost-Meter.png"")
local horizontalBarParams = {
	text = '',
	pos = vec2(WIDTH_DIV._50, WINDOW_HEIGHT - HEIGHT_DIV._20),
	size = vec2(20 * 25, 20 * 5),
	delta = 0,
	activeColor = rgbm(0, 1, 0, 0.5),
	inactiveColor = rgbm(0, 0, 0, 0.3),
	total = 100,
	active = car.kersCharge * 100
}

local boostFrameParams = {
	image = BOOST_FRAME,
	pos = vec2(WIDTH_DIV._50, WINDOW_HEIGHT - HEIGHT_DIV._20),
	size = vec2(20 * 25, 20 * 5),
	color = white,
	uvStart = vec2(0, 0),
	uvEnd = vec2(1, 1)
}

local boostTextParams = {
	text = 'Boost',
	pos = vec2(WIDTH_DIV._50, WINDOW_HEIGHT - HEIGHT_DIV._20),
	letter = vec2(50, 50),
	font = 'c7_big',
	color = white,
	alignment = 0.5,
	width = 20 * 5,
	spacing = 1
}

local function boostBar()
	horizontalBarParams.active = car.kersCharge * 100
	horizontalBarParams.activeColor = rgbm(1 - car.kersCharge, car.kersCharge^2, 0, 0.7)
	-- display.rect()
	display.horizontalBar(horizontalBarParams)
	display.image(boostFrameParams)
	display.text(boostTextParams)
end

function script.drawUI()
	if not shouldRun() then return end
	-- boostBar()
	if sectorManager.sector and sectorManager.finished and sectorManager.sector.name ~= ""H1"" then
		missionFinishedWindow()
	end
	if menuStates.welcome then
		drawWelcomeMenu()
	else
		if online.chased then showStarsPursuit() end
		hudUI()
		onlineEventMessageUI()
		raceUI()
		if menuStates.main then
			ui.toolWindow('Menu', settings.menuPos, menuSize[currentTab], true, true, function()
				menu()
				moveMenu()
			end)
		end
		if menuStates.leaderboard then leaderboardWindow() end
	end
end

local policeCarIndex = { 0, 0, 0, 0, 0, 0 }

local function initPoliceCarIndex()
	local j = 1
	for i = ac.getSim().carsCount - 1, 0, -1 do
		local playerCarID = ac.getCarID(i)
		if playerCarID and isPoliceCar(playerCarID) then
			policeCarIndex[j] = i
			j = j + 1
		end
	end
end

local function hidePolice()
	local hideRange = 100
	for i = 1, 6 do
		local p = ac.getCar(policeCarIndex[i])
		if p and p.isConnected then
			if p.position.x > car.position.x - hideRange and p.position.z > car.position.z - hideRange and p.position.x < car.position.x + hideRange and p.position.z < car.position.z + hideRange then
				ac.hideCarLabels(i, false)
			else
				ac.hideCarLabels(i, true)
			end
		end
	end
end

---@return boolean
local function updateThefts()
	if sectorManager.sector:isUnderTimeLimit() == 0 then
		return false
	end
	if sectorManager.sector.name == ""BOBs SCRAPYARD"" or sectorManager.sector.name == ""DOUBLE TROUBLE"" then
		player.thefts = player.thefts + 1
	elseif sectorManager.sector.name == ""BANK HEIST"" then
		player.heists = player.heists + 1
	elseif sectorManager.sector.name == ""DRUG DELIVERY"" then
		player.deliveries = player.deliveries + 1
	end
	return true
end

local function sectorUpdate()
	if not sectorManager.started and not sectorManager.sector:hasStarted() then
		sectorManager.started = true
		sectorManager.finished = false
	end
	if not sectorManager.finished and sectorManager.sector:isFinished() then
		if sectorManager.sector.name ~= 'DOUBLE TROUBLE' or sectorManager:hasTeammateFinished() then
			local validTheft = updateThefts()
			sectorManager.finished = true
			sectorManager.started = false
			local shouldSave = player:addSectorRecord(sectorManager.sector.name, sectorManager.sector.finalTime)
			if validTheft or shouldSave then player:save() end
		else
			if duo.teammate and not duo.sentFinish then
				acpEvent{message = ""Finished"", messageType = 5, yourIndex = ac.getCar(duo.teammate.index).sessionID}
				duo.sentFinish = true
			end
		end
	end
	if sectorManager.started and not sectorManager.finished then
		sectorManager.sector:update()
	end
end

local function initBoost()
	horizontalBarParams.size = vec2(settings.essentialSize * 10, settings.essentialSize)
	boostFrameParams.size = vec2(settings.essentialSize * 10, settings.essentialSize)
	boostTextParams.pos = vec2(WIDTH_DIV._50 + settings.essentialSize, WINDOW_HEIGHT - HEIGHT_DIV._20 + settings.essentialSize / 10)
	boostTextParams.letter = vec2(settings.essentialSize / 1.2, settings.essentialSize / 1.2)
	boostTextParams.width = boostFrameParams.size
end

local function initUI()
	updateHudPos()
	scaleWelcomeMenu()
	updateStarsPos()
	initBoost()
	dataLoaded['Settings'] = true
end

local function loadSettings()
	Settings.allocate(function(allocatedSetting)
		settings = allocatedSetting
		initUI()
	end)
end

local function loadAllSectors()
	for i = 1, #SECTORS_DATA do
		local sector = Sector.tryParse(SECTORS_DATA[i])
		if sector then
			sector.name = sector.name
			sectors[i] = sector
		end
	end
	sectorManager:setSector('H1')
	dataLoaded['Sectors'] = true
end

local function loadPlayerData()
	Player.allocate(function(allocatedPlayer)
		if allocatedPlayer then
			player = allocatedPlayer
			dataLoaded['PlayerData'] = true
			player:sortSectors()
			currentLeaderboard = player
			updateSharedPlayerData()
		end
	end)
end

local delay = 1

local lastTimeUpdate = os.clock()
local function updateDistanceDriven()
	if os.clock() - lastTimeUpdate > 10 then
		player.kms = truncate(car.distanceDrivenSessionKm - lastRegister.kms + player.kms, 3)
		player.time = math.round(os.clock() - lastRegister.time + player.time, 0)
		lastRegister.kms = car.distanceDrivenSessionKm
		lastRegister.time = os.clock()
		lastTimeUpdate = os.clock()
	end
end

function script.update(dt)
	if initialisation then
		initialisation = false
		loadSettings()
		loadAllSectors()
		loadPlayerData()
		initPoliceCarIndex()
		initOverTake()
	end
	if not shouldRun() then return end
	if delay > 0 then delay = delay - dt end
	if delay < 0 then
		delay = 0
		player:sortSectors()
		updateSharedPlayerData()
		ac.broadcastSharedEvent(SHARED_EVENT_KEY, 'update')
	end
	sectorUpdate()
	raceUpdate(dt)
	overtakeUpdate(dt)
	hidePolice()
	updateDistanceDriven()
end

--------------------------------------------------------------- 3D Update ---------------------------------------------------------------

local function drawGate()
	if sectorManager.sector and not sectorManager.sector:isFinished() then
		local gateIndex = sectorManager.sector.gateIndex
		if gateIndex > sectorManager.sector.gateCount then gateIndex = sectorManager.sector.gateCount end
		render.debugLine(sectorManager.sector.gates[gateIndex].point1,
			sectorManager.sector.gates[gateIndex].point2, gateColor)
	end
end

function script.draw3D()
	if not shouldRun() then return end
	render.setDepthMode(render.BlendMode.AlphaBlend)
	drawGate()
end

-- ui.registerOnlineExtra(ui.Icons.Menu, ""Menu"", nil, menu, nil, ui.OnlineExtraFlags.Tool, 'ui.WindowFlags.AlwaysAutoResize')

--------------------------------------------------------------- AC Callbacks --------------------------------------------------------------

openMenuKeyBind:onPressed(function ()
	menuStates.welcome = not menuStates.welcome
end)

ac.onCarJumped(0, function(carIndex)
	if carIndex ~= 0 then return end
	resetMissionManager()
	sectorManager:reset()
	if not isPoliceCar(CAR_ID) then
		if online.chased and online.officer then
			acpPolice { message = ""TP"", messageType = 0, yourIndex = online.officer.sessionID }
		end
	end
end)

ac.onClientConnected(function(carIndex)
	local newCar = ac.getCarID(carIndex)
	ac.log('New Car', newCar)
	if newCar and isPoliceCar(newCar) then
		ac.hideCarLabels(carIndex)
	end
	initPoliceCarIndex()
end)

ac.onClientDisconnected(function(carIndex)
	ac.hideCarLabels(carIndex, false)
end)

ac.onChatMessage(function(message, senderCarIndex, senderSessionID)
	if not shouldRun() then return false end
	if online.chased and online.officer then
		if (senderSessionID == online.officer.sessionID and string.find(message, 'lost')) then
			if not player.getaways then player.getaways = 0 end
			player.getaways = player.getaways + 1
			online.chased = false
			online.officer = nil
			player:save()
		end
	end
	return false
end)"
g5L5SUBG,"AutoHotkey Profile Manager (Replaces apps like Corsair iCUE, Razer Synapse, Logitech G HUB, etc)",DuskDegree9667,Autohotkey,Wednesday 25th of June 2025 07:00:56 AM CDT,"; Profile Manager
; Monitors active applications and switches AutoHotkey profiles accordingly

#NoEnv
#SingleInstance Force
#Persistent

; Configuration
ScriptsPath := ""C:\Users\user\AutoHotkey\""
CheckInterval := 500  ; Check every 0.5 second(s)

; Global variables
CurrentProfile := """"
CurrentScriptPID := 0
LastActiveProcess := """"

; Application to script mapping
AppProfiles := {}

; Application Group 1
AppProfiles[""iTunes.exe""] := ""AHK_iTunes.ahk"" ; Example ⸺ AHK_iTunes.ahk is in another pasted script, and includes dual-layer functionality and infinite mouse wheel scrolling

; Application Group 2
AppProfiles[""App1.exe""] := ""Profile1.ahk""
AppProfiles[""App2.exe""] := ""Profile2.ahk""

; Application Group 3
AppProfiles[""App7.exe""] := ""Profile7.ahk""
AppProfiles[""App8.exe""] := ""Profile8.ahk""

; Start monitoring
SetTimer, CheckActiveWindow, %CheckInterval%

CheckActiveWindow:
    WinGet, ActiveProcess, ProcessName, A
    
    ; Only check if the process actually changed (performance optimization)
    if (ActiveProcess != LastActiveProcess) {
        LastActiveProcess := ActiveProcess
        
        ; Determine which profile to use
        TargetScript := AppProfiles[ActiveProcess]
        if (!TargetScript) {
            TargetScript := ""DesktopProfile.ahk""  ; Default fallback
        }
        
        ; Switch profile if different from current
        if (TargetScript != CurrentProfile) {
            SwitchToProfile(TargetScript)
        }
    }
return

SwitchToProfile(ScriptName) {
    global ScriptsPath, CurrentScriptPID, CurrentProfile
    ; Don't kill the Profile Manager itself
    ProfileManagerPID := DllCall(""GetCurrentProcessId"")
    if (CurrentScriptPID > 0 && CurrentScriptPID != ProfileManagerPID) {
        Process, Close, %CurrentScriptPID%
        CurrentScriptPID := 0
    }

    ; Don't relaunch the same profile
    if (ScriptName = CurrentProfile)
        return

    ; Launch new profile script
    FullPath := ScriptsPath . ScriptName
    if (FileExist(FullPath)) {
        Run, ""%A_AhkPath%"" ""%FullPath%"", , , NewPID
        CurrentScriptPID := NewPID
        CurrentProfile := ScriptName
        ; Optional: Show tray tip for debugging
        ; TrayTip, Profile Manager, Switched to: %ScriptName%, 1, 1
    } else if (ScriptName != ""DesktopProfile.ahk"") {
        ; Only fall back to Desktop if not already trying Desktop
        SwitchToProfile(""DesktopProfile.ahk"")
    }
}

; Cleanup on exit
OnExit, CleanupAndExit

CleanupAndExit:
    if (CurrentScriptPID > 0) {
        Process, Close, %CurrentScriptPID%
    }
ExitApp

; Hotkey to manually reload ProfileManager (optional)
^!r::Reload

; Hotkey to show current profile (optional for debugging)
^!p::
    TrayTip, Profile Manager, Current Profile: %CurrentProfile%, 2, 1
return"
KVzT7W5B,iTunes Dual-Layer AHK Script for Macro Mouse (AHK_iTunes.ahk),DuskDegree9667,Autohotkey,Wednesday 25th of June 2025 06:48:28 AM CDT,"#Persistent
SetTitleMatchMode, 2  ; Allow partial matches for window titles.
DetectHiddenWindows, On
CoordMode, Mouse, Screen

Layer2 := false

hotkey1::
    if (!Layer2) {
        Send, ^{[} ; Previous Page
        KeyWait, F8
    } else {
        Send, ^{[} ; Previous Page
        KeyWait, F8
    }
Return

hotkey2::
    if (!Layer2) {
        Send, ^{]} ; Next Page
        KeyWait, F9
    } else {
        Send, ^{]} ; Next Page
        KeyWait, F9
    }
Return

hotkey3::
    Layer2 := !Layer2 ; Layer Switch
    if (Layer2) {
        SetTimer, UpdateTooltip2, 50
        KeyWait, F10
    } else {
        SetTimer, UpdateTooltip2, Off
        SetTimer, UpdateTooltip1, 50
        KeyWait, F10
        SetTimer, RemoveTooltip, -1000
    }
    Send, {Esc} ; Escape the Application key menu
Return

UpdateTooltip2:
    if (Layer2) {
        MouseGetPos, MouseX, MouseY
        Tooltip, Layer 2 is active, MouseX + 15, MouseY + 15
    }
Return

UpdateTooltip1:
    MouseGetPos, MouseX, MouseY
    Tooltip, Layer 1 is active, MouseX + 15, MouseY + 15
Return

RemoveTooltip:
    SetTimer, UpdateTooltip1, Off
    Tooltip
Return

hotkey4::
    if (!Layer2) {
        Send, ^i ; Get Info Panel
        KeyWait, F11
    } else {
        Send, ^i ; Get Info Panel
        KeyWait, F11
    }
Return

hotkey5::
    if (!Layer2) {
        Return ; LAYER1 ACTION
    } else {
        Return ; LAYER2 ACTION
    }
Return

hotkey6::
    if (!Layer2) {
        Send, ^c ; Copy
        KeyWait, F13
    } else {
        Send, ^c ; Copy
        KeyWait, F13
    }
Return

hotkey7::
    if (!Layer2) {
        Send, ^{Right} ; Next Track
        KeyWait, F14
    } else {
        Send, {Home} ; Go to Top of List
        KeyWait, F14
    }
Return

hotkey8::
    if (!Layer2) {
        Send, ^x ; Cut
        KeyWait, F15
    } else {
        Send, ^x ; Cut
        KeyWait, F15
    }
Return

hotkey9::
    if (!Layer2) {
        Send, ^v ; Paste
        KeyWait, F16
    } else {
        Send, ^v ; Paste
        KeyWait, F16
    }
Return

hotkey10::
    if (!Layer2) {
        Send, ^+{Right} ; Next Chapter
        KeyWait, F17
    } else {
        Send, {PgUp} ; Scroll List Up by One Screenful
        KeyWait, F17
    }
Return

hotkey11::
    if (!Layer2) {
        Send, {Delete} ; Delete Selected Item
        KeyWait, F18
    } else {
        Send, {LAlt} ; Show Duplicates
        Sleep, 100
        Send, f
        Sleep, 100
        Send, b
        Sleep, 100
        Send, d
        Sleep, 10
        KeyWait, F18
    }
Return

hotkey12::
    if (!Layer2) {
        Send, {AppsKey}
        Sleep, 100
        Send, t ; Show Song in Playlist…
        Sleep, 10
        KeyWait, F19
    } else {
        Send, {AppsKey}
        Sleep, 100
        Send, b ; Show Song's in Album View
        Sleep, 10
        KeyWait, F19
    }
Return

hotkey13::
    if (!Layer2) {
        Send, ^+{Left} ; Previous Chapter
        KeyWait, F20
    } else {
        Send, {PgDn} ; Scroll List Down by One Screenful
        KeyWait, F20
    }
Return

hotkey14::
    if (!Layer2) {
        Send, {AppsKey}
        Sleep, 100
        Send, d ; Add Song to Playlist…
        Sleep, 10
        KeyWait, F21
    } else {
        Send, {LAlt} ; Hide Duplicates
        Sleep, 100
        Send, f
        Sleep, 100
        Send, b
        Sleep, 100
        Send, h
        Sleep, 10
        KeyWait, F21
    }
Return

hotkey15::
    if (!Layer2) {
        Send, {Enter}
        KeyWait, F22
    } else {
        Send, {Enter}
        KeyWait, F22
    }
Return

hotkey16::
    if (!Layer2) {
        Send, ^{Left} ; Previous Track
        KeyWait, F23
    } else {
        Send, {End} ; Go to Bottom of List
        KeyWait, F23
    }
Return

hotkey17::
    if (!Layer2) {
        Send, ^l ; Jump to Current Track
        KeyWait, F24
    } else {
        Send, ^l ; Jump to Current Track
        KeyWait, F24
    }
Return

; Infinite scroll function
#MaxHotkeysPerInterval 500
#InstallKeybdHook
#InstallMouseHook

*WheelUp::Scroll(-1)
*WheelDown::Scroll(1)

Scroll(Direction) {
    static scrollCount := 0, level := 1, maxLevel := 15, timeout := 350, levelTickCount := 0
        , startingShiftState := 0, scrollingState := 0, flick := 0, wheelDir := """"

    if (level < maxLevel && ++scrollCount >= 4) { ; Change level when scrolling 4 times in a row, check for flick by detecting if it was scrolled 4 times within 60 ms.
        flick := (A_TickCount - levelTickCount < 60)
        levelTickCount := A_TickCount
        level++
        scrollCount := 1
    }

    wheelDir := (Direction = -1 ? ""WheelUp"" : ""WheelDown"")

    if (A_PriorHotkey = A_ThisHotkey && A_TimeSincePriorHotkey < timeout && level > 1) {
        Send, {Blind}{%wheelDir% %level%} ; Scroll faster when scrolling consecutively in a single direction.
        if (flick) {
            startingShiftState := GetKeyState(""Shift"", ""P"")
            scrollingState := 1
            SetTimer, AutoScroll, 30
        }
    } else {
        if (scrollingState)
            scrollingState := 0
        else
            Send, {Blind}{%wheelDir%}
        level := 1
    }
    return

    AutoScroll:
        if (level = 1 ; Stop auto-scroll if…
        || GetKeyState(""Shift"", ""P"") != startingShiftState
        || !scrollingState
        || A_PriorHotKey != A_ThisHotkey) {
            scrollingState := 0
            SetTimer, AutoScroll, Off
        } else {
            Send, {Blind}{%wheelDir% %level%}
        }
    return
}"
YTKQUyvS,Untitled,kirzecy670,MySQL,Wednesday 25th of June 2025 06:24:53 AM CDT,"SELECT
    user_id, 
    family_role
FROM (
    SELECT
        user_id,
        arraySort(x -> x.1, groupArray(family_role_with_priority))[1].2 AS family_role
    FROM (
        WITH
            anyIf(TRUE, n_members > 1) OVER (PARTITION BY circle_id)       AS has_other_members,
            anyIf(TRUE, user_role = 'Child') OVER (PARTITION BY circle_id) AS has_children,
            -- tuples of (priority, family role)
            multiIf(
                user_role = 'Adult' AND has_children AND adult_order = 1 AND n_members > 2, (1, 'first parent in full family'),
                user_role = 'Adult' AND has_children AND adult_order = 1 AND n_members = 2, (2, 'single parent in full family'),
                user_role = 'Adult' AND has_other_members AND adult_order = 1,              (3, 'first parent with adults only'),
                user_role = 'Adult' AND has_children AND adult_order > 1,                   (4, 'second+ parent in full family'),
                user_role = 'Adult' AND has_other_members AND adult_order > 1,              (5, 'second+ parent with adults only'),
                user_role = 'Child',                                                        (6, 'child'),
                (7, 'lone adult')
            ) AS family_role_with_priority
        SELECT
            circle_id,
            user_id,
            user_role,
            join_ts,
            creator_id,
            create_ts,
            family_role_with_priority
        FROM (
            SELECT
                circle_id,
                user_id,
                user_role,
                created_ts                                                                     AS join_ts,
                argMin(user_id, created_ts) OVER (PARTITION BY circle_id)                      AS creator_id,
                min(created_ts) OVER (PARTITION BY circle_id)                                  AS create_ts,
                count(*) OVER (PARTITION BY circle_id)                                         AS n_members,
                countIf(user_role = 'Adult') OVER (PARTITION BY circle_id ORDER BY created_ts) AS adult_order
            FROM circles.circle_member
        )
        WHERE age('day', create_ts, now()) >= '1'
            AND join_ts BETWEEN create_ts AND create_ts + INTERVAL '7' DAY
    )
    GROUP BY user_id
)"
afzm5Gr6,Random colour cube - python,SM110866,Python,Wednesday 25th of June 2025 06:24:10 AM CDT,"import turtle
import random

turtle.speed(10) #set to max speed
turtle.colormode(255) #accept rgb values
def random_color():
    r = random.randint(0,255)
    g = random.randint(0,255)
    b = random.randint(0,255)
    turtle.color(r,g,b) #change to rgb value
    # random color method
turtle.getscreen() #initiate screen
turtle.title(""house"") #change window title
turtle.penup() # no extra line
turtle.goto(100,100) # move cursor
turtle.pendown() # create line
random_color() #call variable
for i in range(4): #each side of box
    turtle.pensize(10) #change pen size
    for i in range(20): # repeat 20 times
        turtle.forward(5) #move forward 5 pixels
        random_color() #random color again
    turtle.left(90) # turn left and make a new line

turtle.done() #keeps the window open until closed"
V1Nig2FN,cp,vking4848,JSON,Wednesday 25th of June 2025 06:22:49 AM CDT,"@Gorilli,@Sonal,
@_____________𝗣𝗔𝗚𝗔𝗟_____________ ,
@ 亗 ᴹᴿ°᭄LUCÍFER 𖤍𒁍                             ,
@Yadav Girl ,
@ยภเợยє ๒๏ץ ,
@Shizu ,
@☠️bad_boy☠️ ,
@Streamlabs ,
@Fluxo,
@ɢ𝙰𝙻ɪ𝙱 ,
@ ⸺̥ ͟ ͟»༏༏⃞🚬ㅤ ⸺̥ ͟ ͟»༏ ༏ㅤ ⃟ 𓆩⃪〭〬 ׀🇽꯭ ׀ㅤ 𓆩𓆪ㅤㅤ  ,
@CP
"
qmhkpnsf,boxing,saidwe1,JSON,Wednesday 25th of June 2025 06:16:48 AM CDT,"{
  ""streams"": [
    {
      ""url"": ""https://www.thesportsdb.com/league/4445-boxing""
    }
  ]
}"
KdMS7WyL,dataNone,TestGuy1,JSON,Wednesday 25th of June 2025 06:00:08 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '6020fa9cc87670fa3a6467f724281b662bca6c3cef715ee866867c6c04743b4db2122bacf4df21e20ac7ed0191c9293a69d8bdf21d9079834e7877f5249dc6a3d015f295ed2aebab8141938df1e22d55d8932e6e37c55bd12acd2e8b14473f49ce5ba5d3c80a4deaf5da72a4eca92d70af1ba163ecf32bbbe9096fd38a4123a7',
  otherdata: [
    'feae167fb07c5ba99489230a76423037',
    '2977f7ddc1d50593b56412750f180c99',
    'bb117027e640a62f32287b2eb11ecb05',
    '43ac83454b506658cb4be5fa1c983e1f',
    'f84437664222f70f16febf32b34df4cc',
    'f40d2f0a118a9a99a5ad3fb2d7bdd479',
    'd3cec418de7243655f74ead2ebecafde',
    'e0047fc5111b41b51e5b942ded29e967'
  ]
}"
