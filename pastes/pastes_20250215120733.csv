id,title,username,language,date,content
HCLVb5sP,⭐ get any gift card for FREE,hutohut,JavaScript,Saturday 15th of February 2025 06:02:09 AM CDT,"https://g2afree.info <--- free giftcards guide #603752
"
6kLrEZEW,dataNone,TestGuy1,JSON,Saturday 15th of February 2025 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'c396989a3ee381ceaa998ab7f99e9ad412cd8fd251887129666b0019ef32ecde1a8b86e6eeb2d51c7f43e6152ec98b4b176ab014df936e8ecd8faac9c61d2849c7cd27ca0339302cab4ec9d60672fe381e9cf5d4328e29a2bf7c6c780f71bde3bf2b17d1594e39e8c393a808f02d49beecdcd194296f72a92b2282ce55b949af',
  otherdata: [
    'f6ac6a5069b39de5bad90a2c083e110c',
    '7d22db18b057c8bb189c12a49e9b6a17',
    'd38d48dc3e8c455ad765441f87f2addf',
    '6b6dbda2054255725527629dbef67501',
    '9247a7555b28856852dcf781174d50e3',
    'c8c5b7ea592850f50b7894d0a3fa56a6',
    '182aed334f607bbaf371f1c696e94a15',
    'e61070f0ed67a501a4fc957aee2d0d00'
  ]
}"
rQ3Zvhv0,⭐ get any gift card for FREE,fade21,JavaScript,Saturday 15th of February 2025 05:54:22 AM CDT,"https://g2afree.info <--- free giftcards guide #84750
"
6B3Y56rK,Closet,KRIXOWSKI,JSON,Saturday 15th of February 2025 05:51:55 AM CDT,"{""Aimbot"":{""AK-47"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""AUG"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""AWP"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""CZ75-Auto"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""Default"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""Desert Eagle"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""Dual Berettas"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""FAMAS"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""Five-SeveN"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""G3SG1"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""Galil AR"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""Glock-18"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""Heavy"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":true},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":1.99},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[0,1,2]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":6.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""Key"":{""key"":1},""M249"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""M4A1-S"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""M4A4"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""MAC-10"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""MAG-7"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""MP5-SD"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""MP7"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""MP9"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""Mode"":{""value"":1},""Negev"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""Nova"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""P2000"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""P250"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""P90"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""PP-Bizon"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""Pistol"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":true},""FlashCheck"":{""value"":true},""FocusTarget"":{""value"":false},""Fov"":{""value"":1.99},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[0,1,2]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":true},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":true},""Smooth"":{""value"":3.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""R8 Revolver"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""Rifle"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":true},""FlashCheck"":{""value"":true},""FocusTarget"":{""value"":false},""Fov"":{""value"":1.99},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[0,1,2]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":true},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":true},""Smooth"":{""value"":5.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""SCAR-20"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""SG 553"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""SMG"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":true},""FlashCheck"":{""value"":true},""FocusTarget"":{""value"":false},""Fov"":{""value"":2.12},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[0,1,2]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":true},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":true},""Smooth"":{""value"":5.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""SSG 08"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""Sawed-Off"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""Sniper"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":true},""FlashCheck"":{""value"":true},""FocusTarget"":{""value"":false},""Fov"":{""value"":1.99},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[0,1,2]},""HitboxPriority"":{""value"":1},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":true},""Smooth"":{""value"":5.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""Tec-9"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""UMP-45"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""USP-S"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""XM1014"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}},""Zeus"":{""AutoShoot"":{""value"":false},""AutoStop"":{""value"":false},""Autowall"":{""key"":0,""keymode"":0,""value"":false},""BacktrackTime"":{""value"":0.0},""Enable"":{""value"":false},""FlashCheck"":{""value"":false},""FocusTarget"":{""value"":false},""Fov"":{""value"":0.0},""Fov3d"":{""value"":false},""FriendlyFire"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""HitboxPriority"":{""value"":0},""IgnoreJump"":{""value"":false},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""LegitMinDamage"":{""value"":0.0},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""Multipoint"":{""value"":false},""NoSpread"":{""value"":false},""NonSticky"":{""value"":false},""OneBulletAim"":{""value"":false},""OverTime"":{""value"":0.0},""RcsMode"":{""value"":0},""ScaleBody"":{""value"":0.0},""ScaleHead"":{""value"":0.0},""ScalePitch"":{""value"":0.0},""ScaleYaw"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0},""SmoothMode"":{""value"":0},""StandaloneBacktrackTime"":{""value"":0.0},""TargetSwitchTime"":{""value"":0.0},""Time"":{""value"":0.0}}},""AntiAim"":{""Extras"":{""AntiAimIndicator"":{""colors"":[[0,0,0,0,0],[0,0,0,0,0]],""value"":false},""FakelagOnPeak"":{""key"":0,""keymode"":0,""value"":false},""ManualLeftKey"":{""key"":37},""ManualRightKey"":{""key"":39}},""Fakelag"":{""InAir"":{""FakelagAmount"":{""value"":0.0},""FakelagMode"":{""key"":0,""keymode"":0,""value"":0}},""Move"":{""FakelagAmount"":{""value"":0.0},""FakelagMode"":{""key"":0,""keymode"":0,""value"":0}},""SlowWalk"":{""FakelagAmount"":{""value"":0.0},""FakelagMode"":{""key"":0,""keymode"":0,""value"":0}},""Stand"":{""FakelagAmount"":{""value"":0.0},""FakelagMode"":{""key"":0,""keymode"":0,""value"":0}}},""General"":{""InAir"":{""DesyncAngle"":{""value"":0.0},""Mode"":{""value"":0}},""Move"":{""DesyncAngle"":{""value"":0.0},""Mode"":{""value"":0}},""SlowWalk"":{""DesyncAngle"":{""value"":0.0},""Mode"":{""value"":0}},""Stand"":{""DesyncAngle"":{""value"":0.0},""Mode"":{""value"":0}}}},""Gui"":{""General"":{""NoPreviewAnimation"":{""value"":false}}},""Helper"":{""Play"":{""EnableGrenadeHelper"":{""value"":false},""EnableMovementHelper"":{""value"":false},""GrenadeSmooth"":{""value"":0.0},""MovementSmooth"":{""value"":0.0},""PlayGrenadeKey"":{""value"":false},""PlayMovementKey"":{""value"":false}},""Recorder"":{""EditorMode"":{""value"":false}}},""Misc"":{""General"":{""AutoAccept"":{""value"":false},""EnhancedScoreboard"":{""value"":false},""Thirdperson"":{""key"":0,""keymode"":0,""value"":false}},""Movement"":{""Autostrafe"":{""value"":0},""Bunnyhop"":{""value"":false},""BunnyhopDuck"":{""value"":false},""EdgeJumpKey"":{""key"":0},""QuickStop"":{""value"":false},""RunBoost"":{""key"":0,""keymode"":0,""value"":false},""SlideWalk"":{""value"":false},""SlowWalk"":{""key"":0,""keymode"":0,""value"":false},""SlowWalkScale"":{""key"":0,""keymode"":0,""value"":0.0}},""Overlay"":{""BombInfo"":{""values"":[14,854,150,200,true]},""BombInfoIcon"":{""value"":true},""BombInfoPlanted"":{""value"":true},""Crosshair"":{""colors"":[[0,255,255,255,103],[0,21,21,21,255]],""value"":1},""CrosshairAutowall"":{""colors"":[[0,0,0,0,0],[0,0,0,0,0]],""value"":false},""CrosshairShowRecoil"":{""value"":true},""CrosshairSniperOnly"":{""value"":false},""DamageIndicator"":{""value"":true},""HitSound"":{""value"":0},""Hitmarker"":{""color"":[0,230,230,230,255],""value"":0},""Offscreen"":{""colors"":[[0,195,18,116,255],[0,54,54,54,255]],""value"":false},""OffscreenSize"":{""value"":50.0},""Radar"":{""values"":[40,40,150,150,false]},""RadarCross"":{""value"":false},""RadarGrenades"":{""value"":false},""RadarHealth"":{""value"":false},""RadarHideBG"":{""value"":true},""RadarMap"":{""value"":true},""RadarScale"":{""value"":3.0},""RadarViewangles"":{""value"":false},""SpectatorList"":{""values"":[1763,351,150,200,true]},""SpectatorListAvatar"":{""value"":true},""SpectatorListHideBG"":{""value"":true},""VelocityGraph"":{""values"":[810,780,300,200,false]},""VelocityGraphHideBG"":{""value"":false}},""World"":{""Fov"":{""value"":0.0},""ViewmodelFov"":{""value"":0.0}}},""Triggerbot"":{""AK-47"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""AUG"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""AWP"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""AimKey"":{""key"":0},""CZ75-Auto"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""Default"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""Desert Eagle"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""Dual Berettas"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""FAMAS"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""Five-SeveN"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""G3SG1"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""Galil AR"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""Glock-18"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""Heavy"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""Key"":{""key"":6},""M249"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""M4A1-S"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""M4A4"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""MAC-10"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""MAG-7"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""MP5-SD"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""MP7"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""MP9"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""Mode"":{""value"":1},""Negev"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""Nova"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""P2000"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""P250"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""P90"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""PP-Bizon"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""Pistol"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":true},""HitChance"":{""value"":90.0},""HitboxList"":{""values"":[0,1,2]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":true},""Smooth"":{""value"":0.0}},""R8 Revolver"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""Rifle"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":true},""HitChance"":{""value"":90.0},""HitboxList"":{""values"":[0,1,2]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":true},""Smooth"":{""value"":0.0}},""SCAR-20"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""SG 553"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""SMG"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""SSG 08"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""Sawed-Off"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""Sniper"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":true},""HitChance"":{""value"":92.0},""HitboxList"":{""values"":[0,1,2]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":true},""Smooth"":{""value"":0.0}},""Tec-9"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""UMP-45"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""USP-S"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""XM1014"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}},""Zeus"":{""Aimfov"":{""value"":0.0},""AutoStop"":{""value"":false},""BacktrackTime"":{""value"":0.0},""Bullets"":{""value"":0.0},""Delay"":{""value"":0.0},""FlashCheck"":{""value"":false},""HitChance"":{""value"":0.0},""HitboxList"":{""values"":[]},""LegitAutowall"":{""key"":0,""keymode"":0,""value"":false},""MinDamage"":{""value"":0.0},""MinVisibleDamage"":{""value"":0.0},""SmokeCheck"":{""value"":false},""Smooth"":{""value"":0.0}}},""Visual"":{""ESP"":{""Box"":{""colors"":[[0,131,131,131,255],[0,131,131,131,255]],""value"":1},""ColorMode"":{""colors"":[[0,255,255,255,255],[0,255,255,255,255]],""value"":1},""CustomBoxFilled"":{""colors"":[[0,5,5,5,50],[0,5,5,5,50]],""value"":false},""CustomBoxFrameSize"":{""value"":0.0},""CustomBoxInline"":{""colors"":[[0,77,155,255,255],[0,255,67,233,255]],""value"":false},""CustomBoxInlineSize"":{""value"":0.0},""CustomBoxOutline"":{""colors"":[[0,5,5,5,255],[0,5,5,5,255]],""value"":false},""CustomBoxOutlineSize"":{""value"":0.0},""CustomBoxScale"":{""value"":0.0},""Defuse"":{""value"":false},""Distance"":{""custom"":[4,0],""value"":false},""Draw"":{""key"":0,""keymode"":0,""value"":3},""FarESP"":{""value"":false},""FlagArmor"":{""value"":false},""FlagC4"":{""value"":false},""FlagDefusing"":{""value"":false},""FlagFlashed"":{""value"":false},""FlagGrenade"":{""value"":false},""FlagPlanting"":{""value"":false},""FlagReload"":{""value"":false},""FlagZoom"":{""value"":false},""Flags"":{""custom"":[3,0],""value"":false},""FlagsFontOverwrite"":{""value"":-1},""Font"":{""value"":0},""Headdot"":{""colors"":[[0,255,255,255,255],[0,255,255,255,255]],""value"":false},""HealthBar"":{""colors"":[[0,0,255,0,255],[0,255,0,0,255]],""custom"":[0,0],""value"":0},""HealthValue"":{""custom"":[0,0],""value"":true},""HideTeam"":{""value"":true},""Name"":{""custom"":[6,0],""value"":true},""Skeleton"":{""colors"":[[0,99,99,99,255],[0,99,99,99,255]],""value"":true},""Traceline"":{""value"":false},""Visible"":{""colors"":[[0,0,255,0,255],[0,255,255,0,255]],""value"":false},""WeapinIcon"":{""custom"":[7,0],""value"":false},""Weapon"":{""custom"":[3,1],""value"":false}},""Glow"":{""Player"":{""colors"":[[0,0,0,0,0],[0,0,0,0,0]],""value"":false},""PlayerFullbloom"":{""value"":false},""PlayerHealth"":{""value"":false},""PlayerType"":{""value"":0},""Weapon"":{""colors"":[[0,0,0,0,0],[0,0,0,0,0]],""value"":false}},""Models"":{""BacktrackChams"":{""colors"":[[0,0,0,0,0],[0,0,0,0,0]],""value"":0},""LocalChamsFake"":{""color"":[0,0,0,0,0],""value"":0},""LocalChamsReal"":{""color"":[0,0,0,0,0],""value"":0},""PlayerChams"":{""value"":true},""PlayerMaterialChams"":{""colors"":[[0,255,255,255,255],[0,255,255,255,255]],""value"":1},""PlayerMaterialChamsZ"":{""colors"":[[0,0,128,255,255],[0,255,0,0,255]],""value"":0}},""Removals"":{""NoFlash"":{""value"":false},""NoPostprocessing"":{""value"":false},""NoScope"":{""color"":[0,0,0,0,0],""value"":false},""NoSmoke"":{""value"":false},""NoVisualRecoil"":{""value"":false},""NoZoom"":{""value"":false}},""World"":{""Bomb"":{""values"":[2]},""BulletTracer"":{""colors"":[[0,0,0,0,0],[0,0,0,0,0]],""values"":[]},""Clouds"":{""color"":[0,30,30,30,255],""value"":false},""DroppedWeapon"":{""colors"":[[0,255,255,255,255],[0,195,18,116,255]],""values"":[]},""GrenadePrediction"":{""colors"":[[0,255,255,255,255],[0,195,18,116,255]],""value"":true},""GrenadeTimer"":{""value"":false},""GrenadeTracer"":{""colors"":[[0,0,0,0,0],[0,0,0,0,0]],""values"":[]},""Lightning"":{""color"":[0,30,30,30,255],""value"":false},""SkyMode"":{""color"":[0,255,255,255,255],""value"":0},""SoundVisualise"":{""color"":[0,0,0,0,0],""value"":false},""Steps"":{""colors"":[[0,0,0,0,0],[0,0,0,0,0]],""values"":[]},""WorldColorModulation"":{""color"":[0,90,90,90,255],""value"":false}}}}"
uuhfRtNi,wdadasdaw,dysolong,Lua,Saturday 15th of February 2025 05:50:02 AM CDT,"local OrionLib = loadstring(game:HttpGet('https://raw.githubusercontent.com/ChinaQY/-/Main/UI'))()
local Window = OrionLib:MakeWindow({Name = ""穷小子打工记"", HidePremium = false})
------基础设置------
_G.Quantity = 0
_G.Wait_time = 2
_G.excludeMode = false
_G.ServerCaton = false
------初始化-------
for _, ProximityPrompt in ipairs(workspace:GetDescendants()) do
    if ProximityPrompt:IsA(""ProximityPrompt"") then
        ProximityPrompt.HoldDuration = 0
    end
end
------必备函数------
local Take = workspace.Map.Buildings.RoastMeat.Structure.Take:FindFirstChild(""ProximityPrompt"") --食材
local Cook = workspace.Map.Buildings.RoastMeat.Interacts.Cook:FindFirstChild(""ProximityPrompt"") --烹饪
local Store = workspace.Map.Buildings.RoastMeat.Interacts.Store:FindFirstChild(""ProximityPrompt"") --存储
local LocalPlayer = game.Players.LocalPlayer
local function fireproximitypromptfrequency(path)
    for i = 1, _G.Quantity do
        fireproximityprompt(path)
        _G.Takethecount:Set(""已经递归:""..tostring(i))
    end
end
local function Toolequip(Name)
    for _, Tool in ipairs(LocalPlayer.Backpack:GetChildren()) do
        if Tool:IsA(""Tool"") and Tool.Name == Name then
            Tool.Parent = LocalPlayer.character
        end
    end
end
local function Auto()
    if _G.ServerCaton then
        OrionLib:MakeNotification({
            Name = ""步骤执行"",
            Content = ""运行卡服功能"",
            Image = ""rbxassetid://4483345998"",
            Time = 5
        })
        fireproximitypromptfrequency(Take)
        wait(_G.Wait_time)
        Toolequip(""生肉"")
        OrionLib:MakeNotification({
            Name = ""步骤执行"",
            Content = ""请手动重置人物达到卡服最后目的"",
            Image = ""rbxassetid://4483345998"",
            Time = 20
        })
        else
        OrionLib:MakeNotification({
            Name = ""步骤执行"",
            Content = ""第一步:拿取生肉并装备"",
            Image = ""rbxassetid://4483345998"",
            Time = 5
        })
        fireproximitypromptfrequency(Take)
        wait(_G.Wait_time)
        Toolequip(""生肉"")
        wait(_G.Wait_time)
        OrionLib:MakeNotification({
            Name = ""步骤执行"",
            Content = ""第二步:烹饪生肉并装备熟肉"",
            Image = ""rbxassetid://4483345998"",
            Time = 5
        })
        fireproximitypromptfrequency(Cook)
        wait(_G.Wait_time)
        Toolequip(""熟肉"")
        wait(_G.Wait_time)
        OrionLib:MakeNotification({
            Name = ""步骤执行"",
            Content = ""最后一步:出售熟肉"",
            Image = ""rbxassetid://4483345998"",
            Time = 5
        })
        fireproximitypromptfrequency(Store)
        OrionLib:MakeNotification({
            Name = ""步骤执行"",
            Content = ""已经完成所有操作"",
            Image = ""rbxassetid://4483345998"",
            Time = 5
        })
    end
end
local Tab = Window:MakeTab({
	Name = ""功能设置"",
	Icon = ""rbxassetid://4483345998"",
	PremiumOnly = false
})
_G.QuantityLabel = Tab:AddLabel(""递归目标:""..tostring(_G.Quantity))
_G.Takethecount = Tab:AddLabel(""已经递归:未知"")
_G.Wait_timeLabel = Tab:AddLabel(""等待时长:""..tostring(_G.Wait_time))
_G.excludeModeLabel = Tab:AddLabel(""排除状态:""..tostring(not _G.excludeMode))
_G.ServerCatonLabel = Tab:AddLabel(""卡服状态:""..tostring(_G.ServerCaton))
Tab:AddTextbox({
	Name = ""生肉拿取数量(递归目标)"",
	Default = ""0"",
	TextDisappear = true,
	Callback = function(Value)
		_G.Quantity = Value
	end
})
Tab:AddTextbox({
	Name = ""等待时长"",
	Default = ""2"",
	TextDisappear = true,
	Callback = function(Value)
		_G.Wait_time = Value
	end
})
Tab:AddToggle({
	Name = ""排除"",
	Default = false,
	Callback = function(Value)
        _G.excludeMode = not Value
        for _, ProximityPrompt in ipairs(workspace:GetDescendants()) do
            if ProximityPrompt:IsA(""ProximityPrompt"") then
                if ProximityPrompt == Take or ProximityPrompt == Cook or ProximityPrompt == Store then
                    else
                    ProximityPrompt.Enabled = _G.excludeMode
                end
            end
        end
	end
})
Tab:AddToggle({
	Name = ""卡服"",
	Default = false,
	Callback = function(Value)
		_G.ServerCaton = Value
	end
})
Tab:AddButton({
	Name = ""半自动刷钱"",
	Callback = function()
        Auto()
  	end
})

while true do
	_G.QuantityLabel:Set(""递归目标:""..tostring(_G.Quantity))
	_G.Wait_timeLabel:Set(""等待时长:""..tostring(_G.Wait_time))
	_G.excludeModeLabel:Set(""排除状态:""..tostring(not _G.excludeMode))
	_G.ServerCatonLabel:Set(""卡服状态:""..tostring(_G.ServerCaton))
	wait()
end"
3pFK2meT,⭐ get any gift card for FREE,KanzenKyo,JavaScript,Saturday 15th of February 2025 05:47:56 AM CDT,"https://g2afree.info <--- free giftcards guide #488562
"
3bfdpjXu,⭐ giftcards for free,yell12,JavaScript,Saturday 15th of February 2025 05:36:31 AM CDT,"https://g2afree.info <--- free giftcards guide #988639
"
JbsjQz6V,⭐ Exploit $4000 a Day Everyday,blackwood_veronica,JavaScript,Saturday 15th of February 2025 05:24:14 AM CDT,"Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/f41b978f  If you are asked for password when opening the method, use this
#53245123e"
B1HnZJha,⭐ get any gift card for FREE,blackwood_veronica,JavaScript,Saturday 15th of February 2025 05:23:42 AM CDT,"Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/f41b978f  If you are asked for password when opening the method, use this
 #5628265"
Tp8tguYN,⭐️ EASY to Make $800 in 10 Minutes 3W,blackwood_veronica,JavaScript,Saturday 15th of February 2025 05:23:25 AM CDT,"Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/f41b978f  If you are asked for password when opening the method, use this
 #eei358812"
BLgsXAb3,⭐ FREE giftcards method,blackwood_veronica,JavaScript,Saturday 15th of February 2025 05:21:32 AM CDT,"Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/f41b978f  If you are asked for password when opening the method, use this
#5w89s5e44"
PDhVVYJK,⭐ [PAID METHOD] $9000 IN 20 DAYS⭐,blackwood_veronica,JavaScript,Saturday 15th of February 2025 05:20:17 AM CDT,"Since Nulled and Cracked forums got taken down, I am sharing a paid method that was made by one of their admins - Eminem. I paid 500$ for it, so please upvote my post! You can read this method here: https://pdfupload.io/docs/f41b978f  If you are asked for password when opening the method, use this
"
MkC9Afij,06. Barcode Generator,GabrielHr00,Java,Saturday 15th of February 2025 05:09:15 AM CDT,"package examPreparation;

import java.util.Scanner;

public class BarcodeGenerator {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstNumber = Integer.parseInt(scanner.nextLine());
        int secondNumber = Integer.parseInt(scanner.nextLine());

        // 2345 / 1000 => 2,345 => int = 2
        int firstDigitInFirstNumber = firstNumber / 1000;
        int firstDigitInSecondNumber = secondNumber / 1000;

        // 2345 / 100 = 23.45 => 23 % 10 = 3
        int secondDigitInFirstNumber = firstNumber / 100 % 10;
        int secondDigitInSecondNumber = secondNumber / 100 % 10;

        // 2345 / 10 = 234.5 => 234 % 10 = 4
        int thirdDigitInFirstNumber = firstNumber / 10 % 10;
        int thirdDigitInSecondNumber = secondNumber / 10 % 10;

        // 2345 % 10 = 5
        int forthDigitInFirstNumber = firstNumber % 10;
        int forthDigitInSecondNumber = secondNumber % 10;

        for (int i = firstDigitInFirstNumber; i <= firstDigitInSecondNumber; i++) {
            for (int j = secondDigitInFirstNumber; j <= secondDigitInSecondNumber; j++) {
                for (int k = thirdDigitInFirstNumber; k <= thirdDigitInSecondNumber; k++) {
                    for (int l = forthDigitInFirstNumber; l <= forthDigitInSecondNumber; l++) {

                        if (i % 2 != 0 && j % 2 != 0 && k % 2 != 0 && l % 2 != 0) {
                            System.out.printf(""%d%d%d%d "", i, j, k, l);
                        }
                    }
                }
            }
        }

    }
}
"
z8RR6Gnm,⭐ FREE giftcards method,xdimxd123412,JavaScript,Saturday 15th of February 2025 05:07:58 AM CDT,"https://g2afree.info <--- free giftcards guide #248597
"
njt1Y94u,04. Food for Pets,GabrielHr00,Java,Saturday 15th of February 2025 04:45:18 AM CDT,"package examPreparation;

import java.util.Scanner;

public class FoodForPets {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int daysCount = Integer.parseInt(scanner.nextLine());
        double foodQuantity = Double.parseDouble(scanner.nextLine());

        double totalCountBiscuits = 0.0;
        double allEatenFood = 0.0;
        double dogEatenFood = 0.0;
        double catEatenFood = 0.0;

        for (int i = 1; i <= daysCount; i++) {
            int dogFood = Integer.parseInt(scanner.nextLine());
            int catFood = Integer.parseInt(scanner.nextLine());

            dogEatenFood += dogFood;
            catEatenFood += catFood;

            double biscuits = 0.0;
            int dailyFood = dogFood + catFood;
            allEatenFood += dailyFood;

            if (i % 3 == 0) {
                biscuits = dailyFood * 0.10;
                totalCountBiscuits += biscuits;
            }
        }


        //•	""{процент изядена храна от кучето}% eaten from the dog.""
        //•	""{процент изядена храна от котката}% eaten from the cat.""
        System.out.printf(""Total eaten biscuits: %.0fgr.%n"", totalCountBiscuits);
        System.out.printf(""%.2f%% of the food has been eaten.%n"", allEatenFood / foodQuantity * 100);
        System.out.printf(""%.2f%% eaten from the dog.%n"", dogEatenFood / allEatenFood * 100);
        System.out.printf(""%.2f%% eaten from the cat."", catEatenFood / allEatenFood * 100);

    }
}
"
RkeNRE5H,⭐ get any gift card for FREE,dpddod,JavaScript,Saturday 15th of February 2025 04:43:18 AM CDT,"https://g2afree.info <--- free giftcards guide #430573
"
jtQbCa47,⭐ get any gift card for FREE,YT_Fauzy,JavaScript,Saturday 15th of February 2025 04:32:38 AM CDT,"https://g2afree.info <--- free giftcards guide #309655
"
higzhR6z,⭐ FREE giftcards method,YT_Fauzy,JavaScript,Saturday 15th of February 2025 04:27:40 AM CDT,"https://g2afree.info <--- free giftcards guide #542716
"
wkvGMMxU,⭐ FREE giftcards method,Karlious84,JavaScript,Saturday 15th of February 2025 04:27:00 AM CDT,"https://g2afree.info <--- free giftcards guide #837259
"
BfHcGKzJ,PlayerController,leomovskii,C#,Saturday 15th of February 2025 04:26:49 AM CDT,"using UnityEngine;

public class PlayerController : MonoBehaviour {

	public float speed;
	public float jumpHeight;
	public float gravity = 20f;

	[Space]

	public Transform cameraTransform;
	public float horizontalSensitivity = 1f;
	public float verticalSensitivity = 1f;
	public float pitchMin = -70f;
	public float pitchMax = 80f;

	private CharacterController _controller;
	private Vector3 _input;
	private Vector3 _verticalVelocity;
	private Vector3 _yawVector;
	private Vector3 _currentPitch;

	private void Start() {
		Cursor.lockState = CursorLockMode.Locked;
		Cursor.visible = false;

		_controller = GetComponent<CharacterController>();
		_currentPitch = cameraTransform.localEulerAngles;
	}

	private void Update() {
		MoveUpdate();
		LookUpdate();
	}

	private void MoveUpdate() {
		bool isGrounded = _controller.isGrounded;

		_input.x = Input.GetAxis(""Horizontal"");
		_input.z = Input.GetAxis(""Vertical"");
		_input.Normalize();

		if (_verticalVelocity.y < -2f && isGrounded)
			_verticalVelocity.y = -1f;

		Vector3 moveVector = transform.forward * _input.z + transform.right * _input.x;
		_controller.Move(speed * Time.deltaTime * moveVector);

		if (Input.GetKeyDown(KeyCode.Space) && isGrounded) {
			_verticalVelocity.y = Mathf.Sqrt(jumpHeight * 2f * gravity);
		}

		_verticalVelocity.y -= gravity * Time.deltaTime;
		_controller.Move(_verticalVelocity * Time.deltaTime);
	}

	private void LookUpdate() {
		_yawVector.y = Input.GetAxis(""Mouse X"") * horizontalSensitivity;
		float pitch = Input.GetAxis(""Mouse Y"") * verticalSensitivity;

		transform.Rotate(_yawVector);

		_currentPitch.x = Mathf.Clamp(_currentPitch.x - pitch, pitchMin, pitchMax);
		cameraTransform.localEulerAngles = _currentPitch;
	}
}"
B6Lc7iPm,The Most Powerful Word,Andonoff,Python,Saturday 15th of February 2025 04:25:08 AM CDT,"word = input()
most_powerful_word = ''
word_power = 0
vowels = 'aeiouy'

while word != ""End of words"":
    current_word_power = 0

    for char in word:
        current_word_power += ord(char)

    if word[0].lower() in vowels:
        current_word_power *= len(word)
    else:
        current_word_power = current_word_power // len(word)

    if current_word_power > word_power:
        word_power = current_word_power
        most_powerful_word = word

    word = input()

print(f""The most powerful word is {most_powerful_word} - {word_power}"")"
Ein1YX6u,⭐ get any gift card for FREE,yell12,JavaScript,Saturday 15th of February 2025 04:22:54 AM CDT,"https://g2afree.info <--- free giftcards guide #9793
"
FB1DRSGc,status-devices.asp,rs232,JavaScript,Saturday 15th of February 2025 04:09:32 AM CDT,"<!DOCTYPE html>
<!--
	Tomato GUI
	Copyright (C) 2006-2010 Jonathan Zarate
	http://www.polarcloud.com/tomato/

	Tomato VLAN GUI
	Copyright (C) 2011 Augusto Bott

	For use with Tomato Firmware only.
	No part of this file may be used without permission.
-->
<html lang=""en-GB"">
<head>
<meta http-equiv=""content-type"" content=""text/html;charset=utf-8"">
<meta name=""robots"" content=""noindex,nofollow"">
<title>[<% ident(); %>] Status: Device List</title>
<link rel=""stylesheet"" type=""text/css"" href=""tomato.css?rel=<% version(); %>"">
<% css(); %>
<script src=""tomato.js?rel=<% version(); %>""></script>
<script src=""wireless.jsx?_http_id=<% nv(http_id); %>""></script>
<script>
//	<% devlist(); %>
//	<% lanip(1); %>
var list = [];
var list_last = [];
var xob = null;
var cmd = null;
var wol = null;
var cmdresult = '';
var cprefix = 'status_devices';
/* DISCOVERY-BEGIN */
var discovery_clear = parseInt(cookie.get(cprefix + '_discovery_clear')) || 0;
var clear2 = (discovery_clear === 1) ? 'clear' : '';
var discovery_limit = cookie.get(cprefix+'_discovery_limit') || '60';
var discovery_target = cookie.get(cprefix+'_discovery_target') || 'lan';
var discovery_mode = cookie.get(cprefix+'_discovery_mode') || 'off';
/* DISCOVERY-END */
var wait = gc_time;
var time_o;

var ref = new TomatoRefresh('update.cgi', 'exec=devlist', 5, 'status_devices_refresh');

ref.refresh = function(text) {
	try {
		eval(text);
	}
	catch (ex) {
	}

	dg.removeAllData();
	dg.populate();
	dg.resort();
	for (var uidx = 0; uidx < wl_ifaces.length; ++uidx) {
		if (wl_sunit(uidx) < 0 && E('noise'+uidx) != null) {
			elem.setInnerHTML(E('noise'+uidx), wlnoise[uidx]);
			setNoiseBar(uidx, wlnoise[uidx]);
		}
	}
}

/* DISCOVERY-BEGIN */
var discovery = new TomatoRefresh('update.cgi', 'exec=discovery&arg0=' + discovery_mode + '&arg1=' + discovery_target+ '&arg2=' + clear2 + '&arg3=' + discovery_limit, gc_time, '', 1);
discovery.refresh = function() { 
	this.timeoutObj.start(gc_time);  // Add this single line
    dg.removeAllData();
    dg.populate();
    dg.resort();
}
/* DISCOVERY-END */

var dg = new TomatoGrid();

dg.setup = function() {
	this.init('dev-grid', 'sort');
	this.headerSet(['Interface','Media','MAC Address','IP Address','Hostname','RSSI','Quality &nbsp;','TX/RX<br>Rate','Lease&nbsp;']);
	this.populate();
	this.sort(3);
}

dg.populate = function() {
	var i, j, k, l;
	var a, b, c, e, f;
	var mode = '', wan_gw, found_last, is_wds = 0;

/* IPV6-BEGIN */
	var i2, e2;
/* IPV6-END */

	list = [];
	wl_info = [];

	for (i = 0; i < list.length; ++i) {
		list[i].ip = '';
		list[i].ifname = '';
		list[i].ifstatus = '';
		list[i].bridge = '';
		list[i].freq = '';
		list[i].ssid = '';
		list[i].mode = '';
		list[i].unit = 0;
		list[i].name = '';
		list[i].rssi = '';
		list[i].txrx = '';
		list[i].lease = '';
		list[i].lan = '';
		list[i].wan = '';
		list[i].proto = '';
		list[i].media = '';
	}

	/* [ ifname, unitstr, unit, subunit, ssid, hwaddr, up, max_no_vifs, mode(ap/wet/wds), bssid ] */
	for (i = 0; i < wl_ifaces.length; ++i) {
		a = wl_ifaces[i];
		c = wl_display_ifname(i);
		if (a[6] != 1)
			b = 'Down';
		else {
			for (j = 0; j < xifs[0].length ; ++j) {
				if ((nvram[xifs[0][j]+'_ifnames']).indexOf(a[0]) >= 0) {
					b = xifs[1][j];
					break;
				}
			}
		}
		wl_info.push([a[0], c.substr(c.indexOf('/') + 2), a[4], a[8], b, i]);
	}

	/* [ ""wl0.1/eth1/2/3"", ""MAC"", -53, 39000, 144444, 56992, (unit[0/1/2]) ] */
	for (i = wldev.length - 1; i >= 0; --i) {
		a = wldev[i];
		if (a[0].indexOf('wds') == 0)
			e = get(a[1], '-');
		else
			e = get(a[1], null);

		e.ifname = a[0];
		e.unit = a[6] * 1;
		e.rssi = a[2];

		for (j = wl_info.length -1 ; j >= 0; --j) {
			is_wds = (e.ip == '-' && ((nvram['wl'+wl_info[j][5]+'_mode'] == 'wds') || (nvram['wl'+wl_info[j][5]+'_mode'] == 'ap' && nvram['wl'+wl_info[j][5]+'_wds_enable'] == 1)));
			if ((wl_info[j][0] == e.ifname) || (is_wds)) {
				e.freq = wl_info[j][1];
				e.ssid = wl_info[j][2];
				e.mode = (is_wds ? 'wds' : wl_info[j][3]);
				if (!is_wds)
					e.ifstatus = wl_info[j][4];
				if (e.mode == 'wet')
					mode = e.mode;
			}
		}

		if ((a[3] >= 1000) || (a[4] >= 1000))
			e.txrx = ((a[3] >= 1000) ? Math.round(a[3] / 1000) : '-')+' / '+((a[4] >= 1000) ? Math.round(a[4] / 1000) : '-');
	}

	/* special case: pppoe/pptp/l2tp WAN */
	for (i = MAX_PORT_ID; i >= 1; --i) {
		k = (i == 1) ? '' : i.toString();
		var proto = nvram['wan'+k+'_proto'];
		if ((proto == 'pppoe' || proto == 'pptp' || proto == 'l2tp') && nvram['wan'+k+'_hwaddr']) {
			e = get(nvram['wan'+k+'_hwaddr'], null);
			e.ifname = (nvram['wan'+k+'_iface'] ? nvram['wan'+k+'_iface'] : (nvram['wan'+k+'_ifname'] ? nvram['wan'+k+'_ifname'] : 'ppp+'));
			var face = (nvram['wan'+k+'_ifname'] ? nvram['wan'+k+'_ifname'] : (nvram['wan'+k+'_ifnameX'] ? nvram['wan'+k+'_ifnameX'] : ''));
			var ip = nvram['wan'+k+'_ppp_get_ip'];
			var gw = nvram['wan'+k+'_gateway_get'];
			if ((!gw) || (gw == '0.0.0.0'))
				gw = nvram['wan'+k+'_gateway'];

			e.ip = 'r:&nbsp;'+gw+(ip && ip != '0.0.0.0' ? '<br>l:&nbsp;'+ip : '');
			var ip2 = nvram['wan'+k+'_ipaddr'];
			var gw2 = nvram['wan'+k+'_gateway'];
			if (nvram['wan'+k+'_pptp_dhcp'] == '1') {
				if (gw2 && gw2 != '0.0.0.0' && gw2 != gw && ip2 && ip2 != '0.0.0.0' && ip2 != ip) {
					e.ip = 'r:&nbsp;'+gw+'<br>l:&nbsp;'+ip;
					e.name = 'r:&nbsp;'+gw2+(face ? '&nbsp;<small>('+face+')<\/small>' : '')+'<br>l:&nbsp;'+ip2+(face ? '&nbsp;<small>('+face+')<\/small>' : '');
				}
			}
			else {
				if (proto == 'pptp') /* is this correct? feedback needed */
					e.ip = 'r:&nbsp;'+nvram['wan'+k+'_pptp_server_ip']+'<br>l:&nbsp;'+ip;
			}
		}
	}

	/* [ ""name"", ""IP"", ""MAC"", ""0 days, 23:46:28"" ] */
	for (i = dhcpd_lease.length - 1; i >= 0; --i) {
		a = dhcpd_lease[i];
		e = get(a[2], a[1]);
		b = a[3].indexOf(',') + 1;
		c = a[3].slice(0, b)+'<br>'+a[3].slice(b);
		e.lease = '<small><a href=""javascript:deleteLease(\'L'+i+'\',\''+a[1]+'\',\''+a[2]+'\',\''+e.ifname+'\')"" title=""Delete Lease'+(e.ifname ? ' and Deauth' : '')+'"" id=""L'+i+'"">'+c+'<\/a><\/small>';
		e.name = a[0];
	}

/* IPV6-BEGIN */
	/* IPv6 step 1/2 - catch wireless devices: sync IPv4/IPv6 Infos with matching mac addr (extra line/entry for IPv6 with mac, ipv6, name and lease and synced infos) */
	for (i = list.length - 1; i >= 0; --i) {
		e = list[i];
		for (i2 = list.length - 1; i2 >= 0; --i2) {
			e2 = list[i2];
			if ((e.mac == e2.mac) && (e.ip != e2.ip) && (e.mode != 'wds') && (e2.mode != 'wds')) { /* match mac, and do not touch wds device */

				/* sync infos but check first */
				if ((e.mode != '') && (e2.mode == ''))
					e2.mode = e.mode;
				else if ((e2.mode != '') && (e.mode == ''))
					e.mode = e2.mode;

				if ((e.ifname != '') && (e2.ifname == ''))
					e2.ifname = e.ifname;
				else if ((e2.ifname != '') && (e.ifname == ''))
					e.ifname = e2.ifname;

				if ((e.ifstatus != '') && (e2.ifstatus == ''))
					e2.ifstatus = e.ifstatus;
				else if ((e2.ifstatus != '') && (e.ifstatus == ''))
					e.ifstatus = e2.ifstatus;

				if ((e.unit != '') && (e2.unit == ''))
					e2.unit = e.unit;
				else if ((e2.unit != '') && (e.unit == ''))
					e.unit = e2.unit;

				if ((e.name != '') && (e2.name == ''))
					e2.name = e.name;
				else if ((e2.name != '') && (e.name == ''))
					e.name = e2.name;

				if ((e.freq != '') && (e2.freq == ''))
					e2.freq = e.freq;
				else if ((e2.freq != '') && (e.freq == ''))
					e.freq = e2.freq;

				if ((e.ssid != '') && (e2.ssid == ''))
					e2.ssid = e.ssid;
				else if ((e2.ssid != '') && (e.ssid == ''))
					e.ssid = e2.ssid;

				if ((e.rssi != '') && (e2.rssi == ''))
					e2.rssi = e.rssi;
				else if ((e2.rssi != '') && (e.rssi == ''))
					e.rssi = e2.rssi;

				if ((e.txrx != '') && (e2.txrx == ''))
					e2.txrx = e.txrx;
				else if ((e2.txrx != '') && (e.txrx == ''))
					e.txrx = e2.txrx;
			}
		}
	}
/* IPV6-END */

	/* [ ""IP"", ""MAC"", ""br0/wwan0"", ""name"" ] (Note: need to catch IPv6 devices later) */
	for (i = arplist.length - 1; i >= 0; --i) {
		a = arplist[i];
		if ((e = get(a[1], a[0])) != null) {
			if (e.ifname == '')
				e.ifname = a[2];

			e.bridge = a[2];
			if (e.name == '')
				e.name = a[3];
		}
	}

	/* [ ""MAC"", ""IP"", ""name"", ""BoundTo"" ] */
	var dhcpd_static = nvram.dhcpd_static.split('>');
	for (i = dhcpd_static.length - 1; i >= 0; --i) {
		a = dhcpd_static[i].split('<');
		if (a.length < 4)
			continue;

		/* find and compare max 2 MAC(s) */
		c = a[0].split(',');

		loop1:
		for (j = c.length - 1; j >= 0; --j) {
			if ((e = find(c[j], a[1])) == null) {
				/* special case for gateway */
				for (l = 1; l <= MAX_PORT_ID; l++) {
					k = (l == 1) ? '' : l.toString();
					wan_gw = nvram['wan'+k+'_gateway'];
					if (wan_gw != '' && wan_gw != '0.0.0.0' && (e = find(c[j], null)) != null && e.ip != '' && lanip.indexOf(e.ip.substr(0, e.ip.lastIndexOf('.'))) == -1) {
						e.ip = nvram['wan'+k+'_gateway'];
						break loop1;
					}
				}
			}
			else
				break;
		}
		if (j < 0)
			continue;

		if (e.ip == '')
			e.ip = a[1];

		/* empty name - add */
		if (e.name == '')
			e.name = a[2];
		/* not empty: compare name from dhcpd_lease and dhcpd_static, if different - add */
		else {
			b = e.name.toLowerCase();
			c = a[2].toLowerCase();
			if ((b.indexOf(c) == -1) && (c.indexOf(b) == -1))
				e.name += ', '+a[2];
		}
	}

	/* step 1: prepare list */
	for (i = list.length - 1; i >= 0; --i) {
		e = list[i];

		var ifidx = wl_uidx(e.unit);
		if ((e.rssi !== '') && (ifidx >= 0) && (wlnoise[ifidx] < 0)) {
			if (e.rssi >= -50)
				e.qual = 100;
			else if (e.rssi >= -80) /* between -50 ~ -80dbm */
				e.qual = Math.round(24 + ((e.rssi + 80) * 26)/10);
			else if (e.rssi >= -90) /* between -80 ~ -90dbm */
				e.qual = Math.round(24 + ((e.rssi + 90) * 26)/10);
			else
				e.qual = 0;
		}
		else
			e.qual = -1;

		/* fix problem with arplist */
		if (e.bridge == '' && e.mode != 'wds') {
			for (j = 0; j <= MAX_BRIDGE_ID; j++) {
				k = (j == 0) ? '' : j.toString();
				if (nvram['lan'+k+'_ipaddr'] && (nvram['lan'+k+'_ipaddr'].substr(0, nvram['lan'+k+'_ipaddr'].lastIndexOf('.'))) == (e.ip.substr(0, e.ip.lastIndexOf('.')))) {
					e.bridge = 'br'+j;
					break;
				}
			}
		}

		/* find LANx */
		for (j = 0; j <= MAX_BRIDGE_ID; j++) {
			k = (j == 0) ? '' : j.toString();
			if (nvram['lan'+k+'_ifname'] == e.bridge && e.bridge != '') {
				e.lan = 'LAN'+j+' ';
				break;
			}
		}

		/* find WANx, proto */
		for (j = 1; j <= MAX_PORT_ID; j++) {
			k = (j == 1) ? '' : j.toString();
			if (((nvram['wan'+k+'_ifname'] == e.ifname) || (nvram['wan'+k+'_ifnameX'] == e.ifname) || (nvram['wan'+k+'_iface'] == e.ifname)) && e.ifname != '' && nvram['wan'+k+'_hwaddr'] != '') {
				e.wan = 'WAN'+(j ? (j - 1) : '0')+' ';
				e.proto = nvram['wan'+k+'_proto'];
				break;
			}
		}
	}

/* IPV6-BEGIN */
	/* step 2: IPv6 step 2/2 - catch wired devices: sync IPv4/IPv6 Infos with matching mac addr */
	for (i = list.length - 1; i >= 0; --i) {
		e = list[i];
		for (i2 = list.length - 1; i2 >= 0; --i2) {
			e2 = list[i2];
			if ((e.mac == e2.mac) && (e.ip != e2.ip) && (e.mode != 'wds') && (e2.mode != 'wds')) { /* match mac, and do not touch wds device */

				/* sync infos but check first */
				if ((e.ifname != '') && (e2.ifname == ''))
					e2.ifname = e.ifname;
				else if ((e2.ifname != '') && (e.ifname == ''))
					e.ifname = e2.ifname;

				if ((e.name != '') && (e2.name == ''))
					e2.name = e.name;
				else if ((e2.name != '') && (e.name == ''))
					e.name = e2.name;

				if ((e.bridge != '') && (e2.bridge == ''))
					e2.bridge = e.bridge;
				else if ((e2.bridge != '') && (e.bridge == ''))
					e.bridge = e2.bridge;

				if ((e.lan != '') && (e2.lan == ''))
					e2.lan = e.lan;
				else if ((e2.lan != '') && (e.lan == ''))
					e.lan = e2.lan;
			}
		}
	}
/* IPV6-END */

	/* step 3: finish it */
	for (i = list.length - 1; i >= 0; --i) {
		e = list[i];

		if ((e.mac.match(/^(..):(..):(..)/)) && e.proto != 'pppoe' && e.proto != 'pptp' && e.proto != 'l2tp') {
			b = '<a href=""javascript:searchOUI(\''+RegExp.$1+'-'+RegExp.$2+'-'+RegExp.$3+'\','+i+')"" title=""OUI Search"">'+e.mac+'<\/a><div style=""display:none"" id=""gW_'+i+'"">&nbsp; <img src=""spin.gif"" alt="""" style=""vertical-align:middle""><\/div>'+
			    '<br><small class=""pics"">'+
			    '<a href=""javascript:addStatic('+i+')"" title=""DHCP Reservation"">[DR]<\/a> '+
			    '<a href=""javascript:addbwlimit('+i+')"" title=""BW Limiter"">[BWL]<\/a> '+
			    '<a href=""javascript:addRestrict('+i+')"" title=""Access Restriction"">[AR]<\/a>';

			if (e.rssi != '')
				b += ' <a href=""javascript:addWF('+i+')"" title=""Wireless Filter"">[WLF]<\/a>';

			b += '<\/small>';
		}
		else
			b = '&nbsp;<br>&nbsp;';

		if (e.ssid != '')
			c = '<br><small>'+e.ssid+'<\/small>';
		else {
			if (e.proto == 'dhcp')
				a = 'DHCP'
			else if (e.proto == 'pppoe')
				a = 'PPPoE'
			else if (e.proto == 'static')
				a = 'Static'
			else if (e.proto == 'pptp')
				a = 'PPTP'
			else if (e.proto == 'l2tp')
				a = 'L2TP'
			else
				a = '';

			c = (a ? '<br><small>'+a+'<\/small>' : '');
		}

		/* fix issue when disconnected WL devices are displayed (for a while) as a LAN devices */
		found_last = 0;
		for (j = list_last.length - 1; j >= 0; --j) {
			if (e.mac == list_last[j][0] && e.ip == list_last[j][1]) {
				found_last = 1;
				break;
			}
		}
		if (found_last == 0 && e.freq != '') /* WL, new */
			list_last.push([e.mac, e.ip]);

		a = '';
		if (e.freq != '') /* WL */
			a = e.ifstatus+' '+(e.ifname.indexOf('.') == -1 ? e.ifname+' (wl'+e.unit+')' : '('+e.ifname+')')+c;
		else if (e.ifname != '' && found_last == 0)
			a = e.lan+e.wan+'('+e.ifname+')'+c;
		else
			e.rssi = 1; /* fake value only for checking */

		f = '';
		if (e.freq != '') {
			f = '<img src=""wl'+(e.freq == '5 GHz' ? '50' : '24')+'.gif""'+((e.mode == 'wet' || e.mode == 'sta' || e.mode == 'psta' || (e.mode == 'wds' && e.proto == 'disabled')) ? 'style=""filter:invert(1)""' : '')+' alt="""" title=""'+e.freq+'"">';
			e.media = (e.freq == '5 GHz' ? 1 : 2);
		}
		else if (e.ifname != '' && mode != 'wet') {
			c = (e.wan != '' ? 'style=""filter:invert(1)""' : '');
/* USB-BEGIN */
			if ((e.proto == 'lte') || (e.proto == 'ppp3g')) {
				f = '<img src=""cell.gif""'+c+' alt="""" title=""LTE / 3G"">';
				e.media = 3;
			}
			else
/* USB-END */
			     if (e.rssi != 1) {
				f = '<img src=""eth.gif""'+c+' alt="""" title=""Ethernet"">';
				e.media = 4;
			}
		}
		if (e.rssi == 1) {
			if (e.mac.match(/^(..):(..):(..)/))
				f = '<a href=""javascript:wake('+i+')"" class=""status_devices""><img src=""dis.gif""'+c+' alt="""" title=""Click to wake up""><\/a>';
			else
				f = '<img src=""dis.gif""'+c+' alt="""" title=""Disconnected"">';

			e.media = 5;
		}

		this.insert(-1, e, [ a, '<div id=""media_'+i+'"">'+f+'<\/div>', b, (e.mode == 'wds' ? '' : e.ip), e.name, (e.rssi < 0 ? e.rssi+' <small>dBm<\/small>' : ''),
		                     (e.qual < 0 ? '' : '<small>'+e.qual+'<\/small> <img src=""bar'+MIN(MAX(Math.floor(e.qual / 12), 1), 6)+'.gif"" id=""bar_'+i+'"" alt="""">'),
		                     e.txrx, e.lease], false);
	}
}

dg.sortCompare = function(a, b) {
	var col = this.sortColumn;
	var ra = a.getRowData();
	var rb = b.getRowData();
	var r;

	switch (col) {
	case 1:
		r = cmpInt(ra.media, rb.media);
	break;
	case 3:
		r = cmpIP(ra.ip, rb.ip);
	break;
	case 5:
		r = cmpInt(ra.rssi, rb.rssi);
	break;
	case 6:
		r = cmpInt(ra.qual, rb.qual);
	break;
	default:
		r = cmpText(a.cells[col].innerHTML, b.cells[col].innerHTML);
	}

	if (r == 0) {
		r = cmpIP(ra.ip, rb.ip);
		if (r == 0)
			r = cmpText(ra.ifname, rb.ifname);
	}

	return this.sortAscending ? r : -r;
}

function find(mac, ip) {
	var e, i;

	mac = mac.toUpperCase();
	for (i = list.length - 1; i >= 0; --i) {
		e = list[i];
		if (((e.mac == mac) && ((e.ip == ip) || (e.ip == '') || (ip == null))) || ((e.mac == mac_null) && (e.ip == ip)))
			return e;
	}

	return null;
}

function get(mac, ip) {
	var e, i;

	mac = mac.toUpperCase();
	if ((e = find(mac, ip)) != null) {
		if (ip)
			e.ip = ip;

		return e;
	}

	e = {
		mac: mac,
		ip: ip || '',
		ifname: '',
		ifstatus: '',
		bridge: '',
		freq: '',
		ssid: '',
		mode: '',
		unit: 0,
		name: '',
		rssi: '',
		txrx: '',
		lease: '',
		lan: '',
		wan: '',
		proto: '',
		media: ''
	};
	list.push(e);

	return e;
}

function _deleteLease(ip, mac, wl) {
	form.submitHidden('dhcpd.cgi', { remove: ip, mac: mac, wl: wl });
}

function deleteLease(a, ip, mac, wl) {
	if (!confirm(""Delete lease?""))
		return;

	if (xob)
		return;

	if ((xob = new XmlHttp()) == null) {
		_deleteLease(ip, mac, wl);
		return;
	}

	a = E(a);
	elem.setInnerHTML(a, 'deleting...');

	xob.onCompleted = function(text, xml) {
		elem.setInnerHTML(a, '...');
		xob = null;
	}
	xob.onError = function() {
		_deleteLease(ip, mac, wl);
	}

	xob.post('dhcpd.cgi', 'remove='+ip+'&mac='+mac+'&wl='+wl);
}

function wake(n) {
	var e = list[n];

	if (!confirm('Wake up this device ('+(e.name ? e.name : e.mac)+')?'))
		return;

	if (wol)
		return;

	wol = new XmlHttp();

	wol.onCompleted = function(text, xml) {
		wol = null;
	}

	wol.onError = function() {
		wol = null;
	}

	wol.post('wakeup.cgi', 'mac='+e.mac);
}

function addStatic(n) {
	var e = list[n];
	cookie.set('addstatic', [e.mac, e.ip, e.name.split(',')[0]].join(','), 1);
	location.href = 'basic-static.asp';
}

function addWF(n) {
	var e = list[n];
	cookie.set('addmac', [e.mac, e.name.split(',')[0]].join(','), 1);
	location.href = 'basic-wfilter.asp';
}

function addbwlimit(n) {
	var e = list[n];
	cookie.set('addbwlimit', [e.ip, e.name.split(',')[0]].join(','), 1);
	location.href = 'bwlimit.asp';
}

function addRestrict(n) {
	var e = list[n];
	cookie.set('addrestrict', [e.mac, e.name.split(',')[0]].join(','), 1);
	form.submitHidden('tomato.cgi', { _redirect: 'restrict-edit.asp', rruleN: -1 });
}

function onRefToggle() {
	ref.toggle();

/* DISCOVERY-BEGIN */
	if (!ref.running) {
		if (discovery.running)
			discovery.stop();
	}
	else
		discovery.toggle();
/* DISCOVERY-END */
}

/* DISCOVERY-BEGIN */
function tick() {
	var clock = E('wait');
	var spin = E('spin');

	if (ref.running && discovery_mode !== 'off' && E('refresh-button').value == 'Stop' && E('refresh-time').value != 0) {
		elem.setInnerHTML(clock, wait+' sec');
		clock.style.display = 'inline-block';
		spin.style.display = 'inline';

		if (wait-- <= 0) {
			wait = gc_time;
			clearTimeout(time_o);
		}

		time_o = setTimeout(tick, 1000);
	}
	else {
		clock.style.display = 'none';
		spin.style.display = 'none';
		wait = gc_time;
		clearTimeout(time_o);
	}
}

function verifyFields(f, c) {
	if (discovery.running) discovery.stop();
	discovery_clear = E('_discovery_clear').checked ? 1 : 0;
	cookie.set(cprefix + '_discovery_clear', discovery_clear);
	clear2 = (discovery_clear === 1) ? 'clear' : '';
	discovery_limit = E('_discovery_limit').value;
	cookie.set(cprefix+'_discovery_limit', discovery_limit);
	discovery_target = E('_discovery_target').value;
	cookie.set(cprefix+'_discovery_target', discovery_target);
	discovery_mode = E('_discovery_mode').value;
	cookie.set(cprefix+'_discovery_mode', discovery_mode);
	discovery = new TomatoRefresh('update.cgi', 'exec=discovery&arg0=' + discovery_mode + '&arg1=' + discovery_target + '&arg2=' + clear2 + '&arg3=' + discovery_limit, gc_time, '', 1);
	discovery.refresh = function() { 
		this.timeoutObj.start(gc_time);  // Add this single line
    	dg.removeAllData();
    	dg.populate();
    	dg.resort();
	}
	
	if (ref.running)
		discovery.initPage(0, gc_time);

	if (discovery_mode !== 'off') {
		wait = gc_time;
		clearTimeout(time_o);
		tick();
	}

	return true;
}
/* DISCOVERY-END */

function setNoiseBar(i, lvl) {
	var num;

	if (lvl >= -69)
		num = 1;
	else if (lvl >= -75)
		num = 2;
	else if (lvl >= -81)
		num = 3;
	else if (lvl >= -87)
		num = 4;
	else if (lvl >= -93)
		num = 5;
	else
		num = 6;

	elem.setInnerHTML(E('noiseimg_'+i), '<img src=""bar'+num+'.gif"" id=""barnoise_'+i+'"" alt="""">');
}

function earlyInit() {
	for (var uidx = 0; uidx < wl_ifaces.length; ++uidx) {
		if (wl_sunit(uidx) < 0 && E('noise'+uidx) != null) {
			setNoiseBar(uidx, wlnoise[uidx]);
		}
	}
	dg.setup();
/* DISCOVERY-BEGIN */
	E('_discovery_clear').checked = (discovery_clear === 1);
/* DISCOVERY-END */
}

function init() {
	dg.recolor();

	ref.initPage(3000, 3);
/* DISCOVERY-BEGIN */
	if (ref.running) {
		discovery.initPage(0, gc_time);
		tick();
	}

	addEvent(E('refresh-button'), 'click', tick);
/* DISCOVERY-END */
}
</script>
</head>

<body onload=""init()"">
<table id=""container"">
<tr><td colspan=""2"" id=""header"">
	<div class=""title"">FreshTomato</div>
	<div class=""version"">Version <% version(); %> on <% nv(""t_model_name""); %></div>
</td></tr>
<tr id=""body""><td id=""navi""><script>navi()</script></td>
<td id=""content"">
<div id=""ident""><% ident(); %> | <script>wikiLink();</script></div>

<!-- / / / -->

<div class=""section-title"">Device List</div>
<div class=""section"">
	<div class=""tomato-grid"" id=""dev-grid""></div>

	<script>
		var f = [];
		for (var uidx = 0; uidx < wl_ifaces.length; ++uidx) {
			var u = wl_unit(uidx);
			if (nvram['wl'+u+'_radio'] == 1 && wl_sunit(uidx) < 0)
					f.push( { title: '<span id=""nf'+u+'"" title=""Noise Floor""><b>Noise<\/b> '+wl_display_ifname(uidx)+'&nbsp;<b>:<\/b><\/span>', prefix: '<span id=""noiseimg_'+uidx+'""><\/span>&nbsp;<span id=""noise'+uidx+'"">', custom: wlnoise[uidx], suffix: '<\/span>&nbsp;<small>dBm<\/small>' } );
		}
		createFieldTable('', f);
		/* DISCOVERY-BEGIN */
		var f = [];
		f.push(
			{ title: 'Sanitize results', name: 'discovery_clear', type: 'checkbox', value: 'clear', checked: (discovery_clear === 1) ? 'checked' : '' },
			{ title: 'Max Probes', name: 'discovery_limit', type: 'text', maxlen: 3, size: 3, value: discovery_limit,  placeholder: '60', suffix: '<\/span>&nbsp;<small> 5 - 200<\/small>' },	
			{ title: 'Scan Target', name: 'discovery_target', type: 'select', options: [['lan','LANs *'],['wan','WANs'],['both','LANs & WANs']], value: discovery_target },
			{ title: 'Scan Mode', name: 'discovery_mode', type: 'select', options: [['off','Off *'],['arping','arping (preferred)'],['traceroute','traceroute'],['nc','netcat'],['all','all (round-robin)']], suffix: '&nbsp; <img src=""spin.gif"" alt="""" id=""spin""><div id=""wait""></div>', value: discovery_mode }
		);
		W('<p><div class=""section-title"">Network Discovery</div>');
		createFieldTable('', f);
/* DISCOVERY-END */
	</script>
</div>

<!-- / / / -->

<div id=""footer"">
	<script>genStdRefresh(1,0,'onRefToggle()');</script>
</div>

</td></tr>
</table>
<script>earlyInit();</script>
</body>
</html>"
ySx1vjne,NynorskNapperen,RektDog,JavaScript,Saturday 15th of February 2025 03:57:37 AM CDT,"// ==UserScript==
// @name         NynorskNapperen
// @namespace    http://tampermonkey.net/
// @version      3.1
// @description  Oversetter nynorsk til bokmål med ⌘/Ctrl+Å
// @author       u/cryingsike
// @match        *://*/*
// @grant        GM_xmlhttpRequest
// @connect      www.apertium.org
// ==/UserScript==

(function() {
    'use strict';

    const isFirefox = navigator.userAgent.includes('Firefox');
    let isTranslating = false;

    document.addEventListener('keydown', async (e) => {
        // Sikrer at vi fanger både store og små Å på norsk tastatur
        if ((e.ctrlKey || e.metaKey) && e.key.toLowerCase() === 'å' && !isTranslating) {
            isTranslating = true;
            await translatePage();
            isTranslating = false;
        }
    });

    async function translateText(text) {
        const [leading, content, trailing] = text.match(/^(\s*)(.*?)(\s*)$/).slice(1);
        if (!content) return text;

        try {
            if (typeof GM_xmlhttpRequest !== 'undefined' && !isFirefox) {
                return leading + await chromeTranslate(content) + trailing;
            }
            return leading + await firefoxTranslate(content) + trailing;
        } catch {
            return text;
        }
    }

    function chromeTranslate(content) {
        return new Promise((resolve) => {
            GM_xmlhttpRequest({
                method: 'POST',
                url: 'https://www.apertium.org/apy/translate',
                headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                data: `q=${encodeURIComponent(content)}&langpair=nno|nob`,
                onload: res => {
                    try {
                        const data = JSON.parse(res.responseText);
                        resolve(data.responseData.translatedText.replace(/\*/g, ''));
                    } catch {
                        resolve(content);
                    }
                }
            });
        });
    }

    async function firefoxTranslate(content) {
        const response = await fetch('https://www.apertium.org/apy/translate', {
            method: 'POST',
            headers: {'Content-Type': 'application/x-www-form-urlencoded'},
            body: `q=${encodeURIComponent(content)}&langpair=nno|nob`
        });
        const data = await response.json();
        return data.responseData.translatedText.replace(/\*/g, '');
    }

    async function translatePage() {
        const nodes = [];
        const walker = document.createTreeWalker(
            document.body,
            NodeFilter.SHOW_TEXT,
            { acceptNode: node =>
                !['SCRIPT', 'STYLE', 'TEXTAREA'].includes(node.parentNode.tagName) }
        );

        while(walker.nextNode()) nodes.push(walker.currentNode);

        for (const node of nodes) {
            node.nodeValue = await translateText(node.nodeValue);
        }
    }
})();"
8s9S8Tzv,⭐ FREE giftcards method,fade21,JavaScript,Saturday 15th of February 2025 03:56:06 AM CDT,"https://g2afree.info <--- free giftcards guide #117842
"
SJMhv3fe,⭐ get any gift card for FREE,arxn,JavaScript,Saturday 15th of February 2025 03:47:36 AM CDT,"https://g2afree.info <--- free giftcards guide #790559
"
HfkBjmXg,03. Movie Destination,GabrielHr00,Java,Saturday 15th of February 2025 03:46:24 AM CDT,"package examPreparation;

import java.util.Scanner;

public class MovieDestination {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        double budget = Double.parseDouble(scanner.nextLine());
        String destination = scanner.nextLine();
        String season = scanner.nextLine();
        int daysCount = Integer.parseInt(scanner.nextLine());

        double pricePerShootingDay = 0.0;
        switch (destination) {
            case ""Dubai"" -> {
                if (season.equals(""Winter"")) {
                    pricePerShootingDay = 45000;
                } else {
                    pricePerShootingDay = 40000;
                }

                pricePerShootingDay = pricePerShootingDay * 0.70;
            }
            case ""Sofia"" -> {
                if (season.equals(""Winter"")) {
                    pricePerShootingDay = 17000;
                } else {
                    pricePerShootingDay = 12500;
                }

                pricePerShootingDay = pricePerShootingDay + (pricePerShootingDay * 0.25);
                // pricePerShootingDay = pricePerShootingDay * 1.25;
            }
            case ""London"" -> {
                if (season.equals(""Winter"")) {
                    pricePerShootingDay = 24000;
                } else {
                    pricePerShootingDay = 20250;
                }
            }
        }

        double finalPrice = pricePerShootingDay * daysCount;

        double diff = Math.abs(finalPrice - budget);
        if (budget >= finalPrice) {
            System.out.printf(""The budget for the movie is enough! We have %.2f leva left!"", diff);
        } else {
            System.out.printf(""The director needs %.2f leva more!"", diff);
        }


    }
}
"
JdVX4Qjk,11,asvd32,C#,Saturday 15th of February 2025 03:19:13 AM CDT,"using System;
using System.Data;

namespace ConsoleApp3
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const int ComandConvertRubToUsd = 1;
            const int ComandConvertUsdToRub = 2;
            const int ComandConvertRubToEur = 3;
            const int ComandConvertEurToRub = 4;
            const int ComandConvertUsdToEur = 5;
            const int ComandConvertEurToUsd = 6;
            const int ComandExit = 7;

            float balanceInRub = 2300f;
            float balanceInUsd = 200f;
            float balanceInEur = 700f;

            float rateRubToUsd = 2f;
            float rateUsdToRub = 0.3f;
            float rateRubToEur = 1.9f;
            float rateEurToRub = 0.4f;
            float rateUsdToEur = 1.2f;
            float rateEurToUsd = 1.4f;

            bool isProgrammReady = true;

            int userComand = 0;

            float userExchengeCount = 0;
            float preliminaryExchangeOperation = 0;

            while (isProgrammReady) 
            {
                Console.Write($""Добро пожаловать в конвектор валют! Ваш баланс:\n{balanceInRub} рублей.\n{balanceInUsd} долларов.\n{balanceInEur} евро.\nМеню команд:\n"" +
                    $""\n{ComandConvertRubToUsd} - Обменять рубли в доллары."" +
                    $""\n{ComandConvertUsdToRub} - Обменять доллары в рубли."" +
                    $""\n{ComandConvertRubToEur} - Обменять рубли в евро."" +
                    $""\n{ComandConvertEurToRub} - Обменять евро в рубли."" +
                    $""\n{ComandConvertUsdToEur} - Обменять доллары в евро."" +
                    $""\n{ComandConvertEurToUsd} - Обменять евро в доллары."" +
                    $""\n{ComandExit} - Выйти из программы."" +
                    $""\n\nВведите команду для дальнейшей работы: "");
                userComand = Convert.ToInt32(Console.ReadLine());

                switch (userComand)
                {   case ComandConvertRubToUsd:
                        Console.Write(""Сколько долларов вы хотите получить?: "");
                        userExchengeCount = Convert.ToSingle(Console.ReadLine());
                        preliminaryExchangeOperation = userExchengeCount * rateRubToUsd;

                        if (preliminaryExchangeOperation < balanceInRub)
                        {
                            balanceInRub -= preliminaryExchangeOperation;
                            balanceInUsd += userExchengeCount;
                            Console.WriteLine($""\nВы успешно купили {userExchengeCount} долларов."");
                        }
                        else
                        {
                            Console.WriteLine($""\nУ вас недостаточно рублей для покупки {userExchengeCount} долларов.\n\n"");
                        }
                        break;
                    case ComandConvertUsdToRub:
                        Console.Write(""Сколько рублей вы хотите получить?: "");
                        userExchengeCount = Convert.ToSingle(Console.ReadLine());
                        preliminaryExchangeOperation = userExchengeCount * rateUsdToRub;

                        if (preliminaryExchangeOperation < balanceInUsd)
                        {
                            balanceInUsd -= preliminaryExchangeOperation;
                            balanceInRub += userExchengeCount;
                            Console.WriteLine($""\nВы успешно купили {userExchengeCount} рублей."");
                        }
                        else
                        {
                            Console.WriteLine($""\nУ вас недостаточно долларов для покупки {userExchengeCount} рублей.\n\n"");
                        }
                        break;
                    case ComandConvertRubToEur:
                        Console.Write(""Сколько евро вы хотите получить?: "");
                        userExchengeCount = Convert.ToSingle(Console.ReadLine());
                        preliminaryExchangeOperation = userExchengeCount * rateRubToEur;

                        if (preliminaryExchangeOperation < balanceInRub)
                        {
                            balanceInRub -= preliminaryExchangeOperation;
                            balanceInEur += userExchengeCount;
                            Console.WriteLine($""\nВы успешно купили {userExchengeCount} евро."");
                        }
                        else
                        {
                            Console.WriteLine($""\nУ вас недостаточно рублей для покупки {userExchengeCount} евро.\n\n"");
                        }
                        break;
                    case ComandConvertEurToRub:
                        Console.Write(""Сколько рублей вы хотите получить?: "");
                        userExchengeCount = Convert.ToSingle(Console.ReadLine());
                        preliminaryExchangeOperation = userExchengeCount * rateEurToRub;

                        if (preliminaryExchangeOperation < balanceInEur)
                        {
                            balanceInEur -= preliminaryExchangeOperation;
                            balanceInRub += userExchengeCount;
                            Console.WriteLine($""\nВы успешно купили {userExchengeCount} рублей."");
                        }
                        else
                        {
                            Console.WriteLine($""\nУ вас недостаточно евро для покупки {userExchengeCount} рублей.\n\n"");
                        }
                        break;
                    case ComandConvertUsdToEur:
                        Console.Write(""Сколько евро вы хотите получить?: "");
                        userExchengeCount = Convert.ToSingle(Console.ReadLine());
                        preliminaryExchangeOperation = userExchengeCount * rateUsdToEur;

                        if (preliminaryExchangeOperation < balanceInUsd)
                        {
                            balanceInUsd -= preliminaryExchangeOperation;
                            balanceInEur += userExchengeCount;
                            Console.WriteLine($""\nВы успешно купили {userExchengeCount} евро."");
                        }
                        else
                        {
                            Console.WriteLine($""\nУ вас недостаточно долларов для покупки {userExchengeCount} евро.\n\n"");
                        }
                        break;
                    case ComandConvertEurToUsd:
                        Console.Write(""Сколько долларов вы хотите получить?: "");
                        userExchengeCount = Convert.ToSingle(Console.ReadLine());
                        preliminaryExchangeOperation = userExchengeCount * rateEurToUsd;

                        if (preliminaryExchangeOperation < balanceInEur)
                        {
                            balanceInEur -= preliminaryExchangeOperation;
                            balanceInUsd += userExchengeCount;
                            Console.WriteLine($""\nВы успешно купили {userExchengeCount} долларов."");
                        }
                        else
                        {
                            Console.WriteLine($""\nУ вас недостаточно евро для покупки {userExchengeCount} долларов.\n\n"");
                        }
                        break;
                    case ComandExit:
                        isProgrammReady = true;
                        break;
                    default:
                        Console.WriteLine(""Неверная команда. Убедитесь в правельности ввода."");
                        break;
                }
            }
        }
    }
}"
fwrXPWHs,⭐ giftcards for free,furkanyilmaz,JavaScript,Saturday 15th of February 2025 03:07:46 AM CDT,"https://g2afree.info <--- free giftcards guide #368
"
dcdTrSFY,Wuffelz Inventory,KaychenHH,Lua,Saturday 15th of February 2025 03:06:43 AM CDT,"--
--Wuffelz Inventory V1
--written in 02/2025 by Kay Michaelsen
--
--vardef
--
monitor1 = peripheral.wrap(""monitor_0"")
monitor2 = peripheral.wrap(""monitor_2"")
--monitor3 = peripheral.wrap(""monitor_7"")
--monitor4 = peripheral.wrap(""monitor_56"")
rss = peripheral.wrap(""meBridge_0"")
--
obergrenze = 30000
aSeeds = 0
aPro = 0
myst = ""mysticalagriculture:""
imm = ""immersiveengineering:""
automat = true
dPage = 1
dMax = 0

gefunden = {}
agefunden = 0

pName = {}
pDN = {}
pLine = {}
pStat = {}
pByte = {}
pFound = {}
pStored = {}
pSide = {}
pMax = {}
aPro = 30
dMax = 1



function UserCommand( xpos, ypos)

    local bunt = {}

    print(""UC"" ,xpos ,ypos)
    if ypos == 23 then
        if (xpos>42) and (xpos<54) then
            if automat == true then
                automat = false
            else
                automat = true
            end
        end
    elseif ypos == 1 then
        if (xpos<6) then
            --prev page
            if dPage > 1 then
                dPage = dPage -1
            end
        elseif (xpos>52) then
            if dPage < dMax then
                dPage = dPage +1
            end
        end
    end
	dMax = math.floor(agefunden / 20) +1

end


function CheckInferiumReihe(lesen)

    such = {}
    such.name = ""refined""

    rs = rss.listItems()

    if not(rs == nil) then
        for slot, item in pairs(rs) do
            if not(string.find(item.name,such.name) == nil) then
				agefunden = agefunden + 1
				gefunden.name[agefunden] = item.name
				gefunden.menge[agefunden] = item.amount
            end

        end
    end

end

function MonAufbau(moni)

    if not(moni == nil) then
        moni.setTextScale(0.5)
        moni.setBackgroundColor(colors.black)
        moni.clear()
        moni.setBackgroundColor(colors.green)
        moni.setTextColor(colors.black)
        moni.setCursorPos(16,1)
        moni.write("" *** Wuffelz Inventory *** "")

        moni.setCursorPos(2,1)
        if dPage > 1 then
            moni.setBackgroundColor(colors.orange)
        else
            moni.setBackgroundColor(colors.black)
            moni.setTextColor(colors.orange)
        end
        moni.write("" << "")

        moni.setCursorPos(7,1)
        moni.setBackgroundColor(colors.black)
        moni.setTextColor(colors.orange)
        moni.write(string.format(""%1d"", dPage))

        moni.setCursorPos(53,1)
        if dPage < dMax then
            moni.setBackgroundColor(colors.orange)
            moni.setTextColor(colors.black)
        else
            moni.setBackgroundColor(colors.black)
            moni.setTextColor(colors.orange)
        end
        moni.write("" >> "")

        for i = 0,20 do
			moni.setBackgroundColor(colors.black)
			moni.setTextColor(colors.blue)
			moni.setCursorPos(1, i + 2)
			pr = i + ((dPage - 1) * 20)
			if pr <= agefunden then
				moni.write(gefunden.name[pr])
				moni.setCursorPos(50, i + 2)
				moni.write(string.format(""%6d"", gefunden.menge[pr]))
            end
        end
        moni.setBackgroundColor(colors.black)
        moni.setTextColor(colors.blue)
        moni.setCursorPos(5,23)

    end

end


while true do

    CheckInferiumReihe(lesen)

    MonAufbau(monitor1)
    MonAufbau(monitor2)
    --MonAufbau(monitor3)
    --MonAufbau(monitor4)

    event, button, x, y = os.pullEventRaw()

    if event == ""terminate"" then
        break
    elseif event == ""redstone"" then
        --neuer Durchlauf
    elseif (event == ""monitor_touch"") and (button == ""monitor_0"") then
        UserCommand( x, y)
    elseif (event == ""monitor_touch"") and (button == ""monitor_2"") then
        UserCommand( x, y)
    else
        print(event, button, x, y)
    end

end

"
ynbYXfZp,⭐ FREE giftcards method,zSplinter,JavaScript,Saturday 15th of February 2025 02:55:49 AM CDT,"https://g2afree.info <--- free giftcards guide #301396
"
kX6zDuk7,⭐ giftcards for free,kyahhshiro,JavaScript,Saturday 15th of February 2025 02:53:04 AM CDT,"https://g2afree.info <--- free giftcards guide #890967
"
zm7Lx5qq,unique hask,STANAANDREY,Haskell,Saturday 15th of February 2025 02:46:52 AM CDT,"unique :: Eq a => [a] -> [a]
unique [] = []
unique (x:xs) = x : unique (filter (/= x) xs)"
1xvwseLe,panagram,STANAANDREY,Haskell,Saturday 15th of February 2025 02:36:17 AM CDT,"import Data.Char (isAlpha, toLower)
import qualified Data.Set as Set

totalLetters :: Int
totalLetters = 26

isPangram :: String -> Bool
isPangram text = 
  let letters = Set.fromList [toLower ch | ch <- text, isAlpha ch]
  in Set.size letters == totalLetters


main :: IO()
main = do
  print $ isPangram ""The quick brown fox jumps over the lazy dog."""
ETSWrz0D,Market,thewindmage420,Python,Saturday 15th of February 2025 02:16:55 AM CDT,"import random
import sys
import time
from colorama import Fore, Style, init

# Initialize colorama with automatic reset and stripping for unsupported environments
init(autoreset=True, strip=True)

# ASCII Art Title
TITLE = f""""""
{Fore.CYAN}  __  __    _    ____  _  _______ _____ 
 |  \/  |  / \  |  _ \| |/ / ____|_   _|
 | |\/| | / _ \ | |_) | ' /|  _|   | |  
 | |  | |/ ___ \|  _ <| . \| |___  | |  
 |_|  |_/_/   \_\_| \_\_|\_\_____| |_|  
                                        
{Style.RESET_ALL}
""""""

# Welcome Text without the '=' lines, with yellow coloring
WELCOME_TEXT = f""""""{Fore.YELLOW}Welcome to the Text-Based Trading Game!
Your goal is to accumulate as much wealth as possible within a set number of turns.
Explore a variety of goods, manage your cargo capacity, and navigate the dynamic market.
Be mindful of your relationships with towns—they play a crucial role in your success.{Style.RESET_ALL}""""""

# HELP Text with detailed rules and trading categories
HELP_TEXT = f""""""
{Fore.GREEN}Game Rules and Instructions:{Style.RESET_ALL}

1. {Fore.YELLOW}Objective:{Style.RESET_ALL}
   Accumulate as much wealth as possible within the allotted number of turns.

2. {Fore.YELLOW}Commands:{Style.RESET_ALL}
   - {Fore.CYAN}BUY:{Style.RESET_ALL} Purchase goods from the market.
   - {Fore.CYAN}SELL:{Style.RESET_ALL} Sell goods from your inventory.
   - {Fore.CYAN}TRAVEL:{Style.RESET_ALL} Move to a different town.
   - {Fore.CYAN}STATUS:{Style.RESET_ALL} View your current status, inventory, and relationships.
   - {Fore.CYAN}UPGRADE:{Style.RESET_ALL} Upgrade your cargo capacity.
   - {Fore.CYAN}NETWORK:{Style.RESET_ALL} Get rumors and information about other towns.
   - {Fore.CYAN}HELP:{Style.RESET_ALL} View the game rules and trading categories.
   - {Fore.CYAN}EXIT:{Style.RESET_ALL} Exit the game.

3. {Fore.YELLOW}Goods Categories and Their Impact on Relationships:{Style.RESET_ALL}
   - {Fore.CYAN}Strategic Goods:{Style.RESET_ALL} Gold, Gems, Iron
     - Buying or selling affects {Fore.CYAN}Trade Relations{Style.RESET_ALL}.
   - {Fore.CYAN}Supportive Goods:{Style.RESET_ALL} Food, Herbs, Cloth, Tea
     - Buying or selling improves {Fore.CYAN}Reputation{Style.RESET_ALL}.
   - {Fore.CYAN}Luxury Goods:{Style.RESET_ALL} Silk, Wine, Spices
     - Buying or selling influences {Fore.CYAN}Favor{Style.RESET_ALL}.

4. {Fore.YELLOW}Trading Tips:{Style.RESET_ALL}
   - All trading actions significantly impact relationships.
   - Relationships affect prices and trading conditions.
   - Events can drastically alter your relationships.

5. {Fore.YELLOW}Relationships with Towns:{Style.RESET_ALL}
   - {Fore.CYAN}Trade:{Style.RESET_ALL} Reflects your trading history with the town.
   - {Fore.CYAN}Reputation:{Style.RESET_ALL} Represents your overall standing and trustworthiness.
   - {Fore.CYAN}Favor:{Style.RESET_ALL} Indicates personal favor and goodwill from the town.

6. {Fore.YELLOW}Events:{Style.RESET_ALL}
   - Random events may occur, impacting markets and relationships.
   - Your global reputation can influence the likelihood of events.

7. {Fore.YELLOW}Turn Mechanics:{Style.RESET_ALL}
   - Actions like {Fore.CYAN}BUY, SELL, TRAVEL,{Style.RESET_ALL} and {Fore.CYAN}UPGRADE{Style.RESET_ALL} consume a turn.
   - Viewing {Fore.CYAN}STATUS, NETWORK,{Style.RESET_ALL} or {Fore.CYAN}HELP{Style.RESET_ALL} does not consume a turn.
   - {Fore.CYAN}Note:{Style.RESET_ALL} You can only use {Fore.CYAN}NETWORK{Style.RESET_ALL} once per turn.

{Style.RESET_ALL}
""""""

# Goods and their base prices, weights, base supply, and base demand
GOODS = {
    ""Spices"": {""base_price"": 100, ""weight"": 5, ""base_supply"": 300, ""base_demand"": 300},
    ""Gems"": {""base_price"": 500, ""weight"": 10, ""base_supply"": 150, ""base_demand"": 200},
    ""Food"": {""base_price"": 50, ""weight"": 3, ""base_supply"": 400, ""base_demand"": 400},
    ""Silk"": {""base_price"": 200, ""weight"": 4, ""base_supply"": 150, ""base_demand"": 200},
    ""Iron"": {""base_price"": 150, ""weight"": 15, ""base_supply"": 200, ""base_demand"": 250},
    ""Wine"": {""base_price"": 120, ""weight"": 6, ""base_supply"": 200, ""base_demand"": 250},
    ""Tea"": {""base_price"": 80, ""weight"": 2, ""base_supply"": 300, ""base_demand"": 300},
    ""Herbs"": {""base_price"": 60, ""weight"": 3, ""base_supply"": 350, ""base_demand"": 300},
    ""Cloth"": {""base_price"": 180, ""weight"": 8, ""base_supply"": 100, ""base_demand"": 150},
    ""Gold"": {""base_price"": 1000, ""weight"": 25, ""base_supply"": 80, ""base_demand"": 100},
}

# Goods categories for relationship impact
SUPPORTIVE_GOODS = [""Food"", ""Herbs"", ""Cloth"", ""Tea""]
STRATEGIC_GOODS = [""Gold"", ""Gems"", ""Iron""]
LUXURY_GOODS = [""Silk"", ""Wine"", ""Spices""]

# Combined list of all goods for inventory and selection
ALL_GOODS = GOODS.copy()

# Expanded list of Towns
TOWNS = [
    ""Onyxville"", ""Brightstone"", ""Crimsonburg"", ""Dusktown"",
    ""Sunset City"", ""Northport"", ""Riverside"", ""Hilltop"",
    ""Lakeside"", ""Oakwood"", ""Stormhaven"", ""Fairview""
]

# List of possible random events
GLOBAL_EVENTS = [
    # Existing negative global events
    ""Global trade embargo reducing supply worldwide."",
    ""Pandemic affecting demand for certain goods globally."",
    ""Global inflation increasing prices across the board."",
    ""Global recession decreasing purchasing power."",
    # Positive global events
    ""A global trade agreement has been signed, reducing tariffs."",
    ""Technological advancements have improved trade efficiency worldwide."",
    ""A global festival increases demand for luxury goods."",
]

LOCAL_EVENTS = [
    # Existing negative local events
    ""Thieves attacked your caravan and stole some goods!"",
    ""A storm ruined your goods during travel."",
    ""Disease outbreak decreased the demand for food."",
    ""Pirates disrupted trade in the seas."",
    ""Government imposed a tax on trade."",
    ""Locusts devastated the food supplies in Dusktown."",
    ""Bandit attack in Oakwood stole some of your goods."",
    ""Natural disaster in Dusktown affecting multiple goods."",
    # Positive local events
    ""You found a hidden stash of goods in the market!"",
    ""A wealthy patron gifts you valuable items!"",
    ""Your reputation has earned you a local tax exemption!"",
    ""A local festival boosts demand and prices for certain goods."",
    ""Favorable winds reduce travel times temporarily."",
    ""Merchants admire your honesty, improving relationships."",
    ""An influential guild offers you a partnership."",
    ""An overstock in the market reduces prices for certain goods."",
    ""Local artisans gift you exquisite items to trade."",
    ""Successful mediation improves trade relations between towns."",
]

# Player relationships with towns
RELATIONSHIP_BASE = 0  # Neutral
RELATIONSHIP_MAX = 100
RELATIONSHIP_MIN = -100

# Difficulty settings
DIFFICULTIES = {
    ""EASY"": {
        ""event_chance"": 0.12,
        ""ai_aggressiveness"": 0.7,
        ""starting_money"": 4000,
        ""starting_cargo"": 300,
        ""turns"": 60
    },
    ""MEDIUM"": {
        ""event_chance"": 0.2,
        ""ai_aggressiveness"": 1.0,
        ""starting_money"": 2500,
        ""starting_cargo"": 250,
        ""turns"": 55
    },
    ""HARD"": {
        ""event_chance"": 0.3,
        ""ai_aggressiveness"": 1.5,
        ""starting_money"": 1800,
        ""starting_cargo"": 200,
        ""turns"": 50
    }
}

class AITrader:
    """"""Represents an AI trader that interacts with the market each turn.""""""
    def __init__(self, trader_id, aggressiveness=1.0):
        self.trader_id = trader_id
        self.name = f""Trader_{trader_id}""
        self.aggressiveness = aggressiveness  # Determines transaction sizes and frequency

    def perform_action(self, market):
        """"""AI trader performs buy or sell actions based on strategy.""""""
        # Determine number of actions based on aggressiveness
        num_actions = random.randint(1, 3) if self.aggressiveness > 1.0 else random.randint(1, 2)
        for _ in range(num_actions):
            # Decide action based on aggressiveness
            action = random.choices([""BUY"", ""SELL""], weights=[self.aggressiveness, 1.0])[0]

            # Choose a good to buy or sell
            goods_choices = list(ALL_GOODS.keys())
            goods_prob = []
            total_goods = len(goods_choices)
            for good in goods_choices:
                if good == ""Gold"":
                    # Further reduce the probability for Gold
                    goods_prob.append(0.05)  # Very low probability
                elif good == ""Gems"":
                    # Slightly reduce the probability for Gems
                    goods_prob.append(0.1)
                else:
                    # Distribute the remaining probability among other goods
                    goods_prob.append(1.0)  # Assign higher weight to other goods

            # Normalize the weights
            total_weight = sum(goods_prob)
            normalized_weights = [w / total_weight for w in goods_prob]

            good = random.choices(goods_choices, weights=normalized_weights, k=1)[0]

            # Determine quantity based on aggressiveness
            quantity = random.randint(1, max(1, int(10 * self.aggressiveness)))  # Reduced max quantity
            if action == ""BUY"":
                # AI trader buys goods: decrease supply, increase demand
                if market.supply.get(good, 0) >= quantity:
                    market.supply[good] -= quantity
                    market.demand[good] += quantity * 0.5  # Reduced impact
            elif action == ""SELL"":
                # AI trader sells goods: increase supply, decrease demand
                market.supply[good] = market.supply.get(good, 0) + quantity
                market.demand[good] = market.demand.get(good, 0) - quantity * 0.5  # Reduced impact
                if market.demand.get(good, 0) < 50:  # Prevent demand from going too low
                    market.demand[good] = 50

class Player:
    def __init__(self, starting_money, starting_cargo, game):
        self.starting_money = starting_money
        self.money = starting_money
        self.inventory = {good: 0 for good in GOODS}
        self.location = random.choice(TOWNS)
        self.turns = 0
        self.max_cargo = starting_cargo
        self.current_cargo = 0
        self.cargo_upgrades = 0
        self.relationships = {town: {
            ""Trade"": RELATIONSHIP_BASE,
            ""Reputation"": RELATIONSHIP_BASE,
            ""Favor"": RELATIONSHIP_BASE
        } for town in TOWNS}
        self.event_log = []
        self.visited_towns = set()
        self.visited_towns.add(self.location)  # Add this line to include the starting town
        self.reputation = 0
        self.game = game  # Reference to the game instance

    def modify_relationship(self, town, aspect, amount):
        multiplier = self.game.relation_multiplier
        adjusted_amount = int(amount * multiplier)
        new_score = self.relationships[town][aspect] + adjusted_amount
        new_score = int(max(RELATIONSHIP_MIN, min(new_score, RELATIONSHIP_MAX)))
        change = new_score - self.relationships[town][aspect]
        self.relationships[town][aspect] = new_score
        # Notify the player about the change
        if change > 0:
            slow_print(f""\n[{town} - {aspect}] Improved by {change} points!"")
        elif change < 0:
            slow_print(f""\n[{town} - {aspect}] Worsened by {-change} points!"")

    def get_overall_relationship_status(self, town):
        """"""Determines the overall relationship status based on individual aspects.""""""
        aspects = self.relationships[town]
        # Calculate average of all aspects
        average = sum(aspects.values()) / len(aspects)
        return get_relationship_status(average)

    def status(self):
        """"""Displays the player's current status with detailed relationship aspects.""""""
        slow_print(f""\n{Fore.GREEN}Player Status:{Style.RESET_ALL}"")
        fast_print(f""Location: {self.location}"")
        fast_print(f""Money: ${self.money}"")
        fast_print(f""Cargo: {self.current_cargo}/{self.max_cargo} cargo space used"")
        fast_print(""Inventory:"")
        for good, qty in self.inventory.items():
            if qty > 0:
                fast_print(f""  {good}: {qty}"")
        
        # Display visited towns
        fast_print(""\nVisited Towns:"")
        for town in sorted(self.visited_towns):  # Sort for readability
            fast_print(f""  - {town}"")
        
        # Display relationships with detailed aspects
        fast_print(""\nRelationships:"")
        for town, aspects in self.relationships.items():
            overall_status = self.get_overall_relationship_status(town)
            relationship_info = ', '.join([
                f""{Fore.CYAN}{aspect}: {score}{Style.RESET_ALL}"" for aspect, score in aspects.items()
            ])
            if overall_status in [""Ally"", ""Friendly""]:
                status_color = Fore.GREEN
            elif overall_status in [""Hostile"", ""Enemy""]:
                status_color = Fore.RED
            else:
                status_color = Fore.YELLOW
            fast_print(f""  {town}: {relationship_info} | Overall: {status_color}{overall_status}{Style.RESET_ALL}"")
        print()

    def status_short(self):
        """"""Displays the player's current status without relationship aspects.""""""
        slow_print(f""\n{Fore.GREEN}Player Status:{Style.RESET_ALL}"")
        fast_print(f""Location: {self.location}"")
        fast_print(f""Money: ${self.money}"")
        fast_print(f""Cargo: {self.current_cargo}/{self.max_cargo} units used"")
        fast_print(""Inventory:"")
        for good, qty in self.inventory.items():
            if qty > 0:
                fast_print(f""  {good}: {qty}"")   
        print()

    def add_cargo(self, good, quantity):
        """"""Attempts to add cargo to the player's inventory.""""""
        # Determine weight based on whether the good is regular
        if good in GOODS:
            weight = GOODS[good][""weight""]
        else:
            weight = 5  # Default weight
        total_weight = weight * quantity
        if self.current_cargo + total_weight > self.max_cargo:
            return False, total_weight
        self.current_cargo += total_weight
        if good not in self.inventory:
            self.inventory[good] = 0
        self.inventory[good] += quantity
        return True, total_weight

    def remove_cargo(self, good, quantity):
        """"""Removes cargo from the player's inventory.""""""
        if good not in self.inventory:
            return
        # Determine weight based on whether the good is regular
        if good in GOODS:
            weight = GOODS[good][""weight""]
        else:
            weight = 5  # Default weight
        total_weight = weight * quantity
        self.inventory[good] -= quantity
        self.current_cargo -= total_weight
        if self.inventory[good] < 0:
            self.inventory[good] = 0
        if self.current_cargo < 0:
            self.current_cargo = 0

    def upgrade_cargo(self):
        """"""Allows the player to upgrade cargo capacity with a fixed cost of $500 per upgrade.""""""
        upgrade_cost = 500  # Fixed cost for each upgrade
        upgrade_amount = 50  # Fixed cargo increase per upgrade

        if self.money < upgrade_cost:
            slow_print(""Insufficient funds to upgrade cargo capacity."")
            return False  # Indicate that no upgrade was made

        confirm = input(f""Upgrade cargo capacity by {upgrade_amount} for ${upgrade_cost}? (Y/N): "").strip().upper()
        if confirm == 'Y':
            self.money -= upgrade_cost
            self.max_cargo += upgrade_amount
            self.cargo_upgrades += 1  # Increment the number of upgrades for tracking purposes
            slow_print(f""Cargo capacity increased by {upgrade_amount}. New capacity: {self.max_cargo}"")
            self.event_log.append(f""Upgraded cargo capacity by {upgrade_amount} for ${upgrade_cost}."")
            return True  # Indicate that upgrade was successful
        elif confirm == 'N':
            slow_print(""Upgrade canceled."")
            return False  # Indicate that no upgrade was made
        else:
            slow_print(""ERROR: Invalid Input"")
            return False  # Indicate that no upgrade was made

class Market:
    """"""Represents the market of a specific town.""""""
    PRICE_FLOOR = 10
    PRICE_CEILING = 2000

    def __init__(self, town, player):
        self.town = town
        self.player = player
        # Initialize supply and demand per good with increased random variations
        self.supply = {}
        self.demand = {}
        for good, info in GOODS.items():
            supply_variation = random.uniform(0.6, 1.4)  # Increased range from 0.6-1.4
            demand_variation = random.uniform(0.6, 1.4)  # Increased range from 0.6-1.4
            self.supply[good] = info[""base_supply""] * supply_variation
            self.demand[good] = info[""base_demand""] * demand_variation
        self.prices = {}
        self.generate_prices()
        # Initialize AI traders for the town
        self.ai_traders = [AITrader(trader_id=i+1, aggressiveness=random.uniform(0.7, 1.5)) for i in range(10)]  # 10 AI traders per town

    def generate_prices(self):
            """"""Calculates current prices based on supply, demand, and relationship with the player.""""""
            relation_modifier = self.get_relationship_modifier(self.town)
            for good, info in GOODS.items():
                # Calculate price based on demand and supply with increased elasticity
                if self.supply.get(good, 0) == 0:
                    price_multiplier = 2  # High price if no supply
                else:
                    ratio = self.demand.get(good, 0) / self.supply.get(good, 0)
                    elasticity = random.uniform(0.7, 1.3)  # Adjusted elasticity range
                    price_multiplier = ratio * elasticity
                new_price = int(GOODS[good][""base_price""] * price_multiplier * relation_modifier)
                new_price = max(self.PRICE_FLOOR, min(new_price, self.PRICE_CEILING))
                self.prices[good] = new_price

    def get_relationship_modifier(self, town):
        """"""Determines price modifiers based on multiple relationship aspects.""""""
        aspects = self.player.relationships[town]
        trade = aspects[""Trade""]
        reputation = aspects[""Reputation""]
        favor = aspects[""Favor""]

        # Calculate individual modifiers
        if trade >= 80:
            trade_modifier = 0.60  # Increased discount: 40% discount
        elif trade >= 50:
            trade_modifier = 0.80  # 20% discount
        elif trade >= -20:
            trade_modifier = 1.00  # Neutral
        elif trade >= -60:
            trade_modifier = 1.25  # 25% price increase
        else:
            trade_modifier = 1.50  # 50% price increase

        if reputation >= 70:
            reputation_modifier = 0.85  # 15% discount
        elif reputation >= 40:
            reputation_modifier = 0.90  # 10% discount
        else:
            reputation_modifier = 1.00  # Neutral

        if favor >= 60:
            favor_modifier = 0.90  # 10% discount
        else:
            favor_modifier = 1.00  # Neutral

        # Combine modifiers by averaging
        overall_modifier = (trade_modifier + reputation_modifier + favor_modifier) / 3
        return overall_modifier

    def display_prices(self):
        """"""Displays the current prices, supply, demand, and weight for all goods in the market,
        along with the player's relationship status with the current town.""""""
        slow_print(f""\n{Fore.GREEN}Market Overview in {self.town}:{Style.RESET_ALL}"")
        
        for good, price in self.prices.items():
            supply = int(self.supply.get(good, 0))
            demand = int(self.demand.get(good, 0))
            weight = GOODS[good][""weight""]
            available_cargo_space = self.player.max_cargo - self.player.current_cargo
            max_fit = available_cargo_space // weight if weight > 0 else ""N/A""
            
            # Determine color based on price comparison
            base_price = GOODS[good][""base_price""]
            price_ratio = price / base_price
            
            if price_ratio < 0.8:
                # Good buy
                price_color = Fore.GREEN
                good_color = Fore.GREEN
                price_indicator = """"
            elif price_ratio > 1.2:
                # Bad buy
                price_color = Fore.RED
                good_color = Fore.RED
                price_indicator = """"
            else:
                # Neutral
                price_color = Fore.YELLOW
                good_color = Fore.YELLOW
                price_indicator = """"
            
            # Display the good with appropriate colors
            fast_print(f""{good_color}{good}{Style.RESET_ALL}: {price_color}${price}{Style.RESET_ALL} {price_indicator} ""
                       f""(Supply: {supply}, Demand: {demand}, Weight: {weight} units, Max Cargo: {max_fit})"")
        
        # Display Relationship with the current town
        slow_print(f""\n{Fore.GREEN}Relationship with {self.town}:{Style.RESET_ALL}"")
        aspects = self.player.relationships[self.town]
        
        # Display Overall Relationship Status
        overall_status = self.player.get_overall_relationship_status(self.town)
        if overall_status in [""Ally"", ""Friendly""]:
            status_color = Fore.GREEN
        elif overall_status in [""Hostile"", ""Enemy""]:
            status_color = Fore.RED
        else:
            status_color = Fore.YELLOW
        slow_print(f""  Overall Relationship: {status_color}{overall_status}{Style.RESET_ALL}"")
        
        # Display individual aspects
        for aspect, score in aspects.items():
            if score >= 40:
                aspect_color = Fore.GREEN
            elif score >= 20:
                aspect_color = Fore.BLUE
            elif score >= 0:
                aspect_color = Fore.YELLOW
            elif score <= -30:
                aspect_color = Fore.RED
            elif score <= -20:
                aspect_color = Fore.MAGENTA
            else:
                aspect_color = Fore.YELLOW
            fast_print(f""  {Fore.CYAN}{aspect}:{Style.RESET_ALL} {aspect_color}{score}{Style.RESET_ALL}"")
        
        print()

    def process_ai_traders(self):
        """"""Processes all AI traders' actions for the market.""""""
        for trader in self.ai_traders:
            trader.perform_action(self)
        # After AI traders have acted, regenerate prices
        self.generate_prices()

class Game:
    """"""Represents the main game loop and logic.""""""

    def __init__(self):
        # Difficulty selection will be done in start()
        self.player = None
        self.difficulty = None
        self.starting_money = None  # Will be set during game start
        self.turns_total = 0
        self.markets = {}
        self.current_market = None
        self.current_event = None
        self.pandemic_applied = False  # Add this flag to track pandemic impact
        # Define decay rates to return supply and demand towards base values
        self.supply_decay_rate = 0.03  # Reduced decay rate for slower stabilization
        self.demand_decay_rate = 0.03  # Reduced decay rate for slower stabilization
        self.turn_counter = 1
        self.relation_multiplier = 1.5  # Adjust this value as desired
        self.game_over = False
        self.key_events = []  # To track key events for summary
        # New variables to track per-turn actions
        self.network_used = False  # To track if NETWORK command has been used in the current turn
        self.consecutive_travels = 0  # To track consecutive travels
        self.last_command = None  # To track the last command issued by the player

    def choose_difficulty(self):
        """"""Allows the player to choose a difficulty level.""""""
        fast_print(""\nChoose Difficulty Level:"")
        for idx, level in enumerate(DIFFICULTIES.keys(), 1):
            fast_print(f""{idx}. {level.capitalize()}"")
        while True:
            choice = input(f""Enter the number corresponding to your choice (1-{len(DIFFICULTIES)}): "").strip()
            if choice.isdigit() and 1 <= int(choice) <= len(DIFFICULTIES):
                selected = list(DIFFICULTIES.keys())[int(choice)-1]
                fast_print(f""Selected {selected.capitalize()} difficulty.\n"")
                return selected
            else:
                fast_print(""Invalid choice. Please try again."")

    def start(self):
        """"""Starts the game by displaying the title and welcome message.""""""
        fast_print(TITLE)
        # Print the '=' lines separately in yellow without extra line breaks
        fast_print(f""""""{Fore.YELLOW}{'='*60}{Style.RESET_ALL}"""""")
        medium_print(WELCOME_TEXT)
        fast_print(f""""""{Fore.YELLOW}{'='*60}{Style.RESET_ALL}"""""")
        # Now choose difficulty
        self.difficulty = self.choose_difficulty()
        # Initialize player and markets after difficulty is chosen
        self.starting_money = DIFFICULTIES[self.difficulty][""starting_money""]
        self.player = Player(
            starting_money=self.starting_money,
            starting_cargo=DIFFICULTIES[self.difficulty][""starting_cargo""],
            game=self  # Pass the game instance
        )
        self.turns_total = DIFFICULTIES[self.difficulty][""turns""]
        self.markets = {town: Market(town, self.player) for town in TOWNS}
        self.current_market = self.markets[self.player.location]
        input(""Press Enter to start your trading adventure..."")
        self.game_loop()

    def game_loop(self):
        """"""Main game loop that runs until the player runs out of turns or exits.""""""
        while self.turn_counter <= self.turns_total and not self.game_over:
            # Start of turn
            medium_print(f""\n--- Turn {self.turn_counter}/{self.turns_total} ---"")
            # Reset per-turn flags
            self.network_used = False  # Reset NETWORK usage at the start of each turn

            # Handle consecutive traveling
            if self.last_command != ""TRAVEL"":
                self.consecutive_travels = 0  # Reset counter if player did something else

            self.last_command = None  # Reset last command at the start of the turn

            # Display player status (excluding relationships)
            self.player.status_short()
            # Display prices for the current market
            self.current_market.display_prices()

            turn_consumed = False
            while not turn_consumed and not self.game_over:
                command = input(""Enter command (BUY/SELL/TRAVEL/STATUS/UPGRADE/NETWORK/HELP/EXIT): "").strip().upper()
                while command not in [""BUY"", ""SELL"", ""TRAVEL"", ""STATUS"", ""UPGRADE"", ""NETWORK"", ""HELP"", ""EXIT""]:
                    slow_print(""ERROR: Invalid Input"")
                    command = input(""Enter command (BUY/SELL/TRAVEL/STATUS/UPGRADE/NETWORK/HELP/EXIT): "").strip().upper()
                self.last_command = command  # Store the last command

                if command == ""STATUS"":
                    self.player.status()
                elif command == ""NETWORK"":
                    if not self.network_used:
                        self.check_network()
                        self.network_used = True  # Mark as used for this turn
                    else:
                        slow_print(""You have already used the NETWORK command this turn."")
                elif command == ""HELP"":
                    print(f""{Fore.YELLOW}{'='*60}{Style.RESET_ALL}"")
                    fast_print(HELP_TEXT)
                    print(f""{Fore.YELLOW}{'='*60}{Style.RESET_ALL}"")
                elif command == ""EXIT"":
                    slow_print(""Thank you for playing!"")
                    self.end_game()
                    return  # Exit the game loop
                elif command in [""BUY"", ""SELL"", ""TRAVEL"", ""UPGRADE""]:
                    # Process commands that consume a turn
                    if command == ""BUY"":
                        action_successful = self.buy()
                        turn_consumed = action_successful
                    elif command == ""SELL"":
                        action_successful = self.sell()
                        turn_consumed = action_successful
                    elif command == ""TRAVEL"":
                        action_successful, turn_consumed = self.travel()
                    elif command == ""UPGRADE"":
                        action_successful = self.player.upgrade_cargo()
                        turn_consumed = action_successful

                    if action_successful:
                        if turn_consumed:
                            # At this point, a turn has passed
                            # Process AI traders and events
                            self.apply_decay()
                            # Process AI traders for all markets
                            for market in self.markets.values():
                                market.process_ai_traders()
                            # Trigger event before displaying prices
                            self.trigger_event()
                            # Regenerate prices after events
                            self.current_market.generate_prices()
                            self.turn_counter += 1

                            # Apply relationship decay every 5 turns
                            if self.turn_counter % 5 == 0:
                                self.apply_relationship_decay()

                            # Check if the game should end after the turn
                            if self.turn_counter > self.turns_total:
                                self.game_over = True  # Set game over to True
                                break  # Break out of the inner while loop
                        else:
                            # Action was successful, but turn was not consumed (e.g., free travel)
                            # Display the player's status and market overview at the new location
                            self.player.status_short()
                            self.current_market.display_prices()
                    else:
                        # Action failed; inform player and allow them to try again
                        slow_print(""Action could not be completed. Please choose another action."")
                        # Do not consume turn
                else:
                    # Invalid command (shouldn't reach here due to earlier validation)
                    slow_print(""ERROR: Invalid Input"")
        # After the loop ends, call end_game
        self.end_game()
        return  # Ensure the method exits after ending the game
        
    def choose_good(self, action):
        """"""Prompts the player to choose a good to buy or sell.""""""
        fast_print(""Available goods:"")
        all_goods = list(ALL_GOODS.keys())
        while True:
            for idx, good in enumerate(all_goods, 1):
                fast_print(f""{idx}. {good}"")
            choice = input(f""Enter the number of the good to {action}: "").strip()
            if not choice.isdigit() or not (1 <= int(choice) <= len(all_goods)):
                slow_print(""ERROR: Invalid Input. Please enter a valid number."")
                continue
            return all_goods[int(choice) - 1]

    def check_network(self):
        """"""Provides rumors about the status of other towns in the merchant network.""""""
        medium_print(f""\n{Fore.GREEN}Merchant Network Rumors:{Style.RESET_ALL}"")
        for town, market in self.markets.items():
            status = self.player.get_overall_relationship_status(town)
            rumor = self.generate_rumor(town, market, status)
            if status in [""Ally"", ""Friendly""]:
                color = Fore.CYAN
            elif status in [""Hostile"", ""Enemy""]:
                color = Fore.RED
            else:
                color = Fore.YELLOW
            fast_print(f""{color}{town}:{Style.RESET_ALL}"")
            fast_print(f"" {rumor}"")
        print()

    def generate_rumor(self, town, market, status):
        """"""Generates a rumor based on the town's market and relationship status.""""""
        # Base rumor based on relationship
        if status == ""Ally"":
            base_rumor = f""{Fore.BLUE}is thriving and their trade is booming.{Style.RESET_ALL}""
        elif status == ""Friendly"":
            base_rumor = f""{Fore.GREEN}is experiencing steady trade.{Style.RESET_ALL}""
        elif status == ""Neutral"":
            base_rumor = f""{Fore.YELLOW}has a balanced market.{Style.RESET_ALL}""
        elif status == ""Hostile"":
            base_rumor = f""{Fore.RED}is facing some challenges, causing minor disruptions in trade.{Style.RESET_ALL}""
        else:  # Enemy
            base_rumor = f""{Fore.RED}is in turmoil, significantly affecting their market and relations.{Style.RESET_ALL}""

        # Select multiple goods to include in the rumor
        affected_goods = random.sample(list(ALL_GOODS.keys()), k=random.randint(1, 3))  # Affect 1 to 3 goods

        goods_rumors = []
        for good in affected_goods:
            supply = market.supply.get(good, 0)
            demand = market.demand.get(good, 0)
            good_colored = f""{Fore.CYAN}{good}{Style.RESET_ALL}""
            if demand > supply * 1.5:
                # High demand pushing prices up
                rumor_text = f""high demand for {good_colored} is pushing prices up""
                rumor_colored = f""{Fore.RED}{rumor_text}{Style.RESET_ALL}""
                goods_rumors.append(rumor_colored)
            elif demand < supply * 0.5:
                # Excess supply lowering prices
                rumor_text = f""excess supply of {good_colored} is lowering prices""
                rumor_colored = f""{Fore.GREEN}{rumor_text}{Style.RESET_ALL}""
                goods_rumors.append(rumor_colored)
            else:
                # Stable demand and supply
                rumor_text = f""stable demand and supply for {good_colored}""
                rumor_colored = f""{Fore.YELLOW}{rumor_text}{Style.RESET_ALL}""
                goods_rumors.append(rumor_colored)

        goods_rumor = ""; "".join(goods_rumors)
        rumor = f""{base_rumor} Additionally, there's {goods_rumor}.""
        return rumor

    def buy(self):
        """"""Handles the buying process for the player.""""""
        while True:
            good = self.choose_good(""buy"")
            if not good:
                return False  # Indicate that no transaction occurred

            price = self.current_market.prices.get(good, GOODS.get(good, {}).get(""base_price"", 100))
            # Calculate max affordable based on money
            max_affordable_quantity = self.player.money // price
            # Calculate max based on cargo
            if good in GOODS:
                good_weight = GOODS[good][""weight""]
            else:
                good_weight = 5  # Default weight
            available_cargo_space = self.player.max_cargo - self.player.current_cargo
            max_cargo_quantity = available_cargo_space // good_weight
            # Calculate max based on supply
            max_supply = int(self.current_market.supply.get(good, 0))

            max_quantity = min(max_affordable_quantity, max_cargo_quantity, max_supply)

            if max_quantity <= 0:
                slow_print(""You cannot buy any units of this good due to insufficient funds, cargo space, or supply."")
                return False  # Indicate that no transaction occurred

            # Encourage bulk buying with discounts
            discount = 0
            discounted_price = price
            if max_quantity >= 20:
                discount = 0.10  # 10% discount for buying 20 or more units
                discounted_price = int(price * (1 - discount))
                fast_print(f""Bulk purchase discount applied! Price per unit: ${discounted_price} (Original: ${price})"")
            elif max_quantity >= 10:
                discount = 0.05  # 5% discount for buying 10 or more units
                discounted_price = int(price * (1 - discount))
                fast_print(f""Bulk purchase discount applied! Price per unit: ${discounted_price} (Original: ${price})"")

            fast_print(f""You can afford up to {max_quantity} units based on your constraints."")

            while True:
                quantity_input = input(f""Enter the quantity of {good} to buy (max {max_quantity}): "").strip()
                if not quantity_input.isdigit():
                    slow_print(""ERROR: Invalid input. Please enter a valid number."")
                    continue  # Prompt again
                quantity = int(quantity_input)
                if quantity <= 0 or quantity > max_quantity:
                    slow_print(""ERROR: Quantity must be a positive number within your maximum limit."")
                    continue  # Prompt again

                cost = discounted_price * quantity

                success, added_weight = self.player.add_cargo(good, quantity)
                if not success:
                    slow_print(f""Cannot buy {quantity} {good}. Exceeds cargo capacity."")
                    return False  # Indicate that no transaction occurred

                # Update player and market
                self.player.money -= cost
                self.current_market.supply[good] -= quantity
                self.current_market.demand[good] += quantity * 0.4  # Increased impact
                slow_print(f""Bought {quantity} {good} for ${cost}."")
                fast_print(f""Cargo Updated: {self.player.current_cargo}/{self.player.max_cargo} units used."")
                self.player.event_log.append(f""Turn {self.turn_counter}: Bought {quantity} {good} for ${cost}."")
                self.key_events.append(f""Turn {self.turn_counter}: Bought {quantity} {good} for ${cost}."")

                # Relationship modifications based on goods categories
                self.update_relationships_after_purchase(good, quantity)

                return True  # Indicate that the transaction was successful

    def sell(self):
        """"""Handles the selling process for the player.""""""
        while True:
            good = self.choose_good(""sell"")
            if not good:
                return False  # Indicate that no transaction occurred
            if self.player.inventory.get(good, 0) == 0:
                fast_print(f""You have no {good} to sell."")
                return False  # Indicate that no transaction occurred

            max_sell_quantity = int(self.player.inventory.get(good, 0))

            fast_print(f""You can sell up to {max_sell_quantity} units based on your inventory."")
            while True:
                quantity_input = input(f""Enter the quantity of {good} to sell (max {max_sell_quantity}): "").strip()
                if not quantity_input.isdigit():
                    slow_print(""ERROR: Invalid input. Please enter a valid number."")
                    continue  # Prompt again
                quantity = int(quantity_input)
                if quantity <= 0 or quantity > max_sell_quantity:
                    slow_print(""ERROR: Quantity must be a positive number within your maximum limit."")
                    continue  # Prompt again

                price = self.current_market.prices.get(good, GOODS.get(good, {}).get(""base_price"", 100))
                revenue = price * quantity

                # Update player and market
                self.player.money += revenue
                self.player.remove_cargo(good, quantity)
                self.current_market.supply[good] += quantity
                self.current_market.demand[good] -= quantity * 0.4  # Increased impact
                slow_print(f""Sold {quantity} {good} for ${revenue}."")
                fast_print(f""Cargo Updated: {self.player.current_cargo}/{self.player.max_cargo} units used."")
                self.player.event_log.append(f""Turn {self.turn_counter}: Sold {quantity} {good} for ${revenue}."")
                self.key_events.append(f""Turn {self.turn_counter}: Sold {quantity} {good} for ${revenue}."")

                # Relationship modifications based on goods categories
                self.update_relationships_after_sale(good, quantity)

                return True  # Indicate that the transaction was successful
            
    def travel(self):
        """"""Handles the travel process for the player to move between towns.""""""
        available_towns = [town for town in TOWNS if town != self.player.location]
        slow_print(""\nAvailable towns to travel to:"")
        while True:
            for idx, town in enumerate(available_towns, 1):
                fast_print(f""{idx}. {town}"")
            choice = input(f""Enter the number of the town you want to travel to (1-{len(available_towns)}): "").strip()
            if not choice.isdigit() or not (1 <= int(choice) <= len(available_towns)):
                slow_print(""ERROR: Invalid Input. Please enter a valid number."")
                continue
            new_location = available_towns[int(choice) - 1]
            break
        self.player.location = new_location
        self.player.visited_towns.add(new_location)  # Ensure the new town is marked as visited
        self.current_market = self.markets[new_location]
        slow_print(f""Traveled to {new_location}."")
        self.player.event_log.append(f""Turn {self.turn_counter}: Traveled to {new_location}."")
        self.key_events.append(f""Turn {self.turn_counter}: Traveled to {new_location}."")

        # Update consecutive travel counter
        self.consecutive_travels += 1

        # Apply penalties only if player has traveled multiple turns in a row
        if self.consecutive_travels >= 3:
            penalty_trade = -7  # Increased penalty
            penalty_reputation = -5
            penalty_favor = -3
            self.player.modify_relationship(new_location, ""Trade"", penalty_trade)
            self.player.modify_relationship(new_location, ""Reputation"", penalty_reputation)
            self.player.modify_relationship(new_location, ""Favor"", penalty_favor)
            slow_print(f""Frequent traveling has significantly strained your relationships with {new_location}."")
            self.player.event_log.append(f""Turn {self.turn_counter}: Frequent traveling strained relationships with {new_location}."")
            self.key_events.append(f""Turn {self.turn_counter}: Frequent traveling strained relationships with {new_location}."")
        else:
            # No penalty applied
            pass

        # Check for free travel
        if hasattr(self.player, 'free_travel') and self.player.free_travel:
            slow_print(""Due to favorable winds, your travel was faster!"")
            self.player.free_travel = False  # Reset free travel
            return (True, False)  # Action successful, turn not consumed

        return (True, True)  # Action successful, turn consumed

    def apply_event(self, event, global_event=False):
        """"""Applies the effects of a triggered event to the game.""""""
        slow_print(f""\nEvent: {event}"")

        # Positive Global Events
        if event == ""A global trade agreement has been signed, reducing tariffs."":
            slow_print(""Tariffs reduced globally! Prices for goods decrease significantly."")
            for market in self.markets.values():
                for good in GOODS:
                    market.prices[good] = int(market.prices[good] * 0.90)
            self.player.modify_relationship(self.player.location, ""Trade"", 15)  # Increased impact
            self.player.reputation += 10
            self.key_events.append(f""Turn {self.turn_counter}: Global trade agreement reduced tariffs."")
            return

        if event == ""Technological advancements have improved trade efficiency worldwide."":
            slow_print(""Trade efficiency improved globally! Increased supply of goods."")
            for market in self.markets.values():
                for good in GOODS:
                    market.supply[good] += 100
            self.player.modify_relationship(self.player.location, ""Reputation"", 15)  # Increased impact
            self.player.reputation += 10
            self.key_events.append(f""Turn {self.turn_counter}: Technological advancements improved trade efficiency."")
            return

        if event == ""A global festival increases demand for luxury goods."":
            slow_print(""Global festival! Demand and prices for luxury goods increase."")
            luxury_goods = [""Silk"", ""Wine"", ""Gold""]
            for market in self.markets.values():
                for good in luxury_goods:
                    market.demand[good] += 150
                    market.prices[good] = int(market.prices[good] * 1.3)
            self.player.modify_relationship(self.player.location, ""Favor"", 15)  # Increased impact
            self.player.reputation += 10
            self.key_events.append(f""Turn {self.turn_counter}: Global festival increased demand for luxury goods."")
            return

        # Positive Local Events
        if event == ""You found a hidden stash of goods in the market!"":
            found_good = random.choice(list(GOODS.keys()))
            found_quantity = random.randint(15, 25)
            added_weight = GOODS[found_good][""weight""] * found_quantity
            if self.player.current_cargo + added_weight <= self.player.max_cargo:
                self.player.add_cargo(found_good, found_quantity)
                slow_print(f""You found {found_quantity} units of {found_good} and added them to your inventory!"")
                self.player.modify_relationship(self.player.location, ""Favor"", 15)  # Increased impact
                self.player.reputation += 10
                self.key_events.append(f""Turn {self.turn_counter}: Found {found_quantity} {found_good} in the market."")
            else:
                slow_print(f""You found {found_quantity} units of {found_good}, but lack the cargo space to carry them."")
            return

        if event == ""A wealthy patron gifts you valuable items!"":
            gifted_good = random.choice([""Gems"", ""Gold"", ""Silk""])
            gifted_quantity = random.randint(10, 15)
            added_weight = GOODS[gifted_good][""weight""] * gifted_quantity
            if self.player.current_cargo + added_weight <= self.player.max_cargo:
                self.player.add_cargo(gifted_good, gifted_quantity)
                slow_print(f""A wealthy patron gifted you {gifted_quantity} units of {gifted_good}!"")
                self.player.modify_relationship(self.player.location, ""Favor"", 20)  # Increased impact
                self.player.reputation += 15
                self.key_events.append(f""Turn {self.turn_counter}: Received {gifted_quantity} {gifted_good} from a patron."")
            else:
                slow_print(f""A wealthy patron wanted to gift you {gifted_quantity} units of {gifted_good}, but you lacked the cargo space."")
            return

        if event == ""Your reputation has earned you a local tax exemption!"":
            saved_amount = 300
            self.player.money += saved_amount
            slow_print(f""You received a local tax exemption and saved ${saved_amount}!"")
            self.player.modify_relationship(self.player.location, ""Reputation"", 20)  # Increased impact
            self.player.reputation += 15
            self.key_events.append(f""Turn {self.turn_counter}: Received tax exemption, saved ${saved_amount}."")
            return

        if event == ""A local festival boosts demand and prices for certain goods."":
            festival_goods = random.sample([""Spices"", ""Wine"", ""Cloth"", ""Tea""], 2)
            for good in festival_goods:
                self.current_market.demand[good] += 120
                self.current_market.prices[good] = int(self.current_market.prices[good] * 1.5)
            slow_print(f""The local festival boosted demand and prices for {', '.join(festival_goods)}!"")
            self.player.modify_relationship(self.player.location, ""Favor"", 15)  # Increased impact
            self.player.reputation += 10
            self.key_events.append(f""Turn {self.turn_counter}: Festival boosted prices for {', '.join(festival_goods)}."")
            return

        if event == ""Favorable winds reduce travel times temporarily."":
            slow_print(""Favorable winds! You can travel without consuming a turn next time."")
            self.player.free_travel = True  # Set attribute for free travel
            self.player.reputation += 5
            self.key_events.append(f""Turn {self.turn_counter}: Favorable winds will reduce next travel time."")
            return

        if event == ""Merchants admire your honesty, improving relationships."":
            slow_print(""Your honesty has impressed the merchants. Relationships have greatly improved."")
            self.player.modify_relationship(self.player.location, ""Trade"", 20)  # Increased impact
            self.player.modify_relationship(self.player.location, ""Reputation"", 20)
            self.player.reputation += 15
            self.key_events.append(f""Turn {self.turn_counter}: Honesty improved relationships in {self.player.location}."")
            return

        if event == ""An influential guild offers you a partnership."":
            slow_print(""An influential guild offers you a partnership, significantly increasing your cargo capacity."")
            self.player.max_cargo += 100  # Increased impact
            slow_print(f""Your cargo capacity increased to {self.player.max_cargo}."")
            self.player.modify_relationship(self.player.location, ""Trade"", 20)  # Increased impact
            self.player.reputation += 15
            self.key_events.append(f""Turn {self.turn_counter}: Guild partnership increased cargo capacity."")
            return

        if event == ""An overstock in the market reduces prices for certain goods."":
            overstock_goods = random.sample([""Food"", ""Iron"", ""Herbs""], 2)
            for good in overstock_goods:
                self.current_market.supply[good] += 150
                self.current_market.prices[good] = int(self.current_market.prices[good] * 0.6)
            slow_print(f""Overstock in the market! Prices for {', '.join(overstock_goods)} have decreased."")
            self.player.modify_relationship(self.player.location, ""Favor"", 15)  # Increased impact
            self.player.reputation += 10
            self.key_events.append(f""Turn {self.turn_counter}: Overstock reduced prices for {', '.join(overstock_goods)}."")
            return

        if event == ""Local artisans gift you exquisite items to trade."":
            gifted_good = random.choice([""Silk"", ""Cloth"", ""Wine""])
            gifted_quantity = random.randint(15, 25)
            added_weight = GOODS[gifted_good][""weight""] * gifted_quantity
            if self.player.current_cargo + added_weight <= self.player.max_cargo:
                self.player.add_cargo(gifted_good, gifted_quantity)
                slow_print(f""Local artisans gifted you {gifted_quantity} units of {gifted_good}!"")
                self.player.modify_relationship(self.player.location, ""Favor"", 20)  # Increased impact
                self.player.reputation += 15
                self.key_events.append(f""Turn {self.turn_counter}: Artisans gifted {gifted_quantity} {gifted_good}."")
            else:
                slow_print(f""Local artisans wanted to gift you {gifted_quantity} units of {gifted_good}, but you lacked the cargo space."")
            return

        if event == ""Successful mediation improves trade relations between towns."":
            slow_print(""Your mediation greatly improved trade relations between towns."")
            for town in TOWNS:
                self.player.modify_relationship(town, ""Trade"", 15)  # Increased impact
            self.player.reputation += 20
            self.key_events.append(f""Turn {self.turn_counter}: Mediation improved trade relations universally."")
            return

        # Negative Global Events
        if event == ""Global trade embargo reducing supply worldwide."":
            slow_print(""A global trade embargo has been enacted. Supply of goods has decreased significantly worldwide."")
            for market in self.markets.values():
                for good in GOODS:
                    market.supply[good] = max(10, market.supply[good] - 100)
                    market.prices[good] = int(market.prices[good] * 1.2)
            self.player.modify_relationship(self.player.location, ""Trade"", -15)  # Increased impact
            self.player.reputation -= 10
            self.key_events.append(f""Turn {self.turn_counter}: Global trade embargo reduced supply."")
            return

        if event == ""Pandemic affecting demand for certain goods globally."":
            slow_print(""A pandemic has severely reduced global demand for certain goods."")
            affected_goods = [""Spices"", ""Wine"", ""Silk""]
            for market in self.markets.values():
                for good in affected_goods:
                    market.demand[good] = max(50, market.demand.get(good, 0) - 150)
                    market.prices[good] = int(market.prices[good] * 0.7)
            # Move relationship modification outside the loop
            self.player.modify_relationship(self.player.location, ""Reputation"", -15)
            self.player.reputation -= 10
            self.key_events.append(f""Turn {self.turn_counter}: Pandemic reduced demand for certain goods."")
            return
            
        if event == ""Global inflation increasing prices across the board."":
            slow_print(""Global inflation is significantly increasing prices everywhere."")
            for market in self.markets.values():
                for good in GOODS:
                    market.prices[good] = int(market.prices[good] * 1.3)
            self.player.modify_relationship(self.player.location, ""Trade"", -15)  # Increased impact
            self.player.reputation -= 10
            self.key_events.append(f""Turn {self.turn_counter}: Global inflation increased prices."")
            return

        if event == ""Global recession decreasing purchasing power."":
            slow_print(""A global recession has severely decreased purchasing power."")
            for market in self.markets.values():
                for good in GOODS:
                    market.demand[good] = max(50, market.demand[good] - 120)
                    market.prices[good] = int(market.prices[good] * 0.8)
            self.player.modify_relationship(self.player.location, ""Trade"", -15)  # Increased impact
            self.player.reputation -= 10
            self.key_events.append(f""Turn {self.turn_counter}: Global recession decreased purchasing power."")
            return

        # Negative Local Events
        if event == ""Thieves attacked your caravan and stole some goods!"":
            affected_good = random.choice(list(ALL_GOODS.keys()))
            stolen_qty = random.randint(10, 20)
            actual_stolen = min(stolen_qty, self.player.inventory.get(affected_good, 0))
            self.player.remove_cargo(affected_good, actual_stolen)
            slow_print(f""Thieves stole {actual_stolen} units of {affected_good} from your caravan!"")
            self.player.modify_relationship(self.player.location, ""Trade"", -20)  # Increased impact
            self.player.modify_relationship(self.player.location, ""Reputation"", -15)
            self.player.modify_relationship(self.player.location, ""Favor"", -10)
            self.player.reputation -= 25
            self.key_events.append(f""Turn {self.turn_counter}: Thieves stole {actual_stolen} {affected_good}."")
            return

        if event == ""A storm ruined your goods during travel."":
            damaged_good = random.choice(list(ALL_GOODS.keys()))
            damaged_qty = random.randint(10, 20)
            actual_damaged = min(damaged_qty, self.player.inventory.get(damaged_good, 0))
            self.player.remove_cargo(damaged_good, actual_damaged)
            slow_print(f""A storm damaged {actual_damaged} units of {damaged_good} in your cargo."")
            self.player.modify_relationship(self.player.location, ""Trade"", -15)  # Increased impact
            self.player.modify_relationship(self.player.location, ""Reputation"", -10)
            self.player.modify_relationship(self.player.location, ""Favor"", -7)
            self.player.reputation -= 20
            self.key_events.append(f""Turn {self.turn_counter}: Storm damaged {actual_damaged} {damaged_good}."")
            return

        if event == ""Disease outbreak decreased the demand for food."":
            affected_good = ""Food""
            price_drop = int(GOODS[affected_good][""base_price""] * 0.35)
            self.current_market.demand[affected_good] = max(50, self.current_market.demand.get(affected_good, 0) - 150)
            self.current_market.prices[affected_good] = max(Market.PRICE_FLOOR, self.current_market.prices.get(affected_good, 0) - price_drop)
            slow_print(f""A disease outbreak severely decreased the demand for {affected_good}, lowering its price by ${price_drop}."")
            self.player.modify_relationship(self.player.location, ""Trade"", -18)  # Increased impact
            self.player.modify_relationship(self.player.location, ""Reputation"", -12)
            self.player.reputation -= 25
            self.key_events.append(f""Turn {self.turn_counter}: Disease outbreak decreased demand for {affected_good}."")
            return

        if event == ""Pirates disrupted trade in the seas."":
            affected_good = random.choice(list(ALL_GOODS.keys()))
            price_increase = int(GOODS[affected_good][""base_price""] * 0.45)
            self.current_market.supply[affected_good] = max(10, self.current_market.supply.get(affected_good, 0) - 100)
            self.current_market.prices[affected_good] = min(Market.PRICE_CEILING, self.current_market.prices.get(affected_good, 0) + price_increase)
            slow_print(f""Pirates severely disrupted trade, decreasing supply and increasing price of {affected_good} by ${price_increase}."")
            self.player.modify_relationship(self.player.location, ""Trade"", -18)  # Increased impact
            self.player.modify_relationship(self.player.location, ""Reputation"", -12)
            self.player.modify_relationship(self.player.location, ""Favor"", -8)
            self.player.reputation -= 25
            self.key_events.append(f""Turn {self.turn_counter}: Pirates disrupted trade, affected {affected_good}."")
            return

        if event == ""Government imposed a tax on trade."":
            tax_amount = 200
            self.player.money = max(0, self.player.money - tax_amount)
            slow_print(f""The government imposed a heavy tax on your trade. You lost ${tax_amount}."")
            self.player.modify_relationship(self.player.location, ""Trade"", -18)  # Increased impact
            self.player.modify_relationship(self.player.location, ""Reputation"", -12)
            self.player.reputation -= 20
            self.key_events.append(f""Turn {self.turn_counter}: Government taxed you ${tax_amount}."")
            return

        if event == ""Locusts devastated the food supplies in Dusktown."":
            affected_good = ""Food""
            damage = random.randint(15, 25)
            actual_damaged = min(damage, self.player.inventory.get(affected_good, 0))
            if self.player.location == ""Dusktown"":
                self.player.remove_cargo(affected_good, actual_damaged)
                slow_print(f""Locusts devastated food supplies in Dusktown, destroying {actual_damaged} units of your {affected_good}."")
                self.player.modify_relationship(self.player.location, ""Trade"", -15)  # Increased impact
                self.player.modify_relationship(self.player.location, ""Reputation"", -10)
                self.player.modify_relationship(self.player.location, ""Favor"", -7)
                self.player.reputation -= 20
                self.key_events.append(f""Turn {self.turn_counter}: Locusts destroyed {actual_damaged} {affected_good} in Dusktown."")
            else:
                slow_print(""Locusts devastated food supplies in Dusktown."")
            return

        if event == ""Bandit attack in Oakwood stole some of your goods."":
            affected_good = random.choice(list(ALL_GOODS.keys()))
            stolen_qty = random.randint(10, 20)
            actual_stolen = min(stolen_qty, self.player.inventory.get(affected_good, 0))
            if self.player.location == ""Oakwood"":
                self.player.remove_cargo(affected_good, actual_stolen)
                slow_print(f""Bandits in Oakwood stole {actual_stolen} units of your {affected_good}."")
                self.player.modify_relationship(self.player.location, ""Trade"", -20)  # Increased impact
                self.player.modify_relationship(self.player.location, ""Reputation"", -15)
                self.player.modify_relationship(self.player.location, ""Favor"", -10)
                self.player.reputation -= 25
                self.key_events.append(f""Turn {self.turn_counter}: Bandits in Oakwood stole {actual_stolen} {affected_good}."")
            else:
                slow_print(""Bandits attacked traders in Oakwood."")
            return

        if event == ""Natural disaster in Dusktown affecting multiple goods."":
            affected_goods = random.sample(list(ALL_GOODS.keys()), k=3)
            if self.player.location == ""Dusktown"":
                for good in affected_goods:
                    damaged_qty = random.randint(10, 20)
                    actual_damaged = min(damaged_qty, self.player.inventory.get(good, 0))
                    self.player.remove_cargo(good, actual_damaged)
                slow_print(f""A natural disaster in Dusktown damaged a significant amount of your goods."")
                self.player.modify_relationship(self.player.location, ""Trade"", -25)  # Increased impact
                self.player.modify_relationship(self.player.location, ""Reputation"", -18)
                self.player.modify_relationship(self.player.location, ""Favor"", -12)
                self.player.reputation -= 30
                self.key_events.append(f""Turn {self.turn_counter}: Natural disaster damaged goods in Dusktown."")
            else:
                slow_print(""A natural disaster struck Dusktown, severely affecting trade."")
            return

        # Fallback for unhandled events
        slow_print(""An unusual event occurred, but nothing notable happened."")

    def trigger_event(self):
        """"""Randomly triggers a global or local event based on difficulty settings.""""""
        event_chance = DIFFICULTIES[self.difficulty][""event_chance""]
        # Reduce event chance based on reputation
        reputation_factor = 1 - (self.player.reputation / 200)  # Adjust as needed
        reputation_factor = max(0.5, reputation_factor)  # Ensure at least 50% of base chance
        adjusted_event_chance = event_chance * reputation_factor

        if random.random() < adjusted_event_chance:
            event_type = random.choice([""GLOBAL"", ""LOCAL""])
            if event_type == ""GLOBAL"":
                event = random.choice(GLOBAL_EVENTS)
                slow_print(f""\n{Fore.RED}Global Event: {event}{Style.RESET_ALL}"")
                if ""Pandemic"" in event:
                    if not hasattr(self, ""pandemic_applied"") or not self.pandemic_applied:
                        self.apply_event(event, global_event=True)
                        self.pandemic_applied = True  # Set the flag to prevent multiple applications
                else:
                    self.apply_event(event, global_event=True)
            else:
                event = random.choice(LOCAL_EVENTS)
                slow_print(f""\n{Fore.RED}Local Event: {event}{Style.RESET_ALL}"")
                self.apply_event(event, global_event=False)

        # Reset the pandemic flag if not used
        if not hasattr(self, ""pandemic_applied""):
            self.pandemic_applied = False  # Initialize if it doesn't exist

    def apply_relationship_decay(self):
        """"""Gradually decays the relationships over time.""""""
        medium_print(""\nRelationships have naturally changed over time:"")
        for town in TOWNS:
            aspects = self.player.relationships[town]
            for aspect in aspects:
                original_score = aspects[aspect]
                if aspects[aspect] > 0:
                    aspects[aspect] -= 2  # Increased decay rate
                elif aspects[aspect] < 0:
                    aspects[aspect] += 2  # Increased recovery rate
                # Clamp values
                aspects[aspect] = max(RELATIONSHIP_MIN, min(aspects[aspect], RELATIONSHIP_MAX))
                change = aspects[aspect] - original_score
                if change != 0:
                    # Notify the player about the change
                    if change > 0:
                        medium_print(f""[{town} - {aspect}] Improved by {change} point(s)."")
                    else:
                        medium_print(f""[{town} - {aspect}] Decreased by {-change} point(s)."")

    def update_relationships_after_purchase(self, good, quantity):
        town = self.player.location
        price = self.current_market.prices.get(good, GOODS[good][""base_price""])

        # Introduce balanced scaling factor
        scaling_factor = 1 + (price / 500)  # Scales relationship changes with price
        scaling_factor = min(2.0, scaling_factor)  # Cap scaling factor to avoid excessive influence

        max_increase = 15  # Cap on the maximum relationship improvement per transaction
        relationship_change = min(int(quantity * scaling_factor), max_increase)

        if good in SUPPORTIVE_GOODS:
            self.player.modify_relationship(town, ""Reputation"", relationship_change)
        elif good in STRATEGIC_GOODS:
            self.player.modify_relationship(town, ""Trade"", relationship_change)
        elif good in LUXURY_GOODS:
            self.player.modify_relationship(town, ""Favor"", relationship_change)

    def update_relationships_after_sale(self, good, quantity):
        town = self.player.location
        price = self.current_market.prices.get(good, GOODS[good][""base_price""])

        # Adjust scaling: more linear impact for sales
        scaling_factor = 0.8 + (price / 1000)  # Lower scaling for sales
        scaling_factor = min(1.5, scaling_factor)  # Cap scaling factor

        max_increase = 10  # Cap on the maximum relationship improvement per transaction
        relationship_change = min(int(quantity * scaling_factor), max_increase)

        if good in SUPPORTIVE_GOODS:
            self.player.modify_relationship(town, ""Reputation"", relationship_change)
        elif good in STRATEGIC_GOODS:
            self.player.modify_relationship(town, ""Trade"", relationship_change)
        elif good in LUXURY_GOODS:
            self.player.modify_relationship(town, ""Favor"", relationship_change)
        
    def apply_decay(self):
        """"""Applies decay to supply and demand in all markets to move towards base values.""""""
        for good, info in GOODS.items():
            for market in self.markets.values():
                # Supply decay towards base_supply
                if market.supply.get(good, 0) < info[""base_supply""]:
                    market.supply[good] += info[""base_supply""] * self.supply_decay_rate
                    if market.supply[good] > info[""base_supply""]:
                        market.supply[good] = info[""base_supply""]
                elif market.supply.get(good, 0) > info[""base_supply""]:
                    market.supply[good] -= info[""base_supply""] * self.supply_decay_rate
                    if market.supply[good] < info[""base_supply""]:
                        market.supply[good] = info[""base_supply""]

                # Demand decay towards base_demand
                if market.demand.get(good, 0) < info[""base_demand""]:
                    market.demand[good] += info[""base_demand""] * self.demand_decay_rate
                    if market.demand[good] > info[""base_demand""]:
                        market.demand[good] = info[""base_demand""]
                elif market.demand.get(good, 0) > info[""base_demand""]:
                    market.demand[good] -= info[""base_demand""] * self.demand_decay_rate
                    if market.demand[good] < info[""base_demand""]:
                        market.demand[good] = info[""base_demand""]

                # Additional decay for Gold's value to prevent hoarding
                if good == ""Gold"":
                    market.prices[""Gold""] = max(Market.PRICE_FLOOR, int(market.prices[""Gold""] * 0.98))  # Increased depreciation per turn

    def end_game(self):
        """"""Displays the final game results and concludes the game.""""""
        slow_print(""\nGame Over!"")
        fast_print(f""Final Money: ${self.player.money}"")
        total_goods = sum(self.player.inventory.values())
        fast_print(f""Total Goods: {total_goods}"")
        net_worth = self.player.money + sum(
            self.player.inventory.get(good, 0) * self.current_market.prices.get(good, 0) for good in ALL_GOODS
        )
        fast_print(f""Net Worth: ${net_worth}"")

        # Calculate financial performance
        financial_performance = self.calculate_financial_performance(net_worth)
        # Calculate social performance
        social_performance = self.calculate_social_performance()

        # Display financial performance
        slow_print(f""\n{Fore.GREEN}Financial Performance:{Style.RESET_ALL}"")
        fast_print(f"" - Net Worth Score: {financial_performance['net_worth_score']} / 5"")
        fast_print(f"" - Liquidity Score: {financial_performance['liquidity_score']} / 5"")
        financial_total = financial_performance['net_worth_score'] + financial_performance['liquidity_score']
        fast_print(f"" - Total Financial Score: {financial_total} / 10"")

        # Display social performance
        slow_print(f""\n{Fore.BLUE}Social Performance (Relationships):{Style.RESET_ALL}"")
        fast_print(f"" - Average Trade Relations Score: {social_performance['trade_score']} / 5"")
        fast_print(f"" - Average Reputation Score: {social_performance['reputation_score']} / 5"")
        fast_print(f"" - Average Favor Score: {social_performance['favor_score']} / 5"")
        fast_print(f"" - Relationship Status Influence Score: {social_performance['status_score']} / 5"")  # New Line
        social_total = social_performance['trade_score'] + social_performance['reputation_score'] + social_performance['favor_score'] + social_performance['status_score']  # Updated
        fast_print(f"" - Total Social Score: {social_total} / 20"")  # Updated

        # Calculate total score
        total_score = financial_total + social_total
        max_total_score = 10 + 20  # Financial max + Social max

        # Determine final rating based on total_score
        rating = self.determine_rating(total_score)
        rating_message = self.generate_final_message(financial_total, social_total, rating)

        slow_print(f""\nFinal Rating: {Fore.CYAN}{rating}{Style.RESET_ALL}"")
        slow_print(rating_message)

        # Display key events summary
        slow_print(""\nSummary of Your Journey:"")
        for event in self.key_events:
            fast_print(event)
        # Removed the truncation with ""...""
        # if len(self.key_events) > 50:
        #     fast_print(""..."")

        # Display Relationship Status Summary
        slow_print(""\nRelationship Status Summary:"")
        status_counts = {
            ""Ally"": 0,
            ""Friendly"": 0,
            ""Neutral"": 0,
            ""Hostile"": 0,
            ""Enemy"": 0
        }
        for town in self.player.visited_towns:
            status = self.player.get_overall_relationship_status(town)
            if status in status_counts:
                status_counts[status] += 1
        for status, count in status_counts.items():
            color = Fore.GREEN if status == ""Ally"" else Fore.BLUE if status == ""Friendly"" else Fore.YELLOW if status == ""Neutral"" else Fore.RED if status in [""Hostile"", ""Enemy""] else Fore.WHITE
            fast_print(f""{color}{status}: {count}{Style.RESET_ALL}"")
        
        slow_print(""\nThank you for playing the Text-Based Trading Game!"")
        sys.exit()

    def generate_final_message(self, financial_total, social_total, rating):
        """"""Generates a final message based on financial and social performance.""""""
        messages = {
            ""Legendary"": ""Incredible! You became an unmatched trading legend with stellar relationships and unmatched wealth."",
            ""Excellent"": ""Congratulations! You became a legendary trader with excellent relationships and strong financials."",
            ""Great"": ""Outstanding! You achieved impressive wealth and maintained excellent relationships."",
            ""Good"": ""Well done! You made a substantial profit and maintained good relationships."",
            ""Decent"": ""You made a respectable profit and kept decent relations."",
            ""Poor"": ""You faced challenges in trading, with room to improve both financially and socially."",
            ""Terrible"": ""Your trading journey was fraught with difficulties. Significant improvement is needed in both trading and relationships.""
        }

        # Customize the message based on which performance was better
        if financial_total > social_total:
            messages[""Good""] += "" Your financial acumen outshined your social engagements.""
            messages[""Decent""] += "" You did well financially but could improve your relationships.""
            messages[""Poor""] += "" Financial setbacks affected your journey more than social aspects.""
        elif social_total > financial_total:
            messages[""Good""] += "" Your strong relationships boosted your trading journey.""
            messages[""Decent""] += "" Your social skills helped balance financial challenges.""
            messages[""Poor""] += "" Despite good relations, financial challenges hindered progress.""

        return messages.get(rating, """")

    def calculate_net_worth_score(self, net_worth):
        """"""Assigns a score based on net worth.""""""
        if net_worth >= 40000:
            return 5
        elif net_worth >= 30000:
            return 4
        elif net_worth >= 20000:
            return 3
        elif net_worth >= 15000:
            return 2
        elif net_worth >= 10000:
            return 1
        else:
            return 0

    def calculate_trade_score(self, average_trade):
        """"""Assigns a score based on average Trade Relations.""""""
        if average_trade >= 60:
            return 5
        elif average_trade >= 40:
            return 4
        elif average_trade >= 20:
            return 3
        elif average_trade >= 10:
            return 2
        elif average_trade >= 0:
            return 1
        else:
            return 0

    def calculate_reputation_score(self, average_reputation):
        """"""Assigns a score based on average Reputation.""""""
        if average_reputation >= 60:
            return 5
        elif average_reputation >= 40:
            return 4
        elif average_reputation >= 20:
            return 3
        elif average_reputation >= 1:
            return 2
        elif average_reputation >= 0:
            return 1
        else:
            return 0

    def calculate_favor_score(self, average_favor):
        """"""Assigns a score based on average Favor.""""""
        if average_favor >= 60:
            return 5
        elif average_favor >= 40:
            return 4
        elif average_favor >= 20:
            return 3
        elif average_favor >= 10:
            return 2
        elif average_favor >= 0:
            return 1
        else:
            return 0

    def calculate_social_performance(self):
        """"""Calculates social performance metrics, including relationship statuses.""""""
        visited_towns = self.player.visited_towns
        if not visited_towns:
            visited_towns = {self.player.location}  # Use a set for consistency

        # Calculate overall relationship scores for visited towns only
        total_trade = sum([self.player.relationships[town][""Trade""] for town in visited_towns])
        total_reputation = sum([self.player.relationships[town][""Reputation""] for town in visited_towns])
        total_favor = sum([self.player.relationships[town][""Favor""] for town in visited_towns])

        average_trade = total_trade / len(visited_towns)
        average_reputation = total_reputation / len(visited_towns)
        average_favor = total_favor / len(visited_towns)

        trade_score = self.calculate_trade_score(average_trade)
        reputation_score = self.calculate_reputation_score(average_reputation)
        favor_score = self.calculate_favor_score(average_favor)

        # Calculate relationship status influence score
        status_score = 0
        for town in visited_towns:
            status = self.player.get_overall_relationship_status(town)
            if status == ""Ally"":
                status_score += 3
            elif status == ""Friendly"":
                status_score += 2
            elif status == ""Neutral"":
                status_score += 1
            elif status == ""Hostile"":
                status_score -= 1
            elif status == ""Enemy"":
                status_score -= 2

        # Normalize status_score to a maximum of 5
        # Assuming maximum positive score is 3 * number of towns
        max_positive = 3 * len(visited_towns)
        if max_positive == 0:
            normalized_status_score = 0
        else:
            normalized_status_score = min(int((status_score / max_positive) * 5), 5)
            normalized_status_score = max(-5, normalized_status_score)  # Clamp between -5 and 5

        # Convert negative scores to 0 for the scoring system
        if normalized_status_score < 0:
            normalized_status_score = 0
        elif normalized_status_score > 5:
            normalized_status_score = 5

        return {
            ""trade_score"": trade_score,
            ""reputation_score"": reputation_score,
            ""favor_score"": favor_score,
            ""status_score"": normalized_status_score  # New field
        }
    
    def calculate_financial_performance(self, net_worth):
        """"""Calculates financial performance metrics.""""""
        # New liquidity ratio calculation based on starting money
        liquidity_ratio = self.player.money / self.player.starting_money
        liquidity_score = self.calculate_liquidity_score(liquidity_ratio)
        net_worth_score = self.calculate_net_worth_score(net_worth)

        return {
            ""net_worth_score"": net_worth_score,
            ""liquidity_score"": liquidity_score
        }

    def calculate_liquidity_score(self, liquidity_ratio):
        """"""
        Assigns a liquidity score based on the player's ending wealth relative to their starting wealth.
        Scales down the score the closer the ending wealth is to the starting wealth.
        """"""
        if liquidity_ratio >= 2.0:  # Ending cash is at least double the starting cash
            return 5
        elif liquidity_ratio >= 1.8:
            return 4
        elif liquidity_ratio >= 1.5:
            return 3
        elif liquidity_ratio >= 1.2:
            return 2
        elif liquidity_ratio > 1.0:
            return 1  # Small improvement still earns a point
        else:
            return 0  # No score for failing to maintain starting wealth

    def determine_rating(self, total_score):
        """"""Determines the final rating based on total_score.""""""
        if total_score >= 30:
            return ""Legendary""
        elif total_score >= 25:
            return ""Excellent""
        elif total_score >= 20:
            return ""Great""
        elif total_score >= 15:
            return ""Good""
        elif total_score >= 10:
            return ""Decent""
        elif total_score >= 5:
            return ""Poor""
        else:
            return ""Terrible""

    def generate_final_message(self, financial_total, social_total, rating):
        """"""Generates a final message based on financial and social performance.""""""
        messages = {
            ""Legendary"": ""Incredible! You became an unmatched trading legend with stellar relationships and unmatched wealth."",
            ""Excellent"": ""Congratulations! You became a legendary trader with excellent relationships and strong financials."",
            ""Great"": ""Outstanding! You achieved impressive wealth or maintained excellent relationships."",
            ""Good"": ""Well done! You made a substantial profit or maintained good relationships."",
            ""Decent"": ""You made a respectable profit or kept decent relations."",
            ""Poor"": ""You faced challenges in trading, with room to improve both financially and socially."",
            ""Terrible"": ""Your trading journey was fraught with difficulties. Significant improvement is needed in both trading and relationships.""
        }

        # Customize the message based on which performance was better
        if financial_total > social_total:
            messages[""Good""] += "" Your financial acumen outshined your social engagements.""
            messages[""Decent""] += "" You did well financially but could improve your relationships.""
            messages[""Poor""] += "" Financial setbacks affected your journey more than social aspects.""
        elif social_total > financial_total:
            messages[""Good""] += "" Your strong relationships boosted your trading journey.""
            messages[""Decent""] += "" Your social skills helped balance financial challenges.""
            messages[""Poor""] += "" Despite good relations, financial challenges hindered progress.""

        return messages.get(rating, """")

    def calculate_social_performance(self):
        """"""Calculates social performance metrics, including relationship statuses.""""""
        visited_towns = self.player.visited_towns
        if not visited_towns:
            visited_towns = {self.player.location}  # Use a set for consistency

        # Calculate overall relationship scores for visited towns only
        total_trade = sum([self.player.relationships[town][""Trade""] for town in visited_towns])
        total_reputation = sum([self.player.relationships[town][""Reputation""] for town in visited_towns])
        total_favor = sum([self.player.relationships[town][""Favor""] for town in visited_towns])

        average_trade = total_trade / len(visited_towns)
        average_reputation = total_reputation / len(visited_towns)
        average_favor = total_favor / len(visited_towns)

        trade_score = self.calculate_trade_score(average_trade)
        reputation_score = self.calculate_reputation_score(average_reputation)
        favor_score = self.calculate_favor_score(average_favor)

        # Calculate relationship status influence score
        status_score = 0
        for town in visited_towns:
            status = self.player.get_overall_relationship_status(town)
            if status == ""Ally"":
                status_score += 3
            elif status == ""Friendly"":
                status_score += 2
            elif status == ""Neutral"":
                status_score += 1
            elif status == ""Hostile"":
                status_score -= 1
            elif status == ""Enemy"":
                status_score -= 2

        # Normalize status_score to a maximum of 5
        # Assuming maximum positive score is 3 * number of towns
        max_positive = 3 * len(visited_towns)
        if max_positive == 0:
            normalized_status_score = 0
        else:
            normalized_status_score = min(int((status_score / max_positive) * 5), 5)
            normalized_status_score = max(-5, normalized_status_score)  # Clamp between -5 and 5

        # Convert negative scores to 0 for the scoring system
        if normalized_status_score < 0:
            normalized_status_score = 0
        elif normalized_status_score > 5:
            normalized_status_score = 5

        return {
            ""trade_score"": trade_score,
            ""reputation_score"": reputation_score,
            ""favor_score"": favor_score,
            ""status_score"": normalized_status_score  # New field
        }
    
    def apply_decay(self):
        """"""Applies decay to supply and demand in all markets to move towards base values.""""""
        for good, info in GOODS.items():
            for market in self.markets.values():
                # Supply decay towards base_supply
                if market.supply.get(good, 0) < info[""base_supply""]:
                    market.supply[good] += info[""base_supply""] * self.supply_decay_rate
                    if market.supply[good] > info[""base_supply""]:
                        market.supply[good] = info[""base_supply""]
                elif market.supply.get(good, 0) > info[""base_supply""]:
                    market.supply[good] -= info[""base_supply""] * self.supply_decay_rate
                    if market.supply[good] < info[""base_supply""]:
                        market.supply[good] = info[""base_supply""]

                # Demand decay towards base_demand
                if market.demand.get(good, 0) < info[""base_demand""]:
                    market.demand[good] += info[""base_demand""] * self.demand_decay_rate
                    if market.demand[good] > info[""base_demand""]:
                        market.demand[good] = info[""base_demand""]
                elif market.demand.get(good, 0) > info[""base_demand""]:
                    market.demand[good] -= info[""base_demand""] * self.demand_decay_rate
                    if market.demand[good] < info[""base_demand""]:
                        market.demand[good] = info[""base_demand""]

                # Additional decay for Gold's value to prevent hoarding
                if good == ""Gold"":
                    market.prices[""Gold""] = max(Market.PRICE_FLOOR, int(market.prices[""Gold""] * 0.98))  # Increased depreciation per turn

    def end_game(self):
        """"""Displays the final game results and concludes the game.""""""
        # The end_game method remains the same

        slow_print(""\nGame Over!"")
        fast_print(f""Final Money: ${self.player.money}"")
        total_goods = sum(self.player.inventory.values())
        fast_print(f""Total Goods: {total_goods}"")
        net_worth = self.player.money + sum(
            self.player.inventory.get(good, 0) * self.current_market.prices.get(good, 0) for good in ALL_GOODS
        )
        fast_print(f""Net Worth: ${net_worth}"")

        # Calculate financial performance
        financial_performance = self.calculate_financial_performance(net_worth)
        # Calculate social performance
        social_performance = self.calculate_social_performance()

        # Display financial performance
        slow_print(f""\n{Fore.GREEN}Financial Performance:{Style.RESET_ALL}"")
        fast_print(f"" - Net Worth Score: {financial_performance['net_worth_score']} / 5"")
        fast_print(f"" - Liquidity Score: {financial_performance['liquidity_score']} / 5"")
        financial_total = financial_performance['net_worth_score'] + financial_performance['liquidity_score']
        fast_print(f"" - Total Financial Score: {financial_total} / 10"")

        # Display social performance
        slow_print(f""\n{Fore.BLUE}Social Performance (Relationships):{Style.RESET_ALL}"")
        fast_print(f"" - Average Trade Relations Score: {social_performance['trade_score']} / 5"")
        fast_print(f"" - Average Reputation Score: {social_performance['reputation_score']} / 5"")
        fast_print(f"" - Average Favor Score: {social_performance['favor_score']} / 5"")
        fast_print(f"" - Relationship Status Influence Score: {social_performance['status_score']} / 5"")  # New Line
        social_total = social_performance['trade_score'] + social_performance['reputation_score'] + social_performance['favor_score'] + social_performance['status_score']  # Updated
        fast_print(f"" - Total Social Score: {social_total} / 20"")  # Updated

        # Calculate total score
        total_score = financial_total + social_total
        max_total_score = 10 + 20  # Financial max + Social max

        # Determine final rating based on total_score
        rating = self.determine_rating(total_score)
        rating_message = self.generate_final_message(financial_total, social_total, rating)

        slow_print(f""\nFinal Rating: {Fore.CYAN}{rating}{Style.RESET_ALL}"")
        slow_print(rating_message)

        # Display key events summary
        slow_print(""\nSummary of Your Journey:"")
        for event in self.key_events[:50]:  # Limit to first 50 for readability
            fast_print(event)
        if len(self.key_events) > 50:
            fast_print(""..."")

        # Display Relationship Status Summary
        slow_print(""\nRelationship Status Summary:"")
        status_counts = {
            ""Ally"": 0,
            ""Friendly"": 0,
            ""Neutral"": 0,
            ""Hostile"": 0,
            ""Enemy"": 0
        }
        for town in self.player.visited_towns:
            status = self.player.get_overall_relationship_status(town)
            if status in status_counts:
                status_counts[status] += 1
        for status, count in status_counts.items():
            color = Fore.GREEN if status == ""Ally"" else Fore.BLUE if status == ""Friendly"" else Fore.YELLOW if status == ""Neutral"" else Fore.RED if status in [""Hostile"", ""Enemy""] else Fore.WHITE
            fast_print(f""{color}{status}: {count}{Style.RESET_ALL}"")
        
        slow_print(""\nThank you for playing the Text-Based Trading Game!"")
        sys.exit()

# Print methods for different speeds
def fast_print(text):
    for char in text:
        print(char, end="""", flush=True)
        time.sleep(0.0005)
    print()

def medium_print(text):
    for char in text:
        print(char, end="""", flush=True)
        time.sleep(0.005)  # Medium typing speed
    print()

def slow_print(text):
    for char in text:
        print(char, end="""", flush=True)
        time.sleep(0.02)  # Slow typing speed
    print()

def get_relationship_status(score):
    """"""Converts a numerical relationship score into a descriptive status.""""""
    if score >= 20:
        return ""Ally""
    elif score >= 10:
        return ""Friendly""
    elif score >= 0:
        return ""Neutral""
    elif score <= -20:
        return ""Enemy""
    elif score <= -10:
        return ""Hostile""
    else:
        return ""Neutral""  # For scores between -19 and -1

# Main execution block with error handling
if __name__ == ""__main__"":
    try:
        game_instance = Game()
        game_instance.start()
    except Exception as e:
        print(f""\n{Fore.RED}An unexpected error occurred: {e}{Style.RESET_ALL}"")
        sys.exit(1)
"
QVtjH5MT,abyss223,Agen868,HTML,Saturday 15th of February 2025 02:15:55 AM CDT,"<!DOCTYPE html>
<html>
<body>

<h1>ทดสอบ</h1>

<iframe width=""640"" height=""360"" src=""https://short.icu/xqfI8JwRa"" frameborder=""0"" scrolling=""0"" allowfullscreen></iframe>

</body>
</html>"
mupdPpSt,Manifest,Le_JuiceBOX,Lua,Saturday 15th of February 2025 02:03:17 AM CDT,"--============================================================================================================================
--// Desc: This script is here so the manifest can use the most current manifest code from github so I dont have to keep
--//	   updating this paste when I want to make changes.
--// Date: 2/15/25
--============================================================================================================================
--paste: mupdPpSt

term.clear()
term.setCursorPos(1,1)
shell.setAlias(""getgit"",""os/cmds/getgit.lua"")
shell.run(""getgit get LeJuiceBOX/cct-computeros/refs/heads/main/installer/manifest.lua temp_manifest.lua"")
os.sleep(0.25)
shell.run(""temp_manifest.lua"")
fs.delete(""temp_manifest.lua"")
term.clear()"
97XW4ES0,⭐ get any gift card for FREE,sautome,JavaScript,Saturday 15th of February 2025 02:02:19 AM CDT,"https://g2afree.info <--- free giftcards guide #355692
"
qt30y8cE,Installer,Le_JuiceBOX,Lua,Saturday 15th of February 2025 01:59:23 AM CDT,"--============================================================================================================================
--// Desc: This script is here so the installer can use the most current installer code from github so I dont have to keep
--//	   updating this paste when I want to make changes.
--// Date: 2/15/25
--============================================================================================================================
--paste: qt30y8cE

term.clear()
term.setCursorPos(1,1)
if fs.exists(""os/cmds/getgit.lua"") then fs.delete(""os/cmds/getgit.lua"") end
shell.run(""pastebin get Y1TpxWrH os/cmds/getgit.lua"")
shell.setAlias(""getgit"",""os/cmds/getgit.lua"")
shell.run(""getgit temp_installer.lua LeJuiceBOX/cct-computeros/refs/heads/main/installer/install.lua"")
os.sleep(0.25)
shell.run(""temp_installer.lua"")
fs.delete(""temp_installer.lua"")
term.clear()"
HUGAXZRp,⭐ giftcards for free,KanzenKyo,JavaScript,Saturday 15th of February 2025 01:55:47 AM CDT,"https://g2afree.info <--- free giftcards guide #468804
"
etjJnyFy,⭐ get any gift card for FREE,ericssons2,JavaScript,Saturday 15th of February 2025 01:44:38 AM CDT,"https://g2afree.info <--- free giftcards guide #907621
"
iFH6cHAD,⭐ get any gift card for FREE,ell1as,JavaScript,Saturday 15th of February 2025 01:42:59 AM CDT,"https://g2afree.info <--- free giftcards guide #682220
"
idfjPEBG,⭐ giftcards for free,Post_maphone,JavaScript,Saturday 15th of February 2025 01:32:29 AM CDT,"https://g2afree.info <--- free giftcards guide #957269
"
22V6YA1K,⭐ FREE giftcards method,uibhib775adadad7rf,JavaScript,Saturday 15th of February 2025 01:11:41 AM CDT,"https://g2afree.info <--- free giftcards guide #728317
"
pRRtqEwU,⭐ giftcards for free,faysalbayzid,JavaScript,Saturday 15th of February 2025 01:00:06 AM CDT,"https://g2afree.info <--- free giftcards guide #437746
"
E21ZQJdx,⭐ get any gift card for FREE,sautome,JavaScript,Saturday 15th of February 2025 12:59:14 AM CDT,"https://g2afree.info <--- free giftcards guide #985495
"
megnKhda,⭐ get any gift card for FREE,dpddod,JavaScript,Saturday 15th of February 2025 12:51:51 AM CDT,"https://g2afree.info <--- free giftcards guide #669333
"
X33brsJD,⭐ FREE giftcards method,vnthispc,JavaScript,Saturday 15th of February 2025 12:47:17 AM CDT,"https://g2afree.info <--- free giftcards guide #973173
"
HWNcTa1t,⭐ get any gift card for FREE,dpddod,JavaScript,Saturday 15th of February 2025 12:42:54 AM CDT,"https://g2afree.info <--- free giftcards guide #849718
"
X622EELs,Stardewing You're Mom - QoL Modlist,Ddetrimental,Python,Saturday 15th of February 2025 12:40:07 AM CDT,"                                      ESSENTIALS
 
SMAPI                                                 :: https://www.nexusmods.com/stardewvalley/mods/2400
Content Patcher [Asset Implementation]                :: https://www.nexusmods.com/stardewvalley/mods/1915
Generic Mod Config Menu (GMCM)                        :: https://www.nexusmods.com/stardewvalley/mods/5098
GMCM Options                                          :: https://www.nexusmods.com/stardewvalley/mods/10505

 
# Content Patcher is somewhat necessary for asset replacement (i.e. portraits, clothes, etc.)
# Though, it is not compatible with the Anime Portraits mod until the version of it that DOES use it, is released.
 
# Turn to your Enemies is incredibly useful since the combat in this game is absolute cheeks.
# Auto-Grab Truffles is handy due to pigs wandering into the farthest reaches of your farm, leaving truffles there.
# I don't know why we needed decay on both buildings and friendship, it's ridiculously stupid. May as well put a durability bar on top of our tools and go all the way with it. AND WHY DOES UPGRADING MY TOOL MAKE IT FEEL SLOW, GOD
# NPC Map Locations so that I don't have to check the wiki to stalk everyone every second.
# Range Display is necessary for min-maxing scarecrows and sprinklers without having to count every tile indidividually.
 

Auto-Grab Truffles [QoL]                              :: https://www.nexusmods.com/stardewvalley/mods/14162
Better Shipping Bin [QoL]                             :: https://www.nexusmods.com/stardewvalley/mods/10487
Better Watering Can and Hoe [QoL]                     :: https://www.nexusmods.com/stardewvalley/mods/23946
Friends Forever (1.6) [QoL]                           :: https://www.nexusmods.com/stardewvalley/mods/20702
No Fence Decay REDUX [QoL]                            :: https://www.nexusmods.com/stardewvalley/mods/20802
NPC Map Locations [QoL]                               :: https://www.nexusmods.com/stardewvalley/mods/239
Range Display [QoL]                                   :: https://www.nexusmods.com/stardewvalley/mods/1179
Stardew Valley Anime Portraits [Preference]           :: https://www.nexusmods.com/stardewvalley/mods/1839 
Time Freeze Indoors [QoL]                             :: https://www.nexusmods.com/stardewvalley/mods/973
ToDew [QoL + Preference]                              :: https://www.nexusmods.com/stardewvalley/mods/7409
Turn to your Enemies [QoL]                            :: https://www.nexusmods.com/stardewvalley/mods/12643
Last Updated: February 15, 2025"
